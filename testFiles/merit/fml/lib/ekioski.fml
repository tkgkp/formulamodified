:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ekioski.fml
:: Utworzony: 03.2015
:: Autor: SZP
::======================================================================================================================
:: Zawartość: Obsługa e-kiosków
::======================================================================================================================


\gen_code_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Generuje kod kreskowy dla użytkownika e-kiosków/operatorów mobilnych
::----------------------------------------------------------------------------------------------------------------------
_code:='';
:: Generacja 30 znakowego unikalnego identyfikatora
_losuj:="int(_a*rand())";
_unik:='';
:: Generacja 30 znakowego unikalnego numeru
{! _i:=1..30
|! {!
   |? _int:=48+_losuj(75);
      {? _int>=58 & _int<=64 || _loop:=1
      |? _int>=91 & _int<=96 || _loop:=1
      || _loop:=0
      ?};
      _loop
   !};
   _unik+=%_int
!};
:: Dodatkowe przekodowanie teoretycznie niepotrzebne
_code:='90'+exec('pwd_encode','#string',_unik,exec('encode_key','ekioski'));
:: Zwracamy kod o długości wg parametru 500641 znakowy
exec('get','#params',500641)+_code


\encode_key
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Klucz kodujacy
::----------------------------------------------------------------------------------------------------------------------
'j88brflmobp5v5ji6z40t1u3'


\drukUserEtyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AJ [12.46]
:: OPIS: wydruk etykiety
::----------------------------------------------------------------------------------------------------------------------
{? USERS.IP<>''
|| exec('myDPRINT','object');
   exec('rep_exec','#b_report','','tte_ek_bar')
|| FUN.emsg('Użytkownik musi mieć wygenerowany identyfikator, aby wydrukować etykietę.'@)
?};
~~


\startEkiosk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Otwarcie ekiosku
::   WE: _a - symbol oddziału
::       _b - symbol wydziału (albo '')
::       _c - symbol stanowiska (albo '')
::       _d - symbol gniazda (albo '')
:: ~OST: INBLFILE,INFCOPY,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
_oddzial:=_a;
_wydzial:=_b;
_twrkplc:=_c;
_twrkzbr:=_d;

{? exec('interm','#system')
|| FUN.emsg(exec('interm_nacc_msg','#system'));
   return()
?};

P.fld_attr(,2);
OSOBA.fld_attr(,2);
USERS.fld_attr(,2);

:: Informacja że obsługa przez Terminal - inna obsługa jest przez jTerm i Terminal
FUN.STANDARD:=0;
VEK.blank(1);
VEK.TERM:='T';

:: Ustawiam rozmiar okna jTerma na 1280x1024 ponieważ do takiej rozdzielczości są projektowane wszystkie okna
_panelplus:=exec('libload','#desktop');
_panelplus.set_jterm_size(1280,1024);

:: Ustalam bieżącą wartość DPI, dla niepoprawnych wartości wyjście z systemu
:: DPI=96 - skalowanie 100%
:: DPI=120 - skalowanie 125%
VEK.DPI:=_panelplus.get_dpi();
{? VEK.DPI<>96 & VEK.DPI<>120
|| FUN.info(
      'System został uruchomiony z DPI=%1.'@[$VEK.DPI]+'\n'+
      'Wartość nie jest obsługiwana.'@
   );
   return()
::|| FUN.info(
::      'System został uruchomiony z DPI=%1.'@[$VEK.DPI]
::   )
?};

title(exec('nazwa','#system')+': '+'E-kiosk'@,'title_bar',1);
title('E-kiosk'@,'tab',1);

set_help(exec('set_help','#help','TTE_WYK_EKIOSK'));
OPERATOR.EKIOSK:=OPERATOR.USER;

::--------------------------------------
:: Walidowanie całego słownika wydziałów - sprawdzane tutaj prewencyjnie
::_sch:=exec('domyslny','schemat','PODZORG');
::UD_DEF.cntx_psh(); UD_DEF.index('SCHSYM');
::SLO.cntx_psh(); SLO.index('SL');
::SLO.prefix(XINFO.SLWYDZIA);
::{? SLO.first()
::|| {!
::   |? UD_DEF.prefix(_sch,SLO.KOD,);
::      {? ~UD_DEF.first()
::      || FUN.info(
::            'Nie znaleziono elementu \'\'%1\'\' struktury organizacyjnej — '
::            'należy sprawdzić konfigurację słownika wydziałów.'@
::            [SLO.KOD]
::         );
::         UD_DEF.cntx_pop(); SLO.cntx_pop();
::         return()
::      ?};
::      SLO.next()
::   !}
::?};
::UD_DEF.cntx_pop(); SLO.cntx_pop();

{? _oddzial=''
|| FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Oddział musi być podany.'@);
   return()
|? _wydzial<>'' & _twrkplc<>''
|| FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Wydział i stanowisko nie mogą być jednocześnie podane.'@);
   return()
|? _wydzial<>'' & _twrkzbr<>''
|| FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Wydział i gniazdo nie mogą być jednocześnie podane.'@);
   return()
?};

{? ~exec('FindInSet','#table','ODDZ','KOD',_oddzial,,,1)
|| FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Nie znaleziono oddziału: %1.'@[_oddzial]);
   return()
?};

_wydzial_ref:=null();
{? _wydzial<>''
|| SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix(XINFO.SLWYDZIA,_wydzial,);
   {? SLO.first()
   || _wydzial_ref:=SLO.ref()
   || FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Nie znaleziono wydziału: %1.'@[_wydzial]);
      SLO.cntx_pop();
      return()
   ?};
   SLO.cntx_pop()
?};

_twrkplc_ref:=null();
{? _twrkplc<>''
|| TWRKPLC.cntx_psh();
   TWRKPLC.index('KOD');
   TWRKPLC.prefix(_twrkplc,);
   {? TWRKPLC.first()
   || _wydzial:=TWRKPLC.WYD().KOD;
      _wydzial_ref:=TWRKPLC.WYD;
      _twrkplc_ref:=TWRKPLC.ref()
   || FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Nie znaleziono stanowiska: %1.'@[_twrkplc]);
      TWRKPLC.cntx_pop();
      return()
   ?};
   TWRKPLC.cntx_pop()
?};

_twrkzbr_ref:=null();
{? _twrkzbr<>''
|| TWRKZBR.cntx_psh();
   TWRKZBR.index('SYM');
   TWRKZBR.prefix(_twrkzbr,);
   {? TWRKZBR.first()
   || _wydzial:=TWRKZBR.WYD().KOD;
      _wydzial_ref:=TWRKZBR.WYD;
      _twrkzbr_ref:=TWRKZBR.ref()
   || FUN.info('Błąd konfiguracji terminala.'@+'\n\n'+'Nie znaleziono gniazda: %1.'@[_twrkzbr]);
      TWRKZBR.cntx_pop();
      return()
   ?};
   TWRKZBR.cntx_pop()
?};

exec('ikony_ekiosk','ekioski');

:: wyjście z okna logowania tylko na 1
VEK.EXIT:=0;

VEK.win_edit({? sec_superuser()>0 || 'LOGIN2' || 'LOGIN' ?});
fcopy('logo.bmp','@!Tmp/logo.bmp',1,0,1);
VEK.bl_file('LOGO1',1,'@'+tmp_dir()+'/logo.bmp');
VEK.INIT_ODD:=_oddzial;
VEK.INIT_WYD:=_wydzial;
VEK.INIT_PLC:=_twrkplc;
VEK.INIT_ZBR:=_twrkzbr;

exec('__KAL','object');

{!
|?
   VEK.A_DATA:=date();
   VEK.A_WYD:=_wydzial_ref;
   VEK.TWRKPLC:=_twrkplc_ref;
   VEK.TWRKZBR:=_twrkzbr_ref;
   VEK.IP:='';

   _delete:="VAR_DEL.delete('eSelect','eLevel')";
   _delete();
:: Inicjalizacja obiektu pamietajacego tabele i okno biezace - potrzebne do funkcji nawigacyjnych
   eLevel:=exec('eLevel','ekioski',100);
:: Inicjalizacja obiektu pamietajacego stan okienka
   eSelect:=exec('eSelect','ekioski');
   eSelect.cmb_twrkplc:=null();
   eSelect.cmb_wyd:=null();
:: Symulacja wcisnietego klawisza ESC z poziomu przycisku
   eSelect.key_Esc:=0;
:: Wylogowanie calkowite do ekranu logowania
   eSelect.key_Logout:=0;
:: Zamyka okno selekcji poziom nizej
   eSelect.sel_exit:=0;
:: Wynik dzialania buttona w oknach grupowych
   eSelect.wyn_OK:=0;
:: Szerokosc panelu w oknie grupowym z kontrolka
   eSelect.grp_width:=100;


   _chk_edit:="_wyn:='';
               {? VEK.IP=''
               || FUN.info('Pusty identyfikator logowania.'@);
                  _wyn:='IP'
               ?};
               _wyn
              ";

   exec('blankVek','ekioski');

   {? VEK.edit(_chk_edit)
   ||
      USERS.cntx_psh();
      {? ~-VEK.IP='EXIT' | ~-VEK.IP='QUIT' | ~-VEK.IP='Q'
      ||
::       Magiczne słowa zamykające terminal - brak przycisku zakończ
         exec('exitLogin','ekioski');
         _auth:=-1
      ||
         _auth:=exec('autoryzacja','ekioski',VEK.IP,_oddzial)
      ?};

      {? _auth=1
      ||
::       Wczytanie parametrów pracy
         VAR_DEL.delete('__PARSES');
         exec('__PARSES','#object');
         exec('define','parses',__PARSES);
         __PARSES.setMode('U');
         _id:=__PARSES.clone('S','U');
         {? _id<>''
         || {? __PARSES.setMode('S',_id)
            ||
::             Ustalenie parametrów sesji (kluczowy jest oddział i okres, bo służą do ustalenia środowiska)
               __PARSES.setVal('OddzialLogProd',_oddzial);

               {? _wydzial=''
               ||
::                Wydział nie jest ustalony,
::                wtedy z przyczyn technicznych ustawiany jest setVal na pierwszy element słownika
::                (Uwaga: wcześniej jest walidowany cały słownik, czy nie jest popsuty)
                  SLO.index('SL');
                  SLO.prefix(XINFO.SLWYDZIA);
                  {? SLO.first()
                  || _wydzial:=SLO.KOD;
                     __PARSES.setVal('WydzialProd',_wydzial)
                  ?}
               || __PARSES.setVal('WydzialProd',_wydzial)
               ?};

::             Ustawienie elementu struktury organizacyjnej na podstawie symbolu wydziału
               {? _wydzial<>''
               || _args:=__PARSES.args('JednostkaOrganizacyjna');
                  _args.SYMBOL:=_wydzial;
                  __PARSES.setVal('JednostkaOrganizacyjna',_args);
                  obj_del(_args)
               ?};

               _args:=__PARSES.args('OkresRok');
               _args.OBSZAR:='LMG';
               _args.AR:=date()~1;
               _args.AM:=date()~2;
               __PARSES.setVal('OkresRok',_args);
               obj_del(_args);

               {? __PARSES.getVal('Magazyn').REF=null()
               ||
::                Ustalenie magazynu - pierwszy spośród uprawnionych
                  exec('filtrmg','parses');
                  {? MG.f_first() || __PARSES.setVal('Magazyn',MG.ref()) ?}
               ?};

               {? __PARSES.setEnv('TTE_WYK')
               ||
                  {? ST.AR=0
                  || FUN.info(
                        'Błąd konfiguracji systemu.\n\n'
                        'Brak zdefiniowanego okresu %1/%2 dla dziedziny %3.'@
                        [$(date()~1),$(date()~2),exec('name','#b_domain','LMG')]
                     )
                  ||
                     exec('register_login','ekioski');

                     exec('rejestracja','prod_rej');

                     {? var_pres('ProdRej')>100
                     ||
                        VEK.A_DATA:=date();

                        {? exec('upr_kierownik','ekioski')
                        ||
                           exec('spr_zadania','ekioski',_wydzial_ref,_twrkplc_ref,_twrkzbr_ref);
::                        exec('setAktBryg','ekioski');
                           exec('panel_bryg','ekioski');
                           1
                        |? exec('upr_pracownik','ekioski')
                        ||
::                      Tylko okno combobox do rejestacji produkcji
                           exec('spr_zadania','ekioski',_wydzial_ref,_twrkplc_ref,_twrkzbr_ref);
                           exec('okno_red_prac','ekioski');
                           1
                        ||
                           FUN.info('Brak uprawnień do czynności umożliwiających dostęp do terminala.'@)
                        ?}
                     ?};

                     exec('register_logout','ekioski')
                  ?}
               || FUN.info('Uruchomienie sesji nie powiodło się.'@)
               ?}
            || FUN.info('Uruchomienie sesji nie powiodło się.'@)
            ?}
         || FUN.info('Przygotowanie parametrów sesji nie powiodło się.\nObszar nie może być uruchomiony.'@)
         ?}
      |? _auth=2
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Konto istnieje, ale jest nieaktywne.'@)

      |? _auth=3
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Nie znaleziono wydziału pracownika w słowniku Wydziałów.'@)

      |? _auth=4
      || FUN.info('Brak uprawnień do czynności umożliwiających dostęp do terminala.'@)

      |? _auth=5
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Brak uprawnień do oddziału %1.'@[_oddzial])

      |? _auth=6
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Pracownik nie jest zatrudniony w firmie %1.'@[REF.FIRMA().SYMBOL])

      |? _auth=8
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Brak aktualnego zatrudnienia.'@)

      |? _auth=0
      || FUN.info('Zalogowanie niemożliwe.'@+'\n\n'+'Nieprawidłowy identyfikator logowania.'@)

::      |? _auth=7 i inne
      || 'bez komunikatów'
      ?};
      USERS.cntx_pop()
   ?};
   ~VEK.EXIT
!};
VEK.blank();
FUN.STANDARD:=1;
~~


\termIpF3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: F3 podczas wyboru użytkownika który się loguje
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? sec_superuser()>0
||
   USERS.cntx_psh();
   USERS.index('EKIOSK');
   USERS.prefix('T','T');

   _wer:=exec('win_users','ekioski');

   USERS.win_sel(_wer);
   {? USERS.select(,1,10)
   || _wyn:=USERS.IP
   ?};
   USERS.cntx_pop()
?};
_wyn


\win_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania USERS - tylko podglad
::   WY: okno wertowania
::----------------------------------------------------------------------------------------------------------------------
_wer:=USERS.mk_sel('Lista użytkowników terminala'@,'P',,'winusers',5,6,15,,'U');

USERS.win_fld(_wer,,'DANE',,,14,,,'Użytkownik'@);
USERS.win_fld(_wer,OSOBA,'NAZWISKO',,,14,,,'Nazwisko'@);
USERS.win_fld(_wer,OSOBA,'PIERWSZE',,,13,,0,'Pierwsze'@);
::USERS.win_fld(_wer,P,'OSOBA','DRUGIE',,10,,0,'Drugie'@);
USERS.win_fld(_wer,VEK,'ROLE',,,20,,0,'Role'@);
::USERS.win_fld(_wer,P,'WYDZIAL','SYMBOL',,10,,0,'Wydział'@);
USERS.win_fld(_wer,,'IP',,,16,,,'Identyfikator'@);
::USERS.win_fld(_wer,,'AKT',,,4,,,'Akt.',,'Aktywny@',2,,"'T'","'N'");
USERS.win_act(_wer,0,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_btn:=USERS.win_btn(_wer,'text='+'Wybierz'@,'menu:W');
USERS.btn_sopt(_wer,_btn,'default=1');
USERS.win_act(_wer,,'Formuła','Aktywuj wylogowywanie'@@,,
   'Aktywuje wylogowywanie użytkownika po 180 s'@,"VAR.DEBUG:=0",,,,,,'A'
);
_btn:=USERS.win_btn(_wer,'text='+'Aktywuj wylogowywanie'@+',panel=bottom,align=begin','menu:A');
USERS.btn_sopt(_wer,_btn,'tooltip='+'Aktywuje wylogowywanie użytkownika po 180 s'@);
USERS.win_act(_wer,,'Formuła','Dezaktywuj wylogowywanie'@@,,
   'Dezaktywuje wylogowywanie użytkownika po 180 s'@,"VAR.DEBUG:=1",,,,,,'D'
);
_btn:=USERS.win_btn(_wer,'text='+'Dezaktywuj wylogowywanie'@+',panel=bottom,align=begin','menu:D');
USERS.btn_sopt(_wer,_btn,'tooltip='+'Dezaktywuje wylogowywanie użytkownika po 180 s'@);
USERS.win_act(_wer,0,'Kolejność');
USERS.win_act(_wer,0,'Szukaj');
_fml:="
   _role:='';
   USERS.OSOBA();
   B_USRROL.cntx_psh();
   B_USRROL.index('USER');
   B_USRROL.prefix(REF.FIRMA,USERS.ref());
   _it:=1;
   _max_role:=5;
   {? B_USRROL.first()
   || {!
      |? _role+=B_USRROL.B_ROLE().NAME+'; ';
         _it+=1;
         B_USRROL.next() & _it<_max_role
      !}
   ?};
   B_USRROL.cntx_pop();
   VEK.ROLE:=_role;
   {? _a
   || USERS.actions_grayed(cur_win(1,1),{? VAR.DEBUG || 'D' || 'A' ?})
   ?};
   ~~
";
USERS.win_act(_wer,,'Rekord',,,,_fml);

USERS.win_sel(_wer);
_wer


\blankVek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wyzerowanie wartości niektórych pól zmiennej VEK
::----------------------------------------------------------------------------------------------------------------------
VEK.P:=null();
::VEK.A_WYD:=null();
VEK.A_WYDDT:=date(0,0,0);
VEK.ROLA:=null();
VEK.PROD_REJ:=null();
VEK.ZGP:=null();
VEK.KAP:=null();
VEK.A_DATA:=date(0,0,0);
VEK.A_TIME:=time(0,0,0);
VEK.A_ZLBR:=null();
VEK.P_INIC:='';
VEK.P_NAZ:='';
VEK.IL:=0;
1


\exitLogin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wylogowanie
::----------------------------------------------------------------------------------------------------------------------
VEK.EXIT:=1;
'key:Esc'


\autoryzacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Autoryzacja użytkownika na terminalu
::   WE: _a - identyfikator użytkownika
::       _b - kod oddziału
::   WY: 0 - brak użytkownika
::       1 - autoryzacja udana - TYLKO TEN WYNIK AUTORYZUJE UZYTKOWNIKA TERMINALA
::       2 - użytkownik istnieje ale nie jest aktywny
::       3 - nie znaleziono prawidłowo wydziału ze słownika wydziałów
::       4 - użytkownik istnieje ale nie ma roli (a dokładnie uprawnień do czynności)
::       5 - użytkownik nie ma dostępu do wybranego oddziału
::       6 - użytkownik jest pracownikiem z innej firmy
::       7 - użytkownik nie ma uprawnień do danych związanych z dostępnymi czynnościami lub zrezygnowano z wyboru
::       8 - brak angażu
::----------------------------------------------------------------------------------------------------------------------
_ip:=_a;
_oddzial:=_b;

_wyn:=0;

USERS.cntx_psh();
USERS.prefix();
USERS.blank(1);
USERS.IP:=_ip;
{? _ip<>'' & USERS.find_rec()
||
:: Tu jeszcze sprawdzanie czy użytkownik aktywny
   {? USERS.AKT='T' & USERS.EKIOSK='T'
   ||
::    Lista pracowników danej osoby wg kryterów zatrudnienia na bieżący dzień
      _from:='join F_ZATR';
      _where:='
         P.OSOBA=:_a
         and F_ZATR.DOCELOWA=\'T\'
         and P.FIRMA=:_b
         and (P.ZA=\'T\' or P.DZ=to_date(:_c))
      ';
      P.f_set('OSOBA,DZA^,DZ^',_from,_where,USERS.OSOBA,REF.FIRMA,date()-1);
      P.win_sel(exec('win_prac_f3','ekioski'));
      {? P.f_size()>0
      || {? (P.f_size()=1 & P.f_first()
            | (eLevel.up(P,P.win_sel('?'),'PRAC_F3');_sel:=P.select();eLevel.down(); _sel & eSelect.wyn_OK=1))
         || {? P.FIRMA=REF.FIRMA
            ||
::             Ustalony jest zawsze użytkownik (OPERATOR.USER) oraz pracownik (VEK.P)
               OPERATOR.USER:=USERS.ref();
               VEK.P:=P.ref();

::             Sprawdzenie uprawnień do danych związanych z dostępnymi czynnościami
               {? (exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL') &
                   ~Perm.hasPermissions(exec('FindInSet','#table','B_ACTION','UNIK','TTE_WYK_DWZL'
                                         ,,"B_ACTION.ref()",1,,null()))) |
                  (exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWBZ') &
                   ~Perm.hasPermissions(exec('FindInSet','#table','B_ACTION','UNIK','TTE_WYK_DWBZ'
                                         ,,"B_ACTION.ref()",1,,null()))) |
                  (exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_TBRG') &
                   ~Perm.hasPermissions(exec('FindInSet','#table','B_ACTION','UNIK','ZWS_PAR_TBRG'
                                         ,,"B_ACTION.ref()",1,,null())))
               || _wyn:=7
               ||
                  USERS_UP.index('ODDZ');
                  USERS_UP.prefix(OPERATOR.USER,'ODDZ',exec('FindInSet','#table','ODDZ','KOD',_oddzial,,,1));
                  {? USERS_UP.first()
                  ||
                     _slo_wyd_ref:=exec('userWydz','ekioski');

                     {? _slo_wyd_ref=null() & exec('upr_kierownik','ekioski')
                     ||
::                      Domyślnie pierwszy wydział ze slownika, dla kierownika (będzie mógł potem zmienić)
                        _slo_wyd_ref:=exec('findFirstWyd','ekioski')
                     ?};

                     {? exec('upr_pracownik','ekioski')=0 &
                        exec('upr_brygadzista','ekioski')=0 &
                        exec('upr_kierownik','ekioski')=0
                     || _wyn:=4

::                   Udana autoryzacja
                     |? _slo_wyd_ref<>null()
                     ||
:: TODO: to wygląda na niepotrzebne
::         VEK.A_WYD:=_slo_wyd_ref;
::         VEK.TWRKPLC:=null();

::                      Ustawiamy aktywną brygadę
                        exec('setAktBryg','ekioski');

                        _wyn:=1

                     || _wyn:=3
                     ?}

                  || _wyn:=5
                  ?}
               ?}

            || _wyn:=6
            ?}

         || _wyn:=7
         ?}

      || _wyn:=8
      ?}

   || _wyn:=2
   ?}

|| _wyn:=0
?};
USERS.cntx_pop();
_wyn


\ile_w_zlbs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja zwraca ilość pracowników w brygadzie
::   WE: _a - ZLBR.ref()
::   WY: ilosc
::----------------------------------------------------------------------------------------------------------------------
_ile:=0;
ZLBS.cntx_psh();
ZLBS.index('BODIP');
ZLBS.prefix(_a);
_ile:=ZLBS.size();
ZLBS.cntx_pop();
_ile


\userWydz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wyznacza wydział dla użytkownika e-kiosków (w kontekście ustalonego pracownika: VEK.P)
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
_sym:=VEK.P().WYDZIAL().SYMBOL;
{? _sym<>''
|| SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix(XINFO.SLWYDZIA,_sym,);
   {? SLO.first()
   || _ret:=SLO.ref()
   ?};
   SLO.cntx_pop()
?};
_ret


\findFirstWyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ???
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
SLO.cntx_psh();
SLO.index('SL');
SLO.prefix(XINFO.SLWYDZIA);
{? SLO.first()
|| _ret:=SLO.ref()
?};
SLO.cntx_pop();
_ret


\spr_zadania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ???
::   WE: _a - SLO.ref() = ograniczenie do wydziału
::       _b - TWRKPLC.ref() = ograniczenie do stanowiska
::       _c - TWRKZBR.ref() = ograniczenie do gniazda (nie jest używane, ale do implementacji, o ile konieczne)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wydzial_ref:=_a;
_twrkplc_ref:=_b;
_twrkzbr_ref:=_c;

_twrkplc:=VEK.TWRKPLC;
_twrkzbr:=VEK.TWRKZBR;

:: W pierwszej kolejnosci szukamy czy pracownik ma cokolwiek uruchomione na wydziale dowolnym (o ile nie jest określony)
_jest_run:=1;
_jest_kap:=0;
FILTER.blank(1);

exec('work_end_filter_prepare','ekioski');

:: 1.Aktualny wydzial        [null] lub [SLO.ref()]
FILTER.PR_A_WYD:=_wydzial_ref;
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
FILTER.PR_A:='T';
:: 3.Dostepny do rejestracji [T] tak, [N] nie, [] all
FILTER.PR_DOREJ:='';
:: 4.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
FILTER.PR_OK:='';
:: 5.Zgloszony problem       [T] tak, [N] nie, [] all
FILTER.PR_PROB:='';
:: 6.Stanowisko              [null] lub [TWRKPLC.KOD]
FILTER.PR_RESS:=exec('FindAndGet','#table',TWRKPLC,_twrkplc_ref,,"KOD",'');

exec('filter','prod_rej');

:: W drugiej kolejnosc filtr na karty przydzielone pracownikowi - tzw. "kolejka KAP" niestety wg kolejnosci filtra PROD_REJ
{? PROD_REJ.f_first()=0
||
   _jest_run:=0;
   _jest_kap:=1;
   FILTER.blank(1);

   exec('work_start_filter_prepare','ekioski');

:: 1.Aktualny wydzial        [null] lub [SLO.ref()]
   FILTER.PR_A_WYD:=_wydzial_ref;
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
   FILTER.PR_A:='T';
:: 3.Dostepny do rejestracji [T] tak, [N] nie, [] all
   FILTER.PR_DOREJ:='T';
:: 4.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
   FILTER.PR_OK:='N';
:: 5.Zgloszony problem       [T] tak, [N] nie, [] all
   FILTER.PR_PROB:='N';
:: 6.Stanowisko              [null] lub [TWRKPLC.KOD]
   FILTER.PR_RESS:=exec('FindAndGet','#table',TWRKPLC,_twrkplc_ref,,"KOD",'');
:: 7.Karty pracy przypisane do pracownika [null] lub [P.ref()]
   FILTER.PR_P:=VEK.P;

   exec('filter','prod_rej')
?};

:: Dodatkowo wybranie pierwszej przydzielonej karty - tzw. "kolejka KAP"
::{? 0 & _jest_kap=1 & PROD_REJ.f_first()
::||
:: Ustawienie w filtrze PROD_REJ jednej karty pracy (pierwszej w kolejnosci przydzielania)
::   exec('one_kap_filtr','ekioski')
::?};

:: TODO: warunek wyłączony
{? PROD_REJ.f_first(); 0
||
   _skl_wyd_sym:=PROD_REJ.WYD().SYMBOL;
   _slo_wyd_ref:=PROD_REJ.ZL().JORG;
   {? VEK.A_WYD<>_slo_wyd_ref
   ||
      {? exec('upr_kierownik','ekioski')=0
      ||
::       Przelaczamy wydzial bez pytania
         VEK.A_WYD:=_slo_wyd_ref;
         VEK.TWRKPLC:=PROD_REJ.ZGP().PLACE

      ||
         {? _jest_run=1 || _praca:='uruchomioną'
         |? _jest_kap=1 || _praca:='przydzieloną'
                        || _praca:=''
         ?};

         {? _jest_run=1 | FUN.ask('Posiadasz pracę %1 na innym dziale niż swoim. Przełączyć na ten dział?'@[_praca])
         ||
::          Przelaczamy wydzial i zmieniamy role na zwyklego pracownika
::            VEK.ROLA:=exec('find_usersgrp','ekioski','PRpracownik');
            VEK.A_WYD:=_slo_wyd_ref;
            VEK.TWRKPLC:=PROD_REJ.ZGP().PLACE
         ?}
      ?}
   ?}
||
   _jest_run:=0;
   _jest_kap:=0;
   'pracownik nie ma nic rozpoczete, ani nie ma nic przypisane na dzialach'
?};
VEK.TWRKPLC:=_twrkplc;
VEK.TWRKZBR:=_twrkzbr;
1


\work_end_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Tworzy tabelkę PROD_REJów które pojawiają się w widoku 'Koniec pracy'
::   WY: tab_tmp - tabelka tymczasowa z jednym polem REF (STRING[16])
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'REF','STRING[16]','$PROD_REJ.ref()');

PROD_REJ.cntx_psh();

:: Jeżeli jest ustawiony kontekst konkretnego rekordu, to tylko ten jeden
{? VEK.PROD_REJ<>null()
|| _tab.REF:=$VEK.PROD_REJ;
   _tab.add()
||
:: Rejestracje bezpośrednio do zlecenia
::   _tabZL:=sql('
::      select PROD_REJ.REFERENCE as REF
::      from @ZLGD
::      join PROD_REJ using(ZLGD.ZGP,PROD_REJ.ZGP)
::      where
::         PROD_REJ.SRODZ=''ZL''
::         and ZLGD.ZAK=''N''
::         and (ZLGD.P=:_a or ZLGD.B=:_b)
::      union all
::      select PROD_REJ.REFERENCE as REF
::      from @ZLGD
::      join PROD_REJ using(ZLGD.GROP,PROD_REJ.GROP)
::      where
::         PROD_REJ.SRODZ=''ZL''
::         and PROD_REJ.WYD is not null
::         and ZLGD.ZAK=''N''
::         and (ZLGD.P=:_a or ZLGD.B=:_b)
::   ',VEK.P,VEK.A_ZLBR);

   ZLGD.cntx_psh();

::   _zlgd_names:=ZLGD.names();
::   {? _zlgd_names.first()
::   || {!
::      |? ZLGD.use(_zlgd_names.NAME);
::         ZLGD.index('EK1');
::         _zlgd_names.next()
::      !}
::   ?};
::   PROD_REJ.index('ZL');
::   PROD_REJ.prefix('ZL');
::   {? PROD_REJ.first()
::   || {!
::      |? {? _zlgd_names.first()
::         || {!
::            |? ZLGD.use(_zlgd_names.NAME);
::               ZLGD.prefix('N',PROD_REJ.ZGP,PROD_REJ.GROP,VEK.P,null());
::               {? ZLGD.first()
::               || _tab.REF:=$PROD_REJ.ref();
::                  _tab.add()
::               ?};
::               ZLGD.prefix('N',PROD_REJ.ZGP,PROD_REJ.GROP,null(),VEK.A_ZLBR);
::               {? ZLGD.first()
::               || _tab.REF:=$PROD_REJ.ref();
::                  _tab.add()
::               ?};
::               _zlgd_names.next()
::            !}
::         ?};
::         PROD_REJ.next()
::      !}
::   ?};

   _zlgd_names:=ZLGD.names();
   {? _zlgd_names.first()
   || {!
      |? ZLGD.use(_zlgd_names.NAME);
         ZLGD.index('EK2');
         ZLGD.prefix('N',VEK.P,null());
         {? ZLGD.first()
         || {!
            |?
               {? ZLGD.ZGP<>null()
               || _tab.REF:=exec('FindInSet','#table','PROD_REJ','ZGP',ZLGD.ZGP,'ZL',"$PROD_REJ.ref()",,,'');
                  _tab.add()
               |? ZLGD.GROP<>null()
               || _tab.REF:=exec('FindInSet','#table','PROD_REJ','GROP',ZLGD.GROPS,'ZL',"$PROD_REJ.ref()",,ZLGD.GROP,'');
                  _tab.add()
               ?};
               ZLGD.next()
            !}
         ?};
         ZLGD.prefix('N',null(),VEK.A_ZLBR);
         {? ZLGD.first()
         || {!
            |?
               {? ZLGD.ZGP<>null()
               || _tab.REF:=exec('FindInSet','#table','PROD_REJ','ZGP',ZLGD.ZGP,'ZL',"$PROD_REJ.ref()",,,'');
                  _tab.add()
               |? ZLGD.GROP<>null()
               ||  _tab.REF:=exec('FindInSet','#table','PROD_REJ','GROP',ZLGD.GROPS,'ZL',"$PROD_REJ.ref()",,ZLGD.GROP,'');
                  _tab.add()
               ?};
               ZLGD.next()
            !}
         ?};
         _zlgd_names.next()
      !}
   ?};

   ZLGD.cntx_pop();

:: Rejestracje do planu operacyjnego
   _tabPL:=sql('
      select PROD_REJ.REFERENCE as REF
      from @PL_WYK
      join PROD_REJ using(PL_WYK.PL_OZ,PROD_REJ.PL_OZ)
      where
         PROD_REJ.SRODZ=''PL''
         and PL_WYK.ENDD is null
         and (PL_WYK.P=:_a or PL_WYK.ZLBR=:_b)
   ',VEK.P,VEK.A_ZLBR);

:: Rejestracje do planu strategicznego
   _tabPX:=sql('
      select PROD_REJ.REFERENCE as REF
      from @PX_WYK
      join PROD_REJ using(PX_WYK.PX_POZ,PROD_REJ.PX_POZ)
      where
         PROD_REJ.SRODZ=''PX''
         and PX_WYK.ZAK=''N''
         and PX_WYK.P=:_a
   ',VEK.P);

::   {? _tabZL.first()
::   || {!
::      |? _tab.REF:=_tabZL.REF;
::         _tab.add();
::         _tabZL.next()
::      !}
::   ?};
   {? _tabPL.first()
   || {!
      |? _tab.REF:=_tabPL.REF;
         _tab.add();
         _tabPL.next()
      !}
   ?};
   {? _tabPX.first()
   || {!
      |? _tab.REF:=_tabPX.REF;
         _tab.add();
         _tabPX.next()
      !}
   ?};
   ~~
?};

PROD_REJ.cntx_pop();

_tab


\work_end_filter_prepare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Pobiera listę uruchomionych rzeczy i przekazuje ją do obiektu ProdRej, gdzie zostanie
::       użyta podczas filtrowania
::   WE: [_a] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('work_end_a','ekioski');

_args.SORT:='';
_args.WHERE:='PROD_REJ.REFERENCE in (select :_a.REF from :_a order by 1 ) ';
_args.JOIN:='';
_args.TAB:={? var_pres('_a')>100 || _a || exec('work_end_tab','ekioski') ?};

exec('rejestracja','prod_rej',_args);
~~


\work_end_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ???
::   WE: _a - czy wybor parametrow (aktywny tylko dla grupy 'wdrozenia')
::       _b - P.ref()/null() - rejestracje beda dotyczyc wybranego pracownika
::       _c - ZLBR.ref()/null() - rejestracje beda dotyczyc wybranej brygady
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of("") || _close:="" || _close:=_a ?};
{? var_pres('_b')<>type_of(null()) || _pracownik:=null() || _pracownik:=_b ?};
{? var_pres('_c')<>type_of(null()) || _zlbr:=null() || _zlbr:=_c ?};

_args:=exec('rejestracja_a','prod_rej');
_args.F_NAWIG:=1;
_args.F_FILTER:=1;
_args.F_START:=1;
_args.F_STOP:=1;
_args.F_WYKON:=1;
_args.F_XWYKON:=1;
_args.F_PROB:=1;
_args.F_DOC:=1;
_args.F_MAT:=1;
_args.F_PRAC:=1;
_args.F_BRYG:=1;
_args.F_REJ:=1;
_args.F_POTW:=1;
_args.F_XPOTW:=1;
_args.F_NPU:=1;
_args.FILTR_PX:=1;
_args.FILTR_PL:=1;
_args.FILTR_ZL:=1;
_args.ED_DATA:=1;
_args.ED_ZAKR:=1;
_args.ED_RES:=1;
_args.ED_M:=1;
_args.ED_WYD:=1;
_args.ED_OPIS:=1;
_args.ED_START:=1;
_args.ED_OK:=1;
_args.ED_PROB:=1;
_args.ED_PRAC:=1;
_args.ED_BRYG:=1;
_args.ED_KOOP:=1;
_args.ED_A:=1;
_args.ED_DOREJ:=1;
_args.ED_PX:=1;
_args.ED_PL:=1;
_args.ED_ZL:=1;
_args.C_P:=_pracownik;
_args.C_ZLBR:=_zlbr;
_args.SORT:='';
_args.WHERE:='';
_args.JOIN:='';
_args.TAB:=0;
_args.FORM:='';
_args.CLOSE:="";
_args


\work_start_filter_prepare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Pobiera listę uruchomionych rzeczy i przekazuje ją do obiektu ProdRej, gdzie zostanie
::       użyta podczas filtrowania
::   WE: [_a] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('work_rej_a','ekioski');
_args.SORT:='';
_args.WHERE:='PROD_REJ.REFERENCE not in (select :_a.REF from :_a order by 1 ) ';
_args.JOIN:='';
_args.TAB:={? var_pres('_a')>100 || _a || exec('work_end_tab','ekioski') ?};
exec('rejestracja','prod_rej',_args);
~~


\work_start_filter_kap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Pobiera listę uruchomionych rzeczy i przekazuje ją do obiektu ProdRej, gdzie zostanie
::       użyta podczas filtrowania
::   WE: [_a] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('work_rej_a','ekioski');
_args.SORT:='';
_args.WHERE:='PROD_REJ.REFERENCE not in (select :_a.REF from :_a order by 1 ) ';
_args.JOIN:='';
_args.TAB:={? var_pres('_a')>100 || _a || exec('work_end_tab','ekioski') ?};
exec('rejestracja','prod_rej',_args);
~~


\work_rej_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ???
::   WE: _a - czy wybor parametrow (aktywny tylko dla grupy 'wdrozenia')
::       _b - P.ref()/null() - rejestracje beda dotyczyc wybranego pracownika
::       _c - ZLBR.ref()/null() - rejestracje beda dotyczyc wybranej brygady
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of("") || _close:="" || _close:=_a ?};
{? var_pres('_b')<>type_of(null()) || _pracownik:=null() || _pracownik:=_b ?};
{? var_pres('_c')<>type_of(null()) || _zlbr:=null() || _zlbr:=_c ?};

_args:=exec('rejestracja_a','prod_rej');
_args.F_NAWIG:=1;
_args.F_FILTER:=1;
_args.F_START:=1;
_args.F_STOP:=1;
_args.F_WYKON:=1;
_args.F_XWYKON:=1;
_args.F_PROB:=1;
_args.F_DOC:=1;
_args.F_MAT:=1;
_args.F_PRAC:=1;
_args.F_BRYG:=1;
_args.F_REJ:=1;
_args.F_POTW:=1;
_args.F_XPOTW:=1;
_args.F_NPU:=1;
_args.FILTR_PX:=1;
_args.FILTR_PL:=1;
_args.FILTR_ZL:=1;
_args.ED_DATA:=1;
_args.ED_ZAKR:=1;
_args.ED_RES:=1;
_args.ED_M:=1;
_args.ED_WYD:=1;
_args.ED_OPIS:=1;
_args.ED_START:=1;
_args.ED_OK:=1;
_args.ED_PROB:=1;
_args.ED_PRAC:=1;
_args.ED_BRYG:=1;
_args.ED_KOOP:=1;
_args.ED_A:=1;
_args.ED_DOREJ:=1;
_args.ED_PX:=1;
_args.ED_PL:=1;
_args.ED_ZL:=1;
_args.C_P:=_pracownik;
_args.C_ZLBR:=_zlbr;
_args.WHERE:='';
_args.JOIN:='';
_args.TAB:=0;
_args.FORM:='';
_args.CLOSE:="";
_args


\eLevel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tablica nazwana z funkcjami do pamiętania okna i tabeli dla funkcji nawigacyjnych
::   WE:
::   WY: obj_new - tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_meth:=_fld:="_a";

_tab:=obj_new(_fld('tab','tablica aliasow tabel')
             ,_fld('win','tablica akronimów okienek')
             ,_fld('pos','pozycja w tablicach tab,win')
             ,_fld('max_pos','maksymalny poziom')
             ,_fld('idw','unikalny identyfikator okna')
             ,_fld('dsp','formuła do wyświetlenia informacji dodatkowych')
             ,_fld('flt','formuła do filtrowania')
             ,_fld('idw_close','zamknij okno do identyfiaktora')

             ,_meth('up','poziom wyzej')
             ,_meth('down','poziom nizej')
             ,_meth('cur_tab','biezaca tabela')
             ,_meth('cur_win','biezace okno')
             ,_meth('cur_idw','biezacy identyfikator okna')
             ,_meth('display','metoda do wyświetlenia informacji dodatkowych')
             ,_meth('filter','metoda do filtrowania')
             ,_meth('change','zmien tabele i okno na aktualnym poziomie')
             ,_meth('set_close','ustawia do jakiego okna ma nastapic zamkniecie')
             );

_tab.pos:=0;
_tab.max_pos:=_a;
_tab.tab:=obj_new(_tab.max_pos);
_tab.win:=obj_new(_tab.max_pos);
_tab.idw:=obj_new(_tab.max_pos);
_tab.dsp:=obj_new(_tab.max_pos);
_tab.flt:=obj_new(_tab.max_pos);
_tab.idw_close:='';

_tab.up:="
   {? .pos<.max_pos
   || .pos+=1;
      .tab[.pos]:=_a;
      .win[.pos]:=_b;
      .idw[.pos]:=_c;
      {? var_pres('_d')=type_of(\"\")
      || .dsp[.pos]:=_d
      || .dsp[.pos]:=\"\"
      ?};
      {? var_pres('_e')=type_of(\"\")
      || .flt[.pos]:=_e
      || .flt[.pos]:=\"\"
      ?};
      1
   || FUN.wdrerror('Za dużo poziomów.');
      0
   ?}
";

_tab.down:="
   {? .pos>0
   || obj_del(.tab[.pos]);
      .tab[.pos]:=~~;
      .win[.pos]:=~~;
      .idw[.pos]:=~~;
      .dsp[.pos]:=~~;
      .flt[.pos]:=~~;
      .pos-=1;
::    Akutalizacja etykiet głównego panelu (ilości aktywnych operacji)
      {? .pos>0 & exec('get_user_param','ekioski',8786,type_of(''))='T'
         & (.idw_close='' | (.idw_close<>'' &  .idw_close=.idw[.pos]))
      || {? .idw[.pos]='PANEL_MENUG'
         || exec('panelbryg_update','ekioski')
         |? .idw[.pos]='OKNO_RED_PRAC'
         || exec('panelprac_update','ekioski')
         ?}
      ?};
      {? .pos>0 & .idw_close<>''
      ||
         {? .idw_close=.idw[.pos]
         ||
            .idw_close:=''
         ||
            sel_exit()
         ?}
      ?};
      1
   || FUN.wdrerror('Mniej niż zero?');
      0
   ?}
";

_tab.change:="
   {? .pos>0
   || {? type_of(.tab[.pos])>100 || obj_del(.tab[.pos]) ?};
      .tab[.pos]:=_a;
      .win[.pos]:=_b;
      {? var_pres('_c')=type_of(\"\")
      || .dsp[.pos]:=_c
      ?};
      {? var_pres('_d')=type_of(\"\")
      || .flt[.pos]:=_d
      ?};
      1
   || FUN.wdrerror('Za wcześnie na zmiany.');
      0
   ?}
";

_tab.cur_tab:=".tab[.pos]";
_tab.cur_win:=".win[.pos]";
_tab.cur_idw:=".idw[.pos]";
_tab.display:=".dsp[.pos]()";
_tab.filter:=".flt[.pos]()";
_tab.set_close:=".idw_close:=_a";

_tab


\eSelect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Deklaruje obiekt w którym przechowywany jest kontekst okna
::   WE:
::   WY: obj_new - tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_meth:=_fld:="_a";

_eSelect:=obj_new(_fld('key_Esc','')
                  ,_fld('key_Logout','')
                  ,_fld('sel_exit','')
                  ,_fld('wyn_OK','')
                  ,_fld('grp_width','')

::                  ,_fld('wer_rec','')
::                  ,_fld('tab_rec','')

::                  ,_fld('swer_rec','')
::                  ,_fld('stab_rec','')
::                  ,_fld('swer3rec','')
::                  ,_fld('stab3rec','')

                  ,_fld('tab_mat','')
                  ,_fld('tab_nmat','')
::                  ,_fld('tab_detal','')
::                  ,_fld('tab_uwagi','Tabela tymczasowa z uwagami')
::                  ,_fld('wer_uwagi','Okienko tymczasowe z uwagami')

::                  ,_fld('tab_qpro','QPRODU - tabela uzytkownikow')
::                  ,_fld('wer_qpro','QPRODU - okno wertowania')

                  ,_fld('wer_slo','')
                  ,_fld('wer_rej','')
                  ,_fld('wer_prac','')
                  ,_fld('wer_zlbr','')
                  ,_fld('wer_zlbs','')
                  ,_fld('wer_kap','')
::                  ,_fld('wer_zmn','')
::                  ,_fld('wer_zmp','')
                  ,_fld('wer_mat','')
                  ,_fld('wer_nmat','')
::                  ,_fld('wer_detal','')
                  ,_fld('wer_npu','')
                  ,_fld('wer_prob','')
::                  ,_fld('wer_zgp','Okno wertowania tabeli ZGP')
                  ,_fld('wer_kal','')
                  ,_fld('wer_gropp','')
                  ,_fld('wer_sloo','')
                  ,_fld('wer_rem_zgl','')
                  ,_fld('wer_rem_czyu','')

                  ,_fld('cmb_wyd','')
                  ,_fld('cmb_oper','')
                  ,_fld('cmb_twrkplc','')

                  ,_fld('prod_rej','')
                  ,_fld('zgp','')
                  ,_fld('sur_n','')
                  ,_fld('sur_p','')

                  ,_fld('il_wyk','Ilosc do wykonania')
                  ,_fld('il_brak','Ilosc braków')
                  ,_fld('i_time','Czas dla TPZ i operacji warsztatowych')
                  ,_fld('il_obs','')
                  ,_fld('tm_start','stepel początku')
                  ,_fld('tm_end','stepel końca')

                  ,_fld('czyt_pracownik','')
                  ,_fld('czyt_kom','')

                  ,_fld('na_dzien','')

                  ,_fld('rodz_plik','')
                  );
_eSelect


\okno_red_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Okno redagowania pracownika - wybór maszyny
::----------------------------------------------------------------------------------------------------------------------
_twrkplc_ref:=VEK.TWRKPLC;
{? VEK.TWRKPLC=null()
|| _twrkplc:=exec('get_user_param','ekioski',8788,type_of(''));
   {? _twrkplc<>''
   || _twrkplc_ref:=exec('FindInSet','#table','TWRKPLC','KOD',_twrkplc,,,1,,null())
   ?}
?};

eSelect.cmb_wyd:=VEK.A_WYD;
eSelect.cmb_twrkplc:=_twrkplc_ref;
eSelect.cmb_oper:=null();

_ctr_id:=exec('create','#desktop',USERS,'ctr_okno_prac',,20,80);
USERS.win_ctr(_ctr_id);

_before:="
   _tab:=exec('elements_panelprac_table','ekioski');
   exec('load','#desktop','ctr_okno_prac','ekiosk_okno_prac.dsk',,,,,_tab,1);
   _rem_upr:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_TRE_DPRZ')
      | exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_RZGL');
   exec('set_visible','#desktop','','ctr_okno_prac','btn_rem@okno_prac',_rem_upr);
   1
";
_win_id:='id_okno_red_prac';
eLevel.up(USERS,_win_id,'OKNO_RED_PRAC');
_ret:=USERS.control(_win_id,'modal=false,pack=false',_before);
{? _ret=~~
||
:: okienko zamknięte normalnie przez x lub sel_exit
   1
|? _ret='ZAMKNIJ'
||
:: okienko zamknięte przez funkcję sel_exit z ustawionym parametrem ctr_ret('')
   1
?};
eLevel.down();
~~


\cmbz_twrkplc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wybór maszyny z listy
::  OLD: \cmbz_wyd/ekioski.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('get_value','#desktop','','ctr_okno_prac','combo_wrkplc@okno_prac');
_new_wyd:=null();
_old_twrkplc:=VEK.TWRKPLC;
_new_twrkplc:=null();
{? _ref<>''
|| TWRKPLC.cntx_psh();
   TWRKPLC.clear();
   {? TWRKPLC.seek(_ref)
   || _new_wyd:=TWRKPLC.WYD;
      _new_twrkplc:=TWRKPLC.ref()
   ?};
   TWRKPLC.cntx_pop()
?};

:: Po zmianie wydzialu odswiezamy combobox operacji
:: UWAGA przy pierwszym otwarciu moze sie nie odswiezyc - moze przy tworzeniu tabeli dodac null
eSelect.cmb_wyd:=_new_wyd;
eSelect.cmb_twrkplc:=_new_twrkplc;
VEK.A_WYD:=_new_wyd;
VEK.TWRKPLC:=_new_twrkplc;
exec('set','#params',8788,VEK.TWRKPLC().KOD,OPERATOR.USER);
exec('btnc_start','ekioski');
VEK.TWRKPLC:=_old_twrkplc;
::exec('refresh_element','desktop','','ctr_okno_prac','1337207615669');
1


\cmbt_twrkplc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ComboBox - tabela tymczasowa stanowisk - słownik
::   WY: tabela tymczasowa z polami REF i COMBO
::  OLD: \cmbt_wyd/ekioski.fml
::----------------------------------------------------------------------------------------------------------------------
{? VEK.TWRKPLC<>null()
|| _table:=sql('
      select
         TWRKPLC.REFERENCE as REF,
         (\' [\' || TWRKPLC.KOD || \'] - \' || TWRKPLC.NA) as COMBO
      from TWRKPLC
      where TWRKPLC.REFERENCE=:_a
      order by COMBO
   ',VEK.TWRKPLC)
|? VEK.TWRKZBR<>null()
|| _table:=sql('
      select
         TWRKPLC.REFERENCE as REF,
         (\' [\' || TWRKPLC.KOD || \'] - \' || TWRKPLC.NA) as COMBO
      from TWRKPLC
      where TWRKPLC.REFERENCE in (
         select
            TWRKZPO.ELEMENT
         from TWRKZPO
         where TWRKZPO.GRUPA=:_a
      )
      order by COMBO
   ',VEK.TWRKZBR)
|? VEK.A_WYD<>null()
|| _table:=sql('
      select
         TWRKPLC.REFERENCE as REF,
         (\' [\' || TWRKPLC.KOD || \'] - \' || TWRKPLC.NA) as COMBO
      from TWRKPLC
      where TWRKPLC.WYD=:_a
      order by COMBO
   ',VEK.A_WYD)
|| _table:=sql('
      select
         TWRKPLC.REFERENCE as REF,
         (\' [\' || TWRKPLC.KOD || \'] - \' || TWRKPLC.NA) as COMBO
      from TWRKPLC
      order by COMBO
   ')
?};

{? _table.first()=0
|| eSelect.cmb_wyd:=null();
   eSelect.cmb_twrkplc:=null()
?};
_table


\btnc_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Start w oknie z ComboBox
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Parametry wybrane w oknie z comboBox
_err:=0;
{? eSelect.cmb_wyd=null()
||
   FUN.error('Wydział nie wybrany. Rejestracja niemożliwa.'@);
   _err:=1
||
   VEK.A_WYD:=eSelect.cmb_wyd;
   VEK.TWRKPLC:=eSelect.cmb_twrkplc
?};

VEK.PROD_REJ:=null();
{? _err=0
|| exec('work_rej','ekioski',VEK.PROD_REJ)
?};
~~


\work_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Rejestruj prace
::   WE: [_a] - PROD_REJ.ref()
::       [_b] - ZGP.ref()
::       [_c] - P.ref()
::       [_d] - ZLBR.ref()
::       [_e] - zwracać tylko liczbę dostępnych operacji (bez wyświetlania panelu): 1 - tak, [0] - nie
::       [_f] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::   WY: ~~ lub liczba dostępnych operacji
::----------------------------------------------------------------------------------------------------------------------
_prod_rej:=null();
{? var_pres('_a')=type_of(PROD_REJ.ref())
|| _prod_rej:=_a
?};
_zgp:=null();
{? var_pres('_b')=type_of(ZGP.ref())
|| _zgp:=_b
?};
_prac:=null();
{? var_pres('_c')=type_of(P.ref())
|| _prac:=_c
?};
_zlbr:=null();
{? var_pres('_d')=type_of(ZLBR.ref())
|| _zlbr:=_d
?};
_count_only:=0;
{? var_pres('_e')=type_of(0)
|| _count_only:=_e
?};
_tab_end:=~~;
{? var_pres('_f')>100
|| _tab_end:=_f
?};

::VEK.PROD_REJ:=_prod_rej;
VEK.ZGP:=_zgp;
VEK.SRODZ:='';
VEK.PROD_REJ:=null();
VAR.A_ZLEC:=null();
VAR.A_NRZLP:=null();

FILTER.blank(1);
exec('work_start_filter_prepare','ekioski',_tab_end);
:: 1.Aktualny wydzial      [null] lub [SLO.ref]
FILTER.PR_A_WYD:=VEK.A_WYD;
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
FILTER.PR_A:='T';
:: 2.Dostepny do rejestracji [T] tak, [N] nie, [] all
{? exec('upr_kierownik','ekioski')
|| FILTER.PR_DOREJ:=''
|| FILTER.PR_DOREJ:='T'
?};
:: 3.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
FILTER.PR_OK:='N';
:: 4.Zgloszony problem       [T] tak, [N] nie, [] all
{? exec('upr_kierownik','ekioski')
|| FILTER.PR_PROB:=''
|| FILTER.PR_PROB:='N'
?};
:: 5. Maszyna
{? VEK.TWRKPLC<>null()
|| FILTER.PR_RESS:=VEK.TWRKPLC().KOD
?};
FILTER.PR_P:=_prac;
FILTER.PR_ZLBR:=_zlbr;

_days:=exec('get','#params',500642,type_of(0));
{? _days>0
|| _futuredate:=date()+_days;
   FILTER.PR_DOD:=_futuredate
?};

exec('filter','prod_rej');

:: Ustawienie sie na odpowiednim rekordzie
{? VEK.PROD_REJ<>null()
|| PROD_REJ.f_seek(VEK.PROD_REJ)
|| PROD_REJ.f_first()
?};

{? _count_only
|| {? PROD_REJ.f_active()
   || _count:=PROD_REJ.f_size()
   || _count:=PROD_REJ.size()
   ?};
   return(_count)
?};

USERS.cntx_psh();

eSelect.wer_rej:='EWER_REJ';
eLevel.up(PROD_REJ,eSelect.wer_rej,'WORK_REJ',
   "params_exec('display_4rej','prod_rej')","params_exec('filter_4rej','ekioski')"
);
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',__develop);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuFun_table','ekioski');
   exec('load','#desktop','ctr_menu_fun','ekiosk_menu_fun.dsk',,,,,_tab,1);

:: Niewidoczny przycisk START
   {? exec('upr_pracownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_start@menu_fun',0)
   ?};

:: Niewidoczny przycisk WYKONANIE
   {? exec('upr_pracownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_start_rej@menu_fun',0)
   ?};

:: Niewidoczny przycisk DOKUMENTACJA
   {? exec('get','#params',8708,,OPERATOR.USER)='N'
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_doc@menu_fun',0)
   ?};

:: Niewidoczny przycisk NARZĘDZIA
   {? exec('get','#params',8714,,OPERATOR.USER)='N'
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_tool@menu_fun',0)
   ?};

:: Niewidoczny przycisk MATERIAŁY
   {? exec('get','#params',8709,,OPERATOR.USER)='N'
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_mater@menu_fun',0)
   ?};

:: Niewidoczny przycisk PRZYDZIEL PRACOWNIKA
:: Niewidoczny przycisk PRZYDZIEL BRYGADĘ
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',0);
      exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',0)
   ?};

:: Niewidoczny przycisk PROBLEM
   {? exec('upr_problem','zl_wkj')=0
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_problem@menu_fun',0)
   ?};

:: Niewidoczny przycisk SPOSÓB REJESTRACJI
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_sprej@menu_fun',0)
   ?};

   grp_disp(PROD_REJ,eSelect.wer_rej,0,1);
   ~~
";

_grp:=USERS.grp_make('Rejestruj pracę'@,_before,'ekioski002',,,,,,'jterm');

exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1');
:: -----------------------------------------------
_after_refresh:="
   exec('setBtn','ekioski');
   {? var_pres('__ENV_REJ')>100 & __ENV_REJ.ZGP<>PROD_REJ.ZGP
   || VAR_DEL.delete('__ENV_REJ')
   ?}
";
USERS.grp_sel(_grp,PROD_REJ,eSelect.wer_rej,,_after_refresh,,,{? VEK.DPI=96 || 19 || 16 ?},
   "exec('setBtn','ekioski')",,,,'maximized',,1
);
USERS.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_fun',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

PROD_REJ.actions(eSelect.wer_rej,'sk');
USERS.win_sel(_grp);
USERS.select();
USERS.cntx_pop();

VAR_DEL.delete('__ENV_REJ');

{? eSelect.key_Logout=1 || sel_exit() ?};

eLevel.down();
~~


\hideFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ukrywa pola desktopu 'menu_end'
::----------------------------------------------------------------------------------------------------------------------
exec('set_visible','#desktop','','ctr_menu_end','fld_val1@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_val2@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_val3@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_val4@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_val5@menu_end',0);

exec('set_visible','#desktop','','ctr_menu_end','fld_jm1@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_jm2@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_jm3@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_jm4@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_jm5@menu_end',0);

exec('set_visible','#desktop','','ctr_menu_end','fld_il@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_il_brak@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','btn_calc@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_time@menu_end',0);

exec('set_visible','#desktop','','ctr_menu_end','fld_od@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','fld_do@menu_end',0);

exec('set_visible','#desktop','','ctr_menu_end','combo_partia@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','combo_braki_r@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','btn_surowce@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',0);
exec('set_visible','#desktop','','ctr_menu_end','btn_bad@menu_end',0);

:: etykiety
exec('set_visible','#desktop','','ctr_menu_end','btn_etyk@menu_end',exec('usersLab','ekioski')<>'');
exec('set_visible','#desktop','','ctr_menu_end','fld_il_etykiet@menu_end',exec('usersLab','ekioski')<>'');
exec('set_value','#desktop','','ctr_menu_end','fld_il_etykiet@menu_end','1');
~~


\showFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Pokazuje pola desktopu 'menu_end'
::   WE: _a = Tpz
::----------------------------------------------------------------------------------------------------------------------
_tpz:=_a;

_srodz:=PROD_REJ.SRODZ;

{? _srodz='PX'
||
   exec('set_visible','#desktop','','ctr_menu_end','btn_register@menu_end',1);
   exec('set_visible','#desktop','','ctr_menu_end','btn_wyr@menu_end',0);
   _il_wym:=PROD_REJ.PX_POZ().PX_KONT().IL_WYM;

   exec('set_visible','#desktop','','ctr_menu_end','fld_val1@menu_end',_il_wym>0);
   exec('set_visible','#desktop','','ctr_menu_end','fld_val2@menu_end',_il_wym>1);
   exec('set_visible','#desktop','','ctr_menu_end','fld_val3@menu_end',_il_wym>2);
   exec('set_visible','#desktop','','ctr_menu_end','fld_val4@menu_end',_il_wym>3);
   exec('set_visible','#desktop','','ctr_menu_end','fld_val5@menu_end',_il_wym>4);

   exec('set_visible','#desktop','','ctr_menu_end','fld_jm1@menu_end',_il_wym>0);
   exec('set_visible','#desktop','','ctr_menu_end','fld_jm2@menu_end',_il_wym>1);
   exec('set_visible','#desktop','','ctr_menu_end','fld_jm3@menu_end',_il_wym>2);
   exec('set_visible','#desktop','','ctr_menu_end','fld_jm4@menu_end',_il_wym>3);
   exec('set_visible','#desktop','','ctr_menu_end','fld_jm5@menu_end',_il_wym>4);

:: Stanowisko
   _data_id:=$SYSLOG.tm_stamp();
:: Ustawiam filtr na stanowiska
   exec('twrkplc_filter_plugin','zasoby',PROD_REJ.ref());
   exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_place','ekioski'),'SYM,COMBO','');
   exec('grab_data','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',_data_id);
   exec('set_visible','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',1);
   ~~

|? _srodz='PL'
|| exec('set_visible','#desktop','','ctr_menu_end','btn_register@menu_end',1);
   exec('set_visible','#desktop','','ctr_menu_end','btn_wyr@menu_end',0);
   {? _tpz='T'
   ||
::      exec('set_visible','#desktop','','ctr_menu_end','fld_time@menu_end',1);
      ~~
   || exec('set_visible','#desktop','','ctr_menu_end','fld_il@menu_end',1);
      exec('set_visible','#desktop','','ctr_menu_end','fld_il_brak@menu_end',1);
      {? Plugin.runnable('EKIOSK_CALC_IL_001')
      || exec('set_visible','#desktop','','ctr_menu_end','btn_calc@menu_end',1)
      ?};
      ~~
   ?};
:: Partia
   {? PROD_REJ.ZL<>null()
   || _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
      {? _party_req>0
      ||
::       Szukam najbliższego zlecenia partiowanego w strukturze
         _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
         ZPARN.index('ZL');
         ZPARN.prefix(_party_zl);
         {? ZPARN.first()
         || _data_id:=$SYSLOG.tm_stamp();
            exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_zparn','ekioski'),'SYM,COMBO','');
            exec('grab_data','#desktop','','ctr_menu_end','combo_partia@menu_end',_data_id);
            exec('set_visible','#desktop','','ctr_menu_end','combo_partia@menu_end',1)
         ?}
      ?}
   ?};
:: Stanowisko
   _data_id:=$SYSLOG.tm_stamp();
:: Ustawiam filtr na stanowiska
   exec('twrkplc_filter_plugin','zasoby',PROD_REJ.ref());
   exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_place','ekioski'),'SYM,COMBO','');
   exec('grab_data','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',_data_id);
   exec('set_visible','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',1);

:: Godziny - obecnie zawsze wyłączone
   exec('set_visible','#desktop','','ctr_menu_end','fld_od@menu_end',0);
   exec('set_visible','#desktop','','ctr_menu_end','fld_do@menu_end',0);
   ~~

|? _srodz='ZL'
|| {? VAR1.REJ_WYR='T'
   || exec('set_visible','#desktop','','ctr_menu_end','btn_wyr@menu_end',1);
      exec('set_visible','#desktop','','ctr_menu_end','btn_register@menu_end',0)
   || exec('set_visible','#desktop','','ctr_menu_end','btn_wyr@menu_end',0);
      exec('set_visible','#desktop','','ctr_menu_end','btn_register@menu_end',1);
      _wp:={? PROD_REJ.ZL<>null() || PROD_REJ.ZL().TYP().WP || 'X' ?};
      _fld_name:='Ilość dobra'@;
      {? _wp='P' & _tpz<>'T'
      || exec('set_visible','#desktop','','ctr_menu_end','fld_il@menu_end',1);
         exec('set_visible','#desktop','','ctr_menu_end','fld_il_brak@menu_end',1);
         {? Plugin.runnable('EKIOSK_CALC_IL_001')
         || exec('set_visible','#desktop','','ctr_menu_end','btn_calc@menu_end',1)
         ?}
      |? _wp='W' | (_wp='P' & _tpz='T')
      || {? exec('get','#params',500644)='T'
         || ~~
         || exec('set_visible','#desktop','','ctr_menu_end','fld_time@menu_end',1)
         ?}
      |? PROD_REJ.GROP<>null() & exec('rej_more_than_one_grop','ekioski')
      || exec('set_visible','#desktop','','ctr_menu_end','fld_il@menu_end',1);
         _fld_name:='Ilość uruchomień'@
      ?};
      exec('set_name','#desktop','','ctr_menu_end','fld_il@menu_end',_fld_name);
::    Partia
      {? PROD_REJ.ZGH<>null() & VAR1.REJ_WYR<>'T'
      || _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
         {? _party_req>0
         ||
::          Szukam najbliższego zlecenia partiowanego w strukturze
            _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
::          Jeżeli odnalezione zlecenie jest takie samo jak na PROD_REJ to prefixuje partie po nagłówku przewodnika
            {? _party_zl=PROD_REJ.ZL
            || ZPARN.index('ZGH');
               ZPARN.prefix(PROD_REJ.ZGH)
            || ZPARN.index('ZL');
               ZPARN.prefix(_party_zl)
            ?};
            {? ZPARN.first()
            || _data_id:=$SYSLOG.tm_stamp();
               exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_zparn','ekioski'),'SYM,COMBO','');
               exec('grab_data','#desktop','','ctr_menu_end','combo_partia@menu_end',_data_id);
               exec('set_visible','#desktop','','ctr_menu_end','combo_partia@menu_end',1)
            ?}
         ?}
      ?};
::    Stanowisko
      _data_id:=$SYSLOG.tm_stamp();
::    Ustawiam filtr na stanowiska
      exec('twrkplc_filter_plugin','zasoby',PROD_REJ.ref());
      exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_place','ekioski'),'SYM,COMBO','');
      exec('grab_data','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',_data_id);
      exec('set_visible','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',1);
::    Rodzaj braku
      {? PROD_REJ.GROP=null()
      || _data_id:=$SYSLOG.tm_stamp();
         exec('braki_r_filter','braki',PROD_REJ.ZGP);
         exec('fetch_data','#desktop',_data_id,'ctr_menu_end',exec('cmb_braki_r','ekioski'),'SYM,COMBO','');
         exec('grab_data','#desktop','','ctr_menu_end','combo_braki_r@menu_end',_data_id);
         exec('set_visible','#desktop','','ctr_menu_end','combo_braki_r@menu_end',1)
      ?};
::    Surowce (nielimity)
      {? PROD_REJ.ZGP<>null() & (exec('get_user_param','ekioski',8782,type_of(''))='T'
         | exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL))
      || exec('set_visible','#desktop','','ctr_menu_end','btn_surowce@menu_end',1)
      || exec('set_visible','#desktop','','ctr_menu_end','btn_surowce@menu_end',0)
      ?};
::    Surowce (limity)
      {? (PROD_REJ.ZGP<>null() | PROD_REJ.GROP<>null()) & exec('chk_role','#b__box',OPERATOR.USER,'LMG_ZAM_IPRZ')>0
         & (exec('zgp_chk4lim','zl_limit',PROD_REJ.ZGP) | exec('grop_chk4lim','zl_limit',PROD_REJ.GROP))
      || exec('set_visible','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',1)
      || exec('set_visible','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',0)
      ?};
::    Rejestrowanie badań
      {? exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BAD_OP<>null()",0)
      || exec('set_visible','#desktop','','ctr_menu_end','btn_bad@menu_end',1)
      || exec('set_visible','#desktop','','ctr_menu_end','btn_bad@menu_end',0)
      ?};
::    Wydruk etykiet
      {? exec('usersLab','ekioski')<>''
      || exec('set_visible','#desktop','','ctr_menu_end','btn_etyk@menu_end',1)
      || exec('set_visible','#desktop','','ctr_menu_end','btn_etyk@menu_end',0)
      ?};
::    Szczegółowa rejestracja w rozbiciu na produkty
      exec('set_visible','#desktop','','ctr_menu_end','btn_wyr@menu_end',0);
      ~~
   ?}

|? VEK.SRODZ=''
|| ~~

?};
~~


\setFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawienie wartości pól i ich wyszarzania
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
ZL.cntx_psh();
PL_WYK.cntx_psh();
_tpz:=
   {? PROD_REJ.SRODZ='ZL'
   || {? PROD_REJ.ZGP<>null() || PROD_REJ.ZGP().TPZ || 'N' ?}
   |? PROD_REJ.SRODZ='PL'
   || {? PROD_REJ.PL_OZ<>null()
      || PL_WYK.index('APL_OZ');
         PL_WYK.prefix('N',PROD_REJ.PL_OZ);
         {? PL_WYK.last()
         || PL_WYK.TP
         || 'N'
         ?}
      || 'N'
      ?}
   || 'N'
   ?};
_srodz:=PROD_REJ.SRODZ+PROD_REJ.ZL().TYP().WP+_tpz+PROD_REJ.ZGP().BRYG+PROD_REJ.KOOP;
ZL.cntx_pop();
ZGP.cntx_pop();
PL_WYK.cntx_pop();

::{? VEK.SRODZ<>_srodz | VEK.SRODZ=''
::||
   exec('hideFld','ekioski');
   exec('showFld','ekioski',_tpz);
::   ~~
::?};
VEK.SRODZ:=_srodz;

{? PROD_REJ.SRODZ='ZL'
|| exec('set_value','#desktop','','ctr_menu_end','fld_il@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_il_brak@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_time@menu_end','');
:: Partia
   {? PROD_REJ.ZGH<>null() & VAR1.REJ_WYR<>'T'
   || _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
      {? _party_req>0
      ||
::       Szukam najbliższego zlecenia partiowanego w strukturze
         _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
::       Jeżeli odnalezione zlecenie jest takie samo jak na PROD_REJ to prefixuje partie po nagłówku przewodnika
         {? _party_zl=PROD_REJ.ZL
         || ZPARN.index('ZGH');
            ZPARN.prefix(PROD_REJ.ZGH)
         || ZPARN.index('ZL');
            ZPARN.prefix(_party_zl)
         ?};
         {? ZPARN.size()=1 & ZPARN.first()
         || exec('set_value','#desktop','','ctr_menu_end','combo_partia@menu_end',ZPARN.SYM)
         || exec('set_value','#desktop','','ctr_menu_end','combo_partia@menu_end','')
         ?}
      ?}
   ?};
:: Stanowisko
   {? PROD_REJ.ZGP<>null()
   || exec('set_value','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',
         PROD_REJ.ZGP().PLACE().KOD
      )
   |? PROD_REJ.GROPS<>null()
   || exec('set_value','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',
         PROD_REJ.GROPS().PL_RES().FROM_STA().KOD
      )
   || exec('set_value','#desktop','','ctr_menu_end','combo_stanowisko@menu_end','')
   ?};
:: Rodzaj braku
   exec('set_value','#desktop','','ctr_menu_end','combo_braki_r@menu_end','');

   _condition:=PROD_REJ.PROBLEM='N' | PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj');
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il_brak@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_time@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','combo_partia@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',0);

   exec('show_hide_keyboard','ekioski',
      VAR1.REJ_WYR<>'T' & (PROD_REJ.ZGP<>null() | (PROD_REJ.GROP<>null() & exec('rej_more_than_one_grop','ekioski')))
   );
   ~~

|? PROD_REJ.SRODZ='PX'
|| exec('set_value','#desktop','','ctr_menu_end','fld_jm1@menu_end',PROD_REJ.PX_POZ().PX_KONT().JM1().KOD);
   exec('set_value','#desktop','','ctr_menu_end','fld_jm2@menu_end',PROD_REJ.PX_POZ().PX_KONT().JM2().KOD);
   exec('set_value','#desktop','','ctr_menu_end','fld_jm3@menu_end',PROD_REJ.PX_POZ().PX_KONT().JM3().KOD);
   exec('set_value','#desktop','','ctr_menu_end','fld_jm4@menu_end',PROD_REJ.PX_POZ().PX_KONT().JM4().KOD);
   exec('set_value','#desktop','','ctr_menu_end','fld_jm5@menu_end',PROD_REJ.PX_POZ().PX_KONT().JM5().KOD);
   exec('set_value','#desktop','','ctr_menu_end','fld_val1@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_val2@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_val3@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_val4@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_val4@menu_end','');

   _condition:=PROD_REJ.PROBLEM='N' | PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj');
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm1@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm2@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm3@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm4@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm5@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val1@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val2@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val3@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val4@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val5@menu_end',_condition);

   exec('show_hide_keyboard','ekioski',1);

::   Stanowisko
   {? PROD_REJ.PX_POZ<>null()
   ||  exec('set_value','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',PROD_REJ.PX_POZ().PX_KONT().PL_RES().FROM_STA().KOD)
   ?};
   ~~

|? PROD_REJ.SRODZ='PL'
|| _godz:='';
   _ret:=0;
   PL_WYK.cntx_psh();
   {? PROD_REJ.PL_OZ<>null()
   || PL_WYK.index('PL_OZ');
      PL_WYK.prefix(PROD_REJ.PL_OZ)
   |? PROD_REJ.PL_OGR<>null()
   || PL_WYK.index('PL_OGR');
      PL_WYK.prefix(PROD_REJ.PL_OGR)
   |? PROD_REJ.PL_OPER<>null()
   || PL_WYK.index('PL_OPER');
      PL_WYK.prefix(PROD_REJ.PL_OPER)
   ?};
   {? PL_WYK.first()
   || {! |?
         {? ~PL_WYK.ENDD & (PL_WYK.P=VEK.P | PL_WYK.ZLBR=VEK.A_ZLBR)
         || _ret:=1;
            _godz:=form(PL_WYK.STARTT,,3)
         ?};
         ~_ret & PL_WYK.next()
      !}
   ?};
   PL_WYK.cntx_pop();
   exec('set_value','#desktop','','ctr_menu_end','fld_il@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_il_brak@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_time@menu_end','');
   exec('set_value','#desktop','','ctr_menu_end','fld_od@menu_end',_godz);
   exec('set_value','#desktop','','ctr_menu_end','fld_do@menu_end','  :  :  ');

   _condition:=PROD_REJ.PROBLEM='N' | PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj');
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il_brak@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_time@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_od@menu_end',_condition);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_do@menu_end',_condition);
:: Partia
   {? PROD_REJ.ZL<>null()
   ||
      _party_req:=exec('party_req','zl_wyk',PROD_REJ.ZL);
      {? _party_req>0
      ||
::       Szukam najbliższego zlecenia partiowanego w strukturze
         _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
         ZPARN.index('ZL');
         ZPARN.prefix(_party_zl);
         {? ZPARN.size()=1 & ZPARN.first()
         || exec('set_value','#desktop','','ctr_menu_end','combo_partia@menu_end',ZPARN.SYM)
         || exec('set_value','#desktop','','ctr_menu_end','combo_partia@menu_end','')
         ?}
      ?}
   ?};
::   Stanowisko
   {? PROD_REJ.PL_OPER<>null()
   ||  exec('set_value','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',PROD_REJ.PL_OPER().ZGP().PLACE().KOD)
   ?};

   exec('show_hide_keyboard','ekioski',_tpz='N');
   ~~

?};
1


\show_hide_keyboard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Pokazuje/ukrywa "klawiaturę" do wpisywania ilości
::   WE: 1 - pokazuje, 0 - ukrywa
::----------------------------------------------------------------------------------------------------------------------
_show:=_a;
exec('set_visible','#desktop','','ctr_menu_end','keyboard',_show);
~~


\setBtn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Pokazuje/ukrywa przyciski, ustawia etykiety w panelu ctr_menu_fun
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
_tpz:=PROD_REJ.ZGP().TPZ;
_srodz:=PROD_REJ.SRODZ+PROD_REJ.ZL().TYP().WP+_tpz+PROD_REJ.ZGP().BRYG+PROD_REJ.KOOP;
ZL.cntx_pop();

:: Przycisk START i WYKONANIE (niewidoczne dla kooperacji, niewidoczne dla nieaktywnej operacji)
{? PROD_REJ.KOOP='T' | PROD_REJ.A='N'
|| exec('set_visible','#desktop','','ctr_menu_fun','btn_start@menu_fun',0);
   exec('set_visible','#desktop','','ctr_menu_fun','btn_start_rej@menu_fun',0)
|| {? (PROD_REJ.SRODZ='ZL' & PROD_REJ.ZGP<>null() & PROD_REJ.ZGP().NO_START='T') |
      (PROD_REJ.SRODZ='ZL' & PROD_REJ.GROP<>null() & PROD_REJ.GROP().NO_START='T')
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_start@menu_fun',0);
      exec('set_visible','#desktop','','ctr_menu_fun','btn_start_rej@menu_fun',1)
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_start@menu_fun',1);
      exec('set_visible','#desktop','','ctr_menu_fun','btn_start_rej@menu_fun',0)
   ?}
?};

{? VEK.SRODZ<>_srodz
||
:: Przycisk NARZĘDZIA (niewidoczny dla pozycji z planu strategicznego i grup operacji)
   {? exec('get','#params',8714,,OPERATOR.USER)='N' | 2+_srodz='PX' | PROD_REJ.GROP<>null()
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_tool@menu_fun',0)
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_tool@menu_fun',1)
   ?};
:: Przycisk MATERIAŁY (niewidoczny dla pozycji z planu strategicznego)
   {? exec('get','#params',8709,,OPERATOR.USER)='N' | 2+_srodz='PX'
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_mater@menu_fun',0)
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_mater@menu_fun',1)
   ?};
:: Przycisk ZGŁOŚ PROBLEM / ROZWIĄŻ PROBLEM (niewidoczny dla pozycji z planu strategicznego)
   {? (exec('upr_problem','zl_wkj')=0 & exec('upr_xproblem','zl_wkj')=0) | 2+_srodz='PX'
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_problem@menu_fun',0)
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_problem@menu_fun',1)
   ?}
?};
:: Przyciski przydzielenia pracownika/brygady tylko dla kierownika, niewidoczne dla nieaktywnej operacji
{? 2+_srodz='ZL' & exec('get','#params',500621)='Z'
|| {? exec('upr_kierownik','ekioski') & FILTER.PR_P=null() & FILTER.PR_ZLBR=null() & PROD_REJ.A='T'
   ||
      {? PROD_REJ.ZGP().BRYG='T' & PROD_REJ.KOOP='N'
      || exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',1)
      || exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',0)
      ?};

      {? PROD_REJ.ZGP().BRYG='N' & PROD_REJ.KOOP='N'
      || exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',1)
      || exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',0)
      ?}
   || exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',0);
      exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',0)
   ?}
||
   exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',0);
   exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',0)
?};
:: Przycisk PROBLEM
{? PROD_REJ.PROBLEM='T'
|| _label:='<html><center>'+gsub('ROZWIĄŻ\nPROBLEM'@,'\n','<br>')+'</center></html>'
|| _label:='<html><center>'+gsub('ZGŁOŚ\nPROBLEM'@,'\n','<br>')+'</center></html>'
?};
:: Przycisk Pobrane surowce
:: Na ten moment przycisk niewidoczny - okno z rozpiską surowców pojawi się automatycznie po rozpoczęciu operacji
{? 0 & 2+_srodz='ZL' & exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL)
|| exec('set_visible','#desktop','','ctr_menu_fun','btn_sur@menu_fun',1)
|| exec('set_visible','#desktop','','ctr_menu_fun','btn_sur@menu_fun',0)
?};
exec('set_value','#desktop','','ctr_menu_fun','btn_problem@menu_fun',_label);

::Przycisk SPOSÓB REJESTRACJI (niewidoczne dla kooperacji i grup operacji)
{? PROD_REJ.KOOP='T' | PROD_REJ.GROP<>null()
|| exec('set_visible','#desktop','','ctr_menu_fun','btn_sprej@menu_fun',0)
|| exec('set_visible','#desktop','','ctr_menu_fun','btn_sprej@menu_fun',1)
?};

VEK.SRODZ:=_srodz;
1


\setBtnEnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [17.14]
:: OPIS: Pokazuje/ukrywa przyciski, ustawia etykiety w panelu 'menu_end'
::----------------------------------------------------------------------------------------------------------------------
:: Przycisk PROBLEM
{? PROD_REJ.PROBLEM='T'
|| _label:='ROZWIĄŻ PROBLEM'@
|| _label:='ZGŁOŚ PROBLEM'@
?};
exec('set_value','#desktop','','ctr_menu_end','btn_problem@menu_end',_label);
exec('set_visible','#desktop','','ctr_menu_end','btn_problem@menu_end',PROD_REJ.SRODZ<>'PX');

:: Przyciski REJESTRUJ, LIMITY, NIELIMITY , BADANIE, ETYKIETA
_condition:=PROD_REJ.PROBLEM='N' | PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj');
exec('set_enabled','#desktop','','ctr_menu_end','btn_register@menu_end',_condition);
exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce@menu_end',_condition);
exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',_condition);
exec('set_enabled','#desktop','','ctr_menu_end','btn_bad@menu_end',_condition);
exec('set_enabled','#desktop','','ctr_menu_end','btn_calc@menu_end',_condition);
exec('set_enabled','#desktop','','ctr_menu_end','btn_etyk@menu_end',_condition);
~~


\recProdRejEnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Rekord przed wyswietleniem PROD_REJ na ekiosku (w widoku kończenia operacji)
::   WY: schemat kolorowania
::----------------------------------------------------------------------------------------------------------------------
exec('recProdRej','ekioski')


\recProdRej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Rekord przed wyswietleniem PROD_REJ na ekiosku
::       Podczytanie przewodnika i zlecenia, kolorowanie, ustawianie przycisków
::   WE: [_a] - INTEGER - 0/[1] - czy odrysowanie ostatniego rekordu
::   WY: schemat kolorowania
::----------------------------------------------------------------------------------------------------------------------
PROD_REJ.ZGP();

_lastdraw:=1;
{? var_pres('_a')=type_of(0)
|| _lastdraw:=_a
?};
{? _lastdraw>0
|| VEK.TERMIN:=exec('to_string','#tm_stamp',PROD_REJ.TM_END)-3;
   _zgp:=exec('get_zgp','prod_rej');
   exec('set_var_a','ekioski',_zgp)
?};

::Ustalenie wartości VEK.KAP oraz VEK.IL
exec('vek_il_set','ekioski');

{? VEK.TERM='T'
||
:: Inicjały/nazwy pracowników którzy aktualnie wykonali start dla operacji
   exec('setInfoStPrac','ekioski');
   ~~
?};

:: Kolorowanie rekordow
exec('rekprzed','color','PROD_REJ#01#01')


\vek_il_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Ustalenie wartości pola VEK.IL oraz VEK.KAP dla aktualnie podczytanego PROD_REJa
::----------------------------------------------------------------------------------------------------------------------
:: Znajdujemy KAP przydzielone do pracownika - tylko w ten sposob mozna to sprawdzic i wyliczyc ilosci
VEK.KAP:=exec('kap_kolejka','ekioski',PROD_REJ.ZGP,PROD_REJ.ZGP().BRYG,VEK.P,VEK.A_ZLBR);

:: Wyznaczenie ilosci maksymalnej mozliwej do zarejestrowania
exec('vprodrej_fill','prod_rej');
{? PROD_REJ.DOREJ='T'
||
:: Operacja do rejestracji
:: VPRODREJ.IL_POP - ilosc jaka przeszla z poprzedniej operacji
:: PROD_REJ.ILW - ilosc jaka juz wykonano na aktualnej operacji
   {? VPRODREJ.IL_POP=0
   || VEK.IL:=PROD_REJ.IL
   || VEK.IL:=VPRODREJ.IL_POP-PROD_REJ.ILW
   ?};
   VEK.ILDOWYK:=VEK.IL;

:: Ustawiamy ilosc przydzielona (Kolejka KAP jezeli jest cos przydzielone) tylko do zmiennej VEK.IL
:: i tylko w oknie kończenia operacji
   {? VEK.KAP<>null() & PROD_REJ.ZGP().TPZ='N' & (cur_win(1,1)='EWER_END' | VAR1.ZAK_EK='T') & VEK.KAP().IL>0
   ||
::    Ilosc jaka byla przydzielona minus to co juz wykonano
::    uzupełnic o ilość wykonaną z ZLGD
::      _kap_ilosc:=VEK.KAP().IL-QTERM.QKAP().QILGD;
      _kap_ilosc:=VEK.KAP().IL;
::    Dodatkowe zabezpieczenie jezeli z poprzedniej operacji przeszlo mniej niz jest przydzielone na KAP
      {? VEK.IL>_kap_ilosc
      ||
::       Ilosc do wykonana wynika w tym przypadku z karty pracy
         VEK.IL:=_kap_ilosc
      ?}
   ?}
||
:: Operacja pozostale np.
:: Gdzie PROD_REJ.OK='T' - juz wykonana operacja w calosci
:: Gdzie PROD_REJ.A='N' - operacja nieaktywna
:: inne pozostale
   VEK.IL:=PROD_REJ.IL;
   VEK.ILDOWYK:=VEK.IL
?};

{? VEK.IL<0
|| VEK.IL:=0;
   VEK.ILDOWYK:=VEK.IL
?};
~~


\setInfoStPrac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawia zmienne informujące o osobach które rozpoczęły operacje
::       Konstekst wywołania: rekord PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
VEK.P_INIC:='';
VEK.P_NAZ:='';

{? PROD_REJ.SRODZ='ZL'
||
   Cntx.psh(ZLGD,GROP,ZLBR,P,OSOBA);
   _zlgd_names:=ZLGD.names();
   {? _zlgd_names.first()
   ||
      {!
      |?
         ZLGD.use(_zlgd_names.NAME);
         ZLGD.cntx_psh();
         ZLGD.index('EK0');
         ZLGD.prefix('N',PROD_REJ.ZGP,PROD_REJ.GROPS);
         {? ZLGD.first()
         || {!
            |?
::             Istnieje start operacji pracownik lub brygada
               {? ZLGD.BP='P'
               || VEK.P_INIC+=(1+ZLGD.P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
                  VEK.P_NAZ+=(ZLGD.P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
               || VEK.P_INIC+=(1+ZLGD.B().P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
                  VEK.P_NAZ+=(ZLGD.B().P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
               ?};
               ZLGD.next()
            !}
         ?};
         ZLGD.cntx_pop();
         _zlgd_names.next()
      !}
   ?};
   Cntx.pop(ZLGD,GROP,ZLBR,P,OSOBA)
|? PROD_REJ.SRODZ='PL'
||
   PL_WYK.cntx_psh();
   {? PROD_REJ.PL_OGR<>null()
   ||
::    Grupa operacji
      PL_WYK.index('PL_OGR');
      PL_WYK.prefix(PROD_REJ.PL_OGR);
      {? PL_WYK.last()
      || {! |?
            {? PL_WYK.ENDD=null()
            || VEK.P_INIC+=(1+PL_WYK.P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
               VEK.P_NAZ+=(PL_WYK.P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
            ?};
            PL_WYK.prev()
         !}
      ?}
   |? PROD_REJ.PL_OZ<>null()
   ||
::    Operacja pojedyncza
      PL_WYK.index('APL_OZ');
      PL_WYK.prefix('N',PROD_REJ.PL_OZ);
      {? PL_WYK.last()
      || {! |?
            {? PL_WYK.ENDD=null()
            || VEK.P_INIC+=(1+PL_WYK.P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
               VEK.P_NAZ+=(PL_WYK.P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
            ?};
            PL_WYK.prev()
         !}
      ?}
   |? PROD_REJ.PL_OPER<>null()
   ||
::    Kooperacja
      PL_WYK.index('APL_OPER');
      PL_WYK.prefix('N',PROD_REJ.PL_OPER);
      {? PL_WYK.last()
      || {! |?
            {? PL_WYK.ENDD=null()
            || VEK.P_INIC+=(1+PL_WYK.P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
               VEK.P_NAZ+=(PL_WYK.P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
            ?};
            PL_WYK.prev()
         !}
      ?}
   ?};
   PL_WYK.cntx_pop()

|? PROD_REJ.SRODZ='PX'
||
   {? PROD_REJ.PX_POZ
   ||
      PX_WYK.cntx_psh();
      PX_WYK.index('ZAK');
      PX_WYK.prefix(PROD_REJ.PX_POZ);
      {? PX_WYK.first()
      || {! |?
            {? PX_WYK.ZAK='N'
            || VEK.P_INIC+=(1+PX_WYK.P().OSOBA().NAZWISKO)+(1+OSOBA.PIERWSZE)+',';
               VEK.P_NAZ+=(PX_WYK.P().OSOBA().NAZWISKO)+' '+(OSOBA.PIERWSZE)+','
            ?};
            PX_WYK.next()
         !}
      ?};
      PX_WYK.cntx_pop()
   ?}
?};
VEK.P_INIC:=VEK.P_INIC-1;
VEK.P_NAZ:=VEK.P_NAZ-1;
0


\set_var_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawia aktualne parametry - aktualny kontekst PROD_REJ
::   WE: _a - ZGP.ref()
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_wyn:=0;
ZGP.cntx_psh();
ZGP.clear();
{? ZGP.seek(_zgp)
||
   VAR.A_ZLEC:=ZGP.ZL;

:: Aktualna pozycja przewodnika
   VAR.A_ZGP:=ZGP.ref();

:: ZGH nadrzędne
   VAR.A_NRPRZ:=VAR.A_ZGP().NRPRZ;

:: ZGH podrzędne
   VAR.A_NRZLP:=VAR.A_ZGP().NRZLP;

:: Zlecenie nadrzędne
   VAR.A_ZLNAD:=VAR.A_ZGP().NRPRZ().ZLEC;

:: Aktualne zlecenie
   VAR.A_ZLEC:=VAR.A_ZGP().NRZLP().ZLEC;

:: Aktualna technologia zlecenia
   VAR.A_KTLZ:=VAR.A_ZLEC().KTLZ;

:: Wyrob glowny
   VAR.A_T:=VAR.A_ZGP().NRPRZ().ZLEC().KTM;

:: Detal - czyli aktualny przewodnik i zlecenie
   VAR.A_TOW:=VAR.A_ZGP().NRZLP().ZLEC().KTM;

:: Aktualna operacja zlecenia
   VAR.A_OPZ:=VAR.A_ZGP().ZOPER;

:: Aktualny typ zlecenia
   VAR.A_TPZL:=VAR.A_ZLNAD().TYP;

:: Aktualna operacja
   VAR.A_OP:=ZGP.TOPER;

   _wyn:=1
||
   VAR.A_ZGP:=null();
   VAR.A_NRPRZ:=null();
   VAR.A_NRZLP:=null();
   VAR.A_ZLNAD:=null();
   VAR.A_ZLEC:=null();
   VAR.A_KTLZ:=null();
   VAR.A_T:=null();
   VAR.A_TOW:=null();
   VAR.A_OPZ:=null();
   VAR.A_TPZL:=null();
   VAR.A_OP:=null();
   _wyn:=0
?};
ZGP.cntx_pop();
_wyn


\kap_kolejka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Znajduje karte pracy do operacji pierwsza do wykonania z kolejki KAP wg kolejnosci przydzielania
::   WE: _a - ZGP.ref()
::       _b - ZGP.BRYG
::       _c - P.ref()
::       _d - ZLBR.ref()
::   WY: KAP.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_zgp_ref:=_a;
:: Kolejka dla brygady lub zwyklego pracownika
{? _b='T'
|| _p_ref:=null();
   _bryg_ref:=_d
|| _p_ref:=_c;
   _bryg_ref:=null()
?};

_kap_ref:=null();

:: Co z maskami?
:: Szukamy pierwszej karty pracy w kolejnosci przydzielania ktore nie zostaly jeszcze wykonane
KAP.cntx_psh();
KAP.index('ZGP_PB');
KAP.prefix(_zgp_ref,_p_ref,_bryg_ref);
{? KAP.first()
|| _kap_ref:=KAP.ref()
?};
KAP.cntx_pop();
_kap_ref


\rec_move
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przesuwa rekord
::   WE: [_a] - 1/0 odswiezac okienko grupowe
::       [_b] - nazwa tabeli
::       [_c] - okienko wertowania w oknie grupowym do odswiezenia
::       [_d] - first,last,prev,next - domyslnie puste
::       [_e] - skok o ilosc rekordow - domyslnie o 1
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1  || _a:=0   ?} || _a:=0  ?};
{? var_pres('_b')<100 || _b:=eLevel.cur_tab() ?};
{? var_pres('_c')<>2  || _c:=eLevel.cur_win() ?};
{? _>=4 || {? type_of(_d)<>2  || _d:=''  ?} || _d:='' ?};
{? _>=5 || {? type_of(_e)<>1  || _e:=1   ?} || _e:=1  ?};

{? _b.f_active()=0
||
   {? _d='first' || _b.first()
   |? _d='last'  || _b.last()
   |? _d='prev'  || {! .._e |! _b.prev() !}
   |? _d='next'  || {! .._e |! _b.next() !}
   ?}
||
   {? _d='first' || _b.f_first()
   |? _d='last'  || _b.f_last()
   |? _d='prev'  || {! .._e |! _b.f_prev() !}
   |? _d='next'  || {! .._e |! _b.f_next() !}
   ?}
?};
{? _a=1
||
   grp_disp(_b,_c,1,1)
?};
~~


\rec_esc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: ???
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
eSelect.key_Esc:=1;
eSelect.wyn_OK:=0;
sel_exit();
1


\btnc_koniec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Koniec w oknie z ComboBox
::   WE: _a - czy wywołane z głównego panelu logowania
::       [_b] - zwracać tylko liczbę dostępnych operacji (bez wyświetlania panelu): 1 - tak, [0] - nie
::       [_c] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::   WY: 0/1 dla _b=0, liczba operacji dla _b=1
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _a:=1 ?};

{? _a || VEK.PROD_REJ:=null() ?};
_count_only:={? var_pres('_b')=type_of(0) || _count_only:=_b || 0 ?};
_tab_end:={? var_pres('_c')>100 || _c || ~~ ?};
{? (_count:=exec('work_end','ekioski',,_count_only,_tab_end))=1 & ~_count_only & _a
||
:: Odswiezamy okno pracownika po powrocie z konca
:: Odswiezamy okno za kazdym razem, filtr byl pusty po zgloszeniu problemu.
   exec('btnc_odswiez','ekioski');
   ~~
?};
_count


\setFiltr2Rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawienie filtra na operacje czakające na zakończenie
::   WE: [_a] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::----------------------------------------------------------------------------------------------------------------------
_tab_end:={? var_pres('_b')>100 || _b || ~~ ?};

FILTER.blank(1);

exec('work_end_filter_prepare','ekioski',_tab_end);

{? VEK.PROD_REJ=null()
||
:: 1.Aktualny wydzial        [null] lub [SLO.ref]
   FILTER.PR_A_WYD:=VEK.A_WYD;
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
   FILTER.PR_A:='T';
:: 3.Dostepny do rejestracji [T] tak, [N] nie, [] all
   FILTER.PR_DOREJ:='';
:: 4.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
   FILTER.PR_OK:='N';
:: 5.Zgloszony problem       [T] tak, [N] nie, [] all
   FILTER.PR_PROB:='';
:: 6.Stanowisko              [null] lub [TWRKPLC.KOD]
   FILTER.PR_RESS:=exec('FindAndGet','#table',TWRKPLC,VEK.TWRKPLC,,"KOD",'')
?};

exec('filter','prod_rej');

:: W drugiej kolejnosc filtr na karty przydzielone pracownikowi - tzw. "kolejka KAP" niestety wg kolejnosci filtra PROD_REJ
:: Analiza tylko gdy rejestracja nie odbywa się wg czasu faktycznego (parametr 500644)
{? PROD_REJ.f_first()=0 & PROD_REJ.SRODZ='ZL' & exec('get','#params',500644)='N'
||
   FILTER.blank(1);

   exec('work_start_filter_prepare','ekioski',_tab_end);

:: 1.Aktualny wydzial        [null] lub [SLO.ref]
   FILTER.PR_A_WYD:=null();
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
   FILTER.PR_A:='T';
:: 3.Dostepny do rejestracji [T] tak, [N] nie, [] all
   FILTER.PR_DOREJ:='';
:: 4.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
   FILTER.PR_OK:='N';
:: 5.Zgloszony problem       [T] tak, [N] nie, [] all
   FILTER.PR_PROB:='N';
:: 6.Stanowisko              [null] lub [TWRKPLC.KOD]
   FILTER.PR_RESS:=exec('FindAndGet','#table',TWRKPLC,VEK.TWRKPLC,,"KOD",'');
:: 7.Karty pracy przypisane do pracownika [null()] lub [P.ref()]
   FILTER.PR_P:=VEK.P;

   exec('filter','prod_rej')
?};

:: W trzeciej kolejnosc filtr na karty przydzielone do brygady - tzw. "kolejka KAP" niestety wg kolejnosci filtra PROD_REJ
:: Analiza tylko gdy rejestracja nie odbywa się wg czasu faktycznego (parametr 500644)
{? PROD_REJ.f_first()=0 & PROD_REJ.SRODZ='ZL' & VEK.A_ZLBR & exec('get','#params',500644)='N'
||
   FILTER.blank(1);

   exec('work_start_filter_prepare','ekioski',_tab_end);

:: 1.Aktualny wydzial        [null] lub [SLO.ref]
   FILTER.PR_A_WYD:=null();
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
   FILTER.PR_A:='T';
:: 3.Dostepny do rejestracji [T] tak, [N] nie, [] all
   FILTER.PR_DOREJ:='';
:: 4.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
   FILTER.PR_OK:='N';
:: 5.Zgloszony problem       [T] tak, [N] nie, [] all
   FILTER.PR_PROB:='N';
:: 6.Stanowisko              [null] lub [TWRKPLC.KOD]
   FILTER.PR_RESS:=exec('FindAndGet','#table',TWRKPLC,VEK.TWRKPLC,,"KOD",'');
:: 7.Karty pracy przypisane do brygady [null] lub [ZLBR.ref()]
   FILTER.PR_ZLBR:=VEK.A_ZLBR;

   exec('filter','prod_rej')
?};

::exec('filter','prod_rej');

{? PROD_REJ.f_first()
|| ZL.cntx_psh();
   _tpz:=PROD_REJ.ZGP().TPZ;
   _srodz:=PROD_REJ.SRODZ+PROD_REJ.ZL().TYP().WP+_tpz+PROD_REJ.ZGP().BRYG+PROD_REJ.KOOP;
   ZL.cntx_pop();
   VEK.SRODZ:=_srodz
?};

~~


\work_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Rejestruj zakończenie pracy
::   WE: _a tm_stamp końca
::       [_b] - zwracać tylko liczbę dostępnych operacji (bez wyświetlania panelu): 1 - tak, [0] - nie
::       [_c] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::   WY: 0/1 dla _b=0, liczba operacji dla _b=1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
eSelect.wyn_OK:=0;
eSelect.tm_end:={? _>0 || {? type_of(_a)<>1 || 0 || _a ?} || 0 ?};
eSelect.prod_rej:=null();
_count_only:={? var_pres('_b')=type_of(0) || _count_only:=_b || 0 ?};
_tab_end:={? var_pres('_c')>100 || _c || ~~ ?};

exec('setFiltr2Rej','ekioski',_tab_end);

{? _count_only
|| {? PROD_REJ.f_active()
   || _count:=PROD_REJ.f_size()
   || _count:=PROD_REJ.size()
   ?};
   return(_count)
?};

USERS.cntx_psh();

eSelect.wer_rej:='EWER_END';
eLevel.up(PROD_REJ,eSelect.wer_rej,'WORK_END',
   "params_exec('display_4rej','prod_rej')","params_exec('filter_4rej','ekioski')"
);

VEK.SRODZ:='';

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',__develop);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuEnd_table','ekioski');
   exec('load','#desktop','ctr_menu_end','ekiosk_menu_end.dsk',,,,,_tab,1);

   exec('hideFld','ekioski');
::   exec('set_value','#desktop','','ctr_menu_end','fld_il@menu_end','');

:: Żeby klawisz ESC działał trzeba aktywować okienko z kontrolką, bo tam jest domyślnie focus
::   exec('set_active_win','#desktop','','ctr_menu_end',2);
   {? exec('upr_problem','zl_wkj')=0
   || exec('set_visible','#desktop','','ctr_menu_end','btn_problem@menu_end',0)
   ?};

::   exec('set_visible','#desktop','','ctr_menu_end','1344898265874',0);
::   exec('set_visible','#desktop','','ctr_menu_end','1344898504814',0);
::   exec('set_visible','#desktop','','ctr_menu_end','1344898513004',0);
::   exec('set_visible','#desktop','','ctr_menu_end','1338268492218',0);
::   exec('set_visible','#desktop','','ctr_menu_end','f89gg7dnece4g2nd1efj72eehhd5',0);
::   exec('set_visible','#desktop','','ctr_menu_end','1fkmhfl43hhkbcib76nn5b0cg954f',0);

   grp_disp(PROD_REJ,eSelect.wer_rej,0,1);
::   exec('setFld','ekioski');
   ~~
";

_grp:=USERS.grp_make('Rejestracja wykonania operacji'@,_before,'ekioski003',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1');
:: -----------------------------------------------
_after_refresh:="
   {? grp_empty(PROD_REJ,eSelect.wer_rej)
   || exec('set_visible','#desktop','','ctr_menu_end','',0)
   || {? eSelect.prod_rej<>PROD_REJ.ref()
      || eSelect.prod_rej:=PROD_REJ.ref();
         VAR1.REJ_WYR:={? exec('zgp_czy_wyr','zl_wyr',PROD_REJ.ZGP)>0 || 'T' || 'N' ?};
         VAR1.BEZ_KAP:='N';
         exec('setFld','ekioski');
         exec('setBtnEnd','ekioski');
         ~~
      ?}
   ?}
";
USERS.grp_sel(_grp,PROD_REJ,eSelect.wer_rej,,_after_refresh,,,{? VEK.DPI=96 || 7 || 6 ?},,,,,'maximized',,1);
USERS.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
_before:="
   {? grp_empty(PROD_REJ,eSelect.wer_rej)
   || exec('set_visible','#desktop','','ctr_menu_end','',0)
   |? PROD_REJ.get()
   || _txt:='Nie można rejestrować wykonania, zapis blokowany jest'@;
      _locked:=exec('blk_lock','#table','PROD_REJ',PROD_REJ.ref(),,,_txt) &
         {? PROD_REJ.SRODZ='ZL' & PROD_REJ.GROP<>null()
         || exec('blk_lock','#table','GROP',PROD_REJ.GROP) & exec('blk_lock','#table','GROPS',PROD_REJ.GROPS,,,_txt)
         |? PROD_REJ.SRODZ='ZL'
         || exec('blk_lock','#table','ZGP',PROD_REJ.ZGP) & exec('blk_lock','#table','ZGH',PROD_REJ.ZGH,,,_txt)
         |? PROD_REJ.SRODZ='PL'
         || exec('blk_lock','#table','PL_OPER',PROD_REJ.PL_OPER,,,_txt)
         |? PROD_REJ.SRODZ='PX'
         || exec('blk_lock','#table','PX_POZ',PROD_REJ.PX_POZ,,,_txt)
         || 0
         ?};
      _condition:=_locked & (PROD_REJ.PROBLEM='N' | PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj'));
::    ilości
      exec('set_enabled','#desktop','','ctr_menu_end','fld_il@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_il_brak@menu_end',_condition);
::    czas
      exec('set_enabled','#desktop','','ctr_menu_end','fld_time@menu_end',_condition);
::    wymiary
      exec('set_enabled','#desktop','','ctr_menu_end','fld_jm1@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_jm2@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_jm3@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_jm4@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_jm5@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_val1@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_val2@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_val3@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_val4@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_val5@menu_end',_condition);
::    godziny
      exec('set_enabled','#desktop','','ctr_menu_end','fld_od@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','fld_do@menu_end',_condition);
::    klawisze
      exec('set_enabled','#desktop','','ctr_menu_end','btn_problem@menu_end',_locked);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_register@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_bad@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_calc@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','btn_etyk@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',_condition);
      exec('set_enabled','#desktop','','ctr_menu_end','combo_partia@menu_end',_condition);
      _il_brak:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'),',','.');
      exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',_il_brak>0)
   ?}
";
_after:="
   exec('blk_unlock','#table','PROD_REJ',PROD_REJ.ref());
   {? PROD_REJ.SRODZ='ZL' & PROD_REJ.GROP<>null()
   || exec('blk_unlock','#table','GROP',PROD_REJ.GROP);
      exec('blk_unlock','#table','GROPS',PROD_REJ.GROPS)
   |? PROD_REJ.SRODZ='ZL'
   || exec('blk_unlock','#table','ZGP',PROD_REJ.ZGP);
      exec('blk_unlock','#table','ZGH',PROD_REJ.ZGH)
   |? PROD_REJ.SRODZ='PL'
   || exec('blk_unlock','#table','PL_OPER',PROD_REJ.PL_OPER)
   |? PROD_REJ.SRODZ='PX'
   || exec('blk_unlock','#table','PX_POZ',PROD_REJ.PX_POZ)
   ?};
:: ilości
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_il_brak@menu_end',1);
:: czas
   exec('set_enabled','#desktop','','ctr_menu_end','fld_time@menu_end',1);
:: wymiary
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm1@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm2@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm3@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm4@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_jm5@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val1@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val2@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val3@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val4@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_val5@menu_end',1);
:: godziny
   exec('set_enabled','#desktop','','ctr_menu_end','fld_do@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','fld_do@menu_end',1);
:: klawisze
   exec('set_enabled','#desktop','','ctr_menu_end','btn_problem@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','btn_register@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','btn_surowce_lim@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','btn_bad@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','btn_etyk@menu_end',1);
   exec('set_enabled','#desktop','','ctr_menu_end','combo_stanowisko@menu_end',1);
   _il_brak:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'),',','.');
   exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',_il_brak>0);
   ~~
";
_win1:=exec('create','#desktop',USERS,'ctr_menu_end',_grp,{? VEK.DPI=96 || 16 || 13 ?},eSelect.grp_width,,,,,,,_before,_after);
USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
_win2:=exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

USERS.win_sel(_grp);

{? VEK.PROD_REJ
|| PROD_REJ.f_seek(VEK.PROD_REJ)
?};

{? USERS.select() & eSelect.wyn_OK=1
|| _wyn:=1;
   exec('filter','prod_rej',1)
?};
USERS.cntx_pop();

::{? exec('upr_kierownik','ekioski')=0 & (eSelect.key_Logout=1 | PROD_REJ.f_size()=0) || sel_exit() ?};
VAR_DEL.delete('__ENV_REJ');

eLevel.down();
_wyn


\btnc_odswiez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Odswiez w oknie z ComboBox
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('refresh_all','#desktop','','ctr_okno_prac');
:: Ustawia wydzial i stanowisko po odswiezeniu danych
exec('set_value','#desktop','','ctr_okno_prac','combo_wrkplc@okno_prac',$eSelect.cmb_wyd);
exec('set_value','#desktop','','ctr_okno_prac','combo_wrkplc@okno_prac',$eSelect.cmb_twrkplc);
1


\btnc_zamknij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Zamknij w oknie z ComboBox
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ctr_ret('ZAMKNIJ');
sel_exit()


\rec_logout
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk wyloguj ustawia identyfikator okna do ktorego maja zamknac sie okienka
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_can_logout:=1;
_not_user:=ctr_info('not_user_action');

{? _not_user='true'
|| {? exec('get_user_param','ekioski',8781,type_of(''))='N'
   || _can_logout:=0
   ?}
?};
{? VAR.DEBUG=1
||
:: pomijamy autowylogowanie wylogowanie
   _can_logout:=0
?};
{? _can_logout>0
||
   eLevel.set_close('OKNO_LOGOWANIA');
   sel_exit()
?};
1


\ikony_ekiosk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja uruchamiana przy starcie kiosku - ustawia ikonki dla pól okien
::   WE:
::   WY:
::---------------------------------------------------------------------------------------------------------------------
:: TODO: zweryfikować ikony - powinny być takie same jak w wersji jTerm

_formikon:="
   {? PROD_REJ.KOOP='T'
   || 'xwin16.png:90'
   |? PROD_REJ.PL_OGR<>null() | PROD_REJ.GROP<>null()
   || 'xwin16.png:188'
   || 'xwin16.png:110'
   ?}
";

PROD_REJ.win_fml('EWER_REJ',,'RES_SYM',,'ICON_BEFORE',_formikon);
PROD_REJ.win_fml('EWER_END',,'RES_SYM',,'ICON_BEFORE',_formikon);

_formikon:="
   {? PROD_REJ.BRYG='T'
   || 'xwin16.png:31'
   |? PROD_REJ.PRAC='T'
   || 'xwin16.png:100'
   || 'xwin16.png:110'
   ?}
";
PROD_REJ.win_fml('EWER_REJ',,'JM','KOD','ICON_BEFORE',_formikon);
PROD_REJ.win_fml('EWER_END',,'JM','KOD','ICON_BEFORE',_formikon);

_formikon:="
   {? PROD_REJ.OK='T'
   || 'xwin16.png:38'
   |? PROD_REJ.A='N'
   || 'xwin16.png:8'
   || 'xwin16.png:110'
   ?}
";
PROD_REJ.win_fml('EWER_REJ',VEK,'OPER',,'ICON_BEFORE',_formikon);
PROD_REJ.win_fml('EWER_END',VEK,'OPER',,'ICON_BEFORE',_formikon);

_formikon:="
   {? PROD_REJ.PROBLEM='T' & PROD_REJ.PROBKLAS=exec('prob_class_information','zl_wkj')
   || exec('problem_information','icon')
   |? PROD_REJ.PROBLEM='T' & PROD_REJ.PROBKLAS=exec('prob_class_suspensing','zl_wkj')
   || exec('problem_suspensing','icon')
   |? PROD_REJ.PROBLEM='T' & PROD_REJ.PROBKLAS=exec('prob_class_blocking','zl_wkj')
   || exec('problem_blocking','icon')
   || exec('pusta','#icon')
   ?}
";
PROD_REJ.win_fml('EWER_REJ',,'ILC',,'ICON_BEFORE',_formikon);
PROD_REJ.win_fml('EWER_END',VEK,'IL',,'ICON_BEFORE',_formikon);

_formikon:="
   {? PROD_REJ.KJ_BAD='B'
   || 'xwin16.png:93'
   |? PROD_REJ.KJ_BAD='P'
   || 'xwin16.png:94'
   |? PROD_REJ.KONTROLA='T'
   || 'xwin16.png:95'
   || 'xwin16.png:110'
   ?}
";
PROD_REJ.win_fml('EWER_REJ',VEK,'IL',,'ICON_BEFORE',_formikon);
PROD_REJ.win_fml('EWER_END',,'IL',,'ICON_BEFORE',_formikon);

_formikon:="'xwin16.png:110'";
::PROD_REJ.win_fml('EWER_REJ',,'ZL','SYM','ICON_BEFORE',_formikon);
::PROD_REJ.win_fml('EWER_END',,'ZL','SYM','ICON_BEFORE',_formikon);

_formikon:="
   {? PROD_REJ.ZGP().TPZ='T'
   || 'xwin16.png:89'
   || 'xwin16.png:110'
   ?}
";
PROD_REJ.win_fml('EWER_REJ',,'M','KTM','ICON_BEFORE',_formikon);
:: Ikonki dla remontów
_formikon:="
   _status:=exec('rem_czyu_status','zasoby',REM_ZGL.ref());
   {? _status=2
   || 'xwin16.png:1'
   |? _status=1
   || 'xwin16.png:10'
   |? _status=0
   || 'xwin16.png:18'
   || exec('pusta','#icon')
   ?}
";
REM_ZGL.win_fml('EWER',,'REM_KATG','SYMBOL','ICON_BEFORE',_formikon);
~~


\btn_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Start
::   WE: [_a] - czy rejestrować od razu wykonanie [0]/1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _rej_wyk:=_a || _rej_wyk:=0 ?};

_ok:=1;

{? PROD_REJ.f_size()=0
|| _komunikat:='Brak danych. Funkcja nieaktywna.'@;
   _ok:=0
||
   {? PROD_REJ.index('?')<>'TMSTAMPS' || PROD_REJ.index('TMSTAMPS') ?};

   {? PROD_REJ.index('?')<>'TMSTAMPS'
   || _komunikat:=
         'Została zmieniona kolejność w oknie. Należy ponownie otworzyć okno ze szczegółami.'@+'\n'+
         {? _rej_wyk
         || 'Nie można zarejestrować tej operacji.'@
         || 'Nie można wykonać startu dla tej operacji.'@
         ?};
      _ok:=0
   ||

      {? PROD_REJ.OK='T'
      || _komunikat:=
            'Wykonanie operacji zostało już zarejestrowane.'@+'\n'+
            {? _rej_wyk
            || 'Nie można zarejestrować tej operacji.'@
            || 'Nie można wykonać startu dla tej operacji.'@
            ?};
            _ok:=0

      |? PROD_REJ.PROBLEM='T' & PROD_REJ.PROBKLAS<>exec('prob_class_information','zl_wkj')
      || _komunikat:=
            'Do operacji zgłoszono problem klasy \'%1\'.'@[PROD_REJ.PROBKLAS]+'\n'+
            {? _rej_wyk
            || 'Nie można zarejestrować tej operacji.'@
            || 'Nie można wykonać startu dla tej operacji.'@
            ?};
         _ok:=0

      |? PROD_REJ.KOOP='T'
      || _komunikat:='Kooperacja — nie można rejestrować na e-kiosku.'@;
         _ok:=0

      |? PROD_REJ.SRODZ='PL' & PROD_REJ.GROP<>null()
      || _komunikat:='Operacja grupowa w planie operacyjnym — nie można rejestrować na e-kiosku.'@;
         _ok:=0

      |? PROD_REJ.PX_POZ().PX_OBJ().REM_ZGL<>null() | PROD_REJ.PL_OPER().REM_PLAN<>null()
      || _komunikat:='Zgłoszenie remontowe — nie można rejestrować na e-kiosku.'@;
         _ok:=0

      |? PROD_REJ.GROP<>null() & PROD_REJ.GROPS=null()
      || _komunikat:='Grupa operacji nieplanowana — nie można rejestrować wykonania.'@;
         _ok:=0

      |? PROD_REJ.DOREJ<>'T'
      || {? PROD_REJ.SRODZ='ZL'
         || {? exec('get','#params',500631,2)='T' || _ok:=0 ?}
         |? PROD_REJ.SRODZ='PL'
         || {? exec('get','#params',500632,2)='T' || _ok:=0 ?}
         |? PROD_REJ.SRODZ='PX'
         || {? exec('get','#params',500633,2)='T' || _ok:=0 ?}
         ?};
         {? _ok=0
         || _komunikat:=
               {? _rej_wyk
               || 'Operacja nie może być zarejestrowana — najpierw należy zarejestrować operacje poprzedzające.'@
               || 'Operacja nie może zostać rozpoczęta — najpierw należy zarejestrować operacje poprzedzające.'@
               ?}
         ?}
      ?}
   ?}
?};
{? _ok=0 || FUN.info(_komunikat) ?};

{? _ok=1
|| {? _rej_wyk
   || _vek_prod_rej:=VEK.PROD_REJ;
      VEK.PROD_REJ:=PROD_REJ.ref();
      _res:=exec('work_end','ekioski');
      VEK.PROD_REJ:=_vek_prod_rej;
:: Problem z odtworzeniem kontekstu filtra, więc zawsze zwinięcie okna
::      {? _res || sel_exit() || exec('filter','prod_rej') ?}
      sel_exit()
   || exec('startOper','ekioski')
   ?}
?};
~~


\startOper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Start operacji
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;

{? PROD_REJ.SRODZ<>'ZL' & PROD_REJ.START='T' & VEK.KAP=null()
|| FUN.info('Operacja już jest w trakcie realizacji.\nNie można uruchomić operacji uruchomionej.'@)
|| {? PROD_REJ.SRODZ='ZL'
   || exec('startZL','ekioski')
   |? PROD_REJ.SRODZ='PL'
   || _vprodr:=VPRODREJ.PROD_REJ;
      VPRODREJ.PROD_REJ:=PROD_REJ.ref();
      exec('start_4rej','po_wyk');
      VPRODREJ.PROD_REJ:=_vprodr
   |? PROD_REJ.SRODZ='PX'
   || exec('startPxWyk','ekioski')
   ?}
?};
_ret


\startZL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Start dla zlecenia
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('access','zl_wyk') || return() ?};

{? PROD_REJ.f_size()=0
|| FUN.info('Brak danych. Funkcja nieaktywna.'@);
   return()
?};
PROD_REJ.f_get();

::{? PROD_REJ.START='T'
::|| FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@)

{? PROD_REJ.ZGP<>null() & exec('FindInSet','#table','GROPP','ZGP',PROD_REJ.ZGP)
|| FUN.info('Zapis użyty w grupie operacji — nie można bezpośrednio rejestrować wykonania.'@)

|? PROD_REJ.PROBLEM='T' & PROD_REJ.PROBKLAS<>exec('prob_class_information','zl_wkj')
||
   FUN.info('Operacja ma zgłoszony problem klasy \'%1\'.'@[PROD_REJ.PROBKLAS])
||
   ZGP.cntx_psh(); GROP.cntx_psh();
   ZGP.clear(); GROP.clear();
   {? PROD_REJ.GROP<>null() & GROP.seek(PROD_REJ.GROP)
   || _bryg:=exec('grop_bryg','zl_grop',GROP.ref());
      {? _bryg='T'
      || exec('start_bryg','ekioski')
      || exec('start_prac','ekioski')
      ?}
   |? PROD_REJ.ZGP<>null() & ZGP.seek(PROD_REJ.ZGP)
   || {? ZGP.BRYG='T'
      || exec('start_bryg','ekioski')
      || exec('start_prac','ekioski')
      ?}
   || FUN.error('Brak przewodnika.'@)
   ?};
   ZGP.cntx_pop(); GROP.cntx_pop()
?};
~~


\start_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja start z poziomu brygady
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? VEK.A_ZLBR=null()
|| FUN.info('Nie wybrano brygady z którą aktualnie pracujesz.\n'
            'Uruchomienie operacji niemożliwe.'@);
   return()
?};

:: --------------------
REF.P:=VEK.P; REF.P();
REF.OSOBA:=VEK.P().OSOBA; REF.OSOBA();
:: --------------------

{? exec('get','#params',500646)='T' & exec('ongoing','zl_wyk',VEK.A_ZLBR)
|| FUN.info('Przed rozpoczęciem operacji należy zakończyć poprzednią.'@);
   return()
?};
_tpz:=exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.TPZ='T'",0);
_zlw:={? exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP)='T' || 1 || 0 ?};
:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP,1,1,VEK.A_ZLBR);
{? exec('get','#params',500648)='T' & ~_tpz & ~_zlw
   & PROD_REJ.IL+(VAR1.K_SUMPI-VAR1.K_SUMPWI)<=VAR1.K_SUM_I-VAR1.K_SUM_WI
|| _msg:='Cała ilość została już rozpisana.'@;
   _choice:=FUN.choice(_msg,,'Szczegóły'@);

   {? _choice=1
   || exec('kap_view','ekioski');
      grp_disp(PROD_REJ,eSelect.wer_rej,0,1)
   ?}
;
   return()
?};

_args:=exec('add_akord_a','zl_wyk');
_args.ZGP:=PROD_REJ.ZGP;
_args.GROP:=PROD_REJ.GROP;
_args.GROPS:=PROD_REJ.GROPS;
_args.P:=null();
_args.ZLBR:=VEK.A_ZLBR;
VEK.A_DATA:=date();
_args.DT:=VEK.A_DATA;
_args.ZMIANA:=exec('zmiana','zl_common',time());
{? _args.ZGP<>null()
|| _args.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PROD_REJ.ZGP().PLACE().WYD().KOD);
   _args.KAP:=exec('kap_kolejka','ekioski',PROD_REJ.ZGP,PROD_REJ.ZGP().BRYG,VEK.P,VEK.A_ZLBR)
?};

:: Start operacji - ilość zero
_args.ZAK:='N';
_args.IL:=0;

_args.STARTD:=date();
_args.STARTT:=time();
_args.ENDD:=date(0,0,0);
_args.ENDT:=time(0,0,0);

_dalej:=1;

{? _dalej=1
|| _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',_args.ZLBR);
   {? _ile_w_zlbs=0
   || FUN.info(
         'Brak pracowników w składzie brygady.'@+'\n'+
         'Uruchomienie operacji niemożliwe.'@
      );
      _dalej:=0
   ?}
?};

{? _dalej=1
||
   _zlgd:=exec('findZlgdZ','ekioski',_args.ZGP,_args.P,_args.ZLBR,_args.GROPS);
   {? _zlgd=null()
   ||
      ZLGD.index('ZLECENIE');
      ZLGD.prefix();

::    Operacja nie została rozpoczęta - można zrobić start
      {? exec('add_akord','zl_wyk',_args)
      ||
::       Wyświetlam okno z rozpiską surowców nielimitowanych do rozliczenia
         {? exec('get_user_param','ekioski',8784,type_of(''))='T'
            & exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL)
         || exec('surowce','ekioski',0)
         ?};
::       Wyświetlam okno rejestracji wyników badań
         {? exec('get_user_param','ekioski',8783,type_of(''))='T'
            & exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BAD_OP<>null()",0)
         || exec('btn_bad','ekioski',0)
         ?};

         {? exec('upr_kierownik','ekioski')=0 & exec('get_user_param','ekioski',8780,type_of(''))='T'
         || eSelect.key_Logout:=1
         ?};
         sel_exit()
      ?}
   || FUN.info('Wybrana operacja jest w trakcie realizacji.\nNie można ponowie wystartować operacji.'@)
   ?}
?};
~~


\start_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja start z poziomu pracownika
::----------------------------------------------------------------------------------------------------------------------
:: --------------------
REF.P:=VEK.P; REF.P();
REF.OSOBA:=VEK.P().OSOBA; REF.OSOBA();
:: --------------------

{? exec('get','#params',500646)='T' & exec('ongoing','zl_wyk',REF.P)
|| FUN.info('Przed rozpoczęciem operacji należy zakończyć poprzednią.'@);
   return()
?};

_tpz:=exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.TPZ='T'",0);
_zlw:={? exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP)='T' || 1 || 0 ?};
:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP,1,1,VEK.P);
{? exec('get','#params',500648)='T' & ~_tpz & ~_zlw
   & PROD_REJ.IL+(VAR1.K_SUMPI-VAR1.K_SUMPWI)<=VAR1.K_SUM_I-VAR1.K_SUM_WI
|| _msg:='Cała ilość została już rozpisana.'@;
   _choice:=FUN.choice(_msg,,'Szczegóły'@);

   {? _choice=1
   || exec('kap_view','ekioski',1);
      grp_disp(PROD_REJ,eSelect.wer_rej,0,1)
   ?};
   return()
?};

_args:=exec('add_akord_a','zl_wyk');
_args.ZGP:=PROD_REJ.ZGP;
_args.ZGH:=PROD_REJ.ZGH;
_args.GROP:=PROD_REJ.GROP;
_args.GROPS:=PROD_REJ.GROPS;
_args.P:=VEK.P;
_args.ZLBR:=null();
VEK.A_DATA:=date();
_args.DT:=VEK.A_DATA;
_args.ZMIANA:=exec('zmiana','zl_common',time());
{? _args.ZGP<>null()
|| _args.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',PROD_REJ.ZGP().PLACE().WYD().KOD);
   _args.KAP:=exec('kap_kolejka','ekioski',PROD_REJ.ZGP,PROD_REJ.ZGP().BRYG,VEK.P,VEK.A_ZLBR)
?};

:: Start operacji - ilość zero
_args.ZAK:='N';
_args.IL:=0;

_args.STARTD:=date();
_args.STARTT:=time();
_args.ENDD:=date(0,0,0);
_args.ENDT:=time(0,0,0);

_dalej:=1;

{? _dalej=1
||
   _zlgd:=exec('findZlgdZ','ekioski',_args.ZGP,_args.P,_args.ZLBR,_args.GROPS);
   {? _zlgd=null()
   ||
      ZLGD.index('ZLECENIE');
      ZLGD.prefix();

::    Operacja nie została rozpoczęta - można zrobić start
      {? exec('add_akord','zl_wyk',_args)
      ||
::       Wyświetlam okno z ropiską surowców nielimitowanych do rozliczenia
         {? exec('get_user_param','ekioski',8784,type_of(''))='T'
            & exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL)
         || exec('surowce','ekioski',0)
         ?};
::       Wyświetlam okno rejestracji wyników badań
         {? exec('get_user_param','ekioski',8783,type_of(''))='T'
            & exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BAD_OP<>null()",0)
         || exec('btn_bad','ekioski',0)
         ?};
         {? exec('upr_kierownik','ekioski')=0 & exec('get_user_param','ekioski',8780,type_of(''))='T'
         || eSelect.key_Logout:=1
         ?};
         sel_exit()
      ?}
   || FUN.info('Wybrana operacja jest w trakcie realizacji.\nNie można ponowie wystartować operacji.'@)
   ?}
?};
~~


\czy_zlec_warszt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Czy zlecenie warsztatowe? Kontekst ZGP
::   WE: _a - ZGP.ref()
::   WY: 'T' - zlecenie warsztatowe, 'N' - zlecenie produkcyjne
::----------------------------------------------------------------------------------------------------------------------
_zgp_ref:=_a;

_wyn:='N';
Cntx.psh(ZGP,ZGH,ZL,ZTP);
ZGP.clear();
{? ZGP.seek(_zgp_ref)
||
   {? ZGP.NRPRZ().ZLEC().TYP().WP='W'
   || _wyn:='T'
   ?}
?};
Cntx.pop(ZGP,ZGH,ZL,ZTP);
_wyn


\btn_koniec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Koniec Rejestruj wykonanie
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
VEK.RODZA:='REJ_WYK';
{? PROD_REJ.SRODZ='ZL'
|| _wyn:=exec('wykon_4rej','zl_wyk')
|? PROD_REJ.SRODZ='PL'
|| _wyn:=exec('stop_4rej','po_wyk')
|? PROD_REJ.SRODZ='PX'
|| _wyn:=exec('stopPxWyk','ekioski')
?};
VEK.RODZA:='';
{? _wyn
||
   sel_exit();

::   _wielom:=PROD_REJ.ZGP().PL_GRP='T';
::   {? _wielom=0
::   || sel_exit()
::   ||
::      exec('setFiltr2Rej','ekioski');
::
::      {? PROD_REJ.f_size()=0
::      || sel_exit()
::      || grp_disp(PROD_REJ,eSelect.wer_rej,0,1)
::      ?}
::   ?};
   {? eLevel.tab[eLevel.pos].name='prod_rej'
   || grp_disp(PROD_REJ,eSelect.wer_rej,0,1);
      exec('set_value','#desktop','','ctr_menu_end','fld_il@menu_end','');
      exec('set_value','#desktop','','ctr_menu_end','fld_il_brak@menu_end','')
   || {? exec('upr_kierownik','ekioski')
      || eLevel.set_close('PANEL_MENUG')
      || eLevel.set_close('OKNO_RED_PRAC')
      ?}
   ?}
?};
eSelect.wyn_OK:=_wyn;
_wyn


\setArgs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przedefiniowuje tabele _args - w zależności od kontektu pracy
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_args.ZAK:='T';
ZGP.cntx_psh();
{? VEK.TERM='T'
|| {? VEK.RODZA='REJ_WYK'
   || {? PROD_REJ.ZGP().BRYG='T'
      || _args.ZLBR:=VEK.A_ZLBR;
         _args.P:=null()
      || _args.ZLBR:=null();
         _args.P:=VEK.P
      ?}
   ?}
?};
ZGP.cntx_pop();
~~


\setEndVar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawia zmienne wykorzystywane podczas normalnej rejestracji wykonania
::   WE: _a - formuła walidująca
::----------------------------------------------------------------------------------------------------------------------
_valid:=_a;

{? VAR1.ZAK_EK<>'T'
||
   {? VAR1.REJ_WYR='T'
   ||
      _sum:=exec('env_sum_il','zl_wyr',1);
      _il_wyk:=_sum.IL;
      _il_brak:=_sum.IL_BRAK;
::    Partia - wymagana tylko w przypadku rejestracji robocizny z zerową ilością
      {? _il_wyk+_il_brak=0
      || _part_sym:=exec('get_value','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','combo_partia@menu_wyr');
         {? _part_sym=''
         || _partia:=null()
         || _partia:=exec('FindInSet','#table','ZPARN','PARTIA',_part_sym,,"ZPARN.ref()",1,,null())
         ?}
      || _partia:=null()
      ?};
      _place_kod:=exec('get_value','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','combo_stanowisko@menu_wyr');
      {? _place_kod=''
      || _place:=null()
      || _place:=exec('FindInSet','#table','TWRKPLC','KOD',_place_kod,,"TWRKPLC.ref()",1,,null())
      ?};
      _braki_r_kod:=exec('get_value','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','combo_braki_r@menu_wyr');
      {? _braki_r_kod=''
      || _braki_r:=null()
      || _braki_r:=exec('FindInSet','#table','BRAKI_R','KOD',_braki_r_kod,,,1,,null)
      ?};

      VPRODREJ.TIME:=#gsub(exec('get_value','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_time@menu_wyr'),',','.')
   || _il_wyk:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il@menu_end'),',','.');
      _il_brak:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'),',','.');

      _part_sym:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','combo_partia@menu_end');
      {? _part_sym=''
      || _partia:=null()
      || _partia:=exec('FindInSet','#table','ZPARN','PARTIA',_part_sym,,"ZPARN.ref()",1,,null())
      ?};

      _place_kod:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','combo_stanowisko@menu_end');
      {? _place_kod=''
      || _place:=null()
      || _place:=exec('FindInSet','#table','TWRKPLC','KOD',_place_kod,,"TWRKPLC.ref()",1,,null())
      ?};

      _braki_r_kod:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','combo_braki_r@menu_end');
      {? _braki_r_kod=''
      || _braki_r:=null()
      || _braki_r:=exec('FindInSet','#table','BRAKI_R','KOD',_braki_r_kod,,,1,,null)
      ?};

      _od:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_od@menu_end');
      _do:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_do@menu_end');

      _g1:=time();
      _g2:=time();
      _czas:=time(0,0,0);

      _t1:=spli_str(_od,':');
      {? (#_t1[1]>=0 & #_t1[1]<=23) & (#_t1[2]>=0 & #_t1[2]<=59) & (#_t1[3]>=0 & #_t1[3]<=59)
      || _g1:=time(#_t1[1],#_t1[2],#_t1[3])
      ?};

      _t2:=spli_str(_do,':');
      {? (#_t2[1]>=0 & #_t2[1]<=23) & (#_t2[2]>=0 & #_t2[2]<=59) & (#_t2[3]>=0 & #_t2[3]<=59)
      || _g2:=time(#_t2[1],#_t2[2],#_t2[3])
      ?};

      {? _g1=time(0,0,0)
      || _g1:=time()
      ?};
      {? _g2=time(0,0,0)
      || _g2:=time()
      ?};

      _czas:={? _g2<_g1 || time(24,0,0)-_g2+_g1 || _g2-_g1 ?};
      VPRODREJ.TIME:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_time@menu_end'),',','.')
   ?}

||
:: Zakańczanie operacji ekioskowych z poziomu Merit ERP
   _il_wyk:=VPRODREJ.IL;
   _il_brak:=VPRODREJ.IL_BRAK;
   _partia:=VPRODREJ.ZPARN;
   _place:=VPRODREJ.PLACE;
   _braki_r:=VPRODREJ.BRAKI_R
?};
VPRODREJ.IL:={? PROD_REJ.GROP<>null() & exec('rej_more_than_one_grop','ekioski')=0 || 1 || _il_wyk ?};
VPRODREJ.IL_BRAK:=_il_brak;
VPRODREJ.IL_DOREJ:=VEK.IL;

_ilosc:=_il_wyk+_il_brak;
_srodz:=PROD_REJ.SRODZ;

::VPRODREJ.TIME:=exec('time2h','ekioski',_czas);

_can_continue:=1;
{? PROD_REJ.ZGP<>null() & PROD_REJ.ZGP().TPZ='T'
|| {? VPRODREJ.TIME<=0 & ~((VEK.TERM='T' | VAR1.ZAK_EK='T') & exec('get','#params',500644)='T')
   || FUN.info('Należy wpisać czas większy od zera.'@);
      _can_continue:=0;
      VPRODREJ.OK:='N'
   |? FUN.ask('Czy zakończyć wykonywanie operacji?'@)
   || VPRODREJ.OK:='T'
   || VPRODREJ.OK:='N'
   ?};
   VPRODREJ.IL:=0;
   VPRODREJ.IL_BRAK:=0
::|? VPRODREJ.IL_DOREJ<=_il_wyk
|? PROD_REJ.IL<=_il_wyk
|| VPRODREJ.OK:='T'
|| VPRODREJ.OK:='N'
?};
VPRODREJ.ZPARN:=_partia;
VPRODREJ.PLACE:=_place;
VPRODREJ.WYD:=null();
{? VPRODREJ.PLACE<>null()
|| VPRODREJ.WYD:=exec('szukaj_ud_skl','schemat','PODZORG',VPRODREJ.PLACE().WYD().KOD)
?};
VPRODREJ.BRAKI_R:=_braki_r;

{? _can_continue>0
|| _validated:=_valid()
|| _validated:=0
?};

:: Dodatkowo: gdy rejestracja do zlecenia, włączona możliwość wpisania zerowej ilości,
:: a nie podano ilości - należy podać czas trwania operacji
{? (type_of(_validated)=2 & _validated='' | type_of(_validated)=1 & _validated=1) & _srodz='ZL'
   & VPRODREJ.IL=0 & VPRODREJ.IL_BRAK=0 & VPRODREJ.TIME=0 & exec('get','#params',500643)='T'
   & ((PROD_REJ.ZGP<>null() & PROD_REJ.ZGP().TPZ='N') | PROD_REJ.GROP<>null())
|| {? exec('get','#params',500644)='N' & ((PROD_REJ.ZGP<>null() & PROD_REJ.ZGP().NTIME<>0) | PROD_REJ.GROP<>null())
   || {? VAR1.ZAK_EK<>'T'
      || {? VAR1.REJ_WYR='T'
         || _elements:=exec('get_elements','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','menu_wyr')
         || _elements:=exec('get_elements','#desktop','#:ctr_menu_end','ctr_menu_end','menu_end')
         ?};
         _ndx:=_elements.ndx_tmp(,,'ID_OWN',,);
         _elements.index(_ndx);
         _elements.prefix('fld_time',);
::      exec('select','#table',_elements);
         {? _elements.first()
         || _time_visible:=(_elements.VISIBLE='true')
         || _time_visible:=0
         ?}
      || _time_visible:=1
      ?};
      {? _time_visible
      || {? VAR1.ZAK_EK<>'T'
         || _choice:=FUN.choice('Podano zerowy czas, czy chcesz zarejestrować operację?'@,,'Tak'@,'Nie'@)
         || _choice:=FUN.choice('Podano zerową ilość oraz czas, czy chcesz zarejestrować operację?'@,,'Tak'@,'Nie'@)
         ?};
         {? _choice=1
         || _validated:=1;
            VAR1.REJ_WYR:='N'
         |? _choice=2
         || _validated:=0
         || {? VAR1.ZAK_EK<>'T'
            || {? VAR1.REJ_WYR='T'
               || exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il@menu_wyr',1);
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il_brak@menu_wyr',1);
                  {? Plugin.runnable('EKIOSK_CALC_IL_001')
                  || exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','btn_calc@menu_wyr',1)
                  ?};
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_time@menu_wyr',0)
               || _czy_grop:=PROD_REJ.GROP<>null();
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il@menu_end',1);
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'
                       ,{? _czy_grop || 0 || 1 ?});
                  {? Plugin.runnable('EKIOSK_CALC_IL_001')
                  || exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','btn_calc@menu_end'
                          ,{? _czy_grop || 0 || 1 ?})
                  ?};
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_time@menu_end',0)
               ?}
            ?};
            _validated:=0
         ?}
      || _choice:=FUN.choice('Podano zerową ilość, czy chcesz wpisać czas realizacji?'@,,'Tak'@,'Nie'@);
         {? _choice=1
         || {? VAR1.ZAK_EK<>'T'
            || {? VAR1.REJ_WYR='T'
               || exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il@menu_wyr',0);
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il_brak@menu_wyr',0);
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','btn_calc@menu_wyr',0);
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_time@menu_wyr',1)
               || exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il@menu_end',0);
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end',0);
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','btn_calc@menu_end',0);
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_time@menu_end',1)
               ?}
            ?};
            _validated:=0
         |? _choice=2
         || _validated:=1;
            VAR1.REJ_WYR:='N'
         || {? VAR1.ZAK_EK<>'T'
            ||
::               VAR1.REJ_WYR:={? exec('zgp_czy_wyr','zl_wyr',PROD_REJ.ZGP)>0 || 'T' || 'N' ?};
               {? VAR1.REJ_WYR='T'
               || exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il@menu_wyr',1);
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_il_brak@menu_wyr',1);
                  {? Plugin.runnable('EKIOSK_CALC_IL_001')
                  || exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','btn_calc@menu_wyr',1)
                  ?};
                  exec('set_visible','#desktop','#:ctr_menu_wyr','ctr_menu_wyr','fld_time@menu_wyr',0)
               || _czy_grop:=PROD_REJ.GROP<>null();
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il@menu_end',1);
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'
                       ,{? _czy_grop || 0 || 1 ?});
                  {? Plugin.runnable('EKIOSK_CALC_IL_001')
                  || exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','btn_calc@menu_end'
                          ,{? _czy_grop || 0 || 1 ?})
                  ?};
                  exec('set_visible','#desktop','#:ctr_menu_end','ctr_menu_end','fld_time@menu_end',0)
               ?}
            ?};
            _validated:=0
         ?}
      ?}
   || {? FUN.ask('Podano zerową ilość, czy chcesz zarejestrować operację?'@)
      || _validated:=1;
         VAR1.REJ_WYR:='N'
      || _validated:=0
      ?}
   ?}
?};
:: Wypełnienie tabeli z rospiską surowców nielimitowanych
{? var_pres('__ENV_REJ')>100 & __ENV_REJ.TYPE<>0
|| obj_del(__ENV_REJ);
   exec('rej_mat_fill_tmp','ekioski',0)
?};
:: Kontrola wypełnienia w całości rozpiski rozliczeń surowców (czy wszystkie pozycje surowców zostały rozpisane)
{? (type_of(_validated)=2 & _validated='' | type_of(_validated)=1 & _validated=1) & _srodz='ZL'
   & PROD_REJ.ZGP<>null() & PROD_REJ.ZGP().TPZ='N' & VAR1.ZAK_EK<>'T'
   & ((exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL)>0 & var_pres('__ENV_REJ')<100)
      | exec('chk_fill_rej_mat','zl_wyk')=0)
|| {? ~FUN.ask('Nie zarejestrowano pobrania dla wszystkich surowców.\nKontynuować?'@)
   || _validated:=0
   ?}
?};

{? _srodz='PL'
|| VPRODREJ.STARTT:=_g1;
   VPRODREJ.ENDD:={? _g2<_g1
                  || VPRODREJ.STARTD+1
                  || VPRODREJ.STARTD
                  ?};
   VPRODREJ.ENDT:=_g2
|? _srodz='ZL'
|| {? var_pres('vvar')>100
   || VPRODREJ.ENDD:=vvar.data;
      VPRODREJ.ENDT:=time(vvar.godz,vvar.mind*10+vvar.minj,0)
   || {? VAR1.ZAK_EK<>'T'
      || VPRODREJ.ENDD:=date();
         VPRODREJ.ENDT:=time()
      ?}
   ?}
?};

{? type_of(_validated)=2
|| {? _validated=''
   || 1
   || {? _srodz='ZL'
      || 0
      || -1
      ?}
   ?}
|? type_of(_validated)=1
|| {? _validated=1
   || 1
   || {? _srodz='ZL'
      || 0
      || -1
      ?}
   ?}
|| -1
?}


\time2h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Zwraca ilość godzin z czasu
::   WE: _a - czas
::----------------------------------------------------------------------------------------------------------------------
_a~1+(_a~2)/60+(_a~3)/3600


\findZlgdZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wyszukanie niezakończonego ZLGD dla ZGP albo GROPS
::   WE: _a - ZGP.ref()
::       _b - P.ref()
::       _c - ZLBR.ref()
::       _d - GROPS.ref()
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
ZLGD.cntx_psh();
_zlgd_names:=ZLGD.names();
{? _zlgd_names.first()
||
   {!
   |?
      ZLGD.use(_zlgd_names.NAME);
      ZLGD.cntx_psh();
      ZLGD.index('EK0');
      ZLGD.prefix('N',_a,_d,_b,_c);
      {? ZLGD.first()
      || _ref:=ZLGD.ref()
      ?};
      ZLGD.cntx_pop();
      _zlgd_names.next() & _ref=null()
   !}
?};
ZLGD.cntx_pop();
_ref


\panel_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Menu brygadzisty
::----------------------------------------------------------------------------------------------------------------------
eLevel.up(USERS,'THEAD','PANEL_MENUG');

_before:="
   _tab:=exec('elements_panelbryg_table','ekioski');
   exec('load','#desktop','ctr_menu_main','ekiosk_menu_main.dsk',,,,,_tab,1);
   _rem_upr:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_TRE_DPRZ')
      | exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_RZGL');
   exec('set_visible','#desktop','','ctr_menu_main','btn_rem@menu_main',_rem_upr);
   ~~
";
_grp:=USERS.grp_make('Menu'@,_before,'panelbryg',,,);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_main',_grp,25,eSelect.grp_width,,,,1);
:: -----------------------------------------------
USERS.win_sel(_grp);
USERS.select();

eLevel.down();
~~


\logout_terminal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Opcja wyloguj z poziomu terminala
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_exit()


\btn_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Obsługa przycisku brygady
::----------------------------------------------------------------------------------------------------------------------
{? exec('upr_brygadzista','ekioski')
||
   exec('brygady','ekioski');
::   exec('setAktBryg','ekioski');
   ~~
||
   FUN.info('Funkcja dostępna tylko dla Brygadzisty.'@)
?};
~~


\brygady
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Brygada
::----------------------------------------------------------------------------------------------------------------------
VEK.A_DATA:=date();

USERS.cntx_psh();
P.cntx_psh();

eSelect.wer_zlbr:=exec('win_zlbr','ekioski');
eSelect.wer_zlbs:=exec('win_zlbs','ekioski');
eLevel.up(ZLBR,eSelect.wer_zlbr,'PRZYP_BRYG',"exec('zlbr_display','ekioski')","exec('zlbr_filter','ekioski')");

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',1);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuBryg_table','ekioski');
   exec('load','#desktop','ctr_menu_bryg','ekiosk_menu_bryg.dsk',,,,,_tab,1);

   grp_disp(ZLBR,eSelect.wer_zlbr,0,1);
:: Odswiezanie ZLBS jest w odsiezaniu ZLBR wiec nie trzeba wywolywac
   {? 0 || grp_disp(ZLBS,eSelect.wer_zlbs,0,1) ?};

:: Ustawienie pseudo aktywnego okna, bo aktywne tylko dla menu nawigazyjnego
   eLevel.change(ZLBR,eSelect.wer_zlbr);
   ~~
";

_grp:=USERS.grp_make('Brygady'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------

ZLBR.index('OSOBA');
ZLBR.prefix();
ZLBR.f_clear();
{? ~ZLBR.seek(VEK.A_ZLBR) || ZLBR.first() ?};

_refresh:="
   exec('SetBtnBryg','ekioski');
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
   eLevel.change(ZLBR,eSelect.wer_zlbr);
   ~~
";
_before:="
   exec('SetBtnBryg','ekioski');
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
   eLevel.change(ZLBR,eSelect.wer_zlbr);
   ~~
";
USERS.grp_sel(_grp,ZLBR,eSelect.wer_zlbr,,_refresh,,,{? VEK.DPI=96 || 20 || 17 ?},_before,,,,'maximized_with_title',,1);
USERS.grp_splt(_grp,'pozioma_1','vertical','pionowa_4',0);
:: -----------------------------------------------
_before:="
   eLevel.change(ZLBS,eSelect.wer_zlbs);
   {? grp_empty(ZLBR,eSelect.wer_zlbr)
   || '#disable'
   || ZLBS.index('BODIP');
      ZLBS.prefix(ZLBR.ref());
      ~~
   ?}
";
USERS.grp_sel(_grp,ZLBS,eSelect.wer_zlbs,,,,,,_before,,,,'maximized_with_title');
USERS.grp_splt(_grp,,'horizontal','pozioma_5',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_bryg',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_6',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);
USERS.select();

USERS.cntx_pop();
P.cntx_pop();

eLevel.down();
~~


\SetBtnBryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Ukrywanie/pokazywanie przycisków w panelu ctr_menu_bryg
::----------------------------------------------------------------------------------------------------------------------
_active:=(ZLBR.AKT='T');
{? _active
|| _label:='<html><center>'+gsub('Dezaktywuj\nbrygadę'@,'\n','<br>')+'</html>'
|| _label:='<html><center>'+gsub('Aktywuj\nbrygadę'@,'\n','<br>')+'</html>'
?};
exec('set_value','#desktop','','ctr_menu_bryg','btn_act@menu_bryg',_label);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_work@menu_bryg',_active);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_this@menu_bryg',_active);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_add_lst@menu_bryg',_active);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_add_cal@menu_bryg',_active);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_add_card@menu_bryg',_active);
exec('set_visible','#desktop','','ctr_menu_bryg','btn_del@menu_bryg',_active);
~~


\win_zlbr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania Brygady
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_wer:=ZLBR.mk_sel('Brygady'@,'P',0,,,,15,,'P');

ZLBR.win_fld(_wer,,'KOD',,,15,,,'Kod brygady'@,,'Unikalny kod brygady'@);
::ZLBR.win_fld(_wer,,'P','ZA',,1,,,'Z',,'Zatrudniony'@);
ZLBR.win_fld(_wer,P,'OSOBA','NAZWISKO',,-10,,,'Brygadzista'@,,'Nazwisko brygadzisty'@);
ZLBR.win_fld(_wer,,'OD',,,10,,,'Od dnia'@,,'Brygada aktywna od'@);
ZLBR.win_fld(_wer,,'DO',,,10,,,'Do dnia'@,,'Brygada aktywna do'@);
ZLBR.win_fld(_wer,,'DYNAMIC',,,10,,,'Dynamiczna'@,,'Brygada dynamiczna?'@,2,,"\'T\'","\'N\'");
_formula:="
:: Kolorowanie
   ZLBR.P().OSOBA();
   {? ZLBR.ref()=VEK.A_ZLBR
   || exec('findtmp','#color')
   |? ZLBR.AKT='N'
   || exec('findfnv','#color')
   || ''
   ?}
";
ZLBR.win_act(_wer,,'Rekord',,,,_formula);
_formula:="exec('legenda','color','$%1'['Wybrana brygada'@],'$FLD_NV#01#01$%1'['Nieaktywna brygada'@])";
ZLBR.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');
_formula:="exec('zlbr_display','ekioski')";
ZLBR.win_act(_wer,,'Wyświetl',,,,_formula);
ZLBR.win_sel(_wer);
_wer


\win_zlbs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania Listy pracowników brygady z tabeli ZLBS
::   WE: [_a] - miejsce wywołania: 1 - przycisk Przydziel brygadę w oknie operacji, [0] - pozostałe.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_type:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_wer:=ZLBS.mk_sel('Skład brygady'@,'P',0,,,,15);
{? _type=1
|| ZLBS.win_fld(_wer,OSOBA,'NAZWISKO',,,22,,,'Nazwisko'@);
   ZLBS.win_fld(_wer,OSOBA,'PIERWSZE',,,15,,,'Imię'@);
   ZLBS.win_fld(_wer,P,'WYDZIAL','SYMBOL',,8,,,'Wydział'@)
|| ZLBS.win_fld(_wer,OSOBA,'NAZWISKO',,,10,,,'Nazwisko'@);
   ZLBS.win_fld(_wer,OSOBA,'PIERWSZE',,,9,,,'Imię'@);
   ZLBS.win_fld(_wer,P,'WYDZIAL','SYMBOL',,7,,,'Wydział'@)
?};

:: Akcje w okienku
ZLBS.win_act(_wer,,'Rekord',,,,"ZLBS.P().OSOBA().ref();~~",,1);
ZLBS.win_act(_wer,,'Kolejność');
ZLBS.win_act(_wer,,'Wyświetl');
ZLBS.win_sel(_wer);
_wer


\new_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Tworz nową brygadę
::----------------------------------------------------------------------------------------------------------------------
_prac:=VEK.P;
_data:=date();
_kal_nazw:=exec('kal_select','ekioski');
{? _kal_nazw
|| _zlbr_ref:=exec('zlbr_add','ekioski',_prac,_data,_kal_nazw);
   ZLBR.first();
   ZLBR.seek(_zlbr_ref);
   {? _zlbr_ref<>null()
   || grp_disp(ZLBR,eSelect.wer_zlbr,0,1)
   ?}
?};
~~


\zlbr_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Dodaje brygadę
::   WE: _a - P.ref()
::       _b - date()
::       [_c] - KAL_NAZW - kalendarz
::       [_d] - STRING - czy dynamiczna
::   WY: ZLBR.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_dynamic:='N';
{? var_pres('_d')=type_of('')
|| _dynamic:=_d
?};
_wyn:=null();
ZLBR.cntx_psh();
ZLBR.prefix();
ZLBR.blank();
ZLBR.P:=_a;
ZLBR.OD:=_b;
ZLBR.DO:=date(0,0,0);
_kod:=exec('zlbr_gen_kod','ekioski');
ZLBR.KOD:=_kod;
ZLBR.NAZ:=_kod;
ZLBR.KAL:=_c;
::ZLBR.ODDZ:=ST.ODDZ;
ZLBR.ODDZ:='';
ZLBR.H:='';
ZLBR.DYNAMIC:=_dynamic;
{? ZLBR.add()
|| _wyn:=ZLBR.ref();
   exec('dod_kal_czesc','kaledit',ZLBR)
?};
ZLBR.cntx_pop();
_wyn


\zlbr_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Usuwa brygadę
::   WE: [_a] - ZLBR.ref - lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZLBR.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

ZLBR.cntx_psh();
{? _ref<>null()
|| ZLBR.prefix();
   {? ZLBR.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _zlbs:=ZLBS.names();

   do();
   ZLBS.cntx_psh();
   {? _zlbs.first()
   || {!
      |? ZLBS.use(_zlbs.NAME);
         ZLBS.index('BODIP');
         ZLBS.prefix(ZLBR.ref());
         {? ZLBS.first()
         || {!
            |? _can_continue:=ZLBS.del(,1);
               ZLBS.first() & _can_continue>0
            !}
         ?};
         _zlbs.next()
      !}
   ?};
   ZLBS.cntx_pop();
   exec('usun_all','kaledit',ZLBR);
   PROJDOST.cntx_psh();
   PROJDOST.index('ZRODLOZ');
   PROJDOST.prefix($ZLBR.ref(),$ZLBR.ref());
   {? PROJDOST.first()
   || {!
      |? _can_continue:=PROJDOST.del(,1);
         PROJDOST.first() & _can_continue>0
      !}
   ?};
   PROJDOST.cntx_pop();
   _can_continue:=ZLBR.del(,1);
   {? _can_continue=0
   || undo()
   ?};
   end()

?};
ZLBR.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\zlbr_gen_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Generuje kod dla aktualnego bufora ZLBR
::   WY: Kod brygady
::----------------------------------------------------------------------------------------------------------------------
_kod:='';

Cntx.psh(ZLBR,SLO,P,OSOBA);
ZLBR.clear();

_data:=ZLBR.OD;
_kod:=form(_data~1,,,'9.')+form(_data~2,-2)+form(_data~3,-2);
_kod+='-';
_kod+=form(ZLBR.P().OSOBA().NAZWISKO,3);
_kod+=form(ZLBR.P().OSOBA().PIERWSZE,3);
::_kod+=ZLBR.P().WYDZIAL().SYMBOL;
_kod+='-';

ZLBR.index('KOD');
ZLBR.prefix(_kod);
{? ZLBR.last()
|| _numer:=(#(ZLBR.KOD+2))+1
|| _numer:=1
?};

_kod+=form(_numer,-2);
Cntx.pop(ZLBR,SLO,P,OSOBA);

_kod


\wyb_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk "Pracuję tą brygadą" - ustawia kontekst brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
   {? _ile_w_zlbs=0
   || FUN.info('Brak pracowników w składzie brygady.'@);
      grp_disp(ZLBR,eSelect.wer_zlbr,0,1)
   || VEK.A_ZLBR:=ZLBR.ref();
      grp_disp(ZLBR,eSelect.wer_zlbr,0,1)
   ?}
?};
~~


\prac2bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: wskazanie brygadzisty ze składu brygady
::   WE: [_a] - INTEGER - 0/[1] - czy odświeżać okno
::----------------------------------------------------------------------------------------------------------------------
_win_rfr:=1;
{? var_pres('_a')=type_of(0)
|| _win_rfr:=_a
?};
{? ZLBR.get()
|| {? ZLBR.AKT='N'
   || FUN.info('Brygada nieaktywna.\nFunkcja niedostępna.'@)

   || _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
      {? _ile_w_zlbs>0
      || ZLBR.P:=ZLBS.P;
         {? ZLBR.put()
         || {? _win_rfr>0
            || win_disp();
               grp_disp(ZLBR,ZLBR.win_sel('?'),0,1)
            ?}
         ?}
      || FUN.error('Brak pracowników w składzie brygady.'@)
      ?}
   ?}
?};
~~


\zlbs_lst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk "Dołącz z listy" pracownika brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| {? ZLBR.AKT='N'
   || FUN.info('Brygada nieaktywna.\nFunkcja niedostępna.'@)

   |? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
   ||
      P.cntx_psh();

      eSelect.wer_prac:=exec('win_prac_wybierz','ekioski');
      eLevel.up(P,eSelect.wer_prac,'ZLBS_LIS');

::    Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
      'WYLOGUJ'@; 'Wybierz'@;
      _before:="
         exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
         exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
::       filtr
         exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
::       info
         exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

         exec('load','#desktop','ctr_menu_tenpb','ekiosk_menu_ten_prac_bryg.dsk',,,,,,0);
         exec('set_value','#desktop','','ctr_menu_tenpb','btn_chooce@menu_tenpb','Wybierz'@);
         ~~
      ";
      _grp:=P.grp_make('Pracownicy'@,_before,'',0,0,,);
      P.grp_sel(_grp,,eSelect.wer_prac,,,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
      P.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
      exec('create','#desktop',P,'ctr_menu_tenpb',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
      P.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
      exec('create','#desktop',P,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
      P.clear();
      UD_FIR.cntx_psh();
      UD_FIR.index('UD_SKL');
      UD_FIR.prefix(REF.FIRMA);
      {? UD_FIR.first()
      || _ud_skl:=UD_FIR.UD_SKL
      || _ud_skl:=null()
      ?};
      UD_FIR.cntx_pop();
      _ud_def:=exec('szukaj_ud_def','schemat',
         exec('domyslny','schemat','PODZORG'),
         _ud_skl
      ).REF;
      exec('filtruj_p','schemat','TTE',_ud_def,'','T','T');
      P.f_first();

      P.win_sel(_grp);
      {? P.select(,1,10) & eSelect.key_Esc=0
      || exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO);
         ZLBS.first()
      ?};
      P.cntx_pop();

      eLevel.down();
      grp_disp(ZLBS,eSelect.wer_zlbs,0,1);

      exec('blk_unlock','#table','ZLBR',ZLBR.ref())
   ?}
?};
~~


\win_prac_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania Listy pracowników z tabeli P do składu brygady
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_wer:=P.mk_sel('Pracownicy'@,'P',,,,,15,,'P');

:: Pola w okienku
P.win_fld(_wer,OSOBA,'NAZWISKO',,,15,,,'Nazwisko'@);
P.win_fld(_wer,OSOBA,'PIERWSZE',,,15,,,'Imię'@);
P.win_fld(_wer,OSOBA,'DRUGIE',,,12,,,'Drugie imię'@);
P.win_fld(_wer,,'WYDZIAL','SYMBOL',, 8,,,'Wydział'@);

:: Akcje okienka
P.win_act(_wer,,'Formuła','Wybierz'@@,,,"exec('wybierz_pb','ekioski')",,1);
P.win_act(_wer,,'Rekord',,,,"P.OSOBA();~~");
P.win_edit();
P.win_sel(_wer);
_wer


\wybierz_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wybór pracownika do składu brygady
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
:: Ze względu na uciążliwość obsługi komunikat wyłączony
::_kod_bryg:=exec('zlbs_jest_prac','ekioski',P.ref());
::{? _kod_bryg=''
::|| _wyn:=1
::|| {? FUN.ask('Wybrany pracownik już należy do aktywnej brygady %1.\nKontynuować?'@[_kod_bryg])
::   || _wyn:=1
::   || _wyn:=0
::   ?}
::?};
{? _wyn || exec('rec_ten','ekioski') || ~~ ?}


\zlbs_jest_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Czy pracownik juz jest przypisany do dowolnej aktywnej brygady
::   WE: _a - P.ref()
::   WY: kod brygady lub ''
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;

_wyn:='';
_dt:=date();
ZLBR.cntx_psh();
ZLBS.cntx_psh();
ZLBS.index('PODB');
ZLBS.prefix(_a);
{? ZLBS.first()
|| {! |?
      {? ZLBS.OD<=_dt & (ZLBS.DO=date(0,0,0) | ZLBS.DO>=_dt)
      || ZLBS.BR();
         {? ZLBR.OD<=_dt & (ZLBR.DO=date(0,0,0) | ZLBR.DO>=_dt)
         || _wyn:=ZLBR.KOD
         ?}
      ?};
      _wyn='' & ZLBS.next()
   !}
?};

ZLBS.cntx_pop();
ZLBR.cntx_pop();
_wyn


\rec_ten
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Obsługa przycisku WYBIERZ w panelu
::----------------------------------------------------------------------------------------------------------------------
eSelect.key_Esc:=0;
eSelect.wyn_OK:=1;
sel_exit();
~~


\zlbs_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Dodaje sklad brygady
::   WE: _a - ZLBR.ref
::       _b - P.ref
::       _c - data od kiedy w brygadzie
::       _d - data do kiedy w brygadzie
::   WY: ZLBS.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
ZLBS.cntx_psh();
ZLBS.prefix();
ZLBS.blank();
ZLBS.BR:=_a;
ZLBS.P:=_b;
ZLBS.OD:=_c;
ZLBS.DO:=_d;
{? ZLBS.add(1)
|| _wyn:=ZLBS.ref()
?};
ZLBS.cntx_pop();
_wyn


\zlbs_kal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk "Dołącz wg kalendarzy" pracowników brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| {? ZLBR.AKT='N'
   || FUN.info('Brygada nieaktywna.\nFunkcja niedostępna.'@)

   |? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
   || _txt:='Dołączanie składu brygady wg kalendarzy.\n\nWybierz datę:'@;
      {? ZLBR.OD=date(0,0,0)
      || _choice:=FUN.choice(_txt,,'Bieżąca: %1'@[$date()])
      || _choice:=FUN.choice(_txt,,'Bieżąca: %1'@[$date()],'Początek pracy brygady: %1'@[$ZLBR.OD])
      ?};
      {? _choice=1
      || _datap:=date()
      |? _choice=2
      || _datap:=ZLBR.OD
      || _datap:=date(0,0,0)
      ?};

      {? _datap<>date(0,0,0)
      ||
         _datap_obj:=obj_new(1);
         _datap_obj[1]:=_datap;

         P.cntx_psh();
         P.clear();
         UD_FIR.cntx_psh();
         UD_FIR.index('UD_SKL');
         UD_FIR.prefix(REF.FIRMA);
         {? UD_FIR.first()
         || _ud_skl:=UD_FIR.UD_SKL
         || _ud_skl:=null()
         ?};
         UD_FIR.cntx_pop();
         _ud_def:=exec('szukaj_ud_def','schemat',
            exec('domyslny','schemat','PODZORG'),
            _ud_skl
         ).REF;
         exec('filtruj_p','schemat','TTE',_ud_def,'','T','T');
         {? P.f_first()
         || {!
            |? {? P.KAL<>null() & ~-P.CP().CP*'FIZ'
               || _obecny:=~exec('czy_jest','nieobecnosc',P.ref(),_datap);
                  __KAL.set_cal(P.KAL,_datap~1);
                  _kal_def:=__KAL.get_day(_datap);
                  {? exec('FindAndGet','#table',KAL_DEF,_kal_def,,"TYP='R'",0) &
                     _obecny=1
                  ||
::                   Warunek sprawdzający czy data początkowa jest zgodna z data wejścia pracownika
                     {? exec('FindAndGet','#table',KAL_DEF,_kal_def,,"KAL_DEF.DATA=_b[1]",0,_datap_obj)
                     || _kod_bryg:=exec('zlbs_jest_prac','ekioski',P.ref());
                        {? _kod_bryg=''
                        || exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO)
                        || ~~
::                         pracownik już jest w aktywnej dowolnej brygadzie, pomijamy bez komunikatu
                        ?}
                     ?}
                  ?}
               ?};
               P.f_next()
            !}
         ?};
         P.cntx_pop();

         grp_disp(ZLBS,eSelect.wer_zlbs,0,1)
      ?};

      exec('blk_unlock','#table','ZLBR',ZLBR.ref())
   ?}
?};
~~


\zlbs_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Usun pracownika z brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBS.get()
|| {? ZLBR.AKT='N'
   || FUN.info('Brygada nieaktywna.\nFunkcja niedostępna.'@)

   |? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
   ||
      {? FUN.ask(
            'Czy usunąć pracownika %1 %2 z brygady \'%3\'?'@
            [ZLBS.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE,ZLBS.BR().KOD]
         )
      ||
         ZLBS.del();
         _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
         {? _ile_w_zlbs=0
         || {? ZLBR.ref()=VEK.A_ZLBR
            || VEK.A_ZLBR:=null()
            ?}
         ?};
         grp_disp(ZLBS,eSelect.wer_zlbs,0,1)
      ?};

      exec('blk_unlock','#table','ZLBR',ZLBR.ref())
   ?}
?};
~~


\zlbs_kar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk dodaj za pomocą karty pracownika brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| {? ZLBR.AKT='N'
   || FUN.info('Brygada nieaktywna.\nFunkcja niedostępna.'@)

   |? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
   ||
      _prac_list:=sql('select SYSLOG.REFERENCE as REF from SYSLOG where 1=2 order by 1');
      eSelect.il_obs:=0;
      {!
      |? _prac_ref:=exec('okno_czyt_karte','ekioski');
         _petla:=0;
         {? _prac_ref<>null()
         || {? _prac_list.find_key($_prac_ref)
            || FUN.info('Pracownik już został raz odczytany kartą.'@)
            || eSelect.il_obs+=1;
               _prac_list.REF:=$_prac_ref;
               _prac_list.add()
            ?};
            _petla:=1
         || _petla:=0
         ?};
         _petla
      !};

      {? _prac_list.first()
      || {!
         |? P.cntx_psh();
            P.clear();
            {? P.seek(_prac_list.REF)
            ||
::          Ze względu na uciążliwość obsługi komunikaty wyłączone
::            _kod_bryg:=exec('zlbs_jest_prac','ekioski',P.ref());
::            {? _kod_bryg=''
::            ||
::               exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO);
::               ZLBS.first()
::            ||
::               {? FUN.ask(
::                     'Pracownik %1 %2 już należy do aktywnej brygady %3.\nKontynuować?'@
::                     [P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,_kod_bryg]
::                  )
::               || exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO);
::                  ZLBS.first()
::               ?}
::            ?}
               exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO);
               ZLBS.first()
            ?};
            P.cntx_pop();
            _prac_list.next()
         !}
      ?};
      eSelect.il_obs:=0;
      grp_disp(ZLBS,eSelect.wer_zlbs,0,1);

      exec('blk_unlock','#table','ZLBR',ZLBR.ref())
   ?}
?};
~~


\okno_czyt_karte
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Okno czytania karty
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();
eSelect.cmb_wyd:=VEK.A_WYD;
eSelect.cmb_twrkplc:=VEK.TWRKPLC;
eSelect.cmb_oper:=null();
eSelect.czyt_pracownik:=null();

_ctr_id:=exec('create','#desktop',
   SYSLOG,'ctr_czyt_karte',,{? VEK.DPI=96 || 19 || 16 ?},{? VEK.DPI=96 || 73 || 60 ?},
   'Odczyt karty pracownika'@,,'normal',,22,6
);
SYSLOG.win_ctr(_ctr_id);

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'Zbliż kartę identyfikacyjną do czytnika'@; 'Zamknij'@;
_before:="
   exec('load','#desktop','ctr_czyt_karte','ekiosk_czyt_karte.dsk',,,,,,0);

:: Pole z identyfikatorem pracownika - id_karty
   exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte','');
:: Pole z komunikatem
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte','');
:: Pole z licznikiem
   exec('set_value','#desktop','','ctr_czyt_karte','fld_il_obs@czyt_karte',$(eSelect.il_obs+1));

   exec('set_value','#desktop','','ctr_czyt_karte','label@czyt_karte','Zbliż kartę identyfikacyjną do czytnika'@);
   exec('set_value','#desktop','','ctr_czyt_karte','btn_close@czyt_karte','Zamknij'@);
   1
";
_win_id:='id_okno_czyt_karte';
_ret:=SYSLOG.control(_win_id,'modal=false,pack=false',_before);
{? _ret=~~
||
:: Zrezygnowano z przydzielania pracownikow - klawisz Esc lub Zamknij
   _wyn:=null()
|? _ret='ADD_PRAC'
||
:: Przydzielono pracownika - odczytano numer
   _wyn:=eSelect.czyt_pracownik
?};
_wyn


\czyt_karte
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja/Zdarzenie po odczytaniu numeru karty
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_id_karty:=exec('get_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte');
_wyn:=exec('find_prac_ip','ekioski',_id_karty);
{? _wyn=1
||
   _prac_dane:='';
   P.cntx_psh();
   P.clear();
   {? P.seek(eSelect.czyt_pracownik)
   || _prac_dane:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+OSOBA.DRUGIE
   ?};
   P.cntx_pop();

   exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte',_id_karty);
   _kom:=_prac_dane;
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte',_kom);
   delay(1);
   ctr_ret('ADD_PRAC');
   sel_exit()
|? _wyn=2
|| exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte','');
   _kom:='Pracownik jest nieaktywny'@;
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte',_kom)

|? _wyn=7
|| exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte','');
   _kom:='Nie wybrano pracownika'@;
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte',_kom)

|? _wyn=8
|| exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte','');
   _kom:='Brak aktualnego zatrudnienia'@;
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte',_kom)

|| exec('set_value','#desktop','','ctr_czyt_karte','fld_id_karty@czyt_karte','');
   _kom:='Nie znaleziono pracownika'@;
   exec('set_value','#desktop','','ctr_czyt_karte','fld_kom@czyt_karte',_kom)

?};
exec('refresh_all','#desktop','','ctr_czyt_karte');
~~


\find_prac_ip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Znajduje pracownika po identyfikatorze karty
::   WE: _a - identyfikator użytkownika (kod kreskowy)
::   WY: 0 - brak użytkownika
::       1 - autoryzacja udana - TYLKO TEN WYNIK AUTORYZUJE UŻYTKOWNIKA TERMINALA
::       2 - użytkownik istnieje ale nie jest aktywny
::       3 - nie znaleziono prawidłowo wydziału ze słownika wydziałów
::----------------------------------------------------------------------------------------------------------------------
_ip:=_a;
_wyn:=0;

USERS.cntx_psh();
USERS.prefix();
USERS.blank(1);
USERS.IP:=_ip;
{? _ip<>'' & USERS.find_rec()
||
   {? USERS.AKT='T' & USERS.EKIOSK='T'
   ||
::    Lista pracowników danej osoby wg kryterów zatrudnienia na bieżący dzień
      _from:='join F_ZATR';
      _where:='
         P.OSOBA=:_a
         and F_ZATR.DOCELOWA=\'T\'
         and P.FIRMA=:_b
         and (P.ZA=\'T\' or P.DZ=to_date(:_c))
      ';
      P.f_set('OSOBA,DZA^,DZ^',_from,_where,USERS.OSOBA,REF.FIRMA,date()-1);
      P.win_sel(exec('win_prac_f3','ekioski'));
      {? P.f_size()>0
      || {? (P.f_size()=1 & P.f_first()
            | (eLevel.up(P,P.win_sel('?'),'PRAC_F3');_sel:=P.select();eLevel.down(); _sel & eSelect.wyn_OK=1))
         || {? P.FIRMA=REF.FIRMA
            || eSelect.czyt_pracownik:=P.ref();
               _wyn:=1
            ?}
         || _wyn:=7
         ?}
      || _wyn:=8
      ?}
   || _wyn:=2
   ?}
?};
USERS.cntx_pop();
_wyn


\dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Dokumentacja
::----------------------------------------------------------------------------------------------------------------------
PL_OPER.cntx_psh();
PX_POZ.cntx_psh();
_continue:=1;

{? PROD_REJ.f_size()=0
|| FUN.info('Brak danych. Funkcja nieaktywna.'@);
   _continue:=0
|? PROD_REJ.ZL=null() & PROD_REJ.GROP=null()
|| FUN.info('Pozycja nie jest związana ze zleceniem albo grupą operacji.\nFunkcja nieaktywna.'@);
   _continue:=0
|? PROD_REJ.SRODZ='PL' & PROD_REJ.PL_OPER().ZGP=null()
|| FUN.info('Pozycja planu nie jest związana ze źródłową pozycją przewodnika.\nFunkcja nieaktywna.'@);
   _continue:=0
|? PROD_REJ.SRODZ='PX' & PROD_REJ.PX_POZ().PL_OPER().ZGP=null()
|| FUN.info('Pozycja planu nie jest związana ze źródłową pozycją przewodnika.\nFunkcja nieaktywna.'@);
   _continue:=0
?};

{? _continue=0
|| PL_OPER.cntx_pop();
   PX_POZ.cntx_pop();
   return()
?};

TOPER.cntx_psh();
GROP.cntx_psh();
PLIKIDOC.cntx_psh();

:: zainicjowanie środowiska obsługi plików załączonych do zlecenia
_env_blob:=exec('env_blob','#edit');
_env_blob.TAB:=PLIKIDOC; PLIKIDOC.index('TRS'); PLIKIDOC.prefix('*');
_env_blob.FIELD:='DOC';
_env_blob.EDITABLE:=0;
_env_blob.mk_ctr();
params_set('env_blob',_env_blob);

eLevel.up(SYSLOG,_env_blob.WIN_MAIN,'DOKUMENTACJA');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   _env_blob:=params_get().env_blob;
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: nawigacja
   exec('set_visible','#desktop','','ctr_menu_nav','btn_home@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_up@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_10up@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_10down@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_down@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_end@menu_nav',0);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

   TOPER.prefix(); GROP.prefix();
   _zgp:=
      {? PROD_REJ.SRODZ='ZL' & PROD_REJ.ZGP<>null() || PROD_REJ.ZGP
      |? PROD_REJ.SRODZ='PL'                        || PROD_REJ.PL_OPER().ZGP
      |? PROD_REJ.SRODZ='PX'                        || PROD_REJ.PX_POZ().PL_OPER().ZGP
                                                    || null()
      ?};
   _grop:=
      {? PROD_REJ.SRODZ='ZL' & PROD_REJ.GROP<>null() || PROD_REJ.GROP
                                                     || null()
      ?};
   {? ZGP.seek(_zgp)
   || {? ZGP.DOC_REJ='P'
      || _tab:='ZGP*';
         _ref:=#ZGP.ref();
         _msk:=ref_name(ZGP.ref())
      |? ZGP.DOC_REJ='T'
      || ZL.cntx_psh();
         _tktl:=exec('FindAndGet','#table',TKTL,ZGP.ZL(); {? ZL.RTKTL<>'' || ZL.RTKTL || ZL.RKTL ?},\"ref()\",null());
         ZL.cntx_pop();
         _tab:='TKTL*';
         _ref:=#_tktl;
         _msk:=ref_name(_tktl)
      |? ZGP.DOC_REJ='Z'
      || _tab:='ZL*';
         _ref:=#ZGP.ZL;
         _msk:=ref_name(ZGP.ZL)
      || _tab:='*'
      ?};
      PLIKIDOC.index('TRS');
      PLIKIDOC.prefix(_tab,_msk,_ref);
      _env_blob.update()
   |? GROP.seek(_grop)
   || _tab:='GROP*';
      _ref:=#GROP.ref();
      _msk:=ref_name(GROP.ref());
      PLIKIDOC.index('TRS');
      PLIKIDOC.prefix(_tab,_msk,_ref);
      _env_blob.update()
   ?};
   ~~
";

_win:=SYSLOG.grp_make('Dokumentacja'@,_before,'ksakdjak',,,,);

exec('create','#desktop',SYSLOG,'ctr_user_info',_win,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
SYSLOG.grp_splt(_win,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
SYSLOG.grp_ctr(_win,SYSLOG,_env_blob.WIN_MAIN,,,,,,10,{? VEK.DPI=96 || 25 || 21 ?});
SYSLOG.grp_splt(_win,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',SYSLOG,'ctr_menu_nav',_win,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

SYSLOG.win_sel(_win);
SYSLOG.select();

PL_OPER.cntx_pop();
PX_POZ.cntx_pop();
TOPER.cntx_pop();
GROP.cntx_pop();
PLIKIDOC.cntx_pop();

eLevel.down();
~~


\material
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Materiały - w kontekscie rekordu PROD_REJ
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');
_grop:=PROD_REJ.GROP;

{? ~_zgp & ~_grop
|| FUN.info('Pozycja nie jest powiazana z pozycją przewodnika ani grupą operacji.'@);
   return(0)
?};

exec('set_var_a','ekioski',_zgp);

USERS.cntx_psh();

{? var_pres('tab_mat',eSelect)>100 || obj_del(eSelect.tab_mat) ?};
{? var_pres('tab_nmat',eSelect)>100 || obj_del(eSelect.tab_nmat) ?};
VAR_DEL.delete('xTabMat');

ZGP.cntx_psh();
ZGP.prefix();
ZGP.seek(_zgp);

_a_zlec:=VAR.A_ZLEC; _a_grop:=VAR.A_GROP;
VAR.A_ZLEC:=ZGP.NRZLP().ZLEC; VAR.A_GROP:=_grop;
{? _zgp
|| xTabMat:=exec('kart_lim','zl_limit',9,ZGP.NRZLP().ZLEC,'T',,ZGP.ref());
   _tab_nlim:=exec('kart_lim','zl_limit',9,ZGP.NRZLP().ZLEC,'N',,ZGP.ref())
|| xTabMat:=exec('kart_lim','zl_limit',9,null(),'T',null(),null(),,,,_grop);
   _tab_nlim:=exec('kart_lim','zl_limit',9,null(),'N',null(),null(),,,,_grop)
?};
VAR.A_ZLEC:=_a_zlec; VAR.A_GROP:=_a_grop;
_czy_lim:=
   exec('chk_role','#b__box',OPERATOR.USER,'LMG_ZAM_IPRZ')>0
   & (exec('zgp_chk4lim','zl_limit',_zgp) | exec('grop_chk4lim','zl_limit',_grop));

eSelect.tab_mat:=xTabMat;
eSelect.tab_nmat:=_tab_nlim;
eSelect.tab_mat.first();
eSelect.tab_nmat.first();
eSelect.wer_mat:=exec('win_zapotrzebowania','ekioski');
eSelect.wer_nmat:=exec('win_zapotrzebowania','ekioski',1);

ZGP.cntx_pop();

eLevel.up(eSelect.tab_mat,eSelect.wer_mat,'MATERIAL');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   _zgp:=exec('get_zgp','prod_rej');
   _grop:=PROD_REJ.GROP;
   _czy_lim:=
      exec('chk_role','#b__box',OPERATOR.USER,'LMG_ZAM_IPRZ')>0
      & (exec('zgp_chk4lim','zl_limit',_zgp) | exec('grop_chk4lim','zl_limit',_grop));
   {? _czy_lim>0
   || exec('load','#desktop','ctr_menu_mat','ekiosk_menu_mat.dsk',,,,,,0)
   ?};
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
   grp_disp(eSelect.tab_mat,eSelect.wer_mat,0,1);
   grp_disp(eSelect.tab_nmat,eSelect.wer_nmat,0,1);
   ~~
";

_grp:=USERS.grp_make('MATERIAŁY'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
_before:="eLevel.change(eSelect.tab_mat,eSelect.wer_mat);~~";
_high_l:={? _czy_lim>0 || {? VEK.DPI=96 || 9 || 7 ?} || {? VEK.DPI=96 || 11 || 9 ?} ?};
_high_n:={? _czy_lim>0 || {? VEK.DPI=96 || 8 || 7 ?} || {? VEK.DPI=96 || 10 || 8 ?} ?};
USERS.grp_sel(_grp,eSelect.tab_mat,eSelect.wer_mat,,,,,_high_l,_before,,,,'maximized_with_title',,1);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
{? _czy_lim>0
|| exec('create','#desktop',USERS,'ctr_menu_mat',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
   USERS.grp_splt(_grp,,'horizontal','pozioma_2a',0)
?};
_before:="eLevel.change(eSelect.tab_nmat,eSelect.wer_nmat);~~";
USERS.grp_sel(_grp,eSelect.tab_nmat,eSelect.wer_nmat,,,,,_high_n,_before,,,,'maximized_with_title',,1);
USERS.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

USERS.win_sel(_grp);
USERS.select();
USERS.cntx_pop();

eLevel.down();

VAR_DEL.delete('xTabMat');
~~


\win_zapotrzebowania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania dla tabeli eSelect.tab_mat/eSelect.tab_nmat
::   WE: [_a] - rodzaj okna: [0] - limity, 1 - nielimity
::   WY: akronim okna
::----------------------------------------------------------------------------------------------------------------------
_what:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_tab:={? _what=0 || eSelect.tab_mat || eSelect.tab_nmat ?};

_wer:=_tab.mk_sel({? _what=0 || 'Limity'@ || 'Surowce nielimitowane'@ ?},'P',0,'#_zlimit_wer_t',1,,20,1);
_tab.win_fld(_wer,,'KTM'     ,,,18, ,,'Kod/Symbol'@);
_tab.win_fld(_wer,,'N'       ,,,22, ,,'Nazwa/Opis'@);
_tab.win_fld(_wer,,'J'       ,,, 2, ,,'jm'@);
_tab.win_fld(_wer,,'LIL'     ,,, 9,ST.DOKL,,'Wprowadzony'@);
_tab.win_fld(_wer,,'ALIL'    ,,, 9,ST.DOKL,,'Zatwierdzony'@);
_tab.win_fld(_wer,,'ZLIM_POB',,, 9,ST.DOKL,,'Pobrano'@);
_tab.win_fld(_wer,,'ZK_P_ZRE',,, 9,ST.DOKL,,'Zrealizowano'@);
_tab.win_fld(_wer,,'SO'      ,,, 2, ,,'SO'@);
_tab.win_fld(_wer,,'AKC'     ,,, 2, ,,'A'@);
_tab.win_act(_wer,0,'Kolejność');

_wer


\narzedzia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Narzędzia - w kontekscie rekordu ZGP
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? PROD_REJ.SRODZ='PX' || FUN.info('Funkcja niedostępna dla pozycji z planu strategicznego.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');

{? ~_zgp
|| FUN.info('Pozycja planu nie jest powiązana z pozycją przewodnika.'@);
   return()
?};

exec('set_var_a','ekioski',_zgp);

VAR.A_KTL:=PROD_REJ.ZL().TKTL;

USERS.cntx_psh();

TACTTLS.prefix();
::TACTTLS.index('KNROPR');
::{? PROD_REJ.ZL().TKTL().TYP().UTIL='K'
::|| TACTTLS.prefix(VAR.A_KTL,0);
::   _title:='Lista N-P-U do karty'@
::|| TACTTLS.prefix(VAR.A_KTL,VAR.A_OP);
::   _title:='Lista N-P-U do operacji'@
::?};
::TACTTLS.first();

:: Ustawiany filtr programowy na listę N-P-U
_title:='Lista N-P-U do operacji'@;
exec('tactlls_filtr','tech_tool',VAR.A_KTL,VAR.A_OP,1);
TACTTLS.f_first();
eSelect.wer_npu:=exec('win_npu','ekioski',_title);

eLevel.up(eSelect.tab_mat,eSelect.wer_npu,'NARZEDZIA',"exec('npu_display','ekioski')");

_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);
   exec('set_enabled','#desktop','','ctr_menu_nav','btn_info@menu_nav',TACTTLS.size()>0);
   grp_disp(TACTTLS,eSelect.wer_npu,0,1);
   ~~
";

_grp:=USERS.grp_make('NARZĘDZIA'@,_before,'',,,,);
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
_before:="eLevel.change(TACTTLS,eSelect.wer_npu);~~";
USERS.grp_sel(_grp,TACTTLS,eSelect.wer_npu,,,,,{? VEK.DPI=96 || 24 || 20 ?},_before,,,,'maximized_with_title',,1);
USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);
USERS.select();
USERS.cntx_pop();

TACTTLS.f_clear(1);
eLevel.down();
~~


\win_npu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania TACTTLS (NPU)
::   WE: _a - tytuł okna
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_title:=_a;

_wer:=TACTTLS.mk_sel(_title,'P',,,,,10,,'P');
TACTTLS.win_fld(_wer,,'M','KTM',,15,,,'Symbol'@);
TACTTLS.win_fld(_wer,,'M','N',,40,,,'Nazwa'@);
TACTTLS.win_fld(_wer,,'ILE',,,5,,,'Ilość'@);
TACTTLS.win_act(_wer,0,'Kolejność');
TACTTLS.win_act(_wer,,'Wyświetl',,,,"exec('npu_display','ekioski')");
TACTTLS.win_sel(_wer);
_wer


\problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Problem
::   WE: [_a] - PROD_REJ.ref()
::       [_b] - 1 przycisk problem z poziomu ComboBox, lub 0 z poziomu PROD_REJ [domyslnie 0]
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>7 || _a:=null() ?} || _a:=null() ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0  ?} || _b:=0 ?};

VEK.PROD_REJ:=_a;
{? VEK.PROD_REJ<>null()
|| VEK.PROD_REJ()
?};

_ok:=0;
_wyn:=0;

{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return(0) ?};

{? exec('blk_lock','#table','PROD_REJ',PROD_REJ.ref(),,,'Zapis jest redagowany'@)
||
   _upr:=exec('upr_xproblem','zl_wkj');

   {? _upr
   || _ok:={? PROD_REJ.PROBLEM='T'
           || 0
           || 1
           ?}
   || _ok:=1
   ?};

   {? _ok=1
   || {? PROD_REJ.PROBLEM<>'T'
      ||
         _ek_slop:=exec('okno_problem','ekioski');
         {? _ek_slop<>null()
         || {? exec('simple_problem','zl_wkj')
            || _wyn:=exec('problem_add','prod_rej',_ek_slop)
            || _choice:=FUN.choice(
                  'Zgłoszenie problemu:\n%1\n%2\n%3'@
                  [exec('FindAndGet','#table',EK_SLOP,_ek_slop,,"EK_SLOP.KOD",''),
                   exec('FindAndGet','#table',EK_SLOP,_ek_slop,,"EK_SLOP.NAZ",''),
                   exec('FindAndGet','#table',EK_SLOP,_ek_slop,,"EK_SLOP.KLASA",'')
                  ],1,'Tak'@,'Tak, z opisem'@
               );
               {? _choice=1
               || _wyn:=exec('problem_add','prod_rej',_ek_slop)
               |? _choice=2
               || _desc:=exec('problem_desc','ekioski','Z');
                  {? type_of(_desc)=type_of('')
                  || _wyn:=exec('problem_add','prod_rej',_ek_slop,_desc)
                  ?}
               ?}
            ?};

::          Dwa przyciski problem w dwoch miejscach
::          Z poziomu PROD_REJ dla zwyklego pracownika na wydziale nie wielomaszynowym robimy wyloguj
            {? _b=1
            || 'nic nie robimy, przycisk problem z comboboxa pracownika'
            ||
               PROD_REJ.f_rfresh();
               {? exec('upr_kierownik','ekioski')=0 & exec('get_user_param','ekioski',8780,type_of(''))='T'
               || eSelect.key_Logout:=1;
                  sel_exit()
               ?}
            ?}
         ?}
      || FUN.info('Brak uprawnień do rozwiązywania problemów.'@)
      ?}
   ||
      {? _upr
      || _ref:={? PROD_REJ.SRODZ='ZL'
               || {? PROD_REJ.GROP<>null()
                  || PROD_REJ.GROP
                  || exec('get_zgp','prod_rej')
                  ?}
               |? PROD_REJ.SRODZ='PL'
               || PROD_REJ.PL_OPER
               |? PROD_REJ.SRODZ='PX'
               || PROD_REJ.PX_POZ
               ?};
         exec('prob_sel','prod_rej',PROD_REJ.SRODZ,_ref);
         grp_disp(PROD_REJ,eSelect.wer_rej,1,1)
      || FUN.info('Operacja ma już zgłoszony problem.'@)
      ?}
   ?};
   {? _b=0
   || grp_disp(PROD_REJ,eSelect.wer_rej,1,1)
   ?};

   exec('blk_unlock','#table','PROD_REJ',PROD_REJ.ref())

?};
_wyn


\problem1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: przycisk konca w ktorym VEK jest juz wypelnione
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('problem','ekioski',VEK.PROD_REJ,1)
|| sel_exit()
?}


\okno_problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Okienko z wyborem problemu
::   WY: EK_SLOP.ref() lub null()
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();

EK_SLOP.cntx_psh();

eSelect.wer_slo:=exec('win_problemy_slo','prod_rej');
eLevel.up(EK_SLOP,eSelect.wer_slo,'PROBLEM');

EK_SLOP.index('KOD');
EK_SLOP.prefix();

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@; 'Wybierz'@;
_before:="
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

   exec('load','#desktop','ctr_menu_ten','ekiosk_menu_ten.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_ten','btn_chooce@menu_ten','Wybierz'@);
   exec('set_enabled','#desktop','','ctr_menu_ten','btn_chooce@menu_ten',EK_SLOP.size()>0);
   ~~
";
_grp:=EK_SLOP.grp_make('Problemy'@,_before,'',0,0,,);
EK_SLOP.grp_sel(_grp,,eSelect.wer_slo,,,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
EK_SLOP.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',EK_SLOP,'ctr_menu_ten',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
EK_SLOP.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',EK_SLOP,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
EK_SLOP.win_sel(_grp);

{? EK_SLOP.select(,1,10) & eSelect.key_Esc=0
|| _wyn:=EK_SLOP.ref()
?};

EK_SLOP.cntx_pop();

eLevel.down();
_wyn


\win_problemy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania EK_PROB
::   WE: [_a] - sposób wywołania: 0 - dla konkretnego rekordu, 1 - dla wszystkich rekordów
::   WY: STRING - uchwyt do okna
::----------------------------------------------------------------------------------------------------------------------
_all:=_a;

_wer:=exec('win_problemy','prod_rej',_all);

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
eSelect.wer_prob:=_wer;
_before:=$("
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',"+$_all+");
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuProb_table','ekioski');
   exec('load','#desktop','ctr_menu_prob','ekiosk_menu_prob.dsk',,,,,_tab,1);
   exec('set_visible','#desktop','','ctr_menu_prob','btn_renovation@menu_prob',
      exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL')
   );
   exec('set_value','#desktop','','ctr_menu_prob','fld_description@menu_prob',exec('prob_opis','ekioski'));
   exec('set_visible','#desktop','','ctr_menu_prob','fld_description@menu_prob',"+$_all+");
:: poniższe zawsze wyłączone, bo jest przycisk z filtrem
   exec('set_visible','#desktop','','ctr_menu_prob','btn_resolved@menu_prob',0);
   exec('set_visible','#desktop','','ctr_menu_prob','btn_reported@menu_prob',0);
   exec('set_visible','#desktop','','ctr_menu_prob','btn_all@menu_prob',0);

   grp_disp(EK_PROB,eSelect.wer_prob,0,1);
   ~~
");
_grp:=EK_PROB.grp_make('Problemy'@,_before,'id_win_prob',,,,,,'jterm');
exec('create','#desktop',EK_PROB,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
EK_PROB.grp_splt(_grp,,'horizontal','pozioma_1',0);
EK_PROB.grp_sel(_grp,,eSelect.wer_prob,,,,,{? VEK.DPI=96 || 21 || 18 ?},,,,,'maximized',,1);
EK_PROB.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',EK_PROB,'ctr_menu_prob',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
EK_PROB.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
exec('create','#desktop',EK_PROB,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
EK_PROB.win_sel(_grp);

_grp


\fields_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły na wartość początkową dla pól zmiennej VEK
::   WY: ANY
::  TAG: <MBUILDER><BL><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_fld:=cur_afld();
{? _fld='TERM'
|| _result:='N'
?};
_result


\fields_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły przed wyświetleniem dla pól zmiennej VEK
::   WY: ANY
::  TAG: <MBUILDER><BD><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_fld:=cur_afld();
{? _fld='OPER'
|| _result:=exec('oper_bd','ekioski')
?};
_result


\fields_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły przed redkacją dla pól zmiennej VEK
::   WY: REAL
::  TAG: <MBUILDER><BE><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
1


\fields_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły po redakcji dla pól zmiennej VEK
::   WY: REAL
::  TAG: <MBUILDER><AE><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
1


\fields_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły obsługi na F3 dla pól zmiennej VEK
::   WY: ANY
::  TAG: <MBUILDER><F3><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_fld:=cur_afld();
{? _fld='IP'
|| _result:=exec('termIpF3','ekioski')
?};
_result


\fields_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły na format wyświetlania dla pól zmiennej VEK
::   WY: STRING
::  TAG: <MBUILDER><FD><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? cur_afld()='IL'
|| _result:='out_prec='+{? (2+cur_kwin())='e_'
                        || {? PROD_REJ.M=null()  || $ST.DOKL_P || $PROD_REJ.M().DOKL ?}
                        || $ST.DOKL_P
                        ?}
?};
_result


\fields_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Formuły na format redagowania dla pól zmiennej VEK
::   WY: STRING
::  TAG: <MBUILDER><FE><TAB:VEK>
::----------------------------------------------------------------------------------------------------------------------
''


\oper_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przed wyświetleniem dla zmiennej VEK.OPER
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
ZGH.cntx_psh();
PL_OPER.cntx_psh();
PL_OGR.cntx_psh();
PX_POZ.cntx_psh();
PX_STAGE.cntx_psh();
PX_OBJ.cntx_psh();
VEK.OPER:='';
{? cur_tab(1,1)=EK_PROB
|| {? EK_PROB.ZGP<>null()
   || EK_PROB.ZGP();
      VEK.OPER:=exec('oper_zgp','ekioski');
      {? VEK.OPER<>''
      || VEK.OPER+=' [ZL]'
      ?}
   |? EK_PROB.GROP<>null()
   || EK_PROB.GROP();
      VEK.OPER:=exec('oper_grop','ekioski');
      {? VEK.OPER<>''
      || VEK.OPER+=' [ZL]'
      ?}
   |? EK_PROB.PL_OPER<>null
   || EK_PROB.PL_OPER();
      VEK.OPER:=exec('oper_ploper','ekioski');
      {? VEK.OPER<>''
      || VEK.OPER+=' [PL]'
      ?}
   |? EK_PROB.PX_POZ
   || EK_PROB.PX_POZ();
      VEK.OPER:=exec('oper_pxpoz','ekioski');
      {? VEK.OPER<>''
      || VEK.OPER+=' [PX]'
      ?}
   ?}
||
   {? PROD_REJ.SRODZ='ZL'
   || {? PROD_REJ.GROP<>null()
      || PROD_REJ.GROP();
         VEK.OPER:=exec('oper_grop','ekioski')
      || PROD_REJ.ZGP();
         VEK.OPER:=exec('oper_zgp','ekioski')
      ?}
   |? PROD_REJ.SRODZ='PL'
   || {? PROD_REJ.PL_OPER<>null()
      || PROD_REJ.PL_OPER();
         VEK.OPER:=exec('oper_ploper','ekioski')
      |? PROD_REJ.PL_OGR<>null()
      || PROD_REJ.PL_OGR();
         VEK.OPER:=exec('oper_plogr','ekioski')
      ?}
   |? PROD_REJ.SRODZ='PX'
   || {? PROD_REJ.PX_POZ<>null()
      || PROD_REJ.PX_POZ();
         VEK.OPER:=exec('oper_pxpoz','ekioski')
      ?}
   ?};
   {? VEK.OPER<>''
   || VEK.OPER+=' ['+PROD_REJ.SRODZ+']'
   ?}
?};
ZGP.cntx_pop();
ZGH.cntx_pop();
PL_OPER.cntx_pop();
PL_OGR.cntx_pop();
PX_POZ.cntx_pop();
PX_STAGE.cntx_pop();
PX_OBJ.cntx_pop();
''


\oper_ploper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Zamienia PL_OPERa na string wyświetlany w kolumnie 'Operacja' na ekiosku
::   WY: STRING - opis
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
ZGP.cntx_psh();
TOPER.cntx_psh();
TTOPER.cntx_psh();
{? PL_OPER.ZGP<>null()
|| PL_OPER.ZGP();
   _result:=exec('oper_zgp','ekioski')
|? PL_OPER.TOPER<>null()
|| _result:=PL_OPER.TOPER().OPER().NA
|| _result:=PL_OPER.OPIS
?};
ZGP.cntx_pop();
TOPER.cntx_pop();
TTOPER.cntx_pop();
_result


\oper_plogr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Zamienia PL_OGRa na string wyświetlany w kolumnie 'Operacja' na ekiosku
::   WY: STRING - opis
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
TTOPER.cntx_psh();
GROP.cntx_psh();
{? PL_OGR.GROP<>null()
|| PL_OGR.GROP();
   {? GROP.TTOPER<>null()
   || _result:=GROP.TTOPER().NA
   || _result:=GROP.KOD+': Grupa operacji '+GROP.OPIS
   ?}
|| _result:=PL_OGR.OPIS
?};
GROP.cntx_pop();
TTOPER.cntx_pop();
_result


\oper_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Zamienia ZGPa na string wyświetlany w kolumnie 'Operacja' na ekiosku
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=ZGP.OPIS;
_result


\oper_pxpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Zamienia PX_POZa na string wyświetlany w kolumnie 'Operacja' na ekiosku
::   WY: STRING - opis
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
PL_OPER.cntx_psh();
PL_OGR.cntx_psh();
ZGP.cntx_psh();
PX_STAGE.cntx_psh();
{? PX_POZ.PL_OPER<>null()
||
:: Zapis z planu operacyjnego
   PX_POZ.PL_OPER();
   _result:=exec('oper_ploper','ekioski')
|? PROD_REJ.PX_POZ().PL_OGR<>null()
||
:: Zapis z planu operacyjnego - plan grup
   PX_POZ.PL_OGR();
   _result:=exec('oper_plogr','ekioski')
||
:: Zapis tylko z planu strategicznego
   {? PX_POZ.PX_STAGE<>null()
   ||
      ZGP.index('PX_STAGE');
      ZGP.prefix(PX_POZ.PX_STAGE);
      {? ZGP.first()
      ||
::       Etap powstał na podstawie pozycji przewodnika więc wyświetlam info z przewodnika
         _result:=exec('oper_zgp','ekioski')
      || _result:=PX_POZ.PX_STAGE().NAZWA
      ?}
   ?}
?};
PL_OPER.cntx_pop();
PL_OGR.cntx_pop();
ZGP.cntx_pop();
PX_STAGE.cntx_pop();
_result


\oper_grop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.02]
:: OPIS: Zamienia GROPa na string wyświetlany w kolumnie 'Operacja' na ekiosku
::   WY: STRING - opis
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_result:=GROP.KOD+': Grupa operacji '+GROP.OPIS;
_result


\prob_zakr_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Lista problemów zgłoszonych
::----------------------------------------------------------------------------------------------------------------------
_ref:=EK_PROB.ref();
EK_PROB.index('PROB3');
ZAKR.S:='T';
EK_PROB.prefix(ZAKR.S);
EK_PROB.seek(_ref);
{? VEK.TERM='T'
|| exec('set_value','#desktop','','ctr_menu_prob','fld_description@menu_prob',exec('prob_opis','ekioski'));
   grp_disp(EK_PROB,eSelect.wer_prob)
?};
~~


\prob_zakr_roz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Lista problemów rozwiązanych
::----------------------------------------------------------------------------------------------------------------------
_ref:=EK_PROB.ref();
EK_PROB.index('PROB3');
ZAKR.S:='R';
EK_PROB.prefix(ZAKR.S);
EK_PROB.seek(_ref);
{? VEK.TERM='T'
|| exec('set_value','#desktop','','ctr_menu_prob','fld_description@menu_prob',exec('prob_opis','ekioski'));
   grp_disp(EK_PROB,eSelect.wer_prob)
?};
~~


\prob_zakr_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Lista wszystkich problemów
::----------------------------------------------------------------------------------------------------------------------
_ref:=EK_PROB.ref();
EK_PROB.index('PROB3');
ZAKR.S:='';
EK_PROB.prefix(ZAKR.S);
EK_PROB.seek(_ref);
{? VEK.TERM='T'
|| exec('set_value','#desktop','','ctr_menu_prob','fld_description@menu_prob',exec('prob_opis','ekioski'));
   grp_disp(EK_PROB,eSelect.wer_prob)
?};
~~


\getUsrEndPlWyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wyszukuje niedokończonego PL_WYKa właściwego dla użytkownika
::----------------------------------------------------------------------------------------------------------------------
{? VEK.TERM<>'T' || return(1) ?};
_ret:=0;
{? PL_WYK.first()
|| {! |?
      {? PL_WYK.ENDD=null() & PL_WYK.ENDT=time(0,0,0) & (PL_WYK.P=VEK.P | (PL_WYK.ZLBR & PL_WYK.ZLBR=VEK.A_ZLBR))
      || _ret:=1
      ?};
      ~_ret & PL_WYK.next()
   !}
?};
_ret


\startPxWyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Start dla pozycji z planu strategicznego
::----------------------------------------------------------------------------------------------------------------------
{? ~PROD_REJ.PX_POZ
|| FUN.info('Operacja nie jest związana z planem strategicznym i zostanie przerwana.'@);
   return(0)
?};
_ok:=1;

{? PROD_REJ.PX_POZ().PL_OPER<>null() | PX_POZ.PL_OGR<>null()
|| FUN.info('Pozycja planu strategicznego z planu operacyjnego — nie można bezpośrednio rejestrować wykonań.'@);
   return(0)
?};

PX_WYK.cntx_psh();
PX_WYK.index('ZAK');
PX_WYK.prefix(PROD_REJ.PX_POZ,VEK.P,'N');
{? PX_WYK.first()
|| FUN.info('Rozpoczęta operacja nie została zakończona — nie można rejestrować nowego wykonania.'@);
   _ok:=0
?};
PX_WYK.cntx_pop();

{? _ok
|| PX_POZ.cntx_psh();
   PX_WYK.cntx_psh();
   PROD_REJ.PX_POZ();
   PX_WYK.index('POZ');
   PX_WYK.prefix(PX_POZ.ref());
   PX_WYK.blank();
   PX_WYK.DATA0:=date();
   PX_WYK.CZAS0:=time();
   PX_WYK.DATA:=date();
   PX_WYK.CZAS:=time();
   PX_WYK.PX_POZ:=PX_POZ.ref();
   PX_WYK.PX_OBJ:=PX_POZ.PX_OBJ;
   PX_WYK.PX_VER:=PX_POZ.PX_VER;
   PX_WYK.P:=VEK.P;
   {? PX_WYK.add()
   || exec('status_update','px_poz',PX_POZ.ref())
   ?};
   PX_WYK.cntx_pop();
   PX_POZ.cntx_pop();

   {? exec('upr_kierownik','ekioski')=0 & exec('get_user_param','ekioski',8780,type_of(''))='T'
   || eSelect.key_Logout:=1
   ?};
   sel_exit()
?}


\stopPxWyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Stop dla pozycji z planu strategicznego
::----------------------------------------------------------------------------------------------------------------------
{? ~PROD_REJ.get()
|| FUN.emsg('Nie można zakończyć operacji.\nOperacja została usunięta albo przeplanowana.'@);
   return(0)
?};

{? ~PROD_REJ.PX_POZ
|| FUN.info('Operacja nie jest związana z planem strategicznym i zostanie przerwana.'@);
   return(0)
?};

_result:=0;

PROD_REJ.PX_POZ();
PX_WYK.cntx_psh();
PX_WYK.index('ZAK');
PX_WYK.prefix();
{? PX_WYK.find_key(PROD_REJ.PX_POZ,VEK.P,'N')
|| _il:=obj_new(5);
   _il[1]:=#gsub(exec('get_value','#desktop','','ctr_menu_end','fld_val1@menu_end'),',','.');
   _il[2]:=#gsub(exec('get_value','#desktop','','ctr_menu_end','fld_val2@menu_end'),',','.');
   _il[3]:=#gsub(exec('get_value','#desktop','','ctr_menu_end','fld_val3@menu_end'),',','.');
   _il[4]:=#gsub(exec('get_value','#desktop','','ctr_menu_end','fld_val4@menu_end'),',','.');
   _il[5]:=#gsub(exec('get_value','#desktop','','ctr_menu_end','fld_val5@menu_end'),',','.');

   _place_kod:=exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','combo_stanowisko@menu_end');
   {? _place_kod=''
   || _place:=null()
   || _place:=exec('FindInSet','#table','TWRKPLC','KOD',_place_kod,,"TWRKPLC.ref()",1,,null())
   ?};

   _min:=exec('array_min','#array',_il);
   _sum:=exec('array_sum','#array',_il);

   _prec_ok:=1;
   PX_WYK.PX_POZ().PX_KONT();
   _dim:=0;
   {!
   |? _dim+=1;
      _prec:=($('PX_KONT.PREC'+$_dim))();
      _pos:=($_il[_dim])*',';
      _dec:=$(_pos-($_il[_dim]));
      {? _pos>0 & +_dec>_prec
      || FUN.info(
            'W wymiarze %1 wprowadzono za dużo znaków po przecinku.\nWprowadzone: %2, dopuszczalna dokładność: %3.'@
            [$_dim,$+_dec,$_prec]
         );
         _prec_ok:=0
      ?};
      _prec_ok & _dim<5
   !};

   {? _prec_ok
   || {? _min<0
      || FUN.info('Wykonanie w żadnym wymiarze nie może być ujemne.'@)
      |? _sum=0
      || FUN.info('Wykonanie w co najmniej jednym wymiarze musi być większe od zera.'@)
      |? _place=null()
      || FUN.info('Należy wskazać stanowisko, na którym została wykonana operacja.'@)
      || {! _dim:=1..5
         |! ($('PX_WYK.CAP_WYK'+$_dim))():=_il[_dim]
         !};
         PX_WYK.PLACE:=_place;
         exec('px_wyk_dolacz','px_wyk',1);
         _result:=1
      ?}
   ?}

|| FUN.emsg('Nie można zakończyć operacji.\nOperacja została usunięta albo przeplanowana.'@);
   PROD_REJ.f_del()

?};
PX_WYK.cntx_pop();
_result


\czyStartProdRej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Czy wystartowana operacja
::   WE: _a - 1 - dla aktualnego operatora (VEK.P, VEK.A_ZLBR), 0 - ogólnie
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _a:=0 ?};
_ret:=0;

{? PROD_REJ.SRODZ='PL'
|| _ret:=PROD_REJ.START='T';
   {? _a
   ||
      PL_WYK.cntx_psh();
      {? PROD_REJ.PL_OZ<>null()
      ||
::       Pojedyncza operacja
         PL_WYK.index('PL_OZ');
         PL_WYK.prefix(PROD_REJ.PL_OZ)
      |? PROD_REJ.PL_OGR<>null()
      ||
::       Grupa operacji
         PL_WYK.index('PL_OGR');
         PL_WYK.prefix(PROD_REJ.PL_OGR)
      |? PROD_REJ.PL_OPER<>null()
      ||
::       Kooperacja
         PL_WYK.index('PL_OPER');
         PL_WYK.prefix(PROD_REJ.PL_OPER)
      ?};
      {? PL_WYK.first()
      || {! |?
            {? ~PL_WYK.ENDD & (PL_WYK.P=VEK.P | PL_WYK.ZLBR=VEK.A_ZLBR)
            || _ret:=1
            ?};
            ~_ret & PL_WYK.next()
         !}
      ?};

      PL_WYK.cntx_pop()
   ?}

|? PROD_REJ.SRODZ='ZL'
|| ZLGD.cntx_psh();
   _zlgd_names:=ZLGD.names();
   {? _zlgd_names.first()
   ||
      {!
      |?
         ZLGD.use(_zlgd_names.NAME);
         ZLGD.cntx_psh();
         ZLGD.index('EK0');
         ZLGD.prefix('N',PROD_REJ.ZGP,PROD_REJ.GROPS);
         _ret:=ZLGD.size()>0;
         {? _a
         || _ret:=0;
            {? ZLGD.first()
            || {! |?
                  {? (ZLGD.P<>null() & ZLGD.P=VEK.P) | (ZLGD.B<>null() & ZLGD.B=VEK.A_ZLBR)
                  || _ret:=1
                  ?};
                  ~_ret & ZLGD.next()
               !}
            ?}
         ?};
         ZLGD.cntx_pop();
         _zlgd_names.next() & ~_ret
      !}
   ?};
   ZLGD.cntx_pop()

|? PROD_REJ.SRODZ='PX'
|| PX_WYK.cntx_psh();
   PX_WYK.index('ZAK2');
   PX_WYK.prefix('N',PROD_REJ.PX_POZ);
   _ret:=PX_WYK.size()>0;
   {? _a
   || _ret:=0;
      {? PX_WYK.first()
      || {! |?
            {? PX_WYK.P=VEK.P
            || _ret:=1
            ?};
            ~_ret & PX_WYK.next()
         !}
      ?}
   ?};
   PX_WYK.cntx_pop()
?};

_ret


\btn_przydz_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Przydziel pracownika
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? exec('upr_kierownik','ekioski')
|| ZGP.cntx_psh(); GROPP.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(PROD_REJ.ZGP)
   || {? ZGP.BRYG='T'
      || FUN.info('Operacja brygadowa — nie można przypisać pracownika.'@)
      |? GROPP.index('ZGP');
         GROPP.prefix(ZGP.ref());
         GROPP.first()
      || FUN.info('Zapis użyty w grupie operacji — nie można przypisać pracownika.'@)
      || exec('przydz_prac','ekioski')
      ?}
   || FUN.error('Brak przewodnika.'@)
   ?};
   ZGP.cntx_pop(); GROPP.cntx_pop()

|| FUN.info('Brak uprawnień do funkcji przydziału pracownika.'@)
?};
~~


\przydz_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Przydziel pracownika
::----------------------------------------------------------------------------------------------------------------------
VEK.A_DATA:=date();

eSelect.sel_exit:=0;

USERS.cntx_psh();
P.cntx_psh();
USERS.index('EKIOSK');
USERS.prefix('T','T');
USERS.first();
P.win_edit();

_pole:={? VAR.A_ZGP().TPZ='T' | VAR.A_TPZL().WP='W' || 'TIME' || 'IL' ?};

eSelect.wer_prac:=exec('win_users_simple','ekioski');
eSelect.wer_kap:=exec('win_kap','ekioski','P',_pole);

eLevel.up(P,eSelect.wer_prac,'PRZY_PRAC',"exec('kap_display','ekioski')");

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuPrac_table','ekioski');
   exec('load','#desktop','ctr_menu_prac','ekiosk_menu_prac.dsk',,,,,_tab,1);

   {? P.f_active()>0
   || exec('set_enabled','#desktop','','ctr_menu_prac','btn_del@menu_prac',P.f_size()>0)
   ?};

   grp_disp(USERS,eSelect.wer_prac,0,1);
   grp_disp(KAP,eSelect.wer_kap,0,1);
   eLevel.change(P,eSelect.wer_prac);
   ~~
";

_grp:=USERS.grp_make('Przydziel pracownika'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------

exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP);
KAP.index('ZDP');
KAP.prefix(PROD_REJ.ZGP);
KAP.first();

_before:="
   P.cntx_psh();
   eLevel.change(KAP,eSelect.wer_kap);
   ~~
";
_after:="
   P.cntx_pop();
   ~~
";
USERS.grp_sel(_grp,KAP,eSelect.wer_kap,,,,,15,_before,_after,,,'maximized_with_title',,1);
USERS.grp_splt(_grp,'pozioma_1','vertical','pozioma_3a');

P.clear();
::UD_FIR.cntx_psh();
::UD_FIR.index('UD_SKL');
::UD_FIR.prefix(REF.FIRMA);
::{? UD_FIR.first()
::|| _ud_skl:=UD_FIR.UD_SKL
::|| _ud_skl:=null()
::?};
::UD_FIR.cntx_pop();
::_ud_def:=exec('szukaj_ud_def','schemat',
::   exec('domyslny','schemat','PODZORG'),
::   _ud_skl
::).REF;
::_from:='join USERS using(USERS.P,P.REFERENCE)';
::_where:='USERS.EKIOSK=\'T\'';
::exec('filtruj_p','schemat','TTE',_ud_def,'','T','T',_from,_where);
::P.f_first();

_before:="
   eLevel.change(USERS,eSelect.wer_prac);
   ~~
";
USERS.grp_sel(_grp,USERS,eSelect.wer_prac,,,,,{? VEK.DPI=96 || 20 || 17 ?},_before,,,,'maximized_with_title');
USERS.grp_splt(_grp,,'horizontal','pozioma_3b',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_prac',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);
USERS.select();

USERS.cntx_pop();
P.cntx_pop();

:: Zamykamy tylko okno selekcji poziom nizej
{? eSelect.sel_exit=1 || sel_exit(); eSelect.sel_exit:=0 ?};

:: Po wykonaniu akcji w przycisku odswiezamy okno z rejestracji
grp_disp(PROD_REJ,eSelect.wer_rej,0,1);

eLevel.down();
~~


\win_prac_simple
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania Listy pracowników z tabeli P
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_wer:=P.mk_sel('Lista pracowników'@,'P',,,,,15,,'P');

P.win_fld(_wer,OSOBA,'NAZWISKO',,,10,,,'Nazwisko'@);
P.win_fld(_wer,OSOBA,'PIERWSZE',,, 9,,,'Imię'@);
P.win_fld(_wer,,'WYDZIAL','SYMBOL',,7,,,'Wydział'@);
::P.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
P.win_act(_wer,,'Kolejność');
P.win_act(_wer,,'Rekord',,,,"P.OSOBA();~~");
P.win_sel(_wer);
_wer


\win_users_simple
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Tworzy okno wertowania Użytkowników
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_wer:=USERS.mk_sel('Lista użytkowników'@,'P',,,,,15);

USERS.win_fld(_wer,OSOBA,'NAZWISKO',,,10,,,'Nazwisko'@);
USERS.win_fld(_wer,OSOBA,'PIERWSZE',,,9,,,'Imię'@);
USERS.win_fld(_wer,,'KOD');
::USERS.win_fld(_wer,P,'WYDZIAL','SYMBOL',,7,,,'Wydział'@);
::USERS.win_act(_wer,,'Kolejność');
USERS.win_act(_wer,,'Rekord',,,,"USERS.OSOBA();~~");
USERS.win_sel(_wer);
_wer


\win_kap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Tworzy okno wertowania Karty pracy z tabeli KAP
::   WE: [_a] - [P]racownik [domyslnie], [B]rygada
::       [_b] - 'IL' ilosc [domyslnie], 'TIME' czas
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>2 || _a:='P' ?} || _a:='P' ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='IL' ?} || _b:='IL' ?};

_wer:=KAP.mk_sel('Karty pracy'@,'P',,,,,15);

{? _a='P'
|| KAP.win_fld(_wer,OSOBA,'NAZWISKO',,,10,,,'Nazwisko'@);
   KAP.win_fld(_wer,OSOBA,'PIERWSZE',,, 9,,,'Imię'@)
|| KAP.win_fld(_wer,ZLBR,'KOD',,,24,,,'Kod brygady'@)
?};
KAP.win_fld(_wer,,'DT',,,10,,,'Data'@);
{? _b='IL'
|| KAP.win_fld(_wer,,'IL',,, 8,4,,'Ilość'@)
|| KAP.win_fld(_wer,,'TIME',,, 8,4,,'Czas'@)
?};

KAP.win_act(_wer,,'Rekord',,,,"KAP.P().OSOBA(); KAP.B(); exec('rekprzed','color','KAP#01#01')");
KAP.win_act(_wer,,'Kolejność');
KAP.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda_kap','zl_kap')",,,,,,'L');
KAP.win_act(_wer,,'Wyświetl',,,,"exec('kap_display','ekioski')");

KAP.win_sel(_wer);
_wer


\kap_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wyświetla kartę pracy
::----------------------------------------------------------------------------------------------------------------------
{? KAP.get()
|| {? KAP.ZGP().BRYG='T'
   || VAR.TYMCZAS:='BZ';
      _wer:='WER_BZ';
      _red:='EK_BZ'
   || VAR.TYMCZAS:='Z';
      _wer:='WER_Z';
      _red:='EK_Z'
   ?};
   exec('uni_display','#desktop',KAP,_red,'Karta pracy'@,20,4,'karta'+(-_red))
?};
~~


\btn_usun_kap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk usuń kartę pracy
::----------------------------------------------------------------------------------------------------------------------
{? KAP.get()
|| exec('kap_z_usu','zl_kap');
   grp_disp(KAP,eSelect.wer_kap,0,1)
?};
~~


\btn_przy_kap1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Przydziel pracownika (przypisanie karty pracy recznie)
::       Konteskt wywołania: rekord tabeli USERS (użytkownicy)
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? PROD_REJ.PROBLEM<>'T'
||
   {? exec('kontrola_nkap','ekioski',PROD_REJ.ZGP)=0
   || _wyn:=0
   || eSelect.czyt_pracownik:=null();
      _res:=exec('find_prac_ip','ekioski',USERS.IP);
      {? eSelect.czyt_pracownik<>null()
      || P.cntx_psh();
         P.prefix();
         {? P.seek(eSelect.czyt_pracownik)
         || _wyn:=exec('przy_kap1','ekioski')
         ?};
         P.cntx_pop()
      || {? _res=8
         || FUN.info('Brak aktualnego zatrudnienia dla użytkownika %1 %2.'@
                     [USERS.OSOBA().PIERWSZE,USERS.OSOBA().NAZWISKO])
         ?}
      ?}
   ?}
||
   FUN.info('Operacja ma zgłoszony problem.\nPrzydzielanie zablokowane do czasu rozwiązania problemu.'@)
?};
_wyn


\find_start_nkap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Znajduje start dla operacji bez przypisanej karty pracy.
::       Czyli jest zrobiony start nie poprzez kolejke
::   WE: _a - ZGP.ref()
::   WY: ZLGD.ref lub null()
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();

ZLGD.cntx_psh();
ZLGD.index('EK1');
ZLGD.prefix('N',_a);
{? ZLGD.first()
|| {!
   |? {? ZLGD.KAP=null() || _wyn:=ZLGD.ref() ?};
      _wyn=null() & ZLGD.next()
   !}
?};
ZLGD.cntx_pop();
_wyn


\przy_kap1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Przydziel pracownika (przypisanie karty pracy recznie)
::       Kontekst wywołania - ustawiony bufor tabeli P (pracownik)
::----------------------------------------------------------------------------------------------------------------------
PROD_REJ.get();
exec('recProdRej','ekioski');

eSelect.na_dzien:=VEK.A_DATA;

:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP);

_warszt:=exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP);

eSelect.il_wyk:=0;
eSelect.i_time:=0;

{? PROD_REJ.ZGP().TPZ='N' & _warszt='N'
||
   _ok:=exec('okno_przydz_kap','ekioski')
||
   eSelect.il_wyk:=0;
   eSelect.i_time:=PROD_REJ.ZGP().NTIME;
   _ok:=1
?};

{? _ok=1
||
   _il_poz:=eSelect.il_wyk;
   _i_time:=eSelect.i_time;

:: Bieżący rekord tabeli P (pracownik)
   _prac_ref:=P.ref();
   _na_dzien:=eSelect.na_dzien;

   _kap_ref:=exec('kap_add','ekioski',PROD_REJ.ZGP,_prac_ref,null(),_na_dzien,_il_poz,_i_time);
   {? _kap_ref=null()
   || FUN.error(
         'Nie można dołączyć/przydzielić karty pracy.\n'
         'W dniu %1 została już przydzielona karta pracy.'@[$eSelect.na_dzien]
      )
   ||
::       tylko ustawiamy sie na rekord w oknie
      KAP.seek(_kap_ref);
      grp_disp(KAP,eSelect.wer_kap,0,1)
   ?}
::   ?}
?};
~~


\okno_przydz_kap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Okno przypisz ilosc do karty pracy
::       Funkcja uzupelnia zmienna QTselect.il_wyk
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_ctr_id:=exec('create','#desktop',
   SYSLOG,'ctr_przy_kap_i',,{? VEK.DPI=96 || 24 || 20 ?},{? VEK.DPI=96 || 91 || 75 ?},
   'Przydział prac'@,,'normal',,14,4
);
SYSLOG.win_ctr(_ctr_id);

_before:="
   PROD_REJ.get();

   _tab:=exec('elements_przyKapIl_table','ekioski');
   exec('load','#desktop','ctr_przy_kap_i','ekiosk_przy_kap_il.dsk',,,,,_tab,1);

:: Ilosc calkowita
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_ilc@przy_kap_il',$PROD_REJ.ILC);
:: Ilosc juz wykonana
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_ilw@przy_kap_il',$PROD_REJ.ILW);
:: Ilosc do wykonana jak pozostala
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_il@przy_kap_il',$PROD_REJ.IL);
:: Ilosc juz przydzielona na Kartach pracy
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_assigned@przy_kap_il',$(VAR1.K_SUM_I));
:: Ilosc pozostala do przydzielenia
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_remained@przy_kap_il',$(VEK.ILDOWYK));
:: Ilosc do przydzielenia (POLE REDAGOWALNE)
   exec('set_value','#desktop','','ctr_przy_kap_i','fld_to_assign@przy_kap_il',$({? VEK.ILDOWYK-VAR1.K_SUM_I<0 || 0 || VEK.ILDOWYK-VAR1.K_SUM_I ?}));
   ~~
";
_win_id:='id_okno_przy_kap';
_ret:=SYSLOG.control(_win_id,'modal=false,pack=false',_before);
{? _ret=~~
||
:: Zrezygnowano z przydzielania pracownikow - klawisz Esc lub Zamknij
   _wyn:=0
|? _ret='ZATW_KAP_IL'
||
:: Przydzielono pracownika - odczytano numer
   _wyn:=1
?};
_wyn


\kontrola_nkap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Kontrola przydzielania karty jezeli operacja zostala wystartowana przez innego pracownika bez kap
::   WE: _a - PROD_REJ.ZGP
::   WY: 1 jezeli ok, 0 wpp
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;

_start_nkap:=exec('find_start_nkap','ekioski',_a);
{? _start_nkap=null()
|| _ok:=1
|| _ok:=exec('kom_start_nkap','ekioski',_start_nkap)
?};
_ok


\kom_start_nkap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Komunikat przy przydzielaniu kart pracy
::   WE: _a - ZLGD.ref() które ma ZLGD.KAP null
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_start_nkap:=_a;
_res:=0;
::_komunikat:='Przydzielanie pracy zablokowane.';
_komunikat:='';

P.cntx_psh();
ZLGD.cntx_psh();
ZLGD.prefix();
{? ZLGD.seek(_start_nkap)
|| {? ZLGD.B<>null()
   || _komunikat+=
         'Operacja jest aktualnie uruchomiona bez karty przydzielenia (z kolejki)'
         '\nprzez brygadę %1.'@[ZLGD.B().KOD]
   || _komunikat+=
         'Operacja jest aktualnie uruchomiona bez karty przydzielenia (z kolejki)'
         '\nprzez pracownika %1.'@[ZLGD.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE]
   ?}
?};
ZLGD.cntx_pop();
P.cntx_pop();
_komunikat+='\n\n Czy mimo to przydzielić pracę?';
_res:=FUN.ask(_komunikat);
_res


\kap_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Dodaje kartę pracy KAP
::       KAP dodajemy na biezacym prefiksie, czyli trzeba wczesniej ustawić
::   WE: _a - ZGP.ref()
::       _b - P.ref()
::       _c - ZLBR.ref()
::       _d - na dzien
::       _e - ilosc
::       _f - time
::   WY: KAP.ref() lub null()
::----------------------------------------------------------------------------------------------------------------------
_zgp_ref:=_a;
_prac_ref:=_b;
_zlbr_ref:=_c;
_na_dzien:=_d;
_il_kap:=_e;
_i_time:=_f;

_wyn:=null();

Cntx.psh(P,ZGP);
:: Terminal ustawia automatycznie maski wiec maska jest aktualna na daną date
KAP.cntx_psh();
KAP.index('ZDP');
KAP.prefix(_zgp_ref);
KAP.blank();
KAP.ZGP:=_zgp_ref;
KAP.ZGH:=KAP.ZGP().NRZLP;

{? KAP.ZGP().BRYG='N'
|| KAP.P:=_prac_ref;
   KAP.B:=null()
|| KAP.P:=null();
   KAP.B:=_zlbr_ref
?};

KAP.DT:=_na_dzien;

KAP.IL:=_il_kap;
KAP.TIME:=_i_time;

{? KAP.add(1)
|| _wyn:=KAP.ref()
?};
KAP.cntx_pop();
Cntx.pop(P,ZGP);
_wyn


\btn_przy_kap_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Zatwierdzenia ilości dla karty pracy
::   WE: [_a] - REAL - ilość do wykonana, jeżeli nie podana to czyta z okienka
::       [_b] - INTEGER - czy zamykać aktywne okienko
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_il_wyk:=-1;
{? var_pres('_a')=type_of(0)
|| _il_wyk:=_a
?};

_sel_exit:=1;
{? var_pres('_b')=type_of(0)
|| _sel_exit:=_b
?};

_wyn:=0;
:: Pole tekstowe z ilością do przydzielnia ID:1340005548584
{? _il_wyk=-1
|| _il_wyk:=exec('get_value','#desktop','','ctr_przy_kap_i','fld_to_assign@przy_kap_il');
   _il_wyk:=#gsub(_il_wyk,',','.')
?};

:: wypełniany bufor tabeli KAP w celu użycia wspólnej metody walidacji
KAP.blank();
KAP.ZGP:=PROD_REJ.ZGP;
KAP.ZGH:=PROD_REJ.ZGH;
{? KAP.ZGP().BRYG='N'
|| KAP.P:=P.ref();
   KAP.B:=null()
|| KAP.P:=null();
   KAP.B:=ZLBR.ref()
?};
KAP.DT:=date();
KAP.IL:=_il_wyk;
KAP.TIME:=0;

VAR1.IN_TPZ:=0;

_ok:=exec('chk_kap','zl_kap');

{? _ok<>''
|| _wyn:=0

|| eSelect.il_wyk:=_il_wyk;
   {? _sel_exit>0
   || ctr_ret('ZATW_KAP_IL');
      sel_exit()
   ?};
   _wyn:=1

?};
_wyn


\btn_przy_kap2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Przydziel pracownika za pomocą karty (przypisanie karty pracy)
::   WE: [_a] - 0 - przydziel KAP i uruchom z poziomu brygadzisty [domyslnie]
::              1 - uruchom z poziomu pracownika (operacja wieloosobowa)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0  ?} || _a:=0 ?};
_opcja:=_a;

{? PROD_REJ.PROBLEM<>'N'
||
   FUN.info('Operacja ma zgłoszony problem.\nPrzydzielanie zablokowane do czasu rozwiązania problemu.'@);
   return(0)
?};

:: Kontrola przydzielania karty jezeli operacja zostala wystartowana przez innego pracownika bez kap
{? exec('kontrola_nkap','ekioski',PROD_REJ.ZGP)=0
|| return(0)
?};

eSelect.na_dzien:=VEK.A_DATA;

_prac_list:=sql('select SYSLOG.REFERENCE as REF from SYSLOG where 1=2 order by 1');

eSelect.il_obs:=0;
{!
|?
   _prac_ref:=exec('okno_czyt_karte','ekioski');
   _petla:=0;
   {? _prac_ref<>null()
   ||
      {? _prac_list.find_key($_prac_ref)
      ||
         FUN.info('Pracownik już został raz odczytany.'@)
      ||
         eSelect.il_obs+=1;
         _prac_list.REF:=$_prac_ref;
         _prac_list.add()
      ?};
      _petla:=1
   ||
      _petla:=0
   ?};
   _petla
!};

:: Przypisano pracownikow tylu ilu wynika z obsady operacji
{? _prac_list.size()
||
   exec('przy_kap2','ekioski',_prac_list,eSelect.na_dzien,_opcja)
||
   FUN.info('Zrezygnowano z przydzialania pracowników.'@);
   _prac_list.erase()
?};
eSelect.il_obs:=0;
1


\przy_kap2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Przydziel pracownika za pomocą karty (przypisanie karty pracy)
::   WE: _a - tabela sql z refsql pracownikow
::       _b - na jaki dzien wprowadzamy kartę pracy
::       [_c] - 0 - przydziel KAP i uruchom z poziomu brygadzisty  [domyslnie]
::              1 - uruchom z poziomu pracownika (operacja wieloosobowa)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=0  ?} || _c:=0 ?};
_prac_list:=_a;
_na_dzien:=_b;
_opcja:=_c;

PROD_REJ.get();
exec('recProdRej','ekioski');

{? PROD_REJ.PROBLEM<>'N'
|| FUN.info('Operacja ma zgłoszony problem.\nPrzydzielanie zablokowane do czasu rozwiązania problemu.'@);
   return(0)
?};

:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP);

P.cntx_psh();
KAP.cntx_psh();
KAP.index('ZDP');
KAP.prefix(PROD_REJ.ZGP);

_warszt:=exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP);

eSelect.il_wyk:=0;
eSelect.i_time:=0;

{? PROD_REJ.ZGP().TPZ='N' & _warszt='N'
||
:: Okno przypisania ilosci na Karcie pracy do pracownika - wypelnia zmienna QTselect.il_wyk
   _ok:=exec('okno_przydz_kap','ekioski')
||
   eSelect.il_wyk:=0;
   eSelect.i_time:=PROD_REJ.ZGP().NTIME;
   _ok:=1
?};

{? _ok=1
||
   _il_poz:=eSelect.il_wyk;
   _i_time:=eSelect.i_time;
   {? _prac_list.first()
   ||
      {!
      |?
         _prac_ref:=null();
         P.cntx_psh();
         P.clear();
         {? P.seek(BIT.sqlint(_prac_list.REF),form(8+_prac_list.REF))
         || _prac_ref:=P.ref()
         ?};
         P.cntx_pop();

         {? _opcja=0 | _opcja=1
         || _wyn:=exec('kap_add','ekioski',PROD_REJ.ZGP,_prac_ref,null(),_na_dzien,_il_poz,_i_time)
         ?};
         {? _opcja=0 & _wyn=null()
         || FUN.error(
               'Nie można dołączyć/przydzielić karty pracy.\n'
               'W dniu %1 została już przydzielona karta pracy.'@[$eSelect.na_dzien]
            )
         ?};
         _prac_list.next()
      !};
      {? _opcja=0
      || grp_disp(KAP,eSelect.wer_kap,0,1)
      ?}
   ?}
?};
KAP.cntx_pop();
P.cntx_pop();

KAP.first();
~~


\btn_brygada
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Brygada
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? exec('upr_kierownik','ekioski')
||
   ZGP.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(PROD_REJ.ZGP)
   || {? ZGP.BRYG<>'T'
      || FUN.info('Operacja pracownika — nie można przypisać brygady.'@)
      || exec('przydz_bryg','ekioski');
::         exec('setAktBryg','ekioski');
         ~~
      ?}
   || FUN.error('Brak przewodnika.'@)
   ?};
   ZGP.cntx_pop()
||
   FUN.info('Funkcja dostępna tylko dla Brygadzisty.'@)
?};
~~


\przydz_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Przydziel brygade
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VEK.A_DATA:=date();

eSelect.sel_exit:=0;

USERS.cntx_psh();
ZLBR.cntx_psh();
ZLBR.prefix();

_pole:={? VAR.A_ZGP().TPZ='T' | VAR.A_TPZL().WP='W' || 'TIME' || 'IL' ?};

eSelect.wer_zlbr:=exec('win_zlbr','ekioski');
eSelect.wer_zlbs:=exec('win_zlbs','ekioski',1);
eSelect.wer_kap:=exec('win_kap','ekioski','B',_pole);

eLevel.up(KAP,eSelect.wer_kap,'PRZY_KAP',"exec('kap_display','ekioski')");

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuBrygP_table','ekioski');
   exec('load','#desktop','ctr_menu_prac','ekiosk_menu_bryg_p.dsk',,,,,_tab,1);
   exec('set_enabled','#desktop','','ctr_menu_prac','btn_add@menu_bryg_p',ZLBR.f_size()>0);

   grp_disp(ZLBR,eSelect.wer_zlbr,0,1);
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
   grp_disp(KAP,eSelect.wer_kap,0,1);
   eLevel.change(ZLBR,eSelect.wer_zlbr);
   ~~
";

_grp:=USERS.grp_make('Przydziel brygadę'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
KAP.index('ZDP');
KAP.prefix(PROD_REJ.ZGP);
KAP.first();

_before:="
::   ZLBR.cntx_psh();
   {? ZLBR.f_active()
   || ZLBR.f_seek(KAP.B)
   || ZLBR.seek(KAP.B)
   ?};
   grp_disp(ZLBR,eSelect.wer_zlbr,0);
   eLevel.change(KAP,eSelect.wer_kap,\"exec('kap_display','ekioski')\");
   ~~
";
_after:="
::   ZLBR.cntx_pop();
   ~~
";
_after_refresh:="
   {? ZLBR.f_active()
   || ZLBR.f_seek(KAP.B)
   || ZLBR.seek(KAP.B)
   ?};
   grp_disp(ZLBR,eSelect.wer_zlbr,0);
   eLevel.change(KAP,eSelect.wer_kap,\"exec('kap_display','ekioski')\");
   ~~
";
USERS.grp_sel(_grp,KAP,eSelect.wer_kap,,_after_refresh,,,{? VEK.DPI=96 || 20 || 16 ?},_before,_after,,
              ,'maximized_with_title',,1);
USERS.grp_splt(_grp,'pozioma_1','vertical','pozioma_3a');

_sort:='KOD';
_from:='';
_where:=' ZLBR.AKT=''T'' ';

ZLBR.clear();
ZLBR.f_set(_sort,_from,_where);
ZLBR.f_first();

_before:="
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
   eLevel.change(ZLBR,eSelect.wer_zlbr,\"exec('zlbr_display','ekioski')\");
   ~~
";
_after_refresh:="
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
   eLevel.change(ZLBR,eSelect.wer_zlbr,\"exec('zlbr_display','ekioski')\");
   ~~
";
USERS.grp_sel(_grp,ZLBR,eSelect.wer_zlbr,,_after_refresh,,,7,_before,,,,'maximized_with_title');
USERS.grp_splt(_grp,'pozioma_3a','horizontal','pozioma_3a2',0);
_before:="
   eLevel.change(ZLBS,eSelect.wer_zlbs);
   {? grp_empty(ZLBR,eSelect.wer_zlbr)
   || '#disable'
   || ZLBS.index('BODIP');
      ZLBS.prefix(ZLBR.ref());
      ~~
   ?}
";
USERS.grp_sel(_grp,ZLBS,eSelect.wer_zlbs,,,,,7,_before,,,,'maximized_with_title');

USERS.grp_splt(_grp,,'horizontal','pozioma_3b',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_prac',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);
USERS.select();

USERS.cntx_pop();
ZLBR.f_clear();
ZLBR.cntx_pop();

:: Zamykamy tylko okno selekcji poziom nizej
{? eSelect.sel_exit=1 || sel_exit(); eSelect.sel_exit:=0 ?};

:: Po wykonaniu akcji w przycisku odswiezamy okno z rejestracji
grp_disp(PROD_REJ,eSelect.wer_rej,0,1);

eLevel.down();
~~


\btn_przydz_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Przydziel brygady
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? exec('upr_kierownik','ekioski')
|| ZGP.cntx_psh(); GROPP.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(PROD_REJ.ZGP)
   || {? ZGP.BRYG<>'T'
      || FUN.info('Operacja indywidualna — nie można przypisać brygady.'@)
      |? GROPP.index('ZGP');
         GROPP.prefix(ZGP.ref());
         GROPP.first()
      || FUN.info('Zapis użyty w grupie operacji — nie można przypisać brygady.'@)
      || exec('sum_kap_zgp','zl_kap',ZGP.ref());
         {? exec('get','#params',500647)='T'
         ||
::          Brygady dynamiczne
            {? VAR1.K_SUM_I=0 & VAR1.K_SUM_T=0
            || exec('dynamic_bryg','ekioski')
            ||
               _msg:='Brygada już została przydzielona.'@;
               _choice:=FUN.choice(_msg,,'Szczegóły'@);
               {? _choice=1
               || exec('kap_view','ekioski');
                  grp_disp(PROD_REJ,eSelect.wer_rej,0,1)
               ?}
            ?}
         || exec('przydz_bryg','ekioski')
         ?}
      ?}
   || FUN.error('Brak przewodnika.'@)
   ?};
   ZGP.cntx_pop(); GROPP.cntx_pop()

|| FUN.info('Brak uprawnień do funkcji przydziału brygady.'@)
?};
~~


\btn_przy_kap3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Przydziel brygadę
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

{? PROD_REJ.PROBLEM='T'
|| FUN.info('Operacja ma zgłoszony problem.\nPrzydzielanie zablokowane do czasu rozwiązania problemu.'@)
|? ZLBR.AKT='N'
|| FUN.info('Brygada nie jest aktywna.'@+'\n'+'Nie można przydzielić pracy.'@)
|? _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
   _ile_w_zlbs=0
|| FUN.info('Brak pracowników w składzie brygady.'@+'\n'+'Nie można przydzielić pracy.'@)
|? ~exec('zlbr_chk_zlbs','prod_rej',ZLBR.ref(),VEK.A_DATA,1)
|| ~~
|| {? exec('kontrola_nkap','ekioski',PROD_REJ.ZGP)=0
   || _wyn:=0
   || _wyn:=exec('przy_kap3','ekioski')
   ?}
?};
_wyn


\przy_kap3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja Przydziel brygadę
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PROD_REJ.get();
exec('recProdRej','ekioski');

eSelect.na_dzien:=VEK.A_DATA;

:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP);

_warszt:=exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP);

eSelect.il_wyk:=0;
eSelect.i_time:=0;

{? PROD_REJ.ZGP().TPZ='N' & _warszt='N'
||
   _ok:=exec('okno_przydz_kap','ekioski')
||
   eSelect.il_wyk:=0;
   eSelect.i_time:=PROD_REJ.ZGP().NTIME;
   _ok:=1
?};

{? _ok=1
||
   _il_poz:=eSelect.il_wyk;
   _i_time:=eSelect.i_time;
   _zlbr:=ZLBR.ref();
   _na_dzien:=eSelect.na_dzien;

   _kap_ref:=exec('kap_add','ekioski',PROD_REJ.ZGP,null(),_zlbr,_na_dzien,_il_poz,_i_time);
   {? _kap_ref=null()
   || FUN.error(
         'Nie można dołączyć/przydzielić karty pracy.\n'
         'W dniu %1 została już przydzielona karta pracy.'@[$eSelect.na_dzien]
      )
   ||
::       tylko ustawiamy sie na rekord w oknie
      KAP.seek(_kap_ref);
      grp_disp(KAP,eSelect.wer_kap,0,1)
   ?}
?};
~~


\findFirstKap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Wyszukuje pierwszą niewykonaną kartę dla pracownika
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_ileK:=0;
ZL.cntx_psh();
ZGP.cntx_psh();
{? VEK.TERM<>'T'
|| _ret:=KAP.select()
|| _ok:=0;
   {? KAP.first()
   || {!
      |? KAP.ZGP();
         {? (ZGP.BRYG='T' & KAP.B=VEK.A_ZLBR) | (ZGP.BRYG<>'T' & KAP.P=VEK.P)
         || _ileK+=1;
            _ile:=KAP.IL;
            _czy_zlgd:=0;
            ZLGD.cntx_psh();
            ZLGD.index('KAP');
            ZLGD.prefix(KAP.ref());
            {? ZLGD.first()
            || {!
               |? _ile-=ZLGD.IL;
                  {? _czy_zlgd=0 & ZLGD.ZAK='T'
                  || _czy_zlgd:=1
                  ?};
                  ZLGD.next()
               !}
            ?};
            ZLGD.cntx_pop();
            {? KAP.ZGH().ZLEC().TYP().WP='W' & KAP.IL=0
            || _ret:=1;
               _ok:=1
            || '-*-SP- 15.09.2015';
               {? (KAP.IL>0 & _ile>0) | (KAP.IL=0 & ZGP.TPZ='T') | (KAP.IL=0 & ZGP.TPZ='N' & _czy_zlgd=0)
               || _ret:=1;
                  _ok:=1
               ?}
            ?}
         ?};
         ~_ok & KAP.next()
      !};
      {? ~_ok
      || {? _ileK
         || _choice:=FUN.choice('Dla karty pracy zarejestrowano już całą ilość.'@,
               ,'Zarejestruj bez karty pracy'@,,,,'OK')
         || _choice:=FUN.choice('Nie znaleziono karty pracy.'@,,'Zarejestruj bez karty pracy'@,,,,'OK'@)
         ?};
         {? _choice>0
         || VAR1.BEZ_KAP:='T'
         ?}
      ?}
   ?}
?};
ZGP.cntx_pop();
ZL.cntx_pop();
_ret


\setAktBryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Ustawia aktualną brygadę pracownika
::----------------------------------------------------------------------------------------------------------------------
VEK.A_ZLBR:=null();

:: Ustalenie brygady wg brygadzisty
ZLBR.cntx_psh();
ZLBR.index('EK1');
ZLBR.prefix(VEK.P().OSOBA);
{? ZLBR.last()
|| {!
   |? _ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
      {? ZLBR.OD<=date() & (ZLBR.DO=date(0,0,0) | date()<=ZLBR.DO) & _ile_w_zlbs>0
      || VEK.A_ZLBR:=ZLBR.ref();
         _dalej:=0
      || _dalej:=ZLBR.prev()
      ?}
   !}
?};
ZLBR.cntx_pop();
~~


\btn_ident_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Identyfikacja danych o operacji
::----------------------------------------------------------------------------------------------------------------------
:: Funkcja dostępna dla wszystkich
exec('fun_ident_zgp','ekioski',{? _<1 || 'SEL_IDENT' || _a ?});
~~


\fun_ident_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Przycisk Identyfikacja danych o operacji
::   WE: _a - 'SEL_IDENT' lub 'SEL_QUALITY'
::----------------------------------------------------------------------------------------------------------------------
_opcja:=_a;

{!
|? _prod_rej:=exec('okno_ident_zgp','ekioski',_opcja);
   _petla:=0;
   {? _prod_rej<>null()
   ||
::    Ustawiamy się na odpowiedni rekord
      PROD_REJ.cntx_psh();
      PROD_REJ.prefix();
      {? PROD_REJ.seek(_prod_rej)
      ||
::       Ustawiamy odpowiedni prefix aby pokazał się tylko jeden rekord
         {? (PROD_REJ.IL>0 & PROD_REJ.OK='N') | PROD_REJ.ZL().TYP().WP='W'
         || exec('ident_zgp','ekioski',PROD_REJ.ref())
         || {? (PROD_REJ.IL=0 & PROD_REJ.OK='T')
            || exec('ident_zgp','ekioski',PROD_REJ.ref())
            || FUN.emsg(
                  'Operacja \'%1\' jest już wykonana na zleceniu %2.'@[ZGP.OPIS,ZGP.NRPRZ().ZLEC().SYM]+
                  '\n\n'+'Błędnie przeczytany kod, wybierz następny lub zgłoś problem przełożonemu.'@
               )
            ?}
         ?}
      ?};
      PROD_REJ.cntx_pop();

      _petla:=1
   ||
      _petla:=0
   ?};
   _petla
!};
~~


\okno_ident_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Okno identyfikacji operacji - okno z odczytem
::   WE: _a - 'SEL_IDENT' lub 'SEL_QUALITY'
::   WY: PROD_REJ.ref lub null
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null();

eLevel.up(SYSLOG,_a,'IDENT_ZGP');

_ctr_id:=exec('create','#desktop',SYSLOG,'ctr_ident_zgp',,20,70,'Identyfikacja operacji'@,,'normal',,15,6);
SYSLOG.win_ctr(_ctr_id);

_before:="
   exec('set_value','#desktop','','ctr_ident_zgp','1337734579720','');
   exec('load','#desktop','ctr_ident_zgp','ekiosk_ident_zgp.dsk');
:: Niewidoczny przycisk PROBLEMY
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_ident_zgp','18n3aj5881m3g69h6ibi2nklhea6d',0)
   ?};
:: Niewidoczny przycisk BRYGADY
   {? exec('upr_brygadzista','ekioski')=0
   || exec('set_visible','#desktop','','ctr_ident_zgp','309mgm83dj752223cgdchlkbge0b3',0)
   ?};
:: Niewidoczny przycisk ROZPOCZĘTE OPERACJE
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_ident_zgp','2g911787m30f30h7d9f0409iambg2',0)
   ?};
   ~~
";
_win_id:=_a;
_ret:=SYSLOG.control(_win_id,'modal=false,pack=false',_before);
{? _ret=~~
|| _wyn:=null()
|? _ret='IDENT_ZGP'
|| _wyn:=eSelect.prod_rej
?};

eLevel.down();

_wyn


\zgp_kkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Funkcja/Zdarzenie po odczytaniu kodu kreskowego operacji przewodnika albo grupy operacji
::   WE: _a - kontekst użycia 'okno_prac' albo 'menu_main'
::----------------------------------------------------------------------------------------------------------------------
_cntx:=_a;

_vp:=VEK.PROD_REJ;

:: Pole z kodem kreskowym w okienku (z czytnika kodów kreskowych)
_kkod:=exec('get_value','#desktop','','ctr_%1'[_cntx],'fld_barcode@%1'[_cntx]);
_prod_rej:=exec('find_zgp_kkod','ekioski',_kkod);
{? _prod_rej<>null()
||
   _kom:='Znaleziono operację.'@;
   exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_info@%1'[_cntx],_kom);
   delay(1);

:: Ustawiamy się na odpowiedni rekord
   PROD_REJ.cntx_psh(); ZGP.cntx_psh(); ZL.cntx_psh(); GROP.cntx_psh(); GROPS.cntx_psh();
   PROD_REJ.prefix();
   {? PROD_REJ.seek(_prod_rej)
   || exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_info@%1'[_cntx],'');
      exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_barcode@%1'[_cntx],'');
::    Czyszczę tabelę tymczasową z rozliczeniami surowców
      {? var_pres('__ENV_REJ')>100
      || VAR_DEL.delete('__ENV_REJ')
      ?};
::    Ustawiamy odpowiedni prefix aby pokazał się tylko jeden rekord
      exec('ident_zgp','ekioski',PROD_REJ.ref())
   || exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_info@%1'[_cntx],'Nie znaleziono zapisu wykonania'@)
   ?};
   PROD_REJ.cntx_pop(); ZGP.cntx_pop(); ZL.cntx_pop(); GROP.cntx_pop(); GROPS.cntx_pop()
||
   exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_barcode@%1'[_cntx],'');
   _kom:='Nie znaleziono operacji lub jest już zamknięta.'@;
   exec('set_value','#desktop','','ctr_%1'[_cntx],'fld_info@%1'[_cntx],_kom)
?};

VEK.PROD_REJ:=_vp;
~~


\find_zgp_kkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Szuka operacji wg kodu kreskowego operacji przewodnika albo grupy operacji
::   WE: _a - kod kreskowy operacji to:
::            > numer rekordu czyli #ZGP.ref uzupelniony do 8 znakow
::            > ZGP.IDEAN jeśli zaczyna się od litery 'P'
::            > GROPS.IDEAN jeśli zaczyna się od litery 'S'
::   WY: PROD_REJ.ref() lub null()
::----------------------------------------------------------------------------------------------------------------------
_kkod:=_a;
_zgp:=null();
_grops:=null();
ZGP.cntx_psh(); GROP.cntx_psh(); GROPS.cntx_psh();
{? 1+_kkod='P'
|| ZGP.index('IDEAN');
   ZGP.prefix(_kkod,);
   {? ZGP.first()
   || _zgp:=ZGP.ref()
   ?}
|? 1+_kkod='S'
|| GROPS.index('IDEAN');
   GROPS.prefix(_kkod,);
   {? GROPS.first()
   || _grops:=GROPS.ref()
   ?}
|| ZGP.prefix();
   {? ZGP.seek(#_kkod,)
   || _zgp:=ZGP.ref()
   ?}
?};
ZGP.cntx_pop(); GROP.cntx_pop(); GROPS.cntx_pop();

_prod_rej:=null();
{? _zgp<>null()
|| PROD_REJ.cntx_psh();
   PROD_REJ.index('SRC');
   PROD_REJ.prefix($_zgp,);
   {? PROD_REJ.first()
   || _prod_rej:=PROD_REJ.ref()
   || PROD_REJ.cntx_psh();
      PROD_REJ.index('ZGP');
      PROD_REJ.prefix('PL',#_zgp);
      {? PROD_REJ.first()
      || _prod_rej:=PROD_REJ.ref()
      ?};
      PROD_REJ.cntx_pop()
   ?};
   PROD_REJ.cntx_pop()
|? _grops<>null()
|| PROD_REJ.cntx_psh();
   PROD_REJ.index('SRC');
   PROD_REJ.prefix($_grops,);
   {? PROD_REJ.first()
   || _prod_rej:=PROD_REJ.ref()
   ?};
   PROD_REJ.cntx_pop()
?};
_prod_rej


\ident_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Pokazuje jedna konkretna operacje
::   WE: [_a] - PROD_REJ.ref()
::       [_b] - ZGP.ref()
::       [_c] - tm_stamp konca
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>7 || _a:=null() ?} || _a:=null() ?};
{? _>=2 || {? type_of(_b)<>7 || _b:=null() ?} || _b:=null() ?};
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?}      || _c:=0 ?};
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?}      || _d:=0 ?};

VEK.PROD_REJ:=_a;
VEK.ZGP:={? _b=null()
         || exec('get_zgp','prod_rej')
         || _b
         ?};

{? VEK.ZGP | VEK.PROD_REJ
||
   VEK.PROD_REJ().OK;

   FILTER.blank(1);

   ZGP.cntx_psh();
   ZGP.prefix();
   ZGP.seek(VEK.ZGP);
   exec('ident_zgp_f','ekioski');

:: 1.Aktualny wydzial        [null] lub [SLO.ref]
   FILTER.PR_A_WYD:=null();
:: 2.Aktywny (zl.otwarte)    [T] tak, [N] nie, [] all
   FILTER.PR_A:='';
:: 2.Dostepny do rejestracji [T] tak, [N] nie, [] all
   FILTER.PR_DOREJ:='';
:: 3.Wykonano juz cala ilosc [T] tak, [N] nie, [] all
   FILTER.PR_OK:='';
:: 4.Zgloszony problem       [T] tak, [N] nie, [] all
   FILTER.PR_PROB:='';
   exec('filter','prod_rej');

   PROD_REJ.cntx_psh();
   PROD_REJ.f_first();

   _ok:=1;

   {? ~exec('czyStartProdRej','ekioski',1)
   ||
      eSelect.wer_rej:='EWER_REJ';
      eLevel.up(PROD_REJ,eSelect.wer_rej,'IDENT_ZGP',"params_exec('display_4rej','prod_rej')");

::    Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
      'WYLOGUJ'@;
      _before:="
         exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
         exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
         exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

         exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
         exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
::       filtr
         exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
::       info
         exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

         _tab:=exec('elements_menuFun_table','ekioski');
         exec('load','#desktop','ctr_menu_fun','ekiosk_menu_fun.dsk',,,,,_tab,1);

::       Niewidoczny przycisk START
         {? exec('upr_pracownik','ekioski')=0 | PROD_REJ.ZL().STAN<>'O' | PROD_REJ.KOOP='T'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_start@menu_fun',0)
         ?};

::       Niewidoczny przycisk WYKONANIE
         {? exec('upr_pracownik','ekioski')=0 | PROD_REJ.ZL().STAN<>'O' | PROD_REJ.KOOP='T'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_start_rej@menu_fun',0)
         ?};

::       Niewidoczny przycisk DOKUMENTACJA
         {? exec('get','#params',8708,,OPERATOR.USER)='N'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_doc@menu_fun',0)
         ?};

::       Niewidoczny przycisk NARZĘDZIA
         {? exec('get','#params',8714,,OPERATOR.USER)='N'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_tool@menu_fun',0)
         ?};

::       Niewidoczny przycisk MATERIAŁY
         {? exec('get','#params',8709,,OPERATOR.USER)='N'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_mater@menu_fun',0)
         ?};

::       Niewidoczny przycisk PRZYDZIEL PRACOWNIKA
::       Niewidoczny przycisk PRZYDZIEL BRYGADĘ
         exec('set_visible','#desktop','','ctr_menu_fun','btn_prac@menu_fun',0);
         exec('set_visible','#desktop','','ctr_menu_fun','btn_bryg@menu_fun',0);

::       Niewidoczny przycisk PROBLEM
         {? exec('upr_problem','zl_wkj')=0 | PROD_REJ.ZL().STAN<>'O'
         || exec('set_visible','#desktop','','ctr_menu_fun','btn_problem@menu_fun',0)
         ?};

::       Niewidoczny przycisk SPOSÓB REJESTRACJI
         exec('set_visible','#desktop','','ctr_menu_fun','btn_sprej@menu_fun',0);

         grp_disp(PROD_REJ,eSelect.wer_rej,0,1);
         ~~
      ";

      _grp:=USERS.grp_make('Operacja'@,_before,'qproduzpg',,,,,,'jterm');
      exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
      USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
      USERS.grp_sel(_grp,PROD_REJ,eSelect.wer_rej,,"exec('setBtn','ekioski')",,,{? VEK.DPI=96 || 19 || 16 ?},"exec('setBtn','ekioski')",,,,'maximized',,1);
      USERS.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
      exec('create','#desktop',USERS,'ctr_menu_fun',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
      USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
      exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

      USERS.win_sel(_grp);
      USERS.select();
      eLevel.down()

   || exec('btnc_koniec','ekioski',_d)
   ?};

   PROD_REJ.cntx_pop();
   ZGP.cntx_pop()
?};
~~


\ident_zgp_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('ident_zgp_a','ekioski');
_args.SORT:='';
{? VEK.PROD_REJ
|| _args.WHERE:=' PROD_REJ.REFERENCE=\''+$VEK.PROD_REJ+'\' '
|? VEK.ZGP & ZGP.get()
|| _args.WHERE:='(PROD_REJ.ZGP=\''+$ZGP.ref()+'\' or PL_OPER.ZGP=\''+$ZGP.ref()+'\') '
?};
_args.JOIN:='left join PL_OPER using (PROD_REJ.PL_OPER,PL_OPER.REFERENCE) ';
_args.TAB:=0;
_args.FILTR_ZL:=1;
_args.FILTR_PL:=1;
_args.FILTR_PX:=1;
exec('rejestracja','prod_rej',_args);
~~


\ident_zgp_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('args_4guid','zl_wyk');
_args


\rozpOper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: sprawdzenie i obsługa rozpoczętych operacji
::   WE: [_a] - zwracać tylko liczbę dostępnych operacji (bez wyświetlania panelu): 1 - tak, [0] - nie
::----------------------------------------------------------------------------------------------------------------------
_count_only:={? var_pres('_a')=type_of(0) || _count_only:=_a || 0 ?};
_count:=0;

_border:=exec('rozp_oper_border','prod_rej');

{? _count_only
|| _count:=exec('rozp_oper_load','prod_rej',~~,VEK.INIT_ODD,VEK.A_WYD);
   return(_count)
|| VAR_DEL.delete('vvar');
   vvar:=obj_new('tab','add','grp','win','data','godz','mind','minj','STM_STAMP','ETM_STAMP','exit','selected');

   vvar.STM_STAMP:=exec('create','#tm_stamp',date(),time());
   vvar.exit:=1;
   vvar.ETM_STAMP:=vvar.STM_STAMP;

   vvar.selected:=obj_new('PB','ZL','PL','PX','DOREJ');
   vvar.selected.PB:=vvar.selected.DOREJ:='N'; vvar.selected.ZL:=vvar.selected.PL:=vvar.selected.PX:='T';

   vvar.tab:=exec('rozp_oper_tab','prod_rej');
   _count:=exec('rozp_oper_load','prod_rej',vvar.tab,VEK.INIT_ODD,VEK.A_WYD)
?};

vvar.win:=vvar.tab.mk_sel('Rozpoczęte operacje'@,,0,'varpracout',0,0,20,,'P');
vvar.tab.win_fld(vvar.win,,'N',,,18,,1,'Pracownik/brygada'@);
vvar.tab.win_fld(vvar.win,,'C',,,15,,1,'Czas rozpoczęcia'@);
vvar.tab.win_fld(vvar.win,,'CO',,,45,,1,'Co wykonuje'@);
vvar.tab.win_fld(vvar.win,,'SRODZ',,,-5,,,'Rodzaj operacji'@);
vvar.tab.win_fld(vvar.win,,'DOREJ',,,-10,,1,'Do rejestracji'@,,,2,,"'T'","'N'");
_formula:=$("
   _tab:=cur_tab(1,1);
   {? _tab.PROBKLAS=exec('prob_class_blocking','zl_wkj')
   || Color.fnd_kol('PROD_REJ#01#06')
   |? _tab.PROBKLAS=exec('prob_class_suspensing','zl_wkj')
   || Color.fnd_kol('PROD_REJ#01#03')
   |? _tab.PROBKLAS=exec('prob_class_information','zl_wkj')
   || Color.fnd_kol('PROD_REJ#01#05')
   |? exec('create','#tm_stamp')-_tab.T<"+$_border+"*exec('hour','#tm_stamp')
   || ''
   || exec('findtmp2','#color')
   ?}
");
vvar.tab.win_act(vvar.win,,'Rekord',,,,_formula);
_formula:=$("
   exec('legenda','color',
      '$TAB_TYMCZ#01#02$Operacje rozpoczęte wcześniej niż %1 godzin temu.'@['"+$_border+"'],
      'PROD_REJ#01#03','PROD_REJ#01#05','PROD_REJ#01#06'
   )
");
vvar.tab.win_act(vvar.win,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@; 'Zakończ'@; 'Usuń'@; 'Anuluj'@;
_before:="
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',1);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);
:: logout
   exec('set_visible','#desktop','','ctr_menu_nav','btn_logout@menu_nav',0);

   _tab:=exec('elements_table','#desktop');
   _tab.blank(); _tab.ID_SYS:='btn_end@pracout'; _tab.NAME:='Zakończ'@; _tab.add();
   _tab.blank(); _tab.ID_SYS:='btn_del@pracout'; _tab.NAME:='Usuń'@; _tab.add();
   _tab.blank(); _tab.ID_SYS:='btn_cancel@pracout'; _tab.NAME:='Anuluj'@; _tab.add();
   exec('load','#desktop','ctr_pracout','ekiosk_menu_logout.dsk',,,,,_tab,1);

:: Niewidoczne przyciski ZAKOŃCZ i USUŃ
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_pracout','btn_register@pracout',0);
      exec('set_visible','#desktop','','ctr_pracout','btn_del@pracout',0)
   ?};

   grp_disp(vvar.tab,vvar.win,0,1);
   ~~
";
_grp:=vvar.tab.grp_make('Pracownicy zalogowani'@,_before,'vvaroutprac',,,,,,'jterm');
_after_refresh:="
   _dorej:='T';
   {? vvar.tab.DOREJ<>'T'
   || {? PROD_REJ.SRODZ='ZL'
      || {? exec('get','#params',500631,2)='T' || _dorej:='N' ?}
      |? PROD_REJ.SRODZ='PL'
      || {? exec('get','#params',500632,2)='T' || _dorej:='N' ?}
      |? PROD_REJ.SRODZ='PX'
      || {? exec('get','#params',500633,2)='T' || _dorej:='N' ?}
      ?}
   ?};
   exec('set_visible','#desktop','','ctr_pracout','btn_register@pracout',exec('upr_kierownik','ekioski') & _dorej='T');
   ~~
";
vvar.tab.grp_sel(_grp,,vvar.win,,_after_refresh,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
vvar.tab.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',vvar.tab,'ctr_pracout',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
vvar.tab.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',vvar.tab,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

_display:="
   PROD_REJ.cntx_psh();
   PROD_REJ.prefix();
   {? PROD_REJ.seek(vvar.tab.PROD_REJ,)
   || exec('display_4rej','prod_rej')
   || FUN.info(
         'Zapis nieaktywny.'@+'\n\n'+
         'Należy zweryfikować zapis źródłowy: %1'@[vvar.tab.CO]
      )
   ?};
   PROD_REJ.cntx_pop();
   ~~
";
eLevel.up(vvar.tab,vvar.win,'IDENT_LOGOUT',_display,"exec('filter_rozp_oper','ekioski')");

vvar.tab.win_sel(_grp);

vvar.tab.f_set();
vvar.tab.f_first();
vvar.tab.select();

eLevel.down();

VAR_DEL.delete('vvar');
1


\filter_rozp_oper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Filtr w oknie rozpoczętych operacji
::----------------------------------------------------------------------------------------------------------------------
_choice:=FUN.multichoice(
   'Wybierz zakres:'@,,,90,15,
   {? vvar.tab.P<>0
   || 'text='+'Pracownik: %1'@[vvar.tab.N]+';selected='+vvar.selected.PB
   || 'text='+'Brygada: %1'@[vvar.tab.N]+';selected='+vvar.selected.PB
   ?},
   'text='+'Operacje z przewodników zleceń'@+';selected='+vvar.selected.ZL,
   'text='+'Operacje z planu operacyjnego'@+';selected='+vvar.selected.PL,
   'text='+'Operacje z planu strategicznego'@+';selected='+vvar.selected.PX,
   'text='+'Tylko operacje dostępne do rejestracji'@+';selected='+vvar.selected.DOREJ
);
{? +_choice[1]>0
|| _where:='1=1';
   {? +_choice[2]>0
   || vvar.selected.PB:='T';
      _where+={? vvar.tab.P<>0 || ' and :_a."P"=:_b' || ' and :_a."B"=:_b' ?}
   || vvar.selected.PB:='N'
   ?};
   {? +_choice[3]>0
   || vvar.selected.ZL:='T'
   || _where+=' and :_a."SRODZ"<>\'ZL\'';
      vvar.selected.ZL:='N'
   ?};
   {? +_choice[4]>0
   || vvar.selected.PL:='T'
   || _where+=' and :_a."SRODZ"<>\'PL\'';
      vvar.selected.PL:='N'
   ?};
   {? +_choice[5]>0
   || vvar.selected.PX:='T'
   || _where+=' and :_a."SRODZ"<>\'PX\'';
      vvar.selected.PX:='N'
   ?};
   {? +_choice[6]>0
   || vvar.selected.DOREJ:='T';
      _where+=' and :_a.DOREJ=\'T\''
   || vvar.selected.DOREJ:='N'
   ?};
   vvar.tab.f_set(,,_where,vvar.tab,{? vvar.tab.P<>0 || vvar.tab.P || vvar.tab.B ?});
   grp_disp(vvar.tab,vvar.win)
?};
~~


\usunRozpOper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Usuwa rozpoczętą operację
::----------------------------------------------------------------------------------------------------------------------
{? vvar.tab.ZLGD
|| ZLGD.cntx_psh();
   ZLGD.use(vvar.tab.MZLGD);
   ZLGD.clear();
   {? ZLGD.seek(vvar.tab.ZLGD,)
   || {? ZLGD.GROP<>null()
      || {? exec('zlgd_usun','zl_grop')
         || vvar.tab.del();
            grp_disp(vvar.tab,vvar.win)
         ?}
      || {? exec('zlgd_usun','zl_wyk')>0
         || vvar.tab.del();
            grp_disp(vvar.tab,vvar.win)
         ?}
      ?}
   || vvar.tab.del();
      grp_disp(vvar.tab,vvar.win);
      FUN.info('Zapis został już usunięty.'@)
   ?};
   ZLGD.cntx_pop()

|? vvar.tab.PL_WYK
|| PL_WYK.cntx_psh();
   PL_WYK.prefix();
   {? PL_WYK.seek(vvar.tab.PL_WYK,)
   || {? ~PL_WYK.count()
      || exec('usun_wyk','po_wyk');
         {? ~PL_WYK.seek(vvar.tab.PL_WYK,)
         || vvar.tab.del();
            grp_disp(vvar.tab,vvar.win)
         ?}
      || vvar.tab.del();
         grp_disp(vvar.tab,vvar.win);
         FUN.info('Zapis powiązany — nie można usunąć.'@)
      ?}
   || vvar.tab.del();
      grp_disp(vvar.tab,vvar.win);
      FUN.info('Zapis został już usunięty.'@)
   ?};
   PL_WYK.cntx_pop()

|? vvar.tab.PX_WYK
|| PX_WYK.cntx_psh();
   PX_WYK.prefix();
   {? PX_WYK.seek(vvar.tab.PX_WYK,)
   || {? ~PX_WYK.count()
      || _px_poz:=PX_WYK.PX_POZ;
         exec('px_wyk_usun','px_wyk');
         {? _px_poz<>null()
         ||
::       Odblokowuje pozycję planu
            exec('unblock','px_poz',_px_poz)
         ?};
         {? ~PX_WYK.seek(vvar.tab.PX_WYK,)
         || vvar.tab.del();
            grp_disp(vvar.tab,vvar.win)
         ?}
      || vvar.tab.del();
         grp_disp(vvar.tab,vvar.win);
         FUN.info('Zapis powiązany — nie można usunąć.'@)
      ?}
   || vvar.tab.del();
      grp_disp(vvar.tab,vvar.win);
      FUN.info('Zapis został już usunięty.'@)
   ?};
   PX_WYK.cntx_pop()

?}


\btn_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: symulacja zakończenia pracy pracownika przez kierownika
::----------------------------------------------------------------------------------------------------------------------
VEK.cntx_psh();

{? vvar.tab.P
|| _pracownik:=exec('FindAndGet','#table',P,vvar.tab.P,,"ref()",null());
   _brygada:=null()
|| _pracownik:=exec('FindAndGet','#table',ZLBR,vvar.tab.B,,"P",null());
   _brygada:=exec('FindAndGet','#table',ZLBR,vvar.tab.B,,"ref()",null())
?};

USERS.cntx_psh();
USERS.prefix();
USERS.blank(1);
USERS.EKIOSK='T';
USERS.AKT:='T';
{? _pracownik<>null() & USERS.find_rec()
|| _prod_rej:=null();
   {? vvar.tab.PX_WYK
   || PX_WYK.cntx_psh();
      PX_WYK.prefix();
      {? PX_WYK.seek(vvar.tab.PX_WYK,)
      || PROD_REJ.cntx_psh();
         PROD_REJ.index('PX_POZ');
         PROD_REJ.prefix('PX',PX_WYK.PX_POZ);
         {? PROD_REJ.first()
         || _prod_rej:=PROD_REJ.ref()
         ?};
         PROD_REJ.cntx_pop()
      ?};
      PX_WYK.cntx_pop()
   |? vvar.tab.PL_WYK
   || PL_WYK.cntx_psh();
      PL_WYK.prefix();
      {? PL_WYK.seek(vvar.tab.PL_WYK,)
      || PROD_REJ.cntx_psh();
         {? PL_WYK.PL_OGR<>null()
         || PROD_REJ.index('PL_OGR');
            PROD_REJ.prefix('PL',PL_WYK.PL_OGR);
            {? PROD_REJ.first()
            || _prod_rej:=PROD_REJ.ref()
            ?}
         |? PL_WYK.PL_OPER<>null()
         || PROD_REJ.index('PL_OPER');
            PROD_REJ.prefix('PL',PL_WYK.PL_OPER);
            {? PROD_REJ.first()
            || _prod_rej:=PROD_REJ.ref()
            ?}
         ?};
         PROD_REJ.cntx_pop()
      ?};
      PL_WYK.cntx_pop()
   |? vvar.tab.ZGP<>0
   || _prod_rej:=exec('FindInSet','#table','PROD_REJ','ZGP',vvar.tab.ZGP,'ZL')
   |? vvar.tab.GROPS<>0
   || _prod_rej:=exec('FindInSet','#table','PROD_REJ','GROPS',vvar.tab.GROPS,'ZL')
   ?};

   {? _prod_rej<>null()
   || eSelect.prod_rej:=_prod_rej;
      {? vvar.exit
      ||
::       Podmiana bieżącego pracownika i brygady
         VEK.P:=_pracownik;
         VEK.A_ZLBR:=_brygada;
         _ask:=1;
::       Jak operacja rozpoczęta w innym roku(masce) to ostrzegam
         {? ZLGD.name()<>vvar.tab.MZLGD
         || _ask:=FUN.ask('Operacja została rozpoczęta w innym okresie niż bieżący (data rozp. operacji: %1).\n'
                          'Czy zakończyć wykonanie operacji i zapisać dane do zbioru z %2r?'@
                          [$vvar.tab.D,$(vvar.tab.D~1)])
         ?};
         {? _ask>0
         || PROD_REJ.cntx_psh();
            PROD_REJ.prefix();
            {? PROD_REJ.seek(_prod_rej)
            || {? PROD_REJ.A='T'
               || _can_continue:=1;
                  {? PROD_REJ.GROP<>null()
                  || GROPP.cntx_psh();
                     GROPP.index('GROP');
                     GROPP.prefix(PROD_REJ.GROP);
                     {? GROPP.first()
                     || _zlecenia:='';
                        {!
                        |? {? GROPP.ZGP().NRZLP().ZLEC().STAN<>'O'
                           || _zlecenia+=', '+ZL.SYM;
                              _can_continue:=0
                           ?};
                           GROPP.next()
                        !};
                        {? _can_continue=0
                        || _zlecenia:=2-_zlecenia;
                           {? _zlecenia*','=0
                           || FUN.info(
                                 'W skład grupy wchodzi operacja zlecenia %1, które nie jest otwarte.\n'
                                 'Nie można rejestrować wykonania dla tej grupy.'@[_zlecenia]
                              )
                           || FUN.info(
                                 'W skład grupy wchodzą operacja zleceń %1, które nie są otwarte.\n'
                                 'Nie można rejestrować wykonania dla tej grupy.'@[_zlecenia]
                              )
                           ?}
                        ?}
                     ?};
                     GROPP.cntx_pop()
                  ?};
                  {? _can_continue>0
                  || {? PROD_REJ.SRODZ='ZL' | PROD_REJ.SRODZ='PL' || exec('vartime','ekioski') ?};
                     exec('ident_zgp','ekioski',PROD_REJ.ref())
                  ?}
               || {? PROD_REJ.ZL().STAN='Z'
                  || FUN.info(
                        'Zlecenie %1 jest zamknięte.\nAby zarejestrować wykonanie, należy otworzyć zlecenie.'@
                        [ZL.SYM]
                     )
                  || FUN.info(
                        'Zapis nieaktywny — nie można rejestrować wykonania.'@+'\n\n'+
                        'Należy zweryfikować zapis źródłowy: %1'@[PROD_REJ.OPIS]
                     )
                  ?}
               ?}
            ?};
            PROD_REJ.cntx_pop()
         ?}
      ?}

:: Brak PROD_REJ - pozycja zakończona albo wymagane odtworzenie danych
   || {? vvar.tab.ZGP<>0
      || _zl:=exec('FindAndGet','#table',ZGP,vvar.tab.ZGP,,"ZGP.ZL",null());
         {? _zl<>null()
         || ZL.cntx_psh();
            ZL.prefix();
            {? ZL.seek(_zl)
            || {? ZL.STAN='Z'
               || FUN.info(
                     'Zlecenie %1 jest zamknięte.\nAby zarejestrować wykonanie, należy otworzyć zlecenie.'@
                     [ZL.SYM]
                  )
               || FUN.info(
                     'Zlecenie %1 — należy odtworzyć dane do rejestracji wykonań.'@
                     [ZL.SYM]
                  )
               ?}
            ?};
            ZL.cntx_pop()
         || FUN.emsg('Nie znaleziono operacji.'@+'\n'+'Zgłoś się do administratora.'@)
         ?}
      || FUN.emsg('Nie znaleziono operacji.'@+'\n'+'Zgłoś się do administratora.'@)
      ?}
   ?};

:: Sprawdzenie wykonania i ew. usunięcie rekordu vvar.tab
   {? vvar.tab.ZLGD
   || ZLGD.cntx_psh();
      ZLGD.use(vvar.tab.MZLGD);
      ZLGD.clear();
      {? ZLGD.seek(vvar.tab.ZLGD,) & ZLGD.ZAK='T'
      || vvar.tab.del();
         grp_disp(vvar.tab,vvar.win)
      ?};
      ZLGD.cntx_pop()

   |? vvar.tab.PL_WYK
   || PL_WYK.cntx_psh();
      PL_WYK.prefix();
      {? PL_WYK.seek(vvar.tab.PL_WYK,) & PL_WYK.ENDD<>null()
      || vvar.tab.del();
         grp_disp(vvar.tab,vvar.win)
      ?};
      PL_WYK.cntx_pop()

   |? vvar.tab.PX_WYK
   || PX_WYK.cntx_psh();
      PX_WYK.prefix();
      {? PX_WYK.seek(vvar.tab.PX_WYK,) & PX_WYK.ZAK='T'
      || vvar.tab.del();
         grp_disp(vvar.tab,vvar.win)
      ?};
      PX_WYK.cntx_pop()

   ?}

|| FUN.error(
      'Nie znaleziono użytkownika skojarzonego z pracownikiem lub brygadzistą.'@+
      '\n'+
      'Zgłoś się do administratora.'@
   )
?};
USERS.cntx_pop();
VEK.cntx_pop();
::sel_exit();
1


\vartime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: formula zmieniajaca czas zakończenia operacji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
vvar.data:=date();
_time:=time();

vvar.godz:=_time~1;
vvar.mind:=#(1+form(_time~2,-2));
vvar.minj:=#(form(_time~2,-2)+1);

_ctr_id:=exec('create','#desktop',
   SYSLOG,'ctr_var_time',,{? VEK.DPI=96 || 21 || 18 ?},{? VEK.DPI=96 || 76 || 63 ?},
   'Zmiana czasu zakończenia operacji'@,,'normal',,14,6
);
SYSLOG.win_ctr(_ctr_id);

_before:="
   _tab:=exec('elements_identTime_table','ekioski');
   exec('load','#desktop','ctr_var_time','ekiosk_ident_time.dsk',,,,,_tab,1);
   _pulpit:='ctr_var_time';
   exec('set_value','#desktop','',_pulpit,'DATA@panel',form(vvar.data,,2));
   exec('set_value','#desktop','',_pulpit,'GODZINY@panel',$vvar.godz);
   exec('set_value','#desktop','',_pulpit,'DM@panel',$vvar.mind);
   exec('set_value','#desktop','',_pulpit,'JM@panel',$vvar.minj);
   ~~
";
_win_id:='id_okno_ident_vartime';
_ret:=SYSLOG.control(_win_id,'modal=false,pack=false',_before);
_ret


\data_plus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: na dodanie dnia
::----------------------------------------------------------------------------------------------------------------------
{? vvar.data+1>date()
|| FUN.emsg('Nie można raportować w przyszłość.'@)
|| vvar.data+=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'DATA@panel',form(vvar.data,,2));
~~


\data_minus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: na dodanie dnia
::----------------------------------------------------------------------------------------------------------------------
{? vvar.data-1<vvar.tab.D
|| FUN.emsg('Data nie może być wcześniejsza niż data rozpoczęcia operacji.'@)
|| vvar.data-=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'DATA@panel',form(vvar.data,,2));
~~


\godz_plus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: dodawanie godzin
::----------------------------------------------------------------------------------------------------------------------
{? vvar.godz+1>23
|| vvar.godz:=0
|| vvar.godz+=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'GODZINY@panel',$vvar.godz);
~~


\godz_minus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: odejmowanie godzin
::----------------------------------------------------------------------------------------------------------------------
{? vvar.godz-1<0
|| vvar.godz:=23
|| vvar.godz-=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'GODZINY@panel',$vvar.godz);
~~


\dmin_plus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: dodawanie min dziesiatkami
::----------------------------------------------------------------------------------------------------------------------
{? vvar.mind+1>5
|| vvar.mind:=0
|| vvar.mind+=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'DM@panel',$vvar.mind);
~~


\dmin_minus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: odejmowanie min dziesiatkami
::----------------------------------------------------------------------------------------------------------------------
{? vvar.mind-1<0
|| vvar.mind:=5
|| vvar.mind-=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'DM@panel',$vvar.mind);
~~


\jmin_plus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: dodawanie min jednosci
::----------------------------------------------------------------------------------------------------------------------
{? vvar.minj+1>9
|| vvar.minj:=0
|| vvar.minj+=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'JM@panel',$vvar.minj);
~~


\jmin_minus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: odejmowanie min jednosci
::----------------------------------------------------------------------------------------------------------------------
{? vvar.minj-1<0
|| vvar.minj:=9
|| vvar.minj-=1
?};
_pulpit:='ctr_var_time';
exec('set_value','#desktop','',_pulpit,'JM@panel',$vvar.minj);
~~


\zatwierdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: sprawdzenie czy wprowadzone dane sa poprawne
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
:: moment startu operacji (z dokładnością do sekundy)
_stm_stamp:=exec('create','#tm_stamp',vvar.tab.D,vvar.tab.TIME);

:: proponowany czas (z dokładnością do minuty)
_time:=time(vvar.godz,(10*vvar.mind+vvar.minj),0);
_etm_stamp:=exec('create','#tm_stamp',vvar.data,_time);

:: punkt końcowy (obecna chwila - wyrównanie do najbliższej minuty z dokładnością do sekundy)
vvar.STM_STAMP:=exec('create','#tm_stamp',date(),time((time()+time(0,1,))~1,(time()+time(0,1,))~2,0));
{? _stm_stamp<=_etm_stamp & _etm_stamp<=vvar.STM_STAMP
|| vvar.ETM_STAMP:=_etm_stamp;
   sel_exit();
   1
|| FUN.emsg(
      'Wprowadzona data jest niepoprawna — powinna być z zakresu:\n'
      'Start: %1 %2\n'
      'Koniec: %3 %4\n\n'
      'Twoja propozycja: %5 %6'@
      [form(vvar.tab.D),form(vvar.tab.TIME,,5),
       form(exec('tm_stamp2date','#tm_stamp',vvar.STM_STAMP)),form(exec('tm_stamp2time','#tm_stamp',vvar.STM_STAMP),,5),
       form(vvar.data),form(_time,,)
      ]
   );
   0
?}


\user_configurate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Konfiguracja uwierzytelnienia użytkownika na e-kioskach - formuła wspólna
::----------------------------------------------------------------------------------------------------------------------
{? USERS.EKIOSK='T' & USERS.OSOBA<>null()
|| _new_user:=0
|| _new_user:=1
?};

_red:=USERS.mk_edit('Użytkownik e-kiosku'@,,'userkiosk');
USERS.win_esep(_red,'Użytkownik'@);
USERS.win_efld(_red,,'KOD',,,30,,1);
USERS.win_efld(_red,,'DANE',,,30,,1);
USERS.win_esep(_red,'Osoba'@);
USERS.win_efld(_red,,'OSOBA','NAZWISKO','OSOBA',27,,0);
USERS.efld_opt(_red,'mark=1',,'OSOBA','NAZWISKO');
USERS.win_efld(_red,OSOBA,'PIERWSZE',,,30,,1);
USERS.win_esep(_red,'Dane logowania'@);
USERS.win_efld(_red,,'IP',,,,,1,'Identyfikator (kod kreskowy)'@);
USERS.win_ebtn(_red,'text=%1,display=1,align=begin'['Druku&j'@],"exec('drukUserEtyk','ekioski');''");
USERS.win_ebtn(_red,'text=%1,display=1,align=begin'['&Etykieta'@],"exec('etykieta','param_wydr','USERS');''");
USERS.win_esep(_red,'Parametry wydruku z urządzenia'@);
USERS.win_efld(_red,URZ_URZ,'URZ','NAZWA','URZKAT',27,,0,'Drukarka'@);
USERS.win_efld(_red,URZ_URZ,'URZ_LAB','KOD','URZ_LAB',27,,0,'Wzorzec etykiety'@);
_formula:="
   {? FUN.ask('Czy wygenerować nowy identyfikator?'@)
   || _code:=exec('gen_code_id','ekioski');
::    Aktualizowane tylko pole z identyfikatorem pracownika
      USERS.cntx_psh();
      USERS.get();
      USERS.IP:=_code;
      {? USERS.put()
      || USERS.cntx_pop();
::       Przepisanie id pracownika do bufora
         USERS.IP:=_code
      || USERS.cntx_pop()
      ?}
   ?};
   ''
";
USERS.win_ebtn(_red,'text=%1,display=1,align=begin'['Generuj ID'@],_formula);
exec('ok_esc','#window',USERS,_red);
USERS.win_edit(_red);
USERS.OSOBA();

_valid:="_result:='';
         _result:=__CHK.record(USERS,,'OSOBA');
         {? _result=''
         || {? USERS.OSOBA<>null() & exec('_osoba_unique','users',USERS.OSOBA,USERS.ref())=0
            || _msg:='Wskazana osoba [%1] jest już przypisana do innego użytkownika.'@
                  [USERS.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE];
               FUN.emsg(_msg);
               _result:='OSOBA'
            ?}
         ?};
         _result
        ";

{? _new_user
|| {? USERS.edit(_valid)
   || USERS.EKIOSK:='T';
      USERS.put()
   ?}
|| USERS.display()
?};
~~


\user_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Konfiguracja uwierzytelnienia użytkownika na e-kioskach
::----------------------------------------------------------------------------------------------------------------------
exec('user_configurate','ekioski');
~~


\user_activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Aktywowanie uwierzytelnienia na e-kioskach
::----------------------------------------------------------------------------------------------------------------------
{? USERS.OSOBA<>null() & USERS.IP<>''
|| USERS.EKIOSK:='T';
   USERS.put()
|| exec('user_configurate','ekioski')
?};
~~


\user_deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Dezaktywowanie uwierzytelnienia na e-kioskach
::----------------------------------------------------------------------------------------------------------------------
USERS.EKIOSK:='N';
USERS.put();
~~


\user_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Usunięcie uwierzytelniania na e-kioskach
::----------------------------------------------------------------------------------------------------------------------
{? USERS.OSOBA<>null() | USERS.IP<>'' | USERS.EKIOSK='T'
|| {? FUN.ask(
         'Czy na pewno chcesz usunąć wszystkie dane dotyczące uwierzytelniania na e-kioskach dla użytkownika %1?'@
         [USERS.KOD]
      )
   || {? USERS.MOBIL<>'T' || USERS.IP:='' ?};
      USERS.EKIOSK:='N';
      {? USERS.put()
      || EANX.IDURZ:=USERS.uidref();
         URZ_URZ.index('IDURZ');
         URZ_URZ.prefix(EANX.IDURZ);
         {? URZ_URZ.first() || {! |? URZ_URZ.del() !} ?}
      ?}
   ?}
?};
~~


\user_active
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czy jest aktywne uwierzytelnianie na e-kioskach?
::   WE: _a - USERS.ref()
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('FindAndGet','#table',USERS,_a,,"EKIOSK='T'",0);
_result


\user_present
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czy jest skonfigurowane uwierzytelnianie na e-kioskach?
::   WE: _a - USERS.ref()
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('FindAndGet','#table',USERS,_a,,"OSOBA<>null() & IP<>''",0);
_result


\upr_brygadzista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czy operator jest brygadzistą (ma uprawnienia do czynności konfigurowania brygad ZWS_PAR_TBRG)
::----------------------------------------------------------------------------------------------------------------------
exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_TBRG')


\upr_kierownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czy operator jest kierownikiem (ma uprawnienia do czynności zarządzania TTE_WYK_DWBZ)
::----------------------------------------------------------------------------------------------------------------------
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWBZ')


\upr_pracownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czy operator jest pracownikiem (ma uprawnienia do rejestracji wykonań)
::----------------------------------------------------------------------------------------------------------------------
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL') |
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPO') |
exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWPS')


\rec_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wyświetla informacje dodatkowe o rekordzie
::----------------------------------------------------------------------------------------------------------------------
eLevel.display();
~~


\win_kalendarz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Tworzy okno selekcji kalendarzy
::----------------------------------------------------------------------------------------------------------------------
_wer:=KAL_NAZW.mk_sel('Kalendarze'@,,0,'kalendarze');
KAL_NAZW.win_fld(_wer,,'NAZWA');
KAL_NAZW.win_sel(_wer);
_wer


\kal_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wybór kalendarza
::   WY: KAL_NAZW.ref()
::----------------------------------------------------------------------------------------------------------------------
_kal_nazw:=null();
KAL_NAZW.cntx_psh();

eSelect.wer_kal:=exec('win_kalendarz','ekioski');
eLevel.up(KAL_NAZW,eSelect.wer_kal,'KAL_NAZW');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@; 'Wybierz'@;
_before:="
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

   exec('load','#desktop','ctr_menu_ten','ekiosk_menu_ten.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_ten','btn_chooce@menu_ten','Wybierz'@);
   ~~
";
_grp:=KAL_NAZW.grp_make('Kalendarze'@,_before,'',0,0,,);
KAL_NAZW.grp_sel(_grp,,eSelect.wer_kal,,,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
KAL_NAZW.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',KAL_NAZW,'ctr_menu_ten',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
KAL_NAZW.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',KAL_NAZW,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

KAL_NAZW.index('KAL_CZES');
KAL_NAZW.prefix(REF.FIRMA,'N');
KAL_NAZW.win_sel(_grp);
{? KAL_NAZW.select(,1,10) & eSelect.key_Esc=0
|| _kal_nazw:=KAL_NAZW.ref()
?};

KAL_NAZW.cntx_pop();

eLevel.down();

_kal_nazw


\prob_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Problem opisowo
::----------------------------------------------------------------------------------------------------------------------
{? ZAKR.S='T' || 'Problemy zgłoszone'@
|? ZAKR.S='R' || 'Problemy rozwiązane'@
|? ZAKR.S=''  || 'Problemy wszystkie'@
              || ''
?}


\work_kap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.14]
:: OPIS: Startuje pracę z widokiem ograniczonym tylko do PROD_REJów które mają karty pracy dla
::       bieżącego pracownika lub jego brygady
::   WE: [_a] - zwracać tylko liczbę dostępnych kart pracy (bez wyświetlania panelu): 1 - tak, [0] - nie
::       [_b] - tabela z refami rekordów PROD_REJ, wynik funkcji "exec('work_end_tab','ekioski')"
::   WY: ~~ lub liczba dostępnych kart prac
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_count_only:={? var_pres('_a')=type_of(0) || _count_only:=_a || 0 ?};
_tab_end:={? var_pres('_b')>100 || _b || ~~ ?};
_twrkplc:=VEK.TWRKPLC;
VEK.TWRKPLC:=null();
_res:=exec('work_rej','ekioski',,,VEK.P,VEK.A_ZLBR,_count_only,_tab_end);
VEK.TWRKPLC:=_twrkplc;
_res


\zlbr_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wyświetla nagłówek brygady
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| exec('uni_display','#desktop',ZLBR,'EK_PRJ','Brygada'@,20,4,'brygada')
?};
~~


\npu_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Wyświetla dane NPU
::----------------------------------------------------------------------------------------------------------------------
{? TACTTLS.get()
|| _par:=TACTTLS.NRK().TYP().PAR;
   exec('uni_display','#desktop',TACTTLS,'EK_'+_par,'Dane N-P-U'@,16,3,'npu'+(-_par))
?};
~~


\menu_filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Uruchamia funkcję filtrującą
::----------------------------------------------------------------------------------------------------------------------
eLevel.filter();
~~


\zlbr_filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Ustawia filtr w oknie brygad
::----------------------------------------------------------------------------------------------------------------------
_choice:=FUN.choice('Zakres wyświetlanych brygad'@,,'Aktywne'@,'Nieaktywne'@,'Niedynamiczne'@,'Wszystkie'@);
{? _choice=1
|| ZLBR.f_set(,,'ZLBR.AKT=\'T\'')
|? _choice=2
|| ZLBR.f_set(,,'ZLBR.AKT=\'N\'')
|? _choice=3
|| ZLBR.f_set(,,'ZLBR.DYNAMIC=\'N\'')
|? _choice=4
|| ZLBR.f_clear()
?};
grp_disp(ZLBR,eSelect.wer_zlbr,0,1);
~~


\blank_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Czyści pole, które ma aktualnie focus w podanej kontrolce
::   WE: _a - identyfikator kontrolki w oknie
::----------------------------------------------------------------------------------------------------------------------
_ctr:=_a;
_fld:=exec('get_focus','#desktop','',_ctr);
_value:=exec('get_value','#desktop','',_ctr,_fld);
{? _value*':'=3 || _new_value:='  :  :  ' || _new_value:='' ?};
exec('set_value','#desktop','',_ctr,_fld,_new_value);
~~


\grop_potw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Buduje okinko potwierdzenia operacji grupowej
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_tab:=ProdRej.GROPP.TAB;

_wer:=_tab.mk_sel('Potwierdzenie wykonania grupy operacji'@,,0,'rozpiszgrope',20,10);
_tab.win_fld(_wer,,'ZGP_OPIS',,,20,,1,'Pozycja przewodnika'@);
_tab.win_fld(_wer,,'KTM',,,10,,1,'Produkt'@);
_tab.win_fld(_wer,,'JM',,,4,,1,'jm'@);
_tab.win_fld(_wer,,'IL',,,-13,ST.DOKL,1,'Ilość planowana'@);
_tab.win_fld(_wer,,'IL_WYK',,,-13,ST.DOKL,,'Ilość wykonana'@);
_tab.win_fld(_wer,,'BRAKI_R',,,-11,,,'Rodzaj braku'@);
_tab.win_fld(_wer,,'PARSYM',,,15,,,'Partia'@);
_tab.win_fld(_wer,,'CZASM',,,-9,4,1,'Czas [min]'@);

_tab.index(ProdRej.GROPP.NdxEkiosk);

eSelect.wyn_OK:=0;
eSelect.wer_gropp:=_wer;

_display:="
   _tab:=cur_tab(1,1);
   ZGP.cntx_psh(); ZGP.prefix();
   {? ZGP.seek(_tab.ZGP_REF)
   ||
      {? ZGP.TPZ='T'
      || ZGP.index('UID');
         ZGP.prefix(ZGP.UID_TPZ);
         ZGP.first();
         _tpz:=1
      || _tpz:=0
      ?};
      VAR.A_ZLEC:=ZGP.ZL;
      exec('przp_dsp','zl_guide');
      exec('zgp_efld_opt','zl_guide');
      {? VEK.TERM='T'
      || exec('uni_display','#desktop',ZGP,ZGP.win_edit('?'),'Pozycja przewodnika'@,0,0,'zgp1','maximized')
      || ZGP.display(,,,{? _tpz || 'NTIME1' || '' ?})
      ?}
   ?};
   ZGP.cntx_pop();
   ~~
";

eLevel.up(_tab,eSelect.wer_gropp,'GROP_POTW',_display);

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr - wyłączony
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info - włączone
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);
:: Rodzaj braku
   _data_id:=$SYSLOG.tm_stamp();
   _grop:=exec('FindAndGet','#table',GROPP,ProdRej.GROPP.TAB.GROPP,,\"GROP\",null());
   _ref:=exec('FindAndGet','#table',GROP,_grop,,\"TTOPER\",null());
   exec('braki_r_filter','braki',,'T',$_ref);
   exec('fetch_data','#desktop',_data_id,'ctr_grop_potw',exec('cmb_braki_r','ekioski'),'SYM,COMBO','');
   exec('grab_data','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',_data_id);

   _tab:=exec('elements_gropPotw_table','ekioski');
   exec('load','#desktop','ctr_grop_potw','ekiosk_grop_potw.dsk',,,,,_tab,1);
   grp_disp(ProdRej.GROPP.TAB,eSelect.wer_gropp,0,1);
   ~~
";
_grp:=_tab.grp_make('Potwierdzenie wykonania grupy operacji'@,_before,'rozpiszgrupeo',,,,,,'jterm');
exec('create','#desktop',_tab,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
_tab.grp_splt(_grp,,'horizontal','pozioma_1');
:: -----------------------------------------------
_after_refresh:="
   {? grp_empty(ProdRej.GROPP.TAB,eSelect.wer_gropp)
   || exec('set_visible','#desktop','','ctr_grop_potw','',0)
   || exec('set_value','#desktop','','ctr_grop_potw','fld_il@grop_potw',$ProdRej.GROPP.TAB.IL_WYK);
      exec('set_value','#desktop','','ctr_grop_potw','fld_il_brak@grop_potw'
         ,$(ProdRej.GROPP.TAB.IL-ProdRej.GROPP.TAB.IL_WYK));
::      exec('set_visible','#desktop','','ctr_grop_potw','fld_il_brak@grop_potw',0);
      {? ProdRej.GROPP.TAB.PARTY>0
      ||  exec('set_visible','#desktop','','ctr_grop_potw','combo_partia@grop_potw',1);
          _zgh:=exec('FindAndGet','#table',ZGP,ProdRej.GROPP.TAB.ZGP_REF,,\"ZGP.NRZLP\",null);
         {? _zgh<>null()
         || ZPARN.index('ZGH');
            ZPARN.prefix(_zgh);
            {? ZPARN.first()
            || _data_id:=$SYSLOG.tm_stamp();
               exec('fetch_data','#desktop',_data_id,'ctr_grop_potw',exec('cmb_zparn','ekioski'),'SYM,COMBO','');
               exec('grab_data','#desktop','','ctr_grop_potw','combo_partia@grop_potw',_data_id);
               exec('set_value','#desktop','','ctr_grop_potw','combo_partia@grop_potw',ProdRej.GROPP.TAB.PARSYM)
            || exec('set_value','#desktop','','ctr_grop_potw','combo_partia@grop_potw','')
            ?}
         ?}
      || exec('set_visible','#desktop','','ctr_grop_potw','combo_partia@grop_potw',0)
      ?};
::    Rodzaj braku
      {? ProdRej.GROPP.TAB.IL_BRAK>0
      || exec('set_enabled','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',1);
         exec('set_value','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',ProdRej.GROPP.TAB.BRAKI_R)
      || exec('set_enabled','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',0);
         exec('set_value','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw','')
      ?};
      ~~
   ?}
";
_tab.grp_sel(_grp,_tab,eSelect.wer_gropp,,_after_refresh,,,{? VEK.DPI=96 || 10 || 9 ?},,,,,'maximized',,1);
_tab.grp_splt(_grp,,'horizontal','pozioma_3',0);
:: -----------------------------------------------
_before:="
   {? grp_empty(ProdRej.GROPP.TAB,eSelect.wer_gropp)
   || exec('set_visible','#desktop','','ctr_grop_potw','',0)
   || ~~
   ?}
";
_after:="
   ~~
";
_win1:=exec('create','#desktop',_tab,'ctr_grop_potw',_grp,{? VEK.DPI=96 || 14 || 11 ?},eSelect.grp_width,,,,,,,_before,_after);
_tab.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
_win2:=exec('create','#desktop',_tab,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

_result:=0;
_tab.win_sel(_grp);
_tab.first();
{? _tab.select() & eSelect.wyn_OK>0
|| do();
   ZLGD.POTW:='T';
   {? ZLGD.put()
   || _result:=1;
      exec('add_akord_4grop','zl_grop',ZLGD.ref());
      exec('end_akord_4grop','zl_grop',ZLGD.ref())
   ?};
   end()
?};

eLevel.down();

_result


\btn_enter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Obsługa przycisku 'Enter' w oknie potwierdzania grup operacji
::   WE: [_a] - obsługa wywołana po zmianie partii z comboboxa (pomijam walidacje ilości): [0] - nie, 1 - tak
::----------------------------------------------------------------------------------------------------------------------
_czy_zparn:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? ~_czy_zparn
|| _il:=#gsub(exec('get_value','#desktop','','ctr_grop_potw','fld_il@grop_potw'),',','.');
   _il:=_il$ProdRej.GROPP.TAB.DOKL;
   exec('set_value','#desktop','','ctr_grop_potw','fld_il@grop_potw',$(_il))
?};
_zparn:=exec('get_value','#desktop','','ctr_grop_potw','combo_partia@grop_potw');
_braki_r:=exec('get_value','#desktop','#:ctr_grop_potw','ctr_grop_potw','combo_braki_r@grop_potw');
_can_continue:=1;
{? ~_czy_zparn
|| {? _il<0
   || FUN.info('Proszę podać ilość większą lub równą zero.'@);
      _can_continue:=0
   |? _il>ProdRej.GROPP.TAB.IL
   || FUN.info('Ilość nie może być większa niż planowana (%1).'@[$ProdRej.GROPP.TAB.IL]);
      _can_continue:=0
   ?}
?};
{? _can_continue>0
|| {? ~_czy_zparn
   || ProdRej.GROPP.TAB.IL_WYK:=_il;
      ProdRej.GROPP.TAB.IL_BRAK:=ProdRej.GROPP.TAB.IL-_il;
      ProdRej.GROPP.TAB.BRAKI_R:=_braki_r
   ?};
   ProdRej.GROPP.TAB.PARSYM:=_zparn;
   {? _zparn<>''
   || {? ZPARN.find_key(ProdRej.GROPP.TAB.PARSYM)
      || ProdRej.GROPP.TAB.ZPARN:=#ZPARN.ref
      || ProdRej.GROPP.TAB.ZPARN:=-1
      ?}
   ?};
   ProdRej.GROPP.TAB.put();
   grp_disp(ProdRej.GROPP.TAB,eSelect.wer_gropp,0)
::   exec('set_value','#desktop','','ctr_grop_potw','fld_il_brak@grop_potw',$(ProdRej.GROPP.TAB.IL-_il))
?};
~~


\btn_potwierdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Obsługa przycisku 'Dalej' w oknie potwierdzania grup operacji
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_msg:='';
{? ProdRej.GROPP.TAB.first()
|| {!
   |?
      {? ProdRej.GROPP.TAB.PARTY>0 & ProdRej.GROPP.TAB.PARSYM=''
      || _result:=0;
         _msg:='Do przewodnika %1 nie przypisano partii.'@[ProdRej.GROPP.TAB.ZGP_OPIS]
      |? ProdRej.GROPP.TAB.PARTY>0 & exec('FindInSet','#table','ZPARN','ZL2', ProdRej.GROPP.TAB.PARSYM,
         exec('FindAndGet','#table',ZGP,ProdRej.GROPP.TAB.ZGP_REF,,"ZGP.ZL",''),"ZPARN.ref()",1,,null)=null()
      || _result:=0;
         _msg:='Do przewodnika %1 przypisano niepoprawną partię.'@[ProdRej.GROPP.TAB.ZGP_OPIS]
      |? ProdRej.GROPP.TAB.IL_BRAK>0 & ProdRej.GROPP.TAB.BRAKI_R='' & exec('get','#params',500635,2)='T'
      || _result:=0;
         _msg:='Do przewodnika %1 nie przypisano rodzaju braku.'@[ProdRej.GROPP.TAB.ZGP_OPIS]
      |? ProdRej.GROPP.TAB.IL_BRAK>0 & ProdRej.GROPP.TAB.BRAKI_R<>''
         & exec('FindInSet','#table','BRAKI_R','KOD',ProdRej.GROPP.TAB.BRAKI_R,,,1,,null)=null
      || _result:=0;
         _msg:='Do przewodnika %1 przypisano niepoprawny rodzaj braku.'@[ProdRej.GROPP.TAB.ZGP_OPIS]
      ?};
      _result & ProdRej.GROPP.TAB.next()
   !}
?};
{? _result
|| eSelect.wyn_OK:=1;
   sel_exit()
|| FUN.emsg(_msg);
   grp_disp(ProdRej.GROPP.TAB,eSelect.wer_gropp,1)
?}


\cmb_zparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Zwraca tabelę tymczasową elementów do combo-boxa do wyboru partii
::       Kontekst wywołania: Założony prefix/filtr na tabelę ZPARN
::----------------------------------------------------------------------------------------------------------------------
{? ZPARN.f_active()=0
|| _zparn:=sql('
      select
         SYM as SYM,
         SYM || '' ['' || to_string(IL) || '']'' as COMBO
      from prefixed_table(ZPARN)
   ')
|| _zparn:=sql('
      select
         SYM as SYM,
         SYM || '' ['' || to_string(IL) || '']'' as COMBO
      from ZPARN join filter_of(ZPARN)
   ')
?};
_zparn


\elements_menuFun_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_fun.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_start@menu_fun';
_tab.NAME:='START'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_start_rej@menu_fun';
_tab.NAME:='WYKONANIE'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_doc@menu_fun';
_tab.NAME:='DOKUMENTACJA'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_tool@menu_fun';
_tab.NAME:='NARZĘDZIA'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_mater@menu_fun';
_tab.NAME:='MATERIAŁY'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_prac@menu_fun';
_tab.NAME:='<html><center>'+gsub('PRZYDZIEL\nPRACOWNIKA'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_bryg@menu_fun';
_tab.NAME:='<html><center>'+gsub('PRZYDZIEL\nBRYGADĘ'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_problem@menu_fun';
_tab.NAME:='PROBLEM'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_sur@menu_fun';
_tab.NAME:='<html><center>'+gsub('POBRANE\nSUROWCE'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_sprej@menu_fun';
_tab.NAME:='<html><center>'+gsub('SPOSÓB\nREJESTRACJI'@,'\n','<br>')+'</html>';
_tab.add();

_tab


\elements_menuEnd_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_end.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='fld_il@menu_end';
_tab.NAME:='Ilość dobra'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_il_brak@menu_end';
_tab.NAME:='Ilość braków'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_od@menu_end';
_tab.NAME:='Od'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_do@menu_end';
_tab.NAME:='Do'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_time@menu_end';
_tab.NAME:='Czas'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_partia@menu_end';
_tab.NAME:='Partia'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_stanowisko@menu_end';
_tab.NAME:='Stanowisko'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_braki_r@menu_end';
_tab.NAME:='Rodzaj braku'@;
_tab.add();

{! _it:=1..5
|! _tab.blank();
   _tab.ID_SYS:='fld_val%1@menu_end'[$_it];
   _tab.NAME:='Wymiar %1'@[$_it];
   _tab.add()
!};

_tab.blank();
_tab.ID_SYS:='btn_register@menu_end';
_tab.NAME:='<html><center>'+gsub('Rejestruj\nwykonanie'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_problem@menu_end';
_tab.NAME:='PROBLEM'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_surowce@menu_end';
_tab.NAME:='Nielimity'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_surowce_lim@menu_end';
_tab.NAME:='Limity'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_calc@menu_end';
::_tab.NAME:='Parametryzowany kalkulator'@;
_tt:=spli_str('KALKULATOR'@);
_name:=''; {! _it:=1.. obj_len(_tt) |! _name+='%1\n'[_tt[_it]] !};
_tab.NAME:='<html>'+gsub(_name,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_bad@menu_end';
_tab.NAME:='<html><center>'+gsub('Rejestruj\nbadanie'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_wyr@menu_end';
_tab.NAME:='<html><center>'+gsub('Rejestracja\nszczegółowa'@,'\n','<br>')+'</html>';
_tab.add();

_tab


\elements_gropPotw_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_grop_potw.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='fld_il@grop_potw';
_tab.NAME:='Ilość dobra'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_il_brak@grop_potw';
_tab.NAME:='Ilość braków'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_braki_r@grop_potw';
_tab.NAME:='Rodzaj braku'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_register@grop_potw';
_tab.NAME:='Akceptuj'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_partia@grop_potw';
_tab.NAME:='Partia'@;
_tab.add();

_tab


\elements_menuBryg_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_bryg.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_new@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Twórz\nnową brygadę'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_work@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Pracuję tą brygadą'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_act@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dezaktywuj\nbrygadę'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_this@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Ten pracownik\nbrygadzistą'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_lst@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dołącz\nz listy'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_cal@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dołącz wg\nkalendarzy'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_card@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dołącz\nza pomocą\nkarty'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_del@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Usuń\npracownika\nz brygady'@,'\n','<br>')+'</html>';
_tab.add();

_tab


\elements_identTime_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_ident_time.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='label@panel';
_tab.NAME:='Zmiana czasu zakończenia operacji'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='zatwierdz@panel';
_tab.NAME:='ZATWIERDŹ'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='anuluj@panel';
_tab.NAME:='ANULUJ'@;
_tab.add();

_tab


\elements_menuPrac_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_prac.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_del@menu_prac';
_tab.NAME:='<html><center>'+gsub('Usuń kartę\npracy'@,'\n','<br>')+'<html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add@menu_prac';
_tab.NAME:='<html><center>'+gsub('Przydziel\npracownika'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_card@menu_prac';
_tab.NAME:='<html><center>'+gsub('Za pomocą\nkarty'@,'\n','<br>')+'</html>';
_tab.add();

_tab


\elements_menuBrygP_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_bryg_p.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_del@menu_bryg_p';
_tab.NAME:='<html><center>'+gsub('Usuń kartę\npracy'@,'\n','<br>')+'<html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add@menu_bryg_p';
_tab.NAME:='<html><center>'+gsub('Przydziel\nbrygadę'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_lst@menu_bryg_p';
_tab.NAME:='<html><center>'+gsub('Dołącz\ndo brygady'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_card@menu_bryg_p';
_tab.NAME:='<html><center>'+gsub('Dołącz\nza pomocą\nkarty'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_del_prac@menu_bryg_p';
_tab.NAME:='<html><center>'+gsub('Usuń\npracownika\nz brygady'@,'\n','<br>')+'</html>';
_tab.add();

_tab


\elements_przyKapIl_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_przy_kap_il.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='fld_ilc@przy_kap_il';
_tab.NAME:='Ilość całkowita'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_ilw@przy_kap_il';
_tab.NAME:='Ilość już wykonana'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_il@przy_kap_il';
_tab.NAME:='Ilość do wykonania'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_assigned@przy_kap_il';
_tab.NAME:='Ilość już przydzielona'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_remained@przy_kap_il';
_tab.NAME:='Ilość pozostała'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_to_assign@przy_kap_il';
_tab.NAME:='Ilość do przydzielenia'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_accept@przy_kap_il';
_tab.NAME:='Zatwierdź'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_close@przy_kap_il';
_tab.NAME:='Zamknij'@;
_tab.add();

_tab


\elements_menuProb_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_prob.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_resolve@menu_prob';
_tab.NAME:='<html><center>'+gsub('ROZWIĄŻ\nPROBLEM'@,'\n','<br>')+'</center></html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_renovation@menu_prob';
_tab.NAME:='<html><center>'+gsub('ZGŁOSZENIE\nREMONTOWE'@,'\n','<br>')+'</center></html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_reported@menu_prob';
_tab.NAME:='ZGŁOSZONE'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_resolved@menu_prob';
_tab.NAME:='ROZWIĄZANE'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_all@menu_prob';
_tab.NAME:='WSZYSTKIE'@;
_tab.add();

_tab


\run_ekiosk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Uruchamia ekiosk - odpala potomnego jterma
::   WE: [_a] - INTEGER - [1]/2 - tryb działania: 1 - uruchamia skypt, 2 - pobiera
::  TAG: <PUBLICZNA>
:: ~OST: INFCOPY
::----------------------------------------------------------------------------------------------------------------------
exec('init','tte');

_mode:=1;
{? var_pres('_a')=type_of(0)
|| _mode:=_a
?};

set_help(exec('set_help','#help','TTE_WYK_EKIOSK'));

_can_continue:=1;

_tab:=AppList.my.tab;

{? sys_name(0)='WINDOWS'
|| _can_continue:=1
|| _can_continue:=0;
   FUN.emsg('Linux nieobsługiwany.'@)
?};

_path:='';
ST.ODDZ:=exec('run_get_oddz','ekioski');
{? _can_continue>0 & ST.ODDZ<>''
||
   _tab.cntx_psh();
   _ndx:=_tab.ndx_tmp('',1,'APP_PAR1',,, 'APP_PAR2',,,'APP_PAR3',,);
   _tab.index(_ndx);

   _tab.prefix(REF.FIRMA().SYMBOL,'EKIOSK',ST.ODDZ,);
   {? _tab.size()>1
   ||
      _wer:=_tab.mk_sel('E-kiosk wybór konfiguracji'@,'P',0,'#ekiosk_conf',1,1,,,'U');
      _tab.win_fld(_wer,,'APP_PAR1'     ,,,-10,,,'Firma'@,0);
      _tab.win_fld(_wer,,'APP_PAR3'     ,,,-10,,,'Oddział'@,0);
      _tab.win_fld(_wer,,'APP_PAR4'     ,,,-10,,,'Wydział'@,0);
      _tab.win_fld(_wer,,'APP_PAR5'     ,,,-10,,,'Maszyna'@,0);

      _fb:="
         sel_exit()
      ";
      _tab.win_act(_wer,0,'Formuła','Wybierz'@@,,,_fb,,1);
      _tab.win_act(_wer,,'Kolejność');
      _tab.win_sel(_wer);
      {? _tab.select()>0
      ||
         {? _can_continue>0 & _mode=2
         ||
            _suffix:='';
            {? _tab.APP_PAR5<>''
            || _suffix:=-_tab.APP_PAR5
            |? _tab.APP_PAR4<>''
            || _suffix:=-_tab.APP_PAR4
            ?};
            _path:=exec('run_dialog_path','ekioski',_suffix);
            {? _path=''
            || _can_continue:=0
            ?}
         ?};
         {? _can_continue>0
         ||
            _script_path:=exec('run_script_generate','ekioski',_tab);
            {? _script_path<>''
            || {? _mode=1
               || exec('run_script','ekioski',_script_path)
               |? _mode=2
               || fcopy('@'+_script_path,'@'+_path,0,0,1)
               ?}
            ?}
         ?}
      ?};
      ~~
   |? _tab.size()=1 & _tab.first()
   ||
      {? _can_continue>0 & _mode=2
      ||
         _suffix:='';
         {? _tab.APP_PAR5<>''
         || _suffix:=-_tab.APP_PAR5
         |? _tab.APP_PAR4<>''
         || _suffix:=-_tab.APP_PAR4
         ?};
         _path:=exec('run_dialog_path','ekioski');
         {? _path=''
         || _can_continue:=0
         ?}
      ?};

      {? _can_continue>0
      ||
         _script_path:=exec('run_script_generate','ekioski',_tab);
         {? _script_path<>''
         || {? _mode=1
            || exec('run_script','ekioski',_script_path)
            |? _mode=2
            || fcopy('@'+_script_path,'@'+_path,0,0,1)
            ?}
         ?}
      ?}
   || exec('run_error','ekioski')
   ?};
   _tab.ndx_drop(_ndx);
   _tab.cntx_pop()
?};
~~


\run_dialog_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Wyświetla dialog z pytaniem gdzie ma być eksportowany skrypt
::   WE: [_a] - suffix do proponowanej nazwy pliku
::   WY: STRING - ścieżka lub '' jeżeli użytkownik zrezygnował
::  TAG: <PUBLICZNA>
:: ~OST: INFEXISTS,INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
_result:='';

_filename:='ekiosk.cmd';
{? var_pres('_a')=type_of('') & _a<>''
|| _filename:='ekiosk_%1'[_a]
?};

ctr_set('!application', 'filechooser','reset');
ctr_set('!application', 'filechooser','setMultiSelectionEnabled',0);
ctr_set('!application', 'filechooser','setFileSelectionMode','FILES_ONLY');
ctr_set('!application', 'filechooser','addDefaultFilter','Pliki cmd', 'cmd');
ctr_set('!application', 'filechooser','setSelectedFile',_filename);

_txt:='Zapis skryptu uruchamiającego e-kiosk'@;
ctr_set('!application', 'filechooser','setDialogTitle',_txt);
_can_continue:=ctr_call('!application', 'filechooser','showSaveDialog');
{? _can_continue>0
|| _result:=ctr_call('!application', 'filechooser','getSelectedFile');
   {? _result<>'' & fexists('@'+_result)>0
   || {? FUN.ask('Plik już istnieje. Nadpisać?'@)=0
      || _result:=''
      ?}
   ?}
?};
_result


\run_script_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Generuje skrypt uruchamiający ekiosk
::   WE: _a - tab_tmp - tabelka z aplikacjami na serwerze, skrypt będzie generowany dla aktualnego rekordu
::   WY: STRING - ścieżka do pliku ze skryptem, lub '' w przypadku porażki
::  TAG: <PRYWATNA>
:: ~OST: INEXEDIR,INFOPEN,INODBCDSN,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
{? exec('interm','#system')
|| FUN.emsg(exec('interm_nacc_msg','#system'));
   return()
?};

_sep:=exec('sep','#file');

_result:='';

_filename:='ekiosk_'+$SYSLOG.tm_stamp()+'.cmd';
{? sys_name(0)='WINDOWS'
|| _filepath:=tmp_dir()+_sep+_filename;
   _file:=fopen('@'+_filepath,'w',0);

   _dsn:=jdbc_dsn();
   _dsn_tab:=spli_str(_dsn,';');
   _asport:='5580';
   _asaddress:='localhost';
   _ascertuse:='0';
   _ascertpth:='';
   {! _it:=1.. obj_len(_dsn_tab)
   |! {? 7+_dsn_tab[_it]='ASPORT=' || _asport:=(7-_dsn_tab[_it])
      |? 10+_dsn_tab[_it]='ASCERTUSE=' || _ascertuse:=(10-_dsn_tab[_it])
      |? 10+_dsn_tab[_it]='ASCERTPTH=' || _ascertpth:=(10-_dsn_tab[_it])
      |? 10+_dsn_tab[_it]='ASADDRESS=' || _asaddress:=(10-_dsn_tab[_it])
      ?}
   !};

   _console:=exec('get','#params',1200,,exec('operatorUser','#users'));
   _ram:=exec('get','#params',1201,,exec('operatorUser','#users'));

::   _mjrun:=exe_dir()+_sep+'mjrun.exe -jterm4k '+_asaddress+':'+_asport;
   _java:='';
   {? _console='T'
   || _java:='java.exe'
   || _java:='javaw.exe'
   ?};
   _scale:=' -Dsun.java2d.uiScale.enabled=false';
   _ram:=' -Xmx'+$_ram+'M';

   _mjrun:=exe_dir()+_sep+'miscw'+_sep+'jrew'+_sep+'bin'+_sep+_java+_scale+_ram+' -jar ';
   _mjrun+=exe_dir()+_sep+'jTerm.jar ';

:: Adres i port
   _mjrun+=_asaddress+':'+_asport;

:: Certyfikat
   {? _ascertuse='1'
   || _mjrun+=' -k\"'+_ascertpth+'\"'
   ?};

:: Grupa
   _mjrun+=' -d -ud -g'+_tab.GRP_IDEN;

:: Aplikacja
   _mjrun+=' -a'+_tab.APP_IDEN;

   {? _file>0
   || _script:='cd /d %%appdata%%\n'
               'cd ..\n'
               'if not exist \"ekiosk\" mkdir \"ekiosk\"\n'
               'set appdata=%%cd%%\\ekiosk\n'
               '%1\n'[_mjrun];
      fwrite(_file,_script);
      _result:=_filepath
   ?};
   fclose(_file)
|| FUN.emsg('Linux nieobługiwany.'@)
?};
_result


\run_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Wyświetla błąd informujący jak należy skonfigurować cluster.cfg żeby uruchomić ekiosk
::  TAG: <PRYWATNA>
:: ~OST: INODBCDSN
::----------------------------------------------------------------------------------------------------------------------
{? FUN.choice('Błąd konfiguracji pliku cluster.cfg.'@,,'Szczegóły'@)=1
||
   {? exec('interm','#system')
   || FUN.emsg(exec('interm_nacc_msg','#system'));
      return()
   ?};

   _dsn:=jdbc_dsn();
   _dsn_tab:=spli_str(_dsn,';');
   _pth_path:='';
   {! _it:=1.. obj_len(_dsn_tab)
   |! {? 4+_dsn_tab[_it]='PTH=' || _pth_path:=(4-_dsn_tab[_it]) ?}
   !};
   _pth_path:=gsub(_pth_path,app_info('pth_name')+'.pth','');
   {? (+_pth_path)>0 & (_pth_path+1)='\\'
   || _pth_path:=_pth_path-1
   ?};

   _grp_id:=app_info('cluster_group');
   _cluster_id:='[%1_ekiosk]\n'[app_info('cluster_ident')];
   _value:=_cluster_id;
   _value+='name = %1\n'[app_info('def_name')];
   _value+='caption = %1 Ekiosk\n'[app_info('cluster_caption')];
   _value+='path=%1\n'[_pth_path];
   _value+='hidden=1\n';
   _value+='app_par1=%1\n'[REF.FIRMA().SYMBOL];
   _value+='app_par2=%1\n'['EKIOSK'];
   _value+='app_par3=%1\n'[ST.ODDZ];
   _value+='app_par4=\n';
   _value+='app_par5=\n\n\n';
   _value+='Uwaga!\nAplikację:\n\n%1_ekiosk\n\nnależy również umieścić w grupie: %2\n\n'[app_info('cluster_ident'),_grp_id];
   _value+='Parametr: %1 można wykorzystać do ustawienia wydziału na e-kiosku\n'@['app_par4'];
   _value+='Parametr: %1 można wykorzystać do ustawienia maszyny na e-kiosku\n'@['app_par5'];
   _msg:='Sekcja do umieszczenia w cluster.cfg'@;
   exec('edit_memo','#edit',_value,_msg,,120,15,,0)
?};
~~


\run_script
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Uruchamia przekazany w argumencie skrypt
::   WE: _a - STRING - ścieżka do pliku
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
:: ~OST: INFERASE,INSYSTEM
::----------------------------------------------------------------------------------------------------------------------
_filepath:=_a;

{? exec('interm','#system')
|| FUN.emsg(exec('interm_nacc_msg','#system'));
   return()
?};

_result:=0;
{? sys_name(0)='WINDOWS'
|| _wait:=exec('get','#params',1202,,exec('operatorUser','#users'));
   {? _wait='T'
   || _result:=system('@'+_filepath,1)
   || _result:=system('@'+_filepath)
   ?};
   {? _result<>0
   || FUN.emsg('Uruchomienie potomnego jTerma zakończyło się błędem i zwróciło wynik: %1'@[$_result])
   ?};
:: Po uruchomieniu usuwam skrypt
   _result:=ferase('@'+_filepath,0)
|| FUN.emsg('Linux nieobługiwany.'@)
?};
_result


\run_get_oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Zwraca odzial
::   WY: STRING - kod oddzialu
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
ODDZ.cntx_psh();
ODDZ.prefix();
{? ODDZ.size()>1
||
   ODDZ.win_sel('SEL');
   {? ODDZ.select()
   || _result:=ODDZ.KOD
   ?}
|? ODDZ.size()=1
|| {? ODDZ.first()
   || _result:=ODDZ.KOD
   ?}
|| FUN.emsg('Brak oddziałów. Uruchomienie e-kiosku niemożliwe.'@)
?};

ODDZ.cntx_pop();
_result


\win_prac_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Tworzy okno wertowania Listy pracowników z tabeli P do użycia jako słownik - z dodanymi klawiszami
::   WY: okno
::----------------------------------------------------------------------------------------------------------------------
_wer:=P.mk_sel('Lista pracowników'@,'P',,,,,15,,'P');
P.win_fld(_wer,,'OSOBA','NAZWISKO',,20,,,'Nazwisko'@);
P.win_fld(_wer,,'OSOBA','PIERWSZE',,18,,,'Imię'@);
P.win_fld(_wer,,'WYDZIAL','SYMBOL',,7,,,'Wydział'@);
P.win_fld(_wer,,'ZA',,,-3);
P.win_fld(_wer,,'F_ZATR','OPIS',,27,,,'Forma zatrudnienia'@);
P.win_fld(_wer,,'DZA',,,-10);
P.win_fld(_wer,,'DZ',,,-10);
P.win_act(_wer,,'Formuła','Wybierz'@@,,,"eSelect.wyn_OK:=1; sel_exit()",,1,,,,'W');
P.win_act(_wer,,'Wyświetl');

:: Tutaj nie zmieniam poziomu, eLevel.up wywołuję bezpośrednio przed wyświetleniem tabeli
::eLevel.up(P,_wer,'PRAC_F3');

_before:="
   exec('load','#desktop','ctr_menu_ten','ekiosk_menu_ten.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_ten','btn_chooce@menu_ten','Wybierz'@);
   exec('set_enabled','#desktop','','ctr_menu_ten','btn_chooce@menu_ten',P.f_size()>0);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
   exec('set_visible','#desktop','','ctr_menu_nav','btn_logout@menu_nav',0);
   ~~
";
_grp:=P.grp_make('Lista pracowników'@,_before,'win_prac_f3',,,,,'maximized');
P.grp_sel(_grp,,_wer,,,,,{? VEK.DPI=96 || 22 || 20 ?},,,,,'maximized');
P.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',P,'ctr_menu_ten',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
P.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',P,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

_grp


\surowce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Funkcja Nielimity - wyświetla okno do rozliczenia surowców nielimitowanych
::   WE: _a - miejsce wywołania:
::            [1] - przy rejestracji wykonania produkcji
::            0 - przy starcie operacji
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? PROD_REJ.SRODZ='PX' || FUN.info('Funkcja niedostępna dla pozycji z planu strategicznego.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');
_where:={? var_pres('_a')=type_of(0) || _a || 1 ?};

{? ~_zgp
|| FUN.info('Pozycja planu nie jest powiązana z pozycją przewodnika.'@);
   return()
?};
_can_continue:=1;

exec('openmask','zl_common',PROD_REJ.ZL);

:: Tworzę środowisko do rozliczania nielimitów
{? _can_continue>0
|| _create:=1;
   _txt:='';
   {? var_pres('__ENV_REJ')>100 || obj_del(__ENV_REJ) ?};
   {? var_pres('_tab')>100 || obj_del(_tab) ?};
   {? var_pres('_tab2')>100 || obj_del(_tab2) ?};
:: Jeżeli wcześniej uzupełniono rozpiskę, to tworzone środowisko na jej bazie
   exec('rej_mat_fill_tmp','ekioski');
   {?  var_pres('__ENV_REJ')>100
   || _create:=0
   ?};
   {? _create
   || exec('env_rej_mat','zl_wyk',1);
      _tab:=__ENV_REJ.TAB;
      _tab2:=__ENV_REJ.TAB_N;
      _tab2.cntx_psh();
      _tab2.index(__ENV_REJ.NDX_N);
      __ENV_REJ.ZGP:=_zgp;
      _bryg:=exec('FindAndGet','#table',ZGP,_zgp,,"ZGP.BRYG",'');
      _zlgd:={? _bryg='T'
             || exec('findZlgdZ','ekioski',_zgp,null(),VEK.A_ZLBR,PROD_REJ.GROPS)
             || exec('findZlgdZ','ekioski',_zgp,VEK.P,null(),PROD_REJ.GROPS)
             ?};
      __ENV_REJ.ZLGD:=_zlgd;
::    Sprawdzam czy są zdefiniowane nielimity rozliczane z operacją
      ZLIM.cntx_psh();
      ZLIM.index('ZGP_ROZ');
      ZLIM.prefix(_zgp,'N','T');
      {? ZLIM.first()
      ||
         {!
         |? _tab.KTM:=exec('FindAndGet','#table',M,ZLIM.KTM,,"KTM",'');
            _tab.M:=exec('FindAndGet','#table',M,ZLIM.KTM,,"N",'');
            _tab.JM:=exec('FindAndGet','#table',M,ZLIM.KTM,,"J().KOD",'');
            _tab.MG:=exec('FindAndGet','#table',MG,ZLIM.MG,,"SYM",'');
            _tab.LIL:=ZLIM.LIL;
            _tab.MGREF:=$ZLIM.MG;
            _tab.MREF:=$ZLIM.KTM;
            _tab.TMATREF:=$ZLIM.TMAT;
            _tab.ZLIMREF:=$ZLIM.ref;
            _tab.ZLREF:=$ZLIM.ZLEC;
            _tab.DKCREF:={? ZLIM.DK_C<>null || $ZLIM.DK_C || '' ?};
::          Sprawdzam dostępny stan magazynowy dla podanej pozycji
            {? ZLIM.DK_C<>null()
            || exec('obl_stan','magazyn_stan',ZLIM.KTM,1,ZLIM.MG,,,date(),-2,,,,ZLIM.DK_C)
            || exec('obl_stan','magazyn_stan',ZLIM.KTM,1,ZLIM.MG,,,date(),-2)
            ?};
            _tab.STAN:=BEER.SD;
            _tab.IL:=0;

            {? _tab.add() & ~_tab2.find_key(_tab.MREF)
            ||
::             Przepisuje dane do  tabeli z nagłówkami
               _tab2.KTM:=_tab.KTM;
               _tab2.M:=_tab.M;
               _tab2.LIL:=_tab.LIL;
               _tab2.JM:=_tab.JM;
               _tab2.MREF:=_tab.MREF;
               _tab2.ZLIMREF:=_tab.ZLIMREF;
               _tab2.ZLREF:=_tab.ZLREF;
               _tab2.DKCREF:=_tab.DKCREF;
               _tab2.add()
            ?};
            ZLIM.next()
         !}
      ?};
      ZLIM.cntx_pop();
      _tab2.cntx_pop()
   ?};
   __ENV_REJ.WHERE:=_where;
   {? ~_where & +_txt>0
   || FUN.info(_txt)
   ?}
?};

{? _can_continue
||
   eSelect.sur_n:=null();
   eSelect.sur_p:=null();
   exec('set_var_a','ekioski',_zgp);
   VAR.A_KTL:=PROD_REJ.ZL().TKTL;

   USERS.cntx_psh();

   eLevel.up(__ENV_REJ.TAB,__ENV_REJ.WER,'SUROWCE');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
   _before:="
      exec('load','#desktop','ctr_user_info','ekiosk_user_info2.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
      exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

::    Druga linia informacji
      _info2:=exec('second_line','ekioski');
      exec('set_value','#desktop','','ctr_user_info','fld_line2@user_info',_info2);

      exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: nav
      exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
::      exec('set_enabled','#desktop','','ctr_menu_nav','btn_info@menu_nav',__ENV_REJ.TAB.size()>0);
      exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);

      _tab:=exec('elements_menuSur_table','ekioski');
      exec('load','#desktop','ctr_menu_sur','ekiosk_menu_sur.dsk',,,,,_tab,1);

::Klawiatura
::      exec('set_visible','#desktop','','ctr_menu_end','keyboard',1);
      __ENV_REJ.TAB.index(__ENV_REJ.NDX);
      __ENV_REJ.TAB_N.first();
      __ENV_REJ.TAB.first();
::    Ustawienie aktywnego okna
      grp_disp(__ENV_REJ.TAB_N,__ENV_REJ.WER_N,1);
      grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
      eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
      ~~
   ";

   _grp:=USERS.grp_make('SUROWCE'@,_before,'sur_grp',,,,,,'jterm');
   exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 4 || 3 ?},eSelect.grp_width,,,,,,);
   USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
   _before:="
      grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
      eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
      ~~
   ";
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
   'Surowiec: %1, łączna ilość pobrana: %2 %3'@['','',''];
   _after_refresh:="
::    Ustawienie focusa na polu z ilością
::      win_activate('ctr_menu_sur');
      exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
      {? eSelect.sur_n<>__ENV_REJ.TAB_N.ref()
      || eSelect.sur_n:=__ENV_REJ.TAB_N.ref();
::         exec('set_visible','#desktop','','ctr_menu_sur','btn_register@menu_sur',__ENV_REJ.WHERE);
         exec('set_visible','#desktop','','ctr_menu_sur','btn_accept@menu_sur',~__ENV_REJ.WHERE);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
         eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
::       Trzecia linia informacji (łączna ilość pobrana)
         _info3:='';
         {? __ENV_REJ.TAB_N.size()>0
         || _info3:='Surowiec: %1, łączna ilość pobrana: %2 %3'@[__ENV_REJ.TAB_N.M
                    ,form($exec('FindAndGet','#table',ZLIM,__ENV_REJ.TAB_N.ZLIMREF,,\"ZLIM.IL_RW-ZLIM.IL_ZW\",0)
                    ,,ST.DOKL),__ENV_REJ.TAB_N.JM]
         ?};
         exec('set_value','#desktop','','ctr_user_info','fld_line3@user_info',_info3);
         ~~
      ?}
   ";
   USERS.grp_sel(_grp,__ENV_REJ.TAB_N,__ENV_REJ.WER_N,,_after_refresh,,,{? VEK.DPI=96 || 6 || 5 ?},_before,,,,
                 'maximized_with_title','sur_wer_n',1);
   _before:="
      eLevel.change(__ENV_REJ.TAB,__ENV_REJ.WER)
   ";
   _after_refresh:="
::    Ustawienie focusa na polu z ilością
::      win_activate('ctr_menu_sur');
      exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
      {? eSelect.sur_p<>__ENV_REJ.TAB.ref()
      || eSelect.sur_p:=__ENV_REJ.TAB.ref();
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         ~~
      ?}
   ";
   USERS.grp_splt(_grp,'pozioma_1','vertical','pionowa_1',0);
   USERS.grp_sel(_grp,__ENV_REJ.TAB,__ENV_REJ.WER,,_after_refresh,,,{? VEK.DPI=96 || 6 || 5 ?},_before,,,,
                 'maximized_with_title','sur_wer_p',0);
   USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
   exec('create','#desktop',USERS,'ctr_menu_sur',_grp,{? VEK.DPI=96 || 15 || 12 ?},eSelect.grp_width,,,,1);
   USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
   exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
   USERS.win_sel(_grp);

   USERS.select();
   USERS.cntx_pop();

   eLevel.down()
?};
~~


\cmb_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zwraca tabelę tymczasową elementów do combo-boxa do wyboru dostawy
::----------------------------------------------------------------------------------------------------------------------
{? MG.f_active()=0
|| _mag:=sql('
      select
         SYM as SYM,
         NAZ as COMBO
      from prefixed_table(MG)
      order by 1
   ')
|| _mag:=sql('
      select
         SYM as SYM,
         NAZ as COMBO
      from MG join filter_of(MG)
      order by 1
   ')
?};

_tab:=__ENV_REJ.TAB;
{? _mag.first()
|| {!
   |? _ktm:=exec('FindAndGet','#table','M',_tab.MREF,,"M.ref",null);
      _mg:=exec('FindAndGet','#table','MG',_tab.MGREF,,"MG.ref",null);
      _mg:=exec('FindInSet','#table','MG','MAGAZYNY',_mag.SYM,_mag.SYM,,,,null);
      _dk_c:=exec('FindAndGet','#table','DK_C',_tab.DKCREF,,"DK_C.ref",null);
::         Sprawdzam dostępny stan magazynowy dla podanej pozycji
      {? _dk_c<>null()
      || exec('obl_stan','magazyn_stan',_ktm,1,_mg,,,date(),-2,,,,_dk_c)
      || exec('obl_stan','magazyn_stan',_ktm,1,_mg,,,date(),-2)
      ?};
      _mag.COMBO:=_mag.SYM+'['+$BEER.SD+']';
      _mag.put();
      _mag.next()
   !}
?};
_mag


\btn_sur_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Przycisk Zapisz w rozpisce surowców
::----------------------------------------------------------------------------------------------------------------------
{? __ENV_REJ.TYPE || return(exec('btn_surlsave','ekioski')) ?};

_tab:=__ENV_REJ.TAB;


_type:=__ENV_REJ.TYPE;

_il_str:=exec('get_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
_il:=exec('str2real','#convert',_il_str);

:: Pole z kodem kreskowym w okienku (z czytnika kodów kreskowych)
_kkod:=exec('get_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur');

{? _kkod=''
|| {? _il_str<>''
   || {? _tab.size()=0
      || FUN.info('Brak danych do modyfikacji. Funkcja nieaktywna.'@);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         return()
      |? exec('get_user_param','ekioski',8785,type_of(''))<>'T'
      || FUN.info('Nie można wydawać surowca bez wskazania dostawy.'@);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         return()
      ?};
      _can_continue:=1;
      _czy_pal:=_tab.KODPAL<>'';
      _ktm:=exec('FindAndGet','#table','M',_tab.MREF,,"M.ref()",null());
      _mg:=exec('FindAndGet','#table','MG',_tab.MGREF,,"MG.ref()",null());
      _dk_c:=exec('FindAndGet','#table','DK_C',_tab.DKCREF,,"DK_C.ref()",null());
      _dokl:=exec('jaka_dok_m','jm',_ktm);
      _il:={? _dokl>0
           || _il$ _dokl
           || ceil(_il)
           ?};
      {? _tab.RSC<>''
      || {? _czy_pal=0
         || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),_tab.SCEAN)
         || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),,,,_tab.RSC)
         ?};
         _sctab.prefix()
      || _sctab:=~~
      ?};
::    Sprawdzam dostępny stan magazynowy dla podanej pozycji
      _stan:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_tab.MGREF,_tab.ZLREF,_tab.RSC
                                                 ,_tab.EANLREF,'ZGP','T',1,_sctab,,,,_tab.KODPAL);
      {? _il<0
      || FUN.info('Ilość musi być większa od zera'@)
      || _add_empty:=0;
         {? _il>_stan
         || _txt:='W magazynie \'%2\' nie ma wystarczającej ilości materiału \'%1\'.\n'
                  'Pobierana ilość: %3.\nAktualny stan: %4.\n'
                  'Pobrać maksymalną dostępną ilość na stanie?'@
                  [_tab.M,_tab.MG,form(_il,,ST.DOKL),form(_stan,,ST.DOKL)];
            {? FUN.ask(_txt)
            || _il:=_stan;
               {? _tab.SCEAN<>'' | _tab.KODPAL<>''
               || _add_empty:=1
               ?}
            || _can_continue:=0
            ?}
         ?};
         {? _can_continue>0
         ||
::          Brak błędów, przypisuje magazyn i jego aktualny stan
            __ENV_REJ.GEN:=0;
            _tab.STAN:=_stan;
            _tab.IL:=_il;
            _tab.put();
::          Aktualizuje zapis rozpiski/rezerwację
            exec('rej_mat_update','ekioski');
            {? _add_empty>0
            ||
::             Dodaje dodatkową pozycję do rozpiski (z pustą dostawą i zerową ilością)
               _tab.cntx_psh();
               _tab.SCEAN:='';
               _tab.KODPAL:='';
               _tab.EANLREF:='';
               _tab.IL:=0;
               _tab.RSC:='';
               _tab.RSC_OLD:='';
               _tab.PAL:='';
               _tab.PAL_POZ:='';
::             Przypisuje domyślny magazyn (określony na nielimicie zlecenia)
               _tab.MG:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.MG().SYM",'');
               _tab.MGREF:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"$ZLIM.MG",'');
               {? _czy_pal=0
               || _tab.index(__ENV_REJ.NDX2);
                  _tab.prefix(_tab.MREF,_tab.MGREF,_tab.SCEAN,_tab.EANLREF)
               || _tab.index(__ENV_REJ.NDX4);
                  _tab.prefix(_tab.MREF,_tab.MGREF,_tab.KODPAL,_tab.EANLREF,_tab.RSC)
               ?};
               {? ~_tab.first()
               || _tab.add()
               ?};
               _tab.cntx_pop()
            ?};
            grp_disp(__ENV_REJ.TAB_N,__ENV_REJ.WER_N,1)
         ?}
      ?};
      exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','')
   ?}
||
:: Jak wypełnione pole dostawa to zapisuję dostawę z wpisaną ilością
   exec('dostawa_kkod','ekioski')
?};
~~


\elements_menuSur_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_sur.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_sur_save@menu_sur';
_tab.NAME:='Zapisz'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_il_sur@menu_sur';
_tab.NAME:='Ilość'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_dostawa@menu_sur';
_tab.NAME:='Kod'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_paleta@menu_sur';
_tab.NAME:='Kod'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_register@menu_sur';
_tab.NAME:='<html><center>'+gsub('Rejestruj\nwykonanie'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_usunrez@menu_sur';
_tab.NAME:='<html><center>'+gsub('Usuń\nrezerwacje'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_accept@menu_sur';
_tab.NAME:='<html><center>'+'Akceptuj'@+'</html>';
_tab.add();

_tab


\cmb_place
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zwraca tabelę tymczasową elementów do combo-boxa do wyboru stanowiska
::       Kontekst wywołania: Założony prefix/filtr na tabelę TWRKPLC
::----------------------------------------------------------------------------------------------------------------------
{? TWRKPLC.f_active()=0
|| _place:=sql('
      select
         KOD as SYM,
         KOD || '' ['' || NA || '']'' as COMBO
      from prefixed_table(TWRKPLC)
   ')
|| _place:=sql('
      select
         KOD as SYM,
         KOD || '' ['' || NA || '']'' as COMBO
      from TWRKPLC join filter_of(TWRKPLC)
   ')
?};
_place


\rej_mat_fill_tmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Sprawdza czy są jakieś tymczasowe rozliczenia surowców dla danego PROD_REJA. Jeżeli są to wypełnia rozpiskę
::       rozliczeń surowców na podstawie tymczasowych zapisów oraz sprawdza czy wszystkie materiały są dostępne na
::       magazynie. Formuła wykonywana tylko na ekioskach.
::   WE: [_a] - czy liczyć dostępny stan surowca: [1] -  tak, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
_chk_stan:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_bryg:=PROD_REJ.ZGP().BRYG;
_zlgd:={? _bryg='T'
       || exec('findZlgdZ','ekioski',PROD_REJ.ZGP,null(),VEK.A_ZLBR,PROD_REJ.GROPS)
       || exec('findZlgdZ','ekioski',PROD_REJ.ZGP,VEK.P,null(),PROD_REJ.GROPS)
       ?};
REZ.cntx_psh();
REZ.index('REFREA');
REZ.prefix($_zlgd);
{? REZ.first()
|| exec('env_rej_mat','zl_wyk',1);
   _tab:=__ENV_REJ.TAB;
   _tab2:=__ENV_REJ.TAB_N;
   _tab2.cntx_psh();
   _tab2.index(__ENV_REJ.NDX_N);
   __ENV_REJ.GEN:=0;
   __ENV_REJ.ZGP:=PROD_REJ.ZGP;
   __ENV_REJ.ZLGD:=_zlgd;
   ZLIM.cntx_psh();
   exec('openmask','zl_common',PROD_REJ.ZL);
   ZLIM.index('ZGP_ROZ');
   ZLIM.prefix(PROD_REJ.ZGP,'N','T');
   {? ZLIM.first()
   ||
::    Tworzę rozpiskę do rozliczeń surowców nielimitowanych
      {!
      |?
         _txt:='';
::       Sprawdzam czy dany surowiec został wcześniej pobrany (przy starcie operacji)
         {? REZ.find_tab('first','ZLIM',,'=',$ZLIM.ref())
         || _jest:=1
         || _jest:=0
         ?};
         {!
         |?
            _add:=1;
            _tab.KTM:=exec('FindAndGet','#table',M,ZLIM.KTM,,"KTM",'');
            _tab.M:=exec('FindAndGet','#table',M,ZLIM.KTM,,"N",'');
            _tab.JM:=exec('FindAndGet','#table',M,ZLIM.KTM,,"J().KOD",'');
            {? _jest
            ||
::             Sprawdzam czy już jest surowiec o podanej dostawie i lokalizacji
               _tab.cntx_psh();
               {? REZ.KODPAL<>''
               || _tab.index(__ENV_REJ.NDX4);
                  _tab.prefix($REZ.M,$REZ.MG,REZ.KODPAL,REZ.ZD_POZ,REZ.SC)
               || _tab.index(__ENV_REJ.NDX2);
                  _tab.prefix($REZ.M,$REZ.MG,exec('FindAndGet','#table',DK,REZ.SC,,"DK.SCEAN",''),REZ.ZD_POZ)
               ?};
               {? _tab.first()
               || _add:=0
               ?};
               _tab.cntx_pop();
               {? _add>0
               || _tab.MG:=REZ.MG().SYM;
                  _tab.MGREF:=$REZ.MG;
                  _tab.RSC:=REZ.SC;
                  _tab.RSC_OLD:=REZ.SC;
                  _tab.SCEAN:={? REZ.KODPAL<>'' || '' || exec('FindAndGet','#table',DK,_tab.RSC,,"DK.SCEAN",'') ?};
                  _tab.KODPAL:=REZ.KODPAL;
                  _tab.PAL:=$exec('kodkINakt','magdok_palety',_tab.KODPAL);
                  _tab.PAL_POZ:='';
                  _tab.EANLREF:=REZ.ZD_POZ
               ?}
            || _tab.MG:=exec('FindAndGet','#table',MG,ZLIM.MG,,"SYM",'');
               _tab.MGREF:=$ZLIM.MG;
               _tab.RSC:='';
               _tab.RSC_OLD:='';
               _tab.SCEAN:='';
               _tab.KODPAL:='';
               _tab.EANLREF:='';
               _tab.PAL:='';
               _tab.PAL_POZ:=''
            ?};

            {? _add>0
            || _tab.LIL:=ZLIM.LIL;
               _tab.MREF:=$ZLIM.KTM;
               _tab.TMATREF:=$ZLIM.TMAT;
               _tab.ZLIMREF:=$ZLIM.ref;
               _tab.ZLREF:=$ZLIM.ZLEC;
               _tab.DKCREF:={? ZLIM.DK_C<>null || $ZLIM.DK_C || '' ?};
               _mg:=exec('FindAndGet','#table',MG,_tab.MGREF,,"MG.ref()",null);
               {? var_pres('_sctab')>100 || obj_del(_sctab) ?};
               {? _tab.RSC<>''
               || {? _tab.KODPAL<>''
                  || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),,,,_tab.RSC)
                  || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),_tab.SCEAN)
                  ?};
                  _sctab.prefix()
               || _sctab:=~~
               ?};
               {? _chk_stan>0
               ||
::                Sprawdzam dostępny stan magazynowy dla podanej pozycji
                  _stan:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_tab.MGREF,_tab.ZLREF,_tab.RSC
                                                    ,_tab.EANLREF,'ZGP','T',0,_sctab,,,,_tab.KODPAL);
                  _tab.STAN:=_stan
               ?}
            ?};
::          Sprawdzenie czy była rezerwacja i ewentualne dodanie zarezerowanej ilości do stanu
            {? _chk_stan>0 & _jest
            || _tab.STAN+=REZ.ILR
            ?};
            _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
            {? _jest>0
            || {? _add>0
               || _tab.IL:=REZ.ILR
               || _tab.IL+=REZ.ILR
               ?}
            || _tab.IL:=0
            ?};
            {? _dokl>0
            || _tab.IL:=_tab.IL$_dokl
            ?};
            {? _add>0
            || {? _tab.add()
               || {? ~_tab2.find_key(_tab.MREF,)
                  ||
::                   Przepisuje dane do  tabeli z nagłówkami
                     _tab2.KTM:=_tab.KTM;
                     _tab2.M:=_tab.M;
                     _tab2.LIL:=_tab.LIL;
                     _tab2.JM:=_tab.JM;
                     _tab2.MREF:=_tab.MREF;
                     _tab2.ZLIMREF:=_tab.ZLIMREF;
                     _tab2.ZLREF:=_tab.ZLREF;
                     _tab2.IL:=_tab.IL;
                     _tab2.add()
                  || _tab2.IL+=_tab.IL;
                     _tab2.put()
                  ?}
               ?}
            || {? _tab.put()
               || {? _tab2.find_key(_tab.MREF,)
                  || _tab2.IL+=_tab.IL;
                     _tab2.put()
                  ?}
               ?}
            ?};
            _next:={? _jest>0 ||  REZ.find_tab('next','ZLIM',,'=',$ZLIM.ref) || 0 ?};
            _next
         !};
         ZLIM.next()
      !}
   ?};
   ZLIM.cntx_pop();
   _tab2.cntx_pop()
?};
REZ.cntx_pop();
~~


\dostawa_kkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Funkcja/Zdarzenie po odczytaniu kodu identyfikującego dostawę/paletę
::----------------------------------------------------------------------------------------------------------------------
{? __ENV_REJ.TYPE || return(exec('btn_surlsave','ekioski')) ?};

:: Pole z kodem kreskowym w okienku (z czytnika kodów kreskowych)
_kkod:=exec('get_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur');
:: Odczytanie ilości
_ilosc_str:=exec('get_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
_ilosc:=exec('str2real','#convert',_ilosc_str);

{? _kkod<>'' & _ilosc>=0 & var_pres('__ENV_REJ')>100
|| _can_continue:=1;
   _tab:=__ENV_REJ.TAB;
   _tab2:=__ENV_REJ.TAB_N;
   _pal:=__ENV_REJ.TAB_P;
   _czy_pal:=_kkod<>'' & exec('kodkINakt','magdok_palety',_kkod)<>null();
   _pal_jedn:=0;
   _info:=1;
   _sctab:=~~;
   {? _czy_pal>0
   ||
::    Zeskanowany kod palety
      _res:=exec('paleta_fill','ekioski1',_kkod,_ilosc);
      {? _pal.first()
      || {? _pal.size()=1
         || _can_continue:=1;
            _pal_jedn:=1
         || _can_continue:=exec('paleta_show','ekioski1');
            _info:=0
         ?}
      ?}
   ||
::    Zeskanowany kod dostawy
      _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),_kkod);
      _sctab.prefix()
   ?};
   {? _can_continue>0 & (_czy_pal>0 & _pal.first())  | (_czy_pal=0 & _sctab.first())
   ||
      _ref2:=_tab2.ref();
      _tab2.cntx_psh();
      _tab2.index(__ENV_REJ.NDX_N);
      {? _czy_pal=0
      || _tab.index(__ENV_REJ.NDX2)
      || _tab.index(__ENV_REJ.NDX4)
      ?};
      {!
      |?
         _can_continue:=1;
         {? _czy_pal>0
         || _ilosc:=_pal.IL;
            {? _pal.RSC<>''
            || {? var_pres('_sctab')>100 || obj_del(_sctab) ?};
               _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),,,,_pal.RSC)
            ?}
         ?};
         _mref:={? _czy_pal=0 || _sctab.M || _pal.MREF ?};
         _tab.prefix(_mref);
::       Sprawdzenie czy materiał znajduje się na liście limitów
         {? ~_tab.first()
         || {? _czy_pal=0
            || _p8782:=exec('get_user_param','ekioski',8782,type_of(''));
               _txt:='Dostawa dotyczy materiału %1, który nie znajduje się na liście surowców '
                     'nielimitowanych zlecenia.\n'@
                     [exec('FindAndGet','#table','M',_sctab.M,,"M.N",'')];
               {? _p8782='T'
               || {? _ilosc>0
                  ||
                     _txt+='Czy mimo to dodać surowiec do listy?'
                           ' (surowiec zostanie również dodany do zapotrzebowań przewodnika)'@;
                     _can_continue:=FUN.ask(_txt)
                  || _txt+='Ilość (norma) surowca musi być określona.'@;
                     FUN.info(_txt);
                     _can_continue:=0
                  ?}
               || FUN.info(_txt);
                  _can_continue:=0
               ?};
               {? _can_continue>0
               ||
                  ZLIM.cntx_psh();
                  exec('openmask','zl_common',VAR.A_ZLEC);
                  ZLIM.clear();
                  ZLIM.blank();
                  ZLIM.LIMIT:='N';
                  ZLIM.AUTO:='N';
                  ZLIM.ZLEC:=VAR.A_ZLEC;
::               ZLIM.ZLDOD:=exec('FindAndGet','#table',ZL,_sur.ZLDOD,ZL.name(),,null());
                  ZLIM.TMAT:=null();
                  ZLIM.KTM:=exec('FindAndGet','#table',M,_sctab.M,,,null());
                  ZLIM.PFAZ:=null();
                  ZLIM.WYD:=VAR.A_ZLEC().JORG;
::                Ustalenie magazynu
                  exec('zlim_set_mg','zl_limit1',0);
                  ZLIM.LIL:=_ilosc;
                  ZLIM.SO:='S';
                  ZLIM.NR:=exec('bl_nlrlim','zl_limit');
                  ZLIM.PARTIA:='N';
                  ZLIM.ZGP:=exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,,null());
                  _dt:=exec('datetime','zl_limit',ZLIM.ZGP);
                  ZLIM.STARTD:=_dt.DATE;
                  ZLIM.STARTT:=_dt.TIME;

                  ZLIM.ROZ:='T';
                  ZLIM.DK_C:=exec('FindAndGet','#table',DK_C,_sctab.DK_C,,,null());
                  ZLIM.add();

                  _tab.blank();
                  _tab.LIL:=ZLIM.LIL;
                  _tab.MREF:=$ZLIM.KTM;
                  _tab.TMATREF:=$ZLIM.TMAT;
                  _tab.ZLIMREF:=$ZLIM.ref;
                  _tab.ZLREF:=$ZLIM.ZLEC;
                  _tab.DKCREF:={? ZLIM.DK_C<>null || $ZLIM.DK_C || '' ?};
                  _tab.KTM:=ZLIM.KTM().KTM;
                  _tab.M:=ZLIM.KTM().N;
                  _tab.JM:=ZLIM.KTM().J().KOD;
                  _tab.MGREF:=$ZLIM.MG;
                  _tab.MG:=exec('FindAndGet','#table',MG,_tab.MGREF,,"MG.SYM",'');
                  ZLIM.cntx_pop();

                  {? _tab.add()& ~_tab2.find_key(_tab.MREF,)
                  ||
::                   Przepisuje dane do  tabeli z nagłówkami
                     _tab2.KTM:=_tab.KTM;
                     _tab2.M:=_tab.M;
                     _tab2.LIL:=_tab.LIL;
                     _tab2.JM:=_tab.JM;
                     _tab2.MREF:=_tab.MREF;
                     _tab2.ZLIMREF:=_tab.ZLIMREF;
                     _tab2.ZLREF:=_tab.ZLREF;
                     {? _tab2.add()
                     || _ref2:=_tab2.ref()
                     ?}
                  ?}
               ?}
            || _can_continue:=0
            ?}
         ?};
         {? _can_continue>0
         ||
::          Jak więcej dostaw o tym samym kodzie to sprawdzam czy jest przypisana do wielu magazynów.
            {? _czy_pal=0 & _sctab.size()>1
            || _sctab.prefix(_kkod,_sctab.MAG);
               {? _sctab.size()<>_sctab.size()
               ||
::                Kilka dostaw o tym samym kodzie przypisanych do różnych magazynów.
::                Wybieram dostawę z magazynu przypisanego do nielimitu zlecenia
                  _mg:=exec('FindAndGet','#table','ZLIM',_tab.ZLIMREF,,"ZLIM.MG",null());
                  {? _mg=null()
                  || _can_continue:=0;
                     FUN.info('Nie można przypisać dostawy.\n'
                              'Surowiec \'%1\' nie ma zdefiniowanego magazynu, z którego ma zostać pobrany.'@
                              [exec('FindAndGet','#table','M',_sctab.M,,"M.N",'')])
                  ?};
                  _sctab.prefix(_kkod,$_mg);
                  {? ~_sctab.first()
                  || _can_continue:=0;
                     FUN.info('W magazynie %1 nie znaleziono dostawy o kodzie %2.'@
                              [exec('FindAndGet','#table','MG',_mg,,"MG.SYM",''),_kkod])
                  ?}
               ?}
            ?};
            _lok_dflt:=null();
            _lok:=0;
            {? _can_continue>0 & _czy_pal=0
            ||
::             Sprawdzam czy magazyn paletowy lub ma lokalizacje
               MG.cntx_psh();
               MG.clear();
               {? MG.seek(_sctab.MAG)
               || {? MG.PAL='T'
                  || _can_continue:=0;
                     FUN.info('Nie można przypisać dostawy.\n'
                              'Funkcjonalność niedostępna dla dostaw z magazynów z obsługą palet.'@)
                  |? MG.SL='T'
                  || EANL.cntx_psh();
                     EANL.index('MGDOK');
                     EANL.prefix('T',MG.ref(),'T','N');
                     {? EANL.first()
                     || _lok:=1;
                        EANL.cntx_psh();
                        EANL.clear();
                        _ktm:=exec('FindAndGet','#table','M',_sctab.M,,,null());
                        _lok_dflt:=Plugin.run('EANL_NLIM_001',VEK.INIT_ODD,VEK.A_WYD,VEK.P,MG.ref(),_ktm,_kkod);
                        EANL.cntx_pop();

                        {? ~(type_of(_lok_dflt)=type_of(EANL.ref())  & _lok_dflt<>null()
                           & exec('FindAndGet','#table','EANL',_lok_dflt,,"EANL.AKT='T' & EANL.DOK='T'",0)
                           & exec('FindAndGet','#table','EANL',_lok_dflt,,"$EANL.MG",'')=_sctab.MAG)
                        || {? exec('FindAndGet','#table','EANL',_lok_dflt,,"$EANL.MG",'')<>_sctab.MAG
                           || FUN.info('Lokalizacja %1 nie należy do magazynu %2.\n'
                                       'Zmieniono lokalizację na domyślną %3.'@
                                       [exec('FindAndGet','#table','EANL',_lok_dflt,,"EANL.KOD",'')
                                        ,MG.SYM,MG.EANL().KOD])
                           || FUN.info('Lokalizacja %1 jest nieaktywna bądź nie jest dokiem '
                                       'załadunkowym/wyładunkowym. Zmieniono lokalizację na domyślną %2.'@
                                       [exec('FindAndGet','#table','EANL',_lok_dflt,,"EANL.KOD",''),MG.EANL().KOD])
                           ?};
                           _lok_dflt:=MG.EANL
                        ?}
                     ?};
                     EANL.cntx_pop()
                  ?}
               ?};
               MG.cntx_pop()
            ?};
            _czy_rez:=exec('zlim_il_rez','zl_nlimit',_tab.ZLIMREF);
            {? _czy_pal=0
            || _str_naz:=exec('FindAndGet','#table','M',_sctab.M,,"M.N",'');
               _str_mag:=exec('FindAndGet','#table','MG',_sctab.MAG,,"MG.SYM",'');
               _str_lok:=exec('FindAndGet','#table','EANL',_lok_dflt,,"EANL.KOD",'')
            || _str_naz:=_pal.M;
               _str_mag:=exec('FindAndGet','#table','MG',_pal.MGREF,,"MG.SYM",'');
               _str_lok:=exec('FindAndGet','#table','EANL',_pal.EANLREF,,"EANL.KOD",'')
            ?};
::          Zeskanowana dostawa/paleta bez podania ilości
::          Próba ustalenia ilości na podstawie rezerwacji/dostawy/pozostałej ilości do pobrania
            {? _ilosc=0
            || {? _czy_pal=0
               || _sctab.cntx_psh();
                  {? _sctab.first()
                  || _ktm:=exec('FindAndGet','#table','M',_sctab.M,,,null());
                     _mg:=exec('FindAndGet','#table','MG',_sctab.MAG,,,null());
                     _ilrez:=_ildst:=0;
                     _zlim_left:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.LIL-ZLIM.IL_RW+ZLIM.IL_ZW",0);
                     {!
                     |?
                        _ildst+=exec('obl_stsc','magazyn_stan',_sctab.RDK,_sctab.NDK,_mg,_ktm,date(0,0,0));
                        {? _czy_rez>0
                        || _ilrez+=exec('sc_il_rez','zl_nlimit',_sctab.SRDK,_tab.ZLIMREF)
                        ?};
                        _sctab.next()
                     !};
                     _ildst+=_ilrez;
                     {? _ildst>0
                     || _dokl:=exec('jaka_dok_m','jm',exec('FindAndGet','#table','M',_tab.MREF,,,null()));
                        _msg:=
                           'Nie podano ilości pobieranej dla surowca %3.\n'
                           'Czy wyznaczyć ilość na podstawie:\n'
                           '   Dostępnego stanu dostawy: %1\n'
                           '   Pozostałej ilości do pobrania: %2'@[form(_ildst,,_dokl),form(_zlim_left,,_dokl),_tab.KTM]
                           +{? _ilrez>0 || '\n   Ilości zarezerwowanej dla dostawy: %1?\n'@
                            [form(_ilrez,,_dokl)] || '?' ?};
                        {? _ilrez>0
                        || _choice:=FUN.choice(_msg,,'Wg &stanu dostawy'@,'Wg ilości &pozostałej'@,'Wg &rezerwacji'@)
                        || _choice:=FUN.choice(_msg,,'Wg &stanu dostawy'@,'Wg ilości &pozostałej'@)
                        ?};

                        {? _choice=1
                        || _ilosc:=_ildst
                        |? _choice=2
                        || _ilosc:=_zlim_left
                        |? _choice=3
                        || _ilosc:=_ilrez
                        || _ilosc:=-1
                        ?};
                        _ilosc_str:=$_ilosc
                     || _ilosc:=-1;
                        _msg:='Zerowy stan materiału %1 na dostawie %2, magazynie %3'@[_str_naz,_kkod,_str_mag]
                           +{? _lok=0 || '.' || ', lokalizacja %1.'@[_str_lok] ?};
                        FUN.info(_msg)
                     ?}
                  ?};
                  _sctab.cntx_pop()
               |? _pal_jedn>0
               || _ktm:=exec('FindAndGet','#table','M',_pal.MREF,,,null());
                  _mg:=exec('FindAndGet','#table','MG',_pal.MGREF,,,null());
                  _ilpal:=0;
                  _zlim_left:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.LIL-ZLIM.IL_RW+ZLIM.IL_ZW",0)
                     -_tab2.IL;
                  {? _zlim_left<0 || _zlim_left:=0 ?};
                  _ilpal:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_pal.MGREF,_tab.ZLREF
                     ,_pal.RSC,_pal.EANLREF,'ZGP','T',1,_sctab,,1,,_pal.KODK);
                  _dokl:=exec('jaka_dok_m','jm',exec('FindAndGet','#table','M',_tab.MREF,,,null()));
                  {? _zlim_left>0
                  || {? _ilpal>0
                     ||
::                     _msg:=
::                        'Nie podano ilości pobieranej dla surowca %3.\n'
::                        'Czy wyznaczyć ilość na podstawie:\n'
::                        '   Dostępnego stanu palety: %1\n'
::                        '   Pozostałej ilości do pobrania: %2'@[form(_ilpal,,_dokl),form(_zlim_left,,_dokl),_pal.KTM];
::                     _choice:=FUN.choice(_msg,,'Wg &stanu palety'@,'Wg ilości &pozostałej'@);
::                     {? _choice=1
::                     || _ilosc:=_ilpal
::                     |? _choice=2
::                     || _ilosc:=_zlim_left
::                     || _ilosc:=-1
::                     ?};
                        _ilosc:={? _ilpal>_zlim_left || _zlim_left || _ilpal?};
                        _ilosc_str:=$_ilosc
                     || _ilosc:=-1;
                        _msg:='Zerowy stan materiału %1 na palecie %2, magazynie %3'@[_str_naz,_kkod,_str_mag]
                           +{? _lok=0 || '.' || ', lokalizacja %1.'@[_str_lok] ?};
                         FUN.info(_msg)
                     ?}
                  ?}
               ?}
            ?};

            {? _ilosc<=0
            || _can_continue:=0;
               {? _ilosc=0 & (_czy_pal=0 | _pal_jedn>0) || FUN.info('Ilość musi być określona.'@) ?};
               exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur')
            ?};

            {? _can_continue>0
            ||
::             _add: 1 - add, 0 - put, -1 -nie robić nic (jest już taki rekord)
               _add:=0;
               {? _tab.size()>1
               || {? (_czy_pal=0 & _tab.find_key(_sctab.MAG,_kkod,$_lok_dflt,))
                     | (_czy_pal>0 & _tab.find_key(_pal.MGREF,_kkod,_pal.EANLREF,_pal.RSC))
                  || _add:=-1
                  || _add:=1
                  ?}
               || {? (_czy_pal=0 & _tab.SCEAN='') | (_czy_pal>0 & _tab.KODPAL='')
                  || _add:=0
                  || {? (_czy_pal=0 & _tab.MGREF=_sctab.MAG & _tab.SCEAN=_kkod & _tab.EANLREF=$_lok_dflt)
                        | (_czy_pal>0 & _tab.MGREF=_pal.MGREF & _tab.KODPAL=_kkod & _tab.EANLREF=_pal.EANLREF
                          & _tab.RSC=_pal.RSC)
                     || _add:=-1
                     || _add:=1
                     ?}
                  ?}
               ?};
::             Pytanie co zrobić gdy zapis o danej dostawie i lokalizacji już istnieje
               {? _add=-1
               || _txt:='';
::                  {? _tab.EANLREF<>''
::                  || _txt:='Surowiec %1, magazyn %2, lokalizacja %3, dostawa %4 - taki zapis już istnieje.'@
::                              [_tab.KTM,_tab.MG,exec('FindAndGet','#table','EANL',_tab.EANLREF,,"EANL.KOD",'')
::                              ,_tab.SCEAN]
::                  || _txt:='Surowiec %1, magazyn %2, dostawa %3 - taki zapis już istnieje.'@
::                              [_tab.KTM,_tab.MG,_tab.SCEAN]
::                  ?};
                  _txt+='Zapis o podanym kodzie identyfikacyjnym już istnieje.\n'
                        'Nadpisać pobieraną ilość surowca czy dodać do aktualnej wartości?\n'
                        'Ilość aktualna: %1\n'
                        'Ilość po nadpisaniu: %2\n'
                        'Ilość po sumowaniu: %3\n'@
                        [form(_tab.IL,,ST.DOKL),form(_ilosc,,ST.DOKL),form((_tab.IL+_ilosc),,ST.DOKL)];
::                Palety zawsze w trybie nadpisywania
                   _choice:={? _czy_pal=0 | _info>0 || FUN.choice(_txt,,'Nadpisz'@,'Sumuj'@) || 2 ?};
                  {? _choice>0
                  || _add:=0;
                     _info:=0;
                     {? _choice=2
                     || _ilosc+=_tab.IL
                     ?}
                  ?};
::                Zapamiętanie pozycji rekordów
                  {? _tab2.find_key(_tab.MREF)
                  || _ref2:=_tab2.ref()
                  ?}
               ?};

               {? _add>=0
               || _zl:=exec('FindAndGet','#table','ZL',_tab.ZLREF,'zlec_akt',,null());
::                Sprawdzam stan
                  _stan:=0;
                  {? _czy_pal=0
                  || {? _sctab.first()
                     || _stan:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_sctab.MAG,_tab.ZLREF
                           ,_sctab.SRDK,$_lok_dflt,'ZGP','T',1,_sctab,,1)
                     ?}
                  || _stan:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_pal.MGREF,_tab.ZLREF
                           ,_pal.RSC,_pal.EANLREF,'ZGP','T',1,_sctab,,1,,_kkod)
                  ?};

                  {? _can_continue>0
                  || {? _stan<=0
                     || _ok:=1;
::                      Sprawdzenie, czy błąd dotyczy niezgodnej cechy
                        {? _czy_pal=0
                        || _dk_c:=exec('FindAndGet','#table','DK_C',_sctab.DK_C,,,null());
                           _ok:=exec('dkc_compare','zl_limit',_dk_c,
                                 exec('FindAndGet','#table','ZLIM',_tab.ZLIMREF,,,null()))
                        ?};
                        {? _ok>0
                        || _msg:={? _czy_pal=0
                                 || 'Zerowy stan materiału %1 na dostawie %2, magazynie %3'@[_str_naz,_kkod,_str_mag]
                                 || 'Zerowy stan materiału %1 na palecie %2, magazynie %3'@[_str_naz,_kkod,_str_mag]
                                 ?}+{? _lok=0 || '.' || ', lokalizacja %1.'@[_str_lok] ?};
                           FUN.info(_msg)
                        ?}
                     || _add_empty:=0;
                        {? _ilosc>_stan
                        || _txt:='W magazynie \'%2\' nie ma wystarczającej ilości materiału \'%1\'.\n'
                                 'Pobierana ilość: %3.\nAktualny stan: %4.\n'
                                 'Pobrać maksymalną dostępną ilość na stanie?'@
                                 [_str_naz,_str_mag,form(_ilosc,,ST.DOKL),form(_stan,,ST.DOKL)];
                           {? FUN.ask(_txt)
                           || _ilosc:=_stan;
                              _add_empty:=1
                           || _can_continue:=0
                           ?}
                        ?};
                        {? _can_continue>0
                        || {? _czy_pal=0
                           || _tab.MGREF:=_sctab.MAG;
                              _tab.RSC:=_sctab.SRDK;
                              _tab.EANLREF:=$_lok_dflt;
                              {? _ilosc_str<>''
                              || _tab.IL:=_ilosc
                              ?};
                              _tab.PAL:=_tab.PAL_POZ:=''
                           || _tab.MGREF:=_pal.MGREF;
                              _tab.EANLREF:=_pal.EANLREF;
                              _tab.IL:=_ilosc;
                              _tab.PAL:=_pal.PAL;
                              _tab.PAL_POZ:=_pal.PAL_POZ;
                              _tab.RSC:=_pal.RSC
                           ?};
                           _tab.MG:=exec('FindAndGet','#table','MG',_tab.MGREF,,"MG.SYM",'');
                           _tab.SCEAN:={? _czy_pal=0 || _kkod || '' ?};
                           _tab.KODPAL:={? _czy_pal=0 || '' || _kkod ?};
                           _tab.STAN:=_stan;
                           _res:=0;
                           {? _add>0
                           || _res:=_tab.add();
                              {? _res>0 & _info>0
                              || _msg:=
                                    'Dołączono nową pozycję: surowiec %1, magazyn %2'@[_str_naz,_str_mag]
                                    +{? _tab.EANLREF='' || '' || ', lokalizacja %1'@[_str_lok] ?}
                                    +{? _czy_pal=0 || ', kod dostawy %1.'@[_kkod] || ', kod palety %1.'@[_kkod] ?};
                                 FUN.info(_msg)
                              ?}
                           |? _add=0
                           || _res:=_tab.put();
                              {? _res>0 & _info>0
                              || _msg:=
                                    {? _czy_pal=0
                                    || 'Do surowca %1 przypisano dostawę o kodzie %2'@[_str_naz,_kkod]
                                    || 'Do surowca %1 przypisano paletę o kodzie %2'@[_str_naz,_kkod]
                                    ?}+' z magazynu %1'[_str_mag]
                                    +{? _tab.EANLREF='' || '.' || ', lokalizacja %1.'@[_str_lok] ?};
                                 FUN.info(_msg)
                              ?}
                           ?};
                           {? _res>0
                           ||
::                            Aktualizuje zapis rozpiski/rezerwację
                              exec('rej_mat_update','ekioski');
::                            Zapamiętanie pozycji rekordów
                              {? _tab2.find_key(_tab.MREF)
                              || _ref2:=_tab2.ref()
                              ?}
                           ?};
                           {? _add_empty>0
                           ||
::                            Dodaje dodatkową pozycję do rozpiski (z pustą dostawą i zerową ilością)
                              _tab.cntx_psh();
                              _tab.SCEAN:='';
                              _tab.KODPAL:='';
                              _tab.EANLREF:='';
                              _tab.IL:=0;
                              _tab.RSC:='';
                              _tab.RSC_OLD:='';
                              _tab.PAL:='';
                              _tab.PAL_POZ:='';
::                            Przypisuje domyślny magazyn (określony na nielimicie zlecenia)
                              _tab.MG:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.MG().SYM",'');
                              _tab.MGREF:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"$ZLIM.MG",'');
                              {? _czy_pal=0
                              || _tab.prefix(_tab.MREF,_tab.MGREF,_tab.SCEAN,_tab.EANLREF)
                              || _tab.prefix(_tab.MREF,_tab.MGREF,_tab.KODPAL,_tab.EANLREF,_tab.RSC)
                              ?};
                              {? ~_tab.first()
                              || _tab.add()
                              ?};
                              _tab.cntx_pop()
                           ?}
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?};
         _loop:={? _czy_pal=0 || 0 || _pal.next() ?};
         _loop
      !};
::      _tab.prefix();
      _tab2.cntx_pop();
::    Ustawienie się na odpowiednich rekordach
      {? _tab2.seek(_ref2)
      || grp_disp(__ENV_REJ.TAB_N,__ENV_REJ.WER_N,1)
      ?};
      grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER);
      exec('set_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur','');
      exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
      exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur')
   || exec('set_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur','');
      {? _czy_pal=0
      || FUN.info('Nie znaleziono dostawy o podanym kodzie.'@)
      ?}
   ?}
|| {? _ilosc<0
   || FUN.info('Ilość musi być większa od zera.'@);
      exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur')
   ?}
?};
~~


\rej_mat_check_rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zwraca ilość surowca, która została zarezerwowana podczas rozpoczynania operacji.
::       Funkcja wykonywana dla aktualnie obsługiwanego rekordu PROD_REJ (tylko e-kiosk)
::   WE: _a - $ZLIM.ref() - ref limitu surowca, którego rezerwacje chcemy sprawdzić
::       [_b] - $DK.ref() - Ref dok. dostawy w postaci SQL, dla której sprawdzać rezerwacje
::       [_c] - kod palety - gdy podany, sprawdzane rezerwacje z podanym kodem
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_zlim:=_a;
_sc:={? var_pres('_b')=type_of('') || _b || '' ?};
_kodpal:={? var_pres('_c')=type_of('') || _c || '' ?};
_zlgd:=null();
{? var_pres('__ENV_REJ')>100
|| _zlgd:=__ENV_REJ.ZLGD
?};
{? _zlgd<>null()
|| _zl:=exec('FindAndGet','#table',ZLGD,_zlgd,,"ZLGD.ZL",null());
   REZ.cntx_psh();
   REZ.index('ZLREZR');
   REZ.prefix(_zl,'S','R',$_zlgd,);
   {? REZ.find_tab('first','ZLIM',,'=',_zlim,'SC',,'=',_sc)
   || {!
      |?
         {? _kodpal='' | _kodpal=REZ.KODPAL
         || _res+=REZ.ILR
         ?};
         REZ.find_tab('next','ZLIM',,'=',_zlim,'SC',,'=',_sc)
      !}
   ?};
   REZ.cntx_pop()
?};
_res


\leg_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Legenda w oknach operacji na ekiosku
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PROD_REJ#01#','#PROD_REJ#03');
~~


\second_line
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Druga linia informacji w okienkach w których taka druga linia występuje na samej górze okienka
::   WE: [_a] - PROD_REJ.ref() - PROD_REJ lub bieżący rekord
::   WY: STRING
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PROD_REJ.ref())
|| _ref:=_a
?};

_result:='';
_can_continue:=1;

PROD_REJ.cntx_psh();
{? _ref<>null()
|| PROD_REJ.prefix();
   {? PROD_REJ.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _ktm:=PROD_REJ.M().KTM;
   {? _ktm<>''
   || _result+='Produkt: %1'@[_ktm]
   ?};
   {? _result<>''
   || _result+=', '
   ?};
   _result+='Il.: %1 %2 '@[form(PROD_REJ.IL,,ST.DOKL),PROD_REJ.M().J().KOD];
   {? VEK.OPER<>''
   || {? _result<>''
      || _result+=', '
      ?};
      _result+='Oper.: %1'@[VEK.OPER]
   ?};
   {? PROD_REJ.ZGH<>null()
   || {? _result<>''
      || _result+=', '
      ?};
      _result+='Przewodnik: %1'@[PROD_REJ.ZGH().NRPRZ]
   ?}
?};
PROD_REJ.cntx_pop();
_result


\get_user_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zwraca wartość parametru użytkownika (obsługuje parametryzację per ekiosk, jeżeli parametr usera domyślny)
::   WE: _a - INTEGER - nr parametru
::       [_b] - INTEGER - nr typu parametru - wynik type_of
::   WY: ANY - wartość parametru
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_type:=~~;
{? var_pres('_b')=type_of(0)
|| _type:=_b
?};

_result:=~~;

_interface:=exec('interface','#params','U',,_nr,OPERATOR.USER().KOD);

_val_ekiosk:=~~;
_val_usr:=exec('get','#params',_nr,_type,OPERATOR.USER);
{? _val_usr=_interface.default() & OPERATOR.EKIOSK<>null()
||
:: Wartość parametru użytkownika jest domyślna, pobieram parametr z ekiosku
   _val_ekiosk:=exec('get','#params',_nr,_type,OPERATOR.EKIOSK)
?};

{? type_of(_val_ekiosk)>0
|| _result:=_val_ekiosk
|| _result:=_val_usr
?};
_result


\get_user_param_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zwraca wartość wdrożeniowego parametru użytkownika
::       (obsługuje parametryzację per ekiosk, jeżeli parametr usera domyślny)
::   WE: _a - INTEGER - nr parametru
::       [_b] - INTEGER - nr typu parametru - wynik type_of
::   WY: ANY - wartość parametru
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_nr:=_a;
_type:=~~;
{? var_pres('_b')=type_of(0)
|| _type:=_b
?};

_result:=~~;

_interface:=exec('interface','#params','U','T',_nr,OPERATOR.USER().KOD);

_val_ekiosk:=~~;
_val_usr:=exec('get_w','#params',_nr,_type,OPERATOR.USER);
{? _val_usr=_interface.default() & OPERATOR.EKIOSK<>null()
||
:: Wartość parametru użytkownika jest domyślna, pobieram parametr z ekiosku
   _val_ekiosk:=exec('get_w','#params',_nr,_type,OPERATOR.EKIOSK)
?};

{? type_of(_val_ekiosk)>0
|| _result:=_val_ekiosk
|| _result:=_val_usr
?};
_result


\dynamic_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Funkcja tworzenia dynamicznej brygady i jej przydzielania do operacji
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
VEK.A_DATA:=date();

eSelect.sel_exit:=0;

_old_top:=exec('get_value','#desktop','','ctr_user_info','fld_info@user_info');

P.cntx_psh();
P.win_edit('');
USERS.cntx_psh();
ZLBR.cntx_psh();
ZLBR.prefix();

_pole:={? VAR.A_ZGP().TPZ='T' | VAR.A_TPZL().WP='W' || 'TIME' || 'IL' ?};

eSelect.wer_zlbs:=exec('win_zlbs','ekioski');
eSelect.wer_prac:=exec('win_prac_simple','ekioski','B',_pole);

eLevel.up(P,eSelect.wer_prac,'DYNAMIC_BRYG');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);

   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

   _tab:=exec('elements_menuBrygP_table','ekioski');
   exec('load','#desktop','ctr_dyn_bryg','ekiosk_menu_bryg_d.dsk',,,,,_tab,1);
::   exec('set_enabled','#desktop','','ctr_menu_prac','btn_add@menu_bryg_d',ZLBR.f_size()>0);

   grp_disp(P,eSelect.wer_prac,0,1);
   grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
::   eLevel.change(ZLBR,eSelect.wer_zlbr);

:: Tytuł okienka
   exec('dynamic_top_info','ekioski');
   ~~
";

_grp:=USERS.grp_make('Brygada dynamiczna'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------

_before:="
   eLevel.change(P,eSelect.wer_prac);
   ~~
";
_after:="
   ~~
";
USERS.grp_sel(_grp,P,eSelect.wer_prac,,,,,{? VEK.DPI=96 || 20 || 16 ?},_before,_after,,,'maximized_with_title','p',1);
USERS.grp_splt(_grp,'pozioma_1','vertical','pozioma_3a');

_before:="
   eLevel.change(ZLBS,eSelect.wer_zlbs);
   ZLBS.index('BODIP');
   ZLBS.prefix(ZLBR.ref());
   P.cntx_psh();
   ~~
";
_after:="
   P.cntx_pop();
   ~~

";
USERS.grp_sel(_grp,ZLBS,eSelect.wer_zlbs,,,,,16,_before,_after,,,'maximized_with_title','z');
USERS.grp_splt(_grp,,'horizontal','pozioma_3b',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_dyn_bryg',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);

:: Przed uruchomieniem okienka tworzę dynamiczną brygadę
_zlbr_ref:=exec('zlbr_add','ekioski',VEK.P,date(),null(),'T');
ZLBR.prefix();
{? ZLBR.seek(_zlbr_ref)>0
||
:: Filtr na pracowników
   exec('dynamic_filtruj_p','ekioski');

   {? USERS.select(,1,-1)>0
   ||
::    Akceptacja okienka
      ~~
   ||
::    Wyjście z okienka bez akceptacji - usuwam brygadę dynamiczną
      {? _zlbr_ref<>null()
      || exec('zlbr_del','ekioski',_zlbr_ref)
      ?}
   ?}
|| FUN.emsg('Nie powiodło się utworzenie brygady dynamicznej'@)
?};

USERS.cntx_pop();
ZLBR.f_clear();
ZLBR.cntx_pop();
P.f_clear();
P.cntx_pop();

:: Przywracam info na górze
exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',_old_top);
:: Zamykamy tylko okno selekcji poziom nizej
{? eSelect.sel_exit=1 || sel_exit(); eSelect.sel_exit:=0 ?};

:: Po wykonaniu akcji w przycisku odswiezamy okno z rejestracji
grp_disp(PROD_REJ,eSelect.wer_rej,0,1);


eLevel.down();

~~


\elements_menuBrygD_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_bryg_d.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_add@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dołącz\ndo brygady'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_add_card@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Dołącz\nza pomocą\nkarty'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_this@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Ten pracownik\nbrygadzistą'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_del@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Usuń\npracownika\nz brygady'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_dynamic_accept@menu_bryg';
_tab.NAME:='<html><center>'+gsub('Akceptuj skład\nbrygady'@,'\n','<br>')+'</html>';
_tab.add();
_tab


\btn_dynamic_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przycisk 'Dołącz do brygady' dynamicznej
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_next_prac:=null();
win_activate('p');
P.cntx_psh();
{? P.f_active()>0
|| {? P.f_next()
   || _next_prac:=P.ref()
   ?}
|| {? P.next()
   || _next_prac:=P.ref()
   ?}
?};
P.cntx_pop();

_can_continue:=1;

{? (ZLBR.DO=date(0,0,0) | P.DZA<=ZLBR.DO) &
   (P.DZ=date(0,0,0) | ZLBR.OD<=P.DZ)
|| ~~
|| _can_continue:=0;
   _msg:='Okres zatrudnienia pracownika %1 (%2) '
         'nie pozwala na przypisanie go do brygady w okresie %3.'@[P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,$P.DZA+' ÷ '+$P.DZ,$ZLBR.OD+' ÷ '+$ZLBR.DO];
   FUN.emsg(_msg)
?};

_zlbs:=null();

{? _can_continue>0
|| _zlbs:=exec('zlbs_add','ekioski',ZLBR.ref(),P.ref(),ZLBR.OD,ZLBR.DO);

   exec('dynamic_filtruj_p','ekioski');

   {? _next_prac<>null() & P.f_active()>0
   || P.f_seek(_next_prac)
   || P.seek(_next_prac)
   ?};
   {? _zlbs<>null()
   || ZLBS.first();
      ZLBS.seek(_zlbs)
   ?}
?};

grp_disp(ZLBS,eSelect.wer_zlbs,0);
grp_disp(P,eSelect.wer_prac,0);

~~


\btn_dynamic_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przycisk 'Dołącz do brygady' dynamicznej
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;
win_activate('z');

{? _can_continue>0
|| exec('zlbs_usun','ekioski');
   exec('dynamic_filtruj_p','ekioski')
?};

grp_disp(ZLBS,eSelect.wer_zlbs,0);

grp_disp(P,eSelect.wer_prac,0);

~~


\btn_dynamic_accept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przycisk 'Akceptuj skład brygady' dynamicznej
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------

_result:=0;
_can_continue:=1;

_ile_w_zlbs:=exec('ile_w_zlbs','ekioski',ZLBR.ref());
PROD_REJ.get();
exec('recProdRej','ekioski');

_warszt:=exec('czy_zlec_warszt','ekioski',PROD_REJ.ZGP);
:: Kontrole czy można
{? PROD_REJ.PROBLEM='T'
|| _can_continue:=0;
   FUN.info('Operacja ma zgłoszony problem.\nPrzydzielanie zablokowane do czasu rozwiązania problemu.'@)
|? ZLBR.AKT='N'
|| _can_continue:=0;
   FUN.info('Brygada nie jest aktywna.'@+'\n'+'Nie można przydzielić pracy.'@)
|? _ile_w_zlbs=0
|| _can_continue:=0;
   FUN.info('Brak pracowników w składzie brygady.'@+'\n'+'Nie można przydzielić pracy.'@)
|? VEK.ILDOWYK<=0 & PROD_REJ.ZGP().TPZ='N' & _warszt='N'
|| _can_continue:=0;
   FUN.info('Cała ilość została już przydzielona na kartach pracy.'@)
|| {? exec('kontrola_nkap','ekioski',PROD_REJ.ZGP)=0
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||

   eSelect.na_dzien:=VEK.A_DATA;

:: Liczy sume na kartach pracy wypelnia zmienne VAR1.K_SUM_I, VAR1.K_SUM_T
   exec('sum_kap_zgp','zl_kap',PROD_REJ.ZGP);

   eSelect.il_wyk:=0;
   eSelect.i_time:=0;

   {? PROD_REJ.ZGP().TPZ='N' & _warszt='N'
   ||
::    Blank KAP i kontrola czy wszystko poprawnie wypełnione
      _can_continue:=exec('btn_przy_kap_il','ekioski',VEK.ILDOWYK,0)
   || eSelect.il_wyk:=0;
      eSelect.i_time:=PROD_REJ.ZGP().NTIME;
      _can_continue:=1
   ?}
?};

{? _can_continue>0
||
   _il_poz:=eSelect.il_wyk;
   _i_time:=eSelect.i_time;
   _zlbr:=ZLBR.ref();
   _na_dzien:=eSelect.na_dzien;

:: Tworzenie aktualnego KAP
   _kap_ref:=exec('kap_add','ekioski',PROD_REJ.ZGP,null(),_zlbr,_na_dzien,_il_poz,_i_time);
   {? _kap_ref=null()
   || _can_continue:=0;
      FUN.error(
         'Nie można dołączyć/przydzielić karty pracy.\n'
         'W dniu %1 została już przydzielona karta pracy.'@[$eSelect.na_dzien]
      )
   ?}
?};
{? _can_continue>0
|| sel_exit();
   _result:=1
?};
_result


\kap_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Wyświetla karty pracy dla aktualnego PROD_REJ
::   WE: [_a] - Rodzaj operacji: [0] - brygada, 1 - pracownik
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_prac:={? var_pres('_a')=type_of(0) || _a || 0 ?};
VEK.A_DATA:=date();

eSelect.sel_exit:=0;

USERS.cntx_psh();
ZLBR.cntx_psh();
ZLBR.prefix();

_pole:={? VAR.A_ZGP().TPZ='T' | VAR.A_TPZL().WP='W' || 'TIME' || 'IL' ?};

{? _prac
|| eSelect.wer_kap:=exec('win_kap','ekioski','P',_pole)
|| eSelect.wer_kap:=exec('win_kap','ekioski','B',_pole);
   eSelect.wer_zlbs:=exec('win_zlbs','ekioski',1)
?};
eLevel.up(P,eSelect.wer_prac,'PRZY_PRAC',"exec('kap_display','ekioski')");

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
_before:="
   exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);

   _tab:=exec('elements_menuBrygP_table','ekioski');
   exec('load','#desktop','ctr_menu_prac','ekiosk_menu_bryg_p.dsk',,,,,_tab,1);
   exec('set_visible','#desktop','','ctr_menu_prac','btn_del@menu_bryg_p'
        ,{? exec('upr_kierownik','ekioski') || 1 || 0 ?});
   exec('set_visible','#desktop','','ctr_menu_prac','btn_add@menu_bryg_p',0);
   exec('set_visible','#desktop','','ctr_menu_prac','btn_add_lst@menu_bryg_p',0);
   exec('set_visible','#desktop','','ctr_menu_prac','btn_add_card@menu_bryg_p',0);
   exec('set_visible','#desktop','','ctr_menu_prac','btn_del_prac@menu_bryg_p',0);

   grp_disp(KAP,eSelect.wer_kap,0,1);
   ~~
";

_grp:=USERS.grp_make('Podgląd kart pracy'@,_before,'',,,,,,'jterm');
exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
KAP.index('ZDP');
KAP.prefix(PROD_REJ.ZGP);
KAP.first();

{? _prac
|| _before:="
      eLevel.change(KAP,eSelect.wer_kap);
      ~~
   "
|| _before:="
      grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
      eLevel.change(KAP,eSelect.wer_kap);
      ~~
   "
?};
_after:="
   ~~
";
{? _prac
|| _after_refresh:="~~"
|| _after_refresh:="
      grp_disp(ZLBS,eSelect.wer_zlbs,0,1);
      eLevel.change(KAP,eSelect.wer_kap);
      ~~
   "
?};
USERS.grp_sel(_grp,KAP,eSelect.wer_kap,,_after_refresh,,,{? VEK.DPI=96 || 20 || 16 ?},_before,_after,,
              ,'maximized_with_title',,1);
{? ~_prac
|| USERS.grp_splt(_grp,'pozioma_1','vertical','pozioma_3a2');
   _before:="
      eLevel.change(ZLBS,eSelect.wer_zlbs);
      {? grp_empty(KAP,eSelect.wer_kap)
      || '#disable'
      || ZLBS.index('BODIP');
         ZLBS.prefix(KAP.B);
         ~~
      ?}
   ";
   USERS.grp_sel(_grp,ZLBS,eSelect.wer_zlbs,,,,,16,_before,,,,'maximized_with_title')
?};

USERS.grp_splt(_grp,,'horizontal','pozioma_3b',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_prac',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
USERS.win_sel(_grp);
USERS.select();

USERS.cntx_pop();
ZLBR.f_clear();
ZLBR.cntx_pop();

:: Zamykamy tylko okno selekcji poziom nizej
{? eSelect.sel_exit=1
|| sel_exit();
   eSelect.sel_exit:=0
?};
eLevel.down();
~~


\dynamic_filtruj_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Zakłada filtr na pracowników
::   WE: [_a] - ZLBR.ref - dynamiczna brygada
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZLBR.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

ZLBR.cntx_psh();
{? _ref<>null()
|| ZLBR.prefix();
   {? ZLBR.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   UD_FIR.cntx_psh();
   UD_FIR.index('UD_SKL');
   UD_FIR.prefix(REF.FIRMA);
   {? UD_FIR.first()
   || _ud_skl:=UD_FIR.UD_SKL
   || _ud_skl:=null()
   ?};
   UD_FIR.cntx_pop();
   _ud_def:=exec('szukaj_ud_def','schemat',
      exec('domyslny','schemat','PODZORG'),
      _ud_skl
   ).REF;


   _where:='P.REFERENCE not in (select ZLBS.P from ZLBS where ZLBS.BR=\'%1\')'[$ZLBR.ref()];
   exec('filtruj_p','schemat','TTE',_ud_def,'','T','T',,_where)
?};
ZLBR.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\dynamic_top_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Uzupełnia górną belkę informacją o utworzonej brygadzie
::   WE: [_a] - ZLBR.ref - brygada
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZLBR.ref())
|| _ref:=_a
?};

_can_continue:=1;

ZLBR.cntx_psh();
{? _ref<>null()
|| ZLBR.prefix();
   {? ZLBR.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _info:='';
   {? ZLBR.P<>null()
   || _info:='Brygada: %1, brygadzista: %2 %3'@[ZLBR.NAZ,ZLBR.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE]
   || _info:='Brygada: %1'@[ZLBR.NAZ]
   ?};
   exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',_info);
   ~~
?};
ZLBR.cntx_pop();
~~


\btn_dynamic_brygadzista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.14]
:: OPIS: Przycisk 'Ten pracownik brygadzistą'
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
win_activate('z');
exec('prac2bryg','ekioski',0);
exec('dynamic_top_info','ekioski');
grp_disp(ZLBS,eSelect.wer_zlbs,0);
grp_disp(P,eSelect.wer_prac,0);
~~


\rej_mat_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Aktualizuje zapis rozpiski rozliczeń surowca nielimitowanego wraz z powiązaną rezerwacją.
::       Uruchamiana dla rekordu tabeli tymczasowej __ENV_REJ_MAT.TAB.
::   WE: [_a] - NUMBER - miejsce wywołania: [0] - w trakcie rozpisywania surowców na e-kiosku
::                                           1 - zakończenie rejestracji wykonania produkcji (praca na ZLGD)
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? var_pres('__ENV_REJ')>100 & __ENV_REJ.TYPE=0
|| _zlgd:=__ENV_REJ.ZLGD;
   _tab:=__ENV_REJ.TAB;
   _czy_pal:=_tab.PAL<>'';
   REZ.cntx_psh();
   _rez_mask:=(REZ.name()-2)+'__';
   {? REZ.name()<>_rez_mask || REZ.use(_rez_mask) ?};
   _il:=_tab.IL;
   _zl:=exec('FindAndGet','#table',ZL,_tab.ZLREF,,,null());
   _zlim:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,,null());
   _czy_rez:=exec('zlim_il_rez','zl_nlimit',_tab.ZLIMREF);
   _ktm:=exec('FindAndGet','#table',M,_tab.MREF,,"ref()",null);
   _mg:=exec('FindAndGet','#table',MG,_tab.MGREF,,"ref()",null);
   _dk_c:=exec('FindAndGet','#table','DK_C',_tab.DKCREF,,"DK_C.ref",null);
   {? var_pres('_sctab')>100 || obj_del(_sctab) ?};
   {? _tab.RSC<>''
   || {? _czy_pal=0
      || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),_tab.SCEAN)
      || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),,,,_tab.RSC)
      ?};
      _sctab.prefix()
   || _sctab:=~~
   ?};
   {? _il>0
   ||
::    Sprawdzam dostępny stan magazynowy dla podanej pozycji
      _stan:=0;
      {? VEK.TERM<>'T'
      ||
::       Bez przypisanej dostawy
         {? _dk_c<>null()
         || exec('obl_stan','magazyn_stan',_ktm,1,_mg,,,date(),-2,,,,_dk_c)
         || exec('obl_stan','magazyn_stan',_ktm,1,_mg,,,date(),-2)
         ?};
         _stan:=BEER.SD;
         {? _czy_rez>0
         || _stan+=_czy_rez
         ?}
      ||
         '-*-e-kioski-*-';
         _stan:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_tab.MGREF,_tab.ZLREF,_tab.RSC
                     ,_tab.EANLREF,'ZGP','T',1,_sctab,,,,_tab.KODPAL)
      ?};
      {? _il<=_stan
      ||
::       Ilość już rozpisana
         {? VEK.TERM<>'T'
         || _il_rozp:=0
         || _il_rozp:=exec('rej_mat_chk_stan','zl_common',null(),_tab.ZLIMREF,_tab.MGREF,_tab.ZLREF,_tab.RSC
                              ,_tab.EANLREF,'ZGP','T',1,_sctab,,,1,_tab.KODPAL)
         ?};
         _dorozp:=_tab.IL-_il_rozp;
         {? _dorozp<0
         || _plus:=0;
            _dorozp:=_dorozp*-1
         || _plus:=1
         ?};
         _ilr:=0;
         _next:=0;
         _loop:=_plus>0 & _czy_rez;
         _first:={? _tab.KODPAL<>''
                 || _sctab.prefix();
                    _sctab.first()
                 |? _tab.SCEAN<>''
                 || _sctab.prefix(_tab.SCEAN,_tab.MGREF,_tab.MREF);
                    _sctab.first()
                 || {? _loop>0
                    || REZ.index('ZLMREZ2');
                       REZ.prefix(_zl,'S','B',_ktm,'P',_tab.ZLIMREF,);
                       REZ.first()
                    ?};
                    1
                 ?};
         {? _first>0
         ||
            {!
            |?
               {? 1
               ||
                  {? _plus>0
                  || _rezref:='';
                     _sc:='';
                     _srdk:='';
                     {? _tab.RSC=''
                     || {? _loop>0
                        || _ilr:={? _dorozp<=REZ.ILR || _dorozp || REZ.ILR ?};
                           _rezref:=$REZ.ref();
                           _sc:=REZ.SC;
                           _srdk:=REZ.SC
                        || _ilr:=_dorozp;
                           _next:=0
                        ?}
                     ||
                        '-*-e-kioski-*-';
::                      Wyliczam stan dostawy
                        {? _loop>0
                        || _sta:=exec('sc_il_rez','zl_nlimit',_sctab.SRDK,_tab.ZLIMREF)
                        || _sta:=exec('obl_stsc','magazyn_stan',_sctab.RDK,_sctab.NDK,_mg,_ktm,date(0,0,0))
                        ?};
                        {? _sta>=_dorozp
                        || _ilr:=_dorozp
                        || _ilr:=_sta
                        ?}
                     ?}
                  ?};
::                Rezerwacja tymczasowa surowców
                  REZ.cntx_psh();
                  REZ.prefix();
                  REZ.blank();
                  _put:=0;
                  '-*-e-kioski-*-';
::                Sprawdza czy już była zrobiona rezerwacja
                  {? VEK.TERM='T'
                  || _rsc:={? _loop>0
                           || {? _tab.RSC<>'' || _sctab.SRDK  || _srdk ?}
                           || {? _tab.RSC_OLD<>'' || _sctab.SRDK || '' ?}
                           ?};
                     {? REZ.find_tab(,'ZLIM',,'=',_tab.ZLIMREF,'REFREA',,'=',$_zlgd
                           ,'SC',,'=',_rsc,'KODPAL',,'=',_tab.KODPAL)
                     ||
::                      Zwiększenie rozliczanej ilości
                        {? _plus>0
                        || _put:=1
                        ||
::                         Zmniejszenie rozliczanej ilości
                           {? REZ.ILR<=_dorozp
                           ||
::                            Niewystarczająca ilość na rezerwacji, rezerwacja jest usuwana
                              _ilr:=0;
                              _dorozp-=REZ.ILR;
                              REZ.del()
                           || _put:=1;
                              _ilr:=_dorozp
                           ?}
                        ?}
                     ?}
                  ?};
                  _add:=0;
                  {? _ilr>0 | (_where>0 & _put>0)
                  ||
::                   Ilość na rezerwacji przed modyfikacją
                     _ilb:=0;
                     {? ~_put
                     || ''
                     || _ilb:=REZ.ILR
                     ?};
                     {? var_pres('__ZLIM4REZ')>100 || obj_del(__ZLIM4REZ) ?};
                     __ZLIM4REZ:=exec('obj4rez','zl_nlimit');
                     __ZLIM4REZ.ZLGD:=$_zlgd;
                     __ZLIM4REZ.BTERM:={? _where=0 || 'N' || 'T' ?};
                     __ZLIM4REZ.ZL_REZ:='R';
                     __ZLIM4REZ.KODPAL:=_tab.KODPAL;
                     _oddt:=date();
                     {? _where=0
                     || _dodt:=exec('FindAndGet','#table',ZL,_zl,,"ZL.DTR",date());
                        {? _dodt<date() || _dodt:=date() ?}
                     || _dodt:=date(0,0,0)
                     ?};
                     _ilosc:={? _plus>0 || _ilr || _ilr*-1 ?};
                     _refsc:=
                        {? _loop>0
                        || {? _tab.RSC<>'' || _sctab.SRDK || _srdk ?}
                        || {? _tab.RSC<>'' || _sctab.SRDK || '' ?}
                        ?};
                     {? var_pres('_rez')>100 || obj_del(_rez) ?};
                     _rez:=exec('update','rezerwacje','ZLIM',_zlim,_mg,_ktm,_ilosc,_refsc,
                        'B',_tab.EANLREF,2,,,,,,,_oddt,_dodt,_dk_c,,,,,,,1);
                     _add:=_rez.WYN;
                     {? _add>0
                     ||
::                      Podczytanie rezerwacji
                        {? _rez.REF<>null()
                        || REZ.seek(_rez.REF,ref_name(_rez.REF),1)
                        ?};
                        {? _loop>0
                        || _il_diff:=REZ.ILR-_ilb;
                           {? _il_diff>0
                           || {? _tab.RSC=''
                              || _ref:=_rezref
                              || _ref:=_sctab.SRDK
                              ?};
                              exec('rez4rejmat','ekioski',_ref,_tab.ZLIMREF,_il_diff)
                           ?}
                        ?};
                        {? _where>0 || exec('aktu_rez','rezerwacje',_ktm,REZ.NRK,REZ.ILR) ?};
                        _rsc:=
                           {? _loop>0
                           || {? _tab.RSC<>'' || _sctab.SRDK || _sc ?}
                           || {? _tab.RSC<>'' || _sctab.SRDK || '' ?}
                           ?};
                        {? _put>0
                        || {? _where=0
                           || {? _loop>0 & _tab.SCEAN='' & _tab.KODPAL='' & _rsc<>''
                              ||
::                               Przypadek, gdy jest rezerwacja a modyfikowany rekord bez przypisanej dostawy/palety
                                 _tab.IL-=_ilr;
                                 _tab.put();
                                 _tab.cntx_psh();
                                 {? (REZ.KODPAL<>'' & _tab.find_tab(,'MREF',,'=',$REZ.M,'MGREF',,'=',$REZ.MG
                                      ,'KODPAL',,'=',REZ.KODPAL))
                                    | (REZ.KODPAL='' & _tab.find_tab(,'MREF',,'=',$REZ.M,'MGREF',,'=',$REZ.MG
                                      ,'SCEAN',,'=',exec('FindAndGet','#table',SC,_rsc,,"SCEAN",'')))
                                 || _tab.IL+=_ilr;
                                    _tab.put()
                                 ?};
                                 _tab.cntx_pop()
                              || _tab.RSC_OLD:=_rsc;
                                 _tab.put()
                              ?}
                           ?}
                        || {? _where=0
                           || {? _loop>0 & _tab.SCEAN='' & _tab.KODPAL='' & _rsc<>''
                              || _tab.IL-=REZ.ILR;
                                 _tab.put();
                                 _tab.cntx_psh();
                                 _tab.IL:=REZ.ILR;
                                 _tab.RSC:=_rsc;
                                 _tab.RSC_OLD:=_rsc;
                                 _tab.SCEAN:={? _czy_pal=0 || exec('FindAndGet','#table',SC,_rsc,,"SCEAN",'') || '' ?};
                                 _tab.KODPAL:=REZ.KODPAL;
                                 _tab.add();
                                 _tab.cntx_pop()
                              || _tab.RSC:=_rsc;
                                 _tab.RSC_OLD:=_rsc;
                                 _tab.put()
                              ?}
                           ?}
                        ?}
                     ?}
                  ?};
                  REZ.cntx_pop();
                  {? _add>0 || _dorozp-=_ilr ?}
               ?};
               _next:={? _loop>0
                      || {? _tab.RSC='' || REZ.next() || _sctab.next() ?}
                      || {? _tab.RSC<>'' || _sctab.next() || 0 ?}
                      ?};
               {? _loop>0 & _next=0
               || _loop:=0;
                  _next:={? _tab.RSC<>'' || _sctab.first() || 1 ?}
               ?};
               (_dorozp>0 | _where>0) & _next>0
            !};
            exec('obl_stan','magazyn_stan',_ktm,1,_mg)
         ?}
      ?}
   ||
::    Nieprawidłowa ilość, usuwam rezerwacje jeżeli istniały
::    '-*-e-kioski-*-';
::    Sprawdzam czy już była zrobiona rezerwacja
      {? VEK.TERM='T'
      || REZ.cntx_psh();
         REZ.prefix();
         _next:=0;
         _first:={? _tab.KODPAL<>''
                 || _sctab.prefix();
                    _sctab.first()
                 |? _tab.SCEAN<>''
                 || _sctab.prefix(_tab.SCEAN,_tab.MGREF,_tab.MREF);
                    _sctab.first()
                 || 1
                 ?};
         {? _first>0
         || {!
            |?
               _sc:={? _tab.RSC_OLD<>'' || _sctab.SRDK || '' ?};
               {? REZ.find_tab(,'ZLIM',,'=',_tab.ZLIMREF,'REFREA',,'=',$_zlgd,'SC',,'=',_sc,'KODPAL',,'=',_tab.KODPAL)
               || REZ.del()
               ?};
               _next:={? _tab.RSC<>'' || _sctab.next() || 0 ?};
               _next>0
            !};
            exec('obl_stan','magazyn_stan',_ktm,1,_mg)
         ?};
         REZ.cntx_pop()
      ?}
   ?};
   REZ.cntx_pop()
?};
~~


\btn_usun_rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisk Usuń rezerwacje w rozpisce surowców
::----------------------------------------------------------------------------------------------------------------------
{? __ENV_REJ.TYPE || return(exec('btn_usunlrez','ekioski1')) ?};

_txt:='';
:: _type: 0 - pojedyncza pozycja, wszystkie pozcyje danego surowca, 2 - wszystkie surowce
_type:=0;
_continue:=0;
_act_tab:=~~;
:: określam z jakiego okna został wywołany przycisk i ustalam zakres usuwanych danych
{? var_pres('__ENV_REJ')>100
|| _tab:=__ENV_REJ.TAB;
   _tab2:=__ENV_REJ.TAB_N;

:: Sprawdzam czy są jakies surowce nielimitowane do rozpisania
   {? _tab2.size()<=0
   || FUN.info('Brak danych. Funkcja nieaktywna.'@);
      return()
   ?};

   {? eLevel.cur_tab()=_tab2
   || _txt:='Usunąć rezerwacje do wszystkich surowców czy tylko wybranego (%1 - %2)\n'
            'Wyczyszczone zostaną również pola \'Ilość pobrana\' oraz \'Kod dostawy\' wybranych pozycji.'@
            [_tab.KTM,_tab.M];
      _type:=_continue:=FUN.choice(_txt,,'Usuń wybrane'@,'Usuń wszystkie'@)
   |? eLevel.cur_tab()=_tab
   || _txt:='Usunąć rezerwacje powiązane z wybraną pozycją surowca %1 - %2?\n'
            'Wyczyszczone zostaną również pola \'Ilość pobrana\' oraz \'Kod dostawy\'.'@[_tab.KTM,_tab.M];
      _continue:=FUN.ask(_txt)
   ?};
   {? _continue>0
   || _tab.cntx_psh();
      _tab2.cntx_psh();
      {? _type=0
      ||
::       Czyszczenie danych do pojedynczej pozycji
         _tab.IL:=0;
         exec('rej_mat_update','ekioski');
         _tab.SCEAN:='';
         _tab.KODPAL:='';
         _tab.RSC:='';
         _tab.RSC_OLD:='';
         _tab.EANLREF:='';
         _tab.PAL:='';
         _tab.PAL_POZ:='';
::       Przywracam domyślny magazyn (określony na nielimicie zlecenia)
         _tab.MG:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.MG().SYM",'');
         _tab.MGREF:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"$ZLIM.MG",'');
         _tab.put();
         _tab.cntx_psh();
         _tab.index(__ENV_REJ.NDX2);
::         _tab.prefix(_tab.MREF,_tab.MGREF,_tab.SCEAN,_tab.EANLREF);
         _tab.prefix(_tab.MREF);
         {? _tab.size()>1
         || _tab.del()
         ?};
         _tab.cntx_pop()
      |? _type=1
      ||
::       Czyszczenie danych wszystkich pozycji danego surowca
         _tab.index(__ENV_REJ.NDX);
         _tab.prefix(_tab2.MREF);
         _first:=0;
         _loop:=0;
         {? _tab.first()
         || {!
            |?
               _tab.IL:=0;
               exec('rej_mat_update','ekioski');
               _tab.SCEAN:='';
               _tab.KODPAL:='';
               _tab.RSC:='';
               _tab.RSC_OLD:='';
               _tab.EANLREF:='';
               _tab.PAL:='';
               _tab.PAL_POZ:='';
::              Przywracam domyślny magazyn (określony na nielimicie zlecenia)
               _tab.MG:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.MG().SYM",'');
               _tab.MGREF:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"$ZLIM.MG",'');
               _tab.put();
               {? _first=0
               || _first:=1;
                  _loop:=_tab.next()
               || _loop:=_tab.del()
               ?};
               _loop>0 & _tab.size()>1
            !}
         ?}
      |? _type=2
      ||
::       Czyszczenie danych wszystkich surowców
         _tab.index(__ENV_REJ.NDX);
         {? _tab2.first()
         ||
            {!
            |?
               _tab.prefix(_tab2.MREF);
               _first:=0;
               _loop:=0;
               {? _tab.first()
               || {!
                  |?
                     _tab.IL:=0;
                     exec('rej_mat_update','ekioski');
                     _tab.SCEAN:='';
                     _tab.KODPAL:='';
                     _tab.RSC:='';
                     _tab.RSC_OLD:='';
                     _tab.EANLREF:='';
                     _tab.PAL:='';
                     _tab.PAL_POZ:='';
::                   Przywracam domyślny magazyn (określony na nielimicie zlecenia)
                     _tab.MG:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"ZLIM.MG().SYM",'');
                     _tab.MGREF:=exec('FindAndGet','#table',ZLIM,_tab.ZLIMREF,,"$ZLIM.MG",'');
                     _tab.put();
                     {? _first=0
                     || _first:=1;
                        _loop:=_tab.next()
                     || _loop:=_tab.del()
                     ?};
                     _loop>0 & _tab.size()>1
                  !}
               ?};
               _tab2.next()
            !}
         ?}
      ?};
      _tab.cntx_pop();
      _tab2.cntx_pop();
      grp_disp(_tab2,__ENV_REJ.WER_N);
::    Przywracam aktywność okienka na okno z pozycjami
      {? _type=0
      || grp_disp(_tab,__ENV_REJ.WER)
      ?}
   ?}
?};
~~


\btn_accept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisk Akceptuj w oknie rozliczania surowców/badań po starcie operacji
::----------------------------------------------------------------------------------------------------------------------
_type:={? var_pres('__ENV_REJ')>100 || __ENV_REJ.TYPE || 0 ?};
_mpal:={? var_pres('__ENV_REJ')>100 || __ENV_REJ.MGP || 0 ?};
{? _type>0
|| exec('btn_gen_wyd','ekioski',_mpal)
|| sel_exit()
?};
~~


\btn_calc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisku Parametryzowany Kalkulator w oknie rejestracji wykonania - obsługa paramatryzowanego
::       kalkulatora za pomocą wtyczki EKIOSK_CALC_IL_001
::   WE: [_a] - miejsce wywołania (panel): [0] - menu_end, 1 - menu_wyr
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _where=0
|| _json:=Plugin.run('EKIOSK_CALC_IL_001',PROD_REJ.ZL,
      {? PROD_REJ.SRODZ='ZL' || PROD_REJ.ZGP || PROD_REJ.PL_OPER().ZGP ?},null(),null(),null())
|| _tab:=__ENV_WYR.TAB_P;
   _ktm:=exec('FindAndGet','#table',M,_tab.MREF,,,null());
   _mg:=exec('FindAndGet','#table',MG,_tab.MGREF,,,null());
   _eanl:=exec('FindAndGet','#table',EANL,_tab.EANLREF,,,null());
   _json:=Plugin.run('EKIOSK_CALC_IL_001',PROD_REJ.ZL,
      {? PROD_REJ.SRODZ='ZL' || PROD_REJ.ZGP || PROD_REJ.PL_OPER().ZGP ?},_ktm,_mg,_eanl)
?};
_err:=1;
{? type_of(_json)=type_of('') & _json<>''
|| _tab_plugin:=json_parse(_json);
   {? type_of(_tab_plugin)>100 & obj_len(_tab_plugin)=2
   || _err:=0;
      _info:=0;
::    Zamieniam liczby ujemne i wartości nieliczbowe na zera
      _size:=obj_len(_tab_plugin);
      {! _it:=1.._size
      |!
         _val1:=_tab_plugin[_it];
         _tab_plugin[_it]:={? type_of(_val1)=type_of(0) || _val1 || {? _info=0 || _info:=1 ?};0 ?};
         {? _tab_plugin[_it]<0
         || {? _info=0 || _info:=1 ?};
            _tab_plugin[_it]:=0
         ?}
      !};
      {? _where=1
      || exec('set_value','#desktop','','ctr_menu_wyr','fld_il@menu_wyr',$_tab_plugin[1]);
         exec('set_value','#desktop','','ctr_menu_wyr','fld_il_brak@menu_wyr',$_tab_plugin[2])
      || exec('set_value','#desktop','','ctr_menu_end','fld_il@menu_end',$_tab_plugin[1]);
         exec('set_value','#desktop','','ctr_menu_end','fld_il_brak@menu_end',$_tab_plugin[2])
      ?};
::    Aktualizacja dostępności pola Rodzaj braku
      {? _where=0 & _err=0
      || exec('il_brak_ae','ekioski')
      ?};
      {? _info>0
      || FUN.info(
            'Kalkulacja zwróciła liczby ujemne lub elementy nie będacę liczbami.\n'
            'Wartości tych elementów zamieniono na zera.'@
         )
      ?}
   ?}
?};
{? _err>0
|| FUN.info('Kalkulacja nie powiodła się — błędny zestaw danych.'@)
?};
~~


\btn_bad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisku Badanie w oknie rejestracji wykonania - rejestrowanie wyników badań
::       do operacji zlecenia
::   WE: _a - miejsce wywołania:
::            [1] - przy rejestracji wykonania produkcji
::            0 - przy starcie operacji
::----------------------------------------------------------------------------------------------------------------------
_where:={? var_pres('_a')=type_of(0) || _a || 1 ?};
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

::{? PROD_REJ.SRODZ='PX' || FUN.info('Funkcja niedostępna dla pozycji z planu strategicznego.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');
_bryg:=exec('FindAndGet','#table',ZGP,_zgp,,"ZGP.BRYG",'');
{? ~_zgp
|| FUN.info('Pozycja planu nie jest powiązana z pozycją przewodnika.'@);
   return()
?};

_badh:=null();

_zlgd:={? _bryg='T'
       || exec('findZlgdZ','ekioski',_zgp,null(),VEK.A_ZLBR,PROD_REJ.GROPS)
       || exec('findZlgdZ','ekioski',_zgp,VEK.P,null(),PROD_REJ.GROPS)
       ?};
{? _zlgd<>null()
|| BADH.cntx_psh();
   BADH.index('TZLGD');
   BADH.prefix('C',_zlgd,ref_name(_zlgd));
   {? BADH.first()
   || _badh:=BADH.ref()
   ?};
   BADH.cntx_pop()
?};

{? _badh=null()
|| FUN.info('Operacja nie jest powiązana z badaniem.'@);
   return()
?};

_can_continue:=1;

exec('openmask','zl_common',PROD_REJ.ZL);

{? _can_continue
||
   exec('set_var_a','ekioski',_zgp);
   VAR.A_KTL:=PROD_REJ.ZL().TKTL;
   __BAD_WHERE:=_where;
   USERS.cntx_psh();
   BADP.cntx_psh();
   BADP.clear();
   BADP.f_set(,'join BADPAR','BADP.BADH=:_a and BADPAR.TYP in (\'R\',\'W\',\'P\',\'S\')',_badh);

   eLevel.up(BADP,'WER_B_OP','Wyniki badań');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
   _before:="
      exec('load','#desktop','ctr_user_info','ekiosk_user_info.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
      exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

      exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
::    nav
      exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
      exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);

      _tab:=exec('elements_menuBad_table','ekioski');
      exec('load','#desktop','ctr_menu_bad','ekiosk_menu_bad.dsk',,,,,_tab,1);
      exec('set_visible','#desktop','','ctr_menu_bad','btn_accept@menu_bad',~__BAD_WHERE);
      ~~
   ";

   _grp:=USERS.grp_make('Wyniki badań'@,_before,'bad_grp',,,,,,'jterm');
   exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 2 || 1 ?},eSelect.grp_width,,,,,,);
   USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
   _before:="
::    Czyszczenie wartości pól
      exec('set_value','#desktop','','ctr_menu_bad','fld_val_str@menu_bad','');
      exec('set_value','#desktop','','ctr_menu_bad','fld_val_real@menu_bad','');
      ~~
   ";

   _after_refresh:="
      _typ:=BADP.BADPAR().TYP;
      exec('set_visible','#desktop','','ctr_menu_bad','fld_val_str@menu_bad',{? _typ='S' || 1 || 0 ?});
      exec('set_visible','#desktop','','ctr_menu_bad','fld_val_real@menu_bad',{? _typ<>'S' & _typ<>'W' || 1 || 0 ?});
      exec('set_visible','#desktop','','ctr_menu_bad','radio_tak@menu_bad',{? _typ='W' || 1 || 0 ?});
      exec('set_visible','#desktop','','ctr_menu_bad','radio_nie@menu_bad',{? _typ='W' || 1 || 0 ?});
      exec('set_visible','#desktop','','ctr_menu_bad','lab_val@menu_bad',{? _typ='W' || 1 || 0 ?});
      exec('set_value','#desktop','','ctr_menu_bad','fld_val@menu_bad','');
      {? _typ='W'
      || {? BADP.VALUE=0
         || exec('set_value','#desktop','','ctr_menu_bad','radio_tak@menu_bad','false');
            exec('set_value','#desktop','','ctr_menu_bad','radio_nie@menu_bad','true')
         || exec('set_value','#desktop','','ctr_menu_bad','radio_tak@menu_bad','true');
            exec('set_value','#desktop','','ctr_menu_bad','radio_nie@menu_bad','false')
         ?}
      ?};
      ~~
   ";
   _actions:=BADP.actions('WER_B_OP','DPUWALSK:DA');
   USERS.grp_sel(_grp,BADP,'WER_B_OP',,_after_refresh,,,{? VEK.DPI=96 || 8 || 7 ?},_before,,,,
                 'maximized_with_title','sur_wer_n',1);
   USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
   exec('create','#desktop',USERS,'ctr_menu_bad',_grp,{? VEK.DPI=96 || 15 || 12 ?},eSelect.grp_width,,,,1);
   USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
   exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
   USERS.win_sel(_grp);
   USERS.select();
   USERS.cntx_pop();

   BADP.actions('WER_B_OP',,_actions);
   {? BADP.f_active() || BADP.f_clear() ?};
   BADP.cntx_pop();
   VAR_DEL.delete('__BAD_WHERE');
   eLevel.down()
?};
~~


\btn_bad_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Przycisk Zapisz w oknie rejestracji badania
::----------------------------------------------------------------------------------------------------------------------
{? BADP.f_size()=0
|| FUN.info('Brak danych do modyfikacji. Funkcja nieaktywna.'@);
   exec('set_value','#desktop','','ctr_menu_bad','fld_val_str@menu_bad','');
   exec('set_value','#desktop','','ctr_menu_bad','fld_val_real@menu_bad','');
   return()
?};
BADPAR.cntx_psh();
BADP.BADPAR();
:: Pobranie wartości z kontrolki
_val_str:={? BADPAR.TYP='W'
          || exec('get_value','#desktop','','ctr_menu_bad','radio_tak@menu_bad')
          |? BADPAR.TYP='S'
          || exec('get_value','#desktop','','ctr_menu_bad','fld_val_str@menu_bad')
          || exec('get_value','#desktop','','ctr_menu_bad','fld_val_real@menu_bad')
          ?};

{? _val_str<>''
|| _can_continue:=1;

:: walidacja typu zmiennej
   {? BADPAR.TYP='D'
::    | BADPAR.TYP='S'
   ||
::    Typy nieobsługiwane na e-kiosku
      FUN.info('Typ parametru nie jest obsługiwany podczas rejestracji badań na e-kiosku.'@);
      BADPAR.cntx_pop();
      return(~~)
   ?};

   {? BADPAR.TYP='S' | BADPAR.TYP='W'
   || {?  BADPAR.TYP='S'
      || _val:=_val_str;
         {? +_val>30
         || FUN.info('Wartość parametru może składać się z maksymalnie 30 znaków.\n'
                     'Wpisaną wartość skrócono do określonej liczby znaków.'@);
            _val:=30+_val
         ?}
      || _val:={? _val_str='true' || 'T' || 'N' ?}
      ?};
      {? BADPAR.TYP='W'
         & (~-_val<>'N' & ~-_val<>'T')
      || FUN.info('Parametr może przyjmować tylko wartości T lub N.'@);
         _can_continue:=0
      || {? BADPAR.TYP='W'
         || BADP.WAR:=~-_val;
            BADP.VALUE:={? BADP.WAR='T' || 1 || 0 ?}
         || BADP.WAR:=_val;
            BADP.VALUE:=0
         ?}
      ?}
::   |? BADPAR.TYP='D'
::   || BADP.WAR:=BADVAR.WARD$1;
::      BADP.VALUE:=#BADVAR.WARD
   |? BADPAR.TYP='R' | BADPAR.TYP='P'
   || _val:=exec('str2real','#convert',_val_str);
      {? BADPAR.TYP='P' & (_val<0 | _val>100)
      || FUN.info('Parametr jest wartością procentową i może zawierać się w zakresie od %1 do %2.'@['0','100']);

         _can_continue:=0
      || BADP.WAR:=form(_val,,,'9.');
         BADP.VALUE:=_val
      ?}
   ?};
   {? _can_continue>0
   || BADP.MAD_DT:=date();
      BADP.MAD_TM:=time();
      BADP.MAD_USER:=OPERATOR.USER;
      BADP.put();
      grp_disp(BADP,'WER_B_OP')
   ?};
   exec('set_value','#desktop','','ctr_menu_bad','fld_val_str@menu_bad','');
   exec('set_value','#desktop','','ctr_menu_bad','fld_val_real@menu_bad','')
?};
BADPAR.cntx_pop();
~~


\elements_menuBad_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_bad.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='btn_bad_save@menu_bad';
_tab.NAME:='Zapisz'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='lab_val@menu_bad';
_tab.NAME:='Wartość'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_val_str@menu_bad';
_tab.NAME:='Wartość'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_val_real@menu_bad';
_tab.NAME:='Wartość'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='radio_tak@menu_bad';
_tab.NAME:='Tak'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='radio_nie@menu_bad';
_tab.NAME:='Nie'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_accept@menu_bad';
_tab.NAME:='<html><center>'+'Akceptuj'@+'</html>';
_tab.add();

_tab


\grop_potw_menu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisku POTWIERDŹ OPERACJE - potwierdzania zarejestrowanych operacji grupowych
::   WE: [_a] - miejsce wywołania: [0] - panel brygadzisty, 1 - panel pracownika
::       [_b] - zwracać tylko liczbę dostępnych operacji (bez wyświetlania panelu): 1 - tak, [0] - nie
::----------------------------------------------------------------------------------------------------------------------
_prac:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_count_only:={? var_pres('_b')=type_of(0) || _count_only:=_b || 0 ?};
_count:=0;

{? ~_count_only
|| VAR_DEL.delete('__GROP','__ENV_REJ');
   __GROP:=obj_new('tab','win','exit','selected');
   __GROP.exit:=1;
   __GROP.selected:=obj_new('PB');
   __GROP.selected.PB:='N';
   __GROP.tab:=tab_tmp(2,
      'POTW','STRING[1]','Potwierdzony'@,
      'DT','DATE','Data'@,
      'ILOSC','REAL','Ilość'@,
      'OPERATOR','STRING[255]','Operator'@,
      'OK','STRING[1]','Operacja zakończona'@,
      'ZLGD','STRING[16]','$ZLGD.ref()',
      'STARTD','DATE','Data początkowa'@,
      'STARTT','TIME','Godzina początkowa'@,
      'ENDD','DATE','Data końcowa'@,
      'ENDT','TIME','Godzina końcowa'@,
      'TIME','REAL','Czas rzeczywisty'@,
      'TIME_P','REAL','Czas kalkulowany'@,
      'OPER','STRING[50]','Operacja'@,
      'GROP','STRING[255]','Grupa operacji'@,
      'WYDZIAL','STRING[8]','Wydział',
      'P','STRING[16]','P.ref()',
      'B','STRING[16]','ZLBR.ref()',
      'GROP_REF','STRING[16]','GROP.ref()',
      'RES_SYM','STRING[60]','Symbol zasobu'
   )
?};
:: wykonania dla przewodników
ZLGD.cntx_psh();
_zlgd_names:=ZLGD.names();
{? _zlgd_names.first()
||
   {!
   |?
::    Przechodzę tylko po maskach danego oddziału
      {? (6+_zlgd_names.NAME)+1=VEK.INIT_ODD
      ||
::       Określam wydział
         ZLGD.use(_zlgd_names.NAME);
         ZLGD.cntx_psh();
         ZLGD.index('WYDO');
         {? VEK.A_WYD<>null()
         || _sch:=exec('domyslny','schemat','PODZORG');
            UD_DEF.cntx_psh();
            UD_DEF.index('SCHSYM');
            UD_DEF.prefix(_sch,VEK.A_WYD().KOD,);
            {? UD_DEF.first()
            || ZLGD.prefix(UD_DEF.UD_SKL)
            || {? ~_count_only
               || FUN.info(
                     'Nie znaleziono \'%1\' elementu struktury organizacyjnej — '
                     'należy sprawdzić konfigurację słownika wydziałów.'@
                     [VEK.A_WYD().KOD]
                  )
               ?}
            ?};
            UD_DEF.cntx_pop()
         || ZLGD.prefix()
         ?};
         {? ZLGD.find_tab('first','GROP',,'<>',null(),'POTW',,'=','N','ZAK',,'=','T','GROP','STATUS','<>','Z')
         || {!
            |?
               {? _prac=0 | (_prac=1 & ZLGD.P=VEK.P)
               || _count+=1;
                  {? ~_count_only
                  || __GROP.tab.blank();
                     __GROP.tab.POTW:=ZLGD.POTW;
                     __GROP.tab.GROP:=ZLGD.GROP().KOD+': '+GROP.OPIS;
                     __GROP.tab.GROP_REF:=$ZLGD.GROP;
                     __GROP.tab.OPER:=ZLGD.GROP().TTOPER().NA;
                     __GROP.tab.ZLGD:=$ZLGD.ref();
                     __GROP.tab.DT:=ZLGD.DT;
                     __GROP.tab.ILOSC:=ZLGD.IL;
                     __GROP.tab.P:=$ZLGD.P;
                     __GROP.tab.B:=$ZLGD.B;
                     __GROP.tab.OPERATOR:={? ZLGD.BP='B'
                                          || 'Brygada: %1'@[exec('FindAndGet','#table',ZLBR,ZLGD.B,,
                                                                 "ZLBR.KOD+' '+ ZLBR.NAZ",'')]
                                          || 'Pracownik: %1'@[exec('FindAndGet','#table',P,ZLGD.P,,
                                                                   "P.OSOBA().PIERWSZE+' '+ P.OSOBA().NAZWISKO",'')]
                                          ?};
                     __GROP.tab.STARTD:=ZLGD.STARTD().DATA;
                     __GROP.tab.STARTT:=ZLGD.STARTT;
                     __GROP.tab.ENDD:=ZLGD.ENDD().DATA;
                     __GROP.tab.ENDT:=ZLGD.ENDT;
                     __GROP.tab.TIME:=ZLGD.TIME;
                     __GROP.tab.TIME_P:=ZLGD.TIME_P;
                     __GROP.tab.WYDZIAL:=ZLGD.WYD().SYMBOL;
                     __GROP.tab.RES_SYM:=ZLGD.GROPS().PL_RES().SYM;
                     __GROP.tab.add()
                  ?}
               ?};
               ZLGD.find_tab('next','GROP',,'<>',null(),'POTW',,'=','N','ZAK',,'=','T','GROP','STATUS','<>','Z')
            !}
         ?};
         ZLGD.cntx_pop()
      ?};
      _zlgd_names.next()
   !}
?};
ZLGD.cntx_pop();

{? _count_only
|| return(_count)
?};

__GROP.tab.first();

__GROP.win:=__GROP.tab.mk_sel('Potwierdzanie grup operacji'@,,0,'ek_grop',0,0,20,,'P');
__GROP.tab.win_fld(__GROP.win,,'DT',,,10,,,'Data'@);
{? _prac=0
|| __GROP.tab.win_fld(__GROP.win,,'OPERATOR',,,30,,,'Wykonawca'@)
?};
__GROP.tab.win_fld(__GROP.win,,'GROP',,,{? _prac=0 || 25 || 55 ?},,,'Grupa operacji'@);
__GROP.tab.win_fld(__GROP.win,,'RES_SYM',,,14,,,'Zasób'@);
__GROP.tab.win_fld(__GROP.win,,'ILOSC',,,15,4,,'Ilość'@);

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@; 'Potwierdź'@; 'Anuluj'@;
_before:="
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: filtr - wyłączony
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
:: info - włączone
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',1);
:: logout - wyłączony
   exec('set_visible','#desktop','','ctr_menu_nav','btn_logout@menu_nav',0);

   _tab:=exec('elements_table','#desktop');
   _tab.blank(); _tab.ID_SYS:='btn_potw@menu_grop'; _tab.NAME:='Potwierdź'@; _tab.add();
   _tab.blank(); _tab.ID_SYS:='btn_cancel@menu_grop'; _tab.NAME:='Anuluj'@; _tab.add();
   exec('load','#desktop','ctr_menu_grop','ekiosk_menu_grop.dsk',,,,,_tab,1);

:: Niewidoczne przyciski USUŃ
   {? exec('upr_kierownik','ekioski')=0
   || exec('set_visible','#desktop','','ctr_menu_grop','btn_del@menu_grop',0)
   || exec('set_visible','#desktop','','ctr_menu_grop','btn_del@menu_grop',1)
   ?};

   grp_disp(__GROP.tab,__GROP.win,0);
   ~~
";
_grp:=__GROP.tab.grp_make('Potwierdzanie grup operacji'@,_before,'ek_grop_grp',,,,,,'jterm');
_after_refresh:="
::   exec('set_visible','#desktop','','ctr_menu_grop','btn_register@pracout',exec('upr_kierownik','ekioski'));
   ~~
";
__GROP.tab.grp_sel(_grp,,__GROP.win,,_after_refresh,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
__GROP.tab.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',__GROP.tab,'ctr_menu_grop',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
__GROP.tab.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',__GROP.tab,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

_display:="
   _tab:=cur_tab(1,1);
   GROP.cntx_psh(); GROP.prefix();
   {? GROP.seek(_tab.GROP_REF)
   ||
      exec('setGropsInfo','zl_grop');
      exec('grop_efld_opt','zl_grop');
      exec('filtrPlResGr','zl_grop');

      {? VEK.TERM='T'
      || exec('uni_display','#desktop',GROP,'RED','Grupa operacji'@,5,3,'grop','normal')
      || _red:=GROP.mk_edit('Grupa operacji'@);
         GROP.win_ewin(_red,,'RED');
         GROP.win_ebtn(_red,'text=%1,align=begin,display=1'['Pozycje'@],\"exec('gropp_select','zl_grop')\");
         GROP.win_ebtn(_red,'text=%1,align=begin,display=1'['Zasoby'@],\"exec('grops_select','zl_grop')\");
         GROP.win_edit(_red);
         GROP.display()
      ?}
   ?};
   GROP.cntx_pop()
";

eLevel.up(__GROP.tab,__GROP.win,'GROP_POTW',_display);

__GROP.tab.win_sel(_grp);

__GROP.tab.f_set();
__GROP.tab.select(,1,10);

eLevel.down();

VAR_DEL.delete('__GROP','__ENV_REJ');
1


\btn_potw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Obsługa przycisku POTWIERDŹ w oknie zatwierdzania grup operacji
::----------------------------------------------------------------------------------------------------------------------
_zlgd:=__GROP.tab.ZLGD;
{? ref_name(_zlgd)*'zlgd'>0
|| ZLGD.cntx_psh();
   ZLGD.use(ref_name(_zlgd));
   ZLGD.clear();
   {? ZLGD.seek(_zlgd)
   || {? ZLGD.r_lock(1,1,1)
      ||
         exec('zlgd_potw','zl_grop');
::       Sprawdzam czy zapis został potwierdzony
         {? exec('FindAndGet','#table',ZLGD,_zlgd,,"ZLGD.POTW='T'",0)
         ||
::          Usuwam rekord z tabeli tymczasowej
            __GROP.tab.del();
            grp_disp(__GROP.tab,__GROP.win,0)
         ?};
        ZLGD.r_unlock()
      || FUN.emsg('Rekord modyfikowany przez innego użytkownika.'@)
      ?}
   || FUN.emsg('Nie odnaleziono powiązanego rekordu.\nRekord został prawdopodobnie usunięty.'@);
::    Usuwam rekord z tabeli tymczasowej
      __GROP.tab.del();
      grp_disp(__GROP.tab,__GROP.win,0)
   ?};
   ZLGD.cntx_pop()
?};
1


\elements_panelbryg_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_main.dsk
::----------------------------------------------------------------------------------------------------------------------
_rej2zgp:=(exec('get','#params',500621,2)='Z');
_counter:=exec('get_user_param','ekioski',8786,type_of(''))='T';
_tab:=exec('elements_table','#desktop');
_tab_end:={? _counter || exec('work_end_tab','ekioski') || ~~ ?};

{? _counter
|| VEK.cntx_psh();
   FILTER.cntx_psh()
?};

_tab.blank();
_tab.ID_SYS:='label_start@menu_main';
_tab.NAME:='Start'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_end@menu_main';
_tab.NAME:='Koniec'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_prac@menu_main';
_tab.VALUE:=VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_info@menu_main';
_tab.VALUE:='%1 godz: %2'@[$date(),$time()];
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_register@menu_main';
_tab.NAME:={? _rej2zgp
           || '<html><center>'+gsub('Rejestruj / przydziel\npracę'@,'\n','<br>')+'<html>'
           || '<html>'+'Rejestruj pracę'@+'</html>'
           ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_prob@menu_main';
_tab.NAME:='PROBLEMY'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_barcode@menu_main';
_tab.NAME:='Czytnik'@;
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_oper@menu_main';
_tab.NAME:={? _counter
           || '<html><center>'+gsub('ROZPOCZĘTE\nOPERACJE (%1)'@
              [$exec('rozpOper','ekioski',1)],'\n','<br>')+'</html>'
           || '<html><center>'+gsub('ROZPOCZĘTE\nOPERACJE'@,'\n','<br>')+'</html>'
           ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_kap@menu_main';
_tab.NAME:={? _counter
           || '<html><center>'+gsub('MOJE KARTY\nPRACY (%1)'@
              [$exec('work_kap','ekioski',1,_tab_end)],'\n','<br>')+'</html>'
           || '<html><center>'+gsub('MOJE KARTY\nPRACY'@,'\n','<br>')+'</html>'
           ?};
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_bryg@menu_main';
_tab.NAME:='Brygady'@;
_tab.VISIBLE:={? exec('upr_brygadzista','ekioski') || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_end@menu_main';
_tab.NAME:={? _counter
           || 'WYKONANIE'@+' (%1)'@[$exec('work_end','ekioski',,1,_tab_end)]
           || 'WYKONANIE'@
           ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_logout@menu_main';
_tab.NAME:='WYLOGUJ'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_grop_potw@menu_main';
_tab.NAME:={? _counter
           || '<html><center>'+gsub('POTWIERDŹ\nOPERACJE GRUPOWE'@+' (%1)'
              [$exec('grop_potw_menu','ekioski',,1)],'\n','<br>')+'</html>'
           || '<html><center>'+gsub('POTWIERDŹ\nOPERACJE GRUPOWE'@,'\n','<br>')+'</html>'
           ?};
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_rem@menu_main';
_tab.NAME:='REMONTY'@;
_tab.add();

{? _counter
|| VEK.cntx_pop();
   FILTER.cntx_pop()
?};

_tab


\panelbryg_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Aktualizuje główny puplit panelu brygadzisty (odświeżenie ilości operacji)
::----------------------------------------------------------------------------------------------------------------------
_twrkplc:=VEK.TWRKPLC;
:: Czyszczenie stanowiska do poprawnego wyliczenia ilości operacji (WYKONANIE)
{? VEK.INIT_PLC=''
|| VEK.TWRKPLC:=null()
|| VEK.TWRKPLC:=exec('FindInSet','#table','TWRKPLC','KOD',VEK.INIT_PLC,,,1,,null())
?};
_tab:=exec('elements_panelbryg_table','ekioski');
exec('update','#desktop',_tab,'ctr_menu_main');
VEK.TWRKPLC:=_twrkplc;
~~


\elements_panelprac_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_okno_prac.dsk
::----------------------------------------------------------------------------------------------------------------------
_rej2zgp:=(exec('get','#params',500621,2)='Z') & exec('chk_role','#b__box',OPERATOR.USER,'TTE_WYK_DWZL');
_counter:=exec('get_user_param','ekioski',8786,type_of(''))='T';
_tab:=exec('elements_table','#desktop');
_tab_end:={? _counter || exec('work_end_tab','ekioski') || ~~ ?};

{? _counter
|| VEK.cntx_psh();
   FILTER.cntx_psh()
?};

_tab.blank();
_tab.ID_SYS:='label_start@okno_prac';
_tab.NAME:='Start'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_end@okno_prac';
_tab.NAME:='Koniec'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_prac@okno_prac';
_tab.VALUE:=VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_info@okno_prac';
_tab.VALUE:='%1 godz: %2'@[$date(),$time()];
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_wrkplc@okno_prac';
_tab.NAME:='Start na stanowisku'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_wrkplc@okno_prac';
_tab.VALUE:='[%1] - %2'
   [{? VEK.TWRKPLC=null() || '' || VEK.TWRKPLC().KOD ?},{? VEK.TWRKPLC=null() || '' || VEK.TWRKPLC().NA ?}];
_tab.VISIBLE:={? VEK.TWRKPLC=null() || 'false' || 'true' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_wrkplc@okno_prac';
_tab.VALUE:=$eSelect.cmb_twrkplc;
_tab.VISIBLE:={? VEK.TWRKPLC=null() || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_barcode@okno_prac';
_tab.NAME:='Czytnik'@;
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_barcode@okno_prac';
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='label_kap@okno_prac';
_tab.NAME:='Przydzielona praca'@;
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_kap@okno_prac';
_tab.NAME:={? _counter
           || 'MOJE KARTY PRACY'@+' (%1)'[$exec('work_kap','ekioski',1,_tab_end)]
           || 'MOJE KARTY PRACY'@
           ?};
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_register@okno_prac';
_tab.NAME:={? _counter
           || 'WYKONANIE'@+' (%1)'[$exec('btnc_koniec','ekioski',1,1,_tab_end)]
           || 'WYKONANIE'@
           ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_logout@okno_prac';
_tab.NAME:='WYLOGUJ'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_bryg@okno_prac';
_tab.NAME:='BRYGADY'@;
_tab.VISIBLE:={? exec('upr_brygadzista','ekioski') || 'true' || 'false' ?};
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_grop_potw@okno_prac';
_tab.NAME:={? _counter
           || 'POTWIERDŹ OPERACJE GRUPOWE'@+' (%1)'[$exec('grop_potw_menu','ekioski',1,1)]
           || 'POTWIERDŹ OPERACJE GRUPOWE'@
           ?};
_tab.VISIBLE:={? _rej2zgp || 'true' || 'false' ?};
_tab.add();

{? _counter
|| VEK.cntx_pop();
   FILTER.cntx_pop()
?};

_tab


\panelprac_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Aktualizuje główny puplit panelu pracownika (odświeżenie ilości operacji)
::----------------------------------------------------------------------------------------------------------------------
_twrkplc:=VEK.TWRKPLC;
:: Czyszczenie stanowiska do poprawnego wyliczenia ilości operacji (WYKONANIE)
{? VEK.INIT_PLC=''
|| VEK.TWRKPLC:=null()
|| VEK.TWRKPLC:=exec('FindInSet','#table','TWRKPLC','KOD',VEK.INIT_PLC,,,1,,null())
?};
_tab:=exec('elements_panelprac_table','ekioski');
exec('update','#desktop',_tab,'ctr_okno_prac');
VEK.TWRKPLC:=_twrkplc;
~~


\rej_more_than_one_grop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Czy można rejestrować wykonanie więcej niż jednego uruchomienia dla grupy operacji
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
exec('get_user_param','ekioski',8787)='T'


\btn_wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Rejestracja szczegółowa - wyświetla okno rejestracji robocizny w rozbiciu na produkty
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? PROD_REJ.SRODZ='PX' || FUN.info('Funkcja niedostępna dla pozycji z planu strategicznego.'@); return() ?};
{? PROD_REJ.SRODZ='PL' || FUN.info('Funkcja niedostępna dla pozycji z planu operacyjnego.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');

{? ~_zgp
|| FUN.info('Pozycja planu nie jest powiązana z pozycją przewodnika.'@);
   return()
?};
_can_continue:=1;
_create:=1;
:: Tworzę środowisko
{? _can_continue>0
|| {? var_pres('__ENV_WYR')>100
   || {? __ENV_WYR.ZGP<>PROD_REJ.ZGP
      || obj_del(__ENV_WYR)
      || _create:=0
      ?}
   ?};
   {? _create>0
   || exec('env','zl_wyr');
      exec('fill_env','zl_wyr',PROD_REJ.ZGP)
   ?}
?};

{? _can_continue>0
||
::   exec('set_var_a','ekioski',_zgp);
::   VAR.A_KTL:=PROD_REJ.ZL().TKTL;

   USERS.cntx_psh();

   eLevel.up(__ENV_WYR.TAB_P,__ENV_WYR.WER_P,'PRODUKTY');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;'Łączna ilość dobrych: %1, łączna ilość braków: %2'@['',''];
   _before:="
      exec('load','#desktop','ctr_user_info','ekiosk_user_info2.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
      exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

      exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
::    nav
      exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
      exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);

      _tab:=exec('elements_menuWyr_table','ekioski');
      exec('load','#desktop','ctr_menu_wyr','ekiosk_menu_wyr.dsk',,,,,_tab,1);
      exec('wyr_setFld','ekioski');
::    Druga linia informacji
      _info2:=exec('second_line','ekioski');
      exec('set_value','#desktop','','ctr_user_info','fld_line2@user_info',_info2);

      __ENV_WYR.TAB_P.first();
      grp_disp(__ENV_WYR.TAB_P,__ENV_WYR.WER_P,1);
      ~~
   ";

   _grp:=USERS.grp_make('PRODUKTY'@,_before,'wyr_egrp',,,,,,'jterm');
   exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 4 || 3 ?},eSelect.grp_width,,,,,,);
   USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
   _before:="
      ~~
   ";
   _after_refresh:="
      _tab:=__ENV_WYR.TAB_P;
::    Odświeżenie ilości
      {? _tab.IL>0
      || exec('set_value','#desktop','','ctr_menu_wyr','fld_il@menu_wyr',$_tab.IL)
      || exec('set_value','#desktop','','ctr_menu_wyr','fld_il@menu_wyr','')
      ?};
      {? _tab.IL_BRAK>0
      || exec('set_value','#desktop','','ctr_menu_wyr','fld_il_brak@menu_wyr',$_tab.IL_BRAK)
      || exec('set_value','#desktop','','ctr_menu_wyr','fld_il_brak@menu_wyr','')
      ?};
::    Odświeżenie partii
      {? __ENV_WYR.PARTY>0
      || _zgh:=exec('FindAndGet','#table',ZGP,__ENV_WYR.ZGP,,\"ZGP.NRZLP\",null);
         {? _zgh<>null()
         || ZPARN.index('ZGH');
            ZPARN.prefix(_zgh);
            {? ZPARN.first()
            || _data_id:=$SYSLOG.tm_stamp();
               exec('fetch_data','#desktop',_data_id,'ctr_menu_wyr',exec('cmb_zparn','ekioski'),'SYM,COMBO','');
               exec('grab_data','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',_data_id);
               exec('set_value','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',__ENV_WYR.TAB_P.PARTIA)
            || exec('set_value','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr','')
            ?}
         ?}
      ?};
::    Trzecia linia informacji (łączne ilości pobrane)
      _sum:=exec('env_sum_il','zl_wyr',1);
      _info3:='Łączna ilość dobrych: %1, łączna ilość braków: %2'[$_sum.IL,$_sum.IL_BRAK];
      exec('set_value','#desktop','','ctr_user_info','fld_line3@user_info',_info3);
::    Ustawienie focusa na polu z ilością
      exec('grab_focus','#desktop','','ctr_menu_wyr','fld_il@menu_wyr');
      grp_disp(__ENV_WYR.TAB_P,__ENV_WYR.WER_P,0);
::    Rodzaj braku
      {? _sum.IL_BRAK>0
      || exec('set_enabled','#desktop','','ctr_menu_wyr','combo_braki_r@menu_wyr',1)
      || exec('set_enabled','#desktop','','ctr_menu_wyr','combo_braki_r@menu_wyr',0);
         exec('set_value','#desktop','','ctr_menu_wyr','combo_braki_r@menu_wyr','')
      ?};
      ~~
   ";
   USERS.grp_sel(_grp,__ENV_WYR.TAB_P,__ENV_WYR.WER_P,,_after_refresh,,,{? VEK.DPI=96 || 5 || 4 ?},_before,,,,
                 'maximized_with_title','sur_wer_p',0);
   USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
   exec('create','#desktop',USERS,'ctr_menu_wyr',_grp,{? VEK.DPI=96 || 16 || 13 ?},eSelect.grp_width,,,,1);
   USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
   exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
   USERS.win_sel(_grp);

   USERS.select();
   USERS.cntx_pop();

   eLevel.down()
?};
~~


\btn_wyr_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Przycisk Zapisz w oknie rozpisywania robocizny na produkty
::----------------------------------------------------------------------------------------------------------------------
_env:=__ENV_WYR;
_tab:=_env.TAB_P;

_il_str:=exec('get_value','#desktop','','ctr_menu_wyr','fld_il@menu_wyr');
_ilb_str:=exec('get_value','#desktop','','ctr_menu_wyr','fld_il_brak@menu_wyr');
_zparn_str:=exec('get_value','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr');
_il:=exec('str2real','#convert',_il_str);
_ilb:=exec('str2real','#convert',_ilb_str);

{? _il_str<>'' | _ilb_str<>''
|| {? _zparn_str<>''
   || _zparn:=exec('FindInSet','#table','ZPARN','PARTIA',_zparn_str,,"ZPARN.ref()",1,,null())
   || _zparn:=null()
   ?};
   {? _il<0 | _ilb<0
   || FUN.info('Ilość musi być większa od zera'@)
::   |? _il+_ilb<=0
::   || FUN.info('Ilość musi być określona.'@)
   |? _env.PARTY>0 & _zparn_str=''
   || _party_zl:=exec('party_first','zl_link',_env.ZL);
      _zl_sym:=exec('record','#to_string',_party_zl);
      FUN.info('Zlecenie: %1 jest partiowane.\n'
               'Należy wskazać partię do której zostanie przypisana rejestrowana robocizna.'@[_zl_sym])
   |? _zparn_str<>'' & _zparn=null()
   || FUN.info('Nie odnaleziono partii o podanym symbolu.'@)
   || _tab.IL:=_il;
      _tab.IL_BRAK:=_ilb;
      {? _tab.IL+_tab.IL_BRAK<=0
      || _tab.PARTIA:='';
         _tab.ZPARN:=''
      || _tab.PARTIA:=_zparn_str;
         _tab.ZPARN:=$_zparn
      ?};
      {? _tab.put()
      || {? _tab.IL+_tab.IL_BRAK<=0
         || exec('set_value','#desktop','','ctr_menu_wyr','fld_il@menu_wyr','');
            exec('set_value','#desktop','','ctr_menu_wyr','fld_il_brak@menu_wyr','');
            exec('set_value','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr','')
         ?}
      ?}
   ?}
?};
:: Odświeżenie okno (ustawienie focusa na polu z ilością)
grp_disp(__ENV_WYR.TAB_P,__ENV_WYR.WER_P,1);
~~


\elements_menuWyr_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_menu_wyr.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='fld_il@menu_wyr';
_tab.NAME:='Ilość dobra'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_il_brak@menu_wyr';
_tab.NAME:='Ilość braków'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_time@menu_wyr';
_tab.NAME:='Czas'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_partia@menu_wyr';
_tab.NAME:='Partia'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_stanowisko@menu_wyr';
_tab.NAME:='Stanowisko'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_rodzaj_r@menu_wyr';
_tab.NAME:='Rodzaj braku'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_register@menu_wyr';
_tab.NAME:='<html><center>'+gsub('Rejestruj\nwykonanie'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_surowce@menu_wyr';
_tab.NAME:='Nielimity'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_surowce_lim@menu_wyr';
_tab.NAME:='Limity'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_calc@menu_wyr';
::_tab.NAME:='Parametryzowany kalkulator'@;
_tt:=spli_str('KALKULATOR'@);
_name:=''; {! _it:=1.. obj_len(_tt) |! _name+='%1\n'[_tt[_it]] !};
_tab.NAME:='<html>'+gsub(_name,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_bad@menu_wyr';
_tab.NAME:='<html><center>'+gsub('Rejestruj\nbadanie'@,'\n','<br>')+'</html>';
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_save@menu_wyr';
_tab.NAME:='Zapisz'@;
_tab.add();

_tab


\wyr_setFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Ustawienie wartości pól desktopu 'menu_wyr'
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__ENV_WYR')<100 ||  return() ?};
_env:=__ENV_WYR;

exec('set_visible','#desktop','','ctr_menu_wyr','fld_time@menu_wyr',0);
::Parametryzowany kalkulator
{? Plugin.runnable('EKIOSK_CALC_IL_001')
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_calc@menu_wyr',1)
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_calc@menu_wyr',0)
?};
:: Partia
{? PROD_REJ.ZGH<>null()
|| _party_req:=_env.PARTY>0;
   {? _party_req>0
   ||
::    Szukam najbliższego zlecenia partiowanego w strukturze
      _party_zl:=exec('party_first','zl_link',PROD_REJ.ZL);
::    Jeżeli odnalezione zlecenie jest takie samo jak na PROD_REJ to prefixuje partie po nagłówku przewodnika
      {? _party_zl=PROD_REJ.ZL
      || ZPARN.index('ZGH');
         ZPARN.prefix(PROD_REJ.ZGH)
      || ZPARN.index('ZL');
         ZPARN.prefix(_party_zl)
      ?};
      {? ZPARN.first()
      || _data_id:=$SYSLOG.tm_stamp();
         exec('fetch_data','#desktop',_data_id,'ctr_menu_wyr',exec('cmb_zparn','ekioski'),'SYM,COMBO','');
         exec('grab_data','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',_data_id);
         exec('set_visible','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',1)
      ?}
   || exec('set_visible','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',0)
   ?}
|| exec('set_visible','#desktop','','ctr_menu_wyr','combo_partia@menu_wyr',0)
?};
:: Stanowisko
_data_id:=$SYSLOG.tm_stamp();
:: Ustawiam filtr na stanowiska
exec('twrkplc_filter_plugin','zasoby',PROD_REJ.ref());
exec('fetch_data','#desktop',_data_id,'ctr_menu_wyr',exec('cmb_place','ekioski'),'SYM,COMBO','');
{? PROD_REJ.ZGP<>null()
|| exec('grab_data','#desktop','','ctr_menu_wyr','combo_stanowisko@menu_wyr',_data_id,,PROD_REJ.ZGP().PLACE().KOD)
|| exec('grab_data','#desktop','','ctr_menu_wyr','combo_stanowisko@menu_wyr',_data_id)
?};
exec('set_visible','#desktop','','ctr_menu_wyr','combo_stanowisko@menu_wyr',1);
:: Rodzaj braku
_data_id:=$SYSLOG.tm_stamp();
exec('braki_r_filter','braki',PROD_REJ.ZGP);
exec('fetch_data','#desktop',_data_id,'ctr_menu_wyr',exec('cmb_braki_r','ekioski'),'SYM,COMBO','');
exec('grab_data','#desktop','','ctr_menu_wyr','combo_braki_r@menu_wyr',_data_id);
exec('set_visible','#desktop','','ctr_menu_wyr','combo_braki_r@menu_wyr',1);

:: Surowce (nielimity)
{? PROD_REJ.ZGP<>null() & (exec('get_user_param','ekioski',8782,type_of(''))='T'
   | exec('chk_nlim_roz','zl_nlimit',PROD_REJ.ZGP,PROD_REJ.ZL))
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_surowce@menu_wyr',1)
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_surowce@menu_wyr',0)
?};
:: Surowce (limity)
{? PROD_REJ.ZGP<>null() & exec('chk_role','#b__box',OPERATOR.USER,'LMG_ZAM_IPRZ')>0
   & exec('zgp_chk4lim','zl_limit',PROD_REJ.ZGP)>0
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_surowce_lim@menu_wyr',1)
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_surowce_lim@menu_wyr',0)
?};
:: Rejestrowanie badań
{? exec('FindAndGet','#table',ZGP,PROD_REJ.ZGP,,"ZGP.BAD_OP<>null()",0)
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_bad@menu_wyr',1)
|| exec('set_visible','#desktop','','ctr_menu_wyr','btn_bad@menu_wyr',0)
?};
~~


\rez4rejmat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Rozpisuje rezerwacje dedykowane do nielimitów na rezerwacje pod rozliczane surowce
::   WE: _a - SC.SRDK/$REZ.ref() - dla SRDK sprawdza wszystkie pasujące rezerwacje
::       _b - $ZLIM.ref()
::       _c - ilość do rozpisania
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| {? ref_name(_a)*'rezz'>0
   || _ref:=_a;
      _srdk:=''
   || _ref:='';
      _srdk:=_a
   ?}
|| return()
?};
_zlim:={? var_pres('_b')=type_of('') || _b || return() ?};
{? _zlim<>''
|| ZLIM.cntx_psh();
   ZLIM.clear();
   _mask:=ref_name(_zlim);
   {? _mask<>ZLIM.name() || ZLIM.use(_mask) ?};
   {? ZLIM.seek(_zlim)
   || _zl:=ZLIM.ZLEC;
      _ktm:=ZLIM.KTM;
      _ilr:={? var_pres('_c')=type_of(0) || _c || ZLIM.cntx_pop();return() ?};
      REZ.cntx_psh();
      _rez_mask:=(REZ.name()-2)+'__';
      {? REZ.name()<>_rez_mask || REZ.use(_rez_mask) ?};
      {? _ref<>''
      || REZ.clear()
      || REZ.index('ZLMREZ2');
         REZ.prefix(_zl,'S','B',_ktm,'P',$ZLIM.ref(),)
      ?};
      {? {? _ref<>'' || REZ.seek(_ref) || REZ.first() ?}
      || {!
         |?
            {? _srdk='' | (REZ.SC=_srdk & 'dokma'=(5+REZ.SC))
            || _ilosc:={? REZ.ILR<_ilr || REZ.ILR || _ilr ?};
               REZ.ILR-=_ilosc;
               {? REZ.ILR<=0
               || REZ.del();
                  _next:={? _ref<>'' || 0 || REZ.first() ?}
               || REZ.put();
                  _next:={? _ref<>'' || 0 || REZ.next() ?}
               ?};
               _ilr-=_ilosc
            || _next:={? _ref<>'' || 0 || REZ.next() ?}
            ?};
            _ilr>0 & _next
         !}
      ?};
      REZ.cntx_pop()
   ?};
   ZLIM.cntx_pop()
?};
~~


\cmb_braki_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Zwraca tabelę tymczasową elementów do combo-boxa do wyboru rodzaju braku
::----------------------------------------------------------------------------------------------------------------------
{? BRAKI_R.f_active()=0
|| _braki_r:=sql('
      select
         KOD as SYM,
         KOD || '' ['' || OPIS || '']'' as COMBO
      from prefixed_table(BRAKI_R)
   ')
|| _braki_r:=sql('
      select
         KOD as SYM,
         KOD || '' ['' || OPIS || '']'' as COMBO
      from BRAKI_R join filter_of(BRAKI_R)
   ')
?};
_braki_r


\il_brak_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Po redakcji ilości braków w panelach menu_end
::----------------------------------------------------------------------------------------------------------------------
_il_brak:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_brak@menu_end'),',','.');
{? _il_brak>0
|| exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',1)
|| exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',0);
   exec('set_value','#desktop','','ctr_menu_end','combo_braki_r@menu_end','')
?};
~~


\grop_potw_il_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Po redakcji pola Ilość dobra w panelu menu_end
::----------------------------------------------------------------------------------------------------------------------
_il:=#gsub(exec('get_value','#desktop','#:ctr_grop_potw','ctr_grop_potw','fld_il@grop_potw'),',','.');
_il_plan:=ProdRej.GROPP.TAB.IL;
_il_brak:=_il_plan-_il;
{? _il_brak<0 || _il_brak:=0 ?};
exec('set_value','#desktop','','ctr_grop_potw','fld_il_brak@grop_potw',$_il_brak);
{? _il_brak>0
|| exec('set_enabled','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',1)
|| exec('set_enabled','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw',0);
   exec('set_value','#desktop','','ctr_grop_potw','combo_braki_r@grop_potw','')
?};
~~


\problem_desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wybór standardowego opisu problemu
::   WE: _a - typ pozycji w słowniku
::----------------------------------------------------------------------------------------------------------------------
VAR.EK_SOTYP:=_a;

_result:=~~;

EK_SLOO.cntx_psh();

eSelect.wer_sloo:=exec('problem_sloo_win','zl_wkj');
eLevel.up(EK_SLOO,eSelect.wer_sloo,'EK_SLOO');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@; 'Wybierz'@;
_before:="
   exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
::       filtr
   exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);
::       info
   exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);

   exec('load','#desktop','ctr_menu_ten','ekiosk_menu_ten.dsk',,,,,,0);
   exec('set_value','#desktop','','ctr_menu_ten','btn_chooce@menu_ten','Wybierz'@);
   exec('set_enabled','#desktop','','ctr_menu_ten','btn_chooce@menu_ten',EK_SLOP.size()>0);

   ~~
";
_grp:=EK_SLOO.grp_make('Opisy standardowe'@,_before,'',0,0,,);
EK_SLOO.grp_sel(_grp,,eSelect.wer_sloo,,,,,{? VEK.DPI=96 || 24 || 20 ?},,,,,'maximized');
EK_SLOO.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
exec('create','#desktop',EK_SLOO,'ctr_menu_ten',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
EK_SLOO.grp_splt(_grp,,'horizontal','pozioma_2',0);
:: -----------------------------------------------
exec('create','#desktop',EK_SLOO,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);

EK_SLOO.index('DESC');
EK_SLOO.prefix(VAR.EK_SOTYP);
{? EK_SLOO.first()
|| EK_SLOO.win_sel(_grp);
   {? EK_SLOO.select(,1,10) & eSelect.key_Esc=0
   || _result:=EK_SLOO.DESC
   ?}
|| FUN.info('Brak dostępnych opisów do wyboru.\nNależy uzupełnić parametryzację systemu.'@)
?};

eLevel.down();

EK_SLOO.cntx_pop();

_result


\problem_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyświetla problem
::----------------------------------------------------------------------------------------------------------------------
{? EK_PROB.get()
|| _red:=exec('problem_win','zl_wkj');
   _title:={? EK_PROB.PROBLEM='T' || 'Zgłoszony problem'@ || 'Rozwiązany problem'@ ?};
   exec('uni_display','#desktop',EK_PROB,_red,_title,20,4,'ek_prob_disp'+(-EK_PROB.PROBLEM),
      {? EK_PROB.PROBLEM='T' || 'normal' || 'maximized' ?}
   )
?};
~~


\rem_zgl_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Rejestrowanie zgłoszenia remontowego - uproszczona wersja na e-kiosk
::       Kontekst wywołania - bufor tabeli REM_ZGL
::   WE: _a - tryb pracy: 'add', 'put' (dla 'put' obecnie działanie puste)
::   WY: 0/1 - czy udała się edycja
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tryb:=_a;

_ret:=~~;

{? _tryb='add'
||
   _ctr_id:=exec('create','#desktop',
      SYSLOG,'ctr_rem_zgl',,{? VEK.DPI=96 || 21 || 18 ?},{? VEK.DPI=96 || 76 || 63 ?},
      'Zgłoszenie remontowe — rejestracja'@,,'normal',,14,6
   );
   SYSLOG.win_ctr(_ctr_id);

   _before:="
      _tab:=exec('elements_remZgl_table','ekioski');
      exec('load','#desktop','ctr_rem_zgl','ekiosk_rem_zgl.dsk',,,,,_tab,1);
      _pulpit:='ctr_rem_zgl';
      exec('set_value','#desktop','',_pulpit,'fld_title@panel',REM_ZGL.TYTUL);
      exec('set_value','#desktop','',_pulpit,'fld_description@panel',REM_ZGL.memo_txt(,0,'OPIS'));
      exec('set_value','#desktop','',_pulpit,'combo_resource@panel',$REM_ZGL.REM_ZAS);
      exec('set_value','#desktop','',_pulpit,'combo_category@panel','');
      ~~
   ";
   _win_id:='id_rem_zgl_edit';
   _ret:=SYSLOG.control(_win_id,'modal=false,pack=false',_before)
?};

{? type_of(_ret)=type_of(~~)
|| _wyn:=0
|| REM_ZAS.cntx_psh();
   REM_ZAS.prefix();
   {? REM_ZAS.seek(_ret.REM_ZAS) || REM_ZGL.REM_ZAS:=REM_ZAS.ref() ?};
   REM_ZAS.cntx_pop();
   REM_KATG.cntx_psh();
   REM_KATG.prefix();
   {? REM_KATG.seek(_ret.REM_KATG) || REM_ZGL.REM_KATG:=REM_KATG.ref() ?};
   REM_KATG.cntx_pop();
   {? _ret.ACTION='END'
   || REM_ZGL.STAT_REJ:=exec('status_ended','remonty_zgloszenia')
   ?};
   _wyn:=1
?};
_wyn


\rem_zgl_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Obsługa przycisku 'Zakończ' w zgłoszeniu remontowym
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=exec('get_value','#desktop','','ctr_rem_zgl','combo_resource@panel');
_rem_katg:=exec('get_value','#desktop','','ctr_rem_zgl','combo_category@panel');
ctr_ret(exec('obj_ntab_set','#array',,'ACTION','END','REM_ZAS',_rem_zas,'REM_KATG',_rem_katg));
sel_exit();
~~


\rem_zgl_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Obsługa przycisku 'OK' w zgłoszeniu remontowym
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=exec('get_value','#desktop','','ctr_rem_zgl','combo_resource@panel');
_rem_katg:=exec('get_value','#desktop','','ctr_rem_zgl','combo_category@panel');
ctr_ret(exec('obj_ntab_set','#array',,'ACTION','OK','REM_ZAS',_rem_zas,'REM_KATG',_rem_katg));
sel_exit();
~~


\elements_remZgl_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Tabela elementów tłumaczonych w desktopie ekiosk_rem_zgl.dsk
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:='label@panel';
_tab.NAME:='Zgłoszenie remontowe — rejestracja'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_resource@panel';
_tab.NAME:='Zasób'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='combo_category@panel';
_tab.NAME:='Kategoria'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_title@panel';
_tab.NAME:='Tytuł'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='fld_description@panel';
_tab.NAME:='Opis'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_end@panel';
_tab.NAME:='ZAKOŃCZ'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_ok@panel';
_tab.NAME:='OK'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='btn_escape@panel';
_tab.NAME:='ANULUJ'@;
_tab.add();

_tab


\cmbt_rem_katg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: ComboBox - tabela tymczasowa kategorii zgłoszeń remontowych - słownik
::   WY: tabela tymczasowa z polami REF i COMBO
::----------------------------------------------------------------------------------------------------------------------
_table:=sql('
   select
      REM_KATG.REFERENCE as REF,
      REM_KATG.SYMBOL as COMBO
   from REM_KATG
   order by COMBO
');

_table


\cmbt_rem_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: ComboBox - tabela tymczasowa zasobów remontowych - słownik
::   WY: tabela tymczasowa z polami REF i COMBO
::----------------------------------------------------------------------------------------------------------------------
_table:=sql('
   select
      REM_ZAS.REFERENCE as REF,
      REM_ZAS.SYMBOL as COMBO
   from REM_ZAS
   order by COMBO
');

_table


\ekiosk2ETYK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Wydruk etykiet dla danego PROD_REJ-a
::   WE: _a - użytkownik (identyfikator)
::       _b - PROD_REJ.ref lub EANP.ref() lub M.ref() lub EANL.ref()
::       [_c] - rodzaj wydruku: 1-(domyślnie) - wydruk na drukarkę 0-zwraca kod etykiety
::       [_d] - kod kreskowy - alfanumeryczny zapis
::       [_e] - ilość etykiet, domyślnie 1
::   WY: rezultat '' - ok lub komunikat o błędzie
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_idurz:={? _a<>'' || exec('FindAndGet','#table',USERS,_a,,"uidref()",null()) || '' ?};
_typprn:=0;
{? var_pres('_b')=type_of(null())
|| _ref_tab:=_b;
   _tab:=ref_tab(_b);
   {? type_of(_tab)<>type_of(~~)
   || _typprn:={? _tab=PROD_REJ || 1
               ?}
   ?}
?};
_rodz:={? var_pres('_c')=type_of(0) || _c || 1 ?};
_kodk:={? var_pres('_d')=type_of('') || _d || '' ?};
_ilet:={? var_pres('_e')=type_of(0) || _e || 1 ?};

_urz:=null();
_urz_lab:=null();
_kodm:='';
_kodm:={? _typprn=1 || 'PROD_REJ________'
       || ''
       ?};
_eant:={? _kodm='' || null() || exec('FindInSet','#table','EANT','AKOD',_kodm,'T',,1,,null()) ?};

{? ~_typprn
|| _res:='ERR:Nie wskazano wykonania'
|? _idurz=''
|| _res:='ERR:Nie znaleziono użytkownika e-Kiosku - błędny identyfikator'
|? _eant=null()
|| _res:='ERR:Brak definicji miejsca wywołania dla operacji wykonania'
|| URZ_URZ.cntx_psh();
   URZ_URZ.index('IDDOM');
   URZ_URZ.prefix(_idurz,'T');
   {? URZ_URZ.first()
   || {? exec('FindInSet','#table','URZ_MJS','URZ_LAB',_kodm,URZ_URZ.URZ_LAB,,,,null())<>null()
      || _urz:=URZ_URZ.URZ;
         _urz_lab:=URZ_URZ.URZ_LAB
      ?}
   ?};
   {? ~(_urz<>null() & _urz_lab<>null())
   || URZ_URZ.prefix(_idurz);
      {? URZ_URZ.first()
      || {!
         |? {? exec('FindInSet','#table','URZ_MJS','URZ_LAB',_kodm,URZ_URZ.URZ_LAB,,,,null())<>null()
            || _urz:=URZ_URZ.URZ;
               _urz_lab:=URZ_URZ.URZ_LAB
            ?};
            ~(_urz<>null() & _urz_lab<>null()) & URZ_URZ.next()
         !}
      ?}
   ?};
   URZ_URZ.cntx_pop();
   {? _urz<>null() & _urz_lab<>null() & _eant<>null()
   || {? _typprn=1
      || PROD_REJ.cntx_psh();
         PROD_REJ.prefix();
         {? PROD_REJ.seek(_b)
         || exec('STR','#object');
            exec('FUN','#object');
            exec('myDPRINT','object');
            _res:=exec('etykieta','param_wydr','PROD_REJ',_eant,_urz_lab,_urz,_rodz,,_ilet)
         ?};
         PROD_REJ.cntx_pop()
      ?}
   |? _urz=null() || _res:='ERR:Nie znaleziono definicji urządzenia (drukarki)'
   |? _urz_lab=null() || _res:='ERR:Nie znaleziono definicji etykiety'
   ?}
?};
_res


\btn_etykieta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Przycisk Etykieta Rejestruj wykonanie
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_il_etyk:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_etykiet@menu_end'),',','.');
{? ~_il_etyk || _il_etyk:=1 ?};
_user:=exec('usersLab','ekioski',OPERATOR.USER,OPERATOR.EKIOSK);

_wyn:={? _user<>'' || exec('ekiosk2ETYK','ekioski',_user,PROD_REJ.ref(),,,_il_etyk) || 0 ?};
eSelect.wyn_OK:=_wyn;
_wyn


\usersLab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Sprawdza czy danemu użytkownikowi lub pochodnemu z EKIOSK-u przypisano drukarkę etykiet
::   WY: '' - brak uprawnień uidref są uprawnienia
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_uid_u:=OPERATOR.USER().uidref();
_uid_e:=OPERATOR.EKIOSK().uidref();
{? _uid_u<>''
|| URZ_URZ.cntx_psh();
   URZ_URZ.index('IDURZ');
   URZ_URZ.prefix(_uid_u);
   {? URZ_URZ.first() & URZ_URZ.URZ<>null() & URZ_URZ.URZ_LAB<>null() || _res:=_uid_u ?};
   {? _res='' & _uid_e<>''
   || URZ_URZ.index('IDURZ');
      URZ_URZ.prefix(_uid_e);
      {? URZ_URZ.first() & URZ_URZ.URZ<>null() & URZ_URZ.URZ_LAB<>null() || _res:=_uid_e ?}
   ?};
   URZ_URZ.cntx_pop()
?};
_res


\il_etykiet_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Po redakcji ilości braków w panelach menu_end
::----------------------------------------------------------------------------------------------------------------------
_il_etykiet:=#gsub(exec('get_value','#desktop','#:ctr_menu_end','ctr_menu_end','fld_il_etykiet@menu_end'),',','.');
{? _il_brak>0
|| exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',1)
|| exec('set_enabled','#desktop','','ctr_menu_end','combo_braki_r@menu_end',0);
   exec('set_value','#desktop','','ctr_menu_end','combo_braki_r@menu_end','')
?};
~~


\register_login
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zarejestrowanie zalogowania użytkownika e-kiosku
::----------------------------------------------------------------------------------------------------------------------
exec('register_i_log','ekioski',1);
~~


\register_logout
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zarejestrowanie wylogowania użytkownika e-kiosku
::----------------------------------------------------------------------------------------------------------------------
exec('register_i_log','ekioski',0);
~~


\register_i_log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Zarejestrowanie akcji w rejestrze logowań użytkownika e-kiosku
::   WE: [_a] - akcja: [1]-login, 0-logout
::----------------------------------------------------------------------------------------------------------------------
_action:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_details:='tty=%1 ekiosk=%2'[tty(),exec('FindAndGet','#table',USERS,OPERATOR.EKIOSK,,"KOD",'')];

I_LOG.cntx_psh();
I_LOG.prefix();
I_LOG.TYPE:='E';
I_LOG.DATA_LOG:=date();
I_LOG.CZAS_LOG:=time();
I_LOG.USERS:=OPERATOR.USER;
I_LOG.OPIS:=
   {? _action=1
   || 'Zarejestrowanie użytkownika. %1'[_details]
   || 'Wyrejestrowanie użytkownika. %1'[_details]
   ?};
I_LOG.add();
I_LOG.cntx_pop();
~~


\surowce_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Funkcja Limity - wyświetla okno do rozliczenia surowców limitowanych
::   WE: _a - miejsce wywołania:
::            [1] - przy rejestracji wykonania produkcji
::            0 - przy starcie operacji
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@); return() ?};

{? PROD_REJ.SRODZ='PX' || FUN.info('Funkcja niedostępna dla pozycji z planu strategicznego.'@); return() ?};

_zgp:=exec('get_zgp','prod_rej');
_grop:=PROD_REJ.GROP;
_where:={? var_pres('_a')=type_of(0) || _a || 1 ?};

{? ~_zgp & ~_grop
|| FUN.info('Pozycja nie jest powiązana z pozycją przewodnika ani grupą operacji.'@);
   return()
?};
_can_continue:=1;

exec('openmask','zl_common',PROD_REJ.ZL,PROD_REJ.GROP);

:: Tworzę środowisko do rozliczania limitów
{? _can_continue>0
|| _err:=0;
   _create:=1;
   _txt:='';
   {? var_pres('__ENV_REJ')>100 || obj_del(__ENV_REJ) ?};
   {? var_pres('_tab')>100 || obj_del(_tab) ?};

   {? _create
   || _type:={? exec('isMagPAL','ekioski1',PROD_REJ.ZL,_zgp) || -2 || 2 ?};
      exec('env_rej_mat','zl_wyk',_type);
      _tab:=__ENV_REJ.TAB;
      _tab2:=__ENV_REJ.TAB_N;
      _tab2.cntx_psh();
      _tab2.index(__ENV_REJ.NDX_N);
      __ENV_REJ.ZGP:=_zgp;
      _bryg:=exec('FindAndGet','#table',ZGP,_zgp,,"ZGP.BRYG",'');
      _zlgd:={? _bryg='T'
             || exec('findZlgdZ','ekioski',_zgp,null(),VEK.A_ZLBR,PROD_REJ.GROPS)
             || exec('findZlgdZ','ekioski',_zgp,VEK.P,null(),PROD_REJ.GROPS)
             ?};
      __ENV_REJ.ZLGD:=_zlgd;

      {? _grop
      || _err:=exec('real_dok','zamsiw_rea',2,PROD_REJ.GROP,2,,,0)
      || _err:=exec('real_dok','zamsiw_rea',2,PROD_REJ.ZL,2,,,0,,_zgp)
      ?};

      __zknrea.cntx_psh();
      __zknrea.clear();
      {? ~_err & __zknrea.first() & (__zknrea.prefix(__zknrea.ref()); __zknrea.first())
      ||
         {!
         |? exec('zatw_wyb','zamsiw_rea',0);
            _tab2.KTM:=__zknrea.KTM;
            _tab2.M:=__zknrea.NAZ;
            _tab2.LIL:=__zknrea.REZ;
            _tab2.JM:=__zknrea.JM1;
            _tab2.MREF:=__zknrea.SQM;
            _tab2.ZLIMREF:=__zknrea.REF;
            _tab2.ZRPREF:=$__zknrea.ref();
            _tab2.add();
            __zknrea.REA:=__zknrea.RES:=0;
            __zknrea.put(1);
            __zknrea.next()
         !}
      ||
::       Brak surowców do rozliczenia
         _can_continue:=0
      ?};
      __zknrea.cntx_pop();
      _tab2.cntx_pop()
   ?};
   __ENV_REJ.WHERE:=_where;
   {? ~_where & +_txt>0
   || FUN.info(_txt)
   ?};
   {? _err || _can_continue:=0 ?}
?};

{? _can_continue
||
   eSelect.sur_n:=null();
   eSelect.sur_p:=null();
   exec('set_var_a','ekioski',_zgp);
   VAR.A_KTL:=PROD_REJ.ZL().TKTL;

   USERS.cntx_psh();

   eLevel.up(__ENV_REJ.TAB,__ENV_REJ.WER,'SUROWCE');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'WYLOGUJ'@;
   _before:="
      exec('load','#desktop','ctr_user_info','ekiosk_user_info2.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_user_info','fld_prac@user_info',VEK.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
      exec('set_value','#desktop','','ctr_user_info','fld_info@user_info',VEK.A_WYD().KOD);

::    Druga linia informacji
      _info2:=exec('second_line','ekioski');
      exec('set_value','#desktop','','ctr_user_info','fld_line2@user_info',_info2);

      exec('load','#desktop','ctr_menu_nav','ekiosk_menu_nav.dsk',,,,,,0);
      exec('set_value','#desktop','','ctr_menu_nav','btn_logout@menu_nav','WYLOGUJ'@);
:: nav
      exec('set_visible','#desktop','','ctr_menu_nav','btn_info@menu_nav',0);
::      exec('set_enabled','#desktop','','ctr_menu_nav','btn_info@menu_nav',__ENV_REJ.TAB.size()>0);
      exec('set_visible','#desktop','','ctr_menu_nav','btn_filter@menu_nav',0);

      _tab:=exec('elements_menuSur_table','ekioski');
      exec('load','#desktop','ctr_menu_sur','ekiosk_menu_sur.dsk',,,,,_tab,1);
      exec('set_value','#desktop','','ctr_menu_sur','btn_usunrez@menu_sur','<html>Usuń</html>',1);

::Klawiatura
::      exec('set_visible','#desktop','','ctr_menu_end','keyboard',1);
      __ENV_REJ.TAB.index(__ENV_REJ.NDX);
      __ENV_REJ.TAB_N.first();
      __ENV_REJ.TAB.first();
::    Ustawienie aktywnego okna
      grp_disp(__ENV_REJ.TAB_N,__ENV_REJ.WER_N,1);
      grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
      eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
      ~~
   ";

   _grp:=USERS.grp_make('SUROWCE'@,_before,'sur_grp',,,,,,'jterm');
   exec('create','#desktop',USERS,'ctr_user_info',_grp,{? VEK.DPI=96 || 4 || 3 ?},eSelect.grp_width,,,,,,);
   USERS.grp_splt(_grp,,'horizontal','pozioma_1',0);
:: -----------------------------------------------
   _before:="
      grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
      eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
      ~~
   ";
:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
   'Surowiec: %1, łączna ilość pobrana: %2 %3'@['','',''];
   _after_refresh:="
::    Ustawienie focusa na polu z ilością
::      win_activate('ctr_menu_sur');
      {? BEER.ZK_N().MG().PAL='T'
      || exec('set_visible','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur',0);
         exec('set_visible','#desktop','','ctr_menu_sur','fld_paleta@menu_sur',1);
         exec('grab_focus','#desktop','','ctr_menu_sur','fld_paleta@menu_sur')
      || exec('set_visible','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur',1);
         exec('set_visible','#desktop','','ctr_menu_sur','fld_paleta@menu_sur',0);
         exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur')
      ?};

      {? eSelect.sur_n<>__ENV_REJ.TAB_N.ref()
      || eSelect.sur_n:=__ENV_REJ.TAB_N.ref();
::         exec('set_visible','#desktop','','ctr_menu_sur','btn_register@menu_sur',__ENV_REJ.WHERE);
         exec('set_visible','#desktop','','ctr_menu_sur','btn_accept@menu_sur',1);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         grp_disp(__ENV_REJ.TAB,__ENV_REJ.WER,0);
         eLevel.change(__ENV_REJ.TAB_N,__ENV_REJ.WER_N);
::       Trzecia linia informacji (łączna ilość pobrana)
         _info3:='';
         {? __ENV_REJ.TAB_N.size()>0 & var_pres('__zknrea')>100
         || _info3:='Surowiec: %1, zamówiono: %2 %3'@[__ENV_REJ.TAB_N.M
                    ,form($(exec('FindAndGet','#table',__zknrea,__ENV_REJ.TAB_N.ZRPREF,,\"ILZ\",0)),,ST.DOKL)
                    ,__ENV_REJ.TAB_N.JM]
         ?};
         exec('set_value','#desktop','','ctr_user_info','fld_line3@user_info',_info3);
         ~~
      ?}
   ";
   USERS.grp_sel(_grp,__ENV_REJ.TAB_N,__ENV_REJ.WER_N,,_after_refresh,,,{? VEK.DPI=96 || 6 || 5 ?},_before,,,,
                 'maximized_with_title','sur_wer_n',1);
   _before:="
      eLevel.change(__ENV_REJ.TAB,__ENV_REJ.WER)
   ";
   _after_refresh:="
::    Ustawienie focusa na polu z ilością
::      win_activate('ctr_menu_sur');
      exec('grab_focus','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
      {? eSelect.sur_p<>__ENV_REJ.TAB.ref()
      || eSelect.sur_p:=__ENV_REJ.TAB.ref();
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         ~~
      ?}
   ";
   USERS.grp_splt(_grp,'pozioma_1','vertical','pionowa_1',0);
   USERS.grp_sel(_grp,__ENV_REJ.TAB,__ENV_REJ.WER,,_after_refresh,,,{? VEK.DPI=96 || 6 || 5 ?},_before,,,,
                 'maximized_with_title','sur_wer_p',0);
   USERS.grp_splt(_grp,,'horizontal','pozioma_4',0);
:: -----------------------------------------------
   exec('create','#desktop',USERS,'ctr_menu_sur',_grp,{? VEK.DPI=96 || 15 || 12 ?},eSelect.grp_width,,,,1);
   USERS.grp_splt(_grp,,'horizontal','pozioma_2',0);
   exec('create','#desktop',USERS,'ctr_menu_nav',_grp,{? VEK.DPI=96 || 3 || 2 ?},eSelect.grp_width);
   USERS.win_sel(_grp);
:: Zapisanie wartości z okna rejestracji wykonania

   USERS.select();
   USERS.cntx_pop();

   eLevel.down();
   exec('after_real_dok','zamsiw_rea')
?};
~~


\btn_surlsave
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Przycisk Zapisz w rozpisce surowców
::----------------------------------------------------------------------------------------------------------------------
{? __ENV_REJ.MGP || exec('paleta_kkod','ekioski1'); return(~~) ?};

_tab:=__ENV_REJ.TAB_N;
_rez:=__ENV_REJ.TAB;
_ndx:=__ENV_REJ.NDX3;

_il_str:=exec('get_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur');
_il:=exec('str2real','#convert',_il_str);
:: Pole z kodem kreskowym w okienku (z czytnika kodów kreskowych)
_kkod:=exec('get_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur');
_ktm:=exec('FindAndGet','#table','M',_tab.MREF,,"M.ref()",null());

{? _kkod<>'' & _il_str=''
|| _ildst:=exec('ilWGscean','ekioski',_tab.ZRPREF,_kkod,_tab.LIL);
   {? _ildst>0
   || exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur',form(_ildst,,,'99'));
      _il:=_ildst
   ?}
|| _ildst:=-1
?};

_can_continue:=0;

_czyid:=exec('get_user_param','ekioski',8785,type_of(''))<>'T';
_iskod:=_kkod<>'';

{? _kkod='' | _kkod<>''
|| {? _il_str<>''
   ||
      _dokl:=exec('jaka_dok_m','jm',_ktm);
      _il:={? _dokl>0
           || _il$ _dokl
           || ceil(_il)
           ?};
      {? _il<=0
      || FUN.info('Należy podać ilość większą od zera.'@);
         return()
      |? _tab.IL>=_tab.LIL
      || FUN.info('Wszystkie pobrania zostały rozpisane.'@);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         exec('set_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur','');
         return()
      |? _tab.size()=0
      || FUN.info('Brak danych do modyfikacji. Funkcja nieaktywna.'@);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         return()
::      |? _il<0
::      || FUN.info('Ilość musi być większa od zera'@)
      |? _kkod='' & _czyid
      || FUN.info('Nie można wydawać surowca bez wskazania dostawy.'@);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
         return()
      |? (_il+_tab.IL)>_tab.LIL
      || _ilpob:=_tab.LIL-_tab.IL;
         FUN.info('Zbyt duża ilość do pobrania.\nMaksymalnie można pobrać %1.'@[form(_ilpob,,_dokl,'99')]);
         exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur',form(_ilpob,,_dokl,'99'));
         return()
      ?};
      {? _tab.ZRPREF<>'' & (__zknrea.prefix(); __zknrea.seek(_tab.ZRPREF))
      || {? _kkod<>''
         || __zknrea.REA+=_il;
            __zknrea.RES+=_il;
            {? exec('zknrea_wdst','zamsiw_rea',_kkod,_il)
            || {? __zknrea.put(1) || _can_continue:=1 || _kkod:='' ?}
            || __zknrea.REA-=_il;
               __zknrea.RES-=_il;
               _kkod:=''
            ?}
         ?};
         {? ~_iskod
          | (_kkod='' & {? ~_czyid
                        || FUN.ask('Brak ilości na wskazanej dostawie.\nCzy przypisać ilość bez wskazania dostawy?'@)
                        || 0
                        ?})
         || __zknrea.REA+=_il;
            __zknrea.RES+=_il;
            {? exec('popzkrea','zamsiw_rea') || {? __zknrea.put(1) || _can_continue:=1 ?} ?}
         ?}
      ?};
      {? _can_continue
      || _tab.IL:=__zknrea.REA;
         {? _tab.put()
         || _rez.index(_ndx);
            _rez.prefix(_tab.ZRPREF);
            {? _rez.first() || {! |? _rez.del() !} ?};
            ZK_RP.cntx_psh();
            REZ.cntx_psh();
            _zk_p:=exec('FindAndGet','#table',ZK_RP,__zknrea.REF,,"P",null());
            {? _zk_p<>null()
            || ZK_RP.index('ZK_P');
               ZK_RP.prefix(__refrea,_zk_p);
               {? ZK_RP.first()
               || {!
                  |? {? ZK_RP.SC<>'' || ZK_RP.W:='*'; ZK_RP.put(1) ?};
                     {? ZK_RP.W='*' & ZK_RP.REZ<>null() & ZK_RP.ILR>0
                     || _rez.blank();
                        _rez.SCEAN:={? ZK_RP.REZ().SC<>''
                                    || exec('FindAndGet','#table',DK,ZK_RP.REZ().SC,,"SCEAN",'')
                                    || '<bez dostawy>'
                                    ?};
                        _rez.KTM:=_tab.KTM;
                        _rez.M:=_tab.M;
                        _rez.ZRPREF:=_tab.ZRPREF;
                        _rez.ZK_RP:=$ZK_RP.ref();
                        _rez.IL:=ZK_RP.ILR;
                        _rez.JM:=_tab.JM;
                        _rez.MG:=ZK_RP.REZ().MG().SYM;
                        _rez.MGREF:=$ZK_RP.REZ().MG;
                        _rez.MREF:=$ZK_RP.REZ().M;
                        _rez.add(1)
                     ?};
                     ZK_RP.next()
                  !}
               ?}
            ?};
            REZ.cntx_pop();
            ZK_RP.cntx_pop()
         ?}
      ?};
      grp_disp(__ENV_REJ.TAB_N,__ENV_REJ.WER_N,1);
      exec('set_value','#desktop','','ctr_menu_sur','fld_il_sur@menu_sur','');
      exec('set_value','#desktop','','ctr_menu_sur','fld_dostawa@menu_sur','')
   ?}
?};
~~


\btn_gen_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Generacja dokumentu wydania
::   WE: [_a] - rodzaj realizacji 0-domyślna wg dostaw 1-paletowa
::----------------------------------------------------------------------------------------------------------------------
_type:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LMG_ZAM_IPRZ';
_params.UIDREF:={? ZK_N.LIM='T' || ZK_N.ZL().uidref() || ZK_N.uidref() ?};
_params.AKCJA:='eKioskAkceptuj';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZAM',ZK_N.ref());
{? ZK_N.LIM='T'
|| exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZL',ZK_N.ZL)
?};
{? ZK_N.LIM='T'
||
   _params.CONTEXT:=exec('context','zamsiw_rea');
   _params.CONTEXT.ZK_N:=ZK_N.ref();
   _params.CONTEXT.MGP:=_type
?};
exec('mp_run','#b__box',_params)


\btn_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Obsługa przycisku Wydanie w oknie materiałów operacji
::----------------------------------------------------------------------------------------------------------------------
exec('surowce_lim','ekioski',0);
~~


\usunGrop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Usuwa zarejestrowaną (niepotwierdzoną) rejestrację do grupy operacji
::       Akcja przycisku Usuń z poziomu panelu potwierdzania grup operacji
::----------------------------------------------------------------------------------------------------------------------
{? __GROP.tab.ZLGD<>''
|| ZLGD.cntx_psh();
   _mask:=ref_name(__GROP.tab.ZLGD);
   {? ZLGD.name()<>_mask || ZLGD.use(_mask) ?};
   ZLGD.clear();
   {? ZLGD.seek(__GROP.tab.ZLGD,)
   || {? ZLGD.GROP<>null()
      || {? exec('zlgd_usun','zl_grop')
         || __GROP.tab.del();
            grp_disp(__GROP.tab,__GROP.win)
         ?}
      ?}
   ?};
   ZLGD.cntx_pop()
?};
~~


\ilWGscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Oblicza ilość na dostawie wg podanego identyfikatora dostawy
::   WE: _a - wskazanie na pozycje realizacji
::       _b - identyfikator dostawy
::       _c - maksymalna ilość
::   WY: ilość
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_zknrea:={? var_pres('_a')=type_of('') & _a<>'' & (__zknrea.prefix(); __zknrea.seek(_a)) || __zknrea.REF || '' ?};
 _scean:={? var_pres('_b')=type_of('') & _b<>'' || _b || '' ?};
 _maxil:={? var_pres('_c')=type_of(0.1) || _c || 0 ?};

{? _zknrea<>'' & _scean<>''
|| _zkp:=exec('FindAndGet','#table',ZK_RP,_zknrea,,"$P",'');
   {? _zkp<>''
   || _mag:=exec('FindAndGet','#table',ZK_P,_zkp,,"RMAG",null());
      _mat:=exec('FindAndGet','#table',ZK_P,_zkp,,"M",null());
      {? _mag<>null() & _mat<>null()
      || exec('sc_aktyw','magazyn_stan',_mag,_mat);
         _stskind:='NOZ';
         exec('sc_tymczas','magazyn_stan',_mag,_mat,'T',,_stskind,2,,,,_scean);
         __sc.clear();
         {? __sc.first() || {! |? _res+=__sc.S; __sc.next() !} ?}
      ?}
   ?};
   {? _res>_maxil || _res:=_maxil ?}
?};
_res


\btn_twrkplc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Start operacji na skonfigurowanym stanowisku - przycisk 'Start na stanowisku' w panelu pracownika
::----------------------------------------------------------------------------------------------------------------------
exec('work_rej','ekioski');
1


\btn_sprej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przycisk Sposób rejestracji w panelu rozpoczynania operacji - zmiana sposobu rejestracji operacji
::       (czy przez pracownika, czy przez brygadę)
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@);  return() ?};
{? exec('zmsprej','prod_rej')>0
||
:: Po wykonaniu akcji w przycisku odswiezamy okno z rejestracji
   grp_disp(PROD_REJ,eSelect.wer_rej,1,1)
?};
~~


\filter_4rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Filtr w oknie rejestracji wykonań (obecnie tylko w wersji developerskiej)
::----------------------------------------------------------------------------------------------------------------------
{? PROD_REJ.f_size()=0 || FUN.info('Brak danych. Funkcja nieaktywna.'@);  return() ?};

_tab:=tab_tmp(1
   ,'TXT','STRING[255]','Szukany tekst'@
);

_red:=_tab.mk_edit('Wyszukiwanie zapisów'@,,'searchprodrej',10,10);
_tab.win_efld(_red,,'TXT',,,50);
exec('ok_esc','#window',_tab,_red);
_tab.win_edit(_red);
{? _tab.edit()
|| _ok:=0;
   {!
   |? _find:=
         PROD_REJ.find_tab(0,'OPER',,'likeIC','%%%1%%'[_tab.TXT]) |
         PROD_REJ.find_tab(0,'OPIS',,'likeIC','%%%1%%'[_tab.TXT]);
      {? _find
      || {? PROD_REJ.f_seek(PROD_REJ.ref())
         || _ok:=1
         ?}
      ?};
      _find & _ok=0
   !};
:: Po wykonaniu akcji w przycisku odświeżamy okno rejestracji wykonań
   grp_disp(PROD_REJ,eSelect.wer_rej,1,1)
?};
~~


\WydLimit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Funkcja Limity - wyświetla okno do rozliczenia surowców limitowanych
::   WE: _a - miejsce wywołania:
::            [1] - przy rejestracji wykonania produkcji
::            0 - przy starcie operacji
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of(0) || _a || 0 ?};
~~

:Sign Version 2.0 jowisz:1045 2023/08/17 16:30:23 5bddfc4000ebe27d4604c57fb0a530b7a414c8c6d68c7d8610105c592e5b0cf4727df53ce7db73292ffc35f63e20d6f2006766bc8438661f6d8a78e582b411186a6f0d2ea8522278172b1a6cf623cd9434965840d4fe7055d5cde7255f268f8d4100ba2e5f92be89d5a5e2e6520abfbf3efc6355ee52946cc9eff443f5fc7ceb
