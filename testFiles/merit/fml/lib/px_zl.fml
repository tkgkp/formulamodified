:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku:  px_zl.fml
:: Utworzony: 18.08.2021
:: Autor: WH
::======================================================================================================================
:: Zawartosc: Formuły do obsługi tabeli PX_ZL - Zlecenia do obiektów grupujących
::======================================================================================================================


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Dodaje rekord PX_ZL
::   WE: _a - PX_GRP.ref - obiekt grupujący kolejki
::       _b - ZL.ref - zlecenie
::       _c - REAL - ilość obiektu grupującego zlecona
::   WY: PX_ZL.ref lub null
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_px_grp:=_a;
_zl:=_b;
_ilosc:=_c;

_result:=0;

{? _px_grp<>null() & _zl<>null() & _ilosc>0
|| PX_ZL.cntx_psh();
   PX_ZL.index('PX_GRP');
   PX_ZL.prefix(_px_grp,_zl);
   {? PX_ZL.first()
   || _result:=PX_ZL.ref()
   || PX_ZL.blank();
      PX_ZL.PX_GRP:=_px_grp;
      PX_ZL.ZL:=_zl;
      PX_ZL.ILOSC:=_ilosc;
      {? PX_ZL.add()
      || _result:=PX_ZL.ref();
::       Blokuję grupę w kolejce
         exec('block','px_grp',_px_grp,'Z');

::       Odtwarzam pola HAS_ZL
         exec('update_has_zl_grp','px_zl',_px_grp)
      ?}
   ?};
   PX_ZL.cntx_pop();
   ~~
?};
_result


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Poprawia rekord PX_ZL
::   WE: [_a] - PX_ZL.ref lub bieżący rekord
::       _b - REAL - ilość
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PX_ZL.ref())
|| _ref:=_a
?};
_ilosc:=_b;

_result:=0;
_can_continue:=1;

PX_ZL.cntx_psh();
{? _ref<>null()
|| PX_ZL.prefix();
   {? PX_ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| PX_ZL.ILOSC:=_ilosc;
   _can_continue:=PX_ZL.put()
?};
PX_ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Kasuje podany rekord tabeli PX_ZL (wykonywane w transakcji!!!)
::   WE: _a - PX_ZL.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL>
::UWAGA: Parametry bez [] są wymagane, formula może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
PX_ZL.cntx_psh(); PX_ZL.clear();
{? PX_ZL.seek(_ref)
|| _px_grp:=PX_ZL.PX_GRP;
   {? exec('clean','px_zl',_ref)>0
   || {? PX_ZL.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?};

   {? _result>0 & _px_grp<>null()
   || exec('unblock_grp','px_zl',_px_grp)
   ?};

   {? _result>0 & _px_grp<>null()
   ||
::    Odtwarzam pola HAS_ZL
      exec('update_has_zl_grp','px_zl',_px_grp)
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

PX_ZL.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Czyści powiązania do rekordu tabeli PX_ZL
::   WE: _a - PX_ZL.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\clone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Klonuje biezacy rekord PX_ZL i przypina go do podanego PX_GRPa
::   WE: _a - PX_GRP.ref
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_grp:=_a;

_result:=_a;

PX_ZL.cntx_psh();
PX_ZL.clear();
PX_ZL.PX_GRP:=_px_grp;
_result:=PX_ZL.add();
PX_ZL.cntx_pop();
_result


\unblock_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Odblokowuje grupę jeżeli była zablokowana i nie ma już żadnych PX_ZL
::   WE: [_a] - PX_GRP.ref grupa lub bieżący rekord
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PX_GRP.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

PX_GRP.cntx_psh();
{? _ref<>null()
|| PX_GRP.prefix();
   {? PX_GRP.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| PX_ZL.cntx_psh();
   PX_ZL.index('PX_GRP');
   PX_ZL.prefix(PX_GRP.ref());
   {? PX_ZL.first()=0 & PX_GRP.BLK='Z'
   || _can_continue:=exec('unblock','px_grp',PX_GRP.ref(),'Z')
   ?};
   PX_ZL.cntx_pop()
?};
PX_GRP.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\update_has_zl_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Aktualizuje pole HAS_ZL w tabelach: PX_GRP, PX_TAG, PX_OBJ
::   WE: [_a] - PX_GRP.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PX_GRP.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

PX_GRP.cntx_psh();
{? _ref<>null()
|| PX_GRP.prefix();
   {? PX_GRP.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| PX_ZL.cntx_psh();
   PX_ZL.index('PX_GRP');
   PX_ZL.prefix(PX_GRP.ref());
   _has_zl:='N';
   {? PX_ZL.first()
   || _has_zl:='T'
   ?};
   PX_GRP.HAS_ZL:=_has_zl;
   _can_continue:=PX_GRP.put();

   {? _can_continue>0 & PX_GRP.PX_TAG<>null()
   || _can_continue:=exec('update_has_zl_tag','px_zl',PX_GRP.PX_TAG)
   ?};

   PX_CONN.cntx_psh();
   PX_CONN.index('PX_GRP');
   PX_CONN.prefix(PX_GRP.ref());
   {? _can_continue>0 & PX_CONN.first()
   || {!
      |? {? PX_CONN.PX_OBJ<>null()
         || _can_continue:=exec('update_has_zl_obj','px_zl',PX_CONN.PX_OBJ)
         ?};
         PX_CONN.next() & _can_continue>0
      !}
   ?};
   PX_CONN.cntx_pop();

   PX_ZL.cntx_pop()
?};
PX_GRP.cntx_pop();
PX_GRP.get();
{? _can_continue>0
|| _result:=1
?};
_result


\update_has_zl_tag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Aktualizuje pole HAS_ZL w tabeli PX_TAG
::   WE: [_a] - PX_GRP.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PX_TAG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

PX_TAG.cntx_psh();
{? _ref<>null()
|| PX_TAG.prefix();
   {? PX_TAG.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| PX_GRP.cntx_psh();
   PX_GRP.index('PX_TAG');
   PX_GRP.prefix(PX_TAG.ref(),exec('get_mainversion','px_ver'));
   _has_zl:='N';
   {? PX_GRP.first()
   || {!
      |? {? PX_GRP.HAS_ZL='T'
         || _has_zl:='T'
         ?};
         PX_GRP.next() & _has_zl='N'
      !}
   ?};
   PX_TAG.HAS_ZL:=_has_zl;
   _can_continue:=PX_TAG.put();
   PX_GRP.cntx_pop()
?};
PX_TAG.cntx_pop();
PX_TAG.get();
{? _can_continue>0
|| _result:=1
?};
_result


\update_has_zl_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Aktualizuje pole HAS_ZL w tabeli PX_TAG
::   WE: [_a] - PX_GRP.ref lub bieżący rekord
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(PX_OBJ.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

PX_OBJ.cntx_psh();
{? _ref<>null()
|| PX_OBJ.prefix();
   {? PX_OBJ.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _has_zl:='N';
   PX_GRP.cntx_psh();
   PX_CONN.cntx_psh();
   PX_CONN.index('VER');
   PX_CONN.prefix(exec('get_mainversion','px_ver'),PX_OBJ.ref());
   {? PX_CONN.first()
   || {!
      |? {? PX_CONN.PX_GRP().HAS_ZL='T'
         || _has_zl:='T'
         ?};
         PX_CONN.next() & _has_zl='N'
      !}
   ?};
   PX_CONN.cntx_pop();
   PX_GRP.cntx_pop();

   PX_OBJ.HAS_ZL:=_has_zl;
   _can_continue:=PX_OBJ.put();
   ~~
?};
PX_OBJ.cntx_pop();
PX_OBJ.get();
{? _can_continue>0
|| _result:=1
?};
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 979f7046abac3f5b21b8417fb30b59efa0ec61c27a885d3364425def440f9148daed37f7f73b2e569e4dccfc5c4c682e8538d0a8912f3fb92fed7dafb9675855857c465fa1f9e926e7c0e62d301f1dd204264d65a36970b59645e70365517968d516fa8d9fb9d4aa47d44eb2d1f3653c16b9b04d9dcd956f0f999ebb72287c9f
