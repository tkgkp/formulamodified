:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_umo.fml [12.51]
:: Utworzony: 2019/03/13
:: Autor: jaws
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę kartoteki umów o prowadzenie.
::======================================================================================================================


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed modyfikacją (dołączenie/poprawienie) wiersza tabeli PPK_UMO.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? PPK_UMO.UID=0 || PPK_UMO.UID:=exec('tm_stamp','#tm_stamp') ?};
1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed dołącz" tabeli PPK_UMO.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_umo');
1


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "przed popraw" tabeli PPK_UMO.
::   WE:
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_umo');
1


\_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po popraw" tabeli PPK_UMO.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_update','ppk_zal',bfld('UID'),PPK_UMO.UID)
|| undo()
?};

{? exec('lic_or','#b_domain','POR')
|| PPK_UCZ.cntx_psh();
   PPK_UCZ.index('UNIQUE');
   PPK_UCZ.prefix(PPK_UMO.ref());
   {? PPK_UCZ.first()
   || PPK_UCZ.trig_off('*','*');
      {!
      |? PPK_UCZ.put(,1);
         PPK_UCZ.next()
      !};
      PPK_UCZ.trig_on('*','*')
   ?};
   PPK_UCZ.cntx_pop()
?};

~~


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli PPK_UMO.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',PPK_UCZ,'UNIQUE',PPK_UMO.ref()) &
exec('del_ndx','#table',PPK_RPL,'PPK_RPL',PPK_UMO.ref())


\_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wyzwalacz "po usuń" tabeli PPK_UMO.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: podstawowy warunek dalszego działania
{? ~_a | do_state()<>1 || return() ?};

{? ~exec('_remove','ppk_zal',bfld('UID'))
|| undo()
?};
~~


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustala kontekst tabeli PPK_UMO i domyślną umowę o zarządzanie.
::   WE: [_a] [DATE] - Data do ustalenia aktualnej umowy.
::   WY: Wskazanie wiersza tabeli PPK_UMO
::----------------------------------------------------------------------------------------------------------------------
_dt:={? var_pres('_a')<>type_of(date) || date() || _a ?};

:: domyślna umowa o prowadzenie
KST_PPK.PPK_UMO:=null;

:: znajdź umowę o prowadzenie
PPK_UMO.index('F_OD');
PPK_UMO.prefix(exec('firma','ustawienia'));
{? PPK_UMO.find_ge(_dt) | PPK_UMO.first()
|| KST_PPK.PPK_UMO:=PPK_UMO.ref()
?};

KST_PPK.PPK_UMO


\choose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wybór wiersza tabeli PPK_UMO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_UMO.index('F_OD');
PPK_UMO.prefix(exec('firma','ustawienia'));

KST_PPK.PPK_UMO();
_old:=PPK_UMO.win_sel('WYB');
{? (_ok:=PPK_UMO.select())<>0
|| KST_PPK.PPK_UMO:=PPK_UMO.ref()
|| KST_PPK.PPK_UMO()
?};
exec('title','ppk');
PPK_UMO.win_sel(_old);
PPK_UMO.index('OD');

_ok


\rek_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Po edycji wiersza tabeli PPK_UMO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mod:=-menu_txt()='popraw';

_chk:=__CHK.table(PPK_UMO,_mod,,'PPK_UZA','DZ','NUMER','OD');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

_zd:=date(0,0,0);
:: kontrola względem daty zawarcia
{? PPK_UMO.OD<PPK_UMO.DZ
|| FUN.emsg('Data "Od dnia" nie może być wcześniejsza od daty zawarcia umowy.'@);
   return('OD')
?};
_err:='Wprowadzono niespójne daty.'@;
{? PPK_UMO.DO<>_zd & PPK_UMO.DO<PPK_UMO.OD
|| FUN.emsg(_err);
   return('DO')
?};

:: kontrola nakładania się umów
_od:=PPK_UMO.OD;
_do:=PPK_UMO.DO;
_ref:={? _mod || PPK_UMO.ref() || null ?};

PPK_UMO.cntx_psh();
PPK_UMO.index('OD');
PPK_UMO.prefix(PPK_UMO.PPK_UZA);
_loop:=PPK_UMO.first();
{!
|? _loop
|! {? PPK_UMO.ref()<>_ref
   || {? exec('is','overlap',PPK_UMO,_od,_do)
      || PPK_UMO.cntx_pop();
         FUN.emsg(_err);
         return('DO')
      ?}
   ?};
   _loop:=PPK_UMO.next()
!};
PPK_UMO.cntx_pop();

:: kontrola względem umów o zarządzanie
PPK_UMO.PPK_UZA();
{? PPK_UMO.OD<PPK_UZA.OD
|| FUN.emsg('Data "Od dnia" nie może być wcześniejsza od daty rozpoczęcia umowy o zarządanie.'@);
   return('OD')
|? PPK_UZA.DO<>_zd & (PPK_UZA.DO<PPK_UMO.DO | PPK_UMO.DO=_zd)
|| FUN.emsg('Data "Do dnia" nie może być późniejsza od daty zakończenia umowy o zarządanie.'@);
   return('DO')
?};

1


\usu_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Usuń" menu okienek tabeli PPK_UMO.
::   WE:
::   WY: 0/1 - blokuj/wykonaj akcję
::----------------------------------------------------------------------------------------------------------------------
exec('del_conf','#table')


\usu_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Akcj "Usuń" menu okienek tabeli PPK_UMO.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_od:=PPK_UMO.OD;
_do:=PPK_UMO.DO;
_zd:=date(0,0,0);

{? PPK_UMO.del(,1)
|| PPK_PWP.cntx_psh();
   PPK_PWP.prefix();
   PPK_PWP.f_set(,,
      'FIRMA=:_a '+
      'and to_date(:_b)<=OD '+
      {? _do<>_zd || 'and OD<=to_date(:_c) ' || '' ?},
      exec('firma','ustawienia'),_od,_do
   );
   {? PPK_PWP.f_first() & FUN.ask('Czy usunąć procenty wpłat przypadające na okres umowy?'@)
   || {!
      |? PPK_PWP.f_first()
      |! PPK_PWP.del()
      !}
   ?};
   PPK_PWP.f_clear();
   PPK_PWP.cntx_pop()
?};
~~


\zal_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Przed akcją "Załączniki" menu okienek tabeli PPK_UMO.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('setup','ppk_zal',PPK_UMO,PPK_UMO.UID,,'ZWS_PAR_PUMO');
1


\ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Wskazanie aktualnej umowy o prowadzenie programu.
::   WE:
::   WY: Wskazanie wiersza tabeli PPK_UMO
::----------------------------------------------------------------------------------------------------------------------
KST_PPK.PPK_UMO


\lista_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista uczestników - tworzenie załącznika do umowy o prowadzenie PPK.
::   WE:
::   WY:
:: ~OST: INSYSEXEC
::----------------------------------------------------------------------------------------------------------------------
PPK_ZRD.cntx_psh();
PPK_ZRD.index('SYMBOL');
PPK_ZRD.prefix('PPK_UMO','LISTAUCZ');
{? PPK_ZRD.first()
|| {? __F_ZATR.upr('P') & __F_ZATR.upr('Z') & exec('no_limit','schemat','PPK',0)
   || _plik:='Lista_uczestnikow_'+date()$0+'_'+time()$0+'.pdf';
      _patname:=pth_dir('.pdf');
      _patname:=_patname+{? sys_name(1)='U_LINUX' || '/' || '\\' ?}+_plik;
      {? rep_exec('ppk_listauczestnikow',,,_plik,1)
      || {? ~exec('interm','#system')
         || sys_exec(_plik,,1)
         ?};
         {? FUN.ask('Czy zapisać jako załącznik do umowy?'@)
         || PPK_ZAL.cntx_psh();
            PPK_ZAL.TABELA:='PPK_UMO';
            PPK_ZAL.UID:=PPK_UMO.UID;
            PPK_ZAL.DATA:=date();
            PPK_ZAL.RODZAJ:=PPK_ZRD.ref();
            {? PPK_ZAL.add()
            || PPK_ZAL.bl_file('PLIK',1);
               PPK_ZAL.bl_put('PLIK',_patname,0,,_plik,1)
            ?};
            PPK_ZAL.cntx_pop()
         ?}
      ?};
      ferase(_patname)
   || FUN.emsg('Brak wymaganych uprawnień do przygotowania załącznika z pełną listą uczestników PPK.'@)
   ?}
|| FUN.emsg('Brak wymaganego rodzaju załącznika.'@)
?};
PPK_ZRD.cntx_pop()


\set_flds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Ustawia formuły dla pól. Wywołana bez argumentów ustawia nową obsługę dla pól OD i DO. Użycie z argumentem '*'
::       przywraca ustawienia z definicji systemu.
::   WE: _a [STRING] - określenie sposobu działania:
::       '*' - przywraca formuły określone w definicji systemu,
::       wpp - ustawia dedykowaną obsługę pól OD i DO
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_be:='BEFORE_EDIT';
_ae:='AFTER_EDIT';

{? var_pres('_a')=type_of('') & _a='*'
:: przywróć formuły pól z definicji
|| PPK_UMO.fld_fml('OD',_be,"*");
   PPK_UMO.fld_fml('DO',_ae,"*");
   return()
?};

:: przed edycją pola OD
:: w przypadku poprawiania wiersza zablokuj możliwość zmiany,
:: jeśli dla bieżącej umowy zarejestrowano dane uczestników
PPK_UMO.fld_fml('OD',_be,"
   {? -menu_txt()='popraw'
   || ~exec('jest_ucz','ppk_umo',PPK_UMO.ref())
   || 1
   ?}
");

:: po edycji pola DO
:: w przypadku poprawiania wiersza nie pozwól przesunąć daty tak,
:: żeby informacje o procentowych wysokościach wpłat znalazły się
:: poza zakresem obowiązywania umowy o prowadzenie
PPK_UMO.fld_fml('DO',_ae,"
   {? -menu_txt()<>'popraw'
   || return(1)
   ?};
   PPK_UMO.cntx_psh();
   PPK_UMO.get();
   _do:=PPK_UMO.DO;
   _zd:=date(0,0,0);
   PPK_UMO.cntx_pop();
   {? (_do<>_zd & _do<=PPK_UMO.DO) | PPK_UMO.DO=_zd
::    podanie daty późniejszej nie stwarza problemu
   || return(1)
   ?};
   _ok:=1;
   PPK_PWP.cntx_psh();
   PPK_PWP.index('UNIQUE');
   PPK_PWP.prefix(exec('firma','ustawienia'));
:: czy są informacje przypadające na okres (PPK_UMO.DO,_do>
   {? {? _do=_zd
      || PPK_PWP.find_tab(,'OD',,'>',PPK_UMO.DO)
      || PPK_PWP.find_tab(,'OD',,'>',PPK_UMO.DO,'OD',,'<=',_do)
      ?}
   || FUN.emsg(
         'Nie można zmienić daty zakończenia umowy o prowadzenie\n'
         'ze względu na istniejące informacje o wysokościach wpłat.'@
      );
      _ok:=0
   ?};
   PPK_PWP.cntx_pop();
   _ok
");
~~


\jest_ucz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.51]
:: OPIS: Sprawdza, czy do danej umowy o prowadzenie przypisano chociaż jednego uczestnika.
::   WE: _a _PPK_UMO - wskazanie wiersza w tabeli PPK_UMO
::   WY: 0 - brak uczestników, 1 - jest chociaż jeden uczestnik
::----------------------------------------------------------------------------------------------------------------------
PPK_UCZ.cntx_psh();
PPK_UCZ.index('UNIQUE');
PPK_UCZ.prefix(_a);
_test:=(PPK_UCZ.size()<>0);
PPK_UCZ.cntx_pop();
_test

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:22 befbb3eecc9127899112679fc88aefa92d0bfb8af7e0a6a9f16270e66d63950d80e7e8c2a65220096965131154ee62aaa5771192476b406866d6ae8d781750912c69db158859a5fac3089f912d67f06c6ed0eba78158a3f79c0b9a8257a73e683b57d2bb7a8093b086e3663d9c8e0cc6e4ceaa7b09d6c50dab972df99d775469
