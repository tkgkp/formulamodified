:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_method.fml
:: Utworzony: 11.02.2020
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły obsługujące metody (pozostałe) dostępu do HR Portal.
::
:: FORMUŁY DEDYKOWANE, o ile możliwe wywołują formuły uniwersalne
::
:: Przyjęte założenia dla implementacji portalu:
::
:: Do formuł tworzących argument dla metod *Get w parametrze _env.Param
::   przekazywana jest ostatnia wartość wyniku, czyli zapamiętana poprzednio ModifiedDate_cloud
::
:: Dla formuł tworzących argument dla metod *Modify i *Delete w parametrze _env.Param
::   przekazywany jest uidref() rekordu, który był przetworzony
::
::======================================================================================================================


::======================================================================================================================
:: Metody konfiguracyjne - sl_TenantDataDictionary (Dodatkowe kolumny)
::======================================================================================================================


\sl_TenantDataDictModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania sl_TenantDataDictionaryModify.
::       Kontekst wywołania - rekord tabeli PORTALK
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
_obj.set('__ModifiedDate_erp',PORTALK.idput_value());
_obj.set('__id_erp',PORTALK.uidref());
::----------------------------------------------------------
_obj.set('FieldName',PORTALK.FLD);
_obj.set('FieldDescription',PORTALK.DESC);
_obj.set('FieldGridDescription',PORTALK.GRIDDESC);
_obj.set('FieldHint',PORTALK.HINT);
_obj.set('FieldType',PORTALK.FLDTYPE);
_obj.set('FieldGridWidth',PORTALK.GRIDWDTH);
_obj.set('FormWidth',PORTALK.FORMWDTH);
_obj.set('CaptionWidth',PORTALK.CAPTWDTH);
_obj.set('MinValue',PORTALK.MINVALUE);
_obj.set('MaxValue',PORTALK.MAXVALUE);
_obj.set('FormatString',PORTALK.FORMSTR);
_obj.set('LookupType',PORTALK.LKUPTYPE);
_obj.set('DataFieldForLookup',PORTALK.LKUPFLD);
_obj.set('LookupCode',PORTALK.LKUPCODE);
_obj.set('IsEnabled',PORTALK.ENABLED='T');
_obj.set('Required',PORTALK.REQUIRED='T');
_obj.set('ReadOnly',PORTALK.READONLY='T');
_obj.set('VisibleByDefault',PORTALK.VDEFAULT='T');
_obj.set('ProcessingPriority',PORTALK.PRIORITY);
{? PORTALK.CTRFIELD<>''
|| _obj.set('AvailabilityControlField',PORTALK.CTRFIELD)
?};
{? PORTALK.CTRSET<>''
|| _obj.set('AvailabilityControlValueSet',PORTALK.CTRSET)
?};
_obj.save()


\sl_TenantDataDictModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja uproszczonych kolumn dodatkowych - parametr zapytania sl_TenantDataDictionaryModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALK%1_ID'[_typ];
_formula_json:="params_exec('sl_TenantDataDictModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\sl_TenantDataDictModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantDataDictionaryModify.
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALK%1_ID'[_typ];
params_exec('Modify_parse','portal_core',_id)


\sl_TenantDataDictGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie uproszczonych kolumn dodatkowych - parametr zapytania sl_TenantDataDictionaryGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantDataDictGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantDataDictionaryGet.
::       Przetwarza dane i modyfikuje (tylko funkcja testująca dane na portalu bez zapisu do bazy)
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALK%1_ID'[_typ];
_formula:="
   {? _b='put'
   || _id_erp:=_a.getValue('__id_erp');
      {? var_pres('_id_erp')<>type_of('') || _id_erp:='' ?};
      KOMM.add(
         'Put dla elementu %1 / %2'@
         [$_a.getValue('__id_cloud'),_id_erp]
      )
   || KOMM.add(
         'Add dla elementu %1'@
         [$_a.getValue('__id_cloud')]
      )
   ?}
";
params_exec('Get_parse','portal_core',_id,_formula)


\sl_TenantDataDictDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parametr zapytania sl_TenantDataDictionaryDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALK%1_ID'[_typ];
params_exec('Delete_args','portal_core',_id)


\sl_TenantDataDictDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantDataDictionaryDelete.
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALK%1_ID'[_typ];
params_exec('Delete_parse','portal_core',_id)


::======================================================================================================================
:: Metody konfiguracyjne - sl_TenantUser (użytkownicy portalu)
::======================================================================================================================


\sl_TenantUserModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania sl_TenantUserModify.
::       Kontekst wywołania - rekord tabeli USERS
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / '' (nie używany w tej formule)
::       _c [ANY]    - parametr opcjonalny (zakres wartości: 'on', 'off', 'enable', 'disable')
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;

:: _action='on' włączenie konta na portalu
:: _action='off' wyłączenie konta na portalu
:: _action='enable' włączenie logowania na portalu
:: _action='disable' wyłączenie logowania na portalu
_action:={? var_pres('_c')=type_of('') || _c || 'disable' ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Aktywni użytkownicy webowi, którzy mają wpisany login webowy będący poprawnym adresem e-mail
{? USERS.AKT='T' & USERS.PORTAL='T' & USERS.WEBLOGIN<>'' & exec('mail_ok','#email',USERS.WEBLOGIN)
|| _obj.create();

   _obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
::   _obj.set('__ModifiedDate_erp',USERS.idput_value());
:: Brany bieżący znacznik czasowy, bo w tym momencie nie jest jeszcze robiony put()
   _obj.set('__ModifiedDate_erp',date(),time());
   _obj.set('__id_erp',USERS.uidref());
::----------------------------------------------------------
   _obj.set('TenantUserDesc',exec('strcut','#string',USERS.memo_txt(,1,'DESC'),100,1));
   _obj.set('LoginName',USERS.WEBLOGIN);
   {? _action='on' | _action='off' || _obj.set('Active',_action='on') ?};
   _obj.set('IsAdmin',0);
   _obj.set('FirstName',{? USERS.OSOBA<>null() || USERS.OSOBA().PIERWSZE || USERS.KOD ?});
   _obj.set('SurName',{? USERS.OSOBA<>null() || USERS.OSOBA().NAZWISKO || USERS.DANE ?});
   {? _action='enable' | _action='disable' || _obj.set('IsEnabled',_action='enable') ?};

   _obj.save()
?}


\sl_TenantUserModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodanie/modyfikacja użytkowników portalu - parametr zapytania sl_TenantUserModify.
::       Funkcja jest używana w trybie 'Uruchomienie' w kontekście rekordu USERS,
::       Sposób działania: 'on', 'off' przekazany jest w env.Param.action
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_TenantUserModify_json','portal_method',_a,_b,_c)";
params_exec('Modify_args','portal_core','PORTAL_USERS_ID',_formula_json)


\sl_TenantUserModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_USERS_ID')


\sl_TenantUserGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie użytkowników - parametr zapytania sl_TenantUserGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantUserGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli USERS na podstawie wyniku zapytania sl_TenantUserGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
:: Teoretycznie na portalu nie ma usuwania ...
|| return()
?};

_result:='';

:: Dla 'add' i 'put' próba znalezienia użytkowników o podanym e-mail (weblogin), aktywacja gdy jest jeden
{? _act='add' | _act='put'
|| _login_name:=_obj.getValue('LoginName');
   USERS.cntx_psh();
   USERS.prefix();
   _tab:=sql('
      select USERS.REFERENCE as REF
      from USERS
      where lower(USERS.WEBLOGIN)=\':_a\'
   ',-_login_name);
   _size:=_tab.size();
   {? _size=0
   || KOMM.add('Brak użytkownika do aktualizacji, weblogin (e-mail): %1'@[_login_name]);
      _result:=0
   |? _size=1 & _tab.first() & USERS.seek(_tab.REF)
   || exec('put_usersf','users',,,,,,,,,,,
         {? _obj.getValue('Active') || 'T' || 'X' ?},,,
         {? _obj.getValue('IsEnabled') || 'T' || 'N' ?}
      );
::      USERS.PORTAL2:={? _obj.getValue('Active') || 'T' || 'X' ?};
::      USERS.PORTAL2E:={? _obj.getValue('IsEnabled') || 'T' || 'N' ?};
::      USERS.put();
      {? _act='add' || _result:=USERS.uidref() || _result:='' ?}
   || KOMM.add('Wielu użytkowników ma ten sam weblogin (e-mail): %1'@[_login_name]);
      _result:=~~
   ?};
   USERS.cntx_pop()
?};

_result


\sl_TenantUserGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli USERS
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_USERS_ID',"exec('sl_TenantUserGet_update','portal_method',_a,_b)")


\sl_TenantUserDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parametr zapytania sl_TenantUserDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_USERS_ID')


\sl_TenantUserDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_USERS_ID')


::======================================================================================================================
:: Metody konfiguracyjne - sl_TenantUserRights (role portalu)
::======================================================================================================================


\sl_TenantUserRightsModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: JSON dla zapytania sl_TenantUserRightsModify.
::       Kontekst wywołania - rekord tabeli PORTALU
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;

_obj.create();

_obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
_obj.set('__ModifiedDate_erp',PORTALU.idput_value());
_obj.set('__id_erp',
   {? PORTALU.ID_ERP<>'' || PORTALU.ID_ERP || PORTALU.uidref() ?}
);

::----------------------------------------------------------
_obj.set('RightsOprName',PORTALU.OPR_NAME);
_obj.set('LoginName',PORTALU.LOGIN);
_obj.set('Enabled',PORTALU.ENABLED='T');

_ret:=_obj.save();

_ret


\sl_TenantUserRightsModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Modyfikacja uprawnień użytkowników portalu - parametr zapytania sl_TenantUserRightsModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

:: Specjalna obsługa w trybie "Uruchomienie" - nie jest wykorzystywana standardowa \Modify_args
{? _env.Type=exec('mwac_type_exec','synchro')
||
   _obj:=_env.Adds.obj;

   _ret:=0;

   _tab:=_env.Param.Tab;

   PORTALU.cntx_psh(); USERS.cntx_psh(); USERSF.cntx_psh();
   PORTALU.prefix();
   {? _tab.first()
   || {!
      |? {? PORTALU.seek(_tab.REF)
         ||
::          Pomijamy użytkowników, których nie ma na portalu
            USERS.index('USR_AWEB');
            USERS.prefix('T',PORTALU.LOGIN,);
            {? ~USERS.first()
            || _ret:=1
            || exec('get_usersf','users');
               {? USERSF.PORTAL2='T'
               || _obj.create();

                  _obj.set('__ModifiedDate_erp',PORTALU.idput_value());
                  _obj.set('__id_erp',
                     {? PORTALU.ID_ERP<>'' || PORTALU.ID_ERP || PORTALU.uidref() ?}
                  );
                  _obj.set('RightsOprName',PORTALU.OPR_NAME);
                  _obj.set('LoginName',PORTALU.LOGIN);
                  _obj.set('Enabled',PORTALU.ENABLED='T');

                  _ret:=_obj.save()
               ?}
            ?}
         ?};
         _ret & _tab.next()
      !}
   ?};
   PORTALU.cntx_pop(); USERS.cntx_pop(); USERSF.cntx_pop();

   _args:=~~;
:: Obecnie zawsze uchwyt do pliku
::   {? _ret>0
::   || _args:=_env.Adds.obj.json();
::      {? type_of(_args)=type_of(~~)
::      || _args:=fopen(null(),'Uw!',,,1);
::         _env.Adds.obj.json(_args)
::      ?}
::   ?}
   {? _ret>0
   || _args:=fopen(null(),'Uw!',,,1);
      _env.Adds.obj.json(_args)
   ?};
   _args

|| _formula_json:="params_exec('sl_TenantUserRightsModify_json','portal_method',_a,_b)";
   params_exec('Modify_args','portal_core','PORTAL_PORTALU_ID',_formula_json)
?}


\sl_TenantUserRightsModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserRightsModify.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

:: Specjalna obsługa w trybie "Uruchomienie" - nie jest wykorzystywana standardowa \Modify_parse
{? _env.Type=exec('mwac_type_exec','synchro')
||
   _response:=_env.InetResponse;
   _method:=_env.MethodName;

   _result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
   _data:=exec('datafile','sync_mwa',_response.Data);

   {? _response.Status=200
   ||
      _obj:=json_parse(_data
         ,'%1Response'[_method],'Response'
         ,'Array%1Result'[_method],'ArrayResult'
         ,'%1Result'[_method],'Result'
      );

      {? type_of(_obj)=type_of(~~)
      || _result:=0;
         KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
      || {? _obj.Response.ArrayResult.Status=1
         || ~~
         || _result:=0;
            _env.Param.Status:=_obj.Response.ArrayResult.Status;
            _env.Param.ErrorCode:=_obj.Response.ArrayResult.ErrorCode;
            _env.Param.ErrorMessage:=_obj.Response.ArrayResult.ErrorMessage;
            KOMM.msg(
               'Błąd %1 (%2)'@
               [$_obj.Response.ArrayResult.ErrorCode,_obj.Response.ArrayResult.ErrorMessage],0
            )
         ?}
      ?}

   || _result:=0;
      KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   ?};

   obj_del(_data);

   _result

|| params_exec('Modify_parse','portal_core','PORTAL_PORTALU_ID')
?}


\sl_TenantUserRightsGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie uprawnień - parametr zapytania sl_TenantUserRightsGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantUserRightGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALU na podstawie wyniku zapytania sl_TenantUserRightsGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:='';

{? _b='put'
|| PORTALU.ENABLED:={? _obj.getValue('Enabled') || 'T' || 'N' ?};
   {? PORTALU.put()
   || _result:=''
   ?}
|? _b='add'
|| _login:=_obj.getValue('LoginName');
   _opr_name:=_obj.getValue('RightsOprName');
:: Konta techniczne nie są standardowo pobierane
   _tech:=0;
   {? _tech=0 & ~exec('mail_ok','#email',_login)
   || KOMM.add('Użytkownik techniczny: %1 - uprawnienie: %2 nie jest importowane.'@[_login,_opr_name])
   |? ~exec('lic','#b_domain','SEO') & 8+_opr_name='STD_PC_S'
   || KOMM.add('Uprawnienie: %1 przy braku licencji SEO nie jest iportowane.'[_opr_name])
   || PORTALU.cntx_psh();
      PORTALU.index('LOGIN');
      PORTALU.prefix('U',_login,_opr_name,);
      {? PORTALU.first()
      || PORTALU.ENABLED:={? _obj.getValue('Enabled') || 'T' || 'N' ?};
         {? PORTALU.put()
         || _result:=PORTALU.uidref()
         ?}
      || PORTALU.blank();
         PORTALU.TYPE:='U';
         PORTALU.LOGIN:=_login;
         PORTALU.OPR_NAME:=_opr_name;
         PORTALU.OPR_DESC:='';
         PORTALU.PTH_NAME:='';
         PORTALU.PTH_DESC:='';
         PORTALU.ENABLED:={? _obj.getValue('Enabled') || 'T' || 'N' ?};
         _id_erp:=_obj.getValue('__id_erp');
         PORTALU.ID_ERP:={? type_of(_id_erp)=type_of('') || _id_erp || '' ?};
         {? PORTALU.add()
         || _result:=PORTALU.uidref()
         ?}
      ?};
      PORTALU.cntx_pop()
   ?}
|? _b='del'
|| {? PORTALU.del(,1)
   || return('')
   || return(~~)
   ?}
?};

_result


\sl_TenantUserRightsGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserRightsGet.
::       Przetwarza dane i modyfikuje PORTALU
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PORTALU_ID',
   "exec('sl_TenantUserRightGet_update','portal_method',_a,_b)"
)


::======================================================================================================================
:: Metody dostępu do portalu - sl_TenantParams (parametry działania portalu)
::======================================================================================================================


\sl_TenantParamsModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania sl_TenantParamsModify.
::       Kontekst wywołania - rekord tabeli PORPAR.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_typ:=XINFO.POR_CONF;
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_typ==XINFO.POR_CONF;

:: Najpierw definicje:
::  * Konfiguracja jednofirmowa: jeden dzierżawca = jedna firma.
::  * Konfiguracja wielofirmowa: jeden dzierżawca na całą grupę kapitałową (wszystkie firmy).
{? (_typ='J' & PORPAR.FIRMA<>exec('ref_firma','ustawienia')) | (_typ='W' & PORPAR.FIRMA<>null())
:: Jeżeli konfiguracja jest jednofirmowa i bieżący (zmieniony właśnie) rekord nie należy do bieżącej firmy lub
:: jeżeli konfiguracja jest wielofirmowa i bieżący rekord ma wskazanie na firmę,
::    to ten rekord nie powinien być wysyłany.
|| KOMM.add('Wiersz nieobsługiwany przez metodę.'@);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('ParID',PORPAR.SYMBOL);
_obj.set('Value',PORPAR.WARTOSC);
_obj.set('Description',PORPAR.OPIS);
_obj.set('__ModifiedDate_erp',PORPAR.idput_value());
_obj.set('__id_erp',PORPAR.uidref());

_obj.save()


\sl_TenantParamsModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja parametru działania portalu - parametr zapytania sl_TenantParamsModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_typ==XINFO.POR_CONF;
_id:={? _typ='W' || 'PORTAL_PORPARW_ID' || 'PORTAL_PORPARJ_ID' ?};
_formula_json:="params_exec('sl_TenantParamsModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\sl_TenantParamsModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantParamsModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_typ==XINFO.POR_CONF;
_id:={? _typ='W' || 'PORTAL_PORPARW_ID' || 'PORTAL_PORPARJ_ID' ?};
params_exec('Modify_parse','portal_core',_id)


\sl_TenantParamsDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania sl_TenantParamsDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_typ==XINFO.POR_CONF;
_id:={? _typ='W' || 'PORTAL_PORPARW_ID' || 'PORTAL_PORPARJ_ID' ?};
params_exec('Delete_args','portal_core',_id)


\sl_TenantParamsDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantParamsDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_typ==XINFO.POR_CONF;
_id:={? _typ='W' || 'PORTAL_PORPARW_ID' || 'PORTAL_PORPARJ_ID' ?};
params_exec('Delete_parse','portal_core',_id)


::======================================================================================================================
:: Metody obsługujące różnego rodzaju słowniki portalowe
::======================================================================================================================

\sl_TenantLookupCodesGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Pobranie uniwersalnych list wartości - parametr zapytania sl_TenantLookupCodesGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantLookupCodesGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodesGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORSLO
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
params_exec('Get_parse','portal_core',_id,"exec('sl_TenantLookupCodesGet_update','portal_method',_a,_b)")


\sl_TenantLookupCodesGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli PORSLO na podstawie wyniku zapytania sl_TenantLookupCodesGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? PORSLO.count()=0 & PORSLO.del(,1)
   || return('')
   || return(~~)
   ?}
?};

_code:=_obj.getValue('LookupCode');
_customField:=exec('customField','portal_slowniki');
{? _act='add'
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _result:=~~;
   {? _ref:=exec('porslo_add','portal_slowniki',_customField,'',_code,,,,'N')
   || PORSLO.cntx_psh();
      PORSLO.prefix();
      {? PORSLO.seek(_ref)
      || _result:=PORSLO.uidref()
      ?};
      PORSLO.cntx_pop()
   ?};

   {? _mydo || end() ?};

   _result

|| _exist:=exec('porslo_exists','portal_slowniki',_customField,'',_code);
   {?  _exist & (PORSLO.FIELD<>_customField | PORSLO.CODE<>_code)
   || PORSLO.FIELD:=_customField;
      PORSLO.CODE:=_code;
      {? PORSLO.put(,1) ||'' || ~~ ?}
   || ''
   ?}
?}


\sl_TenantLookupCModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania sl_TenantLookupCodesModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: przetwarzamy tylko rekordy związane ze słownikem __CustomField__ niebędące słownikami wirtualnymi
{? PORSLO.FIELD<>exec('customField','portal_slowniki') | PORSLO.TYPE='#VD' || return(0) ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;


{? PORSLO.FIRMA<>null()
:: Niezależnie od konfiguracji wysyłamy tylko rekordy nagłówkowe nie powiązane z firmą
|| return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('LookupCode',PORSLO.CODE);
_obj.set('ListCheckItemValue',0);
_obj.set('ListDescriptionVisible',0);
_obj.set('ReadOnly',PORSLO.SYSTEM='T');
_obj.set('__ModifiedDate_erp',PORSLO.idput_value());
_obj.set('__id_erp',PORSLO.uidref()+PORSLO.FIELD);

_obj.save()


\sl_TenantLookupCModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja parametru działania portalu - parametr zapytania sl_TenantLookupCodesModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
_formula_json:="params_exec('sl_TenantLookupCModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\sl_TenantLookupCModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodesModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
params_exec('Modify_parse','portal_core',_id)


\sl_TenantLookupCDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania sl_TenantLookupCodesDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_uidref:=_env.Param;

_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];

_tab:=exec('get_id','#sync_id',_id,_uidref);
{? ~sql(''+"select * from :_a where :_a.OPIS like '%:_b%'",_tab,exec('customField','portal_slowniki')).first()
|| return(~~)
?};

params_exec('Delete_args','portal_core',_id,_tab)


\sl_TenantLookupCDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodesDelete.
::   Wml
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
params_exec('Delete_parse','portal_core',_id)


\sl_TenantLookupCItGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Pobranie uniwersalnych list wartości - parametr zapytania sl_TenantLookupCodeItemsGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantLookupCItGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodeItemsGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORSLOIT
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
params_exec('Get_parse','portal_core',_id,"exec('sl_TenantLookupCItGet_update','portal_method',_a,_b)")


\sl_TenantLookupCItGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli PORSLOIT na podstawie wyniku zapytania sl_TenantLookupCodeItemsGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? PORSLOIT.count()=0 & PORSLOIT.del(,1)
   || return('')
   || return(~~)
   ?}
?};

_code:=_obj.getValue('LookupCode');
_value:=_obj.getValue('ItemValue');
_desc:=_obj.getValue('ItemDescription');
{? type_of(_desc)=0 || _desc:='' ?};
_rrname:=_obj.getValue('RowRightsName');
{? type_of(_rrname)=0 || _rrname:='' ?};

_customField:=exec('customField','portal_slowniki');
{? _act='add'
|| _res:=~~;
   PORSLO.cntx_psh();
   PORSLO.prefix();
   _porslo:=exec('porslo_exists','portal_slowniki',_customField,'',_code);
   PORSLO.cntx_pop();
   {? _porslo
   || PORSLOIT.cntx_psh();
      PORSLOIT.prefix();
      _firma:=exec('firma4porsloit','portal_slowniki',_porslo);
      _porsloit:=exec('porsloit_add','portal_slowniki',_porslo,_firma,_value,_desc,_rrname);
      {? _porsloit & PORSLOIT.seek(_porsloit)
      || _res:=PORSLOIT.uidref()
      ?};
      PORSLOIT.cntx_pop()
   ?};
   _res
|| {? PORSLOIT.VALUE<>_value | PORSLOIT.DESC<>_desc | PORSLOIT.RRNAME<>_rrname
   || PORSLOIT.VALUE:=_value;
      PORSLOIT.DESC:=_desc;
      PORSLOIT.RRNAME:=_rrname;
      {? PORSLOIT.put(1)
      || ''
      || ~~
      ?}
   || ''
   ?}
?}


\sl_TenantLookupCItModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania sl_TenantLookupCodeItemsModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: przetwarzamy tylko rekordy związane ze słownikem __CustomField__ niebędące słownikami wirtualnymi
{? PORSLOIT.PORSLO().FIELD<>exec('customField','portal_slowniki') | PORSLO.TYPE='#VD' || return(0) ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_typ:=XINFO.POR_CONF;
_isGlobal:=PORSLO.GLOBAL='T';
{? (_typ='J' & ((_isGlobal & PORSLOIT.FIRMA<>null()) | (~_isGlobal & PORSLOIT.FIRMA<>exec('ref_firma','ustawienia')))
 | (_typ='W' & PORSLOIT.FIRMA<>null()))
:: Jeżeli konfiguracja to "jeden tenant=Jedna firma" i bieżący (zmieniony właśnie) rekord:
:: 1) jest słownikiem globalnym i nie ma wskazania na firmę null, lub
:: 2) nie jest słownikiem globalnym i nie należy do bieżącej firmy, lub
:: jeżeli konfiguracja to "jeden tenant=Wiele firm" i bieżący rekord ma wskazanie na firmę,
:: to ten rekord nie powinien być wysyłany.
|| return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('LookupCode',PORSLOIT.PORSLO().CODE);
_obj.set('ItemValue',PORSLOIT.VALUE);
_obj.set('ItemDescription',PORSLOIT.DESC);
_obj.set('RowRightsName',PORSLOIT.RRNAME);
_obj.set('__ModifiedDate_erp',PORSLOIT.idput_value());
_obj.set('__id_erp',PORSLOIT.uidref());

_obj.save()


\sl_TenantLookupCItModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja parametru działania portalu - parametr zapytania sl_TenantLookupCodeItemsModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
_formula_json:="params_exec('sl_TenantLookupCItModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\sl_TenantLookupCItModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodeItemsModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
params_exec('Modify_parse','portal_core',_id)


\sl_TenantLookupCItDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania sl_TenantLookupCodeItemsDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
params_exec('Delete_args','portal_core',_id)


\sl_TenantLookupCItDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantLookupCodeItemsDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLOIT%1_ID'[_typ];
params_exec('Delete_parse','portal_core',_id)


\ckli_AddressTypeModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: JSON dla zapytania ckli_AddressTypeModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

:: przetwarzamy tylko rekordy związane ze słownikem TypAdresu
{? PORSLO.FIELD<>'TypAdresu' || return(0) ?};

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_typ:=XINFO.POR_CONF;
{? PORSLO.FIRMA<>null()
|| return(0)
?};

_TAB:=exec('typy_adresow','portal_slowniki');

_ret:=0;
{? _TAB.first()
|| {!
   |? _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('AddressType',_TAB.KOD);
      _obj.set('Description',_TAB.NAZWA);
      _obj.set('IsPersonAddress',1);
      _obj.set('__ModifiedDate_erp',PORSLO.idput_value());
      _obj.set('__id_erp',PORSLO.uidref()+'@%1@%2'[PORSLO.FIELD,_TAB.KOD]);

      _ret:=_obj.save();
      _ret & _TAB.next()
   !}
?};
_ret


\ckli_AddressTypeModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Dodanie/modyfikacja parametru działania portalu - parametr zapytania ckli_AddressTypeModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
_formula_json:="params_exec('ckli_AddressTypeModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\ckli_AddressTypeModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla ckli_AddressTypeModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
params_exec('Modify_parse','portal_core',_id)


\ckli_AddressTypeDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parametr zapytania ckli_AddressTypeDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_uidref:=_env.Param;

_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];

_tab:=exec('get_id','#sync_id',_id,_uidref);
{? ~sql(''+"select * from :_a where :_a.OPIS like '%:_b%'",_tab,'@TypAdresu@').first()
|| return(~~)
?};

params_exec('Delete_args','portal_core',_id,_tab)


\ckli_AddressTypeDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Parsowanie odpowiedzi dla ckli_AddressTypeDelete.
::   Wml
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORSLO%1_ID'[_typ];
params_exec('Delete_parse','portal_core',_id)


::======================================================================================================================
:: Metody dostępu do portalu - SL_GETBYPOSTDATAABOUTENTITIESTOSYNC -> sl_GetEntitiesToSync (master serwis).
::======================================================================================================================


\sl_GetEntitiesToSync_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie zbiorczej informacji o danych do pobrania przez API
::       - parametr zapytania SL_GETBYPOSTDATAABOUTENTITIESTOSYNC.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

:: UWAGA: Specyficzna obsługa tylko dla tego serwisu - nie jest wykorzystywana \Get_args

:: Parametr wejściowy - tabela o strukturze: ENTITY, DATE, ID
_tab:=_env.Param;

_jman:=exec('json_man','__jsonm','{}');
_jman.setObject(_path:=_jman.addChildElement('','ArraySL_GETBYPOSTDATAABOUTENTITIESTOSYNCData'),'{}');
_jman.setObject(_path:=_jman.addChildElement(_path,'SL_GETBYPOSTDATAABOUTENTITIESTOSYNCData'),'[]');
{? _tab.first()
|| {!
   |? _jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
      _jman.setValue(_jman.addChildElement(_path1,'Entity'),_tab.ENTITY);
      _jman.setValue(_jman.addChildElement(_path1,'__Last_ModifiedDate_cloud'),_tab.DATE);
      _jman.setValue(_jman.addChildElement(_path1,'__id_cloud'),_tab.ID);
      _tab.next()
   !}
?};

_args:=_jman.getJSON();

_args


\sl_GetEntitiesToSync_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie zbiorczej informacji o danych do pobrania przez API
::       - parsowanie wyniku zapytania SL_GETBYPOSTDATAABOUTENTITIESTOSYNC.
::       Przetwarza dane i tworzy tabelę tymczasową.
::   WY: tabela tymczasowa zawierająca identyfikatory encji
::       ~~ - w przypadku niepowodzenia
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

:: UWAGA: Specyficzna obsługa tylko dla tego serwisu - nie jest wykorzystywana \Get_parse

_response:=_env.InetResponse;
_method:=_env.MethodName;

_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

_dev:=0;
:: Dewelopersko - wyświetlamy wynik w tabelce
{? _dev
|| _tab1:=json_tparse(_data);
   {? var_pres('_tab1')>100
   || _wer:=_tab1.mk_sel('TEST'@,'N',0,'test',,,,1);
      _tab1.win_fld(_wer,,'NAME',,,50);
      _tab1.win_fld(_wer,,'VAL',,,50);
      _tab1.win_sel(_wer);
      _tab1.select()
   ?}
?};

{? _response.Status=200
|| _jman:=exec('json_man','__jsonm',_data,'silent');
   _obj:=_jman.new('{}');

:: Wyniki dla wielu zapisów: uwzględniamy tylko te rekordy, dla których: ModifiedDate_cloud>ModifiedDate_erp
:: Wyznaczamy najpóźniejszą datę ModifiedDate_cloud, dla której zostały pobrane dane
   {? _jman.Valid=0
   || KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _jman.getValue('%1Response.Array%1Result.Status'[_method])<>1
      || KOMM.msg(
            'Błąd %1 (%2)'@
            [  $_jman.getValue('%1Response.Array%1Result.ErrorCode'[_method]),
               utf8_maz(_jman.getValue('%1Response.Array%1Result.ErrorMessage'[_method]))
            ],0
         )

      |? _jman.typeOf('%1Response.Array%1Result.%1Result'[_method],1)='A'
::       Jeżeli odpowiedź nie jest typu 'A' to najprawdopodobniej brakuje danych na portalu.
      || _result:=tab_tmp(1,'ENTITY','STRING[30]','Encja'@);
         _count:=_jman.countChildren('%1Response.Array%1Result.%1Result'[_method]);
         {? _count>0
         || {! _it:=1.. _count
            |! _json:=_jman.getJSON('%1Response.Array%1Result.%1Result[%2]'[_method,$_it]);
               _obj.load(_json);
               _result.ENTITY:=_obj.getValue('Entity');
               _result.add()
            !}
         ?}
      ?}
   ?}

|| KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


::======================================================================================================================
:: Metody dostępu do portalu - SL_SENDALLERRORSTOCLOUD (import błędów z ERP do chmury).
::======================================================================================================================


\SL_SENDALLERRORSTOCLOUD_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysłanie logów ERP do chmury
::       - parametr zapytania SL_SENDALLERRORSTOCLOUD.
::   WY: argument w postaci JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

:: UWAGA: Specyficzna obsługa tylko dla tego serwisu - nie jest wykorzystywana \Modify_args

:: Parametr wejściowy - tabela o umówionej strukturze
_tab:=_env.Param;

_jman:=exec('json_man','__jsonm','{}');
_jman.setObject(_path:=_jman.addChildElement('','ArraySL_SENDALLERRORSTOCLOUDData'),'{}');
_jman.setObject(_path:=_jman.addChildElement(_path,'SL_SENDALLERRORSTOCLOUDData'),'[]');
{? _tab.first()
|| {!
   |? _jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
      _jman.setValue(_jman.addChildElement(_path1,'CommunicateType'),_tab.METHOD);
      _jman.setValue(_jman.addChildElement(_path1,'StatusLog'),-1);
      _tt:=gsub(gsub(_tab.DATETIME,'/','-'),' ','T');
      _jman.setValue(_jman.addChildElement(_path1,'DateCommunicate'),_tt);
      _tt:=gsub(gsub(_tab.DATETIME,'/','-'),' ','T');
      _jman.setValue(_jman.addChildElement(_path1,'DateStartProc'),_tt);
      _tt:=iso_datetime_value_utc(iso_datetime_parse_utc(_tt).utc+_tab.ELAPSED);
      _jman.setValue(_jman.addChildElement(_path1,'DateStopProc'),_tt);
::    Odpowiedź=200 - odsyłamy treść komunikatów do limitu objętości (nie są odsyłane, gdy nie mieszczą się w memo)
      {? _tab.HTTPSTAT=200
      || _jman.setValue(_jman.addChildElement(_path1,'ErrorCode'),-1000);
         _jman.setValue(_jman.addChildElement(_path1,'ErrorText'),'Błąd biznesowy');
         _memo:=_tab.memo_txt(,1,'RES_TEXT');
         {? _memo<>''
         || _jman.setValue(_jman.addChildElement(_path1,'MessageOut2'),_memo)
::         |? _tab.RES_DATA<>null()
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageOut2'),fopen(_tab.RES_DATA,'ur',,,1))
         ?};
         _memo:=_tab.memo_txt(,1,'REQ_TEXT');
         {? _memo<>''
         || _jman.setValue(_jman.addChildElement(_path1,'MessageIn2'),_memo)
::         |? _tab.REQ_DATA<>null()
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageIn2'),fopen(_tab.REQ_DATA,'ur',,,1))
         ?}
::    Odpowiedź<>200 - nie są odsyłane treści komunikatów
      || _jman.setValue(_jman.addChildElement(_path1,'ErrorCode'),_tab.HTTPSTAT);
         _jman.setValue(_jman.addChildElement(_path1,'ErrorText'),_tab.STATUS)
::         _memo:=_tab.memo_txt(,1,'RES_TEXT');
::         {? _memo<>''
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageOut2'),_memo)
::         |? _tab.RES_DATA<>null()
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageOut2'),fopen(_tab.RES_DATA,'ur',,,1))
::         ?};
::         _memo:=_tab.memo_txt(,1,'REQ_TEXT');
::         {? _memo<>''
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageIn2'),_memo)
::         |? _tab.REQ_DATA<>null()
::         || _jman.setValue(_jman.addChildElement(_path1,'MessageIn2'),fopen(_tab.REQ_DATA,'ur',,,1))
::         ?}
      ?};
      _jman.setValue(_jman.addChildElement(_path1,'ErrorType'),'ERR_EXTERNAL_BIZNES');
      _jman.setValue(_jman.addChildElement(_path1,'TransmissionType'),'REST_JSON');
      _jman.setValue(_jman.addChildElement(_path1,'HTTPMethod'),_tab.HTTPTYPE);
      _jman.setValue(_jman.addChildElement(_path1,'HTTPResponseCode'),_tab.HTTPSTAT);
      _jman.setValue(_jman.addChildElement(_path1,'CallStack'),
         STR.maz2nop(xml_obj(spli_str(_tab.memo_txt(,1,'APP_TEXT'),'\n'),,,,,,,'indentation=1'))
      );
      _tab.next()
   !}
?};

_args:=fopen(null(),'Uw',,1,1);
_result:=_jman.getJSON(_args);

{? _result || _args || ~~ ?}


\SL_SENDALLERRORSTOCLOUD_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla wysyłki logów z ERP do chmury
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

:: UWAGA: Specyficzna obsługa tylko dla tego serwisu - nie jest wykorzystywana standardowa \Modify_parse

_response:=_env.InetResponse;
_method:=_env.MethodName;

_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
||
   _obj:=json_parse(_data
      ,'%1Response'[_method],'Response'
      ,'Array%1Result'[_method],'ArrayResult'
      ,'%1Result'[_method],'Result'
   );

   {? type_of(_obj)=type_of(~~)
   || _result:=0;
      KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _obj.Response.ArrayResult.Status=1
      || _result:=_obj.Response.ArrayResult.Result[1].__Last_SortValue
      || _result:=0;
         KOMM.msg(
            'Błąd %1 (%2)'@
            [$_obj.Response.ArrayResult.ErrorCode,_obj.Response.ArrayResult.ErrorMessage],0
         )
      ?}
   ?}

|| _result:=0;
   KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


::======================================================================================================================
:: Metody dostępu do portalu - sl_AttachmentConfirmSetting -> sl_AttachConfirmS (parametryzacja potwierdzenia
:: pobrania załącznika).
::======================================================================================================================


\sl_AttachConfirmSModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania sl_AttachmentConfirmSettingModify.
::       Kontekst wywołania - rekord tabeli ZALACZ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::       _c [STRING] - akcja
::       _d [DICT]   - tabela z wszystkimi identyfikatorami dla _ext lub ~~
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;
_action:=_c;
_TAB_ID:=_d;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? ZALACZ.WWWE='N' | ZALACZ.WWW='N'
:: Załącznik nie jest prezentowany na portalu.
|| KOMM.add('Załącznik niedostępny dla pracownika.'@);
   return(0)
?};

BIPKSN.cntx_psh();
BIPKSN.index('UNIQUE');
BIPKSN.prefix(ZALACZ.FIRMA,'ZAL',ZALACZ.TYP_ZAL);
_jest:=BIPKSN.first();
BIPKSN.cntx_pop();
{? _jest=0
|| KOMM.add('Typ załącznika nie jest prezentowany na portalu.'@);
   return(0)
?};

{? exec('retentionZALACZ','portal_lib',ZALACZ.ref())
|| KOMM.add('Załącznik starszy niż zakładany okres retencji.'@);
   return(0)
?};

_ret:=0;
ZAL_KOM.cntx_psh();
ZAL_KOM.index('TYP');
ZAL_KOM.prefix(ZALACZ.TYP_ZAL);
{? ZAL_KOM.first()
|| _tab:=type_of(_TAB_ID)<>type_of(~~);
   {? _tab
   || _ndx:=_TAB_ID.ndx_tmp(,,'OPIS',,);
      _TAB_ID.cntx_psh();
      _TAB_ID.index(_ndx)
   ?};

   P.cntx_psh();

   _message:=exec('strcut','#string',ZAL_KOM.memo_txt(0,1,'TEXT'),6000,1);
   _id1:=ZALACZ.idput_value();
   _id2:=ZAL_KOM.idput_value();
   _mod:={? _id1<_id2 || _id2 || _id1 ?};

   _loop:=ZALACZ.P=null();
   {? _loop
   || P.index('OSOBA');
      P.prefix(ZALACZ.OSOBA,exec('ref_firma','ustawienia'))
   || P.prefix();
      ZALACZ.P()
   ?};

   {? ~_loop | P.first()
   || {!
      |? {? P.PORTAL<>'T'
         || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
            _loop & P.next()
         || _obj.create();

            _obj.set('__id_cloud',
               {? _tab & _TAB_ID.find_key(P.uidref()+ZALACZ.HASH,)
               || #spli_str(_TAB_ID.ID,'|')[1]
               || ~~
               ?}
            );
            _obj.set('Message',_message);
            _obj.set('ConfirmationFrequency',ZAL_KOM.CZW='K');
            _obj.set('__ModifiedDate_erp',_mod);
            _obj.set('__id_erp',ZALACZ.uidref()+P.uidref()+ZALACZ.HASH);
            _obj.set('ConfirmRequired',ZAL_KOM.ZGODA='T');
            _obj.set('Attachment__id_erp',ZALACZ.uidref());

            _ret:=_obj.save();

            _ret & _loop & P.next()
         ?}
      !}
   ?};

   P.cntx_pop();

   {? _tab
   || _TAB_ID.cntx_pop();
      _TAB_ID.ndx_drop(_ndx)
   ?}
?};
ZAL_KOM.cntx_pop();
_ret


\sl_AttachConfirmSModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja parametryzacji potwierdzenia pobrania załącznika - parametr zapytania
::       sl_AttachmentConfirmSettingModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_AttachConfirmSModify_json','portal_method',_a,_b,_c,_d)";
params_exec('Modify_args','portal_core','PORTAL_ZALACZ_POBH_ID',_formula_json,1)


\sl_AttachConfirmSModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentConfirmSettingModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZALACZ_POBH_ID')


\sl_AttachConfirmSDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parametr zapytania sl_AttachmentConfirmSettingDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;

_id:='PORTAL_ZALACZ_POBH_ID';

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;

   _TAB:=exec('get_id','#sync_id',_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem tabeli ZALACZ).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
   {? ~_TAB.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   ZALACZ.cntx_psh();
   ZALACZ.prefix();
   {? ZALACZ.seek(_uidref)
   || _del:=ZALACZ.WWWE='N' | ZALACZ.WWW='N' | ZALACZ.HASH<>48-_TAB.OPIS;
      {? ~_del
      || BIPKSN.cntx_psh();
         BIPKSN.index('UNIQUE');
         BIPKSN.prefix(ZALACZ.FIRMA,'ZAL',ZALACZ.TYP_ZAL);
         _del:=~BIPKSN.first();
         BIPKSN.cntx_pop()
      ?};
      {? ~_del
      || ZAL_KOM.cntx_psh();
         ZAL_KOM.index('TYP');
         ZAL_KOM.prefix(ZALACZ.TYP_ZAL);
         _del:=~ZAL_KOM.first();
         ZAL_KOM.cntx_pop()
      ?};
      {? ~_del
      || P.cntx_psh();
         P.prefix();
         {!
         |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T'
::             Pracownik wciąż "aktywny" - analizowany rekord usuwamy z listy rekordów do usunięcia.
             || _TAB.del()
             || _TAB.next()
             ?}
         !};
         P.cntx_pop()
      ?}
   ?};
   ZALACZ.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core',_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core',_id)
?}


\sl_AttachConfirmSDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentConfirmSettingDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZALACZ_POBH_ID')


::======================================================================================================================
:: Metody dostępu do portalu - sl_AttachmentLog (potwierdzenie pobrania załącznika).
::======================================================================================================================


\sl_AttachmentLogModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: JSON dla zapytania sl_AttachmentLogModify.
::       Kontekst wywołania - rekord tabeli ZAL_POBH.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

{? exec('retentionZALACZ','portal_lib',ZAL_POBH.ZALACZ)
|| KOMM.add('Załącznik starszy niż zakładany okres retencji.'@);
   return(0)
?};

_ret:=0;
ZALACZ.cntx_psh();
ZALACZ.prefix();
ZAL_POBH.ZALACZ();
USERS.cntx_psh();
USERS.prefix();
ZAL_POBH.USER();
P.cntx_psh();

:: Pętla tylko przy zasilaniu dla załączników "osobowych" (bez podanego P).
_loop:=_id=0 & _ext='' & ZALACZ.P=null();
{? _loop
|| P.index('OSOBA');
   P.prefix(ZALACZ.OSOBA,exec('ref_firma','ustawienia'))
|| P.prefix();
   ZALACZ.P()
?};

{? ~_loop | P.first()
|| _message:=exec('strcut','#string',ZAL_POBH.memo_txt(,1,'TEXT'),6000,1);
   {? form(_message)='' || _message:='.' ?};
   {!
   |? {? P.PORTAL<>'T'
      || KOMM.add('Współpracownik nieprezentowany na portalu.');
         _loop & P.next()
      || _obj.create();

         _obj.set('__id_cloud',{? _id || _id || ~~ ?});
         _obj.set('UserName',USERS.WEBLOGIN);
         _obj.set('DateDownload',ZAL_POBH.POB_D,ZAL_POBH.POB_G);
         _obj.set('IsAccepted',ZAL_POBH.POTW='T');
         _obj.set('Message',_message);
         _obj.set('__ModifiedDate_erp',ZAL_POBH.idput_value());
         _obj.set('__id_erp',ZAL_POBH.uidref()+P.uidref()+'|'+USERS.WEBLOGIN);
         _obj.set('Attachment__id_erp',ZALACZ.uidref());
         _obj.set('PersonId__id_Erp',P.uidref());

         _ret:=_obj.save();

         _ret & _loop & P.next()
      ?}
   !}
?};

P.cntx_pop();
USERS.cntx_pop();
ZALACZ.cntx_pop();

_ret


\sl_AttachmentLogModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Dodanie/modyfikacja informacji o pobraniu załącznika - parametr zapytania sl_AttachmentLogModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_AttachmentLogModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_ZAL_POBH_ID',_formula_json)


\sl_AttachmentLogModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentLogModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_ZAL_POBH_ID')


\sl_AttachmentLogGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Pobranie potwierdzenia pobrania załącznika - parametr zapytania sl_AttachmentLogGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_AttachmentLogGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli ZAL_POBH na podstawie wyniku zapytania sl_AttachmentLogGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;
_ext:=_c;

{? _act='del'
:: Teoretycznie na portalu nie ma usuwania ...
|| return()
?};

_zalacz:=null();
_attachment:=_obj.getValue('Attachment__id_erp');
{? type_of(_attachment)=type_of('')
|| ZALACZ.cntx_psh();
   ZALACZ.prefix();
   {? ZALACZ.seek(_attachment)
   || _zalacz:=ZALACZ.ref()
   ?};
   ZALACZ.cntx_pop()
|| _attachment:='<brak>'
?};
{? _zalacz=null()
|| KOMM.error('Odnalezienie pobieranego załącznika [%1] nie powiodło się.'@[_attachment],0);
   return()
?};

_user:=null();
_login:=_obj.getValue('UserName');
{? type_of(_login)=type_of('')
|| USERS.cntx_psh();
   USERS.index('WEBLOGIN');
   USERS.prefix(_login,);
   {? USERS.first()
   || _user:=USERS.ref()
   ?};
   USERS.cntx_pop()
|| _login:='<brak>'
?};
{? _user=null()
|| KOMM.error('Odnalezienie użytkownika [%1], który pobrał załącznik nie powiodło się.'@[_login],0);
   return()
?};

_puidref:='';
_pid:=_obj.getValue('PersonId');
{? type_of(_pid)=type_of(0)
|| _puidref:=exec('getPref','portal_core',_pid,'uidref')
|| _pid:='<brak>'
?};
{? _puidref=''
|| KOMM.error('Odnalezienie pracownika [%1], który pobrał załącznik nie powiodło się.'@[_pid],0);
   return()
?};

{? _act='add'
|| _t_akt:='';
   ZAL_POBH.blank();
   ZAL_POBH.ZALACZ:=_zalacz
|| _t_akt:=ZAL_POBH.memo_txt(,1,'TEXT')
?};
ZAL_POBH.POTW:={? _obj.getValue('IsAccepted') || 'T' || 'N' ?};
_dt:=exec('getDateTime','portal_core',_obj.getValue('DateDownload'));
ZAL_POBH.POB_D:=_dt.date;
ZAL_POBH.POB_G:=_dt.time;
ZAL_POBH.USER:=_user;

{? _act='add'
|| _ret:={? ZAL_POBH.add() || ZAL_POBH.uidref()+_puidref+'|'+_login || ~~ ?}
|| _ret:={? ZAL_POBH.put() || '' || ~~ ?}
?};

{? _ret<>~~
|| _t_new:=_obj.getValue('Message');
   {? _t_akt<>_t_new
   || ZAL_POBH.memo_set(_t_new,'TEXT');
      {? ~ZAL_POBH.memo_put(,'TEXT')
      || _ret:=~~
      ?}
   ?}
?};

_ret


\sl_AttachmentLogGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentLogGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli ZAL_POBH.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_ZAL_POBH_ID',
 "exec('sl_AttachmentLogGet_update','portal_method',_a,_b,_c)"
)


\sl_AttachmentLogDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parametr zapytania sl_AttachmentLogDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_sync_id:='PORTAL_ZAL_POBH_ID';

_ret:=~~;
{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _TAB:=exec('get_id','#sync_id',_sync_id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
::    _TAB.ID     = __id_cloud | __ModifiedDate_cloud
::    _TAB.OPIS   = Dodatkowe informacje z __id_erp
   {? ~_TAB.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};
   ZAL_POBH.cntx_psh();
   ZAL_POBH.prefix();
   {? ZAL_POBH.seek(_uidref)
   || USERS.cntx_psh();
      P.cntx_psh();
      P.prefix();
      {!
      |? {? P.seek(48+_TAB.OPIS,) & P.PORTAL='T' & ZAL_POBH.USER().WEBLOGIN=49-_TAB.OPIS
::          Pracownik wciąż "aktywny", weblogin niezmieniony - analizowany rekord usuwamy z listy rekordów do usunięcia.
         || _TAB.del()
         || _TAB.next()
         ?}
      !};
      P.cntx_pop();
      USERS.cntx_pop()
   ?};
   ZAL_POBH.cntx_pop();
   {? _TAB.first()
   || _ret:=params_exec('Delete_args','portal_core',_sync_id,_TAB)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@)
   ?}

|| _ret:=params_exec('Delete_args','portal_core',_sync_id)
?};
_ret


\sl_AttachmentLogDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentLogDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_ZAL_POBH_ID')


::======================================================================================================================
:: Metody dostępu do portalu: sl_TenantRowRights (prawa do wierszy)
::======================================================================================================================


\sl_TenantRowRights_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='ETYPY'
   || 'PORTAL_ETYPY_RR_ID'
   |? _a='PORTALRR'
   || 'PORTAL_PORTALRR_ID'
   || ''
   ?};
_ret


\sl_TenantRowRightsModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: JSON dla zapytania sl_TenantRowRightsModify.
::       Kontekst wywołania - rekord tabeli ETYPY/PORTALRR
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_ret:=0;

{? _env.TabAcr='PORTALRR'
||
   _obj.create();
   _obj.set('RowRightsName',PORTALRR.NAME);
   _obj.set('RowRightsDesc',PORTALRR.DESC);
   _obj.set('__id_erp',PORTALRR.uidref());
   _ret:=_obj.save()
||
   {? +|ETYPY.W_PORTAL & ('TPsD'*ETYPY.W_PORTAL |  ETYPY.W_PORTAL='N' & ETYPY.IN_POR) & ETYPY.AKTYWNY='T'
   || _obj.create();
      _obj.set('RowRightsName',ETYPY.ID_WP);
      _obj.set('RowRightsDesc',ETYPY.NAZWA);
      _obj.set('__id_erp',ETYPY.uidref());
      _ret:=_obj.save()
   ?}
?};
_ret


\sl_TenantRowRightsModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Dodanie/modyfikacja praw do wierszy - parametr zapytania sl_TenantRowRightsModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantRowRights_cfg','portal_method',_env.TabAcr);
_formula_json:="params_exec('sl_TenantRowRightsModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\sl_TenantRowRightsModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantRowRightsModify.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantRowRights_cfg','portal_method',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\sl_TenantRowRightsDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parametr zapytania sl_TenantRowRightsDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('sl_TenantRowRights_cfg','portal_method',_env.TabAcr);

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _ok:=0
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_cfg.id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\sl_TenantRowRightsDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parsowanie odpowiedzi dla  sl_TenantRowRightsDelete.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantRowRights_cfg','portal_method',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


\sl_TenantRowRightsGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Pobranie praw do wierszy dla użytkownika - parametr zapytania sl_TenantRowRightsGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantRowRightsGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALRR na podstawie wyniku zapytania sl_TenantRowRightsGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:='';

:: Teoretycznie put-a na portalu być nie powinno
{? _b='put'
|| _result:=''

|? _b='add'
|| _name:=_obj.getValue('RowRightsName');
   _desc:=_obj.getValue('RowRightsDesc');
:: Uwzględniane tylko zapisy dotyczące uprawnień do encji buforowych
   {? 8+_name='ExtData#'
   || PORTALRR.cntx_psh();
      PORTALRR.index('NAME');
      PORTALRR.prefix(_name,);
      {? ~PORTALRR.first()
      || PORTALRR.NAME:=_name;
         PORTALRR.DESC:=_desc;
         {? PORTALRR.add()
         || _result:=PORTALRR.uidref()
         ?}
      ?};
      PORTALRR.cntx_pop()
   || KOMM.add('Uprawnienie: %1 - nie jest importowane.'@[_name])
   ?}

|? _b='del'
|| {? PORTALRR.del(,1)
   || return('')
   || return(~~)
   ?}
?};

_result


\sl_TenantRowRightsGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantRowRightsGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORTALRR
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PORTALRR_ID',"exec('sl_TenantRowRightsGet_update','portal_method',_a,_b)")


::======================================================================================================================
:: Metody dostępu do portalu: sl_TenantUserRowRights (prawa do wierszy dla użytkownika)
::======================================================================================================================


\sl_TenantUserRowR_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='ETYPY_P'
   || 'PORTAL_ETYPY_P_ID'
   |? _a='PORTALRU'
   || 'PORTAL_PORTALRU_ID'
   || ''
   ?};
_ret


\sl_TenantUserRowRModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: JSON dla zapytania sl_TenantUserRowRightsModify.
::       Kontekst wywołania - rekord tabeli ETYPY_P/PORTALRU
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_ret:=0;

{? _env.TabAcr='PORTALRU'
||
   USERS.cntx_psh(); PORTALRR.cntx_psh();
   _obj.create();
   _obj.set('LoginName',PORTALRU.USERS().WEBLOGIN);
   _obj.set('RowRightsName',PORTALRU.PORTALRR().NAME);
   _obj.set('RowRightsContext',PORTALRU.CONTEXT);
   _obj.set('__id_erp',PORTALRU.uidref());
   _ret:=_obj.save();
   USERS.cntx_pop(); PORTALRR.cntx_pop()
|? ETYPY_P.FIRMA=REF.FIRMA
||
   _zap:=1;
   _email:='';
   _umowa:=-1;

   P.cntx_psh(); OSOBA.cntx_psh(); USERS.cntx_psh();
   P.prefix(); OSOBA.prefix(); USERS.prefix();
   ETYPY.cntx_psh();
   ETYPY.prefix();
   ETYPY_P.ETYPY();
   {? ETYPY_P.P
   || {? P.seek(ETYPY_P.P)
      || {? P.PORTAL<>'T'
         || KOMM.add('Współpracownik nieprezentowany na portalu.');
            _zap:=0
         || _umowa:=exec('getPid','portal_core',P.uidref());
            {? OSOBA.seek(P.OSOBA)
            || USERS.index('OSOBA');
               USERS.prefix(OSOBA.ref());
               {? USERS.first()
               || {? exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2")='T'
                  || _email:=USERS.WEBLOGIN
                  || KOMM.add('Użytkownik %1 nie ma dostępu do portalu w firmie %2'[USERS.KOD,REF.FIRMA().SYMBOL]);
                     _zap:=0
                  ?}
               ?}
            ?}
         ?}
      ?};
      {? _zap=1
      || {? _email='' | _umowa=-1
         || KOMM.add('Dla pracownika %1 %2: Numer teczki - %3, Identyfikator - %4 nie znaleziono adresu email'
               [P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE,P.T,$P.IP]);
            _zap:=0
         || {? ETYPY.NAZWA=exec('_premia','portal_walidacja').name
               &
               ~exec('is_pm_dysp','pm_wspolne',ETYPY_P.P().ref())
            ||
               _txt:='Pracownik %1 %2: Numer teczki - %3, Identyfikator - %4'@
                  [P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE,P.T,$P.IP];
               _txt+=' ';
               _txt+='nie jest dysponentem premii - nie otrzyma praw do wniosku premiowego na portalu.'@;
               KOMM.add(_txt);
               _zap:=0
            ?}
         ?}
      ?}
   |? ETYPY_P.USERS
   || _email:=ETYPY_P.USERS().WEBLOGIN;
      {? exec('FindInSet','#table','USERSF','UNIK',USERS.ref(),REF.FIRMA,"USERSF.PORTAL2")<>'T'
      || KOMM.add('Użytkownik %1 nie ma dostępu do portalu w firmie %2'[USERS.KOD,REF.FIRMA().SYMBOL]);
         _zap:=0
      |? _email=''
      || KOMM.add('Dla użytkownika %1 nie znaleziono adresu email'[USERS.KOD]);
         _zap:=0
      ?}
   || _zap:=0
   ?};
   {? _zap=1 & (ETYPY.AKTYWNY<>'T' | 'TPsDN'*ETYPY.W_PORTAL=0 | ETYPY.W_PORTAL='N' & ETYPY.IN_POR=0 | ETYPY.WID_WP<>'T')
   || KOMM.add('Wniosek %1 nie jest używany na wspólnym portalu. Uprawnienie nie zostało wysłane'[ETYPY.NAZWA]);
      _zap:=0
   ?};
   {? _zap=1
   || _obj.create();
      _obj.set('LoginName',_email);
      _obj.set('RowRightsName',ETYPY.ID_WP);
      _obj.set('RowRightsContext',{? _umowa=-1 || '' || $_umowa ?});
      _obj.set('__id_erp',ETYPY_P.uidref());
      _ret:=_obj.save()
   ?};
   ETYPY.cntx_pop();
   P.cntx_pop(); OSOBA.cntx_pop(); USERS.cntx_pop()
|| _ret:=1
?};

_ret


\sl_TenantUserRowRModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Dodanie/modyfikacja praw do wierszy dla użytkownika - parametr zapytania sl_TenantUserRowRightsModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantUserRowR_cfg','portal_method',_env.TabAcr);
_formula_json:="params_exec('sl_TenantUserRowRModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\sl_TenantUserRowRModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserRowRightsModify.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantUserRowR_cfg','portal_method',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\sl_TenantUserRowRDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parametr zapytania sl_TenantUserRowRightsDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('sl_TenantUserRowR_cfg','portal_method',_env.TabAcr);

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _ok:=0
|| _ok:=1
?};

{? _ok
|| params_exec('Delete_args','portal_core',_cfg.id)
|| KOMM.add('Wiersz nie wymagał usunięcia.'@);
   ~~
?}


\sl_TenantUserRowRDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [20.42]
:: OPIS: Parsowanie odpowiedzi dla  sl_TenantUserRowRightsDelete.
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_TenantUserRowR_cfg','portal_method',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


\sl_TenantUserRowRGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Pobranie praw do wierszy dla użytkownika - parametr zapytania sl_TenantUserRowRightsGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_TenantUserRowRGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALRU na podstawie wyniku zapytania sl_TenantUserRowRightsGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:='';

:: Teoretycznie put-a na portalu być nie powinno
{? _b='put'
|| _result:=''

|? _b='add'
|| _name:=_obj.getValue('RowRightsName');
   _login:=_obj.getValue('LoginName');
   _context:=_obj.getValue('RowRightsContext');
:: Uwzględniane tylko zapisy dotyczące uprawnień do encji buforowych
   {? 8+_name='ExtData#'
   || PORTALRU.cntx_psh();
      PORTALRU.index('LOGIN');
      PORTALRU.prefix(_login,_name,_context,);
      {? ~PORTALRU.first()
      || PORTALRU.USERS:=exec('FindInSet','#table','USERS','WEBLOGIN',_login);
         PORTALRU.PORTALRR:=exec('FindInSet','#table','PORTALRR','NAME',_name);
         PORTALRU.CONTEXT:=_context;
         {? PORTALRU.add()
         || _result:=PORTALRU.uidref()
         ?}
      ?};
      PORTALRU.cntx_pop()
   || KOMM.add('Uprawnienie: %1 - nie jest importowane.'@[_name])
   ?}

|? _b='del'
|| {? PORTALRU.del(,1)
   || return('')
   || return(~~)
   ?}
?};

_result


\sl_TenantUserRowRGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserRowRightsGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORTALRU
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PORTALRU_ID',"exec('sl_TenantUserRowRGet_update','portal_method',_a,_b)")


::======================================================================================================================
:: Metody konfiguracyjne - csl_TenantCompany (firmy dzierżawcy)
::======================================================================================================================


\csl_TenantCompanyModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania csl_TenantCompanyModify.
::       Kontekst wywołania: rekord tabeli FIRMA
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / '' (nie używany w tej formule)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Aktywne firmy
{? FIRMA.A='T'
|| _obj.create();

   _obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
   _obj.set('__ModifiedDate_erp',FIRMA.idput_value());
   _obj.set('__id_erp',FIRMA.uidref());
::----------------------------------------------------------
   _obj.set('Description','%1 — %2'[FIRMA.SYMBOL,FIRMA.OPIS]);
   _obj.set('TenantCompanyLogo',exec('get_logo','img_blob'));

   _obj.save()
?}


\csl_TenantCompanyModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja firm portalu - parametr zapytania csl_TenantCompanyModify.
::       Funkcja jest używana w trybie 'Uruchomienie' w kontekście rekordu FIRMA,
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('csl_TenantCompanyModify_json','portal_method',_a,_b,_c)";
params_exec('Modify_args','portal_core','PORTAL_FIRMA_ID',_formula_json)


\csl_TenantCompanyModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla csl_TenantCompanyModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_FIRMA_ID')


\csl_TenantCompanyDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania sl_TenantCompanyDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_uidref:=_env.Param;
_id:='PORTAL_FIRMA_ID';

_tab:=exec('get_id','#sync_id',_id,_uidref);
params_exec('Delete_args','portal_core',_id,_tab)


\csl_TenantCompanyDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantCompanyDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_FIRMA_ID')


::======================================================================================================================
:: Metody konfiguracyjne - csl_TenantUserCompany (użytkownicy firmy dzierżawcy)
::======================================================================================================================


\csl_TenantUserCompModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania csl_TenantUserCompanyModify.
::       Kontekst wywołania: rekord tabeli USERSF
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Aktywna firma oraz aktywni użytkownicy webowi, którzy mają wpisany login webowy będący poprawnym adresem e-mail
{? USERSF.FIRMA().A='T' & USERSF.USERS().AKT='T' &
   USERS.PORTAL='T' & USERSF.PORTAL2='T' &
   USERS.WEBLOGIN<>'' & exec('mail_ok','#email',USERS.WEBLOGIN)
||
:: W przypadku gdy 'Uruchamianie' to rekord jest zawsze wysyłany (założenie nowego dostępu)
:: W przypadku gdy 'Wysyłanie' to musi być zapamiętany identyfikator z portalu
   _run:=0;
   {? _env.Context='run'
   || _run:=1
   || _ids:=exec('get_id','#sync_id','PORTAL_USERSF_ID',USERSF.uidref());
      {? type_of(_ids)>100 & _ids.first() || _run:=1 ?}
   ?};
   {? _run
   ||
      _obj.create();

      _obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
      _obj.set('__ModifiedDate_erp',USERSF.idput_value());
      _obj.set('__id_erp',USERSF.uidref());
::----------------------------------------------------------
      _obj.set('Imie',{? USERS.OSOBA || USERS.OSOBA().PIERWSZE || USERS.KOD ?});
      _obj.set('Nazwisko',{? USERS.OSOBA || USERS.OSOBA().NAZWISKO || USERS.DANE ?});
      _obj.set('Mail',USERS.WEBLOGIN);
::      _obj.set('DomainUserName',{? USERS.OF365='T' & USERS.CAS='T' || USERS.CASUID ?});
      _obj.set('DomainRemoteProvider',USERS.OF365='T');
      _obj.set('MultiFactorAuthentication',USERS.LOG2='T');
      _obj.set('TenantCompanyId__id_ERP',FIRMA.uidref());
      _obj.set('TenantUserId__id_ERP',USERS.WEBLOGIN);

      _obj.save()
   ?}
?}


\csl_TenantUserCompModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja użytkowników firm portalu - parametr zapytania csl_TenantUserCompanyModify.
::       Funkcja jest używana w trybie 'Uruchomienie' w kontekście rekordu FIRMA,
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('csl_TenantUserCompModify_json','portal_method',_a,_b,_c)";
params_exec('Modify_args','portal_core','PORTAL_USERSF_ID',_formula_json)


\csl_TenantUserCompModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla csl_TenantUserCompanyModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_USERSF_ID')


\csl_TenantUserCompDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania sl_TenantUserCompanyDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_USERSF_ID')


\csl_TenantUserCompDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla sl_TenantUserCompanyDelete.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_USERSF_ID')


::======================================================================================================================
:: Metody konfiguracyjne - rgt_OprGrupyTenant (Licencje)
::======================================================================================================================


\rgt_OprGrupyTenantModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: JSON dla zapytania rgt_OprGrupyTenantModify.
::       Kontekst wywołania - rekord tabeli PORTALL
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_obj.create();

_obj.set('__id_cloud',{? _id=0 || ~~ || _id ?});
_obj.set('__ModifiedDate_erp',PORTALL.idput_value());
_obj.set('__id_erp',PORTALL.uidref());
::----------------------------------------------------------
_obj.set('Grupa',PORTALL.LICENSE);
_obj.set('License',PORTALL.BOUGHT);
_obj.set('ExpirationDate',PORTALL.EXPIRES);

_obj.save()


\rgt_OprGrupyTenantModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodanie/modyfikacja licencji - parametr zapytania rgt_OprGrupyTenantModify.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALL%1_ID'[_typ];
_formula_json:="params_exec('rgt_OprGrupyTenantModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_id,_formula_json)


\rgt_OprGrupyTenantModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla rgt_OprGrupyTenantModify.
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALL%1_ID'[_typ];
params_exec('Modify_parse','portal_core',_id)


\rgt_OprGrupyTenantGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie licencji - parametr zapytania rgt_OprGrupyTenantGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\rgt_OprGrupyTenant_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALL na podstawie wyniku zapytania rgt_OprGrupyTenantGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:='';

_license_used:=_obj.getValue('LicenseUsed');
{? type_of(_license_used)=0 || _license_used:=0 ?};
::_group_license_used:=_obj.getValue('GroupLicenseUsed');
::{? type_of(_group_license_used)=0 || _group_license_used:=0 ?};

:: dodanie zapisu w tabeli PORTALL
{? _act='add'
||
   _firma:={? XINFO.POR_CONF='J' || REF.FIRMA || null() ?};

   PORTALL.cntx_psh();
   PORTALL.index('LICENSE');
   PORTALL.prefix(_firma,_obj.getValue('Grupa'),);
   PORTALL.FIRMA:=_firma;
   PORTALL.LICENSE:=_obj.getValue('Grupa');
   PORTALL.INSTALED:=_obj.getValue('License');
   PORTALL.USED:=_license_used;
::   PORTALL.USEDG:=_group_license_used;
   PORTALL.EXPIRES:=exec('str2date','#convert',10+_obj.getValue('ExpirationDate'));
   {? PORTALL.add() || _result:=PORTALL.uidref() || _result:=~~ ?};
   PORTALL.cntx_pop()

:: aktualizacja zapisu w tabeli PORTALL
|? _act='put'
|| PORTALL.INSTALED:=_obj.getValue('License');
   PORTALL.USED:=_license_used;
::   PORTALL.USEDG:=_group_license_used;
   PORTALL.EXPIRES:=exec('str2date','#convert',10+_obj.getValue('ExpirationDate'));
   {? PORTALL.put() || _result:='' || _result:=~~ ?}

:: wyzerowanie zapisu z tabeli PORTALL
|? _act='del'
|| PORTALL.INSTALED:=0;
   PORTALL.USED:=0;
   PORTALL.USEDG:=0;
   PORTALL.EXPIRES:=date(0,0,0);
   {? PORTALL.put() || _result:='' || _result:=~~ ?}
?};

:: bezwarunkowe podsumowanie do zapisu nadrzędnego dla danej licenji
exec('portall_sum','portal_engine',_obj.getValue('Grupa'));

_result


\rgt_OprGrupyTenantGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla rgt_OprGrupyTenantGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORTALL
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALL%1_ID'[_typ];
params_exec('Get_parse','portal_core',_id,"exec('rgt_OprGrupyTenant_update','portal_method',_a,_b)")


\rgt_OprGrupyTenantDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametr zapytania rgt_OprGrupyTenantDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALL%1_ID'[_typ];
params_exec('Delete_args','portal_core',_id)


\rgt_OprGrupyTenantDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla rgt_OprGrupyTenantDelete.
::----------------------------------------------------------------------------------------------------------------------
_typ:=XINFO.POR_CONF;
_id:='PORTAL_PORTALL%1_ID'[_typ];
params_exec('Delete_parse','portal_core',_id)


::======================================================================================================================
:: Metody konfiguracyjne - rgt_OprGrupyCommunicateGet (Komunikaty dla licencji)
::======================================================================================================================


\rgt_OprGrupyCommGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie komunikatów dla licencji - parametr zapytania rgt_OprGrupyCommunicateGet.
::   WY: tablica z elementem JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\rgt_OprGrupyCommGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALO na podstawie wyniku zapytania rgt_OprGrupyCommunicateGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del' | _act='put'
:: Teoretycznie na portalu nie ma usuwania i poprawiania zapisów w tej encji
|| return()
?};

_result:='';

{? _act='add'
|| {? _obj.getValue('Grupa')=exec('license_employee','portal_engine') |
      _obj.getValue('Grupa')=exec('license_manager','portal_engine')
   || PORTALO.cntx_psh();
      PORTALO.index('LIC_COMM');
      PORTALO.prefix(_obj.getValue('Grupa'),~-_obj.getValue('Communicate'),);
      {? ~PORTALO.first()
      || PORTALO.LICENSE:=_obj.getValue('Grupa');
         PORTALO.COMM:=~-_obj.getValue('Communicate');
         {? PORTALO.add() || _result:=PORTALO.uidref() ?}
      ?};
      PORTALO.cntx_pop()
   ?}
?};

_result


\rgt_OprGrupyCommGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie komunikatów dla licencji
::       - parsowanie wyniku zapytania rgt_OprGrupyCommunicateGet.
::       Przetwarza dane i aktualizuje tabelę PORTALO
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PORTALO_ID',"exec('rgt_OprGrupyCommGet_update','portal_method',_a,_b)")


::======================================================================================================================
:: Metody konfiguracyjne - rgt_OprGrupyTenantUser
::======================================================================================================================


\rgt_OprGrupyTenantUserGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie użytkowników dla licencji - parametr zapytania rgt_OprGrupyTenantUserGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\rgt_OprGrupyTenantUser_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli USERS na podstawie wyniku zapytania rgt_OprGrupyTenantUserGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:='';

:: modyfikacja zapisu w tabeli USERS - ustawienie wartości
{? _act='add' | _act='put'
|| _license:=_obj.getValue('Grupa');
   USERS.cntx_psh();
   USERS.index('USR_AWEB');
   USERS.prefix('T',_obj.getValue('LoginName'),);
   {? USERS.first()
   || _put:=0;
      {? _license=exec('license_employee','portal_engine')
      || USERS.P2PRAC:=1;
         _put:=1
      |? _license=exec('license_manager','portal_engine')
      || USERS.P2KIER:=1;
         _put:=1
      |? _license=exec('license_seod','portal_engine')
      || USERS.P2SEOD:=1;
         _put:=1
      ?};
      {? _put
      || {? USERS.put() || {? _act='add' || _result:=USERS.uidref()+_license || _result:='' ?} || _result:=~~ ?}
      ?}
   ?};
   USERS.cntx_pop()

:: modyfikacja zapisu w tabeli USERS - wyzerowanie wartości
|? _act='del'
|| _license:=_obj.getValue('Grupa');
   _put:=0;
   {? _license=exec('license_employee','portal_engine')
   || USERS.P2PRAC:=0;
      _put:=1
   |? _license=exec('license_manager','portal_engine')
   || USERS.P2KIER:=0;
      _put:=1
   |? _license=exec('license_seod','portal_engine')
   || USERS.P2SEOD:=0;
      _put:=1
   ?};
   {? _put
   || {? USERS.put() || _result:='' || _result:=~~ ?}
   ?}
?};

_result


\rgt_OprGrupyTenantUserGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie odpowiedzi dla rgt_OprGrupyTenantUserGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli USERS
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core',
   'PORTAL_USERS_LIC_ID',"exec('rgt_OprGrupyTenantUser_update','portal_method',_a,_b)"
)


::======================================================================================================================
:: Metody konfiguracyjne - sl_TenantGenericDashItems (Kastomizacja dashbordów - [na razie tylko dla chr_PersonRequest]).
::======================================================================================================================


\sl_TenantGenDashIModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Wysłanie elementów kastomizacji dashboardów na portal (na razie tylko dla chr_PersonRequest).
::       - parametr zapytania sl_TenantGenericDashItemsModify.
::   WY: argument w postaci JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: UWAGA: Specyficzna obsługa dla tego serwisu

:: Parametr wejściowy - tabela o umówionej strukturze
_tab:=_env.Param;

_jman:=exec('json_man','__jsonm','{}');
_jman.setObject(_path:=_jman.addChildElement('','Arraysl_TenantGenericDashItemsModifyData'),'{}');
_jman.setObject(_path:=_jman.addChildElement(_path,'sl_TenantGenericDashItemsModifyData'),'[]');
{? _tab.first()
|| {!
   |? _jman.setObject(_path1:=_jman.addChildElement(_path),'{}');
      _jman.setValue(_jman.addChildElement(_path1,'DashboardName'),_tab.DASHBN);
      _jman.setValue(_jman.addChildElement(_path1,'IsStd'),_tab.ISSTD);
      _jman.setValue(_jman.addChildElement(_path1,'SpaceType'),_tab.SPACT);
      _jman.setValue(_jman.addChildElement(_path1,'SpaceIndex'),_tab.SPACI);
      _jman.setValue(_jman.addChildElement(_path1,'Lp'),_tab.LP);
      _jman.setValue(_jman.addChildElement(_path1,'ComponentName'),_tab.COMPN);
      _jman.setValue(_jman.addChildElement(_path1,'Visible'),_tab.VISIBLE);
      _tab.next()
   !}
?};

_args:=fopen(null(),'Uw',,1,1);
_result:=_jman.getJSON(_args);

{? _result || _args || ~~ ?}


\sl_TenantGenDashIModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Parsowanie sl_TenantGenericDashItemsModify.
::----------------------------------------------------------------------------------------------------------------------
~~


\sl_AttachmentsKindModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Dodanie/modyfikacja informacji o typach załaczników - parametr zapytania sl_AttachmentsKindModify.
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_AttachmentsKindModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_SLO_NAZ_ZAL_ID',_formula_json)


\sl_AttachmentsKindModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: JSON dla zapytania sl_AttachmentsKindModify.
::       Kontekst wywołania - rekord tabeli SLO_NAZ.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
SLO_TYP.cntx_psh();
_dalej:=SLO_NAZ.SLO_TYP().SYMBOL='ZAL';
SLO_TYP.cntx_pop();
{? ~_dalej
|| return(0)
?};
{? +SLO_NAZ.NAZWA>100
|| _cut:=100+SLO_NAZ.NAZWA;
   SLO_NAZ.cntx_psh();
   SLO_NAZ.index('NAZWA');
   SLO_NAZ.prefix(SLO_NAZ.SLO_TYP,_cut,);
   _wiele:=SLO_NAZ.first() & SLO_NAZ.next();
   SLO_NAZ.cntx_pop();
   {? _wiele
   || KOMM.add('Typ załącznika ma za długą nazwę (max. 100 znaków) i istnieją inne podobne.'@);
      return(0)
   ?}
?};

_id:=_a;

ETYPYATT.cntx_psh();
ETYPYATT.index('S1'); ETYPYATT.prefix(SLO_NAZ.ref());
_used:=ETYPYATT.first();
ETYPYATT.cntx_pop();

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('AttachmentKind',100+SLO_NAZ.NAZWA);
_obj.set('DeclarationHandWritten',SLO_NAZ.memo_txt(,1,'MEMO_R'));
_obj.set('Declaration',SLO_NAZ.memo_txt(,1,'MEMO_Z'));
::"FileNamePattern": <string | null>,
::"Declaration": <string | null>,
_obj.set('VerifySignOnSave',_used);
_obj.set('__ModifiedDate_erp',SLO_NAZ.idput_value());
_obj.set('__id_erp',SLO_NAZ.uidref());
::"__ModifiedDate_cloud": <dateTime | null>,

_ret:=_obj.save();
_ret


\sl_AttachmentsKindModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentsKindModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_SLO_NAZ_ZAL_ID')


\sl_AttachmentsKindGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.42]
:: OPIS: Parametr zapytania sl_AttachmentsKindGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_AttachmentsKindGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentsKindGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli SLO_NAZ
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_SLO_NAZ_ZAL_ID',
   "exec('sl_AttachmentsKindGet_update','portal_method',_a,_b)"
)


\sl_AttachmentsKindGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Formuła aktualizująca dane w tabeli SLO_NAZ na podstawie wyniku zapytania sl_AttachmentsKindGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:=~~;

{? _act='add'
|| _typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','ZAL',,,1);
   {? _typ=null
   || KOMM.add('Nie znaleziono typu słownika: ZAL dla typów załaczników.')
   || _nazwa:=_obj.getValue('AttachmentKind');
      SLO_NAZ.cntx_psh();
      SLO_NAZ.index('NAZWA'); SLO_NAZ.prefix(_typ);
      {? SLO_NAZ.find_key(_nazwa,)
      || KOMM.add('Istnieje typ załącznika o nazwię: %1. Dodanie niemożliwe.'@[SLO_NAZ.NAZWA])
      || SLO_NAZ.blank();
         SLO_NAZ.SLO_TYP:=_typ;
         SLO_NAZ.NAZWA:=_nazwa;
         SLO_NAZ.prefix();
         _result:={? SLO_NAZ.add() || SLO_NAZ.uidref() || ~~ ?}
      ?};
      SLO_NAZ.cntx_pop()
   ?}
|? _act='put'
|| _result:=''
|? _act='del'
|| _result:={? SLO_NAZ.del(,1) || '' || ~~ ?}
?};

_result


\sl_AttachmentsKindDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parametr zapytania sl_AttachmentsKindDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_uidref:=_env.Param;
_id:='PORTAL_SLO_NAZ_ZAL_ID';
_tab:=exec('get_id','#sync_id',_id,_uidref);
params_exec('Delete_args','portal_core',_id,_tab)


\sl_AttachmentsKindDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_AttachmentsKindDelete
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_SLO_NAZ_ZAL_ID')


\sl_OperCertModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parametr komunikatu sl_OperatorCertificatesModify.
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_OperCertModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_USR_SIGN_ID',_formula_json)


\sl_OperCertModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: JSON dla zapytania sl_OperatorCertificatesModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
_portal:=USR_SIGN.USERS().PORTAL2='T';
USERS.cntx_pop();
{? ~_portal || return(0) ?};

_id:=_a;
params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_obj.create();
_obj.set('__id_cloud',{? _id || _id || ~~ ?});
USERS.cntx_psh();
_obj.set('Login',USR_SIGN.USERS().WEBLOGIN);
USERS.cntx_pop();
_obj.set('FingerPrint',USR_SIGN.FINGER);
_obj.set('Signer',USR_SIGN.NAME);
_obj.set('CertValidFrom',USR_SIGN.DATE_B,USR_SIGN.TIME_B);
_obj.set('CertValidTo',USR_SIGN.DATE_E,USR_SIGN.TIME_E);
_obj.set('__ModifiedDate_erp',USR_SIGN.idput_value());
_obj.set('__id_erp',USR_SIGN.uidref());
_ret:=_obj.save();
_ret


\sl_OperCertModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_OperatorCertificatesModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_USR_SIGN_ID')


\sl_OperCertGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parametr zapytania sl_OperatorCertificatesGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\sl_OperCertGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_OperatorCertificatesGet.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_USR_SIGN_ID',
   "exec('sl_OperCertGet_update','portal_method',_a,_b)"
)


\sl_OperCertGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Formuła aktualizująca dane w tabeli USR_SIGN na podstawie wyniku zapytania sl_OperatorCertificatesGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_result:=~~;
{? _act<>'del'
|| _login:=_obj.getValue('Login');
   USERS.cntx_psh();
   USERS.index('USR_AWEB'); USERS.prefix('T',_login,);
   USERSF.cntx_psh();
   _user:={? USERS.first()
          || exec('get_usersf','users');
             {? USERSF.PORTAL2='T'
             || USERS.ref()
             || null
             ?}
          || null
          ?};
   USERSF.cntx_pop();
   USERS.cntx_pop();
   {? ~_user
   || KOMM.add('Nie znaleziono użytkownika portalu: %1.'@[_login]);
      return(~~)
   ?};
   _finger:=_obj.getValue('FingerPrint');
   USR_SIGN.cntx_psh();
   USR_SIGN.index('FINGER'); USR_SIGN.prefix(_user,_finger,);
   _jest:={? USR_SIGN.first() || USR_SIGN.ref() || null ?};
   USR_SIGN.cntx_pop()
?};

{? _act='add'
|| {? _jest
   || KOMM.add('Istnieje już certyfikat: %1 dla użytkownika: %2.'@[_finger,_login]);
      return(~~)
   || USR_SIGN.cntx_psh();
      USR_SIGN.prefix();
      USR_SIGN.blank(1);
      USR_SIGN.USERS:=_user;
      USR_SIGN.FINGER:=_finger;
      USR_SIGN.NAME:=_obj.getValue('Signer');
      _dt:=_obj.getValue('CertValidFrom');
      {? var_pres('_dt')>0 & type_of(_dt)=type_of('')
      || USR_SIGN.DATE_B:=exec('str2date','#convert',10+_dt);
         USR_SIGN.TIME_B:=exec('str2time','#convert',8+(11-_dt))
      ?};
      _dt:=_obj.getValue('CertValidTo');
      {? var_pres('_dt')>0 & type_of(_dt)=type_of('')
      || USR_SIGN.DATE_E:=exec('str2date','#convert',10+_dt);
         USR_SIGN.TIME_E:=exec('str2time','#convert',8+(11-_dt))
      ?};
      {? USR_SIGN.add()
      || _result:=USR_SIGN.uidref()
      ?};
      USR_SIGN.cntx_pop()
   ?}
|? _act='put'
|| {? _jest<>USR_SIGN.ref()
   || KOMM.add('Istnieje już certyfikat: %1 dla użytkownika: %2.'@[_finger,_login]);
      return(~~)
   || USR_SIGN.cntx_psh();
      USR_SIGN.prefix();
      USR_SIGN.NAME:=_obj.getValue('Signer');
      _dt:=_obj.getValue('CertValidFrom');
      {? var_pres('_dt')>0 & type_of(_dt)=type_of('')
      || USR_SIGN.DATE_B:=exec('str2date','#convert',10+_dt);
         USR_SIGN.TIME_B:=exec('str2time','#convert',8+(11-_dt))
      ?};
      _dt:=_obj.getValue('CertValidTo');
      {? var_pres('_dt')>0 & type_of(_dt)=type_of('')
      || USR_SIGN.DATE_E:=exec('str2date','#convert',10+_dt);
         USR_SIGN.TIME_E:=exec('str2time','#convert',8+(11-_dt))
      ?};
      USR_SIGN.put();
      USR_SIGN.cntx_pop()
   ?};
   _result:=''
|? _act='del'
|| _result:={? USR_SIGN.del(,1) || '' || ~~ ?}
?};

_result


\sl_OperCertDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parametr zapytania sl_OperatorCertificatesDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_uidref:=_env.Param;
_id:='PORTAL_USR_SIGN_ID';
_tab:=exec('get_id','#sync_id',_id,_uidref);
params_exec('Delete_args','portal_core',_id,_tab)


\sl_OperCertDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Parsowanie odpowiedzi dla sl_OperatorCertificatesDelete
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_USR_SIGN_ID')


\sl_TExfAvailCValModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Parametr komunikatu sl_TExfAvailCValModify.
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('sl_TExfAvailCValModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_PORTALAH_ID',_formula_json)


\sl_TExfAvailCValModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: JSON dla zapytania sl_TExfAvailCValModify.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;
_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});

_obj.set('SetName',PORTALAH.NAME);
_obj.set('EntityName',PORTALAH.ENTITY);
_obj.set('FieldName',PORTALAH.FIELD);
_obj.set('__JSON',exec('PORTALAH_json','portal_seod'));

_obj.set('__ModifiedDate_erp',PORTALAH.idput_value());
_obj.set('__id_erp',PORTALAH.uidref());

_ret:=_obj.save();
_ret


\sl_TExfAvailCValModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Parsowanie odpowiedzi dla sl_TExfAvailCValModify.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_PORTALAH_ID')


\sl_TExfAvailCValDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Parametr zapytania sl_TExfAvailCValDelete.
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_uidref:=_env.Param;
_id:='PORTAL_PORTALAH_ID';
_tab:=exec('get_id','#sync_id',_id,_uidref);
params_exec('Delete_args','portal_core',_id,_tab)


\sl_TExfAvailCValDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Parsowanie odpowiedzi dla sl_TExfAvailCValDelete
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_PORTALAH_ID')


::======================================================================================================================
:: Metody dostępu do portalu - sl_SloImageModify (tabela zdjęć różnych).
::======================================================================================================================


\sl_SloImage_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Formuła zwraca parametry konfiguracyjne metod w zależności od przetwarzanej tabeli.
::   WE: _a - Akronim tabeli, z której pochodzi rekord.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('TAB','id');
_ret.TAB:=($_a)();
_ret.id:=
   {? _a='P'
   || 'PORTAL_P_ZDJECIE_ID'
   || ''
   ?};
_ret


\sl_SloImageModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: JSON dla zapytania sl_SloImageModify.
::       Kontekst wywołania - rekord tabeli P.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;

{? _env.TabAcr='P'
:: Zdjęcie pracownika
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   {? P.PORTAL='T' & P.OSOBA().ZDJECIE<>null()
   || _hash:=exec('hash','#blob',OSOBA.ZDJECIE);
::    Jeżeli zdjęcie zostało zmienione, to najpierw powinno być usunięte - patrz: sl_SloImageDelete.
      _obj.create();

      _obj.set('__id_cloud',{? _id || _id || ~~ ?});
      _obj.set('ImageDescr','%1 %2 [Identyf.:%3]'[OSOBA.NAZWISKO,OSOBA.PIERWSZE,$P.IP]);
      _obj.set('SloImage',OSOBA.ZDJECIE);
      _obj.set('ImageType','OBRAZEK');
      _obj.set('Nr',1);
      _obj.set('ImageFileName',OSOBA.bl_info('ZDJECIE','NAME'));
      _obj.set('__ModifiedDate_erp',P.idput_value());
      _obj.set('__id_erp',P.uidref()+_hash);
      _obj.set('PersonId__id_Erp',P.uidref());

      _ret:=_obj.save()
   ?};
   OSOBA.cntx_pop()
?};

_ret


\sl_SloImageModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Dodanie/modyfikacja zdjęcia - parametr zapytania sl_SloImageModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_SloImage_cfg','portal_method',_env.TabAcr);
_formula_json:="params_exec('sl_SloImageModify_json','portal_method',_a,_b)";
params_exec('Modify_args','portal_core',_cfg.id,_formula_json)


\sl_SloImageModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parsowanie odpowiedzi dla sl_SloImageModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_SloImage_cfg','portal_method',_env.TabAcr);
params_exec('Modify_parse','portal_core',_cfg.id)


\sl_SloImageDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parametr zapytania sl_SloImageDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_env:=_par.env;
_cfg:=exec('sl_SloImage_cfg','portal_method',_env.TabAcr);

{? _env.TabAcr='P' & _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;

   _DEL:=exec('get_id','#sync_id',_cfg.id,_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi (powinien być tylko jeden) rekordami na portalu (związanymi ze zmienionym
:: rekordem tabeli P/OSOBA). W efekcie końcowym, będzie to tabela z rekordami do usunięcia.
   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   P.cntx_psh();
   P.prefix();
   {? P.seek(_uidref)
   || OSOBA.cntx_psh();
      OSOBA.prefix();
      P.OSOBA();
::    Kasujemy, jeżeli zdjęcie zmieniło się.
      _del:=_DEL.OPIS<>exec('hash','#blob',OSOBA.ZDJECIE);
      OSOBA.cntx_pop()
   ?};
   P.cntx_pop();

   {? _del
   || params_exec('Delete_args','portal_core',_cfg.id,_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core',_cfg.id)
?}


\sl_SloImageDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Parsowanie odpowiedzi dla sl_SloImageDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_cfg:=exec('sl_SloImage_cfg','portal_method',_env.TabAcr);
params_exec('Delete_parse','portal_core',_cfg.id)


::======================================================================================================================
:: Metody dostępu do portalu - csl_PCRightsDefinition (definicje uprawnień do funkcjonalności).
::======================================================================================================================


\csl_PCRightsDefGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Pobranie definicji uprawnień do funkcjonalności - parametr zapytania csl_PCRightsDefinitionGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\csl_PCRightsDefGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Formuła aktualizująca dane w tabeli PORTALU na podstawie wyniku zapytania csl_PCRightsDefinitionGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
:: Teoretycznie na portalu nie ma usuwania ...
|| return()
?};

_result:=~~;

{? _act='add'
|| PORTALU.cntx_psh();
   PORTALU.index('OPR');
   PORTALU.prefix('W',_obj.getValue('RightsName'),);
   {? PORTALU.first()
   || PORTALU.OPR_DESC:=_obj.getValue('RightsNameDesc');
      PORTALU.PTH_NAME:=_obj.getValue('RightsPath');
      PORTALU.PTH_DESC:=_obj.getValue('RightsPathDesc');
      {? PORTALU.put() || _result:=PORTALU.uidref() ?}
   || PORTALU.blank();
      PORTALU.LOGIN:='';
      PORTALU.ENABLED:='T';
      PORTALU.ID_ERP:='';
      PORTALU.TYPE:='W';
      PORTALU.OPR_NAME:=_obj.getValue('RightsName');
      PORTALU.OPR_DESC:=_obj.getValue('RightsNameDesc');
      PORTALU.PTH_NAME:=_obj.getValue('RightsPath');
      PORTALU.PTH_DESC:=_obj.getValue('RightsPathDesc');
      {? PORTALU.add() || _result:=PORTALU.uidref() ?}
   ?};
   PORTALU.cntx_pop()
|? _act='put'
|| PORTALU.OPR_DESC:=_obj.getValue('RightsNameDesc');
   PORTALU.PTH_NAME:=_obj.getValue('RightsPath');
   PORTALU.PTH_DESC:=_obj.getValue('RightsPathDesc');
   {? PORTALU.put() || _result:='' ?}
?};

_result


\csl_PCRightsDefGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Parsowanie odpowiedzi dla csl_PCRightsDefinitionGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli PORTALU
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_PORTALUWZ_ID',"exec('csl_PCRightsDefGet_update','portal_method',_a,_b)")

:Sign Version 2.0 jowisz:1045 2024/02/26 10:22:29 99e0cc8a54a8a3be335abc41e5caa72a129c76c4de9e958da9fcc260d956a15afec67198929dd9c0452ac230587d1b78df5d0adb556453fe130a56aef6ad0e47c1731b0364e01aead539ec397c65aec1fc4a765b833712017da1263d127b5a126ee1a9906599b96162788fd555132a17baf60e3e3d881dd1ffca68ee1e2f356a
