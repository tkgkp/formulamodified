:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_kreatory.fml
:: Utworzony: 13.06.2017
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły dla obsługi kreatorów w dziedzinach POC, PSZ, PRE, PBA.
::======================================================================================================================


\utworz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy kreator o podanym kodzie już występuje w słowniku, jeśli nie, to tworzy odpowiedni zapis.
::   WE: _a - kod kreatora
::       _b - nazwa kreatora
::       _c - formuła do wykonania
::       _d - opis kreatora
::       ...
::   WY: wskazanie na rekord w tabeli ZZ_ASYS
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \data/zz_asst.fml
::  OLD: \create/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_c:=
   {? var_pres('_c')=type_of("") || $_c
   |? var_pres('_c')=type_of('') || _c
   || ''
   ?};
_text:='';
{? _>3
|| {! _arg:=4.._
   |! _text+=_[_arg]
   !}
?};
{? exec('szukaj','phr_kreatory',_a)
|| {? ZZ_ASYS.NAZWA<>_b | ZZ_ASYS.FORMULA<>_c
   || ZZ_ASYS.NAZWA:=_b;
      ZZ_ASYS.FORMULA:=_c;
      ZZ_ASYS.put()
   ?};
   {? _text<>ZZ_ASYS.memo_txt(,1,'OPIS')
   || ZZ_ASYS.memo_set(_text,'OPIS');
      ZZ_ASYS.memo_put(,'OPIS')
   ?}
|| ZZ_ASYS.KOD:=_a;
   ZZ_ASYS.NAZWA:=_b;
   ZZ_ASYS.FORMULA:=_c;
   {? ZZ_ASYS.add()
   || ZZ_ASYS.memo_set(_text,'OPIS');
      ZZ_ASYS.memo_put(,'OPIS')
   ?}
?}


\polacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Tworzy strukturę widoku kreatorów.
::   WE: _a - element
::       _b - kod kreatora nadrzędnego
::       _c - kod kreatora podrzędnego
::       ...
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \link/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~(_ref:=exec('szukaj','phr_kreatory',_b))
|| return()
?};
ZZ_ASYST.index('NUM_ASYS');
ZZ_ASYST.prefix(_a);
{? ~ZZ_ASYST.find_key(_b)
|| _numer:=0;
   ZZ_ASYST.index('NUMER');
   ZZ_ASYST.prefix(_a,_a,0);
   {? ZZ_ASYST.last()
   || _numer:=ZZ_ASYST.NUMER
   ?};
   ZZ_ASYST.blank(1);
   ZZ_ASYST.ELEMENT:=_a;
   ZZ_ASYST.NUMER:=_numer+1;
   ZZ_ASYST.ZZ_ASYS:=_ref;
   ZZ_ASYST.add()
?};
_change:=0;
_ref:=ZZ_ASYST.ref();
ZZ_ASYST.index('NUMER');
ZZ_ASYST.prefix(_a,_a,_ref);
_loop:=ZZ_ASYST.first();
{! _arg:=3.._
|? _loop & ~_change
|! {? ZZ_ASYST.NUMER=_arg-2 & ZZ_ASYST.ZZ_ASYS().KOD=_[_arg]
   || _loop:=ZZ_ASYST.next()
   || _change:=1
   ?}
!};
{? _change | ZZ_ASYST.size<>_-2
|| {? ZZ_ASYST.first()
   || {! |? ZZ_ASYST.del() !}
   ?};
   {! _arg:=3.._
   |! _ast:=exec('szukaj','phr_kreatory',_[_arg]);
      ZZ_ASYST.blank(1);
      ZZ_ASYST.ELEMENT:=_a;
      ZZ_ASYST.ZZ_ASYST:=_ref;
      ZZ_ASYST.NUMER:=_arg-2;
      ZZ_ASYST.ZZ_ASYS:=_ast;
      ZZ_ASYST.add()
   !}
?}


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje kreator o podanym kodzie.
::   WE: _a - kod kreatora
::   WY: wskazanie na rekord w tabeli ZZ_ASYS
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \find/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_ASYS.index('KOD');
ZZ_ASYS.prefix();
{? ZZ_ASYS.find_key(_a,_a)
|| ZZ_ASYS.ref()
|| null
?}


\lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyświetla konsolę kreatorów. Identyfikator miejsca wywołania należy wcześniej wpisać do pola KREATORY zmiennej
::       ZZ_POM.
::   WE:
::   WY:
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \show/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('decl_objects','phr_kreatory');

_id:=ZZ_POM.KREATORY;
ZZ_ASYST.cntx_psh();
ZZ_ASYST.index('NUMER');
ZZ_ASYST.prefix(_id,_id);
{? ZZ_ASYST.first()
|| ZZ_ASYST.win_sel('WER');
   ZZ_ASYST.win_sopt('WER','select_record_checkbox=0');
   ZZ_ASYST.select()
|| echo('[%1]' [_id]);
   FUN.info('Dla wybranej pozycji nie znaleziono dodatkowych funkcji.'@);
   echo()
?};
ZZ_ASYST.cntx_pop()


\save_local
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [#12.10]
:: OPIS: Formuła sprawdza, czy plik istnieje. Jeśli tak, to pyta użytkownika, czy plik powinien byc nadpisany.
::   WE: _a [STRING] - Nazwa pliku.
::   WY: 1  - plik nie istnieje lub należy go nadpisać;
::       0  - w przeciwnym wypadku lub przy błędnym wywołaniu.
:: ~OST: INFEXISTS
::  OLD: \save_local/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| return(0)

|? fexists('@'+_a,0)
|| FUN.ask('Plik %1 już istnieje.\nCzy zastąpić istniejący plik?'@ [_a])

|| 1
?}


\save_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [#12.10]
:: OPIS: Formuła zapisująca zawartość tabeli do lokalnego pliku wskazanego przez użytkownika.
::   WE:  _a  [TABLE]  - Alias do tabeli.
::       [_b] [STRING] - Lista (oddzielona przecinkami) akronimów pól do pominięcia w eksporcie.
::       [_c] [STRING] - Wiersz do wstawienia na początku pliku.
::       [_d] [STRING] - Wiersz do wstawienia na początku pliku.
::       [_e] [STRING] - Wiersz do wstawienia na początku pliku.
::       [_f] [STRING] - Wiersz do wstawienia na początku pliku.
::       [_g] [STRING] - Wiersz do wstawienia na początku pliku.
::  OLD: \save_file/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG)
|| return()
?};
::utworzenie pliku po stronie serwera
_pth:='';
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _name:='szkolenie.csv';
   _pth:=_tmp_dir.get_path();
   _file:='';
   _sep:=exec('sep','#file',2);
   _name:=_pth+_sep+_name
|| FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@);
   return()
?};

_file:=fopen(_name,'w',0,0,1);

{? ~_file.is_open()
|| FUN.emsg('Błąd dostępu do pliku %1.'@ [_name]);
   return()
?};

_tString:=type_of('');

_skip:=
   {? var_pres('_b')=_tString
   || {? 1+_b<>','
      || _b:=','+_b
      ?};
      {? _b+1<>','
      || _b:=_b+','
      ?};
      _b
   || ''
   ?};

{? _>2
|| {! _arg:=3 .. _
   |! {? var_pres('_['+$_arg+']')=_tString
      || _file.fwrite(STR.maz2w95(form(_[_arg])))
      ?}
   !}
?};

_line:='';
{! _nfld:=1 .. _a.fld_num()
|! {? _skip*(',%1,' [_a.fld_acr(_nfld)])=0
   || _line+=_a.fld_name(_nfld)+';'
   ?}
!};
_file.fwrite(STR.maz2w95(_line));

_d0:=date(0,0,0);
_tDate:=type_of(_d0);
_t0:=time(0,0,0);
_tTime:=type_of(_t0);

_a.cntx_psh();
_loop:=_a.first();
{!
|? _loop
|! {? {? _a.f_active() || _a.f_test() || 1 ?}
   || _line:='';
      {! _nfld:=1 .. _a.fld_num()
      |! {? _skip*(',%1,' [_a.fld_acr(_nfld)])=0
         || _val:=_a[_nfld];
            {? (type_of(_val)=_tDate & _val=_d0) |
               (type_of(_val)=_tTime & _val=_ztime)
            || _val:=''
            ?};
            _line+=form(_val)+';'
         ?}
      !};
      _file.fwrite(STR.maz2w95(_line))
   ?};
   _loop:=_a.next()
!};
_a.cntx_pop();

_file.fclose();

_result:=dlg_save(_name,0,'szkolenie.csv');
{? _result<>''
|| _tmp:=dlg_init_dir();
   FUN.info('Dane zapisano w pliku %1.'@ [_result])
?}


\save_print
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Formuła zapisująca raport do lokalnego pliku wskazanego przez użytkownika.
::   WE: _a - nazwa sprawozdania
:: ~OST: INFILECHOOSER, INFCOPY, INSYSEXEC
::  OLD: \save_print/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('')
|| return()
?};

{? exec('interm','#system')
|| rep_exec(_a);
   return()
?};

{!
|? {? (_name:=exec('filechooser','#file','Zapisz jako...'@,0,'pdf','Dokument Adobe Acrobat'@+' (*.PDF)|*.pdf',0,'FILES_ONLY',1))<>''
   || ~exec('save_local','phr_kreatory',_name)
   || return
   ?}
!};

{? rep_exec(_a,,,_a+'.pdf',1)
|| {? exec('print_preview','phr_kreatory')
   || sys_exec(_a+'.pdf',,1)
   ?};
   {? fcopy(_a+'.pdf','@'+_name,1,0,1)
   || ferase(_a+'.pdf',1)
   || FUN.emsg('Wystąpił błąd podczas zapisu pliku.'@)
   ?}
?}


\excel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KO [12.30]
:: OPIS: W celu poprawnego działania obiektu z przekazywaniem tabeli do exportu (metoda .SetTable),
::        należy utworzony obiekt klasy EXCEL przypisać do zmiennej globalnej.
::   WE:  _a  [TABLE]  - Uchwyt do exportowanej tabeli.
::       [_b] [STRING] - Lista (oddzielona przecinkami) akronimów pól do pominięcia w eksporcie.
::   WY:
::  OLD: \excel/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG)
|| return()
?};

_skip:={? var_pres('_b')=type_of('') || _b || '' ?};

exec('init','#excel');
::przypisujemy obiekt klasy EXCEL do zmiennej globalnej
{? var_pres('__tx')>100 || obj_del(__tx) ?};
__tx:=obj_new(@.CLASS.EXCEL);
_a.cntx_psh();
:: ustawienie tabeli, używany jest aktualnie wyświetlany kontekst
__tx.SetTab(_a);
:: ustawienie domyślnego pola do ukrycia
__tx.TabFldH('REF__');
:: jeśli parametr _skip różny od pustego to wtedy ukrywane są akronimy pól
{? _skip<>''
|| __tx.TabFldH(_skip)
?};
:: ustawienie wyświelania nagłówków koloumn, drugi parametr odpowiedzialny za wyświetlania opisów kolumn a nie akronimów
__tx.Header(1,0);
:: ustawienie wiersza rozpoczęcia
__tx.RowNr(1);
:: ustawienie kolumny ropoczęcia
__tx.ColNr(1);
:: włączenie styli
__tx.Styling(1);
:: włączenie automatycznego dopasowania szerokości kolumn
__tx.AutoSize(1);
:: numer i nazwa arkusza
__tx.Sheet(1,'Zestawienie');

__tx.Run();

__tx.DelFiles('',0);
_a.cntx_pop();
obj_del(__tx);
&__tx;
~~


\report
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła kreatora tworzącego raport.
::   WE:  _a  [TABLE]  - Alias tabeli, dla której tworzony jest raport
::        _b  [STRING] - Nazwa szablonu raportu
::        _c  [STRING] - Nazwa pliku, w którym zapisany będzie raport
::        _d  [STRING] - Tytuł załącznika
::       [_e] [NUMBER] - Podgląd (jTerm) / pobieranie (webTerm):
::                         0 - Podgląd wyłączony.
::                         1 - Podgląd włączony [domyślnie].
::       [_f] [STRING] - Sygnatura [domyślnie: brak]
::  OLD: \report/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_isd:={? var_pres('_f')=type_of('') & +form(_f) || _f || ~~ ?};

UD_DEF.cntx_psh();
_typ:=exec('typzal_rep','phr_dane',_a,1).UD_SKL;
UD_DEF.cntx_pop();

_nazwa:=$ZZ_DOKZ.tm_stamp()+'.pdf';
ZZ_DOKZ.cntx_psh();
{? exec('get_dokz','phr_dane',_a,_typ,_d,_isd) & rep_exec(_b,,,_nazwa,1)
|| {? ZZ_DOKZ.bl_put('PLIK',_nazwa,1,,_c,1)
   || ZZ_DOKZ.bl_file('PLIK',1);
      ferase(_nazwa,1);
      {? var_pres('_e')<>type_of(0) | _e
      || {? app_info('web_sesid')=''
         || exec('bl_view','#blob',ZZ_DOKZ,'PLIK')
         || ZZ_DOKZ.web_bl_download('PLIK')
         ?}
      ?}
   ?}
?};
ZZ_DOKZ.cntx_pop();
~~


\print_preview
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Zadaje pytanie o wyświetlenie podglądu wydruku.
::  OLD: \print_preview/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy wyświetlić podgląd dokumentu?'@)


\zz_asyst_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: "Okienko przed" drzewka kreatorów.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZZ_ASYST.win_fml(cur_win(),,'ZZ_ASYS','NAZWA','ICON_BEFORE',"exec('zz_tree_icon','phr_widok',cur_tab(1,1))");
ZZ_ASYST.tr_set(1,,,0);
1


\zz_asyst_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Akcja "Rekord przed" okienka tabeli ZZ_ASYST.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \zz_asyst_action/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _act:={? ZZ_ASYST.ZZ_ASYS().FORMULA='' || 'W' || '' ?};
   ZZ_ASYST.actions_grayed('WER',_act)
?};
~~


\zz_asyst_wybierz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed akcją "Wybierz" w okienku kreatorów.
::   WE:
::   WY:
::  OLD: \zz_asyst_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ASST')>100 || obj_del(ASST) ?};
($(ZZ_ASYST.ZZ_ASYS().FORMULA))()


\zz_asyst_wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed akcją "Wyświetl" w okienku kreatorów.
::   WE:
::   WY:
::  OLD: \zz_asyst_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_ASYS.memo_get(,'OPIS')


\zz_asyst_wyswietl_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po akcji "Wyświetl" w okienku kreatorów.
::   WE:
::   WY:
::  OLD: \zz_asyst_action/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_ASYS.memo_view(,'OPIS')


\context_inst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Deklaracja klasy ZZ_CNTX i powołanie obiektu __ZZ_CNTX
::  OLD: \instance/zz_cntx.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ZZ_CNTX',@.CLASS)<100
|| exec('decl_context','phr_kreatory')
?};
{? var_pres('__ZZ_CNTX')<>var_pres('ZZ_CNTX',@.CLASS)
|| __ZZ_CNTX:=obj_new(@.CLASS.ZZ_CNTX);
   exec('view_trig','phr_kreatory',__ZZ_CNTX.CHOICE,!__ZZ_CNTX.CHOICE)
?};
__ZZ_CNTX


\decl_context
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Deklaruje klasę kontekstu działania kreatora.
::  OLD: \declare/zz_cntx.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ZZ_CNTX',@.CLASS)>=100
|| return(@.CLASS.ZZ_CNTX)
?};

obj_decl('ZZ_CNTX',
   obj_fld('CHOICE',~~),
   obj_fld('ACTION',~~),
   obj_fld('ASSIST',~~),
   obj_fld('interm',exec('interm','#system')),

   obj_meth('__init',"
      exec('setup_context','phr_kreatory',.)
   "),

   obj_meth('erase',"
      .CHOICE.prefix();
      .CHOICE.erase()
   ",-1),

   obj_meth('next_act',"
      .next_act(_a,_b,'Dalej'@,1)
   ",type_of(SYSLOG),type_of('')),

   obj_meth('next_act',"
      _a.win_act(_b,,'Formuła',_c,,,$(.id()+'.next()'));
      (.)
   ",type_of(SYSLOG),type_of(''),type_of('')),

   obj_meth('next_act',"
      _a.win_act(_b,,'Formuła',_c,,,$(.id()+'.next()'),,,,,,,,'target=window');
      (.)
   ",type_of(SYSLOG),type_of(''),type_of(''),type_of(0)),

   obj_meth('state_act',"
      _a.win_act(_b,,'Formuła','Wybierz'@@,,,$(.id()+'.switch(1)'),,1,1,,,'W');
      _a.win_act(_b,,'Formuła','Pomiń'@@,,,$(.id()+'.switch(0)'),,0,1,,,'P');
      (.)
   ",type_of(SYSLOG),type_of('')),

   obj_meth('mark_act',"
      _a.win_act(_b,,'Rekord',,,,$(.id()+'.mark(_a)'));
      (.)
   ",type_of(SYSLOG),type_of('')),

   obj_meth('icon_act',"
      _join:={? var_pres('_d')=type_of('') & _d<>'' || _d || '' ?};
      _tree:={? var_pres('_e')=type_of(0) & _e || '1' || '0' ?};
      _a.win_fml(_b,,_c,_join,'ICON_BEFORE',$('%1.icon(%2)'[.id(),_tree]));
      (.)
   ",type_of(SYSLOG),type_of('')),

   obj_meth('next',"
      .ASSIST.BUF.next();
      .ASSIST.grp_disp();
      .ASSIST.on_refresh()
   "),

   obj_meth('do_assist',"
      .ASSIST.do(_a)
   ",type_of(0)),

   obj_meth('switch',"
      _found:=.find_cur();
      {? ~_a & _found
      || .CHOICE.del()
      |? _a & ~_found
      || _tab:=cur_tab(1,1);
         .CHOICE.blank(1);
         .CHOICE.CLS:=.id(_tab);
         .CHOICE.REF:={? _tab=UD_DEF || UD_DEF.UD_SKL || _tab.ref() ?};
         .CHOICE.add()
      ?}
   ",type_of(0)),

   obj_meth('mark',"
      _found:=.find_cur();
      {? _a
      || _aid:='';
         _def:=':';
         _tab:=cur_tab(1,1);
         _wnd:=cur_win(1,1);
         {? ~_tab.sel_size()
         || {? _found
            || _aid:='W';
               _def:='P'
            || _aid:='P';
               _def:='W'
            ?}
         ?};
         {? ~.interm
         || _tab.actions(_wnd,,_def,1)
         ?};
         _tab.actions_grayed(_wnd,_aid)
      ?};
      0
   ",type_of(0)),

   obj_meth('icon',"
      _icon:=110;
      {? .find_cur()
      || _icon:=38
      |? _a
      || _icon:=exec('zz_tree_ii','phr_widok')
      ?};
      'xwin16.png:%1'[$_icon]
   ",type_of(0)),

   obj_meth('find_cur',"
      _tab:=cur_tab(1,1);
      _id:=.id(_tab);
      .CHOICE.prefix(_id,_id);
      .CHOICE.find_key({? _tab=UD_DEF || UD_DEF.UD_SKL || _tab.ref() ?})
   ",-1),

   obj_meth('has_sel',"
      .has_sel(cur_tab(1,1))
   ",-1),

   obj_meth('has_sel',"
      _tab:=.id(_a);
      .CHOICE.prefix(_tab,_tab);
      .CHOICE.first
   ",type_of(SYSLOG)),

   obj_meth('get_sel',"
      sql('select * from :_a where CLS=\\\':_b\\\'',.CHOICE,.id(_a))
   ",type_of(SYSLOG)),

   obj_meth('id',"
      {? !_a=''
      || _a.name()
      || !{? _a=UD_DEF || UD_SKL || _a ?}
      ?}
   ",type_of(SYSLOG)),

:  zwraca nazwę zmiennej globalnej, która przechowuje wskazanie obiektu
   obj_meth('id',"!(.)",-1)
)


\setup_context
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Inicjacja kontekstu kreatora.
::  OLD: \setup/zz_cntx.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('view_tab','phr_kreatory');
_buf.index(_buf.ndx_tmp(,,'CLS',,,'CLS',,,'REF',,));
_a.CHOICE:=_buf


\decl_objects
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Deklaracja klas asystenta i kroku asystenta.
::  OLD: \obj_decl/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ASSIST',@.CLASS)>100 || return ?};

obj_decl('STEP',

   obj_fld('HEAD',~~),
   obj_fld('TABLE',~~),
   obj_fld('WINDOW',~~),

   obj_fld('ASST',~~),
   obj_fld('VIEW',~~),
   obj_fld('STEP',~~),
   obj_fld('TEXT',~~),
   obj_fld('ICON',~~),
   obj_fld('MOVE',~~),

   obj_fld('CNTX',~~),

:  Konstruktor
   obj_meth('__init',"
      .TEXT:=_b;
      .ICON:={? var_pres('_c')=type_of(0) || _c || 110 ?};
      .MOVE:={? var_pres('_d')=type_of(0) || _d<>0 || 1 ?};
      .VIEW:={? var_pres('_e')=type_of(0) || _e<>0 || 1 ?};
      .CNTX:=exec('context_inst','phr_kreatory')
   ",type_of('')),

   obj_meth('set_view',"
      .TABLE:=_a;
      .WINDOW:=_b;
      .HEAD:=_c;
      (.)
   ",type_of(SYSLOG),type_of(''),type_of('')),

   obj_meth('set_view',".VIEW:=_a; .update()",type_of(0)),
   obj_meth('set_text',".TEXT:=_a; .update()",type_of(0)),
   obj_meth('set_icon',".ICON:=_a; .update()",type_of(0)),
   obj_meth('set_move',".MOVE:=_a; .update()",type_of(0)),

   obj_virt('refresh',"",-1),
   obj_virt('before',"",type_of(0)),
   obj_virt('after',"",type_of(0)),

   obj_meth('set_refresh',"set_virt(.,'refresh',_a,-1); (.)",type_of("")),
   obj_meth('set_before',"set_virt(.,'before',_a,type_of(0)); (.)",type_of("")),
   obj_meth('set_after',"set_virt(.,'after',_a,type_of(0)); (.)",type_of("")),

   obj_meth('set_fml',"
      .set_refresh({? var_pres('_a')=type_of($'') || _a || $'' ?});
      .set_before({? var_pres('_b')=type_of($'') || _b || $'' ?});
      .set_after({? var_pres('_c')=type_of($'') || _c || $'' ?});
      (.)
   "),

   obj_meth('hide_act',"
      {? _a
      || .TABLE.actions(.WINDOW,,,1)
      || .TABLE.actions(.WINDOW,_b,,1)
      ?}
   ",type_of(0),type_of('')),

   obj_meth('cur_step',".ASST.cur_step()",-1),

   obj_meth('get_step',".ASST.get_step(_a)",type_of(0)),

   obj_meth('get_tab',".ASST.get_tab()",-1),
   obj_meth('get_tab',".ASST.get_tab(_a)",type_of(0)),

   obj_meth('get_wnd',".ASST.get_wnd()",-1),
   obj_meth('get_wnd',".ASST.get_wnd(_a)",type_of(0)),

   obj_meth('grp_disp',".ASST.grp_disp()",-1),
   obj_meth('grp_disp',".ASST.grp_disp(_a,0)",type_of(0)),
   obj_meth('grp_disp',".ASST.grp_disp(_a,_b)",type_of(0),type_of(0)),

   obj_meth('update',"
      .merge();
      .grp_disp();
      (.)
   ",-1),

   obj_meth('merge',"
      _a:=.ASST.BUF;
      _a.cntx_psh();
      _a.clear();
      {? {? type_of(.STEP)<>type_of(0) | .STEP<=0
         || _a.STEP:=_a.size()+1;
            .STEP:=_a.STEP
         || _a.blank();
            _a.STEP:=.STEP;
            ~_a.find_rec()
         ?}
      || _a.VIEW:={? type_of(.VIEW)=type_of(0)  || .VIEW<>0 || 1 ?};
         _a.TEXT:={? type_of(.TEXT)=type_of('') || .TEXT    || $.STEP ?};
         _a.ICON:={? type_of(.ICON)=type_of(0)  || .ICON    || 110 ?};
         _a.MOVE:={? type_of(.MOVE)=type_of(0)  || .MOVE<>0 || 1 ?};
         _a.add()
      || {? type_of(.VIEW)=type_of(0)  || _a.VIEW:=.VIEW<>0 ?};
         {? type_of(.TEXT)=type_of('') || _a.TEXT:=.TEXT ?};
         {? type_of(.ICON)=type_of(0)  || _a.ICON:=.ICON ?};
         {? type_of(.MOVE)=type_of(0)  || _a.MOVE:=.MOVE<>0 ?};
         _a.put()
      ?};
      _a.cntx_pop();
      (.)
   ",-1)
);

:  Klasa asystenta
obj_decl('ASSIST',

   obj_fld('BUF',~~),
   obj_fld('NAV',~~),
   obj_fld('WND',~~),

   obj_fld('TITLE',''),
   obj_fld('DO_ASK',''),
   obj_fld('DONE',0),

   obj_fld('STEP',~~),

   obj_fld('CNTX',~~),

:  Konstruktor
   obj_meth('__init',"
      .BUF:=tab_tmp(2,
         'VIEW','INTEGER',,
         'STEP','INTEGER',,
         'TEXT','STRING[255]',,
         'ICON','INTEGER',,
         'MOVE','INTEGER',,
         'TABN','INTEGER',
      );
      exec('lock_columns','phr_widok',.BUF);
      {? var_pres('_b')=type_of('')  || .set_title(_b) ?};
      {? var_pres('_c')=type_of('')  || .set_ask(_c) ?};
      {? var_pres('_d')=type_of($'') || .set_exec(_d)
      |? var_pres('_d')=type_of('')  || .set_exec($_d)
      ?};
      .CNTX:=exec('context_inst','phr_kreatory');
      .CNTX.ASSIST:=(.)
   "),

:  Destruktor
   obj_meth('__done',"
      {? type_of(.BUF)=type_of(SYSLOG)
      || obj_del(.BUF)
      ?};
      {? type_of(.STEP)=type_of(obj_new(1))
      || {! _ndx:=1..obj_len(.STEP)
         |! obj_del(.STEP[_ndx])
         !};
         obj_del(.STEP)
      ?}
   "),

   obj_meth('delete',"
      obj_del(.CNTX.ASSIST);
      obj_del(.)
   "),

:  Uruchamia asystenta.
   obj_meth('run',"{? .BUF.select || .execute(.) ?}",-1),
   obj_meth('run',".setup(_a); .run()",type_of(0),-1),

:  Formuła wykonywana przez asystenta.
   obj_virt('execute',"",-1),

:  Ustawia formułę wykonywana przez asystenta.
   obj_meth('set_exec',"set_virt(.,'execute',_a,-1)",type_of(""),-1),

:  Ustawia treść tytułu okienka asystenta.
   obj_meth('set_title',".TITLE:=_a",type_of(''),-1),

:  Ustawia treść potwierdzenia wykonania asystenta.
   obj_meth('set_ask',".DO_ASK:=_a",type_of(''),-1),

:  Formuła dla akcji "wykonaj" okienka nawigatora.
   obj_virt('do',"
      {? _a
      || {? .DO_ASK<>''
         || FUN.ask(.DO_ASK)
         || 1
         ?}
      || .DONE:=1;
         sel_exit()
      ?}
   ",type_of(0)),

:  Formuła dla akcji "rekord przed" okienka nawigatora.
   obj_virt('record',"{? ~.BUF.MOVE || '168:168:168' ?}",-1),

:  Formuła dla akcji "ikona" pola TEXT w okienku asystenta.
   obj_virt('icon',"'xwin16.png:'+${? .BUF.MOVE || .BUF.ICON || 8 ?}",-1),

:  Formuła dla akcji "po wyświetleniu" okienka asystenta.
   obj_virt('on_display',"
      .CNTX.erase();
      .BUF.prefix(1);
      _loop:=.BUF.first();
      _tab:=1;
      {!
      |? _loop
      |! .BUF.TABN:=_tab;
         .BUF.put();
         _tab+=1;
         _loop:=.BUF.next()
      !};
      .ex_display();
      .grp_disp(1,1)
   ",-1),

   obj_virt('ex_display',"",-1),

   obj_meth('set_display',"set_virt(.,'ex_display',_a,-1)",type_of("")),

:  Formuła dla akcji "zamknięcie" okienka asystenta - pytanie o potwierdzenie przerwania pracy asystenta.
   obj_virt('on_close',"{? ~.DONE || FUN.ask('Czy na pewno zakończyć działanie asystenta?'@) || 1 ?}",-1),

:  Formuła dla akcji "po odświeżeniu" okienka nawigatora w okienku asystenta.
   obj_virt('on_refresh',"
      {? .BUF.MOVE
      || _step:=.BUF.STEP;
         tab_show(.BUF.TABN,'tabs');
         .BUF.cntx_psh;
         _loop:=.BUF.first;
         {!
         |? _loop
         |! {? .BUF.STEP<>_step
            || tab_hide(.BUF.TABN,,'tabs')
            ?};
            _loop:=.BUF.next
         !};
         _last:=.BUF.STEP;
         .BUF.cntx_pop;
         {? _step=_last
         || .BUF.actions(.NAV,,'W',1)
         || .BUF.actions(.NAV,'W',,1)
         ?};
         _step:=.get_step(_step);
         grp_disp(_step.TABLE,_step.WINDOW,1)
      || {! |? {? .BUF.MOVE || 0 || .BUF.prev ?} !};
         grp_disp(.BUF,.NAV,1)
      ?}
   ",-1),

:  Dodaje krok do asystenta.
   obj_meth('+',"
      _b.ASST:=(.);
      _b.merge();
      {? type_of(.STEP)=type_of(obj_new(1))
      || _size:=obj_len(.STEP);
         _step:=obj_new(_size+1);
         _step[_size+1]:=_b;
         {! _ndx:=1.._size
         |! _step[_ndx]:=.STEP[_ndx]
         !};
         obj_del(.STEP);
         .STEP:=_step
      || .STEP:=obj_new(1);
         .STEP[1]:=_b
      ?};
      (.)
   ",THIS,type_of(@.CLASS.STEP)),

:  Zwraca wskazanie do obiektu bieżącego kroku.
   obj_meth('cur_step',".get_step(.BUF.STEP)",-1),

:  Zwraca wskazanie do obiektu kroku o podanym numerze.
   obj_meth('get_step',"
      _len:=obj_len(.STEP);
      {? _a<=0 | _a>_len
      || .STEP[_len]
      || .STEP[_a]
      ?}
   ",type_of(0)),

:  Zwraca alias tabeli nawigatora.
   obj_meth('get_tab',".BUF",-1),
:  Zwraca alias tabeli kroku o numerze podanym argumentem.
   obj_meth('get_tab',".get_step(_a).TABLE",type_of(0)),

:  Zwraca akronim okienka nawigatora.
   obj_meth('get_wnd',".NAV",-1),
:  Zwraca akronim okienka kroku o numerze podanym argumentem
   obj_meth('get_wnd',".get_step(_a).WINDOW",type_of(0)),

:  Odswieża okienko nawigatora.
   obj_meth('grp_disp',"grp_disp(.BUF,.NAV)",-1),
:  Odswieża okienko kroku o numerze przekazanym argumentem
   obj_meth('grp_disp',"grp_disp(.get_tab(_a),.get_wnd(_a))",type_of(0)),
:  Odswieża okienko kroku o numerze przekazanym argumentem wymuszając obslugę
   obj_meth('grp_disp',"grp_disp(.get_tab(_a),.get_wnd(_a),_b)",type_of(0),type_of(0)),

:  Tworzy interfejs asystenta.
   obj_meth('setup',"
      .NAV:=.BUF.mk_sel(,'N',0);
      .BUF.win_fld(.NAV,,'TEXT',,,_a,,,,1);
      .BUF.win_fml(.NAV,,'TEXT',,'ICON_BEFORE',.fml('icon'));
      .BUF.win_act(.NAV,,'Formuła','Wykonaj'@,,,.fml('do',1),.fml('do',0),1);
      .BUF.win_act(.NAV,,'Rekord',,,,.fml('record'));

      .WND:=.BUF.grp_make(.TITLE,.fml('on_display'),,10,10,.fml('on_close'));
      .BUF.grp_sel(.WND,,.NAV,,.fml('on_refresh'),,,.BUF.size+1,,,0,0,'maximized');
      .BUF.grp_splt(.WND,,'horizontal','tabs');

      {! _ndx:=1..obj_len(.STEP)
      |! _step:=.STEP[_ndx];
         {? type_of(_step.WINDOW)=type_of('') & _step.WINDOW<>''
         || .BUF.grp_sel(.WND,_step.TABLE,_step.WINDOW,_step.HEAD,
               $(.id()+'.get_step('+$_ndx+').refresh()'),
               ,,,
               $(.id()+'.get_step('+$_ndx+').before(_a)'),
               $(.id()+'.get_step('+$_ndx+').after(_a)'),
               0,0,'maximized'
            )
         ?};
         &_step
      !};

      .BUF.win_sel(.WND)
   ",type_of(0)),

   obj_meth('view_trig',"
      _id:=.id()+'.get_tab('+$_a+')';
      exec('view_trig','phr_kreatory',.get_tab(_a),_id);
      (.)
   ",type_of(0)),

:  Zwraca nazwę zmiennej globalnej, która przechowuje wskazanie na obiekt.
   obj_meth('id',"!(.CNTX.ASSIST)",-1),

:  Tworzy formułę wywołujacą metodę o nazwie podanej argumentem.
   obj_meth('fml',"$(.id()+'.'+_a+'()')",type_of(''),-1),

:  Tworzy formułę wywołującą metodę o nazwie podanej argumentem _a. Metoda będzie wywoływana z argumentem _b.
   obj_meth('fml',"$(.id()+'.'+_a+'('+$_b+')')",type_of(''),type_of(0),-1)
)


\ref_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i ewentualnie wypełnia danymi tabelę tymczasową przechowującą numery rekordow.
::   WE: ... - numery lub wskazania rekordow (opcjonalne)
::  OLD: \ref_buf/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(1,'REF','INTEGER',);

{! _arg:=1.._
|! {? var_pres('_['+$_arg+']')=type_of(null) |
      var_pres('_['+$_arg+']')=type_of(0)
   || _BUF.REF:=_[_arg];
      _BUF.add()
   ?}
!};

_BUF


\lock_columns
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Blokuje możliwość dodawania kolumn do okienka.
::   WE: _a [TABLE] - alias tabeli
::  OLD: \lock_columns/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{! _num:=1.._a.fld_num()
|! _a.fld_attr(_a.fld_acr(_num),2)
!}


\view_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy okienko podglądu wyniku działania asystenta.
::   WE: _a - długość pola TXT (opcjonalny)
::  OLD: \view_tab/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:={? var_pres('_a')=type_of(0) & _a>0 & _a<256 || _a || 255 ?};

_tab:=tab_tmp(2,
   'TREE','TREE_REF',,
   'TXT','STRING[%1]'[$_len],,
   'CLS','STRING[10]',,
   'REF','INTEGER',,
   'SRC','INTEGER',,
   'DST','INTEGER',,
   'DOK','INTEGER',
);

exec('lock_columns','phr_widok',_tab);

_tab


\view_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Kopiuje wartości pól bufora.
::   WE: _a [TABLE] - alias bufora źródłowego
::       _b [TABLE] - alias bufora docelowego
::  OLD: \view_set/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{! _fld:=1.._a.fld_num()
|! _b[_fld]:=_a[_fld]
!};
_b.TREE:=0


\view_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy okienko podglądu wyniku działania asystenta.
::   WE: _a - alias tabeli podglądu wyniku
::       _b - tytuł okienka (opcjonalny)
::       _c - czy okienko zawiera drzewko (opcjonalny)
::       _d - szerokość kolumny TXT (opcjonalny)
::       _e - tytuł kolumny TXT (opcjonalny)
::       _f - okienko kroku (opcjonalny)
::   WY: akronim okienka
::  OLD: \view_wnd/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_title:={? var_pres('_b')=type_of('') || _b || '' ?};
_tree:=(var_pres('_c')=type_of(0) & _c>0);
_label:={? var_pres('_e')=type_of('') || _e || '' ?};

_wnd:=_a.mk_sel(_title,'P',0,,,,,_tree);

{? var_pres('_d')=type_of(0) & _d>=1 & _d<=120
|| _a.win_fld(_wnd,,'TXT',,,_d,,,_label,_label='')
|| _a.win_fld(_wnd,,'TXT',,,,,,_label,_label='')
?};

{? var_pres('_f')<>type_of(0) | _f=0
|| _a.win_act(_wnd,,'Formuła','Wykonaj'@,,,
      "exec('context_inst','phr_kreatory').do_assist(1)",
      "exec('context_inst','phr_kreatory').do_assist(0)",
      1
   )
|| exec('context_inst','phr_kreatory')
      .state_act(_a,_wnd)
      .next_act(_a,_wnd)
      .mark_act(_a,_wnd)
      .icon_act(_a,_wnd,'TXT',,_tree)
?};
{? _tree
|| _a.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
      "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
   )
?};
_a.win_act(_wnd,,'Szukaj');
_a.win_act(_wnd,,'Kolejność');

_a.win_sel(_wnd);

_wnd


\view_trig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy wyzwalacze dla tabeli widoku kroku kreatora.
::   WE: _a - alias tabeli widoku, dla której tworzony będzie wyzwalacz
::       _b - napis pozwalający zidentyfikowac tabelę wewnątrz formuły wyzwalacza
::  OLD: \view_trig/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_a.trig_b('add',$("
   _sel:="+_b+";
   {? 1+_sel.CLS<>'@' || return(1) ?};
   {? _sel.CLS=!UD_DEF
   || _sel.CLS:=!UD_SKL;
      _sel.REF:=UD_DEF.UD_SKL
   ?};
   _tab:=($_sel.CLS)();
   _tab.cntx_psh();
   _tab.prefix();
   {? _tab.seek(_sel.REF,)
   || _sel.TXT:=exec('record','#to_string',_tab.ref());
      {? exec('has_dok','phr_tab',_tab)
      || _sel.DOK:=_tab.ZZ_DOK
      ?}
   ?};
   _tab.cntx_pop();
   1")
);

_a.trig_b('del',$("
   _tab:="+_b+";
   _ref:=_tab.ref();
   _tab.cntx_psh();
   _tab.prefix();
   {? _tab.first()
   || {!
      |? {? _tab.ref()<>_ref & _tab.TREE=_ref
         || _tab.del()
         || _tab.next()
         ?}
      !}
   ?};
   _tab.cntx_pop();
   1")
)


\check_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Ustawia opcje działania asystenta.
::   WE: _a [TABLE] - alias tabeli
::       _b [INTEGER] - wartość do ustawienia [0/1]
::  OLD: \check_set/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.FML<>''
|| ($_a.FML)(_b)
|| exec('check_def','phr_kreatory',_a,_b)
?}


\check_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Tworzy tabelę i okienko do obsługi opcji asystenta.
::   WY: alias tabeli
::  OLD: \check_tab/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=tab_tmp(2,
   'TREE','TREE_REF',,
   'NUM','INTEGER',,
   'SET','INTEGER',,
   'TXT','STRING[100]',,
   'CLS','STRING[10]',,
   'REF','INTEGER',,
   'FML','STRING[255]',,
   'ORG','INTEGER',
);

exec('lock_columns','phr_kreatory',_par);

_wnd:=_par.mk_sel(,'N',0,,,,,1,'N','T',,);
_par.win_fld(_wnd,,'TXT',,,_a);
_par.win_fml(_wnd,,'TXT',,'ICON_BEFORE',"
   _set:=cur_tab(1,1).SET;
   'xwin16.png:'+${? _set=1 || 38 |? _set<0 || 8 || 81 ?}
");
exec('context_inst','phr_kreatory').next_act(_par,_wnd);
_par.win_act(_wnd,,'Formuła','Wybierz'@@,,,"exec('check_set','phr_kreatory',cur_tab(1,1),1)",,1,1,"sel_nchk()",,'W');
_par.win_act(_wnd,,'Formuła','Pomiń'@@,,,"exec('check_set','phr_kreatory',cur_tab(1,1),0)",,0,1,"sel_nchk()",,'P');
_par.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
_par.win_act(_wnd,,'Rekord',,,,"
   {? _a
   || _aid:='';
      _def:=':';
      _tab:=cur_tab(1,1);
      _wnd:=cur_win(1,1);
      {? ~_tab.sel_size()
      || {? _tab.SET=0
         || _aid:='P';
            _def:='W'
         |? _tab.SET>0
         || _aid:='W';
            _def:='P'
         |? _tab.SET<0
         || _aid:='PW'
         ?}
      ?};
      _tab.actions(_wnd,,_def,1);
      _tab.actions_grayed(_wnd,_aid)
   ?}
");
_par.win_sel(_wnd);

_par


\check_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Ustawia opcje dzialania asystenta.
::   WE: _a [TABLE] - alias do tabeli
::       _b [INTEGER] - wartość do ustawienia [0/1]
::  OLD: \check_def/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.SET=_b
|| return()
?};

{? _a.SET>=0
|| _set:=~_a.SET;
   _a.SET:=_b;
   _a.put();
   _a.cntx_psh();
   _a.prefix(_a.ref());
   _loop:=_a.first();
   {!
   |? _loop
   |! {? _b
      || _a.SET:=_a.ORG
      || _a.ORG:=_a.SET;
         _a.SET:=-1
      ?};
      _a.put();
      _loop:=_a.next()
   !};
   _a.cntx_pop()
?}


\typ_met_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Ustawia opcje dzialania asystenta.
::  OLD: \typ_met_set/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=cur_tab(1,1);
{? _buf.SET<0
|| return()
?};

exec('check_def','phr_kreatory',_buf,~_buf.SET);
_set:=_buf.SET;
_ref:=_buf.ref();

ZZ_MET.cntx_psh();
ZZ_MET.prefix();
_buf.cntx_psh();
_buf.prefix(_buf.TREE);
_loop:=_buf.first();
{!
|? _loop
|! {? _buf.ref()<>_ref & ZZ_MET.seek(_buf.REF,) & ZZ_MET.RODZAJ='S'
   || {? _set
      || _buf.ORG:=_buf.SET;
         _buf.SET:=-1
      || _buf.SET:=0
      ?};
      _buf.put()
   ?};
   _loop:=_buf.next()
!};
_buf.cntx_pop();
ZZ_MET.cntx_pop()


\typ_met
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Tablica parametrów.
::   WE: _a [OBJECT] - wskazanie na asystenta
::       _b [NUMBER] - numer kroku
::       _c [STRING] - symbole typow ocen
::       _d [STRING] - symbole metod oceny
::  OLD: \typ_met/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=_a.get_tab(_b);
_ins:=exec('insert','phr_tab',_par,1);
_num:=0;
ZZ_TYP.cntx_psh();
ZZ_TYP.index('NAZWA');
ZZ_TYP.prefix(ZZ_POM.MODUL);
ZZ_MET.cntx_psh();
ZZ_MET.index('NAZWA');
ZZ_MET.clear();
_typ_loop:=ZZ_TYP.first();
{!
|? _typ_loop
|! {? (','+_c+',')*(','+ZZ_TYP.KOD+',') & _ins(_par,0,_num+=1,1,ZZ_TYP.NAZWA,!ZZ_TYP,ZZ_TYP.ref())
   || _tree:=_par.ref();
      _lock:=0;
      _state:=1;
      _met_loop:=ZZ_MET.first();
      {!
      |? _met_loop
      |! {? (','+_d+',')*(','+ZZ_MET.KOD+',')
         || {? ZZ_MET.RODZAJ='S'
            || {? _lock
               || _state:=-1
               || _lock:=1
               ?}
            || _state:=1
            ?};
            {? _ins(_par,_tree,_num+=1,1,ZZ_MET.NAZWA,!ZZ_MET,ZZ_MET.ref()) & ZZ_MET.RODZAJ='S'
            || _par.FML:='exec(\'typ_met_set\',\'phr_kreatory\')';
               _par.SET:=_state;
               _par.put()
            ?}
         ?};
         _met_loop:=ZZ_MET.next()
      !}
   ?};
   _typ_loop:=ZZ_TYP.next()
!};
ZZ_MET.cntx_pop();
ZZ_TYP.cntx_pop();

_par.first();
_par


\met_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Generuje typy i metody oceny dla kompetencji.
::   WE: _a [REFERENCE] - Wskazanie na kompetencję.
::       _b [TABLE]     - Alias do tabeli opcji.
::  OLD: \met_gen/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMP.cntx_psh();
ZZ_KOMP.prefix();
{? ZZ_KOMP.seek(_a)
|| _dok:=ZZ_KOMP.ZZ_DOK
|| ZZ_KOMP.cntx_pop();
   return()
?};

ZZ_TYP.cntx_psh();
ZZ_MET.cntx_psh();
ZZ_PROFO.cntx_psh();

_b.prefix();
_loop:=_b.first();
{!
|? _loop
|! ZZ_TYP.prefix();
   {? ~_b.TREE & _b.CLS=!ZZ_TYP & ZZ_TYP.seek(_b.REF,)
   || _prof:=exec('get_proft','phr_dane',_dok,ZZ_TYP.ref());
      _komp:=exec('get_profk','phr_dane',_dok,_a);
      _b.cntx_psh();
      _b.prefix(_b.ref());
      _loop:=_b.first();
      {!
      |? _loop
      |! {? _b.CLS=!ZZ_MET & ZZ_MET.seek(_b.REF,)
         || ZZ_PROFO.index('UNIQUE');
            ZZ_PROFO.prefix(_komp,_prof);
            {? ~ZZ_PROFO.find_key(ZZ_MET.ref())
            || ZZ_PROFO.index('RODZAJ');
               ZZ_PROFO.prefix(_komp,_prof);
               {? ZZ_PROFO.find_key(ZZ_MET.RODZAJ) & ZZ_PROFO.ZZ_MET<>ZZ_MET.ref()
               || ZZ_PROFO.ZZ_MET:=ZZ_MET.ref();
                  ZZ_PROFO.put()
               || ZZ_PROFO.clear();
                  ZZ_PROFO.blank(1);
                  ZZ_PROFO.ZZ_PROFK:=_komp;
                  ZZ_PROFO.ZZ_PROFT:=_prof;
                  ZZ_PROFO.ZZ_MET:=ZZ_MET.ref();
                  ZZ_PROFO.add()
               ?}
            ?}
         ?};
         _loop:=_b.next()
      !};
      _b.cntx_pop()
   ?};
   _loop:=_b.next()
!};
ZZ_TYP.prefix();

ZZ_PROFO.cntx_pop();
ZZ_MET.cntx_pop();
ZZ_TYP.cntx_pop();
ZZ_KOMP.cntx_pop();
~~


\met_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Generuje typy i metody oceny dla kompetencji.
::   WE: _a [TABLE] - alias do tabeli typow i metod
::       _b [TABLE] - alias do tabeli wyniku
::  OLD: \met_copy/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_b.erase();
_a.cntx_psh();
_loop:=_a.first();
{!
|? _loop
|! {? ~_a.TREE & _a.SET>0
   || _b.blank(1);
      _b.TXT:=_a.TXT;
      _b.CLS:=_a.CLS;
      _b.REF:=_a.REF;
      _a.cntx_psh();
      _a.prefix(_a.ref());
      {? _a.first()
      || _b.add();
         _test:=0;
         _tree:=_b.ref();
         {!
         |? {? _a.SET>0
            || _b.TREE:=_tree;
               _b.TXT:=_a.TXT;
               _b.CLS:=_a.CLS;
               _b.REF:=_a.REF;
               _test:=1;
               _b.add()
            ?};
            _a.next()
         !};
         {? ~_test
         || _b.del()
         ?}
      ?};
      _a.cntx_pop()
   ?};
   _loop:=_a.next()
!};
_a.cntx_pop();
_b.first()


\view_trim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Usuwa "wolne" rekordy.
::   WE: _a [TABLE] - Alias do bufora zrodlowego
::  OLD: \view_trim/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.first()
|| _ref:=_a.ref();
   {!
   |? {? _a.ref()=_ref | _a.TREE
      || _a.next()
      || _a.del()
      ?}
   !}
?};
{? _a.first()
|| _ref:=_a.ref();
   {!
   |? {? _a.TREE=_ref
      || _a.TREE:=0;
         _a.put();
         _a.first()
      || _a.next()
      ?}
   !};
   {? _a.seek(_ref)
   || _a.del()
   ?}
?};
_a


\rb_k_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego dokument opisu bieżącej kompetencji.
::  OLD: \kompopis1/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('report','phr_kreatory',ZZ_KOMP,'poc_kompopis','poc_opis.pdf','Opis kompetencji',
   exec('print_preview','phr_kreatory'),'OPIS-1'
)


\kryt3data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wypełnia tabelę widoku stanowisk w jednostkach organizacyjnych.
::   WE: _a - wskazanie obiektu asystenta
::       _b - numer kroku
::  OLD: \kryt3data/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a.get_tab(_b);

STO.cntx_psh;
STO.index('ST');
UD_DEF.cntx_psh();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(exec('domyslny','schemat','PODZORG'));
_def_loop:=UD_DEF.first();
{!
|? _def_loop
|! _buf.blank();
   _buf.CLS:=!UD_DEF;
   _buf.REF:=UD_DEF.ref();
   {? _buf.add()
   || STO.prefix(UD_DEF.UD_SKL);
      _stn_loop:=STO.first();
      _tree:=_buf.ref();
      {!
      |? _stn_loop
      |! _buf.blank();
         _buf.CLS:=!STN;
         _buf.REF:=STO.STN;
         _buf.TREE:=_tree;
         _buf.add();
         _stn_loop:=STO.next()
      !}
   ?};
   _def_loop:=UD_DEF.next()
!};
STO.cntx_pop();
_def_loop:=UD_DEF.first();
{!
|? _def_loop
|! {? UD_DEF.UD_DEF
   || UD_DEF.cntx_psh();
      {? UD_DEF.seek(UD_DEF.UD_DEF,)
      || _buf.blank();
         _buf.CLS:=!UD_SKL;
         _buf.REF:=UD_DEF.UD_SKL;
         {? _buf.find_rec()
         || _tree:=_buf.ref();
            UD_DEF.cntx_pop();
            _buf.blank();
            _buf.CLS:=!UD_SKL;
            _buf.REF:=UD_DEF.UD_SKL;
            {? _buf.find_rec()
            || _buf.TREE:=_tree;
               _buf.put()
            ?}
         || UD_DEF.cntx_pop()
         ?}
      || UD_DEF.cntx_pop()
      ?}
   ?};
   _def_loop:=UD_DEF.next()
!};
UD_DEF.cntx_pop();

_buf.first() & _buf.next()


\wnd_stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy okienko tabeli STN do wykorzystania przez asystentów.
::   WE: _a - wskazanie na kontekst asystenta
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_acr:='AST';
{? (_wnd:=__WND.SEL.get(STN,_acr))=''
|| _wnd:=STN.mk_sel('Stanowiska'@,'P',0,__WND.id(STN,_acr),,,,,'U','T');
   __WND.SEL.put(STN,_acr,_wnd);

   STN.win_fld(_wnd,,'ST');

   _a.state_act(STN,_wnd).
      next_act(STN,_wnd).
      mark_act(STN,_wnd).
      icon_act(STN,_wnd,'ST');
   STN.win_act(_wnd,0,'Szukaj');
   STN.win_act(_wnd,0,'Kolejność')
?};
_wnd


\wnd_ud_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy okienko tabeli UD_DEF do wykorzystania przez asystentów.
::   WE: _a - wskazanie na kontekst asystenta
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_acr:='AST';
{? (_wnd:=__WND.SEL.get(UD_DEF,_acr))=''
|| _wnd:=UD_DEF.mk_sel('Jednostki organizacyjne'@,'P',0,__WND.id(UD_DEF,_acr),,,,1);
   __WND.SEL.put(UD_DEF,_acr,_wnd);

   UD_DEF.win_fld(_wnd,,'SYMBOL',,,30);
   UD_DEF.win_fld(_wnd,,'OPIS');

   _a.state_act(UD_DEF,_wnd).
      next_act(UD_DEF,_wnd).
      mark_act(UD_DEF,_wnd).
      icon_act(UD_DEF,_wnd,'SYMBOL',,1);
   UD_DEF.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
      "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
   );
   UD_DEF.win_act(_wnd,0,'Szukaj');
   UD_DEF.win_act(_wnd,0,'Kolejność')
?};
_wnd


\wnd_zz_komp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Tworzy okienko tabeli ZZ_KOMP do wykorzystania przez asystentów.
::   WE: _a [OBJECT] - Wskazanie na kontekst asystenta.
::   WY: Akronim okienka.
::  OLD: \zz_komp/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:='AST';
{? (_wnd:=__WND.SEL.get(ZZ_KOMP,_acr))<>''
|| return(_wnd)
?};
:  zaznaczanie wybranych kompetencji
_wnd:=ZZ_KOMP.mk_sel('Kompetencje'@,'P',0,__WND.id(ZZ_KOMP,_acr),,,,1,'N','N');
__WND.SEL.put(ZZ_KOMP,_acr,_wnd);

ZZ_KOMP.win_fld(_wnd,,'NAZWA',,,80);

_a.state_act(ZZ_KOMP,_wnd).
   next_act(ZZ_KOMP,_wnd).
   mark_act(ZZ_KOMP,_wnd).
   icon_act(ZZ_KOMP,_wnd,'NAZWA',,1);

ZZ_KOMP.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
ZZ_KOMP.win_act(_wnd,0,'Szukaj');
ZZ_KOMP.win_act(_wnd,0,'Kolejność');

_wnd


\wnd_zz_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Tworzy okienko tabeli ZZ_KRYT do wykorzystania przez asystentów.
::   WE: _a [OBJECT] - Wskazanie na kontekst asystenta.
::   WY: Akronim okienka.
::  OLD: \zz_kryt/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:='AST';
{? (_wnd:=__WND.SEL.get(ZZ_KRYT,_acr))<>''
|| return(_wnd)
?};
_wnd:=ZZ_KRYT.mk_sel('Kryteria doboru'@,'N',0,__WND.id(ZZ_KRYT,_acr),,,,1,'N','N');
__WND.SEL.put(ZZ_KRYT,_acr,_wnd);

ZZ_KRYT.win_fld(_wnd,,'NAZWA');

_a.state_act(ZZ_KRYT,_wnd).
   next_act(ZZ_KRYT,_wnd).
   mark_act(ZZ_KRYT,_wnd).
   icon_act(ZZ_KRYT,_wnd,'NAZWA',,1);
ZZ_KRYT.win_act(_wnd,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
ZZ_KRYT.win_act(_wnd,0,'Szukaj');
ZZ_KRYT.win_act(_wnd,0,'Kolejność');

_wnd


\asst_stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta działającego dla stanowisk.
::   WE: _a - formuła asystenta
::       _b - tytuł okienka
::       _c - treść potwierdzenia
::       _d - opis kroku 1
::       _e - tytuł kroku 1
::       _f - opis kroku 2
::       _g - tytuł kroku 2
::  OLD: \asst_stn/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_ast:=obj_new(@.CLASS.ASSIST,_b,_c,_a);

_len:=MS.fld_len('STN','ST');
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,,_len,'Nazwa');

:  wybór stanowisk
_s1:=obj_new(@.CLASS.STEP,_d,38);
_s1.set_view(STN,exec('wnd_stn','phr_kreatory',_ast.CNTX),_e);
:  funkcjonalność
_s1.set_fml(
:  po odświeżeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",
:  przed obsługą
   "  STN.index('STANOZAT');
      STN.prefix('T')
   ",
:  po obsłudze
   ".grp_disp(0)"
);

:  podgląd wyniku działania
_s2:=obj_new(@.CLASS.STEP,_f,28,0);
_s2.set_view(_res,_wnd,_g);
:  funkcjonalność
_s2.set_fml(,
:  przed obsługa
   "  {? _a || return ?};
      _res:=.get_tab(0);
      _res.erase();
      _sel:=.CNTX.CHOICE;
      _loop:=.CNTX.has_sel(STN);
      {!
      |? _loop
      |! _res.CLS:=_sel.CLS;
         _res.REF:=_sel.REF;
         _res.add();
         _loop:=_sel.next()
      !}
   "
);

:  ustaw i uruchom
STN.cntx_psh();
(_ast+_s1+_s2).view_trig(0).run(_len);
STN.cntx_pop();

:porządki
_ast.delete()


\asst_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta generującego kryteria doboru na podstawie jednostek organizacyjnych.
::   WE: _a - formuła asystenta
::       _b - tytuł okienka
::       _c - treść potwierdzenia
::       _d - opis kroku 1
::       _e - tytuł kroku 1
::       _f - opis kroku 2
::       _g - tytuł kroku 2
::  OLD: \asst_skl/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.fld_len('UD_DEF','OPIS')+31;

_res:=exec('view_tab','phr_kreatory',_len,_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,,_len,'Nazwa');

_ast:=obj_new(@.CLASS.ASSIST,_b,_c,_a);
_ast.set_display("UD_DEF.prefix(exec('domyslny','schemat','PODZORG'))");

:  wybór jednostek
_s1:=obj_new(@.CLASS.STEP,_d,38);
_s1.set_view(UD_DEF,exec('wnd_ud_def','phr_kreatory',_ast.CNTX),_e);
:  funkcjonalność
_s1.set_fml(
:  po odswieżeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",,
:  po obsłudze
   ".grp_disp(0)"
);

:  podgląd wyniku działania
_s2:=obj_new(@.CLASS.STEP,_f,28,0);
_s2.set_view(_res,_wnd,_g);
:  funkcjonalność
_s2.set_fml(,
:  przed obsługą
   "  {? _a || return ?};
      _res:=.get_tab(0);
      _res.erase();
      _sel:=.CNTX.CHOICE;
      _loop:=.CNTX.has_sel(UD_SKL);
      {!
      |? _loop
      |! _res.CLS:=_sel.CLS;
         _res.REF:=_sel.REF;
         _res.add();
         _loop:=_sel.next()
      !}
   "
);

:  ustaw i uruchom
(_ast+_s1+_s2).view_trig(0).run(_len);

:  porządki
_ast.delete()


\asst_jst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła dla asystentów tworzących kryteria na podstawie jednostek i stanowisk.
::   WE: _a - formuła asystenta
::       _b - tytuł okienka
::       _c - treść potwierdzenia
::       _d - opis kroku 1
::       _e - tytuł kroku 1
::       _f - opis kroku 2
::       _g - tytuł kroku 2
::  OLD: \asst_jst/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.fld_len('UD_SKL','SYMBOL')+MS.fld_len('UD_SKL','OPIS')+1;
_len:=MS.max(MS.fld_len('ZZ_KOMP','NAZWA'),_len);
_len:=MS.max(MS.fld_len('STN','ST'),_len);

_buf_tab:=exec('view_tab','phr_kreatory',_len);
_buf_wnd:=exec('view_wnd','phr_kreatory',_buf_tab,,1,_len,'Nazwa',1);

_res_tab:=exec('view_tab','phr_kreatory',_len);
_res_wnd:=exec('view_wnd','phr_kreatory',_res_tab,,1,_len,'Nazwa');

_ast:=obj_new(@.CLASS.ASSIST,_b,_c,_a);
_ast.set_display("exec('kryt3data','phr_kreatory',.,1)");

:  wybór jednostek i stanowisk
_s1:=obj_new(@.CLASS.STEP,_d,38);
_s1.set_view(_buf_tab,_buf_wnd,_e);
:  funkcjonalność
_s1.set_fml(
:  po odświeżeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",,
:  po obsłudze
   ".grp_disp(0)"
);

:  podgląd wyniku działania
_s2:=obj_new(@.CLASS.STEP,_f,28,0);
_s2.set_view(_res_tab,_res_wnd,_g);
:  funkcjonalność
_s2.set_fml(,
:  przed obsługą
   "  {? _a || return ?};
      _buf:=.get_tab(1);
      _res:=.get_tab(0);
      _res.erase();
      _buf.cntx_psh();
      _sel:=.CNTX.CHOICE;
      _loop:=.CNTX.has_sel(_buf);
      {!
      |? _loop
      |! {? _buf.seek(_sel.REF,)
         || _res.blank();
            _res.REF:=_buf.REF;
            _res.CLS:=_buf.CLS;
            _res.SRC:=_buf.ref();
            _res.add()
         ?};
         _loop:=_sel.next()
      !};
      _loop:=_res.first();
      {!
      |? _loop
      |! _update:=0;
         {? _buf.seek(_res.SRC,)
         || {!
            |? {? ~_res.TREE & _buf.TREE
               || _sel.blank();
                  _sel.REF:=_buf.TREE;
                  {? _sel.find_rec() & _buf.seek(_sel.REF,)
                  || _tree:=0;
                     _res.cntx_psh();
                     _res.blank();
                     _res.SRC:=_buf.ref();
                     {? _res.find_rec()
                     || _tree:=_res.ref()
                     ?};
                     _res.cntx_pop();
                     {? _res.ref()<>_tree
                     || _res.TREE:=_tree;
                        _res.put();
                        _update:=1
                     ?};
                     0
                  ?};
                  _buf.seek(_buf.TREE,)
               ?}
            !}
         ?};
         _loop:={? _update || _res.first() || _res.next() ?}
      !};
      _buf.cntx_pop()
   ");

:  ustaw i uruchom
(_ast+_s1+_s2).view_trig(0).view_trig(1).run(_len);

:  porządki
_ast.delete()


\gen_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego kryteria dla bieżącej kompetencji na podstawie stanowisk.
::   WE: _a - wskazanie typu oceny
::       _b - alias tabeli zawierającej wskazania na właścicieli kryteriów
::       _c - alias tabeli zawierającej wskazania do rekordów źrodłowych, dla których mają być generowane kryteria
::       _d - postęp operacji (opcjonalny)
::  OLD: \gen_kryt/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOK.cntx_psh();
ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('UNIQUE');

_cnt:=0;
_dim:=_b.size*_c.size;
_dok_loop:=_b.first;
{!
|? _dok_loop
|! ZZ_DOK.clear();
   {? exec('seek_dok','phr_tab',_b.REF)
   || _link:=ZZ_DOK.ref();
      ZZ_KRYT.prefix(ref_name(_link),_link,_a);
      _res_loop:=_c.first();
      {!
      |? _res_loop
      |! _c.DST:=0;
         _c.put();
         _res_loop:=_c.next()
      !};
      _res_loop:=_c.first();
      {!
      |? _res_loop
      |! _pgs:={? var_pres('_d')<>type_of(0) || 100*_cnt/_dim || _d ?};
         progress(int(_pgs),'Trwa generowanie danych...'@,'Kryteria doboru'@);
         {? ~_c.DST
         || _kryt:=0;
            {? _c.TREE
            || _c.cntx_psh();
               {? _c.seek(_c.TREE,)
               || _kryt:=_c.DST
               ?};
               _c.cntx_pop()
            ?};
            _SRC:=($_c.CLS)();
            _SRC.cntx_psh();
            _SRC.clear();
            {? _SRC.seek(_c.REF,)
            || _kryt:=exec('zz_kryt_add','phr_widok',
                  exec('kryt_tab','phr_dane',_SRC),
                  _SRC.ref(),
                  _link,
                  _a,
                  _kryt
               );
               {? _kryt
               || _c.DST:=_kryt;
                  _c.put()
               ?}
            ?};
            _SRC.cntx_pop();
            &_SRC;
            _cnt+=1
         ?};
         _res_loop:=_c.next()
      !}
   ?};
   _dok_loop:=_b.next()
!};

ZZ_KRYT.cntx_pop();
ZZ_DOK.cntx_pop();

{? var_pres('_d')<>type_of(0)
|| prgs_clr()
?}


\kryt_stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta generującego kryteria doboru na podstawie stanowisk.
::   WE: _a - formuła asystenta
::  OLD: \kryt_stn/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_stn','phr_kreatory',_a,
   'Kryteria doboru na podstawie stanowisk'@,'Czy na pewno utworzyć kryteria doboru?'@,
   'Wybór stanowisk dla kryterium doboru'@,'Stanowiska'@,
   'Generowanie kryteriów doboru'@,'Kryteria doboru'@
)


\kryt_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta generującego kryteria doboru na podstawie jednostek organizacyjnych.
::   WE: _a - formula asystenta
::  OLD: \kryt_skl/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_skl','phr_kreatory',_a,
   'Kryteria doboru na podstawie jednostek org.'@,'Czy na pewno utworzyć kryteria doboru?'@,
   'Wybór jednostek dla kryterium doboru'@,'Jednostki organizacyjne'@,
   'Generowanie kryteriów doboru'@,'Kryteria doboru'@
)


\kryt_jst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formula dla asystentow tworzacych kryteria na podstawie jednostek i stanowisk.
::   WE: _a - formula asystenta
::  OLD: \kryt_jst/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_jst','phr_kreatory',_a,
   'Kryteria doboru na podstawie struktury zatrudnienia'@,'Czy na pewno utworzyć kryteria doboru?'@,
   'Wybór stanowisk w jednostkach'@,'Stanowiska w jednostkach organizacyjnych'@,
   'Generowanie kryteriów doboru'@,'Kryteria doboru'@
)


\gn_kp_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formula asystenta tworzacego definicje profili i kryteria na podstawie stanowisk.
::   WE: _a - wskazanie obiektu kreatora
::  OLD: \krytprof11a/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| ZZ_PROF.cntx_psh();
   ZZ_PROF.index('NAZWA');
   ZZ_PROF.prefix(ZZ_POM.ZZ_HIST);
   _typ:=exec('typ_op','phr_dane');
   _BUF:=exec('view_tab','phr_kreatory');
   _RES:=_a.get_tab(0);
   _new:=null;
   _cnt:=0;
   _dim:=_RES.size();
   _loop:=_RES.first();
   {!
   |? _loop
   |! _key:=_RES.TXT;
      {? ~ZZ_PROF.find_key(_key,_key)
      || ZZ_PROF.blank();
         ZZ_PROF.NAZWA:=_key;
         ZZ_PROF.RODZAJ:=exec('kod','ext_slo','PROFTYP','O');
         {? ZZ_PROF.add()
         || _BUF.erase();
            exec('view_set','phr_kreatory',_RES,_BUF);
            _BUF.add();
            _new:=ZZ_PROF.ref();
            _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
            exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_BUF,100*_cnt/_dim)
         ?}
      ?};
      _cnt+=1;
      _loop:=_RES.next()
  !};
   prgs_clr();
   ZZ_PROF.cntx_pop();
   {? _new
   || ZZ_PROF.seek(_new)
   ?};
   sel_exit()

|| exec('kryt_stn','phr_kreatory',"exec('gn_kp_s','phr_kreatory',_a)")
?}


\gw_kp_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formula asystenta tworzacego kryteria dla bieżącego profilu na podstawie stanowisk.
::  OLD: \krytprof11b/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| _typ:=exec('typ_op','phr_dane');
   _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
   exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_a.get_tab(0));
   sel_exit()

|| exec('kryt_stn','phr_kreatory',"exec('gw_kp_s','phr_kreatory',_a)")
?}


\gn_kp_j
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego definicje profili i kryteria na podstawie jednostek organizacyjnych.
::  OLD: \krytprof12a/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| ZZ_PROF.cntx_psh();
   ZZ_PROF.index('NAZWA');
   ZZ_PROF.prefix(ZZ_POM.ZZ_HIST);
   _typ:=exec('typ_op','phr_dane');
   _BUF:=exec('view_tab','phr_kreatory');
   _RES:=_a.get_tab(0);
   _new:=null;
   _cnt:=0;
   _dim:=_RES.size();
   _loop:=_RES.first();
   {!
   |? _loop
   |! _key:=_RES.TXT;
      {? ~ZZ_PROF.find_key(_key,_key)
      || ZZ_PROF.blank();
         ZZ_PROF.NAZWA:=_key;
         ZZ_PROF.RODZAJ:=exec('kod','ext_slo','PROFTYP','O');
         {? ZZ_PROF.add()
         || _BUF.erase();
            exec('view_set','phr_kreatory',_RES,_BUF);
            _BUF.add();
            _new:=ZZ_PROF.ref();
            _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
            exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_BUF,100*_cnt/_dim)
         ?}
      ?};
      _cnt+=1;
      _loop:=_RES.next()
   !};
   prgs_clr();
   ZZ_PROF.cntx_pop();
   {? _new
   || ZZ_PROF.seek(_new) ?};
   sel_exit()

|| exec('kryt_skl','phr_kreatory',"exec('gn_kp_j','phr_kreatory',_a)")
?}


\gw_kp_j
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego kryteria dla bieżącego profilu na podstawie jednostek organizacyjnych.
::  OLD: \krytprof12b/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| _typ:=exec('typ_op','phr_dane');
   _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
   exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_a.get_tab(0));
   sel_exit()

|| exec('kryt_skl','phr_kreatory',"exec('gw_kp_j','phr_kreatory',_a)")
?}


\gn_kp_sj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego definicje profili i kryteria na podstawie jednostek i stanowisk.
::  OLD: \krytprof13a/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| ZZ_PROF.cntx_psh();
   ZZ_PROF.index('NAZWA');
   ZZ_PROF.prefix(ZZ_POM.ZZ_HIST);
   _typ:=exec('typ_op','phr_dane');
   _BUF:=exec('view_tab','phr_kreatory');
   _RES:=_a.get_tab(0);
   _new:=null;
   _cnt:=0;
   _dim:=_RES.size();
   _loop:=_RES.first();
   {!
   |? _loop
   |! {? _RES.TREE & _RES.CLS=!STN
      || _key:=_RES.TXT;
         _BUF.erase();
         exec('view_set','phr_kreatory',_RES,_BUF);
         _BUF.add();
         _RES.cntx_psh();
         {? _RES.seek(_RES.TREE,)
         || _key+=' - '+_RES.TXT;
            _BUF.cntx_psh();
            exec('view_set','phr_kreatory',_RES,_BUF);
            _BUF.add();
            _tree:=_BUF.ref();
            _BUF.cntx_pop();
            _BUF.TREE:=_tree;
            _BUF.put()
         ?};
         _RES.cntx_pop();
         {? ~ZZ_PROF.find_key(_key,_key)
         || ZZ_PROF.blank();
            ZZ_PROF.NAZWA:=_key;
            ZZ_PROF.RODZAJ:=exec('kod','ext_slo','PROFTYP','O');
            {? ZZ_PROF.add()
            || _new:=ZZ_PROF.ref();
               _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
               exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_BUF,100*_cnt/_dim)
            ?}
         ?}
      ?};
      _cnt+=1;
      _loop:=_RES.next()
   !};
   prgs_clr();
   ZZ_PROF.cntx_pop();
   {? _new
   || ZZ_PROF.seek(_new)
   ?};
   sel_exit()

|| exec('kryt_jst','phr_kreatory',"exec('gn_kp_sj','phr_kreatory',_a)")
?}


\gw_kp_sj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formula asystenta tworzacego kryteria dla bieżącego profilu na podstawie jednostek i stanowisk.
::  OLD: \krytprof13b/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| _typ:=exec('typ_op','phr_dane');
   _dok:=exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ,1);
   exec('gen_kryt','phr_kreatory',_typ,exec('ref_buf','phr_kreatory',_dok),_a.get_tab(0));
   sel_exit()

|| exec('kryt_jst','phr_kreatory',"exec('gw_kp_sj','phr_kreatory',_a)")
?}


\gw_kk_s__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego kryteria dla wybranych kompetencji na podstawie stanowisk.
::  OLD: \kryt_gen21/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_SRC:=exec('view_trim','phr_kreatory',_a.get_tab(0));
_DOK:=sql('select DOK as REF from :_a where CLS=\'@.ZZ_KOMP\'',_a.CNTX.CHOICE);
exec('gen_kryt','phr_kreatory',exec('typ_op','phr_dane'),_DOK,_SRC);
sel_exit()


\gb_kk_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego kryteria dla bieżącej kompetencji na podstawie stanowisk.
::   WE: [_a] [OBJECT] - Parametr techniczny.
::  OLD: \krytkomp11/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| exec('gen_kryt','phr_kreatory',
      exec('typ_op','phr_dane'),exec('ref_buf','phr_kreatory',ZZ_KOMP.ZZ_DOK),
      _a.get_tab(0)
   );
   sel_exit()
|| exec('kryt_stn','phr_kreatory',"exec('gb_kk_s','phr_kreatory',_a)")
?}


\gb_kk_k__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego kryteria dla bieżącej kompetencji na podstawie definicji innej kompetencji.
::   WE: _a [OBJECT]    - Uchwyt obiektu klast ASSIST
::       _b [REFERENCE] - Wskazanie kompetencji źródłowej.
::  OLD: \kryt_gen14/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~ZZ_KOMP.seek(_b,)
|| return()
?};
_RES:=_a.get_tab(0);
_DOK:=exec('ref_buf','phr_kreatory',ZZ_KOMP.ZZ_DOK);
_typ:=exec('typ_op','phr_dane');

_loop:=_RES.first();
{!
|? _loop
|! _RES.CLS:=!exec('kryt_src','phr_dane',_RES.REF);
   _RES.REF:=exec('kryt_val','phr_dane',_RES.REF);
   _RES.put();
   _loop:=_RES.next()
!};
exec('gen_kryt','phr_kreatory',_typ,_DOK,_RES);

sel_exit()


\gb_kk_k
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego kryteria dla bieżącej kompetencji na podstawie definicji innej kompetencji.
::  OLD: \krytkomp14/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.max(MS.fld_len('ZZ_KOMP','NAZWA'),MS.fld_len('ZZ_KRYT','NAZWA'));
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa'@);

_ast:=obj_new(@.CLASS.ASSIST,
   'Kryteria doboru na podstawie kompetencji'@,
   'Czy na pewno utworzyć kryteria doboru?'@,
   'exec(\'gb_kk_k__x\',\'phr_kreatory\',.,'+$#ZZ_KOMP.ref()+')'
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);
exec('wnd_zz_kryt','phr_kreatory',_ast.CNTX);

_ast.set_display(
   "  ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
      grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
   "
);

:  wybor kompetencji
_s0:=obj_new(@.CLASS.STEP,'Wybór kompetencji, której kryteria doboru będą kopiowane'@,38);
_s0.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Kompetencje'@);
:  funkcjonalnosc
_s0.set_fml(
:  po odswiezeniu
   "  ZZ_KRYT.index('UNIQUE');
      ZZ_KRYT.prefix(ZZ_KOMP.NP_DOK,ZZ_KOMP.ZZ_DOK,exec('typ_op','phr_dane'));
      _state:=ZZ_KRYT.size();
      .cur_step().hide_act(_state,'D');
      .grp_disp(2);
      .get_step(2).set_move(_state);
      .get_step(3).set_move(_state)
   ",,
:  po obsludze
   ".grp_disp(0)"
);

:  wybor pomijanych kryteriow
_s1:=obj_new(@.CLASS.STEP,'Wskazanie kryteriów, które mają być pominięte'@,38);
_s1.set_view(ZZ_KRYT,__WND.SEL.get(ZZ_KRYT,'AST'),'Kryteria doboru'@);
:  funkcjonalnosc
_s1.set_fml(
:  po odswiezeniu
   ".cur_step().hide_act(1,'')",,
:  po obsludze
   ".grp_disp(0)"
);

_s2:=obj_new(@.CLASS.STEP,'Generowanie kryteriów doboru'@,28,0);
_s2.set_view(_res,_wnd,'Kryteria doboru'@);
:  funkcjonalnosc
_s2.set_fml(,
:  przed obsluga
   "  {? _a
      || return()
      ?};
      _not:=.CNTX.CHOICE;
      .CNTX.has_sel(ZZ_KRYT);
      _res:=.get_tab(0);
      _res.erase();
      ZZ_KRYT.cntx_psh();
      _loop:=ZZ_KRYT.first();
      {!
      |? _loop
      |! _not.blank();
         _not.REF:=ZZ_KRYT.ref();
         {? ~_not.find_rec()
         || {? ZZ_KRYT.ZZ_KRYT
            || _tree:=0;
               _res.cntx_psh();
               _res.blank();
               _res.CLS:=!ZZ_KRYT;
               _res.REF:=ZZ_KRYT.ZZ_KRYT;
               {? _res.find_rec()
               || _tree:=_res.ref()
               ?};
               _res.cntx_pop();
               {? _tree
               || _res.blank();
                  _res.TREE:=_tree;
                  _res.CLS:=!ZZ_KRYT;
                  _res.REF:=ZZ_KRYT.ref();
                  _res.add()
               ?}
            || _res.blank();
               _res.CLS:=!ZZ_KRYT;
               _res.REF:=ZZ_KRYT.ref();
               _res.add()
            ?}
         ?};
         _loop:=ZZ_KRYT.next()
      !};
      ZZ_KRYT.cntx_pop();
      .get_step(0).set_move(_res.size())
   "
);

ZZ_KOMP.cntx_psh();
ZZ_KRYT.cntx_psh();
(_ast+_s0+_s1+_s2).view_trig(0).run(_len);
ZZ_KRYT.cntx_pop();
ZZ_KOMP.cntx_pop();

:  porzadki
_ast.delete()


\gw_kk_k__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formula asystenta tworzacego kryteria dla wybranych kompetencji na podstawie definicji biezacej kompetencji.
::  OLD: \kryt_gen24/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_SRC:=exec('view_trim','phr_kreatory',_a.get_tab(0));
_loop:=_SRC.first();
{!
|? _loop
|! _SRC.CLS:=!exec('kryt_src','phr_dane',_SRC.REF);
   _SRC.REF:=exec('kryt_val','phr_dane',_SRC.REF);
   _SRC.put();
   _loop:=_SRC.next()
!};

_DOK:=sql('select DOK as REF from :_a where CLS=\'@.ZZ_KOMP\'',_a.CNTX.CHOICE);
exec('gen_kryt','phr_kreatory',exec('typ_op','phr_dane'),_DOK,_SRC);
sel_exit()


\gw_kk_k
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego kryteria dla wybranych kompetencji na podstawie definicji bieżącej kompetencji.
::  OLD: \krytkomp24/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.max(MS.fld_len('ZZ_KOMP','NAZWA'),MS.fld_len('ZZ_KRYT','NAZWA'));
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa');

_ast:=obj_new(@.CLASS.ASSIST,
   'Kryteria doboru na podstawie kompetencji'@,
   'Czy na pewno utworzyć kryteria doboru?'@,
   'exec(\'gw_kk_k__x\',\'phr_kreatory\',.)'
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);
exec('wnd_zz_kryt','phr_kreatory',_ast.CNTX);

_ast.set_display(
   "  ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
      grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
");

:  wybor kompetencji
_s0:=obj_new(@.CLASS.STEP,'Wybór kompetencji, którym przypisane będą kryteria'@,38);
_s0.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Kompetencje'@);
:  funkcjonalnosc
_s0.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .get_step(2).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",,
:  po obsludze
   ".grp_disp(2)");

:  wybor pomijanych kryteriow
_s1:=obj_new(@.CLASS.STEP,'Wskazanie kryteriów, które mają być pominięte'@,38);
_s1.set_view(ZZ_KRYT,__WND.SEL.get(ZZ_KRYT,'AST'),'Kryteria doboru'@);
:  funkcjonalnosc
_s1.set_fml(
:  po odswiezeniu
   ".cur_step().hide_act(1,'')",
:  przed obsluga
   $("ZZ_KRYT.index('UNIQUE'); ZZ_KRYT.prefix('"+ZZ_KOMP.NP_DOK+"',"+$#ZZ_KOMP.ZZ_DOK+",exec('typ_op','phr_dane'))"),
:  po obsludze
   ".grp_disp(0)");

:  podglad wyniku dzialania
_s2:=obj_new(@.CLASS.STEP,'Generowanie kryteriów doboru'@,28,0);
_s2.set_view(_res,_wnd,'Kryteria doboru'@);
:  funkcjonalnosc
_s2.set_fml(,
:  przed obsluga
   "  {? _a
      || return()
      ?};
      _kom:=.CNTX.get_sel(ZZ_KOMP);
      _not:=.CNTX.get_sel(ZZ_KRYT);
      _res:=.get_tab(0);
      _res.erase();
      _kom_loop:=_kom.first();
      {!
      |? _kom_loop
      |! _res.blank();
         _res.CLS:=_kom.CLS;
         _res.REF:=_kom.REF;
         _res.add();
         _ref:=_res.ref();
         ZZ_KRYT.cntx_psh();
         _loop:=ZZ_KRYT.first();
         {!
         |? _loop
         |! _not.blank();
            _not.REF:=ZZ_KRYT.ref();
            {? ~_not.find_rec()
            || {? ZZ_KRYT.ZZ_KRYT
               || _tree:=0;
                  _res.cntx_psh();
                  _res.blank();
                  _res.CLS:=!ZZ_KRYT;
                  _res.REF:=ZZ_KRYT.ZZ_KRYT;
                  _res.TREE:=_ref;
                  {? _res.find_rec()
                  || _tree:=_res.ref()
                  ?};
                  _res.cntx_pop();
                  {? _tree
                  || _res.blank();
                     _res.TREE:=_tree;
                     _res.CLS:=!ZZ_KRYT;
                     _res.REF:=ZZ_KRYT.ref();
                     _res.add()
                  ?}
               || _res.blank();
                  _res.CLS:=!ZZ_KRYT;
                  _res.REF:=ZZ_KRYT.ref();
                  _res.TREE:=_ref;
                  _res.add()
               ?}
            ?};
            _loop:=ZZ_KRYT.next()
         !};
         ZZ_KRYT.cntx_pop();
         _kom_loop:=_kom.next()
      !}");

ZZ_KOMP.cntx_psh();
ZZ_KRYT.cntx_psh();
:  ustaw i uruchom
(_ast+_s0+_s1+_s2).view_trig(0).run(_len);
ZZ_KRYT.cntx_pop();
ZZ_KOMP.cntx_pop();

:  porzadki
_ast.delete()


\gw_kk_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Tworzy i uruchamia asystenta generującego kryteria doboru na podstawie stanowisk.
::   WE: _a - formula asystenta
::  OLD: \krytkomp21/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.fld_len('STN','ST');
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa');

_ast:=obj_new(@.CLASS.ASSIST,
   'Kryteria doboru na podstawie stanowisk'@,
   'Czy na pewno utworzyć kryteria doboru?'@,
   'exec(\'gw_kk_s__x\',\'phr_kreatory\',.)'
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);
exec('wnd_stn','phr_kreatory',_ast.CNTX);

_ast.set_display(
   "  ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
      grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
   "
);

:  wybor kompetencji
_s0:=obj_new(@.CLASS.STEP,'Wybór kompetencji do utworzenia kryterium'@,38);
_s0.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Kompetencje'@);
:  funkcjonalnosc
_s0.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(2).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",,
:  po obsludze
   ".grp_disp(2)");

:  wybor stanowisk
_s1:=obj_new(@.CLASS.STEP,'Wybór stanowisk dla kryterium doboru'@,38,0);
_s1.set_view(STN,__WND.SEL.get(STN,'AST'),'Stanowiska'@);
:  funkcjonalnosc
_s1.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .get_step(2).hide_act(_state,'D')
   ",
:  przed obsluga
   "  STN.index('STANOZAT');
      STN.prefix('T')
   ",
:  po obsludze
   ".grp_disp(0)");

:  podglad wyniku dzialania
_s2:=obj_new(@.CLASS.STEP,'Generowanie kryteriów doboru'@,28,0);
_s2.set_view(_res,_wnd,'Kryteria doboru'@);
_s2.set_fml(,
:  przed obsluga
   "  {? _a
      || return()
      ?};
      _kom:=.CNTX.get_sel(ZZ_KOMP);
      _src:=.CNTX.get_sel(STN);
      _res:=.get_tab(0);
      _res.erase();
      _kom_loop:=_kom.first();
      {!
      |? _kom_loop
      |! _res.blank();
         _res.CLS:=_kom.CLS;
         _res.REF:=_kom.REF;
         _res.add();
         _tree:=_res.ref();
         _src_loop:=_src.first();
         {!
         |? _src_loop
         |! _res.blank();
            _res.TREE:=_tree;
            _res.CLS:=_src.CLS;
            _res.REF:=_src.REF;
            _res.add();
            _src_loop:=_src.next()
         !};
         _kom_loop:=_kom.next()
      !}");

:  ustaw i uruchom
ZZ_KOMP.cntx_psh();
STN.cntx_psh();
(_ast+_s0+_s1+_s2).view_trig(0).run(_len);
STN.cntx_pop();
ZZ_KOMP.cntx_pop();

:  porzadki
_ast.delete()


\ocenakomp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego/aktualizującego rankingi według kompetencji.
::   WE: _a [RULE] - Formuła szczegółowa asystenta.
::  OLD: \ocenakomp/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.fld_len('ZZ_KOMP','NAZWA');
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa'@);

_ast:=obj_new(@.CLASS.ASSIST,
   'Ranking na podstawie ocen kompetencji'@,
   'Czy na pewno utworzyć ranking?'@,
   $_a
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);

_ast.set_display("
   ZZ_KOMP.index('NAZWA');
   ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
   grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
");

:  wybor kompetencji
_s0:=obj_new(@.CLASS.STEP,'Wybór kompetencji, dla których tworzony będzie ranking'@,38);
_s0.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Dostępne kompetencje'@);
:  funkcjonalnosc
_s0.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ");

:  podglad wyniku dzialania
_sr:=obj_new(@.CLASS.STEP,'Przygotowanie rankingu według ocen kompetencji'@,28,0);
_sr.set_view(_res,_wnd,'Wybrane kompetencje'@);
:  funkcjonalnosc
_sr.set_fml(,
:  przed obsluga
   "  _kom:=.CNTX.get_sel(ZZ_KOMP);
      _res:=.get_tab(0);
      _res.erase();
      _loop:=_kom.first();
      {!
      |? _loop
      |! _res.blank();
         _res.CLS:=_kom.CLS;
         _res.REF:=_kom.REF;
         _res.add();
         _loop:=_kom.next()
      !}");

ZZ_KOMP.cntx_psh();
ZZ_KOMP.index('NAZWA');
ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
:  ustaw i uruchom
(_ast+_s0+_sr).view_trig(0).run(_len);
ZZ_KOMP.cntx_pop();

:  porzadki
_ast.delete()


\r_o_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego/aktualizującego dokumenty ocen.
::  OLD: \ocenaprac1/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_FORM.cntx_psh();
ZO_FORM.index('UNIQUE');
ZO_TEST.cntx_psh();
ZO_TEST.index('ZO_TEST');
ZO_TEST.prefix(ZO_PROC.ref());
_loop:=ZO_TEST.first();
{!
|? _loop
|! ZO_FORM.prefix(ZO_TEST.ref());
   _forms:=ZO_FORM.size();
   _loop:=ZO_FORM.first();
   {!
   |? _loop
   |! _forms-=(ZO_FORM.Z='T');
      _loop:=ZO_FORM.next()
   !};
   {? _forms=0
   || exec('report','phr_kreatory',ZO_TEST,'poc_ocprac1','ocena.pdf','Ocena pracownika',0,'OCPRAC-1')
   ?};
   _loop:=ZO_TEST.next()
!};
ZO_TEST.cntx_pop();
ZO_FORM.cntx_pop();
~~


\r_o_km__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego/aktualizującego ranking ocen według kompetencji.
::   WE: _a [OBJECT] - wskazanie na asystenta.
::  OLD: \ocmax1/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a.get_tab(0);
_komp:='';
{? _buf.first & ZZ_KOMP.seek(_buf.REF,)
|| _res_fml:=$('tab_tmp(1,'+
      '\'TMP\',\'STRING[16]\',\'Rekord\','+
      '\'NAZWISKO\',\'STRING['+$MS.fld_len('ZZ_OSOBA','NAZWISKO')+']\',\'Aktualne nazwisko\'@,'+
      '\'PIERWSZE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PIERWSZE')+']\',\'Pierwsze imię\'@,'+
      '\'DRUGIE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','DRUGIE')+']\',\'Drugie imię\'@,'+
      '\'PLEC\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PLEC')+']\',\'Płeć\'@,'+
      '\'PESEL\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PESEL')+']\',\'PESEL\'@,'+
      '\'UD_SKL\',\'STRING['+$MS.fld_len('UD_SKL','SYMBOL')+']\',\'Jednostka org.\'@,'+
      '\'STN\',\'STRING['+$MS.fld_len('STN','ST')+']\',\'Stanowisko\'@,'+
      '\'KS\',\'REAL\',\'Ocena uśredniona\'@,'+
      '\'K'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+form(ZZ_KOMP.NAZWA,60)+'\'@'
   );
   _fld_fml:='_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)';
   _komp+='\''+$ZZ_KOMP.ref()+'\'';
   {!
   |? _buf.next() & ZZ_KOMP.seek(_buf.REF,)
   |! _res_fml+=',\'K'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+form(ZZ_KOMP.NAZWA,60)+'\'';
      _fld_fml+=$(';_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)');
      _komp+=',\''+$ZZ_KOMP.ref+'\''
   !}
?};
{? _komp=''
|| return()
?};

_tmp:=sql(
   'select * '
   'from ZO_OCENA join ZO_TEST join ZO_OSOBA '
   'where ZO_OSOBA.ZO_PROC=:_a and ZO_OCENA.ZZ_KOMP in (:_b) and ZO_OCENA.AE>0',
   ZO_PROC.ref(),_komp
);

{? var_pres('_tmp')<>type_of(SYSLOG)
|| return()
?};

_res:=($(_res_fml+')'))();
_res.fld_attr('TMP',2);
_wnd:=_res.mk_sel('Zestawienie ocen'@,,0,,1,,,,'U','U');
_res.win_fld(_wnd,,'NAZWISKO',,,20,,,'Nazwisko'@);
_res.win_fld(_wnd,,'PIERWSZE',,,20,,,'Imię'@);
_res.win_fld(_wnd,,'UD_SKL',,,16,,,'Jednostka org.'@);
_res.win_fld(_wnd,,'STN',,,30,,,'Stanowisko'@);
_res.win_fld(_wnd,,'KS',,,-6,2,,,,'Ocena uśredniona'@,,1);
($_fld_fml)(_res,_wnd);
_res.win_act(_wnd,,'Formuła','Drukuj'@@,,,"
   exec('report','phr_kreatory',
      ZO_PROC,'poc_ocmax1','ocmax1.pdf','Zestawienie ocen'@,exec('print_preview','phr_kreatory')
   )
",,,,,,'D',,'icon=print');
_res.win_act(_wnd,,'Usuń',,,,,,,1);
_res.win_act(_wnd,,'Formuła','Excel'@@,,,"exec('excel','phr_kreatory',cur_tab(1,1),'TMP')",,,,,,'E');
_res.win_act(_wnd,,'Kolejność');

ZO_OCENA.cntx_psh();
ZO_OCENA.prefix();
_loop:=_tmp.first();
{!
|? _loop
|! {? ZO_OCENA.seek(_tmp.REFERENC,)
   || {? {? ~_res.find_key(_tmp.ZO_OSOBA)
         || _res.NAZWISKO:=ZO_OCENA.ZO_TEST().ZO_OSOBA().ZZ_OSOBA().NAZWISKO;
            _res.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
            _res.DRUGIE:=ZZ_OSOBA.DRUGIE;
            _res.PLEC:=ZZ_OSOBA.PLEC;
            _res.PESEL:=ZZ_OSOBA.PESEL;
            _res.UD_SKL:=ZO_OSOBA.UD_SKL().SYMBOL;
            _res.STN:=ZO_OSOBA.STN().ST;
            _res.TMP:=$ZO_OSOBA.ref();
            _res.add()
         || 1
         ?}
      || ($('_a.K'+($#ZO_OCENA.ZZ_KOMP)+':=_b; _a.put()'))(_res,ZO_OCENA.AE)
      ?}
   ?};
   _loop:=_tmp.next()
!};
ZO_OCENA.cntx_pop();
obj_del(_tmp);

_test:=0;
_loop:=_res.first();
{!
|? _loop
|! _sum:=0;
   _test:=1;
   {! _fld:=10 .. _res.fld_num()
   |! _sum+=_res[_fld];
      {? _res[_fld]=0
      || _test:=0
      ?}
   !};
   {? ~_test
   || _loop:=_res.del()
   || _res[9]:=(_sum/(_res.fld_num()-9))$2;
      _res.put();
      _loop:=_res.next()
   ?}
!};

_res.index(_res.ndx_tmp(,,'KS',,1));
_res.win_sel(_wnd);
_res.select();
obj_del(_res)


\r_o_km
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego/aktualizującego ranking ocen według kompetencji.
::  OLD: \ocenamax1/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ocenakomp','phr_kreatory',"exec('r_o_km__x','phr_kreatory',.)")


\r_o_ko__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Formuła asystenta tworzącego analizę różnicy między wartością oczekiwaną a uzyskaną według kompetencji.
::   WE: _a [OBJECT] - wskazanie na asystenta.
::  OLD: \ocmax2/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_cut:="{?+_a>_b||_b+_a||_a?}";
_buf:=_a.get_tab(0);
_komp:='';
{? _buf.first & ZZ_KOMP.seek(_buf.REF,)
|| _res_fml:=$('tab_tmp(1,'+
      '\'TMP\',\'STRING[16]\',\'Rekord\','+
      '\'NAZWISKO\',\'STRING['+$MS.fld_len('ZZ_OSOBA','NAZWISKO')+']\',\'Aktualne nazwisko\'@,'+
      '\'PIERWSZE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PIERWSZE')+']\',\'Pierwsze imię\'@,'+
      '\'DRUGIE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','DRUGIE')+']\',\'Drugie imię\'@,'+
      '\'PLEC\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PLEC')+']\',\'Płeć\'@,'+
      '\'PESEL\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PESEL')+']\',\'PESEL\'@,'+
      '\'UD_SKL\',\'STRING['+$MS.fld_len('UD_SKL','SYMBOL')+']\',\'Jednostka org.\'@,'+
      '\'STN\',\'STRING['+$MS.fld_len('STN','ST')+']\',\'Stanowisko\'@,'+
      '\'K'+($#ZZ_KOMP.ref)+'\',\'REAL\',\''+_cut(ZZ_KOMP.NAZWA,60)+'\'@,'+
      '\'O'+($#ZZ_KOMP.ref)+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (oczekiwana)'@,60)+'\''
   );
   _fld_fml:='_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)';
   _komp+='\''+$ZZ_KOMP.ref()+'\'';
   {!
   |? _buf.next() & ZZ_KOMP.seek(_buf.REF,)
   |! _res_fml+=
         ',\'K'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(ZZ_KOMP.NAZWA,60)+'\'@'+
         ',\'O'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (oczekiwana)',60)+'\'@';
      _fld_fml+=$(';_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)');
      _komp+=',\''+$ZZ_KOMP.ref()+'\''
   !}
?};
{? _komp=''
|| return()
?};

_tmp:=sql(
   'select * '
   'from ZO_OCENA join ZO_TEST join ZO_OSOBA '
   'where ZO_OSOBA.ZO_PROC=:_a and ZO_OCENA.ZZ_KOMP in (:_b) and ZO_OCENA.AE>0',
   ZO_PROC.ref(),_komp
);

{? var_pres('_tmp')<>type_of(SYSLOG)
|| return()
?};

_res:=($(_res_fml+')'))();
_res.fld_attr('TMP',2);
_wnd:=_res.mk_sel('Różnica między wartością oczekiwaną a uzyskaną'@,,0,,1,,,,'U','U');
_res.win_fld(_wnd,,'NAZWISKO',,,20,,,'Nazwisko'@);
_res.win_fld(_wnd,,'PIERWSZE',,,20,,,'Imię'@);
_res.win_fld(_wnd,,'UD_SKL',,,16,,,'Jednostka org.'@);
_res.win_fld(_wnd,,'STN',,,30,,,'Stanowisko'@);
($_fld_fml)(_res,_wnd);
_res.win_act(_wnd,,'Formuła','Drukuj'@@,,,"
   exec('report','phr_kreatory',
      ZO_PROC,'poc_ocmax2','ocmax2.pdf','Zestawienie ocen'@,exec('print_preview','phr_kreatory')
   )
",,,,,,,,'icon=print');
_res.win_act(_wnd,,'Usuń',,,,,,,1);
_res.win_act(_wnd,,'Formuła','Excel'@@,,,"exec('excel','phr_kreatory',cur_tab(1,1),'TMP')",,,,,,'E');
_res.win_act(_wnd,,'Kolejność');

ZO_OCENA.cntx_psh();
ZO_OCENA.prefix();
_loop:=_tmp.first();
{!
|? _loop
|! {? ZO_OCENA.seek(_tmp.REFERENC,)
   || {? {? ~_res.find_key(_tmp.ZO_OSOBA)
         || _res.NAZWISKO:=ZO_OCENA.ZO_TEST().ZO_OSOBA().ZZ_OSOBA().NAZWISKO;
            _res.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
            _res.DRUGIE:=ZZ_OSOBA.DRUGIE;
            _res.PLEC:=ZZ_OSOBA.PLEC;
            _res.PESEL:=ZZ_OSOBA.PESEL;
            _res.UD_SKL:=ZO_OSOBA.UD_SKL().SYMBOL;
            _res.STN:=ZO_OSOBA.STN().ST;
            _res.TMP:=$ZO_OSOBA.ref();
            _res.add()
         || 1
         ?}
      || ($(
            '_a.K'+($#ZO_OCENA.ZZ_KOMP)+':=_b-_c;'+
            '_a.O'+($#ZO_OCENA.ZZ_KOMP)+':=_c;'+
            '_a.put'
         ))(_res,ZO_OCENA.AE,ZO_OCENA.EX)
      ?}
   ?};
   _loop:=_tmp.next()
!};
ZO_OCENA.cntx_pop();
obj_del(_tmp);

_res.win_sel(_wnd);
_res.select();
obj_del(_res)


\r_o_ko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Formuła asystenta tworzącego analizę różnicy między wartością oczekiwaną a uzyskaną według kompetencji.
::  OLD: \ocenamax2/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ocenakomp','phr_kreatory',"exec('r_o_ko__x','phr_kreatory',.)")


\r_o_kp__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KO [12.30]
:: OPIS: Formuła asystenta tworzącego raport:
::          "Porównanie faktycznych ocen kompetencji z oceną oczekiwaną na danym stanowisku, według kompetencji".
::   WE:
::  OLD: \ocmax3/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_cut:="{?+_a>_b||_b+_a||_a?}";
_buf:=_a.get_tab(0);
_komp:='';
_stan:='';
{? _buf.first() & ZZ_KOMP.seek(_buf.REF,)
|| _res_fml:=$('tab_tmp(1,'+
      '\'TMP\',\'STRING[16]\',\'Rekord\','+
      '\'NAZWISKO\',\'STRING['+$MS.fld_len('ZZ_OSOBA','NAZWISKO')+']\',\'Aktualne nazwisko\'@,'+
      '\'PIERWSZE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PIERWSZE')+']\',\'Pierwsze imię\'@,'+
      '\'UD_SKL\',\'STRING['+$MS.fld_len('UD_SKL','SYMBOL')+']\',\'Jednostka org.\'@,'+
      '\'STN\',\'STRING['+$MS.fld_len('STN','ST')+']\',\'Stanowisko\'@,'+
      '\'K'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (uzyskana)'@,60)+'\','+
      '\'O'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (oczekiwana)'@,60)+'\''
   );
   _fld_fml:='_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1);';
   _fld_fml+='_a.win_fld(_b,,\'O'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)';
   _komp+='\''+$ZZ_KOMP.ref()+'\'';
   _stan+='\''+$STN.ref()+'\'';
   {!
   |? _buf.next()
   |!
      {? _buf.CLS='@.ZZ_KOMP' & ZZ_KOMP.seek(_buf.REF,)
      || _res_fml+=
            ',\'K'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (uzyskana)'@,60)+'\''+
            ',\'O'+($#ZZ_KOMP.ref())+'\',\'REAL\',\''+_cut(_cut(ZZ_KOMP.NAZWA,47)+' (oczekiwana)'@,60)+'\'';
         _fld_fml+=$(';_a.win_fld(_b,,\'K'+($#ZZ_KOMP.ref())+'\',,,-6,2,,,,\''+ZZ_KOMP.NAZWA+'\'@,,1)');
         _komp+=',\''+$ZZ_KOMP.ref()+'\''
      |? _buf.CLS='@.STN' & STN.seek(_buf.REF,)
      || _stan+=',\''+$STN.ref()+'\''
      ?}
   !}
?};
{? _komp='' | _stan=''
|| return()
?};

_tmp:=sql(
   'select * '
   'from ZO_OCENA join ZO_TEST join ZO_OSOBA '
   'where ZO_OSOBA.ZO_PROC=:_a and ZO_OCENA.ZZ_KOMP in (:_b) and ZO_OCENA.AE>0 and ZO_OSOBA.STN in (:_c)',
   ZO_PROC.ref(),_komp,_stan
);

{? var_pres('_tmp')<>type_of(SYSLOG)
|| return()
?};

_res:=($(_res_fml+')'))();
_res.fld_attr('TMP',2);
_wnd:=_res.mk_sel('Porównanie wartości uzyskanej i oczekiwanej'@,,0,,1,,,,'U','U');
_res.win_fld(_wnd,,'NAZWISKO',,,20,,,'Nazwisko'@);
_res.win_fld(_wnd,,'PIERWSZE',,,20,,,'Imię'@);
_res.win_fld(_wnd,,'UD_SKL',,,16,,,'Jednostka org.'@);
_res.win_fld(_wnd,,'STN',,,30,,,'Stanowisko'@);
($_fld_fml)(_res,_wnd);
_res.win_act(_wnd,,'Formuła','Zapisz'@@,,,"exec('save_file','phr_kreatory',cur_tab(1,1),',TMP,')",,,,,,'Z');
_res.win_act(_wnd,,'Formuła','Excel'@@,,,"exec('excel','phr_kreatory',cur_tab(1,1),'TMP')",,,,,,'E');
_res.win_act(_wnd,,'Szukaj');
_res.win_act(_wnd,,'Kolejność');

ZO_OCENA.cntx_psh();
ZO_OCENA.prefix();
_loop:=_tmp.first();
{!
|? _loop
|! {? ZO_OCENA.seek(_tmp.REFERENC,)
   || {? {? ~_res.find_key(_tmp.ZO_OSOBA)
         || _res.NAZWISKO:=ZO_OCENA.ZO_TEST().ZO_OSOBA().ZZ_OSOBA().NAZWISKO;
            _res.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
            _res.UD_SKL:=ZO_OSOBA.UD_SKL().SYMBOL;
            _res.STN:=ZO_OSOBA.STN().ST;
            _res.TMP:=$ZO_OSOBA.ref();
            _res.add()
         || 1
         ?}
      || ($(
            '_a.K'+($#ZO_OCENA.ZZ_KOMP)+':=_b;'+
            '_a.O'+($#ZO_OCENA.ZZ_KOMP)+':=_c;'+
            '_a.put'
         ))(_res,ZO_OCENA.AE,ZO_OCENA.EX)
      ?}
   ?};
   _loop:=_tmp.next()
!};
ZO_OCENA.cntx_pop();
obj_del(_tmp);

_res.win_sel(_wnd);
_res.select();
obj_del(_res)


\r_o_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KO [12.30]
:: OPIS: Formuła asystenta tworzącego raport:
::          "Porównanie faktycznych ocen kompetencji z oceną oczekiwaną na danym stanowisku, według kompetencji".
::   WE:
::   WY:
::  OLD: \ocenamax3/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_len:=MS.fld_len('STN','ST');
_res:=exec('view_tab','phr_kreatory',_len);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa'@);

_ast:=obj_new(@.CLASS.ASSIST,
   'Porównanie ocen kompetencji na podstawie stanowisk'@,
   'Czy na pewno utworzyć porównanie?'@,
   'exec(\'r_o_kp__x\',\'phr_kreatory\',.)'
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);
exec('wnd_stn','phr_kreatory',_ast.CNTX);

_ast.set_display("
   ZZ_KOMP.index('NAZWA');
   ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
   grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
");

:  wybór kompetencji
_s0:=obj_new(@.CLASS.STEP,'Wybór kompetencji do utworzenia porównania ocen'@,38);
_s0.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Kompetencje'@);
:  funkcjonalność
_s0.set_fml(
:  po odświeżeniu
   "  _state:=.CNTX.has_sel();
      .get_step(2).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",
:  przed obsługą
   "  ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST)
   "
   ,
:  po obsłudze
   ".grp_disp(2)");

:  wybór stanowisk
_s1:=obj_new(@.CLASS.STEP,'Wybór stanowisk do utworzenia porównania ocen'@,38,0);
_s1.set_view(STN,__WND.SEL.get(STN,'AST'),'Stanowiska'@);
:  funkcjonalność
_s1.set_fml(
:  po odświeżeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .get_step(2).hide_act(_state,'D')
   ",
:  przed obsługą
   "  STN.index('STANOZAT');
      STN.prefix('T')
   ",
:  po obsłudze
   ".grp_disp(0)");

:  podgląd wyniku dzialania
_s2:=obj_new(@.CLASS.STEP,'Generowanie porównania ocen'@,28,0);
_s2.set_view(_res,_wnd,'Oceny'@);
_s2.set_fml(,
:  przed obsługą
   "  {? _a
      || return()
      ?};
      _kom:=.CNTX.get_sel(ZZ_KOMP);
      _src:=.CNTX.get_sel(STN);
      _res:=.get_tab(0);
      _res.erase();
      _kom_loop:=_kom.first();
      {!
      |? _kom_loop
      |! _res.blank();
         _res.CLS:=_kom.CLS;
         _res.REF:=_kom.REF;
         _res.add();
         _tree:=_res.ref();
         _src_loop:=_src.first();
         {!
         |? _src_loop
         |! _res.blank();
            _res.TREE:=_tree;
            _res.CLS:=_src.CLS;
            _res.REF:=_src.REF;
            _res.add();
            _src_loop:=_src.next()
         !};
         _kom_loop:=_kom.next()
      !}");

:  ustaw i uruchom
STN.cntx_psh();
(_ast+_s0+_s1+_s2).view_trig(0).run(_len);
STN.cntx_pop();
:  porządki
_ast.delete()


\gn_ue_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę oceniających procesu.
::  OLD: \form21/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_stn','phr_kreatory',"exec('gn_ue_s','phr_kreatory',.)")
|| exec('form_stn_gen','phr_kreatory',_a.get_tab(0),'E',ZO_PROC.ref());
   sel_exit()
?}


\form_stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta tworzącego/aktualizującego listę uczestników procesu.
::   WE: _a - formula asystenta
::  OLD: \form_stn/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_stn','phr_kreatory',_a,
   'Lista uczestników na podstawie stanowisk'@,'Czy na pewno utworzyć listę uczestników?'@,
   'Wybór stanowisk dla kryterium doboru'@,'Stanowiska'@,
   'Generowanie kryteriów doboru'@,'Kryteria doboru'@
)


\form_stn_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Uzupełnia listę uczestników procesu.
::   WE: _a - alias do wyniku asystenta
::       _b - rodzaj danych: E - oceniajacy, O - oceniany
::       _c - wskazanie na proces
::  OLD: \form_stn_gen/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_zd:=date(0,0,0);
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_c)
|| _dt:=ZO_PROC.DATA
|| _dt:=date(0,0,0)
?};
_a.index(_a.ndx_tmp(,,'CLS',,,'REF',,));
_a.prefix(!STN);
H.cntx_psh();
P.cntx_psh();
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));
_loop:=P.first();
{!
|? _loop
|! {? exec('test_zatr','phr_dane',_dt)
   || H.index('_HISTKOD');
      H.prefix(P.ref,'Z');
      {? H.find_le(_dt) & (_dt<=H.DO | H.DO=_zd) & _a.find_key(#H.ST)
      || {? (_osoba:=exec('zo_osoba_p','phr_dane',ZO_PROC.ref,_b)) & _b='O'
         || exec('zo_form_test','phr_dane',_osoba)
         ?}
      ?}
   ?};
   _loop:=P.next()
!};
P.cntx_pop();
H.cntx_pop();
ZO_PROC.cntx_pop()


\gn_ue_j
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę oceniajacych procesu.
::  OLD: \form22/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_skl','phr_kreatory',"exec('gn_ue_j','phr_kreatory',.)")
|| exec('form_skl_gen','phr_kreatory',_a.get_tab(0),'E',ZO_PROC.ref());
   sel_exit
?}


\form_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę oceniajacych procesu.
::   WE: _a - formula asystenta
::  OLD: \form_skl/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_skl','phr_kreatory',_a,
   'Lista uczestników na podstawie jednostek organizacyjnych'@,'Czy na pewno utworzyć listę uczestników?'@,
   'Wybór jednostek dla kryterium doboru'@,'Jednostki organizacyjne'@,
   'Generowanie kryteriów doboru'@,'Kryteria doboru'@
)


\form_skl_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę oceniajacych procesu.
::   WE: _a - alias do wyniku asystenta
::       _b - rodzaj danych: E - oceniajacy, O - oceniany
::       _c - wskazanie na proces
::  OLD: \form_skl_gen/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_zd:=date(0,0,0);
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_c)
|| _dt:=ZO_PROC.DATA
|| _dt:=date(0,0,0)
?};
_a.index(_a.ndx_tmp(,,'CLS',,,'REF',,));
_a.prefix(!UD_SKL);
H.cntx_psh();
P.cntx_psh();
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));
_loop:=P.first();
{!
|? _loop
|! {? exec('test_zatr','phr_dane',_dt)
   || H.index('_HISTKOD');
      H.prefix(P.ref,'Z');
      {? H.find_le(_dt) & (_dt<=H.DO | H.DO=_zd) & _a.find_key(#H.WYDZIAL)
      || {? (_osoba:=exec('zo_osoba_p','phr_dane',ZO_PROC.ref(),_b)) & _b='O'
         || exec('zo_form_test','phr_dane',_osoba)
         ?}
      ?}
   ?};
   _loop:=P.next()
!};
P.cntx_pop();
H.cntx_pop();
ZO_PROC.cntx_pop()


\gn_ue_sj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę oceniających procesu.
::  OLD: \form23/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_jst','phr_kreatory',"exec('gn_ue_sj','phr_kreatory',.)")
|| exec('form_jst_gen','phr_kreatory',_a.get_tab(0),'E',ZO_PROC.ref());
   sel_exit
?}


\form_jst_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Uzupelnia listę uczestników procesu.
::   WE: _a - alias do wyniku asystenta
::       _b - rodzaj danych: E - oceniajacy, O - oceniany
::       _c - wskazanie na proces
::  OLD: \form_jst_gen/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_zd:=date(0,0,0);
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_c)
|| _dt:=ZO_PROC.DATA
|| _dt:=date(0,0,0)
?};
_a.index(_a.ndx_tmp(,,'CLS',,,'REF',,));
H.cntx_psh();
P.cntx_psh();
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));

_loop:=P.first();
{!
|? _loop
|! {? exec('test_zatr','phr_dane',_dt)
   || H.index('_HISTKOD');
      H.prefix(P.ref,'Z');
      {? H.find_le(_dt) & (_dt<=H.DO | H.DO=_zd) &
         _a.find_key(!STN,#H.ST) & _a.find_key(!UD_SKL,#H.WYDZIAL)
      || {? (_osoba:=exec('zo_osoba_p','phr_dane',ZO_PROC.ref,_b)) & _b='O'
         || exec('zo_form_test','phr_dane',_osoba)
         ?}
      ?}
   ?};
   _loop:=P.next()
!};
P.cntx_pop();
H.cntx_pop();
ZO_PROC.cntx_pop()


\gn_ue_zsj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę formularzy na podstawie Struktury organizacyjnej dla
::       zależności służbowych.
::   WE: _a - wskazanie na asystenta
::  OLD: \form31/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_jst','phr_kreatory',"exec('gn_ue_zsj','phr_kreatory',.)")
|| exec('form31_gen','phr_kreatory',_a);
   sel_exit
?}


\form_jst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Tworzy i uruchamia asystenta tworzącego/aktualizującego listę uczestnikow procesu.
::   WE: _a - formula asystenta
::  OLD: \form_jst/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
exec('asst_jst','phr_kreatory',_a,
   'Lista uczestników na podstawie struktury zatrudnienia'@,'Czy na pewno utworzyć listę uczestników?'@,
   'Wybór stanowisk w jednostkach'@,'Stanowiska w jednostkach organizacyjnych'@,
   'Generowanie listy uczestników'@,'Kryteria doboru'@
)


\form31_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formula asystenta tworzacego/aktualizujacego listę formularzy na podstawie Struktury organizacyjnej dla
::       zależności służbowych.
::   WE: _a - wskazanie na asystenta
::  OLD: \form31_gen/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
: tresc zapytania pobierajacego wskazania na wszystkie rekordy z tabeli ZO_TEST powiazane z procesem ocen
_query:='select ZO_TEST.REFERENCE as REF from ZO_TEST join ZO_OSOBA where ZO_OSOBA.ZO_PROC=:_a';
_proc:=ZO_PROC.ref();
_len:=60;

: pobierz listę wskazań na zapisy w ZO_TEST przed dołączeniem ocenianych, wygeneruj listę ocenianych zgodnie z danymi
: asystenta, pobierz ponownie listę wskazań na rekordy z ZO_TEST (uzupełniona o nowe zapisy)
progress(,form('Uzupełnienie listy ocenianych...'@,_len),FUN.TYT,1);
_prev:=sql(_query,_proc);
exec('form_jst_gen','phr_kreatory',_a.get_tab(0),'O',_proc);
_curr:=sql(_query,_proc);

: jeśli któreś z zapytań o listę rekordow (przed lub po dopisaniu uczestników) nie powiodło się, to zakończ działanie
{? var_pres('_prev')<>type_of(SYSLOG)
|| prgs_clr();
   return()
|? var_pres('_curr')<>type_of(SYSLOG)
|| obj_del(_prev);
   prgs_clr();
   return()
?};

: utworz liste wskazan na zapisy w ZO_TEST utworzone przez form_jst_gen
_buff:=sql('select REF from :_a except select REF from :_b',_curr,_prev);
: usun zbedne tabele
obj_del(_prev);
obj_del(_curr);
: zakoncz dzialanie jesli zapytanie nie powiodlo sie
{? var_pres('_buff')<>type_of(SYSLOG)
|| prgs_clr();
   return()
?};

: tabela pomocnicza dla generowania
_LINK:=exec('links_tab','phr_dane');
: ustal wskazania na typy ocen
_typ_op:=exec('typ_op','phr_dane');
_typ_ps:=exec('typ_ps','phr_dane');
_typ_pb:=exec('typ_pb','phr_dane');

: zachowaj konteksy wszystkich tabel, dla ktorych zmieniany jest klucz porzadkujacy i dziedzina
exec('for_each','phr_tab',"_a.cntx_psh",ZO_TEST,ZO_FORM,ZO_KOMP,ZO_OSTYP,ZZ_KRYT,ZZ_KOMP,ZZ_PROFT,ZZ_PROFO,P);

ZO_TEST.prefix();
_loop:=_buff.first();
: przegladaj nowe oceny
progress(,form('Uzupełnienie listy oceniających...'@,_len),FUN.TYT,1);
{!
|? _loop
|! {? ZO_TEST.seek(_buff.REF)
   || P.index('ZZ_DOK');
      P.prefix();
:     znajdz pracownika wlasciwego dla oceny
      _x_dok:=ZO_TEST.ZZ_OSOBA().ZZ_LINK;
      {? P.find_key(ref_name(_x_dok),_x_dok)
      ||
:        dla samooceny uzupelnij liste oceniajacych o pracownika
         exec('proc_links','phr_dane',_proc,ZO_TEST.ref(),_typ_ps,_LINK);
:        ustal przelozonego na podstawie zaleznosci sluzbowych
         _szef:=exec('prac_nad','stanprac',P.ref(),0);
         {? _szef.first() & P.seek(_szef.P,)
         ||
:           uzupelnij liste oceniajacych o bezposredniego przelozonego
            exec('proc_links','phr_dane',_proc,ZO_TEST.ref(),_typ_pb,_LINK)
         ?};
         obj_del(_szef)
      ?}
   ?};
   _loop:=_buff.next()
!};

_loop:=_LINK.first();
: przegladaj powiazania ocenianych i oceniajacych
progress(,form('Tworzenie formularzy ocen...'@,_len),FUN.TYT,1);
{!
|? _loop
|! _test:=0;
   ZO_FORM.index('UNIQUE');
   ZO_FORM.prefix();
   ZO_OSTYP.prefix();
:  ustal ocene i typ oceniajacego a nastepnie sprawdz, czy istnieje dla nich odpowiedni formularz ocen
   {? ZO_TEST.seek(_LINK.PROF,) & ZO_OSTYP.seek(_LINK.R,) & ZO_FORM.find_key(ZO_TEST.ref(),ZO_OSTYP.ref())
   ||
:     formlarz juz istnieje
      _test:=1
   ||
:     utworz formularz
      ZO_FORM.blank(1);
      ZO_FORM.ZO_TEST:=ZO_TEST.ref();
      ZO_FORM.ZO_OSTYP:=ZO_OSTYP.ref();
      ZO_FORM.Z:='N';
      _test:=ZO_FORM.add()
   ?};
   {? _test ||
:     uzupelnij formularz
      ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
      _loop:=ZZ_KOMP.first();
:     przegladaj kompetencje
      {!
      |? _loop
      |! _profk:=exec('get_profk','phr_dane',ZZ_KOMP.ZZ_DOK,ZZ_KOMP.ref());
         ZZ_KRYT.index('UNIQUE');
:        tylko kryteria domyslne kompetencji
         ZZ_KRYT.prefix(ref_name(ZZ_KOMP.ZZ_DOK),ZZ_KOMP.ZZ_DOK,_typ_op);
         _loop:=ZZ_KRYT.first();
:        przegladaj kryteria
         {!
         |? _loop
         |! ZZ_PROFT.index('UNIQUE');
:           tylko typy ocen kompetencji
            ZZ_PROFT.prefix(ref_name(ZZ_KOMP.ZZ_DOK),ZZ_KOMP.ZZ_DOK);
:           czy ocena spelnia kryterium i czy dla kompetencji okreslony zostal typ oceny?
            {? ZO_TEST.STN=exec('kryt_val','phr_dane') & ZZ_PROFT.find_key(ZO_OSTYP.ZZ_TYP)
            || ZO_KOMP.index('UNIQUE');
               ZO_KOMP.prefix(ZO_FORM.ref());
:              uzupelnij, jesli brakuje oceny
               {? ~ZO_KOMP.find_key(ZZ_KOMP.ref())
               || ZO_KOMP.blank(1);
                  ZO_KOMP.ZO_FORM:=ZO_FORM.ref();
                  ZO_KOMP.ZZ_KOMP:=ZZ_KOMP.ref();
                  ZO_KOMP.W_TYP:=ZZ_PROFT.WAGA;
                  ZO_KOMP.W_KOMP:=ZZ_KOMP.WAGA;
                  {? ZO_KOMP.add()
                  || ZZ_PROFO.index('UNIQUE');
                     ZZ_PROFO.prefix(_profk,ZZ_PROFT.ref());
                     _loop:=ZZ_PROFO.first();
:                    przegladaj metody oceny
                     {!
                     |? _loop
                     |! exec('nota_create','phr_dane',ZO_KOMP.ref(),ZZ_PROFO.ZZ_MET);
                        _loop:=ZZ_PROFO.next()
                     !}
                  ?}
               ?}
            ?};
            _loop:=ZZ_KRYT.next()
         !};
         _loop:=ZZ_KOMP.next()
      !}
   ?};
   _loop:=_LINK.next()
!};

: odtworz konteksy wszystkich tabel, dla ktorych zmieniany byl klucz porzadkujacy i dziedzina
exec('for_each','phr_tab',"_a.cntx_pop",ZO_TEST,ZO_FORM,ZO_KOMP,ZO_OSTYP,ZZ_KRYT,ZZ_KOMP,ZZ_PROFT,ZZ_PROFO,P);

: porzadki
obj_del(_buff);

: porzadkownie listy osob
exec('proc_s4','phr_dane',ZO_PROC.ref);

prgs_clr()


\gn_uo_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę ocenianych procesu.
::  OLD: \form11/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_stn','phr_kreatory',"exec('gn_uo_s','phr_kreatory',.)")
|| exec('form_stn_gen','phr_kreatory',_a.get_tab(0),'O',ZO_PROC.ref());
   sel_exit
?}


\gn_uo_j
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę ocenianych procesu.
::  OLD: \form12/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_skl','phr_kreatory',"exec('gn_uo_j','phr_kreatory',.)")
|| exec('form_skl_gen','phr_kreatory',_a.get_tab(0),'O',ZO_PROC.ref());
   sel_exit
?}


\gn_uo_sj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta tworzącego/aktualizującego listę ocenianych procesu.
::  OLD: \form13/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_
|| exec('form_jst','phr_kreatory',"exec('gn_uo_sj','phr_kreatory',.)")
|| exec('form_jst_gen','phr_kreatory',_a.get_tab(0),'O',ZO_PROC.ref());
   sel_exit
?}


\gb_mo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego typy i metody oceny dla bieżącej kompetencji.
::  OLD: \kompmet11/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| exec('met_gen','phr_kreatory',ZZ_KOMP.ref(),_a.get_tab(0));
   sel_exit();
   return()
?};

_ast:=obj_new(@.CLASS.ASSIST,
   'Typy i metody oceny dla bieżącej kompetencji'@,
   'Czy na pewno utworzyć typy i metody oceny?'@,
   'exec(\'gb_mo\',\'phr_kreatory\',.)'
);
_ast.set_display("
   _typ:='';
   _met:='';
   ZZ_TYP.cntx_psh();
   ZZ_TYP.index('KOD');
   ZZ_TYP.prefix(ZZ_POM.MODUL);
   _loop:=ZZ_TYP.first();
   {!
   |? _loop
   |! {? ZZ_TYP.KOD<>'OP'
      || _typ+=ZZ_TYP.KOD+','
      ?};
      _loop:=ZZ_TYP.next()
   !};
   ZZ_TYP.cntx_pop();
   ZZ_MET.cntx_psh();
   ZZ_MET.index('KOD');
   ZZ_MET.prefix();
   _loop:=ZZ_MET.first();
   {!
   |? _loop
   |! _met+=ZZ_MET.KOD+',';
      _loop:=ZZ_MET.next()
   !};
   ZZ_MET.cntx_pop();
   {? _typ<>''
   || _typ:=_typ-1
   ?};
   {? _met<>''
   || _met:=_met-1
   ?};
   exec('typ_met','phr_kreatory',.,1,_typ,_met)
");

_len:=50;

_par:=exec('check_tab','phr_kreatory',_len);
_so:=obj_new(@.CLASS.STEP,'Opcje procesu tworzenia typów i metod oceny'@,38);
_so.set_view(_par,_par.win_sel('?'),'Parametry'@);
_so.set_fml(,,".grp_disp(0)");

_res:=exec('view_tab','phr_kreatory');
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa'@);
_sr:=obj_new(@.CLASS.STEP,'Generowanie typów i metod oceny'@,28);
_sr.set_view(_res,_wnd,'Typy i metody oceny'@);
:  funkcjonalnosc
_sr.set_fml(,
:  przed obsluga
   "  {? _a
      || return()
      ?};
      exec('met_copy','phr_kreatory',.get_tab(1),.get_tab(0))
   ");

(_ast+_so+_sr).run(_len);

_ast.delete()


\gw_mo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzacągo typy i metody oceny dla wybranych kompetencji.
::  OLD: \kompmet21/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? _
|| _buf:=exec('view_tab','phr_kreatory',80);
   exec('met_copy','phr_kreatory',_a.get_tab(2),_buf);
   ZZ_KOMP.cntx_psh();
   ZZ_KOMP.prefix();
   _sel:=_a.CNTX.get_sel(ZZ_KOMP);
   _loop:=_sel.first();
   {!
   |? _loop
   |! {? ZZ_KOMP.seek(_sel.REF,)
      || exec('met_gen','phr_kreatory',ZZ_KOMP.ref(),_buf)
      ?};
      _loop:=_sel.next()
   !};
   ZZ_KOMP.cntx_pop();
   obj_del(_buf);
   sel_exit();
   return()
?};

_ast:=obj_new(@.CLASS.ASSIST,
   'Typy i metody oceny dla wybranych kompetencji'@,
   'Czy na pewno utworzyć typy i metody oceny?'@,
   'exec(\'gw_mo\',\'phr_kreatory\',.)'
);

exec('wnd_zz_komp','phr_kreatory',_ast.CNTX);

_ast.set_display("
   _typ:='';
   _met:='';
   ZZ_TYP.cntx_psh();
   ZZ_TYP.index('KOD');
   ZZ_TYP.prefix(ZZ_POM.MODUL);
   _loop:=ZZ_TYP.first();
   {!
   |? _loop
   |! {? ZZ_TYP.KOD<>'OP'
      || _typ+=ZZ_TYP.KOD+','
      ?};
      _loop:=ZZ_TYP.next()
   !};
   ZZ_TYP.cntx_pop();
   ZZ_MET.cntx_psh();
   ZZ_MET.index('KOD');
   ZZ_MET.prefix();
   _loop:=ZZ_MET.first();
   {!
   |? _loop
   |! _met+=ZZ_MET.KOD+',';
      _loop:=ZZ_MET.next()
   !};
   ZZ_MET.cntx_pop();
   {? _typ<>''
   || _typ:=_typ-1
   ?};
   {? _met<>''
   || _met:=_met-1
   ?};
   exec('typ_met','phr_kreatory',.,2,_typ,_met);
   ZZ_KOMP.index('NAZWA');
   ZZ_KOMP.prefix(ZZ_POM.ZZ_HIST);
   grp_disp(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),1)
");

:  wybor kompetencji
_sk:=obj_new(@.CLASS.STEP,'Wybór kompetencji, którym przypisane będą typy i metody oceny'@,38);
_sk.set_view(ZZ_KOMP,__WND.SEL.get(ZZ_KOMP,'AST'),'Kompetencje'@);
:  funkcjonalnosc
_sk.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .get_step(2).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ",,
:  po obsludze
   ".grp_disp(0)");

_len:=80;

_par:=exec('check_tab','phr_kreatory',_len);
_so:=obj_new(@.CLASS.STEP,'Opcje procesu tworzenia typów i metod oceny'@,38);
_so.set_view(_par,_par.win_sel('?'),'Parametry'@);
_so.set_fml(,,".grp_disp(0)");

_res:=exec('view_tab','phr_kreatory');
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,_len,'Nazwa');
_sr:=obj_new(@.CLASS.STEP,'Generowanie typów i metod oceny'@,28);
_sr.set_view(_res,_wnd,'Typy i metody oceny');
:  funkcjonalnosc
_sr.set_fml(,
:  przed obsluga
   "  {? _a
      || return()
      ?};
      _buf:=.get_tab(2);
      _res:=.get_tab(0);
      _res.erase();
      _buf.cntx_psh();
      _sel:=.CNTX.get_sel(ZZ_KOMP);
      _loop:=_sel.first();
      {!
      |? _loop
      |! _loop:=_buf.first();
         _res.blank(1);
         _res.CLS:=_sel.CLS;
         _res.REF:=_sel.REF;
         _res.add();
         _komp:=_res.ref();
         {!
         |? _loop
         |! {? ~_buf.TREE & _buf.SET>0
            || _res.blank(1);
               _res.TREE:=_komp;
               _res.CLS:=_buf.CLS;
               _res.REF:=_buf.REF;
               _buf.cntx_psh();
               _buf.prefix(_buf.ref());
               {? _buf.first()
               || _res.add();
                  _test:=0;
                  _tree:=_res.ref();
                  {!
                  |? {? _buf.SET>0
                     || _res.TREE:=_tree;
                        _res.CLS:=_buf.CLS;
                        _res.REF:=_buf.REF;
                        _test:=1;
                        _res.add()
                     ?};
                     _buf.next()
                  !};
                  {? ~_test
                  || _res.del()
                  ?}
               ?};
               _buf.cntx_pop()
            ?};
            _loop:=_buf.next()
         !};
         _loop:=_sel.next()
      !};
      _buf.cntx_pop();
      _res.first()
   ");

(_ast+_sk+_so+_sr).view_trig(0).run(_len);

_ast.delete()


\form_fix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła asystenta usuwającego niejednoznaczności w wyborze formularzy.
::  OLD: \form_fix/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:='FFIXT';
{? (_wnd:=__WND.SEL.get(ZO_TEST,_acr))=''
|| _wnd:=ZO_TEST.mk_sel('Oceniani'@,'P',0,__WND.id(ZO_TEST,_acr),,,,,'U','T');
   __WND.SEL.put(ZO_TEST,_acr,_wnd);

   ZO_TEST.win_fld(_wnd,,'ZZ_OSOBA','NAZWISKO',,20,,,'Nazwisko'@,,
      exec('fldComment','#field',ZZ_OSOBA,'NAZWISKO')
   );
   ZO_TEST.win_fld(_wnd,,'ZZ_OSOBA','PIERWSZE',,20,,,'Imię'@,,
      exec('fldComment','#field',ZZ_OSOBA,'PIERWSZE')
   );
   ZO_TEST.win_fld(_wnd,,'UD_SKL','SYMBOL',,-16,,,'Jednostka organizacyjna'@,,
      exec('fldComment','#field',UD_SKL,'SYMBOL')
   );
   ZO_TEST.win_fld(_wnd,,'STN','ST',,23,,,'Stanowisko'@,,
      exec('fldComment','#field',STN,'ST')
   );
   ZO_TEST.win_fld(_wnd,,'L_FORM',,,-3,,,'Liczba formularzy'@,,
      exec('fldComment','#field',ZO_TEST,'L_FORM')
   );

   ZO_TEST.win_act(_wnd,0,'Formuła','Ustaw'@@,,
      'Ustawienie jako poprawny wskazany formularz'@,
      "exec('form_fix_ab','phr_kreatory')",
      "exec('form_fix_aa','phr_kreatory')",
      1,
      1,
      "exec('form_fix_gb','phr_kreatory')",
      "exec('form_fix_ga','phr_kreatory')",
      'U'
   );
   ZO_TEST.win_act(_wnd,0,'Wyświetl',,,,,"exec('zo_osoba_xxx_ad','poc')");
   ZO_TEST.win_act(_wnd,0,'Kolejność')
?};

_acr:='FFIXW';
{? (_wnd:=__WND.SEL.get(ZF_WYK,_acr))=''
|| _wnd:=ZF_WYK.mk_sel('Wykorzystywane formularze'@,'N',0,__WND.id(ZF_WYK,_acr),,,,,'U','T');
   __WND.SEL.put(ZF_WYK,_acr,_wnd);

   ZF_WYK.win_fld(_wnd,,'AUTO',,,8,,,,,
      exec('fldComment','#field',ZF_WYK,'AUTO'),
      2,,"'T'","'N'"
   );
   ZF_WYK.win_fld(_wnd,,'OK',,,8,,,,,
      exec('fldComment','#field',ZF_WYK,'OK'),
      2,,"'T'","'N'"
   );
   ZF_WYK.win_fld(_wnd,,'ZF_DEF','NAZWA','NAZWA',65,,,'Nazwa'@,,
      exec('fldComment','#field',ZF_DEF,'NAZWA')
   );

   ZF_WYK.win_act(_wnd,1,'Dołącz',,,,,"exec('form_fix_ma','phr_kreatory'); 0",1);
   ZF_WYK.win_act(_wnd,1,'Rekord',,,,,"exec('zf_wyk_chk','phr_zf_tab',0)");
   ZF_WYK.win_act(_wnd,1,'Okienko',,,,"exec('zf_wyk_bo','phr_widok')","exec('zf_wyk_ao','phr_widok')");
   ZF_WYK.win_act(_wnd,0,'Dołącz',,,,,"exec('form_fix_ma','phr_kreatory'); 0");
   ZF_WYK.win_act(_wnd,0,'Popraw',,,,,"exec('form_fix_ma','phr_kreatory')");
   ZF_WYK.win_act(_wnd,0,'Formuła','Usuń'@@,,,
      "exec('zz_xxx_usun_b','phr_widok')",
      "exec('zz_xxx_usun_a','phr_widok')",,1,
      "exec('zz_xxx_usun_bg','phr_widok')",
      "exec('zz_xxx_usun_ag','phr_widok')",
      'U'
   );
   ZF_WYK.win_act(_wnd,0,'Formuła','Zmień'@@,,,
      "  ZF_WYK.OK:={? ZF_WYK.OK='T' || 'N' || 'T' ?};
         ZF_WYK.put()
      ",
      "exec('form_fix_ma','phr_kreatory')",
      1,,,,'Z'
   );
   ZF_WYK.win_act(_wnd,0,'Rekord',,,,,"exec('zf_wyk_chk','phr_zf_tab',-menu_txt()='popraw')");
   ZF_WYK.win_act(_wnd,0,'Okienko',,,,"exec('zf_wyk_bo','phr_widok')","exec('zf_wyk_ao','phr_widok')");
   ZF_WYK.win_act(_wnd,0,'Szukaj');
   ZF_WYK.win_act(_wnd,0,'Kolejność');
   ZF_WYK.win_btn(_wnd,'text=%1,panel=right,align=begin'['Dołącz'@],'menu:D');
   ZF_WYK.win_btn(_wnd,'text=%1,panel=right,align=begin'['Popraw'@],'menu:P',,,,,,'noempty');
   ZF_WYK.win_btn(_wnd,'text=%1,panel=right,align=begin'['Usuń'@],'menu:U',,,,,,'noempty')
?};

_acr:='FFIX';
{? (_wnd:=__WND.SEL.get(ZO_TEST,_acr))=''
|| _wnd:=ZO_TEST.grp_make('Formularze ocen',
:     po wyświetleniu
      "",
:     identyfikator
      __WND.id(ZO_TEST,_acr),
:     położenie
      0,0,
:     zamknięcie
   );
   __WND.SEL.put(ZO_TEST,_acr,_wnd);

:  oceniani
   ZO_TEST.grp_sel(_wnd,ZO_TEST,__WND.SEL.get(ZO_TEST,'FFIXT'),,
:     po odświeżeniu
      "grp_disp(ZF_WYK,__WND.SEL.get(ZF_WYK,'FFIXW'))",
:     położenie i wysokość
      ,,20,
:     przed obsługą
      "",
:     po obsłudze
      "",
:     utrwalenie, aktywacja, wypełnienie
      0,0,'maximized_with_title'
   );
   ZO_TEST.grp_splt(_wnd,,'horizontal','bottom');

:  wykorzystywane formularze
   ZO_TEST.grp_sel(_wnd,ZF_WYK,__WND.SEL.get(ZF_WYK,'FFIXW'),,
:     po odświeżeniu
      "",
:     położenie i wysokość
      ,,,
:     przed obsługą
      "  {? grp_empty(ZO_TEST,__WND.SEL.get(ZO_TEST,'FFIXT'))
         || return('#disable')
         ?};
         _dok:=ZO_TEST.ZZ_DOK;
         ZF_WYK.prefix(ref_name(_dok),_dok)
      ",
:     po obsłudze
      "",
:     utrwalenie, aktywacja, wypełnienie
      0,0,'maximized_with_title'
   )
?};

ZO_TEST.cntx_psh();
ZO_TEST.clear();
ZO_TEST.f_set(,
   'join ZO_OSOBA using (ZO_TEST.ZO_OSOBA,ZO_OSOBA.REFERENCE)',
   'ZO_OSOBA.ZO_PROC=:_a and ZO_TEST.L_FORM<>1',
   ZO_PROC.ref()
);

_org:=ZF_WYK.fld_fml('ZZ_LINK','BLANK',"ZO_TEST.ZZ_DOK");
__WND.select(ZO_TEST,'FFIX');
_org:=ZF_WYK.fld_fml('ZZ_LINK','BLANK',_org);

ZO_TEST.f_clear();
ZO_TEST.cntx_pop()


\form_fix_ab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed akcją USTAW okienka asystenta usuwającego niejednoznaczności w wyborze formularzy.
::  OLD: \form_fix_ab/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size()
|| {? ~exec('form_fix_gb','phr_kreatory')
   || return(0)
   ?}
?};

_def:=ZF_DEF.ref();
_dok:=ZO_TEST.ZZ_DOK;
ZF_WYK.cntx_psh;
ZF_WYK.index('UNIQUE');
ZF_WYK.prefix(ref_name(_dok),_dok);
_loop:=ZF_WYK.first();
_exists:=0;
{!
|? _loop
|! ZF_WYK.OK:={? ZF_WYK.ZF_DEF=_def || _exists:=1; 'T' || 'N' ?};
   ZF_WYK.put();
   _loop:=ZF_WYK.next()
!};
{? ~_exists
|| ZF_WYK.blank();
   ZF_WYK.ZF_DEF:=_def;
   ZF_WYK.OK:='T';
   ZF_WYK.add(1)
?};
ZF_WYK.cntx_pop()


\form_fix_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po akcji USTAW okienka asystenta usuwającego niejednoznaczności w wyborze formularzy.
::  OLD: \form_fix_aa/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~cur_tab(1,1).sel_size()
|| exec('form_fix_ga','phr_kreatory')
?}


\form_fix_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przed akcją grupową USTAW okienka asystenta usuwającego niejednoznaczności w wyborze formularzy.
::  OLD: \form_fix_gb/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZF_DEF.index('NAZW');
ZF_DEF.prefix(exec('ref_firma','ustawienia'));
ZF_DEF.win_sel('WYB');
ZF_DEF.select()


\form_fix_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po akcji grupowej USTAW okienka asystenta usuwającego niejednoznaczności w wyborze formularzy.
::  OLD: \form_fix_ga/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_TEST.f_rfresh()


\form_fix_ma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Po modyfikacji danych w tabeli ZF_WYK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('form_fix_ga','phr_kreatory');
grp_disp(ZO_TEST,__WND.SEL.get(ZO_TEST,'FFIXT'),1)


\g_szb_tp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Formuła asystenta tworzącego pozycje budżetu szkoleń.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('szb_poz_akt','psz',SZB_OKR.ref())
|| FUN.info('Działanie funkcji zakończone sukcesem.'@)
|| FUN.emsg('Funkcja nie została wykonana.'@)
?}


\r_sz_lob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Formula asystenta tworzacego raport "Lista obecnosci na szkoleniu"
::  OLD: \szk_lob/zz_asst.fml
::----------------------------------------------------------------------------------------------------------------------
_done:=0;
{!
|? ~_done
|! _todo:=FUN.choice(
      'Proszę wybrać sposób przygotowania wydruku.'@,1,
      'Wydruk'@,'Zapis do pliku (format CSV)'@
   );

   {? _todo=0
   || _done:=1
   || __RES:=sql(
         'select '
         '  OSOBA.NAZWISKO "Nazwisko", '
         '  OSOBA.PIERWSZE "Imię", '
         '  \'            \' "Podpis" '
         'from '
         '  SZK_PRAC join '
         '  P using (SZK_PRAC.P,P.REFERENCE) join '
         '  OSOBA using (P.OSOBA,OSOBA.REFERENCE) '
         'where '
         '  SZK_PRAC.SZKOL=:_a '
         'order by '
         '  1, 2',
         SZK_OPIS.ref()
      );
      {? _todo=2
      || exec('save_file','phr_kreatory',__RES,'F0000001',
            'Szkolenie;'+SZK_OPIS.TEMAT().TEMAT,
            'Data;'+SZK_OPIS.OD$4,
            'Organizator;'+SZK_OPIS.ORG().NAZWA,
            'Prowadzący;'
         );
         _done:=1
      || exec('save_print','phr_kreatory','psz_szkolis1');
         _done:=1
      ?};
      obj_del(__RES);
      &__RES
   ?}
!}


\r_za_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formula asystenta tworzacego raport "Ranking wypełniających według pytań".
::----------------------------------------------------------------------------------------------------------------------
exec('wynik_pyt','phr_kreatory',"exec('r_za_t__x','phr_kreatory',.)")


\r_za_t__x
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła asystenta tworzącego/aktualizującego ranking ocen według kompetencji.
::   WE: _a [OBJECT] - wskazanie na asystenta.
::----------------------------------------------------------------------------------------------------------------------
_buf:=_a.get_tab(0);
_test:='';
{? _buf.first & ZA_TEST.seek(_buf.REF,)
|| _len:={? +ZA_TEST.TRESC<60 || +ZA_TEST.TRESC || 60 ?};
   _res_fml:=$('tab_tmp(1,'+
      '\'TMP\',\'STRING[16]\',\'Rekord\','+
      '\'NAZWISKO\',\'STRING['+$MS.fld_len('ZZ_OSOBA','NAZWISKO')+']\',\'Aktualne nazwisko\'@,'+
      '\'PIERWSZE\',\'STRING['+$MS.fld_len('ZZ_OSOBA','PIERWSZE')+']\',\'Pierwsze imię\'@,'+
      '\'UD_SKL\',\'STRING['+$MS.fld_len('UD_SKL','SYMBOL')+']\',\'Jednostka org.\'@,'+
      '\'STN\',\'STRING['+$MS.fld_len('STN','ST')+']\',\'Stanowisko\'@,'+
      '\'PKT\',\'REAL\',\'Zdobyte punkty\'@,'+
      '\'PKTD\',\'REAL\',\'Maksymalne punkty\'@,'+
      '\'P'+($#ZA_TEST.ref())+'\',\'REAL\',\''+form(ZA_TEST.TRESC,_len)+'\'@'
   );
   _fld_fml:='_a.win_fld(_b,,\'P'+($#ZA_TEST.ref())+'\',,,-6,2,,,,\''+ZA_TEST.TRESC+'\'@,,1)';
   _test+='\''+$ZA_TEST.ref()+'\'';
   {!
   |? _buf.next() & ZA_TEST.seek(_buf.REF,)
   |! _len:={? +ZA_TEST.TRESC<60 || +ZA_TEST.TRESC || 60 ?};
      _res_fml+=',\'P'+($#ZA_TEST.ref())+'\',\'REAL\',\''+form(ZA_TEST.TRESC,_len)+'\'';
      _fld_fml+=$(';_a.win_fld(_b,,\'P'+($#ZA_TEST.ref())+'\',,,-6,2,,,,\''+ZA_TEST.TRESC+'\'@,,1)');
      _test+=',\''+$ZA_TEST.ref+'\''
   !}
?};
{? _test=''
|| return()
?};

_pkt:=sql('select sum(ZA_TEST.PKT) as MAKS from ZA_TEST where ZA_TEST.ZA_ZEST=:_a',ZA_ZEST.ref());

_tmp:=sql(
   'select KTO.REFERENCE as REF, ZA_NOTA.TRESC as TRESC, ZA_NOTA.PKT as PKT '
   'from ZA_NOTA join ZA_FORM join '
   'ZZ_OSOBA as KTO using(ZA_FORM.ZZ_KTO,KTO.REFERENCE) join '
   'SLO_KOD using(ZA_FORM.SLO_KOD,SLO_KOD.REFERENCE) '
   'where ZA_FORM.ZA_ZEST=:_a and ZA_NOTA.ZA_TEST in (:_b) and SLO_KOD.KOD=\'Z\' order by 1,2',
   ZA_ZEST.ref(),_test
);

{? var_pres('_tmp')<>type_of(SYSLOG)
|| return()
?};
_msg:=no_msg(1);

_res:=($(_res_fml+')'))();

_error:=errno();
{? _error=357
|| FUN.info('Wskazana ankieta jest zbyt obszerna, żeby utworzyć ranking na jej podstawie.');
   return(0)
?};

_mob:='mobile_visible=1';
_res.fld_attr('TMP',2);
_wnd:=_res.mk_sel('Zestawienie uzyskanych punktów z pytań'@,,0,,1,,,,'U','U',,,,'html_maximized');
_res.win_fld(_wnd,,'NAZWISKO',,,20,,,'Nazwisko'@,,,,,,,,_mob);
_res.win_fld(_wnd,,'PIERWSZE',,,20,,,'Pierwsze imię'@,,,,,,,,_mob);
_res.win_fld(_wnd,,'UD_SKL',,,16,,,'Jednostka org.'@,,,,,,,,_mob);
_res.win_fld(_wnd,,'STN',,,30,,,'Stanowisko'@);
_res.win_fld(_wnd,,'PKT',,,-6,2,,,,'Zdobyte punkty'@,,1,,,,_mob);
_res.win_fld(_wnd,,'PKTD',,,-6,2,,,,'Maksymalne punkty'@,,1);
($_fld_fml)(_res,_wnd);
_res.win_act(_wnd,,'Usuń',,,,,,,1);
_res.win_act(_wnd,,'Formuła','Excel'@@,,,"exec('excel','phr_kreatory',cur_tab(1,1),'TMP')",,,,,,'E');
_res.win_act(_wnd,,'Kolejność');

ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.prefix();
P.cntx_psh();
P.index('ZZ_DOK');
_loop:=_tmp.first();
_osoba:='';
{!
|? _loop
|! {? _osoba='' | _tmp.REF<>_osoba
   || {? ZZ_OSOBA.seek(_tmp.REF,)
      || _osoba:=_tmp.REF;
         _res.NAZWISKO:=ZZ_OSOBA.NAZWISKO;
         _res.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
         P.prefix(ref_name(ZZ_OSOBA.ZZ_LINK),ZZ_OSOBA.ZZ_LINK);
         {? P.first()
         || _res.UD_SKL:=P.WYDZIAL().SYMBOL;
            _res.STN:=P.ST().ST
         ?};
         _res[7]:=_pkt.MAKS;
         _res.TMP:=$ZZ_OSOBA.ref();
         {! _fld:=8 .. _res.fld_num()
         |! {? _tmp.find_key(_res.TMP, _res.fld_name(_fld))
            || _res[_fld]:=_tmp.PKT
            ?}
         !};
         _res.add()
      ?};
      _loop:=_tmp.next()
   || _loop:=_tmp.next()
   ?}
!};
P.cntx_pop();
ZZ_OSOBA.cntx_pop();
obj_del(_tmp);

_test:=0;
_loop:=_res.first();
{!
|? _loop
|! _sum:=0;
   _test:=1;
   {! _fld:=8 .. _res.fld_num()
   |! _sum+=_res[_fld];
      {? _res[_fld]=0
      || _test:=0
      ?}
   !};
   _res[6]:=_sum;
   _res.put();
   _loop:=_res.next()
!};

_res.index(_res.ndx_tmp(,,'PKT',,1));
_res.win_sel(_wnd);
_res.select();

no_msg(_msg);
obj_del(_res)


\wynik_pyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formuła asystenta tworzącego/aktualizującego rankingi według pytań.
::   WE: _a [RULE] - Formuła szczegółowa asystenta.
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('view_tab','phr_kreatory',50);
_wnd:=exec('view_wnd','phr_kreatory',_res,,1,50,'Treść'@);

_ast:=obj_new(@.CLASS.ASSIST,
   'Ranking na podstawie wskazanych pytań'@,
   'Czy na pewno utworzyć ranking?'@,
   $_a
);

exec('wnd_za_test','phr_kreatory',_ast.CNTX);

_ast.set_display("
   ZA_TEST.index('NUMER');
   ZA_TEST.prefix(ZA_ZEST.ref());
   grp_disp(ZA_TEST,__WND.SEL.get(ZA_TEST,'ASIST'),1)
");

:  wybor pytań
_s0:=obj_new(@.CLASS.STEP,'Wybór pytań, dla których tworzony będzie ranking'@,38);
_s0.set_view(ZA_TEST,__WND.SEL.get(ZA_TEST,'ASIST'),'Dostępne pytania'@,20);
:  funkcjonalnosc
_s0.set_fml(
:  po odswiezeniu
   "  _state:=.CNTX.has_sel();
      .get_step(0).set_move(_state);
      .cur_step().hide_act(_state,'D')
   ");

:  podglad wyniku dzialania
_sr:=obj_new(@.CLASS.STEP,'Przygotowanie rankingu według wskazanych pytań'@,28,0);
_sr.set_view(_res,_wnd,'Wybrane pytania'@);
:  funkcjonalnosc
_sr.set_fml(
:  po odswiezeniu
   "",
:  przed obsluga
   "
      _kom:=.CNTX.get_sel(ZA_TEST);
      _res:=.get_tab(0);
      _res.erase();
      _loop:=_kom.first();
      {!
      |? _loop
      |! _res.blank();
         _res.CLS:=_kom.CLS;
         _res.REF:=_kom.REF;
         _res.add();
         _loop:=_kom.next()
      !}");

ZA_TEST.cntx_psh();
ZA_TEST.index('NUMER');
ZA_TEST.prefix(ZA_ZEST.ref());
ZA_TEST.first();
:  ustaw i uruchom
(_ast+_s0+_sr).view_trig(0).run(50);
ZA_TEST.cntx_pop();

:  porzadki
_ast.delete()


\wnd_za_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Tworzy okienko tabeli ZA_TEST do wykorzystania przez asystentów.
::   WE: _a [OBJECT] - Wskazanie na kontekst asystenta.
::   WY: Akronim okienka.
::----------------------------------------------------------------------------------------------------------------------
_acr:='ASIST';
{? var_press('_win')>0 || obj_del(_win) ?};
_win:=ZA_TEST.mk_sel('Pytania ankiety'@,'N',0,__WND.id(ZA_TEST,_acr),,,,1,'N','N');
__WND.SEL.put(ZA_TEST,_acr,_win);

ZA_TEST.win_fld(_win,ZA_TEST,'TRESC',,,50);

_a.state_act(ZA_TEST,_win).
   next_act(ZA_TEST,_win).
   mark_act(ZA_TEST,_win).
   icon_act(ZA_TEST,_win,'TRESC',,1);
ZA_TEST.win_act(_win,,'Formuła','Zwiń/&rozwiń'@@,,'Zwijanie / rozwijanie drzewa'@,
   "exec('zwin_rozwin','#tree')",,,,,,'R',,'target=window'
);
ZA_TEST.win_act(_win,0,'Szukaj');
ZA_TEST.win_act(_win,0,'Kolejność');

_win

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 cc535b941cb2adbe7d3d3eb5bcab13300ef595b3be2ea025fe1e1d1bba8f568efb72f45f076c6f9c2ea52c1d96a151dc65f6995144d8ee16ad8614a498a8f0687188478b9a43110f22a1e4deaf49cea472dd4af4df72b4d1a6010b71a465155f2469423335f131a015d606ea7604dc8c01f4dbab0899dff98980542c7df654ff
