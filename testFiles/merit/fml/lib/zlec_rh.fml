:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: zlec_rh.fml [2002]
:: Utworzony: 2002/01/01
:: Autor: [pkoso] Piotr Kosowski
::======================================================================================================================
:: Zawartosc: Funkcje obslugujace kartoteki modulu umow - zlecen
::======================================================================================================================


\ppl_zlc_ruzc_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca argumenty wymagane do uruchomienia czynności PPL_ZLC_RUZC.
::   WE:
::   WY: Obiekt z parametrami zgodny z exec('mp_run_a','#b__box') z uzupełnionymi wybranymi polami.
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='PPL_ZLC_RUZC';
_args.UIDREF:=P.uidref();
_args.CONTEXT:=obj_new('ZC');
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'P',P.ref());
_args


\zc_nu_icon_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Przed ikoną" dla pola ZC.NU. Formuła wykorzystywana również przez webTerm-a.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('x_zalacz_icon','zalacz',ZC)


\zc_typ_icon_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Przed ikoną" dla pola ZC.TYP. Formuła wykorzystywana również przez webTerm-a.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZC.TYP='N'
|| 'xwin16.png:123'
|? ZC.TYP='G'
|| 'xwin16.png:124'
|| 'xwin16.png:125'
?}


\zc_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala ikony wyświetlane w wierszu okna WER tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.win_fml('WER',,'NU',,'ICON_BEFORE',"exec('zc_nu_icon_before','zlec_rh')");
ZC.win_fml('WER',,'TYP',,'ICON_BEFORE',"exec('zc_typ_icon_before','zlec_rh')");
~~


\zc_grpkey
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła sprawdza, czy bieżący rekord tabeli ZC jest pozycją w kluczu grupującym.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;

_par:=params_get();
_ntab:=obj_ntab(_par);
{? ~_ntab
|| return(_ret)
?};

{? cur_tab(0,0)=ZC & var_pres('mp',_par)=type_of(@.CLASS.cProMan)
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=_par.mp;
   _ret:=_mp.grpkeyFind(ZC.uidref())

|? var_pres('cfg',_par)>100 & var_pres('done',_par.cfg)>100 & var_pres('state',_par.cfg.done)=type_of(0) &
   _par.cfg.done.state=0
:: Jeżeli zdefiniowane jest odpowiednie środowisko to uznajemy, że jest to uruchomienie z obszaru roboczego.
:: Sprawdzamy, stan wyszarzenia przycisku "Zakończ". Jeżeli nie jest wyszarzony, to uruchamiamy czynność.
:: Uwaga. Zakładamy, że dla czynności PPL_ZLC_RUZC:
::    1. Rekordami kluczowymi są OSOBA.uidref() i P.uidref().
::    2. Pozycjami klucza grupującego są uidref-y zaznaczonych rekordów tabeli ZC.
|| _uid:='PPL_ZLC_RUZC';
   P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   ZC.P().OSOBA();
   _keys:=obj_new(2);
   _keys[1]:=OSOBA.uidref();
   _keys[2]:=P.uidref();
   OSOBA.cntx_pop();
   P.cntx_pop();
   _bi_prel:=exec('get_bi_prel2run','#b__box',_uid,_keys);
   {? type_of(_bi_prel)=type_of(null()) & _bi_prel<>null()
   || _ITEM:=exec('get_b_grpkey4bi_prel','#b__box',_bi_prel);
      {? type_of(_ITEM)<>type_of(~~)
      || _ret:=_ITEM.find_key(ZC.uidref(),)
      ?}
   ?}
?};

_ret


\zc_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" tabeli ZC.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('uz_dwr_set','zlec_rh');
exec('uz_pku_set','zlec_rh');

{? params_exec('zc_grpkey','zlec_rh')
:: Jeżeli bieżący rekord jest pozycją klucza grupującego (co oznacza, że istnieje odpowiednie zadanie na liście
:: bieżącego użytkownika), to zaznaczmy ten rekord - inne kolorowanie jest mniej istotne.
|| return(1)
?};

_param:=exec('get_par','#parametr',276);
{? type_of(_param)=type_of('') & #_param>0
|| _liczba_miesiecy:=#_param-1;
   _color:='';
   _rok:=date()~1;
   _miesiac:=date()~2;
   {? ZC.DU<=date(_rok,_miesiac,0) & ZC.DW>=date(_rok,_miesiac-_liczba_miesiecy,1)
   || _color:='ZC#01#01'
   |? ZC.DW<date(_rok,_miesiac-_liczba_miesiecy,0)
   || _color:='ZC#01#02'
   ?};
   {? _color<>''
   || Color.fnd_kol(_color)
   ?}
?}


\zc_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh','*',ZC,'RED');
ZC.memo_get(,'TRESC');
ZC.display()


\zc_wer_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Okienko przed" dla okna WER tabeli ZC.
::   WE:
::   WY:
::  OLD: \uz_kt_wzor/war_tech.fml  |Całkowicie została zmieniona obsługa wyboru symbolu listy płac, na której mają być
::  OLD: \uz_f3_kt/zlec_rh.fml     |wypłacane rachunki. Obecnie funkcjonalność obsługiwana jest rzeczywistym polem
::  OLD: \uz_kt_ae/zlec_rh.fml     |z tabeli (ZC.KT) i filtrami.
::----------------------------------------------------------------------------------------------------------------------
RU.cntx_psh();
RU.win_sel('UMZLEC');

KT.cntx_psh();
KT.prefix();
KT.f_set(
   'T',
   'join F_ZATR using(KT.F_ZATR,F_ZATR.REFERENCE)',
   'KT.FIRMA=:_a and F_ZATR.KOD=\'Z\'',
   exec('ref_firma','ustawienia')
);

UZZ.ZR:=UZZ.POD:=UZZ.ZUSF:=UZZ.ZUSP:=0;

~~


\zc_wer_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Okienko po" dla okna WER tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KT.f_active()
|| KT.f_clear()
?};
KT.cntx_pop();

RU.cntx_pop();
~~


\zc_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po odświeżeniu" dla okna WER tabeli ZC:
::          - z poziomu obszaru roboczego;
::          - z poziomu czynności w procesie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ha:='';
_par:=params_get();
{? var_pres('_par')>100 &
   var_pres('cfg',_par)>100 &
   var_pres('done',_par.cfg)>100 &
   var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
|| _ag:=_par.cfg.done.noempty+':'+_par.cfg.done.empty;
   {? _ag<>':'
   || _ha:='WO'
   ?}
|| _ag:=''
?};

{? ZC.sel_size()=0
|| _ag:={? params_exec('zc_grpkey','zlec_rh') || 'W' || 'O' ?}+_ag
?};

ZC.actions('WER',_ha,,1);
ZC.actions_grayed('WER',_ag);

~~


\zc_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZC. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::  OLD: \uz_be_d/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZC)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='TYP'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.TYP='G')],ZC,'GODZ','');
   _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.TYP='D')],ZC,'DNI','')
?};

{? _fld='' | _fld='CZYWAL'
|| _sval:=$(ZC.CZYWAL='T');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],ZC,'ZWAL');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],ZC,'ZWAL','KOD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],ZC,'WAL');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],ZC,'WAL','KOD')
?};

{? _fld='' | _fld='TYP' | _fld='CZYWAL'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.TYP='M' & ZC.CZYWAL='N')],ZC,'OZ');
   {? _fld<>''
   || exec('zc_efld_opt','zlec_rh','1',_TAB,_we,_grp_ident,'OZ')
   ?}
?};

:: Póki nie obsługujemy "zdalnego naliczania", to poniższy kod jest zbędny.
::{? _fld='' | _fld='OZ'
::|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.TYP='M' & ZC.CZYWAL='N' & ZC.OZ='T')],UZ,'DWR');
::   {? _fld<>''
::   || exec('zc_efld_opt','zlec_rh','1',_TAB,_we,_grp_ident,'DWR')
::   ?}
::?};
::
::{? _fld='' | _fld='DWR'
::|| _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [$(ZC.TYP='M' & ZC.CZYWAL='N' & ZC.OZ='T' & UZ.DWR=1)],ZC,'DZIEN')
::?};

{? _fld='' | _fld='RC'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.RC<>'T')],UZ,'PKU')
?};

{? _fld='' | _fld='ZUS'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.ZUS='T')],ZC,'WN_ZUS')
?};

{? _fld='' | _fld='FC'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(ZC.FC='T')],ZC,'WN_FC')
?};

1


\ppl_zlc_rrac_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca argumenty wymagane do uruchomienia czynności PPL_ZLC_RRAC.
::   WE:
::   WY: Obiekt z parametrami zgodny z exec('mp_run_a','#b__box') z uzupełnionymi wybranymi polami.
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='PPL_ZLC_RRAC';
_args.UIDREF:=ZC.uidref();
_args.CONTEXT:=obj_new('RH');
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZC',ZC.ref());
_args


\rh_grpkey
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła sprawdza, czy bieżący rekord tabeli RH jest pozycją w kluczu grupującym.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;

_par:=params_get();
_ntab:=obj_ntab(_par);
{? ~_ntab
|| return(_ret)
?};

{? cur_tab(0,0)=RH & var_pres('mp',_par)=type_of(@.CLASS.cProMan)
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=_par.mp;
   _ret:=_mp.grpkeyFind(RH.uidref())

|? var_pres('cfg',_par)>100 & var_pres('done',_par.cfg)>100 & var_pres('state',_par.cfg.done)=type_of(0) &
   _par.cfg.done.state=0
:: Jeżeli zdefiniowane jest odpowiednie środowisko to uznajemy, że jest to uruchomienie z obszaru roboczego.
:: Sprawdzamy, stan wyszarzenia przycisku "Zakończ". Jeżeli nie jest wyszarzony, to uruchamiamy czynność.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='GRPKEY';
   _args.CONTEXT.RH:=RH.uidref();
   exec('mp_run','#b__box',_args);
   _ret:=_args.CONTEXT.RH=RH.uidref()
?};

_ret


\rh_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła ustala akronim okna redagowania dla tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.ZAS='T' || 'ZAS' || 'RED' ?}


\rh_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala ikony wyświetlane w wierszu okna WER tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RH.win_fml('WER',,'BL',,'ICON_BEFORE',"exec('x_zalacz_icon','zalacz')");
~~


\rh_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za statyczne (!) ustawianie właściwości pól tabeli RH.
::       Formuła wywoływana jest przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw,
::       Wyświetl), ustawia właściwości wszystkich pól (wymagających tego).
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_we:=exec('rh_win_edit','zlec_rh');

{? _we='RED'
|| _fopt:="'enable=%1,editable=%2,mark=%3'[$_a,$_b,$_c]";
   _edit:=(UZ.LS_BL=0);
   _mark:=_edit;

   _sval:=(ZC.CZYWAL='T');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),RH,'WAL');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),UZ,'WAL');

   _sval:=(ZC.TYP='G' | ZC.TYP='D');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),UZ,'STAWKA');
   _sval:=(ZC.TYP='G');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),UZ,'GODZ');
   RH.efld_opt(_we,_fopt(_sval,_edit,0),RH,'GODZ');
   _sval:=(ZC.TYP='D');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),UZ,'DNI');

   _sval:=(ZC.TYP<>'G');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),UZ,'RH');

   _sval:=(ZC.TYP='G' & RH.GODZ='T');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),RH,'G_ROK');
   RH.efld_opt(_we,_fopt(_sval,_edit,_mark),RH,'G_MC');
:   RH.efld_opt(_we,'editable=%1,mark=%1' [$(~#_sval)],UZ,'GODZ')
   RH.efld_opt(_we,'mark=%1'[$(~_sval)],UZ,'GODZ');
   {? _sval=1
   || RH.efld_opt(_we,'editable=grayed',UZ,'GODZ')
   || RH.efld_opt(_we,'editable=1',UZ,'GODZ')
   ?}
?};

RH.efld_opt(_we,'enable=%1,mark=%1'[$(PAR_SKID.get(258)='T')],UZ,'LT');

1


\rh_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Obsługa akcji "Rekord - przed" okien tabeli RH.
::       Wyświetlenie wyliczanych pól zmiennej UZ.
::       UWAGA: Procedura korzysta z numerów rubryk!
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::  OLD: \uz_kwg/zlec_rh.fml
::  OLD: \wysw_uz/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
LS.cntx_psh();
UZ.STAWKA:=UZ.GODZ:=UZ.DNI:=0;
_typ:=RH.ZLE().TYP;
{? _typ='G'
|| UZ.STAWKA:=exec('licz_rhs','lista_licz',91);
   UZ.GODZ:=exec('licz_rhs','lista_licz',54)
|? _typ='D'
|| UZ.DNI:=exec('licz_rhs','lista_licz',52);
   UZ.STAWKA:=exec('licz_rhs','lista_licz',7070)
?};
UZ.RH:=exec('licz_rhs','lista_licz',200);
LS.cntx_pop();

params_exec('rh_grpkey','zlec_rh');

{? _a
|| _ha:='';
   _par:=params_get();
   {? var_pres('_par')>100 &
      var_pres('cfg',_par)>100 &
      var_pres('done',_par.cfg)>100 &
      var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
   || _ag:=_par.cfg.done.noempty+':'+_par.cfg.done.empty;
      {? _ag<>':'
      || _ha:='WOL'
      ?}
   || _ag:='';
:: Jeżeli jest to uruchomienie w procesie (a na to wskazuje brak parametrów), to dla pustej dziedziny ukrywamy
:: "Wypłatę zasiłku".
      _ha:=':W'
   ?};

   _ag:={? RH.BL='T' || 'B(Z)' || 'B(O)' ?}+_ag;

   {? RH.sel_size()=0
   || _ag:={? params_exec('rh_grpkey','zlec_rh') || 'W' || 'O' ?}+_ag
   ?};

   {? PAR_SKID.get(230)<>'T'
   || _ha+='T'
   ?};

   {? RH.GODZ<>'T'
   || _ag:='G'+_ag
   ?};

   RH.actions('WER',_ha,,1);
   RH.actions_grayed('WER',_ag)
?};
~~


\rh_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Obsługa akcji "Wyświetl - przed" okien tabeli RH.
::  OLD: \os_n_23/kali.fml
::  OLD: \rh_disp/kali.fml
::----------------------------------------------------------------------------------------------------------------------
RH.win_edit(exec('rh_win_edit','zlec_rh'));
exec('rh_efld_opt','zlec_rh');
RH.display()


\rh_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po odświeżeniu" dla okna WER tabeli RH:
::          - z poziomu obszaru roboczego;
::          - z poziomu czynności w procesie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ha:='';
_par:=params_get();
{? var_pres('_par')>100 &
   var_pres('cfg',_par)>100 &
   var_pres('done',_par.cfg)>100 &
   var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
|| _ag:=_par.cfg.done.noempty+':'+_par.cfg.done.empty;
   {? _ag<>':'
   || _ha:='WOL'
   ?}
|| _ag:='';
:: Jeżeli jest to uruchomienie w procesie (a na to wskazuje brak parametrów), to dla pustej dziedziny ukrywamy
:: "Wypłatę zasiłku".
   _ha:=':W'
?};

_ag:={? RH.BL='T' || 'B(Z)' || 'B(O)' ?}+_ag;

{? RH.sel_size()=0
|| _ag:={? params_exec('rh_grpkey','zlec_rh') || 'W' || 'O' ?}+_ag
?};

{? PAR_SKID.get(230)<>'T'
|| _ha+='T'
?};

{? RH.GODZ<>'T'
|| _ag:='G'+_ag
?};

RH.actions('WER',_ha,,1);
RH.actions_grayed('WER',_ag);

~~


\rh_sumuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Sumuje kwoty rachunków wystawionych do bieżącej umowy cywilnoprawnej (wartość zrealizowana).
::       Wywoływana:
::          - dla każdej umowy przez akcję "Przed wyswietleniem" pola UZZ.ZR.
::          - podczas weryfikacji wprowadzanych danych w rachunku.
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: [_a] [NUMBER] - Jeśli jest kwota to zliczam tylko realizacje.
::   WY: 1
::  OLD: \zlecreal/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_real:=var_pres('_a')=type_of(0) & _a;

{? _real
|| _ref:=RH.ref();
   RH.cntx_psh();
   RH.index('RACHUNKI');
   RH.prefix(ZC.ref());
   UZZ.ZR:=_a;
   {? RH.first()
   || {!
      |? {? {? VAR.P=1 || _ref<>RH.ref() || 1 ?}
         || UZZ.ZR+={? ZC.CZYWAL='T' ||  RH.WAL || exec('licz_rhs','lista_licz',200) ?}
         ?};
         RH.next()
      !}
   ?};
   RH.cntx_pop()
|| UZZ.ZR:=UZZ.ZUSP:=UZZ.ZUSF:=UZZ.POD:=0;
   RH.cntx_psh();
   RH.index('RACHUNKI');
   RH.prefix(ZC.ref());
   {? RH.first()
   || {!
      |? UZZ.ZR+={? ZC.CZYWAL='T' ||  RH.WAL || exec('licz_rhs','lista_licz',200) ?};
         UZZ.ZUSP+=exec('licza_rhs','lista_licz',5711,5721);
         UZZ.ZUSF+=exec('licza_rhs','lista_licz',5712,5731);
         UZZ.POD+=exec('licza_rhs','lista_licz',961);
         RH.next()
      !}
   ?};
   RH.cntx_pop()
?};
1


\rh_pr_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Wartość początkowa pola RH.PR - "Przelew". Jeśli dla danej osoby zdefiniowano rachunki
::       oszczędnościowo-rozliczeniowe zwraca 'T', w przeciwnym wypadku 'N'. Ponieważ funkcja nie zachowuje kontekstu,
::       jest wygodnym "testem", po którym, jeśli jego wynik jest pozytywny, ustalony jest domyślny rachunek osoby.
::   WE:
::   WY:
::  OLD: \rhprwp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
PKO.index('_PKO');
PKO.prefix(RH.ZLE().OSOBA);
{? PKO.first()
|| _ref:=null();
   {!
   |? {? PKO.UZ='T'
      || _ref:=PKO.ref();
         0
      || PKO.next()
      ?}
   !};
   {? ~_ref
   || PKO.first()
   ?};
   'T'
|| 'N'
?}


\rh_wal_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Po redagowaniu pola RH.WAL (kw./st. w walucie) - obliczenie wartości po kursie.
::  OLD: \ae_kwwal/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__KAL.set_cal('standard',RH.DWY~1)
|| FUN.info('Nie można ustalić daty kursu.\nNależy uzupełnić kalendarz przed wystawieniem rachunku.'@);
   return(0)
?};
{!
|? _wal:=exec('waluta','lista_licz',2,,,RH.WAL);
   RH.WAL & ~_wal & FUN.ask('Czy chcesz redagować tabelę kursów?'@) &
   {? KST_PAR.SLBANK
   || 1
   || FUN.info('Nie wprowadzony słownik banków\ndo parametrów systemu.'@);
      0
   ?}
|! SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix(KST_PAR.SLBANK().ref(),ZC.ZWAL().KOD);
   TKRS.win_edit('RED');
   exec('ban_tkrs','waluty',KST_PAR.NAROD);
   SLO.cntx_pop()
!};
{? ZC.TYP='G'
|| UZ.STAWKA:=_wal;
   UZ.RH:=UZ.STAWKA*UZ.GODZ$2
|? ZC.TYP='D'
|| UZ.STAWKA:=_wal;
   UZ.RH:=UZ.STAWKA*UZ.DNI$2
|| UZ.RH:=_wal$2
?};
1


\zc_info_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Dodanie nowego zapisu do ZC_INFO na podstawie danych w ZC.
::   WE: _a - 1 - baz zapisu (wypelnienie bufora)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
ZC_INFO.blank();
ZC_INFO.OSOBA:=ZC.OSOBA;
ZC_INFO.DU:=ZC.DU;
ZC_INFO.DW:=ZC.DW;
ZC_INFO.TTUB:=ZC.TTUB;
ZC_INFO.PREM:=ZC.PREM;
ZC_INFO.STNP:=ZC.STNP;
ZC_INFO.ZUS:=ZC.ZUS;
ZC_INFO.WN_ZUS:=ZC.WN_ZUS;
ZC_INFO.FC:=ZC.FC;
ZC_INFO.WN_FC:=ZC.WN_FC;
ZC_INFO.FW:=ZC.FW;
ZC_INFO.FP:=ZC.FP;
ZC_INFO.FG:=ZC.FG;
ZC_INFO.KC:=ZC.KC;
{? ~_a
|| ZC_INFO.add()
?}


\zc_info_dw_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.40]
:: OPIS: Weryfikacja daty ZC_NFO dla zmiany daty ZC.DW. Po akcji popraw w ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC_INFO.index('ZC');
ZC_INFO.prefix(ZC.ref());
{? ZC_INFO.first()
|| _zc_info:=sql(
      'select ZC_INFO.DU, ZC_INFO.DW, ZC_INFO.REFERENCE REF, 0 LP '
      'from ZC_INFO '
      'where ZC_INFO.ZC=:_a '
      'order by 1',
      ZC.ref()
   );
   _lp:=0;
   {? _zc_info.first()
   || _dw:=ZC.DW;
      _du:=ZC.DU;
      {!
      |? _lp+=1;
         _zc_info.LP:=_lp;
         _zc_info.put();
         _zc_info.next()
      !};
      _ndx:=_zc_info.ndx_tmp(,,'LP',,);
      _zc_info.index(_ndx);
      _zc_info.last();
      {!
      |? {? _zc_info.DU>_dw
         || _zc_info.DU:=_dw
         ?};
         _dw:={? _zc_info.DU>_du || _zc_info.DU-1 || _zc_info.DU ?};
         _zc_info.put();
         _zc_info.prev()
      !};
      _zc_info.last();
      _dw:=ZC.DW;
      {!
      |? _zc_info.DW:=_dw;
         _dw:={? _zc_info.DU>_du || _zc_info.DU-1 || _zc_info.DU ?};
         _zc_info.put();
         _zc_info.prev()
      !};
      _zc_info.first();
      {!
      |? {? ZC_INFO.seek(_zc_info.REF)
         || ZC_INFO.DU:=_zc_info.DU;
            ZC_INFO.DW:=_zc_info.DW;
            ZC_INFO.put()
         ?};
         _zc_info.next()
      !}
   ?}
?}


\blankra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Domyślna wartość kwoty wystawianego rachunku
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZC.TYP='N'
|| UZ.RH:=ZC.KU-UZZ.ZR
|? ZC.TYP='M'
|| UZ.RH:=ZC.KU
|| UZ.RH:=0
?}


\godzreal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.60]
:: OPIS: sumuje skladnik  z wystawionych rachunkow w obrebie umowy
::   WE: _a [NUMBER] - nr. składnika
::   WY: suma dla podanego składnika w ramach calego zlecenia
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};
_wynik:=0;
_ref:={? VAR.P || RH.ref() || null() ?};
RH.cntx_psh();
RH.index('RACHUNKI');
RH.prefix(ZC.ref());
{? RH.first()
|| {!
   |? {? RH.ref()<>_ref
      || _wynik+=FUNKCJE.Z(_a)
      ?};
      RH.next()
   !}
?};
RH.cntx_pop();
_wynik


\blankgodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.60]
:: OPIS: formula na wartosc poczatkowo pola UZ.GODZ
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WY: pozostala liczba godzin
::----------------------------------------------------------------------------------------------------------------------
{? ZC.TYP='G'
|| _godz:=exec('godzreal','zlec_rh',54);
   _godz:=ZC.GODZ-_godz;
   _godz:={? _godz < 0 || 0 || _godz ?};
   UZ.RH:=(UZ.STAWKA*_godz)$2;_godz
|| 0
?}


\blankdni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [18.22]
:: OPIS: formula na wartosc poczatkowo pola UZ.DNI
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WY: pozostala liczba dni
::----------------------------------------------------------------------------------------------------------------------
{? ZC.TYP='D'
|| _dni:=exec('godzreal','zlec_rh',52);
   _dni:=ZC.DNI-_dni;
   _dni:={? _dni < 0 || 0 || _dni ?};
   UZ.RH:=(UZ.STAWKA*_dni)$2;_dni
|| 0
?}


\uz_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: na blank dla pol zmiennej UZ
::       UZ.RH, UZ.STAWKA, UZ.GODZ
::  OLD: \ae_zcwal/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
UZ.RH:={? ZC.CZYWAL='T' || 0 || exec('blankra','zlec_rh') ?};
UZ.STAWKA:={? ZC.TYP='G' | ZC.TYP='D' || {? ZC.CZYWAL='T' || 0 || ZC.KU ?} ?};
UZ.GODZ:=exec('blankgodz','zlec_rh');
UZ.DNI:=exec('blankdni','zlec_rh');
UZ.WAL:={? RH.ZLE().CZYWAL='T' || ZC.WAL().KOD || '' ?};
UZ.LS_BL:=0;
~~


\uz_pku_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala wartość pola UZ.PKU dla bieżącej zawartości bufora tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UZ.PKU:={? ZC.RC<>'T' || ZC.RU().PKU ?}


\uz_dwr_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala wartość pola UZ.DWR dla bieżącej zawartości bufora tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UZ.DWR:={? ZC.DZIEN>0 || 1 |? ZC.DZIEN=0 || 0 || -1 ?}


\uzz_zr_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem zmiennej UZZ.ZR. Formuła obsługuje wolne pola w oknie wertowania tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UZZ.ZR:=UZZ.ZUSP:=UZZ.ZUSF:=UZZ.POD:=0;
{? grp_empty(ZC,cur_win(1,1))
|| ZC.blank(1)
|| exec('rh_sumuj','zlec_rh')
?};
1


\add_O_ZC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Dodanie nagłówka listy płac.
::   WE: _a - rok
::       _b - mc
::       _c - typ listy
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KT.index('KRYTERIA');
KT.prefix(exec('ref_firma','ustawienia'));
{? ~KT.find_key(_c)
|| return(0)
?};

O.index('LISTYMIE');
O.prefix(exec('ref_firma','ustawienia'));
_rok:=_a;
_mc:=_b;

_sum_ok:=0;
{! _ind:=1 .. 30
|? {? ~O.find_key(_rok,_mc,KT.T)
   || _data:=date(_rok,_mc,1)-1;
      _rok:=_data~1;
      _mc:=_data~2;
      1
   || _sum_ok:=1;
      0
   ?}
!};

{? ~_sum_ok
||
:: jest to prawdopodobnie pierwsza lista z umow zleceń - wiec zakldamamy wg. wartosci domyslnych
   O.blank();
   _sum_ok:=1;
   ODD.cntx_psh();
   ODD.index('ODDZIALY'); ODD.prefix(REF.S_FIRMA);
   {? ODD.first
   || O.ODDZIAL:=ODD.ref
   || _sum_ok:=0
   ?};
   ODD.cntx_pop()
?};

__KAL.set_cal(KT.KA,_a);
_od:=date(_a,_b,1);
_do:=date(_a,_b,0);

{? ~_sum_ok
|| return(0)
?};

:: Wyżej znaleziona została lista, która będzie wzorcem dla nowej - zmieniamy tylko wybrane pola.
O.WYDZIAL:=exec('ud_skl_firma','schemat','PODZORG');
O.DK:=_do-_od+1;
O.DR:=__KAL.w_days(_od,_do);
O.GR:=__KAL.w_hours(_od,_do);
O.OLAP:='N';
O.O:='Nagłówek listy założony automatycznie podczas dodawania rachunku do zlecenia.';
O.R:=O.RU:=O.RP:=_a;
O.M:=O.MP:=O.MU:=_b;
O.D:=O.DZUS:=O.DUS:=date(_a,_b,0);
O.F:=KT.F;
O.Z:='N';
O.LT:=-('L'+($_a+2)+('0'+$_b+2)+KT.T);
O.T:=KT.ref();
O.F_ZATR:=KT.F_ZATR;
O.F:=O.T().F;
O.DOK:='';
{? O.add(1)
|| exec('put_stat','lista_plac',O.ref,'LSLP_AKT',1);
   exec('put_stat','lista_plac',O.ref,'ZBLP_AKT',1);
   1
?}


\ustal_lista_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Ustalenie naglowka listy plac dla rachunku pole RH.O
::   WY: 1 poprawnie 0 blad brak listy dla rachunku
::----------------------------------------------------------------------------------------------------------------------
{? PAR_SKID.get(258)='T'
||
:: wlaczone ręczne wybieranie listy płac
   return(RH.O<>null)
?};
_ret:=1;
_zle_kt:=RH.ZLE().KT().T;
O.cntx_psh();
O.index('LISTYPLA');
O.prefix(exec('ref_firma','ustawienia'),'Z',RH.R,RH.M,_zle_kt);
{? ~O.first()
|| {? ~exec('add_O_ZC','zlec_rh',RH.R,RH.M,_zle_kt)
   || FUN.emsg(
         'Brak nagłówka listy płac dla zleceń.\nNależy wprowadzić nagłówek listy płac: %1.'@
         ['L'+($RH.R+2)+('0'+$RH.M+2)+_zle_kt]);
     _ret:=0
  ?}
?};
{? _ret
|| RH.O:=O.ref()
?};
O.cntx_pop();
_ret


\get_ZC_INFO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Procedura ma za zadanie ustawic odpowiedni zapis informacji ZUS dla zlecenia na dany dzien.
::   WE: _a - [date] - szukanie na dany dzien - jesli nie znajdzie wczesniejszego niz dzien podany
::                     zostanie zwrocony pierwszy rekord
::   WY: 1 - znaleziono
::----------------------------------------------------------------------------------------------------------------------
ZC_INFO.index('ZC');
ZC_INFO.prefix(ZC.ref());
ZC_INFO.find_le(_a) | ZC_INFO.first()


\ust_LS_RH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Ustawia maskę i prefix dla konkretnego rachunku. Kontekst RH powinien byc ustalony.
::   WE: _a - maska
::   WY: 1 - zostala otwarta maska LS oraz ustawiono prefix dla biezacego RH
::----------------------------------------------------------------------------------------------------------------------
{? LS.use(_a)
|| LS.index('ZLEC');
   LS.prefix(RH.ref());
   1
?}


\oblicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Obliczenie składników wypłaty dla rachunku.
::   WE: _a - jest liczba to wykonuje obliczenia dla rubryk specjalnych
::          - jesli brak to wykona sie pelne naliczenie
::----------------------------------------------------------------------------------------------------------------------
{? RH.DWY<date(1999,1,1)
|| FUN.emsg('Data wypłaty rachunku wcześniejsza od 1999/01/01.\nObliczenie automatyczne niemożliwe.'@)
|| exec('wybierz','lista_plac',RH.O);
   FUNKCJE.OTWOLTRH();

   {? var_pres('_a')=type_of(0)
::    przeliczenie specjalnych
   || {? RH.KOR='T'
      || __FOLP.fill(O.F,1)
      || __FOLP.fill(O.F)
      ?};
      {? exec('jest_bl','lista_plac',RH.ref())
      || FUNKCJE.OBLICZ(-1)
      || FUNKCJE.OBLICZ(1)
      ?};
      FUNKCJE.buff.show_log()

   |? ~exec('jest_bl','lista_plac',RH.ref())
::    pełne naliczenie składników
   || __FOLP.fill(O.F);
      FUNKCJE.OBLICZ();
      FUNKCJE.buff.show_log()
   ?}
?};
VAR.P:=1;
1


\skladki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPA
::       RWR [12.30]
:: OPIS: Zsumowanie skladek na ubezpieczenia spoleczne i zdrowotne wyliczonych na listach plac jezeli zleceniobiorca
::       jest jednoczesnie pracownikiem i zachodzi zgodnosc tytulow ubezpieczenia. Obowiazkowy argument wywolania to
::       wskazanie na tablice.
::   WE: _a - Tablica, do ktorej dosumowywane sa wyliczane skladki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>=100 & obj_len(_a)=20
|| ZC.OSOBA().NAZWISKO;
:  zebranie skladek i podstaw z korekt ZUS
   _a[1]+=exec('kora_zkor','korekty_zus',571110,1,RH.DWY~2,RH.DWY~1);
   _a[2]+=exec('kora_zkor','korekty_zus',57210,1,RH.DWY~2,RH.DWY~1);
   _a[3]+=exec('kora_zkor','korekty_zus',574110,1,RH.DWY~2,RH.DWY~1);
   _a[4]+=exec('kora_zkor','korekty_zus',571110,2,RH.DWY~2,RH.DWY~1);
   _a[5]+=exec('kora_zkor','korekty_zus',571120,2,RH.DWY~2,RH.DWY~1);
   _a[6]+=exec('kora_zkor','korekty_zus',57210,2,RH.DWY~2,RH.DWY~1);
   _a[7]+=exec('kora_zkor','korekty_zus',57310,2,RH.DWY~2,RH.DWY~1);
   _a[8]+=exec('kora_zkor','korekty_zus',574110,2,RH.DWY~2,RH.DWY~1);
   _a[10]+=exec('kora_zkor','korekty_zus',571220,2,RH.DWY~2,RH.DWY~1);

   O.cntx_psh();
   O.index('LISTYUBZ');
   O.prefix(exec('ref_firma','ustawienia'),RH.DWY~1,RH.DWY~2);
   {? O.first()
   || _sum:=
         "  _wyn:=0;
            _data:={? var_pres('_b')=type_of(date) || _b || date() ?};
            _tab:=__RUB.sys_rub(_a,_data);
            {? _tab.first()
            || {!
               |? LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),_tab.RN);
                  {? LS.first() || {! |? _wyn+=LS.KW$2; LS.next() !} ?};
                  _tab.next()
               !}
            ?};
            _wyn
         ";
      LS.cntx_psh();
      {!
      |? {? O.F_ZATR().KOD<>'Z'
         || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
            LS.index('OSOBAKOD');
            LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
            {? LS.first()
            || _a[1]+=_sum(56111);
               _a[2]+=_sum(5621);
               _a[14]+=_sum(56411);
               _a[4]+=_sum(57111);
               _a[5]+=_sum(57112);
               _a[6]+=_sum(5721);
               _a[7]+=_sum(5731);
               _a[8]+=_sum(57411);
               _a[9]+=_sum(57412);
               _a[9]+=_sum(9067);
               _a[10]+=_sum(57122);
               _a[11]+=_sum(5651);
               _a[12]+=_sum(5751);
               _a[13]+=_sum(5752);
               _a[15]+=_sum(9027);
               _a[16]+=_sum(56411)+_sum(5711)+_sum(57210)-_sum(581);
               _a[17]+=_sum(9022)-_sum(9026)+_sum(92)+_sum(5711)+_sum(57210)-_sum(9021,O.D)-_sum(582);
               _a[18]+=_sum(9022)-_sum(9026);
               _a[19]+=_sum(9022);
               _a[20]+=_sum(581)-_sum(582)
            ?}
         ?};
         O.next()
      !};
      _a[3]+=_a[14];
      LS.cntx_pop()
   ?};
   O.cntx_pop()
?}


\podstawa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Określa podstawę wymiaru składek na ubezpieczenia społeczne z uwzględnieniem
::       parametrów umowy oraz informacji o blokadzie naliczania składek na fundusz
::       emerytalny i rentowy
::   WE: _a - kwota z biezacego rachunku zasilku macierzynskiego
::   WY: Kwota Podstawy
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=type_of(0) || _a ?};
_OSOBA:=RH.ZLE().OSOBA;
RH.ZC_INFO();
_diety:=0;
_PODST:={? ZC_INFO.ZUS='T'
        || {? _a
           || _a
           || _podstPar:=exec('podstawa_par','oddelegowanie');
              _podstPar.OBIEKT:=1;
              _podstPar.BEZ_DIET:=0;
              _podstawaSk:=exec('podstawa_sk','oddelegowanie','.ZUS',753,1,_podstPar);
              _podstawa:=_podstawaSk.podstawa;
              _diety:=_podstawaSk.diety;
              _zwrotyDoDol:=_podstawaSk.zwrotyDoDol;
              obj_del(_podstPar);
              obj_del(_podstawaSk);
              _podstawa
           ?}
        || 0
        ?};
_sum_zar:=exec('spr_blok_podst_sk','lista_licz',_OSOBA,RH.DWY);
_kw_wsk:=0;
{? type_of(_sum_zar)=type_of('')
|| _PODST:=0
|? type_of(_sum_zar)=type_of(0)
|| _kw_wsk:=_sum_zar
?};
{? _PODST & KST_PAR.AUT_BLOK='T'
|| _ref:={? VAR.P || RH.ref() || 0 ?};
   _test:=RH.DWY;

   RH.cntx_psh();
   RH.index('RACHDATA');
   RH.prefix(exec('ref_firma','ustawienia'),_OSOBA,_test~1);
   {? RH.first()
   || {!
      |? {? RH.ref()<>_ref & RH.DWY~2<=_test~2
         || _sum_zar+=exec('licza_rhs','lista_licz',56111,56121)
         ?};
         RH.next()
      !}
   ?};
   RH.cntx_pop();

   LS.cntx_psh();
   O.cntx_psh();
   O.index('LISTYUBZ');
   O.prefix(exec('ref_firma','ustawienia'),_test~1);
   {? O.first()
   || _sum:=
         "  _wyn:=0;
            _tab:=__RUB.sys_rub(_a);
            {? _tab.first()
            || {!
               |? LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),_tab.RN);
                  {? LS.first()
                  || {!
                     |? _wyn+=LS.KW$2;
                        LS.next()
                     !}
                  ?};
                  _tab.next()
               !}
            ?};
            _wyn
         ";
      {!
      |? {? O.MU<=_test~2 & O.F_ZATR().KOD<>'Z'
         || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
            LS.index('OSOBAKOD');
            LS.prefix(exec('ref_firma','ustawienia'),_OSOBA);
            {? LS.first()
            || _sum_zar+=_sum(56111)+_sum(56121)+_sum(56131)
            ?}
         ?};
         O.next()
      !}
   ?};
   O.cntx_pop();
   LS.cntx_pop();

   _auto_bl:=0;
   _limit:=KST.SK;
   _PODST:=
      {? _sum_zar+_PODST<=_limit
      || _PODST
      || _auto_bl:=1;
         {? _sum_zar<_limit
         ||  _limit-_sum_zar
         ?}
      ?};
   {? _auto_bl
   || exec('zablokuj_podst_sk','lista_licz',_OSOBA,RH.DWY,_kw_wsk)
   ?}
?};
:: Pomniejszenie/powiększenia pakiet mobilności i oddelegowania:
:: 261 - Personel: ewidencja i rozliczanie oddelegowania do pracy za granicą
{? PAR_SKID.get(261)='T'
|| _sumaPodst:=0;
   exec('dekl_dolist','lista_plac');
   {? var_pres('DoList')<=0
   || DoList:=obj_new(@.CLASS.DoList)
   ?};
   ZC.cntx_psh();
   P.cntx_psh();
   RH.ZLE().P();
   exec('skl_zlec_podst_sk','zlec_rh');
   P.cntx_pop();
   ZC.cntx_pop();
   ZC_INFO.cntx_psh();
   S_ZUS.cntx_psh();
   _pracownicze:=(2+RH.ZC_INFO().TTUB().KOD='01');
   S_ZUS.cntx_pop();
   ZC_INFO.cntx_pop();
:: 56111: Podstawa Emerytalno-Rentowa
   _sumaPodst+={? _pracownicze || DoList.k[1] || DoList.k[47] ?}-FUNKCJE.Z_SYS(56111);
:: 901111: Kwota zwrotów powiększająca podst. emeryt. i rent. --> 7245 OZ: Pow. p. em.i re.
   _zwrotyKierDoliczone:={? _pracownicze || DoList.k[32] || DoList.k[55] ?}-FUNKCJE.Z_SYS(901111);
:: 9016 Kwota diet pomniejszająca podstawę emeryt. i rent. --> 7191 OZ: Pom. p. em.i re.
   _dieOdli:={? _pracownicze || DoList.k[25] || DoList.k[49] ?}-FUNKCJE.Z_SYS(9016);
   _SUMY:=exec('sum_atr_o','oddelegowanie','56111,901111,9016');
   {? _SUMY.find_key(56111)
   || _sumaPodst+=_SUMY.SUM
   ?};
   {? _SUMY.find_key(901111)
   || _zwrotyKierDoliczone+=_SUMY.SUM
   ?};
   {? _SUMY.find_key(9016)
   || _dieOdli+=_SUMY.SUM
   ?};
   obj_del(_SUMY);
   _sumaPodst-=_zwrotyKierDoliczone;


:: Pomniejszenie podstawy o diety (do wysokości przeciętnego):
   {? _PODST>0 & _diety & (_sumaPodst+_PODST)>KST.PRGWYN
   || {? (_sumaPodst+_PODST-_diety)<KST.PRGWYN
      || _podstawaNew:=KST.PRGWYN-_sumaPodst;
         _diety:=_PODST-_podstawaNew;
         _PODST:=_podstawaNew
      || _PODST-=_diety
      ?};
::    7191 OZ: Pom. p. em.i re.
      FUNKCJE.ZK(7191,,_diety)
   || _diety:=0;
      FUNKCJE.ZK(7191,,0)
   ?};

:: Powiększenie podstawy o zwroty kierowcy (jeśli podstawa mniejsza niż prognozowane przeciętne):
   _par601:=exec('get_par','#parametr',601,,1);
:: 601 - Personel: Pakiet mobilności - sposób obliczania podstawy do porównania z przeciętnym wynagrodzeniem.
::    D - w pierwszej kolejności pomniejszaj o diety
::    G - liczenie od globalnej kwoty przychodu
   _porownanie:=
      {? _par601='G'
      || _sumaPodst+_PODST
      || _sumaPodst+_dieOdli+_PODST+_diety
      ?};
   {? _porownanie<=KST.PRGWYN
::    7245 OZ: Pow. p. em.i re.
   || FUNKCJE.ZK(7245,,_zwrotyDoDol);
      _PODST+=_zwrotyDoDol
::    Były poprzednio jakieś zwroty doliczone do podstawy, a podstawa w ujęciu miesiące jest już większa niż przeciętne
::    należy teraz je odjąć te doliczniea od podstawy na obecnej liście:
   |? _zwrotyKierDoliczone>0
   || FUNKCJE.ZK(7245,,_zwrotyKierDoliczone*(-1));
      _PODST-=_zwrotyKierDoliczone
   || FUNKCJE.ZK(7245,,0)
   ?}
?};

_PODST


\podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Wyliczenie podstawy emerytalno - rentowej.
::       wyliczenia skladnikow z innych rachunkow oraz z plac
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - jesli kwota inna od zera nie wylicza zmiennej _PODST
::   WY: kwota podstawy Emerytalno - Rentowej
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')>0 || _a || 0 ?};
exec('czy_prac','osoba',RH.ZLE().OSOBA,RH.DWY);
exec('czytaj','#stalesys',date(RH.DWY~1,RH.DWY~2,0),KST);
_PODST:=0;

{! _lp:=1 .. obj_len(DoList.z)
|! DoList.z[_lp]:=0
!};
:     ┌──────────────────────────────────────────────┐
:     │ Odczytaj informacje o podstawach i składkach │
:     │ wykazanych na listach płac dla tytułu "01XX" │
:     └──────────────────────────────────────────────┘
_skl:=obj_new(20);
{! _n:=1 .. obj_len(_skl)
|! _skl[_n]:=0
!};
{? 2+RH.ZC_INFO().TTUB().KOD='01'
|| exec('skladki','zlec_rh',_skl)
?};

:     ┌───────────────────────────────────────┐
:     │ Pobierz dane z rachunków wystawionych │
:     │ do umów z tytułem zgodnym z aktualną. │
:     └───────────────────────────────────────┘

{? RH.ZC_INFO().FP='T' | RH.ZC_INFO().FG='T'
|| {? 2+RH.ZC_INFO().TTUB().KOD<>'01'
   || RH.ZLE().OSOBA();
      O.cntx_psh();
      O.index('LISTYUBZ');
      O.prefix(exec('ref_firma','ustawienia'),RH.DWY~1,RH.DWY~2);
      {? O.first()
      || _sum:=
            "  _wyn:=0;
               _tab:=__RUB.sys_rub(_a);
               {? _tab.first()
               || {!
                  |? LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref(),_tab.RN);
                     {? LS.first()
                     || {!
                        |? _wyn+=LS.KW$2;
                           LS.next()
                        !}
                     ?};
                     _tab.next()
                  !}
               ?};
               _wyn
            ";
         LS.cntx_psh();
         {!
         |? {? O.F_ZATR().KOD<>'Z'
            || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
               LS.index('OSOBAKOD');
               LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
               {? LS.first()
               || _skl[11]+=_sum(5651);
                  _skl[12]+=_sum(5751);
                  _skl[13]+=_sum(5752)
               ?}
            ?};
            O.next()
         !};
         LS.cntx_pop()
      ?};
      O.cntx_pop()
   ?};

   DoList.z[13]:=FUNKCJE.Z_SYS(5651,0,,1);
   DoList.z[17]:=_skl[11];
   DoList.z[18]:=_skl[12];
   DoList.z[19]:=_skl[13];
   DoList.z[14]:=FUNKCJE.Z_SYS(5751,0,,1);
   DoList.z[15]:=FUNKCJE.Z_SYS(5752,0,,1)
?};

{? RH.ZC_INFO().ZUS='T'
|| {? ~_a
   || _PODST:=exec('podstawa','zlec_rh')
   ?};
   DoList.z[1]:=FUNKCJE.Z_SYS(56111,0,,1)+_skl[1];
   DoList.z[4]:=FUNKCJE.Z_SYS(57111,0,,1)+_skl[4];
   DoList.z[5]:=FUNKCJE.Z_SYS(57112,0,,1)+_skl[5];
   DoList.z[16]:=FUNKCJE.Z_SYS(57122,0,,1)+_skl[10]
?};
{? RH.ZC_INFO().FC='T'
|| DoList.z[2]:=FUNKCJE.Z_SYS(5631,0,,1)+_skl[2];
   DoList.z[6]:=FUNKCJE.Z_SYS(5721,0,,1)+_skl[6]
?};
{? RH.ZC_INFO().FW='T'
|| DoList.z[3]:=FUNKCJE.Z_SYS(5621,0,,1)+_skl[2];
   DoList.z[7]:=FUNKCJE.Z_SYS(5731,0,,1)+_skl[7]
?};
{? RH.ZC_INFO().KC='T'
|| _licz_podkco:=
      "  LS.cntx_psh();
         RH.cntx_psh();
         RH.index('RACHDATA');
         RH.prefix(exec('ref_firma','ustawienia'),ZC.OSOBA,RH.R,RH.M);
         _typ:=exec('rhttub','lista_plac',ZC.OSOBA,RH.DWY,RH.ZC_INFO().TTUB().KOD,RH.ZC_INFO().DW);
         _ref:=RH.ref();
         _wyn:=0;
         {? RH.first()
         || {!
            |? {? _ref<>RH.ref() &
                  _typ=exec('rhttub','lista_plac',ZC.OSOBA,RH.DWY,RH.ZC_INFO().TTUB().KOD,RH.ZC_INFO().DW)
               || {? ~exec('licz_rhs','lista_licz',31)
                  || _wyn+=exec('licza_rhs','lista_licz',56411)
                  ?}
               ?};
               RH.next()
            !}
         ?};
         RH.cntx_pop();
         LS.cntx_pop();
         RH.ZC_INFO();
         _wyn
      ";
   DoList.z[8]:=FUNKCJE.Z_SYS(56411,0,,1)+_skl[3];
   DoList.z[9]:=FUNKCJE.Z_SYS(57411,0,,1)+_skl[8];
   DoList.z[10]:=FUNKCJE.Z_SYS(57412,0,,1)+FUNKCJE.Z_SYS(9067,0,,1)+_skl[9];
   DoList.z[11]:=_licz_podkco()+_skl[14];

   DoList.z[20]:=FUNKCJE.Z_SYS(9027,0,,1)+_skl[15];
   DoList.z[21]:=FUNKCJE.Z_SYS(56411,0,,1)+FUNKCJE.Z_SYS(5711,0,,1)+FUNKCJE.Z_SYS(57210,0,,1)+_skl[16];
   DoList.z[22]:=FUNKCJE.Z_SYS(9022,0,,1)-FUNKCJE.Z_SYS(9026,0,,1)+FUNKCJE.Z_SYS(92,0,,1)+FUNKCJE.Z_SYS(5711,0,,1);
   DoList.z[22]+=FUNKCJE.Z_SYS(57210,0,,1)-FUNKCJE.Z_SYS(9021,0,,1)+_skl[17];
   DoList.z[23]:=FUNKCJE.Z_SYS(9022,0,,1)-FUNKCJE.Z_SYS(9026,0,,1)+_skl[18];
   DoList.z[24]:=FUNKCJE.Z_SYS(9022,0,,1)+_skl[19];
   DoList.z[25]:=_skl[20]
?};
obj_del(_skl);
_PODST


\wylicz_rhs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Formula po wykonaniu akcji Dolacz i Popraw w okienku tabeli RH
::       UWAGA: Procedura korzysta z numerow rubryk!
::----------------------------------------------------------------------------------------------------------------------
_popraw:=-menu_txt()='popraw';

{? _popraw & -UZZ.LT<>RH.O().LT
|| LS.cntx_psh();
   {? exec('ust_LS_RH','zlec_rh',-UZZ.LT)
   || {? LS.first()
      || {! |? LS.del() !}
      ?}
   ?};
   LS.cntx_pop();
:: Usunięcie rozliczenia zwolnienia przychodu
   {? var_pres('__ZW_PRZ')>0
   || __ZW_PRZ.RH:=RH.ref;
      __ZW_PRZ.LISTA:=null;
      __ZW_PRZ.ROK:=UZZ.R;
      __ZW_PRZ.MC:=UZZ.MIE;
      __ZW_PRZ.del_pozycja()
   ?}
?};
:: Weryfikacja daty zobowiązania zleceia.
{? 1+menu_txt='P' & RH.DWY>ZC.DZB
|| {? ~FUN.ask('Data wypłaty rachunku: %1 jest późniejsza od daty wygaśnięcia zobowiązania %2.'
         '\nZmieniono datę wygaśnięcia zobowiązania na datę wypłaty rachunku.'
         '\nCzy przywrócić datę wygaśnięcia zobowiązania na datę sprzed zmiany?'@[$RH.DWY,$ZC.DZB])
   || FUN.emsg('Data wygaśnięcia zobowiązania została zmieniona na: %1'@[$RH.DWY]);
      ZC.DZB:=RH.DWY;
      ZC.put()
   || FUN.emsg('Uwaga, data wygaśnięcia zobowiązania nie została zmieniona.'
         '\n Data wypłaty wystawionego rachunku: %1,'
         '\njest późniejsza od daty wygaśnięcia zobowiązania: %2.'@[$RH.DWY,$ZC.DZB])
   ?}
?};
: realizacja wyplat nieobecnosci
{? RH.ZAS='T'
|| {? ~exec('wysw_zc_n','os_nieob')
   || return()
   ?}
?};

exec('wybierz','lista_plac',RH.O);
FUNKCJE.OTWOLTRH();
LS.prefix(RH.ref());
{? _popraw & UZ.KK<>RH.KK & exec('ust_LS_RH','zlec_rh',RH.O().LT) & LS.first() &
   FUN.ask(
      'Zostało zmienione konto kosztów.\n'
      'Czy uwzględnić zmianę konta we wszystkich\n'
      'wpisach w składnikach rozliczenia rachunku?'@
   )
|| {!
   |? LS.KK:=RH.KK;
      LS.put();
      LS.next()
   !}
?};

{? RH.DWY<date(1999,1,1)
|| FUN.emsg('Data wypłaty rachunku wcześniejsza od 1999/01/01.\nObliczenie automatyczne niemożliwe.'@)

|? exec('jest_bl','lista_plac',RH.ref())
|| FUN.info(
      'Automatyczne obliczanie składników rachunku jest zablokowane.\n'
      'Należy zweryfikować szczegóły rachunku.'@
   )

|| {? UZ.RH=0 & RH.ZAS='N' & RH.GODZ<>'T'
   || exec('rh_wal_ae','zlec_rh')
   ?};
   FUNKCJE.ZK(200,,UZ.RH);
   {? RH.ZLE().TYP='G'
   || {? UZ.STAWKA
      || FUNKCJE.ZK(91,,UZ.STAWKA)
      ?};
      {? UZ.GODZ
      || FUNKCJE.ZK(54,,UZ.GODZ)
      ?}
   |? RH.ZLE().TYP='D'
   || {? UZ.STAWKA
      || FUNKCJE.ZK(7070,,UZ.STAWKA)
      ?};
      {? UZ.DNI
      || FUNKCJE.ZK(52,,UZ.DNI)
      ?}
   ?};

   {? exec('jest','ppk')
:: Jeśli będzie różnica w liście płac, to przed zmianą zmodyfikuj stary zapis PPK_POD:
   || PPK_POD.cntx_psh();
      PPK_POD.index('WYL_RH');
      PPK_POD.prefix(RH.ref(),P.ref());
      {? PPK_POD.first()
      || {!
         |? {? PPK_POD.WYL_O<>RH.O
            || PPK_POD.PRZ_DATA:=exec('prz_data','ppk_pod');
               PPK_POD.POD_R:=PPK_POD.PRZ_DATA~1;
               PPK_POD.POD_M:=PPK_POD.PRZ_DATA~2;
               PPK_POD.put()
            ?};

            PPK_POD.next()
         !}
      ?};
      PPK_POD.cntx_pop()
   ?};

   exec('oblicz','zlec_rh')
?};
0


\licz_KU_inne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Zsumowanie wartosci na listach miesiaca podatkowo dla zleceniobiorcy.
::   WE:
::   WY: wartosc sumy kosztow dla kodu 5 lub umowy, gdzie rodzaj kosztów uzyskania jest "Kwotowe" [K]
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZC.cntx_psh();
RH.cntx_psh();
O.cntx_psh();
O.index('LISTYPLP');
LS.cntx_psh();
:: ER/WRT/XP/23.25/2311/0015 - ER/WRT/XP/22.26/2311/0001: Brak zliczania kosztów zdefiniowanych jako "Kwotowe"
:: na umowach cywilnoprawnych dodanych do systemu na wdrożeniu w danym mcu
_ls:=
   "  _wyn:=0;
      {? LS.first()
      || {!
         |? {? LS.RH<>_a & (LS.RH().ZLE().RU().K='5' | RU.RKU='K')
            || _wyn+=LS.KW
            ?};
            LS.next()
         !}
      ?};
      _wyn
   ";
_akt_rh:=RH.ref();
O.prefix(exec('ref_firma','ustawienia'),'Z',O.RP,O.MP);
{? O.first()
|| {!
   |? LS.use(O.LT);
      LS.index('OSOBAKOD');
      LS.prefix(exec('ref_firma','ustawienia'),ZC.OSOBA,784);
      _wyn+=_ls(_akt_rh);
      O.next()
   !}
?};
ZC.cntx_pop();
RH.cntx_pop();
O.cntx_pop();
LS.cntx_pop();
_wyn


\KU
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Obliczenie kosztow uzyskania.
::   WE: _a - wartosc przychodu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.ZAS='T'
|| return(0)
?};

{? RH.DWY~1>=2023
|| {? ZC.RU().WRKU50='T' &
      exec('wn_podat_exist','lista_licz',ZC.OSOBA,'KU_50%',RH.DWY,'W',
           exec('RU_platnik','rodzaje_platnikow',RH.ZLE().RU))
   || return(0)
   ?}
?};

_ruKUZ:=ZC.RU().K;
_ruRKU:=RU.RKU;
{? var_pres('_a')=type_of(0) & _a
|| _prz:=_a;
   _ku:=
      {? _ruRKU<>'K'
      || _prz*{? FUNKCJE.Z(31) || 0 || RU.PKU ?}*0.01
      || KST.KUS
      ?}$2
|| _ku:=
      {? _ruRKU<>'K'
      || {? RH.DWY<=date(2000,12,0)
         || FUNKCJE.Z(500)
         || FUNKCJE.Z(500)-FUNKCJE.Z(765,767)
         ?}*{? FUNKCJE.Z(31) || 0 || RU.PKU ?}*0.01
      || KST.KUS
      ?}$2
?};
{? RH.DWY~1>=2013 & (_ruKUZ='2' | _ruKUZ='3') & _ku>0
|| _blokada:=obj_new(2);
   _blokada[1]:=_blokada[2]:=0;
   exec('blok_koszt50_zlec_rh','lista_licz',ZC.OSOBA,RH.DWY,RH.ref,_ku,_blokada);
   {? _blokada[1]>0
   || _ku:=0
   |? ~_blokada[1] & _blokada[2]
   || _ku:=_blokada[2]
   ?};
   obj_del(_blokada)
?};

{? _ruRKU='K'
|| _prz:=_a;
   {? _prz>0
   || _ku-=exec('licz_KU_inne','zlec_rh');
      _ku:={? _prz<_ku || _prz || _ku ?}
   ?}
?};
_ku


\licz_pchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Wyliczenie podstawy Chorobowej, na podstawie wprowadzonych danych do stalych systemu
::   WY: Kwota podstawy Chorobowej
::----------------------------------------------------------------------------------------------------------------------
{? 2+RH.ZC_INFO().TTUB().KOD<>'01'
|| _podbiez:=LICZRHS.Wylicz(,'.ZUS');
   {? RH.DWY>=date(2014,1,1)
   || {? ~KST.SK
      || FUN.emsg(
            'Nie wprowadzono przeciętnego prognozowanego wynagrodzenia\n'
            'koniecznego do ustalenia maksymalnej kwoty podstawy chorobowej.\n'
            'Proszę uzupełnić dane w stałych systemu.'@
         );
         return(_podbiez)
      ?}
   || {?~KST.PRZWYN
      || FUN.emsg(
            'Nie wprowadzono przeciętnego wynagrodzenia\n'
            'koniecznego do ustalenia maksymalnej kwoty podstawy chorobowej.\n'
            'Proszę uzupełnić dane w stałych systemu.'@
         );
         return(_podbiez)
      ?}
   ?};
:: 5621 Podstawa Chorobowo-Wypadkowa
   _podstChorWyp:=FUNKCJE.Z_SYS(5621);
:: Jeśli wyliczona wartość jest różna od 754 (Podstawa Chorobowo-Wypadkowa) i występują pomniejszenia
:: lub powiększenia to przyjmij wartość 754:
:: 9017 Kwota diet pomniejszająca podstawę chor. i wyp.
:: 901112 Kwota zwrotów powiększająca podst. chor. i wyp.
   {? _podbiez<>_podstChorWyp & (FUNKCJE.Z_SYS(9017) | FUNKCJE.Z_SYS(901112))
   || _podbiez:=_podstChorWyp
   ?};

:: Podstawa wymiaru składek na ubezpieczenie chorobowe osób, które ubezpieczeniu chorobowemu podlegają dobrowolnie,
:: nie może przekraczać miesięcznie 250% prognozowanego przeciętnego wynagrodzenia, o którym mowa w art. 19 ust. 10.
:: 5631 Podstawa Chorobowa (umowy-zlecenia)
   _podinne:=FUNKCJE.Z_SYS(5631,0);
   {? RH.DWY>=date(2014,1,1)
   || _podstchor:=(KST.SK/30*2.5)$2-_podinne
   || _podstchor:=(KST.PRZWYN*2.5)$2-_podinne
   ?};
   {? _podstchor<0 || _podstchor:=0 ?};
   {? _podstchor>=_podbiez
   || _podbiez
   || _podstchor
   ?}
|| FUNKCJE.Z_SYS(5621)
?}+FUNKCJE.Z_SYS(5632)


\podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Wyliczenie podatku oraz kasy chorych i zwolnionego dochodu/podatku
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WY: Kwota podatku nominalnego
::----------------------------------------------------------------------------------------------------------------------

:     ┌─────────────────────────────────────────────────────────┐
:     │     Informacje o przyznanych i wykorzystanych ulgach    │
:     └─────────────────────────────────────────────────────────┘
DoList.d[1]:=DoList.d[2]:=DoList.d[3]:=0;
DoList.p[1]:=DoList.p[2]:=DoList.p[3]:=DoList.p[4]:=DoList.p[5]:=DoList.p[6]:=DoList.p[7]:=DoList.p[8]:=0;
DoList.p[15]:=DoList.p[16]:=DoList.p[17]:=DoList.p[18]:=DoList.p[19]:=0;
exec('wyk_ul_podatek','lista_licz',RH.DWY~1,RH.DWY~2,ZC.OSOBA,1,,RH.DWY);
exec('rachunki_podst_sk','lista_licz',ZC.OSOBA,RH.DWY~1,RH.DWY~2,RH.ref());
DoList.p[6]+=DoList.p[11];
DoList.p[7]+=DoList.p[12];

_Prac_p:=0;
{? 2+RH.ZC_INFO().TTUB().KOD='01'
|| RH.ZLE().OSOBA();
   _sum:="
      _wyn:=0;
      _tab:=__RUB.sys_rub(_a);
      {? _tab.first()
      || {!
         |? LS.prefix(OSOBA.ref(),_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW$2; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   O.cntx_psh();
   O.index('LISTYUBZ');
   O.prefix(RH.DWY~1,RH.DWY~2);
   {? O.first()
   || LS.cntx_psh();
      {!
      |? {? O.F_ZATR().KOD<>'Z'
         || LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
            LS.index('OSOBAKOD');
            LS.prefix(OSOBA.ref());
            {? LS.first()
            || _Prac_p+=_sum(96)
            ?}
         ?};
         O.next()
      !};
      LS.cntx_pop()
   ?};
   O.cntx_pop()
?};

:: 9611  Zaliczka podatku dochodowego
_Prac_p+=FUNKCJE.Z_SYS(9611,0,,1);
::ER/WRT/XP/12.51/2006/0002 Wypłata rachunku składnik 798 wyrównanie podatku np. -100 zł kolejny rachunek w mcu
::błędne wyliczenie składki zdrowotnej dla zlec <26
::Zmiana pobierania kwoty wyrównania zaliczki podatkowej kwota rubryki 798 Wyrównanie podatku
::jeżeli kwota jest ujemna to nie będzie sumowana do kwoty ustalenia kwoty składki zdrowotnej
::na podstawie rubryki 798 nie można ustalić czy była liczona składka zdrowotna od tego podatku
:: 9612    Wyrównanie podatku
_wyr_pod:=FUNKCJE.Z_SYS(9612,0,,1);
{? _wyr_pod<0 || _wyr_pod:=0 ?};
_Prac_p+=_wyr_pod;


:     ┌─────────────────────────┐
:     │ Ubezpieczenie Zdrowotne │
:     └─────────────────────────┘
:: 92   Przychód
_podst_opod:=FUNKCJE.Z_SYS(92);
_brutto:=FUNKCJE.Z(7200);
::  9022   ZP: przychód podlegający zwolnieniu
_U26_PA:=FUNKCJE.Z_SYS(9022)+DoList.z[24];
_U26_P:=FUNKCJE.Z_SYS(9022);
_kcp_new:=_kcp:=_kco:=_kct:=_kc_zp:=0;

_new:=
   {? RH.DWY~1>2022
   || 1
   |? RH.DWY~1=2022
   || _par334:=exec('get_par_date','parametr',334);
      _par334>date(0,0,0) & _par334<=RH.DWY
   ?};

{? RH.ZC_INFO().KC='T'
|| _kcp_new:=_kcp:=((DoList.z[8]+DoList.z[12])*KST.PRKC*0.01)$2;
   _kcp-=DoList.z[9];
   _kcp_new-=DoList.z[9];
   {? _U26_PA & ~_new
   ||
:: ustalenie udziału podstawy kasy chorych w ZP: Przychod dla innych rachunków i list
:: składki od zwolnionych przychodow nie podlegają odliczeniom

:: _ubz_inn:= podstawa składki zdrowotnej plus składki emerytalno rentowe chorobowe (z innych rachunkow i list płac)
      _ubz_inn:=DoList.z[21];
:: _pod_inn:= ZP przychód- ZP składki+Przychód-składki-wykluczenie ZP (z innych rachunków i list płac)
      _pod_inn:=DoList.z[22];
:: _zp_inn:=ZP przychód (inne rachunki + listy płac)
      _zp_inn:=DoList.z[24];
      {? _pod_inn>_zp_inn
      || _ogranicz:=1
      || _ogranicz:=0
      ?};
      {? _ogranicz
      || _wsp:={? _pod_inn || _ubz_inn/_pod_inn ?};
         _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
:: _kc_zpin:=ZP przychód-ZP składki (z innych rachunków oraz list płac)
         _kc_zpin:=DoList.z[23];
         _kc_zpin:=(_kc_zpin*_wsp)$2
      ||
:: _kc_zpin:=Podstawa zdrowotna (inne rachunki oraz listy płac)
         _kc_zpin:=DoList.z[8]-DoList.z[25]
      ?};
::  9026 ZP: składki społeczne od zwolnionego przychodu
:: wyliczenie składek na ubzp. zdrowotne od zwolnionego przychodu
      _kc_zp:=FUNKCJE.Z_SYS(9022)-FUNKCJE.Z_SYS(9026);
      _do_ulg:=FUNKCJE.Z_SYS(9022)-FUNKCJE.Z_SYS(9026)+FUNKCJE.Z_SYS(92)+FUNKCJE.Z_SYS(5711)+FUNKCJE.Z_SYS(57210);
      _do_ulg-=FUNKCJE.Z_SYS(9021);

:: ustalenie udziału podstawy kasy chorych w ZP: Przychod
:: składki od zwolnionych przychodow nie podlegają odliczeniom
      {? _do_ulg>FUNKCJE.Z_SYS(9022)
      || _ogranicz:=1
      || _ogranicz:=0
      ?};
      {? _ogranicz
      || {? _do_ulg>0
         || _ubz:={? _pom:=DoList.z[12]; _pom<>0 || _pom+FUNKCJE.Z_SYS(5711)+FUNKCJE.Z_SYS(57210) ?};
            _wsp:=_ubz/_do_ulg
         || _wsp:=0
         ?};
         _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
         _kc_zp:=(_kc_zp*_wsp)$2
      ||
:: _kc_zp:=podstawa ubezpieczenia zdrowotnego z bieżącego rachunku dla ZP przychód
         _kc_zp:=DoList.z[12]
      ?};
:: DoList.z[20]=ZP skłądki zdrowotne pobr. z innych rachunków i list płac
      _kc_zp:=(((_kc_zp+_kc_zpin)*{? RH.DWY~1<2022 || KST.PRKO || 7.75 ?}*0.01)$2)-DoList.z[20];
:: wstepna skladka na ubez. zdrowotne jaka moze byc odliczona po odjeciu skladek policzonych od ZP: Przychod
      _pom1:=((DoList.z[11]+DoList.z[12])*{? RH.DWY~1<2022 || KST.PRKO || 7.75 ?}*0.01)$2-DoList.z[10]-_kc_zp-DoList.z[20];
:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
      _pom2:=((DoList.z[11]+DoList.z[12])*{? RH.DWY~1<2022 || KST.PRKO || 7.75 ?}*0.01)$2-DoList.z[10];

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
      _kct:={? _pom1>_pom2 || _pom2 || _pom1 ?};
      {? _kct<0 || _kct:=0 ?}
   || _kct:={? date(2003,1,1)<=RH.DWY
            || ((DoList.z[11]+DoList.z[12])*{? RH.DWY~1<2022 || KST.PRKO || 7.75 ?}*0.01)$2-DoList.z[10]
            || _kcp
            ?}
   ?}
?};

:     ┌───────────────────┐
:     │ Podatek Dochodowy │
:     └───────────────────┘
:: 93 - Koszty uzyskania
:: 31 - Podatek ryczałtowy
_KU:=FUNKCJE.Z_SYS(93);
DoList.d[3]:=(({? ~FUNKCJE.Z(31) || _podst_opod-_KU || _brutto ?})$0);
DoList.d[3]:={? DoList.d[3]>0 || DoList.d[3] ?};

:     ┌───────────────────────────────────────────┐
:     │ Zwolniony dochód możliwy do wykorzystania │
:     └───────────────────────────────────────────┘

DoList.d[2]:=
   {? DoList.p[4]=0
   || 0
   |? (DoList.p[4]-DoList.p[6])>=DoList.d[3]
   || DoList.d[3]
   |? (DoList.p[4]-DoList.p[6])>0
   || DoList.p[4]-DoList.p[6]
   || 0
   ?}$2;

:: Wyliczenie ulgi pierwszy próg
_ulga_1_prog:=_przychod:=_skl_e_r_c_w:=0;
{? RH.DWY~1>2022
|| exec('rozlicz_del_pozycja','lista_licz',RH.DWY~1,RH.DWY~2,,RH.ref(),'UZ_POD');
   _przychod_KU:=FUNKCJE.Z(7200);
   _przychod:=_przychod_KU-_KU-FUNKCJE.Z_SYS(9022);
   {? DoList.p[19]>0 & _przychod>0
   || {? DoList.p[19]>=_przychod
      || _ulga_1_prog:=_przychod
      || _ulga_1_prog:=DoList.p[19]
      ?};
      _skl_e_r_c_w:=FUNKCJE.Z(765,767)-FUNKCJE.Z_SYS(9026);
:: Wyliczenie składek ZUS przypadających na podstawę zwolnionego podatku
      _skl_e_r_c_w:=(((_ulga_1_prog+_KU)/_przychod_KU)*_skl_e_r_c_w)$2;
      {? _skl_e_r_c_w>0
      || FUNKCJE.ZK(__RUB.sys_kod(90813),,_skl_e_r_c_w)
      ?};
:: odpisanie wartości ulgi
      FUNKCJE.ZK(__RUB.sys_kod(90811),,_ulga_1_prog);
      exec('rozlicz_add','lista_licz','UZ_POD',RH.ref())


   || FUNKCJE.ZK(__RUB.sys_kod(90811),,,1);
      FUNKCJE.ZK(__RUB.sys_kod(90813),,,1)
   ?}
|| FUNKCJE.ZK(__RUB.sys_kod(90811),,,1);
   FUNKCJE.ZK(__RUB.sys_kod(90813),,,1);
   DoList.p[19]:=-1
?};

_proc_pod:=FUNKCJE.Z_SYS(91);
_ZDR_p_pod:={? _new & _proc_pod=12 || 17 || _proc_pod ?};

:: Jeżeli jest zwolniony przychód - należy sprawdzić czy zostało coś do opodatkowania
{? DoList.d[3]>0 & _ulga_1_prog>0
|| DoList.p[1]:=0;
  {? _przychod>_ulga_1_prog
  ||
:: Odjęcie składek ZUS przypadających na podstawę zwolnionego podatku
     _ulga_1_prog-=_skl_e_r_c_w;
     DoList.d[3]:=DoList.d[3]-_ulga_1_prog;
     {? DoList.d[3]<0
     || DoList.d[3]:=0
     ?}
  || DoList.d[3]:=0
  ?}
?};

_podatek:=DoList.p[1]:=((((DoList.d[3]-DoList.d[2])$0)*_proc_pod*0.01))$2;
_pod_nom:={? DoList.d[2]+_ulga_1_prog>0 || ((DoList.d[3]$0)*_proc_pod*0.01) ?}$2;

{? _U26_P & ~_new
|| _U26_KU:=exec('KU','zlec_rh',_U26_P+FUNKCJE.Z_SYS(92)-FUNKCJE.Z_SYS(9026));
   FUNKCJE.ZK(__RUB.sys_kod(9024),,_U26_KU);
   {? _U26_KU<0 || _U26_KU:=0 ?};
   DoList.p[15]:=(((_U26_P+_podst_opod-_U26_KU-FUNKCJE.Z_SYS(9026))$0)*_proc_pod*0.01)$2
|| FUNKCJE.ZK(__RUB.sys_kod(9024),,0)
?};

_kum:=RH.ZLE().RU().K;
_p1:=DoList.p[1];
{? ~FUNKCJE.Z(31) & RH.ZC_INFO().KC='T'
|| _ttub:=ZC_INFO.TTUB().KOD;
   {? ~_new
   || {? {? _pod_nom || _pod_nom || DoList.p[1] ?}<_kct
   || _kco:=DoList.p[1];
      {? RH.DWY~1=1999 | date(2000,4,1)<=RH.DWY & _kum<>'4' & _kum<>'5' & _ttub<>'2250'
      || {? DoList.p[15]
         || {? _pod_nom
            || {? _kcp>DoList.p[15]
               || _kcp:=DoList.p[15]
               ?}
            |? _kcp>DoList.p[15]
            || _kcp:=DoList.p[15]
            ?}
         || _kcp:={? _pod_nom || _pod_nom || _kco ?}
         ?}
      ?};
      DoList.p[1]:=0
   || {? DoList.p[15]
      || {? _Prac_p+DoList.p[15]<_kcp & _kum<>'4' & _kum<>'5' & _ttub<>'2250'
         || _kcp:=DoList.p[15]
         ?}
      || {? DoList.p[1]+_Prac_p<_kcp & _kum<>'4' & _kum<>'5' & _ttub<>'2250'
         || _kcp:=DoList.p[1]
         ?}
      ?};
      {? DoList.p[1]<_kct
      || _kco:=DoList.p[1]
      || _kco:=_kct
      ?};
      DoList.p[1]-=_kco
      ?}
   ?};
   {? RH.DWY~1<2022
   || _kcp_new:=_kcp;
      _p1:=DoList.p[1]
   || {? RH.DWY~1=1999 | date(2000,4,1)<=RH.DWY & _kum<>'4' & _kum<>'5' & _ttub<>'2250'
:: 9061 - ZDR: nominalna podstawa opodatkowania
:: 9063 - ZDR: nominalne koszty uzyskania
      || _ZDR_PRZ:=({? ~FUNKCJE.Z(31) || FUNKCJE.Z_SYS(9061)-FUNKCJE.Z_SYS(9063) || _brutto ?})$0;
         _ZDR_PRZ:={? _ZDR_PRZ>0 || _ZDR_PRZ ?};
         {? _ZDR_PRZ
         || _ZDR_p:=((_ZDR_PRZ$0)*_ZDR_p_pod*0.01)$2;
            _kcp_new:={? _kcp_new>_ZDR_p || _ZDR_p || _kcp_new ?};
:: 9064 - ZDR: nominala zaliczka na podatek
            FUNKCJE.ZK(__RUB.sys_kod(9064),,_ZDR_p)
         || FUNKCJE.ZK(__RUB.sys_kod(9064),,0);
            _kcp_new:=0
         ?}
      || FUNKCJE.ZK(__RUB.sys_kod(9064),,0)
      ?}
   ?}
?};

{? DoList.p[1]<0 || DoList.p[1]:=0 ?};
{? _p1<0 || _p1:=0 ?};
DoList.p[1]:=_p1;
:: Wyliczenie ulgi podatkowej
_ulga_pod:=0;
{? _podatek &  RH.DWY~1>2022 &  RH.ZLE().RU().UP='T' &
   exec('szukaj_p_ipod','pracownik',RH.DWY) &
   exec('czy_aktywna_umowa','osoba',P.OSOBA,RH.DWY,,'UM_ZLEC',P_IPOD.OD) &
   ~DoList.p[19]
|| {? 'N'*P_IPOD.UP
   || _ulga_pod+=exec('ulga_podatkowa_KST','lista_licz',P_IPOD.PU,RH.DWY)
   ?};
   _ulga_pod-=FUNKCJE.Z_SYS(94,0);
   {? exec('test_par','parametr',336,'T',,2)
   || _ulga_pod-=
         (exec('wartosci_listy','lista_licz',94,RH.DWY~1,RH.DWY~2,'P',,RH.ZLE().OSOBA)$2-
         exec('wartosci_listy','lista_licz',9082,RH.DWY~1,RH.DWY~2,'P',,RH.ZLE().OSOBA)$2)
   ?};
   {? _ulga_pod<0
   || _ulga_pod:=0
   || {? _ulga_pod<_podatek
      || _podatek-=_ulga_pod
      || _ulga_pod:=_podatek;
         _podatek:=0
      ?}
   ?};
   FUNKCJE.ZK(__RUB.sys_kod(94),,_ulga_pod)
|| FUNKCJE.ZK(__RUB.sys_kod(94),,,1)
?};
:: DoList.p[5] - zwolniony podatek
:: DoList.p[7] - 795 - Zaniechany podatek
DoList.p[5]-=DoList.p[7];
DoList.p[2]:=
   {? DoList.p[5]<=0
   || _p1
   |? _p1>DoList.p[5]
   || _p1-DoList.p[5]
             || 0
             ?};

{? DoList.p[2]<0 || DoList.p[2]:=0 ?};
{? DoList.p[15] & ~_new
|| {? _kcp<0 || _kcp:=0 ?};
   {? _kco<0 || _kco:=0 ?};
   {? _kcp_new<0 || _kcp_new:=0 ?}
|| {? _kcp<0 | _kco<0 || _kcp:=_kco:=_kcp_new:=0 ?}
?};
DoList.z[9]:=_kcp_new;
{? ~_new
|| DoList.z[10]:=_kco;
DoList.z[11]:=_kc_zp;
   DoList.p[18]:=_podatek
|| DoList.z[10]:=DoList.z[11]:=0
?};
_podatek


\okr_nskl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Okreslenie przerwy w oplacaniu skladek przez budzet panstwa za osoby przebywające na urlopie macierzynskim.
::   WE: _a - "wskazanie" na tablice, w ktorej polach zwrocone zostana wartosci
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _n:=1 .. obj_len(_a)
|! _a[_n]:=0
!};
_lod:=date(O.R,O.M,1);
_ldo:=date(O.R,O.M,0);
_zdate:=date(0,0,0);

P_NSKL.index('OD');
P_NSKL.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
ZC_N.cntx_psh();
ZC_N.index('ZC_H');
ZC_N.prefix(RH.ref());
{? ZC_N.first()
|| {!
   |? {? __RUB.sys_attr(ZC_N.R,115,ZC_N.OD)
      || _mod:=ZC_N.OD;
         _mdo:=ZC_N.DO;
         {? P_NSKL.first()
         || {!
            |? {? P_NSKL.OD<=_mdo & (P_NSKL.DO>=_mod | P_NSKL.DO=_zdate)
               || _nod:={? P_NSKL.OD<_mod || _mod || P_NSKL.OD ?};
                  _ndo:={? _mdo<P_NSKL.DO | P_NSKL.DO=_zdate || _mdo || P_NSKL.DO ?};
                  _a[1]+=(_mdo-_mod)+1;
                  _a[2]+=(_ndo-_nod)+1
               ?};
               P_NSKL.next()
            !}
         ?}
      ?};
      ZC_N.next()
   !}
?};
ZC_N.cntx_pop();
_a[1]-_a[2]


\podst_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wyliczenie funduszy emerytalno rentowych dla zasilku macierzynskiego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_pod_url:=FUNKCJE.Z(523,524);
{? _pod_url
|| _ons:=obj_new(3);
   exec('okr_nskl','zlec_rh',_ons);
   _pod_url*={? _ons[2] & _ons[1]
             || (_ons[1]-_ons[2])/_ons[1]
             || 1
             ?};
   _pod_url:=_pod_url$2;
   {? _pod_url
   || {? -KST_PAR.AUT_BLOK='t'
      || {? (_limit:=KST.SK)>0
         || _pod_zus:=exec('spr_blok_podst_sk','lista_licz',P.OSOBA);
           {? type_of(_pod_zus)=type_of(0)
           || _pod_url:=exec('podstawa','zlec_rh',_pod_url)
           || _pod_url:=0
           ?}
         || RAPLS.msg('','','','Proszę uzupełnić pole: Max. wym. składek w stałych systemu')
         ?}
      ?}
   ?};
   obj_del(_ons)
?};
_pod_url


\przelkw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPA
:: OPIS: Wyliczenie kwoty dyspozycji przelewu
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wsp:=RHP.KW;
UZ.RHP:=(
   {? _wsp>0 & _wsp<1
   || _kw:=FUNKCJE.Z(990);
      {? _kw>0 & _kw<1
      || _wsp:=1
      ?};
      _kw
   || 1
   ?}*_wsp
)$2


\rachreal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sumuje kwoty przelewów dla danego rachunku - wartość zrealizowana.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? VAR.P
|| UZ.WG:=UZ.KW:=FUNKCJE.Z(990);
   RHP.cntx_psh();
   RHP.index('RHP');
   RHP.prefix(RH.ref());
   {? RHP.first()
   || {!
      |? exec('przelkw','zlec_rh');
         UZ.WG-=UZ.RHP;
         RHP.next()
      !}
   ?};
   RHP.cntx_pop()

|| UZ.WG:=UZ.KW:=0
?};
1


\rhprpor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Jesli wynagrodzenie ma byc przelane na konto zleceniobiorcy, to wyswietlane jest okienko zawierajace dane
::       potrzebne do utworzenia polecenia przelewu.
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: [_a] [NUMBER]
::             0 - Nie [domyślnie].
::             1 - Tak.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0)
|| _a:=0
?};
_przelewem:=FUNKCJE.Z(994);
{? VAR.P
|| _usun:=
      "  LS.cntx_psh();
         LS.index('ZLEC');
         LS.prefix();
         {? LS.find_key(RH.ref(),_a)
         || LS.del()
         ?};
         LS.cntx_pop()
      ";
   RHP.index('RHP');
   RHP.prefix(RH.ref());
   {? RH.PR='T'
   || _kw:=_netto:=FUNKCJE.Z(990);
      _all:=0;
      {? exec('rh_pr_bl','zlec_rh')='T'
      || {? ~RHP.last() & _kw>0
         || RHP.blank(1);
            RHP.RH:=RH.ref();
            RHP.B:=PKO.BA;
            RHP.N:=PKO.N;
            RHP.KW:=_kw;
            RHP.add()
         ?}
      || {? _a
         || _a:=0
         ?}
      ?};
      _wiecej:=RHP.prev();
      _wyplata:=FUNKCJE.Z(999);
      {? _wiecej | ~_a | _wyplata & RHP.first()
      || FUN.info('Zweryfikuj szczegóły rozliczenia rachunku.'@)
      ?};
      {? ~RHP.first()
      || RH.PR:='N';
         RH.put();
         _usun(994);
         FUN.emsg('Usunięto dyspozycje przelewu wynagrodzenia, rachunek nie będzie realizowany przelewem.'@);
         FUNKCJE.ZK(999,,_netto);
         _przelewem:=0
      || {? RHP.next() | ~_a | _wyplata
         || _przelewem:=_kwota:=UZ.KW-UZ.WG
         || RHP.KW:=_przelewem:=_kwota:=_kw;
            {? _kwota>0
            || RHP.put();
               UZ.WG:=0
            || RHP.del();
               _przelewem:=0;
               RH.PR:='N';
               RH.put();
               FUN.emsg('Usunięto dyspozycje przelewu wynagrodzenia, rachunek nie będzie realizowany przelewem.'@);
               UZ.WG:=_kwota
            ?}
         ?};
         {? _kwota>0
         || FUNKCJE.ZK(994,,_kwota)
         || _usun(994)
         ?};
         {? UZ.WG
         || FUNKCJE.ZK(999,,UZ.WG)
         || _usun(999)
         ?};
         {? _kwota<0
         || UZ.WG:=UZ.KW:=0
         ?}
      ?}
   || {? RHP.first()
      || {? FUN.ask('Dla rachunku istnieją dyspozycje przelewu.\nCzy usunąć informacje o przelewach?'@)
         || {! |? RHP.del() !};
            _przelewem:=0
         || RH.PR:='T';
            RH.put()
         ?}
      |? (_netto:=FUNKCJE.Z(990))>0 & _przelewem=0 & exec('rh_pr_bl','zlec_rh')='T' &
         FUN.ask('Czy utworzyć polecenie przelewu wynagrodzenia?'@)
      || _przelewem:=_netto;
         RH.PR:='T';
         {? RH.put()
         || FUNKCJE.ZK(994,,_przelewem);
            _usun(999);
            RHP.blank(1);
            RHP.RH:=RH.ref();
            RHP.B:=PKO.BA;
            RHP.N:=PKO.N;
            RHP.KW:=_przelewem;
            RHP.add()
         ?}
      ?}
   ?}
?};
_przelewem


\spr_fp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2010]
:: OPIS: Formula sprawdzajaca blokade naliczania skladki na FP i FGSP
::----------------------------------------------------------------------------------------------------------------------
_blokada:=0;
_wiek:={? P.OSOBA().PLEC='K' || 55 || 60 ?};
_data_50:=P.OSOBA().UR_DATA;
_data_rh:=RH.DWY;
{? _data_50<>date(0,0,0) & _data_rh>=date(2009,7,1)
|| _lata:=(_data_rh~1*12+_data_rh~2-_data_50~1*12-_data_50~2)%12;
   _mc:=(_data_rh~1*12+_data_rh~2-_data_50~1*12-_data_50~2)%*12;
   _blokada:=_lata>_wiek | (_lata=_wiek & _mc>=1) | (_lata=_wiek & _mc=0 & _data_50~3=1)
?};
_blokada


\zc_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Drukuj" w oknie WER tabeli ZC.
::   WE:
::   WY:
::  OLD: \druk_uz/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_ru:=','+ZC.RU().K+',';
{? type_of(params_get()) & var_pres('arg',params_get())>100
|| _par:=params_get()
|| _par:=~~
?};
{? ',1,'*_ru
|| params_set('DRUK','uz','ZAL','1','par',_par);
   rep_exec('ppl_uz_umzc')
|? ',2,6,'*_ru
|| params_set('DRUK','ud','ZAL','1','par',_par);
   rep_exec('ppl_uz_umdz')
|| _todo:=FUN.choice(
      'Proszę określić, który z szablonów raportu ma zostać\nwykorzystany do wydrukowania umowy "%1".'@ [ZC.RU().O],
       3,'umowa - Zlecenie'@,'umowa o Dzieło'@);
   {? _todo=1
   || params_set('DRUK','uz','ZAL','1','par',_par);
      rep_exec('ppl_uz_umzc')
   |? _todo=2
   || params_set('DRUK','ud','ZAL','1','par',_par);
      rep_exec('ppl_uz_umdz')
   ?}
?}


\rh_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Drukuj" w oknie WER tabeli RH.
::   WE:
::   WY:
::  OLD: \druk_uz/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
rep_exec('ppl_uz_rach')


\wal_real
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Sumuje kwoty rachunków wystawionych do danej umowy walutowej. Wynik zapisywany jest w zmiennej UZZ.ZR.
::   WE: [_a] [NUMBER] - Pomijać bieżący rachunek?
::                0 - Nie [domyślnie].
::                1 - Tak
::   WY: Suma.
::----------------------------------------------------------------------------------------------------------------------
_bbr:=var_pres('_a')=type_of(0) & _a;
UZZ.ZR:=0;
_ref:=RH.ref();
RH.cntx_psh();
RH.index('RACHUNKI');
RH.prefix(ZC.ref());
{? RH.first()
|| {!
   |? {? ~_bbr | _ref<>RH.ref()
      || UZZ.ZR+=RH.WAL
      ?};
      RH.next()
   !}
?};
RH.cntx_pop();
UZZ.ZR


\spr_uz_lt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Formula sprawdzajaca wypelnienie pola UZ.LT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.O=null()
|| FUN.emsg('Pole "Lista płac" musi być wypełnione.'@);
   return(0)
|? RH.O().Z='T'
|| FUN.emsg('Wybrana lista płac jest zamknięta.'@);
   return(0)
?};
_rok:=RH.O().R;
_mc:=RH.O().M;
{? _rok<>RH.DWY~1
|| FUN.emsg('Definicja wybranej listy płac niezgodna z założonym rachunkiem.\n'
       'Rok wybranej listy: %1\n'
       'Rok rachunku      : %2'@[$O.R,$(RH.DWY~1)]
   );
   return(0)
|? _mc<>RH.DWY~2
|| FUN.emsg('Definicja wybranej listy płac niezgodna z założonym rachunkiem.\n'
       'Miesiąc wybranej listy: %1\n'
       'Miesiąc rachunku      : %2'@[form(O.M,-2),form(RH.DWY~2,-2)]
   );
   return(0)
?};
1


\edit_var_zc_wyd_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Przed wyświetleniem EDIT_VAR.ZC_WYD
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.ZC_WYD:=ZC.WYDZIAL().SYMBOL


\edit_var_zc_wyd_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Przed redagowaniem EDIT_VAR.ZC_WYD
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.ZC_WYD:=ZC.WYDZIAL().SYMBOL;
1


\edit_var_zc_wyd_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.22]
:: OPIS: Po redagowaniu EDIT_VAR.ZC_WYD
::----------------------------------------------------------------------------------------------------------------------
ZC.WYDZIAL:=exec('ud_skl_symbol_ae','schemat','PODZORG','PPL');
{? VAR.P & EDIT_VAR.ZC_WYD<>EDIT_VAR.ZC_WYD_B & EDIT_VAR.ZC_WYD<>''
|| FUN.emsg('Zmiana jednostki organizacyjnej z \'%1\' na \'%2\' ma wpływ na '
            'wydruki z rachunków do wybranej umowy cywilnoprawnej.'@
            [EDIT_VAR.ZC_WYD_B,EDIT_VAR.ZC_WYD]+
            '\n\n'+
            'Wszystkie wcześniejsze wypłaty rachunków będą wykazywane na \n'
            'aktualnie obowiązującej jednostce organizacyjnej dla wybranej umowy cywilnoprawnej.'@)
?};
1


\rh_mod_258
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła ustala możliwość modyfikacji rachunków na zamknietej liście płac w zalezności od wartości parametru
::       258 - Personel: rachunki z umów cywilnoprawnych wypłacane na listach płac [T/N].
::       Formuła zakłada prawidłowo ustalony bufor tabeli ZC.
::   WE: [_a] [NUMBER] - Przetwarzanie wsadowe (bez dialogu) [0*/1]. Dla parametru 258 ustawionego na 'T' przyjmuje się,
::                       że modyfikacja jest możliwa.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;
{? PAR_SKID.get(258)='N'
|| _batch |
   FUN.ask(
      'Wykonanie operacji może wpłynąć na:\n'
      ' - zestawienia zbiorcze;\n'
      ' - zaliczkę podatku dochodowego przekazywaną do Urzędu skarbowego;\n'
      ' - dane przesyłane do programu Płatnik.\n'@
   )
?}


\przychod_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Naliczenie przychodu podlegającemu uldze na podstawie art.21 ust.1 pkt 148 ustawy.
::       Dla zleceniobiorców poniżej 26 rż.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ZWPOD',RU)<=0 || return(0) ?};
{? FUNKCJE.Z(31) || return(0) ?};
{? RH.ZLE().RU().ZWPOD<>'T' || return(0) ?};

_new:=
   {? RH.DWY~1>2022
   || 1
   |? RH.DWY~1=2022
   || _par334:=exec('get_par_date','parametr',334);
      _par334>date(0,0,0) & _par334<=RH.DWY
?};

{? ~_new & RH.ZAS='T' || return(0) ?};
{? _new & RH.ZAS='T' & ~FUNKCJE.Z_SYS(552) || return(0) ?};
_wynik:=0;
{? var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| __ZW_PRZ.create();
   {? __ZW_PRZ.KOD<>''
   || _limit_p:=__ZW_PRZ.NOM_LIM-__ZW_PRZ.WYK_LIM;
      {? _limit_p>0
      || _wynik:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779)-FUNKCJE.Z_SYS(9021);
         {? _wynik>_limit_p || _wynik:=_limit_p ?}
      ?}
   ?}
|| {? ~exec('czy_ulga_U26','lista_licz',RH.DWY) || return(0) ?};
   _rok:=RH.DWY~1;
   _mc:=RH.DWY~2;

   _limit_p:=exec('limit_U26','lista_licz',_rok,_mc,#RH.ref());
   {? _limit_p
   || _wynik:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779)-FUNKCJE.Z_SYS(9021);
      {? _wynik>_limit_p || _wynik:=_limit_p ?}
   ?}
?};
{? _wynik>0 || _wynik ?}


\zp_skl_U26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.51]
:: OPIS: Wyliczenie składek społecznych od zwolnionego przychodu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~(RH.ZC_INFO().ZUS='T' |  RH.ZC_INFO().FC='T') || return(0) ?};
_zp_prz:=FUNKCJE.Z_SYS(9022);
{? _zp_prz
|| _kw_zw:=0;
   R.cntx_psh();
   R.prefix();
   _rub_zw:=__RUB.sys_rub(9021,RH.DWY);
   {? _rub_zw.first
   || {!
      |? {? R.seek(_rub_zw.R,)
         || {? R.POD='T' & R.ZUS='N'
            || _kw_zw+=FUNKCJE.Z(_rub_zw.RN)
            ?}
         ?};
         _rub_zw.next
      !}
   ?};
   R.cntx_pop();
   _skl:=FUNKCJE.Z_SYS(512)+FUNKCJE.Z_SYS(522)+FUNKCJE.Z_SYS(532);
   _prz_pod:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779)-_kw_zw;
   _zp_skl:=0;

   {? _zp_prz=_prz_pod
   || _zp_skl:=_skl
   || _pod_e_r:=FUNKCJE.Z_SYS(511);
      _pod_chw:=FUNKCJE.Z_SYS(531);
      _blokada:=_pod_chw>_pod_e_r;

      R.cntx_psh();
      R.prefix();
      _rub_br:=__RUB.sys_rub(48);
      _ZUS_np:=0;
      {? R.first
      || {!
         |? {? R.RN>500 & R.ZUS='T' & R.POD='N' & ~_rub_br.find_key(R.RN)
            || _ZUS_np+=FUNKCJE.Z(R.RN)
            ?};
            R.next
         !}
      ?};
      R.cntx_pop();

      _P_CHW:=FUNKCJE.Z_SYS(531)-_ZUS_np;
      _P_POD:=_prz_pod;
      _wsp_ZP:={? _P_POD || _P_CHW/_P_POD || 1 ?};
      {? _wsp_ZP>1 || _wsp_ZP:=1 ?};
      _Pzus_ZP:=_zp_prz*_wsp_ZP$2;
      _P_chw:=FUNKCJE.Z_SYS(563);
      {? _P_chw>_Pzus_ZP
      || _zp_skl:=(_Pzus_ZP*KST.PRFC/100)$2
      || _zp_skl:=(_P_chw*KST.PRFC/100)$2
      ?};
      {? _blokada
      || {? _pod_e_r
         || {? _Pzus_ZP>_pod_e_r || _Pzus_ZP:=_pod_e_r ?};
            _zp_skl+=(_Pzus_ZP*KST.PRFRP/100)$2;
            _zp_skl+=(_Pzus_ZP*KST.PRFE/2/100)$2
         ?}
      || _zp_skl+=(_Pzus_ZP*KST.PRFRP/100)$2;
         _zp_skl+=(_Pzus_ZP*KST.PRFE/2/100)$2
      ?}
   ?};
   {? _zp_skl>_skl
   || _skl
   || _zp_skl
   ?}
?}


\rh_bl_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42]
:: OPIS: Wartość początkowa numeru rachunku
::   WE: _a [REFERENCE] - ref bieżącego rachunku przy popraw
::       _b [INTEGER] - flaga zmiany daty
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || null() ?};
_akt:={? var_pres('_b')=type_of(0) || _b ?};
_auto:=exec('rh_auto','zlec_rh');
{? _auto<>'1' & _auto<>'2' & _auto<>'3' &_auto<>'I'
|| return('')
?};
{? _akt & ~FUN.ask(
              'Zmieniony został rok rozpoczęcia umowy cywilnoprawnej.\n'
              'Czy nadać nowy numer umowy?'@
           )
|| return('')
?};
_fm:=exec('rh_get_form','zlec_rh');
{? _auto='1'
|| _nr:=exec('NR_RH_1','%personel',ZC.ref(),_ref);
    RH.N:=_nr
|? _auto='2'
|| _nr:=exec('NR_RH_2','%personel',ZC.P,_ref);
    RH.N:=_nr
|? _auto='3'
|| _nr:=exec('NR_RH_3','%personel',ZC.P,_ref);
    RH.N:=_nr
|? _auto='I'
|| ($_fm)()
|| ''
?}


\rh_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42] [Merit 20.xx]
:: OPIS: Pobranie wartości parametru automatycznej numeracji rachunku
::   WY: Staus parametru automatycznej numeracji
::----------------------------------------------------------------------------------------------------------------------
(exec('czytaj','#stalesys',,KST,'NR_RH_AU'));
_auto:=KST.NR_RH_AU;
_auto



\rh_get_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42] [Merit 20.xx]
:: OPIS: Pobranie formatu numeracji rachunku do umów cywilnoprawnych ze stałych systemu
::   WY: Format numeracji w postaci napisu, w przypadku braku ustawienia formatu, wynikiem bedzie format
::       NNNN/UMOWA, gdzie NNNN oznacza kolejny numer, UMOWA oznacza numer umowy
::----------------------------------------------------------------------------------------------------------------------
(exec('czytaj','#stalesys',,KST,'NR_RH_FM'));
_format:={? KST.NR_RH_FM='' || '1' || KST.NR_RH_FM ?};
_format



\rh_n_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [20.42]
:: OPIS: Weryfikacja numeru rachunku z definicją
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_auto:=exec('rh_auto','zlec_rh');
{? _auto<>'1' & _auto<>'2' & _auto<>'3'
|| return(1)
|? _auto='1'
|| {? #(4+RH.N)>0 & (5-RH.N)=RH.ZLE().NU
   || return(1)
   || return(0)
   ?}
|? _auto='2'
|| _nr:=spli_str(RH.N,'/');
   {? obj_len(_nr)=2 & +_nr[1]=4 & #_nr[1]>0 & #_nr[2]=RH.DWY~1
   || return(1)
   || return(0)
   ?}
|? _auto='3'
|| _nr:=spli_str(RH.N,'/');
   {? obj_len(_nr)=3 & +_nr[1]=4 & #_nr[1]>0 & #_nr[2]=RH.DWY~2 & #_nr[3]=RH.DWY~1
   || return(1)
   || return(0)
   ?}
?}


\rh_godz_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[21.14]
:: OPIS:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\rh_godz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[21.14]
:: OPIS: Po aktualizacji pola RH.GODZ
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rh_efld_opt','zlec_rh');
{? RH.GODZ='N'
|| UZ.RH:=(UZ.STAWKA*UZ.GODZ)$2
?};
1


\rh_g_rok_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[21.14]
:: OPIS:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\rh_g_mc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[21.14]
:: OPIS:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\rh_godzniy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK[21.14]
:: OPIS: Akcja Godziny pracy dla Rachunków
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.GODZ='T'
|| params_set(_par:=params_get());
   G.cntx_psh();
   R_GODZ.cntx_psh();
   G.use('godz'+$RH.G_ROK);
   R_GODZ.use('rzg_'+$RH.G_ROK);
   G.index('RH');
   G.prefix(RH.FIRMA,'G',RH.ZLE().P,RH.ref);

   _wer:=G.win_sel('WERZ');
   _red:=R_GODZ.win_edit('?');
   _size:=_ret:=0;
   R_GODZ.win_edit('REDZ');
   G.select();
   _size:=G.size();
   R_GODZ.win_edit(_red);

   R_GODZ.cntx_pop();
   G.cntx_pop();

   {? _size
   || _mod:=exec('czy_mod','lista_plac',RH.ref(),,1);
      {? ~(_mod.status<0 & _mod.status<>-6)
      || exec('wylicz_rhs','zlec_rh');
         FUNKCJE.Z(54);
         params_exec('rh_szczegoly_b', '!ppl_zlc_rrac')
      ?}
   || FUN.info('Rachunek nie posiada powiązanych godzin dlatego zostanie usunięty.'@);
      exec('rh_usun','!ppl_zlc_rrac',ZC.uidref(),RH.uidref(),1)
   ?}
|| FUN.info('Akcja dostępna tylko dla rachunków z włączoną opcją dla automatycznego rozliczania czasu pracy.'@)
?};
1


\ost_rh_dt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Zwraca datę ostatniego rachunku dla podanej umowy cywilnoprawnej.
::   WE: _a [_ZC]    - wskazanie na umowę cywilnoprawną (ZC.ref)
::      [_b][NUMBER] - 0/1 [domyślnie 0] zwracana data:
::          0 - data rachunku
::          1 - data wypłaty rachunku
::      [_c][NUMBER] - 0/1 [domyślnie 0] zwracana data:
::          0 - data ostatniego rachunku, data zerowa w przypadku braku rachunków
::          1 - większa z dat: data końca umowy cywinoprawnej, data ostatniego rachunku
::      [_d][NUMBER] - 0/1 [domyślnie 0] Czy pomijać rachunki, których lista ma odznaczony znacznik "PORTAL"?
::   WY: _dt [DATE]  - data ostatniego rachunku
::----------------------------------------------------------------------------------------------------------------------
_dt:=date(0,0,0);
{? var_pres('_a')<>7
|| FUN.error('Niewłaściwy typ parametru wejściowego.'@);
   return(_dt)
?};
_tInt:=type_of(0);
_zc:=_a;
_dtWypl:={? var_pres('_b')=_tInt || _b || 0 ?};
_dtKonc:={? var_pres('_c')=_tInt || _c || 0 ?};
_pNiePor:={? var_pres('_d')=_tInt || _d || 0 ?};

:: Zapytanie w zależności od parametrów:
_query:='
   select RH.%1, ZC.DW from RH
   join ZC using(RH.ZLE, ZC.REFERENCE)
   %2
   where RH.ZLE=:_a
   %3
   %4
   order by RH.%1 desc'
   [{? _dtWypl || 'DWY' || 'DRA' ?}
   ,{? _pNiePor || 'join O using(RH.O, O.REFERENCE)' || '' ?}
   ,{? _dtKonc || 'and RH.%1>ZC.DW'[{? _dtWypl || 'DWY' || 'DRA' ?}] || '' ?}
   ,{? _pNiePor || 'and O.PORTAL=\'T\'' || '' ?}];

_RH:=sql(_query,_zc);

:: Jeśli znaleziono rachunek
{? _RH.first()
|| _dtRh:={? _dtWypl || _RH.DWY || _RH.DRA ?};
   _dt:={? _dtKonc & _RH.DW>_dtRh || _RH.DW || _dtRh ?}
|? _dtKonc
|| ZC.cntx_psh();
   {? ZC.seek(_zc,,1)
   || _dt:=ZC.DW
   || FUN.error('Nie znaleziono podanej umowy'@)
   ?};
   ZC.cntx_pop()
?};

_dt


\blokada
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie czy jakakolwiek czesc realizacji jest rozliczona rachunkiem zlecenia
::   WE: _a = integer - bez komunikatu
::  OLD: \blokada/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_a:=var_pres('_a')=type_of(0);
ZC_N.cntx_psh();
ZC_N.index('ZC_N');
ZC_N.prefix(OS_N.ref);
_wyn:=0;
{? ZC_N.first()
|| {!
   |? _wyn+=#ZC_N.RH;
      ZC_N.next()
   !}
?};
ZC_N.cntx_pop();
{? _wyn
|| {? ~_a || FUN.emsg('Dokonano wypłaty w realizacji nieobecności.\n Operacja niedostępna.'@) ?};
   1
?}


\plf_nadgzc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Rozliczenie godzin
::----------------------------------------------------------------------------------------------------------------------
{? RH.GODZ='T'
|| FUNKCJE.ZK(54,,,1);
   FUNKCJE.ZK(200,,,1);

   _lg:=_war:=_kw:=0;
   G.cntx_psh();
   G.use('godz'+$RH.G_ROK);

   G.index('MSCRH');
   G.prefix(RH.ZLE().P,RH.G_MC,'G',RH.ref);
   R_GODZ.cntx_psh();
   R_GODZ.use('rzg_'+$RH.G_ROK);
   R_GODZ.index('R_GODZ');
   R_GODZ.clear();
   exec('usu_roz','roz_godz');

   G.index('MSCKW_KD');
   G.prefix(RH.ZLE().P,RH.G_MC,'G',54);
   {? G.first()
   || {!
      |? {? G.RH=null | G.RH=RH.ref
         || _lg+=G.G;
            _war+=_kw:=G.G * ZC.KU;
            exec('wyplata','roz_godz','W',_kw,54);

            R_GODZ.prefix(G.ref(),'R');
            {? R_GODZ.first()
            || {!
               |? _kw+=R_GODZ.KW;
                  _war+=R_GODZ.KW;
                  R_GODZ.next()
               !}
            ?};

            G.WAR:=_kw;
            G.RH:=RH.ref;
            G.LT:=VAR.NAZWALIS;
            G.put()
         ?};
         G.next()
      !};

      FUNKCJE.ZK(54,,_lg);
      FUNKCJE.ZK(200,,_war)
   ?};
   G.cntx_pop();
   R_GODZ.cntx_pop()
?};
~~


\pa_korzysci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Formuła wylicza przybliżoną kwotę korzyści wynikająca ze stosowania 50% kosztów uzyskania przychodu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZC.RU().K<>'3'
|| return(0)
?};

:: % KU praw autorskich.
_kuPApr:=ZC.RU().PKU;

RU.cntx_psh();
RU.index('K');
RU.prefix(ZC.RU().TYP,'1',);
:: % KU standard.
_kuUZpr:={? RU.first() || RU.PKU ?};
RU.cntx_pop();

{? _kuPApr<=0 | _kuUZpr<=0 | _kuPApr<=_kuUZpr
|| return(0)
?};

_korzysc:=0;

:: Procent podatku.
_prPOD:=FUNKCJE.Z_SYS(91);

:: Podstawa korzyści wynika z różnicy w podstawie KU.
_podstawa:=((_kuPApr-_kuUZpr)*FUNKCJE.Z_SYS(931)/_kuPApr);

:: Korzyść, to przede wszystkim podatek od "zwiększonych" KU.
_korzysc+=_podstawa*_prPOD/100;

:: Korzyść może wynikać również z ograniczenia "Skł. zdrow. - pobr." [574110]
_pobro:=FUNKCJE.Z_SYS(56411)*KST.PRKC/100$2;
_pobrl:=FUNKCJE.Z_SYS(574110);
{? _pobro>_pobrl
|| _korzysc+=_pobro-_pobrl
?};

_korzysc$2


\ZDR_przychod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Naliczenie przychodu do wyliczenia składki zdrowotnej
::   WE:
::   WY:
::  OLD: \ZDR_przychod/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.DWY~1<2022 || return(0) ?};
{? RH.ZAS='T' || return(0) ?};
_wyn:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779);
{? ~FUNKCJE.Z(31)
|| {? var_pres('__ZW_PRZ')>100 & ~__ZW_PRZ.ZDR & __ZW_PRZ.KOD<>''
   || _zp_prz:=FUNKCJE.Z_SYS(9022);
      {? _zp_prz
      || _wyn-=FUNKCJE.Z_SYS(9026)
      ?};
      _wyn-=_zp_prz
   ?};
   _skladki:=FUNKCJE.Z(765,767);
   _wyn-=_skladki;

:: Odliczenie diet kierowcy pomniejszających przychód i składników nie stanąwiących podst. opod.:
:: 7198: ZDR: Diety pom. prz.
   _wyn-=FUNKCJE.Z(7198);
:: 9069 Składki niestanowiące obniżenia podstawy opodat. (7199 ZDR: Sk. nst. ob. p.)
   _skl_nop:=FUNKCJE.Z_SYS(9069);
:: 23.25_PMO01 - rezygnacja z ograniczania wysokości _skl_nop do wysokości składek na liście
   _wyn+=_skl_nop
?};
{? _wyn>0
|| FUNKCJE.ZK(__RUB.sys_kod(9063),,exec('KU','zlec_rh',_wyn));
   _wyn
|| FUNKCJE.ZK(__RUB.sys_kod(9063),,0);
   0
?}


\korekta_podatek_UZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Korekta podatku dla umów zleceń
::   WE:
::   WY:
::  OLD: \korekta_podatek_UZ/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask(
      'Zadaniem procedury jest wprowadzenie rachunków korygujących\n'
      'dla sytuacji opisanej przez rozporządzenie Ministra Finansów z dnia 7 stycznia 2022r.'@+'\n\n'+
      'Czy rozpocząć procedurę?'@
   )
|| return(0)
?};

_PAR:=tab_tmp(,
   'OD','DATE','Wypłata rachunków od dnia'@,
   'DO','DATE','Wypłaty rachunków do dnia'@
);
_we:=_PAR.mk_edit('Podaj dane'@,,'#zlec_korpod');
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,,'OD',,,11,,,'Wypłata rachunków od dnia'@,,'Początkowa data wypłaty rachunków'@);
_PAR.win_efld(_we,,'DO',,,11,,,'Wypłata rachunków do dnia'@,,'Końcowa data wypłaty rachunków'@);
_PAR.win_edit(_we);
_PAR.efld_opt(_we,'mark=1');
exec('ok_esc','#window',_PAR,_we);

_PAR.OD:=date(O.RP,O.MP,1);
_PAR.DO:=date(O.RP,O.MP,0);

_control:="
   _PAR:=cur_tab();
   {? (_chk:=__CHK.record(_PAR,,'OD','DO'))<>''
   || _chk
   |? _PAR.OD>_PAR.DO
   || FUN.info('Data \"Wypłata rachunków do dnia\" nie może być wcześniejsza od daty \"Wypłata rachunków od dnia\".'@);
      'DO'
   || ''
   ?}";

{? _PAR.edit(_control)
|| _poczatek:=_PAR.OD;
   _koniec:=_PAR.DO
|| FUN.emsg('Zrezygnowano z wyliczenia korekt.'@);
   return(0)
?};

FUN.emsg('Należy wybrać rodzaje umów dla rachunków podlegających korekcie.'@);
{? var_pres('__Tab')>0 || VAR_DEL.delete('__Tab') ?};
_typ:=exec('slo_typ','ext_slo','UMZLEC');
__Tab:=sql('
   select  K,O,
      CASE
         WHEN K=\'1\' THEN 1
         ELSE 0
      END as TA
   from RU
   where TYP =:_a
   order by 1',_typ);
_wnd:=__Tab.mk_sel('Rodzaje umów'@,,0,,,,,,'U');
__Tab.win_fld(_wnd,,'K',,,,,,'Rodzaj'@);
__Tab.win_fld(_wnd,,'O',,,,,,'Opis'@);
__Tab.win_fld(_wnd,,'TA',,,,,,'Wybrany'@,,,2,,"1","0");
__Tab.win_act(_wnd,0,'Formuła','Dalej'@,,'Wyjście z okna z zaznaczonymi pozycjami'@,"sel_exit()",,
   1,1,,,'D',,'target=window'
);
__Tab.win_act(_wnd,0,'Rekord',,,,"__Tab.TA=1");
__Tab.win_act(_wnd,0,'Formuła','Zaznacz/odznacz'@,,,
   "__Tab.TA:={? __Tab.TA=1 || 0 || 1 ?}; __Tab.put()",,0,1);
__Tab.win_btn(_wnd,'text=%1, icon=xwin16.png:22, btn_label_align=center, panel=bottom'['Dalej'@],'menu:D');
__Tab.win_sel(_wnd);
{? ~__Tab.select()
|| VAR_DEL.delete('__Tab');
   return(0)
?};
{? __Tab.first()
|| {!
   |? {? __Tab.TA=0
      || __Tab.del(,1)=2
      || __Tab.next()
      ?}
   !}
?};
{? ~__Tab.first()
|| VAR_DEL.delete('__Tab');
   return(0)
?};

LS.cntx_psh();
P.cntx_psh();
OSOBA.cntx_psh();
KT.cntx_psh();
O.cntx_psh();
RH.cntx_psh();
RHP.cntx_psh();

_c_pop:="
   LS.cntx_pop();
   P.cntx_pop();
   OSOBA.cntx_pop();
   KT.cntx_pop();
   O.cntx_pop();
   RH.cntx_pop();
   RHP.cntx_pop()
   ";
_licz:=0;

_mc:=O.MP;
_rok:=O.RP;
_data:=date(_rok,_mc,1);
_lista:=O.ref;
_lista_kor:=O.LT;

{? VAR.JESTLIST || FUNKCJE.ZAMKLIST() ?};

O.prefix();
P.prefix();
RH.prefix();
ZC.prefix();

_LHS_add:="
   {? R.seek(__RUB.ref(_a))
   || LS.prefix(RH.ref,_a);
      {? LS.first() || LS.del() ?};
      {? _b
      || LS.prefix();
         LS.blank(1);
         LS.KK:=RH.KK;
         LS.RH:=RH.ref;
         LS.P:=P.ref;
         LS.O:=_c;
         LS.RB:=R.ref;
         LS.LP:=R.LP;
         LS.KW:=_b;
         LS.add()
      ?}
   ?}";

_TAB_RH:=sql('select 0 P, 0 REF from SYSLOG where 1=2 order by 1,2');
_TAB_WYN:=sql('
   select NAZWISKO, PIERWSZE, PESEL, 0 PRAC, \'        \' LISTA, OSOBA.UR_DATA as DWY,
      \'                              \' ID, 0.01 as KW, 0.01 as OLD, 0.01 as NEW
   from  OSOBA where 1=2 order by 1,2,3,4
');

_zlicz:="
      _wyn:=0;
      _tab:=__RUB.sys_rub(_a);
      {? _tab.first()
      || {!
         |? LS.prefix(RH.ref(),_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
_zlicz_R:="
      _wyn:=0;
      LS.prefix(RH.ref(),_a);
      {? LS.first()
      || {!
         |? _wyn+=LS.KW;
            LS.next()
         !}
       ?};
      _wyn
   ";

_OS_ZW:=tab_tmp(2,
   'NAZWISKO','STRING[30]','Nazwisko'@,
   'PIERWSZE','STRING[30]','Imię'@,
   'PESEL','STRING[11]','Pesel'@,
   'REF','INTEGER','Ref osoby'@
);

RHP.index('RHP');
RHP.prefix();
RH.index('RACHDATA');
OSOBA.prefix();
O.cntx_psh();
LS.cntx_psh();
{? OSOBA.first()
|| {!
   |? _zal:=_prz:=0;
      RH.prefix(exec('ref_firma','ustawienia'),OSOBA.ref,_rok,_mc);
      {? RH.first() & ~exec('wn_podat_exist','lista_licz',OSOBA.ref,'TP_ZAL_Z',_data)
      ||
         {!
         |? _ok:=0;
            {? RH.KOR='T' & RH.Z='T' & RH.DWY>=_poczatek & RH.DWY<=_koniec
            || LS.use(RH.O().LT);
               LS.index('ZLEC');
               LS.prefix(RH.ref());
               {? LS.first()
               || {!
                  |? LS.del()
                  !};
                  RHP.prefix(RH.ref());
                  {? RHP.first()
                  || {!
                     |? RHP.del()
                     !}
                  ?};
                  _ok:=RH.del(,1)=2
               ?}
            ?};
            {? ~_ok || RH.next() || 1 ?}
         !};
         {? RH.first()
         || _zal:=0;
            {!
            |? {? __Tab.find_key(RH.ZLE().RU().K)
               || LS.use(RH.O().LT);
                  LS.index('ZLEC');
                  _zal+=_zlicz(9611);
                  _prz+=_zlicz(92)+_zlicz(5711)+_zlicz(5721)-_zlicz(9026)
               ?};
               RH.next()
            !};
            {? _zal>0 & _prz<=12800
            || _OS_ZW.blank(1);
               _OS_ZW.NAZWISKO:=OSOBA.NAZWISKO;
               _OS_ZW.PIERWSZE:=OSOBA.PIERWSZE;
               _OS_ZW.PESEL:=OSOBA.PESEL;
               _OS_ZW.REF:=#OSOBA.ref;
               _OS_ZW.add(1)
            ?}
         ?}
      ?};
      OSOBA.next()
   !}
?};
O.cntx_pop();
LS.cntx_pop();
{? _OS_ZW.first()
||
   {!
   |? {? OSOBA.seek(_OS_ZW.REF,)
      || _OSOBA:=OSOBA.ref;
         _TAB_RH.erase();
         _TAB_RH.prefix();
         OSOBA.seek(_OS_ZW.REF,);
         _OSOBA:=OSOBA.ref;
         RH.index('RACHDATA');
         RH.prefix(exec('ref_firma','ustawienia'),_OSOBA,_rok,_mc);

         {? RH.first()
         || {!
            |? RH.ZLE().P().OSOBA();
               {? RH.KOR<>'T' & RH.ZAS<>'T' & RH.ZC_INFO().KC='T' & __Tab.find_key(RH.ZLE().RU().K) &
                  RH.DWY>=_poczatek & RH.DWY<=_koniec & ~exec('wn_podat_exist','lista_licz',OSOBA.ref,'TP_ZAL_Z',RH.DWY)
               || LS.use(RH.O().LT);
                  LS.index('ZLEC');
                  LS.prefix(RH.ref());
                  {? LS.first()
                  || _p_new:=_zlicz(9611);
                     _p_nom_old:=_zlicz(95);
                     _kcp:=_zlicz(574110);
                     _wyn:=0;
                     _kco:=0;

:: wyliczenie składek na ubzp. zdrowotne od zwolnionego przychodu

                     {? ~_zlicz_R(31)
                     || _kc_zp:=_zlicz(9022)-_zlicz(9026);
                        _do_ulg:=_kc_zp+_zlicz(92)+_zlicz(5711)+_zlicz(57210);
                        _do_ulg-=_zlicz(9021);
                        _pod_zdr:=_zlicz(56411);
:: ustalenie udziału podstawy kasy chorych w ZP: Przychod
:: składki od zwolnionych przychodow nie podlegają odliczeniom
                        {? _do_ulg>_kc_zp
                        || _ogranicz:=1
                        || _ogranicz:=0
                        ?};
                        {? _ogranicz
                        || {? _do_ulg>0
                           || _ubz:={? _pom:=_pod_zdr; _pom<>0 || _pom+_zlicz(5711)+_zlicz(57210) ?};
                              _wsp:=_ubz/_do_ulg
                           || _wsp:=0
                           ?};
                           _wsp:={? _wsp>1 || 1 |? _wsp<0 || 0 || _wsp ?};
                           _kc_zp:=(_kc_zp*_wsp)$2
                        ||
:: _kc_zp:=podstawa ubezpieczenia zdrowotnego z bieżącego rachunku dla ZP przychód
                           _kc_zp:=_pod_zdr
                        ?};
:: DoList.z[20]=ZP skłądki zdrowotne pobr. z innych rachunków i list płac
                        _kc_zp:=(((_kc_zp)*7.75*0.01)$2);
:: wstepna skladka na ubez. zdrowotne jaka moze byc odliczona po odjeciu skladek policzonych od ZP: Przychod
                        _pom1:=(_pod_zdr*7.75*0.01)$2-_kc_zp;
:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
                        _pom2:=(_pod_zdr*7.75*0.01)$2;

:: odliczenie nie może przekroczyć 7,75 % procenta podstawy
                        _kct:={? _pom1>_pom2 || _pom2 || _pom1 ?};
                        {? _kct<0 || _kct:=0 ?};
                        {? _p_nom_old<_kct
                        || _kco:=_p_nom_old;
                           _p_nom_old:=0
                        || {? _p_nom_old<_kct
                           || _kco:=_p_nom_old
                           || _kco:=_kct
                           ?};
                           _p_nom_old-=_kco
                        ?}
                     ?};
                     _p_nom_old:=_p_nom_old$0;
                     _wyn:={? _p_nom_old<_p_new & _p_nom_old>=0 || _p_new-_p_nom_old ?};
                     {? _wyn
                     || RH.cntx_psh();
                        RH.index('RACHUNKI');
                        _ref_RH:=RH.ref;
                        RH.prefix(RH.ZLE,RH.DRA);

                        RH.cntx_pop();
                        RH.cntx_psh();
                        RH.BL:='T';
                        RH.Z:='T';
                        RH.KOR:='T';
                        RH.O:=_lista;
                        RH.DOK:='';
                        RHP.prefix(RH.ref);
                        {? RH.PR='T' & RHP.first()
                        || _rhp:=RHP.ref()
                        || _rhp:=null
                        ?};
                        {? RH.add(1)
                        || LS.use(_lista_kor);
                           LS.index('ZLEC');
                           LS.prefix();
                           R.prefix();
                           _LHS_add(797,_wyn*-1,_lista);
                           _LHS_add(950,_wyn*-1,_lista);
                           _LHS_add(7170,_wyn,_lista);
                           _LHS_add(7149,_kco,_lista);
                           _LHS_add(7171,_p_nom_old,_lista);
                           _LHS_add(7172,_p_new,_lista);
                           _LHS_add(990,_wyn,_lista);

                           {? _rhp
                           || RHP.prefix();
                              RHP.KW:=_wyn;
                              RHP.RH:=RH.ref();
                              {? RHP.add(1)
                              || _LHS_add(994,_wyn,_lista)
                              || _LHS_add(999,_wyn,_lista)
                              ?}
                           || _LHS_add(999,_wyn,_lista)
                           ?}
                        ?};
                        _TAB_RH.REF:=#RH.ref;
                        _TAB_RH.P:=#RH.ZLE().P;
                        _TAB_RH.add();
                        RH.cntx_pop()
                     ?}
                  ?}
               ?};
               RH.next()
            !}
         ?};

         P.prefix();
         RH.prefix();
         {? var_pres('_TAB_P')>100 || obj_del(_TAB_P) ?};
         _TAB_P:=sql('select distinct P from :_a order by 1',_TAB_RH);

         {? _TAB_P.first()
         || {!
            |? {? P.seek(_TAB_P.P,)
               ||
                  _TAB_RH.prefix(_TAB_P.P);
                  {? _TAB_RH.first()
                  ||
                     {!
                     |? {? RH.seek(_TAB_RH.REF,)
                        || LS.use(RH.O().LT);
                           LS.index('ZLEC');
                           LS.prefix(RH.ref());
                           _TAB_WYN.blank(1);
                           _TAB_WYN.NAZWISKO:=_OS_ZW.NAZWISKO;
                           _TAB_WYN.PIERWSZE:=_OS_ZW.PIERWSZE;
                           _TAB_WYN.PESEL:=_OS_ZW.PESEL;
                           _TAB_WYN.PRAC:=0;
                           _TAB_WYN.DWY:=RH.DWY;
                           _TAB_WYN.ID:=RH.ZLE().NU;
                           _TAB_WYN.LISTA:=~-RH.O().LT;

                           {? LS.first()
                           || {? LS.find_key(7170)
                              || _TAB_WYN.KW:=LS.KW
                              ?};
                              {? LS.find_key(7171)
                              || _TAB_WYN.OLD:=LS.KW
                              ?};
                              {? LS.find_key(7172)
                              || _TAB_WYN.NEW:=LS.KW
                              ?}
                           ?};
                           _TAB_WYN.add(1)
                        ?};
                        _TAB_RH.next()
                     !}
                  ?}
               ?};
               _TAB_P.next()
            !}
         ?}
      ?};
      _OS_ZW.next()
   !}
?};
_c_pop();

:: Komunikaty
_var:=VAR_DEL.new(,"obj_new(@.CLASS.JCQ)");
{? var_pres('Komm') || VAR_DEL.delete('Komm') ?};
Komm:=($_var)();
Komm.init(150,,'Informacje o danych korekty'@,'');
_TAB_WYP:=sql('select distinct NAZWISKO, PIERWSZE, PESEL from :_a order by 1,2,3',_TAB_WYN);
{? _TAB_WYP.first()
|| {!
   |? _K_p:=Komm.sect_beg(' '+_TAB_WYP.NAZWISKO+' '+_TAB_WYP.PIERWSZE+' ' +_TAB_WYP.PESEL,'xwin16.png:100');
      Komm.chngroot(_K_p);
      Komm.sect_end();
      _TAB_WYN.prefix(_TAB_WYP.NAZWISKO, _TAB_WYP.PIERWSZE, _TAB_WYP.PESEL);
      {? _TAB_WYN.first()
      || {!
         |?
            _icon:='xwin16.png:1';
            _txt:='Skorygowana zaliczka na podatek: %1 zł dla rachunku z dnia: %2, zaliczka wg zasad z 2021r.: %3 zł,'
               ' korekta: %4 zł'@[$_TAB_WYN.NEW,$_TAB_WYN.DWY,$_TAB_WYN.OLD,$_TAB_WYN.KW];
            _K_tab:=Komm.sect_beg(_txt,_icon);
            Komm.chngroot(_K_tab,_K_p);
            Komm.sect_end();
            _TAB_WYN.next()
         !}
      ?};
      _TAB_WYP.next()
   !}
?};
filekor:='kor'+form(date()~1-2000,-2,0,'99')+form(date()~2,-2,0,'99')+form(date()~3,-2,0,'99')
   +form(time()~1,-2,0,'99')+form(time()~2,-2,0,'99')+form(time()~3,-2,0,'99')
   +'.log';
Komm.select(,,"
   {? Komm.save(filekor)
   || FUN.info(exec('inf_path','edi_wspolne','Zapisano plik: [%1]'@[pth_dir(filekor)+'\\\\'+filekor]))
   ?};1",,{? _>0 & type_of(_a)=2 || _a || ''?});
VAR_DEL.delete(Komm,filekor);
{? var_pres('_var')>0 || VAR_DEL.delete(_var) ?};
{? var_pres('__Tab')>0 || VAR_DEL.delete('__Tab') ?};

1


\zal_pod_doch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie zaliczki na podatek oraz nadmiaru i różnicy ujemnej.
::   WE:
::   WY:
::  OLD: \zal_pod_doch/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.DWY~1>2021 & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| {? RH.DWY~1=2022
   || {? exec('wn_podat_exist','lista_licz',RH.ZLE().OSOBA,'UZ_POD',RH.DWY)
      || return(0)
      ?}
   ?}
?};
_wynik:=0;
_new:=
   {? RH.DWY~1>2022
   || 2
   |? RH.DWY~1=2022
   || _par334:=exec('get_par_date','parametr',334);
      _par334>date(0,0,0) & _par334<=RH.DWY
   ?};

{? RH.DWY~1<2022 | _new
|| _kw:=FUNKCJE.Z(790)-FUNKCJE.Z(793,795);
   _wynik:={? _kw<0 || 0 || _kw ?}$(RH.DWY~1<2006);
   {? _new=1
   || FUNKCJE.ZK(__RUB.sys_kod(9073),,0);
      FUNKCJE.ZK(__RUB.sys_kod(9074),,0);
      FUNKCJE.ZK(__RUB.sys_kod(9077),,0);
      FUNKCJE.ZK(__RUB.sys_kod(9078),,0)
   ?}
||
   _attr:=tab_tmp(1,'ATRYBUT','INTEGER',,'MINUS','INTEGER',);
   _attr.ATRYBUT:=92; _attr.add();

   _attr.ATRYBUT:=5711; _attr.add();
   _attr.ATRYBUT:=5721; _attr.add();
   _attr.ATRYBUT:=9026; _attr.MINUS:=1; _attr.add();
   _limit:=FUNKCJE.Z_SYS(92)+FUNKCJE.Z_SYS(5711)+FUNKCJE.Z_SYS(5721)-FUNKCJE.Z_SYS(9026);
   _limit+=exec('zlicz_RH','zlec_rh',_attr,RH.DWY~1,RH.DWY~2,RH.ref(),'PTPZP');

   _test:=exec('test_OLD','lista_licz',RH.DWY,1);

:: naliczenie zaliczki wg zasad na dzień 31.12.2022r.
   _pod_old:=(FUNKCJE.Z_SYS(9079)-FUNKCJE.Z(794,795)-FUNKCJE.Z_SYS(9067))$0;
   FUNKCJE.ZK(__RUB.sys_kod(9073),,_pod_old);

:: naliczenie zaliczki wg nowych zasad
   _pod_new:=(FUNKCJE.Z(790)-FUNKCJE.Z(795))$0;
   FUNKCJE.ZK(__RUB.sys_kod(9074),,_pod_new);
: naliczenie zaliczki na podatek wynikowej mniejszej
   _zapis:=exec('p_npod_del','lista_licz','Z',P.ref,RH.O,RH.ref);
   _wynik:=0;
   {? ~_test
   || _wynik:=_pod_new;
      FUNKCJE.ZK(__RUB.sys_kod(9077),,0);
      FUNKCJE.ZK(__RUB.sys_kod(9078),,0)
   |? _limit>KST.PZ_LP
   || _nadwyzka:=exec('wylicz_npod','lista_licz',RH.DWY~1,RH.DWY~2,O.D,O.N,'Z','N',RH.DWY,1);
      _roznica:=exec('wylicz_npod','lista_licz',RH.DWY~1,RH.DWY~2,O.D,O.N,'Z','R',RH.DWY,1);
      {? _nadwyzka
      || FUNKCJE.ZK(__RUB.sys_kod(9077),,-_nadwyzka);
        {? _zapis
        || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,RH.O,RH.ref,'Z',RH.DWY~1,RH.DWY~2,'N',-_nadwyzka)
        ?}
      || FUNKCJE.ZK(__RUB.sys_kod(9077),,0)
      ?};
      {? _roznica
      || FUNKCJE.ZK(__RUB.sys_kod(9078),,-_roznica);
         {? _zapis
         || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,RH.ref,'Z',RH.DWY~1,RH.DWY~2,'R',-_roznica)
         ?}
      || FUNKCJE.ZK(__RUB.sys_kod(9078),,0)
      ?};
      _wynik:=_pod_new+_nadwyzka-roznica
   |? _pod_old=_pod_new
   || _wynik:=_pod_new;
      FUNKCJE.ZK(__RUB.sys_kod(9077),,0);
      FUNKCJE.ZK(__RUB.sys_kod(9078),,0)
   |? _pod_old>_pod_new
   || _roznica:=exec('wylicz_bilans','lista_licz',RH.DWY~1,RH.DWY~2,O.D,O.N,'Z',_pod_old-_pod_new,RH.DWY);
      FUNKCJE.ZK(__RUB.sys_kod(9078),,_roznica);
      FUNKCJE.ZK(__RUB.sys_kod(9077),,0);
      _wynik:=_pod_new+_roznica;
      {? _zapis
      || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,RH.ref,'Z',RH.DWY~1,RH.DWY~2,'R',_roznica)
      ?}
   || _nadwyzka:=_pod_new-_pod_old;
      FUNKCJE.ZK(__RUB.sys_kod(9077),,_nadwyzka);
      FUNKCJE.ZK(__RUB.sys_kod(9078),,0);
      _wynik:=_pod_old;
      {? _zapis
      || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,RH.ref,'Z',RH.DWY~1,RH.DWY~2,'N',_nadwyzka)
      ?}
   ?}
?};
_wynik


\zlicz_RH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zliczenie składników płacowych wg atrybutu z wszystkich rachunków miesiąca dla OSOBY.
::   WE: _a [TAB] - zbiór numerów atrybutów w postaci tabeli -
::                  ATRYBUT[INT] - numer atrybutu
::                  MINUS[INT] (jeśli minus=1 to odjęcie wartości)
::       _b [INT] - rok
::       _c [INT] - mc
::       [_d] [RH.ref] - jeśli podany - z pominięciem danych z tego rachunku
::       [_e] [STRING] - akronim pola weryfikacji typu umowy zaznaczonego na 'T' - domyślnie wszystkie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_attr:={? var_pres('_a')>100 || _a || return(0) ?};
_rok:={? var_pres('_b')=type_of(0) & _b || _b || return(0) ?};
_mc:={? var_pres('_c')=type_of(0) & _c || _c || return(0) ?};
_rh:={? var_pres('_d')=type_of(null) & _d || _d || null ?};
_typ:={? var_pres('_e')=type_of('') || _e || '' ?};
O.cntx_psh();
RH.cntx_psh();
ZC.cntx_psh();
LS.cntx_psh();
RH.index('RACHDATA');
RH.prefix(exec('ref_firma','ustawienia'),RH.ZLE().OSOBA,_rok,_mc);
_wynik:=0;
{? RH.first()
|| _sum:="
      _wyn:=0;
      _tab:=__RUB.sys_rub(_a);
      {? _tab.first()
      || {!
         |? LS.prefix(RH.ref(),_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW$2; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   {!
   |? _ok:=0;
      _ok:=_rh=RH.ref();
      {? ~_ok & _typ<>''
      || {? _typ='PTPZP' & var_pres('PTPZP',RU)<=0
         || _ok+=~('1,'*RH.ZLE().RU().K)
         || _ok+=($('RH.ZLE().RU().'+_typ))()<>'T'
         ?}
      ?};
      {? ~_ok
      || RH.O();
         LS.use(-('L'+($O.R+2)+('00'+$O.M+2)+O.T().T));
         LS.index('ZLEC');
         LS.prefix(RH.ref());

         {? LS.first()
            || {? _attr.first()
               || {!
                  |? {? _attr.MINUS
                     || _wynik-=_sum(_attr.ATRYBUT)
                     || _wynik+=_sum(_attr.ATRYBUT)
                     ?};
                     _attr.next()
                  !}
               ?}
            ?}
      ?};
      RH.next()
   !}
?};
LS.cntx_pop();
O.cntx_pop();
RH.cntx_pop();
ZC.cntx_pop();
_wynik


\add_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wprowadzenie zapisów z rachunków korekcyjnych do tabeli nadwyżek - Polski ład
::   WE:
::   WY:
::  OLD: \add_kod/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('%1\n%2'['Wprowadzenie zapisów z listy korekcyjnej do tabeli nadwyżek - Polski ład.'@,'Kontynuować?'@])
|| return(0)
?};
{? var_pres('P_NPOD')<>type_of(SYSLOG)
|| FUN.emsg('Brak w systemie tabeli nadwyżek dla polskiego ładu.'@);
   return(0)
?};

_PAR:=tab_tmp(,
   'ROK','INTEGER','Rok rachunków korekt'@,
   'MC','INTEGER','Miesiąc rachunków korekt'@
);
_we:=_PAR.mk_edit('Podaj dane'@,,'#zlec_rackor');
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,,'ROK',,,11,,,'Rok rachunków korekt'@,,'Rok rachunków korekcyjnych'@);
_PAR.win_efld(_we,,'MC',,,11,,,'Miesiąc rachunków korekt'@,,'Miesiąc rachunków korekcyjnych'@);
_PAR.win_edit(_we);
_PAR.efld_opt(_we,'mark=1');
exec('ok_esc','#window',_PAR,_we);

_PAR.ROK:=date()~1;
_PAR.MC:=date()~2;

_control:="
   _PAR:=cur_tab();
   {? (_chk:=__CHK.record(_PAR,,'ROK','MC'))<>''
   || _chk
   || ''
   ?}";

{? _PAR.edit(_control)
|| _rok:=_PAR.ROK;
   _mc:=_PAR.MC
|| FUN.emsg('Zrezygnowano z nanoszenia korekt.'@);
   return(0)
?};

O.cntx_psh();
LS.cntx_psh();
P.cntx_psh();
_tab:=sql('
   select RH.REFERENCE as REF
   from RH
   where RH.R=:_a and RH.M=:_b and RH.KOR=\'T\'',
   _rok,_mc);

{? _tab.first()
|| {!
   |? {? RH.seek(_tab.REF)
      || RH.O(); RH.ZLE();ZC.P();
         {? LS.use(O.LT)
         || LS.index('ZLEC');
            LS.prefix(RH.ref(),7170);
            {? LS.first()
            || {? LS.KW>0
               || {? exec('p_npod_del','lista_licz','Z',RH.ZLE().P,O.ref(),RH.ref())
                  || exec('p_npod_add','lista_licz',LS.P,LS.P().OSOBA,O.ref(),RH.ref(),'Z',O.RP,O.MP,'N',LS.KW,'T')
                  ?}
               ?}
            ?}
         ?}
      ?};
      _tab.next()
   !}
?};
LS.cntx_pop();
O.cntx_pop();
P.cntx_pop();
1


\przychod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła płacowa składnika 780: Podst. opodatkowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('KST_PPK')=type_of(SYSLOG)  & ~FUNKCJE.Z(7093) || exec('del_O_RH','ppk_kwn',P.ref,O.ref,RH.ref,'W') ?};
{? RH.ZAS='T' || return(0) ?};
_wyn:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779);

:: 31 Podatek ryczałtowy
{? ~FUNKCJE.Z(31)
|| _zp_prz:=FUNKCJE.Z_SYS(9022);
   {? _zp_prz
   || _zp_skl:=FUNKCJE.Z(765,767)-FUNKCJE.Z_SYS(9026)
   || _zp_skl:=FUNKCJE.Z(765,767)
   ?};
   _wyn-=_zp_skl;
   _wyn-=_zp_prz;

:: Odliczenie diet kierowcy pomniejszających przychód i składników nie stanąwiących podst. opod.:
:: 7197: OZ: Diety pomn. prz.
   _wyn-=FUNKCJE.Z(7197);
:: 7195 (Sk. nst. obn. p. op.)Składki niestanowiące obniżenia podstawy opodatkowania
   _skl_nop:=FUNKCJE.Z(7195);
:: 23.25_PMO01 - rezygnacja z ograniczania wysokości _skl_nop do wysokości składek na liście
   _wyn+=_skl_nop
?};
{? _wyn>0
|| FUNKCJE.ZK(784,,exec('KU','zlec_rh',_wyn));
   _wyn
|| FUNKCJE.ZK(784,,0);
   0
?}


\skl_zlec_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenia dotyczące podstawy składek (umowy cywilnoprawne).
::   WE:
::   WY:
::  OLD: \skl_zlec/podst_sk.fml
::  OLD: \skl_zlec_podst_sk/!ppl_pll_nals.fml
::----------------------------------------------------------------------------------------------------------------------
{! _n:=1..obj_len(DoList.k) |! DoList.k[_n]:=0 !};
RH.cntx_psh();
RH.index('RACHDATA');
RH.prefix(exec('ref_firma','ustawienia'),P.OSOBA,O.RU,O.MU);
O.cntx_psh();
LS.cntx_psh();
{? RH.first()
|| _zlicz:="
      _wyn:=0;
      _data:={? var_pres('_b')=type_of(date) || _b || date() ?};
      _tab:=__RUB.sys_rub(_a,_data);
      {? _tab.first()
      || {!
         |? LS.prefix(RH.ref(),_tab.RN);
            {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
            _tab.next()
         !}
      ?};
      _wyn
   ";
   _zliczRN:="
      _wyn:=0;
      LS.prefix(RH.ref(),_a);
      {? LS.first() || {! |? _wyn+=LS.KW; LS.next() !} ?};
      _wyn
   ";
   {!
   |? LS.use(RH.O().LT);
      LS.index('ZLEC');
      RH.ZC_INFO();
      {? ZC_INFO.FP='T'
      || DoList.k[16]+=_zlicz(5651);
         DoList.k[13]+=_zlicz(5751)
      ?};

      {? ZC_INFO.FG='T'
      || DoList.k[12]+=_zlicz(5651);
         DoList.k[14]+=_zlicz(5752)
      ?};

      {? 2+RH.ZC_INFO().TTUB().KOD='01'
      || DoList.k[1]+=_zlicz(56111);
         DoList.k[5]+=_zlicz(57111);
         DoList.k[6]+=_zlicz(57112);
         DoList.k[15]+=_zlicz(57122);
         {? ZC_INFO.FC='T'
         || DoList.k[2]+=_zlicz(5631);
            DoList.k[7]+=_zlicz(5721)
         ?};
         {? ZC_INFO.FW='T'
         || DoList.k[3]+=_zlicz(5621);
            DoList.k[8]+=_zlicz(5731)
         ?};
         {? ZC_INFO.KC='T'
         || _kcp:=_zlicz(56411);
            _kc_zp:=_zlicz(9027);
            _kco:=_zlicz(57412);
            _kco+=_zlicz(9067);
            DoList.k[4]+=_kcp;
            DoList.k[11]+={? _kco | _kc_zp || _kcp ?};
            DoList.k[9]+=_zlicz(57411);
            DoList.k[10]+=_kco;
:: ZP: składka ub. zdro.
            DoList.k[19]+=_kc_zp;
:: podstawa ub. zdrowotnego
            DoList.k[20]+=_zlicz(56411)+_zlicz(5711)+_zlicz(57210);
:: przychód
            DoList.k[21]+=_zlicz(9022)-_zlicz(9026)+_zlicz(92)+_zlicz(5711)+_zlicz(57210);
            DoList.k[21]-=_zlicz(9021,RH.DWY);
:: ZP: Przychod bez składek
            DoList.k[22]+=_zlicz(9022)-_zlicz(9026);
:: ZP: Przychod
            DoList.k[23]+=_zlicz(9022)
         ?};
         {? ZC_INFO.FP='T' | ZC_INFO.FG='T'
:: Podstawa FP i FGŚP
         || DoList.k[24]+=_zlicz(5651)
         ?};
:: OZ: Pom. p. em.i re.
         DoList.k[25]+=_zlicz(9016);
:: OZ: Pom. p. ch.i wy.
         DoList.k[26]+=_zlicz(9017);
:: OZ: Pom. p. ub. zdr..
         DoList.k[27]+=_zlicz(9018);
:: OZ: Pom. p. FP i FG.
         DoList.k[28]+=_zlicz(9019);
:: OZ: Pom. podst. PPK
         DoList.k[29]+=_zlicz(90101);
:: Podstawa PPK
         DoList.k[30]+=_zlicz(70);
:: Ulga podatkowa
         {? exec('test_par','parametr',336,'T',,2) & RH.ZLE().RU().UP='T'
         || DoList.k[31]+=_zlicz(94)
         ?};
:: OZ: Pow. p. em.i re.
         DoList.k[32]+=_zlicz(901111);
:: OZ: Pow. p. ch.i wy.
         DoList.k[33]+=_zlicz(901112);
:: OZ: Pow. p. ub. zdr..
         DoList.k[34]+=_zlicz(901113);
:: OZ: Pow. p. FP i FG.
         DoList.k[35]+=_zlicz(901114);
:: OZ: Pow. podst. PPK
         DoList.k[36]+=_zlicz(901115);
:: OZ: Diety mobilne
         DoList.k[37]+=_zlicz(90108);
:: Zwroty kierowcy (pakiet mobilności)
         DoList.k[38]+=_zlicz(90110);
:: Przychód do wyliczeń
         DoList.k[39]+=_zliczRN(7200);
:: Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą)
         DoList.k[40]+=_zlicz(90102);
:: Kwota diet kierowcy pomniej. przychód (pak. mob.)
         DoList.k[41]+=_zlicz(90109);
:: Kwota diet obniżająca przychód (7197. OZ: Diety pomn. prz.)
         DoList.k[42]+=_zlicz(90103);
:: Kwota diet pomniejszająca przychód (ZDR)
         DoList.k[43]+=_zlicz(9068);
:: Składniki niestanowiące przychodu do proporcji
         DoList.k[44]+=_zlicz(90106);
:: Składki niestanowiące obniżenia podstawy opodat. (7195 OZ: Sk. nst. ob. p.)
         DoList.k[45]+=_zlicz(90104);
:: Składki niestanowiące obniżenia podstawy opodat. (7199 ZDR: Sk. nst. ob. p.)
         DoList.k[46]+=_zlicz(9069)

:: Tylko umowy zlecenia z kodem tytułu ubezpieczenia nie rozpoczynającym się od 01
      |? RH.ZLE().RU().K='1'
      ||
:: TTUB<>01 Podstawa em-rent (odpowiednik DoList.k[1])
         DoList.k[47]+=_zlicz(56111);
:: TTUB<>01 Składki 765-767 (odpowiednik DoList.k[5]+DoList.k[6]+DoList.k[7])
         DoList.k[48]+=_zlicz(57111)+_zlicz(57112);
         {? ZC_INFO.FC='T'
         || DoList.k[48]+=_zlicz(5721)
         ?};
:: TTUB<>01 OZ: Pom. p. em.i re. (odpowiednik DoList.k[25])
         DoList.k[49]+=_zlicz(9016);
:: TTUB<>01 OZ: Pom. p. ch.i wy. (odpowiednik DoList.k[26])
         DoList.k[50]+=_zlicz(9017);
:: TTUB<>01 OZ: Pom. p. ub. zdr. (odpowiednik DoList.k[27])
         DoList.k[51]+=_zlicz(9018);
:: TTUB<>01 OZ: Pom. p. FP i FG. (odpowiednik DoList.k[28])
         DoList.k[52]+=_zlicz(9019);
:: TTUB<>01 OZ: Pom. podst. PPK (odpowiednik DoList.k[29])
         DoList.k[53]+=_zlicz(90101);
:: TTUB<>01 Podstawa PPK (odpowiednik DoList.k[30])
         DoList.k[54]+=_zlicz(70);
:: TTUB<>01 OZ: Pow. p. em.i re. (odpowiednik DoList.k[32])
         DoList.k[55]+=_zlicz(901111);
:: TTUB<>01 OZ: Pow. p. ch.i wy. (odpowiednik DoList.k[33])
         DoList.k[56]+=_zlicz(901112);
:: TTUB<>01 OZ: Pow. p. ub. zdr. (odpowiednik DoList.k[34])
         DoList.k[57]+=_zlicz(901113);
:: TTUB<>01 OZ: Pow. p. FP i FG. (odpowiednik DoList.k[35])
         DoList.k[58]+=_zlicz(901114);
:: TTUB<>01 OZ: Pow. podst. PPK (odpowiednik DoList.k[36])
         DoList.k[59]+=_zlicz(901115);
:: TTUB<>01 OZ: Diety mobilne (odpowiednik DoList.k[37])
         DoList.k[60]+=_zlicz(90108);
:: TTUB<>01 Zwroty kierowcy (pakiet mobilności) (odpowiednik DoList.k[38])
         DoList.k[61]+=_zlicz(90110);
:: TTUB<>01 Przychód do wyliczeń (odpowiednik DoList.k[39])
         DoList.k[62]+=_zliczRN(7200);
:: TTUB<>01 Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą) (odpowiednik DoList.k[40])
         DoList.k[63]+=_zlicz(90102);
:: TTUB<>01 Kwota diet kierowcy pomniej. przychód (pak. mob.) (odpowiednik DoList.k[41])
         DoList.k[64]+=_zlicz(90109);
:: TTUB<>01 Kwota diet obniżająca przychód (7197. OZ: Diety pomn. prz.) (odpowiednik DoList.k[42])
         DoList.k[65]+=_zlicz(90103);
:: TTUB<>01 Kwota diet pomniejszająca przychód (ZDR) (odpowiednik DoList.k[43])
         DoList.k[66]+=_zlicz(9068);
:: TTUB<>01 Składniki niestanowiące przychodu do proporcji (odpowiednik DoList.k[44])
         DoList.k[67]+=_zlicz(90106);
:: TTUB<>01 Składki niestanowiące obniżenia podstawy opodat. (7195 OZ: Sk. nst. ob. p.) (odpowiednik DoList.k[45])
         DoList.k[68]+=_zlicz(90104);
:: TTUB<>01 Składki niestanowiące obniżenia podstawy opodat. (7199 ZDR: Sk. nst. ob. p.) (odpowiednik DoList.k[46])
         DoList.k[69]+=_zlicz(9069);
:: TTUB<>01 Podstawa Chorobowo-Wypadkowa (odpowiednik DoList.k[3])
         {? ZC_INFO.FW='T'
         || DoList.k[70]+=_zlicz(5621)
         ?};
:: TTUB<>01 ZP: Przychod (odpowiednik DoList.k[23])
         DoList.k[71]+=_zlicz(9022);
:: TTUB<>01 podstawa ub. zdrowotnego (odpowiednik DoList.k[20])
         {? ZC_INFO.KC='T'
         || DoList.k[72]+=_zlicz(56411)+_zlicz(5711)+_zlicz(57210)
         ?};
:: TTUB<>01 Podstawa FP i FGŚP (odpowiednik DoList.k[24])
         {? ZC_INFO.FP='T' | ZC_INFO.FG='T'
         || DoList.k[73]+=_zlicz(5651)
         ?}
      ?};

      RH.next()
   !}
?};
O.cntx_pop();
LS.cntx_pop();
RH.cntx_pop()


\rh_blokada
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Operacja grupowa "Blokada rachunków"
::       Funkcja wyświetla niezablokowane rachunki oraz pozwala na zmianę statusu blokady
::  OLD: \rh_blokada/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
:{? ~__F_ZATR.P('Z') || return(0) ?};

_where:='';
{? FUN.ask('Czy chcesz wprowadzić zakres dat dla blokowania rachunków?'@)
|| _par:=tab_tmp(,
      'DATA','INTEGER','Wybrana data'@,
      'OD','DATE','Data od'@,
      'DO','DATE','Data do'@
   );
   _we:=_par.mk_edit('Podaj dane'@,,'#rh_blokada_par');
   _par.win_esep(_we,'Parametry'@);
   _par.win_efld(_we,,'DATA',,,,,,'Okres przygotowania wydruku wg'@,,
         'Data wg której filtrowane będą umowy'@,'radio-buttons',,'Daty wypłaty'@,"1",'Daty rachunku'@,"2");
   _par.win_efld(_we,,'OD',,,11,,,'Data od'@,,'Data początkowa'@);
   _par.win_efld(_we,,'DO',,,11,,,'Data do'@,,'Data końcowa'@);
   exec('ok_esc','#window',_par,_we);
   _par.win_edit(_we);

   _par.OD:=date(,,1);
   _par.DO:=date(,,0);

   _valid:="
      _par:=cur_tab();
      {? (_chk:=__CHK.record(_par,,'OD','DO'))<>''
      || _chk
      |? _par.OD>_par.DO
      || FUN.emsg('\"Data do\" nie może być wcześniejsza niż \"Data od\".'@);
         'DO'
      || ''
      ?}
   ";

   {? _par.edit(_valid)
   || _field:={? _par.DATA=1 || 'RH.DWY' || 'RH.DRA' ?};
      _where:=' and '+_field+' >= to_date(\''+$_par.OD+'\') and '+_field+' <=to_date(\''+$_par.DO+'\') '
   || return()
   ?}
?};

:: Zebranie rachunków z zadanego przedziału
_sql:='select OSOBA.NAZWISKO, OSOBA.PIERWSZE, UD_SKL.SYMBOL OD, ZC.NU, RH.DRA, RH.DWY, RH.REFERENCE REF, RH.BL WYBRANY';
_sql+=' from RH join ZC using(RH.ZLE,ZC.REFERENCE) join UD_SKL using(ZC.WYDZIAL,UD_SKL.REFERENCE)';
_sql+=' join OSOBA';
_sql+=' where RH.FIRMA=:_a and RH.BL =\'N\'';
_sql+=_where;

_RH:=sql(_sql,exec('ref_firma','ustawienia'));
_ndx_RH:=_RH.ndx_tmp(,1,'OD',,0,'NAZWISKO',,0,'PIERWSZE',,0,'DWY',,0);
_ndx_RH_B:=_RH.ndx_tmp(,1,'WYBRANY',,0,'OD',,0,'NAZWISKO',,0,'PIERWSZE',,0,'DWY',,0);
_RH.fld_attr(,2);

_wnd:=_RH.mk_sel('Wykaz rachunków do zablokowania'@,,0,'rh_blokada',6,3,,,'U');
_RH.win_fld(_wnd,,'OD',,,8,,1,'Jednostka organizacyjna'@,,'Jednostka organizacyjna'@);
_RH.win_fld(_wnd,,'NAZWISKO',,,25,,1,'Nazwisko'@,,'Aktualne nazwisko'@);
_RH.win_fld(_wnd,,'PIERWSZE',,,20,,1,'Imię'@,,'Pierwsze imię'@);
_RH.win_fld(_wnd,,'NU',,,10,,1,'Numer umowy'@,,'Numer umowy'@);
_RH.win_fld(_wnd,,'DRA',,,10,,1,'Data rachunku'@,,'Data wystawienia rachunku do umowy'@);
_RH.win_fld(_wnd,,'DWY',,,10,,1,'Data wypłaty'@,,'Data wypłaty wynagrodzenia'@);
_RH.win_fld(_wnd,,'WYBRANY',,,,,1,'Wybrany'@,,'Rachunek wybrany do zablokowania [T/N]'@,2,,"'T'","'N'","");
:: Akcje okienka
_RH.win_act(_wnd,,'Formuła','Wybierz'@,,'Wybranie rachunku'@,"cur_tab(1,1).WYBRANY:='T'","cur_tab(1,1).put()",
   1,1,,,'W'
);
_RH.win_act(_wnd,,'Formuła','Pomiń'@,,'Pominięcie rachunku'@,"cur_tab(1,1).WYBRANY:='N'","cur_tab(1,1).put()",,
   1,,,'P'
);
_RH.win_act(_wnd,,'Formuła','Dalej'@,,'Przejście do kolejnego kroku przetwarzania'@,,"sel_exit()",,,,,
   'D',,'target=window'
);
:: Przyciski
_RH.win_btn(_wnd,'text=%1,icon=xwin16.png:22,panel=bottom'['Dalej'@],'menu:D');
_RH.win_btn(_wnd,'text=%1,icon=xwin16.png:14,panel=bottom'['Anuluj'@],'key:Esc');

{!
|? _RH.index(_ndx_RH);
   _RH.prefix();
   _RH.win_sel(_wnd);
   {? _RH.first()
   || {? _RH.select()
      || _RH.index(_ndx_RH_B);
         _RH.prefix('T');
         {? _RH.first()
         || {? (_esc:=FUN.choice(
                  'Czy dokonać zmiany statusu blokady dla zaznaczonych w sesji rachunków?'@,,'Tak'@,'Nie'@
               ))=1
            || _rh_err:=tab_tmp(3,
                  'OD','STRING[8]','Oddział',
                  'NAZWISKO','STRING[30]','Nazwisko',
                  'PIERWSZE','STRING[20]','Imię',
                  'NU','STRING[10]','Numer umowy',
                  'DRA','DATE','Data rachunku',
                  'DWY','DATE','Data wypłaty'
               );
               _wnd_err:=_rh_err.mk_sel(
                  'Wykaz rachunków, które nie mogły być zablokowane w tej sesji.'@,,1,'rh_blokada2',10,10
               );
               _rh_err.win_sel(_wnd_err);
               RH.cntx_psh();
               RH.prefix();
               do();
               {!
               |? {? RH.seek(_RH.REF,RH.name) & RH.ZLE().NU=_RH.NU & RH.DRA=_RH.DRA & RH.DWY=_RH.DWY
                  || RH.BL:='T';
                     _error:=RH.put(1)
                  || _error:=0
                  ?};
                  {? ~_error
                  || _rh_err.blank(1);
                     {! _ind:=1..6
                     |! _acr:=_RH.fld_acr(_ind);
                        ($(_rh_err+'.'+_acr))():=($(_RH+'.'+_acr))()
                     !};
                     _rh_err.add(1)
                  ?};
                  _RH.next()
               !};
               end();
               RH.cntx_pop();
               {? _rh_err.first() || _rh_err.select(0) ?};
               obj_del(_rh_err);0
            ?}
         || FUN.info('Brak rachunków do przetworzenia.'@);
            _esc:=0
         ?}
      || _esc:=0
      ?}
   || FUN.info('Brak rachunków do przetworzenia.'@);
      _esc:=0
   ?}; _esc=2
!};
obj_del(_RH);
&_ndx_RH; &_ndx_RH_B


\ZP_mac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zwolniony przychód z zasiłku macierzyńskiego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_new:=
   {? RH.DWY~1>2022
   || 1
   |? RH.DWY~1=2022
   || _par334:=exec('get_par_date','parametr',334);
      _par334>date(0,0,0) & _par334<=RH.DWY
   ?};
_wynik:=0;
{? _new & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| _mac:=FUNKCJE.Z_SYS(552);
   {? RH.ZAS='T'
   || {? _mac>0
      || _wynik:=__ZW_PRZ.MAC:=FUNKCJE.Z_SYS(9022)
      ?}
   || _wynik:=__ZW_PRZ.MAC
   ?}
?};
_wynik


\ZP_umowa_zlecenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zwolniony przychód z umowy zlecenia.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.ZAS='T' || return(0) ?};
_new:=
   {? RH.DWY~1>2022
   || 1
   |? RH.DWY~1=2022
   || _par334:=exec('get_par_date','parametr',334);
      _par334>date(0,0,0) & _par334<=RH.DWY
   ?};
_wynik:=0;
{? _new & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
|| _zp_przychod:=FUNKCJE.Z_SYS(9022);
   _mac:=FUNKCJE.Z_SYS(552);
   {? _zp_przychod
   || _przychod:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779)-_mac;
      {? _mac>0
      || {? _przychod>=_zp_przychod
         || _wynik:=__ZW_PRZ.PRACA:=_zp_przychod;
            __ZW_PRZ.MAC:=0
         || _wynik:=__ZW_PRZ.PRACA:=_przychod;
            __ZW_PRZ.MAC:=_zp_przychod-_przychod
         ?}
      || _wynik:=__ZW_PRZ.PRACA:=_zp_przychod;
         __ZW_PRZ.MAC:=0
      ?}
   ?}
?};
_wynik


\skl_n_p_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła płacowa (Składki niestanowiące obniżenia podstawy opodatkowania)
::   WE: _a [INTEGER] - numer atrybutu do zliczania już potrąconych diet
::       _b [INTEGER] - numer atrybutu "Składki niestanowiące obniżenia podstawy opodatkowania"
::      [_c][INTEGER] - odliczaj ZP 0/1. Domyślnie 0 - nie odliczaj
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0)
|| FUN.error('Błąd parametru wejściowego!'@);
   return(0)
?};
_wyn:=0;
_atrDiet:=_a;
_atrSkNstPdOp:=_b;
_odliczZp:={? var_pres('_c')=type_of(0) || _c || 0 ?};
ZC_INFO.cntx_psh();
S_ZUS.cntx_psh();
_pracownicze:=(2+RH.ZC_INFO().TTUB().KOD='01');
_fc:=(ZC_INFO.FC='T');
S_ZUS.cntx_pop();
ZC_INFO.cntx_pop();
_fakPrzychZlis:=_zList90102:=_zList90106:=_podChWypZlis:=_zpZlis:=_skladkiZlis:=_zList90104:=_zList9069:=0;

:: 90103: Kwota diet obniżająca przychód (7197. OZ: Diety pomn. prz.)
:: lub 9068: 'Kwota diet pomniejszająca przychód (ZDR)
_kwotaDiet:=
   {? _pracownicze
   || exec('zlicz_z_rh','zlec_rh',_atrDiet,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(_atrDiet)
   || exec('zlicz_z_rh','zlec_rh',_atrDiet,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(_atrDiet)
   ?};
{? _pracownicze
|| _SUMY:=exec('sum_rub_o','oddelegowanie','7200','P');
   {? _SUMY.find_key(7200)
   || _fakPrzychZlis+=_SUMY.SUM
   ?};
   obj_del(_SUMY);
   _SUMY:=exec('sum_atr_o','oddelegowanie','%1,90102,90106,5621,9022,571110,571120,57210,90104,9069'[$_atrDiet],'P');
:: 90103: Kwota diet obniżająca przychód (7197. OZ: Diety pomn. prz.)
:: lub 9068: 'Kwota diet pomniejszająca przychód (ZDR)
   {? _SUMY.find_key(_atrDiet)
   || _kwotaDiet+=_SUMY.SUM
   ?};
:: 90102: Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą)
   {? _SUMY.find_key(90102)
   || _zList90102+=_SUMY.SUM
   ?};
:: 90106: Składniki niestanowiące przychodu do proporcji (opodatkowane, ale niesatnowiące podstawy ubez.)
   {? _SUMY.find_key(90106)
   || _zList90106+=_SUMY.SUM
   ?};
:: 5621: Podstawa składki chorobowej
   {? _SUMY.find_key(5621)
   || _podChWypZlis+=_SUMY.SUM
   ?};
:: 9022 ZP: przychód podlegający zwolnieniu
   {? _SUMY.find_key(9022)
   || _zpZlis+=_SUMY.SUM
   ?};
:: 571110 Fundusz Emerytalny
   {? _SUMY.find_key(571110)
   || _skladkiZlis+=_SUMY.SUM
   ?};
:: 571120 Fundusz Rentowy
   {? _SUMY.find_key(571120)
   || _skladkiZlis+=_SUMY.SUM
   ?};
:: 57210 Fundusz Chorobowy
   {? _SUMY.find_key(57210)
   || _skladkiZlis+=_SUMY.SUM
   ?};
:: 90104 Składki niestanowiące obniżenia podstawy opodat. (7195 OZ: Sk. nst. ob. p.)
   {? _SUMY.find_key(90104)
   || _zList90104+=_SUMY.SUM
   ?};
:: 9069 Składki niestanowiące obniżenia podstawy opodat. (7199 ZDR: Sk. nst. ob. p.)
   {? _SUMY.find_key(9069)
   || _zList9069+=_SUMY.SUM
   ?};
   obj_del(_SUMY)
?};
{? ~_kwotaDiet || return(0) ?};
{? _atrSkNstPdOp<>90104 & _atrSkNstPdOp<>9069
:: Z uwagi na specyfikę obliczeń rachunków dopuszczalne są tylko te dwa numery atrybutów
|| return(0)
?};

{? _pracownicze
|| _fakPrzych:=
:: 7200: Przychód do wyliczeń
      exec('zlicz_z_rh','zlec_rh',7200,0,'01',0,,RH.ref(),'P')+FUNKCJE.Z(7200)+_fakPrzychZlis
:: 90102: Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą)
      -exec('zlicz_z_rh','zlec_rh',90102,1,'01',0,,RH.ref(),'P')-FUNKCJE.Z_SYS(90102)-_zList90102
:: 90106: Składniki niestanowiące przychodu do proporcji (opodatkowane, ale niesatnowiące podstawy ubez.)
      -exec('zlicz_z_rh','zlec_rh',90106,1,'01',0,,RH.ref(),'P')-FUNKCJE.Z_SYS(90106)-_zList90106
      -_kwotaDiet;

:: 5621: Podstawa składki chorobowej
   _podChWyp:=exec('zlicz_z_rh','zlec_rh',5621,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(5621)+_podChWypZlis
|| _fakPrzych:=
:: 7200: Przychód do wyliczeń
      exec('zlicz_z_rh','zlec_rh',7200,0,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z(7200)
:: 90102: Rubryki nie stanowiące przychodu (Oddelegowania do pracy za granicą)
      -exec('zlicz_z_rh','zlec_rh',90102,1,'01',1,'1',RH.ref(),'P')-FUNKCJE.Z_SYS(90102)
:: 90106: Składniki niestanowiące przychodu do proporcji (opodatkowane, ale niesatnowiące podstawy ubez.)
      -exec('zlicz_z_rh','zlec_rh',90106,1,'01',1,'1',RH.ref(),'P')-FUNKCJE.Z_SYS(90106)
      -_kwotaDiet;

:: 5621: Podstawa składki chorobowej
   _podChWyp:=exec('zlicz_z_rh','zlec_rh',5621,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(5621)
?};

{? _odliczZp
:: 9022 ZP: przychód podlegający zwolnieniu
|| _zp:={? _pracownicze
        || exec('zlicz_z_rh','zlec_rh',9022,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(9022)+_zpZlis
        || exec('zlicz_z_rh','zlec_rh',9022,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(9022)
        ?};
   _fakPrzych-=_zp;
   _podChWyp-=_zp
?};

:: W przypadku, gdy przychód jest mniejszy od Podst. emer. i rent.
:: od podstawy opodatkowania odejmujemy składki na ubezpieczenie społeczne od przychodu faktycznego.
:: Aby to zrealizować powstał 7195: Sk. niest. pods. op., który zostanie następnie dodany do 780 Przychód
:: tak aby 780 Przychód był pomniejszony tylko o te składki, o które powinien.
{? _fakPrzych>=0 & _podChWyp>0
|| {? _fakPrzych<_podChWyp
   || {? _pracownicze
      || _skladki:=
            exec('zlicz_z_rh','zlec_rh',57111,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(57111)+
            exec('zlicz_z_rh','zlec_rh',57112,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(57112);
         {? _fc
         || _skladki+=exec('zlicz_z_rh','zlec_rh',5721,1,'01',0,,RH.ref(),'P')+FUNKCJE.Z_SYS(5721)
         ?};
         _skladki+=_skladkiZlis

      || _skladki:=
            exec('zlicz_z_rh','zlec_rh',57111,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(57111)+
            exec('zlicz_z_rh','zlec_rh',57112,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(57112);
         {? _fc
         || _skladki+=exec('zlicz_z_rh','zlec_rh',5721,1,'01',1,'1',RH.ref(),'P')+FUNKCJE.Z_SYS(5721)
         ?}
      ?};
::    Składki zliczamy w przekroju miesiąca, obliczamy proporcjonalnie ile z nich przypada na nieopodatkowany przychód
      _wyn:=_skladki-(_skladki*_fakPrzych/_podChWyp);
::    Pomniejszamy wyliczone "Sk. niest. pods. op." o te, które już "niestanowiły" na poprzednich rachunkach
      {? _pracownicze
      || _wyn-=exec('zlicz_z_rh','zlec_rh',_atrSkNstPdOp,1,'01',0,,RH.ref(),'P');
         {? _atrSkNstPdOp=90104
         || _wyn-=_zList90104
         |? _atrSkNstPdOp=9069
         || _wyn-=_zList9069
         ?}
      || _wyn-=exec('zlicz_z_rh','zlec_rh',_atrSkNstPdOp,1,'01',1,'1',RH.ref(),'P')
      ?}

   || {? _pracownicze
      || _wyn:=-(exec('zlicz_z_rh','zlec_rh',_atrSkNstPdOp,1,'01',0,,RH.ref(),'P'));
::       90104 Składki niestanowiące obniżenia podstawy opodat. (7195 OZ: Sk. nst. ob. p.)
         {? _atrSkNstPdOp=90104
         || _wyn-=_zList90104
::       9069 Składki niestanowiące obniżenia podstawy opodat. (7199 ZDR: Sk. nst. ob. p.)
         |? _atrSkNstPdOp=9069
         || _wyn-=_zList9069
         ?}
      || _wyn:=-(exec('zlicz_z_rh','zlec_rh',_atrSkNstPdOp,1,'01',1,'1',RH.ref(),'P'))
      ?}
   ?}
?};
_wyn$2


\przych_do_wyl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła płacowa składnika 7200: Przychód do wyliczeń
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.ZAS='T' || return(0) ?};
_prz:=LICZRHS.Wylicz(,'.POD')+FUNKCJE.Z(779);

_prz


\zlicz_z_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Zlicza sumę składników z rachunków o podanych ograniczeniach. Kontekst pracownika i nagłówka listy płac
::       musi być ustalony.
::   WE: _a [INTEGER] - numer rubryki/atrybutu
::       _b [INTEGER] - 0/1 - 0-rubryka, 1-atrybut
::      [_c][STRING]  - dwuznakowy początek kodu tytułu ubezpieczenia (np. '01'), domyślnie wszystkie
::      [_d][INTEGER] - 0/1 - 0-bierz tylko z takim początkiem tytułu ubezpieczenia, 1-wykluczaj taki początek...
::      [_e][STRING]  - kod rodzaju umowy ograniczający zbierane dane, domyślnie wszystkie
::      [_f][_RH]]    - wskazanie na rachunek, który ma być wykluczony z sumowania, domyślnie brak wykluczeń
::      [_g][STRING]  - K*/P/U - sposób zbierania danych z list - kosztowo/podatkowo/ubezpieczeniowo
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0)
|| FUN.error('Błąd parametrów wejściowych!'@);
   return(0)
?};
_symbol:=_a;
_czyAtrybut:=_b;
{? _czyAtrybut
|| _RUBRYKI:=__RUB.sys_rub(_symbol)
|| _RUBRYKI:=__RUB.buf();
   _RUBRYKI.RN:=_symbol;
   _RUBRYKI.add()
?};
_ttub:={? var_pres('_c')=type_of('') || _c || '' ?};
_wykluczTtub:={? var_pres('_d')=type_of(0) || _b || 0 ?};
_rodzajUm:={? var_pres('_e')=type_of('') || _e || '' ?};
_pominRh:={? var_pres('_f')=7 || _f || null() ?};
_rozl:={? var_pres('_g')=type_of('') & ',u,p,k,'*',%1,'[-_g] || -_g || 'k' ?};
_suma:=0;
_firma:=exec('firma','ustawienia');

RH.cntx_psh;
RH.index('RACHDATA');
{? _rozl='u'
|| RH.prefix(_firma,P.OSOBA,O.RU,O.MU)
|? _rozl='p'
|| RH.prefix(_firma,P.OSOBA,O.RP,O.MP)
|| RH.prefix(_firma,P.OSOBA,O.R,O.M)
?};
{? RH.first()
|| O.cntx_psh();
   LS.cntx_psh();
   ZC_INFO.cntx_psh();
   S_ZUS.cntx_psh();
   ZC.cntx_psh();
   RU.cntx_psh();
   {!
   |? LS.use(RH.O().LT);
      LS.index('ZLEC');
      {? (~_pominRh | _pominRh<>RH.ref()) &
         (_ttub='' |
          (_wykluczTtub & (2+RH.ZC_INFO().TTUB().KOD<>_ttub)) |
          (~_wykluczTtub & (2+RH.ZC_INFO().TTUB().KOD=_ttub))
         ) &
         (_rodzajUm='' | RH.ZLE().RU().K=_rodzajUm)
      || {? _RUBRYKI.first()
         || {!
            |? LS.prefix(RH.ref(),_RUBRYKI.RN);
               {? LS.first()
               || {!
                  |? _suma+=LS.KW;

                     LS.next()
                  !}
               ?};

               _RUBRYKI.next()
            !}
         ?}
      ?};

      RH.next()
   !};
   RU.cntx_pop();
   ZC.cntx_pop();
   S_ZUS.cntx_pop();
   ZC_INFO.cntx_pop();
   LS.cntx_pop();
   O.cntx_pop()
?};
RH.cntx_pop;

_suma

:Sign Version 2.0 jowisz:1045 2023/11/07 13:25:11 02f560c54e805bc604617e88b7e70faea9437fdfa3e34264c3cbea02d03e57602f3586ec951b69386374cf2479eb10ff8361178acafddd502b07a6fd82f632832b55a192815d2a1d5f372e043841faf3d4affb41265f3adda56163ee25c77c21a498d82a971a72d4f3ab53b561072c171985563072426b793055f67498b25a61
