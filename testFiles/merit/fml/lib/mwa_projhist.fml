:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_projhist.fml
:: Utworzony: 14.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi historii projektów przez MacroWebAPI
::======================================================================================================================


\serialize_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli PROJHIST.
::       Kontekst wywołania: ustawiona dziedzina tabeli PROJHIST
::   WE: _a - FILE - obiekt plikowy przeznaczony do zapisu wynikowego JSONa
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   PROJHIST.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'PROJEKTY',,'D',,'REFERENCE',,'IDADD',,'HAN',,'SZEF',
   );
''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp', _resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\set_fields_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Ustawia pola danych historii projektu
::   WE: _a - STRING - parametry danych dodatkowych kontrahenta
::----------------------------------------------------------------------------------------------------------------------
exec('set_fields','mwapi',_a);

:: Opisy pól:
:: ##PROJEKTY Projekt (tabela PROJEKTY)
:: #D Data zmiany
:: #HAN Handlowiec (tabela OSOBA)
:: #SZEF Szef projektu (tabela OSOBA)

~~


\create_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Dodaje zapis historii projektu w oparciu o przekazane parametry.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Projhist.PROJEKTY');
_projekt_sql:=_option.value;
_fields_projhist:='PROJHIST'+_option.fields;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

::_projekt_sql:=exec('get_option','#webservice',_b,'PROJEKTY');
_projekt_ref:={? +_projekt_sql=16 || exec('FindAndGet','#table',PROJEKTY,_projekt_sql,,"PROJEKTY.ref()",null()) || null() ?};

:: Walidacja
{? _projekt_ref=null()
|| _wsenv.add_error('Należy wypełnić pole %1.'@['PROJEKTY'])
?};

{? ~_wsenv.has_errors()
|| PROJHIST.prefix();
   PROJHIST.blank();
   exec('set_fields_projhist','mwa_projhist',_fields_projhist);
   {? ~PROJHIST.add()
   || _wsenv.add_error(
            'Nie udało się dodać zapisu historii dla projektu %1.'@
            [exec('record','#to_string',_projekt_ref)]
         )
   ?}
?};

{? ~_wsenv.has_errors()
||
::   _result:=exec('read_projhist_idadd','webservice',
::      _a,exec('make_options','#webservice','field','idadd','value',PROJHIST.IDADD)
::   )
   _result:=exec('read_projhist_idadd_row','mwa_projhist',_par,PROJHIST.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\read_projhist_idadd_row
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje zapis historii projektu na podstawie wartości pola IDADD
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
_idadd:=_b;
PROJHIST.cntx_psh();
PROJHIST.index('IDADD');
PROJHIST.prefix();
{? +_idadd=31 & PROJHIST.find_key(_idadd)
|| PROJHIST.prefix(PROJHIST.IDADD);
   _result:=exec('serialize_projhist','mwa_projhist',_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@['<idadd>',_idadd]);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
PROJHIST.cntx_pop();
_result


\read_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie zapisy historii projektów
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_projekt:=exec('get_option','mwapi',_par,'projekt').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

:: #PARAM projekt Powiązany projekt, domyślnie - brak.
::_projekt:=exec('get_option','#webservice',_b,'projekt');
_projekt_ref:={? +_projekt=16 || exec('FindAndGet','#table',PROJEKTY,_projekt,,"ref()",null()) || null() ?};
{? _projekt_ref<>null()
|| PROJHIST.cntx_psh();
   PROJHIST.index('D');
   {? _projekt_ref<>null()
   || PROJHIST.prefix(_projekt_ref,'',)
   || PROJHIST.prefix()
   ?};
   {? PROJHIST.first()
   ||
      _result:=exec('serialize_projhist','mwa_projhist',_par)
   ||
      _wsenv.add_error('Brak historii dla projektu %1.'@[_projekt])
   ?};
   PROJHIST.cntx_pop()
|| _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@['<projekt>',_projekt])
?};

{? _wsenv.has_errors()
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\read_projhist_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje zapis historii projektu na podstawie wartości pola IDADD
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;
_result:=exec('read_projhist_idadd_row','mwa_projhist',_par,_idadd);
_result


\update_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Modyfikuje zapis historii projektu na podstawie wartości pola IDADD.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Projhist.IDADD');
_idadd:=_option.value;
_fields_projhist:='PROJHIST'+_option.fields;

::_idadd:=exec('get_option','#webservice',_b,'IDADD');

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

PROJHIST.cntx_psh();
PROJHIST.index('IDADD');
PROJHIST.prefix();

{? _idadd=''
|| _wsenv.add_error('Nie przekazano IDADD.'@)
|? +_idadd=31 & PROJHIST.find_key(_idadd)
|| PROJHIST.prefix(PROJHIST.IDADD);
   {? PROJHIST.first()
   || exec('set_fields_projhist','mwa_projhist',_fields_projhist);
      {? ~PROJHIST.put()
      || _wsenv.add_error(
            'Nie udało się zaktualizować zapisu historii dla projektu %1.'@
            [exec('record','#to_string',PROJHIST.PROJEKTY)]
         )
      ?}
   ?}
|| _wsenv.add_error('Nieprawidłowa wartość pola %1 [%2].'@ ['IDADD',_idadd]);
   _result:=_wsenv.to_json()
?};

{? ~_wsenv.has_errors()
||
::   _result:=exec('read_projhist_idadd','webservice',
::      _a,exec('make_options','#webservice','field','idadd','value',PROJHIST.IDADD)
::   )
   _result:=exec('read_projhist_idadd_row','mwa_projhist',_par,PROJHIST.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

PROJHIST.cntx_pop();
_result


\delete_projhist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Usuwa zapis historii projektu na podstawie wartości pola IDADD.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'IDADD');
_idadd:=_option.value;

::_idadd:=exec('get_option','#webservice',_b,'value');

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

PROJHIST.cntx_psh();
PROJHIST.index('IDADD');
PROJHIST.prefix();

{? +_idadd=31 & PROJHIST.find_key(_idadd)
|| PROJHIST.prefix(PROJHIST.IDADD);
   {? PROJHIST.first()
   || {? PROJHIST.del(,1)>0
      || _wsenv.add_info('Usunięto zapis historii projektu.'@)
      || _wsenv.add_error('Nie udało się usunąć zapisu historii projektu.'@)
      ?}
   || _wsenv.add_error('Nie znaleziono zapisu historii projektu.'@)
   ?}
|| _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@ ['<idadd>',_idadd])
?};

{? ~_wsenv.has_errors()
||
   _wsenv.erase();
   _wsenv.add_info('Usunięto wybraną historie projektu.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp,1)
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

PROJHIST.cntx_pop();
_result

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:19 4ff0c4b421c281aa51cb863264e7f2cebe083619ce28f5e691f76816a6a3c27bd95d23622d96fe53cda1faae979edfe6a67cfc18ae6d0aaa709d807dbc3a48646d847f759e1078995f786bce8d4a8d6dc8b2226b8569ea02d6fd91adf9e6387213ea1fcdc021b91e787d9b97e604b3da624f2e8441ad56a9e9fdb2bf4a2d4c7d
