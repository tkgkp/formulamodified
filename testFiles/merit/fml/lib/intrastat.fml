:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: intrastat.fml
:: Utworzony: 18.02.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Obsługa intrastat
::======================================================================================================================


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Środowisko obszaru Deklaracje INTRASTAT
::----------------------------------------------------------------------------------------------------------------------

::UWAGA: _fld, i _mth to formułki pomocnicze, żeby wygodniej tworzyć tablice i komentować poszczególne jej elementy
::       powiedzmy, że to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, że to bedzie metoda
         _mth:="31+form(_a)";

_env:=obj_new(
::             pola
                _fld('IST_TYP',              'Typ deklaracji [Przywóz/Wywóz]')

::             identyfikatory okienek
               ,_fld('wid_win_main',         'ID okna glownego')

::             tytuly okienek
               ,_fld('tit_main',             'Tytul okienka glownego')

::             tabele tymczasowe

::             indeksy tymczasowych tabel

::             uchwyty do okien
               ,_fld('WIN_MAIN',             'Główne okno grupowe')
               ,_fld('WIN_IST',              'Okno tabeli IST')

::             identyfikatory przycisków

::             METODY
               ,_mth('initObszar',           'Init obszaru')
               ,_mth('doneObszar',           'Done obszaru')
               ,_mth('winMain',              'Ustawienie głównego okna')
               );

_env.IST_TYP:='';

_env.wid_win_main:='';

_env.tit_main:='';

_env.WIN_MAIN:='';
_env.WIN_IST:='';

_env.initObszar:="
   .IST_TYP:=_a;
   .WIN_IST:={? .IST_TYP='Przywóz' || 'WER_P' || 'WER_W' ?};

   {? .IST_TYP='Przywóz'
   || _hid_actions:={? exec('lsp_lic','lsp')='T' || '' || 'Y:Y' ?};
      IST.actions(.WIN_IST,_hid_actions)
   |? .IST_TYP='Wywóz'
   || _hid_actions:={? exec('lmg_lic','lmg')='T' || '' || 'Y:Y' ?};
      IST.actions(.WIN_IST,_hid_actions)
   ?};

   _wyn:=1;

   _wyn
";

_env.doneObszar:="
   VAR_DEL.delete('__DOK_ZR','ist_dz_w','ist_r','ist_w','ist_zo_r','ist_zo_w','ist_zg_r','ist_zg_w');
   VAR_DEL.delete('ist_t_r','ist_t_w');
   VAR_DEL.delete('ist_w_r','ist_w_w')
";

_env.winMain:="
   IST.index('IST');
   IST.prefix(); IST.first();

:: definicja podmiotu zobowiazanego
   exec('ist_zo_set','intrastat');

:: definicja zglaszajacego
   exec('ist_zg_set','intrastat');

:: definicja pozycji
   exec('ist_t_set','intrastat');

:: definicja wypelniajacy
   exec('ist_wy_set','intrastat');

:: dokumenty zrodlowe
   exec('ist_dz_set','intrastat',IST.ref());

   ist_w:=IST.grp_make(,\"
      _env:=params_get().env;
      IST.win_sel(_env.WIN_IST); IST.hdr_sel(); IST.hdr_sel('Deklaracje'@);
      IST.index('IST'); IST.prefix(1+_env.IST_TYP);
      ISTZ.index('IST');
      ISTZ.prefix(IST.ref(),'Z'); ISTZ.first(); grp_disp(ISTZ,ist_zo_w);
      ISTZ.prefix(IST.ref(),'N'); ISTZ.first(); grp_disp(ISTZ,ist_zg_w);

      ISTT.index('TYP'); ISTT.prefix(IST.ref(),0); ISTT.first(); grp_disp(ISTT,ist_t_w);
      ISTW.index('IST'); ISTW.prefix(IST.ref()); grp_disp(ISTW,ist_w_w);
      __DOK_ZR.prefix(); grp_disp(__DOK_ZR,ist_dz_w)\",
      '#ist_gr_'+(-.WIN_IST),1,1,\"exec('exit','zws')\");

   IST.grp_sel(ist_w,IST,.WIN_IST,,\"
      _ist:=null();
      {? {? IST.f_active() || IST.f_get() || IST.get() ?}
      || IST.actions_grayed(cur_win(1,1),'');
         _actions:=
            {? IST.AKC='N' || 'W'
            |? IST.AKC='T' || 'PUZ'
                           || ''
            ?}+
            {? IST.MOD     || '' || 'T' ?};
         IST.actions_grayed(cur_win(1,1),_actions);
         _ist:=IST.ref()
      ?};
      ISTZ.index('IST');
      ISTZ.prefix(_ist,'Z'); ISTZ.first(); grp_disp(ISTZ,ist_zo_w);
      ISTZ.prefix(_ist,'N'); ISTZ.first(); grp_disp(ISTZ,ist_zg_w);
      ISTT.prefix(_ist,0); ISTT.first(); grp_disp(ISTT,ist_t_w);
      ISTW.prefix(_ist); ISTW.first(); grp_disp(ISTW,ist_w_w);
      _istr:={? IST.seek(_ist) || IST.ref() || null ?}; exec('dz_fill','intrastat',_istr);
      grp_disp(__DOK_ZR,ist_dz_w)\",,,,,,,,'maximized_with_title');

   IST.grp_splt(ist_w,'panel0','horizontal','dane_dekl','12,50%');

   IST.grp_sel(ist_w,ISTT,ist_t_w,'Towary'@,,,,,\"
      {? ist_t_r=''
      || ist_t_r:=exec('mkEdit','intrastat',ISTT,IST.ISTDEF,'Towar','Towar'@);
         {? ist_t_r<>'' || ISTT.win_edit(ist_t_r) ?}
      ?};
      IST.cntx_psh(); _is_ist:=IST.first(); IST.cntx_pop();
      {? IST.AKC='T' | _is_ist=0 || ISTT.actions(ist_t_w,'ADUP:AD',,1)
      |? IST.RODZAJ<>'P' || ISTT.actions(ist_t_w,'A:A',,1)
      || ISTT.actions(ist_t_w,,,1)
      ?}\",,,,'maximized');

   IST.grp_sel(ist_w,__DOK_ZR,ist_dz_w,'Dokumenty źródłowe'@,,,,,,,,,'maximized');

   IST.grp_sel(ist_w,ISTZ,ist_zo_w,'Podmiot zobowiązany'@,,,,,\"
      _ist:={? {? IST.f_active() || IST.f_get() || IST.get() ?} || IST.ref() || null() ?};
      {? ist_zo_r=''
      || ist_zo_r:=exec('mkEdit','intrastat',ISTZ,IST.ISTDEF,'PodmiotZobowiazany','Podmiot zobowiązany'@);
         {? ist_zo_r<>'' || ISTZ.win_edit(ist_zo_r) ?}
      ?};
      ISTZ.index('IST');ISTZ.prefix(_ist,'Z');
      ISTZ.win_edit(ist_zo_r);
      IST.cntx_psh(); _is_ist:=IST.first(); IST.cntx_pop();
      {? IST.AKC='T' || ISTZ.actions(ist_zo_w,'DUP:D',,1)
      |? _is_ist=0   || ISTZ.actions(ist_zo_w,':D',,1)
      || ISTZ.actions(ist_zo_w,,,1)
      ?}\",,,,'maximized');

::   IST.grp_splt(ist_w,'zobowiazany','horizontal','zglaszajacy',4);

   IST.grp_sel(ist_w,ISTZ,ist_zg_w,'Zgłaszający'@,,,,,\"
      _ist:={? {? IST.f_active() || IST.f_get() || IST.get() ?} || IST.ref() || null() ?};
      {? ist_zg_r=''
      || ist_zg_r:=exec('mkEdit','intrastat',ISTZ,IST.ISTDEF,'Zglaszajacy','Zgłaszający'@);
         {? ist_zg_r<>'' || ISTZ.win_edit(ist_zg_r) ?}
      ?};
      ISTZ.index('IST');ISTZ.prefix(_ist,'N');
      ISTZ.win_edit(ist_zg_r);
      IST.cntx_psh(); _is_ist:=IST.first(); IST.cntx_pop();
      {? IST.AKC='T' || ISTZ.actions(ist_zg_w,'DUP:D',,1)
      |? _is_ist=0   || ISTZ.actions(ist_zg_w,':D',,1)
      || ISTZ.actions(ist_zg_w,,,1)
      ?}\",,,,'maximized');

   IST.grp_sel(ist_w,ISTW,ist_w_w,'Wypełniający'@,,,,,\"
      {? ist_w_r=''
      || ist_w_r:=exec('mkEdit','intrastat',ISTW,IST.ISTDEF,'Wypelniajacy','Wypełniający'@);
         {? ist_w_r <> '' || ISTW.win_edit(ist_w_r) ?}
      ?};
      IST.cntx_psh(); _is_ist:=IST.first(); IST.cntx_pop();
      {? IST.AKC='T' || ISTW.actions(ist_w_w,'DUP',,1)
      |? _is_ist=0   || ISTW.actions(ist_w_w,':D',,1)
      || ISTW.actions(ist_w_w,,,1)
      ?}\",,,,'maximized');

   IST.win_sel(ist_w);
   IST.win_fml(.WIN_IST,,'NRWLASNY',,'ICON_BEFORE',exec('ist_sym_ib','intrastat'));

   .WIN_MAIN:=ist_w;

   ist_r:=''
";

_env


\defIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2008]
:: OPIS: Intrastat - parametryzacja
::  OLD: \defIst/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.ISTDEF:='I';
ISTDEF.win_sel('WER');
_default:=ISTDEF.actions('WER','W');
ISTDEF.win_edit('RED');
ISTDEF.index('LP');
ISTDEF.prefix('','',SKID.ISTDEF);
ISTDEF.select();
ISTDEF.actions('WER',,_default)


\find_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: szukanie wartosci _b w slowniku _a
::   WE: _a - id slownika
::       _b - szukana wartosc
::   WY: 1 - znaleziono wartosc, 0 - wpp
::  OLD: \find_sl/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFSL.index('SL');
ISTDEFSL.prefix(_a,'P',_b,_b);
ISTDEFSL.first()


\slownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wyswietlenie slownika _a i wybor wartosci
::   WE: _a - id slownika
::       _b - element slownika
::   WY: wartosc zaktualizowanego pola jesli wybrano wartosc ze slownika, ~~ - wpp
::  OLD: \slownik/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFSL.index('SL');

ISTDEFSL.win_sel('SLO');
ISTDEFSL.win_edit('REDP');

ISTDEFSL.prefix(_a,'N');
_hdr:='';
{? ~ISTDEFSL.first()
||
   FUN.info('Brak słownika %1 w słownikach Intrastat.'@[_a])
||
   {? +ISTDEFSL.O < 51 & ISTDEFSL.O + 1 = '.'
   || _hdr:=50 + (ISTDEFSL.O - 1)
   || _hdr:=51 + ISTDEFSL.O
   ?};
   ISTDEFSL.hdr_sel();
   ISTDEFSL.hdr_sel(_hdr);

   ISTDEFSL.prefix(_a,'P');

   ISTDEFSL.find_key(_b,_b);

   {? ISTDEFSL.select(,1,2)
   || ISTDEFSL.K
   || ~~
   ?}
?}


\prog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: zwraca ustawiony prog w przywozie lub wywozie
::   WE: _a-data
::       _b-'P'-przywoz, 'W'-wywoz
::   WY: prog
::  OLD: \prog/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
OKR.cntx_psh;
OKR.index('OKR'); OKR.prefix(REF.FIRMA,_a~1,_a~2);
{? OKR.first || _wyn:={? _b='P' || OKR.ISTPP || OKR.ISTPW ?} ?};
OKR.cntx_pop;
_wyn


\czy_prog_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: czy przekroczono prog podstawowy
::   WE: _a-W-wywoz, P-przywoz
::       _b-prog dla wywozu
::       _c-prog dla przywozu
::   WY: 1-przekroczono prog asymilacji; 0-wpp
::  OLD: \czy_prog_p/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_a='W' & _b<>'N' | _a='P' & _c<>'N'


\czy_prog_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: czy przekroczono prog szczegolowy
::   WE: _a-W-wywoz, P-przywoz
::       _b-prog dla wywozu
::       _c-prog dla przywozu
::   WY: 1-przekroczono prog specyficzny; 0-wpp
::  OLD: \czy_prog_s/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_a='W' & _b='S' | _a='P' & _c='S'


\check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: sprawdzenie poprawnosci wypelnienia pol dotyczacych INTRASTAT w tabeli _a
::   WE: _a - tabela (FAKS,ND)
::       _b - typ deklaracji intrastat
::       _c - prog dla wywozu
::       _d - prog dla przywozu
::       _e - status akceptacji dokumentu
::       _f - 0 - dokument manualny (domyślnie), 1 - import z komunikatu EDI
::   WY: akronim niepoprawnie wypelnionego pola, ''-wpp
::  OLD: \check/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_akc:=_e;
_edi:={? var_pres('_f')=type_of(0) || _f || 0 ?};

{? _akc='N' & exec('get','#params',100202,2)<>'T' || return('') ?};

_retrun:='';

_info:='Należy wypełnić '@;
{? exec('czy_prog_s','intrastat',_b,_c,_d)=1
||
   _return:=
      {? _a.KPW='' || _info+={? _b='W' || 'Kraj przeznaczenia' || 'Kraj wysyłki' ?}; 'KPW'
      |? _a.WD='' || _info+='Warunki dostawy'; 'WD'
      |? _a.RTRANSAK='' || _info+='Rodzaj transakcji'; 'RTRANSAK'
      |? _a.RTRANSPO='' || _info+='Rodzaj transportu'; 'RTRANSPO'
      |? _a.IST_TYP='' || _info+='Typ deklaracji'; 'IST_TYP'
      |? _a.IST_OKR='' || _info+='Okres deklaracji'; 'IST_OKR'
      || ''
      ?};
   {? _return<>'' || FUN.info(_info+'.') ?}
||
   _return:=
      {? _a.KPW='' || _info+={? _b='W' || 'Kraj przeznaczenia' || 'Kraj wysyłki' ?}; 'KPW'
      |? _a.RTRANSAK='' || _info+='Rodzaj transakcji'; 'RTRANSAK'
      |? _a.IST_TYP='' || _info+='Typ deklaracji'; 'IST_TYP'
      |? _a.IST_OKR='' || _info+='Okres deklaracji'; 'IST_OKR'
      || ''
      ?};
   {? _return<>''
   ||
      {? _edi
      || exec('add_kom','#message',_info,4,{? _a.ID='' || _a.SYM || _a.ID ?})
      || FUN.info(_info+'.')
      ?}
   ?}
?};

_return


\istz_ju_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wyświetleniem INTRAST.JU
::   WY: kolor
::  OLD: \istz_ju_pw/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
INTRAST.JU:={? cur_tab(1)=ZMIENNE
            || DK.KCN().JU
            || cur_tab(1).KCN().JU
            ?};

{? {? cur_tab(1)=FAP
   || exec('fap_ilujm_reg','faktury_poz','PR')=0
   |? cur_tab(1)=DK | cur_tab(1)=ZMIENNE
   || exec('dk_ilujm_reg','magdok_poz','PR')=0
   ?}
|| exec('findfnv','#color')
|| exec('findfnrd','color')
?}


\def_istsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: edycja slownikow intrastat (definicje->intrastat->slowniki intrastat)
::  OLD: \def_istsl/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFSL.index('SL_K'); ISTDEFSL.prefix('N'); ISTDEFSL.first();

:: definicja naglowkow slownikow intrastat
exec('istsl_nag_set','intrastat');

_formula:="exec('cWIstdwe','intrastat')";
ISTDEFSL.win_act(istsln_w,,'Formuła','&Import'@@,,,_formula,,,,,,'I');
ISTDEFSL.win_act(istsln_w,1,'Formuła','&Import'@@,,,_formula,,,,,,'I');
ISTDEFSL.win_btn(istsln_w,'text=Import,panel=bottom,align=begin','menu:I');

istsl_w:=ISTDEFSL.grp_make('Słowniki Intrastat'@,
   "
   INTRAST.SL_K:='';
   INTRAST.T:='N';
   ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL'); ISTDEFSL.prefix(ISTDEFSL.SL_K,'P'); ISTDEFSL.first(); grp_disp(ISTDEFSL,'WER');
   ISTDEFSL.cntx_pop()
   ",'#istsl_w',1,1);

ISTDEFSL.grp_sel(istsl_w,ISTDEFSL,istsln_w,,
   "
   ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL'); ISTDEFSL.prefix(ISTDEFSL.SL_K,'P'); ISTDEFSL.first(); grp_disp(ISTDEFSL,'WER');
   ISTDEFSL.cntx_pop()
   ",0,0,10,,,,,'maximized_with_title');

ISTDEFSL.grp_splt(istsl_w,,'vertical','pozycje');
ISTDEFSL.grp_sel(istsl_w,ISTDEFSL,'WER',,,,,20,
   "
   INTRAST.SL_K:=ISTDEFSL.SL_K;
   INTRAST.T:='P';
   ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL_K'); ISTDEFSL.prefix('N');
   {? ISTDEFSL.first() || ISTDEFSL.actions('WER',,,1) || ISTDEFSL.actions('WER',':d',,1) ?};
   ISTDEFSL.cntx_pop();
   ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL'); ISTDEFSL.prefix(ISTDEFSL.SL_K,'P'); ISTDEFSL.first();
   ISTDEFSL.win_edit('REDP')
   ",
   "
   ISTDEFSL.cntx_pop();
   INTRAST.SL_K:='';
   INTRAST.T:='N';
   ISTDEFSL.win_edit('REDN')
   ",,,'maximized_with_title');

ISTDEFSL.win_sel('WER');
ISTDEFSL.hdr_sel('Pozycje'@);
ISTDEFSL.win_sel(istsl_w);
ISTDEFSL.win_edit('REDN');

ISTDEFSL.select();

&istsln_w


\istsl_nag_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja okna z naglowkami slownikow intrastat
::  OLD: \istsl_nag_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
istsln_w:=ISTDEFSL.mk_sel('Nagłówki'@,,0,'istslnagw');
ISTDEFSL.win_fld(istsln_w,,'SL_K',,,8,,,'Kod'@);
ISTDEFSL.win_fld(istsln_w,,'O',,,60);

_ff:="__CHK.record(ISTDEFSL,,'SL_K','O')";
ISTDEFSL.win_act(istsln_w,0,'Rekord',,,,,_ff);
ISTDEFSL.win_act(istsln_w,1,'Rekord',,,,,_ff);
ISTDEFSL.win_act(istsln_w,0,'Dołącz',,,,,,1);
ISTDEFSL.win_act(istsln_w,1,'Dołącz',,,,,,1);
ISTDEFSL.win_act(istsln_w,0,'Formuła','&Usuń'@@,,,
   "
   {? FUN.ask('Usunąć słownik?'@)
   ||
      _sl_k:=ISTDEFSL.SL_K;
      ISTDEFSL.cntx_psh();
      ISTDEFSL.index('SL_K');
      ISTDEFSL.prefix('P',_sl_k,_sl_k);
      {? ISTDEFSL.first() || {! |? ISTDEFSL.del() !} ?};
      ISTDEFSL.cntx_pop();
      ISTDEFSL.del()
   ?}
   ",,,,,,'U');
ISTDEFSL.win_act(istsln_w,0,'Formuła','&Popraw'@@,,,
   "
   _kod:=ISTDEFSL.SL_K;
   ISTDEFSL.win_edit('REDN');
   {? ISTDEFSL.edit(\"chk_rec()\")
   ||
      _n_kod:=ISTDEFSL.K:=ISTDEFSL.SL_K;
      ISTDEFSL.put();
      ISTDEFSL.cntx_psh();
      ISTDEFSL.index('SL_K');
      ISTDEFSL.prefix('P',_kod,_kod);
      {? ISTDEFSL.first()
      ||
         {!
         |? ISTDEFSL.cntx_psh();
            ISTDEFSL.clear();
            ISTDEFSL.SL_K:=_n_kod;
            ISTDEFSL.put();
            ISTDEFSL.cntx_pop();
            ISTDEFSL.next()
         !}
      ?};
      ISTDEFSL.cntx_pop()
   ?}
   ",,,,,,'P')


\istdefsl_sl_kbl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wartosc poczatkowa ISTDEFSL.SL_K
::  OLD: \istdefsl_sl_kbl/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
INTRAST.SL_K


\istdefsl_t_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wartosc poczatkowa ISTDEFSL.T
::  OLD: \istdefsl_t_bl/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
INTRAST.T


\istsl_wer_recpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: rekord po okna WER tabeli ISTDEFSL
::  OLD: \istsl_wer_recpo/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(ISTDEFSL,,'K','O')


\cWIstdwe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: import slownikow po okna WER tabeli ISTDEF
::  OLD: \cWIstdwe/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Aktualizować treść słowników?'@)
||
   ISTDEFSL.cntx_psh();
   exec('impSlo','intrastat');
   FUN.info('Zakończono aktualizację słowników.'@);
   ISTDEFSL.cntx_pop()
?}


\impSlo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: import słownikow
::  OLD: \impSlo/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
:: usuniecie obecnych slownikow
ISTDEFSL.index('SL');
ISTDEFSL.prefix();
{? ISTDEFSL.first()
|| {! |? ISTDEFSL.del() !}
?};

:: import nowych slownikow
{! _ii:=1..15
|!
   _plik:=
      {? _ii = 1 || 'slownik002.xml'
      |? _ii = 2 || 'slownik004.xml'
      |? _ii = 3 || 'slownik005.xml'
      |? _ii = 4 || 'slownik007.xml'
      |? _ii = 5 || 'slownik028.xml'
      |? _ii = 6 || 'slownik049.xml'
      |? _ii = 7 || 'slownik060.xml'
      |? _ii = 8 || 'slownik061.xml'
      |? _ii = 9 || 'slownik063.xml'
      |? _ii = 10 || 'slownik067.xml'
      |? _ii = 11 || 'slownik187.xml'
      |? _ii = 12 || 'slownik188.xml'
      |? _ii = 13 || 'slownik189.xml'
      |? _ii = 14 || 'slownik190.xml'
      |? _ii = 15 || 'slownik191.xml'
      ?};
   _in:=fopen(_plik,'r',1);
   {? ~_in
   ||
      FUN.info('Błąd otwarcia pliku %1.'@[_plik])
   ||
:: pominiecie elementu <?xml
      _skip:=1;
      _sl_k:='';
      _str:=fread(_in);
      {? (_str * '<?xml') = 1
      ||
         {? (-_str * 'utf-8') <> 0 || _skip:=0 ?}
      ?};
:: import naglowka
      {? _skip = 0
      ||
         _str:=fread(_in); _str:=utf8_maz(_str);
         {? (_str * '!--') <> 0
         || _str:=fread(_in); _str:=utf8_maz(_str)
         ?};
         {? (_str * 'Slownik') <> 0
         ||
            _kod:=exec('wyluskaj','intrastat',_str,'Kod');
            _nazwa:=exec('wyluskaj','intrastat',_str,'Nazwa');
            {? _kod='' | _nazwa=''
            ||
               _skip:=1
            ||
               ISTDEFSL.SL_K:=_kod;
               ISTDEFSL.T:='N';
               ISTDEFSL.K:=_kod;
               ISTDEFSL.O:=_nazwa;
               {? ISTDEFSL.add() || _sl_k:=ISTDEFSL.SL_K ?}
            ?}
         ?}
      ?};
:: import pozycji
      {? _sl_k<>''
      ||
         {! |? (_str:=fread(_in)) <> '\n'
         |! _str:=utf8_maz(_str);
            {? (_str * 'Pozycja') <> 0
            ||
               _kod:=exec('wyluskaj','intrastat',_str,'Kod');
               _opis:=exec('wyluskaj','intrastat',_str,'Opis');
               {? _kod <> ''
               ||
                  ISTDEFSL.SL_K:=_sl_k;
                  ISTDEFSL.T:='P';
                  ISTDEFSL.K:=_kod;
                  ISTDEFSL.O:=_opis;
                  ISTDEFSL.add()
               ?}
            ?}
         !}
      ?}
   ?};

   fclose(_in)
!}


\wyluskaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: pobiera wartosc atrybutu _b zapisanego w ciagu znakow _a
::   WE: _a - ciag znakow
::       _b - atrybut
::   WY: wartosc atrybutu
::  OLD: \wyluskaj/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_str:=_a;
_atr:=_b+'\=';
{! |? _str <> ''
|!
   _poz:=_str*'=';
   {? _poz = 0
   ||
      return('')
   ||
      _atr1:=_poz + _str;
      _str:=_poz - _str;
      {? (_atr1 * _atr) <> 0
      || _poz:=_str * '\"';
         _str:=_poz - _str;
         _poz:=_str * '\"';
         _war:=(_poz - 1) + _str;
         return(_war)
      ?}
   ?}
!};
return('')


\def_ist_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definiowanie atrybutow INTRASTAT w kartotekach
::   WE: ~~
::  OLD: \def_ist_atr/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
:: definicja dla kartoteki materialowej
m_wer:=M.mk_sel('Słownik materiałów'@,'P',0,'#m_ist',,,,,'U');
M.win_sel(m_wer);
M.win_fld(m_wer,,'KTM',,,20);
M.win_fld(m_wer,INTRAST,'OPIST',,,30);
M.win_fld(m_wer,INTRAST,'KODT');
M.win_fld(m_wer,,'KP');
M.win_fld(m_wer,INTRAST,'JUKOD',,,,,,'Uzupełniająca jm'@);
M.win_fld(m_wer,,'JU_P',,,10,6,,'Przelicznik'@);
M.win_act(m_wer,0,'Wyświetl',,,,"M.win_edit('RED'); M.display()");
M.win_act(m_wer,0,'Popraw',,,,"M.win_edit(m_red)",,1);
M.win_act(m_wer,0,'Formuła','Kody &CN'@@,,,"exec('cnm_pokaz_cn','sklad',M.ref())",,0,,,,'C');
M.win_act(m_wer,0,'Szukaj',,,,"M.win_edit('SZUK'); 1");
M.win_act(m_wer,0,'Kolejność');
m_red:=M.mk_edit('Materiał'@,0);
M.win_esep(m_red,'Materiał'@);
M.win_efld(m_red,,'KTM',,,50,,1);
M.win_efld(m_red,,'N',,,50,,1);
M.win_esep(m_red,'Dane do Intrastat'@);
M.win_efld(m_red,,'KP',,,11);
M.win_efld(m_red,,'J','KOD',,8,,1,'Bazowa jm'@);
M.win_efld(m_red,,'JU_P',,,11,6,,'Przelicznik'@);
M.win_efld(m_red,INTRAST,'JUKOD',,,11,,1,'Uzupełniająca jm'@);
exec('ok_esc','#window',M,m_red);

:: definicja dla typow dokumentow sprzedazy
typysp_w:=TYPYSP.mk_sel('Typy dokumentów sprzedaży'@,'P',0,'#typysp_ist',,,,,'P');
TYPYSP.win_sel(typysp_w);
TYPYSP.win_fld(typysp_w,,'T',,,8);
TYPYSP.win_fld(typysp_w,,'NAZ',,,30);
TYPYSP.win_fld(typysp_w,,'RTRANSAK',,,30);
TYPYSP.win_act(typysp_w,0,'Wyświetl',,,,
        "TYPYSP.win_edit('REDS'); TYPYSP.hdr_edit(); TYPYSP.display()");
TYPYSP.win_act(typysp_w,0,'Popraw',,,,
        "TYPYSP.win_edit(typysp_r); TYPYSP.hdr_edit(); TYPYSP.hdr_edit(' sprzedaży')",,1);
typysp_r:=TYPYSP.mk_edit('Cechy dokumentu',0);
TYPYSP.win_esep(typysp_r,'Typ dokumentu sprzedaży'@);
TYPYSP.win_efld(typysp_r,,'T',,,8,,1);
TYPYSP.win_efld(typysp_r,,'NAZ',,,60,,1);
TYPYSP.win_esep(typysp_r,'Dane do Intrastat'@);
TYPYSP.win_efld(typysp_r,,'RTRANSAK',,,2);
exec('ok_esc','#window',TYPYSP,typysp_r);

:: definicja dla typow dokumentow zakupu
typyzk_w:=TYPYSP.mk_sel('Typy dokumentów zakupu'@,'P',0,'#typysp_ist',,,,,'P');
TYPYSP.win_sel(typyzk_w);
TYPYSP.win_fld(typyzk_w,,'T',,,8);
TYPYSP.win_fld(typyzk_w,,'NAZ',,,30);
TYPYSP.win_fld(typyzk_w,,'RTRANSAK',,,30);
TYPYSP.win_act(typyzk_w,0,'Wyświetl',,,,
        "TYPYSP.win_edit('REDZ'); TYPYSP.hdr_edit(); TYPYSP.display()");
TYPYSP.win_act(typyzk_w,0,'Popraw',,,,
        "TYPYSP.win_edit(typyzk_r); TYPYSP.hdr_edit(); TYPYSP.hdr_edit(' zakupu')",,1);
typyzk_r:=TYPYSP.mk_edit('Cechy dokumentu'@,0);
TYPYSP.win_esep(typyzk_r,'Typ dokumentu zakupu'@);
TYPYSP.win_efld(typyzk_r,,'T',,,8,,1);
TYPYSP.win_efld(typyzk_r,,'NAZ',,,60,,1);
TYPYSP.win_esep(typyzk_r,'Dane do Intrastat'@);
TYPYSP.win_efld(typyzk_r,,'RTRANSAK',,,2);
exec('ok_esc','#window',TYPYSP,typyzk_r);
TYPYSP.index('SPRZAK');

:: definicja dla typow dokumentow magazynowych
typydo_w:=TYPYDOK.mk_sel('Typy dokumentów magazynowych'@,'P',0,'#typydo_ist',,,,,'P');
TYPYDOK.win_sel(typydo_w);
TYPYDOK.win_fld(typydo_w,,'T',,,8);
TYPYDOK.win_fld(typydo_w,,'NAZ',,,30);
TYPYDOK.win_fld(typydo_w,,'RTRANSAK',,,30);
TYPYDOK.win_act(typydo_w,0,'Wyświetl',,,,"TYPYDOK.win_edit('RED'); TYPYDOK.display()");
TYPYDOK.win_act(typydo_w,0,'Popraw',,,,"TYPYDOK.win_edit(typydo_r)",,1);
typydo_r:=TYPYDOK.mk_edit('Cechy dokumentu magazynowego'@,0);
TYPYDOK.win_esep(typydo_r,'Typ dokumentu magazynowego'@);
TYPYDOK.win_efld(typydo_r,,'T',,,8,,1);
TYPYDOK.win_efld(typydo_r,,'NAZ',,,60,,1);
TYPYDOK.win_esep(typydo_r,'Dane do Intrastat'@);
TYPYDOK.win_efld(typydo_r,,'RTRANSAK',,,2);
exec('ok_esc','#window',TYPYDOK,typydo_r);
TYPYDOK.index('TYP');

:: definicja dla kartoteki kontrahentow
kh_wer:=KH.mk_sel('Kontrahenci'@,'P',0,'#kh_ist',,,,,'U');
KH.win_sel(kh_wer);
KH.win_fld(kh_wer,,'KOD',,,8);
KH.win_fld(kh_wer,,'NAZ',,,30);
KH.win_fld(kh_wer,,'WD',,,3);
KH.win_fld(kh_wer,,'RTRANSPO',,,1);
KH.win_act(kh_wer,0,'Wyświetl',,,,"exec('kh_dod_ini','kontrahent'); KH.win_edit('RED'); KH.display()");
KH.win_act(kh_wer,0,'Popraw',,,,"KH.win_edit(kh_red)",,1);
KH.win_act(kh_wer,0,'Szukaj',,,,"KH.win_edit('SZUK'); 1");
KH.win_act(kh_wer,0,'Kolejność');
kh_red:=KH.mk_edit('Kontrahent'@,0);
KH.win_esep(kh_red,'Kontrahent'@);
KH.win_efld(kh_red,,'KOD',,,8,,1);
KH.win_efld(kh_red,,'NAZ',,,60,,1);
KH.win_esep(kh_red,'Dane do Intrastat'@);
KH.win_efld(kh_red,,'WD',,,3);
KH.win_efld(kh_red,,'RTRANSPO',,,2);
exec('ok_esc','#window',KH,kh_red);

:: definicja dla urzedu celnego
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
info_wer:=OKR.mk_sel('Urząd celny'@,,0,'#infouc_ist');
OKR.win_sel(info_wer);
OKR.win_fld(info_wer,,'ROK',,,5,,1,'Rok'@);
OKR.win_fld(info_wer,,'UC',,,6,,,'Urząd celny'@);
OKR.win_act(info_wer,0,'Popraw',,,,"OKR.win_edit()",,1);

:: definicja okna grupowego
ist_atr:=M.grp_make('Atrybuty Intrastat'@,"
   M.index('ARODZ'); M.prefix('T','T');
   MGR.index('KOD'); MGR.prefix('T');
   MPKW.index('KOD'); MPKW.prefix();
   TYPYDOK.index('TYP'); TYPYDOK.prefix(); TYPYDOK.f_set('T',,'\"TYPYDOK\".UE = \\'T\\'');
   KH.index('KOD'); KH.prefix();
   exec('czytaj','#stalesys',,INFO)",
   '#m_gr_ist',1,1);

M.grp_sel(ist_atr,M,m_wer,'Słownik materiałów'@,,,,,,,,,'maximized');
M.grp_sel(ist_atr,TYPYSP,typysp_w,'Dokumenty sprzedaży'@,,,,,
   "TYPYSP.index('SPRZAK'); TYPYSP.prefix(); TYPYSP.f_set('T',,'\"TYPYSP\".UE=\\'T\\' and \"TYPYSP\".ZAK=\\'N\\'')"
   ,,,,'maximized');
M.grp_sel(ist_atr,TYPYSP,typyzk_w,'Dokumenty zakupu'@,,,,,
   "TYPYSP.index('SPRZAK'); TYPYSP.clear(); TYPYSP.f_set('T',,'\"TYPYSP\".UE=\\'T\\' and \"TYPYSP\".ZAK=\\'T\\'')"
   ,,,,'maximized');
M.grp_sel(ist_atr,TYPYDOK,typydo_w,'Dokumenty magazynowe'@,,,,,,,,,'maximized');
M.grp_sel(ist_atr,KH,kh_wer,'Kontrahenci'@,,,,,,,,,'maximized');
M.grp_sel(ist_atr,OKR,info_wer,'Urząd celny'@,,,,,,,,,'maximized');

M.win_sel(ist_atr);
M.select();
TYPYSP.f_clear(1);
TYPYDOK.f_clear(1);

VAR_DEL.delete('m_wer','m_red','typysp_w','typysp_r','typyzk_w','typyzk_r','typydo_w','typydo_r','kh_wer');
VAR_DEL.delete('kh_red','info_wer','ist_atr');
~~


\info_uc_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: klawisz F3 OKR.UC
::  OLD: \info_uc_f3/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','intrastat','067',OKR.UC)


\info_uc_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: po redakcji OKR.UC
::   WY: 1 - spelnione warunki, 0 - wpp
::  OLD: \info_uc_po/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

:: sprawdzenie czy wartosc istnieje w slowniku 067
{? OKR.UC<>'' & exec('find_sl','intrastat','067',OKR.UC)=null || _return:=0 ?};

{? _return=0
|| FUN.info('Niedozwolona wartość pola Urząd celny.'@)
?};

_return


\intp_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Menu Definicje/Intrastat/Progi - definiowanie progow w przywozie i wywozie
::  OLD: \intp_def/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
OKR.cntx_psh;
OKR.index('OKR'); OKR.prefix(REF.FIRMA);
_wer:=OKR.mk_sel('Definiowanie progów Intrastat'@,,,'jkjkjkjaderqzcn');
OKR.win_fld(_wer,,'ROK',,,4,,,'Rok'@);
OKR.win_fld(_wer,,'MC',,,7,,,'Miesiąc'@);
OKR.win_fld(_wer,,'NAZ',,,20,,,'Nazwa'@);
OKR.win_fld(_wer,,'ISTPP',,,7,,,'Przywóz'@,,'N-nie dotyczy, P-podstawowy, S-szczegółowy'@);
OKR.win_fld(_wer,,'ISTPW',,,7,,,'Wywóz'@,,'N-nie dotyczy, P-podstawowy, S-szczegółowy'@);
_bf:="exec('ust_prog','intrastat','P',OKR.ref)";
OKR.win_act(_wer,,'Formuła','&Przywóz'@@,,'Zmiana progu w przywozie'@,_bf,,,,,,'P');
_bf:="exec('ust_prog','intrastat','W',OKR.ref)";
OKR.win_act(_wer,,'Formuła','&Wywóz'@@,,'Zmiana progu w wywozie'@,_bf,,,,,,'W');

OKR.win_sel(_wer);
OKR.select;

OKR.cntx_pop


\ust_prog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: ustawienie progu w przywozie lub wywozie
::   WE: _a-'P'-przywoz, 'W'-wywoz
::       _b-OKR.ref
::  OLD: \ust_prog/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? OKR.ROK<2004 | OKR.ROK=2004 & OKR.MC<5
|| FUN.info('Deklaracja Intrastat obowiązuje od maja 2004 roku.'@);
   return
?};

OKR.cntx_psh;
OKR.index('OKR'); OKR.prefix(REF.FIRMA,OKR.ROK); OKR.seek(_b);
_txt:={? _a='P' || 'Wybierz próg w przywozie:' || 'Wybierz próg w wywozie:' ?};
{? OKR.MC=1 | _a='P' & OKR.ISTPP='N' | _a='W' & OKR.ISTPW='N'
|| _ch:=FUN.choice(_txt,,'Nie dotyczy'@,'Podstawowy'@,'Szczegółowy'@);
   _war:={? _ch=1 || 'N' |? _ch=2 || 'P' || 'S' ?}
|? _a='P' & OKR.ISTPP='P' | _a='W' & OKR.ISTPW='P'
|| _ch:=FUN.choice(_txt,,'Podstawowy'@,'Szczegółowy'@);
   _war:={? _ch=1 ||  'P' || 'S' ?}
|| FUN.info('Zmiana progu nie jest możliwa.'@); _ch:=0
?};
{? _ch
||
:: blokada zmiany progu jeśli istnieją deklaracje w okresie od zmienianego do końca roku
   _txt:='';
   IST.cntx_psh();
   IST.use('it____'+($OKR.ROK+2));
   {? ~IST.lock(1)
   ||
      FUN.info('Zmiana progu zablokowana przez innego użytkownika.'@)
   ||
      IST.cntx_psh();
      IST.index('NR_VER');
      IST.prefix(_a,OKR.ROK);
      {? IST.find_ge(OKR.MC)
      ||
         _txt:=
            'W miesiącu nr %1 jest deklaracja %2.\n'
            'Należy usunąć wszystkie deklaracje w miesiącach nr od %3 do 12 przed zmianą progu statystycznego.'@
            [$IST.MIESIAC,IST.NRWLASNY,$OKR.MC]
      ?};
      IST.cntx_pop();
      {? _txt=''
      ||
:: blokada zmiany progu jeśli istnieją dokumenty z zaakceptowanymi danymi do intrastat
:: w okresie od zmienianego do końca roku
         _od:=form(OKR.ROK,,,'99')+form(OKR.MC,-2,,'99');
         _do:=form(OKR.ROK,,,'99')+'12';
         _il:=0;
         {? _a='P'
         ||
            _faks:=sql('
               select
                  count(*) IL
               from
                  @FAKS
               where
                  FAKS.IST_TYP=\'P\'
                  and FAKS.INTRAKC=\'T\'
                  and \':_a\'<=FAKS.IST_OKR and FAKS.IST_OKR<=\':_b\''
            ,_od,_do);
            _il:=_faks.IL;
            {? _il=0
            ||
               _nd:=sql('
                  select
                     count(*) IL
                  from
                     @ND
                  where
                     ND.IST_TYP=\'P\'
                     and ND.INTRAKC=\'T\'
                     and \':_a\'<=ND.IST_OKR and ND.IST_OKR<=\':_b\''
               ,_od,_do);
               _il:=_nd.IL
            ?}
         ||
            _faks:=sql('
               select
                  count(*) IL
               from
                  @FAKS
               where
                  FAKS.IST_TYP=\'W\'
                  and FAKS.INTRAKC=\'T\'
                  and \':_a\'<=FAKS.IST_OKR and FAKS.IST_OKR<=\':_b\''
            ,_od,_do);
            _il:=_faks.IL
         ?};
         {? _il>0
         ||
            _ist_typ:={? _a='P' || 'danych do Intrastat przywóz'@ || 'danych do Intrastat wywóz'@ ?};
            _txt:=
               'Należy wycofać akceptację %1 na wszystkich dokumentach\n'
               'w miesiącach nr od %2 do 12 przed zmianą progu statystycznego.'@[_ist_typ,$OKR.MC]
         ?}
      ?};
      {? _txt<>''
      ||
         IST.unlock();
         FUN.info(_txt)
      ||
         _loop:=1;
         {!
         |? _loop
         |!
            {? _a='P' || OKR.ISTPP:=_war || OKR.ISTPW:=_war ?};
            OKR.put;
            _loop:=OKR.next
         !};
         IST.unlock()
      ?}
   ?};
   IST.cntx_pop()
?};
OKR.cntx_pop


\rw3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdzenie reguly RW3
::   WE: _a - kod towaru dla INTRASTAT
::   WY: 1 - regula spelniona, 0 - wpp
::  OLD: \rw3/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

{? _a<>''
|| ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL');
   ISTDEFSL.prefix('187','P',_a,_a);
   {? ISTDEFSL.first() || _return:=0 ?};
   ISTDEFSL.cntx_pop()
?};

_return


\ist_zo_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja okien dla podmiot zobowiazany
::  OLD: \ist_zo_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ist_zo_r:='';

ist_zo_w:=ISTZ.mk_sel('Podmiot zobowiązany'@,,0,'cezisteeist');
ISTZ.win_sel(ist_zo_w);
ISTZ.win_fld(ist_zo_w,,'NAZWA',,,47);
ISTZ.win_fld(ist_zo_w,,'ULICANR',,,30,,,'Ulica'@);
ISTZ.win_fld(ist_zo_w,,'KODPOCZT',,,9,,,'Kod pocztowy'@);
ISTZ.win_fld(ist_zo_w,,'MIEJSCOW',,,20,,,'Miejscowość'@);
ISTZ.win_fld(ist_zo_w,,'NIP',,,10);
ISTZ.win_fld(ist_zo_w,,'REGON',,,14)
::ISTZ.win_act(ist_zo_w,0,'Formuła','Dołącz',,'Dołączenie nowego zapisu',,"
::   ISTZ.blank(1);
::   ISTZ.IST:=IST.ref();
::   ISTZ.PZ_LUB_Z:='Z';
::   exec('addItem','intrastat','ISTZ','PodmiotZobowiazany')");
::ISTZ.win_act(ist_zo_w,1,'Formuła','Dołącz',,'Dołączenie nowego zapisu',,"
::   ISTZ.blank(1);
::   ISTZ.IST:=IST.ref();
::   ISTZ.PZ_LUB_Z:='Z';
::   exec('addItem','intrastat','ISTZ','PodmiotZobowiazany')",1);
::ISTZ.win_act(ist_zo_w,0,'Formuła','Usuń',,'Usunięcie bieżącego zapisu',,"exec('delItem','intrastat','ISTZ')");
::ISTZ.win_act(ist_zo_w,0,'Formuła','Popraw',,'Poprawienie bieżącego zapisu',,
::   "exec('modItem','intrastat','ISTZ','PodmiotZobowiazany')",1)


\addItem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dodaje rekord do tabeli _a
::   WE: _a - nazwa tabeli
::       _b - nazwa elementu struktury INTRASTAT
::  OLD: \addItem/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_valid:='\"exec(\'valid\',\'intrastat\',\''+_a+'\',IST.ISTDEF,\''+_b+'\')\"';

ist_t_r:=exec('mkEdit','intrastat',ISTT,IST.ISTDEF,'Towar','Towar'@);
ISTT.win_edit(ist_t_r);

{? _a='ISTT' || ISTT.POZID:=exec('NewOrder','#table','ISTT','POZID',1)  ?};

{? ($(_a+'.edit('+_valid+')'))()
||
   _add:=1;
:: regula R12
   {? _a='ISTT'
   ||
      {? IST.RODZAJ='P'
      ||
         _poz:=sql('
            select max(ISTT.POZID) POZLAST
            from ISTT join IST using(ISTT.IST,IST.REFERENCE)
            where IST.ROK=:_a and IST.MIESIAC=:_b and IST.NUMER=:_c and ISTT.TYP=0',
            IST.ROK,IST.MIESIAC,IST.NUMER);
         {? _poz.first()
         || {? ISTT.POZID>_poz.POZLAST
            ||
               ISTT.POZID:=_poz.POZLAST+1;
               ISTT.S:='N';
               FUN.info('Numer pozycji został zmieniony na kolejny.'@)
            ||
               ISTT.S:='Z';
               _buf:=obj_new(ISTT.fld_num());
               {! _i..ISTT.fld_num() |! _buf[_i]:=ISTT[_i] !};
               ISTT.cntx_psh();
               {? ISTT.find_key(ISTT.POZID)
               ||
                  {? FUN.ask('Istnieje już pozycja o tym numerze.\nCzy nadpisać pozycję?'@)
                  || {! _i..ISTT.fld_num() |! ISTT[_i]:=_buf[_i] !};
                     ISTT.M:='T';
                     ISTT.put()
                  ?};
                  _add:=0
               ?};
               ISTT.cntx_pop()
            ?}
         || ISTT.POZID:=1;
            ISTT.S:='N'
         ?}
      ||
         ISTT.S:='N'
      ?}
   ?};
   {? _add=1 || ($(_a+'.add()'))() ?}
?}


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: funkcja sprawdza reguly, poprawnosc typu argumentow danego elementu
::       struktury INTRASTAT
::   WE: STRING _a - akronim tabeli
::       _b - ISTDEF.ref() - wersja definicji INTRASTAT
::       _c - ISTDEFS.OPIS - nazwa elementu struktury
::       _d - dodatkowy komentarz
::   WY: 1 - wartości atrybutów elementu prawidłowe, 0 - wpp
::  OLD: \valid/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
_TAB:=_a;
_wersja:=_b;
_elemStr:=_c;
_kom:={? _<4 || '' || _d ?};
ISTDEF.cntx_psh();
ISTDEF.prefix();
{? ISTDEF.seek(_wersja)
|| ISTDEFS.index('LP');
   ISTDEFS.prefix(ISTDEF.ref());
   {? ISTDEFS.first()
   || _iter:=1;
      {!
      |? {? ISTDEFS.OPIS=_elemStr
         || ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first()
            || {!
               |?
::                tutaj funkcja sprawdzajaca istnienie pola w tabeli
                  {? ISTDEFI.NAZFLD<>''
                  || _val:=($(_TAB+'.'+ISTDEFI.NAZFLD))();
::                    sprawdzenie wymagalnosci
                     {? ISTDEFI.WYM='W' & _val=exec('null','intrastat',_val)
                     || FUN.info('Niewypełnione pole "%1".'@[{? ISTDEFI.OPIS_FLD<>'' || ISTDEFI.OPIS_FLD || ISTDEFI.NAZ?}]+_kom);
                        _rr:=ISTDEFI.NAZFLD;
                        _iter:=0
                     ?};
::                   sprawdzenie regul
                     {? _iter
                     || {? ISTDEFI.REGULY=''
                        || _reg:=1
                        || _reg:=exec('chkReg','intrastat',_val,ISTDEFI.REGULY,_kom);
                           {? _reg=-1
                           || _rr:=ISTDEFI.NAZFLD;
                              _iter:=0
                           ?}
                        ?};
::                      sprawdzenie typu danych
                        {? _iter & _reg & ISTDEFI.TYP<>''
                        || {? exec('skipFld','intrastat',ISTDEFI.NAZ,1)
                           || {? ~exec('chkType','intrastat',_val,ISTDEFI.TYP,ISTDEFI.NAZ,_kom)
                              || _rr:=ISTDEFI.NAZFLD;
                                 _iter:=0
                              ?}
                           ?}
                        ?}
                     ?}
                  ?};
                  _iter & ISTDEFI.next()
               !}
            ?}
         ?};
         _iter & ISTDEFS.next()
      !}
   ?}
?};
ISTDEF.cntx_pop();
_rr


\null
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: patrz zwracany wynik
::   WE: _a - dowolna wartosc
::   WY: '' - jeśli _a typu string
::       date(0,0,0) - jeśli _a typu data
::       0  - wpp
::  OLD: \null/ist03.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(_a)=2 || ''
|? type_of(_a)=4 || date(0,0,0)
                 || 0
?}


\chkReg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdzenie regul INRASTAT
::   WE: _a - wartosc
::       _b - reguly
::       _c - dodatkowy komentarz
::       _d - wyswietlać komentarz
::   WY: -1 - regula nie spełniona
::        0 - regula spelniona nie sprawdzac typu danych
::        1 - regula spelniona sprawdzac typ danych
::  OLD: \chkReg/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:=1;

_val:=_a;
_reg:=_b + ',';
_kom:={? _ < 3 || '' || _c ?};
_fld_n:={? ISTDEFI.OPIS_FLD<>'' || ISTDEFI.OPIS_FLD || ISTDEFI.NAZ ?};
__PSPS:=0;
_progp:=_progw:='';
{? IST.ROK>0 & IST.MIESIAC>0 & IST.MIESIAC<13
||
   _progp:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'P');
   _progw:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'W');
   __PSPS:=exec('czy_prog_s','intrastat',IST.TYP,_progw,_progp)
?};

:: globalne reguly wymagalnosci
:: regula G1
{? _reg*'G1,'
||
   {? _val<=0
   ||
      FUN.emsg('Wartość pola %1 musi być większa od zera.'@[_fld_n]+_kom);
      _rr:=-1
   ?}
?};
:: Reguła G2
{? _rr<>-1 & _reg*'G2,'
||
   {? _val<0
   ||
      FUN.emsg('Wartość pola %1 musi być większa lub równa zero.'@[_fld_n]+_kom);
      _rr:=-1
   ?}
?};
:: G3 kontrolowane przy eksporcie do xml
:: G5,G7 realizowane przy kontroli typu
:: G17 nie kontrolowane

:: lokalne reguly pozostale
:: regula R2,R4 zapewnione przy akceptaji

:: regula R1
{? _rr<>-1 & _reg*'R1,'
|| {? IST.ROK
    & (2+_val<>$form(IST.ROK,-4,,'99')+2
      | 3+(2-_val)<>'IST'
      | +(5-_val)<2)
   ||
      FUN.emsg('Nr własny jest niepoprawny.'
         '\n\nNumer powinien być zbudowany wg wzorca: rrISTnumer gdzie:'
         '\nrr-dwie ostatnie cyfry roku'
         '\nIST-stały tekst'
         '\nnumer-unikalny numer,co najmniej 2 znaki'
         '\n\nUwaga do poprawności numeru brane są dane z nagłówka deklaracji.'@);
      _rr:=-1
   ?}
?};
:: regula R5
{? _rr<>-1 & _reg*'R5,'
||
   1
?};
:: regula R9
{? _rr<>-1 & _reg*'R9,'
||
   1
?};
:: regula R10
{? _rr<>-1 & _reg*'R10,'
||
   1
?};
:: regula R14
{? _rr<>-1 & _reg*'R14,'
||
   1
?};
:: regula R15
{? _rr<>-1 & _reg*'R15,'
||
   1
?};
:: regula R16
{? _rr<>-1 & _reg*'R16,'
||
   {? +$_val=4
   ||
      _rr:=0
   ||
      FUN.emsg('Rok sprawozdawczy musi być podany w postaci czterech cyfr.'@);
      _rr:=-1
   ?}
?};
:: regula R13
{? _rr<>-1 & _reg*'R13,'
||
   {? _val='PL'
   ||
      FUN.emsg('Wartość \"PL\" nie jest dozwolona jako\nkraj przeznaczenia/wysyłki.'@+_kom);
      _rr:=-1
   ?}
?};
{? _rr<>-1
||
   {? _reg*'R16,' & _reg*'R18,'
   ||
      {? _val<2004
      ||
         FUN.emsg('Okres obrachunkowy musi być większy lub równy 2004-05.'@);
         _rr:=-1
      ?}
   |? _reg*'R17,' & _reg*'R18,'
   ||
      {? IST.ROK=2004 & _val<5
      ||
         FUN.emsg('Okres obrachunkowy musi być większy lub równy 2004-05.'@);
         _rr:=-1
      ?}
   ?}
?};
:: regula R19
{? _rr<>-1 & _reg*'R19,'
||
   1
?};
:: lokalne reguly wymagalnosci
{? IST.ISTDEF().IST_ISTK='I'
||
:: regula RW1 realizowana przy eksporcie do pliku xml (makeAtr,ist02)
   {? _rr<>-1 & _reg*'RW3,'
   ||
      {? IST.TYP='W'
      ||
         {? exec('czy_kp','intrastat',IST.TYP,,date(IST.ROK,IST.MIESIAC,1))
         ||
            {? _val=exec('null','intrastat',_val) || FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom); _rr:=-1 ?}

         |? _val<>exec('null','intrastat',_val)
         ||
            FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1
         ?}
      |? IST.TYP='P'
      ||
         {? exec('find_sl','intrastat','187',ISTT.KODT)
         ||
            {? _val<>exec('null','intrastat',_val)
            || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1
            ?}
         |? _val=exec('null','intrastat',_val)
         ||
            FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom); _rr:=-1
         ?}
      ?}
   ?};
   {? _rr<>-1 & _reg*'RW5,'
   ||
      {? exec('find_sl','intrastat','187',ISTT.KODT) & ISTT.JU<>'' || ISTT.JU:='' ?};
      {? ISTT.S='A' | ISTT.JU=''
      || {? _val<>0 || FUN.emsg('Pole "%1" musi mieć wartość zerową.'@[_fld_n]+_kom); _rr:=-1 ?}
      || {? _val<=0 || FUN.emsg('Pole "%1" musi mieć wartosć większą od zera.'@[_fld_n]+_kom); _rr:=-1 ?}
      ?}
   ?};
   {? _rr<>-1 & _reg*'RW7,'
   ||
      1
   ?};
   {? _rr<>-1 & (_reg*'RW9,' | _reg*'RW10') & ISTT.S<>'A'
   ||
      {? exec('find_sl','intrastat','187',ISTT.KODT)
      ||
         {? _val<>exec('null','intrastat',_val) || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1 ?}
      |? __PSPS=0 & _val<>exec('null','intrastat',_val)
      ||
         FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1
      |? __PSPS=1 & _val=exec('null','intrastat',_val)
      ||
         FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom); _rr:=-1
      ?}
   ?};
   {? _rr<>-1 & _reg*'RW11,'
   ||
      1
   ?};
   {? _rr<>-1 & (_reg*'RW12,' | _reg*'RW14,') & ISTT.S<>'A'
   ||
      {? exec('find_sl','intrastat','187',ISTT.KODT)
      ||
         {? _val<>exec('null','intrastat',_val) || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1 ?}
      |? _val=exec('null','intrastat',_val)
      ||
         FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom); _rr:=-1
      ?}
   ?};
   {? _rr<>-1 & (_reg*'RW13,' | _reg*'RW15,') & ISTT.S<>'A'
   ||
      {? _val=exec('null','intrastat',_val) & (ISTDEFI.NAZ='KrajPrzeznaczeniaWysylki' | ISTDEFI.NAZ='KodTowarowy')
      ||
         FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom); _rr:=-1
      ?}
   ?};
   {? _rr<>-1 & _reg*'RW16,'
   ||
      {? exec('find_sl','intrastat','188',ISTT.KODT) & ISTT.S<>'A'
      ||
         {? _val<>exec('null','intrastat',_val) || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1 ?}
      |? _val=exec('null','intrastat',_val)
      ||
         FUN.emsg('Pole "%1" ma zerową wartość.'@[_fld_n]+_kom)
      ?}
   ?};
   {? _rr<>-1 & _reg*'RW60,'
   ||
::    obowiazywala od 2006.04 do 2007.03
      1
   ?};
   {? _rr<>-1 & _reg*'RW61,'
   ||
      {? (IST.ROK<2006 | IST.ROK=2006 & IST.MIESIAC<4) | (IST.ROK=2007 & IST.MIESIAC>3 | IST.ROK>2007)
      ||
         {? ISTDEFI.NAZFLD='MASAN' & ISTT.KODT='99500000'
         ||
            {? _val<>exec('null','intrastat',_val)
            || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1
            ?}
         |? exec('find_sl','intrastat','188',ISTT.KODT)
         ||
            {? _val<>exec('null','intrastat',_val)
            || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom); _rr:=-1
            ?}
         ?}
      ?}
   ?};
   {? _rr<>-1 & (_reg*'RW80,' | _reg*'RW81,')
   ||
      {? exec('find_sl','intrastat','189',ISTT.KODT)
      ||
         {? _val<>exec('null','intrastat',_val)
         ||
            FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom);
            _rr:=-1
         ?}
      |? exec('find_sl','intrastat','190',ISTT.KODT)
            |
         exec('find_sl','intrastat','191',ISTT.RTRANSAK)
            |
         exec('czy_prog_s','intrastat',IST.TYP,_progw,_progp)=1
      ||
         {? _val=exec('null','intrastat',_val)
         ||
            FUN.emsg('Pole "%1" musi być wypełnione.'@[_fld_n]+_kom);
            _rr:=-1
         ?}
      |? _val<>exec('null','intrastat',_val)
      ||
         FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom);
         _rr:=-1
      ?}
   ?};
:: reguły macrologic
   {? _rr<>-1 & _reg*'MCL01'
   || {? ISTT.S<>'A' & IST.TYP='W' & date(IST.ROK,IST.MIESIAC,0)>date(2017,6,30) & _val=exec('null','intrastat',_val)
      || FUN.emsg('Niewypełnione pole "%1".'@[_fld_n]+_kom);
         _rr:=-1
      |? ISTT.S='A' | IST.TYP='P' & _val<>exec('null','intrastat',_val)
      || FUN.emsg('Pole "%1" musi pozostać puste.'@[_fld_n]+_kom);
         _rr:=-1
      ?}
   ?}
?};
VAR_DEL.delete('__PSPS');
_rr


\skipFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdzenie czy pole _a ma byc pominiete
::   WE: _a - identyfikator pola
::       _b = 1 - wlaczenie pola LacznaWartoscStatystyczna do warunku na pominiecie
::          = 0 - wpp
::   WY: 0 - jesli ma byc pominiete, 1 - wpp
::  OLD: \skipFld/ist03.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='KrajPochodzenia' & IST.TYP='W' & exec('czy_kp','intrastat',IST.TYP,,date(IST.ROK,IST.MIESIAC,1))=0
||
   return(0)
||
   _progp:=_progw:='';
   _date:=date(0,0,0);
   {? IST.ROK & IST.MIESIAC>0 & IST.MIESIAC<13
   ||
      _date:=date(IST.ROK,IST.MIESIAC,1);
      _progp:=exec('prog','intrastat',_date,'P');
      _progw:=exec('prog','intrastat',_date,'W')
   ||
      return(0)
   ?};
   _ist_typ:=IST.TYP;
   _kodt:=ISTT.KODT;

   {? exec('czy_prog_s','intrastat',_ist_typ,_progw,_progp)=1
   ||
      {? (_a='OpisTowaru' | _a='WarunkiDostawy' | _a='RodzajTransakcji' | _a='RodzajTransportu' | _a='KrajPochodzenia')
            &
         exec('find_sl','intrastat','187',_kodt)
      || return(0)
      |? _a='MasaNetto' & (_kodt='99500000' | _kodt<>'' & exec('find_sl','intrastat','188',_kodt)=1)
      || return(0)
      |? _a='WartoscFaktury' & exec('find_sl','intrastat','188',_kodt)=1
      || return(0)
      |? _a='WartoscStatystyczna' & exec('ws_reg','intrastat',IST.TYP,_date,ISTT.KODT,ISTT.RTRANSAK)=0
      || return(0)
      || return(1)
      ?}
   ||
      {? _b & _a='LacznaWartoscStatystyczna'
      || return(0)
      |? _a='WarunkiDostawy' |  _a='RodzajTransportu'
      || return(0)
      |? (_a='OpisTowaru' | _a='RodzajTransakcji' | _a='KrajPochodzenia')
            &
         exec('find_sl','intrastat','187',ISTT.KODT)
      || return(0)
      |? _a='MasaNetto' & (_kodt='99500000' | _kodt<>'' & exec('find_sl','intrastat','188',_kodt)=1)
      || return(0)
      |? _a='WartoscFaktury' & exec('find_sl','intrastat','188',_kodt)=1
      || return(0)
      |? _a='WartoscStatystyczna' & exec('ws_reg','intrastat',IST.TYP,_date,ISTT.KODT,ISTT.RTRANSAK)=0
      || return(0)
      || return(1)
      ?}
   ?}
?}


\chkType
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdza typ argumentu _a
::   WE: _a - wartosc
::       _b - wymagany typ danej _a
::       _c - nazwa atrybutu
::       _d - dodatkowy komentarz
::   WY: 1 - typ _a zgodny z wymaganym, 0 - wpp
::  OLD: \chkType/ist03.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=_a;
_typ:=_b;
_naz:=_c;
_kom:={? _<4 || '' || _d ?};
_err:=0;
_fld_n:={? ISTDEFI.OPIS_FLD<>'' || ISTDEFI.OPIS_FLD || ISTDEFI.NAZ ?};
:: tutaj sprawdzic poprawnosc _typ
:: sprawdzenie poprawnosci typu
{? 1+_typ='n' || {? type_of(_val)<>1 || _err:=1 ?}
|? 1+_typ='z' || {? type_of(_val)<>2 || _err:=1 ?}
:: nie obslugiwany
|? 2+_typ='dt'|| return(1)
|? 1+_typ='d' || {? type_of(_val)<>4 || _err:=1 ?}
:: nie obslugiwany
|? 1+_typ='b' || return(1)
?};
:: sprawdzenie dlugosci - tylko dla liczb i ciagow znakow (n/z)
:: zmienna dlugosc jesli wzorzec posiada .. lub jest wzorcem na liczbe
_dl:=0;
_dokl:=0;
{? 1+_typ='n' | 1+_typ='z'
|| _zm:=_typ*'..' | 1+_typ='n';
   {? _pos:=_typ*'..'
   || _dl:=#((_pos+1)-_typ)
   || _dl:=1-_typ;
      _pos:=_dl*',';
      {? _pos
      || _dokl:=#((_pos)-_dl);
         _dl:=#((_pos-1)+_dl)+1
      || _dl:=#_dl;
         _dokl:=0
      ?}
   ?};
   {? 1+_typ='n' || {? +$form(_val,,_dokl,'0.')>_dl || _err:=2 ?}
   |? 1+_typ='z' || {? (_zm=0 & +_val<>_dl)
                     | (_zm=1 & +_val>_dl)
                    || _err:=2
                    ?}
   ?}
?};
:: sprawdzenie dokladnosci
{? 1+_typ='n'
|| {? _val<>_val$_dokl || _err:=3 ?}
?};
:: komunikaty o bledach
{? _err=1
|| FUN.info('Błędny typ argumentu.'@+_kom);
   return(0)
|? _err=2
|| FUN.info('Błędna długość argumentu '@+_fld_n+' ('+_typ+').'+_kom);
   return(0)
|? _err=3
|| FUN.info('Błędna dokładność argumentu '@+_fld_n+' ('+_typ+').'+_kom);
   return(0)
?};
1


\mkEdit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: tworzy okno edycji w oparciu o definicje INTRASTAT
::   WE: _a - Uchwyt do tabeli dla ktorej będzie tworzone okno redakcji
::       _b - ISTDEF.REFERENCE - wersja definicji deklaracji
::       _c - Nazwa elementu deklaracji INTRASTAT
::       _d - tytul tworzonego okienka
::  OLD: \mkEdit/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
_TAB:=_a;
_wersja:=_b;
_elemStr:=_c;
ISTDEF.cntx_psh();
ISTDEF.prefix();
{? ISTDEF.seek(_wersja)
||
   ISTDEFS.index('LP');
   ISTDEFS.prefix(ISTDEF.ref());
   {? ISTDEFS.first()
   ||
      _iter:=1;
      {!
      |? {? ISTDEFS.OPIS = _elemStr
         ||
            ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first()
            ||
               _rr:=_TAB.mk_edit(_d,0);
               {!
               |?
::                tutaj funkcja sprawdzająca istnienie pola w tabeli
                  {? ISTDEFI.WYM='C'
                  || _TAB.win_ecol(_rr)
                  |? ISTDEFI.WYM='H'
                  || _TAB.win_esep(_rr,ISTDEFI.NAZ)
                  |? ISTDEFI.NAZFLD <> ''
                  ||
                     {? exec('isFld','intrastat',_TAB,ISTDEFI.NAZFLD)
                     ||
                        _prec:=exec('prec','intrastat',ISTDEFI.TYP);
                        _mod:={? _TAB=ISTT & ISTDEFI.NAZFLD='POZID' || ISTT.A='T' | IST.RODZAJ<>'P' || 0 ?};
                        _TAB.win_efld(_rr,,ISTDEFI.NAZFLD,,,40,_prec,_mod,
                           {? ISTDEFI.OPIS_FLD<>'' || ISTDEFI.OPIS_FLD || ISTDEFI.NAZ ?})
                     ?}
                  ?};
                  ISTDEFI.next()
               !};
               _iter:=0;
               exec('ok_esc','#window',_TAB,_rr)
            ?}
         ?};
         _iter & ISTDEFS.next()
      !}
   ?}
?};
ISTDEF.cntx_pop();

_rr


\isFld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdza istnienie pola w tabeli
::   WE: _a - uchwyt do tabeli
::       _b - akronim pola
::   WY: 1 - istnieje pole w tabeli, 0 - wpp
::  OLD: \isFld/ist03.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_fldAcr:=_b;
_fldNum:=_TAB.fld_num();
_find:=0;
{! _ii:=1.._fldNum |? ~_find |!
   _find:=_TAB.fld_acr(_ii)=_fldAcr
!};
_find


\prec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: patrz zwracany wynik
::   WE: _a - definicja typu danych
::   WY: zwraca precycje okreslona w definicji typu danych
::  OLD: \prec/ist03.fml
::----------------------------------------------------------------------------------------------------------------------
_dokl:=0;
_typ:=_a;
{? (1+_typ)='n'
|| _zm:=_typ*'..' | 1+_typ='n';
   {? _pos:=_typ*'..'
   || _dl:=#((_pos+1)-_typ)
   || _dl:=1-_typ;
      _pos:=_dl*',';
      {? _pos
      || _dokl:=#((_pos)-_dl);
         _dl:=#((_pos-1)+_dl)
      || _dl:=#_dl;
         _dokl:=0
      ?}
   ?}
?};
_dokl


\delItem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: usuwa biezacy rekord z tabeli _a
::   WE: _a - nazwa tabeli
::  OLD: \delItem/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_cont:=1;
{? _a='ISTT'
||
   {? ISTT.A='T'
   ||
      _cont:=0;
      FUN.info('Pozycja automatycznie utworzona.\nUsunięcie zabronione.'@)
   |? exec('FindInSet','#table','ISTTS','ISTT',ISTT.ref())<>null()
   ||
      _cont:=0;
      FUN.info('Pozycja powiązana z pozycjami dokumentów.\nUsunięcie zabronione.'@)
   ||
      _poz:=ISTT.POZID
   ?}
?};
{? _cont & FUN.ask('Usunąć bieżący wiersz?'@)
||
   {? _cont
   ||
      ($(_a+'.del()'))();
      {? _a='ISTT' & 'DK'*IST.RODZAJ
      ||
         {? _poz<ISTT.POZID
         ||
            exec('delistts','intrastat'); exec('ReNumAfterDel','#table','ISTT','POZID')
         ?}
      ?}
   ?}
?}


\delistts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: usuwa zapis w tabeli ISTTS dla biezacej ISTT
::  OLD: \delistts/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
ISTTS.index('ISTT');
ISTTS.prefix(ISTT.ref);
{? ISTTS.first
|| {! |? ISTTS.del() !}
?};
''


\modItem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: poprawia rekord tabeli _a
::   WE: _a - nazwa tabeli
::       _b - nazwa elementu struktury INTRASTAT
::  OLD: \modItem/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_valid:='\"exec(\'valid\',\'intrastat\',\''+_a+'\',IST.ISTDEF,\''+_b+'\')\"';
{? _a = 'ISTT'
|| {? ISTT.S='A'
   ||
      FUN.emsg('Pozycja anulowana. Poprawa pozycji niedostępna.'@);
      _ok:=0
   ||
      _poz:=ISTT.POZID;
      ist_t_r:=exec('mkEdit','intrastat',ISTT,IST.ISTDEF,'Towar','Towar'@);
      ISTT.win_edit(ist_t_r)
   ?}
?};

{? _ok=1 & ($(_a+'.edit('+_valid+')'))()
||
:: regula R12
   _put:=1; _ref:=ISTT.ref();
   {? _a='ISTT' & IST.RODZAJ='P'
   ||
      _poz:=sql('
         select max(ISTT.POZID) POZLAST
         from ISTT join IST using(ISTT.IST,IST.REFERENCE)
         where IST.ROK=:_a and IST.MIESIAC=:_b and IST.NUMER=:_c and ISTT.TYP=0 and ISTT.REFERENCE<>:_d',
         IST.ROK,IST.MIESIAC,IST.NUMER,ISTT.ref());
      {? _poz.first()
      || {? ISTT.POZID>_poz.POZLAST
         ||
            {? ISTT.POZID<>_poz.POZLAST+1
            ||
               ISTT.POZID:=_poz.POZLAST+1;
               ISTT.S:='N';
               FUN.emsg('Numer pozycji został zmieniony na kolejny.'@)
            ?}
         ||
            ISTT.S:='Z';
            _buf:=obj_new(ISTT.fld_num());
            {! _i..ISTT.fld_num() |! _buf[_i]:=ISTT[_i] !};
            ISTT.cntx_psh();
            {? ISTT.find_key(ISTT.POZID) & ISTT.ref()<>_ref
            ||
               FUN.emsg('Pozycja o tym numerze już istnieje.\nModyfikacja niemożliwa.'@);
               _put:=0
            ?};
            ISTT.cntx_pop()
         ?}
      ||
         ISTT.S:='N'
      ?}
   |? _a='ISTT'
   ||
      ISTT.S:='N'
   ?};
   {? _put=1 || ($(_a+'.put()'))() ?}
?}


\ist_zg_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja okien dla zglaszajacy
::  OLD: \ist_zg_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ist_zg_r:=exec('mkEdit','intrastat',ISTZ,IST.ISTDEF,'Zglaszajacy','Zgłaszający'@);
{? ist_zg_r<>'' || ISTZ.win_edit(ist_zg_r) ?};

ist_zg_w:=ISTZ.mk_sel('Zgłaszający'@,,0,'ass1istos');
ISTZ.win_sel(ist_zg_w);
ISTZ.win_fld(ist_zg_w,,'NAZWA',,,47);
ISTZ.win_fld(ist_zg_w,,'ULICANR',,,30,,,'Ulica'@);
ISTZ.win_fld(ist_zg_w,,'KODPOCZT',,,9,,,'Kod pocztowy'@);
ISTZ.win_fld(ist_zg_w,,'MIEJSCOW',,,20,,,'Miejscowość'@);
ISTZ.win_fld(ist_zg_w,,'NIP',,,10);
ISTZ.win_fld(ist_zg_w,,'REGON',,,14)
::ISTZ.win_act(ist_zg_w,0,'Formuła','Dołącz',,'Dołączenie nowego zapisu',,"
::   ISTZ.blank(1);
::   ISTZ.IST:=IST.ref();
::   ISTZ.PZ_LUB_Z:='N';
::   exec('addItem','intrastat','ISTZ','Zglaszajacy')");
::ISTZ.win_act(ist_zg_w,1,'Formuła','Dołącz',,'Dołączenie nowego zapisu',,"
::   ISTZ.blank(1);
::   ISTZ.IST:=IST.ref();
::   ISTZ.PZ_LUB_Z:='N';
::   exec('addItem','intrastat','ISTZ','Zglaszajacy')",1);
::ISTZ.win_act(ist_zg_w,0,'Formuła','Usuń',,'Usunięcie bieżącego zapisu',,"exec('delItem','intrastat','ISTZ')");
::ISTZ.win_act(ist_zg_w,0,'Formuła','Popraw',,'Poprawienie bieżącego zapisu',,
::   "exec('modItem','intrastat','ISTZ','Zglaszajacy')",1)


\ist_t_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja okien dla towary
::  OLD: \ist_t_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ist_t_r:='';

ist_t_w:=ISTT.mk_sel('Towary'@,,0,'cetistweist',,,,,'U','T');
ISTT.win_sel(ist_t_w);
ISTT.win_fld(ist_t_w,,'POZID',,,-4,,,'Pozycja'@);
ISTT.win_fld(ist_t_w,,'OPIST',,,36,,,'Opis towaru'@);
ISTT.win_fld(ist_t_w,,'KPW',,,-10,,,'Kraj przeznaczenia / wysyłki'@);
ISTT.win_fld(ist_t_w,,'WD',,,-9,,,'Warunki dostawy'@);
ISTT.win_fld(ist_t_w,,'RTRANSAK',,,-6,,,'Rodzaj transakcji'@);
ISTT.win_fld(ist_t_w,,'KODT',,,-5,,,'Kod towaru'@);
ISTT.win_fld(ist_t_w,,'RTRANSPO',,,-6,,,'Rodzaj transportu'@);
ISTT.win_fld(ist_t_w,,'KP',,,-3,,,'Kraj pochodzenia'@);
ISTT.win_fld(ist_t_w,,'MASAN',,,-10,,,'Masa netto'@);
ISTT.win_fld(ist_t_w,,'ILUJM',,,-10,,,'Ilość w jednostce uzupełniającej'@);
ISTT.win_fld(ist_t_w,,'WF',,,-14,,,'Wartość faktury'@);
ISTT.win_fld(ist_t_w,,'WS',,,-14,,,'Wartość statystyczna'@);
ISTT.win_act(ist_t_w,0,'Szukaj');
ISTT.win_act(ist_t_w,0,'Formuła','&Dołącz'@@,,'Dołączanie nowego zapisu'@,,"
   ISTT.blank(1);
   ISTT.IST:=IST.ref();
   exec('addItem','intrastat','ISTT','Towar')",,,,,'D');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,1,'Formuła','&Dołącz'@@,,'Dołączanie nowego zapisu'@,,"
   ISTT.blank(1);
   ISTT.IST:=IST.ref();
   exec('addItem','intrastat','ISTT','Towar')",1,,,,'D');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,0,'Formuła','&Usuń'@@,,'&Usuwanie bieżącego zapisu'@,,"exec('delItem','intrastat','ISTT')",,,,,'U');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,0,'Formuła','&Popraw'@@,,'Poprawianie bieżącego zapisu'@,,"
   exec('modItem','intrastat','ISTT','Towar')",,,,,'P');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,0,'Formuła','&Anuluj'@@,,'Anulowanie pozycji zgloszenia'@,,"exec('anulPoz','intrastat')",,,,,'A');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,1,'Formuła','&Anuluj'@@,,'Anulowanie pozycji zgloszenia'@,,"exec('anulPoz','intrastat')",,,,,'A');
task_attach('LMG_INT_DAIN');
task_attach('LMG_INT_DINT');
ISTT.win_act(ist_t_w,0,'Formuła','Po&zycje'@@,,'Dokumenty źródłowe'@,,"exec('dok_zrod','intrastat')",1,,,,'Z')


\anulPoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: anulowanie pozycji zgloszenia, wykorzystywane tylko w korektach zgloszen
::   WY: ~~
::  OLD: \anulPoz/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
undefine();
define('NRPOZ',ISTT.POZID,'Numer pozycji'@,,5);

{? def_edit()
||
   _poz:=sql(
      'select ISTT.POZID '+
      'from ISTT join IST using(ISTT.IST,IST.REFERENCE) '+
      'where IST.ROK=:_a and IST.MIESIAC=:_b and IST.NUMER=:_c and ISTT.TYP=0 and ISTT.POZID=:_d',
      IST.ROK,IST.MIESIAC,IST.NUMER,DEFINE.NRPOZ);
   {? ~_poz.first()
   ||
      FUN.info('Brak takiego numeru we wcześniejszych wersjach deklaracji.'@)
   ||
      {? FUN.ask('Anulować pozycję numer '@+$DEFINE.NRPOZ+'?')
      ||
         ISTT.cntx_psh();
         _put:=ISTT.find_key(DEFINE.NRPOZ);
         ISTT.blank(1);
         ISTT.IST:=IST.ref();
         ISTT.TYP:=0;
         ISTT.POZID:=DEFINE.NRPOZ;
         ISTT.A:='N'; ISTT.S:='A';
         {? _put=1 || ISTT.M:='T'; ISTT.put() || ISTT.M:='N'; ISTT.add() ?};
         ISTT.cntx_pop()
      ?}
   ?}
?};
undefine();
~~


\dok_zrod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: listowanie pozycji dokumentow zrodlowych uwzglednionych w pozycji deklaracji INTRASTAT
::  OLD: \dok_zrod/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select FAKS.SYM SYM, FAKS.D D, FAP.POZ POZ, '''' MG
   from ISTTS join @FAP using(ISTTS.DOKP,FAP.reference) join @FAKS using(ISTTS.DOK,FAKS.reference)
   where  ISTTS.ISTT=:_a
   union all
   select ND.SYM SYM, ND.D D, DK.P POZ, MG.SYM MG
   from ISTTS join @DK using(ISTTS.DOKP,DK.reference) join @ND using(ISTTS.DOK,ND.reference)
      join MG using(ND.MAG,MG.reference)
   where  ISTTS.ISTT=:_a
',ISTT.ref());

_wer:=_tab.mk_sel('Pozycje dokumentów'@,,0,'ist_pow_dok');
_tab.win_sel(_wer);
_tab.win_fld(_wer,,'SYM',,,20,,,'Symbol'@);
_tab.win_fld(_wer,,'D',,,10,,,'Data'@);
_tab.win_fld(_wer,,'POZ',,,-5,,,'Pozycja'@);
_tab.win_fld(_wer,,'MG',,,8,,,'Magazyn'@);

_tab.select()


\ist_wy_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja okien dla wypelniajacy
::  OLD: \ist_wy_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
ist_w_r:='';

ist_w_w:=ISTW.mk_sel('Wypełniający'@,,0,'ceiystweist');
ISTW.win_sel(ist_w_w);
ISTW.win_fld(ist_w_w,,'NAZIM',,,35,,,'Nazwisko i imię'@);
ISTW.win_fld(ist_w_w,,'TELEFON',,,35,,,'Telefon'@);
ISTW.win_fld(ist_w_w,,'FAKS',,,30,,,'Faks'@);
ISTW.win_fld(ist_w_w,,'EMAIL',,,35,,,'E-mail'@)
::ISTW.win_act(ist_w_w,0,'Formuła','Dołącz',,'Dołączanie nowego zapisu',,"
::   ISTW.blank(1);
::   ISTW.IST:=IST.ref();
::   exec('addItem','intrastat','ISTW','Wypelniajacy')");
::ISTW.win_act(ist_w_w,1,'Formuła','Dołącz',,'Dołączanie nowego zapisu',,"
::   ISTW.blank(1);
::   ISTW.IST:=IST.ref();
::   exec('addItem','intrastat','ISTW','Wypelniajacy')",1);
::ISTW.win_act(ist_w_w,0,'Formuła','Usuń',,'Usuwanie bieżącego zapisu',,"exec('delItem','intrastat','ISTW')");
::ISTW.win_act(ist_w_w,0,'Formuła','Popraw',,'Poprawianie bieżącego zapisu',,"exec('modItem','intrastat','ISTW','Wypelniajacy')",1)


\ist_dz_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: tworzy tabele dokumentow zrodlowych dla deklaracji INTRASTAT
::   WE: _a - IST.ref()
::  OLD: \ist_dz_set/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
__DOK_ZR:=tab_tmp(1
   ,'SYM','STRING[20]','Symbol'
   ,'DOK','STRING[16]','Wskazanie na dokument');
exec('dz_fill','intrastat',_a);

ist_dz_w:=__DOK_ZR.mk_sel('Dokumenty źródłowe'@,,0,'#ist_dok_zr',,,,,'U','T');
__DOK_ZR.win_sel(ist_dz_w);
__DOK_ZR.win_fld(ist_dz_w,,'SYM',,,21,,,'Symbol'@);
__DOK_ZR.win_act(ist_dz_w,,'Wyświetl',,,,"
   _ref:=cur_tab(1,1).DOK;
   _Tab:=ref_tab(_ref);
   {? _Tab=FAKS || exec('FindAndGet','#table',FAKS,_ref,,\"params_exec('fall_rek','faktury_nag')\")
   |? _Tab=ND || exec('FindAndGet','#table',ND,_ref,,\"params_exec('nd_wyswietl_ba','magdok_nag')\")
   ?}
")


\dz_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: odswieza liste dokumentow zrodlowych dla deklaracji INTRASTAT
::   WE: _a - IST.ref()
::  OLD: \dz_fill/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a <> null
||
   _tab:=sql(
      'select distinct ISTTS.SYM, ISTTS.DOK' +
      ' from ISTTS' +
      ' where ISTTS.IST = :_a',_a)
?};

__DOK_ZR.prefix();
{? __DOK_ZR.first() || {! |? __DOK_ZR.del() !} ?};

{? _a<>null & _tab.first()
||
   {!
   |? __DOK_ZR.SYM:=_tab.SYM;
      __DOK_ZR.DOK:=_tab.DOK;
      __DOK_ZR.add() & _tab.next()
   !};
   __DOK_ZR.first()
?}


\dIstTyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: klawisz F3 dla pol slownikowych intrastat
::  OLD: \dIstTyp/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=IST.TYP;

{? IST.ISTDEF<>null
||
   ISTDEFS.index('LP');
   ISTDEFS.prefix(IST.ISTDEF);
   {? ISTDEFS.first()
   ||
      _iter:=1;
      {! |? ISTDEFI.index('LP');
            ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first()
            ||
               {! |? {? ISTDEFI.NAZFLD=cur_afld()
                     ||
                        _wyb:=0;
                        _return:=exec('slownik','intrastat',ISTDEFI.SLOWNIK,fld());
                        _iter:=0
                     ?};
                     _iter & ISTDEFI.next()
                  !}
            ?};
            _iter & ISTDEFS.next()
         !}
   ?}
?};

_return


\genIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wykonuje kolejne formuly zgodnie z definicja struktury INTRASTAT
::   WE: _a - typ definicji deklaracji INTRASTAT
::          = I - INTRASTAT
::          = K - korekta INTRASTAT
::       _b - 0-z komunikatmai, 1-bez komunikatów
::       _c - ISTDEF.ref
::  OLD: \genIst/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? _ > 0 || {? type_of(_a) <> type_of('') || _a:='' ?} || _a:='' ?};
{? var_press('_b')<>type_of(0) || _b:=0 ?};
{? var_pres('_c')<>type_of(null()) || _c:=null() ?};

{? _a <> 'I' & _a <> 'K'
||
   {? ~_b || FUN.info('Błąd przekazywanych parametrów do funkcji genIst.'@) ?}
||
   ISTDEF.index('VER');
   ISTDEF.prefix('',_a);
   {? _c=null() & ~ISTDEF.first() | _c & ~ISTDEF.seek(_c)
   ||
      {? ~_b || FUN.info('Brak definicji Intrastat.'@) ?}
   ||
      {? _c
      ||
         _count:=1
      |? ISTDEF.size() > 1
      ||
         ISTDEF.win_sel('WER');
         _default:=ISTDEF.actions('WER','SRdup','W');
         _count:=ISTDEF.select();
         ISTDEF.actions('WER',,_default)
      ||
         _count:=ISTDEF.first()
      ?};
      {? _count
      ||
         ISTDEFS.index('LP');
         ISTDEFS.prefix(ISTDEF.ref());
         {? ISTDEFS.first()
         ||
            {! |? ($ISTDEFS.FORMULA)();
                  ISTDEFS.next()
            !}
         ?};
         {? ~_b || FUN.info('Zakończono tworzenie deklaracji.'@) ?}
      ?}
   ?}
?}


\dekl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wypelnia INTRASTAT - element Deklaracja
::  OLD: \dekl/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
{? INTRAST.ISTRODZ='D'
||
   _nr:=exec('nrIst','intrastat');
   _ver:=1
||
   _nr:=IST.NUMER;
   _ver:=exec('werIst','intrastat');
   _rok:=IST.ROK;
   _miesiac:=IST.MIESIAC
?};
IST.blank();
IST.TM_STAM:=IST.tm_stamp();
IST.ISTDEF:=ISTDEF.ref();
IST.AKC:='N';
IST.UC:=exec('FindInSet','#table','OKR','MC',ST.AR,REF.FIRMA,"OKR.UC",,1,'');
IST.TYP:=INTRAST.ISTTYP;
IST.RODZAJ:=INTRAST.ISTRODZ;
IST.ROK:=
   {? INTRAST.ISTRODZ='D' || ST.AR
   |? INTRAST.ISTRODZ='K' | INTRAST.ISTRODZ='P' || _rok
   ?};
IST.MIESIAC:=
   {? INTRAST.ISTRODZ='D' || ST.AM
   |? INTRAST.ISTRODZ='K' | INTRAST.ISTRODZ='P' || _miesiac
   ?};
IST.NUMER:=_nr;
IST.WERSJA:=_ver;
IST.LWF:=0;
IST.LWS:=0;
IST.LLP:=0;
IST.MIEJSCOW:=XINFO.MIA;
IST.DATA:=date();
IST.NRWLASNY:=($IST.ROK+2)+'IST'+IST.TYP+form(IST.MIESIAC,-2)+form(IST.NUMER,-2)+form(IST.WERSJA,-2);
IST.add()


\nrIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wyznaczanie numeru deklaracji INTRASTAT
::   WY: numer deklaracji
::  OLD: \nrIst/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
IST.cntx_psh();
IST.index('NR_VER');
IST.prefix(INTRAST.ISTTYP,ST.AR,ST.AM);
_rr:={? IST.last() || IST.NUMER + 1 || 1 ?};
IST.cntx_pop();
_rr


\werIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wyznaczanie wersji deklaracji INTRASTAT
::   WY: wersja deklaracji
::  OLD: \werIst/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
IST.cntx_psh();
IST.index('NR_VER');
IST.prefix(INTRAST.ISTTYP,IST.ROK,IST.MIESIAC,IST.NUMER);
_rr:={? IST.last() || IST.WERSJA + 1 ?};
IST.cntx_pop();
_rr


\pZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wypelnienie ITRASTAT - element PodmiotZobowiazany
::  OLD: \pZ/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.ROK>0 & IST.MIESIAC>0
|| exec('czytaj','#stalesys',date(IST.ROK,IST.MIESIAC,0),XINFO)
|| exec('czytaj','#stalesys',,XINFO)
?};
ISTZ.prefix();
ISTZ.blank(1);
ISTZ.IST:=IST.ref();
ISTZ.PZ_LUB_Z:='Z';
ISTZ.NAZWA:=XINFO.NAZ;
ISTZ.ULICANR:=35+form((XINFO.UL+' '+XINFO.NR_D));
ISTZ.KODPOCZT:=6+XINFO.KOD_P;
ISTZ.MIEJSCOW:=35+XINFO.MIA;
ISTZ.NIP:=STR.gsub(XINFO.NIP,'-','');
ISTZ.REGON:=14+(XINFO.REGON+(+XINFO.REGON-('0'*14)));
ISTZ.add()


\tow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wypelnienie deklaracji INTRASTAT - element Towar
::  OLD: \tow/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
{? INTRAST.ISTRODZ='P'
||
:: przypadek korekty zgloszenia INTRASTAT
   exec('towKor','intrastat')
||
:: przypadek zgloszenia i zmiany zgloszenia INTRASTAT
   exec('nalicz','intrastat',0)
?}


\nalicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: nalicza deklaracje INTRASTAT - element TOWAR
::   WE: _a = 0 - zgloszenie lub zmiana zgloszenia, 1 - korekta zgloszenia
::       _b - tabela z refsql naglowkow dokumentow ktore sa uwzglednione we wczesniejszych wersjach deklarcji,
::            podawane tylko dla korekty kiedy _a=1
::       _c - rok
::       _d - miesiac
::   WY: ~~
::  OLD: \nalicz/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(1) || _c:=ST.AR ?};
{? var_pres('_d')<>type_of(1) || _d:=ST.AM ?};

ODDZ.cntx_psh(); ISTT.cntx_psh(); FAKS.cntx_psh; ND.cntx_psh;
ODDZ.prefix;
ISTT.index('GRUP');
ISTT.prefix(IST.ref());
FAKS.index('FAK_SYM');
FAKS.prefix();
ND.prefix();

:: sprawdzenie czy przekroczony specyficzny prog statystyczny
_progp:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'P');
_progw:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'W');
__PSPS:=exec('czy_prog_s','intrastat',IST.TYP,_progw,_progp);
__POZ:=__LWF:=__LWS:=0;
__OKR:=form(_c,-4,,'9 ')+form(_d,-2);
_kraj:=INFO.KRAJ;
_roks:=sql('select distinct OKR.ROK ROK from OKR');
_dostate:=do_state;
_rok:=$_c+2;
_auto:=__INTRA.AUTO;

{? _auto
||
:: jak będzie potrzeba dodać zapis o pominiętych dokumentach w blob czynności
   ~~
||
   exec('ini_kom','#message','Deklaracja Intrastat'@)
?};

:: wywozy wg FAKS
_ind:=FAKS.ndx_tmp('',,'INTRAKC',,,'IST_TYP',,,'IST_OKR',,);
{? IST.TYP='W' & _ind<>''
||
   exec('faks_warning','intrastat',_auto,'S');
   {? _roks.first()
   ||
      {!
      |? {? ODDZ.first()
         ||
            {!
            |? exec('open','open_tab',ODDZ.KOD,2-$_roks.ROK);
               IST.use('it____'+_rok); ISTT.use('itt___'+_rok); ISTTS.use('itts__'+_rok);
               FAKS.index(_ind);
               FAKS.prefix('T','W',__OKR);
               {? FAKS.first()
               ||
                  {!
                  |?
                     _r_lock:=exec('r_lock_one','#table',FAKS,FAKS.ref());
                     {? ~_r_lock
                     ||
                        {? FAKS.INTRA<>'N'
                        ||
                           ~~

                        |? _auto
                        ||
::                         jak będzie potrzeba dodać zapis o pominiętych dokumentach w blob czynności
                           ~~
                        ||
                           exec('add_kom','#message','Nie uwzględniony w deklaracji Intrastat: %1'@[FAKS.SYM],7,
                              'Dokument zablokowany przez innego użytkownika'@)
                        ?}
                     ||
                        {? (FAKS.KZ='' | exec('FindAndGet','#table',FAKS,FAKS.KZ,,"FAKS.INTRAKC='T'",0))
                              &
                           FAKS.KRAJ=_kraj & FAKS.STAT_REJ<>'A'
                              &
                           (FAKS.INTRA<>'T' | (_a=1 & _b.find_key(BB.refsql(FAKS.ref()))))
                        ||
                           {? _dostate=0 || do ?};
::                         naliczenie pozycji zgloszenia
                           exec('nalicz_f','intrastat',IST.ref(),_a);
::                         zaznaczenie ze dokument uwzgledniony w zgloszeniu
                           {? FAKS.INTRA='N'
                           || ISTTS.cntx_psh;
                              ISTTS.index('IST'); ISTTS.prefix(IST.ref,$FAKS.ref);
                              {? ISTTS.first
                              || FAKS.INTRA:='T';
                                 {? FAKS.put() & FAKS.KZ<>''
                                 ||
                                    exec('FindAndGet','#table',FAKS,FAKS.KZ,,"
                                       {? FAKS.INTRA='N' || FAKS.INTRA:='T'; FAKS.put() ?}
                                    ")
                                 ?}
                              ?};
                              ISTTS.cntx_pop
                           ?};
                           {? _dostate=0 || end ?}
                        ?};
                        exec('r_unlock_one','#table',FAKS,FAKS.ref(),_r_lock)
                     ?};
                     FAKS.next()
                  !}
               ?};
               ODDZ.next()
            !}
         ?};
         _roks.next()
      !}
   ?}
?};
{? _ind<>'' || FAKS.ndx_drop(_ind) ?};

:: przywozy wg faktur wewnetrznych parametr + badanie FAKS.WHERE
_ind:=FAKS.ndx_tmp('',,'INTRAKC',,,'IST_TYP',,,'IST_OKR',,);
_wg_mag:=exec('get','#params',100200,2);
{? IST.TYP='P' & _wg_mag='N' & _ind<>''
||
   exec('faks_warning','intrastat',__INTRA.AUTO,'Z');
   {? _roks.first()
   ||
      {!
      |? {? ODDZ.first()
         ||
            {!
            |? exec('open','open_tab',ODDZ.KOD,2-$_roks.ROK);
               IST.use('it____'+_rok); ISTT.use('itt___'+_rok); ISTTS.use('itts__'+_rok);
               FAKS.index(_ind);
               FAKS.prefix('T','P',__OKR);
               {? FAKS.first()
               ||
                  {!
                  |?
                     _r_lock:=exec('r_lock_one','#table',FAKS,FAKS.ref());
                     {? ~_r_lock
                     ||
                        {? FAKS.INTRA<>'N'
                        ||
                           ~~

                        |? _auto
                        ||
::                         jak będzie potrzeba dodać zapis o pominiętych dokumentach w blob czynności
                           ~~
                        ||
                           exec('add_kom','#message','Nie uwzględniony w deklaracji Intrastat: %1'@[FAKS.SYM],7,
                              'Dokument zablokowany przez innego użytkownika'@)
                        ?}
                     ||
                        {? (FAKS.KZ='' | exec('FindAndGet','#table',FAKS,FAKS.KZ,,"FAKS.INTRAKC='T'",0))
                              &
                           FAKS.KRAJ=_kraj & FAKS.STAT_REJ<>'A'
                              &
                           (FAKS.INTRA<>'T' | (_a=1 & _b.find_key(BB.refsql(FAKS.ref()))))
                        ||
                           {? _dostate=0 || do ?};
::                         naliczenie pozycji zgloszenia
                           exec('nalicz_f','intrastat',IST.ref(),_a);
::                         zaznaczenie ze dokument uwzgledniony w zgloszeniu
                           {? FAKS.INTRA='N'
                           || ISTTS.cntx_psh;
                              ISTTS.index('IST'); ISTTS.prefix(IST.ref,$FAKS.ref);
                              {? ISTTS.first
                              || FAKS.INTRA:='T';
                                 {? FAKS.put() & FAKS.KZ<>''
                                 ||
                                    exec('FindAndGet','#table',FAKS,FAKS.KZ,,"
                                       {? FAKS.INTRA='N' || FAKS.INTRA:='T'; FAKS.put() ?}
                                    ")
                                 ?}
                              ?};
                              ISTTS.cntx_pop
                           ?};
                           {? _dostate=0 || end ?}
                        ?};
                        exec('r_unlock_one','#table',FAKS,FAKS.ref(),_r_lock)
                     ?};
                     FAKS.next()
                  !}
               ?};
               ODDZ.next()
            !}
         ?};
         _roks.next()
      !}
   ?}
?};
{? _ind<>'' || FAKS.ndx_drop(_ind) ?};

:: przywozy wg ND
_ind:=ND.ndx_tmp('',,'INTRAKC',,,'IST_TYP',,,'IST_OKR',,);
{? IST.TYP='P' & _wg_mag='T' & _ind<>''
||
   _kor2dekl:=exec('get','#params',100204,2)='T';
   exec('nd_warning','intrastat',__INTRA.AUTO,'S');
   {? _roks.first()
   ||
      {!
      |? {? ODDZ.first()
         ||
            {!
            |? exec('open','open_tab',ODDZ.KOD,2-$_roks.ROK);
               IST.use('it____'+_rok); ISTT.use('itt___'+_rok); ISTTS.use('itts__'+_rok);
               ND.index(_ind);
               ND.prefix('T','P',__OKR);
               {? ND.first()
               ||
                  {!
                  |?
                     {? ~ND.r_lock(1,1,1)
                     ||
                        {? ND.INTRA<>'N'
                        ||
                           ~~

                        |? _auto
                        ||
::                         jak będzie potrzeba dodać zapis o pominiętych dokumentach w blob czynności
                           ~~
                        ||
                           exec('add_kom','#message','Nie uwzględniony w deklaracji Intrastat: %1'@[ND.SYM],7,
                              'Dokument zablokowany przez innego użytkownika'@)
                        ?}
                     ||
                        {? ND.KRAJ=_kraj
                              &
                           (ND.INTRA<>'T' | (_a=1 & _b.find_key(BB.refsql(ND.ref()))))
                              &
                           (ND.TYP().DK<>'T' | _kor2dekl)
                        ||
                           {? _dostate=0 || do ?};
::                         naliczenie pozycji zgloszenia
                           exec('nalicz_n','intrastat',IST.ref(),_a);
::                         zaznaczenie ze dokument uwzgledniony w zgloszeniu
                           {? ND.INTRA='N'
                           || ISTTS.cntx_psh;
                              ISTTS.index('IST'); ISTTS.prefix(IST.ref,$ND.ref);
                              {? ISTTS.first
                              || ND.INTRA:='T';
                                 ND.put()
                              ?};
                              ISTTS.cntx_pop
                           ?};
                           {? _dostate=0 || end ?}
                        ?};
                        ND.r_unlock
                     ?};
                     ND.next()
                  !}
               ?};
               ODDZ.next()
            !}
         ?};
         _roks.next()
      !}
   ?}
?};
{? _ind<>'' || ND.ndx_drop(_ind) ?};

exec('open','open_tab',ST.ODDZ,2-$ST.AR);
:: zaokraglenie wartosci fakturowej i statystycznej
ISTT.index('TYP'); ISTT.prefix(IST.ref(),0);
{? ISTT.first()
||
   __LWF:=__LWS:=0;
   ISTTS.cntx_psh;
   ISTTS.index('ISTT');
   {!
   |?
      ISTT.MASAN:=ISTT.MASAN$0;
      ISTT.ILUJM:=ISTT.ILUJM$0;
      ISTT.WF:=ISTT.WF$0; __LWF+=ISTT.WF;
      ISTT.WS:=ISTT.WS$0; __LWS+=ISTT.WS;
      {? ISTT.WF=0 & ISTT.WS=0 & ISTT.MASAN=0 & ISTT.ILUJM=0
      ||
         ISTT.cntx_psh;
         ISTT.prefix;
         _ref:=null;
         {? ISTT.next || _ref:=ISTT.ref; ISTT.prev ?};
         ISTT.TYP:=2;
         ISTTS.prefix(ISTT.ref);
         {? ISTTS.first || ISTT.put || ISTT.del ?};
         ISTT.cntx_pop;
         ISTT.seek(_ref)
      ||
         ISTT.put;
         ISTT.next
      ?}
   !};
   ISTTS.cntx_pop;
:: renumeracja pozycji
   __POZ:=0;
   {? ISTT.first
   ||
      {!
      |?
         __POZ+=1;
         ISTT.POZID:=__POZ;
         ISTT.put & ISTT.next
      !}
   ?};
   IST.LLP:=__POZ;
   IST.LWF:=__LWF;
   IST.LWS:=__LWS;
   IST.put()
?};

{? _auto
||
:: jak będzie potrzeba dodać zapis o pominiętych dokumentach w blob czynności
   ~~
||
   exec('end_kom','#message')
?};

ODDZ.cntx_pop(); ISTT.cntx_pop(); FAKS.cntx_pop; ND.cntx_pop;

VAR_DEL.delete('__POZ','__LWF','__LWS','__PSPS','__OKR');
~~


\nalicz_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: oblicza pozycje zgloszenia INTRASTAT na podstawie pozycji dokumentu,
::       zaklada sie ze FAKS jest ustawione na dokumencie, ktorego pozycjie beda przetwarzane,
::       w funkcji wykorzystywne sa zmienne globalne: __POZ, __PSPS, __LWF, __LWS
::   WE: _a - IST.REFERENCE
::       _b = 0 - naliczanie dla deklaracji
::          = 1 - naliczanie tymczasowe dla korekty
::  OLD: \nalicz_f/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_istRef:=_a;
_tmp:=_b;
_czyKor:=FAKS.KOR<>'';
_refD:=FAKS.ref();
VAR_DEL.delete('__f_sym');
FAP.index('FAP');
FAP.prefix(FAKS.ref());
{? FAP.first()
||
   _idkh:={? exec('czy_idkh','intrastat',#(4+__OKR),#(4-__OKR)) || exec('nip_ue','intrastat') || '' ?};
   __f_sym:=FAKS.SYM; _f_dat:=FAKS.D; _f_kh:=FAKS.KH().SKR;
   _znak:={? _czyKor=1 & (FAKS.SZ='S' & IST.TYP='P' | FAKS.SZ='Z' & IST.TYP='W') || -1 || 1 ?};
:: wyszukanie wszystkich korekt po danym dokumencie
   _find:=exec('szuk_kor','faktury_nag',{? _czyKor=1 || FAKS.FKSQL || $FAKS.ref() ?},FAKS.D);
:: ustalenie ostatniej korekty wchodzacej na deklaracje
   _ostkor:=null; _ostmas:='';
   {? _find=1
   ||
      {? X_Xa.first()
      ||
         {!
         |? FAKS.cntx_psh();
            FAKS.use(8+X_Xa.REF);
            FAKS.prefix();
            {? FAKS.seek(X_Xa.REF)
            ||
               {? FAKS.AKC='T' & FAKS.STAT_REJ<>'A' & FAKS.IST_TYP=IST.TYP & FAKS.IST_OKR=__OKR
               || _ostkor:=FAKS.ref();
                  _ostmas:=3+(5-X_Xa.REF);
                  _idkh:={? exec('czy_idkh','intrastat',#(4+__OKR),#(4-__OKR)) || exec('nip_ue','intrastat') || '' ?}
               ?}
            ?};
            FAKS.cntx_pop();
            X_Xa.next()
         !}
      ?}
   ?};
   VAR_DEL.delete('X_Xa');
   {!
   |? {? FAP.M().RODZ='T'
      ||
         _kodt:=FAP.KCN().KOD;
         _opist:={? _kodt='' | exec('rw3','intrastat',_kodt) || FAP.KCN().OPIS || '' ?};
         _kpw:=FAP.KPW;
         _rtransa:=FAP.RTRANSAK;
         _kp:=FAP.KP;
         _masan:=_znak*FAP.MASAN;
         _ilujm:=_znak*FAP.ILUJM;
         _wf:=_znak*FAP.WF;
         _ju:=FAP.KCN().JU().KOD;
         _ws_pr:=exec('fap_ws_pr','faktury_poz');
::       pobranie atrybutow grupujacych z ostatniej korekty wchodzacej na deklaracje
         {? _ostkor<>null & _ostmas<>''
         ||
            _poz:=FAP.POZ;
            FAP.cntx_psh();
            FAP.use('fakpo'+_ostmas);
            FAP.index('FAP');
            FAP.prefix(_ostkor,_poz);
            {? FAP.first()
            ||
               _kpw:=FAP.KPW;
               _rtransa:=FAP.RTRANSAK;
               _kodt:=FAP.KCN().KOD;
               _kp:=FAP.KP;
               {? __PSPS=1 | exec('find_sl','intrastat','191',DK.RTRANSAK)
               ||
                  _wd:=FAP.WD;
                  _rtransp:=FAP.RTRANSPO
               ?};
               _ws_pr:=exec('fap_ws_pr','faktury_poz')
            ?};
            FAP.cntx_pop()
         ?};
         {? _ws_pr
         ||
            {? __PSPS=1
            ||
               _wd:=FAP.WD;
               _rtransp:=FAP.RTRANSPO
            ||
               _wd:=_rtransp:=''
            ?};
            _ws:=_znak*FAP.WS
         ||
            _wd:=_rtransp:='';
            _ws:=0
         ?};
         {? ISTT.find_key(_tmp,_kpw,_wd,_rtransa,_rtransp,_kp,_kodt,_idkh,)
         ||
            ISTT.MASAN+=_masan;
            ISTT.ILUJM+=_ilujm;
            ISTT.WF+=_wf;
            ISTT.WS+=_ws;
            ISTT.put();
            {? FAKS.INTRA='N'
            ||
               exec('addistts','intrastat',_istRef,ISTT.ref(),_refD,FAP.ref,__f_sym,_f_dat,_f_kh)
            ?}
         ||
            ISTT.blank(1);
            {? _tmp
            ||
               __POZ-=1; ISTT.TYP:=1
            ||
               __POZ+=1
            ?};
            ISTT.IST:=_istRef;
            ISTT.TYP:=_b;
            ISTT.POZID:=__POZ;
            ISTT.OPIST:=_opist;
            ISTT.KPW:=_kpw;
            ISTT.WD:=_wd;
            ISTT.RTRANSAK:=_rtransa;
            ISTT.RTRANSPO:=_rtransp;
            ISTT.KODT:=_kodt;
            exec('ids_upd','intrastat','028','P',_kodt,'');
            ISTT.KP:=_kp;
            ISTT.MASAN:=_masan;
            ISTT.ILUJM:=_ilujm;
            ISTT.WF:=_wf;
            ISTT.WS:=_ws;
            ISTT.A:='T'; ISTT.M:='N'; ISTT.S:='N';
            ISTT.JU:=_ju;
            ISTT.IDKH:=_idkh;
            {? ISTT.add() & FAKS.INTRA='N'
            ||
               exec('addistts','intrastat',_istRef,ISTT.ref(),_refD,FAP.ref,__f_sym,_f_dat,_f_kh)
            ?}
         ?}
      ?};
      FAP.next()
   !}
?};
VAR_DEL.delete('__f_sym');
''


\addistts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dodaje zapis w tabeli ISTTS
::   WE: _a - IST.ref
::       _b - ISTT.ref
::       _c - ref dokumentu / pozycji
::       _d - symbol dokumentu
::       _e - data dok
::       _f - kontrahent
::  OLD: \addistts/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=BB.refsql(_c);
_refp:=BB.refsql(_d);
ISTTS.clear();
ISTTS.blank();
ISTTS.IST:=_a;
ISTTS.ISTT:=_b;
ISTTS.DOK:=_ref;
ISTTS.DOKP:=_refp;
ISTTS.SYM:=_e;
ISTTS.D:=_f;
ISTTS.KH:=_g;

ISTTS.add(1)


\ids_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2011]
:: OPIS: uzupelnienie slownika
::   WE: _a - kod slownika
::       _b - naglowek/pozycja
::       _c - kod
::       _d - opis
::  OLD: \ids_upd/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>'' & _b<>'' & _c<>''
||
   ISTDEFSL.cntx_psh();
   ISTDEFSL.index('SL');
   ISTDEFSL.prefix(_a,_b,_c,_c);
   {? ~ISTDEFSL.first()
   ||
      ISTDEFSL.SL_K:=_a;
      ISTDEFSL.T:=_b;
      ISTDEFSL.K:=_c;
      ISTDEFSL.O:=_d;
      ISTDEFSL.add()
   ?};
   ISTDEFSL.cntx_pop()
?};
''


\nalicz_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: obliczanie pozcji deklaracji INTRASTAT
::   WE: _a - IST.REFERENCE
::       _b = 0 - naliczanie dla deklaracji
::          = 1 - naliczanie tymczasowe dla korekty
::  OLD: \nalicz_n/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_istRef:=_a;
_tmp:=_b;
_refD:=ND.ref();

DK.index('DOKMAG');
DK.prefix(ND.ref);
{? DK.first()
||
   _nd_sym:=ND.SYM; _nd_dat:=ND.D; _nd_kh:=ND.KH().SKR;
   {!
   |? {? DK.M().RODZ='T'
      ||
         _refDK:=DK.ref;
         _kodt:=DK.KCN().KOD;
         _opist:={? _kodt='' | exec('rw3','intrastat',_kodt) || DK.KCN().OPIS || '' ?};
         _kpw:=DK.KPW;
         _rtransa:=DK.RTRANSAK;
         _kp:=DK.KP;
         _masan:=DK.MASAN;
         _ilujm:=DK.ILUJM;
         _wf:=DK.WF;
         _ju:=DK.KCN().JU().KOD;

         {? exec('dk_ws_pr','magdok_poz')
         ||
            {? __PSPS=1
         ||
            _wd:=DK.WD;
               _rtransp:=DK.RTRANSPO
            ||
               _wd:=_rtransp:=''
            ?};
            _ws:=DK.WS
         ||
            _wd:=_rtransp:='';
            _ws:=0
         ?};
         {? ISTT.find_key(_tmp,_kpw,_wd,_rtransa,_rtransp,_kp,_kodt)
         ||
            ISTT.MASAN+=_masan;
            ISTT.ILUJM+=_ilujm;
            ISTT.WF+=_wf;
            ISTT.WS+=_ws;
            ISTT.put();
            {? ND.INTRA='N'
            ||
               exec('addistts','intrastat',_istRef,ISTT.ref(),_refD,_refDK,_nd_sym,_nd_dat,_nd_kh)
            ?}
         ||
            ISTT.blank(1);
            {? _tmp
            ||
               __POZ-=1; ISTT.TYP:=1
            ||
               __POZ+=1
            ?};
            ISTT.IST:=_istRef;
            ISTT.TYP:=_b;
            ISTT.POZID:=__POZ;
            ISTT.OPIST:=_opist;
            ISTT.KPW:=_kpw;
            ISTT.WD:=_wd;
            ISTT.RTRANSAK:=_rtransa;
            ISTT.RTRANSPO:=_rtransp;
            ISTT.KODT:=_kodt;
            exec('ids_upd','intrastat','028','P',_kodt,'');
            ISTT.KP:=_kp;
            ISTT.MASAN:=_masan;
            ISTT.ILUJM:=_ilujm;
            ISTT.WF:=_wf;
            ISTT.WS:=_ws;
            ISTT.A:='T'; ISTT.M:='N'; ISTT.S:='N';
            ISTT.JU:=_ju;
            {? ISTT.add() & ND.INTRA='N'
            ||
               exec('addistts','intrastat',_istRef,ISTT.ref(),_refD,_refDK,_nd_sym,_nd_dat,_nd_kh)
            ?}
         ?}
      ?};
      DK.next()
   !}
?}


\towKor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dziala w zakresie dokumentow wzietch do nowej deklaracji lub ostatniej wymiany
::  OLD: \towKor/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_istRef:=IST.ref();

_doklist:=sql('
   select distinct ISTTS.DOK
   from ISTTS join IST using(ISTTS.IST,IST.REFERENCE)
   where IST.ROK=:_a and IST.MIESIAC=:_b and IST.NUMER=:_c
   order by 1',
   IST.ROK,IST.MIESIAC,IST.NUMER);

:: naliczenie OD nowa deklaracji
exec('nalicz','intrastat',1,_doklist,IST.ROK,IST.MIESIAC);

:: zaokraglenie wartosci fakturowej i statystycznej
ISTT.cntx_psh(); ISTTS.cntx_psh;
ISTT.index('TYP'); ISTT.prefix(IST.ref(),1);
ISTTS.index('ISTT');
{? ISTT.first()
||
   __LWF:=__LWS:=0;
   {!
   |? ISTT.MASAN:=ISTT.MASAN$0;
      ISTT.ILUJM:=ISTT.ILUJM$0;
      ISTT.WF:=ISTT.WF$0; __LWF+=ISTT.WF;
      ISTT.WS:=ISTT.WS$0; __LWS+=ISTT.WS;
      {? ISTT.WF=0 & ISTT.WS=0 & ISTT.MASAN=0 & ISTT.ILUJM=0
      ||
         ISTT.cntx_psh;
         ISTT.prefix;
         _ref:=null;
         {? ISTT.next || _ref:=ISTT.ref; ISTT.prev ?};
         ISTT.TYP:=2;
         ISTTS.prefix(ISTT.ref);
         {? ISTTS.first || ISTT.put || ISTT.del ?};
         ISTT.cntx_pop;
         ISTT.seek(_ref)
      ||
         ISTT.put;
         ISTT.next
      ?}
   !};
   VAR_DEL.delete('__LWF','__LWS')
?};
ISTT.cntx_pop(); ISTTS.cntx_pop;


:: sprawdzenie roznic w stosunku do deklaracji korygowanej
ISTT.cntx_psh();

IST.cntx_psh();
IST.index('AKC');
IST.prefix('T',IST.TYP,IST.ROK,IST.MIESIAC,IST.NUMER);
{? IST.seek(INTRAST.IST)
||
   _pozMax:=0;
   {!
   |? IST.cntx_psh();
      ISTT.index('TYP'); ISTT.prefix(IST.ref(),0);
      {? ISTT.first()
      ||
         {!
         |?
            {? ISTT.POZID>_pozMax
            ||
::          pomijanie pozycji w korektach, ktore byly analizowane we wczesniejszych deklaracjach
               ISTT.cntx_psh();
::             dotarcie do wartosci pozycji z uwzglednieniem korekt
               {? (_istPoK:=exec('warPoKor','intrastat',ISTT.IST,ISTT.POZID,IST.ROK,IST.MIESIAC))<>null()
               ||
                  ISTT.prefix();
                  ISTT.seek(_istPoK)
               ?};
               _poz:=ISTT.POZID;
               _wf:=ISTT.WF;
               _ws:=ISTT.WS;
               _masan:=ISTT.MASAN;
               _ilujm:=ISTT.ILUJM;
               ISTT.index('GRUP');
               ISTT.prefix(_istRef,1,ISTT.KPW,ISTT.WD,ISTT.RTRANSAK,ISTT.RTRANSPO,ISTT.KP,ISTT.KODT,ISTT.IDKH,);
               {? ISTT.first()
               ||
                  {? ISTT.WF=0 & ISTT.WS=0 & ISTT.MASAN=0 & ISTT.ILUJM=0
                  ||
::                anulowanie pozycji
                     ISTT.blank(1);
                     ISTT.IST:=_istRef;
                     ISTT.TYP:=0;
                     ISTT.POZID:=_poz;
                     ISTT.A:='T'; ISTT.M:='N'; ISTT.S:='A';
                     ISTT.prefix();
                     ISTT.put()
                  |? _wf<>ISTT.WF | _ws<>ISTT.WS | _masan<>ISTT.MASAN | _ilujm<>ISTT.ILUJM
                  ||
::                zmiana pozycji
                     ISTT.IST:=_istRef;
                     ISTT.TYP:=0;
                     ISTT.POZID:=_poz;
                     ISTT.A:='T'; ISTT.M:='N'; ISTT.S:='Z';
                     ISTT.prefix();
                     ISTT.put()
                  ||
::                usuniecie tymczasowego rekordu
                     exec('delistts','intrastat');
                     ISTT.del()
                  ?}
               ||
::             anulowanie pozycji
                  {? ISTT.S<>'A'
                  || ISTT.prefix(_istRef,2,ISTT.KPW,ISTT.WD,ISTT.RTRANSAK,ISTT.RTRANSPO,ISTT.KP,ISTT.KODT,ISTT.IDKH,);
                     _put:=ISTT.first();
                     ISTT.blank(1);
                     ISTT.IST:=_istRef;
                     ISTT.TYP:=0;
                     ISTT.POZID:=_poz;
                     ISTT.A:='T'; ISTT.M:='N'; ISTT.S:='A';
                     ISTT.prefix();
                     {? _put || ISTT.put || ISTT.add ?}
                  ?}
               ?};
               ISTT.cntx_pop()
            ?};
            {? ISTT.POZID>_pozMax || _pozMax:=ISTT.POZID ?};
            ISTT.next()
         !}
      ?};
      IST.cntx_pop();
      IST.next()
   !}
?};
IST.cntx_pop();

:: dodanie nowych pozycji wynikających ze zmiany argumentów grupujących

ISTT.prefix(_istRef,1);
{? ISTT.first()
||
   {!
   |? _pozMax+=1;
      ISTT.cntx_psh();
      ISTT.POZID:=_pozMax;
      ISTT.TYP:=0;
      ISTT.prefix();
      ISTT.put();
      ISTT.cntx_pop();
      ISTT.first()
   !}
?};
IST.LWF:=IST.LWS:=IST.LLP:=0;
IST.put();
ISTT.cntx_pop()


\warPoKor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: zwrocenie refa do pozcji (ISTT) po ostatniej korekcie
::   WE: _a - korygowana deklaracja
::       _b - numer szukanej pozycji
::       _c - rok
::       _d - miesiac
::   WY: ISTT.ref
::  OLD: \warPoKor/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_ist:=_a;
_poz:=_b;
_return:=null();

IST.cntx_psh();
ISTT.cntx_psh();
IST.index('AKC');
IST.prefix('T',INTRAST.ISTTYP,_c,_d);
{? IST.last()
||
   {? IST.ref()<>_ist
   ||
      {!
      |? _cont:=IST.ref()<>_ist;
         {? IST.RODZAJ='P'
         ||
            ISTT.index('TYP');
            ISTT.prefix(IST.ref,0,_poz);
            {? ISTT.first() || _return:=ISTT.ref() ?}
         ?};
         _cont & _return=null() & IST.prev()
      !}
   ?}
?};
ISTT.cntx_pop();
IST.cntx_pop();

_return


\wyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wypelnienie ITRASTAT - element Wypelniajacy
::  OLD: \wyp/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
ISTW.prefix();
ISTW.blank(1);
ISTW.IST:=IST.ref();
ISTW.NAZIM:=OPERATOR.USER().DANE;
ISTW.add()


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: po usun okna WER tabeli IST
::  OLD: \cUIstWer/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.AKC='T'
||
   FUN.info('Deklaracja zaakceptowana.\nFunkcja niedostępna.'@)
||
   {? FUN.ask('Czy usunąć bieżący wiersz?'@)
   ||
      do;
      {? IST.RODZAJ='D' | IST.RODZAJ='K'
      ||
         _typ:=IST.TYP;
         _nr:=IST.NUMER;
         exec('setD','intrastat','N');
         exec('clear','intrastat');
         IST.cntx_psh();
         IST.index('AKC');
         IST.prefix('T',_typ,ST.AR,ST.AM,_nr);
         {? IST.last()
         || {!
            |? {? IST.RODZAJ<>'D' | IST.RODZAJ<>'K'
               ||
                  0
               ||
                  IST.prev()
               ?}
            !};
            exec('setD','intrastat','T')
         ?};
         IST.cntx_pop()
      ||
         exec('setD','intrastat','N');
         exec('clear','intrastat')
      ?};
      end
   ?}
?}


\setD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: ustawia znacznik FAKS.INTRA lub ND.INTRA na _a, dotyczy dokumentow zaliczonych do
::       daneego zgloszenia INTRASTAT
::   WE: _a - wartość znacznika
::   WY: 1 - ustawienie znacznika powiodlo sie, 0 - wpp
::  OLD: \setD/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

FAKS.cntx_psh();
ISTTS.index('IST');
ISTTS.prefix(IST.ref());
{? ISTTS.first()
||
   _Kz:=tab_tmp(1,'REF','STRING[16]',);
   _dok_ref:='';
   {? 1+ISTTS.DOK='f'
   ||
      {!
      |? {? _dok_ref<>ISTTS.DOK
         ||
            _kz_ref:=exec('FindAndGet','#table',FAKS,ISTTS.DOK,,"
               FAKS.INTRA:=_b;
               FAKS.put();
               FAKS.KZ
            ",'',_a);
            {? _kz_ref<>'' & ~_Kz.find_key(_kz_ref)
            ||
               _Kz.REF:=_kz_ref;
               _Kz.add()
            ?};
            _dok_ref:=ISTTS.DOK
         ?};
         _return=1 & ISTTS.next()
      !};
      _loop:=_Kz.first();
      {!
      |? _loop
      |!
         exec('FindAndGet','#table',FAKS,_Kz.REF,,"
            {? FAKS.T().UE='T'
            ||
               _intra:=FAKS.INTRA;
               FAKS.INTRA:={? exec('faks_kzf_w_intra','faktury_nag',FAKS.ref()) || 'T' || 'N' ?};
               {? _intra<> FAKS.INTRA || FAKS.put() ?}
            ?}
         ");
         _loop:=_Kz.next()
      !}
   ?}
?};
FAKS.cntx_pop();

ND.cntx_psh();
{? ISTTS.first()
||
   _dok_ref:='';
   {? 1+ISTTS.DOK='n'
   ||
      {!
      |? {? _dok_ref<>ISTTS.DOK
         ||
            exec('FindAndGet','#table',ND,ISTTS.DOK,,{? _a='N' || "INTRA:='N'; put()" || "INTRA:='T'; put()" ?});
            _dok_ref:=ISTTS.DOK
         ?};
         _return=1 & ISTTS.next()
      !}
   ?}
?};
ND.cntx_pop();

_return


\clear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: usuwa deklarację INTRASTAT
::  OLD: \clear/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
ISTZ.index('IST');
ISTZ.prefix(IST.ref());
{? ISTZ.first() || {! |? ISTZ.del() !} ?};
ISTW.index('IST');
ISTW.prefix(IST.ref());
{? ISTW.first() || {! |? ISTW.del() !} ?};
ISTT.index('TYP');
ISTT.prefix(IST.ref());
{? ISTT.first()
|| {! |? exec('delistts','intrastat');
         ISTT.del()
   !}
?};
IST.del()


\ist_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja INTRASTAT - Usuń
::       [_b] - 0-pusta dziedzina, 1-niepusta dziedzina
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=
   {? IST.TYP='P'
   || {? IST.GEN='N' || 'LMG_INT_DINT' || 'LMG_INT_DAIN' ?}
   || {? IST.GEN='N' || 'LSP_INT_DINT' || 'LSP_INT_DAIN' ?}
   ?};
_params.AKCJA:='Usuń';
_params.UIDREF:=IST.uidref();

exec('mp_run','#b__box',_params)


\ist_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja INTRASTAT - Popraw
::       [_b] - 0-pusta dziedzina, 1-niepusta dziedzina
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=
   {? IST.TYP='P'
   || {? IST.GEN='N' || 'LMG_INT_DINT' || 'LMG_INT_DAIN' ?}
   || {? IST.GEN='N' || 'LSP_INT_DINT' || 'LSP_INT_DAIN' ?}
   ?};
_params.AKCJA:='Popraw';
_params.UIDREF:=IST.uidref();

exec('mp_run','#b__box',_params)


\popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: akcja POPRAW po okienka wertowania WET tabeli IST
::   WE: _a - 0-wołane z todo, 1-wołane z obszaru
::  OLD: \cPIstWer/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.AKC='T'
||
   FUN.info('Zakończono rejestrację deklaracji Intrastat.\nFunkcja niedostępna.'@)
||
      exec('ist_win_edit_set','intrastat',_a);
      exec('ist_fill','intrastat');
      exec('intrast_zgl_po','intrastat',ist_r);

      params_set('context',params_get());

      IST.win_edit(ist_r);
      {? IST.edit("exec('ist_check','intrastat')")
      || exec('ist_update','intrastat')
      ?};

      IST.fld_fml('TYP','BEFORE_EDIT');
      IST.fld_fml('RODZAJ','BEFORE_EDIT')
?}


\ist_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja INTRASTAT - Popraw
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=
   {? IST.TYP='P'
   || {? IST.GEN='N' || 'LMG_INT_DINT' || 'LMG_INT_DAIN' ?}
   || {? IST.GEN='N' || 'LSP_INT_DINT' || 'LSP_INT_DAIN' ?}
   ?};
_params.AKCJA:='Zakończ_wer';
_params.UIDREF:=IST.uidref();

exec('mp_run','#b__box',_params)


\zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed akceptuj okna WER tabeli IST, akceptacja deklaracji INTRASTAT
::   WE: 0-z komunikatmai, 1-bez komunikatów
::  OLD: \ist_akc/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(0) || _a:=0 ?};

_wyn:=0;
{? IST.AKC = 'T'
||
   {? _a || FUN.info('Rejestracja deklaracja jest już zakończona.'@) ?}
||
   {? _a | FUN.ask('Czy zakończyć rejestrację deklaracji?'@)
   ||
      exec('wyc_akc','intrastat','A');
      _wyn:=IST.AKC='T'
   ?}
?};
_wyn


\ist_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wycofaj okna WER tabli IST, wycofanie akceptacje deklaracji INTRASTAT
::  OLD: \ist_wyc_akc/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? IST.AKC = 'N'
||
   FUN.info('Deklaracja nie jest jeszcze zaakceptowana.'@)
||
   {? FUN.ask('Czy wycofać akceptację deklaracji?'@)
   ||
      exec('wyc_akc','intrastat','W');
      _wyn:=IST.AKC='N'
   ?}
?};
_wyn


\wyc_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: akceptuje lub wycofuje akceptacje deklaracji INTRASTAT
::   WE: _a = 'A' - akceptacja, 'W' - wycofanie akceptacji
::  OLD: \wyc_akc/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_case:=_a;
_refIst:=IST.ref();
IST.cntx_psh();
IST.index('AKC');

{? _case='A'
||
   IST.prefix('N',IST.TYP,IST.ROK,IST.MIESIAC,IST.NUMER);
   {? IST.first()
   || _cont:=1;
      {! |? _refIstC:=IST.ref();
            {? _refIstC <> _refIst & IST.AKC = 'N'
            ||
               FUN.info('Zaakceptuj wcześniejszą deklarację.\nFunkcja niedostępna.'@);
               _cont:=0
            |? _refIstC = _refIst
            ||
               {? _cont:=exec('valAkc','intrastat')
               ||
                  IST.AKC:='T';
                  IST.prefix();
                  IST.put();
                  _cont:=0
               ?}
            ?};
            _cont & IST.next()
      !}
   ?}
|? _case = 'W'
||
   IST.prefix('N',IST.TYP,IST.ROK,IST.MIESIAC,IST.NUMER);
   {? IST.last()
   || FUN.info('Istnieje kolejna niezaakceptowana wersja deklaracji.\nFunkcja niedostęna.'@)
   || IST.prefix('T',IST.TYP,IST.ROK,IST.MIESIAC,IST.NUMER);
      {? IST.last()
      ||
         _cont:=1;
         {! |? _refIstC:=IST.ref();
               {? _refIstC <> _refIst & IST.AKC = 'T'
               ||
                  FUN.info('Wycofaj akceptację późniejszej deklaracji.\nFunkcja niedostępna.'@);
                  _cont:=0
               |? _refIstC = _refIst
               ||
                  IST.AKC:='N';
                  IST.prefix();
                  IST.put();
                  _cont:=0
               ?};
               _cont & IST.prev()
         !}
      ?}
   ?}
|| _msg:=
   {? _case = 'N'
   ||
      'Akceptacja deklaracji nie powiodła się.'@
   ||
      'Wycofanie akceptacji deklaracji nie powiodło się.'@
   ?};
   FUN.info(_msg)
?};
IST.cntx_pop();
IST.get()


\valAkc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: walidacja podczas akceptacji zgloszenia
::   WY: 1 - zgloszenie poprawnie wypelnione, 0 - wpp
::  OLD: \valAkc/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
:: deklaracja
_rr:=exec('valid','intrastat','IST',IST.ISTDEF,'Deklaracja')='';

:: zobowiazany
{? _rr
||
   ISTZ.cntx_psh();
   ISTZ.index('IST');
   ISTZ.prefix(IST.ref(),'Z');
   {? ISTZ.first()
   ||
      _rr:=exec('valid','intrastat','ISTZ',IST.ISTDEF,'PodmiotZobowiazany')=''
:: wymagalnosc elementu PodmiotZobowiazany
   ||
      FUN.info('Brak danych o PodmiotZobowiazany.'@);
      _rr:=0
   ?};
   ISTZ.cntx_pop()
?};

:: zglaszajacy
{? _rr
||
   ISTZ.cntx_psh();
   ISTZ.index('IST');
   ISTZ.prefix(IST.ref(),'N');
   {? ISTZ.first()
   ||
      _rr:=exec('valid','intrastat','ISTZ',IST.ISTDEF,'Zglaszajacy')=''
   ?};
   ISTZ.cntx_pop()
?};

:: towar
{? _rr
||
   ISTT.cntx_psh();
   ISTT.index('TYP');
   ISTT.prefix(IST.ref(),0);
   {? ISTT.first()
   ||
      _ilPoz:=0;
      {! |? _ilPoz+=1;
            _maxIl:=9999;
            {? _ilPoz>_maxIl
            ||
               FUN.info('Przekroczona liczność elementu Towar.\nDopuszcalna liczność: %1.'@[$_maxIl])
            ||
               {? ISTT.A<>'T' & ISTT.S<>'A'
               || _rr:=exec('valid','intrastat','ISTT',IST.ISTDEF,'Towar','\nPozycja: '@+$ISTT.POZID);
                  _rr:=_rr=''
               ?}
            ?};
            _rr=1 & ISTT.next()
      !}
   ?};
:: naliczenie wartości pol IST.LWF, IST.LWS, IST.LLP
   {? _rr || exec('sumWf','intrastat')  ?};
   ISTT.cntx_pop()
?};

:: wprowadzajacy
{? _rr
||
   ISTW.cntx_psh();
   ISTW.index('IST');
   ISTW.prefix(IST.ref());
   {? ISTW.first()
   ||
      _rr:=exec('valid','intrastat','ISTW',IST.ISTDEF,'Wypelniajacy')=''
:: wymagalnosc elementu Wypelniajacy
   ||
      FUN.info('Brak danych o wypełniajacym.'@);
      _rr:=0
   ?};
   ISTW.cntx_pop()
?};

_rr


\sumWf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: wylicza wartosci pol IST.LWF, IST.LWS, IST.LLP
::  OLD: \sumWf/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.RODZAJ='P'
|| IST.LWF:=IST.LWS:=IST.LLP:=0
|| ISTT.index('TYP');
ISTT.prefix(IST.ref(),0);
IST.LLP:=0;
{? ISTT.first()
|| _wF:=_wFS:=0;
   {! |? _wF+=ISTT.WF$2;
         _wFS+=ISTT.WS$2;
         ISTT.next()
   !};
   IST.LWF:=_wF;
   IST.LWS:=_wFS;
   IST.LLP:={? IST.RODZAJ='P' || 0 || ISTT.POZID ?}
   ?}
?};
IST.put()


\ist_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Sprawdzenie poprawności wypełnienia danych deklaracji intrastat
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: IST
_wyn:=exec('valid','intrastat','IST',IST.ISTDEF,'Deklaracja');
:: ISTZ - podmiot zobowiazany
{? _wyn=''
|| ISTZ.IST:=IST.ref();
   ISTZ.PZ_LUB_Z:='Z';
   ISTZ.NAZWA:=INTRAST.PZ_NAZW;
   ISTZ.MIEJSCOW:=INTRAST.PZ_MIEJ;
   ISTZ.ULICANR:=INTRAST.PZ_ULIC;
   ISTZ.KODPOCZT:=INTRAST.PZ_KODP;
   ISTZ.NIP:=INTRAST.PZ_NIP;
   ISTZ.REGON:=INTRAST.PZ_REGO;
   _wyn:=exec('valid','intrastat','ISTZ',IST.ISTDEF,'PodmiotZobowiazany');
   {? _wyn<>'' || _wyn:='PZ_'+(4+_wyn) ?}
?};
:: ISTZ - zgłaszający
{? _wyn=''
|| ISTZ.IST:=IST.ref();
   ISTZ.PZ_LUB_Z:='N';
   ISTZ.NAZWA:=INTRAST.Z_NAZW;
   ISTZ.MIEJSCOW:=INTRAST.Z_MIEJ;
   ISTZ.ULICANR:=INTRAST.Z_ULIC;
   ISTZ.KODPOCZT:=INTRAST.Z_KODP;
   ISTZ.NIP:=INTRAST.Z_NIP;
   ISTZ.REGON:=INTRAST.Z_REGO;
   {? ISTZ.NAZWA<>'' | ISTZ.MIEJSCOW<>'' | ISTZ.ULICANR<>'' | ISTZ.KODPOCZT<>'' | ISTZ.NIP<>'' | ISTZ.REGON<>''
   || _wyn:=exec('valid','intrastat','ISTZ',IST.ISTDEF,'Zglaszajacy');
      {? _wyn<>'' || _wyn:='Z_'+(4+_wyn) ?}
   ?}
?};
:: ISTW
{? _wyn=''
|| _wyn:=exec('valid','intrastat','ISTW',IST.ISTDEF,'Wypelniajacy')
?};
_wyn


\ist_edit_finisher
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kod wykańczający po IST.edit() w różnych kontekstach
::   WE: _a - IST.ref()
::       params_get()   - ustawiane w exec('popraw','intrastat')
::   WY: '' lub akronim niewłaściwie wypełnionego pola
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('ist_check','intrastat');
{? _wyn=''
|| exec('ist_update','intrastat')
?};
_wyn


\ist_towary_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Deklaracja intrastat - Towary - okno redagowania
::   WE: params_get()   - ustawiane w exec('popraw','intrastat')
::   WY: 'key:F2' - jeśli pola nagłówka prawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_btnRuleResult:='';

_fld:=params_exec('ist_edit_finisher','intrastat',IST.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| exec('towary','intrastat')
?};

_btnRuleResult


\ist_zakoncz_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Deklaracja intrastat - Zakończ - okno redagowania
::   WE: params_get()   - ustawiane w exec('popraw','intrastat')
::   WY: 'key:F2' - jeśli pola nagłówka prawidłowo wypełnione
::       'edit:ACRONYM' - akronim niewłaściwie wypełnionego pola nagłówka
::       '' - wartość domyślna jeśli main nie zmieni na powyższe
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().context.mp;

_btnRuleResult:='';

_fld:=params_exec('ist_edit_finisher','intrastat',IST.ref());
{? _fld<>''
|| _btnRuleResult:='edit:'+_fld
|| {? exec('zakoncz','intrastat')
   || _btnRuleResult:='key:F2';
      _mp.done()
   ?}
?};

_btnRuleResult


\towary
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Deklaracja intrastat - Towary
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ISTT.cntx_psh();
ISTT.index('TYP');
ISTT.prefix(IST.ref(),0);

exec('ist_t_set','intrastat');
ISTT.win_sel(ist_t_w);
ISTT.select();

ISTT.cntx_pop()


\ist_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Aktualizacja danych deklaracji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ISTZ.cntx_psh();
ISTZ.index('IST');

ISTZ.prefix(IST.ref(),'Z');
_put:=ISTZ.first();
ISTZ.IST:=IST.ref();
ISTZ.PZ_LUB_Z:='Z';
ISTZ.NAZWA:=INTRAST.PZ_NAZW;
ISTZ.MIEJSCOW:=INTRAST.PZ_MIEJ;
ISTZ.ULICANR:=INTRAST.PZ_ULIC;
ISTZ.KODPOCZT:=INTRAST.PZ_KODP;
ISTZ.NIP:=INTRAST.PZ_NIP;
ISTZ.REGON:=INTRAST.PZ_REGO;
{? _put || ISTZ.put() || ISTZ.add() ?};

ISTZ.prefix(IST.ref(),'N');
_put:=ISTZ.first();
ISTZ.IST:=IST.ref();
ISTZ.PZ_LUB_Z:='N';
ISTZ.NAZWA:=INTRAST.Z_NAZW;
ISTZ.MIEJSCOW:=INTRAST.Z_MIEJ;
ISTZ.ULICANR:=INTRAST.Z_ULIC;
ISTZ.KODPOCZT:=INTRAST.Z_KODP;
ISTZ.NIP:=INTRAST.Z_NIP;
ISTZ.REGON:=INTRAST.Z_REGO;
{? _put
|| {? ISTZ.NAZWA<>'' | ISTZ.MIEJSCOW<>'' | ISTZ.ULICANR<>'' | ISTZ.KODPOCZT<>'' | ISTZ.NIP<>'' | ISTZ.REGON<>''
   || ISTZ.put()
   || ISTZ.del()
   ?}
|? ISTZ.NAZWA<>'' | ISTZ.MIEJSCOW<>'' | ISTZ.ULICANR<>'' | ISTZ.KODPOCZT<>'' | ISTZ.NIP<>'' | ISTZ.REGON<>''
|| ISTZ.add()
?};

ISTZ.cntx_pop();

ISTW.index('IST');
ISTW.prefix(IST.ref());
ISTW.IST:=IST.ref();
{? exec('FindInSet','#table','ISTW','IST',IST.ref()) || ISTW.put() || ISTW.add() ?};

IST.put()


\ist_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wyswietl okna WER tabeli IST
::   WY: ~~
::  OLD: \ist_wys/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ist_fill','intrastat');
IST.win_edit('RED');
IST.display();
~~


\ist_zalacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed zalacznik okna WER tabeli IST, wyswietla zalacznik deklaracji INTRASTAT
::   WY: ~~
::  OLD: \ist_zalacz/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.Z = null
|| FUN.info('Brak załącznika.'@)
|| exec('bl_view','#blob',IST,'Z')
?};
~~


\ist_zalacz_zap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed zalacznik okna WER tabeli IST, wyswietla zalacznik deklaracji INTRASTAT
::   WY: ~~
::  OLD: \ist_zalacz_zap/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? IST.Z = null
|| FUN.info('Brak załącznika.'@)
|| _name:=IST.bl_info('Z', 'NAME');
   exec('bl_save','#blob',IST,'Z')
?};
~~


\ist_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: drukuj po okna WER tabeli IST
::  OLD: \cJIstWer/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','','wsp_istw','Intrastat',2,,,,,,'W')


\daneIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przygotowanie danych do wydruku deklaracji INTRASTAT
::   WE: _a - numer biezacej strony wydruku
::   WY: 1 - jest kolejna pozycja deklaracji, 0 - wpp
::  OLD: \daneIst/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0 || {? type_of(_a)<>type_of(0) || _a:=-1 ?} || _a:=-1 ?};

{? _a=-1
||
   FUN.info('Błąd przekazywanych parametrów do funkcji %1.'@['nalicz_f'])
||
   _page:=_a;
   ISTDEF.cntx_psh();
   ISTDEFS.cntx_psh();
   IST.ISTDEF();

:: sekcja header
   _progp:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'P');
   _progw:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'W');
   _ist_typ:=IST.TYP;
   {? _page=1
   || iH[1]:=obj_new(2);
      _miesiac:=form(IST.MIESIAC,-2);
      iH[1][1]:=1+_miesiac;
      iH[1][2]:=_miesiac+1;
      iH[2]:=obj_new(2);
      iH[2][1]:=1+($IST.ROK+2);iH[2][2]:=($IST.ROK+2)+1;
      iH[3]:=obj_new(3);
      {! _i:=1..3 |!
         _dl:=+$IST.NUMER;
         {? _i<=_dl
         || iH[3][_i]:=(_i+$IST.NUMER)+1
         || iH[3][_i]:=''
         ?}
      !};
      iH[4]:=obj_new(3);
      {! _i:=1..3 |!
         _dl:=+$IST.WERSJA;
         {? _i<=_dl
         || iH[4][_i]:=(_i+$IST.WERSJA)+1
         || iH[4][_i]:=''
         ?}
      !};
      iH[5]:={? IST.RODZAJ='D' || 'X' || '' ?};
      iH[6]:={? IST.RODZAJ='K' || 'X' || '' ?};
      iH[7]:={? IST.RODZAJ='P' || 'X' || '' ?};
      iH[8]:=obj_new(6);
      {! _i:=1..6 |! iH[8][_i]:=(_i+IST.UC)+1 !};
      ISTZ.index('IST');
      ISTZ.prefix(IST.ref(),'Z');
      {? ISTZ.first()
      || STR.split(ISTZ.NAZWA);
         _odst:={? +ISTZ.NAZWA < 60 || 0 || 1 ?};
         iH[9]:={? _odst>0 || STR.line(33) || '' ?};
         {? _odst>=0 || iH[10]:=STR.line(33) ?};
         iH[11]:={? _odst>0 || STR.line(33) || '' ?};
         {? _odst>=0 || iH[12]:=STR.line(33) ?};
         iH[13]:={? _odst>0 || STR.line(33) || '' ?};
         iH[14]:=ISTZ.ULICANR;
         iH[15]:=ISTZ.KODPOCZT+' '+ISTZ.MIEJSCOW;
         iH[16]:=obj_new(12);iH[16][1]:='P';iH[16][2]:='L';
         _dl:=+$ISTZ.NIP;
         {! _i:=3..12 |!
            iH[16][_i]:={? _i-2<=_dl || ((_i-2)+ISTZ.NIP)+1 || '' ?}
         !};
         iH[17]:=obj_new(14);
         _dl:=+$ISTZ.REGON;
         {! _i:=1..14 |!
            iH[17][_i]:={? _i<=_dl || (_i+ISTZ.REGON)+1 || '' ?}
         !}
      || iH[9]:=iH[10]:=iH[11]:=iH[12]:=iH[13]:=iH[14]:=iH[15]:='';
         iH[16]:=obj_new(12);{! _i:=1..12 |! iH[16][_i]:=''!};
         iH[17]:=obj_new(14);{! _i:=1..14 |! iH[17][_i]:=''!}
      ?};
      ISTZ.prefix(IST.ref(),'N');
      {? ISTZ.first()
      || STR.split(ISTZ.NAZWA);
         _odst:={? +ISTZ.NAZWA < 60 || 0 || 1 ?};
         iH[18]:={? _odst>0 || STR.line(33) || '' ?};
         {? _odst>=0 || iH[19]:=STR.line(33) ?};
         iH[20]:={? _odst>0 || STR.line(33) || '' ?};
         {? _odst>=0 || iH[21]:=STR.line(33) ?};
         iH[22]:={? _odst>0 || STR.line(33) || '' ?};
         iH[23]:=ISTZ.ULICANR;
         iH[24]:=ISTZ.KODPOCZT+' '+ISTZ.MIEJSCOW;
         iH[25]:=obj_new(12);iH[25][1]:='P';iH[25][2]:='L';
         _dl:=+$ISTZ.NIP;
         {! _i:=3..12 |!
            iH[25][_i]:={? _i-2<=_dl || ((_i-2)+ISTZ.NIP)+1 || '' ?}
         !};
         iH[26]:=obj_new(14);
         _dl:=+$ISTZ.REGON;
         {! _i:=1..14 |!
            iH[26][_i]:={? _i<=_dl || (_i+ISTZ.REGON)+1 || '' ?}
         !}
      || iH[18]:=iH[19]:=iH[20]:=iH[21]:=iH[22]:=iH[23]:=iH[24]:='';
         iH[25]:=obj_new(12);{! _i:=1..12 |! iH[25][_i]:=''!};
         iH[26]:=obj_new(14);{! _i:=1..14 |! iH[26][_i]:=''!}
      ?};
      iH[27]:={? IST.RODZAJ='P' || '' || IST.LWF ?};
      iH[28]:=
      {? IST.RODZAJ='P'
       | exec('skip_lws','intrastat')
      || ''
      || IST.LWS
      ?};
      iH[29]:={? IST.RODZAJ='P' || '' || IST.LLP ?};
      iH[30]:=IST.TYP
   || iH[5]:=iH[6]:=iH[7]:='';
      {! _i:=1..6 |! iH[8][_i]:='' !};
      iH[18]:=iH[19]:=iH[20]:=iH[21]:=iH[22]:=iH[23]:=iH[24]:='';
      {! _i:=1..12 |! iH[25][_i]:=''!};
      {! _i:=1..14 |! iH[26][_i]:=''!};
      iH[27]:=iH[28]:=iH[29]:=''
   ?};

:: sekcja body
   {? _page=1
   ||
      ISTT.index('TYP');
      ISTT.prefix(IST.ref(),0);
      _next:=ISTT.first()
   ||
      _next:=ISTT.next()
   ?};
   {! _i:=1..4
   |!
      {? _next
      ||
         ISTDEFS.index('OPIS');
         ISTDEFS.prefix();
         ISTDEFS.find_key(ISTDEF.ref(),'Towar');
         _atr:=exec('makeAtr','intrastat','ISTT');
         iB[_i][1]:=ISTT.POZID;
         STR.split({? _atr*'OpisTowaru' || ISTT.OPIST || ''?});
         _odst:={? +ISTT.OPIST < 120 || 0 || 1 ?};
         iB[_i][2]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][3]:=STR.line(23) ?};
         iB[_i][4]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][5]:=STR.line(23) ?};
         iB[_i][6]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][7]:=STR.line(23) ?};
         iB[_i][8]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][9]:=STR.line(23) ?};
         iB[_i][10]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][11]:=STR.line(23) ?};
         iB[_i][12]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][13]:=STR.line(23) ?};
         iB[_i][14]:={? _odst>0 || STR.line(23) || '' ?};
         {? _odst>=0 || iB[_i][15]:=STR.line(23) || '' ?};
         iB[_i][16]:={? _odst>0 || STR.line(23) || '' ?};
         iB[_i][17]:={? _atr*'KrajPrzeznaczeniaWysylki' || ISTT.KPW || '' ?};
         iB[_i][18]:={? _atr*'WarunkiDostawy' || ISTT.WD || '' ?};
         iB[_i][19]:={? _atr*'RodzajTransakcji' || ISTT.RTRANSAK || '' ?};
         iB[_i][20]:=ISTT.KODT;
         iB[_i][21]:={? _atr*'RodzajTransportu' || ISTT.RTRANSPO || '' ?};
         iB[_i][22]:={? _atr*'KrajPochodzenia' || ISTT.KP || '' ?};
         iB[_i][23]:={? _atr*'MasaNetto' || ISTT.MASAN || '' ?};
         iB[_i][24]:={? _atr*'IloscUzupelniajacaJm' || ISTT.ILUJM || '' ?};
         iB[_i][25]:={? _atr*'WartoscFaktury' || ISTT.WF || '' ?};
         iB[_i][26]:={? _atr*'WartoscStatystyczna' || ISTT.WS || '' ?};
         _next:=ISTT.next()
      || {! _j:=1..26 |! iB[_i][_j]:='' !}
      ?}
   !};

:: sekcja footer
   {? _page=1
   || ISTW.index('IST');
      ISTW.prefix(IST.ref());
      {? ISTW.first()
      || STR.split(ISTW.NAZIM);
         _imNaz:='';
         {!|? STR.next()
         |! _imNaz:=STR.get_word()+' '+_imNaz
         !};
         iFo[1]:=_imNaz;
         iFo[2]:=ISTW.TELEFON;
         iFo[3]:=ISTW.FAKS;
         iFo[4]:=ISTW.EMAIL
      || iFo[1]:=iFo[2]:=iFo[3]:=iFo[4]:=''
      ?};
      iFo[5]:=IST.MIEJSCOW;
      iFo[6]:=','+$IST.DATA
   || iFo[1]:=iFo[2]:=iFo[3]:=iFo[4]:=iFo[5]:=iFo[6]:=''
   ?};
   {? _next
   || _rr:=ISTT.prev()
   || _rr:=0
   ?};
   ISTDEFS.cntx_pop();
   ISTDEF.cntx_pop()
?};
_rr


\lastIst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdza czy wlasciwa deklaracja lub korekta jesli deklaracja była korygowana
::   WE: _a = P - przywóz, W - wywóz
::       params_get() ustawiane w   - main w !lmg_int_dain.fml
::                                  - main w '!lsp_int_dain.fml
::   WY: 1 - powodzenie, 0 - wpp
::  OLD: \lastIst/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:=0;

_mp:=params_get().mp;
_auto:=params_get().cntx.auto;

{? IST.TYP <> _a
||
   FUN.info('Zły typ deklaracji źródłowej.\nFunkcja niedostępna.'@)
||
   _refIst:=IST.ref();
   IST.cntx_psh();
   IST.index('NR_VER');
   IST.prefix(_a,IST.ROK,IST.MIESIAC,IST.NUMER);
   {? IST.first()
   ||
      _rr:=1;
      {! |? {? IST.AKC = 'N'
            ||
               _text:='Nie zakończono rejestracji deklaracji: '@
                  +IST.TYP+' '+$IST.ROK+' '+$IST.MIESIAC+' '+$IST.NUMER+' '+$IST.WERSJA
                  +'\nFunkcja niedostępna.'@;
               {? _auto
               || _mp.error(_text)
               || FUN.info(_text)
               ?};
               _rr:=0
            ?};
            _rr & IST.next()
      !}
   ?};
   {? _rr & IST.last()
   ||
      {? IST.RODZAJ='P'
      || {! |? IST.RODZAJ = 'P' & IST.prev() !}
      ?};
      _rr:=_refIst = IST.ref();
      {? ~_rr
      ||
         FUN.info('Wybierz pierwotną deklarację lub ostatnią korektę (typu wymiana).\nFunkcja niedostępna.'@)
      ?}
   ?};
   IST.cntx_pop()
?};

_rr


\dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Akcja Dolacz po (pust dziedzina) okienka wertowania WET tabeli IST
::   WE: _a - P-przywóz, W-wywóz
::   WE: _b - 0-wołane z todo, 1-wołane z obszaru
::  OLD: \cDDIstWe/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
INTRAST.fld_fml('PZ_ULIC','PATTERN',"(35*'x')+'%'");
INTRAST.fld_fml('Z_ULIC','PATTERN',"(35*'x')+'%'");
ISTDEF.win_sel('WER');
_default:=ISTDEF.actions('WER','SRdup','W');
ISTDEF.win_edit('RED');
ISTDEF.index('VER');
:: obsluga tylko definicji INTRASTAT
ISTDEF.prefix('','I');
{? ~ISTDEF.first()
||
   FUN.info('Brak definicji Intrastat.'@)
||
   {? ISTDEF.select()
   ||
      IST.blank(1);
      IST.ISTDEF:=ISTDEF.ref();
      IST.TYP:=_a;
      IST.AKC:='N';
      IST.GEN:='N';
      IST.NRWLASNY:=tm_stamp();
      {? IST.add()
      || IST.NRWLASNY:='';

         {? IST.f_active() || {? IST.f_test() || IST.f_add() ?} ?};

         exec('ist_fill','intrastat');

         params_set('context',params_get());

         exec('ist_win_edit_set','intrastat',_b);
         IST.win_edit(ist_r);

         {!
         |?
            {? IST.edit("exec('ist_check','intrastat')")
            || ~exec('ist_update','intrastat')
            || exec('clear','intrastat');
               0
            ?}
         !}
      ?}
   ?}
?};
ISTDEF.actions('WER',,_default)


\ist_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ustawia okno dla tabeli IST
::   WE: _a - 0-wołane z todo, 1-wołane z obszaru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
IST.fld_fml('TYP','BEFORE_EDIT',"0");
IST.fld_fml('RODZAJ','BEFORE_EDIT',"exec('FindInSet','#table','ISTT','TYP',IST.ref())=null()");
_win_akr:='RED';
ist_r:=IST.mk_edit('Deklaracja'@,,'istististist',,,'html_maximized');
IST.win_ewin(ist_r,,_win_akr);

{? _a=0
|| _ff:="params_exec('ist_towary_red','intrastat')";
   IST.win_ebtn(ist_r,'text='+'Towary'@+',btn_label_align=center,panel=bottom,align=begin',_ff)
?};
_ff:="params_exec('ist_zakoncz_red','intrastat')";
IST.win_ebtn(ist_r,'text='+'&Zakończ'@+',btn_label_align=center,panel=bottom,align=end',_ff);
exec('ok_esc','#window',IST,ist_r,1)


\xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: akcja XML okienka wertowania WER tabeli IST,
::       eksportowanie deklaracji INTRASTAT do pliku w formacie XML
::   WE: _a - 0-z komunikatami, 1-bez komunikatów
::  OLD: \cXIstWer/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_out:=params_get().out;

_wyn:=obj_new('wyn');
_wyn.wyn:=0;

_ok:=1;
{? IST.AKC='N'
||
   FUN.info('Operacja zabroniona.\nZakończ deklarację.'@); _ok:=0
|? IST.ISTDEF().EMAIL=''
|| FUN.info('Należy wypełnić email w nagłówku definicji deklaracji Intrastat.'@); _ok:=0
|? IST.Z<>null
||
   {? _a | FUN.ask('Deklaracja w formie elektronicznej już istnieje.\nCzy utworzyć nową?'@)
   || IST.Z:=null; IST.put();
      _ok:=2
   || _ok:=0
   ?}
?};
{? _ok>0
||
   params_set('wyn',_wyn);
   _pth:='';
   _tmp_dir:=fmk_tmp_dir(0);
   {? type_of(_tmp_dir)<>type_of(~~)
   || _pth:=_tmp_dir.get_path()
   ?};
   _fileN:='ist_'+IST.TYP+'_'+$IST.ROK+'_'+$IST.MIESIAC+'_'+$IST.NUMER+'_'+$IST.WERSJA;
   _file:='';
   _sep:=exec('sep','#file',2);
   _file:=_pth+_sep+_fileN+'.xml';

   {? _file<>''
   ||
      OUT:=fopen(_file,'Uw!',0);
      {? ~OUT
      ||
         {? _a=0
         || FUN.info('\nUtworzenie pliku:\n%1\nnie powiodło się.\nBrak takiego pliku lub katalogu.'@[_file])
         || _mp.error('Utworzenie pliku:\n%1\nnie powiodło się.\nBrak takiego pliku lub katalogu.'@[_file])
         ?}
      ||
         {? IST.ISTDEF=null()
         ||
            FUN.info('\nDeklaracja nie jest powiązana z wersją definicji.\nUtworzenie pliku niemożliwe.'@)
         ||
            IST.ISTDEF();
            ISTDEFS.index('LP');
            ISTDEFS.prefix(ISTDEF.ref());
            {? ISTDEFS.first()
            ||
               {! |?
                   ($ISTDEFS.FORM_XML)();
                   ISTDEFS.next()
               !}
            ?}
         ?};
         fclose(OUT);
         {? IST.bl_put('Z',_file,0)
         || _out.FILE:=_file;
            {? _mp.save(,_out) || {? _a || _wyn.wyn:=1 ?} ?}
         ?};

         {? _a=0
         ||
::          Zapis pliku na terminal lokalny
            _dlg_res:=dlg_save(_file,0,_fileN+'.xml');
            {? type_of(_dlg_res)=type_of('')
            || {? _dlg_res<>''
               || _wyn.wyn:=1;
                  FUN.info('Zakończono eksport do pliku: %1'@[_dlg_res])
               ?}
            || FUN.emsg('Eskport do pliku: %1 zakończony niepowodzeniem.'@[_file])
            ?}
         ?}
      ?};
      &OUT
   ?};
   undefine()
?};
_wyn.wyn


\makeAtr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Tworzy atrybuty elementu XML w oparciu o definicje elementu.
::       Zaklada sie, ze w buforze jest wlasciwy element (ISTDEFS).
::   WE: _a - (STRING) nazwa tabeli z danymi
::       _b = 1 - wlaczenie pola LacznaWartoscStatystyczna do warunku na pominiecie
::          = 0 - wpp
::   WY: _rr - (STRING) atrybuty elemntu
::  OLD: \makeAtr/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_rr:='';
_sep:=' ';
_quot:='\"';
ISTDEFI.index('LP');
ISTDEFI.prefix(ISTDEFS.ref());
{? ISTDEFI.first()
||
   _dekl:='';
   {! |?
      _atr:=ISTDEFI.NAZ+'='+_quot;
      on_error(2);
      _val:=($(_a+'.'+ISTDEFI.NAZFLD))();
      {? ~in_error() & ISTDEFI.WYM<>''
      ||
         _typ:=type_of(_val);
::       ciag znakow
         {? _typ=2
         ||
::          regula G3
            _cont:=1;
            {? (ISTDEFI.REGULY+',')*'G3,' & _val='' || _cont:=0 ?};
::          regula R1
            {? _cont & (ISTDEFI.REGULY+',')*'R1,'
            ||
               {? 2+_val<>$IST.ROK+2
                | 3+(2-_val)<>'IST'
                | +(5-_val)<2
               ||
                  FUN.info(ISTDEFI.NAZ+' niepoprawny.'@);
                  _cont:=0
               ?}
            ?};
::          regula RW3
            {? _cont & (ISTDEFI.REGULY+',')*'RW3,'
            || _cont:=IST.TYP<>'W' | exec('czy_kp','intrastat',IST.TYP,,date(IST.ROK,IST.MIESIAC,1))
            ?};
::          regula MCL01
            {? _cont & (ISTDEFI.REGULY+',')*'MCL01,'
            || _cont:=exec('czy_idkh','intrastat',IST.ROK,IST.MIESIAC)
            ?};
::          anulowanie pozycji
            {? _cont
             & (  (ISTDEFI.REGULY+',')*'RW3,'
               |  (ISTDEFI.REGULY+',')*'RW9,'
               |  (ISTDEFI.REGULY+',')*'RW10,'
               |  (ISTDEFI.REGULY+',')*'RW12,'
               |  (ISTDEFI.REGULY+',')*'RW13,'
               |  (ISTDEFI.REGULY+',')*'RW14,'
               |  (ISTDEFI.REGULY+',')*'RW15,'
               )
            || _cont:=~(ISTT.S='A')
            ?};
::          dane zalezne od przekroczenia progu statystycznego
            {? _cont & ~exec('skipFld','intrastat',ISTDEFI.NAZ,1) || _cont:=0 ?};
            {? _cont
            ||
               _rr+=_atr;
               _val:=_val;
               _val:=STR.gsub(_val,'&','&amp;');
               _val:=STR.gsub(_val,'<','&lt;');
               _val:=STR.gsub(_val,'>','&gt;');
               _val:=STR.gsub(_val,'''','&apos;');
               _val:=STR.gsub(_val,'\"','&quot;');
               _rr+=_val;
               _rr+=_quot+_sep
            ?}
::       liczba
         |? _typ=1
         ||
::          dane zależne od przekroczenia progu statystycznego
            _cont:=1;
            {? ~exec('skipFld','intrastat',ISTDEFI.NAZ,_b) || _cont:=0 ?};
::          regula RW1
            {? _cont & (ISTDEFI.REGULY+',')*'RW1,'
            ||
               {? IST.RODZAJ='P' || _cont:=0 ?}
            ?};
::          regula RW5
            {? _cont & (ISTDEFI.REGULY+',')*'RW5,' || _cont:=ISTT.JU<>'' ?};
::          regula RW7
            {? _cont & (ISTDEFI.REGULY+',')*'RW7,' || _cont:=IST.RODZAJ<>'P' ?};
::          regula RW61
            {? _cont & (ISTDEFI.REGULY+',')*'RW61,'
               & (IST.ROK<2011 | IST.ROK=2011 & IST.MIESIAC<2)
            || _cont:=~exec('find_sl','intrastat','063',ISTT.KODT)
            ?};
::          korekta
            {? _cont
             & (  (ISTDEFI.REGULY+',')*'RW1,'
               |  (ISTDEFI.REGULY+',')*'RW7,'
               |  (ISTDEFI.REGULY+',')*'RW11,'
               )
            || _cont:=~(IST.RODZAJ='P')
            ?};
::          anulowanie pozycji
            {? _cont
             & (  (ISTDEFI.REGULY+',')*'RW5,'
               |  (ISTDEFI.REGULY+',')*'RW16,'
               |  (ISTDEFI.REGULY+',')*'RW60,'
               |  (ISTDEFI.REGULY+',')*'RW61,'
               |  (ISTDEFI.REGULY+',')*'RW80,'
               |  (ISTDEFI.REGULY+',')*'RW81,'
               )
            || _cont:=~(ISTT.S='A')
            ?};
::
            {? _cont
            ||
               _rr+=_atr;
::             regula R17
               {? (ISTDEFI.REGULY+',')*'R17,'
               ||
                  _rr+=form(_val,-2,,'0.')
               ||
                  _rr+=form(_val,,,'0.')
               ?};
               _rr+=_quot+_sep
            ?}
::       data
         |? _typ=4
         ||
            _rr+=_atr;
            _val:=_val$0;
            _rr+=(4+_val)+'-'+(2+(4-_val))+'-'+(_val+2);
            _rr+=_quot+_sep
         ?}
      ?};
      on_error();
      ISTDEFI.next()
   !}
?};

_rr


\deklXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - element Deklaracja.
::       Zaklada sie, ze w buforze jest wlasciwy naglowek INTRASTAT (IST)
::       i naglowek definicji (ISTDEF) i element definicji (ISTDEFS).
::  OLD: \deklXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:=' ';
_xmlns:=($ISTDEF.XMLNS)();
_email:=ISTDEF.EMAIL;
{? _email<>'' || _email:=' Email=\"'+_email+'\"' ?};
fwrite(OUT,'<?xml version=\"1.0\" encoding=\"utf-8\"?>');
fwrite(OUT,'<ist:IST '+_xmlns+_email+'>');
_skip_lws:=exec('skip_lws','intrastat');
_atr:=exec('makeAtr','intrastat','IST',_skip_lws);
_xmlns:=exec('deklXmlns','intrastat');
fwrite(OUT,'<'+ISTDEFS.OPIS+_sep+_atr+_xmlns+'>')


\pZXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - element Podmiot zobowiazany.
::       Zaklada sie, ze w buforze jest wlasciwy naglowek INTRASTAT (IST)
::       i element definicji (ISTDEFS).
::  OLD: \pZXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:=' ';
ISTZ.index('IST');
ISTZ.prefix(IST.ref(),'Z');
{? ISTZ.first()
|| _atr:=exec('makeAtr','intrastat','ISTZ');
   fwrite(OUT,'<'+ISTDEFS.OPIS+_sep+_atr+'/>')
?}


\zglXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - element Zglaszajacy.
::       Zaklada sie, ze w buforze jest wlasciwy naglowek INTRASTAT (IST)
::       i element definicji (ISTDEFS).
::  OLD: \zglXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:=' ';
ISTZ.index('IST');
ISTZ.prefix(IST.ref(),'N');
{? ISTZ.first()
|| _atr:=exec('makeAtr','intrastat','ISTZ');
   fwrite(OUT,'<'+ISTDEFS.OPIS+_sep+_atr+'/>')
?}


\towXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - element Toawr,
::       zaklada sie, ze w buforze jest własciwy naglowek INTRASTAT (IST)
::       i element definicji (ISTDEFS)
::  OLD: \towXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:=' ';
ISTT.index('TYP');
ISTT.prefix(IST.ref(),0);

{? ISTT.first()
|| {! |? _atr:=exec('makeAtr','intrastat','ISTT');
         fwrite(OUT,'<'+ISTDEFS.OPIS+_sep+_atr+'/>');
         ISTT.next()
   !}
?}


\wypXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - element Wypelniający.
::       Zaklada sie, ze w buforze jest wlasciwy naglowek INTRASTAT (IST)
::       i element definicji (ISTDEFS).
::  OLD: \wypXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
_sep:=' ';
ISTW.index('IST');
ISTW.prefix(IST.ref());
{? ISTW.first()
|| _atr:=exec('makeAtr','intrastat','ISTW');
   fwrite(OUT,'<'+ISTDEFS.OPIS+_sep+_atr+'/>')
?}


\eDeklXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: INTRASTAT w formie XML - tag zamykajacy element Deklaracja
::  OLD: \eDeklXml/istv01.fml
::----------------------------------------------------------------------------------------------------------------------
fwrite(OUT,'<'+ISTDEFS.OPIS+'>');
fwrite(OUT,'</ist:IST>')


\ist_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wypełnia pola okna redakcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
INTRAST.PZ_NAZW:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.NAZWA",,,'');
INTRAST.PZ_ULIC:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.ULICANR",,,'');
INTRAST.PZ_MIEJ:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.MIEJSCOW",,,'');
INTRAST.PZ_KODP:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.KODPOCZT",,,'');
INTRAST.PZ_NIP:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.NIP",,,'');
INTRAST.PZ_REGO:=exec('FindInSet','#table','ISTZ','IST','Z',IST.ref(),"ISTZ.REGON",,,'');

INTRAST.Z_NAZW:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.NAZWA",,,'');
INTRAST.Z_ULIC:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.ULICANR",,,'');
INTRAST.Z_MIEJ:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.MIEJSCOW",,,'');
INTRAST.Z_KODP:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.KODPOCZT",,,'');
INTRAST.Z_NIP:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.NIP",,,'');
INTRAST.Z_REGO:=exec('FindInSet','#table','ISTZ','IST','N',IST.ref(),"ISTZ.REGON",,,'');

ISTW.index('IST');
ISTW.prefix(IST.ref());
ISTW.first()


\ist_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Deklaracja INTRASTAT - Xml
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:={? IST.TYP='P' || 'LMG_INT_WXML' || 'LSP_INT_WXML' ?};
_params.UIDREF:=IST.uidref();
_params.AKCJA:='Xml';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'IST',IST.ref());

exec('mp_run','#b__box',_params)


\zgloszenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja intrastat przywóz - zgłoszenie INTRASTAT
::   WE: params_get() ustawiane w   - main w !lmg_int_dain.fml
::                                  - main w !lsp_int_dain.fml
::   WY:
::  OLD: \cAPNIstW/ist02.fml
::  OLD: \cAWNIstW/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(0) || _a:=0 ?};

_auto:=params_get().cntx.auto;

{? _auto | FUN.ask('Utworzyć nową deklarację?'@)
||
   VAR_DEL.delete('__INTRA');
   __INTRA:=obj_new('AUTO');
   __INTRA.AUTO:=_auto;
:: przywoz
   INTRAST.ISTTYP:=params_get().cntx.isttyp;
:: deklaracja (zgłoszenie nowej deklaracji)
   INTRAST.ISTRODZ:='D';
   exec('genIst','intrastat','I',_auto);
   INTRAST.ISTTYP:=INTRAST.ISTRODZ:='';
   VAR_DEL.delete('__INTRA')
?}


\zmiana
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja intrastat przywóz - zmiana zgłoszenia INTRASTAT
::   WE: params_get() ustawiane w   - main w !lmg_int_dain.fml
::                                  - main w !lsp_int_dain.fml
::   WY:
::  OLD: \cAPWIstW/ist02.fml
::  OLD: \cAWWIstW/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(0) || _a:=0 ?};

_auto:=params_get().cntx.auto;

{? _auto | FUN.ask('Utworzyć nową deklarację?'@)
||
   VAR_DEL.delete('__INTRA');
   __INTRA:=obj_new('AUTO');
   __INTRA.AUTO:=_auto;
:: przywoz
   INTRAST.ISTTYP:=params_get().cntx.isttyp;
:: korekta - wymiana deklaracji
   INTRAST.ISTRODZ:='K';
   {? params_exec('lastIst','intrastat',INTRAST.ISTTYP)
   ||
      _istdef:=null();
      ISTDEF.index('VER');
      ISTDEF.prefix('','I');
      {? ~ISTDEF.first()
      || FUN.info('Brak definicji Intrastat.'@)
      || {? ISTDEF.next()
         || ISTDEF.win_sel('WER');
            _default:=ISTDEF.actions('WER','dpuS','W');
            {? ISTDEF.select() || _istdef:=ISTDEF.ref() ?};
            ISTDEF.actions('WER',,_default)
         || _istdef:=ISTDEF.ref()
         ?}
      ?};
      do;
      {? _istdef & exec('setD','intrastat','N') || exec('genIst','intrastat','I',_auto,_istdef) ?};
      end
   ?};
   INTRAST.ISTTYP:=INTRAST.ISTRODZ:=''
?}


\korekta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: Deklaracja intrastat przywóz - korekta zgłoszenia INTRASTAT
::   WE: params_get() ustawiane w   - main w !lmg_int_dain.fml
::                                  - main w !lsp_int_dain.fml
::   WY:
::  OLD: \cAPKIstW/ist02.fml
::  OLD: \cAWKIstW/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<>type_of(0) || _a:=0 ?};

_auto:=params_get().cntx.auto;

{? _auto | FUN.ask('Utworzyć korektę pozycji?'@)
||
   VAR_DEL.delete('__INTRA');
   __INTRA:=obj_new('AUTO');
   __INTRA.AUTO:=_auto;
:: przywoz
   INTRAST.ISTTYP:=params_get().cntx.isttyp;
:: korekta - wymiana deklaracji
   INTRAST.ISTRODZ:='P';
   {? params_exec('lastIst','intrastat',INTRAST.ISTTYP)
   ||
::    korygowana deklaracja
      INTRAST.IST:=IST.ref();
      exec('genIst','intrastat','I',_auto)
   ?};
   INTRAST.ISTTYP:=INTRAST.ISTRODZ:=''
?}


\ist_param_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zmiana parametrów pracy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_ist_typ:=1+_env.IST_TYP;

{? __PARSES.editDom({? _ist_typ='W' || 'LSP' |? exec('get','#params',100200,2)='T' || 'LMG' || 'LZK' ?})
|| IST.index('IST');
   IST.prefix(1+_ist_typ);
   AreaTitle.setTitle()
?}


\intrast_zgl_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Zbiorcza formuła po redakcji dla pól zgłaszającego ze zmienej INTRAST.
::   WE: [_a] - okno wertowania tabeli IST, domyślnie - aktywne
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _red:=IST.win_edit(_a)
|| _red:=IST.win_edit('?')
?};

:: Jeżeli wszystkie pola są puste, to gasi gwiazdki wymagalności.
:: W przypadku, gdy jedno z pól jest wypełnione, to zapala gwiazdki wymagalności na pozostałych.
{? INTRAST.Z_NAZW<>''   | INTRAST.Z_ULIC<>'' | INTRAST.Z_KODP<>'' |
   INTRAST.Z_MIEJ<>''   | INTRAST.Z_NIP<>''  | INTRAST.Z_REGO<>''
|| _mark:='mark=1'
|| _mark:='mark=0'
?};
IST.efld_opt(_red,_mark,INTRAST,'Z_NAZW');
IST.efld_opt(_red,_mark,INTRAST,'Z_ULIC');
IST.efld_opt(_red,_mark,INTRAST,'Z_KODP');
IST.efld_opt(_red,_mark,INTRAST,'Z_MIEJ');
IST.efld_opt(_red,_mark,INTRAST,'Z_NIP');
IST.efld_opt(_red,_mark,INTRAST,'Z_REGO');

1


\deklXmlns
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Atrybut xmlns
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'xmlns="http://www.mf.gov.pl/xsd/Intrastat/IST.xsd"'


\rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła parametru - RODZAJ
::   WE:
::   WY: rodzaj deklaracji
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','intrastat','061','D')


\rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła parametru - ROK
::   WE:
::   WY: rok lub ~~ jeśl nie wybrano roku
::----------------------------------------------------------------------------------------------------------------------
_wyn:=~~;
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
OKR.last();
_wer:=OKR.mk_sel('Wybór roku'@,,0,,,,OKR.size());
OKR.win_fld(_wer,,'ROK',,,20,,,'Rok'@);
OKR.win_act(_wer,,'Formuła','&Wybierz'@@,,,"sel_exit()",,1,,,,'W');
OKR.win_sel(_wer);
{? OKR.select(,1,OKR.size()) || _wyn:=OKR.ROK ?};
OKR.cntx_pop();
_wyn


\miesiac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła parametru - OKRES
::   WE:
::   WY: miesiąc lub ~~ jeśl nie wybrano roku
::----------------------------------------------------------------------------------------------------------------------
_wyn:=~~;
_Tab:=tab_tmp(1
   ,'MC'    ,'INTEGER'     ,'Nr miesiąca'
   ,'NAZ'   ,'STRING[20]'  ,'Nazwa miesiąca');
{! _ii:=1..12 |! _Tab.MC:=_ii; _Tab.NAZ:=(date(,_ii)$8)-5; _Tab.add() !};
_Tab.find_key(date()~2);
_wer:=_Tab.mk_sel('Wybór miesiąca'@,,0,,,,12);
_Tab.win_fld(_wer,,'NAZ',,,,,,'Miesiąc'@);
_Tab.win_act(_wer,,'Formuła','&Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_Tab.win_sel(_wer);
{? _Tab.select(,1,12) || _wyn:=_Tab.MC ?};
_wyn


\oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła parametru - ODDZ
::   WE:
::   WY: ODDZ.KOD
::----------------------------------------------------------------------------------------------------------------------
_wyn:=~~;
ODDZ.cntx_psh();
ODDZ.index('KOD');
ODDZ.prefix();
ODDZ.win_sel('SEL');
{? ODDZ.select() || _wyn:=ODDZ.KOD ?};
ODDZ.cntx_pop();
_wyn


\czy_idkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Czy stosować id kontrahenta w roku _a i miesiącu _b deklaracji
::   WE: _a - INTEGER - rok
::       _b - INTEGER - miesiąc
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a;
_mc:=_b;
IST.TYP='W' & (_rok=2017 & _mc>5 | _rok>2017)


\istIST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [14.10]
:: OPIS: Zmienne sekcji ist:IST
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'xmlns:ist="http://www.mf.gov.pl/xsd/Intrastat/IST.xsd"'


\skip_lws
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.22]
:: OPIS: sprawdza czy pominąć łączną wartość statystyczną
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_progp:=_progw:='';
{? IST.ROK & IST.MIESIAC>0 & IST.MIESIAC<13
||
   _progp:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'P');
   _progw:=exec('prog','intrastat',date(IST.ROK,IST.MIESIAC,1),'W')
?};
_ist_typ:=IST.TYP;
_skip_lws:=exec('czy_prog_s','intrastat',_ist_typ,_progw,_progp)=0;
{? _skip_lws
||
   ISTT.index('TYP');
   ISTT.prefix(IST.ref(),0);
   _loop:=ISTT.first();
   {!
   |? _loop
   |!
      {? ISTT.RTRANSAK<>'' & exec('find_sl','intrastat','191',ISTT.RTRANSAK)
      ||
         _skip_lws:=0
      ?};
      _loop:=_skip_lws=1 & ISTT.next()
   !}
?};
_skip_lws


\check_poz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Parametry funkcji check_poz
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_atr:=obj_new('DISP','TABNAG','TABPOZ','KOR','HIS','POZ','MRODZ','IL',
   'IST_TYP','DATE',
   'KCN','KODT','KPW','WD','RTRANSAK','RTRANSPO','KP',
   'MASAN','JU','ILUJM','WF','WS',
   'FKOR_IL','FKOR_MASAN','FKOR_JU','FKOR_ILUJM','FKOR_WF','FKOR_WS');
_atr.DISP:=1;
_atr.TABNAG:=~~;
_atr.TABPOZ:=~~;
_atr.KOR:='';
_atr.HIS:='';
_atr.POZ:=0;
_atr.MRODZ:='';
_atr.IL:=0;

_atr.IST_TYP:='';
_atr.DATE:=date(0,0,0);

_atr.KCN:=null();
_atr.KODT:='';
_atr.KPW:='';
_atr.WD:='';
_atr.RTRANSAK:='';
_atr.RTRANSPO:='';
_atr.KP:='';
_atr.MASAN:=0;
_atr.JU:=null();
_atr.ILUJM:=0;
_atr.WF:=0;
_atr.WS:=0;
_atr.FKOR_IL:=0;
_atr.FKOR_MASAN:=0;
_atr.FKOR_ILUJM:=0;
_atr.FKOR_WF:=0;
_atr.FKOR_WS:=0;
_atr


\check_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: pozycja dokumentu - sprawdza poprawność wypełnienia pól dotyczących intrastat
::   WE: _a - exec('check_poz_a','intrastat')
::   WY: '' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_atr:=_a;

_wyn:='';

_disp:=_atr.DISP;
_TABNAG:=_atr.TABNAG;
_TABPOZ:=_atr.TABPOZ;

_akc:=
   {? _TABNAG=FAKS || FAKS.AKC
   |? _TABNAG=ND || ND.Z
   || 'T'
   ?};

{? _akc='N' & exec('get','#params',100202,2)<>'T' || return('') ?};

_kor:=_atr.KOR;
_his:=_atr.HIS;
_poz:=$_atr.POZ;
_mrodz:=_atr.MRODZ;
_il:=_atr.IL;

_ist_typ:=_atr.IST_TYP;
_date:=_atr.DATE;

_kcn:=_atr.KCN;
_kodt:=_atr.KODT;
_kpw:=_atr.KPW;
_wd:=_atr.WD;
_rtransak:=_atr.RTRANSAK;
_rtranspo:=_atr.RTRANSPO;
_kp:=_atr.KP;
_masan:=_atr.MASAN;
_fkor_il:=_atr.FKOR_IL;
_fkor_masan:=_atr.FKOR_MASAN;
_fkor_ilujm:=_atr.FKOR_ILUJM;
_fkor_wf:=_atr.FKOR_WF;
_fkor_ws:=_atr.FKOR_WS;
_ju:=_atr.JU;
_ilujm:=_atr.ILUJM;
_wf:=_atr.WF;
_ws:=_atr.WS;

{? _ist_typ<>'' & _date<>date(0,0,0) & _mrodz='T'
||
   _progp:=exec('prog','intrastat',_date,'P');
   _progw:=exec('prog','intrastat',_date,'W');
   _masan0:=_ilujm0:=_wf0:=_ws0:=0;
   {? _TABPOZ=FAP || exec('pops','intrastat') ?};
:: kod cn
   {? _kcn=null
   ||
      {? _disp
      || FUN.emsg('Niewypełnione pole Kod CN.'@)
      || exec('add_kom','#message','Pozycja %1, niewypełnione pole Kod CN.'@[_poz],2)
      ?};
      _wyn:='KCN'
   ?};
:: kraj przeznaczenia/wysyłki
   {? _wyn=''
   ||
      _mustbe:={? _TABPOZ=DK || exec('nd_kpw_pr','magdok_nag') || exec('faks_kpw_pr','faktury_nag') ?};
      {? _mustbe & _kpw=''
      ||
         {? _disp
         ||
            {? _TABNAG.KPW=''
            || FUN.emsg('Pole Kraj przeznaczenia/wysyłki powinno być wypełnione (nagłówek lub pozycja dokumentu).'@)
            || _TABPOZ.KPW:=_TABNAG.KPW
            ?}
         ||
            exec('add_kom','#message','Pozycja %1, niewypełnione pole Kraj przeznaczenia/wysyłki.'@[_poz],2);
            _wyn:='KPW'
         ?}

      |? ~_mustbe & _kpw<>''
      ||
         {? _disp
         ||
            _TABPOZ.KPW:=''
         ||
            exec('add_kom','#message','Pozycja %1, pole Kraj przeznaczenia/wysyłki nie może być wypełnione.'@[_poz],2);
            _wyn:='KPW'
         ?}
      ?}
   ?};
:: warunki dostawy
   {? _wyn=''
   ||
      _mustbe:={? _TABPOZ=DK || exec('nd_wd_pr','magdok_nag') || exec('faks_wd_pr','faktury_nag') ?};
      {? _mustbe || _mustbe:=_kodt<>'' & exec('rw3','intrastat',_kodt)=1 ?};
      {? _mustbe & _wd=''
      ||
         {? _disp
         ||
            {? _TABNAG.WD=''
            || FUN.emsg('Pole Warunki dostawy musi być wypełnione.'@)
            || _TABPOZ.WD:=_TABNAG.WD
            ?}
         ||
            exec('add_kom','#message','Pozycja %1, niewypełnione pole Warunki dostawy.'@[_poz],2);
            _wyn:='WD'
         ?}

      |? ~_mustbe & _wd<>''
      ||
         {? _disp
         ||
            _TABPOZ.WD:=''
         ||
            exec('add_kom','#message','Pozycja %1, pole Warunki dostawy nie może być wypełnione.'@[_poz],2);
            _wyn:='WD'
         ?}
      ?}
   ?};
:: rodzaj transakcji
   {? _wyn=''
   ||
      _mustbe:={? _TABPOZ=DK || exec('nd_rtransa_pr','magdok_nag') || exec('faks_rtransa_pr','faktury_nag') ?};
      {? _mustbe || _mustbe:=_kodt<>'' & exec('rw3','intrastat',_kodt)=1 ?};
      {? _mustbe & _rtransak=''
      ||
         {? _disp
         ||
            {? _TABNAG.RTRANSAK=''
            || FUN.emsg('Pole Rodzaj transakcji powinno być wypełnione (nagłówek lub pozycja dokumentu).'@)
            || _TABPOZ.RTRANSAK:=_TABNAG.RTRANSAK
            ?}
         ||
            exec('add_kom','#message','Pozycja %1, niewypełnione pole Rodzaj transakcji.'@[_poz],2);
            _wyn:='RTRANSAK'
         ?}

      |? ~_mustbe & _rtransak<>''
      ||
         {? _disp
         ||
            _TABPOZ.RTRANSAK:=''
         ||
            exec('add_kom','#message','Pozycja %1, pole Rodzaj transakcji nie może być wypełnione.'@[_poz],2);
            _wyn:='RTRANSAK'
         ?}
      ?}
   ?};
:: rodzaj transportu
   {? _wyn=''
   ||
      _mustbe:={? _TABPOZ=DK || exec('nd_rtransp_pr','magdok_nag') || exec('faks_rtransp_pr','faktury_nag') ?};
      {? _mustbe || _mustbe:=_kodt<>'' & exec('rw3','intrastat',_kodt)=1 ?};
      {? _mustbe & _rtranspo=''
      ||
         {? _disp
         ||
            {? _TABNAG.RTRANSPO=''
            || FUN.emsg('Pole Rodzaj transportu powinno być wypełnione (nagłówek lub pozycja dokumentu).'@)
            || _TABPOZ.RTRANSPO:=_TABNAG.RTRANSPO
            ?}
         ||
            exec('add_kom','#message','Pozycja %1, niewypełnione pole Rodzaj transportu.'@[_poz],2);
            _wyn:='RTRANSPO'
         ?}

      |? ~_mustbe & _rtranspo<>''
      ||
         {? _disp
         ||
            _TABPOZ.RTRANSPO:=''
         ||
            exec('add_kom','#message','Pozycja %1, pole Rodzaj transportu nie może być wypełnione.'@[_poz],2);
            _wyn:='RTRANSPO'
         ?}
      ?}
   ?};
:: kraj pochodzenia
   {? _wyn='' & exec('czy_kp','intrastat',_ist_typ,,_date)
   ||
      _mustbe:={? _TABPOZ=DK || exec('dk_kp_pr','magdok_poz') || exec('fap_kp_pr','faktury_poz') ?};
      {? _mustbe & _kp=''
      ||
         {? _disp
         ||
            FUN.emsg('Pole Kraj pochodzenia musi być wypełnione.'@)
         ||
            exec('add_kom','#message','Pozycja %1, niewypełnione pole Kraj pochodzenia.'@[_poz],2)
         ?};
         _wyn:='KP'

      |? ~_mustbe & _kp<>''
      ||
         {? _disp
         ||
            _TABPOZ.KP:=''
         ||
            exec('add_kom','#message','Pozycja %1, pole Kraj pochodzenia nie może być wypełnione.'@[_poz],2);
            _wyn:='KP'
         ?}
      ?}
   ?};
:: masa netto
   {? _wyn=''
   ||
      {? _kodt='99500000'
            |
         _kodt<>'' & exec('find_sl','intrastat','188',_kodt)
      ||
         {? _masan<>0
         ||
            {? _disp
            || _TABPOZ.MASAN:=0;
               {? _his='T' || FKOR.PMASAN:=0 ?}
            || exec('add_kom','#message','Pozycja %1, pole Masa netto nie może być wypełnione.'@[_poz],2);
               _wyn:='MASAN'
            ?}
         ?}
      ||
         {? _TABPOZ=FAP & _kor='T' & __POPS.MASAN
         ||
            {? _fkor_masan<=0 & _fkor_il>0
            ||
               {? _disp
               || FUN.emsg('Masa netto musi być większa od zera.'@)
               || exec('add_kom','#message','Pozycja %1, masa netto musi być większa od zera.'@[_poz],2)
               ?};
               _wyn:='PMASAN'

            |? _fkor_masan<0
            ||
               {? _disp
               || FUN.emsg('Masa netto musi być zerowa lub większa od zera.'@)
               || exec('add_kom','#message','Pozycja %1, masa netto musi być zerowa lub większa od zera.'@[_poz],2)
               ?};
               _wyn:='PMASAN'
            ?}
         ?};
         {? _wyn<>''
         ||
            ~~

         |? _kor='N' & _masan<=0
               |
            _kor='T' & _masan<=0 & _il>0
         ||
            {? _disp
            || FUN.emsg('Masa netto musi być większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, masa netto musi być większa od zera.'@[_poz],2)
            ?};
            _wyn:='MASAN'

         |? _kor='T' & _masan<0
         ||
            {? _disp
            || FUN.emsg('Masa netto musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, masa netto musi być zerowa lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='MASAN'
         ?}
      ?}
   ?};
:: ilość w uzupełniającej jm
   {? _wyn=''
   ||
      {? _TABPOZ=FAP & _kor='T' & __POPS.ILUJM
      ||
         {? _fkor_ilujm<=0 & _fkor_il>0
         ||
            {? _disp
            || FUN.emsg('Ilość w uzupełniającej jednostce miary musi być większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1'
                  ', ilość w uzupełniającej jednostce miary musi być większa od zera.'@[_poz],2)
            ?};
            _wyn:='PILUJM'

         |? _fkor_ilujm<0
         ||
            {? _disp
            || FUN.emsg('Ilość w uzupełniającej jednostce miary musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, ilość w uzupełniającej jednostce miary musi być zerowa '
                  ' lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='PILUJM'
         ?}
      ?};
      {? _wyn<>''
      ||
         ~~

      |? {? _TABPOZ=DK || exec('dk_ilujm_pr','magdok_poz') || exec('fap_ilujm_pr','faktury_poz') ?}
      ||
         {? _kor='N' & _ju<>null & _ilujm<=0
               |
            _kor='T' & _ju<>null & _ilujm<=0 & _il>0
         ||
            {? _disp
            || FUN.emsg('Ilość w uzupełniającej jednostce miary musi być większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1'
                  ', ilość w uzupełniającej jednostce miary musi być większa od zera.'@[_poz],2)
            ?};
            _wyn:='ILUJM'

         |? _kor='T' & _ju<>null & _ilujm<0
         ||
            {? _disp
            || FUN.emsg('Ilość w uzupełniającej jednostce miary musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, ilość w uzupełniającej jednostce miary musi być zerowa '
                  'lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='ILUJM'
         ?}
      ||
         _TABPOZ.ILUJM:=0;
         {? _his='T' || FKOR.PILUJM:=0 ?}
      ?}
   ?};
:: wartość faktury
   {? _wyn=''
   ||
      {? _TABPOZ=FAP & _kor='T' & __POPS.WF
      ||
         {? _fkor_wf<=0 & _fkor_il>0
         ||
            {? _disp
            || FUN.emsg('Należy podać wartość faktury większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, Należy podać wartość faktury większa od zera.'@[_poz],2)
            ?};
            _wyn:='PWF'

         |? _fkor_wf<0
         ||
            {? _disp
            || FUN.emsg('Wartość faktury musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, wartość faktury musi być zerowa'
                  ' lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='PWF'
         ?}
      ?};
      {? _wyn<>''
      ||
         ~~

      |? {? _TABPOZ=DK || exec('dk_wf_pr','magdok_poz') || exec('fap_wf_pr','faktury_poz') ?}
      ||
         _ist191:=exec('find_sl','intrastat','191',_rtransak);
         {? _ist191 & _wf=0
         ||
            {? _disp
            || _wf0:=1
            || exec('add_kom','#message','Pozycja %1, wartość faktury jest zerowa.'@[_poz],2)
            ?}

         |? _kor='N' & _wf<=0
               |
            _kor='T' & _wf<=0 & _il>0
         ||
            {? _disp
            || FUN.emsg('Należy podać wartość faktury większą od zera.'@)
            || exec('add_kom','#message','Pozycja %1, należy podać wartość faktury większą od zera.'@[_poz],2)
            ?};
            _wyn:='WF'

         |? _kor='T' & _wf<0
         ||
            {? _disp
            || FUN.emsg('Wartość faktury musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, wartość faktury musi być zerowa lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='WF'
         ?}
      ||
         _TABPOZ.WF:=0;
         {? _his='T' || FKOR.PWF:=0 ?}
      ?}
   ?};
:: wartość statystyczna
   {? _wyn=''
   ||
      {? _TABPOZ=FAP & _kor='T' & __POPS.WS
      ||
         {? _fkor_ws<=0 & _fkor_il>0
         ||
            {? _disp
            || FUN.emsg('Należy podać wartość statystyczną większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, Należy podać wartość statystyczną większa od zera.'@[_poz],2)
            ?};
            _wyn:='PWS'

         |? _fkor_ws<0
         ||
            {? _disp
            || FUN.emsg('Wartość statystyczna musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, wartość statystyczna musi być zerowa'
                  ' lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='PWS'
         ?}
      ?};
      {? _wyn<>''
      ||
         ~~

      |? {? _TABPOZ=DK || exec('dk_ws_pr','magdok_poz') || exec('fap_ws_pr','faktury_poz') ?}
      ||
         {? _kor='N' & _ws<=0
               |
            _kor='T' & _ws<=0 & _il>0
         ||
            {? _disp
            || FUN.emsg('Należy podać wartość statystyczną większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, Należy podać wartość statystyczną większa od zera.'@[_poz],2)
            ?};
            _wyn:='WS'

         |? _kor='T' & _ws<0
         ||
            {? _disp
            || FUN.emsg('Wartość statystyczna musi być zerowa lub większa od zera.'@)
            || exec('add_kom','#message','Pozycja %1, wartość statystyczna musi być zerowa'
                  ' lub większa od zera.'@[_poz],2)
            ?};
            _wyn:='WS'
         ?}
      ||
         _TABPOZ.WS:=0;
         {? _his='T' || FKOR.PWS:=0 ?}
      ?}
   ?};
:: ewentualna ponowna redakcja
   {? _wyn='' & _disp & (_masan0 | _ilujm0 | _wf0 | _ws0)
   ||
      {? FUN.ask('Poniższe pola mają zerową wartość:\n'@
            +{? _masan0 || '\n- Masa netto'@ || '' ?}
            +{? _ilujm0 || '\n- Ilość w jednostce uzupełniającej'@ || '' ?}
            +{? _wf0 || '\n- Wartość faktury'@ || '' ?}
            +{? _ws0 || '\n- Wasrtość statystyczna'@ || '' ?}
            +'\n\nCzy powrócić do ich redakcji?'@
         )
      ||
         _wyn:={? _masan0 || 'MASAN' |? _ilujm0 || 'ILUJM' |? _wf0 || 'WF' || 'WS' ?}
      ?}
   ?}
?};

_wyn


\wd_reg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: reguła na wypełnienie pola warunki dostawy
::   WE: _a - [P/W] typ deklaracji
::       _b - data początku okresu deklaracji
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ist_typ:=_a;
_date:=_b;

{? _ist_typ=''
||
   0
||
   _progp:=exec('prog','intrastat',_date,'P');
   _progw:=exec('prog','intrastat',_date,'W');
   exec('czy_prog_s','intrastat',_ist_typ,_progw,_progp)
?}


\ws_reg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: regułu na wypełnienie pola Wartość statystyczna
::   WE: _a - [P/W] typ deklaracji
::       _b - data początku okresu deklaracji
::       _c - kod towarowy
::       _d - rodzaj transakcji
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ist_typ:=_a;
_date:=_b;
_kodt:=_c;
_rtransak:=_d;
{? exec('wd_reg','intrastat',_ist_typ,_date)=0
||
   _ist_typ<>''
      &
   exec('find_sl','intrastat','189',_kodt)=0
      &
   (
      exec('find_sl','intrastat','190',_kodt)
         |
      exec('find_sl','intrastat','191',_rtransak)
   )
||
   exec('find_sl','intrastat','189',_kodt)=0
?}


\pops
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Ustawia wartość zmiennej __POPS wg aktualnej wartości bufora tabeli FAKS i FAP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__POPS');
__POPS:=obj_new('MASAN','ILUJM','WF','WS');
__POPS.MASAN:=exec('fap_masan_pr','faktury_poz');
__POPS.ILUJM:=exec('fap_ilujm_pr','faktury_poz');
__POPS.WF:=exec('fap_wf_pr','faktury_poz');
__POPS.WS:=exec('fap_ws_pr','faktury_poz');
{? FAKS.LKSQL<>'' & FAP.POZ & FAKS.T().HIS='N'
||
   _lksql:=exec('FindAndGet','#table',FAKS,FAKS.LKSQL,,,null());
   _poz:=FAP.POZ;
   {? _lksql
   ||
      _red:=0;
      _name:=ref_name(_lksql);
      FAKS.cntx_psh();
      FAKS.use(_name);
      FAKS.cntx_psh();
      FAKS.prefix();
      {? FAKS.seek(_lksql)
::            &
::         (FAKS.IST_TYP='' | FAKS.INTRA='T')
      ||
         FAP.cntx_psh();
         FAP.use((FAP.name()-3)+(_name+3));
         FAP.cntx_psh();
         FAP.index('FAP');
         FAP.prefix(FAKS.ref(),_poz);
         {? FAP.first()
         ||
            _red:=1;
            __POPS.MASAN:=__POPS.MASAN & exec('fap_masan_pr','faktury_poz')=0;
            __POPS.ILUJM:=__POPS.ILUJM & exec('fap_ilujm_pr','faktury_poz')=0;
            __POPS.WF:=__POPS.WF & exec('fap_wf_pr','faktury_poz')=0;
            __POPS.WS:=__POPS.WS & exec('fap_ws_pr','faktury_poz')=0
         ?};
         FAP.cntx_pop();
         FAP.cntx_pop()
      ?};
      FAKS.cntx_pop();
      FAKS.cntx_pop();
      {? ~_red
      ||
         __POPS.MASAN:=0;
         __POPS.ILUJM:=0;
         __POPS.WF:=0;
         __POPS.WS:=0
      ?}
   ?}
?}


\faks_warning
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Lista dokumentów z niezzakceptowanymi danymi do intrastat
::   WE: _a - 0/1 uruchomiona w trybie automatycznym
::       _b - S/Z sprzedaż, zakup
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_auto:=_a;
_sz:=_b;
exec('open','open_tab',ODDZ.KOD,2-$IST.ROK);
FAKS.cntx_psh();
FAKS.prefix();
FAKS.f_clear();
_sort:='SZ,DW,SYM';
_form:='join TYPYSP using(FAKS.T,TYPYSP.REFERENCE)';
_where:='
   "TYPYSP".UE=''T''
      and
   "FAKS".INTRAKC=''N'' and "FAKS".AR=:_a and "FAKS".AM=:_b
      and
   ("FAKS".SZ='':_c'' or "TYPYSP".KOR=''T'')
';
FAKS.f_set(_sort,_form,_where,IST.ROK,IST.MIESIAC,_sz);
{? FAKS.f_first()
||
   {? _auto
   ||
::    jak będzie potrzeba dodać zapis listy dokumentów w blob czynności
      ~~
   ||
      _wer:=FAKS.mk_sel('Dokumenty unijne z niezaakceptowanymi danymi do Intrastat'@,,,'faks_w_intrakc',,,,,'U');
      FAKS.win_fld(_wer,,'SZ',,,20,,,'Sprzedaż/Zakup'@);
      FAKS.win_fld(_wer,,'DW',,,20,,,'Data wystawienia'@);
      FAKS.win_fld(_wer,,'SYM',,,20,,,'Symbol'@);
      FAKS.win_fld(_wer,,'KH','NAZ',,20,,,'Kontrahent'@);
      FAKS.win_fld(_wer,,'IST_TYP',,,20,,,'Typ deklaracji'@);
      FAKS.win_fld(_wer,,'IST_OKR',,,20,,,'Okres deklaracji'@);
      FAKS.win_sel(_wer);
      FAKS.select()
   ?}
?};
FAKS.f_clear();
FAKS.cntx_pop()


\nd_warning
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Lista dokumentów z niezzakceptowanymi danymi do intrastat
::   WE: _a - 0/1 uruchomiona w trybie automatycznym
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_auto:=_a;
exec('open','open_tab',ODDZ.KOD,2-$IST.ROK);
ND.cntx_psh();
ND.prefix();
ND.f_clear();
_sort:='D,SYM';
_form:='join TYPYDOK using(ND.TYP,TYPYDOK.REFERENCE)';
_where:='
   "TYPYDOK".UE=''T''
      and
   "ND".INTRAKC=''N'' and "ND".AR=:_a and "ND".AM=:_b
';
ND.f_set(_sort,_form,_where,IST.ROK,IST.MIESIAC);
{? ND.f_first()
||
   {? _auto
   ||
::    jak będzie potrzeba dodać zapis listy dokumentów w blob czynności
      ~~
   ||
      _wer:=ND.mk_sel('Dokumenty unijne z niezaakceptowanymi danymi do Intrastat'@,,,'nd_w_intrakc',,,,,'U');
      ND.win_fld(_wer,,'D',,,20,,,'Data wystawienia'@);
      ND.win_fld(_wer,,'SYM',,,20,,,'Symbol'@);
      ND.win_fld(_wer,,'KH','NAZ',,20,,,'Kontrahent'@);
      ND.win_fld(_wer,,'IST_TYP',,,20,,,'Typ deklaracji'@);
      ND.win_fld(_wer,,'IST_OKR',,,20,,,'Okres deklaracji'@);
      ND.win_sel(_wer);
      ND.select()
   ?}
?};
ND.f_clear();
ND.cntx_pop()


\nie_dotyczy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Sprawdza czy dokument nie dotyczy intrastat
::       Dla _a='ND' w buforze ND muszą być dane sprawdzanego dokumentu
::       Dla _a='FAKS' w buforze FAKS muszą być dane sprawdzanego dokumentu
::   WE: _a - 'ND'/'FAKS'
::       _b - 0/1 - komunikaty
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0) || _b:=1 ?};
_wyn:=
   {? _a='FAKS'
   ||
      FAKS.IST_TYP=''
         &
      exec('faks_ist_typ','faktury_nag',0)

   |? _a='ND'
   ||
      exec('nd_ist_typ_re','magdok_nag','PR')=0
   ||
      1
   ?};
{? _b & _wyn
||
   FUN.info('Dokument nie dotyczy Intrastat.\nOpcja niedostępna.'@)
?};
_wyn


\czy_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [21.14]
:: OPIS: Czy wymagany kraj pochodzenia towaru
::   WE: _a - [P/W] typ deklaracji
::       [_b] - okres deklaracji
::       [_c] - data do wyznaczenia okresu deklaracji
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ist_typ:=_a;
_ist_okr:={? var_pres('_b')=type_of('') || _b || '' ?};
{? _ist_okr='' & var_pres('_c')=type_of(date())
||
   _ist_okr:=form(_c~1,-4,,'9 ') + form(_c~2,-2)
?};

{? _ist_okr='' || return(0) ?};

_p100203:=exec('get','#params',100203);
_ist_typ='P'
   |
_ist_typ='W' & _p100203<>'' & _ist_okr>=_p100203


\actmod_ist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Aktualizacja znacznika modyfikacji deklaracji
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? IST.MOD
 & FUN.ask('Dane dla deklaracji %1 zostały zmienione na dokumentach.\n\n'
           'Można sprawdzić zmiany generując korektę deklaracji\n'
           'lub zatwierdzić zmiany usuwając znacznik modyfikacji.\n\n'
           'Czy zatwierdzić naniesienie zmian po modyfikacji danych?'@[IST.NRWLASNY])
|| IST.MOD:=0;
   IST.put(1)
|| FUN.info('Nie zmieniano danych dla deklaracji.'@)
?};
~~


\ist_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Formuła określiająca ikony
::----------------------------------------------------------------------------------------------------------------------
"
   {? IST.MOD || 'xwin16.png:9'
   || exec('pusta','#icon')
   ?}
"


\nip_ue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Zwraca nip_ue z dokumentu lub napis 'NATURAL PERSON'
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('nip_ue_required','intrastat')
|| gsub(FAKS.NIP_UE,' ','')
|| 'NATURAL PERSON'
?}


\nip_ue_required
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Warunke na nip ue
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
4+FAKS.PROC().KOD<>'WSTO' | FAKS.KH().FIZYCZNY<>1 | FAKS.KH().TYP<>'I'

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 8130df98ff3a6336942f1107fa16d895e89180d6916fc4262f9670d810c3b4fa42f459c1b45fc2c71f13ec2370e68f6623dcf89a10d5fbd6d17659f0bd864eb17e577a82583a7750026a22aec2545fd263a7be4a68c606782ade53c7158e2818088f2faa416670d7464bf325db38bb13eea51f5760f8c58d5669ef3584b0f36b
