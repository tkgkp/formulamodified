:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: wyp_head.fml
:: Utworzony: 16.08.2017
:: Autor: GZ
::======================================================================================================================
:: Zawartość: Obsługa stanów wyposażenia, wypożyczeń i zwrotów
::======================================================================================================================


\env_karo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Środowisko
::----------------------------------------------------------------------------------------------------------------------
_env_karo:=obj_new('STAN','STANG','WER','WERG','NDX','NDXGM','NDXG','NDXKOD','NDXGKOD','NDXM','NDXMGRP','MAT_EDIT');
params_set('env_karo',_env_karo);
_env_karo.STAN:=exec('karo_stan_create','wyp_head');
_env_karo.STANG:=exec('karo_stan_create','wyp_head');
_env_karo.WER:=exec('karo_stan_win','wyp_head',1);
_env_karo.WERG:=exec('karo_stan_win','wyp_head',0);
_env_karo.NDX:=_env_karo.STAN.ndx_tmp(,,'MAG',,,'M',,);
_env_karo.NDXGM:=_env_karo.STAN.ndx_tmp(,,'MAG',,,'MGRP',,,'M',,);
_env_karo.NDXG:=_env_karo.STANG.ndx_tmp(,,'MAG',,,'MGRP',,);
_env_karo.NDXKOD:=_env_karo.STAN.ndx_tmp(,,'MAG',,,'KOD',,);
_env_karo.NDXGKOD:=_env_karo.STANG.ndx_tmp(,,'MAG',,,'KOD',,);
_env_karo.NDXM:=_env_karo.STAN.ndx_tmp(,,'M',,);
_env_karo.NDXMGRP:=_env_karo.STANG.ndx_tmp(,,'MGRP',,);
_env_karo.MAT_EDIT:=1;
_env_karo


\select_karo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wyświetlenie stanu wyposażenia u pracowników
::  OLD: \edi_karo_p/wypkaro.fml
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
DK.cntx_psh();
DK_C.cntx_psh();
SM.cntx_psh();
SM.index('ASA');
SM.prefix(ST.MAG,'T');

:: ustawienie formuł na widok pracowników
VAR.TRYBPRAC:=1;

::_dkname:=DK.name;
_p6520:=exec('get','#params',6520,2,OPERATOR.USER);
exec('filtruj_p','wyp',1+_p6520,_p6520+1);

_p6500:=exec('get','#params',6500,2,OPERATOR.USER);
VAR.TRYBRODZ:=(_p6500<>'M');

_env_karo:=exec('env_karo','wyp_head');
params_set('env_karo',_env_karo);

_karo_stan_grp:=exec('karo_stan_grp','wyp_head');
KARO.win_edit('RED_WYD');
::P.actions('WYP_KARO','w');

:: Ikony
_formicon:="exec('karo_icon','wyp_head')";
KARO.win_fml('WER_R',ZKARO,'S',,'ICON_BEFORE',_formicon);
KARO.win_fml('WERROZL',ZKARO,'S',,'ICON_BEFORE',_formicon);
KARO.win_fml('SLO_WYD',ZKARO,'S',,'ICON_BEFORE',_formicon);

P.win_sel(_karo_stan_grp);

MGRP.cntx_psh();
MGRP.clear(); MGRP.index('KOD');
::MGRP.f_set('KOD',,'TYLWPOL=0'); MGRP.f_first();
P.first();

AreaTitle.setTabWin(P);
AreaTitle.setTitle();
P.fld_attr(,2);
P.fld_attr('DZ',3);
P.fld_attr('DZA',3);
P.fld_attr('F_ZATR',3);
F_ZATR.fld_attr(,2);
F_ZATR.fld_attr('OPIS',3);
P.select();
P.fld_attr(,1);
F_ZATR.fld_attr(,1);
::HELP.MGRP:=null();
MGRP.f_clear();
MGRP.cntx_pop();
{? TAT.f_active() || TAT.f_clear() ?};
::&_dkname;
P.cntx_pop();
DK.cntx_pop();
DK_C.cntx_pop();
SM.cntx_pop();
~~


\karo_stan_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
::  MOD: GZ
:: OPIS: Utworzenie tymczasowej tabeli widoku stanu wyposazenia u pracownika lub kontrahenta
::  OLD: \karps_ini/wypkaro.fml
::   WY: uchwyt do tabeli tabela _karo_stan
::----------------------------------------------------------------------------------------------------------------------
_karo_stan:=tab_tmp(2,'MAG','INTEGER','#MG.ref'
                  ,'KOD','STRING[50]','Podgrupa'@
                  ,'NAZ','STRING[100]','Nazwa'@
                  ,'KTM','STRING[50]','Materiał'@
                  ,'MNAZ','STRING[100]','Nazwa materiału'@
                  ,'S','STRING[1]','Status'@
                  ,'IL','REAL','Ilość'@
                  ,'MGRP','INTEGER','#MGRP.ref'
                  ,'M','INTEGER','#M.ref'
                 );
_karo_stan


\karo_stan_win
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Utworzenie okna tabeli widoku stanu wyposazenia u pracownika lub kontrahenta
::  OLD: \karps_ini/wypkaro.fml
::   WE: _a = 1 - okno wg materiałów
::            0 - okno wg grup materiałowych
::   WY: akronim okna wertowania _karo_stan_win
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
{? _a=1
|| _karo_stan:=params_get().env_karo.STAN
|| _karo_stan:=params_get().env_karo.STANG
?};

::okno prezentacji zawartosci _karo_stan
_karo_stan_wer:=_karo_stan.mk_sel('Stan wyposażenia'@,'P',0,'#karostan_wer'+$_a,,,,,'U','T');
{? _a=1
|| _karo_stan.win_fld(_karo_stan_wer,,'KOD',,,20,,1,,,'Kod podgrupy materiałowej'@);
   _karo_stan.win_fld(_karo_stan_wer,,'NAZ',,,20,,1,,,'Nazwa podgrupy materiałowej'@);
   _karo_stan.win_fld(_karo_stan_wer,,'KTM',,,20,,1,,,'Indeks materiałowy'@);
   _karo_stan.win_fld(_karo_stan_wer,,'MNAZ',,,20,,1,,,'Nazwa materiału'@)
|| _karo_stan.win_fld(_karo_stan_wer,,'KOD',,,41,,1,,,'Kod podgrupy materiałowej'@);
   _karo_stan.win_fld(_karo_stan_wer,,'NAZ',,,41,,1,,,'Nazwa podgrupy materiałowej'@);
   _karo_stan.fld_attr(,3)
?};
_karo_stan.win_fld(_karo_stan_wer,,'IL',,,8,2,1,,,'Stan ilościowy wyposażenia'@);
_karo_stan.win_act(_karo_stan_wer,,'Formuła','Wydaj'@@,,
   'Wydanie wyposażenia pracownikowi'@,"params_exec('karo_wydaj','wyp_head')",,1);
task_attach('WYP_LWW_DWYD');
_karo_stan.win_act(_karo_stan_wer,1,'Formuła','Wydaj'@@,,'Wydanie wyposażenia pracownikowi'@
   ,"params_exec('karo_wydaj','wyp_head')",,1);
task_attach('WYP_LWW_DWYD');
_karo_stan.win_act(_karo_stan_wer,,'Formuła','Zwróć'@@,,'Zwrot wyposażenia od pracownika'@
   ,"params_exec('karo_zwroc','wyp_head')",,);
task_attach('WYP_LWW_DZWR');
_karo_stan.win_act(_karo_stan_wer,,'Formuła','Stan wyposażenia osoby'@@,,'Stan dla wszystkich form zatrudnienia osoby'@
   ,"params_exec('o_fulstan','wyp_head')");
_karo_stan.win_act(_karo_stan_wer,,'Formuła','Druku&j'@@,,'Zestawienia związane z wyposażeniem'@
   ,"params_set(params_get()); rep_exec('wyp_stanp')",,,,,,,,'icon=print');
_formula:={? _a=1 || "exec('legenda','color','__KARPS#RS#')" || "exec('legenda','color','__KARPSG#RS#')" ?};
_karo_stan.win_act(_karo_stan_wer,,'Formuła','Legenda'@@,,,,_formula);
_formula:=$("params_exec('karps_rb','wyp_head',"+$_a+")");
_karo_stan.win_act(_karo_stan_wer,,'Rekord',,,,_formula);
_karo_stan.win_act(_karo_stan_wer,,'Kolejność',,,,);
_karo_stan.win_btn(_karo_stan_wer,'text=%1,panel=right,align=begin'['Wydaj'@],'menu:W');
_karo_stan.win_btn(_karo_stan_wer,'text=%1,panel=right,align=begin'['Zwróć'@],'menu:Z');
_formula:="
   MGRP.cntx_psh(); MGRP.clear();
   _odp:='out_prec='+{? params_get().env_karo.STAN.MGRP & MGRP.seek(params_get().env_karo.STAN.MGRP,)
                     || $exec('mgrp_m_dokl','wyp',MGRP.M) || '-1'
                     ?};
   MGRP.cntx_pop();
   _odp
";
_karo_stan.fld_fml('IL','DISPLAY_FORMAT',_formula);
return(_karo_stan_wer)


\karo_stan_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: odswiezenie okien
::  OLD: \win_rfr/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_p6500:=exec('get','#params',6500,2,OPERATOR.USER);

_karo_stan:=params_get().env_karo.STAN;
_karo_stang:=params_get().env_karo.STANG;
_karo_stan_wer:=params_get.env_karo.WER;
_karo_stan_werg:=params_get.env_karo.WERG;

_karo_stan_grp:=P.grp_make('',"",'ov_karo_grp',,,"exec('exit','zws',_a)");
:: params_exec('ov_kar_f','wyp_head')

:: -------------------------lewy panel----------------------------------------
P.win_sopt('WYP_KARO','select_record_checkbox=0');
P.grp_sel(_karo_stan_grp,,'WYP_KARO','Pracownicy'@,
      "{? VAR.TRYBRODZ || params_exec('ov_karm_af','wyp_head',0) || params_exec('ov_karm_af','wyp_head',1) ?}",
      ,,,,,,,'maximized');

:: -----------------------prawy panel--------------------------------------
P.grp_splt(_karo_stan_grp,,'vertical','SKARO');
{? _p6500='M'
||
:: zakladka dla M z wszystkich magazynow
   P.grp_sel(_karo_stan_grp,_karo_stan,_karo_stan_wer,
                  'Materiały'@,"params_exec('karps_af','wyp_head')",,,,
                  "params_exec('karms_before','wyp_head')",,,,
                  'maximized_with_title')
?};
:: zakladka z rodzajami ze wszystkich magazynow
P.grp_sel(_karo_stan_grp,_karo_stang,_karo_stan_werg,
               'Grupy materiałowe'@,"params_exec('karps_af','wyp_head')",,,,
               "params_exec('karps_before','wyp_head')",,,,
               'maximized_with_title');
::
{? _p6500<>'M'
||
:: zakladka dla M z wszystkich magazynow
   P.grp_sel(_karo_stan_grp,_karo_stan,_karo_stan_wer,
                  'Materiały'@,"params_exec('karps_af','wyp_head')",,,,
                  "params_exec('karms_before','wyp_head')",,,,
                  'maximized_with_title')
?};
::
P.grp_splt(_karo_stan_grp,'SKARO','horizontal','SCKARO',18);
P.grp_sel(_karo_stan_grp,KARO,'WER_R','Wydania wyposażenia'@,"params_exec('karow_af','wyp_head')",,,,
   "params_exec('karow_mb','wyp_head',_a)","params_exec('karow_ma','wyp_head',_a)",,,'maximized_with_title');
P.grp_sel(_karo_stan_grp,KARO,'WERROZL','Zwroty wyposażenia'@,,,,,
   "params_exec('karoz_mb','wyp_head')","params_exec('karoz_ma','wyp_head')",,,'maximized_with_title');

:: zakładka dla M z biezacego magazynu
::OV_UPR.grp_sel(__OVMAT,__KARMS,__KPRMW1,
::               'wYposażenie - bieżący magazyn',"exec('karms_af','wypkaro')",,,,
::               "VAR.TRYBRODZ:=0;exec('stanms_b','wypkaro',_a)",,,,
::               'maximized_with_title');
::OV_UPR.tab_splt(__OVMAT,,'horizontal','SCKARO',15);
::OV_UPR.grp_sel(__OVMAT,KARO,'WER_R',,"exec('karow_af','wyp_head')",,,,
::               "exec('karow_mb','wyp_head',_a)","exec('karow_ma','wyp_head',_a)",,,'maximized_with_title');
::OV_UPR.tab_splt(__OVMAT,,'horizontal','SCZWR',28);
::OV_UPR.grp_sel(__OVMAT,KARO,'WERROZL',,,,,,
::               "exec('karoz_mb','wyp_head')","exec('karoz_ma','wyp_head')",,,'maximized_with_title');
::
::P.tab_splt(,,'horizontal','SCKARO',15);
::P.grp_sel(_karo_stan_grp,KARO,'WER_R',,"exec('karow_af','wyp_head')",,,,
::               "exec('karow_mb','wyp_head',_a)","exec('karow_ma','wyp_head',_a)",,,'maximized_with_title');
::P.tab_splt(_karo_stan_grp,,'horizontal','SCZWR',28);
::OV_UPR.grp_sel(_karo_stan_grp,KARO,'WERROZL',,,,,,
::               "exec('karoz_mb','wyp_head')","exec('karoz_ma','wyp_head')",,,'maximized_with_title');
::
:: zakladka z rodzajami z biezacego magazynu
::OV_UPR.grp_sel(__OVMAT,_stan_tab,_karo_stan_wer,
::               'Bieżący magazyn - rodzaje',"exec('karps_af','wyp_head')",,,,
::               "VAR.TRYBRODZ:=1;exec('stan_s_b','wypkaro',_a)",,,,
::               'maximized_with_title');
::OV_UPR.tab_splt(__OVMAT,,'horizontal','SMKARO',15);
::OV_UPR.grp_sel(__OVMAT,KARO,'WER_R',,"exec('karow_af','wyp_head')",,,,
::               "exec('karow_mb','wyp_head',_a)","exec('karow_ma','wyp_head',_a)",,,
::               'maximized_with_title');
::OV_UPR.tab_splt(__OVMAT,,'horizontal','SMZWR',28);
::OV_UPR.grp_sel(__OVMAT,KARO,'WERROZL',,,,,,
::               "exec('karoz_mb','wyp_head',_a)","exec('karoz_ma','wyp_head',_a)",,,'maximized_with_title');
return(_karo_stan_grp)


\ov_kar_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Wypelnienie okna grupowego __OVRODZ
::  OLD: \ov_kar_f/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::czy moze dodawac bezposrednio do KARO
::{? exec('get','#params',6510,2,OPERATOR.USER)='T'
::|| tab_hide(1,1,'SM'); tab_hide(2,1,'SM'); KARO.actions('WER_R','HD:D','?:?',1); _stan_tab.actions(_karo_stan_wer,'D:D','?:?',1)
::|| tab_show(1,'SM');
::   {? VAR.TRYBPRAC<>0
::   || tab_show(2,'SM')
::   ?};
::   KARO.actions('WER_R','H','?:?',1);
::   _stan_tab.actions(_karo_stan_wer,,'?:?',1)
::?};
:grp_disp(RODZO,'SLODND',,0,'SM');
params_exec('ov_karm_af','wyp_head',0);
params_exec('ov_karm_af','wyp_head',1);
~~


\ov_kar_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po odswiezeniu okna grupowego __OVRODZ
::   WE: _a - 1 - stan wg materiałów
::            0 - stan wg grup
::  OLD: \ov_kar_af/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
::exec('atr_rfr','wypkaro',0);
::__infat2.actions(__atr_sel,'T',,1);
params_exec('ov_karm_af','wyp_head',_a);
::exec('ov_karr_af','wypkaro');
~~


\ov_karm_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Po odswiezeniu okna grupowego __OVRODZ dla zakladek wg M
::   WE: _a - 1 - stan wg materiałów
::            0 - stan wg grup
::  OLD: \ov_karm_af/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
_ref:=P.ref();
_karo_stan:=params_get().env_karo.STAN;
_karo_stang:=params_get().env_karo.STANG;
_karo_stan_wer:=params_get().env_karo.WER;
_karo_stan_werg:=params_get().env_karo.WERG;
params_set(params_get());
{? _a=1
|| {? exec('reload_karms','wyp_head',_ref,_a,_karo_stan,params_get().env_karo.NDXGM)
   || params_exec('uzu_c_karms','wyp_head',_a,_karo_stan)
   ?}
|| {? exec('reload_karms','wyp_head',_ref,_a,_karo_stang,params_get().env_karo.NDXG)
   || params_exec('uzu_c_karms','wyp_head',_a,_karo_stang)
   ?}
?};
{? _a=1
||
::   _karo_stan.cntx_psh();
   params_exec('stanmc_b','wyp_head');
   {? VAR.TRYBRODZ
   || grp_disp(_karo_stan,_karo_stan_wer,0)
   || grp_disp(_karo_stan,_karo_stan_wer,1)
   ?}
::   _karo_stan.cntx_pop()
||
::   _karo_stang.cntx_psh();
   params_exec('stan_c_b','wyp_head',_a);
   {? VAR.TRYBRODZ
   || grp_disp(_karo_stang,_karo_stan_werg,1)
   || grp_disp(_karo_stang,_karo_stan_werg,0)
   ?}
::   _karo_stang.cntx_pop()
?};
~~


\reload_karms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Wypelnianie tabeli _karo_stan dla pracownika podanego parametrem
::  OLD: \reload_karms/wypkaro.fml
::   WE: _a - P.ref() [domyslnie biezacy]
::       _b - 1 - stan wg materiałów
::            0 - stan wg grup
::       _c - tabela
::   WY: liczba rekordow w __KARPS
::       pole: __KARPS.S = 'T' - bedzie wykorzystane do sygnalizowania niezatwierdzonych wydan
::             __KARPS.IL = 0 - bedzie wypelniane dynamicznie
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=P.ref() ?};
{? var_pres('_b')<>type_of(0) || _b:=0 ?};
_ok:=(ref_name(_a)=P.name()) | (ref_name(_a)=KH.name());
{? _b
|| _karo_stan:={? var_pres('_c')=type_of(params_get().env_karo.STAN) || _c || params_get().env_karo.STAN ?};
   _karo_stan_ndx1:={? var_pres('_d')=type_of(params_get().env_karo.NDXGM) || _d || params_get().env_karo.NDXGM ?}
|| _karo_stan:={? var_pres('_c')=type_of(params_get().env_karo.STANG) || _c || params_get().env_karo.STANG ?};
   _karo_stan_ndx1:={? var_pres('_d')=type_of(params_get().env_karo.NDXG) || _d || params_get().env_karo.NDXG ?}
?};
_karo_stan.clear();
_karo_stan.erase();
{? _ok
||
   _karo_stan.index(_karo_stan_ndx1);
   KARO.cntx_psh();
   KARO.index('P_WYD');
   KARO.prefix(_a,'N','W');
   {? _a<>null & KARO.first()
   ||
      {!
      |?
         _found:={? _b
                 || ~_karo_stan.find_key(#KARO.MG,#KARO.MGRP,#KARO.M)
                 || ~_karo_stan.find_key(#KARO.MG,#KARO.MGRP)
                 ?};
         {? _found
         ||
            _karo_stan.blank(1);
            _karo_stan.MAG:=#KARO.MG;
            {? _b
            || _karo_stan.M:=#KARO.M;
               _karo_stan.KTM:=KARO.M().KTM;
               _karo_stan.MNAZ:=KARO.M().N
            ?};
            _karo_stan.MGRP:=#KARO.MGRP;
            _karo_stan.KOD:=exec('karo_mgrp_kod','wyp_head');
            _karo_stan.NAZ:=exec('karo_mgrp_naz','wyp_head');
            _karo_stan.S:=KARO.STATUS;
            _karo_stan.add();
            params_exec('stan4pos','wyp_head')
         ?};
         KARO.next()
      !}
   ?};
   KARO.cntx_pop()
|| {? _a<>null() || FUN.error('Błędne parametry funkcji pobierania stanu.'@) ?}
?};
_karo_stan.size()


\uzu_c_karms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Dodanie do _karo_stan rekordow podsumowania w ramach M
::       w polu MAG wpisywana jest wartosc -1 (zabezpieczenie gdyby zapisaly sie dane przy ST.MAG=null()
::   WE: _a - 1 - stan wg materiałów
::            0 - stan wg grup
::  OLD: \uzu_c_karms/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
{? _a
|| _karo_stan:={? var_pres('_b')=type_of(params_get().env_karo.STAN) || _b || params_get().env_karo.STAN ?}
|| _karo_stan:={? var_pres('_b')=type_of(params_get().env_karo.STANG) || _b || params_get().env_karo.STANG ?}
?};
_karo_stan.cntx_psh();
_karo_stan.clear();
{? _karo_stan.first()
||
   {? _a
   || _tab:=sql('select distinct M, KTM, MNAZ, MGRP, KOD, NAZ from :_a order by 1',_karo_stan)
   || _tab:=sql('select distinct MGRP, KOD, NAZ from :_a order by 1',_karo_stan)
   ?};
   {? _tab.first()
   ||
      {!
      |?
         _karo_stan.blank(1);
         _karo_stan.MAG:=-1;

         _karo_stan.MGRP:=_tab.MGRP;
         _karo_stan.KOD:=_tab.KOD;
         _karo_stan.NAZ:=_tab.NAZ;
         {? _a
         ||
            _karo_stan.M:=_tab.M;
            _karo_stan.KTM:=_tab.KTM;
            _karo_stan.MNAZ:=_tab.MNAZ
         ?};
         _karo_stan.S:='T';
         _karo_stan.add();
         params_exec('stan4pos','wyp_head');
         _tab.next()
      !}
   ?}
?};
_karo_stan.cntx_pop()


\stanmc_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed obsluga okna stanu calkowitego
::       Prefiksowanie po wartosciach _stan_tab.S=-1
::  OLD: \stanmc/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_karo_stan:=params_get().env_karo.STAN;
_karo_stan.index(params_get().env_karo.NDXKOD);
_karo_stan.prefix(-1);
::_karo_stan.first();
~~


::======================================================================================================================
:: Akcje okna stanów wyposażenia
::======================================================================================================================


\karo_wydaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Akcja wydaj - dołączanie rekordu do KARO - z obszaru
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='WYP_LWW_DWYD';
_params.AKCJA:='WYDAJ';
_params.PROC_START:='T';
_params.CONTEXT:=obj_new('KARO','env_karo');
_params.CONTEXT.KARO:=null();
_params.CONTEXT.env_karo:=params_get().env_karo;
exec('mp_run','#b__box',_params);
params_exec('st_refresh','wyp_head')


\karo_zwroc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Akcja zwróć - dołączanie rekordu do KARO typu Z - z obszaru
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='WYP_LWW_DZWR';
_params.AKCJA:='ZWRÓĆ STAN';
_params.PROC_START:='T';
_params.CONTEXT:=obj_new('KARO','env_karo');
_params.CONTEXT.KARO:=null();
_params.CONTEXT.env_karo:=params_get().env_karo;
exec('mp_run','#b__box',_params);
params_exec('st_refresh','wyp_head')


\karorw_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Dolacz przed KARO typ W w oknie wg MGRP
::  OLD: \karorw_db/wypkaro.fml
::   WY: 1/0 - czy mozna
::----------------------------------------------------------------------------------------------------------------------
::Użytkownik musi miec prawo swobodnego dolaczania pozycji
::redundancja zabezpieczenia, bo w oknie nie powinno byc akcji dolacz
VAR1.M:='';
{? exec('get','#params',6510,2,OPERATOR.USER)='N'
|| ZKARO.blank(1);
   KARO.win_edit('RED_WYD');
:: zmienna tu przechowuje informacje jaka ilosc z tej pozycji pochodzi z generacji z polecenia (w przypadku dolacz 0)
   ZNADZOR.ILG:=0;
   1
|| FUN.emsg('Użytkownik %1 może dodawać nowe pozycje do kartoteki tylko na polecenie.'@[OPERATOR.USER().DANE]);
   0
?}


\karo_disp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Przed wyswietleniem rekordu karo
::  OLD: \karo_disp/wypkaro2.fml
::   WE: _a - wyświetlanie wydań i zwrotów w jednym oknie.
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _a:=0 ?};
_edit:=KARO.win_edit('?');
_nazw:=VAR1.NAZWISKO;
VAR1.NAZWISKO:=P.OSOBA().NAZWISKO;
{? KARO.MGRP<>null()
|| POMOC.MGRW:=KARO.MGRP().MGR
|? KARO.M<>null()
|| POMOC.MGRW:=KARO.M().MGR
?};
{? _a=0
|| {? KARO.TYP='W'
   || KARO.win_edit('DISP')
   || KARO.win_edit('DISP_ZWR')
   ?}
|| {? ZKARO.DATA=date(0,0,0)
   || KARO.win_edit('DISP')
   || KARO.win_edit('DISP_ALL')
   ?}
?};
{? KARO.SRDK<>''
|| DK.cntx_psh();
   DK.clear();
   ND.cntx_psh();
   DK_C.cntx_psh();
   DK_C.clear();
   M_ATR.cntx_psh();
   M_ATR.clear();
   {? DK.seek(KARO.SRDK,8+KARO.SRDK)
   || ND.use(ref_name(DK.N));
      VAR1.DOST:=DK.DOST;
      {? DK.DK_C<>null()
      || DK_C.use(ref_name(DK.DK_C));
         DK_C.seek(DK.DK_C);
         M_ATR.seek(DK_C.M_ATR)
      || DK_C.blank(1);
         M_ATR.blank(1)
      ?}
   || DK_C.blank(1);
      M_ATR.blank(1)
   ?};
   KARO.display();
   M_ATR.cntx_pop();
   ND.cntx_pop();
   DK_C.cntx_pop();
   DK.cntx_pop()
|| DK_C.blank(1);
   M_ATR.blank(1);
   KARO.display()
?};
VAR1.NAZWISKO:=_nazw;
KARO.win_edit(_edit);
1


\karps_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po odzwiezeniu __KARPS
::  OLD: \karps_af/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
params_exec('karow_prfx','wyp_head',VAR.TRYBRODZ,VAR.TRYBPRAC);
::KARO.first();
KARO.hdr_sel();
params_set(params_get());
grp_disp(KARO,'WER_R',1,0);
~~


\karps_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(P,'WYP_KARO')
|| '#disable'
|| params_set(params_get());
   _var:=VAR.TRYBRODZ;
   VAR.TRYBRODZ:=1;
   {? _var<>VAR.TRYBRODZ
   || {? exec('reload_karms','wyp_head',P.ref(),0)
      || params_exec('uzu_c_karms','wyp_head',0)
      ?}
   ?};
   params_exec('stan_c_b','wyp_head')
?}


\karms_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(P,'WYP_KARO')
|| '#disable'
|| params_set(params_get());
   _var:=VAR.TRYBRODZ;
   VAR.TRYBRODZ:=0;
   {? _var<>VAR.TRYBRODZ
   || {? exec('reload_karms','wyp_head',P.ref(),1)
      || params_exec('uzu_c_karms','wyp_head',1)
      ?}
   ?};
   params_exec('stanmc_b','wyp_head')
?}


\karo_disa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: PO wyswietleniem rekordu karo
::  OLD: \karo_disa/wypkaro2.fml
::----------------------------------------------------------------------------------------------------------------------
1


\karorw_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord przed KARO typ W w oknie wg MGRP
::   WE: _a - ostatni rekord
::   WY: kolor
::  OLD: \karorw_rb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
HELP.RODZO:=null();
exec('obl_zwr4w','wyp_head');
ZKARO.KAROW:=KARO.ref();
DK.cntx_psh();
ND.cntx_psh();
{? KARO.DK<>null()
|| DK.use(8+$KARO.DK);
   ND.use(8+$KARO.DK().N);
   {? DK.DK_C<>null
   || DK_C.use(8+$DK.DK_C);
      DK_C.seek(DK.DK_C);
      M_ATR.seek(DK_C.M_ATR)
   ?}
?};
DK.cntx_pop();
ND.cntx_pop();
{? _a || exec('karo_grayed','wyp_head') ?};
Color.rekprzed('KARO#01#00')


\obl_zwr4w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Obliczenie pol ZKARO.ILZWR ZKARO.ILZUZ dla biezacego rekordu KARO
::  OLD: \obl_zwr4w/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::obliczenie rozliczenia
::UWAGA: tu nie wolno robic ZKARO.blank()
KARO.cntx_psh();
KARO.index('ZWROTY'); KARO.prefix(#KARO.ref());
ZKARO.ILZWR:=ZKARO.ILZUZ:=0;
{? KARO.first()
|| {!
   |? {? KARO.STATUS<>'N' & KARO.STATUS<>'Z' || {? KARO.TYP='Z' || ZKARO.ILZWR+=KARO.IL || ZKARO.ILZUZ+=KARO.IL ?} ?};
      KARO.next()
   !};
   ZKARO.DATA:=KARO.DATA
|| ZKARO.DATA:=date(0,0,0)
?};
KARO.cntx_pop();
~~


\karorw_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord po KARO typ W w oknie wg MGRP
::  OLD: \karorw_ra/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::sprawdzenie wypelnienia pol
_odp:='';
{? VAR1.NAZWISKO=''
|| FUN.emsg('Należy wskazać pracownika.'@);
   _odp:='NAZWISKO'
?};
{? _odp=''
|| _odp:=__CHK.record(KARO,,'M','DATA','IL')
?};
{? _odp='' & KARO.TYP='W' & KARO.SRDK=''
|| FUN.emsg('Należy wskazać dostawę.'@);
   _odp:='DOST'
?};
{? _odp='' & (KARO.M().MGRP<>KARO.MGRP)
|| {? VAR.TRYBRODZ=1
   || FUN.emsg('Wskazany materiał nie odpowiada temu rodzajowi wyposażenia.'@);
      _odp:='KTM'
   || KARO.MGRP:=KARO.M().MGRP
   ?}
?};
{? _odp='' & (~exec('karo_chkatr','wyp_head'))
|| _odp:='M'
?};
{? _odp=''
||
   {? KARO.IL>0
   ||
      exec('zkaro_set_ctril','wyp_head');
:: dopuszczenie wartosci nie wiekszej od ZKARO.IL gdy dziala kontrola ilosci na poziomie globalnym i MGRP
      {? (KARO.IL>ZKARO.IL) & (KARO.MGRP().CTRLIL<>'N') & (exec('get','#params',700510,2,null())='T')
      || FUN.info('Podana ilość spowoduje przekroczenie normatywu.'@);
         KARO.IL:=ZKARO.IL;
         _odp:='IL'
      || M.cntx_psh();
         {? KARO.TYP='W' & KARO.M<>null() & KARO.M().M_ATR<>null()
         ||
:: Sprawdzenie, czy środek trwały powiązany z dostawą wyposażenia jest wciąż w eksploatacji
            _srsr:=exec('atr_get_srsr','mat_atr',KARO.M().M_ATR);
            {? exec('FindAndGet','#table',SRSR,_srsr,,"SRSR.DE<=KARO.DATA & SRSR.DES>=KARO.DATA",0)
            || FUN.info('Wyposażenie powiązane jest ze środkiem trwałym, który nie znajduje się w eksploatacji '
                        'w dniu wystawienia dokumentu.'@);
               _odp:='M'
            ?}
:: Sprawdzenie, czy środek trwały nie jest skreślony z ewidencji
         |? (KARO.ZWROT='B') | (#KARO.DATAZ)
         ||
::       sprawdzenie poprawnosci formalnej danych w polach
::       czy prawidlowo podano daty
            _ok:={? (KARO.ZWROT='B') | (KARO.DATA<KARO.DATAZ)
                 || {? KARO.ZWROT='B' || KARO.DATAZ:=date(0,0,0); KARO.TOLER:=0 ?};
                    1
                 || FUN.emsg('Błędnie podana data przewidywanego zużycia. Musi być większa od daty pobrania.'@);
                    _odp:='DATAZ';
                    0
                 ?};
            {? _ok
            ||
               _ok:=exec('karo_chkatr','wyp_head');
::          jezeli atrybuty sie nie zgadzaja, to wskazanie pola, do ktorego powrot
               _odp:={? _ok
                     || ''
                     ||
::                   jezeli nie moze zmienic materialu to skok do RODZO, jezeli z polecenia to do IL
                        {? exec('get','#params',6511,2,OPERATOR.USER)='N'
                        || {? KARO.PWOPOZ
                           || 'IL'
                           || 'MGRP'
                           ?}
                        || 'M'
                        ?}
                     ?}
            ?}
         || _odp:='DATAZ'
         ?};
         M.cntx_pop()
      ?}
   || FUN.emsg('Ilość nie może być ujemna.'@);
      _odp:='IL'
   ?}
?};
{? _odp='' & VAR1.DOST>KARO.DATA
|| FUN.emsg('Data wydania nie może być wcześniejsza od daty dostawy.'@);
   _odp:='DATA'
?};
::{? _odp=''
::|| _karo_stan.find_key(#(KARO.M));
::   exec('karow_prfx','wyp_head',VAR.TRYBRODZ,VAR.TRYBPRAC)
::?};
_odp


\karow_sro_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: grupa przed szybkigo automatycznego rozliczenia pozycji KARO
::       akcja z menu KARO.KARO_R
::   WY; 0/1 - czy mozna kontynuowac
::  OLD: \karow_sro_gb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy rozliczyć zaznaczone pozycje?'@)
||
:: w przypadku akcji grupowej przygotowanie obiektu komunikatow i danych do kontroli ilosci
   exec('ini_kom','#message','Dodawanie pozycji do kartoteki');
   1
|| 0
?}


\karow_sro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Szybkie automatyczne rozliczenie biezacej pozycji KARO
::  OLD: \karow_sro/wypkaro.fml
::   WE: [_a] - KARO.ref - wydanie do rozliczenia
::----------------------------------------------------------------------------------------------------------------------
_karo:=null();
_odp:=exec('karow_srochk','wyp_head');
{? _odp>0
|| {? (KARO.sel_size() | FUN.ask('Czy utworzyć zwrot dla tej pozycji?'@))
   || _karo:=exec('karow_sroadd','wyp_head');
      _odp:=(_karo<>null())
   || _odp:=-4
   ?}
?};
_kom:=exec('karo_sr_kom','wyp_head',_odp);
{? KARO.sel_size()
|| exec('add_kom','#message','Pozycja z dnia %1 na ilość %2 - %3.'@[$KARO.DATA,form(KARO.IL,,KARO.M().DOKL),_kom]
    ,{? _odp>0 || 117 || 14 ?})
|| {? _kom<>'' || FUN.info(_kom) ?}
?};
_karo


\karow_srochk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Szybkie automatyczne rozliczenie biezacej pozycji KARO
::       wykonywane tylko dla pozycji zaakceptowanej nierozliczonej
::  OLD: \karow_srozl/wypkaro.fml
::   WY: 1 - rozliczenie utworzone,
::       0 - nie utworzone,
::      -1 - nie utworzone bo poz niezaakceptowana
::      -2 - nie utworzone bo poz rozliczona
::      -3 - nie utworzone bo sa niezaakceptowane pozycje rozliczona
::----------------------------------------------------------------------------------------------------------------------
exec('obl_zwr4w','wyp_head');
_il:=exec('roznica','wyp_head');
_odp:=0;
{? (KARO.STATUS<>'N' & KARO.STATUS<>'Z') & (~exec('karocroz','wyp_head')) & (_il>0)
||
   {? exec('czy_rozl4pos','wyp_head','N')
   || _odp:=-3
   || _odp:=1
   ?}
|| _odp:={? KARO.STATUS='N' | KARO.STATUS='Z' || -1 || 1 ?}
?};
_odp


\karow_sroadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Dodaje zwrot wyposażenia do bieżącego wydania
::----------------------------------------------------------------------------------------------------------------------
_ref:=KARO.ref();
_il:=exec('roznica','wyp_head');
_srdk:=KARO.SRDK;
_prdk:=KARO.PRDK;
_dk:=KARO.DK;
_ile:=KARO.IL;
KARO.cntx_psh(); KARO.clear();
{? KARO.seek(_ref)
|| _wyd:=KARO.GENDK='' & KARO.TYP='W';
   _refw:=_ref;
   KARO.KARO:=#_ref;
   KARO.TYP:='Z';
   KARO.DATA:=date();
   KARO.IL:=_il;
   KARO.STATUS:='Z';
   KARO.SRDK:=_srdk;
   KARO.PRDK:=_prdk;
   KARO.DK:=_dk;
   KARO.GENDK:='';
   KARO.KTO:=OPERATOR.USER;
   _odp:=KARO.add();
   {? _odp
   || _ref:=KARO.ref()
   ?};
   {? _odp & _wyd
   || _nrk:=exec('update','rezerwacje','KARO',_refw,KARO.MG,KARO.M,0,_srdk,,,0);
      exec('aktu_rez','rezerwacje',KARO.M,_nrk,_ile);
      exec('obl_stan','magazyn_stan',KARO.M,1,KARO.MG)
   ?}
?};
KARO.cntx_pop();
exec('obl_zwr4w','wyp_head');
_ref


\karo_sr_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrocenie komunikatu o powodzeniu lub nie rozliczenia pozycji na podstawie wartosci zwracanej przez karow_srozl
::  OLD: \karo_sr_kom/wypkaro.fml
::   WE: _a - indeks komunikatu
::   WY: komunikat
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=-100 ?};
{? type_of(_a)<>type_of(0) || &_a;_a:=-100 ?};
{? _a>0 || 'Dodano zwrot wyposażenia.'
|? _a=0 || 'Nie udało się dodać zwrotu wyposażenia.'
|? _a=-1 || 'Wydanie nie jest zaakceptowane.'
|? _a=-2 || 'Wyposażenie zostało wcześniej zwrócone.'
|? _a=-3 || 'Istnieją niezaakceptowane zwroty do wydania.'
|| ''
?}


\karocroz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Czy pozycja wydania w KARO jest rozliczona
::  OLD: \karocroz/wypkaro.fml
::   WY: odpowiedz: 1 - gdy rozliczona, 0 gdy nie
::----------------------------------------------------------------------------------------------------------------------
::jezeli pozycja nie wymaga zwrotu (N) i minie data zwrotu, to pozycja jest uznawana za rozliczona
{? (KARO.ZWROT='N')&((KARO.DATAZ-KARO.TOLER)<date()) || 1 || exec('roznica','wyp_head',1)=0 ?}


\karow_sro_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Grupa po zzybkigo automatycznego rozliczenia pozycji KARO
::       wykonywane tylko dla pozycji zaakceptowanej nierozliczonej
::  OLD: \karow_sro_ga/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('end_kom','#message');
~~


\karorw_dpua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po akcjach edycyjnych w oknie KARO WER_R
::  OLD: \karorw_dpua/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
:: odświerzenie wartości w rekordzie _karo_stan
params_exec('stan4pos','wyp_head');
~~


\karorw_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Popraw przed KARO typ W w oknie wg MGRP
::   WY: 1/0 - czy mozna
::  OLD: \karorw_pb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('czy_akc','wyp_head',1)
|| exec('zkaro_set_ctril','wyp_head');
   KARO.win_edit('RED_WYD');
   HELP.MGRP:=KARO.MGRP;
::   ZKARO.RODZORED:=0;
:: wykorzystanie zmiennej do przechowania poczatkowej wartosci pola IL
:: w celu wyliczenia poprawnej ilosci niewykorzystanej z polecenia
   ZNADZOR.ILG:=KARO.IL;
   HELP.POP:=1;
   HELP.IL:=KARO.IL;
   HELP.RDK:=BIT.sqlint(KARO.SRDK);
   HELP.NDK:=form(8+KARO.SRDK);
   exec('FindAndGet','#table',DK,KARO.SRDK,,"VAR1.DOST:=DOST");
   {? KARO.DK<>null()
   || DK.use(ref_name(KARO.DK));
::      DK.cntx_psh();
      DK.prefix();
      {? DK.seek(KARO.DK)
      || {? DK.N<>null || ND.use(ref_name(DK.N))?};
         {? DK.DK_C<>null || DK_C.use(ref_name(DK.DK_C)) ?}
      ?}
::      DK.cntx_pop()
   ?};

   HELP.MOD_IND:=KARO.M;

   HELP.MRSQL:=KARO.SRDK;
   {? KARO.M<>null()
   || POMOC.MGR:=KARO.M().MGR;
      POMOC.MGRW:=KARO.M().MGR
   || POMOC.MGR:=KARO.MGRP().MGR;
      POMOC.MGRW:=KARO.MGRP().MGR
   ?};
   1
|| 0
?}


\karorw_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuń przed KARO typ W w oknie wg MGRP
::   WY: 1/0 - czy można
::  OLD: \karorw_ub/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
~exec('czy_akc','wyp_head',1) &
~exec('czy_zwroty','wyp_head',1) &
~exec('czy_dok','wyp_head',1) &
FUN.ask('Czy usunąć bieżące wydanie?'@)


\karor_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed dolacz KARO typ R/Z w oknie wg MGRP
::  OLD: \karor_db/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZKARO.KAROW<>null()
||
   {? ZKARO.KAROW().STATUS<>'N' & ZKARO.KAROW().STATUS<>'Z'
   || _il:=exec('obl_zwr','wyp_head','W');
      {? _il<ZKARO.KAROW().IL
      || KARO.win_edit('RED_ZWR');
         1
      || FUN.emsg('Do wydania wprowadzono już zwroty na całą wydaną ilość'@);
         0
      ?}
   || FUN.emsg('Pozycja wydania nie jest zaakceptowania, nie mozna wprowadzać rozliczeń'@);
      0
   ?}
|| FUN.emsg('Brak pozycji wydania. Nie można wprowadzić rozliczenia.'@);
   0
?}


\karor_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Dolacz KARO typ R/Z w oknie wg MGRP
::  OLD: \karor_dol/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::najpierw pobranie niezbednych danych z pozycji wydania
params_set(params_get());
_res:=null();
KARO.cntx_psh();
M.cntx_psh();
exec('set_r_border','wyp_head');
_p:=ZKARO.KAROW().P;
_mgrp:=ZKARO.KAROW().MGRP;
_mgr:=ZKARO.KAROW().M().MGR;
_mm:=ZKARO.KAROW().M;
_ktm:=ZKARO.KAROW().M().KTM;
_kh:=ZKARO.KAROW().KH;
::zawsze powrot na to samo stanowisko z ktorego wyszlo wydanie
_mg:=ZKARO.KAROW().MG;
_dk:=ZKARO.KAROW().DK;
_srdk:=ZKARO.KAROW().SRDK;
_prdk:=ZKARO.KAROW().PRDK;
_dkc:=ZKARO.KAROW().DK_C;
_rdkc:=ZKARO.KAROW().RDKC;
_ile:=ZKARO.KAROW().IL;
_refw:=ZKARO.KAROW;
_wyd:=ZKARO.KAROW().GENDK='' & ZKARO.KAROW().TYP='W';
M.cntx_pop();
KARO.cntx_pop();
::teraz podstawienie danych do nowej pozycji
KARO.blank();
KARO.P:=_p;
POMOC.MGRW:=HELP.MGR:=_mgr;
KARO.MGRP:=_mgrp;
VAR1.M:=_ktm;
KARO.M:=_mm;
KARO.KH:=_kh;
KARO.MG:=_mg;
KARO.IL:=ZKARO.IL;
KARO.TYP:='Z';
KARO.KARO:=#ZKARO.KAROW;
KARO.DK:=_dk;
KARO.SRDK:=_srdk;
KARO.PRDK:=_prdk;
KARO.DK_C:=_dkc;
{? KARO.DK_C<>null()
|| DK_C.cntx_psh();
   _srsr:=exec('atr_get_srsr','mat_atr',KARO.DK_C().M_ATR);
   {? _srsr<>null()
   || KARO.RSRSR:=$_srsr
   ?};
   DK_C.cntx_pop()
?};
KARO.RDKC:=_rdkc;
DK.cntx_psh();
ND.cntx_psh();
DK_C.cntx_psh();
M_ATR.cntx_psh();
{? KARO.SRDK<>''
|| DK.clear();
   DK_C.clear();
   M_ATR.clear();
   _msk0:=DK.name();
   {? DK.seek(KARO.SRDK,8+KARO.SRDK)
   || ND.use(ref_name(DK.N));
      DK_C.use(DK.DK_C().name());
      DK_C.seek(DK.DK_C);
      M_ATR.seek(DK_C.M_ATR)
   || DK.use(_msk0);
      DK_C.blank(1);
      M_ATR.blank(1)
   ?}
|| DK_C.blank(1);
   M_ATR.blank(1)
?};
{? KARO.edit("exec('karorr_ra','wyp_head')")
|| KARO.STATUS:='Z';
   _odp:=KARO.add();
   _res:=KARO.ref();
   _il:=KARO.IL;
   {? _odp & _wyd
   || _opc:={? (_ile-_il)=0 || 0 || 3 ?};
      _nrk:=exec('update','rezerwacje','KARO',_refw,KARO.MG,KARO.M,_ile-_il,_srdk,,,_opc);
      exec('aktu_rez','rezerwacje',KARO.M,_nrk,_ile);
      exec('obl_stan','magazyn_stan',KARO.M,1,KARO.MG)
   ?}
?};
DK.cntx_pop();
ND.cntx_pop();
DK_C.cntx_pop();
M_ATR.cntx_pop();
_res


\karor_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed popraw KARO typ R/Z w oknie wg MGRP
::  OLD: \karor_pb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('set_r_bord_cntp','wyp_head');
~exec('czy_akc','wyp_head',1)


\karor_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed usun KARO typ R/Z w oknie wg MGRP
::  OLD: \karor_ub/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
~exec('czy_akc','wyp_head',1) & FUN.ask('Czy usunąć bieżący zwrot?'@)


\karorr_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord przed KARO typ R/Z w oknie wg MGRP
::  OLD: \karor_rb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a || exec('karo_grayed','wyp_head') ?};
Color.rekprzed('KARO#02#00')


\karorr_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord po KARO typ R/Z w oknie wg MGRP
::  OLD: \karorr_ra/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::w ZKARO.DATA - data wypozyczenia
::w ZKARO.IL - ilosc pozostala na pozycji
_odp:='';
{? VAR1.NAZWISKO=''
|| FUN.emsg('Należy wskazać pracownika.'@);
   _odp:='NAZWISKO'
?};
{? _odp=''
|| _odp:=__CHK.record(KARO,,'M','IL','DATA')
?};
{? _odp=''
||
   {? KARO.DATA<ZKARO.DATA
   || FUN.emsg('Data zwrotu nie może być wcześniejsza od daty wydania.'@);
      _odp:='DATA'
   ||
      {? KARO.IL>ZKARO.IL
      || FUN.emsg('Zwracana ilość nie może być większa od wydanej.'@);
         _odp:='IL'
      ||
::       Jeżeli przedwczesny zwrot to protokół i powód muszą być podane
::       Jeśli dostępna jest wtyczka, to numer protokołu (o ile jest wymagany) zostanie wygenerowany automatycznie
         {? KARO.PROTOKOL='' & KARO.TYP='P'
         || _protokol:=Plugin.run('KARO_PROTOKOL_001','CHK');
            {? type_of(_protokol)<>type_of('')
            || _protokol:=''
            ?};
            {? _protokol<>''
            || KARO.PROTOKOL:=_protokol;
               win_disp()
            ?};
            _odp:=__CHK.record(KARO,,'POWOD','PROTOKOL')
         || _odp:=''
         ?}
      ?}
   ?}
?};
_odp


\karm_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Dolaczanie rekordu do KARO za posrednictwem __KARPS
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
KARO.efld_opt('RED_WYD','mark=1',,'M','KTM');
KARO.clear();
KARO.blank();
KARO.P:=P.ref();
_res:=null();
POMOC.MGRW:=null();
VAR1.DOST:=date(0,0,0);
ATR.MJS:='KARO';
HELP.POP:=0;
HELP.MGR:=null();
KARO.DK:=null();
DK_C.blank(1);
DK.blank(1);
ND.blank(1);
M_ATR.blank();
::mozna wydac tylko dla okreslonego P lub KH
{? (KARO.P<>null())
||
   KARO.win_edit('RED_WYD');
   KOMM.init(,,'Dołączanie wydania wyposażenia');
   {? KARO.edit("exec('karorw_ra','wyp_head')")
   || KARO.STATUS:='Z';
      KARO.cntx_psh();
      KARO.clear();
      {? KARO.add() & KARO.TYP='W'
      || _nrk:=exec('update','rezerwacje','KARO',KARO.ref(),KARO.MG,KARO.M,KARO.IL,KARO.SRDK,,,3);
         exec('aktu_rez','rezerwacje',KARO.M,_nrk,KARO.IL);
         exec('obl_stan','magazyn_stan',KARO.M,1,KARO.MG)
      ?};
      _res:=KARO.ref();
      KARO.cntx_pop()
   ?}
|| FUN.emsg('Dla tej pozycji nie można wydać wyposażenia.'@)
?};
KARO.cntx_pop();
params_set(params_get());
{? _res<>null()
|| KARO.cntx_psh();
   KARO.prefix();
   KARO.seek(_res);
   _brak:=0;
   _mref:=0;
   {? VAR.TRYBRODZ
   || {? ~params_get(1).env_karo.STANG.size() | ~exec('czy_na_stanie','wyp_head')
      || _brak:=1
      ?}
   || {? ~params_get(1).env_karo.STAN.size() | ~exec('czy_na_stanie','wyp_head')
      || _brak:=1
      ?}
   ?};
   _mgrp:=#KARO.MGRP;
   _material:=#KARO.M;
   KARO.cntx_pop();
   {? _brak
   || {? VAR.TRYBRODZ
      || _stan:=params_get().env_karo.STANG;
         {? exec('reload_karms','wyp_head',P.ref(),0)
         || exec('uzu_c_karms','wyp_head',0)
         ?};
         _stan.blank(1);
         _stan.MGRP:=_mgrp;
         _stan.find_rec();
         grp_disp(_stan,params_get().env_karo.WERG,1)
      || _stan:=params_get().env_karo.STAN;
         {? exec('reload_karms','wyp_head',P.ref(),1)
         || exec('uzu_c_karms','wyp_head',1)
         ?};
         _stan.blank(1);
         _stan.M:=_material;
         _stan.find_rec();
         grp_disp(_stan,params_get().env_karo.WER,1)
      ?}
   ?};
   KARO.seek(_res)
?};
_res


\karoildokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Dokladnosc wyswietlania/redagowania KARO.IL
::  OLD: \karoildokl/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
'_prec='+$KARO.M().DOKL


\karo_il_df
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Format wyswietlania KARO.IL
::  OLD: \karo_il_df/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
'out'+exec('karoildokl','wyp_head')


\karo_il_ef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Format redagowania KARO.IL
::  OLD: \karo_il_ef/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
'in'+exec('karoildokl','wyp_head')


\karo_sympol_bv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed wyswietleniem ZKARO.SYMPOL - nadanie wartosci temu polu dla biezacego KARO
::  OLD: \karo_sympol_bv/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
fld({? KARO.PWOPOZ<>null() || KARO.PWOPOZ().POLWO().SYM || ''?});
~~


\karo_os_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Dolaczanie rekordu do KARO za posrednictwem __KARPS
::  OLD: \karo_os_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
1


\karo_da_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem KARO.DATA
::  OLD: \karo_da_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::dla okna wydan
{? KARO.win_edit('?')='RED_WYD'
||
:: zapamietanie pierwotnej liczby dni uzytkowania i poprzedniej wartosci pola
   ZKARO.DATA:=KARO.DATA;
   {? KARO.DATAZ<>date(0,0,0) & KARO.DATA<>date(0,0,0) || ZKARO.CZAS:=KARO.DATAZ-KARO.DATA ?}
?};
1


\karo_da_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniem KARO.DATA
::   WY: 0/1 mozna opuscic pole
::  OLD: \karo_da_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()<>date(0,0,0)
|| {? ZKARO.CZAS=0
   || ZKARO.CZAS:=1
   ?};
::  kontrola dla wydania
   {? KARO.win_sel('?')='WER_R'
   ||
::    jezeli pozycja pochodzi z polecenia to data wydania nie moze byc wczesniejsza od zadanej w poleceniu
      {? (KARO.PWOPOZ<>null()) & (KARO.PWOPOZ().POLWO().DATA_W>KARO.DATA)
      ||
         FUN.emsg('Data wydania nie może być wcześniejsza niż zadana w poleceniu'@);
         KARO.DATA:=KARO.PWOPOZ().POLWO().DATA_W
      ?};
::    ewentualne skorygowanie daty przewidywanego zuzycia
      {? KARO.ZWROT<>'B'
      || {? KARO.DATAZ<=KARO.DATA
         || KARO.DATAZ:=KARO.DATA+ZKARO.CZAS
         ||
::          korekta daty zwrotu, a jesli z polecenia to utrzymanie narzuconego czasu uzytkowania
            {? (KARO.DATA<>ZKARO.DATA)
               & (KARO.PWOPOZ<>null() | FUN.ask('Czy przesunąć datę przewidywanego zużycia o taką samą liczbę dni?'@))
            || KARO.DATAZ:=KARO.DATA+ZKARO.CZAS
            ?}
         ?}
      ?}
:: kontrola dla zwrotu
   |? KARO.win_sel('?')='WERROZL'
   || {? KARO.DATA<ZKARO.DATA
      || FUN.emsg('Data zwrotu nie może być wcześniejsza od daty wydania.'@);
         KARO.DATA:=ZKARO.DATA
      ?}
:: zabezpieczenie przed nieznanym oknem - blokada wyjscia z pozycji
::   || KARO.DATA:=date(0,0,0)
   ?}
?};
{? KARO.DATA=date(0,0,0)
|| FUN.emsg('Data musi być podana.'@);
   0
||
:: kontrola inwentaryzacji
   _time:=exec('spr_dttm','magazyn_inw',KARO.MG,KARO.DATA,1);
   {? (*_time)>(*time(23,59,0)) || _time:=time(0,0,0) ?};
   {? exec('sprd_inw','magdok_wspolne',KARO.DATA,KARO.MG,1,'',null(),_time)
   || 1
   || 0
   ?}
?}


\karo_dz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniu KARO.DATAZ
::       Niedopuszczenie do wyjscia z pola gdy wartosc nieprawidlowa
::   WY: 0/1 mozna opuscic pole
::  OLD: \karo_dz_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.DATAZ>KARO.DATA
|| 1
|| {? KARO.ZWROT='B'
   || KARO.DATAZ:=date(0,0,0); KARO.TOLER:=0;
     1
   || FUN.emsg('Data zwrotu musi być późniejsza od daty wydania.'@);
      0
   ?}
?}


\karo_il_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem KARO.IL
::  OLD: \karo_il_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\karo_il_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniu KARO.IL
::   WY: 1/0 czy mozna opuscic pole
::  OLD: \karo_il_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.IL<0 || KARO.IL:=0 ?};

{? KARO.IL>0 & KARO.M<>null() & KARO.MG<>null() & ~((';ZP'*KARO.TYP)>1)
|| exec('obl_stan','magazyn_stan',KARO.M,1,KARO.MG);
   {? KARO.TYP='W' & KARO.SRDK<>''
   || _rdk:=BIT.sqlint(KARO.SRDK);
      _ndk:=form(8+KARO.SRDK);
      _stan_sc:={? HELP.POP & _rdk=HELP.RDK & _ndk=HELP.NDK || HELP.IL || 0 ?}
               +exec('obl_stsc','magazyn_stan',_rdk,_ndk,KARO.MG,KARO.M);
      {? _stan_sc<KARO.IL
      || FUN.info('Podano ilość większą od aktualnie dostępnej ilości wskazanej dostawy w magazynie %1.'
          '\nAktualna ilość dostępna to: %2 %3.'@[KARO.MG().SYM,form(_stan_sc,,KARO.M().DOKL),KARO.M().J().KOD]);
         KARO.IL:=_stan_sc;
         return(0)
      ?}
   |? KARO.IL>BEER.SD
   || FUN.info('Podano ilość większą od aktualnie dostępnej ilości w magazynie %1.'
               '\nAktualna ilość dostępna to: %2 %3.'@[KARO.MG().SYM,form(BEER.SD,,KARO.M().DOKL),KARO.M().J().KOD]);
      KARO.IL:=BEER.SD;
      return(0)
   ?}
?};

{? KARO.IL<>1 & KARO.M<>null() & (_bnftt:=exec('BNFTT4M','wyp_head',KARO.M);_bnftt<>null())
|| FUN.info('Podano ilość różną od %1, a wydawane wyposażenie jest benefitem. Operacja nie jest możliwa.'@['1']);
   return(0)
?};

::w zaleznosci od okna wertowania rozna kontrola wartosci pola
{? KARO.win_sel('?')='WERROZL'
||
:: kontrola w przypadku redakcji rozliczen
   {? (KARO.IL>ZKARO.IL)
   || FUN.info('Podana ilość nie może przekroczyć ilości pozostałej z tego wydania.'@);
      KARO.IL:=ZKARO.IL;
      return(0)
   ?}
|? KARO.win_sel('?')='WER_R'
||
:: kontrola w przypadku wydan wg rodzajow
:: jezeli pozycja pochodzi z polecenia to ilosc nie moze byc > od zadanej w poleceniu
:: zmienna ZNADZOR.ILG przechowuje KARO.IL z ostatniego zapisu rekordu w bazie danych
:: biezaca KARO.IL moze byc inna, gdy rekord modyfikowane ale jeszce przed put()
   {? KARO.PWOPOZ<>null()
   ||
      _ilpozost:=KARO.PWOPOZ().IL+ZNADZOR.ILG-exec('licz_wyd_pwopoz','wyp_polwo',KARO.PWOPOZ);
      {? _ilpozost<KARO.IL
      ||
         FUN.info('Wydana ilość nie może być większa niż pozostała w poleceniu.'@);
         KARO.IL:=_ilpozost;
         return(0)
      ?}
   ?};
:: dopuszczenie wartosci nie wiekszej od ZKARO.IL gdy dziala kontrola ilosci na poziomie globalnym i MGRP
   {? (KARO.IL>ZKARO.IL) & (KARO.MGRP().CTRLIL<>'N') & (exec('get','#params',700510,2,null())='T')
   || FUN.info('Podana ilość spowoduje przekroczenie normatywu.'@);
      KARO.IL:=ZKARO.IL;
      return(0)
   ?}
?};
1


\karo_ktm_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed redakcją KARO.MGRP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=KARO & KARO.TYP<>'W'
|| {? type_of(params_get())>100 & var_pres('env_karo',params_get())
   || params_get().env_karo.MAT_EDIT
   || 1
   ?}
|| 1
?}


\karo_ktm_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.30]
:: OPIS: Po redagowaniu pola KTM na KARO
::  OLD: \karo_ktm_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? VAR1.M<>''
|| M.cntx_psh();
   M.index('MATKTM');
   M.prefix();
   {? M.find_key(VAR1.M)
   || _res:=1;
      {? KARO.M<>M.ref()
      || KARO.M:=M.ref();
         KARO.MGRP:=M.MGRP;
         POMOC.MGRW:=M.MGR;
         VAR1.M:=M.KTM;
         {? (KARO.TYP='Z' | KARO.TYP='P') & exec('stan_ae','wyp_head')=''
         || _res:=0
         ?}
      ?};
      {? KARO.MGRP=null()
      || KARO.MGRP:=M.MGRP
      ?};
      {? POMOC.MGRW=null()
      || POMOC.MGRW:=M.MGR
      ?};
      {? KARO.SRDK<>''
      || DK.cntx_psh();
         DK.clear();
         DK_C.cntx_psh();
         DK_C.clear();
         M_ATR.cntx_psh();
         M_ATR.clear();
         {? DK.seek(KARO.SRDK,8+KARO.SRDK)
         || DK_C.use(DK.DK_C().name());
            DK_C.seek(DK.DK_C);
            M_ATR.seek(DK_C.M_ATR)
         || DK_C.blank(1);
            M_ATR.blank(1)
         ?};
         M_ATR.cntx_pop();
         DK_C.cntx_pop();
         DK.cntx_pop()
      || DK_C.blank(1);
         M_ATR.blank(1)
      ?};
      exec('zkaro_set_ctril','wyp_head');
      KARO.IL:=ZKARO.IL;
      KARO.DATAZ:=KARO.DATA+ZKARO.CZAS;
      KARO.TOLER:=ZKARO.TOLER
   || FUN.emsg('Podany tekst nie jest prawidłowym indeksem materiałowym.'@);
      _res:=0
   ?};
   M.cntx_pop()
|| KARO.M:=null();
::   KARO.MGRP:=null();
::   POMOC.MGRW:=null();
   KARO.SRDK:='';
   DK_C.blank(1);
   M_ATR.blank(1);
   _res:=1
?};
{? _res || exec('karo_il_ae','wyp_head') ?};
_res


\stan_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.30]
:: OPIS: Po redakcji KTM podczas zwrotu i likwidacji
::  OLD: \stan_ae/wypkaro2.fml
::   WE: [_a]
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
P.cntx_psh();
OSOBA.cntx_psh();
OSOBA.clear(); OSOBA.seek(KARO.P().OSOBA);
{? exec('cr_rso','wyp_head',,,,,,2)
||
:: tworzenie odpowiedniego indeksu
   _ind:=__KARRSO.ndx_tmp(,,'M',,);
   __KARRSO.index(_ind);
   __KARRSO.prefix(#KARO.M);
   {? __KARRSO.first()
::      _ref:=__KARRSO.ref()
   || VAR1.M:=__KARRSO.KTM;
      {? M.seek(__KARRSO.M,)
      || KARO.M:=M.ref
      ?};
      _wyn:=__KARRSO.KTM;
      KARO.cntx_psh();
      {? KARO.seek(__KARRSO.KARO,)
      || ZKARO.KAROW:=KARO.ref
      || ZKARO.KAROW:=null
      ?};
      KARO.cntx_pop();
      KARO.IL:=__KARRSO.IL;
      ZKARO.IL:=__KARRSO.IL
   || FUN.info('Brak danego wyposażenia na stanie osoby.'@);
      _wyn:='';
      KARO.M:=null();
      VAR1.M:=''
   ?};
   __KARRSO.ndx_drop(_ind)
|| FUN.info('Stan osoby jest pusty.'@)
?};
exec('drop_rso','wyp_head');
OSOBA.cntx_pop();
P.cntx_pop();
_wyn


\karo_ktm_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: F3 dla pola materiał na wydaniu i zwrocie wyposażenia
::  OLD: \stanf3/wypkaro2.fml
::  OLD: \karo_ktm_f3/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
:: Obsługa wydania w osobnej formule
{? cur_win(1,1)='RED_WYD'
|| _wyn:=exec('karo_ktm_f3_wyd','wyp_head');
   return(_wyn)
?};

_wyn:='';
{? KARO.P<>null()
||
   P.cntx_psh();
   OSOBA.cntx_psh();
   OSOBA.clear(); OSOBA.seek(KARO.P().OSOBA);
   _zkaroil:=ZKARO.IL;
   {? exec('cr_rso','wyp_head',,,,,,2)
   ||
:: tworzenie odpowiedniego indeksu
      _ind:=__KARRSO.ndx_tmp(,,'KOD',,);
      __KARRSO.index(_ind);
      _okno:=__KARRSO.mk_sel('Stan wyposażenia osoby: %1 %2'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE],,,'#wypstosmatr');
      __KARRSO.win_fld(_okno,,'KOD',,,20,,1);
      __KARRSO.win_fld(_okno,,'KTM',,,20,,1);
      __KARRSO.win_fld(_okno,,'N',,,40,,1);
      __KARRSO.win_fld(_okno,,'IL',,,7,,1);
      __KARRSO.win_act(_okno,0,'Formuła','Wybierz'@,,,,"sel_exit()",1);
      __KARRSO.win_sel(_okno);
      __KARRSO.fld_fml('IL','DISPLAY_FORMAT',
         "MGRP.cntx_psh(); MGRP.clear();
          _odp:='out_prec='+{? __KARRSO.MGRP & MGRP.seek(__KARRSO.MGRP,) || $exec('mgrp_m_dokl','wyp',MGRP.M) || '-1' ?};
          MGRP.cntx_pop(); _odp");
      {? KARO.MGRP<>null()
      || _ndx:=__KARRSO.ndx_tmp(,,'MGRP',,,'M',,,'DK_C',,,'DK_C',,);
         __KARRSO.index(_ndx);
         __KARRSO.prefix(#KARO.MGRP)
      |? KARO.MGRP=null() & POMOC.MGRW<>null
      || _ndx:=__KARRSO.ndx_tmp(,,'MGR',,,'MGRP',,,'M',,,'DK_C',,,'DK_C',,);
         __KARRSO.index(_ndx);
         __KARRSO.prefix(#POMOC.MGRW)
      ?};
      {? __KARRSO.select()
      ||
::      _ref:=__KARRSO.ref();
         VAR1.M:=__KARRSO.KTM;
         {? M.seek(__KARRSO.M,)
         || KARO.M:=M.ref()
         ?};
         _wyn:=__KARRSO.KTM;
         KARO.cntx_psh();
         _dk:=null();
         _srdk:='';
         _prdk:='';
         _dkc:=null();
         _rdkc:='';
         ZKARO.KAROW:=null();
         {? KARO.seek(__KARRSO.KARO,)
         || ZKARO.KAROW:=KARO.ref();
            _dk:=KARO.DK;
            _srdk:=KARO.SRDK;
            _prdk:=KARO.PRDK;
            _dkc:=KARO.DK_C;
            _rdkc:=KARO.RDKC
         ?};
         KARO.cntx_pop();
         KARO.DK:=_dk;
         {? KARO.DK<>null()
         || DK.use(ref_name(KARO.DK));
            DK.cntx_psh();
            DK.prefix();
            {? DK.seek(KARO.DK)
            || {? DK.N<>null() || ND.use(ref_name(DK.N))?};
               {? DK.DK_C<>null() || DK_C.use(ref_name(DK.DK_C)) ?}
            ?};
            DK.cntx_pop()
         ?};
         KARO.SRDK:=_srdk;
         {? KARO.SRDK<>''
         || DK.use(8+KARO.SRDK);
            DK.cntx_psh();
            DK.prefix();
            {? DK.seek(KARO.SRDK,8+KARO.SRDK)
            || {? DK.N<>null() || ND.use(ref_name(DK.N))?};
               {? DK.DK_C<>null() || DK_C.use(ref_name(DK.DK_C)) ?}
            ?};
            DK.cntx_pop()
         ?};
         KARO.PRDK:=_prdk;
         KARO.DK_C:=_dkc;
         {? KARO.DK_C<>null()
         || DK_C.cntx_psh();
            _srsr:=exec('atr_get_srsr','mat_atr',KARO.DK_C().M_ATR);
            {? _srsr<>null()
            || KARO.RSRSR:=$_srsr
            ?};
            DK_C.cntx_pop()
         ?};
         KARO.RDKC:=_rdkc;
         KARO.IL:=__KARRSO.IL;
         ZKARO.IL:=__KARRSO.IL
      || VAR1.M:=KARO.M().KTM;
         ZKARO.IL:=_zkaroil;
         ZKARO.KAROW:=null();
         _wyn:=VAR1.M
      ?};
      __KARRSO.ndx_drop(_ind)
   || FUN.info('Stan osoby jest pusty.'@)
   ?};
   exec('drop_rso','wyp_head');
   OSOBA.cntx_pop();
   P.cntx_pop()
|| FUN.info('Należy wskazać pracownika.'@)
?};
_wyn


\stan_c_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed obsluga okna stanu calkowitego
::       Prefiksowanie po wartosciach __KARPS.S=-1
::  OLD: \stan_c_b/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_karo_stang:=params_get().env_karo.STANG;
_karo_stan_ndxg:=params_get().env_karo.NDXGKOD;
_karo_stang.index(_karo_stan_ndxg);
_karo_stang.prefix(-1);
::_karo_stang.first();
~~


\karo_m_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem KARO.M
::  OLD: \karo_m_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.RODZ:='T';
M.win_dict('SLO_M');
M.actions('SLO_M','O:');
{? KARO.MGRP=null()
|| M.f_set('KTM',,'M.A=\'T\' AND M.RODZ=\'T\'')
|| M.f_set('KTM',,'M.A=\'T\' AND M.RODZ=\'T\' AND M.MGRP=:_a',KARO.MGRP)
?};
exec('get','#params',6511,2,OPERATOR.USER)='T' | fld()=null() | KARO.MGRP=null


\karo_m_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniu KARO.M
::   WE: 1/0 - czy mozna opuscic pole
::  OLD: \karo_m_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::sprawdzenie wypełnienia i jesli tak to zgodności rodzaju wyposazenia schematu atrybutow
M.actions('SLO_M','');
{? fld<>null()
|| {? KARO.M().MGRP=KARO.MGRP
   || exec('karo_chkatr','wyp_head')
   |? KARO.MGRP=null()
   || KARO.MGRP:=KARO.M().MGRP;
      exec('karo_mgrp_ae','wyp_head')
::      __KARPS.MGRP:=KARO.MGRP
   || FUN.emsg('Materiał nie należy do tej podgrupy materiałowej.'@);
      KARO.MGRP:=KARO.M().MGRP
   ?};
   M.f_clear();
   POMOC.MGRW:=KARO.M().MGR;
   HELP.MGR:=POMOC.MGRW
|| HELP.MGR:=POMOC.MGRW;
   1
?}


\karo_ro_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem KARO.MGRP
::   WY: 0/1 -czy edycja dozwolona
::  OLD: \karo_ro_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::czy pozycja nie pochodzi z polecenia i czy pole wolno redagowac
(KARO.PWOPOZ=null()) & ZKARO.RODZORED


\karo_mgrp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed redakcją KARO.MGRP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=KARO
|| {? type_of(params_get())>100 & var_pres('env_karo',params_get())
   || params_get().env_karo.MAT_EDIT
   || 1
   ?}
|| 1
?}


\karo_mgrp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniu KARO.MGRP
::       Jezeli zmieniony zostanie rodzo, to wszystko pozostale jest podstawiane wg wartosci dla tego MGRP
::   WY: 0/1 Czy mozna opuscic pole
::  OLD: \karo_ro_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_mref:=KARO.M;
{? KARO.TYP='W'
|| _zmiana:=0;
   _ok:={? 1
        ||
           {? ZKARO.MGRP<>KARO.MGRP
           || {? KARO.MGRP().TYLWPOL
              || FUN.emsg('Ten rodzaj wyposażenia może być wydany tylko na polecenie.'@);
                 0
              || _zmiana:=1;
                 exec('prep_ctril','wyp_head',P.ref());
                 _ctril:=exec('find_4_ctril','wyp_head',KARO.MGRP);
                 _max:=exec('max_il_ctril','wyp_head',_ctril,KARO.MGRP().CTRLIL);
                 _zwrot:=exec('zwrot_ctril','wyp_head',_ctril,KARO.MGRP().ZWROT);
                 _czas:=exec('czas_ctril','wyp_head',_ctril,KARO.MGRP().DCU);
                 _toler:=exec('toler_ctril','wyp_head',_ctril,_czas);
                 exec('drop_ctril','wyp_head');
::            mozna wydac tylko gdy rodzaj nie podlega kontroli ilosci
                 {? (KARO.MGRP().CTRLIL='N') | (exec('get','#params',700510,2,null())='N')
                 || KARO.IL:=0;
                    1
                 || {? (_ctril=1)|(_ctril=3)
                    || {? _max>0
                       || KARO.IL:=_max;
                          1
                       || FUN.emsg('Wydanie niemożliwe, gdyż ilość wydawana przekroczyłaby ilość zadaną w normatywie.'@);
                          0
                       ?}
                    || FUN.emsg('Nie występuje w normatywie pracownika.'@);
                       0
                    ?}
                 ?}
              ?}
           || 1
           ?}
        ||
           1
::         || FUN.emsg('Do tego rodzaju wyposażenia nie przypisano materiału domyślnego.'
::                     'Najpierw należy wskazać materiał domyślny.'@);
::            0
        ?};
   {? _ok
   || {? _zmiana
      ||
         KARO.M:=exec('FindAndGet','#table',M,KARO.MGRP().M,M.name(),"ref()",null());
         KARO.DATAZ:=KARO.DATA+_czas;
         KARO.TOLER:=_toler;
         KARO.ZWROT:=_zwrot;
         {? _zwrot='B' || KARO.DATAZ:=date(0,0,0); KARO.TOLER:=0 ?};

         ZKARO.ZWROT:=KARO.ZWROT;
         ZKARO.CZAS:=_czas;
         ZKARO.TOLER:=_toler;
         ZKARO.IL:=_max
      ?};
      {? KARO.MGRP<>null()
      || POMOC.MGRW:=KARO.MGRP().MGR
      ?};
      {? KARO.M<>null() & KARO.M().MGRP<>KARO.MGRP
      || KARO.M:=null()
      ?};
      ZKARO.MGRP:=KARO.MGRP;
      HELP.MGRP:=KARO.MGRP;
      POMOC.MGRP:=KARO.MGRP
   ?}
|| {? KARO.MGRP<>null()
   || POMOC.MGRW:=KARO.MGRP().MGR;
      {? KARO.M<>null() & KARO.M().MGRP<>KARO.MGRP
      || KARO.M:=null();
         VAR1.M:=''
      ?}
   ?};
   _ok:=1
?};
{? exec('get','#params',6511,2,OPERATOR.USER)<>'T' & KARO.M<>null() & KARO.MGRP<>null
|| KARO.efld_opt('RED_WYD','mark=0',,'M','KTM')
|| KARO.efld_opt('RED_WYD','mark=1',,'M','KTM')
?};
_ok


\karo_typ_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Po redakcji KARO.TYP
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KARO.TYP='P'
|| KARO.efld_opt('RED_ZWR','mark=1',,'POWOD');
   KARO.efld_opt('RED_ZWR','mark=1',,'PROTOKOL')
|? KARO.TYP='Z'
|| KARO.efld_opt('RED_ZWR','mark=0',,'POWOD');
   KARO.efld_opt('RED_ZWR','mark=0',,'PROTOKOL')
?}


\karo_trig_del_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Trigger b_del dla tabeli KARO
::       zabezpieczenie przed usunieceim rekordu wydania, dla ktorego sa pazycje zwrotu
::       (wiazanie przez #ref do tej samej tabeli - pole KARO.KARO)
::   WY: 0/1 - mozna wykonac akcje, gdy nie ma rekordow rozliczen
::  OLD: \karo_trig_del_b/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czy_rozl4pos','wyp_head')=0


\karo_zwr_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed redagowaniem KARO.ZWROT
::   WY: 1/0 czy mozna redagowac pole
::  OLD: \karo_zwr_be/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
::nie mozna zmieniac, jesli pochodzi z polecenia
KARO.PWOPOZ=null()


\karo_zwr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po redagowaniu KARO.ZWROT
::  OLD: \karo_zwr_ae/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.ZWROT='B'
|| KARO.DATAZ:=date(0,0,0);
   KARO.TOLER:=0;
   KARO.efld_opt('RED_WYD','mark=0',,'DATAZ')
|| KARO.efld_opt('RED_WYD','mark=1',,'DATAZ')
?};
~~


\czy_rozl4pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Odpowiada na pytanie, czy z biezaca pozycja KARO sa zwiazane pozycje KARO oznaczajace zwrot
::   WE: _a - stan sprawdzanych pozycji, domyslnie brak stanu
::   WY: 0 - nie ma 1 - sa
::  OLD: \czy_rozl4pos/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:='' ?};
{? type_of(_a)<>type_of('') || &_a;_a:='' ?};
_odp:=0;
{? KARO.TYP='W'
||
   _karo:=#KARO.ref();
   KARO.cntx_psh();
   {? _a<>''
   || KARO.index('ZWROTYS'); KARO.prefix(_karo,_a)
   || KARO.index('ZWROTY'); KARO.prefix(_karo)
   ?};
   _odp:=KARO.first();
   KARO.cntx_pop()
|| _odp:=0
?};
_odp


::======================================================================================================================
:: Wspomaganie kontroli ilosci
::======================================================================================================================


\drop_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: usuniecei zasobow zwiazanych z kontrola ilosci
::  OLD: \drop_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('drop_wno','normatyw'); exec('drop_wnp','normatyw');
~~


\prep_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przygotowuje dane do kontroli ilosci dla pracownika podanego refem do tabeli P
::       Najpierw agreguje dane z normatywow i stanow,
::       potem przepisuje ilosci ze stanow do pola ILST normatywow i usuwa tabele stanow
::   WE: _a - P.ref, domyslnie biezacy
::       _b - czy traktowac pozycje niezatwierdzone jak zatwierdzone [0]
::       _c - czy dopisac do tabel wynikowych pozycje gdy brak w normatywie a niezerowy stan  [0]
::   WY: liczba rekordow w tabelach do kontroli zgosdnosci z normatywem
::  OLD: \prep_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('drop_ctril','wyp_head');
{? (_<1) | (_a=~~) || _a:=P.ref() ?};
{? (_<2) | (_b=~~) || _b:=0 ?};
{? (_<3) | (_c=~~) || _c:=0 ?};
{? (ref_name(_a)<>P.name())
   | (type_of(_b)<>type_of(0))
   | (type_of(_c)<>type_of(0))
|| return(0)
||
   MGRP.cntx_psh(); MGRP.clear();
   OSOBA.cntx_psh(); P.cntx_psh();
   P.clear(); P.seek(_a);
   OSOBA.clear(); OSOBA.seek(P.OSOBA);
:: uwaga - nie wolno zmienic kolejnosci wywolania bo dane dotyczace pracownika zostana nadpisane
   exec('cr_rso','wyp_head',_b,OSOBA.ref()); exec('cr_rsp','wyp_head',_b,P.ref());
   exec('cr_wno','normatyw'); exec('cr_wnp','normatyw');
:: przepisanie do normatywu danych ze stanu i usuniecie podsumowan stanow
   {? __KARRSP.first()
   ||
      __WYNNOP.clear();
      {!
      |?
         {? __WYNNOP.find_key(__KARRSP.MGRP)
         || __WYNNOP.ILST:=__KARRSP.IL; __WYNNOP.put()
         || {? _c
            ||
               __WYNNOP.blank();
               __WYNNOP.REF:=__KARRSP.MGRP;
               __WYNNOP.KOD:=__KARRSP.KOD;
               __WYNNOP.NAZ:=__KARRSP.NAZ;
               __WYNNOP.IL:=0;
               __WYNNOP.ILST:=__KARRSP.IL;
               {? (__WYNNOP.REF>0) & MGRP.seek(__WYNNOP.REF,)
               ||
                  __WYNNOP.CZAS:=MGRP.DCU;
                  __WYNNOP.TOLER:=MGRP.TOLER;
                  __WYNNOP.ZWROT:=MGRP.ZWROT;
                  __WYNNOP.CTRLIL:=MGRP.CTRLIL
               ?};
               __WYNNOP.SKAD:='X';
               __WYNNOP.add()
            ?}
         ?};
         __KARRSP.next()
      !}
   ?};
   exec('drop_rsp','wyp_head');
   {? __KARRSO.first()
   ||
      __WYNORO.clear();
      {!
      |?
         {? __WYNORO.find_key(__KARRSO.MGRP)
         || __WYNORO.ILST:=__KARRSO.IL; __WYNORO.put()
         || {? _c
            ||
               __WYNORO.blank();
               __WYNORO.REF:=__KARRSO.MGRP;
               __WYNORO.KOD:=__KARRSO.KOD;
               __WYNORO.NAZ:=__KARRSO.NAZ;
               __WYNORO.IL:=0;
               __WYNORO.ILST:=__KARRSO.IL;
               {? (__WYNORO.REF>0) & MGRP.seek(__WYNORO.REF,)
               ||
                  __WYNORO.CZAS:=MGRP.DCU;
                  __WYNORO.TOLER:=MGRP.TOLER;
                  __WYNORO.ZWROT:=MGRP.ZWROT;
                  __WYNORO.CTRLIL:=MGRP.CTRLIL
              ?};
               __WYNORO.SKAD:='X';
               __WYNORO.add()
            ?}
         ?};
         __KARRSO.next()
      !}
   ?};
   exec('drop_rso','wyp_head');
   OSOBA.cntx_pop(); P.cntx_pop();
   MGRP.cntx_pop();
:: odp - suma rekordow w tabelach normatywow
   __WYNNOP.size()+__WYNORO.size()
?}


\find_4_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Ustawia dane w tabelach na rekordy zwiazane z kontrola ilosci danego refer MGRP
::   WE: MGRP.ref
::   WY: 0 - nie ma danych do kontroli,
::       1 - rekord kontrolny istnieje tylko w normatywie pracownika
::       2 - rekord kontrolny istnieje tylko w normatywie osoby
::       3 - rekord kontrolny istnieje w obu normatywach
::  OLD: \find_4_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(null)) | (ref_name(_a)<>MGRP.name()) || return(0) ?};
__WYNNOP.clear(); __WYNORO.clear();
{? __WYNNOP.find_key(#_a) || 1 || 0 ?} + {? __WYNORO.find_key(#_a) || 2 || 0 ?}


\max_il_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrocenie maksymalnej mozliwej do wydania ilosci
::       Zaklada sie ze __WYNNOP __WYNORO istnieja
::   WE: _a - stan danych kontrolnych - wynik find_4_ctril
::       _b - rodzaj kontroli ilosci domyslnie 'O'
::       _c - czy zwrocic ~~ gdy ilosc dowolna (0 nie, inna wartosc tak) [0]
::   WY: maxymalna ilośc jaka może być wydana
::       lub ~~ gdy ilosc dowolna (liczba <0 oznacza, że już jest wydane za duzo)
::  OLD: \max_il_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<3) | (_c=~~) || _c:=0 ?};
{? (type_of(_c)<>type_of(0)) || &_c;_c:=1 ?};
{? (_<2) | (_b=~~) || _b:='O' ?};
{? type_of(_b)<>type_of('') || return(0) ?};
{? ('NPO'*_b)=0 || _b:='O' ?};
{? (_>0) & (_a<>~~) & (type_of(_a)=type_of(0)) & (_a>0)
||
   _odp:={? _b='N' || ~~
         |? _b='P' || {? _a<>2 || __WYNNOP.IL-__WYNNOP.ILST || -__WYNNOP.ILST ?}
         |? _b='O' ||
            {? _a=1 || __WYNNOP.IL-__WYNNOP.ILST
::          maksymalna ilosc do wydania wynika przede wszystkim z normatywu praocwnika,
::          gdy w nim nie ma, to ilosc w normatywie osoby nie ma znaczenia
            |? _a=2 || -__WYNNOP.ILST
::          gdy jest w obu normatywach wybierana jest mniejsza wartosc
            || _ilo:=__WYNORO.IL-__WYNORO.ILST;
               _ilp:=__WYNNOP.IL-__WYNNOP.ILST;
               {? _ilp>_ilo || _ilo || _ilp ?}
            ?}
         ?}
|| _odp:={? _b='N' || ~~ || 0 ?}
?};
{? _c=0
||
  _odp:={? type_of(_odp) || {? _odp<0 || 0 || _odp ?} || 0 ?}
?};
_odp


\czas_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrocenie liczby dni na jaki wyddawany jest MGRP
::       Zaklada sie ze __WYNNOP __WYNORO istnieja
::       kolejnosc pobierania _WYNNOP.CZAS, __WYNORO.CZAS, MGRP.DCU
::   WE: _a - stan danych kontrolnych - wynik find_4_ctril
::       _b - MGRP.CZAS badanego rodzaju wyposazenia wykorzystywany gdy brak danych w normatywie
::   WY: liczba dni na ile mozna wydac dany MGRP temu P
::  OLD: \czas_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<2) | (_b=~~) || _b:=0 ?};
{? type_of(_b)<>type_of(0) || return(0) ?};
{? _b<0 || _b:=0 ?};
{? (_>0) & (_a<>~~) & (type_of(_a)=type_of(0)) & (_a>0)
|| {? _a<>2 || __WYNNOP.CZAS || __WYNORO.CZAS ?}
|| _b
?}


\toler_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrocenie liczby dni tolerancji czasu uzytkowania danego MGRP
::       Zaklada sie ze __WYNNOP __WYNORO istnieja
::       kolejnosc pobierania _WYNNOP.TOLER, __WYNORO.TOLER, MGRP.TOLER(jako %)
::   WE: _a - stan danych kontrolnych - wynik find_4_ctril
::       _b - MGRP.TOLER badanego rodzaju wyposazenia wykorzystywany gdy brak danych w normatywie
::       _c - KARO.DATAZ-KARO.DATA
::   WY: dopuszczalna tolerancja czasu uzytkowania danego MGRP przez tego P
::  OLD: \toler_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<2) | (_b=~~) || _b:=0 ?};
{? type_of(_b)<>type_of(0) || return(0) ?};
{? _b<0 || _b:=0 ?};
{? (_>0) & (_a<>~~) & (type_of(_a)=type_of(0)) & (_a>0)
|| {? _a<>2 || __WYNNOP.TOLER || __WYNORO.TOLER ?}
|| {? (_>2) & (_c<>~~) & (type_of(_c)=type_of(0)) & (_c>0)
   || (_b*_c)%100
   || 0
   ?}
?}


\zwrot_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrocenie wymaganego sposobu rozliczenia
::       Zaklada sie ze __WYNNOP __WYNORO istnieja
::       kolejnosc pobierania _WYNNOP.ZWROT, __WYNORO.ZWROT, MGRP.ZWROT
::   WE: _a - stan danych kontrolnych - wynik find_4_ctril
::       _b - MGRP.ZWROT badanego rodzaju wyposazenia wykorzystywany gdy brak danych w normatywie
::   WY: wymagany sposob zwrotu danego MGRP przez tego P
::  OLD: \zwrot_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<2) | (_b=~~) || _b:='T' ?};
{? (type_of(_b)<>type_of('')) || return('T') ?};
{? ('TNB'*_b)=0 || _b:='T' ?};
{? (_>0) & (_a<>~~) & (type_of(_a)=type_of(0)) & (_a>0)
|| {? _a<>2 || __WYNNOP.ZWROT || __WYNORO.ZWROT ?}
|| _b
?}


\zkaro_set_ctril
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: ustawienie danych dot. kontroli ilosci w ZKARO
::  OLD: \zkaro_set_ctril/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
ZKARO.blank(1);
ZKARO.MGRP:=KARO.MGRP;
exec('prep_ctril','wyp_head',P.ref());
_ctril:=exec('find_4_ctril','wyp_head',KARO.MGRP);
_max:=exec('max_il_ctril','wyp_head',_ctril,KARO.MGRP().CTRLIL);
ZKARO.IL:=_max;
ZKARO.ZWROT:=exec('zwrot_ctril','wyp_head',_ctril,KARO.MGRP().ZWROT);
ZKARO.CZAS:=exec('czas_ctril','wyp_head',_ctril,KARO.MGRP().DCU);
ZKARO.TOLER:=exec('toler_ctril','wyp_head',_ctril,KARO.MGRP().TOLER,ZKARO.CZAS);
exec('drop_ctril','wyp_head');
~~


::======================================================================================================================
:: Obliczanie stanow wynikowych
::======================================================================================================================


\drop_rsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabeli stanu wypoazenia u praocenika
::  OLD: \drop_rsp/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__KARRSP')>0 || obj_del(__KARRSP); &__KARRSP ?}


\cr_rsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Pobranie stanu wyposazenia u pracownika (biezacego lub przyszlego)
::       w polu IL stan przy zalozeniu ze wyposazenie zejdzie ze stanu przy najkrotrzym czasie uzytkowania (tolerancja czasu na minus)
::       w polu ILM stan przy zalozeniu ze wyposazenie zejdzie ze stanu przy najdlozszum czasie uzytkowania (tolerancja czasu na plus)
::      domyslnie stan przy maksymalnym czasie uzytkowania nie jest sprawdzany i gdy IL=0 to rekord niedopisywany do tabeli
::   WE: _a - sumowac pozycje niezatwierdzone jakby byly zatwierdzone 1 tak 0 nie [0]
::       _b - P.ref() [domyslnie biezacy]
::       _c - data badania stanu [dzis], jesli podana przeszla to zamieniana na biezaca
::       _d - gdy dla pozycji ZWROT='T' w dniu _c przekroczony termin uzytkowania to uznac za zwrocone 1 tak, 0 nie [0]
::       _e - uwzglednic stan przy tolerancji maksymalnej [0 -nie] gdy tak to moze byc wiecej rekordow w tabeli
::       _f - Grupowanie po MGRP [0], lub M [1] lub KARO [2]
::   WY: liczba rekordow w __KARRSP
::  OLD: \cr_rsp/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=0 ?};
{? (_<2) | (_b=~~) || _b:=P.ref() ?};
{? (_<3) | (_c=~~) || _c:=date() ?};
{? (_<4) | (_d=~~) || _d:=0 ?};
{? (_<5) | (_e=~~) || _e:=0 ?};
{? (_<6) | (_f=~~) || _f:=0 ?};
_ok:=(type_of(_a)=type_of(0)) & (ref_name(_b)=P.name())
     & (type_of(_c)=type_of(date())) & (type_of(_d)=type_of(0)) & (type_of(_e)=type_of(0));
exec('drop_rsp','wyp_head');
__KARRSP:=tab_tmp(1,'MGRP','INTEGER','#MGRP.ref'
                   ,'MGR','INTEGER','#MGR.ref'
                   ,'M','INTEGER','#M.ref'
                   ,'DK_C','STRING[16]','$DK_C.ref'
                   ,'KARO','INTEGER','#KARO.ref'
                   ,'KOD','STRING[50]','Rodzaj'@
                   ,'NAZ','STRING[100]','Nazwa'@
                   ,'KTM','STRING[50]','Indeks materiałowy'@
                   ,'N','STRING[100]','Nazwa materiału'@
                   ,'IL','REAL','Ilość przy dolnej granicy tolerancji'@
                   ,'ILM','REAL','Ilość przy górnej granicy tolerancji'@
                   ,'WAR1','STRING[25]','Wartość 1'@
                   ,'WAR2','STRING[25]','Wartość 2'@
                   ,'WAR3','STRING[25]','Wartość 3'@
                   ,'WAR4','STRING[25]','Wartość 4'@
                   ,'WAR5','STRING[25]','Wartość 5'@
                   ,'WAR6','STRING[25]','Wartość 6'@
                   ,'WAR7','STRING[25]','Wartość 7'@
                   ,'WAR8','STRING[25]','Wartość 8'@
                   ,'WAR9','STRING[25]','Wartość 9'@
                   ,'WAR10','STRING[25]','Wartość 10'@
                  );
{? _f=1
|| _ndx:=__KARRSP.ndx_tmp(,,'M',,,'DK_C',,,'DK_C',,);
   __KARRSP.index(_ndx)
|? _f=2
|| _ndx:=__KARRSP.ndx_tmp(,,'KARO',,,'M',,,'DK_C',,,'DK_C',,);
   __KARRSP.index(_ndx)
?};
{? _ok
||
   {? _c<date() || _c:=date() ?};
   KARO.cntx_psh();
   DK.cntx_psh();
   DK.clear();
   DK_C.cntx_psh();
   DK_C.clear();
   M.cntx_psh();
   M.clear();
   KARO.index('P_WYD');
   KARO.prefix(_b,'N','W');
   {? KARO.first()
   ||
      {!
      |?
         {? (KARO.STATUS<>'N' & KARO.STATUS<>'Z') | _a
         ||
::          ilosc wydana na pozycji
::          jezeli _e>0 - pozycja uwzgledniana, gdy bedzie w dniu _c przy zastosowaniu maksymalnej tolerancji czasu uzycia
            _ilm:=0;
            _il:= {? (KARO.ZWROT='N') | ((KARO.ZWROT='T') & _d)
                  || {? _e & ((KARO.DATAZ+KARO.TOLER)>_c) || _ilm:=KARO.IL ?};
                     {? ((KARO.DATAZ-KARO.TOLER)>_c) || KARO.IL || 0 ?}
                  ||
                     {? _e || _ilm:=KARO.IL ?};
                     KARO.IL
                  ?};
::          odjecie ewentualnych zwrotow
            {? _il+_ilm
            ||
               _wyd:=#KARO.ref();
               KARO.cntx_psh();
               KARO.index('ZWROTY');
               KARO.prefix(_wyd);
               {? KARO.first()
               ||
                  {! |? {? (KARO.STATUS<>'N' & KARO.STATUS<>'Z') | _a ||   _il-=KARO.IL; _ilm-=KARO.IL ?}; KARO.next() !}
               ?};
               KARO.cntx_pop()
            ?};
::          korekta w celu unikniecia stanow ujemnych
            {? _il<0 || _il:=0 ?};
            {? _ilm<0 || _ilm:=0 ?};
            {? (_il>0) | (_ilm>0)
            ||
               {? _f=0
::             sumowanie w ramach MGRP
               || {? ~__KARRSP.find_key(#KARO.MGRP)
                  ||
                     __KARRSP.blank(1);
                     __KARRSP.MGRP:=#KARO.MGRP;
                     __KARRSP.M:=#KARO.M;
                     {? KARO.M<>null
                     || M.cntx_psh();
                        __KARRSP.MGR:=#KARO.M().MGR;
                        M.cntx_pop()
                     |? KARO.MGRP<>null
                     || MGRP.cntx_psh();
                        __KARRSP.MGR:=#KARO.MGRP().MGR;
                        MGRP.cntx_pop()
                     ?};
                     __KARRSP.KOD:=exec('karo_mgrp_kod','wyp_head');
                     __KARRSP.NAZ:=exec('karo_mgrp_naz','wyp_head');
                     __KARRSP.add()
                  ?}
::                sumowanie po M
               || _new:=1;
                  {? _f=1
                  || _new:=~__KARRSP.find_key(#KARO.M,$KARO.DK,$KARO.DK)
                  |? _f=2
                  || _new:=~__KARRSP.find_key(#KARO.ref())
                  ?};
                  {? _new
                  || __KARRSP.blank(1);
                     __KARRSP.MGRP:=#KARO.MGRP;
                     __KARRSP.M:=#KARO.M;
                     {? KARO.M<>null
                     || M.cntx_psh();
                        __KARRSP.MGR:=#KARO.M().MGR;
                        M.cntx_pop()
                     |? KARO.MGRP<>null
                     || MGRP.cntx_psh();
                        __KARRSP.MGR:=#KARO.MGRP().MGR;
                        MGRP.cntx_pop()
                     ?};
                     {? M.seek(KARO.M)
                     || __KARRSP.KTM:=M.KTM;
                        __KARRSP.N:=M.N
                     ?};
                     __KARRSP.KARO:=#KARO.ref();
                     __KARRSP.DK_C:=$KARO.DK;

                     {? KARO.SRDK<>'' & DK.name()<>8+KARO.SRDK
                     || DK.use(8+KARO.SRDK)
                     ?};
                     DK.clear();
                     {? DK.seek(KARO.SRDK,8+KARO.SRDK)
                     || {? DK.DK_C<>null() & DK_C.name()<>8+$DK.DK_C
                        || DK_C.use(8+$DK.DK_C)
                        ?};
                        DK_C.clear();
                        {? DK_C.seek(DK.DK_C)
                        || __KARRSP.DK_C:=$DK_C.ref();
                           __KARRSP.WAR1:=DK_C.WAR01;
                           __KARRSP.WAR2:=DK_C.WAR02;
                           __KARRSP.WAR3:=DK_C.WAR03;
                           __KARRSP.WAR4:=DK_C.WAR04;
                           __KARRSP.WAR5:=DK_C.WAR05;
                           __KARRSP.WAR6:=DK_C.WAR06;
                           __KARRSP.WAR7:=DK_C.WAR07;
                           __KARRSP.WAR8:=DK_C.WAR08;
                           __KARRSP.WAR9:=DK_C.WAR09;
                           __KARRSP.WAR10:=DK_C.WAR10
                        ?}
                     ?};
                     __KARRSP.KOD:=exec('karo_mgrp_kod','wyp_head');
                     __KARRSP.NAZ:=exec('karo_mgrp_naz','wyp_head');
                     __KARRSP.add()
                  ?}
               ?};
               __KARRSP.IL+=_il;
               __KARRSP.ILM+=_ilm;
               __KARRSP.put()
            ?}
         ?};
         KARO.next()
      !}
   ?};
   M.cntx_pop();
   DK_C.cntx_pop();
   DK.cntx_pop();
   KARO.cntx_pop()
|| {? _b<>null() || FUN.error('Błędne parametry funkcji obliczania stanu wyposażenia u pracownika.'@) ?}
?};
{? _f<>0
|| __KARRSP.ndx_drop(_ndx)
?};
__KARRSP.size()


\drop_rso
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: - Usuniecie tabeli stanu wypoazenia u osoby
::  OLD: \drop_rso/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__KARRSO')>0 || obj_del(__KARRSO); &__KARRSO ?}


\cr_rso
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Pobranie stanu wyposazenia u osoby [biezacego] lub na zadany dzien w przyszlosci
::      (daty z przeszlosci zamieniane na biezaca)
::       w polu IL stan przy zalozeniu ze wyposazenie zejdzie ze stanu przy najkrotrzym czasie uzytkowania (tolerancja czasu na minus)
::       w polu ILM stan przy zalozeniu ze wyposazenie zejdzie ze stanu przy najdlozszum czasie uzytkowania (tolerancja czasu na plus)
::      domyslnie stan przy maksymalnym czasie uzytkowania nie jest sprawdzany i gdy IL=0 to rekord niedopisywany do tabeli
::   WE: _a - sumowac pozycje niezatwierdzone jakby byly zatwierdzone 1 tak 0 nie
::       _b - OSOBA.ref() [domyslnie biezacy]
::       _c - data badania stanu [dzis], jesli podana przeszla to zamieniana na biezaca
::       _d - gdy dla pozycji ZWROT='T' w dniu _c przekroczony termin uzytkowania to uznac za zwrocone 1 tak, 0 nie [0]
::       _e - uwzglednic stan przy tolerancji maksymalnej [0 -nie] gdy tak to moze byc wiecej rekordow w tabeli
::       _f - Grupowanie po MGRP [0], lub M [1] lub KARO [2]
::   WY: liczba rekordow w __KARRSO
::  OLD: \cr_rso/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=0 ?};
{? (_<2) | (_b=~~) || _b:=OSOBA.ref() ?};
{? (_<3) | (_c=~~) || _c:=date() ?};
{? (_<4) | (_d=~~) || _d:=0 ?};
{? (_<5) | (_e=~~) || _e:=0 ?};
{? (_<6) | (_f=~~) || _f:=0 ?};
_ok:=(type_of(_a)=type_of(0)) & (ref_name(_b)=OSOBA.name())
     & (type_of(_c)=type_of(date())) & (type_of(_d)=type_of(0)) & (type_of(_e)=type_of(0));
exec('drop_rso','wyp_head');
__KARRSO:=tab_tmp(2,'MGRP','INTEGER','#MGRP.ref'
                   ,'MGR','INTEGER','#MGR.ref'
                   ,'M','INTEGER','#M.ref'
                   ,'DK_C','STRING[16]','$DK_C.ref'
                   ,'KARO','INTEGER','#KARO.ref'
                   ,'KOD','STRING[50]','Rodzaj'@
                   ,'NAZ','STRING[100]','Nazwa'@
                   ,'KTM','STRING[50]','Indeks materiałowy'@
                   ,'N','STRING[100]','Nazwa materiału'@
                   ,'IL','REAL','Ilość przy dolnej granicy tolerancji'@
                   ,'ILM','REAL','Ilość przy górnej granicy tolerancji'@
                   ,'WAR1','STRING[25]','Wartość 1'@
                   ,'WAR2','STRING[25]','Wartość 2'@
                   ,'WAR3','STRING[25]','Wartość 3'@
                   ,'WAR4','STRING[25]','Wartość 4'@
                   ,'WAR5','STRING[25]','Wartość 5'@
                   ,'WAR6','STRING[25]','Wartość 6'@
                   ,'WAR7','STRING[25]','Wartość 7'@
                   ,'WAR8','STRING[25]','Wartość 8'@
                   ,'WAR9','STRING[25]','Wartość 9'@
                   ,'WAR10','STRING[25]','Wartość 10'@
                  );
{? _f=1
|| _ndx:=__KARRSO.ndx_tmp(,,'M',,,'DK_C',,,'DK_C',,);
   __KARRSO.index(_ndx)
|? _f=2
|| _ndx:=__KARRSO.ndx_tmp(,,'KARO',,,'M',,,'DK_C',,,'DK_C',,);
   __KARRSO.index(_ndx)
?};
{? _ok
||
   {? _c<date() || _c:=date() ?};
   P.cntx_psh(); P.index('OSOZATR'); P.prefix(FIRMA.ref(),_b);
   {? P.first()
   ||
      {!
      |?
         {? exec('cr_rsp','wyp_head',_a,P.ref(),_c,_d,_e,_f) & __KARRSP.first()
         ||
            {!
            |?
               _dalej:=0;
               {? _f=0
               || _dalej:=__KARRSO.find_key(__KARRSP.MGRP)
               |? _f=1
               || _dalej:=__KARRSO.find_key(__KARRSP.M,__KARRSP.DK_C,__KARRSP.DK_C)
               |? _f=2
               || _dalej:=__KARRSO.find_key(__KARRSP.KARO)
               ?};
               {? _dalej
               || __KARRSO.IL+=__KARRSP.IL;
                  __KARRSO.ILM+=__KARRSP.ILM;
                  __KARRSO.put()
               || __KARRSO.blank();
                  __KARRSO.MGR:=__KARRSP.MGR;
                  __KARRSO.MGRP:=__KARRSP.MGRP;
                  __KARRSO.KOD:=__KARRSP.KOD;
                  __KARRSO.NAZ:=__KARRSP.NAZ;
                  __KARRSO.M:=__KARRSP.M;
                  __KARRSO.KTM:=__KARRSP.KTM;
                  __KARRSO.N:=__KARRSP.N;
                  __KARRSO.DK_C:=__KARRSP.DK_C;
                  __KARRSO.KARO:=__KARRSP.KARO;
                  __KARRSO.IL:=__KARRSP.IL;
                  __KARRSO.ILM:=__KARRSP.ILM;
                  __KARRSO.WAR1:=__KARRSP.WAR1;
                  __KARRSO.WAR2:=__KARRSP.WAR2;
                  __KARRSO.WAR3:=__KARRSP.WAR3;
                  __KARRSO.WAR4:=__KARRSP.WAR4;
                  __KARRSO.WAR5:=__KARRSP.WAR5;
                  __KARRSO.WAR6:=__KARRSP.WAR6;
                  __KARRSO.WAR7:=__KARRSP.WAR7;
                  __KARRSO.WAR8:=__KARRSP.WAR8;
                  __KARRSO.WAR9:=__KARRSP.WAR9;
                  __KARRSO.WAR10:=__KARRSP.WAR10;
                  __KARRSO.add()
               ?};
               __KARRSP.next()
            !}
         ?};
         P.next()
      !}
   ?};
   P.cntx_pop()
|| {? _b<>null() || FUN.error('Błędne parametry funkcji obliczania stanu wyposażenia u osoby.'@) ?}
?};
{? _f<>0
|| __KARRSO.ndx_drop(_ndx)
?};
__KARRSO.size()


\karo_mgrp_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Podanie wartości pola KARO.MGRP().KOD lub napis zastepczy gdy KARO.MGRP=mull()
::   WY: wartość MGRP.KOD lub napis zastepczy
::  OLD: \karo_rodzo_kod/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.MGRP=null() || 'Inne wyposażenie' || KARO.MGRP().KOD ?}


\karo_mgrp_naz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Podanie wartości pola KARO.MGRP().NAZ lub napis zastepczy gdy KARO.MGRP=mull()
::   WY: wartość MGRP.NAZ lub napis zastepczy
::  OLD: \karo_rodzo_naz/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.MGRP=null() || 'Inne wyposażenie' || KARO.MGRP().NAZ ?}


\karo_chkatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Sprawdzenie zgodnosci atrybutow pomiedzy KARO.MGRP a KARO.M
::   WY: 1/0 - czy sa zgodne
::  OLD: \karo_chkatr/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.MGRP().M_ATR<>null()
||
:: sprawdzenie czy MGRP.M().M_ATR zawiera wszystkie TAT z MGRP.M_ATR
   _odp:=exec('m_atr_1in2','wyp_head',KARO.MGRP().M_ATR,KARO.M().M_ATR);
   {? _odp<>''
   || {? exec('FindAndGet','#table',M,KARO.MGRP().M,,"M_ATR",null())=null()
      || FUN.emsg('Do wybranego materiału nie przypisano żadnego wzorca atrybutów cech,'
                  '\na wymagany jest wzorzec zawierający następujące atrybuty: %1.'@[_odp]);
         0
      || FUN.emsg('We wzorcu atrybutów cech dla materiału'
                  ' brakuje następujących atrybutów: \n%1'
                  '.\nTen materiał nie może być użyty w kartotece dla tego rodzaju wyposażenia.'@[_odp]);
         0
      ?}
   ||
::    Jeżeli wśród atrybutów jest środek trwały, to sprawdzam, czy mozna go wydać, czyli, czy jest w ewidencji
      _srsr:=exec('atr_get_srsr','mat_atr',KARO.M().M_ATR);
      {? _srsr<> null()
      || exec('chk_srsr','wyp_head',_srsr)
      || 1
      ?}
   ?}
|| 1
?}


\m_atr_1in2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: czy wszystkie atrybuty M_ATR 1 zawieraja sie w M_ATR 2
::   WE: _a - M_ATR.ref() 1
::       _b - M_ATR.ref() 2
::   WY: string z wykazem brakujacych atrybutow
::  OLD: \m_atr_1in2/!zws_par_kmtr.fml
::  OLD: \m_atr_1in2/wyprodzo.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1)|(_a=~~)|(type_of(_a)<>(type_of(null()))) || _a:=null() ?};
{? (_<2)|(_b=~~)|(type_of(_b)<>(type_of(_a))) || _b:=null() ?};
_maxatrs:=10;
:: sprawdza jesleki _a=null() to nie sprawdza i zwraca '' - cokolwiek jest w _b zawiera w sobie _a
{? _a=null()
|| ''
||
   M_ATR.cntx_psh();M_ATR.clear();
   TAT.cntx_psh();TAT.clear();
   _odp:={? M_ATR.seek(_a)
         ||
            _arefs:=obj_new(_maxatrs); _syms:=obj_new(_maxatrs); _latrs:=0;
            {! _ii:=1.._maxatrs
            |! _ref:=($('M_ATR.SL_'+form(_ii,-2,,'99')))();
               {? _ref<>null()
               || _latrs+=1;
                  _arefs[_latrs]:=_ref;
                  TAT.seek(_ref);
                  _syms[_latrs]:=TAT.NA
               ?}
            !};
::         sprawdzenie czy w 2 sa wszystkie TAT z 1
            {? _latrs>0
            ||
::            formula znajdujaca indeks pozycji na ktorej w _a (_arefs) jest atrybut z 2 (podany refem przez _b)
               _find:=$('_jest:=0;{! _jj:=1..'+$_latrs+' |! {? _a[_jj]=_b || _jest:=_jj ?} !};_jest');
::            formula zwracajaca nazwy brakujacych atrybutow w formie stringu z przecinkami
               _get:=$('_odp:=\'\';{! _jj:=1..'+$_latrs+' |! {? +_a[_jj] || _odp+=_a[_jj]+\', \' ?} !};_odp');
               {? M_ATR.seek(_b)
               ||
                  {! _ii:=1.._maxatrs
                  |! _ref:=($('M_ATR.SL_'+form(_ii,-2,,'99')))();
::                  zerowanie _syms dla pozycji ktora zostala znaleziona
                     {? _ref<>null()
                     || {? _jj:=_find(_arefs,_ref) || _syms[_jj]:='' ?}
                     ?}
                  !};
::               w tym miejscu niezerowe _syms sa dla nieznalezionych aterybutow 1 w 2
                  _get(_syms)
               ||
::               w funkcjach standardowych taka sytuacja nie wystapi bo _b pochodzi ze zlaczonego rekordu
                  _get(_syms)
               ?}
            ||
::             do M_ATR niedopisane zadne TAT wiec tak jakby go nie bylo czyli 2 spelnia
               ''
            ?}
         ||
::          zwraca ze OK skoro nie ma M_ATR (zweryfikowac w przyszlosci i ewentualnie obsluga ze blad)
::          w obecnym standardowym zastosowaniu taki blad nie moze wystapic bo zawsze porownywane sa istniejace rekordy
            ''
         ?};
   TAT.cntx_pop();
   M_ATR.cntx_pop();
:: usuniecie koncowego przecinka
   {? _odp<>'' || _odp:=form(_odp);{? (_odp+1)=',' || _odp:=(_odp-1) ?} ?};
   _odp
?}


\stan4pos
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Obliczenie stanu wg rodzaju wyposazenia w zaleznosci od dziedziny _karo_stan
::       Dla biezacego rekordu _karo_stan
::       Uzupelnienie pol _karo_stan.IL i _karo_stan.S
::  OLD: \stan4pos/wypkaro.fml
::  OLD: \stan4mpos/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
{? VAR.TRYBRODZ=0
|| _karo_stan:=params_get().env_karo.STAN
|| _karo_stan:=params_get().env_karo.STANG
?};
::zabezpieczenie przed pusta dziedzina _karo_stan
_mat:={? _karo_stan.size() || exec('ref_m','wyp_head',_karo_stan.M) || null() ?};
_mgrp:={? _karo_stan.size() || exec('ref_mgrp','wyp_head',_karo_stan.MGRP) || null() ?};

_karo_stan.IL:=0;_karo_stan.S:='T';
_dalej:={? VAR.TRYBRODZ=0
        || _mat<>null()
        || _mgrp<>null() | _mat<>null()
        ?};
{? 1
||
   {? VAR.TRYBPRAC=1
   ||
      KARO.index('P_WYD1M');
      {? _karo_stan.MAG<>-1
      || {? VAR.TRYBRODZ=0
         || KARO.index('P_WYD1M');
            KARO.prefix(P.ref,'N','W',_mgrp,_mat,exec('ref_mg','wyp_head',_karo_stan.MAG))
         || KARO.index('P_WYD1');
            KARO.prefix(P.ref,'N','W',_mgrp,exec('ref_mg','wyp_head',_karo_stan.MAG))
         ?}
      || {? VAR.TRYBRODZ=0
         || KARO.index('P_WYD2M');
            KARO.prefix(P.ref,'N','W',_mgrp,_mat)
         || KARO.index('P_WYD2');
            KARO.prefix(P.ref,'N','W',_mgrp)
         ?}
      ?}
   ||
      KARO.index('KH_WYD1M');
      {? _karo_stan.MAG<>-1
      ||
         KARO.index('KH_WYD1M');
         KARO.prefix(FZ.KH,'N','W',_mat,exec('ref_mg','wyp_head',_karo_stan.MAG))
      ||
         KARO.index('KH_WYD2M');
         KARO.prefix(FZ.KH,'N','W',_mat)
      ?}
   ?};
   {? KARO.first()
   ||
      {!
      |?
         {? (KARO.STATUS<>'N' & KARO.STATUS<>'Z')
         ||
::          ilosc wydana na pozycji
            _il:={? KARO.ZWROT<>'N'
                 || KARO.IL
                 || {? ((KARO.DATAZ-KARO.TOLER)>date()) || KARO.IL || 0 ?}
                 ?};
::          odjecie ewentualnych zwrotow
            {? _il
            ||
               _wyd:=#KARO.ref();
               KARO.cntx_psh();
               KARO.index('ZWROTY');
               KARO.prefix(_wyd);
               {? KARO.first()
               ||
                  {! |? {? (KARO.STATUS<>'N' & KARO.STATUS<>'Z') || _il-=KARO.IL || _karo_stan.S:='N' ?}; KARO.next() !}
               ?};
               KARO.cntx_pop()
            ?};
            {? _il>0 || _karo_stan.IL+=_il  ?}
         || _karo_stan.S:='N'
         ?};
         KARO.next()
      !};
      _karo_stan.put()
   ?}
?};
KARO.cntx_pop();
~~


\o_fulstan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Wyswietlenie stanu wyposazenia biezacej osoby
::  OLD: \o_fulstan/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
OSOBA.clear(); OSOBA.seek(P.OSOBA);
_dalej:=0;
{? VAR.TRYBRODZ=1
|| _dalej:=exec('cr_rso','wyp_head')
|| _dalej:=exec('cr_rso','wyp_head',,,,,,1)
?};
{? _dalej
||
:: tworzenie odpowiedniego indeksu
   _ind:=__KARRSO.ndx_tmp(,,'KOD',,);
   __KARRSO.index(_ind);
   {? VAR.TRYBRODZ=0
   || _okno:=__KARRSO.mk_sel('Stan wyposażenia osoby: %1 %2'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE],,,'wypstanos')
   || _okno:=__KARRSO.mk_sel('Stan wyposażenia osoby: %1 %2'@[OSOBA.NAZWISKO,OSOBA.PIERWSZE],,,'#wypstosmatr')
   ?};
   __KARRSO.win_fld(_okno,,'KOD',,,20,,1,'Podgrupa'@);
   {? VAR.TRYBRODZ=0
   || __KARRSO.win_fld(_okno,,'KTM',,,20,,1,'Materiał'@);
      __KARRSO.win_fld(_okno,,'N',,,40,,1)
   || __KARRSO.win_fld(_okno,,'NAZ',,,40,,1)
   ?};
   __KARRSO.win_fld(_okno,,'IL',,,7,,1,'Ilość'@);
::   {? VAR.TRYBRODZ=1
::   || __KARRSO.win_act(_okno,0,'Formuła','Drukuj'@,,,,"rep_exec('wyp_stano')",1)
::   || __KARRSO.win_act(_okno,0,'Formuła','Drukuj'@,,,,"rep_exec('wyp_matro')",1)
::   ?};
   __KARRSO.win_act(_okno,0,'Formuła','Druku&j'@@,,,
      "params_set(params_get()); rep_exec('wyp_stano')",,1,,,,,,'icon=print');
   __KARRSO.win_sel(_okno);
   __KARRSO.fld_fml('IL','DISPLAY_FORMAT',"
      MGRP.cntx_psh();
      MGRP.clear();
      _odp:='out_prec='+{? __KARRSO.MGRP & MGRP.seek(__KARRSO.MGRP,) || $exec('mgrp_m_dokl','wyp',MGRP.M) || '-1' ?};
      MGRP.cntx_pop();
      _odp
   ");
   params_set(params_get());
   __KARRSO.select();
   __KARRSO.ndx_drop(_ind)
|| FUN.info('Stan osoby jest pusty.'@)
?};
exec('drop_rso','wyp_head');
~~


\karorw_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wydruk potwierdzenia wydania
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
rep_exec('wyp_potw')


\karorr_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wydruk potwierdzenia zwrotu
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
rep_exec('wyp_potz')


\pracnaz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Przed wyświetleniem pola VAR1.NAZWISKO
::----------------------------------------------------------------------------------------------------------------------
:: Wyłączenie okna ustawionego w obsludze 'przed rekord'
:: W kontekscie okna ZGP.WYBZB nie jest odświeżana zawartosc REF
fld(cur_tab(1,1).P().OSOBA().NAZWISKO);
REF.P:=cur_tab(1,1).P;
REF.OSOBA:=cur_tab(1,1).P().OSOBA;
1


\pracnaz_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed redakcja pola VAR1.NAZWISKO
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli poprzednio wybrany i wartość pola pasuje, to szukam konkretnego pracownika
{? REF.P<>null() & REF.P().OSOBA().NAZWISKO=fld()
|| P.prefix();
   P.seek(REF.P);
   {? cur_tab(1,1)=KARO
   || 0
   |? cur_tab(1,1)=POLWO
   || ~exec('czy_poz','wyp_polwo',POLWO.ref())
   || 0
   ?}
|| 1
?}


\pracnaz_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Obsługa na F3 dla pola VAR1.NAZWISKO
::----------------------------------------------------------------------------------------------------------------------
_fld:=fld();

:: W kontekście okna ZGP.WYBZB brana poprzednia zawartość REF
_ref:=cur_tab(1,1).P;


_p6520:=exec('get','#params',6520,2,OPERATOR.USER);

_view:=1+_p6520;
_jorg:=_p6520+1;

{? _ret:=exec('wybierz_pracownika','wyp',0,_view,_jorg);
   {? _ret.STATUS=''
   || {? _ret.P.first() || _res:=exec('FindAndGet','#table',P,_ret.P.UID,,"ref()",null()) || _res:=null() ?}
   || FUN.emsg(_ret.STATUS);
      _res:=null()
   ?};
   _res<>null()

|| REF.P:=_res;
   REF.OSOBA:=REF.P().OSOBA;
   cur_tab(1,1).P:=REF.P;
   fld(REF.OSOBA().NAZWISKO);
   win_disp()
|| cur_tab(1,1).P:=_ref;
   cur_tab(1,1).P();
   fld(_fld)
?};
fld()


\pracnaz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Po redakcji pola VAR1.NAZWISKO
::----------------------------------------------------------------------------------------------------------------------
{? fld()=''
||
   cur_tab(1,1).P:=null();
   REF.P:=null();
   REF.OSOBA:=null();
   _res:=1

|? UD_FIR.cntx_psh();
   UD_FIR.index('UD_SKL');
   UD_FIR.prefix(REF.FIRMA);
   {? UD_FIR.first()
   || _ud_skl:=UD_FIR.UD_SKL
   || _ud_skl:=null()
   ?};
   UD_FIR.cntx_pop();
   _ud_def:=exec('szukaj_ud_def','schemat',
      exec('domyslny','schemat','PODZORG'),
      _ud_skl
   ).REF;
   _cur_naz:='';
   _cur_prac:=cur_tab(1,1).P;
:: Pobranie nazwiska aktualnie przypisanego pracownika
   {? _cur_prac<>null()
   || OSOBA.cntx_psh();
      _cur_naz:=exec('FindAndGet','#table',P,_cur_prac,,"OSOBA().NAZWISKO",'');
      OSOBA.cntx_pop()
   ?};
   exec('filtruj_p','schemat','WYP',_ud_def,'','T','W');

   {? _cur_prac<>null() & _cur_naz=fld() & P.f_seek(_cur_prac)
   ||
::    Aktualnie przypisany pracownik jest zgodny
      1
   || P.f_find(fld())
   ?}
||
   cur_tab(1,1).P:=P.ref();
   REF.P:=P.ref(); REF.P();
   REF.OSOBA:=P.OSOBA; REF.OSOBA();
   _res:=1
||
   FUN.emsg('Brak pracownika lub uprawnień do pracownika o wpisanym nazwisku.'@);
   _res:=0
?};
_res


\bd_karodost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: przed wyswietl dla KARO.DOST
::----------------------------------------------------------------------------------------------------------------------
{? KARO.DK=null()
|| DK.blank(1);
   ND.blank(1);
   DK_C.blank(1)
?};
''


\be_karodost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: czy mozna edytowac pole
::   WE: _a - '' wszystkie rekordy / 'T' tylko aktywne / 'N' tylko nieaktywne
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_zwrot:=(KARO.TYP='W');
{? KARO.M=null()
|| 0
|? _zwrot
||
   _tmg:=1+KARO.MG().TYP;

   {? KARO.M<>null || _wyn:=_tmg='D' ?};
   {? _wyn || _wyn:=~BEER.REORG ?};
   {? _zwrot || _wyn:=1 ?};

   {? _wyn=1
   ||
      {? 'D'*_tmg | _zwrot
      || exec('sc_aktyw','magazyn_stan',KARO.MG,KARO.M);
         _stskind:={? _zwrot
                   || 'NOZ'
::                     DK.N().MAG().DEFSTATS().KIND
                   || exec('Create_ZON4typ','statexam',DK.N().TYP();TYPYDOK)
                   ?};
         exec('sc_tymczas','magazyn_stan',KARO.MG,KARO.M,{? _zwrot || 'T' || '' ?}
              ,,_stskind,);
         {? __sc.size()=1
         || __sc.first();
            VAR1.DOST:=__sc.D;
            KARO.SRDK:=__sc.SRDK;
            KARO.PRDK:=__sc.PRDK
         ?}
      || VAR1.DOST:=date(0,0,0);
         KARO.SRDK:='';
         KARO.PRDK:=''
      ?};
      win_disp()
   ?}
?};
_wyn


\f3_karodost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: F3 na dostawie na KARO
::   WY: dla dokumentow rozchodowych zwraca wybrana data dostawy
::----------------------------------------------------------------------------------------------------------------------
_wyn:=fld;
_zwrot:=(KARO.TYP='W');
{? ~-(1+menu_txt())='S' | (DK.N().TYP().P='T' & ~_zwrot)
|| 1
|| {? __sc.win_sel('?')='' | $KARO.M().M_ATR<>ATR.M_ATRSQL
   || ATR.M_ATRSQL:={? KARO.M().M_ATR<>null() || $KARO.M().M_ATR || '' ?};
      exec('sc_tymczas_okna','magazyn_stan','D',1);
      __sc.win_sel(__sc_sel);
      __sc.win_sel(__sc_grp)
   ?};
   _czy_d:=0;
   _ind:=__sc.ndx_tmp('',,'SRDK',,,'SRDK',,);
   __sc.index(_ind);
   {? {? __sc.find_key(KARO.SRDK) || _czy_d:=(__sc.D<>VAR1.DOST) || 1 ?}
   || {? __sc.first()
      || _ok:=1;
         {? _czy_d
         || _ok:=0;
            {! |? {? __sc.D=DK.DOST || _ok:=1; 0 || __sc.next() ?} !}
         || {? DK.RDK<>0
            ||
               _ok:=0;
               {! |? {? __sc.RDK=DK.RDK & __sc.NDK=DK.NDK || _ok:=1; 0 || __sc.next() ?} !}
            ?}
         ?};
         {? ~_ok || __sc.first() ?}
      || 0
      ?}
   ?};
   __sc.ndx_drop(_ind);

   __sc.hdr_sel();
   __sc.hdr_sel(' dla materiału: %1 %2'@[KARO.M().KTM,KARO.M().N]);
   _ind_sel:=__sc.ndx_tmp('',,'D',,,'RDK',,);
   __sc.index(_ind_sel);
   {? __sc.select(,1,10)
   || VAR1.DOST:=__sc.D;
      KARO.SRDK:=__sc.SRDK;
      KARO.PRDK:=__sc.PRDK
   ?};
   __sc.hdr_sel();
   __sc.ndx_drop(_ind_sel)
?};
_wyn


\ae_karodost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: po redakcji pola dostawa w DK.DOST
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_ilekaro:={? HELP.POP || KARO.IL || 0 ?};

_zwrot:=(KARO.TYP='W');
{? ~_zwrot
|| _atr_flag:=1;
   {? VAR1.DOST<>date(0,0,0) & KARO.SRDK<>''
   || _cecha:=null();
      _rdk:=BIT.sqlint(KARO.SRDK);
      _ndk:=form(8+KARO.SRDK);
      DK.cntx_psh();
      DK.use(_ndk);
      DK.index('DOST3');
      DK.prefix(KARO.MG,KARO.M,_rdk,_ndk,'T');
      {? DK.first()
      || {? DK.DK_C<>null || _cecha:=DK.DK_C ?}
      ?};
      DK.cntx_pop();
      KARO.DK_C:=_cecha;
      {? KARO.DK_C().M_ATR<>null()
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('KARO.DK_C().WAR'+form(_i,-2,0,'99')))() !};
         KARO.DK_C().M_ATR().SYM;
         _srsr:=exec('atr_get_srsr','mat_atr',KARO.DK_C().M_ATR);
         {? _srsr<>null()
         || KARO.RSRSR:=$_srsr
         ?}
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
         M_ATR.blank(0)
      ?};
      ATR.FLAG:=0;
      ATR.FLAG_ED:=0;
      _atr_flag:=0
   ?};
   {? _atr_flag
   || ATR.M_ATR:=KARO.M().M_ATR;
      _czy_ed:=ATR.FLAG_ED:=ATR.CZY_ATR & ATR.M_ATR().EDIT;
      ATR.FLAG:={? ATR.FLAG_ED & _czy_ed & KARO.M().M_ATR<>null() || 2 || 0 ?};
      {? _czy_ed & ATR.FLAG_ED || {? KARO.M().M_ATR || ATR.FLAG_ED:=2 ?} ?};
      {? KARO.DK_C<>null() || KARO.DK_C().M_ATR().SYM || KARO.M().M_ATR().SYM ?}
   ?};
   _wyn:=1
|| __sc.cntx_psh();
   {? KARO.SRDK<>''
   || _rdk:=BIT.sqlint(KARO.SRDK);
      _ndk:=form(8+KARO.SRDK);
      _ind:=__sc.ndx_tmp('',,'RDK',,,'NDK',,);
      __sc.index(_ind);
      __sc.prefix(_rdk,_ndk);
      _jest:=__sc.first();
      {? ~_jest
      || KARO.SRDK:='';
         KARO.PRDK:='';
         KARO.DK:=null();
         __sc.ndx_drop(_ind);
         _ind:=__sc.ndx_tmp('',,'D',,);
         __sc.index(_ind);
         __sc.prefix(VAR1.DOST);
         _jest:=__sc.first();
         {? _jest
         || {!
            |? {? {? __sc.S>0 || exec('sc_tmp_info','magazyn_stan'); DISP.SD>0 || 0 ?}
               || 0
               || __sc.next()
               ?}
            !}
         ?}
      || VAR1.DOST:=__sc.D
      ?}
   ||
::    szukanie gdy nie wybrano przez F3
      _ind:=__sc.ndx_tmp('',,'D',,);
      __sc.index(_ind);
      __sc.prefix(VAR1.DOST);
      _jest:=__sc.first();
      {? _jest
      || {!
         |? {? {? __sc.S>0 || exec('sc_tmp_info','magazyn_stan'); DISP.SD>0 || 0 ?}
            || 0
            || __sc.next()
            ?}
         !}
      ?}
   ?};
   {? _jest
   || _wyn:=1;
      KARO.SRDK:=__sc.SRDK;
      KARO.PRDK:=__sc.PRDK;
      VAR1.DOST:=__sc.D;
      _cecha:=null;
      DK.cntx_psh();
      DK.use(__sc.NDK);
      DK.index('DOST3');
      DK.prefix(KARO.MG,KARO.M,__sc.RDK,__sc.NDK,'T');
      {? DK.first()
      || {? DK.DK_C<>null || _cecha:=DK.DK_C ?};
         KARO.DK:=DK.ref()
      ?};
      DK.cntx_pop();
      KARO.DK_C:=_cecha;
      {? KARO.DK_C().M_ATR<>null()
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():=($('KARO.DK_C().WAR'+form(_i,-2,0,'99')))() !};
         KARO.DK_C().M_ATR().SYM;
         _srsr:=exec('atr_get_srsr','mat_atr',KARO.DK_C().M_ATR);
         {? _srsr<>null()
         || KARO.RSRSR:=$_srsr
         ?}
      || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
         M_ATR.blank(0)
      ?};
      {? KARO.IL<>0
      || exec('karo_il_ae','wyp_head')
      ?}
   || {? VAR1.DOST=date(0,0,0) || _wyn:=1 || FUN.info('Nie ma dostawy w tym dniu.'@) ?}
   ?};
   {? KARO.DK<>null()
   || DK.use(ref_name(KARO.DK));
      DK.prefix();
      {? DK.seek(KARO.DK) & DK.N<>null()
      || ND.use(ref_name(DK.N))
      ?}
   ?};
   __sc.ndx_drop(_ind);
   __sc.cntx_pop();
   __sc.prefix()
?};
_wyn


\karps_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord przed kartoteki stanu wg rodzaju wyposazenia
::   WE: _a = 1 - okno wg materiałów
::            0 - okno wg grup materiałowych
::   WY: kolor
::  OLD: \karps_rb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
params_set(params_get());
::params_exec('stan4pos','wyp_head');
Color.rekprzed({? _a=1 || '__KARPS#RS#00' || '__KARPSG#RS#00' ?})


\ref_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrucenie refa MG, ktorego nr rekordu podano parametram
::   WE: #MG.ref()
::   WY: MG.ref() lub null() gdy bledny parametr
::  OLD: \ref_mg/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0))
|| null()
||
   _odp:=null();
   MG.cntx_psh(); MG.clear(); _odp:={? MG.seek(_a,) || MG.ref() || null() ?}; MG.cntx_pop();
   _odp
?}


\ref_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zwrucenie refa M, ktorego nr rekordu podano parametram
::   WE: #M.ref()
::   WY: M.ref() lub null() gdy bledny parametr
::  OLD: \ref_m/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0))
|| null()
||
   _odp:=null();
   M.cntx_psh(); M.clear(); _odp:={? M.seek(_a,) || M.ref() || null() ?}; M.cntx_pop();
   _odp
?}


\karo_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Historia pozycji na stanie pracownika
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
params_set(params_get());
_karo_hist_grp:=KARO.grp_make('Pozycje wydań i zwrotów'@);
KARO.grp_sel(_karo_hist_grp,KARO,'WER_R',,"exec('karow_af','wyp_head')",,,8,
               "params_exec('karow_mb','wyp_head',_a)","exec('karow_ma','wyp_head',_a)",,,'maximized_with_title');
KARO.grp_splt(_karo_hist_grp,,'horizontal','SCZWR');
KARO.grp_sel(_karo_hist_grp,KARO,'WERROZL',,,,,,
               "params_exec('karoz_mb','wyp_head')","exec('karoz_ma','wyp_head')",,,'maximized_with_title');
KARO.win_sel(_karo_hist_grp);
KARO.select();
KARO.cntx_pop();
~~


\karow_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po odzwiezeniu KARO typ W
::  OLD: \karow_af/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
{? KARO.size()
|| KARO.get(); ZKARO.KAROW:=KARO.ref()
|| ZKARO.KAROW:=null()
?};
exec('karoz_set4sel','wyp_head');
grp_disp(KARO,'WERROZL',1,0);
KARO.cntx_pop();
~~


\karow_mb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed obsluga KARO typ W
::  OLD: \karow_mb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(P,'WYP_KARO')
|| '#disable'
||
::   KARO.cntx_psh();
   KARO.win_edit('RED_WYD');
   KARO.win_patt('SZUK_WYD');
   MGRP.cntx_psh();
   M.cntx_psh();
   M.clear();
   VAR1.M:=KARO.M().KTM;
   M.cntx_pop();
::   params_exec('karow_prfx','wyp_head',VAR.TRYBRODZ,VAR.TRYBPRAC);
   ~~
?}


\karow_ma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po obsludze KARO typ W
::  OLD: \karow_ma/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~grp_empty(P,'WYP_KARO')
||
::   KARO.cntx_pop();
   MGRP.cntx_pop()
?};
~~


\karoz_mb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed obsluga KARO typ<>W
::  OLD: \karoz_mb/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(P,'WYP_KARO')
|| '#disable'
|| KARO.win_patt('SZUK_ZWR');
   KARO.cntx_psh();
   MGRP.cntx_psh();
   exec('karoz_set4sel','wyp_head');
   ~~
?}


\karoz_ma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Po obsludz KARO typ<>W
::  OLD: \karoz_ma/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~grp_empty(P,'WYP_KARO')
|| KARO.cntx_pop();
   MGRP.cntx_pop()
?};
~~


\karoz_set4sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Ustawienie dziedziny i okien do select KARO typ<>W
::  OLD: \karoz_set4sel/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=#ZKARO.KAROW;
{? _ref=0 || _ref:=-1 ?};
KARO.win_edit('RED_ZWR');
KARO.index('ZWROTY');
KARO.win_sel('WERROZL');
KARO.hdr_sel();
KARO.prefix(_ref);
KARO.cntx_psh();
{? ~KARO.first()
|| exec('karo_grayed','wyp_head')
?};
KARO.cntx_pop()
::KARO.first()


\karow_prfx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Ustawienie prefiksu na okno historii wydan
::    WE: _a - wyswietlanie wg RODZO =1, wyswietlanie wg M =0 [0]
::        _b - wyswietlanie wg pracownikow =1, wyswietlanie wg kontrahentow =0 [1]
::  OLD: \karow_prfx/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=0 ?};
{? (_<2) | (_b=~~) || _b:=1 ?};
{? type_of(_a)<>type_of(0) || &_a;_a:=0 ?};
{? type_of(_b)<>type_of(0) || &_b;_b:=1 ?};
{? _a=0
|| _karo_stan:=params_get().env_karo.STAN
|| _karo_stan:=params_get().env_karo.STANG
?};
KARO.win_sel('WER_R');
KARO.hdr_sel();
{? _b=1
||
:: gdy tryb pracy na pracownika
   {? _a=0
   ||
::    dziedzina dla M
      _mat:={? _karo_stan.size() || exec('ref_m','wyp_head',_karo_stan.M) || null() ?};
      _mgrp:={? _karo_stan.size() || exec('ref_mgrp','wyp_head',_karo_stan.MGRP) || null() ?};
      KARO.index('P_WYD1M');
:: zabezpieczenie przed pusta dziedzina _karo_stan
      {? _karo_stan.size()
      || KARO.hdr_sel(' '+_karo_stan.KOD);
         {? _karo_stan.MAG<>-1
         ||
            KARO.index('P_WYD1M');
            KARO.prefix(P.ref(),'N','W',_mgrp,_mat,_karo_stan.MAG)
         ||
            KARO.index('P_WYD2M');
            KARO.prefix(P.ref(),'N','W',_mgrp,_mat)
         ?}
      ||
::       nic nie wyswietlac X,X pusta dzisdzina
         KARO.prefix(null(),'X','X',null())
      ?}
   ||
::    dziedzina dla RODZO
      KARO.index('P_WYD1');
      _mgrp:={? _karo_stan.size() || exec('ref_mgrp','wyp_head',_karo_stan.MGRP) || null() ?};
:: zabezpieczenie przed pusta dziedzina _karo_stan
      {? _karo_stan.size()
      ||
         KARO.hdr_sel(' '+_karo_stan.KOD);
         {? _karo_stan.MAG<>-1
         ||
            KARO.index('P_WYD1');
            KARO.prefix(P.ref(),'N','W',_mgrp,exec('ref_mg','wyp_head',_karo_stan.MAG))
         ||
            KARO.index('P_WYD2');
            KARO.prefix(P.ref(),'N','W',_mgrp)
         ?}
      ||
::       nic nie wyswietlac X,X pusta dzisdzina
         KARO.prefix(null(),'X','X',null())
      ?}
   ?}
||
:: gdy tryb pracy na kontrahenta
:: dziedzina dla M
   {? _a=0
   ||
      _mat:={? _karo_stan.size() || exec('ref_m','wyp_head',_karo_stan.M) || null() ?};
      KARO.index('KH_WYD1M');
:: zabezpieczenie przed pusta dziedzina _karo_stan
      {? _karo_stan.size()
      || KARO.hdr_sel(' '+_karo_stan.KOD);
         {? _karo_stan.MAG<>-1
         ||
            KARO.index('KH_WYD1M');
            KARO.prefix(FZ.KH,'N','W',_mat,_karo_stan.MAG)
         ||
            KARO.index('KH_WYD2M');
            KARO.prefix(FZ.KH,'N','W',_mat)
         ?}
      ||
:: nic nie wyswietlac X,X pusta dzisdzina
         KARO.prefix(null(),'X','X',null())
      ?}
   ||
::    dziedzina dla MGRP
      KARO.index(__khwyd1);
      _rodzo:={? _karo_stan.size() || exec('ref_mgrp','wyp_head',_karo_stan.MGRP) || null() ?};
:: zabezpieczenie przed pusta dziedzina _karo_stan
      {? _karo_stan.size()
      ||
         KARO.hdr_sel(' '+_karo_stan.KOD);
         {? _karo_stan.MAG<>-1
         ||
            KARO.index(__khwyd1);
            KARO.prefix(FZ.KH,'N','W',_rodzo,exec('ref_mg','wyp_head',_karo_stan.MAG))
         ||
            KARO.index(__khwyd2);
            KARO.prefix(FZ.KH,'N','W',_rodzo)
         ?}
      ||
::       nic nie wyswietlac X,X pusta dzisdzina
         KARO.prefix(null(),'X','X',null())
      ?}
   ?}
?}


\ref_mgrp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: zwrocenie MGRP.ref() dla podanego numeru rekordu MGRP
::   WE: _a - #MGRP.ref()
::   WY: MGRP.ref() lub null() gdy bledny parametr
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0))
|| null()
|| MGRP.cntx_psh(); MGRP.clear();
   _odp:={? MGRP.seek(_a,) || MGRP.ref() || null() ?};
   MGRP.cntx_pop();
   _odp
?}


\bd_zkaro_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed wyświetleniem
::----------------------------------------------------------------------------------------------------------------------
{? KARO.STATUS='N'
|| ZKARO.S:='Nowe'@
|? KARO.STATUS='Z'
|| ZKARO.S:='Zakończona redakcja'@
|? KARO.STATUS='T'
|| ZKARO.S:='Zaakceptowane'@
|? KARO.STATUS='D'
|| ZKARO.S:='Wygenerowano dokument'@
|| ZKARO.S:='Inny stan'@
?}


\bd_zkaro_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed wyświetleniem
::----------------------------------------------------------------------------------------------------------------------
{? KARO.TYP='Z'
|| ZKARO.TYP:='Zwrot'@
|? KARO.TYP='P'
|| ZKARO.TYP:='Przedwczesne zużycie'@
|? KARO.TYP='W'
|| ZKARO.TYP:='Wydanie'@
|| ZKARO.TYP:='Inna operacja'@
?}


\bd_zkaro_zwrot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed wyświetleniem
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1).ZWROT='T'
|| ZKARO.ZWROT:='Wymagany zwrot'@
|? cur_tab(1,1).ZWROT='B'
|| ZKARO.ZWROT:='Zwrot bez terminu'@
|? cur_tab(1,1).ZWROT='N'
|| ZKARO.ZWROT:='Niewymagany zwrot'@
|| ZKARO.ZWROT:='Nieobsłużona wartość'@
?}


\czy_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Czy biezacy rekord KARO jest zaakceptowany
::  OLD: \czy_akc/wypkaro.fml
::   WE: _a - czy wyswietlic komunikat
::   WY: 1/0 czy zaakceptowany
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0)) || _kom:=0 || _kom:=_a ?};
{? KARO.STATUS='' | KARO.STATUS='N' | KARO.STATUS='Z'
|| 0
|? KARO.STATUS='D'
|| {? _kom || FUN.emsg('Dla pozycji wygenerowano już dokumenty magazynowe.\nOperacja niedozwolona.'@) ?};
   1
|| {? _kom || FUN.emsg('Pozycja jest już zaakceptowana. Operacja niedozwolona.'@) ?};
   1
?}


\czy_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Czy biezacy rekord KARO ma przypisany dokument
::  OLD: \czy_dok/wypkaro.fml
::   WE: _a - czy wyswietlic komunikat
::   WY: 1/0 czy został wygenerowany dokument magazynowy
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0)) || _kom:=0 || _kom:=_a ?};
{? KARO.STATUS<>'D'
|| 0
|| {? _kom || FUN.emsg('Do pozycji został wygenerowanu dokument magazynowy. Operacja niedozwolona.'@) ?};
   1
?}


\czy_zwroty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Czy biezacy rekord KARO ma przypisane zwroty
::   WE: _a - czy wyswietlic komunikat
::   WY: 1/0 czy ma przypisane zwroty
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0)) || _kom:=0 || _kom:=_a ?};
KARO.cntx_psh();
KARO.index('ZWROTY');
KARO.prefix(#KARO.ref());
_jest:=KARO.first();
KARO.cntx_pop();
{? ~_jest
|| 0
|| {? _kom || FUN.emsg('Do pozycji zostały utworzone zwroty. Operacja niedozwolona.'@) ?};
   1
?}


\set_r_border
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: ustawienie granic na date i ilosc dla pozycji rozliczenia wg zapamietanego rekordu wydania
::  OLD: \set_r_border/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
KARO.clear();
KARO.seek(ZKARO.KAROW);
exec('obl_zwr4w','wyp_head');
::maksymalna ilosc jaka moze byc zwrocona
ZKARO.IL:=exec('roznica','wyp_head',1);
::najwczewsniejsza data zwrotu
ZKARO.DATA:=KARO.DATA;
~~


\set_r_bord_cntp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: ustawienie granic na date i ilosc dla pozycji rozliczenia wg zapamietanego rekordu wydania
::       z zachowaniem kontekstu KARO
::  OLD: \set_r_bord_cntp/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
KARO.clear();
KARO.seek(ZKARO.KAROW);
exec('obl_zwr4w','wyp_head');
::maksymalna ilosc jaka moze byc zwrocona
_il:=(KARO.IL-ZKARO.ILZWR-ZKARO.ILZUZ);
ZKARO.IL:={? (_il<0) || 0 || _il ?};
::najwczewsniejsza data zwrotu
ZKARO.DATA:=KARO.DATA;
KARO.cntx_pop();
~~


\roznica
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Roznica miedzy iloscia pobrana a rozliczona
::   WE: _a - <>0 to gdy ujemna to zwroc 0
::   WY: ile pozostalo na stanie z danego wydania
::  OLD: \roznica/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
:: Musi byc wczesniej podstawione ZKARO.ILZUZ, ZKARO.ILZWR
{? _<1 || _a:=0 ?};
::_il:=(KARO.IL-ZKARO.ILZWR-ZKARO.ILZUZ);
_il:=(KARO.IL- exec('obl_zwr','wyp_head','W'));
_il:={? _a & (_il<0) || 0 || _il ?};
_il


\karo_deleted_in_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Obsługa sytuacji że jest czynność na liście todo ale KARO zostało usunięte
::   WE: _a - obj_new - obiekt Menadżera Procesów
::       [_b] - INTEGER - 0/[1] - czy errorować proces, jeżeli 0 to jest robiony .done()
::   WY: ~~
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;

_error:=1;
{? var_pres('_b')=type_of(0)
|| _error:=_b
?};

_msg:=exec('karo_deleted_msg','wyp_head');
{? _mp.isService()=0
|| FUN.emsg(_msg)
?};
{? _error>0
|| _mp.error(_msg)
|| _mp.done()
?};
~~


\karo_deleted_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Komunikat o usunięciu KARO
::----------------------------------------------------------------------------------------------------------------------
'Zapis obrotu wyposażeniem nie został odnaleziony, prawdopodobnie został usunięty.'@@


\ust_polam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Ustawia pola w rekordzie KARO po wypelnieniu KARO.M
::  OLD: \ust_polam/wypkaro2.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.M().RODZO<>null()
||
   KARO.RODZO:=KARO.M().RODZO
||
   RODZO.index('KOD');
   RODZO.prefix('Brak');
   {? RODZO.first()
   ||
      KARO.RODZO:=RODZO.ref()
   ?}
?};
exec('prep_ctril','wyp_head',KARO.P);
_ctril:=exec('find_4_ctril','wyp_head',KARO.MGRP);
_max:=exec('max_il_ctril','wyp_head',_ctril,KARO.MGRP().CTRLIL);
_zwrot:=exec('zwrot_ctril','wyp_head',_ctril,KARO.MGRP().ZWROT);
_czas:=exec('czas_ctril','wyp_head',_ctril,KARO.MGRP().DCU);
_toler:=exec('toler_ctril','wyp_head',_ctril,_czas);
exec('drop_ctril','wyp_head');

KARO.DATAZ:=KARO.DATA+_czas;
KARO.TOLER:=_toler;
KARO.ZWROT:=_zwrot;
{? _zwrot='B' || KARO.DATAZ:=date(0,0,0); KARO.TOLER:=0 ?};
ZKARO.RODZO:=KARO.RODZO;
ZKARO.ZWROT:=KARO.ZWROT;
ZKARO.CZAS:=_czas;
ZKARO.TOLER:=_toler;
ZKARO.IL:=_max;
HELP.RODZO:=KARO.RODZO


\get_fifo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: Podpiecie dostawy do narzedzia
::   WE: _a - _tab(10) - tabela 10 elementow do wyszukiwania wartosci atrybutow
::  OLD: \get_fifo/wypkaro2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || return() ?};

:: czy__all:=0;
_mag:=ST.MAG; _ktm:=KARO.M;
_last:=0;
_czy_dost:=0;
_drop:=0;
SC.cntx_psh();
DK.cntx_psh();
__sc.cntx_psh();
exec('sc_tymczas','magazyn_stan',_mag,_ktm,'T',,);
{? _>0
||
   _drop:=1;
   _ndx:=__sc.ndx_tmp(,,'WAR01',,,'WAR02',,,'WAR03',,,'WAR04',,,'WAR05',,,'WAR06',,,'WAR07',,,'WAR08',,,'WAR09',,,'WAR10',,);
   __sc.index(_ndx);
   __sc.prefix(_a[1],_a[2],_a[3],_a[4],_a[5],_a[6],_a[7],_a[8],_a[9],_a[10],)
?};
{? __sc.first() & __sc.SRDK<>'' & (DK.use(form(8+__sc.SRDK)); DK.clear(); DK.seek(__sc.SRDK))
|| KARO.DK:=DK.ref();
   KARO.SRDK:=__sc.SRDK;
   KARO.PRDK:=__sc.PRDK;
   KARO.DK_C:=DK.DK_C;
   KARO.DK_C();
   VAR1.DOST:=KARO.DK().DOST
|| KARO.DK:=null();
   KARO.SRDK:='';
   KARO.PRDK:='';
   KARO.DK_C:=null();
   VAR1.DOST:=date(0,0,0)
?};
{? _drop || __sc.ndx_drop(_ndx) ?};
__sc.cntx_pop();
DK.cntx_pop();
SC.cntx_pop()


\widok_karo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Opcje widoku stanów wyposażenia
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_view:=_a;

_tab:=tab_tmp(,'VIEW','STRING[1]','Domyślny widok'@);

_red:=_tab.mk_edit('Ustawienia obszaru'@,,'p6500');
_tab.win_esep(_red,'Ustawienia'@);
_tab.win_efld(_red,_tab,'VIEW',,,,,,' ',,,'radio-buttons',,
            'Wg materiałów'@,"'M'",
            'Wg grup materiałowych'@,"'G'"
);
_tab.win_ebtn(_red,'text=%1'['Zapisz'@],'key:F2');
_tab.win_ebtn(_red,'text=%1'['Anuluj'@],'key:Esc');
_tab.win_edit(_red);

_tab.VIEW:=_view;
{? _tab.edit()
|| _view:=_tab.VIEW
?};
_view


\drop_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabel tymczasowych stanu wyposazenia u pracownika i osoby
::  OLD: \drop_stan/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('drop_rso','wyp_head'); exec('drop_rsp','wyp_head');
~~


\prep_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Tworzenie tabel tymczasowych biezacego lub przyszlego stanu wyposazenia u pracownika i osoby
::   WE: _a - sumowac pozycje niezatwierdzone jakby byly zatwierdzone 1 tak 0 nie [0]
::       _b - P.ref() [domyslnie biezacy]
::       _c - data badania stanu [dzis], jesli podana przeszla to zamieniana na biezaca
::       _d - gdy dla pozycji ZWROT='T' w dniu _c przekroczony termin uzytkowania to uznac za zwrocone 1 tak, 0 nie [0]
::       _e - uwzglednic stan przy tolerancji maksymalnej [0 -nie] gdy tak to moze byc wiecej rekordow w tabeli
::   WY: 0 - brak stanu
::       1 - niepusty stan pracownika pusty osoby
::       2 - pusty stan pracownika niepusty osoby
::       3 - niepuste oba stany
::  OLD: \prep_stan/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('drop_stan','wyp_head');
::walidacja parametrow, data jesli nie podana lub bledny parametr przyjmowana biezaca
{? (_<1) | (_a=~~) || _a:=0 ?};
{? (_<2) | (_b=~~) || _b:=P.ref() ?};
{? (_<3) | (_c=~~) || _c:=date() ?};
{? (_<4) | (_d=~~) || _d:=0 ?};
{? (_<5) | (_e=~~) || _e:=0 ?};
_ok:=(type_of(_a)=type_of(0)) & (ref_name(_b)=P.name())
     & (type_of(_c)=type_of(date())) & (type_of(_d)=type_of(0)) & (type_of(_e)=type_of(0));
_odp:=0;
{? _ok
||
:: UWAGA nie wolno zmieniac kolejnosci wywolan ponizszych procedur
   _odp+={? exec('cr_rso','wyp_head',_a,P.OSOBA,_c,_d,_e)>0 || 2 || 0 ?};
   _odp+={? exec('cr_rsp','wyp_head',_a,P.ref(),_c,_d,_e)>0 || 1 || 0 ?}
?};
_odp


\find_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Ustawienie obu stanow na informacje o wskazanym rodzaju wyposazenia
::   WE: _a - #RODZO.ref()
::   WY: 0 - brak stanu
::       1 - niepusty stan pracownika pusty osoby
::       2 - pusty stan pracownika niepusty osoby
::       3 - niepuste oba stany
::  OLD: \find_stan/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) | (type_of(_a)<>type_of(0)) | (_a<=0) || return(0)  ?};
_odp:=0;
_odp+={? (var_pres('__KARRSP') > 0) & __KARRSP.find_key(_a) || 1 || 0 ?};
_odp+={? (var_pres('__KARRSO') > 0) & __KARRSO.find_key(_a) || 2 || 0 ?};
_odp


\drop_k1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabeli zbiorczej
::  OLD: \drop_k1/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__WYP_K1');
~~


\cr_tabk1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Utworzenie tabeli na wyniki zbiorcze
::  OLD: \cr_tabk1/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
exec('drop_k1','wyp_head');
__WYP_K1:=tab_tmp(2,
   'REF','INTEGER','#P.ref()',
   'MGRP','INTEGER','#MGRP.ref()',
   'KOD','STRING[50]','Kod'@,
   'NAZ','STRING[100]','Nazwa'@,
   'NAZWIM','STRING[50]','Nazwisko i imię'@,
   'NAZWISKO','STRING[30]','Nazwisko'@,
   'IMIE','STRING[20]','Nazwisko i imię'@,
   'INFO','STRING[40]','Charakter zatrudnienia'@,
   'WYD','STRING[10]','Wydział'@,
   'S','STRING[30]','Stanowisko'@,
   'ILWYN','REAL','Ilość'@,
   'ILPOZ','REAL','Pozostało'@,
   'DATA','DATE','Data wydania'@,
   'DATAZ','DATE','Data zużycia'@,
   'TYP','STRING[1]','Typ'@
);
~~


\odhodsta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Odchylenia na biezacych stanach pracownikow
::             tworzy wykaz niedoborow lub nadmiarow u pracownikow lub stanu u pracownikow niezatrudnionych
::             musi wczesniej istniec tabela  __WYP_K1
::             uwzglednia ograniczenie usera do pracownikow do i ustawienia obszaru
::     WE: _a - parametr sterujacy dzialaniem
::                    0 - pokaz obecny stan - domyslne, 1 - nadmiary, -1 - niedobory
::             _b - 'T' zatrudnieni (domyslnie), 'N' niezatrudnieni, 'W' wszyscy
::     WY: liczba rekordow w tabeli zbiorczej
::  OLD: \odhodsta/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=0 ?};
{? (_<2) | (_b=~~) || _b:='T' ?};
{? type_of(_a)<>type_of(0) || &_a; _a:=0 ?};
{? type_of(_b)<>type_of('') || &_b; _b:='T' ?};
{? _a>1 || _a:=1
|? _a<-1 || _a:=-1
?};
_b:=1+_b; {? ('TNW'*_b)=0 || _b:='T' ?};
P.cntx_psh();
UD_SKL.cntx_psh();
OSOBA.cntx_psh();
ST.cntx_psh();
exec('filtruj_p','wyp',_b);
_psiz:=P.f_size(); _iii:=0;
{? P.f_first()
|| progress(_iii/_psiz,,'Pobieranie danych'@);
   {!
   |? {? exec('prep_ctril','wyp_head',P.ref(),0,1)
      || {? __WYNNOP.first()
         || {!
            |?
::             ustawienie na odpowiednim rekordzie w danych osoby
               _jestsos:=__WYNORO.find_key(__WYNNOP.REF);
               __WYP_K1.blank();
               __WYP_K1.REF:=#P.ref();
               __WYP_K1.NAZWIM:=exec('osoba_npd','wyp',P.OSOBA);
               __WYP_K1.NAZWISKO:=P.OSOBA().NAZWISKO;
               __WYP_K1.IMIE:=P.OSOBA().PIERWSZE;
               __WYP_K1.MGRP:=__WYNNOP.REF;
               __WYP_K1.KOD:=__WYNNOP.KOD;
               __WYP_K1.NAZ:=__WYNNOP.NAZ;
               __WYP_K1.INFO:=exec('set_p_info','wyp',P.ref());
               __WYP_K1.WYD:=P.WYDZIAL().SYMBOL;
               __WYP_K1.S:=P.ST().ST;
               {? _a=0
               || __WYP_K1.ILWYN:=__WYNNOP.ILST
               |? _a=1
               || __WYP_K1.ILWYN:=__WYNNOP.ILST-__WYNNOP.IL
               |? _a=-1
               || __WYP_K1.ILWYN:=__WYNNOP.IL-__WYNNOP.ILST;
::                zeby nie zglosic niedoboru gdy kontrolowany normatyw osoby i w skali osoby OK
                  {? (__WYP_K1.ILWYN<=0)
                     & _jestsos & (__WYNNOP.CTRLIL='O')
                     & (__WYNNOP.ILST<__WYNORO.ILST)
                  ||
::                   ilosc na stanie osoby jest wieksza niz przypisana do tego zatrudnienia, wiec moze nie ma niedoboru
                     __WYP_K1.ILWYN:=__WYNNOP.IL-__WYNORO.ILST
                  ?}
               ?};
::             w kazdej sutuacji istotne sa tylko rekordy z iloscia dodatnia
               {? __WYP_K1.ILWYN>0 || __WYP_K1.add() ?};
               __WYNNOP.next()
            !}
         ?};
::       usuniecie tabeli tymczasowej
         exec('drop_ctril','wyp_head')
      ?};
      _iii+=1;
      P.f_next()
   !};
   prgs_clr()
?};
P.f_clear();
P.cntx_pop();
UD_SKL.cntx_pop();
OSOBA.cntx_pop();
ST.cntx_pop();
:: opracowanie specjalnego indeksu dla wydruku (zalozenie, ze moga istniec pracownicy o jednakowym NAZWIM)
_ind:=__WYP_K1.ndx_tmp(,,'NAZWIM',,,'REF',,,'KOD',,);
__WYP_K1.index(_ind);
__WYP_K1.size()


\przetermpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Tworzy wykaz nierozliczonych pozycji KARO, ktorych termin zwrotu uplynal
::             musi wczesniej istniec tabela  __WYP_K1
::             uwzglednia ograniczenie usera do pracownikow do i ustawienia obszaru
::     WE: _a - data na jaka jest sprawdzanie [date()]
::     WY: liczba rekordow w tabeli zbiorczej
::  OLD: \przetermpoz/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_<1) | (_a=~~) || _a:=date() ?};
{? type_of(_a)<>type_of(date()) || &_a; _a:=date() ?};
P.cntx_psh();
UD_SKL.cntx_psh();
OSOBA.cntx_psh();
ST.cntx_psh();
KARO.cntx_psh();
exec('filtruj_p','wyp');
_psiz:=P.f_size(); _iii:=0;
{? P.f_first()
|| progress(_iii/_psiz,,'Pobieranie danych'@);
   {!
   |? KARO.index('P_WYD');
      KARO.prefix(P.ref(),'N','W');
      {? KARO.first()
      || {!
         |?
::          tylko pozycje zatwierdzone, z wymogiem zwrotu i data wczesniejsza od podanej
            {? (KARO.STATUS<>'N' & KARO.STATUS<>'Z') & (KARO.ZWROT='T') & (KARO.DATAZ<_a)
            || exec('obl_zwr4w','wyp_head');
               _ilnr:=exec('roznica','wyp_head',1);
               {? _ilnr>0
               || __WYP_K1.blank();
                  __WYP_K1.REF:=#P.ref();
                  __WYP_K1.NAZWIM:=exec('osoba_npd','wyp',P.OSOBA);
                  __WYP_K1.NAZWISKO:=P.OSOBA().NAZWISKO;
                  __WYP_K1.IMIE:=P.OSOBA().PIERWSZE;
                  __WYP_K1.MGRP:=#KARO.MGRP;
                  __WYP_K1.KOD:=exec('karo_mgrp_kod','wyp_head');
                  __WYP_K1.NAZ:=exec('karo_mgrp_naz','wyp_head');
                  __WYP_K1.INFO:=exec('set_p_info','wyp',P.ref());
                  __WYP_K1.WYD:=P.WYDZIAL().SYMBOL;
                  __WYP_K1.S:=P.ST().ST;
                  __WYP_K1.ILWYN:=KARO.IL;
                  __WYP_K1.ILPOZ:=_ilnr;
                  __WYP_K1.DATA:=KARO.DATA;
                  __WYP_K1.DATAZ:=KARO.DATAZ;
                  __WYP_K1.add()
               ?}
            ?};
            KARO.next()
         !}
      ?};
      _iii+=1;
      P.f_next()
   !};
   prgs_clr()
?};
KARO.cntx_pop();
P.f_clear();
P.cntx_pop();
UD_SKL.cntx_pop();
OSOBA.cntx_pop();
ST.cntx_pop();
:: opracowanie specjalnego indeksu dla wydruku (zalozenie, ze moga istniec pracownicy o jednakowym NAZWIM)
_ind:=__WYP_K1.ndx_tmp(,,'NAZWIM',,,'REF',,,'KOD',,,'DATA',,,'DATAZ',,);
__WYP_K1.index(_ind);
__WYP_K1.size()


\niezatwpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Tworzy wykaz niezaakceptowanych pozycji KARO
::             musi wczesniej istniec tabela  __WYP_K1
::             uwzglednia ograniczenie usera do pracownikow do i ustawienia obszaru
::     WY: liczba rekordow w tabeli zbiorczej
::  OLD: \niezatwpoz/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
UD_SKL.cntx_psh();
OSOBA.cntx_psh();
ST.cntx_psh();
KARO.cntx_psh();
exec('filtruj_p','wyp');
_psiz:=P.f_size(); _iii:=0;
{? P.f_first()
|| progress(_iii/_psiz,,'Pobieranie danych'@);
   KARO.prefix();
   {!
   |? KARO.f_set('TYP,DATA',,'"KARO"."P"=:_a and ("KARO"."STATUS"=\'N\' or "KARO"."STATUS"=\'Z\')',P.ref());
      {? KARO.f_first()
      || {!
         |? __WYP_K1.blank();
            __WYP_K1.REF:=#P.ref();
            __WYP_K1.NAZWIM:=exec('osoba_npd','wyp',P.OSOBA);
            __WYP_K1.NAZWISKO:=P.OSOBA().NAZWISKO;
            __WYP_K1.IMIE:=P.OSOBA().PIERWSZE;
            __WYP_K1.MGRP:=#KARO.MGRP;
            __WYP_K1.KOD:=exec('karo_mgrp_kod','wyp_head');
            __WYP_K1.INFO:=exec('set_p_info','wyp',P.ref());
            __WYP_K1.WYD:=P.WYDZIAL().SYMBOL;
            __WYP_K1.S:=P.ST().ST;
            __WYP_K1.TYP:=KARO.TYP;
            {? KARO.TYP='W'
            || __WYP_K1.ILWYN:=KARO.IL;
               __WYP_K1.DATA:=KARO.DATA
            || __WYP_K1.DATAZ:=KARO.DATA;
               __WYP_K1.ILPOZ:=KARO.IL;
               KARO.cntx_psh();
               _ref:=KARO.KARO;
               KARO.clear();
               {? KARO.seek(_ref,)
               || __WYP_K1.ILWYN:=KARO.IL;
                  __WYP_K1.DATA:=KARO.DATA
               ?};
               KARO.cntx_pop()
            ?};
            __WYP_K1.add();
            KARO.f_next()
         !}
      ?};
      _iii+=1;
      P.f_next()
   !};
   prgs_clr()
?};
KARO.f_clear();
KARO.cntx_pop();
P.f_clear();
P.cntx_pop();
UD_SKL.cntx_pop();
OSOBA.cntx_pop();
ST.cntx_pop();
:: opracowanie specjalnego indeksu dla wydruku (zalozenie, ze moga istniec pracownicy o jednakowym NAZWIM)
_ind:=__WYP_K1.ndx_tmp(,,'NAZWIM',,,'REF',,,'KOD',,,'TYP',,,'DATA',,,'DATAZ',,);
__WYP_K1.index(_ind);
__WYP_K1.size()


\karor_cl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Kolorowanie KARO typ R/Z w oknie wg RODZO
::  OLD: \karor_cl/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.STATUS='N' | KARO.STATUS='Z'
|| 'KARO#02#01'
|? KARO.STATUS='T'
|| 'KARO#02#00'
|| ''
?}


\karorwcl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Kolorowanie rekordu KARO typ W
::  OLD: \karorwcl/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
{? KARO.STATUS='N' | KARO.STATUS='Z'
||
:: niezatwierdzona
   'KARO#01#02'
||
:: czy rozliczona
   {? exec('karocroz','wyp_head')
   ||
::    czy pozycja nie wymagajaca zwrotu moze byc juz wydana
      {? (KARO.ZWROT='N')
         & (KARO.DATAZ>date())
         & ((KARO.DATAZ-KARO.TOLER)<=date())
      || 'KARO#01#04'
      || ''
      ?}
   ||
::    czy minal termin rozliczenia
      {? (KARO.ZWROT<>'B')&(KARO.DATAZ<date())
      || 'KARO#01#03'
      || 'KARO#01#01'
      ?}
   ?}
?}


\obl_zwr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wylicza ilość zwróconą z zaakceptowanych i niezaakceptowanych zwrotów dla danego KARO
::   WE: [_a] - 'T' - tylko zaakceptowane; 'N' - tylko niezaakceptowane; 'W' - wszystkie
::   WY: ilość ze zwrotów
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='W' ?};
_il_nowe:=0;
_il_zaakceptowane:=0;
KARO.cntx_psh();
KARO.index('ZWROTY'); KARO.prefix(#KARO.ref());
{? KARO.first()
|| {!
   |? {? KARO.STATUS='N' | KARO.STATUS='Z'
      || _il_nowe+=KARO.IL
      || _il_zaakceptowane+=KARO.IL
      ?};
      KARO.next()
   !}
?};
KARO.cntx_pop();
{? _a = 'N'
|| _il_nowe
|? _a = 'T'
|| _il_zaakceptowane
|| _il_nowe + _il_zaakceptowane
?}


\czy_na_stanie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Sprawdza, czy dla danego rekordu KARO istnieje rekord w tabeli karo_stan lub karo_stang przekazanej w env_karo
::   WE: 1 - tabela wg materiałów, 0 - tabela wg grup
::   WY: 1 - KARO jest juz w tabeli stanów, 0 - brak stanu tego wyposażenia
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')<>type_of(0) || _a:=1 ?};
_res:=0;
{? _a
|| _karo_stan:=params_get().env_karo.STAN
|| _karo_stan:=params_get().env_karo.STANG
?};
_karo_stan.cntx_psh();
{? _a
|| _karo_stan.index(params_get().env_karo.NDX);
   _karo_stan.prefix(-1,#KARO.M)
|| _karo_stan.index(params_get().env_karo.NDXG);
   _karo_stan.prefix(-1,#KARO.MGRP)
?};
_res:=_karo_stan.first();
_karo_stan.cntx_pop();
_res


\karo_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Wyszarzanie akcji w oknie wertowania KARO
::----------------------------------------------------------------------------------------------------------------------
:: Dołącz, Popraw, Usuń, Zakończ, Akceptuj, Wycofaj, zwRóć, Generuj dokument magazynowy
KARO.cntx_psh();
{? KARO.first()
|| _wer:={? KARO.TYP='W' || 'WER_R' || 'WERROZL' ?}
|| _wer:=cur_win(1,1)
?};
KARO.cntx_pop();
_selected:=(KARO.sel_size()>0);
{? KARO.STATUS='N' || _act:={? _selected || 'G' || 'AWGM(PUJ)' ?}
|? KARO.STATUS='Z' || _act:={? _selected || 'G' || 'TZWGM(PUJ)' ?}
|? KARO.STATUS='T' || _act:={? _selected || '' || 'TPUZAM(PUJ)' ?}
|? KARO.STATUS='D' || _act:={? _selected || 'G' || 'TPUZAWG' ?}
                   || _act:=''
?};
{? ~_selected & KARO.TYP='W' & (KARO.STATUS='N' | KARO.STATUS='Z' | KARO.IL<=exec('obl_zwr','wyp_head','W'))
|| _act+='TR'
?};
KARO.cntx_psh();
{? KARO.TYP<>'W'
|| KARO.prefix();
   {? KARO.seek(ZKARO.KAROW)
   || {? ~_selected & KARO.TYP='W' & (KARO.STATUS='N' | KARO.STATUS='Z' | KARO.IL<=exec('obl_zwr','wyp_head','W'))
      || _act+='D:D'
      ?}
   ?}
?};
KARO.cntx_pop();
KARO.actions_grayed(_wer,_act);
~~


\karrswcl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Kolorowanie rekordów kartoteki stanu wg materiałów
::   WY: kolor
::  OLD: \karrswcl/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_stan:=params_get().env_karo.STAN;

:: czy wystepuje chociaz jeden rekord niezatwierdzony w historii
{? _stan.S='N'
|| '__KARPS#RS#01'
||
:: czy IL=0
   {? _stan.IL>0 || '__KARPS#RS#00' || '__KARPS#RS#02' ?}
?}


\karrswclg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Kolorowanie rekordów kartoteki stanu wg podgrup materiałowych
::   WY: kolor
::  OLD: \karrswcl/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
_stan:=params_get().env_karo.STANG;

:: czy wystepuje chociaz jeden rekord niezatwierdzony w historii
{? _stan.S='N'
|| '__KARPSG#RS#01'
||
:: czy IL=0
   {? _stan.IL>0 || '__KARPSG#RS#00' || '__KARPSG#RS#02' ?}
?}


\disp_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Wyświetla dokument wygenerowany na podstawie zapisu obrotu wyposażeniem
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('disp_dk','magdok_wspolne',1,exec('FindAndGet','#table',DK,KARO.GENDK,,"$N",''),,,1);
~~


\p_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.42]
:: OPIS: Przed wyświetl dla obszaru wyposażenia
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
0


\srsr_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Przed obsługą dla okna grupowego środków trwałych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KARO.index('RSRSR');
KARO.prefix($SRST.SRSR,'W');
grp_disp(KARO,'WER_SRSR')


\srsr_bm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Przed obsługą dla okna grupowego środków trwałych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_size:={? SRST.f_active()
       || SRST.f_size<=0
       || SRST.size<=0
       ?};
{? _size
|| '#disable'
?}


\karosr_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Rekord_przed dla okna grupowego środków trwałych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
KARO.index('ZWROTY'); KARO.prefix(#KARO.ref());
ZKARO.ILZWR:=ZKARO.ILZUZ:=0;
{? KARO.first()
|| {!
   |? {? KARO.STATUS<>'N' & KARO.STATUS<>'Z' || {? KARO.TYP='Z' || ZKARO.ILZWR+=KARO.IL || ZKARO.ILZUZ+=KARO.IL ?} ?};
      KARO.next()
   !};
   ZKARO.DATA:=KARO.DATA
|| ZKARO.DATA:=date(0,0,0)
?};
KARO.cntx_pop();
{? KARO.IL=ZKARO.ILZWR+ZKARO.ILZUZ
|| ZKARO.S:='Zwrócone'@
?}


\chk_srsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Sprawdza, czy przekazany parametrem środek trwały jest w eksploatacji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_odp:=0;
SRSR.cntx_psh();
SRSR.prefix();
{? _a>0 & SRSR.seek(_a)
|| {? SRSR.DE>KARO.DATA
   || FUN.emsg('Powiązany środek trwały jeszcze nie znajduje się w eksploatacji. Wydanie niemożliwe'@)
   |? (SRSR.DES<>date(0,0,0) & SRSR.DES<KARO.DATA)
   || FUN.emsg('Powiązany środek trwały został skreślony z ewidencji. Wydanie niemożliwe.'@)
   || _odp:=1
   ?}
?};
SRSR.cntx_pop();
_odp


\st_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Przelicza tabelę _karo_stan oraz odświeża okno stanów wyposażenia. Wymaga przesłania zmiennej środowiskowej
::       _env_karo poprzez params_set/params_exec
::   WE: [_a] - czy wykonywać formułę "po odświeżeniu" odrysowywanego okienka - [1]/0
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ref:={? var_press('_a')=type_of(0) || _a || 1 ?};
{? VAR.TRYBRODZ
|| _stan:=params_get().env_karo.STANG;
   _mgrp:=_stan.MGRP;
   {? exec('reload_karms','wyp_head',P.ref(),0)
   || exec('uzu_c_karms','wyp_head',0)
   ?};
   _stan.blank(1);
   _stan.MGRP:=_mgrp;
   _stan.find_rec();
   grp_disp(_stan,params_get().env_karo.WERG,_ref)
|| _stan:=params_get().env_karo.STAN;
   _material:=_stan.M;
   {? exec('reload_karms','wyp_head',P.ref(),1)
   || exec('uzu_c_karms','wyp_head',1)
   ?};
   _stan.blank(1);
   _stan.M:=_material;
   _stan.find_rec();
   grp_disp(_stan,params_get().env_karo.WER,_ref)
?}


\karo_trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Triger po zmianie stanu rekordu KARO
::----------------------------------------------------------------------------------------------------------------------
:: Tworzenie/aktualizacja BNFTP tylko gdy wydanie/zwrot dotyczy benefitu
_bnftt:=exec('BNFTT4M','wyp_head',KARO.M);

:: UWAGA: podczytanie M
KARO.M();

{? _bnftt<>null()
|| BNFTP.cntx_psh();
   BNFTP.index('OWNER');
   {? bfld('STATUS')<>KARO.STATUS & KARO.STATUS='T'
   ||
::    Akceptacja wydania benefitu - dodaje rekord benefitu
      {? KARO.TYP='W'
      || BNFTP.prefix();
         BNFTP.blank();
         BNFTP.P:=KARO.P;
         BNFTP.BNFTT:=_bnftt;
         BNFTP.OD:=KARO.DATA;
         BNFTP.DO:=KARO.DATAZ;
         BNFTP.NOMINAL:=0;
         BNFTP.INFO:='%1 — %2'[M.KTM,M.N];
         BNFTP.OWNER:=KARO.uidref();
         BNFTP.add()

::    Akceptacja rozliczenia (czyli zwrot lub przedwczesne zużycie) benefitu
::    - zamyka rekord benefitu, czyli ustawia datę zwrotu
      |? KARO.TYP='Z' | KARO.TYP='P'
      || BNFTP.prefix(exec('FindAndGet','#table',KARO,KARO.KARO,KARO.name(),"uidref",''),);
         {? BNFTP.first()
         || BNFTP.DO:=KARO.DATA;
            BNFTP.put()
         ?}
      ?}
   |? bfld('STATUS')<>KARO.STATUS & KARO.STATUS<>'T'
   ||
::    Wycofanie akceptacji wydania benefitu - usuwa rekord benefitu
      {? KARO.TYP='W'
      || BNFTP.prefix(KARO.uidref(),);
         {? BNFTP.first() || BNFTP.del() ?}

::    Wycofanie akceptacji rozliczenia (czyli zwrotu lub przedwczesnego zużycia) benefitu
::    - otwiera rekord benefitu, czyli przywraca planowaną datę zwrotu
      |? KARO.TYP='Z' | KARO.TYP='P'
      || BNFTP.prefix(exec('FindAndGet','#table',KARO,KARO.KARO,KARO.name(),"uidref",''),);
         {? BNFTP.first()
         || BNFTP.DO:=exec('FindAndGet','#table',KARO,KARO.KARO,KARO.name(),"DATAZ",date(0,0,0));
            BNFTP.put()
         ?}
      ?}
   ?};
   BNFTP.cntx_pop()
?};

:: Zmiana statusu rozliczenia (czyli zwrotu lub przedwczesnego zużycia) powoduje 'put' wydania
:: w celu aktualizacji danych na portalu
{? KARO.TYP<>'W' & bfld('STATUS')<>KARO.STATUS
|| KARO.trig_off('*','*');
   exec('FindAndGet','#table',KARO,KARO.KARO,KARO.name(),"put(,1)",~~);
   KARO.trig_on('*','*')
?};
~~


\karo_trig_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Triger po dołączeniu rekordu KARO
::----------------------------------------------------------------------------------------------------------------------
:: Dołączenie wydania równoznaczne jest z wykorzystaniem rekordu dostawy pierwotnej w ewidencji wyposażenia.
:: Ze względów wydajnościowych znacznik nie jest usuwany, gdy wydanie dostawy jest usuwane.
{? KARO.TYP='W'
|| DK.trig_off('*','*');
   exec('FindAndGet','#table',DK,KARO.PRDK,,"{? DK.WYP<>1 || DK.WYP:=1; DK.put() ?}",~~);
   DK.trig_on('*','*')
?};
~~


\bnftp_szczegoly
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Obsługa akcji "Szczegóły - przed" w oknie WER tabeli BNFTP - prezentacja informacji źródłowej.
::       Akcja dla wskazanego rekordu tabeli KARO
::   WE: _a - KARO.uidref()
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
{? KARO.seek(_a)
|| exec('obl_zwr4w','wyp_head');
   exec('karo_disp','wyp_head',1)
?};
KARO.cntx_pop();
~~


\dk_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła oznacza rekordy dostaw pierwotnych wyposażenia, które są środkami trwałymi,
::       w celu wzbudzenia ich wysłania na portal.
::       Formułę należy użyć np. w procesie po przeliczeniu amortyzacji środków trwałych,
::       lub co miesiąc w celu pobrania wartości z bieżącego okresu
::----------------------------------------------------------------------------------------------------------------------
KARO.cntx_psh();
KARO.clear();
KARO.f_set(,,'KARO.RSRSR<>\'\'');
{? KARO.f_first()
|| {!
   |? exec('FindAndGet','#table',DK,KARO.PRDK,,"DK.put(,1)",~~);
      KARO.f_next()
   !}
?};
KARO.f_clear();
KARO.cntx_pop();
~~


\BNFTT4M
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dla danego materiału (M) zwraca typ benefitu w ramach bieżącej firmy
::   WE: _a - M.ref()
::----------------------------------------------------------------------------------------------------------------------
_material:=_a;

M_DOD.cntx_psh();
M_DOD.index('M_DOD');
M_DOD.prefix(exec('firma','ustawienia'),_material);
{? M_DOD.first()
|| _bnftt:=M_DOD.BNFTT
|| _bnftt:=null()
?};
M_DOD.cntx_pop();

_bnftt


\karo_ktm_f3_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: F3 dla pola materiał na wydaniu wyposażenia
::  OLD: \karo_ktm_f3/wypkaro.fml
::----------------------------------------------------------------------------------------------------------------------
SM.cntx_psh();
ROZMP.cntx_psh();

:: inicjalizacja obslugi atrybutow
exec('infatr','wyp_head',0);

{? POMOC.MGRW=null()
|| SM.index('ASA2');
   SM.prefix(ST.MAG,'N','T')
|? KARO.MGRP=null()
|| SM.index('ASAG');
   SM.prefix(ST.MAG,'N','T',POMOC.MGRW)
|| SM.index('ASAGP');
   SM.prefix(ST.MAG,'N','T',POMOC.MGRW,KARO.MGRP)
?};
{? VAR1.M<>''
|| SM.find_key(VAR1.M)
|| SM.first()
?};

ROZMP.index('OSOBA');
ROZMP.prefix(KARO.P().OSOBA);

_wyn:='';
ROZMP.actions('WER','DPUZJ:DZ');
_act:=SM.actions('WER','ZT:P');
_sel:=SM.grp_make('Stan wyposażenia'@,"grp_disp(ROZMP,'WER');~~",'karowm_1',,,,,'html_maximized');
SM.grp_sel(_sel,SM,'WER',,"exec('atr_rfr','wyp_head',0)",,,,,,,,'maximized_with_title');
SM.grp_splt(_sel,,'vertical','MATR');
SM.grp_sel(_sel,__infat2,__atr_sel,,,,,,,,,,'maximized_with_title');
SM.grp_splt(_sel,'MATR','horizontal','ROZMP','24,60%');
SM.grp_sel(_sel,ROZMP,'WER');
SM.win_sel(_sel);

_help:=HELP.WHERE;
HELP.WHERE:='';

{? SM.select(,1)
|| VAR1.M:=SM.M().KTM;
   KARO.M:=SM.M;
   _wyn:=SM.M().KTM;
   _tabatr:=obj_new(10);
   _tabatr[1]:=__infat2.WAR01;
   _tabatr[2]:=__infat2.WAR02;
   _tabatr[3]:=__infat2.WAR03;
   _tabatr[4]:=__infat2.WAR04;
   _tabatr[5]:=__infat2.WAR05;
   _tabatr[6]:=__infat2.WAR06;
   _tabatr[7]:=__infat2.WAR07;
   _tabatr[8]:=__infat2.WAR08;
   _tabatr[9]:=__infat2.WAR09;
   _tabatr[10]:=__infat2.WAR10;
   exec('ust_polam','wyp_head');
   exec('get_fifo','wyp_head',_tabatr)
?};

SM.actions('WER',,_act);
ROZMP.actions('WER','');

HELP.WHERE:=_help;

SM.cntx_pop();
ROZMP.cntx_pop();

_wyn


\infatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: stan wg atrybutow dostaw
::  OLD: \infatr/wypkaro.fml
::   WE: [_a] - 0(domyslnie) wg SM-a 1-wg M
::       [_b] - tabela magazynow dla opcji _a=1
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

{? var_pres('__infat2')>0 & var_pres('__ndxinfat2')>0 || __infat2.ndx_drop(__ndxinfat2) ?};
{? var_pres('__infat2')>0 & var_pres('__ndxifsql')>0 || __infat2.ndx_drop(__ndxifsql) ?};
VAR_DEL.delete('__infat2','__winatr','__aktref','__ndxinfat2');
__infat2:=tab_tmp(3
   ,'TREE','TREE_REF',''
   ,'LAB','STRING[100]',''
   ,'M_ATR','STRING[16]',''
   ,'WAR01','STRING[25]',''
   ,'WAR02','STRING[25]',''
   ,'WAR03','STRING[25]',''
   ,'WAR04','STRING[25]',''
   ,'WAR05','STRING[25]',''
   ,'WAR06','STRING[25]',''
   ,'WAR07','STRING[25]',''
   ,'WAR08','STRING[25]',''
   ,'WAR09','STRING[25]',''
   ,'WAR10','STRING[25]',''
   ,'S','REAL',''
   ,'SD','REAL',''
   ,'JM','STRING[10]',''
   ,'SQL','STRING[16]',''
);
__ndxinfat2:=__infat2.ndx_tmp(,,'TREE',,,'LAB',,,'M_ATR',,);
__ndxifsql:=__infat2.ndx_tmp(,,'SQL',,,'TREE',,1,'SD',,1);
_max:=0;
M.cntx_psh();
SM.cntx_psh();

{? ~_a
|| __aktref:=SM.ref();
   _tab:=SM.sel_aget();
   {? ~_tab.size() || _tab.blank(); _tab.REF:=#SM.ref(); _tab.add(1) ?};
   SM.sel_adel()
|| __aktref:=M.ref();
   _tab:=M.sel_aget();
   {? ~_tab.size() || _tab.blank(); _tab.REF:=#M.ref(); _tab.add(1) ?};
   M.sel_adel()
?};

{? _tab.first()
|| {!
   |? {? {? ~_a
         || (SM.clear(); SM.seek(_tab.REF,)) & SM.S>0
         || (M.clear(); M.seek(_tab.REF))
         ?}
      || __infat2.clear();
         __infat2.blank();
         __infat2.TREE:=0;
         _czy:=SM.M().M_ATR<>null;
         __infat2.LAB:=SM.M().KTM+' ['+{? _czy || SM.M().M_ATR().SYM || 'brak atrybutów dostawy' ?}+']';
         __infat2.M_ATR:={? _czy || $ SM.M().M_ATR || 'xxx' ?};
         __infat2.S:=SM.S;
         __infat2.SD:=SM.SD;
         __infat2.JM:=SM.M().J().KOD;
         __infat2.SQL:=$SM.M;
         {? _czy
         || _i:=0;
            {!
            |? _i+=1;
               {? ($('SM.M().M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
               || __infat2[_i+3]:=($('SM.M().M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))();
                  {? _max<_i || _max:=_i ?};
                  _i<10
               || 0
               ?}
            !}
         ?};
         _refk:={? __infat2.add(1) || __infat2.ref() || null ?};
         _sum_s:=0;
         _sum_sd:=0;
         {? _refk<>null
         || exec('sc_tymczas','magazyn_stan',SM.MAG,SM.M,'T');
            {? __sc.first()
            || {!
               |? {? __sc.S>0
                  || _dk_c:=exec('FindAndGet','#table',DK_C,__sc.DK_C,,"SYM");
                     {? type_of(_dk_c)<>type_of('') | _dk_c='' || _dk_c:='brak cechy dostawy' ?};
                     _rdkc:={? __sc.DK_C='' || 'xxx' || __sc.DK_C ?};
                     __infat2.clear();
                     exec('sc_tmp_info','magazyn_stan');
                     {? __infat2.find_key(_refk,_dk_c,_rdkc)
                     || __infat2.S+=__sc.S;
                        __infat2.put(1)
                     || __infat2.blank();
                        __infat2.TREE:=_refk;
                        __infat2.LAB:=_dk_c;
                        __infat2.M_ATR:=_rdkc;
                        __infat2.S:=__sc.S;
                        {! _i..10 |! __infat2[_i+3]:=($('__sc.WAR'+form(_i,-2,0,'99')))() !};
                        __infat2.JM:=SM.M().J().KOD;
                        __infat2.SQL:=$SM.M;
                        __infat2.add(1)
                     ?};
                     _sum_s+=__sc.S
                  ?};
                  __sc.next()
               !}
            ?};
            exec('sc_tymczas','magazyn_stan',SM.MAG,SM.M,'T',,'Z');
            {? __sc.first()
            || {!
               |? {? __sc.S>0
                  || _dk_c:=exec('FindAndGet','#table',DK_C,__sc.DK_C,,"SYM");
                     {? type_of(_dk_c)<>type_of('') | _dk_c='' || _dk_c:='brak cechy dostawy' ?};
                     _rdkc:={? __sc.DK_C='' || 'xxx' || __sc.DK_C ?};
                     __infat2.clear();
                     exec('sc_tmp_info','magazyn_stan');
                     {? __infat2.find_key(_refk,_dk_c,_rdkc)
                     || __infat2.SD+=DISP.SD;
                        __infat2.put(1)
                     || __infat2.blank();
                        __infat2.TREE:=_refk;
                        __infat2.LAB:=_dk_c;
                        __infat2.M_ATR:=_rdkc;
                        __infat2.SD:=DISP.SD;
                        {! _i..10 |! __infat2[_i+3]:=($('__sc.WAR'+form(_i,-2,0,'99')))() !};
                        __infat2.JM:=SM.M().J().KOD;
                        __infat2.SQL:=$SM.M;
                        __infat2.add(1)
                     ?};
                     _sum_sd+=DISP.SD
                  ?};
                  __sc.next()
               !}
            ?};
            {? __infat2.seek(_refk)
            || __infat2.S:=_sum_s;
               __infat2.SD:=_sum_sd;
               __infat2.put
            ?}
         ?}
      ?};
      _tab.next()
   !}
?};
M.cntx_pop();
SM.cntx_pop();

__atr_s2:=__infat2.mk_sel('Stan wg cech (atrybutów dostaw)'@,'P',,'#infatrsmsel',,,30,0);
__infat2.win_fld(__atr_s2,,'LAB',,,18,,1,'Indeks/Atrybuty'@);
{! _i.._max
|! __infat2.win_fld(__atr_s2,,'WAR'+form(_i,-2,0,'99'),,,7,,1,'')
!};
::__infat2.win_fld(__atr_s2,,'S',,,8,3,1,'Stan');
__infat2.win_fld(__atr_s2,,'SD',,,8,3,1,'Dostępne'@);
__infat2.win_fld(__atr_s2,,'JM',,,3,,1,'jm'@);
__infat2.win_act(__atr_s2,0,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
__infat2.win_act(__atr_s2,0,'Formuła','Zwiń/rozwiń całość'@@,,'Zwijanie/rozwijanie całości'@,
          "exec('zwrw_all','#tree','__infat2','TREE',__winatr)",,,,,,'Z');
__infat2.win_act(__atr_s2,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__infat2#01','__infatr#01')",,,,,,'L');
__infat2.win_act(__atr_s2,0,'Rekord',,,,"{? -menu_txt='dołącz' | -menu_txt='popraw'
                                          || {? __infat2.TREE=0
                                             || __infat2.actions(__atr_s2,'T',,1)
                                             || __infat2.actions(__atr_s2,'',,1)
                                             ?}
                                          ?};
                                          exec('rekprzed','color','__infat2#01')");
__infat2.win_act(__atr_s2,0,'Szukaj');
__infat2.win_act(__atr_s2,0,'Kolejność');

__infat2.win_fml(__atr_s2,,'LAB',,'ICON_BEFORE',"
         {? ~__infat2.TREE & __infat2.M_ATR<>'xxx'
         || 'xwin16.png:57'
         |? ~__infat2.TREE & __infat2.M_ATR='xxx'
         || 'xwin16.png:81'
         |? __infat2.TREE & __infat2.M_ATR<>'xxx'
         || 'xwin16.png:7'
         |? __infat2.TREE & __infat2.M_ATR='xxx'
         || 'xwin16.png:8'
         || ''
         ?}
     ");

__atr_sel:=__infat2.mk_sel('Stan wg cech (atrybutów dostaw)'@,'P',,'#infatrsmse1',,,30,1);
__winatr:=__atr_sel;

__infat2.win_fld(__atr_sel,,'LAB',,,18,,1,'Indeks/Atrybuty'@);
{! _i.._max
|! __infat2.win_fld(__atr_sel,,'WAR'+form(_i,-2,0,'99'),,,7,,1,'')
!};
__infat2.win_fld(__atr_sel,,'S',,,8,3,1,'Stan'@);
__infat2.win_fld(__atr_sel,,'SD',,,8,3,1,'Dostępne'@);
__infat2.win_fld(__atr_sel,,'JM',,,3,,1,'jm'@);
__infat2.win_act(__atr_sel,0,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
__infat2.win_act(__atr_sel,0,'Formuła','Zwiń/rozwiń całość'@@,,'Zwijanie/rozwijanie całości'@,
          "exec('zwrw_all','#tree','__infat2','TREE',__winatr)",,,,,,'Z');
__infat2.win_act(__atr_sel,0,'Formuła','Legenda'@@,,,"exec('legenda','color','__infat2#01','#__infatr#01')",,,,,,'L');
__infat2.win_act(__atr_sel,0,'Rekord',,,,"{? -menu_txt='dołącz' | -menu_txt='popraw'
                                          || {? __infat2.TREE=0
                                             || __infat2.actions(__atr_sel,'T',,1)
                                             || __infat2.actions(__atr_sel,'',,1)
                                             ?}
                                          ?};
                                          exec('rekprzed','color','__infat2#01')");
__infat2.win_act(__atr_sel,0,'Szukaj');
__infat2.win_act(__atr_sel,0,'Kolejność');

__infat2.tr_fml(__atr_sel,,"{? _a || {? __infat2.TREE=0 || 1 || _a ?} || _a ?}");
__infat2.win_fml(__atr_sel,,'LAB',,'ICON_BEFORE',"
         {? ~__infat2.TREE & __infat2.M_ATR<>'xxx'
         || 'xwin16.png:57'
         |? ~__infat2.TREE & __infat2.M_ATR='xxx'
         || 'xwin16.png:81'
         |? __infat2.TREE & __infat2.M_ATR<>'xxx'
         || 'xwin16.png:7'
         |? __infat2.TREE & __infat2.M_ATR='xxx'
         || 'xwin16.png:8'
         || ''
         ?}
     ");
__infat2.win_sel(__atr_sel);
__infat2.clear();
~~


\atr_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: odswiezenie atrybutow dostaw
::  OLD: \atr_rfr/wypkaro.fml
::   WE: [_a] 0-grp_disp, 1 - bez grp_disp
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| _a:=0
?};
__infat2.erase();
M.cntx_psh();
SM.cntx_psh();
__infat2.cntx_psh();
__infat2.index(__ndxinfat2);
__infat2.clear();
__infat2.blank();
__infat2.TREE:=0;
_czy:=SM.M().M_ATR<>null();
__infat2.LAB:=SM.M().KTM+' ['+{? _czy || SM.M().M_ATR().SYM || 'brak atrybutów dostawy' ?}+']';
__infat2.M_ATR:={? _czy || $ SM.M().M_ATR || 'xxx' ?};
__infat2.S:=SM.S;
__infat2.SD:=SM.SD;
__infat2.JM:=SM.M().J().KOD;
__infat2.SQL:=$SM.M;
{? _czy
|| _i:=0;
   _max:=0;
   {!
   |? _i+=1;
      {? ($('SM.M().M_ATR().SL_'+form(_i,-2,0,'99')))()<>null()
      || __infat2[_i+3]:=($('SM.M().M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))();
         {? _max<_i || _max:=_i ?};
         _i<10
      || 0
      ?}
   !}
?};
_refk:={? __infat2.add(1) || __infat2.ref() || null() ?};
_sum_s:=0;
_sum_sd:=0;

{? _refk<>null()
|| exec('sc_tymczas','magazyn_stan',SM.MAG,SM.M,'T');
   {? __sc.first()
   || {!
      |? {? __sc.S>0
         || _dk_c:=exec('FindAndGet','#table',DK_C,__sc.DK_C,,"SYM");
            {? type_of(_dk_c)<>type_of('') | _dk_c='' || _dk_c:='brak cechy dostawy' ?};
            _rdkc:={? __sc.DK_C='' || 'xxx' || __sc.DK_C ?};
            __infat2.clear();
            exec('obl_stan','magazyn_stan',SM.M,1,SM.MAG,,,,,,,,exec('FindAndGet','#table',DK_C,__sc.DK_C));
            {? __infat2.find_key(_refk,_dk_c,_rdkc)
            ||
               __infat2.S+=__sc.S;
               __infat2.put(1)
            || __infat2.blank();
               __infat2.TREE:=_refk;
               __infat2.LAB:=_dk_c;
               __infat2.M_ATR:=_rdkc;
               __infat2.S:=__sc.S;
               __infat2.SD:=BEER.SD;
               {! _i..10 |! __infat2[_i+3]:=($('__sc.WAR'+form(_i,-2,0,'99')))() !};
               __infat2.JM:=SM.M().J().KOD;
               __infat2.SQL:=$SM.M;
               __infat2.add(1);
               _sum_sd+=BEER.SD
            ?};
            _sum_s+=__sc.S
         ?};
         __sc.next()
      !}
   ?};
   {? __infat2.seek(_refk)
   || __infat2.S:=_sum_s;
      __infat2.SD:=_sum_sd;
      __infat2.put()
   ?}
?};
M.cntx_pop();
SM.cntx_pop();
__infat2.cntx_pop();

_ref:=exec('find_dk4osoba','wyp_head');
__infat2.seek(_ref);

{? _a=0
|| grp_disp(__infat2,__atr_sel)
?};
~~


\rekfndbt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: rekord dla __infat2
::  OLD: \rekfndbt/wypkaro2.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__infat2.TREE & __infat2.M_ATR='+'
|| '__infat2#02#01'
|? ~__infat2.TREE & __infat2.M_ATR='-'
|| '__infat2#02#02'
|| ''
?}


\rekatrbt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.10]
:: OPIS: rekord dla __infat2
::  OLD: \rekatrbt/wypkaro2.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__infat2.TREE & __infat2.M_ATR<>'xxx'
|| '__infat2#01#01'
|? ~__infat2.TREE & __infat2.M_ATR='xxx'
|| '__infat2#01#02'
|| ''
?}


\find_dk4osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyszukuje dostawę zgodną z wymaganiami osoby
::       Kontekst użycia - rekord tabeli KARO, rekord tabeli M, zaalokowana tabela __infat2
::   WY: null() / ref() tabeli __infat2
::----------------------------------------------------------------------------------------------------------------------
__infat2.cntx_psh();

_ref:=null();

M.cntx_psh();
M.clear();
M_ATR.cntx_psh();
M_ATR.clear();
M.M_ATR();
_ref:=null();
ROZMP.cntx_psh();
ROZMP.index('OSOBA');
ROZMP.prefix(KARO.P().OSOBA);
{? ROZMP.first()
|| _indszuk:='';
   _preszuk:='';
   _ii:=0;
   _sl:=null();
   {!
   |? _ii+=1;
      _for:=$('return(M_ATR.SL_' + form(_ii,-2,0)+')');
      _sl:=_for();
      ROZMP.prefix(KARO.P().OSOBA,_sl);
      {? _sl<>null & ROZMP.first()
      || _indszuk+='\'WAR'+form(_ii,-2,0)+'\',,,';
         _preszuk+='\'' + ROZMP.WAR+'\','
      ?};
      _sl<>null() | _ii=10
   !};
   {? _indszuk<>'' & _preszuk<>''
   || _for:=$('__ndx2infat2:=__infat2.ndx_tmp(,,' + _indszuk-1 + ')');
      _for();
      _for:=$'(__infat2.index(__ndx2infat2))';
      _for();
      _for:=$('__infat2.prefix(' + _preszuk-1 + ')');
      _for()
   ?};

   {? __infat2.first()
   || _ref:=__infat2.ref()
   ?};

   {? _indszuk<>'' & _preszuk<>''
   || __infat2.ndx_drop(__ndx2infat2)
   ?};

   ~~
?};
M.cntx_pop;
M_ATR.cntx_pop();
ROZMP.cntx_pop();

__infat2.cntx_pop();

_ref


\dk_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła usuwająca dokument magazynowy powiązany z wydaniem/zwrotem wyposażenia (KARO).
::       Działa na biężącym rekordzie tabeli KARO.
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
KARO.cntx_psh();
{? KARO.STATUS<>'D' | KARO.GENDK=''
|| {? KARO.TYP='W'
   || _msg:='Dokument wydania wyposażenia nie został jeszcze utworzony.'@
   || _msg:='Dokument zwrotu wyposażenia nie został jeszcze utworzony.'@
   ?};
   FUN.info(_msg);
   _ok:=0
?};

{? _ok>0
|| _dk:=KARO.GENDK;
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_dk));
   DK.prefix();
   {? DK.seek(_dk)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || exec('nd_usun','magdok_nag')
      ?}
   || FUN.info('Dokument został usunięty.'@)
   ?};
   DK.cntx_pop();
   ND.cntx_pop()
?};
KARO.cntx_pop();
~~


\nd_print
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła usuwająca dokument magazynowy powiązany z wydaniem/zwrotem wyposażenia (KARO).
::       Działa na biężącym rekordzie tabeli KARO.
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
KARO.cntx_psh();
{? KARO.STATUS<>'D' | KARO.GENDK=''
|| {? KARO.TYP='W'
   || _msg:='Dokument wydania wyposażenia nie został jeszcze utworzony.'@
   || _msg:='Dokument zwrotu wyposażenia nie został jeszcze utworzony.'@
   ?};
   FUN.info(_msg);
   _ok:=0
?};

{? _ok>0
|| _dk:=KARO.GENDK;
   ND.cntx_psh();
   DK.cntx_psh();
   DK.use(ref_name(_dk));
   DK.prefix();
   {? DK.seek(_dk)
   || ND.use(ref_name(DK.N));
      ND.prefix();
      {? ND.seek(DK.N)
      || _params:=exec('mp_run_a','#b__box');
         _params.ACT_UID:='LMG_MAG_WWDM';
         _params.UIDREF:=ND.uidref();
         _params.AKCJA:='Area Drukuj';
         _params.GRUPA:='N';
         _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
         exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ND',ND.ref());

         exec('mp_run','#b__box',_params)
      ?}
   || FUN.info('Dokument został usunięty.'@)
   ?};
   DK.cntx_pop();
   ND.cntx_pop()
?};
KARO.cntx_pop();
~~


\karo_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Ikona w oknie wertowania KARO
::----------------------------------------------------------------------------------------------------------------------
_icon:=exec('pusta','#icon');
{? KARO.STATUS='D'
|| _nd:=exec('FindAndGet','#table',DK,KARO.GENDK,,"N",null());
   {? _nd<>null()
   || _stat:=exec('FindAndGet','#table',ND,_nd,,"STAT_REJ",'');
      {? _stat='T'
      || _icon:=exec('zaakceptowany','icon')
      |? _stat='Z'
      || _icon:=exec('zarejestrowany','icon')
      ?}
   ?}
?};
_icon


\karo_protokol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Przed redagowaniem pola KARO.PROTOKOL
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? fld()='' & KARO.TYP='P'
|| _protokol:=Plugin.run('KARO_PROTOKOL_001','BE');
   {? type_of(_protokol)=type_of('')
   || fld():=_protokol
   ?}
?};
1


\karo_protokol_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Po redakcji pola KARO.PROTOKOL
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? KARO.TYP='P'
|| _protokol:=Plugin.run('KARO_PROTOKOL_001','AE');
   {? type_of(_protokol)=type_of('')
   || _res:=(_protokol='')
   ?}
?};
_res


\karo_protokol_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: F3 w polu KARO.PROTOKOL
::   WY: ''/tekst
::----------------------------------------------------------------------------------------------------------------------
_res:=fld();
_plugin:='KARO_PROTOKOL_001';

{? KARO.TYP<>'P'
|| FUN.info('W tym kontekście funkcja nie jest obsługiwana (dokument nie dotyczy przedwczesnego zużycia).'@);
   _res:=~~
|? Plugin.runnable(_plugin)
|| _protokol:=Plugin.run(_plugin,'F3');
   {? type_of(_protokol)=type_of('') & _protokol<>''
   || _res:=_protokol
   ?}
|| FUN.info('W tym kontekście funkcja nie jest obsługiwana (wtyczka %1 nie jest oprogramowana).'@[_plugin]);
   _res:=~~
?};

_res

:Sign Version 2.0 jowisz:1045 2023/12/12 06:51:04 83dff2550c1e9e4db39932389730e61f1ae3a295657ece24de89b43e2cd366487d7bdf44eef129b2d05f4c02f4fa942da6bb3700f242f445759255752fe25ab337d63b57b50ed645acab9ad152fc19cf7a78fd2fef7db60d74f5cbd52263aa0d7d619273554af70132e3165f79d75d62531018c22b9d6f440b7c08154e2ea496
