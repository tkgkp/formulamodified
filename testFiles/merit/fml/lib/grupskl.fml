:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: grupskl.fml
:: Utworzony: 22.06.2018
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Plik zawiera formuły ułatwiające wprowadzania składników list (LS) oraz stałych składników (LSS).
::            Dostępne metody:
::                - Rejestracja ręczna;
::                - Przetwarzanie automatyczne.
::            Nazwa każdej formuły w pliku rozpoczyna się od:
::                - 'r' - jeżeli dotyczy rejestrowania ręcznego;
::                - 'a' - jeżeli dotyczy przetwarzania automatycznego;
::                - '_' - jeżeli formuła jest wykorzystywana przez obie metody.
::======================================================================================================================

::======================================================================================================================
:: Formuły wspólne dla obu metod
::======================================================================================================================


\_rfset
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła ustawia filtr na tabelę R w zależności od obsługiwanego zakresu.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return(0)
?};

{? _tryb='L'
|| R.f_set('RN',,'RK not in (\'T\',\'#\',\'*\',\'G\')')
|| R.f_set('RN',,'RK=\'S\'')
?}


\_zestaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła tworzy strukturę tabeli tymczasowej, w której przechowywane będą definicje zestawów aktualizujących
::       składniki.
::   WE:
::   WY: Uchwyt tabeli tymczasowej.
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(3,
:: Nazwa (unikalny identyfikator) zestawu
   'ZZ','STRING[64]','Zestaw'@,
:: Rodzaj zestawu: S/L
   'RR','STRING[1]','Rodzaj'@,
:: Rubryka
   'RN','INTEGER','Kod'@,
   'RT','STRING[%1]' [$MS.fld_len(R,'RT')],'Nazwa'@,
:: Typ akcji:
::   == Przypisz wartość
::   +$ Dodaj wartość
::   +% Dodaj procent
::   -$ Odejmij wartość
::   -% Odejmij procent
::   -- Usuń
   'AC','STRING[2]','Typ',
   'KW','REAL','Wartość'@,
   'FM','SYS_MEMO','Formuła'@,
   'OD','DATE','Od dnia'@,
   'DO','DATE','Do dnia'@,
   'KT','STRING[%1]' [$MS.fld_len(KK,'SYM')],'Konto'@
)


\_log_ls
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła zapisuje pozycję raportu z aktualnymi wartościami tabeli LS.
::   WE:  _a  [OBJECT] - Uchwyt obiektu.
::       [_b] [STRING] - Ikona [domyślnie:''].
::       [_c] [STRING] - Dodatkowy komentarz [domyślnie:''].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_KOMM:=_a;
_ikona:={? var_pres('_b')=type_of('') || _b || '' ?};
_msg:={? var_pres('_c')=type_of('') || _c || '' ?};

_KOMM.add(
   'Kwota: %1'@ [form(LS.KW,15,2)]+ ' | '+
   'Konto: %1'@ [LS.KK().SYM]+' | '+
   _msg,
   _ikona
)


\_log_lss
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła zapisuje pozycję raportu z aktualnymi wartościami tabeli LSS.
::   WE:  _a  [OBJECT] - Uchwyt obiektu.
::       [_b] [STRING] - Ikona [domyślnie:''].
::       [_c] [STRING] - Dodatkowy komentarz [domyślnie:''].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_KOMM:=_a;
_ikona:={? var_pres('_b')=type_of('') || _b || '' ?};
_msg:={? var_pres('_c')=type_of('') || _c || '' ?};

_KOMM.add(
   'Daty: %1 - %2'@ [$LSS.OD,$LSS.DO]+' | '+
   'Kwota: %1'@ [form(LSS.KW,15,2)]+ ' | '+
   'Konto: %1'@ [LSS.KK().SYM]+' | '+
   _msg,
   _ikona
)


\_ask_recalc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Pytanie o przeliczanie listy po zmianach w składnikach ma sens, jeżeli użytkownik ma uprawnienia do czynności
::       PPL_PLL_RSKP - Rejestracja składników płacowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('chk_role','#b__box',OPERATOR.USER,'PPL_PLL_RSKP') & FUN.ask('Czy przeliczać listę po zmianach w składnikach?'@)


\_undo_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła tworzy tabelę tymczasową, w której odkładane będą zapisy - ślady zmian.
::   WE:
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
:: Pole ustalające kolejność przetwarzania formuł
   'NR','INTEGER','Numer',
:: Typ formuły:  init / cntx_psh / cntx_pop / undo
   'TYP','STRING[10]','Typ',
:: Treść formuły do wykonania
   'TRESC','SYS_MEMO','Formuła'
)


\_undo_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła definiuje parametry pliku, w którym przechowywany jest ślad zmian.
::   WE: _a [STRING] - Obsługiwany zakres danych (parametr istotny jedynie przy obsłudze metakodów):
::                         L - lista płac;
::                         S - stałe składniki.
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return(0)
?};

exec('obj_ntab_set','#array',,
   'fn','grupundo%1.upf' [_tryb],
   'echo',0,
   'sep',%1+';',
   'options','UTF-8,pth,noheader'
)


\_undo_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła zapisuje do tabeli tymczasowej elementu śladu.
::   WE:  _a  [TABLE]  - Uchwyt tabeli, w której odkładane będą zapisy - ślady zmian.
::        _b  [STRING] - Treść formuły / śladu lub metakod:
::                         #init#     - formuła wstępna, jej wynik określa czy przetwarzanie może być realizowane (1)
::                                      czy nie (0);
::                         #params#   - formuła określająca parametry wywołania, jej wynik jest przekazywany do każdej
::                                      formuły typu 'undo';
::                         #cntx_psh# - utworzenie rekordu przygotowującego środowisko;
::                         #cntx_pop# - utworzenie rekordu sprzątającego środowisko.
::       [_c] [STRING] - Obsługiwany zakres danych (parametr istotny jedynie przy obsłudze metakodów):
::                         L - lista płac;
::                         S - stałe składniki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG)
|| _UNDO:=_a
|| return(0)
?};
_tresc:={? var_pres('_b')=type_of('') || _b || '' ?};
_tryb:={? var_pres('_c')=type_of('') & (_c='L' | _c='S') || _c || '' ?};

_nr:={? _UNDO.last() || _UNDO.NR ?}+1;
_UNDO.blank();
_UNDO.NR:=_nr;
_UNDO.TYP:={? 1+_tresc='#' & _tresc+1='#' || 1-_tresc-1 || 'undo' ?};

{? _tresc='#init#' & _tryb='L'
|| _tresc:=
      '{? LS.name()<>''%1'' ' [LS.name()]+
      '|| FUN.emsg(''%1''@ [''%2'']); '
         ['Ostatnia operacja była przeprowadzana na liście %%1.\nWycofanie operacji nie jest możliwe.'@,~LS.name()]+
         '0 '
      '|? O.Z=''T'' '
      '|| FUN.emsg(''%1''@ [''%2'']); '
         ['Lista płac %%1 jest zamknięta.\Wycofanie operacji nie jest możliwe.'@,~LS.name()]+
         '0 '
      '|| 1 '
      '?}'

|? _tresc='#params#' & _tryb='L'
|| _tresc:='exec(''_ask_recalc'',''grupskl'')'

|? _tresc='#cntx_psh#'
|| _tresc:='';
   {? _tryb='L'
::    Indeks zastosowany do tabeli LS jest rozszerzeniem indeksu PRACORUB o kwotę.
   || _tresc+='LS.cntx_psh(); LS.index(LS.ndx_tmp(,,''P'',,,''RB'',,,''KK'',,,''KW'',,)); O_P.cntx_psh(); '
   || _tresc+='LSS.cntx_psh(); LSS.prefix(); '
   ?};
   _tresc+=
      'P.cntx_psh(); P.use(''%1''); P.prefix(); ' [P.name()]+
      'R.cntx_psh(); R.prefix(); '
      'KK.cntx_psh(); KK.prefix()'

|? _tresc='#cntx_pop#'
|| _tresc:=
      'KK.cntx_pop(); '
      'R.cntx_pop(); '
      'P.cntx_pop(); ';
   {? _tryb='L'
   || _tresc+='O_P.cntx_pop(); _ndx:=LS.index(''?''); LS.cntx_pop(); LS.ndx_drop(_ndx)'
   || _tresc+='LSS.cntx_pop()'
   ?}

|? _UNDO.TYP<>'undo'
|| _tresc:=''

?};

{? _tresc<>''
|| _UNDO.add();
   _UNDO.memo_set(_tresc,'TRESC');
   _UNDO.memo_put(,'TRESC')
?}


\_undo_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła tworzy plik ze śladem.
::   WE: _a [TABLE]  - Uchwyt tabeli, w której odkładane będą zapisy - ślady zmian.
::       _b [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG)
|| _UNDO:=_a
|| return(0)
?};
{? var_pres('_b')=type_of('') & (_b='L' | _b='S')
|| _tryb:=_b
|| return(0)
?};

_cfg:=exec('_undo_cfg','grupskl',_tryb);

_undo:=0;
{? _UNDO.first()
|| {!
   |? {? _UNDO.TYP='undo'
      || _undo+=1;
         0
      || _UNDO.next()
      ?}
   !}
?};
{? _undo=0
|| _txt:='Ponieważ operacja nie powiodła się, to jej wycofanie nie będzie możliwe.'@;
   {? fexists(_cfg.fn,1)
   || _txt+='\n'+'Oznacza to, że ciągle istnieje mozliwość wycofania POPRZEDNIEJ operacji.'@
   ?};
   FUN.info(_txt);
   return(0)
?};

_echo:=_cfg.echo;
_separ:=_cfg.sep;
_conv:=_cfg.options;
MS.echo==_echo;
MS.separ==_separ;
MS.conv==_conv;
_ret:=MS.export(_cfg.fn,_UNDO);
MS.echo==_echo;
MS.separ==_separ;
MS.conv==_conv;
_ret


\_undo_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła realizująca wycofanie ostatniej operacji.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return(0)
?};
_cfg:=exec('_undo_cfg','grupskl',_tryb);
{? ~fexists(_cfg.fn,1)
|| FUN.info('Brak dostępu do pliku śladu [%1].'@ [_cfg.fn]);
   return(0)

|? ~FUN.ask('Czy na pewno chcesz wycofać ostatnio wykonaną operację?'@)
|| return(0)
?};

_UNDO:=exec('_undo_tab','grupskl');

_echo:=_cfg.echo;
_separ:=_cfg.sep;
_conv:=_cfg.options;
MS.echo==_echo;
MS.separ==_separ;
MS.conv==_conv;
MS.import(_cfg.fn,_UNDO);
MS.echo==_echo;
MS.separ==_separ;
MS.conv==_conv;

{? ~_UNDO.first()
|| FUN.info('Plik śladu [%1] nie zawiera poleceń do wykonania.'@ [_cfg.fn]);
   return(0)
?};

_KOMM:=($VAR_DEL.new(,"obj_new(@.CLASS.JCQ)"))();
_KOMM.init(,,'Raport z wycofania ostatniej operacji'@);
_ikony:=exec('_ikony','grupskl');
_root:=obj_new('plp','pile','slp','sile');

_root.pile:=0;
_root.plp:=_KOMM.sect_beg('Operacje zakończone niepowodzeniem',_ikony.pC);
_KOMM.sect_end();
_root.sile:=0;
_root.slp:=_KOMM.sect_beg('Operacje zakończone sukcesem',_ikony.sC);
_KOMM.sect_end();

_ile:=0;
_params:=~~;
_again:=1;
{!
|? _again
|! _do:=_UNDO.TYP='undo';
   {? _do
   || do()
   ?};
   _ret:=($_UNDO.memo_txt(0,1,'TRESC'))(_KOMM,_ikony,_root,_params);
   {? _UNDO.TYP='undo'
   || _ile+=1
   |? _UNDO.TYP='params'
   || _params:=_ret
   ?};
   _again:=(_UNDO.TYP<>'init' | (type_of(_ret)=type_of(0) & _ret)) & _UNDO.next();
   {? _do
   || end()
   ?}
!};

{? _ile
|| ferase(_cfg.fn,1)
?};

{? _root.pile=0
|| _KOMM.del(_root.plp)
?};
{? _root.sile=0
|| _KOMM.del(_root.slp)
?};

_KOMM.select();

~~


\_kref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła zwraca wskazanie rekordu konta kosztów wskazanego parametrem lub domyślnego.
::   WE: [_a] [STRING] - Symbol konta kosztów.
::       [_b] [DATE]   - Data.
::   WY: Wskazanie rekordu konta kosztów.
::----------------------------------------------------------------------------------------------------------------------
_sym:={? var_pres('_a')=type_of('') || _a || '' ?};
_dt:={? var_pres('_b')=type_of(date()) & _b<>date(0,0,0) || _b || date() ?};

{? _sym=''
|| exec('kk_hist','pracownik',P.ref(),_dt)
|? KK.find_key(_sym,)
|| KK.ref()
|| null()
?}


\_ikony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła definiuje tablicę nazwaną z zestawem ikon wykorzystywanych w raporcie z przetwarzania.
::   WE:
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
exec('obj_ntab_set','#array',,
:  Pracownik
   'P','xwin16.png:20',
:  Sukces - kolorowa
   'sC','xwin16.png:13',
:  Porażka - kolorowa
   'pC','xwin16.png:14',
:  Sukces - szara
   'sM','xwin16.png:38',
:  Porażka - szara
   'pM','xwin16.png:81',
:  Wartości przed i po
   'przed','xwin16.png:27',
   'po','xwin16.png:28',
)


::======================================================================================================================
:: Rejestracja ręczna
::======================================================================================================================


\rmain
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Rejestracja ręczna - formuła główna.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::       _b [RULE]   - Formuła odpowiedzialna za aktualizację na poziomie jednego pracownika.
::       [_c] [STRING] - kod dziedziny, jeśli pominięty, to przyjęty zostanie PKD
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};
{? var_pres('_b')=type_of("")
|| _aktualizuj:=_b
|| return()
?};
_dom:='PKD';
{? var_pres('_c')=type_of('')
|| _dom:=_c
?};

_par:=exec('rinit','grupskl',_tryb);
{? type_of(_par)=type_of(~~)
|| return()
?};
_BUF:=_par.BUF;
_cfg:=_par.cfg;

_fzatr:=__PARSES.getVal('F_ZATR');
_view:=__PARSES.getVal('ZakresDanych');
_DOSTP:=exec('dostepne_p','schemat',_dom,{? _fzatr.REF=null() || '*T' || _fzatr.KOD ?},_view);
{? _tryb='L'
|| _P:=sql('select O_P.P as REF from O_P where O_P.O=:_a and O_P.P in (select :_b.REF from :_b)',O.ref(),_DOSTP)
|| _P:=_DOSTP
?};
obj_del(_DOSTP);
&_DOSTP;

{? _tryb='L'
|| LS.cntx_psh();
   LS.index('PRACORUB');
   KK.cntx_psh();
   KK.prefix()
?};
UD_SKL.cntx_psh();
UD_SKL.prefix();
STN.cntx_psh();
STN.prefix();
CP.cntx_psh();
CP.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
_loop:=_P.first();
{!
|? _loop
|! {? P.seek(_P.REF)
   || {? _tryb='L'
      || LS.prefix(P.ref(),_par.cfg.R);
         {? LS.first()
         || {!
            |? _BUF.TAB.blank();
               _BUF.TAB.KW:=LS.KW;
               _BUF.TAB.KKSYM:=LS.KK().SYM;
               exec('rbuftabadd','grupskl',_BUF.TAB,1);
               LS.next()
            !}
         ?};
         _BUF.TAB.blank();
         _BUF.TAB.KKSYM:=_cfg.KKSYM;
         exec('rbuftabadd','grupskl',_BUF.TAB)
      |? _tryb='S'
      || _BUF.TAB.blank();
         _BUF.TAB.OD:=_cfg.OD;
         _BUF.TAB.DO:=_cfg.DO;
         _BUF.TAB.KKSYM:=_cfg.KKSYM;
         exec('rbuftabadd','grupskl',_BUF.TAB)
      ?}
   ?};
   _loop:=_P.next()
!};
P.cntx_pop();
OSOBA.cntx_pop();
CP.cntx_pop();
STN.cntx_pop();
UD_SKL.cntx_pop();
{? _tryb='L'
|| KK.cntx_pop();
   LS.cntx_pop()
?};

params_set(_par);
{? _BUF.TAB.select()
|| exec('JCQ_decl','#message');
   _KOMM:=($VAR_DEL.new(,"obj_new(@.CLASS.JCQ)"))();
   _ikony:=exec('_ikony','grupskl');
   _root:=obj_new('plp','pile','slp','sile');

   _KOMM.init(,,'Raport z rejestracji ręcznej (%1 - %2)'@ [$_par.cfg.RRN,_par.cfg.RRT]);

   _root.pile:=0;
   _root.plp:=_KOMM.sect_beg('Operacje zakończone niepowodzeniem',_ikony.pC);
   _KOMM.sect_end();
   _root.sile:=0;
   _root.slp:=_KOMM.sect_beg('Operacje zakończone sukcesem',_ikony.sC);
   _KOMM.sect_end();

   _UNDO:=exec('_undo_tab','grupskl');

   params_set(
      'KOMM',_KOMM,
      'ikony',_ikony,
      'root',_root,
      'UNDO',_UNDO
   );

   _BUF.TAB.index(_BUF.NDX.PREF);
   _PREF:=sql('select PREF, count(*) ILE from :_a where ZMIANA=1 group by PREF',_BUF.TAB);

   _ZESTAW:=exec('_zestaw','grupskl');
   _ZESTAW.blank();
   _ZESTAW.ZZ:='-=POMOCNICZY=-';
   _ZESTAW.RR:=_tryb;
   _ZESTAW.RN:=_par.cfg.RRN;
   _ZESTAW.RT:=_par.cfg.RRT;
   _ZESTAW.AC:='==';
   _ZESTAW.add();

   exec('_undo_add','grupskl',_UNDO,'#init#',_tryb);
   exec('_undo_add','grupskl',_UNDO,'#params#',_tryb);
   exec('_undo_add','grupskl',_UNDO,'#cntx_psh#',_tryb);

   R.cntx_psh();
   R.index('RUBKOD');
   R.prefix();
   KK.cntx_psh();
   KK.index('KONTAKOD');
   KK.prefix(exec('ref_firma','ustawienia'));
   {? _tryb='L'
   || O.cntx_psh();
      O.prefix();
      LS.cntx_psh();
::    Indeks zastosowany do tabeli LS jest rozszerzeniem indeksu PRACORUB o kwotę.
      LS.index(_ndx:=LS.ndx_tmp(,,'P',,,'RB',,,'KK',,,'KW',,));
      O_P.cntx_psh();
      _recalcg:=exec('_ask_recalc','grupskl')
   || LSS.cntx_psh();
      LSS.index('PROPOZYC');
      _recalcg:=0
   ?};
   P.cntx_psh();
   P.prefix();

   _BUF.TAB.prefix(1);
   _step:=0;
   _size:=_BUF.TAB.size();

   _loop:=_PREF.first();
   {!
   |? _loop
   |! _step+=1;
      progress(100*_step/_size,'Przetwarzanie składników'@, FUN.TYT);
      {? P.seek(_PREF.PREF,)
      || _BUF.TAB.prefix(1,_PREF.PREF);
         {? _BUF.TAB.first()
         || _lp:=0;
            _sukces:=1;
            _sp:=_KOMM.sect_beg(exec('P','#to_string'),_ikony.P);
            {!
            |? _lp+=1;
               _ZESTAW.KW:=_BUF.TAB.KW;
               _ZESTAW.OD:=_BUF.TAB.OD;
               _ZESTAW.DO:=_BUF.TAB.DO;
               _ZESTAW.KT:=_BUF.TAB.KKSYM;
               _ZESTAW.put();
               _sukces:=
                  _aktualizuj(_ZESTAW,'R'+$_BUF.TAB.INIT+form(_BUF.TAB.KWK,,2,'9.'),_recalcg & _lp=_PREF.ILE) & _sukces;
               _BUF.TAB.next()
            !};
            _KOMM.sect_end();

            {? _sukces
            || _lp:=_root.slp;
               _root.sile+=1
            || _lp:=_root.plp;
               _root.pile+=1
            ?};
            _KOMM.chngroot(_sp,_lp)

         ?}
      || _sp:=_KOMM.sect_beg('%1 %2: Numer teczki - %3, Identyfikator: %4'@
            [_BUF.TAB.NAZWISKO,_BUF.TAB.PIERWSZE,_BUF.TAB.T,$_BUF.TAB.IP],_ikony.P
         );
         _KOMM.add('Pracownika nie udało się odnaleźć'@,_ikony.pC);
         _KOMM.sect_end();
         _KOMM.chngroot(_sp,_root.plp);
         _root.pile+=1
      ?};
      _loop:=_PREF.next()
   !};
   prgs_clr();

   P.cntx_pop();
   {? _tryb='L'
   || O_P.cntx_pop();
      LS.cntx_pop();
      LS.ndx_drop(_ndx);
      O.cntx_pop()
   || LSS.cntx_pop()
   ?};
   KK.cntx_pop();
   R.cntx_pop();

   exec('_undo_add','grupskl',_UNDO,'#cntx_pop#',_tryb);
   exec('_undo_export','grupskl',_UNDO,_tryb);

   {? _root.pile=0
   || _KOMM.del(_root.plp)
   ?};
   {? _root.sile=0
   || _KOMM.del(_root.slp)
   ?};

   _KOMM.select(,,
      $( '_fn:=''raportr_%1_%2.txt'' [date()$0,time()$0]; '
         '{? '+!_KOMM+'.save(_fn) '
         '|| FUN.info(''Raport zapisany do pliku [%1].''@ [_fn]) '
         '?}'
      )
   )
?}


\rinit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Rejestracja ręczna - formuła inicjująca. Odpowiada za środowisko.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY: Tablica nazwana z elementami środowiska lub ~~ w przypadku błędnego wywołania.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};

_cfg:=exec('rcfg','grupskl',_tryb);
{? ~obj_ntab(_cfg) | ~_cfg.OK
|| return()
?};
_BUF:=exec('rbuf','grupskl',_cfg);

exec('obj_ntab_set','#array',,
   'cfg',_cfg,
   'BUF',_BUF,
   'buf',obj_new('KWT','KW','DTT','OD','DO','KKT','KKSYM')
)


\roddo_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła biblioteczna, do wykorzystania podczas sprawdzania poprawności dat.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);
_d0:=date(0,0,0);
_ret:='';
{? _TAB.DO<>_d0
|| {? _TAB.OD=_d0
   || FUN.emsg(
         'Jeżeli podana jest wartość "%1" to należy podać również "%2".'@
         [MS.name(_TAB,'DO'),MS.name(_TAB,'OD')]
      );
      _ret:='OD'
   |? _TAB.DO<_TAB.OD
   || FUN.emsg('Wartość "%1" nie może być mniejsza niż wartość "%2".'@ [MS.name(_TAB,'DO'),MS.name(_TAB,'OD')]);
      _ret:='DO'
   ?}
?};
_ret


\rcfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiada za pobranie parametrów ręcznego wprowadzania danych.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY: Tablica nazwana z parametrami lub ~~ w przypadku błędnego wywołania.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};

_d0:=date(0,0,0);
_ret:=exec('obj_ntab_set','#array',,
   'OK',0,
   'tryb',_tryb,
   'R',null(),
   'RRN',0,
   'RRT','',
   'OD',_d0,
   'DO',_d0,
   'KK',null(),
   'KKSYM',''
);

LS.cntx_psh();
LS.blank(1);
_fmlLS:=exec('save_fml_all','#field',LS);
exec('set_fml_type','#field',LS,'BEFORE_DISPLAY',"");
exec('set_fml_type','#field',LS,'BEFORE_EDIT',"");
exec('set_fml_type','#field',LS,'AFTER_EDIT',"");

_filtrR:=exec('get','#filter',R);
R.cntx_psh();
R.prefix();
exec('_rfset','grupskl',_tryb);
R.win_dict('SLO');
R.win_edit('RED');

_filtrKK:=exec('get','#filter',KK);
KK.cntx_psh();
KK.f_clear();
KK.index('KONTAKOD');
KK.prefix(exec('ref_firma','ustawienia'));

_PAR:=tab_tmp(1,
   'OD','DATE','Od dnia'@,
   'DO','DATE','Do dnia'@
);

_width:=30;
_tytul:=
   {? _tryb='L'
   || 'Grupowe wprowadzanie składników listy'@
   || 'Grupowe wprowadzanie stałych składników'@
   ?};
_we:=_PAR.mk_edit(_tytul,,'#grsklpar'+(-_tryb));
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,LS,'RB','RN','*',_width,,,MS.name(LS,'RB'),,MS.comment(R,'RN'));
_PAR.win_efld(_we,LS,'RB','RT',,_width,,1,,1);
{? _tryb='S'
|| _PAR.win_efld(_we,,'OD',,,,,,,,MS.comment(LSS,'OD'));
   _PAR.win_efld(_we,,'DO',,,,,,,,MS.comment(LSS,'DO'))
?};
_PAR.win_efld(_we,LS,'KK','SYM','KONTAKOD',_width,,,MS.name(LS,'KK'),,MS.comment(KK,'SYM'));
_PAR.win_efld(_we,LS,'KK','NAZWA',,_width,,1,,1);
exec('ok_esc','#window',_PAR,_we);
_PAR.win_edit(_we);

_PAR.efld_opt(_we,'mark=1',LS,'RB','RN');

{? _PAR.edit($("exec('rcfg_ae','grupskl','"+_tryb+"')"))
|| _ret.OK:=1;
   _ret.R:=LS.RB;
   _ret.RRN:=LS.RB().RN;
   _ret.RRT:=LS.RB().RT;
   _ret.OD:=_PAR.OD;
   _ret.DO:=_PAR.DO;
   _ret.KK:=LS.KK;
   _ret.KKSYM:=LS.KK().SYM
?};

KK.cntx_pop();
exec('set','#filter',KK,_filtrKK);

R.cntx_pop();
exec('set','#filter',R,_filtrR);

exec('restore_fml_all','#field',LS,_fmlLS);
LS.cntx_pop();

_ret


\rcfg_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła sprawdzająca poprawność parametrów wprowadzania ręcznego.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};

{? (_ret:=__CHK.record(LS,,'RB'))<>''
|| return(_ret)
|? _tryb='S' & (_ret:=exec('roddo_ae','grupskl'))<>''
|| return(_ret)
?};

_ret


\rbuftabadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła pomocnicza - nadaje wartości polom związanym z pracownikiem, uzupełnia pola techniczne i dodaje rekord.
::   WE:  _a  [TABLE]   - Uchwyt tabeli (patrz \tab).
::       [_b] [INTEGER] - Czy rekord z wartością początkową [0*/1].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG)
|| _TAB:=_a
|| return(0)
?};
:: Dane o pracowniku
_TAB.IP:=P.IP;
_TAB.T:=P.T;
_TAB.NAZWISKO:=P.OSOBA().NAZWISKO;
_TAB.PIERWSZE:=P.OSOBA().PIERWSZE;
_TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
_TAB.STN:=P.ST().ST;
_TAB.CP:=P.CP().CP;
:: Pola techniczne
_TAB.PREF:=#P.ref();
_TAB.KWK:=_TAB.KW;
_TAB.KKSYMK:=_TAB.KKSYM;
::
_TAB.INIT:=var_pres('_b')=type_of(0) & _b;
_TAB.ZMIANA:=0;
::
_TAB.add()


\rbuf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła przygotowuje tabelę tymczasową i interfejs do ręcznego wprowadzania danych.
::       Uwaga: do prawidłowego działania okno wertowania wymaga ustawienia odpowiednich parametrów.
::   WE: _a [ARRAY]  - Tablica z parametrami (patrz \rpar).
::   WY: Tablica z elementami nazwanymi ~~ w przypadku błędnego wywołania.
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & obj_ntab(_a)
|| _cfg:=_a
|| return()
?};

_BUF:=obj_new('TAB','NDX','ws','we1','weg');

_title:=
   {? _cfg.tryb='L'
   || 'Składnik listy: %1 - %2 [%3]'@ [$_cfg.RRN,_cfg.RRT,~O.LT]
   || 'Stały składnik: %1 - %2'@ [$_cfg.RRN,_cfg.RRT]
   ?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Tabela

_BUF.TAB:=tab_tmp(1,
:: Dane o pracowniku
   'IP','INTEGER',MS.name(P,'IP'),
   'T','STRING[%1]' [$MS.fld_len(P,'T')],MS.name(P,'T'),
   'NAZWISKO','STRING[%1]' [$MS.fld_len(OSOBA,'NAZWISKO')],MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING[%1]' [$MS.fld_len(OSOBA,'PIERWSZE')],MS.name(OSOBA,'PIERWSZE'),
   'WYDZIAL','STRING[%1]' [$MS.fld_len(UD_SKL,'SYMBOL')],MS.name(P,'WYDZIAL'),
   'STN','STRING[%1]' [$MS.fld_len(STN,'ST')],MS.name(P,'ST'),
   'CP','STRING[%1]' [$MS.fld_len(CP,'CP')],MS.name(P,'CP'),
:: Wartości pobrane / wprowadzone
   'KW','REAL','Wartość'@,
:: Pola OD, DO wykorzystywane są tylko dla stałych składników
   'OD','DATE','Od daty'@,
   'DO','DATE','Do daty'@,
   'KKSYM','STRING[%1]' [$MS.fld_len(KK,'SYM')],MS.name(P,'KK'),
:: Pola techniczne
   'PREF','INTEGER','#P.ref()',
   'RRN','INTEGER','R.RN',
   'KWT','STRING[1]','Czy zmiana wartości?'@,
   'DTT','STRING[1]','Czy zmiana dat?'@,
   'KKT','STRING[1]','Czy zmiana konta kosztów?'@,
:: Pola techniczne do obsługi interfejsu
   'KWK','REAL','Wartość (kopia)',
   'KKSYMK','STRING[%1]' [$MS.fld_len(KK,'SYM')],'Symbol konta (kopia)',
   'INIT','INTEGER','Składnik z wartością początkową',
   'ZMIANA','INTEGER','Czy wartość zmieniona?'
);
_BUF.TAB.fld_attr(,2);
_BUF.TAB.fld_fml('T','DISPLAY_FORMAT',exec('alignment_right_cnd','#field'));
_BUF.TAB.fld_fml('RRN','BLANK',$$_cfg.RRN);
_BUF.TAB.fld_fml('KWT','AFTER_EDIT',"exec('rbuftab_efld_opt','grupskl')");
_BUF.TAB.fld_fml('DTT','AFTER_EDIT',"exec('rbuftab_efld_opt','grupskl')");
_BUF.TAB.fld_fml('KKT','AFTER_EDIT',"exec('rbuftab_efld_opt','grupskl')");

_BUF.NDX:=obj_new('NAIM','PREF');
_BUF.NDX.NAIM:=_BUF.TAB.ndx_tmp(,,'NAZWISKO',,,'PIERWSZE',,);
_BUF.NDX.PREF:=_BUF.TAB.ndx_tmp(,,'ZMIANA',,,'PREF',,);
_BUF.TAB.index(_BUF.NDX.NAIM);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Okno wertowania

_BUF.ws:=_BUF.TAB.mk_sel(,,,'#sgrskl'+(-_cfg.tryb),,,,,'U');
_BUF.TAB.win_fld(_BUF.ws,,'IP',,,-4,,,,,MS.comment(P,'IP'));
_BUF.TAB.win_fld(_BUF.ws,,'T',,,-9,,,,,MS.comment(P,'T'));
_BUF.TAB.win_fld(_BUF.ws,,'NAZWISKO',,,-20,,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.TAB.win_fld(_BUF.ws,,'PIERWSZE',,,-15,,,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.TAB.win_fld(_BUF.ws,,'WYDZIAL',,,-16,,,,,MS.comment(P,'WYDZIAL'));
_BUF.TAB.win_fld(_BUF.ws,,'STN',,,-20,,,,,MS.comment(P,'ST'));
_BUF.TAB.win_fld(_BUF.ws,,'CP',,,-9,,,,,MS.comment(P,'CP'));
_BUF.TAB.win_fld(_BUF.ws,,'KW',,,-12,2,,,,'Wartość'@);
{? _cfg.tryb='S'
|| _BUF.TAB.win_fld(_BUF.ws,,'OD',,,-10,,,,,MS.comment(LSS,'OD'));
   _BUF.TAB.win_fld(_BUF.ws,,'DO',,,-10,,,,,MS.comment(LSS,'DO'))
?};
_BUF.TAB.win_fld(_BUF.ws,,'KKSYM',,,-20,,,,,MS.comment(P,'KK'));
_BUF.TAB.win_act(_BUF.ws,,'Formuła','Popraw'@@,,'Wprowadzenie wartości'@,
:: Popraw - przed
   "  params_set(_par:=params_get());
      _BUF:=_par.BUF;
      {? _BUF.TAB.sel_size()
      || _cfg:=_par.cfg;
         _buf:=_par.buf;
         {? _buf.KWT='T'
         || _BUF.TAB.KW:=_buf.KW
         ?};
         {? _cfg.tryb='S' & _buf.DTT='T'
         || _BUF.TAB.OD:=_buf.OD;
            _BUF.TAB.DO:=_buf.DO
         ?};
         {? _buf.KKT='T' & (_cfg.tryb='S' | ~_BUF.TAB.INIT)
         || _BUF.TAB.KKSYM:=_buf.KKSYM
         ?};
         1
      || P.cntx_psh();
         P.prefix();
         KK.cntx_psh();
         KK.index('KONTAKOD');
         KK.prefix(exec('ref_firma','ustawienia'));
         P.KK:={? KK.find_key(_BUF.TAB.KKSYM,) || KK.ref() || null() ?};
         _cfg:=_par.cfg;
         _we:=_BUF.TAB.win_edit('?');
         _pkkoff:=_cfg.tryb='L' & _BUF.TAB.INIT;
         {? _pkkoff
         || _BUF.TAB.efld_opt(_we,'editable=0',P,'KK')
         ?};
         exec('rbuftab_efld_opt','grupskl','*',_BUF.TAB,_we);
         {? _ret:=_BUF.TAB.edit(""params_exec('rbuftab_ae','grupskl','1')"")
         || _BUF.TAB.KKSYM:=P.KK().SYM
         ?};
         {? _pkkoff
         || _BUF.TAB.efld_opt(_we,'editable=1',P,'KK')
         ?};
         KK.cntx_pop();
         P.cntx_pop();
         _ret
      ?}
   ",
:: Popraw - po
   "  _TAB:=cur_tab(1,1);
      _TAB.ZMIANA:=_TAB.KWK<>_TAB.KW;
      _TAB.put();
      {? ~_TAB.sel_size()
      || _TAB.next()
      ?}
   ",1,1,
:: Popraw - grupa przed
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _BUF:=_par.BUF;
      _buf:=_par.buf;
      _BUF.TAB.cntx_psh();
      _BUF.TAB.win_edit(_BUF.weg);
      _BUF.TAB.blank(1);
      _BUF.TAB.KWT:='N';
      _BUF.TAB.DTT:='N';
      _BUF.TAB.KKT:='N';
      exec('rbuftab_efld_opt','grupskl','*',_BUF.TAB,_BUF.weg);
      P.cntx_psh();
      KK.cntx_psh();
      KK.index('KONTAKOD');
      KK.prefix(exec('ref_firma','ustawienia'));
      P.KK:=null();
      {? _BUF.TAB.edit(""params_exec('rbuftab_ae','grupskl','g')"") &
         (_BUF.TAB.KWT<>'N' | _BUF.TAB.DTT<>'N' | _BUF.TAB.KKT<>'N')
      || _ret:=1;
         _buf.KWT:=_BUF.TAB.KWT;
         _buf.KW:=_BUF.TAB.KW;
         {? _cfg.tryb='S'
         || _buf.DTT:=_BUF.TAB.DTT;
            _buf.OD:=_BUF.TAB.OD;
            _buf.DO:=_BUF.TAB.DO
         ?};
         _buf.KKT:=_BUF.TAB.KKT;
         _buf.KKSYM:=P.KK().SYM
      || _ret:=0
      ?};
      KK.cntx_pop();
      P.cntx_pop();
      _BUF.TAB.cntx_pop();
      _ret
    ",,
    'P'
);
_BUF.TAB.win_act(_BUF.ws,,'Formuła','Dalej'@@,,'Wprowadzenie danych'@,"sel_exit()",,,,,,'D',,'target=window');
_BUF.TAB.win_act(_BUF.ws,,'Formuła','Legenda'@@,,,$("exec('legenda','color','__grskl#"+_cfg.tryb+"#')"),,,,,,
   'L',,'target=window'
);
_BUF.TAB.win_act(_BUF.ws,,'Szukaj');
_BUF.TAB.win_act(_BUF.ws,,'Kolejność');
_BUF.TAB.win_act(_BUF.ws,,'Rekord',,,,
   $("_TAB:=cur_tab(1,1);
      {? _TAB.ZMIANA
      || exec('rekprzed','color','__grskl#"+_cfg.tryb+"#01')
      |? _TAB.INIT
      || exec('rekprzed','color','__grskl#"+_cfg.tryb+"#00')
      ?}
   ")
);
_BUF.TAB.win_act(_BUF.ws,,'Wyświetl',,,,
   "  params_set(_par:=params_get());
      _BUF:=_par.BUF;
      exec('rbuftab_efld_opt','grupskl','*',_BUF.TAB,_BUF.we1);
      P.cntx_psh();
      P.prefix();
      KK.cntx_psh();
      KK.index('KONTAKOD');
      KK.prefix(exec('ref_firma','ustawienia'));
      P.KK:={? KK.find_key(_BUF.TAB.KKSYM,) || KK.ref() || null() ?};
      _BUF.TAB.display();
      KK.cntx_pop();
      P.cntx_pop()
   "
);
_BUF.TAB.win_btn(_BUF.ws,'text=%1,panel=right,align=begin' ['Popraw'@],'menu:P');
_BUF.TAB.win_btn(_BUF.ws,'text=%1,icon=%2,panel=bottom' ['Dalej'@,'xwin16.png:23'],'menu:D');

_grp:=_BUF.TAB.grp_make(_title,,'#ggrskl'+(-_cfg.tryb),,,
   "  {? _a<>'sel_exit'
      || return(FUN.ask('Czy na pewno rezygnujesz z dalszego przetwarzania?'@))
      ?};
      params_set(_par:=params_get());
      _cfg:=_par.cfg;
      _TAB:=cur_tab(1,1);
      _TAB.cntx_psh();
      _zmiana:=0;
      _loop:=_TAB.first();
      {!
      |? _loop
      |! _zmiana+=_TAB.ZMIANA;
         _loop:=_TAB.next()
      !};
      _TAB.cntx_pop();
      {? _zmiana
      || FUN.ask(
            {? _cfg.tryb='L'
            || 'Za chwilę wprowadzone przez Ciebie informacje zostaną umieszczone na liście płac.'@
            || 'Za chwilę wprowadzone przez Ciebie informacje zostaną umieszczone w tabeli stałych składników.'@
            ?}+'\n'+
            'Czy na pewno chcesz kontynuować?'@
         )
      || FUN.info('Żadna wartość nie została wprowadzona.'@);
         0
      ?}
   ",,
   'html_maximized'
);
_BUF.TAB.grp_sel(_grp,,_BUF.ws,,,,,,,,,,'maximized');
_BUF.TAB.win_sel(_grp);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Okno redagowania (podstawowe)

_width:=35;
_BUF.we1:=_BUF.TAB.mk_edit(_title,,'#rgrskl1'+(-_cfg.tryb),,,'html_maximized');
_BUF.TAB.win_esep(_BUF.we1,'Pracownik'@);
_BUF.TAB.win_efld(_BUF.we1,,'IP',,,_width,,1,,,MS.comment(P,'IP'));
_BUF.TAB.win_efld(_BUF.we1,,'T',,,_width,,1,,,MS.comment(P,'T'));
_BUF.TAB.win_efld(_BUF.we1,,'NAZWISKO',,,_width,,1,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.TAB.win_efld(_BUF.we1,,'PIERWSZE',,,_width,,1,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.TAB.win_efld(_BUF.we1,,'WYDZIAL',,,_width,,1,,,MS.comment(P,'WYDZIAL'));
_BUF.TAB.win_efld(_BUF.we1,,'STN',,,_width,,1,,,MS.comment(P,'ST'));
_BUF.TAB.win_efld(_BUF.we1,,'CP',,,_width,,1,,,MS.comment(P,'CP'));
{? exec('interm','#system') || _BUF.TAB.win_ecol(_BUF.we1,'33%') ?};
_BUF.TAB.win_esep(_BUF.we1,'Dane podstawowe'@);
_BUF.TAB.win_efld(_BUF.we1,,'KW',,,_width);
{? _cfg.tryb='S'
|| _BUF.TAB.win_efld(_BUF.we1,,'OD',,,);
   _BUF.TAB.win_efld(_BUF.we1,,'DO',,,)
?};
_BUF.TAB.win_efld(_BUF.we1,P,'KK','SYM','KONTAKOD',_width-3,,,MS.name(P,'KK'),,MS.comment(KK,'SYM'));
_BUF.TAB.win_efld(_BUF.we1,P,'KK','NAZWA',,_width-3,,1,,1,MS.comment(KK,'NAZWA'));
exec('ok_esc','#window',_BUF.TAB,_BUF.we1,,,,,,,exec('text_red_ok','#window'));

_BUF.TAB.win_edit(_BUF.we1);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Okno redagowania dla akcji grupowej

_BUF.weg:=_BUF.TAB.mk_edit(_title,,'#rgrsklg'+(-_cfg.tryb));
_BUF.TAB.win_esep(_BUF.weg,'Wartość'@);
_BUF.TAB.win_efld(_BUF.weg,,'KWT',,,,,,'Zmień'@,,,'check-box','check_label="%1"' ['Tak, zmień wartość'@],"'T'","'N'");
_BUF.TAB.win_efld(_BUF.weg,,'KW',,,_width);
{? _cfg.tryb='S'
|| _BUF.TAB.win_ecol(_BUF.weg);
   _BUF.TAB.win_esep(_BUF.weg,'Okres'@);
   _BUF.TAB.win_efld(_BUF.weg,,'DTT',,,,,,'Zmień'@,,,'check-box','check_label="%1"' ['Tak, zmień okres'@],"'T'","'N'");
   _BUF.TAB.win_efld(_BUF.weg,,'OD',,,);
   _BUF.TAB.win_efld(_BUF.weg,,'DO',,,)
?};
_BUF.TAB.win_ecol(_BUF.weg);
_BUF.TAB.win_esep(_BUF.weg,'Konto kosztów'@);
_BUF.TAB.win_efld(_BUF.weg,,'KKT',,,,,,'Zmień'@,,,'check-box','check_label="%1"' ['Tak, zmień konto kosztów'@],
   "'T'","'N'"
);
_BUF.TAB.win_efld(_BUF.weg,P,'KK','SYM','KONTAKOD',_width-3,,,MS.name(P,'KK'),,MS.comment(KK,'SYM'));
_BUF.TAB.win_efld(_BUF.weg,P,'KK','NAZWA',,_width-3,,1,,1,MS.comment(KK,'NAZWA'));
exec('ok_esc','#window',_BUF.TAB,_BUF.weg,,,,,,,exec('text_red_ok','#window'));

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_BUF


\rbuftab_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli _BUF.TAB.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(SYSLOG)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='KWT'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.KWT<>'N')],,'KW')
?};
{? _fld='' | _fld='DTT'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.DTT<>'N')],,'OD');
   _TAB.efld_opt(_we,'enable=%1' [$(_TAB.DTT<>'N')],,'DO')
?};
{? _fld='' | _fld='KKT'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.KKT<>'N')],P,'KK')
?};

1


\rbuftab_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła weryfikująca wprowadzone dane.
::   WE: [_a] [STRING] - Tryb pracy:
::                         '1' - Obsługa akcji Popraw dla bieżącego wiersza [domyślnie].
::                         'g' - Obsługa akcji grupowej Popraw.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='l' | _a='g') || _a || '1' ?};

_par:=params_get();
_cfg:=_par.cfg;
_BUF:=_par.BUF;

_ret:='';
{? _cfg.tryb='S' & _BUF.TAB.KW<0
|| _ret:=__CHK.err_fld(_BUF.TAB,'KW',1,'Wartość nie może być ujemna.'@)
|? _cfg.tryb='S' & (_tryb='1' | _BUF.TAB.DTT='T')
|| _ret:=exec('roddo_ae','grupskl')
?};
_ret


::======================================================================================================================
:: Przetwarzanie automatyczne
::======================================================================================================================


\amain
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Przetwarzanie automatyczne - formuła główna.
::   WE:  _a  [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::        _b  [RULE]   - Formuła odpowiedzialna za aktualizację na poziomie jednego pracownika.
::       [_c] [STRING] - Kod dziedziny produktowej. Wartość domyślna zależy od wartości parametru _a.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};
{? var_pres('_b')=type_of("")
|| _aktualizuj:=_b
|| return()
?};
{? var_pres('_c')=type_of('') & exec('domain_ref','#b_domain',_c)<>null()
|| _domain:=_c
|| _domain:={? _tryb='L' || 'PPL' || 'PKD' ?}
?};

exec('JCQ_decl','#message');
_KOMM:=($VAR_DEL.new(,"obj_new(@.CLASS.JCQ)"))();
_ikony:=exec('_ikony','grupskl');
_root:=obj_new('plp','pile','slp','sile');

:: Parametry
_cfg:=obj_new('tryb','nav','DOMAIN','UD_SKL','F_ZATR','VIEW','SQL_FROM','SQL_WHERE');
_cfg.tryb:=_tryb;
_cfg.nav:=obj_new('main','side');
_cfg.DOMAIN:=_domain;
_cfg.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_cfg.F_ZATR:=__PARSES.getVal('F_ZATR').KOD;
_cfg.VIEW:=__PARSES.getVal('ZakresDanych');
_cfg.SQL_FROM:='';
{? _tryb='S'
|| _cfg.SQL_WHERE:=''
|| _cfg.SQL_WHERE:='P.REFERENCE in (select O_P.P from O_P where O_P.O=''%1'' order by 1)' [$VAR.O]
?};

params_set(
   'tryb',_tryb,
   'cfg',_cfg,
   'aktualizuj',_aktualizuj,
   'KOMM',_KOMM,
   'ikony',_ikony,
   'root',_root
);

_wnd:=exec('awnd','grupskl',_cfg);

_schemat:=exec('domyslny','schemat','PODZORG');
P_FILTER.UD_SCH==_schemat;

_fUDDEF:=exec('get','#filter',UD_DEF);
UD_DEF.cntx_psh();
UD_DEF.f_clear();
UD_DEF.index('SYMBOL');
UD_DEF.prefix(P_FILTER.UD_SCH);
UD_DEF.first();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
UD_DEF.win_sel(_wnd);
UD_DEF.select(,1,-1);
P.f_clear();
P.cntx_pop();
OSOBA.cntx_pop();
UD_DEF.cntx_pop();
exec('set','#filter',UD_DEF,_fUDDEF);

P_FILTER.UD_SCH==_schemat;

~~


\awnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Budowa głównego okna grupowego interfejsu.
::   WE: _a [ARRAY] - Tablica elementów nazwanych z konfiguracją.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_cfg:=_a;

: Najpierw zwykłe okno do prezentacji współpracowników.
_acr:='GRSKLP'+_cfg.tryb;
: użyj istniejące okienko
{? (_ws:=__WND.SEL.get(P,_acr))=''
|| _ws:=P.mk_sel(,'P',,'#grskl'+(-_cfg.tryb),,,,,'U','T',,,,'html_maximized');
   P.win_fld(_ws,,'T',,,9,,,,,MS.comment(P,'T'));
   P.win_fld(_ws,,'IP',,,-5,,,,,MS.comment(P,'IP'));
   P.win_fld(_ws,,'OSOBA','NAZWISKO',,20,,,,,MS.comment(OSOBA,'NAZWISKO'));
   P.win_fld(_ws,,'OSOBA','PIERWSZE',,15,,,,,MS.comment(OSOBA,'PIERWSZE'));
   P.win_fld(_ws,,'OSOBA','PESEL',,11,,,,,MS.comment(OSOBA,'PESEL'));
   P.win_fld(_ws,,'F_ZATR','KOD',,-2,,,MS.name(P,'F_ZATR'),,MS.comment(F_ZATR,'KOD'));
   P.win_fld(_ws,,'WYDZIAL','SYMBOL',,-16,,,MS.name(P,'WYDZIAL'),,'Symbol jednostki organizacyjnej'@);
   P.win_fld(_ws,,'ST','ST',,18,,,MS.name(P,'ST'),,MS.comment(STN,'ST'));
   P.win_fld(_ws,,'ZA',,,-5,,,MS.name(P,'ZA'),,MS.comment(P,'ZA'),2,,"'T'","'N'");

   _komsel:=
      "  params_set(_par:=params_get());
         _KOMM:=_par.KOMM;
         {? _KOMM.is_inited() & _KOMM.get_size()
         || _KOMM.select(,,
               $( '_fn:=''raporta_%1_%2.txt'' [date()$0,time()$0]; '
                  '{? '+!_KOMM+'.save(_fn) '
                  '|| FUN.info(''Raport zapisany do pliku [%1].''@ [_fn]) '
                  '?}'
                )
            )
         || FUN.info('Brak raportu z przetwarzania.'@)
         ?}
      ";

   _ab:="params_exec('aaktualizuj','grupskl')";
   P.win_act(_ws,,'Formuła','Aktualizuj'@@,,'Wybór definicji aktualizującej składniki'@,
      _ab,
      $("{? P.sel_size()=0 || "+_komsel+" ?}"),
      1,
      1,
      $("sel_nchk(); "+_ab),
      $("win_disp(); "+_komsel),
      'A'
   );
   P.win_act(_ws,,'Formuła','Raport'@@,,'Raport z ostatniego przetwarzania'@,_komsel,,,,,,'R');
   P.win_act(_ws,,'Menu','Szukaj'@@,,,,,,,,,'S');
   P.win_act(_ws,,'Formuła','Szukaj dokładnie'@@,'#S','Szukanie zapisu zgodnego ze zredagowanym wzorcem'@,
      "exec('p_ustaw_ezk','szukaj')","exec('p_d','szukaj')",,,,,'S');
   P.win_act(_ws,,'Formuła','Szukaj &kontekstowo'@@,'#S','Szukanie zapisu zgodnego ze zredagowanym wzorcem'@,
      "exec('p_ustaw_ezk','szukaj')","exec('p_k','szukaj')",,,,,'K');
   P.win_act(_ws,,'#F3',,,,"exec('p_ustaw_ezk','szukaj')","exec('p_f3_wnd','szukaj')");
   P.win_act(_ws,,'Kolejność');

   P.win_btn(_ws,'text='+'Aktualizuj'@+',btn_label_align=center,panel=right,align=begin','menu:A');

   __WND.SEL.put(P,_acr,_ws)
?};

_cfg.nav.main:=_ws;
_cfg.nav.side:='NAW_MIN';

: Teraz okno grupowe.
_mode:='maximized';

_wnd:=UD_DEF.grp_make(
   'Przetwarzanie automatyczne'@+' ('+{? _cfg.tryb='L' || 'składniki listy'@ || 'stałe składniki'@ ?}+')',
:  Po wyświetleniu (załaduj kontrolkę, wyświetl drzewko).
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
     UD_DEF.cntx_psh();
     exec('nawigator_ustaw','schemat',_cfg.nav.side,P_FILTER.UD_SCH,_cfg.UD_SKL);
      grp_disp(UD_DEF,_cfg.nav.side,1,1)
   ",
   '#grsklnav'+(-_cfg.tryb),,,
   "  UD_DEF.cntx_pop();
      1
   ",
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      grp_disp(P,_cfg.nav.main,1,1)
   ",
   _mode
);

: Selektor schematu.
_cfg.nav.side:=exec('nawigator','schemat','PODZORG','MID',,1);
: Struktura.
UD_DEF.grp_sel(_wnd,UD_DEF,_cfg.nav.side,,
:  Po odświeżeniu (wyświetl współpracowników).
   "  params_set(_par:=params_get());
      _cfg:=_par.cfg;
      grp_disp(P,_cfg.nav.main,1,1)
   ",,,
   18,
:  Przed obsługą (ogranicz strukturę do właściwego schematu, ustaw korzeń).
   ,,,,
   _mode,
   _cfg.nav.side
);

: Współpracownicy.
UD_DEF.grp_splt(_wnd,,'vertical','p',',25%');
UD_DEF.grp_sel(_wnd,P,_cfg.nav.main,,
:  Po odświeżeniu
   "exec('stdor_p_ar_ext','pkd')",,,,
:  Przed obsługą (ustaw filtr na tabeli P).
   "  _cfg:=params_get().cfg;
      exec('filtruj_p','schemat',_cfg.DOMAIN,UD_DEF.ref(),_cfg.F_ZATR,'',_cfg.VIEW,_cfg.SQL_FROM,_cfg.SQL_WHERE);
      exec('stdor_p_bs_ext','pkd')
   ",,,,
   _mode,
   _cfg.nav.main,
   1
);

_wnd


\azestaw_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła tworzy tablicę elementów nazwanych do obsługi zestawów definicji aktualizacji.
::   WE: _a [STRING] - Obsługiwany zakres danych:
::                      L - lista płac;
::                      S - stałe składniki.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='L' | _a='S')
|| _tryb:=_a
|| return()
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Definicja zestawów (tabela, plik, okna, ...)

_ZESTAW:=obj_new('TAB','NDX','ws','we','fn','echo','sep','options');

_ZESTAW.TAB:=exec('_zestaw','grupskl');
_ZESTAW.TAB.fld_fml('AC','AFTER_EDIT',"params_exec('azestaw_efld_opt','grupskl')");
_ZESTAW.TAB.fld_fml('KW','AFTER_EDIT',"params_exec('azestaw_efld_opt','grupskl')");
_ZESTAW.TAB.fld_fml('KW','DISPLAY_FORMAT',"_TAB:=cur_tab(1,1); 'empty=%1' [$(_TAB.KW=0 | _TAB.AC='--')]");
_ZESTAW.TAB.fld_fml('FM','AFTER_EDIT',"params_exec('azestaw_efld_opt','grupskl')");

_ZESTAW.NDX:=obj_new('ZZRRRN','RRZZRN');
_ZESTAW.NDX.ZZRRRN:=_ZESTAW.TAB.index('?');
_ZESTAW.NDX.RRZZRN:=_ZESTAW.TAB.ndx_tmp(,,'RR',,,'ZZ',,,'RN',,);
_ZESTAW.TAB.index(_ZESTAW.NDX.RRZZRN);

_ZESTAW.ws:=_ZESTAW.TAB.mk_sel('Składniki'@,'N',,'#grskl'+(-_tryb),,,,,'U');
_ZESTAW.TAB.win_fld(_ZESTAW.ws,,'RN',,,-5,,,'Kod'@,,'Kod składnika'@);
_ZESTAW.TAB.win_fld(_ZESTAW.ws,,'RT',,,,,,'Nazwa'@,,'Nazwa składnika'@);
_ZESTAW.TAB.win_fld(_ZESTAW.ws,,'AC',,,-3,,,'Akcja'@,,'Kod akcji do przeprowadzenia'@);
_ZESTAW.TAB.win_fld(_ZESTAW.ws,,'KW',,,-12,2,,'Wartość'@,,'Wartość'@);
_ZESTAW.TAB.win_fld(_ZESTAW.ws,,'FM',,,40,,,'Formuła'@,,'Treść formuły'@);
{! _empty:=0 .. 1
|! _ZESTAW.TAB.win_act(_ZESTAW.ws,_empty,'Formuła','Dołącz'@@,,'Dołączenie nowego zapisu'@,
      "params_exec('azestaw_akcja','grupskl','Dołącz')",,
      _empty,,,,
      'D'
   )
!};
_ZESTAW.TAB.win_btn(_ZESTAW.ws,'text=%1' ['Dołącz'@],'menu:D');
_ZESTAW.TAB.win_act(_ZESTAW.ws,,'Formuła','Popraw'@@,,'Poprawienie bieżącego zapisu'@,
   "params_exec('azestaw_akcja','grupskl','Popraw')",,,,,,
   'P'
);
_ZESTAW.TAB.win_btn(_ZESTAW.ws,'text=%1' ['Popraw'@],'menu:P',,,,,,'noempty');
_ZESTAW.TAB.win_act(_ZESTAW.ws,,'Usuń',,,,,,,1);
_ZESTAW.TAB.win_btn(_ZESTAW.ws,'text=%1' ['Usuń'@],'menu:U',,,,,,'noempty');
_ZESTAW.TAB.win_act(_ZESTAW.ws,,'Wyświetl',,,,"params_exec('azestaw_akcja','grupskl','Wyświetl')");

_width:=40;
_ZESTAW.we:=_ZESTAW.TAB.mk_edit('Składnik'@,,'#grskl'+(-_tryb),,,'html_maximized');
_ZESTAW.TAB.win_esep(_ZESTAW.we,'Dane podstawowe'@);
_ZESTAW.TAB.win_efld(_ZESTAW.we,LS,'RB','RN','*',_width-3,,,'Składnik'@,,'Numer składnika płacowego'@);
_ZESTAW.TAB.win_efld(_ZESTAW.we,LS,'RB','RT',,_width-3,,1,,1,'Nazwa składnika płacowego'@);
{? _tryb='L'
|| _ZESTAW.TAB.win_efld(_ZESTAW.we,,'AC',,,,,,'Sposób zmiany'@,,'Sposób zmiany składnika'@,
      'radio-buttons','left_label=1',
      'Przypisz wartość'@,"'=='",
      'Dodaj wartość'@,"'+$'",
      'Dodaj procent'@,"'+%'",
      'Odejmij wartość'@,"'-$'",
      'Odejmij procent'@,"'-%'",
      'Usuń'@,"'--'"
   )
|| _ZESTAW.TAB.win_efld(_ZESTAW.we,,'AC',,,,,,'Sposób zmiany'@,,'Sposób zmiany składnika'@,
      'radio-buttons','left_label=1',
      'Przypisz wartość'@,"'=='",
      'Dodaj wartość'@,"'+$'",
      'Dodaj procent'@,"'+%'",
      'Odejmij wartość'@,"'-$'",
      'Odejmij procent'@,"'-%'",
      'Zamknij'@,"'>@'",
      'Usuń'@,"'--'"
   )
?};
_ZESTAW.TAB.win_efld(_ZESTAW.we,,'KW',,,_width,2,,'Wartość'@,,'Wartość'@);
_ZESTAW.TAB.win_efld(_ZESTAW.we,,'FM',,,_width,-5,,'Formuła'@,,'Formuła'@);
{? _tryb='S'
|| _ZESTAW.TAB.win_efld(_ZESTAW.we,,'OD',,,,,,MS.name(LSS,'OD'),,MS.comment(LSS,'OD'));
   _ZESTAW.TAB.win_efld(_ZESTAW.we,,'DO',,,,,,MS.name(LSS,'DO'),,MS.comment(LSS,'DO'))
?};
_ZESTAW.TAB.win_efld(_ZESTAW.we,LS,'KK','SYM','KONTAKOD',_width-3,,,'Konto kosztów'@,,'Symbol konta kosztów'@);
_ZESTAW.TAB.win_efld(_ZESTAW.we,LS,'KK','NAZWA',,_width-3,,1,,1,'Nazwa konta kosztów'@);
exec('ok_esc','#window',_ZESTAW.TAB,_ZESTAW.we,,,,,,,exec('text_red_ok','#window'));
_ZESTAW.TAB.win_edit(_ZESTAW.we);

:: Parametry pliku
_ZESTAW.fn:='grupskl.txt';
_ZESTAW.echo:=0;
_ZESTAW.sep:=%1+';';
_ZESTAW.options:='UTF-8,pth,noheader';

:: Import danych z pliku
{? fexists(_ZESTAW.fn,1)
|| _echo:=_ZESTAW.echo;
   _separ:=_ZESTAW.sep;
   _conv:=_ZESTAW.options;
   MS.echo==_echo;
   MS.separ==_separ;
   MS.conv==_conv;
   MS.import(_ZESTAW.fn,_ZESTAW.TAB);
   MS.echo==_echo;
   MS.separ==_separ;
   MS.conv==_conv;
:: Aktualizacja danych
   R.cntx_psh();
   R.index('RUBKOD');
   R.prefix();
   {? _ZESTAW.TAB.first()
   || {!
      |? {? _ZESTAW.TAB.RN & R.find_key(_ZESTAW.TAB.RN)
         || {? _ZESTAW.TAB.RT<>R.RT
::             Aktualizacja nazwy składnika
            || _ZESTAW.TAB.RT:=R.RT;
               _ZESTAW.TAB.put()
            ?};
            _ZESTAW.TAB.next()
         || _ZESTAW.TAB.del()
         ?}
      !}
   ?};
   R.cntx_pop()
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Nawigator  (tabela, okna)

_NAV:=obj_new('TAB','ws','we');
_NAV.TAB:=sql(
   'select RR, ZZ as "%1", count(*) as "Pozycji" '
   'from :_a '
   'group by RR, ZZ '
   'order by 1, 2' ['Zestaw'@],_ZESTAW.TAB
);
_NAV.TAB.fld_fml('RR','BLANK',$("'"+_tryb+"'"));
_NAV.ws:=_NAV.TAB.mk_sel('Zestawy'@,'N',,'#grnav',,,,,'U');
_NAV.TAB.win_fld(_NAV.ws,,'ZESTAW',,,40,,,'Zestaw'@,,'Nazwa zestawu'@);
_NAV.TAB.win_act(_NAV.ws,,'Formuła','Wybierz'@@,,'Wybór definicji zestawu do aktualizacji'@,"sel_exit()",,1,,,,'W');
{! _empty:=0 .. 1
|! _NAV.TAB.win_act(_NAV.ws,_empty,'Formuła','Dołącz'@@,,'Dołączenie nowego zapisu'@,
      "  params_set(_par:=params_get());
         _NAV:=_par.NAV;
         _NAV.TAB.blank();
         {? _NAV.TAB.edit(""params_exec('anav_ae','grupskl',0)"")
         || _NAV.TAB.add()
         ?}
      ",,
      _empty,,,,
      'D'
   )
!};
_NAV.TAB.win_btn(_NAV.ws,'text=%1' ['Dołącz'@],'menu:D');
_NAV.TAB.win_act(_NAV.ws,,'Formuła','Popraw'@@,,'Poprawienie bieżącego zapisu'@,
   "  params_set(_par:=params_get());
      _NAV:=_par.NAV;
      _zestaw:=_NAV.TAB.ZESTAW;
      {? _NAV.TAB.edit(""params_exec('anav_ae','grupskl',1)"") & _zestaw<>_NAV.TAB.ZESTAW
      || _ZESTAW:=_par.ZESTAW;
         do();
         _ZESTAW.TAB.cntx_psh();
         _ZESTAW.TAB.prefix(_NAV.TAB.RR,);
         {!
         |? _ZESTAW.TAB.find_key(_zestaw,)
         |! _ZESTAW.TAB.ZZ:=_NAV.TAB.ZESTAW;
            _ZESTAW.TAB.put()
         !};
         _ZESTAW.TAB.cntx_pop();
         _NAV.TAB.put();
         end()
      ?}
   ",,,,,,
   'P'
);
_NAV.TAB.win_btn(_NAV.ws,'text=%1' ['Popraw'@],'menu:P',,,,,,'noempty');
_NAV.TAB.win_act(_NAV.ws,,'Formuła','Usuń'@@,,'Usunięcie bieżącego zapisu'@,
   "  params_set(_par:=params_get());
      _NAV:=_par.NAV;
      {? _NAV.TAB.sel_size() | exec('del_ask','#table')
      || _ZESTAW:=_par.ZESTAW;
         do();
         _ZESTAW.TAB.cntx_psh();
         _ZESTAW.TAB.prefix(_NAV.TAB.RR,);
         {!
         |? _ZESTAW.TAB.find_key(_NAV.TAB.ZESTAW,)
         |! _ZESTAW.TAB.del()
         !};
         _ZESTAW.TAB.cntx_pop();
         _NAV.TAB.del();
         end()
      ?}
   ",,,1,
   "exec('del_ask','#table')",,
   'U'
);
_NAV.TAB.win_btn(_NAV.ws,'text=%1' ['Usuń'@],'menu:U',,,,,,'noempty');
_NAV.TAB.win_act(_NAV.ws,,'Rekord',,,,
   "  {? _a
      || _par:=params_get();
         _NAV:=_par.NAV;
         _ga:={? _NAV.TAB.POZYCJI || '' || 'W' ?};
         _NAV.TAB.actions_grayed(_NAV.ws,_ga)
      ?};
      ~~
   "
);

_NAV.we:=_NAV.TAB.mk_edit('Zestaw'@,,'#grnav');
_NAV.TAB.win_esep(_NAV.we,'Dane podstawoe'@);
_NAV.TAB.win_efld(_NAV.we,,'ZESTAW',,,64,,,'Zestaw'@,,'Nazwa zestawu'@);
_NAV.TAB.efld_opt(_NAV.we,'mark=1',,'ZESTAW');
exec('ok_esc','#window',_NAV.TAB,_NAV.we,,,,,,,exec('text_red_ok','#window'));
_NAV.TAB.win_edit(_NAV.we);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Okno grupowe

_mode:='maximized_with_title';
_grp:=_NAV.TAB.grp_make(
   'Przetwarzanie automatyczne (%1)'@
   [{? _tryb='L' || 'składniki listy płac'@ || 'stałe składniki'@ ?}],,'#grsklgrp'+(-_tryb),,,
   "  _par:=params_get();
      _ZESTAW:=_par.ZESTAW;
      {? _a='sel_exit' &
         ~FUN.ask('Czy na pewno chcesz zaaktualizować składniki na podstawie zestawu ""%1""?'@ [_par.ZESTAW.TAB.ZZ])
      || return(0)
      ?};
      _ZESTAW.TAB.cntx_psh();
      _ZESTAW.TAB.clear();
      _echo:=_ZESTAW.echo;
      _separ:=_ZESTAW.sep;
      _conv:=_ZESTAW.options;
      MS.echo==_echo;
      MS.separ==_separ;
      MS.conv==_conv;
      MS.export(_ZESTAW.fn,_ZESTAW.TAB);
      MS.echo==_echo;
      MS.separ==_separ;
      MS.conv==_conv;
      _ZESTAW.TAB.cntx_pop();
      1
   ",,
   'normal'
);
_NAV.TAB.grp_sel(_grp,_NAV.TAB,_NAV.ws,,
   "  params_set(_par:=params_get());
      grp_disp(_par.ZESTAW.TAB,_par.ZESTAW.ws)
   ",,,,,,,,
   _mode
);
_NAV.TAB.grp_splt(_grp,,'vertical','r',',30%');
_NAV.TAB.grp_sel(_grp,_ZESTAW.TAB,_ZESTAW.ws,,,,,,
   "  params_set(_par:=params_get());
      _NAV:=_par.NAV;
      {? grp_empty(_NAV.TAB,_NAV.ws)
      || '#disable'
      || _ZESTAW:=_par.ZESTAW;
         _ZESTAW.TAB.prefix(_NAV.TAB.RR,_NAV.TAB.ZESTAW,)
      ?}
   ",
   "  _par:=params_get();
      _NAV:=_par.NAV;
      {? _a & ~grp_empty(_NAV.TAB,_NAV.ws)
      || _ZESTAW:=_par.ZESTAW;
         _poz:=_ZESTAW.TAB.size();
         {? _NAV.TAB.POZYCJI<>_poz
         || _NAV.TAB.POZYCJI:=_poz;
            _NAV.TAB.put()
         ?}
      ?}
   ",,,
   _mode
);
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Ustawienie dziedziny

_NAV.TAB.prefix(_tryb,);
_NAV.TAB.win_sel(_grp);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Przygotowanie odpowiedzi

exec('obj_ntab_set','#array',,
   'ZESTAW',_ZESTAW,
   'NAV',_NAV,
   'tryb',_tryb
)


\aaktualizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Główna formuła obsługi automatycznej aktualizacji składników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;

_par:=params_get();
_tryb:=_par.tryb;
_aktualizuj:=_par.aktualizuj;
_KOMM:=_par.KOMM;
_ikony:=_par.ikony;
_root:=_par.root;

R.cntx_psh();
R.index('RUBKOD');
KK.cntx_psh();
KK.index('KONTAKOD');
KK.prefix(exec('ref_firma','ustawienia'));
{? _tryb='L'
|| O.cntx_psh();
   O.prefix();
   LS.cntx_psh();
:: Indeks zastosowany do tabeli LS jest rozszerzeniem indeksu PRACORUB o kwotę.
   LS.index(_ndx:=LS.ndx_tmp(,,'P',,,'RB',,,'KK',,,'KW',,));
   O_P.cntx_psh()
|| LSS.cntx_psh();
   LSS.index('PROPOZYC')
?};

_cfg:=exec('azestaw_cfg','grupskl',_tryb);
_NAV:=_cfg.NAV;
_ZESTAW:=_cfg.ZESTAW;

_UNDO:=exec('_undo_tab','grupskl');

params_set(
   exec('obj_ntab_set','#array',_cfg,
      'KOMM',_KOMM,
      'ikony',_ikony,
      'root',_root,
      'UNDO',_UNDO
   )
);

{? _NAV.TAB.select()
|| _KOMM.init(,,'Raport z przetwarzania automatycznego (%1)'@ [time()$3]);

   _root.pile:=0;
   _root.plp:=_KOMM.sect_beg('Operacje zakończone niepowodzeniem',_ikony.pC);
   _KOMM.sect_end();
   _root.sile:=0;
   _root.slp:=_KOMM.sect_beg('Operacje zakończone sukcesem',_ikony.sC);
   _KOMM.sect_end();

   exec('_undo_add','grupskl',_UNDO,'#init#',_tryb);
   exec('_undo_add','grupskl',_UNDO,'#params#',_tryb);
   exec('_undo_add','grupskl',_UNDO,'#cntx_psh#',_tryb);

   _recalc:=_tryb='L' & exec('_ask_recalc','grupskl');

   {? P.sel_size()
   || _SEL:=P.sel_aget();
      _step:=0;
      _size:=_SEL.size();
      _loop:=_SEL.first();
      {!
      |? _loop
      |! _step+=1;
         progress(100*_step/_size,'Automatyczne przetwarzanie składników'@, FUN.TYT);
         {? P.seek(_SEL.REF,)
         || exec('aaktualizuj1p','grupskl',_aktualizuj,_ZESTAW.TAB,'A',_recalc);
            P.sel_del()
         ?};
         _loop:=_SEL.next()
      !};
      prgs_clr()
   || exec('aaktualizuj1p','grupskl',_aktualizuj,_ZESTAW.TAB,'A',_recalc)
   ?};

   exec('_undo_add','grupskl',_UNDO,'#cntx_pop#',_tryb);
   exec('_undo_export','grupskl',_UNDO,_tryb);

   {? _root.pile=0
   || _KOMM.del(_root.plp)
   ?};
   {? _root.sile=0
   || _KOMM.del(_root.slp)
   ?};

   _ret:=1
?};

{? _tryb='L'
|| O_P.cntx_pop();
   LS.cntx_pop();
   LS.ndx_drop(_ndx);
   O.cntx_pop()
|| LSS.cntx_pop()
?};
KK.cntx_pop();
R.cntx_pop();

_ret


\aaktualizuj1p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła aktualizująca składniki dla bieżącego pracownika - silnik.
::       Wspólna dla rejestracji ręcznej i przetwarzania automatycznego.
::   WE: _a [RULE]   - Formuła szczegółowa.
::       _b [TABLE]  - Tabela z definicją zmian.
::       _c [STRING] - Tryb aktualizacji (istotny dla składników list).
::       _d [NUMBER] - Czy przeliczać listę?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_aktualizuj:=_a;
_ZESTAW:=_b;
_tryb:=_c;
_recalc:=_d;

params_set(_par:=params_get());
_KOMM:=_par.KOMM;
_ikony:=_par.ikony;
_root:=_par.root;

_sp:=_KOMM.sect_beg(exec('P','#to_string'),_ikony.P);
_sukces:=_aktualizuj(_ZESTAW,_tryb,_recalc);
_KOMM.sect_end();
{? _sukces
|| _lp:=_root.slp;
   _root.sile+=1
|| _lp:=_root.plp;
   _root.pile+=1
?};
_KOMM.chngroot(_sp,_lp);
~~


\anav_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Po redagowaniu rekordu nawigatora (zestawu).
::   WE: [_a] [INTEGER] - Tryb redagowania:
::                         0 - dołączanie [domyślnie];
::                         1 - poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

_par:=params_get();
_NAV:=_par.NAV;

{? (_ret:=__CHK.record(_NAV.TAB,,'ZESTAW'))<>''
|| return(_ret)
?};

_ref:={? _put || _NAV.TAB.ref() || null() ?};
_NAV.TAB.cntx_psh();
{? _NAV.TAB.find_key(_NAV.TAB.ZESTAW,) & _NAV.TAB.ref()<>_ref
|| FUN.emsg('Zestaw "%1" już istnieje.'@ [_NAV.TAB.ZESTAW]);
   _ret:=0
?};
_NAV.TAB.cntx_pop();

_ret


\azestaw_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli _ZESTAW.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(SYSLOG)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

_TAB.efld_opt(_we,'mark=1',LS,'RB','RN');

{? _fld='' | _fld='AC'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.AC<>'--' & _TAB.AC<>'>@')],_TAB,'KW');
   _TAB.efld_opt(_we,'enable=%1' [$(_TAB.AC<>'--' & _TAB.AC<>'>@')],_TAB,'FM');
   {? var_pres('OD',_TAB)>0
   || _TAB.efld_opt(_we,'enable=%1' [$(_TAB.AC<>'>@')],_TAB,'OD');
      _TAB.efld_opt(_we,'enable=%1' [$(_TAB.AC<>'--')],_TAB,'DO');
      _TAB.efld_opt(_we,'mark=%1' [$(_TAB.AC='>@')],_TAB,'DO')
   ?}
?};
{? _fld='' | _fld='KW'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.KW=0)],_TAB,'FM')
?};
{? _fld='' | _fld='FM'
|| _TAB.efld_opt(_we,'enable=%1' [$(_TAB.memo_txt(0,0,'FM')='')],_TAB,'KW')
?};

1


\azestaw_akcja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Formuła obsługująca akcje w oknie ze składnikami (wspólna ze względu na środowisko, które za każdym razem musi
::       być przygotowane.
::   WE: _a [STRING] - Kod akcji do wykonania;
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & _a<>''
|| _akcja:=_a
|| FUN.emsg('\\azestaw_akcja/grupskl.fml\n'+'Brak argumentu wywołania.'@);
   return()
?};

params_set(_par:=params_get());
_tryb:=_par.tryb;
_NAV:=_par.NAV;
_ZESTAW:=_par.ZESTAW;

_ret:=~~;

_fmlLS:=exec('save_fml_all','#field',LS);
exec('set_fml_type','#field',LS,'BEFORE_DISPLAY',"");
exec('set_fml_type','#field',LS,'BEFORE_EDIT',"");
exec('set_fml_type','#field',LS,'AFTER_EDIT',"");
LS.cntx_psh();
LS.prefix();
LS.blank(1);
_fR:=exec('get','#filter',R);
R.cntx_psh();
R.index('RUBKOD');
R.prefix();
exec('_rfset','grupskl',_tryb);
R.win_dict('SLO');
R.win_edit('RED');
KK.cntx_psh();
KK.index('KONTAKOD');
KK.prefix(exec('ref_firma','ustawienia'),);
KK.win_dict('SLO');
KK.win_edit();

{? _akcja='Wyświetl' | _akcja='Dołącz' | _akcja='Popraw'
|| exec('azestaw_efld_opt','grupskl','*',_ZESTAW.TAB,_ZESTAW.we)
?};

:: Pozycjonowanie
{? _akcja='Wyświetl' | _akcja='Popraw'
|| {? R.f_find(_ZESTAW.TAB.RN)
   || LS.RB:=R.ref()
   ?};
   {? KK.find_key(_ZESTAW.TAB.KT,)
   || LS.KK:=KK.ref()
   ?}
?};

:: Rzeczywista obsługa akcji
{? _akcja='Wyświetl'
|| _ZESTAW.TAB.display()

|? _akcja='Dołącz'
|| _ZESTAW.TAB.blank();
   _ZESTAW.TAB.RR:=_NAV.TAB.RR;
   _ZESTAW.TAB.ZZ:=_NAV.TAB.ZESTAW;
   {? _ZESTAW.TAB.edit("params_exec('azestaw_ae','grupskl',0)") & _ZESTAW.TAB.add()
   || _ZESTAW.TAB.memo_put(,'FM')
   ?}

|? _akcja='Popraw'
|| {? _ZESTAW.TAB.edit("params_exec('azestaw_ae','grupskl',1)") & _ZESTAW.TAB.put()
   || _ZESTAW.TAB.memo_put(,'FM')
   ?}

?};
KK.cntx_pop();
R.cntx_pop();
exec('set','#filter',R,_fR);
LS.cntx_pop();
exec('restore_fml_all','#field',LS,_fmlLS);

_ret


\azestaw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.42]
:: OPIS: Po redagowaniu rekordu składników (pozycja zestawu).
::   WE: [_a] [INTEGER] - Tryb redagowania:
::                         0 - dołączanie [domyślnie];
::                         1 - poprawianie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

_par:=params_get();
_tryb:=_par.tryb;
_ZESTAW:=_par.ZESTAW;

_d0:=date(0,0,0);

{? (_ret:=__CHK.record(LS,,'RB'))<>''
|| return(_ret)

|? _ZESTAW.TAB.AC='>@' & (_ret:=__CHK.record(_ZESTAW.TAB,,'DO'))<>''
|| return(_ret)
?};

{? _ZESTAW.TAB.AC<>'--' & _ZESTAW.TAB.AC<>'>@'
:: Weryfikacja KW i FM
|| {? _ZESTAW.TAB.KW=0 & _ZESTAW.TAB.memo_txt(,0,'FM')=''
   || FUN.emsg('"%1", "%2": jedno z tych pól musi być uzupełnione.'@
         [MS.name(_ZESTAW.TAB,'KW'),MS.name(_ZESTAW.TAB,'FM')]
      );
      return('KW')
   |? _ZESTAW.TAB.KW>0 & _ZESTAW.TAB.memo_txt(,0,'FM')<>''
   || FUN.emsg('"%1", "%2": tylko jedno z tych pól musi być uzupełnione.'@
         [MS.name(_ZESTAW.TAB,'KW'),MS.name(_ZESTAW.TAB,'FM')]
      );
      return('KW')
   |? (_tryb='S' | _ZESTAW.TAB.AC<>'==') & _ZESTAW.TAB.KW<0
   || __CHK.err_fld(_ZESTAW.TAB,'KW',1,'Wartość nie może być ujemna.'@);
      return('KW')
   |? _CHK:=form_chk($_ZESTAW.TAB.memo_txt(,0,'FM'));
      _CHK.first()
   || FUN.emsg('Formuła nie jest poprawna.'@+'\n'+_CHK.ERR_DESC);
      return('FM')
   ?}
?};

{? _tryb='S' & _ZESTAW.TAB.AC<>'>@'
:: Weryfikacja dat
|| {? _ZESTAW.TAB.OD=_d0 & _ZESTAW.TAB.DO<>_d0
   || FUN.emsg('Jeżeli podana jest data "%1" to należy podać również "%2".'@
         [MS.name(_ZESTAW.TAB,'DO'),MS.name(_ZESTAW.TAB,'OD')]
      );
      return('OD')

   |? _ZESTAW.TAB.OD<>_d0 & _ZESTAW.TAB.DO<>_d0 & _ZESTAW.TAB.OD>_ZESTAW.TAB.DO
   || FUN.emsg('Data "%1" musi być wcześniejsza niż "%2".'@ [MS.name(_ZESTAW.TAB,'OD'),MS.name(_ZESTAW.TAB,'DO')]);
      return('OD')

   ?}
?};

:: Badanie unikalności
_ZESTAW.TAB.cntx_psh();
_ref:={? _put || _ZESTAW.TAB.ref() || null() ?};
_dubel:=_ZESTAW.TAB.find_key(LS.RB().RN) & _ZESTAW.TAB.ref()<>_ref;
_ZESTAW.TAB.cntx_pop();
{? _dubel
|| FUN.emsg('Składnik "%1 - %2" już istnieje.'@ [$LS.RB().RN,LS.RB().RT]);
   return('RB')
?};

:: Sprzątanie
{? _ZESTAW.TAB.AC='--' | _ZESTAW.TAB.AC='>@'
|| _ZESTAW.TAB.KW:=0;
   _ZESTAW.TAB.memo_set(,'FM')
?};

:: Jeżeli dane zostały zweryfikowane, to należy uzupełnić odpowiednie pola w tabeli tymczasowej
_ZESTAW.TAB.RN:=LS.RB().RN;
_ZESTAW.TAB.RT:=LS.RB().RT;
_ZESTAW.TAB.KT:=LS.KK().SYM;

1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 c2e769339a387b655bd87e06c92b00d54620be9091abfd56adf657b9df425176a203d1a652cfd1c0fc3d7ab6efcab8d23150de28cb8de329ea234d5e9ec253cff4d9ee42de1797b150076e5e5275f969553dfc3a70ed8f0323d515b83a3d1b77b09b111e0c72d549d7a8fc90be5172b24d4288e1102b4221d9fc3fb33136c5af
