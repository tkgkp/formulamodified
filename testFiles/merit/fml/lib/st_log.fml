:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: st_log.fml
:: Utworzony: 03.06.2020
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Obsługa logów dla systemu Statystyki
::======================================================================================================================


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Czyści powiązania do rekordu tabeli ST_LOG
::   WE: _a - ST_LOG.ref()
::   WY: >0  -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PRYWATNA><CLEAN>
::UWAGA: Parametry bez [] są wymagane, formuła może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

{? VAR.GRUPA='X'
||
:: Usuwam zapisy źródłowe razem z plikami z dysku
   _rule:="
      _lp:=_b;
      _result:=1;
      _can_continue:=1;
      _uid_grp:='';
      ST_SRC.cntx_psh();
      ST_SRC.index('LP');
      ST_SRC.prefix(_lp);
      {? ST_SRC.first()
      || _uid_grp:=ST_SRC.UID_GRP;
         {? ST_SRC.FILEPATH<>''
         || _can_continue:=exec('st_src_file_del','st_src',2)
         ?}
      ?};

      {? _can_continue>0
      ||
         ST_SRC.index('UID_GRP');
         ST_SRC.prefix(_uid_grp,);
         {? ST_SRC.first()
         || {!
            |? _can_continue:=exec('delete','st_src',ST_SRC.ref());
               {? _can_continue<=0
               || _result:=0
               ?};
               ST_SRC.first() & _can_continue>0
            !}
         ?}
      ?};
      ST_SRC.cntx_pop();
      _result
   ";
   _can_continue:=exec('for_each_mask','#table',ST_LOG,_rule,,,ST_LOG.LP,1)
?};

:: --- wszystkie powiazania usuniete? ---

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Kasuje podany rekord tabeli ST_LOG (wykonywane w transakcji!!!)
::   WE: _a - ST_LOG.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::  TAG: <PUBLICZNA><DEL>
::UWAGA: Parametry bez [] są wymagane, formula może nie sprawdzać czy zostały podane i może wystąpić błąd.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_ref:=_a;

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
ST_LOG.cntx_psh(); ST_LOG.clear();
{? ST_LOG.seek(_ref)
|| {? exec('clean','st_log',_ref)>0
   || {? ST_LOG.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};

{? _result<0
|| undo()
?};

ST_LOG.cntx_pop();
{? _mydo || end() ?};
_result


\st_log_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Dołącz dla ST_LOG
::----------------------------------------------------------------------------------------------------------------------
ST_LOG.win_edit('RED');
ST_LOG.blank();
VAR1.ST_SEST2:=null();
VAR1.ST_OBJ_W:=null();
{? ST_LOG.edit()
|| ST_LOG.ST_OBJ_W:=VAR1.ST_OBJ_W;
   ST_LOG.ST_SEST2:=VAR1.ST_SEST2;
   ST_LOG.add()
?};
~~


\st_log_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń dla ST_LOGI
::----------------------------------------------------------------------------------------------------------------------
{? VAR.GRUPA='T' | FUN.ask('Czy usunąć bieżący wiersz?'@)
|| exec('delete','st_log',ST_LOG.ref())
?};
~~


\st_log_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Popraw dla ST_LOG
::----------------------------------------------------------------------------------------------------------------------
ST_LOG.win_edit('RED');
{? ST_LOG.edit()
|| ST_LOG.ST_OBJ_W:=VAR1.ST_OBJ_W;
   ST_LOG.ST_SEST2:=VAR1.ST_SEST2;
   ST_LOG.put()
?};
~~


\st_log_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Rekord dla ST_LOG
::----------------------------------------------------------------------------------------------------------------------
VAR1.ST_SEST2:=ST_LOG.ST_SEST2;
VAR1.ST_OBJ_W:=ST_LOG.ST_OBJ_W;
ST_LOG.ST_SEST2().ST_SESJ2();
ST_LOG.ST_OBJ_W().ST_OBJ();
ST_LOG.ST_PTH_W().ST_PTH();
~~


\erase
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Kasuje wszystkie rekordy ST_LOG we wszystkich maskach
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};

_rule:="
   _args:=_b;
   _result:=1;
   _can_continue:=1;
   ST_LOG.cntx_psh();
   ST_LOG.index('TM_STAMP');
   ST_LOG.prefix();

   {? ST_LOG.first()
   || {!
      |? _can_continue:=exec('delete','st_log',ST_LOG.ref());
         ST_LOG.first() & _can_continue>0
      !}
   ?};

   {? _can_continue<=0
   || _result:=0
   ?};
   ST_LOG.cntx_pop();
   _result
";
_can_continue:=exec('for_each_mask','#table',ST_LOG,_rule,,,,1);

{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};
_result


\erase_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Akcja 'Wyczyść' w oknie wertowania tabeli ST_LOG
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=FUN.ask('Wyczyścić wszystkie zapisy we wszystkich maskach?'@);
KOMM.init(250,,'Czyszczenie logów');
VAR1.ERASE:=1;
{? _can_continue>0
|| ST_OBJ.cntx_psh();
   ST_OBJ.index('OD_WER');
   ST_OBJ.prefix();
   {? ST_OBJ.first()
   || {!
      |? _can_continue:=exec('delete','st_obj',ST_OBJ.ref());
         ST_OBJ.first() & _can_continue>0
      !}
   ?};
   ST_OBJ.cntx_pop()
?};

{? _can_continue>0
|| _can_continue:=exec('erase','st_log')
?};

{? _can_continue>0
||
:: Usuwanie sesji (starych)
   ST_SESJA.cntx_psh();
   ST_SESJA.index('PID');
   ST_SESJA.prefix();
   {? ST_SESJA.first()
   || {!
      |? _can_continue:=exec('delete','st_sesja',ST_SESJA.ref());
         ST_SESJA.first() & _can_continue>0
      !}
   ?};
   ST_SESJA.cntx_pop()
?};

{? _can_continue>0
||
:: Usuwanie sesji (nowych maskowalnych)
   _rule:="
      _args:=_b;
      _result:=1;
      _can_continue:=1;
      ST_SESJ2.cntx_psh();
      ST_SESJ2.index('PID');
      ST_SESJ2.prefix();

      {? ST_SESJ2.first()
      || {!
         |? _can_continue:=exec('delete','st_sesj2',ST_SESJ2.ref());
            ST_SESJ2.first() & _can_continue>0
         !}
      ?};

      {? _can_continue<=0
      || _result:=0
      ?};
      ST_SESJ2.cntx_pop();
      _result
   ";
   _can_continue:=exec('for_each_mask','#table',ST_SESJ2,_rule,,,,1)
?};

{? _can_continue>0
|| _can_continue:=exec('reset_parsed_all','st_src',0)
?};
KOMM.select();
grp_disp(ST_ARCH,'WER_GRP',1);
VAR1.ERASE:=0;
~~


\parse_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Akcja Parsuj w oknie wertowania tabeli ST_LOG
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=FUN.ask('Rozpocząć parsowanie we wszystkich maskach?'@);

{? _can_continue>0
|| _env:=exec('env_parse','st_common');
   _env.DIALOG:=2;
   _can_continue:=exec('parse','st_parse_core',_env)
?};
grp_disp(ST_ARCH,'WER_GRP',1);
~~


\delete4grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Kasuje wszystkie ST_LOGi powiązane z danym identyfikatorem grupującym we wszystkich maskach
::   WE: _a - STRING - identyfikator grupujący
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_uid_grp:=_a;
_result:=0;
_can_continue:=1;

_rule:="
   _uid_grp:=_b;
   _result:=1;
   _can_continue:=1;
   ST_LOG.cntx_psh();
   ST_LOG.index('UID_GRP');
   ST_LOG.prefix(_uid_grp,);
   {? ST_LOG.first()
   || {!
      |? _can_continue:=exec('delete','st_log',ST_LOG.ref());
         ST_LOG.first() & _can_continue>0
      !}
   ?};
   ST_LOG.cntx_pop();

   {? _can_continue<=0
   || _result:=0
   ?};
   _result
";
_can_continue:=exec('for_each_mask','#table',ST_LOG,_rule,,,_uid_grp,1);

{? _can_continue>0
|| _result:=1
?};
_result


\st_log_del_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń przed dla grupy rekordów (tabela ST_LOG)
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć zaznaczone wiersze?'@)
|| VAR.GRUPA:='T';
   1
|| 0
?}


\st_log_del_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Akcja Usuń po dla grupy rekordów (tabela ST_LOG)
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
~~


\erase_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Usuń w procesie
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_date:=~~;
_result:=0;

{? var_pres('p01',params_get().in)=type_of(date())
|| _date:=params_get().in.p01
?};
{? var_pres('p02',params_get().in)=type_of(date())
|| _date:=params_get().in.p02
?};

{? type_of(_date)=type_of(date())
|| _result:=exec('erase_old','st_log',_date)
?};
_result


\erase_old
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Kasuje wszystkie rekordy ST_LOG wcześniejsze niż podana data
::   WE: _a - DATE - data wstecz której dane zostaną usunięte (na ten dzień również dane usunie)
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_date:=_a;

_result:=0;
_can_continue:=1;
VAR.GRUPA:='';

ST_ARCH.cntx_psh();
ST_ARCH.index('ENDD');
ST_ARCH.prefix();

{? _can_continue>0
|| {? var_pres('_date')=type_of(date())
   || {? _date=date(0,0,0)
      || _can_continue:=0
      ?}
   || _can_continue:=0
   ?}
?};

:: Maski mniejsze niż granica
{? _can_continue>0 & ST_ARCH.find_le(_date)
|| {!
   |?
      {? exec('blk_lock','#table','ST_ARCH',ST_ARCH.ref(),,,'Archiwalne dane są usuwane'@,,2)>0
      ||
         {? ST_ARCH.ENDD<=_date
         ||
::         FUN.emsg('Mniejsze '+ST_ARCH.MASK+' '+$ST_ARCH.STARTD+'-'+$ST_ARCH.ENDD);
            _can_continue:=exec('erase_old_core','st_log',_date);
            ~~
         ?};
         exec('blk_unlock','#table','ST_ARCH',ST_ARCH.ref())
      ?};
      ST_ARCH.prev() & _can_continue>0
   !}
?};

:: Maski zawierące w środku granicę
ST_ARCH.index('ENDD');
ST_ARCH.prefix();
{? _can_continue>0 & ST_ARCH.find_ge(_date)
|| {!
   |? {? exec('blk_lock','#table','ST_ARCH',ST_ARCH.ref(),,,'Archiwalne dane są usuwane'@,,2)>0
      || {? _date>=ST_ARCH.STARTD & _date<=ST_ARCH.ENDD
         ||
::         FUN.emsg('W środku '+ST_ARCH.MASK+' '+$ST_ARCH.STARTD+'-'+$ST_ARCH.ENDD);
            _can_continue:=exec('erase_old_core','st_log',_date);
            ~~
         ?};
         exec('blk_unlock','#table','ST_ARCH',ST_ARCH.ref())
      ?};
      ST_ARCH.next() & _can_continue>0
   !}
?};

{? _can_continue>0
|| _can_continue:=exec('delete_not_used','st_arch')
?};

ST_ARCH.cntx_pop();

{? _can_continue>0
|| _result:=1
?};

_result


\erase_old_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Uruchamia kasowanie danych źródłowych
::       Kontekst pracy - ST_ARCH
::   WE: _a - DATE - data graniczna
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_date:=_a;
_can_continue:=1;
_result:=0;

exec('cntx_psh','st_arch');
_mydo:=do_state()=0;
{? _mydo || do() ?};

_can_continue:=exec('open','st_arch',ST_ARCH.MASK);

_can_del:=1;
_del_count:=0;
{? _can_continue>0 & _can_del>0
|| ST_LOG.index('TM_STAMP');
   {? ST_LOG.find_le(_date)
   ||

      {!
      |? _next:=0;
         _ref_nxt:=null();
         ST_LOG.cntx_psh();
         {? ST_LOG.prev()
         || _ref_nxt:=ST_LOG.ref()
         ?};
         ST_LOG.cntx_pop();

         {? ST_LOG.DATA<=_date
         || _can_continue:=exec('delete','st_log',ST_LOG.ref());
            {? _can_continue>0
            || _del_count+=1
            ?}
         ?};

         {? _ref_nxt<>null()
         || _next:=ST_LOG.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?}
?};

:: Usuwanie rekordów powiązanych do ST_LOG które mogą być niepotrzebne
{? _del_count>0
||
   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_pth_w')
   ?};

   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_pth')
   ?};

   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_sest2')
   ?};

   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_sesj2')
   ?};

   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_obj_w')
   ?};

   {? _can_continue>0
   || _can_continue:=exec('delete_not_used','st_obj')
   ?}
?};


{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

{? _can_continue>0
||
:: Po transakcji sprawdzam czy istnieją jeszcze jakieś rekordy w masce i jeżeli nie,
:: to robię tabeli erase() żeby wykonała się kompresja pliku mdb
   ST_LOG.index('TM_STAMP');
   ST_LOG.prefix();
   {? ST_LOG.first()=0
   || ST_LOG.erase()
   ?};

   ST_SEST2.index('ST_SESJ2');
   ST_SEST2.prefix();
   {? ST_SEST2.first()=0
   || ST_SEST2.erase()
   ?};

   ST_SESJ2.index('PID');
   ST_SESJ2.prefix();
   {? ST_SESJ2.first()=0
   || ST_SESJ2.erase()
   ?};
   ~~
?};
exec('cntx_pop','st_arch');
_result


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 bcbf9c8b90c3bb27465105bf0ef9034388c9798cc02cc74b006ce0ab5cfcde283c6fedcfe7b6141e0a95237712a3735963d71e058560f4fcf9b7b4abcc35c9307b150066045208ed0cd0d72d2638e0154d669bd2940087803706110cbcc3c2d6dfdb4bdbe32f1a51e0b5a4dcd0bc0830b7314b78d6a2832b4e01f85c27c77300
