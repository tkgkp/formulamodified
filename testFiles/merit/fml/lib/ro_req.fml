:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_req.fml
:: Utworzony: 11.01.2018
:: Autor: MB
:: Systemy: RODO
::======================================================================================================================
:: Zawartość: Formuły do obsługi żądań w aplikacji RODO !!!!!
::======================================================================================================================


\init_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Iniciuje zawartość słowników
::   WE: _a [INTEGER] - wymuszenie odświeżenia domyślnej konfiguracji - liczba różna od 0
::----------------------------------------------------------------------------------------------------------------------

:: Typy zapytań o dane osobowe
RO_REQT.index('NAME');
RO_REQT.prefix();
{? ~RO_REQT.first() | (var_pres('_a')=type_of(0) & _a<>0)
|| _del:={? exec('is_aip','rodo') || 'N' || 'T' ?};
   exec('type_add','ro_req','PERSONAL_DATA_CORRECT',
      'Żądanie sprostowania danych',
      'N','N','T'
   );
   exec('type_add','ro_req','PERSONAL_DATA_INFO',
      'Żądanie informacji o przetwarzaniu danych i zakresie przetwarzania',
      'T','N',_del
   );
   exec('type_add','ro_req','MOVE_DATA_TO_DIGIT',
      'Żądanie otrzymania danych do odczytu maszynowego',
      'T','N',_del
   );
   exec('type_add','ro_req','PERSONAL_DATA_REMOVE',
      'Żądanie usunięcia danych',
      'T','T',_del
   );
   exec('type_add','ro_req','PERSONAL_DATA_REMOVE_RET',
      'Usunięcie danych',
      'T','N',_del
   );
   exec('type_add','ro_req','PROCESSING_PERMIT',
      'Zgoda na przetwarzanie danych osobowych',
      'P','N',_del
   )
?};

:: Cele przetwarzania danych osobowych
RO_REQC.index('CODE');
RO_REQC.prefix();
{? ~RO_REQC.first() | (var_pres('_a')=type_of(0) & _a<>0)
|| exec('purpose_add','ro_req','C01','Realizacja postanowień umowy o pracę');
   exec('purpose_add','ro_req','C02','Realizacja postanowień umowy cywilnoprawnej');
   exec('purpose_add','ro_req','C03','Realizacja praw majątkowych po zmarłym pracowniku');
:: W Mercie cel NIE jest obsługiwany.
::   exec('purpose_add','ro_req','C04','Realizacja procesu rekrutacji');
   exec('purpose_add','ro_req','C05','Wykonanie postanowień umowy o świadczenie usług z podwykonawcą zależnym');
   exec('purpose_add','ro_req','C06','Realizacja postanowień umowy z kontrahentem');
   exec('purpose_add','ro_req','C07','Realizacja żądania władzy publicznej (egzekucja, zajęcie, itp.)');
   exec('purpose_add','ro_req','C08','Współpraca z osobami zewnętrznymi do celów RCP');
   exec('purpose_add','ro_req','C09','Współpraca na podstawie umowy z agencją pracy tymczasowej')
?};

:: Identyfikatory danych osobowych
RO_REQI.index('NAME');
RO_REQI.prefix();
{? ~RO_REQI.first() | (var_pres('_a')=type_of(0) & _a<>0)
|| exec('ident_add','ro_req','Address','Adres zamieszkania (Ulica, nr domu)');
   exec('ident_add','ro_req','AptNo','Numer mieszkania/lokalu');
   exec('ident_add','ro_req','AutoDecision','Zautomatyzowane podejmowanie decyzji');
   exec('ident_add','ro_req','BirthDate','Data urodzenia');
   exec('ident_add','ro_req','BldgNo','Numer domu');
   exec('ident_add','ro_req','City','Miejscowość');
   exec('ident_add','ro_req','Country','Kraj');
   exec('ident_add','ro_req','DataSource','Źródło pochodzenia danych');
   exec('ident_add','ro_req','District','Województwo');
   exec('ident_add','ro_req','EMail','E-mail');
   exec('ident_add','ro_req','Fax','Numer faxu');
   exec('ident_add','ro_req','FirstName','Imię');
   exec('ident_add','ro_req','IDCardNo','Numer dowodu osobistego');
   exec('ident_add','ro_req','PESEL','PESEL');
   exec('ident_add','ro_req','PassportNo','Numer paszportu');
   exec('ident_add','ro_req','ForeignTIN','Zagraniczny numer identyfikacyjny podatnika');
   exec('ident_add','ro_req','PhoneNo','Numer telefonu');
   exec('ident_add','ro_req','REGON','REGON');
   exec('ident_add','ro_req','SecondName','Drugie imię');
   exec('ident_add','ro_req','Street','Ulica');
   exec('ident_add','ro_req','SurName','Nazwisko');
   exec('ident_add','ro_req','TIN','NIP');
   exec('ident_add','ro_req','WWWPage','Strona internetowa');
   exec('ident_add','ro_req','ZipCode','Kod pocztowy')
?};

RO_PERD.clear();
{? ~RO_PERD.first() | (var_pres('_a')=type_of(0) & _a<>0)
|| exec('add_ro_perd','ro_req','RECRUITMENT_PROCESS',
      'Zgoda na przetwarzanie danych osobowych na potrzeby procesu rekrutacji'
   );
   exec('add_ro_perd','ro_req','RECRUITMENT_RETAIN',
      'Zgoda na pozostawienie danych osobowych po zakończeniu procesu rekrutacji'
   )
?};
~~


\type_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Dodanie lub modyfikacja typu żądania
::   WE: _a [STRING] - klucz
::       _b [STRING] - nazwa
::       [_c] [STRING] - (SUPPORT) sposób obsługi: N-ręczna T-automatyczna P-jak dla zgód o przetwarzanie
::       [_d] [STRING] - (MANUAL) czy żądanie może być realizowane z Pulpitu [T/N]
::       [_e] [STRING] - (DEL) czy żądanie ma być automatycznie usuwane po realizacji [T/N]
::----------------------------------------------------------------------------------------------------------------------
RO_REQT.index('KEY');
RO_REQT.prefix();
{? ~(_put:=RO_REQT.find_key(_a,))
|| RO_REQT.blank();
   RO_REQT.KEY:=_a
?};
   RO_REQT.NAME:=_b;
{? var_pres('_c')=type_of('') & (_c='T' | _c='N' | _c='P')
|| RO_REQT.SUPPORT:=_c
?};
{? var_pres('_d')=type_of('') & (_d='T' | _d='N')
|| RO_REQT.MANUAL:=_d
?};
{? var_pres('_e')=type_of('') & (_e='T' | _e='N')
|| RO_REQT.DEL:=_e
?};
{? _put
|| RO_REQT.put()
|| RO_REQT.add()
?}


\suport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Czy typ żądania wykonywany automatycznie
::   WE: _a - nazwa typu żądania
::----------------------------------------------------------------------------------------------------------------------
'PERSONAL_DATA_INFO,MOVE_DATA_TO_DIGIT,PERSONAL_DATA_REMOVE,PERSONAL_DATA_REMOVE_RET'*_a


\t_ro_reqp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Triger po add i put tabeli RO_REQP
::----------------------------------------------------------------------------------------------------------------------
{? 'FirstName,SecondName,SurName,PESEL,TIN,EMail'*RO_REQP.RO_REQI().NAME>0
|| RO_REQT.cntx_psh();
   RO_REQN.cntx_psh();
   RO_REQN.prefix();
   {? RO_REQP.RO_REQN & RO_REQN.seek(RO_REQP.RO_REQN)
   || RO_REQN.SUBJECT:='';
      RO_REQP.cntx_psh();
      RO_REQP.index('KEY'); RO_REQP.prefix(RO_REQN.ref(),null);
      {? RO_REQP.find_key('FirstName') || RO_REQN.SUBJECT+=RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('SecondName') || RO_REQN.SUBJECT+=RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('SurName') || RO_REQN.SUBJECT+=RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('PESEL') || RO_REQN.SUBJECT+='PESEL: '+RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('TIN') || RO_REQN.SUBJECT+='NIP: '+RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('REGON') || RO_REQN.SUBJECT+='REGON: '+RO_REQP.VAL+' ' ?};
      {? RO_REQP.find_key('EMail') || RO_REQN.SUBJECT+='e-mail: '+RO_REQP.VAL+' ' ?};
      RO_REQP.cntx_pop();
      RO_REQN.put()
   ?};
   RO_REQN.cntx_pop();
   RO_REQT.cntx_pop()
?};
~~


\ident_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Dodanie lub modyfikacja identyfikatorów danych osobowych
::   WE: _a [STRING] - nazwa
::       _b [STRING] - opis
::----------------------------------------------------------------------------------------------------------------------
RO_REQI.index('NAME'); RO_REQI.prefix();
{? RO_REQI.find_key(_a,)
|| RO_REQI.DESC:=_b;
   RO_REQI.put()
|| RO_REQI.NAME:=_a;
   RO_REQI.DESC:=_b;
   RO_REQI.add()
?}


\ro_reqi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wyświetla identyfikatory danych
::----------------------------------------------------------------------------------------------------------------------
RO_REQI.index('NAME'); RO_REQI.prefix();
RO_REQI.win_sel('WER');
RO_REQI.select(,,,{? exec('is_aip','rodo') || '' || 'I' ?})


\ro_reqc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wyświetla cele przetwarzania danych osobowych
::----------------------------------------------------------------------------------------------------------------------
RO_REQC.index('CODE'); RO_REQC.prefix();
RO_REQC.win_sel('WER');
RO_REQC.select()


\purpose_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Dodaje lub modyfikuje cel przetwarzania danych osobowych
::   WE: _a - kod celu
::       _b - opis celu
::----------------------------------------------------------------------------------------------------------------------
RO_REQC.index('CODE');
RO_REQC.prefix();
{? RO_REQC.find_key(_a,)
|| RO_REQC.DESC:=_b;
   RO_REQC.put()
|| RO_REQC.blank(1);
   RO_REQC.CODE:=_a;
   RO_REQC.DESC:=_b;
   RO_REQC.add()
?}


\find_ro_reqt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Zwraca wskazanie typu zapytania lub wartość null
::   WE: _a [STRING] - symbol typu zapytania
::   WY: wskazanie wiersza lub null
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
RO_REQT.cntx_psh();
RO_REQT.index('KEY');
RO_REQT.prefix();
{? RO_REQT.find_key(_a,)
|| _ref:=RO_REQT.ref()
?};
RO_REQT.cntx_pop();
_ref


\find_ro_reqi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Zwraca ref identyfikator danych lub wartość pustą
::   WE: _a - nazwa identyfikatore
::----------------------------------------------------------------------------------------------------------------------
RO_REQI.index('NAME'); RO_REQI.prefix();
{? RO_REQI.find_key(_a,)
|| RO_REQI.ref()
|| null
?}


\ro_reqn_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Usunięcie zapytania o dane osobowe
::   WE: _a  - wskazanie na zapytanie (RO_REQN)
::      [_b] - z nagłówkiem? [1] - tak, 0-nie
::----------------------------------------------------------------------------------------------------------------------
RO_REQP.cntx_psh();
RO_REQR.cntx_psh();
RO_REQZ.cntx_psh();
RO_REQN.cntx_psh();
RO_REQN.prefix();
{? RO_REQN.seek(_a)
|| RO_REQP.index('KEY'); RO_REQP.prefix(RO_REQN.ref(),null);
   {? RO_REQP.first() || {! |? RO_REQP.del() !} ?};
   RO_REQP.index('KEY'); RO_REQP.prefix(RO_REQN.ref());
   {? RO_REQP.first() || {! |? RO_REQP.del() !} ?};
   RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
   {? RO_REQR.first()
   || RO_REQZ.index('RO_REQR');
      {!
      |? RO_REQZ.prefix(RO_REQR.ref());
         {? RO_REQZ.first() || {! |? RO_REQZ.del() !} ?};
         RO_REQR.del()
      !}
   ?};
   RO_PERM.index('AGREE_D'); RO_PERM.prefix(RO_REQN.ref());
   {? RO_PERM.first() || {! |? RO_PERM.del() !} ?};
   {? var_press('_b')<=0 | _b || RO_REQN.del() ?}
?};
RO_REQN.cntx_pop();
RO_REQZ.cntx_pop();
RO_REQR.cntx_pop();
RO_REQP.cntx_pop()


\bl_ro_reqn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wartość poczatkowa pola RO_REQP.RO_REQN
::----------------------------------------------------------------------------------------------------------------------
RO_REQR.RO_REQN


\bl_ro_reqc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wartość poczatkowa pola RO_REQP.RO_REQC
::----------------------------------------------------------------------------------------------------------------------
RO_REQR.RO_REQC


\bl_ro_reqr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wartość poczatkowa pola RO_REQZ.RO_REQR
::----------------------------------------------------------------------------------------------------------------------
RO_REQR.ref()


\blank_ids
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Czyści zawartość bufora identyfikatorów
::   WE: _a [OBJECT] - wskazanie bufora identyfikatorów
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{! _ni:=1..obj_len(_a)
|! _a[_ni]:=''
!};
_a.RU_DS:='Dane udostępnione przez podmiot';
_a.RU_AD:='Nie dotyczy';
~~


\save_ids
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Zapisuje w tabeli RO_REQP zgromadzone identyfikatory.
::   WE: _a [OBJECT] - wskazanie obiektu klasy RODO
::       _b [ARRAJ] - tablica nazwana zawierająca zarejestrowane identyfikatory
::       _c [_RO_REQN] - wskazanie nagłówka żądania
::       _d [_RO_REQC] - wskazanie celu przetwarzania
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TCID:=_a.TCID;
_ids:=_b;
_reqn:=_c;
_reqc:=_d;

RO_REQP.cntx_psh();
RO_REQP.index('UNIQUE');
RO_REQP.prefix(_reqn,_reqc);

: utrwal znalezione identyfikatory
_loop:=_TCID.first();
{!
|? _loop
|! _id:=exec('find_ro_reqi','ro_req',_TCID.KEY);
   _val:=($('_a.'+_TCID.ACR))(_ids);
   {? _val<>''
   || {? RO_REQP.find_key(_id)
      || {? RO_REQP.VAL*_val=0
         || RO_REQP.VAL+=', '+_val;
            RO_REQP.put()
         ?}
      || RO_REQP.blank();
         RO_REQP.RO_REQN:=_reqn;
         RO_REQP.RO_REQC:=_reqc;
         RO_REQP.RO_REQI:=_id;
         RO_REQP.VAL:=_val;
         RO_REQP.add()
      ?}
   ?};
   _loop:=_TCID.next()
!};

RO_REQP.cntx_pop();
~~


\clear_ids
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Przypisuje wartości puste zgromadzonym identyfikatorom.
::   WE: _a [_RO_REQN] - wskazanie nagłówka żądania
::       _b [_RO_REQC] - wskazanie celu przetwarzania
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_reqn:=_a;
_reqc:=_b;

RO_REQP.cntx_psh();
RO_REQP.index('KEY');
RO_REQP.prefix(_reqn,_reqc);
_loop:=RO_REQP.first();
{!
|? _loop
|! RO_REQP.VAL:='';
   RO_REQP.put();
   _loop:=RO_REQP.next()
!};
RO_REQP.cntx_pop();

~~


\process
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Obsługa zapytania związanego z przetwarzaniem danych osobowych.
::   WE: _a [_RO_REQN] - wskazanie nagłówka zapytania
::   WY: wskazanie tablicy nazwanej (patrz \ret_val/ro_cfg.fml)
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('ret_val','ro_cfg');

{? var_pres('_a')<>type_of(null) | _a=null | form(8+$_a)<>RO_REQN.name()
|| _ret.STATUS:=-1;
   _ret.INFO:='Błędny argument wywołania formuły "process".';
   return(_ret)
?};

_epilog:="
   RO_REQN.cntx_pop();
   ~~
";

RO_REQN.cntx_psh();
RO_REQN.prefix();
{? ~RO_REQN.seek(_a)
|| _epilog();
   return(_ret)
?};

: kontekst działania
_reqn:=_a;
_rkey:=RO_REQN.RO_REQT().KEY;

: weryfikacja konfiguracji
{? exec('isvalid','ro_cfg')=0
|| exec('invalid','ro_cfg',_reqn);
   _ret.STATUS:=-1;
   _ret.INFO:='Działanie niemożliwe na podstawie niekompletnej konfiguracji.';
   _epilog();
   return(_ret)
?};

: przygotowanie środowiska do realizacji zapytania
exec('init','rod');
_RODO:=obj_new(@.CLASS.RODO);
_RODO.read(_reqn);
: parametry zapytania
_par:=_RODO.getPar();
: bufor znalezionych rekordów
_RECB:=exec('get_recb','ro_cfg');

: Odczyt identyfikatorów z załączników (jeżeli istnieją)
_ok:=1;
RO_REQR.cntx_psh();
RO_REQR.index('RO_REQN');
RO_REQR.prefix(_reqn);
{? RO_REQR.first()
|| RO_REQZ.cntx_psh();
   RO_REQZ.index('RO_REQR');
   {!
   |? RO_REQZ.prefix(RO_REQR.ref());
      {? RO_REQZ.first()
      || {!
         |? {? RO_REQZ.DESC='#Identyfikator' & RO_REQZ.bl_info('FILE','NAME')+11='-#sysid.txt'
            || _wynik:=exec('import_tid','ro_cfg',RO_REQZ.FILE,_RECB);
               {? _wynik<>''
               || _ok:=0;
                  _ret.INFO:=_wynik;
                  _ret.STATUS:=-1
               ?};
               0
            || RO_REQZ.next()
            ?}
         !}
      ?};
      _ok & RO_REQR.next()
   !};
   RO_REQZ.cntx_pop()
?};
RO_REQR.cntx_pop();
{? ~_ok
|| _epilog();
   return(_ret)
?};

{? _RECB.size()=0
:  wyszukaj dane zgodnie z parametrami zapytania
|| {? (_rs:=exec('szuk','rodo',_RODO,_RECB,_par,_reqn)).STATUS<0
:     błąd krytyczny w wykonywaniu formuł
   || exec('invalid','ro_cfg',_reqn);
      _epilog();
      return(_rs)
   ?}
?};

{? _rkey='PERSONAL_DATA_INFO' | _rkey='MOVE_DATA_TO_DIGIT'
:: Żądanie informacji o zakresie przetwarzania danych osobowych
:: i identycznie realizowane żądanie otrzymania danych do odczytu maszynowego
|| {? (_ri:=exec('info','rodo',_RODO,_RECB,exec('get_infb','ro_cfg'),_reqn)).STATUS<0
:     błąd krytyczny w wykonywaniu formuł
   || exec('invalid','ro_cfg',_reqn);
      _epilog();
      return(_ri)
   ?}

|? _rkey='PERSONAL_DATA_REMOVE' | _rkey='PERSONAL_DATA_REMOVE_RET'
:: Żądanie usunięcia danych, potwierdzenie usunięcia danych, "autoretencja"
|| {? (_ru:=exec('zap','rodo',_RODO,_RECB,exec('get_infb','ro_cfg'),_reqn)).STATUS<0
:     błąd krytyczny w wykonywaniu formuł
   || exec('invalid','ro_cfg',_reqn);
      _epilog();
      return(_ru)
   ?}
?};

_epilog();
_ret


\auto_ret
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Formuła tworząca żądania PERSONAL_DATA_REMOVE_RET.
::   WE: _a [INTEGER] - liczba dni wyprzedzenia w określaniu retencji (domyślnie 0)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_data:=date()+{? var_pres('_a')=type_of(0) || _a ?};

_RECB:=exec('outdated','ro_req',_data);
{? _RECB.size()=0
|| return()
?};

: przygotuj środowisko
exec('init','rod');
_RODO:=obj_new(@.CLASS.RODO);
_INFB:=exec('get_infb','ro_cfg');

: parametry działania formuł
_arg:=exec('szuk_arg','rodo',_RODO);
_arg.AUTO:=1;

_reqt:=exec('find_ro_reqt','ro_req','PERSONAL_DATA_REMOVE_RET');

_epilog:="
   RO_MAP.cntx_pop();
   RO_CFG.cntx_pop();
   RO_REQN.cntx_pop();
   {? do_state()<>0
   || undo();
      end()
   ?};
   ~~
";

RO_REQN.cntx_psh();
RO_REQN.clear();
RO_CFG.cntx_psh();
RO_CFG.prefix();
RO_MAP.cntx_psh();

_loop:=_RECB.first();
{!
|? _loop
:  żądania dla znalezionych rekordów
|! {? RO_CFG.seek(_RECB.RO_CFG,)
   || _cel:=RO_CFG.RO_REQC;
:     ustal kontekst dla uzyskania informacji
      _arg.AUTO_TAB:=_RECB.TABELA;
      _arg.AUTO_REF:=_RECB.REKORD;
      _arg.RET.clear();
      _INFB.erase();

:     dla różnych celów mogą być zgromadzone różne identyfikatory
:     funkcje wyszukujące muszą odpowiednio wypełniać tablicę IDS
      exec('blank_ids','ro_req',_arg.IDS);

:     nagłówek i skojarzone informacje
      do();
      RO_REQN.blank();
      RO_REQN.DATE:=_data;
      RO_REQN.DATA_REJ:=date();
      RO_REQN.TIME:=time();
      RO_REQN.USER:=OPERATOR.USER().KOD;
      RO_REQN.RO_REQT:=_reqt;
      RO_REQN.STATUS:='n';
      {? RO_REQN.add()
      || _reqn:=RO_REQN.ref();

:        pobierz identyfikatory
         on_error(2);
         RO_CFG.FML_SZUK();
         ($RO_FML.memo_txt(,1,'FORMULA'))(_arg);
         {? in_error() | _arg.RET.STATUS<0
:           katastrofa!
         || _epilog();
            return()
         ?};
         on_error();

:        dołącz wynik i zebrane identyfikatory
         exec('set_ro_reqr','ro_req',_reqn,_cel,0);
         exec('save_ids','ro_req',_RODO,_arg.IDS,_reqn,null);
         exec('save_ids','ro_req',_RODO,_arg.IDS,_reqn,_cel);

:        dołącz wszystkie informacje i załączniki jak dla zapytania PERSONAL_DATA_INFO
         _TEMP:=sql('select * from :_a where :_a.NUMER=:_b',_RECB,_RECB.NUMER);
         exec('info','rodo',_RODO,_TEMP,_INFB,_reqn);
         obj_del(_TEMP);

         exec('create_tid','ro_cfg',_reqn,_cel,_RECB);

:        odnotuj utworzenie zapytania aby uniknąć zwielokrotnień
:        exec('add','ro_map','Z',_RECB.SQL_REF,_cel,REF.FIRMA)
:        wyszukiwanie i dodawanie z uwzględnieniem celu
         RO_MAP.index('TYP_ORG');
         RO_MAP.blank(1);
         RO_MAP.TYP:='Z';
         RO_MAP.FIRMA:=REF.FIRMA;
         RO_MAP.ORG_REF:=_RECB.SQL_REF;
         RO_MAP.NEW_REF:=$_cel;
         {? ~RO_MAP.find_rec()
         || RO_MAP.add()
         ?};
         ~~
      ?};
      end()
   ?};
   _loop:=_RECB.next()
!};
_epilog();
~~


\outdated
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Formuła wyszukująca dane osobowe do usunięcia (upłynął dla nich okres retencji)
::   WE: _a [DATA] - data, na którą ma być przeprowadzony test retencji (domyślnie data bieżąca)
::   WY: lista znalezionych zapisów, dla których upłynął okres retencji
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('_a')<>type_of(date) | _a<date() || date() || _a ?};

: tabela zawierająca rekordy do usunięcia
_RECB:=exec('get_recb','ro_cfg');

: weryfikacja konfiguracji
{? exec('isvalid','ro_cfg')=0
|| return(_RECB)
?};

: przygotuj środowisko
exec('init','rod');
_RODO:=obj_new(@.CLASS.RODO);

: parametry działania formuł
_arg_fnd:=exec('szuk_arg','rodo',_RODO);
_arg_fnd.AUTO:=1;
_arg_ret:=exec('zap_arg','rodo',_RODO);
_arg_ret.DATA:=_data;
_arg_ret.AUTO:=1;

: zmienne pomocnicze
_TEMP:=_arg_fnd.RECB;

_copy:=exec('copy_recb','ro_cfg',_RECB);

_epilog:="
   on_error();
   RO_CFG.cntx_pop();
   RO_FML.cntx_pop();
   {? var_pres('_a')=type_of(SYSLOG)
   || _a.erase()
   ?};
   ~~
";

: ponawianie autoretencji
_repeat:=#exec('get_par','#parametr',501,2);
{? _repeat>0
|| _ddx:=date()-_repeat;
   RO_MAP.cntx_psh();
   RO_MAP.index('STATUS');
   RO_MAP.prefix(REF.FIRMA,'Z','N');
   {? RO_MAP.first() & RO_MAP.DATA<=_ddx
   || {!
      |? RO_MAP.del() & RO_MAP.DATA<=_ddx
      !}
   ?};
   RO_MAP.cntx_pop()
?};

: faza pierwsza - wyszukaj wszystkie dane osobowe
RO_FML.cntx_psh();
RO_FML.prefix();
RO_CFG.cntx_psh();
RO_CFG.index('NUMER');
RO_CFG.prefix();
_loop:=RO_CFG.first();
{!
|? _loop
|!
:  przeszukaj wszystkie kartoteki zawierające dane osobowe
   exec('set_recb','ro_cfg',_TEMP,#RO_CFG.ref(),#RO_CFG.RO_REQC);
   _TEMP.erase();
   _arg_fnd.RET.clear();

:  wykonaj formułę wyszukującą
   on_error(2);
   RO_CFG.FML_SZUK();
   ($RO_FML.memo_txt(,1,'FORMULA'))(_arg_fnd);
   {? in_error() | _arg_fnd.RET.STATUS<0
:     katastrofa!
   || _epilog(_RECB);
      return(_RECB)
   ?};

:  sprawdź zgodność znalezionych rekordów z celem przetwarzania danych
   _loop:=_TEMP.first();
   {!
   |? _loop
   |! _test:=0;
      _TAB:=($_TEMP.TABELA)();
      _TAB.cntx_psh();
      _TAB.use(_TEMP.MASKA);
      _TAB.prefix();
      {? _TAB.seek(_TEMP.REKORD,)
:        to powinno się udać...
      || RO_CFG.FML_WCEL();
:        test zgodności z celem przetwarzania
         _test:=($RO_FML.memo_txt(,1,'FORMULA'))();
         {? in_error()
:           katastrofa!
         || _epilog(_RECB);
            _TAB.cntx_pop();
            return(_RECB)
         ?}
      || _epilog(_RECB);
         _TAB.cntx_pop();
         return(_RECB)
      ?};
      _TAB.cntx_pop();
      &_TAB;
      _loop:={? _test<>0 || _TEMP.next() || _TEMP.del() ?}
   !};

:  usuń spośród znalezionych rekordów te, które:
:  - zostały zanonimizowane (lokalnie lub globalnie)
:  - mają żądania usunięcia
   {? _TEMP.first()
   || {!
      |? _z_cel:=0;
         RO_MAP.cntx_psh();
         RO_MAP.index('TYP_ORG');
         RO_MAP.prefix(REF.FIRMA,'Z',_TEMP.SQL_REF);
         _loop:=RO_MAP.first();
         {!
         |? _loop & ~_z_cel
         |! {? RO_MAP.NEW_REF=$RO_CFG.RO_REQC
            || _z_cel:=1
            ?};
            _loop:=RO_MAP.next()
         !};
         RO_MAP.cntx_pop();
         {? _z_cel | exec('find_org','ro_map','U',_TEMP.SQL_REF,REF.FIRMA)
         || _TEMP.del()
         || _TEMP.next()
         ?}
      !}
   ?};

:  sprawdź retencję dla każdego ze znalezionych i pasujących rekordów
   _loop:=_TEMP.first();
   {!
   |? _loop
   |!
:     ustal rekord źródłowy, docelowy i kontekst działania
      _arg_ret.SRC:=exec('ref_arg','ro_cfg',_TEMP.TABELA,_TEMP.SQL_REF);
      _arg_ret.NEW:=exec('ref_arg','ro_cfg');
      _arg_ret.INFB.erase();
      _arg_ret.RET.clear();

:     test retencji danych
      RO_CFG.FML_RET();
      ($RO_FML.memo_txt(,1,'FORMULA'))(_arg_ret);
      {? in_error()
:        katastrofa!
      || _epilog(_RECB);
         return(_RECB)
      ?};
:     czy okres retencji minął?
      {? _arg_ret.RET.STATUS=0
      || _copy(_TEMP,_RECB)
      ?};
      obj_del(_arg_ret.SRC);
      obj_del(_arg_ret.NEW);
      _loop:=_TEMP.next()
   !};
   on_error();

   _loop:=RO_CFG.next()
!};
_epilog();

_RECB


\find_ro_reqr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Wyszukuje wartość zwracaną
::   WE: _a [REFERENCE] - wskazanie nagłówka zapytania
::       _b [REFERENCE] - wskazanie celu przetwarzania
::   WY: wynik operacji find_key lub 0 w przypadku błędnego wywołania
::UWAGA: formuła zmienia kontekst tabeli
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null || return(0)
|? var_pres('_b')<>type_of(null) | _b=null || return(0)
?};

RO_REQR.index('RO_REQN');
RO_REQR.prefix();
RO_REQR.find_key(_a,_b)


\set_ro_reqr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Ustawia (dodaje/aktualizuje) wartość zwracaną
::   WE: _a [REFERENCE] - wskazanie nagłówka zapytania
::       _b [REFERENCE] - wskazanie celu przetwarzania
::       [_c] [INTEGER] - kod wyniku
::       [_d] [STRING] - opis wyniku
::   WY: wskazanie dodanego/zaktualizowanego wiersza lub null
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null || return(null)
|? var_pres('_b')<>type_of(null) | _b=null || return(null)
?};

_ret:=null;
_reqn:=_a;
_reqc:=_b;
_code:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_desc:={? var_pres('_d')=type_of('') || _d || '' ?};
{? _desc=''
|| _desc:=exec('desc_ro_req','ro_req',_code)
?};

RO_REQR.cntx_psh();
{? exec('find_ro_reqr','ro_req',_reqn,_reqc)
|| RO_REQR.RES_CODE:=_code;
   RO_REQR.RES_DESC:=_desc;
   {? RO_REQR.put()
   || _ret:=RO_REQR.ref()
   ?}
|| RO_REQR.blank();
   RO_REQR.RO_REQN:=_reqn;
   RO_REQR.RO_REQC:=_reqc;
   RO_REQR.RES_CODE:=_code;
   RO_REQR.RES_DESC:=_desc;
   {? RO_REQR.add()
   || _ret:=RO_REQR.ref()
   ?}
?};
RO_REQR.cntx_pop();
_ret


\permission
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy strukturę potrzebną do przekazania informacji o dokumencie.
::   WE: _a [STRING] - nazwa pliku z rozszerzeniem
::       _b [STRING] - kod opisu zgody
::       _c [STRING] - opis załącznika
::   WY: tablicę nazwana o strukturze:
::       NAME [STRING] - _a
::       DESC [STRING] - _b
::       CODE [STRING] - _c
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | form(_a)='' |
   var_pres('_b')<>type_of('') | form(_b)=''
|| return()
?};

_desc:='Zgoda na przetwarzanie danych';

_ret:=obj_new('NAME','CODE','DESC');
_ret.NAME:=_a;
_ret.CODE:=_b;
_ret.DESC:=_desc;
{? var_pres('_c')<>type_of('') | form(_c)=''
|| RO_PERD.cntx_psh();
   RO_PERD.index('CODE');
   RO_PERD.prefix();
   {? RO_PERD.find_key(_b,)
   || _ret.DESC:=RO_PERD.DESC
   ?};
   RO_PERD.cntx_pop()
?};
_ret


\appendix
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy strukturę potrzebną do przekazania informacji o załączniku w formacie CSV.
::   WE: _a [TABLE] - alias tabeli tymczasowej zawierającej dane do zapisania
::       _b [STRING] - nazwa pliku csv (z rozszerzeniem) do którego będą zapisane dane
::       _c [STRING] - opis załącznika
::       _d [INTEGER] - sposób prezentacji w dokumencie html: liczba<>0 - horyzontalna, wpp - wertykalna (domyślnie)
::   WY: tablicę nazwana o strukturze:
::       DATA [TABLE] - _a
::       NAME [STRING] - _b
::       DESC [STRING] - _c
::       VIEW [STRING] - _d
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) |
   var_pres('_b')<>type_of('') | form(_b)='' |
   var_pres('_c')<>type_of('') | form(_c)=''
|| return()
?};

_app:=obj_new('DATA','NAME','DESC','VIEW');
_app.DATA:=_a;
_app.NAME:=_b;
_app.DESC:=_c;
_app.VIEW:=(var_pres('_d')=type_of(0) & _d<>0);
_app


\app4req
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Sprawdza, czy dla danego kodu żadania powinny być tworzone załączniki.
::   WE: _a [STRING] - kod typu żądania
::   WY: 1 - załączniki powinny być wygenerowane, 0 - brak załączników
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _a='PERSONAL_DATA_INFO' | _a='MOVE_DATA_TO_DIGIT' | _a='PERSONAL_DATA_REMOVE_RET'
?}


\add_ro_reqz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy załącznik do odpowiedzi na zapytanie.
::   WE: _a [_RO_REQR] - wskazanie odpowiedzi
::       _b [INTEGER/FILE] - uchwyt pliku lub obiekt reprezentujący plik
::       _c [STRING] - nazwa pliku załącznika
::       _b [STRING] - opis załącznika
::       _e [STRING] - czy załącznik jest techniczny? [T/N] (domyślnie N)
::   WY: wskazanie utworzonego załącznika lub null
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
_reqr:=_a;
_file:=_b;
_name:=_c;
_desc:=_d;
_tech:={? var_pres('_e')<>type_of('') | _e='' || 'N' || _e ?};

_ret:=null;
RO_REQZ.cntx_psh();
RO_REQZ.index('RO_REQR');
RO_REQZ.prefix(_reqr);
RO_REQZ.blank();
RO_REQZ.RO_REQR:=_reqr;
RO_REQZ.DESC:=_desc;
RO_REQZ.TECH:=_tech;
{? RO_REQZ.add() & RO_REQZ.bl_put('FILE',_file,,,_name)
|| _ret:=RO_REQZ.ref()
?};
RO_REQZ.cntx_pop();
_ret


\desc_ro_req
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Dla podanego kodu wyniku zwraca właściwy opis.
::   WE: _a [INTEGER] - kod
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || ''
|? _a=0   || 'Podmiot odnaleziony, operacja wykonana.'@
|? _a=1   || 'Podmiot odnaleziony, niemożliwe wykonanie.'@
|? _a=2   || 'Podmiot nie został odnaleziony.'@
|? _a=3   || 'Niejednoznaczna identyfikacja podmiotu.'@
|? _a=500 || 'Inny'@
|| ''
?}


\find_ro_perd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Wyszukuje opis zgody.
::   WE: _a [STRING] - kod opisu zgody
::   WY: wskazanie znalezionego wiersza lub null
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;

{? var_pres('_a')<>type_of('') | _a=''
|| return(_ref)
?};

_code:=_a;

RO_PERD.cntx_psh();
RO_PERD.index('CODE');
{? RO_PERD.find_key(_code,)
|| _ref:=RO_PERD.ref()
?};
RO_PERD.cntx_pop();

_ref


\add_ro_perd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Tworzy opis zgody.
::   WE: _a [STRING] - kod opisu zgody
::       _b [STRING] - kompentrz opisu zgody
::   WY: wskazanie utworzonego/znalezionego wiersza lub null
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;

{? var_pres('_a')<>type_of('') | _a='' || return(_ref)
|? var_pres('_b')<>type_of('') | _b='' || return(_ref)
?};

_code:=_a;
_desc:=_b;

_ref:=exec('find_ro_perd','ro_req',_code);
{? _ref<>null
|| return(_ref)
?};

RO_PERD.cntx_psh();
RO_PERD.clear();
RO_PERD.blank();
RO_PERD.CODE:=_code;
RO_PERD.DESC:=_desc;
{? RO_PERD.add(1)
|| _ref:=RO_PERD.ref()
?};
RO_PERD.cntx_pop();

_ref


\remove_perms
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Usuwa zgody wymagane do przetwarzania danych związane ze wskazanym wierszem tabeli.
::   WE: _a [OBJECT] - wskazanie na tablicę nazwaną zawierającą informacje o wierszu tabeli (patrz \ref_arg/ro_cfg)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_arg:=_a;

_REQN:=sql(
   'select distinct RO_PERM.RO_REQN as REF '+
   'from RO_PERM '+
   'where RO_PERM.TABLE=\':_a\' and RO_PERM.MASK=\':_b\' and RO_PERM.RECORD=:_c',
   2-!_arg.TABELA,form(8+$_arg.REF),#_arg.REF
);

{? type_of(_REQN)<>type_of(SYSLOG) | ~_REQN.first()
|| return()
?};

RO_REQN.cntx_psh();
RO_REQR.cntx_psh();
RO_REQR.index('RO_REQN');
RO_REQZ.cntx_psh();
RO_REQZ.index('RO_REQR');
RO_PERM.cntx_psh();
RO_PERM.index('AGREE_D');

_loop:=1;
{!
|? _loop
|! {? RO_REQN.seek(BIT.sqlint(_REQN.REF),)
:     ustalono nagłówek związany z przekazaniem zgody
   ||
:     oznacz jako wymagający przesłania do RU
      RO_REQN.STATUS:='P';
      {? RO_REQN.put()
      ||
:        przeglądaj wszystkie odpowiedzi
         RO_REQR.prefix(RO_REQN.ref());
         _loop:=RO_REQR.first();
         {!
         |? _loop
         |!
:           usuń wszystkie dokumenty zgód
            RO_REQZ.prefix(RO_REQR.ref());
            {? RO_REQZ.first()
            || {!
               |? RO_REQZ.del()
               !}
            ?};
            _loop:=RO_REQR.next()
         !};
:        usuń wszystkie zgody na przetwarzanie
         RO_PERM.prefix(RO_REQN.ref());
         {? RO_PERM.first()
         || {!
            |? RO_PERM.del()
            !}
         ?}
      ?}
   ?};
   _loop:=_REQN.next()
!};

: porządki
RO_PERM.cntx_pop();
RO_REQZ.cntx_pop();
RO_REQR.cntx_pop();
RO_REQN.cntx_pop();
~~


\resclear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wyczyszczenie odpowiedzi na zapytanie
::   WE: _a - wskazanie na nagłówek
::----------------------------------------------------------------------------------------------------------------------
RO_REQN.cntx_psh();
RO_REQN.prefix();
{? RO_REQN.seek(_a)
|| RO_REQP.cntx_psh();
   RO_REQP.index('UNIQUE');
   RO_REQP.prefix(RO_REQN.ref(),null);
   {? RO_REQP.first() || {! |? RO_REQP.del !} ?};
   RO_REQZ.cntx_psh();
   RO_REQZ.index('RO_REQR');
   RO_REQR.cntx_psh();
   RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
   {? RO_REQR.first()
   || {!
      |? RO_REQP.prefix(RO_REQN.ref(),RO_REQR.RO_REQC);
         {? RO_REQP.first() || {! |? RO_REQP.del() !} ?};
         RO_REQZ.prefix(RO_REQR.ref());
         {? RO_REQZ.first() || {! |? RO_REQZ.del() !} ?};
         RO_REQR.RES_CODE:=-1;
         RO_REQR.RES_DESC:='';
         RO_REQR.put();
         RO_REQR.next()
      !}
   ?};
   RO_REQR.cntx_pop();
   RO_REQZ.cntx_pop();
   RO_REQP.cntx_pop()
?};
RO_REQN.cntx_pop()


\ro_perm_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Wyzwalacz po poprawieniu tabeli RO_PERM
::   WE: _a - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? RO_PERM.FINISH_D<>bfld('FINISH_D') |
   RO_PERM.F_REASON<>bfld('F_REASON') |
   RO_PERM.STATE<>bfld('STATE')
|| RO_REQN.cntx_psh();
   RO_REQN.prefix();
   RO_PERM.RO_REQN();
   RO_REQN.STATUS:='P';
   RO_REQN.put();
   RO_REQN.cntx_pop()
?};
~~


\ro_perm_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wyzwalacz przed usunieciem RO_PERM
::----------------------------------------------------------------------------------------------------------------------
{? RO_PERM.RO_REQN
|| RO_REQN.cntx_psh();
   RO_REQN.prefix();
   RO_PERM.RO_REQN();
   RO_REQN.STATUS:='P';
   RO_REQN.put();
   RO_REQN.cntx_pop()
?};
1


\tb_ro_reqn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wyzwalacz przed add i put tabeli RO_REQN
::----------------------------------------------------------------------------------------------------------------------
_status:=~-RO_REQN.STATUS;
RO_REQN.STATUS_O:=
   {? _status='N'
   || 'Nieobsłużone'
   |? _status='T'
   || 'Obsłużone'
   |? _status='S'
   || 'Wysłane'
   |? _status='X'
   || 'TYMCZASOWE'
   || '???'
   ?};
1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 7eb15f1ed060f46720b17776b7b829d96a729a03fc2e6f7b418a2110255a5f5c319824a9a35377f2afc9cb2d5f2b7213ddeb5e423f7fc2a1bbd9b34fafd220237e8277b4c086cd44283560a2d1f6f5eb744c7504d4a31bfb14516a07c75098d50545076eb347e4aa6fa64da1645ffe4992e81592fd388ea7980d34a97efcae3f
