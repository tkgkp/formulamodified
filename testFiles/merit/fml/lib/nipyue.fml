:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: nipyue.fml
:: Utworzony: 2015.02.27
:: Autor: AMK
::======================================================================================================================
:: Zawartość: Okienko NIP-ów UE
::======================================================================================================================


\nipy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.40]
:: OPIS: Wyświetlenie NIP-ow UE
::   WE: _a - 'KH' lub 'INFO' - czyje NIPY UE (kontrahenta czy licencjobiorcy)
::       [_b] - 0 bez okienka 1 (domyślnie) z okienkiem
::       [_c] - dla _a='KH' =1-prefix wg KH.ref =0-prefix wg -1
::  OLD: \nipy/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
__NIPYF:=_a;
{? var_pres('_b')<>type_of(1) || _b:=1 ?};
{? var_pres('_c')<>type_of(1) || _c:=1 ?};
SLO.cntx_psh(); SLU.cntx_psh(); KH.cntx_psh();
SLO.win_dict('ONE'); SLO.win_sel('ONE'); SLO.win_edit('RED');
{? _c & cur_tab(1,1)=SLO || KH.index('KOD'); KH.prefix(2); KH.find_key(SLO.KOD) ?};
{? _a='KH' & KH.TYP<>'U' & _b=1 || FUN.info('Kontrahent nie jest płatnikiem podatku VAT w UE.'@) ?};
ref_nip:={? _a='INFO' || null || {? _c || KH.ref() || -1 ?} ?};
{? _a='INFO'
|| NIPY.index('SNIP_F');
   NIPY.prefix(REF.S_FIRMA)
|| NIPY.index('SNIP');
   NIPY.prefix(ref_nip)
?};
{? _a='KH'
|| NIPY.win_sel('WER_KH')
|| NIPY.win_sel('WER')
?};
NIPY.win_edit('RED');
{? _b=1
|| {? _a='KH' & ~exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHR')
   || NIPY.select(,,,'DPU:D')
   || NIPY.select()
   ?}
?};
{? _a='KH' & KH.TYP<>'U' & NIPY.first() & _b=1
|| {? FUN.ask('Kontrahent nie jest Podatnikiem VAT UE.\nZmienić typ kontrahenta?'@)
   || KH.TYP:='U';
      exec('kh_mod','kontrahent');
      KH.put()
   ?}
?};
VAR_DEL.delete('ref_nip','__NIPYF');
SLO.cntx_pop(); SLU.cntx_pop(); KH.cntx_pop();
''


\bl_nip_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: Wartość początkowa dla pola NIPY.KH
::  OLD: \bl_nip_kh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__NIPYF')<=0 | __NIPYF='KH'
|| KH.ref()
|| null
?}


\prz_kraj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.40]
:: OPIS: Formuła ustawiająca SLU dla słownika użytkownika ~KRAJE UE
::   WY: 1/0 (słownik istnieje lub nie)
::  OLD: \prz_kraj/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.win_dict('ONE'); SLO.win_sel('ONE');
SLO.hdr_sel(); SLO.hdr_sel('Kraje'@);
SLUAPPL.index('NAZ'); SLUAPPL.prefix('F','~KRAJE UE');
{? SLUAPPL.first() || SLUAPPL.SLU(); 1 || 0 ?}


\wz_kraj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: wzorzec kraju w tabeli NIPY
::  OLD: \wz_kraj/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('prz_kraj','nipyue'); ''


\bl_nip_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: Wartość początkowa dla pola NIPY.FIRMA
::  OLD: \bl_nip_firma/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__NIPYF')<=0 | __NIPYF='KH'
|| null
|| REF.S_FIRMA
?}


\chk_nipy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Formuła Rekord po w okienkach wertowania tabeli NIPY
::   WY: wynik chk_rec
::  OLD: \chk_nipy/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh();
{? var_pres('ref_nip')>0 & ref_nip=null || NIPY.KH:=null ?};
_p:=__CHK.record(NIPY,,'KRAJ','NIP');
{? _p=''
|| _a:={? -menu_txt='popraw' || NIPY.ref() || null ?};
   _kraj:=NIPY.KRAJ().KOD;
   NIPY.cntx_psh();
   {? var_pres('__NIPYF')<=0 | __NIPYF='KH'
   || NIPY.index('SNIP');
      NIPY.prefix(NIPY.KH,_kraj)
   || NIPY.index('SNIP_F');
      NIPY.prefix(REF.S_FIRMA,_kraj)
   ?};
   {? NIPY.first & NIPY.ref<>_a
   ||
         {? NIPY.KH=null()
         ||  FUN.info('Dla licencjobiorcy'
               ' wprowadzono już symbol NIP w UE'
               '\nz oznaczeniem kraju %1.'@[_kraj])
       ||  FUN.info('Dla kontrahenta'
               ' wprowadzono już symbol NIP w UE'
               '\nz oznaczeniem kraju %1.'@[_kraj])
         ?};
         _p:='NIP'
   ?};
   NIPY.cntx_pop()
?};
{? _p='' & NIPY.KH<>null & KH.TYP<>'U' & var_pres('wyp_kh')>0
|| _w:=ask('Kontrahent nie jest Podatnikiem VAT UE.\nKontynuować?'@,,0,'Nie'@,'Tak - zmienić typ kontrahenta'@);
   KH.cntx_psh();
   KH.prefix(2);
   {? _w=0
   || _p:='KH'
   || KH.TYP:='U';
      exec('kh_mod','kontrahent');
      KH.put()
   ?};
   KH.cntx_pop()
?};
{? _p='' || NIPY.SNIP:=NIPY.KRAJ().KOD+exec('niptostr','#string',NIPY.NIP) ?};
SLO.cntx_pop();
_p


\chk_nipue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Sprawdzenie czy NIP UE jest poprawny w usłudze VIES
::   WE: [_a] - NIP UE
::  OLD: \chk_nipue/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| {? ~NIPY.KRAJ
   || FUN.info('Nie podano kraju.'@);
      return('edit:KRAJ')
   |? NIPY.NIP=''
   || FUN.info('Nie podano numeru identyfikacji.'@);
      return('edit:NIP')
   ?}
?};
_save:=-1;
_nip:={? _=0 || NIPY.KRAJ().KOD+exec('niptostr','#string',NIPY.NIP) || _a ?};
_ok:=exec('chk_nipue0','nipyue',_nip);
{? _ok.ERR=-1
|| ''
|? _ok.ERR>0
|| FUN.info('Powstał błąd podczas sprawdzania NIP UE.\n%1'@[_ok.ERRSTR])
|? _ok.VALID
|| _name:={? _ok.NAME<>'' || _ok.NAME || 'brak danych'@ ?};
   _address:={? _ok.ADDRESS<>'' || _ok.ADDRESS || 'brak danych'@ ?};
   FUN.info('NIP UE: \'%1\' jest aktywny.\n\n'
            'Nazwa: %2\n'
            'Adres: %3'@[_nip,_name,_address]);
   _save:=1
|| FUN.info('NIP UE: \'%1\' jest nieaktywny.'@[_nip]);
   _save:=0
?};
_kh:={? cur_tab=NIPY
     || NIPY.KH
     |? cur_tab=TYM_NIP & TYM_NIP.REFKH
     || KH.cntx_psh();
        KH.prefix();
        _ref:={? KH.seek(TYM_NIP.REFKH,) || KH.ref() || null ?};
        KH.cntx_pop();
        _ref
     |? cur_tab=TYM_NIP
     || null
     || KH.ref()
     ?};
{? _save>-1
|| exec('add_chk_vat','kontrahent',_nip,'U',_kh,_save)
?};
''


\chk_nipue0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Akcja sprawdzająca numer NIP UE w usłudze VIES (http://ec.europa.eu/taxation_customs/vies/vatResponse.html)
::   WE: _a - numer NIP UE
::   WY: Zwraca tablice nazwaną z wynikiem zapytania
::  OLD: \chk_nipue0/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('gus_reader_decl','nipyue');
_toSend:=
'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:ec.europa.eu:taxud:vies:services:checkVat:types">'+
'<soapenv:Header/>'+
'<soapenv:Body>'+
'<urn:checkVatApprox>'+
'<urn:countryCode>'+(2+_a)+'</urn:countryCode>'+
'<urn:vatNumber>'+(2-_a)+'</urn:vatNumber>
'+
'</urn:checkVatApprox>'+
'</soapenv:Body>'+
'</soapenv:Envelope>';
_ret:='';
_ret:=obj_new('VALID','NAME','ADDRESS','ERR','ERRSTR');
_res:=GusReader.httpSendReceived('http://ec.europa.eu/taxation_customs/vies/services/checkVatService',_toSend);
_res:=STR.w952maz(_res);
_ret.ERR:=0; _ret.ERRSTR:='';
{? 3+_res='ERR'
|| _ret.ERR:=1;
   _ret.ERRSTR:=4-_res
|? _res=''
|| _ret.ERR:=1
|| _retv:=exec('xml2val','xml',_res,'valid',,0);
   _ret.VALID:={? _retv='true'
               || _name:=exec('xml2val','xml',_res,'traderName',,0);
                  _ret.NAME:=exec('xml2txt','xml',_name);
                  _ret.ADDRESS:=exec('xml2val','xml',_res,'traderAddress',,0);
                  1
               |? _retv='false'
               || 0
               || _ret.ERR:=1
               ?}
?};
_ret


\gus_reader_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Definicja objektu do obsługi pobierania danych kontrahenta z GUS
::       metody:
::       getKH(numer) - wynik napis z danymi kontrahenta z GUS (separator '<>')
::                      NIP<>REGON<>nazwa<>ulica<>miasto<>kod pocztowy<>poczta<>data otrzymania KRS<>numer KRS
::          numer - napis z numerem NIP lub REGON
::       httpSendReceiver(adres,toSend) - wynik zwrócony z serwera http
::          adres - adres serwera http (http://www.macrologic.pl:80)
::          toSend - tekst do wysłania do serwera (np. zadanie do WebService)
::  OLD: \gus_reader_decl/skid_kh.fml
:: ~OST: INFCOPY,INFEXISTS
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('GR_CLASS',@.CLASS)<0
|| obj_decl('GR_CLASS',
            obj_fld('LIB', 0),
            obj_fld('FGR', 0),
            obj_fld('FSR', 0),
            obj_fld('FSP', 0),
            obj_fld('FPA', 0),
            obj_fld('FSS', 0),
            obj_fld('FGS', 0),
            obj_fld('FLO', 0),
            obj_fld('FCL', 0),
            obj_fld('FAD', 0),
            obj_fld('FEX', 0),
            obj_fld('FE2', 0),
            obj_fld('FGT', 0),
            obj_meth('__init',"
               _Interm:=exec('interm','#system');
               {? _Interm
               ||
                  .LIB:=lib_load_srv_jar('gus_reader.jarl',0)
               ||
                  _dir:=pth_dir('gus_reader.jarl')+'/lib';
                  _fc:=\"{? ~fexists('@!tmp/'+_b,0) || fcopy(_a+'/'+_b,'@!tmp/'+_b,0,0,1) || 1 ?}\";
                  _fc(_dir,'commons-codec-1.8.jar');
                  _fc(_dir,'commons-httpclient-3.1.jar');
                  _fc(_dir,'commons-logging-1.1.1.jar');
                  .LIB:=lib_load('gus_reader.dll',1,,'reverseClassLoader=1')
               ?}

            "),
            obj_meth('__done',"
               {? .LIB
               || lib_free(.LIB)
               ?}
            "),
            obj_meth('setProxy',"
               {? .LIB
               || {? ~.FSP
                  || .FSP:=lib_decl(.LIB,,'void','setProxy','char *','int')
                  ?};
                  {? .FSP
                  || lib_call(.FSP,_a,_b)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''),type_of(1)),
            obj_meth('setProxyAuth',"
               {? .LIB
               || {? ~.FPA
                  || .FPA:=lib_decl(.LIB,,'void','setProxyAuth','char *','char *')
                  ?};
                  {? .FPA
                  || lib_call(.FPA,_a,_b)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''),type_of('')),
            obj_meth('getKH',"
               {? .LIB
               || {? ~.FGR
                  ||
                     _Interm:=exec('interm','#system');
                     {? _Interm
                     ||
                        FUN.emsg(exec('interm_nacc_msg','#system'));
                        return('')
                     ||
                        .FGR:=lib_decl(.LIB,,'char *','info','char *')
                     ?}
                  ?};
                  {? .FGR
                  || {!
                     |? _ret:='';
                        _ret:=STR.w952maz(lib_call(.FGR,_a));
                        {? 4+_ret='ERR:'
                        || {? _ret='ERR: Brak dostępu do proxy.'
                           || _ret:='';
                              FUN.info('Brak dostępu do proxy.'@);
                              1
                           || FUN.info(4-_ret);
                              _ret:='';
                              0
                           ?}
                        || 0
                        ?}
                     !};
                     _ret
                  || ''
                  ?}
               || ''
               ?}
            ",type_of('')),
            obj_meth('setSID',"
               {? .LIB
               || {? ~.FSS
                  || .FSS:=lib_decl(.LIB,,'void','setSID','char *')
                  ?};
                  {? .FSS
                  || lib_call(.FSS,_a)
                  ?}
               ?}
            ",type_of('')),
            obj_meth('getSID',"
               {? .LIB
               || {? ~.FGS
                  || .FGS:=lib_decl(.LIB,,'char *','getSID')
                  ?};
                  {? .FGS
                  || lib_call(.FGS)
                  || ''
                  ?}
               || ''
               ?}
            "),
            obj_meth('logout',"
               {? .LIB
               || {? ~.FLO
                  || .FLO:=lib_decl(.LIB,,'void','logout')
                  ?};
                  {? .FLO
                  || lib_call(.FLO)
                  ?}
               ?}
            "),
            obj_meth('httpSendReceived',"
               {? .LIB
               || {? ~.FSR
                  || .FSR:=lib_decl(.LIB,,'char *','httpSendReceived','char *','char *')
                  ?};
                  {? .FSR
                  || lib_call(.FSR,_a,_b)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''),type_of('')),
            obj_meth('clear',"
               {? .LIB
               || {? ~.FCL || .FCL:=lib_decl(.LIB,,'void','clear') ?};
                  {? .FCL || lib_call(.FCL) ?}
               ?}
            "),
            obj_meth('add',"
               {? .LIB
               || {? ~.FAD || .FAD:=lib_decl(.LIB,,'void','add','char *') ?};
                  {? .FAD || lib_call(.FAD,_a) ?}
               ?}
            ",type_of('')),
            obj_meth('get',"
               {? .LIB
               || {? ~.FGT || .FGT:=lib_decl(.LIB,,'char *','get','char *') ?};
                  {? .FGT || STR.w952maz(lib_call(.FGT,_a)) || '' ?}
               || ''
               ?}
            ",type_of('')),
            obj_meth('execute',"
               {? .LIB
               || {? ~.FEX || .FEX:=lib_decl(.LIB,,'void','execute','int') ?};
                  {? .FEX || lib_call(.FEX,_a) ?}
               ?}
            ",type_of(1)),
            obj_meth('execute',"
               {? .LIB
               || {? ~.FE2 || .FE2:=lib_decl(.LIB,,'char *','execute','char *') ?};
                  {? .FE2 || STR.w952maz(lib_call(.FE2,_a)) || '' ?}
               || ''
               ?}
            ",type_of(''))
   )
?};
{? var_pres('GusReader')>100 || obj_del(GusReader) ?};
GusReader:=obj_new(@.CLASS.GR_CLASS)


\get_from_gus2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Przypisuje dane kontrahenta na podstawie danych z GUS
::   WE: _a - dane z GUS
::       _b - pytać gdy śkreślony
::       _c - uaktualnić tylko znacznik czy kontrahent fizyczny
::  OLD: \get_from_gus2/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
_pyt:=_b;
_fiz:=_c;
_tab:=spli_str(_kh,'<>');
{! _i:=1..obj_len(_tab)
|! _tab[_i]:=form(_tab[_i])
!};
{? ~_pyt | _tab[12]='' | exec('gus_kh_del','!zws_par_kkhr',_tab[12])
|| {? _fiz=0
   || KH.KRAJ:='Polska';
      {? +_tab[1]=10
      || KH.SNIP:=KH.NIP:=_tab[1]
      |? KH.NIP='' & +ROZNE.NRNLR=10
      || KH.SNIP:=KH.NIP:=ROZNE.NRNLR
      ?};
      KH.REG:={? _tab[2]+5='00000' || _tab[2]-5 || _tab[2] ?};
      KH.NAZ_P:=exec('xml2txt','xml',_tab[3]);
      KH.REJ_INFO:='GUS-%1-%2'[$date(),$time()];
      {? menu_txt()='Popraw'
      || {? var_press('__nazwa_skrocona')>0
         || KH.NAZ:=__nazwa_skrocona;
            &__nazwa_skrocona
         || KH.NAZ:=60+KH.NAZ_P
         ?}
      || KH.NAZ:=60+KH.NAZ_P
      ?};
      {? var_press('DOM',KH)>0
      || {? _tab[4]<>''
         || KH.UL:={? -(3+_tab[4])='ul.' || |(3-_tab[4])
                   || _tab[4]
                   ?}
         ?};
         KH.DOM:=_tab[5];
         KH.LOKAL:=_tab[6]
      || KH.UL:={? _tab[4]='' & _tab[7]<>'' || _tab[7]
                |? -(3+_tab[4])='ul.' || |(3-_tab[4])
                || _tab[4]
                ?}+
                {? _tab[5]<>''
                || ' '+_tab[5]+{? _tab[6]<>'' || '/'+_tab[6] || '' ?}
                || ''
                ?}
      ?};
      KH.MIASTO:=_tab[7];
      KH.KPOCZ:=2+_tab[8]+'-'+(_tab[8]+3); {? |KH.KPOCZ='-' || KH.KPOCZ:='' ?};
      KH.POCZ:=_tab[9];
      KH.REG_DATA:=date(#(4+_tab[10]),#(2+(5-_tab[10])),#(_tab[10]+2));
      {? _tab[12]*'-'=5
      || KH.ZAK_DATA:=date(#(4+_tab[12]),#(2+(5-_tab[12])),#(_tab[12]+2))
      || KH.ZAK_DATA:=date(#(_tab[12]+4),#(2+(3-_tab[12])),#(2+_tab[12]))
      ?};
      KH.KRS:=_tab[11]
   ?};
   {? obj_len(_tab)>14 & _tab[15]<>''
   || KH.FIZYCZNY:={? _tab[15]='F' || 1 || 2 ?}
   ?};
   {? _tab[14]<>''
   || KH.KRAJ:=_tab[14]
   |? KH.KRAJ=''
   || KH.KRAJ:='Polska'
   ?};
   {? _tab[13]<>''
   || KRAJE.cntx_psh();
      KRAJE.index('KODISO'); KRAJE.prefix(_tab[13],);
      {? KRAJE.first() || KH.KRAJISO:=KRAJE.ref() ?};
      KRAJE.cntx_pop()
   |? ~KH.KRAJISO
   || KRAJE.cntx_psh();
      KRAJE.index('KODISO'); KRAJE.prefix('PL',);
      {? KRAJE.first() || KH.KRAJISO:=KRAJE.ref() ?};
      KRAJE.cntx_pop()
   ?}
?}


\all_from_gus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Pobiera informację o wszystkich kontrahenta z GUS-u
::  OLD: \all_from_gus/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy pobrać z bazy GUS znacznik: Osoba fizyczna dla kontrahentów?'@)
|| exec('gus_reader_decl','nipyue');
   {? var_press('gusReaderSID')>0 || GusReader.setSID(gusReaderSID) ?};
   _tab:=exec('gus_tab_err','nipyue');
   KH.cntx_psh();
   KH.index('KOD'); KH.prefix(2);
   PROGRESS.set(KH.size(),'Trwa pobieranie danych z GUS ...'@);
   {? KH.first()
   || {!
      |? _kod:={? KH.SNIP<>'' || KH.SNIP ||  KH.REG ?};
         {? _kod<>''
         || _kh:=GusReader.execute(_kod);
            {? _kh=''
            || {? KH.FIZYCZNY<>1
               || do();
                  KH.FIZYCZNY:=1; KH.put();
                  exec('giokhae','giodo');
                  exec('kh_mod','kontrahent');
                  {? end()
                  || _tab.add('Brak danych w GUS. Dla kontrahenta ustawiono znacznik osoba fizyczna: tak')
                  ?}
               || _tab.add('Brak danych w GUS')
               ?}
            |? 3+_kh='ERR'
            || _tab.add(4-_kh)
            |? _kh*'\n'<>0
            || _tab.add('Niejednoznaczna odpowiedź GUS')
            || fiz_kh:=KH.FIZYCZNY;
               exec('get_from_gus2','nipyue',_kh,0,1);
               {? KH.FIZYCZNY<>fiz_kh
               || do();
                  KH.put();
                  exec('giokhae','giodo');
                  exec('kh_mod','kontrahent');
                  {? end()
                  || _tab.add('Dla kontrahenta ustawiono znacznik osoba fizyczna: '+{? KH.FIZYCZNY=1 || 'tak' || 'nie' ?})
                  ?}
               ?}
            ?}
         ?};
         PROGRESS.next();
         KH.next()
      !}
   ?};
   KH.cntx_pop();
   _tab.select();
   PROGRESS.close();
   _sid:=GusReader.getSID();
   {? _sid<>'' || gusReaderSID:=_sid ?};
   VAR_DEL.delete('fiz_kh')
?};
''


\gus_tab_err
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Zwraca obiekt do przechowywania informacji o błędach związanych z komunikacją z GUS
::  OLD: \gus_tab_err/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new('tab','add','select');
_obj.tab:=tab_tmp(1,
   'K','STRING[8]','Kod',
   'S','STRING[10]','Skrót',
   'N','STRING[150]','Nazwa',
   'NIP','STRING[22]','NIP',
   'U','STRING[255]','Uwaga',
   'REF','INTEGER','Ref'
);
_obj.add:="
   .tab.K:=KH.KOD;
   .tab.S:=KH.SKR;
   .tab.N:=KH.NAZ_P;
   .tab.NIP:=KH.NIP;
   .tab.REF:=#KH.ref();
   .tab.U:=_a;
   .tab.add()
";
_obj.select:="
   _tab:=.tab;
   {? _tab.first()
   || _win:=_tab.mk_sel('Uwagi dotyczące komunikacji z GUS'@,'P',,,,,,,'U');
      _tab.win_fld(_win,,'K');
      _tab.win_fld(_win,,'S');
      _tab.win_fld(_win,,'N',,,50);
      _tab.win_fld(_win,,'NIP');
      _tab.win_fld(_win,,'U',,,100);
      _tab.win_act(_win,,'Wyświetl',,,,\"
         KH.cntx_psh();
         KH.index('KOD'); KH.prefix();
         {? KH.seek(cur_tab().REF,)
         || exec('kh_wys1','kontrahent')
         ?};
         KH.cntx_pop()
      \");
      _tab.win_act(_win,,'Kolejność');
      _tab.win_sel(_win);
      _tab.select()
   ?}
";
_obj


\set_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Ustala dany NIP UE jako domyślny dla danego kontrahenta
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab=NIPY
|| _tym:=0;
   _tab:=NIPY
|| _tym:=1;
   _tab:=TYM_NIP
?};

{? _tym=0 & _tab.KH=null()
|| FUN.info('Akcja dostępna wyłącznie dla rekordów powiązanych z kontrahentem.'@);
   return()
:: Jeżeli kontrahent ma nawiązaną relację, to nie można ustalić/zmienić domyślnego NIP UE
|? KH.TYP='U' & exec('kh_rel','!zws_par_kkhr',KH.ref(),1)
|| return()
?};

{? _tab.DEFAULT='T'
|| _txt:='Czy odznaczyć wybrany NIP jako domyślny?'@;
   _set:=0
|| _txt:='Czy ustawić wybrany NIP jako domyślny?'@;
   _set:=1
?};
{? FUN.ask(_txt)
||
:: Zapisanie nowej wartości znacznika
   {? _set
   || _tab.DEFAULT:='T'
   || _tab.DEFAULT:='N'
   ?};
   {? _tab.put()
   || {? _tym>0 & _tab.DEFAULT='T'
      ||
::       Zdjęcie znacznika domyślności z pozostałych rekordów w tabeli tymczasowej
         _ref:=_tab.ref();
         _tab.cntx_psh();
         _tab.prefix();
         {? _tab.first()
         || {!
            |?
               {? _tab.ref()<>_ref
               || _tab.DEFAULT:='N';
                  _tab.put()
               ?};
               _tab.next()
            !}
         ?};
         _tab.cntx_pop()
      ?}
   ?}
?};
~~


\kh_set_default
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Spradzenie, czy danemu kontrahentowi można przypisać domyślny NIP UE
::   WE: _a - KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
KH.cntx_psh();
KH.clear();
{? KH.seek(_kh)
|| NIPY.cntx_psh();
   NIPY.index('DEFAULT');
   NIPY.prefix(_kh,'T');
:: Jeżeli kontrahent nie ma przypisanego nipu domyślnego oraz ma przypisany tylko jeden NIP UE,
:: to przepisuje go jako domyślny nip dla kontrahenta
   {? ~NIPY.first()
   || _put:=0;
      NIPY.prefix(_kh);
      {? NIPY.first() & NIPY.size()=1
      || {? KH.NIP_UE<>NIPY.NIP
         || KH.NIP_UE:=NIPY.NIP;
            _put:=1
         ?}
      || {? KH.NIP_UE<>''
         || KH.NIP_UE:='';
            _put:=1
         ?}
      ?};
      {? _put
      || KH.put()
      ?}
   || {? KH.NIP_UE<>NIPY.NIP
      || KH.NIP_UE:=NIPY.NIP;
         KH.put()
      ?}
   ?};
   NIPY.cntx_pop()
?};
KH.cntx_pop();
~~


\nipy_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Usunięcie rekordu tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
{? exec('nipy_del_b','nipyue')=0
|| return()
?};

{? NIPY.DEFAULT='T'
|| _txt:='Wybrany NIP oznaczony jest jako domyślny.\nCzy mimo to usunąć?'@;
   _def:=1
|| _txt:='Czy usunąć bieżący wiersz?'@;
   _def:=0
?};
{? FUN.ask(_txt)
|| NIPY.del(,1)
?};
~~


\nipy_del_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Akcja przed usunięciem rekordu tabeli NIPY/TYM_NIP (wykorzystywana również jako akcja w oknach tymczasowych)
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
{? cur_tab=NIPY
|| {? NIPY.DEFAULT='T' & NIPY.KH<>null() & NIPY.KH().TYP='U' & exec('kh_rel','!zws_par_kkhr',NIPY.KH,1)
   ||
::    Jeżeli kontrahent ma nawiązaną relację, to nie można usunąć domyślnego NIP UE
      _result:=0
   ?}
|? cur_tab=TYM_NIP
|| {? TYM_NIP.DEFAULT='T' & KH.TYP='U' & exec('kh_rel','!zws_par_kkhr',KH.ref(),1)
   ||
::    Jeżeli kontrahent ma nawiązaną relację, to nie można usunąć domyślnego NIP UE
      _result:=0
   ?}
?};
_result


\nipy_mod_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Przed akcją Popraw dla rekordów tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
:: Jeżeli kontrahent ma nawiązaną relację, to nie można modyfikować domyślnego NIP UE
{? NIPY.DEFAULT='T' & NIPY.KH<>null() & NIPY.KH().TYP='U' & exec('kh_rel','!zws_par_kkhr',NIPY.KH,1)
|| _result:=0
?};
_result


\nipy_rkprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Rekord przed dla tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
~~


\nipy_trig_add_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Trigger po add() w tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
{? NIPY.KH<>null()
|| exec('kh_set_default','nipyue',NIPY.KH)
?};
~~


\nipy_trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Trigger po put() w tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
{? NIPY.KH<>null() & bfld('DEFAULT')<>NIPY.DEFAULT
||
:: Zmieniony znacznik domyślności
   {? NIPY.DEFAULT='T'
   || _ref:=NIPY.ref();
::    Zdjęcie znacznika domyślności z dotychczasowego nipu domyślnego
      NIPY.cntx_psh();
      NIPY.index('DEFAULT');
      NIPY.prefix(NIPY.KH,'T');
      {? NIPY.first()
      || _continue:=1;
         {? NIPY.ref()=_ref
         || _continue:=NIPY.next()
         ?};
         {? _continue
         || NIPY.prefix();
            NIPY.DEFAULT:='N';
            NIPY.put()
         ?}
      ?};
      NIPY.cntx_pop();
::    Przepisanie domyślnego nipu na KH
      KH.cntx_psh();
      NIPY.KH();
      KH.NIP_UE:=NIPY.NIP;
      KH.put();
      KH.cntx_pop()
   ||
::    Zdjęcie znacznika domyślności
      exec('kh_set_default','nipyue',NIPY.KH)
   ?}
|? NIPY.KH<>null() & NIPY.NIP<>KH.NIP_UE
|| _size:=0;
   NIPY.cntx_psh();
   NIPY.index('DEFAULT');
   NIPY.prefix(NIPY.KH);
   _size:=NIPY.size();
   NIPY.cntx_pop();
:: Zmodyfikowano NIP domyślny, przepisanie zmian na KH
   {? NIPY.DEFAULT='T' | _size=1
   || KH.cntx_psh();
      NIPY.KH();
      KH.NIP_UE:=NIPY.NIP;
      KH.put();
      KH.cntx_pop()
   ?}
?};
~~


\nipy_trig_del_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Trigger po del() w tabeli NIPY
::----------------------------------------------------------------------------------------------------------------------
_kh:=bfld('KH');
{? _kh<>null()
|| exec('kh_set_default','nipyue',_kh)
?};
~~


\get_from_gus3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SG [23.25]
:: OPIS: Przypisuje dane kontrahenta na podstawie danych z GUS
::   WE: _a - dane z GUS
::       _b - pytać gdy śkreślony
::       _c - uaktualnić tylko znacznik czy kontrahent fizyczny
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
_pyt:=_b;
_fiz:=_c;
_tab:=spli_str(_kh,'<>');
{! _i:=1..obj_len(_tab)
|! _tab[_i]:=form(_tab[_i])
!};
{? ~_pyt | _tab[12]='' | exec('gus_kh_del','!zws_par_kkhr',_tab[12])
|| {? _fiz=0
   || DOK.KH_KRAJ:='Polska';
      DOK.KH_FULL:=_tab[3];
      {? _tab[3]<>''
      || KH.cntx_psh();
         KH.index('KOD1');
         KH.prefix(SLO.KOD);
         {?  KH.first() & DOK.KH=KH.SKR | DOK.KH=''
         || DOK.KH:=_tab[3]
         ?};
         KH.cntx_pop()
      ?};
      DOK.UL:={? _tab[4]='' & _tab[7]<>'' || _tab[7]
             |? -(3+_tab[4])='ul.' || |(3-_tab[4])
             || _tab[4]
             ?};
      DOK.DOM:=_tab[5];
      DOK.LOKAL:=_tab[6];
      DOK.MIASTO:=_tab[7];
      DOK.KPOCZ:=2+_tab[8]+'-'+(_tab[8]+3); {? |KH.KPOCZ='-' || KH.KPOCZ:='' ?};
      DOK.POCZ:=_tab[9]
   ?}
?}


\get_from_vies
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Przypisuje dane kontrahenta na podstawie danych z VIES (w trakcie dodawania kontrahenta)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('select_nipue','nipyue')
|| _nip:=TYM_NIP.KRAJ+TYM_NIP.NIP;
   _vies:=exec('chk_nipue0','nipyue',_nip);
   {? _vies.ERR>0
   || FUN.info('Powstał błąd podczas sprawdzania NIP UE.\n%1'@[_vies.ERRSTR]);
      _save:=-1
   |? _vies.VALID
   || _save:=1
   || FUN.info('NIP UE: \'%1\' jest nieaktywny.'@[_nip]);
      _save:=0
   ?};
   _kh:={? cur_tab=NIPY
        || NIPY.KH
        |? cur_tab=TYM_NIP & TYM_NIP.REFKH
        || KH.cntx_psh();
           KH.prefix();
           _ref:={? KH.seek(TYM_NIP.REFKH,) || KH.ref() || null ?};
           KH.cntx_pop();
           _ref
        |? cur_tab=TYM_NIP
        || null
        || KH.ref()
        ?};
   {? _save>-1
   || exec('add_chk_vat','kontrahent',_nip,'U',_kh,_save)
   ?};
   {? _save=1
   || _vies.NAME:=exec('xml2txt','xml',_vies.NAME);
      _vies.ADDRESS:=exec('xml2txt','xml',_vies.ADDRESS);
      FUN.info('Uwaga. Przypisanie danych do poszczególnych pól należy skontrolować.'@);
      {? menu_txt()='Dołącz'
      || exec('vies_red_ad','nipyue',_vies)
      || exec('vies_red_ed','nipyue',_vies)
   ?}
   ?}
?};
exec('pw_nipue','!zws_par_kkhr');
''


\select_nipue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: formuła dla wyboru jednego NIP UE. Ustawia pola tabeli TYM_NIP
::   WE:
::   WY: 1 - gdy wybrano, 0 - gdy nie wybrano
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh();
SLU.cntx_psh();
SLU.index('NAZ');
SLU.prefix('~KRAJE UE');
SLU.first();
SLO.index('SL');
SLO.prefix(SLU.ref());
SLO.first();
_kwer:=SLO.mk_sel('~KRAJE UE'@,,,'kraje_wer',,,,,'U');
SLO.win_fld(_kwer,,'KOD',,,8,,,'Kod'@);
SLO.win_fld(_kwer,,'TR',,,40,,,'Treść'@);
SLO.win_act(_kwer,,'Formuła','&Wybierz'@@,,,,"sel_exit",1,,,,'W');
SLO.win_act(_kwer,,'Szukaj');
SLO.win_sel(_kwer);
_wer:=TYM_NIP.mk_sel('NIP kontrahenta - Wybierz dla którego pobrać dane z VIES'@,'P',,'tym_nip_wyb',,,,,'U');
TYM_NIP.win_fld(_wer,,'KRAJ');
TYM_NIP.win_fld(_wer,,'NIP',,,25);
TYM_NIP.win_fld(_wer,,'DEFAULT',,,,,,,,,2,,"'T'","'N'");
TYM_NIP.win_act(_wer,0,'Formuła','&Wybierz'@@,,,"sel_exit()",,1,,,,'W');
TYM_NIP.win_act(_wer,1,'Formuła','&Dołącz'@@,,'Dołącz NIP kontrahenta'@,"exec('dol_tnip','!zws_par_kkhr')",,1,,,,'D');
TYM_NIP.win_act(_wer,,'Formuła','&Dołącz'@@,,'Dołącz NIP kontrahenta'@,"exec('dol_tnip','!zws_par_kkhr')",,,,,,'D');
TYM_NIP.win_act(_wer,,'Formuła','&Popraw'@@,,'Popraw NIP kontrahenta'@,"exec('pop_tnip','!zws_par_kkhr')",,,,,,'P');
TYM_NIP.win_act(_wer,,'Usuń',,,'Usuń NIP kontrahenta'@,"exec('nipy_del_b','nipyue')");
TYM_NIP.win_act(_wer,,'Formuła','D&omyślny'@@,,,"exec('set_default','nipyue')",,,,,,'O');
TYM_NIP.win_act(_wer,,'Formuła','Sp&rawdź NIP UE'@@,,,"exec('chk_nipue','nipyue',TYM_NIP.KRAJ+TYM_NIP.NIP)",,,,,,'R');
TYM_NIP.win_btn(_wer,'text=Wybierz'@,'menu:W');
TYM_NIP.win_sel(_wer);
_ttmpred:=TYM_NIP.mk_edit('Symbol NIP w UE'@,,'tym_nip_red');
TYM_NIP.win_esep(_ttmpred,'NIP UE'@);
TYM_NIP.win_efld(_ttmpred,,'KRAJ',,,3,,1);
TYM_NIP.win_efld(_ttmpred,,'NIP');
TYM_NIP.win_edit(_ttmpred);
_zapisz:=TYM_NIP.win_ebtn(_ttmpred,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Zapisz'@],"'key:F2'");
_anuluj:=TYM_NIP.win_ebtn(_ttmpred,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Anuluj'@],"'key:Esc'");
TYM_NIP.btn_eopt(_ttmpred,_zapisz,'tooltip='+exec('help_red_ok','#window','Z'));
TYM_NIP.btn_eopt(_ttmpred,_anuluj,'tooltip='+exec('help_red_esc','#window','A'));
{? TYM_NIP.select()
|| _res:=1
|| _res:=0
?};
SLU.cntx_pop();
SLO.cntx_pop();
_res


\vies_red_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Wyświetlenie okna dla dodawania danych z VIES (akcja dodaj)
::   WE: _a - dane z VIES
::----------------------------------------------------------------------------------------------------------------------
_vies:=_a;
_vies_tmp:=tab_tmp(,'NAME','STRING[255]','Nazwa',
                   'ADDRESS','STRING[255]','Adres');
_kh_tmp:=tab_tmp(,'NAZ','STRING[60]','Nazwa skrócona',
                  'NAZ_P','STRING[150]','Nazwa pełna',
                  'MIASTO','STRING[30]','Miasto',
                  'UL','STRING[150]','Ulica',
                  'KPOCZ','STRING[6]','Kod pocztowy',
                  'POCZ','STRING[30]','Poczta',
                  'DOM','STRING[8]','Dom',
                  'LOKAL','STRING[8]','Lokal');
_vies_tmp.NAME:=gsub(_vies.NAME,'\n',' ');
_vies_tmp.ADDRESS:=gsub(_vies.ADDRESS,'\n',' ');
_vies_tmp.add();
_edit:=_vies_tmp.mk_edit(,0);
_vies_tmp.win_esep(_edit,'Dane pobrane z VIES'@);
_vies_tmp.win_efld(_edit,,'NAME',,,60,,1);
_vies_tmp.win_efld(_edit,,'ADDRESS',,,60,,1);
_vies_tmp.win_ecol(_edit);

_vies_tmp.win_esep(_edit,'Dane kontrahenta do nadpisania'@);
_vies_tmp.win_efld(_edit,_kh_tmp,'NAZ',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'NAZ_P',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'MIASTO',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'UL',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'DOM',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'LOKAL',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'KPOCZ',,,60);
_vies_tmp.win_efld(_edit,_kh_tmp,'POCZ',,,60);
:: przypisanie danych vies do pól
exec('spli_vies','nipyue',_vies,_kh_tmp);
_ok:=_vies_tmp.win_ebtn(_edit,'text=%1'['Zapisz'@],'key:F2');
_vies_tmp.btn_eopt(_edit,_ok,'tooltip='+exec('help_red_ok','#window','Z'));
_anul:=_vies_tmp.win_ebtn(_edit,'text=%1'['Anuluj'@],'key:Esc');
_vies_tmp.btn_eopt(_edit,_anul,'tooltip='+exec('help_red_esc','#window','A'));
_vies_tmp.win_edit(_edit);
_edit:=_vies_tmp.edit();
{? _edit
|| KRAJE.cntx_psh();
   KRAJE.index('KODISO'); KRAJE.prefix(TYM_NIP.KRAJ,);
   {? KRAJE.first()
   || KH.KRAJISO:=KRAJE.ref();
      KH.KRAJ:=KRAJE.NAZ
   ?};
   KRAJE.cntx_pop();
::   przepisanie wartości do tabeli KH
   {! _i:=1.._kh_tmp.fld_num()
   |! ($('KH.'+_kh_tmp.fld_acr(_i)+':=\''+_kh_tmp[_i]+'\''))()
   !};
   KH.REJ_INFO:='VIES-%1-%2'[$date(),$time()];
   return(1)
|| return(0)
?}


\vies_red_ed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: Wyświetlenie okna dla dodawania danych z VIES (akcja popraw)
::   WE: _a - dane z VIES
::----------------------------------------------------------------------------------------------------------------------
_vies:=_a;
_vies_tmp:=tab_tmp(,'NAME','STRING[255]','Nazwa',
                   'ADDRESS','STRING[255]','Adres');
_kh_tmp:=tab_tmp(,'NAZ','STRING[60]','Nazwa skrócona',
                  'NAZ_P','STRING[150]','Nazwa pełna',
                  'MIASTO','STRING[30]','Miasto',
                  'UL','STRING[150]','Ulica',
                  'KPOCZ','STRING[6]','Kod pocztowy',
                  'POCZ','STRING[30]','Poczta',
                  'DOM','STRING[8]','Dom',
                  'LOKAL','STRING[8]','Lokal');
_akt_tmp:=tab_tmp(,'NAZ','STRING[1]','Nazwa skrócona',
                  'NAZ_P','STRING[1]','Nazwa pełna',
                  'MIASTO','STRING[1]','Miasto',
                  'UL','STRING[1]','Ulica',
                  'KPOCZ','STRING[1]','Kod pocztowy',
                  'POCZ','STRING[1]','Poczta',
                  'DOM','STRING[1]','Dom',
                  'LOKAL','STRING[1]','Lokal');

_vies_tmp.NAME:=gsub(_vies.NAME,'\n',' ');
_vies_tmp.ADDRESS:=gsub(_vies.ADDRESS,'\n',' ');
_vies_tmp.add();
_vies_edit:=_vies_tmp.mk_edit();
_dane_vies:="
            _vies_tmp:=_a;
            _vies_edit:=_b;
            _vies_tmp.win_esep(_vies_edit,'Dane pobrane z VIES'@);
            _vies_tmp.win_efld(_vies_edit,,'NAME',,,60,,1);
            _vies_tmp.win_efld(_vies_edit,,'ADDRESS',,,60,,1)";

{? exec('interm','#system')
|| _dane_vies(_vies_tmp,_vies_edit);
   _vies_tmp.win_ecol(_vies_edit,'100%')
?};
_vies_tmp.win_esep(_vies_edit,'Dane kontrahenta do nadpisania'@);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'NAZ',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'NAZ_P',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'MIASTO',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'UL',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'DOM',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'LOKAL',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'KPOCZ',,,40);
_vies_tmp.win_efld(_vies_edit,_kh_tmp,'POCZ',,,40);

{? ~exec('interm','#system')
|| _dane_vies(_vies_tmp,_vies_edit)
?};

_vies_tmp.win_ecol(_vies_edit,'33%');
_vies_tmp.win_esep(_vies_edit,'Zaktualizować pole?'@);
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'NAZ',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'NAZ_P',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'MIASTO',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'UL',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'DOM',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'LOKAL',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'KPOCZ',,,5,,,,,,'check-box',,"'T'","'N'");
_vies_tmp.win_efld(_vies_edit,_akt_tmp,'POCZ',,,5,,,,,,'check-box',,"'T'","'N'");

_vies_tmp.win_ecol(_vies_edit,'33%');
_vies_tmp.win_esep(_vies_edit,'Obecne dane kontrahenta'@);
_vies_tmp.win_efld(_vies_edit,KH,'NAZ',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'NAZ_P',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'MIASTO',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'UL',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'DOM',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'LOKAL',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'KPOCZ',,,40,,1);
_vies_tmp.win_efld(_vies_edit,KH,'POCZ',,,40,,1);
_ok:=_vies_tmp.win_ebtn(_vies_edit,'text=%1'['Zapisz'@],'key:F2');
_vies_tmp.btn_eopt(_vies_edit,_ok,'tooltip='+exec('help_red_ok','#window','Z'));
_anul:=_vies_tmp.win_ebtn(_vies_edit,'text=%1'['Anuluj'@],'key:Esc');
_vies_tmp.btn_eopt(_vies_edit,_anul,'tooltip='+exec('help_red_esc','#window','A'));


:: przypisanie danych vies do pól
exec('spli_vies','nipyue',_vies,_kh_tmp);
:: zaznaczenie checkbox'ów
{! _i:=1.._kh_tmp.fld_num()
|! {? _kh_tmp[_i]<>($('KH.'+_kh_tmp.fld_acr(_i)))()
   || _akt_tmp[_i]:='T'
   || _akt_tmp[_i]:='N'
   ?}
!};
_vies_tmp.win_edit(_vies_edit);
_edit:=_vies_tmp.edit();
{? _edit
|| KRAJE.cntx_psh();
   KRAJE.index('KODISO'); KRAJE.prefix(TYM_NIP.KRAJ,);
   {? KRAJE.first()
   || KH.KRAJISO:=KRAJE.ref();
      KH.KRAJ:=KRAJE.NAZ
   ?};
   KRAJE.cntx_pop();
::   przepisanie wartości do tabeli KH
   {! _i:=1.._kh_tmp.fld_num()
   |! {? _akt_tmp[_i]='T'
      || ($('KH.'+_kh_tmp.fld_acr(_i)+':=\''+_kh_tmp[_i]+'\''))()
      ?}
   !};
   KH.REJ_INFO:='VIES-%1-%2'[$date(),$time()];
   return(1)
|| return(0)
?}


\spli_vies
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WHAN [23.25]
:: OPIS: podział danycj z vies na pola odpowiadające tabeli KH
::   WE: _a - _vies
::       _b - _kh_tmp
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_vies:=_a;
_kh_tmp:=_b;
_kh_tmp.NAZ_P:=_vies.NAME;
_kh_tmp.NAZ:=60+_kh_tmp.NAZ_P;
_spli_adr:=spli_str(form(_vies.ADDRESS),'\n');
{? obj_len(_spli_adr)>1
|| _spli_pocz:=spli_str(form(_spli_adr[2]),' ');
   _kh_tmp.KPOCZ:=_spli_pocz[1];
   _kh_tmp.MIASTO:=_kh_tmp.POCZ:=form(+_spli_pocz[1]-_spli_adr[2]);
   _spli_ul:=spli_str(form(_spli_adr[1]),' ');
   {? obj_len(_spli_ul)=1
   || _kh_tmp.UL:=_spli_ul[1]
   |? obj_len(_spli_ul)=2
   || _kh_tmp.UL:=_spli_ul[1];
      _kh_tmp.DOM:=_spli_ul[2]
   |? obj_len(_spli_ul)=3
   || _kh_tmp.UL:=_spli_ul[1];
      _kh_tmp.DOM:=_spli_ul[2];
      _kh_tmp.LOKAL:=_spli_ul[3]
   || _kh_tmp.UL:=_spli_adr[1]
   ?};
   {? _kh_tmp.DOM*'/' & _kh_tmp.LOKAL=''
   || _spli_dom:=spli_str(_kh_tmp.DOM,'/');
      _kh_tmp.DOM:=_spli_dom[1];
      _kh_tmp.LOKAL:=_spli_dom[2]
   ?}
|| _kh_tmp.UL:=_spli_adr[1]
?};
~~

:Sign Version 2.0 jowisz:1045 2023/11/10 12:48:04 23980364834ff5aa926a5b663f7babe5f7029859cd52fc040f0d81e2a774f07736c5922e6059fcea4832450b4f505399e4b176f412c9cdb7754485e8b45d0e192c39c3d2435d6b836dca53b0a1f9987693ef2f0fad6aebff73076507a1b42f67101d11d6481712bdc48353df1575aca2ac90a6ce36e4c6d93fd5b86b9c32647e
