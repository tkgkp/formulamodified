:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: magdok_partie.fml
:: Utworzony: 23.07.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Formuły do obsługi tabeli ZPARS - powiązania partii z wydaniami surowców
::======================================================================================================================


\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tworzy bufor - tablice nazwana odwzorowujaca tabele ZPARS
::   WY: obj_new - tabelica nazwana reprezentujaca rekorod ZPARS
:: DOST: PUBLIC
::  OLD: \buffer/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ZPARS','buffer')


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Dodaje rekord do tabeli ZPARN na podstawie tablicy nazwanej bedaca buforem
::   WE: _a - _args - exec('buffer','magdok_partie')
::   WY: 0 - porazka
::       1 - sukces
:: DOST: PUBLIC
::  OLD: \add/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:={? var_pres('_a')>100 || _a || exec('buffer','magdok_partie') ?};

_result:=0;

ZPARS.cntx_psh(); ZPARS.clear();
:: przepisujemy wartosci z tablicy buforowej do bufora tabeli
_args.set();

_result:=ZPARS.add();

ZPARS.cntx_pop();
_result


\type_rw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca typ dla ZPARS - powiazanie rozchodu z partia
::   WY: STRING[1]
:: DOST: MBUILDER / PUBLIC
::  OLD: \type_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
'R'


\type_zw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca typ dla ZPARS - powiazanie zwrotu z partia
::   WY: STRING[1]
:: DOST: MBUILDER / PUBLIC
::  OLD: \type_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
'Z'


\creator_run
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Dla dokumentu magazynowego/zlecenia uruchamia mechanizm przyporzadkowujacy pobrania surowcow (RW)
::       do partii na zleceniu. Mechanizm wywolywany podczas akceptacji dokumentu klasy RP, podczas zamykania zlecenia
::   WE: [_a] - ND.ref()
::       [_b] - ZL.ref()
::       [_c] - INTEGER - tryb pracy kreatora -  0 - pokazywac okno tylko jezeli automatyczne przypisanie nie uda sie
::                                              [1] - zawsze pokazywac okno
::       [_d] - INTEGER - tryb akceptacji - 0 - podczas akceptacji nie sprawdzac nic
::                                          [1] - podczas akceptacji sprawdzac rozliczenie partii
::                                          2 - podczas akceptacji sprawdzac rozliczenie partii i rozchodow
::       [_e] - tab_tmp - tabela z refami dokumentow RW ktore dodac do kreatora, oprocz normalnie ladowanych
::                        normalnie sa ladowane dokumenty tylko zaakceptowane, a tutaj wchodza np dokumenty
::                        RW surowcow nielimitowanych automatycznie tworzone podczas akceptacji RP.
::                        Tabela jest deklarowana funkcja exec('rw_additional','magdok_partie')
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \creator_run/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_nd:=null();
_mode_view:='';
_rp:=~~;
_zw:=~~;
{? var_pres('_a')=type_of(ND.ref())
|| _nd:=_a;
   {? exec('nd_is_rp','magdok_wspolne',_nd)>0
   || _mode_view:='RP';
      _rp:=_nd
   |? exec('nd_is_zw','magdok_wspolne',_nd)>0
   || _mode_view:='ZW';
      _zw:=_nd
   ?}
?};

_zl:=null();
{? var_pres('_b')=type_of(ZL.ref())
|| _zl:=_b;
   _mode_view:='ZL'
?};

_mode:=1;
{? var_pres('_c')=type_of(0)
|| _mode:=_c
?};

_chk_mode:=1;
{? var_pres('_d')=type_of(0)
|| _chk_mode:=_d
?};

_rw_additional:=~~;
{? var_pres('_e')>100
|| _rw_additional:=_e
?};

_result:=0;

_cr_env:=exec('cr_env','magdok_partie');
VAR_DEL.delete('CR_ENV');
CR_ENV:=_cr_env;

_cr_env.CHK_MODE:=_chk_mode;
_cr_env.MODE:=_mode_view;

{? _mode_view='ZW'
|| _cr_env.TIE_MODE:='ZW'
?};

_cr_env.load(_rp,_zl,_zw);

{? type_of(_rw_additional)>100
|| _cr_env.rwinject(_rw_additional)
?};

:: Uruchamiam automat FIFO/LIFO
_can_continue:=0;
_auto_mode:=exec('get','#params',500760,2);

{? _auto_mode=exec('mode_fifo','magdok_partie')
|| _can_continue:=exec('auto_zpars','magdok_partie',_cr_env,'FIFO',0)
|? _auto_mode=exec('mode_lifo','magdok_partie')
|| _can_continue:=exec('auto_zpars','magdok_partie',_cr_env,'LIFO',0)
?};
:: Jesli nie bylo zadnych rozchodow i zwrotow to wlaczam przycisk silowej akceptacji
_rw_present:=0;
_zw_present:=0;
{? var_pres('TAB_RW',_cr_env)>100
||
   {? _cr_env.TAB_RW.size()>0
   || _rw_present:=1
   ?}
?};
{? var_pres('TAB_ZW',_cr_env)>100
||
   {? _cr_env.TAB_ZW.size()>0
   || _zw_present:=1
   ?}
?};
{? _rw_present=0 & _zw_present=0
|| _cr_env.FORCE:=1
?};

_zpars:=0;
_zpazs:=0;
{? var_pres('TAB_ZPAR',_cr_env)>100
|| _zpars:=_cr_env.TAB_ZPAR.size()
?};

{? var_pres('TAB_ZPAZ',_cr_env)>100
|| _zpazs:=_cr_env.TAB_ZPAZ.size()
?};

{? _zpars=0 & _zpazs=0
|| _cr_env.FORCE:=1
?};

{? _mode=1
|| _cr_env.select()
||
:: Uruchamiam akceptacje
   _can_continue:=exec('accept','magdok_partie',_cr_env);

:: Jesli sie nie udalo zaakceptowac to pokazuje okno
   {? _can_continue<=0
   || _cr_env.select()
   ?}
?};
{? _cr_env.ACCEPTED='T'
|| _result:=1
?};

VAR_DEL.delete('CR_ENV');
_result


\mode_manual
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca sposob wiazania rozchodow z partiami - recznie
::   WY: STRING
::  OLD: \mode_manual/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
'RĘCZNIE'


\mode_fifo
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca sposob wiazania rozchodow z partiami - automatycznie fifo
::   WY: STRING
::  OLD: \mode_fifo/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
'FIFO'


\mode_lifo
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca sposob wiazania rozchodow z partiami - automatycznie lifo
::   WY: STRING
::  OLD: \mode_lifo/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
'LIFO'


\auto_zpars
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Automatycznie przyporzadkowuje rozchodom surowca partie, zgodnie z wybranym sposobem (FIFO,LIFO)
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - sposob przypysywania dostaw - 'FIFO', 'LIFO'
::       [_c] - INTEGER 0/[1] czy robic grp_disp w oknie
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \auto_zpars/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_mode:=_b;

_grp_disp:=1;
{? var_pres('_c')=type_of(0)
|| _grp_disp:=_c
?};

_result:=0;
_can_continue:=0;

_tab:=_cr_env.TAB_PART;

{? _cr_env.TIE_MODE='RW'
|| _tabDK:=_cr_env.TAB_RW
|? _cr_env.TIE_MODE='ZW'
|| _tabDK:=_cr_env.TAB_ZW
?};

_tabDK.cntx_psh();

{? _cr_env.TIE_MODE='RW'
|| _tabDK.index(_cr_env.IN_RW6)
|? _cr_env.TIE_MODE='ZW'
|| _tabDK.index(_cr_env.IN_ZW6)
?};

_tab.cntx_psh();
_tab.index(_cr_env.IN_PART3);
_tab.prefix('S');

{? _tab.first()
|| {!
   |?
::    Dla kazdego surowca partii prefiksuje tabele z dostawami tego surowca do zlecenia z najbliższą partią
      _tabDK.prefix(_tab.ZL_REF,_tab.KTM_REF);
      _first:={? _mode='FIFO'
              || _tabDK.first()
              |? _mode='LIFO'
              || _tabDK.last()
              || 0
              ?};
      {? _first>0
      || _can_continue:=1;
         {!
         |?
::          Jesli surowiec ma byc przypisany recznie, to omijam go
            {? _tab.MANUAL<>'T'
            ||
::             Stoje na partii i rozchodzie wiec moge zrobic powiazanie
               _ilosc:=exec('sur_il4part','magdok_partie',_cr_env,_tabDK.SQL_REF,_tab.ZPAR_REF);
               {? _ilosc>0
               || _can_continue:=exec('create_zpar','magdok_partie',_cr_env,_ilosc,#_tabDK.ref())
               ?}
            ?};

            _next:={? _mode='FIFO'
                   || _tabDK.next()
                   |? _mode='LIFO'
                   || _tabDK.prev()
                   || 0
                   ?};
            _next>0 & _can_continue>0
         !}
      ?};
      _tab.next()
   !}
?};
_tab.cntx_pop();
_tabDK.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
:: Spradzam czy pozostały jakieś niepowiązane ilości na dokumentach RW
{? _cr_env.TIE_MODE='RW'
||
   _tabDK.cntx_psh();
   _tabDK.index(_cr_env.IN_RW6);
   _tabDK.prefix();
   _tab_dk_il:=tab_tmp(2,'KTM_REF','STRING[16]','M.ref()'
                        ,'ZL_REF','STRING[16]','ZL.ref()'
                        ,'IL_RW','REAL','Łączna ilość na dokumentach RW'
                        ,'IL_LIL','REAL','Łączna ilość z limitów zleceń'
                        ,'ILR','REAL','Ilość do rozliczenia'
                       );
   {? _tabDK.first()
   || {!
      |? {? _cr_env.MODE='RP'
         || _zlref:=exec('party_first','zl_link',exec('FindAndGet','#table','ZL',_tabDK.ZL_REF,,,null()));
            {? ~_tab_dk_il.find_key(_tabDK.KTM_REF,$_zlref)
            || _tab_dk_il.KTM_REF:=_tabDK.KTM_REF;
               _tab_dk_il.ZL_REF:=$_zlref;
               _tab_dk_il.ILR:=_tabDK.ILOSC-_tabDK.IL_PART;
               _tab_dk_il.IL_RW:=_tabDK.ILOSC;
               _tab_dk_il.add()
            || _tab_dk_il.ILR+=_tabDK.ILOSC-_tabDK.IL_PART;
               _tab_dk_il.IL_RW+=_tabDK.ILOSC;
               _tab_dk_il.put()
            ?}
         || _zlref:=exec('party_first','zl_link',exec('FindAndGet','#table','ZL',_tabDK.ZL_REF,,,null()));
            {? _tabDK.IL_PART<_tabDK.ILOSC
            || {? ~_tab_dk_il.find_key(_tabDK.KTM_REF,$_zlref)
               || _tab_dk_il.KTM_REF:=_tabDK.KTM_REF;
                  _tab_dk_il.ZL_REF:=$_zlref;
                  _tab_dk_il.ILR:=_tabDK.ILOSC-_tabDK.IL_PART;
                  _tab_dk_il.add()
               || _tab_dk_il.ILR+=_tabDK.ILOSC-_tabDK.IL_PART;
                  _tab_dk_il.put()
               ?}
            ?}
         ?};
         _tabDK.next()
      !}
   ?};
   _tabDK.cntx_pop();

:: Sumuje ilości wynikające z limitów i ilość nadwyżkową z dokumentów RW (tylko przy rozliczaniu partii do dok RP)
   {? _cr_env.MODE='RP'
   || {? _tab_dk_il.first()
      || {!
         |?
            _tab_dk_il.IL_LIL:=exec('sum_lil4zl','magdok_partie',_tab_dk_il.ZL_REF,
                                    exec('FindAndGet','#table',M,_tab_dk_il.KTM_REF,,,null()));
            {? _tab_dk_il.IL_RW>_tab_dk_il.IL_LIL
            || _tab_dk_il.ILR:=_tab_dk_il.IL_RW-_tab_dk_il.IL_LIL;
               _tab_dk_il.put();
               _tab_dk_il.next()
            || _tab_dk_il.del()
            ?}
         !}
      ?}
   ?};

   {? _tab_dk_il.first()
   || _ask:=-1;
      _tabZPAR:=_cr_env.TAB_ZPAR;
      _tabZPAR.cntx_psh();
      _tabZPAR.index(_cr_env.IN_ZPAR4);
      _tabDK.cntx_psh();
      {? _cr_env.TIE_MODE='RW'
      || _tabDK.index(_cr_env.IN_RW6)
      |? _cr_env.TIE_MODE='ZW'
      || _tabDK.index(_cr_env.IN_ZW6)
      ?};
      _tab.cntx_psh();
      _tab.index(_cr_env.IN_PART6);
      {!
      |?
         _tab.prefix(_tab_dk_il.KTM_REF,_tab_dk_il.ZL_REF);
         {? _tab.first()
         || {!
            |?
               {? _ask=0
               || _tab.last();
                  _tab_dk_il.last()
               ||
::                Sprawdzam czy do danego surowca danej partii nie utworzono już powiązania z nadmiarowymi ilościami rozchodu
                  _tabZPAR.prefix(_tab.ZPAR_REF,_tab.KTM_REF,'T');
                  {? ~_tabZPAR.first()
                  || _tabZPAR.prefix();
                     _sum_il_part:=0;
::                   Wyliczam łączną ilość na partiach
                     _tabZPAR.cntx_psh();
                     ZPARN.cntx_psh();
                     ZPARN.index('ZL2');
                     ZPARN.prefix(exec('FindAndGet','#table',ZL,_tab.ZL_REF,,,null));
                     {? ZPARN.first()
                     || {!
                        |?
::                         Pomijam partie, dla których utworzono już powiązanie z nadmiarowymi ilościami rozchodu
                           _tabZPAR.prefix($ZPARN.ref(),_tab.KTM_REF,'T');
                           {? ~_tabZPAR.first()
                           ||
                              _sum_il_part+=ZPARN.IL
                           ||
::                            Ilość nadwyżki RW pomniejszam o ilości już powiązane
                              {? _cr_env.MODE='RP'
                              || _tab_dk_il.ILR-=_tabZPAR.ILOSC
                              ?}
                           ?};
                           ZPARN.next()
                        !}
                     ?};
                     ZPARN.cntx_pop();
                     _tabZPAR.cntx_pop();
                     {? _sum_il_part>0
                     ||
::                      Wyliczam ilość na jaką powiązać surowiec z partią (na podstawie procentowej objętości partii)
                        _wsp:=exec('FindAndGet','#table',ZPARN,_tab.ZPAR_REF,,"ZPARN.IL",1)/_sum_il_part;
                        _il_part_raw:=_tab_dk_il.ILR*_wsp;
::                     _dokl:=exec('jaka_dok_m','jm',exec('FindAndGet','#table',M,_tab.KTM_REF,,"M.ref()",null()));
::                     _il_part:={? _dokl>0
::                               || (_il_part_raw)$_dokl
::                               || ceil(_il_part_raw)
::                               ?};
                        _il_partp:=_il_part_raw;
::                      Dla kazdego surowca partii prefiksuje tabele z dostawami tego surowca do zlecenia z najbliższą partią
                        _tabDK.prefix(_tab.ZL_REF,_tab.KTM_REF);
                        _first:={? _mode='FIFO'
                                || _tabDK.first()
                                |? _mode='LIFO'
                                || _tabDK.last()
                                || 0
                                ?};
                        {? _first>0 & _il_partp>0
                        || _can_continue:=1;
                           {!
                           |?
::                            Jesli surowiec ma byc przypisany recznie, to omijam go
                              {? _tab.MANUAL<>'T'
                              ||
::                               Ilosc pozostala do rozliczenia na RW
                                 _il_rw:=_tabDK.ILOSC-_tabDK.IL_PART;
                                 _ilosc:=0;
                                 {? _il_rw>0
                                 ||
::                                  Normalizuje zeby nie przekroczyc tego co juz zostalo rozliczone
                                    _ilosc:=exec('min','#math',_il_rw,_il_partp)
                                 ?};
                                 {? _ilosc>0
                                 ||
::                                  Pytam czy rozliczać nadmiarowe ilości
                                    {? _ask=-1
                                    || _ask:=FUN.ask('Po automatycznym rozliczeniu surowców na partii produktu pozostały dokumenty rozchodowe nierozliczone w całości.\n'
                                                     'Czy automatycznie rodzielić pozostałe (nadmiarowe) ilości rozchodów na wszystkie partie?'@)
                                    ?};
::                                  Stoje na partii i rozchodzie wiec moge zrobic powiazanie
                                    {? _ask>0
                                    || _can_continue:=exec('create_zpar','magdok_partie',_cr_env,_ilosc,#_tabDK.ref(),1);
                                       {? _can_continue>0
                                       || _il_partp-=_ilosc;
                                          _tab_dk_il.ILR-=_ilosc
                                       ?}
                                    ?}
                                 ?}
                              ?};

                              _next:={? _mode='FIFO'
                                     || _tabDK.next()
                                     |? _mode='LIFO'
                                     || _tabDK.prev()
                                     || 0
                                     ?};
                              _next>0 & _can_continue>0
                           !}
                        ?}
                     ?}
                  ?}
               ?};
               _tab.next()
            !}
         ?};
         _tab_dk_il.next()
      !};
      _tab.cntx_pop();
      _tabDK.cntx_pop();
      _tabZPAR.cntx_pop()
   ?}

?};

:: Odswiezam okno
_tab.first();
_tabDK.first();

{? _cr_env.TIE_MODE='RW' & var_pres('TAB_ZPAR',_cr_env)>100
|| _cr_env.TAB_ZPAR.first()
|? _cr_env.TIE_MODE='ZW' & var_pres('TAB_ZPAZ',_cr_env)>100
|| _cr_env.TAB_ZPAZ.first()
?};

{? _grp_disp>0
||
:: Ustawiam zmienna dzieki ktorej w formule przed obsluga w oknie z partiami rozwinie sie cale drzewo
   _cr_env.ROZWALL:='T';
   {? _cr_env.WIN_PART<>''
   || grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART)
   ?};
   {? _cr_env.WIN_PART2<>''
   || grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART2)
   ?};
   {? var_pres('TAB_RW',_cr_env)>100
   || grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW)
   ?};
   {? var_pres('TAB_ZW',_cr_env)>100
   || grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW)
   ?};
   {? var_pres('TAB_ZPAR',_cr_env)>100
   || grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR)
   ?};
   {? var_pres('TAB_ZPAZ',_cr_env)>100
   || grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ)
   ?};
   _cr_env.ROZWALL:='N'
?};
_result


\sur_il4part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Zwraca ilosc surowca do rozliczenia z dokumentu dla partii (na podstawie limitow surowcow dla partii)
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - Sql ref dokumentu w tabeli .TAB_RW
::       _c - STRING - Sql ref partii w tabeli .TAB_PART
::       _d - INTEGER - 0/1 - czy zwracać ilość ponad limity (do podpowiadania przy ręcznym wiazaniu)
::   WY: REAL - ilosc surowca z RW ktora mozna powiazac z partia
::  OLD: \sur_il4part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_ref_rw:=_b;
_ref_part:=_c;
_over_lim:=0;
{? var_pres('_d')=type_of(0)
|| _over_lim:=_d
?};

_result:=0;

{? _cr_env.TIE_MODE='RW'
|| _tab_dk:=_cr_env.TAB_RW
|? _cr_env.TIE_MODE='ZW'
|| _tab_dk:=_cr_env.TAB_ZW
?};
_tab_part:=_cr_env.TAB_PART;

_tab_dk.cntx_psh();
{? _cr_env.TIE_MODE='RW'
|| _tab_dk.index(_cr_env.IN_RW1)
|? _cr_env.TIE_MODE='ZW'
|| _tab_dk.index(_cr_env.IN_ZW1)
?};
_tab_part.cntx_psh(); _tab_part.clear();
_tab_part.index(_cr_env.IN_PART4);

_tab_dk.prefix(_ref_rw);
{? _tab_dk.first()
||
:: Ilosc pozostala do rozliczenia na RW
   _il_rw:=_tab_dk.ILOSC-_tab_dk.IL_PART;
   {? _il_rw>0
   ||
::    Znajduje ilosc ktora juz zostala powiazana dla RW
      _il_zpars:=exec('dk_il_zpars','magdok_wspolne',_tab_dk.SQL_REF);
      _il_left:=_tab_dk.ILOSC-_il_zpars;

      _il_left:=exec('max','#math',0,_il_left);
::    Normalizuje zeby nie przekroczyc tego co juz zostalo wykonane
      _il_rw:=exec('min','#math',_il_rw,_il_left);


::    Znajduje odpowiedni rekord w drzewie z partiami - zapotrzebowanie surowcowe dla partii
      _tab_part.prefix(_ref_part,_tab_dk.KTM_REF);

      {? _tab_part.first()
      ||
::       Ilosc surowca pozostala do rozliczenia
         _ildok:=0;
         {? _cr_env.TIE_MODE='RW'
         || _ildok:=_tab_part.IL_RW_R
         |? _cr_env.TIE_MODE='ZW'
         || _ildok:=_tab_part.IL_ZW
         ?};

         _il_part:=_tab_part.ILOSC-_ildok;

         {? _il_part>0
         ||
            {? _il_part>_il_rw
            ||
::             Jesli ilosc potrzebna na partii wieksza niz pozostala na RW
::             to proponuje rozliczyc tylko tyle ile zostalo na dokumencie RW
               _result:=exec('min','#math',_il_rw,_il_part)
            ||
               _result:=_il_part
            ?}
         ||
            {? _over_lim>0 & _il_rw>0
            || _result:=_il_rw
            ?}
         ?}
      ?}
   ?}
?};

_tab_part.cntx_pop();
_tab_dk.cntx_pop();
_result


\create_zpar
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy rekord w tabeli tymczasowej .TAB_ZPAR
::       Kontekst pracy - rekord tabeli .TAB_PART,.TAB_RW
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - REAL - ilosc na powiazaniu tzn jaka ilosc surowca z rozchodu zostanie powiazana z partia
::       _c - INTEGER - #.TAB_RW.ref() - ref rekordu w tabeli .TAB_RW
::       _d - INTEGER - czy powiązanie utworzone automatycznie dla nadmiarowych ilości rozchodu: 1 - Tak, [0] - Nie
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \create_zpar/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_ilosc:=_b;
_ref:=_c;
_over:={? var_press('_d')=type_of(0) || _d || 0 ?};

_typ:='';
{? _cr_env.TIE_MODE='RW'
|| _tab:=_cr_env.TAB_RW;
   _typ:=exec('type_rw','magdok_partie')
|? _cr_env.TIE_MODE='ZW'
|| _tab:=_cr_env.TAB_ZW;
   _typ:=exec('type_zw','magdok_partie')
?};

_result:=0;
_can_continue:=0;

_buffer:=exec('buffer_zpars_cr','magdok_partie');

_tab.cntx_psh(); _tab.clear();
{? _tab.seek(_ref,)
||
   _buffer.PART_SYM:=_cr_env.TAB_PART.PART_SYM;
   _buffer.PART_REF:=_cr_env.TAB_PART.ZPAR_REF;
   _buffer.DK_SYM:=_tab.SYMBOL;
   _buffer.DK_REF:=_tab.SQL_REF;
   _buffer.POZ:=exec('FindAndGet','#table',DK,_buffer.DK_REF,,"P",0);
   _buffer.SRC_SYM:=_tab.SRC_SYM;
   _buffer.SRC_REF:=_tab.SRC_REF;
   _buffer.KTM:=_tab.KTM;
   _buffer.KTM_NAZ:=_tab.KTM_NAZ;
   _buffer.KTM_REF:=_tab.KTM_REF;
   _buffer.ILOSC:=_ilosc;
   _buffer.JM:=_tab.JM;
   _buffer.ZL_TOP:=_tab.ZL_TOP;
   _buffer.ZL_REF:=_cr_env.TAB_PART.ZL_REF;
   _buffer.ACCEPTED:='N';
   _buffer.TYP:=_typ;
   _buffer.OVER:={? _over>0 || 'T' || 'N' ?};

   {? _ilosc>0
   || {? _buffer.TYP=exec('type_rw','magdok_partie')
      || _can_continue:=exec('tab_zpar_add','magdok_partie',_cr_env,_buffer)
      |? _buffer.TYP=exec('type_zw','magdok_partie')
      || _can_continue:=exec('tab_zpaz_add','magdok_partie',_cr_env,_buffer)
      ?}
   ?}
|| FUN.emsg('Nie można utworzyć powiązania — brak zaznaczonego rozchodu.'@)
?};
_tab.cntx_pop();


{? _can_continue>0
|| _result:=1
?};
_result


\buffer_zpars_cr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Bufor tabeli tymczasowej .TAB_ZPAR i .TAB_ZPAZ
::   WY: _args
::  OLD: \buffer_zpars_cr/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_buffer:=obj_new('ZPAR_REF'
               ,'PART_SYM'
               ,'PART_REF'
               ,'DK_SYM'
               ,'DK_REF'
               ,'SRC_SYM'
               ,'SRC_REF'
               ,'KTM'
               ,'KTM_NAZ'
               ,'KTM_REF'
               ,'ILOSC'
               ,'JM'
               ,'ZL_TOP'
               ,'ZL_REF'
               ,'ACCEPTED'
               ,'TYP'
               ,'OVER'
               ,'POZ'
::             Metody
               ,'blank'
               ,'set'
               ,'get'
              );
_buffer.blank:="
       .ZPAR_REF:='';
       .PART_SYM:='';
       .PART_REF:='';
       .DK_SYM:='';
       .DK_REF:='';
       .SRC_SYM:='';
       .SRC_REF:='';
       .KTM:='';
       .KTM_NAZ:='';
       .KTM_REF:='';
       .ILOSC:=0;
       .JM:='';
       .ZL_TOP:='';
       .ZL_REF:='';
       .ACCEPTED:='N';
       .TYP:=exec('type_rw','magdok_partie');
       .OVER:='N';
       .POZ:=0;
       ~~
      ";
:: metoda pobierajaca dane z tabeli do bufora
_buffer.get:="
               _tab:=_a;
               .ZPAR_REF:=_tab.ZPAR_REF;
               .PART_SYM:=_tab.PART_SYM;
               .PART_REF:=_tab.PART_REF;
               .DK_SYM:=_tab.DK_SYM;
               .DK_REF:=_tab.DK_REF;
               .SRC_SYM:=_tab.SRC_SYM;
               .SRC_REF:=_tab.SRC_REF;
               .KTM:=_tab.KTM;
               .KTM_NAZ:=_tab.KTM_NAZ;
               .KTM_REF:=_tab.KTM_REF;
               .ILOSC:=_tab.ILOSC;
               .JM:=_tab.JM;
               .ZL_TOP:=_tab.ZL_TOP;
               .ZL_REF:=_tab.ZL_REF;
               .ACCEPTED:=_tab.ACCEPTED;
               .TYP:=_tab.TYP;
               .OVER:=_tab.OVER;
               .POZ:=_tab.POZ;
               ~~
             ";

:: metoda zapisujaca dane z bufora do tabeli
_buffer.set:="
               _tab:=_a;
               _tab.ZPAR_REF:=.ZPAR_REF;
               _tab.PART_SYM:=.PART_SYM;
               _tab.PART_REF:=.PART_REF;
               _tab.DK_SYM:=.DK_SYM;
               _tab.DK_REF:=.DK_REF;
               _tab.SRC_SYM:=.SRC_SYM;
               _tab.SRC_REF:=.SRC_REF;
               _tab.KTM:=.KTM;
               _tab.KTM_NAZ:=.KTM_NAZ;
               _tab.KTM_REF:=.KTM_REF;
               _tab.ILOSC:=.ILOSC;
               _tab.JM:=.JM;
               _tab.ZL_TOP:=.ZL_TOP;
               _tab.ZL_REF:=.ZL_REF;
               _tab.ACCEPTED:=.ACCEPTED;
               _tab.TYP:=.TYP;
               _tab.OVER:=.OVER;
               _tab.POZ:=.POZ;
               ~~
             ";
_buffer.blank();
_buffer


\cr_env
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tablice nazwana - srodowisko dla kreatora exec('creator','magdok_partie')
::       zawierajaca tablice tymczasowe, uchwyty do okien itp
::   WY: obj_new
::  OLD: \cr_env/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
::UWAGA: _fld, i _mth to formulki pomocnicze, zeby wygodniej tworzyc tablice i komentowac poszczegolne jej elementy
::       powiedzmy, ze to bedzie pole
         _fld:="31+form(_a)";
::       powiedzmy, ze to bedzie metoda
         _mth:="31+form(_a)";

_cr_env:=obj_new( _fld('MODE','Tryb wyswietlania okna: RP/ZW/ZL')
                  ,_fld('TIE_MODE','Tryb tworzenia powiazan: RW/ZW')
                  ,_fld('SEL_PART','Zmienna pomocnicza - zaznaczona w oknie partia (SQL ref)')
                  ,_fld('CHK_MODE','Tryb kontroli podczas akceptacji: 0 - nic, 1 - tylko partie, 2 - partie i rozchody, 3 - tylko rozchody')
                  ,_fld('ACCEPTED','Zmienna pomocnicza, czy kreator zostal pomyslnie zaakceptowany')
                  ,_fld('FORCE','Zmienna pomocnicza, czy od poczatku guzik Akceptuj [!] ma byc aktywny')
                  ,_fld('ROZWALL','Zmienna pomocnicza, czy podczas odswiezania okna partii rozwijac drzewo')
                  ,_fld('DELETE','Zmienna pomocnicza, czy w oknach tabel TAB_ZPAR,TAB_ZPAZ ma byc dostepna akcja Usun')
                  ,_fld('SEL_RW','Tabelka pomocnicza - zaznaczone rekordy w .TAB_RW')
                  ,_fld('SEL_ZW','Tabelka pomocnicza - zaznaczone rekordy w .TAB_ZW')
                  ,_fld('SEL_IL1','Zmienna pomocnicza - ilosc zaznaczonych rekordow w .TAB_PART')
                  ,_fld('SEL_IL2','Zmienna pomocnicza - ilosc zaznaczonych rekordow w .TAB_RW')
                  ,_fld('SEL_IL3','Zmienna pomocnicza - ilosc zaznaczonych rekordow w .TAB_ZW')
                  ,_fld('RW_PRFX','Sposób prefiksowania tabeli z powiązaniami RW (TAB_ZPAR): [0] - wg partii, 1 - wg zlecenia, 2 - wszystkie')
                  ,_fld('ZW_PRFX','Sposób prefiksowania tabeli z powiązaniami ZW (TAB_ZPAZ): [0] - wg partii, 1 - wg zlecenia, 2 - wszystkie')
                  ,_fld('CURRENT_TAB','Aktualna zakładka')

::                identyfikatory okienek
                  ,_fld('wid_m_rp' ,'ID okienka glownego - tryb RP')
                  ,_fld('wid_m_zl' ,'ID okienka glownego - tryb ZL')
                  ,_fld('wid_m_zw' ,'ID okienka glownego - tryb ZW')
                  ,_fld('wid_m_co' ,'ID okienka glownego - tryb skladowych partii')
                  ,_fld('wid_part' ,'ID okienka tabeli TAB_PART')
                  ,_fld('wid_rw' ,'ID okienka tabeli TAB_RW')
                  ,_fld('wid_zw' ,'ID okienka tabeli TAB_ZW')
                  ,_fld('wid_ctr' ,'ID okienka kontrolki')
                  ,_fld('wid_zpar' ,'ID okienka tabeli TAB_ZPAR')
                  ,_fld('wid_zpaz' ,'ID okienka tabeli TAB_ZPAZ')
                  ,_fld('wid_comp' ,'ID okienka tabeli TAB_COMP')
                  ,_fld('wid_zrap' ,'ID okienka tabeli TAB_ZRAP')
                  ,_fld('wid_zlgd' ,'ID okienka tabeli TAB_ZLGD')

::                tytuly okienek
                  ,_fld('tit_m_rp' ,'Tytul okienka glownego - tryb RP')
                  ,_fld('tit_m_zl' ,'Tytul okienka glownego - tryb ZL')
                  ,_fld('tit_m_zw' ,'Tytul okienka glownego - tryb ZW')
                  ,_fld('tit_m_co' ,'Tytul okienka glownego - tryb skladowych partii')
                  ,_fld('tit_rw'   ,'Tytul okienka dokumentow RW')
                  ,_fld('tit_zw'   ,'Tytul okienka dokumentow ZW')
                  ,_fld('tit_zpar' ,'Tytul okienka powiazan partii z RW')
                  ,_fld('tit_zpaz' ,'Tytul okienka powiazan partii z ZW')
                  ,_fld('tit_zrap' ,'Tytul okienka powiazan partii z RP')
                  ,_fld('tit_zlgd' ,'Tytul okienka powiazan partii z ZLGD')

                  ,_fld('ctr_id' ,'Nazwa kontrolki w oknie')
                  ,_fld('ctr_id2' ,'Nazwa kontrolki z przyciskami w oknie')

::                tabele tymczasowe
                  ,_fld('TAB_PART' ,'Tabela tymczasowa wyswietlajaca partie wystepujace na dokumencie')
                  ,_fld('TAB_RW'   ,'Tabela tymczasowa wyswietlajaca pobrania surowcow.')
                  ,_fld('TAB_ZW'   ,'Tabela tymczasowa wyswietlajaca zwroty surowcow.')
                  ,_fld('TAB_ZPAR' ,'Tabela tymczasowa wyswietlajaca powiazania partii z RW')
                  ,_fld('TAB_ZPAZ' ,'Tabela tymczasowa wyswietlajaca powiazania partii z ZW')
                  ,_fld('TAB_SUR'  ,'Tabela tymczasowa zawierajaca surowce z limitow zlecenia')
                  ,_fld('TAB_LIM'  ,'Tabela tymczasowa zawierajaca limity zlecenia')
                  ,_fld('TAB_COMP' ,'Tabela tymczasowa zawierajaca z czego sklada sie partia')
                  ,_fld('TAB_ZRAP' ,'Tabela tymczasowa zawierajaca powiązania partii z RP')
                  ,_fld('TAB_ZLGD' ,'Tabela tymczasowa zawierajaca rejestracje robocizny do partii')

::                uchwyty do okien
                  ,_fld('WIN_MAIN' ,'Glowne okno grupowe')
                  ,_fld('WIN_PART' ,'Okienko partii')
                  ,_fld('WIN_PART2' ,'Okienko partii')
                  ,_fld('WIN_RW'   ,'Okienko rozchodow surowcow')
                  ,_fld('WIN_ZW'   ,'Okienko zwrotu surowcow')
                  ,_fld('WIN_COMP' ,'Okienko skladnikow partii')
                  ,_fld('WIN_ZPAR' ,'Okienko polaczen rozchodow z partiami')
                  ,_fld('WIN_ZPAZ' ,'Okienko polaczen zwrotow z partiami')
                  ,_fld('WIN_ZRAP' ,'Okienko powiazan partii z dokumentami RP')
                  ,_fld('WIN_ZLGD' ,'Okienko powiazan partii z robocizna')
                  ,_fld('WIN_CTR'  ,'Okienko kontrolki do dzielenia')
                  ,_fld('WIN_CTR2' ,'Okienko kontrolki z przyciskami Akceptuj/Anuluj')

::                indeksy tymczasowych tabel
                  ,_fld('IN_PART1' ,'Indeks tabeli partie: PARENT,SYMBOL')
                  ,_fld('IN_PART2' ,'Indeks tabeli partie: ZPAR_REF')
                  ,_fld('IN_PART3' ,'Indeks tabeli partie: TYP,PART_SYM,SYMBOL')
                  ,_fld('IN_PART4' ,'Indeks tabeli partie: ZPAR_REF,KTM_REF')
                  ,_fld('IN_PART5' ,'Indeks tabeli partie: TYP,ZPAR_REF,KTM_REF')
                  ,_fld('IN_PART6' ,'Indeks tabeli partie: KTM_REF,ZL_REF')

                  ,_fld('IN_RW1' ,'Indeks tabeli RW: SQL_DOK')
                  ,_fld('IN_RW2' ,'Indeks tabeli RW: ZL_REF,SYMBOL,POZ')
                  ,_fld('IN_RW3' ,'Indeks tabeli RW: ZL_REF,KTM_REF,SYMBOL,POZ')
                  ,_fld('IN_RW4' ,'Indeks tabeli RW: ZL_TOP,SYMBOL,POZ')
                  ,_fld('IN_RW5' ,'Indeks tabeli RW: ZL_PART,SYMBOL,POZ')
                  ,_fld('IN_RW6' ,'Indeks tabeli RW: ZL_PART,KTM_REF,SYMBOL,POZ')

                  ,_fld('IN_ZW1' ,'Indeks tabeli ZW: SQL_DOK')
                  ,_fld('IN_ZW2' ,'Indeks tabeli ZW: ZL_REF,SYMBOL,POZ')
                  ,_fld('IN_ZW3' ,'Indeks tabeli ZW: ZL_REF,KTM_REF,SYMBOL,POZ')
                  ,_fld('IN_ZW4' ,'Indeks tabeli ZW: ZL_TOP,SYMBOL,POZ')
                  ,_fld('IN_ZW5' ,'Indeks tabeli ZW: ZL_PART,SYMBOL,POZ')
                  ,_fld('IN_ZW6' ,'Indeks tabeli ZW: ZL_PART,KTM_REF,SYMBOL,POZ')

                  ,_fld('IN_ZPAR1' ,'Indeks tabeli ZPARS: ZPAR_REF')
                  ,_fld('IN_ZPAR2' ,'Indeks tabeli ZPARS: ACCEPTED, PART_SYM, DK_SYM, DK_POZ')
                  ,_fld('IN_ZPAR3' ,'Indeks tabeli ZPARS: DK_REF,DK_SYM')
                  ,_fld('IN_ZPAR4' ,'Indeks tabeli ZPARS: PART_REF,KTM_REF','OVER')
                  ,_fld('IN_ZPAR5' ,'Indeks tabeli ZPARS: ZL_REF,PART_REF,KTM_REF')

                  ,_fld('IN_ZPAZ1' ,'Indeks tabeli ZPARS: ZPAR_REF')
                  ,_fld('IN_ZPAZ2' ,'Indeks tabeli ZPARS: ACCEPTED, PART_SYM, DK_SYM, DK_POZ')
                  ,_fld('IN_ZPAZ3' ,'Indeks tabeli ZPARS: DK_REF,DK_SYM')
                  ,_fld('IN_ZPAZ4' ,'Indeks tabeli ZPARS: PART_REF')
                  ,_fld('IN_ZPAZ5' ,'Indeks tabeli ZPARS: ZL_REF,PART_REF,KTM_REF')

                  ,_fld('IN_COMP1' ,'Indeks tabeli COMP: SYMBOL,NAZWA')
                  ,_fld('IN_COMP2' ,'Indeks tabeli COMP: KTM_REF')

                  ,_fld('IN_ZRAP1' ,'Indeks tabeli ZRAP: SQL_DOK')
                  ,_fld('IN_ZRAP2' ,'Indeks tabeli ZRAP: ZL_REF,SYMBOL,POZ')
                  ,_fld('IN_ZRAP3' ,'Indeks tabeli ZRAP: ZL_REF,KTM_REF,SYMBOL,POZ')
                  ,_fld('IN_ZRAP4' ,'Indeks tabeli ZRAP: ZL_TOP,SYMBOL,POZ')

                  ,_fld('IN_ZLGD1' ,'Indeks tabeli TAB_ZLGD: PARENT')
                  ,_fld('IN_ZLGD2' ,'Indeks tabeli TAB_ZLGD: TYP,ZL_REF,SYMBOL')
                  ,_fld('IN_ZLGD3' ,'Indeks tabeli TAB_ZLGD: TYP,ZPAR_REF')
                  ,_fld('IN_ZLGD4' ,'Indeks tabeli TAB_ZLGD: ZLGD_REF,PARENT')
                  ,_fld('IN_ZLGD5' ,'Indeks tabeli TAB_ZLGD: ZL_WYRGD,PARENT')

::                Kontrolka do przypisywania
                  ,_fld('ctr_rw' ,'ID elementu na pulpicie - RW')
                  ,_fld('ctr_rwgr' ,'ID elementu na pulpicie - RW grupowe')
                  ,_fld('ctr_part' ,'ID elementu na pulpicie - PARTIA')
                  ,_fld('ctr_ile' ,'ID elementu na pulpicie - pole z iloscia')
                  ,_fld('ctr_tie' ,'ID elementu na pulpicie - przycisk powiaz')
                  ,_fld('ctr_jm' ,'ID elementu na pulpicie - jednostka miary')
                  ,_fld('ctr_fifo' ,'ID elementu na pulpicie - guzik automat FIFO')
                  ,_fld('ctr_lifo' ,'ID elementu na pulpicie - guzik automat LIFO')
                  ,_fld('ctr_morw' ,'ID elementu na pulpicie - tryb wiazanie rozchodow')
                  ,_fld('ctr_mozw' ,'ID elementu na pulpicie - tryb wiazanie zwrotow')
                  ,_fld('ctr_akcf' ,'ID elementu na pulpicie - przycisk Akceptuj [!]')
                  ,_fld('ctr_akc' ,'ID elementu na pulpicie - przycisk Akceptuj')
                  ,_fld('ctr_anul' ,'ID elementu na pulpicie - przycisk Anuluj')

::                METODY
                  ,_mth('select','Wyswietla kreatora')
                  ,_mth('load'  ,'Ładuje zawartosc kreatora, tworzy struktury')
                  ,_mth('sel_par','Wyswietla tabele ZPARS dla partii')
                  ,_mth('load_par'  ,'Ładuje tabele ZPARS dla partii')
                  ,_mth('rwinject'  ,'Ładuje dodatkowe dokumenty rw')
                  );

_cr_env.ACCEPTED:='N';
_cr_env.ROZWALL:='N';
_cr_env.CHK_MODE:=1;
_cr_env.FORCE:=0;
_cr_env.TIE_MODE:='RW';
_cr_env.DELETE:=1;
_cr_env.RW_PRFX:=0;
_cr_env.ZW_PRFX:=0;
_cr_env.CURRENT_TAB:='';
::_cr_env.ctr_rw:='b07c1302ai0k16n2c0888hif8fln';
::_cr_env.ctr_rwgr:='2ll734a2ndbcnei0ma87m6jm74jgk';
::_cr_env.ctr_part:='1g42ln1hj5jbh27b8nf1mck66lf';
::_cr_env.ctr_ile:='258g01mh012n1bnh6f5n1j5b582a';
::_cr_env.ctr_tie:='1g1hb7bh55649icmgl62h2e022g3a';
::_cr_env.ctr_jm:='231dhg3gfl98a0h8k3666hi25l46k';
::_cr_env.ctr_fifo:='24dj5mg2k984k329h7mb90190l28h';
::_cr_env.ctr_lifo:='1j40klg75jge6l05dc44d8e5hil4f';
::_cr_env.ctr_morw:='m93e30ln7c8510h4f7k3344259a0';
::_cr_env.ctr_mozw:='22jn89lc93dnk2bmm58ea65bc6cgh';


_cr_env.ctr_rw:='fld_dk@selection';
_cr_env.ctr_rwgr:='2ll734a2ndbcnei0ma87m6jm74jgk';
_cr_env.ctr_part:='fld_partia@selection';
_cr_env.ctr_ile:='fld_il@selection';
_cr_env.ctr_tie:='btn_powiaz@akcje';
_cr_env.ctr_jm:='lbl_jm@selection';
_cr_env.ctr_fifo:='btn_fifo@akcje';
_cr_env.ctr_lifo:='btn_lifo@akcje';
_cr_env.ctr_morw:='radio_rw@tryb';
_cr_env.ctr_mozw:='radio_zw@tryb';


_cr_env.ctr_akcf:='2fgkbl1i4lf1hf23k62g9bblgcc0a';
_cr_env.ctr_akc:='1mdka1d5ilagcg4l1d01ndhebl35';
_cr_env.ctr_anul:='1hgief62h4j4mm7b892f33f0a8ab5';

_cr_env.wid_m_rp:='#zpars_cr_m_rp';
_cr_env.wid_m_zl:='#zpars_cr_m_zl';
_cr_env.wid_m_zw:='#zpars_cr_m_zw';
_cr_env.wid_m_co:='#zpars_cr_m_co';

_cr_env.wid_part:='#zpars_cr_part';
_cr_env.wid_rw:='#zpars_cr_rw';
_cr_env.wid_zw:='#zpars_cr_zw';
_cr_env.wid_ctr:='#zpars_cr_ctr';
_cr_env.wid_zpar:='#zpars_cr_zpar';
_cr_env.wid_zpaz:='#zpars_cr_zpaz';
_cr_env.wid_comp:='#zpars_cr_comp';
_cr_env.wid_zrap:='#zpars_cr_zrap';
_cr_env.wid_zlgd:='#zpars_cr_zlgd';

_cr_env.tit_m_rp:='Powiąznia rozchodów surowców z partiami wyrobu'@;
_cr_env.tit_m_zl:='Powiąznia rozchodów i zwrotów surowców z partiami wyrobu'@;
_cr_env.tit_m_zw:='Powiąznia zwrotów surowców z partiami wyrobu'@;
_cr_env.tit_m_co:='Składowe partii'@;
_cr_env.tit_rw:='Rozchody dla zlecenia'@;
_cr_env.tit_zw:='Zwroty dla zlecenia'@;
_cr_env.tit_zpar:='Powiązania rozchodów z partiami'@;
_cr_env.tit_zpaz:='Powiązania zwrotów z partiami'@;
_cr_env.tit_zrap:='Powiązania dokumentów raportujących z partiami'@;
_cr_env.tit_zlgd:='Powiązania robocizny z partiami'@;

_cr_env.ctr_id:='zpars_creator2';
_cr_env.ctr_id2:='zpars_cr_btn';

_cr_env.WIN_MAIN:='';
_cr_env.WIN_PART:='';
_cr_env.WIN_PART2:='';
_cr_env.WIN_RW:='';
_cr_env.WIN_ZW:='';
_cr_env.WIN_ZPAR:='';
_cr_env.WIN_ZPAZ:='';
_cr_env.WIN_CTR:='';
_cr_env.WIN_CTR2:='';
_cr_env.WIN_COMP:='';
_cr_env.WIN_ZRAP:='';
_cr_env.WIN_ZLGD:='';

.TAB_PART:=~~;
.TAB_RW:=~~;
.TAB_ZW:=~~;
.TAB_ZPAR:=~~;
.TAB_ZPAZ:=~~;
.TAB_SUR:=~~;
.TAB_LIM:=~~;
.TAB_COMP:=~~;
.TAB_ZRAP:=~~;
.TAB_ZLGD:=~~;

_cr_env.load:="

   _rp:=null();
   _zl:=null();
   _zw:=null();

   {? var_pres('_a')=type_of(ND.ref())
   || _rp:=_a
   ?};
   {? var_pres('_b')=type_of(ZL.ref())
   || _zl:=_b
   ?};
   {? var_pres('_c')=type_of(ND.ref())
   || _zw:=_c
   ?};

:: Ladujemy dane do widoku
   {? _rp<>null()
   ||
::    Tworzymy tabele tymczasowe
      {? type_of(.TAB_PART)=0
      || .TAB_PART:=exec('cr_tab_part','magdok_partie',.)
      ?};
      {? type_of(.TAB_RW)=0
      || .TAB_RW:=exec('cr_tab_rw','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZPAR)=0
      || .TAB_ZPAR:=exec('cr_tab_zpars_rw','magdok_partie',.)
      ?};
      {? type_of(.TAB_SUR)=0
      || .TAB_SUR:=exec('cr_tab_sur','magdok_partie',.)
      ?};
      {? type_of(.TAB_LIM)=0
      || .TAB_LIM:=exec('cr_tab_lim','magdok_partie',.)
      ?};
      exec('cr_load_rp','magdok_partie',.,_rp)
   |? _zl<>null()
   ||
::    Tworzymy tabele tymczasowe
      {? type_of(.TAB_PART)=0
      || .TAB_PART:=exec('cr_tab_part','magdok_partie',.)
      ?};
      {? type_of(.TAB_RW)=0
      || .TAB_RW:=exec('cr_tab_rw','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZW)=0
      || .TAB_ZW:=exec('cr_tab_zw','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZPAR)=0
      || .TAB_ZPAR:=exec('cr_tab_zpars_rw','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZPAZ)=0
      || .TAB_ZPAZ:=exec('cr_tab_zpars_zw','magdok_partie',.)
      ?};
      {? type_of(.TAB_SUR)=0
      || .TAB_SUR:=exec('cr_tab_sur','magdok_partie',.)
      ?};
      {? type_of(.TAB_LIM)=0
      || .TAB_LIM:=exec('cr_tab_lim','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZLGD)=0
      || .TAB_ZLGD:=exec('cr_tab_zlgd','magdok_partie',.)
      ?};

      exec('cr_load_zl','magdok_partie',.,_zl)
   |? _zw<>null()
   ||
::    Tworzymy tabele tymczasowe
      {? type_of(.TAB_PART)=0
      || .TAB_PART:=exec('cr_tab_part','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZW)=0
      || .TAB_ZW:=exec('cr_tab_zw','magdok_partie',.)
      ?};
      {? type_of(.TAB_ZPAZ)=0
      || .TAB_ZPAZ:=exec('cr_tab_zpars_zw','magdok_partie',.)
      ?};
      {? type_of(.TAB_SUR)=0
      || .TAB_SUR:=exec('cr_tab_sur','magdok_partie',.)
      ?};
      {? type_of(.TAB_LIM)=0
      || .TAB_LIM:=exec('cr_tab_lim','magdok_partie',.)
      ?};
      exec('cr_load_zw','magdok_partie',.,_zw)
   ?};
   ~~
";

_cr_env.select:="

   {? .MODE='RP'
   ||
::    Tworzymy okna do tabel tymczasowych
      .WIN_PART:=exec('cr_win_part','magdok_partie',.);
      .WIN_RW:=exec('cr_win_rw','magdok_partie',.);
      .WIN_ZPAR:=exec('cr_win_zpars_rw','magdok_partie',.);
::    Tworzymy okno glowne
      exec('cr_grp_make_rp','magdok_partie',.)
   |? .MODE='ZL'
   ||
::    Tworzymy okna do tabel tymczasowych
      .WIN_PART:=exec('cr_win_part','magdok_partie',.);
      .WIN_PART2:=exec('cr_win_part','magdok_partie',.);
      .WIN_RW:=exec('cr_win_rw','magdok_partie',.);
      .WIN_ZW:=exec('cr_win_zw','magdok_partie',.);
      .WIN_ZPAR:=exec('cr_win_zpars_rw','magdok_partie',.);
      .WIN_ZPAZ:=exec('cr_win_zpars_zw','magdok_partie',.);
      .WIN_ZLGD:=exec('cr_win_zlgd','magdok_partie',.);
::    Tworzymy okno glowne
      exec('cr_grp_make_zl','magdok_partie',.)
   |? .MODE='ZW'
   ||
::    Tworzymy okna do tabel tymczasowych
      .WIN_PART2:=exec('cr_win_part','magdok_partie',.);
      .WIN_ZW:=exec('cr_win_zw','magdok_partie',.);
      .WIN_ZPAZ:=exec('cr_win_zpars_zw','magdok_partie',.);
::    Tworzymy okno glowne
      exec('cr_grp_make_zw','magdok_partie',.)
   ?};

:: Pokazujemy okno
   .TAB_PART.select();
   ~~
";

_cr_env.load_par:="

   _zparn:=_a;
   {? type_of(.TAB_ZPAR)=0
   || .TAB_ZPAR:=exec('cr_tab_zpars_rw','magdok_partie',.)
   ?};
   {? type_of(.TAB_ZPAZ)=0
   || .TAB_ZPAZ:=exec('cr_tab_zpars_zw','magdok_partie',.)
   ?};
   {? type_of(.TAB_COMP)=0
   || .TAB_COMP:=exec('cr_tab_comp','magdok_partie',.)
   ?};
   {? type_of(.TAB_ZRAP)=0
   || .TAB_ZRAP:=exec('cr_tab_zrap','magdok_partie',.)
   ?};
   {? type_of(.TAB_ZLGD)=0
   || .TAB_ZLGD:=exec('cr_tab_zlgd','magdok_partie',.)
   ?};

:: Ustawiam tytuly okienek
   _partia:=exec('FindAndGet','#table',ZPARN,#_zparn,ref_name(_zparn),\"SYM\",'');

   {? _partia<>''
   || .tit_zpar:='Powiązania rozchodów z partią: %1'@[_partia];
      .tit_zpaz:='Powiązania zwrotów z partią: %1'@[_partia];
      .tit_zrap:='Dokumenty raportujące do partii: %1'@[_partia];
      .tit_zlgd:='Robocizna do partii: %1'@[_partia];
      .tit_m_co:='Składowe partii: %1'@[_partia]
   ?};

:: Wylaczam akcje 'Usun' w tabelach z powiazaniami
   .DELETE:=0;

:: Ladujemy dane do widoku
   exec('cr_load_comp','magdok_partie',.,_zparn);
   ~~
";

_cr_env.sel_par:="

:: Tworzymy okna do tabel tymczasowych
   .WIN_COMP:=exec('cr_win_comp','magdok_partie',.,0);
   .WIN_ZPAR:=exec('cr_win_zpars_rw','magdok_partie',.,0);
   .WIN_ZPAZ:=exec('cr_win_zpars_zw','magdok_partie',.,0);
   .WIN_ZRAP:=exec('cr_win_zrap','magdok_partie',.);
   .WIN_ZLGD:=exec('cr_win_zlgd','magdok_partie',.,1);

:: Tworzymy okno glowne
   exec('cr_grp_make_co','magdok_partie',.);

   .TAB_COMP.select()
";

_cr_env.rwinject:="
   _rw_tab:=_a;

   {? type_of(_rw_tab)>100
   ||
      _tab_zpar:=.TAB_ZPAR;
      _tab_zpar.cntx_psh();
      _tab_zpar.index(.IN_ZPAR3);

      _can_continue:=0;
      ND.cntx_psh();
      DK.cntx_psh();
      DK.index('DOKMAG');
      ND.clear();
      {? _rw_tab.first()
      || {!
         |? {? ND.seek(_rw_tab.SQL_REF,8+_rw_tab.SQL_REF)
            ||
               _msk:=DK.name()-3;
               DK.use(_msk+(ND.name+3));

               DK.prefix(ND.ref());
               {? DK.first()
               || {!
                  |?
                     _can_continue:=exec('dk_is_rw','magdok_wspolne',DK.ref());

                     {? _can_continue>0
                     ||
::                      Stoje na RW, dodaje je do tabelki tymczasowej
                        exec('rw2tab','magdok_partie',.);

::                      Sprawdzam czy dokument ma juz powiazanie w ZPARS
                        _tab_zpar.prefix($DK.ref());
                        {? _tab_zpar.first()
                        || {!
                           |? exec('update_il_dok','magdok_partie',.,'RW',_tab_zpar.DK_REF,_tab_zpar.ILOSC);
                              _tab_zpar.next()
                           !}
                        ?}
                     ?};
                     DK.next()
                  !}
               ?}
            ?};
            _rw_tab.next()
         !}
      ?};
      DK.cntx_pop();
      ND.cntx_pop();
      _tab_zpar.cntx_pop();
      ~~
   ?};

   ~~
";

_cr_env


\cr_tab_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca partie
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 2
               ,'PARENT'   ,'TREE_REF'    ,'Rodzic'
               ,'SYMBOL'   ,'STRING[50]'  ,'Symbol'
               ,'ZPAR_REF' ,'STRING[16]'  ,'Ref. SQL partii'
               ,'OPIS'     ,'STRING[100]' ,'Opis'
               ,'ILOSC'    ,'REAL'        ,'Ilość'
               ,'IL_RW'    ,'REAL'        ,'Ilość surowca powiazana z dok. RW'
               ,'IL_RW_R'  ,'REAL'        ,'Ilość surowca powiazana z dok. RW bez nadwyżek'
               ,'IL_ZW'    ,'REAL'        ,'Ilość surowca powiazana z dok. ZW'
               ,'IL_SUM'   ,'REAL'        ,'Ilość surowca w sumie RW-ZW'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzednego'
               ,'TYP'      ,'STRING[1]'   ,'Typ - P=partia, S=surowiec'
               ,'PART_SYM' ,'STRING[25]'  ,'Symbol partii'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref. SQL matetialu (dla surowcow)'
               ,'PART_OK'  ,'STRING[1]'   ,'Czy partia rozliczona w calosci: T/N/C'
               ,'NADWYK'   ,'STRING[1]'   ,'Czy partia nadwykonana'
               ,'MANUAL'   ,'STRING[1]'   ,'Czy surowiec w partii ma byc recznie przypisany'
               );
_cr_env.IN_PART1:=_tab.ndx_tmp(,,'PARENT',,,'SYMBOL',,);
_cr_env.IN_PART2:=_tab.ndx_tmp(,,'ZPAR_REF',,);
_cr_env.IN_PART3:=_tab.ndx_tmp(,,'TYP',,,'PART_SYM',,,'SYMBOL',,);
_cr_env.IN_PART4:=_tab.ndx_tmp(,,'ZPAR_REF',,,'KTM_REF',,);
_cr_env.IN_PART5:=_tab.ndx_tmp(,,'TYP',,,'ZPAR_REF',,,'KTM_REF',,);
_cr_env.IN_PART6:=_tab.ndx_tmp(,,'KTM_REF',,,'ZL_REF',,);
_tab


\cr_tab_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca rozchody surowcow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'SQL_REF'  ,'STRING[16]'  ,'Ref. SQL'
               ,'SYMBOL'   ,'STRING[30]'  ,'Symbol dokumentu rozchodowego'
               ,'SRC_SYM'  ,'STRING[30]'  ,'Symbol dokumentu zrodlowego'
               ,'SRC_REF'  ,'STRING[16]'  ,'Ref dokumentu zrodlowego'
               ,'POZ'      ,'INTEGER'     ,'Pozycja w dokumencie'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość na pozycji dokumentu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'IL_PART'  ,'REAL'        ,'Ilość powiazana z partiami'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ZL_PART'  ,'STRING[16]'  ,'Ref zlecenia z najbliższą partią'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzednego'
               );
_cr_env.IN_RW1:=_tab.ndx_tmp(,,'SQL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_RW2:=_tab.ndx_tmp(,,'ZL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_RW3:=_tab.ndx_tmp(,,'ZL_TOP',,,'KTM_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_RW4:=_tab.ndx_tmp(,,'ZL_TOP',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_RW5:=_tab.ndx_tmp(,,'ZL_PART',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_RW6:=_tab.ndx_tmp(,,'ZL_PART',,,'KTM_REF',,,'SYMBOL',,,'POZ',,);
_tab


\cr_tab_zpars_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca powiazania rozchodow z partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_zpars_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'ZPAR_REF' ,'STRING[16]'  ,'Ref. SQL w tabeli ZPARS'
               ,'PART_SYM' ,'STRING[25]'  ,'Symbol partii'
               ,'PART_REF' ,'STRING[16]'  ,'Ref partii'
               ,'DK_SYM'   ,'STRING[30]'  ,'Symbol dokumentu rozchodowego'
               ,'DK_REF'   ,'STRING[16]'  ,'Ref dokumentu rozchodowego'
               ,'POZ'      ,'INTEGER'     ,'Pozycja w dokumencie'
               ,'SRC_SYM'  ,'STRING[30]'  ,'Symbol dokumentu zrodlowego'
               ,'SRC_REF'  ,'STRING[16]'  ,'Ref dokumentu zrodlowego'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość na pozycji dokumentu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzędnego'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ACCEPTED' ,'STRING[1]'   ,'Czy powiazanie zaakceptowane'
               ,'TYP'      ,'STRING[1]'   ,'Typ powiazania: rozchody czy zwroty'
               ,'OVER'     ,'STRING[1]'   ,'Czy powiązanie utworzone z nadmiarowych ilości rozchodu'
               );
_cr_env.IN_ZPAR1:=_tab.ndx_tmp(,,'ZPAR_REF',,);
_cr_env.IN_ZPAR2:=_tab.ndx_tmp(,,'ACCEPTED',,,'PART_SYM',,,'DK_SYM',,);
_cr_env.IN_ZPAR3:=_tab.ndx_tmp(,,'DK_REF',,,'DK_SYM',,);
_cr_env.IN_ZPAR4:=_tab.ndx_tmp(,,'PART_REF',,,'KTM_REF',,,'OVER',,);
_cr_env.IN_ZPAR5:=_tab.ndx_tmp(,,'ZL_REF',,,'PART_REF',,,'KTM_REF',,);
_tab


\cr_tab_sur
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa zawierajaca surowce do zlecen. Tabela nie jest wyswietlana - sluzy do zbudowania
::       drzewa partie->surowce do partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_sur/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp( 2
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa mateirału'
               ,'ILOSC'    ,'REAL'        ,'Ilość surowca'
               ,'IL_ZL'    ,'REAL'        ,'Ilość na zleceniu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'MANUAL'   ,'STRING[1]'   ,'Czy surowiec w partii ma byc recznie przypisany'
               );
_tab


\cr_tab_lim
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa zawierajaca limity do zlecen. Tabela nie jest wyswietlana - sluzy do okreslenia
::       ktore limity zostaly juz uwzglednione a ktore jeszcze nie
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_lim/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp( 1
               ,'LIM_REF'   ,'STRING[16]' ,'Ref limitu'
               );
_tab


\cr_tab_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca zwroty surowcow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'SQL_REF'  ,'STRING[16]'  ,'Ref. SQL'
               ,'SYMBOL'   ,'STRING[30]'  ,'Symbol dokumentu rozchodowego'
               ,'SRC_SYM'  ,'STRING[30]'  ,'Symbol dokumentu zrodlowego'
               ,'SRC_REF'  ,'STRING[16]'  ,'Ref dokumentu zrodlowego'
               ,'POZ'      ,'INTEGER'     ,'Pozycja w dokumencie'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość na pozycji dokumentu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'IL_PART'  ,'REAL'        ,'Ilość powiazana z partiami'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ZL_PART'  ,'STRING[16]'  ,'Ref zlecenia z najbliższą partią'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzednego'
               );
_cr_env.IN_ZW1:=_tab.ndx_tmp(,,'SQL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZW2:=_tab.ndx_tmp(,,'ZL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZW3:=_tab.ndx_tmp(,,'ZL_TOP',,,'KTM_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZW4:=_tab.ndx_tmp(,,'ZL_TOP',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZW5:=_tab.ndx_tmp(,,'ZL_PART',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZW6:=_tab.ndx_tmp(,,'ZL_PART',,,'KTM_REF',,,'SYMBOL',,,'POZ',,);
_tab


\cr_tab_zlgd
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca powiazania robocizny z partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_zlgd/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'PARENT'   ,'TREE_REF'    ,'Ref. rodzica'
               ,'SYMBOL'   ,'STRING[255]' ,'Symbol'
               ,'NAZWA'    ,'STRING[255]' ,'Nazwa'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref SQL zlecenia'
               ,'ZL_SYM'   ,'STRING[30]'  ,'Symbol zlecenia'
               ,'ZPAR_REF' ,'STRING[16]'  ,'Ref SQL partii'
               ,'ZLGD_REF' ,'STRING[16]'  ,'Ref SQL robocizny'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość'
               ,'IL_WYK'   ,'REAL'        ,'Ilość zarej.'
               ,'IL_BRAK'  ,'REAL'        ,'Ilość braków'
               ,'TI_WYK'   ,'REAL'        ,'Czas zarej.'
               ,'DATA'     ,'DATE'        ,'Data rejestracji'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzędnego'
               ,'TYP'      ,'STRING[1]'   ,'Typ wezla'
               ,'ZPAR_SRC' ,'STRING[40]'  ,'Symbol partii źródłowej'
               ,'ZPAR_NAD' ,'STRING[40]'  ,'Symbol partii nadrzędnej'
               ,'MAIN'     ,'STRING[1]'   ,'Czy główna operacja'
               ,'ZL_WYRGD' ,'STRING[16]'  ,'Ref SQL robocizny w rozbiciu na wyroby'
               );
_cr_env.IN_ZLGD1:=_tab.ndx_tmp(,,'PARENT',,);
_cr_env.IN_ZLGD2:=_tab.ndx_tmp(,,'TYP',,,'ZL_REF',,,'ZPAR_REF',,,'SYMBOL',,);
_cr_env.IN_ZLGD3:=_tab.ndx_tmp(,,'TYP',,,'ZPAR_REF',,);
_cr_env.IN_ZLGD4:=_tab.ndx_tmp(,,'ZLGD_REF',,,'PARENT',,);
_cr_env.IN_ZLGD5:=_tab.ndx_tmp(,,'ZL_WYRGD',,,'PARENT',,);
_tab


\cr_load_zl
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Laduje dane do kreatora - dla zlecenia
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - ZL.ref() - zlecenie z ktorego ladujemy
::  OLD: \cr_load_zl/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_zl:=_b;

_can_continue:=0;

ZPARN.cntx_psh();
DK.cntx_psh();
DK.index('DOKMAG');
ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl)
||
   {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
   ||
      ZL.cntx_psh();
      ZL.index('NRNZL');
      ZL.prefix(ZL.UNRZL);
      {? ZL.first()
      ||
         {!
         |?
            {? ZL.RP='T'
            ||
::             Dodaje partie
               ZPARN.index('ZL');
               ZPARN.prefix(ZL.ref());
               {? ZPARN.first()
               || _can_continue:=1;
                  {!
                  |?
::                   Jeżeli były nadwykonania na partii, to ilosć partii biorę z tych nadwykonań
                     _il:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
                     _il:=exec('max','#math',_il,ZPARN.IL);
                     exec('part2tab','magdok_partie',_cr_env,_il);
                     ZPARN.next()
                  !}
               ?}
            ?};
            ZL.next()
         !}
      ?};
      ZL.cntx_pop()
   |? ZL.RP='T'
   ||
::    Dodaje partie
      ZPARN.index('ZL');
      ZPARN.prefix(ZL.ref());
      {? ZPARN.first()
      || _can_continue:=1;
         {!
         |?
::          Jeżeli były nadwykonania na partii, to ilosć partii biorę z tych nadwykonań
            _il:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
            _il:=exec('max','#math',_il,ZPARN.IL);
            exec('part2tab','magdok_partie',_cr_env,_il);
            ZPARN.next()
         !}
      ?}
   ||
::    Znajduje zlecenie na ktorym beda partie
      _prod_zl:=exec('main_podzlec','zl_link',_zl);
::    Dodaje partie
      ZPARN.index('ZL');
      ZPARN.prefix(_prod_zl);
      {? ZPARN.first()
      || _can_continue:=1;
         {!
         |?
::          Jeżeli były nadwykonania na partii, to ilosć partii biorę z tych nadwykonań
            _il:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
            _il:=exec('max','#math',_il,ZPARN.IL);
            exec('part2tab','magdok_partie',_cr_env,_il);
            ZPARN.next()
         !}
      ?}
   ?}
?};

{? _can_continue>0
||
   {? ZL.seek(_zl)
   ||
::    Ładujemy dokumenty magazynowe RW i ZW
      exec('load_dk4zl','magdok_partie',_cr_env,ZL.ref());

::    Ladujemy limity ze zlecen do tabeli kumulujacej surowce zlecenia
      ZLIM.cntx_psh();

      _top:=exec('top_level','zl_link',ZL.ref());
      _top_rodz:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"RODZAJ",'');
      _top_unrzl:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"UNRZL",'');

      {? _top_rodz='P'
      ||
         ZL.cntx_psh();
         ZL.clear();
         {? ZL.seek(_top)
         ||
            exec('openmask','zl_common',ZL.ref());
            {? ZL.RODZAJ='P'
            || ZLIM.index('ZLMZLD_R')
            || ZLIM.index('ZLDZLRM')
            ?};

            ZLIM.prefix(_top);
            {? ZLIM.first()
            || {!
               |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                  || exec('limit2tab','magdok_partie',_cr_env)
                  ?};
                  ZLIM.next()
               !}
            ?}
         ?};
         ZL.cntx_pop();
         ~~
      ||
         ZL.cntx_psh();
         ZL.index('NRNZL');
         ZL.prefix(_top_unrzl);
         {? ZL.first()
         ||
            {!
            |?
               exec('openmask','zl_common',ZL.ref());
               {? ZL.RODZAJ='P'
               || ZLIM.index('ZLMZLD_R')
               || ZLIM.index('ZLDZLRM')
               ?};

               ZLIM.prefix(ZL.ref());
               {? ZLIM.first()
               || {!
                  |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                     || exec('limit2tab','magdok_partie',_cr_env)
                     ?};
                     ZLIM.next()
                  !}
               ?};
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()
      ?};
      ZLIM.cntx_pop()
   ?};

:: Tworzymy drzewo w tabeli partii - partiom przypisujemy surowce
   exec('sur2part','magdok_partie',_cr_env);

:: Ladujemy istniejace powiazania partii z rozchodami i zwrotami - musi byc wykonane po utworzeniu drzewa
:: w tabeli partii

   _tab:=_cr_env.TAB_PART;
   _tab.prefix();
   {? _tab.first()
   ||
      _args_z1:=exec('load_zpars_a','magdok_partie');
      _args_z1.cr_env:=_cr_env;
      {!
      |?
         ZPARN.prefix();
         {? ZPARN.seek(_tab.ZPAR_REF)
         ||
::          Podczytanie zlecenia
            ZPARN.ZL();

::          Zbieram dla zlecenia ZPARS z masek od powolania zlecenia
            _name:=5+ZPARS.name();
            _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
            _msk_end:=~~;
            {? ZL.STAN='Z'
            || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
               _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
            || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
               _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
            ?};

            _args_z1.ZPARN:=ZPARN.ref();

            _rule:="exec('load_zpars','magdok_partie',_b)";
            exec('for_each_mask','#table',ZPARS,_rule,_msk_start,_msk_end,_args_z1)
         ?};
         _tab.next()
      !}
   ?};

:: Ladujemy robocizne
   ZL.cntx_psh(); ZL.clear();
   {? ZL.seek(_zl)
   ||
      _args_rob:=exec('load_zpars_a','magdok_partie');
      _args_rob.cr_env:=_cr_env;
      _args_rob.ZL:=ZL.ref();

::    Zbieram dla zlecenia ZLGD z masek od powolania zlecenia
      _name:=5+ZLGD.name();
      _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
      _msk_end:=~~;
      {? ZL.STAN='Z'
      || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      ?};

      _rule:="exec('load_zlgd','magdok_partie',_b)";
      exec('for_each_mask','#table',ZLGD,_rule,_msk_start,_msk_end,_args_rob)
   ?};
   ZL.cntx_pop();
   ~~
?};
ZPARN.cntx_pop();
ZL.cntx_pop();
DK.cntx_pop();
~~


\part2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje partie do tabeli tymczasowej
::       Kontekst pracy - rekord tabeli ZPARN
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - REAL - ilosc partii ktora dodaje do kreatora
::       [c] - INTEGER - czy zwiekszac ilosc dla partii ktora juz jest: 0/[1]
::  OLD: \part2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_ilosc:=_b;

_il_add:=1;
{? var_pres('_c')=type_of(0)
|| _il_add:=_c
?};

_tab:=_cr_env.TAB_PART;
ZL.cntx_psh();
_tab.cntx_psh();
_tab.index(_cr_env.IN_PART2);
_tab.prefix($ZPARN.ref());

{? _tab.first()
||
:: Jest juz taka partia to zwiekszam ilosc
   {? _il_add>0
   || _tab.ILOSC+=_ilosc;
      _tab.put()
   ?}
||
:: Jesli nie ma jeszcze takiej partii - dodaje
   _tab.blank();
   _tab.ZPAR_REF:=$ZPARN.ref();
   _tab.SYMBOL:=ZPARN.SYM;
   _tab.OPIS:=ZPARN.OPIS;
   _tab.ILOSC:=_ilosc;
   _tab.ZL:=ZPARN.ZL().SYM;
   _tab.ZL_REF:=$ZPARN.ZL;
   _top:=exec('top_level','zl_link',ZPARN.ZL);
   _tab.ZL_TOP:=$_top;
   _tab.TYP:='P';
   _tab.PART_SYM:=ZPARN.SYM;
   _tab.PART_OK:='N';
   _tab.MANUAL:='N';
   {? _ilosc>ZPARN.IL
   || _tab.NADWYK:='T'
   ?};
   _tab.add()
?};
_tab.cntx_pop();
ZL.cntx_pop();
~~


\load_dk_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tablica parametrów dla load_rw
::   WY: _args
::  OLD: \load_dk_a/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('blank'

               ,'ZL'
               ,'ZPARN'
               ,'MODE'
               ,'cr_env'
              );
:: - - - - ponizej ustawienie wartosci domyslnych
_args.blank:="
       .ZL:=null();
       .ZPARN:=null();
       .MODE:='RW';
       .cr_env:=~~;
      ";
:: - - - - koniec ustalania wartosci domyslnych
_args


\load_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Laduje do widoku kreatora wszystkie dokumenty RW lub ZW powiazane ze zleceniem lub RP powiązane z partią
::   WE: _args
::  OLD: \load_dk/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0
|| _args:=_a
|| _args:=exec('load_dk_a','magdok_partie')
?};

_can_continue:=0;

DK.cntx_psh();
TYPYDOK.cntx_psh(); TYPYDOK.clear();
{? _args.ZL<>~~
|| DK.index('DOKZL');
   DK.prefix(_args.ZL);
   {? DK.first()
   ||
      {!
      |?
::    Dodaje tylko dokumenty zaakceptowane
         _akc:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"Z",'');
         {? _akc='T'
         ||
            {? _args.MODE='RW'
            || _can_continue:=exec('dk_is_rw','magdok_wspolne',DK.ref());
               {? _can_continue>0
               ||
::                Stoje na dokumencie, dodaje go do tabelki tymczasowej
                  exec('rw2tab','magdok_partie',_args.cr_env)
               ?}
            ?};
            {? _args.MODE='ZW'
            || _can_continue:=exec('dk_is_zw','magdok_wspolne',DK.ref());
               {? _can_continue>0
               ||
::                Stoje na dokumencie, dodaje go do tabelki tymczasowej
                  exec('zw2tab','magdok_partie',_args.cr_env)
               ?}
            ?}
         ?};
         DK.next()
      !}
   ?}
|? _args.ZPARN<>~~
|| DK.index('PARTIA');
   DK.prefix(_args.ZPARN);
   {? DK.first()
   || {!
      |?
::       Dodaje tylko dokumenty zaakceptowane
         _akc:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"Z",'');
         {? _akc='T'
         ||
            {? _args.MODE='RP'
            || _can_continue:=exec('dk_is_rp','magdok_wspolne',DK.ref());
               {? _can_continue>0
               ||
::                Stoje na dokumencie, dodaje go do tabelki tymczasowej
                  exec('rp2tab','magdok_partie',_args.cr_env)
               ?}
            ?}
         ?};
         DK.next()
      !}
   ?}
?};

DK.cntx_pop();
TYPYDOK.cntx_pop();
~~


\rw2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje pozycje dokumentu do tabeli tymczasowej
::       Kontekst pracy - rekord tabeli DK
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \rw2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_RW;

ND.cntx_psh();
ZL.cntx_psh();
M.cntx_psh();
JM.cntx_psh();

_tab.cntx_psh();
_tab.index(_cr_env.IN_RW1);
_tab.prefix($DK.ref());
{? _tab.size()=0
||
   _tab.blank();
   _tab.SQL_REF:=$DK.ref();
   _tab.SYMBOL:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"SYM",'')+' poz. '+$DK.P;
   _tab.POZ:=DK.P;
   _tab.KTM_REF:=$DK.M;
   _tab.KTM:=DK.M().KTM;
   _tab.KTM_NAZ:=DK.M().N;
   _tab.ILOSC:=DK.IL;
   _tab.JM:=DK.JM().KOD;
   _tab.IL_PART:=0;
   _tab.ZL:=DK.ZL().SYM;
   _tab.ZL_REF:=$DK.ZL;
   _tab.SRC_REF:=DK.PRDK;

   _zl_top:=exec('top_level','zl_link',DK.ZL);
   _tab.ZL_TOP:=$_zl_top;

   _zl_part:=exec('party_first','zl_link',DK.ZL);
   _tab.ZL_PART:=$_zl_part;

   _nd:=exec('FindAndGet','#table',DK,DK.PRDK,,"N",null());
   _poz_src:=exec('FindAndGet','#table',DK,DK.PRDK,,"P",0);
   {? _nd<>null()
   || _tab.SRC_SYM:=exec('FindAndGet','#table',ND,#_nd,ref_name(_nd),"SYM",'')+' poz. '+$+_poz_src
   ?};
   _tab.add()
?};

_tab.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZL.cntx_pop();
ND.cntx_pop();
~~


\zw2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje pozycje dokumentu do tabeli tymczasowej
::       Kontekst pracy - rekord tabeli DK
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \zw2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_ZW;

ND.cntx_psh();
ZL.cntx_psh();
M.cntx_psh();
JM.cntx_psh();

_tab.cntx_psh();
_tab.index(_cr_env.IN_ZW1);
_tab.prefix($DK.ref());
{? _tab.size()=0
||
   _tab.blank();
   _tab.SQL_REF:=$DK.ref();
   _tab.SYMBOL:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"SYM",'')+' poz. '+$DK.P;
   _tab.POZ:=DK.P;
   _tab.KTM_REF:=$DK.M;
   _tab.KTM:=DK.M().KTM;
   _tab.KTM_NAZ:=DK.M().N;
   _tab.ILOSC:=DK.IL;
   _tab.JM:=DK.JM().KOD;
   _tab.IL_PART:=0;
   _tab.ZL:=DK.ZL().SYM;
   _tab.ZL_REF:=$DK.ZL;
   _tab.SRC_REF:=DK.PRDK;

   _zl_top:=exec('top_level','zl_link',DK.ZL);
   _tab.ZL_TOP:=$_zl_top;

   _zl_part:=exec('party_first','zl_link',DK.ZL);
   _tab.ZL_PART:=$_zl_part;

   _nd:=exec('FindAndGet','#table',DK,DK.PRDK,,"N",null());
   _poz_src:=exec('FindAndGet','#table',DK,DK.PRDK,,"P",0);
   {? _nd<>null()
   || _tab.SRC_SYM:=exec('FindAndGet','#table',ND,#_nd,ref_name(_nd),"SYM",'')+' poz. '+$+_poz_src
   ?};
   _tab.add()
?};

_tab.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZL.cntx_pop();
ND.cntx_pop();
~~


\limit2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje limit zlecenia do tabeli tymczasowej
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \limit2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_SUR;
_tab_lim:=_cr_env.TAB_LIM;

ZLIM.cntx_psh();
ZL.cntx_psh();
M.cntx_psh();
JM.cntx_psh();
_tab.cntx_psh();
_tab_lim.cntx_psh();
_tab_lim.prefix($ZLIM.ref());
{? _tab_lim.size()=0
||
   _tab_lim.blank();
   _tab_lim.LIM_REF:=$ZLIM.ref();
   _tab_lim.add();

:: W tym widoku limity przypisuje zawsze do zlecenia nadrzednego na samej gorze
:: dlatego zeby poprawnie zbudowac drzewo surowcow dla partii ktora jest przypieta do zlecenia
:: montazowego
::   _zl:=exec('top_level','zl_link',ZLIM.ZLEC);

:: Znajduje najbliższe najwyższe zlecenie z partią
   _zl:=exec('party_first','zl_link',ZLIM.ZLEC);

   _tab.prefix($_zl,$ZLIM.KTM);
   {? _tab.first()
   ||
::    Jesli jest juz taki surowiec dla zlecenia to powiekszam ilosc
      _tab.ILOSC+=ZLIM.LIL;
      {? ZLIM.MODE_DST='R'
      || _tab.MANUAL:='T'
      ?};
      _tab.put()
   ||
::    Nie ma jeszcze takiego surowca dla zlecenia - dodaje
      _tab.blank();
      _tab.ZL_REF:=$_zl;
      _tab.KTM_REF:=$ZLIM.KTM;
      _tab.KTM:=ZLIM.KTM().KTM;
      _tab.KTM_NAZ:=ZLIM.KTM().N;
      _tab.ILOSC:=ZLIM.LIL;
      _tab.JM:=ZLIM.KTM().J().KOD;
      _tab.ZL:=ZLIM.ZLEC().SYM;
      _tab.IL_ZL:=ZLIM.ZLEC().IL;
      _tab.MANUAL:=ZLIM.MODE_DST;
      _tab.add()
   ?}
?};
_tab.cntx_pop();
_tab_lim.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZL.cntx_pop();
ZLIM.cntx_pop();
~~


\sur2part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Przypisuje surowce do partii - tworze drzewo
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \sur2part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab_sur:=_cr_env.TAB_SUR;
_tab_part:=_cr_env.TAB_PART;

_tab_part.cntx_psh();
_tab_sur.cntx_psh();

_tab_part.index(_cr_env.IN_PART3);
:: Prefiksuje partie
_tab_part.prefix('P');

{? _tab_part.first()
|| {!
   |? _parent:=#_tab_part.ref();
      _part_il:=_tab_part.ILOSC;
      _part_sym:=_tab_part.PART_SYM;
      _zpar_ref:=_tab_part.ZPAR_REF;
      _zl_ref:=_tab_part.ZL_REF;

      _part_il_org:=exec('FindAndGet','#table',ZPARN,_zpar_ref,,"IL",0);

::    Surowce prefiksuje zleceniem
      _zl:=exec('FindAndGet','#table',ZL,_tab_part.ZL_REF,,,null());

      _top:=exec('top_level','zl_link',_zl);
::      {? exec('is_separate_zl','zl_link',_zl)>0
::      ||
::::       Jesli zlecenie nalezy do niezaleznego to ilosc biore ze zlecenia podrzednego
::::       bo na niezaleznym nie ma ilosci
::         _il_zl:=exec('FindAndGet','#table',ZL,#_zl,ref_name(_zl),"IL",0)
::      || _il_zl:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"IL",0)
::      ?};

      _il_zl:=exec('FindAndGet','#table',ZL,#_zl,ref_name(_zl),"IL",0);

::      _tab_sur.prefix($_top);
      _tab_sur.prefix($_zl);

      _tab_part.cntx_psh();
      _tab_part.index(_cr_env.IN_PART5);

      {? _tab_sur.first()
      || {!
         |?
::          Sprawdzam czy w _tab_part taki surowiec juz nie jest dodany - zeby nie dublowac
            _tab_part.prefix('S',_zpar_ref,_tab_sur.KTM_REF);
            {? _tab_part.size()=0
            ||
               _tab_part.clear();
               _tab_part.blank();
               _tab_part.PARENT:=_parent;
               _tab_part.SYMBOL:=_tab_sur.KTM;
               _tab_part.PART_SYM:=_part_sym;
               _tab_part.KTM_REF:=_tab_sur.KTM_REF;
               _tab_part.ZPAR_REF:=_zpar_ref;
               _tab_part.ZL_REF:=_zl_ref;
               _tab_part.ZL_TOP:=$_top;

::             Skaluje ilosc surowca dla partii wzgledem ilosci zlecenia
               {? _part_il>_part_il_org
               ||
::                Obsługa nadwykonań
                  _il_sur:=_part_il_org*_tab_sur.ILOSC/_il_zl

               || _il_sur:=_part_il*_tab_sur.ILOSC/_il_zl
               ?};

::             Nie mogę przekroczyć ilości na limitach (nawet w przypadku nadwykonań na partii)
               _il_sur:=exec('min','#math',_il_sur,_tab_sur.ILOSC);
               _tab_part.ILOSC:=_il_sur$ST.DOKL;
               _tab_part.TYP:='S';
               _tab_part.MANUAL:=_tab_sur.MANUAL;
               _tab_part.add()
            ?};
            _tab_sur.next()
         !}
      ?};
      _tab_part.cntx_pop();

      _tab_part.next()
   !}
?};

_tab_sur.cntx_pop();
_tab_part.cntx_pop();
~~


\load_zpars_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tablica parametrów dla load_zpars
::   WY: _args
::  OLD: \load_zpars_a/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('blank'
               ,'ZPARN'
               ,'TYP'
               ,'ZL'
::             Czy wrzucac ZPARSy do tabelki .TAB_COMP
               ,'COMP'
               ,'cr_env'
              );
:: - - - - ponizej ustawienie wartosci domyslnych
_args.blank:="
       .ZPARN:=null();
       .ZL:=null();
       .TYP:='';
       .COMP:='N';
       .cr_env:=~~;
       ~~
      ";
:: - - - - koniec ustalania wartosci domyslnych
_args.blank();
_args


\load_zpars
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Laduje do widoku kreatora wszystkie ZPARSy powiazane z partia
::   WE: _args
::  OLD: \load_zpars/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
{?_=1
|| _args:=_a
|| _args:=exec('load_zpars_a','magdok_partie')
?};

_can_continue:=0;

ZPARS.cntx_psh();
{? _args.TYP=''
|| ZPARS.index('PARTIA');
   ZPARS.prefix(_args.ZPARN)
||
   ZPARS.index('PARTIA2');
   ZPARS.prefix(_args.TYP,_args.ZPARN)
?};
{? ZPARS.first()
|| {!
   |? exec('zpars2tab','magdok_partie',_args.cr_env);

      {? _args.COMP='T'
      || exec('zpars2comp','magdok_partie',_args.cr_env)
      ?};
      ZPARS.next()
   !}
?};
ZPARS.cntx_pop();
~~


\zpars2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje powiazanie dok. rozchodowego do tabeli tymczasowej
::       Kontekst pracy - rekord tabeli ZPARS
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \zpars2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_type:=ZPARS.TYP;

:: W zaleznosci od typu ZPARSa dodaje go do odpowiedniej tabelki tymczasowej
{? _type=exec('type_rw','magdok_partie')
|| _tab:=_cr_env.TAB_ZPAR
|? _type=exec('type_zw','magdok_partie')
|| _tab:=_cr_env.TAB_ZPAZ
?};

ZPARN.cntx_psh();
_tab.cntx_psh();

:: Ustawiam indeks w tabeli tymczasowej do ktorej bede dodawal ZPARS
{? _type=exec('type_rw','magdok_partie')
|| _tab.index(_cr_env.IN_ZPAR1)
|? _type=exec('type_zw','magdok_partie')
|| _tab.index(_cr_env.IN_ZPAZ1)
?};

_tab.prefix($ZPARS.ref());
{? _tab.size()=0
||
   _buffer:=exec('buffer_zpars_cr','magdok_partie');
   _buffer.blank();
   _buffer.ZPAR_REF:=$ZPARS.ref();
   _buffer.PART_SYM:=ZPARS.PARTIA().SYM;
   _buffer.PART_REF:=$ZPARS.PARTIA;

:: Dokument rozchodowy
   _dk:=exec('FindAndGet','#table',DK,ZPARS.SQLDOK,,,null());
   {? _dk<>null()
   || _nd:=exec('FindAndGet','#table',DK,#_dk,ref_name(_dk),"N",null());
      _poz:=exec('FindAndGet','#table',DK,#_dk,ref_name(_dk),"P",0);
      {? _nd<>null()
      || _nd_sym:=exec('FindAndGet','#table',ND,#_nd,ref_name(_nd),"SYM",'');
         _buffer.DK_SYM:=_nd_sym+' poz. '+$_poz;
         _buffer.POZ:=_poz
      ?};
      _buffer.DK_REF:=$_dk;
      _buffer.JM:=exec('FindAndGet','#table',DK,#_dk,ref_name(_dk),"JM().KOD",'')
   ?};

:: Dokument zrodlowy
   _dk:=exec('FindAndGet','#table',DK,ZPARS.PRDK,,,null());
   {? _dk<>null()
   || _nd:=exec('FindAndGet','#table',DK,#_dk,ref_name(_dk),"N",null());
      _poz:=exec('FindAndGet','#table',DK,#_dk,ref_name(_dk),"P",0);
      {? _nd<>null()
      || _nd_sym:=exec('FindAndGet','#table',ND,#_nd,ref_name(_nd),"SYM",'');
         _buffer.SRC_SYM:=_nd_sym+' poz. '+$_poz
      ?};
      _buffer.SRC_REF:=$_dk
   ?};
   _buffer.KTM:=exec('FindAndGet','#table',M,#ZPARS.KTM,ref_name(ZPARS.KTM),"KTM",'');
   _buffer.KTM_NAZ:=exec('FindAndGet','#table',M,#ZPARS.KTM,ref_name(ZPARS.KTM),"N",'');
   _buffer.KTM_REF:=$ZPARS.KTM;
   _buffer.ILOSC:=ZPARS.IL;
   _top:=exec('top_level','zl_link',ZPARS.PARTIA().ZL);
   _buffer.ZL_TOP:=$_top;
   _buffer.ZL_REF:=$ZPARS.PARTIA().ZL;
   _buffer.ACCEPTED:='T';
   _buffer.TYP:=_type;
   _buffer.OVER:=ZPARS.OVER;

   {? _type=exec('type_rw','magdok_partie')
   || exec('tab_zpar_add','magdok_partie',_cr_env,_buffer)
   |? _type=exec('type_zw','magdok_partie')
   || exec('tab_zpaz_add','magdok_partie',_cr_env,_buffer)
   ?}
?};
_tab.cntx_pop();
ZPARN.cntx_pop();
~~


\tab_zpar_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Dodaje rekord do tabeli .TAB_ZPAR lub .TAB_ZPAZ w zaleznosci od typu ZPARSa
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - args - argumenty funkcji
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \tab_zpar_add/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_buffer:=_b;

_result:=0;
_can_continue:=0;

_tab:=_cr_env.TAB_ZPAR;
_tab.cntx_psh();
_tab.clear();
_tab.blank();
_buffer.set(_tab);
_can_continue:=_tab.add();
{? _can_continue>0
||
:: Uaktualniam powiazane ilosci w tabelach .TAB_PART i .TAB_RW
   _can_continue:=exec('update_il_part','magdok_partie',_cr_env,'RW',_buffer.PART_REF,_buffer.KTM_REF,_buffer.ILOSC,_buffer.OVER);
   {? _can_continue>0 | _cr_env.MODE='RP'
   ||
::    Przy rozliczaniu partii z poziomu RP zawsze aktualizuje ilość rozchodów,
::    aby w oknie uwzględnić ilości rozliczone na innych partiach
      _can_continue:=exec('update_il_dok','magdok_partie',_cr_env,'RW',_buffer.DK_REF,_buffer.ILOSC)
   ?};

:: Wlaczam, wylaczam przyciski
   exec('init_buttons','magdok_partie',_cr_env)
?};
_tab.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\update_il_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Uaktualnia ilosc IL_DOK w tabeli .TAB_PART
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - pole ktore uaktualniac: 'RW' / 'ZW'
::       _c - STRING - TAB_PART.PART_REF
::       _d - STRING - TAB_PART.KTM_REF
::       _e - REAL - ile dodac
::       _f - STRING - Czy nadwyżka ilości z dok. RW ([T]ak/[N]ie)
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \update_il_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_type:=_b;
_part_ref:=_c;
_ktm_ref:=_d;
_ilosc:=_e;
_over:={? var_press('_f')=type_of('str') || _f || 'N' ?};

_result:=0;

_tab:=_cr_env.TAB_PART;

{? _part_ref<>'' & _ktm_ref<>'' & var_pres('_tab')>100
||
   _tab.cntx_psh();
   _tab.index(_cr_env.IN_PART4);
   _tab.prefix(_part_ref,_ktm_ref);
   {? _tab.first()
   || {? _type='RW'
      || _tab.IL_RW+=_ilosc;
         {? _f<>'T'
         || _tab.IL_RW_R+=_ilosc
         ?}
      |? _type='ZW'
      || _tab.IL_ZW+=_ilosc
      ?};
      _tab.IL_SUM:=_tab.IL_RW-_tab.IL_ZW;
      _result:=_tab.put();

::    Uaktualniam status rodzica, czyli partii
      {? _result>0
      || exec('update_part','magdok_partie',_cr_env,_tab.PARENT)
      ?}
   ?};
   _tab.cntx_pop()
?};
_result


\update_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Uaktualnia status partii - sprawdza czy wszystkie surowce sa poprawnie powiazane z rozchodami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - TREE_REF - ref partii w drzewie
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \update_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_parent:=_b;

_result:=0;
_tab:=_cr_env.TAB_PART;

_tab.cntx_psh();
_status:='N';
_tab.clear();
::{? _tab.seek(_parent,)
::|| _status:=_tab.PART_OK
::?};
:: Iteruje po surowcach partii i nadaje nowy status
_tab.index(_cr_env.IN_PART1);
_tab.prefix(_parent);
{? _tab.first()
|| {!
   |? {? _tab.IL_RW_R>=_tab.ILOSC
      || _status:='T'
      |? _tab.IL_RW_R>0 & _tab.IL_RW_R<_tab.ILOSC
      || _status:='C'
      |? _tab.IL_RW_R=0
      || _status:='?'
      ?};
      _tab.next() & _status='T'
   !}
?};

:: Jesli w pierwszym przebiegu nie udalo sie ustalic statusu, poniewaz jeden z surowcow
:: nie mial w ogole pobran to trzeba zbadac czy sa jakiekolwiek pobrania czy nie ma nic
{? _status='?'
|| _status:='N';
   {? _tab.first()
   || {!
      |? {? _tab.IL_RW_R>0
         || _status:='C'
         ?};
         _tab.next() & _status='N'
      !}
   ?}
?};

_tab.clear();
{? _tab.seek(_parent,)
|| _tab.PART_OK:=_status;
   _result:=_tab.put()
?};
_tab.cntx_pop();
_result


\update_il_dok
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Uaktualnia ilosc IL_PART w tabeli .TAB_RW lub .TAB_ZW
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - tabela w ktorej uaktualniac: 'RW' / 'ZW'
::       _c - STRING - TAB_RW.SQL_REF
::       _d - REAL - ile dodac
::   WY: 0 - porazka
::       1 - sukces
::  OLd: \update_il_dok/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_mode:=_b;
_sqlref:=_c;
_ilosc:=_d;

_result:=0;

{? _mode='RW'
|| _tab:=_cr_env.TAB_RW
|? _mode='ZW'
|| _tab:=_cr_env.TAB_ZW
?};

{? _sqlref<>''
||
   _tab.cntx_psh();
   {? _mode='RW'
   || _tab.index(_cr_env.IN_RW1)
   |? _mode='ZW'
   || _tab.index(_cr_env.IN_ZW1)
   ?};
   _tab.prefix(_sqlref);
   {? _tab.first()
   || _tab.IL_PART+=_ilosc;
      _result:=_tab.put()
   ?};
   _tab.cntx_pop()
?};
_result


\init_buttons
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Inicjuje stan przyciskow Akceptuj/Anuluj na podstawie zawartosci okna
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \init_buttons/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

{? _cr_env.WIN_CTR2<>''
||
   _zpars:=0;
   _zpazs:=0;
   {? var_pres('TAB_ZPAR',_cr_env)>100
   || _zpars:=_cr_env.TAB_ZPAR.size()
   ?};

   {? var_pres('TAB_ZPAZ',_cr_env)>100
   || _zpazs:=_cr_env.TAB_ZPAZ.size()
   ?};

   {? _zpars>0 | _zpazs>0
   || exec('set_enabled','#desktop','',_cr_env.ctr_id2,_cr_env.ctr_akc,1)
   || exec('set_enabled','#desktop','',_cr_env.ctr_id2,_cr_env.ctr_akc,0)
   ?};

   {? _cr_env.FORCE>0
   || exec('set_enabled','#desktop','',_cr_env.ctr_id2,_cr_env.ctr_akcf,1)
   || exec('set_enabled','#desktop','',_cr_env.ctr_id2,_cr_env.ctr_akcf,0)
   ?}
?};
~~


\tab_zpaz_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Dodaje rekord do tabeli .TAB_ZPAZ
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - args - argumenty funkcji
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \tab_zpaz_add/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_buffer:=_b;

_result:=0;
_can_continue:=0;

_tab:=_cr_env.TAB_ZPAZ;

_tab.cntx_psh();
_tab.clear();
_tab.blank();
_buffer.set(_tab);
_can_continue:=_tab.add();
{? _can_continue>0
||
:: Uaktualniam powiazane ilosci w tabelach .TAB_PART i .TAB_ZW
   _can_continue:=exec('update_il_part','magdok_partie',_cr_env,'ZW',_buffer.PART_REF,_buffer.KTM_REF,_buffer.ILOSC);
   {? _can_continue>0
   || _can_continue:=exec('update_il_dok','magdok_partie',_cr_env,'ZW',_buffer.DK_REF,_buffer.ILOSC)
   ?};

:: Wlaczam, wylaczam przyciski
   exec('init_buttons','magdok_partie',_cr_env)
?};
_tab.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\zpars2comp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Dodaje ZPARSa do tabeli skladnikow partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \zpars2comp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_tab:=_cr_env.TAB_COMP;
ZL.cntx_psh();
M.cntx_psh();
ZPARN.cntx_psh();
_tab.cntx_psh();
_tab.index(_cr_env.IN_COMP2);
_tab.prefix($ZPARS.KTM);

ZPARS.KTM();
{? _tab.first()
||
:: Jest juz taki surowiec to zwiekszam ilosc
   {? ZPARS.TYP=exec('type_rw','magdok_partie')
   || _tab.IL_RW+=ZPARS.IL;
      _tab.IL_SUM+=ZPARS.IL
   |? ZPARS.TYP=exec('type_zw','magdok_partie')
   || _tab.IL_ZW+=ZPARS.IL;
      _tab.IL_SUM-=ZPARS.IL
   ?};
   _tab.put()
||
:: Jesli nie ma jeszcze takiego surowca - dodaje
   _tab.blank();
   _tab.SYMBOL:=M.KTM;
   _tab.NAZWA:=M.N;
   {? ZPARS.TYP=exec('type_rw','magdok_partie')
   || _tab.IL_RW+=ZPARS.IL;
      _tab.IL_SUM+=ZPARS.IL
   |? ZPARS.TYP=exec('type_zw','magdok_partie')
   || _tab.IL_ZW+=ZPARS.IL;
      _tab.IL_SUM-=ZPARS.IL
   ?};
   _tab.ZL:=ZPARS.PARTIA().ZL().SYM;
   _tab.KTM_REF:=$ZPARS.KTM;
   _tab.add()
?};
_tab.cntx_pop();
ZL.cntx_pop();
M.cntx_pop();
ZPARN.cntx_pop();
~~


\load_zlgd
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Ładuje zawartość tabeli TAB_ZLGD
::   WE: _a - _args - tablica nazwana z argumentami wynik exec('load_zpars_a','magdok_partie')
::  OLD: \load_zlgd/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_cr_env:=_args.cr_env;

_tab:=_cr_env.TAB_ZLGD;
_tab_part:=_cr_env.TAB_PART;

_can_continue:=1;
_result:=0;

_tab.cntx_psh();
ZLGD.cntx_psh();
ZL_WYRGD.cntx_psh();
ZL_WYRGD.use(5+ZL_WYRGD.name()+(ZLGD.name()+3));
{? _args.ZL<>null()
||
:: Zlecenie

:: Iteruję po partiach załadowanych w oknie
   ZPARN.cntx_psh();
   _tab_part.cntx_psh();
   _tab_part.index(_cr_env.IN_PART3);
   _tab_part.prefix('P');
   {? _tab_part.first()
   || ZPARN.prefix();
      ZLGD.index('ZPARN');
      ZL_WYRGD.index('ZPARN');
      {!
      |?
         _zparn:=exec('FindAndGet','#table',ZPARN,_tab_part.ZPAR_REF,,,null());

         {? _zparn<>null() & ZPARN.seek(_zparn)
         || ZLGD.prefix(_zparn);
            {? ZLGD.first()
            || {? _can_continue>0
               || {!
                  |?
::                   Dodaje węzeł partii i robocizny
                     _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env);
                     ZLGD.next() & _can_continue>0
                  !}
               ?}
            ?};
::          Przejście po zapisach robocizny, rozbitych wg produktów zlecnia
            ZL_WYRGD.prefix(_zparn);
            {? ZL_WYRGD.first()
            || {? _can_continue>0
               || {!
                  |?
::                   Dodaje węzeł partii i robocizny
                     _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,,,0);
                     ZL_WYRGD.next() & _can_continue>0
                  !}
               ?}
            ?};
::          Sprawdzenie partii, jeśli do którejś nie wykazano robocizny, to próba pobrania z partii przed podziałem
            _tab.index(_cr_env.IN_ZLGD3);
            _tab.prefix('P',$ZPARN.ref());
            {? ~_tab.first()
            ||
               ZLGD.cntx_psh();
               ZLGD.index('ZPARN');
               ZLGD.prefix(exec('FindInSet','#table','ZPARN','IDADD',ZPARN.IDSRC,,"ZPARN.ref()",,,null()));
               {? ZLGD.first()
               || {!
                  |?
::                   Dodaje węzeł partii i robocizny
                     _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,,ZPARN.ref());
                     ZLGD.next() & _can_continue>0
                  !}
               ?};
               ZLGD.cntx_pop();
               ZL_WYRGD.cntx_psh();
               ZL_WYRGD.index('ZPARN');
               ZL_WYRGD.prefix(exec('FindInSet','#table','ZPARN','IDADD',ZPARN.IDSRC,,"ZPARN.ref()",,,null()));
               {? ZL_WYRGD.first()
               || {!
                  |?
::                   Dodaje węzeł partii i robocizny
                     _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,,ZPARN.ref(),0);
                     ZL_WYRGD.next() & _can_continue>0
                  !}
               ?};
               ZL_WYRGD.cntx_pop()
            ?}
         ?};
         _tab_part.next() & _can_continue>0
      !}
   ?};
   ZPARN.cntx_pop();
   _tab_part.cntx_pop()

|? _args.ZPARN<>null()
|| _jest:=0;
   ZLGD.index('ZPARN');
   ZLGD.prefix(_args.ZPARN);
   {? ZLGD.first()
   || _jest:=1;
      {!
      |?
::       Dodaje węzeł robocizny
         _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,1);
         ZLGD.next() & _can_continue>0
      !}
   ?};
:: Przejście po zapisach robocizny, rozbitych wg produktów zlecnia
   ZL_WYRGD.index('ZPARN');
   ZL_WYRGD.prefix(_args.ZPARN);
   {? ZL_WYRGD.first()
   || _jest:=1;
      {!
      |?
::       Dodaje węzeł robocizny
         _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,1,,0);
         ZL_WYRGD.next() & _can_continue>0
      !}
   ?};

:: Jeśli nie wykazano robocizny, to próba pobrania z partii przed podziałem
   {? _jest=0
   || _tab.index(_cr_env.IN_ZLGD3);
      _tab.prefix('R',$ZPARN.ref());
      {? ~_tab.first()
      ||
         ZLGD.index('ZPARN');
         ZLGD.prefix(exec('FindInSet','#table','ZPARN','IDADD',ZPARN.IDSRC,,"ZPARN.ref()",,,null()));
         {? ZLGD.first()
         || {!
            |?
::             Dodaje węzeł parii i robocizny
               _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,1,ZPARN.ref());
               ZLGD.next() & _can_continue>0
            !}
         ?};
         ZL_WYRGD.index('ZPARN');
         ZL_WYRGD.prefix(exec('FindInSet','#table','ZPARN','IDADD',ZPARN.IDSRC,,"ZPARN.ref()",,,null()));
         {? ZL_WYRGD.first()
         || {!
            |?
::             Dodaje węzeł parii i robocizny
               _can_continue:=exec('zlgd2tab','magdok_partie',_cr_env,,1,ZPARN.ref(),0);
               ZL_WYRGD.next() & _can_continue>0
            !}
         ?}
      ?}
   ?}
?};
ZL_WYRGD.cntx_pop();
ZLGD.cntx_pop();
_tab.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\zlec2zlgd_tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Dodaje zlecenie do tabeli TAB_ZLGD
::       Kontekst: zlecenie ktore dodac
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - #.TAB_ZLGD.ref - parent
::       [_c] - REAL - ilość wykonana którą od razu nawinąć
::       [_d] - REAL - czas wykonany którą od razu nawinąć
::       [_e] - REAL - ilość brakow którą od razu nawinąć
::       [_f] - ZPARN.ref - partia
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \zlec2zlgd_tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_parent:=0;
{? var_pres('_b')=type_of(0)
|| _parent:=_b
?};

_il_wyk:=0;
{? var_pres('_c')=type_of(0)
|| _il_wyk:=_c
?};

_ti_wyk:=0;
{? var_pres('_d')=type_of(0)
|| _ti_wyk:=_d
?};

_il_brak:=0;
{? var_pres('_e')=type_of(0)
|| _il_brak:=_e
?};
_zparn:=null();
{? var_pres('_f')=type_of(ZPARN.ref())
|| _zparn:=_f
?};

_result:=0;

_tab:=_cr_env.TAB_ZLGD;

M.cntx_psh();
_tab.blank();
_tab.PARENT:=_parent;
_tab.ZPAR_REF:=$_zparn;
_tab.TYP:='Z';
_tab.SYMBOL:='Zlecenie: %1'@[ZL.SYM];
_tab.NAZWA:=ZL.OPIS;
_tab.ILOSC:=ZL.IL;
_tab.IL_WYK:=_il_wyk;
_tab.IL_BRAK:=_il_brak;
_tab.TI_WYK:=_ti_wyk;
_tab.ZL_REF:=$ZL.ref();
_tab.ZL_TOP:=$exec('top_level','zl_link',ZL.ref());
_tab.KTM:=ZL.KTM().KTM;
_tab.KTM_NAZ:=M.N;
_tab.KTM_REF:=$M.ref();
_result:=_tab.add();
M.cntx_pop();
_result


\zlgd2tab
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Dodaje rekord robocizny do tabeli robocizny
::       Kontekst pracy - ZLGD/ZL_WYRGD który dodać
::   WE: _a - cr_env - środowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - #.TAB_ZLGD.ref - węzeł nadrzędny
::       [_c] - INTEGER - 0 - tworzone sa gałęzie zleceń i partii
::                        1 - płaska struktura - dodawane są tylko liście robocizny
::       [_d] - ZPARN.ref() - do podmiany miejsca podczepienia liści do węzła partii - tylko gdy brak _b
::       [_e] - INTEGER - kontekst pracy: [1] - ZLGD, 0 - ZL_WYRGD
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \zlgd2tab/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_parent:=0;
{? var_pres('_b')=type_of(0)
|| _parent:=_b
?};

_flat:=0;
{? var_pres('_c')=type_of(0)
|| _flat:=_c
?};

{? var_pres('_d')=type_of(null()) || _zparn:=_d || _zparn:=null() ?};
{? var_pres('_e')=type_of(0) || _czy_zlgd:=_e || _czy_zlgd:=1 ?};
_result:=1;

_tab:=_cr_env.TAB_ZLGD;

ZPARN.cntx_psh(); ZPARN.prefix();
M.cntx_psh(); M.prefix();
ZL.cntx_psh(); ZL.prefix();
ZGP.cntx_psh(); ZGP.prefix();
{? _czy_zlgd=0 || ZLGD.cntx_psh() ?};
{? (_czy_zlgd>0 & ZLGD.ZPARN<>null()) | (_czy_zlgd=0 & ZL_WYRGD.ZPARN<>null())
||
:: Podczytanie ZLGD
   {? _czy_zlgd=0
   || _mask:=(5+ZLGD.name())+(ZL_WYRGD.name()+3);
      {? ZLGD.name()<>_mask
      || ZLGD.use(_mask); ZLGD.prefix()
      ?};
      ZL_WYRGD.ZLGD()
   ?};

:: Podczytanie ZL
   ZLGD.ZL();

:: Podczytanie ZPARN
   {? _czy_zlgd>0
   || ZLGD.ZPARN()
   || ZL_WYRGD.ZPARN()
   ?};

   {? _zparn=null()
   || {? _czy_zlgd>0
      || _zparn:=ZLGD.ZPARN;
         _zpar_nad:=ZLGD.ZPARN().SYM
      || _zparn:=ZL_WYRGD.ZPARN;
         _zpar_nad:=ZL_WYRGD.ZPARN().SYM
      ?}
   || _zpar_nad:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZPARN.SYM",'')
   ?};

   _tab.cntx_psh();
   _par_zl:=0;
   _par_part:=0;

   {? _flat=0
   ||
::    Znajduje węzeł partii lub go dodaje jeśli jeszcze nie ma takiego węzła partii
      _tab.index(_cr_env.IN_ZLGD3);
      _tab.prefix('P',$_zparn);
      {? _tab.first()
      || _par_part:=#_tab.ref();
::                  _tab.IL_WYK+=ZLGD.IL;
::                  _tab.IL_BRAK+=ZLGD.IL_BRAK;
::                  _tab.TI_WYK+=ZLGD.TIME;
         _tab.put()
      ||
         _tab.blank();
::         _tab.PARENT:=_par_zl;
         _tab.TYP:='P';
         _tab.ZPAR_REF:=$_zparn;
         _tab.SYMBOL:='Partia: %1'@[exec('FindAndGet','#table',ZPARN,_zparn,,"ZPARN.SYM",'')];
         _tab.NAZWA:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZPARN.OPIS",'');
         _tab.ILOSC:=exec('FindAndGet','#table',ZPARN,_zparn,,"ZPARN.IL",0);
::                  _tab.IL_WYK:=ZLGD.IL;
::                  _tab.IL_BRAK:=ZLGD.IL_BRAK;
::                  _tab.TI_WYK:=ZLGD.TIME;
         _tab.ZL_REF:=$ZPARN.ZL;
         _tab.ZL_TOP:=$exec('top_level','zl_link',ZPARN.ZL);
         _tab.KTM:=ZPARN.KTM().KTM;
         _tab.KTM_NAZ:=M.N;
         _tab.KTM_REF:=$M.ref();
         {? _tab.add()>0
         || _par_part:=#_tab.ref()
         ?}
      ?}
   ?};

   _zlgd:=exec('ref_table','#table');
   {? _czy_zlgd>0
   || _zlgd.add(ZLGD.ref())
   || _zlgd.add(ZL_WYRGD.ref())
   ?};
   {? ZLGD.ZL().RP<>'T'
   ||
::    Jeżeli zlecenie raportowane na magazyn, to nie doładowuję robocizny z niższych zleceń bo nie wiadomo czy wejdą
::    w skład partii nadrzędnej
      exec('add_prev_zlgd_2reftable','magdok_partie',ZLGD.ZGP,{? _czy_zlgd>0 || $ZLGD.ZPARN || $ZL_WYRGD.ZPARN ?}
         ,_zlgd)
   ?};

   _zlgd.tab.prefix();
   {? _zlgd.tab.first()
   || {!
      |? _formula:="
            _args:=_b;
            _tab:=_args.tab;
            _cr_env:=_args.cr_env;
            _par_part:=_args.par_part;
            _zpar_nad:=_args.zpar_nad;
            _flat:=_args.flat;
            _czy_zlgd:=_args.czy_zlgd;
            _par_zl:=0;
::          Podczytanie ZLGD
            {? _czy_zlgd=0
            || @.ZLGD.cntx_psh();
               _mask:=(5+@.ZLGD.name())+(ZL_WYRGD.name()+3);
               {? @.ZLGD.name()<>_mask
               || @.ZLGD.use(_mask);
                  @.ZLGD.prefix()
               ?};
               ZL_WYRGD.ZLGD()
            ?};
            {? _flat=0
            ||
::             Znajduje węzeł zlecenia lub go dodaje jeśli nie ma jeszcze takiego węzła zlecenia
               @.ZL.cntx_psh();
               _tab.cntx_psh();
               _tab.index(_cr_env.IN_ZLGD2);
               _tab.prefix('Z',$@.ZLGD.ZL,{? _czy_zlgd>0 || $ZLGD.ZPARN || $ZL_WYRGD.ZPARN ?});
               {? _tab.first()
               || _par_zl:=#_tab.ref();
::                  _tab.IL_WYK+=ZLGD.IL;
::                  _tab.IL_BRAK+=ZLGD.IL_BRAK;
::                  _tab.TI_WYK+=ZLGD.TIME;
                  _tab.put()
               || @.ZLGD.ZL();
                  _can_continue:=exec('zlec2zlgd_tab','magdok_partie',_cr_env,_par_part,,,,
                     {? _czy_zlgd>0 || ZLGD.ZPARN || ZL_WYRGD.ZPARN ?});
::                  ,ZLGD.IL,ZLGD.TIME,ZLGD.IL_BRAK);
                  {? _can_continue>0
                  || _par_zl:=#_tab.ref()
                  ?}
               ?};
               @.ZL.cntx_pop();
               _tab.cntx_pop()
            ?};

            {? _czy_zlgd>0
            || _tab.index(_cr_env.IN_ZLGD4);
               _tab.prefix($ZLGD.ref(),_par_zl)
            || _tab.index(_cr_env.IN_ZLGD5);
               _tab.prefix($ZL_WYRGD.ref(),_par_zl)
            ?};
            {? _tab.size()=0
            ||
               _tab.blank();
               _tab.PARENT:=_par_zl;
               _tab.TYP:='R';
               {? @.ZLGD.KOOP='T'
               || {? @.ZLGD.ZGP().KONTRAH<>null()
                  || _tab.SYMBOL+='Kooperacja (kontrahent: %1)'@[@.ZLGD.ZGP().KONTRAH().KOD]
                  || _tab.SYMBOL+='Kooperacja (brak kontrahenta na poz. przewodnika)'@
                  ?}
               |? @.ZLGD.ZGP().NTIME=0
               || {? @.ZLGD.ZGP().GRUPA<>null()
                  || _tab.SYMBOL:='Gniazdo: %1'@[@.ZLGD.ZGP().GRUPA().SYMBOL]
                  || _tab.SYMBOL:='Stanowisko: %1'@[@.ZLGD.ZGP().PLACE().KOD]
                  ?}
               |? @.ZLGD.BP='P'
               || _tab.SYMBOL:='%1 %2'[@.ZLGD.P().OSOBA().PIERWSZE,@.ZLGD.P().OSOBA().NAZWISKO]
               |? @.ZLGD.BP='B'
               || _tab.SYMBOL:='%1 %2'[@.ZLGD.B().KOD,@.ZLGD.B().NAZ]
               ?};
               _tab.NAZWA:='Operacja: %1. %2'@[$@.ZLGD.ZGP().NRP,@.ZLGD.ZGP().OPIS];
               {? _czy_zlgd>0
               || _tab.ILOSC:=ZLGD.IL;
                  _tab.IL_WYK:=ZLGD.IL;
                  _tab.IL_BRAK:=ZLGD.IL_BRAK;
                  _tab.TI_WYK:=ZLGD.TIME
               || _tab.ILOSC:=ZL_WYRGD.IL;
                  _tab.IL_WYK:=ZL_WYRGD.IL;
                  _tab.IL_BRAK:=ZL_WYRGD.IL_BRAK;
::                  _tab.TI_WYK:=0;
                  _tab.TI_WYK:=@.ZLGD.TIME
               ?};
               _tab.ZL_REF:=$@.ZLGD.ZL;
               _tab.ZL_SYM:=@.ZLGD.ZL().SYM;
               _tab.ZL_TOP:=$exec('top_level','zl_link',@.ZLGD.ZL);
               _tab.ZLGD_REF:=$@.ZLGD.ref();
               _tab.ZPAR_NAD:=
                  {? _czy_zlgd>0 & ZLGD.ZPARN<>null()
                  || ZLGD.ZPARN().SYM
                  |? _czy_zlgd=0 & ZL_WYRGD.ZPARN<>null()
                  || ZL_WYRGD.ZPARN().SYM
                  || '<'+'półfabrykat bez podania partii'@+'>'
                  ?};
               {? _czy_zlgd>0
               || _tab.ZPAR_REF:=$ZLGD.ZPARN
               || _tab.ZPAR_REF:=$ZL_WYRGD.ZPARN;
                  _tab.ZL_WYRGD:=$ZL_WYRGD.ref()
               ?};
               _tab.MAIN:={? _tab.ZPAR_NAD=_zpar_nad || 'T' || 'N' ?};
               {? _tab.add()
               || _par_zlbr:=#_tab.ref();
                  {? @.ZLGD.BP='B'
                  || _tab.cntx_psh();
                     _tab.clear();
                     @.ZLGB.cntx_psh();
                     _msk:=(5+@.ZLGB.name())+(@.ZLGD.name()+3);
                     {? _msk<>@.ZLGB.name()
                     || @.ZLGB.use(_msk)
                     ?};
                     @.ZLGB.index('ZLGD');
                     @.ZLGB.prefix(@.ZLGD.ref());
                     {? @.ZLGB.first()
                     || {!
                        |?
                           _tab.PARENT:=_par_zlbr;
                           _tab.TYP:='B';
                           _tab.SYMBOL:='%1 %2'[@.ZLGB.P().OSOBA().PIERWSZE,@.ZLGB.P().OSOBA().NAZWISKO];
                           {? _czy_zlgd>0
                           || _tab.ILOSC:=@.ZLGB.IL;
                              _tab.IL_WYK:=@.ZLGB.IL;
                              _tab.IL_BRAK:=@.ZLGB.IL_BRAK;
                              _tab.TI_WYK:=@.ZLGB.TIME
                           || _tab.ILOSC:=ZL_WYRGD.IL;
                              _tab.IL_WYK:=ZL_WYRGD.IL;
                              _tab.IL_BRAK:=ZL_WYRGD.IL_BRAK;
                              _tab.TI_WYK:=@.ZLGB.TIME
::                              _tab.ILOSC:=0;
::                              _tab.IL_WYK:=0;
::                              _tab.IL_BRAK:=0;
::                              _tab.TI_WYK:=0
                           ?};
                           _tab.add();
                           @.ZLGB.next()
                        !}
                     ?};
                     _tab.cntx_pop();
                     @.ZLGB.cntx_pop()
                  ?}
               ?}
            ?};
            {? _czy_zlgd=0
            || @.ZLGD.cntx_pop()
            ?}
         ";
         _args:=obj_new('tab'
                        ,'cr_env'
                        ,'par_part'
                        ,'zpar_nad'
                        ,'flat'
                        ,'czy_zlgd');

         _args.tab:=_tab;
         _args.cr_env:=_cr_env;
         _args.par_part:=_par_part;
         _args.zpar_nad:=_zpar_nad;
         _args.flat:=_flat;
         _args.czy_zlgd:=_czy_zlgd;

         {? _czy_zlgd>0
         || exec('FindAndGet','#table',ZLGD,_zlgd.tab.SQL,,_formula,~~,_args)
         || exec('FindAndGet','#table',ZL_WYRGD,_zlgd.tab.SQL,,_formula,~~,_args)
         ?};
         obj_del(_args);
         _zlgd.tab.next()
      !}
   ?};

   {? _parent>0
   ||
::    Aktualizuje ilość wykonaną na węźle nadrzędnym
      _tab.clear();
      {? _tab.seek(_parent,)
      ||
::                  _tab.IL_WYK+=ZLGD.IL;
::                  _tab.IL_BRAK+=ZLGD.IL_BRAK;
::                  _tab.TI_WYK+=ZLGD.TIME;
         _tab.put()
      ?}
   ?};
   _tab.cntx_pop()
?};
ZGP.cntx_pop();
M.cntx_pop();
ZPARN.cntx_pop();
ZL.cntx_pop();
{? _czy_zlgd=0 || ZLGD.cntx_pop() ?};
_result


\cr_tab_zpars_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca powiazania rozchodow z partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_zpars_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'ZPAR_REF' ,'STRING[16]'  ,'Ref. SQL w tabeli ZPARS'
               ,'PART_SYM' ,'STRING[25]'  ,'Symbol partii'
               ,'PART_REF' ,'STRING[16]'  ,'Ref partii'
               ,'DK_SYM'   ,'STRING[30]'  ,'Symbol dokumentu rozchodowego'
               ,'DK_REF'   ,'STRING[16]'  ,'Ref dokumentu rozchodowego'
               ,'POZ'      ,'INTEGER'     ,'Pozycja w dokumencie'
               ,'SRC_SYM'  ,'STRING[30]'  ,'Symbol dokumentu zrodlowego'
               ,'SRC_REF'  ,'STRING[16]'  ,'Ref dokumentu zrodlowego'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość na pozycji dokumentu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzędnego'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ACCEPTED' ,'STRING[1]'   ,'Czy powiazanie zaakceptowane'
               ,'TYP'      ,'STRING[1]'   ,'Typ powiazania: rozchody czy zwroty'
               ,'OVER'     ,'STRING[1]'   ,'Czy powiązanie utworzone z nadmiarowych ilości rozchodu'
               );
_cr_env.IN_ZPAZ1:=_tab.ndx_tmp(,,'ZPAR_REF',,);
_cr_env.IN_ZPAZ2:=_tab.ndx_tmp(,,'ACCEPTED',,,'PART_SYM',,,'DK_SYM',,);
_cr_env.IN_ZPAZ3:=_tab.ndx_tmp(,,'DK_REF',,,'DK_SYM',,);
_cr_env.IN_ZPAZ4:=_tab.ndx_tmp(,,'PART_REF',,);
_cr_env.IN_ZPAZ5:=_tab.ndx_tmp(,,'ZL_REF',,,'PART_REF',,,'KTM_REF',,);
_tab


\cr_load_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Laduje dane do kreatora - dla dokumentu ZW
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - ND.ref - dokument z ktorego ladujemy
::  OLD: \cr_load_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_nd:=_b;

ND.cntx_psh(); ND.clear();
DK.cntx_psh();
DK.index('DOKMAG');
ZL.cntx_psh();

:: Tabelka tymczasowa - lista zlecen na dokumencie
_list_zl:=tab_tmp(1,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia');

{? ND.seek(_nd)
||
   DK.prefix(ND.ref());
   {? DK.first()
   ||
::    Iteruje po pozycjach ZW
      {!
      |?
         _zl:=DK.ZL;

::       Dodaje zlecnie do listy zlecen
         _list_zl.prefix($DK.ZL);
         {? _list_zl.first()=0
         || _list_zl.blank();
            _list_zl.ZL_REF:=$DK.ZL;
            _list_zl.add()
         ?};

         DK.cntx_psh();

         DK.cntx_pop();

::       Zbieram partie z calego zlecenia
         ZPARN.cntx_psh();
         ZPARN.index('ZL');
         ZPARN.prefix(DK.ZL);
         {? ZPARN.first()
         || _can_continue:=1;
            {!
            |?
::             Jeżeli były nadwykonania na partii, to ilosć partii biorę z tych nadwykonań
               _il:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
               _il:=exec('max','#math',_il,ZPARN.IL);
               exec('part2tab','magdok_partie',_cr_env,_il,0);
               ZPARN.next()
            !}
         ?};
         ZPARN.cntx_pop();

::       LADOWANIE ZW
::       Stoje na dokumencie, dodaje go do tabelki tymczasowej
         exec('zw2tab','magdok_partie',_cr_env);

         DK.next()
      !}
   ?}
?};

{? _cr_env.TAB_PART.size()>0
||
   _list_zl.clear();
   {? _list_zl.first() & _cr_env.TAB_PART.size()>0
   ||
      {!
      |?
         ZL.cntx_psh();
         ZL.clear();
         {? ZL.seek(_list_zl.ZL_REF)
         ||
::          Ladujemy limity ze zlecen do tabeli kumulujacej surowce zlecenia
            ZLIM.cntx_psh();

            _top:=exec('top_level','zl_link',ZL.ref());
            _top_rodz:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"RODZAJ",'');
            _top_unrzl:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"UNRZL",'');

            {? _top_rodz='P'
            ||
               ZL.cntx_psh();
               ZL.clear();
               {? ZL.seek(_top)
               ||
                  exec('openmask','zl_common',ZL.ref());
                  {? ( ZL.RODZAJ='Z' & ZL.GENLIM='N')
                   | ( ZL.RODZAJ='P' & ( ZL.GENLIM='P' | ZL.NRNZL=0) )
                  || 'Generowane do nadrzednego';
                     ZLIM.index('ZLMZLD_R')
                  |? (ZL.RODZAJ='Z' & ZL.GENLIM='P')
                   | (ZL.RODZAJ='P' & ZL.GENLIM='N' & ZL.NRNZL<>0)
                  || 'Generowane do podrzednego';
                     ZLIM.index('ZLDZLRM')
                  || ZLIM.index('ZLMZLD_R')
                  ?};

                  ZLIM.prefix(_top);
                  {? ZLIM.first()
                  || {!
                     |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                        || exec('limit2tab','magdok_partie',_cr_env)
                        ?};
                        ZLIM.next()
                     !}
                  ?}
               ?};
               ZL.cntx_pop();
               ~~
            ||
               ZL.cntx_psh();
               ZL.index('NRNZL');
               ZL.prefix(_top_unrzl);
               {? ZL.first()
               ||
                  {!
                  |?
                     exec('openmask','zl_common',ZL.ref());
                     {? ( ZL.RODZAJ='Z' & ZL.GENLIM='N')
                      | ( ZL.RODZAJ='P' & ( ZL.GENLIM='P' | ZL.NRNZL=0) )
                     || 'Generowane do nadrzednego';
                        ZLIM.index('ZLMZLD_R')
                     |? (ZL.RODZAJ='Z' & ZL.GENLIM='P')
                      | (ZL.RODZAJ='P' & ZL.GENLIM='N' & ZL.NRNZL<>0)
                     || 'Generowane do podrzednego';
                        ZLIM.index('ZLDZLRM')
                     || ZLIM.index('ZLMZLD_R')
                     ?};

                     ZLIM.prefix(ZL.ref());
                     {? ZLIM.first()
                     || {!
                        |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                           || exec('limit2tab','magdok_partie',_cr_env)
                           ?};
                           ZLIM.next()
                        !}
                     ?};
                     ZL.next()
                  !}
               ?};
               ZL.cntx_pop()
            ?};
            ZLIM.cntx_pop()
         ?};
         ZL.cntx_pop();
         _list_zl.next()
      !}
   ?};

:: Tworzymy drzewo w tabeli partii - partiom przypisujemy surowce
   exec('sur2part','magdok_partie',_cr_env);

:: Ponowna petla po DK - ladujemy istniejace powiazania partii ze zwrotami - musi byc wykonane po utworzeniu drzewa
:: w tabeli partii
   {? ND.seek(_nd)
   ||
      _args_zp:=exec('load_zpars4dk_a','magdok_partie');
      _args_zp.cr_env:=_cr_env;
      _args_zp.TYP:=exec('type_zw','magdok_partie');
      DK.prefix(ND.ref());
      {? DK.first()
      || {!
         |?
            _args_zp.DK:=DK.ref();
            {? DK.ZL<>null()
            ||
::             Podczytanie zlecenia
               DK.ZL();
::             Zbieram dla dokumentu ZPARS z masek od powolania zlecenia
               _name:=5+ZPARS.name();
               _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
               _msk_end:=~~;
               {? ZL.STAN='Z'
               || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               ?};
               _rule:="exec('load_zpars4dk','magdok_partie',_b)";
               exec('for_each_mask','#table',ZPARS,_rule,_msk_start,_msk_end,_args_zp)
            ?};
            DK.next()
         !}
      ?}
   ?}
?};

ZL.cntx_pop();
DK.cntx_pop();
ND.cntx_pop();
~~


\load_zpars4dk_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tablica parametrów dla load_zpars
::   WY: _args
::  OLD: \load_zpars4dk_a/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('blank'
               ,'DK'
               ,'TYP'
               ,'cr_env'
              );
:: - - - - ponizej ustawienie wartosci domyslnych
_args.blank:="
       .DK:=null();
       .TYP:='';
       .cr_env:=~~;
       ~~
      ";
:: - - - - koniec ustalania wartosci domyslnych
_args.blank();
_args


\load_zpars4dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Laduje do widoku kreatora wszystkie ZPARSy powiazane z partia
::   WE: _args
::  OLD: \load_zpars4dk/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1
|| _args:=_a
|| _args:=exec('load_zpars4dk_a','magdok_partie')
?};

_can_continue:=0;

ZPARS.cntx_psh();
{? _args.TYP=''
|| ZPARS.index('SQLDOK');
   ZPARS.prefix($_args.DK)
||
   ZPARS.index('SQLDOK2');
   ZPARS.prefix(_args.TYP,$_args.DK)
?};
{? ZPARS.first()
|| {!
   |? exec('zpars2tab','magdok_partie',_args.cr_env);
      ZPARS.next()
   !}
?};
ZPARS.cntx_pop();
~~


\cr_win_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_PART;

_title:='Partie produktów'@;

_wer:=_tab.mk_sel(_title,'P',0,_cr_env.wid_part,1,1,,1);
_tab.win_fld(_wer,,'SYMBOL' ,,,-20,,,'Symbol'@,0);
_tab.win_fld(_wer,,'ILOSC' ,,,-9,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'IL_RW' ,,,-9,ST.DOKL,,'Ilość [%1]'@['RW'],0);
_tab.win_fld(_wer,,'IL_ZW' ,,,-9,ST.DOKL,,'Ilość [%1]'@['ZW'],0);
_tab.win_fld(_wer,,'IL_SUM',,,-9,ST.DOKL,,'∑',0);
_tab.win_fld(_wer,,'ZL' ,,,-10,,,'Zlecenie'@,0);
::_tab.win_fld(_wer,,'OPIS' ,,,10,,,'Opis'@,0);

_tab.win_act(_wer,,'Rekord',,,,"exec('cr_tab_part_rek','magdok_partie',CR_ENV)");

_formula:=" _cr_env:=CR_ENV;
            _result:='';

            {? _cr_env.TAB_PART.TYP='P'
            ||
::             Ikona partii
               _result:='xwin16.png:188'
            |? _cr_env.TAB_PART.TYP='S'
            || {? _cr_env.TAB_PART.MANUAL='T'
               ||
::                Ikona recznie
                  _result:='xwin16.png:89'
               ||
::                Ikona automatycznie
                  _result:='xwin16.png:90'
               ?}
            ?};
            _result";
_tab.win_fml(_wer,,'SYMBOL',,'ICON_BEFORE',_formula);


_formula:=" _cr_env:=CR_ENV;
            _result:='';

            _result:='xwin16.png:110';
            {? _cr_env.TAB_PART.NADWYK='T'
            ||
::             Ikona nadwykonania
               _result:='xwin16.png:22'
            ?};
            _result";
_tab.win_fml(_wer,,'ILOSC',,'ICON_BEFORE',_formula);

_formula:="
   exec('create_zpar_act','magdok_partie',CR_ENV);
   ~~
";
_help:='Tworzy powiązanie między zaznaczoną partią i zaznaczoną pozycją dokumentu magazynowego'@;
_tab.win_act(_wer,0,'Formuła','Powiąż'@@,,,_formula,,1,,,,'P');
_btn:=_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Powiąż'@@],'menu:P');
_tab.btn_opt(_btn,'tooltip='+_help);

_formula:="
   exec('accept','magdok_partie',CR_ENV,1,0);
   ~~
";
_tab.win_act(_wer,0,'Formuła','Akceptuj'@@,,,_formula,,,,,,'A');
_tab.win_act(_wer,1,'Formuła','Akceptuj'@@,,,_formula,,1,,,,'A');

_formula:="
   exec('cr_anuluj','magdok_partie',CR_ENV);
   ~~
";
_tab.win_act(_wer,0,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');
_tab.win_act(_wer,1,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');

_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#10','ZPARS#01')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_cr_env.TAB_PART.win_sel(_wer);
_wer


\cr_tab_part_rek
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Przed rekord w tabeli partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_tab_part_rek/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);

_result:='';

{? _tab.TYP='P'
||
   {? _tab.PART_OK='T'
   || _result:=Color.fnd_kol('ZPARS#01#01')
   |? _tab.PART_OK='C'
   || _result:=Color.fnd_kol('ZPARS#01#02')
   ?}
|? _tab.TYP='S'
|| {? _tab.IL_RW_R>=_tab.ILOSC
   || _result:=Color.fnd_kol('ZPARS#01#01')
   |? _tab.IL_RW_R>0 & _tab.IL_RW_R<_tab.ILOSC
   || _result:=Color.fnd_kol('ZPARS#01#02')
   ?}
?};
_result


\cr_win_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli rozchodow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_RW;

_wer:=_tab.mk_sel(_cr_env.tit_rw,'P',0,_cr_env.wid_rw,1,1,,,'U');
_tab.win_fld(_wer,,'SYMBOL' ,,,-15,,,'Dokument rozchodowy'@,0);
_tab.win_fld(_wer,,'SRC_SYM' ,,,-15,,,'Źródło'@,0);
_tab.win_fld(_wer,,'ILOSC' ,,,-10,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'IL_PART' ,,,-10,ST.DOKL,,'Ilość rozliczona'@,0);
_tab.win_fld(_wer,,'JM' ,,,-5,,,'jm'@,0);
_tab.win_fld(_wer,,'KTM' ,,,-15,,,'Indeks'@,0);
_tab.win_fld(_wer,,'KTM_NAZ' ,,,-20,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'ZL' ,,,-10,,,'Zlecenie'@,0);

_formula:="exec('cr_tab_rw_rek','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Rekord',,,,_formula);

_formula:="exec('display_dk','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Wyświetl',,,,_formula);

_formula:="
   exec('create_zpar_act','magdok_partie',CR_ENV);
   ~~
";
_help:='Tworzy powiązanie między zaznaczoną partią i zaznaczoną pozycją dokumentu magazynowego'@;
_tab.win_act(_wer,0,'Formuła','Powiąż'@@,,,_formula,,1,,,,'P');

_formula:="exec('hist_dok','magdok_partie',CR_ENV,CR_ENV.TAB_RW.SQL_REF,CR_ENV.TAB_RW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_RW.SQL_REF,CR_ENV.TAB_RW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż &rozchód'@@,,,_formula,,,,,,'R');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_RW.SRC_REF,CR_ENV.TAB_RW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż źró&dło'@@,,,_formula,,,,,,'D');

_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#02')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_tab.win_sel(_wer);
_wer


\cr_tab_rw_rek
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Rekord przed w tabeli rozchodow
::   WY: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_tab_rw_rek/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_result:='';

_tab:=cur_tab(1,1);
{? _tab.IL_PART>=_tab.ILOSC
|| _result:=Color.fnd_kol('ZPARS#02#01')
|? _tab.IL_PART>0 & _tab.IL_PART<_tab.ILOSC
|| _result:=Color.fnd_kol('ZPARS#02#02')
?};
_result


\display_dk
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Wyswietla informacje o pozycji dokumentu, szuka dokumentu w roznych maskach
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \display_dk/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_RW;

DK.cntx_psh();
DK.use(8+_cr_env.TAB_RW.SQL_REF);
exec('display_dk_core','magdok_partie',_cr_env,_cr_env.TAB_RW.SQL_REF);
DK.cntx_pop();
~~


\display_dk_core
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Wyswietla informacje o pozycji dokumentu
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - Sql ref dokumentu
::   WY: 0 - nie udalo sie znalezc DK, nie wyswietlono nic
::       1 - udalo sie znalezc i wyswietlic info
::  OLD: \display_dk_core/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_dok_sql:=_b;

_result:=0;

ND.cntx_psh();
DK.cntx_psh();
DK.clear();
{? DK.seek(_dok_sql)
|| ND.use(8+$DK.N);
   exec('disp_dkm','magdok_poz');
   _result:=1
?};
DK.cntx_pop();
ND.cntx_pop();
_result


\hist_dok
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Historia dostawy dla dokumentu
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - SQL ref dokumentu
::       _c - STRING - SQL ref zlecenia
::  OLD: \hist_dok/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_dok_sql:=_b;
_zl_ref:=_c;

DK.cntx_psh();
ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl_ref)
||
   DK.use(8+_dok_sql);
   exec('hist_dok_core','magdok_partie',_cr_env,_dok_sql);
   ~~
?};
DK.cntx_pop();
ZL.cntx_pop();
~~


\hist_dok_core
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Historia dostawy dla dokumentu
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - SQL ref dokumentu
::   WY: 0 - nie udalo sie znalezc DK, nie wyswietlono nic
::       1 - udalo sie znalezc i wyswietlic info
::  OLD: \hist_dok_core/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_dok_sql:=_b;

_result:=0;

ND.cntx_psh();
DK.cntx_psh();
DK.clear();
{? DK.seek(_dok_sql)
|| ND.use(8+$DK.N);
   exec('his_dost','magdok_wspolne');
   _result:=1
?};
DK.cntx_pop();
ND.cntx_pop();
_result


\show_dok
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Pokazuje info o dokumencie
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - SQL ref dokumentu
::       _c - STRING - SQL ref zlecenia
::  OLD: \show_dok/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_dok_sql:=_b;
_zl_ref:=_c;

DK.cntx_psh();
ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl_ref)
||
   DK.use(8+_dok_sql);
   exec('show_dok_core','magdok_partie',_cr_env,_dok_sql);
   ~~
?};
DK.cntx_pop();
ZL.cntx_pop();
~~


\show_dok_core
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Pokazuje info o dokumencie
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - STRING - SQL ref dokumentu
::   WY: 0 - nie udalo sie znalezc DK, nie wyswietlono nic
::       1 - udalo sie znalezc i wyswietlic info
::  OLD: \show_dok_core/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_dok_sql:=_b;

_result:=0;
ND.cntx_psh();
DK.cntx_psh();
DK.clear();
{? DK.seek(_dok_sql)
|| ND.use(8+$DK.N);
   exec('disp_dk','magdok_wspolne',1,$DK.N);
   _result:=1
?};
DK.cntx_pop();
ND.cntx_pop();
_result


\cr_win_zpars_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli rozchodow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - 0/[1] dodawac do okna przyciski czy nie
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_zpars_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_show_btn:=1;

{? var_pres('_b')=type_of(0)
|| _show_btn:=_b
?};
_tab:=_cr_env.TAB_ZPAR;

_wer:=_tab.mk_sel(_cr_env.tit_zpar,'P',0,_cr_env.wid_zpar,1,1,,,'U');
_tab.win_fld(_wer,,'PART_SYM' ,,,-15,,,'Partia'@,0);
_tab.win_fld(_wer,,'DK_SYM' ,,,-15,,,'Dokument rozchodowy'@,0);
_tab.win_fld(_wer,,'SRC_SYM' ,,,-15,,,'Źródło'@,0);
_tab.win_fld(_wer,,'ILOSC' ,,,8,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'JM' ,,,-5,,,'jm'@,0);
_tab.win_fld(_wer,,'KTM' ,,,-15,,,'Indeks'@,0);
_tab.win_fld(_wer,,'KTM_NAZ' ,,,-22,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'ACCEPTED' ,,,-5,,,'Zaakceptowany?'@,0,,2,,"\'T\'","\'N\'");
_tab.win_sel(_wer);

:: Akcje
_formula:="exec('cr_tab_zpar_rek','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Rekord',,,,_formula);

{? _cr_env.DELETE>0
|| _formula:="exec('del_action_tmp','magdok_partie',CR_ENV)";
   _gr1:="exec('del_act_gr1_tmp','magdok_partie',CR_ENV)";
   _gr2:="exec('del_act_gr2_tmp','magdok_partie',CR_ENV)";
   _tab.win_act(_wer,,'Formuła','Usuń'@@,,,_formula,,,1,_gr1,_gr2,'U')
?};

_formula:="exec('hist_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZPAR.DK_REF,CR_ENV.TAB_ZPAR.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZPAR.DK_REF,CR_ENV.TAB_ZPAR.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż &rozchód'@@,,,_formula,,,,,,'R');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZPAR.SRC_REF,CR_ENV.TAB_ZPAR.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż źródło'@@,,,_formula,,1,,,,'P');

{? _cr_env.MODE='ZL'
|| _formula:="
      _cr_env:=CR_ENV;
      {? _choice:=FUN.choice('Wybierz zakres wyświetlanych powiązań partii z dokumentami'@,,'Powiązania partii'@,
                             'Powiązania zlecenia'@,'Wszystkie powiązania'@)
      || _cr_env.RW_PRFX:=_choice-1
      ?};
      grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART,1);
      ~~
   ";
   _tab.win_act(_wer,0,'Formuła','Zakres'@@,,,_formula,,,,,,'E');
   _tab.win_act(_wer,1,'Formuła','Zakres'@@,,,_formula,,,,,,'E')
?};

{? _show_btn
||
   _formula:="
      exec('auto_zpars','magdok_partie',CR_ENV,'FIFO');
      ~~
   ";
   _help:='Uruchamia automat FIFO'@;
   _tab.win_act(_wer,0,'Formuła','Automat &FIFO'@@,,,_formula,,1,,,,'F');
   _tab.win_act(_wer,1,'Formuła','Automat &FIFO'@@,,,_formula,,1,,,,'F');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Automat &FIFO'@@],'menu:F');
   _tab.btn_opt(_btn1,'tooltip='+_help);


   _formula:="
      exec('auto_zpars','magdok_partie',CR_ENV,'LIFO');
      ~~
   ";
   _help:='Uruchamia automat LIFO'@;
   _tab.win_act(_wer,0,'Formuła','Automat L&IFO'@@,,,_formula,,1,,,,'I');
   _tab.win_act(_wer,1,'Formuła','Automat L&IFO'@@,,,_formula,,1,,,,'I');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Automat L&IFO'@@],'menu:I');
   _tab.btn_opt(_btn1,'tooltip='+_help);

   _formula:="
      exec('accept','magdok_partie',CR_ENV,1,0);
      ~~
   ";
   _help:='Akceptuje wprowadzone zmiany'@;
   _tab.win_act(_wer,0,'Formuła','Akceptuj'@@,,,_formula,,1,,,,'A');
   _tab.win_act(_wer,1,'Formuła','Akceptuj'@@,,,_formula,,1,,,,'A');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Akceptuj'@@],'menu:A');
   _tab.btn_opt(_btn1,'tooltip='+_help);


   _formula:="
      exec('cr_anuluj','magdok_partie',CR_ENV);
      ~~
   ";
   _help:='Anuluje wprowadzone zmiany'@;
   _tab.win_act(_wer,0,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');
   _tab.win_act(_wer,1,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['A&nuluj'@@],'menu:N');
   _tab.btn_opt(_btn1,'tooltip='+_help)
?};

_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#03')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_wer


\cr_tab_zpar_rek
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Przed rekord w tabeli powiazan
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_tab_zpar_rek/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);

_result:='';

{? _tab.ACCEPTED='T'
|| _result:=Color.fnd_kol('ZPARS#03#01')
?};
_result


\del_action_tmp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Akcja usuń w oknie wertowania tabeli tymczasowej .TAB_ZPAR
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \del_action_tmp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);

_group:=0;
{? _tab.sel_size()>0
|| _group:=1
?};

_choice:=1;
:: zapytanie czy na pewno
{? _group=0
|| _choice:=FUN.ask('Czy usunąć powiązanie: %1 -> %2?'@[_tab.PART_SYM,_tab.DK_SYM])
?};

{? _group=0
|| KOMM.init(200,,'Usuwanie powiązań partii z rozchodami'@,'')
?};

{? _choice=1
|| exec('delete_tmp','magdok_partie',_cr_env,_tab.ref())
?};

:: jesli akcja nie byla grupowa to pokazuje okno z komunikatami i odswiezam okna
{? _group=0
||
   {? var_pres('TAB_PART',_cr_env)>100
   || grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART)
   ?};
   {? var_pres('TAB_RW',_cr_env)>100
   || grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW)
   ?};
   {? var_pres('TAB_ZW',_cr_env)>100
   || grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW)
   ?};
   KOMM.select(,,,,,0)
?};
~~


\delete_tmp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Kasuje ZPARS z tabeli tymczasowej .TAB_ZPAR lub .TAB_ZPAZ
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - .TAB_ZPAR.ref/.TAB_ZPAZ.ref - rekord ktory usunac
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \delete_tmp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_ref:=_b;
_tab:=cur_tab(1,1);

_result:=0;
_can_continue:=1;

_tab.cntx_psh(); _tab.clear();
{? _tab.seek(_ref)
||
   _typ:=_tab.TYP;
:: Jesli rekord tabeli tymczasowej odpowiada rzeczywistemu to usuwam rowniez rzeczywisty
   {? _tab.ZPAR_REF<>''
   ||
      _real:=exec('FindAndGet','#table',ZPARS,_tab.ZPAR_REF,,,null());
      _can_continue:=exec('delete','magdok_partie',_real)
   ?};

   {? _can_continue>0
   ||
::    Zapamietuje w buforze rekord ktory usuwam
      _buffer:=exec('buffer_zpars_cr','magdok_partie');
      _buffer.get(_tab);

      _can_continue:=_tab.del(,1);

      {? _can_continue>0
      ||
::       Jesli usunalem powiazanie to uaktualniam ilosci powiazane w tabelach .TAB_PART i .TAB_RW
         {? _typ=exec('type_rw','magdok_partie')
         || _can_continue:=exec('update_il_part','magdok_partie',_cr_env,'RW',_buffer.PART_REF,_buffer.KTM_REF,-_buffer.ILOSC,_buffer.OVER)
         |? _typ=exec('type_zw','magdok_partie')
         || _can_continue:=exec('update_il_part','magdok_partie',_cr_env,'ZW',_buffer.PART_REF,_buffer.KTM_REF,-_buffer.ILOSC)
         ?};
         {? _can_continue>0
         || {? _typ=exec('type_rw','magdok_partie')
            || _can_continue:=exec('update_il_dok','magdok_partie',_cr_env,'RW',_buffer.DK_REF,-_buffer.ILOSC)
            |? _typ=exec('type_zw','magdok_partie')
            || _can_continue:=exec('update_il_dok','magdok_partie',_cr_env,'ZW',_buffer.DK_REF,-_buffer.ILOSC)
            ?}
         ?}
      ?};
::    Wlaczam, wylaczam przyciski
      exec('init_buttons','magdok_partie',_cr_env)
   ?}
?};
{? _can_continue>0
|| _result:=1
?};
_tab.cntx_pop();
_result


\del_act_gr1_tmp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli .TAB_ZPAR
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \del_act_gr1_tmp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 powiązań. Czy usunąć je wszystkie?'@[$_tab.sel_size()])
|| _ok:=1;
   KOMM.init(200,,'Usuwanie powiązań partii z rozchodami'@,'')
?};
_ok


\del_act_gr2_tmp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli .TAB_ZPAR
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \del_act_gr2_tmp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
{? var_pres('TAB_PART',_cr_env)>100
|| grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART)
?};
{? var_pres('TAB_RW',_cr_env)>100
|| grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW)
?};
{? var_pres('TAB_ZW',_cr_env)>100
|| grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW)
?};
KOMM.select(,,,,,0);
~~


\cr_grp_make_rp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko grupowe kreatora - dla dokumentu klasy RP
::       Zawiera:
::          Partie
::          Kontrolke
::          Rozchody
::          Powiazania rozchodow z partiami (ZPARS)
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_grp_make_rp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_PART;
{? _cr_env.WIN_MAIN=''
||
   _grpbefor:="
         _cr_env:=CR_ENV;
         _cr_env.TAB_PART.first(); grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART);
         _cr_env.TAB_RW.index(_cr_env.IN_RW4);
         _cr_env.TAB_RW.first(); grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW,1);
         _cr_env.TAB_ZPAR.first(); grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR);
         ~~
      ";

   _grp:=_tab.grp_make(_cr_env.tit_m_rp,_grpbefor,_cr_env.wid_m_rp,1,1);

   _tab.grp_sel(_grp,_cr_env.TAB_PART,_cr_env.WIN_PART,,"exec('after_rfr_part_roz','magdok_partie',CR_ENV)",,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','horizontal','dolny',20);
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR,,,,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','vertical','boczny');
   _tab.grp_sel(_grp,_cr_env.TAB_RW,_cr_env.WIN_RW,,"exec('after_rfr_rw','magdok_partie',CR_ENV)",,,,,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _cr_env.WIN_MAIN:=_grp;

   ~~
?};
~~


\after_rfr_part_roz
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Po odswiezeniu okna partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \after_rfr_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);
{? _tab.ZL_REF<>''
||
   {? var_pres('TAB_RW',_cr_env)>100
   ||
::    Ustawiam header w oknie z dokumentami RW
      _cr_env.TAB_RW.hdr_sel();

      _top_sym:=exec('FindAndGet','#table',ZL,_tab.ZL_REF,,"SYM",'');
      _cr_env.TAB_RW.hdr_sel(': '+_top_sym);

::    Prefiksuje okno z dokumentami
      _cr_env.TAB_RW.index(_cr_env.IN_RW5);
      _cr_env.TAB_RW.prefix(_tab.ZL_REF,);

      grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW,1);
      ~~
   ?};

   {? var_pres('TAB_ZPAR',_cr_env)>100
   ||
::    Prefiksuje okno z powiązaniami RW
      {? _cr_env.RW_PRFX=0
      || _cr_env.TAB_ZPAR.index(_cr_env.IN_ZPAR4);
         _cr_env.TAB_ZPAR.prefix(_tab.ZPAR_REF,);
         _cr_env.TAB_ZPAR.first()
      |? _cr_env.RW_PRFX=1
      || _cr_env.TAB_ZPAR.index(_cr_env.IN_ZPAR5);
         _cr_env.TAB_ZPAR.prefix(_tab.ZL_REF,);
         _cr_env.TAB_ZPAR.first()
      || _cr_env.TAB_ZPAR.index(_cr_env.IN_ZPAR5);
         _cr_env.TAB_ZPAR.prefix();
         _cr_env.TAB_ZPAR.first()
      ?};

      grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR,1);
      ~~
   ?};

:: Ustawiam w kontrolce symbol partii
::   exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_part,_tab.PART_SYM);

   _sel_size:=_tab.sel_size();
   _cr_env.SEL_IL1:=_sel_size;
   {? _sel_size>0
   ||
::    ZAZNACZENIE GRUPOWE

::    Wyszarzam przycisk 'Powiaz'
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,0);
      ~~
   ||
::    ZAZNACZENIE POJEDYNCZE
::    Odszarzam przycisk 'Powiaz'
::      {? _cr_env.TIE_MODE='RW'
::      ||
::         {? var_pres('TAB_RW',_cr_env)>100 & _cr_env.TAB_RW.size()>0
::         || exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,1)
::         ?}
::      |? _cr_env.TIE_MODE='ZW'
::      ||
::         {? var_pres('TAB_ZW',_cr_env)>100 & _cr_env.TAB_ZW.size()>0
::         || exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,1)
::         ?}
::      ?};
      ~~
   ?};
   ~~
||
:: Jesli brak rekordow w .TAB_PART to wyszarzam przycisk 'Powiaz', 'FIFO', 'LIFO'
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,0);
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_fifo,0);
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_lifo,0);

:: Jesli nie ma rekordow to zeruje liczbe zaznaczonych rekordow
   _cr_env.SEL_IL1:=0;
   ~~
?};
~~


\after_rfr_part_zwr
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Po odswiezeniu okna partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \after_rfr_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);
{? _tab.ZL_REF<>''
||
   {? var_pres('TAB_ZW',_cr_env)>100
   ||
::    Ustawiam header w oknie z dokumentami ZW
      _cr_env.TAB_ZW.hdr_sel();

      _top_sym:=exec('FindAndGet','#table',ZL,_tab.ZL_REF,,"SYM",'');
      _cr_env.TAB_ZW.hdr_sel(': '+_top_sym);

::    Prefiksuje okno z dokumentami
      _cr_env.TAB_ZW.index(_cr_env.IN_ZW5);
      _cr_env.TAB_ZW.prefix(_tab.ZL_REF,);

      grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW,1);
      ~~
   ?};

   {? var_pres('TAB_ZPAZ',_cr_env)>100
   ||
::    Prefiksuje okno z powiązaniami RW
      {? _cr_env.ZW_PRFX=0
      || _cr_env.TAB_ZPAZ.index(_cr_env.IN_ZPAZ4);
      _cr_env.TAB_ZPAZ.prefix(_tab.ZPAR_REF,)
      |? _cr_env.ZW_PRFX=1
      || _cr_env.TAB_ZPAZ.index(_cr_env.IN_ZPAZ5);
         _cr_env.TAB_ZPAZ.prefix(_tab.ZL_REF,)
      || _cr_env.TAB_ZPAZ.index(_cr_env.IN_ZPAZ5);
         _cr_env.TAB_ZPAZ.prefix()
      ?};

      grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ,1);
      ~~
   ?};

:: Ustawiam w kontrolce symbol partii
::   exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_part,_tab.PART_SYM);

   _sel_size:=_tab.sel_size();
   _cr_env.SEL_IL1:=_sel_size;
   {? _sel_size>0
   ||
::    ZAZNACZENIE GRUPOWE

::    Wyszarzam przycisk 'Powiaz'
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,0);
      ~~
   ||
::    ZAZNACZENIE POJEDYNCZE
::    Odszarzam przycisk 'Powiaz'
::      {? _cr_env.TIE_MODE='RW'
::      ||
::         {? var_pres('TAB_RW',_cr_env)>100 & _cr_env.TAB_RW.size()>0
::         || exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,1)
::         ?}
::      |? _cr_env.TIE_MODE='ZW'
::      ||
::         {? var_pres('TAB_ZW',_cr_env)>100 & _cr_env.TAB_ZW.size()>0
::         || exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,1)
::         ?}
::      ?};
      ~~
   ?};
   ~~
||
:: Jesli brak rekordow w .TAB_PART to wyszarzam przycisk 'Powiaz', 'FIFO', 'LIFO'
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,0);
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_fifo,0);
::   exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_lifo,0);

:: Jesli nie ma rekordow to zeruje liczbe zaznaczonych rekordow
   _cr_env.SEL_IL1:=0;
   ~~
?};
~~


\after_rfr_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Po odswiezeniu okna z rozchodami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \after_rfr_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=cur_tab(1,1);

_can_continue:=0;

_win_part:='';
:: Wykonuje ta obsluge tylko dla okna ktore zgodne jest z aktualnie ustawionym trybem wiazania
{? _cr_env.TIE_MODE='RW' & var_pres('TAB_RW',_cr_env)>100 & _tab=_cr_env.TAB_RW
|| _can_continue:=1;
   _win_part:=_cr_env.WIN_PART
?};
{? _cr_env.TIE_MODE='ZW' & var_pres('TAB_ZW',_cr_env)>100 & _tab=_cr_env.TAB_ZW
|| _can_continue:=1;
   _win_part:=_cr_env.WIN_PART2
?};
{? _can_continue>0
||
   {? _tab.ref<>null()
   ||
::    Jesli sa rekordy w .TAB_RW to odszarzam przyciski 'Powiaz', 'LIFO, 'FIFO'
::      {? _cr_env.SEL_IL1=0
::      || exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,1)
::      ?};
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_fifo,1);
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_lifo,1);

::    Ustawiam kontrolce symbol dokumentu
::      exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rw,_tab.SYMBOL);
      _sel_size:=_tab.sel_size();
      {? var_pres('TAB_RW',_cr_env)>100 & _tab=_cr_env.TAB_RW
      || _cr_env.SEL_IL2:=_sel_size
      |? var_pres('TAB_ZW',_cr_env)>100 & _tab=_cr_env.TAB_ZW
      || _cr_env.SEL_IL3:=_sel_size
      ?};
      {? _sel_size>0
      ||
::       ZAZNACZENIE GRUPOWE

::       Ustawiam kontrolce ilosc zerowa w polu z iloscia
         _dokl:=ST.DOKL;
         _str_il:=form(0,,_dokl,'9.');
::         exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_ile,_str_il);

::       Pojawiam ikone sygnalizujaca RW grupowe
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rwgr,1);

::       Znikam ikone sygnalizujaca RW pojedyncze
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rw,0);

::       Znikam jednostke miary - dla grupowego nie ma sensu
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_jm,0);

::       Wyswietlam ilosc zaznaczonych rekordow
::         _val:='Zaznaczonych: '+$_sel_size;
::         exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rw,_val);

::       Zapamietuje zaznaczone rekordy
         {? var_pres('TAB_RW',_cr_env)>100 & _tab=_cr_env.TAB_RW
         ||
            {? var_pres('SEL_RW',_cr_env)>100
            || obj_del(_cr_env.SEL_RW)
            ?};
            _cr_env.SEL_RW:=_tab.sel_aget()
         |? var_pres('TAB_ZW',_cr_env)>100 & _tab=_cr_env.TAB_ZW
         ||
            {? var_pres('SEL_ZW',_cr_env)>100
            || obj_del(_cr_env.SEL_ZW)
            ?};
            _cr_env.SEL_ZW:=_tab.sel_aget()
         ?};
         ~~
      ||
::       ZAZNACZENIE POJEDYNCZE

::       Ustawiam kontrolce ilosc w polu z iloscia
         _il:=exec('sur_il4part','magdok_partie',_cr_env,_tab.SQL_REF,_cr_env.TAB_PART.ZPAR_REF,1);
         _dokl:=ST.DOKL;
::         _dokl:=exec('FindAndGet','#table',M,_tab.KTM_REF,,"DOKL",0);
         _str_il:=form(_il,,_dokl,'9.');
::         exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_ile,_str_il);

::       Pojawiam ikone sygnalizujaca RW pojedyncze
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rw,1);

::       Znikam ikone sygnalizujaca RW grupowe
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rwgr,0);

::       Pojawiam jednostke miary
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_jm,1);

::       Usuwam ilosc zaznaczonych rekordow
::         exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rwgr,'');

::       Usuwam zaznaczone rekordy
         {? var_pres('TAB_RW',_cr_env)>100 & _tab=_cr_env.TAB_RW
         ||
            {? var_pres('SEL_RW',_cr_env)>100
            || obj_del(_cr_env.SEL_RW)
            ?}
         |? var_pres('TAB_ZW',_cr_env)>100 & _tab=_cr_env.TAB_ZW
         ||
            {? var_pres('SEL_ZW',_cr_env)>100
            || obj_del(_cr_env.SEL_ZW)
            ?}
         ?};
         ~~
      ?};

::    Ustawiam kontrolce miary w polu z jednostka
::      _jm:=_tab.JM;
::      exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_jm,_jm);
      ~~
   ||
::    Jesli brak rekordow w .TAB_RW to wyszarzam przycisk 'Powiaz', 'FIFO', 'LIFO'
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_tie,0);
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_fifo,0);
::      exec('set_enabled','#desktop','',_cr_env.ctr_id,_cr_env.ctr_lifo,0);

::    Jesli nie ma rekordow to zeruje liczbe zaznaczonych rekordow
      {? var_pres('TAB_RW',_cr_env)>100& _tab=_cr_env.TAB_RW
      || _cr_env.SEL_IL2:=0
      |? var_pres('TAB_ZW',_cr_env)>100 & _tab=_cr_env.TAB_ZW
      || _cr_env.SEL_IL3:=0
      ?};
      ~~
   ?};

   {? grp_empty(cur_tab(1,1),cur_win(1,1))=1
   || _can_continue:=0;
      _cr_env.TAB_PART.actions_grayed(_win_part,'P:P')
   || _cr_env.TAB_PART.actions_grayed(_win_part,'')
   ?};
   grp_disp(_cr_env.TAB_PART,_win_part)
?};
~~


\cr_win_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli zwrotow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_ZW;

_wer:=_tab.mk_sel(_cr_env.tit_zw,'P',0,_cr_env.wid_rw,1,1,,,'U');
_tab.win_fld(_wer,,'SYMBOL' ,,,-15,,,'Dokument zwrotu'@,0);
_tab.win_fld(_wer,,'SRC_SYM' ,,,-15,,,'Źródło'@,0);
_tab.win_fld(_wer,,'ILOSC' ,,,-10,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'IL_PART' ,,,-10,ST.DOKL,,'Ilość rozl.'@,0);
_tab.win_fld(_wer,,'JM' ,,,-5,,,'jm'@,0);
_tab.win_fld(_wer,,'KTM' ,,,-15,,,'Indeks'@,0);
_tab.win_fld(_wer,,'KTM_NAZ' ,,,-20,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'ZL' ,,,-10,,,'Zlecenie'@,0);

_formula:="exec('cr_tab_rw_rek','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Rekord',,,,_formula);

_formula:="exec('display_dk','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Wyświetl',,,,_formula);

_formula:="
   exec('create_zpar_act','magdok_partie',CR_ENV);
   ~~
";
_help:='Tworzy powiązanie między zaznaczoną partią i zaznaczoną pozycją dokumentu magazynowego'@;
_tab.win_act(_wer,0,'Formuła','Powiąż'@@,,,_formula,,1,,,,'P');

_formula:="exec('hist_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZW.SQL_REF,CR_ENV.TAB_ZW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZW.SQL_REF,CR_ENV.TAB_ZW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż &rozchód'@@,,,_formula,,,,,,'R');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZW.SRC_REF,CR_ENV.TAB_ZW.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż źró&dło'@@,,,_formula,,,,,,'D');

_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#02')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_tab.win_sel(_wer);
_wer


\cr_win_zpars_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli zwrotow
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - 0/[1] dodawac do okna przyciski czy nie
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_zpars_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_show_btn:=1;

{? var_pres('_b')=type_of(0)
|| _show_btn:=_b
?};
_tab:=_cr_env.TAB_ZPAZ;

_wer:=_tab.mk_sel(_cr_env.tit_zpaz,'P',0,_cr_env.wid_zpaz,1,1,,,'U');
_tab.win_fld(_wer,,'PART_SYM' ,,,-15,,,'Partia'@,0);
_tab.win_fld(_wer,,'DK_SYM' ,,,-15,,,'Dokument zwrotu'@,0);
_tab.win_fld(_wer,,'SRC_SYM' ,,,-15,,,'Źródło'@,0);
_tab.win_fld(_wer,,'ILOSC' ,,,8,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'JM' ,,,-5,,,'jm'@,0);
_tab.win_fld(_wer,,'KTM' ,,,-15,,,'Indeks'@,0);
_tab.win_fld(_wer,,'KTM_NAZ' ,,,-22,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'ACCEPTED' ,,,-5,,,'Zaakceptowany?'@,0,,2,,"\'T\'","\'N\'");
_tab.win_sel(_wer);

:: Akcje
_formula:="exec('cr_tab_zpar_rek','magdok_partie',CR_ENV)";
_tab.win_act(_wer,,'Rekord',,,,_formula);

{? _cr_env.DELETE>0
|| _formula:="exec('del_action_tmp','magdok_partie',CR_ENV)";
   _gr1:="exec('del_act_gr1_tmp','magdok_partie',CR_ENV)";
   _gr2:="exec('del_act_gr2_tmp','magdok_partie',CR_ENV)";
   _tab.win_act(_wer,,'Formuła','Usuń'@@,,,_formula,,,1,_gr1,_gr2,'U')
?};

_formula:="exec('hist_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZPAZ.DK_REF,CR_ENV.TAB_ZPAZ.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Historia dostawy'@@,,,_formula,,,,,,'H');

_formula:="exec('show_dok','magdok_partie',CR_ENV,CR_ENV.TAB_ZPAZ.DK_REF,CR_ENV.TAB_ZPAZ.ZL_TOP)";
_tab.win_act(_wer,,'Formuła','Pokaż &zwrot'@@,,,_formula,,,,,,'Z');

{? _cr_env.MODE='ZL'
|| _formula:="
      _cr_env:=CR_ENV;
      {? _choice:=FUN.choice('Wybierz zakres wyświetlanych powiązań partii z dokumentami'@,,'Powiązania partii'@,
                             'Powiązania zlecenia'@,'Wszystkie powiązania'@)
      || _cr_env.ZW_PRFX:=_choice-1
      ?};
      grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART,1);
      ~~
   ";
   _tab.win_act(_wer,0,'Formuła','Zakres'@@,,,_formula,,,,,,'E');
   _tab.win_act(_wer,1,'Formuła','Zakres'@@,,,_formula,,,,,,'E')
?};


{? _show_btn>0
||
   _formula:="
      exec('auto_zpars','magdok_partie',CR_ENV,'FIFO');
      ~~
   ";
   _help:='Uruchamia automat FIFO'@;
   _tab.win_act(_wer,0,'Formuła','Automat &FIFO'@@,,,_formula,,1,,,,'F');
   _tab.win_act(_wer,1,'Formuła','Automat &FIFO'@@,,,_formula,,1,,,,'F');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Automat &FIFO'@@],'menu:F');
   _tab.btn_opt(_btn1,'tooltip='+_help);


   _formula:="
      exec('auto_zpars','magdok_partie',CR_ENV,'LIFO');
      ~~
   ";
   _help:='Uruchamia automat LIFO'@;
   _tab.win_act(_wer,0,'Formuła','Automat L&IFO'@@,,,_formula,,1,,,,'I');
   _tab.win_act(_wer,1,'Formuła','Automat L&IFO'@@,,,_formula,,1,,,,'I');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Automat L&IFO'@@],'menu:I');
   _tab.btn_opt(_btn1,'tooltip='+_help);

   _formula:="
      exec('accept','magdok_partie',CR_ENV,1,0);
      ~~
   ";
   _help:='Akceptuje wprowadzone zmiany'@;
   _tab.win_act(_wer,0,'Formuła','Akceptuj'@@,,,_formula,,1,,,,'A');
   _tab.win_act(_wer,1,'Formuła','Akceptuj'@@,,,_formula,,1,,,,'A');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Akceptuj'@@],'menu:A');
   _tab.btn_opt(_btn1,'tooltip='+_help);


   _formula:="
      exec('cr_anuluj','magdok_partie',CR_ENV);
      ~~
   ";
   _help:='Anuluje wprowadzone zmiany'@;
   _tab.win_act(_wer,0,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');
   _tab.win_act(_wer,1,'Formuła','A&nuluj'@@,,,_formula,,,,,,'N');
   _btn1:=_tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['A&nuluj'@@],'menu:N');
   _tab.btn_opt(_btn1,'tooltip='+_help)
?};

_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#03')";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_wer


\cr_win_zlgd
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Tworzy okienko wertowania dla tabeli robocizny
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - tryb tworzenia okna: [0] - szerokie, 1 - waskie
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_zlgd/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_mode:=0;
{? var_pres('_b')=type_of(0)
|| _mode:=_b
?};

_tab:=_cr_env.TAB_ZLGD;

_title:='Robocizna do partii'@;

_wer:=_tab.mk_sel(_title,'P',0,_cr_env.wid_zlgd,1,1,,1);
{? _mode=0
|| _tab.win_fld(_wer,,'SYMBOL' ,,,40,,,'Symbol'@,0);
   _tab.win_fld(_wer,,'NAZWA' ,,,40,,,'Nazwa'@,0);
   _tab.win_fld(_wer,,'KTM' ,,,30,,,'Indeks'@,0);
   _tab.win_fld(_wer,,'KTM_NAZ' ,,,50;30,,,'Nazwa materiału'@,0);
   _tab.win_fld(_wer,,'IL_WYK' ,,,-10,ST.DOKL,,'Wykonana ilość'@,0);
   _tab.win_fld(_wer,,'TI_WYK' ,,,-10,ST.DOKL,,'Wykonany czas'@,0);
   _tab.win_fld(_wer,,'IL_BRAK' ,,,10,ST.DOKL,,'Braki'@,0)
|? _mode=1
|| _tab.win_fld(_wer,,'SYMBOL' ,,,10,,,'Symbol'@,0);
   _tab.win_fld(_wer,,'NAZWA' ,,,10,,,'Nazwa'@,0);
   _tab.win_fld(_wer,,'ZL_SYM' ,,,10,,,'Zlecenie'@,0);
   _tab.win_fld(_wer,,'KTM' ,,,10,,,'Indeks'@,0);
   _tab.win_fld(_wer,,'KTM_NAZ' ,,,-15,,,'Nazwa materiału'@,0);
   _tab.win_fld(_wer,,'IL_WYK' ,,,-10,ST.DOKL,,'Wykonana ilość'@,0);
   _tab.win_fld(_wer,,'TI_WYK' ,,,-10,ST.DOKL,,'Wykonany czas'@,0);
   _tab.win_fld(_wer,,'IL_BRAK' ,,,10,ST.DOKL,,'Braki'@,0)
?};

_tab.win_act(_wer,,'Rekord',,,,"exec('cr_tab_zlgd_rek','magdok_partie',CR_ENV)");

_formula:=" _cr_env:=CR_ENV;
            _result:='';

            {? _cr_env.TAB_ZLGD.TYP='P'
            ||
::             Ikona partii
               _result:='xwin16.png:188'
            |? _cr_env.TAB_ZLGD.TYP='Z'
            ||
::             Ikona zlecenia
               _result:='xwin16.png:190'
            |? _cr_env.TAB_ZLGD.TYP='R'
            ||
::             Ikona robocizny
               _result:='xwin16.png:31'
            |? _cr_env.TAB_ZLGD.TYP='B'
            ||
::             Ikona pracownika brygady
               _result:='xwin16.png:100'
            ?};
            _result";
_tab.win_fml(_wer,,'SYMBOL',,'ICON_BEFORE',_formula);

_tab.win_act(_wer,,'Formuła','Zwiń/roz&wiń'@@,,'Zwiń/rozwiń wszystkie rekordy'@,
            "exec('zwrw_all','#tree',cur_tab(1,1),'PARENT')");
_tab.win_act(_wer,,'Kolejność');

_formula:="exec('legenda','color','ZPARS#10','$'+'Dane zarejestrowane do innej partii przed podziałem'@)";
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula,,,,,,'L');

_cr_env.TAB_ZLGD.win_sel(_wer);
_wer


\cr_tab_zlgd_rek
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Przed rekord w tabeli robocizny
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_tab_zlgd_rek/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_result:='';
_tab:=cur_tab(1,1);
{? _tab.MAIN='N' & 1+_tab.ZPAR_NAD<>'<'
|| _result:=exec('findtmp','#color')
?};
_result


\cr_grp_make_zl
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko grupowe kreatora - dla zlecenia
::       Zawiera:
::          Partie
::          Kontrolke
::          Rozchody
::          Zwroty
::          Powiazania rozchodow z partiami (ZPARS)
::          Powiazania zwrotow z partiami (ZPARS)
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_grp_make_zl/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_PART;
{? _cr_env.WIN_MAIN=''
||
   _grpbefor:="
         _cr_env:=CR_ENV;
         _cr_env.TAB_PART.first(); grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART);
         _cr_env.TAB_RW.index(_cr_env.IN_RW4);
         _cr_env.TAB_RW.first(); grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW);
         _cr_env.TAB_ZW.index(_cr_env.IN_ZW4);
         _cr_env.TAB_ZW.first(); grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW);
         _cr_env.TAB_ZPAR.first(); grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR);
         _cr_env.TAB_ZPAZ.first(); grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ);

         _opt:=exec('set_options_a','#desktop');
         _opt.FOCUS_RET:=1;

::         _tab1:=exec('elements_table1','magdok_partie',_cr_env);
::         exec('load','#desktop',_cr_env.ctr_id,CR_ENV.ctr_id+'.dsk',_opt,,,,_tab1,1);

::         _tab2:=exec('elements_table2','magdok_partie',_cr_env);
::         exec('load','#desktop',_cr_env.ctr_id2,CR_ENV.ctr_id2+'.dsk',_opt,,,,_tab2,1);

::       Inicjuje przyciski
::         exec('init_buttons','magdok_partie',_cr_env);

::       Znikam ikone sygnalizujaca RW grupowe zaznaczenie
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_rwgr,0);

::       Pojawiam przyciski do zmiany trybu wiazania
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_morw,1);
::         exec('set_visible','#desktop','',_cr_env.ctr_id,_cr_env.ctr_mozw,1);

::       Ustawiam status przyciskow wyboru trybu wiazania
::         {? _cr_env.TIE_MODE='RW'
::         || exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_morw,'true')
::         |? _cr_env.TIE_MODE='ZW'
::         || exec('set_value','#desktop','',_cr_env.ctr_id,_cr_env.ctr_mozw,'true')
::         ?};

         grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW,1);
::         grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW,1);
         ~~
      ";

   _grp:=_tab.grp_make(_cr_env.tit_m_zl,_grpbefor,_cr_env.wid_m_zl,1,1,,"~~");

   _before:="
      _env:=CR_ENV;
      {? _a
      || {? _env.CURRENT_TAB<>'Rozchody'
         || _env.CURRENT_TAB:='Rozchody';
            exec('set_tie_mode_rw','magdok_partie',_env);
            _env.TAB_PART.first();
            tab_hide(2,1,'dolny');
            tab_show(1,'dolny');
            tab_sel(1,'dolny')
         ?}
      ?};
      ~~
   ";
   _after:="
      _env:=CR_ENV;
      ~~
   ";

   _tab.grp_sel(_grp,_cr_env.TAB_PART,_cr_env.WIN_PART,'Rozchody'@,"exec('after_rfr_part_roz','magdok_partie',CR_ENV)",,,,_before,_after,,,'maximized_with_title');

   _tab.tab_splt(_grp,,'vertical','bocznyRW');
   _tab.grp_sel(_grp,_cr_env.TAB_RW,_cr_env.WIN_RW,,"exec('after_rfr_rw','magdok_partie',CR_ENV)",,,,"~~","~~",,,'maximized_with_title');

   _before:="
      _env:=CR_ENV;
      {? _a
      || {? _env.CURRENT_TAB<>'Zwroty'
         || _env.CURRENT_TAB:='Zwroty';
            exec('set_tie_mode_zw','magdok_partie',_env);
            _env.TAB_PART.first();
            tab_hide(1,1,'dolny');
            tab_show(2,'dolny');
            tab_sel(2,'dolny')
         ?}
      ?};
      ~~
   ";
   _after:="
      _env:=CR_ENV;
      ~~
   ";
   _tab.grp_sel(_grp,_cr_env.TAB_PART,_cr_env.WIN_PART2,'Zwroty'@,"exec('after_rfr_part_zwr','magdok_partie',CR_ENV)",,,,_before,_after,,,'maximized_with_title');
   _tab.tab_splt(_grp,,'vertical','bocznyZW');
   _tab.grp_sel(_grp,_cr_env.TAB_ZW,_cr_env.WIN_ZW,,"exec('after_rfr_rw','magdok_partie',CR_ENV)",,,,"~~","~~",,,'maximized_with_title');


   _tab.grp_splt(_grp,'panel0','horizontal','dolny',20);
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR,'Powiązania partii z rozchodami'@,,,,,,,,,'maximized');
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ,'Powiązania partii ze zwrotami'@,,,,,,,,,'maximized');

   _tab.grp_sel(_grp,_cr_env.TAB_ZLGD,_cr_env.WIN_ZLGD,'Powiązania partii z robocizną'@,,,,,,,,,'maximized');

::   _tab.grp_splt(_grp,'panel0','vertical','boczny');
::   _cr_env.WIN_CTR:=exec('create','#desktop',_tab,_cr_env.ctr_id,_grp,10,50);




::   _tab.grp_splt(_grp,'bocznyRW','horizontal','bocznyZW',10);
::
::   _tab.grp_splt(_grp,'dolny','horizontal','dolnyPRZ',20);
::   _cr_env.WIN_CTR2:=exec('create','#desktop',_tab,_cr_env.ctr_id2,_grp,3,50);

   _tab.win_sel(_grp);
   _cr_env.WIN_MAIN:=_grp;

   ~~
?};
~~


\cr_grp_make_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko grupowe kreatora - dla dokumentu klasy ZW
::       Zawiera:
::          Partie
::          Kontrolke
::          Zwroty
::          Powiazania zwrotow z partiami (ZPARS)
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_grp_make_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_PART;
{? _cr_env.WIN_MAIN=''
||
   _grpbefor:="
         _cr_env:=CR_ENV;
         _cr_env.TAB_PART.first(); grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART2);
         _cr_env.TAB_ZW.index(_cr_env.IN_ZW4);
         _cr_env.TAB_ZW.first(); grp_disp(_cr_env.TAB_ZW,_cr_env.WIN_ZW,1);
         _cr_env.TAB_ZPAZ.first(); grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ);
         ~~
      ";

   _grp:=_tab.grp_make(_cr_env.tit_m_zw,_grpbefor,_cr_env.wid_m_zw,1,1);

   _tab.grp_sel(_grp,_cr_env.TAB_PART,_cr_env.WIN_PART2,,"exec('after_rfr_part_zwr','magdok_partie',CR_ENV)",,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','horizontal','dolny',20);
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ,,,,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','vertical','boczny');
   _tab.grp_sel(_grp,_cr_env.TAB_ZW,_cr_env.WIN_ZW,,"exec('after_rfr_rw','magdok_partie',CR_ENV)",,,,,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _cr_env.WIN_MAIN:=_grp;

   ~~
?};
~~


\cr_tab_comp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy tabele tymczasowa wywietlajaca surowce z ktorych sklada sie partia
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::  OLD: \cr_tab_comp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 2
               ,'SYMBOL'   ,'STRING[50]'  ,'Symbol'
               ,'NAZWA'    ,'STRING[100]'  ,'Symbol'
               ,'ILOSC'    ,'REAL'        ,'Ilość'
               ,'IL_RW'    ,'REAL'        ,'Ilość surowca powiazana z dok. RW'
               ,'IL_ZW'    ,'REAL'        ,'Ilość surowca powiazana z dok. RW'
               ,'IL_SUM'   ,'REAL'        ,'Ilość surowca w sumie RW-ZW'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref SQL materialu'
               );
_cr_env.IN_COMP1:=_tab.ndx_tmp(,,'SYMBOL',,,'NAZWA',,);
_cr_env.IN_COMP2:=_tab.ndx_tmp(,,'KTM_REF',,);
_tab


\cr_load_comp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Laduje dane do widoku skladowych partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - ZPARN.ref() - partia dla ktorej ladujemy ZPARS
::  OLD: \cr_load_comp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_zparn:=_b;

ZL.cntx_psh();
ZPARN.cntx_psh(); ZPARN.clear();
{? ZPARN.seek(_zparn)
||
   _args_zp:=exec('load_zpars_a','magdok_partie');
   _args_zp.cr_env:=_cr_env;
   _args_zp.ZPARN:=ZPARN.ref();
   _args_zp.COMP:='T';
:: Podczytanie zlecenia
   ZPARN.ZL();

:: Zbieram dla zlecenia ZPARS z masek od powolania zlecenia
   _name:=5+ZPARS.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));

   _rule:="exec('load_zpars','magdok_partie',_b)";
   exec('for_each_mask','#table',ZPARS,_rule,_msk_start,,_args_zp);

:: Ladujemy robocizne
   _args_rob:=exec('load_zpars_a','magdok_partie');
   _args_rob.cr_env:=_cr_env;
   _args_rob.ZPARN:=ZPARN.ref();

:: Zbieram dla zlecenia ZLGD z masek od powołania zlecenia
   _name:=5+ZLGD.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?};

   _rule:="exec('load_zlgd','magdok_partie',_b)";
   exec('for_each_mask','#table',ZLGD,_rule,_msk_start,_msk_end,_args_rob);

:: Ładujemy dokumenty raportujące
   _args_zrap:=exec('load_dk_a','magdok_partie');
   _args_zrap.cr_env:=_cr_env;
   _args_zrap.MODE:='RP';
   _args_zrap.ZPARN:=ZPARN.ref();

:: Zbieram dla zlecenia DK z masek od powołania zlecenia
   _name:=5+DK.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _msk_end:=_name+ZL.ODDZ+(2-$(ZL.DO~1))
   || _msk_end:=_name+ZL.ODDZ+(2-$(date()~1))
   ?};

   _rule:="exec('load_dk','magdok_partie',_b)";
   exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args_zrap);
   ~~
?};
ZPARN.cntx_pop();
ZL.cntx_pop();
~~


\cr_win_comp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko wertowania dla tabeli skladnikow partii
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: STRING - uchwyt do okna
::  OLD: \cr_win_comp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_COMP;

_title:='Surowce z których składa się partia'@;

_wer:=_tab.mk_sel(_title,'P',0,_cr_env.wid_comp,1,1,,,'U');
_tab.win_fld(_wer,,'SYMBOL' ,,,20,,,'Indeks materiałowy'@,0);
_tab.win_fld(_wer,,'NAZWA'  ,,,25,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'IL_RW' ,,,10,ST.DOKL,,'Ilość [%1]'@['RW'],0);
_tab.win_fld(_wer,,'IL_ZW' ,,,10,ST.DOKL,,'Ilość [%1]'@['ZW'],0);
_tab.win_fld(_wer,,'IL_SUM',,,10,ST.DOKL,,'∑',0);
_tab.win_fld(_wer,,'ZL' ,,,20,,,'Zlecenie'@,0);
::_tab.win_fld(_wer,,'OPIS' ,,,10,,,'Opis'@,0);

_tab.win_act(_wer,,'Kolejność');

_tab.win_sel(_wer);
_wer


\cr_grp_make_co
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Tworzy okienko grupowe pokazujace z czego zostala zrobiona dana partia oraz jak była raportowana
::       Zawiera:
::          Podsumowanie surowców
::          Powiazania z rozchodami
::          Powiazania ze zwrotami
::          Zarejestrowane dokumenty raportujące
::          Zarejestrowana robocizna
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::  OLD: \cr_grp_make_co/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_COMP;
{? _cr_env.WIN_MAIN=''
||
   _grpbefor:="
      _cr_env:=CR_ENV;
      grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR,1);
      grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ,1);
      grp_disp(_cr_env.TAB_ZRAP,_cr_env.WIN_ZRAP,1);
      grp_disp(_cr_env.TAB_ZLGD,_cr_env.WIN_ZLGD,1);
      ~~
   ";

   _grp:=_tab.grp_make(_cr_env.tit_m_co,_grpbefor,_cr_env.wid_m_co,1,1);

   _tab.grp_sel(_grp,_cr_env.TAB_COMP,_cr_env.WIN_COMP,,"",,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','vertical','prawy');
   _tab.grp_sel(_grp,_cr_env.TAB_ZRAP,_cr_env.WIN_ZRAP,,,,,,,,,,'maximized_with_title');

   _tab.grp_splt(_grp,'panel0','horizontal','dolnyl',20);
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR,'Rozchody'@,,,,,,,,,'maximized_with_title');
   _tab.grp_sel(_grp,_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ,'Zwroty'@,"",,,,,,,,'maximized_with_title');
   _tab.grp_sel(_grp,_cr_env.TAB_ZLGD,_cr_env.WIN_ZLGD,'Robocizna'@,,,,,,,,,'maximized_with_title');

   _tab.win_sel(_grp);
   _cr_env.WIN_MAIN:=_grp;
   ~~
?};
~~


\accept
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Akceptuje kreatora zparsow - sprawdza czy wszystkie partie zostaly prawidlowo powiazane z rozchodami,
::       niezaakceptowane rekordy z tymczasowej tabeli .TAB_ZPAR staja sie prawdziwymi rekordami w tabeli ZPARS
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - [1] - po udanej akceptacji robic sel_exit
::                         0 - po udanej akceptacji nie robic sel_exit (bo np. nie ma okna)
::       [_c] - INTEGER -  1 - akceptowac mimo niezgodnosci
::                        [0] - jesli sa niezgodnosci to nie akceptowac
::       [_d] - INTEGER - 0/[1] - inicjowac i wyswietlac KOMM
::       [_e] - INTEGER - [1]/2 - sposób agregacji komunikatów: 1 - płaski
::                                                              2 - Błąd -> zlecenie -> komunikat
::       [_f] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \accept/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_sel_exit:=1;
{? var_pres('_b')=type_of(0)
|| _sel_exit:=_b
?};
_force:=0;
{? var_pres('_c')=type_of(0)
|| _force:=_c
?};
_komm:=1;
{? var_pres('_d')=type_of(0)
|| _komm:=_d
?};
_kom_agr:=1;
{? var_pres('_e')=type_of(0)
|| _kom_agr:=_e
?};

_dialog:=1;
{? var_pres('_f')=type_of(0)
|| _dialog:=_f
?};

{? _force>0
|| _kom_agr:=0
?};

_result:=0;
_can_continue:=1;

{? _komm>0
||
:: deklaracje obiektow dla komentarzy
   {? var_pres('KOMM2')<100
   || exec('JCQ_decl','#message');
      KOMM2:=obj_new(@.CLASS.JCQ)
   ?};
   KOMM2.init(200,,'Kontrola rozliczenia partii'@,'')
|| {? var_pres('KOMM2')>100
   || obj_del(KOMM2)
   ?};
   KOMM2:=~~
?};

_chk_part:=1;
{? _cr_env.CHK_MODE=1 | _cr_env.CHK_MODE=2
||
:: 1. Sprawdzam czy partie zostaly poprawnie rozliczone
   _chk_part:=exec('chk_part','magdok_partie',_cr_env,_kom_agr,KOMM2)
?};
:: 2. Sprawdzam czy rozchody zostaly poprawnie przypisane partiom
_chk_dk:=1;
{? (_cr_env.CHK_MODE=2 | _cr_env.CHK_MODE=3) & var_pres('TAB_RW',_cr_env)>100
|| _chk_dk:=exec('chk_rw','magdok_partie',_cr_env,_cr_env.TAB_RW,_cr_env.IN_RW2,_kom_agr,KOMM2)
?};
{? _chk_dk>0
||
   {? (_cr_env.CHK_MODE=2 | _cr_env.CHK_MODE=3) & var_pres('TAB_ZW',_cr_env)>100
   || _chk_dk:=exec('chk_rw','magdok_partie',_cr_env,_cr_env.TAB_ZW,_cr_env.IN_ZW2,_kom_agr,KOMM2)
   ?}
?};
{? _komm>0 & var_pres('KOMM2')>0
|| KOMM2.select()
?};

{? _chk_part<=0 | _chk_dk<=0
|| _can_continue:=0;
   {? _dialog>0
   || _can_continue:=FUN.ask('Podczas akceptacji zostały wykryte problemy. Kontynuować?'@)
   ?}
?};

ZPARS.cntx_psh();

{? _can_continue>0
|| {? var_pres('TAB_ZPAR',_cr_env)>100
   ||
::    Przeksztalcam niezaakceptowane rekordy tymczasowej tabeli TAB_ZPAR w rekordy ZPARS
      _can_continue:=exec('tmp_convert','magdok_partie',_cr_env,_cr_env.TAB_ZPAR,_cr_env.IN_ZPAR2)
   ?};
   {? var_pres('TAB_ZPAZ',_cr_env)>100
   ||
::    Przeksztalcam niezaakceptowane rekordy tymczasowej tabeli TAB_ZPAR w rekordy ZPARS
      _can_continue:=exec('tmp_convert','magdok_partie',_cr_env,_cr_env.TAB_ZPAZ,_cr_env.IN_ZPAZ2)
   ?}
?};

{? _can_continue>0
|| _result:=1;
   _cr_env.ACCEPTED:='T';
   {? _sel_exit>0
   || sel_exit()
   ?}
?};
ZPARS.cntx_pop();
_result


\chk_part
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy wszystkie partie maja poprawnie rozliczone surowce
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       [_b] - INTEGER - [1]/2 - sposób agregacji komunikatów: 1 - płaski
::                                                              2 - Błąd -> zlecenie -> komunikat
::       [_c] - obj_new - obiekt KOMM do którego dodawać komunikaty
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \chk_part/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_kom_agr:=1;
{? var_pres('_b')=type_of(0)
|| _kom_agr:=_b
?};

:: deklaracje obiektow dla komentarzy
{? var_pres('KOMM')<100
|| exec('JCQ_decl','#message');
   KOMM:=obj_new(@.CLASS.JCQ);
   KOMM.init(200,'Sprawdzenie rozliczenia partii'@)
?};

_komm:=~~;
{? var_pres('_c')>100
|| _komm:=_c
|| _komm:=KOMM
?};

_result:=0;
_can_continue:=0;

_tab:=_cr_env.TAB_PART;
_tab.cntx_psh();
_tab.index(_cr_env.IN_PART3);
_tab.prefix('P');
{? _tab.first()
|| _result:=1;
   {!
   |? {? _tab.PART_OK='N' | _tab.PART_OK=''
      || {? _komm.is_inited()
         ||
            _msg:='Partia: %1 nie jest poprawnie powiązana z rozchodami (brak powiązań)'@[_tab.PART_SYM];
            {? _kom_agr=1
            || _komm.add(_msg,'xwin16.png:2')
            |? _kom_agr=2
            || ZL.cntx_psh(); ZL.prefix();
               {? ZL.seek(_tab.ZL_REF)
               || exec('komm_add','zl_common',_msg,,1,_komm)
               ?};
               ZL.cntx_pop()
            ?}
         ?};
         _result:=0
      |? _tab.PART_OK='C'
      || {? _komm.is_inited()
         ||
            _msg:='Partia: %1 nie jest poprawnie powiązana z rozchodami (częściowe powiązania)'@[_tab.PART_SYM];
            {? _kom_agr=1
            || _komm.add(_msg,'xwin16.png:2')
            |? _kom_agr=2
            || ZL.cntx_psh(); ZL.prefix();
               {? ZL.seek(_tab.ZL_REF)
               || exec('komm_add','zl_common',_msg,,1,_komm)
               ?};
               ZL.cntx_pop()
            ?}
         ?};
         _result:=0
      ?};
      _tab.next()
   !}
?};
_tab.cntx_pop();
_result


\chk_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy wszystkie rozchody maja poprawnie przypisane partie
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - tab_tmp - tabela z dokumentami ktorym sprawdzac powiazania
::       _c - ndx_tm- - indeks w tabeli z dokumentami
::       [_d] - INTEGER - [1]/2 - sposób agregacji komunikatów: 1 - płaski
::                                                              2 - Błąd -> zlecenie -> komunikat
::       [_e] - obj_new - obiekt KOMM do którego dodawać komunikaty
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \chk_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_b;
_ndx:=_c;
_kom_agr:=1;
{? var_pres('_d')=type_of(0)
|| _kom_agr:=_d
?};
:: deklaracje obiektow dla komentarzy
{? var_pres('KOMM')<100
|| exec('JCQ_decl','#message');
   KOMM:=obj_new(@.CLASS.JCQ);
   KOMM.init(200,'Sprawdzenie rozliczenia rozchodów'@)
?};

_komm:=~~;
{? var_pres('_e')>100
|| _komm:=_e
|| _komm:=KOMM
?};

_result:=1;
_can_continue:=0;

_tab.cntx_psh();
_tab.index(_ndx);
_tab.clear();
{? _tab.first()
|| {!
   |?
      {? _tab.ZL_PART<>''
      ||
         {? _tab.IL_PART=0
         || {? _komm.is_inited()
            || _msg:='Dokument: %1 nie jest poprawnie powiązany z partiami (brak powiązań)'@[_tab.SYMBOL];
               {? _kom_agr=1
               || _komm.add(_msg,'xwin16.png:2')
               |? _kom_agr=2
               || ZL.cntx_psh(); ZL.prefix();
                  {? ZL.seek(_tab.ZL_REF)
                  || exec('komm_add','zl_common',_msg,,1,_komm)
                  ?};
                  ZL.cntx_pop()
               ?}
            ?};
            _result:=0
         |? _tab.IL_PART>0 & _tab.IL_PART<_tab.ILOSC
         || {? _komm.is_inited()
            ||
               _msg:='Dokument: %1 nie jest poprawnie powiązany z partiami (częściowe powiązania)'@[_tab.SYMBOL];
               {? _kom_agr=1
               || _komm.add(_msg,'xwin16.png:2')
               |? _kom_agr=2
               || ZL.cntx_psh(); ZL.prefix();
                  {? ZL.seek(_tab.ZL_REF)
                  || exec('komm_add','zl_common',_msg,,1,_komm)
                  ?};
                  ZL.cntx_pop()
               ?}
            ?};
            _result:=0
         ?}
      ?};
      _tab.next()
   !}
?};
_tab.cntx_pop();
_result


\tmp_convert
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Przeksztalca niezaakceptowane rekordy tabel tymczasowych TAB_ZPAR/TAB_ZPAZ w rekordy ZPARS
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - tab_tmp - tabela ktorej rekordy przeksztalcac
::       _c - ndx_tmp - index tabeli ktorej rekordy przeksztalcac
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \tmp_convert/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_b;
_index:=_c;

_result:=0;
_can_continue:=1;

_tab.cntx_psh();
_tab.index(_index);
_tab.prefix('N');
_buf_tmp:=exec('buffer_zpars_cr','magdok_partie');
{? _tab.first()
||
   {!
   |? _buf_tmp.get(_tab);
      {? var_pres('_buf_real')>100
      || obj_del(_buf_real)
      ?};

      DK.cntx_psh();
      DK.use(8+_tab.DK_REF);
      DK.clear();
      {? DK.seek(_tab.DK_REF)
      ||
::       Zapamietuje moje ses_id
         _ses_id:=SYSLOG.ses_id();

::       Blokuje dokument rozchodowy
         _ses_blk:=exec('blk_lock','#table','DK',DK.ref(),,2);
         {? _ses_blk=_ses_id
         ||
::          Zliczam ilosc na dokumencie ktora zostala powiazana z partiami
            _il_zpars:=exec('dk_il_zpars','magdok_wspolne',$DK.ref());

::          Tyle zostalo na dokumencie do powiazania
            _il_left:=DK.IL-_il_zpars;

::          prawdzam czy to co chce powiazac jest jeszcze mozliwe
            {? _il_left>=_buf_tmp.ILOSC
            ||
::             Ustawiam maske ZPARS - taka sama jak dokument rozchodowy ktory jest wiazany
               _name:=ZPARS.name();
               _dok_nam:=DK.name();

               _suffix:=_dok_nam+3;
               _prefix:=5+_name;

               _msk:=_prefix+_suffix;

               {? ZPARS.use(_msk)
               ||
                  ZPARS.clear();
                  _buf_real:=exec('buffer_tmp2real','magdok_partie',_buf_tmp);

::                Dodaje rekord do tabeli ZPARS
                  _can_continue:=exec('add','magdok_partie',_buf_real);
                  {? _can_continue>0
                  || _tab.cntx_psh(); _tab.clear();
                     _tab.ACCEPTED:='T';
                     _tab.ZPAR_REF:=$ZPARS.ref();
                     _can_continue:=_tab.put();
                     _tab.cntx_pop()
                  ?}
               ?}
            || _msg:='Zabrakło ilości do powiązania na dokumencie: %1'
                     ' (być może ilość została już powiązana przez innego użytkownika).'@[_tab.DK_SYM];
               _can_continue:=0;
               KOMM2.error(_msg,0)
            ?};
::          Odblokowuje dokument rozchodowy
            exec('blk_unlock','#table','DK',DK.ref())
         ||
            _msg:='Dokument rozchodowy: %1 jest blokowany przez użytkownika \'%2\' na terminalu \'%3\'.'@
                  [_tab.DK_SYM,SYSLOG.ses_info(_ses_blk,'log_name'),SYSLOG.ses_info(_ses_blk,'log_tty')];
            _can_continue:=0;
            FUN.emsg(_msg)
         ?}
      || FUN.error('Nie znaleziono dokumentu rozchodowego: %1'@[_tab.DK_SYM])
      ?};
      DK.cntx_pop();
      _tab.first() & _can_continue>0
   !}
?};
_tab.cntx_pop();

{? _can_continue>0
|| _result:=1
?};
_result


\buffer_tmp2real
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Przeksztalca bufor tymczasowej tabeli .TAB_ZPAR lub .TAB_ZPAZ w bufor rzeczywistej tabeli ZPARS
::   WE: _a - bufor tymczasowy - exec('buffer_zpars_cr','magdok_partie')
::   WY: obj_new - bufor tabeli rzeczywistej
::  OLD: \buffer_tmp2real/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_buf_tmp:=_a;

_buf_real:=exec('buffer','magdok_partie');
_buf_real.PARTIA:=exec('FindAndGet','#table',ZPARN,_buf_tmp.PART_REF,,,null());
_buf_real.KTM:=exec('FindAndGet','#table',M,_buf_tmp.KTM_REF,,,null());
_buf_real.IL:=_buf_tmp.ILOSC;
_buf_real.PRDK:=_buf_tmp.SRC_REF;
_buf_real.SQLDOK:=_buf_tmp.DK_REF;
_buf_real.TYP:=_buf_tmp.TYP;
_buf_real.OVER:=_buf_tmp.OVER;
_buf_real


\cr_load_rp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Laduje dane do kreatora - dla dokumentu RP
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - ND.ref - dokument z ktorego ladujemy
::  OLD: \cr_load_rp/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_nd:=_b;

ND.cntx_psh(); ND.clear();
DK.cntx_psh();
DK.index('DOKMAG');
ZL.cntx_psh();

:: Tabelka tymczasowa - lista zlecen na dokumencie
_list_zl:=tab_tmp(1,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia');

{? ND.seek(_nd)
||
   DK.prefix(ND.ref());
   {? DK.first()
   ||
::    Iteruje po pozycjach RP
      {!
      |?
         _zl:=DK.ZL;

::       Dodaje zlecnie do listy zlecen
         _list_zl.prefix($DK.ZL);
         {? _list_zl.first()=0
         || _list_zl.blank();
            _list_zl.ZL_REF:=$DK.ZL;
            _list_zl.add()
         ?};

         DK.cntx_psh();

         DK.cntx_pop();

::       Zbieram partie z dokumentu
         ZPARN.cntx_psh(); ZPARN.clear();
         {? ZPARN.seek(DK.DK_C().ZPARN)
         ||
::          Zbieram ilosc, ktora została rozliczona na wszystkich dokumentach powiązanych
::          z daną partią. To jest robione dlatego, że nie da się rozróżnić który ZPARS
::          jest powiązany z którą pozycją RP, więc redagując następny dokument RP powiązany
::          z tą samą partią muszę pracować w kontekście ilości zaraportowanej wszystkimi dokumentami
::          dla partii. Prosty przykład - zlecenie z jedną partią raportowane dwoma dokumentami RP,
::          najpierw jest powiązana połowa ilości z RW podczas akceptacji pierwszego dokumentu,
::          akceptując drugi dokument nie byłoby szansy powiazać resztę ilości z RW, ponieważ w oknie
::          ta ilość wyświetlałaby się jako już rozliczona, co jest nieprawdą, bo ona była rozliczona, ale
::          podczas zatwierdzania innego dokumentu.
            _il:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
            exec('part2tab','magdok_partie',_cr_env,_il,0)
         ?};
         ZPARN.cntx_pop();

         DK.next()
      !}
   ?}
?};

{? _cr_env.TAB_PART.size()>0
||
   _list_zl.clear();
   {? _list_zl.first() & _cr_env.TAB_PART.size()>0
   ||
      _args_rw:=exec('load_dk_a','magdok_partie');
      _args_rw.cr_env:=_cr_env;
      _args_rw.MODE:='RW';
      {!
      |?
         ZL.cntx_psh();
         ZL.clear();
         {? ZL.seek(_list_zl.ZL_REF)
         ||

::          LADOWANIE RW
            _rule:="exec('load_dk','magdok_partie',_b)";

            _top:=exec('top_level','zl_link',ZL.ref());
            _top_rodz:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"RODZAJ",'');
            _top_unrzl:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"UNRZL",'');

            {? _top_rodz='Z'
            || ZL.cntx_psh();
               ZL.index('NRNZL');
               ZL.prefix(_top_unrzl);
               {? ZL.first()
               ||
                  {!
                  |?
                     _args_rw.ZL:=ZL.ref();
::                   Zbieram dla zlecenia RW z masek od powolania zlecenia
                     _name:=5+DK.name();
                     _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
                     _msk_end:=~~;
                     {? ZL.STAN='Z'
                     || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
                        _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
                     || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
                        _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
                     ?};
                     exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args_rw);
                     ZL.next()
                  !}
               ?};
               ZL.cntx_pop();
               ~~
            |? _top_rodz='P'
            ||
               _args_rw.ZL:=ZL.ref();
::             Zbieram dla zlecenia RW z masek od powolania zlecenia
               _name:=5+DK.name();
               _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
               _msk_end:=~~;
               {? ZL.STAN='Z'
               || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               ?};
               exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args_rw)
            ?};
::          Ladujemy limity ze zlecen do tabeli kumulujacej surowce zlecenia
            ZLIM.cntx_psh();

            {? _top_rodz='P'
            ||
               ZL.cntx_psh();
               ZL.clear();
               {? ZL.seek(_top)
               ||
                  exec('openmask','zl_common',ZL.ref());
                  {? ZL.RODZAJ='P'
                  || ZLIM.index('ZLMZLD_R')
                  || ZLIM.index('ZLDZLRM')
                  ?};

                  ZLIM.prefix(_top);
                  {? ZLIM.first()
                  || {!
                     |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                        || exec('limit2tab','magdok_partie',_cr_env)
                        ?};
                        ZLIM.next()
                     !}
                  ?}
               ?};
               ZL.cntx_pop();
               ~~
            ||
               ZL.cntx_psh();
               ZL.index('NRNZL');
               ZL.prefix(_top_unrzl);
               {? ZL.first()
               ||
                  {!
                  |?
                     exec('openmask','zl_common',ZL.ref());
                     {? ZL.RODZAJ='P'
                     || ZLIM.index('ZLMZLD_R')
                     || ZLIM.index('ZLDZLRM')
                     ?};

                     ZLIM.prefix(ZL.ref());

                     {? ZLIM.first()
                     || {!
                        |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
                           || exec('limit2tab','magdok_partie',_cr_env)
                           ?};
                           ZLIM.next()
                        !}
                     ?};
                     ZL.next()
                  !}
               ?};
               ZL.cntx_pop()
            ?};
            ZLIM.cntx_pop()
         ?};
         ZL.cntx_pop();
         _list_zl.next()
      !}
   ?};

:: Tworzymy drzewo w tabeli partii - partiom przypisujemy surowce
   exec('sur2part','magdok_partie',_cr_env);

:: Ladujemy istniejace powiazania partii z rozchodami - musi byc wykonane po utworzeniu drzewa
:: w tabeli partii
   _tab:=_cr_env.TAB_PART;
   _tab.prefix();
   {? _tab.first()
   ||
      _args_zp:=exec('load_zpars_a','magdok_partie');
      _args_zp.cr_env:=_cr_env;
      _args_zp.TYP:=exec('type_rw','magdok_partie');

::    Zbieram powiazania ze wszystich partii zlecenia powiązanego z rozliczanym dokumentem RP
      ZPARN.cntx_psh();
      ZPARN.index('ZL2');
      ZPARN.prefix(exec('FindAndGet','#table',ZL,_tab.ZL_REF,,,null));
      {? ZPARN.first()
      ||
         {!
         |?
            _args_zp.ZPARN:=ZPARN.ref();
            {? ZPARN.ZL<>null()
            ||
::          Podczytanie zlecenia
               ZPARN.ZL();

::          Zbieram dla zlecenia ZPARS z masek od powolania zlecenia
               _name:=5+ZPARS.name();
               _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
               _msk_end:=~~;
               {? ZL.STAN='Z'
               || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
                  _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
               ?};
               _rule:="exec('load_zpars','magdok_partie',_b)";
               exec('for_each_mask','#table',ZPARS,_rule,_msk_start,_msk_end,_args_zp)
            ?};
            ZPARN.next()
         !}
      ?};
      ZPARN.cntx_pop()
   ?}
?};

ZL.cntx_pop();
DK.cntx_pop();
ND.cntx_pop();
~~


\create4dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tworzy ZPARS na podstawie przekazanego DK
::   WE: _a - DK.ref()
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \create4dk/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_dk:=_a;

_result:=1;
ZL.cntx_psh();
ZLIM.cntx_psh();
DK.cntx_psh();
DK.clear();
{? DK.seek(_dk)
||
   _is_rw:=0;
   _is_zw:=0;
   _is_rw:=exec('dk_is_rw','magdok_wspolne',DK.ref());
   {? _is_rw=0
   || _is_zw:=exec('dk_is_zw','magdok_wspolne',DK.ref())
   ?};
   {? DK.ZL<>null() & (_is_rw>0 | _is_zw>0)
   ||
::    Jesli dokument klasy RW/ZW i zlecenie na ktorym powstaje produkt partiowane to byc moze uda sie utworzyc
::    powiazanie rozchodow z partia
      _zl_prod:=null();
      {? DK.ZL().RODZAJ<>'N'
      || _zl_prod:=exec('party_first','zl_link',DK.ZL)
      ||
::       Zlecenie niezalezne
         {? DK.ZLIM<>null()
         || {? DK.ZL().GENLIM='N'
            || _zl_lim:=exec('FindAndGet','#table',ZLIM,#DK.ZLIM,ref_name(DK.ZLIM),"ZLDOD",null())
            || _zl_lim:=exec('FindAndGet','#table',ZLIM,#DK.ZLIM,ref_name(DK.ZLIM),"ZLEC",null())
            ?};
            _zl_prod:=exec('party_first','zl_link',_zl_lim)
         ?}
      ?};
      {? _zl_prod<>null() & exec('zlec_party','zl_common',_zl_prod)>0
      ||
::       Otwieram maske ZLIM
         exec('openmask','zl_common',DK.ZL);

         _buffer:=exec('buffer','magdok_partie');

::       Zbieram ilosc powiazana juz dla takiego DK
         _il_zpars:=exec('dk_il_zpars','magdok_wspolne',$DK.ref());

::       Okreslam brakujaca ilosc do powiazania
         _il_left:=DK.IL-_il_zpars;
         {? _il_left>0
         ||
            {? DK.PARTIA<>null()
            ||
               _buffer.PARTIA:=DK.PARTIA;
               _buffer.KTM:=DK.M;
               _buffer.IL:=_il_left;
               _buffer.PRDK:=DK.PRDK;
               _buffer.SQLDOK:=$DK.ref();
               {? _is_rw>0
               || _buffer.TYP:=exec('type_rw','magdok_partie')
               |? _is_zw>0
               || _buffer.TYP:=exec('type_zw','magdok_partie')
               ?};
               _result:=exec('add','magdok_partie',_buffer)
            |? DK.ZLIM<>null() & DK.ZLIM().MODE_DST<>'R'
            ||
::             Jesli nie wybrana jest partia ale wybrany limit to byc moze uda sie dotrzec do partii
::             (pod warunkiem ze przewodnik ma tylko jedna partie)
               _zparn:=null();
               {? DK.ZLIM().ZGP().NRZLP<>null()
               ||
                  ZPARN.cntx_psh();
                  ZPARN.index('ZGH');
                  ZPARN.prefix(DK.ZLIM().ZGP().NRZLP);
                  {? ZPARN.size()=1 & ZPARN.first()
                  || _zparn:=ZPARN.ref()
                  ?};
                  ZPARN.cntx_pop()
               ?};
               {? _zparn<>null()
               ||
                  _buffer.PARTIA:=_zparn;
                  _buffer.KTM:=DK.M;
                  _buffer.IL:=_il_left;
                  _buffer.PRDK:=DK.PRDK;
                  _buffer.SQLDOK:=$DK.ref();
                  {? _is_rw>0
                  || _buffer.TYP:=exec('type_rw','magdok_partie')
                  |? _is_zw>0
                  || _buffer.TYP:=exec('type_zw','magdok_partie')
                  ?};
                  _result:=exec('add','magdok_partie',_buffer)
               ?}
            ?}
         ?}
      ?}
   ?}
?};
DK.cntx_pop();
ZLIM.cntx_pop();
ZL.cntx_pop();
_result


\select_zpars
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Wyswietla ZPARSy dla podanego ZPARN
::   WE: [_a] - ZPARN.ref lub bieżący rekord
::  OLD: \select/zpars.fml
::  OLD: \skl_zparn/partie.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZPARN.ref())
|| _ref:=_a
?};

_can_continue:=1;

ZPARN.cntx_psh();
{? _ref<>null()
|| ZPARN.clear();
   {? ZPARN.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _cr_env:=exec('cr_env','magdok_partie');
   VAR_DEL.delete('CR_ENV');
   CR_ENV:=_cr_env;

   _cr_env.load_par(ZPARN.ref());
   _cr_env.sel_par();
   VAR_DEL.delete('CR_ENV')
?};
ZPARN.cntx_pop();
~~


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Kasuje podany rekord tabeli ZPARS (wykonywane w transakcji!!!)
::   WE: _a - ZPARS.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::  OLD: \delete/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};
_result:=0;
_ref:=_a;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
ZPARS.cntx_psh();
ZPARN.cntx_psh();
ZL.cntx_psh();

{? _ref<>null()
||
:: Otwieram odpowiednia maske
   {? ZPARS.use(ref_name(_ref))
   ||
      ZPARS.clear();
      {? ZPARS.seek(_ref)
      ||
         {? ZPARS.PARTIA().ZL().STAN='Z'
         || KOMM.error('Nie można usuwać powiązań rozchodów surowców z partiami na zleceniu zamkniętym.'@,0)
         || {? exec('clean','magdok_partie',_ref)>0
            || {? ZPARS.del(,1)>0
               || _result:=1
               || undo();
                  _result:=-3
               ?}
            || _result:=-2;
               KOMM.error('Nie powiodło się czyszczenie powiązań dla rozchodów surowców z partiami.'@,0)
            ?}
         ?}
      || _result:=-1
      ?}
   ?}
?};
ZL.cntx_pop();
ZPARN.cntx_pop();
ZPARS.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Czysci powiazania do rekordu tabeli ZPARS
::   WE: _a - ZPARS.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::  OLD: \clean/zpars.fml
::  OLD: \clean/zl_common.fml
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};
_result:=1;
_zpars:=_a;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---
{? _mydo || _result:=end()?};
_result


\creator_args
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Argumenty dla funkcji exec('creator_gr_show','magdok_partie')
::   WY: obj_new - tablica nazwana z argumentami
::  OLD: \creator_args/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('SHOW',
               'KOM_AKC',
               'CHK_MODE',
               'MODE',
               'FORCE',
               'KOM_AGR'
               );
:: Tryb pracy kreatora -  0  - pokazywac okno tylko jezeli automatyczne przypisanie nie uda sie
::                       [1] - zawsze pokazywac okno
::                        2  - nie pokazywac okna nawet jak sie nie uda
_args.SHOW:=1;

:: Obsługa KOMMa - [1] - podczas akceptacji inicjowac i wyswietlac KOMM
::                  0  - podczas akceptacjie dopisywac komunikaty do istniejacego KOMMa
_args.KOM_AKC:=1;

:: Tryb akceptacji - 0 - podczas akceptacji nie sprawdzac nic
::                  [1] - podczas akceptacji sprawdzac rozliczenie partii
::                   2 - podczas akceptacji sprawdzac rozliczenie partii i rozchodow
_args.CHK_MODE:=1;

:: Czy przycisk 'Akceptuj [!]' ma byc od razu dostępny
_args.FORCE:=0;

:: Tryb wyswietlania okreslajacy zawartosc okna: RP/ZL/ZW
_args.MODE:='';

:: Agregacja komunikatów: 1 - płaska, 2 - Błąd -> zlecenie -> komunikat
_args.KOM_AGR:=1;

_args


\creator_gr_load
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Akcja grupowa
::       Dla dokumentu magazynowego/zlecenia uruchamia mechanizm przyporzadkowujacy pobrania/zwroty surowcow (RW/ZW)
::       do partii na zleceniu.
::   WE: [_a] - ND.ref()
::       [_b] - ZL.ref()
::       [_c] - tab_tmp - tabela z refami dokumentow RW ktore dodac do kreatora, oprocz normalnie ladowanych
::                        normalnie sa ladowane dokumenty tylko zaakceptowane, a tutaj wchodza np dokumenty
::                        RW surowcow nielimitowanych automatycznie tworzone podczas akceptacji RP.
::                        Tabela jest deklarowana funkcja exec('rw_additional','zpars')
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \creator_gr_load/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_nd:=null();
_rp:=~~;
_zw:=~~;
{? var_pres('_a')=type_of(ND.ref())
|| _nd:=_a;
   {? exec('nd_is_rp','magdok_wspolne',_nd)>0
   || _rp:=_nd
   |? exec('nd_is_zw','magdok_wspolne',_nd)>0
   || _zw:=_nd
   ?}
?};

_zl:=null();
{? var_pres('_b')=type_of(ZL.ref())
|| _zl:=_b
?};

_rw_additional:=~~;
{? var_pres('_c')>100
|| _rw_additional:=_c
?};

_result:=0;

{? var_pres('CR_ENV')<100
|| CR_ENV:=exec('cr_env','magdok_partie')
?};
CR_ENV.load(_rp,_zl,_zw);

{? type_of(_rw_additional)>100
|| CR_ENV.rwinject(_rw_additional)
?};
~~


\creator_gr_show
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS:
::   WE: _a - args - argumenty stworzone za pomoca funkcji exec('creator_args','magdok_partie')
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \creator_gr_show/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('creator_args','magdok_partie')
?};

_result:=1;

{? var_pres('CR_ENV')>100 & CR_ENV.TAB_PART.size>0
||
   _cr_env:=CR_ENV;
   _cr_env.CHK_MODE:=_args.CHK_MODE;
   _cr_env.MODE:=_args.MODE;
   {? _args.MODE='ZW'
   || _cr_env.TIE_MODE:='ZW';
::    Jesli tryb akceptacji ZW to sprawdzam tylko rozliczenie dokumentow
      _cr_env.CHK_MODE:=3
   ?};
   _result:=0;
:: Odszarzam przycisk 'Akceptuj [!]' jesli potrzeba
   {? _args.FORCE>0
   || _cr_env.FORCE:=_args.FORCE
   ?};

:: Uruchamiam automat FIFO/LIFO
   _can_continue:=0;
   _auto_mode:='\''+exec('get','#params',500760,2)+'\'';

   {? _auto_mode=exec('mode_fifo','magdok_partie')
   || _can_continue:=exec('auto_zpars','magdok_partie',_cr_env,'FIFO',0)
   |? _auto_mode=exec('mode_lifo','magdok_partie')
   || _can_continue:=exec('auto_zpars','magdok_partie',_cr_env,'LIFO',0)
   ?};

   {? _args.SHOW=1
   || _cr_env.select()
   ||
::    Uruchamiam akceptacje
      _can_continue:=exec('accept','magdok_partie',_cr_env,0,,_args.KOM_AKC,_args.KOM_AGR,0);

::    Jesli sie nie udalo zaakceptowac to pokazuje okno
      {? _can_continue<=0 & _args.SHOW<>2
      || _cr_env.select()
      ?}
   ?};
   {? _cr_env.ACCEPTED='T'
   || _result:=1
   ?}
?};
VAR_DEL.delete('CR_ENV');
_result


\set_tie_mode_rw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Ustawia tryb tworzenia powiazan: partie z rozchodami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','zpars')
::  OLD: \set_tie_mode_rw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_cr_env.TIE_MODE:='RW';

:: Ustawiam aktywne okno w grupie - metoda prob i bledow odkrylem ze jest to okno nr 5
::exec('set_active_win','#desktop','',_cr_env.ctr_id,5);
~~


\set_tie_mode_zw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Ustawia tryb tworzenia powiazan: partie z rozchodami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','zpars')
::  OLD: \set_tie_mode_zw/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_cr_env.TIE_MODE:='ZW';

:: Ustawiam aktywne okno w grupie - metoda prob i bledow odkrylem ze jest to okno nr 6
::exec('set_active_win','#desktop','',_cr_env.ctr_id,6);
~~


\create_zpar_act
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Akcja 'Powiąż' wywolywana z kontrolki - tworzy rekord w tabeli tymczasowej .TAB_ZPAR
::       Kontekst pracy - rekord tabeli .TAB_PART,.TAB_RW
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','zpars')
::  OLD: \create_zpar_act/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

:: pobieram ilosc z kontrolki
_sel_size:=0;
_tab_sel:=~~;

{? _cr_env.TIE_MODE='RW'
|| _tab:=_cr_env.TAB_RW;
   _tab_sel:=_cr_env.SEL_RW;
   _tab_dst:=_cr_env.TAB_ZPAR;
   {? var_pres('SEL_RW',_cr_env)>100
   || _sel_size:=_cr_env.SEL_RW.size()
   ?}
|? _cr_env.TIE_MODE='ZW'
|| _tab:=_cr_env.TAB_ZW;
   _tab_sel:=_cr_env.SEL_ZW;
   _tab_dst:=_cr_env.TAB_ZPAZ;
   {? var_pres('SEL_ZW',_cr_env)>100
   || _sel_size:=_cr_env.SEL_RW.size()
   ?}
?};
{? _sel_size=0
||
:: Akcja pojedyncza
   _ilosc:=exec('create_zpar_dialog','magdok_partie',_cr_env,_tab,_tab_dst);
   {? _ilosc>0
   || _can_continue:=exec('create_zpar','magdok_partie',_cr_env,_ilosc,#_tab.ref())
   ?}
||
:: Akcja grupowa
   {? type_of(_tab_sel)>100 & _tab_sel.first()
   ||
      _can_continue:=FUN.ask('Zaznaczonych pozycji dokumentów: %1. Powiązać je z partią: %2?'@[$_tab_sel.size(),_cr_env.TAB_PART.PART_SYM]);
      {? _can_continue>0
      ||
         {!
         |? _tab.cntx_psh(); _tab.prefix();
            {? _tab.seek(_tab_sel.REF,)
            || _ilosc:=exec('sur_il4part','magdok_partie',_cr_env,_tab.SQL_REF,_cr_env.TAB_PART.ZPAR_REF,1);
               {? _ilosc>0
               || _can_continue:=exec('create_zpar','magdok_partie',_cr_env,_ilosc,_tab_sel.REF)
               ?}
            ?};
            _tab.cntx_pop();

            _tab_sel.next()
         !}
      ?}
   ?}
?};

::_cr_env.TAB_ZPAR.first();

:: Przechodze do nastepnego dokumentu w tabeli .TAB_RW lub .TAB_ZW
::_tab.next();
{? _cr_env.WIN_PART<>''
|| grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART)
?};
{? _cr_env.WIN_PART2<>''
|| grp_disp(_cr_env.TAB_PART,_cr_env.WIN_PART2)
?};

{? type_of(_cr_env.TAB_RW)>100
|| grp_disp(_cr_env.TAB_RW,_cr_env.WIN_RW,1)
?};

{? type_of(_cr_env.TAB_ZPAR)>100
|| grp_disp(_cr_env.TAB_ZPAR,_cr_env.WIN_ZPAR)
?};
{? type_of(_cr_env.TAB_ZPAZ)>100
|| grp_disp(_cr_env.TAB_ZPAZ,_cr_env.WIN_ZPAZ)
?};
~~


\cr_anuluj
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.30]
:: OPIS: Obsluga na przycisk 'Anuluj'
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','zpars')
::  OLD: \cr_anuluj/zpars.fml
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
sel_exit();
~~


\par_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2009]
:: OPIS: Selekcja partii dla produktu w podziale na lata
::----------------------------------------------------------------------------------------------------------------------
{? M.R='S'
|| exec('p4m','magdok_partie',SM.M)
|? M.R='W' | M.R='P'
|| ZPARS.cntx_psh();
   ZPARN.cntx_psh();
   ZLGD.cntx_psh();
   ZLGD.clear();
   ZLGD.actions('WER','dPUAMO');
   DK.cntx_psh();
   ND.cntx_psh();
   ZPARS.index('PARTIA');
   ZPARN.index('PARTIA');
   BEER.M:=M.ref();
   VAR_DEL.delete('__PART','__WPART');
   __PART:=tab_tmp(1
      ,'ROK','INTEGER','Rok'@
      ,'DATA','DATE','Data'@
      ,'SYM','STRING[25]','Dokument'@
      ,'POZ','INTEGER','Pozycja'@
      ,'ILOSC','REAL','Ilość'@
      ,'PARTIA','STRING[20]','Partia'@
      ,'ZLECENIE','STRING[20]','Zlecenie'@
      ,'OPIS','STRING[25]','Opis'@
      ,'ND','STRING[16]','$ND.ref()'
      ,'ZPARN','STRING[16]','$ZPARN.ref()'
      ,'PRDK','STRING[16]','PRDK'
      ,'DK','STRING[16]','$DK.ref()'
   );
   _wer:=__WPART:=__PART.mk_sel('Partie'@,'P',0,'#par_sel_01');
   __PART.win_fld(_wer,,'DATA');
   __PART.win_fld(_wer,,'SYM',);
   __PART.win_fld(_wer,,'POZ',,,-5);
   __PART.win_fld(_wer,,'ILOSC',,,15,2);
   __PART.win_fld(_wer,,'PARTIA',,,23);
   __PART.win_fld(_wer,,'ZLECENIE',,,24);
   _wer1:=__PART.grp_make('Partie w podziale na lata'@,,'#pargrsel');
   OKR.cntx_psh();
   _ok:=0;
   {? OKR.last()
   || {!
      |? {? OKR.MC=1
         || ND.use('nagdo'+ST.ODDZ+(form(form(OKR.ROK,,,'99'),-4)+2));
            DK.use('dokma'+ST.ODDZ+(form(form(OKR.ROK,,,'99'),-4)+2));
            DK.index('DOKPLUS');
            DK.prefix(ST.MAG,BEER.M,'T','T');
            {? DK.first()
            || {!
               |? {? exec('dk_is_rp','magdok_wspolne',DK.ref())
                  || {? $DK.ref=DK.PRDK
                     || {? DK.DK_C<>null & DK.DK_C().ZPARN<>null()
                        || _ok:=1;
                           __PART.ROK:=DK.N().D~1;
                           __PART.DATA:=DK.N().D;
                           __PART.SYM:=DK.N().SYM;
                           __PART.POZ:=DK.P;
                           __PART.ILOSC:=DK.IL;
                           __PART.PARTIA:=DK.DK_C().ZPARN().SYM;
                           __PART.OPIS:=DK.DK_C().ZPARN().OPIS;
                           __PART.ZLECENIE:=DK.ZL().SYM;
                           __PART.ND:=$DK.N;
                           __PART.ZPARN:=$DK.DK_C().ZPARN;
                           __PART.PRDK:=DK.PRDK;
                           __PART.DK:=$DK.ref();
                           __PART.add()
                        ?}
                     ?}
                  ?};
                  DK.next()
               !}
            ?}
         ?};
         OKR.prev()
      !}
   ?};
   OKR.cntx_pop();
   __PART.win_sel(_wer1);
   {? _ok
   || exec('par_tree','magdok_partie')
   || FUN.info('Brak partii produkcyjnych dla produktu.'@)
   ?};
   VAR_DEL.delete('__PART','__WPART');
   DK.cntx_pop();
   ND.cntx_pop();
   ZLGD.f_clear();
   ZLGD.actions('WER','');
   ZLGD.cntx_pop();
   ZPARS.cntx_pop();
   ZPARN.cntx_pop()
|| FUN.info('Partie produkcyjne mogą być przypisane tylko do wyrobu gotowego, półproduktu lub surowca.'@)
?};
~~


\p4m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Partie materialu
::   WE: _a - M.ref()
::  OLD: \p4m/partie.fml
::----------------------------------------------------------------------------------------------------------------------
_mat:=_a;

:: sprzatanie
_czysc:="VAR_DEL.delete('__D_p4m')";
_czysc();

:: srodowisko
__D_p4m:=obj_new('INF','NAV');
__D_p4m.INF:=obj_new('TAB','WER');
__D_p4m.NAV:=obj_new('TAB','WER');

:: informacje o partiach materialu
_query:='
   select distinct
      ZPARN.SYM   P_SYM,
      DK_DOK.PRDK PRDK,
      ND_DOS.SYM  DOS,
      ND_DOK.SYM  DOK,
      M.KTM       M_KTM,
      M.N         M_N,
      M.REFERENCE M_REF,
      ZL.SYM      ZL_SYM,
      DK_DOS.P    DOS_P,
      DK_DOK.P    DOK_P,
      DK_DOK.IL   DOK_IL,
      JM.KOD      JM,
      TYPYDOK.WYR TD_WYR
   from
      @DK as DK_DOK
      join ZPARN using(DK_DOK.PARTIA,ZPARN.REFERENCE)
      join @ND as ND_DOK using(DK_DOK.N,ND_DOK.REFERENCE)
      join @DK as DK_DOS using(DK_DOK.PRDK,DK_DOS.REFERENCE)
      join @ND as ND_DOS using(DK_DOS.N,ND_DOS.REFERENCE)
      join M using(DK_DOK.M,M.REFERENCE)
      join ZL using(ZPARN.ZL,ZL.REFERENCE)
      join TYPYDOK using(ND_DOS.TYP,TYPYDOK.REFERENCE)
      join JM using(M.J,JM.REFERENCE)
   where
      TYPYDOK.WYR=\'T\'
      and
      DK_DOK.PARTIA in
         (
            select distinct
               ZPARS.PARTIA
            from
               @ZPARS
            where
               ZPARS.KTM=:_a
         )
union all
   select distinct
      ZPARN.SYM   P_SYM,
      DK_DOK.PRDK PRDK,
      ND_DOS.SYM  DOS,
      ND_DOK.SYM  DOK,
      M.KTM       M_KTM,
      M.N         M_N,
      M.REFERENCE M_REF,
      ZL.SYM      ZL_SYM,
      DK_DOS.P    DOS_P,
      DK_DOK.P    DOK_P,
      DK_DOK.IL   DOK_IL,
      JM.KOD      JM,
      TYPYDOK.WYR TD_WYR
   from
      @ZPARS
      join @DK as DK_DOK using(ZPARS.SQLDOK,DK_DOK.REFERENCE)
      join ZPARN using(ZPARS.PARTIA,ZPARN.REFERENCE)
      join @ND as ND_DOK using(DK_DOK.N,ND_DOK.REFERENCE)
      join @DK as DK_DOS using(ZPARS.PRDK,DK_DOS.REFERENCE)
      join @ND as ND_DOS using(DK_DOS.N,ND_DOS.REFERENCE)
      join M using(DK_DOK.M,M.REFERENCE)
      join ZL using(ZPARN.ZL,ZL.REFERENCE)
      join TYPYDOK using(ND_DOS.TYP,TYPYDOK.REFERENCE)
      join JM using(M.J,JM.REFERENCE)
   where
      ZPARS.KTM=:_a
   order by
      1,3,4,5
';
__D_p4m.INF.TAB:=sql(_query,_mat);
_Inf:=__D_p4m.INF.TAB;

{? ~_Inf.first() || FUN.info('Brak informacji o partiach.'@); return() ?};

:: drzewko nawigacji
__D_p4m.NAV.TAB:=tab_tmp(2
   ,'TREE'  ,'TREE_REF'    ,''
   ,'O'     ,'STRING[50]'  ,'Wszystkie\Partia\Indeks'
   ,'S'     ,'STRING[100]' ,'Zlecenie\Nazwa indeksu'
   ,'WHERE' ,'STRING[100]' ,'Where'
   ,'TYP'   ,'STRING[1]'   ,'Typ zapisu [L]iść');

_Nav:=__D_p4m.NAV.TAB;

_Nav.blank();
_Nav.O:='Wszystkie';
_all:={? _Nav.add() || _Nav.ref() ?};

_loop:=_Inf.first();
{!
|? _loop
|!
   {? _Inf.M_REF=$_mat
   || _dost:=
         {? _Nav.find_key(_all,_Inf.DOS)
         || _where:=_Nav.WHERE;
            _Nav.ref()
         || _Nav.blank();
            _Nav.TREE:=_all;
            _Nav.O:=_Inf.DOS;
            _Nav.WHERE:=_where:='DOS=\''+_Inf.DOS+'\'';
            {? _Nav.add() || _Nav.ref() ?}
         ?};
      _partia:=
         {? _Nav.find_key(_dost,_Inf.P_SYM)
         || _where:=_Nav.WHERE;
            _Nav.ref()
         || _Nav.blank();
            _Nav.TREE:=_dost;
            _Nav.O:=_Inf.P_SYM;
            _Nav.S:=_Inf.ZL_SYM;
            _Nav.TYP:='L';
            _Nav.WHERE:=_where:='P_SYM=\''+_Inf.P_SYM+'\'';
            {? _Nav.add() || _Nav.ref() ?}
         ?}
   ?};
   _loop:=_Inf.next()
!};
_Nav.first();

:: okno partii materialu
__D_p4m.INF.WER:=_wer1:=_Inf.mk_sel('Power partie'@,'P',,'adfejfinapwoejv',,,,,'U');
_Inf.win_fld(_wer1,,'P_SYM',,,25,,,'Partia'@);
_Inf.win_fld(_wer1,,'DOS',,,20,,,'Dostawa'@);
_Inf.win_fld(_wer1,,'DOS_P',,,4,,,'Poz.'@);
_Inf.win_fld(_wer1,,'DOK',,,20,,,'Dokument'@);
_Inf.win_fld(_wer1,,'DOK_P',,,4,,,'Poz.'@);
_Inf.win_fld(_wer1,,'M_KTM',,,20,,,'Indeks'@);
_Inf.win_fld(_wer1,,'DOK_IL',,,10,ST.DOKL,,'Ilość'@);
_Inf.win_fld(_wer1,,'JM',,,3,,,'jm'@);
_fb:="exec('p4mHisDost','magdok_partie',cur_tab(1,1).PRDK)";
_Inf.win_act(_wer1,,'Formuła','Historia dostawy'@@,,,_fb,,1);
_Inf.win_act(_wer1,,'Szukaj');

:: okno drzewka nawigacji
__D_p4m.NAV.WER:=_wer2:=_Nav.mk_sel('Nawigacja'@,'P',,'avjkwejopjcvbdf',,,,1);
_Nav.win_fld(_wer2,,'O',,,35,,,'Wszystkie'@+'\\'+'Dostawa'@+'\\'+'Partia'@);
_Nav.win_fld(_wer2,,'S',,,35,,,'--\\--\\'+'Zlecenie'@);
_fa:="exec('zwrw_all','#tree',__D_p4m.NAV.TAB,'TREE',__D_p4m.NAV.WER)";
_Nav.win_act(_wer2,,'Formuła','Zwiń/rozwiń'@@,,,,_fa);
_Nav.win_act(_wer2,,'Szukaj');
_ff:="
   _Nav:=__D_p4m.NAV.TAB;
   {? _Nav.TYP='L'
   || 'xwin16.png:28'
   || {? _Nav.tr_state()=1
      || 'xwin16.png:75'
      || 'xwin16.png:74'
      ?}
   ?}
";
_Nav.win_fml(_wer2,,'O',,'ICON_BEFORE',_ff);

:: okno grupowe
_fb:="
   _Inf:=__D_p4m.INF.TAB;
   _Nav:=__D_p4m.NAV.TAB;
   grp_disp(_Nav,__D_p4m.NAV.WER);
   _Inf.prefix();
   _Inf.f_clear();
   _Inf.f_set(,,_Nav.WHERE)
   ";
_wergr:=_Inf.grp_make('Indeks: %1'@[exec('FindAndGet','#table',M,_mat,,"M.KTM",'')],_fb,'#fjaadkwoeunvsj');
_Inf.grp_sel(_wergr,,_wer1,,,,,,,,,,'maximized');
_Inf.grp_splt(_wergr,,'vertical','nawig');
_far:="
   _Inf:=__D_p4m.INF.TAB;
   _Nav:=__D_p4m.NAV.TAB;
   _Inf.prefix();
   _Inf.f_clear();
   _Inf.f_set(,,_Nav.WHERE);
   grp_disp(__D_p4m.INF.TAB,__D_p4m.INF.WER)
";
_Inf.grp_sel(_wergr,_Nav,_wer2,,_far,,,,,,,,'maximized');

:: select
_Inf.win_sel(_wergr);
_Inf.select;

:: sprzatanie
_czysc()


\par_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Utworzenie i wyświetlenie okna - drzewa
::   WE: [_a] - czy wypełniać tabelę danymi
::  OLD: \par_tree/partie.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _a:=0 ?};

VAR_DEL.delete('__PARTREE');

__PARTREE:=tab_tmp(3
   ,'PARENT','TREE_REF','Wskazanie na element nadrzędny'
   ,'LABEL1','STRING[50]','Partia/Kod materiału/Nazwisko'
   ,'LABEL2','STRING[100]','Zlecenie/Nazwa materiału/Imię'
   ,'DOK','STRING[100]','Dokument/Operacja'
   ,'POZ','STRING[1]','Pozycja/Zmiana'
   ,'DATA','DATE','Data'
   ,'ILOSC','REAL','Ilość'
   ,'PAR_REF','STRING[16]','$__PART.ref() / $ZPARS.ref() / $ZLGD_ref()'
   ,'ZNACZNIK','STRING[1]',''
   ,'PRDK','STRING[16]',''
   ,'MAIN','STRING[1]','Czy główna operacja'
   ,'DKREF','STRING[16]','ref DK'
);
:__PARTREE.fld_attr(,2);

{? ~_a || exec('tr_refresh','magdok_partie') ?};

_wer:=__PARTREE.mk_sel('Partie produktu: %1'@[M.KTM],'P',0,'#obcstat',,,,1);
__PARTREE.win_fld(_wer,,'LABEL1',,,10,,,'Partia/Kod materiału/Pracownik'@,,'Dane partii / Kod materiału / Nazwisko pracownika'@);
__PARTREE.win_fld(_wer,,'LABEL2',,,20,,,'Zlecenie/Nazwa materiału/Imię'@,,'Symbol zlecenia / Nazwa materiału / Imię pracownika'@);
__PARTREE.win_fld(_wer,,'DOK',,,15,,,'Dokument/Operacja'@,,'Symbol dokumentu/Operacja do której zarejestrowano akord'@);
__PARTREE.win_fld(_wer,,'POZ',,,-5,,,'Pozycja/Zmiana'@,,'Pozycja'@);
__PARTREE.win_fld(_wer,,'DATA',,,15,4,,'Data'@,,'Data'@);
__PARTREE.win_fld(_wer,,'ILOSC',,,15,4,,'Ilość'@,,'Ilość'@);

__PARTREE.win_act(_wer,,'Kolejność');

_fb:="
   {? __PARTREE.PRDK<>''
   || M.cntx_psh();
      SM.cntx_psh();
      ND.cntx_psh();
      DK.cntx_psh();
      _akt:=ND.name()+3;
      _msk:=form(8+__PARTREE.PRDK)+3;
      exec('mag_open','open_tab',1+_msk,_msk+2);
      DK.clear();
      {? DK.seek(__PARTREE.PRDK)
      || exec('his_dost','magdok_wspolne',,,__PARTREE.DKREF)
      ?};
      exec('mag_open','open_tab',1+_akt,_akt+2);
      M.cntx_pop();
      SM.cntx_pop();
      ND.cntx_pop();
      DK.cntx_pop()
   ?};
   ~~
";
__PARTREE.win_act(_wer,0,'Formuła','Historia dostawy'@@,,,_fb);
__PARTREE.win_act(_wer,,'Formuła','Zwiń/rozwiń'@@,,'Zwiń/rozwiń wszystkie rekordy'@,
   "exec('zwrw_all','#tree','__PARTREE','PARENT')"
);
__PARTREE.win_act(_wer,,'Formuła','Legenda'@@,,,
   "exec('legenda','color','#__PARTREE#01','$'+'Dane zarejestrowane do innej partii przed podziałem'@)"
);
_formula:="
   _tab:=cur_tab(1,1);
   {? _tab.PAR_REF<>'' & ref_tab(_tab.PAR_REF)=ZLGD
   || exec('FindAndGet','#table',ZLGD,_tab.PAR_REF,,\"exec('zlgd_display','zl_wyk')\")
   ?};
   ~~
";
__PARTREE.win_act(_wer,,'Wyświetl',,,,_formula);
_formula:="
   {? _a
   || {? __PARTREE.ZNACZNIK='W' | __PARTREE.ZNACZNIK='S'
      || __PARTREE.actions_grayed(cur_win(1,1),'')
      || __PARTREE.actions_grayed(cur_win(1,1),'H')
      ?}
   ?};
   _result:='';
   {? __PARTREE.MAIN='N'
   || _result:=exec('findtmp','#color')
   ?};
   _result
";
__PARTREE.win_act(_wer,,'Rekord',,,,_formula);

_formula:="
   {? __PARTREE.ZNACZNIK='W'
   || 'xwin16.png:28'
   |? __PARTREE.ZNACZNIK='S'
   || 'xwin16.png:27'
   |? __PARTREE.ZNACZNIK='P'
   || 'xwin16.png:31'
   || {? __PARTREE.tr_state()=1
      || 'xwin16.png:75'
      || 'xwin16.png:74'
      ?}
   ?}
";
__PARTREE.win_fml(_wer,,'LABEL1',,'ICON_BEFORE',_formula);

__PARTREE.win_sel(_wer);

{? ~_a
|| __PARTREE.select();
   VAR_DEL.delete('__PARTREE')
?};
~~


\p4mHisDost
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Historia dostawy
::   WE: _a - $DK.ref
::  OLD: \p4mHisDost/partie.fml
::----------------------------------------------------------------------------------------------------------------------
DK.cntx_psh();
DK.use(8+_a);
DK.prefix();
{? DK.seek(_a) || exec('his_dost','magdok_wspolne') ?};
DK.cntx_pop()


\tr_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Wyczyszczenie i wypełnienie danymi tabeli __PARTREE
::  OLD: \tr_refresh/partie.fml
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('parent','main','czy_zlgd');
_args.parent:=0;
_args.main:=null();
_args.czy_zlgd:=1;

M.cntx_psh();
__PARTREE.clear();
{? __PARTREE.first() || {! |? __PARTREE.del() !} ?};
:: Wpisujemy partie do drzewa
{? __PART.first()
|| {!
   |?
::    Dane samej partii
      __PARTREE.LABEL1:=__PART.PARTIA;
      __PARTREE.LABEL2:=__PART.ZLECENIE;
      __PARTREE.DOK:=__PART.SYM;
      __PARTREE.POZ:=$__PART.POZ;
      __PARTREE.DATA:=__PART.DATA;
      __PARTREE.ILOSC:=__PART.ILOSC;
      __PARTREE.PAR_REF:=$__PART.ref;
      __PARTREE.ZNACZNIK:='W';
      __PARTREE.PARENT:=0;
      __PARTREE.PRDK:=__PART.PRDK;
      __PARTREE.MAIN:='T';
      __PARTREE.DKREF:=__PART.DK;
      __PARTREE.add();

      _par2:=#__PARTREE.ref();

      __PARTREE.PARENT:=_par2;
      __PARTREE.LABEL1:='SKŁADOWE PARTII'@;
      __PARTREE.LABEL2:='';
      __PARTREE.DOK:='';
      __PARTREE.POZ:='';
      __PARTREE.DATA:=date(0,0,0);
      __PARTREE.ILOSC:=0;
      __PARTREE.PAR_REF:='';
      __PARTREE.ZNACZNIK:='Z';
      __PARTREE.PRDK:='';
      __PARTREE.MAIN:='T';
      __PARTREE.DKREF:='';
      __PARTREE.add();
      _parent:=#__PARTREE.ref();

::    Tabela z listą refów partii, które zostały już rozpisane w danej gałęzi (blokada przed rekurencją)
      {? var_pres('_reftab')>100 || obj_del(_reftab) ?};
      _reftab:=tab_tmp(,'REF','STRING[16]','$ZPARN.ref())');

::    Teraz dane surowców
      ZPARN.cntx_psh();
      ZPARN.index('PARTIA');
      ZPARN.prefix(__PART.PARTIA);
      {? ZPARN.first()
      || _reftab.REF:=$ZPARN.ref();
         _reftab.add();
         exec('openmask','zl_common',ZPARN.ZL);
         OKR.cntx_psh();
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);
         {? OKR.first()
         || {!
            |? ZPARS.use('zpars'+ST.ODDZ+form(OKR.ROK-2000,-2,0,'99'));
               ZPARS.index('PARTIA');
               ZPARS.prefix(ZPARN.ref());
               {? ZPARS.first()
               || {!
                  |? __PARTREE.PARENT:=_parent;
                     __PARTREE.LABEL1:=ZPARS.KTM().KTM;
                     __PARTREE.LABEL2:=ZPARS.KTM().N;
                     __PARTREE.ILOSC:=ZPARS.IL;
                     __PARTREE.PAR_REF:=$ZPARS.ref();
                     __PARTREE.ZNACZNIK:='S';
                     {? ZPARS.SQLDOK<>''
                     || ND.cntx_psh();
                        DK.cntx_psh();
                        ND.use('nagdo'+(form(8+ZPARS.SQLDOK)+3));
                        DK.use(form(8+ZPARS.SQLDOK));
                        DK.clear();
                        {? DK.seek(ZPARS.SQLDOK)
                        || __PARTREE.DOK:=DK.N().SYM;
                           __PARTREE.POZ:=$DK.P;
                           __PARTREE.PRDK:=DK.PRDK;
                           __PARTREE.DATA:=DK.N().D;
                           __PARTREE.DKREF:=$DK.ref()
                        ?};
                        ND.cntx_pop();
                        DK.cntx_pop()
                     ?};
                     __PARTREE.MAIN:='T';
                     __PARTREE.add();
                     exec('drill_part','magdok_partie',#__PARTREE.ref(),_reftab);
                     ZPARS.next()
                  !}
               ?};
               OKR.next()
            !}
         ?};
         OKR.cntx_pop()
      ?};

      __PARTREE.PARENT:=_par2;
      __PARTREE.LABEL1:='ZAREJESTROWANE WYKONANIA'@;
      __PARTREE.LABEL2:='';
      __PARTREE.DOK:='';
      __PARTREE.POZ:='';
      __PARTREE.DATA:=date(0,0,0);
      __PARTREE.ILOSC:=0;
      __PARTREE.PAR_REF:='';
      __PARTREE.ZNACZNIK:='Z';
      __PARTREE.MAIN:='T';
      __PARTREE.add();
      _parent:=#__PARTREE.ref();

::    Teraz dane robocizny
      _formula:="
         _args:=_b;
         {? _args.czy_zlgd=0
         || @.ZLGD.cntx_psh();
            _mask:=(5+@.ZLGD.name())+(ZL_WYRGD.name()+3);
            {? @.ZLGD.name()<>_mask
            || @.ZLGD.use(_mask);
               @.ZLGD.prefix()
            ?};
            ZL_WYRGD.ZLGD()
         ?};
         {? ~(__PARTREE.find_tab(,'PAR_REF',,'=',$@.ZLGD.ref(),'PARENT',,'=',_args.parent))
         || __PARTREE.blank();
            __PARTREE.PARENT:=_args.parent;
            {? @.ZLGD.KOOP='T'
            || __PARTREE.LABEL1:='Kooperacja'@;
               {? @.ZLGD.ZGP().KONTRAH<>null()
               || __PARTREE.LABEL2:='Kontrahent: %1'@[@.ZLGD.ZGP().KONTRAH().KOD]
               || __PARTREE.LABEL2:='<'+'brak kontrahenta na poz. przewodnika'@+'>'
               ?}
            |? @.ZLGD.ZGP().NTIME=0
            || {? @.ZLGD.ZGP().GRUPA<>null()
               || __PARTREE.LABEL1:='Gniazdo'@;
                  __PARTREE.LABEL2:=@.ZLGD.ZGP().GRUPA().SYMBOL
               || __PARTREE.LABEL1:='Stanowisko'@;
                  __PARTREE.LABEL2:=@.ZLGD.ZGP().PLACE().KOD
               ?}
            |? @.ZLGD.BP='P'
            || __PARTREE.LABEL2:=@.ZLGD.P().OSOBA().PIERWSZE;
               __PARTREE.LABEL1:=@.ZLGD.P().OSOBA().NAZWISKO
            |? @.ZLGD.BP='B'
            || __PARTREE.LABEL1:=@.ZLGD.B().KOD;
               __PARTREE.LABEL2:=@.ZLGD.B().NAZ
            ?};
            __PARTREE.DOK:='Operacja: %1 %2'@[$@.ZLGD.ZGP().NRP,@.ZLGD.ZGP().OPIS];
            __PARTREE.POZ:=@.ZLGD.ZMIANA;
            __PARTREE.DATA:=@.ZLGD.DT;
            {? _args.czy_zlgd>0
            || __PARTREE.ILOSC:=ZLGD.IL
            || __PARTREE.ILOSC:=ZL_WYRGD.IL
            ?};
            __PARTREE.PAR_REF:=$@.ZLGD.ref();
            __PARTREE.ZNACZNIK:='P';
            __PARTREE.MAIN:={? @.ZLGD.ref()=_args.main || 'T' || 'N' ?};
            __PARTREE.add()
         ?};
         {? _args.czy_zlgd=0
         || @.ZLGD.cntx_pop()
         ?}
      ";

      ZLGD.cntx_psh();
      ZL_WYRGD.cntx_psh();
      ZGP.cntx_psh();
      TWRKPLC.cntx_psh();
      TWRKZBR.cntx_psh();
      ZPARN.index('PARTIA');
      ZPARN.prefix(__PART.PARTIA);
      {? ZPARN.first()
      || OKR.cntx_psh();
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);

         {? OKR.first()
         || {!
            |? _mask:=5+ZLGD.name();
               _mask+=ST.ODDZ+form(OKR.ROK-2000,-2,0,'99');
               ZLGD.use(_mask);
               ZLGD.index('ZPARN');
               ZLGD.prefix(ZPARN.ref());
               {? ZLGD.first()
               || {!
                  |? _zlgd:=exec('ref_table','#table');
                     _zlgd.add(ZLGD.ref());
                     exec('add_prev_zlgd_2reftable','magdok_partie',ZLGD.ZGP,$ZLGD.ZPARN,_zlgd);
                     {? _zlgd.tab.first()
                     || {!
                        |? _args.parent:=_parent;
                           _args.main:=ZLGD.ref();
                           _args.czy_zlgd:=1;
                           exec('FindAndGet','#table',ZLGD,_zlgd.tab.SQL,,_formula,,_args);
                           _zlgd.tab.next()
                        !}
                     ?};
                     obj_del(_zlgd);
                     ZLGD.next()
                  !}
               ?};
::             Sprawdzenie robocizny w rozbiciu na wyroby
               _mask:=5+ZL_WYRGD.name();
               _mask+=ST.ODDZ+form(OKR.ROK-2000,-2,0,'99');
               ZL_WYRGD.use(_mask);
               ZL_WYRGD.index('ZPARN');
               ZL_WYRGD.prefix(ZPARN.ref());
               {? ZL_WYRGD.first()
               || {!
                  |? _zlgd:=exec('ref_table','#table');
                     _zlgd.add(ZL_WYRGD.ref());
                     _zgp:=exec('FindAndGet','#table',ZLGD,ZL_WYRGD.ZLGD,,"ZLGD.ZGP",null());
                     exec('add_prev_zlgd_2reftable','magdok_partie',_zgp,$ZL_WYRGD.ZPARN,_zlgd,0);
                     {? _zlgd.tab.first()
                     || {!
                        |? _args.parent:=_parent;
                           _args.main:=ZL_WYRGD.ZLGD;
                           _args.czy_zlgd:=0;
                           exec('FindAndGet','#table',ZL_WYRGD,_zlgd.tab.SQL,,_formula,,_args);
                           _zlgd.tab.next()
                        !}
                     ?};
                     obj_del(_zlgd);
                     ZL_WYRGD.next()
                  !}
               ?};
               OKR.next()
            !}
         ?};

::       Jeśli brak zapisów, oznacza to, że brak robocizny zarejestrowanej bezpośrednio do tej partii
::       i trzeba ją pozbierać z partii, z której pochodzi analizowana
         __PARTREE.prefix(_parent);
         {? __PARTREE.size()=0
         || ZPARN.index('IDADD');
            ZPARN.prefix(ZPARN.IDSRC);
            {? ZPARN.first()
            ||
               {? OKR.first()
               || {!
                  |? _mask:=5+ZLGD.name();
                     _mask+=ST.ODDZ+form(OKR.ROK-2000,-2,0,'99');
                     ZLGD.use(_mask);
                     ZLGD.index('ZPARN');
                     ZLGD.prefix(ZPARN.ref());
                     {? ZLGD.first()
                     || {!
                        |? _zlgd:=exec('ref_table','#table');
                           _zlgd.add(ZLGD.ref());
                           exec('add_prev_zlgd_2reftable','magdok_partie',ZLGD.ZGP,$ZLGD.ZPARN,_zlgd);
                           {? _zlgd.tab.first()
                           || {!
                              |? _args.parent:=_parent;
                                 _args.main:=null();
                                 _args.czy_zlgd:=1;
                                 exec('FindAndGet','#table',ZLGD,_zlgd.tab.SQL,,_formula,,_args);
                                 _zlgd.tab.next()
                              !}
                           ?};
                           obj_del(_zlgd);
                           ZLGD.next()
                        !}
                     ?};
::                   Sprawdzenie robocizny w rozbiciu na wyroby
                     _mask:=5+ZL_WYRGD.name();
                     _mask+=ST.ODDZ+form(OKR.ROK-2000,-2,0,'99');
                     ZL_WYRGD.use(_mask);
                     ZL_WYRGD.index('ZPARN');
                     ZL_WYRGD.prefix(ZPARN.ref());
                     {? ZL_WYRGD.first()
                     || {!
                        |? _zlgd:=exec('ref_table','#table');
                           _zlgd.add(ZL_WYRGD.ref());
                           exec('add_prev_zlgd_2reftable','magdok_partie',ZLGD.ZGP,$ZL_WYRGD.ZPARN,_zlgd,0);
                           {? _zlgd.tab.first()
                           || {!
                              |? _args.parent:=_parent;
                                 _args.main:=null();
                                 _args.czy_zlgd:=0;
                                 exec('FindAndGet','#table',ZL_WYRGD,_zlgd.tab.SQL,,_formula,,_args);
                                 _zlgd.tab.next()
                              !}
                           ?};
                           obj_del(_zlgd);
                           ZL_WYRGD.next()
                        !}
                     ?};
                     OKR.next()
                  !}
               ?}
            ?}
         ?};
         __PARTREE.prefix();

         OKR.cntx_pop()
      ?};
      TWRKPLC.cntx_pop();
      TWRKZBR.cntx_pop();
      ZGP.cntx_pop();
      ZLGD.cntx_pop();
      ZL_WYRGD.cntx_pop();
      ZPARN.cntx_pop();
      __PART.next()
   !}
?};
M.cntx_pop();
~~


\drill_part
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Rekurencyjne wypelnienie tabeli __PARTREE ponizej 1. poziomu.
::       W kontekscie biezacy rekord tabeli ZPARS
::   WE: _a - #ref rekordu tabeli __PARTREE, ktory ma byc rodzicem dla wypelnianej grupy
::       [_b] - tabela z refami już przetworzonych partii
::  OLD: \drill_part/partie.fml
::----------------------------------------------------------------------------------------------------------------------
_parent:=_a;
_reftab:={? var_pres('_b')>100 || _b || ~~ ?};
_partia:=null;
_stmag:=ST.MAG;
_beerm:=BEER.M;
_dkname:=DK.name();
_ndname:=ND.name();
_ndref:=null;
ZPARS.cntx_psh;
ZPARN.cntx_psh;
ZLGD.cntx_psh();
{? ZPARS.PRDK<>''
|| DK.cntx_psh();
   DK.use(8+ZPARS.PRDK);
   DK.index('DOKPLUS');
   DK.clear();
   DK.f_clear();
   {? DK.seek(ZPARS.PRDK,8+ZPARS.PRDK)
   || {? DK.PARTIA<>null()
      || _partia:=DK.PARTIA;
         ND.use(8+$DK.N);
         ST.MAG:=DK.N().MAG;
         BEER.M:=DK.M
      ?}
   ?};
   DK.cntx_pop()
?};
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
_il:=0;
{? _partia<>null
||
   {? OKR.last()
   || {!
      |? ND.use('nagdo'+ST.ODDZ+(form(form(OKR.ROK,,,'99'),-4)+2));
         DK.use('dokma'+ST.ODDZ+(form(form(OKR.ROK,,,'99'),-4)+2));
         DK.index('DOKPLUS');
         DK.prefix(ST.MAG,BEER.M,'T','T');
         {? DK.first()
         || _ok:=0;
            {!
            |? {? exec('dk_is_rp','magdok_wspolne',DK.ref()) & $DK.ref=DK.PRDK
               || {? DK.PARTIA=_partia
                  || {? var_pres('_reftab')>100
                     || _reftab.REF:=$DK.PARTIA;
                        _reftab.add()
                     ?};
                     _czy_drill:={? var_pres('_reftab')>100 || ~_reftab.find_key($_partia) || 1 ?};
                     _ok:=1;
                     _ndref:=DK.N;
                     __PARTREE.PARENT:=_parent;
                     __PARTREE.LABEL1:='SKŁADOWE PARTII';
                     __PARTREE.LABEL2:='';
                     __PARTREE.DOK:='';
                     __PARTREE.POZ:='';
                     __PARTREE.DATA:=date(0,0,0);
                     __PARTREE.ILOSC:=0;
                     __PARTREE.PAR_REF:='';
                     __PARTREE.ZNACZNIK:='Z';
                     __PARTREE.PRDK:='';
                     __PARTREE.DKREF:='';
                     __PARTREE.add();
                     _part2:=#__PARTREE.ref();
                     ZPARN.cntx_psh();
                     ZPARN.clear;
                     {? ZPARN.seek(DK.PARTIA)
                     || exec('openmask','zl_common',ZPARN.ZL);
                        ZPARS.prefix(ZPARN.ref())
                     || ZPARS.prefix(null())
                     ?};
                     {? ZPARS.first()
                     || {!
                        |? __PARTREE.PARENT:=_part2;
                           __PARTREE.LABEL1:=ZPARS.KTM().KTM;
                           __PARTREE.LABEL2:=ZPARS.KTM().N;
                           __PARTREE.ILOSC:=ZPARS.IL;
                           __PARTREE.PAR_REF:=$ZPARS.ref;
                           __PARTREE.ZNACZNIK:='S';
                           {? ZPARS.SQLDOK<>''
                           || ND.cntx_psh();
                              DK.cntx_psh();
                              ND.use('nagdo'+(form(8+ZPARS.SQLDOK)+3));
                              DK.use(form(8+ZPARS.SQLDOK));
                              DK.clear();
                              {? DK.seek(ZPARS.SQLDOK)
                              || __PARTREE.DOK:=DK.N().SYM;
                                 __PARTREE.POZ:=$DK.P;
                                 __PARTREE.PRDK:=DK.PRDK;
                                 __PARTREE.DATA:=DK.N().D;
                                 __PARTREE.DKREF:=$DK.ref()
                              ?};
                              ND.cntx_pop();
                              DK.cntx_pop()
                           ?};
                           __PARTREE.add();
                           {? _czy_drill
                           || exec('drill_part','magdok_partie',#__PARTREE.ref(),_reftab)
                           ?};
                           ZPARS.next()
                        !}
                     ?};
                     ZPARN.cntx_pop();
                     ''
                  ?}
               ?};
               DK.next()
            !}
         ?};
         OKR.prev() & _il<16
      !}
   ?}
?};
DK.use(_dkname);
ND.use(_ndname);
ST.MAG:=_stmag;
BEER.M:=_beerm;
ZPARS.cntx_pop;
ZPARN.cntx_pop;
ZLGD.cntx_pop();
OKR.cntx_pop()


\zparn_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: Funckja dodaje nr partii powiązany z materiałem
::  OLD: \zparn_dod/partie.fml
::----------------------------------------------------------------------------------------------------------------------
ZPARN.blank();
ZPARN.win_edit('REDM');
:: [rr] aktualnie pole wyłączone z obsługi
ZPARN.efld_opt('REDM','enable=0',,'ZPEAN');
{? ZPARN.edit("exec('spr_zparn','magdok_partie')")
|| ZPARN.SCEAN:=exec('blpp_sce','kody_kresk');
   ZPARN.ZPEAN:=exec('blpp2sce','kody_kresk');
   ZPARN.KTM:=ZPARN.ZL().KTM;
   {? ZPARN.add()
   || {? ZPARN.SCEAN<>'' || exec('mkodkadd','kody_kresk',ZPARN.ZL().KTM,ZPARN.SCEAN,$ZPARN.ref()) ?};
      {? ZPARN.ZPEAN<>'' & ZPARN.ZPEAN<>ZPARN.SCEAN
      || exec('mkodkadd','kody_kresk',ZPARN.ZL().KTM,ZPARN.ZPEAN,$ZPARN.ref())
      ?}
   ?}
?};
~~


\spr_zparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: Sprawdza unikalność w tabeli ZPARN dla materiału
::   WY: 1/0
::  OLD: \spr_zparn/partie.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? form(ZPARN.SYM)=''
|| FUN.info('Należy podać symbol partii.'@);
    _wyn:='SYM'
|| _ref:={? (menu_pth()+1)='P' || ZPARN.ref() || null ?};
    _sym:=ZPARN.SYM;
    ZPARN.cntx_psh();
    ZPARN.clear();
    ZPARN.index('PARTIA');
    ZPARN.prefix(_sym,);
    {? ZPARN.first()
    || {? _ref<>null & _ref=ZPARN.ref()
       || _wyn:=''
       || FUN.info('Podany nr partii już istnieje.'@);
          _wyn:='SYM'
       ?}
    ?};
    ZPARN.cntx_pop()
?};
_wyn


\zparn_rekpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: Rekord po dla okienka WERM tabeli ZPARN
::  OLD: \zparn_rekpo/partie.fml
::----------------------------------------------------------------------------------------------------------------------
exec('spr_zparn','magdok_partie')


\zparn_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JSz [12.30]
:: OPIS: Usuwa rekord tabeli ZPARN
::  OLD: \zparn_usu/partie.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZPARN.ZL<>null()
|| FUN.info('Partia przypisana do zlecenia produkcyjnego — można usuwać tylko od strony zlecenia.'@)
|? FUN.ask('Czy usunąć wskazany nr partii?'@)
|| exec('delete','zl_partie',ZPARN.ref())
?}


\cr_tab_zrap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Tworzy tabelę tymczasową wyświetlającą powiązania dokumentów raportujących z partiami
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: tab_tmp
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=tab_tmp( 1
               ,'SQL_REF'  ,'STRING[16]'  ,'Ref. SQL'
               ,'SYMBOL'   ,'STRING[20]'  ,'Symbol dokumentu rozchodowego'
               ,'SRC_SYM'  ,'STRING[20]'  ,'Symbol dokumentu zrodlowego'
               ,'SRC_REF'  ,'STRING[16]'  ,'Ref dokumentu zrodlowego'
               ,'POZ'      ,'INTEGER'     ,'Pozycja w dokumencie'
               ,'KTM'      ,'STRING[50]'  ,'Indeks materiałowy'
               ,'KTM_NAZ'  ,'STRING[100]' ,'Nazwa indeksu materiałowego'
               ,'KTM_REF'  ,'STRING[16]'  ,'Ref indeksu materiałowego'
               ,'ILOSC'    ,'REAL'        ,'Ilość na pozycji dokumentu'
               ,'JM'       ,'STRING[20]'  ,'Jednostka materiałowa'
               ,'IL_PART'  ,'REAL'        ,'Ilość powiazana z partiami'
               ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
               ,'ZL_REF'   ,'STRING[16]'  ,'Ref zlecenia'
               ,'ZL_TOP'   ,'STRING[16]'  ,'Ref zlecenia nadrzednego'
               ,'ACCEPTED' ,'STRING[1]'   ,'Zaakceptowany'
               ,'DT'       ,'DATE'        ,'Data'
               );
_cr_env.IN_ZRAP1:=_tab.ndx_tmp(,,'SQL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZRAP2:=_tab.ndx_tmp(,,'ZL_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZRAP3:=_tab.ndx_tmp(,,'ZL_TOP',,,'KTM_REF',,,'SYMBOL',,,'POZ',,);
_cr_env.IN_ZRAP4:=_tab.ndx_tmp(,,'ZL_TOP',,,'SYMBOL',,,'POZ',,);
_tab


\cr_win_zrap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Tworzy okienko wertowania dla tabeli dokumentów raportujących
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::   WY: STRING - uchwyt do okna
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_tab:=_cr_env.TAB_ZRAP;

_title:='Dokumenty raportujące do partii'@;

_wer:=_tab.mk_sel(_title,'P',0,_cr_env.wid_zrap,1,1,,,'U');
_tab.win_fld(_wer,,'SYMBOL',,,20,,,'Symbol'@,0);
_tab.win_fld(_wer,,'DT',,,10,,,'Data'@,0);
_tab.win_fld(_wer,,'KTM',,,-13,,,'Indeks'@,0);
_tab.win_fld(_wer,,'KTM_NAZ',,,-25,,,'Nazwa materiału'@,0);
_tab.win_fld(_wer,,'ILOSC',,,-10,ST.DOKL,,'Ilość'@,0);
_tab.win_fld(_wer,,'JM',,,-5,,,'jm'@,0);
_tab.win_fld(_wer,,'ACCEPTED',,,-5,,,'Zaakceptowany?'@,0,,2,,"\'T\'","\'N\'");

_tab.win_act(_wer,,'Rekord',,,,"exec('cr_tab_zrap_rek','magdok_partie',CR_ENV)");

_tab.win_act(_wer,,'Kolejność');

_cr_env.TAB_ZRAP.win_sel(_wer);
_wer


\cr_tab_zrap_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Przed rekord w tabeli dokumentów raportujących
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_result:='';
_result


\rp2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Dodaje pozycje dokumentu do tabeli tymczasowej
::       Kontekst pracy - rekord tabeli DK
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab:=_cr_env.TAB_ZRAP;

ND.cntx_psh();
ZL.cntx_psh();
M.cntx_psh();
JM.cntx_psh();

_tab.cntx_psh();
_tab.index(_cr_env.IN_ZRAP1);
_tab.prefix($DK.ref());
{? _tab.size()=0
||
   _tab.blank();
   _tab.SQL_REF:=$DK.ref();
   _tab.SYMBOL:=exec('FindAndGet','#table',ND,DK.N,,"SYM",'')+' poz. '+$DK.P;
   _tab.POZ:=DK.P;
   _tab.KTM_REF:=$DK.M;
   _tab.KTM:=DK.M().KTM;
   _tab.KTM_NAZ:=DK.M().N;
   _tab.ILOSC:=DK.IL;
   _tab.JM:=DK.JM().KOD;
   _tab.IL_PART:=0;
   _tab.ZL:=DK.ZL().SYM;
   _tab.ZL_REF:=$DK.ZL;
   _tab.SRC_REF:=DK.PRDK;
   _tab.ACCEPTED:=exec('FindAndGet','#table',ND,DK.N,,"Z",'');
   _tab.DT:=exec('FindAndGet','#table',ND,DK.N,,"D",date(0,0,0));
   _tab.add()
?};

_tab.cntx_pop();
JM.cntx_pop();
M.cntx_pop();
ZL.cntx_pop();
ND.cntx_pop();
~~


\chk_zparn_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Sprawdza, czy partia _a powstała jako potomek partii _b
::   WE: _a - $ZPARN.ref() - potomek
::       _b - $ZPARN.ref() - przodek
::   WY: 1 - partia _a ma jako przodka partię _b
::----------------------------------------------------------------------------------------------------------------------
_zparn:=_a;
_zparn_ancestor:=_b;

_result:=0;

ZPARN.cntx_psh();
ZPARN.index('IDSRC');
{? _zparn_ancestor<>''
||
   ZPARN.prefix(exec('FindAndGet','#table',ZPARN,_zparn_ancestor,,"IDADD",''));
   {? ZPARN.first()
   || {!
      |? {? $ZPARN.ref()=_zparn
         || _result:=1
         || _result:=exec('chk_zparn_path','magdok_partie',_zparn,$ZPARN.ref())
         ?};
         _result=0 & ZPARN.next()
      !}
   ?}
?};
ZPARN.cntx_pop();

_result


\add_prev_zlgd_2reftable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Dopisuje do tabeli refów ZLGD wykonania do wszystkich ZGP poprzedzających danego ZGP
::   WE: _a - ZGP.ref() / $ZGP.ref()
::       _b - $ZPARN.ref() - partia, do której wykonania mają być uwzględnione, i do partii z których pochodzi
::       _c - "ref_table" zawierająca ZLGD.ref()-y
::       [_d] - INTEGER - kontekst pracy: [1] - ZLGD, 0 - ZL_WYRGD
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_zparn:=_b;
_ref_table:=_c;
_czy_zlgd:={? var_pres('_d')=type_of(0) || _d || 1 ?};

ZGH.cntx_psh(); ZGH.prefix();
ZGP.cntx_psh(); ZGP.prefix();

:: --> ZGP, ZGH, VAR1.TPZ, __ZGPTPZ

_prev:=exec('tab_zgp_prev','zl_guide',_zgp);
{? _prev.first()
|| {!
   |?
      {? ZGH.seek(_prev.ZGH) & ZGP.seek(_prev.REF)
      ||
         _zgp_godz:=exec('zgp_godz','zl_wyk',0);
         {? _zgp_godz.TAB.first()
         || {!
            |? {? _czy_zlgd>0
               || {? _zgp_godz.TAB.ZPARN=''
                  ||
::                   Jeżeli robocizna pod spodem nie ma partii, to przypinam ją do pierwszej partii, bo
::                   należy traktować że ta robota miała wpływ na partię wyżej
                     _ref_table.add(_zgp_godz.TAB.ZLGD)
                  |? exec('chk_zparn_path','magdok_partie',_zparn,_zgp_godz.TAB.ZPARN)
                  || _ref_table.add(_zgp_godz.TAB.ZLGD)
                  ?}
               || {? _zgp_godz.TAB.ZPARN='' & exec('zlgd_czy_wyr','zl_wyr',_zgp_godz.TAB.ZLGD)
                  || _zlgd:=exec('FindAndGet','#table',_zgp_godz.TAB.ZLGD,,,,null());
                     ZL_WYRGD.cntx_psh();
                     _mask:=(5+ZL_WYRGD.name())+(ref_name(_zlgd)+3);
                     {? ZL_WYRGD.name()<>_mask
                     || ZL_WYRGD.use(_mask)
                     ?};
                     ZL_WYRGD.index('ZLGD');
                     ZL_WYRGD.prefix(_zlgd);
                     {? ZL_WYRGD.first()
                     || {!
                        |?
                           {? $ZL_WYRGD.ZPARN=''
                           ||
::                            Jeżeli robocizna pod spodem nie ma partii, to przypinam ją do pierwszej partii, bo
::                            należy traktować że ta robota miała wpływ na partię wyżej
                              _ref_table.add($ZL_WYRGD.ref())
                           |? exec('chk_zparn_path','magdok_partie',_zparn,$ZL_WYRGD.ZPARN)
                           || _ref_table.add($ZL_WYRGD.ref())
                           ?};
                           ZL_WYRGD.next()
                        !}
                     ?};
                     ZL_WYRGD.cntx_pop()
                  ?}
               ?};
               _zgp_godz.TAB.next()
            !}
         ?};
         obj_del(_zgp_godz)
      ?};

::    Rekurencja
      exec('add_prev_zlgd_2reftable','magdok_partie',_prev.REF,_zparn,_ref_table,_czy_zlgd);
      _prev.next()
   !}
?};

ZGP.cntx_pop();
ZGH.cntx_pop();
~~


\elements_table1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie wiązania partii
::   WE: _a - środowisko
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_morw;
_tab.NAME:='Wiązanie rozchodów'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_mozw;
_tab.NAME:='Wiązanie zwrotów'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_tie;
_tab.NAME:='Powiąż'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_fifo;
_tab.NAME:='Auto%1'@['FIFO'];
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_lifo;
_tab.NAME:='Auto%1'@['LIFO'];
_tab.add();

_tab.blank();
_tab.ID_SYS:='lbl_partia@selection';
_tab.NAME:='Partia'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='lbl_dk@selection';
_tab.NAME:='Dokument'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:='lbl_ilosc@selection';
_tab.NAME:='Ilość'@;
_tab.add();

_tab


\elements_table2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Tabela elementów tłumaczonych w desktopie przycisków
::   WE: _a - środowisko
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;

_tab:=exec('elements_table','#desktop');

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_akcf;
_tab.NAME:='Akceptuj'@+' [!]';
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_akc;
_tab.NAME:='Akceptuj'@;
_tab.add();

_tab.blank();
_tab.ID_SYS:=_cr_env.ctr_anul;
_tab.NAME:='Anuluj'@;
_tab.add();

_tab


\load_dk4zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Ładuje dokumenty powiązane ze zleceniem do kreatora
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - ZL.ref() - zlecenie z ktorego ladujemy
::       [_c] - ref_table - tablica odwiedzonych refów
::   WY: ~~
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_zl:=_b;
_visited:=~~;
{? var_pres('_c')>100
|| _visited:=_c
|| _visited:=exec('ref_table','#table')
?};

ZL.cntx_psh();
ZL.prefix();
{? _visited.r_find(_zl)=0 & ZL.seek(_zl)
|| _visited.add(ZL.ref());

   _args_rw:=exec('load_dk_a','magdok_partie');
   _args_rw.cr_env:=_cr_env;
   _args_rw.MODE:='RW';

   _args_zw:=exec('load_dk_a','magdok_partie');
   _args_zw.cr_env:=_cr_env;
   _args_zw.MODE:='ZW';

:: LADOWANIE RW i ZW
   _rule:="exec('load_dk','magdok_partie',_b)";

:: Ładujemy najpierw dla zlecenia na którym stoję
   _args_rw.ZL:=ZL.ref();
   _args_zw.ZL:=ZL.ref();
:: Zbieram dla zlecenia RW z masek od powolania zlecenia
   _name:=5+DK.name();
   _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
   _msk_end:=~~;
   {? ZL.STAN='Z'
   || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
      _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
   ?};
   exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args_rw);
   exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args_zw);

:: A następnie dla wszystkich podrzędnych, jeżeli takowe są
   ZL.cntx_psh();
   ZL.index('TREEMTU');
   ZL.prefix(ZL.ref());
   {? ZL.first()
   ||
      {!
      |?
::       !!! REKURENCJA !!!
         exec('load_dk4zl','magdok_partie',_cr_env,ZL.ref(),_visited);
         ZL.next()
      !}
   ?};
   ZL.cntx_pop()
?};
ZL.cntx_pop();
~~


\sum_lil4zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Sumuje ilość zapotrzebowania na dany surowiec wynikający z limitów danego zlecenia i jego zleceń podrzędnych
::       (rozliczanych w partii zlecenia podanego w parametrze)
::   WE: _a - $ZL.ref - zlecenie, od którego zaczynamy (na którym rozliczane są partie)
::       _b - M.ref - poszukiwany surowiec
::   WY: REAL - Zsumowana ilość z limitów
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_ktm:=_b;
_sum:=0;

_can_continue:=1;

ZL.cntx_psh(); ZL.clear();

{? _can_continue>0
||
   {? ZL.seek(_zl)
   ||
      ZLIM.cntx_psh();
::    Znajduje najbliższe najwyższe zlecenie z partią
      _party_first:=exec('party_first','zl_link');

      exec('openmask','zl_common',ZL.ref());
      ZLIM.index('ZLMZLD_R');
      ZLIM.prefix(ZL.ref(),_ktm);
      {? ZLIM.first()
      || {!
         |? {? ZLIM.SO='S' & (ZLIM.AKC='T' | ZLIM.LIMIT='N')
            || _sum+=ZLIM.LIL
            ?};
            ZLIM.next()
         !}
      ?};

::    Sprawdzam podzlecenia
      ZL.cntx_psh();
      ZL.index('NRPZL');
      ZL.prefix(ZL.UNRZL);
      {? ZL.first()
      ||
         {!
         |?
            {? exec('party_first','zl_link')=_party_first
            ||
::             !!! REKURENCJA !!!
               _il:=exec('sum_lil4zl','magdok_partie',ZL.ref(),_ktm);
               _sum+=_il
            ?};
            ZL.next()
         !}
      ?};
      ZL.cntx_pop();
      ZLIM.cntx_pop()
   ?}
?};
ZL.cntx_pop();
_sum


\create_zpar_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Tworzy dialog z pytaniem
::   WE: _a - cr_env - srodowisko kreatora exec('cr_env','magdok_partie')
::       _b - tab_tmp - tabela dokumentów
::       _b - tab_tmp - tabela docelowa, której okienko redagowania wyświetlimy
::   WY: REAL - ilość lub ~~ jeżeli użytkownik zrezgnował
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_cr_env:=_a;
_tab_dok:=_b;
_tab:=_c;

_result:=~~;

_typ:='';
_tab_part:=_cr_env.TAB_PART;
{? _cr_env.TIE_MODE='RW'
|| _typ:=exec('type_rw','magdok_partie')
|? _cr_env.TIE_MODE='ZW'
|| _typ:=exec('type_zw','magdok_partie')
?};

_names:=obj_new(2);
_names[1]:='Wiązanie rozchodów'@;
_names[2]:='Wiązanie zwrotów'@;
_vals:=obj_new(2);
_vals[1]:="exec('type_rw','magdok_partie')";
_vals[2]:="exec('type_zw','magdok_partie')";

_tab.blank();
_tab.TYP:=_typ;
_tab.PART_SYM:=_tab_part.PART_SYM;
_tab.DK_SYM:=_tab_dok.SYMBOL;
_tab.JM:=_tab_dok.JM;
_dokl:=ST.DOKL;
_dokl:=exec('FindAndGet','#table',M,_tab_dok.KTM_REF,,"DOKL",0);

_fml:=$('\'in_prec=%1\''[$_dokl]);
_tab.fld_fml('ILOSC','EDIT_FORMAT',_fml);
_fml:=$('\'out_prec=%1\''[$_dokl]);
_tab.fld_fml('ILOSC','DISPLAY_FORMAT',_fml);

_tab.fld_fml('TYP','BEFORE_EDIT',"0");
_tab.fld_fml('PART_SYM','BEFORE_EDIT',"0");
_tab.fld_fml('DK_SYM','BEFORE_EDIT',"0");
_tab.fld_fml('JM','BEFORE_EDIT',"0");

_il:=exec('sur_il4part','magdok_partie',_cr_env,_tab_dok.SQL_REF,_tab_part.ZPAR_REF,1);
_tab.ILOSC:=_il$_dokl;
VAR.REAL:=_tab.ILOSC;

_edit:=_tab.mk_edit('Tworzenie powiązań'@,0,'#zparildiag');
_tab.win_esep(_edit,'Tryb'@);
_name:=' ';
_tab.win_efld(_edit,_tab,'TYP',,,100,0,,_name,,,'radio-buttons',,_names[1],_vals[1]
                                                                 ,_names[2],_vals[2]);
_tab.win_esep(_edit,'Dane powiązania'@);
_tab.win_efld(_edit,_tab,'PART_SYM',,,30,0,,'Partia'@);
_tab.win_efld(_edit,_tab,'DK_SYM',,,30,0,,'Dokument'@);

_tab.win_esep(_edit,'Ilość do powiązania'@);
_tab.win_efld(_edit,_tab,'ILOSC',,,30,0,,'Ilość'@);
_tab.win_efld(_edit,_tab,'JM',,,10,0,,'jm'@);
exec('ok_esc','#window',_tab,_edit);
_tab.win_edit(_edit);

_valid:="
   _result:='';
   {? cur_tab(1,1).ILOSC>VAR.REAL
   || _result:='ILOSC';
      FUN.emsg('Ilość do powiązania nie może przekraczać maksymalnej ilości na dokumencie: %1'@[$VAR.REAL])
   ?};
   _result
";
{? _tab.edit(_valid)
|| _result:=_tab.ILOSC
?};
_result


\disp_zparn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Wyświetlenie informacji o parti
::----------------------------------------------------------------------------------------------------------------------
_atrmjs:=ATR.MJS;
ATR.MJS:='ZPARN';
ATR.M_ATR:=ZPARN.KTM().M_ATR;
ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
ZPARN.DK_C().SYM;
ZPARN.KTM().M_ATR().SYM;
{? ZPARN.DK_C<>null() & ZPARN.DK_C().M_ATR<>null()
|| {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.DK_C().WAR'+form(_i,-2,,'99')))() !}
|| {! _i:=1..10 |! {? ZPARN.ZL().KTM().M_ATR=ZPARN.KTM().M_ATR & ZPARN.ZL().DK_C<>null()
                   || ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.ZL().DK_C().WAR'+form(_i,-2,,'99')))()
                   || ($('ATR.WAR'+form(_i,-2,,'99')))():=''
                   ?}
   !}
?};
ZPARN.display();
ATR.MJS:=_atrmjs;
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 b92de523f9d44a4bfc7ca24f9e9ffec515e4dfae9db5c56c2ba1c5a929ddb853361b3d3101493867aa79b4b308a06411efddf380a44306aa07643b5d19219d476e1a8602159c051358a61718e29ce3f62d7720d8457a13e44c0bdaff0734476ffed550c45a0ff719d1bc3f268b47e96d9a9e321d64e820e305169245b219e0d4
