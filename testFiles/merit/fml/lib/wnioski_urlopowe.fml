:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: wnioski_urlopowe.fml
:: Utworzony: 26.07.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły do obsługi wniosków urlopowych, w szczególności czynności rejestracji i weryfikacji.
::======================================================================================================================


\polacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Przypisuje znacznik nieobecności właściwej dla danego wniosku. Operacja jest przeprowadzana dla wniosku, który
::       wcześniej był związany z nieobecnością wskazywaną przez _b (jeżeli podano), albo dla bieżącego.
::   WE:  _a  [REFERENCE] - Wskazanie nieobecności bieżącej.
::       [_b] [REFERENCE] - Wskazanie nieobecności poprzedniej (przy zamianie).
::   WY: Wskazanie poprawionego rekordu lub null().
::  OLD: \polacz/wnio_url.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();

{? var_pres('_a')<>type_of(_ret)
|| return(_ret)
?};
_po:={? var_pres('_a')=type_of(_ret) & (_a=null() | ref_tab(_b)=N | ref_tab(_b)=OS_N) || _a || null() ?};
_przed:={? var_pres('_b')=type_of(_ret) & _b<>_ret & (ref_tab(_b)=N | ref_tab(_b)=OS_N) || _b || null() ?};

{? _po=_ret & _przed=_ret
|| return(_ret)
?};

_rt:={? _po<>_ret || ref_tab(_po) || ref_tab(_przed) ?};

{? _rt=N
|| _typ:='P'
|? _rt=OS_N
|| _typ:='Z'
|| return(_ret)
?};

NWU.cntx_psh();
{? _typ='Z'
|| NWU.index('STATZLE')
|| NWU.index('STATUS')
?};
NWU.prefix();
{? _przed=_ret | NWU.find_key(_przed)
|| _par294:=PAR_SKID.get(294);
   _por:=exec('lic','#b_domain','POR');
   _choice:=
      {? _a | _par294='N' | ~(
            exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_ORWN') |
            exec('chk_role','#b__box',OPERATOR.USER,'PKW_POR_IRWU') |
            exec('chk_role','#b__box',OPERATOR.USER,'PKW_POR_IWWU')
         )
      || 0
      || {? _par294='P'
         || FUN.choice(
               '%1\n%2'
                  [
                     'Nieobecność wprowadzona na podstawie wniosku urlopowego.'@,
                     'Należy wybrać sposób obsługi wniosku.'@
                  ],,
               'Usuń'@,
               ("{? ~_a || 'Odrzuć'@ || ~~ ?}")(_por),,,
               'Pozostaw'@
            )
         |? _par294='U'
         || 1
         |? _par294='S'
         || {? _por
            || FUN.choice(
                  '%1\n%2'
                     [
                        'Status wniosku urlopowego powiązanego z nieobecnością nie może zostać zmieniony '
                        'na "Odrzucony przez kadry" w przypadku posiadania licencji na Portal HR.'@,
                        'Należy wybrać inny sposób obsługi wniosku.'@
                     ],,
                  'Usuń'@,,,,
                  'Pozostaw'@
               )
            || 2
            ?}
         ?}
      ?};
   {? _choice=1
   || _delete:=1;
      {? _por
      || EDOKUM.cntx_psh();
         EDOKUM.use(exec('nwu_edokum_mask','portal_method_chr'));
         EDOKUM.index('DOK_POW');
         EDOKUM.prefix(NWU.uidref());
         {? EDOKUM.first()
         || _delete:=0;
            do();
            {? exec('EDOKUM_del','portal_wnioski',EDOKUM.ref(),0)
            || NWU.del()
            ?};
            end()
         ?};
         EDOKUM.cntx_pop()
      ?};
      {? _delete
      || NWU.del()
      ?}
   || {? _typ='Z'
      || NWU.OS_N:=_a
      || NWU.N:=_a
      ?};
      {? _choice=2
      || NWU.AZ:='O'
      ?};
      {? NWU.put()
      || _ret:=NWU.ref()
      ?}
   ?}
?};
NWU.cntx_pop();
{? _ret<>null()
|| NWU.get()
?};
_ret


\nwu_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwu_modb','wnioski_urlopowe') & exec('nwu_chk','wnioski_urlopowe',0)


\nwu_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwu_modb','wnioski_urlopowe') & exec('nwu_chk','wnioski_urlopowe',1)


\nwu_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('upgrade2226_nru01','wnioski_urlopowe')
|| exec('del_ndx','#table',NWOPO,'NWU',NWU.ref())
|| 1
?} &
exec('del_ndx','#table',ZALACZ,'NAG',NWU.uidref()) &
exec('del_ndx','#table',WT_NWU,'NUB',NWU.ref())


\nwu_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? NWU.CREATOR=null()
|| NWU.CREATOR:=NWU.P
?};
{? NWU.PARTDAY<>'T'
|| NWU.G:=0
?};
1


\nwu_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli NWU.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(NWU,
   $("_a.table(_b,"+$_put+",,'P','D','R','OD','DO')")
)


\status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca opis statusu wniosku urlopowego.
::   WE: [_a] [STRING] - Kod wniosku urlopowego (domyślnie: ???).
::   WY: Opis statusu.
::----------------------------------------------------------------------------------------------------------------------
:: Statusy wniosków:
::    ''  - Wniosek wprowadzony przez pracownika (w ramach czynności procesowej) i zapisany na dysku (a więc sprawdzony
::          w zakresie poprawności danych). Jednak sama czynność nie została zakończona.
::    '?' - Wniosek wprowadzony z obszaru roboczego (mikroczynność) lub w ramach czynności procesowej, która została
::          zakończona. Czeka na weryfikację przełożonego.
::
::    'T' - Wniosek zaakceptowany przez przełożonego. Tylko taki wniosek może być podstawą do wprowadzenia nieobecności.
::    'N' - Wniosek odrzucony przez przełożonego.
::
::    'D' - Wniosek zgłoszony do wycofania.
::          Scenariusz: Przełożony zaakceptował wniosek (T). Pracownik chce go jednak wycofać.
::    'W' - Wniosek wycofany.
::
::    'O' - Wniosek odrzucony przez kadry.
::
:: Przepływy:
::    ''  -> '?'
::    '?' -> {'T'/'N'}  Złożony wniosek [?] może zostać zaakceptowany [T] lub odrzucony [N].
::    'T' -> {'D'/'O'}  Tylko zaakceptowany wniosek [T] można próbować wycofać [D] lub odrzucić [O].
::    'D' -> {'W'/'T'}  Wniosek wycofywany [D] może zostać uwzględniony (wycofany) [W] lub odrzucony, a więc uznany za
::                      obowiązujący (zaakceptowany) [T].
::
::  OLD: \status/wnio_url.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || _a || '???' ?};
{? _kod=''
|| 'W trakcie wprowadzania'@
|? _kod='?'
|| 'Do weryfikacji'@
|? _kod='T'
|| _stat:={? NWU.N=null() & NWU.OS_N=null() || 'Przyjęty'@ || 'Wprowadzony'@ ?};
   {? NWU.PLA='N' || _stat+=' (brak zgody na przekroczenie limitu)'@ ?};
   _stat
|? _kod='N'
|| 'Odrzucony'@
|? _kod='D'
|| 'Do wycofania'@
|? _kod='W'
|| 'Wycofany'@
|? _kod='O'
|| 'Odrzucony przez kadry'@
|| _kod
?}


\nwu_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Rekord - przed" dla tabeli NWU.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Osoba weryfikująca wniosek.
OSOBA.cntx_psh();
POLA_GRP.TXT_1:=
   {? NWU.KTO_WER<>null()
   || NWU.KTO_WER().NAZWISKO+' '+NWU.KTO_WER().PIERWSZE
   |? NWU.AO<>null()
   || NWU.AO().NAZWISKO+' '+NWU.AO().PIERWSZE
   || ''
   ?};
OSOBA.cntx_pop();

:: Status wniosku.
EDIT_VAR.NWU_STAT:=exec('status','wnioski_urlopowe',NWU.AZ);

''


\przelozony
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła, na potrzeby obsługi wniosków urlopowych, zwraca tabelę tymczasową z listą przełożonych.
::       Poprawność obowiązkowego parametru NIE jest sprawdzana.
::   WE:  _a  [REFERENCE] - Wskazanie pracownika.
::       [_b] [NUMBER]    - Uwzględniać nieobecności?
::                            0 - Nie [domyślnie]. Wyszukiwany będzie bezpośredni przełożony - jego ewentualne
::                                nieobecności nie są analizowane.
::                            1 - Tak. Jeżeli przełożony jest nieobecny - wyszukiwany będzie zastępujący przełożonego.
::       [_c] [STRING]    - Symbol czynności, do której weryfikowane są uprawnienia [domyslnie: PKW_POR_IWWU].
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
_pref:=_a;
_nb:=var_pres('_b')=type_of(0) & _b;
_uid:={? var_pres('_c')=type_of('') & |_c<>'' || _c || 'PKW_POR_IWWU' ?};

_TAB:=exec('show_kier','stanprac',_pref,1,'TYPPOZ','AKCWNIO',_uid,_nb,1);
{? _TAB.first()
|| {!
   |? {? _TAB.J='Samoakceptacja'@ | _TAB.J*'Akceptujący'@=1
      || _TAB.next()
      || _TAB.del()
      ?}
   !}
?};
_TAB


\oblicz_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Dla wskazanej parametrem nieobecności formuła zwraca informacje o wysokości limitu rocznego i dostępnego
::       (pozostałego do wykorzystania).
::   WE:  _a  [REFERENCE]        - Wskazanie pracownika.
::        _b  [NUMBER/REFERENCE] - Kod lub wskazanie składnika płacowego.
::        _c  [DATE]             - Data początkowa nieobecności.
::       [_d] [REFERENCE]        - Wskazanie "bieżącego" wniosku urlopowego, który nie będzie brany pod uwagę, przy
::                                 ustalaniu limitu.
::       [_e] [DATE]             - Data końcowa nieobecności.
::   WY: Tablica z nazwanymi elementami.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('OK','LIMIT','POZOST','LIMITG','POZOSTG','JM','ERR_KOD','ERR_TXT');
:: Opis pól:
::    * OK              - Czy możliwe jest dalsze procesowanie (rejestracja/weryfikacja) wniosku [0/1]?
::                        Czy pozwalają na to limity (jeżeli nieobecność jest limitowana) oraz parametry (np. możliwość
::                        przekraczania limitów).
::    * LIMIT/LIMITG    - Pola zawierają informacje o przysługującym limicie (w dniach / godzinach) ustalanym na datę
::                        początkową nieobecności. Nie są więc w nich uwzględnione: urlop uzupełniający i dodatkowy,
::                        jeżeli daty ich przyznania są późniejsze niż początek nieobecności.
::    * POZOST/POZOSTG  - Pola zawierają informacje o ilościach (dniach / godzinach) pozostających do dyspozycji
::                        współpracownika.
::    * JM              - Jednostka miary (kod) rozliczająca nieobecność:
::                         * R  - Dni robocze
::                         * K  - Dni kalendarzowe
::                         * G  - Godziny robocze
::                         * RG - Niby rozliczamy w dniach roboczych, ale zliczamy godziny.
::    * ERR_KOD         - Pole zawiera kod sytuacji, która wystąpiła (celowo nie używam słowa "błąd").
::                         * BRAK_PRAWA            - Próba wykorzystania urlopu przed datą nabycia praw do niego.
::                         * BRAK_KARTY            - Brak karty urlopowej.
::                         * BRAK_LIMITU           - Brak zapisu w dyscyplinie pracy.
::                         * PRZEKROCZONY_WYMIAR   - Przekroczony dopuszczalny limit.
::                         * INFO                  - Dodatkowe informacje.
::    *ERR_TXT          - Pole zawiera treść komunikatu opisującego sytuację, która wystąpiła.
::
_ret.OK:=_ret.LIMIT:=_ret.POZOST:=_ret.LIMITG:=_ret.POZOSTG:=0;
_ret.JM:=_ret.ERR_KOD:=_ret.ERR_TXT:='';

exec('__RUB','object');

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=P
|| _refP:=_a
|| return(_ret)
?};
{? var_pres('_b')=type_of(0)
|| _refR:=__RUB.ref(_b)
|? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=R
|| _refR:=_b
|| return(_ret)
?};
{? var_pres('_c')=type_of(date()) & _c<>date(0,0,0)
|| _dt:=_c
|| return(_ret)
?};
_nwu:=null();
{? var_pres('_d')=type_of(_nwu) & _d<>_nwu & ref_tab(_d)=NWU
|| _nwu:=_d
?};
_dte:=date(0,0,0);
{? var_pres('_e')=type_of(date()) & _e<>date(0,0,0)
|| _dte:=_e
?};

_rok:=_dt~1;
_start:=date(_rok,1,1);
_stop:=date(_rok,12,31);

P.cntx_psh();
P.prefix();
{? P.seek(_refP)
|| exec('__KAL','object');
   __KAL.set_cal(P.KAL,_rok);
   _fnorma:=exec('norma_fml','godziny');
   _uz:=__RUB.sys_attr(_refR,1111,_dt);

   {? _uz
::    Urlop wypoczynkowy na żądanie (jeszcze do niego wrócimy).
   || exec('czytaj','#stalesys',_dt,KST_PAR);
      _wyk:=exec('wykorzystany','kart_url',date(_rok,12,31),,1,2,1);
      _ret.LIMIT:=KST_PAR.URL_LIM;
      STAZ.cntx_psh();
      STAZ.index('_STAZE');
      STAZ.prefix(P.FIRMA,P.OSOBA);
      {? STAZ.last()
      || {!
         |? {? STAZ.DZ~1=_rok
            || _ret.LIMIT-=STAZ.WUZ
            ?};
            STAZ.prev()
         !}
      ?};
      STAZ.cntx_pop();
      {? _ret.LIMIT<0
      || _ret.LIMIT:=0
      ?};
      _ret.POZOST:=_ret.LIMIT-_wyk.D;
::    Poprzednio: Niby rozliczamy w dniach roboczych, ale zliczamy godziny robocze...
::    Rozliczamy w dniach roboczych (ER/WRT/XP/21.14/2108/0067) limit dzienny (typowo 4dni),
::    a w godzinach sprawdzamy czy mieści się w całości pozostałego limitu urlpu wypoczynkowego.
      _ret.JM:='Rg'
   ?};

:: Dla urlopu na żądanie tak jak dla urlopu wypoczynkowego - limit w godzinach pobieram z karty urlopowej,
:: bo sprawdzamy czy z urlopem na żądanie mieścimy się w godzinach całego ulopu wypoczynkowego.
:: Limit dzienny urlopu na żądanie zostaje taki jak był wcześniej obliczony i nie jest w poniższym procesie nadpisywany.
   {? __RUB.sys_attr(_refR,1112,_dt) | _uz | __RUB.sys_attr(_refR,1114,_dt)
::    Urlop wypoczynkowy (zwykły).
   || KART_URL.cntx_psh();
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(_refP,_rok);
      {? KART_URL.first()
      || {? KART_URL.PIERWSZY='T' & exec('czy_nowy','kart_url') & KART_URL.LIM_AKT
         || _d_nab:=P.NAB_URL;
            {? _dt<_d_nab
            || _ret.ERR_KOD:='BRAK_PRAWA';
               _ret.ERR_TXT:='Pierwszy urlop przysługiwać będzie od %1 roku.'@[_d_nab$6]
            || _months:=1;
               __KAL.rdat(_d_nab,_dt);
               _months+=__KAL.month;
               _tab:=exec('pierwszy','kart_url',1);
               _wym_nab:=0;
               {? _tab.find_key(_d_nab~2)
               || {!
                  |? _months-=1;
                     _wym_nab+=_tab.W;
                     _months & _tab.next()
                  !}
               ?};
               NWU.cntx_psh();
               NWU.index('ROD');
               NWU.prefix();
               {? NWU.seek(_nwu)
               || {? _wym_nab<NWU.NR
                  || _ret.ERR_KOD:='PRZEKROCZONY_WYMIAR';
                     _ret.ERR_TXT:='Przekroczono dopuszczalny limit urlopu. '
                                   'Nabyty wymiar pierwszego urlopu to: %1 (%2 godz.).'@
                                   [$_wym_nab+{? _wym_nab>=2 || ' dni'@ || ' dnia'@ ?},$(_wym_nab*8)]
                  ?}
               ?};
               NWU.cntx_pop();
               {? ~_uz
               || _ret.LIMIT:=_wym_nab;
                  _ret.POZOST:=_wym_nab-KART_URL.URL_WYK
               ?};
               _ret.LIMITG:=_ret.LIMIT*_fnorma(_dt);
               _ret.POZOSTG:=_ret.POZOST*_fnorma(_dt)
            ?}
         || {? ~_uz || _ret.LIMIT:=KART_URL.LIM_ZAL+KART_URL.LIM_AKT ?};
            _ret.LIMITG:=KART_URL.LIM_ZALG+KART_URL.LIM_AKTG;
            {? KART_URL.DATA_DOD<=_dt
            || {? ~_uz || _ret.LIMIT+=KART_URL.URL_DOD ?};
               _ret.LIMITG+=KART_URL.URL_DODG
            ?};
            {? ~_uz
            || _ret.POZOST:=_ret.LIMIT-KART_URL.URL_WYK;
               {? _ret.POZOST<0
               || _ret.POZOST:=0
               ?}
            ?};
            _ret.POZOSTG:=_ret.LIMITG-KART_URL.URL_WYKG;
            {? _ret.POZOSTG<0
            || _ret.POZOSTG:=0
            ?}
         ?}

      || _ret.ERR_KOD:='BRAK_KARTY';
         _ret.ERR_TXT:='Nie znaleziono karty urlopowej na rok %1.'@[$_rok]
      ?};
      KART_URL.cntx_pop();
::    Niby rozliczamy w dniach roboczych, ale zliczamy godziny robocze...
      {? ~_uz || _ret.JM:='RG' ?}
   |? __RUB.sys_attr(_refR,1113,_dt)
::    Urlop dodatkowy.
   || KART_URL.cntx_psh();
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(_refP,_rok);
      {? KART_URL.first()
      || _d_nab:=KART_URL.DATA_NSP;
         {? _d_nab<>date(0,0,0) & _d_nab<=_dt
         || _ret.LIMIT:=KART_URL.URL_NSP+KART_URL.NSP_ZAL;
            _ret.LIMITG:=KART_URL.URL_NSPG+KART_URL.NSP_ZALG
         || {? _d_nab=date(0,0,0)
            || _ret.ERR_KOD:='BRAK_PRAWA';
               _ret.ERR_TXT:='Pracownikowi nie przysługuje urlop dodatkowy.'@
            || _ret.ERR_KOD:='BRAK_PRAWA';
               _ret.ERR_TXT:='Pierwszy urlop dodatkowy przysługiwać będzie od %1.'@[$_d_nab]
            ?}
         ?};
         _ret.POZOST:=_ret.LIMIT-KART_URL.NSP_WYK;
         {? _ret.POZOST<0
         || _ret.POZOST:=0
         ?};
         _ret.POZOSTG:=_ret.LIMITG-KART_URL.NSP_WYKG;
         {? _ret.POZOSTG<0
         || _ret.POZOSTG:=0
         ?}
      || _ret.ERR_KOD:='BRAK_KARTY';
         _ret.ERR_TXT:='Nie znaleziono karty urlopowej na rok %1.'@[$_rok]
      ?};
      KART_URL.cntx_pop();
::    Niby rozliczamy w dniach roboczych, ale zliczamy godziny robocze...
      _ret.JM:='RG';
::    Sprawdzenie dyscypliny pracy urlopu rehabilitacyjnego która może mieć wpływ na urlop dodatkowy
      _rn:=__RUB.sys_kod(1171,,1);
      {? _rn<>0
      || _ref:=__RUB.ref(_rn);
         DS.cntx_psh();
         DS.index('DYSCYPLI');
         DS.prefix(_refP,_rok,_ref);
         {? DS.first()
         || _poz_rg:=0;
            _poz_rd:=0;
            _z_dsd:=0;
            _z_dsg:=0;
            {? DS.NR='G'
            || _poz_rg:=DS.NN-DS.NW;
               _z_dsg:=1
            |? DS.NR='R' | DS.NR='K'
            || _poz_rd:=DS.NN-DS.NW;
               _z_dsd:=1
            ?};
            {? _z_dsd | _z_dsg
            || NWU.cntx_psh();
               NWU.index('ROD');
               NWU.prefix(_refP,_ref);
               {? NWU.find_le(_stop) & _start<=NWU.DO
               || {!
                  |? {? NWU.ref()<>_nwu & NWU.OS_N=null() & NWU.N=null() & ~('NWO'*NWU.AZ)
                     || {?  DS.NR='K'
                        || _poz_rd-=1
                        |? DS.NR='G'
                        || _ig:={? NWU.PARTDAY='T' || NWU.G$2 || NWU.NG ?};
                           _poz_rg-=_ig
                        |? DS.NR='R'
                        || _poz_rd-=NWU.NR
                        ?}
                     ?};
                     NWU.prev() & NWU.OD<=_stop & _start<=NWU.DO
                  !}
               ?};
               NWU.cntx_pop();
               {? _z_dsd & _poz_rd<_ret.POZOST
               || _ret.POZOST:=_poz_rd
               |? _z_dsg & _poz_rg<_ret.POZOSTG
               || _ret.POZOSTG:=_poz_rg;
                  _ret.POZOST:=_poz_rg/_fnorma(_dt)$2
               ?};
               {? _ret.POZOST<0
               || _ret.POZOST:=0
               ?};
               {? _ret.POZOSTG<0
               || _ret.POZOSTG:=0
               ?}
            ?}
         ?};
         DS.cntx_pop()
      ?}
   |? __RUB.sys_attr(_refR,1931,_dt)
::    Inny rodzaj nieobecności - sprawdzamy w Dyscyplinie pracy.
   || DS.cntx_psh();
      DS.index('DYSCYPLI');
      DS.prefix(_refP,_rok,_refR);
::    Parametr określający zachowanie w przypadku urlopu z Art. 188 ('N'/'I'/'B')
      _sprawdzaj:=exec('get_par','#parametr',277);
      {? DS.first()
      || _limit:=1;
         {? _sprawdzaj<>'N' & __RUB.sys_attr(_refR,1162,_dt)
::          Sprawdzenie czy pracownik ma dzieci w wieku poniżej 14 lat
         || _czy_dzieci:=exec('czy_dzieci_wiek','wnioski_urlopowe',P.ref,14,_dt,_dte);
            {? ~_czy_dzieci
            || {? _sprawdzaj='B'
               || _limit:=0;
                  _ret.ERR_KOD:='BRAK_PRAWA';
                  _ret.ERR_TXT:='Brak informacji o dzieciach, które nie ukończyły 14 roku życia.'@
               |? _sprawdzaj='I'
               || _ret.ERR_KOD:='INFO';
                  _ret.ERR_TXT:='Brak informacji o dzieciach, które nie ukończyły 14 roku życia.'@
               ?}
            ?}
         ?};
         {? _limit
         || _ret.LIMIT:=DS.NZ+DS.NN;
            _ret.POZOST:=_ret.LIMIT-DS.NW;
            _ret.JM:=DS.NR
         ?}
      || _ret.ERR_KOD:='BRAK_LIMITU';
         _ret.ERR_TXT:='Brak informacji o dopuszczalnym limicie nieobecności.'@
      ?};
      DS.cntx_pop()

   |? __RUB.sys_attr(_refR,193,_dt) & ~__RUB.sys_attr(_refR,1933,_dt)
::    Nieobecność nielimitowana (niewymagająca ustalenia limitów).
   || _ret.OK:=1
   ?};

   {? _ret.LIMIT<=0
::    Jeżeli nie udało się ustalić limitu - usuwamy ewentualną informację o "jednostce miary".
   || _ret.JM:=''

::    Jeżeli nieobecność jest limitowana to uwzględnijmy złożone wnioski urlopowe.
   || _ret.OK:=1;

      _refRuz:=__RUB.ref(__RUB.sys_kod(1111,_dt));
      _refRuw:=__RUB.ref(__RUB.sys_kod(1112,_dt));
      _refRur:=__RUB.ref(__RUB.sys_kod(1171,_dt));
      _refRud:=__RUB.ref(__RUB.sys_kod(1113,_dt));
      _refRuo:=__RUB.ref(__RUB.sys_kod(1114,_dt));
::    Zarówno dla urlopu na żądanie, oddelegowanie i urlopu wypoczynkowego należy sumować wnioski obu typów podczas
::    składania jednego z nich:
      {? _refR=_refRuz | _refR=_refRuw | _refR=_refRuo
      || _refyR:=obj_new(3);
         _refyR[1]:=_refRuz;
         _refyR[2]:=_refRuw;
         _refyR[3]:=_refRuo
::    Jeżeli urlop rehabilitacyjny to odejmij jeszcze wnioski urlopu dodatkowego:
      |? _refR=_refRur
      || _refyR:=obj_new(2);
         _refyR[1]:=_refRur;
         _refyR[2]:=_refRud
      || _refyR:=obj_new(1);
         _refyR[1]:=_refR
      ?};

      NWU.cntx_psh();
      NWU.index('ROD');
      {! _ii:=1..obj_len(_refyR)
      |! NWU.prefix(P.ref(),_refyR[_ii]);

::       Zakładamy, że wnioski nie mogą obejmować przełomu roku.
         {? NWU.find_le(_stop) & _start<=NWU.DO
         || {!
            |? {? NWU.ref()<>_nwu & NWU.OS_N=null() & NWU.N=null() & ~('NWO'*NWU.AZ)
               || _il:=0;
                  {? _ret.JM='G'
                  || _il:={? NWU.PARTDAY='T' || NWU.G$2 || NWU.NG ?};
                     {? __RUB.sys_attr(_refyR[_ii],1162,NWU.DO) | __RUB.sys_attr(_refyR[_ii],1181,NWU.DO)
::                      Ponieważ dla MD limit zaokrąglany jest w górę (Art. 188 § 3. Kodeksu pracy),
::                      to nieobecność zaokrąglamy w dół.
::                      Dla nieobecości "siła wyższa" również zaokrąglamy (Art 148 (1)  § 4 Kodeksu pracy).
                     || _il:=ceil(_il)
                     ?}
                  |? _ret.JM='R'
                  || {? _refR=_refRur & _refyR[_ii]=_refRud
                     || _il:=__KAL.w_days(NWU.OD,NWU.DO)
                     || _il:=NWU.NR
                     ?}
::                W przypadku urlopu na żądanie należy wyliczyć zarówno pozostałe dni urlopu na żądanie
::                jak i pozostałe godziny z ogólnego limitu urlopu wypoczynkowego:
                  |? _ret.JM='Rg'
                  || _il:=NWU.NR;
                     _ig:={? NWU.PARTDAY='T' || NWU.G$2 || NWU.NG ?};
                     _ret.POZOSTG-=_ig
                  |? _ret.JM='K'
                  || _il:=1
                  |? _ret.JM='RG'
                  || _ig:={? NWU.PARTDAY='T' || NWU.G$2 || NWU.NG ?};
                     _ret.POZOSTG-=_ig;
                     _il:=_ig/_fnorma(NWU.OD)$2
                  ?};
::                W przypadku urlopu na żądanie od dostępnej liczby dni odejmujemy jedynie te, które "zeszły"
::                na urlopy na żądanie. Całość limitu wypoczynkowego bedzie sprawdzana godzinowo i komunikowana błędem.
                  {? ~_uz | _refyR[_ii]=_refRuz
                  || _ret.POZOST-=_il
                  ?}
               ?};
               NWU.prev() & NWU.OD<=_stop & _start<=NWU.DO
            !}
         ?}
      !};
      NWU.cntx_pop()
   ?}
?};
P.cntx_pop();

:: Urlop na żądanie wymaga specjalnej obsługi.
{? __RUB.sys_attr(_refR,1111,_dt)
|| _uw:=exec('oblicz_limity','wnioski_urlopowe',_refP,__RUB.sys_kod(1112),_dt,_nwu);
:: Limit (4 dni) urlopu na żądanie zawiera się w limicie urlopu wypoczynkowego. Jeżeli urlopu wypoczynkowego (zwykłego)
:: pozostało mniej niż limit urlopu na żądanie, to limit urlopu na żądanie musi zostać ograniczony.
:: Przykład.
::    Pracownik ma 26 dni urlopu wypoczynkowego W TYM 4 dni na żądanie. Wykorzystał 25 dni urlopu wypoczynkowego.
::    Składa wniosek o urlop na żądanie.
::    Wstępnie zakładamy LIMIT=4 i POZOST=4 (nie brał jeszcze w tym roku żadnego dnia na żądanie). Ale po uwzględnieniu
::    urlopu wypoczynkowego (1<4) urlop na żądanie dostępny jest w wysokości jednego dnia.
::   {? _uw.POZOST<_ret.POZOST
::   || _ret.POZOST:=_uw.POZOST
::   ?};
:: (ER/WRT/XP/21.14/2108/0067): Żeby nie sugerować użytkownikowi, że może wziąć urlop na żądanie na część dnia, liczba
:: pozostałych dni urlopu na żądanie wyświetlana na wniosku będzie dotyczyła limitu samego urlpu na żądanie.
:: Kontrola czy wniosek o urlop na żądanie mieści się w ogólnym limicie urlopu wypoczynkowego i tak jest zrealizowana
:: na godzinach. Zostanie wyświetlony odpowiedni komunikat o przekroczeniu godzin urlopu wypoczynkowego.
:: Przykład.
::    Pracownik ma 26 dni urlopu wypoczynkowego W TYM 4 dni na żądanie. Wykorzystał 25 dni urlopu wypoczynkowego
::    w tym 3 na żądanie. Pracuje w równoważnym systemie czasu pracy. Dzień, w którym chce wziąć urlop na żądanie
::    jest 12 godzinny.
::    Podczas składania wniosku o urlop na żądanie zostanie wyświetlona informacja o 1 dniu dostępnego limitu, ale
::    podczas zakończenia (weryfikacji) zostanie wyświetlony komunikat informujący składającego, że przekroczył
::    dopuszczalny limit godzinowy urlopu wypoczynkowego wraz z informacją o pozostałym limicie godzinowym urlopu
::    wypoczynkowego oraz wnioskowaną liczbą godzin.
   {? _uw.POZOSTG<_ret.POZOSTG
   || _ret.POZOSTG:=_uw.POZOSTG
   ?}
?};

{? _ret.POZOST<0
|| _ret.POZOST:=0
?};
{? _ret.POZOSTG<0
|| _ret.POZOSTG:=0
?};

_ret


\oblicz_grk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dodatkowe informacje w oknie redagowania (uzupełnia odpowiednie wolne pola).
::       1. Wylicza limit i dostępną ilość bieżącego rodzaju urlopu.
::       2. Wylicza ilości planowane i zmniejszające limit.
::       3. Wylicza ilości sprawdzające przekroczenie limitu.
::   WE:  _a  [REFERENCE]        - Wskazanie pracownika.
::        _b  [NUMBER/REFERENCE] - Kod lub wskazanie składnika płacowego.
::        _c  [DATE]             - Data początkowa nieobecności.
::        _d  [DATE]             - Data końcowa nieobecności.
::       [_e] [REFERENCE]        - Wskazanie "bieżącego" wniosku urlopowego, który nie będzie brany pod uwagę, przy
::                                 ustalaniu limitu.
::   WY: Tablica z nazwanymi elementami.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new(
   'OK','LIMIT','POZOST','LIMITG','POZOSTG','JM',
:: Plan (wynikający z wpisanych wartości).
::    - w "jednostce rozliczeniowej";
   'PLAN',
::    - we wszystkich jednostkach (dni kalendarzowe, dni robocze, godziny robocze).
   'PK','PR','PG',
:: Zmniejszenia (dni robocze, godziny robocze)
   'ZR','ZG',
:: Hipotetyczna data zakończenia nieobecności (w przypadku przekroczenia limitu).
   'STOP',
:: Ilości sprawdzające przekroczenia limitu. IL1<IL2 oznacza przekroczenie.
   'IL1','IL2','JM2',
:: Kod sytuacji, która wystąpiła i komunikat o błędzie (patrz \oblicz_limity).
   'ERR_KOD',
   'ERR_TXT'
);
_ret.OK:=_ret.LIMIT:=_ret.POZOST:=_ret.LIMITG:=_ret.POZOSTG:=0;
_ret.JM:='';
_ret.PK:=_ret.PR:=_ret.ZR:=_ret.IL1:=_ret.IL2:=0;
_ret.PG:=_ret.ZG:=0;
_ret.STOP:=date(0,0,0);
_ret.ERR_KOD:=_ret.ERR_TXT:='';

exec('__RUB','object');

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=P
|| _refP:=_a
|| return(_ret)
?};
{? var_pres('_b')=type_of(0)
|| _refR:=__RUB.ref(_b)
|? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=R
|| _refR:=_b
|| return(_ret)
?};
{? var_pres('_c')=type_of(date()) & _c<>date(0,0,0)
|| _od:=_c
|| return(_ret)
?};
{? var_pres('_d')=type_of(date()) & _d<>date(0,0,0)
|| _do:=_d
|| return(_ret)
?};
_nwu:=null();
{? var_pres('_e')=type_of(_nwu) & _e<>_nwu & ref_tab(_e)=NWU
|| _nwu:=_e
?};

_d0:=date(0,0,0);

P.cntx_psh();
P.prefix();
{? P.seek(_refP) & P.DZA<=_od & (P.DZ=_d0 | _do<=P.DZ)
|| _limity:=exec('oblicz_limity','wnioski_urlopowe',_refP,_refR,_od,_nwu,_do);
   _ret.OK:=_limity.OK;
   _ret.LIMIT:=_limity.LIMIT;
   _ret.POZOST:=_limity.POZOST;
   _ret.LIMITG:=_limity.LIMITG;
   _ret.POZOSTG:=_limity.POZOSTG;
   _ret.JM:=_limity.JM;
   _ret.ERR_KOD:=_limity.ERR_KOD;
   _ret.ERR_TXT:=_limity.ERR_TXT;

   {? _od<>_d0 & _do<>_d0 & _od<=_do & _od~1=_do~1 & P.DZA<=_od & (P.DZ=_d0 | _do<=P.DZ)
   || exec('__KAL','object');
      __KAL.set_cal(P.KAL,_od~1);
      _fnorma:=exec('norma_fml','godziny');

::    Ilości planowane.
      _ret.PK:=_do-_od+1;
      _ret.PR:=__KAL.w_days(_od,_do);
      _ret.PG:=exec('nominal','godziny',_od,_do);
      _ret.PLAN:=
         {? _ret.JM='G'
         || _ret.PG
         |? 1+_ret.JM='R'
         || _ret.PR
         |? _ret.JM='K'
         || _ret.PK
         ?};

::    Ilości zmniejszające limit.
      {? _ret.OK & _ret.POZOST>0
      || _ret.STOP:=_do;
         {? _ret.JM='K'
::          Nieobecność rozliczana w dniach kalendarzowych.
         || {? _ret.POZOST<_ret.PK
::             Ewentualna korekta daty końcowej.
            || _ret.STOP:=_od+_ret.POZOST-1
            ?};
            _ret.ZR:=__KAL.w_days(_od,_ret.STOP);
            _ret.ZG:=__KAL.w_hours(_od,_ret.STOP)

::          Nieobecność rozliczana w dniach lub godzinach roboczych.
::          Aby móc określić datę końcową potrzebna jest analiza dzień po dniu.
         || {! _data:=#_od .. #_do
            |? _ret.STOP=_do
            |! _dzien:=#_data;

               _lg:=__KAL.w_hours(_dzien,_dzien);
               _lr:=0;

               {? _ret.JM='G'
::                Nieobecność rozliczana w godzinach roboczych. Dni robocze mają charakter informacyjny - wyliczamy je
::                uwzględniając normę.
               || {? _ret.ZG+_lg>=_ret.POZOST
                  || _lg:=_ret.POZOST-_ret.ZG;
                     _ret.STOP:=_dzien
                  ?};
                  _lr:=_lg/_fnorma(_dzien)

::                Nieobecność rozliczana w dniach roboczych.
               || _lr:=
                     {? _ret.JM='R' | _ret.JM='Rg'
                     || __KAL.w_days(_dzien,_dzien)
::                      Niby rozliczamy w dniach roboczych, ale zliczamy godziny robocze...
                     || _lg/_fnorma(_dzien)
                     ?};
                  {? _ret.ZR+_lr>=_ret.POZOST
                  || _lr:=_ret.POZOST-_ret.ZR;
                     {? _ret.JM+1<>'g' || _lg:=_lr*_fnorma(_dzien) ?};
                     _ret.STOP:=_dzien
                  ?};
                  {? _ret.JM+1<>'g' & _lr=_ret.POZOST
::                   Poprawka związana z zaokrągleniami. Dni są zapisywane z dokładnością do dwóch cyfr dziesiętnych,
::                   co nie oddaje dokładności godzin.
::                   Przykład.
::                      Limit: 2 dni / 16 godzin.
::                      Pracownik jest nieobecny 1 dzień / 9 godzin.
::                      W karcie urlopowej zostanie to zapisane jako 9/8=1,125->1.13 dnia / 9 godzin.
::                      Pozostaje: 2-1,13=0,87 dnia / 16-9=7 godzin.
::                      Ale 0,87 dnia * 8 godzin = 6,96 godzin (a nie 7!)
::                   Jeżeli więc wybierany jest ostatni kawałek dni roboczych (_lr=_ret.POZOST) to przyjmujemy, że
::                   również godziny wybierane są w całości.
                  || _lg:=_ret.POZOSTG
                  ?}
               ?};
               _ret.ZG+=_lg;
               _ret.ZR+=_lr
            !};
            {? _ret.JM+1='G'
::             Jeżeli dni robocze wyliczane były jako iloraz godzin i normy, to zaokrąglamy do 2 miejsc dziesiętnych.
            || _ret.ZR:=_ret.ZR$2
            ?}
         ?}
      ?}
   ?};
:: zapamiętujemy wynik wyliczeń
   _ret.IL1:=_ret.POZOST;
   _ret.IL2:=_ret.PLAN;
   _ret.JM2:=_ret.JM;

   _partday:=NWU.OD=NWU.DO & __RUB.sys_attr(NWU.R,199,NWU.OD) & NWU.PARTDAY='T';
   _i1:=_i2:=0;
   _jm:=_ret.JM;
   {? _partday
::    Nieobecność na część dnia. Zakładamy, że jest rozliczana w godzinach lub jest urlopem "prawie" rozliczanym
::    w godzinach.
   || {? _ret.JM='G' & _ret.POZOST<NWU.G
      || _i1:=_ret.POZOST;
         _i2:=NWU.G
      |? _ret.JM='RG' & _ret.LIMITG<NWU.G
      || _jm:='G';
         _i1:=_ret.LIMITG;
         _i2:=NWU.G
      |? _ret.JM=''
::       Nieobecność (na część dnia) nielimitowana (niewymagająca ustalenia limitów).
      || _ret.ZG:=NWU.G
      ?}
   || {? _ret.JM<>'RG' & _ret.POZOST<_ret.PLAN
      || _i1:=_ret.POZOST;
         _i2:=_ret.PLAN
      |? _ret.JM='RG'
      || _jm:='G';
         _i1:={? _ret.POZOSTG<_ret.ZG || _ret.POZOSTG || _ret.ZG ?};
         _i2:=_ret.PG
      ?}
   ?};
   _ret.IL1:=_i1;
   _ret.IL2:=_i2;
   _ret.JM2:=_jm
?};
P.cntx_pop();

_ret


\il_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła na podstawie kodu i ilości zwraca sformatowany napis z ilością.
::   WE: _a [STRING] - Kod jednostki miary (G/R/RG/K).
::       _b [NUMBER] - Ilość do sformatowania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_jm:={? var_pres('_a')=type_of('') || _a || '' ?};
_il:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _jm='G'
|| (*(_il*60))$3
|? 1+_jm='R'
|| form(_il,,2)
|? _jm='K'
|| form(_il,,2)
|| ''
?}


\jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła na podstawie kodu zwraca nazwę jednostki miary nieobecności.
::   WE: _a [STRING] - Kod jednostki miary (G/R/RG/K).
::   WY: Nazwa jednostki miary
::----------------------------------------------------------------------------------------------------------------------
_jm:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _jm='G'
|| '[godziny]'@
|? 1+_jm='R'
|| '[dni robocze]'@
|? _jm='K'
|| '[dni kalendarzowe]'@
|? _jm<>''
|| '[%1]' [_jm]
|| ''
?}


\update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za uzupełnienie wolnych pól w oknie redagowania wniosku urlopowego.
::   WE: [_a] [NUMBER]    - Inicjalizacja (pierwsze wyświetlenie):
::                            0 - Nie [domyślnie];
::                            1 - Tak.
::       [_b] [REFERENCE] - Wskazanie "bieżącego" wniosku urlopowego, który nie będzie brany pod uwagę, przy
::                          ustalaniu limitu. Formuła wykonywana jest zarówno dla akcji typu "Dołącz" (rekordu jeszcze
::                          nie ma na dysku) jak i dla akcji typu "Popraw". I właśnie o tym mówi parametr _b.
::                          Nie wpływa to jednak na odwołania do bieżącej zawartości bufora (np.: NWU.P, NWU.R, ... ).
::       [_c] [NUMBER]    - Tryb weryfikacji:
::                            0 - Nie, rejestracja wniosku [domyślnie];
::                            1 - Tak, weryfikacja wniosku.
::   WY: Graniczna data nieobecności nieprzekraczająca limitu.
::----------------------------------------------------------------------------------------------------------------------
_init:=var_pres('_a')=type_of(0) & _a;
_nwu:=null();
{? var_pres('_b')=type_of(_nwu) & _b<>_nwu & ref_tab(_b)=NWU
|| _nwu:=_b
?};
_weryf:=var_pres('_c')=type_of(0) & _c;

{? ~_init
|| exec('env_wt','b_proces')
?};
P.prefix();
OSOBA.prefix();
UD_SKL.prefix();
R.prefix();
NWU.P();
NWU.R();
P.OSOBA();
P.WYDZIAL();
REF.OSOBA:=OSOBA.ref();
GIODO_ED.TYP:='';
EDIT_VAR.SLO_TYP:='';

:: 1. Limit i dostępna ilość bieżącego rodzaju urlopu.
POLA_GRP.TXT_1:=POLA_GRP.TXT_2:=POLA_GRP.TXT_3:='';
:: 2. Ilości planowane i zmniejszające limit.
POLA_GRP.INT_1:=0;
POLA_GRP.REAL_1:=POLA_GRP.REAL_2:=0;
POLA_GRP.TIME_1:=POLA_GRP.TIME_2:=time(0,0,0);

exec('__RUB','object');

_ret:=exec('oblicz_grk','wnioski_urlopowe',NWU.P,NWU.R,NWU.OD,NWU.DO,_nwu);

{? ~_weryf
:: Zapamiętanie rzeczywistych dni i godzin roboczych, bez żadnych modyfikacji (przekroczenia).
:: To właśnie te wartości będą brane pod uwagę przy ustalaniu (pomniejszaniu) limitu.
|| NWU.NR:=_ret.ZR;
   NWU.NG:=_ret.ZG
?};

:: Ilości planowane.
POLA_GRP.INT_1:=_ret.PK;
POLA_GRP.REAL_1:=_ret.PR;
POLA_GRP.TIME_1:=*(_ret.PG*60);

_partday:=0;

{? _ret.OK
|| _jm:=exec('jm','wnioski_urlopowe',_ret.JM);
   POLA_GRP.TXT_1:=exec('il_form','wnioski_urlopowe',_ret.JM,_ret.LIMIT);
   POLA_GRP.TXT_2:=exec('il_form','wnioski_urlopowe',_ret.JM,_ret.POZOST);
   POLA_GRP.TXT_3:=_jm;

   _d0:=date(0,0,0);

   {? _weryf
   || _partday:=NWU.PARTDAY='T'

   |? NWU.OD<>_d0 & NWU.DO<>_d0 & NWU.OD=NWU.DO & NWU.R<>null() & __RUB.sys_attr(NWU.R,199,NWU.OD)
::    Zasadniczo wniosek może dotyczyć nieobecności na część dnia. Należy jednak sprawdzić przypadki szczególne.
   || _partday:=~__RUB.sys_attr(NWU.R,111,NWU.OD);
::    ^ Urlopy wypoczynkowe (zwykłe i na żądanie) mogą być brane na część dnia tylko w określonej sytuacji, a nie
::      w wyniku zaznaczenia przez operatora.
      {? __RUB.sys_attr(NWU.R,111,NWU.OD) & _ret.ZG<_ret.PG
::       Urlop (wypoczynkowy lub na żądanie). Na część dnia może być wzięty jeżeli została tylko końcówka tego urlopu.
      || _partday:=1
      |? __RUB.sys_attr(NWU.R,199,NWU.OD) & (_ret.JM<>'G' & _ret.JM<>'')
::       Nieobecność może być na część dnia ale nie jest rozliczana w godzinach -> Nie może być na część dnia.
::       Jeżeli nie udało się ustalić jednostki limitu, to dopuszczamy składanie na część dnia
      || _partday:=0
      ?}
   ?}
?};

:: Przekroczenie limitu jest możliwe jeżeli:
_over_limit:=
:: Wniosek nie jest wycofywany.
   NWU.AZ<>'D' &
:: Udało się ustalić limity.
   _ret.OK &
:: Pozostała część limitu jest mniejsza niż planowany okres lub nieobecność na część dnia.
   (_ret.POZOST<_ret.PLAN | _partday) &
:: Wniosek dotyczy "Nieobecności z możliwością przekroczenia limitu" - atrybut 1932.
   __RUB.sys_attr(NWU.R,1932,NWU.OD);
{? ~_over_limit
|| NWU.PLW:='N'
?};

:: Ilości zmniejszające dni / godziny robocze (ile zdjąć z limitów).
_zr:=_ret.ZR;
_zg:=_ret.ZG;

{? _weryf
:: Weryfikacja wniosku.
|| {? __RUB.sys_attr(NWU.R,111,NWU.OD) & NWU.PARTDAY='N'
   || _zr:=_ret.PR;
      _zg:=_ret.PG
   |? NWU.PARTDAY='T'
   || _zg:=NWU.G
   ?}

:: Rejestracja wniosku.
|| {? _init
::    Podczas inicjalizacji opieramy sie na tym co jest w rekordzie i nie zmieniamy go.
   || {? _ret.ZG<_ret.PG & _ret.ZG<NWU.G
      || _zr:=_ret.PR;
         _zg:=_ret.PG
      ?};
      {? NWU.PARTDAY='T'
      || _zg:=NWU.G
      ?}

   || {? NWU.PLW='T'
::       Zaznaczone "Przekroczenie limitu".
      || _zr:=_ret.PR;
         _zg:=_ret.PG;
         NWU.PARTDAY:='N';
         NWU.G:=0

      |? _partday
::       Teoretycznie nieobecność może dotyczyć części dnia (spełnione są odpowiednie warunki) - liczba godzin
::       zmniejszających powinna być juz zapisana w NWU.G.
      || {? NWU.G=0
         || {? _ret.JM=''
::             Dla nieobecności nielimitowanej ilości zmniejszające nie są uzupełnione - weźmy więc z planowanych.
            || _zg:=_ret.PG
            ?};
            NWU.G:=_zg
         |? NWU.G>0 & NWU.PARTDAY='T'
         || _zg:=NWU.G
         ?}

      |? ~_partday
::       Teoretycznie nieobecność nie może dotyczyć części dnia.
      || {? NWU.PARTDAY='T'
         || NWU.PARTDAY:='N'
         ?};
         NWU.G:=0
      ?}
   ?}
?};

:: Ilości zmniejszające limit.
POLA_GRP.REAL_2:=_zr;
POLA_GRP.TIME_2:=*(_zg*60);

exec('web_global_params_set','pkw','NWU','JM',_ret.JM);
exec('web_global_params_set','pkw','NWU','PartDay',_partday);
exec('web_global_params_set','pkw','NWU','OverLimit',_over_limit);

_ret.STOP


\nwu_wt_redx_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Przed obsługą" okien WT_REDR i WT_REDW tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wp:=web_params_get();
_nwu:={? obj_ntab(_wp) & var_pres('NWU',_wp)>0 & type_of(_wp.NWU)=type_of('') & +_wp.NWU=48 || NWU.ref() || null() ?};
exec('set_env','pkw_por');
exec('update','wnioski_urlopowe',,_nwu);

{? obj_ntab(_wp) & var_pres('nru01',_wp)>0 & _wp.nru01
|| exec('nwopo_wt_redx_bs','wnioski_urlopowe')
?};
~~


\nwopo_wt_redx_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Obsługa akcji "Przed obsługą" okien WT_REDR i WT_REDW tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: w tym miejscu bufor tabeli NWOPO traktowany jest jak pola zmiennej, dlatego "wyłuskujemy" tylko te pola, które
:: mają szanse być wypełnione

_NWOPO:=obj_new('NAZWISKO','PIERWSZE','PRZYCZ','SLO_KOD',
                'KRAJ','WOJEWODZ','POWIAT','GMINA','KOD','POCZTA','MIASTO','ULICA','DOM','LOKAL');
_NWOPO.NAZWISKO:=NWOPO.NAZWISKO;
_NWOPO.PIERWSZE:=NWOPO.PIERWSZE;
_NWOPO.PRZYCZ:=NWOPO.memo_txt(,,'PRZYCZ');
_NWOPO.SLO_KOD:=NWOPO.SLO_KOD;

_kod:=exec('FindAndGet','#table',SLO_KOD,NWOPO.SLO_KOD,,"KOD",'');
{? _kod='NIESP'
|| _NWOPO.KRAJ:=NWOPO.KRAJ;
   _NWOPO.WOJEWODZ:=NWOPO.WOJEWODZ;
   _NWOPO.POWIAT:=NWOPO.POWIAT;
   _NWOPO.GMINA:=NWOPO.GMINA;
   _NWOPO.KOD:=NWOPO.KOD;
   _NWOPO.POCZTA:=NWOPO.POCZTA;
   _NWOPO.MIASTO:=NWOPO.MIASTO;
   _NWOPO.ULICA:=NWOPO.ULICA;
   _NWOPO.DOM:=NWOPO.DOM;
   _NWOPO.LOKAL:=NWOPO.LOKAL
?};
:: podczytujemy odłożony bufor tabeli NWOPO
NWOPO.web_cntx_load();
NWOPO.blank();

:: Przepisujemy wartości z pól okienka do bufora
NWOPO.NAZWISKO:=_NWOPO.NAZWISKO;
NWOPO.PIERWSZE:=_NWOPO.PIERWSZE;
NWOPO.memo_set(_NWOPO.PRZYCZ,'PRZYCZ');
NWOPO.SLO_KOD:=_NWOPO.SLO_KOD;
{? _kod='NIESP'
|| NWOPO.KRAJ:=_NWOPO.KRAJ;
   NWOPO.WOJEWODZ:=_NWOPO.WOJEWODZ;
   NWOPO.POWIAT:=_NWOPO.POWIAT;
   NWOPO.GMINA:=_NWOPO.GMINA;
   NWOPO.KOD:=_NWOPO.KOD;
   NWOPO.POCZTA:=_NWOPO.POCZTA;
   NWOPO.MIASTO:=_NWOPO.MIASTO;
   NWOPO.ULICA:=_NWOPO.ULICA;
   NWOPO.DOM:=_NWOPO.DOM;
   NWOPO.LOKAL:=_NWOPO.LOKAL
?};

:: uzupełniamy pozostałe pola
NWOPO.P:=NWU.P;
NWOPO.OD:=NWU.OD;
NWOPO.DO:=NWU.DO;
~~


\nwu_web_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli NWU.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr obowiązkowy wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(NWU)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

exec('__RUB','object');

_d0:=date(0,0,0);

_jm:=exec('web_global_params_get','pkw','NWU','JM','');

{? _fld='' | _fld='WT_R' | _fld='OD' | _fld='DO' | _fld='SLO_KOD'
||
:: Limity.
   _sval:=$(_jm<>'');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],POLA_GRP,'TXT_1');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],POLA_GRP,'TXT_2');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],POLA_GRP,'TXT_3');

:: Nieobecność na część dnia.
   _val:=exec('web_global_params_get','pkw','NWU','PartDay',0);
   _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [$(_val>0)],NWU,'PARTDAY');

:: Ilości planowane.
   _sval:=$(NWU.OD<>_d0 & NWU.DO<>_d0 & NWU.OD<=NWU.DO & NWU.OD~1=NWU.DO~1);
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],POLA_GRP,'REAL_1');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],POLA_GRP,'TIME_1');

:: Ilości zmniejszające.
   _set(_TAB,_we,_grp_ident,'enable=%1' [$(1+_jm='R')],POLA_GRP,'REAL_2');
   _set(_TAB,_we,_grp_ident,'enable=%1' [$(_jm+1='G')],POLA_GRP,'TIME_2');
   {? _fld<>'' & _jm+1<>'G'
   || exec('nwu_web_efld_opt','wnioski_urlopowe','1',_TAB,_we,_grp_ident,'PARTDAY')
   ?};

:: Komentarz dla urlopu okolicznościowego jest obowiązkowy.
   _sval:=$__RUB.sys_attr(NWU.R,1934,NWU.DO);
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],NWU,'KOMENT');

:: Wniosek o urlop opiekuńczy - pola na zakładce "Dane dodatkowe"

   {? exec('upgrade2226_nru01','wnioski_urlopowe')
   || _url_op:=__RUB.sys_attr(NWU.R,1191,NWU.OD);
      _sval:=$_url_op;
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'NAZWISKO');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'PIERWSZE');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'PRZYCZ');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'SLO_KOD');

      SLO_KOD.cntx_psh();
      _sval:=$(_url_op & NWOPO.SLO_KOD().KOD='NIESP');
      SLO_KOD.cntx_pop();
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'KRAJ');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'WOJEWODZ');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'POWIAT');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'GMINA');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'KOD');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'POCZTA');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'MIASTO');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'ULICA');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1,mark=%1' [_sval],NWOPO,'DOM');
      _set(_TAB,_we,_grp_ident,'enable=%1,editable=%1' [_sval],NWOPO,'LOKAL')
   ?}
?};

{? _fld='' | _fld='PARTDAY'
|| _val:=NWU.PARTDAY='T' & ~(__RUB.sys_attr(NWU.R,111,NWU.OD));
   _set(_TAB,_we,_grp_ident,'enable=%2,editable=%1,mark=%1' [$_val,$(_val | _jm+1='G')],POLA_GRP,'TIME_2')
?};

:: czy możliwe zaznaczenie pola o wnioskowanie przekroczenia limitu
_enable:=1;
{? (_we+1='R')
|| _enable:=exec('web_global_params_get','pkw','NWU','OverLimit',0)
?};
_set(_TAB,_we,_grp_ident,'enable=%1' [$_enable],NWU,'PLW');

:: czy dostępna akceptacja prośby o przekroczenie limitu
_enable:=1;
{? (_we+1='W')
|| _enable:=(NWU.PLW='T')
?};
_set(_TAB,_we,_grp_ident,'enable=%1' [$_enable],NWU,'PLA');

1


\nwu_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Sprawdzenie poprawności wypełnienia wniosku urlopowego (webTerm). Formuła wykorzystywana również podczas
::       weryfikacji.
::       Uwaga: formuła "powiązana" z \nwu_check/portal_nieobecnosci.fml. Ewentualne zmiany być może należy nanieść
::              również tam.
::   WE: [_a] [NUMBER] - Tryb modyfikacji:
::          0 - Dołączanie [domyślnie];
::          1 - Poprawianie;
::          2 - Weryfikacja - Akceptuj.
::          3 - Weryfikacja - Odrzuć.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a ?};

exec('__RUB','object');

_fret:=
   "  _ret:=obj_new('TAB','FLD','ASK');
      _ret.TAB:={? var_pres('_a')=type_of(NWU) || _a || NWU ?};
      _ret.FLD:={? var_pres('_b')=type_of('') || _b || '' ?};
      _ret.ASK:={? var_pres('_c')=type_of('') || _c || '' ?};
      _ret
   ";

{? _tryb=3
:: Przy odrzucaniu wniosku, żadne warunki nie muszą być sprawdzane.
|| return(_fret())
?};

_d0:=date(0,0,0);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Prosta kontrola wypełnienia pól.
{? _tryb<2
|| {? (_chk:=__CHK.record2(WT_VAR,'WT_R','Rodzaj urlopu'@))<>''
   || return(_fret(WT_VAR,_chk))
   |? (_chk:=__CHK.record(NWU,,'OD','DO'))<>''
   || return(_fret(,_chk))
   ?};

   {? NWU.OD<NWU.P().DZA
   || FUN.emsg('"%1" nie może być wcześniejsza niż "%2" (%3).'@ [MS.name(NWU,'OD'),MS.name(P,'DZA'),$NWU.P().DZA]);
      return(_fret(,'OD'))
   ?};

   {? NWU.DO<NWU.OD
   || FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(NWU,'DO'),MS.name(NWU,'OD')]);
      return(_fret(,'DO'))
   ?};

   {? NWU.P().DZ<>_d0 & NWU.P().DZ<NWU.DO
   || FUN.emsg('"%1" nie może być późniejsza niż "%2" (%3).'@ [MS.name(NWU,'DO'),MS.name(P,'DZ'),$NWU.P().DZ]);
      return(_fret(,'OD'))
   ?};

   {? NWU.OD~1<>NWU.DO~1
   || FUN.emsg('Wniosek nie może obejmować przełomu lat.'@);
      return(_fret(,'DO'))
   ?}
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Kontrola nakładania się okresów.

_refR:=NWU.R;
_od:=NWU.OD;
_do:=NWU.DO;

:: Jeżeli w jednym dniu mamy dwie nieobecności na część dnia, to jedna z nich musi być nieobecnością z Art. 188.
_overlap:=
   "  {? _a.PARTDAY='T' & __RUB.sys_attr(_b,1162,_c) & ~__RUB.sys_attr(_d,1162,_c)
      || 0
      |? _a.PARTDAY='T' & __RUB.sys_attr(_d,1162,_c) & ~__RUB.sys_attr(_b,1162,_c)
      || 0
      || 1
      ?}
   ";

_err:='';
N.index('NIEOBECN');
N.prefix('N',NWU.P().ref());
{? N.last()
|| {!
   |? {? N.OD<=_do & N.DO>=_od & ~__RUB.sys_attr(N.NB,122722,_od) & ~__RUB.sys_attr(N.NB,122742,_od)
      || {? _overlap(N,N.NB,_od,_refR)
         || _err:=
               'We wnioskowanym okresie (%1 - %2)\nzarejestrowana jest już nieobecność (%3 - %4).'@
               [$_od,$_do,$N.OD,$N.DO]
         ?}
      ?};
      _err='' & N.prev() & date(N.OD~1,N.OD~2,1)>=date(_od~1,_od~2,1)
   !}
?};
{? _err<>''
|| FUN.emsg(_err);
   return(_fret(,'OD'))
?};

_err:='';
_ref:={? _tryb || NWU.ref() || null() ?};
NWU.cntx_psh();
NWU.index('OD');
NWU.prefix(NWU.P);
{? NWU.find_le(_do) & NWU.ref()<>_ref & NWU.DO>=_od & ~('NWO'*NWU.AZ) & NWU.N=null() & NWU.OS_N=null()
|| {? _overlap(NWU,NWU.R,_od,_refR)
   || _err:=
         'We wnioskowanym okresie (%1 - %2)\nzarejestrowany jest już inny wniosek (%3 - %4).'@
         [$_od,$_do,$NWU.OD,$NWU.DO]
   ?}
?};
NWU.cntx_pop();
{? _err<>''
|| FUN.emsg(_err);
   return(_fret(,'OD'))
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Kontrola wprowadzenia pełnych godzin dla opieki Art 188 na część dnia
:: Kontrola wprowadzenia pełnych godzin dla nieobecności "siła wyższa"
{? NWU.PARTDAY='T' & (__RUB.sys_attr(NWU.R,1162,NWU.OD) | __RUB.sys_attr(NWU.R,1181,NWU.OD)) & NWU.G<>ceil(NWU.G)
|| _err:='Dla wybranego rodzaju nieobecności dopuszczalne jest podawanie tylko pełnych godzin nieobecności.'@;
   FUN.emsg(_err);
   return(_fret(POLA_GRP,'TIME_2'))
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Kontrola określenia przyczyny urlopu okolicznościowego
{? __RUB.sys_attr(_refR,1934,NWU.DO) & ~+|NWU.KOMENT
|| FUN.info('Dla wybranego rodzaju nieobecności\nnależy określić jej przyczynę uzupełniając komentarz.'@);
   return(_fret(,'KOMENT'))
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Kontrola wypełnienia danych osoby, na którą brany jest urlop opiekuńczy
{? exec('upgrade2226_nru01','wnioski_urlopowe') & __RUB.sys_attr(_refR,1191,NWU.DO)
|| {? (_chk:=__CHK.record(NWOPO,,'NAZWISKO','PIERWSZE','PRZYCZ','SLO_KOD'))<>''
   || return(_fret(NWOPO,_chk))
   |? NWOPO.SLO_KOD().KOD='NIESP' & (_chk:=__CHK.record(NWOPO,,'KRAJ','MIASTO','DOM'))<>''
   || return(_fret(NWOPO,_chk))
   ?}
?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Kontrola limitu.
{? NWU.AZ='' | (NWU.AZ='?' & _tryb<3)
|| _grk:=exec('oblicz_grk','wnioski_urlopowe',NWU.P,NWU.R,NWU.OD,NWU.DO,{? _tryb || NWU.ref() || null() ?});
:: Czy teoretycznie możliwe jest wnioskowanie o przekroczenie limitu?
   _over_limit:=exec('web_global_params_get','pkw','NWU','OverLimit',0);

   {? _grk.OK
::    Udało się ustalić limity.
   || {? ~(_over_limit & ((_tryb<2 & NWU.PLW='T') | _tryb=2 & NWU.PLA<>''))
::       Na wniosku nie ma prośby o przekroczenie limitu.
      || _uzP:=~(_grk.IL1<_grk.IL2) & (_grk.JM='Rg' & _grk.PG>_grk.POZOSTG);
::       "Urlop na żądanie" - szczególny przypadek przekroczenia ogólnego limitu godzinowego urlopu wypoczynkowego.
::       Jeśli liczba pozostałych godzin urlopu wypoczynkowego jest mniejsza niż liczba godzin pracy na wniosku,
::       nie można złoyżc wniosku o urlop na żądanie, ponieważ urlopu na żądanie nie można składać na część dnia.

         {? _grk.IL1<_grk.IL2 | _uzP
         || FUN.info(
               {? _grk.ERR_TXT='' || '' || _grk.ERR_TXT+'\n' ?}+
               'Wprowadzony wniosek (%1 %3)\n'
               'przekracza dopuszczalny limit %4(%2 %3).'@
               [exec('il_form','wnioski_urlopowe',_grk.JM,{? _uzP || _grk.PG || _grk.IL2 ?}),
                exec('il_form','wnioski_urlopowe',_grk.JM,{? _uzP || _grk.POZOSTG || _grk.IL1 ?}),
                exec('jm','wnioski_urlopowe',{? _uzP || 'G' || _grk.JM2 ?}),
                {? _uzP || 'godzinowy\nurlopu wypoczynkowego '@ || '' ?}
               ]+'\n'+
               {? _tryb=2
               || 'Określ zgodę na wnioskowane przekroczenie limitu, jeżeli akceptujesz wprowadzone dane.'@
               |? __RUB.sys_attr(NWU.R,111,NWU.OD) & NWU.OD<NWU.DO & NWU.DO=_grk.STOP
               || 'W takim przypadku należy złożyć dwa wnioski:\n'
                  ' - Pierwszy dotyczący pełnych dni;\n'
                  ' - Drugi dotyczący części dnia.'@
               |? ~_over_limit
               || 'Wybierz inny rodzaj urlopu i/lub krótszy okres.'@
               |? NWU.PLW='N'
               || 'Wybierz inny rodzaj urlopu i/lub krótszy okres\n'
                  'lub zaznacz "Wnioskuj o przekroczenie limitu",\n'
                  'jeżeli akceptujesz wprowadzone dane.'@+
                  '\n\n'+
                  'Uwaga'@+'\n'+
                  'W przypadku akceptacji wniosku przez przełożonego,\n'
                  'ale bez zgody na przekroczenie limitu, czas trwania\n'
                  'udzielonego urlopu może być krótszy niż wnioskowano.'@

               || ''
               ?}
            );
            return(_fret(,'DO'))

         |? NWU.OD=NWU.DO & __RUB.sys_attr(NWU.R,199,NWU.OD) & NWU.PARTDAY='T'
::          Wszystko OK - tylko informacyjnie ...
         || FUN.info(
               {? _grk.ERR_TXT='' || '' || _grk.ERR_TXT+'\n' ?}+
               'Wprowadzony wniosek dotyczy tylko części dnia.'@
            )
::       Wszystko ok, ale chcę pozostawić użytkownikowi możliwość zatwierdzenia opcji jeśli wystąpił problem
::       w przypadku gdy ERR_KOD="INFO"
         |? _grk.ERR_TXT<>''
         || return(_fret(,,_grk.ERR_TXT))
         ?}

      |? _tryb=2 & NWU.PLA='N'
::       Akceptacja, ale brak zgody przełożonego na przekroczenie limitu.
::       Należy sprawdzić czy jest jeszcze dostępny limit.
      || {? _grk.IL1>0
         || {? _grk.JM='G'
            || NWU.G:=_grk.IL1
            || NWU.G:=0
            ?};
            NWU.put(1)
         || FUN.info(
               {? _grk.ERR_TXT='' || '' || _grk.ERR_TXT+'\n' ?}+
               'Dla wprowadzonego wniosku (%1 %3)\n'
               'brak dostępnego limitu (%2 %3).'@
               [exec('il_form','wnioski_urlopowe',_grk.JM,_grk.IL2),
                exec('il_form','wnioski_urlopowe',_grk.JM,_grk.IL1),
                exec('jm','wnioski_urlopowe',_grk.JM2)
               ]+'\n'+
               {? _tryb=2
               || 'Określ zgodę na wnioskowane przekroczenie limitu, jeżeli akceptujesz wprowadzone dane.'@
               || ''
               ?}
            );
            return(_fret(,'DO'))
         ?}

      ?}

::    W tym miejscu wiemy, że limitów nie udało się ustalić.
   |? __RUB.sys_attr(NWU.R,1933,NWU.OD) | _grk.ERR_TXT<>''
::    Nie sprawdzamy _tryb, bo jeżeli pracownik NIE złoży wniosku, to przełożony NIE będzie miał czego akceptować.
   || FUN.info(
         {? _grk.ERR_TXT=''
         || 'Brak limitów urlopowych.'@
         || _grk.ERR_TXT
         ?}+'\n'+
         'Nie można zarejestrować wniosku urlopowego.'@+'\n'+
         'Zgłoś problem do działu kadr.'@
      );
      return(_fret(,'DO'))

::    Nieobecność nie ma ustawionego atrybutu 1933 (wymaga limitu) oraz brak komunikatów o błędzie.
::    Oznacza to, że wniosek może być złożony i rozpatrywany. Nie ma potrzeby wyświetlania żadnych komunikatów.
   ?}

?};

_fret()


\wprowadz_urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [2014]
::       RWR [12.41]
:: OPIS: Dodaje nieobecność na podstawie wniosku urlopowego. Komunikaty zapisywane są do obiektu KOMM - zakłada się, że
::       został on wcześniej zainicjowany i ustawiony.
::   WE: _a [REFERENCE] - Wskazanie wniosku urlopowego.
::   WY: Tablica nazwana ze statusem przetwarzania.
::          TYP   - Typ komunikatu:
::                   'T' - Błąd techniczny, nie pozwalający na poprawne działanie formuły.
::                   'M' - Błąd merytoryczny, nie pozwalający na realizację celu - utworzenia nieobecności.
::                   ''  - Brak zastrzeżeń - przetwarzanie zakończone powodzeniem. Pole TEKST pozostaje puste.
::          TEKST - Komunikat.
::  OLD: \wprow_urlop/wnio_url.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=NWU
|| _nwu:=_a
|| KOMM.add('Niepoprawny parametr wywołania.'@);
   return('T')
?};

_prac:=exec('record','#to_string',exec('FindAndGet','#table',NWU,_nwu,,"P",null()),1);

{? KOMM.find_msg(_prac)
:: Kolejne komunikaty dla tego pracownika.
|| KOMM.set_root(_prac)
:: Pierwszy komunikat dla tego pracownika
|| KOMM.sect_beg(_prac)
?};

_ret:='';

exec('__RUB','object');
exec('__KAL','object');
F_ZATR.cntx_psh();
F_ZATR.prefix();
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
N.cntx_psh();
N.prefix();
NWU.cntx_psh();
NWU.prefix();
{? ~NWU.seek(_nwu)
|| KOMM.add('Odnalezienie wniosku urlopowego do wprowadzenia nie powiodło się.'@,14);
   _ret:='T'

|? NWU.AZ<>'T'
|| KOMM.add('Status wniosku [%1] nie pozwala na rejestrację nieobecności. Wymagany status wniosku [%2].'@
            [exec('status','wnioski_urlopowe',NWU.AZ),'Przyjęty'@],14);
   _ret:='T'

|? NWU.N<>null() | NWU.OS_N<>null()
|| KOMM.add('Wniosek został już wprowadzony wcześniej.'@,14);
   _ret:='T'

|? _od:=NWU.OD;
   _do:=NWU.DO;

   _od<NWU.P().DZA
|| KOMM.add('Wniosek urlopowy dotyczy okresu przed zatrudnieniem.'@,14);
   _ret:='M'

|? P.DZ<>date(0,0,0) & P.DZ<_do
|| KOMM.add('Wniosek urlopowy dotyczy okresu po zwolnieniu.'@,14);
   _ret:='M'

|? N.cntx_psh();
   N.index('NIEOBECN');
   N.prefix('N',P.ref());
   {? N.last()
   || _par:=obj_new('NB','PARTDAY');
      _par.NB:=NWU.R;
      _par.PARTDAY:=NWU.PARTDAY;
      {!
      |? {? exec('is','overlap',N,_od,_do,,,_par)
         || KOMM.add('Konflikt z istniejącą nieobecnością (%1 - %2).'@ [$N.OD,$N.DO],14);
            _ret:='M'
         ?};
::       Sprawdzamy konflikty czasu pracy dla wprowadzanej nieobecności
         {? exec('test_par','parametr',246,'T') & exec('lic_or','#b_domain','PRC')
         || _konflikty:=exec('konflikty','nieobecnosc',N.P,_od,_do,0,0,,1,,1);
            {! _ind:=1..obj_len(_konflikty)
            |! {? _konflikty[_ind]<>''
               || KOMM.add(_konflikty[_ind]+' (%1 - %2).'@ [$_od,$_do])
               ?}
            !};
            obj_del(_konflikty)
         ?};
         N.prev() & _od<=N.DO
      !};
      obj_del(_par)
   ?};
   N.cntx_pop();
   _ret<>''
|| ~~

|? _grk:=exec('oblicz_grk','wnioski_urlopowe',P.ref(),NWU.R,NWU.OD,NWU.DO,NWU.ref());
   {? _grk.OK & _grk.IL1<_grk.IL2
   || {? __RUB.sys_attr(NWU.R,1932,NWU.OD)
      || _icon:=3
      || _ret:='M';
         _icon:=14
      ?};
      KOMM.add('Przekroczony dopuszczalny limit nieobecności.'@,_icon)
   ?};
   _ret<>''
|| ~~

|? P.F_ZATR().KOD<>'Z'
|| __KAL.set_cal(P.KAL,NWU.OD~1);
   _limity:=exec('oblicz_limity','wnioski_urlopowe',P.ref(),NWU.R().RN,NWU.OD,NWU.ref(),NWU.DO);
   {? _limity.ERR_TXT<>''
   || {? ',BRAK_PRAWA,BRAK_KARTY,BRAK_LIMITU,'*',%1,' [_limity.ERR_KOD] & ~__RUB.sys_attr(NWU.R,1933,NWU.OD)
::       Błąd dotyczy braku limitów, ale atrybut pozwala na złożenie wniosku - pozwólmy więc wprowadzić nieobecność.
      || _icon:=3
      |? ',INFO,'*',%1,' [_limity.ERR_KOD]
      || _icon:=3
      || _icon:=14;
         _ret:='M'
      ?};
      KOMM.add(_limity.ERR_TXT,_icon)
   ?};

   {? _ret=''
   || N.blank();
      N.P:=P.ref();
      N.NB:=NWU.R;
      N.OD:=NWU.OD;
      N.DO:=NWU.DO;
      N.KOMENT:=NWU.KOMENT;
      exec('n_czas','nieobecnosc');
      _partday:=NWU.PARTDAY;
      {? NWU.G<>0
      || _lgr:=__KAL.w_hours(NWU.OD,NWU.DO);
         N.NG:={? _partday='N'
               || _lgr
               |? NWU.G>_lgr & ~(__RUB.sys_attr(NWU.R,1162,NWU.OD))
               || _lgr
               || NWU.G
               ?}
      |? NWU.PLW='T' & NWU.PLA='N'
::       Jeżeli pracownik wnioskował o przekroczenie limitu a przełożony nie wyraził na to zgody, to należy
::       odpowiednio skrócić nieobecność.
::       Przypadki
::          1. Wniosek na całe dni + ogonek + przekroczenie -> nieobecność na całe dni.
::             Wniosek (3 dni, 24.00 godz.)
::             Limit   (3 dni, 18.64 godz.)
::             Urlop zostanie udzielony na pełne dni (2 dni, 16 godz.).
::          2. Wniosek na ogonek + przekroczenie -> nieobecność na część dnia (ogonek).
::             Wniosek (1 dzień, 8.00 godz.)
::             Limit   (1 dzień, 2.64 godz.)
::             Urlop zostanie udzielony na część dnia (1 dzień, 2.64 godz.)
      || _ok:=0;
::       Jeżeli pracownik miał możliwość wnioskowania o przekroczenie limitu, to ostatni dzień możemy pominąć (tutaj
::       znajduje się ten kawałek limitu).
         _do:=NWU.DO-1;
         _lgr:=0;
::       W pętli odcinamy kolejne ostatnie dni.
         {!
         |? {? NWU.OD<=_do
            || _lgr:=__KAL.w_hours(NWU.OD,_do);
               {? _lgr<=_grk.POZOSTG
               || _ok:=1;
                  0
               || _do-=1;
                  1
               ?}
            ?}
         !};
         {? _ok
         || N.DO:=_do;
            N.NK:=N.DO-N.OD+1;
            N.NG:=_lgr;
            N.NR:=__KAL.w_days(NWU.OD,_do)
         || N.DO:=N.OD;
            N.NK:=N.DO-N.OD+1;
            N.NR:=1;
            N.NG:=_grk.POZOSTG;
            _partday:='T'
         ?};
         KOMM.add('Wobec braku zgody przełożonego na przekroczenie limitu, nieobecność została skrócona.'@,3)
      ?};
      N.PARTDAY:=_partday;
      _rub:=N.NB().RN;
      N.PROC:=exec('procent','nieobecnosc',_rub);
      N.KDSW:=exec('kod_swd','nieobecnosc',_rub);
::    23.25_ZUS01 - wycofanie wypełnienia dla rubryk 32 i 33 - dodatkowy komunikat dla bezpieczeństwa danych
      {? __RUB.sys_attr(N.NB,12274) & ~N.KDSW
      || R.cntx_psh();
         KOMM.add('Brak kodu świadczenia dla nieobecności "%1". Zweryfikuj nieobecność.'@[N.NB().RT],3);
         R.cntx_pop()
      ?};

      do();
      {? ~N.add(1)
      || undo();
         KOMM.add('Zapis w kartotece nieobecności nie powiódł się.'@,14,,1);
         _ret:='T'
      |? NWU.N:=N.ref();
         ~NWU.put(1)
      || undo();
         KOMM.add('Aktualizacja wniosku urlopowego nie powiodła się.'@,14,,1);
         _ret:='T'
      ?};
      {? end()
      || exec('FUNKCJE','object');
         NWU.P().OSOBA();
         exec('n_add_after','nieobecnosc')

      |? _ret=''
      || KOMM.add('Nieudana aktualizacja powiązania wniosku urlopowego z utworzoną nieobecnością.'@,14);
         _ret:='T'
      ?}
   ?}

|? P.F_ZATR().KOD='Z'
|| OS_N.cntx_psh();
   OS_N.prefix();

   NWU.P().OSOBA();
   __KAL.set_cal(P.KAL,NWU.OD~1);

   OS_N.blank();
   OS_N.R:=NWU.R;
   OS_N.OD:=NWU.OD;
   OS_N.DO:=NWU.DO;
   OS_N.NK:=OS_N.DO-OS_N.OD+1;
   OS_N.NR:=__KAL.w_days(OS_N.OD,OS_N.DO);
   OS_N.NG:={? NWU.G<>0 || NWU.G || __KAL.w_hours(OS_N.OD,OS_N.DO) ?};
   OS_N.KOMENT:=NWU.KOMENT;

   do();
   {? ~OS_N.add(1)
   || undo();
      KOMM.add('Zapis w kartotece nieobecności nie powiódł się.'@,14,,1);
      _ret:='T'
   |? NWU.OS_N:=OS_N.ref();
      ~NWU.put(1)
   || undo();
      KOMM.add('Aktualizacja wniosku urlopowego nie powiodła się.'@,14,,1);
      _ret:='T'
   ?};
   {? end()
   ||
::    Karta urlopowa.
      exec('kart_url_update_add_n','kart_url');

:        Dyscyplina pracy.
      _zm_rok:=_od~1-_do~1;
      FUNKCJE.OBLICZDS(N.OD~1);
      {? _zm_rok & ~__RUB.sys_attr(DS.NB().RN,1192,date())
      || FUNKCJE.OBLICZDS(N.OD~1+1)
      ?}
   |? _ret=''
   || KOMM.add('Nieudana aktualizacja powiązania wniosku urlopowego z utworzoną nieobecnością.'@,14);
      _ret:='T'
   ?};
   OS_N.cntx_pop()

?};
NWU.cntx_pop();
N.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
F_ZATR.cntx_pop();

_ret


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Rejestracja wniosku o urlop podwładnego (webTerm) - formuła opisu zadania.
::   WE: [_a] [INTEGER] - parametr określający czy formuła zwraca opis [0 - DOMYŚLNIE] czy tablicę nazwaną z elementami
::       opisu [1]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of(0) & _a || _a || 0 ?};
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_int:=_mp.load(exec('kind_internal','#b_port'));
exec('open_pkw','open_tab');
P.cntx_psh();
P.prefix();
{? type_of(_in.P)=type_of(null()) & _in.P<>null() & P.seek(_in.P) &
   ~(obj_ntab(_int) & var_pres('NWU',_int)=type_of(null()) & _int.NWU<>null())
:: Jeżeli nie ma parametru wewnętrznego to pracujemy z symboliczną wartością kluczową.
:: Warto wspomnieć, że bieżąca formuła jest wykonywana jako pierwsza w "życiu" czynności - jeszcze przed main/web_main.
:: Jeżeli czynność "powstaje" (rodzi się/jest uruchamiana), to najpierw budowany jest jej opis, a więc wykonywana jest
:: bieżąca formuła.
|| _mp.keyRef(exec('keyRefV','wnioski_urlopowe',_in.P),0,0)
?};
P.cntx_pop();
_tab:=exec('desc','pracownik',_mp,'NITJOST');
{? ~_mode
|| {? _tab.ZAW_DANE='T'
   || 'Zarejestruj wniosek o urlop: %1 %2, Numer teczki - %3, Jednostka - %4, Stanowisko %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.T,_tab.UD_SKL,_tab.STN]
   || 'Zarejestruj wniosek o urlop'@@
   ?}
|| _tab
?}


\nwu_dolacz_a_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - po" w oknie WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act_uid:=exec('web_global_params_get','pkw','PKW_POR__RWU','ACT_UID','');
{? exec('set_env','pkw_por') & exec('is_act','#b__box',_act_uid,1)
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_act_uid;
   _params.UIDREF:=exec('keyRefV','wnioski_urlopowe',P.ref());
   _params.AKCJA:='DOŁĄCZ';
   _params.PORTS_IN:=$(
      "  _uid:='"+_params.ACT_UID+"';
         _refP:=exec('FindAndGet','#table',P,'"+$P.ref()+"',,,null());
         _ports_in:=exec('portsIn','#b__box',_uid);
         exec('portsInSet','#b__box',_ports_in,_uid,'P',_refP);
         _ports_in
      "
   );
   _params.PROC_START:='T';
   exec('mp_run','#b__box',_params)
?}


\nwu_wycofaj_a_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wycofaj - po" w oknie WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act_uid:=exec('web_global_params_get','pkw','PKW_POR__RWU','ACT_UID','');
{? exec('exist','#record') & exec('load_cur_prac','p_web') & exec('is_act','#b__box',_act_uid,1)
|| {? ~(NWU.AZ='T' & NWU.N=null() & NWU.OS_N=null())
   || FUN.info('Status wniosku nie pozwala na jego wycofanie.'@)
   || web_params_set(web_params_get());
      NWU.web_cntx_save();
      web_ask(
         "  web_params_set(web_params_get());
            {? _a=1 & NWU.web_cntx_load()
            || exec('set_env','pkw_por');
               _act_uid:=exec('web_global_params_get','pkw','PKW_POR__RWU','ACT_UID','');
               _params:=exec('mp_run_a','#b__box');
               _params.ACT_UID:=_act_uid;
               _params.UIDREF:=NWU.uidref();
               _params.AKCJA:='WYCOFAJ';
               _params.PORTS_IN:=$(
                  \" _uid:='\"+_params.ACT_UID+\"';
                     _refP:=exec('FindAndGet','#table',P,'\"+$NWU.P().ref()+\"',,,null());
                     _ports_in:=exec('portsIn','#b__box',_uid);
                     exec('portsInSet','#b__box',_ports_in,_uid,'P',_refP);
                     _ports_in
                  \"
               );
               _params.PROC_START:='T';
               _params.CONTEXT:=$(
                  \" _context:=obj_new('NWU');
                     _context.NWU:=exec('FindAndGet','#table',NWU,'\"+$NWU.ref()+\"',,,null());
                     _context
                  \"
               );
               exec('mp_run','#b__box',_params)
            ?}
         ",'Czy na pewno chcesz wycofać wniosek?'@,FUN.TYT)
   ?}
?}


\nwu_popraw_a_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - po" w oknie WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act_uid:=exec('web_global_params_get','pkw','PKW_POR__RWU','ACT_UID','');
{? exec('exist','#record') & exec('set_env','pkw_por')
|| {? ~(NWU.AZ='' | NWU.AZ='?')
   || FUN.info('Status wniosku nie pozwala na jego poprawienie.'@)
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:=_act_uid;
      _params.UIDREF:=NWU.uidref();
      _params.AKCJA:='POPRAW';
      _params.PORTS_IN:=$(
         "  _uid:='"+_params.ACT_UID+"';
            _refP:=exec('FindAndGet','#table',P,'"+$NWU.P().ref()+"',,,null());
            _ports_in:=exec('portsIn','#b__box',_uid);
            exec('portsInSet','#b__box',_ports_in,_uid,'P',_refP);
            _ports_in
         "
      );
      _params.CONTEXT:=$(
         "  _context:=obj_new('NWU');
            _context.NWU:=exec('FindAndGet','#table',NWU,'"+$NWU.ref()+"',,,null());
            _context
         "
      );
      exec('mp_run','#b__box',_params)
   ?}
?}


\nwu_usun_a_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - po" w oknie WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('exist','#record') & exec('load_cur_prac','p_web')
|| {? ~(NWU.AZ='' | NWU.AZ='?')
   || FUN.info('Status wniosku nie pozwala na jego usunięcie.'@)
   || web_params_set(web_params_get());
      NWU.web_cntx_save();
      web_ask(
         "  web_params_set(web_params_get());
            {? _a=1 & NWU.web_cntx_load()
            || exec('set_env','pkw_por');
               _act_uid:=exec('web_global_params_get','pkw','PKW_POR__RWU','ACT_UID','');
               _params:=exec('mp_run_a','#b__box');
               _params.ACT_UID:=_act_uid;
               _params.UIDREF:=NWU.uidref();
               _params.AKCJA:='USUŃ';
               _params.PORTS_IN:=$(
                  \" _uid:='\"+_params.ACT_UID+\"';
                     _refP:=exec('FindAndGet','#table',P,'\"+$NWU.P().ref()+\"',,,null());
                     _ports_in:=exec('portsIn','#b__box',_uid);
                     exec('portsInSet','#b__box',_ports_in,_uid,'P',_refP);
                     _ports_in
                  \"
               );
               _params.CONTEXT:=$(
                  \" _context:=obj_new('NWU');
                     _context.NWU:=exec('FindAndGet','#table',NWU,'\"+$NWU.ref()+\"',,,null());
                     _context
                  \"
               );
               exec('mp_run','#b__box',_params)
            ?}
         ",'Czy usunąć bieżący wiersz?'@,FUN.TYT)
   ?}
?}


\nwu_szczegoly_a_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Szczegóły - po" w oknie WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('exist','#record') || return(~~) ?};

exec('set_env','pkw_por');

:: Ustalenie rubryk dostępnych we wnioskach urlopowych.
NWU.P();
exec('wt_r_set','wnioski_urlopowe');

:: Podczytanie zawartości powodu odrzucenia wniosku
NWU.memo_get(,'REJECT',0);

:: Czy nieobecność może być nieobecnością na część dnia?
::    0 - Nie;
::    1 - Tak, ale decyduje operator;
exec('web_global_params_set','pkw','NWU','PartDay',0);
:: Czy wyświetlać check-box'a pozwalającego na przekroczenie limitu?
exec('web_global_params_set','pkw','NWU','OverLimit',0);

:: Jednostka miary limitowania nieobecności.
exec('web_global_params_set','pkw','NWU','JM','');

_we:='WT_REDR';

WT_VAR.WT_R:={? NWU.R<>null() & WT_R.find_key(NWU.R().RT,) || WT_R.ref() || null() ?};

:: aktualizacja 22.26_NRU01
exec('nwopo_set_and_save','wnioski_urlopowe');

exec('update','wnioski_urlopowe',1,NWU.ref());
exec('nwu_web_efld_opt','wnioski_urlopowe','*',NWU,_we);

NWU.web_display(_we,,"web_top_tab().web_eclose(web_top_win())");
~~


\nwopo_set_and_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Formuła ustawia bufor tabeli NWOPO na podstawie bieżącego rekordu tabeli NWU (dla wniosków o urlop opiekuńczy).
::       Formuła zapamiętuje również kontekst tabeli NWOPO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('upgrade2226_nru01','wnioski_urlopowe')
|| NWOPO.index('NWU');
   NWOPO.prefix(NWU.ref());
   {? NWOPO.first()
   || NWOPO.memo_get(,'PRZYCZ')
   || NWOPO.blank();
      NWOPO.memo_set('','PRZYCZ')
   ?};
   NWOPO.web_cntx_save()
?};
~~


\wt_r_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wypełnia ('tymczasową') tabelę WT_R informacjami o składnikach płacowych dostępnych we wnioskach
::       urlopowych.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wt_r_set','pkw','NWU.R','RUBNAZWA');
~~


\nwu_web_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za utworzenie nowego wniosku urlopowego. Wywoływana zarówno z obszaru roboczego
::       (po naciśnięciu przycisku "Dołącz") jaki i z listy zadań do wykonania.
::   WE: _a [ARRAY] - Tablica z elementami nazwanymi będącymi parametrami. Struktura określona przez \nwu_web_edit_par.
::                    Poprawność parametrów nie jest sprawdzana.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;

exec('maski','#b_proman');
exec('set_env','pkw_por',0);

P.prefix();
{? ~P.seek(_par.P)
|| FUN.info('Rejestrowaniu wniosku urlopowego niemożliwe.\nNie znaleziono pracownika.'@);
   return()
?};

:: Ustalenie rubryk dostępnych we wnioskach urlopowych.
exec('wt_r_set','wnioski_urlopowe');

:: Czy nieobecność może być nieobecnością na część dnia?
::    0 - Nie;
::    1 - Tak, ale decyduje operator;
exec('web_global_params_set','pkw','NWU','PartDay',0);
:: Czy wyświetlać check-box'a pozwalającego na przekroczenie limitu?
exec('web_global_params_set','pkw','NWU','OverLimit',0);

:: Jednostka miary limitowania nieobecności.
exec('web_global_params_set','pkw','NWU','JM','');

_we:='WT_REDR';

NWU.index('OD');
NWU.prefix(P.ref());
{? ~(type_of(_par.NWU)=type_of('') & NWU.seek(_par.NWU))
|| NWU.blank();
   NWU.P:=P.ref();
   NWU.memo_set('','REJECT');
   _nwu:=null()
|| NWU.memo_get(,'REJECT',0);
   _nwu:=NWU.ref()
?};
NWU.D:=date();

:: Aktualizacja bezpośredniego przełożonego, bez względu na jego nieobecności i zastępstwa.
_tab:=exec('prac_nad','stanprac',NWU.P,'dodatkowe=1,zastępstwa=0,nieobecni=1',,'AKCWNIO');
{? _tab.first()
|| P.cntx_psh();
   P.prefix();
   {? P.seek(_tab.P_SQL)
   || NWU.AO:=P.OSOBA
   ?};
   P.cntx_pop()
|| FUN.emsg(
      'Brak możliwości ustalenia bezpośredniego przełożonego.\n'
      'Wniosek może nie trafić do weryfikacji.'@
   )
?};

{? NWU.AO<>null() & exec('osoba2user','users',NWU.AO)=null()
|| OSOBA.cntx_psh();
   FUN.emsg(
      'Przełożony (%1) nie ma możliwosci korzystania z aplikacji.\n'
      'Wniosek może nie trafić do weryfikacji.'@ [NWU.AO().NAZWISKO+' '+NWU.AO().PIERWSZE]
   );
   OSOBA.cntx_pop()
?};

WT_VAR.WT_R:={? NWU.R<>null() & WT_R.find_key(NWU.R().RT,) || WT_R.ref() || null() ?};

:: aktualizacja 22.26_NRU01
_nru01:=exec('upgrade2226_nru01','wnioski_urlopowe');
_nwopo:=null();
{? _nru01
|| NWOPO.index('NWU');
   NWOPO.prefix();
   {? _nwu & NWOPO.find_key(_nwu)
   || _nwopo:=NWOPO.ref();
      NWOPO.memo_get(,'PRZYCZ')
   || NWOPO.blank();
      NWOPO.memo_set('','PRZYCZ')
   ?};
   NWOPO.web_cntx_save()
?};

web_params_set(
   exec('obj_ntab_set','#array',
      web_params_get(1),
      'NWU',_par.NWU,
      'FML',_par.FML,
      'path',_par.path,
      'nru01',_nru01,
      'nwopo',_nwopo
   )
);

NWU.web_btn_einit(_we,,'ZAKOŃCZ','state=%1' [{? _par.DONE || 'normal' || 'grayed' ?}]);
:: Wyłączenie przycisku OK w procesie (klienci nie rozróżniają "OK" od "Zakończ").
NWU.web_btn_einit(_we,,'ZAPISZ','state=%1' [{? ~_par.DONE || 'normal' || 'grayed' ?}]);

exec('update','wnioski_urlopowe',1,_nwu);
exec('nwu_web_efld_opt','wnioski_urlopowe','*',NWU,_we);

{? _par.path='Todo'
|| BI_TODO.web_cntx_save(1)
?};

NWU.web_edit(_we,~_we,,,
   "  web_params_set(_web_params:=web_params_get());
::    Środowisko jest ustawiane przez formułę "Przed obsługą".
      {? _a<>'ANULUJ'
      || _popraw:=type_of(_web_params.NWU)=type_of('') & +_web_params.NWU=48;
         _nru01:=type_of(_web_params.nru01)=type_of(0) & _web_params.nru01;
         _nwopo:=type_of(_web_params.nwopo)=type_of(null()) & _web_params.nwopo;
         _ret:=exec('nwu_check','wnioski_urlopowe',_popraw);
         {? _ret.FLD<>''
         || NWU.web_update(,,_ret.TAB,_ret.FLD);
            return()
         ?};
         {? _a='ZAKOŃCZ'
::          Jeżeli wybrano 'ZAKOŃCZ' to zmiana statusu.
         || NWU.AZ:='?'
         ?};
::       Jeżeli nwu_check zwraca komunikat typu info (bez innych błędów), to wtedy uzależniamy wykonanie od akceptacji
         {? _ret.ASK<>''
         || web_params_set(exec('obj_ntab_set','#array',_web_params,'status',_a));
            NWU.web_cntx_save(1);
            web_ask(\"exec('nwu_ask','wnioski_urlopowe',_a)\",_ret.ASK+'\n'+'Kontynuować?'@,FUN.TYT)
::       Działanie dotychczasowe, czyli wprowadzamy wniosek
         || {? {? _popraw
               || _mydo:=do_state()=0;
                  {? _mydo || do() ?};
                  {? NWU.put()
                  || {? _nru01 & __RUB.sys_attr(NWU.R,1191,NWU.DO)
                     || _ok:=0;
::                      obsługa sytuacji, kiedy na "popraw" zmieniła sie rybryka na urlop o opiekę
::                      w takim przypadku przed rozpoczęciem edycji wniosku nie mieliśmy powiązanego rekordu NWOPO
                        {? _nwopo
                        || _ok:=NWOPO.put()
                        || NWOPO.NWU:=NWU.ref();
                           _ok:=NWOPO.add()
                        ?};
                        {? _ok || NWOPO.memo_put(,'PRZYCZ') ?}
                     ?}
                  ?};
                  {? _mydo || end() ?}
               || _mydo:=do_state()=0;
                  {? _mydo || do() ?};
                  {? NWU.add()
                  || {? _nru01 & __RUB.sys_attr(NWU.R,1191,NWU.DO)
                     || NWOPO.NWU:=NWU.ref();
                        NWOPO.AZ:='N';
                        {? NWOPO.add()
                        || NWOPO.memo_put(,'PRZYCZ')
                        ?}
                     ?}
                  ?};
                  {? _mydo || end() ?}
               ?}
            || ($(_web_params.FML))(NWU.ref(),_a)
            ?}
         ?}
      ?};
::    W przypadku potwierdzenia wykonania ten fragment kodu wykonywany jest już w formule po dla web_ask (nwu_ask)
      {? ~(_a<>'ANULUJ' & _ret.ASK<>'')
      || NWU.web_eclose();
         {? _web_params.path='Todo'
         || BI_TODO.web_cntx_load(1)
         |? _web_params.path='Proc'
         || exec('web_title_clear','areatitle')
         ?};
         {? _web_params.path<>'Proc'
         || web_top_refresh(1)
         ?}
      ?}
   "
)


\nwu_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa właściwej akcji usuwania wniosku.
::   WE: _a [REFERENCE] - Wskazanie wniosku do usunięcia.
::   WY: '' lub komunikat o błędzie.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
NWU.cntx_psh();
NWU.prefix();
{? ~NWU.seek(_a)
|| _ret:=exec('error','wnioski_urlopowe','#NWU.seek()')
|? ~(NWU.AZ='' | NWU.AZ='?')
|| _ret:=exec('error','wnioski_urlopowe','#NWU.AZ')
|? ~NWU.del(,1)
|| _ret:=exec('error','wnioski_urlopowe','#NWU.del()')
?};
NWU.cntx_pop();
_ret


\nwu_withdraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa właściwej akcji wycofania wniosku.
::   WE: _a [REFERENCE] - Wskazanie wniosku do wycofania.
::   WY: '' lub komunikat o błędzie.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
NWU.cntx_psh();
NWU.prefix();
{? ~NWU.seek(_a)
|| _ret:=exec('error','wnioski_urlopowe','#NWU.seek()')
|? NWU.AZ<>'T'
|| _ret:=exec('error','wnioski_urlopowe','#NWU.AZ')
|? NWU.AZ:='D';
   ~NWU.put(1)
|| _ret:=exec('error','wnioski_urlopowe','#NWU.put()')
?};
NWU.cntx_pop();
_ret


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE: [_a] [STRING] - Dodatkowy komunikat lub kod błędu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err:={? var_pres('_a')=type_of('') || _a || '' ?};
_ret:='Rejestrowanie wniosku o urlop niemożliwe.'@;
{? _err='#P'
|| _ret+='\n'+'Nie znaleziono pracownika.'@
|? _err='#NWU'
|| _ret+='\n'+'Brak wskazania wniosku.'@
|? _err='#NWU.seek()'
|| _ret+='\n'+'Nie znaleziono wniosku.'@
|? _err='#NWU.del()'
|| _ret+='\n'+'Usunięcie wniosku o urlop nie powiodło się.'@
|? _err='#NWU.put()'
|| _ret+='\n'+'Zapisywanie danych nie powiodło się.'@
|? _err='#NWU.AZ'
|| _ret+='\n'+'Status wniosku nie pozwala na wykonanie akcji.'@

|? _err<>''
|| _ret+='\n'+_err
?};
_ret


\keyRefV
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca wirtualną wartość klucza.
::   WE: _a [REFERENCE] - Wskazanie rekordu kluczowego.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'_'+$_a


\nwu_g_df_web
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Format wyświetlania" pola NWU.G.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'empty='+$(NWU.PARTDAY<>'T')


\nwu_web_wer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Przed obsługą" okna WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Zawsze zaczynamy, od przekazania parametrów "dalej".
web_params_set(web_params_get());
:: Ustawiam środowisko.
exec('env_wt','b_proces');
~~


\nwu_web_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Po odświeżeniu" okna WEB_WER tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: !!! Czy dla pustej dziedziny ta formuła wciąż się wykonuje?!
{? ~NWU.get()
|| return()
?};

:: Dostępność przycisków.
_ag:='';
{? ~(NWU.AZ='' | NWU.AZ='?')
:: Popraw, Usuń.
|| _ag+='PU'
?};
{? ~(NWU.AZ='T' & NWU.N=null() & NWU.OS_N=null())
:: Wycofaj.
|| _ag+='W'
?};

NWU.web_win_opt('WEB_WER',,'grayed='+_ag)


\nwu_web_edit_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła tworzy tablicę parametrów nazwanych dla formuły edytującej rekord wniosku urlopowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('P','NWU','DONE','FML','path');
:: Wskazanie (uidref) pracownika, dla którego redagowany będzie wniosek urlopowy.
_par.P:=~~;
:: Wskazanie (uidref) redagowanego rekordu (w poprzedniej sesji).
_par.NWU:=~~;
:: Czy przycisk Zakończ ma być dostępny w oknie redagowania [0/1]?
_par.DONE:=1;
:: Formuła wykonywana po (prawidłowym) uzupełnieniu wymaganych pól. Odpowiada za obsługę procesowości. Do formuły
:: przekazywane są dwa parametry:
::    _a [REFERENCE] - Wskazanie dodanego zapisu NWU.
::    _b [STRING]    - Identyfikator przycisku (ZAKOŃCZ / OK).
_par.FML:="";
:: Miejsce wywołania (Proc, Todo, Area).
_par.path:='';

_par


\nwu_wt_redr_wt_var_wt_r_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola WT_VAR.WT_R w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
NWU.R:=WT_VAR.WT_R().R;
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_nwu_od_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola NWU.OD w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_nwu_do_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola NWU.DO w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_nwu_partday_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola NWU.PARTDAY w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redw_pla_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola NWU.PLA (Przekroczenie limitu) w oknie WT_REDW tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_plw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po redagowaniu" pola NWU.PLA (Przekroczenie limitu) w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_slo_kod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Po redagowaniu" pola NWOPO.SLO_KOD (Stopień pokrewieństwa) w oknie WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nwu:=web_params_get().NWU;
exec('update','wnioski_urlopowe',,{? type_of(_nwu)=type_of('') & +_nwu=48 || NWU.ref() || null() ?});
exec('nwu_web_efld_opt','wnioski_urlopowe')


\nwu_wt_redr_pola_grp_time_x_df
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Format wyświetlania pól POLA_GRP.TIME_1 i POLA_GRP.TIME_1 w oknie redagowania WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'hour_chars=3'


\nwu_wt_redr_pola_grp_time_2_ef
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Format redagowania pola POLA_GRP.TIME_1 w oknie redagowania WT_REDR tabeli NWU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'hour_chars=3'


\nwu_wt_redr_pola_grp_time_2_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola POLA_GRP.TIME_2 w oknie redagowania WT_REDR tabeli NWU. Procedura wykonywana tylko dla
::       nieobecności na część dnia. Zasadniczo służy do aktualizacji pola NWU.G [REAL] na podstawie zmiennej
::       POLA_GRP.TIME_2 [TIME].
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? POLA_GRP.TIME_2=time(0,0,0)
:: Wprowadzenie zerowej liczby godzin sprawiłoby, że procedura \update "uznałaby" iż właśnie zaznaczone zostało pole
:: "Nieobecność na część dnia" i należy uzupełnić pole NWU.G liczbą godzin z kalendarza. Tak więc użytkownik widziałby
:: (wprowadzone przez siebie) 000:00:00, ale w tabeli (NWU.G) byłaby inna wartość. Poniższy kod ma nas chronić przed
:: taką sytuacją.
|| POLA_GRP.TIME_2:=*(NWU.G*60)
|| NWU.G:=(*POLA_GRP.TIME_2)/60$2
?};
NWU.G


\run_from_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uruchamia proces dot. rejestracji wniosków urlopowych z listy czynności startowych
::   WE: _a [STRING] - uid czynności
::       _b [REFERENCE] - wskazanie na rekord B_PREL
::       _c [FORMULA]   - formuła przed wyborem użytkownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_act_uid:={? var_pres('_a')=type_of('')     || _a || return(_result) ?};
 _b_prel:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};
  _fml_b:={? var_pres('_c')=type_of("")     || _c || return("1") ?};

exec('web_global_params_set','pkw','PKW_POR__RWU','ACT_UID',_act_uid);

_fcontext:=
   "  _context:=obj_new('NWU','BTN');
      _context.NWU:=_a;
      _context.BTN:=_b;
   ";

_fml_a:=$(
   "  _args:=exec('nwu_web_edit_par','wnioski_urlopowe');
      _args.P:=P.uidref();
      _args.FML:=
         \""+_fcontext+"
            _b_prel:='"+$_b_prel+"';
            _uid:='"+_act_uid+"';
            _refP:=exec('FindAndGet','#table',P,'\"+$P.ref()+\"',,,null());
            _ports_in:=exec('portsIn','#b__box',_uid);
            exec('portsInSet','#b__box',_ports_in,_uid,'P',_refP);
            exec('web_run','#b__box',_b_prel,'DOŁĄCZ',_ports_in,'web_Proc',,_context)
         \";
      _args.path:='Proc';
      exec('nwu_web_edit','wnioski_urlopowe',_args)
   ");
exec('p_web_btn_cntx','p_web',_fml_b,_fml_a)


\run_from_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uruchamia zadanie dot. wniosków urlopowych z listy zadań
::   WE: _a [REFERENCE] - wskazanie na rekord BI_PREL
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=~~;
_bi_prel:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};

:: Startujemy z listy zadań - konieczne jest ustawienie środowiska.
{? exec('set_env','pkw_por',0)
|| NWU.prefix();

   _fcontext:=
   "  _context:=obj_new('NWU','BTN');
      _context.NWU:=_a;
      _context.BTN:=_b;
   ";

   _b_ele:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL().B_ELE",null());

   _kind_in:=exec('kind_in','#b_port');
   _in:=exec('getPorts','#b_port',_b_ele,_kind_in,_bi_prel);
   exec('fillPorts','#bi_port',_bi_prel,_kind_in,_in);

   _kind_int:=exec('kind_internal','#b_port');
   _int:=exec('getPorts','#b_port',_b_ele,_kind_int,_bi_prel);
   exec('fillPorts','#bi_port',_bi_prel,_kind_int,_int);

   _args:=exec('nwu_web_edit_par','wnioski_urlopowe');
   _args.P:=exec('ref2uid','#table',_in.P);
   _args.NWU:=exec('ref2uid','#table',_int.NWU);
   _args.FML:=
      _fcontext+
      "  _bi_prel:=exec('FindAndGet','#table',BI_PREL,'"+$_bi_prel+"',,,null());
         exec('web_run','#b__box',_bi_prel,'DOŁĄCZ',,'web_Todo',,_context)
      ";
   _args.path:='Todo';
   exec('nwu_web_edit','wnioski_urlopowe',_args)
?}


\run_from_area
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uruchamia zadanie dot. wniosków urlopowych z obszaru roboczego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_web_params:=web_params_get(1);

_fcontext:=
   "  _context:=obj_new('NWU','BTN');
      _context.NWU:=_a;
      _context.BTN:=_b;
   ";

{? ref_tab(_web_params.B_PREL)=BI_PREL
:: Kontynuacja czynności.
||
   _bi_prel:=exec('FindAndGet','#table',BI_PREL,_web_params.B_PREL,,,null());
   _b_prel:=exec('FindAndGet','#table',BI_PREL,_web_params.B_PREL,,"B_PREL",null());
   _b_ele:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL().B_ELE",null());

   _kind_in:=exec('kind_in','#b_port');
   _in:=exec('getPorts','#b_port',_b_ele,_kind_in,_bi_prel);
   exec('fillPorts','#bi_port',_bi_prel,_kind_in,_in)

:: Mikroczynność lub start procesu.
|| _bi_prel:=null();
   _b_prel:=exec('FindAndGet','#table',B_PREL,_web_params.B_PREL);
   _b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE",null());
   _in:=exec('get_act_proc_params','#b__box',_web_params.ACT_UID,_b_prel,_web_params.PORTS_IN)
?};

{? _web_params.AKCJA='DOŁĄCZ' | _web_params.AKCJA='POPRAW'
|| _micro:=exec('is_micro','#b__box',_b_prel,_web_params.AKCJA='DOŁĄCZ');
   {? _web_params.AKCJA='DOŁĄCZ' & _micro
   || return()
   ?};
   _args:=exec('nwu_web_edit_par','wnioski_urlopowe');
   _args.P:=exec('ref2uid','#table',_in.P);
   {? _web_params.AKCJA='POPRAW'
   || _context:=_web_params.CONTEXT();
      _args.NWU:=exec('ref2uid','#table',_context.NWU)
   ?};

   _args.DONE:=~_micro;
   _args.FML:=
      _fcontext+
      "  _web_params:=web_params_get(0);
         exec('web_run','#b__box',_web_params.B_PREL,_web_params.AKCJA,_web_params.PORTS_IN,'web_Area',,_context)
      ";
   _args.path:='Area';
   exec('nwu_web_edit','wnioski_urlopowe',_args)

|? _web_params.AKCJA='USUŃ' | _web_params.AKCJA='WYCOFAJ'
|| exec('web_run','#b__box',
      _web_params.B_PREL,_web_params.AKCJA,_web_params.PORTS_IN,'web_Area',,_web_params.CONTEXT);

:: Odświeżenie bieżącego okna z wnioskami.
   NWU.web_refresh('WEB_WER','NWU_WEB_WER');
:: Odświeżenie okna z wnioskami do weryfikacji (na II-giej zakładce). Operacja niezbędna, gdy osoba składająca wniosek
:: będzie go sobie sama weryfikowała.
:: Ponieważ odświeżenie okna, którego nie ma nie jest traktowane jako błąd, to nie ma problemu w przypadku podwładnego,
:: który nie ma zakładki "Weryfikacja".
   WT_NWU.web_refresh('WEB_WER','WT_NWU_WEB_WER')

?}


\nwu_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wspólna formuła główna dla czynności PKW_POR_IRWU oraz PKW_POR_PRWU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;
_context:=_par.context;
_akcja:=_mp.akcja();

{? _akcja='webTermProcCancel'
|| return(~~)
?};

_result:='';

{? exec('ref2uid','#table',_in.P)=''
|| _result:=exec('error','wnioski_urlopowe','#P')

|? ~(obj_ntab(_context) & var_pres('NWU',_context)=type_of(null()) &
     (_idNWU:=exec('ref2uid','#table',_context.NWU))<>'')
|| _result:=exec('error','wnioski_urlopowe','#NWU')

|? _akcja='DOŁĄCZ' | _akcja='POPRAW'
|| _int.NWU:=_out.NWU:=_context.NWU;
   _mp.save(_int,_out);

   {? _akcja='DOŁĄCZ'
::    Po dołączeniu rekordu zamieniamy klucz wirtualny na rzeczywisty.
   || _mp.delRef(exec('keyRefV','wnioski_urlopowe',_in.P),,0);
      _mp.keyRef(_idNWU)
   ?};

   {? ~_mp.isMicro() & obj_ntab(_context) & var_pres('BTN',_context)=type_of('') & _context.BTN='OK'
   || _mp.keep()
   || _mp.done()
   ?}

|? _akcja='USUŃ'
|| {? (_result:=exec('nwu_del','wnioski_urlopowe',_context.NWU))=''
   || _int.NWU:=_out.NWU:=null();
      _mp.save(_int,_out);
      _mp.delRef(_idNWU,,0);
::    Po usunięciu wniosku zmieniamy klucz rzeczywisty na klucz wirtualny.
      _mp.keyRef(exec('keyRefV','wnioski_urlopowe',_in.P));
      _mp.cancel()
   ?}

|? _akcja='WYCOFAJ'
|| {? (_result:=exec('nwu_withdraw','wnioski_urlopowe',_context.NWU))=''
   || _int.NWU:=_out.NWU:=_context.NWU;
      _mp.save(_int,_out);
::    Po wycofaniu wniosku zamieniamy klucz wirtualny na rzeczywisty.
      _mp.delRef(exec('keyRefV','wnioski_urlopowe',_in.P),,0);
      _mp.keyRef(_idNWU);
      _mp.done()
   ?}
?};

{? _result<>''
::  Obsługa błędów.
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\czy_dzieci_wiek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Formuła zwraca informację o tym, czy wskazany pracownik ma conajmniej jedno dziecko, którego wiek jest
::       późniejszy od wskazanego zakresu dat.
::       Formuła bierze pod uwagę tylko rodzinę danej Osoby (P.OSOBA) i jedynie "dziecko własne, przysposobione
::       lub dziecko małżonka". Dzieci sortowane są w porządku malejącym po dacie urodzenia (pod uwagę brane jest tylko
::       najmłodsze dziecko). Data urodzenia dziecka powinna być późniejsza niż wskazana data do.
::   WE: _a   [REFERENCE] - Wskazanie pracownika do analizy.
::       [_b] [NUMBER]    - Wiek najmłodszego dziecka (domyślnie 14 lat).
::       [_c] [DATE]      - Data początkowa nieobecności (domyślnie date()).
::       [_d] [DATE]      - Data końcowa nieobecności (domyślnie date()).
::   WY: 1 - pracownik ma conajmniej jedno dziecko, które spełnia podane w parametrach założenia.
::       0 - pracownik nie ma dziecka, które spełniałoby podane w parametrach założenia
::----------------------------------------------------------------------------------------------------------------------
_data:=date(0,0,0);
_typ_data:=type_of(_data);
_czy_dzieci:=0;

_p_ref:={? var_pres('_a')=type_of(null) || _a || return(_czy_dzieci) ?};
_wiek:={? var_pres('_b')=type_of(1) & _b>0 || _b || 14 ?};
_data_od:={? var_pres('_c')=_typ_data & _c<>_data || _c || date() ?};
_data_do:={? var_pres('_d')=_typ_data & _d<>_data || _d || date() ?};

P.cntx_psh();
P.prefix();
RD.cntx_psh();
RD.prefix();

{? P.seek(_p_ref)
:: Założony filtr na RD (Rodzina) - brane pod uwagę będzie tylko rodzina danej Osoby
:: i jedynie "dziecko własne, przysposobione lub dziecko małżonka"
|| RD.f_clear();
   RD.f_set(
      'DA^',
      'join S_ZUS using(RD.STPK, S_ZUS.REFERENCE)',
      'RD.OSOBA=:_a and S_ZUS.RODZAJ=\':_b\' and (S_ZUS.KOD=\':_c\' or S_ZUS.KOD=\':_d\')',P.OSOBA,'R','11','21'
   );
   {? RD.f_first()
::    Weryfikacja ukończenia przez najmłodsze dziecko wymaganego wieku
   || _data_uk:=exec('data_uk','personel_alerty',RD.DA,_wiek);
::    możliwość rozbudowy o informację o dzieciach należących do przedziału
      {? _data_uk>_data_od & _data_uk>_data_do
      || _czy_dzieci:=1
      ?}
   ?}
?};

RD.f_clear();
RD.cntx_pop();
P.cntx_pop();

_czy_dzieci


\nwu_ask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Formuła dla wprowadzania wniosków, uzależniająca wprowadzenie od decyzji użytkownika (w sytuacji gdy funkcja
::       sprawdzająca zwróciła jakiś informacyjny komunikat.
::   WE: _a [STRING] - Status wniosku
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ask:=_a;
web_params_set(_web_params:=web_params_get());
_popraw:=type_of(_web_params.NWU)=type_of('') & +_web_params.NWU=48;
{? _ask=1 & NWU.web_cntx_load(1)
|| exec('set_env','pkw_por');
   {? {? _popraw || NWU.put() || NWU.add() ?}
   || ($(_web_params.FML))(NWU.ref(),_web_params.status)
   ?};

   NWU.web_eclose();
   {? _web_params.path='Todo'
   || BI_TODO.web_cntx_load(1)
   |? _web_params.path='Proc'
   || exec('web_title_clear','areatitle')
   ?};
   {? _web_params.path<>'Proc'
   || web_top_refresh(1)
   ?}
|| NWU.web_update(,,NWU,'DO');
   return()
?}


\upgrade2226_nru01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Sprawdza, czy została naniesiona definicja aktualizacji systemu do 22.26_NRU01
::----------------------------------------------------------------------------------------------------------------------
var_pres('NWOPO')>0 & var_pres('PRZ_USPR',H_UM)>0 & var_pres('ZAM_ZAW',H_UM)>0 & var_pres('ZAM_OKR',H_UM)>0


\nwu_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wyzwalacz "put() po" tabeli NWU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('nwopo_az_update','wnioski_urlopowe');
~~


\nwopo_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
NWOPO.blank();
exec('nwopo_efld_opt','wnioski_urlopowe','*',NWOPO,NWOPO.win_edit('?'))


\nwopo_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Obsługa akcji "Popraw - przed" w oknach wertowania tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_efld_opt','wnioski_urlopowe','*',NWOPO,NWOPO.win_edit('?'))


\nwopo_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Obsługa akcji "Usuń - przed" w oknach wertowania tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? NWOPO.NWU
|| FUN.info('Oświadczenie z powiązanym wnioskiem o urlop opiekuńczy.\n'@+
            'Oświadczenie będzie można usunąć podczas usuwania wniosku o urlop.'@);
   0
|? exec('del_ask','#table')
|| NWOPO.del()
?}


\nwopo_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknach wertowania tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_efld_opt','wnioski_urlopowe','*',NWOPO,NWOPO.win_edit('?'));
NWOPO.display()


\nwopo_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_chk','wnioski_urlopowe',0)


\nwopo_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_chk','wnioski_urlopowe',1)


\nwopo_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Obsługa akcji "Rekord - po" w oknach wertowania tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_chk','wnioski_urlopowe',-menu_txt()='popraw')


\nwopo_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli NWOPO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.cntx_psh();
_kod:=NWOPO.SLO_KOD().KOD;
SLO_KOD.cntx_pop();
{? _kod<>'NIESP'
|| NWOPO.KRAJ:=null;
   NWOPO.WOJEWODZ:='';
   NWOPO.POWIAT:='';
   NWOPO.GMINA:='';
   NWOPO.KOD:='';
   NWOPO.POCZTA:='';
   NWOPO.MIASTO:='';
   NWOPO.ULICA:='';
   NWOPO.DOM:=''
?};
1


\nwopo_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli NWOPO.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
exec('nwopo_modb','wnioski_urlopowe');
__CHK.validate(NWOPO,
   $("_a.table(NWOPO,"+$_put+",,'P','OD','DO','NAZWISKO','PIERWSZE','PRZYCZ','SLO_KOD')"),
   "{? NWOPO.SLO_KOD().KOD='NIESP'
     || _a.record(NWOPO,,'KRAJ','MIASTO','DOM')
     || ''
     ?}
   ",
   "_a.in_set(NWOPO,'AZ',,'T','N')",
   "{? NWOPO.DO<NWOPO.OD
    || _a.err_incorrect('Data od','Data nie może być późniejsza niż w polu ""Data do"".');
       'OD'
    || ''
    ?}
   ",
   $("{? NWOPO.AZ='T' & exec('nwopo','overlap',"+$_put+") || 'OD' || ''?}")
)


\nwopo_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli NWOPO.
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(NWOPO)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='SLO_KOD'
|| SLO_KOD.cntx_psh();
   _val:=(NWOPO.SLO_KOD().KOD='NIESP');
   SLO_KOD.cntx_pop();
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1'[$_val],_TAB,'KRAJ');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'WOJEWODZ');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'POWIAT');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'GMINA');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'KOD');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'POCZTA');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1'[$_val],_TAB,'MIASTO');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'ULICA');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1'[$_val],_TAB,'DOM');
   _set(_TAB,_we,_grp_ident,'enable=%1'[$_val],_TAB,'LOKAL')
?};

1


\nwopo_slo_kod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła po redagowaniu pola P tabeli NWOPO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nwopo_efld_opt','wnioski_urlopowe')


\nwopo_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Wertowanie i redakcja informacji dodatkowych do urlopów opiekuńczych (NWOPO)
::   WE: [_a][INTEGER] - 0*/1 Czy wyświetlać od razu okienko redagowania?
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_prac:=P.ref();
_red:={? var_pres('_a')=type_of(0) || _a || 0 ?};
NWOPO.cntx_psh();
NWOPO.win_sel('WER');
NWOPO.win_edit('RED');
NWOPO.index('POD');
NWOPO.prefix(_prac);
P.cntx_psh();
OSOBA.cntx_psh();
NWOPO.hdr_sel(' - %1 %2 [%3]'[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,form(P.T)]);
OSOBA.cntx_pop();
P.cntx_pop();
:: Nie uruchamiaj automatycznego dodawania rekordu jeśli istnieje już rekord "zahaczający" o dodaną nieobecność:
{? (NWOPO.find_key(N.OD) | NWOPO.find_tab(0,'DO',,'>=',N.OD,'OD',,'<=',N.DO)) & _red
|| _red:=0
?};
NWOPO.select(,1,,,,{? _red || "exec('nwopo_dodaj','wnioski_urlopowe')" || "~~" ?});
NWOPO.cntx_pop();
1


\nwopo_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Dodawanie nowego zapisu informacji dodatkowych do urlopów opiekuńczych (NWOPO)
::UWAGA: Kontekst tabeli N musi być ustalony.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
NWOPO.blank();
NWOPO.memo_set('','PRZYCZ');
NWOPO.OD:=N.OD;
NWOPO.DO:=N.DO;
NWOPO.P:=N.P;
exec('nwopo_efld_opt','wnioski_urlopowe','*',NWOPO,NWOPO.win_edit('?'));
{? NWOPO.edit("exec('nwopo_chk','wnioski_urlopowe',0)")
|| {? NWOPO.add()
   || NWOPO.memo_put(,'PRZYCZ')
   ?}
?}


\nwopo_n_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Po modyfikacji nieobecności z atrybutu 119 - urlop opiekuńczy.
::   WE: [_a][INTEGER] - rodzaj akcji:
::                       0* - dołącz
::                       1  - popraw
::                       2  - usuń
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of(0) || _a || 0 ?};
FUN.info('Dodano/Zmieniono nieobecność - urlop opiekuńczy.'
         '\nZweryfikuj poprawność danych w kartotece oświadczeń urlopów opiekuńczych.'
         '\nDane można uzupełnić później wybierając z menu akcję "Urlopy->Urlopy opiekuńcze".'@);
exec('nwopo_select','wnioski_urlopowe',~_akcja)


\nwopo_kraj_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [12.51]
:: OPIS: Formuła na wartość początkową pola KRAJ tabeli NWOPO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('FindInSet','#table','KRAJE','KRAJE','PL',,,1)


\nwu_oswiadczenie_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła akcji "Oświadczenie" w okienku wertowania  WER tabeli NWU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
NWOPO.cntx_psh();
NWOPO.index('NWU');
NWOPO.prefix(NWU.ref());
{? NWOPO.first()
|| exec('nwopo_bw','wnioski_urlopowe')
|| FUN.info('Brak informacji o powiązanym oświadczeniu.'@)
?};
NWOPO.cntx_pop();
1


\nwopo_az_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Aktualizacja statusu oświadczenia na podstawie statusu wniosku
::       Formuła wykorzystana w triggerze po put dla tabeli NWU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
NWOPO.cntx_psh();
NWOPO.index('NWU');
NWOPO.prefix(NWU.ref());
{? NWOPO.first()
|| NWOPO.AZ:={? NWU.AZ='T' || 'T' || 'N' ?};
   NWOPO.memo_get(,'PRZYCZ',0);
   NWOPO.put(1)
?};
NWOPO.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2023/10/02 12:21:39 8181fbfc0f3dec6e4b55eae03161c625621705d427cc0782e215aa838574f5d642bc6acbc0b6ea705b1f8f103194220202809629710ed3fbbc9e9c3ed3555c99708adfa7877364c145c1bc012b80f2ba372e704c48c3f5e872886a23f0c4d138f07583cf463da603e892badeca6f9cf18ba55fd89256c2682da1bc8a5096719f
