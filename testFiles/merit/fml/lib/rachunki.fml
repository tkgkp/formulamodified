:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: rachunki.fml
:: Utworzony: 2014.12.10
:: Autor: -
::======================================================================================================================
:: Zawartość:  Procedury do obsługi rachunków bankowych
::======================================================================================================================


\czy_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: G.Szlęk - 1999.07.06
:: OPIS: Komunikat o błędzie
::  OLD: \czy_akc/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Numer konta niezgodny z numerem kierunkowym oddziału banku.'
        '\nCzy na pewno akceptujesz niepoprawny zapis?'@)


\sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: G.Szlęk - 1999.07.06
:: OPIS: sprawdza poprawność wprowadzonego numeru konta
::       jeśli podane jest pole oddziału bank, sprawdza wypełnienie pola rachunek
::       jeśli podane jest pole rachunek, sprawdza wypełnienie pola oddział banku,
::       następnie sprawdza, czy numer kierunkowy oddziału banku występuje w pierwszych
::       11 znakach numeru rachunku, jeśli nie - wyświetla komunikat, operator
::       może zatwierdzić taki rekord po potwierdzeniu.
::   WE: _a - tabela (obiekt nie string),
::       _b - akronim pola bank (string),
::       _c - akronim pola rachunek (string)
::   WY: string pusty albo akronim niewypełnionego pola
:: WYWOŁANIE: w tabelach, w ktorych nalezy kontrolowac numer rachunku, w syste-
::            mach pakietu SKID.
::  OLD: \sprawdz/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
($('{| '+!_a+' |!'+
   '   _a:={? '+_b+' || chk_rec(\''+_c+'\')'+
   '       |? +'+_c+' || chk_rec(\''+_b+'\')'+
   '       || \'\''+
   '       ?};'+
   '   {? _a=\'\' & '+_b+' ||'+
   '      _nr:=\'\';_cnt:=0;'+
   '      {! _n:=1..+'+_c+
   '         |? _cnt<10'+
   '         |! _c:=_n+'+_c+'+1;'+
   '            {? #_c | _c=\'0\' | (\'A\'<=_c & _c<=\'z\') ||'+
   '               _cnt+=1; _nr+=_c'+
   '            ?}'+
   '      !};'+
   '      {? +_nr & ~(_nr*'+_b+'().NUMER) ||'+
   '         {? ~exec(\'czy_akc\',\'rachunki\') || _a:=\''+_b+'\' ?}'+
   '      ?}'+
   '   ?}'+
   '|};'+
   '_a'))()


\spr_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sprawdzenie poprawności danych redagowanych w kartotece urzędów skarbowych
::       z dodatkowym uwzględnieniem zgodności numeru konta z formatem IBAN
::   WY: 1 lub 0
::  OLD: \spr_us/banki.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_a:=__CHK.record(US,,'NU'))=''
|| {? +US.B3 & ~exec('iban_ok','#id',US.B3) || 'B3' || '' ?}
|| _a
?}


\obj_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Obiekt do obsługi rachunków bankowych
::       Pola obiektu:
::          KRAJ_KOD kod ISO kraju
::          INFOKRAJ kod ISO kraju na podstawie XINFO
::          INFOKRAR ref kraju na podstawie XINFO
::       Metody obiektu:
::          chk_rban sprawdza poprawność rachunku bankowego
::          get_drb  zwraca domyślny rachunek bankowy (REFERENCE lub STRING)
::          get_rbel zwraca numer rachunku bankowego IBAN w formacie elektronicznym
::          get_rbtx zwraca numer rachunku bankowego IBAN w formacie papierowym (jeśli jest
::                   poprawny lub dwa pierwsze znaki nie są cyframi), w pozostałych przypadkach
::                   zwraca tak, jak jest przechowywany w bazie
::          getrkraj zwraca ref() rekordu tabeli KRAJE
::          getrbank zwraca ref() rekordu tabeli B
::          getrrban zwraca ref() rekordu tabeli SKID_RBK
::          formiban zwraca numer rachunku bankowego w formacie IBAN (jeśli był w formacie NRB)
::          formnrb  zwraca numer rachunku bankowego w formacie NRB (jeśli był w formacie IBAN)
::          getrbank zwraca ref() rekordu tabeli B
::          set_kraj ustawia wartość pola INFOKRAJ
::  OLD: \obj_rb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('RB');
obj_decl('RB',
obj_fld('KRAJ_KOD',''),
obj_fld('INFOKRAJ',''),
obj_fld('INFOKRAR',0),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: chk_rban sprawdza poprawność rachunku bankowego
::          _a: rachunek bankowy
::          _b: 0 - dołączanie do SKID_RBK,
::              1 - edycja SKID_RBK
::              2 - redakcja zmiennej lub pola poza SKID_RBK
::          _c: redagowane pole (STRING)
::          [_d: tabela przynależności rachunków bankowych]
obj_meth('chk_rban',"
   _ret:='';
   {? _>3
   || _tab:=_d
   || _tab:=PAR_WYDR.TABAKR
   ?};
   {? ~+_a
   || FUN.info('Nie podano numeru rachunku bankowego.'@); _ret:=_c
   ?};
   .set_kraj();
   {? ~+_ret & _b<>2 & (_tab=REF.INFO | _tab=REF.INFOROR)
   || {? SKID_RBK.KOD=''
      || FUN.info('Nie podano kodu księgowego.'@); _ret:='KOD'
      || SKID_RBK.cntx_psh();
         _v_ref:=SKID_RBK.ref();
         _v_ind:=SKID_RBK.ndx_tmp(,1,'KOD',,,'TAB',,);
         SKID_RBK.index(_v_ind); SKID_RBK.prefix(SKID_RBK.KOD,REF.INFO);
         {? SKID_RBK.first() & (~_b | (_b=1 & SKID_RBK.ref()<>_v_ref))
         || FUN.info('Istnieje już rachunek bankowy o podanym kodzie księgowym.'@); _ret:='KOD'
         ?};
         SKID_RBK.ndx_drop(_v_ind); SKID_RBK.cntx_pop()
      ?};
      {? ~+_ret & SKID_RBK.RD='T'
      || _v_n:={? _b || SKID_RBK.ref ?};
         SKID_RBK.cntx_psh();
         _v_ind:=SKID_RBK.ndx_tmp(,1,'TAB',,,'RD',,,'WAL',,); SKID_RBK.index(_v_ind);
         SKID_RBK.prefix({? _tab=REF.FIRMA().SYMBOL+'ROR' || REF.INFOROR || REF.INFO ?},'T',SKID_RBK.WAL);
         {? SKID_RBK.first() & (_v_n=0 | _v_n<>SKID_RBK.ref)
         || FUN.info('Istnieje już rachunek bankowy oznaczony jako domyślny dla waluty %1.'@[SKID_RBK.WAL().KOD]);
            _ret:='RD'
         ?};
         SKID_RBK.ndx_drop(SKID_RBK.index('?')); SKID_RBK.cntx_pop()
      ?}
   |? ~+_ret & _b<>2 & _tab=REF.FIRMA().SYMBOL+'KH2'
   || {? ROZNE.KH_WYB=0 || FUN.emsg('Nie wskazano kontrahenta.'@); _ret:='KH_WYB' ?};
      {? _ret='' & RACHBANK.KB_2R=RB.get_rbtx(2,RACHBANK.SK_LB_SR,SKID_RBK.KRAJ().KODISO)
      || FUN.info('Rachunek bankowy i subkonto są identyczne.'@); _ret:=_c
      ?};
      {? ~+_ret
      || B.prefix(); _vkod1:=_vkod2:='';
         _vref:=RB.getrbank(3,RACHBANK.KB_2R);
         {? _vref & B.seek(_vref) || _vkod1:=4+B.NUMER ?};
         _vref:=RB.getrbank(4,RACHBANK.SK_LB_SR,.INFOKRAJ);
         {? _vref & B.seek(_vref) || _vkod2:=4+B.NUMER ?};
         {? +_vkod1 & +_vkod2 & _vkod1<>_vkod2
         || FUN.info('Rachunek bankowy i subkonto zdefiniowane są dla różnych oddziałów bankowych.'@);
            _ret:=_c
         ?}
      ?}
   |? ~+_ret & _b<>2 & _tab='KH'
   || {? _ret='' & SKID_RBK.RD='T'
      || _v_rb:=SKID_RBK.N;
         _v_ref:=SKID_RBK.ref();
         SKID_RBK.cntx_psh();
         SKID_RBK.index('RD');
         SKID_RBK.prefix(RACHBANK.FIRMA,'KH',SKID_RBK.REF,'T');
         {? SKID_RBK.first()
         || _v_skrb:=SKID_RBK.N;
            {? (_v_rb<>_v_skrb &
               (_v_ref<>SKID_RBK.ref() | (_v_ref=SKID_RBK.ref() & -(1+menu_txt)='d')))
               | (_v_rb=_v_skrb & _v_ref<>SKID_RBK.ref())
            || FUN.info('Istnieje już rachunek bankowy oznaczony jako domyślny.'@); _ret:='RD'
            ?}
         ?};
         SKID_RBK.cntx_pop()
      ?}
   ?};
   {? ~+_ret & _b<>2
   || {? ~.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)
      || {? ~FUN.ask('W słowniku brak oddziału banku o podanym kodzie (numerze kierunkowym). Czy na pewno akceptować?'@)
         || _ret:=_c
         ?}
      ?}
   ?};
   {? ~+_ret
   || _vr:=
         {? _b=1
         || @.RB.get_rbel(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)
         || @.RB.get_rbel(2,_a,SKID_RBK.KRAJ().KODISO)
         ?};
         {? _b=2 & {? var_press('PB')>100 || cur_tab()=PB || 0 ?}
         || _warunek:=(PB.KRAJ_BAN().IBAN='T')
         || _warunek:=(SKID_RBK.KRAJ().IBAN='T')
         ?};
         {? _b=0 | cur_tab.name='skid_rbk'
         || {? _warunek & ~exec('iban_ok','#id',_vr,0,SKID_RBK.KRAJ().KODISO) || _ret:=_c ?}
         || {? _warunek & ~exec('iban_ok','#id',_vr) || _ret:=_c ?}
         ?}
   ?}; _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: getrbank zwraca ref() rekordu tabeli B
::       _a: 1 - dla znanej długości kodu oddziału banku
::           2 - dla nieznanej długosci kodu oddziału banku
::           3 - na podstawie numeru rachunku bankowego istniejacego w SKID_RBK
::           4 - na podstawie numeru rachunku bankowego nieistniejącego w SKID_RBK
::           5 - na podstawie numeru rachunku bankowego istniejącego w SKID_RBK i kontrahenta
::       _b: _a=1 lub _a=2 - kod oddziału banku, _a=3 lub _a=4 lub _a=5 nr rachunku (STRING)
::       _c: _a=1 lub _a=2 - kraj oddziału banku (REFERENCE), _a=3 ref kontrahenta, _a=4 - kod kraju oddziału banku
obj_meth('getrbank',"
   _ret:=null;
   {? +_b
   || {? _a=1
      || B.cntx_psh(); B.index('KRAJBANK'); B.prefix(_c,_b,_b);
         {? +_b & B.first() || _ret:=B.ref() ?}; B.cntx_pop()
      |? _a=2
      || B.cntx_psh(); B.index('KRAJBANK');
         {! |?
            {? +_b
            || {? B.prefix(_c,_b,_b); B.first() || _ret:=B.ref(); 0 || _b:=_b-1; 1 ?}
            || 0
            ?}
         !}; B.cntx_pop()
      |? _a=3
      || _b:=.get_rbel(2,_b);
         SKID_RBK.cntx_psh(); SKID_RBK.index('NUMER'); SKID_RBK.prefix(_b,_b);
         {? SKID_RBK.first() || _ret:=SKID_RBK.BANK ?}; SKID_RBK.cntx_pop()
      |? _a=4
      || _b:=.get_rbel(2,_b,_c);
         .set_kraj();
         {? _c='PL'
         || {? _b*'-'
            || _vb:=8+_b
            || _vb:={? .INFOKRAJ='PL' | (#(2+_b)<>0 & (2+_b)<>'00') || (10+_b)+8 || (12+_b)+8 ?}
            ?};
            _ret:=RB.getrbank(1,_vb,{? _c='PL' & _c<>.INFOKRAJ || .getrkraj(1,'PL') || .INFOKRAR ?})
         || {? ~(#(2+_b)<>0)
            || _vb:=(19+_b)+15;
               KRAJE.index('KODISO'); KRAJE.prefix(_c,_c);
               _vr:={? KRAJE.first() || KRAJE.ref() ?};
               {? _vr || _ret:=RB.getrbank(2,_vb,_vr) ?}
            ?}
         ?}
      |? _a=5
      || _b:=.get_rbel(2,_b);
         SKID_RBK.cntx_psh(); SKID_RBK.index('NUMER'); SKID_RBK.prefix(_b,_b);
         {? SKID_RBK.first()
         || {! |?
               {? SKID_RBK.TAB='KH' & SKID_RBK.REF=#_c || _ret:=SKID_RBK.BANK; 0 || SKID_RBK.next() ?}
            !}
         ?};
         SKID_RBK.cntx_pop()
      ?}
   ?}; _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: getrkraj zwraca ref() rekordu tabeli KRAJE
::          _a: 1 - na podstawie kodu kraju (STRING)
::              2 - na podstawie kraju licencjobiorcy lub kontrahenta
::              3 - na podstawie numeru rachunku bankowego
::          _b: _a=1 - kod kraju (STRING)
::              _a=2 - tabela przynaleznosci rachunkow bankowych (pole SKID_RBK.TAB)
::              _a=3 - numer rachunku bankowego
::          _c: _a=2 i _b='KH' - ref() tabeli KH
obj_meth('getrkraj',"
   _ret:=null;
   {? _a=1
   || KRAJE.cntx_psh(); KRAJE.index('KODISO'); KRAJE.prefix(_b);
      _ret:={? +_b & KRAJE.first() || KRAJE.ref() ?}; KRAJE.cntx_pop()
   |? _a=2
   || _ret:=XINFO.KRAJ;
      {? _b='KH'
      || KH.cntx_psh(); KH.prefix(); {? KH.seek(_c) & KH.KRAJISO || _ret:=KH.KRAJISO ?}; KH.cntx_pop()
      ?}
   |? _a=3
   || SKID_RBK.cntx_psh(); SKID_RBK.index('NUMER'); SKID_RBK.prefix(_b,_b);
      {? SKID_RBK.first() || _ret:=SKID_RBK.KRAJ ?}; SKID_RBK.cntx_pop()
   ?}; _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: getrrban zwraca ref() rekordu tabeli SKID_RBK
::          _a: numer rachunku bankowego
::          _b: tabela przynależności rachunków bankowych (pole SKID_RBK.TAB)
::          _c: właściciel rachunku (pole SKID_RBK.REF)
::          _d: wskazanie na SLO (pole SKID_RBK.SLO) (REAL)
::          _e: context: 1 - nie przywracać, 0 - przywracać (domyślnie)
obj_meth('getrrban',"
   _a:=.get_rbel(2,_a,'');
   {? ~(_=5 & _e) || SKID_RBK.cntx_psh() ?};
   {? +_b
   || _firma:={? _b*'KH'>0 || RACHBANK.FIRMA || null ?};
      {? _>2 & (_c | _b=REF.INFO)
      || SKID_RBK.index('TAB'); SKID_RBK.prefix(_firma,_b,_b,_c,{? _>3 & _d || _d || null ?},_a,_a)
      || SKID_RBK.index('WEKTOR'); SKID_RBK.prefix(_b,_a,_a)
      ?}
   || SKID_RBK.index('NUMER'); SKID_RBK.prefix(_a,_a)
   ?};
   _ret:={? SKID_RBK.first() & SKID_RBK.size()=1 || SKID_RBK.ref() || null ?};
   {? ~(_=5 & _e) || SKID_RBK.cntx_pop() ?};
   _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: get_drb  zwraca domyślny rachunek bankowy
::          _a: 1 - zwraca ref() rekordu tabeli SKID_RBK
::              2 - zwraca numer rachunku bankowego bez formatowania (STRING)
::              3 - zwraca numer rachunku bankowego w formacie elektronicznym NRB lub IBAN (STRING)
::              4 - zwraca numer rachunku bankowego w formacie papierowym NRB lub IBAN (STRING)
::          _b: tabela przynależności rachunków bankowych (pole SKID_RBK.TAB)
::          _c: własciciel rachunku (pole SKID_RBK.REF)
obj_meth('get_drb',"
   _ret:={? _a=1 || null || '' ?}; _v:=null;
   _firma:={? _b*'KH'>0 || RACHBANK.FIRMA || null ?};
   SKID_RBK.index('AKTYWNY'); SKID_RBK.prefix(_firma,_b,_c,'T');
   {? SKID_RBK.first()
   || {? SKID_RBK.size()=1
      || _v:=SKID_RBK.ref()
      || SKID_RBK.index('RD');
         SKID_RBK.prefix(_firma,_b,_c,'T');
         {? SKID_RBK.first()
         || {! |? {? SKID_RBK.WAL=SSTALE.WAL || _v:=SKID_RBK.ref();0 || SKID_RBK.next() ?} !}
         ?}
      ?}
   ?};
   {? _v
   || {? _a=1 || _ret:=_v
      |? _a=2 || _ret:=SKID_RBK.N
      |? _a=3 || _ret:=.get_rbel(1,_v,SKID_RBK.KRAJ().KODISO)
      |? _a=4 || _ret:=.get_rbtx(1,_v,SKID_RBK.KRAJ().KODISO)
      ?}
   ?};
   _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: get_rbel zwraca numer rachunku bankowego IBAN lub NRB w formacie elektronicznym
::          _a: 1 - na podstawie rekordu tabeli SKID_RBK
::              2, 3 - na podstawie numeru rachunku bankowego
::          _b: _a=1 - SKID_RBK.ref() lub wartosc REAL
::              _a=2 lub _a=3 - nr rachunku bankowego
::          _c: kod ISO kraju
::          _d: 1 - wymuszenie formatu IBAN
obj_meth('get_rbel',"
   .set_kraj(); _vk:=.INFOKRAJ; _ret:=''; {? _<3 || _c:=_vk ?};
   {? _a=1
   || {? type_of(_b)=7 || _b:=#_b ?};
      SKID_RBK.cntx_psh(); SKID_RBK.prefix();
      {? _a=1 & SKID_RBK.seek(_b,'skid_rbk') || _ret:=SKID_RBK.N; _c:=SKID_RBK.KRAJ().KODISO ?};
      SKID_RBK.cntx_pop()
   |? _a=2 | _a=3
   || _ret:=exec('rb_nosp','#string',_b)
   ?};
   {? +_c & _c=_vk & 2+_ret=_vk || _ret:=2-_ret ?}; {? _>3 & _d || _ret:=.formiban(_ret) ?};
   _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: get_rbtx zwraca numer rachunku bankowego NRB lub IBAN w formacie papierowym (jeśli jest
::          poprawny lub dwa pierwsze znaki nie są cyframi), w pozostałych przypadkach
::          zwraca tak, jak jest przechowywany w bazie
::          _a: 1 - na podstawie rekordu tabeli SKID_RBK (REFERENCE)
::              2 - na podstawie numeru rachunku bankowego istniejącego w SKID_RBK
::              3 - na podstawie numeru rachunku bankowego spoza SKID_RBK (np. z PB)
::          _b: _a=1 - SKID_RBK.ref() lub wartosc REAL
::              _a=2 lub _a=3 - nr rachunku bankowego
::          _c: kod ISO kraju (moze byc pominiety dla _a=1 lub _a=2  - będzie pobrany z pola
::             KRAJ().KODISO)
::          _d: _a=2 tabela przynależności rachunków bankowych (pole SKID_RBK.TAB)
::          _e: _a=2 właściciel rachunku (pole SKID_RBK.REF)
obj_meth('get_rbtx',"
   .set_kraj(); _vk:=.INFOKRAJ;
   {? _a=1 & type_of(_b)=7 || _b:=#_b ?};
   SKID_RBK.cntx_psh(); SKID_RBK.index('NUMER'); SKID_RBK.prefix(); {? _<3 || _c:='' ?};
   {? _a=1 & _c='' & SKID_RBK.seek(_b,'skid_rbk')
   || _c:=SKID_RBK.KRAJ().KODISO
   |? _a=2 & _c=''
   || _v:=.get_rbel(_a,_b,'');
      SKID_RBK.prefix(_v,_v);
      {? SKID_RBK.first() & SKID_RBK.size()=1 || _c:=SKID_RBK.KRAJ().KODISO ?}
   ?};
   _v:=.get_rbel(_a,_b,_c); _ret:='';
   {? (_a=1 & SKID_RBK.seek(_b,'skid_rbk')) | (_a=2 & _>3 & SKID_RBK.seek(.getrrban(_b,_d,_e)))
   || {? SKID_RBK.KRAJ().IBAN='T' & +_v
         & (exec('iban_ok','#id',_v,1) | (#(2+_v)=0 & (2+_v)<>'00')
         | ~(_v*'-'))
      || _ret:='';  {? (_c=_vk | (_c<>_vk & _c='PL')) & +_v || _ret:=2+_v+' '; _v:=2-_v ?};
         {! |? +_v>4 |! _ret+=(4+_v)+' '; _v:=4-_v !}; _ret+=_v
      || _ret:=_v
      ?}
   |? ((_a=2 & _<4) | _a=3) & SKID_RBK.get() & SKID_RBK.KRAJ().IBAN='T' & ((#(2+_v)=0 & (2+_v)<>'00') | ~(_v*'-'))
   || _ret:=''; {? (_c=_vk | (_c<>_vk & _c='PL') | _c='') & +_v || _ret:=2+_v+' '; _v:=2-_v ?};
      {! |? +_v>4 |! _ret+=(4+_v)+' '; _v:=4-_v !}; _ret+=_v
   |? ~(_a=2 & _>3)
   || _ret:=_v
   ?}; SKID_RBK.cntx_pop(); _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: formiban zwraca numer rachunku bankowego w formacie IBAN (jeśli był w formacie NRB)
::          _a: numer rachunku bankowego (w postaci elektronicznej)
obj_meth('formiban',"
   .set_kraj(); _vk:=.INFOKRAJ; _ret:={? +_a & ~(_a*'-') & #(2+_a)<>0 || _vk+_a || _a ?}; _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: formnrb  zwraca numer rachunku bankowego w formacie NRB (jeśli był w formacie IBAN)
::          _a: numer rachunku bankowego (w postaci elektronicznej)
obj_meth('formnrb',"
   .set_kraj(); _vk:=.INFOKRAJ; _ret:={? +_a & (#(2+_a)=0 & (2+_a)<>'00') || 2-_a || _a ?}; _ret"),
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:: set_kraj ustawia wartość pola INFOKRAJ na podstawie XINFO
obj_meth('set_kraj',"
   _v:=''; _vr:=null;
   {? app_info('web_sesid')<>'' || exec('czytaj','#stalesys',,XINFO) ?};
   _v:=XINFO.KRAJ().KODISO; _vr:=XINFO.KRAJ; .INFOKRAR:=_vr; .INFOKRAJ:=_v")
); 1


\dv_rbtab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.62]
:: OPIS: Wartość początkowa pola TAB tabeli SKID_RBK
::  OLD: \dv_rbtab/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_WYDR.TABAKR


\dv_rbref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.62]
:: OPIS: Wartość początkowa pola REF tabeli SKID_RBK
::  OLD: \dv_rbref/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_WYDR.REF


\dv_rbkr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Wartość domyślna kraju w rachunku bankowym (KRAJ w SKID_RBK).
::  OLD: \dv_rbkr/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
exec('RB','object');
RB.getrkraj(2,PAR_WYDR.TABAKR,KH.ref())


\put_bank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KFI] [2006]
:: OPIS: Po redakcji pól oddziałów banków i numerów rachunków. Formuła automatycznie uzupełnia pole
::       banku na podstawie numeru rachunku, lub wpisuje numer kierunkowy oddziału banku w pole
::       numeru rachunku.
::   WE: _a - tabela (string),
::       _b - akronim pola oddział banku (string),
::       _c - akronim pola rachunek (string)
::  OLD: \put_bank/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_zawart:=fld();
{? type_of(_zawart)=type_of('')
|| fld(exec('rb_nosp','#string',fld))
|? type_of(_zawart)=type_of(0)
|| {? #_zawart=0
   || return
   ?}
?};
_bank_ko:=$(_a+'.'+_b+'().NUMER');
_konto:=$(_a+'.'+_c);
_bank:=_a+'.'+_b;
_zm_kon:=$(_a+'.'+_c+':='+_a+'.'+_b+'().NUMER');
{? type_of(_zawart) <> 2
   || _nr:=_bank_ko()
   || {? +_zawart<10
         || {? +_zawart>0 || FUN.info('Numer rachunku jest zbyt krótki.'@) ?}; return()
         || _nr:=exec('num_kier','rachunki',_zawart)
      ?}
?};
{? _nr<>_bank_ko()
|| {? +_bank_ko()>0
   || {? FUN.ask('Podany numer kierunkowy nie jest zgodny\n'
                 ' z podanym już oddziałem bankowym!\nCzy zmienić oddział banku?'@)
      || exec('b_sel','rachunki',_nr,_bank)
      || return()
      ?}
   || exec('b_sel','rachunki',_nr,_bank)
   ?}
?};
{? +_konto()>9
|| _nr:=exec('num_kier','rachunki',_konto());
   {? +_bank_ko()>0 & _nr <> _bank_ko()
   || B.cntx_psh(); B.index('BANK'); B.prefix();
      _rb:=null;
      {? ($(_a+'.'+_b))() & +_nr &
         B.find_key(($(_a+'.'+_b+'().NB'))(), _nr)
      || _rb:=B.ref
      ?};
      B.cntx_pop();
      {? _rb
      || ($(_a+'.'+_b+':=_a'))(_rb);
         return()
      ?};
      {? FUN.ask('Numer kierunkowy wybranego oddziału banku nie jest\n zgodny'
                 ' z podanym numerem rachunku!\nCzy zmienić numer?'@)
      || _zm_kon()
      ?}
   ?}
|| _zm_kon()
?};
~~


\num_kier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KFI] [2006]
:: OPIS: wycina z numeru rachunku, numer kierunkowy oddziału banku, biorąc pod uwagę tylko
::       cyfry w przekazanym numerze rachunku
::   WE: _a - numer rachunku(string),
::   WY: osmio cyfrowy numer kierunkowy oddziału banku (string)
::  OLD: \num_kier/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_dl:=+_a;_licznik:=0;_ile_zn:=0;_nr:='';
{! |? +_nr<8 & _licznik<40 |!
   _cz:=_licznik-_a-(_dl-_licznik-1);
   {? #_cz | _cz='0' || _ile_zn+=1 ?};
   {? _ile_zn>2 & (#_cz | _cz='0') || _nr+=_cz ?};
   _licznik+=1
!};
_nr


\b_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KFI] [2006]
:: OPIS: Na podstawie numeru kierunkowego banku, przypisuje odpowiedni oddział banku do rekordu
::       tabeli, jeśli takiego banku nie ma, to prosi o dodanie go do tabeli banków.
::   WE: _a - nr kierunkowy banku,
::       _b - string z akronimem tabeli i akronimem bank,np 'PKO.B'
::   WY: string pusty albo akronim niewypełnionego pola
::  OLD: \b_sel/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:='NB';
B.cntx_psh(); B.index('BANKID'); B.prefix();
{? B.find_key(_a)
|| ($(_b+':=B.ref()'))()
|| ($(_b+':=null'))();
   B.win_edit('RED'); B.blank(); B.NUMER:=_a;
   FUN.info('Brak w słowniku oddziału banku o takim numerze kierunkowym.\nDodaj oddział do słownika.'@);
   {! |?
      _zatw:=B.edit(,,_fld);
      {? _zatw
      || {? __CHK.field(B,'NB')
         || {? __CHK.field(B,'KODISO')
            || 0
            || FUN.info('Kraj oddziału banku musi być podany.'@); _fld:='KODISO'; 1
            ?}
         || FUN.info('Nazwa oddziału banku musi być podana.'@); _fld:='NB'; 1
         ?}
      ?}
   !};
   {? _zatw
   || B.add(); B.find_key(_a); B.win_sel('WER2');
      {! |?
         B.select(,#B.ref);
         {? B.NUMER<>_a
         || FUN.ask('Numer kierunkowy wybranego oddziału banku nie\n jest zgodny'
                    ' z podanym.\nChcesz wybrać inny?'@)
         || 0
         ?}
      !};
      ($(_b+':=B.ref()'))()
   ?}
?};
B.cntx_pop()


\adres_hdr_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia tytuł okna redagowania tabeli ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ADRES.hdr_edit(': '+SLO_TYP.OPIS)


\adres_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie WER tabeli ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('adres_hdr_edit','rachunki');
1


\adres_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" w oknie WER tabeli ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('adres_hdr_edit','rachunki');
1


\adres_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem okien WER i WYB tabeli ADRES.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('slo_x_x_ob','ext_slo',ADRES,,'TYP')


\adres_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknie WER tabeli ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('adres_hdr_edit','rachunki');
ADRES.display()


\adres_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sprawdzenie poprawności danych redagowanych w kartotece adresów urzędów
::       z dodatkowym uwzględnieniem zgodności numeru konta z formatem IBAN
::  OLD: \spr_adr/banki.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_ret:=__CHK.record(ADRES,,'NAZWA'))<>''
|| return(_ret)
?};

{? (_ret:=exec('sprawdz','rachunki',ADRES,'BANK','KONTO'))<>''
|| return(_ret)
?};

{? ~exec('mail_ok','#email',ADRES.EMAIL)
|| FUN.info('Nieprawidłowy adres e-mail.'@);
   return('EMAIL')
?};


{? +ADRES.KONTO & ~exec('iban_ok','#id',ADRES.KONTO)
|| return('KONTO')
?};

{? ADRES.win_edit('?')='RED'
|| return(exec('urz_teryt_sprawdz','rachunki'))
?};

__CHK.index(ADRES,-menu_txt='popraw')=''


\banrach
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyświetla okienko rachunków bankowych licencjobiorcy.
::  OLD: \banrach/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_poz:=ROZNE.KKBAN:=1;
_m:='AC';
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO); '+RACHBANK.KB_4R_BD+
                   '; exec(\'ae_rb\',\'rachunki\')';
RACHBANK.KB_1R_BE:=RACHBANK.KB_1R_F3:=RACHBANK.KB_1R_AE:=RACHBANK.KB_4R_BE:=RACHBANK.KB_4R_F3:='';
RACHBANK.AKTYWNY:='T';
SKID_RBK.win_fml('WER_RBO',,'S_VAT',,'ICON_BEFORE',"exec('icona_svat','blp')");
{! |?
   PAR_WYDR.TABAKR:=REF.INFO; PAR_WYDR.REF:=null;
   {? var_pres('INFOROR',REF)>0
   || _okno_grp:=SKID_RBK.grp_make('Rachunki bankowe',,'skid_rbk_sel',,,,,'');
      _refresh:="SKID_RBK.cntx_psh();
                 SKID_RBK.index('TAB');
                 SKID_RBK.prefix(null,REF.INFOROR,REF.INFOROR);
                 {? ~SKID_RBK.first()
                 || SKID_RBK.actions('WER_TPL','DUP:D',,1)
                 || SKID_RBK.actions('WER_TPL',,,1)
                 ?};
                 SKID_RBK.cntx_pop()
                ";
      SKID_RBK.index('TAB');
      _oknow:='WER_RACH';
      SKID_RBK.grp_sel(_okno_grp,SKID_RBK,_oknow,'Wszystkie konta',"",,,,
                       "PAR_WYDR.TABAKR:=REF.INFO;
                        SKID_RBK.index('TAB');
                        SKID_RBK.prefix(null,REF.INFO,REF.INFO)
                       ",,,,'maximized');
      SKID_RBK.grp_sel(_okno_grp,SKID_RBK,_oknow,'Mikrorachunki',
                       "RefRB:=SKID_RBK.ref();
                        SKID_RBK.cntx_psh();
                        SKID_RBK.index('SKID_RBK');
                        SKID_RBK.prefix(#SKID_RBK.ref);
                        grp_disp(SKID_RBK,'WER_TPL');
                        SKID_RBK.cntx_pop()
                       ",,,,
                       "PAR_WYDR.TABAKR:=REF.INFOROR;
                        SKID_RBK.index('TAB');
                        SKID_RBK.prefix(null,REF.INFOROR,REF.INFOROR)
                       ",,,,'maximized');
      SKID_RBK.tab_splt(_okno_grp,,'horizontal','bottom',20);
      SKID_RBK.grp_sel(_okno_grp,SKID_RBK,'WER_TPL',,_refresh,,,,
                       "SKID_RBK.cntx_psh();
                        SKID_RBK.index('SKID_RBK'); {? #RefRB>0 || SKID_RBK.prefix(#RefRB) || SKID_RBK.prefix(-1) ?}
                       ","SKID_RBK.cntx_pop()",,,'maximized_with_title');
      SKID_RBK.win_sel(_okno_grp); SKID_RBK.win_edit('RED_RACH'); SKID_RBK.win_patt('SZUK')
   || SKID_RBK.win_sel('WER_RACH'); SKID_RBK.win_edit('RED_RACH'); SKID_RBK.win_patt('SZUK')
   ?};
   exec('rb_aktywne','rachunki');
   {? _poz:=SKID_RBK.select(0,1,_poz,_m) || exec('m_rb_srb','rachunki'); 1 ?}
!};
''


\ae_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Po redakcji rachunku bankowego (SKID_RBK.N)
::  OLD: \ae_rb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__rb_szuk')<0 | __rb_szuk=0
|| {? __CHK.field(SKID_RBK,'N')
   || SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO); 1
   || FUN.emsg('Należy uzupełnić pole Rachunek bankowy.'@); 0
   ?}
|| 1
?}


\m_rb_srb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyświetla okienko subkont dla rachunku bankowego
::  OLD: \m_rb_srb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
_akt:=RACHBANK.AKTYWNY;
ROZNE.KKBAN:=1; ROZNE.KH_WYB:=0; ROZNE.ZAKR_ROZ:=2; PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'KH2'; PAR_WYDR.REF:=#KH.ref();
RB.KRAJ_KOD:=SKID_RBK.KRAJ().KODISO; RACHBANK.KB_2R:=RB.get_rbtx(1,SKID_RBK.ref(),RB.KRAJ_KOD);
RACHBANK.KB_2R_BD:=''; RACHBANK.KB_2R_BE:=RACHBANK.KB_2R_F3:=RACHBANK.KB_2R_AE:='';
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref())';
KH.win_dict('WERHOME2');
SKID_RBK.win_sel('WER_KHS'); SKID_RBK.win_edit('RED_KHS'); SKID_RBK.win_patt('SZUK_SUB');
SKID_RBK.hdr_sel(); SKID_RBK.hdr_sel(' dla rachunku: %1'@[RACHBANK.KB_2R]);
SKID_RBK.index('SKID_RBK'); SKID_RBK.prefix(#SKID_RBK.ref());
_tmp:={? var_pres('__rb_szuk')>0 || __rb_szuk || -1 ?};
SKID_RBK.select();
{? var_pres('__rb_szuk')<0 & _tmp<>-1 || __rb_szuk:=_tmp ?};
RACHBANK.AKTYWNY:=_akt;
SKID_RBK.cntx_pop();
''


\rbk_okn_przed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła PRZED dla akcji Okienko w oknach wertowania tabeli SKID_RBK
::  OLD: \rbk_okn_przed/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__RB_BUFF')<0 || __RB_BUFF:=obj_new(10) ?};
{? var_pres('__rb_licz')<0
|| __rb_licz:=1;
   {! _i:=1..10 |!
      __RB_BUFF[_i]:=obj_new(@.CLASS.BUFFER, 'SKID_RBK')
   !}
|| __rb_licz+=1
?};
__rb_szuk:=0;
__RB_BUFF[__rb_licz].save()


\rbk_okn_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła PO dla akcji Okienko w oknach wertowania tabeli SKID_RBK
::  OLD: \rbk_okn_po/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__rb_szuk');
SKID_RBK.f_clear();
__rb_licz-=1;
1


\berbwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed redakcja pola BANK tabeli SKID_RBK
::  OLD: \be_rbwal/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.DEF_KRAJ:=DATA.DEF_KRAJ:=0;
RB.set_kraj();
{? SKID_RBK.KRAJ<>RB.INFOKRAR
|| SKID_RBK.KRAJ(); 1
|| 0
?}


\be_pbnbw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed redagowaniem pola banku odbiorcy przelewu (PB.NBW)
::  OLD: \be_pbnbw/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
RB.set_kraj();
{? PB.KRAJ_BAN
|| {? PB.KRAJ_BAN<>RB.INFOKRAR
   || POMOC.DEF_KRAJ:=DATA.DEF_KRAJ:=0; PB.KRAJ_BAN(); 1
   || 0
   ?}
|| 0
?}


\ae_pbnbw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Po redagowaniu pola banku odbiorcy przelewu (PB.NBW)
::  OLD: \ae_pbnbw/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.DEF_KRAJ:=DATA.DEF_KRAJ:=1


\chk_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Po redakcji pola SKID_RBK.KRAJ
::  OLD: \chk_fld/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__rb_szuk')<0 | __rb_szuk=0
|| __CHK.record2(SKID_RBK,'KRAJ',)=''
|| 1
?}


\bd_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyświetleniem rachunku bankowego (SKID_RBK.N)
::  OLD: \bd_rb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__rb_szuk')<0 | __rb_szuk=0
|| SKID_RBK.N:=RB.get_rbtx(1,SKID_RBK.ref())
?};
1


\wz_rbwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Wzorzec waluty rachunku bankowego (SKID_RBK.WAL)
::  OLD: \wz_rbwal/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
exec('wz_wal','wzorce');
''


\pw_rbkrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetlenie pola SKID_RBK.RS
::  OLD: \pw_rbkrs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
{? 6+menu_txt()<>'Szukaj'
|| _ref:={? (~-(1+menu_txt()))<>'D' || SKID_RBK.ref() || null ?};
   _res:=exec('zwrrbkrs','rachunki');
   _res=null | _res=_ref
|| ~~
?}


\zwrrbkrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: szuka konta dla subkont
::   WY: ref jak znalazł lub null
::  OLD: \zwrrbkrs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
SKID_RBK.cntx_psh();
SKID_RBK.index('TABRS');
SKID_RBK.prefix(null,REF.INFO,REF.INFO);
_wyn:={? SKID_RBK.find_key('T') || SKID_RBK.ref() || null ?};
SKID_RBK.cntx_pop();
_wyn


\pr_rbkrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed redakcja pola SKID_RBK.RS
::  OLD: \pr_rbkrs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
{? 6+menu_txt()<>'Szukaj'
|| _ref:={? (1+menu_txt())='P' || SKID_RBK.ref() || null ?};
   _res:=exec('zwrrbkrs','rachunki');
   _res=null | _res=_ref
|| 1
?}


\pwrbknrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetlenie pola SKID_RBK.NRS
::  OLD: \pwrbknrs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.efld_opt('RED_RACH','enable='+$(SKID_RBK.RS='T'),,'NRS');~~


\prrbknrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: przed wyświetlenie pola SKID_RBK.NRS
::  OLD: \prrbknrs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.RS='T'


\ae_rbkrs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła po redakcji pola SKID_RBK.RS (Rachunek dla subkont)
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.efld_opt('RED_RACH','enable='+$(SKID_RBK.RS='T')+',mark='+$(SKID_RBK.RS='T'),,'NRS');
{? SKID_RBK.RS='N' || SKID_RBK.NRS:='' ?};
1


\fa_irbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.62]
:: OPIS: Dołącz dla tabeli SKID_RBK (FK, HB)
::  OLD: \fa_irbk/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh(); SLO.cntx_psh();
SKID_RBK.win_edit('RED_RACH'); SKID_RBK.blank(); RACHBANK.KB_4R:='';
{! |?
   {? SKID_RBK.edit("_ret:=chk_rec('WAL'); {? ~+_ret || RB.chk_rban(SKID_RBK.N,0,'KB_4R') || _ret ?}")
   || _ref:=null;
      SKID_RBK.cntx_psh();
      SKID_RBK.prefix();
      {? SKID_RBK.add(1)
      || _ref:=SKID_RBK.ref();
         _wy:=0
      || FUN.emsg('Konto o podanych parametrach już istnieje w systemie.'@); _wy:=1
      ?};
      SKID_RBK.cntx_pop();
      {? _ref || SKID_RBK.seek(_ref) ?};
      _wy
   || _wy:=0
   ?}
!};
SLU.cntx_pop(); SLO.cntx_pop()


\rb_f3_szuk_prze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła PRZED dla akcji #F3 w oknach wertowania tabeli SKID_RBK
::  OLD: \rb_f3_szuk_prze/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
{? __rb_szuk=0
|| __rb_szuk:=1;
   exec('rb_szuk','rachunki');
   0
|| 1
?}


\rb_f3_szuk_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła PO dla akcji #F3 w oknach wertowania tabeli SKID_RBK
::  OLD: \rb_f3_szuk_po/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rb_szuk_run','rachunki')


\rb_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Szukanie w tabeli rachunkow bankowych.
::  OLD: \rb_szuk/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh();
XINFO.SLTYPPL(); ROZNE.NAZBAN:='';
_edit:=SKID_RBK.win_edit('?');
{? _edit='' || _edit:='RED' ?};
_szuk:=SKID_RBK.win_patt('?');
{? _szuk='' || _szuk:='SZUK' ?};
SKID_RBK.win_edit(_szuk);
SKID_RBK.blank(1);
{? SKID_RBK.edit("exec('chk_rb_szuk','rachunki')")
|| __RB_BUFF[__rb_licz].save();
   exec('rb_szuk_run','rachunki')
|| {? SKID_RBK.size()>0 || SKID_RBK.get() || SKID_RBK.blank(1) ?};
   __rb_szuk:=0
?};
SKID_RBK.win_edit(_edit);
SLU.cntx_pop()


\rb_szuk_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Uruchomienie szukania
::       Jeśli zmienna __rb_szuk = 1 to szukanie dokładne,
::       jeśli zmienna __rb_szuk = 2 to szukanie kontekstowe.
::  OLD: \rb_szuk_run/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('empty','rachunki')
|| FUN.emsg('Niewypełniono wzorca. Brak warunków wyszukiwania.'@);
   __rb_szuk:=0
|| __RB_BUFF[__rb_licz].restore();
   {? ~SKID_RBK.find_rec(__rb_szuk-1)
   || FUN.info('Nie znaleziono rekordu zgodnego ze wzorcem.'@)
   ?}
?}


\empty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Formuła sprawdza czy bufor tabeli SKID_RBK jest pusty
::  OLD: \empty/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
_empty:=1;
{? SKID_RBK.TAB<>'' || _empty:=0
|? SKID_RBK.REF<>null || _empty:=0
|? SKID_RBK.SLU<>null || _empty:=0
|? SKID_RBK.SLO<>null || _empty:=0
|? SKID_RBK.N<>'' || _empty:=0
|? SKID_RBK.KOD<>'' || _empty:=0
|? SKID_RBK.BANK<>null || _empty:=0
|? SKID_RBK.RD<>'' || _empty:=0
|? SKID_RBK.SKID_RBK<>0 || _empty:=0
|? SKID_RBK.KRAJ<>null || _empty:=0
|? SKID_RBK.WAL<>null || _empty:=0
|? SKID_RBK.INNWAL<>'' || _empty:=0
|? SKID_RBK.VAT<>'' || _empty:=0
?};
_empty


\chk_rb_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Weryfikacja danych w oknie redagowania tabeli SKID_RBK podczas wyszukiwania
::  OLD: \chk_rb_szuk/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.N<>''
|| SKID_RBK.N:=exec('antyspacja','rachunki',SKID_RBK.N)
?};
1


\antyspacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPU [2010]
:: OPIS: Formuła usuwa spacje z podanego stringu
::   WE: String wejsciowy _a
::   WY: String bez spacji
::  OLD: \antyspacja/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| FUN.error('Brak parametru funkcji <antyspacja>.'@);
   return('')
?};
_wy:='';
{! _i:=1..(+_a)
|! {? (1+_a)<>' '
   || _wy+=(1+_a)
   ?};
   _a:=1-_a
!};
_wy


\rb_szukd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Szukanie dokładne w tabeli rachunków bankowych
::  OLD: \rb_szukd/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
__rb_szuk:=1;
exec('rb_szuk','rachunki')


\rb_szukk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Szukanie kontekstowe w tabeli rachunków bankowych
::  OLD: \rb_szukk/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
__rb_szuk:=2;
exec('rb_szuk','rachunki')


\be_delrb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: przed Usuń dla SKID_RBK
::  OLD: \be_delrb/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
_zwrot:={? SKID_RBK.count()>0
        || FUN.info('Rachunek ma powiązania.\nUsunięcie niemożliwe.'@); 0
        || 1
        ?};
SKID_RBK.cntx_psh();
SKID_RBK.index('TPL_RBK');
SKID_RBK.prefix(REF.FIRMA().SYMBOL+'TROR',#SKID_RBK.ref());
{? _zwrot
|| _zwrot:={? SKID_RBK.first()
           || FUN.info('Rachunek ma powiązania.\nUsunięcie niemożliwe.'); 0
           || 1
           ?}
?};
SKID_RBK.cntx_pop();
{? _zwrot || _zwrot:=exec('usun','slo_slu','SKID_RBK') ?};
_zwrot


\fu_kb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.62]
:: OPIS: Formuła uniwersalna dla konta bankowego
::   WE: _a: - akronim pola konta bankowego
::       _b: - rodzaj formuły: 1 - wart. pocz., 2 - przed wyświetl., 3 - przed redag., 4 - F3,
::           5 - po redag.
::  OLD: \fu_kb/skid_rbk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=2 & _b<>1
|| {? _b=2 || _vi:='BD'
   |? _b=3 || _vi:='BE'
   |? _b=4 || _vi:='F3'
   |? _b=5 || _vi:='AE'
   ?};
   _vf:='{? RACHBANK.'+_a+'_'+_vi+'<>\'\' '
      +'|| ($(RACHBANK.'+_a+'_'+_vi+'))() || 1 ?}';
   ($(_vf))()
?}


\be_rbwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed redagowaniem waluty rachunku bankowego (SKID_RBK.WAL)
::  OLD: \fu_kb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? FINFO.SLWAL<>0
|| FINFO.SLWAL().SLU(); exec('slu_okn','slo_slu')
|| _ret:=0
?};
{? _ret
|| {? ~SKID_RBK.WAL & SKID_RBK.KRAJ().WAL & FINFO.SLWAL
   || SLO.cntx_psh(); SLO.index('SL'); SLO.prefix(FINFO.SLWAL().SLU,SKID_RBK.KRAJ().WAL().KOD,);
      {? SLO.first() || SKID_RBK.WAL:=SLO.ref() ?};
      SLO.cntx_pop()
   ?}
|| FUN.emsg('Nie ustalono słownika walut w parametrach pracy programu.'@)
?};
_ret


\sub_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: subkonta INFO
::  OLD: \sub_info/defin.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
exec('m_rb_srb','rachunki');
{? exec('ps_65','rachunki')<>'T'
|| SKID_RBK.actions('WER_RACH','BF',,1)
?};
PAR_WYDR.TABAKR:=REF.INFO;
PAR_WYDR.REF:=null;
SKID_RBK.cntx_pop();
''


\fa_rbs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Obsługa akcji dołącz dla tabeli SKID_RBK dla rachunkow obcych (FK, HB)
::   WE: _a: 1 - subkonta dla rachunku bankowego, 2 - subkonta dla kontrahenta
::       _b: kontrahent (REFERENCE)
::  OLD: \fa_rbs/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_vk:=RB.KRAJ_KOD;
{? _a=1 || ROZNE.KH_WYB:=0; RACHBANK.KB_2R:=RB.get_rbtx(2,RACHBANK.KB_2R,_vk,REF.INFO,0)
|? _a=2 || RACHBANK.KB_2R:=''; ROZNE.KH_WYB:=_b
?};
RACHBANK.SK_LB_SR:='';
SKID_RBK.blank();
_v:=RACHBANK.KB_2R;
{? _a=1 || SKID_RBK.KRAJ:=RB.getrkraj(3,RB.get_rbel(2,RACHBANK.KB_2R)) ?};
_vns:=RB.get_rbel(2,RACHBANK.KB_2R,_vk);
SKID_RBK.cntx_psh(); SKID_RBK.index('WEKTOR'); SKID_RBK.prefix(REF.INFO,_vns,_vns);
_akt:='N';
_v_ref:={? SKID_RBK.first() || _akt:=SKID_RBK.AKTYWNY; #SKID_RBK.ref() || 0 ?};
SKID_RBK.cntx_pop();
SKID_RBK.SKID_RBK:=_v_ref;
SKID_RBK.AKTYWNY:=_akt;
{? SKID_RBK.edit("
      {? ~ROZNE.KH_WYB
      || FUN.emsg('Nie podano kontrahenta.'@); 'KH_WYB'
      |? ~+RACHBANK.SK_LB_SR
      || FUN.emsg('Nie podano rachunku bankowego subkonta.'@); 'SK_LB_SR'
      || ''
      ?}")
|| SKID_RBK.REF:=#ROZNE.KH_WYB;
:: START: waluta subkonta zgodna z waluta konta nadrzednego
   SKID_RBK.cntx_psh();
   _wal:=null;
   SKID_RBK.prefix();
   {? SKID_RBK.seek(_v_ref,SKID_RBK.name()) || _wal:=SKID_RBK.WAL ?};
   SKID_RBK.cntx_pop();
   {? _wal<>null || SKID_RBK.WAL:=_wal || SKID_RBK.WAL:=SKID_RBK.KRAJ().WAL ?};
:: STOP: waluta subkonta
   _ref:=null;
   SKID_RBK.cntx_psh();
   SKID_RBK.prefix();
   {? SKID_RBK.add(1)
   || _ref:=SKID_RBK.ref()
   || FUN.emsg('Podany rachunek już istnieje w systemie.'@)
   ?};
   SKID_RBK.cntx_pop();
   {? _ref || SKID_RBK.seek(_ref) ?}
?}


\rb_rbskh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Rekord przed w oknie wertowania subkont kontrahenta
::  OLD: \rb_rbskh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
KH.prefix(2);
ROZNE.KH_WYB:={? SKID_RBK.size() & KH.seek(SKID_RBK.REF,'kontr') || KH.ref() || 0 ?}; 0


\fe_rbs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Obsługa akcji popraw dla tabeli SKID_RBK (FK, HB, MF)
::  OLD: \fe_rbs/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_2R:=RB.get_rbtx(1,SKID_RBK.SKID_RBK);
_nrb:=SKID_RBK.N;
_jest:=0;
{? SKID_RBK.edit()
|| SKID_RBK.cntx_psh();
   SKID_RBK.index('WEKTOR'); SKID_RBK.prefix(REF.INFO,RB.get_rbel(2,RACHBANK.KB_2R));
   _v_ref:={? SKID_RBK.first() || #SKID_RBK.ref() || 0 ?};
   SKID_RBK.cntx_pop();
   SKID_RBK.SKID_RBK:=_v_ref; SKID_RBK.REF:=#ROZNE.KH_WYB;
   {? SKID_RBK.N<>_nrb
   || _firma:={? SKID_RBK.TAB*'KH'>0 || RACHBANK.FIRMA || null ?};
      SKID_RBK.cntx_psh();
      SKID_RBK.index('TAB');
      SKID_RBK.prefix(_firma,SKID_RBK.TAB,SKID_RBK.TAB,SKID_RBK.REF,SKID_RBK.SLO,SKID_RBK.N,SKID_RBK.N);
      {? SKID_RBK.first()
      || FUN.emsg('Podany rachunek już istnieje w systemie.'@);
         _jest:=1
      ?};
      SKID_RBK.cntx_pop()
   ?};
   {? _jest=0
   || SKID_RBK.cntx_psh();
      SKID_RBK.prefix();
      SKID_RBK.put();
      SKID_RBK.cntx_pop()
   ?}
?}


\sk_lb_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyświetleniem pola zmiennej do redakcji subkonta w SKID_RBK
::  OLD: \sk_lb_bd/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? +RACHBANK.SK_LB_SR | ~(1+menu_txt())<>'d'
|| RACHBANK.SK_LB_SR:=RB.get_rbtx(3,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)
?};
1


\sk_lb_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Po redakcji pola zmiennej do redakcji subkonta w SKID_RBK
::  OLD: \sk_lb_ae/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? chk_fld()
|| _ret:=RB.chk_rban(fld(),2,'SK_LB_SR');
   {? ~+_ret
   || SKID_RBK.N:=RB.get_rbel(2,fld(),SKID_RBK.KRAJ().KODISO);
      SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO); 1
   || 0
   ?}
|| 0
?}


\pr_konta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Przed redakcją ROZNE.KH_WYB
::  OLD: \pr_konta/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
KH.win_dict('WERHOME2'); ROZNE.ZAKR_ROZ=2


\bl_bank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2010]
:: OPIS: Zwraca SKID_RBK.BANK
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.BANK


\zusrach
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2008]
:: OPIS: Wyswietla okno rachunkow bankowych ZUS
::  OLD: \zusrach/skid_ror.fml
::  TAG: <RACHUNKI>
::----------------------------------------------------------------------------------------------------------------------
PAR_WYDR.TABAKR:='ZUS';
PAR_WYDR.REF:=null;
RACHBANK.KB_4R_BE:=RACHBANK.KB_4R_F3:=RACHBANK.KB_5R_BE:=RACHBANK.KB_5R_F3:=RACHBANK.KB_5R_AE:='';
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO,1); '
   +RACHBANK.KB_4R_BD+'; exec(\'ae_rb\',\'rachunki\')';

VAR_DEL.delete('__winzus');
__winzus:=SKID_RBK.mk_sel('Rachunki ZUS'@,'P',0,'__rbkzus',10,5,10,,'P');
SKID_RBK.win_fld(__winzus,SKID_RBK,'SLO','TR','SL_TR',60,,,'Rodzaj'@,,'Rodzaj rachunku ZUS'@);
SKID_RBK.win_fld(__winzus,RACHBANK,'KB_4R',,,50,,,'Rachunek bankowy'@,,'Rachunek bankowy ZUS dla danego rodzaju'@);
SKID_RBK.win_act(__winzus,0,'Formuła','Popraw'@,,'Popraw'@,,
                 "{? SKID_RBK.edit(\"exec('iban_ok','#id',SKID_RBK.N,0,SKID_RBK.KRAJ().KODISO)\") || SKID_RBK.put() ?}"
                 ,1);
SKID_RBK.win_act(__winzus,0,'Rekord',,,,"{? SKID_RBK.SLO().KOD<>'ZUS'
                                         || SKID_RBK.actions(__winzus,'P',,1)
                                         || SKID_RBK.actions(__winzus,'',,1)
                                         ?}");
SKID_RBK.win_sel(__winzus);
SKID_RBK.win_edit('RED_ZUS');
SKID_RBK.win_patt('SZUK_ZUS');
SKID_RBK.index('TAB');
SKID_RBK.clear();
SKID_RBK.f_set(,,'SKID_RBK.TAB=\'ZUS\' AND (SKID_RBK.FIRMA=:_a OR SKID_RBK.FIRMA IS NULL)',REF.FIRMA);
SKID_RBK.select();
SKID_RBK.f_clear();
VAR_DEL.delete('__winzus')


\m_rb_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyswietla okienko rachunkow bankowych kontrahenta
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::       [_b] - KH.ref
::       [_c] - 0 - bez wyboru (okno WER_RBO, domyślnie),  1 - wybór (okno SLO_RBO)
::  OLD: \m_rb_kh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RS.cntx_psh();
{? cur_tab(1,1)=SLO & RS.TAB='US'
|| exec('m_rb_us','rachunki')
|? cur_tab(1,1)=SLO & (RS.TAB='SLO_OSOB' | RS.TAB='OS' | RS.TAB='OSOBA')
|| exec('oso_rbk','rachunki')
|| _dalej:=1;
   KH.cntx_psh();
   {? RS.TAB='KH' & cur_tab(1,1)=SLO
   || KH.index('KOD'); KH.prefix(2);
      {? ~KH.find_key(SLO.KOD)
      || _dalej:=0; FUN.info('Nie znaleziono danych kontrahenta.'@)
      ?}
   ?};
   {? _dalej
   || {? var_pres('_a')<>type_of(1) || _a:=1 ?};
      {? var_pres('_b')<>type_of(null) || _b:=KH.ref ?};
      {? var_pres('_c')<>type_of(1) || _c:=0 ?};
      ROZNE.KKBAN:=1; PAR_WYDR.TABAKR:='KH'; PAR_WYDR.REF:=#_b;
      RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref())';
      SLO.cntx_psh(); SLU.cntx_psh();
      {? _c
      || SKID_RBK.win_sel('SLO_RBO')
      || SKID_RBK.win_sel('WER_RBO')
      ?};
      SKID_RBK.win_edit('RED_RBO');
      SKID_RBK.win_fml('WER_RBO',,'S_VAT',,'ICON_BEFORE',"exec('icona_svat','blp')");
      SKID_RBK.win_fml('SLO_RBO',,'S_VAT',,'ICON_BEFORE',"exec('icona_svat','blp')");
      SKID_RBK.win_patt('SZUK_RBO');
      RACHBANK.AKTYWNY:='T';
      _firma:={? RACHBANK.FIRMA || 'w firmie %1'@[RACHBANK.FIRMA().OPIS] || 'w grupie kapitałowej' ?};
      _tyt:=' %1 dla kontrahenta: %2'@[_firma,KH.SKR];
      exec('rb_aktywne','rachunki','KH',#_b,_tyt);
      {? _a=1
      || {? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHR')
         || SKID_RBK.select()
         || SKID_RBK.select(,,,'DPU:D')
         ?}
      ?};
      SLO.cntx_pop(); SLU.cntx_pop()
   ?};
   KH.cntx_pop()
?};
RS.cntx_pop()


\m_rb_skh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyswietla okienko subkont dla kontrahenta.
::   WE: _a - czy wykonywac select na tabeli SKID_RBK
::       =1/brak - wywolywany select
::       =0 brak selecta, tylko ustawienie zmiennych
::  OLD: \m_rb_skh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};
{? var_pres('_b')<>type_of(null) || _b:=KH.ref ?};

{? exec('ps_65','rachunki')='T'
|| _kod:=SLO.KOD;
   SLO.cntx_psh(); SLU.cntx_psh(); RS.cntx_psh();
   ROZNE.KKBAN:=ROZNE.ZAKR_ROZ:=1; ROZNE.KH_WYB:=_b;
   PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'KH2'; PAR_WYDR.REF:=#_b;
   VAR_DEL.delete('TAB_RB');
   TAB_RB:=tab_tmp(1,
      'RB','STRING[51]','Rachunek bankowy'@,
      'NB','STRING[40]','Oddzial banku'@,
      'WAL','STRING[3]','Waluta'@,
      'AKTYWNY','STRING[1]','Aktywny'@
   );
   TAB_RB1:=TAB_RB.index('?');
   TAB_RB2:=TAB_RB.ndx_tmp('',1,'AKTYWNY',,0, 'RB',,0);
   SKID_RBK.cntx_psh();
   {? SKID_RBK.index('TAB'); SKID_RBK.prefix(null,REF.INFO,REF.INFO); SKID_RBK.first()
   || {!
      |? TAB_RB.RB:=exec('bd_kban','rachunki');
         TAB_RB.NB:=SKID_RBK.BANK().NB;
         TAB_RB.WAL:=SKID_RBK.WAL().KOD;
         TAB_RB.AKTYWNY:=SKID_RBK.AKTYWNY;
         TAB_RB.add(); SKID_RBK.next()
      !}
   ?};
   _wsel:=TAB_RB.mk_sel('Rachunki bankowe licencjobiorcy'@,,,'tab_rb_wer',,,,,'U');
   TAB_RB.win_fld(_wsel,,'RB');
   TAB_RB.win_fld(_wsel,,'NB');
   TAB_RB.win_fld(_wsel,,'WAL');
   TAB_RB.win_fld(_wsel,,'AKTYWNY',,,,,,,,,2,,"'T'","'N'");
   TAB_RB.win_act(_wsel,0,'Formuła','Wybierz'@@,,,,"sel_exit()",1,,,,'W');
   RbZak:="
      TAB_RB.hdr_sel();
      {? RACHBANK.AKTYWNY=''
      || TAB_RB.index(TAB_RB1);
         TAB_RB.prefix();
         TAB_RB.hdr_sel(' - '+'Aktywne'@)
      || TAB_RB.index(TAB_RB2);
         TAB_RB.prefix(RACHBANK.AKTYWNY);
         TAB_RB.hdr_sel(' - '+{? RACHBANK.AKTYWNY='T' || 'Aktywne'@ || 'Nieaktywne'@ ?})
      ?}
   ";
   RACHBANK.AKTYWNY:='T';
   _fml:="
      _akt:=RACHBANK.AKTYWNY;
      RACHBANK.win_edit('ZAKRES');
      {? RACHBANK.edit()
      || RbZak()
      || RACHBANK.AKTYWNY:=_akt
      ?}
   ";
   TAB_RB.win_act(_wsel,0,'Formuła','Zmień zakres'@@,,,,_fml,,,,,'Z');
   TAB_RB.win_act(_wsel,1,'Formuła','Zmień zakres'@@,,,,_fml,,,,,'Z');
   TAB_RB.win_sel(_wsel);
   RbZak();
   SKID_RBK.cntx_pop();
   RACHBANK.KB_1R:='';
   RACHBANK.KB_1R_BD:='SKID_RBK.cntx_psh(); SKID_RBK.prefix(); {? SKID_RBK.SKID_RBK<>0 & '
      +'SKID_RBK.size()>0 || SKID_RBK.seek(SKID_RBK.SKID_RBK,\'skid_rbk\'); '
      +'RACHBANK.KB_1R:=RB.get_rbtx(1,SKID_RBK.ref()) || RACHBANK.KB_1R:=\'\' ?}; '
      +'SKID_RBK.cntx_pop() ';
   RACHBANK.KB_1R_BE:=RACHBANK.KB_1R_F3:=RACHBANK.KB_1R_AE:=RACHBANK.KB_2R_BE:='1';
   RACHBANK.KB_2R_F3:='TAB_RB.find_key(RACHBANK.KB_2R); {? TAB_RB.select(,1) || TAB_RB.RB ?}';
   RACHBANK.KB_2R_BD:='{? -(1+menu_txt())<>\'d\' || SKID_RBK.cntx_psh(); SKID_RBK.prefix(); '
      +'{? SKID_RBK.SKID_RBK<>0 & SKID_RBK.size()>0 || '
      +'RACHBANK.KB_2R:=RB.get_rbtx(1,SKID_RBK.SKID_RBK) || RACHBANK.KB_2R:=\'\' ?}; '
      +'SKID_RBK.cntx_pop() || 1 ?}';
   RACHBANK.KB_2R_AE:='exec(\'ae_rblsk\',\'rachunki\')';
   SKID_RBK.win_sel('WER_RBS'); SKID_RBK.win_edit('RED_RBS'); SKID_RBK.win_patt('SZUK_SUB');
   _tyt:={? _b
         || ' dla kontrahenta: %1'@[KH.SKR]
         || ' dla kontrahenta: '@
         ?};
   exec('rb_aktywne','rachunki',REF.FIRMA().SYMBOL+'KH2',#_b,_tyt);
   KH.cntx_psh(); _dalej:=1;
   {? RS.TAB='KH' & cur_tab(1,1)=SLO
   || KH.index('KOD'); KH.prefix(2);
      {? ~KH.find_key(_kod)
      || _dalej:=0; FUN.info('Nie znaleziono danych kontrahenta.'@)
      ?}
   ?};
   {? _a & _dalej
   || SKID_RBK.select();
      VAR_DEL.delete('TAB_RB','TAB_RB1','TAB_RB2','RbZak')
   ?};
   SLO.cntx_pop(); SLU.cntx_pop(); RS.cntx_pop(); KH.cntx_pop()
|| FUN.info('System został sparametryzowany\nbez udostępniania mechanizmu subkont.'@); 0
?}


\ba_rbo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Obsluga akcji dolacz dla tabeli SKID_RBK dla rachunkow obcych (FK, HB)
::  OLD: \fa_rbo/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.RB_KH_SR:='';
exec('rb_blp','rachunki',1);
_ref:=null;
SKID_RBK.cntx_psh();
SKID_RBK.prefix();
SKID_RBK.blank();
{? SKID_RBK.edit("exec('ar_rbo','rachunki',0)")
|| {? var_pres('S_VAT',SKID_RBK)>0
   || KHCHKNIP.cntx_psh();
      KHCHKNIP.index('RBK');
      KHCHKNIP.prefix(SKID_RBK.N,);
      {? KHCHKNIP.first()
      || SKID_RBK.S_VAT:=KHCHKNIP.C_ACTIVE;
         SKID_RBK.S_VAT_D:=KHCHKNIP.DATA_DO
      ?};
      KHCHKNIP.cntx_pop()
   ?};
   {? ~SKID_RBK.REF & SKID_RBK.TAB='KH' || SKID_RBK.REF:=#KH.ref() ?};
   SKID_RBK.add();
   _ref:=SKID_RBK.ref()
?};
exec('rb_blp','rachunki',0);
SKID_RBK.cntx_pop();
{? SKID_RBK.f_active()
|| {? SKID_RBK.f_test()
   || {? SKID_RBK.f_find_rec()
      || SKID_RBK.f_seek(_ref)
      || SKID_RBK.f_add()
      ?}
   ?};
   SKID_RBK.f_rfresh()
|| {? _ref || SKID_RBK.seek(_ref) ?}
?}


\bm_rbo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Popraw dla tabeli SKID_RBK dla rachunkow obcych (FK, HB, MF)
::  OLD: \fe_rbo/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.RB_KH_SR:=RB.get_rbtx(1,SKID_RBK.ref());
SKID_RBK.cntx_psh();
SKID_RBK.prefix();
{? SKID_RBK.edit("exec('ar_rbo','rachunki',1)")
|| SKID_RBK.put()
?};
SKID_RBK.cntx_pop()


\ar_rbo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji rachunku bankowego kontrahenta
::   WE: _a - popraw? 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_ret:=__CHK.record3(
   SKID_RBK,'KRAJ',,
   RACHBANK,'RB_KH_SR','Rachunek bankowy',
   SKID_RBK,'WAL','Waluta'
);
{? _ret='' || _ret:=RB.chk_rban(SKID_RBK.N,0,'RB_KH_SR') ?};
{? _ret=''
|| SKID_RBK.cntx_psh();
   SKID_RBK.index('TRN'); SKID_RBK.prefix('KH',#KH.ref(),RACHBANK.FIRMA,SKID_RBK.N,);
   _ref:=SKID_RBK.ref();
   {? SKID_RBK.first() & (_a=0 | _ref<>SKID_RBK.ref())
   || FUN.info('Podany rachunek bankowy już istnieje.'@);
      _ret:='RB_KH_SR'
   ?};
   SKID_RBK.cntx_pop()
?};
_ret


\kh_sr_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem pola zmiennej do redakcji rach. bankowego kontrahenta w SKID_RBK
::  OLD: \kh_sr_bd/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? +RACHBANK.RB_KH_SR | ~(1+menu_txt())<>'d'
|| RACHBANK.RB_KH_SR:=RB.get_rbtx(3,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)
?};
1


\kh_sr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Po redakcji pola zmiennej do redakcji rach. bankowego kontrahenta w SKID_RBK
::  OLD: \kh_sr_ae/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? __CHK.record2(RACHBANK,'RB_KH_SR','Rachunek bankowy')=''
|| SKID_RBK.N:=RB.get_rbel(2,fld(),SKID_RBK.KRAJ().KODISO);
   SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO); 1
|| 0
?}


\rb_rbkd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Rekord przed dla tabeli SKID_RBK - wyroznia rach. domyslny, lub rachunek VAT
::  OLD: \rb_rbkd/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.efld_opt('RED_RACH','enable='+$(SKID_RBK.RS='T')+',mark='+$(SKID_RBK.RS='T'),,'NRS');
_gray:='';
{? SKID_RBK.RS<>'T' || _gray+='B' ?};
SKID_RBK.actions_grayed('WER_RACH',_gray);
RACHBANK.KB_5R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
{? SKID_RBK.RD='T'
|| 'SKID_RBK#01#01'
|? SKID_RBK.VAT='T'
|| 'SKID_RBK#01#02'
|| ''
?}


\rb_rbkd_wt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Rekord przed dla tabeli SKID_RBK - WEBTERM
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_5R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
0


\m_rb_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyświetla okienko rachunków bankowych urzędów skarbowych
::----------------------------------------------------------------------------------------------------------------------
_dalej:=1;
US.cntx_psh();
{? cur_tab(1,1)=SLO
|| US.index('URZSKNAZ'); US.prefix();
   {? ~US.find_key(SLO.TR)
   || _dalej:=0; FUN.info('Nie znaleziono danych urzędu skarbowego.'@)
   ?}
?};
{? _dalej
|| exec('cn_psh','slo_slu');
   ROZNE.KKBAN:=1;
   PAR_WYDR.TABAKR:='US'; PAR_WYDR.REF:=#US.ref();
   RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
   RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO,1); '+RACHBANK.KB_4R_BD
      +'; exec(\'ae_rb\',\'rachunki\')';
   RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
   SKID_RBK.index('TAB'); SKID_RBK.prefix(null,'US','US',#US.ref());
   SKID_RBK.win_sel('WER'); SKID_RBK.win_edit('RED'); SKID_RBK.win_patt('SZUK_US');
   SKID_RBK.hdr_sel(); SKID_RBK.hdr_sel(' dla urzędu skarbowego: %1'@[US.NU]); SKID_RBK.select();
   exec('cn_pop','slo_slu')
?};
US.cntx_pop()


\set_rbd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Ustawia obsluge konta w naglowku dokumentu
::  OLD: \set_rbd/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1 || PAR_WYDR.TABAKR:='KH' |? _a=2 || PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'KH2' ?};
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO,1); '+
   RACHBANK.KB_4R_BD
   +'; exec(\'ae_rb\',\'rachunki\')';
RACHBANK.KB_1R_BE:=RACHBANK.KB_1R_F3:=RACHBANK.KB_1R_AE:=RACHBANK.KB_4R_BE:=RACHBANK.KB_4R_F3:='';
RACHBANK.KB_3R:='';
RACHBANK.KB_3R_BD:='RACHBANK.KB_3R:=RB.get_rbtx(1,DOK.RB); 1';
RACHBANK.KB_3R_BE:='exec(\'be_dokrb\',\'rachunki\')';
RACHBANK.KB_3R_F3:='exec(\'f3_rb_kh\',\'rachunki\')';
RACHBANK.KB_3R_AE:='{? +fld() & exec(\'chk_rbd\',\'rachunki\')'+
                   '|| DOK.RB:=SKID_RBK.ref(); 1'+
                   '|| {? DOK.RB:=0; fld()<>\'\' '+
                      '|| 0'+
                      '|| 1'+
                      '?}'+
                   '?}';
{? _a=3
|| RACHBANK.KB_2R:='';
   RACHBANK.KB_2R_BD:='RACHBANK.KB_2R:=RB.get_rbtx(1,DOK.RB_V); 1';
   RACHBANK.KB_2R_BE:='exec(\'be_dokrb\',\'rachunki\',1)';
   RACHBANK.KB_2R_F3:='exec(\'f3_rb_kh\',\'rachunki\',1)';
   RACHBANK.KB_2R_AE:='{? +fld() & exec(\'chk_rbd\',\'rachunki\',1)'+
                      '|| DOK.RB_V:=SKID_RBK.ref(); 1'+
                      '|| {? fld()<>\'\' '+
                         '|| 0'+
                         '|| RACHBANK.KB_2R:=\'\'; DOK.RB_V:=0; 1'+
                         '?}'+
                      '?}'
|| RACHBANK.KB_2R:=RACHBANK.KB_2R_BE:=RACHBANK.KB_2R_F3:=RACHBANK.KB_2R_AE:='';
   RACHBANK.KB_2R_BD:='{? PAR_WYDR.TABAKR=\''+REF.FIRMA().SYMBOL+'KH2\' '+
                      '|| RACHBANK.KB_2R:=RB.get_rbtx(1,SKID_RBK.SKID_RBK); '+
                         '{? KH.seek(SKID_RBK.REF,\'kontr\') || ROZNE.KH_WYB:=KH.ref() '+
                         '|| ROZNE.KH_WYB:=0 '+
                         '?} '+
                      '|| 1 ?}'
?}


\be_dokrb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Przed redagowaniem pola rachunku bankowego RB naglowka dokumentu.
::   WE: _a - zadeklarowane - rachunek VAT
::  OLD: \be_dokrb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
exec('RB','object'); SKID_RBK.f_clear;
_kvatsym:={? DOK_REJ.WEW<>'N'
          || DOK_REJ.WEW
          || VAT_REJ.RVAT().KVAT().SYM
          ?};
{? (form(_kvatsym)<>'' &
   ((1+_kvatsym='S' & exec('ps_65','rachunki')='T' & PAR_SKID.get(66)='T')
      | (('ZI'*(1+_kvatsym) | 2+_kvatsym='_W') & PAR_SKID.get(66)='T') )
   ) | MLEX_OKN.CZY_RBAN='T'
|| {? _ & 'S'*(1+_kvatsym)
   || PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'INFO'
   |? _ | 'ZI'*(1+_kvatsym) | (6+_kvatsym)='_WWspN' | MLEX_OKN.CZY_RBAN='T'
   || PAR_WYDR.TABAKR:='KH'
   || PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'KH2'
   ?};
   {? _ & 'S'*(1+_kvatsym)
   || _rb:=RACHBANK.KB_2R;  PAR_WYDR.REF:=null;
      {? _rb<>'' & RB.getrrban(_rb,PAR_WYDR.TABAKR,0,0,1)
      || {? _
         || {? SKID_RBK.WAL=FINFO.NAROD || DOK.RB_V:=SKID_RBK.ref() ?}
         || DOK.RB:=SKID_RBK.ref()
         ?}
      || _rb:=''
      ?};
      _v:=1
   || _v:=0;
      {? DOK.KH<>''
      || {? KH.index('SKR'); KH.prefix(2,DOK.KH); KH.first()
         || {! |? {? KH.SKR=DOK.KH || _v:=1 ?}; ~_v & KH.next() !}
         ?}
      ?};
      _rb:={? _
           || RACHBANK.KB_2R
           || RACHBANK.KB_3R
           ?};
      {? _v
      || PAR_WYDR.REF:=#KH.ref();
         {? _rb=''
         || _rb:=RB.get_drb(4,PAR_WYDR.TABAKR,#KH.ref())
         ?};
         {? _rb<>'' & RB.getrrban(_rb,PAR_WYDR.TABAKR,#KH.ref(),null,1) & SKID_RBK.REF<>#KH.ref()
         || _rb:=''
         || {? _
            || {? SKID_RBK.WAL=FINFO.NAROD || DOK.RB_V:=SKID_RBK.ref() ?}
            || DOK.RB:=SKID_RBK.ref()
            ?}
         ?};
         {? ~_ & _rb='' & PAR_WYDR.TABAKR=REF.FIRMA().SYMBOL+'KH2'
         || SKID_RBK.cntx_psh();
            SKID_RBK.index('TAB'); SKID_RBK.prefix(RACHBANK.FIRMA,REF.FIRMA().SYMBOL+'KH2',REF.FIRMA().SYMBOL+'KH2',#KH.ref()); _vs:=SKID_RBK.size();
            SKID_RBK.cntx_pop();
            {? _vs=0 & ~(1+_kvatsym='Z' | (6+_kvatsym)='_WWspN' )
            || _v:=0
            ?}
         ?}
      || _rb:=''
      ?}
   ?};
   {? _
   || {? DOK.RB_V || RACHBANK.KB_2R:=_rb ?};
      {? RACHBANK.KB_2R='' || DOK.RB_V:=null ?}
   || {? DOK.RB || RACHBANK.KB_3R:=_rb ?};
      {? RACHBANK.KB_3R='' || DOK.RB:=null ?}
   ?};
   _v
|| 0
?}


\f3_rb_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Formula na F3 w naglowku dokumentu (DOK) dla rachunku bankowego (RB).
::   WE: _a - zadeklarowane - rachunek VAT
::  OLD: \f3_rb_kh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
KH.index('SKR'); KH.prefix(2,DOK.KH); {? KH.first() || _v:=#KH.ref() || _v:=0 ?};
{? PAR_WYDR.TABAKR+4='INFO'
|| SKID_RBK.index('TAB'); SKID_RBK.prefix(REF.INFO,REF.INFO);
   SKID_RBK.win_edit('RED_RACH'); SKID_RBK.win_sel('SLO_RBL')
|? PAR_WYDR.TABAKR='KH'
|| SKID_RBK.index('TAB'); SKID_RBK.prefix(RACHBANK.FIRMA,PAR_WYDR.TABAKR,PAR_WYDR.TABAKR,_v);
   SKID_RBK.win_edit('RED_RBO'); SKID_RBK.win_sel('SLO_RBO')
|| SKID_RBK.index('TAB'); SKID_RBK.prefix(RACHBANK.FIRMA,PAR_WYDR.TABAKR,PAR_WYDR.TABAKR,_v);
   SKID_RBK.win_edit('RED_RBS'); SKID_RBK.win_sel('SLO_RBS')
?};

_firma:={? RACHBANK.FIRMA || 'firmy %1'@[RACHBANK.FIRMA().OPIS] || 'grupy kapitałowej' ?};
_tyt:=' %1 dla kontrahenta: %2'@[_firma,KH.SKR];
RACHBANK.AKTYWNY:='T';
exec('rb_aktywne','rachunki',PAR_WYDR.TABAKR,_v,_tyt);
ROZNE.KKBAN:=1; _vref:=0; _zwrot:='';
{? _
|| {? RACHBANK.KB_2R<>''
   || _vref:={? PAR_WYDR.TABAKR+4='INFO'
             || RB.getrrban(RACHBANK.KB_2R,PAR_WYDR.TABAKR)
             || RB.getrrban(RACHBANK.KB_2R,PAR_WYDR.TABAKR,_v)
             ?}
   ?};
   {? _vref || SKID_RBK.seek(_vref) ?};
   {? SKID_RBK.select(,1,10)
   || RACHBANK.KB_2R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO);
      _zwrot:=RACHBANK.KB_2R
   ?}
|| {? RACHBANK.KB_3R<>'' || _vref:=RB.getrrban(RACHBANK.KB_3R,PAR_WYDR.TABAKR,_v) ?};
   {? _vref || SKID_RBK.seek(_vref) ?};
   {? SKID_RBK.select(,1,10)
   || RACHBANK.KB_3R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO);
      _zwrot:=RACHBANK.KB_3R
   ?}
?};
SKID_RBK.hdr_sel(); _zwrot


\chk_rbd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Po redagowaniu rach. bankowego w DOK - sprawdza zgodnosc z kontrahentem.
::   WE: _a - zadeklarowane - rachunek VAT
::  OLD: \chk_rbd/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? {? _ & var_pres('RB_V',DOK)>0
   || RACHBANK.KB_2R<>''
   || RACHBANK.KB_3R<>''
   ?}
|| {? _ & var_pres('RB_V',DOK)>0
   || _kb1:=RACHBANK.KB_2R; _kb2:='KB_2R'
   || _kb1:=RACHBANK.KB_3R; _kb2:='KB_3R'
   ?};
   {? ~+RB.chk_rban(_kb1,2,_kb2)
   || {? PAR_WYDR.TABAKR+4='INFO'
      || {? RB.getrrban(_kb1,PAR_WYDR.TABAKR,0,0,1)
         || {? _ & var_pres('RB_V',DOK)>0
            || DOK.RB_V:=SKID_RBK.ref();
               {? SKID_RBK.WAL<>FINFO.NAROD
               || FUN.emsg('Należy wybrać rachunek w walucie narodowej.'@); 0
               || 1
               ?}
            || 1
            ?}
         || FUN.emsg('Należy wybrać rachunek znajdujący się w słowniku.'@); 0
         ?}
      || {? DOK.KH<>''
            & (KH.index('SKR'); KH.prefix(2,DOK.KH,DOK.KH); KH.first())
            & RB.getrrban(_kb1,PAR_WYDR.TABAKR,#KH.ref(),0,1)
            & SKID_RBK.REF=#KH.ref()
         || {? _ & var_pres('RB_V',DOK)>0
            || DOK.RB_V:=SKID_RBK.ref();
               {? SKID_RBK.WAL<>FINFO.NAROD
               || FUN.emsg('Należy wybrać rachunek w walucie narodowej.'@); 0
               || 1
               ?}
            || 1
            ?}
         || FUN.emsg('Należy wybrać rachunek znajdujący się w słowniku.'@); 0
         ?}
      ?}
   || 0
   ?}
|| 1
?}


\bd_kban
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.51]
:: OPIS: Zwraca caly nr rachunku bankowego
::  OLD: \bd_kban/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
:: TODO
:: {? FL.SYSTEM='KALI' | FL.SYSTEM='RCP' || return(exec('konto','banki')) ?};
ROZNE.KONBAN:=RB.get_rbtx(1,SKID_RBK.ref())


\ae_rblsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Po redakcji rachunku licencjobiorcy w subkoncie.
::  OLD: \ae_rblsk/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? RACHBANK.KB_2R<>'' & TAB_RB.find_key(RACHBANK.KB_2R)
|| SKID_RBK.SKID_RBK:=#RB.getrrban(RACHBANK.KB_2R,REF.INFO,0);
   SKID_RBK.KRAJ:=@.RB.getrkraj(3,RB.get_rbel(2,RACHBANK.KB_2R));
   SKID_RBK.cntx_psh();
   _ref:=SKID_RBK.SKID_RBK;
   _wal:=null;
   SKID_RBK.prefix();
   {? SKID_RBK.seek(_ref,SKID_RBK.name()) || _wal:=SKID_RBK.WAL ?};
   SKID_RBK.cntx_pop();
   {? _wal<>null || SKID_RBK.WAL:=_wal || SKID_RBK.WAL:=SKID_RBK.KRAJ().WAL ?};
   SKID_RBK.AKTYWNY:=exec('bl_rb_aktywny','rachunki');
   1
|| FUN.emsg('Należy wybrać rachunek znajdujący się w słowniku.'@); 0
?}


\oso_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2009]
:: OPIS: Akcja Rachunki bankowe dla osoby
::  OLD: \oso_rbk/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab=SLO_OSOB
|| SLO_OSOB.OSOBA()
|? cur_tab=SLO
|| RS.index('RS'); RS.prefix();
   {? RS.find_key(SLO.SLU().WZ)
   || {? RS.TAB='SLO_OSOB' & REF.WFIRM & (3+SLO.KOD)<>REF.FIRMA().SYMBOL
      || FUN.info('Wybrany pracownik jest z innej firmy niż bieżąca.'@); return()
      || _pre:=REF.WFIRM & RS.TAB<>'' & exec('czy_tab_glob','#table',RS.TAB)=0;
         _ok:={? RS.TAB='OSOBA'
              || OSOBA.index('IMEX'); OSOBA.prefix(); OSOBA.find_key(#SLO.KOD)
              |? RS.TAB='OS'
              || OS.index('KOD'); OS.prefix(); {? OS.find_key(SLO.KOD) || OS.OSOBA(); 1 ?}
              |? RS.TAB='SLO_OSOB'
              || SLO_OSOB.index('ID'); SLO_OSOB.prefix(RS.F_ZATR);
                 {? SLO_OSOB.find_key({? ~_pre || #SLO.KOD || #(3-SLO.KOD) ?}) || SLO_OSOB.OSOBA(); 1 ?}
              || 0
              ?};
         {? _ok=0
         || FUN.info('Funkcja dotyczy wyłącznie słowników osób, pracowników i zleceniobiorców.'@);
            return()
         ?}
      ?}
   || FUN.info('Nie znalezniono wzorca słownika.'@); return()
   ?}
?};
ROZNE.KKBAN:=1; PAR_WYDR.REF:=#OSOBA.ref();
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref())';
SLO.cntx_psh(); SLU.cntx_psh(); SLUAPPL.cntx_psh();
SKID_RBK.index('TAB');
_TAB_ACR:=PAR_WYDR.TABAKR:=REF.FIRMA().SYMBOL+'OSOBA';
SKID_RBK.prefix(null,_TAB_ACR,_TAB_ACR,#OSOBA.ref());
SKID_RBK.win_sel('WER_RBO');
SKID_RBK.win_edit('RED_RBO');
SKID_RBK.win_patt('SZUK_RBO');
SKID_RBK.hdr_sel();
SKID_RBK.hdr_sel(' dla osoby: %1 %2'@[OSOBA.PIERWSZE,OSOBA.NAZWISKO]);
SKID_RBK.select(,,,{? OSOBA.KALI='T' || 'DuP:D' || '' ?});
SLO.cntx_pop(); SLU.cntx_pop(); SLUAPPL.cntx_pop()


\cr_tt_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula tworzy tabele tymczasowa z rachunkami, do ktorych biezacy uzytkownik ma uprawnienia
::  OLD: \cr_tt_rb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TT_RB','TT_RB1','TT_RB2');
TT_RB:=tab_tmp(2,
   'RB','STRING[51]','Rachunek bankowy'@,
   'NB','STRING[80]','Bank'@,
   'SKID_RBK','REAL',,
   'NUMER','STRING[8]',,
   'KRAJ','STRING[2]','Kod kraju'@,
   'WAL','STRING[3]','Waluta'@,
   'INNWAL','STRING[1]','Wiel.'@,
   'AKTYWNY','STRING[1]','Aktywny'@,
   'VAT','STRING[1]','VAT');
TT_RB1:=TT_RB.index('?');
TT_RB2:=TT_RB.ndx_tmp('',1,'AKTYWNY',,0, 'RB',,0);
SKID_RBK.cntx_psh();
SKID_RBK.index('BANK');
SKID_RBK.prefix(REF.INFO);
{? SKID_RBK.first()
|| {! |?
      {? menu_pth<>'EDW' | SKID_RBK.WAL=SSTALE.WAL
      || _vrb:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO); _vnb:=SKID_RBK.BANK().NB;
         _vkraj:=SKID_RBK.KRAJ().KODISO; _vref:=SKID_RBK.ref(); _vwal:=SKID_RBK.WAL().KOD;
         _vinn:=SKID_RBK.INNWAL; _akt:=SKID_RBK.AKTYWNY;
         TT_RB.cntx_psh(); _v:=TT_RB.find_key(_vrb,_vnb); TT_RB.cntx_pop();
         {? ~_v
         || TT_RB.RB:=_vrb; TT_RB.NB:=_vnb; TT_RB.SKID_RBK:=_vref; TT_RB.INNWAL:=_vinn;
            TT_RB.NUMER:=SKID_RBK.BANK().NUMER; TT_RB.KRAJ:=_vkraj; TT_RB.WAL:=_vwal;
            TT_RB.AKTYWNY:=_akt;
            TT_RB.VAT:=SKID_RBK.VAT;
            TT_RB.add()
         ?}
       ?};
      SKID_RBK.next()
   !}
?};
SKID_RBK.cntx_pop();
{? TT_RB.first() & (var_press('AllRB')<=0 | AllRB=0)
:: Usuniecie rachunkow bankowych, do ktorych uzytkownik nie ma uprawnien
|| exec('get_usersf','users');
   {? ~Perm.hasFull('HRB')
   || UPR_RB.index('RB'); UPR_RB.prefix(OPERATOR.USER);
      {? UPR_RB.first()
      || {? TT_RB.first()
         || {! |?
               _ref:=RB.getrrban(TT_RB.RB,REF.INFO,0);
               {? ~(_ref & UPR_RB.find_key(_ref))
               || TT_RB.del()
               || TT_RB.next()
               ?}
            !}
         ?}
      || TT_RB.erase()
      ?}
   ?}
?};
:: Usuniecie rachunkow bankowych nie zaznaczonych w filtrze
{? var_pres('TAB_SPEC')>=0
|| {? TT_RB.first()
   || {! |?
         {? ~TAB_SPEC.find_key(TT_RB.RB) | ~TAB_SPEC.Z
         || TT_RB.del()
         || TT_RB.next()
         ?}
      !}
   ?}
?};
:: Usunięcie rachunków bankowych wielowalutowych
{? var_pres('NoWalRb')>0
|| {? TT_RB.first()
   || {!
      |? {? TT_RB.INNWAL='T'
         || TT_RB.del()
         || TT_RB.next()
         ?}
      !}
   ?}
?};
_wsel:=TT_RB.mk_sel('Rachunki bankowe'@,,0,'rachbank_wybor',,,,,'U');
TT_RB.win_fld(_wsel,,'RB',,,50);
TT_RB.win_fld(_wsel,,'NB',,,54);
TT_RB.win_fld(_wsel,,'WAL',,,6);
TT_RB.win_fld(_wsel,,'INNWAL',,,6,,,'Wielowalutowy'@,,'Rachunek wielowalutowy?'@,2,,"'T'","'N'",);
TT_RB.win_fld(_wsel,,'AKTYWNY',,,,,,,,,2,,"'T'","'N'");
TT_RB.win_fld(_wsel,,'VAT',,,,,,,,,2,,"'T'","'N'");
TT_RB.win_act(_wsel,,'Formuła','Wybierz'@@,,,,"sel_exit()",1,,,,'W');
_fml:="exec('tt_rb_zakres','rachunki')";
TT_RB.win_act(_wsel,0,'Formuła','Zmień zakres'@@,,,_fml,,,,,,'Z');
TT_RB.win_act(_wsel,1,'Formuła','Zmień zakres'@@,,,_fml,,,,,,'Z');
TT_RB.win_sel(_wsel);
RACHBANK.AKTYWNY:='T';
exec('wyb_rach_prfx','rachunki')


\bd_varrb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem pola zmiennej do redakcji rach. bankowego bez polaczenia
::       z kartoteka
::       _a: akronim zmiennej (STRING) (np. RACHBANK)
::       _b: akronim pola (STRING) (np. KB_1R)
::       _c: tabela przynaleznosci rachunkow bankowych (pole SKID_RBK.TAB)
::       _d: wlasciciel rachunku (pole SKID_RBK.REF)
::  OLD: \bd_varrb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_v:=($(_a+'.'+_b))();
{? ~+_v
|| _vrb:=RB.get_drb(4,_c,_d);
   exec('cr_tt_rb','rachunki');
   TT_RB.index(TT_RB1); TT_RB.prefix();
   {? ~TT_RB.find_key(_vrb) || _vrb:='' ?};
   VAR_DEL.delete('TT_RB','TT_RB1','TT_RB2')
|| _vr:=RB.getrrban(_v,_c,_d); SKID_RBK.prefix();
   {? _vr & SKID_RBK.seek(_vr)
   || _vrb:=RB.get_rbtx(1,_vr,SKID_RBK.KRAJ().KODISO)
   || _vrb:=RB.get_rbtx(2,_v,'')
   ?}
?}; ($(_a+'.'+_b+':=_a'))(_vrb); 1


\ae_kb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Po redakcji rachunku bankowego
::  OLD: \ae_kb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RB.set_kraj(); _vk:=RB.INFOKRAJ; _ret:=1;
_kor_ser:=(cur_win='WEZWKOR' | cur_win='NOTAKOR' | cur_win='POTWKOR');
{? fld()='' || PB.NBD:=null ?};
{? RB.getrrban(RB.get_rbel(2,fld(),_vk),REF.INFO,0,0,1)
|| _ref:=RB.getrrban(fld(),REF.INFO,0);
   {? ~Perm.hasFull('HRB') & (var_press('AllRB')<=0 | AllRB=0)
   || UPR_RB.index('RB'); UPR_RB.prefix(OPERATOR.USER);
      fld(RB.get_rbtx(2,fld()));
      {? (_ref & UPR_RB.find_key(_ref)) & (cur_tab=PB | _kor_ser)
      || PB.NBD:=SKID_RBK.BANK;
         PB.RD:=SKID_RBK.N;
         {? var_press('__PBWINE')>0 & __PBWINE='PB_EDIW'
            & (PB.WAL=null | (PB.WAL<>null & PB.WAL<>SKID_RBK.WAL & SKID_RBK.INNWAL<>'T'))
         || PB.WAL:=SKID_RBK.WAL
         ?}
      ||  {? _kor_ser
          || FUN.info('Brak uprawnień do wybranego rachunku bankowego.'
                      '\nSkorzystaj z podpowiedzi jeśli jest dostępna.'@); _ret:=0
          || PB.NBD:=null
          ?}
      ?}
   |? Perm.hasFull('HRB')
   || {? _ref & cur_tab=PB
      || PB.NBD:=SKID_RBK.BANK;
         PB.RD:=SKID_RBK.N;
         {? var_press('__PBWINE')>0 & __PBWINE='PB_EDIW'
            & (PB.WAL=null | (PB.WAL<>null & PB.WAL<>SKID_RBK.WAL & SKID_RBK.INNWAL<>'T'))
         || PB.WAL:=SKID_RBK.WAL
         ?}
      || PB.NBD:=null
      ?}
   ?}
|| {? _kor_ser
   || {? fld()<>''
      || FUN.info('Numer rachunku nie jest rachunkiem bankowym licencjobiorcy.'@)
      || FUN.info('Musi być podany prawidłowy numer rachunku bankowego licencjobiorcy.'@)
      ?}; _ret:=0
   || PB.NBD:=null
   ?}
?};
_ret


\f3_vrbup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: F3 pola zmiennej do redakcji rach. bankowego bez polaczenia z kartoteka
::       _a: akronim zmiennej (STRING) (np. RACHBANK)
::       _b: akronim pola (STRING) (np. KB_1R)
::       _c: tabela przynaleznosci rachunkow bankowych (pole SKID_RBK.TAB)
::       _d: wlasciciel rachunku (pole SKID_RBK.REF)
::  OLD: \f3_vrbup/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
_vr:=($(_a+'.'+_b))(); {? +_vr || _vr:=RB.get_rbel(2,_vr) ?};
PAR_WYDR.TABAKR:=_c; PAR_WYDR.REF:=_d;
:: tabela tymczasowa z rachunkami, do których ma uprawnienia uzytkownik
exec('cr_tt_rb','rachunki');
{? TT_RB.select(,1)
|| _wy:=1
|| _wy:=0
?};
{? _wy
|| SKID_RBK.cntx_psh();
   SKID_RBK.index('NUMER');
   _rb:=RB.get_rbel(2,TT_RB.RB,TT_RB.KRAJ);
   SKID_RBK.prefix(_rb, _rb);
   {? SKID_RBK.first || _wy:=SKID_RBK.N || _wy:=0 ?};
   SKID_RBK.cntx_pop()
?};
VAR_DEL.delete('TT_RB','TT_RB1','TT_RB2');
_wy


\lb_pb_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem pola zmiennej do redakcji rach. bankowego licencjobiorcy w PB.
::  OLD: \lb_pb_bd/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~+RACHBANK.RB_LB_PB
|| RACHBANK.RB_LB_PB:=RB.get_drb(4,REF.INFO,0)
|| _vr:=RB.getrrban(RB.get_rbel(2,RACHBANK.RB_LB_PB,RB.set_kraj()),REF.INFO,0);
   {? SKID_RBK.prefix(); SKID_RBK.seek(_vr)
   || RACHBANK.RB_LB_PB:=RB.get_rbtx(1,SKID_RBK.ref(),RB.INFOKRAJ)
   ?}
?};
1


\bv_pb_us_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem pola zmiennej do redakcji rach. bankowego urzedu skarbowego w PB.
::  OLD: \us_pb_bd/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
{? PB.RODZ='KU'
|| _vt:=''; _vs:=null; _vr:=0;
   US.index('URZSKNAZ'); US.prefix(PB.W);
   {? US.first()
   || {!
      |? {? PB.W=+PB.W+US.NU
         || _vt:='US';
            _vr:=#US.ref()
         ?};
         ~+_vt & US.next()
      !}
   ?};
   {? XINFO.SLTYPPL
   || SLUAPPL.prefix();
      SLUAPPL.find_key(XINFO.SLTYPPL().NAZ);
      SLO.index('SL_TR');
      SLO.prefix(SLUAPPL.SLU,PB.USTYPPL);
      {? SLO.first()
      || {!
         |? {? SLO.TR=PB.USTYPPL
            || _vs:=SLO.ref()
            ?};
            ~_vs & SLO.next()
         !}
      ?};
      _vrr:=RB.getrrban(RACHBANK.RB_US_PB,_vt,_vr,_vs);
      SKID_RBK.prefix();
      {? _vrr & SKID_RBK.seek(_vrr)
      || RACHBANK.RB_US_PB:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)
      || RACHBANK.RB_US_PB:=RB.get_rbtx(2,PB.RW,XINFO.KRAJ().KODISO)
      ?}
   || RACHBANK.RB_US_PB:=RB.get_rbtx(2,PB.RW,XINFO.KRAJ().KODISO)
   ?}
|| RACHBANK.RB_US_PB:=RB.get_rbtx(2,PB.RW,RB.set_kraj())
?}


\lb_pb_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: F3 pola zmiennej do redakcji rach. bankowego licencjobiorcy przy edycji PB.
::  OLD: \lb_pb_f3/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
SKID_RBK.index('TAB'); SKID_RBK.prefix(null,REF.INFO,REF.INFO);
SKID_RBK.win_sel('SLO_RACH');
{? SKID_RBK.select()
|| RACHBANK.RB_LB_PB:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO);
   PB.NBD:=SKID_RBK.BANK
?}


\lb_pb_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Po redakcji pola zmiennej do redakcji rach. bankowego licencjobiorcy przy edycji PB.
::  OLD: \lb_pb_ae/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=RB.chk_rban(fld(),2,'RB_LB_PB');
{? ~+_ret
|| SKID_RBK.cntx_psh();
   PB.NBD:=RB.getrbank(3,RACHBANK.RB_LB_PB);
   PB.RD:=RB.get_rbel(2,RACHBANK.RB_LB_PB,'');
   {? PB.KOD_STAT & PB.KOD_STAT().BANK<>PB.NBD || PB.KOD_STAT:=PB.TRYB_POS:=null ?};
   SKID_RBK.cntx_pop(); 1
|| _ret
?}


\bd_nazb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [7.51]
:: OPIS: Przed wyswietleniem zmiennej ROZNE.NAZBAN do wyswietlenia w okienku redakcyjnym
::  OLD: \bd_nazb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.NAZBAN:=SKID_RBK.BANK().NB


\kh_bd_rbo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [BZ] [2009+]
:: OPIS: Przed wyswietleniem rekordu rach. bankowego kontrahenta w SKID_RBK
::  OLD: \kh_bd_rbo/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.RB_KH_SR:=RACHBANK.KB_5R;
SKID_RBK.display()


\rb_nosp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Usuwa spacje z numeru rachunku bankowego
::   WE: _a: nr rachunku bankowego
::  OLD: \rb_nosp/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>'' || {! |? _a*' '>0 |! _pos:=_a*' '; _a:=((_pos-1)+_a)+(_pos-_a) !} ?}; _a


\czy_rach_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.41]
:: OPIS: Formula sprawdza czy rachunek z parametru _a jest rachunkiem kontrahenta z parametru _b
::   WE: _a - ref rachunku bankowego SKID_RBK.ref
::       _b - ref kontrahneta KH.ref
::   WY: 1 - _a rachunek jest rachunkiem kontrahenta z par _b, 0 - w p.p.
::  OLD: \czy_rach_kh/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.cntx_psh();
SKID_RBK.index('TAB'); SKID_RBK.prefix(RACHBANK.FIRMA,'KH','KH',#_b);
_wyn:=SKID_RBK.seek(_a);
SKID_RBK.cntx_pop();
_wyn


\rach_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Ustawienie formul dynamicznych do obslugi pola obslugujacego rachunki bankowe
::  OLD: \rach_slo/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO); '+RACHBANK.KB_4R_BD
   +'; exec(\'ae_rb\',\'rachunki\')'


\rbk_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: rekord przed dla SKID_RBK
::  OLD: \rbk_rek/firma.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','RBK#01#')


\leg_rbk01
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: legendar rachunkow bankowych
::  OLD: \leg_rbk01/firma.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','RBK#01')


\rbk_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: warunki dla kolorowania rekordow SKID_RBK
::  OLD: \rbk_kol/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='RBK#01#02';
{? SKID_RBK.TAB=REF.FIRMA().SYMBOL+'KH2'
|| _wyn:='RBK#01#03'
|? SKID_RBK.TAB='KH'
|| _wyn:='RBK#01#04'
|? SKID_RBK.RD='T'
|| _wyn:='RBK#01#01'
|? SKID_RBK.VAT='T'
|| _wyn:='RBK#01#05'
?};
_wyn


\rachunki_banki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Udostępnia do edycji tabelę rachunków bankowych ograniczoną do rachunków licencjobiorcy.
::       Udostępniane są w trybie "do wyboru" - wykorzystanie w wydrukach przelewów, SODIR, ZUS DRA
::   WE: [_a] [STRING] - tytuł jaki ma zostać doklejony do okna
::  OLD: \rachunki/banki.fml
::  OLD: \zdalne/banki.fml
::----------------------------------------------------------------------------------------------------------------------
_title:={? var_pres('_a')=type_of('') || _a || '' ?};

_tab:=ROZNE.TAB:=PAR_WYDR.TABAKR:=REF.INFO; _rek:=ROZNE.REK:=0;
RACHBANK.KB_5R_BD:='RACHBANK.KB_5R:=RB.get_rbtx(1,SKID_RBK.ref(),SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_BD:='RACHBANK.KB_4R:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO)';
RACHBANK.KB_4R_AE:='SKID_RBK.N:=RB.get_rbel(2,RACHBANK.KB_4R,SKID_RBK.KRAJ().KODISO); '+RACHBANK.KB_4R_BD
   +'; exec(\'ae_rb\',\'rachunki\')';
RACHBANK.KB_1R_BE:=RACHBANK.KB_1R_F3:=RACHBANK.KB_1R_AE:=RACHBANK.KB_4R_BE:=RACHBANK.KB_4R_F3:='';
SKID_RBK.index('TAB');
SKID_RBK.prefix();
RACHBANK.AKTYWNY:='T';
exec('f_set_rbk','rachunki');
{? ~SKID_RBK.f_find('T') || SKID_RBK.f_first() ?};
{? +_title || title(_title) ?};
SKID_RBK.win_sel('WYB');
SKID_RBK.win_edit('RED_RACH');
{! |?
   _continue:=0;
   _dalej:=SKID_RBK.select(,1);
   {? _dalej & SKID_RBK.VAT='T'
   || {? ~FUN.ask('Wybrany rachunek jest rachunkiem do obsługi VAT. Kontynuować?'@)
      || _continue:=1
      ?}
   ?};
   _continue
!};
SKID_RBK.f_clear();
_dalej


\ustaw_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [8.60]
:: OPIS: Wypełnia informacje o użytkowniku i dacie
::   WE: _a [STRING] - źródło przelewu
::          'P' - płace
::          'Z' - umowy cywilnoprawne
::          'F' - ogólne (firmowe)
::  OLD: \ustaw_pb/banki.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| PB.ODD:=
      {? _a='P'
      || O.ODDZIAL
      |? _a='Z'
      || {? PAR_SKID.get(258)='T'
         || RH.O().ODDZIAL
         || RH.ZLE().ODDZIAL
         ?}
      |? _a='F'
      || _sym:=exec('get_par','#parametr',1);
         _odd:=null;
         ODD.cntx_psh();
         ODD.clear();
         ODD.index('ODDZIALY');
         {? ODD.find_key(REF.FIRMA,_sym,_sym)
         || _odd:=ODD.ref()
         ?};
         ODD.cntx_pop();
         _odd
      ?}
?};
PB.DZ:=date();
PB.USER_GEN:=OPERATOR.USER().KOD;
PB.ZT:='N';
PB.WSK_S:='N';
PB.D_ZTW:=date(0,0,0);
PB.USER_ZTW:=''


\ae_kb_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po redakcji pola z nr rachunku urzędu skarbowego lub celnego
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? fld()<>''
|| _vr:=@.RB.get_rbel(2,fld(),'PL');
   {? ~exec('iban_ok','#id',_vr) || _ret:='KB_2R' ?}
?};
_ret


\ps_65
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.14]
:: OPIS: Zastępuje parametr 65 Dostępny mechanizm subkont
::   WE:
::   WY: T-dostępny, N-niedostępny
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
FIRMA.cntx_psh();
SKID_RBK.cntx_psh();
SKID_RBK.index('TABRS');
_ref_info:=REF.FIRMA().SYMBOL+'INFO';
SKID_RBK.prefix(null,_ref_info,_ref_info);
_wyn:={? SKID_RBK.find_key('T') || 'T' || 'N' ?};
SKID_RBK.cntx_pop();
FIRMA.cntx_pop();
_wyn


\subkonta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr+Maks] [12.10]
:: OPIS: automat dodający subkonta
::   WE: [_a] - 0-uruchomiona poza czynnościa, 1-uruchomiona przez czynność, 2-uruchomiona przez czynność w trybie auto
::       [_b] - ref kontrahenta (domyslnie aktualny KH.ref)
::   WY: 1-dodano 0-nie
::  OLD: \subkonta/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
_czy_act:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_kh:={? var_pres('_b')=type_of(null()) || _b || null() ?};

{? exec('ps_65','rachunki')='N' &
   menu_txt<>'Dokument pozostały' & menu_txt<>'Dokument zaliczkowy' &
   menu_txt<>'Dokument z rezerwacją' & menu_txt<>'Korekta dokumentu'
|| FUN.info('Mechanizm generowania subkont jest niedostępny.'
      '\nNależy zaznaczyć subkonto na rachunku licencjobiorcy.'@);
   return(0)
?};

_m2s:=_czy_act<>2;

_rbkrs:=exec('zwrrbkrs','rachunki');
{? _rbkrs=null
|| {? _m2s
   || FUN.info('Nie określono konta dla subkont.'@)
   ?};
   return(0)
?};

_p64:=PAR_SKID.get(64);
_opc:={? _p64='KH.KOD' || 2 |? _p64='AUTONR' || 1 || 0 ?};

{? _opc=0
|| {? _m2s
   || FUN.info('Nieoczekiwana wartość parametru 64.'@)
   ?};
   return(0)
?};

{? _opc=2 & ~exec('sprczynr','kontrahent')
|| {? _m2s
   || FUN.info('Niedostępne generowanie subkont wg kodu kontrahenta.'
         '\nNależy zmienić wartość parametru 64 na AUTONR.'@)
   ?};
   return(0)
?};

{? _m2s
|| {? _kh
   || {? ~FUN.ask('Czy wygenerować subkonto dla kontrahenta\n%1?'@[exec('record','#to_string',_kh)])
      || return(0)
      ?}
   || {? ~FUN.ask('Czy wygenerować subkonta dla kontrahentów?'@)
      || return(0)
      ?}
   ?}
?};

_err:='';
_iltak:=_ilnie:=0;
_Tab:=tab_tmp(
   ,'UIDREF','STRING[48]','uidref'
   ,'SKID_RBK','STRING[48]','skid_rbk');

_do_state:=do_state();
{? _do_state=0 || do() ?};
KH.cntx_psh();
KH.index('NRS');
KH.prefix(2);
KH.index('KOD');
{? _kh=null()
|| KH.prefix(2)
|| KH.prefix(2,exec('FindAndGet','#table',KH,_kh,,"KH.KOD",''))
?};
_loop:=KH.first();
{!
|? _loop
|!
   {? KH.NRS=-1
:: kontrahent nie ma numeru do subkonta
   ||
      {? _opc=1
::    kolejny numer
      || KH.cntx_psh();
         KH.index('NRS');
         KH.prefix(2);
         _nrs:={? KH.last() || KH.NRS || 0 ?}+1;
         KH.cntx_pop();
         KH.NRS:=_nrs;
         {? ~KH.put(1)
         || _err:='Nieudany zapis dla kontrahenta: %1.'@[KH.KOD];
            undo()
         ?}
      |? _opc=2
::    numer kontrahenta
      || {!
         |? _kod:=#KH.KOD;
            _kh_kod:=form(_kod,-(+KH.KOD),,'99');
            {? KH.KOD<>_kh_kod
            || _err:='Kod kontrahenta: %1 jest nienumeryczny.\n'@[KH.KOD]
            || KH.NRS:=_kod;
               _kh:=KH.ref();
               _kh_kod:='';
               _continue:=1;
               KH.cntx_psh();
               KH.index('NRS');
               KH.prefix(2,KH.NRS);
               _loop:=KH.first();
               {!
               |? _loop
               |!
                  _continue:=_kh=KH.ref();
                  _kh_kod:=KH.KOD;
                  _loop:=_continue & KH.next()
               !};
               KH.cntx_pop();
               {? _continue
::             nadaje numer jeśli jest unikalny
               || {? ~KH.put(1)
                  || _err:='Nieudany zapis dla kontrahenta: %1.'@[KH.KOD];
                     undo()
                  ?}
::             istniej kontrahent z takim samym subkontem
               || _err:='Konfilkt subkont dla kontrahenów %1 i %2'@[_kh_kod,KH.KOD];
                  undo()
               ?}
            ?}
         !}
      ?}
:: kontrahent ma numer subkonta
   || {? _opc=1
::    kolejny numer
      || 1
      |? _opc=2
::    numer kontrahenta
      || {? #KH.KOD<>KH.NRS
         || _err:=
               'Kontrahent: %1 ma nadany numer dla subkont niezgodny z jego kodem.\n'
               'Automatyczne nadanie numerów dla subkont wg kodów kontrahenta niemożliwe.'@[KH.KOD];
            undo()
         ?}
      ?}
   ?};

:: dodanie subkonta
   {? _err=''
   ||
      _add:=0;
      SKID_RBK.cntx_psh();
      SKID_RBK.clear();
      {? SKID_RBK.seek(_rbkrs)
      || _bank:=SKID_RBK.BANK;
         _wal:=SKID_RBK.WAL;
         _numer:=2-SKID_RBK.N;
         _subnr:=SKID_RBK.NRS;
         _numer_prfx:={? (+_numer)>=20 & 20-(+_subnr)<8 || 20-(+_subnr) || 8 ?};
         _numer:=_numer_prfx+(_numer)
      ?};
      SKID_RBK.index('TAB');
      SKID_RBK.prefix(RACHBANK.FIRMA,REF.FIRMA().SYMBOL+'KH2',REF.FIRMA().SYMBOL+'KH2',#KH.ref);
      _loop:=SKID_RBK.first();
      _add:=_loop=0;
      {!
      |? _loop
      |!
         _add:=#_rbkrs<>SKID_RBK.SKID_RBK;
         _loop:=_add & SKID_RBK.next()
      !};
      {? _add
      || SKID_RBK.blank();
         SKID_RBK.TAB:=REF.FIRMA().SYMBOL+'KH2';
         SKID_RBK.REF:=#KH.ref;
         SKID_RBK.BANK:=_bank;
         SKID_RBK.SKID_RBK:=#_rbkrs;
         SKID_RBK.WAL:=_wal;
         _nr_rach:=_numer+_subnr;
         _nr_rach+=form(KH.NRS,-(24-(+_nr_rach)),0,'99');
         _suma_k:=exec('sum_kon','rachunki',$_nr_rach);
         SKID_RBK.N:=form(_suma_k,-2)+_nr_rach;
         _add:=SKID_RBK.add(1);
         {? _add || _skid_rbk:=SKID_RBK.uidref() ?}
      ?};
      SKID_RBK.cntx_pop();
      {? _add
      || _Tab.UIDREF:=KH.uidref();
         _Tab.SKID_RBK:=_skid_rbk;
         _Tab.add();
         _iltak+=1
      || _ilnie+=1
      ?}
   ?};
   _loop:=KH.next()
!};
{? _do_state=0 || end() ?};
KH.cntx_pop();

{? +_err
|| {? _m2s || FUN.info(_err) ?};
   0
|? _iltak | _ilnie
|| KH.cntx_psh();
   KH.prefix();
   _loop:=_czy_act=0 & _Tab.first();
   {!
   |? _loop
   |!
      {? KH.seek(_Tab.UIDREF)
      ||
         _params:=exec('mp_run_a','#b__box');
         _params.ACT_UID:='ZWS_PAR_KKHS';
         _params.UIDREF:=KH.uidref();
         _params.AKCJA:='Multi';
         _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
         exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KH',KH.ref());
         exec('mp_run','#b__box',_params);
         obj_del(_params)
      ?};
      _loop:=_Tab.next()
   !};
   KH.cntx_pop();

   {? _m2s
   || {? _kh
      || {? _iltak
         || SKID_RBK.seek(_Tab.SKID_RBK)
         |? _ilnie
         || FUN.info('Subkonto już istnieje.'@)
         ?}
      || FUN.info('Wygenerowano %1 subkont.'
            '\n%2 subkont już istnieje.'@[form(_iltak,,0,'99'),form(_ilnie,,0,'99')])
      ?}
   ?};
   1
|| 0
?}


\sum_kon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr+Maks] [12.10]
:: OPIS: kontrola sumy kontrolnej
::   WE: _a - numer rachunku - string
::  OLD: \sum_kon/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
_i:=0;
_x:=0;
_aw:=obj_new(30);
_ak:=obj_new(30);
_wyn:=0;

:: stale
_ak[1]:=0;
_ak[2]:=0;
_ak[3]:=1;
_ak[4]:=2;
_ak[5]:=5;
_ak[6]:=2;

_buf:=24+_a;
{! _i..24 |! _ak[_i+6]:=#(1+((24-_i)-_buf)) !};

:: definicja WAG
_aw[1] := 1;   _aw[2] :=10;   _aw[3] := 3;   _aw[4] :=30;   _aw[5] := 9;   _aw[6] :=90;
_aw[7] :=27;   _aw[8] :=76;   _aw[9] :=81;   _aw[10]:=34;   _aw[11]:=49;   _aw[12]:= 5;
_aw[13]:=50;   _aw[14]:=15;   _aw[15]:=53;   _aw[16]:=45;   _aw[17]:=62;   _aw[18]:=38;
_aw[19]:=89;   _aw[20]:=17;   _aw[21]:=73;   _aw[22]:=51;   _aw[23]:=25;   _aw[24]:=56;
_aw[25]:=75;   _aw[26]:=71;   _aw[27]:=31;   _aw[28]:=19;   _aw[29]:=93;   _aw[30]:=57;

{! _i:=1..30 |! _wyn+=(_aw[_i]*_ak[_i]) !};
_wyn:=98-(_wyn %* 97);

obj_del(_aw);
obj_del(_ak);
_wyn


\rb_aktywne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia prefiks na rachunkach bankowych
::   WE: [_a] - typ
::       [_b] - nr rekordu
::       [_c] - tytuł okna
::----------------------------------------------------------------------------------------------------------------------
RBtyp:={? var_press('_a')>0 || _a |? var_press('RBtyp')>0 || RBtyp || REF.INFO ?};
RBref:={? var_press('_b')>0 || _b |? var_press('RBref')>0 || RBref ||  0 ?};
_firma:={? RBtyp*'KH'>0 || RACHBANK.FIRMA || null ?};
{? SKID_RBK.f_active() || SKID_RBK.f_clear() ?};
{? RACHBANK.AKTYWNY<>''
|| SKID_RBK.index('AKTYWNY'); SKID_RBK.prefix(_firma,RBtyp,RBref,RACHBANK.AKTYWNY)
|| SKID_RBK.index('TAB'); SKID_RBK.prefix(_firma,RBtyp,RBtyp,RBref)
?};
SKID_RBK.hdr_sel();
{? var_press('_c')>0 || RBtyt:=_c ?};
SKID_RBK.hdr_sel(
   {? var_press('RBtyt')>0 || RBtyt || '' ?}+
   ' - '+{? RACHBANK.AKTYWNY='T' || 'Aktywne' |? RACHBANK.AKTYWNY='N' || 'Nieaktywne' || 'Wszystkie' ?}
);
~~


\zmien_aktywnosc_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Zmiana zakresu aktywności rachunków bakowych
::----------------------------------------------------------------------------------------------------------------------
{? PAR_WYDR.TABAKR='KH'
|| {? DOK.KH<>''
   || KH.index('SKR'); KH.prefix(2,DOK.KH); {? KH.first() || _v:=#KH.ref() || _v:=0 ?};
      _firma:={? RACHBANK.FIRMA || 'firmy %1'@[RACHBANK.FIRMA().OPIS] || 'grupy kapitałowej' ?};
      _tyt:=' %1 dla kontrahenta: %2'@[_firma,{? DOK.KH<>'' || DOK.KH || 'Brak kontrahenta' ?}]
   |? EDOKUM.KHKH<>null()
   || _kh_skr:=exec('FindAndGet','#table','KH',EDOKUM.KHKH,,"KH.SKR",null());
      KH.index('SKR'); KH.prefix(2,_kh_skr); {? KH.first() || _v:=#KH.ref() || _v:=0 ?};
      _firma:={? RACHBANK.FIRMA || 'firmy %1'@[RACHBANK.FIRMA().OPIS] || 'grupy kapitałowej' ?};
      _tyt:=' %1 dla kontrahenta: %2'@[_firma,{? EDOKUM.KHKH<>null() || _kh_skr || 'Brak kontrahenta' ?}]
   ?}
?};

RACHBANK.win_edit('ZAKRES');
_akt:=RACHBANK.AKTYWNY;
{? RACHBANK.edit()
|| {? var_press('_v')>0 & var_press('_tyt')>0
   || exec('rb_aktywne','rachunki',PAR_WYDR.TABAKR,_v,_tyt)
   || exec('rb_aktywne','rachunki',PAR_WYDR.TABAKR)
   ?}
|| RACHBANK.AKTYWNY:=_akt
?};
~~


\be_rb_aktywny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Przed redakcją SKID_RBK.AKTYWNY
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.SKID_RBK
|| exec('rb_is_activ','rachunki')='T'
|| 1
?}


\ae_rb_aktywny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Po redakcji SKID_RBK.AKTYWNY
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.AKTYWNY='N'
|| SKID_RBK.RD:='N'
?};
exec('bv_rb_aktywny','rachunki');
1


\bv_rb_aktywny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Przed wyświetleniem SKID_RBK.AKTYWNY
::----------------------------------------------------------------------------------------------------------------------
_red:=SKID_RBK.win_edit('?');
{? _red<>''
|| SKID_RBK.efld_opt(_red,'enable='+$(SKID_RBK.AKTYWNY='T'),SKID_RBK,'RD')
?};
~~


\tt_rb_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Akcja zmiany zakresu dla tabeli tymczasowej z rachunkami bankowymi
::----------------------------------------------------------------------------------------------------------------------
_akt:=RACHBANK.AKTYWNY;
RACHBANK.win_edit('ZAKRES');
{? RACHBANK.edit()
|| exec('wyb_rach_prfx','rachunki')
|| RACHBANK.AKTYWNY:=_akt
?}


\wyb_rach_prfx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia aktywność rachunków bankowych
::----------------------------------------------------------------------------------------------------------------------
{? RACHBANK.AKTYWNY<>''
|| TT_RB.index(TT_RB2); TT_RB.prefix(RACHBANK.AKTYWNY)
|| TT_RB.index(TT_RB1); TT_RB.prefix()
?};
TT_RB.hdr_sel();
TT_RB.hdr_sel(' - '+{? RACHBANK.AKTYWNY='T' || 'Aktywne'@ |? RACHBANK.AKTYWNY='N' || 'Nieaktywne'@ || 'Wszystkie'@ ?});
TT_RB.find_key(fld());
~~


\bl_rb_aktywny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Wartość poczatkowa pola SKID_RBK.AKTYWNY
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.SKID_RBK
|| exec('rb_is_activ','rachunki')
|| 'T'
?}


\rb_is_activ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Czy rachunek bankowy aktywny (dla subkont czy nadrzędny jest aktywny)
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.SKID_RBK
|| SKID_RBK.cntx_psh();
   SKID_RBK.prefix();
   {? SKID_RBK.seek(SKID_RBK.SKID_RBK,)
   || _akt:=SKID_RBK.AKTYWNY
   || _akt:='N'
   ?};
   SKID_RBK.cntx_pop();
   _akt
|| SKID_RBK.AKTYWNY
?}


\bl_rb_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Wartość poczatkowa pola SKID_RBK.FIRMA
::----------------------------------------------------------------------------------------------------------------------
{? SKID_RBK.TAB*'KH'>0 || RACHBANK.FIRMA || null ?}


\rbk_kh_tyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Trytuł okna z rachunkami bankowymi dla kontrahenta
::   WE: _a - kontrahent
::----------------------------------------------------------------------------------------------------------------------
_firma:={? RACHBANK.FIRMA || 'w firmie %1'@[RACHBANK.FIRMA().OPIS] || ' w grupie kapitałowej' ?};
_tyt:=' %1 %3 kontrahenta: %2'@[_firma,{? _a<>'' || _a || 'Brak kontrahenta' ?},{? DOK.DOK_REJ().JPK_FA_T='S' || 'dla' || '' ?}]+' - '+
{? RACHBANK.AKTYWNY='T' || 'Aktywne' |? RACHBANK.AKTYWNY='N' || 'Nieaktywne' || 'Wszystkie' ?}


\f_set_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia filtr dla rachunków bakowych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.index('TAB');
SKID_RBK.prefix();
SKID_RBK.f_clear();
SKID_RBK.f_set(
   'RD^,N',,
   'TAB=\':_a\' AND REF=:_b '+{? RACHBANK.AKTYWNY<>'' || 'and AKTYWNY=\':_c\'' || '' ?},REF.INFO,0,RACHBANK.AKTYWNY
);
{? SKID_RBK.f_first()
|| {!
   |? {? ~Perm.hasFull('HRB')
      || UPR_RB.index('RB');
         UPR_RB.prefix(OPERATOR.USER,SKID_RBK.ref);
         {? UPR_RB.first() || SKID_RBK.f_next() || SKID_RBK.f_del() ?}
      || SKID_RBK.f_next()
      ?}
   !}
?};
SKID_RBK.hdr_sel();
SKID_RBK.hdr_sel(' - '+{? RACHBANK.AKTYWNY='T' || 'Aktywne'@ |? RACHBANK.AKTYWNY='N' || 'Nieaktywne'@ || 'Wszystkie'@ ?});
~~


\rbk_f_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Zmienia zakres filtra prezentowanych rachunków bankowych
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.win_edit('ZAKRES');
_akt:=RACHBANK.AKTYWNY;
{? RACHBANK.edit()
|| exec('f_set_rbk','rachunki')
|| RACHBANK.AKTYWNY:=_akt
?};
~~


\t_skid_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Trigger po put dla tabeli SKID_RBK
::   WE: _a - typ operacji: 1-put
::       _b - czy operacja się udała
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| {? _b=1 & SKID_RBK.RS='T' & SKID_RBK.AKTYWNY='N' & bfld('AKTYWNY')='T'
   || SKID_RBK.cntx_psh();
      SKID_RBK.index('SKID_RBK'); SKID_RBK.prefix(#SKID_RBK.ref());
      {? SKID_RBK.first()
      || {!
         |? SKID_RBK.AKTYWNY:='N';
            SKID_RBK.put();
            SKID_RBK.next()
         !}
      ?};
      SKID_RBK.cntx_pop()
   ?}
?};
~~


\copy_firmy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Kopiowania rachunków kontrahentów między grupą a firmami i firma
::   WE: _a - czy kopiować do firm? T/N
::----------------------------------------------------------------------------------------------------------------------
{? _a='T'
|| FIRMA.index('SYMBOL2'); FIRMA.prefix('S');
   SKID_RBK.index('TAB');
   SKID_RBK.prefix(null);
   {? SKID_RBK.first()
   || {!
      |? {? SKID_RBK.AKTYWNY='T' & SKID_RBK.TAB*'KH'>0
         || {? FIRMA.first()
            || {!
               |? {? SKID_RBK.TAB+3<>'KH2' | 3+SKID_RBK.TAB=FIRMA.SYMBOL
                  || SKID_RBK.cntx_psh();
                     SKID_RBK.prefix();
                     SKID_RBK.FIRMA:=FIRMA.ref();
                     SKID_RBK.add(1);
                     SKID_RBK.cntx_pop()
                  ?};
                  FIRMA.next()
               !}
            ?}
         ?};
         SKID_RBK.next()
      !}
   ?}
|| SKID_RBK.index('TAB');
   SKID_RBK.prefix(null);
   {? SKID_RBK.last()
   || SKID_RBK.prefix();
      {? SKID_RBK.next()
      || {!
         |? {? SKID_RBK.AKTYWNY='T' & SKID_RBK.TAB*'KH'>0
            || SKID_RBK.cntx_psh();
               SKID_RBK.prefix();
               SKID_RBK.FIRMA:=null;
               SKID_RBK.add(1);
               SKID_RBK.cntx_pop()
            ?};
            SKID_RBK.next()
         !}
      ?}
   ?}
?}


\us_rbk_tp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła zwraca numer rachunku bankowego US dla określonego typu płatności.
::   WE:  _a  [REFERENCE]  - Wskazanie US.
::        _b  [STRING]     - Typ płatności.
::       [_c] [DATE]       - Data badania stanu [domyslnie: date()].
::       [_d] [NUMBER]     - Tryb wsadowy (bez komunikatów):
::                           0 - Nie [domyślnie];
::                           1 - Tak.
::   WY: '' lub znaleziony numer rachunku bankowego dla wskazanego typu płatności.
::----------------------------------------------------------------------------------------------------------------------
_path:='\\us_rbk_tp/rachunki.fml\n';
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=US
|| _us:=_a
|| FUN.error(_path+'Nieprawidłowy parametr wywołania [%1].'@ ['_a']);
   return('')
?};
{? var_pres('_b')=type_of('') & (_b='PIT' | _b='CIT' | _b='VAT')
|| _tp:=_b
|| FUN.error(_path+'Nieprawidłowy parametr wywołania [%1].'@ ['_b']);
   return('')
?};
_dt:=date();
{? var_pres('_c')=type_of(_dt)
|| _dt:=_c
?};
_batch:=var_pres('_d')=type_of(0) & _d;

_sltyppl:=XINFO.SLTYPPL;
exec('czytaj','#stalesys',_dt,XINFO,'SLTYPPL');
_sltyppl==XINFO.SLTYPPL;

{? _sltyppl=null()
|| {? ~_batch
   || FUN.info('Nie podano słownika dla typów płatności dla US/UC.'@)
   ?};
   return('')
?};

SLO.cntx_psh();
SLO.index('SL_TR');
SLO.prefix(_sltyppl);
_slo:={? SLO.find_key(_tp,) || SLO.ref() || null() ?};
SLO.cntx_pop();
{? _slo=null()
|| {? ~_batch
   || FUN.info('Słownik płatności US jest nieprawidłowy.\nNie zawiera pozycji o treści %1.'@ [_tp])
   ?};
   return('')
?};

_ret:='';
SKID_RBK.cntx_psh();
SKID_RBK.index('TAB');
SKID_RBK.prefix(null(),'US','US',#_us,_slo);
{? SKID_RBK.first()
|| _ret:=SKID_RBK.N
?};
SKID_RBK.cntx_pop();
_ret


\rbk_rd_sts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: domyślne rachunki bankowe dla stanowiska sprzedaży
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RBK_RD.cntx_psh();
RBK_RD.index('STS');
RBK_RD.prefix(STS.ref());
RBK_RD.win_sel('WER');
params_set('env','STS');
RBK_RD.select();
RBK_RD.cntx_pop()


\rbk_rd_oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: domyślne rachunki bankowe dla oddziału
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RBK_RD.cntx_psh();
RBK_RD.index('ODDZ');
RBK_RD.prefix(ODDZ.KOD);
RBK_RD.win_sel('WER');
params_set('env','ODDZ');
RBK_RD.select();
RBK_RD.cntx_pop()


\rbk_rd_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: ustaw domyślne rachunki bankowe
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? _env='ODDZ'
|| _oddz:=ODDZ.KOD;
   _sts:=null()
|| _oddz:='';
   _sts:=STS.ref()
?};

_Tab:=tab_tmp(1
   ,'KB'       ,'STRING[50]'  ,'Rachunek bankowy'
   ,'WAL'      ,'STRING[8]'   ,'Waluta'
   ,'AKTYWNY'  ,'STRING[1]'   ,'Aktywny'
   ,'SEL'      ,'STRING[1]'   ,'Wybrany'
   ,'SKID_RBK' ,'STRING[16]'  ,'$SKID_RBK.ref()');

SKID_RBK.cntx_psh();
SKID_RBK.index('AKTYWNY');
SKID_RBK.prefix(null(),REF.INFO,0);
_loop:=SKID_RBK.first();
{!
|? _loop
|!
   _Tab.KB:=RB.get_rbtx(2,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
   _Tab.WAL:=SKID_RBK.WAL().KOD;
   _Tab.AKTYWNY:=SKID_RBK.AKTYWNY;
   _Tab.SEL:=
      {? SKID_RBK.AKTYWNY='N'
      || 'N'
      || exec('FindInSet','#table','RBK_RD','USTAW',SKID_RBK.ref(),_oddz,"'T'",,_sts,'N')
      ?};
   _Tab.SKID_RBK:=$SKID_RBK.ref();
   _Tab.add();
   _loop:=SKID_RBK.next()
!};
SKID_RBK.cntx_pop();

{? ~_Tab.first()
||
   FUN.info('Brak rachunków bankowych licencjobiorcy.'@)
||
   _wer:=_Tab.mk_sel('Rachunki bankowe licencjobiorcy'@,,,'rbkrdustaw',,,,,'U');
   _Tab.win_fld(_wer,,'SEL',,,,,,'Wybrany'@,,,2,,"'T'","'N'");
   _Tab.win_fld(_wer,,'KB',,,50,,,'Rachunek bankowy'@);
   _Tab.win_fld(_wer,,'WAL',,,50,,,'Waluta'@);
   _Tab.win_fld(_wer,,'AKTYWNY',,,1,,,'Aktywny'@);
   _fb:="
      _Tab:=cur_tab();
      {? menu_txt()='Wybierz'
      || {? _Tab.SEL='T' || return(0) ?}
      || {? _Tab.SEL='N' || return(0) ?}
      ?};
      _komm:=_Tab.sel_size();
      {? _Tab.SEL='N' & _Tab.AKTYWNY='N'
      || _txt:='Rachunek %1 jest nieaktywny.\nWybór niemożliwy.'@[_Tab.KB];
         {? _komm || KOMM.add(_txt) || FUN.info(_txt) ?}
      ?};
      _Tab.SEL:={? _Tab.SEL='N' & _Tab.AKTYWNY='T' || 'T' || 'N' ?};
      _put:=1;
      {? _Tab.SEL='T'
      ||
         _Tab.cntx_psh();
         _put:=~_Tab.find_tab(
            ,'SEL',,'=','T'
            ,'WAL',,'=',_Tab.WAL);
         _Tab.cntx_pop();
         {? _put=0
         || _txt:='Pominięto rachunek bankowy %1 ponieważ wybrano już rachunek bankowy dla waluty %2.'@[_Tab.KB,_Tab.WAL];
            {? _komm || KOMM.add(_txt) || FUN.info(_txt) ?}
         ?}
      ?};
      {? _put || _Tab.put() ?}
   ";
   _fbg:="KOMM.init(,,'Uwagi dotyczące wyboru domyślych rachunków'@)";
   _fag:="KOMM.select()";
   _Tab.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,1,_fbg,_fag);
   _btn:=_Tab.win_btn(_wer,'text=%1,panel=right'['Wybierz'@],'menu:W');
   _Tab.btn_opt(_btn,'tooltip=%1'['"Zaznacz rachunek jako wybrany"'@]);
   _cfg:=',btn_label_align=center,panel=bottom,align=end';
   _Tab.win_act(_wer,,'Formuła','Odbierz'@@,,,_fb,,1,1,_fbg,_fag);
   _btn:=_Tab.win_btn(_wer,'text=%1,panel=right'['Odbierz'@],'menu:O');
   _Tab.btn_opt(_btn,'tooltip=%1'['"Usuń zaznaczenie wyboru"'@]);
   _cfg:=',btn_label_align=center,panel=bottom,align=end';
   _fb:="sel_exit()";
   _Tab.win_act(_wer,,'Formuła','&Akceptuj'@@,,,_fb,,,1,,,'A');
   _fb:="_Tab:=cur_tab(); _Tab.actions(_Tab.win_sel('?'),,{? _Tab.SEL='N' || 'W' || 'O' ?},1); ~~";
   _Tab.win_act(_wer,,'Rekord',,,,_fb);
   _btn:=_Tab.win_btn(_wer,'text=%1'['Akceptuj'@]+_cfg,'menu:A');
   _Tab.btn_opt(_btn,'tooltip=%1'[exec('help_red_ok','#window','P')]);
   _btn:=_Tab.win_btn(_wer,'text=%1'['A&nuluj'@]+_cfg,'key:Esc');
   _Tab.btn_opt(_btn,'tooltip=%1'[exec('help_red_esc','#window','A')]);

   _Tab.win_sel(_wer);
   {? _Tab.select()
   ||
      RBK_RD.cntx_psh();
      RBK_RD.index('USTAW');
      RBK_RD.prefix();
      SKID_RBK.cntx_psh();
      SKID_RBK.index('AKTYWNY');
      SKID_RBK.prefix();
      _Tab.index(_Tab.ndx_tmp(,,'SEL',,));
      _loop:=_Tab.first();
      {!
      |? _loop
      |!
         {? _Tab.SEL='T'
         ||
            {? SKID_RBK.seek(_Tab.SKID_RBK)
            ||
               {? ~RBK_RD.find_key(_oddz,_sts,SKID_RBK.ref())
               ||
                  RBK_RD.blank();
                  RBK_RD.ODDZ:=_oddz;
                  RBK_RD.STS:=_sts;
                  RBK_RD.SKID_RBK:=SKID_RBK.ref();
                  RBK_RD.WAL:=SKID_RBK.WAL;
                  RBK_RD.add()
               ?}
            ?}
         ||
            {? SKID_RBK.seek(_Tab.SKID_RBK)
            ||
               {? RBK_RD.find_key(_oddz,_sts,SKID_RBK.ref())
               ||
                  RBK_RD.del()
               ?}
            ?}
         ?};
         _loop:=_Tab.next()
      !};
      SKID_RBK.cntx_pop();
      RBK_RD.cntx_pop()
   ?}
?}


\rbk_rd_rekb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: rekord przed domyślne rachunki bankowe
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ff:="RACHBANK.KB_5R:=RB.get_rbtx(2,@.SKID_RBK.N,@.SKID_RBK.KRAJ().KODISO)";
exec('FindAndGet','#table',SKID_RBK,RBK_RD.SKID_RBK,,_ff);
''


\rbk_rd_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.42]
:: OPIS: aktualizacja wartości pola RBK_RD.WAL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RBK_RD.cntx_psh();
RBK_RD.index('SKID_RBK');
RBK_RD.prefix(SKID_RBK.ref());
_loop:=RBK_RD.first();
{!
|? _loop
|!
   RBK_RD.WAL:=SKID_RBK.WAL;
   {? ~RBK_RD.put(1)
   || _sts:=RBK_RD.STS().KOD;
      _oddz:=RBK_RD.ODDZ;
      {? do_state() || undo() ?};
      {? RBK_RD.STS
      || STS.cntx_psh();
         FUN.info('Zmiana waluty niemożliwa ponieważ powoduje niejednoznaczność'
            '\ndomyślnych rachunków bankowych dla stanowiska sprzedaży %1.'@[_sts]);
         STS.cntx_pop()
      || FUN.info('Zmiana waluty niemożliwa ponieważ powoduje niejednoznaczność '
            '\ndomyślnych rachunków bankowych dla oddziału %1.'@[_oddz])
      ?}
   ?};
   _loop:=RBK_RD.next()
!};
RBK_RD.cntx_pop()


\urz_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [20.14]
:: OPIS: sprawdzanie zgodności z TERYT danych adresowych tabeli ADRES
::   WE:
::   WY: 1 - zgodne 0 - niezgodne
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T'
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.PYT_KOM:='P';
   _par.TAB:='ADRES';
   _par.ULI_P:='ULICA';
   _par.MSC_P:='MIASTO';
   _par.ULI_ND:=1;
   _wyn:=exec('ter_sprawdz','teryt',_par);
   {? ~_wyn.DALEJ || _wyn.POLE || 1 ?}
|| 1
?}


\tpl_ror
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AFI] [19.42_06]
:: OPIS: Dolaczanie rekordow w tabeli SKID_RBK dla mikrorachunku licencjobiorcy
::----------------------------------------------------------------------------------------------------------------------
SLO.index('SL'); SLO.prefix(XINFO.SLTYPPL);
_o:=SLO.mk_sel(XINFO.SLTYPPL().NAZ);
SLO.win_fld(_o,,'KOD');
SLO.win_fld(_o,,'TR',,,60);
SLO.win_act(_o,,'Formuła','Wybierz',,,"
   _tab:=REF.FIRMA().SYMBOL+'TROR';
   SKID_RBK.cntx_psh();
   SKID_RBK.index('TPL');
   SKID_RBK.prefix(_tab,SLO.ref());
   {? ~SKID_RBK.first()
   || SKID_RBK.blank();
      SKID_RBK.TAB:=_tab;
      SKID_RBK.REF:=#RefRB;
      SKID_RBK.SKID_RBK:=#RefRB;
      SKID_RBK.cntx_psh();
      SKID_RBK.clear();
      {? SKID_RBK.seek(RefRB,)
      || _kontoNad:=SKID_RBK.N
      ?};
      SKID_RBK.cntx_pop();
      SKID_RBK.N:=_kontoNad;
      SKID_RBK.SLU:=SLO.SLU;
      SKID_RBK.SLO:=SLO.ref();
      SKID_RBK.add()
   || FUN.info('Wybrany typ płatności został już zdefiniowany.')
   ?};
   SKID_RBK.cntx_pop();
   sel_exit()
","",1,1);
SLO.win_sel(_o);
SLO.select()


\chk_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Sprawdzenie aktywności VAT rachunku bankowego kontrahenta
::----------------------------------------------------------------------------------------------------------------------
_data:={? var_pres('ChkRB')>0 || ChkRB || exec('chk_rb_data','rachunki',0) ?};
{? _data.ask()
|| _res:=~~;
   KH.cntx_psh();
   KH.index('KOD');
   KH.prefix();
   {? KH.seek(SKID_RBK.REF,)
   || KH.cntx_psh();
      {? +exec('grvat_typ_kh','kontrahent',KH.ref,_data.D)=2
      || _kh_grvat:=exec('kh_grvat_lic','kontrahent',_data.D);
         KH.seek(_kh_grvat)
      ?};
      _res:=exec('check','blp','B',KH.SNIP,_data.D,SKID_RBK.N);
      KH.cntx_pop()
   ?};
   KH.cntx_pop();
   {? SKID_RBK.sel_size()=0
   || {? var_pres('_res')>0
      || {? _res.RES=200
         || {? _res.ACTIVE='T'
            || FUN.info('Rachunek bankowy jest aktywny.'@)
            || FUN.choice('Rachunek bankowy nie jest aktywny.'@,'EXCLAM',,,,,'OK')
            ?}
         |? _res.OPIS<>''
         || FUN.choice(_res.OPIS,'EXCLAM',,,,,'OK')
         || FUN.info('Nie udało się znaleźć informacji\no aktywności rachunku bankowego.'@)
         ?}
      || FUN.info('Nie udało się znaleźć informacji\no aktywności rachunku bankowego.'@)
      ?}
   |? var_pres('ChkRB')>0
   || _data.ALL+=1;
      {? var_pres('_res')>0
      || {? _res.RES=200
         || {? _res.ACTIVE='T'
            || _data.TAK+=1
            |? _res.ACTIVE='N'
            || _data.NIE+=1
            ?}
         || _data.ERR+=1
         ?}
      || _data.ERR+=1
      ?}
   ?}
?}


\bg_chk_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Przed akcją grupową sprawdzania aktywności rachunku bankowego podatnika VAT
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('ChkRB');
ChkRB:=exec('chk_rb_data','rachunki',1);
{? ChkRB.ask()
|| 1
|| VAR_DEL.delete('ChkRB');
   0
?}


\ag_chk_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Po akcji grupowej sprawdzania aktywności rachunku bankowego podatnika VAT
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ChkRB')>0
|| FUN.info(
      'Liczba zazmaczonych rachunków: '@+$ChkRB.ALL+'\n'+
      'Liczba aktywnych rachunków: '@+$ChkRB.TAK+'\n'+
      'Liczba nieaktywnych rachunków: '@+$ChkRB.NIE+'\n'+
      {? ChkRB.ERR || 'Liczba nieudanych sprawdzeń rachunków: '@+$ChkRB.ERR || '' ?}
   );
   VAR_DEL.delete('ChkRB')
?}


\chk_rb_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Obiekt do operacji grupowej sprawdzania rachunku bankowego
::   WE: _a - operacja grupowa
::----------------------------------------------------------------------------------------------------------------------
_data:=obj_new(
   'TAK','NIE','ERR','ALL','D','HT',
   'GRP','first',
   'ask'
);
_data.ALL:=_data.NIE:=_data.TAK:=0;
_data.first:=1;
_data.GRP:=_a;
_data.ask:="
   {? .first
   || .first:=0;
      .ALL:=.NIE:=.TAK:=.ERR:=0;
      {? .GRP=2
      || .HT:=exec('create_set','blp','STRING[15]')
      ?};
      _txt:={? .GRP
            || 'Czy sprawdzić aktywność zaznaczonych rachunków bankowych?'@
            || 'Czy sprawdzić aktywność rachunku bankowego?'@
            ?};
      {? (_opt:=FUN.choice(_txt,,'Na dziś','Inny dzień'))
      || {? _opt=2
         || undefine();
            define('D',date(),'Data','Data dla której nastąpi sprawdzenia aktywności rachunku bankowego'@);
            {? def_edit(\"
                  {? DEFINE.D=date(0,0,0)
                  || FUN.info('Nie podano daty.'@);
                     0
                  |? DEFINE.D>date()
                  || FUN.info('Data nie może być późniejsza niż dzisiejsza.'@);
                     DEFINE.D:=date();
                     0
                  || 1
                  ?}
               \")
            || .D:=DEFINE.D
            || _opt:=0
            ?}
         ?};
         _opt
      ?}
   |? .GRP=1 | .HT.addIfNotExists(_a)
   || 1
   ?}
";
_data


\triger
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Triger dla rachunku bankowego
::   WE: _a - typ: -1-przed add, -2-przed put
::----------------------------------------------------------------------------------------------------------------------
{? _a<0
|| {? SKID_RBK.TAB='KH' & SKID_RBK.N<>''
   || KH.cntx_psh();
      KH.prefix();
      {? KH.seek(SKID_RBK.REF,)
      || KHCHKNIP.cntx_psh();
         KHCHKNIP.index('ID'); KHCHKNIP.prefix('B',KH.SNIP,SKID_RBK.N,);
         {? KHCHKNIP.first()
         || SKID_RBK.S_VAT:=KHCHKNIP.C_ACTIVE;
            SKID_RBK.S_VAT_D:=KHCHKNIP.DATA_DO
         || SKID_RBK.S_VAT:='';
            SKID_RBK.S_VAT_D:=date(0,0,0)
         ?};
         KHCHKNIP.cntx_pop()
      ?};
      KH.cntx_pop()
   ?};
   1
?}


\rb_blp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Ustawia obsługę F3 dla rachunku bankowego
::   WE: _a - 1-ustawia 0-kasuje
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| _tab:=exec('rbk','blp',KH.SNIP);
   {? _tab.first()
   || VAR_DEL.delete('BlpRB');
      BlpRB:=_tab;
      RACHBANK.fld_fml('RB_KH_SR','F3',"
         {? fld()<>''
         || BlpRB.find_key(STR.gsub(fld(),' ','')) | RlpRB.first()
         ?};
         {? BlpRB.select(,1,5)
         || fld(BlpRB.N)
         ?}
      ")
   || RACHBANK.fld_fml('RB_KH_SR','F3',"*")
   ?}
|| RACHBANK.fld_fml('RB_KH_SR','F3',"*")
?}

:Sign Version 2.0 jowisz:1045 2024/01/29 14:27:18 1201c225bbd5e770ef53ed95ad44757d3852ea5eed700b9bfef6fa4d3263ccf957ddfbad8ee35ccddfaa5950991189ee84fbc495c8531113b1d1179d87475b7262f868ccb021a7d8ec1d78f9feaa31af244e2eb3e1f3d13cd7a0b45a0df4a61037d4c14ff10e48aca1c775fe56f0d3bd5bf40d0daf1e72803b1a6af62462d203
