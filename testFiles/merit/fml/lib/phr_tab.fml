:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_tab.fml
:: Utworzony: 13.03.2017
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły dla wyzwalaczy tabel obszarów POC, PSZ, PRE, PBA.
::======================================================================================================================


\nazwa_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Określa właściwą dla firmy nazwę zbioru tabeli ZZ_DOK.
::   WE:
::   WY: nazwa zbioru
::----------------------------------------------------------------------------------------------------------------------
-('zz_do'+($REF.FIRMA+1))


\otworz_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Otwiera właściwy dla firmy zbiór tabeli ZZ_DOK.
::   WE:
::   WY: nazwa otwartego zbioru
::----------------------------------------------------------------------------------------------------------------------
_nazwa:=exec('nazwa_dok','phr_tab');
ZZ_DOK.use(_nazwa);
_nazwa


\jest_lic
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy jest któraś z wymaganych licencji.
::   WE:
::   WY: 0 - nie
::       1 - tak
::UWAGA: należy rozważyć efektywniejszy sposób sprawdzania
::----------------------------------------------------------------------------------------------------------------------
exec('lic_or','#b_domain','PSZ','POC','PRE','PBA')


\zz_dok_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Zwraca akrualną nazwę zbioru ZZ_DOK - głównie wartość początkowa pól NP_DOK
::   WE:
::   WY: nazwa aktualnie otwartego zbioru tabeli ZZ_DOK
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOK.name()


\dok_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Obsługa dokumentu kadrowego w wyzwalaczach "dołacz przed"
::   WE: _a - alias do tabeli z kolumną zawierającą wskazania wierszy tabeli ZZ_DOK
::      [_b] [STRING] - opcjonalnie autor ZZ_DOK
::   WY: 0 - wystąpił błąd
::       1 - dokument został utworzony i przypisany
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=1
|| _autor:={? var_pres('_b')=type_of('') || _b || ~~ ?};
   {? (_a.ZZ_DOK:=exec('add_dok','phr_tab',_a,_autor))<>null
   || _a.NP_DOK:=ref_name(_a.ZZ_DOK);
      +_a.NP_DOK
   ?}
?}


\dok_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Obsługa dokumentu kadrowego w wyzwalaczach "dołacz po"
::   WE: _a - alias do tabeli z kolumną zawierającą wskazania wierszy tabeli ZZ_DOK
::       _b - wartość przekazywana jako argument _a do formuł wyzwalaczy "po"
::   WY: 1 - akcja się powiodła i transakcja jest ciągle aktywna
::       0 - akcja się nie udała lub transakcja została zerwana
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
{? _b
|| exec('ver_dok','phr_tab',_a) & do_state()=1
|| exec('del_dok','phr_tab',_a.ZZ_DOK);
   return(0)
?}


\dok_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Obsługa dokumentu kadrowego w wyzwalaczach "popraw przed"
::   WE: _a - alias tabeli z kolumną zawierającą wskazania wierszy tabeli ZZ_DOK
::   WY: 0 - wystąpił błąd
::       1 - dokument został został uznany za poprawny
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
{? do_state<>1
|| return(0)
|? _a.ZZ_DOK=null
|| undo('Kolumna ZZ_DOK tabeli %1 nie akceptuje wartości null.'@[2-!_a]);
   return(0)
?};
_a.NP_DOK:=ref_name(_a.ZZ_DOK);
1


\dok_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Obsługa dokumentu kadrowego w wyzwalaczach "popraw po"
::   WE: _a - alias do tabeli z kolumną zawierającą wskazania wierszy tabeli ZZ_DOK
::       _b - wartość przekazywana jako argument _a do formuł wyzwalaczy "po"
::   WY: 1 - akcja się powiodła i transakcja jest ciągle aktywna
::       0 - akcja się nie udała lub transakcja została zerwana
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=1 & _b
|| _dok:=bfld('ZZ_DOK');
   {? _dok<>null & (_a.ZZ_DOK<>_dok & form(8+$_dok)<>'zz_dok')
   || undo('Próba naruszenia więzów spójności logicznej danych tabeli %1.'@[2-!_a]);
      return(0)
   || exec('ver_dok','phr_tab',_a) & do_state()=1
   ?}
?}


\dok_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Obsługa dokumentu kadrowego w wyzwalaczach "usuń po"
::   WE: _a - wartość przekazywana jako argument _a do formuł wyzwalaczy "po"
::   WY: 1 - akcja się powiodła i transakcja jest ciągle aktywna
::       0 - akcja się nie udała lub transakcja została zerwana
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=1 & _a
|| exec('del_dok','phr_tab',bfld('ZZ_DOK')) & do_state()=1
?}


\add_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła wykorzystywana w wyzwalaczach dla tabel zawierających kolumnę ze wskazaniami na wiersze tabeli ZZ_DOK.
::       Dodaje rekord do tabeli ZZ_DOK.
::   WE: _a - alias do tabeli, dla której tworzony jest rekord w tabeli ZZ_DOK
::      [_b] [STRING] - opcjonalnie autor ZZ_DOK
::   WY: Wskazanie na nowy rekord lub null jeśli utworzenie zapisu nie powiodło się.
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \add_dok/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_autor:={? var_pres('_b')=type_of('') || _b || userdata() ?};
ZZ_DOK.clear();
ZZ_DOK.blank();
ZZ_DOK.ID:=ZZ_DOK.tm_stamp();
ZZ_DOK.AUTOR:=_autor;
ZZ_DOK.TYTUL:=_a.comment();
ZZ_DOK.KLASA:=2-!_a;
ZZ_DOK.DATA:=date();
ZZ_DOK.GODZ:=time();
{? ZZ_DOK.add()
|| ZZ_DOK.ref()
|| null
?}


\ver_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła wykorzystywana w wyzwalaczach po dołącz i popraw tabel zawierajacych kolumnę ze wskazaniami na wiersze
::       tabeli ZZ_DOK.
::   WE: _a - alias do tabeli, dla której weryfikowany jest rekord w tabeli ZZ_DOK
::   WY: Wynik aktualizacji.
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \ver_dok/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.ZZ_DOK
|| _ret_val:=1;
   ZZ_DOK.cntx_psh();
   _dok_name:=ZZ_DOK.name();
   _ref_name:=ref_name(_a.ZZ_DOK);
   {? _ref_name<>_dok_name
   || ZZ_DOK.use(_ref_name)
   ?};
   _a.ZZ_DOK();
   _a.NP_DOK:=ref_name(_a.ZZ_DOK);
   {? ZZ_DOK.MB_MASK<>_a.name() | ZZ_DOK.MB_REF<>#_a.ref()
   || ZZ_DOK.MB_MASK:=_a.name();
      ZZ_DOK.MB_REF:=#_a.ref();
      _ret_val:=ZZ_DOK.put()
   ?};
   ZZ_DOK.cntx_pop();
   _ret_val
?}


\del_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła wykorzystywana w wyzwalaczach dla tabel z kolumną zawierającą wskazania na wiersze tabeli ZZ_DOK.
::       Usuwa zapis z tabeli ZZ_DOK skojarzony z usuwanym rekordem.
::   WE: _a - wskazanie na rekord w tabeli ZZ_DOK
::   WY: wynik metody del tabeli ZZ_DOK jeśli rekord istnieje, 0 w przeciwnym wypadku
:: UWAGA! Poprawnosc argumentow wywolania nie jest weryfikowana.
::  OLD: \del_dok/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_DOK.cntx_psh();
ZZ_DOK.clear();
{? exec('seek_dok','phr_tab',_a)
|| {? ~ZZ_DOK.del(,1)
   || undo(
         'Usunięcie dokumentu o numerze %1 (wskaźnik %2) nie jest możliwe.\n'
         '(tabela %3, zbiór %4 i zapis %5 źródła)'@
         [$ZZ_DOK.ID,$ZZ_DOK.ref(),ZZ_DOK.KLASA,ZZ_DOK.MB_MASK,$ZZ_DOK.MB_REF]
      );
      ZZ_DOK.cntx_pop();
      return(0)
   ?}
?};
ZZ_DOK.cntx_pop();
1


\chk_class
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Sprawdza, czy klasa o podanej nazwie istnieje.
::   WE: _a - identyfikator klasy
::   WY: 0 - klasa nie istnieje
::       1 - klasa jest zdefiniowana
::----------------------------------------------------------------------------------------------------------------------
{? var_pres(_a)<>type_of(SYSLOG)
|| _txt:='Błędne oznaczenie klasy zapisu.'@;
   {? do_state()=0
   || FUN.emsg(_txt)
   || undo(_txt)
   ?};
   0
|| 1
?}


\has_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formula wykorzystywana w wyzwalaczach. Sprawdza, czy w tabeli występuje kolumna ZZ_DOK.
::   WE: _a - alias tabeli
::   WY: 1 jeśli rekord tabeli zawiera pole ZZ_DOK wskazujące na zapisy tabeli ZZ_DOK, 0 w przeciwnym wypadku
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \has_dok/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
var_pres('ZZ_DOK',_a)=26


\ref4dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Zwraca wskazanie na zapis właściwy dla dokumentu kadrowego
::   WE: _a - alias do tabeli z kolumną ZZ_DOK
::       _b - wskazanie na rekord w tabeli ZZ_DOK
::   WY: wskazanie na rekord w tabeli lub null
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana. Zmieniany jest kontekst tabeli: indeks i pozycja
::  OLD: \ref4dok/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_a.index('ZZ_DOK');
_a.prefix();
_a.find_key(ref_name(_b),_b)


\dok2ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca wskazanie na zapis właściwy dla dokumentu kadrowego
::   WE: _a - wskazanie na rekord w tabeli ZZ_DOK
::   WY: wskazanie na rekord w tabeli lub null
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \dok2ref/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ZZ_DOK.cntx_psh();
ZZ_DOK.clear();
{? exec('seek_dok','phr_tab',_a)
|| _tab:=($ZZ_DOK.KLASA)();
   _tab.cntx_psh();
   {? exec('ref4dok','phr_tab',_tab,_a)
   || _ref:=_tab.ref()
   ?};
   _tab.cntx_pop()
?};
ZZ_DOK.cntx_pop();
_ref


\zz_dokz_zz_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wartość początkowa dla pola ZZ_LINK
::   WY: wskazanie na rekord tabeli ZZ_DOK
::  OLD: \zz_dokz_lnk/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_POM.DOKZ_LNK


\memo_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca tekst zawarty w polu notatnikowym zapisu lub dokumentu kadrowego.
::   WE: _a - alias do tabeli
::       [_b] - wskazanie na rekord
::       [_c] - akronim pola notatnikowego
::  OLD: \memo_get/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_txt:='';
{? var_pres('_a')=type_of(SYSLOG)
|| {? var_pres('_b')=type_of(null)
   || _a.cntx_psh;
      {? _a.seek(_b)
      || {? var_pres('_c')=type_of('') & _c<>''
         || _txt:=_a.memo_txt(,1,_c)
         || _txt:=_a.memo_txt(,1)
         ?}
      ?};
      _a.cntx_pop
   |? exec('has_dok','phr_tab',_a)
   || {? _a.ZZ_DOK
      || ZZ_DOK.cntx_psh;
         _a.ZZ_DOK();
         _txt:=ZZ_DOK.memo_txt(,1,'NOTA');
         ZZ_DOK.cntx_pop
      ?}
   || {? var_pres('_c')=type_of('') & _c<>''
      || _txt:=_a.memo_txt(,1,_c)
      || _txt:=_a.memo_txt(,1)
      ?}
   ?}
?};
_txt


\memo_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zapisuje tekst w polu notatnikowym dokumentu kadrowego.
::   WE: _a - alias do tabeli
::       _b - (opcjonalny) tekst notatki
::  OLD: \memo_put/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(SYSLOG) & exec('has_dok','phr_tab',_a)
|| _a.ZZ_DOK();
   _text:={? var_pres('_b')=type_of('') || _b || '' ?};
   ZZ_DOK.memo_set(_text,'NOTA');
   ZZ_DOK.memo_put(,'NOTA')
?}


\is_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy tabela przechowuje wartości kryterium.
::   WE: _a - alias do tabeli
::   WY: 1 jeśli tabela jest kryterium, 0 jeśli nie
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \is_kryt/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_a=ZZ_KRYTF | _a=ZZ_KRYTJ | _a=ZZ_KRYTP | _a=ZZ_KRYTS


\met2tabwar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca alias tabeli przechowującej wartości oceny zależnie od jej typu.
::   WE: _a - symbol metody oceny
::  OLD: \met2tabwar/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='KW' || ZZ_KOMPK
|? _a='SP' || ZZ_KOMPS
|? _a='WB' || ZZ_KOMPZ
|| SYSLOG
?}


\for_each
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wykonuje formułę _a dla pozostałych argumentów.
::   WE: _a - formuła do wykonania
::       _b - argument
::       ...
::  OLD: \for_each/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{! _arg:=2.._ |! _a(_[_arg]) !}


\dx_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Aktualizuje pola statystyk - liczba formularzy.
::   WE: _a - 1/-1 przyrost
::       _b - akronim pola
::       _c - wskazanie na ZO_OSTYP
::       _d - wskazanie na ZO_TEST
::  OLD: \dx_form/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
exec('for_each','phr_tab',"_a.cntx_psh();_a.clear()",ZO_OSTYP,ZO_TEST,ZO_OSOBA);

_update:=$('_a.'+_b+'+=_b; _a.put');
{? ZO_OSTYP.seek(_c) & ZO_OSOBA.seek(ZO_OSTYP.ZO_OSOBA)
|| _update(ZO_OSOBA,_a)
?};
{? ZO_TEST.seek(_d) & ZO_OSOBA.seek(ZO_TEST.ZO_OSOBA)
|| _update(ZO_OSOBA,_a)
?};

exec('for_each','phr_tab',"_a.cntx_pop()",ZO_OSTYP,ZO_TEST,ZO_OSOBA);
ZO_OSOBA.get()


\dx_nota
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Aktualizuje pola statystyk - liczba ocen.
::   WE: _a - 1/-1 przyrost
::       _b - akronim pola
::       _c - wskazanie na ZO_KOMP
::  OLD: \dx_nota/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
exec('for_each','phr_tab',"_a.cntx_psh();_a.clear()",ZO_KOMP,ZO_FORM,ZO_OSTYP,ZO_TEST,ZO_OSOBA);

_update:=$('_a.'+_b+'+=_b; _a.put');
{? ZO_KOMP.seek(_c) & ZO_FORM.seek(ZO_KOMP.ZO_FORM)
|| {? ZO_OSOBA.seek(ZO_FORM.ZO_OSTYP().ZO_OSOBA)
   || _update(ZO_OSOBA,_a)
   ?};
   {? ZO_OSOBA.seek(ZO_FORM.ZO_TEST().ZO_OSOBA)
   || _update(ZO_OSOBA,_a)
   ?}
?};

exec('for_each','phr_tab',"_a.cntx_pop()",ZO_KOMP,ZO_FORM,ZO_OSTYP,ZO_TEST,ZO_OSOBA);
ZO_OSOBA.get()


\zz_ocena_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Tworzy ocenę dla wskazanego rekordu
::   WE: _a - alias tabeli, dla której tworzona jest ocena
::       _b - (opcjonalny) akronim pola przechowującego wskazanie na ocenę
::  OLD: \zz_ocena_add/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:={? var_pres('_b')=type_of('') & |_b<>'' || _b || 'ZZ_OCENA' ?};
{? ($('~_a.'+_fld))(_a)
|| ZZ_OCENA.blank();
   ZZ_OCENA.clear();
   ZZ_OCENA.ZZ_LINK:=_a.ZZ_DOK;
   {? ZZ_OCENA.add()
   || ($('_a.'+_fld+':=_b'))(_a,ZZ_OCENA.ref())
   ?}
?};
1


\zz_ocena_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Usuwa ocenę właściwą dla bieżącego rekordu tabeli
::   WE: _a - (opcjonalny) akronim pola przechowującego wskazanie na ocenę
::  OLD: \zz_ocena_del/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_acr:={? var_pres('_a')=type_of('') & |_a<>'' || _a || 'ZZ_OCENA' ?};
ZZ_OCENA.prefix();
{? ZZ_OCENA.seek(bfld(_acr)) & ZZ_OCENA.count()=0
|| ZZ_OCENA.del()
?}


\zz_ocena_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy rekord zawiera wskazanie na ocenę, jeśli nie, to uzupełnia
::   WE: _a - alias tabeli z polem wskazującym na wynik oceny
::       _b - (opcjonalny) akronim pola przechowującego wskazanie na ocenę
::  OLD: \zz_ocena_ver/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:={? var_pres('_b')=type_of('') & |_b<>'' || _b || 'ZZ_OCENA' ?};
{? ($('~_a.'+_fld))(_a)
|| _begin:=(do_state=0);
   _result:=0;
   {? _begin
   || do()
   ?};
   {? do_state()=1
   || _result:=(exec('zz_ocena_add','phr_tab',_a) & _a.put);
      {? ~_result & _begin & do_state()=1
      || undo()
      ?}
   ?};
   {? _begin
   || end()
   ?};
   _result
|| 1
?}


\zz_ocena_cnt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Wylicza wartość oceny na podstawie ocen cząstkowych.
::   WE: _a - wskazanie na aktualizowaną ocenę
:: UWAGA! Poprawność argumentu wywołania nie jest weryfikowana. Przed wywołaniem funkcji należy zadbać o odpowiednie
::        ograniczenie zakresu tabeli ZA_TEST lub jej przefiltrowanie.
::  OLD: \zz_ocena_cnt/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_so:=_lo:=_ex:=0;
_clo:=_cex:=_chi:=_cnt:=0;
_loop:={? ZA_TEST.f_active() || ZA_TEST.f_first() || ZA_TEST.first() ?};
_next:=${? ZA_TEST.f_active() || 'ZA_TEST.f_next()' || 'ZA_TEST.next()' ?};
{!
|? _loop
|! {? ZA_TEST.ZZ_OCENA().LO
   || _so+=ZZ_OCENA.SO;
      _lo+=ZZ_OCENA.LO;
      _ex+=ZZ_OCENA.EX;
      _clo+=ZZ_OCENA.CLO;
      _cex+=ZZ_OCENA.CEX;
      _chi+=ZZ_OCENA.CHI;
      _cnt+=(ZZ_OCENA.LO<>0)
   ?};
   _loop:=_next()
!};

{? {? ZZ_OCENA.ref()<>_a
   || ZZ_OCENA.prefix();
      ZZ_OCENA.seek(_a)
   || 1
   ?}
|| ZZ_OCENA.SO:=_so;
   ZZ_OCENA.LO:=_lo;
   ZZ_OCENA.EX:={? _cnt || _ex/_cnt ?}$2;
   ZZ_OCENA.CLO:=_clo;
   ZZ_OCENA.CEX:=_cex;
   ZZ_OCENA.CHI:=_chi;
   ZZ_OCENA.AE:={? ZZ_OCENA.LO>0 || ZZ_OCENA.SO/ZZ_OCENA.LO ?}$2;
   ZZ_OCENA.TW:={? ZZ_OCENA.EX>0 || 100*ZZ_OCENA.AE/ZZ_OCENA.EX ?}$2;
   ZZ_OCENA.FT:={? ZZ_OCENA.LO>0 || 100*(ZZ_OCENA.CEX+ZZ_OCENA.CHI)/ZZ_OCENA.LO ?}$2;
   ZZ_OCENA.put()
?}


\za_met_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Kopiuje wartości właściwe dla metody
::   WE: _a - alias tabeli
::  OLD: \za_met_add/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZZ_POM.ZZ_HIST=null
|| exec('init_hist','phr_dane')
?};

_klasa:='@.'+_a.ZZ_DOK().KLASA;
_kod:=_a.ZZ_MET().KOD;
_dok:=_a.ZZ_DOK;

{? _kod='KW'
|| {? _klasa=!ZA_ZEST | _klasa=!ZF_SKL
   || exec('copy_kompk','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
   |? _klasa=!ZA_TEST
   || {? ~exec('copy_kompk','phr_dane',_a.ZA_ZEST().ZZ_DOK,_dok)
      || exec('copy_kompk','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
      ?}
   ?}
|? _kod='SP'
|| {? _klasa=!ZA_ZEST | _klasa=!ZF_SKL
   || exec('copy_komps','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
   |? _klasa=!ZA_TEST
   || {? ~exec('copy_komps','phr_dane',_a.ZA_ZEST().ZZ_DOK,_dok)
      || exec('copy_komps','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
      ?}
   ?}
|? _kod='WB'
|| {? _klasa=!ZA_ZEST | _klasa=!ZF_SKL
   || exec('copy_kompz','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
   |? _klasa=!ZA_TEST
   || {? ~exec('copy_kompz','phr_dane',_a.ZA_ZEST().ZZ_DOK,_dok)
      || exec('copy_kompz','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_dok)
      ?}
   ?}
?}


\za_met_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Wywoływana przy zmianie metody oceny
::   WE: _a - alias tabeli
::  OLD: \za_met_mod/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.ZZ_MET=bfld('ZZ_MET')
|| return()
?};

exec('za_met_add','phr_tab',_a);

{? bfld('ZZ_MET')=exec('met_find','phr_dane','KW')
|| _tab:=ZZ_KOMPK;
   _key:='WARTOSC'

|? bfld('ZZ_MET')=exec('met_find','phr_dane','SP')
|| _tab:=ZZ_KOMPS;
   _key:='WARTOSC'

|? bfld('ZZ_MET')=exec('met_find','phr_dane','WB')
|| _tab:=ZZ_KOMPZ;
   _key:='UNIQUE'

|| return()
?};

_tab.cntx_psh();
_tab.index(_key);
_tab.prefix(ref_name(_a.ZZ_DOK),_a.ZZ_DOK,null);
{? _tab.first() || {! |? _tab.del() !} ?};
_tab.cntx_pop()


\za_typ_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Wyszukuje rekord w tabeli ZA_TYP
::   WE: _a - wskazanie na rekord nadrzedny
::       _b - symbol elementu
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
ZA_TYP.cntx_psh;
ZA_TYP.index('SYMBOL');
ZA_TYP.prefix(_a,_b);
{? ZA_TYP.find_key(_b)
|| _ref:=ZA_TYP.ref
?};
ZA_TYP.cntx_pop;
_ref


\fld2par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Zwraca numer parametru właściwy dla pola zmiennej ZZ_PAR.
::   WE: _a [STRING] - Akronim pola zmiennej ZZ_PAR.
::   WY: Numer parametru lub 0.
::  OLD: \fld_par/zz_setup.fml
::  OLD: \fld2par/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a=''
|| return(0)
?};

:: Ciąg znaków określający relację między akronimami pól zmiennej ZZ_PAR i numerami parametrów.
_par:=spli_str(
   'TRYB:400,TRYB_MOD:419,OGR_RODZ:421,OGR_KOP:422,'
   'TYP:401,TYP_KOMP:402,TYP_PROF:403,'
   'MET_XX:417,MET_OO:418,MET:404,MET_KOMP:405,MET_PROF:406,'
   'WAR:407,'
   'WAR_KOMP:408,WAR_KOMW:409,WAR_KOMN:410,'
   'WAR_KRYT:411,WAR_KRYW:412,WAR_KRYN:413,'
   'WAR_PROF:414,WAR_PROW:415,WAR_PRON:416,'
   'SMILE:427',
   ','
);

_key:=_a+':';
{! _lp:=1 .. obj_len(_par)
|! {? _par[_lp]*_key=1
   || return(#((+_key)-_par[_lp]))
   ?}
!};
0


\init_pars
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Ustawienie formuł dla wolnych pól obsługujących parametryzację działania ocen.
::   WE:
::   WY:
::  OLD: \init_pars/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
_jTerm:=app_info('web_sesid')='';
ZZ_PAR.blank();

{! _fld:=1 .. ZZ_PAR.fld_num()
|! _acr:=ZZ_PAR.fld_acr(_fld);
   {? (_par:=exec('fld2par','phr_tab',_acr))>0
   || {? _jTerm
      || ZZ_PAR.fld_fml(_acr,'BLANK',$('PAR_SKID.get('+$_par+')'))
      || ($('ZZ_PAR.%1:=_a' [_acr]))(PAR_SKID.get(_par))
      ?}
   ?}
!};

{? _jTerm
|| ZZ_PAR.fld_fml('MET_XX','BLANK',
      " _val:=PAR_SKID.get(exec('fld2par','phr_tab','MET_XX'));
         ZZ_POM.MET_XX:=exec('met_find','phr_dane',_val);
         _val
      "
   )
|| ZZ_POM.MET_XX:=exec('met_find','phr_dane',PAR_SKID.get(exec('fld2par','phr_tab','MET_XX')))
?};

{? _jTerm
|| ZZ_PAR.blank()
?};
~~


\init_bufs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Tworzy tabele tymczasowe.
::   WE:
::   WY:
::  OLD: \init_bufs/zz_setup.fml
::  OLD: \zz_komzb/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
exec('__WND','#object');

: wyświetlanie wartości bezpośrednich kompetencji
{? var_pres('ZZ_KOMZB')<>type_of(SYSLOG)
|| ZZ_KOMZB:=tab_tmp(1,
      'NUMER',    'INTEGER',,
      'NAZWA',    'STRING[50]',,
      'REKORD',   'INTEGER',,
      'POLE',     'STRING[8]',,
      'WARTOSC',  'INTEGER',   'Wartość'@
   );
   {! _lp:=1 .. 2
   |! _acr:={? _lp=1 || 'CFG' || 'WEO' ?};
      {? (_wnd:=__WND.SEL.get(ZZ_KOMZB,_acr))=''
      || _wnd:=ZZ_KOMZB.mk_sel('Wartości bezpośrednie'@,'N',0,__WND.id(ZZ_KOMZB,_acr),,,,,'N','N');
         __WND.SEL.put(ZZ_KOMZB,_acr,_wnd);

         ZZ_KOMZB.win_fld(_wnd,,'NAZWA',,,47,,1,'Opis'@);
         ZZ_KOMZB.win_fld(_wnd,,'WARTOSC',,,2,,,'Wartość'@);

         {? _acr='CFG'
         || ZZ_KOMZB.win_act(_wnd,1,'Formuła','Wypełnij'@@,,,
               "  _link:=ZZ_KOMPZ.fld_fml('ZZ_LINK','*BLANK')();
                  _komp:=ZZ_KOMPZ.fld_fml('ZZ_KOMP','*BLANK')();
                  {? type_of(_komp)<>type_of(null())
                  || _komp:=null()
                  ?};
                  {? _link<>null()
                  || {? ~exec('copy_kompz','phr_dane',ZZ_POM.ZZ_HIST().ZZ_DOK,_link,_komp)
                     || _ret:=exec('komp_range','phr_widok');
                        {? _ret.OK
                        || ZZ_KOMPZ.index('UNIQUE');
                           ZZ_KOMPZ.prefix(ref_name(_link),_link,_komp);
                           ZZ_KOMPZ.blank();
                           ZZ_KOMPZ.MIN:=_ret.RANGE.MIN;
                           ZZ_KOMPZ.MAKS:=_ret.RANGE.MAKS;
                           ZZ_KOMPZ.POZIOM:=_ret.RANGE.POZIOM;
                           ZZ_KOMPZ.add()
                        ?}
                     ?};
                     exec('zz_komzb_fill','phr_widok',_link,_komp)
                  ?}
               ",,1,,,,'W'
            );
            ZZ_KOMZB.win_act(_wnd,0,'Popraw',,,,
               "  _acr:='red'+$ZZ_KOMZB.NUMER;
                  {? (_we:=__WND.EDIT.get(ZZ_KOMZB,_acr))=''
                  || _we:=ZZ_KOMZB.mk_edit('Wartość bezpośrednia'@,,_acr);
                     ZZ_KOMZB.win_esep(_we,'Dane podstawowe'@);
                     ZZ_KOMZB.win_efld(_we,,'WARTOSC',,,5,,,ZZ_KOMZB.NAZWA);
                     exec('ok_esc','#window',ZZ_KOMZB,_we,,,,,,,exec('text_red_ok','#window'));
                     ZZ_KOMZB.efld_opt(_we,'mark=1');
                     __WND.EDIT.put(ZZ_KOMZB,_acr,_we)
                  ?};
                  ZZ_KOMZB.win_edit(_we)
               ",,1
            );
            ZZ_KOMZB.win_btn(_wnd,'text=%1' ['Popraw'@],'menu:P');
            ZZ_KOMZB.win_act(_wnd,0,'Formuła','Wyczyść'@@,,,
               "  {? FUN.ask('Czy na pewno usunąć informacje?'@)
                  || ZZ_KOMPZ.cntx_psh();
                     ZZ_KOMPZ.clear();
                     {? ZZ_KOMPZ.seek(ZZ_KOMZB.REKORD,)
                     || ZZ_KOMPZ.del();
                        ZZ_KOMZB.erase()
                     ?};
                     ZZ_KOMPZ.cntx_pop()
                  ?}
               ",,,,,,'W'
            )
         ?};
         ZZ_KOMZB.win_act(_wnd,0,'Rekord',,,,,
            "  {? (_chk:=__CHK.record(ZZ_KOMZB,,'WARTOSC'))<>''
               || return(_chk)
               |? ZZ_KOMZB.WARTOSC<0
               || __CHK.err_fld(ZZ_KOMZB,'WARTOSC',1,'Wartość nie może być ujemna.'@);
                  return('WARTOSC')
               ?};
               ZZ_KOMPZ.cntx_psh();
               ZZ_KOMPZ.clear();
               {? ZZ_KOMPZ.seek(ZZ_KOMZB.REKORD,)
               || ($('ZZ_KOMPZ.'+ZZ_KOMZB.POLE+':=_a'))(ZZ_KOMZB.WARTOSC);
                  {? ZZ_KOMZB.POLE='MIN'
                  || {? ZZ_KOMPZ.POZIOM<ZZ_KOMPZ.MIN
                     || __CHK.err_fld(ZZ_KOMZB,'WARTOSC',1,'Wartość nie może być większa niż \"%1\" (%2).'@
                           ['Wartość oczekiwana'@,$ZZ_KOMPZ.POZIOM]
                        );
                        _chk:='WARTOSC'
                     ?}
                  |? ZZ_KOMZB.POLE='MAKS'
                  || {? ZZ_KOMPZ.MAKS<ZZ_KOMPZ.POZIOM
                     || __CHK.err_fld(ZZ_KOMZB,'WARTOSC',1,'Wartość nie może być mniejsza niż \"%1\" (%2).'@
                           ['Wartość oczekiwana'@,$ZZ_KOMPZ.POZIOM]
                        );
                        _chk:='WARTOSC'
                     ?}
                  |? ZZ_KOMZB.POLE='POZIOM'
                  || {? ZZ_KOMPZ.POZIOM<ZZ_KOMPZ.MIN
                     || __CHK.err_fld(ZZ_KOMZB,'WARTOSC',1,'Wartość nie może być mniejsza niż \"%1\" (%2).'@
                           ['Wartość minimalna'@,$ZZ_KOMPZ.MIN]
                        );
                        _chk:='WARTOSC'
                     |? ZZ_KOMPZ.MAKS<ZZ_KOMPZ.POZIOM
                     || __CHK.err_fld(ZZ_KOMZB,'WARTOSC',1,'Wartość nie może być większa niż \"%1\" (%2).'@
                           ['Wartość maksymalna'@,$ZZ_KOMPZ.MAKS]
                        );
                        _chk:='WARTOSC'
                     ?}
                  ?};
                  {? _chk=''
                  || _chk:=ZZ_KOMPZ.put()
                  ?}
               ?};
               ZZ_KOMPZ.cntx_pop();
               _chk
            "
         );
         ZZ_KOMZB.win_fml(_wnd,,'WARTOSC',,'ICON_BEFORE',"{? ZZ_KOMZB.POLE='POZIOM' || 'xwin16.png:38' || '' ?}")

      ?}
   !};
   exec('lock_columns','phr_widok',ZZ_KOMZB);
::
:: !!! Brak okna redagowania dla tabeli tymczasowej ZZ_KOMZB
::
   ~~
?};

: tablica pomocnicza przy edycji ankiet
{? var_pres('ZA_POM')<100
|| ZA_POM:=obj_new('TYP','MIEJSCE','RODZAJ')
?};

~~


\insert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Tworzy formułę dodajacą zapis do tabeli
::   WE: _a - alias tabeli
::       _b - wykonanie blank: brak - nie wykonywane, liczba - wykonywane _a.blank(_b<>0)
::       _c - akronim pierwszego pola
::       ...
::       _n - akronim n-tego pola
::   WY: formuła, której wynikiem jest wywołanie metody add
::UWAGA: poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \insert/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) || return("0") ?};

_loc:=(!_a='');
_tab:={? _loc || '_a' || !_a ?};
_fml:='{|'+_tab+'|!'+
      '_pfx:=cur_prfx;';
{? var_pres('_b')=type_of(0)
|| _fml+='blank('+$(_b<>0)+');'
?};
{? _<=2
|| {! _ndx:=1.._a.fld_num()
   |! _arg:=$(_ndx+_loc);
      _fml+='{?var_pres(\'_['+_arg+']\')>0'+
            '||'+_a.fld_acr(_ndx)+':=_['+_arg+']'+
            '?};'
   !}
|| {! _arg:=3.._
   |! _ndx:=$(_arg-2+_loc);
      _fml+='{?var_pres(\'_['+_ndx+']\')>0'+
            '||'+_[_arg]+':=_['+_ndx+']'+
            '?};'
   !}
?};
_fml+='_res:=add;'+
      '($("_a.prefix("+_pfx+")"))('+_tab+');'+
      '_res|}';
$_fml


\pba_ocena_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Usunięcie oceny powiązanej z tabelą w obszarze badan opinii.
::   WE: _a - alias tabeli powiazanej z usuwana ocena.
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
ZZ_OCENA.cntx_psh();
_ref:=_a.ZZ_OCENA;
_a.ZZ_OCENA:=null();
{? _a.put()
|| ZZ_OCENA.prefix();
   {? ZZ_OCENA.seek(_ref) & ZZ_OCENA.count()=0
   || _result:=ZZ_OCENA.del(,1)>0
   ?}
?};
ZZ_OCENA.cntx_pop();
_result


\seek_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Ustawia kursor na wskazanym wierszu tabeli ZZ_DOK.
::       Możliwa jest zmiana aktualnie otwartego zbioru.
::       Zdejmowane jest ograniczenie dziedziny.
::   WE: _a [_ZZ_DOK] - wskazanie wiersza tabeli ZZ_DOK
::   WY: 0/1 - nie ustawiono/ustawiono kursor
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_dok:=_a;

_dtp:=type_of(_dok);

{? (_dtp=type_of(null) & _dok<>null) |
   (_dtp=type_of('') & _dok<>'')
:: ewentualna zmiana zbioru
|| _mdb:=ref_name(_dok);
   {? ZZ_DOK.name()<>_mdb
   || ZZ_DOK.use(_mdb);
      ZZ_DOK.prefix()
   ?}

|? (_dtp=type_of(0) & _dtp<>0)
:: kontynuuj
|| 1

|| return(0)
?};

ZZ_DOK.seek(_dok)

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 6c11d60531772393b8923e8a1008f084884e265428deaf6b1e3c422a5e25b77448a89275d9667926c31ca58cd7c33b3be3d6383f260cf6691e04dda3f04fd4561850065a319a8054bd76c0d19fa3c95b20996303d64ff762e989af2eae124572dc8359a5af488ac377c59b554d1db610de6eb0052afa9beb66bb5b03201f48e1
