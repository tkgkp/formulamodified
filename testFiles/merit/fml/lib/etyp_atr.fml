:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: etyp_atr.fml
:: Utworzony: 27.01.2015
:: Autor: TMR
::======================================================================================================================
:: Zawartosc: Formuly do obslugi dodatkowych atrybutow dokumentow w obiegu
::======================================================================================================================

\exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja sprawdza czy istnieje dodatkowy atrybut
::   WE: _a - [OBJECT] - obiekt bufora tabeli ETYP_ATR
::   WY: null lub wskazanie na ETYP_ATR
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')=117 || _a || return(null) ?};

_res:=null();
ETYP_ATR.cntx_psh();
ETYP_ATR.index('TATZ');
ETYP_ATR.prefix(_buffer.ETYPY,_buffer.ZDARZT,_buffer.TAT);
{? ETYP_ATR.first()
|| _res:=ETYP_ATR.ref()
?};
ETYP_ATR.cntx_pop();
_res


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja dodaje dodatkowy atrybut
::   WE: _a   - [OBJECT]  - obiekt bufora tabeli ETYP_ATR
::       [_b] - [OBJECT]  - obiekt komunikatow
::       [_c] - [INTEGER] - wymus dodanie/nadpisanie nowymi wartosciami
::   WY: null lub wskazanie na ETYP_ATR
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')=117        || _a || return(null) ?};
  _KOMM:={? var_pres('_b')>100        || _b || ~~           ?};
 _force:={? var_pres('_c')=type_of(0) || _c || 0            ?};

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

_mydo:=do_state()=0;

_res:=exec('exist','etyp_atr',_buffer);
{? _res=null()
|| ETYP_ATR.prefix();
   ETYP_ATR.blank(1);
   _buffer.set();
   {? ETYP_ATR.add(~_mydo)
   || _buffer.memo_put();
      _res:=ETYP_ATR.ref()
   || {? var_pres('_KOMM')>100
      || _KOMM.add('Nie udało się dodać dodatkowego atrybutu : '+$_buffer.KOL,3,,1)
      ?}
   ?}
|| {? _force
   || _buffer.Ref:=_res;
      exec('put','etyp_atr',_buffer,_KOMM)
   ?}
?};
_res


\put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Funkcja nadpisuje dodatkowy atrybut
::   WE: _a   - [OBJECT] - obiekt bufora tabeli ETYP_ATR
::       [_b] - [OBJECT] - obiekt komunikatow
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')=117 || _a || return(null) ?};
  _KOMM:={? var_pres('_b')>100 || _b || ~~           ?};

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

_mydo:=do_state()=0;

_res:=0;
ETYP_ATR.cntx_psh();
ETYP_ATR.prefix();
{? ETYP_ATR.seek(_buffer.Ref)
|| _buffer.set();
   {? ETYP_ATR.put(~_mydo)
   || _buffer.memo_put();
      _res:=1
   || {? var_pres('_KOMM')>100
      || _KOMM.add('Nie udało się nadpisać dodatkowego atrybutu : '+$_buffer.KOL,3,,1)
      ?}
   ?}
?};
ETYP_ATR.cntx_pop();
_res


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.50]
:: OPIS: Kasuje podany rekord tabeli ETYP_ATR (wykonywane w transakcji!!!)
::   WE: _a - ETYP_ATR.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
ETYP_ATR.cntx_psh(); ETYP_ATR.clear();
{? ETYP_ATR.seek(_ref)
|| {? ETYP_ATR.del(,1)>0
   || _result:=1
   || undo();
      _result:=-3
   ?}
|| _result:=0
?};
ETYP_ATR.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\delete4etypy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41 - Emisja]
:: OPIS: Kasuje podany rekord tabeli ETYP_ATR (wykonywane w transakcji!!!)
::   WE: _a - ETYP_ATR.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_etypy:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

_result:=0;
_can_continue:=1;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

ETYP_ATR.cntx_psh();
ETYP_ATR.index('TATZ');
ETYP_ATR.prefix(_etypy);
{? ETYP_ATR.first()
|| {!
   |? _can_continue:=exec('delete','etyp_atr',ETYP_ATR.ref());
      ETYP_ATR.first() & _can_continue>0
   !}
?};
ETYP_ATR.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result

:Sign Version 2.0 jowisz:1048 2020/10/16 15:22:52 adea84005d9cbf1c717afcdfbc988ded9e7c8aaab440e25040327b824bc8fd85728cce1195ec7884c9bd0b1661ee70d7f548c3fe30af569d387e0c756fb57eb17cb3736d50211fe8bcc01cc25066caf15f135dd619af0e0a307a8f6308ddd1d3ba480f9840a1779e6da8517bf881a77ed210701b512cf0fddd67ef3eb17ea27a
