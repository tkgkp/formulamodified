:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: px_komm.fml [12.30]
:: Utworzony: 2012-01-12
:: Autor: TS
::======================================================================================================================
:: Zawartosc: Obsługa komunikatów do planu
::======================================================================================================================


\select_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja komunikatow dla wersji planu
::----------------------------------------------------------------------------------------------------------------------
PX_KOMM.cntx_psh();
PX_KOMM.index('PX_VER');
PX_KOMM.prefix(PX_VER.ref());
PX_KOMM.win_sel('WER');
PX_KOMM.hdr_sel('Komunikaty dla wersji: %1'@[PX_VER.SYMBOL]);
PX_KOMM.select();
PX_KOMM.cntx_pop();
~~


\select_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja komunikatow dla obiektu
::----------------------------------------------------------------------------------------------------------------------
PX_KOMM.cntx_psh();
PX_KOMM.index('PX_OBJ');
PX_KOMM.prefix(PX_OBJ.ref());
PX_KOMM.win_sel('WER');
PX_KOMM.hdr_sel('Komunikaty dla obiektu: %1'@[PX_OBJ.SYMBOL]);
PX_KOMM.select();
PX_KOMM.cntx_pop();
~~


\select_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja komunikatow dla grupy obiektow
::----------------------------------------------------------------------------------------------------------------------
PX_KOMM.cntx_psh();
PX_KOMM.index('PX_GRP');
PX_KOMM.prefix(PX_GRP.ref());
PX_KOMM.win_sel('WER');
PX_KOMM.hdr_sel('Komunikaty dla grupy: %1'@[PX_GRP.SYMBOL]);
PX_KOMM.select();
PX_KOMM.cntx_pop();
~~


\select_cup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja komunikatów dla pojemnika
::   WE: [_a] - PX_CUP.ref()
::       Kontekst pracy - PX_POZ
::----------------------------------------------------------------------------------------------------------------------
_px_cup:=null();
{? var_pres('_a')=type_of(PX_CUP.ref())
|| _px_cup:=_a
?};

PX_KOMM.cntx_psh();
PX_CUP.cntx_psh();
PX_KOMM.index('PX_CUP');
{? _px_cup<>null()
|| PX_KOMM.prefix(_px_cup)
|| PX_KOMM.prefix(PX_POZ.PX_CUP)
?};
PX_KOMM.win_sel('WER');
_what:='';
{? _px_cup<>null()
|| _what:=exec('FindAndGet','#table',PX_CUP,#_px_cup,ref_name(_px_cup),"SYMBOL",'')
|| _what:=PX_POZ.PX_CUP().SYMBOL
?};
PX_KOMM.hdr_sel('Komunikaty dla pojemnika: %1'@[_what]);
PX_KOMM.select();
PX_CUP.cntx_pop();
PX_KOMM.cntx_pop();
''


\select_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Selekcja komunikatow dla pozycji planu
::       Kontekst pracy - PX_POZ
::----------------------------------------------------------------------------------------------------------------------
PX_CUP.cntx_psh();
PX_OBJ.cntx_psh();
PX_GRP.cntx_psh();
PX_KOMM.cntx_psh();
PX_KOMM.index('PX_POZ');
PX_KOMM.prefix(PX_POZ.ref());
PX_KOMM.win_sel('WER');
_src:='';
{? PX_POZ.PX_GRP<>null()
|| _src:=PX_POZ.PX_GRP().SYMBOL
|? PX_POZ.PX_OBJ<>null()
|| _src:=PX_POZ.PX_OBJ().SYMBOL
|| _src:='<brak źródła>'
?};
PX_KOMM.hdr_sel('Komunikaty dla pozycji planu: %1 na pojemniku: %2'@[_src,PX_POZ.PX_CUP().SYMBOL]);
PX_KOMM.select();
PX_KOMM.cntx_pop();
PX_CUP.cntx_pop();
PX_OBJ.cntx_pop();
PX_GRP.cntx_pop();
~~


\add_komm_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Tablica parametrow dla exec('add_komm','px_komm')
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('MESSAGE',
               'TYP',
               'SRC_KIND',
               'PX_VER',
               'PX_GRP',
               'PX_CUP',
               'PX_OBJ',
               'PX_POZ',
               'FORMULA'
               );
_args.MESSAGE:='';
_args.PX_VER:=null();
_args.PX_GRP:=null();
_args.PX_CUP:=null();
_args.PX_OBJ:=null();
_args.PX_POZ:=null();
_args.FORMULA:='';
_args.TYP:='';
_args.SRC_KIND:='';
_args


\add_komm_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Funkcja sprawdzajaca argumenty przekazane do funkcji exec('add_komm','px_komm')
::   WE: _a - _args  - argumenty funkcji wynik dzialania exec('add_komm_a','px_komm')
::   WY: 1 - jezeli ok, 0 - wpp
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_result:=0;

{? _args.MESSAGE<>''
|| _result:=1
|| _result:=0
?};
{? _args.TYP=exec('type_error','px_komm')
   | _args.TYP=exec('type_warning','px_komm')
   | _args.TYP=exec('type_info','px_komm')
|| _result:=1
|| _result:=0
?};
_result


\add_komm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Dodaje komunikat
::   WE: [_a] - _args  - argumenty funkcji wynik dzialania exec('add_komm_a','px_komm')
::   WY: 0 - komunikatu nie udalo sie dodac
::       1 - komunikat dodany
::----------------------------------------------------------------------------------------------------------------------
_args:={? _=1 || _a || exec('add_komm_a','px_komm') ?};

{? ~exec('add_komm_c','px_komm',_args) || return() ?};

_can_continue:=0;
_result:=0;

PX_KOMM.clear();
PX_KOMM.TYP:=_args.TYP;
PX_KOMM.SRC_KIND:=_args.SRC_KIND;
PX_KOMM.MESSAGE:=_args.MESSAGE;
PX_KOMM.PX_CUP:=_args.PX_CUP;
PX_KOMM.PX_GRP:=_args.PX_GRP;
PX_KOMM.PX_OBJ:=_args.PX_OBJ;
PX_KOMM.PX_VER:=_args.PX_VER;
PX_KOMM.PX_POZ:=_args.PX_POZ;
PX_KOMM.FORMULA:=_args.FORMULA;
PX_KOMM.DATE:=date();
PX_KOMM.TIME:=time();
_can_continue:=PX_KOMM.add();

{? _can_continue>0
|| _can_continue:=exec('update_src','px_komm')
?};

{? _can_continue>0
|| _result:=1
?};
_result


\update_src
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Obsluga po dodaniu komunikatu na zrodlach
::       KONTEKST PRACY - dodany PX_KOMM
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

:: Obsluga pol o informujacych o komunikatach na zrodlach
_kom_err:='N';
_kom_warn:='N';
_kom_info:='N';
{? _can_continue>0
||
   {? PX_KOMM.TYP=exec('type_error','px_komm')
   || _kom_err:='T'
   ?};
   {? PX_KOMM.TYP=exec('type_warning','px_komm')
   || _kom_warn:='T'
   ?};
   {? PX_KOMM.TYP=exec('type_info','px_komm')
   || _kom_info:='T'
   ?};

:: PX_GRP
   PX_GRP.cntx_psh();
   PX_GRP.clear();
   {? PX_KOMM.PX_GRP<>null()
   ||
      PX_KOMM.PX_GRP();
      {? PX_GRP.KOM_ERR='N'
      || PX_GRP.KOM_ERR:=_kom_err
      ?};
      {? PX_GRP.KOM_WARN='N'
      || PX_GRP.KOM_WARN:=_kom_warn
      ?};
      {? PX_GRP.KOM_INFO='N'
      || PX_GRP.KOM_INFO:=_kom_info
      ?};
      _can_continue:=PX_GRP.put()
   ?};
   PX_GRP.cntx_pop();
   PX_GRP.get();

:: PX_CONN
   PX_CONN.cntx_psh();
   PX_CONN.index('VER');
   {? PX_KOMM.PX_OBJ<>null() & PX_KOMM.PX_VER<>null()
   || PX_CONN.prefix(PX_KOMM.PX_VER,PX_KOMM.PX_OBJ);
      {? PX_CONN.first()
      || {!
         |? {? PX_CONN.KOM_ERR='N'
            || PX_CONN.KOM_ERR:=_kom_err
            ?};
            {? PX_CONN.KOM_WARN='N'
            || PX_CONN.KOM_WARN:=_kom_warn
            ?};
            {? PX_CONN.KOM_INFO='N'
            || PX_CONN.KOM_INFO:=_kom_info
            ?};
            _can_continue:=PX_CONN.put();
            PX_CONN.next() & _can_continue>0
         !}
      ?}
   ?};
   PX_CONN.cntx_pop();
   PX_CONN.get();

:: PX_POZ
   PX_POZ.cntx_psh();
   PX_POZ.clear();
   {? PX_KOMM.PX_POZ<>null()
   ||
      PX_KOMM.PX_POZ();
      {? PX_POZ.KOM_ERR='N'
      || PX_POZ.KOM_ERR:=_kom_err
      ?};
      {? PX_POZ.KOM_WARN='N'
      || PX_POZ.KOM_WARN:=_kom_warn
      ?};
      {? PX_POZ.KOM_INFO='N'
      || PX_POZ.KOM_INFO:=_kom_info
      ?};
      _can_continue:=PX_POZ.put()
   ?};
   PX_POZ.cntx_pop();
   PX_POZ.get()
?};
{? _can_continue>0
|| _result:=1
?};
_result


\del_kommy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatow rekordu tabeli
::   WE: _a - tabela, z ktorej usuwane PX_KOMMy (STRING)
::       _b - *.ref() rekordu w tabeli
::       [_c] - STRING - typ komunikatow ktore usuwac
::       [_d] - STRING - rodzaj zrodla ktore wygenerowalo komunikat
::       [_e] - _args - argumenty dla funkcji raportujacej progress
::                      wynik dzialania exec('plan_progress_a','px_logix')
::   WY: 1 - udalo sie usunac wszystkie komunikaty, 0 - wpp
::----------------------------------------------------------------------------------------------------------------------
_act_str:=_a;
_ref:=_b;

_typ:='';
_src_kind:='';

{? var_pres('_c')=type_of('')
|| _typ:=_c
?};

{? var_pres('_d')=type_of('')
|| _src_kind:=_d
?};

_argsprog:=~~;
{? var_pres('_e')>100
|| _argsprog:=_e
?};

_result:=1;

PX_KOMM.cntx_psh();
PX_KOMM.index(_act_str);

:: Zakladanie prefiksow

{? _typ='' & _src_kind=''
|| PX_KOMM.prefix(_ref)
|? _typ<>'' & _src_kind=''
|| PX_KOMM.prefix(_ref,_typ)
|? _typ<>'' & _src_kind<>''
|| PX_KOMM.prefix(_ref,_typ,_src_kind)
?};

{? PX_KOMM.first()
|| {!
   |? _nxt_ref:=null();
      _next:=0;
      PX_KOMM.cntx_psh();
      {? PX_KOMM.next()
      || _nxt_ref:=PX_KOMM.ref()
      ?};
      PX_KOMM.cntx_pop();

      {? exec('del_komm','px_komm',PX_KOMM.ref())=0
      || _result:=0
      ?};

      {? _nxt_ref<>null()
      || {? PX_KOMM.seek(_nxt_ref)
         || _next:=1
         || _next:=0
         ?}
      ?};

::    raportuje progress
      {? type_of(_argsprog)>100
      || exec('plan_progress','px_logix',_argsprog,1)
      ?};
      _next>0
   !}
?};
PX_KOMM.cntx_pop();
_result


\del_komm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatu
::   WE: _a - PX_KOMM.ref()
::   WY: 1 - udalo sie usunac komunikat, 0 - wpp
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=0;
PX_KOMM.cntx_psh();
PX_KOMM.clear();
{? PX_KOMM.seek(_a)
|| _px_grp:=PX_KOMM.PX_GRP;
   _px_obj:=PX_KOMM.PX_OBJ;
   _px_ver:=PX_KOMM.PX_VER;
   _px_poz:=PX_KOMM.PX_POZ;

   PX_KOMU.index('KOMMUR');
   PX_KOMU.prefix(_a);
   {? PX_KOMU.first()
   || {! |? PX_KOMU.del() !}
   ?};
   _can_continue:=PX_KOMM.del(,1);

:: Aktualizacja pol informacyjnych o komunikatach
   {? _px_grp<>null()
   ||
::    PX_GRP
      exec('update_kom_info','px_komm','PX_GRP',_px_grp)
   ?};
   {? _px_obj<>null() & _px_ver<>null()
   ||
::    PX_OBJ
      PX_CONN.cntx_psh();
      PX_CONN.index('VER');
      PX_CONN.prefix(_px_ver,_px_obj);
      {? PX_CONN.first()
      || {!
         |? exec('update_kom_info','px_komm','PX_OBJ',_px_obj,'PX_CONN',PX_CONN.ref());
            PX_CONN.next()
         !}
      ?};
      PX_CONN.cntx_pop()
   ?};
   {? _px_poz<>null()
   || exec('update_kom_info','px_komm','PX_POZ',_px_poz)
   ?}
?};
PX_KOMM.cntx_pop();
_can_continue>0


\del_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatow dla wersji planu
::   WE: _a - PX_VER.ref()
::   WY: 0 / 1 - czy udalo sie usunac wszystkie komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('del_kommy','px_komm','PX_VER',_a)


\del_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatow dla obiektu
::   WE: _a - PX_OBJ.ref()
::   WY: 0 / 1 - czy udalo sie usunac wszystkie komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('del_kommy','px_komm','PX_OBJ',_a)


\del_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatow dla grupy obiektow
::   WE: _a - PX_GRP.ref()
::   WY: 0 / 1 - czy udalo sie usunac wszystkie komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('del_kommy','px_komm','PX_GRP',_a)


\del_cup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuniecie komunikatow dla pojemnika
::   WE: _a - PX_CUP.ref()
::   WY: 0 / 1 - czy udalo sie usunac wszystkie komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('del_kommy','px_komm','PX_CUP',_a)


\del_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Usuniecie komunikatow dla pozycji planu
::   WE: _a - PX_POZ.ref()
::   WY: 0 / 1 - czy udalo sie usunac wszystkie komunikaty
::----------------------------------------------------------------------------------------------------------------------
exec('del_kommy','px_komm','PX_POZ',_a)


\komm_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Akcja usun w oknie PX_KOMM
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć bieżący zapis?'@)
|| exec('del_komm','px_komm',PX_KOMM.ref())
?}


\komm_rkprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed rekord w oknie tabeli PX_KOMM
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PX_KOMM#01#')


\komm_bre
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wlasciwa akcja przed rekord
::----------------------------------------------------------------------------------------------------------------------
{? PX_KOMM.FORMULA<>''
|| PX_KOMM.actions(cur_win(1,1),,'W',1)
|| PX_KOMM.actions(cur_win(1,1),'W','O',1)
?};
PX_KOMU.index('KOMMUR');
PX_KOMU.prefix(PX_KOMM.ref(),OPERATOR.USER);
{? PX_KOMU.first()
|| 'PX_KOMM#01#01'
|| ~~
?}


\komm_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Legenda w oknie PX_KOMM
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PX_KOMM#01#01','#PX_KOMM#01')


\komm_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Oznaczenie komunikatu jako przeczytanego
::----------------------------------------------------------------------------------------------------------------------

PX_KOMU.index('KOMMUR');
PX_KOMU.prefix(PX_KOMM.ref(),OPERATOR.USER);
{? ~PX_KOMU.first()
|| PX_KOMU.PX_KOMM:=PX_KOMM.ref();
   PX_KOMU.USER:=OPERATOR.USER;
   PX_KOMU.DATE:=date();
   PX_KOMU.TIME:=time();
   PX_KOMU.add()
?};
~~


\komm_ok_bg
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Grupa przed akcja OK
::----------------------------------------------------------------------------------------------------------------------
1


\komm_ok_ag
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Grupa przed akcja OK
::----------------------------------------------------------------------------------------------------------------------
~~


\komm_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Uruchomienie formuly przypisanej do komunikatu w rekordzie PX_KOMM
::----------------------------------------------------------------------------------------------------------------------
exec('komm_ok','px_komm');
($PX_KOMM.FORMULA)()


\komm_users
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Lista uzytkownikow, ktorzy przeczytali komunikat
::----------------------------------------------------------------------------------------------------------------------
PX_KOMU.index('KOMMUK');
PX_KOMU.prefix(PX_KOMM.ref());
PX_KOMU.win_sel('WER');
PX_KOMU.select();
~~


\add_test
_args:=exec('add_komm_a','px_komm');
_args.MESSAGE:='to jest komunikat';
_args.PX_VER:=PX_VER.ref();
_args.FORMULA:='msg()';
exec('add_komm','px_komm',_args);
~~


\type_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Typ komunikatu - błąd
::   WY: STRING
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
'BŁĄD'


\type_warning
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Typ komunikatu - ostrzezenie
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'UWAGA'


\type_info
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Typ komunikatu - informacja
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'INFO'


\update_kom_info
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Aktualizuje pola KOM_ERR, KOM_WARN i KOM_INFO rekordu tabeli na podstawie istniejacych
::       komunikatow
::   WE: _a - STRING - akronim tabeli dla ktorej szukac komunikatow
::       _b - ref rekordu dla ktorego szukac komunikatow
::       [_c] - STRING - opcjonalnie - akronim tabeli ktorej rekord aktualizowac (domyslnie _a)
::       [_d] - STRING - opcjonalnie - ref rekordu ktory aktualizowac (domyslnie _b)
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_acr_str:=_a;
_tab4kom:=($_acr_str)();
_ref4kom:=_b;

{? var_pres('_c')=type_of('')
|| _tab4upd:=($_c)()
|| _tab4upd:=_tab4kom
?};
{? var_pres('_d')=type_of(null())
|| _ref4upd:=_d
|| _ref4upd:=_ref4kom
?};

_result:=0;

PX_KOMM.cntx_psh();
PX_KOMM.index(_acr_str);

_kom_err:='N';
_kom_warn:='N';
_kom_info:='N';

:: Sprawdzam czy sa bledy
PX_KOMM.prefix(_ref4kom,exec('type_error','px_komm'));
{? PX_KOMM.size()>0
|| _kom_err:='T'
?};
:: Sprawdzam czy sa ostrzezenia
PX_KOMM.prefix(_ref4kom,exec('type_warning','px_komm'));
{? PX_KOMM.size()>0
|| _kom_warn:='T'
?};
:: Sprawdzam czy sa informacje
PX_KOMM.prefix(_ref4kom,exec('type_info','px_komm'));
{? PX_KOMM.size()>0
|| _kom_info:='T'
?};

_tab4upd.cntx_psh();
{? _tab4upd.seek(_ref4upd)
||
   _tab4upd.KOM_ERR:=_kom_err;
   _tab4upd.KOM_WARN:=_kom_warn;
   _tab4upd.KOM_INFO:=_kom_info;
   _result:=_tab4upd.put()
?};
_tab4upd.cntx_pop();

PX_KOMM.cntx_pop();
_result


\get_kom
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Zwraca pierwszy (najswiezszy) komunikat zwiazany z przekazanym rekordem
::   WE: _a - STRING - akronim tabeli dla ktorej szukac komunikatow
::       _b - ref rekordu dla ktorego szukac komunikatow
::       [_c] - STRING - typ komunikatu
::       [_d] - STRING - rodzaj zrodla ktore wygenerowalo komunikat
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_acr_str:=_a;
_ref:=_b;
_typ:='';
_src_kind:='';

{? var_pres('_c')=type_of('')
|| _typ:=_c
?};

{? var_pres('_d')=type_of('')
|| _src_kind:=_d
?};

_result:=null();

PX_KOMM.cntx_psh();
PX_KOMM.index(_acr_str);

:: Zakladanie prefiksow

{? _typ='' & _src_kind=''
|| PX_KOMM.prefix(_ref)
|? _typ<>'' & _src_kind=''
|| PX_KOMM.prefix(_ref,_typ)
|? _typ<>'' & _src_kind<>''
|| PX_KOMM.prefix(_ref,_typ,_src_kind)
?};
{? PX_KOMM.first()
|| _result:=PX_KOMM.ref()
?};
PX_KOMM.cntx_pop();
_result


\src_tex_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja przepisu planistycznego
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA PRZEPISU'


\src_il_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja przepisu planistycznego
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA ILOŚCI'


\src_zwr_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja zwrotow w kolejce
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA ZWROTÓW'


\src_end_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja granicy czasowej w kolejce
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA PLAN.DO'


\src_con_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja powiazan w kolejce
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA POWIĄZAŃ'


\src_refresh_que
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - cos sie zmienilo w kolejce wiec trzeba przeliczyc plan
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'ZMIANY W KOLEJCE'


\src_act_que
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [21.37]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja kolejki
::   WY: STRING
::  OLD: \src_chk_que/px_komm.fml
::----------------------------------------------------------------------------------------------------------------------
exec('src_act_prefix','px_komm')+'KOLEJKA'


\src_act_obj
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [21.37]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja kolejki
::   WY: STRING
::  OLD: \src_chk_obj/px_komm.fml
::----------------------------------------------------------------------------------------------------------------------
exec('src_act_prefix','px_komm')+'OBIEKT'


\src_plan_prefix
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Prefix dla rodzaju zrodel ktore powstaly podczas planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'PLAN - '


\src_act_prefix
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Prefix dla rodzaju zrodel ktore powstaly podczas planowania za pomocą czynności
::   WY: STRING
::  OLD: \src_chk_prefix/px_komm.fml
::----------------------------------------------------------------------------------------------------------------------
'ACT - '


\src_plan_termL
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' PRZEKR.START'


\src_plan_termR
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' PRZEKR.KONIEC'


\src_plan_half
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' NIEPEŁNY'


\src_plan_coop
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' KONF.KOOP.'


\src_plan_nocup
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' BRAK POJ.'


\src_plan_nozas
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' BRAK ZAS.'


\src_plan_cupter
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' POJ. TERM.'


\src_plan_force
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' PRZEKR. TERM.'


\src_plan_zaz
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' ZAZĘBIENIE'


\src_plan_poioff
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' POIOFFSET'


\src_grop_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA GR.OPER.'


\src_poi_verify
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - weryfikacja punktow czasowych
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'WERYFIKACJA PKT.CZAS'


\src_nadwykon_mv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat -
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
'PRZESUNIĘTE NADWYK.'


\src_plan_nosur
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [23.25]
:: OPIS: Rodzaj zrodla ktore wygenerowalo komunikat - algorytm planowania
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('src_plan_prefix','px_komm')+' BRAK SUR.'


\komm_colorizer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Przed wyswietl pol tabel ktore zawieraja pola KOM_*
::   WE: [_a] - obj_new('CMP','KOM_ERR','KOM_WARN','KOM_INFO')
::   WY: kolor?
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')>100 || _a || cur_tab(1,1) ?};
{? _tab.KOM_ERR='T'
|| Color.fnd_kol('PX_KOMM#01#KOM_ERR')
|? _tab.KOM_WARN='T'
|| Color.fnd_kol('PX_KOMM#01#KOM_WARN')
|? _tab.KOM_INFO='T'
|| Color.fnd_kol('PX_KOMM#01#KOM_INFO')
|| ~~
?}


\komm_2body_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Tworzy tresc tekstowa powiadomienia na podstawie zawartosci PX_KOMM dla PX_VER
::   WE: _a - PX_VER
::----------------------------------------------------------------------------------------------------------------------
_komm:=obj_new('Lp','TXT','add');
_komm.Lp:=0;
_komm.TXT:=tab_tmp(1,'LP','INTEGER','Lp','TXT','STRING[255]','Txt');
_komm.add:=".Lp+=1; .TXT.LP:=.Lp; .TXT.TXT:=_a; .TXT.add()";
PX_KOMM.index('PX_VER');
PX_KOMM.prefix(_a);
{? PX_KOMM.first()
|| _komm.add('Komunikaty z planowania\n\n');
   {!
   |? _komm.add(PX_KOMM.MESSAGE+'\n');
      PX_KOMM.next()
   !}
?};
_komm.TXT


\komm_2html_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Tworzy tresc powiadomienia HTML na podstawie zawartosci PX_KOMM dla PX_VER
::   WE: _a - PX_VER
::----------------------------------------------------------------------------------------------------------------------
_komm:=obj_new('Lp','TXT','add');
_komm.Lp:=0;
_komm.TXT:=tab_tmp(1,'LP','INTEGER','Lp','TXT','STRING[255]','Txt');
_komm.add:=".Lp+=1; .TXT.LP:=.Lp; .TXT.TXT:=_a; .TXT.add()";
PX_KOMM.index('PX_VER');
{? PX_KOMM.first()
|| _komm.add('<h4>Komunikaty z planowania</h4><p>');
   {!
   |? _komm.add(PX_KOMM.MESSAGE+'<br>');
      PX_KOMM.next()
   !};
   _komm.add('</p>')
?};
_komm.TXT


\clone_a
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Tablica parametrow dla clone
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('SOURCE',
               'PX_VER',
               'PX_GRP',
               'PX_OBJ',
               'PX_CUP',
               'PX_POZ'
               );
_args.SOURCE:=null();
_args.PX_VER:=null();
_args.PX_GRP:=null();
_args.PX_OBJ:=null();
_args.PX_CUP:=null();
_args.PX_POZ:=null();
_args


\clone
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [17.00]
:: OPIS: Klonuje rekord komunikatu
::   WE: _a - _args  - argumenty funkcji wynik dzialania exec('clone_a','px_komm')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_args:={? _=1 || _a || exec('clone_a','px_komm') ?};
_result:=0;

PX_KOMM.cntx_psh();
PX_KOMM.clear();
{? PX_KOMM.seek(_args.SOURCE)
||
:: Stoje na rekordzie ktory mam sklonowac

:: Przypisuje kluczowe powiązania
   PX_KOMM.PX_VER:=_args.PX_VER;
   PX_KOMM.PX_CUP:=_args.PX_CUP;
   PX_KOMM.PX_GRP:=_args.PX_GRP;
   PX_KOMM.PX_OBJ:=_args.PX_OBJ;
   PX_KOMM.PX_POZ:=_args.PX_POZ;

:: Tworze nowy rekord
   _result:=PX_KOMM.add();

:: Aktualizacja pol inforumujacych o komunikatach na zrodle
   {? _result>0
   || exec('update_src','px_komm')
   ?}
?};
PX_KOMM.cntx_pop();
_result


\clone_poz
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Klonuje wszystkie komunikaty dla PX_POZ
::   WE: _a - PX_POZ.ref
::       _b - _args  - argumenty funkcji wynik dzialania exec('clone_a','px_komm')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_poz:=_a;

{? var_pres('_b')>100
|| _args:=_b
|| _args:=exec('clone_a','px_komm')
?};

_result:=0;
_can_continue:=1;

PX_POZ.cntx_psh();
PX_POZ.clear();
{? PX_POZ.seek(_px_poz)
||
   PX_KOMM.cntx_psh();
   PX_KOMM.index('PX_POZ');
   PX_KOMM.prefix(PX_POZ.ref());
   {? PX_KOMM.first()
   || {!
      |? _args.SOURCE:=PX_KOMM.ref();
         _args.PX_OBJ:=PX_KOMM.PX_OBJ;
         _can_continue:=exec('clone','px_komm',_args);
         PX_KOMM.next() & _can_continue>0
      !}
   ?};
   PX_KOMM.cntx_pop()
?};
PX_POZ.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\clone_grp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Klonuje komunikaty dla PX_GRP ale nie wiaze ich z PX_POZ ani PX_CUP
::   WE: _a - PX_GRP.ref - zrodlowa grupa
::       [_b] - _args  - argumenty funkcji wynik dzialania exec('clone_a','px_komm')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_grp:=_a;

{? var_pres('_b')>100
|| _args:=_b
|| _args:=exec('clone_a','px_komm')
?};

_result:=0;
_can_continue:=1;

PX_GRP.cntx_psh();
PX_GRP.clear();
{? PX_GRP.seek(_px_grp)
||
   PX_KOMM.cntx_psh();
   PX_KOMM.index('PX_GRP');
   PX_KOMM.prefix(PX_GRP.ref());
   {? PX_KOMM.first()
   || {!
      |? _args.PX_POZ:=null();
         _args.PX_CUP:=null();
         _args.PX_OBJ:=PX_KOMM.PX_OBJ;
         _args.SOURCE:=PX_KOMM.ref();
         _can_continue:=exec('clone','px_komm',_args);
         PX_KOMM.next() & _can_continue>0
      !}
   ?};
   PX_KOMM.cntx_pop()
?};
PX_GRP.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\clone_ver
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Klonuje komunikaty dla PX_VER ale nie dotyczace PX_POZow
::   WE: _a - PX_VER.ref - wersja zrodlowa
::       [_b] - _args  - argumenty funkcji wynik dzialania exec('clone_a','px_komm')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_ver:=_a;

{? var_pres('_b')>100
|| _args:=_b
|| _args:=exec('clone_a','px_komm')
?};

_result:=0;
_can_continue:=1;

PX_GRP.cntx_psh();
PX_GRP.index('UID_SRC');
PX_CUP.cntx_psh();
PX_CUP.index('UID_SRC');
PX_VER.cntx_psh();
PX_VER.clear();
{? PX_VER.seek(_px_ver)
||
   PX_KOMM.cntx_psh();
   PX_KOMM.index('PX_VER');
   PX_KOMM.prefix(PX_VER.ref());
   {? PX_KOMM.first()
   || {!
      |? {? PX_KOMM.PX_POZ=null()
         || _args.PX_OBJ:=PX_KOMM.PX_OBJ;

            {? PX_KOMM.PX_GRP<>null()
            ||
::             Odnajduje PX_GRP w docelowej wersji
               PX_GRP.prefix(_args.PX_VER,PX_KOMM.PX_GRP().UID);
               {? PX_GRP.first()
               || _args.PX_GRP:=PX_GRP.ref()
               ?}
            ?};
            {? PX_KOMM.PX_CUP<>null()
            ||
::             Odnajduje PX_CUP w docelowej wersji
               PX_CUP.prefix(_args.PX_VER,PX_KOMM.PX_CUP().UID);
               {? PX_CUP.first()
               || _args.PX_CUP:=PX_CUP.ref()
               ?}
            ?};
            _args.SOURCE:=PX_KOMM.ref();
            _can_continue:=exec('clone','px_komm',_args)
         ?};

         PX_KOMM.next() & _can_continue>0
      !}
   ?};
   PX_KOMM.cntx_pop()
?};
PX_VER.cntx_pop();
PX_GRP.cntx_pop();
PX_CUP.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\komm4poz_move
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [17.00]
:: OPIS: Przepinam pola PX_GRP i PX_VER dla pozycji planu ktore maja te pola rowniez modyfikowane
::   WE: _a - PX_POZ.ref() - pozycja planu dla ktorej komunikaty modyfikowac
::       _b - PX_GRP.ref() - nowy obiekt grupujacy
::       _c - PX_VER.ref() - nowa wersja
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_poz:=_a;
_px_grp:=_b;
_px_ver:=_c;

_result:=0;
_can_continue:=1;

PX_KOMM.cntx_psh();
PX_KOMM.index('PX_POZ');
PX_KOMM.prefix(_px_poz);
{? PX_KOMM.first()
|| {!
   |? PX_KOMM.PX_GRP:=_px_grp;
      PX_KOMM.PX_VER:=_px_ver;
      _can_continue:=PX_KOMM.put();
      PX_KOMM.next() & _can_continue>0
   !}
?};
PX_KOMM.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\clean4plan
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Usuwa komunikaty dotyczace przeliczania planu dla przekazanej wersji
::   WE: [_a] - PX_VER.ref lub biezacy rekord
::       [_b] - _args - argumenty dla funkcji raportujacej progress
::                      wynik dzialania exec('plan_progress_a','px_logix')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_argsprog:={? _>=2 || _b || ~~ ?};

_result:=0;
_can_continue:=1;

PX_VER.cntx_psh();
{? _ref<>null()
|| PX_VER.clear();
   {? PX_VER.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _src_kom:=exec('src_plan_prefix','px_komm');
   _typ1:=exec('type_error','px_komm');
   _typ2:=exec('type_warning','px_komm');
   _typ3:=exec('type_info','px_komm');
   _can_continue:=exec('del_kommy','px_komm','PX_VER',PX_VER.ref(),_typ1,_src_kom,_argsprog);
   {? _can_continue>0
   || _can_continue:=exec('del_kommy','px_komm','PX_VER',PX_VER.ref(),_typ2,_src_kom,_argsprog)
   ?};
   {? _can_continue>0
   || _can_continue:=exec('del_kommy','px_komm','PX_VER',PX_VER.ref(),_typ3,_src_kom,_argsprog)
   ?};
   _src_kom:=exec('src_act_prefix','px_komm');
   {? _can_continue>0
   || _can_continue:=exec('del_kommy','px_komm','PX_VER',PX_VER.ref(),_typ1,_src_kom,_argsprog)
   ?}
?};
PX_VER.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\clean4plan_size
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Zwraca rozmiar zadania - czyszczenie komunikatow dot. przeliczania dla przekazanej wersji
::   WE: [_a] - PX_VER.ref lub biezacy rekord
::   WY: REAL - liczba komunikatow do usuniecia
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(SYSLOG.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

PX_VER.cntx_psh();
{? _ref<>null()
|| PX_VER.clear();
   {? PX_VER.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| _src_kom:=exec('src_plan_prefix','px_komm');
   _typ1:=exec('type_error','px_komm');
   _typ2:=exec('type_warning','px_komm');
   _typ3:=exec('type_info','px_komm');

   PX_KOMM.index('PX_VER');
   PX_KOMM.prefix(PX_VER.ref(),_typ1,_src_kom);
   _result+=PX_KOMM.size();
   PX_KOMM.prefix(PX_VER.ref(),_typ2,_src_kom);
   _result+=PX_KOMM.size();
   PX_KOMM.prefix(PX_VER.ref(),_typ3,_src_kom);
   _result+=PX_KOMM.size()
?};
PX_VER.cntx_pop();
_result


\display
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja na wyswietl w oknie wertowania tabeli PX_KOMM
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_id:='pxkomm_disp';

_ctr:=exec('create','#desktop',PX_KOMM,_win_id,,30,80,'Podgląd komunikatu planu strategicznego'@);
PX_KOMM.win_ctr(_ctr);
_before:="
            exec('load','#desktop','pxkomm_disp','pxkomm_disp.dsk',,,,,exec('elements_table','px_komm'));
            1";
PX_KOMM.control(_win_id,'modal=true',_before);
~~


\elements_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Zwraca tablicę przetłumaczonych elementów dla kontrolki
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_elements:=exec('elements_table','#desktop');

_elements.blank();
_elements.ID_SYS:='sep_kind@desk_kind';
_elements.NAME:='Rodzaj komunikatu'@;
_elements.add();

_elements.blank();
_elements.ID_SYS:='radio_error@desk_kind';
_elements.NAME:='Błąd'@;
{? PX_KOMM.TYP=exec('type_error','px_komm')
|| _elements.VALUE:='true'
?};
_elements.add();


_elements.blank();
_elements.ID_SYS:='radio_warn@desk_kind';
_elements.NAME:='Uwaga'@;
{? PX_KOMM.TYP=exec('type_warning','px_komm')
|| _elements.VALUE:='true'
?};
_elements.add();

_elements.blank();
_elements.ID_SYS:='radio_info@desk_kind';
_elements.NAME:='Informacja'@;
{? PX_KOMM.TYP=exec('type_info','px_komm')
|| _elements.VALUE:='true'
?};
_elements.add();

_elements.blank();
_elements.ID_SYS:='sep_text@desktop';
_elements.NAME:='Treść'@;
_elements.add();

_elements.blank();
_elements.ID_SYS:='text@desktop';
_elements.VALUE:=PX_KOMM.MESSAGE;
_elements.add();

_debug:=0;

{? _debug>0
|| {? _elements.first()
   || {!
      |?
         _elements.NAME:='1'+_elements.NAME;
         _elements.put();
         _elements.next()
      !}
   ?}
?};
_elements


\delete_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Akcja w oknie - usunięcie rekordu
::   WE: [_a] - INTEGER - 0/[1] - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><DEL>
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};

_result:=0;
_can_continue:=1;

_tab:=cur_tab(1,1);

_group:=0;
{? _tab.sel_size()>0
|| _group:=1;
   _dialog:=0
?};

:: Sprawdzam czy można usunąć
{? _group>0
|| _can_continue:=exec('can_delete','px_komm',,2)
|| _can_continue:=exec('can_delete','px_komm',,1)
?};


{? _dialog>0 & _can_continue>0
|| _can_continue:=FUN.ask('Usunąć komunikat?\n\nTreść komunikatu:\n\'%1\'?'@[PX_KOMM.MESSAGE])
?};
{? _can_continue>0
|| _result:=exec('del_komm','px_komm',_tab.ref())
?};
_result


\delete_act_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli PX_KOMM
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 rekordów. Czy usunąć je wszystkie?'@[$_tab.sel_size()])
|| _result:=1;
   sel_nchk();
   KOMM.init(200,,'Usuwanie komunikatów planu strategicznego'@,'')
?};
_result


\delete_act_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli PX_KOMM
::  TAG: <PRIVATE><AKCJA><GRUPA><DEL>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\can_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Sprawdza możliwość usunięcia rekordu PX_KOMM
::   WE: [_a] - PX_KOMM.ref, jeśli nie podany to aktualny rekord
::       [_b] - INTEGER - czy wyswietlac komunikaty:  0  - nie
::                                                   [1] - wyskakujący komunikat
::                                                    2  - w KOMM
::   WY: 0 - nie można usunąć rekordu
::       1 - można usuwać
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();

_display:=1;
{? var_pres('_b')=type_of(0)
|| _display:=_b
?};

_result:=1;
_can_continue:=1;


PX_KOMM.cntx_psh();
{? var_pres('_a')=type_of(PX_KOMM.ref())
|| _ref:=_a;
   _can_continue:=0;
   PX_KOMM.clear();
   {? PX_KOMM.seek(_ref)
   || _can_continue:=1
   ?}
?};

{? _can_continue>0
|| _result:=1
?};

PX_KOMM.cntx_pop();
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 896cb81473f94ac4fee4683e9bb33c9f468f37c08ce355d982ffa9a24f6a34495b0ae99499f319edaf57c894b30962a10b05f384ddd313fceb8d4918e786ae6b745b26e3ac764c33dc2a3e6da733ce2ec1e92afcfa42440fef6ea36eeeda5995c7f2d423fbc806fe8b6f7fc214f9cf7a86f000d85e5b42a1a083cb25102a2bd7
