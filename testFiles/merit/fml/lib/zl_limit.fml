:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zl_limit.fml
:: Utworzony: 25.06.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa zapotrzebowań do zlecenia - limity, odpady i surowce nielimitowane.
::            Funkcje wspólne z wyłączeniem dedykowanych TYLKO dla odpadów i surowców nielimitowanych
::            Plik biblioteczny - wspólna obsługa dla czynności obszaru roboczego TTE_PZL
::            UWAGA !!! PLIK ZAPEŁNIONY, NIE DODAWAĆ NOWYCH FORMUŁ !!!
::======================================================================================================================


\env_limit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca zmienną środowiskową do obsługi limitów
::   WE: [_a] - opcja okienek 0-z poziomu zakładek, 1-z menu okna
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _opcja:=_a || _opcja:=0 ?};

_env:=obj_new('ZLIMp','used','p8504','ZL');
_env.ZLIMp:=exec('__ZLIMp_prepare','zl_limit');

exec('__ZLIM_prepwin','zl_limit',_env.ZLIMp,,_opcja);
_env.used:=0;
_env.p8504:=exec('get','#params',8504,2,OPERATOR.USER);
_env.ZL:=null();

_env


\sur_nlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RS [7.53]
:: OPIS: surowce nielimitowane do zlecenia
::   WE: [_a] - 0 - z poziomu zakładek, 1 - z poziomu menu (domyślnie)
::        _b - ZL.ref()
::       [_c] - ZGH.ref()
::       [_d] - ZGP.ref()
::       [_e] - INTEGER - [0] redakcja / 1 - tylko podgląd
::       [_f] - GROP.ref()
::   WY: wynik .select()
::  OLD: \sur_nlim/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
  _opcja:={? var_pres('_a')=type_of(0)          || _a || 1        ?};
     _zl:={? var_pres('_b')=type_of(ZL.ref())   || _b || return() ?};
_zgh_ref:={? var_pres('_c')=type_of(ZGH.ref())  || _c || null()   ?};
_zgp_ref:={? var_pres('_d')=type_of(ZGP.ref())  || _d || null()   ?};
   _view:={? var_pres('_e')=type_of(0)          || _e || 0        ?};
   _grop:={? var_pres('_f')=type_of(GROP.ref()) || _f || null()   ?};

_res:=0;

VAR.A_ZLEC:=_zl;
VAR.A_GROP:=_grop;

_env:=obj_new('env_limit');
_env_limit:=exec('env_limit','zl_limit',_opcja);
_env.env_limit:=_env_limit;
_env.env_limit.used:=_view;
params_set('env',_env);

_env_limit.ZLIMp.ZL:=_zl;
_env_limit.ZLIMp.ZGH:=_zgh_ref;
_env_limit.ZLIMp.ZGP:=_zgp_ref;
_env_limit.ZLIMp.GROP:=_grop;

VAR.A_NRZLP:=null();
VAR.A_ZGP:=null();

{? VAR.A_ZLEC<>null() & VAR.A_ZLEC().OPIS='' || return() ?};

{? VAR.A_ZLEC<>null()
|| {? ZL.STAT_T='N'
    & ZL.TYP().WP='P'
    & ( ZL.NRNZL<>0
      | ( ZL.RODZAJ='P'
        & ZL.NRNZL=0
        )
      )
    & ZL.TYP().TECH='T'
   || FUN.emsg('Niezatwierdzona technologia zlecenia, nie można redagować surowców nielimitowanych.'@);
      return()
   ?}
?};

exec('openmask','zl_common',VAR.A_ZLEC,VAR.A_GROP);
{? VAR.A_ZLEC().RTKTL<>''
|| VAR.A_KTL:=exec('FindAndGet','#table',TKTL,VAR.A_ZLEC().RTKTL,,"ref()",null())
|| VAR.A_KTL:=exec('FindAndGet','#table',TKTL,VAR.A_ZLEC().RKTL,,"ref()",null())
?};
exec('s_nlim','zl_common');
ST.cntx_psh();
ZLIM.cntx_psh();

exec('nlim_all_load','zl_nlimit',_zl,_zgh_ref,_zgp_ref,_grop);

_wer:='WERNL';
_red:='RED_NLI';

VAR.P_NKTM:='';
_hid:=':';
_default:='B:G';
_sufix:='';

{? _view || _sufix:=' — '+'PODGLĄD'@ ?};

:: Podczytanie danych grupy operacji albo przewodnika i jego pozycji - do wyświetlenia w tytule okna
{? VAR.A_GROP<>null()
|| _head:=' — '+'grupa operacji %1'@[VAR.A_GROP().KOD]
|| _head:=' — '+'zlecenie %1'@[VAR.A_ZLEC().SYM];
   ZGH.cntx_psh(); ZGP.cntx_psh();
   ZGH.clear(); ZGP.clear();
   {? _zgh_ref<>null()
   || {? ZGH.seek(_zgh_ref)
      || _head:=' — '+'przewodnik %1'@[ZGH.NRPRZ];
         {? VAR.A_ZLEC().RODZAJ='P' || VAR.A_NRZLP:=ZGH.ref() ?}
      ?}
   ?};
   {? _zgp_ref<>null()
   || {? ZGP.seek(_zgp_ref)
      || _head:=' — '+'przewodnik %1 poz. %2'@[ZGP.NRZLP().NRPRZ,$ZGP.NRP];
         VAR.A_ZGP:=ZGP.ref();
         VAR.A_NRZLP:=ZGP.NRZLP
      ?}
   ?};
   ZGH.cntx_pop(); ZGP.cntx_pop()
?};

ZLIM.win_fml(_wer,,'KTM','KTM','ICON_BEFORE',"exec('icon_zam','zl_nlimit')");
ZLIM.win_sel(_wer);
ZLIM.win_edit(_red);
ZLIM.hdr_sel();
ZLIM.hdr_sel(_head+_sufix);
{? _opcja=1
|| _grp:=ZLIM.grp_make('Surowce nielimitowane'@+_head+_sufix,,'#_nlimit_grp',,,,,'html_maximized');
   _after_refresh:="params_exec('__NLIM_actions','zl_nlimit')";
   ZLIM.grp_sel(_grp,,_wer,,_after_refresh,,,,,,,,'maximized');
   ZLIM.win_sel(_grp);
   _res:=ZLIM.select();
   ZLIM.f_clear()
?};
ZLIM.cntx_pop();
ST.cntx_pop();

:: Oznaczenie zlecenia jako 'Ulepszenie'
{? _zl<>null() & _view=0
|| _formula:="
      _improve:=ZL.IMPROVE;
      {? exec('is_improvement','zl_head',ZL.ref())
      || ZL.IMPROVE:='T'
      || ZL.IMPROVE:='N'
      ?};
      {? _improve<>ZL.IMPROVE || ZL.put() ?}
   ";
   exec('FindAndGet','#table',ZL,VAR.A_ZLEC,,_formula,~~)
?};

VAR.A_NRZLP:=null();
VAR.A_ZGP:=null();
_res


\kart_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Selekcja limitów zlecenia
::   WE: [_a] - podgląd (1), domyślnie pełne możliwości redakcyjne (0), zwraca tabelę wynikową bez selekcji (9)
::       [_b] - zlecenie, dla którego chcemy wyświetlić listę ZL.ref()
::       [_c] - co wyświetlamy? [T]-limity, N-nielimity, ''-wszystko
::       [_d] - ZGH.ref() / null()
::       [_e] - ZGP.ref() / ~~ / null() (dla ~~ zwrócony zostanie pusty wynik - do użycia gdy _a=9)
::       [_f] - Warsztatowe/Produkcyjne
::       [_g] - surowce według rozpiski z tabeli REJ_MAT T/[N]
::       [_h] - środowisko env_limit, jak przekazany to ładuje do niego dane
::       [_i] - GROP.ref() / null()
::  WY: wynik .select() [dla _a=0, _a=1] albo _ZLIM [dla _a=9]
::----------------------------------------------------------------------------------------------------------------------
   _view:={? var_pres('_a')=type_of(0)          || _a || 0 ?};
   _zlec:={? var_pres('_b')=type_of(ZL.ref())   || _b || ZL.ref() ?};
  _Limit:={? var_pres('_c')=type_of('')         || _c || 'T' ?}; {? _Limit='' || _Limit:='TN' ?};
_zgh_ref:={? var_pres('_d')=type_of(ZGH.ref())  || _d || null() ?};
_zgp_ref:={? var_pres('_e')=type_of(ZGP.ref()) | var_pres('_e')=type_of(~~) || _e || null() ?};
     _wp:={? var_pres('_f')=type_of('')         || _f || 'P' ?};
_rej_mat:={? var_pres('_g')=type_of('')         || _g || 'N' ?};
_env_lim:={? var_pres('_h')>100                 || _h || ~~ ?};
   _grop:={? var_pres('_i')=type_of(GROP.ref()) || _i || null() ?};
_res:=0;

_env:=obj_new('env_limit','ZL','GROP');
_env_limit:={? type_of(_env_lim)<>0 || _env_lim || exec('env_limit','zl_limit',1) ?};
_env_limit.ZLIMp.WP:=_wp;
_env.env_limit:=_env_limit;
_env.env_limit.used:=_view;
_env.ZL:=_zlec;
_env.GROP:=_grop;
params_set('env',_env);

{? _grop=null()
|| set_help(exec('set_help','#help','TTE_PZL_DLIM'))
|| set_help(exec('set_help','#help','TPP_GOP_DLIM'))
?};

ZL.cntx_psh(); ZL.clear();
ZK_P.cntx_psh();
ZK_N.cntx_psh();
ZGH.cntx_psh(); ZGH.clear();
ZGP.cntx_psh(); ZGP.clear();
GROP.cntx_psh(); GROP.clear();

ZLIM.clear();

{? _zlec<>null() & _zgh_ref=null() & _zgp_ref=null() || VAR.A_NRZLP:=null() ?};

:: Ustawiamy sie na aktualne zlecenie podane w parametrze
{? _zlec<>null() & ZL.seek(_zlec)
|| _ok:=1;
:: TODO:
::   ZMask.set(ZL.ZMASK);

   _rodzaj:=ZL.RODZAJ;
   _genlim:=ZL.GENLIM;
   _unrzl:=ZL.UNRZL;

:: sprawdzamy jaki jest stan zlecenia, by ewentualnie otworzyc odpowiednio maski zamowien archiwalnych
::   _maskend:=ZK_N.name()+2;
::   _masknew:=form(ZL.AR)+2;

::   {? ZL.STAN='Z'
::   || ZK_N.use((ZK_N.name()-2)+_masknew);
::      ZK_P.use((ZK_P.name()-2)+_masknew);
::      _view:=1
::   ?};

   {? _ok
    & _view
    & ZL.MASKA='____'
   || FUN.emsg('Nie można wejść na limity nowo utworzonego zlecenia\nredagowanego przez innego użytkownika.'@);
      _ok:=0
   ?};

   {? _ok
    & _rodzaj='N'
   || ZL.cntx_psh();
      ZL.index('NRNZL');
      ZL.prefix(_unrzl);
      {? ~ZL.first()
      || FUN.emsg('Brak zleceń podrzędnych, nie można redagować limitów.'@);
         _ok:=0
      ?};
      ZL.cntx_pop()
   ?};

   {? _ok
    & ZL.STAT_T='N'
    & ZL.TYP().WP='P'
    & ( ZL.NRNZL<>0
      | ( ZL.RODZAJ='P'
        & ZL.NRNZL=0
        )
      )
    & ZL.TYP().TECH='T'
   || FUN.emsg('Niezatwierdzona technologia zlecenia, nie można redagować limitów.'@);
      _ok:=0
   ?};

   {? _ok
   ||
      exec('openmask','zl_common',VAR.A_ZLEC,VAR.A_GROP);

::      {? var_pres('__ZLIMp')>100 || _ZLIMp_buf:=__ZLIMp || _ZLIMp_buf:=~~ ?};
::      VAR_DEL.delete('__ZLIMp');
::      _ZLIMp:=exec('__ZLIMp_prepare','zl_limit');
      _ZLIMp:=_env_limit.ZLIMp;
::      __ZLIMp:=_ZLIMp;

      _ZLIMp.ZL:=ZL.ref();
      _ZLIMp.ZGH:=_zgh_ref;
      _ZLIMp.ZGP:=_zgp_ref;
      _ZLIMp.View:=_view;
      _ZLIMp.Limit:=_Limit;
      _ZLIMp.REJ_MAT:=_rej_mat;
:: TODO:
      _ZLIMp.A_edit:='T';
::      _ZLIMp.A_edit:={? ZMask.KARLIM='1' | ZL.STAN='O' || 'T' || 'N' ?};

      {? _ZLIMp.ZGP<>~~
      || exec('__ZLIM_datapump','zl_limit',_ZLIMp)
      ?};
::      exec('__ZLIM_prepwin' ,'zl_limit',_ZLIMp);

      _ZLIM:=_ZLIMp.ZLIM;

      _GRP:={? _wp='P' || _ZLIMp.GRPP || _ZLIMp.GRPW ?};
::    Tytul okna ustwiany w tym miejscu a nie w exec('__ZLIM_prepwin','zl_limit') ze wzgledu na zakladki
      _ZLIMp.ZLIM.win_sel(_GRP);
      _ZLIM.hdr_sel();

      {? _ZLIMp.ZGP=~~
      || ~~
      |? _ZLIMp.ZGP<>null()
      || {? ZGP.seek(_ZLIMp.ZGP)
         || _ZLIM.hdr_sel(
               ' — '+'przewodnik %1 poz. %2'@[ZGP.NRZLP().NRPRZ,$ZGP.NRP]+
               ' (zlecenie '+(-exec('GetZL_STAN_txt','zl_common',ZL.STAN))+')'+
               {? _view || ' — PODGLĄD' || '' ?}
            )
         ?}
      |? _ZLIMp.ZGH<>null()
      || {? ZGH.seek(_ZLIMp.ZGH)
         || _ZLIM.hdr_sel(
               ' — '+'przewodnik %1'@[ZGH.NRPRZ]+
               ' (zlecenie '+(-exec('GetZL_STAN_txt','zl_common',ZL.STAN))+')'+
               {? _view || ' — '+'PODGLĄD'@ || '' ?}
            )
         ?}
      || _ZLIM.hdr_sel(
            ' — '+'zlecenie %1'@[ZL.SYM]+' '+
            (-exec('GetZL_STAN_txt','zl_common',ZL.STAN))+
            {? _view || ' — '+'PODGLĄD'@ || '' ?}
         )
      ?};

      {? _view=9
      || _res:=_ZLIMp.ZLIM
      || _res:=_ZLIMp.ZLIM.select()
      ?};

::      VAR_DEL.delete('__ZLIMp');
::      __ZLIMp:=_ZLIMp_buf;
      ~~
   ?};
::   {? (ZK_N.name()+2)<>_maskend
::   || ZK_N.use((ZK_N.name()-2)+_maskend);
::      ZK_P.use((ZK_P.name()-2)+_maskend);
::      1
::   ?}
   ~~

:: Ustawiamy się na grupę operacji podaną w parametrze
|? _grop<>null() & GROP.seek(_grop)
|| _ok:=1;

:: Ograniczenia dostępu do funkcji
:: {? ... || FUN.emsg(); _ok:=0 ?};

   {? _ok
   ||
      exec('openmask','zl_common',VAR.A_ZLEC,VAR.A_GROP);

      _ZLIMp:=_env_limit.ZLIMp;

      _ZLIMp.ZL:=null();
      _ZLIMp.ZGH:=null();
      _ZLIMp.ZGP:=null();
      _ZLIMp.GROP:=_grop;
      _ZLIMp.View:=_view;
      _ZLIMp.Limit:=_Limit;
      _ZLIMp.REJ_MAT:=_rej_mat;
      _ZLIMp.A_edit:='T';

      {? _ZLIMp.ZGP<>~~; 1
      || exec('__ZLIM_datapump','zl_limit',_ZLIMp)
      ?};

      _ZLIM:=_ZLIMp.ZLIM;

      _GRP:=_ZLIMp.GRPW;
::    Tytul okna ustwiany w tym miejscu a nie w exec('__ZLIM_prepwin','zl_limit') ze wzgledu na zakladki
      _ZLIMp.ZLIM.win_sel(_GRP);
      _ZLIM.hdr_sel();

      {? _view=9
      || _res:=_ZLIMp.ZLIM
      || _res:=_ZLIMp.ZLIM.select()
      ?};
      ~~
   ?};
   ~~
?};

:: Oznaczenie zlecenia jako 'Ulepszenie'
{? _view=0 & _zlec<>null() & _wp='P'
|| _formula:="
      _improve:=ZL.IMPROVE;
      {? exec('is_improvement','zl_head',ZL.ref())
      || ZL.IMPROVE:='T'
      || ZL.IMPROVE:='N'
      ?};
      {? _improve<>ZL.IMPROVE || ZL.put() ?}
   ";
   exec('FindAndGet','#table',ZL,_env.ZL,,_formula,~~)
?};

ZL.cntx_pop();
ZK_P.cntx_pop();
ZK_N.cntx_pop();
ZGH.cntx_pop();
ZGP.cntx_pop();
GROP.cntx_pop();
_res


\__ZLIMp_prepare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Generuje tabelę pomocniczą, która służy do podglądu limitów
::   WY: _tab - wskaźnik na tabelę pomocniczą
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(3
             ,'PARENT'  ,'TREE_REF'   ,'Zapis nadrzędny'
             ,'KTM'     ,'STRING[50]' ,'Kod materiału/zlecenie'
             ,'NR'      ,'INTEGER'    ,'Numer kolejny'
             ,'M_REF'   ,'INTEGER'    ,'#M.ref()'
             ,'N'       ,'STRING[100]','Nazwa materiału'
             ,'J'       ,'STRING[10]' ,'Jednostka miary'
             ,'LIL'     ,'REAL'       ,'Ilość limitowana'
             ,'ALIL'    ,'REAL'       ,'Po korektach'
             ,'PFAZ'    ,'STRING[10]' ,'Faza produkcji'
             ,'SO'      ,'STRING[1]'  ,'Odpad/Surowiec'
             ,'M_R'     ,'STRING[1]'  ,'Rodzaj surowca'
             ,'AKC'     ,'STRING[1]'  ,'Akceptacja'
             ,'REF'     ,'STRING[16]' ,'$ZLIM.ref()'
             ,'REF_NR'  ,'INTEGER'    ,'#ZLIM.ref()'
             ,'KOR'     ,'INTEGER'    ,'Zapis korygowany'
             ,'AUTO'    ,'STRING[1]'  ,'Zapis automatyczny'
             ,'ZLEC'    ,'STRING[20]' ,'Symbol zlecenia'
             ,'ZL_REF'  ,'INTEGER'    ,'#ZL.ref() zlecenia'
             ,'ZLECDOD' ,'STRING[20]' ,'Dodatkowe zlecenie'
             ,'ZLD_REF' ,'INTEGER'    ,'#ZL.ref() zlecenia dodatkowego'
             ,'WYD'     ,'STRING[8]'  ,'Wydział'
             ,'WYD_REF' ,'INTEGER'    ,'#SLO.ref()'
             ,'PARTIA'  ,'STRING[1]'  ,'Czy partiowany?'
             ,'DT'      ,'DATE'       ,'Data akceptacji'
             ,'AKCU'    ,'STRING[30]' ,'Kto akceptował?'
             ,'S'       ,'REAL'       ,'S - stan'
             ,'SD'      ,'REAL'       ,'SD - stan dostępny'
             ,'SRT'     ,'REAL'       ,'SRT - rezerwacje tymczasowe'
             ,'SRR'     ,'REAL'       ,'SRR - rezerwacje do zamówień'
             ,'SSZ'     ,'REAL'       ,'SSZ - zamówienia'
             ,'WDR'     ,'REAL'       ,'WDR - w drodze'
             ,'ZLIM_POB','REAL'       ,'Pobrano'
             ,'ZK_P_ZRE','REAL'       ,'Zrealizowano'
             ,'SR'      ,'REAL'       ,'Zarezerwowano'
             ,'SRC'     ,'REAL'       ,'Rezerwacje oczekujace'
             ,'ZM'      ,'STRING[1]'  ,'Znacznik: [Z]lecenie czy [M]ateriał'
             ,'X_KIND'  ,'STRING[1]'  ,'Rodzaj rekordu'
             ,'LIMIT'   ,'STRING[1]'  ,'Limit?'
             ,'ZK_P_NAM','STRING[10]' ,'ZK_P.name()'
             ,'ZK_P_REF','INTEGER'    ,'#ZK_P.ref()'
             ,'ZK_P_QRF','STRING[16]' ,'$ZK_P.ref()'
             ,'MAG'     ,'STRING[8]'  ,'Magazyn'
             ,'MAG_REF' ,'INTEGER'    ,'#MG.ref()'
             ,'STARTD'  ,'DATE'       ,'Data zapotrzebowania'
             ,'STARTT'  ,'TIME'       ,'Godzina zapotrzebowania'
             ,'NRPRZ'   ,'STRING[20]' ,'Numer przewodnika'
             ,'ZGH_REF' ,'INTEGER'    ,'#ZGH.ref()'
             ,'NRP'     ,'INTEGER'    ,'Numer pozycji przewodnika'
             ,'ZGP_REF' ,'INTEGER'    ,'#ZGP.ref()'
             ,'X_COLOR' ,'STRING[20]' ,'Kolor'
             ,'X_ICON'  ,'STRING[30]' ,'Ikona'
             ,'PREF'    ,'INTEGER'    ,'#__zlim.ref()'
             ,'CRC'     ,'INTEGER'    ,'ZLIM.crc()'
             ,'OLD'     ,'STRING[1]'  ,'ZLIM.OLD'
             ,'RW_ZW'   ,'STRING[1]'  ,'Są pobrania zwroty'
             ,'ZKP_REA' ,'STRING[1]'  ,'Są realizacje zam. wew.'
             ,'ZKP_ZL'  ,'STRING[1]'  ,'Są zlec. do zam. wew.'
             ,'RTMAT'   ,'STRING[16]' ,'$TMAT.ref()'
             ,'ROZ'     ,'STRING[1]'  ,'Rozliczany z operacją'
             ,'IL'      ,'REAL'       ,'Ilość do rozliczenia (tylko gdy ROZ=T)'
             ,'ZPARN'   ,'STRING[16]' ,'$ZPARN.ref'
             ,'PARSYM'  ,'STRING[25]' ,'Symbol partii'
             ,'ZL4MAG'  ,'STRING[20]' ,'Zlecenie półfabr.'
             ,'TMAT_MAG','STRING[1]'  ,'Półfabr. z magazynu?'
             ,'RSC'     ,'STRING[16]' ,'Ref dostawy ($SC.ref)'
             ,'SCEAN'   ,'STRING[30]' ,'Kod identyfikujący dostawę'
             ,'EANL'    ,'STRING[16]' ,'Lokalizacja ($EANL.ref)'
             ,'REJ_MAT' ,'STRING[1]'  ,'Czy pozycja utworzona na podstawie rozpiski REJ_MAT'
             ,'CZY_REZ' ,'INTEGER'    ,'Czy pozycja posiada dedykowane rezerwacje (nielimity)'
             ,'GROP_REF','INTEGER'    ,'#GROP.ref() grupy operacji'
             ,'KODPAL'  ,'STRING[30]' ,'Kod palety'
             );

:: użytkownik specjalny może dołączać kolumny, bo może chce wiedzieć co tam jest.
{? sec_superuser()>0 || _tab.fld_attr(,2) ?};

_tab.fld_attr('PARTIA',3);
_tab.fld_attr('S',3);
_tab.fld_attr('SD',3);
_tab.fld_attr('SRT',3);
_tab.fld_attr('SRR',3);
_tab.fld_attr('SSZ',3);
_tab.fld_attr('WDR',3);
_tab.fld_attr('DT',3);
_tab.fld_attr('AKCU',3);
_tab.fld_attr('ZLECDOD',3);
_tab.fld_attr('MAG',3);
_tab.fld_attr('PFAZ',3);
_tab.fld_attr('STARTD',3);
_tab.fld_attr('STARTT',3);
_tab.fld_attr('ZL4MAG',3);

::@@@@@tmp
_tab.fld_attr('X_ICON',3);
_tab.fld_attr('X_KIND',3);
_tab.fld_attr('SO',3);
_tab.fld_attr('M_R',3);
_tab.fld_attr('ZM',3);
::@@@@@tmp

:: jak zera w kolumnach, to czyścimy, żeby ładniej wyglądało
_tab.fld_fml('LIL',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('ALIL',    'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('S',       'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SD',      'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SRT',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SRR',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SSZ',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('WDR',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('ZLIM_POB','DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('ZK_P_ZRE','DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SR',      'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('SRC',     'DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");

_tab.fld_fml('STARTD',  'DISPLAY_FORMAT',"{? fld()=date(0,0,0) || 'empty=1' || 'empty=0' ?}");
_tab.fld_fml('STARTT',  'DISPLAY_FORMAT',"{? cur_tab(1,1).STARTD=date(0,0,0) || 'empty=1' || 'empty=0' ?}");

:: kolorowanie pól
_tab.fld_fml('STARTD',  'BEFORE_DISPLAY',"exec('zlim_fld_bd','zl_limit')");
_tab.fld_fml('STARTT',  'BEFORE_DISPLAY',"exec('zlim_fld_bd','zl_limit')");

:: teraz tablica pomocnicza (docelowo zastapi __ZLIM, bedzie __ZLIMp.ZLIM
:: dawniej: _tabp:=obj_new(15);
_tabp:=obj_new(
   'ZLIM','ZL','View','actE','actN',
   'hidE','hidN','WERP','WERW','F_poz','F_del',
   'defE','defN','Limit','A_edit','F_root',
   'ZGH','ZGP','GRPP','GRPW','WP','REJ_MAT','GROP'
);

:: [1] Wskazanie na tabele tymczasowa __ZLIM
_tabp.ZLIM:=_tab;

:: [2] ref zlecenia, z ktorego spogladamy na limity (ZL.ref())
_tabp.ZL:=null();

:: [3] tylko podglad? 1/0
_tabp.View:=0;

:: [4] dolaczone akcje dla pustej dziedziny
_tabp.actE:='';

:: [5] dolaczone akcje dla niepustej dziedziny
_tabp.actN:='';

:: np. gdy tylko widok, akceptacja i inne beda niedostepne (zamiast __zlim_hid)
:: [6] domyslnie wylaczone akcje dla pustej dziedziny
_tabp.hidE:='';

:: [7] domyslnie wylaczone akcje niepuste
_tabp.hidN:='';

:: [8a] zeby nie szukac, to akronim okienka prostego (wstawiane do okna grupowego albo zakładek) dla produkcyjnych
_tabp.WERP:='';

:: [8a] zeby nie szukac, to akronim okienka prostego (wstawiane do okna grupowego albo zakładek) dla warsztatowych
_tabp.WERW:='';

:: [9] FORMULA okreslajaca pozycje (np. przy usuwaniu)
_tabp.F_poz:="'('+ZLIM.KTM().KTM+') '+ZLIM.KTM().N";

:: [10] FORMULA do usuniecia pozycji z potomnymi
_tabp.F_del:="
   _tab:=.ZLIM;
   _tab_del:=.F_del;
   _tab_ref:=#_tab.ref();
   _tab.cntx_psh();
   _tab.clear();
   _tab.prefix(_tab_ref);
   {? _tab.first()
   || {!
      |? _tab_del();
         _tab.first()
      !}
   ?};
   _tab.cntx_pop();
   _ref:=_tab.PARENT;
   _kor:=_tab.KOR;
   {? _tab.del(,1)
   ||
      _tab.cntx_psh();
      _tab.clear();
      {? _tab.seek(_ref,)
      || _ref:=#_tab.ref();
         _tab.cntx_psh();
         _tab.prefix(_ref);
         _ok:=~_tab.first() & _tab.PARENT=0 & _kor=0;
         _tab.cntx_pop();
         {? _ok || _tab.del() ?}
      ?};
      _tab.cntx_pop();
      ~~
   ?};
   ~~
";

:: [11] dostepne domyslne akcje okienka dla pustej dziedziny - kolejnosc MA znaczenie
_tabp.defE:='';

:: [12] dostepne domyslne akcje okienka dla niepustej dziedziny - kolejnosc MA znaczenie
_tabp.defN:='';

:: [13] Limity, NieLimity, Wszystko?
_tabp.Limit:='T';

:: [14] Dostepne akcje redakcyjne (Dołącz Popraw Usuń kOrekta Akceptuj wYcofaj
_tabp.A_edit:='N';

:: [15] Formula na dodanie korzenia do _tabp[1]
_tabp.F_root:="0";

:: [16] ref przewodnika, z ktorego spogladamy na limity (ZGH.ref())
_tabp.ZGH:=null();

:: [17] ref pozycji przewodnika, z ktorej spogladamy na limity (ZGP.ref())
_tabp.ZGP:=null();

:: [18a] żeby nie szukać, to akronim okienka grupowego dla produkcyjnych
_tabp.GRPP:='';

:: [18b] żeby nie szukać, to akronim okienka grupowego dla warsztatowych
_tabp.GRPW:='';

:: [19] żeby nie szukać, to czy widok zleceń produkcyjnych, czy warsztatowych
_tabp.WP:='P';

:: [20] Uwzględniać rozpiskę rozliczeń surowców do operacji (tabela REJ_MAT)
_tabp.REJ_MAT:='N';

:: [21] ref grupy operacji, z ktorej spogladamy na limity (GROP.ref())
_tabp.GROP:=null();

:: a teraz przekazujemy wynik
_tabp


\__ZLIM_datapump
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Pompka danych ze ZLIM do _tab
::   WE: [_a] - obiekt pomocniczy domyślnie brany __ZLIMp
::       [_b] - formuła wykonywana przed ZLIM.first() - wykorzystywane np. w zmat_lim/zl_limit.fml do zmiany dziedziny
::              dodawanych pozycji limitów do surowców.
::----------------------------------------------------------------------------------------------------------------------
_ZLIMp:={? _>0 & type_of(_a)>100 || _a || {? var_pres('__ZLIMp')>100 || __ZLIMp || 'error' ?} ?};
_ZLIMprfx:={? _>1 & type_of(_b)=type_of("") || _b || "" ?};

{? type_of(_ZLIMp)>100
|| _tab:=_ZLIMp.ZLIM;
   _zlec:=_ZLIMp.ZL;
   _grop:=_ZLIMp.GROP;

   _tab.prefix(0);
   {? _tab.first() || {! |? exec('del_tree_branch','#tree',_tab,'PARENT',,_tab.ref()); _tab.del() !} ?};
   _tab.clear();

   {? _tab.first() || {! |? _tab.del() !} ?};

   Cntx.psh(ZL,ZLIM,ZGH,ZGP,REZ,GROP);
   _rez_mask:=(REZ.name()-2)+'__';
   {? REZ.name()<>_rez_mask || REZ.use(_rez_mask) ?};

   {? _zlec<>null() & ZL.seek(_zlec) | _grop<>null() & GROP.seek(_grop)
   ||
      ZLIM.clear();
      {? _grop<>null()
      || ZLIM.index('GROPKM');
         ZLIM.prefix(GROP.ref())
      |? ZL.RODZAJ='P'
      || ZLIM.index('ZLMZLD_R');
         ZLIM.prefix(ZL.ref())
      || ZLIM.index('ZLDZLRM');
         ZLIM.prefix(ZL.ref())
      ?};


      _p8503:=exec('get','#params',8503,2,OPERATOR.USER);
      {? _p8503='S' || _TreeKind:='N' || _TreeKind:='P' ?};

      _ZLIMprfx();
      {? ZLIM.first()
      ||
::       Najpierw ładujemy dane, a dopiero potem będziemy robić analizę i porządki w drzewie
         ZL.cntx_psh(); GROP.cntx_psh();
         {!
         |?
            {? ZLIM.AKC='+' || ZLIM.AKC:='N'; ZLIM.put() ?};
::          Wykluczenie limitów do innych przewodnikow tutaj jawnie, docelowo można uwzględenić
::          wcześniej odpowiedni index/prefix
            {? _ZLIMp.Limit*ZLIM.LIMIT &
               {? _ZLIMp.ZGP<>null() || _ZLIMp.ZGP=ZLIM.ZGP || 1 ?} &
               {? _ZLIMp.ZGH<>null() || _ZLIMp.ZGH=ZLIM.ZGP().NRZLP | _ZLIMp.ZGH=ZLIM.ZGP().NRPRZ || 1 ?}
            || _add:=1;
               _tab.blank(1);
               _tab.PARENT:=0;
               _tab.M_REF:=#ZLIM.KTM;
               _tab.KTM:=ZLIM.KTM().KTM;
               _tab.N:=ZLIM.KTM().N;
               _tab.J:=ZLIM.KTM().J().KOD;
               _tab.LIL:=ZLIM.LIL*{? ZLIM.SO='O' || -1 || 1 ?};
               _tab.PFAZ:=ZLIM.PFAZ().KOD;
               _tab.SO:=ZLIM.SO;
               _tab.M_R:=ZLIM.KTM().R;
               _tab.AKC:=ZLIM.AKC;
               _tab.REF:=$ZLIM.ref();
               _tab.REF_NR:=#ZLIM.ref();
               _tab.NR:=ZLIM.NR;
               _tab.KOR:=ZLIM.KOR;
               _tab.AUTO:=ZLIM.AUTO;
               _tab.ZLEC:=ZLIM.ZLEC().SYM;
               _tab.ZL_REF:=#ZLIM.ZLEC;
               ZL.cntx_psh();
               _tab.ZLECDOD:=ZLIM.ZLDOD().SYM;
               ZL.cntx_pop();
               _tab.ZLD_REF:=#ZLIM.ZLDOD;
               _tab.WYD:=ZLIM.WYD().KOD;
               _tab.WYD_REF:=#ZLIM.WYD;
               _tab.ROZ:=ZLIM.ROZ;
               _tab.PARTIA:=ZLIM.PARTIA;
               _tab.LIMIT:=ZLIM.LIMIT;
               _tab.STARTD:=ZLIM.STARTD;
               _tab.STARTT:=ZLIM.STARTT;
               _tab.NRPRZ:=ZLIM.ZGP().NRZLP().NRPRZ;
               _tab.ZGH_REF:=#ZGP.NRZLP;
               _tab.NRP:=ZLIM.ZGP().NRP;
               _tab.ZGP_REF:=#ZLIM.ZGP;
               _tab.OLD:=ZLIM.OLD;
               _tab.PREF:=_tab.PARENT;
               _tab.RW_ZW:='N';
               _tab.ZKP_REA:={? exec('jestZlim2ZkRea','zl_limit') || 'T' || 'N' ?};
               _tab.ZKP_ZL:={? exec('jestZlim2ZkZl','zl_limit') || 'T' || 'N' ?};
               _tab.RTMAT:=ZLIM.RTMAT;
               _tab.GROP_REF:=#ZLIM.GROP;
               {? _tab.KOR=0
               || _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
                  ZK_P.cntx_psh(); ZK_N.cntx_psh();
                  ZK_P.clear(); ZK_N.clear();
                  {? _zk_p<>null()
                   & ZK_P.seek(_zk_p)
                   & ZK_N.seek(ZK_P.N)
                  || _tab.ZK_P_NAM:=ZK_P.name();
                     _tab.ZK_P_REF:=#ZK_P.ref();
                     _tab.ZK_P_QRF:=$ZK_P.ref();
                     ~~
                  ?};
                  ZK_P.cntx_pop(); ZK_N.cntx_pop()
               ?};

               {? ZL.RODZAJ='Z'
               || _tab.TMAT_MAG:=exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"MAG",'N')
               ?};
               ZL.cntx_psh();
               ZL.index('RTMATSRC');
               ZL.prefix(ZLIM.RTMAT,ZLIM.ZLEC().UNRZL);
               {? ZL.first()
               || _tab.ZL4MAG:=ZL.SYM
               ?};
               ZL.cntx_pop();

               _tab.DT:=ZLIM.DT;
               _tab.AKCU:=ZLIM.AKCU().DANE;

               _tab.ZM:={? _tab.KOR=0 || 'M' || 'O' ?};
               _tab.X_KIND:='P';
               _tab.CRC:=ZLIM.crc();
               _tab.IL:=0;

               {? ZLIM.ROZ='T' & _ZLIMp.REJ_MAT='T'
               || REZ.cntx_psh();
                  REZ.index('ZLREZP2');
                  REZ.prefix(ZL.ref(),'S','R','T',$ZLIM.ZGP,);
                  _add:=0;
                  {? REZ.find_tab('first','ZLIM',,'=',$ZLIM.ref())
                  || {!
                     |?
                        _zparn:={? REZ.REFREA<>''
                                || exec('FindAndGet','#table',ZLGD,REZ.REFREA,,"ZLGD.ZPARN",null())
                                || null()
                                ?};
                        _jest:=0;
                        {? REZ.KODPAL<>''
                        || _tab.find_tab(
                              ,'ZGP_REF',,'=',#ZLIM.ZGP,'REF',,'=',$ZLIM.ref(),'MAG_REF',,'='
                              ,#REZ.MG,'ZPARN',,'=',$_zparn
                              ,'KODPAL',,'=',REZ.KODPAL
                              ,'EANL',,'=',REZ.ZD_POZ
                              ,'RSC',,'=',REZ.SC
                          )
                        || _tab.find_tab(
                              ,'ZGP_REF',,'=',#ZLIM.ZGP,'REF',,'=',$ZLIM.ref(),'MAG_REF',,'='
                              ,#REZ.MG,'ZPARN',,'=',$_zparn
                              ,'SCEAN',,'=',exec('FindAndGet','#table',DK,REZ.SC,,"DK.SCEAN",'')
                              ,'EANL',,'=',REZ.ZD_POZ
                          )
                        ?};
                        {? _jest>0
                        || _tab.IL+=REZ.ILR;
                           _tab.put()
                        || _tab.IL:=REZ.ILR;
                           _tab.MAG:=REZ.MG().SYM;
                           _tab.MAG_REF:=#REZ.MG;
                           _tab.ZPARN:=$_zparn;
                           _tab.PARSYM:=exec('FindAndGet','#table',ZPARN,_tab.ZPARN,,"ZPARN.SYM",'');
                           _tab.RSC:=REZ.SC;
                           _tab.KODPAL:=REZ.KODPAL;
                           _tab.SCEAN:=
                              {? REZ.KODPAL='' & REZ.SC<>''
                              || exec('FindAndGet','#table',DK,REZ.SC,,"DK.SCEAN",'')
                              || ''
                              ?};
                           _tab.EANL:=REZ.ZD_POZ;
                           _tab.REJ_MAT:='T';
                           _tab.add()
                        ?};
                        REZ.find_tab('next','ZLIM',,'=',$ZLIM.ref())
                     !}
                  ?};
                  REZ.cntx_pop()
               || _tab.MAG:=ZLIM.MG().SYM;
                  _tab.MAG_REF:=#ZLIM.MG;
                  _tab.ZPARN:='';
                  _tab.PARSYM:=''
               ?};
::             Jeżeli zlecenie powstało na podstawie stanów magazynowych to sprawdza, czy surowiec nielimitowany
::             posiada zdefiniowane dedykowane rezerwacje
               {? ZLIM.LIMIT='N' & exec('zlim_il_rez','zl_nlimit',ZLIM.ref())
               || _tab.CZY_REZ:=1
               ?};

               {? _add || _tab.add() ?}
            ?};
            ZLIM.next()
         !};
         ZL.cntx_pop(); GROP.cntx_pop();

::       Teraz uporządkujemy drzewo - ustalimy zależnosci pomiędzy ZLIMami
         {? _tab.first()
         || _ndx:=_tab.ndx_tmp('',0
                                 ,'ZL_REF',,
                                 ,'LIMIT',,
                                 ,'NR',,
                                 ,'REF_NR',,
                              );
            _tab.cntx_psh();
            _tab.index(_ndx);
            _tab.first();

::          Najpierw korekty
            {!
            |?
               {? _tab.KOR>0
                & _tab.PARENT=0
               || _parent:=0;
                  _tab.cntx_psh();
                  _tab.prefix(_tab.ZL_REF,'T');
                  {? _tab.find_key(_tab.KOR)
                  || _parent:=#_tab.ref()
                  ?};
                  _tab.cntx_pop();
                  {? _parent
                  || _tab.PARENT:=_parent;
                     {? ZLIM.seek(_tab.REF_NR,)
                     || _tab.KTM:='kor: '+ZLIM.WHY().KOD;
                        _tab.N:=ZLIM.WHY().NAZ
                     ?};
                     _tab.PREF:=_tab.PARENT;
                     _tab.put()
                  ?}
               ?};
               _tab.next()
            !};
            _tab.first();

            {? ZL.RODZAJ='Z'
            ||
               {? _TreeKind='N'
               || 'Material -> zlecenie podrzedne i wydzial';
                  _sql:=sql(''
                           +"
                              SELECT DISTINCT
                                 zlimp.KTM
                                ,zlimp.N
                                ,zlimp.J
                                ,zlimp.M_REF
                                ,zlimp.M_R
                                ,zlimp.SO
                                ,0  AS REF
                              FROM
                                :_a as zlimp
                              WHERE
                                 zlimp.KOR=0
                              ORDER BY
                                KTM, N
                            "
                           ,_tab
                           );
                  {? _sql.first()
                  || {!
                     |? _tab.blank(1);
                        _tab.KTM:=_sql.KTM;
                        _tab.N:=_sql.N;
                        _tab.J:=_sql.J;
                        _tab.M_REF:=_sql.M_REF;
                        _tab.X_KIND:='G';
                        _tab.ZM:='M';
                        _tab.M_R:=_sql.M_R;
                        _tab.SO:=_sql.SO;
                        _tab.add();
                        _sql.REF:=#_tab.ref();
                        _sql.put();
                        _sql.next()
                     !};
                     _tab.first();
                     {!
                     |? {? _tab.REF_NR
                         & _tab.KOR=0
                        || {? _sql.find_key(_tab.KTM)
                           || _tab.PARENT:=_sql.REF;
                              ZL.cntx_psh();
                              ZL.prefix();
                              {? ZL.seek(_tab.ZL_REF,)
                              ||
::                                 _tab.KTM:=ZL.SYM;
                                 _tab.N:=ZL.OPIS;
                                 ~~
                              ?};
                              _tab.KTM:=_tab.NRPRZ+' - '+$_tab.NRP;
                              ZL.cntx_pop();
                              _tab.PREF:=_tab.PARENT;
                              _tab.put()
                           ?}
                        ?};
                        _tab.next()
                     !}

                  ?}

::             teraz przypinamy do zlecen jesli jest taka potrzeba
               |? _TreeKind='P'
               || _zql:=sql(''
                           +"
                              SELECT DISTINCT
                                 zlimp.ZLEC
                                ,zlimp.ZL_REF
                                ,0  AS REF
                              FROM
                                :_a zlimp
                              WHERE
                                 zlimp.KOR=0
                              ORDER BY
                                 ZLEC, ZL_REF
                            "
                           ,_tab
                           );
                  {? _zql.first()
                  || {!
                     |? _tab.blank(1);
                        _tab.X_KIND:='G';
                        _tab.ZM:='Z';
                        ZL.cntx_psh();
                        ZL.prefix();
                        {? ZL.seek(_zql.ZL_REF,)
                        ||
                           _tab.KTM:=ZL.SYM;
                           _tab.N:=ZL.OPIS;
                           _tab.WYD:=ZL.JORG().KOD;
                           _tab.ZL_REF:=_zql.ZL_REF;
                           ~~
                        ?};
                        ZL.cntx_pop();
::                        _tab.KTM:=_tab.NRPRZ+' - '+$_tab.NRP;
                        _tab.add();
                        _zql.REF:=#_tab.ref();
                        _zql.put();
                        _zql.next()
                     !};
                     _tab.first();
                     {!
                     |? {? _tab.REF_NR
                         & _tab.KOR=0
                        || {? _zql.find_key(_tab.ZLEC)
                           || _tab.PARENT:=_zql.REF;
                              _tab.PREF:=_tab.PARENT;
                              _tab.put()
                           ?}
                        ?};
                        _tab.next()
                     !}

                  ?}
               ?}
            ?};
            _tab.cntx_pop();
            _tab.ndx_drop(_ndx);

            {? _tab.first()
            || {!
               |? {? (_tab.X_KIND='G' & _TreeKind='N')
                   | (_tab.ZM='M' &  _TreeKind<>'N')
                  || {? M.seek(_tab.M_REF,)
                     ||
::                        exec('obl_stan','magazyn_stan',M.ref(),6);
                        exec('zwr_stan','magazyn_stan',M.ref(),6,null(),0);
                        _tab.S:=BEER.S;
                        _tab.SD:=BEER.SD;
                        _tab.SRT:=BEER.SRT;
                        _tab.SRR:=BEER.SRR;
                        _tab.SSZ:=BEER.SSZ;
                        _tab.WDR:=BEER.WDR
                     ?};
                     _tab.put()
                  ?};
                  {? _tab.PARENT=0
                  || exec('GetChildVals','zl_limit',_tab)
                  ?};
                  _tab.next()
               !}
            ?};
            exec('UpdateZLIMALIL','zl_limit',_tab,0);
            ~~
         ?}
      ?}

   ?};

   Cntx.pop(ZL,ZLIM,ZGH,ZGP,REZ,GROP)
?};
~~


\__ZLIM_prepwin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Tworzy okienka dla tabeli wejściowej
::   WE: _a  - tabela wejsciowa (np. __ZLIM)
::      [_b] - view_only (0 - domyslnie)
::      [_c] - INTEGER - opcja wywolania funkcji
::                         0 - zakladki tylko inicjowanie okien
::                         1 - z poziomu menu
::                         2 - ustalenie akcji
::      [_d] - INTEGER - 0/[1] - czy dodawać przyciski generuj i zakończ
:: ~OST: INWINBTN
::----------------------------------------------------------------------------------------------------------------------
_opcja:={? _>2 || _c || 1 ?};
_ZLIMp:={? _>0 & type_of(_a)>100 || _a || {? var_pres('__ZLIMp')>100 || __ZLIMp || 'error' ?} ?};

 _tab:=_ZLIMp.ZLIM;
_view:=_ZLIMp.View;

_proc_btn:=1;
{? var_pres('_d')=type_of(0)
|| _proc_btn:=_d
?};

_act:='';
_act_empty:='';

{? _opcja<>2
||
:: Produkcyjne/Warsztatowe (dwa okna)
   {! _it:=1..2
   |!
      _title:={? _ZLIMp.Limit='T' || 'Limity'@
              |? _ZLIMp.Limit='N' || 'Surowce nielimitowane'@
                                  || 'Limity i surowce nielimitowane'@
              ?};
      _wer:=_tab.mk_sel(_title,'P',0,'#_zlimit_wer',1,,20,1);

:: POLA OKIENKA
      _tab.win_fld(_wer,,'KTM'     ,,, 18, ,,'Kod/Symbol'@,,,,,,,,'mobile_visible=1');
      _tab.win_fld(_wer,,'N'       ,,, 30, ,,'Nazwa/Opis'@,,,,,,,,'mobile_visible=1');
      _tab.win_fld(_wer,,'J'       ,,,  2, ,,'jm'@);
      _tab.win_fld(_wer,,'WYD'     ,,, -7, ,,'Wydział'@);
      _tab.win_fld(_wer,,'LIL'     ,,,-12,ST.DOKL,,'Wprowadzony'@,,,,,,,,'mobile_visible=1');
      _tab.win_fld(_wer,,'ALIL'    ,,,-12,ST.DOKL,,'Zatwierdzony'@);
      _tab.win_fld(_wer,,'ZLIM_POB',,,-12,ST.DOKL,,'Pobrano'@);
      _tab.win_fld(_wer,,'SR'      ,,,-12,ST.DOKL,,'Zarezerwowano'@);
      _tab.win_fld(_wer,,'SRC'     ,,,-12,ST.DOKL,,'Rezerwacje warunkowe'@);
      _tab.win_fld(_wer,,'ZK_P_ZRE',,,-12,ST.DOKL,,'Zrealizowano'@);
      _tab.win_fld(_wer,,'SO'      ,,, -3, ,,'Odpad'@,
         ,'Znacznik czy surowiec (S), czy odpad/koprodukt (O)'@,2,,"'O'","'S'");
      _tab.win_fld(_wer,,'AKC'     ,,, -3, ,,'Zaakceptowany'@,,
                   'Zaakceptowany (T), niezaakceptowany (N), zaznaczony do akceptacji (+)'@,2,,"'T'","'N'","'+'");

:: WRZUCAMY WSZYSTKIE MOŻLIWE AKCJE
      _tab.win_act(_wer, ,'Wyświetl',,,,"exec('__ZLIM_bdisp','zl_limit',cur_tab(1,1))");

      _tab.win_act(_wer,0,'Menu','Dołącz'@,,,,,,,,,'D');
      _tab.win_act(_wer,1,'Menu','Dołącz'@,,,,,,,,,'D');
      _formula:="_ZLIMp:=params_get().env.env_limit.ZLIMp; exec('zlim_dod','zl_limit',_ZLIMp,'S')";
      _tab.win_act(_wer,0,'Formuła','Surowiec'@@,'#D',,_formula,,,,,,'S');
      _tab.win_act(_wer,1,'Formuła','Surowiec'@@,'#D',,_formula,,,,,,'S');
      _formula:="_ZLIMp:=params_get().env.env_limit.ZLIMp; exec('zlim_dod','zl_limit',_ZLIMp,'O')";
      _tab.win_act(_wer,0,'Formuła','Odpad/koprodukt'@@,'#D',,_formula,,,,,,'O');
      _tab.win_act(_wer,1,'Formuła','Odpad/koprodukt'@@,'#D',,_formula,,,,,,'O');

      _tab.win_act(_wer,,'Formuła','Popraw'@@,,,"exec('bp_zlimw','zl_limit',cur_tab(1,1))"
                                             ,"exec('pp_zlimw','zl_limit',cur_tab(1,1))",,,,,'P');

      _formula:="_ZLIMp:=params_get().env.env_limit.ZLIMp; params_exec('usunlimit','zl_limit',_ZLIMp)";
      _tab.win_act(_wer,,'Formuła','Usuń'@@,,,_formula,,,1
                                              ,"params_exec('zlim_usu_gpr','zl_limit')"
                                              ,"params_exec('zlim_usu_gpo','zl_limit')",'U');

      {? _it=1
      || _formula:="params_exec('zlim_generuj','zl_limit')";
         _tab.win_act(_wer,0,'Formuła','Generuj'@@,,,_formula,,,,,,'G',,'target=window');
         _tab.win_act(_wer,1,'Formuła','Generuj'@@,,,_formula,,,,,,'G',,'target=window')
      ?};

      _tab.win_act(_wer,,'Formuła','Zwiń/roz&wiń'@@,,'Zwiń/rozwiń wszystkie rekordy'@
                            ,"exec('zwrw_all','#tree',cur_tab(1,1),'PARENT',cur_win(1,1))",,,,,,'W',,'target=window');

      _tab.win_act(_wer,,'Formuła','K&orekta'@@,,'Korekta limitu'@
                                              ,"exec('zlim_kor','zl_limit',#cur_tab(1,1).ref())",,,,,,'O');

      {? exec('get','#params',500660,2)='T'
      || _tab.win_act(_wer, ,'Formuła','Historia korekt'@@,,'Historia korekt limitów'@
                                               ,"exec('zlim_kor_hist','zl_limit',$ZLIM.ref())",,,,,,'H')
      ?};

      {? exec('get','#params',500015,2)='T'
      || _tab.win_act(_wer,,'Formuła','Sp&rawdź'@@,,'Zaznaczenie wybranych pozycji do zatwierdzenia'@
                                                  ,"exec('zlim_sel','zl_limit')",,,1
                                                  ,"exec('zlim_sel_gpr','zl_limit')"
                                                  ,"exec('zlim_sel_gpo','zl_limit')",'R')
      ?};

      _tab.win_act(_wer,,'Formuła','Akceptuj'@@,,'Akceptacja wybranych pozycji'@
                                                  ,"params_exec('zlim_akc','zl_limit')",,,1
                                                  ,"exec('zlim_akc_gpr','zl_limit')"
                                                  ,"exec('zlim_akc_gpo','zl_limit')",'A');

      _tab.win_act(_wer,,'Formuła','W&ycofaj'@@,,'Wycofanie akceptacji wybranych pozycji'@
                                                  ,"exec('zlim_wyc','zl_limit')",,,1
                                                  ,"exec('zlim_wyc_gpr','zl_limit')"
                                                  ,"exec('zlim_wyc_gpo','zl_limit')",'Y');

      _tab.win_act(_wer,0,'Formuła','Zakończ'@@,,,"params_exec('zlim_dalej','zl_limit')",,,,,,'Z');
      _tab.win_act(_wer,1,'Formuła','Zakończ'@@,,,"params_exec('zlim_dalej','zl_limit')",,,,,,'Z');

      _tab.win_act(_wer,,'Formuła','Za&mówienie'@@,,'Pozycja zamówienia wewnętrznego dla limitu'@
                                                  ,"exec('View_ZK_P4ZLIM','zamsiw_limit',cur_tab(1,1).REF)"
      );

      _tab.win_act(_wer,,'Formuła','Po&brania'@@,,'Pobrania na limit'@,"exec('pobrania','magdok_prod',1)",,,,,,'B');

      _tab.win_act(_wer,,'Formuła','Dos&tawy'@@,,,"exec('dostawy','magdok_prod')",,,,,,'T');

::----------------------------------------------------------------------------------------------------------------------
      _tab.win_act(_wer,,'Menu','R&ezerwacje'@,,,,,,,,,'E');
      _tab.win_act(_wer,,'Formuła','Zarezerwuj'@@,'#E','Rezerwowanie surowców w magazynie'@
                                                    ,"exec('__ZLIM_rezerw','zamsiw_limit')",,,1
                                                    ,"exec('rezerwuj_gpr','zamsiw_limit',cur_tab(1,1))"
                                                    ,"params_exec('rezerwuj_gpo','zamsiw_limit',cur_tab(1,1))",'Z');
      _tab.win_act(_wer,,'Formuła','Odrezerwuj'@@,'#E','Wycofywanie rezerwacji surowców w magazynie'
                                                    ,"exec('odrezerw','zamsiw_limit',cur_tab(1,1))",,,1
                                                    ,"exec('odrezerw_gpr','zamsiw_limit',cur_tab(1,1))"
                                                    ,"params_exec('odrezerw_gpo','zamsiw_limit',cur_tab(1,1))"
      );
      _tab.win_act(_wer,,'Formuła','R&ezerwacje'@@,'#E','Edycja rezerwacji'
                                                    ,"exec('rezerwDST','zamsiw_limit',cur_tab(1,1))",,,,,,'E');
      _tab.win_act(_wer,,'Formuła','--X','#E',,,,,,,,'X');
      _tab.win_act(_wer,,'Formuła','Podgląd'@@,'#E','Podgląd rezerwacji do limitu zlecenia'@
                                                ,"exec('rezerwacje','zamsiw_limit',cur_tab(1,1).REF)",,,,,,'P');
      _tab.win_act(_wer,,'Formuła','--Y','#E',,,,,,,,'Y');
      _tab.win_act(_wer,,'Formuła','Warunkowe &niezależne od pozleceń'@@,'#E','Zmiana trybu rezerwacji warunkowej'@
                                                ,"params_exec('tryb_rezw','zl_head','N',cur_tab(1,1).REF)",,,,,,'N');
      _tab.win_act(_wer,,'Formuła','Warunkowe dedykowane dla poz&leceń'@@,'#E','Zmiana trybu rezerwacji warunkowych'@
                                                ,"params_exec('tryb_rezw','zl_head','T',cur_tab(1,1).REF)",,,,,,'L');
::----------------------------------------------------------------------------------------------------------------------
      _tab.win_act(_wer,,'Menu','Funkcje'@,,,,,,,,,'F');
      _formula:="
         M.cntx_psh();
         M.clear();
         {? M.seek(cur_tab(1,1).M_REF,) || exec('info_zam','magazyn_stan',5) ?};
         M.cntx_pop()
      ";
      _tab.win_act(_wer,,'Formuła','Szczegóły'@@,'#F','Szczegóły indeksu'@,_formula,,,,,,'S');
      _tab.win_act(_wer,,'Formuła','Analiza'@@,'#F','Analiza dostępności materiałów w czasie'@,
         "exec('zlim_analiza_b','zl_limit')","exec('zlim_analiza_a','zl_limit')",,1,
         "exec('zlim_analiza_bg','zl_limit')","exec('zlim_analiza_ag','zl_limit')",'A'
      );
      _formula:="exec('infoatry','zl_limit')";
      _tab.win_act(_wer,,'Formuła','A&trybuty'@@,'#F','Stany magazynowe wg atrybutów'@,_formula,,,,,,'T');
      _tab.win_act(_wer,,'Formuła','--X','#F',,,,,,,,'X');

      _tab.win_act(_wer,,'Formuła','Wydanie'@@,'#F','Generacja wydania surowców dla limitu'@
         ,"params_exec('lim_wyd','zl_limit1')",,,1,"params_exec('lim_wyd_gb','zl_limit1')",,'W');
      task_attach('LMG_ZAM_IPRZ');

      _tab.win_act(_wer,,'Formuła','Zwrot'@@,'#F','Generacja zwrotu surowców dla limitu'@
         ,"params_exec('zlim_zwr','zl_limit1')",,,1,"params_exec('zlim_zwr_gb','zl_limit1')",,'Z');
      task_attach('TTE_WYK_DGZW');

      _tab.win_act(_wer,,'Formuła','P&rzychód'@@,'#F','Generacja przychodu surowców dla odpadu'@
         ,"params_exec('zlim_zwr','zl_limit1',,'O')",,,1,"params_exec('zlim_zwr_gb','zl_limit1',,'O')",,'R');
      task_attach('TTE_WYK_DGRO');

      _tab.win_act(_wer,,'Formuła','--X','#F',,,,,,,,'Ż');
      _formula:="exec('zmiany','#syslog',ZLIM)";
      _tab.win_act(_wer,,'Formuła','Zmian&y'@@,'#F','Historia zmian danych'@,_formula,,,,,,'Y');
::----------------------------------------------------------------------------------------------------------------------
      _tab.win_act(_wer,,'Formuła','Zamie&nniki'@@,,'Zamienniki/elementy grup technologicznych'@
                                                ,"exec('zamienniki','zl_limit',cur_tab(1,1))",,,,,,'N');

      {? _it=1
      || _formula:="params_exec('zmien_widok','zl_limit')";
         _tab.win_act(_wer,0,'Formuła','W&idok'@@,,'Przełączanie widoku dla zlecenia złożonego'@
            ,_formula,,,,,,'I',,'target=window');
         _tab.win_act(_wer,1,'Formuła','W&idok'@@,,'Przełączanie widoku dla zlecenia złożonego'@
            ,_formula,,,,,,'I',,'target=window')
      ?};

      _tab.win_act(_wer,,'Formuła','Druku&j'@@,,'Drukowanie limitów zlecenia'@
                                                ,"params_exec('zlim_prn','zl_limit',cur_tab(1,1))",,,,,,'J',,'icon=print');

      _tab.win_act(_wer,,'Szukaj');
      _tab.win_act(_wer,,'Kolejność');
      _tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','zl_limit')",,,,,,'L',,'target=window');
      _tab.win_act(_wer,,'Rekord',,,,"params_exec('rekprzed','color','ZLIM#02#01')");

      _tab.win_fml(_wer,,'N',,'ICON_BEFORE',"cur_tab(1,1).X_ICON");
      _tab.win_fml(_wer,,'SRC',,'ICON_BEFORE',"exec('icon_src','zl_limit')");
      _tab.win_fml(_wer,,'LIL',,'ICON_BEFORE',"exec('icon_zam','zl_nlimit')");

:: Przyciski
      {? _it=1 & _proc_btn>0
      || _btn:=_tab.win_btn(_wer,'text='+'Generuj'@+{? _opcja=0 || '' || ',panel=bottom,align=begin' ?},'menu:G')
      ?};
      {? _proc_btn>0
      || _btn:=_tab.win_btn(_wer,
            'text='+'Zakończ'@+',icon='+exec('zakoncz','#icon')+{? _opcja=0 || '' || ',panel=bottom,align=end' ?},'menu:Z'
         )
      ?};
      _btn:=_tab.win_btn(_wer,'text=%1'['Wydanie'@@],'menu:FW');
      _tab.btn_sopt(_wer,_btn,'tooltip='+'Generacja wydania surowców dla limitu'@);
      _btn:=_tab.win_btn(_wer,'text=%1'['Zwrot'@@],'menu:FZ');
      _tab.btn_sopt(_wer,_btn,'tooltip='+'Generacja zwrotu surowców dla limitu'@);
      _btn:=_tab.win_btn(_wer,'text=%1'['P&rzychód'@@],'menu:FR');
      _tab.btn_sopt(_wer,_btn,'tooltip='+'Generacja przychodu surowców dla odpadu'@);
::   _tab.win_sel(_wer);

      {? _it=1 || _ZLIMp.WERP:=_wer || _ZLIMp.WERW:=_wer ?};

      _fml:="

         _p8504:=params_get().env.env_limit.p8504;
         _ZLIMp:=params_get().env.env_limit.ZLIMp;
         _WER:={? _ZLIMp.WP='P' || _ZLIMp.WERP || _ZLIMp.WERW ?};
         {? _p8504='T'
         || _ZLIMp.ZLIM.tr_set(1,_WER,1,0)
         || _ZLIMp.ZLIM.tr_set(0,_WER,1,0)
         ?};
         ~~
      ";
      _grp:=_tab.grp_make(_title,_fml,'#_zlimit_grp'+$_it,,,,,'html_maximized');
      _after_refresh:="params_exec('__ZLIM_actions','zl_limit')";
      _tab.grp_sel(_grp,,_wer,,_after_refresh,,,,,,,,'maximized');

      {? _it=1 || _ZLIMp.GRPP:=_grp || _ZLIMp.GRPW:=_grp ?};

      _ZLIMp.actE:='';
      _ZLIMp.actN:=''
   !}
?};

:: Teraz jeszcze określimy, które akcje na pewno muszą być wyłączone
{? _opcja<>0
||
   {? _view
   ||                                  _ZLIMp.hidE:='DG'; _ZLIMp.hidN:='DGPRUOAYZE(ZOX)IN'

   |? _ZLIMp.A_edit='N'
   ||                                  _ZLIMp.hidE:='DG'; _ZLIMp.hidN:='DGPUOAYE(ZOX)IN'

   || {? ZL.STAN='O'
       | ZL.TYP().WP='W'
:: TODO
::       | ZMask.KARLIM='0'
      ||                               _ZLIMp.hidE+='G';  _ZLIMp.hidN+='G'
      ?};

      {? ZL.GENLIM='N' & ZL.NRNZL<>0 ||                     _ZLIMp.hidN+='E(ZOX)'
      ?};
      {? exec('get','#params',500015,2)='N'               ||                     _ZLIMp.hidN+='R'
      ?};
      ~~
   ?};

:: teraz określenie które akcje domyślne są dostępne
   _defE:='GD';
   _defN:='RBC';

   _ZLIMp.defE:='';
   _ZLIMp.defN:='';

   {! _ii:=1..+_defE |! _char:=(_ii+_defE)+1; {? _ZLIMp.hidE*_char=0 || _ZLIMp.defE:=_ZLIMp.defE+_char ?} !};
   {! _ii:=1..+_defN |! _char:=(_ii+_defN)+1; {? _ZLIMp.hidN*_char=0 || _ZLIMp.defN:=_ZLIMp.defN+_char ?} !};

:: ustalenie akcji
::   {? +(_ZLIMp.hidN+':'+_ZLIMp.hidE)>1
::   || _tab.actions(_ZLIMp.WER,_ZLIMp.hidN+':'+_ZLIMp.hidE,(1+_ZLIMp.defN)+':'+(1+_ZLIMp.defE),1)
::   || _tab.actions(_ZLIMp.WER,                           ,(1+_ZLIMp.defN)+':'+(1+_ZLIMp.defE),1)
::   ?}
   ~~
?};
~~


\__ZLIM_actions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Ustala akcje w oknie limitów
::       Obsługiwane akcje: D(SO)PUGWORAYZMBTE(ZOP)F(SATW)NJ:D(SO)GZ
::----------------------------------------------------------------------------------------------------------------------
_ZLIMp:=params_get().env.env_limit.ZLIMp;
_used:=params_get().env.env_limit.used;

_tab:=_ZLIMp.ZLIM;
_isPal:={? _tab.ZK_P_QRF<>'' & exec('FindAndGet','#table',ZK_P,_tab.ZK_P_QRF,,"RMAG().PAL='T'",0) || 'E(ZOEP)' || '' ?};

{? _tab.X_KIND='G' | _tab.size()=0
|| _zl:=_ZLIMp.ZL
|| _zl:=exec('FindAndGet','#table',ZL,_tab.ZL_REF,,"ref()",null())
?};
_grop:=_ZLIMp.GROP;

_selected:=(_tab.sel_size()>0);

ZL.cntx_psh(); GROP.cntx_psh();
ZL.prefix(); GROP.prefix();

{? _zl<>null() & ZL.seek(_zl)
|| _grayed:='%1:'[_isPal];

:: odpad
   {? _tab.SO='O' & ~_selected
   || _grayed:='MF(WZ)'+_grayed
:: surowiec
   |? _tab.SO='S' & ~_selected
   || _grayed:='F(R)'+_grayed
   ?};

:: używane przez innego operatora albo z góry zdefiniowane, że tylko podgląd
   {? _used
   || _grayed:='DPUGAYZF(WZR)O'+_grayed+'DGZ'
   ?};

:: zlecenie zamknięte - bez redagowania, analiz i wydań, podglądu zamówień, rezerwacji
   {? ZL.STAN='Z'
   || _grayed:='DPUGOAYZMEF(AWZR)'+_grayed+'DGZ'
:: zlecenia otwarte - bez zakańczania
   |? ZL.STAN='O'
   || _grayed:='Z'+_grayed+'Z'
:: zlecenia w przygotowaniu - bez wydań/zwrotów
   |? ZL.STAN='N'
   || _grayed:='F(WZR)'+_grayed
   ?};

:: niezatwierdzona technologia zlecenia produkcyjnego - tylko podgląd, bez kończenia
   {? ZL.TYP().TECH='T' & ZL.TYP().WP='P' & ZL.STAT_T='N'
   || _grayed:='DPUGZ'+_grayed+'DGZ'
   ?};

:: warsztatowe - bez generowania
   {? ZL.TYP().WP='W'
   || _grayed:='G'+_grayed+'G'
   ?};
:: tryb rezerwacji warunkowych
   {? exec('top_rodzaj','zl_link',ZL.ref())<>'Z'
   || _grayed:='E(NL)'+_grayed
   |? ~exec('chk_tmat_mag','zl_limit',ZL.ref())
   || _grayed:='E(NL)'+_grayed
   |? (ZL.RP_REZ='N' & ZL.TYP().RP_REZ='N') | ZL.RP_REZ='S'
   || _grayed:='E(N)'+_grayed
   |? (ZL.RP_REZ='N' & ZL.TYP().RP_REZ='T') | ZL.RP_REZ='Z'
   || _grayed:='E(L)'+_grayed
   ?};

:: wg zawartości tabeli _ZLIM
   {? _tab.X_KIND='G'
   || {? _tab.ZM='Z' || _grayed:='PUORBEF(ST)NM'+_grayed; {? ~_selected || _grayed:='AYF(AWZR)'+_grayed ?}
      |? _tab.ZM='M' || _grayed:='PUORBETNM'+_grayed; {? ~_selected || _grayed:='AYF(AWZR)'+_grayed ?}
      ?}
   ?};
   {? _tab.RTMAT='' || _grayed:='N'+_grayed ?};
   {? _tab.AKC='T'
   || _grayed:='PUR'+_grayed; {? ~_selected || _grayed:='A'+_grayed ?}
   || _grayed:='MOBTF(T)E'+_grayed; {? ~_selected || _grayed:='Y'+_grayed ?}
   ?};
   {? _tab.KOR<>0 || _grayed:='OZE'+_grayed ?};

:: W kontekście przewodnika - VAR.A_NRZLP
   {? VAR.A_NRZLP<>null()
   || ZGH.cntx_psh();
      ZGH.prefix();
      {? ZGH.seek(_ZLIMp.ZGH)
      ||
::       zakończony przewodnik - bez kończenia
         {? ZGH.STAT_L='T'
         || _grayed:='Z'+_grayed+'Z'
         ?};
::       oddany przewodnik - bez redagowania i korygowania
         {? ZGH.STAN='T'
         || _grayed:='DPUOG'+_grayed+'DG'
         ?}
      ?};
      ZGH.cntx_pop()
:: W kontekście przewodnika
   |? _ZLIMp.ZGH<>null()
   || ZGH.cntx_psh();
      ZGH.prefix();
      {? ZGH.seek(_ZLIMp.ZGH)
      ||
::       zakończony przewodnik - bez kończenia
         {? ZGH.STAT_L='T'
         || _grayed:='Z'+_grayed+'Z'
         ?};
::       oddany przewodnik - bez redagowania i korygowania
         {? ZGH.STAN='T'
         || _grayed:='PUO'+_grayed+''
         ?}
      ?};
      ZGH.cntx_pop()
   ||
::    W kontekście zlecenia prostego - zakończone wszystkie przewodniki
      {? ZL.RODZAJ='P' & exec('stat_l','zl_limit',ZL.ref())='T'
      || _grayed:='Z'+_grayed+'Z'
      ?};
::    Dla przewodnika w widoku zlecenia
      ZGH.cntx_psh();
      ZGH.prefix();
      {? ZGH.seek(_tab.ZGH_REF,)
      ||
::       zakończony przewodnik - bez kończenia
::         {? ZGH.STAT_L='T'
::         || _grayed:='Z'+_grayed+'Z'
::         ?};
::       oddany przewodnik - bez redagowania i korygowania
         {? ZGH.STAN='T'
         || _grayed:='PUO'+_grayed+''
         ?}
      ?};
      ZGH.cntx_pop()
   ?};
   {? ~exec('ctrlSelZLIM','zl_limit',_tab) || _grayed:='F(WZR)'+_grayed ?};

   _tab.actions_grayed(cur_win(1,1),_grayed);

:: Akcja domyślna dla niepustej dziedziny: Pobrania
:: Akcja domyślna dla pustej dziedziny: Generuj (produkcyjne) albo Dołącz (warsztatowe)
   _default:='B:'+{? ZL.TYP().WP='W' || 'D' || 'G' ?};
   _tab.actions(cur_win(1,1),,_default,1)

::
|? _grop<>null() & GROP.seek(_grop)
|| _grayed:='%1:'[_isPal];

:: odpad
   {? _tab.SO='O' & ~_selected
   || _grayed:='MF(WZ)'+_grayed
:: surowiec
   |? _tab.SO='S' & ~_selected
   || _grayed:='F(R)'+_grayed
   ?};

:: używane przez innego operatora albo z góry zdefiniowane, że tylko podgląd
   {? _used
   || _grayed:='DPUGAYZF(WZR)O'+_grayed+'DGZ'
   ?};

:: grupa zamknięta - bez redagowania, analiz i wydań, podglądu zamówień, rezerwacji
   {? GROP.STATUS='Z'
   || _grayed:='DPUGOAYZMEF(AWZR)'+_grayed+'DGZ'
:: grupa nie zaakceptowana - bez wydań/zwrotów
   |? GROP.AKC='N'
   || _grayed:='F(WZR)'+_grayed
   ?};

:: wg zawartości tabeli _ZLIM
   {? _tab.X_KIND='G'
   || {? _tab.ZM='Z' || _grayed:='PUORBEF(ST)NM'+_grayed; {? ~_selected || _grayed:='AYF(AWZR)'+_grayed ?}
      |? _tab.ZM='M' || _grayed:='PUORBETNM'+_grayed; {? ~_selected || _grayed:='AYF(AWZR)'+_grayed ?}
      ?}
   ?};
   {? _tab.RTMAT='' || _grayed:='N'+_grayed ?};
   {? _tab.AKC='T'
   || _grayed:='PUR'+_grayed; {? ~_selected || _grayed:='A'+_grayed ?}
   || _grayed:='MOBTF(T)E'+_grayed; {? ~_selected || _grayed:='Y'+_grayed ?}
   ?};
   {? _tab.KOR<>0 || _grayed:='OZE'+_grayed ?};

:: zawsze bez generowania, zakańczania, zamienników
   _grayed:='GZN'+_grayed+'GZ';

   _tab.actions_grayed(cur_win(1,1),_grayed);

:: Akcja domyślna dla niepustej dziedziny: Pobrania
:: Akcja domyślna dla pustej dziedziny: Dołącz
   _default:='B:D';
   _tab.actions(cur_win(1,1),,_default,1)

?};

ZL.cntx_pop(); GROP.cntx_pop();
~~


\GetChildVals
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: sumuje wartości z poziomów potomnych
::   WE: _a - wskazanie na __ZLIM, gdy nie ma, to __ZLIMp
::       _b - __ZLIM.ref() rodzica lub aktualny __ZLIM
::      [_c] - wykonuj obliczenia
::      [_d] - INTEGER - 0/[1] - odświeżaj ilość pobraną
::   WY: STRING   - treść błędu
::       wynik[1] - ilość zarezerwowana
::       wynik[2] - ilość oczekująca
::       wynik[3] - ilość zrealizowana
::       wynik[4] - ilość pobrana
::       wynik[5] - symbole zamówień
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & type_of(_a)=type_of(SYSLOG) || _tab:=_a
|? var_pres('__ZLIMp')>0             || _tab:=__ZLIMp.ZLIM
|? var_pres('__ZLIM')>0              || _tab:=__ZLIM
                                     || return('Nie zdefiniowano tabeli __ZLIM')
?};

_calc:={? _>2 & type_of(_c)=1 || _c || 1 ?};
_rfr_pob:=1;
{? var_pres('_d')=type_of(0)
|| _rfr_pob:=_d
?};

:: przygotowanie tablicy wynikowej
_result:=obj_new(5);
{! _ii:=1..4 |! _result[_ii]:=0!};
_result[5]:='';

:: jeśli podano ref, to ustawiamy na nim
_tab.cntx_psh();
{? _>1 & type_of(_b)=type_of(_tab.ref()) || _tab.seek(_b) ?};

_ref:=_tab.ref();

:: teraz idziemy po wszystkich podrzędnych do aktualnego
_tab.cntx_psh();
_tab.prefix(#_ref);
{? _tab.first()
|| _val:=obj_new(5);

   {!
   |? obj_del(_val);
      _val:=exec('GetChildVals','zl_limit',_tab,0);
      _result[1]+=_val[1];
      _result[2]+=_val[2];
      _result[3]+=_val[3];
      _result[4]+=_val[4];
      {? _val[5]<>''
       & (_result[5]*_val[5])=0
      || _result[5]:=_result[5]+_val[5]
      ?};
      _tab.next()
   !};
   ~~
?};
_tab.cntx_pop();
M.cntx_psh();    M.clear();
SLO.cntx_psh();  SLO.clear();
ZL.cntx_psh();   ZL.clear();
ZK_P.cntx_psh(); ZK_P.clear();
ZK_N.cntx_psh(); ZK_N.clear();
REZ.cntx_psh();  REZ.clear();

:: wracamy do nadrzednego
_tab.SR:=_tab.SRC:=_tab.ZK_P_ZRE:=0;

{? _rfr_pob>0
|| _tab.ZLIM_POB:=0
?};

:: jeśli nie jest to korekta a pozycja zbiorcza, to...
{? _tab.KOR=0
 & _tab.X_KIND='P'
||
   _zkp_sym:='';
   {? _calc
   || {? _tab.ZK_P_REF
       & ZK_P.seek(_tab.ZK_P_REF,_tab.ZK_P_NAM)
       & ZK_N.seek(ZK_P.N)
      ||
         REZ.index('ZK_P');
         REZ.prefix(ZK_P.ref());
         {? REZ.first()
         || {!
            |? {? REZ.RODZ='B'
               || _tab.SR+=REZ.ILR
               |? REZ.RODZ='W'
               || _tab.SRC+=REZ.ILR
               ?};
               REZ.next()
            !}
         ?};
         _tab.ZK_P_ZRE:=ZK_P.ILZ-ZK_P.ILP;
         _zkp_sym:='`'+ZK_P.N().SYM+'@'+form(ZK_P.POZ,,,'99')+'`';
         ~~
      ?};

      {? _rfr_pob>0
      || _tmp:=exec('zlim_pob_il','zl_limit',_tab.REF);
         _tab.ZLIM_POB:=_tmp.IL;
         _tab.RW_ZW:='N';
         {? _tmp.RW<>0 | _tmp.ZW<>0
         || _tab.RW_ZW:='T'
         ?};
         obj_del(_tmp)
      ?};
      _tab.put()
   ?};
:: teraz pora na zwrócenie wyniku
   _result[1]:=_tab.SR;
   _result[2]:=_tab.SRC;
   _result[3]:=_tab.ZK_P_ZRE;
   _result[4]:=_tab.ZLIM_POB;
   _result[5]:=_zkp_sym;
   ~~

|? _tab.X_KIND='G'
 & _tab.ZM='M'
||
   _tab.SR:=_result[1];
   _tab.SRC:=_result[2];
   _tab.ZK_P_ZRE:=_result[3];
   _tab.ZLIM_POB:=_result[4];
   _tab.put()
?};

REZ.cntx_pop();
ZK_N.cntx_pop();
ZK_P.cntx_pop();
ZL.cntx_pop();
SLO.cntx_pop();
M.cntx_pop();
_tab.cntx_pop();
_result


\zlim_gen4__Z
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: generowanie limitów/nielimitów w oknie tabeli tymczasowej (_ZLIMp.ZLIM) lub stałej ZLIM
::   WE: _a - 'T' limitowane, 'N' nielimitowane, '' lub jak brak parametru to wszystkie
::       _b - aktualne zlecenie dla którego uruchamiamy generowanie limitów
::       [_c] - _ZLIMp
::   WY: 0 / 1 - czy uruchomione generowanie
::UWAGA: zakładamy, ze pracujemy w okienku i __ZLIMp istnieje, ale sa zabezpieczenie, gdy nie ma
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

KOMM.init(250,,'Generowanie listy surowców','',,,,'GenerowanieLimitowZlecenia');
_Limit:={? var_pres('_a')=type_of('T')      || _a         || return() ?};
_curZL:={? var_pres('_b')=type_of(ZL.ref()) || _b         || return() ?};
_ZLIMp:={? var_pres('_c')>100               || _c         || ~~       ?};
  _zgh:={? var_pres('_c')>100               || _ZLIMp.ZGH || null()   ?};

_result:=0;

{? _Limit<>~~ & _curZL<>~~
||
   _f500011:=exec('get','#params',500011,2,null());
   _AutoAkc:=exec('get','#params',500010,2,null())='T' & _f500011<>'';
   _AutoRez:=exec('get','#params',500007,2,null())='T' & _f500011<>'';

   {!
   |? {? _Limit='N'
      || _choice:=FUN.choice(exec('form','#string','L',
            'Parametry generowania zapotrzebowań:'@,
            '',
            {? _Limit*'T' || '√' || '×' ?}+' '+'Surowce limitowane'@,
            {? _Limit*'N' || '√' || '×' ?}+' '+'Surowce nielimitowane'@,
            '',
            'Czy generować?'@
         ),,'OK'@);
         {? _choice=1 || _choice:=2 ?}
      || _choice:=FUN.choice(exec('form','#string','L',
            'Parametry generowania zapotrzebowań:'@,
            '',
            {? _Limit*'T' || '√' || '×' ?}+' '+'Surowce limitowane'@,
            {? _Limit*'N' || '√' || '×' ?}+' '+'Surowce nielimitowane'@,
            {? _AutoAkc || '√' || '×' ?}+' '+'Automatyczna akceptacja pozycji'@,
            {? _AutoRez || '√' || '×' ?}+' '+'Automatyczna rezerwacja zaakceptowanych limitów'@,
            '',
            'Czy generować?'@
         ),,'Modyfikuj parametry'@,'OK'@)
      ?};
      {? _choice=1
      || {? _f500011=''
         || FUN.emsg('Nie można zmienić opcji generowania limitów — brak ustawionego parametru 500011.'@)
         || _tab:=tab_tmp(,
               'AUTOAKC','INTEGER','Automatyczna akceptacja pozycji'@,
               'AUTOREZ','INTEGER','Automatyczna rezerwacja zaakceptowanych limitów'@
            );
            _red:=_tab.mk_edit('Parametry generowania listy surowców'@,0,'paramgen');
            _tab.win_efld(_red,,'AUTOAKC',,,,,,,,,'check-box',,"1","0");
            _tab.win_efld(_red,,'AUTOREZ',,,,,,,,,'check-box',,"1","0");
            _tab.win_ebtn(_red,'icon='+exec('ok','#icon')+',text='+'OK'@,'key:F2');
            _tab.win_ebtn(_red,'icon='+exec('anuluj','#icon')+',text='+'Anuluj'@,'key:Esc');
            _tab.win_edit(_red);
            _tab.AUTOAKC:=_AutoAkc;
            _tab.AUTOREZ:=_AutoRez;
            {? _tab.edit()
            || _AutoAkc:=_tab.AUTOAKC;
               _AutoRez:=_tab.AUTOREZ
            ?};
            obj_del(_tab)
         ?}
      ?};
      _choice=1
   !};

   {? _choice=2
   || KOMM.sect_beg('Parametry generowania listy surowców'@,7);
      KOMM.add('Surowce limitowane'@,{? _Limit*'T' || 1 || 147 ?});
      KOMM.add('Surowce nielimitowane'@,{? _Limit*'N' || 1 || 147 ?});
      {? _Limit<>'N'
      || KOMM.add('Automatyczna akceptacja pozycji'@,{? _AutoAkc || 1 || 147 ?});
         KOMM.add('Automatyczna rezerwacja zaakceptowanych limitów'@,{? _AutoRez || 1 || 147 ?})
      ?};
      KOMM.sect_end();
      VAR_DEL.delete('__matakt');
      __matakt:=tab_tmp(2
         ,'REF','STRING[16]',''
         ,'NRK','INTEGER',''
         ,'ILR','REAL',''
         ,'ZKP','STRING[16]',''
         ,'ZKN','STRING[16]',''
      );
      exec('zlim_gen_main','zl_limit',_Limit,_curZL,,,,,,,_AutoAkc,_AutoRez,_zgh);
      exec('openz','open_tab',ST.ODDZ+'__');
      exec('akt_rezy','rezerwacje',,1);
      VAR_DEL.delete('__matakt');
      KOMM.select();
      {? var_pres('_ZLIMp')>0 & cur_win(1,1)<>'WERNL'
      || exec('__ZLIM_datapump','zl_limit',_ZLIMp);
         _ZLIMp.ZLIM.first();
::         exec('zwrw_all','#tree','__ZLIMp.ZLIM','PARENT');
         win_disp()
      ?};
      _result:=1
   ?}
|| KOMM.select()
?};

_result


\zlim_gen_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: generowanie limitów do zlecenia / przewodnika / pozycji przewodnika
::   WE: _a - 'T' limitowane, 'N' nielimitowane, '' lub jak brak parametru to wszystkie
::       _b - aktualne zlecenie dla którego uruchamiamy generowanie limitów
::      [_c] - zlecenie nadrzędne do którego ewentualnie trzeba będzie dopinać limity
::      [_d] - wyświetlać parametry generowania? [0] - nie, 1- tak
::      [_e] - sprawdzać zatwierdzenie technologii? -  domyślnie (1)
::      [_f] - Informować o błędach? (ponowna akceptacja itp) - domyślnie (1)
::      [_g] - Sprawdzać zatwierdzenie limitów (domyślnie 1 - tak)
::      [_h] - Sprawdzać czy limit został sprawdzony (domyślnie 1 - tak)
::      [_i] - Czy automatyczna akceptacja limitów (domyślnie zależne od parametru 500010 i 500015)
::      [_j] - Czy automatyczna rezerwacja zaakceptowanych limitów (domyślnie zależne od parametru 500007)
::      [_k] - ZGH.ref()
::      [_l] - ZGP.ref() - dla technologii z surowcami do karty, pozycja przewodnika do której
::                         przypiąć limity
::      [_m] - tryb komunikowania o błędach: 0 - brak, 1 - na ekran, [2] - do KOMMa
::   WY: 1/0 formuła zakończyła się bez błędów
::----------------------------------------------------------------------------------------------------------------------
  _Limit:={? var_pres('_a')=type_of('T')       || _a || KOMM.error('[zlim_gen_main] Błędny typ parametru _a',0);~~ ?};
  _curZL:={? var_pres('_b')=type_of(ZL.ref())  || _b || KOMM.error('[zlim_gen_main] Błędny typ parametru _b',0);~~ ?};
  _nadZL:={? var_pres('_c')=type_of(ZL.ref())  || _c || null() ?};
  _param:={? var_pres('_d')=type_of(1)         || _d || 0 ?};
  _chktx:={? var_pres('_e')=type_of(1)         || _e || 1 ?};
    _err:={? var_pres('_f')=type_of(1)         || _f || 1 ?};
 _chklim:={? var_pres('_g')=type_of(1)         || _g || 1 ?};
 _chkspr:={? var_pres('_h')=type_of(1)         || _h || 1 ?};
_AutoAkc:={? var_pres('_i')=type_of(0)         || _i || exec('get','#params',500010,2,null())='T' & exec('get','#params',500015,2,null())='N'?};
_AutoRez:={? var_pres('_j')=type_of(0)         || _j || exec('get','#params',500007,2,null())='T' ?};
    _zgh:={? var_pres('_k')=type_of(ZGH.ref()) || _k || null() ?};
_zgp_lim:={? var_pres('_l')=type_of(ZGP.ref()) || _l || null() ?};

_dialog:=2;
{? var_pres('_m')=type_of(0)
|| _dialog:=_m
?};

:: jeśli nieprawidłowe parametry to koniec zabawy
{? _Limit=~~ | _curZL=~~ || return(0) ?};

{? _Limit='' || _Limit:='TN' ?};

_Zlec:=null();
_ZlDod:=null();
_ZlSrc:=null();

_gen_kind:=0;
::_sekcja:={? _param>=0 || KOMM.sect_beg('Zlecenie nie zostało znalezione') || 0 ?};
_ok:=1;

{? _curZL<>null()
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_curZL)
   ||
::      {? _sekcja || KOMM.update(_sekcja,'Zlecenie: '+ZL.SYM) ?};
      {? ZL.RODZAJ='P'
::       Zlecenie pojedyncze
      || {? ZL.NRNZL=0
::          Zlecenie samodzielne
         || _Zlec:=ZL.ref();
            _ZlDod:=null();
            _ZlSrc:=ZL.ref();
            1
::          Zlecenie podrzędne
         || _Zlec:=ZL.ref();
            _ZlDod:={? _nadZL=null() || exec('GetZLref4UNRZL','zl_common',ZL.NRNZL) || _nadZL ?};
            _ZlSrc:=ZL.ref();
            1
         ?}
      |? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
::       Zlecenie zlożone
      || {? ZL.NRNZL=0
::          Zlecenie główne - więc wchodzimy w każde podrzędne i mielimy
         || _Zlec:=ZL.ref();
            _ZlDod:=null();
            _ZlSrc:=null();
            ZL.index('STAN');
            ZL.prefix('T','N',ZL.UNRZL);
            {? ZL.first()
            || {!
               |? _ok*=exec('zlim_gen_main','zl_limit',
                     _Limit,ZL.ref(),_Zlec,_param,_chktx,_err,_chklim,_chkspr,_AutoAkc,_AutoRez,_zgh,_zgp_lim,_dialog
                  );
                  ZL.next()
               !}
            ?};
            1
         ?}
      ?}
   || _msg:='Zlecenie nie zostało odnalezione.'@;
      {? _dialog=1
      || FUN.emsg(_msg)
      |? _dialog=2
      || KOMM.add(_msg,2,,1)
      ?};
      _ok:=0
   ?};
   ZL.cntx_pop()
||
   _ok:=0
?};

{? _ok
|| _ok:=exec('genlim','zl_limit',_Zlec,_ZlDod,_ZlSrc,_Limit,_AutoAkc,_AutoRez,_chktx,_err,_chklim,_chkspr,0
      ,_zgh,_zgp_lim,_dialog)
?};
::{? _sekcja || KOMM.sect_end() ?};
_ok


\genlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Generowanie limitów
::   WE: _a - zlecenie, do którego generowane są limity
::       _b - zlecenie dodatkowe na limicie
::       _c - zlecenie, które jest źródłem technologii
::       _d - rodzaj generowanych danych:
::             'T' - limity, 'N' - nielimity, '' - 'T' + 'N'
::       _e - automatycznie zatwierdzaj
::       _f - automatycznie rezerwuj
::       _g - czy sprawdzać zatwierdzenie technologii
::       _h - Informować o błędach? (ponowna akceptacja itp) - domyślnie (1)
::       _i - Sprawdzać zatwierdzenie limitów (domyślnie 1 -tak)
::       _j - Sprawdzać czy limit został sprawdzony (domyślnie 1 -tak)
::       _k - czy aktualizacja zamówień (1 - tak)
::       _l - ZGH.ref()
::      [_m] - ZGP.ref() - dla technologii z surowcami do karty, pozycja przewodnika do której
::                         przypiąć limity
::      [_n] - tryb komunikowania o błędach: 0 - brak, 1 - na ekran, [2] - do KOMMa
::   WY: 1/0 formuła zakończyła się bez błędow
::
::  Formuła wywoływana ze exec('zlim_gen_main','zl_limit')
::UWAGA: Nie ma kontroli typów i wartości parametrów !!!
::----------------------------------------------------------------------------------------------------------------------
   _Zlec:=_a;
  _ZlDod:=_b;
  _ZlSrc:=_c;

  _Limit:=_d;
_AutoAkc:=_e;
_AutoRez:=_f;

  _chktx:=_g;
    _err:=_h;
 _chklim:=_i;
 _chkspr:=_j;

  _aktzk:=_k;

    _zgh:=_l;

_zgp_lim:={? var_pres('_m')=type_of(ZGP.ref()) || _m || null() ?};
_dialog:=2;
{? var_pres('_n')=type_of(0)
|| _dialog:=_n
?};

{? _Limit='' || _Limit:='TN' ?};

ZL.cntx_psh();   ZL.clear();
ZLIM.cntx_psh(); ZLIM.clear();
ZGH.cntx_psh();  ZGH.clear();
ZGP.cntx_psh();  ZGP.clear();

_ok:=1;
:: Na początek sprawdzenie, czy jest przewodnik do zlecenia
{? ZL.seek(_ZlSrc)
||
   ZGH.index('ZLNR');
   ZGH.prefix(_ZlSrc);
   {? ~ZGH.first()
   || _msg:='Zlecenie %1 musi mieć co najmniej jeden przewodnik, aby wygenerować limity'@[ZL.SYM];
      {? _dialog=1
      || FUN.emsg(_msg)
      |? _dialog=2
      || exec('komm_genlim','zl_limit',_msg)
      ?};
      _ok:=0
   ||
::    Czy zlecenie ma technologię własną?
      {? ZL.TYP().TECH='T'
      || {? ZL.TKTL=null()
         || _msg:='Do zlecenia %1 nie została wygenerowana technologia'@[ZL.SYM];
            {? _dialog=1
            || FUN.emsg(_msg)
            |? _dialog=2
            || exec('komm_genlim','zl_limit',_msg)
            ?};
            _ok:=0
         |? _chktx=1 & ZL.STAT_T='N'
         || _msg:='Technologia zlecenia %1 nie została zatwierdzona'@[ZL.SYM];
            {? _dialog=1
            || FUN.emsg(_msg)
            |? _dialog=2
            || exec('komm_genlim','zl_limit',_msg)
            ?};
            _ok:=0
         ?}

      |? ZL.TYP().TECH='N'
      || {? ZL.KTL=null()
         || {? ZL.RKTL<>''
            || _msg:='Dla zlecenia %1 przypisana jest archiwalna technologia'@[ZL.SYM];
               {? _dialog=1
               || FUN.emsg(_msg)
               |? _dialog=2
               || exec('komm_genlim','zl_limit',_msg,9)
               ?};
               _ok:=0
            || _msg:='Dla zlecenia %1 nie została określona technologia'@[ZL.SYM];
               {? _dialog=1
               || FUN.emsg(_msg)
               |? _dialog=2
               || exec('komm_genlim','zl_limit',_msg)
               ?};
               _ok:=0
            ?}
         || {? ~exec('tktl_act','tech_head',1)
            || {? _dialog>0 & FUN.ask('Do zlecenia %1 przypisana jest nieaktualna technologia.\n'
                                      'Czy generować limity zlecenia na jej podstawie?'@[ZL.SYM])
               || _ok:=1;
                  _msg:='Dla zlecenia %1 wygenerowano limity na podstawie nieaktualnej technologii'@[ZL.SYM];
                  {? _dialog=1
                  || FUN.emsg(_msg)
                  |? _dialog=2
                  || exec('komm_genlim','zl_limit',_msg)
                  ?}
               || _ok:=0;
                  _msg:='Nie wygenerowano limitów. Do zlecenia %1 przypisana jest nieaktualna technologia'@[ZL.SYM];
                  {? _dialog=1
                  || FUN.emsg(_msg)
                  |? _dialog=2
                  || exec('komm_genlim','zl_limit',_msg)
                  ?}
               ?}
            ?}
         ?}
      || KOMM.wdrerror('!!! Proszę sprawdzić formułę genlim/zl_limit.\nWystąpił dziwny warunek',0);
         _ok:=0
      ?};

      {? _ok
      || ZGH.index('ZLNR');
         ZGH.prefix(ZL.ref());
         {? ZGH.first()
         || {!
            |? {? _zgh=null() | ZGH.ref()=_zgh
               || ZGP.index('NNN');
                  ZGP.prefix(ZGH.ref());
                  {? ZGP.first()
                  || _result:=exec('genlim_one','zl_limit',_Zlec,_ZlDod,_ZlSrc,_Limit,_AutoAkc,_AutoRez,
                                                  _chktx,_err,_chklim,_chkspr,ZGH.ref(),_aktzk,_zgp_lim,_dialog);
                     {? _result
                     || {? _Limit*'T'>0 || ZGH.GEN_L:='T' ?};
                        {? _Limit*'N'>0 || ZGH.GEN_N:='T' ?};
                        ZGH.put()
                     ?};
                     _ok*=_result
                  || _msg:='Przewodnik %1 musi mieć co najmniej jedną pozycję, aby wygenerować limity'@[ZGH.NRPRZ];
                     {? _dialog=1
                     || FUN.emsg(_msg)
                     |? _dialog=2
                     || exec('komm_genlim','zl_limit',_msg)
                     ?};
                     _ok:=0
                  ?}
               ?};
               ZGH.next()
            !}
         ?}
      ?}
   ?}
?};

ZL.cntx_pop();
ZLIM.cntx_pop();
ZGH.cntx_pop();
ZGP.cntx_pop();
_ok


\genlim_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Generowanie limitu do przewodnika, albo bez przewodnika
::   WE: _a  - zlecenie, do ktorego generowane sa limity
::       _b  - zlecenie dodatkowe na limicie
::       _c  - zlecenie, ktore jest zrodlem technologii
::       _d  - rodzaj generowanych danych:
::             'T' - limity, 'N' - nielimity, '' - 'T' + 'N'
::       _e  - automatycznie zatwierdzaj
::       _f  - automatycznie rezerwuj
::       _g  - czy sprawdzac zatwierdzenie technologii
::       _h  - Informowac o bledach? (ponowna akceptacja itp) - domyslnie (1)
::       _i  - Sprawdzac zatwierdzenie limitow (domyslnie 1 -tak)
::       _j  - Sprawdzac czy limit zostal sprawdzony (domyslnie 1 -tak)
::       _k  - ZGH.ref()
::       _l  - czy aktualizowac zamowienie (1 - tak)
::      [_m] - ZGP.ref() - dla technologii z surowcami do karty, pozycja przewodnika do której
::                         przypiąć limity
::      [_n] - tryb komunikowania o błędach: 0 - brak, 1 - na ekran, [2] - do KOMMa
::   WY: 1/0 formula zakonczyla sie bez bledow
::
::  Formula wywolywana z exec('genlim','zl_limit')
::UWAGA: Nie ma kontroli typow i wartosci parametrow !!!
::----------------------------------------------------------------------------------------------------------------------
   _Zlec:=_a;
  _ZlDod:=_b;
  _ZlSrc:=_c;

  _Limit:=_d;
_AutoAkc:=_e;
_AutoRez:=_f;

  _chktx:=_g;
    _err:=_h;
 _chklim:=_i;
 _chkspr:=_j;

    _Zgh:=_k;

  _aktzk:=_l;

_zgp_lim:={? var_pres('_m')=type_of(ZGP.ref()) || _m || null() ?};

_dialog:=2;
{? var_pres('_n')=type_of(0)
|| _dialog:=_n
?};

'-*- 12.46 -*- uproszczona edycja zleceń';
_tmat:={? var_pres('__nTmat')>0
       || __nTmat
       || null()
       ?};

TMAT.cntx_psh();
ZL.cntx_psh();  ZL.clear();
ZGH.cntx_psh(); ZGH.clear();
ZGP.cntx_psh(); ZGP.clear();

_ok:=1;
:: Zlecenie jest zawsze, ale na wszelki wypadek tutaj seek
{? ZL.seek(_ZlSrc) & ZGH.seek(_Zgh)
||
   ZGP.index('PNRPP');
   ZGP.prefix(ZGH.ref(),'N');
   {? ZGP.first() || _Zgp_1:=ZGP.ref() || _Zgp_1:=null() ?};
   _Zgp:=null();
   _Zgh_nr:=' '+'(przewodnik %1)'@[ZGH.NRPRZ];

   _tktl:={? ZL.RTKTL<>''
          || exec('FindAndGet','#table',TKTL,ZL.RTKTL,,,null())
          || exec('FindAndGet','#table',TKTL,ZL.RKTL,,,null())
          ?};
:: Otwieram maske TMAT
   _msk_tktl:=ref_name(_tktl);
   _msk_tmat:=(TMAT.name()-3)+(_msk_tktl+3);
   {? _msk_tmat<>'' & _msk_tmat<>TMAT.name()
   || TMAT.use(_msk_tmat)
   ?};

   TMAT.index('ANNL');
   TMAT.prefix('T',_tktl);

   _xjm:=1;
   {? ZL.RTKTL<>''
   || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"XJM",1)
   |? ZL.RKTL<>''
   || _xjm:=exec('FindAndGet','#table',TKTL,ZL.RKTL,,"XJM",1)
   ?};
   _wsp:=ZGH.ILNPRZ/_xjm;

   _can_continue:=1;

   _args_core:=exec('genlim_args','zl_limit');
   _args_core.ZL:=_Zlec;
   _args_core.ZLDOD:=_ZlDod;
   _args_core.COEF:=_wsp;
   _args_core.AUTO_AKC:=_AutoAkc;
   _args_core.AUTO_REZ:=_AutoRez;
   _args_core.ERROR:=_err;
   _args_core.CHK_LIM:=_chklim;
   _args_core.CHK_SPR:=_chkspr;
   '-*- 12.46 -*- uproszczona edycja zleceń';
   _args_core.TMAT:=_tmat;
   _args_core.DIALOG:=_dialog;

   exec('stop_tpar','tech_param');
   tpar:=obj_new(@.CLASS.TPAr);
   tpar.TABLE:=TPAR;
   tpar.INDEX:='NN';
   tpar.PREFIX:=_tktl;
   tpar.KTM:=ZL.KTM;
   tpar.loadp();

   {? TMAT.first()
   ||
::      _sect_txt:=
::         {? _Limit='TN' || 'Pozycje limitów i surowców nielimitowanych'@
::         |? _Limit='T'  || 'Pozycje limitów'@
::         |? _Limit='N'  || 'Pozycje surowców nielimitowanych'@
::                        || 'Pozycje'@
::         ?}+
::         ' '+'generowane na podstawie technologii wzorcowej'@+_Zgh_nr;
::      _sekcja:=KOMM.sect_beg(_sect_txt,7);
      {? _aktzk
      || VAR_DEL.delete('__matakt');
         __matakt:=tab_tmp(2
            ,'REF','STRING[16]',''
            ,'NRK','INTEGER',''
            ,'ILR','REAL',''
            ,'ZKP','STRING[16]',''
            ,'ZKN','STRING[16]','')
      ?};

      {!
      |?
         {? TMAT.EXIST<>''
         || _exist:=tpar.calc(TMAT.EXIST)
         || _exist:=1
         ?};
         _tree_typ:=exec('FindAndGet','#table','ZL',_Zlec,,"ZL.TREE_TYP",'');
         {? _exist & _Limit*TMAT.LIMIT & (_tmat=null() | TMAT.ref()=_tmat)
:: Skąd zgadnąć, że nie mam generować limitów dla półfabrykatów? Jak jestem z zleceniu struktury złożonego?
            & (_tree_typ='P' | (_tree_typ<>'P' & (TMAT.RKTL='' & TMAT.DFLT_KTL='N' | TMAT.MAG<>'N')))
::          Jeżeli wskazano konkretny ZGP to przetwrzane wyłączanie TMATy, które nie mają przypisanej operacji
            & (_zgp_lim=null() | TMAT.NROP=null())
         ||
::          Nie wskazano konkretnego ZGP
            {? _zgp_lim=null()
            ||
::             Surowiec przypisany do operacji
               {? TMAT.NROP<>null()
               || ZGP.index('TOPERPOD');
                  ZGP.prefix(ZGH.ref(),$TMAT.NROP);
                  _can_continue:=ZGP.first()
::             Surowiec przypisany do karty
::             - sprawdzamy czy są surowce do któregoś ZGP, jeśli nie to generowanie do pierwszego
               || _jest_zlim:=0;
                  ZGP.index('PNRPP');
                  ZGP.prefix(ZGH.ref(),'N');
                  {? ZGP.first()
                  || {!
                     |? ZLIM.cntx_psh();
                        ZLIM.index('ZGP_M');
                        ZLIM.prefix(ZGP.ref());
                        {? ZLIM.first() || _jest_zlim:=1 ?};
                        ZLIM.cntx_pop();
                        _jest_zlim=0 & ZGP.next()
                     !}
                  ?};
                  {? _jest_zlim>0
                  || _can_continue:=1
                  || _can_continue:=ZGP.first()
                  ?}
               ?}
::          Wskazany konkretny ZGP
            |? _zgp_lim<>null()
            || ZGP.prefix();
               _can_continue:=ZGP.seek(_zgp_lim);
               {? _can_continue>0
               ||
::                Zlecenie do którego będzie należał limit i zlecenie podanej pozycji przewodnika
::                musi się zgadzać
                  {? ZGP.ZL<>_Zlec
                  || _can_continue:=0
                  ?}
               ?}
            ?};

            {? _can_continue>0
            ||
               {? TMAT.NROP=null()
               ||
                  _toper:=ZGP.TOPER;
                  {? ZGP.PL_SPLIT<>null() & ZGP.BRAKI_K=null()
                  ||
::                   TMAT nie ma operacji więc generuję limit do pierwszego ZGPa
::                   i wszystkich pozostałych ZGPów z tego samego podziału

                     ZGP.cntx_psh();
                     ZGP.index('PL_SPLIT');
                     ZGP.prefix(ZGP.PL_SPLIT);
                     {? ZGP.first()
                     || {!
                        |? _args_core.ZGP:=ZGP.ref();
                           _old_coef:=_args_core.COEF;
                           {? ZGP.TOPER=_toper & (ZGP.NRPRZ=_Zgh | ZGP.NRZLP=_Zgh)
                           ||
                              {? ZGP.ILOSC<>ZGH.ILNPRZ
                              ||
::                               Ilość na pozycji przewodnika jest inna niż na nagłówku przewodnika, więc
::                               muszę obliczyć dodatkowy współczynnik który spowoduje zmianę norm na limitach
                                 _coef:=1;
                                 {? ZGH.ILNPRZ>0
                                 || _coef:=ZGP.ILOSC/ZGH.ILNPRZ
                                 ?};
                                 _args_core.COEF:=_args_core.COEF*_coef
                              ?};
                              {? exec('genlim_core','zl_limit',_args_core)<=0
                              || _ok:=0
                              ?}
                           ?};
                           _args_core.COEF:=_old_coef;
                           ZGP.next()
                        !}
                     ?};
                     ZGP.cntx_pop()
                  ||
::                   TMAT nie ma operacji więc generuję limit do pierwszego ZGPa
                     _args_core.ZGP:=ZGP.ref();
                     _old_coef:=_args_core.COEF;
                     {? ZGP.ILOSC<>ZGH.ILNPRZ
                     ||
::                      Ilość na pozycji przewodnika jest inna niż na nagłówku przewodnika, więc
::                      muszę obliczyć dodatkowy współczynnik który spowoduje zmianę norm na limitach
                        _coef:=1;
                        {? ZGH.ILNPRZ>0
                        || _coef:=ZGP.ILOSC/ZGH.ILNPRZ
                        ?};
                        _args_core.COEF:=_args_core.COEF*_coef
                     ?};
                     {? exec('genlim_core','zl_limit',_args_core)<=0
                     || _ok:=0
                     ?};
                     _args_core.COEF:=_old_coef
                  ?}
               ||
::                TMAT ma operację więc każdemu ZGPowi który powstał na podstawie tej operacji
::                generuję limit
                  {? _zgp_lim=null()
                  ||
                     {!
                     |? _args_core.ZGP:=ZGP.ref();
                        _old_coef:=_args_core.COEF;
                        {? ZGP.ILOSC<>ZGH.ILNPRZ
                        ||
::                         Ilość na pozycji przewodnika jest inna niż na nagłówku przewodnika, więc
::                         muszę obliczyć dodatkowy współczynnik który spowoduje zmianę norm na limitach
                           _coef:=1;
                           {? ZGH.ILNPRZ>0
                           || _coef:=ZGP.ILOSC/ZGH.ILNPRZ
                           ?};
                           _args_core.COEF:=_args_core.COEF*_coef
                        ?};
                        {? exec('genlim_core','zl_limit',_args_core)<=0
                        || _ok:=0
                        ?};
                        _args_core.COEF:=_old_coef;
                        ZGP.next()
                     !}
                  ?}
               ?}
            ||
::             Brak pozycji przewodnika, jest przewodnik techniczny
               {? exec('FindAndGet','#table',ZGP,_Zgp_1,,"NRPRZ().KIND='T'",0)
               || _args_core.ZGP:=_Zgp_1;
                  exec('genlim_core','zl_limit',_args_core)
               ?}
            ?}
         ?};
         TMAT.next()
      !};

      {? _aktzk
      || exec('akt_rezy','rezerwacje',,1);
         VAR_DEL.delete('__matakt')
      ?};
::      KOMM.sect_end();
::      {? _args_core.KOMMEMPT>0
::      || KOMM.del(_sekcja)
::      ?};
      ~~
   ?};

   exec('stop_tpar','tech_param')
?};
TMAT.cntx_pop();
ZL.cntx_pop();
ZGH.cntx_pop();
ZGP.cntx_pop();
_ok


\genlim_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Tablica parametrów dla genlim_core
::   WY: _args
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
::             Pozycja przewodnika do której przypiąć limit
               'ZGP'
::             Zlecenie dla limitu
               ,'ZL'
::             Zlecenie dodatkowe na limicie
               ,'ZLDOD'
::             Czy usuwać sekcję w KOMMie po wykonaniu generowania
               ,'KOMMEMPT'
::             Współczynnik którym potraktować normę na limicie
               ,'COEF'
::             Czy po dodaniu limitu automatycznie go zaakceptować
               ,'AUTO_AKC'
::             Czy po dodaniu limitu automatycznie go zarezerwować
               ,'AUTO_REZ'
::             Czy informować o błędach podczas akceptacji
               ,'ERROR'
::             Czy sprawdzać limity przed akceptacją
               ,'CHK_LIM'
::             Czy sprawdzać czy limit został sprawdzony
               ,'CHK_SPR'
::             TMAT dla którego została wywołana funkcja
               ,'TMAT'
::             Ttryb komunikowania o błędach: 0 - brak, 1 - na ekran, [2] - do KOMMa
               ,'DIALOG'
              );
'-*- 12.46 -*- uproszczona edycja zleceń';
_args.ZGP:=null();
_args.ZL:=null();
_args.ZLDOD:=null();
_args.KOMMEMPT:=1;
_args.COEF:=1;
_args.AUTO_AKC:=1;
_args.AUTO_REZ:=1;
_args.ERROR:=1;
_args.CHK_LIM:=1;
_args.CHK_SPR:=0;
'-*- 12.46 -*- uproszczona edycja zleceń';
_args.TMAT:=null();
_args.DIALOG:=2;
_args


\genlim_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Jądro funkcji dodającej limit
::       KONTEKST - Rekord TMAT, zainicjowany obiekt tpar
::   WE:  _a - ZGP.ref - lub bieżący rekord
::        _b - ZL.ref - zlecenie, do ktorego generowane sa limity
::        _c - ZL.ref - zlecenie dodatkowe na limicie
::        _d - identyfikator sekcji w KOMM
::        [_e] - REAL - współczynnik do generowania normy na limicie (domyślnie 1)
::        [_f] - INTEGER - 0/[1] - czy po dodaniu limitu automatycznie go zatwierdzić
::        [_g] - INTEGER - 0/[1] - czy po dodaniu limitu automatycznie go zarezerwować
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('genlim_args','zl_limit')
?};

_result:=0;
_can_continue:=1;
ZGP.cntx_psh();
ZLIM.cntx_psh();
ZLIM.index('ZGP_M');
_ktm:=null();
{? TMAT.GRKTM='G' || _ktm:=TMAT.TGDFLT().PT || _ktm:=TMAT.PT ?};
ZLIM.prefix(_args.ZGP,_ktm);

:: Podczytanie materiału
{? TMAT.GRKTM='G' || TMAT.TGDFLT().PT() || TMAT.PT() ?};

_tech_guid:=exec('FindAndGet','#table',ZGP,_args.ZGP,,"NRZLP().KIND='T'",0);
_rodzaj:=exec('top_rodzaj','zl_link',_args.ZL);
_is_pod:=0;
{? _rodzaj='Z'
|| ZL.cntx_psh();
   ZL.index('TREEMTU');
   ZL.prefix(#_args.ZL,_ktm);
   {? ZL.first() & exec('is_podzlec4mag','zl_link')=0
   || _is_pod:=1
   ?};
   ZL.cntx_pop()
?};

:: jak podrzędne montażowe i półfabrykatowe, technologia bez operacji (przewodnik techniczny), półfabrykat,
:: jest podzlecenie na to samo, to nie generujemy do pozycji limitów
{? _rodzaj='Z' & _tech_guid & (TMAT.KTL<>null() | TMAT.DFLT_KTL='T') & _is_pod>0
|| _can_continue:=1

|? ZLIM.size()=0
||
   _kommdel:=0;
::   _sekcja2:=KOMM.sect_beg(
::      '('+M.KTM+') '+M.N+
::      ' — '+{? M.R='P'|| 'półprodukt'@
::            |? M.R='S'|| 'surowiec'@
::                      || ''
::            ?}+
::      ' '+{? TMAT.LIMIT<>'T'|| 'nielimitowany'@ || 'limitowany'@ ?}
::   );

:: nie znalezniony?, to szybko zakladamy i blokujemy do swoich potrzeb
   ZLIM.blank(1);
   ZLIM.OLD:='N';
   ZLIM.ZLEC:=_args.ZL;
   ZLIM.LIMIT:=TMAT.LIMIT;
   ZLIM.KTM:=_ktm;
   ZLIM.ZGP:=_args.ZGP;
   ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',_args.ZL,ZLIM.LIMIT);
   ZLIM.BORNSTAT:=ZLIM.ZLEC().STAN;
   DK_C.cntx_psh();
   _dkc:=exec('create_dkc','zl_common',ZL.DK_C,TMAT.DK_C,TMAT.ATR_MASK,_ktm);
   _name:=ref_name(TMAT.DK_C);
   {? _name<>'' & _name<>DK_C.name() || DK_C.use(_name) ?};
   ZLIM.DK_C:=_dkc;
   _can_continue:=ZLIM.add(1);
   {? _can_continue>0
   ||
      {? _can_continue>0
      || {? ZLIM.LIMIT='N'
         || exec('zlim_split_fill','po_split',_args.ZGP,ZLIM.ref())
         ?}
      ?};

      ZLIM.r_lock(1,1,1);
      ZLIM.AKC:='N';
      ZLIM.AUTO:='T';
      ZLIM.ZLDOD:=_args.ZLDOD;

      ZLIM.TMAT:=TMAT.ref();
      ZLIM.PFAZ:=TMAT.PFAZ;
      ZLIM.MODE_DST:=TMAT.MODE_DST;
      ZLIM.ROZ:=TMAT.ROZ;
      ZLIM.WYD:=exec('GetZLIM_WYD','zl_limit');
      ZLIM.SO:=TMAT.SO;
::    Ustalenie magazynu
      exec('zlim_set_mg','zl_limit1',1);

      _dt:=exec('datetime','zl_limit',_args.ZGP);
      ZLIM.STARTD:=_dt.DATE;
      ZLIM.STARTT:=_dt.TIME;
      obj_del(_dt);

      ZLIM.KTM();
      _ilezl:=0;

      {? TMAT.MAG<>'P' & (TMAT.KTL<>null | TMAT.DFLT_KTL='T' | TMAT.RKTL<>'')
      || _ilezl:=exec('ilezl','zl_common',TMAT.ref(),ZLIM.ZLEC().UNRZL)
      ?};

      _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
      {? _dokl>0
      || _rm:=roundmet();
         roundmet(2);
         {? TMAT.FORMB<>''
         || _il_raw:=tpar.calc(TMAT.FORMB)*_args.COEF;
            ZLIM.LIL:=_il_raw$_dokl-_ilezl;
            ZLIM.IL_RAW:=_il_raw-_ilezl
         || _il_raw:=TMAT.WARB*_args.COEF;
            ZLIM.LIL:=_il_raw$_dokl-_ilezl;
            ZLIM.IL_RAW:=_il_raw-_ilezl
         ?};
         roundmet(_rm)
      || {? TMAT.FORMB<>''
         || _il_raw:=tpar.calc(TMAT.FORMB)*_args.COEF;
            ZLIM.LIL:=exec('ceil','#math',_il_raw)-_ilezl;
            ZLIM.IL_RAW:=_il_raw-_ilezl
         || _il_raw:=TMAT.WARB*_args.COEF;
            ZLIM.LIL:=exec('ceil','#math',_il_raw)-_ilezl;
            ZLIM.IL_RAW:=_il_raw-_ilezl
         ?}
      ?};

      ZLIM.PARTIA:=TMAT.PARTIA;
      _il_zero:=exec('zlim_chk4il','zl_nlimit');
      _ok:={? _il_zero>0 || 1 || ZLIM.LIL>0 ?};
      {? _ok>0
      || _can_continue:=ZLIM.put();
         {? _can_continue>0
         || {? _args.AUTO_AKC>0 & ZLIM.LIMIT='T'
            || '-*- 12.46 -*- uproszczona edycja zleceń';
               _can_continue:=exec('ZLIM_akc','zl_limit',_args.DIALOG,ZLIM.ref(),_args.ERROR,_args.CHK_LIM,_args.CHK_SPR,_args.AUTO_REZ,{? _args.TMAT || 1 || 0 ?})
            ?};
::          Jeżeli zlecenie zostało wygenerowane na podstawie stanów magazynowych to sprawdzam, czy nie było
::          robionej rezerwacji na surowiec (obsługa dedykowanych rezerwacji dla nielimitów)
            {? ZLIM.LIMIT='N' & exec('zl_from_sm','zl_head',ZLIM.ZLEC)>0
            || _tmat_src:=exec('FindAndGet','#table',TMAT,ZLIM.TMAT,,"{? SRC<>'' || SRC || $ref() ?}",'');
               REZ.cntx_psh();
               REZ.use((REZ.name()-2)+'__');
               REZ.index('ZLMREZ');
               REZ.prefix(ZLIM.ZLEC,'S','B',ZLIM.KTM,'T',_tmat_src);
               {? REZ.first()
               || _dorozp:=ZLIM.LIL;
                  {!
                  |?
                     {? REZ.ILR<=_dorozp
                     ||
::                      Cała rezerwacja zmienia się na dedykowaną rezerwację na nielimity
                        _ilr:=REZ.ILR;
                        REZ.ZL_REZ:='P';
                        REZ.REFREA:='';
                        REZ.REFSQL:=REZ.ZLIM:=$ZLIM.ref();
                        REZ.ZGP:=$ZLIM.ZGP;
::                        REZ.DODT:=date()+365;
                        REZ.DODT:=date(0,0,0);
                        REZ.BTERM:='T';
                        REZ.cntx_psh();
                        REZ.prefix();
                        {? REZ.put()
                        || _dorozp-=_ilr
                        ?};
                        REZ.cntx_pop()
                     ||
::                      Wydzielenie części z rezerwacji
::                      Zmniejszenie ilości z rezerwacji źródłowej
                        _ilr:=_dorozp;
                        REZ.ILR-=_ilr;
                        {? REZ.put()
                        ||
::                         Dodanie nowej rezerwacji dedykowanej na nielimity
                           REZ.ZL_REZ:='P';
                           REZ.REFREA:='';
                           REZ.REFSQL:=REZ.ZLIM:=$ZLIM.ref();
                           REZ.ZGP:=$ZLIM.ZGP;
::                           REZ.DODT:=date()+365;
                           REZ.DODT:=date(0,0,0);
                           REZ.BTERM:='T';
                           REZ.ILR:=_ilr;
                           REZ.cntx_psh();
                           REZ.prefix();
                           {? REZ.add()
                           || _dorozp-=_ilr
                           ?};
                           REZ.cntx_pop()
                        ?}
                     ?};
                     _dorozp>0 & REZ.first()
                  !}
               ?};
               REZ.cntx_pop()
            ?};
::            KOMM.update(_sekcja2,,38,'0:200:0');
            _args.KOMMEMPT:=0;
            ZLIM.r_unlock();
            '-*- 12.46 -*- uproszczona edycja zleceń';
            {? _args.TMAT
            || exec('add__zlim','zl_limit')
            ?}
         || ZLIM.r_unlock();
::            KOMM.update(_sekcja2,,81,'200:0:0');
            _what:=exec('M','#to_string',_ktm);
            _msg:='Podczas tworzenia limitu na: %1 wystąpił błąd - limit nie został wygenerowany.'@[_what];
            {? _args.DIALOG=1
            || FUN.emsg(_msg)
            |? _args.DIALOG=2
            || exec('komm_genlim','zl_limit',_msg)
            ?};
::            KOMM.info('podczas tworzenia limitu wystąpił błąd — limit nie został wygenerowany',0);
            _args.KOMMEMPT:=0;
            _can_continue:=ZLIM.del(,1);
            {? _can_continue>0
            || _can_continue:=0
            ?}
         ?}
      || ZLIM.r_unlock();
         _kommdel:=1;
         _can_continue:=ZLIM.del(,1)
      ?}
   ||
::      KOMM.update(_sekcja2,,14,'200:0:0');
::      KOMM.info('podczas tworzenia limitu wystąpił błąd — limit nie został wygenerowany',0);
      _what:=exec('M','#to_string',_ktm);
      _msg:='Podczas tworzenia limitu na: %1 wystąpił błąd - limit nie został wygenerowany.'@[_what];
      {? _args.DIALOG=1
      || FUN.emsg(_msg)
      |? _args.DIALOG=2
      || exec('komm_genlim','zl_limit',_msg)
      ?};
      _can_continue:=0;
      _args.KOMMEMPT:=0
   ?};
::   KOMM.sect_end();
::   {? _kommdel>0
::   || KOMM.del(_sekcja2)
::   ?};
   DK_C.cntx_pop();
   ~~
?};
ZGP.cntx_pop();
ZLIM.cntx_pop();
ZLIM.get();
{? _can_continue>0
|| _result:=1
?};
_result


\is_zlim_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy do ZL są przypisane limity
::   WE: _a - ZL.ref()
::       [_b] - jakie surowce sprawdzać: T -surowce limitowane , N - surowce nielimitowane, O - odpady
::             domyslnie wszystkie [TNO]
::       Nie jest sprawdzana obecność ani typ argumentów
::   WY: 0 / 1
::  OLD: \is_zlim_zl/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_what:={? var_pres('_b')=type_of('') & _b<>'' || _b || 'TNO' ?};
_chk_lim:={? _what*'T'>0 || 1 || 0 ?};
_chk_nlim:={? _what*'N'>0 || 1 || 0 ?};
_chk_odp:={? _what*'O'>0 || 1 || 0 ?};
_chk_all:=_chk_lim & _chk_nlim & _chk_odp;
_res:=0;

exec('openmask','zl_common',_zl);
ZLIM.index('ZNO');
{? _chk_all>0
|| ZLIM.prefix(_zl);
   _res:=ZLIM.first()
|| {? _res=0 & _chk_lim>0
   || ZLIM.prefix(_zl,'T','S');
      _res:=ZLIM.first()
   ?};
   {? _res=0 & _chk_odp>0
   || ZLIM.prefix(_zl,'T','O');
      _res:=ZLIM.first()
   ?};
   {? _res=0 & _chk_nlim>0
   || ZLIM.prefix(_zl,'N');
      _res:=ZLIM.first()
   ?}
?};
_res


\inherit_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Sprawdza czy na zleceniu istnieją takie limity które odziedziczyły wartość atrybutu z nagłówka zlecenia
::       a jeśli tak to czy aktualna wartość atrybutu na limicie jest zgodna z atrybutem na zleceniu
::   WE: _a - ZL.ref()
::       [_b] - bufor zlecenia który trzyma wartości atrybutów, jeśli nie podany to wypełniany na podstawie _a
::   WY: 0 - brak limitów które dziedziczyły cechę lub wartości zgodne ze zleceniem
::       1 - były takie limity które dziedziczyły cechę i wartości na limicie i zleceniu różne
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;

_buf_zl:=~~;
{? var_pres('_b')>100
|| _buf_zl:=_b
?};

_result:=0;
_can_continue:=1;

ZLIM.cntx_psh();
DK_C.cntx_psh();
ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl)
||
   {? ZL.DK_C<>null()
   ||
      _sect_lp:=KOMM2.sect_beg('Zlecenie: '+ZL.SYM);
      exec('openmask','zl_common',ZL.ref());
      {? ( ZL.RODZAJ='Z' & ZL.GENLIM='N')
       | ( ZL.RODZAJ='P' & ( ZL.GENLIM='P' | ZL.NRNZL=0) )
      || 'Generowane do nadrzednego';
         ZLIM.index('ZLMZLD_R')
      |? (ZL.RODZAJ='Z' & ZL.GENLIM='P')
       | (ZL.RODZAJ='P' & ZL.GENLIM='N' & ZL.NRNZL<>0)
      || 'Generowane do podrzednego';
         ZLIM.index('ZLDZLRM')
      || ZLIM.index('ZLMZLD_R')
      ?};

      ZLIM.prefix(ZL.ref());

::    Bufor atrybutow limitu (modyfikowany pozniej)
      _buf_limit:=exec('buffer','mat_atr');

::    Bufor atrybutow limitu (oryginalny)
      _buf_org:=exec('buffer','mat_atr');

::    Bufor atrybutow zlecenia
      {? type_of(_buf_zl)=0
      ||
         _buf_zl:=exec('buffer','mat_atr');
::       Podczytuje bufor zlecenia
         {? ZL.DK_C<>null() & ref_name(ZL.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZL.DK_C)) ?};
         ZL.DK_C();
         _buf_zl.get_dkc()
      ?};

      {? ZLIM.first()
      || {!
         |?
            _buf_limit.blank();
            _buf_org.blank();
            {? ZLIM.DK_C<>null()
            ||
               ZLIM.DK_C();
::             Podczytuje bufor limitu
               _buf_limit.get_dkc();
               _buf_org.get_dkc()
            || M.cntx_psh(); M.clear();
               M_ATR.cntx_psh();
               {? ZLIM.KTM<>null()
               || {? ZLIM.KTM().M_ATR<>null()
                  ||
::                   Podczytuje M_ATR limitu
                     ZLIM.KTM().M_ATR();
::                   Ustawiam bufor limitu na odpowiedniego M_ATRa (typy)
                     _buf_limit.get_matr();
                     _buf_org.get_matr()
                  ?}
               ?};
               M_ATR.cntx_pop();
               M.cntx_pop()
            ?};

            _mask:='';
            {? ZLIM.TMAT<>null()
            ||
::             Limit powstal na podstawie TMATa
               _mask:=ZLIM.TMAT().ATR_MASK
            ?};
            {? _mask*'T'>0
            ||
::             Do bufora limitu dziedzicze aktualny bufor zlecenia
               _buf_limit.inherit(_buf_zl,_mask);

::             Czyszcze wartosci ktore nie mialy byc dziedziczone
               _buf_limit.clr4msk(_mask);

::             Porownuje oryginalny bufor limitu z buforem zmodyfikowanym (dziedziczonym po zleceniu) ignorujac wartosci
::             ktore nie mialy byc dziedziczone
               _compare:=_buf_org.compare(_buf_limit,1);
               {? _compare<0
               ||
::                Jesli w wyniku porownania jest ujemna wartosc to znak ze aktualne atrybuty limitu koliduja
::                z atrybutami zlecenia - pobieram sobie piewsza rozna wartosc i ja dodaje do komunikatu - reszta roznic
::                NIE zostanie dodana do komunikatow zeby nie zaciemnic
                  _result:=1;
                  _num:=_compare*-1;
                  _fit:=form(_num,-2,0,'99');
                  _rule_war:=$('_buf:=_a;_buf.WAR'+_fit);
                  _rule_nam:=$('_buf:=_a;_buf.TAT_NA'+_fit);

                  _war_limit:=_rule_war(_buf_org);
                  {? _war_limit=''
                  || _war_limit:='<brak wartości>'
                  ?};
                  _nam_limit:=_rule_nam(_buf_org);

                  _war_zl:=_rule_war(_buf_limit);
                  {? _war_zl=''
                  || _war_zl:='<brak wartości>'
                  ?};
                  _nam_zl:=_rule_nam(_buf_limit);

                  _msg:='Surowiec: '+ZLIM.KTM().KTM+'. Atrybut: '+_nam_limit+'. Limit: '+_war_limit+' <> zlecenie: '+_war_zl;
                  KOMM2.add(_msg,'xwin16.png:7')
               ?}
            ?};
            ZLIM.next()
         !}
      ?};
      KOMM2.sect_end();
      {? _result=0
      || KOMM2.del(_sect_lp)
      ?}
   ?}
?};
DK_C.cntx_pop();
ZLIM.cntx_pop();
ZL.cntx_pop();
_result


\usunlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Usunięcie limitów zlecenia
::   WE: _a - ZL.ref()
::       [_b] - usuwanie calego zlecenia (1 - usuwa limity nawet, jak jest zatwierdzenie zlecenia pod wzgledem limitów)
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \usunlim/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

_zl:=_a;
{? var_pres('_b')=type_of(0) || _brut:=_b || _brut:=0 ?};

ZL.cntx_psh();

ZLIM.cntx_psh();
ZLIM.index('ZN');
ZLIM.prefix(_zl);
exec('utw_zk_tymc','zamsiw_wspolne');

{? ZLIM.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      ZLIM.cntx_psh();
      {? ZLIM.next()
      || _ref_nxt:=ZLIM.ref()
      ?};
      ZLIM.cntx_pop();

      _can_continue:=exec('ZLIM_del_brut','zl_limit',_brut);

      {? _ref_nxt<>null()
      || _next:=ZLIM.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};
exec('odt_zk_tymc','zamsiw_wspolne');
ZLIM.cntx_pop();

{? _can_continue>0
|| ZGH.cntx_psh();
   ZGH.index('ZLNR');
   ZGH.prefix(_zl);
   {? ZGH.first()
   || {!
      |? ZGH.GEN_L:='N';
         ZGH.GEN_N:='N';
         ZGH.put();
         ZGH.next()
      !}
   ?};
   ZGH.cntx_pop()
?};
ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\ilosc_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca ilosc dla DK powiazanych z limitem
::   WE: _a - ZLIM.ref()
::       [_b] - INTEGER -  1 - zliczac ilosc tylko wsrod dokumentow zaakeceptowanych
::                        [0] - zliczac ilosc wsrod wszystkich dokumentow
::   WY: REAL
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;
_only_akc:=0;
{? var_pres('_b')=type_of(0)
|| _only_akc:=_b
?};

_result:=0;

{? _zlim<>null()
||
   ZL.cntx_psh();
   ZLIM.cntx_psh();
   ZLIM.use(ref_name(_zlim));
   ZLIM.clear();
   {? ZLIM.seek(_zlim)
   ||
      _args:=exec('ilosc_dk4mask_a','zl_limit');
      _args.ZLIM:=_zlim;
      _args.ONLY_AKC:=_only_akc;

      _rule:="exec('ilosc_dk4mask','zl_limit',_b)";

::    Zbieram ilosc ze wszystkich masek od powolania zlecenia / grupy operacji
      _name:=5+DK.name();
      {? ZLIM.GROP<>null()
      || _msk_start:=_name+ZLIM.GROP().ODDZ+(2-$(GROP.DATA~1));
         _rok:=exec('max','#math',GROP.ROK_MAX,GROP.DATA~1);
         _msk_end:=_name+GROP.ODDZ+(2-$(_rok))
      || _msk_start:=_name+ZLIM.ZLEC().ODDZ+(2-$(ZL.OD~1));
         {? ZL.STAN='Z'
         || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
            _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
         ?}
      ?};
      exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_args);

      _result:=_args.ILOSC
   ?};

   ZLIM.cntx_pop();
   ZL.cntx_pop()
?};
_result


\ilosc_dk4mask_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Tablica parametrów dla ilosc_dk4mask
::   WY: _args
::  TAG: <PRIVATE>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new('blank'
       ,'ILOSC'
       ,'ZLIM'
       ,'ONLY_AKC'
              );
:: - - - - ponizej ustawienie wartosci domyslnych
_args.blank:="
               .ILOSC:=0;
               .ZLIM:=null();
               .ONLY_AKC:=0;
               ~~
";
:: - - - - koniec ustalania wartosci domyslnych
_args.blank();
_args


\ilosc_dk4mask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zlicza ilosc dla DK powiazanych
::   WE: _args
::  TSG: <PRIVATE>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('ilosc_dk4mask_a','zl_limit')
?};

ZLIM.cntx_psh(); ZLIM.clear();
{? ZLIM.seek(_args.ZLIM)
||
   DK.cntx_psh();
   DK.index('ZLIM');
   DK.prefix(ZLIM.name(),ZLIM.ref());
   {? DK.first()
   ||
      {!
      |? _can_continue:=1;
         {? _args.ONLY_AKC>0
         ||
            _akc:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"Z",'');
            {? _akc='N'
            || _can_continue:=0
            ?}
         ?};
         {? _can_continue
         || _args.ILOSC+={? DK.PLUS='T' || -DK.IL || DK.IL ?}
         ?};
         DK.next()
      !}
   ?};
   DK.cntx_pop();
   ~~
?};
ZLIM.cntx_pop();
~~


\zlim_pob_il_old
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca ilosc pobrana do limitu/surowca nielimitowanego zlecenia (dokumenty zaakceptowane)
::       wg "starej" zasady, czyli Zlecenie+Wydzial+Material
::   WE: _a - ZL.ref()
::       _b - WYD - SLO.ref()
::       _c - M.ref()
::       _d - uwzględniać tylko dokumenty zaakceptowane (1), wszystkie (0)
::   WY: _res:=obj_new('IL','RW','ZW')
::  OLD: \zlim_pob_il_old/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_wyd:=_b;
_ktm:=_c;
_akc:=_d;

_res:=obj_new('IL','RW','ZW');
_res.IL:=_res.RW:=_res.ZW:=0;

Cntx.psh(ZL,DK);
Cntx.clr(ZL   );

{? ZL.seek(_zl)
||
   _rule:="
      _res:=_b.RES;
      DK.index('DOKZL');
      DK.prefix(_b.ZL,_b.KTM);
      {? DK.first()
      || {!
         |? {? {? _b.AKC  || DK.Z='T' || 1 ?} &
               (_b.WYD=null() | _b.WYD=DK.WYD) &
               exec('FindAndGet','#table',ND,DK.N,,\"ND.TYP().WYR\",'T')<>'T'
            || _res.IL+={? DK.PLUS='T' || -DK.IL || DK.IL ?};
               _res.RW+={? DK.PLUS='T' || 0 || DK.IL ?};
               _res.ZW+={? DK.PLUS='T' || DK.IL || 0 ?}
            ?};
            DK.next()
         !}
      ?}
   ";
   _param:=obj_new('RES','ZL','KTM','WYD','AKC');
   _param.RES:=_res;
   _param.ZL:=_zl;
   _param.KTM:=_ktm;
   _param.WYD:=_wyd;
   _param.AKC:=_akc;
   exec('for_each_mask','#table',DK,_rule,,,_param)
?};

Cntx.pop(ZL,DK);
_res


\CHK_LIMOact
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca wartość parametru określającego sposób kontroli ilości na dokumentach wydania do limitu
::   WY: 'N','I','T'
::----------------------------------------------------------------------------------------------------------------------
:: _p600802:=exec('get','#params',600802);
_p600802:='R';
{? _p600802='R'
|| _result:='N'
|? _p600802='P'
|| _result:='I'
|| _result:='T'
?};
_result


\limleft
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca ilosc pozostala na limicie
::   WE: _a - ZL.ref()
::       _b - SLO.ref() (wydzial)
::       _c - M.ref()
::       _d - ilosc na dokumencie
::   WY: REAL ilosc pozostala na limicie
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_zlec:={? _>0 & type_of(_a)=type_of(ZL.ref()) || _a || null() ?};
 _wyd:={? _>0 & type_of(_b)=type_of(SLO.ref())|| _b || null() ?};
_mref:={? _>0 & type_of(_c)=type_of(M.ref())  || _c || null() ?};
_il:={? _>0 & type_of(_d)=type_of(1)  || _d || 0 ?};
_limit:='T';

ZL.cntx_psh();
ZL.clear();

:: Zlecenie na ktorym powinny byc limity
_zl_limit:=_zlec;

{? ZL.seek(_zl_limit) & ZL.STAN='O'
|| exec('openmask','zl_common',ZL.ref());
   ZLIM.cntx_psh();
   ZLIM.clear();
   ZLIM.index('ZMW');
   ZLIM.prefix(_zl_limit,_mref,_wyd,0);
:: teraz posumujemy wszystkie zaakceptowane limity na surowiec do zlecenia (w tym rowniez korekty)
   {? ZLIM.first()
   || {!
      |? {? ZLIM.AKC='T'
         || _result+=exec('GetAlLil4ZLIM','zl_limit',1,ZLIM.ref())
         |? ZLIM.LIMIT='N'
         || _result:=_il;
            _limit:='N'
         ?};
         {? _limit='T'
         ||
            _pob:=exec('ilosc_dk','zl_limit',ZLIM.ref(),1);
            _result-=_pob
         ?};
         ZLIM.next()
      !}
   ?};
   ZLIM.cntx_pop();

   {? _result<0 || _result:=0 ?}
?};
ZL.cntx_pop();
_result


\GetAlLil4ZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca ilosc dla limitu po korektach
::   WE: _a - 1
::       _b - ZLIM.ref()
::
::       _a - 2
::       _b - ZLIM.ZLEC
::       _c - ZLIM.KTM
::       _d - ZLIM.WYD
::
::   WY: ZLIM.LIL+korekty
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_wariant:={?_>0 & type_of(_a)=1 || _a || 0 ?};
_zlim:=null();
:: mamy tylko ZLIM.ref()
{? _wariant=1 || _zlim:={?_>1 & type_of(_b)=type_of(SYSLOG.ref()) || _b || null() ?}
:: mamy ZL.ref(), M.ref() i SLO.ref()
|? _wariant=2 || _zlec:={?_>1 & type_of(_b)=type_of(SYSLOG.ref()) || _b || null() ?};
                 _mref:={?_>2 & type_of(_c)=type_of(SYSLOG.ref()) || _c || null() ?};
                 _wydz:={?_>3 & type_of(_d)=type_of(SYSLOG.ref()) || _d || null() ?};
                 {? _zlec<>null() & _mref<>null()
                 || ZLIM.cntx_psh();
                    ZLIM.clear();
                    ZLIM.index('ZMW');
                    ZLIM.prefix(_zlec,_mref,_wydz,0);
                    {? ZLIM.first()
                    || _zlim:=ZLIM.ref()
                    ?};
                    ZLIM.cntx_pop()
                 ?}
:: nic wiecej, czyli i tak koniec
?};
{? _zlim<>null()
||
:: jest zlim, to go szukamy
   ZLIM.cntx_psh();
   ZLIM.index('ZN');
   ZLIM.clear();

   {? ZLIM.seek(_zlim)
    & {? ZLIM.KOR<>0
      || {? ZLIM.find_key(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KOR)
         || 1
         ?}
      || 1
      ?}
   || _result:=ZLIM.LIL;
      ZLIM.cntx_psh();
      ZLIM.index('ZMW');
      ZLIM.prefix(ZLIM.ZLEC,ZLIM.KTM,ZLIM.WYD,ZLIM.NR);
      _kor:=0;
      {? ZLIM.first()
      || {!
         |? {? ZLIM.AKC='T'
            || _result+=ZLIM.LIL
            ?};
            ZLIM.next()
         !}
      ?};
      ZLIM.cntx_pop()

   ?};
   ZLIM.cntx_pop()
?};
_result


\ZLST_2_ZK_P
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Formula aktualizuje ilosc na zamowieniu wewnetrznym o ilosc pobrana do limitu
::   WE: _a - ZL.ref()
::       _b - SLO.ref() - wydzial
::       _c - M.ref()
::----------------------------------------------------------------------------------------------------------------------
_ZLref:=_a;
_SLOref:=_b;
_Mref:=_c;
_MGpal:={? var_pres('_d')=type_of(null()) || _d || null() ?};
_zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',_ZLref,_SLOref,0,,,_MGpal);
ZK_P.cntx_psh();
ZK_P.clear();
ZK_P.index('ZAM');
ZK_P.prefix(_zk_n,_Mref,1);
{? ZK_P.first()
||
:: znaleziona pozycja zamowienie, wiec analiza ile pozostalo limitu do zlecenia
   _limleft:=exec('limleft','zl_limit',_ZLref,_SLOref,_Mref,ZK_P.ILP);
   {? _limleft<>ZK_P.ILP
    & ZK_P.ILZ>=_limleft
   || ZK_P.ILP:=_limleft;
      ZK_P.put();
:: zmodyfikowana ilosc pozostala do realizacji na pozycji zamowienia wewnetrznego,
:: wiec jesli rezerwowane to aktualizacja kolejek
      {? ZK_P.REZ & ZK_P.T<>'F'
      || ZK_P.cntx_psh();
         _do:=do_state();
         {? _do=0 || do() ?};
         exec('rez_pozy','rezerwacje',5);
         {? _do=0 || end() ?};
         ZK_P.cntx_pop()
      ?}
   ?};
   ~~
?};
ZK_P.cntx_pop();
exec('aktznzkn','zamsiw_nag',_zk_n,1);
exec('oblprea_zam','zamsiw_nag',_zk_n);
~~


\sum_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca sume ilosci razem z korektami, dla korekty zwraca jej ilosc
::       Uwzgledniane sa zapisy bez wzgledu na akceptacje, opcjonalnie tylko zaakceptowane
::   WE: _a - ZLIM.ref() albo $ZLIM.ref()
::       [_b] - wszystkie (0 - domyslnie), tylko zaakceptowane (1)
::       [_c] - INTEGER - [0]/1 - czy omijac korekty związane ze scaleniem wynikającym z planu
::       [_d] - INTEGER - [0]/1 - czy omijac korekty związane z dzieleniem wynikającym z planu
::   WY: wyliczona suma
::  OLD: \sum_il/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _z_ref:=#_a; _z_mask:=ref_name(_a)
|? var_pres('_a')=type_of('')
|| _z_ref:=BIT.sqlint(_a); _z_mask:=8+_a
|| return(0)
?};

{? var_pres('_b')=type_of(0) || _only_akc:=_b || _only_akc:=0 ?};
{? var_pres('_c')=type_of(0) || _skip_merge:=_c || _skip_merge:=0 ?};
{? var_pres('_d')=type_of(0) || _skip_split:=_d || _skip_split:=0 ?};

ZLIM.cntx_psh();
ZLIM.clear();

_sum:=0;
{? ZLIM.seek(_z_ref,_z_mask)
||
   _sum:={? _only_akc=0 | ZLIM.AKC='T' || ZLIM.LIL || 0 ?};
   {? ZLIM.KOR=0
   ||
::    Sumuje ilosci z korekt
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPKM');
         ZLIM.prefix(ZLIM.GROP,ZLIM.LIMIT,ZLIM.NR,ZLIM.KTM)
      || ZLIM.index('ZKK');
         ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.NR,ZLIM.KTM)
      ?};
      {? ZLIM.first()
      || {!
         |?
            _can_sum:=1;
            {? _only_akc>0
            || {? ZLIM.AKC<>'T'
               || _can_sum:=0
               ?}
            ?};
            {? _can_sum>0
            || {? _skip_merge>0
               || {? ZLIM.WHY().KOD='~KOR_PLAN2'
                  || _can_sum:=0
                  ?}
               ?}
            ?};
            {? _can_sum>0
            || {? _skip_split>0
               || {? ZLIM.WHY().KOD='~KOR_PLAN'
                  || _can_sum:=0
                  ?}
               ?}
            ?};
            {? _can_sum>0
            || _sum+=ZLIM.LIL
            ?};
            ZLIM.next()
         !}
      ?}
   ?}
?};

ZLIM.cntx_pop();
_sum


\dk_il_suggest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca sugerowana ilosc na pozycji dokumentu dla ZLIMa
::       KONTEKST PRACY - REDAGOWANIE POZYCJI DK
::   WE: _a - ZLIM.ref()
::       _b - ZL.ref()
::       [_c] - REAL - wczesniej sugerowana ilosc, na ktora byc moze wplynie partia
::   WY: REAL - sugerowana ilosc
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;
_zl:=_b;
_input_il:=0;

{? var_pres('_c')=type_of(0)
|| _input_il:=_c
?};

_result:=0;

ZL.cntx_psh(); ZL.clear();
ZLIM.cntx_psh(); ZLIM.clear();
ZGP.cntx_psh();
ZGH.cntx_psh();
{? ZL.seek(_zl)
||
   exec('openmask','zl_common',_zl);
   {? ZLIM.seek(_zlim)
   ||
      _il_zlim:=exec('sum_il','zl_limit',ZLIM.ref());
      _pob:=exec('ilosc_dk','zl_limit',DK.ZLIM,0);
      {? ATR.ZPARN_RW<>null()
      ||
::       Jezeli partia zostala wybrana podczas redagowania RW to ilosc powinna
::       zostac obliczona na podstawie proporcji wzgledem partii
         ZPARN.cntx_psh();

::       Podczytanie ZPARN
         ATR.ZPARN_RW();

::       Ilosc zlecenia na ktorym jestem
         _il_zl:=ZL.IL;

::       Zlecenie partii
         _zl_part:=ZPARN.ZL;

::       Zlecenie limitu
         _zl_limit:=ZLIM.ZGP().NRZLP().ZLEC;

::       Ilosc zlecenia powiazanego z partia
         _il_zl_part:=ZPARN.ZL().IL;

::       Ilosc zlecenia powiazanego z limitem
         _il_zl_limit:=ZLIM.ZGP().NRZLP().ZLEC().IL;

::       Ilosc przewodnika powiazanego z limitem
         _przew_li:=ZLIM.ZGP().NRZLP().ILNPRZ;

::       Ilosc przewodnika powiazanego z partia
         _przew_pa:=ZPARN.ZGH().ILNPRZ;

::       Stosunek ilosci partii do przewodnika do ktorego nalezy partia
         _prop_part:=1;
         {? _przew_pa>0
         || _prop_part:=ZPARN.IL/_przew_pa
         ?};

::       Stosunek ilosci miedzy przewodnikiem powiazanym z partia do ktorego nalezy partia
         _prop_part:=1;
         {? _przew_pa>0
         || _prop_part:=ZPARN.IL/_przew_pa
         ?};

::       Jesli na wejsciu byla sugerowana ilosc to ja wykorzystuje w proporcji
         _lim_prop:=_il_zlim;
         {? _input_il>0
         || _lim_prop:=_input_il
         ?};

::       Jezeli limit nalezy do innego zlecenia niz partia, to musze w proporcji uwzglednic
::       stosunek ilosci pomiedzy zleceniami
         {? _zl_part<>_zl_limit
         || _il_sur:=_lim_prop*(ZPARN.IL/_il_zl_part)*(_il_zl_limit/_przew_li)
         || _il_sur:=_lim_prop*_prop_part
         ?};
::       Obiczam ilosc ktora podpowiedziec
         {? _input_il>0
         ||
::          Jesli na wejsciu byla sugestia to nie odejmuje pobran
            _result:=_il_sur
         ||
            _result:=_il_sur-_pob
         ?};
         ZPARN.cntx_pop()
      ||
::       Bez partii
::       Obiczam ilosc ktora podpowiedziec
         {? _input_il>0
         ||
::          Jesli na wejsciu byla sugestia to ja zwracam
            _result:=_input_il
         ||
            {? DK.PLUS='N'
            ||
::             Dokument rozchodowy (RW)
               _result:=_il_zlim-_pob
            |? DK.PLUS='T'
            ||
::             Dokument rozchodowy (ZW)
               _result:=0
            ?}
         ?}
      ?}
   ?}
?};
ZGP.cntx_pop();
ZGH.cntx_pop();
ZLIM.cntx_pop();
ZL.cntx_pop();

:: Normalizacja wyniku - nie moze byc mniej niz zero
_result:=exec('max','#math',_result,0);

_result


\dk_zlim_suggest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Zwraca sugerowany limit dla pozycji dokumentu na podstawie czastkowego symbolu KTM
::   WE: _a - ZL.ref() - ref zlecenia
::       _b - STRING - ktm surowca, lub jego czesc
::       _c - ZGH.ref() - przewodnik
::   WY: ZLIM.ref() lub null
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_ktm:=_b;
_zgh:=_c;

_result:=null();
_can_continue:=0;

ZL.cntx_psh(); ZL.clear();
ZLIM.cntx_psh();
M.cntx_psh();

{? ZL.seek(_zl)
||
   exec('openmask','zl_common',_zl);
:: Prefiksuje tabele M
   M.index('MATKTM');
   M.prefix(_ktm);
   {? M.first()
   ||
      {!
      |?
         {? ( ZL.RODZAJ='Z' & ZL.GENLIM='N')
            | ( ZL.RODZAJ='P' & ( ZL.GENLIM='P' | ZL.NRNZL=0) )
         || 'Generowane do nadrzednego';
            ZLIM.index('ZLMZLD_R');
            ZLIM.prefix(ZL.ref(),M.ref())
         |? (ZL.RODZAJ='Z' & ZL.GENLIM='P')
            | (ZL.RODZAJ='P' & ZL.GENLIM='N' & ZL.NRNZL<>0)
         || 'Generowane do podrzednego';
            ZLIM.index('ZLDZLRM');
            _top:=exec('top_level','zl_link',ZL.ref());
            _top_sym:=exec('FindAndGet','#table',ZL,#_top,ref_name(_top),"SYM",'');
            ZLIM.prefix(ZL.ref(),_top_sym,M.KTM)
         || ZLIM.index('ZLMZLD_R')
         ?};

         {? _zgh
         || _loop:=ZLIM.first();
            {!
            |? _loop
            |!
               _loop:=
               {? ZLIM.ZGP().NRPRZ=_c
               || _result:=ZLIM.ref();
                  0
               || ZLIM.next()
               ?}
            !}
         || {? ZLIM.first()
            || _result:=ZLIM.ref()
            ?}
         ?};

         _result=null() & M.next()
      !}
   ?}
?};

ZLIM.cntx_pop();
ZL.cntx_pop();
M.cntx_pop();
_result


\dkc_compare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Porownuje wartosci atrybutow na przekazanej cesze i limicie
::   WE: _a - DK_C.ref() - cecha z ktora porownywac limit
::       _b - ZLIM.ref() - limit
::       [_c] - [PARAMETR NIE JEST UŻYWANY]
::       [_d] - INTEGER - 0 - nie wyswietlac komunikatu o niezgodnosciach
::                       [1] - wyswietlac komunikat o niezgodnosciach
::                        2  - dodawac info o niezgodnosciach do KOMM
::       [_e] - KOMM do ktorego dodawac komunikaty, jesli nie podane to do standardowego KOMM
::   WY: 0 - wartosci atrybutow sa niezgodne
::       1 - wartosci atrybutow sa zgodne
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_dkc:=_a;
_zlim:=_b;

_kom:=1;

_result:=1;

{? var_pres('_d')=type_of(0)
|| _kom:=_d
?};

{? var_pres('_e')>100
|| _kom_obj:=_e
|| _kom_obj:=KOMM
?};

ZLIM.cntx_psh();
ZGP.cntx_psh();
ZGH.cntx_psh();
M.cntx_psh();

:: Otwieram maske limitow
::exec('openmask','zl_common',_zl);
ZLIM.use(ref_name(_zlim));
ZLIM.prefix();

{? ZLIM.seek(_zlim)
|| _result:=0;

   _buf_dk:=exec('buffer','mat_atr');
   _buf_zlim:=exec('buffer','mat_atr');

   DK_C.cntx_psh();
   DK_C.clear();
   {? DK_C.seek(_dkc)
   || _buf_dk.get_dkc()
   ?};

   {? ZLIM.DK_C<>null()
   ||
      ZLIM.DK_C();
      _buf_zlim.get_dkc()
   ?};

:: Porównuje ceche dokumentu z cecha limitu
   _result:=_buf_dk.compare(_buf_zlim,1);
   {? _result<=0 & _kom=1
   ||
::    Wyswietlam komunikat o niezgodnosciach
      _msg:='Wartości atrybutów cech na dokumencie i limicie zlecenia są różne.\n'
            'Należy wybrać inną dostawę, której atrybuty mają wymagane na limicie wartości.'@;

      _m_atr:=obj_new(_buf_dk.NUM_MAX);

      {! _it:=1.._buf_dk.NUM_MAX
      |! _m_atr[_it]:='';
         ~~
      !};

      {! _it:=1.._buf_dk.NUM_MAX
      |! _fit:=form(_it,-2,0,'99');
         _rule_set:=$('
                     _m_atr:=_a;
                     _war1:=_b;
                     _war2:=_c;
                     {? _war1<>\'\' | _war2<>\'\'
                     || _m_atr['+_fit+']:=\'Limit %1; Dostawa %2\'@[_war1,_war2]
                     ?}
                 ');
         _get:=$('_buffer:=_a;_buffer.WAR'+_fit);
         _rule_set(_m_atr,_get(_buf_zlim),_get(_buf_dk));
         ~~
      !};

      _msg:=_msg+'\n\n'+_m_atr[1]+'\n'+
                        _m_atr[2]+'\n'+
                        _m_atr[3]+'\n'+
                        _m_atr[4]+'\n'+
                        _m_atr[5]+'\n'+
                        _m_atr[6]+'\n'+
                        _m_atr[7]+'\n'+
                        _m_atr[8]+'\n'+
                        _m_atr[9]+'\n'+
                        _m_atr[10];
      FUN.emsg(_msg);
      ~~
   |? _result<=0 & _kom=2
   ||
::    Dodaje info do KOMM
      _dk_sym:=exec('FindAndGet','#table',ND,#DK.N,ref_name(DK.N),"SYM",'');
      _dk_sym+=' poz. '+$DK.P;
      _lim_sym:=ZLIM.KTM().KTM+' przewodnik: '+ZLIM.ZGP().NRPRZ().NRPRZ+' ('+ZLIM.ZGP().OPIS+')';
      _msg:='Wartości atrybutów cech na dokumencie i limicie zlecenia są różne.'
            ' Dokument: %1, Limit: %2'@[_dk_sym,_lim_sym];
      _kom_obj.add(_msg,'xwin16.png:2')
   ?};
   DK_C.cntx_pop();
   ~~
?};
M.cntx_pop();
ZGH.cntx_pop();
ZGP.cntx_pop();
ZLIM.cntx_pop();
_result


\chk_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [GZ] [2011]
:: OPIS: Sprawdzenie czy w __tab nie ma juz danego materialu
::   WE: _a - M.ref()
::       _b - $ZGP.ref()
::  OLD: \chk_tab/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_ndx:=__tab.ndx_tmp(,,'REF',,,'ZGP_REF',,);
__tab.cntx_psh();
__tab.index(_ndx);
__tab.prefix($_a,_b);
{? __tab.first()
|| _res:=0
|| _res:=1
?};
__tab.cntx_pop();
_res


\make_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Tworzy tabele zamiany limitów.
::  OLD: \make_chng/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('chng_tab')
|| VAR_DEL.delete('__chngtab');
   VAR_DEL.delete('__chngwer');
   VAR_DEL.delete('__chngndx')
?};
__chngtab:=tab_tmp(1,
   'LP','INTEGER','Lp.'@,
   'AKCJA','STRING[10]','Akcja'@,
   'KTM','STRING[50]','Indeks materiału'@,
   'N','STRING[100]','Nazwa materiału'@,
   'JM','STRING[10]','jm'@,
   'ZLIMREF','STRING[16]','sqlref korygowanego limitu',
   'ZLIMNR','INTEGER','numer korygowanego limitu',
   'ZLREF','STRING[16]','sqlref do podzlecenia',
   'SYMZL','STRING[20]','Zlecenie podrzędne',
   'M','STRING[16]','$M.ref()',
   'TMAT','STRING[16]','$TMAT.ref()',
   'LIL','REAL','Ilość aktualna'@,
   'ILPO','REAL','Ilość po akcji'@,
   'ZGP','INTEGER','#ZGP.ref()',
   'DK_C','STRING[16]','Ref SQL DK_C',
   'DKC_OK','STRING[1]','Znacznik T/N czy udalo sie przeniesc ceche',
   'WYD','INTEGER','#SLO.ref() - wydział'
);

__chngndx:=__chngtab.ndx_tmp(,1,'LP',,);
__chngwer:=__chngtab.mk_sel('Operacje do wykonania'@,,0,'#chngwer');
__chngtab.win_fld(__chngwer,,'LP',,,3,,1,);
__chngtab.win_fld(__chngwer,,'AKCJA',,,10,,1,);
__chngtab.win_fld(__chngwer,,'KTM',,,20,,1,'Indeks'@);
__chngtab.win_fld(__chngwer,,'N',,,30,,1,'Nazwa'@);
__chngtab.win_fld(__chngwer,,'LIL',,,15,ST.DOKL,1,);
__chngtab.win_fld(__chngwer,,'ILPO',,,15,ST.DOKL,0,);
__chngtab.win_fld(__chngwer,,'JM',,,5,,1,'jm'@);
::{? DK.ZL().RODZAJ<>'P' | DK.ZL().NRNZL<>0
::|| __chngtab.win_fld(__chngwer,,'SYMZL',,,15,,0,);
::   __chngtab.fld_fml('SYMZL', 'F3',"exec('f3_chng','zl_lim01')");
::   __chngtab.fld_fml('SYMZL', 'BEFORE_EDIT',"exec('be_chng','zl_lim01')");
::   __chngtab.fld_fml('SYMZL', 'BEFORE_EDIT',"exec('be_chng','zl_lim01')")
::?};
__chngtab.win_act(__chngwer,0,'Popraw',,,,,,1);
__chngtab.win_act(__chngwer,0,'Rekord',,,,,"exec('chk_chng','zl_limit')");
__chngtab.win_act(__chngwer,0,'Formuła','Dalej'@@,,,"exec('zam_sur','zl_limit')",,,,,,'D');
__chngtab.win_act(__chngwer,0,'Formuła','Zaniechaj'@@,,,"sel_exit()",,,,,,'Z');
__chngtab.win_act(__chngwer,1,'Formuła','Zaniechaj'@@,,,"sel_exit()",,,,,,'Z');
__chngtab.win_btn(__chngwer,'text='+'Dalej'@,'menu:D',,,,,,'noempty');
__chngtab.win_btn(__chngwer,'text='+'Zaniechaj'@,'menu:Z');
__chngtab.win_sel(__chngwer)


\fill_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Wypelnia tabele zamiany limitow. W kontekscie tabele __tab, __ZAMEL i SM
::   WE: _a - __tab.ref - ref do tabeli z pozycja limitow
::       _b - dane pochodza z __ZAMEL (1), czy z M (0)
::       _c - __ZAMEL.ref lub M.ref (w zaleznosci, czy podmieniamy na zamiennik, czy na material)
::      [_d] - wspolczynnik o jaki modyfikowany jest limit zrodlowy
::  OLD: \fill_chng/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<4
|| _d:=1
?};
_dalej:=0;
__tab.cntx_psh(); ZGP.cntx_psh();
__tab.clear(); ZGP.clear();
{? __tab.seek(_a) & ZGP.seek(__tab.ZGP_REF)
||
   __ZAMEL.cntx_psh();
   __ZAMEL.clear();
   M.cntx_psh();
   M.clear();
   M.f_clear();
   {? _b & __ZAMEL.seek(_c) & M.seek(__ZAMEL.T)
   ||
::    ile % potrzebuje
      _wsp:=(_d);
      _nr:=0;
      _zlimref:=null();
      _zldod:=null();
      ZLIM.cntx_psh();
      TMAT.cntx_psh();
      ZLIM.clear();
      ZLIM.f_clear();
      TMAT.prefix();
      M.cntx_psh();
      M.clear();
      {? M.seek(__tab.REF) & ZLIM.seek(__tab.ZLIM)
      || _zlimref:=ZLIM.ref();
         {? ZLIM.DK_C<>null()
         || _dk_c:=ZLIM.DK_C;
            M.cntx_psh();
            _m_atr:=ZLIM.KTM().M_ATR;
            M.cntx_pop();
            ~~
         ?};
         _zgp:=ZLIM.ZGP;
         {? DK.ZL().GENLIM='P'
         || _zldod:=ZLIM.ZLEC
         || _zldod:=ZLIM.ZLDOD
         ?}
      ?};
      M.cntx_pop();
      _tmat:=null();
      {? ZLIM.seek(_zlimref)
      || _nr:=ZLIM.NR;
         {? TMAT.seek(ZLIM.TMAT)
         || _tmat:=TMAT.ref()
         ?}
      ?};
      TCHMAT.prefix();
      {? TCHMAT.seek(__ZAMEL.TCHMAT,8+__ZAMEL.TCHMAT)
      || _warb:=TCHMAT.WARB;
         _il_zgh:=ZGP.ILOSC;
         _xjm:=TCHMAT.NRK().XJM;
         _dokl:=exec('jaka_dok_m','jm',M.ref());
         _zap:=exec('zaokr','#math',{? _dokl>0 || 'T' || 'N' ?},_warb*_wsp*_il_zgh/_xjm,_dokl);
         __chngtab.LP:=1;
         __chngtab.AKCJA:='DODAJ';
         __chngtab.M:=__ZAMEL.T;
         __chngtab.KTM:=M.KTM;
         __chngtab.N:=M.N;
         __chngtab.JM:=M.J().KOD;
         __chngtab.TMAT:=$_tmat;
         __chngtab.LIL:=0;
         __chngtab.ILPO:=_zap;
         __chngtab.ZLIMREF:=$ZLIM.ref();
         __chngtab.ZLIMNR:=_nr;
         __chngtab.ZGP:=#ZGP.ref();

::       Obsluga atrybutow dostaw - jesli wzorzec atrybutow sie zgadza to przenosze ceche na zamiennik
         {? __tab.DK_C<>''
         ||
            {? $M.M_ATR=__tab.M_ATR
            || __chngtab.DK_C:=__tab.DK_C;
               __chngtab.DKC_OK:='T'
            ||
               __chngtab.DKC_OK:='N'
            ?}
         ?};

         {? DK.ZL().RODZAJ<>'P' | DK.ZL().NRNZL<>0
         || ZL.cntx_psh();
            ZL.clear();
            ZL.f_clear();
            {? _zldod<>null()
            || {? ZL.seek(_zldod)
               || __chngtab.SYMZL:=ZL.SYM;
                  __chngtab.ZLREF:=$ZL.ref()
               ?}
            || ZL.index('NRNZL');
               ZL.prefix(DK.ZL().UNRZL);
               {? ZL.first()
               || __chngtab.SYMZL:=ZL.SYM;
                  __chngtab.ZLREF:=$ZL.ref();
                  _zldod:=ZL.ref()
               ?}
            ?};
            ZL.cntx_pop()
         ?};

         __chngtab.WYD:=#ZLIM.WYD;
         __chngtab.add();

         __chngtab.LP:=2;
         __chngtab.AKCJA:='KOREKTA';
         __chngtab.M:=__tab.REF;
         __chngtab.KTM:=__tab.KTM;
         __chngtab.N:=__tab.N;
         __chngtab.JM:=__tab.JM;
         __chngtab.LIL:=__tab.LIL;
         __chngtab.ILPO:=VAR.ZLIM_POB;
         __chngtab.ZLIMREF:=$ZLIM.ref();
         __chngtab.ZLIMNR:=_nr;
         __chngtab.ZGP:=#ZGP.ref();
         __chngtab.DK_C:='';
         __chngtab.DKC_OK:='';

         {? DK.ZL().RODZAJ<>'P' | DK.ZL().NRNZL<>0
         || ZL.cntx_psh();
            ZL.clear();
            ZL.f_clear();
            {? _zldod<>null()
            || {? ZL.seek(_zldod)
               || __chngtab.SYMZL:=ZL.SYM;
                  __chngtab.ZLREF:=$ZL.ref()
               ?}
            || ZL.index('NRNZL');
               ZL.prefix(DK.ZL().UNRZL);
               {? ZL.first()
               || __chngtab.SYMZL:=ZL.SYM;
                  __chngtab.ZLREF:=$ZL.ref();
                  _zldod:=ZL.ref()
               ?}
            ?};
            ZL.cntx_pop()
         ?};

         __chngtab.WYD:=#ZLIM.WYD;
         __chngtab.add()
      ?};
      ZLIM.cntx_pop();
      TMAT.cntx_pop();
      _dalej:=1
   |? M.seek(_c)
   ||
      _dokl:=exec('jaka_dok_m','jm',M.ref);
      _zap:=exec('zaokr','#math',{? _dokl>0 || 'T' || 'N' ?},__tab.LIL,_dokl);
      __chngtab.LP:=1;
      __chngtab.AKCJA:='DODAJ';
      __chngtab.M:=$M.ref();
      __chngtab.KTM:=M.KTM;
      __chngtab.N:=M.N;
      __chngtab.JM:=M.J().KOD;
      __chngtab.TMAT:='';
      __chngtab.LIL:=0;
      __chngtab.ILPO:=_zap;
      __chngtab.ZLIMREF:='';
      __chngtab.ZLIMNR:=0;
      __chngtab.ZGP:=#ZGP.ref();

      {? DK.ZL().RODZAJ<>'P' | DK.ZL().NRNZL<>0
      || {? DK.ZL().NRNZL<>0
         || __chngtab.SYMZL:=DK.ZL().SYM;
            __chngtab.ZLREF:=$DK.ZL
         || ZL.cntx_psh();
            ZL.clear();
            ZL.f_clear();
            ZL.index('NRNZL');
            ZL.prefix(DK.ZL().UNRZL);
            {? ZL.first()
            || __chngtab.SYMZL:=ZL.SYM;
               __chngtab.ZLREF:=$ZL.ref()
            ?};
            ZL.cntx_pop()
         ?}
      ?};
      __chngtab.WYD:=exec('FindAndGet','#table',TMAT,__tab.TMAT,,"#WYD",0);
      __chngtab.add()
   ?};

   __ZAMEL.cntx_pop();
   M.cntx_pop()
?};

__tab.cntx_pop();
ZGP.cntx_pop();
~~


\sel_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Wyswietla tabele zamiany limitow
::  OLD: \sel_chng/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{!
|? {? __chngtab.select()=0
   || ~FUN.ask('Bez zatwierdzenia akcje nie zostaną zapamiętane.\nCzy kontynuować?'@)
   || return(1)
   ?}
!};
return(0)


\del_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Wypelnia tabele zamiany limitow. W kontekscie tabele __tab, __ZAMEL i SM
::  OLd: \del_chng/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('chng_tab')
|| VAR_DEL.delete('__chngtab','__chngwer','__chngndx','__chngref')
?}


\do_kor_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca ref limitu korygowanego
::   WE: _a - ZLIM.ref() korekty limitu
::  OLD: \do_kor_ref/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;
_ref:=_a;

ZLIM.cntx_psh();
ZLIM.clear();
{? ZLIM.seek(_zlim)
|| {? ZLIM.KOR<>0
   || {? ZLIM.GROP<>null()
      || ZLIM.index('GROPLKN');
         ZLIM.prefix(ZLIM.GROP,ZLIM.LIMIT,ZLIM.KTM,ZLIM.KOR)
      || ZLIM.index('ZKN');
         ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KTM,ZLIM.KOR)
      ?};
      {? ZLIM.first()
      || _ref:=ZLIM.ref()
      ?}
   ?}
?};
ZLIM.cntx_pop();
_ref


\chk_chng
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [GZ] [2011]
:: OPIS: Rekord - po w tabeli zmian na limitach
::  OLD: \chk_chng/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? __chngtab.ILPO<0
|| FUN.emsg('Ilość nie może być mniejsza od zera.'@);
   0
|? __chngtab.ILPO<VAR.ZLIM_POB
|| FUN.emsg('Ilość nie może być mniejsza od pobranej.'@);
   0
|| 1
?}


\zam_sur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [GZ] [2011]
:: OPIS: Tworzenie limitow i korekt przy pobraniu surowcow spoza listy.
::       W kontekscie __chngtab - tabela zmian na limitach
::       Wypelnia __chngref
::  OLD: \zam_sur/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
sel_exit();

__chngref:=0;

_add_ref:=null();

_pomtypdok:=POM.TYPDOK;
ZLIM.cntx_psh();
ZLIM.clear();
ZLIM.f_clear();
{? __chngtab.first()
|| KOMM.init(250,,'Generowanie limitu','',,,,'GenerowanieLimitowZlecenia');
   _a_zlec:=VAR.A_ZLEC;
   {!
   |? {? __chngtab.ILPO-__chngtab.LIL<>0
      || {? DK.ZL().GENLIM='N'
         || {? DK.ZL().NRNZL=0
            || VAR.A_ZLEC:=DK.ZL
            || ZL.cntx_psh();
               ZL.clear();
               ZL.f_clear();
               ZL.index('UNRZL');
               ZL.prefix(DK.ZL().NRNZL);
               {? ZL.first()
               || VAR.A_ZLEC:=ZL.ref()
               ?};
               ZL.cntx_pop()
            ?}
         || ZL.cntx_psh();
            ZL.clear();
            ZL.f_clear();
            ZL.seek(__chngtab.ZLREF,8+__chngtab.ZLREF);
            VAR.A_ZLEC:=ZL.ref();
            ZL.cntx_pop()
         ?};

         ZLSTW.cntx_psh();
         ZLSTW.index('K');
         ZLSTW.prefix('~KOR_POBR');
         {? ZLSTW.first()
         || _why:=ZLSTW.ref()
         || ZLSTW.KOD:='~KOR_POBR';
            ZLSTW.NAZ:='Korekta ilości przy pobraniu zamiennika na surowiec';
            {? ZLSTW.add() || _why:=ZLSTW.ref() || _why:=null() ?}
         ?};
         ZLSTW.cntx_pop();

         {? __chngtab.AKCJA='DODAJ'
         || _add_ref:=__chngtab.ref();
            M.cntx_psh(); ZGP.cntx_psh();
            M.clear(); ZGP.clear();
            {? M.seek(__chngtab.M) & ZGP.seek(__chngtab.ZGP,)
            || KOMM.sect_beg('Dodawanie limitu na materiał: '+M.KTM+' — '+M.N+' ('+$__chngtab.ILPO+' '+M.J().KOD+').');
               {? __chngtab.DKC_OK='T'
               || KOMM.add('Przeniesienie cechy na zamiennik zakończone sukcesem.',1)
               |? __chngtab.DKC_OK='N'
               || KOMM.add('Nie udało sie przenieść cechy na zamiennik — wzorzec atrybutów dostaw zamiennika i oryginalnego limitu są różne.',2)
               ?};
               {? DK.ZL().GENLIM='P'
               || {? DK.ZL().NRNZL=0
                  || __chngref:=exec('add_lim','zl_limit',__chngtab.ILPO
                                                         ,M.ref()
                                                         ,__chngtab.TMAT
                                                         ,{? __chngtab.WYD=0
                                                          || DK.WYD
                                                          || exec('FindAndGet','#table',SLO,__chngtab.WYD,SLO.name(),"ref()",null())
                                                          ?}
                                                         ,DK.ZL
                                                         ,0
                                                         ,#ZGP.ref()
                                                         ,#DK.N().MAG
                                                         ,__chngtab.DK_C
                                                         ,__chngtab.ZLIMNR
                                                         ,_why)
                  || ZL.cntx_psh();
                     ZL.clear();
                     ZL.f_clear();
                     ZL.index('UNRZL');
                     ZL.prefix(DK.ZL().NRNZL);
                     {? ZL.first()
                     || __chngref:=exec('add_lim','zl_limit',__chngtab.ILPO
                                                            ,M.ref()
                                                            ,__chngtab.TMAT
                                                            ,{? __chngtab.WYD=0
                                                             || DK.WYD
                                                             || exec('FindAndGet','#table',SLO,__chngtab.WYD,SLO.name(),"ref()",null())
                                                             ?}
                                                            ,ZL.ref()
                                                            ,0
                                                            ,#ZGP.ref()
                                                            ,#DK.N().MAG
                                                            ,__chngtab.DK_C
                                                            ,__chngtab.ZLIMNR
                                                            ,_why)
                     ?};
                     ZL.cntx_pop()
                  ?}
               |? DK.ZL().RODZAJ<>'P' | DK.ZL().NRNZL<>0
               || ZL.cntx_psh();
                  ZL.clear();
                  ZL.f_clear();
                  ZL.seek(__chngtab.ZLREF,8+__chngtab.ZLREF);
                  __chngref:=exec('add_lim','zl_limit',__chngtab.ILPO
                                                      ,M.ref()
                                                      ,__chngtab.TMAT
                                                      ,{? __chngtab.WYD=0
                                                       || DK.WYD
                                                       || exec('FindAndGet','#table',SLO,__chngtab.WYD,SLO.name(),"ref()",null())
                                                       ?}
                                                      ,ZL.ref()
                                                      ,0
                                                      ,#ZGP.ref()
                                                      ,#DK.N().MAG
                                                      ,__chngtab.DK_C
                                                      ,__chngtab.ZLIMNR
                                                      ,_why);
                  ZL.cntx_pop()
               || __chngref:=exec('add_lim','zl_limit',__chngtab.ILPO
                                                      ,M.ref()
                                                      ,__chngtab.TMAT
                                                      ,{? __chngtab.WYD=0
                                                       || DK.WYD
                                                       || exec('FindAndGet','#table',SLO,__chngtab.WYD,SLO.name(),"ref()",null())
                                                       ?}
                                                      ,null()
                                                      ,0
                                                      ,#ZGP.ref()
                                                      ,#DK.N().MAG
                                                      ,__chngtab.DK_C
                                                      ,__chngtab.ZLIMNR
                                                      ,_why)
               ?};

               {? __chngref>0
               || KOMM.add('Dodawanie limitu zakończone sukcesem.',1)
               || KOMM.add('Dodawanie limitu nie powiodło się.',2)
               ?};
               KOMM.sect_end()
            ?};
            M.cntx_pop(); ZGP.cntx_pop()
         |? __chngtab.AKCJA='KOREKTA' & ZLIM.seek(__chngtab.ZLIMREF,8+__chngtab.ZLIMREF)
         || M.cntx_psh(); M.clear(); M.f_clear();
            ZGP.cntx_psh(); ZGP.clear();

            _m_old:=M.ref();
            KOMM.sect_beg('Korygowanie limitu: '+ZLIM.KTM().KTM+' — '+M.N+' ('+$__chngtab.ILPO+' '+M.J().KOD+').');

            {? M.seek(__chngtab.M) & ZGP.seek(__chngtab.ZGP,)
            ||
               _dokl:=exec('jaka_dok_m','jm',M.ref());
               _zap:=exec('zaokr','#math',{? _dokl>0 || 'T' || 'N' ?},__chngtab.ILPO-__chngtab.LIL,_dokl);
               _ktm:=ZLIM.KTM;
               _kor:=ZLIM.NR;
               _pfaz:=ZLIM.PFAZ;
               _lim:=ZLIM.LIMIT;
               _so:=ZLIM.SO;
               _partia:=ZLIM.PARTIA;
               _tmat:=ZLIM.TMAT;
               _zldod:=ZLIM.ZLDOD;
               _wyd:=ZLIM.WYD;
               _zgp:=ZLIM.ZGP;
               _mg:=ZLIM.MG;

::             Obsluga atrybutow dostaw - jesli wzorzec sie zgadza to na nowego zlima przenosze ceche
               _dk_c:=null();
               _m_atr:=M.M_ATR;
               M.cntx_psh();
               {? ZLIM.DK_C<>null()
               || {? ZLIM.KTM().M_ATR=_m_atr
                  || _dk_c:=ZLIM.DK_C
                  ?}
               ?};
               M.cntx_pop();

               ZLIM.clear();
               ZLIM.blank();
               ZLIM.KTM:=_ktm;
               ZLIM.KOR:=_kor;
               ZLIM.KOR2:=0;
               ZLIM.PFAZ:=_pfaz;
               ZLIM.LIMIT:=_lim;
               ZLIM.SO:=_so;
               ZLIM.PARTIA:=_partia;
               ZLIM.TMAT:=_tmat;
               ZLIM.ZLDOD:=_zldod;
               ZLIM.WYD:=_wyd;
               ZLIM.LIL:=_zap;
               ZLIM.WHY:=_why;
               ZLIM.ZGP:=_zgp;
               ZLIM.MG:=_mg;
               ZLIM.DK_C:=_dk_c;

               {? ZLIM.add()
               || KOMM.add('Dodano korektę limitu na materiał: '+M.KTM+' — '+M.N+' ('+$_zap+' '+M.J().KOD+').',1);
                  exec('ZLIM_akc','zl_limit',2,,,,0);
::                  __chngref:=#ZLIM.ref()
                  ~~
               || KOMM.add('Dodawanie korekty zakończone niepowodzeniem — błąd dodania korekty limitu.',2)
               ?}
            ?};
            M.cntx_pop(); ZGP.cntx_pop()
         || KOMM.add('Dodawanie korekty zakończone niepowodzeniem — brak limitu do skorygowania.',2)
         ?}
      ?};
      __chngtab.next()
   !};
   VAR.A_ZLEC:=_a_zlec;
   KOMM.select();
:: Przeskocz na rekord z dodowana iloscia, zeby sie poprawnie podpowiedziala na dokumencie
   __chngtab.clear();
   __chngtab.seek(_add_ref)
?};
POM.TYPDOK:=_pomtypdok;
ZLIM.cntx_pop();
~~


\add_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Dodaje nową pozycję limitu
::   WE: _a - Limit ilościowy
::       _b - M.ref()
::       _c - $TMAT.ref()
::     [_d] - ZLIM.WYD
::     [_e] - ZLDOD.ref()
::     [_f] - Czy przy akceptacji sprawdzać czy limit został sprawdzony (domyślnie 1 -tak)
::     [_g] - #ZGP.ref()
::     [_h] - #MG.ref()
::     [_i] - $DK_C.ref()
::     [_j] - numer korygowanego limitu - w przypadku korekty indeksu (ZLIM.KOR2)
::     [_k] - ZLSTW.ref() przyczyna korekty
::   WY: 0 - nie udana próba dodania limitu
::       #ZLIM.ref() - ref do dodanego limitu
::----------------------------------------------------------------------------------------------------------------------
_lil:=_a;
_ktm:=_b;
_tmat:=_c;
_wyd:={? var_pres('_d')=type_of(null()) || _d || null() ?};
_zldod:={? var_pres('_e')=type_of(null()) || _e || null() ?};
_spr:={? var_pres('_f')=type_of(0) || _f || 1 ?};
{? var_pres('_g')=type_of(0)
|| ZGP.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(_g,)
   || _zgp:=ZGP.ref()
   || _zgp:=null()
   ?};
   ZGP.cntx_pop()
|| _zgp:=null()
?};
{? var_pres('_h')=type_of(0)
|| MG.cntx_psh();
   MG.clear();
   {? MG.seek(_h,)
   || _mg:=MG.ref()
   || _mg:=null()
   ?};
   MG.cntx_pop()
|| _mg:=null()
?};
_dk_c:=null();
{? var_pres('_i')=type_of('')
|| {? _i<>''
   ||
      DK_C.cntx_psh(); DK_C.clear();
      {? DK_C.seek(_i)
      || _dk_c:=DK_C.ref()
      ?};
      DK_C.cntx_pop();
      ~~
   ?}
?};
_kor2:={? var_pres('_j')=type_of(0) || _j || 0 ?};
_why:={? var_pres('_k')=type_of(null()) || _k || null() ?};

VAR.A_PFAZ:=null();
ZLIM.prefix();
ZLIM.blank();
ZLIM.KTM:=_ktm;
ZLIM.LIL:=_lil;
TMAT.prefix();
{? TMAT.seek(_tmat,8+_tmat)
|| ZLIM.TMAT:=TMAT.ref();
   ZLIM.PARTIA:=TMAT.PARTIA
?};
ZLIM.WYD:=_wyd;
ZLIM.ZLDOD:=_zldod;
ZLIM.ZGP:=_zgp;
ZLIM.MG:=_mg;
ZLIM.DK_C:=_dk_c;
ZLIM.KOR2:=_kor2;
ZLIM.WHY:=_why;

_dt:=exec('datetime','zl_limit',_zgp);
ZLIM.STARTD:=_dt.DATE;
ZLIM.STARTT:=_dt.TIME;
obj_del(_dt);

{? _kor2<>0
||
:: W przypadku korekty indeksu dodawana jest pozycja z zerowa iloscia oraz korekta na wpisana ilosc
   _lil:=ZLIM.LIL; ZLIM.LIL:=0;
   _why:=ZLIM.WHY; ZLIM.WHY:=null();
   ZLIM.AKC:='T';
   {? ZLIM.add()
   || exec('add__zlim','zl_limit');
      _nr:=ZLIM.NR;
      ZLIM.KOR:=_nr;
      ZLIM.NR:=exec('bl_nrlim','zl_limit');
      ZLIM.LIL:=_lil;
      ZLIM.WHY:=_why;
      ZLIM.AKC:='N';
      {? ZLIM.add()
      || {? _spr
         || exec('ZLIM_akc','zl_limit',2)
         || exec('ZLIM_akc','zl_limit',2,,,,0)
         ?};
         #ZLIM.ref()
      || 0
      ?}
   || 0
   ?}
|| {? ZLIM.add()
   || {? _spr
      || exec('ZLIM_akc','zl_limit',2)
      || exec('ZLIM_akc','zl_limit',2,,,,0)
      ?};
      #ZLIM.ref()
   || 0
   ?}
?}


\datetime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca planowany czas i godzine realizacji limitu zlecenia
::   WE: _a - ZGP.ref() / null()
::       [_b] - GROP.ref()
::   WY: _dt.DATE, _dt.TIME
::  OLD: \datetime/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_grop:={? var_pres('_b')=type_of(null()) || _b || null() ?};

_dt:=obj_new('DATE','TIME');
_dt.DATE:=date(0,0,0);
_dt.TIME:=time(0,0,0);

Cntx.psh(ZL,ZGH,ZGP,GROP);
Cntx.clr(       ZGP,GROP);

{? _zgp<>null() & ZGP.seek(_zgp)
||
   {? ZGP.WEW='T' & ZGP.STARTD<>date(0,0,0)
   ||
::    operacja wewnetrzna
      _dt.DATE:=ZGP.STARTD;
      _dt.TIME:=ZGP.STARTT
   |? ZGP.WEW<>'T' & ZGP.STARTDK<>date(0,0,0)
   ||
::    kooperacja
      _dt.DATE:=ZGP.STARTDK;
      _dt.TIME:=ZGP.STARTTK
   |? ZGP.NRZLP().STARTD<>date(0,0,0)
   ||
::    jezeli brak ram czasowych dla pozycji przewodnika, to pobieramy ze przewodnika
      _dt.DATE:=ZGP.NRZLP().STARTD;
      _dt.TIME:=ZGH.STARTT
   |? ZGP.NRZLP().ZLEC().STARTD<>date(0,0,0)
   ||
::    jezeli brak ram czasowych dla pozycji przewodnika i przewodnika, to pobieramy ze zlecenia (start)
      _dt.DATE:=ZGP.NRZLP().ZLEC().STARTD;
      _dt.TIME:=ZL.STARTT
   ||
::    jezeli brak ram czasowych dla pozycji przewodnika i przewodnika, to pobieramy ze zlecenia (plan)
      _dt.DATE:=ZGP.NRZLP().ZLEC().PL_DATA;
      _dt.TIME:=ZL.PL_TIME
   ?}

|? _grop<>null() & GROP.seek(_grop)
||
:: start
   {? GROP.STARTD<>date(0,0,0)
   || _dt.DATE:=GROP.STARTD;
      _dt.TIME:=GROP.STARTT
:: jeśli brak startu, to plan
   |? GROP.PL_DATA<>date(0,0,0)
   || _dt.DATE:=GROP.PL_DATA;
      _dt.TIME:=GROP.PL_TIME
:: ostatecznie data grupy
   || _dt.DATE:=GROP.DATA;
      _dt.TIME:=time(0,0,0)
   ?}
?};

Cntx.pop(ZL,ZGH,ZGP,GROP);
_dt


\add__zlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Replikuje ZLIM do _ZLIM (jeżeli istnieje)
::       Praca w kontekście rekordu ZLIM
::   WE: [_a] - parent
::       [_b] - _ZLIM (tabela tymczasowa do wyświetlania limitów w drzewie)
::  OLD: \add__zlim/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_parent:={? _>0 & type_of(_a)=1 || _a || 0 ?};

{? var_pres('_b')>0      || _tab:=_b
|? var_pres('__ZLIMp')>0 || _tab:=__ZLIMp.ZLIM
|? var_pres('__ZLIM')>0  || _tab:=__ZLIM
                         || _tab:=~~
?};

{? type_of(_tab)=type_of(SYSLOG)
|| _tab.blank(1);
   _tab.PARENT:=0;
   _tab.M_REF:=#ZLIM.KTM;
   _tab.KTM:=ZLIM.KTM().KTM;
   _tab.N:=ZLIM.KTM().N;
   _tab.J:=ZLIM.KTM().J().KOD;
   _tab.LIL:={? ZLIM.SO='O' || -ZLIM.LIL || ZLIM.LIL ?};
   _tab.PFAZ:=ZLIM.PFAZ().KOD;
   _tab.SO:=ZLIM.SO;
   _tab.M_R:=ZLIM.KTM().R;
   _tab.AKC:=ZLIM.AKC;
   _tab.REF:=$ZLIM.ref();
   _tab.REF_NR:=#ZLIM.ref();
   _tab.NR:=ZLIM.NR;
   _tab.KOR:=ZLIM.KOR;
   _tab.AUTO:=ZLIM.AUTO;
   _tab.ZLEC:=ZLIM.ZLEC().SYM;
   _tab.ZL_REF:=#ZLIM.ZLEC;
   _tab.ZLECDOD:=ZLIM.ZLDOD().SYM;
   _tab.ZLD_REF:=#ZLIM.ZLDOD;
   _tab.WYD:=ZLIM.WYD().KOD;
   _tab.WYD_REF:=#ZLIM.WYD;
   _tab.PARTIA:=ZLIM.PARTIA;
   _tab.LIMIT:=ZLIM.LIMIT;
   _tab.ZK_P_NAM:='';
   _tab.ZK_P_REF:=0;
   _tab.ZK_P_QRF:='';
   _tab.MAG:=ZLIM.MG().SYM;
   _tab.MAG_REF:=#ZLIM.MG;
   _tab.STARTD:=ZLIM.STARTD;
   _tab.STARTT:=ZLIM.STARTT;
   _tab.NRPRZ:=ZLIM.ZGP().NRZLP().NRPRZ;
   _tab.ZGH_REF:=#ZGP.NRZLP;
   _tab.NRP:=ZLIM.ZGP().NRP;
   _tab.ZGP_REF:=#ZLIM.ZGP;
   _tab.OLD:=ZLIM.OLD;

   _tab.DT:=ZLIM.DT;
   _tab.AKCU:=ZLIM.AKCU().DANE;

   _tab.ZM:={? _tab.KOR=0 || 'M' || 'O' ?};
   _tab.X_KIND:='P';
   _tab.CRC:=ZLIM.crc();

   _tab.OLD:='N';
   _tab.RW_ZW:='N';
   _tab.ZKP_REA:='N';
   _tab.ZKP_ZL:='N';
   _tab.RTMAT:=ZLIM.RTMAT;

   _tab.add();

:: jest dodana pozycja, szukamy nadrzędnego
   {? _tab.KOR>0
   || _parent:=0;
      _tab.cntx_psh();
      _tab.clear();
      {? _tab.find_tab(1,'NR',,'=',_tab.KOR,'ZGP_REF',,'=',_tab.ZGP_REF)
      || _parent:=#_tab.ref()
      ?};
      _tab.cntx_pop();
      {? _parent
      || _tab.PARENT:=_parent;
         _tab.KTM:='kor: '+ZLIM.WHY().KOD;
         _tab.N:=ZLIM.WHY().NAZ;
         ~~
      ?};
      _tab.put()

   || _parent:=0;
      _wtdo:='';
      _tabref:=_tab.ref();
      _tab.cntx_psh();
      _ndx:=_tab.ndx_tmp('',0,'PARENT',,
                            ,'M_REF' ,,
                            ,'X_KIND',,
                        );
      _tab.index(_ndx);
      _tab.clear();
      {? _tab.first(1,'PARENT',,'=',0)
       & _tab.ref()<>_tabref
      || {? _tab.X_KIND='P'
         || 'nic nie robimy'

         |? _tab.X_KIND='G' & _tab.ZM='M'
         || 'szukamy materialu, a jesli nie ma to tworzymy';
            _wtdo:='N';
            _tab.prefix(0,#ZLIM.KTM,'G');
            {? _tab.first()
            || _parent:=#_tab.ref()
            || _tab.blank(1);
               _tab.KTM:=ZLIM.KTM().KTM;
               _tab.N:=ZLIM.KTM().N;
               _tab.J:=ZLIM.KTM().J().KOD;
               _tab.M_REF:=#ZLIM.KTM;
               _tab.X_KIND:='G';
               _tab.ZM:='M';
               {? _tab.add()
               || _parent:=_tab.ref()
               ?}
            ?}

         |? _tab.X_KIND='G' & _tab.ZM='Z'
         || 'szukamy zlecenia, a jesli nie ma tworzymy';
            _wtdo:='P';
            _tab.ndx_drop(_ndx);
            _ndx:=_tab.ndx_tmp('',0,'PARENT',,
                                 ,'ZL_REF' ,,
                                 ,'X_KIND' ,,
                              );
            _tab.index(_ndx);
            {? _tab.find_key(0,#ZLIM.ZLEC,'G')
            || _parent:=#_tab.ref()
            || _tab.blank(1);
               _tab.X_KIND:='G';
               _tab.ZM:='Z';
               ZL.cntx_psh();
               {? ZL.seek(ZLIM.ZLEC)
               || _tab.KTM:=ZL.SYM;
                  _tab.N:=ZL.OPIS;
                  _tab.WYD:=ZL.JORG().KOD;
                  ~~
               ?};
               ZL.cntx_pop();
               {? _tab.add()
               || _parent:=_tab.ref()
               ?}
            ?}
         ?}
      ?};
      _tab.cntx_pop();
      _tab.ndx_drop(_ndx);

      {? _parent
      || _tab.PARENT:=_parent;
         {? _wtdo='N'
         || ZGP.cntx_psh(); ZGP.clear();
            ZL.cntx_psh(); ZL.clear();
            {? ZGP.seek(_tab.ZGP_REF,) & ZL.seek(_tab.ZL_REF,)
            || _tab.KTM:=ZGP.NRZLP().NRPRZ+' - '+$ZGP.NRP;
               _tab.N:=ZL.OPIS
            ?};
            ZL.cntx_pop();
            ZGP.cntx_pop()
         |? _wtdo='P'
         || 1
         ?};
         _tab.put()
      ?}
   ?};
   exec('UpdateZLIMALIL','zl_limit',_tab,0)
?};
~~


\UpdateZLIMALIL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Aktualizuje _tab.ALIL
::   WE: _a - wskazanie na tabelę, domyślnie _ZLIM
::       _b - numer nadrzędnego
::   WY: ilość po korektach
::----------------------------------------------------------------------------------------------------------------------
_tab:={? _>0 & type_of(_a)=type_of(SYSLOG) || _a || {? var_pres('__ZLIM')>100 || __ZLIM || return() ?} ?};
_parent:={? _>1 & type_of(_b)=1 || _b || -1 ?};
_p8503:=exec('get','#params',8503,2,OPERATOR.USER);

{? _parent>=0
|| _alil:=obj_new(4); _alil[1]:=_alil[2]:=_alil[3]:=_alil[4]:=0;
   _val:=obj_new(4);
   _tab.cntx_psh();
   _tab.prefix(_parent);
   {? _tab.first()
   || {!
      |? _alil[3]+=1;
         _alil[4]+=_tab.LIL;
::       kolejna pozycja
         obj_del(_val);

::       sprawdzamy co się dzieje w podrzędnych pozycjach
         _val:=exec('UpdateZLIMALIL','zl_limit',_tab,#_tab.ref());
::       przepisujemy liczbę podrzędnych i podrzędnych zaakceptowanych
         _alil[2]+=_val[2];
         _alil[3]+=_val[3];
::       jezeli rekord jest grupujacy (zlecenie lub materiał)
         {? _tab.X_KIND='G'
         || {? _tab.ZM='Z'
            || 0
            || _tab.ALIL:=_val[1];
               _tab.LIL:=_val[4];
               {? _alil[3]>0
               || _vp:={? _val[3]=0 || 0 || _val[2]/_val[3] ?};
                  {? _vp>0.75 || _tab.AKC:='T'
                  |? _vp>0.50 || _tab.AKC:='t'
                  |? _vp>0.25 || _tab.AKC:='n'
                              || _tab.AKC:='N'
                  ?}
               ?}
            ?}
::       nie jest grupująca czyli pojedyncza, to sprawdzamy czy zaakceptowana
         |? _tab.AKC='T'
         || _tab.ALIL:=_tab.LIL+_val[1];
            _tab.put();
            _alil[1]+=_tab.ALIL;
            _alil[2]+=1;
            {? _tab.KOR || _tab.ALIL:=_tab.LIL ?}
         |? _tab.AKC<>'T'
         || _tab.ALIL:=0
         ?};

::       teraz troszke koloryzacji
         _tab.X_COLOR:=
::          pozycje grupujace
            {? _tab.X_KIND='G'
            || 'ZLIM#02#08'
::          sprawdzone
            |? _tab.AKC='+'
            || 'ZLIM#02#02'
::          zaakceptowane
            |? _tab.AKC='T'
            || {? _tab.KOR=0 & _tab.ALIL=0 & _tab.LIL<>0 || 'ZLIM#02#04'
               |? _tab.AUTO='T'            || 'ZLIM#02#06'
                                           || 'ZLIM#02#03'
               ?}
::          niezaakceptowane
            |? _tab.AKC='N'
            || {? _tab.AUTO='T'|| 'ZLIM#02#05'
                               || 'ZLIM#02#01'
               ?}
            || ''
            ?};

::       teraz ikonki
         _tab.X_ICON:=exec('pusta','#icon');

         {? _p8503='S'
         || {? _tab.ZM='M' & _tab.X_KIND='G'
            || {? _tab.SO='S'
               || {? _tab.M_R='S'
                  || _tab.X_ICON:='xwin16.png:71'
                  |? _tab.M_R='P'
                  || _tab.X_ICON:='xwin16.png:158'
                  ?}
               |? _tab.SO='O'
               || _tab.X_ICON:='xwin16.png:88'
               ?}
            ?}
         || {? _tab.ZM='M'
            || {? _tab.SO='S'
               || {? _tab.M_R='S'
                  || _tab.X_ICON:='xwin16.png:71'
                  |? _tab.M_R='P'
                  || _tab.X_ICON:='xwin16.png:158'
                  ?}
               |? _tab.SO='O'
               || _tab.X_ICON:='xwin16.png:88'
               ?}
            ?}
         ?};
         {? _tab.TMAT_MAG='P'
         || _tab.X_ICON:='xwin16.png:91'
         ?};

         _tab.put();

         _tab.next()
      !}
   ?};
   _tab.cntx_pop();
   _alil
|| 0
?}


\bl_nrlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [Mario] [2011]
:: OPIS: blank numeru limitu zlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('ZLIM_NR_blank','zl_limit',VAR.A_ZLEC,'T',VAR.A_GROP)


\bl_nlrlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: blank numeru surowca nielimitowanego zlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('ZLIM_NR_blank','zl_limit',VAR.A_ZLEC,'N',VAR.A_GROP)


\ZLIM_NR_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca kolejny numer dla limitu zlecenia
::   WE: _a - wartosc do prefiksu pola ZLIM.ZLEC
::       _b - limi[T]owane/[N]ielimitowane
::       [_c] - wartość prefiksu dla pola ZLIM.GROP
::   WY: INTEGER numer - kolejny numer dla limitu zlecenia
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_Zlec:=_a;
_Limit:=_b;
{? var_pres('_c')=type_of(null()) || _Grop:=_c || _Grop:=null() ?};

ZLIM.cntx_psh();
ZLIM.clear();

{? _Grop=null()
|| ZLIM.index('ZN');
   ZLIM.prefix(_Zlec,_Limit)
|| ZLIM.index('GROPNM');
   ZLIM.prefix(_Grop,_Limit)
?};
{? ZLIM.last() || _result:=ZLIM.NR+1 ?};

ZLIM.cntx_pop();
_result


\ZLIM_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Akceptacja limitu - utworzenie pozycji w ZK_P
::   WE: [_a] - 0 - brak, 1 - na ekran, [2] - do KOMMa
::       [_b] - ZLIM.ref() - gdy nie podany, to pobierany aktualny
::       [_c] - Informować o błędach? (ponowna akceptacja itp) - domyślnie (1)
::       [_d] - Sprawdzać zatwierdzenie limitów (domyślnie 1 -tak)
::       [_e] - Sprawdzać czy limit został sprawdzony (domyślnie 1 -tak)
::       [_f] - Czy automatyczna rezerwacja zaakceptowanego limitu (domyślnie zależy od parametru 500007)
::       [_g] - 1(domyślnie)-aktualizacja zamówien 0-nie
::       [_h] - tryb komunikowania o błędach: 0 - brak, 1 - na ekran, [2] - do KOMMa
::UWAGA: To jest akceptacja konkretnego ZLIMa (obslugi tabel __ZLIM itp muszą być załatwione na zewnątrz)
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
  _msgs:={? var_pres('_a')=type_of(1)          || _a || 1 ?};
  _zlim:={? var_pres('_b')=type_of(ZLIM.ref()) || _b || ZLIM.ref() ?};
   _err:={? var_pres('_c')=type_of(1)          || _c || 1 ?};
_chklim:={? var_pres('_d')=type_of(1)          || _d || 1 ?};
_chkspr:={? var_pres('_e')=type_of(1)          || _e || 1 ?};
  _resr:={? var_pres('_f')=type_of(0)          || _f || exec('get','#params',500007,2)='T' ?};
 _aktzk:={? var_pres('_g')=type_of(0)          || _g || 1 ?};

_result:=1;
_czy_kor:=0;

_testmsg:=exec('test_fo4ZLIM','zl_limit');
{? -_testmsg='ok'
|| 1
|| _result:=0;
   _msg:='Poniższe parametry wymagane do wykonania akcji nie zostały ustalone.\n%1\nAkcja nie może być kontynuowana.'@
         [_testmsg];
   {? _msgs=1
   || FUN.emsg(_msg)
   |? _msgs=2
   || KOMM.add(_msg,2,1)
   ?};
   return(_result)
?};

ZLIM.cntx_psh();
ZK_N.cntx_psh(); ZK_N.clear();
ZK_P.cntx_psh(); ZK_P.clear();
ZLIM.clear();
M.clear();

{? _zlim<>null() & ZLIM.seek(_zlim)
||
::   {? _msgs=0 || KOMM.sect_beg('Indeks materiałowy %1 %2.'@[ZLIM.KTM().KTM,ZLIM.KTM().N],,,1) ?};
   _accept:=1;
   _zlec:=ZLIM.ZLEC;
   _grop:=ZLIM.GROP;
   _wydz:=exec('GetZLIM_WYD','zl_limit');

:: sprawdzenie czy ZLIM moze zostać zaakceptowany
   {? exec('GetTYPYZAM4ZL','zamsiw_wspolne',_zlec,_wydz,_grop)=null()
   ||
      _msg:='Nie wybrano typu zamówień wewnętrznych dla zleceń i grup operacji. '
            'Typ zamówienia dla zleceń można przypisać w obszarze Ustawienia i parametryzacja.'@;
      {? _msgs=1
      || FUN.emsg(_msg)
      |? _msgs=2
      || exec('komm_genlim','zl_limit',_msg,9)
      ?};
      _accept:=0;
      _result:=0

   |? ZLIM.ZLEC<>null() & (ZLIM.ZLEC().STAN='Z' | ZLIM.ZLDOD().STAN='Z')
   || {? _err
      || _msg:='Zlecenie zamknięte. Akceptacja niemożliwa.'@;
         {? _msgs=1
         || FUN.info(_msg)
         |? _msgs=2
         || exec('komm_genlim','zl_limit',_msg)
         ?}
      ?};
      _accept:=0;
      _result:=0

   |? ZLIM.GROP<>null() & ZLIM.GROP().STATUS='Z'
   || {? _err
      || _msg:='Grupa operacji zamknięta. Akceptacja niemożliwa.'@;
         {? _msgs=1
         || FUN.emsg(_msg)
         |? _msgs=2
         || exec('komm_genlim','zl_limit',_msg)
         ?}
      ?};
      _accept:=0;
      _result:=0

   |? ZLIM.AKC='T'
   || {? _err
      || _msg:='Nie można ponownie zaakceptować pozycji.'@;
         {? _msgs=1
         || FUN.emsg(_msg)
         |? _msgs=2
         || exec('komm_genlim','zl_limit',_msg)
         ?}
      ?};
      _accept:=0

   |? ZLIM.KOR<>0
      & exec('sum_il','zl_limit',exec('FindInSet','#table','ZLIM','ZGP_NM',ZLIM.KOR,ZLIM.ZGP,,,'T',null()),1)+ZLIM.LIL<0
   || _msg:='Ilość na limicie po korektach nie może być mniejsza od zera.'@;
      {? _msgs=1
      || FUN.emsg(_msg)
      |? _msgs=2
      || exec('komm_genlim','zl_limit',_msg)
      ?};
      _accept:=0;
      _result:=0

   |? ~exec('chk_zlim_il','zl_limit')
   || _msg:='Ilość po akceptacji nie może być mniejsza niż ilość pobrana/zrealizowana.'@;
      {? _msgs=1
      || FUN.emsg(_msg)
      |? _msgs=2
      || exec('komm_genlim','zl_limit',_msg)
      ?};
      _accept:=0;
      _result:=0

   |? ZLIM.AKC='N'
    & exec('get','#params',500015,2)='T'
    & ZLIM.SO='S'
    & _chkspr
   || _msg:='Pozycja nie została sprawdzona — akceptacja niemożliwa.'@;
      {? _msgs=1
      || FUN.emsg(_msg)
      |? _msgs=2
      || exec('komm_genlim','zl_limit',_msg)
      ?};
      _accept:=0;
      _result:=0
   ?};

:: może być akceptowany, ale jeszcze, jeśli _msgs, to spytajmy czy na pewno
   {? _accept
    & _msgs=1
   || _choice:=0;
      _msg:='Czy zaakceptować wybraną pozycję?'@;

::    Sprawdzam czy limit powiązany z podzleceniem
      {? ZLIM.ZLEC<>null() & ZLIM.KOR<>0 & ZLIM.KOR2=0
      ||
         ZL.cntx_psh();
         ZL.index('RTMATSRC');
         ZL.prefix(ZLIM.RTMAT,ZLIM.ZLEC().UNRZL);
         {? ZL.first()
         || _choice:=1;
            _zl_old_il:=ZL.IL;
            _zl_new_il:=ZL.IL+ZLIM.LIL;
            _msg:='Limit powiązany jest ze zleceniem: %1.\n'
                  'Czy zaakceptować wybraną pozycję i automatycznie skorygować ilość na powiązanym podzleceniu?'@
                  [ZL.SYM];

::          Sprawdzam czy po ewentualnej korekcie ilości na podzleceniach i powiązanych z nimi limitach będą zgodne
            _coef:={? ZLIM.LIL<>0 || _zl_new_il/_zl_old_il || 0 ?};
            _res:=1;
            {? exec('subsubzlec_exist','zl_link',ZL.ref())>0
            || _limzl:=exec('kor_chk_limzl','zl_common',ZL.ref(),_coef);
               {? _limzl.RESULT=0
               || _res:=0;
                  _msg+='\n\nUWAGA!\nPo automatycznej korekcie ilość na przynajmniej jednym limicie nie będzie zgodna z'
                        ' ilością powiązanego zlecenia.\n\n'
                        'Dla przykładu:\n'
                        'Ilość na zleceniu %1 po korekcie:%2.\n'
                        'Ilość na powiązanym limicie:%3.\n\n'
                        'Do zachowania spójności wymagane będzie przeprowadzenie dodatkowych korekt.\n'@
                        [_limzl.ZL,$_limzl.IL_ZL,$_limzl.IL_ZLIM]
               ?}
            ?};
            {? _res>0
            ||
::             Sprawdzam czy korekta jest wymagana do zachowania spójności
::             Wyliczam dotychczasową ilość na limicie
               _zlim_old_il:=_zlim_new_il:=0;
               ZLIM.cntx_psh();
               ZLIM.clear();
               ZLIM.index('ZKK');
               ZLIM.prefix(ZLIM.ZLEC,'T',0,ZLIM.KTM);
               {? ZLIM.first()
               || {!
                  |?
                     _zlim_old_il+=exec('sum_il','zl_limit',ZLIM.ref(),1);
                     ZLIM.next()
                  !}
               ?};
               ZLIM.cntx_pop();
               _zl_new_il:=_zlim_old_il+ZLIM.LIL;
               _zlim_new_il:=_zl_old_il+ZLIM.LIL;
::                Sprawdzam tylko wtedy, jeżeli do tej pory była zachowana zgodność
               {? _zlim_old_il=_zl_old_il
               || {? _zlim_new_il=_zl_new_il & _zl_new_il>0
                  || _msg+='\n\nUWAGA!\nAby zachować zgodność ilości na limicie i powiązanym zleceniu należy '
                           'skorzystać z opcji automatycznej korekty.\n'@
                  |? _zlim_old_il=_zl_new_il & _zl_new_il>0
                  || _msg+='\n\nUWAGA!\nAby zachować zgodność ilości na limicie i powiązanym zleceniu nie należy '
                           'korzystać z opcji automatycznej korekty.\n'@
                  || _msg+='\n\nUWAGA!\nPo automatycznej korekcie ilość na przynajmniej jednym limicie nie będzie '
                           'zgodna z ilością powiązanego zlecenia.\n\n'@
                  ?}
               ?}
            ?}
         ?};
         ZL.cntx_pop()
      ?};
      {? _choice>0
      || _choice:=FUN.choice(_msg,,'Tylko zaakceptuj'@,'Zaakceptuj i skoryguj'@);
         {? _choice>0
         || _accept:=1;
            {? _choice=2
            || _czy_kor:=1
            ?}
         || _accept:=0
         ?}
      || _accept:=FUN.ask(_msg)
      ?}
   ?};

   {? _accept
   ||
::    Sprawdzam czy limit ma cechę i kompatybilny z nią magazyn
      MG.cntx_psh();
      ZL.cntx_psh();
      {? ZLIM.DK_C<>null() & ZLIM.MG<>null()
      || {? ~(ZLIM.MG().TYP*'DOST')
         ||
            _accept:=0;
            _result:=0;
            _msg:='Limit: %1 nie może zostać zaakceptowany ponieważ posiada'
                  ' cechę i nie jest przypisany do magazynu typu: \'%2\' lub \'%3\'.'@
                  [ZLIM.KTM().KTM,'DOSTAWY','DOSTEWI'];
            {? _msgs=1
            || FUN.emsg(_msg)
            |? _msgs=2
            || exec('komm_genlim','zl_limit',_msg)
            ?}
         ?}
      ?};
      MG.cntx_pop();
      ZL.cntx_pop();
      ~~
   ?};

   {? _accept & ZLIM.SO='S'
   || _accept:=0;
::    poszukajmy nagłówka, jeśli go nie ma, to od razu zostanie stworzony (1)
      _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
         _zlec,_wydz,1,,_msgs,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},_grop
      );
      exec('openz','open_tab',{? ZLIM.ZLEC<>null() || ZLIM.ZLEC().ODDZ || ZLIM.GROP().ODDZ ?}+'__');
::    jeśli mamy nagłówek, to szukamy pozycji zamówienia na materiał z limitu.
      {? _zk_n<>null() & ZK_N.seek(_zk_n)
      || {? ZK_N.r_lock(1,1,1)
         || _accept:=exec('ZK_P_4_ZLIM','zamsiw_limit', _zk_n, 1, _resr, _aktzk)<>null();
            ZK_N.r_unlock()
         || _msg:='Nagłówek zamówienia do zlecenia został zablokowany przez innego użytkownika.'@;
            {? _msgs=1
            || FUN.emsg(_msg)
            |? _msgs=2
            || exec('komm_genlim','zl_limit',_msg)
            ?}
         ?}
      ?};
      {? _accept
      ||
::       limit zaakceptowany, wiec... aktualizujemy ZLIMa
         ZLIM.AKC:='T';
         ZLIM.DT:=date();
         ZLIM.TIM:=time();
         ZLIM.AKCU:=OPERATOR.USER;
         ZLIM.put();

::       Jeżeli akceptujemy korektę na limit powiązany z podzleceniem to zmieniam ilość na podzleceniu
         {? ZLIM.ZLEC<>null() & _czy_kor>0
         ||
            ZL.cntx_psh();
            ZL.index('RTMATSRC');
            ZL.prefix(ZLIM.RTMAT,ZLIM.ZLEC().UNRZL);
            {? ZL.first()
            ||
               _buffer_in:=exec('buffer','zl_head');
               _buffer_in.bl_void();
               _buffer_in.IL:=ZL.IL+ZLIM.LIL;
::             Sprawdzam czy nowa ilość na zleceniu nie będzie zerem lub liczbą mniejszą od ilości już zaraportowanej
               {? _buffer_in.IL=0
               || _result:=0;
                  FUN.emsg('Nie udało się skorygować ilości do zlecenia %1.\n'
                           'Ilość na zleceniu po korekcie musi być większa od zera.'@[ZL.SYM])
               |? ZL.ILDOK>_buffer_in.IL
               || _result:=0;
                  FUN.emsg('Nie udało się skorygować ilości do zlecenia %1.\n'
                           'Ilość na zleceniu po korekcie nie może być mniejsza od ilości już zaraportowanej.'@[ZL.SYM])
               || _result:=exec('zl_popraw','zl_head',ZL.ref(),0,0,0,_buffer_in,0);
                  {? _result=0
                  || FUN.emsg('Nie udało się skorygować ilości do zlecenia %1.'@[ZL.SYM])
                  ?}
               ?}
            ?};
            ZL.cntx_pop()
         ?};
         ~~
::         KOMM.info('Pozycja została zaakceptowana.'@,_msgs)
      || ZLIM.get();

         _msg:='Nie utworzono pozycji zamówienia wewnętrznego — pozycja nie została zaakceptowana.'@;
         {? _msgs=1
         || FUN.emsg(_msg)
         |? _msgs=2
         || exec('komm_genlim','zl_limit',_msg)
         ?};
         _result:=0
      ?};
      1
   |? _accept & ZLIM.SO='O'
   || ZLIM.AKC:='T';
      ZLIM.DT:=date();
      ZLIM.TIM:=time();
      ZLIM.AKCU:=OPERATOR.USER;
      ZLIM.put();
      ~~
::      KOMM.info('Pozycja została zaakceptowana.'@,_msgs)
   || ZLIM.get()
   ?};
   ~~
::   {? _msgs=0 || KOMM.sect_end() ?}
?};
ZK_P.cntx_pop();
ZK_N.cntx_pop();
ZLIM.cntx_pop();
_result


\test_fo4ZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.10]
:: OPIS: Sprawdza czy parametry wymagane dla limitow zostaly ustalone m.in. w fo
::   WY: STRING wynik ('ok' - jest ok, inny tekst jest nieok)
::----------------------------------------------------------------------------------------------------------------------
_msg:='';
{? exec('get','#params',500011,2,null())=''
|| _msg+='500011 - Typ zamówienia wewnętrznego do realizacji limitów zleceń.\n'
?};
:: koniec, wiec zwracamy komunikat
{? _msg='' || 'OK' || _msg ?}


\GetZLIM_WYD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: zwraca SLO.ref() wydzialu dla aktualnego ZLIMitu
::   WY: SLO.ref() wydzialu
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();

Cntx.psh(PFAZ,ZL);

{? ZLIM.WYD<>null()        || _ref:=ZLIM.WYD
|? ZLIM.PFAZ<>null()
 & ZLIM.PFAZ().WYD<>null() || _ref:=ZLIM.PFAZ().WYD
                           || _ref:=ZLIM.ZLEC().JORG
?};

Cntx.pop(PFAZ,ZL);

_ref


\chk_zlim_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza ilosc na limicie, czy po akceptacji nie bedzie mniejsza niz ilosc pobrana/zrealizowana
::       Kontekst wywolania - rekord ZLIM
::   WY: 1 - ok, 0 - zle
::  OLD: \chk_zlim_il/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;

:: jezeli korekta, to pobierz limit macierzysty
_zlim:=null();
{? ZLIM.KOR=0
|| _zlim:=ZLIM.ref()
||
   ZLIM.cntx_psh();
   ZLIM.index('ZKN');
   ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KTM,ZLIM.KOR);
   {? ZLIM.first() || _zlim:=ZLIM.ref() ?};
   ZLIM.cntx_pop()
?};

:: limitowane ogolem z korektami
_lil:=exec('sum_il','zl_limit',_zlim,0);

:: pobrane
_zlim_pob:=exec('FindAndGet','#table',ZLIM,$_zlim,,"IL_RW-IL_ZW",0);

{? _zlim_pob>_lil
|| _res:=0
|| _res:=1
?};
_res


\zlim_pob_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zwraca ilosc pobrana do limitu/surowca nielimitowanego zlecenia
::   WE: _a - $ZLIM.ref()
::       [_b] - rok (jak nie podane, to wszystkie dokumenty)
::       [_c] - miesiac
::       [_d] - INTEGER - czy uwzglniac tylko zaakceptowane=1 (domyslnie) czy wszystkie=0
::   WY: _res:=obj_new('IL','RW','ZW','WAR','WAR_RW','WAR_ZW')
::  OLD: \zlim_pob_il/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;
{? var_pres('_b')=type_of(0)
|| _all:=0; _rok:=_b
|| _all:=1; _rok:=0
?};
{? var_pres('_c')=type_of(0) || _mc:=_c || _mc:=0 ?};
{? var_pres('_d')=type_of(0) || _only_akc:=_d || _only_akc:=1 ?};

_res:=obj_new('IL','RW','ZW','WAR','WAR_RW','WAR_ZW');
_res.IL:=_res.RW:=_res.ZW:=_res.WAR:=_res.WAR_RW:=_res.WAR_ZW:=0;

Cntx.psh(DK);

{? _all
|| _rule:="
      _zlim:=_b.ZLIM;
      _res:=_b.RES;
      _only_akc:=_b.ONLY_AKC;
      DK.index('ZLIM');
      {? _only_akc>0
      || DK.prefix(8+_zlim,BIT.sqlint(_zlim),'T')
      || DK.prefix(8+_zlim,BIT.sqlint(_zlim))
      ?};
      {? DK.first()
      || {!
         |? _res.IL+={? DK.PLUS='T' || -DK.IL || DK.IL ?};
            _res.RW+={? DK.PLUS='T' || 0 || DK.IL ?};
            _res.ZW+={? DK.PLUS='T' || DK.IL || 0 ?};
            _res.WAR+={? DK.PLUS='T' || -DK.WAR || DK.WAR ?};
            _res.WAR_RW+={? DK.PLUS='T' || 0 || DK.WAR ?};
            _res.WAR_ZW+={? DK.PLUS='T' || DK.WAR || 0 ?};
            DK.next()
         !}
      ?}
   ";
   _param:=obj_new('ZLIM','RES','ONLY_AKC');
   _param.ZLIM:=_zlim;
   _param.RES:=_res;
   _param.ONLY_AKC:=_only_akc;

   _zl:=exec('FindAndGet','#table',ZLIM,_zlim,,"ZLIM.ZLEC",null());
   ZL.cntx_psh();
   ZL.prefix();
   {? ZL.seek(_zl)
   ||
      _name:=5+DK.name();
      _msk_start:=_name+ZL.ODDZ+(2-$(ZL.OD~1));
      _msk_end:=~~;
      {? ZL.STAN='Z'
      || _rok:=exec('max','#math',ZL.ROK_MAX,ZL.DO~1);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      || _rok:=exec('max','#math',ZL.ROK_MAX,date()~1,ST.AR);
         _msk_end:=_name+ZL.ODDZ+(2-$(_rok))
      ?};
      exec('for_each_mask','#table',DK,_rule,_msk_start,_msk_end,_param)
   ?};
   ZL.cntx_pop()
|| DK.use('dokma'+ST.ODDZ+(($_rok)+2));
   DK.index('ZLIM');
   DK.prefix(8+_zlim,BIT.sqlint(_zlim),'T',_rok,_mc);
   {? DK.first()
   || {!
      |? _res.IL+={? DK.PLUS='T' || -DK.IL || DK.IL ?};
         _res.RW+={? DK.PLUS='T' || 0 || DK.IL ?};
         _res.ZW+={? DK.PLUS='T' || DK.IL || 0 ?};
         _res.WAR+={? DK.PLUS='T' || -DK.WAR || DK.WAR ?};
         _res.WAR_RW+={? DK.PLUS='T' || 0 || DK.WAR ?};
         _res.WAR_ZW+={? DK.PLUS='T' || DK.WAR || 0 ?};
         DK.next()
      !}
   ?}
?};

Cntx.pop(DK);

_res


\bs_zlimw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60]
:: OPIS: Przed <space>
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.LIMIT='T'
||
   {? ZLIM.KOR=0
   || ZLIM.cntx_psh();
      _nr:=ZLIM.NR;
      VAR.LIL:=ZLIM.LIL;
      ZLIM.clear();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPKM');
         ZLIM.prefix(ZLIM.GROP,'T',_nr)
      || ZLIM.index('ZGP_KM');
         ZLIM.prefix(ZLIM.ZGP,'T',_nr)
      ?};
      {? ZLIM.first() || {! |? {? ZLIM.AKC='T' || VAR.LIL+=ZLIM.LIL ?}; ZLIM.next() !} ?};
      ZLIM.cntx_pop();
      ZLIM.win_edit('RED_LIM');
      exec('zlim_display','zl_limit')
   || _nr:=ZLIM.KOR;
      _lim:=ZLIM.LIMIT;
      ZLIM.cntx_psh();
      ZLIM.clear();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPNM');
         ZLIM.prefix(ZLIM.GROP,_lim,_nr)
      || ZLIM.index('ZN');
         ZLIM.prefix(VAR.A_ZLEC,_lim,_nr)
      ?};
      ZLIM.first();
      _nr:=ZLIM.NR;
      VAR.LIL:=ZLIM.LIL;
      VAR.LILP:=ZLIM.LIL;
      VAR.ZLIM_AKC:=ZLIM.AKC;
      VAR.ZLIM_AUT:=ZLIM.AUTO;
      VAR.ZLIM_AKU:=ZLIM.AKCU;
      VAR.ZLIM_DT:=ZLIM.DT;
      VAR.ZLIM_TIM:=ZLIM.TIM;
      ZLIM.clear();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPKM');
         ZLIM.prefix(ZLIM.GROP,'T',_nr)
      || ZLIM.index('ZGP_KM');
         ZLIM.prefix(ZLIM.ZGP,'T',_nr)
      ?};
      {? ZLIM.first() || {! |? {? ZLIM.AKC='T' || VAR.LIL+=ZLIM.LIL ?}; ZLIM.next() !} ?};
      ZLIM.cntx_pop();
      ZLIM.win_edit('RED_KRR');
      _atrmjs:=ATR.MJS;
      ATR.MJS:='ZLIM';
      exec('czytadkc','mat_atr',ZLIM.DK_C,ZLIM.RDKC);
      ZLIM.display(0,0);
      ATR.MJS:=_atrmjs
   ?}
|| exec('zlim_display','zl_limit')
?};
~~


\zlim_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Wyświetl w ZLIM
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_red:=ZLIM.win_edit('?');
DK_C.cntx_psh();
{? ZLIM.DK_C<>null() & ref_name(ZLIM.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZLIM.DK_C)) ?};

_atrmjs:=ATR.MJS;
ATR.MJS:='ZLIM';
_atryb:=exec('czytadkc','mat_atr',ZLIM.DK_C,ZLIM.RDKC);

{? ZLIM.LIMIT='T'
|| _disp:='RED_LIM'
|| _disp:='RED_NLI'
?};
ZLIM.win_edit(_disp);

:: Sprawdzam czy limit ma atrybuty
{? _atryb>0
||
:: Podczytuje M_ATR
   ZLIM.KTM().M_ATR()
?};

:: Ustawia opcje pól
exec('efld_opt','zl_limit1');

:: Podczytuje przewodnik
ZLIM.ZGP().NRZLP();

:: Wyświetlam okno
ZLIM.display();

:: Przywracam poprzednie okno redagowania
ZLIM.win_edit(_red);
ATR.MJS:=_atrmjs;
DK_C.cntx_pop();
~~


\mag_allowed_rw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla danego zlecenia i limitu mozna utworzyc dokument klasy RW na podanym magazynie
::   WE: _a - ZL.ref() - zlecenie
::       _b - MG.ref() - magazyn
::       [_c] - ZLIM.ref() - limit zlecenia
::       [_d] - INTEGER - tryb dialogowania:
::                                            -1  - nie dodawac komunikatow
::                                            [0] - komunikaty do KOMM
::                                             1  - komunikaty na ekran
::   WY: 0 - na podanym magazynie nie mozna utworzyc dokumentu
::       1 - na podanym magazynie mozna utworzyc dokument
::  OLD: \mag_allowed_rw/zlec5.fml
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_mag:=_b;

_zlim:=null();
{? var_pres('_c')=type_of(ZLIM.ref())
|| _zlim:=_c
?};

_dialog:=0;
{? var_pres('_d')=type_of(0)
|| _dialog:=_d
?};

_result:=0;
_can_continue:=1;

_result:=1;

ZL.cntx_psh(); ZL.clear();
MG.cntx_psh(); MG.clear();
ZLIM.cntx_psh(); ZLIM.clear();

:: otwieram maske zlimow
exec('openmask','zl_common',_zl);

{? ZL.seek(_zl) & MG.seek(_mag)
||
   {? _zlim<>null()
   ||
      {? ZLIM.seek(_zlim)
      ||
::       1. Sprawdzam czy limit ma cechę, jesli tak to magazyn musi byc magazynem dostaw
         {? ZLIM.DK_C<>null()
         || {? ~(MG.TYP*'DOST')
            || _result:=0;
               _can_continue:=0;
               _msg:='Limit: '+ZLIM.KTM().KTM+' zlecenia: '+ZL.SYM+' posiada cechę, więc może być pobierany tylko z magazynu typu: \'DOSTAWY\' lub \'DOSTEWI\'';
               {? _dialog=0
               || KOMM.add(_msg,2)
               |? _dialog=1
               || FUN.emsg(_msg)
               ?}
            ?}
         ?}
      ?}
   ?};

   {? _can_continue>0
   ||
::    2. Sprawdzam czy zlecenie ma partie, jeśli tak to magazyn musi być magazynem dostaw
      {? exec('zlec_party','zl_common',ZL.ref)>0
      ||
         {? ~(MG.TYP*'DOST')
         || _result:=0;
            _can_continue:=0;
            _msg:='Zlecenie: '+ZL.SYM+' jest partiowane, więc surowce do niego mogą być pobierane tylko z magazynu typu: \'DOSTAWY\' lub \'DOSTEWI\'';
            {? _dialog=0
            || KOMM.add(_msg,2)
            |? _dialog=1
            || FUN.emsg(_msg)
            ?}
         ?}
      ?}
   ?}
?};

ZLIM.cntx_pop();
MG.cntx_pop();
ZL.cntx_pop();
_result


\mag_allowed_rp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Sprawdza czy dla danego zlecenia mozna utworzyc dokument klasy RP na podanym magazynie
::   WE: _a - ZL.ref() - zlecenie
::       _b - MG.ref() - magazyn
::       [_c] - INTEGER - tryb dialogowania:
::                                            -1  - nie dodawac komunikatow
::                                            [0] - komunikaty do KOMM
::                                             1  - komunikaty na ekran
::   WY: 0 - na podanym magazynie nie mozna utworzyc dokumentu
::       1 - na podanym magazynie mozna utworzyc dokument
::  OLD: \mag_allowed_rp/zlec5.fml
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_mag:=_b;

_dialog:=0;
{? var_pres('_c')=type_of(0)
|| _dialog:=_c
?};

_result:=0;
_can_continue:=1;

_result:=1;

ZL.cntx_psh(); ZL.clear();
MG.cntx_psh(); MG.clear();

{? ZL.seek(_zl) & MG.seek(_mag)
||
:: 1. Sprawdzam czy zlecenie ma cechę, jesli tak to magazyn musi byc magazynem dostaw
   {? ZL.DK_C<>null()
   || {? ~(MG.TYP*'DOST')
      || _result:=0;
         _can_continue:=0;
         _msg:='Zlecenie: '+ZL.SYM+' posiada cechę, więc może być raportowane tylko na magazynie typu: \'DOSTAWY\' lub \'DOSTEWI\'';
         {? _dialog=0
         || KOMM.add(_msg,2)
         |? _dialog=1
         || FUN.emsg(_msg)
         ?}
      ?}
   ?};

   {? _can_continue>0
   ||
::    2. Sprawdzam czy zlecenie ma partie, jeśli tak to magazyn musi być magazynem dostaw
      {? exec('zlec_party','zl_common',ZL.ref)>0
      ||
         {? ~(MG.TYP*'DOST')
         || _result:=0;
            _can_continue:=0;
            _msg:='Zlecenie: '+ZL.SYM+' jest partiowane, więc może być raportowane tylko na magazynie typu: \'DOSTAWY\' lub \'DOSTEWI\'';
            {? _dialog=0
            || KOMM.add(_msg,2)
            |? _dialog=1
            || FUN.emsg(_msg)
            ?}
         ?}
      ?}
   ?}
?};

MG.cntx_pop();
ZL.cntx_pop();
_result


\tmat_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.10]
:: OPIS: lista limitów wygenerowanych do danego TMAT-a oraz na ten sam surowiec
::----------------------------------------------------------------------------------------------------------------------
{? TMAT.LIMIT='T'
|| ZLIM.index('RTMAT');
   ZLIM.prefix($TMAT.ref());
   {? ZLIM.first()
   ||
      VAR_DEL.delete('__ZLIM');

      _ZLIMp:=exec('__ZLIMp_prepare','zl_limit');
      _tab:=__ZLIM:=_ZLIMp.ZLIM;

      _ZLIMp.ZL:=ZL.ref();
      _ZLIMp.View:=1;
      _ZLIMp.Limit:='T';
:      _ZLIMp.A_edit:={? ZMask.KARLIM='1' | ZL.STAN='O' || 'T' || 'N' ?};
      _ZLIMp.WP:='P';

      VAR_DEL.delete('__ZMATref');
      __ZMATref:=TMAT.ref();
      exec('__ZLIM_datapump','zl_limit',_ZLIMp,"
         ZLIM.index('RTMAT');
         ZLIM.prefix($__ZMATref);
         ZLIM.first()
      ");
      VAR_DEL.delete('__ZMATref');

      _wer:=_tab.mk_sel('Limity surowca zlecenia'@,'P',0,'#_zlimzmat_wer',1,,20,1);

      _tab.win_fld(_wer,,'KTM'     ,,,18, ,,'Kod/Symbol'@);
      _tab.win_fld(_wer,,'N'       ,,,22, ,,'Nazwa/Opis'@);
      _tab.win_fld(_wer,,'J'       ,,, 2, ,,'jm'@);
      _tab.win_fld(_wer,,'WYD'     ,,, 4, ,,'Wydział'@);
      _tab.win_fld(_wer,,'LIL'     ,,,-12,ST.DOKL,,'Wprowadzony'@);
      _tab.win_fld(_wer,,'ALIL'    ,,,-12,ST.DOKL,,'Zatwierdzony'@);
      _tab.win_fld(_wer,,'ZLIM_POB',,,-12,ST.DOKL,,'Pobrano'@);
      _tab.win_fld(_wer,,'SR'      ,,,-12,ST.DOKL,,'Zarezerwowano'@);
      _tab.win_fld(_wer,,'SRC'     ,,,-12,ST.DOKL,,'Rezerwacje warunkowe'@);
      _tab.win_fld(_wer,,'ZK_P_ZRE',,,-12,ST.DOKL,,'Zrealizowano'@);
      _tab.win_fld(_wer,,'SO'      ,,,-3, ,,'Surowiec/Odpad'@,,,2,,"'S'","'O'");
      _tab.win_fld(_wer,,'AKC'     ,,,-3, ,,'Zaakceptowany'@,,,2,,"'T'","'N'","'+'");

      {? sec_superuser()>0; 0
      || _tab.win_fld(_wer,   ,'ZM'      ,,, 2, ,,'ZM');
         _tab.win_fld(_wer,   ,'X_KIND'  ,,, 2, ,,'Kn');
         _tab.win_fld(_wer,   ,'LIMIT'   ,,, 2, ,,'Lm');
         ~~
      ?};

      __ZLIM.win_act(_wer,,'Wyświetl',,,,"exec('bs_zlimw','zl_limit')");
      __ZLIM.win_act(_wer,,'Formuła','Po&brania'@@,,'Pobrania na limit'@,"exec('pobrania','magdok_prod')",,1,,,,'B');
      __ZLIM.win_act(_wer,,'Formuła','Dos&tawy'@@,,,"exec('dostawy','magdok_prod')",,,,,,'T');
      {? VAR.A_ZLEC().STAN='O'
      || __ZLIM.win_act(_wer,,'Formuła','R&ezerwacje'@@,,,"exec('rezerwacje','zamsiw_limit',cur_tab(1,1).REF)",,,,,,'E')
      ?};
      __ZLIM.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','zl_limit')",,,,,,'L');
      __ZLIM.win_act(_wer,,'Rekord',,,,"exec('rekprzed','color','ZLIM#02#01')");
      __ZLIM.win_sel(_wer);

      __ZLIM.win_fml(_wer,,'N',,'ICON_BEFORE',
         "  {? cur_tab(1,1).ZM='M'
            || {? cur_tab(1,1).SO='S'
               || {? cur_tab(1,1).M_R='S' || 'xwin16.png:71'
                  |? cur_tab(1,1).M_R='P' || 'xwin16.png:158'
                                          || ''
                  ?}
               |? cur_tab(1,1).SO='O' || 'xwin16.png:88'
                                      || ''
               ?}
            || ''
            ?}
         ");

      {? exec('get','#params',500015,2)='T'
      || __ZLIM.actions(_wer,'','B')
      || __ZLIM.actions(_wer,'R','B')
      ?};
      exec('UpdateZLIMALIL','zl_limit',__ZLIM,0);
      __ZLIM.select()

   || FUN.info('Do tej pozycji nie wygenerowano automatycznie limitu.'@)
   ?}
|? TMAT.LIMIT='N'
|| FUN.info('Surowiec nielimitowany.'@)
?};
~~


\zlim_dates_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Naniesienie daty i godziny zapotrzebowania z pozycji przewodnika albo grupy operacji na limity
::   WE: _a - ZGP.ref() / null()
::       [_b] - GROP.ref()
::       Nie jest sprawdzana obecność ani typ przekazanego argumentu
::  OLD: \zlim_dates_upd/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_grop:={? var_pres('_b')=type_of(null()) || _b || null() ?};

_dt:=exec('datetime','zl_limit',_zgp,_grop);

Cntx.psh(ZLIM,ZGH,ZGP,GROP);
Cntx.clr(         ZGP,GROP);

{? _zgp<>null() & ZGP.seek(_zgp)
|| exec('openmask','zl_common',ZGP.NRPRZ().ZLEC);
   ZLIM.index('ZGP_M');
   ZLIM.prefix(_zgp);
   {? ZLIM.first()
   || {!
      |? ZLIM.STARTD:=_dt.DATE;
         ZLIM.STARTT:=_dt.TIME;
         {? ZLIM.put()
         || exec('zkp_date_upd','zamsiw_limit',ZLIM.ref())
         ?};
         ZLIM.next()
      !}
   ?}

|? _grop<>null() & GROP.seek(_grop)
|| exec('openmask','zl_common',null(),GROP.ref());
   ZLIM.index('GROPNM');
   ZLIM.prefix(_grop);
   {? ZLIM.first()
   || {!
      |? ZLIM.STARTD:=_dt.DATE;
         ZLIM.STARTT:=_dt.TIME;
         {? ZLIM.put()
         || exec('zkp_date_upd','zamsiw_limit',ZLIM.ref())
         ?};
         ZLIM.next()
      !}
   ?}
?};

Cntx.pop(ZLIM,ZGH,ZGP,GROP);
~~


\zgp_limity_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdzenie, czy do pozycji przewodnika są przypisane limity, do których są pobrania lub zwroty
::   WE: _a - ZGP.ref()
::       Nie jest sprawdzana obecność ani typ przekazanego argumentu
::  OLD: \zgp_limity/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZLIM.index('ZGP_M');
ZLIM.prefix(_a);
_loop:=ZLIM.first();
{!
|? _loop
|! _wyn:=exec('jestZlim2Dk','zl_limit');
   _loop:=_wyn=0 & ZLIM.next()
!};
_wyn


\zgp_chk4lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Sprawdzenie, czy do pozycji przewodnika są przypisane limity (czy są surowce, które można wydać)
::   WE: _a - ZGP.ref()
::----------------------------------------------------------------------------------------------------------------------
_zgp:={? var_pres('_a')=type_of(ZGP.ref()) & _a<>null() || _a || return(0) ?};
_wyn:=0;
ZGP.cntx_psh();
ZGP.prefix();
{? ZGP.seek(_zgp)
|| ZLIM.cntx_psh();
   exec('openmask','zl_common',ZGP.ZL);
   ZLIM.index('ZGP_LSK');
   ZLIM.prefix(ZGP.ref(),'T','S',0);
   _wyn:=ZLIM.first();
   ZLIM.cntx_pop()
?};
ZGP.cntx_pop();
_wyn


\grop_chk4lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Sprawdzenie, czy do grupy operacji są przypisane limity (czy są surowce, które można wydać)
::   WE: _a - GROP.ref()
::----------------------------------------------------------------------------------------------------------------------
_grop:={? var_pres('_a')=type_of(GROP.ref()) & _a<>null() || _a || return(0) ?};
_wyn:=0;
GROP.cntx_psh();
GROP.prefix();
{? GROP.seek(_grop)
|| ZLIM.cntx_psh();
   exec('openmask','zl_common',null(),GROP.ref());
   ZLIM.index('GROPLSK');
   ZLIM.prefix(GROP.ref(),'T','S',0);
   _wyn:=ZLIM.first();
   ZLIM.cntx_pop()
?};
GROP.cntx_pop();
_wyn


\jestZlim2Dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdza czy limit ma pobrania lub zwroty
::   WY: 0-nie 1-tak
::  OLD: \jestZlim2Dk/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_pob:=exec('zlim_pob_il','zl_limit',$ZLIM.ref(),,,0);
_pob.RW<>0 | _pob.ZW<>0


\zgp_limity_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdzenie, czy do pozycji przewodnika są przypisane limity powiązane z zamówieniami wewnętrznymi
::   WE: _a - ZGP.ref()
::       Nie jest sprawdzana obecność ani typ przekazanego argumentu
::  OLD: \zgp_limity_zkp/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZLIM.index('ZGP_M');
ZLIM.prefix(_a);
_loop:=ZLIM.first();
{!
|? _loop
|!
   _wyn:=exec('jestZlim2ZkRea','zl_limit');
   _loop:=_wyn=0 & ZLIM.next()
!};
_wyn


\jestZlim2ZkRea
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdza czy limit jest powiązany z realizowaną pozycją zamówienia wewnętrznego
::   WY: 0-nie 1-tak
::  OLD: \jestZlim2ZkRea/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
   ZLIM.ZLEC,exec('GetZLIM_WYD','zl_limit'),0,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
);
_zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',_zk_n,0);
_lil:=exec('sum_il','zl_limit',ZLIM.ref());
{? _zk_p
|| ZK_P.cntx_psh();
   ZK_P.use(ref_name(_zk_p));
   ZK_P.prefix();
   _wyn:=ZK_P.seek(_zk_p) & ZK_P.ILP<>ZK_P.ILZ & (ZK_P.ILP-_lil)<0;
   ZK_P.cntx_pop()
?};
_wyn


\zgp_limity_zkpz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdzenie, czy do pozycji przewodnika są przypisane limity powiązane z zamówieniami wewnętrznymi
::       z której utworzono zlecenie
::   WE: _a - ZGP.ref()
::       Nie jest sprawdzana obecność ani typ przekazanego argumentu
::  OLD: \zgp_limity_zkpz/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZLIM.index('ZGP_M');
ZLIM.prefix(_a);
_loop:=ZLIM.first();
{!
|? _loop
|!
   _wyn:=exec('jestZlim2ZkZl','zl_limit');
   _loop:=_wyn=0 & ZLIM.next()
!};
_wyn


\jestZlim2ZkZl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Sprawdza czy limit jest powiązany z pozycją zamówienia wewnętrznego z której utworzono zlecenie
::   WY: 0-nie 1-tak
::  OLD: \jestZlim2ZkZl/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
   ZLIM.ZLEC,exec('GetZLIM_WYD','zl_limit'),0,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
);
_zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',_zk_n,0);
{? _zk_p
|| ZLZAM.cntx_psh();
   ZLZAM.index('ZMZL');
   ZLZAM.prefix($_zk_p);
   _wyn:=ZLZAM.first();
   ZLZAM.cntx_pop()
?};
_wyn


\zgp_limity_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Usuwa limity pozycji przewodnika
::   WE: _a - ZGP.ref()
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \zgp_limity_del/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

ZLIM.index('ZGP_KM');

ZLIM.prefix(_a,'N');
{? ZLIM.first()
|| {!
   |? _next:=0;
      _ref_nxt:=null();
      ZLIM.cntx_psh();
      {? ZLIM.next()
      || _ref_nxt:=ZLIM.ref()
      ?};
      ZLIM.cntx_pop();

      _can_continue:=exec('ZLIM_del_brut','zl_limit',1);

      {? _ref_nxt<>null()
      || _next:=ZLIM.seek(_ref_nxt)
      ?};
      _next>0 & _can_continue>0
   !}
?};

{? _can_continue>0
|| ZLIM.prefix(_a,'T',0);
   {? ZLIM.first()
   || {!
      |? _next:=0;
         _ref_nxt:=null();
         ZLIM.cntx_psh();
         {? ZLIM.next()
         || _ref_nxt:=ZLIM.ref()
         ?};
         ZLIM.cntx_pop();

         _can_continue:=exec('ZLIM_del_brut','zl_limit',1);

         {? _ref_nxt<>null()
         || _next:=ZLIM.seek(_ref_nxt)
         ?};
         _next>0 & _can_continue>0
      !}
   ?}
?};

{? _can_continue>0
|| _result:=1
?};
_result


\ZLIM_del_brut
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: kasuje pozycje ZLIMitu z usunieciem rezerwacji i akceptacji (jesli to mozliwe)
::   WE: _a - dla wartosci 1 kasuje nawet, gdy sa zatwierdzenia zlecenia pod wzgledem limitow
::       _b - INTEGER - tryb wyświetlanych komunikatów: -1 - brak
::                                                       0 - do KOMM
::                                                       1 - na ekran
::   WY: wynik ZLIM.del(,1)
::UWAGA: 1. praca na aktualnym ZLIMie
::----------------------------------------------------------------------------------------------------------------------
_zatw:=_a;
_dialog:=-1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_tnij:=0;
_result:=0;
_kor:=0;
_zgp:=ZLIM.ZGP;
ZK_P.cntx_psh();
ZK_N.cntx_psh();
{? ZLIM.LIMIT='T'
||
   _kor:=ZLIM.KOR;
   ZK_P.clear();
   ZK_N.clear();
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
   {? _zk_p<>null()
    & ZK_P.seek(_zk_p)
    & ZK_N.seek(ZK_P.N)
   || {? ZK_P.ILP=ZK_P.ILZ
      ||
::       Usunięcie historii korekt
         exec('zlim_kor_del','zl_limit',$ZLIM.ref());
::       Usunięcie korekt
         ZLIM.cntx_psh();
         ZLIM.index('ZGP_KM');
         ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.NR);
         _can_continue:=1;
         {? ZLIM.first()
         || {!
            |? _can_continue:=ZLIM.del(,1);
               _can_continue>0 & ZLIM.first()
            !}
         ?};
         _tnij:=~ZLIM.first();
         ZLIM.cntx_pop();
         {? _tnij>0
         ||
::          teraz mozemy wycofac akceptacje
            exec('ZLIM_AKC_wyc','zl_limit',_dialog,,_zatw);
            {? _kor=0
            || _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
               _tnij:=_tnij*(_zk_p=null())
            ?}
         || KOMM.error('Nie powiodło się usunięcie korekt limitu.',,1)
         ?}
      ?}
   || _tnij:=1
   ?}
||
:: Usunięcie historii korekt (dla nielimitów)
   exec('zlim_kor_del','zl_limit',$ZLIM.ref());
   _tnij:=1
?};

:: Usunięcie zapisów PX_MAT i PX_SUR
{? _tnij
|| _tnij:=exec('px_del','zl_limit',ZLIM.ZLEC,ZLIM.ref())
?};

ZK_P.cntx_pop();
ZK_N.cntx_pop();
{? _tnij
|| _zlim:={? ZLIM.LIMIT='N' || $ZLIM.ref() || '' ?};
   _result:=ZLIM.del(,1);
   {? _result>0
   ||
::    Usunięcie powiązanych z nielimitem rezerwacji
      {? _zlim<>''
      || exec('rej_mat_del','zl_nlimit',_zlim)
      ?};

::    W przypadku korekty usuwamy zapis nadrzedny, o ile jest na nim zerowa ilosc (korekta indeksu) i brak innych korekt,
::    usuwana jest tez skojarzona pozycja zamowienia.
      {? _kor<>0
      || ZLIM.cntx_psh();
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(_zgp,'T',_kor);
         {? ZLIM.first()
         || {? exec('sum_il','zl_limit',ZLIM.ref(),0)=0
            || exec('ZLIM_AKC_wyc','zl_limit',-1,ZLIM.ref());
               _result:=ZLIM.del(,1)
            ?}
         ?};
         ZLIM.cntx_pop()
      ?}
   ?}
?};
_result


\lim_kor_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Tworzy korekty do limitów/surowców nielimitowanych pozycji przewodnika zlecenia
::   WE: _a - ZGP.ref()
::       _b - współczynnik jakim korygowane są limity (używany tylko dla pozycji nie powiązanych z technologią)
::       _c - ilość na przewodniku (używane, gdy wyliczanie z TMAT)
::       [_d] - PL_SPLIT.ref() - podział którym ostemplować nowo powstałe korekty limitów
::       [_e] - INTEGER - [0]/1 - czy wygenerowane korekty powinny być od razu akceptowane, domyślnie nie
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \lim_kor_zgp/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_coef:=_b;
_ilnprz:=_c;
_pl_split:=null();
{? var_pres('_d')=type_of(PL_SPLIT.ref())
|| _pl_split:=_d
?};
_accept:=0;
{? var_pres('_e')=type_of(0)
|| _accept:=_e
?};

_result:=1;

ZLSTW.cntx_psh();
ZLSTW.index('K');
{? _pl_split<>null()
|| ZLSTW.prefix('~KOR_PLAN');
   {? ZLSTW.first()
   || _zlstw:=ZLSTW.ref()
   || ZLSTW.KOD:='~KOR_PLAN';
      ZLSTW.NAZ:='Korekta wynikająca z podziału w planie operacyjnym';
      {? ZLSTW.add() || _zlstw:=ZLSTW.ref() || _zlstw:=null() ?}
   ?}
||
   ZLSTW.prefix('~KOR_ILPRZ');
   {? ZLSTW.first()
   || _zlstw:=ZLSTW.ref()
   || ZLSTW.KOD:='~KOR_ILPRZ';
      ZLSTW.NAZ:='Korekta ilości na przewodniku';
      {? ZLSTW.add() || _zlstw:=ZLSTW.ref() || _zlstw:=null() ?}
   ?}
?};
ZLSTW.cntx_pop();

{? _zlstw=null()
|| _msg:='Nie można ustalić przyczyny wygenerowania limitów — słownik ZLSTW.'@;
   exec('komm_korekta','zl_limit',_msg,_zgp);
   return()
?};

Cntx.psh(ZL,ZLIM,ZGH,ZGP,TMAT);
Cntx.clr(ZL,         ZGP     );

{? ZGP.seek(_zgp)
||
:: Podczytanie przewodnika
   ZGP.NRZLP();

   _il_lim:=_il_plim:=_il_nlim:=0;
   _il_kor:=0;

   ZLIM.index('ZGP_KM');
   ZLIM.prefix(_zgp);
   {? ZLIM.first()
   || {!
      |? {? ZLIM.KOR=0
         ||
            _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
            {? ZLIM.LIMIT='T'
            || _sum_il:=exec('sum_il','zl_limit',ZLIM.ref(),1)
            ||
::             Nielimitowane nie podlegają korektom i nie są akceptowane
               _sum_il:=exec('sum_il','zl_limit',ZLIM.ref(),0)
            ?};
            _il_final:=0;
::          Wyliczenie ilości docelowej
            {? ZLIM.RTMAT='' | exec('is_zlim_kor','zl_limit',$ZLIM.ref())
            ||
::             Jeżeli surowiec nie powiązany z technologią lub wygenerowano korekty (proste) to przeliczam według
::             podanego współczynnika (coef)
                {? _dokl>0
               || _il_final:=(_sum_il*_coef)$_dokl
               || _il_final:=ceil(_sum_il*_coef)
               ?}
            |? ZLIM.RTMAT<>''
            || TMAT.cntx_psh();
               TMAT.use(form(8+ZLIM.RTMAT));
               TMAT.clear();
               {? TMAT.seek(ZLIM.RTMAT)
               || _xjm:=exec('FindAndGet','#table',TKTL,$TMAT.NRK,,"XJM",1);
                  _wsp:=_ilnprz/_xjm;
                  {? _dokl>0
                  || _il_tech:=TMAT.WARB*_wsp
                  || _il_tech:=TMAT.WARB*_wsp
                  ?}
               ?};
               _il_tech_korygowana:=0;
               _korekty_reczne:=0;
               TMAT.cntx_pop();
               {? _pl_split<>null()
               ||
::                Jeśli podział wynika z planu to w _ilnprz mam jeszcze nie skorygowaną ilość
::                na przewodniku więc wyliczoną ilość z technologii muszę przemnożyć jeszcze
::                przez podany współczynnik
                  _il_tech*=_coef;
                  _il_tech_korygowana:=1

               |? ZGP.ILOSC<>ZGP.NRZLP().ILNPRZ & ZGP.NRZLP().ILNPRZ>0
               ||
::                Jeśli ilość na pozycji przewodnika mniejsza niż na nagłówku to ilość
::                z technologii muszę potraktować proporcją, bo mi zepsuje się
                  _prop:=ZGP.ILOSC/ZGP.NRZLP().ILNPRZ;
                  _il_tech*=_prop;
                  _il_tech_korygowana:=1

               || ZLIM.cntx_psh();
                  ZLIM.index('ZGP_KM');
                  ZLIM.prefix(ZGP.ref(),'T',ZLIM.NR);
                  {? ZLIM.first()
                  || {!
                     |? {? ZLIM.WHY().KOD<>'~KOR_ILPRZ'
                        || _korekty_reczne+=ZLIM.LIL
                        ?};
                        ZLIM.next()
                     !}
                  ?};
                  ZLIM.cntx_pop();
                  ~~
               ?};
::             Obliczam sumę po korektach, ale z pominięciem korekt wynikających ze scalenia w planie
::             bo tych korekt nie mogę uwzględnić w tym wątku, ponieważ ilość z technologii którą pobrałem
::             zaburzyłaby ilość nowej korekty
               {? ZLIM.LIMIT='T'
               || _sum_il2:=exec('sum_il','zl_limit',ZLIM.ref(),1,1,1)
               ||
::                Nielimitowane nie podlegaja korektom i nie sa akceptowane
                  _sum_il2:=exec('sum_il','zl_limit',ZLIM.ref(),0,1,1)
               ?};

::             Mam nową normę wynikającą z technologii więc dodaję do niej przeskalowane korekty
               _il_kor:=_sum_il2-ZLIM.LIL;
               {? _korekty_reczne<>0
               || _il_final:=_il_tech+_korekty_reczne
               || _il_final:=_il_tech+{? _il_tech_korygowana>0 || (_il_kor*_coef) || 0 ?}
               ?};
               {? _il_final<0 || _il_final:=0 ?}
            ?};

            {? ZLIM.LIMIT='T' & (ZLIM.ZLEC().STAN='O' | _pl_split<>null())
            ||
::             Surowiec limitowany dla zlecenia otwartego - generowanie korekty
::             lub surowiec limitowany dzielony podczas podziału w planie
               ZLIM.LIL:=_il_final-_sum_il;
               ZLIM.IL_RAW:=_il_final-_sum_il;
               _il_zero:=exec('zlim_chk4il','zl_nlimit');
               _ok:={? _il_zero>0 || 1 || ZLIM.LIL<>0 ?};
               {? _ok>0
               || _il_lim+=1;

::                Zaokrąglam korektę do dokładności magazynowej
                  {? _dokl>0
                  || ZLIM.LIL:=(ZLIM.LIL)$_dokl
                  || ZLIM.LIL:=ceil(ZLIM.LIL)
                  ?};

                  ZLIM.KOR:=ZLIM.NR;
                  ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
                  ZLIM.BORNSTAT:=ZL.STAN;
                  ZLIM.AKC:='N';
                  ZLIM.WHY:=_zlstw;
                  ZLIM.AUTO:='T';
                  ZLIM.UID_SRC:=ZLIM.UID;
                  ZLIM.PL_SPLIT:=_pl_split;
                  ZLIM.cntx_psh();
                  ZLIM.clear();
                  _result:=ZLIM.add();

                  {? _result>0 & _accept>0
                  || _result:=exec('ZLIM_akc','zl_limit',2,,,,0)
                  ?};
                  ZLIM.cntx_pop()
               ?}

::          Surowiec nielimitowany - zmiana ilości
            |? ZLIM.LIMIT='N'
            || _il_nlim+=1;
               ZLIM.LIL:=_il_final;
               ZLIM.IL_RAW:=_il_final;
::             Zaokrąglam korektę do dokładności magazynowej
               {? _dokl>0
               || ZLIM.LIL:=(ZLIM.LIL)$_dokl
               || ZLIM.LIL:=ceil(ZLIM.LIL)
               ?};
               _result:=ZLIM.put()

::          Limity zlecenia w przygotowaniu - zmiana ilości
            || _il_plim+=1;
::             Uwzględniane także korekty nieręczne, które wystąpią tylko dla zlecenia bez operacji
               ZLIM.LIL:=_il_final-_il_kor;
               ZLIM.IL_RAW:=ZLIM.LIL;
::             Zaokrąglam korektę do dokładności magazynowej
               {? _dokl>0
               || ZLIM.LIL:=(ZLIM.LIL)$_dokl
               || ZLIM.LIL:=ceil(ZLIM.LIL)
               ?};
               _result:=ZLIM.put();
::             Modyfikacja pozycji zamówienia wewnętrznego
               {? _result>0
               || exec('ZK_P_4_ZLIM','zamsiw_limit',,1)
               ?}
            ?}
         ?};

         ZLIM.next() & _result>0
      !};

      {? _result>0
      ||
         {? _il_lim>0
         || {? _accept=0
            || _msg:='Skorygowano limity do pozycji przewodnika. Korekty wymagają akceptacji.'@;
               exec('komm_korekta','zl_limit',_msg,_zgp,7)
            ?}
         ?}
      || _msg:='Nie powiodła się korekta limitów pozycji przewodnika.'@;
         exec('komm_korekta','zl_limit',_msg,_zgp)
      ?}
::      {? _il_plim>0
::      || KOMM.add('Zmodyfikowano normy surowców limitowanych do pozycji przewodnika %1 - %2'@[ZGH.NRPRZ,$ZGP.NRP],7)
::      ?};
::      {? _il_nlim>0
::      || KOMM.add('Zmodyfikowano normy surowców nielimitowanych do pozycji przewodnika %1 - %2'@[ZGH.NRPRZ,$ZGP.NRP],7)
::      ?}
   ?}
?};
Cntx.pop(ZL,ZLIM,ZGH,ZGP,TMAT);
_result


\komm_korekta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Dodaje info do KOMMa podczas korygowania limitów
::   WE: _a - STRING - treść komunikatu
::       _b - ZGP.ref - pozycja przewodnika do której są korygowane limity
::       [_c] - INTEGER - numer ikony
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_msg:=_a;
_zgp:=_b;

_icon:=2;
{? var_pres('_c')=type_of(0) | var_pres('_c')=type_of('')
|| _icon:=_c
?};
_sect_zgp:='';
_zl:=null();
ZGP.cntx_psh(); ZGP.prefix();
{? ZGP.seek(_zgp)
|| _zl:=ZGP.ZL;
   _sect_zgp:='Korygowanie limitów surowcowych pozycji: %1'@[exec('ZGP','#to_string')]
?};
ZGP.cntx_pop();
_sect_zl:='';
{? _zl<>null()
|| _top:=exec('top_level','zl_link',_zl);
   ZL.cntx_psh(); ZL.prefix();
   {? ZL.seek(_top)
   || _sect_zl:=exec('ZL','#to_string',)
   ?};
   ZL.cntx_pop()
?};
{? KOMM.find_msg(_sect_zl) || KOMM.set_root(_sect_zl) || KOMM.sect_beg(_sect_zl) ?};
{? KOMM.find_msg(_sect_zgp) || KOMM.set_root(_sect_zgp) || KOMM.sect_beg(_sect_zgp) ?};
{? KOMM.find_msg(_msg)=0
|| KOMM.add(_msg,_icon,,1)
?};
KOMM.sect_end();
KOMM.sect_end();
~~


\zgp_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyświetla limity do pozycji przewodnika
::   WE: [_a] - ZGP.ref() - gdy brak, to aktualny
::       [_b] - podgląd (1), domyślnie pełne możliwosci redakcyjne (0)
::       [_c] - co wyświetlamy? [T]-limity, N-nielimity, ''-wszystko
::   WY: czy w oknie zakończono rejestrację (1), czy nie (0)
::  OLD: \zgp_limity/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_zgp:={? var_pres('_a')=type_of(ZGP.ref()) || _a || ZGP.ref() ?};
_view:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_Limit:={? var_pres('_c')=type_of('') || _c || 'T' ?}; {? _Limit='' || _Limit:='TN' ?};

_res:=0;

ZGP.cntx_psh();
ZGP.clear();
{? _zgp<>null() & ZGP.seek(_zgp)
|| VAR.cntx_psh();
   VAR.A_ZLEC:=ZGP.NRZLP().ZLEC;
   _res:=exec('kart_lim','zl_limit',_view,VAR.A_ZLEC,_Limit,ZGP.NRZLP,ZGP.ref(),
      exec('FindAndGet','#table',ZL,ZGP.NRZLP().ZLEC,,"TYP().WP",'P')
   );
   VAR.cntx_pop();
   ~~
?};
ZGP.cntx_pop();
_res


\zgh_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyświetla limity do przewodnika
::   WE: [_a] - ZGH.ref() - gdy brak, to aktualny
::   WY: czy w oknie zakończono rejestrację (1), czy nie (0)
::  OLD: \zgh_limity/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_zgh:={? var_pres('_a')=type_of(ZGH.ref()) || _a || ZGH.ref() ?};

_res:=0;

ZGH.cntx_psh();
ZGH.clear();
{? _zgh<>null() & ZGH.seek(_zgh)
|| VAR.cntx_psh();
   VAR.A_ZLEC:=ZGH.ZLEC;
:: TODO: used
::   _view:={? ZGH.ZLEC().STAN='Z' || 1 || ZMASK.USED='1' ?};
   _view:=0;
   _res:=exec('kart_lim','zl_limit',_view,,,ZGH.ref(),null(),
      exec('FindAndGet','#table',ZL,ZGH.ZLEC,,"TYP().WP",'P')
   );
:: Aktualizacja limitów w zakładce, gdy jest wyświetlana
   {? ~_view
   || {? var_pres('__ZLIMp')>100
      || exec('__ZLIM_datapump','zl_limit',__ZLIMp)
      ?}
   ?};
   VAR.cntx_pop();
   ~~
?};
ZGH.cntx_pop();
_res


\zlim_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Generowanie surowców limitowanych zlecenia
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ZLIMp:=params_get().env.env_limit.ZLIMp;
_generuj:=0;
ZGH.cntx_psh();
{? ZL.RODZAJ='P'
|| ZGH.index('ZLNR');
   ZGH.prefix(_ZLIMp.ZL)
|| ZGH.index('UID_VIEW');
   ZGH.prefix(exec('FindAndGet','#table',ZL,_ZLIMp.ZL,,"uidref()",''))
?};
{? ZGH.first() || _generuj:=1 ?};
ZGH.cntx_pop();
{? _generuj>0
|| _result:=exec('zlim_gen4__Z','zl_limit','T',_ZLIMp.ZL,_ZLIMp);
:: Dla zleceń otwartych zakończenie czynności zaraz po generowaniu

:: --- zakomentowane z powodu błędu przy podwójnym generowaniu - za drugim razem problem z PARSES
::   {? _result>0 & exec('FindAndGet','#table',ZL,_ZLIMp.ZL,,"STAN='O'",0)
::   || {? _ZLIMp.ZGH=null()
::      || _args:=exec('mp_run_a','#b__box');
::         _args.ACT_UID:='TTE_PZL_DLIM';
::         _args.UIDREF:=exec('FindAndGet','#table',ZL,_ZLIMp.ZL,,"uidref()",'');
::         _args.AKCJA:='ZAKOŃCZ';
::         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
::         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_ZLIMp.ZL);
::         exec('mp_run','#b__box',_args)
::      || _args:=exec('mp_run_a','#b__box');
::         _args.ACT_UID:='TTE_PZL_DLIM';
::         _args.UIDREF:=exec('FindAndGet','#table',ZL,_ZLIMp.ZL,,"uidref()",'');
::         _args.AKCJA:='ZAKOŃCZ_ZGH';
::         _args.CONTEXT:=obj_new('RESULT');
::         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
::         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_ZLIMp.ZL);
::         exec('mp_run','#b__box',_args)
::      ?}
::   ?};
   ~~
|| FUN.info('Zlecenie musi mieć co najmniej jeden przewodnik, aby generować limity.'@)
?};
~~


\akt_stan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RS [7.53]
:: OPIS: aktualny stan pobrań surowca nielimitowanego
::  OLD: \akt_stan/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.ILOSC:=ZLIM.IL_RW-ZLIM.IL_ZW;
exec('rekprzed','color','ZLIM#03#01')


\nlim_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyświetlanie surowca nielimitowanego
::  OLD: \nlim_display/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zlim_display','zl_limit')


\leg_nlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: Legenda kolorowania w oknie surowców nielimitowanych
::  OLD: \leg_nlim/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','ZLIM#03#01')


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Legenda w oknie limitów (tabela ZLIM)
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color',{? cur_tab(1,1)=ZLIM || 'ZLIM#01#' || 'ZLIM#02#' ?},'#LIMIT#','@ZLIM#START')


\zlim_prn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: wydruk limitów
::  OLD: \zlim_prn/drukujp.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? params_get().env.GROP<>null()
|| exec('rep_exec','#b_report','TPP_GOP_XXXX','tpp_zlim*','Wydruki limitów grupy operacji'@,1)
|| exec('rep_exec','#b_report','TTE_PZL_XXXX','tte_zlim*','Wydruki limitów zlecenia'@,1)
?};
1


\zlim_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Dołącz ZLIM w oknie _ZLIM
::   WE: [_a] - _ZLIM (obiekt do wyświetlania limitów w drzewie)
::       [_b] - 'S'urowiec, 'O'dpad
::  OLD: \zlim_dod/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0      || _ZLIMp:=_a
|? var_pres('__ZLIMp')>0 || _ZLIMp:=__ZLIMp
                         || return()
?};

{? var_pres('_b')=type_of('') || _so:=_b || _so:='S' ?};

{? type_of(_ZLIMp)>100
||
   PFAZ.clear();
   PFAZ.f_set('KOD');

:: Stan (analizowany jest 'O') dla zleceń oczywiste, dla grup operacji gdy zaakceptowana
   _stan:={? VAR.A_ZLEC<>null() || VAR.A_ZLEC().STAN || {? VAR.A_GROP().AKC='T' || 'O' || 'N' ?} ?};

   _simple_red:=exec('get','#params',500660);
   {? _stan='O' & _simple_red<>'T'
   || ZLIM.win_edit('RED_KOR')
   || ZLIM.win_edit('RED_LIM')
   ?};
   ZLIM.blank();
   M_ATR.blank();

   {? VAR.A_ZLEC<>null() || _Zlecenia:=exec('WhatZLiZLDOD','zl_limit',VAR.A_ZLEC) ?};
   _Zgp:=null();
   _Grop:=null();

:: Dołączanie z poziomu grupy operacji - wszytko określone
   {? var_pres('GROP',_ZLIMp)=type_of(null()) & _ZLIMp.GROP<>null()
   || _Grop:=_ZLIMp.GROP;
      _ok:=1

:: Dołączanie z poziomu pozycji przewodnika - wszystko określone
   |? var_pres('ZGP',_ZLIMp)=type_of(null()) & _ZLIMp.ZGP<>null()
   || _Zgp:=_ZLIMp.ZGP;
      _ok:=1

:: Dołączenie z poziomu przewodnika - trzeba wybrać konkretną pozycję
   |? _ZLIMp.ZGH<>null() & exec('FindAndGet','#table',ZGH,$_ZLIMp.ZGH,,"ZLEC().RODZAJ",'')='P'
   || ZGP.cntx_psh();
      ZGP.index('PNRPP');
      ZGP.prefix(_ZLIMp.ZGH);
      {? ZGP.first()
      || _wer:=ZGP.mk_sel('Wybierz pozycję przewodnika'@,'P',0,'pozycjeprzew',,,10,,'U');
         ZGP.win_fld(_wer,,'NRP',,,,,,'Lp'@);
         ZGP.win_fld(_wer,,'OPIS');
         ZGP.win_act(_wer,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
         ZGP.win_sel(_wer);
         {? ZGP.select()
         || _Zgp:=ZGP.ref();
            _ok:=1
         || _Zgp:='escape';
            _ok:=0
         ?}
      || _Zgp:={? _so='S'
               || 'Przewodnik musi mieć co najmniej jedną pozycję, aby dołączać limity.'@
               || 'Przewodnik musi mieć co najmniej jedną pozycję, aby dołączać odpady/koprodukty.'@
               ?};
         _ok:=0
      ?};
      ZGP.cntx_pop()

:: Dołączanie z poziomu zlecenia - trzeba wybrać przewodnik i pozycję
   || {? type_of(_Zlecenia)>7
      || _ok:=1;

         {? VAR.A_ZLEC().RODZAJ<>'P'
         || ZL.cntx_psh();
            ZL.clear();

            _get_zlec:="
               ZL.index('NRNZL');
               ZL.prefix(VAR.A_ZLEC().UNRZL);
               _wer:=ZL.mk_sel('Wybierz zlecenie podrzędne'@,'P',0,'podzlec',,,10,,'U');
               ZL.win_fld(_wer,,'SYM',,,,,,'Symbol'@);
               ZL.win_fld(_wer,,'OPIS',,,50,,,'Opis'@);
               ZL.win_fld(_wer,,'STAN',,,,,,'Stan'@);
               ZL.win_act(_wer,,'Formuła','Wybierz'@@,,,,\"
                  {? ZL.STAN<>'Z'
                  || sel_exit()
                  || FUN.info('Zlecenie zamknięte.'@)
                  ?}
               \",1);
               ZL.win_sel(_wer);
               {? ZL.select()
               || {? ZL.STAN='Z'
                  || 'Zlecenie %1 jest zamknięte — dodanie pozycji nie jest możliwe.'@[ZL.SYM]
                  |? exec('stat_l','zl_limit',ZL.ref())='T' & ZL.STAN='N'
                  || 'Wszystkie przewodniki zlecenia %1 są zatwierdzone pod względem limitów'
                     ' — dodanie pozycji nie jest możliwe.'@[ZL.SYM]
                  || ZL.ref()
                  ?}
               || 'Zrezygnowano z dodania pozycji.'@
               ?}
            ";
            _ok:={? VAR.A_ZLEC().RODZAJ='P'
                 || _Zlecenia.Zlec:=VAR.A_ZLEC
                 || _Zlecenia.Zlec:=_get_zlec();
                    type_of(_Zlecenia.Zlec)>2 & _Zlecenia.Zlec<>null()
                 ?};
            ZL.cntx_pop()
         ?};

::       Wybór przewodnika
         {? _ok
         || ZGH.cntx_psh();
            ZGH.index('ZLNR');
            ZGH.prefix(_Zlecenia.Zlec);
            {? ZGH.size()=1
            || ZGH.first();
               _Zgh:=ZGH.ref()
            |? ZGH.first()
            || _wer:=ZGH.mk_sel('Wybierz przewodnik'@,'P',0,'naglowkiprzew',,,10,,'U');
               ZGH.win_fld(_wer,,'NRPRZ');
               ZGH.win_fld(_wer,,'STAT_L',,,,,,,,,2,,"'T'","'N'");
               ZGH.win_act(_wer,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
               ZGH.win_act(_wer,,'Formuła','Legenda'@@,,,,"exec('legenda','color','ZGH#01#')");
               ZGH.win_act(_wer,,'Wyświetl',,,,"exec('zgh_display','zl_guide')");
               ZGH.win_act(_wer,,'Rekord',,,,"exec('rkprz_zgh','zl_guide')");
               ZGH.win_sel(_wer);
               {? ZGH.select()
               || {? ZGH.STAN='T'
                  || FUN.info('Przewodnik %1 jest oddany.'@[ZGH.NRPRZ]);

                     _Zgp:='escape';
                     _ok:=0
                  || _Zgh:=ZGH.ref()
                  ?}
               || _Zgp:='escape';
                  _ok:=0
               ?}
            || _Zgp:={? _so='S'
                     || 'Zlecenie musi mieć co najmniej jeden przewodnik, aby dołączać limity.'@
                     || 'Zlecenie musi mieć co najmniej jeden przewodnik, aby dołączać odpady/koprodukty.'@
                     ?};
               _ok:=0
            ?};
            ZGH.cntx_pop()
         ?};

::       Wybór pozycji przewodnika
         {? _ok
         || ZGP.cntx_psh();
            ZGP.index('PNRPP');
            ZGP.prefix(_Zgh,'N');
            {? ZGP.size()=1
            || ZGP.first();
               _Zgp:=ZGP.ref()
            |? ZGP.first()
            || _wer:=ZGP.mk_sel('Wybierz pozycję przewodnika'@,'P',0,'pozycjeprzew',,,10,,'U');
               ZGP.win_fld(_wer,,'NRP',,,,,,'Lp'@);
               ZGP.win_fld(_wer,,'OPIS');
               ZGP.win_act(_wer,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
               ZGP.win_sel(_wer);
               {? ZGP.select()
               || _Zgp:=ZGP.ref()
               || _Zgp:='escape';
                  _ok:=0
               ?}
            || _Zgp:={? _so='S'
                     || 'Przewodnik musi mieć co najmniej jedną pozycję, aby dołączać limity.'@
                     || 'Przewodnik musi mieć co najmniej jedną pozycję, aby dołączać odpady/koprodukty.'@
                     ?};
               _ok:=0
            ?};
            ZGP.cntx_pop()
         ?}
      || _ok:=0
      ?}
   ?};

   VAR.LIL:=0;

   {? _ok
   || ZLIM.prefix();

::    Zakładam filtr na słownik materiałów
      {? exec('get','#params',500740,2)='N'
      || exec('filter_clear','material')
      || exec('filter','material','PS')
      ?};
      {? _Grop=null()
      || ZLIM.ZLEC:=_Zlecenia.Zlec;
         ZLIM.ZLDOD:=_Zlecenia.ZlDod;
         ZLIM.ZGP:=_Zgp;
         ZLIM.ZGP().NRZLP();
         ZLIM.SO:=_so
      || ZLIM.GROP:=_Grop;
         ZLIM.SO:=_so
      ?};
      ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
      _dt:=exec('datetime','zl_limit',_Zgp,_Grop);
      ZLIM.STARTD:=_dt.DATE;
      ZLIM.STARTT:=_dt.TIME;

      ATR.MJS:='ZLIM';
      ATR.M_ATR:=ZLIM.KTM().M_ATR;
      ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
      ATR.FLAG:=0;
      ATR.FLAG_ED:=0;
      {? ZLIM.DK_C<>null() & ZLIM.DK_C().M_ATR<>null()
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZLIM.DK_C().WAR'+form(_i,-2,,'99')))() !}
      || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
      ?};
      exec('efld_opt','zl_limit1');
      {? ZLIM.edit("exec('valid','zl_limit')")
      || {? _stan='O' & _simple_red<>'T'
         ||
::          Dla zlecenia otwartego/zaakceptowanej grupy operacji
::          dodawana jest pozycja z zerową ilością oraz korekta na wpisaną ilość
            _lil:=ZLIM.LIL; ZLIM.LIL:=0;
            _why:=ZLIM.WHY; ZLIM.WHY:=null();
            ZLIM.AKC:='T';
            {? ZLIM.add()
            || exec('add__zlim','zl_limit',,_ZLIMp.ZLIM);
               _nr:=ZLIM.NR;
               ZLIM.KOR:=_nr;
               ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
               ZLIM.LIL:=_lil;
               ZLIM.WHY:=_why;
               ZLIM.AKC:='N';
               {? ZLIM.add()
               || exec('add__zlim','zl_limit',,_ZLIMp.ZLIM)
               ?}
            ?}
         || {? ZLIM.add()
            || exec('add__zlim','zl_limit',,_ZLIMp.ZLIM)
            ?}
         ?}
      ?}

   || {? type_of(_Zgp)=2 & _Zgp='escape'
      || ~~
      || FUN.info( {? type_of(_Zlecenia.Zlec)=2  || _Zlecenia.Zlec
                   |? type_of(_Zlecenia.ZlDod)=2 || _Zlecenia.ZlDod
                   |? type_of(_Zgp)=2            || _Zgp
                                                 || 'Dodanie pozycji nie jest możliwe.'@
                   ?}
         )
      ?}
   ?}
?};
~~


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Walidacja limitu albo korekty limitu zmieniającej indeks (przy dołączaniu)
::   WY: 1 / 0 / akronim pola
::  OLD: \valid/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_il_zero:=exec('zlim_chk4il','zl_nlimit');
{? ZLIM.KTM=null()
|| _res:='KTM'
|? (_il_zero=0 & ZLIM.LIL<=0) | (_il_zero>0 & ZLIM.LIL<0)
|| _res:='LIL'
|| ZLIM.cntx_psh();

   {? ZLIM.GROP<>null()
   || ZLIM.index('GROPKM');
      ZLIM.prefix(ZLIM.GROP,'T',0,ZLIM.KTM)
   || ZLIM.index('ZGP_KM');
      ZLIM.prefix(ZLIM.ZGP,'T',0,ZLIM.KTM)
   ?};
   {? ZLIM.first()
   || _res:='KTMX1'
   ?};

   {? ZLIM.GROP<>null()
   || ZLIM.index('GROPKM');
      ZLIM.prefix(ZLIM.GROP,'N',0,ZLIM.KTM)
   || ZLIM.index('ZGP_KM');
      ZLIM.prefix(ZLIM.ZGP,'N',0,ZLIM.KTM)
   ?};
   {? ZLIM.first()
   || _res:='KTMX2'
   ?};

   {? _res='' & ZLIM.KOR=0
   || {? ZLIM.GROP<>null()
      || ZLIM.index('GROPKM');
         ZLIM.prefix(ZLIM.GROP,ZLIM.LIMIT,0,ZLIM.KTM)
      || ZLIM.index('ZKN');
         ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KTM)
      ?};
      _mode_dst:=ZLIM.MODE_DST;
      _my_ktm:=ZLIM.KTM;
      {? ZLIM.first()
      || {!
         |? {? _my_ktm=ZLIM.KTM
            || {? _mode_dst<>ZLIM.MODE_DST
               || _msg:='Na liście limitów występuje już ten sam materiał, ale o innym znaczniku: '
                        '\'\'Ręczne śledzenie dostaw w partii\'\'.'@;
                  FUN.emsg(_msg);
                  _res:='MODE_DST'
               ?}
            ?};
            _res='' & ZLIM.next()
         !}
      ?}
   ?};

   ZLIM.cntx_pop()
?};
{? _res='' & ZLIM.SO='O' & ZLIM.GROP<>null() & ZLIM.KTM<>null()
||
:: Dla grup operacji sprawdzenie, czy odpad z atrybutem dostaw typu partia
   {? exec('material_party','material',ZLIM.KTM)>0
   || _res:='KTMX3'
   ?}
?};

{? _res='KTM'
|| FUN.emsg('Należy wypełnić pole Indeks.'@)
|? _res='KTMX1'
|| {? ZLIM.GROP<>null()
   || FUN.emsg(
         'Materiał o indeksie: %1 występuje już na liście limitów dla grupy operacji: %2.'@
         [ZLIM.KTM().KTM,exec('record','#to_string',ZLIM.GROP)]
         +'\n\n'+'Należy zmodyfikować zapis źródłowy lub wykorzystać możliwość korekty limitu.'@
      )
   || FUN.emsg(
         'Materiał o indeksie: %1 występuje już na liście limitów dla pozycji przewodnika: %2.'@
         [ZLIM.KTM().KTM,exec('record','#to_string',ZLIM.ZGP)]
         +'\n\n'+'Należy zmodyfikować zapis źródłowy lub wykorzystać możliwość korekty limitu.'@
      )
   ?};
   _res:='KTM'
|? _res='KTMX2'
|| {? ZLIM.GROP<>null()
   || FUN.emsg(
         'Materiał o indeksie: %1 występuje już jako surowiec nielimitowany dla grupy operacji: %2.'@
         [ZLIM.KTM().KTM,exec('record','#to_string',ZLIM.GROP)]
      )
   || FUN.emsg(
         'Materiał o indeksie: %1 występuje już jako surowiec nielimitowany dla pozycji przewodnika: %2.'@
         [ZLIM.KTM().KTM,exec('record','#to_string',ZLIM.ZGP)]
      )
   ?};
   _res:='KTM'
|? _res='KTMX3'
|| FUN.emsg(
         'Materiał o indeksie: %1 posiada atrybut cechy dostawy typu partia.\n'
         'Nie można przypisać takiego materiału jako odpad do grupy operacji.'@[ZLIM.KTM().KTM]
   );
   _res:='KTM'
|? _res='LIL'
|| {? _il_zero=0
   || FUN.emsg('Ilość musi być większa od zera.'@)
   || FUN.emsg('Ilość nie może być ujemna.'@)
   ?}
?};

_simple_red:=exec('get','#params',500660);
:: Dla otwartego zlecenia dodatkowo sprawdzam przyczynę korekty
{? _res='' & ZLIM.ZLEC().STAN='O' & _simple_red<>'T'
|| {? ZLIM.WHY=null()
   || FUN.info('Podaj przyczynę korekty.'@);
      _res:='WHY'
   ?}
?};


{? _res='' & ZLIM.MG<>null()
||
:: W przypadku surowców limitowanych sprawdzenie czy przypisany magazyn paletowy
::(jeżeli tak to wszystkie surowce muszą być z paletowego)
   {? ZLIM.LIMIT='T' & ZLIM.SO='S'
   || {? exec('zlim_chk_mg','zl_limit1')=0
      || {? ZLIM.MG().PAL='T'
         || _msg:='Surowiec nie może być przypisany do magazynu z obsługą palet.'@
         || _msg:='Surowiec musi być przypisany do magazynu z obsługą palet.'@
         ?};
         FUN.emsg(_msg);
         _res:='MG'
      ?}
   ?};
:: Sprawdzam czy magazyn jest z obsługa dostaw jeżeli przypięta jest cecha
   {? _res='' & ZLIM.DK_C<>null()
   || {? ZLIM.MG().TYP<>'DOSTAWY'
      || _msg:='Limit posiada cechę, przypisany magazyn musi być typu: \'\'DOSTAWY\'\' lub \'\'DOSTEWI\'\''@;
         FUN.emsg(_msg);
         _res:='MG'
      ?}
   ?}
?};

{? _res='' & ZLIM.KOR2<>0
||
:: Korekta ze zmianą surowca
   {? VAR.LILP<0
   || _msg:='Ilość po korekcie zamienianego surowca nie może być ujemna.'@;
      FUN.emsg(_msg);
      _res:='LILP'
   ?}
?};

{? _res='' & ((1+ZLIM.MG().TYP)='D' | ZLIM.MG=null()) & ATR.FLAG_ED & ATR.FLAG<>1
|| exec('akcepatr','mat_atr',0,1)
?};

{? _res=''
||
:: Obsługa usług
   _res:=exec('valid_limit','zl_uslugi')
?};
_res


\bp_zlimw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Akcja 'przed popraw' limitu
::   WE: [_a] - __ZLIM (tabela tymczasowa do wyświetlania limitów w drzewie)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0      || _tab:=_a
|? var_pres('__ZLIMp')>0 || _tab:=__ZLIMp.ZLIM
|? var_pres('__ZLIM')>0  || _tab:=__ZLIM
                         || return()
?};

{? _tab.ZM='Z'
|| FUN.info('Pozycji grupującej nie można redagować.'@);
   return()
?};

ZLIM.cntx_psh();
ZLIM.prefix();
{? ZLIM.seek(_tab.REF)
|| {? ZLIM.AKC<>'N'
   || FUN.info('Można redagować tylko pozycje niezatwierdzone.'@)
   || exec('bs_zlimp','zl_limit',_tab)
   ?}
?};
ZLIM.cntx_pop();
~~


\bs_zlimp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Element akcji przed popraw
::   WE: [_a] - __ZLIM (tabela tymczasowa do wyświetlania limitów w drzewie)
::   WY: 1 / 0
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0      || _tab:=_a
|? var_pres('__ZLIMp')>0 || _tab:=__ZLIMp.ZLIM
|? var_pres('__ZLIM')>0  || _tab:=__ZLIM
                         || _tab:=~~
?};

PFAZ.clear();
PFAZ.f_set('KOD');

::{? VAR.A_ZLEC().NRNZL=0 & VAR.A_ZLEC().GENLIM='P'
::|| FUN.emsg('Limity można poprawiać od strony podzleceń.'@);
::   return(0)
::|? VAR.A_ZLEC().NRNZL<>0 & VAR.A_ZLEC().GENLIM='N'
::|| FUN.emsg('Limity można poprawiać od strony zlecenia nadrzędnego.'@);
::   return(0)
::?};

_red:=ZLIM.mk_edit('|--|'+'Dane limitu — zmiana magazynu'@,,'magazynlimitu');
ZLIM.win_efld(_red,,'MG','SYM','*',,,,'Magazyn'@);
ZLIM.win_efld(_red,,'MG','NAZ',,,,,' ');
ZLIM.win_ebtn(_red,'icon='+exec('ok','#icon')+',text='+'OK'@,'key:F2');
ZLIM.win_ebtn(_red,'icon='+exec('anuluj','#icon')+',text='+'Anuluj'@,'key:Esc');

:: Zakładam filtr na słownik materiałów
{? exec('get','#params',500740,2)='N'
|| exec('filter_clear','material')
|| exec('filter','material','PS')
?};

{? ZLIM.KOR=0
|| ZLIM.cntx_psh();
   _nr:=ZLIM.NR;
   VAR.LIL:=ZLIM.LIL;
   ZLIM.clear();
   ZLIM.index('ZGP_KM');
   ZLIM.prefix(ZLIM.ZGP,'T',_nr);
   {? ZLIM.first() || {! |? {? ZLIM.AKC='T' || VAR.LIL+=ZLIM.LIL ?}; ZLIM.next() !} ?};
   ZLIM.cntx_pop();
   {? VAR.A_ZLEC().GENLIM='P' & ZLIM.KTM().R='P' || ilprzed:=ZLIM.LIL ?};
   ZLIM.win_edit({? ZLIM.AUTO='T' || _red || 'RED_LIM' ?});
   ATR.MJS:='ZLIM';
   ATR.M_ATR:=ZLIM.KTM().M_ATR;
   ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
   ATR.FLAG:=0;
   ATR.FLAG_ED:=0;
   {? ZLIM.DK_C<>null() & ZLIM.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZLIM.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   exec('efld_opt','zl_limit1');
   {? ZLIM.edit("exec('validate_popraw','zl_limit')")
   || ZLIM.put();
      {? type_of(_tab)=type_of(SYSLOG)
      || {? _tab.find_tab(1,'REF',,'=',$ZLIM.ref())
         || _tab.LIL:={? ZLIM.SO='O' || -ZLIM.LIL || ZLIM.LIL ?};
            _tab.M_REF:=#ZLIM.KTM;
            {? _tab.PARENT=0
            || _tab.M_REF:=#ZLIM.KTM;
               _tab.KTM:=ZLIM.KTM().KTM;
               _tab.N:=M.N
            || _parent:=_tab.PARENT;
               _tab.cntx_psh();
               {? _tab.find_tab(1,'M_REF',,'=',_tab.M_REF,'REF',,'=','')
               || _parent:=#_tab.ref()
               ?};
               _tab.cntx_pop();
               _tab.PARENT:=_parent;
               _tab.N:=ZLIM.ZLDOD().OPIS
            ?};
            _tab.J:=M.J().KOD;
            _tab.PFAZ:=ZLIM.PFAZ().KOD;
            _tab.SO:=ZLIM.SO;
            _tab.PARTIA:=ZLIM.PARTIA;
            _tab.WYD:=ZLIM.WYD().KOD;
            _tab.WYD_REF:=#ZLIM.WYD;
            _tab.MAG:=ZLIM.MG().SYM;
            _tab.MAG_REF:=#ZLIM.MG;
            _tab.STARTD:=ZLIM.STARTD;
            _tab.STARTT:=ZLIM.STARTT;
            _tab.put()
         ?}
      ?}
   ?}
|| _nr:=ZLIM.KOR;
   _lim:=ZLIM.LIMIT;
   ZLIM.cntx_psh();
   ZLIM.clear();
   ZLIM.index('ZN');
   ZLIM.prefix(VAR.A_ZLEC,_lim,_nr);
   ZLIM.first();
   _nr:=ZLIM.NR;
   VAR.LIL:=ZLIM.LIL;
   VAR.LILP:=ZLIM.LIL;
   VAR.ZLIM_AKC:=ZLIM.AKC;
   VAR.ZLIM_AUT:=ZLIM.AUTO;
   VAR.ZLIM_AKU:=ZLIM.AKCU;
   VAR.ZLIM_DT:=ZLIM.DT;
   VAR.ZLIM_TIM:=ZLIM.TIM;
   ZLIM.clear();
   ZLIM.index('ZKK');
   ZLIM.prefix(VAR.A_ZLEC,'T',_nr);
   {? ZLIM.first() || {! |? {? ZLIM.AKC='T' || VAR.LIL+=ZLIM.LIL ?}; ZLIM.next() !} ?};
   ZLIM.cntx_pop();
   ZLIM.win_edit('RED_KRR');
   ATR.MJS:='ZLIM';
   ATR.M_ATR:=ZLIM.KTM().M_ATR;
   ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
   ATR.FLAG:=0;
   ATR.FLAG_ED:=0;
   {? ZLIM.DK_C<>null() & ZLIM.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZLIM.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
   ?};
   exec('efld_opt','zl_limit1');
   {? ZLIM.edit("exec('chk_korp_il','zl_limit')")
   || ZLIM.put();
      {? type_of(_tab)=type_of(SYSLOG)
      || {? _tab.find_tab(1,'REF',,'=',$ZLIM.ref())
         || _tab.LIL:={? ZLIM.SO='O' || -ZLIM.LIL || ZLIM.LIL ?};
            _tab.M_REF:=#ZLIM.KTM;
            _tab.KTM:='kor: '+ZLIM.WHY().KOD;
            _tab.N:=ZLIM.WHY().NAZ;
            _tab.J:=M.J().KOD;
            _tab.PFAZ:=ZLIM.PFAZ().KOD;
            _tab.SO:=ZLIM.SO;
            _tab.PARTIA:=ZLIM.PARTIA;
            _tab.WYD:=ZLIM.WYD().KOD;
            _tab.WYD_REF:=#ZLIM.WYD;
            _tab.MAG:=ZLIM.MG().SYM;
            _tab.MAG_REF:=#ZLIM.MG;
            _tab.STARTD:=ZLIM.STARTD;
            _tab.STARTT:=ZLIM.STARTT;
            _tab.put()
         ?}
      ?}
   ?}
?};
ZLIM.win_edit('RED_LIM');
:: Przywracam tytuł i akcje w słowniku materiałów
exec('filter_clear','material');
clr_edit();
1


\pp_zlimw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Skalowanie limitów zlecenia o zadany współczynnik
::----------------------------------------------------------------------------------------------------------------------
{? VAR.A_ZLEC().GENLIM='P' & ZLIM.KTM().R='P' & ZLIM.KOR=0
|| {? ilprzed<>ZLIM.LIL
   ||
::    współczynnik o jaki należy przeskalować poz. limity
      _wsp:=ZLIM.LIL/ilprzed;
      ZL.cntx_psh();
      ZL.index('KTM');
      ZL.prefix(ZLIM.KTM,VAR.A_ZLEC().STAN,exec('nrnzl','zl_head',VAR.A_ZLEC().NRNZL));
      {? ZL.first()
      || ZLIM.cntx_psh();
         ZLIM.index('ZN');
         ZLIM.prefix(ZL.ref());
         {? ZLIM.first()
         || do();
            {!
            |? {? ZLIM.AKC='N'
               || _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
                  ZLIM.LIL:={? _dokl>0
                            || (ZLIM.LIL*_wsp)$_dokl
                            || ceil(ZLIM.LIL*_wsp)
                            ?};
                  ZLIM.put()
               || undo();0
               ?};
               ZLIM.next()
            !};
            {? ~end()
            || FUN.info(
                  'Limity zaakceptowane.\n'
                  'Korekty limitów do zlecenia półfabrykatowego należy dokonać ręcznie.'@
               )
            ?}
         ?};
         ZLIM.cntx_pop()
      ?};
      ZL.cntx_pop()
   ?};
   &ilprzed
?};
~~


\__ZLIM_bdisp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Przed wyświetl w __ZLIM
::   WE: [_a] - __ZLIM (tabela tymczasowa do wyświetlania limitów w drzewie)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0      || _tab:=_a
|? var_pres('__ZLIMp')>0 || _tab:=__ZLIMp.ZLIM
|? var_pres('__ZLIM')>0  || _tab:=__ZLIM
                         || return()
?};

_atrmjs:=ATR.MJS;
ATR.MJS:='ZLIM';
{? _tab.ZM='Z'
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_tab.ZL_REF,)
   || exec('zl_display','zl_head')
   ?};
   ZL.cntx_pop()
|? _tab.ZM='M' & _tab.X_KIND='G'
|| M.clear();
   {? M.seek(_tab.M_REF,)
   || M.display()
   ?}
|| exec('bs_zlimw','zl_limit')
?};
ATR.MJS:=_atrmjs;
~~


\validate_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Walidacja poprawiania ZLIM
::   WY: STRING
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_result:=exec('chk_datetime','zl_limit');

{? _result='' & ZLIM.KOR=0
||
   ZLIM.cntx_psh();
   ZLIM.index('ZKN');
   ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KTM);
   _mode_dst:=ZLIM.MODE_DST;
   _my_ktm:=ZLIM.KTM;
   _my_ref:=$ZLIM.ref();
   {? ZLIM.first()
   || {!
      |? {? _my_ktm=ZLIM.KTM & _my_ref<>$ZLIM.ref()
         ||
            {? _mode_dst<>ZLIM.MODE_DST
            ||
               _msg:='Na liście limitów występuje już ten sam materiał, ale o innym znaczniku: '
                     '\'\'Ręczne śledzenie dostaw w partii\'\'.'@;
               FUN.emsg(_msg);
               _result:='MODE_DST'
            ?}
         ?};
         _result='' & ZLIM.next()
      !}
   ?};
   ZLIM.cntx_pop()
?};
{? _result='' & ZLIM.MG<>null()
||
:: W przypadku surowców limitowanych sprawdzenie czy przypisany magazyn paletowy
::(jeżeli tak to wszystkie surowce muszą być z paletowego)
   {? ZLIM.LIMIT='T' & ZLIM.SO='S'
   || {? exec('zlim_chk_mg','zl_limit1',0)=0
      || {? ZLIM.MG().PAL='T'
         || _msg:='Surowiec nie może być przypisany do magazynu z obsługą palet.'@
         || _msg:='Surowiec musi być przypisany do magazynu z obsługą palet.'@
         ?};
         FUN.emsg(_msg);
         _result:='MG'
      ?}
   ?}
?};


{? _result='' & ((1+ZLIM.MG().TYP)='D' | ZLIM.MG=null()) & ATR.FLAG_ED & ATR.FLAG<>1
|| exec('akcepatr','mat_atr',0,1)
?};

_result


\chk_datetime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redagowaniu limitu - sprawdza sensowność wprowadzonej daty i godziny
::   WY: 0 / 1
::  OLD: \chk_datetime/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
_res:='';
{? ZLIM.GROP<>null() & ZLIM.STARTD<>date(0,0,0) &
   exec('create','#tm_stamp',ZLIM.STARTD,ZLIM.STARTT)>exec('create','#tm_stamp',ZLIM.GROP().PL_DATA,GROP.PL_TIME)
|| FUN.emsg(
      'Termin zapotrzebowania (%1 %2) nie może być późniejszy\n'
      'niż wewnętrzny termin realizacji grupy operacji (%3 %4).'@@
      [$ZLIM.STARTD,$ZLIM.STARTT,$GROP.PL_DATA,$GROP.PL_TIME]
   );
   _res:='STARTD'
|? ZLIM.ZLEC<>null() & ZLIM.STARTD<>date(0,0,0) &
   exec('create','#tm_stamp',ZLIM.STARTD,ZLIM.STARTT)>exec('create','#tm_stamp',ZLIM.ZLEC().PL_DATA,ZL.PL_TIME)
|| FUN.emsg(
      'Termin zapotrzebowania (%1 %2) nie może być późniejszy\n'
      'niż wewnętrzny termin realizacji zlecenia (%3 %4).'@@
      [$ZLIM.STARTD,$ZLIM.STARTT,$ZL.PL_DATA,$ZL.PL_TIME]
   );
   _res:='STARTD'
?};

:: Sprawdzam czy magazyn jest z obdługą dostaw jeżeli przypięta jest cecha
{? _res=''
|| {? ZLIM.DK_C<>null() & ZLIM.MG<>null()
   || {? ~(ZLIM.MG().TYP*'DOST')
      || _msg:='Limit posiada cechę, przypisany magazyn musi być typu: \'\'%1\'\' lub \'\'%2\'\''@['DOSTAWY','DOSTEWI'];
         FUN.emsg(_msg);
         _res:='MG'
      ?}
   ?}
?};

ZL.cntx_pop();
_res


\chk_korp_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Sprawdzenie czy ilość korygowana nie spowoduje ujemnego limitu po korektach (przy poprawianiu)
::   WY: 1 / 0 / akronim pola
::  OLD: \chk_korp_il/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_il_zero:=exec('zlim_chk4il','zl_nlimit');
{? _il_zero=0 & ZLIM.LIL=0
|| FUN.emsg('Należy podać ilość korekty.'@);
   _result:='LIL'

|? ZLIM.WHY=null()
|| FUN.emsg('Należy podać przyczynę korekty.'@);
   _result:='WHY'

|? 1+ZLIM.WHY().KOD='~'
|| FUN.emsg('Należy podać inną przyczynę korekty.'@);
   _result:='WHY'

|| _il:=VAR.LIL+ZLIM.LIL;
   {? _il<0
   || FUN.emsg('Ilość na limicie po korektach nie może być mniejsza od zera.'@);
      _result:='LIL'
   ?}
?};

:: Sprawdzam czy magazyn jest z obsługą dostaw jeżeli przypięta jest cecha
{? _result=''
|| {? ZLIM.DK_C<>null() & ZLIM.MG<>null()
   || {? ~(ZLIM.MG().TYP*'DOST')
      || _msg:='Limit posiada cechę, przypisany magazyn musi być typu: \'\'DOSTAWY\'\' lub \'\'DOSTEWI\'\''@;
         FUN.emsg(_msg);
         _result:='MG'
      ?}
   ?}
?};

_result


\WhatZLiZLDOD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca wartości dla ZLIM.ZLEC i ZLIM.ZLDOD
::   WE: _a   - ZL.ref() zlecenia badanego (VAR.A_ZLEC)
::       [_b] - ZL.ref() zlecenia nadrzędnego
::   WY: wynik[1] - ZLIM.ZLEC
::       wynik[2] - ZLIM.ZLDOD
::       wynik[3] - które zlecenie jest 'dawcą' technologii
::     lub
::       komunikat błędu
::----------------------------------------------------------------------------------------------------------------------
_curZL:={? _>0 & type_of(_a)=type_of(ZL.ref()) || _a || VAR.A_ZLEC ?};
_nadZL:={? _>1 & type_of(_b)=type_of(ZL.ref()) || _b || null()     ?};

_result:=obj_new('Zlec','ZlDod','ZlSrc');
_result.Zlec:=_result.ZlDod:=_result.ZlSrc:=null();

{? _curZL<>null()
|| _result.Zlec:=_curZL;
   _result.ZlDod:=exec('top_level','zl_link',_curZL);
   _result.ZlSrc:=_curZL
|| _result:='Wystąpił błąd parametrów'@
?};
return(_result);

::----------------------------------------------------------------------------------------------------------------------

_ok:=1;
{? _curZL<>null()
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_curZL)
   ||
      {? ZL.RODZAJ='P'
::       Zlecenie pojedyncze
      || {? ZL.NRNZL=0
::          Zlecenie samodzielne
         || _Zlec:=ZL.ref();
            _ZlDod:=null();
            _ZlSrc:=ZL.ref();
            1
::          Zlecenie podrzedne
         || {? ZL.GENLIM='N'
::             Generowane do nadrzednego
            ||
               _Zlec:={? _nadZL=null() || exec('GetZLref4UNRZL','zl_common',ZL.NRNZL) || _nadZL ?};
               _ZlDod:=ZL.ref();
               _ZlSrc:=ZL.ref();
               1
::             Generowane do podrzednego
            || _Zlec:=ZL.ref();
               _ZlDod:={? _nadZL=null() || exec('GetZLref4UNRZL','zl_common',ZL.NRNZL) || _nadZL ?};
               _ZlSrc:=ZL.ref();
               1
            ?}
         ?}
      |? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
::       Zlecenie zlozone
      || {? ZL.GENLIM='N'

::          Generowane do nadrzednego
         || {? ZL.NRNZL=0
::             Zlecenie glowne - wiec wchodzimy w kazde podrzedne i mielimy
            || _Zlec:=ZL.ref();
               _ZlDod:=null();
               _ZlSrc:=null();
               1

::             Zlecenie jednoczesnie podrzedne i nadrzedne - limity beda do jego nadrzednego
::             chociaz pewnie jeszcze dlugo ten fragment sie nie uruchomi
            ||
               _Zlec:={? _nadZL=null() || exec('GetZLref4UNRZL','zl_common',ZL.NRNZL) || _nadZL ?};
               _ZlDod:=null();
               _ZlSrc:=null();
               1
            ?}

::          Generowane do podrzednego
         || _Zlec:=null();
            _ZlDod:={? _nadZL=null() || ZL.ref() || _nadZL ?};
            _ZlSrc:=null();
            1
         ?}
      ?}
   || _ok:=0
   ?};
   ZL.cntx_pop()
||
   _ok:=0
?};
{? _ok
|| _result.Zlec:=_Zlec;
   _result.ZlDod:=_ZlDod;
   _result.ZlSrc:=_ZlSrc;
   _result
|| 'Wystąpił błąd parametrów'
?}


\ZLIM_AKC_wyc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: wycofanie akceptacji limitu zlecenia = usuniecie ZK_P
::   WE: [_a] - 1 - komunikaty na ekran, 0 - komunikaty wrzucane do KOMM'a, -1 - brak jakichkolwiek komunikatow
::       [_b] - ZLIM.ref() - gdy nie podany, to pobierany aktualny
::       [_c] - 1 - wycofuje akceptacje, nawet gdy zlecenie jest zatwierdzone pod wzgledem limitow
::UWAGA: To jest usuniecie akceptacji konkretnego ZLIMa (obslugi tabel __ZLIM itp musza byc zalatwione na zewnatrz)
::----------------------------------------------------------------------------------------------------------------------
_msgs:={? var_pres('_a')=type_of(_a) || _a || 1 ?};
_zlim:={? var_pres('_b')=type_of(ZLIM.ref()) || _b || ZLIM.ref() ?};
_brut:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_zkn:=tab_tmp(1,'ZKN','STRING[16]','');
_czy_kor:=0;
ZK_N.cntx_psh(); ZK_N.clear();
ZK_P.cntx_psh(); ZK_P.clear();
ZLIM.cntx_psh(); ZLIM.clear();
ZL.cntx_psh();

{? ZLIM.seek(_zlim)
|| {? _msgs=0 || KOMM.sect_beg('Pozycja %1 %2'@[ZLIM.KTM().KTM,ZLIM.KTM().N],,,1) ?};

   _zlec:=ZLIM.ZLEC;
   _wydz:=ZLIM.WYD;
   _mref:=ZLIM.KTM;
   _limt:=ZLIM.LIMIT;

:: parametry startowe - domyslnie, wycofujemy i nie ma tekstu bledu
   _wycofaj:=1;
   _txt:='';

:: Surowiec
   {? ZLIM.SO='S'
   ||
::    Sprawdzamy, czy jest nagłówek zamówienia
      _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
         ZLIM.ZLEC,exec('GetZLIM_WYD','zl_limit'),0,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
      );

::    Sprawdzamy, czy jest pozycja zamówienia
      _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',_zk_n,0);

::    Ile łącznie na tym limicie po wycofaniu tego zapisu
      {? ZLIM.KOR=0
      || _il_po_kor:=0
      || _il_po_kor:=exec('sum_il','zl_limit',
            exec('FindInSet','#table','ZLIM','ZGP_NM',ZLIM.KOR,ZLIM.ZGP,"ZLIM.ref()",,'T'),1)-ZLIM.LIL
      ?};

      _wycofaj:=
      {? ~_brut & ZLIM.ZGP().NRZLP().STAT_L='T' & exec('FindAndGet','#table',ZL,ZLIM.ZLEC,,"STAN",'N')='N'
      || _txt:='Zakończono rejestrowanie limitów przewodnika %1.'@[ZGH.NRPRZ];
         0

      |? ZLIM.ZLEC().STAN='Z' | ZLIM.ZLDOD().STAN='Z'
      || _txt:='Zlecenie zamknięte. Wycofanie akceptacji niemożliwe.'@;
         0

      |? _il_po_kor<0
      || _txt:='Ilość na limicie po wycofaniu korekty byłaby mniejsza niż zero.'@;
         0

::    Sprawdzamy, czy pozycja rzeczywiście jest zaakceptowana czy też nie
      |? ZLIM.AKC<>'T'
      || _txt:='Pozycja nie jest zaakceptowana.'@;
         0

      |? _zk_p=null() | ZK_P.seek(_zk_p)=0
      || ZLIM.AKC:='N';
         ZLIM.put(1);
         _txt:='Pozycja nie jest zaakceptowana.'@;
         0

      |? ~_brut & ZLIM.BORNSTAT<>ZLIM.ZLEC().STAN
         & ZLIM.ZLEC().STAN<>'N'
      || _txt:='Pozycja powstała gdy zlecenie było w stanie "%1". Wycofanie akceptacji niemożliwe.'@
               [-exec('GetZL_STAN_txt','zl_common',ZLIM.BORNSTAT)];
         0

      |? ZLIM.cntx_psh();
         {? ZLIM.GROP<>null()
         || ZLIM.index('GROPKM');
            ZLIM.prefix(ZLIM.GROP,'T',ZLIM.NR)
         || ZLIM.index('ZGP_KM');
            ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.NR)
         ?};
         _first:=ZLIM.first();
         ZLIM.cntx_pop();
         _first
      || _txt:='Istnieją korekty do pozycji. Wycofanie akceptacji niemożliwe.'@;
         0

      |?
::       Sprawdzam czy sa jakies dokumenty do zlima
         ZLIM.IL_RW+ZLIM.IL_ZW>0
      ||
         _txt:='Do limitu zostały wystawione dokumenty magazynowe. Wycofanie akceptacji niemożliwe.'@;
         0

::    ZLIM sprawdzony, patrzymy na ZK_P
      |? (ZLZAM.index('ZMZL');
          ZLZAM.prefix($_zk_p);
          ZLZAM.first()
         )
      || _txt:='Utworzono już zlecenie produkcyjne. Wycofanie akceptacji niemożliwe.'@;
         0

      |? ZK_P.seek(_zk_p);
         ZK_P.ILP<>ZK_P.ILZ
       & (ZK_P.ILP-ZLIM.LIL)<0
      || _txt:='Pozycja była już realizowana. Wycofanie akceptacji niemożliwe.'@;
         0

      |? ZK_P.seek(_zk_p)
       & ZK_P.REZ
      || _txt:='Pozycja jest zarezerwowana.\n'
               'Wycofanie akceptacji spowoduje jej odrezerwowanie (wyjście z kolejki rezerwacji).'@;
::    tutaj miejsce na parametr, czy przy takiej sytuacji kontynuowac czy nie, obecnie kontynuujemy (1)
         1
      || 1
      ?};

      {? _wycofaj
      || _lock:=0;
         {? ZK_N.seek(_zk_n)
          & (_lock:=ZK_N.r_lock(1,1,1);_lock)
          & {? _msgs=1
            || _choice:=0;
               {? ZLIM.KOR<>0 & ZLIM.KOR2=0
               ||
                  ZL.cntx_psh();
                  ZL.index('RTMATSRC');
                  ZL.prefix(ZLIM.RTMAT,ZLIM.ZLEC().UNRZL);
                  {? ZL.first()
                  || _choice:=1;
                     _zl_old_il:=ZL.IL;
                     _zl_new_il:=ZL.IL+ZLIM.LIL;
                     _txt+=('\nLimit powiązany jest ze zleceniem: %1.\n'
                            'Czy wycofać wybraną pozycję i automatycznie skorygować ilość na powiązanym podzleceniu?'@
                            [ZL.SYM]);
::                   Sprawdzam czy po ewentualnej korekcie ilości na podzleceniach i
::                   powiązanych z nimi limitach będą zgodne
                     _coef:={? ZLIM.LIL<>0 || _zl_new_il/_zl_old_il || 0 ?};
                     _res:=1;
                     {? exec('subsubzlec_exist','zl_link',ZL.ref())>0
                     || _limzl:=exec('kor_chk_limzl','zl_common',ZL.ref(),_coef);
                        {? _limzl.RESULT=0
                        || _res:=0;
                           _txt+='\n\nUWAGA!\nPo automatycznej korekcie ilość na przynajmniej jednym limicie nie będzie'
                                 'zgodna z ilością powiązanego zlecenia.\n\n'
                                 'Dla przykładu:\n'
                                 'Ilość na zleceniu %1 po korekcie:%2.\n'
                                 'Ilość na powiązanym limicie:%3.\n\n'
                                 'Do zachowania spójności wymagane będzie przeprowadzenie dodatkowych korekt.\n'@
                                 [_limzl.ZL,$_limzl.IL_ZL,$_limzl.IL_ZLIM]
                        ?}
                     ?};
                     {? _res>0
                     ||
::                      Sprawdzam czy korekta jest wymagana do zachowania spójności
::                      Wyliczam dotychzasową ilość na limicie
                        _zlim_old_il:=_zlim_new_il:=0;
                        ZLIM.cntx_psh();
                        ZLIM.clear();
                        ZLIM.index('ZKK');
                        ZLIM.prefix(ZLIM.ZLEC,'T',0,ZLIM.KTM);
                        {? ZLIM.first()
                        || {!
                           |?
                              _zlim_old_il+=exec('sum_il','zl_limit',ZLIM.ref(),1);
                              ZLIM.next()
                           !}
                        ?};
                        ZLIM.cntx_pop();
                        _zl_new_il:=_zlim_old_il-ZLIM.LIL;
                        _zlim_new_il:=_zl_old_il-ZLIM.LIL;
::                      Sprawdzam tylko wtedy, jeżeli do tej pory była zachowana zgodność
                        {? _zlim_old_il=_zl_old_il
                        || {? _zlim_new_il=_zl_new_il & _zl_new_il>0
                           || _txt+='\n\nUWAGA!\nAby zachować zgodność ilości na limicie i powiązanym zleceniu '
                                    'należy skorzystać z opcji automatycznej korekty.\n'@
                           |? _zlim_old_il=_zl_new_il & _zl_new_il>0
                           || _txt+='\n\nUWAGA!\nAby zachować zgodność ilości na limicie i powiązanym zleceniu nie '
                                    'należy korzystać z opcji automatycznej korekty.\n'@
                           || _txt+='\n\nUWAGA!\nPo automatycznej korekcie ilość na przynajmniej jednym limicie nie '
                                    'będzie zgodna z ilością powiązanego zlecenia.\n\n'@
                           ?}
                        ?}
                     ?}
                  ?};
                  ZL.cntx_pop()
               ?};
               {? _choice>0
               || _choice:=FUN.choice(_txt,,'Tylko wycofaj'@,'Wycofaj i skoryguj'@);
                  {? _choice>0
                  || {? _choice=2
                     || _czy_kor:=1
                     ?};
                     1
                  || 0
                  ?}
               || KOMM.ask({? +_txt || _txt+'\n' || '' ?}+'Czy wycofać akceptację dla pozycji?'@,_msgs,1)
               ?}
            || 1
            ?}
         ||
            ZK_P.cntx_psh();
            ZK_P.index('TYPN');
            ZK_P.prefix('A','Z',ZK_P.N,1);
            ZK_P.first();
            _zk_n_del:=ZK_P.size()<=1;
            ZK_P.cntx_pop();

::          Aktualnie ilość na limicie z zaakceptowanymi korektami
            ZLIM.cntx_psh();
            ZLIM.index('ZN');
            ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.KOR);
            {? ZLIM.first()
            || _lim_all:=exec('sum_il','zl_limit',ZLIM.ref(),1)
            || _lim_all:=0
            ?};
            ZLIM.cntx_pop();

            {? ZLIM.KOR<>0
            ||
::             korekta, wiec tylko zmiana ilosci na zamowieniu
               {? ZK_P.seek(_zk_p)
               ||
::                Jeżeli wycofujemy korektę limitu powiązanego z podzleceniem to zmieniam ilość na podzleceniu
                  {? _czy_kor>0
                  ||
                     ZLIM.cntx_psh();
                     ZL.cntx_psh();
                     ZL.index('RTMATSRC');
                     ZL.prefix(ZLIM.RTMAT,ZLIM.ZLEC().UNRZL);
                     {? ZL.first()
                     ||
                        _buffer_in:=exec('buffer','zl_head');
                        _buffer_in.bl_void();
                        _buffer_in.IL:=ZL.IL-ZLIM.LIL;
::                      Sprawdzam czy nowa ilość na zleceniu nie będzie zerem lub liczbą mniejszą
::                      od ilości już zaraportowanej
                        {? _buffer_in.IL=0
                        || _result:=0;
                           FUN.emsg('Nie udało się skorygować ilości do zlecenia %1.\n'
                                    'Ilość na zleceniu po korekcie musi być większa od zera.'@[ZL.SYM])
                        |? ZL.ILDOK>_buffer_in.IL
                        || FUN.emsg('Nie udało się skorygować ilości do zlecenia %1.\n'
                                    'Ilość na zleceniu po korekcie nie może być mniejsza od ilości już zaraportowanej.'@
                                    [ZL.SYM])
                        || {? exec('zl_popraw','zl_head',ZL.ref(),0,0,0,_buffer_in,0)>0
                           || KOMM.info('Skorygowano ilości do zlecenia %1.'@[ZL.SYM],_msgs,1)
                           || KOMM.info('Nie udało się skorygować ilości do zlecenia %1.'@[ZL.SYM],_msgs,1)
                           ?}
                        ?}
                     ?};
                     ZLIM.cntx_pop();
                     ZL.cntx_pop()
                  ?};

                  ZLIM.AKC:='N';
                  ZLIM.DT:=date(0,0,0);
                  ZLIM.TIM:=time(0,0,0);
                  ZLIM.AKCU:=null();
                  {? ZLIM.put(1)
                  || KOMM.info({? ZLIM.KOR>0 || 'Wycofano akceptację korekty.'@
                                             || 'Wycofano akceptację pozycji.'@
                               ?},_msgs,1);
                     {? ZLIM.LIL<0
                     || {? _lim_all<ZK_P.ILZ
                        || _diff:=ZK_P.ILZ-_lim_all;
                           {? _diff>=-ZLIM.LIL
                           || _diff:=0
                           || _diff:=-ZLIM.LIL-_diff
                           ?};
                           ZK_P.ILZ+=_diff;
                           ZK_P.ILP+=_diff;
                           ZK_P.ILBEZ+=_diff
                        || ZK_P.ILZ-=ZLIM.LIL;
                           ZK_P.ILP-=ZLIM.LIL;
                           ZK_P.ILBEZ-=ZLIM.LIL
                        ?}
                     || {? _lim_all<ZK_P.ILZ
                        || _diff:=ZK_P.ILZ-_lim_all;
                           {? _diff>ZLIM.LIL
                           || _diff:=ZLIM.LIL
                           ?};
                           {? ZK_P.ILP<=_diff
                           || ZK_P.ILZ-=ZK_P.ILP;
                              ZK_P.ILP:=0;
                              ZK_P.ILBEZ:=0;
                              1
                           || ZK_P.ILZ-=_diff;
                              ZK_P.ILP-=_diff;
                              ZK_P.ILBEZ-=_diff;
                              1
                           ?}
                        || ZK_P.ILZ-=ZLIM.LIL;
                           ZK_P.ILP-=ZLIM.LIL;
                           ZK_P.ILBEZ-=ZLIM.LIL
                        ?}
                     ?};

                     {? ZK_P.put(1)
                     ||
                        KOMM.info('Skorygowano wpisy w zamówieniu wewnętrznym'@,_msgs,1);
                        {? ZK_P.REZ
                        || ZK_P.cntx_psh();
                           _mydo:=0;
                           {? do_state()=0
                           || _mydo:=1;
                              do()
                           ?};
                           exec('rez_pozy','rezerwacje',5);
                           {? _mydo>0
                           || end()
                           ?};
                           _zkn.clear(); {? ~_zkn.find_key($ZK_P.N) || _zkn.blank(); _zkn.ZKN:=$ZK_P.N; _zkn.add(1) ?};
                           ZK_P.cntx_pop()
                        ?}
                     ?};
::                   Aktualizuje ilości na ZK_P
                     exec('aktznzkp','zamsiw_poz',_zk_p,1)
                  || KOMM.error('Wystąpił błąd podczas wycofywania akceptacji.'@,_msgs,1)
                  ?}
               || KOMM.error('Wystąpił błąd podczas usuwania pozycji zamówienia.'@,_msgs,1)
               ?}
            || {? _zk_n_del || ZK_N.AKC:='N'; ZK_N.put(1) ?};
               {? ZK_P.seek(_zk_p) & exec('del_pozy','zamsiw_poz',0)=''
               || ZLIM.AKC:='N';
                  ZLIM.DT:=date(0,0,0);
                  ZLIM.TIM:=time(0,0,0);
                  ZLIM.AKCU:=null();
                  {? ZLIM.put(1)
                  || KOMM.info('Wycofano akceptację pozycji.'@,_msgs,1);

                     {? _zk_n_del
                      & ZK_N.seek(_zk_n)
                     || {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',ZK_N.ref()) & do_state() || undo() ?};
                        ZK_N.r_unlock();
                        ZK_N.cntx_psh();
::                      Usunięcie powiązań nagłówka zamówienia z planami strategicznymi
                        exec('kontrol_px','zamsiw_nag');
                        POM.TYPDOK:=ZK_N.T().KOD;
                        POM.TAB:='ZK_N';
                        numer:=ZK_N.NR;
                        oldnumer:=1;
                        exec('nr_old','numery');
                        ZK_N.cntx_pop();
                        {? ZK_N.del(1,1) || KOMM.info('Usunięto nagłówek zamówienia wewnętrznego.'@,_msgs,1)
                        |? sec_superuser()>0 || KOMM.error('Nie udało się usunąć nagłówka zamówienia.'@,_msgs,1)
                        ?}
                     ?}

                  || KOMM.error('Wystąpił błąd podczas wycofywania akceptacji.'@,_msgs,1)
                  ?}
               || KOMM.error('Wystąpił błąd podczas usuwania pozycji zamówienia.'@,_msgs,1)
               ?}
            ?};
            ZK_N.r_unlock()
         || {? _lock=0
            || KOMM.error('Nagłówek zamówienia do zlecenia został zablokowany przez innego użytkownika.'@,_msgs,1)
            ?}
         ?}
      |? _txt<>''
      || KOMM.error(_txt,_msgs,1)
      ?}

:: Odpad
   ||

      _wycofaj:=
      {? ~_brut & ZLIM.ZGP().NRZLP().STAT_L='T' & exec('FindAndGet','#table',ZL,ZLIM.ZLEC,,"STAN",'N')='N'
      || _txt:='Zakończono rejestrowanie limitów przewodnika %1.'@[ZGH.NRPRZ]; 0
::    Sprawdzamy, czy pozycja rzeczywiscie jest zaakceptowana czy tez nie
      |? ZLIM.AKC<>'T'
      || _txt:='Pozycja nie jest zaakceptowana.'@; 0
      |? ZLIM.ZLEC().STAN='Z'
      || _txt:='Zlecenie zamknięte. Wycofanie akceptacji niemożliwe.'@;
         0

      |? ZLIM.cntx_psh();
         ZLIM.index('ZGP_KM');
         ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.NR);
         _first:=ZLIM.first();
         ZLIM.cntx_pop();
         _first
      || _txt:='Istnieją korekty do pozycji. Wycofanie akceptacji niemożliwe.'@;
         0

      |?
::       Sprawdzam czy sa jakies dokumenty do zlima
         ZLIM.IL_RW+ZLIM.IL_ZW>0
      ||
         _txt:='Do pozycji zostały wystawione dokumenty magazynowe. Wycofanie akceptacji niemożliwe.'@;
         0

      || 1
      ?};

      {? _wycofaj
      || {? {? _msgs=1 || KOMM.ask('Czy wycofać akceptację dla pozycji?'@,_msgs,1) || 1 ?}
         || ZLIM.AKC:='N';
            ZLIM.DT:=date(0,0,0);
            ZLIM.TIM:=time(0,0,0);
            ZLIM.AKCU:=null();
            ZLIM.put(1)
         ?}
      |? _txt<>''
      || KOMM.error(_txt,_msgs,1)
      ?}
   ?};
   {? _msgs=0 || KOMM.sect_end()?}
?};
_zkn.clear();
{? _zkn.first() || exec('aktznzkn','zamsiw_nag',_zkn) ?};

ZLIM.cntx_pop();
ZK_P.cntx_pop();
ZK_N.cntx_pop();
ZL.cntx_pop();
~~


\usunlimit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: ZLIM dla akcji 'Usuń'
::   WE: [_a] - _ZLIMp (obiekt do wyświetlania limitów w drzewie)
::  OLD: \zlim_dod/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0      || _ZLIMp:=_a
|? var_pres('__ZLIMp')>0 || _ZLIMp:=__ZLIMp
                         || return()
?};

_ZLIM:=_ZLIMp.ZLIM.REF;

_msgs:=VAR.GRUPA<>'T';

ZLIM.cntx_psh();
ZLIM.clear();

_ShowKom:=0;

{? ZLIM.seek(_ZLIM)
|| {? 'GrupoweUsuniecieZlecenia'*KOMM.SESSID=0
   || _ShowKom:=1;
      KOMM.init(,,'Usuwanie limitu'@,'',,,,'UsuniecieZlecenia')
   ?};
   _sect:=KOMM.sect_beg(_ZLIMp.F_poz()
                       ,'xwin16.png:18#18'
                       ,
                       ,1
                       );
   _delete:=1;
   {? ZLIM.AKC='T' || KOMM.error('Pozycja jest zatwierdzona, usunięcie niemożliwe.'@,_msgs,1); _delete:=0 ?};

:: Korekty ilościowe
   ZLIM.cntx_psh();
   {? ZLIM.GROP<>null()
   || ZLIM.index('GROPKM');
      ZLIM.prefix(ZLIM.GROP,'T',ZLIM.NR)
   || ZLIM.index('ZGP_KM');
      ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.NR)
   ?};
   _somkor:=ZLIM.first();
   ZLIM.cntx_pop();

:: Korekty indeksu (do zapisów na zleceniu w przygotowaniu / niezaakceptowanej grupie operacji)
   {? _somkor=0
   || ZLIM.cntx_psh();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROP2M');
         ZLIM.prefix(ZLIM.GROP,ZLIM.NR)
      || ZLIM.index('ZGP_2M');
         ZLIM.prefix(ZLIM.ZGP,ZLIM.NR)
      ?};
      _somkor:=ZLIM.first();
      ZLIM.cntx_pop()
   ?};

:: Korekty indeksu (do zapisów na zleceniu otwartym / zaakceptowanej grupie operacji)
   {? _somkor=0
   || ZLIM.cntx_psh();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPNM');
         ZLIM.prefix(ZLIM.GROP,'T',ZLIM.KOR);
         {? ZLIM.first()
         || ZLIM.index('GROP2M');
            ZLIM.prefix(ZLIM.GROP,ZLIM.NR);
            _somkor:=ZLIM.first()
         ?}
      || ZLIM.index('ZGP_NM');
         ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.KOR);
         {? ZLIM.first()
         || ZLIM.index('ZGP_2M');
            ZLIM.prefix(ZLIM.ZGP,ZLIM.NR);
            _somkor:=ZLIM.first()
         ?}
      ?};
      ZLIM.cntx_pop()
   ?};
   {? _somkor || KOMM.error('Pozycja była korygowana, usunięcie niemożliwe.'@,_msgs,1); _delete:=0 ?};

   {? _delete
    & _msgs>0
   || _delete:=KOMM.ask( {? ZLIM.AUTO='T' || 'Pozycja została wygenerowana automatycznie.'@+'\n' || '' ?}
                        +'Czy usunąć tę pozycję?'@
                       ,1
                       ,1
                       )
   ?};

   {? _delete
   || {? exec('ZLIM_del','zl_limit',_ZLIMp)
      ||
:      exec('prz_zlimw','zl_limit');
:      _zref:=ZLIM.ref();
:      _kor:=ZLIM.KOR;
:      exec('po_zlimw','zl_limit');
         KOMM.update(_sect,,13,'0:200:0')
      || KOMM.update(_sect,,14,'200:0:0')
      ?};
      KOMM.sect_end();
      1
   || KOMM.sect_end();
      {? _ShowKom || KOMM.select() ?}
   ?}
?};
ZLIM.cntx_pop();
~~


\zlim_usu_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordow
:: OPIS: ZLIM 'Grupa przed' dla akcji 'Usun'
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć wszystkie zaznaczone i niezaakceptowane limity?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Usuwanie limitów'@,'',,,,'GrupoweUsuniecieZlecenia');
   sel_nchk();
   1
|| 0
?}


\zlim_usu_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordow
:: OPIS: ZLIM 'Grupa po' dla akcji 'Usun'
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\ZLIM_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: kasuje pozycje ZLIMit
::       UWAGA: Nie można usunąć limitu zaakceptowanego !!!
::   WE: _a - _ZLIMp
::----------------------------------------------------------------------------------------------------------------------
_ZLIMp:=_a;

ZLIM.prefix();
{? ZLIM.seek(_ZLIMp.ZLIM.REF)
|| _ZLIMref:=ZLIM.ref();

   {? ZLIM.KOR=0
   || _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
      {? _zk_p<>null()
       & ZK_P.seek(_zk_p)
      || return(0)
      ?}
   |? ZLIM.AKC='T'
   || return(0)
   ?};

:: Najpierw usuwamy korekty
   ZLIM.cntx_psh();
   ZLIM.index('ZGP_KM');
   ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.NR);
   {? ZLIM.first()
   || {!
      |? _ZLIMref:=ZLIM.ref();
         {? ZLIM.del(,1)
         || {? _ZLIMp.ZLIM.find_tab(1,'REF',,'=',$_ZLIMref) || _ZLIMp.F_del() ?}
         ?};
         ZLIM.first()
      !}
   ?};
   ZLIM.cntx_pop();

:: Usunięcie zapisów PX_MAT i PX_SUR
   exec('px_del','zl_limit',ZLIM.ZLEC,ZLIM.ref());

   ZLIM.get();
   _ZLIMref:=ZLIM.ref();
   _kor:=ZLIM.KOR;
   _zgp:=ZLIM.ZGP;
   {? ZLIM.del(,1)
   || exec('zlim_kor_del','zl_limit',$_ZLIMref);
      _ZLIMp.ZLIM.cntx_psh();
      {!
      |? _ZLIMp.ZLIM.find_tab(1,'REF',,'=',$_ZLIMref)
      |! _ZLIMp.F_del()
      !};
      _ZLIMp.ZLIM.cntx_pop();

:: W przypadku korekty usuwamy zapis nadrzędny, o ile jest na nim zerowa ilość (korekta indeksu) i brak innych korekt,
:: usuwana jest też skojarzona pozycja zamówienia.
      {? _kor<>0
      || ZLIM.cntx_psh();
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(_zgp,'T',_kor);
         {? ZLIM.first()
         || {? exec('sum_il','zl_limit',ZLIM.ref(),0)=0
            || _ZLIMref:=ZLIM.ref();
               exec('ZLIM_AKC_wyc','zl_limit',-1,ZLIM.ref());

               {? ZLIM.del(,1)
               || exec('zlim_kor_del','zl_limit',$_ZLIMref);
                  {? var_pres('_ZLIMp')>100
                  || _ZLIMp.ZLIM.cntx_psh();
                     {? _ZLIMp.ZLIM.find_tab(1,'REF',,'=',$_ZLIMref) || _ZLIMp.F_del() ?};
                     _ZLIMp.ZLIM.cntx_pop()
                  ?}
               ?}
            ?}
         ?};
         ZLIM.cntx_pop()
      ?};
      1
   || 0
   ?}
|| 0
?}


\zlim_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Akceptacja limitu - obsługa otoczki ZLIM w __ZLIM
::----------------------------------------------------------------------------------------------------------------------
_grupa:=VAR.GRUPA='T';

_zlim:=cur_tab(1,1);

{? _zlim.X_KIND='P'
 & 'MO'*_zlim.ZM
|| _zlim.cntx_psh();
   _dialog:=1;
   {? _grupa>0
   || _dialog:=2
   ?};
   exec('ZLIM_akc','zl_limit',_dialog,ZLIM.ref(),,,,,_grupa=0);
   ZLIM.get();
   _zlim.AKC:=ZLIM.AKC;
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
   _zlim.ZK_P_NAM:=8+$_zk_p;
   _zlim.ZK_P_REF:=#_zk_p;
   _zlim.ZK_P_QRF:=$_zk_p;
   _zlim.DT:=ZLIM.DT;
   _zlim.AKCU:=ZLIM.AKCU().DANE;
   _zlim.CRC:=ZLIM.crc();
   _zlim.put();

:: Jeśli akceptacja korekty to trzeba zrobić obl_stan żeby się zaktualizował stan magazynowy
   {? _zlim.KOR>0
   || MG.cntx_psh();
      M.cntx_psh();
      MG.index('MAG');
      {? _zlim.MAG_REF>0
      ||
::       Na limicie magazyn został wskazany - obliczam stan tylko na nim
         MG.clear();
         M.clear();
         {? M.seek(_zlim.M_REF,) & MG.seek(_zlim.MAG_REF,)
         || exec('obl_stan','magazyn_stan',M.ref(),1,MG.ref())
         ?}
      ||
::       Na limicie nie ma magazynu - obliczam stan dla materiału na wszystkich magazynach
         MG.clear();
         {? MG.first()
         || {!
            |?
               M.clear();
               {? M.seek(_zlim.M_REF,)
               || exec('obl_stan','magazyn_stan',M.ref(),1,MG.ref())
               ?};
               MG.next()
            !}
         ?}
      ?};
      MG.cntx_pop();
      M.cntx_pop();
::    Aktualizacja powiązania z zamówieniem na elemencie nadrzędnym
      _parent:=_zlim.PARENT;
      {? _parent>0
      || _zlim.cntx_psh();
         _zlim.prefix();
         {? _zlim.seek(_parent)
         || {? _zlim.ZK_P_REF=0
            || _zlim.ZK_P_NAM:=8+$_zk_p;
               _zlim.ZK_P_REF:=#_zk_p;
               _zlim.ZK_P_QRF:=$_zk_p;
               _zlim.put()
            ?}
         ?};
         _zlim.cntx_pop()
      ?}
   ?};

   exec('UpdateZLIMALIL','zl_limit',_zlim,0);
   _zlim.cntx_pop();
   1
|? _zlim.ZM='Z'
|| {? _grupa=0 || FUN.info('Pozycji grupującej nie można akceptować.'@) ?};
   return()
?}


\zlim_akc_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordów
:: OPIS: ZLIM 'Grupa przed' dla akcji 'Akceptuj'
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();

_testmsg:=exec('test_fo4ZLIM','zl_limit');
{? -_testmsg='ok'
|| 1
|| KOMM.error('Poniższe parametry wymagane do wykonania akcji nie zostały ustalone.'@
             +'\n'+_testmsg
             +'\n'+'Akcja nie może być kontynuowana.'@
             ,1,1);
   return(0)
?};

{? exec('stat_l','zl_limit',ZL.ref())='T' & ZL.STAN='N'
|| FUN.info('Zakończono rejestrowanie limitów do wszystkich przewodników zlecenia.'@);
   return(0)
?};

_size:=cur_tab(1,1).sel_size();
{? {? _size=1
   || FUN.ask('Czy zaakceptować zaznaczoną pozycję?'@)
   |? _size<5
   || FUN.ask('Zaznaczono %1 pozycje limitów.\n\nCzy wszystkie zaakceptować?'@[$_size])
   || FUN.ask('Zaznaczono %1 pozycji limitów.\n\nCzy wszystkie zaakceptować?'@[$_size])
   ?}

|| KOMM.init(250,,'Akceptacja limitów zleceń'@,'');
   VAR.GRUPA:='T';
   VAR_DEL.delete('__matakt');
   __matakt:=tab_tmp(2
      ,'REF','STRING[16]',''
      ,'NRK','INTEGER',''
      ,'ILR','REAL',''
      ,'ZKP','STRING[16]',''
      ,'ZKN','STRING[16]','');
   1

|| return(0)
?}


\zlim_akc_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordów
:: OPIS: ZLIM 'Grupa po' dla akcji 'Akceptuj'
::----------------------------------------------------------------------------------------------------------------------
exec('akt_rezy','rezerwacje',,1);
VAR_DEL.delete('__matakt');
KOMM.select();
VAR.GRUPA:='N';
~~


\zlim_wyc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: usunięcie akceptacji __ZLIMa
::----------------------------------------------------------------------------------------------------------------------
_grupa:=VAR.GRUPA='T';

_zlim:=cur_tab(1,1);

{? _zlim.X_KIND='P'
 & 'MO'*_zlim.ZM
|| _zlim.cntx_psh();
   ZLIM.cntx_psh();
   exec('ZLIM_AKC_wyc','zl_limit',_grupa=0,ZLIM.ref());
   ZLIM.cntx_pop();
   ZLIM.get();

   _zlim.ALIL:=exec('GetAlLil4ZLIM','zl_limit',1,ZLIM.ref());
   _zlim.AKC:=ZLIM.AKC;
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
   _zlim.ZK_P_NAM:=8+$_zk_p;
   _zlim.ZK_P_REF:=#_zk_p;
   _zlim.ZK_P_QRF:=$_zk_p;
   _zlim.CRC:=ZLIM.crc();
   _zlim.put();

:: Jesli akceptacja korekty to trzeba zrobić obl_stan żeby się zaktualizowal stan magazynowy
   {? _zlim.KOR>0
   || MG.cntx_psh();
      M.cntx_psh();
      MG.index('MAG');
      {? _zlim.MAG_REF>0
      ||
::       Na limicie magazyn został wskazany - obliczam stan tylko na nim
         MG.clear();
         M.clear();
         {? M.seek(_zlim.M_REF,) & MG.seek(_zlim.MAG_REF,)
         || exec('obl_stan','magazyn_stan',M.ref(),1,MG.ref())
         ?}
      ||
::       Na limicie nie ma magazynu - obliczam stan dla materiału na wszystkich magazynach
         MG.clear();
         {? MG.first()
         || {!
            |?
               M.clear();
               {? M.seek(_zlim.M_REF,)
               || exec('obl_stan','magazyn_stan',M.ref(),1,MG.ref())
               ?};
               MG.next()
            !}
         ?}
      ?};
      MG.cntx_pop();
      M.cntx_pop()
   ?};

   exec('UpdateZLIMALIL','zl_limit',_zlim,0);
   _zlim.cntx_pop()

|? _zlim.ZM='Z'
|| {? _grupa=0 || FUN.info('Operacja niedostępna dla pozycji grupującej.'@) ?};
   return()
?}


\zlim_wyc_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordow
:: OPIS: ZLIM 'Grupa przed' dla akcji 'Wycofaj'
::   WY: 1 / 0
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();

{? exec('stat_l','zl_limit',ZL.ref())='T' & ZL.STAN='N'
|| FUN.info('Zakończono rejestrowanie limitów do wszystkich przewodników zlecenia.'@);
   return(0)
?};
_size:=cur_tab(1,1).sel_size();
{? {? _size=1
   || ~FUN.ask('Czy wycofać akceptację zaznaczonej pozycji?'@)
   |? _size<5
   || ~FUN.ask('Zaznaczono %1 pozycje limitów.\n\nCzy wycofać akceptację wszystkich?'[$_size])
   || ~FUN.ask('Zaznaczono %1 pozycji limitów.\n\nCzy wycofać akceptację wszystkich?'[$_size])
   ?}
|| return(0)
?};
KOMM.init(,,'Wycofanie akceptacji limitów zleceń'@,'');
VAR.GRUPA:='T';
1


\zlim_wyc_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordów
:: OPIS: ZLIM 'Grupa po' dla akcji 'Wycofaj'
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\zlim_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Sprawdza pozycje oznaczając do akceptacji.
::       Dla pojedynczego rekordu zmienia "+"->"N" lub "N"->"+" - inne ignoruje.
::       Dla grupy rekordów "N" i "+" -> "+"
::       Dla exec('get','#params',500015,2)='T' sprawdza, czy jest wystarczające zabezpieczenie materiałowe.
::       Pomija sprawdzanie dla odpadów.
::----------------------------------------------------------------------------------------------------------------------
_maski:=0;

:: W akcji grupowej
{? VAR.GRUPA='T'
|| {? ZLIM.AKC='N' | ZLIM.AKC='+'
   || {? exec('get','#params',500015,2)='T' & ZLIM.SO='S'
      || {? var_pres('__MASKI')<=0
         || __MASKI:=ZLIM.names();
            _maski:=1
         ?};
         _result:=exec('stan_ktr_one','zl_limit',ZLIM.KTM,ZLIM.LIL,1);
         __TAC.blank();
         __TAC.ZLIM:=#ZLIM.ref();
         __TAC.T:=#ZLIM.KTM;
         __TAC.ZAP:=_result[2];
         __TAC.DOST:=_result[3];
         __TAC.BRAK:=_result[4];
         __TAC.TMAT:=ZLIM.RTMAT;
         __TAC.PZ:=(exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"{? GRKTM='G' || TGDFLT().PT || PT ?}",0)=ZLIM.KTM);
         __TAC.ZGP:=#ZLIM.ZGP;
         __TAC.MG:=#ZLIM.MG;
         __TAC.WYD:=#ZLIM.WYD;
         __TAC.add();
         {? _result[4]>=0
         || ZLIM.AKC:='+';
            ZLIM.put()
         ?};
         obj_del(_result)
      ?}
   ?};
   {? var_pres('__ZLIM')>0
   || {? __ZLIM.find_tab(1,'REF',,'=',$ZLIM.ref())
      || __ZLIM.AKC:=ZLIM.AKC;
         __ZLIM.put();
         exec('UpdateZLIMALIL','zl_limit',__ZLIM,0)
      ?}
   ?}

:: VAR.GRUPA<>'T', czyli dla pojedynczego rekordu
|| {? ZLIM.AKC='N'
   || {? exec('get','#params',500015,2)='T' & ZLIM.SO='S'
      || {? var_pres('__MASKI')<=0
         || __MASKI:=ZLIM.names();
            _maski:=1
         ?};
         _res:=exec('stan_ktr_one','zl_limit',ZLIM.KTM,ZLIM.LIL,1);
         {? _maski
         || obj_del(__MASKI)
         ?};
         _tab:=tab_tmp(,
            'KTM','STRING[50]','Indeks'@,
            'NAZ','STRING[50]','Nazwa'@,
            'ZAP','REAL','Zapotrzebowanie'@,
            'DOST','REAL','Dostępne'@,
            'BRAK','REAL','Brakuje'@,
            'OK','STRING[1]','Ilość wystarczająca'@,
            'LIMP','REAL','W przygotowaniu'@,
            'LIMO','REAL','Otwarte'@
         );
         _dokl:=exec('jaka_dok_m','jm',ZLIM.KTM);
         _tab.KTM:=ZLIM.KTM().KTM;
         _tab.NAZ:=ZLIM.KTM().N;
         _tab.ZAP:=_res[2];
         _tab.DOST:=_res[3];
         _tab.BRAK:={? _res[4]<0 || -_res[4] || 0 ?};
         _tab.OK:={? _res[4]<0 || 'N' || 'T' ?};
         _tab.LIMP:=_res[5];
         _tab.LIMO:=_res[6];
         _red:=_tab.mk_edit('Dostępność materiału'@,,'dostmat');
         _tab.win_esep(_red,'Materiał'@);
         _tab.win_efld(_red,,'KTM');
         _tab.win_efld(_red,,'NAZ');
         _tab.win_esep(_red,'Stan'@);
         _tab.win_efld(_red,,'ZAP',,,,_dokl);
         _tab.win_efld(_red,,'DOST',,,,_dokl);
         _tab.win_efld(_red,,'BRAK',,,,_dokl);
         _tab.win_efld(_red,,'OK',,,,,,,,,'check-box',,"'T'","'N'");
         _tab.win_esep(_red,'Zatwierdzone limity zleceń'@);
         _tab.win_efld(_red,,'LIMP',,,,_dokl);
         _tab.win_efld(_red,,'LIMO',,,,_dokl);
         _tab.win_edit(_red);
         _tab.display();
         obj_del(_res);
         ZLIM.AKC:='+';
         ZLIM.put()
      |? ZLIM.SO<>'S'
      || FUN.info('Dla odpadu/koproduktu sprawdzanie nie jest dokonywane.'@)
      || FUN.info('Kontrola limitów wyłączona, sprawdzanie nie jest dokonywane.'@)
      ?}
   |? ZLIM.AKC='+'
   || ZLIM.AKC:='N';
      ZLIM.put()
   |? ZLIM.AKC='T'
   || FUN.info('Pozycja zaakceptowana, sprawdzanie nie jest dokonywane.'@)
   ?};
   {? var_pres('__ZLIM')>0
   || __ZLIM.AKC:=ZLIM.AKC;
      __ZLIM.put();
      exec('UpdateZLIMALIL','zl_limit',__ZLIM,0)
   ?}
?};
~~


\zlim_sel_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordów
:: OPIS: ZLIM 'Grupa przed' dla akcji 'Sprawdź'
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
exec('utwtab','zl_limit',0);
VAR.GRUPA:='T';
1


\zlim_sel_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.60] Akcje dla grup rekordow
:: OPIS: ZLIM 'Grupa po' dla akcji 'Sprawdz'
::----------------------------------------------------------------------------------------------------------------------
{? __TAC.first()
|| __TAC.select()
|| FUN.info('Sprawdzanie nie jest dokonywane dla pozycji zaakceptowanych oraz dla odpadów/koproduktów.'@)
?};
obj_del(__TAC);
VAR.GRUPA:='N';
win_disp();
~~


\utwtab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Tabela tymczasowa pomocna przy obsłudze zamienników surowców limitowanych.
::   WE: 0 - funkcja wywołana z poziomu zatwierdzeń limitów
::       1 - funkcja wywołana z poziomu zatwierdzeń kart limitowych
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__TAC');
__TAC:=tab_tmp(1,
   'ZLIM','INTEGER','#ZLIM.ref()',
   'T','INTEGER','#M.ref()',
   'ZAP','REAL','Zapotrzebowanie',
   'DOST','REAL','Dostępne',
   'BRAK','REAL','Brakuje',
   'TMAT','STRING[16]','$TMAT.ref()',
   'PZ','INTEGER','Podst./zam.',
   'ZAMDO','STRING[50]','Zamiennik do',
   'ZGP','INTEGER','#ZGP.ref()',
   'MG','INTEGER','#MG.ref()',
   'WYD','INTEGER','#SLO.ref()'
);
{? sec_superuser()=0 || __TAC.fld_attr(,2) ?};

__TNDX:=__TAC.ndx_tmp(,1,'PZ',,,'TMAT',,,'ZLIM',,);
__TNDX1:=__TAC.ndx_tmp(,1,'ZLIM',,);
__WER:=__TAC.mk_sel('Dostępność surowców w magazynach'@,,0,'utwtab_wer');
__TAC.win_fld(__WER,@.M,'KTM',,,20,,,'Kod surowca'@);
__TAC.win_fld(__WER,@.M,'N',,,40,,,'Nazwa surowca'@);
__TAC.win_fld(__WER,,'ZAP',,,12,4,,'Zapotrz.'@);
__TAC.win_fld(__WER,,'DOST',,,12,4,,'Dostępne'@);
__TAC.win_fld(__WER,@.VAR,'REAL',,,15,4,,'Brakuje'@);
__TAC.win_fml(__WER,@.VAR,'REAL',,'ICON_BEFORE',"
      {? __TAC.BRAK<0 || '' || 'xwin16.png:38' ?}
   ");
__TAC.win_act(__WER,0,'Rekord',,,,"
      VAR.A_T:=null();
      M.clear();
      {? ~M.seek(__TAC.T,'material') || M.KTM:='' ?};
      VAR.REAL:={? __TAC.BRAK<0 || -__TAC.BRAK || 0 ?};
      {? __TAC.BRAK>0 || exec('findtmp','#color') || '' ?}
   ");
{? _a=1
|| __TAC.win_act(__WER,0,'Formuła','Zatwierdź'@@,,'Zatwierdź zapotrzebowanie'@,"sel_exit()",,,,,,'Z');
   _btn:=__TAC.win_btn(__WER,'text='+'Zatwierdź'@,'menu:Z');
   __TAC.btn_sopt(__WER,_btn,'tooltip='+'Zatwierdź zapotrzebowanie'@)
?};
__TAC.win_act(__WER,0,'Formuła','S&tany'@@,,,"exec('stan_d','magazyn_stan',__TAC.T,__TAC.ZAP);~~",,1,,,,'T');
__RED:=__TAC.mk_edit('Dostępność surowców w magazynach'@,0,'utwtab_red');
__TAC.win_efld(__RED,@.M,'KTM',,,20,,,'Kod surowca'@);
__TAC.win_efld(__RED,@.M,'N',,,30,,,'Nazwa surowca'@);
__TAC.win_efld(__RED,,'ZAP',,,15,4,,'Zapotrzebowanie'@);
__TAC.win_efld(__RED,,'DOST',,,15,4,,'Dostępne'@);
__TAC.win_efld(__RED,@.VAR,'REAL',,,15,4,,'Brakuje'@);
__TAC.win_sel(__WER);
__TAC.win_edit(__RED);
~~


\pw_zamdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Wylicza wartość pola "zamiennik do" w oknie selekcji limitów
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.KOR2<>0
||
   ZLIM.cntx_psh();
   {? ZLIM.GROP<>null()
   || ZLIM.index('GROPNM');
      ZLIM.prefix(ZLIM.GROP,'T',ZLIM.KOR2)
   || ZLIM.index('ZGP_NM');
      ZLIM.prefix(ZLIM.ZGP,'T',ZLIM.KOR2)
   ?};
   {? ZLIM.first()
   || VAR.ZAMDO:=ZLIM.KTM().KTM;
      VAR.ZAMDON:=ZLIM.KTM().N
   || VAR.ZAMDO:='';
      VAR.ZAMDON:=''
   ?};
   ZLIM.cntx_pop()
||
   {? exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"{? GRKTM='G' || TGDFLT().PT || PT ?}",null())<>ZLIM.KTM
   || VAR.ZAMDO:=exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"{? GRKTM='G' || TGDFLT().PT().KTM || PT().KTM ?}",'');
      VAR.ZAMDON:=exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"{? GRKTM='G' || TGDFLT().PT().N || PT().N ?}",'')
   || VAR.ZAMDO:='';
      VAR.ZAMDON:=''
   ?}
?};
~~


\zlim_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JM [7.22]
:: OPIS: Korekta (nie)limitu
::       Wołane z okna tabeli _ZLIM
::   WE: _a - #_ZLIM.ref()
::----------------------------------------------------------------------------------------------------------------------
_zlimprf:={? _>0 & type_of(_a)=1 || _a || 0 ?};
_zlim:=cur_tab(1,1);
_nlim:=(ZLIM.LIMIT='N');

{? ZLIM.ZLEC<>null() & (ZLIM.ZLEC().STAN='Z' | ZLIM.ZLDOD().STAN='Z')
|| FUN.info('Zlecenie zamknięte.'@);
   return()
|? ZLIM.GROP<>null() & ZLIM.GROP().STATUS='Z'
|| FUN.info('Grupa operacji zamknięta.'@);
   return()
?};

{? exec('get','#params',500015,2)='T' & exec('get','#params',500660,2)='T' & ~_nlim
|| FUN.emsg(
      'Nie można używać funkcji uproszczonej edycji limitów (parametr %1),\n'
      'gdy wymagane jest sprawdzanie limitów przed akceptacją (parametr %2).'@['500660','500015']
   );
   return()
?};

ZLIM.cntx_psh(); _zlim.cntx_psh();
{? ZLIM.GROP<>null()
|| ZLIM.index('GROPKM');
   ZLIM.prefix(ZLIM.GROP,ZLIM.LIMIT,ZLIM.NR)
|| ZLIM.index('ZGP_KM');
   ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.NR)
?};
_kor_nact:=0;
{? ZLIM.first()
|| {!
   |? {? ZLIM.AKC<>'T' || _kor_nact:=1 ?};
      ZLIM.next()
   !}
?};
{? _kor_nact
|| FUN.emsg('Nie można korygować pozycji, do której jest niezaakceptowana korekta.'@);
   ZLIM.cntx_pop(); _zlim.cntx_pop();
   return()
?};
ZLIM.cntx_pop(); _zlim.cntx_pop();

{? (ZLIM.KOR=0 & ZLIM.AKC='T') | _nlim
|| {? exec('get','#params',500660,2)='T' | _nlim
   ||
::    Uproszczone korygowanie limitów - korekta tylko ilościowa
      {? exec('sum_il','zl_limit',ZLIM.ref())<>ZLIM.LIL
      || FUN.emsg(
            'Pozycji nie można korygować metodą uproszczoną, ponieważ były wprowadzone korekty metodą standardową.\n'
            'Należy zweryfikować ustawienie parametru %1'@['500660']
         )
      || ZLIM.get();
         _nr:=ZLIM.NR;
         VAR.LIL:=ZLIM.LIL;
         VAR.LILP:=ZLIM.LIL;
         VAR.ZLIM_AKC:=ZLIM.AKC;
         VAR.ZLIM_AUT:=ZLIM.AUTO;
         VAR.ZLIM_AKU:=ZLIM.AKCU;
         VAR.ZLIM_DT:=ZLIM.DT;
         VAR.ZLIM_TIM:=ZLIM.TIM;
         DK_C.cntx_psh();
         {? ZLIM.DK_C<>null() & ref_name(ZLIM.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZLIM.DK_C)) ?};

         _red:=ZLIM.mk_edit({? ZLIM.LIMIT<>'N' || 'Korekta limitu'@  || 'Korekta nielimitu'@ ?}
            ,,'#zlimkor',,,'normal');
         ZLIM.win_esep(_red,'Dane korekty'@);
         ZLIM.win_efld(_red,,'LIL',,,13,ZLIM.KTM().DOKL,,
            {? ZLIM.LIMIT<>'N' || 'Limit po korekcie:'@ || 'Norma po korekcie:'@ ?});
         ZLIM.efld_opt(_red,'mark=1',,'LIL');
::       Dla nielimitów dodatkowe pola z indeksem materiałowym i magazynem
         {? ZLIM.LIMIT='N'
         || ZLIM.win_efld(_red,,'KTM','KTM','R_KOMP',40,,,'Indeks'@);
            ZLIM.win_efld(_red,,'KTM','N','R_KOMP',40,,1,'Nazwa'@);
            ZLIM.win_efld(_red,,'MG','SYM','*',10,,,'Magazyn'@);
            ZLIM.efld_opt(_red,'mark=1',,'KTM','KTM');
            ZLIM.efld_opt(_red,'mark=1',,'MG','SYM')
         ?};
         exec('ok_esc','#window',ZLIM,_red);
         ZLIM.win_edit(_red);

         {? ZLIM.LIMIT='N'
         || _a_tow:=VAR.A_TOW;
            _a_t:=VAR.A_T;
            _a_tmat:=VAR.A_TMAT;
            VAR.A_TOW:=ZLIM.KTM;
            VAR.A_T:=ZLIM.KTM;
            VAR.A_TMAT:=ZLIM.TMAT;
            __ZLIM2ZAM:=1;
            _mask:={? ZLIM.TMAT<>null() || ref_name(ZLIM.TMAT)+3 || '' ?};
            exec('tktl_cntx_psh','tech_common');
            exec('tktl_use','tech_common',_mask);
            _par:=exec('FindAndGet','#table',TMAT,ZLIM.TMAT,,"TMAT.NRK().TYP().PAR",'N');
            TCHMAT.win_edit('RED_'+_par+exec('tch_edit_sufix','tech_mater'));

            _formula:="
               M.win_dict('NL_WER');
               ~~
            ";
            MZ.fld_fml('MZ','BEFORE_EDIT',_formula)
         ?};
::         undefine();
::         define('H1',~~,{? ZLIM.SO='O'
::                        || 'Zmiana ilościowa limitu odpadu'@
::                        |? ZLIM.LIMIT='T'
::                        || 'Zmiana ilościowa limitu surowca'@
::                        || 'Zmiana ilościowa nielimitu surowca'@
::                        ?});
::         define('H2',~~,{? ZLIM.LIMIT<>'N'
::                        || 'Limit aktualny: %1 %2'@[form(VAR.LIL,,ZLIM.KTM().DOKL,'99'),ZLIM.KTM().J().KOD]
::                        || 'Norma aktualna: %1 %2'@[form(VAR.LIL,,ZLIM.KTM().DOKL,'99'),ZLIM.KTM().J().KOD]
::                        ?});
::         define('LIL',VAR.LIL,{? ZLIM.LIMIT<>'N'
::                              || 'Limit po korekcie:'@
::                              || 'Norma po korekcie:'@
::                              ?},,,10,ZLIM.KTM().DOKL);
::         def_btn('text=%1'['Zapisz'@],'key:F2');
::         def_btn('text=%1'['Anuluj'@],'key:Esc');
         _valid:="
            _res:='';
            {? ZLIM.LIMIT='T'
            || {? ZLIM.SO='S'
               || _res:=__CHK.record(ZLIM,,'LIL')
               ?}
            || _res:=__CHK.record(ZLIM,,'LIL','KTM','MG')
            ?};
            {? _res=''
            || _res:=0;
               _res:=exec('itsPositive','#field',0,'T',ZLIM.LIL);
               {? _res>0 & VAR.LILP<>ZLIM.LIL
               ||
::                Sprawdzam czy sa jakies dokumenty do zlima
                  {? ZLIM.IL_RW-ZLIM.IL_ZW>ZLIM.LIL
                  || FUN.emsg('Ilość po korekcie nie może być mniejsza od ilości rozliczonej na dokumentach.\n'
                              'Minimalna ilość: %1'@[$(ZLIM.IL_RW+ZLIM.IL_ZW)]);
                     _res:=0
                  ?}
               ?}
            ?};
            {? ZLIM.LIMIT='N'
            || _res:=exec('nlim_valid','zl_nlimit',1);
               {? type_of(_res)=type_of('') & 'LIL,KTM,MG'*_res=0 || _res:=0 ?}
            ?};
            _res
         ";

         exec('efld_opt','zl_limit1');
         {? ZLIM.edit(_valid)
         ||
            VAR_DEL.delete('__matakt');
            __matakt:=tab_tmp(2
               ,'REF','STRING[16]',''
               ,'NRK','INTEGER',''
               ,'ILR','REAL',''
               ,'ZKP','STRING[16]',''
               ,'ZKN','STRING[16]','');
            KOMM.init(250,,'Korekta limitów'@);
::            ZLIM.LIL:=VAR.LIL;
            {? ZLIM.put()
            || VAR_DEL.delete('__zlim');
               __zlim:=cur_tab(1,1);
               __zlim.cntx_psh();
               ZLIMKOR.clear();
               ZLIMKOR.DATA:=date();
               ZLIMKOR.TIME:=time();
               ZLIMKOR.ZLIM:=$ZLIM.ref();
               ZLIMKOR.LIM_PO:=ZLIM.LIL;
               ZLIMKOR.LIM_PR:=VAR.LILP;
               ZLIMKOR.US:=OPERATOR.USER;
               ZLIMKOR.add();

               {? ~_nlim
               ||
                  __zlim.AKC:=ZLIM.AKC;
                  __zlim.LIL:={? ZLIM.SO='O' || -ZLIM.LIL || ZLIM.LIL ?};
                  _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
                  __zlim.ZK_P_NAM:=8+$_zk_p;
                  __zlim.ZK_P_REF:=#_zk_p;
                  __zlim.ZK_P_QRF:=$_zk_p;
                  __zlim.DT:=ZLIM.DT;
                  __zlim.AKCU:=ZLIM.AKCU().DANE;
                  __zlim.CRC:=ZLIM.crc();
                  __zlim.put();

::                Konieczne modyfikacje pozycji zamówienia
                  ZK_P.prefix();
                  {? ZK_P.seek(_zk_p)
                  || ZK_P.ILZ:=ZLIM.LIL;
                     _diff:=ZLIM.LIL-VAR.LILP;
                     ZK_P.ILP+=_diff; {? ZK_P.ILP<0 || ZK_P.ILP:=0 ?};

                     {? ZK_P.put(1)
                     ||
                        KOMM.info('Skorygowano wpisy w zamówieniu wewnętrznym'@,0,1);
                        {? ZK_P.REZ
                        || ZK_P.cntx_psh();
                           _mydo:=0;
                           {? do_state()=0
                           || _mydo:=1;
                              do()
                           ?};
                           exec('rez_pozy','rezerwacje',5);
                           {? _mydo>0
                           || end()
                           ?};
                           ZK_P.cntx_pop()
                        ?}
                     ?};
::                   Aktualizuje statusy na ZK_P
                     exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1);
::                   Aktualizuje statusy na ZK_N
                     exec('aktznzkn','zamsiw_nag',ZK_P.N,1)
                  ?};
                  exec('UpdateZLIMALIL','zl_limit',__zlim,0)
               ?};

               __zlim.cntx_pop()
            || KOMM.select()
            ?}
         ?};
         {? ZLIM.LIMIT='N'
         || exec('tktl_cntx_pop','tech_common');
            VAR.A_TOW:=_a_tow;
            VAR.A_T:=_a_t;
            VAR.A_TMAT:=_a_tmat;
            VAR_DEL.delete('__ZLIM2ZAM');
            MZ.fld_fml('MZ','BEFORE_EDIT',"*")
         ?};
         DK_C.cntx_pop()
      ?}
   ||
::    Standardowe korygowanie limitów
      ZLIM.get();
      _choice:=FUN.choice('Wybierz rodzaj korekty:'@,1,'Ilość'@,'Zamiennik'@);

::    Korekta ilościowa
      {? _choice=1
      || _nr:=ZLIM.NR;
         VAR.LIL:=ZLIM.LIL;
         VAR.LILP:=ZLIM.LIL;
         VAR.ZLIM_AKC:=ZLIM.AKC;
         VAR.ZLIM_AUT:=ZLIM.AUTO;
         VAR.ZLIM_AKU:=ZLIM.AKCU;
         VAR.ZLIM_DT:=ZLIM.DT;
         VAR.ZLIM_TIM:=ZLIM.TIM;
         VAR.LIL:=exec('sum_il','zl_limit',ZLIM.ref());
         DK_C.cntx_psh();
         {? ZLIM.DK_C<>null() & ref_name(ZLIM.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZLIM.DK_C)) ?};
         _ktm:=ZLIM.KTM;
         _kor:=ZLIM.NR;
         _pfaz:=ZLIM.PFAZ;
         _lim:=ZLIM.LIMIT;
         _so:=ZLIM.SO;
         _partia:=ZLIM.PARTIA;
         _tmat:=ZLIM.TMAT;
         _zldod:=ZLIM.ZLDOD;
         _zlec:=ZLIM.ZLEC;
         _wyd:=ZLIM.WYD;
         _mg:=ZLIM.MG;
         _startd:=ZLIM.STARTD;
         _startt:=ZLIM.STARTT;
         _zgp:=ZLIM.ZGP;
         _dk_c:=ZLIM.DK_C;
         _mode_dst:=ZLIM.MODE_DST;
         _grop:=ZLIM.GROP;

         _zref:=0;
         {? _zlimprf=0
         || {? _zlim.find_tab(1,'REF',,'=',$ZLIM.ref())
            || _zref:=_zlim.ref()
            ?}
         || _zref:=_zlimprf
         ?};
         ZLIM.blank();
         ZLIM.KTM:=_ktm;
         ZLIM.KOR:=_kor;
         ZLIM.PFAZ:=_pfaz;
         ZLIM.LIMIT:=_lim;
         ZLIM.SO:=_so;
         ZLIM.PARTIA:=_partia;
         ZLIM.TMAT:=_tmat;
         ZLIM.ZLDOD:=_zldod;
         ZLIM.ZLEC:=_zlec;
         ZLIM.GROP:=_grop;
         ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
         ZLIM.WYD:=_wyd;
         ZLIM.MG:=_mg;
         ZLIM.STARTD:=_startd;
         ZLIM.STARTT:=_startt;
         ZLIM.ZGP:=_zgp;
         ZLIM.DK_C:=_dk_c;
         ZLIM.MODE_DST:=_mode_dst;

::       Zakładam filtr na słownik materiałów
         {? exec('get','#params',500740,2)='N'
         || exec('filter_clear','material')
         || exec('filter','material','PS')
         ?};

         ZLIM.win_edit('RED_KRR');
         ATR.MJS:='ZLIM';
         ATR.M_ATR:=ZLIM.KTM().M_ATR;
         ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
         ATR.FLAG_ED:=((1+ZLIM.MG().TYP)='D' | ZLIM.MG=null()) & ATR.CZY_ATR & ATR.M_ATR().EDIT;
         ATR.FLAG:={? ATR.FLAG_ED & ZLIM.KTM().M_ATR<>null() || 2 || 0 ?};
         {? ATR.FLAG_ED || {? ZLIM.KTM().M_ATR<>null() || ATR.FLAG_ED:=2 ?} ?};
         {? ZLIM.DK_C<>null() & ZLIM.DK_C().M_ATR<>null()
         || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZLIM.DK_C().WAR'+form(_i,-2,,'99')))() !}
         |? ZLIM.KTM().M_ATR=null()
         || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
         ?};
         exec('efld_opt','zl_limit1');
         {? ZLIM.edit("exec('chk_kord_il','zl_limit')")
         || {? ZLIM.add()
            || exec('add__zlim','zl_limit',_zref,_zlim)
            ?}
         ?};
         DK_C.cntx_pop();

::       Przywracam tytuł i akcje w słowniku materiałów
         exec('filter_clear','material')

::    Zastosowanie zamiennika
      |? _choice=2
      || {? ZLIM.KOR2<>0
         || FUN.info('Pozycja jest już zamiennikiem.'@)
         ||
            _nr:=ZLIM.NR;
            _ktm:=null();
            _kor2:=ZLIM.NR;
            _pfaz:=ZLIM.PFAZ;
            _lim:=ZLIM.LIMIT;
            _so:=ZLIM.SO;
            _partia:=ZLIM.PARTIA;
            _tmat:=ZLIM.TMAT;
            _zldod:=ZLIM.ZLDOD;
            _zlec:=ZLIM.ZLEC;
            _wyd:=ZLIM.WYD;
            _mg:=ZLIM.MG;
            _startd:=ZLIM.STARTD;
            _startt:=ZLIM.STARTT;
            _zgp:=ZLIM.ZGP;
            _dk_c:=ZLIM.DK_C;
            _mode_dst:=ZLIM.MODE_DST;
            _grop:=ZLIM.GROP;

            _lil_org:=exec('sum_il','zl_limit',ZLIM.ref());
            VAR.LILP:=_lil_org;
            _a_tow:=VAR.A_TOW;
            _a_t:=VAR.A_T;
            _a_tmat:=VAR.A_TMAT;
            VAR.A_TOW:=ZLIM.KTM;
            VAR.A_T:=ZLIM.KTM;
            VAR.A_TMAT:=ZLIM.TMAT;
            __ZLIM2ZAM:=1;
            _mask:={? ZLIM.TMAT<>null() || ref_name(ZLIM.TMAT)+3 || '' ?};
            exec('tktl_cntx_psh','tech_common');
            exec('tktl_use','tech_common',_mask);
            _par:=exec('FindAndGet','#table',TMAT,ZLIM.TMAT,,"TMAT.NRK().TYP().PAR",'N');
            TCHMAT.win_edit('RED_'+_par+exec('tch_edit_sufix','tech_mater'));

            _formula:="
               M.win_dict('NL_WER');
               ~~
            ";
            MZ.fld_fml('MZ','BEFORE_EDIT',_formula);

            _zref:=0;
            {? _zlimprf=0
            || {? _zlim.find_tab(1,'REF',,'=',$ZLIM.ref())
               || _zref:=_zlim.ref()
               ?}
            || _zref:=_zlimprf
            ?};

            DK_C.cntx_psh();
            {? ZLIM.DK_C<>null() & ref_name(ZLIM.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZLIM.DK_C)) ?};
            ZLIM.blank();
            ZLIM.KTM:=_ktm;
            ZLIM.KOR:=0;
            ZLIM.KOR2:=_kor2;
            ZLIM.PFAZ:=_pfaz;
            ZLIM.LIMIT:=_lim;
            ZLIM.SO:=_so;
            ZLIM.PARTIA:=_partia;
            ZLIM.TMAT:=_tmat;
            ZLIM.ZLDOD:=_zldod;
            ZLIM.ZLEC:=_zlec;
            ZLIM.GROP:=_grop;
            ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
            ZLIM.WYD:=_wyd;
            ZLIM.MG:=_mg;
            ZLIM.STARTD:=_startd;
            ZLIM.STARTT:=_startt;
            ZLIM.ZGP:=_zgp;
            ZLIM.DK_C:=_dk_c;
            ZLIM.MODE_DST:=_mode_dst;

::          Zakładam filtr na słownik materiałów
            {? exec('get','#params',500740,2)='N'
            || exec('filter_clear','material')
            || exec('filter','material','PS')
            ?};

            ZLIM.win_edit('RED_KOR');
            ATR.MJS:='ZLIM';
            ATR.M_ATR:=ZLIM.KTM().M_ATR;
            ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
            ATR.FLAG_ED:=((1+ZLIM.MG().TYP)='D' | ZLIM.MG=null()) & ATR.CZY_ATR & ATR.M_ATR().EDIT;
            ATR.FLAG:={? ATR.FLAG_ED & ZLIM.KTM().M_ATR<>null() || 2 || 0 ?};
            {? ATR.FLAG_ED || {? ZLIM.KTM().M_ATR<>null() || ATR.FLAG_ED:=2 ?} ?};
            {? ZLIM.DK_C<>null() & ZLIM.DK_C().M_ATR<>null()
            || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZLIM.DK_C().WAR'+form(_i,-2,,'99')))() !}
            |? ZLIM.KTM().M_ATR=null()
            || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():='' !}
            ?};

            exec('efld_opt','zl_limit1');
            {? ZLIM.edit("exec('valid','zl_limit')")
            || _lil:=ZLIM.LIL; ZLIM.LIL:=0;
               _why:=ZLIM.WHY; ZLIM.WHY:=null();
               ZLIM.AKC:='T';
               {? ZLIM.add()
               || exec('add__zlim','zl_limit',,_zlim);
                  _nr:=ZLIM.NR;
                  ZLIM.KOR:=_nr;
                  ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
                  ZLIM.LIL:=_lil;
                  ZLIM.WHY:=_why;
                  ZLIM.AKC:='N';
                  {? ZLIM.add()
                  || exec('add__zlim','zl_limit',,_zlim)
                  ?}
               ?};
               {? VAR.LILP>-1 & _lil_org<>VAR.LILP
               ||
::                Korekta oryginalnego limitu
                  ZLIM.cntx_psh();
                  ZLIM.index('ZGP_NM');
                  ZLIM.prefix(ZLIM.ZGP,'T',_kor2);
                  {? ZLIM.first()
                  || ZLIM.prefix();
                     _ktm:=ZLIM.KTM;
                     _nr:=ZLIM.NR;
                     VAR.JM:=ZLIM.KTM().J;
                     ZLIM.blank();
                     ZLIM.KTM:=_ktm;
                     ZLIM.KOR:=_nr;
                     ZLIM.PFAZ:=_pfaz;
                     ZLIM.LIMIT:=_lim;
                     ZLIM.SO:=_so;
                     ZLIM.PARTIA:=_partia;
                     ZLIM.TMAT:=_tmat;
                     ZLIM.ZLDOD:=_zldod;
                     ZLIM.ZLEC:=_zlec;
                     ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
                     ZLIM.WYD:=_wyd;
                     ZLIM.MG:=_mg;
                     ZLIM.STARTD:=_startd;
                     ZLIM.STARTT:=_startt;
                     ZLIM.ZGP:=_zgp;
                     ZLIM.DK_C:=_dk_c;
                     ZLIM.MODE_DST:=_mode_dst;
                     ZLIM.GROP:=_grop;
                     ZLIM.LIL:=VAR.LILP-_lil_org;
                     ZLIM.WHY:=_why;
                     ZLIM.AKC:='N';
                     {? ZLIM.add()
                     || exec('add__zlim','zl_limit',,_zlim)
                     ?}
                  ?};
                  ZLIM.cntx_pop()
               ?}
            ?};
            DK_C.cntx_pop();
            exec('tktl_cntx_pop','tech_common');
            VAR.A_TOW:=_a_tow;
            VAR.A_T:=_a_t;
            VAR.A_TMAT:=_a_tmat;
            VAR_DEL.delete('__ZLIM2ZAM');
            MZ.fld_fml('MZ','BEFORE_EDIT',"*");
::          Przywracam tytul i akcje w slowniku materialow
            exec('filter_clear','material')
         ?}
      ?}
   ?}

|| {? ZLIM.KOR<>0
   || FUN.info('Nie można wykonać korekty do korekty.'@)
   || FUN.info(
         {? ZLIM.AUTO='T'
         || 'Limit jest jeszcze niezatwierdzony, więc można go poprawiać.\n'
            'Korekta stosowana jest do limitów zatwierdzonych.'@
         || 'Limit jest jeszcze niezatwierdzony.\n'
            'Korekta stosowana jest do limitów zatwierdzonych.'@
         ?}
      )
   ?}
?};
~~


\chk_kord_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Walidacja korekty limitu, między innymi sprawdzenie czy ilość korygowana nie spowoduje ujemnego
::       limitu po korektach (przy dołączaniu)
::   WY: 1 / 0 / akronim pola
::  OLD: \chk_kord_il/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.LIL=0
|| FUN.emsg('Należy podać ilość korekty.'@);
   'LIL'

|? ZLIM.WHY=null()
|| FUN.emsg('Należy podać przyczynę korekty.'@);
   'WHY'

|? 1+ZLIM.WHY().KOD='~'
|| FUN.emsg('Należy podać inną przyczynę korekty.'@);
   'WHY'

|| _il:=VAR.LIL+ZLIM.LIL;
   {? _il<0
   || FUN.emsg('Ilość na limicie po korektach nie może być mniejsza od zera.'@);
      'LIL'
   || {? ((1+ZLIM.MG().TYP)='D' | ZLIM.MG=null())& ATR.FLAG_ED & ATR.FLAG<>1
      || exec('akcepatr','mat_atr',0,1)
      ?};
      1
   ?}
?}


\bd_zlimt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Przed rekord dla pozycji ZLIM (w oknie drzewa _ZLIM)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tab:=cur_tab(1,1);
::{? var_pres('__ZLIMp')>0 || _tab:=__ZLIMp.ZLIM
::|? var_pres('__ZLIM')>0  || _tab:=__ZLIM
::                         || return()
::?};

:: co się da robimy bez szukania ZLIMa
M.clear();
{? _tab.M_REF>0 & M.seek(_tab.M_REF,)
||
::   exec('obl_stan','magazyn_stan',M.ref(),6);
   exec('zwr_stan','magazyn_stan',M.ref(),6,null(),0);
   _tab.S:=BEER.S;
   _tab.SD:=BEER.SD;
   _tab.SRT:=BEER.SRT;
   _tab.SRR:=BEER.SRR;
   _tab.SSZ:=BEER.SSZ;
   _tab.WDR:=BEER.WDR;
   _tab.put();
   ~~
?};

{? _tab.PARENT=0
|| exec('GetChildVals','zl_limit',_tab,,,0)
?};

:: gdy zmieniła sie zawartość ZLIMa, trzeba odświeżyć
exec('zlim_refresh','zl_limit',_tab);

:: odebranie akcji
::exec('__ZLIM_actions','zl_limit');

VAR.ZLIM_KOR:=_tab.ALIL;
VAR.ZLIM_POB:=_tab.ZLIM_POB;
VAR.SR:=_tab.SR;
VAR.SRC:=_tab.SRC;

{? _tab.X_KIND='G'
|| ZLIM.blank(1);
   return(_tab.X_COLOR)
?};

ZLIM.clear();
:: aktualizuje pola stanów
{? ~ZLIM.seek(_tab.REF_NR,)
|| ZLIM.blank(1)
?};

_tab.X_COLOR


\zlim_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Odświeża dane w rekordzie tabeli roboczej na podstawie źródłowego ZLIM
::   WE: _a - _ZLIM
::       Nie jest sprawdzana obecność ani typ przekazanego argumentu
::  OLD: \zlim_refresh/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

{? _tab.X_KIND='P'
|| ZLIM.clear();
   {? ZLIM.seek(_tab.REF) & ZLIM.crc()<>_tab.CRC
   || _tab.AKC:=ZLIM.AKC;
      _tab.CRC:=ZLIM.crc();
      _tab.put();
      exec('UpdateZLIMALIL','zl_limit',_tab,0)
   ?}
?};
~~


\stan_ktr_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Kontrola stanu pojedynczego artykułu
::   WE: _a - M.ref()
::       _b - zapotrzebowanie surowca
::       _c - czy wywołane z poziomu limitów
::   WY: _wyn[1] - M.ref()
::       _wyn[2] - zapotrzebowanie
::       _wyn[3] - dostępne
::       _wyn[4] - brakuje
::       _wyn[5] - limity zleceń w przygotowaniu - nie używane
::       _wyn[6] - limity zleceń otwartych - nie używane
::       _wyn[7] - pobrania do limitów - nie używane
::       _wyn[8]
::       _wyn[9] - półfabrykaty
::  OLD: \stan_ktr_one/zl_zmat.fml
::----------------------------------------------------------------------------------------------------------------------
_zap:=_b;
_wyn:=obj_new(9);
_reflim:=0;
_reftmat:=0;
:: zlecenie półfabrykatowe dodatkowo będzie korygować dostepność
_polf:=0;
M.cntx_psh();
{? _>2 & {? _c=1 || ZLIM.KTM().R='P' || {? TMAT.GRKTM='G' || TMAT.TGDFLT().PT().R || TMAT.PT().R ?}='P' ?}
|| {? _c=1
   || _reflim:=ZLIM.ref()
   || _reftmat:=TMAT.ref()
   ?};
   ZL.cntx_psh();
   ZL.index('ZLTREE');
   ZL.prefix(ZL.TYP,ZL.NODE,#ZL.ref());
   {? ZL.first()
   || {!
      |? {? _a=ZL.KTM
         || _polf+=ZL.IL
         ?};
         ZL.next()
      !}
   ?};
   ZL.cntx_pop()
|? _>2
|| {? _c=1
   || _reflim:=ZLIM.ref()
   || _reftmat:=TMAT.ref()
   ?}
?};
M.cntx_pop();
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
ZLIM.cntx_psh();
:: po pierwsze suma aktualnych stanów na magazynach
exec('obl_stan','magazyn_stan',_a,6);
_stan:=BEER.SD;

_lim_m:=_lim_n:=_lim_o:=0;
_pobr:=0;

:: Limity nie są już brane pod uwagę

_dostepne:=_stan-_lim_n-_lim_o+_pobr+_polf;
:: dostępne nie może być ujemne
{? _dostepne<0 || _dostepne:=0 ?};
_brakuje:=_dostepne-_zap;
_wyn[1]:=_a; ' M.ref() ';
_wyn[2]:=_zap; ' zapotrzebowanie ';
_wyn[3]:=_dostepne; ' dostępne ';
_wyn[4]:=_brakuje; ' brakuje ';
_wyn[5]:=_lim_n; ' limity zlecen w przygotowaniu ';
_wyn[6]:=_lim_o; ' limity zlecen otwartych ';
_wyn[7]:=_pobr; ' pobrania limitow ';
{? _zap<>0 || _wyn[8]:=VAR.A_ZLEC().IL*_wyn[3]/_zap || _wyn[8]:=0 ?};
_wyn[9]:=_polf; ' polfabrykaty biezacego zlecenia ';

ZL.cntx_pop();
ZLIM.cntx_pop();
_wyn


\lim_rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Wyliczenie informacji o zapotrzebowaniu towaru na limitach
::  OLD: \lim_rez/zl_zmat.fml
::----------------------------------------------------------------------------------------------------------------------
ZLIM.cntx_psh();
:: niewykorzystane limity
_lim_m:=_lim_n:=_lim_o:=0;
_pobr:=0;
::----------------------------------------------------------------------------------------------------------------------
:: petla po maskach tabeli ZLIM
::----------------------------------------------------------------------------------------------------------------------
_maski:=ZLIM.names();
{? _maski.first()
|| {!
   |? _mask:=_maski.NAME+4;
      ZLIM.use('zlim'+_mask);
      ZLIM.index('STAN');
      ZLIM.prefix(_a,'T','N','T');
      {? ZLIM.first()
      || {!
         |?
            {? ZLIM.ZLEC=VAR.A_ZLEC
            || 'moj'; _lim_m+=ZLIM.LIL
            || 'inne '; _lim_n+=ZLIM.LIL
            ?};
            ZLIM.next()
         !}
      ?};
::    ...i otwartych
      {? exec('get','#params',500008,2)='N'
      || ZLIM.prefix(_a,'T','O');
         {? ZLIM.first()
         || {!
            |?
::             limit
               _lim_o+=ZLIM.LIL;
               _pobr+=(ZLIM.IL_RW-ZLIM.IL_ZW);
               ZLIM.next()
            !}
          ?}
       ?};
       _maski.next()
     !}
 ?};
ZLIM.cntx_pop();
VAR.REAL2:=_lim_n+_lim_o-_pobr;
~~


\infoatry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: Wyświetla informacje o atrybutach
::  OLD: \infoatry/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
M.cntx_psh();
ZLIM.KTM();
VAR_DEL.delete('__smmag');
__smmag:=tab_tmp(1,'RSQL','STRING[16]','');

SM.cntx_psh();
SM.index('SMM');
SM.prefix(ZLIM.KTM);
{? SM.first()
|| {!
   |? _add:=1;
      __smmag.cntx_psh();
      __smmag.prefix($SM.MAG);
      {? __smmag.first()
      || _add:=0
      ?};
      __smmag.cntx_pop();

      {? _add>0
      ||
         __smmag.blank();
         __smmag.RSQL:=$SM.MAG;
         __smmag.add(1)
      ?};
      SM.next()
   !}
?};
SM.cntx_pop();
exec('btnatrsm','magazyn_stan',1);
VAR_DEL.delete('__smmag');
M.cntx_pop()


\zamienniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2011]
:: OPIS: Zamienniki do limitu wynikające z technologii
::       Działa w kontekście rekordu tabeli ZLIM
::  OLD: \zamienniki/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.RTMAT<>''
|| VAR_DEL.delete('__TMAT');
   __TMAT:=tab_tmp(1,'REF','STRING[16]','$TMAT.ref()');
   __TMAT.REF:=ZLIM.RTMAT;
   __TMAT.add();
   exec('pokaz_zam_mech','tech_mater',6,,,1);
   VAR_DEL.delete('__TMAT')

|| FUN.emsg('Brak powiązania z technologią.'@);
   return()
?};
~~


\zlim_analiza_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed' dla tabeli ZLIM (limity)
::  OLD: \zlim_analiza_b/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pdbuf','plan_dostaw')
||
   _zlim:=cur_tab(1,1);

   {? _zlim.sel_size()=0
   ||
      exec('env_create','plan_dostaw');
      {? _zlim.ZM='O'
      ||
         FUN.info('Analizować można tylko pozycje zbiorcze.'@)
      ?}
   ?};

   {? _zlim.ZM='M' & _zlim.X_KIND='P'
   ||
      M.cntx_psh(); ZL.cntx_psh(); GROP.cntx_psh();
      M.clear(); ZL.clear(); GROP.clear();

      {? M.seek(_zlim.M_REF,) & (ZL.seek(_zlim.ZL_REF,) | GROP.seek(_zlim.GROP_REF,))
      ||
         _args:=exec('pda_a','plan_dostaw');
         _args.M:=M.ref();
         _args.TM_STAMP:=SYSLOG.tm_stamp();
         {? _zlim.GROP_REF>0
         || {? exec('create','#tm_stamp',GROP.PL_DATA,GROP.PL_TIME)>=SYSLOG.tm_stamp()
            || _args.DK:=GROP.PL_DATA;
               _args.TK:=GROP.PL_TIME
            ?}
         || {? exec('create','#tm_stamp',ZL.PL_DATA,ZL.PL_TIME)>=SYSLOG.tm_stamp()
            || _args.DK:=ZL.PL_DATA;
               _args.TK:=ZL.PL_TIME
            ?}
         ?};
         _il:=exec('sum_il','zl_limit',_zlim.REF,0);
         _args.IL:={? _zlim.SO='S' || _il || -_il ?}-exec('FindAndGet','#table',ZLIM,_zlim.REF,,"IL_RW-IL_ZW",0);
         {? _args.IL<>0
         ||
            _args.DW:=_zlim.STARTD;
            _args.TW:=_zlim.STARTT;
            _args.DISP:=0;
            {? _zlim.ZK_P_QRF<>''
            || _args.skip_add(_zlim.ZK_P_QRF);
               REZ.index('ZK_P');
               REZ.prefix(BIT.sqlint(_zlim.ZK_P_QRF));
               {? REZ.first()
               || {!
                  |? _args.skip_add($REZ.ref());
                     REZ.next()
                  !}
               ?}
            ?};
            _args.skip_add(_zlim.REF);
            _res:=exec('pda','plan_dostaw',_args);

:: exec('select','#table',_args.SKIP);

            _argse:=exec('an_add_a','plan_dostaw');
            _argse.M:=_args.M;
            _argse.IL:=_args.IL;
            _argse.DW:=_args.DW;
            _argse.TW:=_args.TW;
            _argse.DOSTEPNY:=_res.DOSTEPNY;
            _argse.IL_DOST:=_res.IL_DOST;
            _argse.DM:=_res.NA_KIEDY;
::            {? _zlim.ZK_P_QRF<>''
::            || _argse.skip_add(_zlim.ZK_P_QRF);
::               REZ.index('ZK_P');
::               REZ.prefix(BIT.sqlint(_zlim.ZK_P_QRF));
::               {? REZ.first()
::               || {!
::                  |? _argse.skip_add($REZ.ref());
::                     REZ.next()
::                  !}
::               ?}
::            ?};
::            _argse.skip_add(_zlim.REF);
            exec('an_add','plan_dostaw',_argse)
         ?}
      ?};

      M.cntx_pop(); ZL.cntx_pop(); GROP.cntx_pop()
   ?};

   {? _zlim.sel_size()=0
   ||
      {? _zlim.ZM<>'O'
      ||
         exec('an_select','plan_dostaw')
      ?};
      exec('env_delete','plan_dostaw')
   ?}

?};
~~


\zlim_analiza_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po' dla tabeli ZLIM (limity)
::  OLD: \zlim_analiza_a/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\zlim_analiza_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed grupą' dla tabeli ZLIM (limity)
::  OLD: \zlim_analiza_bg/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pdbuf','plan_dostaw')
|| exec('env_create','plan_dostaw')
|| 0
?}


\zlim_analiza_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po grupie' dla tabeli ZLIM (limity)
::  OLD: \zlim_analiza_ag/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('an_select','plan_dostaw');
exec('env_delete','plan_dostaw')


\bd_zlimw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2011]
:: OPIS: Rekord przed dla surowca nielimitowanego.
::  OLD: \bd_zlimw/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.AUTO='T'
|| 'ZLIM#03#01'
|| ''
?}


\nlim_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wyświetla szczegółowe informacje dotyczące surowca nielimitowanego
::  OLD: \nlim_info/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
exec('info_zam','magazyn_stan',5,ZLIM.KTM);
~~


\edit_datetime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Redagowanie daty i czasu - terminu zapotrzebowania dla limitu
::   WE: _a - $ZLIM.ref()
::  OLD: \edit_datetime/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_rule:="
   _red:=ZLIM.mk_edit('|--|'+'Zapotrzebowanie do zlecenia'@,,'terminzapotrzeb');
   ZLIM.win_efld(_red,AH,'H');
   ZLIM.win_efld(_red,,'STARTD');
   ZLIM.win_efld(_red,,'STARTT');
   ZLIM.win_efld(_red,AH,'H',,,,,,%255);
   ZLIM.win_ebtn(_red,'icon='+exec('ok','#icon')+',text='+'OK'@,'key:F2');
   ZLIM.win_ebtn(_red,'icon='+exec('anuluj','#icon')+',text='+'Anuluj'@,'key:Esc');
   ZLIM.win_edit(_red);
   {? ZLIM.edit(\"exec('chk_datetime','zl_limit')\")
   || ZLIM.put()
   ?}
";
exec('FindAndGet','#table',ZLIM,cur_tab(1,1).REF,,_rule,~~);
~~


\zlim_trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Trigger przed add dla tabeli ZLIM
::  OLD: \ZLIM/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.BORNSTAT=''
|| ZL.cntx_psh(); ZLIM.BORNSTAT:=ZLIM.ZLEC().STAN; ZL.cntx_pop()
?};
{? ZLIM.TMAT<>null() || ZLIM.RTMAT:=$ZLIM.TMAT ?};
ZLIM.TM_START:=exec('create','#tm_stamp',ZLIM.STARTD,ZLIM.STARTT);
{? ZLIM.UID=''
|| ZLIM.UID:=exec('uid','#blank')
?};
1


\zlim_trig_put_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Trigger przed put dla tabeli ZLIM
::  OLD: \ZLIM/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLIM.TMAT<>null() || ZLIM.RTMAT:=$ZLIM.TMAT ?};
ZLIM.TM_START:=exec('create','#tm_stamp',ZLIM.STARTD,ZLIM.STARTT);
1


\zlim_dalej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zakończenie redagowania limitów (w oknie definicji limitów/surowców nielimitowanych - luzem albo w zakładkach)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_ZLIMp:=_env.env_limit.ZLIMp;

_result:=0;

{? exec('get','#params',500015,2)='T' & exec('all_checked','zl_limit',_ZLIMp)=0
|| FUN.info('Przed zakończeniem rejestracji wszystkie pozycje muszą być sprawdzone.'@)
||
   ZL.cntx_psh();
   ZL.prefix();

   {? ZL.seek(_ZLIMp.ZL) & exec('zl_lock','zl_common',ZL.ref(),'L')
   || _result:=0;

::    Konkretny przewodnik
      {? _ZLIMp.ZGH<>null()
      || _args:=exec('mp_run_a','#b__box');
         _args.ACT_UID:='TTE_PZL_DLIM';
         _args.UIDREF:=exec('FindAndGet','#table',ZGH,_ZLIMp.ZGH,,"uidref()",'');
         _args.AKCJA:='ZAKOŃCZ_ZGH';
         _args.CONTEXT:=obj_new('ZGP','RESULT'); _args.CONTEXT.ZGP:=null(); _args.CONTEXT.RESULT:=0;
         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_ZLIMp.ZL);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',_ZLIMp.ZGH);

         exec('mp_run','#b__box',_args);
         _result+=_args.CONTEXT.RESULT

::    Zlecenie proste
      |? ZL.RODZAJ='P'
      || {? ZL.KTM<>null() &
            (exec('FindAndGet','#table',TKTL,ZL.RTKTL,,"TYP().OPER='N'",0) |
             exec('FindAndGet','#table',TKTL,ZL.RKTL,,"TYP().OPER='N'",0))
         || _ask:='Czy zakończyć rejestrację zapotrzebowań do całego zlecenia %1?'@[ZL.SYM]
         || _ask:='Czy zakończyć rejestrację zapotrzebowań do wszystkich przewodników zlecenia %1?'@[ZL.SYM]
         ?};
         {? FUN.ask(_ask)
         || KOMM.init(,,'Zakończenie rejestracji zapotrzebowań do zlecenia %1'@[ZL.SYM]);
            _args:=exec('mp_run_a','#b__box');
            _args.ACT_UID:='TTE_PZL_DLIM';
            _args.UIDREF:=ZL.uidref();
            _args.AKCJA:='ZAKOŃCZ_ZGH';
            _args.GRUPA:='T';
            _args.CONTEXT:=obj_new('RESULT'); _args.CONTEXT.RESULT:=0;
            _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());
            ZGH.index('ZLNR');
            ZGH.prefix(ZL.ref());
            {? ZGH.first()
            || {!
               |? exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGH.ref());

                  exec('mp_run','#b__box',_args);
                  _result+=_args.CONTEXT.RESULT;

                  ZGH.next()
               !};
               KOMM.select()
            ?}
         || _result:=0
         ?}

::    Zlecenie złożone
      || {? FUN.ask('Czy zakończyć rejestrację zapotrzebowań do wszystkich zleceń podrzędnych do %1?'@[ZL.SYM])
         || KOMM.init(,,'Zakończenie rejestracji zapotrzebowań do zlecenia %1'@[ZL.SYM]);
            ZL.cntx_psh();
            ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || _args:=exec('mp_run_a','#b__box');
               _args.ACT_UID:='TTE_PZL_DLIM';
               _args.UIDREF:=ZL.uidref();
               _args.AKCJA:='ZAKOŃCZ_ZGH';
               _args.GRUPA:='T';
               _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
               _args.CONTEXT:=obj_new('RESULT'); _args.CONTEXT.RESULT:=0;
               {!
               |? exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

                  ZGH.index('ZLNR');
                  ZGH.prefix(ZL.ref());
                  {? ZGH.first()
                  || {!
                     |? exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGH.ref());

                        exec('mp_run','#b__box',_args);
                        _result+=_args.CONTEXT.RESULT;

                        ZGH.next()
                     !}
                  ?};
                  ZL.next()
               !}
            ?};
            ZL.cntx_pop();
            KOMM.select()
         ?}

      ?};

      {? _result>0
      || exec('__ZLIM_datapump','zl_limit',_ZLIMp);
         _ZLIMp.ZLIM.first()
      ?};
      win_disp();

      exec('zl_unlock','zl_common',ZL.ref(),'L')
   ?};

   ZL.cntx_pop();

:: W zakładkach bez wyskakiwania
   {? var_pres('get_tab',_env)=type_of("") & _env.get_tab().ID='LIMITY'
   || ~~
:: W okienku definicji sel_exit w przypadku zakończenia
   || {? _result || sel_exit() ?}
   ?}
?}


\kontr_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [7.62]
:: OPIS: kontrola limitów (powyżej i poniżej) dla zlecenia lub grupy operacji
::       Sumujemy limity dla każdego surowca, nie rozbijamy
::        według faz, bo chodzi tu o ujęcie globalne.
::       Nie analizujemy zleceń podrzędnych,
::        gdy limity generowane do nadrzędnego
::   WE: ustawione VAR.A_ZLEC = ZL.ref() / VAR.A_GROP = GROP.ref()
::       _a - T: analizować, N: nic nie robić
::       [_b] - [0]: kontrola zamknięcia, 1: wyświetlac wszystko (analiza drill-down zlecenia)
::       [_c] - parametr wywołania 'A','R',['S']
::       [_d] - tabela z niezgodnościami w limitach, jeżeli podana to aktualizowane dane
::       [_e] - co dołączać do __ZLIM4LIM: [1] - wszystkie rekordy, 0 - wyłącznie rekordy do ZLIMów niezbilansowanych
::       [_f] - tabela z listą surowców, które brać pod uwagę
::       [_g] - INTEGER - tabela, dla której uruchamiana: [0] - zlecenia (ZL), 1 - grupy operacji (GROP)
::   WY: 0: ok, _tab: są limity z przekroczeniami (zawsze dla _b=1)
::  OLD: \kontr_lim/zlec2.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0) || _all:=_b || _all:=0 ?};
{? var_pres('_c')=type_of('') || _param:=_c || _param:='S' ?};
{? var_pres('_d')>100 || _aktu:=1; _tab_rob:=_d || _aktu:=0; _tab_rob:=~~ ?};
{? var_pres('_e')=type_of(0) || _all_zlim:=_e || _all_zlim:=1 ?};
{? var_pres('_f')>100 & _f.size()>0 || _chk_zlim:=1; _zlim_tab:=_f || _chk_zlim:=0; _zlim_tab:=~~ ?};
{? var_pres('_g')=type_of(0) || _where:=_g || _where:=0 ?};
_go:={? _where=0 || ~(VAR.A_ZLEC().RODZAJ='P' & ZL.NRNZL<>0 & ZL.GENLIM='N') || 1 ?};

{? _a='T' & _go
|| _usluga:=0;
   {? _where=0
   || _zl:=VAR.A_ZLEC;
      _grop:=null();
      _wp:=ZL.TYP().WP;
::   _usluga:={? ZL.KTM().RODZ='U' || 1 || 0 ?};

      _rodzaj:=ZL.RODZAJ;
      {? _wp='P' & _rodzaj<>'N'
      || _xjm:=ZL.KTLZ().XJM;
         _il:=ZL.IL
      || _xjm:=_il:=1
      ?};
::   _ilwyk:=ZL.ILWYK;
      _ilwyk:=ZL.ILDOK

   || _zl:=null();
      _grop:=VAR.A_GROP;
      _wp:='P';
      _xjm:=_il:=GROP.IL;
      _ilwyk:=GROP.ILW
   ?};

   _tab:=tab_tmp(2,
      'T','INTEGER','Surowiec',
      'WYD','INTEGER','Wydział',
      'ILL0','REAL','Ilość limitowana',
      'ILL','REAL','Ilość limitowana',
      'ILP','REAL','Ilość pobrana',
      'ILRW','REAL','Ilość pobrana (łącznie)',
      'ILZW','REAL','Ilość zwrócona (łącznie)',
      'WARP','REAL','Wartość pobrań',
      'MX','STRING[1]','M?',
      'DX','STRING[1]','D?',
      'SX','STRING[1]','Status',
      'OX','STRING[30]','Status opisowo',
      'KOD','STRING[50]','Kod surowca',
      'NAZ','STRING[100]','Nazwa surowca');
   _tab.fld_attr('T',2);
   _tab.fld_attr('WYD',2);

   {? type_of(_tab)>100
   || _ndx1:=_tab.ndx_tmp(,,'T',,,'WYD',,);
      _ndx2:=_tab.ndx_tmp(,,'KOD',,);
      exec('openmask','zl_common',_zl,_grop);
      _tab.index(_ndx1);
      {? _where=0
      || {? (VAR.A_ZLEC().RODZAJ='P' & VAR.A_ZLEC().NRNZL=0) |
            (VAR.A_ZLEC().TYP().WP='W') |
            (VAR.A_ZLEC().RODZAJ<>'P' & VAR.A_ZLEC().GENLIM='N' & VAR.A_ZLEC().NRNZL=0) |
            (VAR.A_ZLEC().RODZAJ='P' & VAR.A_ZLEC().GENLIM='P' & VAR.A_ZLEC().NRNZL<>0)
         || ZLIM.index('ZN');
            ZLIM.prefix(VAR.A_ZLEC,'T')
         || ZLIM.index('ZPN');
            ZLIM.prefix(VAR.A_ZLEC,'T')
         ?}
      || ZLIM.index('GROPNM');
         ZLIM.prefix(VAR.A_GROP,'T')
      ?};
      {? var_pres('__ZLIM4LIM')>100 || obj_del(__ZLIM4LIM) ?};
::    Tabela z ropzisaniem materiału wg ZLIM
      __ZLIM4LIM:=tab_tmp(,
         'ZL_REF','INTEGER','#ZL.ref()',
         'GROP_REF','INTEGER','#GROP.ref()',
         'TAB_REF','STRING[16]','$_tab.ref()',
         'REF','STRING[16]','$ZLIM.ref()',
         'M_REF','INTEGER','#M.ref()',
         'AKC','STRING[1]','ZLIM.AKC',
         'SO','STRING[1]','ZLIM.SO',
         'WYD_REF','INTEGER','#ZLIM.WYD',
         'ZK_P_QRF','STRING[16]','$ZK_P.ref() powiązanego ZLIMa',
         'ZL_SQL','STRING[16]','$ZL.ref()',
         'GROP_SQL','STRING[16]','$GROP.ref()'
      );
      {? ZLIM.first()
      || {!
         |?
            {? ZLIM.AKC='T' & ZLIM.SO='S' & (_chk_zlim=0 | _zlim_tab.find_tab(,'MREF',,'=',#ZLIM.KTM))
            || _tab.prefix(#ZLIM.KTM);
               {? _tab.first()
               || _tab.ILL0+=ZLIM.LIL;
                  _tab.ILP+=(ZLIM.IL_RW-ZLIM.IL_ZW);
                  _tab.ILRW+=ZLIM.IL_RW;
                  _tab.ILZW+=ZLIM.IL_ZW;
                  _tab.WARP+=(ZLIM.WAR_RW-ZLIM.WAR_ZW);
                  {? _tab.put() & (_all_zlim=1 | ZLIM.IL_RW-ZLIM.IL_ZW>0)
                     & (_chk_zlim=0 | _zlim_tab.find_tab(,'REF',,'=',$ZLIM.ref()))
                  || __ZLIM4LIM.TAB_REF:=$_tab.ref();
                     __ZLIM4LIM.ZL_REF:=#ZLIM.ZLEC;
                     __ZLIM4LIM.GROP_REF:=#ZLIM.GROP;
                     __ZLIM4LIM.ZL_SQL:=$ZLIM.ZLEC;
                     __ZLIM4LIM.GROP_SQL:=$ZLIM.GROP;
                     __ZLIM4LIM.REF:=$ZLIM.ref();
                     __ZLIM4LIM.M_REF:=#ZLIM.KTM;
                     __ZLIM4LIM.AKC:={? exec('GetAlLil4ZLIM','zl_limit',1,ZLIM.ref())>0 || ZLIM.AKC || 'I' ?};
                     __ZLIM4LIM.SO:=ZLIM.SO;
                     __ZLIM4LIM.WYD_REF:=#ZLIM.WYD;
                     _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
                     __ZLIM4LIM.ZK_P_QRF:=$_zk_p;
                     __ZLIM4LIM.add()
                  ?}
               || _tab.blank();
                  _tab.T:=#ZLIM.KTM;
                  _tab.KOD:=ZLIM.KTM().KTM;
                  _tab.NAZ:=ZLIM.KTM().N;
                  _tab.ILL0:=ZLIM.LIL;
                  _tab.WYD:=#ZLIM.WYD;
                  _tab.ILP:=(ZLIM.IL_RW-ZLIM.IL_ZW);
                  _tab.ILRW:=ZLIM.IL_RW;
                  _tab.ILZW:=ZLIM.IL_ZW;
                  _tab.WARP:=(ZLIM.WAR_RW-ZLIM.WAR_ZW);
                  {? _tab.add() & (_all_zlim=1 | ZLIM.IL_RW-ZLIM.IL_ZW>0)
                     & (_chk_zlim=0 | _zlim_tab.find_tab(,'REF',,'=',$ZLIM.ref()))
                  || __ZLIM4LIM.TAB_REF:=$_tab.ref();
                     __ZLIM4LIM.ZL_REF:=#ZLIM.ZLEC;
                     __ZLIM4LIM.GROP_REF:=#ZLIM.GROP;
                     __ZLIM4LIM.ZL_SQL:=$ZLIM.ZLEC;
                     __ZLIM4LIM.GROP_SQL:=$ZLIM.GROP;
                     __ZLIM4LIM.REF:=$ZLIM.ref();
                     __ZLIM4LIM.M_REF:=#ZLIM.KTM;
                     __ZLIM4LIM.AKC:={? exec('GetAlLil4ZLIM','zl_limit',1,ZLIM.ref())>0 || ZLIM.AKC || 'I' ?};
                     __ZLIM4LIM.SO:=ZLIM.SO;
                     __ZLIM4LIM.WYD_REF:=#ZLIM.WYD;
                     _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
                     __ZLIM4LIM.ZK_P_QRF:=$_zk_p;
                     __ZLIM4LIM.add()
                  ?}
               ?}
            ?};
            ZLIM.next()
         !}
      ?};
::----------------------------------------------------------------------------------------------------------------------
:: Naniesienie znaczników, zgodne rekordy kasujemy
::----------------------------------------------------------------------------------------------------------------------
      _tab.prefix();
      {? _tab.first()
      || {!
         |?
:: Uwzględnienie w wyliczeniach wyskalowania do faktycznie
:: zarejestrowanej (zaraportowanej) ilości produktu.
:: (tylko dla zleceń produkcyjnych)
            {? _wp='P' & _usluga=0
            || _tab.ILL:=_tab.ILL0*_ilwyk/_il
            || _tab.ILL:=_tab.ILL0
            ?};
            {? _tab.ILP > _tab.ILL
            || _tab.DX:='X';
               _tab.SX:='D';
               _tab.OX:='Przekroczenie limitu'@;
               _tab.put();
               _tab.next()
            |? _tab.ILP < _tab.ILL
            || _tab.MX:='X';
               _tab.SX:='M';
               _tab.OX:='Poniżej limitu'@;
               _tab.put();
               _tab.next()
            || {? _all
               || _tab.SX:='N';
                  _tab.OX:='Według normy'@;
                  _tab.put();
                  _tab.next()
               || _tab.del()
               ?}
            ?}
         !}
      ?};
::    Przepisanie danych do tabeli docelowej w przypadku aktualizacji danych
      {? _aktu>0
      ||
::       Zapamiętanie refa, do którego materiału wrócić
         _mat:=_tab_rob.T;
         exec('tab2tab','#table',_tab,_tab_rob,0,1);
         _tab_rob.find_tab(,'T',,'=',_mat);
::       Aktualizacja tabeli __ZLIM4LIM (po zmianie refów tabeli głównej)
         __ZLIM4LIM.cntx_psh();
         {? _where=0
         || _ndx:=__ZLIM4LIM.ndx_tmp(,,'ZL_REF',,,'REF',,)
         || _ndx:=__ZLIM4LIM.ndx_tmp(,,'GROP_REF',,,'REF',,)
         ?};
         __ZLIM4LIM.index(_ndx);
         __ZLIM4LIM.prefix();
         {? __ZLIM4LIM.first()
         || _tab_rob.cntx_psh();
            _tab_rob.prefix();
            {!
            |?
               {? _tab_rob.find_tab(,'T',,'=',__ZLIM4LIM.M_REF)
               || __ZLIM4LIM.TAB_REF:=$_tab_rob.ref();
                  __ZLIM4LIM.put()
               ?};
               __ZLIM4LIM.next()
            !};
            _tab_rob.cntx_pop()
         ?};
         __ZLIM4LIM.ndx_drop(_ndx);
         __ZLIM4LIM.cntx_pop()
      ?};
::----------------------------------------------------------------------------------------------------------------------
:: Wyświetlenie raportu
::----------------------------------------------------------------------------------------------------------------------
      {? _tab.first() & _aktu=0
      || _ident:={? _where=0 || 'zlec' || 'grop' ?}+'2_lim_sel';
         _wer:=_tab.mk_sel('Niezgodność limitów i pobrań'@,'N',0,_ident,,,,,'U');
         _tab.win_fld(_wer,,'KOD',,,20,,,'Indeks'@);
         _tab.win_fld(_wer,,'ILL',,,15,4);
         _tab.win_fld(_wer,,'ILP',,,15,4);
::         _tab.win_fld(_wer,,'ILB',,,15,4);
::         _tab.win_fld(_wer,,'MX',,,,,,,,'Pobrania poniżej limitu'@,2,,"'X'","''");
::         _tab.win_fld(_wer,,'DX',,,,,,,,'Przekroczenie limitu'@,2,,"'X'","''");
         _tab.win_fld(_wer,,'OX',,,20,,,'Status'@);
         {? _all || _tab.win_fld(_wer,,'WARP',,,15,2) ?};
         {? _param='R'
         || {? _where=0
            || _tab.win_act(_wer,,'Formuła','Zamknij zlecenie'@@,,'Zamknij zlecenie mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            || _tab.win_act(_wer,,'Formuła','Zamknij grupę'@@,,'Zamknij grupę mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            ?}
         ?};

         _tab.win_act(_wer,,'Formuła','&Wydanie'@@,'','Generacja wydania surowców dla limitu'@
         ,"params_exec('lim_wyd','zl_limit1',1)",,,1,"params_exec('lim_wyd_gb','zl_limit1',1)",,'W');
         task_attach('LMG_ZAM_IPRZ');

         _tab.win_act(_wer,,'Formuła','Zw&rot'@@,'','Generacja zwrotu surowców dla limitu'@
            ,"exec('zlim_zwr','zl_limit1',1)",,,1,"exec('zlim_zwr_gb','zl_limit1',1)",,'R');
         task_attach('TTE_WYK_DGZW');

         _formula:="
            exec('pozrap','magdok_prod',0,1,0,,1);
            exec('kontr_lim','zl_limit','T',0,,cur_tab(1,1),,,{? VAR.A_GROP<>null() || 1 || 0 ?});
            VAR.RFR_DOK:=1;
            ~~
         ";
         _tab.win_act(_wer,,'Formuła','&Dokumenty magazynowe'@@,'','Podgląd i rejestracja dokumentów magazynowych'@
            ,_formula,,,,,,'D');

         _formula:="
            M.cntx_psh();
            M.clear();
            {? M.seek(cur_tab(1,1).T)
            || exec('info_zam','magazyn_stan',3)
            ?};
            M.cntx_pop();
            ~~
         ";
         _tab.win_act(_wer,,'Formuła','Sz&czegóły'@@,'','Szczegółowe informacje dot. indeksu materiałowego'@
            ,_formula,,,,,,'C');
         {? _where=0
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkzl',,1)"
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkgr',,1)"
         ?};
         _tab.win_act(_wer,,'Formuła','Druku&j'@@,,,_formula
            ,,{? _param='R' || 0 || 1 ?},,,,'J',,'target=window,icon=print');
         _tab.win_sel(_wer);
         _tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','__TABX#01#01')",,,,,,'L',,'target=window');
         _tab.win_act(_wer,0,'Rekord',,,,"{? cur_tab(1,1).ILP=0 || Color.rekprzed('__TABX#01#01') || '' ?}");
         _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Druku&j'@],'menu:J');
         {? _param='R'
         || {? _where=0
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij zlecenie'@],'menu:Z')
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij grupę'@],'menu:Z')
            ?}
         ?};
         _red:=_tab.mk_edit('Limity i pobrania'@,0,'zlec2_lim_edit');
         _tab.win_esep(_red,'Materiał'@);
         _tab.win_efld(_red,,'KOD',,,50,,,'Indeks'@);
         _tab.win_efld(_red,,'NAZ',,,50,,,'Nazwa'@);
         _tab.win_esep(_red,'Rozliczenie'@);
         _tab.win_efld(_red,,'ILL',,,15,4);
         _tab.win_efld(_red,,'ILP',,,15,4);
::         _tab.win_efld(_red,,'ILB',,,15,4);
::         _tab.win_efld(_red,,'MX',,,2,,,'Poniżej limitu'@,,,
::            'check-box','check_label="%1"'['Pobrania są mniejsze niż limit'@],"'X'","''"
::         );
::         _tab.win_efld(_red,,'DX',,,2,,,'Przekroczenie limitu'@,,,
::            'check-box','check_label="%1"'['Pobrania są większe niż limit'@],"'X'","''"
::         );
         _tab.win_efld(_red,,'SX',,,,,,'Status'@,,,'radio-buttons',,
            'Przekroczenie limitu'@,"'D'",
            'Zgodnie z normą'@,"'N'",
            'Poniżej limitu'@,"'M'"
         );
         _tab.win_edit(_red);
         _tab.index(_ndx2);
::----------------------------------------------------------------------------------------------------------------------
:: Wynik - jeśli są jakieś rekordy, to niedobrze
::----------------------------------------------------------------------------------------------------------------------
         _res:=obj_new('TAB','WER');
         _res.TAB:=_tab;
         _res.WER:=_wer;
         _res
      || 0
      ?}
   || exec('err_sql','#sql');
      0
   ?}
|| 0
?}


\kontr_nli
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [7.62]
:: OPIS: niezgodność w rozliczeniu surowców nielimitowanych (powyżej i poniżej)
::       Sumujemy nie-limity dla każdego surowca, nie rozbijamy
::        według faz, bo chodzi tu o ujęcie globalne.
::       Nie analizujemy zleceń podrzędnych,
::        gdy nie-limity generowane do nadrzędnego
::   WE: ustawione VAR.A_ZLEC = ZL.ref() / VAR.A_GROP = GROP.ref()
::       _a - T: analizować, N: nic nie robić
::       [_b] - [0]: kontrola zamknięcia, 1: wyświetlać wszystko (analiza drill-down zlecenia)
::       [_c] - parametr wywołania 'A','R',['S']
::       [_d] - tabela z niezgodnościami w nielimitach, jeżeli podana to aktualizowane dane
::       [_e] - INTEGER - tabela, dla której uruchamiana: [0] - zlecenia (ZL), 1 - grupy operacji (GROP)
::   WY: 0: ok, _tab: są przekroczenia (zawsze dla _b=1)
::  OLD: \kontr_nli/zlec2.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of(0) || _all:=_b || _all:=0 ?};
{? var_pres('_c')=type_of('') || _param:=_c || _param:='S' ?};
{? var_pres('_d')>100 || _aktu:=1; _tab_rob:=_d || _aktu:=0; _tab_rob:=~~ ?};
{? var_pres('_e')=type_of(0) || _where:=_e || _where:=0 ?};
_go:={? _where=0 || ~(VAR.A_ZLEC().RODZAJ='P' & ZL.NRNZL<>0 & ZL.GENLIM='N') || 1 ?};

{? _a='T' & _go
||
   {? _where=0
   || _zl:=VAR.A_ZLEC;
      _grop:=null();
      _wp:=ZL.TYP().WP;
      _rodzaj:=ZL.RODZAJ;
      {? _wp='P' & _rodzaj<>'N'
      || _xjm:=ZL.KTLZ().XJM;
         _il:=ZL.IL
      || _xjm:=_il:=1
      ?};
::   _ilwyk:=ZL.ILWYK;
      _ilwyk:=ZL.ILDOK
   || _zl:=null();
      _grop:=VAR.A_GROP;
      _wp:='P';
      _xjm:=_il:=GROP.IL;
      _ilwyk:=GROP.ILW
   ?};

   _tab:=tab_tmp(2,
      'T','INTEGER','Surowiec',
      'WYD','INTEGER','Wydział',
      'ILL0','REAL','Ilość',
      'ILL','REAL','Ilość',
      'ILP','REAL','Ilość pobrana',
      'ILB','REAL','Ilość braków',
      'WARP','REAL','Wartość pobrań',
      'MX','STRING[1]','M?',
      'DX','STRING[1]','D?',
      'SX','STRING[1]','Status',
      'OX','STRING[30]','Status opisowo',
      'KOD','STRING[50]','Kod surowca',
      'NAZ','STRING[100]','Nazwa surowca',
      'REJ_MAT','STRING[1]','Czy istnieją nierozliczone pobrania surowca?'
   );
   _tab.fld_attr('T',2);
   _tab.fld_attr('WYD',2);

   {? type_of(_tab)>100
   || _ndx1:=_tab.ndx_tmp(,,'T',,,'WYD',,);
      _ndx2:=_tab.ndx_tmp(,,'KOD',,);
      exec('openmask','zl_common',_zl,_grop);
      _tab.index(_ndx1);
      {? _where=0
      || {? (VAR.A_ZLEC().RODZAJ='P' & VAR.A_ZLEC().NRNZL=0) |
            (VAR.A_ZLEC().TYP().WP='W') |
            (VAR.A_ZLEC().RODZAJ<>'P' & VAR.A_ZLEC().GENLIM='N' & VAR.A_ZLEC().NRNZL=0) |
            (VAR.A_ZLEC().RODZAJ='P' & VAR.A_ZLEC().GENLIM='P' & VAR.A_ZLEC().NRNZL<>0)
         || ZLIM.index('ZN');
            ZLIM.prefix(VAR.A_ZLEC,'N')
         || ZLIM.index('ZPN');
            ZLIM.prefix(VAR.A_ZLEC,'N')
         ?}
      || ZLIM.index('GROPNM');
         ZLIM.prefix(VAR.A_GROP,'N')
      ?};
      {? var_pres('__ZLIM4NLIM')>100 || obj_del(__ZLIM4NLIM) ?};
      __ZLIM4NLIM:=tab_tmp(,
         'ZL_REF','INTEGER','#ZL.ref()',
         'GROP_REF','INTEGER','#GROP.ref()',
         'TAB_REF','STRING[16]','$_tab.ref()',
         'REF','STRING[16]','$ZLIM.ref()',
         'M_REF','INTEGER','#M.ref()',
         'ZL_SQL','STRING[16]','$ZL.ref()',
         'GROP_SQL','STRING[16]','$ZL.ref()'
      );
      {? ZLIM.first()
      || {!
         |?
            {? ZLIM.SO='S'
            ||
               _tab.prefix(#ZLIM.KTM);
               {? _tab.first()
               || _tab.ILL0+=ZLIM.LIL;
                  _tab.ILP+=(ZLIM.IL_RW-ZLIM.IL_ZW);
                  _tab.WARP+=(ZLIM.WAR_RW-ZLIM.WAR_ZW);
                  {? _tab.REJ_MAT<>'X'
                  || {? exec('is_rej_mat','zl_nlimit',$ZLIM.ref())
                     || _tab.REJ_MAT:='X'
                     ?}
                  ?};
                  {? _tab.put()
                  || __ZLIM4NLIM.TAB_REF:=$_tab.ref();
                     __ZLIM4NLIM.ZL_REF:=#ZLIM.ZLEC;
                     __ZLIM4NLIM.ZL_SQL:=$ZLIM.ZLEC;
                     __ZLIM4NLIM.GROP_REF:=#ZLIM.GROP;
                     __ZLIM4NLIM.GROP_SQL:=$ZLIM.GROP;
                     __ZLIM4NLIM.REF:=$ZLIM.ref();
                     __ZLIM4NLIM.M_REF:=#ZLIM.KTM;
                     __ZLIM4NLIM.add()
                  ?}
               || _tab.blank();
                  _tab.T:=#ZLIM.KTM;
                  _tab.KOD:=ZLIM.KTM().KTM;
                  _tab.NAZ:=ZLIM.KTM().N;
                  _tab.ILL0:=ZLIM.LIL;
                  _tab.WYD:=#ZLIM.WYD;
                  _tab.ILP+=(ZLIM.IL_RW-ZLIM.IL_ZW);
                  _tab.WARP+=(ZLIM.WAR_RW-ZLIM.WAR_ZW);
                  {? exec('is_rej_mat','zl_nlimit',$ZLIM.ref())
                  || _tab.REJ_MAT:='X'
                  ?};
                  {? _tab.add()
                  || __ZLIM4NLIM.TAB_REF:=$_tab.ref();
                     __ZLIM4NLIM.ZL_REF:=#ZLIM.ZLEC;
                     __ZLIM4NLIM.ZL_SQL:=$ZLIM.ZLEC;
                     __ZLIM4NLIM.GROP_REF:=#ZLIM.GROP;
                     __ZLIM4NLIM.GROP_SQL:=$ZLIM.GROP;
                     __ZLIM4NLIM.REF:=$ZLIM.ref();
                     __ZLIM4NLIM.M_REF:=#ZLIM.KTM;
                     __ZLIM4NLIM.add()
                  ?}
               ?}
            ?};
            ZLIM.next()
         !}
      ?};
::----------------------------------------------------------------------------------------------------------------------
:: Naniesienie znaczników, zgodne rekordy kasujemy
::----------------------------------------------------------------------------------------------------------------------
      _tab.prefix();
      {? _tab.first()
      || {!
         |?
:: Uwzględnienie w wyliczeniach wyskalowania do faktycznie
:: zarejestrowanej (zraportowanej) ilości produktu.
:: (tylko dla zleceń produkcyjnych)
            {? _wp='P'
            || _tab.ILL:=_tab.ILL0*_ilwyk/_il
            || _tab.ILL:=_tab.ILL0
            ?};
            {? _tab.ILP-_tab.ILB > _tab.ILL
            || _tab.DX:='X';
               _tab.SX:='D';
               _tab.OX:='Pobrania powyżej normy'@;
               _tab.put();
               _tab.next()
            |? _tab.ILP-_tab.ILB < _tab.ILL
            || _tab.MX:='X';
               _tab.SX:='M';
               _tab.OX:='Pobrania poniżej normy'@;
               _tab.put();
               _tab.next()
            || {? _all
               || _tab.SX:='N';
                  _tab.OX:='Pobrania zgodnie z normą'@;
                  _tab.put();
                  _tab.next()
               || {? _tab.REJ_MAT='X'
                  || _tab.SX:='N';
                     _tab.OX:='Pobrania zgodnie z normą'@;
                     _tab.put();
                     _tab.next()
                  || _tab.del()
                  ?}
               ?}
            ?}
         !}
      ?};
::    Przepisanie danych do tabeli docelowej w przypadku aktualizacji danych
      {? _aktu>0
      ||
::       Zapamiętanie refa, do którego materiału wrócić
         _mat:=_tab_rob.T;
         exec('tab2tab','#table',_tab,_tab_rob,0,1);
         _tab_rob.find_tab(,'T',,'=',_mat);
::       Aktualizacja tabeli __ZLIM4NLIM (po zmianie refów tabeli głównej)
         __ZLIM4NLIM.cntx_psh();
         {? _where=0
         || _ndx:=__ZLIM4NLIM.ndx_tmp(,,'ZL_REF',,,'REF',,)
         || _ndx:=__ZLIM4NLIM.ndx_tmp(,,'GROP_REF',,,'REF',,)
         ?};
         __ZLIM4NLIM.index(_ndx);
         __ZLIM4NLIM.prefix();
         {? __ZLIM4NLIM.first()
         || _tab_rob.cntx_psh();
            _tab_rob.prefix();
            {!
            |?
               {? _tab_rob.find_tab(,'T',,'=',__ZLIM4NLIM.M_REF)
               || __ZLIM4NLIM.TAB_REF:=$_tab_rob.ref();
                  __ZLIM4NLIM.put()
               ?};
               __ZLIM4NLIM.next()
            !};
            _tab_rob.cntx_pop()
         ?};
         __ZLIM4NLIM.ndx_drop(_ndx);
         __ZLIM4NLIM.cntx_pop()
      ?};
::----------------------------------------------------------------------------------------------------------------------
:: Wyświetlenie raportu
::----------------------------------------------------------------------------------------------------------------------
      {? _tab.first() & _aktu=0
      || _ident:={? _where=0 || 'zlec' || 'grop' ?}+'2_nli_sel';
         _wer:=_tab.mk_sel('Niezgodność w rozliczeniu surowców nielimitowanych'@,'N',0,_ident,,,,,'U');
         _tab.win_fld(_wer,,'KOD',,,20,,,'Indeks'@);
         _tab.win_fld(_wer,,'ILL',,,15,4);
         _tab.win_fld(_wer,,'ILP',,,15,4);
::         _tab.win_fld(_wer,,'MX',,,,,,,,'Za mało rozliczeń'@,2,,"'X'","''");
::         _tab.win_fld(_wer,,'DX',,,,,,,,'Przekroczenie rozl.'@,2,,"'X'","''");
         _tab.win_fld(_wer,,'OX',,,20,,,'Status'@);
         _tab.win_fld(_wer,,'REJ_MAT',,,,,,'Nierozliczony na wykonaniach?'@,,
            'Czy surowiec nierozliczony na wykonaniach produkcji'@,2,,"'X'","''");
         {? _all || _tab.win_fld(_wer,,'WARP',,,15,2) ?};
         {? _param='R'
         || {? _where=0
            || _tab.win_act(_wer,,'Formuła','Zamknij zlecenie'@@,,'Zamknij zlecenie mimo niezgodności'@,"sel_exit()"
                  ,,1,,,,'Z',,'target=window')
            || _tab.win_act(_wer,,'Formuła','Zamknij grupę'@@,,'Zamknij grupę mimo niezgodności'@,"sel_exit()"
                  ,,1,,,,'Z',,'target=window')
            ?}
         ?};
         _tab.win_sel(_wer);
         _tab.win_act(_wer,,'Formuła','&Wydanie'@@,,,"params_exec('nlim_wyd','zl_nlimit',1)",,,1
            ,"params_exec('nlim_wyd_gb','zl_nlimit',1)",,'W',,'target=record');
         task_attach('TTE_WYK_DGRW');

         _form:="
            _tab:=cur_tab(1,1);
            _tab.cntx_psh();
            _tab_zlim:=__ZLIM4NLIM;
            _tab_zlim.cntx_psh();
            _ndx:=_tab_zlim.ndx_tmp(,,'TAB_REF',,,'M_REF',,);
            _tab_zlim.index(_ndx);
::          Tabela z listą zleceń
            _tab_zl:=tab_tmp(,'REF','STRING[16]','$ZL.ref()');
::          Zebranie listy zleceń powiązanych z zaznaczonymi surowcami nielimitowanymi
            {? _tab.sel_size()
            || _tab_sel:=_tab.sel_aget()
            || _tab_sel:=tab_tmp(,'REF','INTEGER','');
               _tab_sel.REF:=_tab.ref();
               _tab_sel.add()
            ?};
            {? _tab_sel.first()
            || {!
               |?
                  {? _tab.seek(_tab_sel.REF)
                  ||
::                   Wypełnienie tabeli z listą zleceń
                     _tab_zlim.prefix($_tab.ref(),_tab.T);
                     {? _tab_zlim.first()
                     || {!
                        |?
                           _zlec:={? _where=0 || _tab_zlim.ZL_SQL || _tab_zlim.GROP_SQL ?};
                           {? ~_tab_zl.find_key(_zlec,)
                           || _tab_zl.REF:=_zlec;
                              _tab_zl.add()
                           ?};
                           _tab_zlim.next()
                        !}
                     ?}
                  ?};
                  _tab_sel.next()
               !}
            ?};
            _tab_zlim.ndx_drop(_ndx);
            _tab_zlim.cntx_pop();
            _tab.cntx_pop();
::          Pętla po powiązanych zleceniach/grupach
            {? _tab_zl.first()
            || _tab2:={? _where=0 || ZL || GROP ?};
::             Utworzenie środiwska do rozliczania surowców
               {? _where=0
               || exec('action_rw_generate_group_before','!tte_wyk_dgrw',_typ)
               || exec('action_rw_gropgen_group_before','!tte_wyk_dgrw')
               ?};
               _tab2.cntx_psh();
               _tab2.prefix();
               {!
               |?
                  {? _tab2.seek(_tab_zl.REF)
                  ||
::                   Dodanie danych ze zlecenia/grupy do rozliczatora
                     {? _where=0
                     || exec('action_rw_generate','!tte_wyk_dgrw',_typ,1)
                     || exec('action_rw_gropgen','!tte_wyk_dgrw',,1)
                     ?}
                  ?};
                  _tab_zl.next()
               !};
               _tab2.cntx_pop();
::             Wyświetlenie okna z wynikiem
               {? _where=0
               || exec('action_rw_generate_group_after','!tte_wyk_dgrw')
               || exec('action_rw_generate_group_after','!tte_wyk_dgrw')
               ?}
            || FUN.emsg('Nie znaleziono powiązanych zleceń produkcyjnych.'@)
            ?};
            {? _tab.sel_size() || _tab.sel_adel() ?};
::          Odświeżenie danych w oknie nierozliczonych nielimitów
            exec('kontr_nli','zl_limit','T',0,,cur_tab(1,1),_where);
            ~~
         ";
         {? _where=0
         || _tab.win_act(_wer,,'Menu','Rozliczenie &surowców'@@,,,,,,,,,'S',,'target=window');
            task_attach('TTE_WYK_DGRW');
            _formula:='_where:=0;_typ:=0;'+$_form;
            _formula:=$_formula;
            _formula_gr1:='sel_nchk();'+$_formula;
            _formula_gr1:=$_formula_gr1;
            _tab.win_act(_wer,,'Formuła','Na podstawie dokumentów &raportujących'@@,'#S',,_formula,,,1,_formula_gr1,,'R');

            _formula:='_where:=0;_typ:=1;'+$_form;
            _formula:=$_formula;
            _formula_gr1:='sel_nchk();'+$_formula;
            _formula_gr1:=$_formula_gr1;
            _tab.win_act(_wer,,'Formuła','Na podstawie &wykonań'@@,'#S',,_formula,,,1,_formula_gr1,,'W')
         || _formula:='_where:=1;_typ:=0;'+$_form;
            _formula:=$_formula;
            _formula_gr1:='sel_nchk();'+$_formula;
            _formula_gr1:=$_formula_gr1;
            _tab.win_act(_wer,,'Formuła','Rozliczenie &surowców'@@,,,_formula,,,1,_formula_gr1,,'S',,'target=window');
             task_attach('TTE_WYK_DGRW')
         ?};

         _formula:="
            exec('pozrap','magdok_prod',0,1,0,,1);
            exec('kontr_nli','zl_limit','T',0,,cur_tab(1,1),{? VAR.A_GROP<>null() || 1 || 0 ?});
            VAR.RFR_DOK:=1;
            ~~
         ";
         _tab.win_act(_wer,,'Formuła','&Dokumenty magazynowe'@@,'','Podgląd i rejestracja dokumentów magazynowych'@
            ,_formula,,,,,,'D');

         _formula:="
            M.cntx_psh();
            M.clear();
            {? M.seek(cur_tab(1,1).T)
            || exec('info_zam','magazyn_stan',3)
            ?};
            M.cntx_pop();
            ~~
         ";
         _tab.win_act(_wer,,'Formuła','Sz&czegóły'@@,'','Szczegółowe informacje dot. indeksu materiałowego'@
            ,_formula,,,,,,'C');

         {? _where=0
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkzl',,1)"
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkgr',,1)"
         ?};
         _tab.win_act(_wer,,'Formuła','Druku&j'@@,,,_formula
            ,,{? _param='R' || 0 || 1 ?},,,,'J',,'target=window,icon=print');
         _tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','__TABX#01#01')",,,,,,'L',,'target=window');
         _tab.win_act(_wer,0,'Rekord',,,,"{? cur_tab(1,1).ILP=0 || Color.rekprzed('__TABX#01#01') || '' ?}");
         _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Druku&j'@],'menu:J');
         {? _param='R'
         || {? _where=0
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij zlecenie'@],'menu:Z')
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij grupę'@],'menu:Z')
            ?}
         ?};
         _red:=_tab.mk_edit('Rozliczenie surowca nielimitowanego'@,0,'zlec2_nli_edit');
         _tab.win_esep(_red,'Materiał'@);
         _tab.win_efld(_red,,'KOD',,,50,,,'Indeks'@);
         _tab.win_efld(_red,,'NAZ',,,50,,,'Nazwa'@);
         _tab.win_esep(_red,'Rozliczenie'@);
         _tab.win_efld(_red,,'ILL',,,15,4);
         _tab.win_efld(_red,,'ILP',,,15,4);
::         _tab.win_efld(_red,,'MX',,,2,,,'Za mało'@,,,
::            'check-box','check_label="%1"'['Pobrania poniżej normy'@],"'X'","''"
::         );
::         _tab.win_efld(_red,,'DX',,,2,,,'Za dużo'@,,,
::            'check-box','check_label="%1"'['Pobrania powyżej normy'@],"'X'","''"
::         );
         _tab.win_efld(_red,,'SX',,,,,,'Status'@,,,'radio-buttons',,
            'Pobrania powyżej normy'@,"'D'",
            'Pobrania zgodnie z normą'@,"'N'",
            'Pobrania poniżej normy'@,"'M'"
         );
        _tab.win_efld(_red,,'REJ_MAT',,,2,,,'Nierozliczony na wykonaniach?'@,,,
            'check-box','check_label="%1"'['Surowiec nierozliczony na wykonaniach produkcji'@],"'X'","''"
         );
         _tab.win_edit(_red);
         _tab.index(_ndx2);
::----------------------------------------------------------------------------------------------------------------------
:: Wynik - jeśli są jakieś rekordy, to niedobrze
::----------------------------------------------------------------------------------------------------------------------
         _res:=obj_new('TAB','WER');
         _res.TAB:=_tab;
         _res.WER:=_wer;
         _res
      || 0
      ?}
   || exec('err_sql','#sql');
      0
   ?}
|| 0
?}


\kontr_nzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [7.62]
:: OPIS: niezaakceptowane limity do zlecenia
::   WE: ustawione VAR.A_ZLEC = ZL.ref() lub VAR.A_GROP = GROP.ref()
::       _a - T: analizować, N: nic nie robić
::       [_b] - parametr wywołania 'A','R',['S']
::       [_c] - INTEGER - tabela, dla której uruchamiana: [0] - zlecenia (ZL), 1 - grupy operacji (GROP)
::   WY: 0: ok, _tab: są niezaakceptowane limity do zlecenia/grupy
::  OLD: \kontr_nzl/zlec2.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')=type_of('') || _param:=_b || _param:='S' ?};
{? var_pres('_c')=type_of(0) || _where:=_c || _where:=0 ?};

{? _a='T'
|| {? _where=0
   || _ref:=VAR.A_ZLEC;
      _maska:=ZL.MASKA
   || _ref:=VAR.A_GROP;
      _maska:='grop'
   ?};
   _tab:=sql('
      select
         M.KTM KOD,
         M.N NAZ,
         ZLIM.LIL as ILOSC,
         ZLIM.REFERENCE as REF
      from @ZLIM
         join M using(ZLIM.KTM,M.REFERENCE)
      where '
      +{? _where=0 || ' :_a=ZLIM.ZLEC ' || ' :_a=ZLIM.GROP ' ?}+'
         and ZLIM.LIMIT=''T''
         and ZLIM.AKC=''N''
         and ZLIM.REFERENCE like ''zlim:_b%''
      order by KOD ',_ref, _maska
   );
   {? type_of(_tab) > 100
   || {? _tab.first()
      || _ident:={? _where=0 || 'zlec' || 'grop' ?}+'2_nzl_sel';
         _wer:=_tab.mk_sel('Niezaakceptowane limity'@,'N',0,_ident,,,,,'U');
         _tab.win_fld(_wer,,'KOD',,,,,,'Kod surowca'@);
         _tab.win_fld(_wer,,'NAZ',,,39,,,'Nazwa surowca'@);
         _tab.win_fld(_wer,,'ILOSC',,,15,4,,'Ilość'@);
         {? _param='R'
         || {? _where=0
            || _tab.win_act(_wer,,'Formuła','Zamknij zlecenie'@@,,'Zamknij zlecenie mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            || _tab.win_act(_wer,,'Formuła','Zamknij grupę'@@,,'Zamknij grupę mimo niezgodności'@,
                  "sel_exit()",,1,,,,'Z',,'target=window')
            ?}
         ?};
         {? _where=0
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkzl',,1)"
         || _formula:="params_set(params_get()); rep_exec('tte_rapzmkgr',,1)"
         ?};
         _tab.win_act(_wer,,'Formuła','Druku&j'@@,,,_formula
            ,,{? _param='R' || 0 || 1 ?},,,,'J',,'target=window,icon=print');
         _tab.win_act(_wer,,'Wyświetl',,,,"exec('FindAndGet','#table',ZLIM,cur_tab(1,1).REF,,
            \"exec('bs_zlimw','zl_limit')\",~~)");
         _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Druku&j'@],'menu:J');
         {? _param='R'
         || {? _where=0
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij zlecenie'@],'menu:Z')
            || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zamknij grupę'@],'menu:Z')
            ?}
         ?};
         _tab.win_sel(_wer);
::----------------------------------------------------------------------------------------------------------------------
:: Wynik formuły - jeśli są jakieś rekordy, to niedobrze
::----------------------------------------------------------------------------------------------------------------------
         _res:=obj_new(2);
         _res[1]:=_tab;
         _res[2]:=_wer;
         _res
      || 0
      ?}
   || exec('err_sql','#sql');
      0
   ?}
|| 0
?}


\is_zlim_pxstag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy do PX_STAGE są przypisane limity
::   WE: _a - PX_STAGE.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::   WY: 0 / 1
::  OLD: \is_zlim_pxstag/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_px_stage:=_a;
_res:=0;

{? _px_stage<>null()
|| ZGP.cntx_psh();
   ZGP.index('PX_STAGE');
   ZGP.prefix(_px_stage);
   {? ZGP.first()
   || {!
      |? _res:=exec('is_zlim_zgp','zl_limit',ZGP.ref());
         ZGP.next() & _res=0
      !}
   ?};
   ZGP.cntx_pop()
?};
_res


\is_zlim_ploper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy do PL_OPER (poprzez PL_OPER.ZGP) są przypisane limity
::   WE: _a - PL_OPER.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::   WY: 0 / 1
::  OLD: \is_zlim_ploper/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_pl_oper:=_a;
_res:=0;

PL_OPER.cntx_psh();
PL_OPER.clear();
{? PL_OPER.seek(_pl_oper)
|| _res:=exec('is_zlim_zgp','zl_limit',PL_OPER.ZGP)
?};
PL_OPER.cntx_pop();
_res


\is_zlim_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza, czy do ZGP są przypisane limity
::   WE: _a - ZGP.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::   WY: 0 / 1
::  OLD: \is_zlim_zgp/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zgp:=_a;
_res:=0;

ZGP.cntx_psh();
ZGP.clear();
{? ZGP.seek(_zgp)
||
   exec('openmask','zl_common',ZGP.NRPRZ().ZLEC);
   ZLIM.index('ZGP_M');
   ZLIM.prefix(ZGP.ref());
   _res:=ZLIM.first()
?};
ZGP.cntx_pop();
_res


\sel_zlim_pxstag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja limitów przypisanych do PX_STAGE
::   WE: _a - PX_STAGE.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::  OLD: \sel_zlim_pxstag/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_px_stage:=_a;

Cntx.psh(PX_STAGE,PX_POZ,ZGP);
PX_STAGE.clear();

{? PX_STAGE.seek(_px_stage)
|| ZGP.index('PX_STAGE');
   ZGP.prefix(PX_STAGE.ref());
   {? ZGP.first()
   || exec('zgp_limity','zl_limit',ZGP.ref(),1,'')
   ?}
?};

Cntx.pop(PX_STAGE,PX_POZ,ZGP);
~~


\sel_zlim_ploper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Selekcja limitów przypisanych do PL_OPER
::   WE: _a - PL_OPER.ref()
::       Nie jest sprawdzana obecność ani typ argumentów
::  OLD: \sel_zlim_ploper/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_pl_oper:=_a;

PL_OPER.cntx_psh();
PL_OPER.clear();
{? PL_OPER.seek(_pl_oper)
|| exec('zgp_limity','zl_limit',PL_OPER.ZGP,1,'')
?};
PL_OPER.cntx_pop();
~~


\spr_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2011]
:: OPIS: Generuje i zatwierdza limity, wykonuje ewentualnie funkcje kontrolne zapotrzebowania.
::   WE: _a - Czy funkcja z dialogami ('N' - bez dialogów/ 'T' - z dialogami)
::       [_b] - Nazwa sekcji
::       _c - ZL.ref()
::       [_d] - ZGH.ref()
::   WY: 0/1
::  OLD: \spr_lim/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_dialog:=_a;
_sec_tit:={? var_pres('_b')=type_of('') || _b || '' ?};
_sekcja:={? _sec_tit<>'' || KOMM.sect_beg(_sec_tit) ?};
{? var_pres('_c')=type_of(null()) || _zl:=_c || FUN.wdrerror('Błąd wywołania funkcji spr_lim/zl_limit.'); return(0) ?};
{? var_pres('_d')=type_of(null()) || _zgh:=_d || _zgh:=null() ?};

:: jeżeli nic nie zrobimy, to kasujemy sekcję - np. dla zleceń warsztatowych
_erassec:=0;

:: Sprawdzenie parametru 'Typ zamówienia wewnętrznego do realizacji limitów zleceń'
{? exec('get','#params',500011,2,null())=''
|| KOMM.add('Nie można zakończyć rejestrowania zapotrzebowań — brak ustawionego parametru %1.'@['500011'],81);
   _ok:=0
?};

:: Sprawdzamy, czy zlecenie złożone ma podzlecenia
{? (ZL.RODZAJ='Z' | ZL.RODZAJ='N') & ~exec('subzlec_exist','zl_link',ZL.ref())
|| KOMM.add('Nie można zakończyć rejestrowania zapotrzebowań — brak utworzonych zleceń podrzędnych.'@,81);
   _ok:=0
?};

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
||
:: zmienna przechowująca wskazanie do komunikatu 'Dodano zatwierdzenie limitów zlecenia'
   _msg_dod:=0;
   ZLIM.cntx_psh();
   {? _ok & 'WP'*ZL.TYP().WP
   ||
      VAR_DEL.delete('__matakt');
      __matakt:=tab_tmp(2
         ,'REF','STRING[16]',''
         ,'NRK','INTEGER',''
         ,'ILR','REAL',''
         ,'ZKP','STRING[16]',''
         ,'ZKN','STRING[16]','');

::    sprawdzamy czy są wogóle jakieś limity
      {? _zgh=null()
      || ZLIM.index('ZN');
         ZLIM.prefix(ZL.ref(),'T');
         _co:=ZL.SYM;
         _czego:='zlecenia'@
      || ZLIM.index('ZGH_KM');
         ZLIM.prefix(_zgh,'T');
         _co:=exec('FindAndGet','#table',ZGH,_zgh,,"NRPRZ",'');
         _czego:='przewodnika'@
      ?};

      {? ~ZLIM.first() & ZL.TYP().WP='P'
      ||
         {? _dialog='N'
         ||
::          Zakończ i generuj
            _choice:=1
         || _choice:=FUN.choice(
               '%1: nie ma wygenerowanych żadnych limitów, czy wygenerować i zakończyć rejestrowanie?'@[_co],,
               '&Zakończ i generuj'@,'Zakończ &bez generowania'@
            )
         ?};

         {? _choice=1
         || _ok:=exec('zlim_gen','zl_limit','T',-1,0,0,0,0,ZL.ref(),_zgh);
            {? _ok
            || KOMM.add('Zakończono proces generowania limitów dla %1 %2.'@[_czego,_co],7)
            ?}
         |? _choice=2
         || _ok:=1
         || _ok:=0
         ?};

         {? _ok=1
         || {? ZLIM.first()
            ||
               {!
               |? {? exec('get','#params',500015,2)='T'
                  || KOMM.add('Automatyczne zakończenie rejestrowania zapotrzebowań przy włączonej opcji kontroli nie jest możliwe.'@,81);
                     _ok:=0
                  |? ZLIM.AKC<>'T' & exec('get','#params',500015,2)='N'
                  || _ok:=exec('ZLIM_akc','zl_limit',2,ZLIM.ref(),0,0,0,,0)
                  ?};
                  ZLIM.next() & _ok>0
               !}
            ?};
            {? _ok=1
            || KOMM.add('Zakończono rejestrowanie zapotrzebowań do %1 %2.'@[_czego,_co],38)
            || KOMM.add('Przerwano rejestrowanie zapotrzebowań do %1 %2.'@[_czego,_co],81)
            ?}
         ?}
      ?};

      {? _ok
       & ( ZLIM.first()
::         | ZL.TYP().WP='P'
         )
      || {? exec('get','#params',500015,2)='N'
         || _akc:='T';
            {!
            |? {? ZLIM.AKC<>'T'
               || _akc:='N';
                  _ok:=exec('ZLIM_akc','zl_limit',2,ZLIM.ref(),0,0,0,,0)
               ?};
               ZLIM.next() & _ok>0
            !};
            {? _akc='N'
            || KOMM.add('Wykonano funkcję akceptacji dla niezaakceptowanych limitów.'@,38)
            ?};
            _msg_dod:=KOMM.add('Zakończono rejestrowanie zapotrzebowań do %1 %2.'@[_czego,_co],38)
         || {!
            |? {? ZLIM.AKC<>'T' & ZLIM.LIMIT='T'
               || KOMM.add('Automatyczne zakończenie rejestrowania zapotrzebowań przy włączonej opcji kontroli nie jest możliwe.'@,81);
                  _ok:=0
               ?};
               ZLIM.next() & _ok
            !}
         ?}

:: dla nieprodukcyjnych - brak technologii i gdy brak ZLIMow, to kasujemy sekcję
      |? _ok & ZL.TYP().WP<>'P'
      ||
         _erassec:=1
      ?};

      {? _ok
      || {? exec('get','#params',500016,2)='T'
         || _ok:=exec('stan_ktr','zl_limit',_dialog);
            {? _ok=0 & _msg_dod>0 || KOMM.del(_msg_dod) ?};
            {? _ok=0
            || KOMM.add('Nie można zakończyć rejestrowania zapotrzebowań — brak dostępnych stanów surowców.'@,81)
            ?};
            _ok
         || _ok:=1
         ?}
      ?};

:: Surowce nielimitowane
      {? _ok
      || {? _zgh=null()
         || ZLIM.prefix(ZL.ref(),'N')
         || ZLIM.prefix(_zgh,'N')
         ?};
         {? ~ZLIM.first() & ZL.TYP().WP='P'
         ||
            {? _dialog='N'
            ||
::             Zakończ i generuj
               _choice:=1
            || _choice:=FUN.choice(
                  '%1: nie ma wygenerowanych żadnych surowców nielimitowanych, czy wygenerować i zakończyć rejestrowanie?'@[_co],,
                  '&Zakończ i generuj'@,'Zakończ &bez generowania'@
               )
            ?};

            {? _choice=1
            || _ok:=exec('zlim_gen','zl_limit','N',-1,0,0,0,0,ZL.ref(),_zgh);
               {? _ok
               || KOMM.add('Zakończono proces generowania surowców nielimitowanych dla %1 %2.'@[_czego,_co],7)
               ?}
            |? _choice=2
            || _ok:=1
            || _ok:=0
            ?};
            {? _ok=0 & _msg_dod>0 || KOMM.del(_msg_dod) ?}
         ?}
      ?};

      exec('openz','open_tab',ST.ODDZ+'__');
      exec('akt_rezy','rezerwacje',,1);
      VAR_DEL.delete('__matakt')

   ?};
   ZLIM.cntx_pop();
   {? _sekcja
   || KOMM.sect_end();
      {? _erassec || KOMM.del(_sekcja) ?}
   ?}

|| _ok:=0
?};
ZL.cntx_pop();

_ok


\zlim_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JM [7.22]
:: OPIS: generowanie limitów zlecenia
::   WE: [_a] - 'T' limitowane, 'N' nielimitowane, '' lub jak brak parametru to wszystkie
::       [_b] - wyświetlanie komunikatów (domyślnie 1)
::       [_c] - czy sprawdzać zatwierdzenie technologii (domyślnie 1)
::       [_d] - Informować o błędach? (ponowna akceptacja itp) - domyślnie (1)
::       [_e] - Sprawdzać zatwierdzenie limitów (domyślnie 1 -tak)
::       [_f] - Sprawdzać czy limit został sprawdzony (domyślnie 1 -tak)
::       _g - ZL.ref()
::       [_h] - ZGH.ref()
::   WY: 1/0 formuła zakończyła się bez błędów
::----------------------------------------------------------------------------------------------------------------------
_Limit:={? var_pres('_a')=type_of('T') || _a || '' ?};
_param:={? var_pres('_b')=type_of(1) || _b || 1 ?};
_chktx:={? var_pres('_c')=type_of(1) || _c || 1 ?};
_err:={? var_pres('_d')=type_of(1) || _d || 1 ?};
_chklim:={? var_pres('_e')=type_of(1) || _e || 1 ?};
_chkspr:={? var_pres('_f')=type_of(1) || _f || 1 ?};
{? var_pres('_g')=type_of(null()) || _zl:=_g || FUN.wdrerror('Błędne wywołanie formuły zlim_gen/zl_limit.'); return(0) ?};
_zgh:={? var_pres('_h')=type_of(null()) || _h || null() ?};

_ok:=1;
{? _param<=0
 | FUN.ask('Czy wygenerować listę '+{? _Limit='T' || 'limitów'
                                    |? _Limit='N' || 'surowców nielimitowanych'
                                    |? _Limit=''  || 'limitów i surowców nielimitowanych'
                                                  || ''
                                    ?}+'?')
|| _ok:=exec('zlim_gen_main','zl_limit',_Limit,_zl,,_param,_chktx,_err,_chklim,_chkspr,,,_zgh)
?};
_ok


\stan_ktr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Kontrola stanów w magazynach, czy starczy na wybraną serię.
::       Sprawdzenie surowców w ramach bieżącej dziedziny ZLIM
::       przetwarzane wszystkie pozycje, które nie są jeszcze zatwierdzone.
::       Od wersji 8.10 nie sprawdza odpadów.
::   WE: _a - ('T' - z dialogami, 'N' - bez dialogów)
::   WY: 0 - nie starczy, nie można zatwierdzać
::       1 - Można dodawać zatwierdzenie
::----------------------------------------------------------------------------------------------------------------------
_brak:='N';
_zatw:=0;
_dostil:=ZL.IL;
_wyn:='';
{? var_pres('_a')=type_of('') || _dialog:=_a  || _dialog:='T' ?};
exec('utwtab','zl_limit',1);
_maski:=0;
{? var_pres('__MASKI')<=0
|| __MASKI:=ZLIM.names();
   _maski:=1
?};
exec('openmask','zl_common',ZL.ref());
ZLIM.cntx_psh();
_licznik:=0;
{? ZL.GENLIM='N'
|| ZLIM.index('ZN')
|| ZLIM.index('ZPN')
?};
ZLIM.prefix(ZL.ref());
{? ZLIM.first()
|| {!
   |? _il:=0;
      {? ZLIM.SO='S' & ZLIM.KOR=0
      ||
         {? ZLIM.AKC='T'
         ||
            _result:=exec('stan_ktr_one','zl_limit',ZLIM.KTM,exec('sum_il','zl_limit',ZLIM.ref()),1);
            __TAC.blank();
            __TAC.ZLIM:=#ZLIM.ref();
            __TAC.T:=#ZLIM.KTM;
            __TAC.ZAP:=_result[2];
            __TAC.DOST:=_result[3];
            __TAC.BRAK:=_result[4];
            __TAC.TMAT:=ZLIM.RTMAT;
            __TAC.PZ:=(exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"{? GRKTM='G' || TGDFLT().PT || PT ?}",0)=ZLIM.KTM);
            __TAC.ZGP:=#ZLIM.ZGP;
            __TAC.MG:=#ZLIM.MG;
            __TAC.WYD:=#ZLIM.WYD;
            __TAC.add();
            {? _result[4] < 0
            || _brak:='T';
               {? _dostil > _result[8]
               || _dostil:=_result[8]
               ?}
            ?};
            obj_del(_result)
         ?}
      ?};
      ZLIM.next()
   !}
?};

{? __TAC.first()
|| {!
   |? {? __TAC.PZ=0
      || _ktm:='';
         TMAT.cntx_psh();
         {? TMAT.seek(__TAC.TMAT)
         || _ktm:={? TMAT.GRKTM='G' || TMAT.TGDFLT().PT().KTM || TMAT.PT().KTM ?}
         ?};
         TMAT.cntx_pop();
         __TAC.ZAMDO:=_ktm;
         __TAC.put()
      ?};
      __TAC.next()
   !}
?};

{? _brak='T'
|| {? _dialog='N'
   || KOMM.add('Niewystarczająca ilość materiału wśród surowców oraz zamienników.'@,7)
   || {? FUN.ask(
            'Nie można automatycznie zakończyć redagowania limitów, brak surowców.\n'+
            {? _dostil>0 || 'Można zmniejszyć ilość produktu na: '+ form(_dostil,,2) +'\n' || '' ?}+
            'Czy pokazać wykaz zapotrzebowania surowców?'
         )
      || _zatw:=(__TAC.select()>0)
      ?}
   ?}
|| _zatw:=1
?};

obj_del(__TAC);
&__TNDX;
&__TNDX1;
ZLIM.cntx_pop();
{? _maski
|| obj_del(__MASKI)
?};
_zatw


\zmien_widok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zmienia widok limitów dla zlecenia złożonego
::----------------------------------------------------------------------------------------------------------------------
_ZLIMp:=params_get().env.env_limit.ZLIMp;

_tab:=tab_tmp(1,'VIEW','STRING[1]','Sposób wyświetlania'
               ,'OPEN','STRING[1]','Auto rozwijanie');

_tab.blank();
_p8503:=exec('get','#params',8503,2,OPERATOR.USER);
_p8504:=exec('get','#params',8504,2,OPERATOR.USER);
_tab.VIEW:=_p8503;
_tab.OPEN:=_p8504;

_edit:=_tab.mk_edit(FUN.TYT,0,'#zlimvieopt');
_zl:=_ZLIMp.ZL;

_rodzaj:=exec('FindAndGet','#table',ZL,_zl,,"RODZAJ");
{? _rodzaj='Z'
|| _tab.win_esep(_edit,'Sposób wyświetlania limitów zlecenia złożonego'@);
   _tab.win_efld(_edit,_tab,'VIEW',,,100,0,,''@,1,,'radio-buttons',,'Surowce ► Zlecenia'@,"'S'",'Zlecenia ► Surowce'@,"'Z'")
?};
_tab.win_esep(_edit,'Opcje widoku'@);
_tab.win_efld(_edit,_tab,'OPEN',,,100,,,'Automatyczne rozwijanie drzewa'@,,,'check-box',,"'T'","'N'");
exec('ok_esc','#window',_tab,_edit);

_tab.win_edit(_edit);

_valid:="";

{? _tab.edit(_valid)
|| exec('set','#params',8503,_tab.VIEW,OPERATOR.USER);
   exec('set','#params',8504,_tab.OPEN,OPERATOR.USER);
   params_get().env.env_limit.p8504:=_tab.OPEN;

   {? _p8503<>_tab.VIEW
   || exec('__ZLIM_datapump','zl_limit',_ZLIMp);
      _ZLIMp.ZLIM.first()
   ?}
?};
~~


\zmien_zgp_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Akceptacja przepięcia limitów
::  OLD: \zmien_zgp_akc/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=cur_tab();

_zgpsrc:=ZGP.ref();

_lipa1:=_lipa2:=0;
_loop:=_Tab.first();
{!
|? _loop
|!
   _lipa1:=_Tab.ZGP_PO=0;
   _lipa2:=_Tab.ZKP_ZL='T';
   _loop:=_lipa1=0 & _lipa2=0 & _Tab.next()
!};

{? _lipa1 || FUN.info('Zmień pozycję przewodnika dla wszystkich pozycji.'@); return() ?};
{? _lipa2 || FUN.info('Usuń powiązanie pozycji zamówień wewnętrznych ze zleceniem.'@); return() ?};

ZGP.cntx_psh();

_loop:=_Tab.first();
{!
|? _loop
|!
   ZLIM.cntx_psh();
   _zgp_des:=exec('FindAndGet','#table',ZGP,_Tab.ZGPO_REF);
   ZLIM.prefix();
   {? ZLIM.seek(exec('FindAndGet','#table','ZLIM',_Tab.REF))
   || ZLIM.index('ZGP_KM');
::    przepiecie limitu
      ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,0,ZLIM.KTM);
      {? ZLIM.first()
      || ZLIM.prefix();
         ZLIM.ZGP:=_zgp_des;
         ZLIM.put();
::       przepięcie korekt limitu
         ZLIM.prefix(_zgpsrc,ZLIM.LIMIT,ZLIM.NR,ZLIM.KTM);
         _loop:=ZLIM.first();
         {!
         |? _loop
         |!
            ZLIM.cntx_psh();
            ZLIM.prefix();
            ZLIM.ZGP:=_zgp_des;
            ZLIM.put();
            ZLIM.cntx_pop();
            _loop:=ZLIM.first()
         !}
      ?}
   ?};
   ZLIM.cntx_pop();
   _loop:=_Tab.next()
!};

ZGP.cntx_pop();

sel_exit()


\zmien_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Przepięcie limitów
::  OLD: \zmien_zgp/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_czysc:="VAR_DEL.delete('__zgpsrc')";
_czysc();

__zgpsrc:='';
_zgp_des:='';
_Tab:=cur_tab();
_Sel:=_Tab.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#_Tab.ref(); _Sel.add() ?};

_nrzlp:=0;
_sameZgp:=1;
_loop:=_Sel.first();
{!
|? _loop
|!
   _loop:=
      {? _Tab.seek(_Sel.REF,)
      || {? __zgpsrc*_Tab.ZGP_REF=0
         || __zgpsrc+=$_Tab.ZGP_REF
         ?};
         {? _nrzlp=null()
         || _nrzlp:=exec('FindAndGet','#table',ZGP,_Tab.ZGP_REF,,"ZGP.NRZLP",null())
         ?};
         _sameZgp:=_nrzlp=exec('FindAndGet','#table',ZGP,_Tab.ZGP_REF,,"ZGP.NRZLP",null());
         _sameZgp & _Sel.next()
      || _Sel.del()
      ?}
!};

{? _sameZgp=0 || FUN.info('Zaznacz limity tego samego zlecenia.'@); _czysc(); return(0) ?};

{? ~_Sel.first() || FUN.info('Zmiana pozycji przewodnika niedostępna dla zaznaczonych pozycji.'@); _czysc(); return(0) ?};

_nrzlp:=exec('FindAndGet','#table',ZGP,_Tab.ZGP_REF,,"ZGP.NRZLP",null());

{? _nrzlp=null() || _czysc(); return(0) ?};

ZGP.cntx_psh();
ZGP.index('PNRPP');
ZGP.prefix();
ZGP.f_clear();

_In:=ZGP.sel_aget(); {? ~_In.first() || _In.REF:=#ZGP.ref(); _In.add() ?};
_in:='';
_loop:=_In.first();
{!
|? _loop
|!
   {? ZGP.seek(_In.REF,)
   || _in+={? _in='' || '' || ',' ?}+'\''+$ZGP.ref()+'\''
   ?};
   _loop:=_In.next()
!};

_sort:='NRPRZ,NRP';
_where:='ZGP.NRZLP=:_a and ZGP.TPZ=\'N\' and ZGP.REFERENCE not in (:_b)';
ZGP.f_set(_sort,,_where,_nrzlp,_in);

_wer:=ZGP.mk_sel('Pozycje przewodnika'@,'P',,'fefashdfwekqoek',,,,,'U');
ZGP.win_fld(_wer,,'NRP',,,5,,,'Poz.'@);
ZGP.win_fld(_wer,,'OPIS',,,30,,,'Opis'@);
_fb:="
   {? __zgpsrc*($ZGP.ref())
   || FUN.info('Wskaż inną pozycję przewodnika.'@); 0
   || sel_exit(); 1
   ?}
";
ZGP.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,,,,'W');

ZGP.win_sel(_wer);

{? ZGP.select()
|| _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? _Tab.seek(_Sel.REF,)
      || _Tab.ZGP_PO:=ZGP.NRP;
         _Tab.ZGPO_REF:=$ZGP.ref();
         _Tab.ZGP_AFT:=exec('record','#to_string',ZGP.ref(),1);
         _Tab.put();
::       zmiana na pozycjach powiazanych
         _nr:={? _Tab.KOR2 || _Tab.KOR2 || _Tab.NR ?};
         _Tab.cntx_psh();
         _loop:=_Tab.first();
         {!
         |? _loop
         |!
            {? _Tab.NR=_nr | _Tab.KOR2=_nr
            || _Tab.ZGP_PO:=ZGP.NRP;
               _Tab.ZGPO_REF:=$ZGP.ref();
               _Tab.put()
            ?};
            _loop:=_Tab.next()
         !};
         _Tab.cntx_pop()
      ?};
      _loop:=_Sel.next()
   !};
   _Tab.sel_adel()
?};

ZGP.f_clear();
ZGP.cntx_pop();
_czysc();
0


\zlim2zmian_zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Lista limitów do zmiany ZGP
::   WE: [_a] - czy pokazywać wszystkie limity (1), domyślnie - tylko powiązane (0)
::  OLD: \zlim2zmian_zgp/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _all:=_a || _all:=0 ?};

_Sel:=ZGP.sel_aget(); {? ~_Sel.first() || _Sel.REF:=#ZGP.ref; _Sel.add() ?};

_result:=~~;

_Tab:=tab_tmp(3
   ,'LIMIT'    ,'STRING[1]'   ,'Limitowany'
   ,'ZL'       ,'STRING[20]'  ,'Zlecenie'
   ,'NR'       ,'INTEGER'     ,'Numer'
   ,'KTM'      ,'STRING[50]'  ,'Indeks'
   ,'N'        ,'STRING[100]' ,'Nazwa'
   ,'ZGP_BEF'  ,'STRING[150]' ,'Pozycja przewodnika'
   ,'ZGP_AFT'  ,'STRING[150]' ,'Pozycja przewodnika po'
   ,'ZGP'      ,'INTEGER'     ,'Pozycja przewodnika'
   ,'ZGP_PO'   ,'INTEGER'     ,'Pozycja przewodnika po'
   ,'RW_ZW'    ,'STRING[1]'   ,'Są pobrania zwroty'
   ,'ZKP_REA'  ,'STRING[1]'   ,'Są realizacje zam. wew.'
   ,'ZKP_ZL'   ,'STRING[1]'   ,'Są zlec. do zam. wew.'
   ,'KOR2'     ,'INTEGER'     ,'Numer korygowanej pozycji poprzez zamiennik'
   ,'ZGP_REF'  ,'STRING[16]'  ,'$ZGP.ref()'
   ,'ZGPO_REF' ,'STRING[16]'  ,'$ZGP.ref()'
   ,'REF'      ,'STRING[16]'  ,'$ZLIM.ref()'
   ,'ZM'       ,'STRING[16]'  ,'Potrzebne do akcji na spację');
_ndx:=_Tab.ndx_tmp(,,'NR',,);

ZGP.cntx_psh();
ZLIM.cntx_psh();
ZLIM.index('ZGP_M');
_loop:=_Sel.first();
{!
|? _loop
|!
   {? ZGP.seek(_Sel.REF,)
   || ZLIM.prefix(ZGP.ref());
      _loop:=ZLIM.first();
      {!
      |? _loop
      |!
         {? ZLIM.KOR=0
         || _Tab.RW_ZW:={? exec('jestZlim2Dk','zl_limit') || 'T' || 'N' ?};
            _Tab.ZKP_REA:={? exec('jestZlim2ZkRea','zl_limit') || 'T' || 'N' ?};
            _Tab.ZKP_ZL:={? exec('jestZlim2ZkZl','zl_limit') || 'T' || 'N' ?};
            {? _all | _Tab.RW_ZW='T' | _Tab.ZKP_REA='T' | _Tab.ZKP_ZL='T'
            || _Tab.LIMIT:=ZLIM.LIMIT;
               _Tab.ZL:=ZLIM.ZLEC().SYM;
               _Tab.KTM:=ZLIM.KTM().KTM;
               _Tab.N:=ZLIM.KTM().N;
               _Tab.ZGP:=ZGP.NRP;
               _Tab.ZGP_BEF:=exec('record','#to_string',ZGP.ref(),1);
               _Tab.NR:=ZLIM.NR;
               _Tab.KOR2:=ZLIM.KOR2;
               _Tab.ZGP_REF:=$ZGP.ref();
               _Tab.REF:=$ZLIM.ref();
               _Tab.add()
            ?}
         ?};
         _loop:=ZLIM.next()
      !}
   ?};
   _loop:=_Sel.next()
!};
_loop:=_Tab.first();
{!
|? _loop
|!
   {? _Tab.KOR2
   || _Tab.cntx_psh();
      _Tab.index(_ndx);
      {? ~_Tab.find_key(ZLIM.KOR2)
      || ZLIM.cntx_psh();
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(exec('FindAndGet','#table',ZGP,_Tab.ZGP_REF),_Tab.LIMIT,_Tab.KOR2);
         {? ZLIM.first()
         || _Tab.RW_ZW:='N';
            _Tab.ZKP_REA:='N';
            _Tab.ZKP_ZL:='N';
            _Tab.LIMIT:=ZLIM.LIMIT;
            _Tab.ZL:=ZLIM.ZLEC().SYM;
            _Tab.KTM:=ZLIM.KTM().KTM;
            _Tab.N:=ZLIM.KTM().N;
            _Tab.NR:=ZLIM.NR;
            _Tab.KOR2:=ZLIM.KOR2;
            _Tab.REF:=$ZLIM.ref();
            _Tab.add()
         ?};
         ZLIM.cntx_pop()
      ?};
      _Tab.cntx_pop()
   ?};
   _loop:=_Tab.next()
!};

{? _Tab.first()
||
   _wer:=_Tab.mk_sel('Limity'@,,,'#hgjvvbnnnny',,,,,'U');
   _name:='Limitowany?'@;
   _Tab.win_fld(_wer,,'LIMIT',,,10,,,_name,,_name,2,,"\'T\'","\'N\'");
   _name:='Zlecenie'@;
   _Tab.win_fld(_wer,,'ZL',,,20,,,_name,,_name);
   _name:='Nr'@;
   _Tab.win_fld(_wer,,'NR',,,4,,,_name,,_name);
   _name:='Korekta'@;
   _Tab.win_fld(_wer,,'KOR2',,,4,,,_name,,_name);
   _name:='Indeks'@;
   _Tab.win_fld(_wer,,'KTM',,,20,,,_name,,_name);
   _name:='Nazwa'@;
   _Tab.win_fld(_wer,,'N',,,30,,,_name,,_name);
   _name:='Dokumenty?'@;
   _Tab.win_fld(_wer,,'RW_ZW',,,10,,,_name,,_name,2,,"\'T\'","\'N\'");
   _name:='Ralizacje zamówienia wewnętrznego?'@;
   _Tab.win_fld(_wer,,'ZKP_REA',,,-15,,,_name,,_name,2,,"\'T\'","\'N\'");
   _name:='Zlecenia do zamówień wewnętrznych?'@;
   _Tab.win_fld(_wer,,'ZKP_ZL',,,-15,,,_name,,_name,2,,"\'T\'","\'N\'");
   _name:='Aktualna pozycja przewodnika'@;
   _Tab.win_fld(_wer,,'ZGP_BEF',,,-25,,,_name,,_name);
   _name:='Nowa pozycja przewodnika'@;
   _Tab.win_fld(_wer,,'ZGP_AFT',,,-25,,,_name,,_name);
   _fb:="params_exec('zmien_zgp_akc','zl_limit')";           _Tab.win_act(_wer,,'Formuła','Akceptuj'@@,,,_fb,,,,,,'A');

   _Tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Akceptuj'@],'menu:A');
   _fb:="params_exec('zmien_zgp','zl_limit')";               _Tab.win_act(_wer,,'Formuła','Zmień &przewodnik'@@,,,_fb,,1,1,_fb,,'P');
   _fb:="params_exec('zl4zkp4zlim','zl_limit')";             _Tab.win_act(_wer,,'Formuła','Zlecenia'@@,,,_fb,,,,,,'Z');
   _fb:="params_exec('__ZLIM_bdisp','zl_limit',cur_tab())";  _Tab.win_act(_wer,,'Wyświetl',,,,_fb);
   _fb:=""; _Tab.win_act(_wer,,'Rekord',,,,_fb);

   _env:=obj_new( 'WER'
                  ,'TAB'
                  );
   _env.WER:=_wer;
   _env.TAB:=_Tab;

   params_set('env_zmien',_env);

   _far:="params_exec('zmien_zgp_act','zl_limit',cur_tab())";

   _grp:=_Tab.grp_make('Limity'@,"",'#ermfdmcqp331');
   _Tab.grp_sel(_grp,,_wer,,_far,,,,,,,,'maximized');

   _Tab.index(_ndx);
   _Tab.win_sel(_grp);
   _result:=_Tab.select()
?};
ZLIM.cntx_pop();
ZGP.cntx_pop();
_result


\zmien_zgp_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Przepięcie limitów - wygaszenie akcji
::  OLD: \zmien_zgp_act/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_Tab:=cur_tab();
_env:=params_get().env_zmien;
_wer:=_Tab.win_sel(_env.WER);

ZLIM.seek(_Tab.REF);

{? _Tab.ZKP_ZL='T'
|| _Tab.actions(_wer,'',,1)
|| _Tab.actions(_wer,'Z',,1)
?}


\zl4zkp4zlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zlecenia produkcyjne pozycji zamówienia wewnętrznego związanego z limitem
::----------------------------------------------------------------------------------------------------------------------
_Tab:=cur_tab();

ZLIM.cntx_psh();
ZLIM.prefix();
{? ZLIM.seek(exec('FindAndGet','#table',ZLIM,_Tab.REF))
|| _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
      ZLIM.ZLEC,exec('GetZLIM_WYD','zl_limit'),0,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
   );
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',_zk_n,0);
   {? _zk_p
   || ZK_P.cntx_psh();
      ZK_P.use(ref_name(_zk_p));
      ZK_P.prefix();
      {? ZK_P.seek(_zk_p)
      || exec('zk_p_zl','zl_limit',0);
         _Tab.ZKP_ZL:={? exec('jestZlim2ZkZl','zl_limit') || 'T' || 'N' ?};
         _Tab.put()
      ?};
      ZK_P.cntx_pop()
   ?}
?};

ZLIM.cntx_pop()


\zk_p_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: lista zleceń do wybranej pozycji zamówienia
::       wołane od strony limitu i ustawionego ZK_P
::  OLD: \zk_p_zl/produkt.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZK_P.M().RODZ='U'
|| FUN.info('Dla usług nie można wystawiać zleceń.'@); return()
?};

{? ~(ZK_P.M().R='W' | ZK_P.M().R='P')
|| FUN.info('Zlecenia można wystawiać tylko dla wyrobów lub półproduktów.'@); return()
?};

:: teraz przygotujemy listę typów
::_typydok:=exec('get','#params',500701,2,null());
::{? _typydok=''
::|| FUN.info(
::      'Brak zdefiniowanych typów dokumentów raportujących produkcję.\n'
::      'Należy uzupełnić parametr aplikacyjny %1.'@['500701']
::   );
::   return()
::?};

ZAKR.ZTP_WP:='P';
ZLZAM.index('ZMZL');
ZLZAM.prefix($ZK_P.ref());
_il:=_ilwyk:=0;
{? ZLZAM.first()
|| {!
   |? _il+=ZLZAM.ILZL;
      _ilwyk+=ZLZAM.ZL().ILWYK;
      ZLZAM.next()
   !}
?};
_wer:=ZLZAM.mk_sel('Zlecenia do pozycji zamówienia'@,'P',,'zlzampoz',20,10,10);
ZLZAM.win_fld(_wer,VAR,'TYMCZAS',,,10,,,'Stan'@);
ZLZAM.win_fld(_wer,VAR,'STRING',,,15,,,'Symbol'@);
ZLZAM.win_fld(_wer,VAR,'STRING2',,,37,,,'Opis'@);
ZLZAM.win_fld(_wer,VAR,'DATE',,,-10,,,'Termin realizacji'@);
ZLZAM.win_fld(_wer,,'ZL','STAN',,2,,,'Stan'@);
ZLZAM.win_fld(_wer,,'ILZL',,,10,2,,'Zlecono'@);
ZLZAM.win_fld(_wer,,'ZL','ILWYK',,10,2,,'Wykonano'@);
_fb:="
   {? FUN.ask('Usunąć powiązanie pozycji zamówienia ze zleceniem?'@)
   || _ilpoz:=ZLZAM.ILPOZ;
      _ilzl:=ZLZAM.ILZL;
      ZLZAM.cntx_psh();
      ZLZAM.index('ZMZL0');
      ZLZAM.prefix('',ZLZAM.ZL);
      {? ZLZAM.first()
      || ZLZAM.ILPOZ+=_ilpoz;
         ZLZAM.ILZL+=_ilzl;
         ZLZAM.put()
      || exec('zlzam2Rez','zamsiw_wspolne',ZLZAM.ZAMPOZ,-1,0);
         ZLZAM.ZAMPOZ:=''
      ?};
      ZLZAM.put();
      ZLZAM.cntx_pop()
   ?}
";
ZLZAM.win_act(_wer,,'Formuła','Usuń powiązanie'@@,,,_fb,,0,,,,'U');
ZLZAM.win_act(_wer,,'Kolejność');
ZLZAM.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','#ZL#03','#ZL#05')",,,,,,'L');
ZLZAM.win_act(_wer,,'Rekord',,,,"
   {? ZLZAM.ZL=null()
   || VAR.A_ZLEC:=null();
      VAR.TYMCZAS:='<>';
      VAR.STRING:='<>';
      VAR.STRING2:='<>';
      VAR.DATE:=date(0,0,0)
   || VAR.A_ZLEC:=ZLZAM.ZL;
      VAR.TYMCZAS:='Zlecono'@;
      VAR.STRING:=ZLZAM.ZL().SYM;
      VAR.STRING2:=ZLZAM.ZL().OPIS;
      VAR.DATE:=ZL.DTR
   ?};
   ~~
",,0);
ZLZAM.win_act(_wer,,'Wyświetl',,,,"
   {? ZLZAM.ZL<>null()
   || exec('zl_display','zl_head')
   ?};
   ~~
");
_fi:="exec('icon_stan','zl_head')";
ZLZAM.win_fml(_wer,,'ZL','STAN','ICON_BEFORE',_fi);
ZLZAM.win_sel(_wer);
ZLZAM.first();
ZLZAM.select();
~~


\korekta_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Dla podanej korekty limitu sprawdza czy za nią znajduje się jakaś następna zaakceptowana korekta
::   WE: [_a] - ZLIM.ref lub bieżący rekord
::   WY: 0 - brak korekty za tą korektą
::       1 - istnieje koresta za tą korektą
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZLIM.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

ZLIM.cntx_psh();
{? _ref<>null()
|| ZLIM.clear();
   {? ZLIM.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? ZLIM.KOR>0
   ||
      _uid_kor:=ZLIM.UID;

      ZLIM.cntx_psh();
      ZLIM.index('ZGP_NM');
      ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.KOR);
      {? ZLIM.first()
      ||
::       Stoję na limicie korygowanym, pętlę po jego wszystkich korektach i badam czy jest taka
::       która ma większy identyfikator
         ZLIM.index('ZGP_KM');
         ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.NR);
         {? ZLIM.first()
         || {!
            |? {? ZLIM.AKC='T' & ZLIM.UID>_uid_kor
               || _result:=1
               ?};
               ZLIM.next() & _result=0
            !}
         ?}
      ?};
      ZLIM.cntx_pop()
   ?};
   ~~
?};
ZLIM.cntx_pop();
_result


\zlim_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetl pól tabeli ZLIM: STARTD, STARTT
::  OLD: \zlim_fld_bd/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD'
||
   {? ZLIM.STARTD=date(0,0,0)
   || 1
   |? ZLIM.STARTD<date()
   || exec('flddisp','color','ZLIM#STARTD#01')
   || 1
   ?}
|? cur_afld()='STARTT'
||
   {? ZLIM.STARTD=date(0,0,0)
   || 1
   |? (ZLIM.STARTD<date() | ZLIM.STARTD=date() & ZLIM.STARTT<time())
   || exec('flddisp','color','ZLIM#STARTT#01')
   || 1
   ?}
|? cur_afld()='MODE_DST'
||
   {? ZLIM.ZLEC().TYP().WP='W'
   || 0
   || 1
   ?}
|? cur_afld()='PODZL'
||
   {? ((ZLIM.LIMIT='T' & ZLIM.SO='S') | exec('FindAndGet','#table',ZL,ZLIM.ZLEC,,"ZL.TREE_TYP='P'",0))
      & cur_kwin<>'e_disp'
   || 0
   || 1
   ?}
||
   1
?}


\zlim_kor_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [gc] [12.46]
:: OPIS: Historia korekt limitu\nielimitu
::   WE: _a - $ZLIM.ref()
::----------------------------------------------------------------------------------------------------------------------
ZLIMKOR.clear();
ZLIMKOR.prefix(_a);
ZLIMKOR.select();
''


\zlim_kor_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MagLak] [17.00]
:: OPIS: Usunięcie historii korekt limitu
::   WE: _a - $ZLIM.ref()
::----------------------------------------------------------------------------------------------------------------------
ZLIMKOR.clear();
ZLIMKOR.index('ZLIM');
ZLIMKOR.prefix(_a);
{? ZLIMKOR.first()
|| {!
   |? ZLIMKOR.del()
   !}
?};
''


\env_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Buduje środowisko generatora dokumentów rozliczających
::   WE: _a - 'NLI' - rozliczanie surowców nielimitowanych do RP,
::            'ODP' - rozliczanie odpadów do RP,
::            'ZWR' - rozliczenie surowców (zwroty),
::            'NLI_ZLGD' - rozliczenie surowców nielimitowanych do robocizny na zleceniu,
::            'NLI_ZL' - rozliczanie surowców nielimitowanych do zlecenia (bez powiązania),
::            'ODP_ZL' - rozliczanie  odpadów do zlecenia (bez powiązania),
::            'NLI_GROP' - rozliczenie surowców nielimitowanych do grup operacji (robocizna)
::            'ODP_GROP' - rozliczenie odpadów do grup operacji (robocizna)
::            'ZWR_GROP' - rozliczenie surowców (zwroty) do grup operacji
::            'NLI_ZGROP' - rozliczenie surowców nielimitowanych do grup operacji (bez powiązania)
::            'ODP_ZGROP' - rozliczenie odpadów do grup operacji (bez powiązania)
::----------------------------------------------------------------------------------------------------------------------
{? _a='NLI' | _a='ODP' | _a='ZWR' | _a='NLI_ZLGD' | _a='NLI_GROP' | _a='ZWR_GROP' | _a='ODP_GROP' |
   _a='NLI_ZL' | _a='ODP_ZL' | _a='NLI_ZGROP' | _a='ODP_ZGROP'
|| _gen:=_a
|| FUN.wdrerror('Błędny parametr wywołania formuły \\env_gen/zl_limit.');
   return()
?};

_env:=obj_new('DK','SUR','ZAM','POB','GEN','B_PREL','ZL','ZLIM');
_env.DK:=obj_new('TAB','WER','NDXSYM','NDXZL','NDXREF','NDXZLGD');
_env.SUR:=obj_new('TAB','NDXLIM','NDXMAG','NDXSCEAN','NDXKODPAL','NDXSET','WER','RED');
_env.ZAM:=obj_new('TAB','WER','RED','NDXKTM','NDXMREF');
_env.POB:=obj_new('TAB','WER','RED','NDXSYM','NDXSYMGR','NDXREFDK','NDXDOSTR','NDXDOSTM');
_env.GEN:=_gen;
_env.B_PREL:=null();

:: Tabela z listą przetwarzanych surowców (konkretna lista ZLIMów)
_env.ZLIM:=tab_tmp(,'REF','STRING[16]','$ZLIM.ref()','MREF','INTEGER','#M.ref()');

_dk:=tab_tmp(4,
   'SYMBOL','STRING[30]','Symbol dokumentu/przewodnika',
   'REF','STRING[16]','$ND.ref()/$ZLGD.ref()',
   'MREF','STRING[16]','$M.ref()',
   'ZLEC','STRING[25]','Symbol zlecenia[20], Kod grupy operacji[10]',
   'POZ','STRING[20]','Nr. pozycji',
   'REFDK','STRING[16]','SQLref pozycji dokumentu',
   'M','STRING[50]','Materiał',
   'JM','STRING[10]','jm',
   'IL','REAL','Ilość',
   'ILDOK','REAL','Ilość zaraportowana',
   'ILWYK','REAL','Ilość zarejestrowana',
   'O','STRING[255]','Opis dokumentu',
   'NDNAME','STRING[8]','name zlecenia',
   'DT','DATE','Data',
   'WYD','STRING[20]','Wydział',
   'AKC','STRING[1]','Akc',
   'WYDZ','INTEGER','Ref wydziału',
   'ZL_REF','STRING[16]','$ZL.ref()',
   'ZGH_REF','STRING[16]','$ZGH.ref()',
   'PRAC','STRING[50]','Nazwa pracownika/brygady',
   'OPER','STRING[80]','Operacja',
   'ZPARN','STRING[16]','$ZPARN.ref()',
   'GROP_REF','STRING[16]','$GROP.ref()'
);
_env.DK.TAB:=_dk;
_env.DK.NDXSYM:=_dk.index('?');
_env.DK.NDXZL:=_dk.ndx_tmp(,,'ZL_REF',,);
_env.DK.NDXREF:=_dk.ndx_tmp(,,'REF',,);
_env.DK.NDXZLGD:=_dk.ndx_tmp(,,'ZLEC',,,'SYMBOL',,,'OPER',,);

{? _gen='NLI'
|| _env.DK.WER:=_dk.mk_sel('Raporty produkcji bez dokumentów rozchodu surowców nielimitowanych (%1)'@[ST.OKR],
      'P',,'#nd_select_s',,,15,,'U')
|? _gen='NLI_ZLGD' | _gen='NLI_GROP' | _gen='ODP_GROP'
|| _env.DK.WER:=_dk.mk_sel('Wykonania produkcji, które czekają na rozliczenie surowców'@,
      'P',,'#nd_select_n',,,15,,'U')
|? _gen='ODP'
|| _env.DK.WER:=_dk.mk_sel('Raporty produkcji bez dokumentów przychodu odpadu/koproduktu (%1)'@[ST.OKR],
      'P',,'#nd_select_o',,,15,,'U')
|? _gen='ZWR_GROP'
|| _env.DK.WER:=_dk.mk_sel('Zlecenia'@,'P',,'#nd_select_g',,,15,,'U')
|? _gen='NLI_ZGROP' | _gen='ODP_ZGROP'
|| _env.DK.WER:=_dk.mk_sel('Grupy operacji'@,'P',,'#nd_select_zg',,,15,,'U')
|| _env.DK.WER:=_dk.mk_sel('Zlecenia'@,'P',,'#nd_select_z',,,15,,'U')
?};

{? _gen='NLI' | _gen='ODP'
|| _dk.win_fld(_env.DK.WER,,'SYMBOL',,,25,,,'Symbol dokumentu'@);
   _dk.win_fld(_env.DK.WER,,'POZ',,,10,,,'Pozycja'@)
?};

{? _gen*'GROP'>0
|| _dk.win_fld(_env.DK.WER,,'ZLEC',,,25,,,'Grupa operacji'@)
|| _dk.win_fld(_env.DK.WER,,'ZLEC',,,25,,,'Zlecenie'@)
?};

{? _gen='NLI_ZLGD'
|| _dk.win_fld(_env.DK.WER,,'SYMBOL',,,25,,,'Symbol przewodnika'@);
   _dk.win_fld(_env.DK.WER,,'OPER',,,25,,,'Operacja'@);
   _dk.win_fld(_env.DK.WER,,'PRAC',,,30,,,'Pracownik/brygada'@)
|? _gen='NLI_GROP' | _gen='ODP_GROP'
|| _dk.win_fld(_env.DK.WER,,'O',,,25,,,'Opis'@);
   _dk.win_fld(_env.DK.WER,,'PRAC',,,30,,,'Pracownik/brygada'@)
|? _gen*'GROP'>0
|| _dk.win_fld(_env.DK.WER,,'O',,,25,,,'Opis'@)
?};

{? _gen*'GROP'=0
|| _dk.win_fld(_env.DK.WER,,'M',,,25,,,'Indeks produktu'@)
?};

_dk.win_fld(_env.DK.WER,,'IL',,,12,ST.DOKL,,'Ilość'@);
{? _gen='ZWR'
|| _dk.win_fld(_env.DK.WER,,'ILDOK',,,12,ST.DOKL,,'Ilość zaraportowana'@,,'Ilość na dokumentach raportujących'@);
   _dk.win_fld(_env.DK.WER,,'ILWYK',,,12,ST.DOKL,,'Ilość zarejestrowana'@)
|? _gen='ZWR_GROP'
|| _dk.win_fld(_env.DK.WER,,'ILWYK',,,12,ST.DOKL,,'Ilość zarejestrowana'@)
?};
{? _gen*'GROP'=0
|| _dk.win_fld(_env.DK.WER,,'JM',,,5,,,'jm'@)
?};

_dk.win_fld(_env.DK.WER,,'DT',,,10,,,'Data'@);
_dk.win_act(_env.DK.WER,0,'Formuła','Utwórz dokumenty'@@,,'Utworzenie dokumentów rozliczających'@,,
   "params_exec('action_ra_generate','zl_nlimit')",1,1,
   "params_exec('action_ra_generate_group_before','zl_nlimit')",
   "params_exec('action_ra_generate_group_after','zl_nlimit')",'U');
_dk.win_act(_env.DK.WER,,'Rekord',,,,
   "{? cur_tab(1,1).AKC='T' || exec('rekprzed','color','__TABDK#01#01') || '' ?}",
   "{? cur_tab(1,1).ILOSC>=0 || 1 || FUN.info('Ilość musi być większa od zera'@) ?}");
{? _gen*'ODP'>0
|| _dk.win_act(_env.DK.WER,0,'Formuła','Legenda'@@,,,,"exec('legenda','color','__TABDK#01','__TABDK#02')",,,,,'L')
|| _dk.win_act(_env.DK.WER,0,'Formuła','Legenda'@@,,,,"exec('legenda','color','__TABDK#01')",,,,,'L')
?};
_dk.win_btn(_env.DK.WER,'text=%1'['Utwórz dokumenty'@],'menu:U');
{? _gen*'ODP'>0
|| _fi:="
      _result:=exec('pusta','#icon');
      _env_gen:=params_get().env_gen;
      _dk:=_env_gen.DK.TAB;
      _sur:=_env_gen.SUR.TAB;
      _sur.cntx_psh();
      _sur.index(_env_gen.SUR.NDXSET);
      _sur.prefix(0,_dk.ref());
      {? _sur.size()>0
      || _result:='xwin16.png:15'
      ?};
      _sur.cntx_pop();
      _result
   ";
   _dk.win_fml(_env.DK.WER,,{? _gen='ODP' || 'SYMBOL' || 'ZLEC' ?},,'ICON_BEFORE',_fi)
?};
_dk.win_sel(_env.DK.WER);

_sur:=tab_tmp(2,
   'REFDK','INTEGER','#_dk.ref()',
   'ZLIM','STRING[16]','Ref SQL limitu',
   'MAT','INTEGER','#M.ref()',
   'KTM','STRING[50]','Indeks materiału',
   'NAZ','STRING[100]','Nazwa materiału',
   'ILOSC','REAL','Ilość',
   'JM','STRING[10]','jm',
   'MAG','INTEGER','Magazyn (#MG.ref())',
   'MAGSYM','STRING[8]','Symbol magazynu',
   'MAGNAME','STRING[60]','Nazwa magazynu',
   'SYM','STRING[20]','Symbol zlecenia',
   'ZL','INTEGER','Zlecenie (#ZL.ref())',
   'ZL_SYM','STRING[20]','Zlecenie',
   'ZL_REF','STRING[16]','Ref SQL zlecenia',
   'WYD','INTEGER','Wydział (#SLO.ref())',
   'AUTO','STRING[1]','Automatyczny',
   'DK_C','STRING[16]','Ref SQL DK_C',
   'ZLEC','INTEGER','Zlecenie podstawowe (#ZL.ref())',
   'ZLDOD','INTEGER','Zlecenie dodatkowe (#ZL.ref())',
   'ZGP','INTEGER','Pozycja przewodnika (#ZGP.ref())',
   'ZGP_NAME','STRING[30]','Pozycja przewodnika (ZGH.NRPRZ, $ZGP.NRP)',
   'ZGP_OPIS','STRING[60]','Opis pozycji przewodnika',
   'ZGH_IL','REAL','Ilość produktu na przewodniku',
   'RAP_IL','REAL','Ilość produktu zaraportowana',
   'ZPARN','STRING[16]','$ZPARN.ref',
   'PARSYM','STRING[25]','Symbol partii',
   'RSC','STRING[16]','Ref dostawy ($SC.ref)',
   'SCEAN','STRING[128]','Kod identyfikujący dostawę',
   'EANL','STRING[16]','Lokalizacja ($EANL.ref)',
   'REJ_MAT','STRING[1]','Zapis utworzony na podst. rozpiski (REJ_MAT)',
   'CZY_REZ','INTEGER','Czy pozycja posiada dedykowane rezerwacje (nielimity)',
   'M_ATR','STRING[16]','Wzorzec atrybutów dostaw($M_ATR.ref())',
   'ALL_SET','INTEGER','Czy rozpisane wszystkie cechy',
   'WAR01','STRING[25]','Wartość cechy 1',
   'WAR02','STRING[25]','Wartość cechy 2',
   'WAR03','STRING[25]','Wartość cechy 3',
   'WAR04','STRING[25]','Wartość cechy 4',
   'WAR05','STRING[25]','Wartość cechy 5',
   'WAR06','STRING[25]','Wartość cechy 6',
   'WAR07','STRING[25]','Wartość cechy 7',
   'WAR08','STRING[25]','Wartość cechy 8',
   'WAR09','STRING[25]','Wartość cechy 9',
   'WAR10','STRING[25]','Wartość cechy 10',
   'GROP','INTEGER','Grupa operacji (#GROP.ref())',
   'GROP_REF','STRING[16]','Grupa operacji ($GROP.ref())',
   'GROP_KOD','STRING[10]','Kod grupy operacji',
   'GROP_OP','STRING[60]','Opis grupy operacji',
   'GROP_IL','REAL','Ilość uruchomień grupy operacji',
   'ILP','REAL','Pobrano',
   'ILZ','REAL','Zwrócono',
   'ILR','REAL','Pozostało',
   'ILL','REAL','Ilość limitowana',
   'KODPAL','STRING[30]','Kod palety',
   'ZGH_REF','STRING[16]','$ZGH.ref()'
);
_sur.fld_fml('ILOSC','EDIT_FORMAT',"'in_prec='+$VAR.A_T().DOKL");
_sur.fld_fml('ILOSC','DISPLAY_FORMAT',"'out_prec='+{? (2+cur_kwin())='e_' || $VAR.A_T().DOKL || $ST.DOKL ?}");
_formula:="
   exec('wz_constant','#string',(((fld()*exec('separator','zl_limit'))+1)+fld()))+'9!'
";
_sur.fld_fml('ZGP_NAME','PATTERN',_formula);
_formula:="
   _env:=params_get().env_gen;
   _gen:=_env.GEN;
   _dk:=_env.DK.TAB;
   _sur:=_env.SUR.TAB;
   _nrp:=#((fld()*exec('separator','zl_limit'))-fld());
   _zgp:=null();
   ZGP.cntx_psh();
   {? _gen='NLI_ZL' | _gen='ODP_ZL'
   || {? _sur.ZGH_REF<>''
      || ZGP.index('PNRPP');
         _zgh:=exec('FindAndGet','#table',ZGH,_sur.ZGH_REF,,,null);
         ZGP.prefix(_zgh,'N',_zgh,_nrp)
      || ZGP.index('ZLNRP');
         _zl:=exec('FindAndGet','#table',ZL,_dk.ZL_REF,,,null);
         ZGP.prefix(_zl,'N',_nrp)
      ?}
   || ZGP.index('PNRPP');
      _zgh:=exec('FindAndGet','#table',ZGH,_dk.ZGH_REF,,,null);
      ZGP.prefix(_zgh,'N',_zgh,_nrp)
   ?};
   {? ZGP.size()=1
   || ZGP.first();
      _zgp:=ZGP.ref()
   |? ZGP.first()
   || _wer:=ZGP.mk_sel('Wybierz pozycję przewodnika'@,'P',0,'pozycjeprzew',,,10,,'U');
      {? _sur.ZGH_REF='' || ZGP.win_fld(_wer,,'NRZLP','NRPRZ',,,,,'Przewodnik'@) ?};
      ZGP.win_fld(_wer,,'NRP',,,,,,'Lp'@);
      ZGP.win_fld(_wer,,'OPIS',,,,,,'Opis'@);
      ZGP.win_act(_wer,,'Formuła','Wybierz'@@,,,,\"sel_exit()\",1);
      ZGP.win_sel(_wer);
      {? ZGP.select()
      || _zgp:=ZGP.ref()
      ?}
   || FUN.info('Brak pozycji przewodnika nr %1.'@[$_nrp]);
      _nrp:=0
   ?};

   {? _zgp
   || _sur.ZGP:=#_zgp;
      _sur.ZGP_NAME:=ZGP.NRZLP().NRPRZ+' '+exec('separator','zl_limit')+' '+$ZGP.NRP;
      _sur.ZGP_OPIS:=ZGP.OPIS;
      _sur.ZGH_REF:=$ZGP.NRZLP
   ?};
   ZGP.cntx_pop();
   _nrp<>0
";
_sur.fld_fml('ZGP_NAME','AFTER_EDIT',_formula);
_formula:="
   _env:=params_get().env_gen;
   _gen:=_env.GEN;
   _dk:=_env.DK.TAB;
   _sur:=_env.SUR.TAB;
   _zgp:=null();
   ZGP.cntx_psh();
   {? _gen='NLI_ZL' | _gen='ODP_ZL'
   || {? _sur.ZGH_REF<>''
      || ZGP.index('PNRPP');
         ZGP.prefix(exec('FindAndGet','#table',ZGH,_sur.ZGH_REF),'N')
      || ZGP.index('ZLNRPP');
         ZGP.prefix(exec('FindAndGet','#table',ZL,_dk.ZL_REF,,,null),'N')
      ?}
   || ZGP.index('PNRPP');
      ZGP.prefix(exec('FindAndGet','#table',ZGH,_dk.ZGH_REF),'N')
   ?};

   {? ZGP.size()=1
   || ZGP.first();
      _zgp:=ZGP.ref()
   |? ZGP.first()
   || _wer:=ZGP.mk_sel('Wybierz pozycję przewodnika'@,'P',0,'pozycjeprzew',,,10,,'U');
      {? _sur.ZGH_REF='' || ZGP.win_fld(_wer,,'NRZLP','NRPRZ',,,,,'Przewodnik'@) ?};
      ZGP.win_fld(_wer,,'NRP',,,,,,'Lp'@);
      ZGP.win_fld(_wer,,'OPIS',,,,,,'Opis'@);
      ZGP.win_act(_wer,,'Formuła','Wybierz'@@,,,,\"sel_exit()\",1);
      ZGP.win_sel(_wer);

      {? ZGP.select()
      || _zgp:=ZGP.ref()
      ?}
   ?};

   {? _zgp
   || _sur.ZGP:=#_zgp;
      _sur.ZGP_NAME:=ZGP.NRZLP().NRPRZ+' '+exec('separator','zl_limit')+' '+$ZGP.NRP;
      _sur.ZGP_OPIS:=ZGP.OPIS;
      _sur.ZGH_REF:=$ZGP.NRZLP
   ?};
   ZGP.cntx_pop();
   _sur.ZGP_NAME
";
_sur.fld_fml('ZGP_NAME','F3',_formula);

_env.SUR.TAB:=_sur;
_env.SUR.NDXLIM:=_sur.index('?');
_env.SUR.NDXMAG:=_sur.ndx_tmp(,,'REFDK',,,'MAG',,,'SCEAN',,);
_env.SUR.NDXSCEAN:=_sur.ndx_tmp(,,'REFDK',,,'ZLIM',,,'MAG',,,'SCEAN',,,'EANL',,);
_env.SUR.NDXKODPAL:=_sur.ndx_tmp(,,'REFDK',,,'ZLIM',,,'MAG',,,'KODPAL',,,'EANL',,,'RSC',,);
_env.SUR.NDXSET:=_sur.ndx_tmp(,,'ALL_SET',,,'REFDK',,);

{? _gen*'NLI'>0
|| _env.SUR.WER:=_sur.mk_sel('Surowce do pobrania'@,'P',,'#sur_selects',,,15,,'U')
|? _gen*'ODP'>0
|| _env.SUR.WER:=_sur.mk_sel('Odpady/koprodukty do przyjęcia'@,'P',,'#sur_selecto',,,15,,'U')
|| _env.SUR.WER:=_sur.mk_sel('Zwroty surowców do przyjęcia'@,'P',,'#sur_selectz',,,15,,'U')
?};
_sur.win_fld(_env.SUR.WER,,'KTM',,,{? _gen='NLI_ZLGD' || 25 || 20 ?},,1,'Indeks materiału'@);
_sur.win_fld(_env.SUR.WER,,'NAZ',,,{? _gen='NLI_ZLGD' || 45 || 40 ?},,1,'Nazwa'@);
{? _gen*'ZWR'>0
|| _sur.win_fld(_env.SUR.WER,,'ILP',,,12,ST.DOKL,,'Pobrano'@);
   _sur.win_fld(_env.SUR.WER,,'ILZ',,,12,ST.DOKL,,'Zwrócono'@);
   _sur.win_fld(_env.SUR.WER,,'ILR',,,12,ST.DOKL,,'Pozostało'@);
   _sur.win_fld(_env.SUR.WER,,'ILL',,,12,ST.DOKL,,'Ilość limitowana'@)
|? _gen='NLI_ZL' | _gen='NLI_ZGROP'
|| _sur.win_fld(_env.SUR.WER,,'ILL',,,12,ST.DOKL,,'Norma brutto'@);
   _sur.win_fld(_env.SUR.WER,,'ILP',,,12,ST.DOKL,,'Ilość pobrana'@)
?};
_sur.win_fld(_env.SUR.WER,,'ILOSC',,,12,ST.DOKL,,{? _gen*'ZWR'=0 || 'Ilość'@ || 'Ilość zwracana'@ ?});
_sur.win_fld(_env.SUR.WER,,'JM',,,5,,,'jm'@);
_sur.win_fld(_env.SUR.WER,,'MAGSYM',,,8,,1,'Magazyn'@);

{? _gen*'GROP'=0 & _gen<>'ZWR'
|| _sur.win_fld(_env.SUR.WER,,'ZL_SYM',,,15,,1,'Zlecenie'@);
   _sur.win_fld(_env.SUR.WER,,'ZGP_NAME',,,{? _gen='NLI_ZLGD' || 32 || 20 ?},,1,'Pozycja przewodnika'@)
?};
{? _gen*'NLI'>0
|| _sur.win_fld(_env.SUR.WER,@.BEER,'SD',,,15,,1,'Stan dostępny'@);
   _sur.win_act(_env.SUR.WER,,'Rekord',,,,"
      _env:=params_get().env_gen;
      _data:={? date()>date(ST.AR,ST.AM,0)
             || date(ST.AR,ST.AM,0)
             |? date()<date(ST.AR,ST.AM,1)
             || _env.DK.TAB.DT
             || date()
             ?};
      MG.clear();
      M.clear();
      {? M.seek(_env.SUR.TAB.MAT,)
      || VAR.A_T:=M.ref()
      || VAR.A_T:=null()
      ?};
      {? MG.seek(_env.SUR.TAB.MAG,)
      || _mag:=MG.ref()
      || _mag:=null()
      ?};
      _stan:=0;
      {? _env.SUR.TAB.REJ_MAT<>'T'
      || exec('obl_stan','magazyn_stan',VAR.A_T,1,_mag,,,_data);
         _stan:=BEER.SD
      || _tab:=_env.SUR.TAB;
         _ktm:=exec('FindAndGet','#table','M',_tab.MAT,'material',,null());
         _mg:=exec('FindAndGet','#table','MG',_tab.MAG,'mag_s',,null());
         _zlgdref:=exec('FindAndGet','#table',_env.DK.TAB,_tab.REFDK,,\"REF\",'');
         {? _zlgdref*'zlgd'>0
         || _zlgd:=exec('FindAndGet','#table','ZLGD',_zlgdref,,,null())
         || _zlgd:=null()
         ?};
         {? var_pres('_sctab')>100 || obj_del(_sctab) ?};
         {? _tab.RSC<>''
         || {? _tab.KODPAL<>''
            || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),,,,_tab.RSC)
            || _sctab:=exec('sc_tmp_scean','magazyn_stan',null(),_tab.SCEAN)
            ?};
            _sctab.prefix()
         || _sctab:=~~
         ?};
         _stan:=exec('rej_mat_chk_stan','zl_common',_zlgd,_tab.ZLIM,$_mg,_tab.ZL,_tab.RSC
            ,_tab.EANL,'ZLGD','N',1,_sctab,,,,_tab.KODPAL)
      ?};
::    Doliczenie stanu dedykowanych rezerwacji dla surowców nielimitowanych
      {? cur_tab(1,1).CZY_REZ>0
      || _stan+=exec('zlim_il_rez','zl_nlimit',cur_tab(1,1).ZLIM)
      ?};
      BEER.SD:=_stan;
      {? cur_tab(1,1).ILOSC<=_stan || exec('rekprzed','color','__TABSUR#01#01') || '' ?}
      ",
      "{? cur_tab(1,1).ILOSC>=0 || 1 || FUN.info('Ilość musi być większa od zera.'@) ?}"
   )
|? _gen*'ODP'>0
|| _sur.win_act(_env.SUR.WER,,'Rekord',,,,,
      "{? cur_tab(1,1).ILOSC>=0 || 1 || FUN.info('Ilość musi być większa od zera.'@) ?}"
   )
|? _gen*'ZWR'>0
|| _fb:="
      _env:=params_get().env_gen;
      _sur:=_env.SUR.TAB;
      M.clear();
      {? M.seek(_sur.MAT,)
      || VAR.A_T:=M.ref()
      || VAR.A_T:=null()
      ?};
      {? _sur.ILR>_sur.ILL || exec('rekprzed','color','__TABSUR#03#01') || '' ?}
   ";
   _sur.win_act(_env.SUR.WER,,'Rekord',,,,_fb)
?};
_task:={? _gen*'GROP'>0 || 'TPP_GOP_DLIM' || 'TTE_PZL_DLIM' ?};
_sur.win_act(_env.SUR.WER,0,'Formuła','Dołącz'@@,,,,"params_exec('sur_edit','zl_nlimit',VAR.A_DOK,1)",,,,,'D');
task_attach(_task);
_sur.win_act(_env.SUR.WER,1,'Formuła','Dołącz'@@,,,,"params_exec('sur_edit','zl_nlimit',VAR.A_DOK,1)",1,,,,'D');
task_attach(_task);
_sur.win_act(_env.SUR.WER,,'Formuła','Popraw'@@,,,,"params_exec('sur_edit','zl_nlimit',VAR.A_DOK,0)",1,,,,'P');
task_attach(_task);
{? _gen*'ZWR'=0
|| _fb:=""
|| _fb:="
      VAR.REAL:=#cur_tab(1,1).ref();
      1
   "
?};
_formula:="
   params_set(params_get());
   _env_gen:=params_get().env_gen;
:: Dla zwrotów czyszczenie pozycji po usunięciu nagłówka
   {? _env_gen.GEN*'ZWR'>0
   || _pob:=_env_gen.POB.TAB;
      _pob.cntx_psh();
      _pob.index(_env_gen.POB.NDXSYM);
      _pob.prefix(VAR.REAL);
      {? _pob.first()
      || {!
         |?
            _pob.del()
         !}
      ?};
      _pob.cntx_pop()
   ?};
   grp_disp(params_get().env_gen.DK.TAB,params_get().env_gen.DK.WER,1)
";
_sur.win_act(_env.SUR.WER,,'Usuń',,,,_fb,_formula);
task_attach(_task);
{? _gen='NLI' | _gen='NLI_ZLGD'
|| _sur.win_act(_env.SUR.WER,,'Formuła','Zamienniki'@@,,,"params_exec('sur_show_zam','zl_nlimit')",,,,,,'Z');
   task_attach(_task)
?};
_formula:="
   params_set(params_get());
   _env:=params_get().env_gen;
   _sur:=_env.SUR.TAB;
   _pob:=_env.POB.TAB;
   _sur.cntx_psh();
   _pob.index(_env.POB.NDXSYM);
   _pob.prefix(#_sur.ref());
   _pob.select();
   _sur.cntx_pop();
:: Aktualizacji ilości na nagłówku
   _il_sum:=0;
   _mag_sym:=_mag_name:='';
   _mag:=0;
   {? _pob.first()
   || _mag:=_pob.MAG;
      _mag_sym:=_pob.MAGSYM;
      _mag_name:=_pob.MAGNAME;
      _chk_mag:=1;
      {!
      |?
         {? _chk_mag>0 & _mag<>_pob.MAG
         || _chk_mag:=0;
            _mag_sym:=mag_name:='';
            _mag:=0
         ?};
         _il_sum+=_pob.ILOSC;
         _pob.next()
      !}
   ?};
   _sur.ILOSC:=_il_sum;
   _sur.MAG:=_mag;
   _sur.MAGSYM:=_mag_sym;
   _sur.MAGNAME:=_mag_name;
   _sur.put();
   ~~
";
{? _gen*'ZWR'>0
|| _sur.win_act(_env.SUR.WER,,'Formuła','&Rozpisz'@@,,,_formula,,,,,,'R')
?};
_formula:="
   M.cntx_psh();
   M.clear();
   {? M.seek(cur_tab(1,1).MAT)
   || exec('info_zam','magazyn_stan',3)
   ?};
   M.cntx_pop();
   ~~
";
_sur.win_act(_env.SUR.WER,,'Formuła','Szczegóły'@@,,,,_formula,,,,,'S');
{? _gen*'NLI'>0
|| _sur.win_act(_env.SUR.WER,0,'Formuła','Legenda'@@,,,,"exec('legenda','color','__TABSUR#01','SUR#01')",,,,,'L')
|? _gen*'ODP'>0
|| _sur.win_act(_env.SUR.WER,0,'Formuła','Legenda'@@,,,,"exec('legenda','color','__TABSUR#02','SUR#02')",,,,,'L')
|? _gen*'ZWR'>0
|| _sur.win_act(_env.SUR.WER,0,'Formuła','Legenda'@@,,,,"exec('legenda','color','__TABSUR#03')",,,,,'L')
?};
_sur.win_act(_env.SUR.WER,,'Kolejność');

_fi:="
   _result:=exec('pusta','#icon');
   {? cur_tab(1,1).DK_C<>''
   || _result:='xwin16.png:50'
   ?};
   _result
";
_sur.win_fml(_env.SUR.WER,,'NAZ',,'ICON_BEFORE',_fi);
{? _gen*'ODP'>0
|| _fi:="
      _result:=exec('pusta','#icon');
      {? cur_tab(1,1).ALL_SET=0
      || _result:='xwin16.png:15'
      ?};
      _result
   ";
   _sur.win_fml(_env.SUR.WER,,'KTM',,'ICON_BEFORE',_fi)
?};
{? _gen*'GROP'>0 & _gen<>'ZWR_GROP'
|| _formula:="
      GROP.cntx_psh();
      GROP.prefix();
      {? GROP.seek(cur_tab(1,1).GROP,)
      || ZLIM.cntx_psh();
         exec('openmask','zl_common',null(),GROP.ref());
         ZLIM.prefix();
         {? ZLIM.seek(cur_tab(1,1).ZLIM,8+cur_tab(1,1).ZLIM)
         || exec('bs_zlimw','zl_limit')
         ?};
         ZLIM.cntx_pop()
      ?};
      GROP.cntx_pop();
      ~~
   "
|| _formula:="
      ZL.cntx_psh();
      ZL.prefix();
      {? ZL.seek(cur_tab(1,1).ZL,)
      || ZLIM.cntx_psh();
         exec('openmask','zl_common',ZL.ref());
         ZLIM.prefix();
         {? ZLIM.seek(cur_tab(1,1).ZLIM,8+cur_tab(1,1).ZLIM)
         || exec('bs_zlimw','zl_limit')
         ?};
         ZLIM.cntx_pop()
      ?};
      ZL.cntx_pop();
      ~~
   "
?};
_sur.win_act(_env.SUR.WER,,'Wyświetl',,,,_formula);
_sur.win_sel(_env.SUR.WER);

:: Okno redakcyjne
_env.SUR.RED:=_sur.mk_edit('Surowiec'@,0,,,,{? _gen*'ODP'>0 || 'html_maximized' || 'normal' ?});
{? _gen*'ZWR'=0
|| _sur.win_esep(_env.SUR.RED,'Dane podstawowe'@);
   {? _gen*'GROP'>0
   || _sur.win_efld(_env.SUR.RED,,'GROP_KOD',,,60,,1,'Grupa operacji'@,,,,'F3_button=1');
      _sur.win_efld(_env.SUR.RED,,'GROP_OP',,,60,,1,'Opis'@,,,,'F3_button=1')
   || _sur.win_efld(_env.SUR.RED,,'ZL_SYM',,,60,,1,'Zlecenie'@,,,,'F3_button=1');
      _sur.win_efld(_env.SUR.RED,,'ZGP_NAME',,,60,,,'Pozycja przewodnika'@,,,,'F3_button=1');
      _sur.win_efld(_env.SUR.RED,,'ZGP_OPIS',,,60,,1,'Opis'@,,'Opis pozycji przewodnika'@,,'F3_button=1')
   ?};
   _sur.win_efld(_env.SUR.RED,,'PARSYM',,,60,,1,'Partia'@,,,,'F3_button=1')
?};

_sur.win_esep(_env.SUR.RED,'Surowiec'@);
_sur.win_efld(_env.SUR.RED,@.VAR,'A_T','KTM','R_KOMP',60,,
   {? _gen*'ZWR'=0 || 0 || 1 ?},'Indeks'@);
_sur.win_efld(_env.SUR.RED,@.VAR,'A_T','N',,60,,1,'Nazwa'@);
_sur.win_efld(_env.SUR.RED,@.VAR,'A_MAG','SYM','MAG',12,,,'Magazyn'@);
_sur.win_efld(_env.SUR.RED,,'ILOSC',,,15,ST.DOKL,,'Ilość'@);

{? _gen*'ODP'>0
|| _sur.win_ecol(_env.SUR.RED);
   _sur.win_ewin(_env.SUR.RED,DK_C,'RED_ATRC','')
?};

{? _gen*'ZWR'=0
|| _sur.efld_opt(_env.SUR.RED,'mark=1',VAR,'A_T','KTM');
   _sur.efld_opt(_env.SUR.RED,'mark=1',,'ZGP_NAME');
   _sur.efld_opt(_env.SUR.RED,'mark=1',VAR,'A_MAG','SYM');
   _sur.efld_opt(_env.SUR.RED,'mark=1',,'ILOSC')
?};
_sur.win_ebtn(_env.SUR.RED,'text=%1'['OK'@],'key:F2');
_sur.win_ebtn(_env.SUR.RED,'text=%1'['Anuluj'@],'key:Esc');

::Zamienniki
_zam:=tab_tmp(3,
   'KTM','STRING[50]','Indeks',
   'NAZ','STRING[106]','Nazwa',
   'MAGSYM','STRING[8]','Symbol magazynu',
   'MAGNAME','STRING[100]','Nazwa magazynu',
   'ILOSC','REAL','Ilość',
   'JM','STRING[10]','jm',
   'MAG','STRING[16]','$MG.ref()',
   'TYP','STRING[25]','Typ zamiennika',
   'MREF','STRING[16]','$M.ref()',
   'SD','REAL','Stan dostępny',
   'GRP','STRING[10]','Grupa technologiczna'
);
_env.ZAM.TAB:=_zam;
_env.ZAM.NDXKTM:=_zam.index('?');
_env.ZAM.NDXMREF:=_zam.ndx_tmp(,,'MREF',,);

_zam.fld_fml('ILOSC','EDIT_FORMAT',"'in_prec='+$VAR.A_T().DOKL");
_zam.fld_fml('ILOSC','DISPLAY_FORMAT',"'out_prec='+{? (2+cur_kwin())='e_' || $VAR.A_T().DOKL || $ST.DOKL ?}");

_env.ZAM.WER:=_zam.mk_sel('Zamienniki surowca'@,'P',,'#zam_select',,,15,,'U',,,,,'html_maximized');
_zam.win_fld(_env.ZAM.WER,,'KTM',,,25,,1,'Indeks materiału'@);
_zam.win_fld(_env.ZAM.WER,,'NAZ',,,45,,1,'Nazwa'@);
_zam.win_fld(_env.ZAM.WER,,'JM',,,5,,1,'jm'@);
_zam.win_fld(_env.ZAM.WER,,'ILOSC',,,12,ST.DOKL,,'Ilość'@);
_zam.win_fld(_env.ZAM.WER,,'MAGSYM',,,8,,1,'Magazyn'@);
_zam.win_fld(_env.ZAM.WER,,'SD',,,15,,1,'Stan dostępny'@);

_formula:="
   params_set(params_get());
   _env:=params_get().env_gen;
   _sur:=_env.SUR.TAB;
   _zam:=_env.ZAM.TAB;

:: Podstawowa walidacja (taka sama jak po redakcji rekordu)
   _valid:='';
   _valid:=exec('zam_valid','zl_nlimit',_zam,1);
   {? _valid=''
   || _sur.ILOSC:=_zam.ILOSC;
::      VAR.A_T:=exec('FindAndGet','#table',M,_zam.MREF,,,null());
      VAR.A_MAG:=exec('FindAndGet','#table',MG,_zam.MAG,,,null());
      {? exec('spr_no_lim','zl_nlimit','S',0)
      || sel_exit()
      ||
::       Nie udało się zmodyfikować rekordu, przywrócenie wartości bufora
         _sur.get()
      ?}
   ?}
";
_zam.win_act(_env.ZAM.WER,,'Formuła','Wybierz'@@,,,,_formula,1,,,,'W');
_zam.win_act(_env.ZAM.WER,,'Popraw');
_before:="
   _tab:=cur_tab(1,1);
   VAR.A_T:=exec('FindAndGet','#table',M,_tab.MREF,,,null());
   ~~
";
_after:="
   _tab:=cur_tab(1,1);
   _res:=exec('zam_valid','zl_nlimit',_tab,1);
   _res
";
_zam.win_act(_env.ZAM.WER,,'Rekord',,,,_before,_after);
_formula:="
   M.cntx_psh();
   M.clear();
   {? M.seek(cur_tab(1,1).MREF)
   || exec('info_zam','magazyn_stan',3)
   ?};
   M.cntx_pop();
   ~~
";
_zam.win_act(_env.ZAM.WER,,'Formuła','Szczegóły'@@,,,,_formula,,,,,'S');
_zam.win_act(_env.ZAM.WER,,'Kolejność');
_zam.win_sel(_env.ZAM.WER);

:: Pobrania (dla zwrotów)
_pob:=exec('pob4zlim_tab','zl_nlimit');
_env.POB.TAB:=_pob;
_env.POB.NDXSYM:=_pob.index('?');
_env.POB.NDXSYMGR:=_pob.ndx_tmp(,,'REFSUR',,,'GROP_KOD',,);
_env.POB.NDXREFDK:=_pob.ndx_tmp(,,'REFDK',,,'MAG',,);
_env.POB.NDXDOSTR:=_pob.ndx_tmp(,,'REFSUR',,,'DT',,0,'DOST',,);
_env.POB.NDXDOSTM:=_pob.ndx_tmp(,,'REFSUR',,,'DT',,1,'DOST',,);

:: Okno wertowania
_env.POB.WER:=_pob.mk_sel('Pobrania surowców'@,'P',,'#pob_select_s',,,15,,'U');
{? _gen='ZWR'
|| _pob.win_fld(_env.POB.WER,,'ZL_SYM',,,25,,,'Zlecenie'@);
   _pob.win_fld(_env.POB.WER,,'ZGH_NR',,,25,,,'Przewodnik'@);
   _pob.win_fld(_env.POB.WER,,'ZGP_POZ',,,-5,,,'Poz.'@)
::   _pob.win_fld(_env.POB.WER,,'OPER',,,25,,,'Operacja'@)
?};
_pob.win_fld(_env.POB.WER,,'DT',,,10,,,'Data Dostawy'@);
_pob.win_fld(_env.POB.WER,,'DOST',,,25,,,'Dostawa'@);
_pob.win_fld(_env.POB.WER,,'ILP',,,12,ST.DOKL,,'Pobrano'@);
_pob.win_fld(_env.POB.WER,,'ILZ',,,12,ST.DOKL,,'Zwrócono'@);
_pob.win_fld(_env.POB.WER,,'ILP',,,12,ST.DOKL,,'Pozostało'@);
_pob.win_fld(_env.POB.WER,,'ILOSC',,,12,ST.DOKL,,'Ilość zwracana'@);
_pob.win_fld(_env.POB.WER,,'MAGSYM',,,8,,,'Magazyn'@);

_pob.fld_fml('ILOSC','EDIT_FORMAT',"'in_prec='+$VAR.A_T().DOKL");
_pob.fld_fml('ILOSC','DISPLAY_FORMAT',"'out_prec='+{? (2+cur_kwin())='e_' || $VAR.A_T().DOKL || $ST.DOKL ?}");

_fb:="
   params_set(params_get());
   _env_gen:=params_get().env_gen;
   _pob:=_env_gen.POB.TAB;
::   _sur:=_env_gen.SUR.TAB;
::   VAR.STRING:=_pob.ZGH_NR+' '+exec('separator','zl_limit')+' '+_pob.ZGP_POZ;
   _mag_before:=exec('FindAndGet','#table',MG,_pob.MAG,,,null());
   {? _pob.edit(\"params_exec('pob_valid','zl_nlimit',1)\")
   || {? VAR.A_MAG<>_mag_before
      || _pob.MAG:=#VAR.A_MAG;
         _pob.MAGSYM:=VAR.A_MAG().SYM;
         _pob.MAGNAME:=VAR.A_MAG().NAZ
      ?};
      _pob.put()
   ?};
   ~~
";
_pob.win_act(_env.POB.WER,,'Formuła','Popraw'@@,,,,_fb,1,,,,'P');
_fb:="
   _tab:=cur_tab(1,1);
   _tab.ILOSC:=0;
   _tab.put();
   ~~
";
_pob.win_act(_env.POB.WER,,'Formuła','Zeruj'@@,,,,_fb,,1,,,'Z');
_fb:="
   params_set(params_get());
   _env_gen:=params_get().env_gen;
   _pob:=_env_gen.POB.TAB;
   _sur:=_env_gen.SUR.TAB;
   _ilosc:=exec('pob_il_valid','zl_nlimit',0,0);
   _pob.ILOSC:=_ilosc;
   _pob.put();
   ~~
";
_pob.win_act(_env.POB.WER,,'Formuła','Wypełnij'@@,,,,_fb,,1,,,'W');
_fb:="
   params_set(params_get());
   _env_gen:=params_get().env_gen;
   _pob:=_env_gen.POB.TAB;
   VAR.STRING:=_pob.ZGH_NR+' '+exec('separator','zl_limit')+' '+_pob.ZGP_POZ;
   VAR.A_MAG:=exec('FindAndGet','#table',MG,_pob.MAG,,,null());
   ~~
";
_pob.win_act(_env.POB.WER,,'Rekord',,,,_fb);
_pob.win_sel(_env.POB.WER);

:: Okno redakcyjne
_env.POB.RED:=_pob.mk_edit('Dostawa'@,0,,,,'normal');
_pob.win_esep(_env.POB.RED,'Dane podstawowe'@);
_pob.win_efld(_env.POB.RED,,'ZL_SYM',,,60,,1,'Zlecenie'@);
_pob.win_efld(_env.POB.RED,VAR,'STRING',,,60,,1,'Pozycja przewodnika'@);
::_pob.win_efld(_env.POB.RED,,'ZGP_OPIS',,,60,,1,'Opis',,'Opis pozycji przewodnika'@);
::_pob.win_efld(_env.POB.RED,,'PARSYM',,,60,,1,'Partia'@,,,,'F3_button=1');
_pob.win_efld(_env.POB.RED,@.VAR,'A_MAG','SYM','MAG',12,,,'Magazyn'@);
_pob.win_efld(_env.POB.RED,,'ILOSC',,,15,ST.DOKL,,'Ilość'@);

_pob.efld_opt(_env.POB.RED,'mark=1',VAR,'A_MAG','SYM');
_pob.efld_opt(_env.POB.RED,'mark=1',,'ILOSC');
exec('ok_esc','#window',_env.POB.TAB,_env.POB.RED );
_pob.win_edit(_env.POB.RED);

:: Okno grupowe
_fb:="
   params_set(params_get());
   _env:=params_get().env_gen;
   _env.SUR.TAB.prefix(#_env.DK.TAB.ref());
   _env.SUR.TAB.first();
   grp_disp(_env.SUR.TAB,_env.SUR.WER)
";
_grp:=_dk.grp_make(
   {? _gen='ZWR' | _gen='NLI_ZL' | _gen='ODP_ZL'
   || 'Zlecenia'@
   |? _gen='ZWR_GROP' | _gen='NLI_ZGROP' | _gen='ODP_ZGROP'
   || 'Grupy operacji'@
   |? _gen='NLI_ZLGD' | _gen='NLI_GROP' | _gen='ODP_GROP'
   || 'Wykonania produkcji'@
   || 'Raporty z produkcji'@
   ?},
   _fb,'#dk__grp'+(5+(-_gen)),15,15,,,'html_maximized'
);
_af:="
   params_set(params_get());
   _env:=params_get().env_gen;
   _env.SUR.TAB.prefix(#_env.DK.TAB.ref());
   {? _env.SUR.TAB.first()
   || _env.DK.TAB.actions_grayed(_env.DK.WER,'')
   || _env.DK.TAB.actions_grayed(_env.DK.WER,'U')
   ?};
   grp_disp(_env.SUR.TAB,_env.SUR.WER)
";
_dk.grp_sel(_grp,_dk,_env.DK.WER,,_af,,,6,,,,,'maximized_with_title');
_dk.grp_splt(_grp,,'horizontal','bottom');
_fb:="
   params_set(params_get());
   _env:=params_get().env_gen;
   {? _env.DK.TAB.size()=0
   || _env.SUR.TAB.actions(_env.SUR.WER,'D:D',,1)
   || _env.SUR.TAB.actions(_env.SUR.WER,,,1)
   ?}
";
_dk.grp_sel(_grp,_sur,_env.SUR.WER,,,,,10,_fb,,,,'maximized_with_title');
_dk.win_sel(_grp);

_env


\select_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Selekcja panelu służącego do generowania dokumentów rozliczających
::----------------------------------------------------------------------------------------------------------------------
_env_gen:=__ENV_GEN;
params_set('env_gen',_env_gen);
_dk:=_env_gen.DK.TAB;

:: Przypisanie formuły po redakcji dla pola z indeksem materiałowym, jeżeli rejestracja odpadów
{? _env_gen.GEN*'ODP'>0
|| _formula:="
      _env_gen:=params_get().env_gen;
      _sur:=_env_gen.SUR.TAB;
      _dk:=_env_gen.DK.TAB;
      _m_atr:=ATR.M_ATR;
      ZLIM.KTM:=VAR.A_T;
      ATR.M_ATR:=VAR.A_T().M_ATR;
      _sur.M_ATR:=$ATR.M_ATR;
      M_ATR.seek(ATR.M_ATR,,,1);
::      ATR.MJS:='M_ATR';
::    Zeruje ceche jesli material nie ma jej przypisanej
      {? ATR.M_ATR=null()
      ||
         ATR.MJS:='M_ATR';
         {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
         _sur.DK_C:='';
         ATR.SUR_DKC:=ZLIM.DK_C:=null()
      ||
         ATR.MJS:='ZLIM';
::       Zeruje ceche jesli M_ATR materialu rozny od M_ATR wybranej cechy
::       ustawienie slownika okienka cech
         {? _m_atr<>ATR.M_ATR
         || {! _i..10 |! ($('ATR.WAR'+form(_i,-2,0,'99')))():='' !};
            _sur.DK_C:='';
            ATR.SUR_DKC:=ZLIM.DK_C:=null()
         ?};
::       Partie na zleceniu
         ATR.ZPARN_DK:=exec('FindAndGet','#table',ZPARN,_dk.ZPARN,,,null());
         _zl:=exec('FindAndGet','#table',ZL,_dk.ZL_REF,,,null());
         {? exec('zlec_party','zl_common',_zl)>0
         ||
::          Ustawiam wartosc zmiennej ATR na symbol partii
            exec('atr_set_partia','mat_atr',ATR.M_ATR,ATR.ZPARN_DK().SYM)
         ?};
         ATR.FLAG_ED:=(exec('FindAndGet','#table',MG,_sur.MAG,,\"1+TYP\",'')='D' | _sur.MAG=0) & ATR.M_ATR().EDIT;
         ATR.FLAG:={? ATR.FLAG_ED || 2 || 0 ?};
         {? ATR.FLAG_ED || ATR.FLAG_ED:=2 ?};
         win_disp()
      ?};
      ~~
   ";
   VAR.fld_fml('A_T','AFTER_EDIT',_formula)
?};

_dk.index(_env_gen.DK.NDXSYM);
_dk.prefix();
{? _dk.first()
|| KOMM.select();
   _dk.select();
   {? _dk.first()
   || {!
      |? exec('zl_unlock','zl_common',BIT.sqlint(_dk.ZL_REF),'L');
         _dk.next()
      !}
   ?};
   unlock_r()
|| {? _env_gen.GEN*'ZWR'>0
   || KOMM.add('Brak możliwych surowców do zwrotu.'@)
   |? _env_gen.GEN='ODP_ZL' | _env_gen.GEN='ODP_ZGROP'
   || KOMM.add('Brak odpadów/koproduktów, dla których można zarejestrować przychód.'@)
   || KOMM.add('Brak dokumentów do rozliczenia w okresie %1/%2.'@[form(ST.AM,-2),$ST.AR])
   ?};
   KOMM.select()
?};
{? _env_gen.GEN*'ODP'>0
|| VAR.fld_fml('A_T','AFTER_EDIT',"*")
?};
~~


\rozliczone
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy do danego dokumentu raportującego zostały już wygenerowane dokumenty rozliczające
::   WE: _a - ND.ref()
::       _b - przychodowe 'T', rozchodowe 'N'
::   WY: 0 (brak dokumentów rozliczających) / 1 (są dokumenty rozliczające)
::----------------------------------------------------------------------------------------------------------------------
_nd_ref:=_a;
_nd_name:=ref_name(_a);

_rozliczone:=0;

ND.cntx_psh();
ND.use(_nd_name);
ND.index('MM');
ND.prefix($_nd_ref,$_nd_ref,_b);
_rozliczone:=(ND.size()>0);
ND.cntx_pop();

_rozliczone


\separator
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Separator redagowanego pola ZGP.NAME (EN DASH, żeby trudniej popsuć, gdy myślnik wystąpi w symbolu przewodnika)
::----------------------------------------------------------------------------------------------------------------------
'–'


\find_p_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2011]
:: OPIS: Wyszukiwanie czy są już jakieś powiązania dla tej pozycji
::   WE: _a - $ND.ref()
::       _b - ZL.ref()
::       _c - tryb pracy ('NLI', 'ODP', 'RAP', 'ZWR', '' - wszystkie)
::   WY: 1 - są powiązania, 0 - brak powiązań
::  OLD: \find_p_dk/sur_nlim.fml
::----------------------------------------------------------------------------------------------------------------------
_nd:=_a;
_zl:=_b;
_mode:=_c;

_result:=0;

_typydok:='';
{? _c='RAP' | _c='' || _typydok+=exec('get','#params',500701,2) ?};
{? _c='ODP' | _c='' || _typydok+=exec('get','#params',500705,2) ?};
{? _c='NLI' | _c='' || _typydok+=exec('get','#params',500707,2) ?};
{? _c='ZWR' | _c='' || _typydok+=exec('get','#params',500709,2) ?};
_typydok:=exec('GetTabFromList','#table',TYPYDOK,'T',_typydok);

DK.cntx_psh();
DK.index('GENZL');
ZL.cntx_psh(); ZL.clear();

{? ZL.seek(_zl)
|| {? _typydok.first()
   || {!
      |? _typdok:=exec('FindAndGet','#table',TYPYDOK,_typydok.REF);

         {? exec('subzlec_exist','zl_link',ZL.ref())
         || ZL.cntx_psh();
            ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || {!
               |? DK.prefix(ZL.ref(),_typdok,_nd);
                  {? DK.first()
                  || _result:=1
                  || _result:=0
                  ?};
                  ZL.next() & _result=0
               !}
            ?};
            ZL.cntx_pop()

         || DK.prefix(ZL.ref(),_typdok,_nd);
            {? DK.first()
            || _result:=1
            || _result:=0
            ?}
         ?};
         _typydok.next() & _result=0
      !}
   ?}
?};

ZL.cntx_pop();
DK.cntx_pop();
_result


\stat_l
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zwraca aktualną wartość statusu zakończenia rejestracji limitów do przewodników zlecenia (prostego)
::   WE: _a - ZL.ref()
::   WY: 'T' - wszystkie przewodniki mają ZGH.STAT_L='T' lub brak przewodników, 'N' - nie wszystkie
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;

_result:='T';
ZGH.cntx_psh();
ZGH.index('ZLNR');
ZGH.prefix(_zl);
{? ZGH.first()
|| {!
   |? {? ZGH.STAT_L='N' || _result:='N' ?};
      ZGH.next()
   !}
?};
ZGH.cntx_pop();

_result


\cofaj_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Zmienia znacznik zakończenia zapotrzebowań na przewodnikach zlecenia
::       UWAGA: nie sprawdza powiązań
::   WE: _a - ZL.ref()
::   WY: 1 - udało się zmienić znacznik dla wszystkich przewodników (albo nie było przewodników),
::       0 - nie udało się zmienić znacznika dla conajmniej jednego przewodnika
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;

:: Rozpoczynam transakcję jeśli jeszcze nie rozpoczęta
_tran_started:=0;
{? do_state()=0
|| do();
   _tran_started:=1
?};

_result:=1;
ZGH.cntx_psh();
ZGH.index('ZLNR');
ZGH.prefix(_zl);
{? ZGH.first()
|| {!
   |? ZGH.STAT_L:='N';
      {? ~ZGH.put() || _result:=0 ?};
      _result>0 & ZGH.next()
   !}
?};
ZGH.cntx_pop();

{? _result=0
||
:: Wycofuję transakcję
   undo()
?};

:: Kończę transakcję
{? _tran_started>0
|| end()
?};

_result


\all_checked
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza, czy wszystkie limity z bieżącego kontekstu są 'sprawdzone' (albo zaakceptowane)
::   WE: [_a] - obiekt ZLIMp / zlecenie (ZL.ref())
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(obj_new(1)) & var_pres('ZLIM',_a)>100
|| _ZLIM:=_a.ZLIM
|? var_pres('_a')=type_of(ZL)
|| _ZLIM:=exec('kart_lim','zl_limit',9,_a,'T',null(),null())
|| FUN.wdrerror('Błędne wywołanie formuły \\all_checked/zl_limit.fml');
   return(0)
?};

_checked:=1;

_ZLIM.cntx_psh();
{? _ZLIM.first()
|| {!
   |? {? _ZLIM.AKC='N' || _checked:=0 ?};
      _checked=1 & _ZLIM.next()
   !}
?};
_ZLIM.cntx_pop();

_checked


\ctrlSelZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Kontrola zaznaczonych limitów - czy dotyczą jednego zlecenia sprawdzamy pole ZL_REF
::   WE: _a - tabela do kontroli
::   WY: ref zlecenia lub 0 jeśli zaznaczono limity dotyczące różnych zleceń
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_Tab:=_a;
_Tab.cntx_psh();
{? ~_Tab.sel_size()
|| _res:=_Tab.ZL_REF
|| _res:=-1;
   _Tab.prefix();
   {? _Tab.first()
   || {!
      |? {? _Tab.ZL_REF<>0 & _Tab.sel_mark()
         || {? _res<0
            || _res:=_Tab.ZL_REF
            |? _res<>_Tab.ZL_REF
            || _res:=0
            ?}
         ?};
         _res<>0 & _Tab.next()
      !}
   ?};
   {? _res<0 || _res:=0 ?}
?};
_Tab.cntx_pop();
_res


\ctrlSelSO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kontrola zaznaczonych limitów - czy dotyczą wyłącznie surowców/odpadów, sprawdzamy pole SO
::   WE: _a - tabela do kontroli
::   WY: 'S'/'O', gdy zaznaczono limity zgodnego typu lub '' jeśli zaznaczono limity różnych typów
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_Tab:=_a;
_Tab.cntx_psh();
{? ~_Tab.sel_size()
|| _res:=_Tab.SO
|| _res:='SO';
   _Tab.prefix();
   {? _Tab.first()
   || {!
      |? {? _Tab.SO<>'' & _Tab.sel_mark()
         || {? _res='SO'
            || _res:=_Tab.SO
            |? _res<>_Tab.SO
            || _res:=''
            ?}
         ?};
         _res<>'' & _Tab.next()
      !}
   ?};
   {? _res='SO' || _res:='' ?}
?};
_Tab.cntx_pop();
_res


\czy_sa_limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Sprawdzenie, czy dla zlecenia są limity
::   WE: _a - ZL.ref()
::       _b - czy dla zlecenia złożonego albo montażowego analizować zlecenia podrzędne (1) / [0]
::   WY: 1 - dla zlecenia wygenerowano limity
::       0 - zlecenie nie posiada limitów surowcowych
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_recursion:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_result:=0;

ZL.cntx_psh();
ZLIM.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| exec('openmask','zl_common',ZL.ref());
   {? (ZL.TREE_TYP='Z' | ZL.TREE_TYP='M') & _recursion>0
   || ZL.index('NRNZL');
      ZL.prefix({? ZL.TREE_TYP='Z' || ZL.UNRZL || ZL.NRNZL ?});
      {? ZL.first()
      || {!
         |? ZLIM.index('ZN');
            ZLIM.prefix(ZL.ref(),'T');
            {? ZLIM.first()
            || _result:=1
            ?};
            _result=0 & ZL.next()
         !}
      ?}
   || ZLIM.index('ZN');
      ZLIM.prefix(ZL.ref(),'T');
      {? ZLIM.first()
      || _result:=1
      ?}
   ?}
?};
ZL.cntx_pop();
ZLIM.cntx_pop();
_result


\prodstat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Stany surowców na produkcji w toku.
::       Wylicza ilości i wartości surowców pobranych na produkcję i zwróconych, z uwzględnieniem ilości wytworzonej.
::       Analiza dotyczy tylko zleceń otwartych. Uwzględniane są tylko surowce imitowane.
::  OLD: \prodstat/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_env:=obj_new('tab','wariant','licz_il','zerowe');
params_set('env',_env);

_par:=tab_tmp(,
   'WARIANT','STRING[1]','Układ zestawienia'@,
   'LICZ_IL','STRING[1]','Wyliczanie ilości produktu na zleceniu'@,
   'ZEROWE','STRING[1]','Pozycje bez pobrań'@
);
_par.blank(); _par.WARIANT:='S'; _par.LICZ_IL:='D'; _par.ZEROWE:='N';

_red:=_par.mk_edit('Parametry analizy'@,,'prodstatred');
_par.win_esep(_red,'Parametry'@);
_par.win_efld(_red,,'WARIANT',,,,,,,,,
   'radio-buttons',,'surowce w podziale na zlecenia'@,"'S'",'zlecenia w podziale na surowce'@,"'Z'"
);
_par.win_efld(_red,,'LICZ_IL',,,,,,,,,
   'radio-buttons',,'wg dokumentów'@,"'D'",'wg wykonań'@,"'W'"
);
_par.win_efld(_red,,'ZEROWE',,,,,,,,,
   'check-box','check_label='+'czy uwzględniać pozycje bez pobrań surowców?'@,"'T'","'N'"
);
exec('ok_esc','#window',_par,_red);
_par.win_edit(_red);
{? _par.edit()
|| _env.wariant:=_par.WARIANT;
   _env.licz_il:=_par.LICZ_IL;
   _env.zerowe:=_par.ZEROWE
|| return()
?};

Cntx.psh(ZL,ZLIM);

_env.tab:=_tab:=tab_tmp(3,
   'PARENT','TREE_REF','Wskazanie na element nadrzędny',
   'LABEL1','STRING[50]','Etykieta w pierwszej kolumnie',
   'LABEL2','STRING[200]','Etykieta w drugiej kolumnie',
   'ZL_REF','STRING[16]','$ZL.ref()',
   'ZL_SYM','STRING[20]','Symbol zlecenia',
   'ZL_OPIS','STRING[200]','Opis zlecenia',
   'M_REF','STRING[16]','$M.ref()',
   'M_KOD','STRING[50]','Kod materiału - surowca',
   'M_NAZ','STRING[100]','Nazwa materiału - surowca',
   'JM','STRING[10]','jm',
   'IL_PLAN','REAL','',
   'IL_WYK','REAL','',
   'IL_DOK','REAL','',
   'IL_LIM','REAL','',
   'IL_POBR','REAL','',
   'IL_ZWR','REAL','',
   'ILOSC','REAL','',
   'IL_TOKU','REAL','',
   'WAR_POBR','REAL','',
   'WAR_ZWR','REAL','',
   'WARTOSC','REAL','',
   'WAR_TOKU','REAL','',
   'ZNACZNIK','STRING[1]',''
);

::_tab.fld_attr(,2);

_formula:="_tab:=cur_tab(1,1); {? _tab.ZNACZNIK='X' & _tab.ZL_REF<>'' || 'empty=1' || 'empty=0' ?}";
_tab.fld_fml('ILOSC','DISPLAY_FORMAT',_formula);
_tab.fld_fml('IL_TOKU','DISPLAY_FORMAT',_formula);
_tab.fld_fml('IL_LIM','DISPLAY_FORMAT',_formula);

_ndxp:=_tab.index('?');
_ndxt:=_tab.ndx_tmp('',,'M_REF',,);
_ndxzm:=_tab.ndx_tmp('',,'ZL_REF',,,'M_REF',,);

:: Analiza dotyczy tylko zleceń produkcyjnych otwartych z bieżącego oddziału
_ndx_zl:=ZL.ndx_tmp(,,'ODDZ',,,'ST_MJS',,,'TYP','WP',,'STAN',,);
ZL.index(_ndx_zl);
ZL.prefix(ST.ODDZ_KOD,'Z','P','O');
{? ZL.first()
||
   {!
   |?
      exec('openmask','zl_common',ZL.ref());

      ZLIM.index('ZN');
      ZLIM.prefix(ZL.ref(),'T');
      {? ZLIM.first()
      || {!
         |?
            {? ZLIM.KOR=0
            ||
               _sum_il:=exec('sum_il','zl_limit',$ZLIM.ref(),1);
               _pob:=exec('zlim_pob_il','zl_limit',$ZLIM.ref());

               _tab.index(_ndxzm);
               _tab.prefix($ZL.ref(),$ZLIM.KTM);
               {? _tab.first()
               ||
                  _tab.IL_LIM+=_sum_il;
                  _tab.IL_POBR+=_pob.RW;
                  _tab.IL_ZWR+=_pob.ZW;
                  _tab.ILOSC+=_pob.IL;
                  _tab.WAR_POBR+=_pob.WAR_RW;
                  _tab.WAR_ZWR+=_pob.WAR_ZW;
                  _tab.WARTOSC+=_pob.WAR;
                  _tab.put()
               ||
                  _tab.ZL_REF:=$ZL.ref();
                  _tab.ZL_SYM:=ZL.SYM;
                  _tab.ZL_OPIS:=ZL.OPIS;
                  _tab.M_REF:=$ZLIM.KTM;
                  _tab.M_KOD:=ZLIM.KTM().KTM;
                  _tab.M_NAZ:=M.N;
                  _tab.JM:=M.J().KOD;

                  _tab.IL_PLAN:=ZL.IL;
                  _tab.IL_WYK:=ZL.ILWYK;
                  {? ZL.TREE_TYP='F' & ZL.RP<>'T'
                  || _main:=exec('main_podzlec','zl_link',ZL.ref());
                     _il_prod:=exec('FindAndGet','#table',ZL,_main,,"IL",0);
                     _il_dok:=exec('FindAndGet','#table',ZL,_main,,"ILDOK",0);
                     _tab.IL_DOK:={? _il_prod<>0 || _il_dok*ZL.IL/_il_prod || 0 ?}
                  || _tab.IL_DOK:=ZL.ILDOK
                  ?};

                  _tab.IL_LIM:=_sum_il;
                  _tab.IL_POBR:=_pob.RW;
                  _tab.IL_ZWR:=_pob.ZW;
                  _tab.ILOSC:=_pob.IL;
                  _tab.WAR_POBR:=_pob.WAR_RW;
                  _tab.WAR_ZWR:=_pob.WAR_ZW;
                  _tab.WARTOSC:=_pob.WAR;
                  _tab.add()
               ?};

               obj_del(_pob)
            ?};
            ZLIM.next()
         !}
      ?};
      ZL.next()
   !}
?};

:: Opcjonalne usunięcie zapisów z zerowymi pobraniami
{? _par.ZEROWE='N'
|| _tab.prefix();
   {? _tab.first()
   || {!
      |? {? _tab.IL_POBR=0 & _tab.IL_ZWR=0
         || _tab.del()
         || _tab.next()
         ?}
      !}
   ?}
?};

:: Podsumowanie całości
_suma_all_war:=_suma_all_wtk:=0;

{? _env.wariant='S'
||
   _towary:=sql('
      select distinct
         :_a.M_REF as M_REF,
         :_a.M_KOD as M_KOD,
         :_a.M_NAZ as M_NAZ,
         :_a.JM as JM
      from :_a
   ',_tab);

   _tab.index(_ndxt);
   {? _towary.first()
   || {!
      |?
::       zapis agregujący
         _tab.clear();
         _tab.blank();
         _tab.M_REF:=_towary.M_REF;
         _tab.M_KOD:=_towary.M_KOD;
         _tab.JM:=_towary.JM;
         _tab.LABEL1:=_towary.M_KOD;
         _tab.LABEL2:=_towary.M_NAZ;
         _tab.ZNACZNIK:='X';
         _tab.add();
         _tab.cntx_psh();
::       suma do agregacji i wskazanie na zapis nadrzędny
         _parent:=#_tab.ref();
         _suma_il:=_suma_tk:=_suma_lim:=_suma_war:=_suma_wtk:=0;
         _tab.prefix(_towary.M_REF);
         {? _tab.first()
         || {!
            |?
               {? _tab.ZNACZNIK<>'X'
               || _ilwyk:={? _env.licz_il='D' || _tab.IL_DOK || _tab.IL_WYK ?};
                  _tab.IL_TOKU:={? _ilwyk>=_tab.IL_PLAN || 0 |? _ilwyk=0 || _tab.ILOSC || _tab.ILOSC-_tab.IL_LIM*_ilwyk/_tab.IL_PLAN ?};
                  {? _tab.IL_TOKU<0 || _tab.IL_TOKU:=0 ?};
                  _cena:={? _tab.ILOSC=0 || 0 || _tab.WARTOSC/_tab.ILOSC ?};
                  _tab.WAR_TOKU:={? _ilwyk>=_tab.IL_PLAN || 0 |? _ilwyk=0 || _tab.WARTOSC || _tab.WARTOSC-_tab.IL_LIM*_cena*_ilwyk/_tab.IL_PLAN ?};
                  {? _tab.WAR_TOKU<0 || _tab.WAR_TOKU:=0 ?};

                  _suma_il+=_tab.ILOSC;
                  _suma_tk+=_tab.IL_TOKU;
                  _suma_lim+=_tab.IL_LIM;
                  _suma_war+=_tab.WARTOSC; _suma_all_war+=_tab.WARTOSC;
                  _suma_wtk+=_tab.WAR_TOKU; _suma_all_wtk+=_tab.WAR_TOKU;
                  _tab.PARENT:=_parent;
                  _tab.LABEL1:=_tab.ZL_SYM;
                  _tab.LABEL2:=_tab.ZL_OPIS;
                  _tab.put()
               ?};
               _tab.next()
            !}
         ?};
         _tab.cntx_pop();
         _tab.ILOSC:=_suma_il;
         _tab.IL_TOKU:=_suma_tk;
         _tab.IL_LIM:=_suma_lim;
         _tab.WARTOSC:=_suma_war;
         _tab.WAR_TOKU:=_suma_wtk;
         _tab.put();
         _towary.next()
      !}
   ?}
||
   _zlec:=sql('
      select distinct
         :_a.ZL_REF as ZL_REF,
         :_a.ZL_SYM as ZL_SYM,
         :_a.ZL_OPIS as ZL_OPIS,
         :_a.IL_PLAN as IL_PLAN,
         :_a.IL_WYK as IL_WYK,
         :_a.IL_DOK as IL_DOK
      from :_a
   ',_tab);

   _tab.index(_ndxzm);
   {? _zlec.first()
   || {!
      |?
::       zapis agregujący
         _tab.clear();
         _tab.blank();
         _tab.ZL_REF:=_zlec.ZL_REF;
         _tab.ZL_SYM:=_zlec.ZL_SYM;
         _tab.LABEL1:=_zlec.ZL_SYM;
         _tab.LABEL2:=_zlec.ZL_OPIS;
         _tab.IL_PLAN:=_zlec.IL_PLAN;
         _tab.IL_WYK:=_zlec.IL_WYK;
         _tab.IL_DOK:=_zlec.IL_DOK;
         _tab.ZNACZNIK:='X';
         _tab.add();
         _tab.cntx_psh();
::       suma do agregacji i wskazanie na zapis nadrzędny
         _parent:=#_tab.ref();
         _suma_il:=_suma_tk:=_suma_lim:=_suma_war:=_suma_wtk:=0;
         _tab.prefix(_zlec.ZL_REF);
         {? _tab.first()
         || {!
            |?
               {? _tab.ZNACZNIK<>'X'
               || _ilwyk:={? _env.licz_il='D' || _tab.IL_DOK || _tab.IL_WYK ?};
                  _tab.IL_TOKU:={? _ilwyk>=_tab.IL_PLAN || 0 |? _ilwyk=0 || _tab.ILOSC || _tab.ILOSC-_tab.IL_LIM*_ilwyk/_tab.IL_PLAN ?};
                  {? _tab.IL_TOKU<0 || _tab.IL_TOKU:=0 ?};
                  _cena:={? _tab.ILOSC=0 || 0 || _tab.WARTOSC/_tab.ILOSC ?};
                  _tab.WAR_TOKU:={? _ilwyk>=_tab.IL_PLAN || 0 |? _ilwyk=0 || _tab.WARTOSC || _tab.WARTOSC-_tab.IL_LIM*_cena*_ilwyk/_tab.IL_PLAN ?};
                  {? _tab.WAR_TOKU<0 || _tab.WAR_TOKU:=0 ?};

                  _suma_il+=_tab.ILOSC;
                  _suma_tk+=_tab.IL_TOKU;
                  _suma_lim+=_tab.IL_LIM;
                  _suma_war+=_tab.WARTOSC; _suma_all_war+=_tab.WARTOSC;
                  _suma_wtk+=_tab.WAR_TOKU; _suma_all_wtk+=_tab.WAR_TOKU;
                  _tab.PARENT:=_parent;
                  _tab.LABEL1:=_tab.M_KOD;
                  _tab.LABEL2:=_tab.M_NAZ;
                  _tab.put()
               ?};
               _tab.next()
            !}
         ?};
         _tab.cntx_pop();
         _tab.ILOSC:=_suma_il;
         _tab.IL_TOKU:=_suma_tk;
         _tab.IL_LIM:=_suma_lim;
         _tab.WARTOSC:=_suma_war;
         _tab.WAR_TOKU:=_suma_wtk;
         _tab.put();
         _zlec.next()
      !}
   ?}
?};

_tab.index(_ndxp);
_wer:=_tab.mk_sel('Stany surowców na produkcji w toku'@+' — '+'oddział: %1'@[ST.ODDZ_KOD],
                  'P',0,'#prodstat'+(-_env.wariant),1,,,1
);
_tab.win_fld(_wer,,'LABEL1',,,15,,,
   {? _env.wariant='S' || 'Surowiec/zlecenie'@ || 'Zlecenie/surowiec'@ ?},,
   {? _env.wariant='S' || 'Kod surowca / symbol zlecenia'@ || 'Symbol zlecenia / kod surowca'@ ?}
);
_tab.win_fld(_wer,,'LABEL2',,,30,,,'Opis'@,,'Nazwa surowca / opis zlecenia'@);
_tab.win_fld(_wer,,'JM',,,5);
::_tab.win_fld(_wer,,'M_KOD');
::_tab.win_fld(_wer,,'ZL_SYM');
::_tab.win_fld(_wer,,'IL_PLAN',,,-15,ST.DOKL,,'Ilość planowana'@);
::_tab.win_fld(_wer,,'IL_WYK',,,-15,ST.DOKL,,'Ilość wykonana'@);
::_tab.win_fld(_wer,,'IL_DOK',,,-15,ST.DOKL,,'Ilość wg dokumentów'@);
_tab.win_fld(_wer,,'IL_LIM',,,-15,ST.DOKL,,'Limitowane'@,,'Limitowane'@);
_tab.win_fld(_wer,,'ILOSC',,,-15,ST.DOKL,,'Pobrane'@,,'Pobrane do produkcji na zlecenia'@);
_tab.win_fld(_wer,,'IL_TOKU',,,-15,ST.DOKL,,'W toku'@,,'Pobrane na zlecenia i nie rozliczone w produkcie'@);
_tab.win_fld(_wer,,'WARTOSC',,,-15,2,,'Wartość pobrań'@,,'Pobrane do produkcji na zlecenia'@);
_tab.win_fld(_wer,,'WAR_TOKU',,,-15,2,,'Wartość w toku'@,,'Pobrane na zlecenia i nie rozliczone w produkcie'@);

_tab.win_sfld(_wer,,'WARTOSC',,VAR,'REAL',,2,,1,'Suma wartości pobrań'@);
_tab.win_sfld(_wer,,'WAR_TOKU',,VAR,'REAL1',,2,,1,'Suma wartości w toku'@);

_tab.win_act(_wer,,'Formuła','Zwiń/roz&wiń'@@,,'Zwiń/rozwiń wszystkie rekordy'@,"exec('zwin_rozwin','#tree')",,,,,,'W',,'target=window');
_formula:="
   _tab:=params_get().env.tab;
   _wariant:=params_get().env.wariant;
   VAR.cntx_psh();
   VAR.A_ZLEC:=exec('FindAndGet','#table',ZL,_tab.ZL_REF,,\"ref()\",null());
   {? VAR.A_ZLEC<>null() || exec('zlst_dok','magdok_prod',1) ?};
   VAR.cntx_pop();
   ~~
";
_tab.win_act(_wer,,'Formuła','Doku&menty'@@,,'Pozycje dokumentów dotyczące surowców zlecenia'@,_formula,,,,,,'M');
_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','$%1'['Ilość surowca w toku równa ilości pobranej'@])",,,,,,,,'target=window');
_formula:="
   _tab:=params_get().env.tab;
   _wariant:=params_get().env.wariant;
   {? _a
   || {? _tab.ZL_REF<>'' & ((_tab.ZNACZNIK='X' & _wariant='Z') | (_tab.ZNACZNIK<>'X' & _wariant='S'))
      || _tab.actions_grayed(cur_win(1,1),'')
      || _tab.actions_grayed(cur_win(1,1),'M')
      ?}
   ?};
   {? _tab.IL_TOKU<>0 & _tab.IL_TOKU=_tab.ILOSC || exec('findtmp','#color') || '' ?}
";
_tab.win_act(_wer,,'Rekord',,,,_formula);
_formula:="
   _tab:=params_get().env.tab;
   _wariant:=params_get().env.wariant;
   _display_m:=0;
   _display_zl:=0;
   {? _tab.ZNACZNIK='X' & _wariant='Z' & _tab.ZL_REF<>''
   || _display_zl:=1
   |? _tab.ZNACZNIK='X' & _wariant='S' & _tab.M_REF<>''
   || _display_m:=1
   |? _wariant='S' & _tab.ZL_REF<>''
   || _display_zl:=1
   |? _wariant='Z' & _tab.M_REF<>''
   || _display_m:=1
   ?};
   {? _display_zl
   || ZL.cntx_psh();
      ZL.clear();
      {? ZL.seek(_tab.ZL_REF,)
      || exec('zl_display','zl_head')
      ?};
      ZL.cntx_pop()
   ?}
";
_tab.win_act(_wer,,'Wyświetl',,,,_formula);

_tab.win_sel(_wer);

VAR.REAL:=_suma_all_war; VAR.REAL1:=_suma_all_wtk;
_tab.select();

ZL.ndx_drop(_ndx_zl);
Cntx.pop(ZL,ZLIM);
~~


\spr_ilrea
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza ilosc na przewodniki, czy ilosc pobranych/zrealizowanych limitow pozwoli
::       na zmniejszenie ilosci do wymaganej
::       Kontekst wywolania: ustawiona maska tabeli ZLIM
::   WE: _a - ZGH.ref - przewodnik
::       _b - REAL - ilosc przed zmniejszeniem
::   WY: wyliczona ilosc, do ktorej mozna zmniejszyc przewodnik
::  OLD: \spr_ilrea/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zgh:=_a;

:: ilosc przed modyfikacja:
_star_il:=_b;
:: sprawdzana ilosc po modyfikacji: ZL.IL

:: Zakladamy, ze aktualna ilosc limitowana po korektach odpowiada ilosci na zleceniu

_lim:=tab_tmp(1,
   'M','STRING[16]','$M.ref()',
   'IL_LIM','REAL','Ilość limitowana',
   'IL_POB','REAL','Ilość pobrana',
   'IL_ZRE','REAL','Ilość zrealizowana',
   'IL_MIN','REAL','Minimalna ilość na zleceniu'
);

ZLIM.index('ZGH_KM');
ZLIM.prefix(_zgh,'T');
{? ZLIM.first()
|| {!
   |? {? ZLIM.KOR=0
      ||
::       limitowane ogolem z korektami
         _lil:=exec('sum_il','zl_limit',ZLIM.ref(),0);

::       pobrane
         _zlim_pob:=(ZLIM.IL_RW-ZLIM.IL_ZW);

::       zrealizowane
         _zlim_zre:=0;
         _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
         {? _zk_p<>null()
         || ZK_P.cntx_psh();
            ZK_P.clear();
            {? ZK_P.seek(_zk_p) || _zlim_zre:=ZK_P.ILZ-ZK_P.ILP ?};
            ZK_P.cntx_pop()
         ?};

         _lim.prefix($ZLIM.KTM);
         {? _lim.first()
         || _lim.IL_LIM+=_lil;
            _lim.IL_POB+=_zlim_pob;
            _lim.IL_ZRE+=_zlim_zre;
            _lim.put()
         || _lim.M:=$ZLIM.KTM;
            _lim.IL_LIM:=_lil;
            _lim.IL_POB:=_zlim_pob;
            _lim.IL_ZRE:=_zlim_zre;
            _lim.add()
         ?}
      ?};
      ZLIM.next()
   !}
?};

_lim.prefix();

:: Wyznaczenie ilosci minimalnej zlecenia dla kazdego surowca
{? _lim.first()
|| {!
   |?
      _lim.IL_MIN:={? _lim.IL_LIM<>0
                   || {? _lim.IL_ZRE>_lim.IL_POB || _lim.IL_ZRE || _lim.IL_POB ?}*_star_il/_lim.IL_LIM
                   || 0
                   ?};
      _lim.put();
      _lim.next()
   !}
?};

:: Maksimum z minimow
_max_min:=0;
{? _lim.first()
|| {!
   |? {? _max_min<_lim.IL_MIN
      || _max_min:=_lim.IL_MIN
      ?};
      _lim.next()
   !}
?};

_max_min


\zlim_gen_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Generuje/dogeneruje limity/nielimity dla calego zlecenia, niezaleznie czy zlozone czy pojedyncze
::   WE: _a - 'T' limitowane, 'N' nielimitowane, '' lub jak brak parametru to wszystkie
::       _b - aktualne zlecenie dla ktorego uruchamiamy generowanie limity
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \zlim_gen_all/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
:: TODO: Modyfikacja ilości na zleceniu otwartym
_lim:=_a;
_zlec:=_b;

_can_continue:=1;
_result:=0;

ZL.cntx_psh();
ZL.clear();

{? ZL.seek(_zlec)
|| VAR_DEL.delete('__matakt');
   __matakt:=tab_tmp(2
      ,'REF','STRING[16]',''
      ,'NRK','INTEGER',''
      ,'ILR','REAL',''
      ,'ZKP','STRING[16]',''
      ,'ZKN','STRING[16]','');

   {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
   || ZL.index('NRNZL');
      ZL.prefix(ZL.UNRZL);
      {? ZL.first()
      || {!
         |?
            _can_continue:=exec('zlim_gen_main','zl_limit',_lim,ZL.ref());
            ZL.next() & _can_continue>0
         !}
      ?}
   || _can_continue:=exec('zlim_gen_main','zl_limit',_lim,_zlec)
   ?};
   exec('openz','open_tab',ST.ODDZ+'__');
   exec('akt_rezy','rezerwacje',,1);
   VAR_DEL.delete('__matakt')
?};
ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\komm_genlim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.28]
:: OPIS: Dodaje komunikat do KOMMa podczas generowania limitów
::   WE: _a - STRING - treść komunikatu
::       [_b] - INTEGER - numer ikony
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_msg:=_a;
_icon:=2;
{? var_pres('_b')=type_of(0) | var_pres('_b')=type_of('')
|| _icon:=_b
?};
_sect:='';
_sect:=exec('ZL','#to_string');

{? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
{? KOMM.find_msg(_msg)=0
|| KOMM.add(_msg,_icon,,1)
?};
KOMM.sect_end();
~~


\chk_zlstw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Walidacja rekordu tabeli ZLSTW (przyczyny korekt limitów)
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(ZLSTW,,'KOD','NAZ');
{? _chk=''
|| {? 1+ZLSTW.KOD='~'
   || FUN.info('Kod przyczyny korekty limitu nie może zaczynać się od znaku ''%1''.'@['~']);
      'KOD'
   |? __CHK.index(ZLSTW,_a)=''
   || ''
   || 'NAZ'
   ?}
|| _chk
?}


\del4ZLGD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Usuwa rozpiskę surowców i powiązane z nią rezerwacje dla aktualnego rekordu wybranej tabeli
::   WE: _a - NUMBER - Kontekst wywołania: [0] - ZLGD, 1 - ZGP, 2 - ZL.
::                     Dla ZLGD i ZGP usuwane są wyłącznie rezerwacje powiązane z rejestracją robocizny
::       _b - ZLGD.ref - tylko gdy _a=0, gdy nie podany bierze aktualny rekord ZLGD
::       [_c] - STRING - kod maski, na jaką archiwizować nierozpisane rezerwacje do wykoania produkcji
::----------------------------------------------------------------------------------------------------------------------
_what:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _what=0
|| _zlgd:={? var_pres('_b')=type_of(null()) || _b || ZLGD.ref() ?};
   {? _zlgd=null() || return() ?}
?};
_kodmsk:={? var_pres('_c')=type_of('') || _c || '' ?};
:: Jeżeli rezerwacje mają być archiwizowane, to tylko obsługiwana maska "bieżąca" i podana maska archiwalna
_mask:={? _kodmsk<>'' || (REZ.name()-2)+'__' || '' ?};
_continue:=1;
REZ.cntx_psh();
_rez_mask:=REZ.names();
{? _rez_mask.first()
||
   {!
   |?
      {? _mask='' |  _mask=_rez_mask.NAME | (_rez_mask.NAME-3)=_kodmsk
      || REZ.use(_rez_mask.NAME);
         {? _what=0
         || REZ.index('REFREA');
            REZ.prefix($_zlgd,)
         |? _what=1
         || REZ.index('ZLREZP2');
            REZ.prefix(ZGP.ZL,'S','R','T',$ZGP.ref(),)
         |? _what=2
         || REZ.index('ZLMREZ');
            REZ.prefix(ZL.ref())
         ?};
         {? REZ.first()
         ||
::          Dla ZLGD rezerwacje mogą być tylko w 1 masce, gdy znajdzie w pierwszej to wymuszenie końca pętli
            {? _mask='' & _what=0
            || _continue:=0
            ?};
            {!
            |?
               {? _kodmsk<>'' & REZ.ZL_REZ='R'
               ||
::                Archiwizacja rezerwacji do wykonań produkcji (zachowanie rozpiski do podglądu)
                  exec('archtymc','rezerwacje',0,'','',_kodmsk)
               ?};
::             Usunięcie rezerwacji
               _ktm:=REZ.M;
               _mg:=REZ.MG;
               _loop:=REZ.del(,1)=2;
::             Odświeżenie stanów magazynowych (tylko, gdy rezerwacjie usuwane z maski niearchiwalnej)
               {? REZ.name()=(REZ.name()-2)+'__'
               || exec('obl_stan','magazyn_stan',_ktm,1,_mg)
               ?};
               _loop
            !}
         ?}
      ?};
     _rez_mask.next() & _continue>0
   !}
?};
REZ.cntx_pop();
~~


\select_gen_zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Selekcja panelu służącego do generowania dokumentów rozliczających (dla rozliczeń do wykonań produkcji)
::----------------------------------------------------------------------------------------------------------------------
_env_gen:=__ENV_GEN;
params_set('env_gen',_env_gen);
_dk:=_env_gen.DK.TAB;

_dk.index(_env_gen.DK.NDXZLGD);
_dk.prefix();
{? _dk.first()
|| KOMM.select();
   _dk.select();
   {? _dk.first()
   || {!
      |? exec('zl_unlock','zl_common',BIT.sqlint(_dk.ZL_REF),'L');
         _dk.next()
      !}
   ?};
   unlock_r()
|| KOMM.add('Brak zarejestrowanych wykonań produkcji wymagających rozliczenia.'@);
   KOMM.select()
?};
~~


\zlim_chk_podzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Sprawdza czy do limitu/odpadu są wygenerowane dokumenty RW. Jeżeli nie to aktualizuje pole ZLIM.PODZL
::   WE: _a - ZLIM.ref()
::----------------------------------------------------------------------------------------------------------------------
_zlim:={? var_pres('_a')=type_of(null()) || _a || null() ?};
:: Sprawdzam czy sa jakies dokumenty do zlima

{? _zlim<>null()
|| _tmp:=exec('zlim_pob_il','zl_limit',$_zlim,,,0);
   {? _tmp.RW+_tmp.ZW=0
   || ZLIM.cntx_psh();
      ZLIM.use(ref_name(_zlim));
      ZLIM.clear();
      {? ZLIM.seek(_zlim)
      || ZLIM.PODZL:='';
         ZLIM.put()
      ?};
      ZLIM.cntx_pop()
   ?}
?}


\rozpRP_REZ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Rozpisanie rezerwacji warunkowych wg podzleceń i zleceń nadrzędnych
::   WE: _a - ZL.ref()
::       _b - M.ref()
::       _c - DK.ref()
::   WY: ile zarezerwowano
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_zl:=_a;
_mat:=_b;
_dk:=_c;

_nrnzl:=exec('FindAndGet','#table',ZL,_zl,,"NRNZL",0);
_nrpzl:=exec('FindAndGet','#table',ZL,_zl,,"NRPZL",0);


_nrfzl:={? ~_nrnzl & ~_nrpzl || 0
        |? ~_nrpzl           || _nrnzl
        || _nrpzl
        ?};

{? _nrfzl || _zl:=exec('FindInSet','#table','ZL','UNRZL',_nrfzl,,,,,0) ?};
{? _zl<>_a & _zl<>null()
|| ND.cntx_psh();
   DK.cntx_psh();
   ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   REZ.cntx_psh();
   DK.prefix();
   {? DK.seek(_dk)
   || _do_rez:=DK.IL;

      _end:=0;
      _zk_p:=tab_tmp(1,'ZKP','STRING[16]','');

      REZ.index('ZL');
      REZ.prefix(_zl,'Z','W',_mat,'T');
      {? REZ.first()
      || {!
         |? {? exec('FindAndGet','#table',ZLIM,$REZ.ZK_P().ZLIM,,"ZLEC",null())=_zl
            || _zk_p.clear();
               _zk_p.blank();
               _zk_p.ZKP:=$ZK_P.ref();
               _zk_p.add(1)
            ?};
            REZ.next()
         !}
      ?};
      _zk_p.clear();
      {? _zk_p.first()
      || {!
         |? ZK_P.prefix();
            {? ZK_P.seek(_zk_p.ZKP)
            || _ilp:=ZK_P.ILP-ZK_P.ILRB;
               _ilw:=ZK_P.ILRW;
               {? _ilp>0
               || {? _ilp>=_do_rez
                  || _ilr:=_do_rez;
                     _do_rez:=0
                  || _ilr:=_ilp;
                     _do_rez-=_ilp
                  ?}
               || _ilr:=0
               ?};
               {? _ilr>0
               || _res+=_ilr;
                  _end:=1;
                  _dost:=DK.N().MAG().TYP*'DOST';
                  exec('update','rezerwacje','ZK_P',ZK_P.ref(),DK.N().MAG,DK.M,_ilr,{? _dost || DK.SRDK || '' ?},'B',
                   ,{? _dost || 1 || 5 ?},ZK_P.NR,'',,,,,DK.N().D,ZK_P.DP,DK.DK_C);
                  {? _ilw>0 & _ilr>0
                  || _min:=_ilw-(_ilp-_ilr);
                     exec('minusrez','rezerwacje',ZK_P.ref(),_min,1)
                  ?};
                  exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1);
                  exec('aktznzkn','zamsiw_nag',ZK_P.N,1)
               ?}
            ?};
            _do_rez>0 & _zk_p.next()
         !}
      ?};
      obj_del(_zk_p)
   ?};
   ZK_N.cntx_pop();
   ZK_P.cntx_pop();
   REZ.cntx_pop();
   ND.cntx_pop();
   DK.cntx_pop();
   {? ~_end || _res:=exec('rozpRP_REZ','zl_limit',_zl,_mat,_dk) ?}
?};
_res


\lim_kor_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Tworzy korektę do wskazanego limitu
::   WE: _a - ZLIM.ref()
::       _b - Ilość na korekcie
::       _c - przyczyna korekty (ZLSTW.ref())
::       [_d] - INTEGER - [0]/1 - czy wygenerowane korekty powinny być od razu akceptowane, domyślnie nie
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;
_il:=_b;
_zlstw:=_c;

_accept:=0;
{? var_pres('_d')=type_of(0)
|| _accept:=_d
?};
_result:=0;

_stan_zl:=exec('FindAndGet','#table',ZL,ZLIM.ZLEC,,"ZL.STAN",'');

ZLIM.cntx_psh();
ZLIM.clear();
{? _zlim<>null & ZLIM.seek(_zlim)
||
:: Sprawdzam czy do limitu są niezaakceptowane korekty
   ZLIM.cntx_psh();
   ZLIM.index('ZGP_KM');
   ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.NR);
   _kor_nact:=0;
   {? ZLIM.first()
   || {!
      |? {? ZLIM.AKC<>'T' || _kor_nact:=1 ?};
         ZLIM.next()
      !}
   ?};
   ZLIM.cntx_pop();
   {? _kor_nact
   ||
::      FUN.emsg('Nie można korygować pozycji, do której jest niezaakceptowana korekta.'@);
      ZLIM.cntx_pop();
      return(0)
   ?};
   {? (ZLIM.KOR=0) & (ZLIM.AKC='T') & _zlstw<>null() & _stan_zl<>'Z'
   ||
      _nr:=ZLIM.NR;
      DK_C.cntx_psh();
      {? ZLIM.DK_C<>null() & ref_name(ZLIM.DK_C)<>DK_C.name() || DK_C.use(ref_name(ZLIM.DK_C)) ?};
      _ktm:=ZLIM.KTM;
      _kor:=ZLIM.NR;
      _pfaz:=ZLIM.PFAZ;
      _lim:=ZLIM.LIMIT;
      _so:=ZLIM.SO;
      _partia:=ZLIM.PARTIA;
      _tmat:=ZLIM.TMAT;
      _zldod:=ZLIM.ZLDOD;
      _zlec:=ZLIM.ZLEC;
      _grop:=ZLIM.GROP;
      _wyd:=ZLIM.WYD;
      _mg:=ZLIM.MG;
      _startd:=ZLIM.STARTD;
      _startt:=ZLIM.STARTT;
      _zgp:=ZLIM.ZGP;
      _dk_c:=ZLIM.DK_C;
      _mode_dst:=ZLIM.MODE_DST;

      ZLIM.blank();
      ZLIM.KTM:=_ktm;
      ZLIM.KOR:=_kor;
      ZLIM.PFAZ:=_pfaz;
      ZLIM.LIMIT:=_lim;
      ZLIM.SO:=_so;
      ZLIM.PARTIA:=_partia;
      ZLIM.TMAT:=_tmat;
      ZLIM.ZLDOD:=_zldod;
      ZLIM.ZLEC:=_zlec;
      ZLIM.GROP:=_grop;
      ZLIM.NR:=exec('ZLIM_NR_blank','zl_limit',ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.GROP);
      ZLIM.WYD:=_wyd;
      ZLIM.MG:=_mg;
      ZLIM.STARTD:=_startd;
      ZLIM.STARTT:=_startt;
      ZLIM.ZGP:=_zgp;
      ZLIM.DK_C:=_dk_c;
      ZLIM.MODE_DST:=_mode_dst;
      ZLIM.LIL:=_il;
      ZLIM.AUTO='T';
      ZLIM.WHY:=_zlstw;

      _akc:=1;
      _wydz:=exec('GetZLIM_WYD','zl_limit');
      {? _accept>0 & ZLIM.SO='S'
      || _akc:=0;
::       poszukajmy nagłówka, jeśli go nie ma, to od razu zostanie stworzony (1)
         _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
            ZLIM.ZLEC,_wydz,1,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
         );
         exec('openz','open_tab',ZLIM.ZLEC().ODDZ+'__');
::       jeśli mamy nagłówek, to szukamy pozycji zamówienia na materiał z limitu.
         {? _zk_n<>null()
          & ZK_N.seek(_zk_n)
         || {? ZK_N.r_lock(1,1,1)
            || _akc:=exec('ZK_P_4_ZLIM','zamsiw_limit',_zk_n,1,,)<>null();
               ZK_N.r_unlock()
            || _msg:='Nagłówek zamówienia do zlecenia został zablokowany przez innego użytkownika.'@;
               FUN.emsg(_msg)
            ?}
         ?}
      ?};

      ZLIM.AKC:={? _accept>0 & _akc>0 || 'T' || 'N' ?};
      {? ZLIM.add()
      || _result:=1;
         exec('add__zlim','zl_limit')
      ?};
      DK_C.cntx_pop()

   || {? ZLIM.AKC='N' &  _stan_zl<>'Z'
      ||
::       Limit niezaakceptowany, zwiększam ilość
         ZLIM.LIL+=_il;
         _result:=ZLIM.put()
      |? _stan_zl='Z'
      || FUN.info('Nie można wykonać korekty dla zlecenia zamkniętego.'@)
      |? ZLIM.KOR<>0
      || FUN.info('Nie można wykonać korekty do korekty.'@)
      || FUN.info(
            {? ZLIM.AUTO='T'
            || 'Limit jest jeszcze niezatwierdzony, więc można go poprawiać.\n'
               'Korekta stosowana jest do limitów zatwierdzonych.'@
            || 'Limit jest jeszcze niezatwierdzony.\n'
               'Korekta stosowana jest do limitów zatwierdzonych.'@
            ?}
         )
      ?}
   ?}
?};
ZLIM.cntx_pop();
_result


\icon_src
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Ikonka dla rezerwacji warunkowych
::   WY: ikonka
::----------------------------------------------------------------------------------------------------------------------
_zlim:=exec('FindAndGet','#table',ZLIM,cur_tab(1,1).REF,,,null());
 _mat:=exec('FindAndGet','#table',ZLIM,cur_tab(1,1).REF,,"KTM",null());
_nrnzl:=exec('FindAndGet','#table',ZLIM,cur_tab(1,1).REF,,"ZLEC().NRNZL",0);
_mask:=ref_name(cur_tab(1,1).REF);
{? _zlim<>null() & _nrnzl<>0
|| _pod:=0;
   ZL.cntx_psh();
   ZL.index('NRNZL');
   ZL.prefix(_nrnzl,);
   {? ZL.first() & ZL.find_tab('first','KTM',,'=',_mat)
   || {!
      |? _pod:=~(ZL.RODZAJ='N' | ZL.RP<>'T');
         ~_pod & ZL.find_tab('next','KTM',,'=',_mat)
      !}
   ?};
   ZL.cntx_pop();
   {? ~_pod
   || exec('pusta','#icon')
   || _zk_p:=exec('FindInSet','#table','ZK_P','ZLIM',_zlim,_mask,,,,null());
      _rp_rez:={? _zk_p<>null() || exec('FindInSet','#table','REZ','ZK_P','W',_zk_p,"@.REZ.RP_REZ",,,'N') || 'N' ?};
      {? _rp_rez='N'
      || exec('pusta','#icon')
      || 'xwin16.png:11'
      ?}
   ?}
|| exec('pusta','#icon')
?}


\chk_tmat_mag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Sprawdza, czy zlecenie posiada surowiec limitowany powiązany z podzleceniem raportowanym na magazyn
::   WE: _a - ZL.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_res:=0;
ZL.cntx_psh();
ZL.clear();
{? ZL.seek(_a)
|| ZLIM.cntx_psh();
   exec('openmask','zl_common',ZL.ref());
   ZLIM.clear();
   ZLIM.index('ZKK');
   ZLIM.prefix(ZL.ref(),'T',0);
   {? ZLIM.first()
   ||
      {!
      |?
         {? exec('FindAndGet','#table',TMAT,ZLIM.RTMAT,,"MAG",'N')='P'
         || _res:=1
         ?};
         ZLIM.next() & _res=0
      !}
   ?};
   ZLIM.cntx_pop()
?};
ZL.cntx_pop();
_res


\action_zgp_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestrowanie zapotrzebowań do zlecenia - akcja 'Limity' do pozycji przewodnika zlecenia
::  OLD: \action_zgp_lim/!tte_pzl_dlim.fml
::----------------------------------------------------------------------------------------------------------------------
_zl:=exec('FindAndGet','#table',ZGH,ZGP.NRZLP,,"ZLEC",null());

{? exec('FindAndGet','#table',ZL,_zl,,"STAN",'')='Z'
|| exec('zgp_limity','zl_limit',ZGP.ref(),,'T')
|| {? exec('zl_lock','zl_common',_zl,'L')
   || _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TTE_PZL_DLIM';
      _args.UIDREF:=exec('FindAndGet','#table',ZGH,ZGP.NRZLP,,"uidref()",'');
      _args.AKCJA:='ZGP_LIMITY';
      _args.CONTEXT:=obj_new('ZGP'); _args.CONTEXT.ZGP:=ZGP.ref();
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_zl);
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGP.NRZLP);

      exec('mp_run','#b__box',_args)
   ?};
   exec('zl_unlock','zl_common',_zl,'L')
?};
''


\px_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Usunięcie zapisów z tabel PX_MAT i PX_SUR powiązanych ze ZLIM-mem
::   WE: _a - ZL.ref()
::       _b - ZLIM.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_zl:=_a;
_zlim:=_b;

_result:=1;

PX_MAT.cntx_psh();
PX_MAT.index('ZLIM');
PX_MAT.prefix(_zl,_zlim);
{? PX_MAT.first()
|| {!
   |? _del:=PX_MAT.del(,1);
      _result*_del;
      _del & PX_MAT.first()
   !}
?};
PX_MAT.cntx_pop();

PX_SUR.cntx_psh();
PX_SUR.index('ZLIM');
PX_SUR.prefix(_zl,_zlim);
{? PX_SUR.first()
|| {!
   |? _del:=PX_SUR.del(,1);
      _result*_del;
      _del & PX_SUR.first()
   !}
?};
PX_SUR.cntx_pop();

_result


\is_zlim_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Sprawdza, czy do pozycji (nie)limitu została przeprowadzona korekta (prosta).
::   WE: _a - $ZLIM.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
ZLIMKOR.cntx_psh();
ZLIMKOR.clear();
ZLIMKOR.index('ZLIM');
ZLIMKOR.prefix(_a);
{? ZLIMKOR.first()
|| _res:=1
?};
ZLIMKOR.cntx_pop();
_res

:Sign Version 2.0 jowisz:1045 2024/02/14 12:59:48 84415e5e2164ec204a21c0600dd58ff322a00792c639082d54f5dcc4eec6958da08c9480dc185d1c1d2ec99c215cd26d58ca08bf82d1bb68fb49750cbeec466a5129e2a0ff0ad613ee28023ce0d4e73db7bb6b4f4145d8f340161f926e12d970bb10b5294001bbf24e9de68f2766f62d632e695dedbb085c6e3c67f81e35a40c
