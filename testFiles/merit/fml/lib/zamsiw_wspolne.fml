:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zamsiw_wspolne.fml
:: Utworzony: 07.07.2015
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Obsługa zamówień sprzedaży/wewnętrznych - formuły wspólne
::======================================================================================================================


\utw_zk_tymc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przygotowanie zbiorczej tabeli zamowien
::  OLD: \utw_zk_tymc/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__zam','__uzup_z');

__uzup_z:="
ZK_P.cntx_psh();
ZK_N.cntx_psh();
ZK_P.index('NR');
ZK_P.prefix('A',1,_a);
{? ZK_P.first
|| {!
   |?
      {? ZK_P.T='Z' & ZK_P.ILP>0
      || {? ~__zam.find_key(#ZK_P.N)
         || __zam.N:=#ZK_P.N;
            __zam.ILE:=ZK_P.ILP;
            __zam.NRF:=ZK_P.NR;
            __zam.NRL:=ZK_P.NR;
            __zam.add(1)
         || __zam.ILE+=ZK_P.ILP;
            {? __zam.NRF>ZK_P.NR || __zam.NRF:=ZK_P.NR ?};
            {? __zam.NRL<ZK_P.NR || __zam.NRL:=ZK_P.NR ?};
            __zam.put(1)
         ?}
      ?};
      ZK_P.next
   !}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop()";

__zam:=tab_tmp(1,'N','INTEGER','','ILE','REAL','','NRF','INTEGER','','NRL','INTEGER','');
''


\odt_zk_tymc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: odtwarzania zbiorczej tabeli zamowien
::   WE: [_a] - ilosc do odtworzenia domyslnie 0 (odtwarza wszystkie zamowienia)
::       [_b] - domyslnie 0 (odtworzenie) 1-usuniecie zmiennych bez odtworzenia
::  OLD: \odt_zk_tymc/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

{? ~_b & var_pres('__zam')>100 & __zam.first
||
:: dla zmian ilosci na pozycjach dokumentow
   {? _a<>0
   || {? _a<0
      || _ile:=-_a;
         _ndx:=__zam.ndx_tmp('',0,'NRL',,0);
         __zam.index(_ndx);
         {? __zam.last()
         || {!
            |? {? _ile<=0
               || __zam.del()
               || _ile-=__zam.ILE;
                  __zam.prev()
               ?}
            !}
         ?};
         __zam.ndx_drop(_ndx)
      || _ile:=_a;
         _ndx:=__zam.ndx_tmp('',0,'NRF',,0);
         __zam.index(_ndx);
         {? __zam.first()
         || {!
            |? {? _ile<=0
               || __zam.del()
               || _ile-=__zam.ILE;
                  __zam.next()
               ?}
            !}
         ?};
         __zam.ndx_drop(_ndx)
      ?};
      __zam.clear();
      __zam.first()
   ?};

   echo('Aktualizacja statusów zamówień.... proszę czekać.'@);
   ZK_N.cntx_psh();
   ZK_N.prefix();
   {!
   |?
      {? __zam.N>0 & ZK_N.r_lock(1,1,1,__zam.N,) & ZK_N.seek(__zam.N,)
      || exec('obl_warz','zamsiw_nag',ZK_N.ref,0,1,1);
         ZK_N.r_unlock()
      ?};
      __zam.next
   !};
   ZK_N.cntx_pop();
   echo()
?};
VAR_DEL.delete('__zam','__uzup_z');
''


\akt_wgdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: aktualizuje rezerwacje z zamowien wg pozycji dokumentu
::   WE: _a - ref ND
::       [_b] - ref DK
::       [_c] - ilosc do rezerwacji (domyslnie z DK)
::  OLD: \akt_wgdk/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
{?_>=2 || {? type_of(_b)<>7 || _b:=null() ?} || _b:=null() ?};
{?_>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};
_onepoz:=0;
MG.cntx_psh();
DK.cntx_psh();
{? _b<>null()
|| VAR_DEL.delete('__aktzkp');

   __aktzkp:=tab_tmp(1,'MAT','STRING[16]',''
              ,'NRK','INTEGER',''
              ,'ILR','REAL','');

   _onepoz:=1;
   _ok:=DK.seek(_b)
|| DK.index('DOKMAG');
   DK.prefix(_a);
  _ok:=DK.first()
?};
{? _ok
|| {!
   |? _iledk:={? _onepoz || _c || DK.IL ?};
      {? DK.ZAM_RP<>'' & (_zd_poz:=$exec('FindAndGet','#table','ZD_RP',DK.ZAM_RP,,"ZD_RP.ZD_POZ",null()); _zd_poz<>'')
      || _do_rez:=DK.IL;
         ZK_N.cntx_psh();
         ZK_P.cntx_psh();
         REZ.cntx_psh();
         ZK_P.index('ZD_POZ');
         ZK_P.prefix(_zd_poz,);
         {? ZK_P.first()
         || {!
            |? _ilp:=ZK_P.ILP-ZK_P.ILRB;
               _ilw:=ZK_P.ILRW;
               {? _ilp>0
               || {? _ilp>=_do_rez
                  || _ilr:=_do_rez;
                     _do_rez:=0
                  || _ilr:=_ilp;
                     _do_rez-=_ilp
                  ?}
               || _ilr:=0
               ?};
               {? _ilr>0
               || _dost:=DK.N().MAG().TYP*'DOST';
                  exec('update','rezerwacje','ZK_P',ZK_P.ref(),DK.N().MAG,DK.M,_ilr,{? _dost || DK.SRDK || '' ?},'B',
                   ,{? _dost || 1 || 5 ?},ZK_P.NR,'',,,,,DK.N().D,ZK_P.DP,DK.DK_C);
                  {? _ilw>0 & _ilr>0
                  || _min:=_ilw-(_ilp-_ilr);
                     exec('minusrez','rezerwacje',ZK_P.ref(),_min,1)
                  ?};
                  exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1);
                  exec('aktznzkn','zamsiw_nag',ZK_P.N,1)
               ?};

               _do_rez>0 & ZK_P.next()
            !}
         || _do_rez:=0
         ?};
         ZK_N.cntx_pop();
         ZK_P.cntx_pop();
         REZ.cntx_pop();
         _iledk:=DK.IL-_do_rez
      ?};
::    podrezerwowanie wg podzlecenia
      {? DK.N().STAT_REJ<>'N' & _iledk>0 & DK.ZL<>null()
      || _iledk-=exec('rozpRP_REZ','zl_limit',DK.ZL,DK.M,DK.ref())
      ?};
      {? _iledk>0
      || __aktzkp.clear();
         {? __aktzkp.find_key($DK.M)
         || __aktzkp.ILR+=_iledk;
            __aktzkp.put(1)
         || __aktzkp.blank();
            __aktzkp.MAT:=$DK.M;
            __aktzkp.ILR:=_iledk;
            __aktzkp.NRK:=exec('FindInSet','#table','REZ','RODZ',DK.M,'W',"REZ.NRK",,,0);
            __aktzkp.add(1)
         ?}
      ?};
      {? _onepoz || 0 || DK.next() ?}
   !}
?};
__aktzkp.clear();
{? __aktzkp.first()
|| {!
   |? _refm:=exec('FindAndGet','#table','M',__aktzkp.MAT,,,null());
      exec('aktu_rez','rezerwacje',_refm,__aktzkp.NRK,__aktzkp.ILR);
      __aktzkp.next()
   !}
?};
{? _onepoz || VAR_DEL.delete('__aktzkp') ?};
DK.cntx_pop();
MG.cntx_pop();
1


\aktu_stu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2006]
:: OPIS: aktualizuje statusy zamowien dla podanego indeksu mat
::   WE:  _a  indeks materialowy
::       [_b] - czy tylko okreslac status zamowienia (0 - okresla wartosc i status, [1] - tylko status)
::       [_c] - czy aktualizowac stany magazynowe (0 - aktualizuje stany, 1 - korzysta z obliczonych stanow)
::  OLD: \aktu_stu/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=1 ?} || _b:=1 ?};
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};

_zam:='';
ZK_P.cntx_psh();
ZK_N.cntx_psh();
ZK_P.index('NR');
ZK_P.prefix('A',1,_a);
{? ZK_P.first
|| {!
   |?
      {? _zam*('|'+$#ZK_P.N+';')=0
      ||
         {? var_pres('__zam')>100
         || {? ~__zam.find_key(#ZK_P.N)
            || __zam.N:=#ZK_P.N;
               __zam.ILE:=ZK_P.ILP;
               __zam.NRF:=ZK_P.NR;
               __zam.NRL:=ZK_P.NR;
               __zam.add(1)
            || __zam.ILE+=ZK_P.ILP;
               {? __zam.NRF>ZK_P.NR || __zam.NRF:=ZK_P.NR ?};
               {? __zam.NRL<ZK_P.NR || __zam.NRL:=ZK_P.NR ?};
               __zam.put(1)
            ?}
         ||
            _zam+='|'+$#ZK_P.N+';';
            ZK_P.cntx_psh();
            exec('obl_warz','zamsiw_nag',ZK_P.N,,_c,_b);
            ZK_P.cntx_pop()
         ?}
      ?};
      ZK_P.next
   !}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop();
1


\GetTYPYZAM4ZL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Zwraca typ zamowienia wewnetrznego do realizacji limitow zlecenia
::   WE: [_a] - ZL.ref()
::       [_b] - ZLIM.ref()
::       [_c] - GROP.ref()
::   WY: TYPYZAM.ref() lub null() gdy nie zdefiniowany
::
::UWAGA: Formula przygotowana pod katem wdrozen, parametry _a, _b i _c nie sa obecnie wykorzystywane
:        Gdyby klient chcial miec kilka typow zamowien zaleznych np. od typu zlecenia lub cech grupy operacji
::  OLD: \GetTYPYZAM4ZL/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
::_zlec:={? var_pres('_a')=type_of(ZL.ref())   || _a || null() ?};
::_zlim:={? var_pres('_b')=type_of(ZLIM.ref()) || _b || null() ?};
::_grop:={? var_pres('_c')=type_of(GROP.ref()) || _c || null() ?};

_result:=null();
_typzam:=exec('get','#params',500011,2);
{? _typzam<>''
|| TYPYZAM.index('TYP');
   TYPYZAM.prefix('W',_typzam);
   {? TYPYZAM.first()
   || {!
      |? {? TYPYZAM.T=_typzam || _result:=TYPYZAM.ref();0 || TYPYZAM.next() ?}
      !}
   ?}
|| null()
?};
_result


\jakieupr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza rodzaj uprawnien uzytkownika do zamowien
::   WE: [_a] 0(domyslnie)-zamowienia sprzedazy 1-zamowienia wewnetrzne
::       [_b] ref uzytkownika, domyslnie OPERATOR.USER
::   WY: 0-wszystkie 1-wg uzytkownika
::  OLD: \jakieupr/zk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>7 || _b:=null ?} || _b:=null ?};

_wyn:=0;
USERS.cntx_psh();
USERS_UP.cntx_psh;
USERS_UP.index('MG');
USERS_UP.prefix({? _b=null || OPERATOR.USER || _b ?},'ZA'+{? ~_a || 'M' || 'W' ?},ST.ODDZ_KOD);
_wyn:=USERS_UP.first();
USERS_UP.cntx_pop;
USERS.cntx_pop();
_wyn


\zam_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: szukanie po zamowieniach
::       szukamy: Kontrahent, Numer, data od do, indeks materialowy, handlowiec, operator
::  OLD: \zam_find/zk_find.fml
::----------------------------------------------------------------------------------------------------------------------
_rodz:=BEER.R;
SLO.f_clear();
ZAKR.win_edit('FIND_'+{? _rodz='Z' || 'D' |? _rodz='W' || 'W' || 'Z' ?});

_oldzl:=ZL.win_sel('?');
ZL.win_sel('SLO_SL');
ZL.win_dict('SLO_SL');
ZL.actions('SLO_SL','WXY');

:: Środowisko dla okna zleceń
_env:=exec('env','zl_view');
params_set('env',_env);

:: Okna słowników
KH.cntx_psh();
HAN.cntx_psh();
M.cntx_psh();
KH.win_dict('SEL');
KH.actions('SEL','W');
HAN.win_dict('SLO');
HAN.actions('SLO','dpu:d');
M.win_dict('SEL');
M.actions('SEL','W');

ZAKR.fld_fml('K','BEFORE_EDIT',"~KHVZ.WIDOKI");
{? ZAKR.edit("{? ZAKR.DDO<ZAKR.DOD || FUN.info('Nieprawidłowy zakres dat.'@); 0 || 1 ?}")
||
   _sql_war:='';
   _sql_war:={? _rodz='' || 'where 1=1 ' || 'where TYPYZAM.R=\''+_rodz+'\' ' ?};

   {? ZAKR.K<>null & (_rodz='Z' | _rodz='') || _sql_war+='and ZK_N.KH=:_a ' ?};
   {? ZAKR.H<>null & (_rodz='Z' | _rodz='') || _sql_war+='and ZK_N.HAN=:_b ' ?};
   {? ZAKR.ZL<>null & (_rodz='W' | _rodz='') || _sql_war+='and ZK_N.ZL=:_j ' ?};
   {? ZAKR.WYD<>null & (_rodz='W' | _rodz='') || _sql_war+='and ZK_N.WYD=:_k ' ?};
   {? ZAKR.U<>null || _sql_war+='and ZK_N.US=:_c ' ?};
   {? ZAKR.N || _sql_war+='and ZK_N.NR=:_d ' ?};
   {? ZAKR.SYMZAM<>'' || _sql_war+='and ZK_N.SYM like \'%:_l%\' ' ?};
   {? ZAKR.DOD<>date(0,0,0) || _sql_war+='and ZK_N.DP between to_date(:_f) and to_date(:_g) ' ?};

   _dod_sql:=
      'union all '
      +'select distinct 2 LP,ZK_N.REFERENCE REF,ZK_N.NR NR,ZK_N.DP DP,KH.NAZ KH,HAN.NAZ HAN,ZK_RN.SWZ '
      +'WZ,ZK_RN.SFK FK,TYPYZAM.T T,ZK_N.SYM SYM from ZK_RN '
      +'join ZK_N using(ZK_RN.N,ZK_N.REFERENCE) '
      +'left join HAN using(ZK_N.HAN,HAN.REFERENCE) '
      +'join USERS using(ZK_N.US,USERS.REFERENCE) '
      +'join KH using(ZK_N.KH,KH.REFERENCE) '
      +'left join SLO using(ZK_N.WYD,SLO.REFERENCE) '
      +'join TYPYZAM using(ZK_N.T,TYPYZAM.REFERENCE) '
      +'left join @ZL using(ZK_N.ZL,ZL.REFERENCE) '
      +  {? ZAKR.FK='' & ZAKR.WZ=''
         || 'where 1=0 '
         || {? _rodz='Z' || 'where TYPYZAM.R=\'Z\' '
            |? _rodz='W' || 'where TYPYZAM.R=\'W\' '
            || 'where 1=1 '
            ?}
            +  {? ZAKR.FK<>'' & ZAKR.WZ<>''  || 'and ZK_RN.SWZ like upper(\'%:_h%\') '
                                                'and ZK_RN.SFK like upper(\'%:_i%\') '
               |? ZAKR.FK<>''                || 'and ZK_RN.SFK like upper(\'%:_i%\') '
               |? ZAKR.WZ<>''                || 'and ZK_RN.SWZ like upper(\'%:_h%\') '
               ?}
         ?};
   {? ZAKR.M<>null || _sql_war+='and ZK_P.M=:_e ' ?};
   VAR_DEL.delete('XXXZ');
   XXXZ:=
      sql('select distinct 1 LP,ZK_N.REFERENCE REF,ZK_N.NR NR,ZK_N.DP DP'
         +',case when ZK_N.KH is not null then KH.NAZ else ZL.SYM end KH'
         +',case when ZK_N.HAN is not null then HAN.NAZ else SLO.KOD end HAN,\'\' WZ,\'\' FK'
         +' ,TYPYZAM.T T,ZK_N.SYM SYM from ZK_P '
         +'right join ZK_N using(ZK_P.N,ZK_N.REFERENCE) '
         +'left join M using(ZK_P.M,M.REFERENCE) '
         +'left join HAN using(ZK_N.HAN,HAN.REFERENCE) '
         +'left join USERS using(ZK_N.US,USERS.REFERENCE) '
         +'left join KH using(ZK_N.KH,KH.REFERENCE) '
         +'left join SLO using(ZK_N.WYD,SLO.REFERENCE) '
         +'left join @ZL using(ZK_N.ZL,ZL.REFERENCE) '
         +'join TYPYZAM using(ZK_N.T,TYPYZAM.REFERENCE) '
         +_sql_war
         +_dod_sql
         +'order by LP,NR,REF'
         ,ZAKR.K,ZAKR.H,ZAKR.U,ZAKR.N,ZAKR.M,ZAKR.DOD,ZAKR.DDO,ZAKR.WZ,ZAKR.FK,ZAKR.ZL,ZAKR.WYD,ZAKR.SYMZAM);
   {| XXXZ
   |! _acr_sel:=mk_sel('Wynik wyszukiwania'@,'T',0,'zam_findzkfind',,,,,'U');
      win_fld(_acr_sel,,'NR',,,4,,1,'Nr'@);
      win_fld(_acr_sel,,'DP',,,10,,1,'Data'@);
      win_fld(_acr_sel,,'KH',,,-25,,1
        ,{? _rodz='Z' || 'Kontrahent'@ |? _rodz='W' || 'Zlecenie'@ || 'Kontrahent/Zlecenie'@ ?});
      win_fld(_acr_sel,,'HAN',,,-10,,1
        ,{? _rodz='Z' || 'Handlowiec'@ |? _rodz='W' || 'Wydział'@ || 'Handlowiec/Wydział'@ ?});
      win_fld(_acr_sel,,'WZ',,,-20,,1,'Dokument magazynowy'@);
      {? _rodz='Z' | _rodz='' || win_fld(_acr_sel,,'FK',,,-20,,1,'Dokument sprzedaży'@) ?};
      win_fld(_acr_sel,,'T',,,16,,1,'Typ zamówienia'@);
      win_fld(_acr_sel,,'SYM',,,15,,1,'Zamówienie'@);
      fld_attr('LP',2);
      fld_attr('REF',2);
      win_act(_acr_sel,0,'Formuła','Wybierz'@@,,'Przejście do znalezionego zamówienia'@
       ,"exec('pokaz_zam','zamsiw_wspolne',XXXZ.REF)",,1);
      win_act(_acr_sel,0,'Formuła','Pokaż pozycje'@@,,'Wyświetlanie pozycji znalezionego zamówienia'@
       ,"exec('disp_poz','zamsiw_wspolne',XXXZ.REF)",,0);
      win_act(_acr_sel,0,'Wyświetl',,,,"exec('disp_nag','zamsiw_wspolne',XXXZ.REF)",,0);
      win_sel(_acr_sel);
      {? last() & LP=2
      || {!
         |? {? LP=2
            || cntx_psh;
               _ref:={? prev || ref || null ?};
               cntx_pop;
               cntx_psh;
               prefix();
               {? find_key(1,NR,REF) || del ?};
               cntx_pop;
               seek(_ref)
            || 0
            ?}
         !}
      ?};
      prefix();
      select()
   |}
?};

ZL.win_sel(_oldzl);
ZL.win_sel('SLO');
ZL.actions('SLO','');

:: Okna słowników
M.cntx_pop();
HAN.cntx_pop();
KH.cntx_pop();
KH.actions('SEL','');
HAN.actions('SLO','');
M.actions('SEL','')


\disp_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietla pozycje zamowienia
::   WE:  _a  ref zamowienia
::  OLD: \disp_poz/zk_find.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_N.prefix();
_ref:=exec('FindAndGet','#table',ZK_N,_a,,,null());
{? _ref<>null & (ZK_N.prefix(); ZK_N.seek(_ref))
|| _beer:=BEER.ZK_N;
   BEER.ZK_N:=ZK_N.ref();
   BEER.ZK_N().SYM;
   ZK_P.cntx_psh();
   ZK_P.win_edit('REDZ');
   ZK_P.win_sel('DZAM');
   ZK_P.index('TYPN');
   ZK_P.prefix(ZK_N.A,'Z',_ref,1);
   exec('obl_marz','zamsiw_wspolne');
   ZK_P.select();
   ZK_P.cntx_pop();
   BEER.ZK_N:=_beer
?};
ZK_N.cntx_pop();
1


\disp_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: wyswietla naglowek zamowienia
::   WE:  _a  ref zamowienia
::  OLD: \disp_nag/zk_find.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh(); TYPYZAM.cntx_psh;
ZK_N.win_edit({? ZK_N.T().R='W' || 'REDW' || 'RED' ?});
ZK_N.prefix();
{? ZK_N.seek(exec('FindAndGet','#table',ZK_N,_a,,,null())) || ZK_N.display() ?};
ZK_N.cntx_pop(); TYPYZAM.cntx_pop;
1


\pokaz_zam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdza czy da sie przejsc do danego zamowienia
::   WE:  _a  ref zamowienia
::  OLD: \pokaz_zam/zk_find.fml
::----------------------------------------------------------------------------------------------------------------------
_oki:=1;
ZK_N.cntx_psh();
ZK_N.prefix();
_ref:=exec('FindAndGet','#table',ZK_N,_a,,,null());
ZK_N.cntx_pop();
_oki:=ZK_N.seek(_ref);
{? _oki || sel_exit() || FUN.info('Znalezione zamówienie jest poza\nustawionym w tej chwili zakresem.'@) ?};
1


\obl_marz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: oblicza marze zamowienia
::  OLD: \obl_marz/zkd.fml
::       \obl_marz/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.MAS:=0; BEER.PRS:=0; BEER.PMS:=0;
BEER.MAP:=0; BEER.PRP:=0; BEER.PMP:=0;

BEER.NET_REA:=0; BEER.BRT_REA:=0;

_wars:=0;
_warz:=0;
_warzs:=0;
_warss:=0;

_ref:=ZK_P.ref;

ZK_P.cntx_psh;
ZK_P.index('TYPN');
ZK_P.prefix(BEER.ZK_N().A,'Z',BEER.ZK_N,1);
{? ZK_P.first
|| {!
   |?
      {? ~ZK_P.END
      || _ile_sr:={? ZK_P.J2<>ZK_P.JM & ZK_P.WS2<>0
                   || _dokl:=exec('jaka_dok_mjm','jm',ZK_P.M,ZK_P.J2,ZK_P.M().J);
                      ZK_P.WS2
                   || _dokl:=exec('jaka_dok_m','jm',ZK_P.M); 1
                   ?}*ZK_P.ILP $ _dokl;
         {? _ile_sr>0 & ZK_P.SZCEN>0
         || _warsp:=ZK_P.CN*_ile_sr $2;
            _warzp:=ZK_P.ILP*ZK_P.SZCEN;
            _koszt:=(_warsp-_warzp);

            _warzs+=_warzp;
            _warss+=_warsp;
            BEER.MAS+=_koszt;
            {? _ref=ZK_P.ref
            || BEER.MAP:=_koszt;
               _warz:=_warzp;
               _wars:=_warsp
            ?}
         ?}
      ?};
      ZK_P.next
   !}
?};
ZK_P.cntx_pop;

BEER.PMP:={? _wars<>0 || BEER.MAP/_wars || 0 ?}*100 $2;
BEER.PMS:={? _warss<>0 || BEER.MAS/_warss || 0 ?}*100 $2;
BEER.PRP:={? _warz<>0 || BEER.MAP/_warz || 0 ?}*100 $2;
BEER.PRS:={? _warzs<>0 || BEER.MAS/_warzs || 0 ?}*100 $2;

BEER.NET_REA:=ZK_N.NETTO-ZK_N.NET $2;
BEER.BRT_REA:=ZK_N.BRUTTO-ZK_N.BRT $2;
{? BEER.NET_REA<0 || BEER.NET_REA:=0 ?};
{? BEER.BRT_REA<0 || BEER.BRT_REA:=0 ?};
1


\oblzkrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: oblicza ile jest zarezerwowane
::   WE: _a - ref ZK_P
::       _b - ref dostawy
::       _c - sposob obliczenia: 0-wszystkie rezerwacje 1-tylko wg wskazanej dostawy 2-tylko z dostawami
::            3-tylko z REA='NN' i SC=''
::       [_d] - 0(domyślnie) wszystkie rezerwacje 1-rezerwacje wg ILP na pozycji zamówienia
::   WY: ilosc zarezerwowana
::  OLD: \oblzkrez/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};
_wyn:=0;

ZK_RP.cntx_psh();
ZK_P.cntx_psh();
REZ.cntx_psh();

{? _d
|| REZ.index('ZK_PP');
   REZ.prefix(_a,'N','B')
|| REZ.index('ZK_P');
   REZ.prefix(_a,'B')
?};
{? REZ.first()
|| {!
   |? _wyn+={? ~_c  || REZ.ILR
            |? _c=1 || {? REZ.SC=_b || REZ.ILR || 0 ?}
            |? _c=2 || {? REZ.SC<>'' || REZ.ILR || 0 ?}
            |? _c=3 || {? REZ.REA<>'T' & REZ.SC='' || REZ.ILR || 0 ?}
            ?};
      REZ.next()
   !}
?};

ZK_RP.cntx_pop();
ZK_P.cntx_pop();
REZ.cntx_pop();

_wyn


\delerrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: usuwa bledne zapisy w tabeli REZ
::  OLD: \delerrez/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_mat:=tab_tmp(1,'MAT','STRING[16]','');
_buf:=tab_tmp(2,'ZKN','STRING[16]','','REA','STRING[30]','');
ZK_N.cntx_psh();
ZK_P.cntx_psh();
ZK_RP.cntx_psh();
ZK_RN.cntx_psh();
REZ.cntx_psh();
:: usunięcie zapisów wg nieistniejących sesji
REZ.index('SESID');
REZ.prefix('T');
{? REZ.first()
|| {!
   |? _sesid:=1-REZ.SESID;
      _ref:=REZ.ref(); _next:=REZ.next();
      REZ.cntx_psh();
      REZ.prefix();
      {? REZ.seek(_ref) & REZ.ses_info(_sesid,'log_num')=-1
      || _mat.clear();
         {? ~_mat.find_key($REZ.M)
         || _mat.blank();
            _mat.MAT:=$REZ.M;
            _mat.add(1)
         ?};
         ZK_RP.index('REZ');
         ZK_RP.prefix(_ref);
         {? ZK_RP.first()
         || {!
            |? {? ZK_RP.N=null()
               || _zkn:=exec('FindAndGet','#table',ZK_P,$ZK_RP.P,,"$N",'');
                  _buf.clear();
                  {? _zkn<>'' & ~_buf.find_key(_zkn,REZ.REFREA,)
                  || _buf.blank();
                     _buf.ZKN:=_zkn;
                     _buf.REA:=REZ.REFREA;
                     _buf.add(1)
                  ?};
                  ZK_RP.del()
               || ZK_RP.next()
               ?}
            !}
         ?};
         REZ.del()
      ?};
      REZ.cntx_pop();
      _next
   !}
?};
_buf.clear();
{? _buf.first()
|| {!
   |? exec('anul_bez','zamsiw_rea',exec('FindAndGet','#table',ZK_N,_buf.ZKN,,,null()),,_buf.REA);
      _buf.next()
   !}
?};

:: usunięcie zapisów wg rezerwacji do nagłówka zamówienia
REZ.index('NRK');
REZ.prefix('Z');
{? REZ.first()
|| {!
   |? {? REZ.ZK_P=null() & REZ.ZK_N<>null() &  REZ.NRPOZ>0
      || ZK_P.index('NAG');
         ZK_P.prefix(REZ.ZK_N,REZ.NRPOZ);
         {? ~ZK_P.first()
         || _mat.clear();
            {? ~_mat.find_key($REZ.M)
            || _mat.blank();
               _mat.MAT:=$REZ.M;
               _mat.add(1)
            ?};
            REZ.del()
         || REZ.next()
         ?}
      || REZ.next()
      ?}
   !}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop();
REZ.cntx_pop();
ZK_RP.cntx_pop();
ZK_RN.cntx_pop();
_mat.clear();
{? _mat.first()
|| MG.cntx_psh();
   {!
   |? _refm:=exec('FindAndGet','#table',M,_mat.MAT,,,null());
      MG.index('MAG');
      MG.prefix(ST.ODDZ);
      {? MG.first()
      || {!
         |? exec('obl_stan','magazyn_stan',_refm,1,MG.ref());
            MG.next()
         !}
      ?};
      _mat.next()
   !};
   MG.cntx_pop()
?};
obj_del(_buf);
obj_del(_mat);
~~


\czy_dost_ded
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.10]
:: OPIS: Informuje czy sa pozycje zamowienia sprzedazy powiazane z dostawa dedykowana
::  OLD: \czy_dost_ded/zkd.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_P.cntx_psh();
ZK_P.index('NAG');
ZK_P.prefix(ZK_N.ref());
_kont:=0;
{? ZK_P.first()
|| {!
   |?
      {? ZK_P.ZD_POZ<>''
      ||
         exec('zdp_info','zamsiw_poz');
         FUN.info('Pozycja %1 powiązana z dostawą dedykowaną %2.'@[$ZK_P.POZ,ZK_Z.ZDP_INFO]);
         0
      ||
         ZK_P.next
      ?}
   !}
?};
ZK_P.cntx_pop();
1


\oneuprzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza rodzaj uprawnien uzytkownika do zamowien i w przypadku jednego magazynu z obsl.palet dodaje go do
::       naglowka
::   WE: _a - ref ZK_N
::       _b - rodzaj uprawnien 1-uzytkownika 0-globalne
::  OLD: \oneuprzk/zk.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_N.clear();
{? ZK_N.seek(_a) & ZK_N.MG=null
|| USERS_UP.cntx_psh;
   USERS_UP.index('MG');
   USERS_UP.prefix({? _b || OPERATOR.USER || null ?},'ZA'+{? ZK_N.T().R='Z' || 'M' || 'W' ?},ST.ODDZ_KOD);
   _mag:={? USERS_UP.first() || {? USERS_UP.MG().PAL='T' || USERS_UP.MG || null ?} || null ?};
   _ile:=USERS_UP.size();
   USERS_UP.cntx_pop;
   {? _ile=1 & _mag<>null
   || ZK_N.MG:=_mag;
      ZK_N.put(1)
   ?}
?};
ZK_N.cntx_pop();
~~


\mgrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: nalicza rezerwacje dla indeksow danego magazynu
::   WE: _a-MG.ref
::  OLD: \mgrez/zkd.fml
::----------------------------------------------------------------------------------------------------------------------
SM.cntx_psh();
SM.index('SA');
SM.prefix(_a);
{? SM.first()
|| {!
   |? echo(SM.M().KTM);
      ZK_N.cntx_psh();
      ZK_P.index('NRKOL');
      ZK_P.prefix('A','Z',SM.M);
      {? ZK_P.first()
      || {!
         |? {? ZK_P.TOP=1 & ZK_P.REZ
            || exec('rez_pozy','rezerwacje',1,1);
               exec('rez_pozy','rezerwacje',1,1)
            ?};
            ZK_P.next
         !}
      ?};
      ZK_N.cntx_pop();
      SM.next()
   !}
?};
echo();
SM.cntx_pop();
1


\aktstzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009+]
:: OPIS: aktualizacja wszystkich statusow zamowien
::   WE: [_a] 0(domyslnie)-zamowienie sprzedazy 1-zamowienie wewnetrzne
::  OLD: \aktstzam/zkd.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

_sa:=0;
ODDZ.cntx_psh();
ZK_N.cntx_psh();
ODDZ.index('KOD');
ODDZ.prefix();
{? ODDZ.first()
|| {!
   |? ZK_N.use('zknag'+ODDZ.KOD+'__');
      ZK_N.index('AA');
      ZK_N.prefix();
      {? ZK_N.first()
      || _sa+=1;
         {!
         |? {? ZK_N.r_lock(1,1,1)
            || {? ZK_N.MG<>null & {? _a || ZK_N.T().R='W' || ZK_N.T().R='Z' ?}
               || USERS_UP.cntx_psh();
                  USERS_UP.index('MG');
                  USERS_UP.prefix(null,'ZA'+{? ~_a || 'M' || 'W' ?},ODDZ.KOD,ZK_N.MG);
                  {? ~USERS_UP.first()
                  || ZK_N.MG:=null;
                     ZK_N.put(1)
                  ?};
                  USERS_UP.cntx_pop()
               ?};
               ZK_N.r_unlock()
            ?};
            ZK_N.next()
         !}
      ?};
      ODDZ.next()
   !}
?};
ODDZ.cntx_pop();
ZK_N.cntx_pop();
{? _sa
|| FUN.info('Zmieniono listę magazynów realizujących zamówienia.\n'
            'Należy odtworzyć statusy zamówień.\n\n'
            'Obszar roboczy: ADMINISTRACJA - Magazyny.'@)
?};
1


\jigsaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdzenie czy podane dwa zamówienia spelniaja kryteria podobienstwa - realizacji grupowej
::   WE: _a - zamowienie wzorzec w postaci SQL-a
::       _b - zamowienie sprawdzane
::   WY: 1 - jest ok 0 - nie
::  OLD: \jigsaw/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? (5+_a)='zknag'
|| _nokrs:=exec('get','#params',300114,2)='T';
   ZK_N.cntx_psh();
   ZK_N.clear();
   {? ZK_N.seek(_a,form(8+_a))
   || {? ZK_N.T().R='Z'
      || _kh:=ZK_N.KH;
         _odb:=ZK_N.ODB; _rab:=ZK_N.RAB;
         _wal:=ZK_N.WAL; _krs:=ZK_N.KRS;
         _pl:=ZK_N.PL; _han:=ZK_N.HAN;
         _cb:=ZK_N.CB; _tr:=ZK_N.TR; _czym:=0;
         _nip_ue:=ZK_N.NIP_UE;
         _spoblra:=ZK_N.SPOBLRAB;
         _rab_typ:=ZK_N.RAB_TYP;
         _spp:=ZK_N.SPP;
         _mjs:=ZK_N.KH_MSC;
         _mag:={? ZK_N.MG().PAL='T' || ZK_N.MG || null ?};
         _typ:=ZK_N.T;
         ZK_N.clear();
         {? ZK_N.seek(_b)
         || _wyn:=ZK_N.A='A' & ZK_N.T=_typ & ZK_N.AKC='T' & ZK_N.STAN*'REA'
             & ZK_N.KH=_kh & ZK_N.ODB=_odb & ZK_N.RAB=_rab
             & ZK_N.WAL=_wal & (ZK_N.KRS=_krs | _nokrs)
             & ZK_N.PL=_pl & ZK_N.HAN=_han
             & ZK_N.CB=_cb & ZK_N.DP<=date(ST.AR,ST.AM,0)
             & ZK_N.NIP_UE=_nip_ue
             & ZK_N.SPOBLRAB=_spoblra
             & ZK_N.RAB_TYP=_rab_typ
             & ZK_N.SPP=_spp
             & ZK_N.KH_MSC=_mjs
             & {? _mag<>null || ZK_N.MG=_mag |? ZK_N.MG<>null || ZK_N.MG().PAL='N' || 1 ?}
         ?}
      || _zlec:=ZK_N.ZL;
         _node:={? _zlec<>null() || exec('FindAndGet','#table',ZL,_zlec,,"NODE",'') || '' ?};
         _wydz:=ZK_N.WYD;
         _typ:=ZK_N.T;
         _mag:=ZK_N.MG;
         {? ZK_N.seek(_b)
         || _wyn:=ZK_N.A='A' & ZK_N.T=_typ & ZK_N.AKC='T' & ZK_N.STAN*'REA'
             & {? _zlec<>null || ZK_N.ZL=_zlec | (_node<>'' & ZK_N.ZL().NODE=_node) || 1 ?}
             & {? _wydz<>null || ZK_N.WYD=_wydz || 1 ?}
             & ZK_N.DP<=date(ST.AR,ST.AM,0)
             & (ZK_N.ZL=null() | ZK_N.ZL().STAN='O')
             & {? _mag<>null || ZK_N.MG=_mag |? ZK_N.MG<>null || ZK_N.MG().PAL='N' || 1 ?}
         ?}
      ?}
   ?};
   ZK_N.cntx_pop()
|? (5+_a)='zdnag'
|| ZD_NAG.cntx_psh();
   ZD_NAG.clear();
   {? ZD_NAG.seek(_a,form(8+_a))
   || _kh:=ZD_NAG.KH;
      _jmz:=ZD_NAG.JMZ;
      _typ:=ZD_NAG.T;
      ZD_NAG.clear();
      {? ZD_NAG.seek(_b)
      || _wyn:=(';AC'*ZD_NAG.STAN)>1 & ZD_NAG.T=_typ & ZD_NAG.STAT_REJ='T'
          & ZD_NAG.KH=_kh
          & ZD_NAG.JMZ=_jmz & ZD_NAG.DATA<=date(ST.AR,ST.AM,0)
      ?}
   ?};
   ZD_NAG.cntx_pop()
?};
_wyn


\matnamag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy dany indeks materialowy znajduje sie na uprawnionych magazynach (na choc jednym)
::   WE: _a - indeks materialowy
::       _b - ref magazynu
::   WY: 1-jest OK 0-brak
::  OLD: \matnamag/zk.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _b<>null
|| _wyn:=exec('FindInSet','#table','SM','SM',_a,_b)<>null
|| USERS_UP.cntx_psh();
   USERS_UP.index('MG');
   USERS_UP.prefix(ZK_N.US,'ZA'+{? ZK_N.T().R='Z' || 'M' || 'W' ?},ST.ODDZ_KOD);
   {? USERS_UP.first()
   || {!
      |? _wyn:=exec('FindInSet','#table','SM','SM',_a,USERS_UP.MG)<>null;
         ~_wyn & USERS_UP.next()
      !}
   || USERS_UP.prefix(null,'ZA'+{? ZK_N.T().R='Z' || 'M' || 'W' ?},ST.ODDZ_KOD);
      {? USERS_UP.first()
      || {!
         |? _wyn:=exec('FindInSet','#table','SM','SM',_a,USERS_UP.MG)<>null;
            ~_wyn & USERS_UP.next()
         !}
      ?}
   ?};
   USERS_UP.cntx_pop()
?};
_wyn


\buf_stap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zapamietuje statusy rezerwacji
::   WE: _a - ref zamowienia
::       _b - typ zamowienia
::       [_c] - czy usuwac tabelke - domyslnie 1-tak 0-nie
::       [_d] - czy kompletacja wysylki - domyslnie 0-nie 1-tak 2-tak realizacja
::  OLD: \buf_stap/zk2.fml
::----------------------------------------------------------------------------------------------------------------------

{? _>=3 || {? type_of(_c)<>1 || _c:=1 ?} || _c:=1 ?};
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};

BEER.ZK_N:=_a;
BEER.WG:=BEER.ZK_N().WG;
BEER.TYP:=_b;
{? _c
|| VAR_DEL.delete('ZKS_REZ');
   ZKS_REZ:=tab_tmp(1,'REF','INTEGER',''
             ,'REZ','INTEGER','')
?};
ZK_P.cntx_psh();
ZK_P.index('TYPN');
ZK_P.prefix('A','Z',BEER.ZK_N,1);
{? ZK_P.first()
|| {!
   |? ZKS_REZ.REF:=#ZK_P.ref();
      ZKS_REZ.REZ:=ZK_P.REZ;
      ZKS_REZ.add(1);
      {? 0 & ZK_P.REZ=0 & ZK_P.M().RODZ='T'
      || exec('add_rerez','zamsiw_poz',,_d)
      ?};
      ZK_P.next()
   !}
?};
ZK_P.cntx_pop();
''


\akt_stap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: aktualizuje poprzedni status
::   WE: _a - ref zamowienia
::       _b - typ zamowienia
::       [_c] - nowa rezerwacja w przypadku anulacji 0-nie(domyslnie) 1-tak
::       [_d] - czy kompletacja wysylki - domyslnie 0-nie 1-tak 2-tak realizacja
::       [_e] - poprawa statusu zamówienia
::  OLD: \akt_stap/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};
{? _>=5 || {? type_of(_e)<>1 || _e:=0 ?} || _e:=0 ?};

_czy_m_mg:=var_pres('__mat_mag')>100;
BEER.ZK_N:=_a;
BEER.WG:=BEER.ZK_N().WG;
BEER.TYP:=_b;
ZK_P.cntx_psh();
ZK_P.index('TYPN');
ZK_P.prefix('A','Z',BEER.ZK_N,1);
{? ZK_P.first()
|| {!
   |? {? ZK_P.REZ || exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1) ?};
      {? _e || exec('aktu_rez','rezerwacje',ZK_P.M,ZK_P.NR,ZK_P.ILZ,$ZK_P.N)
 ?};
      ZKS_REZ.prefix();
      {? ZKS_REZ.find_key(#ZK_P.ref())
      || {? ZKS_REZ.REZ=0  & ZK_P.M().RODZ='T'
         || {? _czy_m_mg
            || {? ZK_P.RMAG<>null
               || exec('admatmag','zamsiw_wspolne',$ZK_P.RMAG,$ZK_P.M)
               || USERS_UP.cntx_psh();
                  USERS_UP.index('MG');
                  USERS_UP.prefix(null,'ZA'+{? ZK_P.RODZ='W' || 'W' || 'M' ?},ST.ODDZ);
                  {? USERS_UP.first()
                  || {!
                     |? exec('admatmag','zamsiw_wspolne',$USERS_UP.MG,$ZK_P.M);
                        USERS_UP.next()
                     !}
                  ?};
                  USERS_UP.cntx_pop()
               ?}
            ?};
            exec('del_rere','zamsiw_poz',0)
         |? _c & ZKS_REZ.REZ=1 & ZK_P.M().RODZ='T'
         || exec('add_rerez','zamsiw_poz',,_d)
         ?}
      ?};
      ZK_P.next()
   !}
?};
ZK_P.cntx_pop();
1


\admatmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009]
:: OPIS: dodaje do tabelki tymczasowej pozycje do aktualizacji stanu
::   WE: _a - ref SQL-owy magazynu
::       _b - ref SQL-owy materialu
::  OLD: \admatmag/zkd.fml
::----------------------------------------------------------------------------------------------------------------------
__mat_mag.clear();
{? ~__mat_mag.find_key(_a,_b)
|| __mat_mag.blank();
   __mat_mag.MG:=_a;
   __mat_mag.M:=_b;
   __mat_mag.add(1)
?}


\jedn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2005]
:: OPIS: Formula przed na akcje ilosci okna ZK_N.WER i N.WER3
::   WE: _a - gdzie 1 - ZK_N, 2 - N
::  OLD: \jedn/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1  || {? type_of(_a)<>1 || _a:=1 ?}  || _a:=1  ?};

VAR_DEL.delete('X_Xa','X_Xb');

X_Xa:=tab_tmp(2,'KTM','STRING[50]','Indeks',
               'JM','STRING[10]','Jm',
               'IL','REAL','Ilość');
_ndx:=X_Xa.ndx_tmp('',0,'KTM',,0,'KTM',,0,'JM',,0);

_acr:=X_Xa.mk_sel('Sumy wg jednostek i materiałów'@,,0,'jednx_xa',,,,,'U');
X_Xa.win_fld(_acr,,'KTM',,,20,,,'Indeks materiałowy'@);
X_Xa.win_fld(_acr,,'JM',,,10,,,'jm'@);
X_Xa.win_fld(_acr,,'IL',,,15,3,,{? _a=1 || 'Ilość pozostała'@ || 'Ilość'@ ?});
X_Xa.win_sel(_acr);

{? _a=1
||
   ZK_P.index('TYPN');
   ZK_P.prefix(ZK_N.A,'Z',ZK_N.ref,1)
|? _a=2
||
   DK.index('DOKMAG');
   DK.prefix(ND.ref())
?};
{? {? _a=1 || ZK_P.first() |? _a=2 || DK.first() || 0 ?}
|| {!
   |?
      {? _a=1 || _mat:=ZK_P.M; _il:=ZK_P.ILP; _jm:=ZK_P.M().J; _ktm:=ZK_P.M().KTM; _kod:=ZK_P.M().J().KOD
      |? _a=2 || _mat:=DK.M;   _il:=DK.IL;    _jm:=DK.M().J;   _ktm:=DK.M().KTM;   _kod:=DK.M().J().KOD
      ?};

      X_Xa.index(_ndx);
      X_Xa.prefix(_ktm,_ktm,_kod,);
      {? X_Xa.first()
      || X_Xa.IL+=_il;
         X_Xa.put(1)
      || X_Xa.blank();
         X_Xa.KTM:=_ktm;
         X_Xa.JM:=_kod;
         X_Xa.IL:=_il;
         X_Xa.add(1)
      ?};

      JM.cntx_psh();
      JM.index('KOD');
      {? JM.first()
      || {!
         |?
            {? _jm<>JM.ref() & (_wsp:=exec('prz','jm',_mat,_jm,JM.ref))<>0
            || X_Xa.index(_ndx);
               X_Xa.prefix(_ktm,_ktm,JM.KOD,);
               {? X_Xa.first()
               || X_Xa.IL+=_il*_wsp;
                  X_Xa.put(1)
               || X_Xa.blank();
                  X_Xa.KTM:=_ktm;
                  X_Xa.JM:=JM.KOD;
                  X_Xa.IL:=_il*_wsp;
                  X_Xa.add(1)
               ?}
            ?};
            JM.next()
         !}
      ?};
      JM.cntx_pop();

      {? _a=1 || ZK_P.next() |? _a=2 || DK.next() || 0 ?}
   !}
?};
X_Xb:=sql('select JM, sum(IL) IL from :_a group by JM',X_Xa);
_acb:=X_Xb.mk_sel('Sumy wg jednostek'@,,0,'jednx_xb',,,,,'U');
X_Xb.win_fld(_acb,,'JM',,,30,,,'jm'@);
X_Xb.win_fld(_acb,,'IL',,,15,3,,{? _a=1 || 'Ilośc pozostała'@ || 'Ilość'@ ?});
X_Xb.win_sel(_acb);

X_Xa.prefix();
X_Xa.first();
_grp:=$('grp_disp(X_Xa,\''+_acr+'\')');
_nam:={? _a=1
      || 'Ilości na zamówieniu wg jednostek miar'@
      || 'Ilości na dokumencie wg jednostek miar'@
      ?};
_sel:=X_Xb.grp_make(_nam,,'zk_jedn_grp');
X_Xb.grp_sel(_sel,X_Xb,_acb,,_grp,0,0,10,,,,,'maximized_with_title');
X_Xb.grp_splt(_sel,,'vertical','ilosc');
X_Xb.grp_sel(_sel,X_Xa,_acr,,,0,12,0,,,,,'maximized_with_title');
X_Xb.win_sel(_sel);

X_Xb.select();
X_Xa.ndx_drop(_ndx);
VAR_DEL.delete('X_Xa');
VAR_DEL.delete('X_Xb');
''


\zam_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009]
:: OPIS: podglad opisu dodatkowego dla zamowien sprzedazy
::  OLD: \zam_opis/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.memo_get(,'UW');
ZK_N.memo_vie(,'UW');
1


\zk_n_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: wyswietlanie zalacznikow do zamowien klienta i wewnetrznych
::  OLD: \zk_n_zal/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZK_N.name+2='__'
|| exec('sel_dok','dokum','ZK_N',,ZK_N.STAT_REJ='A',,1)
|| exec('sel_dok','dokum','ZK_N',0,1,,1)
?};
''


\zam_arch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2006]
:: OPIS: archiwizuje lub przywraca z archiwum zamówienia
::   WE: [_a] - pytania (1-tak, 0-nie, 2-grupa, domyślnie 1)
::   WY: ref sql-owy zamówienia lub pusty string
::  OLD: \zam_arch/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_msgs:={? _>0 & type_of(_a)=1 || _a || 1 ?};

_przywr:=0;
{? _msgs<2 || exec('zam_arch_InitRes','zamsiw_wspolne') ?};

{? exec('FindInSet','#table','OKR','OKR',ZK_N.DP~1,REF.FIRMA)=null()
|| {? _msgs=1
   || FUN.info('W systemie nie zdefiniowano okresu dla roku %1.\nArchiwizacja niemożliwa.'@[$(ZK_N.DP~1)])
   |? _msgs=2
   || exec('add_kom','#message'
        ,'W systemie nie zdefiniowano okresu dla roku %1. Archiwizacja zamówienia %2 niemożliwa.'@[$(ZK_N.DP~1),ZK_N.SYM]
        ,4,'Archiwizacja zamówień',__lp+=1)
   ?}

|? exec('eann2zk','magdok_wspolne',ZK_N.ref())<>''
|| {? _msgs=1
   || FUN.info('Zamówienie przesłane na urządzenie mobilne.\nArchiwizacja niemożliwa.'@)
   |? _msgs=2
   || exec('add_kom','#message'
        ,'Zamówienie %1 przesłane na urządzenie mobilne. Archiwizacja niemożliwa.'@[ZK_N.SYM]
        ,4,'Archiwizacja zamówień',__lp+=1)
   ?}
|? ZK_N.LIM='T' & ZK_N.ZL<>null() & ZK_N.A='A' & ZK_N.ZL().STAN<>'Z'
|| {? _msgs=1
   || FUN.info('Zamówienie dotyczy zlecenia, które nie zostało jeszcze zamknięte.\nArchiwizacja niemożliwa.'@)
   |? _msgs=2
   || exec('add_kom','#message'
        ,'Zamówienie %1 dotyczy zlecenia, które nie zostało jeszcze zamknięte. Archiwizacja niemożliwa.'@[ZK_N.SYM]
        ,4,'Archiwizacja zamówień',__lp+=1)
   ?}
|? ZK_N.LIM='T' & ZK_N.ZL<>null() & ZK_N.A='Z' & ZK_N.ZL().STAN='Z'
|| {? _msgs=1
   || FUN.info('Zamówienie dotyczy zlecenia, które jest zamknięte.\nPrzywrócenie z archiwum niemożliwe.'@)
   |? _msgs=2
   || exec('add_kom','#message'
        ,'Zamówienie %1 dotyczy zlecenia, które jest zamknięte. Przywrócenie z archiwum niemożliwe.'@[ZK_N.SYM]
        ,4,'Przywrócenie zamówień',__lp+=1)
   ?}
|? ZK_N.A='Z' & ZK_N.IDABSTOR<>0
|| {? _msgs=1
   || FUN.info('Zamówienie pochodzi z AbStore.\nPrzywrócenie z archiwum niemożliwe.'@)
   |? _msgs=2
   || exec('add_kom','#message'
        ,'Zamówienie %1 pochodzi z AbStore. Przywrócenie z archiwum niemożliwe.'@[ZK_N.SYM]
        ,4,'Przywrócenie zamówień',__lp+=1)
   ?}
|? exec('zam_lock','zamsiw_nag')
||
   ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   ZK_RN.cntx_psh();
   ZK_RP.cntx_psh();
   {? ZK_N.A='A' | ZK_N.A='Z' & ZK_N.name()=(ZK_N.name()-2)+'__'
   || exec('delezkrparch','zamsiw_rea',ZK_N.ref());
      {? exec('zam_mod','zamsiw_nag',3) & exec('zam_lock','zamsiw_nag',0) & ZK_N.r_lock(1,1,1)
      || exec('del_palz','zamsiw_palety',ZK_N.ref());
         _ref:=ZK_N.ref();
         _rok:=ZK_N.DP~1;
         _sym:=ZK_N.SYM;
         ZK_N.cntx_psh();
         ZK_N.clear();
         _Ido:=do_state()=0;
         {? _Ido || do() ?};
         _result:=exec('one_zamk','zamsiw_wspolne',ZK_N.ref,ZK_N.EZAPOT,ZK_N.OBI_POW);
         {? _result<>'' & _msgs=2
         || exec('add_kom','#message'
             ,'Zamówienie %1 przeniesiono do archiwum.'@[_sym]
             ,38,'Archiwizacja zamówień',__lp+=1)
         ?};
         {? _Ido || {? ~end() || _result:='' ?} ?};
         ZK_N.cntx_pop();
         ZK_N.r_unlock()
      ?}
   |? ZK_N.A='Z'
   || _przywr:=1;
      {? {? ZK_N.sel_size()=0
         || (_msgs<>1 | FUN.ask('Czy przywrócić status aktywności danego zamówienia?'@))
            & exec('zam_lock','zamsiw_nag',0) & ZK_N.r_lock(1,1,1)
         || exec('zam_lock','zamsiw_nag',0) & ZK_N.r_lock(1,1,1)
         ?}
      ||
         ZK_N.cntx_psh();
         _ok:=1;
         {? 1 | ZK_N.AKC='T'
         || _kh:=ZK_N.KH;
            _grklim:=ZK_N.KH().GRKH().KLIM;
            _brutto:=ZK_N.BRUTTO;
            exec('openz_psh','open_tab');
            exec('openz','open_tab',(1+(ZK_N.name()+3))+'__');
            _klim:=__War_f('KH_DOD','KLIM',_kh); {? ~_klim || _klim:=_grklim ?};
            _ok:=exec('lim_kred','limit_kredyt',_kh,date(),INFO.NAROD,1,_klim,_brutto,,ZK_N.name());
            exec('openz_pop','open_tab')
         ?};
         {? _ok=1
         || _sym:=ZK_N.SYM;
            do();
            _result:=exec('one_zamk','zamsiw_wspolne',ZK_N.ref,ZK_N.EZAPOT,ZK_N.OBI_POW);
            {? _result<>'' & _msgs=2
            || exec('add_kom','#message'
                ,'Zamówienie %1 przywrócono z archiwum.'@[_sym]
                ,38,'Przywrócenie zamówień',__lp+=1)
            ?};
            {? var_pres('__il_pzam')=1 || __il_pzam+=1 ?};
            end()
         ?};
         ZK_N.cntx_pop();
         ZK_N.r_unlock()
      ?}
   ?};
   {? _msgs<2 || exec('zam_arch_DoneRes','zamsiw_wspolne') ?};
   ZK_N.cntx_pop();
   ZK_P.cntx_pop();
   ZK_RN.cntx_pop();
   ZK_RP.cntx_pop()
?};

_result


\one_zamk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: przeniesienie jednego zamowienia klienta
::   WE: _a - ZK_N.ref
::       _b - ZK_N.EZAPOT
::       _c - ZK_N.OBI_POW
::   WY: ref sql-owy zamówienia lub pusty string
::  OLD: \one_zamk/zk.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';

BEER.MJSLOG:='ARC';

_mask_bie:=5-ZK_N.name();
{? form(ST.ODDZ)='' || ST.ODDZ:=1+_mask_bie ?};
{? 6-ZK_N.name()='__'
|| _mask_kop:=ST.ODDZ+(2-$(ZK_N.DP~1))
|| _mask_kop:=ST.ODDZ+'__'
?};

_zk_n:=obj_new(ZK_N.fld_num());
_zk_p:=obj_new(ZK_P.fld_num());
_zk_rn:=obj_new(ZK_RN.fld_num());
_zk_rp:=obj_new(ZK_RP.fld_num());
_fakso:=obj_new(FAKSO.fld_num());

_ref_old:=_a;
_ref_new:=null;
_rn_new:=null;
_rn_news:=_rn_nd:='';
_zknuio:=_zknuin:='';

VAR_DEL.delete('X_Xa','__zk_p');

X_Xa:=tab_tmp(4
   ,'REF_OLD','INTEGER','ref old'
   ,'NAME_OLD','STRING[8]','Name old'
   ,'REF_NEW','INTEGER','ref new'
   ,'NAME_NEW','STRING[8]','Name new'
   ,'ZK_RPR','INTEGER','ref'
   ,'ZK_RPN','STRING[8]','Name'
);

__zk_p:=tab_tmp(1
   ,'R_OLD','STRING[16]','Refsql_old'
   ,'R_NEW','STRING[16]','Refsql_new'
);

_deakt:=0;
:: kopiowanie naglowka
ZK_N.prefix();
{? ZK_N.seek(_a)
||
:: usuniecie rezerwacji pozycji zamowienia jezeli kopiujemy aktywne
   {? _mask_bie=ST.ODDZ+'__'
   ||
      BEER.ZK_N:=ZK_N.ref();
      BEER.WG:=ZK_N.WG;
      BEER.TYP:='Z';
      ZK_P.index('TYPN');
      ZK_P.prefix('A',BEER.TYP,BEER.ZK_N,1);
      {? ZK_P.first()
      || exec('rez_pozy','rezerwacje',3,1)
      ?};

      {? exec('deaktpoz','zamsiw_wspolne',ZK_N.ref,'Z',1)
      || _deakt:=1
      ?}
   ?};
   _zknuio:=ZK_N.uidref();

   {! _licz:=1..ZK_N.fld_num() |! _zk_n[_licz]:=ZK_N[_licz] !} || undo() ?};

:: obsluga memo
   _memo:=ZK_N.memo_get('r','UW');

   exec('openz','open_tab',_mask_kop);
   ZK_N.clear();
   ZK_N.blank();
   {! _licz:=1..ZK_N.fld_num()
   |! {? var_pres(ZK_N.fld_acr(_licz),ZK_N)<>var_pres('UW',ZK_N) || ZK_N[_licz]:=_zk_n[_licz] ?}
   !};
   {? _deakt || ZK_N.A:='Z' ?};
   {? (ZK_N.name()+2)<>'__' || ZK_N.STAN:='ARCHIWALNE' ?};
   {? ZK_N.add()
   || _ref_new:=ZK_N.ref();
      _zknuin:=ZK_N.uidref();
      _result:=$ZK_N.ref();
      {? _b<>'' | _c<>'' || exec('arch_zap','zamowienia',_b,$_ref_new,_c,_zknuin) ?};
      {? _memo.is_open || ZK_N.memo_put(_memo,'UW') ?}
   || undo()
   ?};
:: aktualizacja wpisów dla reklamacji
   exec('changeUID','reklamacje',REK_N,'ZAM','ZAM_DOK',_zknuio,_zknuin);
   exec('changeUID','reklamacje',REK_D,'DK_REF','DK_REF',_zknuio,_zknuin);

:: zaliczki
_zal_ndx:=FAPOW.ndx_tmp('',,'ZK_N',,,'ZK_N',,);
FAPOW.index(_zal_ndx);
FAPOW.prefix($_ref_old,$_ref_old);
{? FAPOW.first()
||
   {!
   |?
      FAPOW.cntx_psh();
      FAPOW.clear();
      FAPOW.ZK_N:=$_ref_new;
      FAPOW.put();
      FAPOW.cntx_pop();
      FAPOW.first()
   !}
?};
FAPOW.ndx_drop(_zal_ndx);

:: aktualizacja obiektow planistycznych
PX_OBJ.index('ZK_N');
PX_OBJ.prefix(ref_name(_ref_old),_ref_old);
{? PX_OBJ.first()
|| {!
   |?
      PX_OBJ.cntx_psh();
      PX_OBJ.clear();
      PX_OBJ.ZK_N:=_ref_new;
      _can_continue:=PX_OBJ.put();
      {? _can_continue>0 & PX_OBJ.KIND=exec('kind_zam_nag','px_obj')
      ||
         {? _mask_bie=ST.ODDZ+'__'
         ||
::          Przenosze do archiwum - ustawiam obiekt jako nieaktywny
            exec('obj_tree_update','px_obj',PX_OBJ.ref(),'N')
         ||
::          Przywracam z archiwum - ustawiam obiekt jako aktywny
            exec('obj_tree_update','px_obj',PX_OBJ.ref(),'T')
         ?}
      ?};
      PX_OBJ.cntx_pop();
      PX_OBJ.first() & _can_continue>0
   !}
?};

:: aktualizacja tabeli do rejestracji wykonan
PROD_REJ.index('ZK_N');
PROD_REJ.prefix(ref_name(_ref_old),_ref_old);
{? PROD_REJ.first()
||
   {!
   |?
      PROD_REJ.cntx_psh();
      PROD_REJ.clear();
      PROD_REJ.ZK_N:=_ref_new;
      _can_continue:=PROD_REJ.put();
      {? _can_continue>0
      ||
         {? _mask_bie=ST.ODDZ+'__'
         ||
::          Przenosze do archiwum - ustawiam rekord jako nieaktywny
            PROD_REJ.A:='N';
            PROD_REJ.put()
         ||
::          Przywracam z archiwum - ustawiam rekord jako aktywny
            PROD_REJ.A:='T';
            PROD_REJ.put()
         ?}
      ?};
      PROD_REJ.cntx_pop();
      PROD_REJ.first() & _can_continue>0
   !}
?};

:: kopiowanie realizacji
   _zkrp:=tab_tmp(1,'ZKP','STRING[16]','','OLD','STRING[16]','','NEW','STRING[16]','');
   exec('openz','open_tab',_mask_bie);
   ZK_RN.index('ZAM');
   ZK_RN.prefix(_ref_old);
   {? ZK_RN.first()
   ||
      {!
      |?
         _rn_old:=ZK_RN.ref();
         {! _licz:=1..ZK_RN.fld_num() |! _zk_rn[_licz]:=ZK_RN[_licz] !};
         ZK_RN.cntx_psh();
         exec('openz','open_tab',_mask_kop);
         ZK_RN.prefix();
         ZK_RN.blank();
         {! _licz:=1..ZK_RN.fld_num() |! {? type_of(ZK_RN[_licz])<>0 || ZK_RN[_licz]:=_zk_rn[_licz] ?} !};
         ZK_RN.N:=_ref_new;
         ZK_RN.add();
         _rn_new:=ZK_RN.ref();
         _rn_news:=$ZK_RN.ref();
         _rn_nd:=ZK_RN.ND;
         ZK_RN.cntx_pop();

         {? _rn_nd<>''
         ||
            ND.cntx_psh();
            DK.cntx_psh();
            ND.use(8+_rn_nd);
            DK.use('dokma'+((8+_rn_nd)+3));
            ND.prefix();
            {? ND.r_lock(1,1,1,BB.sqlint(_rn_nd),form(8+_rn_nd)) & ND.seek(_rn_nd,form(8+_rn_nd))
            ||
               DK.index('DOKMAG');
               DK.prefix(ND.ref());
               {? DK.first()
               ||
                  {!
                  |?
                     {? DK.ZAM_RN=$_rn_old
                     ||
                        DK.ZAM_RN:=_rn_news;
                        DK.put()
                     ?};
                     DK.next()
                  !}
               ?};
               ND.r_unlock()
            || ND.r_unlock();
               undo();
               FUN.info('Powiązany dokument %1 realizacji zamówienia '
                        'obsługuje inny użytkownik.'@[ZK_RN.SWZ])
            ?};
            DK.cntx_pop();
            ND.cntx_pop()
         ?};

         exec('openz','open_tab',_mask_bie);
         ZK_RP.index('POZR');
         ZK_RP.prefix(_rn_old);
         {? ZK_RP.first()
         ||
            {!
            |?
               {! _licz:=1..ZK_RP.fld_num() |! _zk_rp[_licz]:=ZK_RP[_licz] !};
               _old_r:=$ZK_RP.ref();
               _old_z:=$ZK_RP.P;
               _ouid:=ZK_RP.uidref();
               ZK_RP.cntx_psh();
               X_Xa.blank();
               X_Xa.REF_OLD:=#ZK_RP.P;
               X_Xa.NAME_OLD:=ZK_RP.P().name();
               X_Xa.add();

               ZK_P.cntx_psh();
               exec('openz','open_tab',_mask_kop);
               ZK_P.cntx_pop();

               ZK_RP.prefix();
               ZK_RP.blank();
               {! _licz:=1..ZK_RP.fld_num() |! ZK_RP[_licz]:=_zk_rp[_licz] !};
               ZK_RP.N:=_rn_new;
               ZK_RP.P:=null();
               ZK_RP.add();
               _nuid:=ZK_RP.uidref();
               _zkrp.clear();
               _zkrp.blank();
               _zkrp.ZKP:=_old_z;
               _zkrp.OLD:=_old_r;
               _zkrp.NEW:=$ZK_RP.ref();
               _zkrp.add(1);
               X_Xa.ZK_RPR:=ZK_RP.ref();
               X_Xa.ZK_RPN:=ZK_RP.name();
               X_Xa.put();
               ZK_RP.cntx_pop();
               exec('changeUID','reklamacje',REK_N,'ZAM_ZRP','ZAM_ZRP',_ouid,_nuid);
               exec('changeUID','reklamacje',REK_D,'DR_REF','DR_REF',_ouid,_nuid);
               ZK_RP.next()
            !}
         ?};
         exec('openz','open_tab',_mask_bie);
         ZK_RN.seek(_rn_old);
         ZK_RN.next()
      !}
   ?};

:: kopiowanie pozycji

   exec('openz','open_tab',_mask_bie);
   ZK_P.index('NAG');
   ZK_P.prefix(_ref_old);
   {? ZK_P.first()
   ||
      {!
      |? _zk_p_o:=ZK_P.ref();
         _zk_uio:=ZK_P.uidref();
         X_Xa.prefix(#ZK_P.ref,ZK_P.name());
         {! _licz:=1..ZK_P.fld_num() |! _zk_p[_licz]:=ZK_P[_licz] !};
         _zk_pold:=$ZK_P.ref();

         ZK_P.cntx_psh();
         exec('openz','open_tab',_mask_kop);
         ZK_P.prefix();
         {! _licz:=1..ZK_P.fld_num() |! ZK_P[_licz]:=_zk_p[_licz] !};
         ZK_P.N:=_ref_new;
         ZK_P.REZ:=0;
         ZK_P.DOR:=0;
         ZK_P.SR:=0;
         ZK_P.ODDT:=date(0,0,0);
         ZK_P.DODT:=date(0,0,0);
         ZK_P.CZYBEZ:='T';
         ZK_P.ILBEZ:=ZK_P.ILP;
         ZK_P.ILRB:=0;
         ZK_P.ILRW:=0;
         ZK_P.ILRA:=0;
         _czyusl:=(ZK_P.RODZ='W' | (ZK_P.RMAG<>null & ZK_P.RMAG().U='T')) & ZK_P.ILP>0;
         {? ZK_P.M().RODZ='U'
         || ZK_P.ZBB:={? _czyusl || 'T' || 'N' ?};
            ZK_P.ZBZ:='N';
            ZK_P.ZNB:='N';
            ZK_P.ZNW:='N';
            ZK_P.ZNR:={? ZK_P.ILP<ZK_P.ILZ || 'T' || 'N' ?};
            ZK_P.SR:=0;
            ZK_P.DOR:=0;
            ZK_P.ILRB:=0;
            ZK_P.ILRW:=0;
            ZK_P.ILRD:=0;
            ZK_P.ILRA:=0;
            ZK_P.DOST:=0;
            ZK_P.REZ:=ZK_P.DT>=date() & (ZK_P.ILRB>0 | ZK_P.ILRW>0);
            ZK_P.ILBEZ:=ZK_P.ILP;
            ZK_P.CZYBEZ:='N'
         ?};
         ZK_P.add();
         _zk_p_n:=ZK_P.ref();
         _zk_uin:=ZK_P.uidref();

::       aktualizacja wpisów dla dyspozycji transportowych
         exec('updateUID','transport_wspolne',_zknuio,_zk_uio,_zknuin,_zk_uin);
::       aktualizacja wpisów dla reklamacji
         exec('changeUID','reklamacje',REK_N,'ZAM_POZ','ZAM_POZ',_zk_uio,_zk_uin);
         exec('changeUID','reklamacje',REK_D,'DP_REF','DP_REF',_zk_uio,_zk_uin);
::       aktualizacja pozycji dla zelecenia - Produkcja
         ZLZAM.index('ZMZL0');
         ZLZAM.prefix(_zk_pold);
         {? ZLZAM.first()
         || {!
            |? _ref:=ZLZAM.ref(); _ok:=ZLZAM.next();
               ZLZAM.cntx_psh();
               ZLZAM.prefix();
               {? ZLZAM.seek(_ref) || ZLZAM.ZAMPOZ:=$_zk_p_n; ZLZAM.put(1) ?};
               ZLZAM.cntx_pop();
               _ok
            !}
         ?};

::       aktualizacja planu produkcji - Produkcja
         PL_PART.cntx_psh();
         PL_PART.index('ZK_P3');
         PL_PART.prefix($_zk_p_o);
         {? PL_PART.first()
         || {!
            |? PL_PART.cntx_psh();
               PL_PART.clear();
               PL_PART.ZK_P:=_zk_p_n;
               PL_PART.SQL_ZKP:=$_zk_p_n;
               _put:=PL_PART.put();
               PL_PART.cntx_pop();
               _next:={? _put>0
                      ||
::                       poniewaz rekordy po put wypadaja z dziedziny powinno sie sprawdzac
::                       czy jest cos jeszcze za pomoca first()
                         PL_PART.first()
                      || PL_PART.next()
                      ?};
               _next>0
            !}
         ?};
         PL_PART.cntx_pop();

::       aktualizacja obiektow planistycznych
         PX_OBJ.index('ZK_P');
         PX_OBJ.prefix(ref_name(_zk_p_o),_zk_p_o);
         {? PX_OBJ.first()
         ||
            {!
            |? _put:=0;
               PX_OBJ.cntx_psh();
               PX_OBJ.prefix();
               PX_OBJ.ZK_P:=_zk_p_n;
               _put:=PX_OBJ.put();
               PX_OBJ.cntx_pop();
               _next:={? _put>0
                      ||
::                       poniewaz rekordy po put wypadaja z dziedziny powinno sie sprawdzac
::                       czy jest cos jeszcze za pomoca first()
                         PX_OBJ.first()
                      || PX_OBJ.next()
                      ?};
               _next>0
            !}
         ?};

::       aktualizacja tabeli do rejestracji produkcji
         PROD_REJ.index('ZK_P');
         PROD_REJ.prefix(ref_name(_zk_p_o),_zk_p_o);
         {? PROD_REJ.first()
         ||
            {!
            |? _put:=0;
               PROD_REJ.cntx_psh();
               PROD_REJ.prefix();
               PROD_REJ.ZK_P:=_zk_p_n;
               _put:=PROD_REJ.put();
               PROD_REJ.cntx_pop();
               _next:={? _put>0
                      ||
::                       poniewaz rekordy po put wypadaja z dziedziny powinno sie sprawdzac
::                       czy jest cos jeszcze za pomoca first()
                         PROD_REJ.first()
                      || PROD_REJ.next()
                      ?};
               _next>0
            !}
         ?};

::       aktualizacja pozycji dokumentow magazynowych
         _actodd:=1+(ZK_N.name()+3);
         OKR.cntx_psh();
         ND.cntx_psh();
         DK.cntx_psh();
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);
         {? OKR.first()
         || {!
            |? ND.use('nagdo'+_actodd+form(OKR.ROK-2000,-2,0,'99'));
               DK.use('dokma'+_actodd+form(OKR.ROK-2000,-2,0,'99'));
               _zkrp.clear();
               _zkrp.prefix(_zk_pold);
               {? _zkrp.first()
               || {!
                  |? DK.index('ZAM_RP');
                     DK.prefix(_zkrp.OLD);
                     {? DK.first
                     || {!
                        |? DK.cntx_psh();
                           DK.prefix();
                           DK.ZAM_RP:=_zkrp.NEW;
                           DK.put(1);
                           DK.cntx_pop();
                           DK.first()
                         !}
                     ?};
                     _zkrp.next()
                  !}
               ?};
               OKR.next()
            !}
         ?};
         OKR.cntx_pop();
         ND.cntx_pop();
         DK.cntx_pop();

         __zk_p.blank();
         __zk_p.R_OLD:=$_zk_p_o;
         __zk_p.R_NEW:=$_zk_p_n;
         __zk_p.add();

         {? X_Xa.first()
         || rold:=X_Xa.REF_OLD; rnam:=X_Xa.NAME_OLD;
            X_Xa.for_each("{? rold=X_Xa.REF_OLD & rnam=X_Xa.NAME_OLD
                           || X_Xa.REF_NEW:=#ZK_P.ref();
                              X_Xa.NAME_NEW:=ZK_P.name();
                              X_Xa.put()
                           ?}",0);
            VAR_DEL.delete('rold','rnam')
         ?};

::       kopiowanie informacji dodatkowych dla pozycji zamowienia klienta
         FAKSO.cntx_psh();
         FAKSO.use('fakto'+_mask_bie);
         FAKSO.index('ZK_P');
         FAKSO.prefix(_zk_p_o);
         {? FAKSO.first()
         ||
            {!
            |? {! _licz:=1 .. FAKSO.fld_num() |! _fakso[_licz]:=FAKSO[_licz] !};
               FAKSO.cntx_psh();
               FAKSO.use('fakto'+_mask_kop);
               FAKSO.prefix();
               {! _licz:=1 .. FAKSO.fld_num() |! FAKSO[_licz]:=_fakso[_licz] !};
               FAKSO.ZK_P:=_zk_p_n;
               FAKSO.add();
               FAKSO.cntx_pop();
               FAKSO.next()
            !}
         ?};
         FAKSO.cntx_pop();

::       aktualizacja zlaczen dla planow dostaw
         exec('zam_arch','zamowienia',_ref_old,_zk_p_o,_ref_new,_zk_p_n);

         ZK_P.cntx_pop();
         ZK_P.next()
     !}
  ?};
   obj_del(_zkrp);

:: kopiowanie informacji dodatkowych dla naglowka zamowienia klienta
   FAKSO.cntx_psh();
   FAKSO.use('fakto'+_mask_bie);
   FAKSO.index('ZK_N');
   FAKSO.prefix(_ref_old);
   {? FAKSO.first()
   ||
      {!
      |? {! _licz:=1 .. FAKSO.fld_num() |! _fakso[_licz]:=FAKSO[_licz] !};
         FAKSO.cntx_psh();
         FAKSO.use('fakto'+_mask_kop);
         FAKSO.prefix();
         {! _licz:=1 .. FAKSO.fld_num() |! FAKSO[_licz]:=_fakso[_licz] !};
         FAKSO.ZK_N:=_ref_new;
         FAKSO.add();
         FAKSO.cntx_pop();
         FAKSO.next()
      !}
   ?};
   FAKSO.cntx_pop();

:: kopiowanie płatności
   exec('copyPlatZkn','faktury_plat',_ref_old,_ref_new);

:: odtwarzanie powiazan dokumentow
   exec('refsql_update','dokum',$_ref_old,$_ref_new);

:: odtwarzanie powizan

   _odtw:="
      ZKW_P.index('ZK_P');
      ZKW_P.prefix(_a,_a);
      {? ZKW_P.first()
      ||
         {!
         |?
            ZKW_P.cntx_psh();
            ZKW_P.clear();
            ZKW_P.ZK_P:=_b;
            ZKW_P.put();
            ZKW_P.cntx_pop();
            ZKW_P.first()
         !}
      ?};
      ''
   ";
:: petla po wszystkich okresach i wymiana w polu ZKW_P.ZK_P z OLD na NEW
   OKR.cntx_psh();
   __zk_p.clear();
   {? __zk_p.first()
   ||
      {!
      |?
::       pozycje potwierdzen
::       w biezacej masce
         ZKW_P.use('zkpwp'+ST.ODDZ+'__');
         _odtw(__zk_p.R_OLD,__zk_p.R_NEW);
::       w archiwum
         OKR.index('MC');
         OKR.prefix(REF.FIRMA,1);
         {? OKR.first()
         ||
            {!
            |?
               ZKW_P.use('zkpwp'+ST.ODDZ+($OKR.ROK+2));
               _odtw(__zk_p.R_OLD,__zk_p.R_NEW);
               OKR.next()
            !}
         ?};
         __zk_p.next()
      !}
   ?};
   OKR.cntx_pop();

  exec('openz','open_tab',_mask_kop);
  X_Xa.prefix();
  {? X_Xa.first()
  || {!|?
        ZK_RP.prefix();
        {? ZK_RP.seek(X_Xa.ZK_RPR,X_Xa.ZK_RPN)
        || ZK_P.prefix();
           {? ZK_P.seek(X_Xa.REF_NEW,X_Xa.NAME_NEW)
           || ZK_RP.P:=ZK_P.ref();
              ZK_RP.put()
           ?}
        ?};
        X_Xa.next()
     !}
  ?};
  exec('openz','open_tab',_mask_bie);

:: // aktualizacja powiazan w dzienniku edi
  {? do_state()<>2 || exec('edi_i_akt_dok','edi_wspolne',BB.refsql(_ref_old),BB.refsql(_ref_new)) ?};

:: kasowanie zamowienia
  exec('openz','open_tab',_mask_bie);

  _rr:=#_a;
  _rn:=ref_name(_a);
  ZK_N.prefix();
  {? _rr>0 & ZK_N.r_lock(1,1,1,_rr,_rn) & ZK_N.seek(_a)
  ||
::   realizacje
     ZK_RN.index('ZAM');
     ZK_RN.prefix(_ref_old);
     {? ZK_RN.first()
     ||
        {!|?
           ZK_RP.index('POZR');
           ZK_RP.prefix(ZK_RN.ref());
           {? ZK_RP.first()
           || {!|?
                 ZK_RP.del()
              !}
           ?};
           ZK_RN.del()
        !}
     ?};

::   pozycje
     ZK_P.index('NAG');
     ZK_P.prefix(_ref_old);
     {? ZK_P.first()
     || {!
        |? exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,0);
           {? ZK_P.count()>0
           ||
              FAKSO.cntx_psh();
              FAKSO.use('fakto'+_mask_bie);
              FAKSO.index('ZK_P');
              FAKSO.prefix(ZK_P.ref());
              {? FAKSO.first() || {! |? FAKSO.del() !} ?};
              FAKSO.cntx_pop()
           ?};
           __aktmat.clear();
           __aktmat.clear();
           {? __aktmat.find_key($ZK_P.M)
           || __aktmat.ILR+=ZK_P.ILP;
              {? __aktmat.NRK>ZK_P.NR || __aktmat.NRK:=ZK_P.NR ?};
              __aktmat.put(1)
           || __aktmat.blank();
              __aktmat.MAT:=$ZK_P.M;
              __aktmat.ILR:=ZK_P.ILP;
              __aktmat.NRK:=ZK_P.NR;
              __aktmat.add(1)
           ?};
           _uidzkp:=ZK_P.uidref();
           _ok:=ZK_P.del();
           exec('delaRekD','reklamacje',_uidzkp);
           _ok
        !}
     ?};

     {? ZK_N.count()>0
     ||
        FAKSO.cntx_psh();
        FAKSO.use('fakto'+_mask_bie);
        FAKSO.index('ZK_N');
        FAKSO.prefix(ZK_N.ref());
        {? FAKSO.first() || {! |? FAKSO.del() !} ?};
        FAKSO.cntx_pop()
     ?};

::   kasowanie roboczych danych dotyczacych zabezpieczen

     exec('zk_usun','zamsiw_poz',ZK_N.ref());
     exec('del_plat','faktury_plat',ZK_N.ref(),_ref_new);
     {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',ZK_N.ref()) & do_state() || undo() ?};
     ZK_N.r_unlock();
     ZK_N.del(1);

::   przywrocenie rezerwacji kopiowanego zamowienia
     {? _mask_bie<>ST.ODDZ+'__'
     ||
        exec('open','open_tab',ST.ODDZ,2-$(ST.AR));
        ZK_N.prefix();
        {? ZK_N.seek(_ref_new) & ZK_N.STAT_REJ<>'A'
        || {? exec('aktywpoz','zamsiw_poz',ZK_N.ref,1) || ZK_N.A:='A'; ZK_N.put(1) ?};
           ZK_P.index('NAG');
           ZK_P.prefix(_ref_new);
           {? ZK_P.first()
           || {!
              |? __aktmat.clear();
                 __aktmat.clear();
                 {? __aktmat.find_key($ZK_P.M)
                 || __aktmat.ILR+=ZK_P.ILP;
                    {? __aktmat.NRK>ZK_P.NR || __aktmat.NRK:=ZK_P.NR ?};
                    __aktmat.put(1)
                 || __aktmat.blank();
                    __aktmat.MAT:=$ZK_P.M;
                    __aktmat.ILR:=ZK_P.ILP;
                    __aktmat.NRK:=ZK_P.NR;
                    __aktmat.add(1)
                 ?};
                 ZK_P.next()
              !}
           ?}
        ?}
     ?}
  || undo()
  ?};
BEER.MJSLOG:='';
_result


\deaktpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: zmienia znaczniki aktywnosci dla pozycji zamowienia
::   WE:  _a  - ref zamowienia (ZK_N.ref)
::        _b  - jaki status przypisac (np. 'Z')
::       [_c] - czy wywolywac transakcje (0 - tak, 1 - nie, transakcja wolana zewnetrznie)
::   WY: czy operacja sie powiodla
::  OLD: \deaktpoz/zk.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3  || {? type_of(_c)<>1 || _c:=0 ?}  || _c:=0  ?};

_wyn:=1;
_mat:=tab_tmp(1,'M','INTEGER','Ref materiału');
ZK_N.cntx_psh();
ZK_P.cntx_psh();
ZK_P.index('NAG');
ZK_P.prefix(_a);
{? ZK_P.first()
||
   {? _c=0 || do() ?};
   {!
   |?
      ZK_P.A:=_b;
      {? ~ZK_P.put(1)
      || _wyn:=0;
         undo()
      ?};
      _mat.prefix(#ZK_P.M);
      {? ~_mat.first || _mat.blank();_mat.M:=#ZK_P.M;_mat.add() ?};
      ZK_P.next() & _wyn
   !};
   {? _c=0 || end() ?}
?};
ZK_P.cntx_pop();
ZK_N.cntx_pop();
_wyn


\str_rea_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'REA'
::  OLD: \str_rea_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'REA'


\str_rea_zam_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'REA-ZAM'
::  OLD: \str_rea_zam_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'REA-ZAM'


\str_rea_zre_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'REA-ZRE'
::  OLD: \str_rea_zre_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'REA-ZRE'


\str_reazreza_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'REA-ZRE-ZAM'
::  OLD: \str_reazreza_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'REA-ZRE-ZAM'


\str_zam_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'ZAM'
::  OLD: \str_zam_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'ZAM'


\str_zre_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'ZRE'
::  OLD: \str_zre_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'ZRE'


\str_zre_zam_
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: String 'ZRE-ZAM'
::  OLD: \str_zre_zam_/wydruki.fml
::----------------------------------------------------------------------------------------------------------------------
'ZRE-ZAM'


\dispzofe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: ustawia wartosc zmiennej DISP.ZAM_OFE
::  OLD: \dispzofe/oferty.fml
::----------------------------------------------------------------------------------------------------------------------
DISP.ZAM_OFE:='';
ZK_N.cntx_psh();
_indn:=ZK_N.ndx_tmp('',,'OFE',,);
ZK_N.index(_indn);
ZK_N.prefix(OFE.ref());
{? ZK_N.first()
|| DISP.ZAM_OFE:=ZK_N.SYM
?};
ZK_N.ndx_drop(_indn);
:: sprawdzanie archiwum
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);
{? OKR.first() & DISP.ZAM_OFE=''
||
   {!
   |?
      ZK_N.use('zknag'+ST.ODDZ+($OKR.ROK+2));
      _indn:=ZK_N.ndx_tmp('',,'OFE',,);
      ZK_N.index(_indn);
      ZK_N.prefix(OFE.ref());
      {? ZK_N.first()
      || DISP.ZAM_OFE:=ZK_N.SYM
      ?};
      ZK_N.ndx_drop(_indn);
      OKR.next() & DISP.ZAM_OFE=''
   !}
?};
ZK_N.cntx_pop();
~~


\czy_rab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: sprawdza czy jest rabat na dokumencie
::   WE: _a -'ZK_N', 'FAKS'
::  OLD: \czy_rab/wydr_fak.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;

{? ZK_N.RAB || return(1) ?};
ZK_P.cntx_psh;
ZK_P.index('TYPN'); ZK_P.prefix('A','Z',ZK_N.ref,1);
{? ZK_P.first
||
   {!
   |? _wyn+=ZK_P.RAB+ZK_P.RABK;
      _wyn=0 & ZK_P.next
   !}
?};
ZK_P.cntx_pop;

_wyn


\blzakrzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: blank dla pola ZAKR.ZLSYM
::  OLD: \blzakrzl/zkw.fml
::----------------------------------------------------------------------------------------------------------------------
ZAKR.ZLSYM:=ZAKR.ZL().SYM


\f3zakrzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: klawisz F3 pola ZAKR.ZLSYM
::  OLD: \f3zakrzl/zkw.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zl_f3_1','zl_common','ZAKR.ZLSYM','ZAKR.ZL',-1)


\pozakrzl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: po redakcji pola ZAKR.ZLSYM
::  OLD: \pozakrzl/zkw.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=1;
_prod:=exec('tte_lic','tte');
{? ZAKR.ZLSYM<>''
|| ZL.cntx_psh();
   ZL.clear();
   ZL.blank(1);
   ZL.index('HIDDEN');
   _wynik:={? _prod='T'
           || ZL.find_tab(0,'SYM',,'=',ZAKR.ZLSYM,'HIDDEN',,'=','N','STAN',,'=','O')
           || ZL.find_tab(0,'SYM',,'=',ZAKR.ZLSYM,'HIDDEN',,'=','N','STAN',,'=','O','TYP','TYP','=','~ML')
           ?};
   {? _wynik=0
   || FUN.info('Brak w słowniku otwartego zlecenia o podanym symbolu.'@)
   || ZAKR.ZL:=ZL.ref()
   ?};
   ZL.cntx_pop()
|| ZAKR.ZL:=null
?};
win_disp();
_wynik


\uzup_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: uzupełnia użytkownika, przy akceptacji zamówienia
::   WE: _a - użytkownik do wypełnienia
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_P.cntx_psh();
ZK_N.US:=_a;
ZK_N.put(1);
ZK_P.index('NAG');
ZK_P.prefix(ZK_N.ref());
{? ZK_P.first()
|| {!
   |? ZK_P.US:=_a;
      ZK_P.put(1);
      ZK_P.next()
   !};
   USERS_UP.cntx_psh();
   USERS_UP.index('MG');
   USERS_UP.prefix(_a,'ZA'+{? ZK_P.RODZ='W' || 'W' || 'M' ?},ST.ODDZ_KOD);
   _wg_mag:=USERS_UP.first();
   USERS_UP.cntx_pop();
   {? ~_wg_mag
   || _rez:=exec('zknmgnag','zamsiw_nag',ZK_N.MG);
      exec('aktstatzkp','zamsiw_wspolne',_rez);
      exec('aktznzkn','zamsiw_nag',ZK_N.ref(),1);
      exec('obl_warz','zamsiw_nag',ZK_N.ref(),,0)
   ?}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop();
ZK_N.get();
~~


\aktstatzkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: aktualizuje status zamówienia
::   WE: _a - sposób rezerwacji
::  OLD: \aktstatzkp/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
_rez:=_a;
USERS_UP.cntx_psh();
USERS_UP.index('MG');
USERS_UP.prefix(OPERATOR.USER,'ZA'+{? ZK_P.RODZ='W' || 'W' || 'M' ?},ST.ODDZ_KOD);
_wg_mag:=USERS_UP.first();
USERS_UP.cntx_pop();
ZK_P.index('TYPN');
ZK_P.prefix('A','Z',ZK_N.ref,1);
{? ZK_P.first()
|| _ktm:=tab_tmp(1,'SQL','STRING[16]','');
   {!
   |? _ktm.clear();
      {? ZK_P.M().RODZ='T' & ~_ktm.find_key($ZK_P.M)
      || _ktm.blank();
         _ktm.SQL:=$ZK_P.M;
         _ktm.add(1)
      ?};
      _zkp:=tab_tmp(1,'MAT','STRING[16]','','ZKP','STRING[16]','');
      _zkp.blank(); _zkp.MAT:=$ZK_P.M; _zkp.ZKP:=$ZK_P.ref(); _zkp.add(1);
      {? _rez=2 & ZK_P.M().RODZ='U'
      || {? ZK_N.MG<>null & ZK_N.MG().U<>'T'
         ||
::          usuwa pozycje uslugowa
            exec('del_pozy','zamsiw_poz',0)
         || {? ZK_N.MG<>null | ~_wg_mag
            || ZK_P.RMAG:={? (ZK_P.RODZ='Z' | ZK_P.M().RODZ<>'U') || ZK_N.MG || null() ?}
            ?};
            {? ZK_N.MG<>null
            || ZK_P.MG:={? (ZK_P.RODZ='Z' | ZK_P.M().RODZ<>'U') || ZK_N.MG || null() ?}
            || ZK_P.MG:=null
            ?};
            ZK_P.put();
            ZK_P.next
         ?}
      || {? ZK_N.MG<>null | ~_wg_mag
         || ZK_P.RMAG:=ZK_P.MG:={? (ZK_P.RODZ='Z' | ZK_P.M().RODZ<>'U') || ZK_N.MG || null() ?}
         ?};
         _bezcech:=ZK_P.RMAG<>null & ZK_P.DK_C<>null & (1+ZK_P.RMAG().TYP)<>'D';
         {? _bezcech || ZK_P.DK_C:=null ?};
         _doroz:=ZK_P.DOR;
         {? ZK_P.REZ
         || ZK_P.REZ:=0;
            ZK_P.put(1);
            exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,0);
            exec('aktu_rez','rezerwacje',ZK_P.M,ZK_P.NR,ZK_P.DOR,$ZK_P.N,_zkp);
            {? ZK_P.DT>=date()
            || ZK_P.REZ:=1;
               ZK_P.DOR:=_doroz;
               ZK_P.ODDT:={? ZK_P.N().DP>date() || ZK_P.N().DP || date() ?};
               ZK_P.DODT:=ZK_P.DT;
               ZK_P.put(1);
               exec('rozp_rez','rezerwacje')
            ?}
         || ZK_P.put(1);
            exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,0);
            exec('aktu_rez','rezerwacje',ZK_P.M,ZK_P.NR,ZK_P.ILP,$ZK_P.N,_zkp)
         ?}
      ?};
      obj_del(_zkp);
      ZK_P.next()
   !};
   _first:=0;
   USERS_UP.cntx_psh();
   USERS_UP.index('MG');
   USERS_UP.prefix(OPERATOR.USER,'ZA'+{? ZK_P.RODZ='W' || 'W' || 'M' ?},ST.ODDZ_KOD);
   {? USERS_UP.first()
   || _first:=1
   || USERS_UP.index('MG');
      USERS_UP.prefix(null,'ZA'+{? ZK_P.RODZ='W' || 'W' || 'M' ?},ST.ODDZ_KOD);
      {? USERS_UP.first() || _first:=1 ?}
   ?};
   {? _first
   || {!
      |? _ktm.clear();
         {? _ktm.first()
         || {!
            |? _refktm:=exec('FindAndGet','#table','M',_ktm.SQL,,,null());
               {? _refktm<>null || exec('obl_stan','magazyn_stan',_refktm,1,USERS_UP.MG) ?};
               _ktm.next()
            !}
         ?};
         USERS_UP.next()
      !}
   ?};
   USERS_UP.cntx_pop();
   obj_del(_ktm)
?};
~~


\akteanzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: aktualizuje statusy na zamówieniu po anulacji wysylki
::   WE: _a - ref sql ZK_N-a
::  OLD: \akteanzk/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_P.cntx_psh();
REZ.cntx_psh();
_msk:=(1+(form(8+_a)+3));
ZK_N.use('zknag'+_msk+'__');
ZK_P.use('zkpoz'+_msk+'__');
REZ.use('rezz'+_msk+'__');
ZK_N.clear();
{? ZK_N.seek(_a)
|| ZK_P.index('NAG');
   ZK_P.prefix(ZK_N.ref());
   {? ZK_P.first()
   || {!
      |? exec('aktu_rez','rezerwacje',ZK_P.M,0,ZK_P.ILP,$ZK_P.N);
         ZK_P.next()
      !}
   ?}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop();
REZ.cntx_pop();
~~


\ustal_lp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: ustala pozycje na zamowieniu
::   WE: _a - ref M
::       _b - ref SQL ZK_N
::  OLD: \ustal_lp/mws.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ZK_N.cntx_psh();
ZK_P.cntx_psh();
ZK_N.clear();
{? ZK_N.seek(_b,form(8+_b))
|| ZK_P.index('ZAM');
   ZK_P.prefix(ZK_N.ref,_a,1);
   {? ZK_P.first() || _wyn:=ZK_P.POZ ?}
?};
ZK_N.cntx_pop();
ZK_P.cntx_pop();
_wyn


\sprpozzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009]
:: OPIS: Sprawdza czy na pozycjach zamowienia sa rezerwacje
::   WE: _a - ref zamowienia
::   WY: 1-sa 0-nie ma -1-brak kodu kreskowego dla wszystkich pozycji -2-brak kodu kreskowego dla niektorych
::       -4-brak magazynów dla wszytkich pozycji -8-brak magazynów dla niektórych
::  OLD: \sprpozzk/ean.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_kodk:=0;
_kody:=0;
_magi:=0;
_size:=0;
ZK_P.cntx_psh();
ZK_P.index('TYPN');
ZK_P.prefix('A','Z',_a,1);
{? ZK_P.first()
|| {! |? exec('obl_ilp','zamsiw_rea'); ZK_P.next() !};
   ZK_P.first();
   _kody:=ZK_P.size();
   _magi:=ZK_P.size();
   _size:=ZK_P.size();
   {!
   |? {? ZK_P.M().RODZ='T'
      || _kodk:=form(ZK_P.M().KODK)<>'';
         _kody-=_kodk;
         _magi-={? ZK_P.MG=null() & ZK_P.ILRB<=0 || 0 || 1 ?};
         _wyn+=ZK_P.ZNB='T' & ZK_P.ILRB>0 & _kodk
      || _kody-=1;
         _size-=1;
         _magi-=1
      ?};
      ZK_P.next()
   !}
?};
ZK_P.cntx_pop();
{? _kody>0 & _kody=_size || _wyn:=-1
|? _kody>0 & _kody<>_size || _wyn:=-2
?};
{? _magi>0 & _magi=_size  || _wyn+=-4
|? _magi>0 & _magi<>_size || _wyn+=-8
?};
_wyn


\zlzam2Rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.46]
:: OPIS: Tworzy rezerwacje warunkową na podstawie ZLZAM-a
::   WE: _a - ref SQL ZK_P
::       _b - 0-dołączenie 1-modyfikacja -1-usunięcie
::       _c - ilość
::       [_d] - wskazanie na ZLZAM, domyślnie to co w buforze
::       [_e] - ilość do zmiany +/-, 0-oznacza pominięcie tej ilości
::       [_f] - 1(domyślnie) odświeżenie znaczników 0-brak odświeżenia
::  OLD: \zlzam2Rez/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
_czyzkp:=(5+_a)='zkpoz';
_new:={? _b=0 || 1 |? _b=1 || 5 || -1 ?};
_zlzam:={? var_pres('_d')<>type_of(null()) || ZLZAM.ref() || _d ?};
_ilezm:={? var_pres('_e')<>type_of(0) || 0 || _e ?};
_rfresh:={? var_pres('_f')<>type_of(0) || 1 || _f ?};


{? _czyzkp & (form(8+_a)+3)=(ZK_P.name()+3)
|| ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   REZ.cntx_psh();
   ZL.cntx_psh();
   ZK_P.clear();
   {? (_oki:=ZK_P.seek(_a) & ~ZK_P.N().T().RPR;
       _isrpr:=_b=0 & exec('get','#params',{? ZK_P.RODZ='Z' || 300811 || 600811 ?})='T'; _oki)
    & {? _isrpr
      || FUN.ask('Pozycja: %1, zamówienia: %2, indeks: %3.\n\n'
                 'Czy utworzyć rezerwacje warunkowe powiązane ze zleceniem?'@[$ZK_P.POZ,ZK_P.N().SYM,ZK_P.M().KTM])
      || 1
      ?}
   || REZ.prefix();
      {? _new<0
      || exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,0,,'W',,0,ZK_P.NR,,,,,,,,,,,,_zlzam)
      |? _ilezm<>0
      || exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,_ilezm,,'W',,_new,ZK_P.NR,,,,,,,,,,,,_zlzam)
      || exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,0,,'W',,0,ZK_P.NR,,,,,,,,,,,,_zlzam);
         exec('update','rezerwacje','ZK_P',ZK_P.ref(),ZK_P.RMAG,ZK_P.M,_c,,'W',,_new,ZK_P.NR,,,,,,,,,,,,_zlzam)
      ?};
      {? _rfresh
      || exec('aktznzkp','zamsiw_poz',ZK_P.ref(),1);
         exec('aktznzkn','zamsiw_nag',ZK_P.N,1)
      ?}
   ?};
   ZK_N.cntx_pop();
   ZK_P.cntx_pop();
   REZ.cntx_pop();
   ZL.cntx_pop()
?}


\Rez2Rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.46]
:: OPIS: Przepina rezerwacje wg pozycji dokumentu
::   WE: _a - 1-akceptacja 0-wycofanie akceptacji
::       _b - ref ND
::  OLD: \Rez2Rez/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
ND.cntx_psh();
DK.cntx_psh();
DK.index('DOKMAG');
DK.prefix(_b);
{? DK.first()
|| _mg:=DK.N().MAG;
   _dost:=DK.N().MAG().TYP*'DOST';
   {!
   |? _ile:=DK.IL;
      _srdk:=DK.SRDK;
      _zlec:=exec('FindAndGet','#table',DK,DK.PRDK,,"ZL",null());
      {? DK.STATS().KIND='Z' & _zlec<>null()
      || _topzlec:=exec('top_level','zl_link',_zlec);
         {? exec('FindAndGet','#table',ZL,_topzlec,,"RODZAJ",'')<>'N' || _zlec:=_topzlec ?};
         ZLZAM.cntx_psh();
         ZLZAM.index('PL_DTTM');
         ZLZAM.prefix(_zlec);
         {? ZLZAM.first()
         || {!
            |? {? ZLZAM.ZAMPOZ<>''
               || _rodz:=exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,"RODZ",'');
                  _ff:="exec('FindAndGet','#table',ZK_N,N,,\"T().RPR\",0)";
                  _rpr:=exec('FindAndGet','#table',ZK_P,ZLZAM.ZAMPOZ,,_ff,0);
                  _wsp:={? _rodz='Z' || 1 |? _rodz='W' || -1 || 0 ?};
                  REZ.index('ZLZAM');
                  REZ.prefix(ZLZAM.ref(),{? _a || 'W' || 'B' ?});
                  {? ~_rpr & REZ.first() & REZ.MG=_mg | (REZ.MG=null() & exec('czyMgUprZam','zamsiw_wspolne',_mg,_wsp))
                  || {!
                     |? _ref:=REZ.ref();
                        _oki:=REZ.next();
                        _akt:=0;
                        REZ.cntx_psh();
                        REZ.clear();
                        {? REZ.seek(_ref) & {? ~_a & _dost || REZ.SC=_srdk || 1 ?}
                        || {? _ile>=REZ.ILR
                           || _ilr:=REZ.ILR;
                              REZ.RODZ:={? _a || 'B' || 'W' ?};
                              REZ.RP_REZ:=exec('rp_rez','rezerwacje',REZ.TYP,REZ.RODZ,REZ.ZL,REZ.ZLZAM);
                              REZ.SC:={? _dost & REZ.RODZ='B' || DK.SRDK || '' ?};
                              REZ.MG:=_mg;
                              REZ.put(1);
                              _akt:=1;
                              _ile-=REZ.ILR
                           |? REZ.ILR>0
                           || _rozn:=REZ.ILR-_ile;
                              REZ.RODZ:={? _a || 'B' || 'W' ?};
                              REZ.RP_REZ:=exec('rp_rez','rezerwacje',REZ.TYP,REZ.RODZ,REZ.ZL,REZ.ZLZAM);
                              REZ.ILR:=REZ.IL2:=_ile;
                              REZ.SC:={? _dost & REZ.RODZ='B' || DK.SRDK || '' ?};
                              REZ.MG:=_mg;
                              REZ.put(1);
                              REZ.RODZ:={? _a || 'W' || 'B' ?};
                              REZ.RP_REZ:=exec('rp_rez','rezerwacje',REZ.TYP,REZ.RODZ,REZ.ZL,REZ.ZLZAM);
                              REZ.SC:='';
                              REZ.ILR:=REZ.IL2:=_rozn;
                              REZ.add(1);
                              _akt:=1;
                              _ile:=0
                           ?};
                           {? _akt
                           || exec('aktznzkp','zamsiw_poz',REZ.ZK_P,1);
                              exec('aktznzkn','zamsiw_nag',REZ.ZK_P().N,1)
                           ?}
                        ?};
                        REZ.cntx_pop();
                        _ile>0 & _oki
                     !}
                  ?}
               ?};
               _ile>0 & ZLZAM.next()
            !}
         ?};
         ZLZAM.cntx_pop()
      ?};
      DK.next()
   !}
?};
ND.cntx_pop();
DK.cntx_pop();
~~


\czyRezZlzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.46]
:: OPIS: Sprawdza czy dla danej pozycji zamówienia są rezerwacje do zlecenia
::   WE: _a - ZK_P.ref()
::   WY: 1-tak 0-nie
::  OLD: \czyRezZlzam/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
REZ.cntx_psh();
REZ.index('ZK_P');
REZ.prefix(_a);
{? REZ.first() || {! |? _wyn:=REZ.ZLZAM<>null(); ~_wyn & REZ.next() !} ?};
REZ.cntx_pop();
_wyn


\zam_kosz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formula przed na akcje Koszty okna ZK_N.WER
::  OLD: \zam_kosz/zk.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.ZK_N:=ZK_N.ref();
BEER.WG:=ZK_N.WG;
ZK_RN.index('ZAM');
ZK_RN.prefix(BEER.ZK_N);
ZK_RN.win_sel('WERK');
exec('s_dokmag','zamsiw_rea');
ZK_RN.select();
1


\ofe_kosz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: rejestracja kosztow przewidywanych do oferty
::  OLD: \ofe_kosz/oferty.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~OFE.r_lock(1,1,1)
|| {? FUN.ask('Dokument obsługuje inny operator.\nCzy chcesz zobaczyć kto?'@) & OFE.r_lock()
   || OFE.r_unlock()
   ?}
|| OFK.index('OFE');
   OFK.prefix(OFE.ref());
   {? OFE.A<>'Z' | OFK.first()
   || OFK.win_sel('WER');
      OFK.hdr_sel();
      OFK.hdr_sel(' '+OFE.SYM);
      OFK.actions('WER',{? OFE.A='Z' || 'dup:d' || '' ?});
      OFK.select()
   || FUN.info('Brak informacji o kosztach dla danej oferty.'@)
   ?};
   OFE.r_unlock()
?};
1


\zkp_analiza_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed' dla tabeli ZK_P
::  OLD: \zkp_analiza_b/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pdbuf','plan_dostaw')
||
   {? ZK_P.sel_size()=0
   || exec('env_create','plan_dostaw')
   ?};

   {? ZK_P.M().RODZ='T'
   || _args:=exec('pda_a','plan_dostaw');
      _args.M:=ZK_P.M;
      _args.TM_STAMP:=SYSLOG.tm_stamp();
      _args.DK:={? ZK_P.N().DT>ZK_P.DT || ZK_N.DT+1 || ZK_P.DT+1 ?};
      _args.TK:=time(0,0,0);
      _args.IL:=ZK_P.ILP;
      _args.DW:=ZK_P.PL_DATA;
      _args.TW:=ZK_P.PL_TIME;
      _args.DISP:=0;
      _args.skip_add($ZK_P.ref());
      REZ.index('ZK_P');
      REZ.prefix(ZK_P.ref());
      {? REZ.first()
      || {!
         |? _args.skip_add($REZ.ref());
            REZ.next()
         !}
      ?};
      _res:=exec('pda','plan_dostaw',_args);

      _argse:=exec('an_add_a','plan_dostaw');
      _argse.M:=_args.M;
      _argse.IL:=_args.IL;
      _argse.DW:=_args.DW;
      _argse.TW:=_args.TW;
      _argse.DOSTEPNY:=_res.DOSTEPNY;
      _argse.IL_DOST:=_res.IL_DOST;
      _argse.DM:=_res.NA_KIEDY;
      _argse.skip_add($ZK_P.ref());
      REZ.index('ZK_P');
      REZ.prefix(ZK_P.ref());
      {? REZ.first()
      || {!
         |? _argse.skip_add($REZ.ref());
            REZ.next()
         !}
      ?};
      exec('an_add','plan_dostaw',_argse)
   ?};

   {? ZK_P.sel_size()=0
   || exec('an_select','plan_dostaw');
      exec('env_delete','plan_dostaw')
   ?}
?};
~~


\zkp_analiza_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po' dla tabeli ZK_P
::  OLD: \zkp_analiza_a/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
~~


\zkp_analiza_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed grupą' dla tabeli ZK_P
::  OLD: \zkp_analiza_bg/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pdbuf','plan_dostaw')
|| exec('env_create','plan_dostaw')
|| 0
?}


\zkp_analiza_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po grupie' dla tabeli ZK_P
::  OLD: \zkp_analiza_ag/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
exec('an_select','plan_dostaw');
exec('env_delete','plan_dostaw')


\zkp_analizas_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'przed' dla tabeli ZK_P;
::       analizie podlegają tylko surowce produktów w ilości nie zleconej
::----------------------------------------------------------------------------------------------------------------------
{? ZK_P.sel_size()=0
|| exec('env_create','tech_structure',1);
   _can_continue:=exec('edit_params','tech_structure',0,0,1)
|| return()
?};
_env:=__ENV_STR;
::  Rozpoczynam pętle
_exit:=1;
{!
|?
   {? var_pres('TAB',_env.STRUCT)>0 || _env.STRUCT.TAB.erase() ?};
   {? var_pres('ELEMENT',_env.STRUCT)>0 || _env.STRUCT.ELEMENT.erase() ?};
   {? var_pres('TAB',_env.CHECK) > 0 || _env.CHECK.TAB.erase() ?};

   {? _can_continue>0 & ZK_P.M().RODZ='U'
   || _env.KOMM.add('%1 — pozycje usługowe nie są analizowane.'@[exec('record','#to_string',ZK_P.ref())])
   |? _can_continue>0 & ZK_P.ILP>0
   || {? var_pres('_args') > 0 || obj_del(_args) ?};
      _args:=exec('add_a','tech_structure');
      _args.M:=ZK_P.M;
::    Ilość pozostała
      _il:=ZK_P.ILP;
::    Ilość zmniejszamy o ilość zleconą
      ZLZAM.cntx_psh();
      ZLZAM.index('ZMZL0');
      ZLZAM.prefix($ZK_P.ref());
      {? ZLZAM.first()
      || {!
         |? _il-=ZLZAM.ILZL;
            ZLZAM.next()
         !}
      ?};
      ZLZAM.cntx_pop();
      {? _il>0
      ||
::       Znajdujemy obiekt planistyczny i wyliczamy ilość w kolejce
         _px_il:=0;
         _px_obj:=exec('get_zkp_object','px_obj',ZK_P.ref());
         {? _px_obj<>null() || _px_il:=exec('get_que_ilosc','px_obj',_px_obj,exec('get_mainversion','px_ver')) ?};

::       Ilość zaplanowana
         {? _px_il>0
         || _args.IL:=_px_il;
            _args.DW:=ZK_P.PL_DATA;
            _args.TW:=ZK_P.PL_TIME;
            _args.SRC_REF:=$_px_obj;
            exec('add','tech_structure',_args);
            exec('expand','tech_structure',_args.ref)
         ?};
         {? _il-_px_il>0
         || _args.IL:=_il-_px_il;
            _args.DW:=ZK_P.PL_DATA;
            _args.TW:=ZK_P.PL_TIME;
            _tktl:= exec('dflt_ktl','tech_prod',ZK_P.M,1,1);
            _added:=0;
            {? (var_pres('TAB_ZAM',_env.CHECK)) >0 & _env.CHECK.TAB_ZAM.find_tab(,'TMAT',,'=',$ZK_P.ref())
            || _tktl:=exec('FindAndGet','#table',TKTL,_env.CHECK.TAB_ZAM.KTLW,,,null())
            ||
               {? _tktl=null()
               || {? ZK_P.M().R<>'S' &  ZK_P.M().R<>'H'
                  || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Brak karty domyślnej'@,ZK_P.M().N,'','',$ZK_P.M);
                     _added:=1
                  ?}
               |? ~exec('tktl_act','tech_head',,$_tktl)
               || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Karta domyślna nieaktualna'@,ZK_P.M().N,
                  exec('FindAndGet','#table',TKTL,_tktl,,'NRK','N'),exec('FindAndGet','#table',TKTL,_tktl,,'WER','N')
                  ,$ZK_P.M);
                  _added:=1
               ?}
            ?};
            _args.TKTL:=_tktl;
            _args.SRC_REF:=$ZK_P.ref();
            exec('add','tech_structure',_args);
            {? _added=0 || exec('expand','tech_structure',_args.ref) ?}
         ?}
      || _env.KOMM.add('%1 — cała ilość została zlecona.'@[exec('record','#to_string',ZK_P.ref())])
      ?}
   || _env.KOMM.add('%1 — cała ilość została zrealizowana.'@[exec('record','#to_string',ZK_P.ref())])
   ?};

:: Wyświetlam tabelę z problemami i uzupełniam tabelę zamienników
   _ok:=1;
   {? _env.CHECK.TAB.size()>0
   || _env.CHECK.TAB.win_sel(_env.CHECK.WERA);
      _ok:=exec('tktl_chck_sel','tech_structure');
      {? _ok=0 || _exit:=0 ?}
   || _exit:=0
   ?};
_exit
!};
::Koniec petli

{? ZK_P.sel_size()=0 & _can_continue>0 & _ok
|| exec('cumulate','tech_structure');
   exec('select','tech_structure')
?};
~~


\zkp_analizas_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'po' dla tabeli ZK_P
::----------------------------------------------------------------------------------------------------------------------
~~


\zkp_analizas_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'przed grupą' dla tabeli ZK_P
::----------------------------------------------------------------------------------------------------------------------
exec('env_create','tech_structure',1);
exec('edit_params','tech_structure',0,0,1);
_can_continue:=1;
_env:=__ENV_STR;
::  Rozpoczynam pętle
_exit:=1;
{!
|?
   {? var_pres('TAB',_env.STRUCT)>0 || _env.STRUCT.TAB.erase() ?};
   {? var_pres('ELEMENT',_env.STRUCT)>0 || _env.STRUCT.ELEMENT.erase() ?};
   {? var_pres('TAB',_env.CHECK)>0 || _env.CHECK.TAB.erase() ?};

   {? _can_continue>0
   ||
      {? var_pres('_selected')>0 || obj_del(_selected) ?};
      _selected:=ZK_P.sel_aget();
      {? _selected.first()
      || {!
         |? ZK_P.cntx_psh();
            ZK_P.prefix();
            {? ZK_P.seek(_selected.REF) & ZK_P.M().RODZ='U'
            || _env.KOMM.add('%1 — pozycje usługowe nie są analizowane.'@[exec('record','#to_string',ZK_P.ref())])
            |? ZK_P.seek(_selected.REF) & ZK_P.ILP>0
            ||
               {? var_pres('_args') > 0 || obj_del(_args) ?};
               _args:=exec('add_a','tech_structure');
               _args.M:=ZK_P.M;
::             Ilość pozostała
               _il:=ZK_P.ILP;
::             Ilość zmniejszamy o ilość zleconą
               ZLZAM.cntx_psh();
               ZLZAM.index('ZMZL0');
               ZLZAM.prefix($ZK_P.ref());
               {? ZLZAM.first()
               || {!
                  |? _il-=ZLZAM.ILZL;
                     ZLZAM.next()
                  !}
               ?};
               ZLZAM.cntx_pop();
               {? _il>0
               ||
::              Znajdujemy obiekt planistyczny i wyliczamy ilość w kolejce
                  _px_il:=0;
                  _px_obj:=exec('get_zkp_object','px_obj',ZK_P.ref());
                  {? _px_obj<>null() || _px_il:=exec('get_que_ilosc','px_obj',_px_obj,exec('get_mainversion','px_ver')) ?};

::              Ilość zaplanowana
                  {? _px_il>0
                  || _args.IL:=_px_il;
                     _args.DW:=ZK_P.PL_DATA;
                     _args.TW:=ZK_P.PL_TIME;
                     _args.SRC_REF:=$_px_obj;
                     exec('add','tech_structure',_args);
                     exec('expand','tech_structure',_args.ref)
                  ?};
                  {? _il-_px_il>0
                  || _args.IL:=_il-_px_il;
                     _args.DW:=ZK_P.PL_DATA;
                     _args.TW:=ZK_P.PL_TIME;
                     _tktl:= exec('dflt_ktl','tech_prod',ZK_P.M,1,1);
                     _added:=0;
                     {? (var_pres('TAB_ZAM',_env.CHECK)) >0 & _env.CHECK.TAB_ZAM.find_tab(,'TMAT',,'=',$ZK_P.ref())
                     || _tktl:=exec('FindAndGet','#table',TKTL,_env.CHECK.TAB_ZAM.KTLW,,,null())
                     ||
                        {? _tktl=null()
                        || {? ZK_P.M().R<>'S' &  ZK_P.M().R<>'H'
                           || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Brak karty domyślnej'@,ZK_P.M().N,'','',$ZK_P.M);
                              _added:=1
                           ?}
                        |? ~exec('tktl_act','tech_head',,$_tktl)
                        || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Karta domyślna nieaktualna'@,ZK_P.M().N,
                           exec('FindAndGet','#table',TKTL,_tktl,,'NRK','N'),exec('FindAndGet','#table',TKTL,_tktl,,'WER','N')
                           ,$ZK_P.M);
                           _added:=1
                        ?}
                     ?};
                     _args.TKTL:=_tktl;
                     _args.SRC_REF:=$ZK_P.ref();
                     exec('add','tech_structure',_args);
                     {? _added=0 || exec('expand','tech_structure',_args.ref) ?}
                  ?}
               || _env.KOMM.add('%1 — cała ilość została zlecona.'@[exec('record','#to_string',ZK_P.ref())])
               ?}
            || _env.KOMM.add('%1 — cała ilość została zrealizowana.'@[exec('record','#to_string',ZK_P.ref())])
            ?};
            ZK_P.cntx_pop();
            _selected.next()
         !}
      ?}
   ?};

:: Wyświetlam tabelę z problemami i uzupełniam tabelę zamienników
   _ok:=1;
   {? _env.CHECK.TAB.size()>0
   || _env.CHECK.TAB.win_sel(_env.CHECK.WERA);
      _ok:=exec('tktl_chck_sel','tech_structure');
      {? _ok=0 || _exit:=0 ?}
   || _exit:=0
   ?};
_exit
!};
::Koniec petli
{? _ok
|| exec('cumulate','tech_structure');
   exec('select','tech_structure')
?};
~~


\zkp_analizas_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'po grupie' dla tabeli ZK_P
::----------------------------------------------------------------------------------------------------------------------
~~


\zkn_analizas_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'przed' dla tabeli ZK_N;
::       analizie podlegają tylko surowce produktów w ilości nie zleconej
::----------------------------------------------------------------------------------------------------------------------
{? ZK_N.sel_size()=0
|| exec('env_create','tech_structure',1);
   _can_continue:=exec('edit_params','tech_structure',0,0,1)
|| return()
?};
_env:=__ENV_STR;
::  Rozpoczynam pętle
_exit:=1;
{!
|?
   {? var_pres('TAB',_env.STRUCT)>0 || _env.STRUCT.TAB.erase()  ?};
   {? var_pres('ELEMENT',_env.STRUCT)>0 || _env.STRUCT.ELEMENT.erase() ?};
   {? var_pres('TAB',_env.CHECK) > 0 || _env.CHECK.TAB.erase() ?};

   {? _can_continue>0
   || {? var_pres('_args') > 0 || obj_del(_args) ?};
      _args:=exec('add_a','tech_structure');
      PX_SUR.cntx_psh();
      PX_SUR.clear();
      ZK_P.cntx_psh();
      ZK_P.index('NAG');
      ZK_P.prefix(ZK_N.ref());
      {? ZK_P.first()
      || {!
         |? {? ZK_P.M().RODZ='U'
            || _env.KOMM.add('%1 — pozycje usługowe nie są analizowane.'@[exec('record','#to_string',ZK_P.ref())])
            |? ZK_P.ILP>0
            || _args.M:=ZK_P.M;
::             Ilość pozostała
               _il:=ZK_P.ILP;
::             Ilość zmniejszamy o ilość zleconą
               ZLZAM.cntx_psh();
               ZLZAM.index('ZMZL0');
               ZLZAM.prefix($ZK_P.ref());
               {? ZLZAM.first()
               || {!
                  |? _il-=ZLZAM.ILZL;
                     ZLZAM.next()
                  !}
               ?};
               ZLZAM.cntx_pop();
               {? _il>0
               ||
::                Znajdujemy obiekt planistyczny i wyliczamy ilość w kolejce
                  _px_il:=0;
                  _px_obj:=exec('get_zkp_object','px_obj',ZK_P.ref());
                  {? _px_obj<>null() || _px_il:=exec('get_que_ilosc','px_obj',_px_obj,exec('get_mainversion','px_ver')) ?};

::                Ilość zaplanowana
                  {? _px_il>0
                  || _args.IL:=_px_il;
                     _args.DW:=ZK_P.PL_DATA;
                     _args.TW:=ZK_P.PL_TIME;
                     _args.SRC_REF:=$_px_obj;
                     exec('add','tech_structure',_args);
                     exec('expand','tech_structure',_args.ref)
                  ?};
                  {? _il-_px_il>0
                  || _args.IL:=_il-_px_il;
                     _args.DW:=ZK_P.PL_DATA;
                     _args.TW:=ZK_P.PL_TIME;
                     _added:=0;

                     {? (var_pres('TAB_ZAM',_env.CHECK)) >0 & _env.CHECK.TAB_ZAM.find_tab(,'TMAT',,'=',$ZK_P.ref())
                     || _tktl:=exec('FindAndGet','#table',TKTL,_env.CHECK.TAB_ZAM.KTLW,,,null())
                     ||
                        _tktl:= exec('dflt_ktl','tech_prod',ZK_P.M,1,1);
                        {? _tktl=null()
                        ||
                           {? ZK_P.M().R<>'S' &  ZK_P.M().R<>'H'
                           || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Brak karty domyślnej'@,ZK_P.M().N,'','',$ZK_P.M);
                              _added:=1
                           ?}
                        |? ~exec('tktl_act','tech_head',,$_tktl)
                        || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Karta domyślna nieaktualna'@,ZK_P.M().N,
                           exec('FindAndGet','#table',TKTL,_tktl,,'NRK','N'),exec('FindAndGet','#table',TKTL,_tktl,,'WER','N')
                           ,$ZK_P.M);
                           _added:=1
                        ?}
                     ?};

                     _args.TKTL:=_tktl;
::                     _args.TKTL:=exec('dflt_ktl','tech_prod',ZK_P.M,1);
                     _args.SRC_REF:=$ZK_P.ref();
                     exec('add','tech_structure',_args);
                     {? _added=0 || exec('expand','tech_structure',_args.ref) ?}
                  ?}
               || _env.KOMM.add('%1 — cała ilość została zlecona.'@[exec('record','#to_string',ZK_P.ref())])
               ?}
            || _env.KOMM.add('%1 — cała ilość została zrealizowana.'@[exec('record','#to_string',ZK_P.ref())])
            ?};
            ZK_P.next()
         !}
      ?};
      ZK_P.cntx_pop();
      PX_SUR.cntx_pop()
   ?};

:: Wyświetlam tabelę z problemami i uzupełniam tabelę zamienników
   _ok:=1;
   {? _env.CHECK.TAB.size()>0
   || _env.CHECK.TAB.win_sel(_env.CHECK.WERA);
      _ok:=exec('tktl_chck_sel','tech_structure');
      {? _ok=0 || _exit:=0 ?}
   || _exit:=0
   ?};
_exit
!};
::Koniec petli

{? ZK_N.sel_size()=0 & _can_continue>0 & _ok
|| exec('cumulate','tech_structure');
   exec('select','tech_structure')
?};
~~


\zkn_analizas_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'po' dla tabeli ZK_N
::----------------------------------------------------------------------------------------------------------------------
~~


\zkn_analizas_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'przed grupą' dla tabeli ZK_N
::----------------------------------------------------------------------------------------------------------------------
exec('env_create','tech_structure',1);
exec('edit_params','tech_structure',0,0,1);
_can_continue:=1;
_env:=__ENV_STR;
::  Rozpoczynam pętle
_exit:=1;
{!
|?
   {? var_pres('TAB',_env.STRUCT)>0 || _env.STRUCT.TAB.erase()  ?};
   {? var_pres('ELEMENT',_env.STRUCT)>0 || _env.STRUCT.ELEMENT.erase() ?};
   {? var_pres('TAB',_env.CHECK) > 0 || _env.CHECK.TAB.erase() ?};

   {? _can_continue>0
   || {? var_press('_selected')>0 || obj_del(_selected) ?};
      _selected:=ZK_N.sel_aget();
      {? _selected.first()
      || {!
         |? {? var_pres('_args') > 0 || obj_del(_args) ?};
            _args:=exec('add_a','tech_structure');
            PX_SUR.cntx_psh();
            PX_SUR.clear();
            ZK_P.cntx_psh();
            ZK_P.index('NAG');
            ZK_P.prefix(_selected.REF);
            {? ZK_P.first()
            || {!
               |? {? ZK_P.M().RODZ='U'
                  || _env.KOMM.add('%1 — pozycje usługowe nie są analizowane.'@[exec('record','#to_string',ZK_P.ref())])
                  |? ZK_P.ILP>0
                  || _args.M:=ZK_P.M;
::                   Ilość pozostała
                     _il:=ZK_P.ILP;
::                   Ilość zmniejszamy o ilość zleconą
                     ZLZAM.cntx_psh();
                     ZLZAM.index('ZMZL0');
                     ZLZAM.prefix($ZK_P.ref());
                     {? ZLZAM.first()
                     || {!
                        |? _il-=ZLZAM.ILZL;
                           ZLZAM.next()
                        !}
                     ?};
                     ZLZAM.cntx_pop();
                     {? _il>0
                     ||
::                      Znajdujemy obiekt planistyczny i wyliczamy ilość w kolejce
                        _px_il:=0;
                        _px_obj:=exec('get_zkp_object','px_obj',ZK_P.ref());
                        {? _px_obj<>null() || _px_il:=exec('get_que_ilosc','px_obj',_px_obj,exec('get_mainversion','px_ver')) ?};

::                      Ilość zaplanowana
                        {? _px_il>0
                        || _args.IL:=_px_il;
                           _args.DW:=ZK_P.PL_DATA;
                           _args.TW:=ZK_P.PL_TIME;
                           _args.SRC_REF:=$_px_obj;
                           exec('add','tech_structure',_args);
                           exec('expand','tech_structure',_args.ref)
                        ?};
                        {? _il-_px_il>0
                        || _args.IL:=_il-_px_il;
                           _args.DW:=ZK_P.PL_DATA;
                           _args.TW:=ZK_P.PL_TIME;
                           _added:=0;

                           {? (var_pres('TAB_ZAM',_env.CHECK)) >0 & _env.CHECK.TAB_ZAM.find_tab(,'TMAT',,'=',$ZK_P.ref())
                           || _tktl:=exec('FindAndGet','#table',TKTL,_env.CHECK.TAB_ZAM.KTLW,,,null())
                           ||
                              _tktl:= exec('dflt_ktl','tech_prod',ZK_P.M,1,1);
                              {? _tktl=null()
                              ||
                                 {? ZK_P.M().R<>'S' &  ZK_P.M().R<>'H'
                                 || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Brak karty domyślnej'@,ZK_P.M().N,'','',$ZK_P.M);
                                    _added:=1
                                 ?}
                              |? ~exec('tktl_act','tech_head',,$_tktl)
                              || exec('tktl_chck_add','tech_structure',$_tktl,$ZK_P.ref(),'Karta domyślna nieaktualna'@,ZK_P.M().N,
                                 exec('FindAndGet','#table',TKTL,_tktl,,'NRK','N'),exec('FindAndGet','#table',TKTL,_tktl,,'WER','N')
                                 ,$ZK_P.M);
                                 _added:=1
                              ?}
                           ?};
                           _args.TKTL:=_tktl;
                           _args.SRC_REF:=$ZK_P.ref();
                           exec('add','tech_structure',_args);
                           {? _added=0 || exec('expand','tech_structure',_args.ref) ?}
                        ?}
                     || _env.KOMM.add('%1 — cała ilość została zlecona.'@[exec('record','#to_string',ZK_P.ref())])
                     ?}
                  || _env.KOMM.add('%1 — cała ilość została zrealizowana.'@[exec('record','#to_string',ZK_P.ref())])
                  ?};
                  ZK_P.next()
               !}
            ?};
         ZK_P.cntx_pop();
         PX_SUR.cntx_pop();
         _selected.next()
         !}
      ?}
   ?};

:: Wyświetlam tabelę z problemami i uzupełniam tabelę zamienników
   _ok:=1;
   {? _env.CHECK.TAB.size()>0
   || _env.CHECK.TAB.win_sel(_env.CHECK.WERA);
      _ok:=exec('tktl_chck_sel','tech_structure');
      {? _ok=0 || _exit:=0 ?}
   || _exit:=0
   ?};
_exit
!};
::Koniec petli
{? _ok
|| exec('cumulate','tech_structure');
   exec('select','tech_structure')
?};
~~


\zkn_analizas_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Analiza dostępności surowców w czasie - akcja 'po grupie' dla tabeli ZK_N
::----------------------------------------------------------------------------------------------------------------------
~~


\historyRes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: historia zmian kolejnosci rezerwacji
::  OLD: \sel_hisz/zk2.fml
::----------------------------------------------------------------------------------------------------------------------
HISZKP.index('M');
HISZKP.prefix();
HISZKP.win_sel('WER');
HISZKP.select()


\zam_arch_InitRes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: tabela do aktualizacji rezerwacji przed
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__aktmat');
__aktmat:=tab_tmp(1,'MAT','STRING[16]',''
           ,'ILR','REAL',''
           ,'NRK','INTEGER','');
~~


\zam_arch_DoneRes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: tabela do aktualizacji rezerwacji po
::----------------------------------------------------------------------------------------------------------------------
__aktmat.clear();
{? __aktmat.first()
|| exec('openz','open_tab',ST.ODDZ+'__');
   _zkp:=tab_tmp(2,'MAT','STRING[16]','','ZKP','STRING[16]','');
   _zkn:=tab_tmp(1,'ZKN','STRING[16]','');
   {!
   |? _refm:=exec('FindAndGet','#table','M',__aktmat.MAT,,,null());
      _buf:=exec('aktu_rez','rezerwacje',_refm,__aktmat.NRK,__aktmat.ILR,,_zkp);
      _buf.clear();
      {? _buf.first()
      || {!
         |? _zkn.clear();
            {? ~_zkn.find_key(_buf.ZKN)
            || _zkn.blank();
               _zkn.ZKN:=_buf.ZKN;
               _zkn.add(1)
            ?};
            _buf.next()
         !}
      ?};
      obj_del(_buf);
      __aktmat.next()
   !};
   exec('aktznzkn','zamsiw_nag',_zkn);
   obj_del(_zkp);
   obj_del(_zkn)
?};
VAR_DEL.delete('__aktmat');
~~


\czyMgUprZam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: sprawdza czy podany magazyn jest upraniony do realizacji zamówień sprzedaży lub wewnętrznych
::   WE: _a - Magazyn
::       [_b] - opcja dodatkowa 1-sprzedaży, -1-wewnętrzne 0-domyślnie jednych i drugich
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
{? _>=2 || {? type_of(_b)<>1 || _b:=0 ?} || _b:=0 ?};

_wyn:=0;
USERS_UP.cntx_psh();
USERS_UP.index('MG');
USERS_UP.prefix(null,'ZA'+{? _b=1 || 'M' |? _b=-1 || 'W' || '' ?});
_wyn:=USERS_UP.find_tab('first','MG',,'=',_a);
USERS_UP.cntx_pop();
_wyn


\odtwstat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: odtwarzanie statusow zamowien
::   WE: [_a] - 1-pytaj(domyslnie) 0-bez pytania
::  OLD: \odtwstat/rezerw.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

{? ~_a | FUN.ask('Czy odtworzyć statusy zamówień sprzedaży i zamówień wewnętrznych?'@)
|| echo();

   VAR_DEL.delete('__magmat','__stm','__zkn_t','__zkp_t','__usr_t');
   __magmat:=tab_tmp(2,'MAT','STRING[16]','','MAG','STRING[16]','');
   __stm:=tab_tmp(1,'MAG','STRING[16]',''
        ,'SD','REAL',''
        ,'SR','REAL',''
        ,'SP','REAL',''
        ,'BYL','INTEGER','');

   __usr_t:=tab_tmp(2,'USR','STRING[16]',''
             ,'TYP','STRING[1]',''
             ,'SD','REAL','');
   __zkn_t:=tab_tmp(1,'ZKN','STRING[16]','');

   M.cntx_psh();
   ZK_N.cntx_psh();
   ZK_P.cntx_psh();
   REZ.cntx_psh();
   M.index('ARODZ');
   M.prefix('T','T');
   {? M.first()
   || _mi:=M.size; _tp:=time(); _li:=0;
      {!
      |? _mat:=M.ref();
         __stm.clear(); {? __stm.first() || {! |? __stm.del() !} ?};
         _li+=1;
         _tb:=time;
         echo('Odtwarzanie statusów zamówień. Proszę czekać.'@,$_li+' / '+$_mi);
         ZK_P.index('NRKOL');
         ZK_P.prefix('A','Z',M.ref());
         {? ZK_P.first()
         || {!
            |? ZK_P.ZBB:='N';
               ZK_P.ZBZ:='N';
               ZK_P.ZNB:={? exec('FindInSet','#table','REZ','ZK_P','B',ZK_P.ref())<>null || 'T' || 'N' ?};
               ZK_P.ZNW:={? exec('spr_waru','rezerwacje',ZK_P.ref()) || 'T' || 'N' ?};
               ZK_P.ZNR:={? ZK_P.ILP<ZK_P.ILZ || 'T' || 'N' ?};
               _ilr:=exec('ile_reze','rezerwacje',ZK_P.ref(),1);
               ZK_P.SR:=_ilr[2];
               ZK_P.DOR:=_ilr[1];
               ZK_P.ILRB:=_ilr[2];
               ZK_P.ILRW:=_ilr[3];
               ZK_P.ILRD:=_ilr[4];
               ZK_P.ILRA:=_ilr[5];
               ZK_P.ZNB:={? ZK_P.ILRB>0 || 'T' || 'N' ?};
               ZK_P.ZNW:={? ZK_P.ILRW>0 || 'T' || 'N' ?};
               ZK_P.ZNR:={? ZK_P.ILP<ZK_P.ILZ || 'T' || 'N' ?};
               ZK_P.REZ:=ZK_P.ILRB>0 | ZK_P.ILRA>0;
               _rezzlzam:=_ilr[6];
               obj_del(_ilr);
               _doroz:=ZK_P.DOR+(ZK_P.ILRW-_rezzlzam-ZK_P.ILRA);
               ZK_P.ILBEZ:={? ZK_P.END || 0 |? ZK_P.ILP>_doroz || ZK_P.ILP-_doroz || 0 ?};
               ZK_P.CZYBEZ:={? ZK_P.ILBEZ>0 || 'T' || 'N' ?};
               {? ~ZK_P.put() || undo() ?};
               exec('zkp_upd_ilosc','px_obj');
               __zkn_t.clear();
               {? ~__zkn_t.find_key($ZK_P.N) || __zkn_t.blank(); __zkn_t.ZKN:=$ZK_P.N; __zkn_t.add(1) ?};
               ZK_P.next()
            !}
         ?};
::       obliczenie stanow magazynowych po odtworzeniu rezerwacji dla danego M

::       pozycje bez rezerwacji
::       teraz aktualizacja znacznikow ZBB i ZBZ
         {? exec('bez_rez','rezerwacje',M.ref()) || exec('akt_stan','magazyn_stan',__stm,M.ref(),null) ?};
         __stm.clear(); {? __stm.first() || {! |? __stm.del() !} ?};
         __usr_t.clear(); {? __usr_t.first() || {! |? __usr_t.del() !} ?};
         M.next()
      !}
   ?};
   exec('aktznzkn','zamsiw_nag',__zkn_t);
   M.cntx_pop();
   ZK_N.cntx_pop();
   ZK_P.cntx_pop();
   REZ.cntx_pop();
   VAR_DEL.delete('__magmat','__stm','__zkn_t','__zkp_t','__usr_t');
   echo()
?};
~~


\czyRezRPrez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Sprawdza czy dla danej pozycji zamówienia są rezerwacje dedykowane
::   WE: _a - ZK_P.ref()
::   WY: 1-tak 0-nie
::  OLD: \czyRezZlzam/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
REZ.cntx_psh();
REZ.index('ZK_P');
REZ.prefix(_a);
{? REZ.first() || {! |? _wyn:=REZ.RP_REZ='T'; ~_wyn & REZ.next() !} ?};
REZ.cntx_pop();
_wyn


\biq_zkn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Analiza BI w obszarze "Zamówienia sprzedaży"
::----------------------------------------------------------------------------------------------------------------------
exec('np_run','#b__box','BIQ_LSP_ZKNA')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 036386e021a75e0c6b859664e363ce146a0de6548ca5ced1bf53a6d127542c34545bcc9a079630d6080f03642d027a181205a97866edbf287041b0bc3d6f7b1125dbc31bdd98c074717dc9a0b5198092144547c1c9759e158393f3577f7f27bd432090820d3d47a931dd4fe2e8432027a4098f1e06d7ada663136c3826f0891f
