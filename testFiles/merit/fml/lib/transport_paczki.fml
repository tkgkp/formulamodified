:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: transport_paczki.fml
:: Utworzony: 12.05.2020
:: Autor: [rr]
:: Systemy:
::======================================================================================================================
:: Zawartość:
::======================================================================================================================


\code_order
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Kod identyfikujący dyspozycje transportową
::   WE: _a - TR_NZL.IDADD
::       _b - #TR_NZL.ref()
::       _c - TR.ODDZ
::   WY: nowy kod
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';

_fyear:=2019;
_maska:='abcdefghijklmnopqrstuvwxyz_1234567890';

_tform:=19+_a;

_date:=10+_tform; _yy:=#(4+_date); _mm:=#(2+(5-_date)); _dd:=#(_date+2);
_time:=_tform+8;  _hr:=#(2+_time); _mn:=#(2+(3-_time)); _sc:=#(_time+2);

:: ciąg znakowy - znaki dostępne w masce (kolejność ich jest isotna)
_chars:=''; {! _i:=48..57 |! _chars+=%_i !};

:: powołanie obiektu generującego maski
exec('declGenMask','#bi_arch');
_mask2:=obj_new(@.CLASS.GENMASK,2,_chars);
_mask5:=obj_new(@.CLASS.GENMASK,5,_chars);

_codeod:=_mask2.numMask(_maska*_c);
_codedt:=form(_yy-2019,-2,0,'99')+form(_mm,-2,0,'99')+form(_dd,-2,0,'99');
_codetm:=_mask5.numMask((_hr*60*60)+(_mn*60)+_sc);
_codefr:=REF.FIRMA().SYMBOL;
_codezn:=form(#_b,-8,0,'99');

obj_del(_mask2);
obj_del(_mask5);
_wyn+=(_codeod+_codedt+_codetm+_codefr+_codezn);
_wyn


\before_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed obsługą okienka TR_PACK
::----------------------------------------------------------------------------------------------------------------------
~~


\refresh_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: odświeżenie okienka TR_PACK
::----------------------------------------------------------------------------------------------------------------------
_size:=TR_PACK.sel_size() | {? ~TR_PACK.f_active() || TR_PACK.size() || TR_PACK.f_size() ?};
_tr_pack:={? _size || TR_PACK.ref() || null() ?};
TR_ZPACK.index('TR_PACK');
TR_ZPACK.prefix(_tr_pack);
grp_disp(TR_ZPACK,'WER');
TR_HPACK.index('TR_PACK');
TR_HPACK.prefix(_tr_pack);
grp_disp(TR_HPACK,'WER');
''


\after_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po obsłudze okienka TR_PACK
::----------------------------------------------------------------------------------------------------------------------
''


\before_tr_hpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed obsługą okienka TR_HPACK
::----------------------------------------------------------------------------------------------------------------------
''


\refresh_tr_hpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: odświeżenie okienka TR_HPACK
::----------------------------------------------------------------------------------------------------------------------
''


\after_tr_hpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po obsłudze okienka TR_HPACK
::----------------------------------------------------------------------------------------------------------------------
''


\before_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed obsługą okienka TR_ZPACK
::----------------------------------------------------------------------------------------------------------------------
''


\refresh_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: odświeżenie okienka TR_ZPACK
::----------------------------------------------------------------------------------------------------------------------
''


\after_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po obsłudze okienka TR_ZPACK
::----------------------------------------------------------------------------------------------------------------------
''


\add_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Dodanie przesyłek
::----------------------------------------------------------------------------------------------------------------------
TR_SL.cntx_psh();
TR_ZEWN.cntx_psh();
TR_SL.index('COURIER');
TR_NZL.TR_ZEWN();
TR_ZEWN.get();
TR_SL.prefix(TR_ZEWN.COURIER,);
{? ~TR_SL.first()
|| FUN.info('Należy zaktualizować słowniki kuriera.'@);
   TR_ZEWN.cntx_pop();
   TR_SL.cntx_pop();
   return()
?};
TR_ZEWN.cntx_pop();
TR_SL.cntx_pop();

{? exec('ctrl_tr_nzl','transport_paczki',TR_NZL.ref())=1
|| FUN.info('Rozpisano w całości paczki dla danej dyspozycji transportowej');
   return(0)
?};

VAR_DEL.delete('__spack','__wpack');

TR_Z.win_edit('TR_PACK');
TR_Z.MOD:='N';
TR_Z.IL_PACK:=1;
TR_Z.R_PACK:='T';
TR_Z.D_PACK:='N';
TR_NZL.get();
TR_Z.TR_NZL:=TR_NZL.ref();
TR_Z.TR_ZEWN:=TR_NZL.TR_ZEWN;
TR_Z.COURIER:=TR_Z.TR_ZEWN().COURIER;

TR_Z.efld_opt('TR_PACK','enable=1',,'IL_PACK');
TR_Z.efld_opt('TR_PACK','editable=1',,'IL_PACK');
TR_Z.efld_opt('TR_PACK','enable=1',,'D_PACK');
TR_Z.efld_opt('TR_PACK','editable=0',,'D_PACK');
{? TR_Z.edit("exec('chk_il_pack','transport_paczki')")
||
   _red:=exec('tr_pack_edit','transport_paczki',TR_Z.COURIER,null());
   TR_PACK.win_edit(_red);

:: dane odbiorcy

   TR_PACK.efld_opt(_red,'enable=0',,'KW_POB');
   TR_PACK.efld_opt(_red,'mark=0',,'KW_POB');
   TR_PACK.efld_opt(_red,'enable=0',,'KW_UB');
   TR_PACK.efld_opt(_red,'mark=0',,'KW_UB');

   {? TR_Z.COURIER='dbschenker'
   || TR_PACK.efld_opt(_red,'enable=1',,'DO');
      TR_PACK.efld_opt(_red,'enable=0',,'UB');
      TR_PACK.efld_opt(_red,'enable=1',,'DN');
      TR_PACK.efld_opt(_red,'enable=0',,'POW')
   |? TR_Z.COURIER='dhl'
   || TR_PACK.efld_opt(_red,'enable=0',,'DO');
      TR_PACK.efld_opt(_red,'enable=1',,'UB');
      TR_PACK.efld_opt(_red,'enable=1',,'DN');
      TR_PACK.efld_opt(_red,'enable=1',,'POW')
   |? TR_Z.COURIER='ups'
   || TR_PACK.efld_opt(_red,'enable=0',,'DO');
      TR_PACK.efld_opt(_red,'enable=0',,'UB');
      TR_PACK.efld_opt(_red,'enable=1',,'DN');
      TR_PACK.efld_opt(_red,'enable=0',,'POW')
   || TR_PACK.efld_opt(_red,'enable=0',,'DO');
      TR_PACK.efld_opt(_red,'enable=1',,'UB');
      TR_PACK.efld_opt(_red,'enable=0',,'DN');
      TR_PACK.efld_opt(_red,'enable=0',,'POW')
   ?};

   TR_PACK.blank();
   TR_Z.NAZ_:={? TR_Z.TR_NZL().KH<>null()
              || TR_Z.TR_NZL().KH().NAZ
              || ''
              ?};
   TR_PACK.TR_NZL:=TR_Z.TR_NZL;
   TR_PACK.TR_ZEWN:=TR_Z.TR_ZEWN;
   TR_PACK.MAIL:=TR_Z.TR_NZL().EM;
   TR_PACK.TEL:=TR_Z.TR_NZL().TEL;
   TR_PACK.OPIS:=exec('tr_pack_opis','transport_paczki',TR_Z.TR_NZL);
   TR_PACK.STAN:='Do nadania';
   TR_PACK.R_PCK:=exec('wybTR_SL','transport_paczki',TR_Z.COURIER,'RS');
   TR_PACK.WAP:=exec('pobWAR','transport_paczki');
   exec('kalkulujWYM','transport_paczki',0);
   {? TR_PACK.edit("exec('chk_tr_pack','transport_paczki')")
   || _ilpack:={? TR_Z.R_PACK='T' || TR_Z.IL_PACK || 1 ?};
      _buf:=tab_tmp(1,'TR_ZL','STRING[16]','','IL','REAL','');
      {! _i:=1.._ilpack
      |! {? TR_PACK.add(1)
         || _tr_pack:=TR_PACK.ref();
            TR_NZL.cntx_psh();
            TR_ZL.cntx_psh();
            TR_ZPACK.cntx_psh();
            TR_ZL.index('POZ');
            TR_ZL.prefix(TR_Z.TR_NZL);
            {? TR_ZL.first()
            || {!
               |? {? _i=_ilpack
                  || _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref())
                  || _buf.clear();
                     {? _buf.find_key($TR_ZL.ref())
                     || _ilz:=_buf.IL
                     || _buf.blank();
                        _buf.TR_ZL:=$TR_ZL.ref();
                        _buf.IL:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
                        _buf.add(1);
                        _ilz:=_buf.IL
                     ?}
                  ?};
                  _ile:=TR_ZL.IL-_ilz;
                  {? _ile>0
                  || _ilp:=_ile/{? _i=_ilpack || 1 || _ilpack ?} $ TR_ZL.M().DOKL;
                     {? _ilp>0
                     || TR_ZPACK.prefix();
                        TR_ZPACK.blank();
                        TR_ZPACK.TR_PACK:=_tr_pack;
                        TR_ZPACK.TR_ZL:=TR_ZL.ref();
                        TR_ZPACK.IL:=_ilp;
                        TR_ZPACK.add(1)
                     ?}
                  ?};
                  TR_ZL.next()
               !}
            ?};
            TR_NZL.cntx_pop();
            TR_ZL.cntx_pop();
            TR_ZPACK.cntx_pop();
            exec('addTR_SPACK','transport_paczki',TR_PACK.ref(),TR_Z.COURIER)
         ?}
      !};
      obj_del(_buf)
   ?}
?};
VAR_DEL.delete('__spack','__wpack');
~~


\chk_il_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Kontrola ilości paczek
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? TR_Z.IL_PACK<=0
|| FUN.info('Liczba paczek musi być większa od zera.'@);
   _res:='IL_PACK'
?};
_res


\chk_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Kontrola poprawności danych paczki
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? TR_PACK.MAIL=''
|| FUN.info('Należy podać adres e-mail.'@);
   _res:='MAIL'
|? (_pos:=TR_PACK.MAIL*'@'; ~_pos | _pos=+TR_PACK.MAIL)
|| FUN.info('Nieprawidłowy adres e-mail.'@);
   _res:='MAIL'
|? TR_PACK.TEL=''
|| FUN.info('Należy podać telefon.'@);
   _res:='TEL'
|? TR_PACK.R_PCK=''
|| FUN.info('Należy podać rodzaj paczki.'@);
   _res:='R_PCK'
|? TR_PACK.POB='T' & TR_PACK.KW_POB<=0
|| FUN.info('Należy podać kwotę pobrania.'@);
   _res:='KW_POB'
|? TR_PACK.UB='T' & TR_PACK.KW_UB<=0
|| FUN.info('Należy podać kwotę ubezpieczenia.'@);
   _res:='KW_UB'
|? TR_PACK.DLUG<=0
|| FUN.info('Należy podać prawidłowe wymiary paczki.\nDługość musi być większa od zera.'@);
   _res:='DLUG'
|? TR_PACK.SZER<=0
|| FUN.info('Należy podać prawidłowe wymiary paczki.\nSzerokość musi być większa od zera.'@);
   _res:='SZER'
|? TR_PACK.WYS<=0
|| FUN.info('Należy podać prawidłowe wymiary paczki.\nWysokość musi być większa od zera.'@);
   _res:='WYS'
|? TR_PACK.WAGA<=0
|| FUN.info('Należy podać wagę paczki.'@);
   _res:='WAGA'
|? TR_PACK.OPIS=''
|| FUN.info('Należy podać opis zawartości.'@);
   _res:='OPIS'
?};
_res


\mod_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Modyfikacja przesyłek
::----------------------------------------------------------------------------------------------------------------------
TR_SL.cntx_psh();
TR_ZEWN.cntx_psh();
TR_SL.index('COURIER');
TR_NZL.TR_ZEWN();
TR_ZEWN.get();
TR_SL.prefix(TR_ZEWN.COURIER,);
{? ~TR_SL.first()
|| FUN.info('Należy zaktualizować słowniki kuriera.'@);
   TR_ZEWN.cntx_pop();
   TR_SL.cntx_pop();
   return()
?};
TR_ZEWN.cntx_pop();
TR_SL.cntx_pop();

{? TR_PACK.NR=''
|| TR_Z.MOD:='T';
   TR_Z.TR_NZL:=TR_PACK.TR_NZL;
   TR_Z.TR_ZEWN:=TR_PACK.TR_ZEWN;
   TR_Z.COURIER:=TR_Z.TR_ZEWN().COURIER;
   TR_Z.INFPACK:={? TR_PACK.NOSTD=1 || 'PRZESYŁKA NIESTANDARDOWA WYMAGA WYCENY'@
                 || ''
                 ?};
   VAR_DEL.delete('__spack','__wpack');
   _red:=exec('tr_pack_edit','transport_paczki',TR_Z.COURIER,TR_PACK.ref());
   TR_PACK.win_edit(_red);

   {? TR_Z.COURIER='dbschenker'
   || TR_PACK.efld_opt(_red,'enable=1',,'DO');
      TR_PACK.efld_opt(_red,'enable=0',,'UB');
      TR_PACK.efld_opt(_red,'enable=1',,'DN');
      TR_PACK.efld_opt(_red,'enable=0',,'POW')
   |? TR_Z.COURIER='dhl'
   || TR_PACK.efld_opt(_red,'enable=0',,'DO');
      TR_PACK.efld_opt(_red,'enable=1',,'UB');
      TR_PACK.efld_opt(_red,'enable=1',,'DN');
      TR_PACK.efld_opt(_red,'enable=1',,'POW')
   || TR_PACK.efld_opt(_red,'enable=0',,'DO');
      TR_PACK.efld_opt(_red,'enable=1',,'UB');
      TR_PACK.efld_opt(_red,'enable=0',,'DN');
      TR_PACK.efld_opt(_red,'enable=0',,'POW')
   ?};

   exec('po_pob_tr_pack','transport_paczki');
   exec('po_ub_tr_pack','transport_paczki');
   TR_Z.NAZ_:={? TR_Z.TR_NZL().KH<>null()
              || TR_Z.TR_NZL().KH().NAZ
              || ''
              ?};
   {? TR_PACK.edit("exec('chk_tr_pack','transport_paczki')")
   || {? TR_PACK.put(1) || exec('addTR_SPACK','transport_paczki',TR_PACK.ref(),TR_Z.COURIER) ?}
   ?};
   VAR_DEL.delete('__spack','__wpack')
|| FUN.info('Nadano numer paczce modyfikacja niemożliwa.'@)
?};
~~


\del_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Usunięcie przesyłek
::----------------------------------------------------------------------------------------------------------------------
_sel:=TR_PACK.sel_aget();
TR_PACK.sel_adel();
TR_PACK.cntx_psh();
{? _sel.first() & FUN.ask('Czy usunąć dane o przesyłkach?\n\nUwaga. Usunięte zostaną tylko przesyłki bez numerów.'@)
|| {!
   |? {? (TR_PACK.prefix(); TR_PACK.seek(_sel.REF,)) & TR_PACK.NR=''
      || TR_ZPACK.index('TR_PACK');
         TR_ZPACK.prefix(TR_PACK.ref());
         {? TR_ZPACK.first() || {! |? TR_ZPACK.del() !} ?};
         TR_SPACK.index('TR_PACK');
         TR_SPACK.prefix(TR_PACK.ref());
         {? TR_SPACK.first() || {! |? TR_SPACK.del() !} ?};
         TR_HPACK.index('TR_PACK');
         TR_HPACK.prefix(TR_PACK.ref());
         {? TR_HPACK.first() || {! |? TR_HPACK.del() !} ?};
         TR_PACK.del()
      ?};
      _sel.next()
   !}
|| {? TR_PACK.NR='' & FUN.ask('Czy usunąć dane o przesyłce?'@)
   || TR_ZPACK.index('TR_PACK');
      TR_ZPACK.prefix(TR_PACK.ref());
      {? TR_ZPACK.first() || {! |? TR_ZPACK.del() !} ?};
      TR_SPACK.index('TR_PACK');
      TR_SPACK.prefix(TR_PACK.ref());
      {? TR_SPACK.first() || {! |? TR_SPACK.del() !} ?};
      TR_HPACK.index('TR_PACK');
      TR_HPACK.prefix(TR_PACK.ref());
      {? TR_HPACK.first() || {! |? TR_HPACK.del() !} ?};
      TR_PACK.del()
   ?}
?};
TR_PACK.cntx_pop();
{? ~TR_PACK.sel_size() & {? TR_PACK.f_active() || ~TR_PACK.f_size() || ~TR_PACK.size() ?}
|| TR_Z.STROZ:='BRAK PACZEK'
?};
~~


\selTR_PACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Okienko przesyłek
::----------------------------------------------------------------------------------------------------------------------
TR_PACK.win_sel('GRP');
TR_Z.TR_NZL:=TR_NZL.ref();
TR_Z.TR_ZEWN:=TR_NZL.TR_ZEWN;
_stroz:=exec('ctrl_tr_nzl','transport_paczki',TR_Z.TR_NZL);
{? _stroz=1  || TR_Z.STROZ:='DYSPOZYCJA ROZPISANA'
|? _stroz=-1 || TR_Z.STROZ:='CZEŚCIOWE ROZPISANIE'
|? _stroz=0  || TR_Z.STROZ:='BRAK PACZEK'
?};
TR_PACK.win_fml('WER',TR_Z,'STROZ',,'ICON_BEFORE',exec('tr_z_stroz_ib','transport_paczki'));
_dict:=TR_ZL.win_dict('?');
TR_ZL.win_dict('WYB');
TR_PACK.index('TR_NZL');
TR_PACK.prefix(TR_Z.TR_NZL);
TR_PACK.select();
TR_ZL.win_dict(_dict);
~~


\po_il_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po podaniu ilości paczek
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? TR_Z.IL_PACK<1
|| FUN.info('Niepoprawna ilość paczek.'@);
   _res:=0
|? TR_Z.R_PACK='T' & TR_Z.IL_PACK>1
|| _ctrl:=exec('ctrl_il_pack','transport_paczki',TR_Z.TR_NZL,TR_Z.IL_PACK);
   TR_Z.D_PACK:={? _ctrl || 'N' || 'T' ?};
   TR_Z.efld_opt('TR_PACK','editable=1',,'IL_PACK');
   TR_Z.efld_opt('TR_PACK','editable=0',,'D_PACK')
|| TR_Z.D_PACK:='N';
   TR_Z.efld_opt('TR_PACK','editable=0',,'IL_PACK');
   TR_Z.efld_opt('TR_PACK','editable=0',,'D_PACK')
?};
_res


\po_r_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po zmianie znacznika czy paczki są jednorodne
::----------------------------------------------------------------------------------------------------------------------
{? TR_Z.R_PACK='N'
|| TR_Z.IL_PACK:=1;
   TR_Z.D_PACK:='N';
   TR_Z.efld_opt('TR_PACK','enable=0',,'IL_PACK');
   TR_Z.efld_opt('TR_PACK','enable=0',,'D_PACK')
|| {? TR_Z.IL_PACK<=0 || TR_Z.IL_PACK:=1 ?};
   _ctrl:=exec('ctrl_il_pack','transport_paczki',TR_Z.TR_NZL,TR_Z.IL_PACK);
   TR_Z.D_PACK:={? _ctrl || 'N' || 'T' ?};
   TR_Z.efld_opt('TR_PACK','enable=1',,'IL_PACK');
   TR_Z.efld_opt('TR_PACK','editable=1',,'IL_PACK');
   TR_Z.efld_opt('TR_PACK','enable=1',,'D_PACK');
   TR_Z.efld_opt('TR_PACK','editable=0',,'D_PACK')
?};
1


\ctrl_il_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: formuła kontrolująca rozpisanie po paczkach
::   WE: _a - TR_NZL.ref()
::       _b - ilość paczek
::   WY: 1-pełny podzał, 0-podział z paczką uzupełniającą
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_il_pack:=_b;
{? _il_pack>1
|| TR_NZL.cntx_psh();
   TR_ZL.cntx_psh();
   TR_ZL.index('POZ');
   TR_ZL.prefix(_a);
   {? TR_ZL.first()
   || {!
      |? _ile:=TR_ZL.IL-exec('FindInSet','#table','TR_ZPACK','TR_ZL',TR_ZL.ref(),,"@.TR_ZPACK.IL",,,0);
         {? _ile>0
         || _ilp:=_ile/_il_pack $ TR_ZL.M().DOKL;
            _rozn:=_ile-(_il_pack*_ilp $ TR_ZL.M().DOKL);
            {? _rozn || _res:=0 ?}
         ?};
         _res & TR_ZL.next()
      !}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop()
?};
_res


\f3_tr_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: klawisz F3 dla rodzaju usług kuriera
::----------------------------------------------------------------------------------------------------------------------
_acr:=cur_afld();
_tab:={? cur_tab()=TR_ZC || 'TR_ZC' || 'TR_PACK' ?};
{? _acr='R_PCK'  || _rodz:='RS'
|| _rodz:='??'
?};
{? _rodz<>'??'
|| _fld:=($(_tab+'.'+_acr))();
   TR_SL.win_sel('SEL');
   TR_SL.index('COURIER');
   TR_SL.prefix(TR_Z.TR_ZEWN().COURIER,_rodz);
   {? TR_SL.first()
   || TR_SL.hdr_sel({? _rodz='RS' || 'Rodzaje paczek'@ || '' ?});
      TR_SL.find_key(_fld); {? TR_SL.select(,1) || ($(_tab+'.'+_acr))():=TR_SL.OPIS ?}
   || ($(_tab+'.'+_acr))():=''
   ?}
?};
fld()


\po_tr_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po redakcji dla rodzaju usług kuriera
::   WY: kontrola poprawności pola
::----------------------------------------------------------------------------------------------------------------------
_fld:=fld();
_acr:=cur_afld();
_tab:={? cur_tab()=TR_ZC || 'TR_ZC' || 'TR_PACK' ?};
{? _acr='R_PCK'  || _rodz:='RS'
|? (2+_acr)='UD' || _rodz:='UR'
|| _rodz:='??'
?};
{? _rodz<>'??' & _fld<>''
|| TR_SL.index('COURIER');
   TR_SL.prefix(TR_Z.TR_ZEWN().COURIER,_rodz,_fld,);
   {? TR_SL.first()
   || ($(_tab+'.'+_acr))():=TR_SL.OPIS
   || TR_SL.prefix(TR_Z.TR_ZEWN().COURIER,_rodz,_fld);
      {? TR_SL.first()
      || ($(_tab+'.'+_acr))():=TR_SL.OPIS
      ?}
   ?}
?};
1



\tr_pack_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: podpowiedź opisu zawartości (sklejanie nazw indeksów materiałowych)
::   WE: _a - TR_NZL.ref()
::   WY: opis
::----------------------------------------------------------------------------------------------------------------------
_res:='';
TR_ZL.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix(_a);
{? TR_ZL.first()
|| {!
   |? _ile:=TR_ZL.IL-exec('FindInSet','#table','TR_ZPACK','TR_ZL',TR_ZL.ref(),,"@.TR_ZPACK.IL",,,0);
      {? _ile>0 || _res+=TR_ZL.M().N+', ' ?};
      TR_ZL.next()
   !};
   _res:=_res-2
?};
TR_ZL.cntx_pop();
_res


\tr_pack_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: kolorowanie rekordów
::   WY: schemat kolorów
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_wer:=cur_win(1,1);
_act:='';
:: archiwum
_act+={? (TR_PACK.name()+4)<>'____' || 'DPUNA' || 'C' ?};
_act_hid:={? (TR_PACK.name()+4)<>'____' || ':D' || '' ?};
_act_dom:={? (TR_PACK.name()+4)<>'____' || 'R:R' || 'D:D' ?};
_sel:=TR_PACK.sel_size()>0;

_act+={? ~_sel & TR_PACK.NR<>'' || 'PUN' || '' ?};
_act+={? ~_sel & _wer<>'WERALL' & exec('ctrl_tr_nzl','transport_paczki',TR_PACK.TR_NZL)=1 || 'D' || '' ?};

TR_PACK.actions(_wer,_act_hid,_act_dom,1);
TR_PACK.actions_grayed(_wer,_act);

_tr_nzl:={? _wer='WER' || TR_Z.TR_NZL || TR_PACK.TR_NZL ?};
_stroz:=exec('ctrl_tr_nzl','transport_paczki',_tr_nzl);
{? _stroz=1  || TR_Z.STROZ:='DYSPOZYCJA ROZPISANA'
|? _stroz=-1 || TR_Z.STROZ:='CZEŚCIOWE ROZPISANIE'
|? _stroz=0  || TR_Z.STROZ:='BRAK PACZEK'
?};

TR_Z.NAZ_:={? TR_PACK.TR_NZL().KH<>null()
           || TR_PACK.TR_NZL().KH().NAZ
           || ''
           ?};
_res:={? TR_PACK.STAN='Do nadania'  || 'TR_PACK#01#01'
      |? TR_PACK.STAN='Nadana'      || 'TR_PACK#01#02'
      |? TR_PACK.STAN='W drodze'    || 'TR_PACK#01#03'
      |? TR_PACK.STAN='Odebrana'    || 'TR_PACK#01#04'
      |? TR_PACK.STAN='Nieodebrana' || 'TR_PACK#01#05'
      || ''
      ?};
_res


\sum_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: sumaryczna ilość w paczkach
::   WE: _a - TR_ZL.ref()
::       [_b] - 0(domyślnie) - wszystkie pozycje, 1-tylko odebrane, -1-tylko nieodebrane
::   WY: suma ilości
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_res:=0;
TR_PACK.cntx_psh();
TR_ZPACK.cntx_psh();
TR_ZPACK.index('TR_ZL');
TR_ZPACK.prefix(_a);
{? TR_ZPACK.first()
|| {!
   |? _res+={? _tryb=1 & TR_ZPACK.TR_PACK().STAN='Odebrana' || TR_ZPACK.IL
            |? _tryb=-1 & TR_ZPACK.TR_PACK().STAN='Nieodebrana' || TR_ZPACK.IL
            || TR_ZPACK.IL
            ?};
      TR_ZPACK.next()
   !}
?};
TR_PACK.cntx_pop();
TR_ZPACK.cntx_pop();
_res


\po_pob_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po edycji znacznik Pobranie
::----------------------------------------------------------------------------------------------------------------------
_red:=TR_PACK.win_edit('?');
{? TR_PACK.POB='T'
|| TR_PACK.efld_opt(_red,'enable=1',,'KW_POB');
   TR_PACK.efld_opt(_red,'mark=1',,'KW_POB');
   {? TR_PACK.KW_POB=0 || TR_PACK.KW_POB:=exec('pobWAR','transport_paczki') ?};
   {? TR_PACK.NOSTD<>1 & TR_PACK.TR_ZC<>'xxx'
   || _cen:=exec('FindAndGet','#table',TR_ZC,TR_PACK.TR_ZC,,"CP",0);
      {? _cen>0 || TR_PACK.CEN:=_cen ?}
   ?}
|| TR_PACK.efld_opt(_red,'enable=0',,'KW_POB');
   TR_PACK.efld_opt(_red,'mark=0',,'KW_POB');
   TR_PACK.KW_POB:=0;
   {? TR_PACK.NOSTD<>1 & TR_PACK.TR_ZC<>'xxx'
   || _cen:=exec('FindAndGet','#table',TR_ZC,TR_PACK.TR_ZC,,"C",0);
      {? _cen>0 || TR_PACK.CEN:=_cen ?}
   ?}
?};
_nopay:=exec('FindInSet','#table','TR_ZC','TR_ZEWN','N',TR_PACK.TR_ZEWN,"@.TR_ZC.WAR",0);
{? _nopay>0 & TR_PACK.WAP>=_nopay
|| TR_PACK.CEN:=0;
   TR_PACK.NOSTD:=2
?};
''


\po_ub_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po edycji znacznik Ubezpieczenie
::----------------------------------------------------------------------------------------------------------------------
_red:=TR_PACK.win_edit('?');
{? TR_PACK.UB='T'
|| TR_PACK.efld_opt(_red,'enable=1',,'KW_UB');
   TR_PACK.efld_opt(_red,'mark=1',,'KW_UB');
   {? TR_PACK.KW_UB=0
   || TR_PACK.KW_UB:=exec('findUBP','transport_paczki',TR_Z.TR_ZEWN,TR_PACK.WAP)
   ?}
|| TR_PACK.KW_UB:=0;
   TR_PACK.efld_opt(_red,'enable=0',,'KW_UB');
   TR_PACK.efld_opt(_red,'mark=0',,'KW_UB')
?};
''


\rek_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: kontrola podanej ilości w paczce
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? TR_ZPACK.IL<=0
|| FUN.info('Ilość musi być liczbą większą od zera.'@);
   _res:='IL'
|| _pop:=(1+menu_txt())='P';
   _ile:=exec('FindAndGet','#table',TR_ZL,TR_ZPACK.TR_ZL,,"IL",0);
   _old:={? _pop || exec('FindAndGet','#table',TR_ZPACK,TR_ZPACK.ref(),,"IL",0) || 0 ?};
   _rozp:=exec('sum_tr_zpack','transport_paczki',TR_ZPACK.TR_ZL);
   _max:=_ile+_old-_rozp;
   {? TR_ZPACK.IL>_max
   || FUN.info('Podano ilość przekraczającą sumaryczną liczbę w paczkach.\n'
               'Maksymalna ilość to: %1 %2.'@[$_max,TR_ZL.M().J().KOD]);
      TR_ZPACK.IL:=_max;
      _res:='IL'
   ?}
?};
_res


\del_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: usunięcie zawartości paczki
::----------------------------------------------------------------------------------------------------------------------
_sel:=TR_ZPACK.sel_aget();
BEER.PRILZ:=TR_ZPACK.IL;
TR_ZPACK.sel_adel();
TR_ZPACK.cntx_psh();
_select:=_sel.first();
{? _select & FUN.ask('Czy usunąć zaznaczoną zawartość przesyłki?'@)
|| {!
   |? {? (TR_ZPACK.prefix(); TR_ZPACK.seek(_sel.REF,))
      || BEER.PRILZ:=-1;
         TR_ZPACK.del()
      ?};
      _sel.next()
   !}
|? ~_select & FUN.ask('Czy usunąć wskazaną pozycję przesyłki?'@)
|| BEER.PRILZ:=-1;
   TR_ZPACK.del()
?};
TR_ZPACK.cntx_pop();
~~


\tr_pack_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: usługi dodatkowe
::   WE: _a - kod kuriera
::       [_b] - ref paczki
::       [_c] - 1-podgląd paczki, domyślnie 0
::   WY - zwraca akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_courier:={? var_pres('_a')=type_of('') || _a || '' ?};
_tr_pack:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_display:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_res:='';

TR_SL.index('COURIER');
TR_SL.prefix(_courier,'U');
_len:=TR_SL.size();

{? _len>0
|| _tab:='tab_tmp(1';
   {! _ii:=1.._len
   |! _tab+=',\'CHK'+form(_ii,-2,0,'99')+'\',\'STRING[1]\',\'\''
            ',\'KOD'+form(_ii,-2,0,'99')+'\',\'STRING[40]\',\'\''
   !};
   _tab+=',\'RBT\',\'STRING[1]\',\'\'
         ,\'RBT1\',\'STRING[1]\',\'\'
         ,\'RBT2\',\'STRING[1]\',\'\' )';
   __spack:=($_tab)();

   __spack.blank();

   _res:=__wpack:=__spack.mk_edit('Usługi dodatkowe'@,0,'tr_spack_edit',1,1,'','');
   _ii:=0;
   TR_SL.index('COURIER');
   TR_SL.prefix(_courier,'UR');
   {? TR_SL.first()
   || _ile:=TR_SL.size()+1;
      _dom:='';
      __spack.win_esep(__wpack,'Usługi doręczenia'@@);
      _buf:='__spack.win_efld(__wpack,__spack,\'RBT\',\'\',\'\',50,%1,0,\'\',0,\'\','
            '\'radio-buttons\',\'left_label=1\''[$_ile];
      _buf+=',\'%1\',"\'%2\'"'@['Brak',%(64)];
      _dom:=%64;
      {!
      |? _ii+=1;
         _buf+=',\'%1\',"\'%2\'"'[60+TR_SL.OPIS,%(64+_ii)];
         ($('__spack.CHK'+form(_ii,-2,0,'99')))():='N';
         ($('__spack.KOD'+form(_ii,-2,0,'99')))():=TR_SL.KOD;
         _wyb:={? _tr_pack<>null() || exec('pobTR_SPACK','transport_paczki',_tr_pack,'UR',TR_SL.KOD) || -1 ?};
         {? _wyb=1 | (_wyb=-1 & TR_SL.WYB) || _dom:=%(64+_ii) ?};
         TR_SL.next()
      !};
      _buf+=')';
      ($_buf)();
      {? _dom<>'' || __spack.RBT:=_dom ?}
   ?};
   TR_SL.index('COURIER');
   TR_SL.prefix(_courier,'UC');
   {? TR_SL.first()
   || __spack.win_esep(__wpack,'Usługi dodatkowe'@@);
      {!
      |? _ii+=1;
         __spack.win_efld(__wpack,__spack,'CHK'+form(_ii,-2,0,'99'),'','',3,0,0,60+TR_SL.OPIS,1,''
           ,'check-box','left_label=1,check_label="%1"'[60+TR_SL.OPIS],"\'T\'","\'N\'");
         _wyb:={? _tr_pack<>null() || exec('pobTR_SPACK','transport_paczki',_tr_pack,'UC',TR_SL.KOD) || -1 ?};
         ($('__spack.CHK'+form(_ii,-2,0,'99')))():={? _wyb=1 | (_wyb=-1 & TR_SL.WYB) || 'T' || 'N' ?};
         ($('__spack.KOD'+form(_ii,-2,0,'99')))():=TR_SL.KOD;
         TR_SL.next()
      !}
   ?};
   TR_SL.index('COURIER');
   TR_SL.prefix(_courier,'U1');
   {? TR_SL.first()
   || _ile:=TR_SL.size()+1;
      _dom:='';
      __spack.win_ecol(__wpack);
      {? _courier='dhl'
      || __spack.win_esep(__wpack,'Usługa'@@)
      || __spack.win_esep(__wpack,'Godzina realizacji usługi OD'@@)
      ?};
      _buf:='__spack.win_efld(__wpack,__spack,\'RBT1\',\'\',\'\',50,%1,0,\'\',0,\'\','
            '\'radio-buttons\',\'left_label=1\''[$_ile];
      _buf+=',\'%1\',"\'%2\'"'@['Brak',%(64)];
      _dom:=%64;
      {!
      |? _ii+=1;
         _buf+=',\'%1\',"\'%2\'"'[60+TR_SL.OPIS,%(64+_ii)];
         ($('__spack.CHK'+form(_ii,-2,0,'99')))():='N';
         ($('__spack.KOD'+form(_ii,-2,0,'99')))():=TR_SL.KOD;
         _wyb:={? _tr_pack<>null() || exec('pobTR_SPACK','transport_paczki',_tr_pack,'U1',TR_SL.KOD) || -1 ?};
         {? _wyb=1 | (_wyb=-1 & TR_SL.WYB) || _dom:=%(64+_ii) ?};
         TR_SL.next()
      !};
      _buf+=')';
      ($_buf)();
      {? _dom<>'' || __spack.RBT1:=_dom ?}
   ?};
   TR_SL.index('COURIER');
   TR_SL.prefix(_courier,'U2');
   {? TR_SL.first()
   || _ile:=TR_SL.size()+1;
      _dom:='';
      __spack.win_ecol(__wpack);
      __spack.win_esep(__wpack,'Godzina realizacji usługi DO'@@);
      _buf:='__spack.win_efld(__wpack,__spack,\'RBT2\',\'\',\'\',50,%1,0,\'\',0,\'\','
            '\'radio-buttons\',\'left_label=1\''[$_ile];
      _buf+=',\'%1\',"\'%2\'"'@['Brak',%(64)];
      _dom:=%64;
      {!
      |? _ii+=1;
         _buf+=',\'%1\',"\'%2\'"'[60+TR_SL.OPIS,%(64+_ii)];
         ($('__spack.CHK'+form(_ii,-2,0,'99')))():='N';
         ($('__spack.KOD'+form(_ii,-2,0,'99')))():=TR_SL.KOD;
         _wyb:={? _tr_pack<>null() || exec('pobTR_SPACK','transport_paczki',_tr_pack,'U2',TR_SL.KOD) || -1 ?};
         {? _wyb=1 | (_wyb=-1 & TR_SL.WYB) || _dom:=%(64+_ii) ?};
         TR_SL.next()
      !};
      _buf+=')';
      ($_buf)();
      {? _dom<>'' || __spack.RBT2:=_dom ?}
   ?};
   __spack.add(1)
?};
_res:=TR_PACK.mk_edit({? ~_display || 'Definiowanie przesyłki'@ || 'Dane przesyłki'@ ?},,'def_tr_pack',,,'html_maximized');
TR_PACK.win_etab(_res,'Dane podstawowe'@);
TR_PACK.win_ewin(_res,,'RED');
{? _len>0
|| TR_PACK.win_etab(_res,'Dane dodatkowe'@);
   TR_PACK.win_ewin(_res,__spack,__wpack)
?};
{? exec('FindInSet','#table','TR_ZC','TR_ZEWN','C',TR_Z.TR_ZEWN)<>null()
|| _ff:="params_exec('selPACK','transport_paczki')";
   TR_PACK.win_ebtn(_res,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Wybierz paczkę'@],_ff)
?};
_ff:="params_exec('kalkulujWYM','transport_paczki')";
TR_PACK.win_ebtn(_res,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Kalkuluj przesyłkę'@],_ff);
exec('ok_esc','#window',TR_PACK,_res,1);
TR_PACK.win_efml(_res,TR_Z,'INFPACK',,'ICON_BEFORE',"exec('iconPACK','transport_paczki')");
_res


\tr_sl_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: słowniki dodatkowe dla rodzaju transportu
::----------------------------------------------------------------------------------------------------------------------
{? TR_ZEWN.COURIER=''
|| FUN.info('Nie podano kodu kuriera opcja niedostępna.'@)
|| TR_Z.COURIER:=TR_ZEWN.COURIER;
   TR_SL.win_sel('WER');
   TR_SL.hdr_sel('Słowniki dodatkowe dla: %1'@[TR_ZEWN.KOD]);
   TR_SL.index('COURIER');
   TR_SL.prefix(TR_Z.COURIER,);
   TR_SL.select()
?}


\act_rec_tr_zewn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wyszarzenie akcji dla okienka rodzajów transportu
::----------------------------------------------------------------------------------------------------------------------
_act:='';
_act+={? TR_ZEWN.API<>'T'
       | TR_ZEWN.COURIER='' || 'WC' || '' ?}
     +{? ~TR_ZEWN.WYB_MSC   || 'M'  || '' ?}
     +{? TR_ZEWN.count()>0  || 'u'  || '' ?};
TR_ZEWN.actions_grayed('WER',_act);
exec('po_tr_zewn_api','transport_wspolne');
''


\courier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wartość początkowa pola COURIER
::----------------------------------------------------------------------------------------------------------------------
TR_Z.COURIER


\wybTR_SL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: podpowiada domyślną wartość ze słownika
::   WE: _a - kod kuriera
::       _b - rodzaj
::   WY: Wartość domyślna lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
TR_SL.cntx_psh();
TR_SL.index('WYB');
TR_SL.prefix(_a,_b,1);
{? TR_SL.first() || _res:=TR_SL.OPIS ?};
TR_SL.cntx_pop();
_res


\chk_tr_sl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: kontrola poprawności danych
::   WY: pole-nieprawidłowe dane ''-ok
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_ref:={? (1+menu_txt())='P' || TR_SL.ref() || null() ?};
_courier:=TR_SL.COURIER;
_rodz:=TR_SL.RODZ;

{? TR_SL.KOD=''
|| FUN.info('Należy podać kod danej dodatkowej.'@);
   _res:='KOD'
|? TR_SL.OPIS=''
|| FUN.info('Należy podać opis danej dodatkowej.'@);
   _res:='OPIS'
|? TR_SL.RODZ='' | ~((';RS;UR;UC;U1;U2;'*(';%1;'[TR_SL.RODZ]))>0)
|| FUN.info('Wymagany poprawny rodzaj (należy wybrać ze słownika).'@);
   _res:='RODZ'
?};
:: kontrola unikalności kodu
{? _res=''
|| _kod:=TR_SL.KOD;
   TR_SL.cntx_psh();
   TR_SL.index('KOD');
   TR_SL.prefix(_courier,_rodz);
   {? TR_SL.first()
   || {!
      |? {? (_ref=null() | TR_SL.ref<>_ref) & _kod=TR_SL.KOD || _res:='KOD' ?};
         _res='' & TR_SL.next()
      !}
   ?};
   TR_SL.cntx_pop();
   {? _res<>'' || FUN.info('Podany kod już został wprowadzony dla innej danej dodatkowej.'@) ?}
?};
:: ustawienie znacznika domyślności
{? _res='' & TR_SL.WYB & (TR_SL.RODZ+1)<>'C'
|| TR_SL.cntx_psh();
   TR_SL.index('KOD');
   TR_SL.prefix(_courier,_rodz);
   {? TR_SL.first()
   || {!
      |? {? _ref=null() | TR_SL.ref<>_ref
         || TR_SL.WYB:=0;
            TR_SL.put(1)
         ?};
         TR_SL.next()
      !}
   ?};
   TR_SL.cntx_pop()
?};
_res


\f3_tr_sl_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Słownik rodzajów dla danej dodatkowej - klawisz F3
::----------------------------------------------------------------------------------------------------------------------
_res:=TR_SL.RODZ;
_rodz:=tab_tmp(1,'KOD','STRING[2]','Kod','RODZ','STRING[20]','Rodzaj danych');
_rodz.blank(); _rodz.KOD:='RS'; _rodz.RODZ:='Rodzaj przesyłki';               _rodz.add(1);
_rodz.blank(); _rodz.KOD:='UR'; _rodz.RODZ:='Dane dostarczenia';              _rodz.add(1);
_rodz.blank(); _rodz.KOD:='UC'; _rodz.RODZ:='Dane dodatkowe';                 _rodz.add(1);
_rodz.blank(); _rodz.KOD:='U1'; _rodz.RODZ:='Godzina realizacji usługi OD';   _rodz.add(1);
_rodz.blank(); _rodz.KOD:='U2'; _rodz.RODZ:='Godzina realizacji usługi DO';   _rodz.add(1);

_win:=_rodz.mk_sel('Rodzaj danych dodatkowych'@,,,'tr_sl_rodz',,,,,'U',,,,,,'auto');
_rodz.win_fld(_win,,'KOD',,,3,,1,'Kod');
_rodz.win_fld(_win,,'RODZ',,,20,,1,'Rodzaj');
_rodz.win_act(_win,0,'Formuła','&Wybierz'@@,,,"sel_exit()",,1);
_rodz.win_sel(_win);
_rodz.clear();
_rodz.find_key(_res);
{? _rodz.select(,1) || _res:=TR_SL.RODZ:=_rodz.KOD ?};
obj_del(_rodz);
_res


\po_tr_sl_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Słownik rodzajów dla danej dodatkowej - klawisz F3
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? TR_SL.RODZ='' | ~((';RS;UR;UC;U1;U2;'*(';%1;'[TR_SL.RODZ]))>0)
|| FUN.info('Wymagany poprawny rodzaj (należy wybrać ze słownika).'@);
   _res:=0
?};
_res


\addTR_SPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Dodanie informacji o usługach dodatkowych na podstawie tabeli __spack
::   WE: _a - TR_PACK.ref()
::       _b - Kod Kuriera
::----------------------------------------------------------------------------------------------------------------------
_tr_pack:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_courier:={? var_pres('_b')=type_of('') || _b || '' ?};

{? _tr_pack<>null() & var_pres('__spack')>117
|| TR_SPACK.index('TR_PACK');
   TR_SPACK.prefix(_tr_pack);
   {? TR_SPACK.first() || {! |? TR_SPACK.del() !} ?};
:: usługi dostarczenia
   {? __spack.RBT<>''
   || _num:=(%__spack.RBT)-64;
      {? _num>0
      || _kod:=($('__spack.KOD'+form(_num,-2,0,'99')))();
         TR_SL.index('KOD');
         TR_SL.prefix(_courier,'UR',_kod);
         {? TR_SL.first()
         || TR_SPACK.blank();
            TR_SPACK.TR_PACK:=_tr_pack;
            TR_SPACK.KOD:=TR_SL.KOD;
            TR_SPACK.OPIS:=TR_SL.OPIS;
            TR_SPACK.VALUE:='T';
            TR_SPACK.RODZ:=TR_SL.RODZ;
            TR_SPACK.add(1)
         ?}
      ?}
   ?};
:: usługi dodatkowe
   _len:=(obj_len(__spack)-3)%2;
   {! _ii.._len
   |! {? ($('__spack.CHK'+form(_ii,-2,0,'99')))()='T'
      || _kod:=($('__spack.KOD'+form(_ii,-2,0,'99')))();
         TR_SL.index('KOD');
         TR_SL.prefix(_courier,'UC',_kod);
         {? TR_SL.first()
         || TR_SPACK.blank();
            TR_SPACK.TR_PACK:=_tr_pack;
            TR_SPACK.KOD:=TR_SL.KOD;
            TR_SPACK.OPIS:=TR_SL.OPIS;
            TR_SPACK.VALUE:='T';
            TR_SPACK.RODZ:=TR_SL.RODZ;
            TR_SPACK.add(1)
         ?}
      ?}
   !};
:: U1
   {? __spack.RBT1<>''
   || _num:=(%__spack.RBT1)-64;
      {? _num>0
      || _kod:=($('__spack.KOD'+form(_num,-2,0,'99')))();
         TR_SL.index('KOD');
         TR_SL.prefix(_courier,'U1',_kod);
         {? TR_SL.first()
         || TR_SPACK.blank();
            TR_SPACK.TR_PACK:=_tr_pack;
            TR_SPACK.KOD:=TR_SL.KOD;
            TR_SPACK.OPIS:=TR_SL.OPIS;
            TR_SPACK.VALUE:='T';
            TR_SPACK.RODZ:=TR_SL.RODZ;
            TR_SPACK.add(1)
         ?}
      ?}
   ?};
:: U2
   {? __spack.RBT2<>''
   || _num:=(%__spack.RBT2)-64;
      {? _num>0
      || _kod:=($('__spack.KOD'+form(_num,-2,0,'99')))();
         TR_SL.index('KOD');
         TR_SL.prefix(_courier,'U2',_kod);
         {? TR_SL.first()
         || TR_SPACK.blank();
            TR_SPACK.TR_PACK:=_tr_pack;
            TR_SPACK.KOD:=TR_SL.KOD;
            TR_SPACK.OPIS:=TR_SL.OPIS;
            TR_SPACK.VALUE:='T';
            TR_SPACK.RODZ:=TR_SL.RODZ;
            TR_SPACK.add(1)
         ?}
      ?}
   ?}
?};
~~


\pobTR_SPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Pobiera wartość danej z paczki
::   WE: _a - TR_PACK.ref()
::       _b - Rodzaj
::       _c - Kod
::   WY: 1 lub 0
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tr_pack:={? var_pres('_a')=type_of(null()) || _a || null() ?};
 _rodzaj:={? var_pres('_b')=type_of('') || _b || '' ?};
    _kod:={? var_pres('_c')=type_of('') || _c || '' ?};

{? _tr_pack<>null()
|| TR_SPACK.index('KOD');
   TR_SPACK.prefix(_tr_pack,_rodzaj,_kod,);
   _res:=TR_SPACK.first() & TR_SPACK.VALUE='T'
?};
_res


\add_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Dodanie zawartości przesyłki
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_tr_pack:=TR_PACK.ref();
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix();
TR_ZL.f_clear();
TR_ZL.f_set('POZ',,'TR_ZL.TR_NZL=:_a',TR_Z.TR_NZL);
{? TR_ZL.f_first()
|| {!
   |? _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
      {? _ilz=0
      || TR_ZL.f_next()
      || TR_ZL.f_del()
      ?}
   !};
   {? TR_ZL.f_first()
   || _sel:=TR_ZL.win_sel('?');
      TR_ZL.win_sel('WYB');
      {? TR_ZL.select()
      || _res:=1;
         TR_Z.TR_ZL:=TR_ZL.ref();
         TR_Z.TR_PACK:=_tr_pack;
         TR_Z.ILP:=TR_ZL.IL-exec('sum_tr_zpack','transport_paczki',TR_ZL.ref())
      || _res:=-1
      ?};
      TR_ZL.win_sel(_sel)
   ?}
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
{? ~_res
|| FUN.info('Wszystkie pozycje zostały przypisane do paczki.\nEwentualne zmiany o ilościach należy poprawić.'@)
|? _res<0
|| _res:=0
?};
{? _res || BEER.PRILZ:=0 ?};
_res


\tr_nzl_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Formuła na rekord - uzupełnia dane o ilościach na przesyłce
::----------------------------------------------------------------------------------------------------------------------
TR_Z.ILPACK:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
TR_Z.ILP:=TR_ZL.IL-TR_Z.ILPACK;
1


\bl_tr_zpack_tr_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wartość początkowa pola TR_ZPACK.TR_ZL
::----------------------------------------------------------------------------------------------------------------------
TR_Z.TR_ZL


\bl_tr_zpack_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wartość początkowa pola TR_ZPACK.TR_PACK
::----------------------------------------------------------------------------------------------------------------------
TR_Z.TR_PACK


\bl_tr_zpack_il
:----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wartość początkowa pola TR_ZPACK.TR_PACK
::----------------------------------------------------------------------------------------------------------------------
TR_Z.ILP


\ctrl_tr_nzl
:----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Sprawdza czy wszystkie pozycje zostały rozpisane
::   WE: _a - TR_NZL.ref()
::   WY: 1-wszystkie 0-żadna -1-częściowo
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_ZPACK.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix(_a);
{? TR_ZL.first()
|| _buf:=TR_ZL.size();
   {!
   |? _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
      {? _ilz=TR_ZL.IL || _buf-=1 ?};
      {? _ilz>0 & TR_ZL.IL>_ilz
      || _res:=-1
      ?};
      _res>0 & TR_ZL.next()
   !};
   {? _res>0 || {? ~_buf || _res:=1 || _res:=0 ?} ?}
|| _res:=0
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
TR_ZPACK.cntx_pop();
_res


\tr_z_stroz_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Formuła ikony dla TR_Z.STROZ
::----------------------------------------------------------------------------------------------------------------------
"{? TR_Z.STROZ='DYSPOZYCJA ROZPISANA'
 || exec('ok','#icon')
 || 'xwin16.png:12'
 ?}
"


\isCourier
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Formuła sprawdza czy jest choć jeden kurier z obsługa przesyłek
::   WY: 1-jest 0-nie ma
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? exec('chk_role','#b__box',OPERATOR.USER,'LTR_ZLE_DZLE')
|| TR_ZEWN.cntx_psh();
   TR_ZEWN.index('API');
   TR_ZEWN.prefix('T');
   _res:=TR_ZEWN.first() & TR_ZEWN.find_tab('first','COURIER',,'<>','');
   TR_ZEWN.cntx_pop()
?};
_res


\add_tr_pack_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Dołaczenie paczki z poziomu okna grupowego
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.cntx_psh();
TR_NZL.index('ODDZ');
TR_NZL.prefix();
TR_NZL.f_clear();
TR_NZL.f_set('SYM','join TR_ZEWN','TR_ZEWN.API=\'T\' and TR_ZEWN.COURIER<>\'\'');
{? TR_NZL.f_first()
|| {!
   |? {? exec('ctrl_tr_nzl','transport_paczki',TR_NZL.ref())<=0
      || TR_NZL.f_next()
      || TR_NZL.f_del()
      ?}
   !};
   {? TR_NZL.f_first()
   || _win:=TR_NZL.win_sel('?');
      TR_NZL.win_sel('SLO');
      {? TR_NZL.select() || exec('add_tr_pack','transport_paczki') ?};
      TR_NZL.win_sel(_win)
   ?}
?};
TR_NZL.f_clear();
TR_NZL.cntx_pop();
~~


\setSTAN_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Ustawia stan dla paczki na podstawie TR_HPACK
::   WE: _a - TR_PACK.ref()
::----------------------------------------------------------------------------------------------------------------------
_tr_pack:={? var_pres('_a')=type_of(null()) || _a || TR_PACK.ref() ?};
_st:='Do nadania';
TR_PACK.cntx_psh();
TR_HPACK.cntx_psh();
TR_PACK.prefix();
{? _tr_pack<>null() & TR_PACK.seek(_tr_pack)
|| {? TR_PACK.NR<>'' || _st:='Nadana' ?};
   TR_HPACK.index('TR_PACK');
   TR_HPACK.prefix(_tr_pack);
   {? TR_HPACK.first()
   || {? ';Nieznany;Zarejestrowana u kuriera;'*(';%1;'[TR_HPACK.STAN])
      || _st:='Nadana'
      |? ';Przekazane kurierowi;Wydano do doręczenia;Awizo;Oczekuje w punkcie;W drodze;'*(';%1;'[TR_HPACK.STAN])
      || _st:='W drodze'
      |? ';Dostarczono;'*(';%1;'[TR_HPACK.STAN])
      || _st:='Odebrana'
      |? ';Nie dostarczono;Zwrot;Zagubiona;Anulowana;'*(';%1;'[TR_HPACK.STAN])
      || _st:='Nieodebrana'
      ?}
   ?};
   TR_PACK.STAN:=_st;
   {? TR_PACK.put(1)
   || {? TR_PACK.STAN='Odebrana'
      || exec('realDYSP_pack','transport_paczki',TR_PACK.ref())
      |? TR_PACK.STAN='Nieodebrana'
      || exec('realDYSP_pack','transport_paczki',TR_PACK.ref())
      ?}
   ?}
?};
TR_PACK.cntx_pop();
TR_HPACK.cntx_pop();
TR_PACK.get();
~~


\realDYSP_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: realizacja paczki dla danej dyspozycji w magazynie
::   WE: _a - TR_PACK.ref()
::----------------------------------------------------------------------------------------------------------------------
_tr_pack:=_a;

TR_ZPACK.cntx_psh();
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_HPACK.cntx_psh();
TR_ZPACK.index('TR_PACK');
TR_ZPACK.prefix(_tr_pack);
{? TR_ZPACK.first()
|| _tr_nzl:=TR_ZPACK.TR_PACK().TR_NZL;
   {!
   |? TR_ZL.prefix();
      {? TR_ZL.seek(TR_ZPACK.TR_ZL)
      || TR_ZL.ZIL:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref(),1);
         TR_ZL.put(1)
      ?};
      TR_ZPACK.next()
   !};
   _all:=0;
   _rea:=0;
   TR_ZL.index('POZ');
   TR_ZL.prefix(_tr_nzl);
   {? TR_ZL.first()
   || {!
      |? _all+=TR_ZL.IL;
         _rea+=TR_ZL.ZIL;
         TR_ZL.next()
      !}
   ?};
   {? _all>0 & _rea>0
   || TR_NZL.prefix();
      {? TR_NZL.seek(_tr_nzl)
      || TR_HPACK.index('TR_PACK');
         TR_HPACK.prefix(_tr_pack);
         {? TR_HPACK.first()
         || TR_NZL.DR:=TR_HPACK.DT;
            TR_NZL.GR:=TR_HPACK.TM
         || TR_NZL.DR:=date(0,0,0);
            TR_NZL.GR:=time(0,0,0)
         ?};
         TR_NZL.REAL:={? _all=_rea || 'T' || 'W' ?};
         TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');

         TR_NZL.put(1)
      ?}
   ?}
?};
TR_ZPACK.cntx_pop();
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
TR_HPACK.cntx_pop();
~~


\rek_act_tr_zpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: włączenie/wyłaczenie akcji edycyjnych
::----------------------------------------------------------------------------------------------------------------------
_arch:=(TR_PACK.name()+4)<>'____';
TR_ZPACK.actions_grayed('WER',{? _arch | TR_PACK.NR<>'' || 'dpU:d' || '' ?});
''


\disp_etyk_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wyświetla etykietę
::----------------------------------------------------------------------------------------------------------------------
{? TR_PACK.ETYK<>null()
|| _isrun:=exec('cli_functions','#system');
   {? _isrun
   || exec('bl_view','#blob',TR_PACK,'ETYK')
   || FUN.emsg(exec('indevice_nacc_msg','#system'))
   ?}
|| FUN.info('Brak etykiety.'@)
?};
~~


\prn_etyk_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wyświetla etykietę
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__tretyk');
__tretyk:=tab_tmp(1,'REF','INTEGER','');
_tab:=TR_PACK.sel_aget();
TR_PACK.cntx_psh();
{? ~_tab.first()
|| {? TR_PACK.ETYK<>null()
   || _isrun:=exec('cli_functions','#system');
      {? TR_PACK.bl_info('ETYK','EXTENSION')<>'pdf'
      || FUN.info('Wydruk etykiety dla paczki %1 jest niedostępny.\nObsługiwany jest tylko format pdf.'@[TR_PACK.NR])
      |? ~_isrun
      || FUN.emsg(exec('indevice_nacc_msg','#system'))
      || __tretyk.blank();
         __tretyk.REF:=#TR_PACK.ref();
         __tretyk.add(1)
      ?}
   ?}
|| _isrun:=exec('cli_functions','#system');
   {? ~_isrun
   || FUN.emsg(exec('indevice_nacc_msg','#system'))
   || {!
      |? {? (TR_PACK.prefix(); TR_PACK.seek(_tab.REF,)) & TR_PACK.ETYK<>null()
         || {? TR_PACK.bl_info('ETYK','EXTENSION')<>'pdf'
            || FUN.info('Wydruk etykiety dla paczki %1 jest niedostępny.\nObsługiwany jest tylko format pdf.'@[TR_PACK.NR])
            || __tretyk.blank();
               __tretyk.REF:=_tab.REF;
               __tretyk.add(1)
            ?}
         ?};
         _tab.next()
      !}
   ?}
?};
obj_del(_tab);
TR_PACK.sel_adel();
TR_PACK.cntx_pop();

{? __tretyk.size()>0
|| rep_exec('ltr_pck_label')
|| FUN.info('Brak paczek z etykietami.'@)
?};
VAR_DEL.delete('__tretyk');
~~


\test_h
_tryb:={? _opc:=FUN.choice('Opcje',,'Numer','Dostawa','Zwrot'); _opc
       || {? _opc=1 || 0
          |? _opc=2 || 5
          |? _opc=3 || 6
          ?}
       || FUN.choice('Opcje',,'1','2','3','4')
       ?};
_tr_pack:=TR_PACK.ref();
{? _tryb=0
|| TR_PACK.NR:='1234567890';
   {? TR_PACK.put(1) || exec('setSTAN_pack','transport_paczki',_tr_pack) ?}
|| TR_HPACK.cntx_psh();
   TR_HPACK.prefix();
   TR_HPACK.blank();
   TR_HPACK.TR_PACK:=_tr_pack;
   TR_HPACK.DT:=date();
   TR_HPACK.TM:=time();
   TR_HPACK.STAN:={? _tryb=1 || 'Zarejestrowana u kuriera'
                  |? _tryb=2 || 'Przekazane kurierowi'
                  |? _tryb=3 || 'W drodze'
                  |? _tryb=4 || 'Wydano do doręczenia'
                  |? _tryb=5 || 'Dostarczono'
                  |? _tryb=6 || 'Zwrot'
                  || 'Nieznany'
                  ?};
   {? TR_HPACK.add(1) || exec('setSTAN_pack','transport_paczki',_tr_pack) ?};
   TR_HPACK.cntx_pop();
   TR_HPACK.first()
?};
~~


\algMaxWym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Algorytm maksymalnej sumy wymiarów
::   WE: _a - suma wymiarów największy i najmniejszy (ograniczenie)
::       [_b] - największy wymiar jeśli brak przyjmujemy optymalną objętość
::       [_c] - 0(domyślnie) suma największego i najmniejszego
::              1 - wszystkich wymiarów
::              2 - obwodu i wysokości
::   WY: tabela danych: długość, szerokość, wysokość, objętość lub -1 jak nieprawidłowe parametry
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new(4);
_res[1]:=_res[2]:=_res[3]:=_res[4]:=-1;

_max:={? var_pres('_a')=type_of(0) & _a>0 || _a || 0 ?};
_mll:={? var_pres('_b')=type_of(0) & _b>0 || _b || 0 ?};
_typ:={? var_pres('_c')=type_of(0) & _c>0 || _c || 0 ?};
_ww:=_hh:=0;

{? _max>0 & _max>_mll
|| {? _typ=0
   || _res[1]:=2*(_max/3) $2;
      _res[2]:=_max-_res[1];
      _res[3]:=_res[1];
      _res[4]:=_res[1]*_res[2]*_res[3]$3;

      {? _mll>_res[1]
      || _res[1]:=_mll;
         _res[2]:=_max-_mll;
         _res[3]:=_mll;
         _res[4]:=_res[1]*_res[2]*_res[3]$3
      ?}
   |? _typ=1
   || _res[1]:=(_max/3) $1;
      _res[2]:=_max-_res[1];
      _res[3]:=_max-_res[1]-_res[2];
      _res[4]:=_res[1]*_res[2]*_res[3]$3;

      {? _mll>_res[1]
      || _res[1]:=_mll;
         _res[2]:=((_max-_mll)/2) $1;
         _res[3]:=_max-_res[1]-_res[2];
         _res[4]:=_res[1]*_res[2]*_res[3]$3
      ?}
   |? _typ=2
   || _res[1]:=(_max/5) $1;
      _res[2]:=_res[1];
      _res[3]:=_max-(4*_res[1]);
      _res[4]:=_res[1]*_res[2]*_res[3]$3;

      {? _mll>_res[1]
      || _res[1]:=_mll;
         _res[2]:=((_max-_mll)/4) $1;
         _res[3]:=_max-_res[1]-(3*_res[2]);
         _res[4]:=_res[1]*_res[2]*_res[3]$3
      ?}
   ?}
?};
_res


\oblMinMaxObj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: uzupełnia pola minimum, maksimum, objętość
::   WE: _a - tabela
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')=type_of(FIRMA) || _a || return(0) ?};
_wgg:={? _tab=TR_ZC & TR_ZC.TR_ZEWN().WGG>0
      || 1
      || 0
      ?};
{| _tab
|! {? TR_L>0
   ||
:: maksymalny wymiar
      TR_MAX:={? TR_L>=TR_W
              || {? TR_L>=TR_H || TR_L || TR_H ?}
              || {? TR_W>=TR_H || TR_W || TR_H ?}
              ?};
:: minimalny wymiar
      TR_MIN:={? TR_L<=TR_W
              || {? TR_L<=TR_H || TR_L || TR_H ?}
              || {? TR_W<=TR_H || TR_W || TR_H ?}
              ?};
:: maksymalna objętość
      TR_OBJ:=TR_L*TR_W*TR_H $3;
      {? _wgg=2 || WGG:=exec('oWEIDIM','transport_paczki',TR_OBJ,TR_ZEWN().WGG)
      |? _wgg=1 || TR_WGG:=exec('oWEIDIM','transport_paczki',TR_OBJ,TR_ZEWN().WGG)
      ?}
   ?}
|};
1


\pobWymPack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Pobiera wymiary paczki
::   WE: _a - wskazanie na materiał
::       [_b] - ilość w jednostce podstawowej
::       [_c] - jednostka opakowania domyślnie brak
::----------------------------------------------------------------------------------------------------------------------
_ile:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_jopk:={? var_pres('_c')=type_of(null()) || _c || null() ?};

_ilp:=_ile;
_res:=obj_new(6);
_res[1]:=_res[2]:=_res[3]:=_res[4]:=0; _res[5]:=_res[6]:=1;
_tab:=tab_tmp(1,'WYM','REAL','');
M.cntx_psh();
MJM.cntx_psh();
M.prefix();
{? M.seek(_a)
|| _find:=0;
   {? _jopk<>null()
   || MJM.index('JM');
      MJM.prefix(M.ref(),_jopk);
      {? MJM.first() & MJM.TR_L>0
      || _find:=1;
         _tab.blank(); _tab.WYM:=MJM.TR_L; _tab.add(1);
         _tab.blank(); _tab.WYM:=MJM.TR_W; _tab.add(1);
         _tab.blank(); _tab.WYM:=MJM.TR_H; _tab.add(1);
         _ilp:=_ile/MJM.PRZ;
         _ilp:=(_ilp$0)+{? _ilp>(_ilp$0) || 1 || 0 ?};
         _res[4]:=_ilp*MJM.TR_KG;
         _res[5]:=MJM.PRZ;
         _res[6]:=_ilp
      ?}
   ?};
   {? ~_find
   || MJM.index('TR_D');
      MJM.prefix(M.ref(),1);
      {? MJM.first() & MJM.TR_L>0
      || _find:=1;
         _tab.blank(); _tab.WYM:=MJM.TR_L; _tab.add(1);
         _tab.blank(); _tab.WYM:=MJM.TR_W; _tab.add(1);
         _tab.blank(); _tab.WYM:=MJM.TR_H; _tab.add(1);
         _ilp:=_ile/MJM.PRZ;
         _ilp:=(_ilp$0)+{? _ilp>(_ilp$0) || 1 || 0 ?};
         _res[4]:=_ilp*MJM.TR_KG;
         _res[5]:=MJM.PRZ;
         _res[6]:=_ilp
      ?}
   ?};
   {? ~_find & M.TR_L>0
   || _tab.blank(); _tab.WYM:=M.TR_L; _tab.add(1);
      _tab.blank(); _tab.WYM:=M.TR_W; _tab.add(1);
      _tab.blank(); _tab.WYM:=M.TR_H; _tab.add(1);
      _res[4]:=_ile*M.TR_KG
   ?}
?};
M.cntx_pop();
MJM.cntx_pop();
{? (_tab.clear(); _tab.last())
|| _res[1]:=_tab.WYM;
   _res[2]:={? _tab.prev() || _tab.WYM || 0 ?};
   _res[3]:={? _tab.prev() || _tab.WYM*_ilp || 0 ?}
?};
obj_del(_tab);
_res


\cen_tr_zewn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wymiary paczek/cenniki
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__algTRZC');
:: tabela obsługiwanych algorytmów
exec('defALGtrzc','transport_paczki');

TR_Z.TR_ZEWN:=TR_ZEWN.ref();
TR_Z.RODZ_ZC:='C';
TR_Z.OA1:=TR_Z.OA2:=TR_Z.OA3:='';
TR_ZC.win_sel('WER');

TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
TR_ZC.first();
TR_ZC.select();
VAR_DEL.delete('__algTRZC');
~~


\defALGtrzc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Definicja algorytmów
::----------------------------------------------------------------------------------------------------------------------
__algTRZC:=tab_tmp(2,'RODZ','STRING[1]','Rodzaj'
            ,'KOD','STRING[40]','Kryterium'
            ,'OA1','STRING[60]','Opis'
            ,'OA2','STRING[60]','Opis'
            ,'OA3','STRING[60]','Opis'
            ,'BLK','STRING[100]','Blokada pól'
            ,'MRK','STRING[100]','Wymagają wypełnienia');

__algTRZC.blank();
__algTRZC.RODZ:='C';
__algTRZC.KOD:='MAX DIM';
__algTRZC.OA1:='Ograniczeniem są: ';
__algTRZC.OA2:='- maksymalne wymiary paczki';
__algTRZC.OA3:='- maksymalny ciężar paczki';
__algTRZC.BLK:='SUM;SUW;SUO;MAX';
__algTRZC.MRK:='TR_L;TR_KG';
__algTRZC.add(1);
__algTRZC.RODZ:='C';
__algTRZC.KOD:='SUM MAX/MIN';
__algTRZC.OA1:='Ograniczeniem są: ';
__algTRZC.OA2:='- suma maksymalnego i minimalnego wymiaru paczki';
__algTRZC.OA3:='- maksymalny ciężar i minimalna wysokość paczki';
__algTRZC.BLK:='TR_L;TR_W;TR_H;SUW;SUO';
__algTRZC.MRK:='SUM;WYS;TR_KG';
__algTRZC.add(1);
:: aktualnie brak obsługi
{? 0 & TR_ZEWN.MWG>0 & TR_ZEWN.WGG>0
|| __algTRZC.RODZ:='C';
   __algTRZC.KOD:='MAX WEI/DIM';
   __algTRZC.OA1:='Ograniczeniem są: ';
   __algTRZC.OA2:='- maksymalny ciężar paczki do wagi gabarytowej';
   __algTRZC.OA3:='- maksymalna długość/wysokość i ograniczenie sumy wymiarów';
   __algTRZC.BLK:='TR_L;TR_W;TR_H;WYS;SUM;SUO';
   __algTRZC.MRK:='SUW;MAX;TR_KG';
   __algTRZC.add(1);
   __algTRZC.RODZ:='C';
   __algTRZC.KOD:='MAX WEI/PER';
   __algTRZC.OA1:='Ograniczeniem są: ';
   __algTRZC.OA2:='- maksymalny ciężar paczki do wagi gabarytowej';
   __algTRZC.OA3:='- maksymalna długość/wysokość i ograniczenie obwodu i wysokości';
   __algTRZC.BLK:='TR_L;TR_W;TR_H;SUM;SUW;WYS';
   __algTRZC.MRK:='SUO;MAX;TR_KG';
   __algTRZC.add(1)
?};

_win:=__algTRZC.mk_sel('Rodzaj kryterium'@,,,'tr_zc_algorytm',,,,,'U',,,,,,'auto');
__algTRZC.win_fld(_win,,'KOD',,,20,,1,'Kod');
__algTRZC.win_fld(_win,,'OA2',,,30,,1,'Opis');
__algTRZC.win_fld(_win,,'OA3',,,30,,1,'Opis');
__algTRZC.win_act(_win,0,'Formuła','&Wybierz'@@,,,"sel_exit()",,1);
__algTRZC.win_sel(_win);
~~


\before_tr_zc_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Przed cenami podstawowymi
::----------------------------------------------------------------------------------------------------------------------
TR_Z.RODZ_ZC:='C';
TR_ZC.win_edit('CEN');
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
1


\after_tr_zc_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Po cenach podstawowych
::----------------------------------------------------------------------------------------------------------------------
1


\refresh_tr_zc_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Odświeżenie cen podstawowych
::----------------------------------------------------------------------------------------------------------------------
1


\before_tr_zc_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Przed ubezpieczeniem
::----------------------------------------------------------------------------------------------------------------------
TR_Z.RODZ_ZC:='U';
TR_ZC.win_edit('UBP');
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
1


\after_tr_zc_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Po ubezpieczeniu
::----------------------------------------------------------------------------------------------------------------------
1


\refresh_tr_zc_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Odświeżenie ubezpieczenia
::----------------------------------------------------------------------------------------------------------------------
1


\before_tr_zc_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Przed dopłatami
::----------------------------------------------------------------------------------------------------------------------
TR_Z.RODZ_ZC:='D';
TR_ZC.win_edit('DOD');
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
1


\after_tr_zc_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Po dopłatach
::----------------------------------------------------------------------------------------------------------------------
1


\refresh_tr_zc_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Odświeżenie dopłat
::----------------------------------------------------------------------------------------------------------------------
1


\tr_zc_tr_zewn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wartość początkowa pola TR_ZEWN
::----------------------------------------------------------------------------------------------------------------------
TR_Z.TR_ZEWN


\tr_zc_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wartość początkowa pola RODZ_ZC
::----------------------------------------------------------------------------------------------------------------------
TR_Z.RODZ_ZC


\tr_zc_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: formuła na wypełnienie okienka
::----------------------------------------------------------------------------------------------------------------------
grp_disp(TR_ZC,'UBP');
grp_disp(TR_ZC,'CEN');
~~


\tr_zc_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: kontrola poprawności wypełnienia pól
::   WY: '' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_rodz:=TR_Z.RODZ_ZC;
{? _rodz='C'
|| {? TR_ZC.OPIS=''
   || FUN.info('Należy podać opis.'@);
      _res:='OPIS'
   |? TR_ZC.ALGORYTM=''
   || FUN.info('Należy wskazać kryterium.\nMożna wybrać go ze słownika.'@);
      _res:='ALGORYTM'
   |? TR_ZC.C<0
   || FUN.info('Należy podać wartość większą lub równą zero.'@);
      _res:='C'
   |? TR_ZC.CP<0
   || FUN.info('Należy podać wartość większą lub równą zero.'@);
      _res:='CP'
   |? TR_ZC.WYS<0
   || FUN.info('Należy podać wartość większą lub równą zero.'@);
      _res:='WYS'
   |? TR_ZC.MAX<0
   || FUN.info('Należy podać wartość większą lub równą zero.'@);
      _res:='MAX'
   ?};
   {? _res=''
   || _win:='CEN';
::    kontrola wypełnienia pól
      _fld:=spli_str(__algTRZC.MRK,';');
      _len:=obj_len(_fld);
      _ii:=0;
      {!
      |? _ii+=1;
         {? _fld[_ii]='TR_L'
         || {? TR_ZC.TR_L<=0 || FUN.info('Wymagane podanie wartości większej od zera.'@); _res:='TR_L'
            |? TR_ZC.TR_W<=0 || FUN.info('Wymagane podanie wartości większej od zera.'@); _res:='TR_W'
            |? TR_ZC.TR_H<=0 || FUN.info('Wymagane podanie wartości większej od zera.'@); _res:='TR_H'
            ?}
         |? ($('TR_ZC.'+_fld[_ii]))()<=0
         || FUN.info('Wymagane podanie wartości większej od zera.'@);
            _res:=_fld[_ii]
         ?};
         _res='' & _ii<_len
      !};
      obj_del(_fld)
   ?}
|? _rodz='U'
|| _ref:={? (1+menu_txt())='D' || null() || TR_ZC.ref() ?};
   _err:=0;
   TR_ZC.cntx_psh();
   TR_ZC.index('TR_ZEWN');
   TR_ZC.prefix(TR_Z.TR_ZEWN,_rodz,TR_ZC.WAR);
   _err:=TR_ZC.first() & TR_ZC.ref()<>_ref;
   TR_ZC.cntx_pop();
   {? _err
   || FUN.info('Wprowadzono już ubezpieczenie dla podanej wartości.'@);
      _res:='WAR'
   ?};
   {? _res=''
   || {? TR_ZC.OPIS=''
      || FUN.info('Należy podać opis.'@);
         _res:='OPIS'
      |? TR_ZC.WAR<=0
      || FUN.info('Wymagane podanie wartości większej od zera.'@);
         _res:='WAR'
      |? TR_ZC.C<=0
      || FUN.info('Wymagane podanie wartości większej od zera.'@);
         _res:='C'
      ?}
   ?}
?};
{? _res='' || exec('oblMinMaxObj','transport_paczki',TR_ZC) ?};
_res


\f3_algorytm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: klawisz F3 dla wyboru kryterium
::   WY: '' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
__algTRZC.clear();
__algTRZC.prefix(TR_Z.RODZ_ZC);
__algTRZC.find_key(TR_ZC.ALGORYTM);
{? __algTRZC.select(,1)
|| TR_ZC.ALGORYTM:=__algTRZC.KOD;
   TR_Z.OA1:=__algTRZC.OA1;
   TR_Z.OA2:=__algTRZC.OA2;
   TR_Z.OA3:=__algTRZC.OA3
?};
1


\po_algorytm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: klawisz F3 dla wyboru kryterium
::   WY: '' lub akronim pola
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? TR_ZC.ALGORYTM<>''
|| __algTRZC.clear();
   __algTRZC.prefix(TR_Z.RODZ_ZC,TR_ZC.ALGORYTM,);
   {? __algTRZC.first()
   || TR_ZC.ALGORYTM:=__algTRZC.KOD;
      TR_Z.OA1:=__algTRZC.OA1;
      TR_Z.OA2:=__algTRZC.OA2;
      TR_Z.OA3:=__algTRZC.OA3;
      _res:=1
   || __algTRZC.prefix(TR_Z.RODZ_ZC,TR_ZC.ALGORYTM);
      {? __algTRZC.first()
      || TR_ZC.ALGORYTM:=__algTRZC.KOD;
         TR_Z.OA1:=__algTRZC.OA1;
         TR_Z.OA2:=__algTRZC.OA2;
         TR_Z.OA3:=__algTRZC.OA3;
         _res:=1
      || FUN.info('Niepoprawne kryterium.\nMożna wybrać go ze słownika.'@);
         _res:=0
      ?}
   ?}
|| FUN.info('Należy wskazać kryterium.\nMożna wybrać go ze słownika.'@)
?};
{? _res || exec('set_efld_tr_zc','transport_paczki') ?};
_res


\po_tr_zc_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po wypełnieniu pola TR_ZC.SUM
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? TR_ZC.SUM<=0
|| FUN.info('Należy podać ograniczenie dla sumy skrajnych wymiarów.'@);
   _res:=0
|| _tab:=exec('algMaxWym','transport_paczki',TR_ZC.SUM);
   TR_ZC.TR_L:=_tab[1];
   TR_ZC.TR_W:=_tab[2];
   TR_ZC.TR_H:=_tab[3];
   {? TR_ZC.WYS>TR_ZC.TR_W || TR_ZC.WYS:=TR_ZC.TR_W
   |? TR_ZC.WYS=0          || TR_ZC.WYS:=0.1
   ?};
   obj_del(_tab)
?};
_res


\tr_zc_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: podczytanie kryterium
::----------------------------------------------------------------------------------------------------------------------
TR_Z.OA1:=TR_Z.OA2:=TR_Z.OA3:='';
_tryb:=0;
{? TR_ZC.ALGORYTM<>''
|| __algTRZC.clear();
   __algTRZC.prefix(TR_Z.RODZ_ZC,TR_ZC.ALGORYTM,);
   {? __algTRZC.first()
   || _tryb:=1;
      TR_Z.OA1:=__algTRZC.OA1;
      TR_Z.OA2:=__algTRZC.OA2;
      TR_Z.OA3:=__algTRZC.OA3
   ?}
?};
exec('set_efld_tr_zc','transport_paczki',_tryb);
{? 'SELCEN'*cur_win(1,1)
|| TR_ZC.cntx_psh();
   TR_ZC.index('TR_ZEWN');
   TR_ZC.prefix(TR_Z.TR_ZEWN,'N');
   {? TR_ZC.first()
   || TR_Z.DSTNO:='T';
      TR_Z.DSTWAR:=TR_ZC.WAR
   || TR_Z.DSTNO:='N';
      TR_Z.DSTWAR:=0
   ?};
   TR_ZC.cntx_pop()
?};
''


\po_tr_zc_addmod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: aktualizacja danych objętość, minimum, maksimum
::----------------------------------------------------------------------------------------------------------------------
exec('oblMinMaxObj','transport_paczki',TR_ZC);
{? TR_ZC.RODZ='U' || TR_ZC.TR_OBJ:=TR_ZC.WAR ?};
TR_ZC.put(1);
1


\set_efld_tr_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: gwiazdkowanie, blokowanie pól
::   WE: [_a] - 1(domyślnie) wg __algTRZC 0-odblokowanie
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_all:='';
_win:={? TR_Z.RODZ_ZC='C' || _all:='TR_L;TR_W;TR_H;SUM;WYS;TR_KG;SUW;SUO;MAX'; 'CEN'
      |? TR_Z.RODZ_ZC='U' || _all:='WAR'; 'UBP'
      |? TR_Z.RODZ_ZC='D' || _all:='TR_L;TR_W;TR_H;TR_KG'; 'DOD'
      || 'XXX'
      ?};
:: odblokowanie i odznaczenie pól
_fld:=spli_str(_all,';');
_len:=obj_len(_fld);
{! _ii:=1.._len |! TR_ZC.efld_opt(_win,'editable=1',,_fld[_ii]); TR_ZC.efld_opt(_win,'mark=0',,_fld[_ii]) !};
obj_del(_fld);
{? _tryb
||
:: blokada pól
   _fld:=spli_str(__algTRZC.BLK,';');
   _len:=obj_len(_fld);
   {! _ii:=1.._len |! TR_ZC.efld_opt(_win,'editable=0',,_fld[_ii]) !};
   obj_del(_fld);
:: zaznaczenie pól
   _fld:=spli_str(__algTRZC.MRK,';');
   _len:=obj_len(_fld);
   {! _ii:=1.._len |! TR_ZC.efld_opt(_win,'mark=1',,_fld[_ii]) !};
   obj_del(_fld)
?};
~~


\gen2PACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: generowanie paczek
::   WE: _a - TR_NZL.ref()
::----------------------------------------------------------------------------------------------------------------------
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_ZC.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix(_a);
{? TR_ZL.first()
|| TR_Z.TR_ZEWN:=TR_ZL.TR_NZL().TR_ZEWN;
   TR_Z.RODZ_ZC:='C';
   TR_Z.COURIER:=TR_ZL.TR_NZL().TR_ZEWN().COURIER;
   _amax:=0;
   _amin:=0;
   _asum:=0;
   _asuo:=0;
   _trzl:=tab_tmp(2,'MAX','REAL',''
           ,'MIX','REAL',''
           ,'MIN','REAL',''
           ,'WYS','REAL',''
           ,'WAG','REAL',''
           ,'ILE','REAL',''
           ,'SUM','REAL',''
           ,'OBJ','REAL',''
           ,'REF','STRING[16]',''
           ,'D_L','REAL',''
           ,'D_W','REAL',''
           ,'D_H','REAL',''
           ,'D_O','REAL',''
           ,'ILO','REAL',''
           ,'SUO','REAL',''
           ,'SUP','REAL',''
           ,'OBO','REAL',''
           ,'S_L','REAL',''
           ,'S_W','REAL',''
           ,'S_H','REAL',''
           ,'PCK','STRING[16]',''
           ,'ILP','INTEGER',''
           ,'CEN','REAL',''
           ,'DOKL','INTEGER','');
   {!
   |? _tab:=exec('pobWymPack','transport_paczki',TR_ZL.M,1,TR_ZL.JO);
      _trzl.prefix();
      _trzl.blank();
      _trzl.REF:=$TR_ZL.ref();
      _trzl.MAX:=_tab[1];
      _trzl.MIN:=_tab[3];
      _trzl.WYS:=_tab[2];
      _trzl.ILE:=TR_ZL.IL;
      _trzl.DOKL:=TR_ZL.M().DOKL;
      _trzl.MIX:=_trzl.ILE*_trzl.MIN $1;
      _trzl.OBJ:=_trzl.MAX*_trzl.MIX*_trzl.WYS $3;
      _trzl.WAG:=_tab[4];
      _poz:=_trzl.WYS;
      _max:={? _trzl.MAX>=_trzl.MIX || _trzl.MAX || _trzl.MIX ?};
      _min:={? _trzl.MIX<=_trzl.WYS || _trzl.MIX || _poz:=_trzl.MAX; _trzl.WYS ?};
      _trzl.SUM:=_max+_min;
      _trzl.D_L:=_max;
      _trzl.D_W:=_min;
      _trzl.D_H:=_poz;
      _trzl.D_O:=_trzl.MAX*_trzl.MIN*_trzl.WYS $3;
      _trzl.SUP:=_trzl.MAX+_trzl.MIN;
      _trzl.OBO:=_trzl.MAX*_trzl.MIN*_trzl.WYS $3;
      {? _max>_amax || _amax:=_max ?};
      {? _min<_amin || _amin:=_min ?};
      {? _trzl.SUM>_asum || _asum:=_trzl.SUM ?};
::    pakowanie obok siebie
      {? TR_ZL.IL>1 & (_wsp:=_trzl.MAX%_trzl.MIX)>1
      || _trzl.ILO:=_wsp;
         _min:=((_trzl.ILE%_wsp)+{? _trzl.ILE%*_wsp || 1 || 0 ?})*_trzl.MIN;
         _min:={? _min<=_trzl.WYS || _poz:=_trzl.WYS; _min || _poz:=_min; _trzl.WYS ?};
         _trzl.SUO:=_trzl.MAX+_min;
         _trzl.S_L:=_trzl.MAX;
         _trzl.S_W:=_min;
         _trzl.S_H:=_poz
      ?};
      _trzl.add(1);
      TR_ZL.next()
   !};
   _trzl.prefix();
   {? _trzl.first()
   || {!
      |? TR_ZC.index('TR_ZEWN');
         TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
         {? TR_ZC.first()
         || _next:=TR_ZC.size();
            {!
            |? _next-=1;
               {? TR_ZC.TR_OBJ>=_trzl.OBJ & TR_ZC.TR_KG>=(_trzl.WAG*_trzl.ILE)
                & {? TR_ZC.ALGORYTM='SUM MAX/MIN'
                  || TR_ZC.SUM>=_trzl.SUM | TR_ZC.SUM>=_trzl.SUO
                  |? TR_ZC.ALGORYTM='MAX DIM'
                  || (TR_ZC.TR_L>=_trzl.D_L & TR_ZC.TR_W>=_trzl.D_W & TR_ZC.TR_H>=_trzl.D_H)
                   | (TR_ZC.TR_L>=_trzl.S_L & TR_ZC.TR_W>=_trzl.S_W & TR_ZC.TR_H>=_trzl.S_H)
                  || 0
                  ?}
               || _trzl.PCK:=$TR_ZC.ref();
                  _trzl.ILP:=1;
                  _trzl.CEN:=TR_ZC.C;
                  _trzl.put(1);
                  0
               |? ~_next
               || {? TR_ZC.TR_OBJ>=_trzl.OBO & TR_ZC.TR_KG>=_trzl.WAG
                   & {? TR_ZC.ALGORYTM='SUM MAX/MIN'
                     || TR_ZC.SUM>=_trzl.SUP
                     |? TR_ZC.ALGORYTM='MAX DIM'
                     || TR_ZC.TR_L>=_trzl.MAX & TR_ZC.TR_W>=_trzl.WYS & TR_ZC.TR_H>=_trzl.MIN
                     || 0
                     ?}
                  || _trzl.PCK:=$TR_ZC.ref();
                     _trzl.ILP:=(_trzl.OBJ%TR_ZC.TR_OBJ)+{? _trzl.OBJ%TR_ZC.TR_OBJ || 1 || 0 ?};
                     _trzl.CEN:=TR_ZC.C;
                     _trzl.put(1);
                     0
                  ?}
               || TR_ZC.next()
               ?}
            !}
         ?};
         _trzl.next()
      !}
   ?};
   VAR_DEL.delete('__spack','__wpack');
   exec('tr_pack_edit','transport_paczki',TR_Z.COURIER,null());
   {? _trzl.first()
   || {!
      |? _ilp:=_trzl.ILP;
         _mas:=_trzl.WAG;
         _ile:=_trzl.ILE;
         {! _ii:=1.._ilp
         |! TR_PACK.blank();
            TR_Z.NAZ_:={? TR_Z.TR_NZL().KH<>null()
                       || TR_Z.TR_NZL().KH().NAZ
                       || ''
                       ?};
            TR_PACK.TR_NZL:=TR_Z.TR_NZL;
            TR_PACK.TR_ZEWN:=TR_Z.TR_ZEWN;
            TR_PACK.MAIL:=TR_Z.TR_NZL().EM;
            TR_PACK.TEL:=TR_Z.TR_NZL().TEL;
            TR_PACK.OPIS:=exec('tr_pack_opis','transport_paczki',TR_Z.TR_NZL);
            TR_PACK.STAN:='Do nadania';
            TR_PACK.R_PCK:=exec('FindAndGet','#table',TR_ZC,_trzl.PCK,,"R_PCK",'');
            {? TR_PACK.R_PCK='' || TR_PACK.R_PCK:=exec('wybTR_SL','transport_paczki',TR_Z.COURIER,'RS') ?};
            TR_PACK.DLUG:=_trzl.D_L;
            TR_PACK.SZER:=_trzl.D_W;
            TR_PACK.WYS:=_trzl.D_H;
            _buf:=_trzl.WAG/_ilp $3;
            TR_PACK.WAGA:={? _ii<>_ilp || _buf || _mas ?};
            _mas-=_buf;
            TR_PACK.CEN:=_trzl.CEN;
            {? TR_PACK.add(1)
            || exec('addTR_SPACK','transport_paczki',TR_PACK.ref(),TR_Z.COURIER);
               _tr_pack:=TR_PACK.ref();
               _tr_zl:=exec('FindAndGet','#table',TR_ZL,_trzl.REF,,,null());
               _ilz:=exec('sum_tr_zpack','transport_paczki',_tr_zl);
               _ile:=_trzl.ILE-_ilz;
               {? _ile>0
               || _ilp:=_ile/{? _ii=_ilp || 1 || _ilp ?} $ _trzl.DOKL;
                  {? _ilp>0
                  || TR_ZPACK.prefix();
                     TR_ZPACK.blank();
                     TR_ZPACK.TR_PACK:=_tr_pack;
                     TR_ZPACK.TR_ZL:=_tr_zl;
                     TR_ZPACK.IL:=_ilp;
                     TR_ZPACK.add(1)
                  ?}
               ?}
            ?}
         !};
         _trzl.next()
      !}
   ?};
   VAR_DEL.delete('__spack','__wpack');
   obj_del(_trzl)
?};
TR_ZC.cntx_pop();
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
~~


\genPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: generowanie paczek
::   WE: _a - TR_NZL.ref()
::----------------------------------------------------------------------------------------------------------------------
TR_Z.TR_NZL:=_a;

_nodim:=0;
_noile:=0;
_allpo:=0;
_addpk:=0;
TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
TR_ZC.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix(TR_Z.TR_NZL);
{? TR_ZL.first()
|| TR_Z.TR_ZEWN:=TR_ZL.TR_NZL().TR_ZEWN;
   TR_Z.RODZ_ZC:='C';
   TR_Z.COURIER:=TR_ZL.TR_NZL().TR_ZEWN().COURIER;
   _twym:=tab_tmp(3,'OBJ','REAL',''
           ,'MAX','REAL',''
           ,'MIN','REAL',''
           ,'WMM','REAL',''
           ,'SUM','REAL',''
           ,'DOD','REAL',''
           ,'WAG','REAL',''
           ,'ILE','REAL',''
           ,'ILS','REAL',''
           ,'PRZ','REAL',''
           ,'ILZ','REAL',''
           ,'SOB','REAL',''
           ,'SWG','REAL',''
           ,'MAS','REAL',''
           ,'MIS','REAL',''
           ,'DOS','REAL',''
           ,'SUS','REAL',''
           ,'PCK','STRING[16]',''
           ,'ILP','INTEGER',''
           ,'CEN','REAL','');
   _tpos:=tab_tmp(3,'TWYM','STRING[16]',''
           ,'RZL','STRING[16]',''
           ,'ILZ','REAL',''
           ,'ILR','REAL','');
   _tpck:=tab_tmp(2,'PCK','STRING[16]',''
           ,'EMP','STRING[1]',''
           ,'MAX','REAL',''
           ,'MIN','REAL',''
           ,'DOD','REAL',''
           ,'SUM','REAL',''
           ,'OBJ','REAL',''
           ,'WAG','REAL',''
           ,'PAX','REAL',''
           ,'PIN','REAL',''
           ,'POD','REAL',''
           ,'ILE','REAL',''
           ,'POB','REAL',''
           ,'PWG','REAL',''
           ,'CEN','REAL','');
   _twyp:=tab_tmp(1,'TPCK','STRING[16]',''
           ,'LP','INTEGER',''
           ,'TR_ZL','STRING[16]',''
           ,'ILE','REAL','');
:: pobranie uporządkowanych danych o ile jeszcze dla nich nie wygenerowano paczek
   {!
   |? _allpo+=1;
      _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
      _ile:=TR_ZL.IL-_ilz;
      {? _ile>0
      || _tab:=exec('pobWymPack','transport_paczki',TR_ZL.M,1,TR_ZL.JO);
         _prz:=_tab[5];
         _buf:=exec('sMAXMIN','transport_paczki',_tab[1],_tab[2],_tab[3]);
         {? _buf[1]>0
         || _max:=_buf[1];
            _min:=_buf[2];
            _dod:=_buf[3]
         || obj_del(_buf);
            _buf:=exec('sMAXMIN','transport_paczki',TR_ZL.DLUG*100,TR_ZL.SZER*100,TR_ZL.WYSO*100);
            _max:=_buf[1];
            _min:=_buf[2];
            _dod:=_buf[3]
         ?};
         obj_del(_buf);
         {? _max>0
         || _obj:=_max*_min*_dod $3;
            _oki:=0;
            _twym.clear();
            _twym.prefix(_obj,_max,_min);
            {? _twym.first()
            || _twym.ILZ+=_ile;
               _ilz:=_ile/_prz;
               _twym.ILE+=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
               _twym.SOB:=_twym.ILE*_twym.OBJ $3;
               _twym.SWG:=_twym.ILE*_twym.WAG $3;
               _oki:=_twym.put(1)
            || _twym.blank();
               _twym.OBJ:=_obj;
               _twym.MAX:=_max;
               _twym.MIN:=_min;
               _twym.DOD:=_dod;
               _twym.WMM:=_max/_min;
               _twym.SUM:=_max+_min;
               _twym.WAG:=_tab[4];
               _twym.ILZ:=_ile;
               _ilz:=_ile/_prz;
               _twym.ILE:=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
               _twym.PRZ:=_prz;
               _twym.SOB:=_twym.ILE*_twym.OBJ $3;
               _twym.SWG:=_twym.ILE*_twym.WAG $3;
               _oki:=_twym.add(1)
            ?};
            {? _oki
            || _tpos.blank();
               _tpos.TWYM:=$_twym.ref();
               _tpos.RZL:=$TR_ZL.ref();
               _tpos.ILZ:=_ile;
               _tpos.ILR:=0;
               _tpos.add(1)
            ?}
         || _nodim+=1
         ?};
         obj_del(_tab)
      || _noile+=1
      ?};
      TR_ZL.next()
   !};
:: przypisanie do wymiarów typu paczki wg kryteriów oraz obliczenie sumy objętości i wagi
   _sob:=0;
   _swg:=0;
:: obliczenie całkowitej objętości i wagi - szacujemy na tej podstawie maksymalną wielkość paczki
   _twym.clear();
   {? _twym.first()
   || {!
      |? _sob+=_twym.SOB;
         _swg+=_twym.SWG;
         _twym.next()
      !}
   ?};
:: wskazanie na rodzaj maksymalnej paczki
   _tr_zc:='';
   _trmzc:='';
   TR_ZC.index('TR_ZEWN');
   TR_ZC.prefix(TR_Z.TR_ZEWN,'C');
   {? TR_ZC.last()
   ||
::    brak zdefiniowanej paczki spełniającej dane kryteria
      _trmzc:=$TR_ZC.ref();
      _tr_zc:='xxx';
      TR_ZC.first();
      {!
      |? {? _sob<=TR_ZC.TR_OBJ & _swg<=TR_ZC.TR_KG
         || _tr_zc:=$TR_ZC.ref();
            0
         || TR_ZC.next()
         ?}
      !}
   ?};

   _lp:=0;
   _twym.clear();
   {? _twym.last() & _tr_zc<>'xxx'
   || {!
      |? _pck:=0;
         TR_ZC.prefix();
         {? TR_ZC.seek(_tr_zc)
         || {? TR_ZC.TR_OBJ>=_twym.SOB & TR_ZC.TR_KG>=_twym.SWG
             & {? TR_ZC.ALGORYTM='SUM MAX/MIN'
               || _buf:=exec('oMAXMIN','transport_paczki',_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE);
                  _twym.MAS:=_buf[1];
                  _twym.MIS:=_buf[2];
                  _twym.DOS:=_buf[3];
                  _twym.SUS:=_twym.MAS+_twym.MIS;
                  _twym.put(1);
                  obj_del(_buf);
                  TR_ZC.SUM>=_twym.SUS
               |? TR_ZC.ALGORYTM='MAX DIM'
               || _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
                  _max:=_buf[1];
                  _min:=_buf[2];
                  _dod:=_buf[3];
                  obj_del(_buf);
                  _buf:=exec('dMAXMIN','transport_paczki',_max,_min,_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE);
::                  _buf:=exec('sMAXMIN','transport_paczki',_twym.MAX,_twym.MIN*_twym.ILE,_twym.DOD);
                  _twym.MAS:=_buf[1];
                  _twym.MIS:=_buf[2];
                  _twym.DOS:=_buf[3];
                  _twym.SUS:=_twym.MAS+_twym.MIS;
                  _twym.put(1);
                  obj_del(_buf);
                  _max>=_twym.MAS & _min>=_twym.MIS & _dod>=_twym.DOS
               || 0
               ?}
            || _twym.PCK:=$TR_ZC.ref();
               _twym.CEN:=TR_ZC.C;
               _twym.ILP:=1;
               _twym.ILS:=_twym.ILE;
               _twym.put(1);
               _pck:=1;
               0
            || _wso:=_twym.SOB/TR_ZC.TR_OBJ;
               _wsw:=_twym.SWG/TR_ZC.TR_KG;
               _wsp:={? _wso<=_wsw || _wsw || _wso ?};
               _wil:=int(_twym.ILE/_wsp);
               _wsp:=(_wsp$0)+{? _wsp>(_wsp$0) || 1 || 0 ?};
               {? _wsp
                & {? TR_ZC.ALGORYTM='SUM MAX/MIN'
                  || _buf:=exec('oMAXMIN','transport_paczki',_twym.MAX,_twym.MIN,_twym.DOD,_wil);
                     _twym.MAS:=_buf[1];
                     _twym.MIS:=_buf[2];
                     _twym.DOS:=_buf[3];
                     _twym.SUS:=_twym.MAS+_twym.MIS;
                     _twym.ILS:=_wil;
                     _twym.put(1);
                     obj_del(_buf);
                     TR_ZC.SUM>=_twym.SUS
                  |? TR_ZC.ALGORYTM='MAX DIM'
                  || _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
                     _max:=_buf[1];
                     _min:=_buf[2];
                     _dod:=_buf[3];
                     obj_del(_buf);
                     _buf:=exec('dMAXMIN','transport_paczki',_max,_min,_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE);
::                     obj_del(_buf);
::                     _buf:=exec('sMAXMIN','transport_paczki',_twym.MAX,_twym.MIN*_wil,_twym.DOD);
                     _twym.MAS:=_buf[1];
                     _twym.MIS:=_buf[2];
                     _twym.DOS:=_buf[3];
                     _twym.SUS:=_twym.MAS+_twym.MIS;
                     _twym.ILS:=_wil;
                     _twym.put(1);
                     obj_del(_buf);
                     _max>=_twym.MAS & _min>=_twym.MIS & _dod>=_twym.DOS
                  || 0
                  ?}
               || _twym.PCK:=$TR_ZC.ref();
                  _twym.CEN:=TR_ZC.C;
                  _twym.ILP:=(_twym.ILE%_wil)+{? (_twym.ILE%*_wil) || 1 || 0 ?};
                  _twym.put(1);
                  _pck:=1;
                  0
               ?}
            ?}
         ?};
         {? _pck
         || _adi:=0;
            _tpck.clear();
            _tpck.prefix(_twym.PCK,'T');
            {? _tpck.first()
            || _min:=_tpck.MIN+_twym.MIS;
               _wag:=_tpck.WAG+_twym.SWG;
               _obj:=_tpck.OBJ+_twym.SOB;
               {? _min<=_tpck.PIN & _wag<=_tpck.PWG & _obj<=_tpck.POB
               || _tpck.OBJ:=_obj;
                  _tpck.WAG:=_wag;
                  _tpck.MIN:=_min;
                  _tpck.EMP:={? _min=_tpck.PIN | _wag=_tpck.PWG | _obj=_tpck.POB || 'N' || 'T' ?};
                  _tpck.ILE+=_twym.ILE;
                  {? _tpck.put(1)
                  || _adi:=1;
                     _ild:=_twym.ILZ;
                     _ref:=$_twym.ref()
                  ?};
                  {? _adi
                  || _tpos.clear();
                     _tpos.prefix(_ref);
                     {? _tpos.first()
                     || {!
                        |? _ilp:=_tpos.ILZ-_tpos.ILR;
                           _ilr:={? _ilp>0 || {? _ilp>=_ild || _ild || _ilp ?} || 0 ?};
                           {? _ilr>0
                           || _lp+=1;
                              _twyp.blank();
                              _twyp.TPCK:=$_tpck.ref();
                              _twyp.LP:=_lp;
                              _twyp.TR_ZL:=_tpos.RZL;
                              _twyp.ILE:=_ilr;
                              _twyp.add(1);
                              _tpos.ILR+=_ilr;
                              _tpos.put(1);
                              _ild-=_ilr
                           ?};
                           _ild>0 & _tpos.next()
                        !}
                     ?}
                  ?}
               ||
::                przepełniona paczka szacujemy jak ją rozbić
                  _mmin:=_tpck.PIN-_tpck.MIN;
                  _mwag:=_tpck.PWG-_tpck.WAG;
                  _mobj:=_tpck.POB-_tpck.OBJ;
                  _wil:=_twym.MIS%_mmin;
                  _wso:=_twym.SOB%_mobj;
                  _wsw:=_twym.SWG%_mwag;
                  _wsp:={? _wso>0 & _wso<=_wsw
                        || {? _wil>0 & _wil<=_wso || _wil || _wso ?}
                        |? _wsw>0
                        || {? _wil>0 & _wil<=_wsw || _wil || _wsw ?}
                        |? _wil>0
                        || _wil
                        || _twym.ILE
                        ?};

                  _wil:={? _wsp>0 || _twym.ILE%_wsp || 1 ?};

                  _alg:=exec('FindAndGet','#table',TR_ZC,_twym.PCK,,"ALGORYTM",'');

                  {? _alg='SUM MAX/MIN'
                  || _buf:=exec('oMAXMIN','transport_paczki',_twym.MAX,_twym.MIN,_twym.DOD,_wil);
                     _twym.MAS:=_buf[1];
                     _twym.MIS:=_buf[2];
                     _twym.DOS:=_buf[3];
                     _twym.SUS:=_twym.MAS+_twym.MIS;
                     _twym.put(1);
                     obj_del(_buf);
                     TR_ZC.SUM>=_twym.SUS
                  |? _alg='MAX DIM'
                  || _buf:=exec('sMAXMIN','transport_paczki',_twym.MAX,_twym.MIN*_wil,_twym.DOD);
                     _twym.MAS:=_buf[1];
                     _twym.MIS:=_buf[2];
                     _twym.DOS:=_buf[3];
                     _twym.SUS:=_twym.MAS+_twym.MIS;
                     _twym.put(1);
                     obj_del(_buf);
                     _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
                     _oki:=_buf[1]>=_twym.MAS & _buf[2]>=_twym.MIS & _buf[3]>=_twym.DOS;
                     obj_del(_buf);
                     _oki
                  || 0
                  ?}

               ?}
            || _ll:=_twym.ILP;
               _sum:=0;
               _sup:=0;
               _alg:=exec('FindAndGet','#table',TR_ZC,_twym.PCK,,"ALGORYTM",'');
               {! _ii:=1.._ll
               |! _tpck.PCK:=_twym.PCK;
                  _tpck.EMP:='T';
                  {? _ii<>_ll
                  || _tpck.MIN:=_twym.MIS;
                     _tpck.MAX:=_twym.MAS;
                     _tpck.DOD:=_twym.DOS;
                     _tpck.SUM:=_twym.SUS;
                     _tpck.OBJ:=_twym.SOB;
                     _tpck.ILE:=_twym.ILS;
                     _ilz:=_tpck.ILE*_twym.PRZ;
                     _sup+=_ilz;
                     _sum+=_twym.ILS
                  || _tpck.ILE:=_twym.ILE-_sum;
                     _ilz:=_twym.ILZ-_sup;
                     {? _alg='SUM MAX/MIN'
                     || _buf:=exec('oMAXMIN','transport_paczki',_twym.MAX,_twym.MIN,_twym.DOD,_tpck.ILE)
                     |? _alg='MAX DIM'
                     || TR_ZC.cntx_psh();
                        TR_ZC.prefix();
                        TR_ZC.seek(_tpck.PCK);
                        _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
                        _max:=_buf[1];
                        _min:=_buf[2];
                        _dod:=_buf[3];
                        obj_del(_buf);
                        TR_ZC.cntx_pop();
                        _buf:=exec('dMAXMIN','transport_paczki',_max,_min,_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE)
                     ?};
                     _bu1:=exec('sMAXMIN','transport_paczki',_twym.MAX,_twym.MIN,_twym.DOD);
                     {? _tpck.ILE>1 & _bu1[1]=_buf[1] & _bu1[2]=_buf[2] & _bu1[3]=_buf[3]
                     || _bu2:=exec('sMAXMIN','transport_paczki',_buf[1],_buf[2]*_tpck.ILE,_buf[3]);
                        _buf[1]:=_bu2[1];
                        _buf[2]:=_bu2[2];
                        _buf[3]:=_bu2[3];
                        obj_del(_bu2)
                     ?};
                     obj_del(_bu1);
                     _tpck.MIN:=_buf[2];
                     _tpck.MAX:=_buf[1];
                     _tpck.DOD:=_buf[3];
                     _tpck.SUM:=_buf[1]+_buf[2];
                     _tpck.OBJ:=_twym.SOB;
                     obj_del(_buf)
                  ?};
                  _tpck.WAG:=_tpck.ILE*_twym.WAG $3;
                  _buf:=exec('pMAXMIN','transport_paczki',_twym.PCK,_tpck.MAX);
                  _tpck.PAX:=_buf[1];
                  _tpck.PIN:=_buf[2];
                  _tpck.POD:=_buf[3];
                  _tpck.POB:=_buf[1]*_buf[2]*_buf[3]$3;
                  _tpck.PWG:=_buf[4];
                  _tpck.CEN:=_twym.CEN;
                  obj_del(_buf);
                  {? _tpck.add(1)
                  || _adi:=1;
                     _ild:=_ilz;
                     _ref:=$_twym.ref()
                  ?};
                  {? _adi
                  || _tpos.clear();
                     _tpos.prefix(_ref);
                     {? _tpos.first()
                     || {!
                        |? _ilp:=_tpos.ILZ-_tpos.ILR;
                           _ilr:={? _ilp>0 || {? _ilp>=_ild || _ild || _ilp ?} || 0 ?};
                           {? _ilr>0
                           || _lp+=1;
                              _twyp.blank();
                              _twyp.TPCK:=$_tpck.ref();
                              _twyp.LP:=_lp;
                              _twyp.TR_ZL:=_tpos.RZL;
                              _twyp.ILE:=_ilr;
                              _twyp.add(1);
                              _tpos.ILR+=_ilr;
                              _tpos.put(1);
                              _ild-=_ilr
                           ?};
                           _ild>0 & _tpos.next()
                        !}
                     ?}
                  ?}
               !}
            ?}
         ?};
         _twym.prev()
      !}
   ?};

   VAR_DEL.delete('__spack','__wpack');
   exec('tr_pack_edit','transport_paczki',TR_Z.COURIER,null());
   {? _tpck.first()
   || {!
      |? _twyp.clear();
         _twyp.prefix($_tpck.ref());
         {? _twyp.first()
         || TR_PACK.blank();
            TR_Z.NAZ_:={? TR_Z.TR_NZL().KH<>null()
                       || TR_Z.TR_NZL().KH().NAZ
                       || ''
                       ?};
            TR_PACK.TR_NZL:=TR_Z.TR_NZL;
            TR_PACK.TR_ZEWN:=TR_Z.TR_ZEWN;
            TR_PACK.MAIL:=TR_Z.TR_NZL().EM;
            TR_PACK.TEL:=TR_Z.TR_NZL().TEL;
            TR_PACK.OPIS:=exec('tr_pack_opis','transport_paczki',TR_Z.TR_NZL);
            TR_PACK.STAN:='Do nadania';
            TR_PACK.R_PCK:=exec('FindAndGet','#table',TR_ZC,_tpck.PCK,,"R_PCK",'');
            {? TR_PACK.R_PCK='' || TR_PACK.R_PCK:=exec('wybTR_SL','transport_paczki',TR_Z.COURIER,'RS') ?};
            TR_PACK.DLUG:=_tpck.MAX;
            TR_PACK.SZER:=_tpck.MIN;
            TR_PACK.WYS:=_tpck.DOD;
            TR_PACK.WAGA:=_tpck.WAG;
            TR_PACK.CEN:=_tpck.CEN;
            _obj:=TR_PACK.DLUG*TR_PACK.SZER*TR_PACK.WYS $3;
            TR_PACK.WGG:=exec('oWEIDIM','transport_paczki',_obj,TR_PACK.TR_ZEWN().WGG);
            TR_PACK.NOSTD:=0;
            TR_PACK.TR_ZC:=_tpck.PCK;
            TR_PACK.CEN:=exec('findCEN','transport_paczki',TR_PACK.TR_ZC,TR_PACK.TR_ZC,TR_PACK.POB='T');
            {? TR_PACK.add(1)
            || _addpk+=1;
               exec('addTR_SPACK','transport_paczki',TR_PACK.ref(),TR_Z.COURIER);
               _tr_pack:=TR_PACK.ref();
               {!
               |? _tr_zl:=exec('FindAndGet','#table',TR_ZL,_twyp.TR_ZL,,,null());
                  _dokl:=exec('FindAndGet','#table',TR_ZL,_twyp.TR_ZL,,"M().DOKL",0);
                  _ile:=_twyp.ILE$_dokl;
                  {? _ile>0
                  || TR_ZPACK.prefix();
                     TR_ZPACK.blank();
                     TR_ZPACK.TR_PACK:=_tr_pack;
                     TR_ZPACK.TR_ZL:=_tr_zl;
                     TR_ZPACK.IL:=_ile;
                     TR_ZPACK.add(1)
                  ?};
                  _twyp.next()
               !};
               TR_Z.MOD:='T';
               TR_PACK.WAP:=exec('pobWAR','transport_paczki');
               _nopay:=exec('FindInSet','#table','TR_ZC','TR_ZEWN','N',TR_PACK.TR_ZEWN,"@.TR_ZC.WAR",0);
               {? _nopay>0 & TR_PACK.WAP>=_nopay
               || TR_PACK.CEN:=0;
                  TR_PACK.NOSTD:=2
               ?};
               TR_PACK.put(1)
            ?}
         ?};
         _tpck.next()
      !}
   ?};
   VAR_DEL.delete('__spack','__wpack')
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
TR_ZC.cntx_pop();
{? ~_addpk
|| {? _allpo=_nodim
   || FUN.info('Żadna z pozycji dyspozycji transportowej nie ma określonych wymiarów paczki.'
               '\nGeneracja nie powiodła się.'@)
   |? _allpo=_noile
   || FUN.info('Wszystkim pozycjom dyspozycji transportowej przypisano przesyłki.'
               '\nGeneracja nie powiodła się.'@)
   || FUN.info('Żadna z pozycji dyspozycji transportowej nie podlega standardowym wymiarom i ciężarowi paczki.'
               '\nGeneracja nie powiodła się.'@)
   ?}
|| {? _nodim>0
   || FUN.info('Uwaga. Podczas generacji uwzględniono tylko pozycje dyspozycji transportowej, z określonymi wymiarami.'
               '\nLiczba pominiętych pozycji (bez wymiarów): %1.'@[$_nodim])
   ?}
?};
~~


\sMAXMIN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: układa podane liczby dodatnie w kolejności MAX, MIN i pozostałe wg maksymalnej
::   WE: [_a] - kolejne liczby
::   WY: uporządkowany ciąg
::----------------------------------------------------------------------------------------------------------------------
_len:=_;
{? _len>0
|| _res:=obj_new(_len);
   _tab:=tab_tmp(1,'WAR','REAL','');
   {! _ii:=1.._len
   |? {? var_pres('_[%1]'@[$_ii])=type_of(0)
      || _tab.blank();
         _tab.WAR:=_[_ii];
         _tab.add(1)
      || _tab.blank();
         _tab.WAR:=-1;
         _tab.add(1)
      ?}
   !};
   _min:=0;
   _tab.clear();
   {? _tab.first() || {! |? {? _tab.WAR>-1 || _min:=_tab.WAR; _tab.WAR:=-1; _tab.put(1); 0 || _tab.next() ?} !} ?};
   _ii:=2;
   {? _tab.last()
   || _res[1]:=_tab.WAR;
      {? _tab.prev()
      || _res[2]:=_min;
         {? _len>2
         || {!
            |? _ii+=1;
               _res[_ii]:=_tab.WAR;
               _ii<_len & _tab.prev()
            !}
         ?}
      ?}
   ?}
|| _res:=obj_new(1);
   _res[1]:=-1
?};
_res


\oMAXMIN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: zwraca optymalną sumę wymiarów
::   WE: _a - maksimum
::       _b - minimum
::       _c - wymiar dodatkowy
::       _d - ilość
::   WY: uporządkowany ciąg: Max,Min,Dod
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new(3);
_res[1]:=_a;
_res[2]:=_b;
_res[3]:=_c;
_ile:=_d $0;

{? _ile>1
|| _wsp:=_res[1]%_res[3];
   {? _wsp>1
   || {? _wsp>_ile || _wsp:=_ile ?};
      _res[3]:=_wsp*_res[3];
      _res[2]:=((_ile%_wsp)+{? (_ile%*_wsp) || 1 || 0 ?})*_res[2];
      _buf:=exec('sMAXMIN','transport_paczki',_res[1],_res[2],_res[3]);
      _res[1]:=_buf[1];
      _res[2]:=_buf[2];
      _res[3]:=_buf[3];
      obj_del(_buf)
   ?}
?};
_res


\tr_pack_disp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: podgląd danych paczki
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__spack','__wpack');
_red:=exec('tr_pack_edit','transport_paczki',TR_PACK.TR_ZEWN().COURIER,TR_PACK.ref(),1);
TR_PACK.win_edit(_red);
TR_PACK.display();
VAR_DEL.delete('__spack','__wpack');
~~


\pMAXMIN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: układa podane liczby dodatnie w kolejności MAX, MIN i pozostałe wg maksymalnej
::   WE: _a - wskazanie na paczkę
::       _b - maksymalny wymiar
::   WY: uporządkowany ciąg
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new(4);
_res[1]:=_res[2]:=_res[3]:=_res[4]:=0;

TR_ZC.cntx_psh();
TR_ZC.prefix();
{? TR_ZC.seek(_a)
|| _res[4]:=TR_ZC.TR_KG;
   {? TR_ZC.ALGORYTM='SUM MAX/MIN'
   || _res[1]:=_b;
      _res[2]:=TR_ZC.SUM-_b;
      _res[3]:=_b
   |? TR_ZC.ALGORYTM='MAX DIM'
   || _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
      _res[1]:=_buf[1];
      _res[2]:=_buf[2];
      _res[3]:=_buf[3];
      obj_del(_buf)
   ?}
?};
TR_ZC.cntx_pop();
_res


\pobTR_NZLpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: pobiera informacje o ilości przesyłek dla nagłówka dyspozycji i przypisuje do zmiennych
::----------------------------------------------------------------------------------------------------------------------
_ilp:=0;
_pck:='';
_cen:=0;

TR_PACK.cntx_psh();
TR_PACK.index('TR_NZL');
TR_PACK.prefix(TR_NZL.ref());
{? TR_PACK.first()
|| {!
   |? _ilp+=1;
      _cen+=TR_PACK.CEN;
      {? _pck=''
      || _pck:=TR_PACK.R_PCK
      |? _pck<>TR_PACK.R_PCK
      || _pck:='<różne opakowania>'
      ?};
      TR_PACK.next()
   !}
?};
TR_PACK.cntx_pop();
TR_Z.TR_ILPCK:=_ilp;
TR_Z.TR_CPCK:=_cen;
TR_Z.TR_RPCK:=_pck;
~~


\dMAXMIN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: zwraca dopasowanie
::   WE: _a - maksimum podstawy paczki
::       _b - minimum podstawy paczki
::       _c - maksimum
::       _d - minimum
::       _e - dodatkowy
::       _f - ilość tego w tych rozmiarach
::   WY: uporządkowany ciąg: Max,Min,Dod,Ilość w warstwie
::----------------------------------------------------------------------------------------------------------------------
_max:=_a;
_min:=_b;
_res:=obj_new(4);
_res[1]:=_c;
_res[2]:=_d;
_res[3]:=_e;
_res[4]:=1;
{? _f=1
|| 1
|| _tab:=tab_tmp(1,'WSP','REAL',''
          ,'WY1','REAL',''
          ,'WY2','REAL',''
          ,'WY3','REAL',''
          ,'ILE','REAL',''
          ,'WSX','INTEGER',''
          ,'WSY','INTEGER','');

   _tab.clear();
   _tab.blank();
   _tab.WY1:=_c; _tab.WY2:=_d; _tab.WY3:=_e;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_c*_d $3;
   _tab.add();
   _tab.blank();
   _tab.WY1:=_d; _tab.WY2:=_c; _tab.WY3:=_e;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_d*_c $3;
   _tab.add();
   _tab.blank();
   _tab.WY1:=_c; _tab.WY2:=_e; _tab.WY3:=_d;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_c*_e $3;
   _tab.add();
   _tab.blank();
   _tab.WY1:=_e; _tab.WY2:=_c; _tab.WY3:=_d;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_e*_c $3;
   _tab.add();
   _tab.blank();
   _tab.WY1:=_d; _tab.WY2:=_e; _tab.WY3:=_c;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_d*_e $3;
   _tab.add();
   _tab.blank();
   _tab.WY1:=_e; _tab.WY2:=_d; _tab.WY3:=_c;
   _tab.WSX:=_max%_tab.WY1; _tab.WSY:=_min%_tab.WY2; _tab.ILE:=_tab.WSX*_tab.WSY; _tab.WSP:=_tab.ILE*_e*_d $3;
   _tab.add();

   {? _tab.last() & _tab.WSP>0
   || {? _tab.WSX<=_f
      || _buf:=exec('sMAXMIN','transport_paczki',_tab.WY1*_tab.WSX,_tab.WY2*_tab.WSY,_tab.WY3)
      || _buf:=exec('sMAXMIN','transport_paczki',_tab.WY1,_tab.WY2*_f,_tab.WY3)
      ?};
      _res[1]:=_buf[1];
      _res[2]:=_buf[2];
      _res[3]:=_buf[3];
      _res[4]:=_tab.ILE;
      obj_del(_buf)
   ?}
?};
_res


\ctrl_tr_nzlC
:----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Sprawdza czy wszystkie paczki nie zostały jeszcze nadane
::   WE: _a - TR_NZL.ref()
::   WY: 1-żadna nie została nadana 0-została choć jedna nadana
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
TR_NZL.cntx_psh();
TR_PACK.cntx_psh();
TR_PACK.index('TR_NZL');
TR_PACK.prefix(_a);
{? TR_PACK.first()
|| {!
   |? {? TR_PACK.NR<>'' || _res:=0 ?};
      _res>0 & TR_PACK.next()
   !}
?};
TR_NZL.cntx_pop();
TR_PACK.cntx_pop();
_res


\oWEIDIM
:----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Oblicza wagę gabarytową dla podanych wymiarów
::   WE: _a - objętość cm3
::       _b - współczynnik
::   WY: 0-jeśli nie podano współczynnika, wartość wagi w kg
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')=type_of(0) & _b>0 || _a || 0 ?};
_wsp:={? var_pres('_b')=type_of(0) & _b>0 || _b || 0 ?};
_res:=0;

{? _wsp>0 || _res:=_obj/_wsp $3 ?};
_res


\tr_zc_nopay
:----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: Wartość, od której dostawa jest za darmo
::----------------------------------------------------------------------------------------------------------------------
_rodz_zc:=TR_Z.RODZ_ZC;
_edit:=TR_ZC.win_edit('?');
_add:=1;
TR_Z.RODZ_ZC:='N';
TR_ZC.cntx_psh();
TR_ZC.win_edit('NPAY');
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,TR_Z.RODZ_ZC);
{? TR_ZC.first() || _add:=0 || TR_ZC.blank() ?};
{? TR_ZC.edit("{? TR_ZC.WAR<0 || FUN.info('Należy podać wartość większą lub równą zero.'); 'WAR' || '' ?}")
|| {? _add || {? TR_ZC.WAR>0 || TR_ZC.add(1) ?} || {? TR_ZC.WAR=0 || TR_ZC.del() || TR_ZC.put(1) ?} ?}
?};
TR_ZC.cntx_pop();
TR_ZC.win_edit(_edit);
TR_Z.RODZ_ZC:=_rodz_zc;
~~


\pr_tr_zc_addmod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją
::----------------------------------------------------------------------------------------------------------------------
_win:=cur_win(1,1);
{? _win='CEN' || TR_Z.RODZ_ZC:='C'
|? _win='UBP' || TR_Z.RODZ_ZC:='U'
|? _win='DOD' || TR_Z.RODZ_ZC:='D'
?};
{? (1+menu_txt())='D'
|| TR_Z.OA1:=TR_Z.OA2:=TR_Z.OA3:=''
?};
''


\po_tr_zc_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po wypełnieniu pola - podsumowania
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=1;
{? _fld='SUM' & TR_ZC.SUM>0
|| _tab:=exec('algMaxWym','transport_paczki',TR_ZC.SUM);
   TR_ZC.TR_L:=_tab[1];
   TR_ZC.TR_W:=_tab[2];
   TR_ZC.TR_H:=_tab[3];
   {? TR_ZC.WYS>TR_ZC.TR_W || TR_ZC.WYS:=TR_ZC.TR_W
   |? TR_ZC.WYS=0          || TR_ZC.WYS:=0.1
   ?};
   obj_del(_tab)
|? _fld='SUW' & TR_ZC.SUW>0
|| _tab:=exec('algMaxWym','transport_paczki',TR_ZC.SUW,,1);
   TR_ZC.TR_L:=_tab[1];
   TR_ZC.TR_W:=_tab[2];
   TR_ZC.TR_H:=_tab[3];
   {? TR_ZC.WYS>TR_ZC.TR_W || TR_ZC.WYS:=TR_ZC.TR_W
   |? TR_ZC.WYS=0          || TR_ZC.WYS:=0.1
   ?};
   obj_del(_tab)
|? _fld='SUO' & TR_ZC.SUO>0
|| _tab:=exec('algMaxWym','transport_paczki',TR_ZC.SUO,,2);
   TR_ZC.TR_L:=_tab[1];
   TR_ZC.TR_W:=_tab[2];
   TR_ZC.TR_H:=_tab[3];
   {? TR_ZC.WYS>TR_ZC.TR_W || TR_ZC.WYS:=TR_ZC.TR_W
   |? TR_ZC.WYS=0          || TR_ZC.WYS:=0.1
   ?};
   obj_del(_tab)
?};
exec('oblMinMaxObj','transport_paczki',TR_ZC);
_res


\kalkulujWYM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: podpowiada wymiary paczki oraz cenę
::   WE: [_a] 1-z pytaniami(domyślnie) 0-bez pytan
::       [_b] - 1-poprawa wymiaru podczas edycji 0(domyślnie) nie
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a || 1 ?};
 _mod:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_kalk:=0;

{? ~_tryb
|| _kalk:={? TR_PACK.DLUG>0 & TR_PACK.SZER>0 & TR_PACK.WYS>0 & TR_PACK.WAGA>0 || 2 || 1 ?}
|? TR_Z.MOD='T' & exec('FindInSet','#table','TR_ZPACK','TR_PACK',TR_PACK.ref())=null()
|| _kalk:=1
|? TR_PACK.DLUG>0 & TR_PACK.SZER>0 & TR_PACK.WYS>0 & TR_PACK.WAGA>0
|| _kalk:=FUN.choice('Podano wymiary i ciężar paczki. Wybierz jedną z opcji.'@
           ,,'Ponowna kalkulacja wymiarów'@,'Kalkulacja ceny'@)
|| _kalk:=1
?};

{? _kalk
|| _twym:=tab_tmp(3,'OBJ','REAL',''
           ,'MAX','REAL',''
           ,'MIN','REAL',''
           ,'WMM','REAL',''
           ,'SUM','REAL',''
           ,'DOD','REAL',''
           ,'WAG','REAL',''
           ,'ILE','REAL',''
           ,'ILS','REAL',''
           ,'PRZ','REAL',''
           ,'ILZ','REAL',''
           ,'SOB','REAL',''
           ,'SWG','REAL',''
           ,'MAS','REAL',''
           ,'MIS','REAL',''
           ,'DOS','REAL',''
           ,'SUS','REAL',''
           ,'PCK','STRING[16]',''
           ,'ILP','INTEGER',''
           ,'CEN','REAL','');

   _nopos:=0;
   TR_NZL.cntx_psh();
   TR_ZPACK.cntx_psh();
   TR_ZL.cntx_psh();
   {? _kalk=2 & TR_PACK.DLUG>0 & TR_PACK.SZER>0 & TR_PACK.WYS>0 & TR_PACK.WAGA>0
   || _buf:=exec('sMAXMIN','transport_paczki',TR_PACK.DLUG,TR_PACK.SZER,TR_PACK.WYS);
      _twym.blank();
      _twym.OBJ:=_buf[1]*_buf[2]*_buf[3]$3;
      _twym.MAX:=_buf[1];
      _twym.MIN:=_buf[2];
      _twym.DOD:=_buf[3];
      _twym.WMM:=_buf[1]/_buf[2];
      _twym.SUM:=_buf[1]+_buf[2];
      _twym.WAG:=TR_PACK.WAGA;
      _twym.ILZ:=1;
      _twym.ILE:=1;
      _twym.PRZ:=1;
      _twym.SOB:=_twym.ILE*_twym.OBJ $3;
      _twym.SWG:=_twym.ILE*_twym.WAG $3;
      _oki:=_twym.add(1);
      obj_del(_buf)
   |? TR_Z.MOD='T'
   || TR_ZPACK.index('TR_PACK');
      TR_ZPACK.prefix(TR_PACK.ref());
      {? TR_ZPACK.first()
      || {!
         |? _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZPACK.TR_ZL);
            _ile:=TR_ZPACK.IL;
            {? _ile>0
            || _tab:=exec('pobWymPack','transport_paczki',TR_ZPACK.TR_ZL().M,1,TR_ZL.JO);
               _prz:=_tab[5];
               _buf:=exec('sMAXMIN','transport_paczki',_tab[1],_tab[2],_tab[3]);
               {? _buf[1]>0
               || _max:=_buf[1];
                  _min:=_buf[2];
                  _dod:=_buf[3]
               || obj_del(_buf);
                  _buf:=exec('sMAXMIN','transport_paczki'
                         ,TR_ZPACK.TR_ZL().DLUG*100,TR_ZPACK.TR_ZL().SZER*100,TR_ZPACK.TR_ZL().WYSO*100);
                  _max:=_buf[1];
                  _min:=_buf[2];
                  _dod:=_buf[3]
               ?};
               obj_del(_buf);
               {? _max>0
               || _obj:=_max*_min*_dod $3;
                  _oki:=0;
                  _twym.clear();
                  _twym.prefix(_obj,_max,_min);
                  {? _twym.first()
                  || _twym.ILZ+=_ile;
                     _ilz:=_ile/_prz;
                     _twym.ILE+=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
                     _twym.SOB:=_twym.ILE*_twym.OBJ $3;
                     _twym.SWG:=_twym.ILE*_twym.WAG $3;
                     _oki:=_twym.put(1)
                  || _twym.blank();
                     _twym.OBJ:=_obj;
                     _twym.MAX:=_max;
                     _twym.MIN:=_min;
                     _twym.DOD:=_dod;
                     _twym.WMM:=_max/_min;
                     _twym.SUM:=_max+_min;
                     _twym.WAG:=_tab[4];
                     _twym.ILZ:=_ile;
                     _ilz:=_ile/_prz;
                     _twym.ILE:=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
                     _twym.PRZ:=_prz;
                     _twym.SOB:=_twym.ILE*_twym.OBJ $3;
                     _twym.SWG:=_twym.ILE*_twym.WAG $3;
                     _oki:=_twym.add(1)
                  ?}
               ?};
               obj_del(_tab)
            ?};
            TR_ZPACK.next()
         !}
      || _nopos:=1
      ?}
   || _ilpack:={? TR_Z.R_PACK='T' || TR_Z.IL_PACK || 1 ?};
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_Z.TR_NZL);
      {? TR_ZL.first()
      || {!
         |? _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
            _ile:=TR_ZL.IL-_ilz;
            _ile:=_ile/_ilpack $ TR_ZL.M().DOKL;
            {? _ile>0
            || _tab:=exec('pobWymPack','transport_paczki',TR_ZL.M,1,TR_ZL.JO);
               _prz:=_tab[5];
               _buf:=exec('sMAXMIN','transport_paczki',_tab[1],_tab[2],_tab[3]);
               {? _buf[1]>0
               || _max:=_buf[1];
                  _min:=_buf[2];
                  _dod:=_buf[3]
               || obj_del(_buf);
                  _buf:=exec('sMAXMIN','transport_paczki',TR_ZL.DLUG*100,TR_ZL.SZER*100,TR_ZL.WYSO*100);
                  _max:=_buf[1];
                  _min:=_buf[2];
                  _dod:=_buf[3]
               ?};
               obj_del(_buf);
               {? _max>0
               || _obj:=_max*_min*_dod $3;
                  _oki:=0;
                  _twym.clear();
                  _twym.prefix(_obj,_max,_min);
                  {? _twym.first()
                  || _twym.ILZ+=_ile;
                     _ilz:=_ile/_prz;
                     _twym.ILE+=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
                     _twym.SOB:=_twym.ILE*_twym.OBJ $3;
                     _twym.SWG:=_twym.ILE*_twym.WAG $3;
                     _oki:=_twym.put(1)
                  || _twym.blank();
                     _twym.OBJ:=_obj;
                     _twym.MAX:=_max;
                     _twym.MIN:=_min;
                     _twym.DOD:=_dod;
                     _twym.WMM:=_max/_min;
                     _twym.SUM:=_max+_min;
                     _twym.WAG:=_tab[4];
                     _twym.ILZ:=_ile;
                     _ilz:=_ile/_prz;
                     _twym.ILE:=(_ilz$0)+{? _ilz>(_ilz$0) || 1 || 0 ?};
                     _twym.PRZ:=_prz;
                     _twym.SOB:=_twym.ILE*_twym.OBJ $3;
                     _twym.SWG:=_twym.ILE*_twym.WAG $3;
                     _oki:=_twym.add(1)
                  ?}
               ?};
               obj_del(_tab)
            ?};
            TR_ZL.next()
         !}
      ?}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop();
   TR_ZPACK.cntx_pop();
:: przypisanie do wymiarów typu paczki wg kryteriów oraz obliczenie sumy objętości i wagi
   _sob:=0;
   _swg:=0;
:: obliczenie całkowitej objętości i wagi - szacujemy na tej podstawie maksymalną wielkość paczki
   _twym.clear();
   {? _twym.first()
   || {!
      |? _sob+=_twym.SOB;
         _swg+=_twym.SWG;
         _twym.next()
      !}
   ?};
:: wskazanie na rodzaj maksymalnej paczki
   _tr_zc:='';
   _trmzc:='';
   TR_ZC.index('TR_ZEWN');
   TR_ZC.prefix(TR_Z.TR_ZEWN,'C');
   {? TR_ZC.last()
   ||
::    brak zdefiniowanej paczki spełniającej dane kryteria
      _trmzc:=$TR_ZC.ref();
      _tr_zc:='xxx';
      TR_ZC.first();
      {!
      |? {? _sob<=TR_ZC.TR_OBJ & _swg<=TR_ZC.TR_KG
         || _tr_zc:=$TR_ZC.ref();
            0
         || TR_ZC.next()
         ?}
      !}
   ?};
:: szacujemy wymiary
   _max_h:=0;
   {? _kalk=2 | _nopos | _tr_zc<>'xxx'
   || _max_l:=0;
      _max_w:=0
   |? _tr_zc='xxx'
   || _max_l:=120;
      _max_w:=80
   ?};
   _twym.clear();
   {? ~_nopos & _twym.last()
   || {? _tr_zc='xxx'
      || _buf:=exec('sMAXMIN','transport_paczki',_twym.MAX,_twym.MIN*_twym.ILE,_twym.DOD)
      || _buf:=exec('sMAXMIN','transport_paczki',TR_ZC.TR_L,TR_ZC.TR_W,TR_ZC.TR_H);
         _max:=_buf[1];
         _min:=_buf[2];
         _dod:=_buf[3];
         obj_del(_buf);
         _buf:=exec('dMAXMIN','transport_paczki',_max,_min,_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE)
      ?};
      _max:=_buf[1];
      _min:=_buf[2];
      _dod:=_buf[3];
      obj_del(_buf);
      {? _tr_zc='xxx'
      || {? _twym.MAX>_max_l || _max_l:=_twym.MAX ?};
         {? _twym.MIN>_max_w || _max_w:=_twym.MIN ?};
         _max:=_max_l;
         _min:=_max_w
      || _max_l:=_max;
         _max_w:=_dod
      ?};
::      _max:=_max_l;
::      _min:=_max_w;
      {!
      |? _buf:=exec('dMAXMIN','transport_paczki',_max,_min,_twym.MAX,_twym.MIN,_twym.DOD,_twym.ILE);
::         _max_l:=_buf[1];
::         _max_w:=_buf[2];
         _wsp:=
         _wsp:=(_twym.ILE%_buf[4])+{? _twym.ILE%*_buf[4] || 1 || 0 ?};
         _max_h+=_buf[2]*_wsp;
         obj_del(_buf);
         _twym.prev()
      !}
   ?};
   obj_del(_twym);
   {? _mod
   || _bu1:=exec('sMAXMIN','transport_paczki',TR_PACK.DLUG,TR_PACK.SZER,TR_PACK.WYS);
      _bu2:=exec('sMAXMIN','transport_paczki',_max_l,_max_w,_max_h);
      _max_l:=_bu2[1];
      _max_w:=_bu2[2];
      _max_h:=_bu2[3];
      _mod:={? (_bu1[1]=_bu2[1] & _bu1[2]=_bu2[2] & _bu1[3]=_bu2[3])
             | (~(TR_PACK.DLUG>0 & TR_PACK.SZER>0 & TR_PACK.WYS>0) & (_bu2[1]>0 & _bu2[2]>0 & _bu2[3]>0))
            || 1
            || 0
            ?};
      obj_del(_bu1);
      obj_del(_bu2)
   || _mod:=1
   ?};
   {? _mod
   || TR_PACK.DLUG:=_max_l;
      TR_PACK.SZER:=_max_w;
      TR_PACK.WYS:=_max_h
   ?};
   TR_PACK.WAGA:=_swg;
   _obj:=TR_PACK.DLUG*TR_PACK.SZER*TR_PACK.WYS $3;
   TR_PACK.WGG:=exec('oWEIDIM','transport_paczki',_obj,TR_PACK.TR_ZEWN().WGG);
   TR_PACK.TR_ZC:={? _nopos || '' || _tr_zc ?};
   {? _tr_zc='xxx' | {? _kalk=2 || TR_PACK.NOSTD<>3 || 1 ?}
   || TR_PACK.NOSTD:=_tr_zc='xxx'
   ?};
   {? TR_PACK.DLUG<=0 | TR_PACK.SZER<=0 | TR_PACK.WYS<=0 | TR_PACK.WAGA<=0 || TR_PACK.TR_ZC:='' ?};
   {? TR_PACK.TR_ZC<>''
   || TR_PACK.CEN:=exec('findCEN','transport_paczki',_tr_zc,_trmzc,TR_PACK.POB='T');
      {? _tr_zc<>'xxx' || TR_PACK.R_PCK:=exec('FindAndGet','#table',TR_ZC,_tr_zc,,"R_PCK",'') ?};
      {? TR_PACK.UB='T' & TR_PACK.KW_UB=0
      || TR_PACK.KW_UB:=exec('findUBP','transport_paczki',TR_Z.TR_ZEWN,TR_PACK.WAP)
      ?}
   || TR_PACK.NOSTD:=0;
      TR_PACK.CEN:=0;
      _r_pck:=exec('wybTR_SL','transport_paczki',TR_Z.COURIER,'RS');
      {? _r_pck<>'' || TR_PACK.R_PCK:=_r_pck ?};
      TR_PACK.KW_UB:=0
   ?};
   _nopay:=exec('FindInSet','#table','TR_ZC','TR_ZEWN','N',TR_PACK.TR_ZEWN,"@.TR_ZC.WAR",0);
   {? _nopay>0 & TR_PACK.WAP>=_nopay
   || TR_PACK.CEN:=0;
      TR_PACK.NOSTD:=2
   ?};
   exec('iconPACK','transport_paczki')
?};
''


\findCEN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: poszukuję ceny dla paczki
::   WE: _a - wskazanie na paczkę
::       _b - wskazanie na największą paczkę w cenniku
::       _c - 1-pobranie 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
TR_ZC.cntx_psh();
TR_ZC.prefix();
{? _a<>'xxx' & TR_ZC.seek(_a)
|| _res:={? _c & TR_ZC.CP>0 || TR_ZC.CP || TR_ZC.C ?}
|? _a='xxx' & _b<>'' & TR_ZC.seek(_b)
||
::   _res:=TR_ZC.C;
:: miejsce na obliczenie dopłat
   ''
?};
TR_ZC.cntx_pop();
_res


\findUBP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: poszukuję ubezpieczenia dla paczki
::   WE: _a - TR_ZEWN.ref()
::       [_b] - wartość przesyłki domyślnie 0
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_war:={? var_pres('_b')=type_of(0) & _b>0 || _b || 0 ?};
TR_ZC.cntx_psh();
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(_a,'U');
{? TR_ZC.first()
|| _res:=TR_ZC.C;
   {? _war>0
   || {!
      |? {? _war<=TR_ZC.WAR || _res:=TR_ZC.C ?};
         TR_ZC.next()
      !}
   ?}
?};
TR_ZC.cntx_pop();
_res


\pr_cen_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją wartości dla paczki
::----------------------------------------------------------------------------------------------------------------------
TR_PACK.NOSTD=1


\po_cen_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po redakcji wartości dla paczki
::----------------------------------------------------------------------------------------------------------------------
exec('iconPACK','transport_paczki');
''


\pw_cen_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyświetleniem kodu identyfikacyjnego
::  OLD: \pwzl2sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=(2+cur_kwin())='e_';
_wined:=TR_PACK.win_edit('?');
{? _edit & _wined<>'' & TR_PACK.NOSTD
|| TR_PACK.win_efml(_wined,,'CEN',,'ICON_BEFORE',"'xwin16.png:46'")
|? _edit & _wined<>''
|| TR_PACK.win_efml(_wined,,'CEN',,'ICON_BEFORE',"''")
?};
exec('iconPACK','transport_paczki');
''


\iconPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wyświetla odpowiednią ikonkę
::----------------------------------------------------------------------------------------------------------------------
TR_Z.INFPACK:='';
{? TR_PACK.NOSTD=1 & TR_PACK.CEN=0 & TR_PACK.TR_ZEWN().MWG>0 & TR_PACK.TR_ZEWN().MWG<TR_PACK.WGG
|| TR_Z.INFPACK:='DO WYCENY - DOPŁATY POWYŻEJ WAGI GABARYTOWEJ'@;
   'xwin16.png:12'
|? TR_PACK.NOSTD=1 & TR_PACK.CEN=0
|| TR_Z.INFPACK:='PRZESYŁKA NIESTANDARDOWA - DO WYCENY'@;
   'xwin16.png:12'
|? TR_PACK.NOSTD=1 & TR_PACK.CEN>0
|| TR_Z.INFPACK:='PRZESYŁKA NIESTANDARDOWA - WYCENIONA'@;
   'xwin16.png:13'
|? TR_PACK.NOSTD=2
|| TR_Z.INFPACK:='DARMOWA DOSTAWA'@;
   'xwin16.png:23'
|? TR_PACK.NOSTD=3
|| TR_Z.INFPACK:='ZMIENIONO WYMIARY - WYCENIONA'@;
   'xwin16.png:13'
|? TR_PACK.CEN=0
|| TR_Z.INFPACK:='BRAK CENY'@;
   'xwin16.png:4'
|| exec('pusta','#icon')
?}


\pr_wym_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją wymiaru paczki
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
($('TR_Z.'+_fld))():=($('TR_PACK.'+_fld))();
1


\po_wym_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po redakcji wymiaru paczki
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_before:=($('TR_Z.'+_fld))();
_after:=($('TR_PACK.'+_fld))();
{? _after<>_before & TR_PACK.NOSTD<>2
|| TR_PACK.NOSTD:=3;
   exec('kalkulujWYM','transport_paczki',0,1)
?};
_obj:=TR_PACK.DLUG*TR_PACK.SZER*TR_PACK.WYS $3;
TR_PACK.WGG:=exec('oWEIDIM','transport_paczki',_obj,TR_PACK.TR_ZEWN().WGG);
1


\pobWAR
::--------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: pobiera wartość przesyłki aktualnej paczki lub zmiennej TR_Z.TR_NZL
::   WY: wartość przesyłki lub 0
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_where:={? TR_Z.MOD='T' || TR_Z.TR_NZL().WHERE  || TR_PACK.TR_NZL().WHERE ?};

{? (';ZK_N;ND;'*_where)>1
|| TR_NZL.cntx_psh();
   TR_ZPACK.cntx_psh();
   TR_ZL.cntx_psh();
   {? TR_Z.MOD='T'
   || TR_ZPACK.index('TR_PACK');
      TR_ZPACK.prefix(TR_PACK.ref());
      {? TR_ZPACK.first()
      || {!
         |? _ile:=TR_ZPACK.IL;
            {? _where='ZK_N'
            || _cen:=exec('FindAndGet','#table',ZK_P,TR_ZPACK.TR_ZL().POZ_REF,,"CB",0)
            || _rds:=exec('FindAndGet','#table',ND,TR_ZPACK.TR_ZL().DOK_REF,,"TYP().P='N' & TYP().DS='T'",0);
               _cen:={? _rds || exec('FindAndGet','#table',DK,TR_ZPACK.TR_ZL().POZ_REF,,"CB",0) || 0 ?};
               _wsp:={? _rds
                     || exec('FindAndGet','#table',DK,TR_ZPACK.TR_ZL().POZ_REF,
                         ,"{? IL<>IL2 & IL2>0 || IL/IL2 || 1 ?}",0)
                     || 0
                     ?};
               {? _wsp>0 & _wsp<>1 || _ile:=_ile/_wsp ?}
            ?};
            {? _ile>0 & _cen>0 || _res+=_ile*_cen $2 ?};
            TR_ZPACK.next()
         !}
      ?}
   || _ilpack:={? TR_Z.R_PACK='T' || TR_Z.IL_PACK || 1 ?};
      TR_ZL.index('POZ');
      TR_ZL.prefix(TR_Z.TR_NZL);
      {? TR_ZL.first()
      || {!
         |? _ilz:=exec('sum_tr_zpack','transport_paczki',TR_ZL.ref());
            _ile:=TR_ZL.IL-_ilz;
            _ile:=_ile/_ilpack $ TR_ZL.M().DOKL;
            {? _where='ZK_N'
            || _cen:=exec('FindAndGet','#table',ZK_P,TR_ZL.POZ_REF,,"CB",0)
            || _rds:=exec('FindAndGet','#table',ND,TR_ZL.DOK_REF,,"TYP().P='N' & TYP().DS='T'",0);
               _cen:={? _rds || exec('FindAndGet','#table',DK,TR_ZL.POZ_REF,,"CB",0) || 0 ?};
               _wsp:={? _rds
                     || exec('FindAndGet','#table',DK,TR_ZL.POZ_REF,,"{? IL<>IL2 & IL2>0 || IL/IL2 || 1 ?}",0)
                     || 0
                     ?};
               {? _wsp>0 & _wsp<>1 || _ile:=_ile/_wsp ?}
            ?};
            {? _ile>0 & _cen>0 || _res+=_ile*_cen $2 ?};
            TR_ZL.next()
         !}
      ?}
   ?};
   TR_NZL.cntx_pop();
   TR_ZL.cntx_pop();
   TR_ZPACK.cntx_pop()
?};
_res


\pr_war_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed redakcją wyrtości przesyłki
::----------------------------------------------------------------------------------------------------------------------
_wap:=exec('pobWAR','transport_paczki');
TR_PACK.TR_NZL().WHERE='' | _wap=0


\po_war_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po redakcji wymiaru paczki
::----------------------------------------------------------------------------------------------------------------------
TR_Z.MOD:='T';
exec('kalkulujWYM','transport_paczki',0);
1


\pr_mod_trzpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po modyfikacji TR_ZPACK
::----------------------------------------------------------------------------------------------------------------------
BEER.PRILZ:=TR_ZPACK.IL;
1


\po_mod_trzpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: po modyfikacji TR_ZPACK
::----------------------------------------------------------------------------------------------------------------------
{? BEER.PRILZ<=0 | BEER.PRILZ<>TR_ZPACK.IL
|| TR_Z.MOD:='T';
   {? TR_PACK.WAP=0 || TR_PACK.WAP:=exec('pobWAR','transport_paczki') ?};
   exec('kalkulujWYM','transport_paczki');
   TR_PACK.put(1)
?};
1


\selPACK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: wybierz rodzaj paczki z listy
::----------------------------------------------------------------------------------------------------------------------
TR_ZC.cntx_psh();
TR_ZC.index('TR_ZEWN');
TR_ZC.prefix(TR_Z.TR_ZEWN,'C');
{? TR_ZC.first()
|| VAR_DEL.delete('__algTRZC');
:: tabela obsługiwanych algorytmów
   TR_Z.RODZ_ZC:='C';
   exec('defALGtrzc','transport_paczki');
   TR_ZC.win_sel('SEL');
   {? TR_ZC.select()
   || TR_PACK.DLUG:=TR_ZC.TR_L;
      TR_PACK.SZER:=TR_ZC.TR_W;
      TR_PACK.WYS:=TR_ZC.TR_H;
      TR_PACK.WAGA:=TR_ZC.TR_KG;
      exec('kalkulujWYM','transport_paczki',0)
   ?};
   VAR_DEL.delete('__algTRZC')
?};
TR_ZC.cntx_pop();
''


\save_etyk_tr_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [22.26]
:: OPIS: Zapisuje etykietę
::----------------------------------------------------------------------------------------------------------------------
{? ~TR_PACK.get() || return() ?};

{? #TR_PACK.ETYK<>0
||  exec('bl_save','#blob',TR_PACK,'ETYK')
?};
''

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 b4b6880692768a46e9b09fc9df453c2d07389772d154d9a8702dda0b22ddbf92f9bda50ecbd5bd4f08be144ec083681eed8c2c9aa8390a7df78d8caaa43b02e137b0ad35eaee5d510b40a84650f1438eaa775fdb10a51c0407c490705668c4e133b034af1353e4f8e98d93e2942903e83b199e0c86e61330e63afeb754b88da5
