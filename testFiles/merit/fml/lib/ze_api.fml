:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ze_api.fml [23.25]
:: Utworzony: 22.09.2022
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły obsługujące zestawy elementów (funkcje dostępu).
::======================================================================================================================


\define
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Definiuje klasę obiektu usprawniającego dostęp do zestawów elementów.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('ZE_OBJ',@.CLASS)>0
:: klasa już zdefiniowana
|| return()
?};

obj_decl('ZE_OBJ',

   obj_fld('FIRMA',exec('ref_firma','ustawienia')),
   obj_fld('cell_type','REF,SQLREF,IDADD,UIDREF,INTEGER'),

   obj_fld('reader',~~),

   obj_meth('__init',"
      _a.reader:=($('obj_new(\\\'%1\\\')'[gsub(.cell_type,',','\\\',\\\'')]))();
      _a.reader.REF:=$'{? _a.seek(ZE_POZ.SRC_UID,,1) || _a.ref() || null ?}';
      _a.reader.SQLREF:=$'ZE_POZ.SRC_REF';
      _a.reader.IDADD:=$'ZE_POZ.SRC_ADD';
      _a.reader.UIDREF:=$'ZE_POZ.SRC_UID';
      _a.reader.INTEGER:=$'ZE_POZ.SRC_NUM';
      ~~
   "),

   obj_meth('get_type',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca znormalizowaną nazwę obsługiwanej wartości.
::   WE: _a [STRING] - nazwa typu do weryfikacji (REF,SQLREF,IDADD,UIDREF,INTEGER)
::   WY: nazwa obsługiwanej wartości
::----------------------------------------------------------------------------------------------------------------------
      _arg:=~-_a;
      {? _arg<>'' & (',%1,'[.cell_type])*(',%1,'[_arg])<>0
      || _arg
      || 'REF'
      ?}
   ",type_of(''),-1),

   obj_meth('get_reader',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca formułę odczytującą wartość wskazania.
::   WE: _a [STRING] - nazwa typu do weryfikacji (REF,SQLREF,IDADD,UIDREF,INTEGER)
::   WY: właściwa dla typu formuła pobierająca wartość
::----------------------------------------------------------------------------------------------------------------------
      ($('_a.%1'[.get_type(_a)]))(.reader)
   ",type_of(''),-1),

   obj_meth('get_table',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci tabeli tymczasowej.
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
      _col:=
         'ZE_POZ.SRC_REF as SQLREF, '
         'ZE_POZ.SRC_ADD as IDADD, '
         'ZE_POZ.SRC_UID as UIDREF, '
         'ZE_POZ.SRC_MDB as REF_NAME, '
         'ZE_POZ.SRC_NUM as REF_NUM ';
      _cnd:=
         'ZE_POZ.SYM_GRP=\\\'%1\\\' and '
         'ZE_POZ.SYM_LST=\\\'%2\\\' and '
         'ZE_POZ.DOSTEPNY=\\\'T\\\''[_a,_b];
      sql(
         'select %1 from ZE_POZ where ZE_POZ.FIRMA is null and %2 '
         'union '
         'select %1 from ZE_POZ where ZE_POZ.FIRMA=:_a and %2 '[_col,_cnd],
         exec('ref_firma','ustawienia')
      )
   ",type_of(''),type_of(''),-1),

   obj_meth('get_array',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci nienazwanej tablicy wskazań.
::       __ZE.get_array('GRUPA','LISTA')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::   WY: tablica nienazwana lub ~~
::----------------------------------------------------------------------------------------------------------------------
      .get_array(_a,_b,'')
   ",type_of(''),type_of(''),-1),

   obj_meth('get_array',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci tablicy nienazwanej.
::       __ZE.get_array('GRUPA','LISTA','TYP')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::       _c [STRING] - typ elementów tablicy: REF/SQLREF/IDADD/UIDREF/INTEGER
::   WY: tablica nienazwana lub ~~
::----------------------------------------------------------------------------------------------------------------------
      _col:=.get_type(_c);
      _exe:=.get_reader(_col);
      ZE_POZ.cntx_psh();
      ZE_POZ.index('DOSTEPNY');
      ZE_POZ.prefix('T',_a,_b,null);
      _buf:=.mk_array(_exe,_col);
      {? type_of(_buf)=type_of(~~)
      || ZE_POZ.prefix('T',_a,_b,.FIRMA);
         _buf:=.mk_array(_exe,_col)
      ?};
      ZE_POZ.cntx_pop();
      _buf
   ",type_of(''),type_of(''),type_of(''),-1),

   obj_meth('mk_array',"
::    metoda "prywatna"
      {? ZE_POZ.first()
      || _TAB:=~~;
         {? _b='REF'
::          wymagane tylko dla tablicy zawierającej wskazania
::          potrzebne jest pozycjonowanie się na wierszach
         || _TAB:=($ZE_POZ.ZE_LST().ZE_DEF().TABELA)();
            _TAB.cntx_psh()
         ?};
         _size:=ZE_POZ.size();
         _refs:=obj_new(_size);
         _loop:=ZE_POZ.first();
         {! _ni:=1.._size
         |? _loop
         |! _refs[_ni]:=_a(_TAB);
            _loop:=ZE_POZ.next()
         !};
         {? _b='REF'
::          tylko dla wskazań
         || _TAB.cntx_pop()
         ?};
         _refs
      || ~~
      ?}
   ",type_of(""),type_of(''),-1),

   obj_meth('get_string',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci ciągu znaków ze wskazaniami oddzielonymi przecinkami.
::       __ZE.get_string('GRUPA','LISTA')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::   WY: ciąg znaków zawierający żądane informacje
::----------------------------------------------------------------------------------------------------------------------
      .get_string(_a,_b,'',',')
   ",type_of(''),type_of(''),-1),

   obj_meth('get_string',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci ciągu znaków z elementami oddzielonymi przecinkami.
::       __ZE.get_string('GRUPA','LISTA','TYP')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::       _c [STRING] - typ elementów tablicy: REF/SQLREF/IDADD/UIDREF/INTEGER
::   WY: ciąg znaków zawierający żądane informacje
::----------------------------------------------------------------------------------------------------------------------
      .get_string(_a,_b,_c,',')
   ",type_of(''),type_of(''),type_of(''),-1),

   obj_meth('get_string',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci ciągu znaków z elementami oddzielonymi separatorem.
::       __ZE.get_string('GRUPA','LISTA',,'SEPARATOR')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::       _c [] - pominięty (przyjęty będzie REF)
::       _d [STRING] - seperator elementów listy
::   WY: ciąg znaków zawierający żądane informacje
::----------------------------------------------------------------------------------------------------------------------
      .get_string(_a,_b,'',_d)
   ",type_of(''),type_of(''),type_of(~~),type_of(''),-1),

   obj_meth('get_string',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca zawartość listy w postaci ciągu znaków z elementami oddzielonymi separatorem.
::       __ZE.get_string('GRUPA','LISTA','TYP','SEPARATOR')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::       _c [STRING] - typ elementów tablicy: REF*/SQLREF/IDADD/UIDREF/INTEGER
::       _d [STRING] - seperator elementów listy
::   WY: ciąg znaków zawierający żądane informacje
::----------------------------------------------------------------------------------------------------------------------
      _col:=.get_type(_c);
      _sep:=_d;
      _exe:=.get_reader(_col);
      ZE_POZ.cntx_psh();
      ZE_POZ.index('DOSTEPNY');
      ZE_POZ.prefix('T',_a,_b,null);
      {? (_str:=.mk_string(_exe,_col,_sep))=''
      || ZE_POZ.prefix('T',_a,_b,.FIRMA);
         _str:=.mk_string(_exe,_col,_sep)
      ?};
      ZE_POZ.cntx_pop();
      _str
   ",type_of(''),type_of(''),type_of(''),type_of(''),-1),

   obj_meth('mk_string',"
::    metoda "prywatna"
      _exe:=_a;
      _col:=_b;
      _sep:=_c;
      {? ZE_POZ.first()
      || _TAB:=~~;
         {? _col='REF'
::          wymagane tylko dla tablicy zawierającej wskazania
::          potrzebne jest pozycjonowanie się na wierszach
         || _TAB:=($ZE_POZ.ZE_LST().ZE_DEF().TABELA)();
            _TAB.cntx_psh()
         ?};
         _refs:='';
         _loop:=ZE_POZ.first();
         {!
         |? _loop
         |! _refs+=$(_exe(_TAB))+_sep;
            _loop:=ZE_POZ.next()
         !};
         {? _col='REF'
::          tylko dla wskazań
         || _TAB.cntx_pop()
         ?};
         _refs-(+_sep)
      || ''
      ?}
   ",type_of(""),type_of(''),type_of(''),-1),

   obj_meth('exists',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy rekord dany wskazaniem występuje na liście.
::       __ZE.exists('GRUPA','LISTA','WSKAZANIE')
::   WE: _a [STRING] - symbol grupy zestawów
::       _b [STRING] - symbol listy elementów
::       _c [STRING] - wskazanie wiersza tabeli
::   WY: ciąg znaków zawierający żądane informacje
::----------------------------------------------------------------------------------------------------------------------
      (',%1,'[.get_string(_a,_b)])*(',%1,'[$_c])<>0
   ",type_of(''),type_of(''),type_of(null),-1)
);

~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 84ebbac4790c999b8ef789b3a2cf6da890a3303d1728631a82a37b0bae4e53a9994fdde41d1df2245d94b7aff14fdc1fccc5d378e6cd3e1ebeecfd1239c841a78153af4ae464e5f2bc928d6face74733fdd2f44b24802f1ef54a045a52f302c9a032349be0e2a5a6e8d8ec373ec8ef9a7b74fda851c4b2b4072cc3c90131048c
