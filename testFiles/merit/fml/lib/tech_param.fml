:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: tech_param.fml
:: Utworzony: -
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi parametrów technologii (biblioteka wspólna dla TTE_TEC, TTE_WTE, TTE_PZL)
::            Obsługa tabel:
::            - TPAR - parametry karty technologicznej
::            - TWPAR - parametry produktu karty technologicznej
::            - TPARTRA - translacja parametrów dla półfabrykatów
::======================================================================================================================


\Tpar_decl
::----------------------------------------------------------------------------------------------------------------------
::  MOD: TS [8.60] Definicja obiektu do obsługi parametrów karty technologicznej
::  OLD: \Tpar_decl/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
::======================================================================================================================
:: OBIEKT 'TPAr'
::#POLA
::--PRYWATNE
::    ERR         - flaga wystąpienia błędu
::    me          - wskazanie na siebie samego
::    t           - tabela parametrów
::                    t[1] - wskazanie tabeli parametrów domyślnie TPAR
::                    t[2] - akronim indeksu dla wskazania w t[1]
::                    t[3] - wartość prefix_u dla wskazania w t[1]
::    N           - liczba parametrów
::    P           - tablica parametrów
::                    P[1][x] - numer parametru zapisanego w x-tym elemencie tablicy
::                    P[2][x] - wartość parametru
::                    P[3][x] - opis parametru
::    SF          - flaga wyświetlania spisu parametrow 1 - wyświetla, inne - nie wyświetla
::    KTM         - produkt, którego dotyczą parametry
::--PUBLICZNE
::    <brak>
::#METODY
::--PRYWATNE
::    loadp()     - ładuje wszystkie parametry dla karty do obiektu
::    reload()    - przeładowuje tabelę P
::    calc(f)     - oblicza wartość formuły f, gdy f='' to calc(f)=1
::    chk(f)      - sprawdza poprawność formuły f
::    change()    - udostępnia okienko redakcyjne wszystkich parametrów karty
::    show()      - wyświetla okienko z wszystkimi parametrami karty
::    save(a,b,c) - zapisuje dane do tabeli 'a'  przy czym a.b:=c,
::                  gdzie a.b - wskazanie na tabelę nadrzędną np. 'TKTL'
::--PUBLICZNE
::    p(n)        - zwraca wartość n-tego parametru
::    x()         - zwraca wartość XJM dla typu redagowanej karty
::======================================================================================================================

{? var_pres('TPAr',@.CLASS)<=0
||
   obj_decl('TPAr',

      obj_fld('ERR',0),
      obj_fld('CZY_KOM',1),
      obj_fld('me','tpar'),

::    Tabela z parametrami: TPAR, KPAR
      obj_fld('TABLE',~~),
::    Index tabeli, którego użyć do zaprefiksowania podczas wczytywania parametrów
      obj_fld('INDEX',~~),
::    Wartość prefiksu którego użyć podczas wczytywania parametrów
      obj_fld('PREFIX',~~),
      obj_fld('N',0),

::    Tablica nazwana zawierająca wartości parametrów
      obj_fld('P',0),
      obj_fld('KTM',null()),
      obj_fld('PX_TEX',null()),
      obj_fld('SF',0),
      obj_fld('RESULT',0),
      obj_meth('__init',"
         _a.me:=_a;
         {? _>1 & type_of(_b)=type_of(null()) || _a.KTM:=_b ?};
         _a.RESULT:=0;

::       Obiekt zawierający wartości parametrów
         _a.P:=obj_new(
::                      Numer parametru
                        'NR'
::                      Wartość parametru
                        ,'VAL'
::                      Nazwa parametru (opis)
                        ,'OPIS'
::                      Nazwa powiązanego słownika SLU (pusty string, gdy niepowiązany)
                        ,'SLU'
::                      Ref SQL TPAR
                        ,'TPAR');
         1
      "),
      obj_fld('XJM',0),
      obj_meth('x',".XJM"),
      obj_meth('p',".p('T',_a)",1),
      obj_meth('p',"
         _i:=_ok:=0;
         _nr:=_b;
         _msg:={? _a='T'
               || 1
               || 0
               ?};
         {? .N>0
         || {!
            |? _i+=1;
               _ok:=(.P.NR[_i]=_nr);
               (_i<.N)&(~_ok)
            !}
         ?};
         {? _ok
         || .P.VAL[_i]
         || {? _msg
            || FUN.error('Odwołanie do nieistniejącego parametru p('+$_nr+').')
            ?};
            {? .SF=1
            || .show()
            ?};
            .ERR:=1;
            0
         ?}
      ",2,1),

         obj_meth('a', "
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Pobiera wartość atrybutu technologii o zadanej nazwie
::----------------------------------------------------------------------------------------------------------------------
         _wynik:=0;
         {? _=1 & type_of(_a)=type_of('str')
         || _val:=exec('get_value','tech_atr',.PREFIX,_a);
            {? _val<>~~
            || {? type_of(_val)=type_of(0)
               || _wynik:=_val
               ||  FUN.error('Funkcja a() — błędny typ atrybutu %1. Oczekiwany typ liczbowy.'@[_a]);
                  .ERR:=1;
                  .CZY_KOM:=0
               ?}
            || FUN.error('Funkcja a() — Technologia nie posiada atrybutu o nazwie %1.'@[_a]);
               .ERR:=1;
               .CZY_KOM:=0
            ?}
         ||
            FUN.error('Funkcja a() — błędna liczba lub typ parametrów.'@);
            .ERR:=1;
            .CZY_KOM:=0
         ?};
         _wynik
      "),

      obj_meth('loadp',"
::----------------------------------------------------------------------------------------------------------------------
::    DOST: PUBLIC
::     UTW: GALL ANONIM
::    OPIS: Zasila obiekt wartościami parametrów. O ile jest przypisany produkt .KTM, to parametry z niego,
::          jeśli nie ma .KTM to wartości domyślne
::      WE: [_a] - STRING[3] - ostatnie 3 znaki maski tabeli .TABLE w której szukać wartości
::----------------------------------------------------------------------------------------------------------------------
         _msk_suff:='';
         {? var_pres('_a')=type_of('')
         || _msk_suff:=_a
         ?};

         .TABLE.cntx_psh();
         {? _msk_suff<>''
         || _mask:=form((.TABLE.name()-3)+_msk_suff);
            .TABLE.use(_mask)
         ?};

         .TABLE.clear();
         .TABLE.index(.INDEX);
         .TABLE.prefix(.PREFIX);
         .N:=.TABLE.size();
         {? .TABLE.first()
         || {? .TABLE=TPAR
            || .XJM:=exec('FindAndGet','#table',TKTL,#.TABLE.NRK,ref_name(.TABLE.NRK),\"XJM\",0)
            |? .TABLE=KPAR
            || .XJM:=VAR.A_KTL().XJM
            ?};
            .P.NR:=obj_new(.N);
            .P.VAL:=obj_new(.N);
            .P.SLU:=obj_new(.N);
            .P.OPIS:=obj_new(.N);
            .P.TPAR:=obj_new(.N);
            _i:=0;

            TWPAR.cntx_psh();

::          Maska TWPAR musi odpowiadać masce TPAR
            {? .TABLE=TPAR
            || _msk_twpar:=form((TWPAR.name()-3)+(ref_name(.TABLE.ref())+3));
               {? TWPAR.name()<>_msk_twpar
               || TWPAR.use(_msk_twpar)
               ?}
            ?};

            TWPAR.index('KRPR');
            {!
            |?
               _i+=1;
               .P.NR[_i]:=.TABLE.NRP;

::             Ustawiam wartość domyślną refów TPAR
               .P.TPAR[_i]:='';
               .P.SLU[_i]:='';
               {? .TABLE=TPAR
               || {? .KTM<>null()
                  || TWPAR.prefix(.KTM,.TABLE.ref(),.TABLE.NRK);
                     {? TWPAR.first()
                     || .P.VAL[_i]:=TWPAR.VAL;
                        .P.TPAR[_i]:=$TWPAR.TPAR;
                        .P.SLU[_i]:=exec('FindAndGet','#table',TPAR,TWPAR.TPAR,,\"TPAR.SLU().NAZ\",'')
                     || .P.VAL[_i]:=0
                     ?}
                  || .P.VAL[_i]:=.TABLE.DEFAULT1
                  ?}
               || .P.VAL[_i]:=.TABLE.DEFAULT1;
                  {? KPAR.RTPAR<>''
                  || .P.TPAR[_i]:=KPAR.RTPAR;
                     .P.SLU[_i]:=exec('FindAndGet','#table',TPAR,KPAR.RTPAR,,\"TPAR.SLU().NAZ\",'')
                  ?}
               ?};
               .P.OPIS[_i]:=.TABLE.OPIS;
               .TABLE.next()&(_i<.N)
            !};
            TWPAR.cntx_pop();
            ~~
         || .XJM:=exec('FindAndGet','#table',TKTL,VAR.A_KTL,,\"XJM\",1)
         ?};
         .TABLE.cntx_pop();
         ~~
      "),

      obj_meth('mod_tra',"
::----------------------------------------------------------------------------------------------------------------------
::    DOST: PUBLIC
::     UTW: WH [12.41]
::    OPIS: Przelicza wartości parametrów uwzględniając translacje
::      WE: [_a] - TMAT.ref() - surowiec dla którego szukać translacji
::          [_b] - TCHMAT.ref() - zamiennik surowca dla którego szukać translacji
::          [_c] - obj_new - inny obiekt TPAr z którego czerpać wartości parametrów do przeliczenia
::          [_d] - STRING[3] - ostatnie 3 znaki maski TPARTRA w której szukać translacji,
::                             jeśli nie podane to używac bieżącej
::      WY: 0 - nie znaleziono zadnych translacji, nic nie przeliczono
::          1 - znaleziono translacje i wartości zostały przeliczone na podstawie translacji
::----------------------------------------------------------------------------------------------------------------------
         _tmat:=null();
         {? var_pres('_a')=type_of(TMAT.ref())
         || _tmat:=_a
         ?};

         _tchmat:=_b;
         {? var_pres('_b')=type_of(TCHMAT.ref())
         || _tchmat:=_b
         ?};

         {? _tmat=null() & _tchmat=null()
         || FUN.wdrerror('Błędne parametry metody mod_tra w obiekcie TPAr (tech_param.fml).');
            return(0)
         ?};

         {? var_pres('_c')>100
         || _tpar:=_c
         || _tpar:=.
         ?};

         _msk_trans:='';
         {? var_pres('_d')=type_of('')
         || _msk_trans:=_d
         ?};

         _result:=0;
         _can_continue:=1;

         TPARTRA.cntx_psh();

         {? _msk_trans<>''
         || _mask:=form((TPARTRA.name()-3)+_msk_trans);
            TPARTRA.use(_mask)
         ?};

         TPARTRA.index('SUR');
         {! _it:=1...N
         |! {? _tmat<>null()
            || TPARTRA.prefix(_tmat,null(),_it)
            |? _tchmat<>null()
            || TPARTRA.prefix(null(),_tchmat,_it)
            || _can_continue:=0
            ?};

            {? _can_continue>0 & TPARTRA.first()
            || .P.VAL[_it]:=_tpar.calc(TPARTRA.TRANS);
               _result:=1
            ?}
         !};
         TPARTRA.cntx_pop();
         _result
      "),


      obj_meth('reloadp',"
         {?.N>0
         || obj_del(.P.NR);
            obj_del(.P.VAL);
            obj_del(.P.SLU);
            obj_del(.P.OPIS);
            obj_del(.P.TPAR);
            .N:=0
         ?};
         .loadp()
      "),

      obj_meth('calc',".ERR:=0; {? _a='' || _a:='1' ?};($('{|_a|!'+_a+'|}'))(.me)"),

      obj_meth('chk',"
         _ok:=0;
: RS [2011] jesli _a zawiera wyrażenia zakazane to zostanie odrzucone
         {? exec('fparse','kalkulator',_a,'tpa')
         ||
            on_error(2);
            no_msg(1);
            _f:=.calc(_a);
            no_msg(0);
            {? (~in_error())&(~.ERR)
            || {?(type_of(_f)=1)
               || .RESULT:=_f;
                  _ok:=1
               || FUN.error('Błędny typ wyniku formuły.'@)
               ?}
            || {? .CZY_KOM
               || FUN.error('Błędna formuła.'@)
               ?};
               .CZY_KOM:=1
            ?};
            .ERR:=0;
            on_error()
         ?};
         _ok
      "),

      obj_meth('change',"
         {? var_pres('_a')=type_of('') || _header:=_a || _header:='Nagłówek'@ ?};
         {? var_pres('_b')=type_of('') || _label1:=_b || _label1:='' ?};
         {? var_pres('_c')=type_of('') || _value1:=_c || _value1:='' ?};
         {? var_pres('_d')=type_of('') || _label2:=_d || _label2:='' ?};
         {? var_pres('_e')=type_of('') || _value2:=_e || _value2:='' ?};
         {? var_pres('_f')=type_of('') || _label3:=_f || _label3:='' ?};
         {? var_pres('_g')=type_of('') || _value3:=_g || _value3:='' ?};
         _ok:=0;

         {? .N>0
         || _tab:='tab_tmp(1,
               ''H1'',''STRING[255]'','''',
               ''H2'',''STRING[255]'','''',
               ''H3'',''STRING[255]'',''''';
            {! _i:=1...N
            |! _tab+=',''P'+$.P.NR[_i]+''',''REAL'',''p('+$.P.NR[_i]+') — '+
               {? +.P.OPIS[_i]>50 || (47+.P.OPIS[_i])+'...' || (50+.P.OPIS[_i])?}+''''
            !};
::            {! _i:=1..250 |! _tab+=',''P'+$_i+''',''REAL'',''p('+$.P.NR[1]+') — '+.P.OPIS[1]+'''' !};
            _tab+=')';
            _tab:=($_tab)();
            _red:=_tab.mk_edit('Modyfikacja parametrów'@,0,'change');
            _height:=2;
            {? _header<>'' & (_value1<>'' | _value2<>'' | _value3<>'')
            || _tab.win_esep(_red,_header); _height+=1
            ?};
            {? _value1<>'' || _tab.win_efld(_red,,'H1',,,100,,1,_label1); _tab.H1:=_value1; _height+=1 ?};
            {? _value2<>'' || _tab.win_efld(_red,,'H2',,,100,,1,_label2); _tab.H2:=_value2; _height+=1 ?};
            {? _value3<>'' || _tab.win_efld(_red,,'H3',,,100,,1,_label3); _tab.H3:=_value3; _height+=1 ?};
            _tab.win_esep(_red,'Parametry'@);
            _ups:=60;
            {! _i:=1...N
            |!
               {? _i=_ups | _i=2*_ups+_height | _i=3*_ups+2*_height || _tab.win_ecol(_red) ?};
               ($('_a.P'+$.P.NR[_i]))(_tab):=.P.VAL[_i];
               _czy_slo:=.P.SLU[_i]<>'';
               _width:={? _czy_slo>0 || 18 || 21 ?};
               _tab.win_efld(_red,,'P'+$.P.NR[_i],,,_width,10,,,,.P.OPIS[_i],,'F3_button='+$_czy_slo);
               {? _czy_slo=0
               || _f3:=\"\"
               || _f3:=\"
                     params_set(params_get());
                     _tab:=params_get().tab;
                     _val:=fld();
                     _nr:=1-cur_afld();
                     _lp:=0;
                     _it:=1;
                     {!
                     |?
                        {? _nr=$_tab.P.NR[_it]
                        || _lp:=_it
                        ?};
                        _it+=1;
                        _lp=0 & _it<=_tab.N
                     !};
::                     _slu:=($('_a.SLU['+_nr+']'))(_tab.P);
                     _slu:=_tab.P.SLU[_lp];
                     SLO.cntx_psh();
                     SLO.index('SL_NAZ');
                     SLO.prefix(_slu,);
                     {? SLO.first()
                     || SLO.SLU();
                        SLO.win_sel('ONE_SEL');
                        SLO.hdr_sel();
                        SLO.hdr_sel('Wybór parametru'@);
                        {? SLO.select()
                        || _new_val:=exec('str2real','#convert',SLO.KOD);
                           {? SLO.KOD*exec('to_string','#convert',_new_val)>0
                           || _val:=_new_val
                           || _val:=~~;
                              FUN.emsg('Nie udało się ustalić wartości parametru na podstawie wybranej pozycji słownika.'@)
                           ?}
                        ?}
                     || FUN.info('Brak zdefiniowanych elementów słownika.'@)
                     ?};
                     SLO.cntx_pop();
                     _val
                  \"
               ?};
               _tab.fld_fml('P'+$.P.NR[_i],'F3',_f3);
               {? _czy_slo=0
               || _ae:=\"\"
               || _ae:=\"
                     params_set(params_get());
                     _tab:=params_get().tab;
                     _res:=1;
                     _nr:=1-cur_afld();
                     _lp:=0;
                     _it:=1;
                     {!
                     |?
                        {? _nr=$_tab.P.NR[_it]
                        || _lp:=_it
                        ?};
                        _it+=1;
                        _lp=0 & _it<=_tab.N
                     !};
                     _slu:=_tab.P.SLU[_lp];
::                   Sprawdzenie czy słownik posiada pozycję słownika (kod) o podanej wartości
                     _value:=($('_a.P'+_nr))(cur_tab(1,1));
                     _kod:=exec('to_string','#convert',_value);
                     SLO.cntx_psh();
                     SLO.index('SL_NAZ');
                     SLO.prefix(_slu,);
                     {? SLO.find_tab('first','KOD',,'like','%'+_kod+'%')
                     || _jest:=0;
                        {!
                        |?
                           {? exec('str2real','#convert',SLO.KOD)=_value
                           || _jest:=1
                           ?};
                           _jest=0 & SLO.find_tab('next','KOD',,'like','%'+_kod+'%')
                        !};
                        {? _jest=0
                        || _res:=0
                        ?}
                     || _res:=0
                     ?};
                     SLO.cntx_pop();
                     {? _res=0
                     || FUN.info('Nie znaleziono elementu słownika o podanej wartości.'@)
                     ?};
                     _res
                  \"
               ?};
               _tab.fld_fml('P'+$.P.NR[_i],'AFTER_EDIT',_ae)

::            {! _i:=1..250
::            |! {? _i=_ups | _i=2*_ups+_height | _i=3*_ups+2*_height || _tab.win_ecol(_red) ?};
::               _tab.win_efld(_red,,'P'+$_i,,,21,10); ($('_a.P'+$.P.NR[1]))(_tab):=.P.VAL[1]
            !};
            _tab.win_ebtn(_red,'text=%1'['Zapisz'@],\"'key:F2'\");
            _tab.win_ebtn(_red,'text=%1'['Anuluj'@],\"'key:Esc'\");
            _tab.win_edit(_red);
            params_set('tab',.);
            {? _tab.edit()
            || {! _i:=1...N |! .P.VAL[_i]:=($('_a.P'+$.P.NR[_i]))(_tab) !};
               _ok:=1
            ?}
         ?};
         _ok
      "),

      obj_meth('show',"
         {?.N>0
         || undefine();
            define('LABEL2',~~);
            {! _i:=1...N |! define('TPAR'+$_i,.P.VAL[_i],'p('+$.P.NR[_i]+') — '+
               {? +.P.OPIS[_i]>50 || (47+.P.OPIS[_i])+'...' || (50+.P.OPIS[_i])?},
               {? +.P.OPIS[_i]>50 || '...'+(47-.P.OPIS[_i]) || (50-.P.OPIS[_i])?},,21,10) !};
            define('LABEL3',~~);
            def_disp('Dostępne parametry'@);
            undefine()
         || FUN.info('Do karty nie zdefiniowano parametrów.'@)
         ?};
         1
      "),

      obj_meth('set',"
         _i:=0;_ok:=0;
         {? .N>0
         || {!
            |? _i+=1;
               _ok:=(.P.NR[_i]=_a);
               (_i<.N)&(~_ok)
            !}
         ?};
         {? _ok
         || .P.VAL[_i]:=_b
         || 0
         ?}
      "),

      obj_meth('save',"
      _tab_acr:=_a;
      _tab:=($_a)();
      _fld:=_b;
      _val:=_c;

      _can_continue:=1;
      _result:=0;

      {? _tab_acr='KPAR'
      || _tab.index('KN')
      || _tab.index('NN')
      ?};

      {! _it:=1...N
      |? _can_continue>0
      |!
         _tab.prefix(_val,.P.NR[_it]);
         {? _tab.first()
         ||
::          Jest już taki parametr więc go tylko uaktualniam
            _tab.NRP:=.P.NR[_it];
            _tab.OPIS:=.P.OPIS[_it];
            _tab.DEFAULT1:=.P.VAL[_it];
            _can_continue:=_tab.put()
         ||
::          Nie ma takiego parametru więc zakładam nowy

::          Przypisuje polu tabeli wartość wg której jest robiony prefiks
            ($(_tab_acr+'.'+_fld))():=_val;

::          Uzupełniam pozostałe pola
            _tab.NRP:=.P.NR[_it];
            _tab.OPIS:=.P.OPIS[_it];
            _tab.DEFAULT1:=.P.VAL[_it];
            {? _tab_acr='KPAR'
            || _tab.RTPAR:=.P.TPAR[_it]
            ?};
            _can_continue:=_tab.add()
         ?}
      !};

      {? _can_continue>0
      || _result:=1
      ?};
      _result

      ")
   )
?};
~~


\start_tpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: odpalenie obiektu dla karty technologicznej
::   WE: _a - M.ref()
::       [_b]- TKTL.ref() - karta technologiczna której ładować parametry
::  OLD: \start_tpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('tpar',@)>0 || obj_del(tpar) ?};
_tktl:={? _>1 & type_of(_b)=7 || _b || VAR.A_KTL ?};
tpar:=obj_new(@.CLASS.TPAr,_a);
tpar.TABLE:=TPAR;
tpar.INDEX:='NN';
tpar.PREFIX:=_tktl;
tpar.loadp();
~~


\stop_tpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: kasowanie obiektu dla karty technologicznej
::  OLD: \stop_tpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('tpar',@)>0 || obj_del(tpar) ?};
~~


\F3_TPAR
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Formuła na F3 przy redagowaniu formuł z parametrami
::  OLD: \F3_TPAR/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
:: Blokada sprawdzana po cichu...
_locked:=exec('tktl_lock','tech_common',#VAR.A_KTL,'P',1);
_used:=~_locked;
params_set('used',_used);

_fld:=fld();
_oldpos:=get_cpos()-1;
TPAR.clear();
TPAR.index('NN');
TPAR.prefix(VAR.A_KTL);
_wer:='WER3_'+VAR.A_KTL().TORW;
TPAR.win_sel(_wer);
::TPAR.win_edit('');
TPAR.first();
{? TKTL.STAT_P='T' | TKTL.ARCH='T' | _used
|| TPAR.actions(_wer,'dpu:d','',1)
|| TPAR.actions(_wer,'','W:d',1)
?};
{? TPAR.select()
|| _x:='p('+($TPAR.NRP)+')';
   fld((_oldpos+_fld)+_x+(_oldpos-_fld));
   set_cpos(_oldpos+(+_x)+1);
   0
?};
exec('zmiana_wartosci','tech_param');
exec('reload_tparw','tech_param');

{? _locked || exec('tktl_unlock','tech_common',#VAR.A_KTL,'P') ?};
1


\reload_tparw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Przeładowanie parametrów bieżącej karty technologicznej
::  OLD: \reload_tparw/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TKTLW.cntx_psh();
TKTLW.index('TP');
TKTLW.prefix(VAR.A_KTL);
{? TKTLW.first()
|| {!
   |? TWPAR.index('TPR');
      TPAR.index('NN');
      TPAR.prefix(VAR.A_KTL);
      {? TPAR.first()
      || {!
         |? TWPAR.prefix(TKTLW.ref(),TPAR.ref());
            {? TWPAR.first() & VAR.A_KTL().KTM=TKTLW.KTM
            || TWPAR.VAL:=TPAR.DEFAULT1;
               TWPAR.put()
            || TWPAR.blank();
               TWPAR.TKTLW:=TKTLW.ref();
               TWPAR.KTM:=TKTLW.KTM;
               TWPAR.TPAR:=TPAR.ref();
               TWPAR.VAL:=TPAR.DEFAULT1;
               TWPAR.add(1)
            ?};
            TPAR.next()
         !}
      ?};
      TKTLW.next()
   !}
?};
TKTLW.cntx_pop();
~~


\zmiana_wartosci
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: sprawdza czy zmieniły się wartości
::  OLD: \zmiana_wartosci/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TPAR.clear();
TPAR.index('NN');
TPAR.prefix(VAR.A_KTL);
_tpar_n:='#';
{! _i:=1..tpar.N |! _tpar_n+=$tpar.P[1][_i]+'#'!};
_reload:=0;
_recalc:=0;
_Tpar_n:='#';
{? TPAR.first()
|| _sf:=tpar.SF;
   tpar.SF:=0;
   {!
   |? _Tpar_n+=$TPAR.NRP+'#';
      _tparp:=tpar.p('N',TPAR.NRP);
      {? (tpar.ERR=0) || {? _tparp<>TPAR.DEFAULT1 || _recalc:=1 ?}
                      || _reload:=1?};
      TPAR.next()
   !};
   tpar.SF:=_sf
?};
{? _tpar_n<>_Tpar_n || _reload:=1?};
{? _recalc
|| tpar.reloadp();
   exec('recalculate','tech_param',VAR.A_KTL)
|| {? _reload || tpar.reloadp() ?}
?};
(_recalc)+(_reload*10)


\recalculate
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: GALL ANONIM pod redakcja WH [1.0]
:: OPIS: Przelicza całą kartę technologiczną - wylicza nowe normy i czasy na podstawie wartości parametrów
::       KONTEKST - powołany i załadowany obiekt tpar klasy @.CLASS.TPAr
::       _a - TKTL.ref() - karta technologiczna którą przeliczyć
::  OLD: \recalculate/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
:: Tutaj należy zamieścic wszystkie przypadki gdzie dany parametr może być używany
_nrk:=_a;
TMAT.cntx_psh();
TMAT.clear();
TMAT.index('NL');
TMAT.prefix(_nrk);
{? TMAT.first()
|| {!
   |?
      _put:=0;
      {? TMAT.FORMB<>''
      || TMAT.WARB:=tpar.calc(TMAT.FORMB)$exec('round_abe','tech_mater',TMAT,1);
         _put:=1
      ?};
      {? TMAT.FORMN<>''
      || TMAT.WARN:=tpar.calc(TMAT.FORMN)$exec('round_abe','tech_mater',TMAT,1);
         _put:=1
      ?};
      {? TMAT.DFORMB<>''
      || TMAT.DWARB:=tpar.calc(TMAT.DFORMB)$exec('round_abe','tech_mater',TMAT,0);
         _put:=1
      ?};
      {? TMAT.DFORMN<>''
      || TMAT.DWARN:=tpar.calc(TMAT.DFORMN)$exec('round_abe','tech_mater',TMAT,0);
         _put:=1
      ?};
      {? _put
      || TMAT.put()
      ?};
      TMAT.next()
   !}
?};
TMAT.cntx_pop();

TCHMAT.cntx_psh();
TCHMAT.clear();
TCHMAT.index('NSL');
TCHMAT.prefix(_nrk);
{? TCHMAT.first()
|| {!
   |? _put:=0;
      {? TCHMAT.FORMB<>''
      || TCHMAT.WARB:=tpar.calc(TCHMAT.FORMB)$exec('round_abe','tech_mater',TCHMAT,1);
         _put:=1
      ?};
      {? TCHMAT.FORMN<>''
      || TCHMAT.WARN:=tpar.calc(TCHMAT.FORMN)$exec('round_abe','tech_mater',TCHMAT,1);
         _put:=1
      ?};
      {? TCHMAT.DFORMB<>''
      || TCHMAT.DWARB:=tpar.calc(TCHMAT.DFORMB)$exec('round_abe','tech_mater',TCHMAT,1);
         _put:=1
      ?};
      {? TCHMAT.DFORMN<>''
      || TCHMAT.DWARN:=tpar.calc(TCHMAT.DFORMN)$exec('round_abe','tech_mater',TCHMAT,1);
         _put:=1
      ?};
      {? _put
      || TCHMAT.put()
      ?};
      TCHMAT.next()
  !}
?};
TCHMAT.cntx_pop();

TOPER.cntx_psh();
TOPER.clear();
TOPER.index('NNN');
TOPER.prefix(_nrk);
{? TOPER.first()
|| {!
   |? _put:=0;
      {? TOPER.FCOEF<>''
      || TOPER.COEF:=tpar.calc(TOPER.FCOEF);
         _put:=1
      ?};
      {? TOPER.FNTIME<>''
      || TOPER.NTIME:=tpar.calc(TOPER.FNTIME);
         _put:=1
      ?};
      {? TOPER.FCOEF<>'' | TOPER.FNTIME<>''
      || {? TOPER.TPZ='T'
         || TOPER.PLNH:=(TOPER.COEF*TOPER.KH)$4;
            TOPER.PLNX:=(TOPER.PLNH*TOPER.NTIME)$4
         || TOPER.PLNH:=(TOPER.COEF*TOPER.OPER().STAWKA)$4;
            TOPER.PLNX:=(TOPER.PLNH*TOPER.NTIME)$4
         ?}
      ?};
      {? TOPER.FCENA<>''
      || TOPER.CENA:=tpar.calc(TOPER.FCENA);
         _put:=1
      ?};
      {? TOPER.FMTIME<>''
      || TOPER.MTIME:=tpar.calc(TOPER.FMTIME);
         TOPER.KX:=(TOPER.KH*TOPER.MTIME)$4;
         _put:=1
      ?};
      {? TOPER.FNKO<>''
      || TOPER.NKO:=tpar.calc(TOPER.FNKO);
         _put:=1
      ?};
      {? TOPER.FTTM<>''
      || TOPER.TTM:=tpar.calc(TOPER.FTTM);
         _put:=1
      ?};
      {? _put
      || TOPER.put()
      ?};
      TOPER.next()
   !}
?};
TOPER.cntx_pop();

TECHZAMS.index('TTL');
TECHZAMS.prefix(_nrk);
{? TECHZAMS.first()
|| {!
   |? _put:=0;
      {? TECHZAMS.FCOEF<>''
      || TECHZAMS.COEF:=tpar.calc(TECHZAMS.FCOEF);
         _put:=1
      ?};
      {? TECHZAMS.FNTIME<>''
      || TECHZAMS.NTIME:=tpar.calc(TECHZAMS.FNTIME);
         _put:=1
      ?};
      {? TECHZAMS.FCOEF<>'' | TECHZAMS.FNTIME<>''
      || TECHZAMS.PLNX:=(TECHZAMS.PLNH*TECHZAMS.NTIME)$4
      ?};
      {? TECHZAMS.FMTIME<>''
      || TECHZAMS.MTIME:=tpar.calc(TECHZAMS.FMTIME);
         TECHZAMS.KX:=(TECHZAMS.KH*TECHZAMS.MTIME)$4;
         _put:=1
      ?};
      {? TECHZAMS.FNKO<>''
      || TECHZAMS.NKO:=tpar.calc(TECHZAMS.FNKO);
         _put:=1
      ?};
      {? TECHZAMS.FTTM<>''
      || TECHZAMS.TTM:=tpar.calc(TECHZAMS.FTTM);
         _put:=1
      ?};
      {? _put
      || TECHZAMS.put()
      ?};
      TECHZAMS.next()
   !}
?};

TACTTLS.cntx_psh();
TACTTLS.clear();
TACTTLS.index('KNROP');
TACTTLS.prefix(_nrk);
{? TACTTLS.first()
|| {!
   |? _put:=0;
      {? TACTTLS.FILE<>''
      || TACTTLS.ILE:=tpar.calc(TACTTLS.FILE);
          _put:=1
      ?};
      {? TACTTLS.FZXJM<>''
      || TACTTLS.ZXJM:=tpar.calc(TACTTLS.FZXJM);
         _put:=1
      ?};
      {? TACTTLS.FZH<>''
      || TACTTLS.ZH:=tpar.calc(TACTTLS.FZH);
         _put:=1
      ?};
      {? _put
      || TACTTLS.put()
      ?};
      TACTTLS.next()
   !}
?};
TACTTLS.cntx_pop();
1


\tpar_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [2010]
:: OPIS: Po redakcji parametru karty tech
::   WY: 0 / 1
::  OLD: \tpar_chk/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
{? chk_fld()
|| tpar.chk(fld())
|| 0
?}


\TPAR_kasuj
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: kasuje wszystkie parametry karty
::   WE: TKTL.ref()
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \TPAR/tkasuj.fml
::----------------------------------------------------------------------------------------------------------------------
_tktl:=_a;

_result:=0;
_can_continue:=1;

TPAR.clear();
TPAR.index('NN');
TPAR.prefix(_tktl);
{? TPAR.first()
||
   {!
   |?
::    Najpierw usuwam rekordy z tabeli translacji parametrów
      _can_continue:=exec('TPARTRA_kasuj','tech_param',TPAR.ref());
      {? _can_continue>0
      || _can_continue:=TPAR.del(,1)
      ?};
      TPAR.first() & _can_continue>0
   !}
?};
{? _can_continue>0
|| _result:=1
?};
_result


\TPARTRA_kasuj
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Usuwa translacje parametrów
::   WE: _a - TPAR.ref()
::   WY: 0 - porażka
::       1 - sukces
::  OLD: \TPARTRA/tkasuj.fml
::----------------------------------------------------------------------------------------------------------------------
_tpar:=_a;

_result:=0;
_can_continue:=1;

TPARTRA.cntx_psh();
TPARTRA.index('TPAR');
TPARTRA.prefix($_tpar);
{? TPARTRA.first()
|| {!
   |? _can_continue:=TPARTRA.del(,1);
      TPARTRA.first() & _can_continue>0
   !}
?};
TPARTRA.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\trpardol
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Dołączenie tabeli translacji parametrów do bieżącego surowca - właściwa akcja
::  OLD: \trpardol/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_ktm:={? TMAT.GRKTM='G'
      || TMAT.TGDFLT().PT
      || TMAT.PT
      ?};
TWPAR.cntx_psh();
TWPAR.clear();
TWPAR.index('TRPR');
TWPAR.prefix(TMAT.KTL);
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(TMAT.ref());
{? TWPAR.first()
|| {!
   |? {? TWPAR.KTM=_ktm
      || TPARTRA.TRANS:=form(TWPAR.VAL,,,'9.');
         TPARTRA.SUR:=TMAT.ref();
         TPARTRA.ZAM:=null();
         TPARTRA.PAR:=TWPAR.TPAR;
         TPARTRA.add()
      ?};
      TWPAR.next()
   !}
?};
TWPAR.cntx_pop();
{? TPARTRA.first()
|| _wer:='WER_'+TMAT.NRK().TORW;
   TPARTRA.win_sel(_wer);
   TPARTRA.actions(_wer,'');
   TPARTRA.hdr_sel();
   TPARTRA.select()
?};
~~


\tparpop
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Poprawienie tabeli translacji parametrów do bieżącego surowca
::  OLD: \tparpop/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(TMAT.ref());
{? params_get().env_mater.fields.KTLMAT<>TMAT.KTL
|| {? TPARTRA.first() || {! |? TPARTRA.del() !} ?};
   exec('trpardol','tech_param')
|| {? TPARTRA.first()
   || _wer:='WER_'+TMAT.NRK().TORW;
      TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'');
      TPARTRA.hdr_sel();
      TPARTRA.select()
   ?}
?}


\usuntpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Usunięcie tabeli translacji parametrów do bieżącego surowca
::  OLD: \usuntpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(TMAT.ref());
{? TPARTRA.first()
|| {! |? TPARTRA.del() !}
?};
1


\usuntchpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Usunięcie tabeli translacji parametrów do bieżącego zamiennika surowca
::  OLD: \usuntchpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(null(),TCHMAT.ref());
{? TPARTRA.first()
|| {! |? TPARTRA.del() !}
?};
1


\tchpardol
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Dołączenie tabeli translacji parametrów do bieżącego zamiennika surowca
::  OLD: \tchpardol/tex_tmar.fml
::----------------------------------------------------------------------------------------------------------------------
_ktm:={? TCHMAT.GRKTM='G'
      || TCHMAT.TGDFLT().PT
      || TCHMAT.PT
      ?};
TWPAR.cntx_psh();
TWPAR.clear();
TWPAR.index('TRPR');
TWPAR.prefix(TCHMAT.KTL);
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(null(),TCHMAT.ref());
{? TWPAR.first()
|| {!
   |? {? TWPAR.KTM=_ktm
      || TPARTRA.TRANS:=form(TWPAR.VAL,,,'9.');
         TPARTRA.SUR:=null();
         TPARTRA.ZAM:=TCHMAT.ref();
         TPARTRA.PAR:=TWPAR.TPAR;
         TPARTRA.add()
      ?};
      TWPAR.next()
   !}
?};
TWPAR.cntx_pop();
{? TPARTRA.first()
|| _wer:='WER_'+TCHMAT.NRK().TORW;
   TPARTRA.win_sel(_wer);
   TPARTRA.actions(_wer,'');
   TPARTRA.hdr_sel();
   TPARTRA.select()
?};
~~


\tchparpop
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Poprawianie tabeli translacji parametrów do bieżącego zamiennika surowca
::  OLD: \tchparpop/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TPARTRA.clear();
TPARTRA.index('SUR');
TPARTRA.prefix(null(),TCHMAT.ref());
{? params_get().env_mater.fields.KTLMAT<>TCHMAT.KTL
|| {? TPARTRA.first() || {! |? TPARTRA.del() !} ?};
   exec('tchpardol','tech_param')
|| {? TPARTRA.first()
   || _wer:='WER_'+TCHMAT.NRK().TORW;
      TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'');
      TPARTRA.hdr_sel();
      TPARTRA.select()
   ?}
?}


\show_tmattpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Podgląd tabeli translacji parametrów dla bieżącego surowca
::  OLD: \show_tmattpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? TMAT.KTL<>null() | TMAT.DFLT_KTL='T'
|| TPAR.cntx_psh();
   TPARTRA.index('SUR');
   TPARTRA.prefix(TMAT.ref());
   _wer:='WER_'+TKTL.TORW;
   {? TPARTRA.first() & TKTL.STAT_S='N' & ~params_get().env_mater.used & TKTL.ARCH='N'
   || TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'');
      TPARTRA.hdr_sel()
   || TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'P');
      TPARTRA.hdr_sel();
      TPARTRA.hdr_sel(' — '+'PODGLĄD'@)
   ?};
   TPARTRA.select();
   TPARTRA.hdr_sel();
   TPAR.cntx_pop()
|? TMAT.RKTL<>''
|| FUN.info('Surowiec używa archiwalnej karty technologicznej — nie można podejrzeć jego parametrów.'@)
|| FUN.info('Surowiec nie posiada karty technologicznej, więc nie są przypisane do niego parametry.'@)
?};
~~


\show_tchmtpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Wyświetlenie tabeli translacji parametrów do bieżącego zamiennika surowca
::  OLD: \show_tchmtpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? TCHMAT.KTL<>null()
|| TPAR.cntx_psh();
   TPARTRA.index('SUR');
   TPARTRA.prefix(null(),TCHMAT.ref());
   _wer:='WER_'+TKTL.TORW;
   {? TPARTRA.first() & TKTL.STAT_S='N' & ~params_get().env_mater.used & TKTL.ARCH='N'
   || TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'');
      TPARTRA.hdr_sel()
   || TPARTRA.win_sel(_wer);
      TPARTRA.actions(_wer,'P');
      TPARTRA.hdr_sel();
      TPARTRA.hdr_sel(' — '+'PODGLĄD'@)
   ?};
   TPARTRA.select();
   TPARTRA.hdr_sel();
   TPAR.cntx_pop()
|? TCHMAT.RKTL<>''
|| FUN.info('Zamiennik używa archiwalnej karty tehnologicznej — nie można podejrzeć jego parametrów.'@)
|| FUN.info('Zamiennik nie posiada karty technologicznej, więc nie są przypisane do niego parametry.'@)
?};
~~


\show_tpart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.50]
:: OPIS: wyświetla parametry do karty technologicznej
::   WE: _a - TKTL.ref()
::       [_b] - karta używana na wyższym poziomie wywołania
::  OLD: \show_tpart/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
_tktl:=_a;
_used:={? var_pres('_b')=type_of(0) || _b || 0 ?};

TKTL.cntx_psh();
TKTL.prefix();
{? TKTL.seek(_tktl)
||
   _locked:=exec('tktl_lock','tech_common',,'P');
   _used:=_used | ~_locked;
   params_set('used',_used);

   VAR.A_KTL:=TKTL.ref();
   exec('menu_start','tech_head');

   TPAR.clear();
   TPAR.index('NN');
   TPAR.prefix(VAR.A_KTL);
   _polfabr_def:=exec('chk_polfabr_def','tech_mater',VAR.A_KTL,TMAT);
   {? _polfabr_def=''
   || _polfabr_def:=exec('chk_polfabr_def','tech_mater',VAR.A_KTL,TCHMAT)
   ?};
   {? _used | TKTL.STAT_N='N' & TKTL.TORW<>'Z' | TKTL.STAT_P='T' | VAR.ACTION='3' | _polfabr_def<>''
   || _hide:='dpu:d';
      _default:='R';
      _tail:=' — PODGLĄD';
      _reload:=0
   || _hide:='';
      _default:='d:d';
      _tail:='';
      _reload:=1
   ?};
   _wer:='WER_'+TKTL.TORW;
   TPAR.actions(_wer,_hide,_default);
   TPAR.win_sel(_wer);
::   TPAR.win_edit('');
   TPAR.hdr_sel();
   TPAR.hdr_sel(_tail);
   TPAR.select();
   TPAR.hdr_sel();
   {? _reload
   || exec('reload_tparw','tech_param');
      {? exec('zmiana_wartosci','tech_param')
      || tpar.reloadp();
         exec('recalculate','tech_param',VAR.A_KTL)
      || tpar.reloadp()
      ?}
   ?};

   exec('menu_stop','tech_head');

   exec('tktl_unlock','tech_common',,'P')
?};
TKTL.cntx_pop();
''


\blank_tpar_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Wartośc początkowa pola TPAR.NRP
::  OLD: \blank_tpar_nr/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
TPAR.cntx_psh();
TPAR.index('NN');
TPAR.prefix(TPAR.NRK);
{? TPAR.last()
|| _res:=TPAR.NRP+1
|| _res:=1
?};
TPAR.cntx_pop();
_res


\twpar_dol_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Przed dołącz
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_result:=1;

:: Sprawdzam czy nie przekroczyłem maksymalnej liczby parametrów na karcie
TPAR.cntx_psh();
TPAR.index('NN');
TPAR.prefix(TKTL.ref());
{? TPAR.size()>=250
|| FUN.emsg('Przekroczono maksymalną liczbę 250 parametrów dla jednej karty technologicznej. Dołączanie niemożliwe.'@);
   _result:=0
?};
TPAR.cntx_pop();
exec('tpar_efld_opt','tech_param',1);
_result


\twpar_dol_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Dołączenie produktów do parametrów (po Dolącz w oknie parametrów karty)
::  OLD: \twpar_dol/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
::exec('reload_tparw','tech_param');
exec('twpar','tech_param');
0


\tpar_del
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Sprawdza czy można usunąć dany parametr karty
::       Tutaj należy zamieścić wszystkie przypadki gdzie dany parametr może być używany
::  OLD: \tpar_del/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
_torw:=VAR.A_KTL().TORW;

{? TPAR.sel_size()=0
|| KOMM.init(,,{? _torw='W' || 'Usuwanie parametru wzorca technologii'@ || 'Usuwanie parametru karty technologicznej'@ ?},'')
?};

_nrk:=TPAR.NRK;
_nrp:=TPAR.NRP;
:: scieżka jak trafić do formuły w której wystąpił parametr
_way:='';
_pstr:='p('+$_nrp+')'; 'tego szukamy :)';
:: parametr może być usunięty
_ok:=1;

_main:=
   {? _torw='W'
   || 'Parametr %1 (%2) jest używany we wzorcu technologii — usunięcie nie jest możliwe.'@[$TPAR.NRP,TPAR.OPIS]
   || 'Parametr %1 (%2) jest używany w karcie technologicznej — usunięcie nie jest możliwe.'@[$TPAR.NRP,TPAR.OPIS]
   ?};
KOMM.sect_beg(_main,3);

:: dla tabeli TMAT
_ok_tmat:=1;
_tmat:=KOMM.sect_beg('Surowce:'@,71);
TMAT.cntx_psh();
TMAT.index('NL'); "<- (*)";
TMAT.prefix(_nrk);
{? TMAT.first()
|| {!
   |? _str:=(TMAT.FORMN+'#'+TMAT.FORMB+'#'+TMAT.EXIST+'#'+TMAT.DFORMN+'#'+TMAT.DFORMB);
      _ok1:=(_str*_pstr=0);
      {? (_ok1<>0 & TMAT.KTL<>null())
      || TPARTRA.cntx_psh();
         TPARTRA.clear();
         TPARTRA.index('SUR');
         TPARTRA.prefix(TMAT.ref());
         {? TPARTRA.first()
         || {!
            |? {? _ok1<>0 || _ok1:=(TPARTRA.TRANS*_pstr=0) ?};
               TPARTRA.next()
            !}
         ?};
         TPARTRA.cntx_pop()
      ?};
      {? _ok1=0 || KOMM.add(exec('get_src_way','tech_mater',TMAT.ref()),76) ?};
      _ok_tmat:=_ok_tmat*_ok1;
      _ok:=_ok*_ok1;
      TMAT.next()
   !}
?};
TMAT.cntx_pop();

:: dla tabeli TCHMAT
TCHMAT.cntx_psh();
TCHMAT.index('NSL'); "<- (*)";
TCHMAT.prefix(_nrk);
{? TCHMAT.first()
|| {!
   |? _str:=(TCHMAT.FORMN+'#'+TCHMAT.FORMB+'#'+TCHMAT.EXIST+'#'+TCHMAT.DFORMN+'#'+TCHMAT.DFORMB);
      _ok1:=(_str*_pstr=0);
      {? (_ok1<>0 & TCHMAT.KTL<>null)
      || TPARTRA.cntx_psh();
         TPARTRA.clear();
         TPARTRA.index('SUR');
         TPARTRA.prefix(null(),TCHMAT.ref());
         {? TPARTRA.first()
         || {!
            |? {? _ok1<>0 || _ok1:=(TPARTRA.TRANS*_pstr=0) ?};
               TPARTRA.next()
            !}
         ?};
         TPARTRA.cntx_pop()
      ?};
      {? _ok1=0 || KOMM.add(exec('get_chm_way','tech_mater',TCHMAT.ref()),76) ?};
      _ok_tmat:=_ok_tmat*_ok1;
      _ok:=_ok*_ok1;
      TCHMAT.next()
   !}
?};
TCHMAT.cntx_pop();
KOMM.sect_end();
{? _ok_tmat || KOMM.del(_tmat) ?};

:: dla tabeli TOPER
_ok_toper:=1;
_toper:='Operacje:'@;
KOMM.sect_beg(_toper,33);
TECHZAMS.cntx_psh(); TOPER.cntx_psh();
TOPER.index('NNN'); "<- (*)";
TOPER.prefix(_nrk);
{? TOPER.first()
|| {!
   |? _str:=(TOPER.FNTIME+'#'+TOPER.FCOEF+'#'+TOPER.EXIST+'#'+TOPER.FCENA+'#'+TOPER.FMTIME);
      _ok1:=(_str*_pstr=0);
      {? _ok1=0 || KOMM.add('Operacja: %1'@[exec('get_oper_nr','tech_oper',TOPER.UNROP)],76) ?};
      _ok_toper:=_ok_toper*_ok1;
      _ok:=_ok*_ok1;
      TOPER.next()
   !}
?};

:: dla tabeli TECHZAMS
TECHZAMS.index('TTL');
TECHZAMS.prefix(_nrk);
{? TECHZAMS.first()
|| {!
   |? _str:=(TECHZAMS.FCOEF+'#'+TECHZAMS.FMTIME+'#'+TECHZAMS.FNKO+'#'+TECHZAMS.FNTIME+'#'+TECHZAMS.FTTM);
      _ok1:=(_str*_pstr=0);
      {? _ok1=0 || KOMM.add('Zamiennik stanowiska operacji: %1'@[exec('get_oper_nr','tech_oper',TECHZAMS.TOPER().UNROP)],76) ?};
      _ok_toper:=_ok_toper*_ok1;
      _ok:=_ok*_ok1;
      TECHZAMS.next()
   !}
?};
TECHZAMS.cntx_pop(); TOPER.cntx_pop();
KOMM.sect_end();
{? _ok_toper || KOMM.del(_toper) ?};

:: dla tabeli TACTTLS
_ok_tactt:=1;
_tactt:='N-P-U:'@;
KOMM.sect_beg(_tactt,42);
TACTTLS.cntx_psh();
TACTTLS.index('KNROP'); "<- (*)";
TACTTLS.prefix(_nrk);
{? TACTTLS.first()
|| {!
   |? _str:=(TACTTLS.FILE+'#'+TACTTLS.FZXJM+'#'+TACTTLS.FZH+'#'+TACTTLS.EXIST);
      _ok1:=(_str*_pstr=0);
      {? _ok1=0 || KOMM.add(exec('get_util_way','tech_tool',TACTTLS.ref()),76) ?};
      _ok_tactt:=_ok_tactt*_ok1;
      _ok:=_ok*_ok1;
      TACTTLS.next()
   !}
?};
TACTTLS.cntx_pop();
KOMM.sect_end();
{? _ok_tactt || KOMM.del(_tactt) ?};

{? _ok || KOMM.del(_main) ?};

{? TPAR.sel_size()=0
|| {? ~_ok
   || KOMM.select(,,,,,,0);
      return(_ok)
   ?}
?};

TWPAR.index('TRPR');
TWPAR.prefix(_nrk,_nrp);
{? TWPAR.first()
|| _wyb:=FUN.ask('Parametr %1 (%2)jest używany w produktach karty technologicznej.\nCzy usunąć te powiązania?'@
                 [$TPAR.NRP,TPAR.OPIS]);
   {? _wyb
   || {! |? TWPAR.del() !};
      _ok:=1
   || _ok:=0
   ?};
   return(_ok)
?};
_ok


\tpar_del_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed usunięciem parametrów - akcja dla grupy rekordów
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? FUN.ask('Czy usunąć zaznaczone wiersze?'@)
|| _res:=1;
   VAR.GRUPA:='T';
   _torw:=VAR.A_KTL().TORW;
   KOMM.init(,,
      {? _torw='W' || 'Usuwanie parametrów wzorca technologii'@ || 'Usuwanie parametrów karty technologicznej'@ ?},'')
?};
_res


\tpar_del_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po usunięciu parametrów - akcja dla grupy rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select()


\tpar_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Usuń w oknach tabeli TPAR
::----------------------------------------------------------------------------------------------------------------------
{? exec('tpar_del','tech_param')
|| {? VAR.GRUPA='T' | FUN.ask('Czy usunąć bieżący wiersz?'@)
   || _ref:=$TPAR.ref();
      {? TPAR.del(,1)
      || exec('tpar_del_after','tech_param',_ref)
      ?}
   ?}
?};
~~


\twpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.50]
:: OPIS: Wartości domyślne dla parametru - produkty karty
::       KONTEKST: rekord TPAR
::   WE: [_a] - pokazuje wszystkie rekordy (1), czy tylko jak powyzej 1 (domyslnie = 0)
::  OLD: \twpar/tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<1 || _all:=0 || _all:=_a ?};

_params:=params_get();
_used:={? var_pres('used',_params)=type_of(0) || _params.used || 1 ?};

exec('reload_tparw','tech_param');

TWPAR.index('PRT');
TWPAR.prefix(TPAR.ref());
TWPAR.win_sel('WER_P');
{? TWPAR.size()>1 | _all
|| TWPAR.select(,,,{? TKTL.STAT_P='T' | VAR.ACTION='3' | _used || 'p' || '' ?})
?};
~~


\TPARTRA_trigger
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Triggery dla tabeli TPARTRA
::  OLD: \TPARTRA/trigger.fml
::  TAG: <PRIVATE>
::----------------------------------------------------------------------------------------------------------------------
{? TPARTRA.PAR<>null()
|| TPARTRA.RTPAR:=$TPARTRA.PAR
?};
1


\tpartra_trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Trigger przed add dla tabeli TPARTRA
::----------------------------------------------------------------------------------------------------------------------
exec('TPARTRA_trigger','tech_param')


\tpartra_trig_put_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ttigger przed put dla tabeli TPARTRA
::----------------------------------------------------------------------------------------------------------------------
exec('TPARTRA_trigger','tech_param')


\formtran
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Po redakcji formuły translacji parametrów
::  OLD: \formtran/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=''
|| FUN.emsg('Formuła translacji nie jest wypełniona.'@);
   0
|| {? tpar.chk(fld())
   || 1
   || FUN.emsg('Formuła translacji nie jest poprawna.'@);
      0
   ?}
?}


\paramwysw
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Wyświetlenie parametrów do bieżącej karty
::  OLD: \paramwysw/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
TPAR.use((TPAR.name()-3)+(ref_name(VAR.A_KTL)+3));
TPAR.index('NN');
TPAR.prefix(VAR.A_KTL);
TPAR.win_sel('WER_'+VAR.A_KTL().TORW);
TPAR.select(,,,'DPU:D');
1


\tpartra_disp
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja wyświetl w oknach tabeli TPARTRA
::  OLD: \tpartra_disp/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.TPAR_NRP:=0;
VAR.TPAR_OP:='';
{? TPARTRA.RTPAR<>''
||
   TPAR.cntx_psh();
   TPAR.use(form(8+TPARTRA.RTPAR));
   TPAR.clear();
   {? TPAR.seek(TPARTRA.RTPAR)
   || VAR.TPAR_NRP:=TPAR.NRP;
      VAR.TPAR_OP:=TPAR.OPIS
   ?};
   TPAR.cntx_pop();
   ~~
?};
TPARTRA.win_edit('RED_'+TKTL.TORW);
TPARTRA.display();
~~


\twpar_popraw
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja przed popraw w oknach wertowania tabeli TWPAR
::   WY: 0/1
::  OLD: \twpar_popraw/tech.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

:: Jeśli próbuję poprawić TWPAR domyślnego produktu karty to nie pozwalam i daje info
{? TWPAR.TKTLW().KTM=VAR.A_KTL().KTM
|| _result:=0;
   _msg1:='Poprawianie wartości parametrów dla produktu podstawowego karty niedozwolone.';
   _msg2:='Taki produkt korzysta z wartości domyślnych parametrów karty.';
   _msg_glued:=exec('form','#string','L',_msg1,_msg2);
   FUN.emsg(_msg_glued)
|| {? TWPAR.TPAR().SLU<>null()
   || TWPAR.TPAR().SLU();
      _f3:="
         _val:=fld();
         SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(SLU.ref(),);
         {? SLO.first()
         || SLO.win_sel('ONE_SEL');
            SLO.hdr_sel();
            SLO.hdr_sel('Wybór parametru'@);
            {? SLO.select()
            || _new_val:=exec('str2real','#convert',SLO.KOD);
               {? SLO.KOD*exec('to_string','#convert',_new_val)>0
               || _val:=_new_val
               || _val:=~~;
                  FUN.emsg('Nie udało się ustalić wartości parametru na podstawie wybranej pozycji słownika.'@)
               ?}
            ?}
         || FUN.info('Brak zdefiniowanych elementów słownika.'@)
         ?};
         SLO.cntx_pop();
         _val
      ";
      _ae:="
         _res:=1;
::       Sprawdzenie czy słownik posiada pozycję słownika (kod) o podanej wartości
         _value:=TWPAR.VAL;
         _kod:=exec('to_string','#convert',_value);
         SLO.cntx_psh();
         SLO.index('SL');
         SLO.prefix(SLU.ref(),);
         {? SLO.find_tab('first','KOD',,'like','%'+_kod+'%')
         || _jest:=0;
            {!
            |?
               {? exec('str2real','#convert',SLO.KOD)=_value
               || _jest:=1
               ?};
               _jest=0 & SLO.find_tab('next','KOD',,'like','%'+_kod+'%')
            !};
            {? _jest=0
            || _res:=0
            ?}
         || _res:=0
         ?};
         SLO.cntx_pop();
         {? _res=0
         || FUN.info('Nie znaleziono elementu słownika o podanej wartości.'@)
         ?};
         _res
      "
   || _f3:="*";
      _ae:="*"
   ?};
   TWPAR.fld_fml('VAL','F3',_f3);
   TWPAR.fld_fml('VAL','AFTER_EDIT',_ae)
?};
_result


\tktlw_addpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.50]
:: OPIS: Dodaje albo aktualizuje parametry dla produktu karty
::       - dopisuje listę parametrów z domyślnymi wartościami z karty
::       - aktualizuje pole TWPAR.KTM
::       KONTEKST: rekord TKTLW, VAR.A_KTL
::  OLD: \tktlw_addpar/tech.fml
::----------------------------------------------------------------------------------------------------------------------
TWPAR.index('TP');
TWPAR.prefix(TKTLW.ref());
TPAR.index('NN');
TPAR.prefix(VAR.A_KTL);
{? TPAR.first()
|| {!
   |?
      TWPAR.index('TPR');
      TWPAR.prefix(TKTLW.ref(),TPAR.ref());
      {? TWPAR.first()
      ||
         TWPAR.KTM:=TKTLW.KTM;
         TWPAR.put(1)
      ||
         TWPAR.blank();
         TWPAR.TKTLW:=TKTLW.ref();
         TWPAR.KTM:=TKTLW.KTM;
         TWPAR.TPAR:=TPAR.ref();
         TWPAR.VAL:=TPAR.DEFAULT1;
         TWPAR.add(1)
      ?};
      TPAR.next()
   !}
?};
~~


\tktlw_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [8.50]
:: OPIS: wartości parametrów dla produktu karty
::       KONTEKST: rekord TKTLW
::  OLD: \tktlw_par/tech.fml
::----------------------------------------------------------------------------------------------------------------------
_used:=params_get().used;

{? VAR.A_KTL().TYP().PAR='T'
|| exec('tktlw_addpar','tech_param');
   TWPAR.index('TP');
   TWPAR.prefix(TKTLW.ref());
   {? TWPAR.first() | -menu_txt()='parametry'
   || TWPAR.win_sel('WER_T');
      {? TKTL.STAT_P='T' | VAR.A_KTL().KTM=TKTLW.KTM | _used
      || TWPAR.actions('WER_T','p')
      || TWPAR.actions('WER_T',,'p')
      ?};
      TWPAR.select()
   ?}
?};
~~


\tpartra_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed rekord w oknie wertowania tabeli TPARTRA
::----------------------------------------------------------------------------------------------------------------------
TPAR.use(ref_name(TPARTRA.PAR));
~~


\action_params_button
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Podgląd parametrów karty technologicznej - obsługa przycisku w oknie redagowania TKTL w czynnościach
::----------------------------------------------------------------------------------------------------------------------
exec('show_tpart','tech_param',TKTL.ref(),1);
''


\start_Otpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: odpalenie obiektu dla karty technologicznej w ramach obiektu kalkulacyjnego
::   WE: _a - obiekt kalkulacyjny
::       _b - M.ref()
::       [_c]- TKTL.ref - karta technologiczna której ładować parametry
::  OLD: \start_Otpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
{| _a
|! {? var_pres('tpar',_a)>100 || obj_del(tpar) ?};
   _tktl:={? _>1 & type_of(_c)=7 || _c || VAR.A_KTL ?};
   tpar:=obj_new(@.CLASS.TPAr,_b);
   tpar.TABLE:=TPAR;
   tpar.INDEX:='NN';
   tpar.PREFIX:=_tktl;
   tpar.loadp()
|};
~~


\start_xpar
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: odpalenie obiektu dla karty technologicznej PX_TEX
::   WE: _a - PX_TEX.ref()
::  OLD: \start_xpar/tex_tpar.fml
::----------------------------------------------------------------------------------------------------------------------
_px_tex:={?_>0 & type_of(_a)=7 || _a || null() ?};
{? var_pres('xpar',@)>0 || obj_del(xpar) ?};
PX_TEX.cntx_psh();
PX_TEX.clear();
exec('Tpar_decl','tech_param');
xpar:=obj_new(@.CLASS.TPAr);
{? PX_TEX.seek(_px_tex)
|| xpar.TABLE:=TPAR;
   xpar.INDEX:='NN';
   xpar.PREFIX:=PX_TEX.TKTL;
   xpar.loadp()
?};
PX_TEX.cntx_pop();
~~


\tpar_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed redakcją pól tabeli TPAR
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_res:=1;
{? _afld='DEFAULT1'
|| {? TPAR.SLU<>null()
   || _res:=0
   ?}
|? _afld='SLO'
|| {? TPAR.SLU=null()
   || _res:=0
   || SLO.hdr_sel();
      SLO.hdr_sel('Wybór parametrów'@)
   ?}
?};
_res


\tpar_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Po redakcji pól tabeli TPAR
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_res:=1;
{? _afld='SLU'
|| {? TPAR.SLU=null() | TPAR.SLO().SLU<>TPAR.SLU
   || TPAR.SLO:=null()
   || TPAR.SLU()
   ?};
   exec('tpar_efld_opt','tech_param')
|? _afld='SLO'
|| {? TPAR.SLO<>null()
   || TPAR.DEFAULT1:=exec('str2real','#convert',TPAR.SLO().KOD)
   || TPAR.DEFAULT1:=0
   ?}
?};
_res


\tpar_arec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Rekord po dla tabeli TPAR
::----------------------------------------------------------------------------------------------------------------------
_res:='';
{? TPAR.SLU<>null() & TPAR.SLO=null()
|| _res:='SLO';
   FUN.emsg('Pozycja słownika musi być określona.'@)
?};
{? _res='' & -menu_txt()='popraw'
|| TPAR.cntx_psh();
   TPAR.get();
   _slu:=TPAR.SLU;
   TPAR.cntx_pop();
   {? TPAR.SLU<>null() & TPAR.SLU<>_slu
   || _msg:='Zmodyfikowano powiązany z parametrem słownik użytkownika.\n'
            'Dotychczasowe wartości parametrów mogą być niezgodne z wartościami dostępnymi w nowym słowniku.\n'
            'Może być konieczna ręczna modyfikacja dotychczasowych wartości parametrów technologii.\n\n'
            'Kontynuować?'@;
      {? ~FUN.ask(_msg)
      || _res:='SLU'
      ?}
   ?}
?};

_res


\tpar_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Dodatkowe opcje pól dla tabeli TPAR
::   WE: [_a] - miejsce wywołania: [0] - popraw, 1 - dołącz
::----------------------------------------------------------------------------------------------------------------------
_add:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_win:='RED';
{? _add>0 | TPAR.SLU=null()
|| TPAR.efld_opt(_win,'mark=0',,'SLO','TR')
|| TPAR.efld_opt(_win,'mark=1',,'SLO','TR')
?};
~~


\tpar_pop_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Przed Popraw dla tabeli TPAR
::----------------------------------------------------------------------------------------------------------------------
exec('tpar_efld_opt','tech_param');
1


\tpar_del_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja po usunięciu rekordu TPAR - usuwa pozostałe powiązania
::   WE: _a - $TPAR.ref() - ref usuniętego rekordu
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _ref<>''
|| KPAR.cntx_psh();
   KPAR.index('RTPAR');
   KPAR.prefix(_a);
   {? KPAR.first()
   || {!
      |?
         KPAR.RTPAR:='';
         KPAR.cntx_psh();
         KPAR.prefix();
         KPAR.put();
         KPAR.cntx_pop();
         KPAR.first()
      !}
   ?};
   KPAR.cntx_pop()
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 cd318e1c8a031c30813db1fd3e69a71dcb1b9dbb8d19b1453d0bbc3dc7c0e1c2a53a351175e9191c024060b8fb956520cd968f40b283778cd6f782a16670ff9db672b59bf44b5cb2b420ea441e23b7af02292bcb51dcc692a5ab9bdf7ee883e1a7eda82deee25c569af1aa7d9b7b132e310ce1273cb9b837390d800077a5d305
