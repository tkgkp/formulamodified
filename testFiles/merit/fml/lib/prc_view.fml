:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: rejestrw.fml
:: Utworzony: 02.06.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartosc   : Funkcji obsługi widoku danych czasu przepracowanego
::======================================================================================================================


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Ustala wartość dla informacji w polu info.
::       Pierwsza informacja:
::           =   zgodność planu z godzinami przepracowanymi
::           +   przepracowano wiecej niż zaplanowano
::           -   przepracowano mniej niż zaplanowano
::           X   brak rejestracji dla indeksu tablicy 1 nieokreślona
::       Druga informacja:
::           'N'  praca w nocy wg dni przepracowanych
::           'X'  brak informacji o pracy w nocy - nieokreślona
::       Trzecia informacja:
::           'N' Nieobecność
::           'A' Nieobecność ad hoc
::           'X' brak Nieobecności z przebiegu lub ad hoc - nieokreślona
::       Czwarta informacja:
::           'D' Delegacja
::           'X' brak delegacji - nieokreślona
::       Piata informacja:
::           'S' Szkolenie
::           'X' brak szkolenia - nieokreślona
::       Szósta informacja:
::           'R' Dzień roboczy
::           'S' Dzień świąteczny
::           'W' Dzień wolny
::           'X' brak - nieokreślona
::   WE:  _a - [INTEGER] Numer dnia
::        _b - [INTEGER] Numer informacji
::       [_c] -  Wartość informacji dla numeru informacji
::   WY: string
::       Jeżeli nie podano 3 argumentu wynikiem jest wartość informacji dla podanego numeru
::       Jeśli podano 3 argument zawartość dla pola R_SZYCH.INF?? gdzie wartość zostanie dopisana na odpowiednim miejscu
::  OLD: \info/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_pole:=var_pres('_c')=type_of('');
_ktory:=('0'+$_a)+2;
_dzien:='R_SZYCH.INF'+_ktory;
_INF:=($(_dzien))();

_info:=obj_new(6);
{! _ind:=1..6 |! _info[_ind]:=1+((_ind-1)-_INF) !};
{! _ind:=1..6 |! {? _info[_ind]='' || _info[_ind]:='X' ?} !};

_wynik:='';
{? _pole
|| _info[_b]:=_c;
   {! _ind:=1..6 |! _wynik+=_info[_ind] !};
   ($(_dzien))():=_wynik
|| _wynik:=_info[_b]
?};
_wynik


\kolorPola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [12.41]
:: OPIS: kolorowanie pol w widoku
::   WE: _a - numer pola
::   WY:
::  OLD: \kolorPola/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_kolor:=1;
_swieto:=1;

{? _a<=date(A_OKRM.R,A_OKRM.M,0)~3
|| _dataBad:=date(A_OKRM.R,A_OKRM.M,_a);
:: Rodzaj dnia
   _typ:=exec('info','prc_view',_a,6);
   {? _typ='R'
   || _swieto:=0;

:: Czas pracy
      _ktory:=('0'+$_a)+2;
      _dzien:='@.R_SZYCH.DZ'+_ktory;
      _wartosc:=($(_dzien))();
       _dzien:='@.R_SZYCH.NIE'+_ktory;
      _nieobec:={? ($(_dzien))()=0 || '' || 'jest' ?};
      _dzien:='@.R_SZYCH.INF'+_ktory;
      _info:=($(_dzien))();
      {? _wartosc<>'' & exec('info','prc_view',_a,1)='='
      || _kolor:=1
      |? _wartosc<>''
         &
         (exec('info','prc_view',_a,1)='+' | exec('info','prc_view',_a,1)='-')
      || _kolor:=Color.fnd_kol('PRC_VIEW#01#05')
      |? _nieobec<>'' & exec('info','prc_view',_a,3)='A'
      || _kolor:=Color.fnd_kol('PRC_VIEW#01#06')
      |? exec('info','prc_view',_a,2)='N'
      || _kolor:=Color.fnd_kol('PRC_VIEW#01#02')
      ?};

:: Sprawdzenie czy współpracownik jest zatrudniony w dniu
      {? P.DZA>_dataBad || _kolor:=Color.fnd_kol('PRC_VIEW#01#03') ?};
      {? P.DZ<>#0
      || {? P.DZ<_dataBad
         || _kolor:=Color.fnd_kol('PRC_VIEW#01#03')
         ?}
      ?}
   |? _typ='S'
   || _kolor:='230:47:90,147:145:144'
   |? _typ='W'
   || _kolor:='250:148:17,197:195:194'
   ?}
?};
_kolor


\kolorPolaDWBO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk[12.41]
:: OPIS: Kolorowanie wartości w polu
::   WE:
::   WY:
::  OLD: \kolorPolaDWBO/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_kolor:=1;
_par:=date()+#PAR_SKID.get(186);
{? R_SZYCH.DWBO=#0 | R_SZYCH.DWBO<=_par
|| _kolor:=Color.fnd_kol('PRC_VIEW#01#01')
?};
_kolor


\add_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wypełnienie tabeli widoku danymi z tabeli R_PRACDN.
::   WE: _a - [INTEGER] Rok
::       _b - [INTEGER] Miesiąc
::       _c - [INTEGER] Czy otworzyć dane w tabeli (0 tak/1 nie)
::   WY:
::  OLD: \add_view/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of(0) || _c ?};

H.index('_HISTKOD');
R_PRACDN.index('R_PRACDN');

_INFO:=
   "  _pole:=var_pres('_c')=type_of('');
      _ktory:=('0'+$_a)+2;
      _dzien:='R_SZYCH.INF'+_ktory;
      _INF:=($(_dzien))();

      _info:=obj_new(6);
      {! _ind:=1..6 |! _info[_ind]:=1+((_ind-1)-_INF) !};
      {! _ind:=1..6 |! {? _info[_ind]='' || _info[_ind]:='X' ?} !};

      _wynik:='';
      {? _pole
      || _info[_b]:=_c;
         {! _ind:=1..6 |! _wynik+=_info[_ind] !};
         ($(_dzien))():=_wynik
      || _wynik:=_info[_b]
      ?};
      _wynik
   ";

_PRAC:=exec('dostepne_p','schemat','PRC','*T',P_FILTER.STATUS);
{? _PRAC.first()
|| PROGRESS.set(_PRAC.size(),'%1 %2'['Trwa odświeżenie widoku.'@,'Proszę czekać.'@]);
   {!
   |? {? P.seek(_PRAC.REF,,1)
      || H.index('_HISTKOD');
         H.prefix(P.ref(),'Z');
         {? H.find_le(date(_a,_b,0)) & ( H.DO>=date(_a,_b,1) | H.DO=#0 )
         || __KAL.set_cal(P.KAL,_a);
            R_SZYCH.prefix(exec('ref_firma','ustawienia'),_a,_b,P.ref());
            {? R_SZYCH.first()
            || _add:=0
            || _add:=1;
               R_SZYCH.blank()
            ?};
            R_PRACDN.prefix(P.ref());

:: Zapisy z tabeli dni przepracowanych
            {? ~_c & R_PRACDN.first()
            || {!
               |? _data:=R_PRACDN.DT;
                  _ktory:=(('0'+$(_data~3)))+2;
                  _kod:=$((R_PRACDN.CP+R_PRACDN.CN)~1);
                  _dzien:='R_SZYCH.DZ'+_ktory;
                  ($(_dzien))():=_kod;
                  _praca:=(*(R_PRACDN.CP+R_PRACDN.CN)/60)$2;
                  _plan:=__KAL.w_hours(R_PRACDN.DT,R_PRACDN.DT);
                  {? _praca=_plan || _info:='='
                  |? _praca>_plan || _info:='+'
                  |? _praca<_plan || _info:='-'
                  || _info:='X'
                  ?};
                  _INFO(_data~3,1,_info);
                  {? R_PRACDN.NOC<>*0
                  ||  _info:='N'
                  ||  _info:='X'
                  ?};
                  _INFO(_data~3,2,_info);
                  R_PRACDN.next()
               !};
               {? _add
               || R_SZYCH.P:=P.ref();
                  R_SZYCH.OSOBA:=P.OSOBA;
                  R_SZYCH.ROK:=_a;
                  R_SZYCH.MC:=_b;
                  {? R_SZYCH.add() || _add:=0 ?}
               || R_SZYCH.put()
               ?}
            ?};

:: Nieobecności
            N.index('NIEORM');
            N.prefix('N',P.ref(),_a,_b);
            {? N.first()
            || {!
               |? _kod:=N.NB().RN;
                  {! _ind:=N.OD~3..N.DO~3
                  |! _ktory:=('0'+$_ind)+2;
                     _dzien:='R_SZYCH.NIE'+_ktory;
                     ($(_dzien))():=_kod;
                     _dzien:='R_SZYCH.N'+_ktory;
                     {? N.OD=N.DO
                     || ($(_dzien))():=N.NG
                     || ($(_dzien))():=__KAL.w_hours(date(_a,_b,_ind),date(_a,_b,_ind),,1)
                     ?};
                     _INFO(_ind,3,'N')
                  !};
                  N.next()
               !};
               {? _add
               || R_SZYCH.P:=P.ref();
                  R_SZYCH.OSOBA:=P.OSOBA;
                  R_SZYCH.ROK:=_a;
                  R_SZYCH.MC:=_b;
                  {? R_SZYCH.add() || _add:=0 ?}
               || R_SZYCH.put()
               ?}
            ?};

:: Sprawdzenie przerw z przebiegu zatrudnienia
:: Zerowanie informacji o nieobecnościach specjalnych, delegacjach i szkoleniach dla całego miesiąca
            {! _ind:=1..date(_a,_b,0)~3
            |! _ktory:=('0'+$_ind)+2;
               {? '#A'*_INFO(_ind,3)
               || _dzien:='R_SZYCH.NIE'+_ktory;
                  ($(_dzien))():=0;
                  _dzien:='R_SZYCH.N'+_ktory;
                  ($(_dzien))():=0;
                  _INFO(_ind,3,'X')
               ?};
               {! _numer:=4..6 |! _INFO(_ind,_numer,'X') !}
            !};

:: Nieobecności ad-hoc
            N_AH.index('PRACRM');
            N_AH.prefix(P.ref(),_a,_b);
            {? N_AH.first()
            || {!
               |? _ktory:=('0'+$(N_AH.DATA~3))+2;
                  {? ~('N#'*_INFO(_ktory,3))
                  || _kod:=N_AH.TYP().RN;
                     _dzien:='R_SZYCH.NIE'+_ktory;
                     ($(_dzien))():=_kod;
                     _dzien:='R_SZYCH.N'+_ktory;
                     ($(_dzien))():=__KAL.w_hours(N_AH.DATA,N_AH.DATA);
                      _INFO(N_AH.DATA~3,3,'A')
                  ?};
                  N_AH.next()
               !};
               {? _add
               || R_SZYCH.P:=P.ref();
                  R_SZYCH.OSOBA:=P.OSOBA;
                  R_SZYCH.ROK:=_a;
                  R_SZYCH.MC:=_b;
                  {? R_SZYCH.add() || _add:=0 ?}
               || R_SZYCH.put()
               ?}
            ?};

:: Delegacje i szkolenia
            _delegacja:=exec('wstaw_delegacje','prc_view',P.ref(),_a,_b);
            _szkolenie:=exec('wstaw_szkolenie','prc_view',P.ref(),_a,_b);
            {? _delegacja | _szkolenie
            || {? _add
               || R_SZYCH.P:=P.ref();
                  R_SZYCH.OSOBA:=P.OSOBA;
                  R_SZYCH.ROK:=_a;
                  R_SZYCH.MC:=_b;
                  {? R_SZYCH.add() || _add:=0 ?}
               || R_SZYCH.put()
               ?}
            ?};
            {? ~_add
            || _od:=date(_a,_b,1);
               _do:=date(_a,_b,0);
               {! _numer:=_od~3.._do~3
               |! _dataBad:=date(_a,_b,_numer);
                  {? __KAL.w_days(_dataBad,_dataBad)
                  || _INFO(_numer,6,'R')
                  |? __KAL.f_days(_dataBad,_dataBad)
                  || {? __KAL.type_day(_dataBad)+1='H' || _INFO(_numer,6,'H') || _INFO(_numer,6,'W') ?}
                  || _INFO(_numer,6,'S')
                  ?}
               !};
               R_SZYCH.put()
            ?}
         ?}
      ?};
      PROGRESS.next();
      _PRAC.next()
   !};
   PROGRESS.close()
?};
~~


\wstaw_delegacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Pobiera dane o delegacji w podanym miesiącu. Wstawia odpowiednie informacje jako kolumna 4.
::   WE: _a - [REFERENCE] Ref współpracownika
::       _b - [INTEGER] Rok
::       _c - [INTEGER] Miesiąc
::   WY: 1 - była delegacja , 0 bez delegacji
::  OLD: \wstaw_delegacje/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=date(_b,_c,1);
_do:=date(_b,_c,0);
_tab:=exec('deleg_find','prc_graf',_a,_od,_do);
{? _tab.first()
|| {!
   |? exec('info','prc_view',_tab.DATA~3,4,'D');
      _tab.next()
   !};
   1
?}


\wstaw_szkolenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Pobiera dane o szkoleniu w podanym miesiacu. Wstawia odpowiednie informacje jako kolumna 4.
::   WE: _a - [REFERENCE] Ref współpracownika
::       _b - [INTEGER] Rok
::       _c - [INTEGER] Miesiąc
::   WY: 1 - bylo szkolenie, 0 - nie bylo szkolenia
::  OLD: \wstaw_szkolenie/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=date(_b,_c,1);
_do:=date(_b,_c,0);
_tab:=exec('szkol_find','prc_graf',_a,_od,_do);
{? _tab.first()
|| {!
   |? exec('info','prc_view',_tab.DATA~3,5,'S');
      _tab.next()
   !};
   1
?}


\ustaw_odbiory
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Ustawia ewentualną informacje o nierozliczonych nadgodzinach.
::   WE:
::   WY:
::  OLD: \ustaw_odbiory/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
R_KWGODZ.cntx_psh();
R_SZYCH.P();
{? exec('nadgodziny','prc_view')
|| {? exec('mozliwe_odbiory','prc_rozlicz',date(A_OKRM.R,A_OKRM.M,1),date(A_OKRM.R,A_OKRM.M,0),1).first()
   || R_SZYCH.NG:='T'
   || R_SZYCH.NG:='N'
   ?}
|| R_SZYCH.NG:='N'
?};
R_SZYCH.put();
R_KWGODZ.cntx_pop();
1


\WerGodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: weryfikacja godzin przepracowanych wzgledem planu.
::   WE:
::   WY:
::  OLD: \WerGodz/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
R_SZYCH.P();
{? P.KAL
|| __KAL.set_cal(P.KAL().NAZWA,A_OKRM.R)
|| __KAL.set_cal('standard',A_OKRM.R)
?};
_data_od:={? P.DZA>=date(A_OKRM.R,A_OKRM.M,1) || P.DZA || date(A_OKRM.R,A_OKRM.M,1) ?};
_data_do:={? P.DZ<>#0 & P.DZ<=date(A_OKRM.R,A_OKRM.M,0) || P.DZ || date(A_OKRM.R,A_OKRM.M,0) ?};
_suma:=_odprac:=time(0,0,0);
_nominal:=time(__KAL.w_hours(_data_od,_data_do),0,0);
_godzNieo:=0;

R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(R_SZYCH.P);
{? R_KWGODZ.first()
|| {!
   |? {? '48,54,58,63,64,67,68,69,65,'*($R_KWGODZ.KW().RN+',') || _suma+=R_KWGODZ.GODZ ?};
      R_KWGODZ.next()
   !}
?};

R_ODN.index('ROKMC');
R_ODN.prefix(R_SZYCH.P,_data_od~1,_data_od~2);
{? R_ODN.first()
|| {!
   |? _odprac+=R_ODN.G;
      R_ODN.next()
   !}
?};
R_WYK.index('R_WYKDO');
R_WYK.prefix(P.ref());
{? R_WYK.find_ge(_data_od)
|| {!
   |? _suma+=R_WYK.GO;
      R_WYK.next() & R_WYK.DO<=_data_do
   !}
?};
{! _ind:=1..date(A_OKRM.R,A_OKRM.M,0)~3
|! _ktory:=('0'+$_ind)+2;
   _dzien:='R_SZYCH.N'+_ktory;
   _godzNieo+=($(_dzien))()
!};
_godzNieo:=*(_godzNieo*60);
R_SZYCH.OK:={? _nominal>_suma+_godzNieo+_odprac || 'N' || 'T' ?};
R_SZYCH.put();
_nominal<>_suma+_godzNieo


\nadgodziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Sprawdzenie czy sa przeslanki do mozliwych odbiorow.
::   WE:
::   WY:
::  OLD: \nadgodziny/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
R_KWGODZ.cntx_psh();
R_KWGODZ.index('RUB_DATA');
R_KWGODZ.prefix(R_SZYCH.P);
_wyn:=0;
_wyn+=R_KWGODZ.find_key(55);
_wyn+=R_KWGODZ.find_key(56);
_wyn+=R_KWGODZ.find_key(58);
R_KWGODZ.cntx_pop();
_wyn


\updateBadania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Pobranie danych o badaniach.
::   WE:
::   WY:
::  OLD: \updateBadania/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_diff:=(A_OKRM.R*12+A_OKRM.M)-((date()~1)*12+(date()~2));
_dt:=date(A_OKRM.R,A_OKRM.M,{? _diff>0 || 1 |? _diff<0 || 0 || date()~3 ?});

BDO.cntx_psh();
BDO.index('PDTO');
BDS.cntx_psh();
BDS.index('ST');
H.cntx_psh();
H.index('_HISTKOD');
{? R_SZYCH.first()
|| {!
   |? BDO.prefix(R_SZYCH.P);
      R_SZYCH.DWBO:=date(0,0,0);
      {? BDO.find_le(_dt)
      || BDS.prefix(BDO.ref());
         {? BDS.first()
         || H.prefix(R_SZYCH.P,'Z');
            {? H.find_le(_dt) & BDS.find_key(H.ST().ST)
            || R_SZYCH.DWBO:=BDO.DTNB
            ?}
         ?}
      ?};
      R_SZYCH.put();
      R_SZYCH.next()
   !}
?};
H.cntx_pop();
BDS.cntx_pop();
BDO.cntx_pop();
~~


\formulaICO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Ikony wyświetlane w widoku miesięcznym
::   WE: _a - dzien miesiaca
::       _b - pole w rcp_view
::       _c - data zwolnienia Pracownika
::   WY:
::  OLD: \formulaICO/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ikona:='';

{? exec('info','prc_view',_a,4)='D'
|| _ikona:='xwin16.png:226'
|| {? exec('info','prc_view',_a,5)='S'
   || _ikona:='xwin16.png:227'
   ?}
?};

_dzien:='R_SZYCH.NIE'+_b;
_wartosc:=($(_dzien))();
{? _wartosc
|| _ikona:='xwin16.png:'+
      {? __RUB.sys_attr(_wartosc,1921) || '54'
      |? __RUB.sys_attr(_wartosc,1922) || '55'
      |? __RUB.sys_attr(_wartosc,1923) || '53'
      |? __RUB.sys_attr(_wartosc,1924) || '57'
      |? __RUB.sys_attr(_wartosc,1925) || '58'
      || '53'
      ?}
?};

_dzien:='R_SZYCH.DZ'+_b;
_wartosc:=($(_dzien))();
_dzien:='R_SZYCH.INF'+_b;
_wartosc:=($(_dzien))();
_dzien:='R_SZYCH.DZ'+_b;
_wartosc:=($(_dzien))();
_dzien:='R_SZYCH.NIE'+_b;
_1wartosc:=($(_dzien))();

{? _wartosc<>'' & _wartosc<>'0' & _1wartosc
|| _ikona:='xwin16.png:4'
?};
{? _ikona='' & (_a=date()) & _wartosc='' & ~_1wartosc
|| _ikona:='xwin16.png:170'
?};
{? _c<>#0
|| {? _c<_a || _ikona:='' ?}
?};

_ikona


\tab_NB
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Utworzenie tabeli tymczasowej z oknem wertowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=obj_new('TAB','WER','NDX');

:: Definicja tabeli tymczasowej z nieobecnościami
_tab.TAB:=tab_tmp(1,
   'OD','DATE','Początek nieobecności',
   'DO','DATE','Koniec nieobecności',
   'KOD','STRING[5]','Kod nieobecności',
   'N','STRING[50]','Nieobecność',
   'PRZED','STRING[2]','Kontynuacja przed',
   'PO','STRING[2]','Kontynuacja po',
   'NG','REAL','Liczba godzin nieobecności',
   'NR','INTEGER','Liczba dni roboczych nieobecności',
   'NK','INTEGER','Dni kalendarzowo',
   'TYP','STRING[30]','Pochodzenie informacji'
);

:: Indeks
_tab.TAB.ndx_tmp(,1,'OD',,);

_mob:='mobile_visible=1';
:: Definicja okna do tabeli tymczasowej z nieobecnościami
_tab.WER:=_tab.TAB.mk_sel('Nieobecności'@,,0,'msc_nieobecn',,,,,'U',,,,,'maximized');
_tab.TAB.win_fld(_tab.WER,,'PRZED',,,2,,1,'',,'Kontynuacja przed'@);
_tab.TAB.win_fld(_tab.WER,,'OD',,,12,,1,'Data od'@,,'Data rozpoczęcia'@,,,,,,_mob);
_tab.TAB.win_fld(_tab.WER,,'DO',,,12,,1,'Data do'@,,'Data zakończenia'@,,,,,,_mob);
_tab.TAB.win_fld(_tab.WER,,'PO',,,2,,1,'',,'Kontynuacja po'@);
_tab.TAB.win_fld(_tab.WER,,'NK',,,2,,1,'Dni kalendarzowe'@,,'Liczba dni kalendarzowych nieobecności'@);
_tab.TAB.win_fld(_tab.WER,,'NR',,,2,,1,'Dni robocze'@,,'Liczba dni roboczych nieobecności'@);
_tab.TAB.win_fld(_tab.WER,,'NG',,,5,2,1,'Godziny robocze'@,,'Liczba godzin roboczych nieobecności'@,,,,,,_mob);
_tab.TAB.win_fld(_tab.WER,,'KOD',,,5,,1,'Kod'@,,'Kod nieobecności'@);
_tab.TAB.win_fld(_tab.WER,,'N',,,40,,1,'Nieobecność'@,,'Opis nieobecności'@,,,,,,_mob);
_tab.TAB.win_fld(_tab.WER,,'TYP',,,30,,1,'Pochodzenie informacji'@,,'Źródło pochodzenia informacji o nieobecności'@);

_tab


\R_szych_N
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Odświeżenie okienka nieobecności
::   WE:
::   WY:
::  OLD: \R_szych_N/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
__NB.TAB.erase();
{? R_SZYCH.f_size()
|| R_SZYCH.P();
   __KAL.set_cal(P.KAL,A_OKRM.R);
   H.index('_HISTKOD');
   _start:=date(A_OKRM.R,A_OKRM.M,1);
   _stop:=date(A_OKRM.R,A_OKRM.M,0);

   N.index('NIEORM');
   N.prefix('N',R_SZYCH.P,A_OKRM.R,A_OKRM.M);
   {? N.first()
   || {!
      |? __NB.TAB.OD:=N.OD;
         __NB.TAB.DO:=N.DO;
         __NB.TAB.KOD:=$N.NB().RN;
         __NB.TAB.N:=N.NB().RT;
         __NB.TAB.NG:=N.NG;
         __NB.TAB.NK:=N.NK;
         __NB.TAB.NR:=N.NR;
         __NB.TAB.PRZED:='';
         __NB.TAB.PO:='';
         __NB.TAB.TYP:='Kartoteka nieobecności';
         __NB.TAB.add();
         N.next()
      !}
   ?};

   N_AH.index('PRACRM');
   N_AH.prefix(R_SZYCH.P,A_OKRM.R,A_OKRM.M);
   {? N_AH.first()
   || {!
      |? _ng:=_nr:=_nk:=0;
         _num:=N_AH.DATA~3;
         {? exec('info','prc_view',_num,6)='R'
         || _ktory:=('0'+$_num)+2;
            _dzien:='@.R_SZYCH.N'+_ktory;
            ($(_dzien))():=__KAL.w_hours(N_AH.DATA,N_AH.DATA);
            _ng+=($(_dzien))();
            _nr+=1
         ?};
         _nk+=1;
         __NB.TAB.OD:=N_AH.DATA;
         __NB.TAB.DO:=N_AH.DATA;
         __NB.TAB.KOD:=$N_AH.TYP().RN;
         __NB.TAB.N:=N_AH.TYP().RT;
         __NB.TAB.NG:=_ng;
         __NB.TAB.NK:=_nk;
         __NB.TAB.NR:=_nr;
         __NB.TAB.PRZED:='';
         __NB.TAB.PO:='';
         __NB.TAB.TYP:='Nieobecności Ad Hoc';
         __NB.TAB.add();
         N_AH.next()
      !}
   ?}
?};
1


\R_szych_AF
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Odświeżenie okienek w grupie.
::   WE:
::   WY:
::  OLD: \R_szych_AF/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
R_PRACDN.cntx_psh();
{? R_SZYCH.f_size()
|| R_SZYCH.P();
   R_PRACDN.index('R_PRACDN');
   R_PRACDN.prefix(R_SZYCH.P);
   {? ~R_PRACDN.first() || R_PRACDN.prefix(null()) ?};
   exec('licz_sum','prc_view')
|| R_PRACDN.prefix(null());
   R_ZM.SUMBNR:=R_ZM.SNOMINAL:=R_ZM.SNIEO:=R_ZM.SBILANS:=R_ZM.S50:=R_ZM.S100:=R_ZM.SUMODBIO:=R_ZM.SCP:=time(0,0,0);
   R_ZM.SNOC:=R_ZM.SUMPP:=R_ZM.SUMA:=time(0,0,0)
?};
R_PRACDN.cntx_pop();
1


\licz_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wylicznie podsumowań dla zmiennej wyświetlanej w okienku przepracowanych dni.
::   WE:
::   WY:
::  OLD: \licz_sum/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
R_ZM.SNIEO:=R_ZM.SUMBNR:=R_ZM.SUMA:=time(0,0,0);
_godzNieo:=0;
_odbior:=time(0,0,0);
{! _ind:=1..date(A_OKRM.R,A_OKRM.M,0)~3
|! _ktory:=('0'+$_ind)+2;
   _dzien:='R_SZYCH.N'+_ktory;
   _godzNieo+=($(_dzien))()
!};
exec('sumaGodz','prc_view');

R_WYK.index('R_WYKDO');
R_WYK.prefix(P.ref());
{? R_WYK.find_ge(date(A_OKRM.R,A_OKRM.M,1))
|| {!
   |? _odbior+=R_WYK.GO;
      R_WYK.next() & R_WYK.DO<=date(A_OKRM.R,A_OKRM.M,0)
   !}
?};
R_ZM.SNIEO:=*(_godzNieo*60);
R_ZM.SNIEO:=time(R_ZM.SNIEO~1,R_ZM.SNIEO~2,0)+_odbior;
R_ZM.SBILANS:=R_ZM.SCP+R_ZM.SNIEO+R_ZM.SUMPP;
R_ZM.SUMBNR:=R_ZM.SBILANS+R_ZM.S50+R_ZM.S100-R_ZM.SUMPP;
R_ZM.SUMA:=R_ZM.SCP+R_ZM.S50+R_ZM.S100;
R_SZYCH.OK:={? R_ZM.SBILANS<R_ZM.SNOMINAL || 'N' || 'T' ?};
R_SZYCH.put();

{? R_ZM.SUMODBIO>*0 || Color.fnd_kol('PRC_ROZ#02#01') || '' ?}


\sumaGodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wylicza sume godzin dla okienka sumy z dni przepracowanych.
::   WE:
::   WY:
::  OLD: \sumaGodz/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? P.KAL
|| __KAL.set_cal(P.KAL().NAZWA,A_OKRM.R)
|| __KAL.set_cal('standard',A_OKRM.R)
?};
R_ZM.SNOMINAL:=R_ZM.S50:=R_ZM.S100:=R_ZM.SUMODBIO:=R_ZM.SCP:=R_ZM.SNOC:=R_ZM.SUMPP:=time(0,0,0);
_data_od:={? P.DZA>=date(A_OKRM.R,A_OKRM.M,1) || P.DZA || date(A_OKRM.R,A_OKRM.M,1) ?};
_data_do:={? P.DZ<>#0 & P.DZ<=date(A_OKRM.R,A_OKRM.M,0) || P.DZ || date(A_OKRM.R,A_OKRM.M,0) ?};
_odbior5:=_odbior1:=time(0,0,0);

:: Nadgodziny w kwalifikacji czasu pracy
R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(R_SZYCH.P);
{? R_KWGODZ.first()
|| {!
   |? {? R_KWGODZ.KW().RN=55 || R_ZM.S50+=R_KWGODZ.GODZ
      |? R_KWGODZ.KW().RN=56 || R_ZM.S100+=R_KWGODZ.GODZ
      |? '48,54,58,63,64,67,68,69,65,'*($R_KWGODZ.KW().RN+',') || R_ZM.SCP+=R_KWGODZ.GODZ
      |? R_KWGODZ.KW().RN=57 || R_ZM.SNOC+=R_KWGODZ.GODZ
      ?};
      R_KWGODZ.next()
   !}
?};

:: Wnioski o udzielenie czasu wolnego
R_ODN.index('ROKMC');
R_ODN.prefix(R_SZYCH.P,_data_od~1,_data_od~2);
{? R_ODN.first()
|| {!
   |? R_ZM.SUMPP+=R_ODN.G;
      R_ODN.next()
   !}
?};
R_ZM.SNOMINAL:=*((__KAL.w_hours(_data_od,_data_do,,1)*60)$2);
R_ZM.SNOMINAL:=time(R_ZM.SNOMINAL~1,R_ZM.SNOMINAL~2,0);

:: Odbiory nadgodzin
R_WYK.index('R_WYKRM');
R_WYK.prefix(P.ref(),_data_od~1,_data_od~2);
{? R_WYK.first()
|| {!
   |? {? R_WYK.R().RN=55 || _odbior5+=R_WYK.G
      |? R_WYK.R().RN=56 || _odbior1+=R_WYK.G
      ?};
      R_WYK.next()
   !}
?};
R_ZM.SUMODB50:=_odbior5;
R_ZM.SUMODB10:=_odbior1;
1


\przedDisp_R_ZM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [XX.rr]
:: OPIS: Kolorowanie pola w okienku edycji zmiennej R_ZM.
::   WE:
::   WY:
::  OLD: \przedDispQ_ZM/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='SBILANS'
|| {? R_ZM.SBILANS=R_ZM.SNOMINAL || Color.fnd_kol('PRC_ROZ#02#01')
   |? R_ZM.SBILANS<R_ZM.SNOMINAL || Color.fnd_kol('PRC_ROZ#02#02')
   |? R_ZM.SBILANS>R_ZM.SNOMINAL || Color.fnd_kol('PRC_ROZ#02#03')
   || ''
   ?}
|? cur_afld()='SUMODBIO' | cur_afld()='SUMBNR' | cur_afld()='SUMA'
|| {? ($('R_ZM.'+cur_afld()))()>*0 || Color.fnd_kol('PRC_ROZ#02#01') || '' ?}
|| ''
?}


\weryfikuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Sprawdzenie godzin przepracowanych względem planu oraz ewentualnych nierozliczonych nadgodzin.
::   WE:
::   WY:
::  OLD: \weryfikuj/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
exec('WerGodz','prc_view');
exec('ustaw_odbiory','prc_view')


\uwagi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Funkcja sprawdza zdarzenia związane z czasem pracy w podanym miesiącu.
::   WE: [_a] - [REFERENCE] Wskazanie na współpracownika - jeśli brak to sprawdzenie dla wszystkich.
::       [_b] - [INTEGER] Rok
::       [_c] - [INTEGER] Miesiąc
::       [_d] - [INTEGER] Czy pokazywac okno z uwagami:
::                            0 - nie pokazuje okna
::                            1 - pokazuje okno jak są uwagi [domyślnie]
::                            2 - pokazuje okno nawet jeśli brak uwag
::   WY: 0/1  - [INTEGER]   - 0 - jeżeli nie ma uwag
::                            1 - jeżeli jest choćby jedna uwaga
::  OLD: \uwagi/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_b:={? var_pres('_b')=type_of(0) || _b || A_OKRM.R ?};
_c:={? var_pres('_c')=type_of(0) || _c || A_OKRM.M ?};
_d:={? var_pres('_d')=type_of(0)  || _d || 1 ?};
_od:=date(_b,_c,1);
_do:=date(_b,_c,0);
_p_ref:=null();
_width:=60;
_dalej:=1;
_prac_ok:=_res:=0;
{? _p_ref=null()
|| _width:=MS.fld_len('OSOBA','NAZWISKO')+MS.fld_len('OSOBA','PIERWSZE')+MS.fld_len('P','T')+15
?};

:: Powołanie nowej nieużywanej jeszcze zmiennej globalnej do obsługi obiektu JCQ i utworzenie obiektu kalsy JCQ
:: oraz przypisanie go do zmiennej globalnej
_var:=VAR_DEL.new(,"obj_new(@.CLASS.JCQ)");
_KOMM:=($_var)();
_KOMM.init(_width,,' Uwagi dla danych o czasie pracy'@,'');
R_SZYCH.cntx_psh();
P.cntx_psh();
P.clear();

:: Wyszukanie tylko zatrudnionych pracowników lub pracownika przekazanego parametrem.
_where:='P.REFERENCE in
   (  select P.REFERENCE
      from P
      where
         P.DZA<=to_date(\''+gsub(_do$1,'/','-')+'\')
         and (P.DZ>=to_date(\''+gsub(_od$1,'/','-')+'\') or P.DZ is null)';
{? _p_ref<>null()
|| _where+=' and REFERENCE=\''+$_p_ref+'\''
?};
_where+=' order by 1)';

{? P.f_active() || P.f_clear() ?};
exec('filtruj_p','schemat',
   'PRC',
   UD_DEF.ref(),
   P_FILTER.F_ZATR().KOD,
   'T',
   P_FILTER.STATUS,,
   _where
);

{? P.f_first()
|| _size:=((#_do-#_od)+1)*P.f_size();
   PROGRESS.set(_size,'Trwa przetwarzanie danych.Proszę czekać.'@);

   {!
   |? _par:=obj_new('odbiory','wolne','odprac','wewy','kal_buff');
      {! _ind:=1..obj_len(_par) |! _par[_ind]:=0 !};
      _prac:=0;

:: Powołanie potrzebnych sekcji
      _lp:=_KOMM.sect_beg(
         ' %1 %2 %3:'[P.OSOBA().NAZWISKO,P.OSOBA().PIERWSZE,'[nr teczki - %1]'@[form(P.T)]],
         'xwin16.png:100'
      );
      _KOMM.sect_end();
      _icon:='xwin16.png:83';

:: Pętla po dniach
         {! _ii:=#_od..#_do
         |! _kon:=0;
            _data:=#_ii;

:: Powołanie sekcji dnia
            _komm:=' '+$_data;
            _section:=_KOMM.sect_beg(_komm,_icon);
            _KOMM.chngroot(_section,_lp);

:: Sprawdzenie czy nie ma wprowadzonego wniosku o odbiór nadgodzin.
            _ODB:=exec('get_wodb','prc',P.ref(),null(),_data);
            {? _ODB.first()
            || _komm:='Odbiory za nadgodziny'@;
               _prac+=1;
               _kon+=1;
               _par.odbiory+=1;
               _lp_add:=_KOMM.add(' '+_komm,'xwin16.png:140',,,
                  "  _dt:="+$(#_data)+";
                     P.seek('"+$P.ref()+"',,1);
                     exec('wnioski_odbioru','prc_view',P.ref(),#_dt)
                  "
               );
               _KOMM.chngroot(_lp_add,_section)
            ?};
            obj_del(_ODB);

:: Sprawdzenie czy nie ma wprowadzonego wniosku o udzielenie czasu wolnego.
            _czas:=exec('get_r_odn_czas','prc_graf',P.ref(),_data,'G');
            {? _czas>0
            || _komm:='Wnioski o czas wolny'@;
               _prac+=1;
               _kon+=1;
               _par.wolne+=1;
               _lp_add:=_KOMM.add(' '+_komm,'xwin16.png:190',,,
                  "  _dt:="+$(#_data)+";
                     P.seek('"+$P.ref()+"',,1);
                     exec('wnioski_odprac','prc_view',P.ref(),#_dt,1)
                  "
               );
               _KOMM.chngroot(_lp_add,_section)
            ?};

:: Sprawdzenie czy nie ma odpracowania.
            _czas_odp:=exec('get_r_odp_czas','prc',P.ref(),_data,,'GO');
            {? _czas_odp>0 & _czas=0
            || _komm:='Planowane odpracownanie wyjścia prywatnego'@;
               _prac+=1;
               _kon+=1;
               _par.odprac+=1;
               _lp_add:=_KOMM.add(' '+_komm,'xwin16.png:134',,,
                  "  _dt:="+$(#_data)+";
                     P.seek('"+$P.ref()+"',,1);
                     exec('wnioski_odprac','prc_view',P.ref(),#_dt,0)
                  "
               );
               _KOMM.chngroot(_lp_add,_section)
            ?};

:: Praca w dobie poprzedniej.
               _jest:=exec('get_pop_doba','prc_view',_data,P.ref());
               {? _jest
               || _komm:='Praca w dobie poprzedniej'@;
                  _prac+=1;
                  _kon+=1;
                  _par.wewy+=1;
                  _lp_add:=_KOMM.add(' '+_komm,'xwin16.png:141',,,
                     "  _dt:="+$(#_data)+";
                        P.seek('"+$P.ref()+"',,1);
                        exec('wejscia_wyjscia','prc_view',P.ref(),#_dt,'R_REJ_WW')
                     "
                  );
                  _KOMM.chngroot(_lp_add,_section)
               ?};

:: Błędy wejść wyjść.
            _jest:=exec('get_wewy','prc_view',_data,P.ref());
            {? _jest
            || _komm:='Błędy zapisów WE/WY'@;
               _prac+=1;
               _kon+=1;
               _par.wewy+=1;
               _lp_add:=_KOMM.add(' '+_komm,'xwin16.png:120',,,
                     "  _dt:="+$(#_data)+";
                        P.seek('"+$P.ref()+"',,1);
                        exec('wejscia_wyjscia','prc_view',P.ref(),#_dt,'R_REJ_WX')
                     "
                  );
               _KOMM.chngroot(_lp_add,_section)
            ?};

:: Sprawdzenie wykonania w buforze grafików.
            KAL_BUFF.cntx_psh();
            KAL_BUFF.index('PRZNODT');
            KAL_BUFF.prefix(P.ref(),'W','T',_data);
            {? KAL_BUFF.first()
            || _komm:='Niezatwierdzone wejścia/wyjścia';
               _prac+=1;
               _kon+=1;
               _par.kal_buff+=1;
               _lp_add:=_KOMM.add(' '+_komm, 'xwin16.png:141',,,
                  "  _dt:="+$(#_data)+";
                     P.seek('"+$P.ref()+"',,1);
                     exec('wer_zatw','prc_mscrozlicz',"+$(_data~1)+","+$(_data~2)+",0,P.ref(),#_dt)
                  "
               );
               _KOMM.chngroot(_lp_add,_section)
            ?};
            KAL_BUFF.cntx_pop();
:: Zamknięcie sekcji.
            _KOMM.sect_end();
:: Usunięcie sekcji jeśli jest pusta.
            {? _kon=0 || _KOMM.del(_section) ?};
            PROGRESS.next()
         !};
:: Zliczenie konfliktów
      {! _ind:=1..obj_len(_par) |! _res+=_par[_ind] !};
:: Usunięcie niepotrzebnych sekcji.
      {? _prac=0 || _KOMM.del(_lp) ?};
      obj_del(_par);
      P.f_next()
   !};
   PROGRESS.close()
?};
{? P.f_active() || P.f_clear() ?};
P.cntx_pop();

:: Jeżeli są konflikty to je wyświetl (dla _d=2 zawsze wyświetla okno).
{? _d>0
|| _KOMM.select(,,,_d=2,'Szczegóły',{? _p_ref=null()|| 0 || 1 ?})
?};
VAR_DEL.delete(_var);
R_SZYCH.cntx_pop();
_res


\wnioski_odbioru
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyświetlenie okna z wnioskami o odbiór nadgodzin
::   WE: _a - [REFERENCE] P.ref()
::       _b - [DATE] Data odbioru
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';

R_WO.cntx_psh();
R_WO.index(R_WO.ndx_tmp(,1,'P',,,'DO',,));
R_WO.prefix(_a,_b);
R_WYK.cntx_psh();

_wnd:=R_WO.grp_make('Wnioski o odbiór nadgodzin'@,
   "  grp_disp(R_WYK,'WER')
   ",,,,,,_mode
);
R_WO.grp_sel(_wnd,,'SEL',,
   "  R_WYK.index('R_WYKWO');
      R_WYK.prefix({? R_WO.size() || R_WO.ref() || null() ?});
      R_WYK.first();
      grp_disp(R_WYK,'WER')
   ",,,,,,,,_mode
);
R_WO.grp_splt(_wnd,,'vertical','prawy');
R_WO.grp_sel(_wnd,R_WYK,'WER',,
   "  grp_disp(R_WO,'SEL')
   ",,,,,,,,_mode
);
R_WO.win_sel(_wnd);
R_WO.select();

R_WYK.cntx_pop();
R_WO.cntx_pop();
~~


\wnioski_odprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyświetlenie okna z wnioskami o odpracowanie czasu wolnego
::   WE: _a - [REFERENCE] P.ref()
::       _b - [DATE] - Data
::       _c - [INTEGER] (0/1)- Odpracowanie/Wniosek
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';
_ok:=0;
R_ODN.cntx_psh();
R_ODN.index('PRAC');
R_ODP.cntx_psh();
R_ODP.index('PRAC');

{? _c
|| R_ODN.prefix(_a,_b);
   _ok:=R_ODN.first()
|| R_ODP.prefix(_a,_b);
   {? R_ODP.first() & R_ODN.seek(R_ODP.R_ODN,,1)
   || _dt:=R_ODN.DW;
      R_ODN.prefix(_a,_dt);
      _ok:=R_ODN.first()
   ?}
?};

{? _ok
|| _wnd:=R_ODN.grp_make('Wnioski czasu wolnego'@,
      "  grp_disp(R_ODP,'SEL')
      ",,,,,,_mode
   );
   R_ODN.grp_sel(_wnd,R_ODN,'SEL',,
      "  R_ODP.index('NAG');
         R_ODP.prefix({? R_ODN.size() || R_ODN.ref() || null() ?});
         R_ODP.first();
         grp_disp(R_ODP,'SEL')
      ",,,,,,,,_mode
   );
   R_ODN.grp_splt(_wnd,,'vertical','right');
   R_ODN.grp_sel(_wnd,R_ODP,'SEL',,
      "  grp_disp(R_ODN,'SEL')
      ",,,,,,,,_mode
   );
   R_ODN.win_sel(_wnd);
   R_ODN.select()
?};

R_ODP.cntx_pop();
R_ODN.cntx_pop();
~~


\wejscia_wyjscia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyświetlenie informacji o rejestracji wejścia i wyjścia w trakcie nieobecności
::   WE: _a - [REFERENCE] P.ref()
::       _b - [DATE] - Data
::       _c - [STRING] - Sposób sortowania tabeli.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_REJ_WW.cntx_psh();
MASK.Use('R_REJ_WW',_b~1,_b~2);
R_REJ_WW.index(_c);
R_REJ_WW.prefix(_a,_b);
R_REJ_WW.win_sel('WER');
R_REJ_WW.select();
R_REJ_WW.cntx_pop();
~~


\get_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Sprawdzenie czy był zapis bez domknięcia wejścia lub wyjścia.
::   WE: _a - [DATE] Data
::       _b - [REFERENCE] Ref współpracownika
::   WY: 1 - Jeżeli wystąpił taki zapis.
::  OLD: \get_wewy/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_Test:=1;
R_REJ_WW.cntx_psh();
MASK.Use('R_REJ_WW',_a~1,_a~2);
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(_b,_a);
{? R_REJ_WW.first()
|| _Typ:=_Mod:='';
   {? R_REJ_WW.last()
   || _Test:=R_REJ_WW.last() & R_REJ_WW.TP='WYJŚCIE';
      _Last:=R_REJ_WW.ref();
      _Mod:=R_REJ_WW.RD;
      _Test:=_Test & (R_REJ_WW.first() & R_REJ_WW.TP='WEJŚCIE' & R_REJ_WW.RD=_Mod);
      _First:=R_REJ_WW.ref();
      {? _Test
      || {!
         |? _Test:=(_Typ<>R_REJ_WW.TP);
            _Typ:=R_REJ_WW.TP;
            _Test & R_REJ_WW.next()
         !}
      ?};
      {!
      |? _Test & R_REJ_WW.prev() & (R_REJ_WW.ref()<>_First)
      |! _Mod:=R_REJ_WW.RD;
         R_REJ_WW.prev();
         _Test:=(_Mod=R_REJ_WW.RD)
      !}
   ?}
?};
R_REJ_WW.cntx_pop();
~_Test


\get_pop_doba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Sprawdzenie czy był zapis pracy w poprzedniej dobie.
::   WE: _a - [DATE] Data
::       _b - [REFERENCE] Ref współpracownika
::   WY: 1 - Jeżeli wystąpił taki zapis.
::  OLD: \get_pop_doba/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
R_REJ_WW.cntx_psh();
MASK.Use('R_REJ_WW',_a~1,_a~2);
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(_b,_a);
{? R_REJ_WW.first()
|| _dalej:=1;
   {!
   |? {? R_REJ_WW.ZM='D'
      || _ok:=1;
         _dalej:=0
      ?};
      _dalej & R_REJ_WW.next()
   !}
?};
R_REJ_WW.cntx_pop();
_ok

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:22 45a606b04f07d415f622f9756609be9b89511593d1d20032eda6a67c6e76c6b35a6f88e266fabdfd3568b5b9b24e8b9f9f08b03ab5ae2dc71124c607cd447129fdd1a9b020cb3509ff627109510597fce4723f7e24efc3dc47ab3a2cdd9e715636d3a246d72050e00a7571e23eb1d28e62af076736df65e215290b2b722ab195
