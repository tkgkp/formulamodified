:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: buffermk.fml []
:: Utworzony: 11.2012 []
:: Autor: jerry
::======================================================================================================================
:: Zawartosc: Lista tabel do wygenerowania w buffer.fml
:: UWAGA: To jest narzedzie, do wywolania recznie przez programiste/wdrozeniowca po zmianie struktury tabel
::        lub do zwiekszenia funkcjonalnosci buforow.
::        Wywolanie formul z tego pliku powinno odbywac sie _recznie_ z Administracja -> Formula
::        np.: exec('make_buffer','buffermk',0,'buffer.fml')
::======================================================================================================================


\make_buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Wykorzystuje exec('make_buffer_fml','libfml')
::   WE: NUMBER [_a] - interakcja z użytkownikiem? [1]-tak, 0-nie-wygenerowanie i zapisanie pliku _a.fml
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_interact:={? var_pres('_a')=1 || _a || 1 ?};

:: buffer.fml - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_par:=exec('par_def','buffermk');
_par.prepare(40);
::  .add(table   ,'acronym ','formula_name   ',"'extra','fields'")

:: użytkownicy
_par.add(USERS);
:: elementy technologii
_par.add(TOPER);
_par.add(TMAT);
_par.add(TCHMAT);
_par.add(TACTTLS);
:: zlecenia
_par.add(ZL);
:: zmienna konfiguracyjna widoku zleceń z zakładkami
_par.add(ZLV);
:: zmienna konfiguracyjna widoku kontrahentów z zakładkami
_par.add(KHV);
:: zmienna konfiguracyjna widoku projektów z zakładkami
_par.add(PROJVIEW);
:: kontrahent
_par.add(KH);
:: osoba kontaktowa
_par.add(KH_OSOB);
:: kontakty
_par.add(DOKUM);
:: Projekty
_par.add(PROJEKTY);
:: Zlecenia fakturowania
_par.add(FAKZ);
:: Faktury i pozycje
_par.add(FAKS);
_par.add(FAKSPL);
_par.add(FAP);
_par.add(FAKSV);
:: Zamówienia i pozycje
_par.add(ZK_N);
_par.add(ZK_P);

:: umowy współpracy
_par.add(H);
_par.add(H_UM);
_par.add(H_ODDE);

:: Partie, przewodniki, limity, wykonania
_par.add(ZPARN);
_par.add(ZPARS);
_par.add(ZGP);
_par.add(ZLIM);
_par.add(ZLGD);

:: Plan operacyjny
_par.add(PL_OPER);

:: Załączniki technologii/zleceń
_par.add(PLIKIDOC);

:: Definicja wzorca kalendarza
_par.add(KAL_OPIS);

:: Lista ustalona, czas na generowanie pliku buffer.fml
exec('make_buffer_fml','buffermk'
    ,'buffer'
    ,_interact
    ,_par
    );
obj_del(_par);

:: buffer1.fml - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_par:=exec('par_def','buffermk');
_par.prepare(26);

:: Zasoby remontowe i załączniki zasobów i zgłoszeń remontowych
_par.add(REM_ZAS);
_par.add(REM_ZASA);
_par.add(REM_ZGLA);
_par.add(REM_GWAZ);
_par.add(REM_GWAR);
_par.add(REM_CYKL);
_par.add(REM_HARM);

:: Dokumenty magazynowe i pozycje
_par.add(ND);
_par.add(DK);

:: Materiały
_par.add(M);

:: Plan operacyjny
_par.add(PL_EVENT);

:: Plan strategiczny
:: obiekty planistyczne
_par.add(PX_OBJ);
:: grupy planistyczne
::_par.add(PX_GRP);
:: punkty czasowe
_par.add(PX_POINT);
:: wykonania do planu
_par.add(PX_WYK);
:: widoki planu
_par.add(PX_VIEW);
:: bufor dla przenumerowywania
_rpv:=exec('reorder_px_verO','px_con_g');
_par.add(_rpv.px_grp,,'px_grp4jw');
::dokumenty
_par.add(DOKUMENT);
::dokumenty księgowe
_par.add(WEB_DOK);
_par.add(WEB_VPOZ);
_par.add(WEB_POZF);
_par.add(WEB_SKXD);
_par.add(WEB_POZ);
_par.add(WEB_DPLA);
_par.add(WEB_FKH);
::pozycje dokumentów
_par.add(POZDOK);

:: Lista ustalona, czas na generowanie pliku buffer1.fml
exec('make_buffer_fml','buffermk'
    ,'buffer1'
    ,_interact
    ,_par
    );
obj_del(_par);

:: - - - - - - - - Bufory dla tabel związanych z procesowością i innych będących elementami jądra - - - - - - - - - - -
_par:=exec('par_def','buffermk');
_par.prepare(100);
{! _tt:=1..tab_num()
|! _acr:=tab_acr(_tt);
   {? (2+_acr)='B_' | (3+_acr)='BI_'
   || _fml:="_a.add("+_acr+")";
      ($_fml)(_par)
   ?}
!};

:: definicje interwałów czasowych
_par.add(IVAL_DEF);

:: Załączniki do poczty
_par.add(POCZTAA);

_par.add(IMG_BLOB);

:: Lista ustalona, czas na generowanie pliku #buffer.fml
exec('make_buffer_fml','buffermk'
    ,'#buffer'
    ,_interact
    ,_par
    );
obj_del(_par);

{? Plugin.exists('BUFFERS_F_001') || Plugin.run('BUFFERS_F_001') ?};
~~


\make_buffer_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Tworzy plik buforowy dla podanej listy tabel
::       Wywołane w exec('make_buffer','buffermk')
::   WE: STRING   [_a] - nazwa pliku fml ['buffer']
::       NUMBER   [_b] - interakcja z użytkownikiem? [1]-tak, 0-nie-wygenerowanie i zapisanie pliku _a.fml
::       object   _c - obiekt parametrow exec('par_def','buffermk')
::                _d - czy tworzyć kopię pliku
::   WY: 1-ok / -<nr_bledu> - jezeli cos nie tak, to po numerze bledu mozna dojsc do przyczyny
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_filename:={? var_pres('_a')=2 || _a || 'buffer' ?};
{? (1+_filename<>'q') & Plugin.is_running()
|| FUN.emsg(
      'Obsługa buforów.\n\nNiedopuszczalna nazwa generowanego pliku: %1.\n'
      'Pliki generowane z formuły wdrożeniowej (wtyczki) muszą zaczynać się od litery %2.'@
      ['%1.fml'[_filename],'q']
   );
   return(0)
?};
_tm:=SYSLOG.tm_stamp();
::_tms:=19+tm_form(_tm);
_backfile:=_filename+'_fml'+form(_tm,,0,'99')+'.log';
_filename+='.fml';

_interact:={? var_pres('_b')=1 || _b || 1 ?};
_copyLog:={? var_pres('_d')=1 || _d || 0 ?};

_par:={? var_pres('_c')>100 || _c || {? _interact>0 || msg('Błąd 3-go parametru.') ?}; return(-1) ?};
_tables:=_par.tables;
_acrons:=_par.acrons;
_extraf:=_par.extraf;
_fnames:=_par.fnames;

_txt:='';
_header:=
':!UTF-8\r\n'+
':: (c) Macrologic S.A. Wszelkie prawa zastrzeżone\r\n'+
'::======================================================================================================================\r\n'+
':: Nazwa pliku: '+_filename+'\r\n'+
':: Autor: <wygenerowany automatycznie>\r\n'+
'::======================================================================================================================\r\n'+
':: UWAGA: Pliku nie należy modyfkować bezpośrednio.\r\n'+
'::        W przypadku konieczności dodania kolejnych definicji buforów, należy odpowiednio zmodyfikować formułę\r\n'+
'::        \make_buffer/buffermk.fml oraz uruchomoć ją: exec(\'make_buffer\',\'buffermk\',0)\r\n'+
'::======================================================================================================================\r\n'+
':: Dostępne metody:\r\n'+
'::   _buffer.blank() - czyszczenie bufora (dla parametru ~~ równoznaczne z bl_void())\r\n'+
'::   _buffer.bl_void() - czyszczenie bufora typem pustym ~~\r\n'+
'::   _buffer.bl_table() - czyszczenie bufora za pomocą wartości pól jak dla blank() tabeli\r\n'+
'::   _buffer.get() - pobieranie zawartości bufora\r\n'+
'::   _buffer.set() - pola<>~~ nanoszone do tabeli\r\n'+
'::   _buffer.setf() - wszystkie pola nanoszone do tabeli\r\n'+
'::   _buffer.cntx_get(ref()/#ref()[,maska]) - wczytuje bufor podanych parametrów\r\n'+
'::   _buffer.memo_put() - zapisuje wszystkie pola sys_memo tabeli\r\n'+
'::   _buffer.ref() - zwraca wartość .Ref\r\n'+
'::   _buffer.name() - zwraca akronim tabeli\r\n'+
'::   _buffer.this() - zwraca formułę służącą do powołania obiektu dla tej samej tabeli\r\n'+
'::   _buffer.acronyms() - zwraca tablicę akronimów pól\r\n'+
'::   _buffer.types() - zwraca tablicę typów pól\r\n'+
'::   _buffer.methods() - wyświetla listę metod obiektu z możliwością podejrzenia ich treści\r\n'+
'::======================================================================================================================\r\n'+
'\r\n';
_maxstrB:=524172;
_txt+=_header;
_txt_size:=exec('get_str_size','#string',_txt);
_result:=0;
_can_continue:=1;
{! _tt:=1..obj_len(_tables)
|? type_of(_tables[_tt])=type_of(SYSLOG)
   & _can_continue>0
|!
   echo('Generowanie '+_filename,_fnames[_tt]);
   _fml:='\r\n'
        +exec('table2bufmlcomp','libfml'
             ,_tables[_tt]
             ,_acrons[_tt]
             ,0
             ,_fnames[_tt]
             ,'<auto>'
             ,''
             ,_extraf[_tt]
             ,_filename
             );
   _fml_size:=exec('get_str_size','#string',_fml);
   {? _txt_size+_fml_size>_maxstrB
   || msg('Przekroczony rozmiar formuły dla '+_fnames[_tt]+'.\nProszę od tego miejsca tworzyć nowy plik formuł.');
      _result:=-2;
      _can_continue:=0

   || _txt_size+=_fml_size;
      _txt+=_fml
   ?}
!};
_txt+='\r\n\r\n';
{? _interact
|| _txt:=exec('edit_memo','#edit',_txt,,'Propozycja '+_filename+' ('+form(+_txt,,,' 9')+' znaków)',160,40);
   {? _txt<>''
    & ask('Czy zapisać propozycję do pliku '''+_filename+'''?','Generowanie buforów')
   || 1
   || _txt:=''
   ?}
?};
{? _txt<>''
 & ( fexists(_filename,1)=0
   | {?_copyLog || fcopy(_filename,_backfile,1,1,1) || 1 ?}
   )
||
   _file:=fopen(_filename,'uw',1);
   {? _file>0
   || fwrite(_file,_txt);
      _result:=1;
      fclose(_file)
   || _result:=-3;
      {? _interact
      || msg('Nie udało się utworzyć pliku '''+_filename+'''.')
      ?}
   ?}
|| _result:=-4
?};
echo();
_result


\par_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Parametry dla exec('make_buffer','buffermk')
::   WY: obiekt _par
::----------------------------------------------------------------------------------------------------------------------
_par:=obj_new('tables','acrons','fnames','extraf','pos','add','prepare','size');
_par.prepare:=".size:=_a;
               _on:=\"_obj:=obj_new(_a); {!_aa:=1.._a |! _obj[_aa]:=_b !}; _obj\";
               .tables:=_on(.size,~~);
               .acrons:=_on(.size,'_a');
               .fnames:=_on(.size,'');
               .extraf:=_on(.size,~~);
               .pos:=0;
               ~~
              ";
_par.add:="
   {? .pos<.size
   || .pos+=1;
      .tables[.pos]:=_a;
      .acrons[.pos]:={? var_pres('_b')=2 || _b || _Tab:=exec('tab_acr','#table',.tables[.pos]); {? _Tab<>'' || _Tab || '_a' ?} ?};
      .fnames[.pos]:={? var_pres('_c')=2 || _c || .acrons[.pos] ?};
      {? var_pres('_d')=3 || .extraf[.pos]:=_d ?};
      1
   || msg('Przekroczona liczba elementów.')
   ?}
";
_par


\extend_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Rozszerz standardowy get z obiektu bufora
::   WE: _a - bufor
::       _b - reguła do wstawienia
::   WY: 1-ok / -<nr_bledu> - jezeli cos nie tak, to po numerze bledu mozna dojsc do przyczyny
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_buffer:=_a;
_rule:=_b;
_gp:=_buffer.get*'(.)';
{? _gp>0
|| _buffer.get:=(_gp-1)+_buffer.get;
   _buffer.get:=$(_buffer.get+'\n'+_rule+'\n(.)');
   1
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 a52eeabfbc39aff7f1c147d86988261d9735901b7fb114c9f2976e804a9a380a416248010d42cf21ee0b09fd18b749f5080a081cc8ad4cd0f7a68c89bafb8db68c53ea5fe3a127499e7eac8ee74aaa643e7749acb8fbc703630b02f072ebcf9ec42bda339a6033ee2d612b04c00ace88f773159f51577c3bcd2accaaac887a4c
