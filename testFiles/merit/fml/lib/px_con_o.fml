:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: px_con_o.fml [12.30]
:: Utworzony: 10.12.2011
:: Autor: jerry
::======================================================================================================================
:: Zawartosc: Formuly do obslugi powiazan miedzy obiektami
::======================================================================================================================


\diagram
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Generuje diagram zaleznosci miedzy obiektami
::----------------------------------------------------------------------------------------------------------------------
PX_OBJ.cntx_psh(); PX_OBJ.clear();
PX_CON_O.cntx_psh(); PX_CON_O.clear();
PX_OBJ.index('SYMBOL');
_dia:=exec('dot_obj','#graph','px_obj','svg');
{? PX_CON_O.first()
||
   _reftable:=exec('ref_table','#table');
   _prevs:=exec('ref_table','#table');
   _nexts:=exec('ref_table','#table');
   {? PX_CON_O.first()
   || {!
      |?
         {? PX_CON_O.PX_OBJ_P<>null()
          & _reftable.r_find(PX_CON_O.PX_OBJ_P)=0
         || _reftable.r_add(PX_CON_O.PX_OBJ_P);
            {? _prevs.r_find(PX_CON_O.PX_OBJ_P)=0 || _prevs.r_add(PX_CON_O.PX_OBJ_P) ?}
         ?};
         {? PX_CON_O.PX_OBJ_N<>null()
          & _reftable.r_find(PX_CON_O.PX_OBJ_N)=0
         || _reftable.r_add(PX_CON_O.PX_OBJ_N);
            {? _nexts.r_find(PX_CON_O.PX_OBJ_N)=0 || _nexts.r_add(PX_CON_O.PX_OBJ_N) ?}
         ?};
         PX_CON_O.next()
      !}
   ?};

   {? _dia.open()
   ||
      _graph:=_dia.cr_graph();
      _graph.rankdir:="LR";
      _graph.rank:="min";
      _dia.add_graph('px_obj',_graph);

      _node:=_dia.cr_node();
      _node.shape:=_dia.enum.shape.Mrecord;
::   _node.shape:=_dia.enum.shape.box;
      _node.style:="filled";
::   _node.fixedsize:='true';
::   _node.height:='5.0';
::   _node.width:='5.0';
      _dia.add_node('node',_node);

      {? PX_OBJ.first()
      ||
         {!
         |?
            {? _reftable.r_find(PX_OBJ.ref())
            || _dia.clean(_node);
               _node.label:=exec('diagram_label','px_con_o',PX_OBJ.ref());
               {? PX_OBJ.DIR=-1
               ||
::                sprawdzam, czy planowanie od końca, a nie będzie terminu realizacji skad wziąć
                  {? PX_OBJ.TM_REA=0 & _prevs.r_find(PX_OBJ.ref())=0
                  || _node.color:=_dia.enum.color.black; _node.fontcolor:=_dia.enum.color.red
                  || _node.color:=_dia.enum.color.black; _node.fontcolor:=_dia.enum.color.yellow
                  ?}
               |? PX_OBJ.DIR=0  || _node.color:=_dia.enum.color.gray;  _node.fontcolor:=_dia.enum.color.white
               |? PX_OBJ.DIR=1  || _node.color:=_dia.enum.color.black; _node.fontcolor:=_dia.enum.color.lime
                                || _node.color:=_dia.enum.color.red;   _node.fontcolor:=_dia.enum.color.yellow
               ?};
               _dia.add_node($$PX_OBJ.ref(),_node)
            ?};
            PX_OBJ.next()
         !}
      ?};

      _edge:=_dia.cr_edge();
      _edge.color:=_dia.enum.color.navy;
::      _edge.decorate:=null();

      _ndx:=PX_CON_O.ndx_tmp( ,1,'PX_OBJ_P','SYMBOL',,'PX_OBJ_N','SYMBOL',);
      PX_CON_O.cntx_psh();
      PX_CON_O.index(_ndx);
      {? PX_CON_O.first()
      || _obj_p:=exec('PX_OBJ','buffer1');
         _obj_n:=exec('PX_OBJ','buffer1');
         {!
         |?
            _edge.color:=_dia.enum.color.navy;
::            PX_OBJ.
            PX_CON_O.PX_OBJ_P(); _obj_p.get();
            PX_CON_O.PX_OBJ_N(); _obj_n.get();
            {? _obj_p.DIR=-1 & _obj_n.DIR=1
            || {? _obj_p.TM_REA=0 & _obj_n.TM_START=0 || _edge.color:=_dia.enum.color.red
               |? _obj_p.TM_REA=0 | _obj_n.TM_START=0 || _edge.color:=_dia.enum.color.fuchsia
               ?}
            ?};
            _dia.add_edge($$PX_CON_O.PX_OBJ_P,$$PX_CON_O.PX_OBJ_N,_edge);
            PX_CON_O.next()
         !}
      ?};
      PX_CON_O.cntx_pop();
      PX_CON_O.ndx_drop(_ndx);
      _dia.run()

   || FUN.emsg('Nie powiodła się próba utworzenia diagramu.'@)
   ?}
|| FUN.info('Nie występują powiązania między obiektami.'@)
?};
PX_CON_O.cntx_pop();
PX_OBJ.cntx_pop();
~~


\diagram_label
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [12.30]
:: OPIS: Generuje wpis dla podanego PX_OBJa
::   WE: _a - PX_OBJ.ref()
::   WY: STRING - tekst dla diagramu
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_px_obj:=_a;
_label:='????';
PX_OBJ.cntx_psh();
{? (PX_OBJ.ref()=_px_obj)
 | (PX_OBJ.clear(); PX_OBJ.seek(_px_obj))
||
   _label:='<\n<TABLE CELLPADDING="0" CELLSPACING="0" BORDER="0" WIDTH="100">';
   _label+='\n<TR><TD ALIGN="LEFT">Obiekt:</TD><TD ALIGN="LEFT">'+PX_OBJ.SYMBOL+'</TD></TR>';
   _label+='\n<TR><TD ALIGN="LEFT"></TD><TD ALIGN="LEFT"></TD></TR>';
   _label+='\n<TR><TD ALIGN="LEFT">Planowanie</TD><TD ALIGN="LEFT"></TD></TR>';

   _dir:={? PX_OBJ.DIR=-1 || '◄ wstecz'
         |? PX_OBJ.DIR=0  || '░ dowolny'
         |? PX_OBJ.DIR=1  || '► w przód'
                          || '!!! błąd !!!'
         ?}+{? PX_OBJ.TM_START>0 || ' po '+19+tm_form(PX_OBJ.TM_START) || '' ?};
   _label+='\n<TR><TD ALIGN="LEFT">Zwrot:</TD><TD ALIGN="LEFT">'+_dir+'</TD></TR>';

   _value:={? PX_OBJ.TM_REA>0 || 19+tm_form(PX_OBJ.TM_REA) || ''?};
   _label+='\n<TR><TD ALIGN="LEFT">Termin wymagany:</TD><TD ALIGN="LEFT">'+_value+'</TD></TR>';

   _value:={? PX_OBJ.TM_PLEND>0 || 19+tm_form(PX_OBJ.TM_PLEND) || ''?};
   _label+='\n<TR><TD ALIGN="LEFT">Termin zaplanowany:</TD><TD ALIGN="LEFT">'+_value+'</TD></TR>';

   ZL.cntx_psh();
   {? PX_OBJ.KIND=exec('kind_proj_zad','px_obj')
   || PROJEKTY.cntx_psh();
      PROJETAP.cntx_psh();
      _label+='\n<TR><TD ALIGN="RIGHT">Zadanie:</TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().SYMZ+'</TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT"> </TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().OPIS+'</TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT"> </TD><TD ALIGN="LEFT"> </TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT">Etap:</TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().PROJETAP().SYMBOL+'</TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT"> </TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().PROJETAP().OPIS+'</TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT"> </TD><TD ALIGN="LEFT"> </TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT">Projekt:</TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().PROJEKTY().SYM_PROJ+'</TD></TR>';
      _label+='\n<TR><TD ALIGN="RIGHT"> </TD><TD ALIGN="LEFT">'+PX_OBJ.ZL().PROJEKTY().NAZWA+'</TD></TR>';

      PROJETAP.cntx_pop();
      PROJEKTY.cntx_pop();
      'zadanie projektu'

   |? PX_OBJ.KIND=exec('kind_zl_prod','px_obj')
   || 'zlecenie produkcyjne'
   |? PX_OBJ.KIND=exec('kind_zl_warszt','px_obj')
   || 'zlecenie warsztatowe'
   ?};
   ZL.cntx_pop();

   _label+='\n</TABLE>\n>'
?};
PX_OBJ.cntx_pop();
_label


\ZL_powiaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Dodanie PX_CON_O'ow na podstawie powiazan zlecen
::   WE: _a - ZL.ref()
::----------------------------------------------------------------------------------------------------------------------
:: powolanie i ustawienie zmiennych lokalnych
_loc:=obj_new('ZL');
_loc.ZL:=_a;

:: konteksty i czyszczenie dziedzin
Cntx.psh(ZL,PX_OBJ,PX_CON_O);
Cntx.clr(ZL,PX_OBJ,PX_CON_O);

{? ZL.seek(_loc.ZL)
||
   PX_OBJ.index('ZL');
   PX_OBJ.prefix(ZL.ref());
   {? PX_OBJ.first()
   ||
::    Dla PX_OBJ'a do zlecenia najpierw czyscimy powiazania - niepotrzebne w tym kontekscie
::      exec('del_obj','px_con_o',PX_OBJ.ref());
      PX_CON_O.clear();

::    Powiazania generowane tylko dla zlecen pojedynczych zaleznych
      _zlnad_r:=ZL.RODZAJ;
      ZL.cntx_psh();
      ZL.clear();
      ZL.index('UNRZL');
      ZL.prefix(ZL.NRNZL);
      {? ZL.first() || _zlnad_r:=ZL.RODZAJ ?};
      ZL.cntx_pop();

      {? ZL.RODZAJ='P' & _zlnad_r<>'N'
      ||
         _unrzl:=ZL.UNRZL;
         _nrnzl:=ZL.NRNZL;
         _nrpzl:=ZL.NRPZL;
         _px_obj:=PX_OBJ.ref();

::       zlecenie na produkt glowny zlecenia nadrzednego (pierwsze zlecenie podrzedne)
         ZL.index('NRNZL');
         ZL.prefix(_nrnzl,1,ZL.TYP);
         {? ZL.first() || _zl1:=ZL.ref() || _zl1:=null() ?};

::       zlecenia nadrzedne do danego sa jego nastepnikami
         {? _nrnzl<>0
         ||
            ZL.index('UNRZL');
            ZL.prefix({? _nrpzl=0 || _nrnzl || _nrpzl ?});
            {? ZL.first()
            ||
               PX_OBJ.cntx_psh();
               PX_OBJ.index('ZL');
               {? ZL.RODZAJ<>'P' & _zl1<>null()
               || PX_OBJ.prefix(_zl1);
                  {? PX_OBJ.first()
                  || PX_CON_O.PX_OBJ_P:=_px_obj;
                     PX_CON_O.PX_OBJ_N:=PX_OBJ.ref();
                     {? PX_CON_O.PX_OBJ_P<>PX_CON_O.PX_OBJ_N || PX_CON_O.add(1) ?}
                  ?}
               || PX_OBJ.prefix(ZL.ref());
                  {? PX_OBJ.first()
                  || PX_CON_O.PX_OBJ_P:=_px_obj;
                     PX_CON_O.PX_OBJ_N:=PX_OBJ.ref();
                     {? PX_CON_O.PX_OBJ_P<>PX_CON_O.PX_OBJ_N || PX_CON_O.add(1) ?}
                  ?}
               ?};

               PX_OBJ.cntx_pop()
            ?}
         ?}
      ?}
   ?}
?};

Cntx.pop(ZL,PX_OBJ,PX_CON_O);
~~


\del_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Usuwa powiazania miedzyobiektowe dla obiektu
::   WE: _a - PX_OBJ.ref()
::   WY: 0 / 1 (czy udalo sie usunac wszystkie powiazania)
::----------------------------------------------------------------------------------------------------------------------
PX_CON_O.cntx_psh();

PX_CON_O.index('NP');
PX_CON_O.prefix(_a);
{? PX_CON_O.first() || {! |? PX_CON_O.del() !} ?};
_ok1:=~PX_CON_O.first();

PX_CON_O.index('PN');
PX_CON_O.prefix(_a);
{? PX_CON_O.first() || {! |? PX_CON_O.del() !} ?};
_ok2:=~PX_CON_O.first();

PX_CON_O.cntx_pop();
_ok1 & _ok2

:Sign Version 2.0 jowisz:1045 2020/04/03 17:16:45 85c133cae18d25703c74b2817480e84c1e8797293c161442051945a907397e147ccd9774f23a8bb0793232f8ad794ed2176e84fcf4d39542ab6363f4cdab112871ab51165cc775b94b218bd2d0b4f6cdb194c12af4caf8feb7449891d6c9e033ea1a682b2892a6158740059832e2aeaa9d3d9b3b3bdec5ae029b2f51cd251dd4
