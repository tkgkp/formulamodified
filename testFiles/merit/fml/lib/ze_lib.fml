:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ze_lib.fml [23.25]
:: Utworzony: 22.09.2022
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły obsługujące zestawy elementów (warstwa techniczna).
::======================================================================================================================


\_x_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed dołączeniem/modyfikacją wiersza tabeli ZE_* podlegającej aktualizacji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_tt:=var_pres('SYSTEM',ZE_GRP);

{? var_pres('SYSTEM',_a)=_tt
|| {? _a.SYSTEM='T'
::    chroń zapisy systemowe
   || {? var_pres('GRUPA',_a)=_tt
      || _a.GRUPA:='T'
      ?}

   || {? var_pres('KOD',_a)=_tt & (_a.KOD='' | #_a.KOD=0)
::       uzupełnij kod dla aktualizacji
      || _a.KOD:=$_a.tm_stamp()
      ?}
   ?}
?};
~~


\_x_bf_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw tabel ZE_B*.
::   WE: _a [TABLE] - alias tabeli
::       _b [STRING] - akronim pola wskazującego zapis nadrzędny
::       _c [STRING] - akronim pola wskazującego firmę/dziedzinę
::       _d [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_own:=_b;
_use:=_c;
_mod:=_d;

__CHK.validate(_TAB,
:: sprawdź wypełnienie pól i unikalność indeksów
   $('_a.table(_b,%1,,\'SYSTEM\',\'KOD\',\'%2\',\'%3\')'[$_mod,_own,_use]),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')"
)


\_x_chk_formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Weryfikuje składnię formuły.
::   WE: _a [OBJECT] - referencja obiektu __CHK
::       _b [TABLE] - alias tabeli
::       _b [STRING] - akronim pola zawierającego treść formuły
::   WY: _a/1 - błędna/formuła poprawna lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_obj:=_a;
_TAB:=_b;
_acr:=_c;

{? (_fml:=_TAB.memo_txt(,0,_acr))=''
|| return(1)
?};

_CHK:=form_chk($_fml);
{? ~_CHK.first()
|| return(1)
?};

_obj.err_fld(_TAB,_acr,1,'W formule wykryto błędy składniowe.\n%1'@[_CHK.ERR_DESC]);
_acr


\_bdef_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_BDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_BDEF);

:: kontrola poprawności wiersza
exec('_bdef_chk','ze_lib',0)


\_bdef_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_BDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_BDEF);

:: kontrola poprawności wiersza
exec('_bdef_chk','ze_lib',1)


\_bdef_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
exec('_x_bf_chk','ze_lib',ZE_BDEF,'ZE_DEF','B_DOMAIN',{? var_pres('_a')=type_of(0) || _a<>0 ?})


\_bgrp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_BGRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_BGRP);

:: kontrola poprawności wiersza
exec('_bgrp_chk','ze_lib',0)


\_bgrp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_BGRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_BGRP);

:: kontrola poprawności wiersza
exec('_bgrp_chk','ze_lib',1)


\_bgrp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
exec('_x_bf_chk','ze_lib',ZE_BGRP,'ZE_GRP','B_DOMAIN',{? var_pres('_a')=type_of(0) || _a<>0 ?})


\_fdef_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_FDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_FDEF);

:: kontrola poprawności wiersza
exec('_fdef_chk','ze_lib',0)


\_fdef_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_FDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_FDEF);

:: kontrola poprawności wiersza
exec('_fdef_chk','ze_lib',1)


\_fdef_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucl
::----------------------------------------------------------------------------------------------------------------------
exec('_x_bf_chk','ze_lib',ZE_FDEF,'ZE_DEF','FIRMA',{? var_pres('_a')=type_of(0) || _a<>0 ?})


\_fgrp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_FGRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_FGRP);

:: kontrola poprawności wiersza
exec('_fgrp_chk','ze_lib',0)


\_fgrp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_FGRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_FGRP);

:: kontrola poprawności wiersza
exec('_fgrp_chk','ze_lib',1)


\_fgrp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
exec('_x_bf_chk','ze_lib',ZE_FGRP,'ZE_GRP','FIRMA',{? var_pres('_a')=type_of(0) || _a<>0 ?})


\_def_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_DEF);

:: kontrola poprawności wiersza
exec('_def_chk','ze_lib',0)


\_def_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_DEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_DEF);

:: kontrola poprawności wiersza
exec('_def_chk','ze_lib',1)


\_def_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_DEF.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',ZE_BDEF,'SYM_DOM',ZE_DEF.ref()) &
exec('del_ndx','#table',ZE_FDEF,'SYM_FIR',ZE_DEF.ref()) &
exec('del_ndx','#table',ZE_WDEF,'RODZAJ',ZE_DEF.ref()) &
exec('del_ndx','#table',ZE_KIR,'NUMER',ZE_DEF.ref()) &
exec('del_ndx','#table',ZE_LST,'FK_2',ZE_DEF.ref())


\_def_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny kluml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_DEF,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','TABELA','ZM_NAZWA','NAZWA','SYMBOL','GRUPA','DOSTEPNA')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: sprawdź, czy podano dozwolony akronim tabeli
   "exec('_def_chk_table','ze_lib',_a)",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')",
:: zweryfikuj dozwolone wartości znacznika ZM_NAZWA
   "exec('chk_yes_no','#symsys',_a,_b,'ZM_NAZWA')",
:: weryfikacja symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dozwolone wartości znacznika GRUPA
   "exec('chk_yes_no','#symsys',_a,_b,'GRUPA')",
:: dozwolone wartości znacznika DOSTEPNA
   "exec('chk_yes_no','#symsys',_a,_b,'DOSTEPNA')",
:: weryfikuj składnię formuły PROLOG
   "exec('_x_chk_formula','ze_lib',_a,_b,'PROLOG')",
:: weryfikuj składnię formuły ZAKRES
   "exec('_x_chk_formula','ze_lib',_a,_b,'ZAKRES')",
:: weryfikuj składnię formuły EPILOG
   "exec('_x_chk_formula','ze_lib',_a,_b,'EPILOG')"
)


\_def_chk_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy pole TABELA zawiera akronim niesystemowej tabeli stałej.
::   WE: _a [OBJECT] - referencja obiektu __CHK
::   WY: 'TABELA'/1 - błędny/poprawny akronim lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
{? ZE_DEF.TABELA='' | (var_pres(ZE_DEF.TABELA)=118 & ~exec('tab_sys','#table',ZE_DEF.TABELA))
|| return(1)
?};

_a.err_fld(ZE_DEF,'TABELA',1,'"%1" nie jest dozwolonym akronimem tabeli.'[ZE_DEF.TABELA]);
'TABELA'


\_grp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_GRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_GRP);

:: kontrola poprawności wiersza
exec('_grp_chk','ze_lib',0)


\_grp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_GRP.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_GRP);

:: kontrola poprawności wiersza
exec('_grp_chk','ze_lib',1)


\_grp_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli ZE_GRP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania
{? _a=0 | do_state()<>1
|| return()
?};

{? ZE_GRP.SYMBOL<>bfld('SYMBOL')
:: aktualizuj anomalię
|| ZE_POZ.cntx_psh();
   ZE_POZ.index('ZE_GRP');
   ZE_POZ.prefix(ZE_GRP.ref());
   _loop:=ZE_POZ.first();
   {!
   |? _loop
   |! ZE_POZ.SYM_GRP:=ZE_GRP.put();
      ZE_POZ.put();
      _loop:=ZE_POZ.next()
   !};
   ZE_POZ.cntx_pop()
?};
~~


\_grp_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_GRP.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',ZE_BGRP,'SYM_DOM',ZE_GRP.ref()) &
exec('del_ndx','#table',ZE_FGRP,'SYM_FIR',ZE_GRP.ref()) &
exec('del_ndx','#table',ZE_LST,'UNIQUE',ZE_GRP.ref())


\_grp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_GRP,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','NAZWA','SYMBOL','GRUPA','DOSTEPNA')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')",
:: weryfikacja symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dozwolone wartości znacznika GRUPA
   "exec('chk_yes_no','#symsys',_a,_b,'GRUPA')",
:: dozwolone wartości znacznika DOSTEPNA
   "exec('chk_yes_no','#symsys',_a,_b,'DOSTEPNA')"
)


\_kir_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_KIR);

:: kontrola poprawności wiersza
exec('_kir_chk','ze_lib',0)


\_kir_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_KIR);

:: kontrola poprawności wiersza
exec('_kir_chk','ze_lib',1)


\_kir_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
1


\_kir_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli ZE_KIR.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1
|| return()
?};

ZE_KIR.cntx_psh();
ZE_KIR.index('NUMER');
ZE_KIR.prefix(bfld('ZE_DEF'));
_loop:=ZE_KIR.find_ge(bfld('NUMER'));
{!
|? _loop
|! ZE_KIR.NUMER-=1;
   ZE_KIR.put();
   _loop:=ZE_KIR.next()
!};
ZE_KIR.cntx_pop();
~~


\_kir_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_KIR,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','ZE_DEF','KOL_TAB')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')"
)


\_lst_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed modyfikacją wiersza tabeli ZE_LST.
::   WE: _a [INTEGER] - 0/1 - dołączanie / poprawianie wiersza
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_LST);

_pth:='';
{? ZE_LST.ZE_LST<>0
|| ZE_LST.cntx_psh();
   {? ZE_LST.seek(ZE_LST.ZE_LST,,1)
   || _pth:=ZE_LST.SCIEZKA
   ?};
   ZE_LST.cntx_pop()
?};
ZE_LST.SCIEZKA:='%1%2|'[_pth,ZE_LST.SYMBOL];

:: kontrola poprawności wiersza
exec('_lst_chk','ze_lib',_a)


\_lst_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_LST.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, sprawdzenie poprawności
exec('_lst_modb','ze_lib',0)


\_lst_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_LST.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, sprawdzenie poprawności
exec('_lst_modb','ze_lib',1)


\_lst_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli ZE_LST.
::   WE: _a - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania
{? _a=0 | do_state()<>1
|| return()
?};

_update:="";
{? (bfld('DOSTEPNA')<>ZE_LST.DOSTEPNA & ZE_LST.DOSTEPNA='N')
|| _update+="ZE_LST.DOSTEPNA:='N';"
?};
{? bfld('WSPOLNA')<>ZE_LST.WSPOLNA
|| _update+="ZE_LST.WSPOLNA:=_a;"
?};
{? _update<>''
|| _update+="ZE_LST.put()";
   _update:=$_update;
   _shr:=ZE_LST.WSPOLNA;
   ZE_LST.cntx_psh();
   ZE_LST.index('UNIQUE');
   ZE_LST.prefix(#ZE_LST.ref());
   _loop:=ZE_LST.first();
   {!
   |? _loop
   |! _update(_shr);
      _loop:=ZE_LST.next()
   !};
   ZE_LST.cntx_pop()
?};

{? ZE_LST.SYMBOL<>bfld('SYMBOL')
:: aktualizuj anomalię
|| ZE_POZ.cntx_psh();
   ZE_POZ.index('UNIQUE');
   ZE_POZ.prefix(ZE_LST.ref());
   _loop:=ZE_POZ.first();
   {!
   |? _loop
   |! ZE_POZ.SYM_LST:=ZE_LST.put();
      ZE_POZ.put();
      _loop:=ZE_POZ.next()
   !};
   ZE_POZ.cntx_pop()
?};
~~


\_lst_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_LST.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',ZE_POZ,'UNIQUE',ZE_LST.ref()) &
exec('del_ndx','#table',ZE_LST,'FK_1',#ZE_LST.ref())


\_lst_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_LST,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','ZE_GRP','ZE_DEF','NAZWA','SYMBOL','WSPOLNA','DOSTEPNA')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')",
:: weryfikacja symbolu standardowego lub użytkownika
   "exec('chk_symbol','#symsys',_a,_b,'SYSTEM','SYMBOL')",
:: dozwolone wartości znacznika WSPOLNA
   "exec('chk_yes_no','#symsys',_a,_b,'WSPOLNA')",
:: dozwolone wartości znacznika DOSTEPNA
   "exec('chk_yes_no','#symsys',_a,_b,'DOSTEPNA')"
)


\_wdef_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Dla wyzwalaczy przed dołączeniem / poprawieniem wiersza tabeli ZE_WDEF.
::   WE: _a [INTEGER] - 0/1 - dołączanie / poprawianie wiersza
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_WDEF);

:: wyłącz domyślne okienko
{? ZE_WDEF.DOSTEPNE='T'
|| _ref:={? _a<>0 || ZE_WDEF.ref() || null ?};
   ZE_WDEF.cntx_psh();
   ZE_WDEF.index('DOSTEPNE');
   ZE_WDEF.prefix();
   {? ZE_WDEF.find_key(ZE_WDEF.ZE_DEF,'T',ZE_WDEF.SLO_KOD().KOD,)
      & ZE_WDEF.ref()<>_ref
   || ZE_WDEF.prefix();
      ZE_WDEF.DOSTEPNE:='N';
      ZE_WDEF.put()
   ?};
   ZE_WDEF.cntx_pop()
?};

:: kontrola poprawności wiersza
exec('_wdef_chk','ze_lib',_a)


\_wdef_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_WDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, kontrola poprawności wiersza
exec('_wdef_modb','ze_lib',0)


\_wdef_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_WDEF.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, kontrola poprawności wiersza
exec('_wdef_modb','ze_lib',1)


\_wdef_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_WDEF.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
exec('del_ndx','#table',ZE_WKOL,'NUMER',ZE_WDEF.ref())


\_wdef_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli ZE_WDEF.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1
|| return()
?};

{? bfld('DOSTEPNE')='T'
|| SLO_KOD.cntx_psh();
   {? SLO_KOD.seek(bfld('SLO_KOD'),,1)
   || ZE_WDEF.cntx_psh();
      ZE_WDEF.index('DOSTEPNE');
      ZE_WDEF.prefix(bfld('ZE_DEF'),'N',SLO_KOD.KOD,);
::    znajdź ostatnie dostępne okienko
      {? ZE_WDEF.last()
      || ZE_WDEF.prefix();
         ZE_WDEF.DOSTEPNE:='T';
         ZE_WDEF.put()
      ?};
      ZE_WDEF.cntx_pop()
   ?};
   SLO_KOD.cntx_pop()
?};
~~


\_wdef_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_WDEF,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','ZE_DEF','SLO_KOD','KOLUMNY','DOSTEPNE')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')",
:: zweryfikuj dozwolone wartości znacznika KOLUMNY
   "exec('chk_yes_no','#symsys',_a,_b,'KOLUMNY')",
:: weryfikuj składnię formuły FORMULA
   "exec('_x_chk_formula','ze_lib',_a,_b,'FORMULA')",
:: zweryfikuj dozwolone wartości znacznika DOSTEPNE
   "exec('chk_yes_no','#symsys',_a,_b,'DOSTEPNE')"
)


\_wkol_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_WKOL);

:: kontrola poprawności wiersza
exec('_wkol_chk','ze_lib',0)


\_wkol_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_WKOL);

:: kontrola poprawności wiersza
exec('_wkol_chk','ze_lib',1)


\_wkol_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::----------------------------------------------------------------------------------------------------------------------
:: usuń powiązane rekordy
1


\_wkol_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli ZE_WKOL.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1
|| return()
?};

ZE_WKOL.cntx_psh();
ZE_WKOL.index('NUMER');
ZE_WKOL.prefix(bfld('ZE_WDEF'));
_loop:=ZE_WKOL.find_ge(bfld('NUMER'));
{!
|? _loop
|! ZE_WKOL.NUMER-=1;
   ZE_WKOL.put();
   _loop:=ZE_WKOL.next()
!};
ZE_WKOL.cntx_pop();
~~


\_wkol_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_WKOL,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','ZE_WDEF','KOL_TAB','DLUGOSC')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')"
)


\_poz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed modyfikacją wiersza tabeli ZE_POZ.
::   WE: _a [INTEGER] - 0/1 - dołączanie / poprawianie wiersza
::   WY: 0/1 - wiersz błędny/poprawny
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych
exec('_x_modb','ze_lib',ZE_POZ);

_err:=1;
ZE_GRP.cntx_psh();
ZE_LST.cntx_psh();
ZE_DEF.cntx_psh();
:: pielęgnacja anomalii
ZE_POZ.SYM_LST:=ZE_POZ.ZE_LST().SYMBOL;
ZE_POZ.SYM_GRP:=ZE_LST.ZE_GRP().SYMBOL;
{? ZE_POZ.SRC_ADD<>'' & var_pres(ZE_LST.ZE_DEF().TABELA)=type_of(SYSLOG)
|| _TAB:=($ZE_DEF.TABELA)();
   _TAB.cntx_psh();
   _TAB.prefix();
   {? _TAB.find_tab(,_TAB.idadd_acr(),,'=',ZE_POZ.SRC_ADD)
   || ZE_POZ.SRC_REF:=$_TAB.ref();
      ZE_POZ.SRC_UID:=_TAB.uidref();
      ZE_POZ.SRC_MDB:=_TAB.name();
      ZE_POZ.SRC_NUM:=#_TAB.ref();
      _err:=0
   ?};
   _TAB.cntx_pop()
?};
ZE_DEF.cntx_pop();
ZE_LST.cntx_pop();
ZE_GRP.cntx_pop();

:: kontrola poprawności wiersza
~_err & exec('_poz_chk','ze_lib',_a)


\_poz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli ZE_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, sprawdzenie poprawności
exec('_poz_modb','ze_lib',0)


\_poz_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po dołączeniu wiersza tabeli ZE_POZ.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania
{? _a=0 | do_state()<>1
|| return()
?};
~~


\_poz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli ZE_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: uzupełnienie/ochrona wartości domyślnych, sprawdzenie poprawności
exec('_poz_modb','ze_lib',1)


\_poz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po poprawieniu wiersza tabeli ZE_POZ.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania
{? _a=0 | do_state()<>1
|| return()
?};
~~


\_poz_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli ZE_POZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\_poz_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyzwalacz po usunięciu wiersza tabeli ZE_POZ.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: warunek dalszego działania
{? _a=0 | do_state()<>1
|| return()
?};
~~


\_poz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::   WY: wynik testu poprawności danych zależny od kontekstu wywołania:
::       - jako formuła "rekord po"
::          - akronim niewypełnionego pola
::          - akronim pola o błędnej wartości
::          - 0 w przypadku powielenia unikalnego klucza
::       - jako formuła sprawdzająca dla wyzwalaczy "dołącz przed" i "popraw przed"
::          - 1 wiersz poprawny
::          - 0 niewypełnione wymagane pole, błędna wartość pola, powielony unikalny klucz
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(ZE_POZ,
:: sprawdź wypełnienie pól i unikalność indeksów
   $("_a.table(_b,"+$_mode+",,'SYSTEM','KOD','ZE_LST','SRC_ADD','DOSTEPNY')"),
:: zweryfikuj dozwolone wartości znacznika SYSTEM
   "exec('chk_yes_no','#symsys',_a,_b,'SYSTEM')",
:: weryfikacja kodu standardowego lub użytkownika
   "exec('chk_code','#symsys',_a,_b,'SYSTEM','KOD')",
:: dozwolone wartości znacznika DOSTEPNY
   "exec('chk_yes_no','#symsys',_a,_b,'DOSTEPNY')"
)


\x_system_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją pola SYSTEM w wierszach tabel ZE_*.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
exec('runtime_dro','#system')


\x_system_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola SYSTEM w wierszach tabel ZE_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

exec('mod_uid','#symsys',_TAB,'SYSTEM','KOD');

{? _TAB.KOD='' & exec('x_system_t','ze_lib',_TAB)
|| _TAB.KOD:=exec('x_kod_gen','ze_lib',_TAB)
?};

1


\x_system_ae_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola SYSTEM w wierszach tabel ZE_* z obsługą pola GRUPA.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

exec('x_system_ae','ze_lib',_TAB);
{? exec('x_system_t','ze_lib',_TAB)
|| _TAB.GRUPA:='T'
?};

1


\x_system_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz jest zapisem systemowym, zablokowanym do edycji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: 0/1 - można zmieniać dane/zapis nie może być modyfikowany
::----------------------------------------------------------------------------------------------------------------------
_a.SYSTEM='T'


\x_system_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz nie jest zapisem systemowym, dostępnym do edycji.
::   WE: _a TABLE - alias tabeli z kolumną SYSTEM
::   WY: 0/1 - zapis nie może być modyfikowany/można zmieniać dane
::----------------------------------------------------------------------------------------------------------------------
_a.SYSTEM='N'


\x_kod_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola KOD tabel ZE_*. Dla definicji użytkownika kod musi składać się wyłącznie z cyfr.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
{? exec('x_system_n','ze_lib',cur_tab(1,1)) || '9!' || 'u!' ?}


\x_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wartość początkowa pola KOD w wierszach tabel ZE_*.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
$SYSLOG.tm_stamp()


\x_kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją pola KOD w wierszach tabel ZE_*.
::   WE:
::   WY: 0/1 - pole zablokowane/dostępne
::----------------------------------------------------------------------------------------------------------------------
{? exec('x_system_t','ze_lib',cur_tab(1,1))
|| exec('runtime_dro','#system')
?}


\x_kod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola KOD w wierszach tabel ZE_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('runtime_dro','#system')
|| return(1)
?};

_TAB:=cur_tab(1,1);
{? _TAB.KOD='' | exec('x_system_n','ze_lib',_TAB)
|| return(1)
?};

:: rozłuż bieżący kod na części składowe
_def:=exec('x_kod_def','ze_lib',_TAB);
_sfx:=
   {? _def=''
   || _TAB.KOD
   || gsub(_TAB.KOD,_def,'')
   ?};
{? _sfx=''
|| return(1)
?};

{? (_TAB=ZE_BDEF | _TAB=ZE_BGRP) & _TAB.B_DOMAIN=null
|| _TAB.B_DOMAIN:=exec('domain_ref','#b_domain',~-_sfx)

|? _TAB=ZE_WDEF & _TAB.SLO_KOD=null
|| _TAB.SLO_KOD:=exec('kod','ext_slo','ZERD_OKN',~-_sfx)

|? var_pres('SYMBOL',_TAB)=27 & _TAB.SYMBOL=''
|| _TAB.SYMBOL:=_sfx
?};

1


\x_kod_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa klawisza F3 pola KOD.
::   WE:
::   WY: ~~/wygenerowany kod
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

{? ~exec('can_gen_code','#symsys',_TAB,'SYSTEM')
|| return()
?};

_cur:=fld();
_gen:=exec('x_kod_gen','ze_lib',_TAB);
{? _gen<>'' & (_cur='' | exec('chk_match','#symsys',_gen,_cur,2))
|| _gen
|| ~~
?}


\x_kod_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje początkową część kodu dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: początkowa część kodu dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB=ZE_BDEF || '%1_'[ZE_BDEF.ZE_DEF().KOD]
|? _TAB=ZE_BGRP || '%1_'[ZE_BGRP.ZE_GRP().KOD]
|? _TAB=ZE_DEF  || '%1'[ZE_DEF.SYMBOL]
|? _TAB=ZE_GRP  || '%1'[ZE_GRP.SYMBOL]
|? _TAB=ZE_KIR  || '%1_'[ZE_KIR.ZE_DEF().KOD]
|? _TAB=ZE_LST  || '%1_'[ZE_LST.ZE_GRP().KOD]
|? _TAB=ZE_POZ  || '%1_%2_'[ZE_POZ.ZE_LST().ZE_GRP().KOD,ZE_LST.KOD]
|? _TAB=ZE_WDEF || '%1_'[ZE_WDEF.ZE_DEF().KOD]
|? _TAB=ZE_WKOL || '%1_%2%3'[
      ZE_WKOL.ZE_WDEF().KOD,
      ZE_WKOL.KOL_TAB,
      {? ZE_WKOL.KOL_ZEW<>''
      || '_'+ZE_WKOL.KOL_ZEW
      || ''
      ?}
   ]
|| ''
?}


\x_kod_sfx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje końcową część kodu dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: końcowa część kodu dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB=ZE_FDEF || ZE_FDEF.FIRMA().SYMBOL
|? _TAB=ZE_FGRP || ZE_FGRP.FIRMA().SYMBOL
|? _TAB=ZE_BDEF || ZE_BDEF.B_DOMAIN().SYMBOL
|? _TAB=ZE_BGRP || ZE_BGRP.B_DOMAIN().SYMBOL
|? _TAB=ZE_KIR  || '%1%2'[ZE_KIR.KOL_TAB,{? ZE_KIR.KOL_ZEW<>'' || '_'+ZE_KIR.KOL_ZEW || '' ?}]
|? _TAB=ZE_LST  || ZE_LST.SYMBOL
|? _TAB=ZE_WDEF || ZE_WDEF.SLO_KOD().KOD
|| ''
?}


\x_kod_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generuje domyślny kod dla wiersza podanej tabeli.
::   WE: _a [TABLE] - alias tabeli, dla której ma być wygenerowany kod
::   WY: domyślny kod dla aktualizacji elementu
::----------------------------------------------------------------------------------------------------------------------
exec('x_kod_def','ze_lib',_a)+exec('x_kod_sfx','ze_lib',_a)


\x_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SYMBOL tabel SD_*. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE: _a TABLE - alias tabeli z kolumnami SYSTEM i SYMBOL
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
'%1u!'[{? exec('x_system_n','ze_lib',_a) || '\\Q' || '' ?}]


\x_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola uwzględnianego w kodzie w wierszach tabel ZE_*.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

{? exec('x_system_n','ze_lib',_TAB) | ~exec('runtime_dro','#system')
|| return(1)
?};

{? (_TAB.KOD='' | _TAB.KOD+1='_')
|| _TAB.KOD:=exec('x_kod_gen','ze_lib',_TAB)
?};

1


\x_x_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji danych tabel ZE_*.
::   WE: _a [TABLE] - alias tabeli
::   WY: zgodna ze specyfikacją narzędzi dla akcji "rekord po"
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_pfx:=-spli_str(!_TAB,'_')[2];

:: zweryfikuj zgodność kodu
exec('x_ae_match','ze_lib',_TAB,
:: sprawdź poprawność podanych informacji
   exec('_%1_chk'[_pfx],'ze_lib',-menu_txt()='popraw')
)


\x_ae_match
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza zgodność kodu dla aktualizacji z jego domyślną wartością. W przypadku rozbieżności użytkownik jest
::       proszony o potwierdzenie zapisu wiersza.
::   WE: _a [TABLE] - alias tabeli, której wiersz będzie weryfikowany
::       _b [ANY] - wynik "twardej" weryfikacji
::   WY: 0/1 - wynik decyzji użytkownika
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_chk:=_b;

{? type_of(_chk)<>type_of(0) | _chk=0
:: wiersz nie jest poprawny
|| return(_chk)

|? exec('x_system_n','ze_lib',_TAB)
:: test nie dotyczy danych klienta
|| return(1)
?};

exec('chk_match','#symsys',_TAB.KOD,exec('x_kod_gen','ze_lib',_TAB),1)


\x_bx_dolacz_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_B???.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;

_dom:=null;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: tylko nieprzypisane
   'REFERENCE not in ('
   '  select B_DOMAIN from %1 where %1.%2=:_a'
   ')'[2-!_DOM,2-!_TAB],
   _TAB.ref()
);
B_DOMAIN.f_first();
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną dziedzinę
_DOM.blank();
_DOM.B_DOMAIN:=_dom;
_chk:=exec('_%1_chk'[-spli_str(!_DOM,'_')[2]],'ze_lib',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| _DOM.add()
?};
~~


\x_bx_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_B???.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;

_DOM.blank();
{? _DOM.edit($'exec(\'x_x_ra\',\'ze_lib\',%1)'[!_DOM])
|| _DOM.add()
?};
~~


\x_bx_popraw_a0
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_B???.
::       Docelowe działanie na wersji narzędzi klienta.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;

{? _DOM.get()=0
|| return()
?};
_dom:=_DOM.B_DOMAIN;

:: wybór dziedziny
B_DOMAIN.cntx_psh();
B_DOMAIN.prefix();
B_DOMAIN.f_set('SYMBOL',,
:: nieprzypisane i bieżąca
   'REFERENCE not in ('
   '  select B_DOMAIN from %1 where %1.%2=:_a'
   ') or '
   'REFERENCE=:_b'[2-!_DOM,2-!_TAB],
   _TAB.ref(),_dom
);
B_DOMAIN.f_seek(_dom);
B_DOMAIN.win_sel('WYB');
{? B_DOMAIN.select(,1)
|| _dom:=B_DOMAIN.ref()
?};
B_DOMAIN.f_clear();
B_DOMAIN.cntx_pop();

{? _dom=null | _dom=_DOM.B_DOMAIN
:: rezygnacja lub brak zmian
|| return()
?};

:: zamień dziedzinę na wybraną
_DOM.B_DOMAIN:=_dom;
_chk:=exec('_%1_chk'[-spli_str(!_DOM,'_')[2]],'ze_lib',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| _DOM.put()
?};
~~


\x_bx_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_B???.
::       Działanie dla narzędzi przeznaczonych do użytku wewnętrznego DRO.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;

_DOM.get();
{? _DOM.edit($'exec(\'x_x_ra\',\'ze_lib\',%1)'[!_DOM])
|| _DOM.put()
?};
~~


\x_fx_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienkach tabel ZE_F???.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w firmach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_FIR:=_b;

_firma:=null;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: tylko nieprzypisane spółki
   'TYP=\'S\' and REFERENCE not in ('
   '  select FIRMA from %1 where %1.%2=:_a'
   ')'[2-!_FIR,2-!_TAB],
   _TAB.ref()
);
FIRMA.f_first();
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null
:: rezygnacja
|| return()
?};

:: dodaj wybraną firmę
_FIR.blank();
_FIR.FIRMA:=_firma;
_chk:=exec('_%1_chk'[-spli_str(!_FIR,'_')[2]],'ze_lib',0);
{? type_of(_chk)=type_of(0) & _chk<>0
|| _FIR.add()
?};
~~


\x_fx_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienkach tabel ZE_F???.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w firmach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_FIR:=_b;

{? _FIR.get()=0
|| return()
?};

_firma:=_FIR.FIRMA;

:: wybór firmy
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.f_set('SYMBOL',,
:: tylko nieprzypisane spółki
   'TYP=\'S\' and ('+
   '  REFERENCE not in (select FIRMA from %1 where %1.%2=:_a) or'
   '  REFERENCE=:_b'
   ')'[2-!_FIR,2-!_TAB],
   _TAB.ref(),_firma
);
FIRMA.f_seek(_firma);
FIRMA.win_sel('WYB');
{? FIRMA.select(,1)
|| _firma:=FIRMA.ref()
?};
FIRMA.f_clear();
FIRMA.cntx_pop();

{? _firma=null | _firma=_FIR.FIRMA
:: rezygnacja lub brak zmian
|| return()
?};

:: zmień firmę
_FIR.FIRMA:=_firma;
_chk:=exec('_%1_chk'[-spli_str(!_FIR,'_')[2]],'ze_lib',1);
{? type_of(_chk)=type_of(0) & _chk<>0
|| _FIR.put()
?};
~~


\x_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa akcji "Wykorzystanie".
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::       _c [TABLE] - alias tabeli wykorzystania w firmach
::       _d [STRING] - tytuł okienka
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;
_FIR:=_c;
_hdr:=_d;

_height:=15;
_mode:='maximized';
:: przygotuj okienko
_wnd:=_DOM.grp_make(_hdr,
:: przed otwarciem
   $('exec(\'x_wykorzystanie_bo\',\'ze_lib\',%1,%2,%3)'[!_TAB,!_DOM,!_FIR]),
:: identyfikator budowany z akronimów tabel wykorzystania elementu
   '#ze_%1_%2'[-spli_str(!_DOM,'_')[2],-spli_str(!_FIR,'_')[2]],,,
:: podczas zamykania
   $('exec(\'x_wykorzystanie_oc\',\'ze_lib\',%1,%2,%3)'[!_TAB,!_DOM,!_FIR]),,
:: tryb
   'normal'
);
:: dziedziny i firmy przypisane do bieżącej grupy
{? _TAB.GRUPA='T'
|| _DOM.grp_sel(_wnd,FIRMA,'WYB','Firmy'@,,,,_height,,,,,_mode)
|| _DOM.grp_sel(_wnd,_FIR,'WER','Firmy'@,,,,_height,,,,,_mode)
?};
_DOM.grp_sel(_wnd,_DOM,'WER','Dziedziny'@,,,,_height,,,,,_mode);

_DOM.cntx_psh();
_DOM.win_sel(_wnd);
_DOM.select();
_DOM.cntx_pop();
_DOM.win_del(_wnd);
~~


\x_wykorzystanie_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna wykorzystania.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::       _c [TABLE] - alias tabeli wykorzystania w firmach
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;
_FIR:=_c;

{? _TAB.GRUPA='T'
|| FIRMA.cntx_psh();
   FIRMA.index('SYMBOL2');
   FIRMA.prefix('S');
   FIRMA.actions('WYB','W',,1)
|| _FIR.cntx_psh();
   _FIR.index('SYM_FIR');
   _FIR.prefix(_TAB.ref())
?};
_DOM.cntx_psh();
_DOM.index('SYM_DOM');
_DOM.prefix(_TAB.ref());
1


\x_wykorzystanie_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Podczas zamykania okna wykorzystania.
::   WE: _a [TABLE] - alias tabeli nadrzędnej
::       _b [TABLE] - alias tabeli wykorzystania w dziedzinach
::       _c [TABLE] - alias tabeli wykorzystania w firmach
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;
_DOM:=_b;
_FIR:=_c;

{? _TAB.GRUPA='T'
|| FIRMA.cntx_pop();
   FIRMA.actions('WYB',,,1)
|| _FIR.cntx_pop()
?};
_DOM.cntx_pop();
1


\bdef_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_BDEF,'SYSTEM')


\bdef_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_BDEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('x_bx_dolacz_a%1'[$exec('runtime_dro','#system')],'ze_lib',ZE_DEF,ZE_BDEF)


\bdef_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku WER tabeli ZE_BDEF.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('bdef_editable','ze_lib')


\bdef_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_BDEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('x_bx_popraw_a%1'[$exec('runtime_dro','#system')],'ze_lib',ZE_DEF,ZE_BDEF)


\bdef_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" w okienku WER tabeli ZE_BDEF.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('bdef_editable','ze_lib')


\bdef_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_BDEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_BDEF,'RED','DRO',,,'WZO');
1


\bdef_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_BDEF.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('bdef_editable','ze_lib')
|| {? ZE_BDEF.sel_size()<=1
   || _aid+='U'
   ?};
   _aid+='P'
?};

ZE_BDEF.actions_grayed(_wnd,_aid);
~~


\bgrp_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_BGRP,'SYSTEM')


\bgrp_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_BGRP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('x_bx_dolacz_a%1'[$exec('runtime_dro','#system')],'ze_lib',ZE_GRP,ZE_BGRP)


\bgrp_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku WER tabeli ZE_BGRP.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('bgrp_editable','ze_lib')


\bgrp_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_BGRP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('x_bx_popraw_a%1'[$exec('runtime_dro','#system')],'ze_lib',ZE_GRP,ZE_BGRP)


\bgrp_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" w okienku WER tabeli ZE_BGRP.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('bgrp_editable','ze_lib')


\bgrp_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_BGRP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_BGRP,'RED','DRO',,,'WZO');
1


\bgrp_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_BGRP.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('bgrp_editable','ze_lib')
|| {? ZE_BGRP.sel_size()<=1
   || _aid+='U'
   ?};
   _aid+='P'
?};

ZE_BGRP.actions_grayed(_wnd,_aid);
~~


\bgrp_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji wiersza tabeli ZE_BGRP. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _grp_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','ze_lib',ZE_BGRP)


\def_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli ZE_DEF.
::   WE:
::   WY: wskazanie na wiersz tabeli ZE_DEF
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.ref()


\def_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_DEF,'SYSTEM')


\def_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli ZE_DEF. Dla definicji użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','ze_lib',ZE_DEF)


\def_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją SYMBOL tabeli ZE_DEF. Blokuje możliwość zmiany symbolu definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_zm_nazwa_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji ZM_NAZWA tabeli ZE_DEF. Zależnie od wartości aktualizuje pole NAZWA.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.NAZWA:=exec('def_nazwa','ze_lib');
1


\def_nazwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustala nazwę definicji na podstawie akronimu tabeli podanej w TABELA
::   WE:
::   WY: ciąg znaków
::----------------------------------------------------------------------------------------------------------------------
_acr:=ZE_DEF.TABELA;
_txt:='';

{? ZE_DEF.ZM_NAZWA='T'
|| _txt:=ZE_DEF.NAZWA

|? _acr<>''
|| {? var_pres(_acr)=118
   || {? ~exec('tab_sys','#table',_acr)
      || {? (_txt:=($'%1.comment()'[_acr])())=''
         || _txt:='Tabela %1'[_acr]
         ?}
      || _txt:='Tabela systemowa'
      ?}
   || _txt:='Nieznana tabela'
   ?}
?};

_txt


\def_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją NAZWA tabeli ZE_DEF. Blokuje możliwość zmiany nazwy definicji.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
{? exec('def_editable','ze_lib')
|| ZE_DEF.ZM_NAZWA='T'
?}


\def_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją OPIS tabeli ZE_DEF. Blokuje możliwość zmiany opisu definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją GRUPA tabeli ZE_DEF. Blokuje możliwość zmiany dostępności definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('x_system_n','ze_lib',ZE_DEF)


\def_tabela_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola TABELA tabeli ZE_DEF.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
'U'+(7*'u')+'&'


\def_tabela_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją TABELA tabeli ZE_DEF. Blokuje możliwość zmiany tabeli definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_tabela_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa klawisza F3 pola TABELA wiersza tabeli ZE_DEF.
::   WE:
::   WY: ~~/akronim tabeli
::----------------------------------------------------------------------------------------------------------------------
:: lista tabel dostępnych do wyboru
_BUF:=exec('tab_list','#table');

: wybór zestawu
_BUF.find_key(RT_KONF.TABELA);
{? _BUF.select(,1)
|| _BUF.SYMBOL
|| ~~
?}


\def_tabela_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola TABELA wiersza tabeli ZE_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.NAZWA:=exec('def_nazwa','ze_lib');

_chk:=exec('_def_chk_table','ze_lib',__CHK);
{? type_of(_chk)=type_of('') | ~_chk
|| return(0)
?};

{? ZE_DEF.SYMBOL='' | ZE_DEF.SYMBOL='Q'
|| ZE_DEF.SYMBOL:='%1%2'[{? exec('x_system_n','ze_lib',ZE_DEF) || 'Q' || '' ?},ZE_DEF.TABELA]
?};

exec('x_x_ae','ze_lib')


\def_prolog_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją PROLOG tabeli ZE_DEF. Blokuje możliwość zmiany prologu definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_zakres_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją ZAKRES tabeli ZE_DEF. Blokuje możliwość zmiany zakresu definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_epilog_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją EPILOG tabeli ZE_DEF. Blokuje możliwość zmiany epilogu definicji standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po dołączeniu wiersza tabeli ZE_DEF w okienku CFG.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.blank();
ZE_DEF.memo_set('','OPIS');
ZE_DEF.memo_set('','PROLOG');
ZE_DEF.memo_set('','ZAKRES');
ZE_DEF.memo_set('','EPILOG');

{? ZE_DEF.edit("exec('def_x_ae','ze_lib')") & ZE_DEF.add()
|| ZE_DEF.memo_put(,'OPIS');
   ZE_DEF.memo_put(,'PROLOG');
   ZE_DEF.memo_put(,'ZAKRES');
   ZE_DEF.memo_put(,'EPILOG')
|| return()
?};

:: uzupełnienie klucza identyfikującego
exec('kir_generuj','ze_lib',0,0);
~~


\def_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po poprawieniu wiersza tabeli ZE_DEF w okienku CFG.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.get();
_tab:=ZE_DEF.TABELA;
ZE_DEF.memo_get(,'OPIS');
ZE_DEF.memo_get(,'PROLOG');
ZE_DEF.memo_get(,'ZAKRES');
ZE_DEF.memo_get(,'EPILOG');

{? ~ZE_DEF.edit("exec('def_x_ae','ze_lib')")
|| return()
?};
{? ZE_DEF.TABELA<>_tab
|| {? FUN.ask(
         'Zmieniono tabelę definicji list.\n'
         'Usunięte zostaną powiązane:\n'
         ' - klucze identyfikujące,\n'
         ' - definicje okienek,\n'
         ' - listy elementów.\n\n'
         'Czy kontynuować działanie?'@
      )
   || exec('_def_delb','ze_lib')
   || return()
   ?}
?};
{? ZE_DEF.put()
|| ZE_DEF.memo_put(,'OPIS');
   ZE_DEF.memo_put(,'PROLOG');
   ZE_DEF.memo_put(,'ZAKRES');
   ZE_DEF.memo_put(,'EPILOG')
|| return()
?};

{? exec('def_editable','ze_lib')
|| _emp:=0;
   ZE_KIR.cntx_psh();
   ZE_KIR.index('NUMER');
   _emp:=~ZE_KIR.first();
   ZE_KIR.cntx_pop();
   {? _emp
::    uzupełnienie klucza identyfikującego
   || exec('kir_generuj','ze_lib',0,0)
   ?}
?};
~~


\def_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed usunięciem wiersza w okienkach tabeli ZE_DEF.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\def_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed usunięciem grupy rekordów w okienkach tabeli ZE_DEF.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('del_conf','#table',ZE_DEF)


\def_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa akcji "Wykorzystanie" okienka CFG tabeli ZE_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_wykorzystanie_a','ze_lib',ZE_DEF,ZE_BDEF,ZE_FDEF,'Wykorzystanie definicji'@);
~~


\def_okienka_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa akcji "Okienka" okienka CFG tabeli ZE_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_wnd:=ZE_WDEF.grp_make('Okienka definicji list'@,
:: przed wyświetleniem
   "  ZE_WDEF.index('RODZAJ');
      ZE_WDEF.prefix(exec('def_ref','ze_lib'));
      ZE_WKOL.cntx_psh();
      ZE_WKOL.index('NUMER');
      1
   ",
:: identyfikator
   '#ze_wdef_cfg',,5,
:: podczas zamykania
   "  ZE_WKOL.cntx_pop();
      1
   ",,
:: tryb
   {? exec('interm','#system') || 'maximized' || 'normal' ?}
);
:: lista okienek
ZE_WDEF.grp_sel(_wnd,ZE_WDEF,'CFG',,
:: po odświeżeniu (odrysuj kolumny)
   "grp_disp(ZE_WKOL,'CFG',1,1)"
);
:: lista kolumn okienka po prawej stronie
ZE_WDEF.grp_splt(_wnd,,'vertical','details',',33%');
ZE_WDEF.grp_sel(_wnd,ZE_WKOL,'CFG',,,,,,
:: przed obsługą (wyłącz okno lub ogranicz dziedzinę)
   "  {? grp_empty(ZE_WDEF,'CFG') | ZE_WDEF.KOLUMNY<>'T'
      || return('#disable')
      ?};
      ZE_WKOL.prefix(exec('wdef_ref','ze_lib'))
   "
);

ZE_WDEF.cntx_psh();
ZE_WDEF.win_sel(_wnd);
ZE_WDEF.select();
ZE_WDEF.cntx_pop();
ZE_WDEF.win_del(_wnd);
~~


\def_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_DEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_DEF,'RED','DRO',,,'WZO');
1


\def_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_DEF.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('def_editable','ze_lib')
|| {? ZE_DEF.sel_size()<=1
   || _aid+='U'
   ?}
?};

ZE_DEF.actions_grayed(_wnd,_aid);
~~


\def_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord po" okienka tabeli ZE_DEF. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _grp_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','ze_lib',ZE_DEF)


\fdef_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_FDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_fx_dolacz_a','ze_lib',ZE_DEF,ZE_FDEF)


\fdef_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_FDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_fx_popraw_a','ze_lib',ZE_DEF,ZE_FDEF)


\fdef_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_FDEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_FDEF,'RED','DRO',,,'WZO');
1


\fgrp_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku WER tabeli ZE_FGRP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_fx_dolacz_a','ze_lib',ZE_GRP,ZE_FGRP)


\fgrp_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku WER tabeli ZE_FGRP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_fx_popraw_a','ze_lib',ZE_GRP,ZE_FGRP)


\fgrp_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_FGRP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_FGRP,'RED','DRO',,,'WZO');
1


\grp_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli ZE_GRP.
::   WE:
::   WY: wskazanie na wiersz tabeli ZE_GRP
::----------------------------------------------------------------------------------------------------------------------
ZE_GRP.ref()


\grp_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_GRP,'SYSTEM')


\grp_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli ZE_GRP. Dla grup użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','ze_lib',ZE_GRP)


\grp_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją SYMBOL tabeli ZE_GRP. Blokuje możliwość zmiany symbolu grupy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('grp_editable','ze_lib')


\grp_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją NAZWA tabeli ZE_GRP. Blokuje możliwość zmiany nazwy grupy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('grp_editable','ze_lib')


\grp_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją OPIS tabeli ZE_GRP. Blokuje możliwość zmiany opisu grupy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('grp_editable','ze_lib')


\grp_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją GRUPA tabeli ZE_GRP. Blokuje możliwość zmiany dostępności grupy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('x_system_n','ze_lib',ZE_GRP)


\grp_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed usunięciem wiersza w okienkach tabeli ZE_GRP.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('grp_editable','ze_lib')


\grp_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed usunięciem grupy rekordów w okienkach tabeli ZE_GRP.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('del_conf','#table',ZE_GRP)


\grp_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_GRP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_GRP,'RED','DRO',,,'WZO');
1


\grp_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_GRP.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('grp_editable','ze_lib')
|| {? ZE_GRP.sel_size()<=1
   || _aid+='U'
   ?}
?};

ZE_GRP.actions_grayed(_wnd,_aid);
~~


\grp_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord po" okienka tabeli ZE_GRP. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _grp_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','ze_lib',ZE_GRP)


\grp_wykorzystanie_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa akcji "Wykorzystanie" okienka CFG tabeli ZE_GRP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('x_wykorzystanie_a','ze_lib',ZE_GRP,ZE_BGRP,ZE_FGRP,'Wykorzystanie grupy'@);
~~


\kir_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_KIR,'SYSTEM')


\kir_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Dołącz" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? (_fld:=exec('kir_wybierz','ze_lib'))=''
|| return()
?};

_fld+='.';
_fld:=gsub(_fld,'()','');
_fld:=spli_str(_fld,'.');

_num:=1;
{? ZE_KIR.size()>0
|| ZE_KIR.ZE_DEF();
   _num:=ZE_KIR.NUMER+1;
   {? ~exec('def_editable','ze_lib')
   || _num:=ZE_KIR.size()+1
   ?}
?};
ZE_KIR.blank();
ZE_KIR.NUMER:=_num;
ZE_KIR.KOL_TAB:=_fld[2];
ZE_KIR.KOL_ZEW:=_fld[3];

{? {? exec('runtime_dro','#system')
   || exec('kir_x_rb','ze_lib',0);
      ZE_KIR.edit("exec('_kir_chk','ze_lib',0)")
   || 1
   ?}
|| do();
   ZE_KIR.cntx_psh();
   ZE_KIR.index('NUMER');
   ZE_KIR.prefix(ZE_KIR.ZE_DEF);
   _loop:=
      {? ZE_KIR.find_key(_num)
      || ZE_KIR.last()
      ?};
   {!
   |? _loop & _num<=ZE_KIR.NUMER
   |! ZE_KIR.NUMER+=1;
      {? ~ZE_KIR.put()
      || undo()
      ?};
      _loop:=(ZE_KIR.prev() & do_state()=1)
   !};
   ZE_KIR.cntx_pop();
   {? do_state()=1 & ZE_KIR.add()
   || exec('kir_numeruj','ze_lib')
   || undo()
   ?};
   end()
?};
~~


\kir_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('kir_editable','ze_lib')


\kir_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa niestandardowej akcji "Popraw" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_pth:=ZE_KIR.KOL_TAB;
{? ZE_KIR.KOL_ZEW<>''
|| _pth+=','+ZE_KIR.KOL_ZEW
?};
{? (_fld:=exec('kir_wybierz','ze_lib',_pth))=''
|| return()
?};

_fld+='.';
_fld:=gsub(_fld,'()','');
_fld:=spli_str(_fld,'.');

ZE_KIR.get();
ZE_KIR.KOL_TAB:=_fld[2];
ZE_KIR.KOL_ZEW:=_fld[3];

{? {? exec('runtime_dro','#system')
   || exec('kir_x_rb','ze_lib',0);
      ZE_KIR.edit("exec('_kir_chk','ze_lib',1)")
   || 1
   ?}
|| ZE_KIR.put()
?};
~~


\kir_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('kir_editable','ze_lib')


\kir_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" dla grupy rekordów w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
1


\kir_numeruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustala ciągłą numerację kolumn.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_KIR.cntx_psh();
ZE_KIR.clear();
ZE_KIR.f_set('NUMER',,'ZE_KIR.ZE_DEF=:_a',ZE_KIR.ZE_DEF);
_loop:=ZE_KIR.f_first();
_num:=1;
{!
|? _loop
|! {? ZE_KIR.NUMER<>_num
   || ZE_KIR.NUMER:=_num
   ?};
   _num+=1;
   _loop:=ZE_KIR.f_next()
!};
ZE_KIR.f_clear();
ZE_KIR.cntx_pop();
~~


\kir_generuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Generuj" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - generowanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('def_editable','ze_lib')


\kir_generuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Generuj"  w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('kir_generuj','ze_lib',0)


\kir_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Generowanie klucza identyfikującego rekord.
::   WE: _a [INTEGER] - wyświetlaj okno wyboru (domyślnie 1)
::       _b [INTEGER] - wyświetlaj dialog z potwierdzeniem (domyślnie 1)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_sel:={? var_pres('_a')=type_of(0) || _a<>0 || 1 ?};
_dlg:={? var_pres('_b')=type_of(0) || _b<>0 || 1 ?};
_ask:="FUN.ask('Czy generować klucz identyfikujący wiersz?'@)";

:: przygotuj interfejs użytkownika
_TAB:=($ZE_DEF.TABELA)();
_cfg:=obj_new('KEY','COL');

_max:=40;
_int:='INTEGER';
_acr:='STRING[8]';
_txt:='STRING[60]';
_wid:='#ze_kir_gen_';
_hlp:=spli_str('%1|%2|%3|%4'[
   'Krótki opis'@,'Liczba porządkowa'@,'Akronim kolumny'@,'Nazwa kolumny'@
],'|');

:: zestawy kluczy
_KEY:=tab_tmp(1,
   'NAME','STRING[255]','Nazwa'@,
   'INDEX',_acr,'Indeks'@,
   'OK',_int,'Poprawny'@
);

:: okienko wertowania
_wnd:=_KEY.mk_sel('Klucze identyfikujące'@,'P',0,_wid+'1',,,,,'U');
_KEY.win_fld(_wnd,,'NAME',,,40,,,,,_hlp[1]);
_KEY.win_act(_wnd,,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu'@,_ask,"sel_exit()",1,,,,'W');
_KEY.win_act(_wnd,,'Szukaj');
_KEY.win_act(_wnd,,'Kolejność');
_KEY.win_sel(_wnd);

:: okienko redakcji
_wnd:=_KEY.mk_edit('Klucz identyfikujący'@,0,_wid+'2');
_KEY.win_esep(_wnd,'Dane podstawowe'@);
_KEY.win_efld(_wnd,,'NAME',,,40,,,,,_hlp[1]);
exec('ok_esc','#window',_KEY,_wnd);
_KEY.win_edit(_wnd);

:: kolumny kluczy
_COL:=tab_tmp(2,
   'INDEX',_acr,'Indeks'@,
   'NUMBER',_int,'Lp'@,
   'COL_TAB',_acr,'Kolumna'@,
   'COL_TXT',_txt,'Nazwa'@,
   'JOIN_COL',_acr,'Złączenie'@,
   'JOIN_TXT',_txt,'Nazwa'@,
   'OK',_int,'Poprawna'@
);

:: okienko wertowania
_wnd:=_COL.mk_sel('Kolumny klucza'@,'N',0,_wid+'3',,,,,'N');
_COL.win_fld(_wnd,,'NUMBER',,,-3,,,,,_hlp[2]);
_COL.win_fld(_wnd,,'COL_TAB',,,-8,,,,,_hlp[3]);
_COL.win_fld(_wnd,,'COL_TXT',,,30,,,,,_hlp[4]);
_COL.win_fld(_wnd,,'JOIN_COL',,,-8,,,,,_hlp[3]);
_COL.win_fld(_wnd,,'JOIN_TXT',,,30,,,,,_hlp[4]);
_COL.win_act(_wnd,,'Szukaj');
_COL.win_sel(_wnd);

:: okienko redakcji
_wnd:=_COL.mk_edit('Kolumna klucza'@,0,_wid+'4');
_COL.win_esep(_wnd,'Dane podstawowe'@);
_COL.win_efld(_wnd,,'COL_TAB',,,40,,,,,_hlp[3]);
_COL.win_efld(_wnd,,'COL_TXT',,,40,,,,,_hlp[4]);
_COL.win_efld(_wnd,,'JOIN_COL',,,40,,,,,_hlp[3]);
_COL.win_efld(_wnd,,'JOIN_TXT',,,40,,,,,_hlp[4]);
_COL.win_edit(_wnd);

:: zapamiętaj konfigurację
_cfg.KEY:=_KEY;
_cfg.COL:=_COL;
params_set('cfg',_cfg);

_int:=exec('interm','#system');
_wnd:=_KEY.grp_make('Generowanie klucza'@,,_wid+'grp',,,,,{? _int || 'maximized' || 'normal' ?});
_KEY.grp_sel(_wnd,_KEY,_KEY.win_sel('?'),,"
      _par:=params_get();
      params_set(_par);
      _TAB:=_par.cfg.COL;
      grp_disp(_TAB,_TAB.win_sel('?'),1)
   ",,,10,,,,,'maximized_with_title','KEY',1
);
_KEY.grp_splt(_wnd,,{? _int || 'horizontal' || 'vertical' ?},'details',',33%');
_KEY.grp_sel(_wnd,_COL,_COL.win_sel('?'),,,,,10,"
      {? grp_empty('KEY')
      || return('#disable')
      ?};
      _cfg:=params_get().cfg;
      _cfg.COL.prefix(_cfg.KEY.INDEX,)
   ",,,,'maximized_with_title'
);
_KEY.win_sel(_wnd);

:: uzupełnij dane
_NDX:=_TAB.ndx_list();
_loop:=_NDX.first();
{!
|? _loop
|! {? _NDX.UNIQUE='T'
   || _KEY.blank();
      _KEY.NAME:=_NDX.TXT_MENU;
      _KEY.INDEX:=_NDX.ACR;
      _KEY.OK:=1;
      _TMP:=_TAB.ndx_flds(_NDX.ACR);
      _loop:=_TMP.first();
      do();
      {!
      |? _loop & do_state()=1
      |! _COL.blank();
         _COL.INDEX:=_NDX.ACR;
         _COL.NUMBER:=_TMP.NO;
         _COL.COL_TAB:=_TMP.ACR;
         _COL.COL_TXT:=MS.name(_TAB,_TMP.ACR);
         _COL.JOIN_COL:=_TMP.REL_FLD;
         _COL.JOIN_TXT:='';
         _COL.OK:=1;
         _ftp:=var_pres(_TMP.ACR,_TAB);
         {? _ftp=26 | _ftp=30
         || {? _TMP.REL_FLD<>''
            || _COL.JOIN_TXT:=MS.name(_TMP.REL_TAB,_TMP.REL_FLD)
            || _KEY.OK:=0;
               _COL.OK:=0
            ?}
         ?};
         {? ~_COL.add()
         || undo()
         ?};
         _loop:=_TMP.next()
      !};
      {? ~_KEY.add()
      || undo()
      ?};
      end();
      obj_del(_TMP)
   ?};
   _loop:=_NDX.next()
!};

:: spróbuj "poprawić" indeksy
:: (dodanie kolumny unikalnych)
_find_unique:="
   _TAB:=($_a)();
   _NDX:=_TAB.ndx_list();
   _loop:=_NDX.first();
   {!
   |? _loop
   |! {? _NDX.UNIQUE='T'
      || _ok:=1;
         _TMP:=_TAB.ndx_flds(_NDX.ACR);
         _loop:=_TMP.first();
         {!
         |? _loop & _ok
         |! _ftp:=var_pres(_TMP.ACR,_TAB);
            {? (_ftp=26 | _ftp=30) & _TMP.REL_FLD=''
            || _ok:=0
            ?};
            _loop:=_TMP.next()
         !};
         {? _ok
         || return(_TMP)
         ?};
         obj_del(_TMP)
      ?};
      _loop:=_NDX.next()
   !};
   ~~
";
_KEY.f_set(,,'OK=\'0\'');
_loop:=_KEY.f_first();
{!
|? _loop
|! _COL.prefix(_KEY.INDEX,);
   _loop:=_COL.first();
   _done:=1;
   do();
   {!
   |? _loop & do_state()=1
   |! {? ~_COL.OK
      || _acr:=1-exec('type_name','#field',_TAB,_COL.COL_TAB);
         {? var_pres(_acr)=type_of(SYSLOG)
         || _TMP:=_find_unique(_acr);
            {? type_of(_TMP)=type_of(SYSLOG)
::             znaleziono indeks unikalny
            || _off:=_TMP.size()-1;
               _ref:=_COL.ref();
::             przesuń kolumny
               _loop:=_COL.last();
               {!
               |? _loop & _COL.ref()<>_ref & do_state()=1
               |! _COL.NUMBER+=_off;
                  {? ~_COL.put()
                  || undo()
                  ?};
                  _loop:=_COL.prev()
               !};
               {? _TMP.first() & do_state()=1
               || _COL.JOIN_COL:=_TMP.ACR;
                  _COL.JOIN_TXT:=MS.name(_acr,_TMP.ACR);
                  {? _COL.put()
                  || {!
                     |? _TMP.next() & do_state()=1
                     |! _COL.NUMBER+=1;
                        _COL.JOIN_COL:=_TMP.ACR;
                        _COL.JOIN_TXT:=MS.name(_acr,_TMP.ACR);
                        {? ~_COL.put()
                        || undo()
                        ?}
                     !}
                  || undo()
                  ?}
               || undo()
               ?};
               obj_del(_TMP);
               _done:=(do_state()=1)
            || _done:=0
            ?}
         || _done:=0
         ?}
      ?};
      _loop:=_COL.next()
   !};
   {? _KEY.OK<>_done
   || _KEY.OK:=_done;
      {? ~_KEY.put()
      || undo()
      ?}
   ?};
   end();
   _loop:=_KEY.f_next()
!};

:: usuń niepoprawne indeksy
_KEY.f_rfresh();
_loop:=_KEY.f_first();
{!
|? _loop
|! _KEY.del();
   _loop:=_KEY.f_next()
!};
_KEY.f_clear();

{? _KEY.size()=0
|| {? _dlg
   || FUN.info(
         'Wygenerowanie klucza identyfikującego nie powiodło się.\n'
         'Brak unikalnych indeksów w tabeli lub złączeniach.'@
      )
   ?};
   return()
?};

:: udostępnij
{? {? _sel | _KEY.size()>1
   || _KEY.select()
   |? _KEY.size()=1
   || _COL.prefix(_KEY.INDEX,);
      {? _dlg
      || _ask()
      || 1
      ?}
   ?}
|| do();
   {? exec('del_ndx','#table',ZE_KIR,'NUMER',ZE_DEF.ref())
   || ZE_KIR.index('NUMER');
      ZE_KIR.prefix(ZE_DEF.ref());
      _loop:=_COL.first();
      {!
      |? _loop & do_state()=1
      |! ZE_KIR.blank();
         ZE_KIR.NUMER:=_COL.NUMBER;
         ZE_KIR.SYSTEM:=ZE_DEF.SYSTEM;
         ZE_KIR.KOL_TAB:=_COL.COL_TAB;
         ZE_KIR.KOL_ZEW:=_COL.JOIN_COL;
         ZE_KIR.KOD:=exec('x_kod_gen','ze_lib',ZE_KIR);
         {? ~ZE_KIR.add()
         || undo()
         ?};
         _loop:=_COL.next()
      !}
   || undo()
   ?};
   end();
   ZE_KIR.first()
?}


\kir_wgore_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Przesuń -> W górę" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - przesunięcie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
{? ZE_KIR.NUMER>1 & exec('kir_editable','ze_lib')
|| _test:=1;
   ZE_KIR.cntx_psh();
   {? ZE_KIR.prev()
   || _test:=exec('kir_editable','ze_lib')
   ?};
   ZE_KIR.cntx_pop();
   _test
?}


\kir_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Przesuń -> W górę".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('kir_przesun_a','ze_lib',0)


\kir_wdol_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Przesuń -> W dół" w okienku CFG tabeli ZE_KIR.
::   WE:
::   WY: 0/1 - przesunięcie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
{? ZE_KIR.NUMER<ZE_KIR.size() & exec('kir_editable','ze_lib')
|| _test:=1;
   ZE_KIR.cntx_psh();
   {? ZE_KIR.next()
   || _test:=exec('kir_editable','ze_lib')
   ?};
   ZE_KIR.cntx_pop();
   _test
?}


\kir_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Przesuń -> W górę".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('kir_przesun_a','ze_lib',1)


\kir_przesun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przesuwanie zapisu w górę i w dół.
::   WE: _a [INTEGER] - 0/1 - w górę/w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_move:=
   {? var_pres('_a')=type_of(0)
   || $('ZE_KIR.%1()'[{? _a || 'next' || 'prev' ?}])
   || "0"
   ?};

_new:=0;
_cur:=ZE_KIR.NUMER;
ZE_KIR.cntx_psh();
ZE_KIR.index('NUMER');
ZE_KIR.prefix(ZE_KIR.ZE_DEF);
{? _move() & ZE_KIR.NUMER<>0
|| _new:=ZE_KIR.NUMER;
   ZE_KIR.NUMER:=_cur;
   ZE_KIR.put()
?};
ZE_KIR.cntx_pop();
{? _new<>0
|| ZE_KIR.NUMER:=_new;
   ZE_KIR.put()
?};
~~


\kir_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wybór kolumny identyfikującej wiersz.
::   WE: _a [STRING] - ścieżka do poprawianego elementu
::   WY: napis określający wybraną kolumnę, gdzie:
::       '' - nie wybrano kolumny
::       'TABELA.KOLUMNA' - kolumna typu prostego
::       'TABELA.KOLUMNA().KOLUMNA' - kolumna typu złączeniowego
::----------------------------------------------------------------------------------------------------------------------
_pth:={? var_pres('_a')=type_of('') || _a || '' ?};
_par:=exec('choose_par','#field',ZE_DEF.TABELA);
_par.allow_branches(0);
_par.set_complex(0);
_par.set_system(0);

:: wybierz kolumnę
exec('choose','#field',_par,_pth)


\kir_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_GRP.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_KIR,'RED','DRO',,,'WZO')


\kir_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_KIR.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:='';
POLA_GRP.TXT_2:='';

{? var_pres(ZE_KIR.ZE_DEF().TABELA)=type_of(SYSLOG)
|| _TAB:=($ZE_KIR.ZE_DEF().TABELA)();
   {? var_pres(ZE_KIR.KOL_TAB,_TAB)>=0
   || POLA_GRP.TXT_1:=MS.name(_TAB,ZE_KIR.KOL_TAB);
      _acr:=exec('type_name','#field',_TAB,ZE_KIR.KOL_TAB);
      {? 1+_acr='_'
      || POLA_GRP.TXT_2:=MS.name(1-_acr,ZE_KIR.KOL_ZEW)
      ?}
   ?}
?};

{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('kir_editable','ze_lib')
|| _aid:='PG:G';
   {? ZE_KIR.sel_size()<=1
   || _aid:='U'+_aid
   ?}
?};
{? ~exec('kir_wgore_b','ze_lib')
|| _aid:='R(G)'+_aid
?};
{? ~exec('kir_wdol_b','ze_lib')
|| _aid:='R(D)'+_aid
?};

ZE_KIR.actions_grayed(_wnd,_aid);
~~


\lst_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli ZE_LST.
::   WE:
::   WY: wskazanie na wiersz tabeli ZE_LST
::----------------------------------------------------------------------------------------------------------------------
{? ZE_LST.size()>0
|| ZE_LST.ref()
|| null
?}


\lst_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_LST,'SYSTEM')


\lst_symbol_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SYMBOL tabeli ZE_LST. Dla list użytkownika symbol musi zaczynać się do litery 'Q'.
::       Działanie zgodne z funkcjonalnościa MacroBuidera.
::   WE:
::   WY: ciąg znaków określający wzorzec edycji pola
::----------------------------------------------------------------------------------------------------------------------
exec('x_symbol_pt','ze_lib',ZE_LST)


\lst_symbol_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją SYMBOL tabeli ZE_LST. Blokuje możliwość zmiany symbolu listy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('lst_editable','ze_lib')


\lst_grp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją ZE_GRP tabeli ZE_LST. Blokuje możliwość zmiany grupy listy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.ZE_LST=0 & exec('lst_editable','ze_lib')


\lst_def_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola ZE_DEF tabeli ZE_LST. Ograniczenie zakresu słownika.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
:: ograniczenie dostępnych do wyboru definicji
ZE_DEF.prefix();
ZE_DEF.f_set(
   'NAZWA',,
   'ZE_DEF.REFERENCE in ('
   '  select distinct DEF.ZE_DEF as REF'
   '  from ZE_BDEF as DEF, ZE_BGRP as GRP'
   '  where GRP.ZE_GRP=:_a and DEF.B_DOMAIN=GRP.B_DOMAIN'
   ')',
   ZE_LST.ZE_GRP
);
''


\lst_def_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją ZE_DEF tabeli ZE_LST. Blokuje możliwość zmiany definicji listy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.ZE_LST=0 & exec('lst_editable','ze_lib')


\lst_nazwa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją NAZWA tabeli ZE_LST. Blokuje możliwość zmiany nazwy listy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('lst_editable','ze_lib')


\lst_opis_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją OPIS tabeli ZE_LST. Blokuje możliwość zmiany opisu listy standardowej.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('lst_editable','ze_lib')


\lst_wspolna_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją WSPOLNA tabeli ZE_LST. Blokuje możliwość zmiany znacznika.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.ZE_LST=0 & exec('lst_editable','ze_lib')


\lst_dostepna_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją DOSTEPNA tabeli ZE_LST. Blokuje możliwość zmiany znacznika.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
_lck:=0;
{? ZE_LST.ZE_LST<>0
|| ZE_LST.cntx_psh();
   {? ZE_LST.seek(ZE_LST.ZE_LST,,1)
   || _lck:=(ZE_LST.DOSTEPNA='N')
   ?};
   ZE_LST.cntx_pop()
?};
~_lck


\lst_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Dołącz" w okienku CFG tabeli ZE_LST.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.win_edit(__WND.EDIT.get(ZE_LST,'DOD'));
1


\lst_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Dołącz" w okienku CFG tabeli ZE_LST.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_POM.LST_NZAL:=exec('lst_ref','ze_lib');

ZE_LST.blank();
ZE_LST.memo_set('','OPIS');
exec('pom_lst_nzal_ae','ze_lib');
{? ZE_LST.edit("exec('_lst_chk','ze_lib',0)")
|| ZE_LST.add() & ZE_LST.memo_put(,'OPIS')
?};
ZE_DEF.f_clear();
ZE_GRP.f_clear();

~~


\lst_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku CFG tabeli ZE_LST.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.win_edit(__WND.EDIT.get(ZE_LST,'POP'));
1


\lst_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Popraw" w okienku CFG tabeli ZE_LST.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_POM.LST_NZAL:=ZE_LST.ZE_LST;

ZE_DEF.cntx_psh();
ZE_GRP.cntx_psh();

ZE_LST.get();
ZE_LST.memo_get(,'OPIS');
_acc:=ZE_LST.DOSTEPNA;
{? ZE_LST.edit("exec('_lst_chk','ze_lib',1)")
|| {? ZE_LST.put() & ZE_LST.memo_put(,'OPIS') & _acc='N' & ZE_LST.DOSTEPNA<>_acc
   || _update:="
         ZE_LST.cntx_psh();
         ZE_LST.index('FK_1');
         ZE_LST.prefix(#ZE_LST.ref());
         _loop:=ZE_LST.first();
         {? _loop & _b<>''
         || _loop:=FUN.ask(_b)
         ?};
         {!
         |? _loop
         |! ZE_LST.DOSTEPNA:='T';
            ZE_LST.put();
            _a(_a,'');
            _loop:=ZE_LST.next()
         !};
         ZE_LST.cntx_pop()
      ";
::    po potwierdzeniu udostępnij wszystkie podrzędne listy
      _update(_update,'Czy udostępnić również listy podrzędne?'@)
   ?}
?};

:: porządki
ZE_DEF.f_clear();
ZE_GRP.f_clear();
ZE_DEF.cntx_pop();
ZE_GRP.cntx_pop();
~~


\lst_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usun" w okienku CFG tabeli ZE_LST.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('lst_editable','ze_lib')


\lst_zawartosc_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Zawartość" w okienku WER tabeli ZE_LST.
::   WE:
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
_chk:=exec('mk_def','ze_lib',ZE_LST.ZE_DEF);
{? _chk.VALUE<0 || FUN.error(_chk.INFO)
|? _chk.VALUE=0 || FUN.emsg(_chk.INFO)
?};
_chk.VALUE=1


\lst_zawartosc_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Zawartość" w okienku WER tabeli ZE_LST.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('select_zes','ze_lib')


\lst_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_LST.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('__WND','object');
_cfg:=__WND.EDIT;
_TAB:=ZE_LST;

_hdr:=_TAB.comment();
_std:='Dane wzorcowe'@;
_def:='Dane podstawowe'@;

_red:='DOD';
{? (_acr:=_cfg.get(_TAB,_red))=''
|| _wnd:=_TAB.mk_edit(_hdr,0,'#ze_lst_%1'[-_red]);
   {? exec('runtime_dro','#system')
   || _TAB.win_ewin(_wnd,,'DRO',_std,1)
   ?};
   _TAB.win_ewin(_wnd,ZE_POM,'DOD_LST',_def,1);
   _TAB.win_ewin(_wnd,,'RED',,1);
   exec('ok_esc','#window',_TAB,_wnd,,,,,,,exec('text_red_ok','#window'));
   _cfg.put(_TAB,_red,_wnd)
?};

_red:='POP';
{? (_acr:=_cfg.get(_TAB,_red))=''
|| _wnd:=_TAB.mk_edit(_hdr,0,'#ze_lst_%1'[-_red]);
   {? exec('runtime_dro','#system')
   || _TAB.win_ewin(_wnd,,'DRO',_std,1)
   ?};
   _TAB.win_ewin(_wnd,,'RED',_def,1);
   exec('ok_esc','#window',_TAB,_wnd,,,,,,,exec('text_red_ok','#window'));
   _cfg.put(_TAB,_red,_wnd)
?};

_TAB.win_patt('WZO');

1


\lst_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_LST.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('lst_editable','ze_lib')
|| {? ZE_LST.sel_size()<=1
   || _aid+='U'
   ?}
?};

ZE_LST.actions_grayed(_wnd,_aid);
~~


\pom_lst_nzal_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją pola LST_NZAL w oknie zmiennej ZE_POM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('lst_ref','ze_lib')<>null


\pom_lst_nzal_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po edycji pola LST_NZAL w oknie zmiennej ZE_POM.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZE_LST.ZE_LST:=ZE_POM.LST_NZAL;
{? ZE_LST.ZE_LST<>0
|| _def:=null;
   _grp:=null;
   _shr:='T';
   _acc:='T';
   ZE_LST.cntx_psh();
   {? ZE_LST.seek(ZE_LST.ZE_LST,,1)
   || _def:=ZE_LST.ZE_DEF;
      _grp:=ZE_LST.ZE_GRP;
      _shr:=ZE_LST.WSPOLNA;
      _acc:=ZE_LST.DOSTEPNA
   ?};
   ZE_LST.cntx_pop();
   ZE_LST.ZE_DEF:=_def;
   ZE_LST.ZE_GRP:=_grp;
   ZE_LST.WSPOLNA:=_shr;
   ZE_LST.DOSTEPNA:=_acc
?};
1


\pom_lst_nzal_tak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wartość "Zaznaczone" pola LST_NZAL w oknie DOD_LST zmiennej ZE_POM.
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
0


\pom_lst_nzal_nie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wartość "Zaznaczone" pola LST_NZAL w oknie DOD_LST zmiennej ZE_POM.
::   WE:
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
#exec('lst_ref','ze_lib')


\wdef_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zwraca wskazanie na aktualny wiersz w tabeli ZE_WDEF.
::   WE:
::   WY: wskazanie na wiersz tabeli ZE_WDEF
::----------------------------------------------------------------------------------------------------------------------
ZE_WDEF.ref()


\wdef_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_WDEF,'SYSTEM')


\wdef_slo_kod_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SLO_KOD tabeli ZE_WDEF. Ograniczenie zakresu słownika SLO_KOD.
::   WE:
::   WY: wzorzec edycji
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','ext_slo','ZERD_OKN')


\wdef_slo_kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją SLO_KOD tabeli ZE_WDEF. Blokuje możliwość zmiany rodzaju okienka standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('wdef_editable','ze_lib')


\wdef_tytul_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją TYTUL tabeli ZE_WDEF. Blokuje możliwość zmiany tytułu okienka standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('wdef_editable','ze_lib')


\wdef_kolumny_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem KOLUMNY tabeli ZE_WDEF. Ustawia opcje pola FORMULA w bieżącym okienku redakcji.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? (_wnd:=ZE_WDEF.win_edit('?'))=''
|| return(1)
?};
_opt:='enable=%1,mark=%1'[$(ZE_WDEF.KOLUMNY<>'T')];
ZE_WDEF.efld_opt(_wnd,_opt,,'FORMULA');
1


\wdef_kolumny_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją KOLUMNY tabeli ZE_WDEF. Blokuje możliwość zmiany kolumn okienka standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('wdef_editable','ze_lib')


\wdef_formula_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed edycją FORMULA tabeli ZE_WDEF. Blokuje możliwość zmiany formuły okienka standardowego.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
ZE_WDEF.KOLUMNY='N' & exec('wdef_editable','ze_lib')


\wdef_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku CFG tabeli ZE_WDEF.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
1


\wdef_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" w okienku CFG tabeli ZE_WDEF.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('wdef_editable','ze_lib')


\wdef_testuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcją "Testuj" w okienku CFG tabeli ZE_WDEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? (_obj:=exec('mk_def_wnd','ze_lib',ZE_WDEF.ref())).VALUE<>1
:: wystąpił błąd podczas próby utworzenia okienka
|| FUN.emsg(_obj.INFO);
   return()
?};

_acr:=_obj.INFO;
_sym:=ZE_WDEF.SLO_KOD().KOD;
_TAB:=($ZE_WDEF.ZE_DEF().TABELA)();

{? exec('is_edit','ze_lib',_sym)
:: testuj okienko redakcji
|| _org:=no_msg(1);
   errno();
   in_error();
   on_error(3);
   _TAB.cntx_psh();
   _TAB.win_edit(_acr);
   {? errno()
   || FUN.emsg(exec('err_wnd_set','ze_lib',_acr));
      _TAB.cntx_pop();
      return()
   ?};
   _TAB.blank(1);
   _TAB.display();
   _TAB.cntx_pop();
   {? ZE_WDEF.KOLUMNY='T'
::    usuń definiowane
   || _TAB.win_edel(_acr);
      {? errno()
      || FUN.emsg(exec('err_wnd_del','ze_lib',_acr))
      ?}
   ?};
   on_error();
   no_msg(_org)

|? exec('is_select','ze_lib',_sym)
:: testuj okienko wertowania
|| _org:=no_msg(1);
   errno();
   in_error();
   on_error(3);
   _TAB.cntx_psh();
   _TAB.win_sel(_acr);
   {? errno()
   || FUN.emsg(exec('err_wnd_set','ze_lib',_acr));
      _TAB.cntx_pop();
      return()
   ?};
   _TAB.prefix();
   _TAB.f_set(,,'0=1');
   _TAB.select();
   _TAB.cntx_pop();
   {? ZE_WDEF.KOLUMNY='T'
::    usuń definiowane
   || _TAB.win_del(_acr);
      {? errno()
      || FUN.emsg(exec('err_wnd_del','ze_lib',_acr))
      ?}
   ?};
   on_error();
   no_msg(_org)
?};
~~


\err_wnd_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy treść komunikatu o błędnym akronimie okienka.
::   WE: _a [STRING] - akronim okienka
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'"%1" nie jest poprawnym akronimem okienka.'@[_a]


\err_wnd_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy treść komunikatu o błędzie usunięcia okienka.
::   WE: _a [STRING] - akronim okienka
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Usunięcie okienka "%1" nie jest możliwe.'@[_a]


\wdef_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_WDEF.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_WDEF,'RED','DRO',,,'WZO')


\wdef_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_WDEF.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('wdef_editable','ze_lib')
|| {? ZE_WDEF.sel_size()<=1
   || _aid+='U'
   ?}
?};

ZE_WDEF.actions_grayed(_wnd,_aid);
~~


\is_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy okienko jest okienkiem redagowania/wzorca.
::   WE: _a [STRING] - kod rodzaju okienka
::   WY: 0/1 - nie/tak
::----------------------------------------------------------------------------------------------------------------------
-_a='red' | -_a='wzo'


\is_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy okienko jest okienkiem selekcji/wyboru.
::   WE: _a [STRING] - kod rodzaju okienka
::   WY: 0/1 - nie/tak
::----------------------------------------------------------------------------------------------------------------------
-_a='wer' | -_a='wyb'


\get_wid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy identyfikator okienka.
::   WE: _a [STRING] - kod rodzaju okienka
::   WY: identyfikator okienka
::----------------------------------------------------------------------------------------------------------------------
'ZE%1_%2'[%255,_a]


\mk_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy i zapamiętuje okienka tabeli.
::   WE: _a [_ZE_DEF] - wskazanie definicji
::   WY: tablica nazwana z polami:
::       VALUE - wynik działania (-1/0/1 - błąd/porażka/sukces),
::       INFO - akronim okienka dla VALUE=1 lub treść komunikatu o błędzie dla VALUE<>1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=_a;

_prolog:="
   ZE_DEF.cntx_psh();
   ZE_DEF.clear();
   ZE_WDEF.cntx_psh();
   ZE_WDEF.index('DOSTEPNE');
   ZE_WDEF.prefix(_a,'T');
   exec('ext_val','#object',-1)
";
_epilog:="
   {? var_pres('_b')=type_of('')
   || _a.INFO:=_b
   ?};
   ZE_WDEF.cntx_pop();
   ZE_DEF.cntx_pop();
   _a
";

:: wartość zwracana
_obj:=_prolog(_def);

_err:=
   {? ~ZE_DEF.seek(_def)
   || exec('err_rec_acc','#message',_def)
   |? var_pres(ZE_DEF.TABELA)<>type_of(SYSLOG)
   || exec('err_not_table','#message',ZE_DEF.TABELA)
   || ''
   ?};
{? _err<>''
|| return(_epilog(_obj,_err))
?};

:: okienka tabeli
exec('__WND','#object');
_TAB:=($ZE_DEF.TABELA)();
_put:="
   _wid:=exec('get_wid','ze_lib',_c);
   {? _a.get(_b,_wid)=''
   || _a.put(_b,_wid,_d.INFO)
   ?}
";

_wid:='WER';
:: wymagane okno wertowania
{? ~ZE_WDEF.find_key(_wid)
|| return(_epilog(_obj,'Brak definicji okienka wertowania.'@))
|? (_wer:=exec('mk_def_sel','ze_lib')).VALUE<>1
|| return(_epilog(_wer))
|| _put(__WND.SEL,_TAB,_wid,_wer)
?};

_wid:='WYB';
:: wymagane okno wyboru
{? ~ZE_WDEF.find_key(_wid)
|| return(_epilog(_obj,'Brak definicji okienka wyboru.'@))
|? (_wyb:=exec('mk_def_sel','ze_lib')).VALUE<>1
|| return(_epilog(_wyb))
|| _put(__WND.SEL,_TAB,_wid,_wyb)
?};

_wid:='RED';
:: opcjonalne okno edycji
{? ZE_WDEF.find_key(_wid)
|| {? (_red:=exec('mk_def_edit','ze_lib')).VALUE=1
   || _put(__WND.EDIT,_TAB,_wid,_red)
   || return(_epilog(_red))
   ?}
?};

_wid:='WZO';
:: opcjonalne okno wzorca
{? ZE_WDEF.find_key(_wid)
|| {? (_wzo:=exec('mk_def_edit','ze_lib')).VALUE=1
   || _put(__WND.EDIT,_TAB,_wid,_wzo)
   || return(_epilog(_wzo))
   ?}
?};

_obj.VALUE:=1;
_epilog(_obj)


\mk_def_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy lub zwraca akronim okienka na podstawie definicji (tabeli ZE_WDEF).
::   WE: _a [_ZE_WDEF] - wskazanie definicji okienka
::   WY: tablica nazwana z polami:
::       VALUE - wynik działania (-1/0/1 - błąd/porażka/sukces),
::       INFO - akronim okienka dla VALUE=1 lub treść komunikatu o błędzie dla VALUE<>1
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=_a;

_prolog:="
   ZE_DEF.cntx_psh();
   ZE_WDEF.cntx_psh();
   ZE_WDEF.clear();
   exec('ext_val','#object',0)
";
_epilog:=$('
   {? var_pres(\'_b\')=type_of(\'\')
   || _a.INFO:=_b
   ?};
   {? _a.VALUE<>1 & _a.INFO=\'\'
   || _a.INFO:=\'%1\'
   ?};
   ZE_WDEF.cntx_pop();
   ZE_DEF.cntx_pop();
   _a
'['Utworzenie okienka nie powiodło się.'@]);

_obj:=_prolog();
{? ZE_WDEF.seek(_def)
|| _tab:=ZE_WDEF.ZE_DEF().TABELA;
   {? var_pres(_tab)<>type_of(SYSLOG)
   || return(_epilog(_obj,exec('err_not_table','#message',_tab)))
   ?};
   _sym:=ZE_WDEF.SLO_KOD().KOD;
   {? exec('is_edit','ze_lib',_sym)
::    spróbuj utworzyć okienko edycji
   || return(_epilog(exec('mk_def_edit','ze_lib')))

   |? exec('is_select','ze_lib',_sym)
::    spróbuj utworzyć okienko wertowania
   || return(_epilog(exec('mk_def_sel','ze_lib')))

   || _epilog(_obj,'Nieznany rodzaj okienka'@)
   ?}

|| _epilog(_obj,exec('err_rec_acc','#message',_def))
?}


\mk_def_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy lub zwraca akronim okienka redakcji na podstawie bieżącej definicji (wiersza tabeli ZE_WDEF).
::   WE:
::   WY: tablica nazwana z polami:
::       VALUE - wynik działania (-1/0/1 - błąd/porażka/sukces),
::       INFO - akronim okienka dla VALUE=1 lub treść komunikatu o błędzie dla VALUE<>1
::----------------------------------------------------------------------------------------------------------------------
:: spróbuj utworzyć okienko formułą
_obj:=exec('mk_def_fml','ze_lib');
{? _obj.VALUE<>0
|| return(_obj)
?};

ZE_WKOL.cntx_psh();
ZE_WKOL.index('NUMER');
ZE_WKOL.prefix(ZE_WDEF.ref());
{? ~ZE_WKOL.first()
:: brak pól okienka
|| _obj.INFO:='Brak pól w okienku redagowania.'@;
   ZE_WKOL.cntx_pop();
   return(_obj)
?};
:: tabela zweryfikowana w mk_def_wnd
_TAB:=($ZE_WDEF.ZE_DEF().TABELA)();
:: dodaj pola na podstawie definicji
_wnd:=_TAB.mk_edit(ZE_WDEF.TYTUL,0,'ze_wdef_%1'[$#ZE_WDEF.ref()]);
:: dodaj wymagany, ogólny separator
_TAB.win_esep(_wnd,'Dane podstawowe'@);
_loop:=1;
{!
|? _loop
|! _TAB.win_efld(_wnd,,
      ZE_WKOL.KOL_TAB,ZE_WKOL.KOL_ZEW,,
      ZE_WKOL.DLUGOSC,ZE_WKOL.PRECYZJA,1,
      ZE_WKOL.ETYKIETA,,ZE_WKOL.SLO_NAZ().NAZWA
   );
   _loop:=ZE_WKOL.next()
!};
ZE_WKOL.cntx_pop();

{? _wnd<>''
|| _obj.VALUE:=1;
   _obj.INFO:=_wnd
:: standardowe przyciski z 'OK' dla "Wyświetl"
:: exec('ok_esc','#window',_TAB,_wnd)
?};
_obj


\mk_def_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy lub zwraca akronim okienka selekcji na podstawie bieżącej definicji (wiersza tabeli ZE_WDEF).
::   WE:
::   WY: tablica nazwana z polami:
::       VALUE - wynik działania (-1/0/1 - błąd/porażka/sukces),
::       INFO - akronim okienka dla VALUE=1 lub treść komunikatu o błędzie dla VALUE<>1
::----------------------------------------------------------------------------------------------------------------------
:: spróbuj utworzyć okienko formułą
_obj:=exec('mk_def_fml','ze_lib');
{? _obj.VALUE<>0
|| return(_obj)
?};

ZE_WKOL.cntx_psh();
ZE_WKOL.index('NUMER');
ZE_WKOL.prefix(ZE_WDEF.ref());
{? ~ZE_WKOL.first()
:: brak kolumn okienka
|| _obj.INFO:='Brak kolumn w okienku wertowania.'@;
   ZE_WKOL.cntx_pop();
   return(_obj)
?};
:: tabela zweryfikowana w mk_def_wnd
_TAB:=($ZE_WDEF.ZE_DEF().TABELA)();
:: dodaj kolumny na podstawie definicji
_wnd:=_TAB.mk_sel(ZE_WDEF.TYTUL,'P',0,'#ze_wdef_%1'[$#ZE_WDEF.ref()],,,,,'U');
_loop:=1;
{!
|? _loop
|! _TAB.win_fld(_wnd,,
      ZE_WKOL.KOL_TAB,ZE_WKOL.KOL_ZEW,,
      ZE_WKOL.DLUGOSC,ZE_WKOL.PRECYZJA,1,
      ZE_WKOL.ETYKIETA,,ZE_WKOL.SLO_NAZ().NAZWA
   );
   _loop:=ZE_WKOL.next()
!};
ZE_WKOL.cntx_pop();
:: dodaj akcje zgodnie z typem
_sym:=-ZE_WDEF.SLO_KOD().KOD;
{? _sym='wer'
:: zawartość zestawu
|| _tag:='D';
   _act:='Dołącz'@@;
   _tip:='Dołączenie nowego zapisu'@;
   _fml:="exec('poz_dolacz_a','ze_lib')";
   _TAB.win_act(_wnd,1,'Formuła',_act,,_tip,_fml,,1,,,,_tag);
   _TAB.win_act(_wnd,0,'Formuła',_act,,_tip,_fml,,1,,,,_tag);
   _TAB.win_btn(_wnd,'text=%1'[_act],'menu:%1'[_tag]);
   _tag:='P';
   _act:='Popraw'@@;
   _tip:='Poprawienie bieżącego zapisu'@;
   _cnd:="exec('poz_popraw_b','ze_lib')";
   _fml:="exec('poz_popraw_a','ze_lib')";
   _TAB.win_act(_wnd,0,'Formuła',_act,,_tip,_cnd,_fml,,,,,_tag);
   _TAB.win_btn(_wnd,'text=%1'[_act],'menu:%1'[_tag],,,,,,'noempty');
   _tag:='U';
   _act:='Usuń'@@;
   _cnd:="exec('poz_usun_b','ze_lib')";
   _fml:="exec('poz_usun_a','ze_lib')";
   _grb:="exec('poz_usun_gb','ze_lib')";
   _gra:="exec('poz_usun_ga','ze_lib')";
   _TAB.win_act(_wnd,0,'Formuła',_act,,_tip,_cnd,_fml,,1,_grb,_gra);
   _TAB.win_btn(_wnd,'text=%1'[_act],'menu:%1'[_tag],,,,,,'noempty')
|? _sym='wyb'
:: zawartość słownika
|| _TAB.win_act(_wnd,,'Formuła','Wybierz'@@,,
      'Wybór bieżącego zapisu'@,,
      "sel_exit()",1
  )
?};
:: dodaj wspólne akcje
_TAB.win_act(_wnd,,'Szukaj');
_TAB.win_act(_wnd,,'Kolejność');

{? _wnd<>''
|| _obj.VALUE:=1;
   _obj.INFO:=_wnd
?};
_obj


\mk_def_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy lub zwraca akronim okienka na podstawie bieżącej definicji (wiersza tabeli ZE_WDEF).
::   WE:
::   WY: tablica nazwana z polami:
::       VALUE - wynik działania (-1/0/1 - błąd/porażka/sukces),
::       INFO - akronim okienka dla VALUE=1 lub treść komunikatu o błędzie dla VALUE<>1
::----------------------------------------------------------------------------------------------------------------------
_obj:=exec('ext_val','#object',-1);
{? ZE_WDEF.KOLUMNY<>'T'
:: do utworzenia okienka użyj formuły
|| _exe:=ZE_WDEF.memo_txt(,1,'FORMULA');
   _org:=no_msg(1);
   errno();
   in_error();
   on_error(3);
:: wykonaj formułę
   _val:=($_exe)();

   {? in_error()
::    wystąpił błąd składniowy
   || _obj.INFO:=exec('err_fml_exec','#message',_exe)

   |? type_of(_val)<>type_of('') | _val=''
::    wartość zwrócona przez formułę na pewno jest błędna
   || _obj.INFO:='Formuła nie zwróciła akronimu okienka.'@

   || _obj.VALUE:=1;
      _obj.INFO:=_val
   ?};
   on_error();
   no_msg(_org)

|| _obj.VALUE:=0
?};
_obj


\wdef_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord po" okienka tabeli ZE_WDEF. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _grp_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','ze_lib',ZE_WDEF)


\wkol_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_WDEF,'SYSTEM')


\wkol_slo_naz_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wzorzec edycji pola SLO_NAZ tabeli ZE_WKOL. Ograniczenie zakresu słownika SLO_KOD.
::   WE:
::   WY: wzorzec edycji
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','ext_slo','PODP_OKN')


\wkol_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Dołącz" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - dołączanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_editable','ze_lib')


\wkol_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Dołącz" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_num:=1;
{? ZE_WKOL.size()>0
|| ZE_WKOL.ZE_WDEF();
   _num:=ZE_WKOL.NUMER+1;
   {? ~exec('wdef_editable','ze_lib')
   || _num:=ZE_WKOL.size()+1
   ?}
?};
ZE_WKOL.blank();
ZE_WKOL.NUMER:=_num;
exec('wkol_kolumna','ze_lib');
{? ZE_WKOL.KOL_TAB=''
|| return()
?};

{? ZE_WKOL.edit("exec('_wkol_chk','ze_lib',0)")
|| do();
   ZE_WKOL.cntx_psh();
   ZE_WKOL.index('NUMER');
   ZE_WKOL.prefix(ZE_WKOL.ZE_WDEF);
   _loop:=
      {? ZE_WKOL.find_key(_num)
      || ZE_WKOL.last()
      ?};
   {!
   |? _loop & _num<=ZE_WKOL.NUMER
   |! ZE_WKOL.NUMER+=1;
      {? ~ZE_WKOL.put()
      || undo()
      ?};
      _loop:=(ZE_WKOL.prev() & do_state()=1)
   !};
   ZE_WKOL.cntx_pop();
   {? do_state()=1 & ZE_WKOL.add()
   || exec('wkol_numeruj','ze_lib')
   || undo()
   ?};
   end()
?};
~~


\wkol_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Popraw" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - edycja zablokowana/możliwa
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_editable','ze_lib')


\wkol_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Popraw" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_WKOL.get();
{? ZE_WKOL.edit("exec('_wkol_chk','ze_lib',1)")
|| ZE_WKOL.put()
?};
~~


\wkol_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Usuń" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - usuwanie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_editable','ze_lib')


\wkol_numeruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustala ciągłą numerację kolumn.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_WKOL.cntx_psh();
ZE_WKOL.clear();
ZE_WKOL.f_set('NUMER',,'ZE_WKOL.ZE_WDEF=:_a',ZE_WKOL.ZE_WDEF);
_loop:=ZE_WKOL.f_first();
_num:=1;
{!
|? _loop
|! {? ZE_WKOL.NUMER<>_num
   || ZE_WKOL.NUMER:=_num
   ?};
   _num+=1;
   _loop:=ZE_WKOL.f_next()
!};
ZE_WKOL.f_clear();
ZE_WKOL.cntx_pop();
~~


\wkol_wgore_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Przesuń -> W górę" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - przesunięcie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
{? ZE_WKOL.NUMER>1 & exec('wkol_editable','ze_lib')
|| _test:=1;
   ZE_WKOL.cntx_psh();
   {? ZE_WKOL.prev()
   || _test:=exec('wkol_editable','ze_lib')
   ?};
   ZE_WKOL.cntx_pop();
   _test
?}


\wkol_wgore_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Przesuń -> W górę".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_przesun_a','ze_lib',0)


\wkol_wdol_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed akcją "Przesuń -> W dół" w okienku CFG tabeli ZE_WKOL.
::   WE:
::   WY: 0/1 - przesunięcie zablokowane/możliwe
::----------------------------------------------------------------------------------------------------------------------
{? ZE_WKOL.NUMER<ZE_WKOL.size() & exec('wkol_editable','ze_lib')
|| _test:=1;
   ZE_WKOL.cntx_psh();
   {? ZE_WKOL.next()
   || _test:=exec('wkol_editable','ze_lib')
   ?};
   ZE_WKOL.cntx_pop();
   _test
?}


\wkol_wdol_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Akcja "Przesuń -> W górę".
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('wkol_przesun_a','ze_lib',1)


\wkol_przesun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przesuwanie zapisu w górę i w dół.
::   WE: _a [INTEGER] - 0/1 - w górę/w dół
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_move:=
   {? var_pres('_a')=type_of(0)
   || $('ZE_WKOL.%1()'[{? _a || 'next' || 'prev' ?}])
   || "0"
   ?};

_new:=0;
_cur:=ZE_WKOL.NUMER;
ZE_WKOL.cntx_psh();
ZE_WKOL.index('NUMER');
ZE_WKOL.prefix(ZE_WKOL.ZE_WDEF);
{? _move() & ZE_WKOL.NUMER<>0
|| _new:=ZE_WKOL.NUMER;
   ZE_WKOL.NUMER:=_cur;
   ZE_WKOL.put()
?};
ZE_WKOL.cntx_pop();
{? _new<>0
|| ZE_WKOL.NUMER:=_new;
   ZE_WKOL.put()
?};
~~


\wkol_kolumna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Obsługa przycisku "Kolumna" w okienku redakcji.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
_kol_tab:=ZE_WKOL.KOL_TAB;
_kol_zew:=ZE_WKOL.KOL_ZEW;

_pth:=_kol_tab+{? _kol_zew<>'' || ','+_kol_zew || '' ?};

_fld:=exec('wkol_wybierz','ze_lib',_pth);
{? type_of(_fld)<>type_of(~~)
|| ZE_WKOL.KOL_TAB:=_fld[2];
   ZE_WKOL.KOL_ZEW:=_fld[3];
   {? ZE_WKOL.KOL_TAB<>_kol_tab | ZE_WKOL.KOL_ZEW<>_kol_zew
   || ZE_WKOL.ETYKIETA:='';
      ZE_WKOL.SLO_NAZ:=null;
      ZE_WKOL.DLUGOSC:=0;
      ZE_WKOL.PRECYZJA:=0;
      _tab:=_fld[1];
      _col:=ZE_WKOL.KOL_TAB;
      {? ZE_WKOL.KOL_ZEW<>''
      || _ttp:=exec('type_name','#field',($_tab)(),_col);
         {? 1+_ttp='_' & var_pres(1-_ttp)=type_of(SYSLOG)
         || _tab:=1-_ttp;
            _col:=ZE_WKOL.KOL_ZEW
         ?}
      ?};
      ZE_WKOL.ETYKIETA:=MS.name(_tab,_col);
      {? (_comm:=MS.comment(_tab,_col))<>''
      || ZE_WKOL.SLO_NAZ:=exec('slo_naz','ext_slo','PODP_OKN',_comm)
      ?};
      {? var_pres(_col,($_tab)())=27
      || ZE_WKOL.DLUGOSC:=MS.fld_len(_tab,_col);
         ZE_WKOL.DLUGOSC+=(ZE_WKOL.DLUGOSC=1)
      ?}
   ?}
?};
''


\wkol_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wybór kolumny okienka.
::   WE: _a [STRING] - ścieżka do poprawianego elementu
::   WY: napis określający wybraną kolumnę, gdzie:
::       '' - nie wybrano kolumny
::       'TABELA.KOLUMNA' - kolumna typu prostego
::       'TABELA.KOLUMNA().KOLUMNA' - kolumna typu złączeniowego
::----------------------------------------------------------------------------------------------------------------------
_pth:={? var_pres('_a')=type_of('') || _a || '' ?};
_par:=exec('choose_par','#field',ZE_WDEF.ZE_DEF().TABELA);
_par.allow_branches(0);
_par.set_complex(0);
_par.set_system(0);

:: wybierz kolumnę
{? (_fld:=exec('choose','#field',_par,_pth))=''
|| return()
?};

_ret:=spli_str(gsub(_fld+'.','()',''),'.');
_ttp:=exec('type_name','#field',($_ret[1])(),_ret[2]);
{? _ret[3]<>'' | 1+_ttp='_'
|| _ttp:=1-_ttp;
   {? 1+exec('type_name','#field',($_ttp)(),_ret[3])='_'
   || FUN.emsg('Kolumna "%1" w złączeniu "%2" nie może być wykorzystana.'@[
         _ret[3],_ret[2]
      ]);
      return()
   ?}
?};
_ret


\wkol_x_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed wyświetleniem okna tabeli ZE_WKOL.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('__WND','object');
_cfg:=__WND.EDIT;
_red:='RED';

:: zabezpieczenie przed dodawaniem przycisków
{? (_acr:=_cfg.get(ZE_WKOL,_red))<>''
|| ZE_WKOL.win_edit(_acr);
   ZE_WKOL.win_patt('WZO');
   return(1)
?};

:: zależnie od wersji narzędzi twórz lub użyj istniejące okna
exec('setup_edit','#symsys',ZE_WKOL,_red,'DRO',,,'WZO',0);
{? (_wnd:=_cfg.get(ZE_WKOL,_red))<>_red
|| ZE_WKOL.win_ebtn(_wnd,'text=%1,align=begin'['Kolumna'@],
      "exec('wkol_kolumna','ze_lib')"
   );
   exec('ok_esc','#window',ZE_WKOL,_wnd,,,,,,,exec('text_red_ok','#window'))
?};

1


\wkol_x_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord przed" okienka tabeli ZE_WKOL.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 || return() ?};

_aid:='';
_wnd:=cur_win(1,1);

{? ~exec('wkol_editable','ze_lib')
|| {? ZE_WKOL.sel_size()<=1
   || _aid+='DPU:D'
   ?}
?};

ZE_WKOL.actions_grayed(_wnd,_aid);
~~


\wkol_x_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: "Rekord po" okienka tabeli ZE_WKOL. Sprawdzenie poprawności wprowadzonych danych.
::   WE:
::   WY: wynik _grp_chk
::----------------------------------------------------------------------------------------------------------------------
exec('x_x_ra','ze_lib',ZE_WKOL)


\poz_editable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdza, czy wiersz tabeli może być modyfikowany.
::   WE:
::   WY: 0/1 - modyfikacje zabronione/dozwolone
::----------------------------------------------------------------------------------------------------------------------
exec('is_editable','#symsys',ZE_POZ,'SYSTEM')


\poz_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Dołączenie pozycji do bieżącego zestawu.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? (_src:=exec('select_tab','ze_lib'))=null
:: porzucono wybór, przywróć poprzednie filtrowanie tabeli
|| exec('filter_zes','ze_lib',($ZE_LST.ZE_DEF().TABELA)());
   return()
?};
_id:=~~;
_TAB:=ref_tab(_src);
_TAB.cntx_psh();
{? _TAB.seek(_src,,1)
|| _id:=_TAB.idadd_value()
|| FUN.emsg(exec('err_rec_acc','#message',_src));
   _TAB.cntx_pop();
   return()
?};
_TAB.cntx_pop();

ZE_POZ.clear();
ZE_POZ.blank();
ZE_POZ.ZE_LST:=ZE_LST.ref();
{? ZE_LST.WSPOLNA<>'T'
|| ZE_POZ.FIRMA:=exec('ref_firma','ustawienia')
?};
ZE_POZ.SRC_ADD:=_id;
ZE_POZ.SKROT:='';

_new:=null;
{? exec('runtime_dro','#system')
|| ZE_POZ.win_edit('DRO');
   exec('_x_modb','ze_lib',ZE_POZ);
   {? ZE_POZ.edit("exec('_poz_chk','ze_lib',0)")
   || {? ZE_POZ.add()
      || _new:=ZE_POZ.ref()
      ?}
   ?}
|| {? ZE_POZ.add()
   || _new:=ZE_POZ.ref()
   ?}
?};

:: aktualizuj filtr tabeli zgodnie z zawartością zestawu i ustaw kursor
{? exec('filter_zes','ze_lib',($ZE_LST.ZE_DEF().TABELA)()) & _new<>null
|| _TAB.f_seek(_src)
?};
~~


\poz_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Sprawdzenie, czy zasadnicza akcja może być wykonana.
::   WE:
::   WY: 0/1 - blokada/
::----------------------------------------------------------------------------------------------------------------------
exec('poz_editable','ze_lib')


\poz_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Zmiana bieżącej pozycji w zestawie.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=($ZE_LST.ZE_DEF().TABELA)();
_old:=_TAB.idadd_value();
_org:=_TAB.ref();
{? (_ref:=exec('select_tab','ze_lib'))=null
:: porzucono wybór, przywróć filtrowanie
|| exec('filter_zes','ze_lib',_TAB);
   return()
?};
_new:='';
_TAB.cntx_psh();
{? _TAB.seek(_ref,,1)
|| _new:=_TAB.idadd_value()
|| FUN.emsg(exec('err_rec_acc','#message',_ref));
   _TAB.cntx_pop();
   return()
?};
_TAB.cntx_pop();

_fir:=null;
{? ZE_LST.WSPOLNA<>'T'
|| _fir:=exec('ref_firma','ustawienia')
?};
ZE_POZ.cntx_psh();
ZE_POZ.index('UNIQUE');
ZE_POZ.prefix(ZE_LST.ref(),_fir);
{? ZE_POZ.find_key(_old,) &
   {? exec('runtime_dro','#system')
   || ZE_POZ.win_edit('DRO');
      ZE_POZ.SRC_ADD:=_new;
      exec('_x_modb','ze_lib',ZE_POZ);
      ZE_POZ.edit("exec('_poz_chk','ze_lib',1)")
   || ZE_POZ.SRC_ADD:=_new;
      exec('_x_modb','ze_lib',ZE_POZ);
      _chk:=exec('_poz_chk','ze_lib',1);
      type_of(_chk)=type_of(0) & _chk
   ?}
|| ZE_POZ.put()
|| _ref:=_org
?};
ZE_POZ.cntx_pop();

:: aktualizuj filtr zgodnie z zawartością zestawu
exec('filter_zes','ze_lib',_TAB);
_TAB.f_seek(_ref);
~~


\poz_usun_ask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Potwierdzenie usunięcia danych.
::   WE:
::   WY: 0/1 - rezygnacja potwierdzenie
::----------------------------------------------------------------------------------------------------------------------
FUN.ask(
   {? ZE_POZ.sel_size()<=1
   || 'Czy na pewno usunąć bieżącą pozycję z zestawu?'@
   || 'Czy na pewno wybrane pozycje z zestawu?'@
   ?}
)


\poz_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Potwierdzienie usunięcia wybranych wierszy.
::   WE:
::   WY: 0/1 - rezygnacja/potwierdzenie
::----------------------------------------------------------------------------------------------------------------------
exec('del_conf','#table',($ZE_LST.ZE_DEF().TABELA)())


\poz_usun_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po grupowym usunięciu rekordów.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: aktualizuj filtr tabeli zgodnie z zawartością zestawu
exec('filter_zes','ze_lib',($ZE_LST.ZE_DEF().TABELA)())


\poz_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Potwierdzienie usunięcia bieżącej pozycji z zestawu.
::   WE:
::   WY: 0/1 - rezygnacja/potwierdzenie
::----------------------------------------------------------------------------------------------------------------------
_TAB:=($ZE_LST.ZE_DEF().TABELA)();
exec('poz_editable','ze_lib') &
{? _TAB.sel_size()=0
|| exec('del_conf','#table',_TAB)
|| 1
?}


\poz_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Usunięcie bieżącej pozycji z zestawu.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=($ZE_LST.ZE_DEF().TABELA)();
_fir:=null;
{? ZE_LST.WSPOLNA<>'T'
|| _fir:=exec('ref_firma','ustawienia')
?};

ZE_POZ.cntx_psh();
ZE_POZ.index('UNIQUE');
ZE_POZ.prefix(ZE_LST.ref(),_fir,);
{? ZE_POZ.find_key(_TAB.idadd_value())
|| ZE_POZ.del()
?};
ZE_POZ.cntx_pop();

{? _TAB.sel_size()=0
:: aktualizuj filtr tabeli zgodnie z zawartością zestawu
|| exec('filter_zes','ze_lib',($ZE_LST.ZE_DEF().TABELA)())
?};
~~


\config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Wyświetla panel zarządzania zestawami.
::   WE: _a [STRING] - symbol dziedziny produktowej
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_dom:=null;
_adm:='adm';
_any:='dom';
_zws:='zws';

_wid:='';
_sfx:=_any;

{? var_pres('_a')=type_of('') & _a<>''
|| {? (_dom:=exec('domain_ref','#b_domain',~-_a))=null
   || return()
   ?};
   _wid:=-_a;
   {? _wid=_zws
   || _sfx:=_zws
   ?}
|| _wid:=_adm;
   _sfx:=_adm
?};

:: utwórz odpowiednie okienko grupowe tabeli ZE_GRP
_wnd:=exec('mk_sel_%1'[_sfx],'ze_lib',_wid);
:: ustaw lub pozostaw funkcjonalność pól SYSTEM i KOD zależnie od wersji narzędzi
_acr:=spli_str(
:: tabele główne
   'ZE_GRP,ZE_DEF,ZE_KIR,ZE_LST,ZE_POZ,'
:: wykorzystanie (w firmach celowo pominięte)
   'ZE_BDEF,ZE_BGRP,'
:: okienka
   'ZE_WDEF,ZE_WKOL',
   ','
);
{? exec('setup_dro','#symsys',_acr)
|| _set:="{! _ii:=4.._ |! _[_ii].fld_fml(_a,_b,_c) !}";
   _set('GRUPA','BLANK',"'T'",ZE_DEF,ZE_GRP)
?};

ZE_GRP.cntx_psh();
{? _wid<>_adm
|| _where:='('
      'ZE_GRP.GRUPA=\'T\' or ZE_GRP.REFERENCE in ('
      '  select ZE_FGRP.ZE_GRP from ZE_FGRP where ZE_FGRP.FIRMA=:_b'
      '))';
   {?_wid<>_zws
   || _where+=
         ' and ZE_GRP.DOSTEPNA=\'T\' and ZE_GRP.REFERENCE in ('
         '  select ZE_BGRP.ZE_GRP from ZE_BGRP where ZE_BGRP.B_DOMAIN=:_a'
         ')'
   ?};
   ZE_GRP.f_set('NAZWA',,_where,_dom,exec('ref_firma','ustawienia'))
|| ZE_GRP.f_clear()
?};

:: udostępnij
ZE_GRP.win_sel(_wnd);
ZE_GRP.select();

:: porządki
ZE_GRP.f_clear();
ZE_GRP.cntx_pop();
ZE_GRP.win_del(_wnd);

:: przywróć funkcjonalność pól
exec('restore_def','#symsys',_acr);
~~


\config_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed otwarciem panelu.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZE_GRP.cntx_psh();
ZE_DEF.cntx_psh();
ZE_LST.cntx_psh();
ZE_KIR.cntx_psh();

ZE_GRP.clear();
ZE_GRP.index('NAZWA');
ZE_GRP.win_dict('WER');

ZE_DEF.clear();
ZE_DEF.index('NAZWA');
ZE_DEF.win_dict('WER');

ZE_LST.clear();
ZE_LST.index('NAZWA');

ZE_KIR.clear();
ZE_KIR.index('NUMER');

exec('init_wnd_type','ext_slo');

1


\config_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po zamknięciu panelu.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
ZE_KIR.cntx_pop();
ZE_LST.cntx_pop();
ZE_DEF.cntx_pop();
ZE_GRP.cntx_pop();
1


\config_grp_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po odświeżeniu okienka tabeli ZE_GRP.
::   WE: _a [STRING] - akronim okienka tabeli ZE_LST
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
grp_disp(ZE_LST,_a,1,1);
~~


\config_grp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed obsługą okienka tabeli ZE_GRP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_GRP.f_rfresh();
~~


\config_def_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Po odświeżeniu okienka tabeli ZE_DEF.
::   WE: _a [STRING] - akronim okienka tabeli ZE_KIR
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
grp_disp(ZE_KIR,_a,1,1);
~~


\config_def_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed obsługą okienka tabeli ZE_DEF.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
ZE_DEF.f_rfresh();
~~


\config_lst_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed obsługą okienka tabeli ZE_LST.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::       _b [STRING] - identyfikator okienka nadrzędnego
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(_b)
|| return('#disable')
?};

ZE_LST.prefix(exec('grp_ref','ze_lib'));
~~


\config_kir_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Przed obsługą okienka tabeli ZE_KIR.
::   WE: _a [INTEGER] - zgodny ze specyfikacją narzędzi
::       _b [STRING] - identyfikator okienka nadrzędnego
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(_b)
|| return('#disable')
?};

ZE_KIR.prefix(exec('def_ref','ze_lib'));
~~


\mk_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy okno grupowe dla wszystkich funkcji parametryzacji.
::   WE: _a [STRING] - tytuł
::       _b [STRING] - identyfikator widoku
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_hdr:=_a;
_wid:=_b;

ZE_GRP.grp_make(_hdr,
:: przed otwarciem
   "params_exec('config_bo','ze_lib')",
   '#ze_grp_%1'[_wid],,,
:: po zamknięciu
   "params_exec('config_oc','ze_lib')",,
:: tryb
   'maximized'
)


\mk_sel_adm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy panel zarządzania konfiguracją zestawów elementów.
::   WE: _a [STRING] - identyfikator widoku
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_wnd:=exec('mk_sel','ze_lib','Ustawienia zestawów elementów'@,_a);

:: konfiguracja grup
ZE_GRP.grp_sel(_wnd,ZE_GRP,'CFG','Według grup zestawów'@,
   "params_exec('config_grp_ar','ze_lib','CFG')",,,,
   "params_exec('config_grp_bs','ze_lib',_a)",,,,
   'maximized_with_title','ZE_GRP',1
);
ZE_GRP.tab_splt(_wnd,,'horizontal','child','10,33%');
ZE_GRP.grp_sel(_wnd,ZE_LST,'CFG',,,,,,
   "params_exec('config_lst_bs','ze_lib',_a,'ZE_GRP')",,,,
   'maximized_with_title'
);

:: konfiguracja definicji
ZE_GRP.grp_sel(_wnd,ZE_DEF,'CFG','Według definicji list'@,
   "params_exec('config_def_ar','ze_lib','CFG')",,,,
   "params_exec('config_def_bs','ze_lib',_a)",,,,
   'maximized_with_title','ZE_DEF'
);
ZE_GRP.tab_splt(_wnd,,'horizontal','child','20,66%');
ZE_GRP.grp_sel(_wnd,ZE_KIR,'CFG',,,,,,
   "params_exec('config_kir_bs','ze_lib',_a,'ZE_DEF')",,,,
   'maximized_with_title'
);

_wnd


\mk_sel_dom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy panel zarządzania zawartością zestawów dla wskazanej dziedziny.
::   WE: _a [STRING] - identyfikator widoku
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_wnd:=exec('mk_sel','ze_lib','Zestawy elementów'@,_a);

ZE_GRP.grp_sel(_wnd,ZE_GRP,'WER',,
   "params_exec('config_grp_ar','ze_lib','WER')",,,,
   "params_exec('config_grp_bs','ze_lib',_a)",,,,
   'maximized_with_title','ZE_GRP',1
);
ZE_GRP.grp_splt(_wnd,,'horizontal','child','15,50%');
ZE_GRP.grp_sel(_wnd,ZE_LST,'WER',,,,,,
   "params_exec('config_lst_bs','ze_lib',_a,'ZE_GRP')",,,,
   'maximized_with_title'
);

_wnd


\mk_sel_zws
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Tworzy panel zarządzania zawartością zestawów w gałęzi "Wspólne".
::   WE: _a [STRING] - identyfikator widoku
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_wnd:=exec('mk_sel','ze_lib','Zestawy elementów'@,_a);

ZE_GRP.grp_sel(_wnd,ZE_GRP,'WER',,
   "params_exec('config_grp_ar','ze_lib','WER')",,,,
   "params_exec('config_grp_bs','ze_lib',_a)",,,,
   'maximized_with_title','ZE_GRP',1
);
ZE_GRP.grp_splt(_wnd,,'horizontal','child','15,50%');
ZE_GRP.grp_sel(_wnd,ZE_LST,'WER',,,,,,
   "params_exec('config_lst_bs','ze_lib',_a,'ZE_GRP')",,,,
   'maximized_with_title'
);

_wnd


\filter_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia filtr tabeli źródłowej zgodnie z zawartością bieżącego zestawu.
::   WE: _a [TABLE] - alias tabeli zestawu
::   WY: wynik f_set
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

_com:='';
{? ZE_LST.WSPOLNA<>'T'
|| _com:='and ZE_POZ.FIRMA=:_c'
?};
_TAB.f_set(,
   'join ZE_POZ using(:_a.%1,ZE_POZ.SRC_ADD)'[_TAB.idadd_acr()],
   'ZE_POZ.ZE_LST=:_b %1'[_com],
   _TAB,ZE_LST.ref(),exec('ref_firma','ustawienia')
)


\select_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Udostępnia do wyboru zawartość tabeli dla bieżącego zestawu.
::   WE:
::   WY: wskazanie wybranego wiersza
::----------------------------------------------------------------------------------------------------------------------
:: wymagane dla podczytania memo
ZE_DEF.cntx_psh();
ZE_DEF.prefix();
_TAB:=($ZE_LST.ZE_DEF().TABELA)();
_prolog:=$ZE_DEF.memo_txt(,1,'PROLOG');
_domain:=$ZE_DEF.memo_txt(,1,'ZAKRES');
_epilog:=$ZE_DEF.memo_txt(,1,'EPILOG');

_ref:=null;
_TAB.cntx_psh();
{? exec('setup_wnd_tab','ze_lib',ZE_DEF.ref())
:: udało się sworzyć interfejs użytkownika
|| _TAB.prefix();
   _TAB.f_clear();
:: wyczyść stos błędów
   errno();
   in_error();
   _old:=no_msg(1);
   _err:=0;

:: wykonaj prolog
   on_error(3);
   _prolog();
   _err+=exec('handle_fml_err','#message',_prolog);

:: wykonaj zakres
   on_error(3);
   _domain();
   _err+=exec('handle_fml_err','#message',_domain);

:: wybierz zapis źródłowy
   {? ~_err & _TAB.select()
   || _ref:=_TAB.ref()
   ?};

:: wykonaj epilog
   on_error(3);
   _epilog();
   _err+=exec('handle_fml_err','#message',_epilog);

:: domyślna obsługa błędów
   no_msg(_old);
   on_error()
?};
_TAB.cntx_pop();
ZE_DEF.cntx_pop();
_ref


\select_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Udostępnia zawartość bieżącego zestawu.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_TAB:=($ZE_LST.ZE_DEF().TABELA)();
_TAB.cntx_psh();
{? exec('setup_wnd_lst','ze_lib',ZE_DEF.ref()) &
   exec('filter_zes','ze_lib',_TAB)
|| _TAB.select()
?};
_TAB.cntx_pop();
~~


\setup_wnd_com
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia wspólne okienka do przeglądania zawartości listy elementów i tabeli źródłowej.
::   WE: [_a] [_ZE_DEF] - wskazanie wiersza tabeli ZE_DEF, wpp przyjęty zostanie bieżący
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=ZE_DEF.ref();
{? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=ZE_DEF
|| _def:=_a
?};

ZE_DEF.cntx_psh();
ZE_DEF.prefix();
{? ~ZE_DEF.seek(_def)
:: może się zdarzyć np. przy aktywnej transakcji
|| FUN.emsg(exec('err_rec_acc','#message',_def));
   ZE_DEF.cntx_pop();
   return(0)
?};
_TAB:=($ZE_DEF.TABELA)();
ZE_DEF.cntx_pop();

exec('__WND','#object');
{? (_acr:=__WND.EDIT.get(_TAB,exec('get_wid','ze_lib','RED')))<>''
:: ustaw podstawowe okienko redakcji
|| _TAB.win_edit(_acr)
?};
{? (_acr:=__WND.EDIT.get(_TAB,exec('get_wid','ze_lib','WZO')))<>''
:: ustaw dedykowane okienko wyszukiwania
|| _TAB.win_patt(_acr)
?};
1


\setup_wnd_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia okienko wertowania tabeli właściwej dla definicji zestawu.
::   WE: [_a] [_ZE_DEF] - wskazanie wiersza tabeli ZE_DEF, wpp przyjęty zostanie bieżący
::       _b [STRING] - kod rodzaju okienka ('WER', 'WYB')
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=ZE_DEF.ref();
{? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=ZE_DEF
|| _def:=_a
?};
_sym:=_b;

{? ~exec('setup_wnd_com','ze_lib',_def)
|| return(0)
?};

ZE_DEF.cntx_psh();
ZE_DEF.prefix();
{? ~ZE_DEF.seek(_def)
:: może się zdarzyć np. przy aktywnej transakcji
|| FUN.emsg(exec('err_rec_acc','#message',_def));
   ZE_DEF.cntx_pop();
   return(0)
?};
_TAB:=($ZE_DEF.TABELA)();
ZE_DEF.cntx_pop();

_ret:=0;
{? (_acr:=__WND.SEL.get(_TAB,exec('get_wid','ze_lib',_sym)))=''
|| FUN.emsg('Brak okienka wertowania tabeli "%1".'@[2-!_TAB])
|| _TAB.win_sel(_acr);
   _ret:=1
?};
_ret


\setup_wnd_lst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia okienka do przeglądania zawartości listy elementów.
::   WE: [_a] [_ZE_DEF] - wskazanie wiersza tabeli ZE_DEF, wpp przyjęty zostanie bieżący
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=ZE_DEF.ref();
{? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=ZE_DEF
|| _def:=_a
?};

exec('setup_wnd_com','ze_lib',_def) &
exec('setup_wnd_def','ze_lib',_def,'WER')


\setup_wnd_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [23.25]
:: OPIS: Ustawia okienka do przeglądania zawartości tabeli dla listy elementów.
::   WE: [_a] [_ZE_DEF] - wskazanie wiersza tabeli ZE_DEF, wpp przyjęty zostanie bieżący
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_def:=ZE_DEF.ref();
{? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=ZE_DEF
|| _def:=_a
?};

exec('setup_wnd_com','ze_lib',_def) &
exec('setup_wnd_def','ze_lib',_def,'WYB')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 10ac996f24b86742644b0cb4bea4c6bfd0cb07e6d35b156bd7ea824d32ee4592929a35922faae352d4618bcbaae9ac2a12b4f344bda63dc31be625550b6a20220b8ac3cd93418c920bbf6eca14b7b63e7e18803ca9e173fb6cebbdb5d88c532f4158d5a2411ac7f823bab3db7fc68b340995ab8e426d73e2978298951ad812c1
