:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: plany_urlopowe.fml
:: Utworzony: 29.08.2016
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Formuły wspólne dla planów urlopowych.
::======================================================================================================================

\dni_mies
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KFI [2009]
:: OPIS: Zwraca stringa ktory reprezentuje zaplanowany i wykorzystany urlop w danym miesiacu
::   WE: _a  [INTEGER]   - miesiac dla ktorego maja byc przeszukiwane tabele
::      [_b] [INTEGER]   - format zwroconego stringa; 1-w formie 1;3,0;10 0-w formie 1,0,0,1
::      [_c] [DICT]      - tabela do uzupełnienia
::       _d  [REFERENCE] - wskazanie na plan urlopowy
::   WY: 0-zwykly dzien, 1-planowany urlop biezacy, 2-planowany urlop dodatkowy,
::       3-urlop wypoczynkowy nieplanowany, 4-urlop wypoczynkowy zgodny z planem
::  OLD: \dni_mies/porta_ka.fml
::----------------------------------------------------------------------------------------------------------------------
     _msc:={? var_pres('_a')=type_of(0)      || _a || return(0) ?};
  _format:={? var_pres('_b')=type_of(0)      || _b || return(0) ?};
_PLAN_URL:={? var_pres('_c')=type_of(SYSLOG) || _c || null()    ?};
     _ref:={? var_pres('_d')=type_of(null()) || _d || return(0) ?};

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_ref)
|| _do:=date(URL_PLAN.ROK,_msc,0);
   _od:=date(URL_PLAN.ROK,_msc,1);
   _ile_dni:=(_do-_od)+1;
   _mies:=obj_new(_ile_dni);
   {! _i:=1 .. _ile_dni
   |! _mies[_i]:=0
   !};

::wypelnia tablice urlopami z planu urlopowego
   URL_POZ.cntx_psh();
   URL_POZ.index('URL_POZ');
   URL_POZ.prefix(URL_PLAN.ref());
   {? URL_POZ.find_le(_do)
   || {!
      |? {? URL_POZ.OD<=_do & URL_POZ.DO>=_od
         || _j:={? URL_POZ.OD>_od || URL_POZ.OD || _od ?}~3;
            _k:={? URL_POZ.DO<_do || URL_POZ.DO || _do ?}~3;
            {? _j<=_k
            || {! _i:=_j.._k
               |! {? URL_POZ.RODZAJ='D'
                  || _mies[_i]:=2
                  || _mies[_i]:=1
                  ?}
               !}
            ?}
         ?};
         (URL_POZ.prev()) & URL_POZ.DO>=_od
      !}
   ?};
   URL_POZ.cntx_pop();

::wypelnia tablice urlopami z kartoteki nieobecnosci
   N.cntx_psh();
   N.index('NIEOBECN');
   N.prefix('N',URL_PLAN.P);
   {? N.find_le(_do)
   || {!
      |? {? N.OD<=_do & N.DO>=_od &
            (N.NB().RN=KST_PAR.URLOP().RN | N.NB().RN=KST_PAR.URL_CHOR().RN | __RUB.sys_attr(N.NB,1113,N.OD))
         || _j:={? N.OD>_od || N.OD || _od ?}~3;
            _k:={? N.DO<_do || N.DO || _do ?}~3;
            {? _j<=_k
            || {! _i:=_j.._k
               |! {? _mies[_i]=0
                  || _mies[_i]:=3
                  || _mies[_i]:=4
                  ?}
               !}
            ?}
         ?};
         (N.prev()) & N.DO>=_od
      !}
   ?};
   N.cntx_pop()
?};
URL_PLAN.cntx_pop();

_dnim:=_dnimd:='';

_urlop:=10;
_licznik:=0;
{! _i:=1.._ile_dni
|! {? _mies[_i]<>_urlop
   || {? _i<>1
      || _dnim+=$_urlop+';'+$_licznik+','
      ?};
      _urlop:=_mies[_i];
      _licznik:=1
   || _licznik+=1
   ?};
:: tworzy stringa w formie 1,0,0,1... gdzie kolejne cyfry oznaczaja kolejne dni miesiaca i okreslaja
:: rodzaj urlopu
   _dnimd+=$_mies[_i]+','
!};
::tworzy stringa w formie 1;3,0;10... gdzie nieparzysty element to okreslenie urlopu a parzysty to
::dlugosc tego urlopu
_dnim+=$_urlop+';'+$_licznik+',';

:: co zwracamy?
{? type_of(_PLAN_URL)=118
:: wypełnioną tabelę miesięcy
|| ($(("_a.M")+$_msc+":=_b"))(_PLAN_URL,_dnim);
   ($(("_a.MD")+$_msc+":=_b"))(_PLAN_URL,_dnimd)
|? _format
:: stringa w formie 1;3,0;10...
|| _dnim
:: stringa w formie 1,0,0,1...
|| _dnimd
?}


\title_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca formułę na tytuł dla planów urlopowych
::   WE:
::   WY: formuła
::----------------------------------------------------------------------------------------------------------------------
$("  _rodzaj_urlopu:={? var_pres('_a')=type_of(0) || _a || return('') ?};
   _title:='';
   {? _rodzaj_urlopu=0
   || _title+='"+'Brak urlopu'@+"'
   |? _rodzaj_urlopu=1
   || _title+='"+'Zaplanowany urlop'@+"'
   |? _rodzaj_urlopu=2
   || _title+='"+'Zaplanowany urlop dodatkowy'@+"'
   |? _rodzaj_urlopu=3
   || _title+='"+'Urlop niezaplanowany'@+"'
   |? _rodzaj_urlopu=4
   || _title+='"+'Urlop zgodny z planem'@+"'
   ?};
   _title
")


\class_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca formułę na klasę dla planów urlopowych
::   WE:
::   WY: formuła
::----------------------------------------------------------------------------------------------------------------------
" _rodzaj_urlopu:={? var_pres('_a')=type_of(0) || _a || return('') ?};
   _class:='';
   {? _rodzaj_urlopu=0
   || _class+=' brak'
   |? _rodzaj_urlopu=1
   || _class+=' plan_urlop'
   |? _rodzaj_urlopu=2
   || _class+=' plan_dod'
   |? _rodzaj_urlopu=3
   || _class+=' urlop_nie_plan'
   |? _rodzaj_urlopu=4
   || _class+=' urlop_plan'
   ?};
   _class
"


\plan_stan_to_text
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca opis stanu planu urlopowego
::   WE: _a [STRING] - znacznik stanu planu
::   WY: opis
::----------------------------------------------------------------------------------------------------------------------
_stan:={? var_pres('_a')=type_of('') || _a || return('') ?};

{? _stan='A'
|| 'Aktywny'@
|? _stan='N'
|| 'Archiwalny'@
|? _stan='K'
|| 'Korekta'@
|? _stan='U'
|| 'Uzupełnienie'@
|| 'Błędny status'@
?}


\plan_status_to_text
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca opis statusu planu urlopowego
::   WE: _a [STRING] - znacznik statusu planu
::   WY: opis
::----------------------------------------------------------------------------------------------------------------------
_status:={? var_pres('_a')=type_of('') || _a || return('') ?};

{? _status='E'
|| 'W edycji'@
|? _status='?'
|| 'W weryfikacji'@
|? _status='T'
|| 'Zaakceptowany'@
|? _status='N'
|| 'Odrzucony'@
?}


\url_plan_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Rekord - przed" dla tabeli URL_PLAN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
:: Znacznik stanu planu
POLA_GRP.TXT_1:=exec('plan_stan_to_text','plany_urlopowe',URL_PLAN.ST);

:: Znacznik akceptacji planu (status)
POLA_GRP.TXT_2:=exec('plan_status_to_text','plany_urlopowe',URL_PLAN.AZ);

:: Osoba weryfikująca
POLA_GRP.TXT_3:=
   {? URL_PLAN.AO=null()
   || ''
   || URL_PLAN.AO().NAZWISKO+' '+OSOBA.PIERWSZE
   ?};

:: Imie i nazwisko osoby z planu urlopowego
POLA_GRP.TXT_4:=URL_PLAN.P().OSOBA().NAZWISKO;
POLA_GRP.TXT_5:=OSOBA.PIERWSZE;
P.cntx_pop();
OSOBA.cntx_pop();
''


\url_poz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Rekord - przed" dla tabeli URL_POZ.
::   WE:
::   WY:
::  OLD: \rodzajurl/planyurl.fml
::----------------------------------------------------------------------------------------------------------------------
:: Znacznik stanu planu
EDIT_VAR.URL_POZ:=
   {? URL_POZ.RODZAJ='N'
   || 'Normalny'@
   |? URL_POZ.RODZAJ='D'
   || 'Dodatkowy'@
   || ''
   ?};

''


\url_wnio_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Rekord - przed" dla tabeli URL_WNIO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Kolumna "Autor"
POLA_GRP.TXT_1:=
   {? URL_WNIO.ZN='S'
   || 'Przełożony'@
   |? URL_WNIO.ZN='P'
   || 'Pracownik'@
   || ''
   ?};

''


\html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Graficzny widok planu urlopowego w postaci HTML.
::   WE: _a [REFERENCE/STRING] - Wskazanie planu urlopowego (ref lub uidref).
::   WY: String html do wyświetlenia w kontrolce
::----------------------------------------------------------------------------------------------------------------------
{? ((var_pres('_a')=type_of(null()) & _a<>null()) | (var_pres('_a')=type_of('') & +_a=48)) & ref_tab(_a)=URL_PLAN
|| _ref:=_a
|| return('')
?};

exec('init','edit_kal');

_ret:='';
_ret:=
   '<style type="text/css">\n'
   '@media all {'
      '.url_plan_tab {background-color: #F0F0F0; border: 1px solid #F0F0F0; border-collapse: collapse; '
                     'font-family: "Open Sans", "Calibri", "Verdana", "Tahoma", sans-serif; '
                     'font-size: 11px; text-align: center; min-width: 20px; '
                     'padding: 2px 0px 2px 0px;'
                     '}'
      '.title {min-height:13px; font-weight: bold; font-size: 12px; '
              'font-family: "Open Sans", "Calibri", "Verdana", "Tahoma", sans-serif; '
              '}\n'
      '.plan_urlop { background-color: #FF9900; color: white;}\n'
      '.urlop_nie_plan { background-color: #1FBC5B; color: white;}\n'
      '.plan_dod { background-color: #FF9980; color: white;}\n'
      '.urlop_plan { background-color: #8FBC8B; color: white;}\n'
      '.brak { background-color: white;}\n'
      '.text_left { text-align: left;}\n'
      '.text_center { text-align: center;}\n'
      '.padding_text {padding: 3px 6px 4px 6px; border-right: 1px solid white;}'
      '.info_box {margin-left: 20px; font-weight: bold; font-size: 14px;}\n'
   '}'
   '</style>\n'
;

_class_fml:=exec('class_fml','plany_urlopowe');
_title_fml:=exec('title_fml','plany_urlopowe');

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_ref)
||
:: konieczne ustawienie zmiennej KST_PAR w bieżącej obsłudze, przed wywołaniem exec('dni_mies','plany_urlopowe...)
   exec('czytaj','#stalesys',date(URL_PLAN.ROK,1,1),KST_PAR,'URLOP','URL_CHOR');

   _ret+='<div class="info_box title text_center">';
   P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   _ret+='%1 %2: Numer teczki - %3, Identyfikator - %4'@[URL_PLAN.P().OSOBA().NAZWISKO,OSOBA.PIERWSZE,P.T,$P.IP];
   OSOBA.cntx_pop();
   P.cntx_pop();
   _ret+='</div>';
   _ret+='</br>';
   _ret+='<div class="info_box title">';
   _ret+='Widok planu urlopowego - %1r.'@[$URL_PLAN.ROK];
   _ret+='</div>';

:: tworzymy tabelę z widokiem dni w poszczególnych miesiącach
   _ret+='<table class="url_plan_tab" style="width: 95%; margin: 20px; ">';
:: wiersz nagłówkowy "Legenda"
   _ret+='<tr class="url_plan_tab">';
   _ret+='<td class="url_plan_tab text_left title padding_text">'+'Legenda:'@+'</td>';
   _ret+='<td class="url_plan_tab"><table class="url_plan_tab"><tr class="url_plan_tab">';
   _ret+='<td class="plan_urlop padding_text title"><div>'+_title_fml(1)+'</div></td>';
   _ret+='<td class="plan_dod padding_text title"><div>'+_title_fml(2)+'</div></td>';
   _ret+='<td class="urlop_plan padding_text title"><div>'+_title_fml(4)+'</div></td>';
   _ret+='<td class="urlop_nie_plan padding_text title"><div>'+_title_fml(3)+'</div></td>';
   _ret+='<td class="brak padding_text title"><div>'+_title_fml(0)+'</div></td>';
   _ret+='</tr></table></td>';
   _ret+='</tr>';
:: wiersz nagłówkowy "Miesiąc"
   _ret+='<tr class="url_plan_tab">';
   _ret+='<td class="url_plan_tab padding_text">'+''+'</td>';
   _ret+='<td class="url_plan_tab"><table class="url_plan_tab"><tr class="url_plan_tab">';
   {! _dzien:=1..31
   |! _ret+='<td class="url_plan_tab brak"><div style="min-height:10px; font-weight: bold;">'+$_dzien+'</div></td>'
   !};
   _ret+='</tr></table></td>';
   _ret+='</tr>';

   {! _msc:=1..12
   |!
      _ret+='<tr class="url_plan_tab">';
      _ret+='<td class="url_plan_tab text_left padding_text">'+opis(_msc)+'</td>';
      _ret+='<td class="url_plan_tab">';
      _ret+='<table class="url_plan_tab"><tr class="url_plan_tab">';
      _msc_str:=exec('dni_mies','plany_urlopowe',_msc,0,,URL_PLAN.ref());
      _msc_str:=_msc_str-1;
      {? var_pres('_msc_dni')>100 || obj_del(_msc_dni) ?};
      _msc_dni:=spli_str(_msc_str,',');
      {! _dzien:=1..obj_len(_msc_dni)
      |!
         _rodzaj_urlopu:=#_msc_dni[_dzien];
         _class:='url_plan_tab';
         _class+=_class_fml(_rodzaj_urlopu);
         _title:=_title_fml(_rodzaj_urlopu);

         _ret+='<td class=\"'+_class+'\">';
         _ret+='<div style="min-height:13px;" title="'+_title+'">';
         {? _rodzaj_urlopu
         || _ret+=$_dzien
         ?};
         _ret+='</div>';
         _ret+='</td>'
      !};
      _ret+='</tr></table>';
      _ret+='</td>';
      _ret+='</tr>'
   !};
   _ret+='</table>'
||
   _ret+='<div class="info_box">'+'Nie udało się ustalić rekordu planu urlopowego.'@+'</div>'
?};
URL_PLAN.cntx_pop();
_ret


\html_lim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Graficzny widok limitów dla planu urlopowego w postaci HTML.
::   WE:
::   WY: String html do wyświetlenia w kontrolce
::----------------------------------------------------------------------------------------------------------------------
_url_poz_id:={? var_pres('_a')=type_of('') || _a || return('') ?};

_ret:=
   '<style type="text/css">\n'
   '@media all {'
      '.url_plan_tab {background-color: #F0F0F0; border: 1px solid #F0F0F0; border-collapse: collapse; '
                     'font-size: 11px; text-align: center; min-width: 20px; '
                     'padding: 2px 0px 2px 0px;'
                     '}'
      '.title {min-height:13px; font-weight: bold; font-size: 12px;}\n'
      '.plan_urlop { background-color: #FF9900; color: white;}\n'
      '.do_zapl { background-color: #828181; color: white;}\n'
      '.dostepny { background-color: #1FBC5B; color: white;}\n'
      '.text_left { text-align: left;}\n'
      '.text_center { text-align: center;}\n'
      '.padding_text {padding: 3px 6px 4px 6px; border-right: 1px solid white;}'
      '.info_box {margin-left: 20px; font-weight: bold; font-size: 14px;}\n'

      '.urlop_nie_plan { background-color: #1FBC5B; color: white;}\n'
      '.plan_dod { background-color: #FF9980; color: white;}\n'
      '.urlop_plan { background-color: #8FBC8B; color: white;}\n'
      '.brak { background-color: white;}\n'
   '}'
   '</style>\n';

{? _url_poz_id='URL_PLAN_RED_P'
|| _ref:=exec('web_global_params_get','pkw','PKW_POR_IWPU','URL_PLAN','')
|| _ref:=web_win_ref(_url_poz_id)
?};

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_ref)
||

   _ret+='<div class="info_box">';
   _ret+='Informacje o liczbie dni urlopu'@;
   _ret+='</div>';

:: tworzymy tabelę z widokiem dni w poszczególnych miesiącach
   _ret+='<table class="url_plan_tab" style="width: 95%; margin: 20px; ">';

:: wiersz nagłówkowy "Legenda"
   _ret+='<tr class="url_plan_tab">';
      _ret+='<td class="url_plan_tab text_left title padding_text">'+'Urlop'@+'</td>';
      _ret+='<td class="do_zapl padding_text title"><div>'+'Dni do zaplanowania'@+'</div></td>';
      _ret+='<td class="plan_urlop padding_text title"><div>'+'Zaplanowane dni'@+'</div></td>';
      _ret+='<td class="dostepny padding_text title"><div>'+'Pozostało do zaplanowania'@+'</div></td>';
   _ret+='</tr>';

   _tab:=exec('getLimTab','plany_urlopowe',URL_PLAN.P,URL_PLAN.ROK,URL_PLAN.ref());

   _class:='url_plan_tab padding_text';
   {! _ind:=1..5
   |!
      _ret+='<tr class="url_plan_tab">';
      _rodzaj:={? _ind=1
               || 'Zaległy'@
               |? _ind=2
               || 'Bieżący'@
               |? _ind=3
               || 'Zaległy dodatkowy'@
               |? _ind=4
               || 'Dodatkowy'@
               |? _ind=5
               || 'Suma'@
               ?};

      _ret+='<td class="url_plan_tab text_left padding_text">'+_rodzaj+'</td>';

      {! _limit:=1..3
      |!
         _ret+='<td class=\"'+_class+'\">';
         _ret+='<div style="min-height:13px;">';
         _ret+=form({? _ind=1
               || {? _limit=1
                  || (_tab.LIM_ZAL/_tab.NORMDOB)$2
                  |? _limit=2
                  || (_tab.WYK_ZAL/_tab.NORMDOB)$2
                  |? _limit=3
                  || ((_tab.LIM_ZAL-_tab.WYK_ZAL)/_tab.NORMDOB)$2
                  ?}
               |? _ind=2
               || {? _limit=1
                  || (_tab.LIM_AKT/_tab.NORMDOB)$2
                  |? _limit=2
                  || (_tab.WYK_AKT/_tab.NORMDOB)$2
                  |? _limit=3
                  || ((_tab.LIM_AKT-_tab.WYK_AKT)/_tab.NORMDOB)$2
                  ?}
               |? _ind=3
               || {? _limit=1
                  || (_tab.ZAL_NSP/_tab.NORMDOB)$2
                  |? _limit=2
                  || (_tab.ZAWY_NSP/_tab.NORMDOB)$2
                  |? _limit=3
                  || ((_tab.ZAL_NSP-_tab.ZAWY_NSP)/_tab.NORMDOB)$2
                  ?}
               |? _ind=4
               || {? _limit=1
                  || (_tab.LIM_NSP/_tab.NORMDOB)$2
                  |? _limit=2
                  || (_tab.WYK_NSP/_tab.NORMDOB)$2
                  |? _limit=3
                  || ((_tab.LIM_NSP-_tab.WYK_NSP)/_tab.NORMDOB)$2
                  ?}
               |? _ind=5
               || {? _limit=1
                  || (_tab.LIM_SUM/_tab.NORMDOB)$2
                  |? _limit=2
                  || (_tab.WYK_SUM/_tab.NORMDOB)$2
                  |? _limit=3
                  || ((_tab.LIM_SUM-_tab.WYK_SUM)/_tab.NORMDOB)$2
                  ?}
               ?},,2);

         _ret+='</div>';
         _ret+='</td>'
      !};
      _ret+='</tr>'
   !};

::  wiersz "Uwagi"
   _ret+='<tr class="url_plan_tab">';
      _ret+='<td class="url_plan_tab text_left padding_text">'+'Uwagi'@+'</td>';
      _ret+='<td class="url_plan_tab" colspan="3">';
      _ret+='<table class="url_plan_tab" style="width:100%">';
         _ret+='<tr class="url_plan_tab">';
            _ret+='<td class="brak url_plan_tab">';
               _ret+='<div style="min-height:13px;">';
               _ret+={? _tab.PIERWSZY='T' || 'Pierwszy urlop'@ || 'Brak'@ ?};
               _ret+='</div>';
            _ret+='</td>';
         _ret+='</tr>';
      _ret+='</table>';
   _ret+='</td></tr>';
   _ret+='</table>'
||
   _ret+='<div class="info_box">'+'Nie udało się ustalić rekordu planu urlopowego.'@+'</div>'
?};
URL_PLAN.cntx_pop();
_ret


\getLimTab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Procedura zwraca tabele o 9 polach, w ktorych sa dane pobrane z karty urlopowej
::       oraz informacja o liczbie dni z zalozonych pozycji planu urlopowego
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [INTEGER]   - Rok
::       _c [REFERENCE] - wskazanie na plan urlopowy z którego maja być zaczytane dane na temat zaplanowanych urlopów
::   WY: tabela
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,
   'PIERWSZY','STRING[1]','Czy pierwszy urlop',
   'LIM_ZAL','REAL','Limit zaległy',
   'LIM_AKT','REAL','Limit aktualny',
   'ZAL_NSP','REAL','Limit dodatkowy zaległy',
   'LIM_NSP','REAL','Limit dodatkowy',
   'LIM_SUM','REAL','Limit suma',
   'WYK_ZAL','REAL','Wykorzystany zaległy',
   'WYK_AKT','REAL','Wykorzystany aktualny',
   'ZAWY_NSP','REAL','Wykorzystany dodatkowy zaległy',
   'WYK_NSP','REAL','Wykorzystany dodatkowy',
   'WYK_N','REAL','Wykorzystany',
   'WYK_SUM','REAL','Wykorzystany suma',
   'NORMDOB','REAL','Norma dobowa'
);

    _ref:={? var_pres('_a')=type_of(null())   || _a || return(_tab) ?};
    _rok:={? var_pres('_b')=type_of(0) & _b>0 || _b || return(_tab) ?};
_refplan:={? var_pres('_c')=type_of(null())   || _c || return(_tab) ?};

_wyk_akt:=_wyk_nsp:=_wyk_zal:=_wza_nsp:=_wyk_n:=0;
_norma:=8;
_tab.blank(1);

P.cntx_psh();
P.prefix();
{? P.seek(_ref)
|| _fnorma:=exec('norma_fml','godziny');
   _norma:=_fnorma({? _rok=date~1 || date || date(_rok,12,0) ?});

   KART_URL.cntx_psh();
   KART_URL.index('PRAC_ROK');
   KART_URL.prefix(_ref,_rok);
   {? KART_URL.first()
   || _tab.PIERWSZY:=KART_URL.PIERWSZY;
      _tab.LIM_ZAL:=KART_URL.LIM_ZALG;
      _ile:=KART_URL.LIM_AKTG+KART_URL.URL_DODG;
      {? _ile<0 || _ile:=0 ?};
      _tab.LIM_AKT:=_ile;
      _tab.ZAL_NSP:=KART_URL.NSP_ZALG;
      _ile:=KART_URL.URL_NSPG;
      {? _ile<0 || _ile:=0 ?};
      _tab.LIM_NSP:=_ile;
      _ile:=KART_URL.LIM_AKTG+KART_URL.URL_DODG+KART_URL.LIM_ZALG+KART_URL.NSP_ZALG+KART_URL.URL_NSPG;
      {? _ile<0 || _ile:=0 ?};
      _tab.LIM_SUM:=_ile;

      URL_PLAN.cntx_psh();
      URL_PLAN.prefix();
      {? URL_PLAN.seek(_refplan)
      || URL_POZ.cntx_psh();
         URL_POZ.index('URL_POZ');
         URL_POZ.prefix(URL_PLAN.ref);
         {? URL_POZ.first()
         || {!
            |? {? URL_POZ.RODZAJ='N'
               || _ng:=URL_POZ.NG;
                  'Urlop zalegly';
                  _brak:=KART_URL.LIM_ZALG-_wyk_zal;
                  {? _ng>0 & _brak>0
                  || {? _ng<_brak
                     || _wyk_zal+=_ng;
                        _ng:=0
                     || _ng-=_brak;
                        _wyk_zal+=_brak
                     ?}
                  ?};
                  'Urlop aktualny i uzupelniajacy';
                  _brak:=KART_URL.LIM_AKTG+KART_URL.URL_DODG-_wyk_akt;
                  {? _ng>0 & _brak>0
                  || {? _ng<_brak
                     || _wyk_akt+=_ng;
                        _ng:=0
                     || _ng-=_brak;
                        _wyk_akt+=_brak
                     ?}
                  ?}
               |? URL_POZ.RODZAJ='D'
               || _ng_nsp:=URL_POZ.NG;
                  'Urlop zalegly';
                  _brak:=KART_URL.NSP_ZALG-_wza_nsp;
                  {? _ng_nsp>0 & _brak>0
                  || {? _ng_nsp<_brak
                     || _wza_nsp+=_ng_nsp;
                        _ng_nsp:=0
                     || _ng_nsp-=_brak;
                        _wza_nsp+=_brak
                     ?}
                  ?};
                  'Urlop aktualny';
                  _brak:=KART_URL.URL_NSPG-_wyk_nsp;
                  {? _ng_nsp>0 & _brak>0
                  || {? _ng_nsp<_brak
                     || _wyk_nsp+=_ng_nsp;
                        _ng_nsp:=0
                     || _ng_nsp-=_brak;
                        _wyk_nsp+=_brak
                     ?}
                  ?}
               ?};
               URL_POZ.next()
            !}
         ?};
         URL_POZ.cntx_pop()
      ?};
      URL_PLAN.cntx_pop()
   ?};
   KART_URL.cntx_pop()
?};
P.cntx_pop();
_tab.WYK_ZAL:=_wyk_zal;
_tab.WYK_AKT:=_wyk_akt;
_tab.WYK_NSP:=_wyk_nsp;
_tab.ZAWY_NSP:=_wza_nsp;
_tab.WYK_SUM:=_wyk_zal+_wyk_akt+_wza_nsp+_wyk_nsp+_wyk_n;
_tab.NORMDOB:=_norma;
_tab.add();
_tab


\url_plan_stan_icone_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Przed ikoną" dla pola STAN okna wertowania WEB_WER
::   WE:
::   WY: napis określający ikonę
::----------------------------------------------------------------------------------------------------------------------
{? URL_PLAN.ST='A'
|| 'xwin16.png:7'
|? URL_PLAN.ST='N'
|| 'xwin16.png:157'
|? URL_PLAN.ST='K'
|| 'xwin16.png:70'
|? URL_PLAN.ST='U'
|| 'xwin16.png:70'
|| 'xwin16.png:110'
?}


\url_plan_status_icone_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: "Przed ikoną" dla pola STATUS okna wertowania WEB_WER tabeli URL_PLAN
::   WE:
::   WY: napis określający ikonę
::----------------------------------------------------------------------------------------------------------------------
{? URL_PLAN.AZ='E'
|| 'xwin16.png:42'
|? URL_PLAN.AZ='?'
|| 'xwin16.png:89'
|? URL_PLAN.AZ='T'
|| 'xwin16.png:38'
|? URL_PLAN.AZ='N'
|| 'xwin16.png:81'
|| 'xwin16.png:110'
?}


\url_plan_ctrl_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Inicjalizacja kontrolki z planem urlopowym.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_id:='URL_PLAN_CTRL';
web_ctrl_init(_win_id,1,'MCL.controls.HTML');
web_ctrl_call(_win_id,,'setBtnText','Drukuj','Drukuj'@)


\url_plan_ctrl_lim_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Inicjalizacja kontrolki z limitami.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_id:='URL_PLAN_CTRL_LIM';
web_ctrl_init(_win_id,1,'MCL.controls.HTML');
web_ctrl_call(_win_id,,'setBtnText','Drukuj','Drukuj'@)


\url_plan_ctrl_wyk_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Inicjalizacja kontrolki z wykorzystaniem urlopów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_init('CTRL_WYK',1,'MCL.controls.Chart')


\url_plan_ctrl_wpu_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Inicjalizacja kontrolki z planem urlopowym.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_id:='URL_PLAN_CTRL_WPU';
web_ctrl_init(_win_id,1,'MCL.controls.HTML');
web_ctrl_call(_win_id,,'setBtnText','Drukuj','Drukuj'@)


\url_plan_ctrl_wyk_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed obsługą
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('set_env','pkw_por');
_rok:=exec('web_global_params_get','pkw','PKW_POR_IWPU','ROK',date~1);

:: utworzenie instancji wykresu
_chart:=exec('declare','#web_chart');
_chart.init('CTRL_WYK',,'pie');

:: ustawienie tytułu wydruku
_chart.setTitle(exec('nazwa','#system')+': '+'Weryfikacja planów urlopowych'@);

:: pobranie danych
_dane:=exec('wykres_dane','plany_urlopowe',_rok);

:: dodanie danych i pokazanie wykresu
_chart.setJM('%');
_val:=_dane.wyk_sum;
_key:='Wykorzystano (%1 dni)'@[$(_val$2)];
_val_proc:={? _dane.lim_sum || (_val*100/_dane.lim_sum) || 0 ?};
_chart.addVal(_key,_val_proc);

_val:=_dane.lim_sum-_dane.wyk_sum;
_key:='Pozostało (%1 dni)'@[$(_val$2)];
_val_proc:={? _dane.lim_sum || (_val*100/_dane.lim_sum) || 0 ?};
_chart.addVal(_key,_val_proc);

_chart.addText('Wykorzystanie urlopu w roku %1 (%2 dni)'@[$_rok,$(_dane.lim_sum$2)],20,20,'20px');
_chart.addText(exec('wykres_opis','plany_urlopowe'),20,45,'16px');

_chart.setDonut(0);
_chart.show();
~~


\url_plan_ctrl_wpl_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Inicjalizacja kontrolki z wykorzystaniem urlopów wg planu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_init('CTRL_WPL',1,'MCL.controls.Chart')


\url_plan_ctrl_wpl_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed obsługą okna CTR_WPL w oknie grupowym WEB_GR_L
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('set_env','pkw_por');
_rok:=exec('web_global_params_get','pkw','PKW_POR_IWPU','ROK',date~1);

:: utworzenie instancji wykresu
_chart:=exec('declare','#web_chart');
_chart.init('CTRL_WPL',,'pie');

:: ustawienie tytułu wydruku
_chart.setTitle(exec('nazwa','#system')+': '+'Weryfikacja planów urlopowych'@);

:: pobranie danych
_dane:=exec('wykres_dane','plany_urlopowe',_rok);

:: dodanie danych i pokazanie wykresu
_chart.setJM('%');
_val:=_dane.wyk_plan;
_key:='Wykorzystano (%1 dni)'@[$(_val$2)];
_val_proc:={? _dane.lim_plan || (_val*100/_dane.lim_plan) || 0 ?};
_chart.addVal(_key,_val_proc);

_val:=_dane.lim_plan-_dane.wyk_plan;
_key:='Pozostało (%1 dni)'@[$(_val$2)];
_val_proc:={? _dane.lim_plan || (_val*100/_dane.lim_plan) || 0 ?};
_chart.addVal(_key,_val_proc);

_chart.addText('Wykorzystanie urlopu wg planu urlopów w roku %1 (%2 dni)'@[$_rok,$(_dane.lim_plan$2)],20,20,'20px');
_chart.addText(exec('wykres_opis','plany_urlopowe'),20,45,'16px');
_chart.setDonut(0);
_chart.show();
~~


\url_plan_weryf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zmienia znaczniki weryfikacji planu urlopowego i dodaje wniosek do planu urlopowego
::   WE: _a   [REFERENCE] - wskazanie na plan urlopowy
::       _b   [STRING]    - status weryfikacji
::       [_c] [STRING]    - uidref osoby akceptującej
::   WY: '' lub komunikat błędu
::----------------------------------------------------------------------------------------------------------------------
_result:='Weryfikacja planu urlopowego - błędne parametry wejściowe'@;
_url_plan:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
   _weryf:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};
   _osoba:={? var_pres('_c')=type_of('')     || _c || ''              ?};
_result:='';

_error:=0;

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_url_plan)
||
   URL_PLAN.AZ:=_weryf;
   {? _weryf='?'
   || URL_PLAN.AO:=null();
      URL_PLAN.AD:=date(0,0,0)
   ||
      OSOBA.cntx_psh();
      OSOBA.prefix();
      {? OSOBA.seek(_osoba)
      || URL_PLAN.AO:=OSOBA.ref();
         URL_PLAN.AD:=date()
      ?};
      OSOBA.cntx_pop()
   ?};

   {? ~_error
   || {? (URL_PLAN.ST='K' |  URL_PLAN.ST='U') & URL_PLAN.AZ='T'
      || URL_PLAN.cntx_psh();
         URL_PLAN.index('ROK');
         URL_PLAN.prefix();
         {? URL_PLAN.find_key(URL_PLAN.P,'A',URL_PLAN.ROK)
         || URL_PLAN.ST:='N';
            URL_PLAN.put()
         ?};
         URL_PLAN.cntx_pop();
         URL_PLAN.ST:='A'
      ?};
      {? URL_PLAN.put()
      || _kto:={? _osoba='' || _kto:='P' || _kto:='S' ?};
         _result+=exec('url_wnio_arch','plany_urlopowe',_url_plan,_kto)

      || _result:='Nie udało się nanieść informacji na plan urlopowy'@
      ?}
   ?}
|| _result:='Nie znaleziono planu urlopowego.'@
?};
URL_PLAN.cntx_pop();
_result


\url_plan_dod_inf_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Akcja przycisku "Dodatkowe informacje"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('exist','#record') || return(~~) ?};

URL_WNIO.index('PLANDZGZ');
URL_WNIO.prefix(URL_PLAN.ref());
URL_WNIO.web_select('WT_WER')


\url_wnio_arch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KFI [2009]
:: OPIS: Oznaczenie obecnie aktualnego wniosku jako archiwalnego
::   WE: _a [REFERENCE] - wskazanie na plan urlopowy
::       _b [STRING]    - kto dodaje wniosek do planu urlopowego ('P'-pracownik, 'S'-szef)
::  OLD: \add_wnio/porta_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='Archiwizacja wniosku - błędne parametry wejściowe'@;
_url_plan:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
     _kto:={? var_pres('_b')=type_of('')     || _b || return(_result) ?};
_result:='';

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_url_plan)
||
:: wyszukanie aktywnego wniosku i ustawienie go jako nieaktywnego/archiwalnego
   URL_WNIO.cntx_psh();
   URL_WNIO.index('PLAN');
   URL_WNIO.prefix();
   {? URL_WNIO.find_key(URL_PLAN.ref,_kto,'T')
   || URL_WNIO.AKT:='N';
      {? ~URL_WNIO.put()
      || _result:='Nie udało się zarchiwizować wniosku'@
      ?}
   ?};
   URL_WNIO.cntx_pop()
|| _result:='Nie znaleziono planu urlopowego.'@
?};
URL_PLAN.cntx_pop();
_result


\url_wnio_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Dodaje wniosek do planu urlopowego
::   WE: _a  [REFERENCE] - wskazanie na plan urlopowy
::      [_b] [STRING]    - status weryfikacji
::      [_c] [STRING]    - uidref osoby akceptującej
::       _d  [STRING]    - uid czynności
::----------------------------------------------------------------------------------------------------------------------
_url_plan:={? var_pres('_a')=type_of(null()) || _a || return(~~) ?};
   _weryf:={? var_pres('_b')=type_of('')     || _b || '?'        ?};
   _osoba:={? var_pres('_c')=type_of('')     || _c || ''         ?};
 _act_uid:={? var_pres('_d')=type_of('')     || _d || return(~~) ?};

URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_url_plan)
||
   web_params_set(
      exec('obj_ntab_set','#array',
         web_params_get(),
         'weryf',_weryf,
         'osoba',_osoba,
         'act_uid',_act_uid
      )
   );

:: dodanie nowego wniosku do planu urlopowego
   URL_WNIO.blank(1);
   URL_WNIO.URL_PLAN:=URL_PLAN.ref();
   URL_WNIO.AKT:='T';
   URL_WNIO.TYTUL:='';
   URL_WNIO.DZ:=date();
   URL_WNIO.GZ:=time();
   URL_WNIO.memo_set('','OPIS');
:: określenie kto składa wniosek 'P'-pracownik, 'S'-szef
   _kto:={? _osoba='' || _kto:='P' || _kto:='S' ?};
   URL_WNIO.ZN:=_kto;

   URL_PLAN.web_cntx_save(1);
   URL_WNIO.web_edit('WT_RED',,,,"
      URL_PLAN.web_cntx_load(1);
      web_params_set(_web_params:=web_params_get());
::    Ustawiam środowisko.
      exec('env_wt','b_proces');

      URL_WNIO.web_eclose();
      _result:='';
      {? _a='OK'
      || _weryf:=_web_params.weryf;
         _osoba:=_web_params.osoba;
         _act_uid:=_web_params.act_uid;

::       zalozenie transakcji
         _mydo:=do_state()=0;
         {? _mydo || do() ?};

         _result:=exec('url_plan_weryf','plany_urlopowe',URL_WNIO.URL_PLAN,_weryf,_osoba);

::       kończenie transakcji (mp_run nie może być wywoływany w transakcji)
         {? +_result || undo() ?};
         {? _mydo || end() ?};

         URL_WNIO.prefix();
         {? _result='' & URL_WNIO.add()
         || URL_WNIO.memo_put();
            URL_WNIO.URL_PLAN();
            _params:=exec('mp_run_a','#b__box');
            _params.ACT_UID:=_act_uid;
            _params.AKCJA:='ZAKOŃCZ';
            _params.UIDREF:=URL_PLAN.uidref();

::          uzupełnienie kontekstu pracy
            _params.CONTEXT:=$(
               \" _context:=obj_new('URL_PLAN','REFRESH');
                  _context.URL_PLAN:=exec('FindAndGet','#table',URL_PLAN,'\"+URL_PLAN.uidref()+\"',,,null());
                  _context.REFRESH:=1;
                  _context
               \"
            );

::          uruchomienie procesowości
            exec('mp_run','#b__box',_params)
         ||
            {? +_result || FUN.emsg(_result) ?}
         ?}
      ?}
   ")
?};
URL_PLAN.cntx_pop();
~~


\add_urpl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KFI [2009]
:: OPIS: Dodaje pozycje do planu urlopowego
::   WE: _a [REFERENCE] - wskazanie na plan urlopowy
::       _b [REFERENCE] - wskazanie na pozycję planu (podany - modyfikacja pozycji, pusty - dodanie)
::       _c [DATE]      - data Od pozycji planu
::       _d [DATE]      - data Do pozycji planu
::       _e [STRING]    - rodzaj zaplanowanego urlopu (N/D)
::      [_f][INTEGER]   - czy dodaje szef 0/1
::  OLD: \add_urpl/porta_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='Dodawanie pozycji planu urlopowego - błędny parametr wejściowy'@;

_url_plan:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
 _url_poz:={? var_pres('_b')=type_of(null()) || _b || null()          ?};
      _od:={? var_pres('_c')=type_of(date()) || _c || return(_result) ?};
      _do:={? var_pres('_d')=type_of(date()) || _d || return(_result) ?};
  _rodzaj:={? var_pres('_e')=type_of('')     || _e || return(_result) ?};
    _szef:={? var_pres('_f')=type_of(0)      || _f || 0               ?};

_result:='';
_dalej:=1;

exec('set_env','pkw_por');
URL_PLAN.cntx_psh();
URL_PLAN.prefix();
{? URL_PLAN.seek(_url_plan)
|| P.cntx_psh();
   P.prefix();
   {? P.seek(URL_PLAN.P)
   || _result:=exec('chk_pp','plany_urlopowe',URL_PLAN.P,URL_PLAN.ref(),_url_poz,_od,_do,_rodzaj);
      {? +_result || _dalej:=0 ?};

      {? _dalej
      || __KAL.set_cal(P.KAL);
         URL_POZ.prefix();
         {? _url_poz=null()
         || _action:='add(1)';
            URL_POZ.blank(1);
            URL_POZ.URL_PLAN:=URL_PLAN.ref()

         || _action:='put(1)';
            {? ~URL_POZ.seek(_url_poz)
            || _result:='Brak pozycji urlopowej w planie.'@;
               _dalej:=0
            ?}
         ?}
      ?};

      {? _dalej
      || URL_POZ.OD:=_od;
         URL_POZ.DO:=_do;
         URL_POZ.RODZAJ:=_rodzaj;
         URL_POZ.NK:=_do-_od+1;
         URL_POZ.NR:=__KAL.w_days(_od,_do);
         URL_POZ.NG:=exec('nominal','godziny',_od,_do);
         URL_POZ.CAN_DEL:='T';

         {? ($('URL_POZ.'+_action))()
         || {? _szef
            || URL_PLAN.AP:='T';
               URL_PLAN.put()
            ?}
         || _result:='Błąd podczas dodawania pozycji planu'@
         ?}
      ?}
   || _result:='Nie znaleziono pracownika.'@
   ?};
   P.cntx_pop()

|| _result:='Brak planu urlopowego.'@
?};

URL_PLAN.cntx_pop();
_result


\chk_pp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Sprawdza, czy informacje o pozycji planu urlopowego sa poprawne
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [REFERENCE] - wskazanie na plan urlopowy
::       _c [REFERENCE] - wskazanie na pozycję planu (podany - modyfikacja pozycji, pusty - dodanie)
::       _d [DATE]      - data od
::       _e [DATE]      - data do
::       _f [STRING]    - rodzaj zaplanowanego urlopu (N/D)
::   WY: tekst pusty jesli pozycja poprawna, tresc komunikatu w przypadku wystapienia bledu
::  OLD: \chk_pp/porta_ka.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='Sprawdzenie pozycji planu urlopowego - błędny parametr wejściowy'@;

   _p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
_url_plan:={? var_pres('_b')=type_of(null()) || _b || return(_result) ?};
 _url_poz:={? var_pres('_c')=type_of(null()) || _c || null()          ?};
      _od:={? var_pres('_d')=type_of(date()) || _d || return(_result) ?};
      _do:={? var_pres('_e')=type_of(date()) || _e || return(_result) ?};
  _rodzaj:={? var_pres('_f')=type_of('')     || _f || return(_result) ?};

_result:='';
_dalej:=1;

_rok:=0;
_dni:=0;

P.cntx_psh();
URL_PLAN.cntx_psh();
URL_POZ.cntx_psh();

P.prefix();
URL_PLAN.prefix();
URL_POZ.prefix();

{? ~P.seek(_p_ref)
|| _result:='Błędne wskazanie pracownika.'@;
   _dalej:=0
?};

{? ~URL_PLAN.seek(_url_plan) | URL_PLAN.P<>_p_ref
|| _result:='Błędne wskazanie planu urlopowego.'@;
   _dalej:=0
?};

{? _url_poz<>null()
|| {? ~URL_POZ.seek(_url_poz) | URL_POZ.URL_PLAN<>_url_plan
   || _result:='Błędne wskazanie pozycji planu urlopowego.'@;
      _dalej:=0
   ?}
?};

{? _dalej
|| _rok:=URL_PLAN.ROK;
   {? _do<_od || _result:='Data zakończenia musi być późniejsza od daty rozpoczęcia.'@; _dalej:=0
   |? _od~1<>_rok || _result:='Planowany urlop musi rozpoczynać się w roku %1.'@[$_rok]; _dalej:=0
   |? _do~1<>_rok || _result:='Planowany urlop musi kończyć się w roku %1'@[$_rok]; _dalej:=0
   |? _od<P.DZA || _result:='Planowany urlop jest poza okresem zatrudnienia.'@; _dalej:=0
   |? P.DZ<>date(0,0,0) & P.DZ<_do || _result:='Planowany urlop jest poza okresem zatrudnienia.'@; _dalej:=0
   ?}
?};

{? _dalej
|| {? exec('kart_url_find','kart_url',_rok)
   || _dni:=
:     Planujemy do wysokosci posiadanych limitow.
         {? _rodzaj='N'
         || KART_URL.LIM_ZAL+KART_URL.LIM_AKT+KART_URL.URL_DOD
         |? _rodzaj='D'
         || KART_URL.URL_NSP+KART_URL.NSP_ZAL
         ?}
   || _result:='Nie znaleziono karty urlopowej na rok %1.'@[$_rok];
      _dalej:=0
   ?}
?};

{? _dalej
|| {? __KAL.set_cal(P.KAL,_rok)
   || _fnorma:=exec('norma_fml','godziny');
      {? KART_URL.URL_WYK=0
      || _dni-=__KAL.w_hours(_od,_do)/_fnorma(_do)$2
      || _N:=sql(
            'select N.OD,N.DO,N.NR '+
            'from N join R using (N.NB,R.REFERENCE) '+
            'where N.KOR=\'N\' and N.P=:_a and to_date(:_b)<=N.OD and N.DO<=to_date(:_c) and R.RN in (:_d) '+
            'order by N.OD',
            P.ref(),date(_do~1,1,1),_do,__RUB.sys_sql(111)
         );
         {? _N.first()
         || {!
            |? _ref:=_N.ref();
               _nod:=_N.DO+1;
               {? _N.next()
               || {? _N.OD=_nod
                  || _ndo:=_N.DO;
                     _nnr:=_N.NR;
                     _N.del();
                     {? _N.seek(_ref)
                     || _N.DO:=_ndo;
                        _N.NR+=_nnr;
                        _N.put()
                     ?}
                  || 1
                  ?}
               ?}
            !};
            _N.blank();
            _N.OD:=_od;
            _N.DO:=_do;
            {? ~_N.find_rec()
            || _dni-=__KAL.w_hours(_od,_do)/_fnorma(_do)$2
            ?}
         || _dni-=__KAL.w_hours(_od,_do)/_fnorma(_do)$2
         ?}
      ?}
   || _result:='Brak kalendarza na rok: %1.'@[$_rok];
      _dalej:=0
   ?}
?};

URL_POZ.index('URL_POZ');
URL_POZ.prefix(_url_plan);
_loop:=URL_POZ.first();
{!
|? _dalej & _loop
|! {? URL_POZ.ref()<>_url_poz
   || {? _od<=URL_POZ.DO & URL_POZ.OD<=_do
      || _result:='Planowane urlopy nie mogą się pokrywać.'@;
         _dalej:=0
      |? URL_POZ.RODZAJ=_rodzaj
      || _dni-=URL_POZ.NG/_fnorma(_do)$2
      ?}
   ?};
   _loop:=URL_POZ.next()
!};

{? _dalej & _dni<0
|| _rodz_opis:={? _rodzaj='N' || 'podstawowego'@ |? _rodzaj='D' || 'dodatkowego'@ || '' ?};
   _result:='Przekroczono wymiar urlopu %1.'@[_rodz_opis]
?};

URL_POZ.cntx_pop();
URL_PLAN.cntx_pop();
P.cntx_pop();

_result


\url_plan_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Akcja "Rok" okna wertowania WEB_WER tabeli ULR_PLAN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_act_uid:={? var_pres('_a')=type_of('') || _a || return(~~) ?};

_fml:="
   exec('set_env','pkw_por');
   _def_par:=web_def_get();
   {? _def_par.ROK<=0
   || FUN.emsg('"+'Należy podać rok planu urlopowego.'@+"');
      return('ROK')
   ?};
   _max_rok:=exec('max_rok','#datetime');
   {? _def_par.ROK>_max_rok
   || FUN.emsg('Podano błędny rok dla planu urlopowego.'@);
      return('ROK')
   ?};
   exec('web_global_params_set','pkw','"+_act_uid+"','ROK',_def_par.ROK);
:: przed odświeżeniem musimy najpierw zamkąć okno web_define
   web_def_close();"
   +
   {? _act_uid='PKW_POR_IRPU'
   || "
:: konieczne jest wyczyszczenie okna z kontrolką
:: inaczej w przypadku braku rekordu URL_PLAN może zostać nieaktualna zawartość
      exec('url_plan_ctrl_init','plany_urlopowe');
      web_ctrl_call('URL_PLAN_CTRL',1,'setBody','');
      exec('url_plan_ctrl_lim_init','plany_urlopowe');
      web_ctrl_call('URL_PLAN_CTRL_LIM',1,'setBody','');
      "
   |? _act_uid='PKW_POR_IWPU'
   || "
:: konieczne jest wyczyszczenie okna z kontrolką planów urlopowych wybranych pracowników
      exec('url_plan_ctrl_wpu_init','plany_urlopowe');
      web_ctrl_call('URL_PLAN_CTRL_WPU',1,'setBody','');
      "
   || ""
   ?}
   +
"
:: odrysowanie główego okna w grupie
   URL_PLAN.web_cntx_load(1);
   web_top_refresh(1);

   URL_PLAN.web_win_opt(web_top_win(1),
    ,'title='+' - %1r.'@[$exec('web_global_params_get','pkw','"+_act_uid+"','ROK',date~1)])
";
URL_PLAN.web_cntx_save(1);
exec('show_define_rok','plany_urlopowe',$_fml,_act_uid);
~~


\url_plan_hdr_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Dodaje informacje o roku dla okna grupowego rejestracji planów urlopowych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=type_of(0) || _a || return(~~) ?};
URL_PLAN.web_win_opt(web_top_win(),,'title='+' - %1r.'@[$_rok]);
~~


\show_define_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla okno z rokiem
::   WE: _a [FORMULA] - formuła do wykonania po obsłudze
::   WY:
::----------------------------------------------------------------------------------------------------------------------
    _fml:={? var_pres('_a')=type_of("") || _a || return(~~) ?};
_act_uid:={? var_pres('_b')=type_of('') || _b || return(~~) ?};

_def:=web_define();
_rok:=exec('web_global_params_get','pkw',_act_uid,'ROK',date~1);
web_def_fld(_def,'ROK',_rok,'Rok'@,'Rok planu urlopoewgo'@,,10,0,'mark=1');
web_def_btn(_def,'OK','text=%1,tooltip=%2'['OK'@,'Zatwierdzenie okienka'@]);
web_def_edit(_def,_fml,'Rok planu urlopowego'@);
~~


\url_plan_red_p_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed obsługą dla okna RED_P tabeli URL_PLAN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('set_env','pkw_por');
_ref:=web_win_ref('URL_PLAN_WEB_P');
URL_POZ.index('URL_POZ');
URL_POZ.prefix(_ref);
~~


\url_plan_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Sprawdza czy istnieje już plan urlopowy dla pracownika w podanym roku
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [INTEGER]   - rok badania
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=-1;
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
  _rok:={? var_pres('_b')=type_of(0)    || _b || return(_result) ?};

_result:=0;

URL_PLAN.cntx_psh();
URL_PLAN.index('PRACROK');
URL_PLAN.prefix(_p_ref,_rok);
_result:=URL_PLAN.first();
URL_PLAN.cntx_pop();
_result


\url_plan_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje podany rekord tabeli URL_PLAN (wykonywane w transakcji!!!)
::   WE: _a - URL_PLAN.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
:: UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
URL_PLAN.cntx_psh(); URL_PLAN.clear();
{? URL_PLAN.seek(_ref)
||
   {? exec('url_plan_clean','plany_urlopowe',_ref)>0
   || {? URL_PLAN.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?}
|| _result:=0
?};
URL_PLAN.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\url_plan_clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Czysci powiazania do rekordu tabeli URL_PLAN
::   WE: _a - URL_PLAN.ref()
::   WY: >0 -wyczyszczone,
::       <=0 -niewyczyszczone
:: UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do URL_PLAN ---

:: usunięcie pozycji urlopowych
_can_continue:=exec('url_poz_delete4plan','plany_urlopowe',_ref);

:: usunięcie wniosków powiązanych z planem
{? _can_continue>0
|| _can_continue:=exec('url_wnio_delete4plan','plany_urlopowe',_ref)
?};

:: --- wszystkie powiazania usuniete? ---
{? _can_continue>0
|| _result:=1
|| undo()
?};

{? _mydo || end() ?};

_result


\url_poz_delete4plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje rekordy tabeli URL_POZ (wykonywane w transakcji!!!) dla wskazanego rekordu URL_PLAN
::   WE: _a - URL_PLAN.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

_result:=0;
_can_continue:=1;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

URL_POZ.cntx_psh();
URL_POZ.index('URL_POZ');
URL_POZ.prefix(_ref);
{? URL_POZ.first()
|| {!
   |? _can_continue:=exec('url_poz_delete','plany_urlopowe',URL_POZ.ref(),1);
      _can_continue>0 & URL_POZ.first()
   !}
?};
URL_POZ.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result


\url_poz_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje podany rekord tabeli URL_POZ (wykonywane w transakcji!!!)
::   WE: _a - URL_POZ.ref()
::      [_b] [INTEGER] - określa czy wymusić usunięcie rekordu
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
  _ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
_force:={? var_pres('_b')=type_of(0)    || _b || 0         ?};
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};

_result:=0;
_can_continue:=1;

:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
URL_POZ.cntx_psh(); URL_POZ.clear();
{? URL_POZ.seek(_ref)
|| URL_PLAN.cntx_psh();
   {? _force | URL_POZ.CAN_DEL='T' | (URL_POZ.CAN_DEL='N' & URL_POZ.URL_PLAN().AZ='E')
   || {? URL_POZ.del(,1)>0
      || _result:=1
      || undo();
         _result:=-3
      ?}
   || _result:=-2
   ?};
   URL_PLAN.cntx_pop()
|| _result:=0
?};
URL_POZ.cntx_pop();

{? _result<0
|| undo()
?};
{? _mydo || end() ?};
_result


\url_wnio_delete4plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Kasuje rekordy tabeli URL_WNIO (wykonywane w transakcji!!!) dla wskazanego rekordu URL_PLAN
::   WE: _a - URL_PLAN.ref()
::   WY: >0 -wyczyszczone,
::      <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};

_result:=0;
_can_continue:=1;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(null) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

URL_WNIO.cntx_psh();
URL_WNIO.index('PLAN');
URL_WNIO.prefix(_ref);
{? URL_WNIO.first()
|| {! |? URL_WNIO.del() !}
?};
_can_continue:=(URL_WNIO.size()=0);
URL_WNIO.cntx_pop();

{? _can_continue>0
|| _result:=1
|| undo()
?};
{? _mydo || end() ?};
_result


\wykres_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła pobiera dane dla zaznaczonych pracownikow o:
::       - zaplanowanym urlopie z kartoteki zaplanowanych urlopow
::       - urlopie wykorzystanym zgodnie z planem
::       - limicie urlopu z karty urlopowej
::       - wykorzystaniu urlopów
::   WE: _a [INTEGER]   - rok dla ktorego maja byc zbierane dane
::   WY: tablica z wynikiem
::  OLD: \wykresSzef/portal.prc
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('lim_sum','wyk_sum','lim_plan','wyk_plan');
_result.lim_sum:=0;
_result.wyk_sum:=0;
_result.lim_plan:=0;
_result.wyk_plan:=0;

_rok:={? var_pres('_a')=type_of(0) || _a || return(_result) ?};
exec('czytaj','#stalesys',date(_rok,1,1),KST_PAR,'URLOP','URL_CHOR');
exec('__KAL','object');

_lim_sum:=0;_wyk_sum:=0;_lim_plan:=0;_wyk_plan:=0;
_wyk_su2:=0;_lim_pl2:=0;_wyk_pl2:=0;
_kody:=obj_new(2);
_kody[1]:=KST_PAR.URLOP().RN;
_kody[2]:=KST_PAR.URL_CHOR().RN;

P_WEB_CX.cntx_psh();
P_WEB_CX.prefix();
_lTab:=exec('get','wt_group','WWU');
{? _lTab.first()
|| P.cntx_psh();
   URL_PLAN.cntx_psh();
   URL_PLAN.index('ROK');
   URL_POZ.cntx_psh();
   URL_POZ.index('URL_POZ');
   N.cntx_psh();
   N.index('NIPRACNB');
   KART_URL.index('PRAC_ROK');
   {!
   |? {? P_WEB_CX.seek(_lTab.KEY)
      ||
         P_WEB_CX.P();
         _norma:=exec('norma','godziny');

         URL_PLAN.prefix(P.ref(),'A',_rok);
         _jest_plan:=0;
         {? URL_PLAN.first()
         || {!
            |? {? URL_PLAN.AZ='T' || _jest_plan:=1 ?};
               ~_jest_plan & URL_PLAN.next()
            !}
         ?};
         {? _jest_plan
         || URL_POZ.prefix(URL_PLAN.ref());
::          Limit zaplanowany w planie urlopow
            _dni:=0;
            {? URL_POZ.first()
            || {!
               |? _dni+=URL_POZ.NG;
                  URL_POZ.next()
               !}
            ?};
            _lim_plan+=_dni
         ?};
::       Wykorzystanie w godzinach urlopow wzietych zgodnie z planem urlopow(11,22)
::       Wykorzystanie w godzinach urlopow (11,22)
         _no_error:=__KAL.no_err();
         __KAL.no_err(1);
         __KAL.set_cal(P.KAL,_rok);
         __KAL.no_err(_no_error);
         _dni:=0;
         _dni_nieob:=0;
         {! _iter:=1..2
         |! N.prefix('N',P.ref,_kody[_iter]);
            _data:=date(_rok,1,1);
            {? _jest_plan
            || {!
               |? N.find_ge(_data) & N.DO<=date(_rok,12,0)
               |! _dni_nieob+=N.NG;
                  _ile_dni:=N.DO-N.OD;
                  {! _i:=0 .. _ile_dni
                  |! _data:=N.OD+_i;
                     {? __KAL.w_days(_data,_data) & URL_POZ.find_le(_data) & URL_POZ.DO>=_data
                     || _dni+=exec('nominal','godziny',_data,_data)
                     ?}
                  !};
                  _data:=N.DO+1
               !}
            || {!
               |? N.find_ge(_data) & N.DO<=date(_rok,12,0)
               |! _dni_nieob+=N.NG;
                  _data:=N.DO+1
               !}
            ?}
         !};
         _wyk_plan+=_dni;
         _wyk_sum+=_dni_nieob;
::       Limit z karty urlopowej razem z dniami na zadanie
         KART_URL.prefix(P.ref,_rok);
         {? KART_URL.first
         || _ile:=KART_URL.LIM_AKT+KART_URL.URL_DOD+KART_URL.LIM_ZAL+KART_URL.URL_NSP+KART_URL.NSP_ZAL;
            _lim_sum+=_ile
         ?};
         _wyk_su2+=(_wyk_sum/_norma);
         _lim_pl2+=(_lim_plan/_norma);
         _wyk_pl2+=(_wyk_plan/_norma);
         _wyk_sum:=0;_lim_plan:=0;_wyk_plan:=0
      ?};
      _lTab.next()
   !};
   N.cntx_pop();
   URL_POZ.cntx_pop();
   URL_PLAN.cntx_pop();
   P.cntx_pop()
?};
P_WEB_CX.cntx_pop();

_result.lim_sum:=_lim_sum;
_result.wyk_sum:=_wyk_su2;
_result.lim_plan:=_lim_pl2;
_result.wyk_plan:=_wyk_pl2;
_result


\wykres_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca tekst opisu dla wykresu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:='';
P_WEB_CX.cntx_psh();
P_WEB_CX.prefix();
_lTab:=exec('get','wt_group','WWU');
{? _lTab.first() & P_WEB_CX.seek(_lTab.KEY)
|| _size:=_lTab.size();
   _result:={? _size>1
            || P_WEB_CX.cntx_psh();
               exec('p_web_cx_set_prefix','p_web','AKCWNIO');
               _size_all:=P_WEB_CX.size();
               P_WEB_CX.cntx_pop();
               'Dla %1 z %2 pracowników'@[$_size,$_size_all]
            || exec('record','#to_string',P_WEB_CX.P)
            ?}
?};
P_WEB_CX.cntx_pop();
_result


\select_irpu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla okno grupowe planów urlopowych wraz z pozycjami planów
::   WE: [_a] [STRING]    - 'Proc' lub 'Todo' lub 'Area' (opcjonalnie)
::       [_b] [REFERENCE] - wskazanie na element procesu (opcjonalne, ma sens dla _path='Proc')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
  _path:={? var_pres('_a')=type_of('') || _a || '' ?};
_b_prel:={? var_pres('_b')=type_of('') || _b || '' ?};

:: Ustawiam środowisko.
{? exec('env_wt','b_proces')
||
:: Zawsze zaczynamy, od przekazania parametrów "dalej".
   web_params_set(
         exec('obj_ntab_set','#array',
            web_params_get(1),
            'path',_path,
            'b_prel',_b_prel
         )
      );

:: uzupełnienie informacji w tytule okna o roku planu
   _rok:=exec('web_global_params_get','pkw','PKW_POR_IRPU','ROK',date~1);
   URL_PLAN.web_win_init('WEB_GR',,'title='+' - %1r.'@[$_rok]);

   {? _path='Todo'
   || BI_TODO.web_cntx_save(1)
   ?};
   exec('web_global_params_set','pkw','PKW_POR_IRPU','WEB_GR_CLOSING',0);
   URL_PLAN.web_select('WEB_GR','url_plan201610_',,,"
      {? ~exec('web_global_params_get','pkw','PKW_POR_IRPU','WEB_GR_CLOSING',0)
      || exec('web_global_params_set','pkw','PKW_POR_IRPU','WEB_GR_CLOSING',1);
         web_top_close();
         _path:=web_params_get().path;
         {? _path='Todo'
         || BI_TODO.web_cntx_load(1);
            web_top_refresh(1)
         |? _path='Proc'
         || exec('web_title_clear','areatitle')
         ?}
      ?}
   ")
?};
~~


\select_iwpu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wyświetla okno grupowe weryfikacji planów urlopowych
::   WE: [_a] [STRING]    - 'Proc' lub 'Todo' lub 'Area' (opcjonalnie)
::       [_b] [REFERENCE] - wskazanie na element procesu (opcjonalne, ma sens dla _path='Proc')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
  _path:={? var_pres('_a')=type_of('')     || _a || ''     ?};
_b_prel:={? var_pres('_b')=type_of(null()) || _b || null() ?};

:: Ustawiam środowisko.
{? exec('env_wt','b_proces')
||
:: Zawsze zaczynamy, od przekazania parametrów "dalej".
   web_params_set(
         exec('obj_ntab_set','#array',
            web_params_get(1),
            'path',_path,
            'b_prel',$_b_prel
         )
      );

:: sprawdzenie czy mamy siebie ustawionego do kontekstu pracy
   {? exec('p_web_cx_get_rodzaj','pkw')='W'
::    jeśli tak to przed wyświetleniem okna czyścimy wszystkie poprzednie zaznaczenia
   || exec('p_web_cx_wpu_clear_all','pkw');
      exec('p_web_cx_wwu_clear_all','pkw');

::    dodajemy pracowników podwładnych z odpowiednim typem
      _typ:='AKCWNIO';
      exec('p_web_cx_set_prefix','p_web',_typ);
      {? ~P_WEB_CX.first()
      || exec('p_web_cx_set','p_web',_typ)
      ?};

::    uzupełnienie informacji w tytule okna o roku planu
      _rok:=exec('web_global_params_get','pkw','PKW_POR_IWPU','ROK',date~1);
      URL_PLAN.web_win_init('WEB_GR_W',,'title='+' - %1r.'@[$_rok]);

      {? _path='Todo'
      || BI_TODO.web_cntx_save(1)
      ?};
      exec('web_global_params_set','pkw','PKW_POR_IWPU','WEB_GR_W_CLOSING',0);
      URL_PLAN.web_select('WEB_GR_W','url_plan201612_',,,"
         {? ~exec('web_global_params_get','pkw','PKW_POR_IWPU','WEB_GR_W_CLOSING',0)
         || exec('web_global_params_set','pkw','PKW_POR_IWPU','WEB_GR_W_CLOSING',1);
            web_top_close();
            _path:=web_params_get().path;
            {? _path='Todo'
            || BI_TODO.web_cntx_load(1);
               web_top_refresh(1)
            |? _path='Proc'
            || exec('web_title_clear','areatitle')
            ?}
         ?}
      ")
   || FUN.info('Aby weryfikować plany urlopowe należy ustawić kontekst pracy na własne dane.'@)
   ?}
?};
~~

:Sign Version 2.0 jowisz:1045 2021/09/17 15:17:09 383046365ec06127d6ef121b4eaac251e5e3fb348902bb8f67a9e2dd40ea5adde9459de07f5f199948369f92db95f9f2fc09765426bb6a2879566855fb289612b604c1d1bb52e650b082a7ea9b5383694b3768f25e54b5829692b11f3fa468b0d49013e35c0c019cb54d68733e4dc36b9e87b2dac60ff13e8410e57c0901fe20
