:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_zp_tab.fml
:: Utworzony: 09.03.2017
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły wyzwalaczy dla tabel obszarów POC, PSZ, PRE, PBA.
::======================================================================================================================


\zp_det_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz przed" tabeli ZP_DET.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('zp_det_chk','phr_zp_tab')


\zp_det_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw przed" tabeli ZP_DET.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_DET*'PUTB|'
|| return(1)
?};
exec('zp_det_chk','phr_zp_tab')


\zp_det_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń przed" tabeli ZP_DET.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
1


\zp_det_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz po" tabeli ZP_DET.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_det_aa/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: __BULK.ZP_DET.after.add
{? do_state()=1 & _a & ~exec('get','#bulk',ZP_DET,'adda',$ZP_DET.ZP_POZ)
|| SLO_KOD.cntx_psh();
   exec('zp_det_upd','phr_zp_tab',ZP_DET.ZP_POZ,ZP_DET.SLO_KOD().KOD,ZP_DET.WY);
   SLO_KOD.cntx_pop()
?};
~~


\zp_det_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw po" tabeli ZP_DET.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_det_ap/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_DET*'PUTA|'
|| return()
?};
:: __BULK.ZP_DET.after.put
{? do_state()=1 & _a & ~exec('get','#bulk',ZP_DET,'puta',$ZP_DET.ZP_POZ)
|| SLO_KOD.cntx_psh();
   exec('zp_det_upd','phr_zp_tab',ZP_DET.ZP_POZ,ZP_DET.SLO_KOD().KOD,ZP_DET.WY);
   SLO_KOD.cntx_pop()
?};
~~


\zp_det_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń po" tabeli ZP_DET.
::   WE: zgodna ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_det_del/zz_link.fml
::----------------------------------------------------------------------------------------------------------------------
:: __BULK.ZP_DET.after.del
{? do_state()=1 & _a & ~exec('get','#bulk',ZP_DET,'dela',$bfld('ZP_POZ'))
|| SLO_KOD.cntx_psh();
   SLO_KOD.clear();
   {? SLO_KOD.seek(bfld('SLO_KOD'))
   || exec('zp_det_upd','phr_zp_tab',bfld('ZP_POZ'),SLO_KOD.KOD,bfld('WY'))
   ?};
   SLO_KOD.cntx_pop()
?};
~~


\zp_det_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE:
::   WY:
::  OLD: \init_tab/zz_setup.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_DET*'CHK|'
|| return(1)
?};
__CHK.record(ZP_DET)=''


\zp_det_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Formuła dla wyzwalaczy "po" aktualizująca pozycje planu.
::   WE: _a [REFERENCE] - Wskazanie na pozycję planu.
::       _b [STRING]    - Rodzaj zapisu.
::       _c [NUMBER]    - Wymiar zatrudnienia.
::  OLD: \zp_det_upd/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZP_POZ.cntx_psh();
ZP_POZ.clear();
{? ZP_POZ.seek(_a)
|| exec('zp_poz_set','phr_zp_tab',_b,_c);
   ZP_POZ.put()
?};
ZP_POZ.cntx_pop();
~~


\zp_det_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Aktualizacja zawartości szczegółów pozycji planu zatrudnienia.
::   WE: _a [DATE]      - Data początku okresu.
::       _b [DATE]      - Data końca okresu.
::       _c [REFERENCE] - Wskazanie jednostki organizacyjnej.
::       _d [REFERENCE] - Wskazanie stanowiska.
::       _e [REFERENCE] - Wskazanie pozycji planu.
::  OLD: \zp_det_akt/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_H:=tab_tmp(1,'OD','DATE',,'DO','DATE',,'WY','REAL',);
_d0:=date(0,0,0);

ZP_DET.cntx_psh();
ZP_DET.clear();

H.cntx_psh();
H.index('HISTSTR');

P.cntx_psh();
P.clear();
:: Uwzględnić "rodzaj" pracownika !!!
P.f_set(,,'(P.DZA<=to_date(:_b)) and (P.DZ is null or to_date(:_a)<=P.DZ)',_a,_b);

_loop:=P.f_first();
{!
|? _loop
|! H.prefix(P.ref(),_c,_d,'Z');
   {? H.find_le(_b) & (H.DO=_d0 | _a<=H.DO)
   || _H.OD:=H.OD;
      _H.DO:=H.DO;
      _H.WY:=H.RWY;
      _H.add();
      {!
      |? {? H.prev() & _a<=H.DO
         || {? H.DO+1=_H.OD
            || _H.OD:=H.OD;
               {? _H.WY<H.RWY
               || _H.WY:=H.RWY
               ?};
               _H.put()
            || _H.OD:=H.OD;
               _H.DO:=H.DO;
               _H.WY:=H.RWY;
               _H.add()
            ?}
         ?}
      !};
      ZP_DET.blank();
      ZP_DET.ZP_POZ:=_e;
      ZP_DET.P:=P.ref();
      ZP_DET.OSOBA:=P.OSOBA;
      _loop:=_H.first();
      {!
      |? _loop
      |! ZP_DET.DATA:=_H.OD;
         ZP_DET.WY:=_H.WY;
         {? _H.OD<_a
         || _kod:='.'
         |? _H.OD=P.DZA
         || _kod:='+Z'
         || _kod:='+P'
         ?};
         ZP_DET.SLO_KOD:=exec('kod','ext_slo','ZP_DET',_kod);
         ZP_DET.add();
         {? _H.DO<>_d0
         || {? _H.DO=P.DZ
            || _kod:='-Z'
            || _kod:='-P'
            ?};
            ZP_DET.WY:=_H.WY;
            ZP_DET.SLO_KOD:=exec('kod','ext_slo','ZP_DET',_kod);
            ZP_DET.add()
         ?};
         _loop:=_H.next()
      !};
      {! |? _H.del() !}
   ?};
   _loop:=P.f_next()
!};

P.f_clear();
P.cntx_pop();
H.cntx_pop();

ZP_DET.cntx_pop();
~~


\zp_okr_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz przed" tabeli ZP_OKR.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_okr_ba/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zp_okr_modb','phr_zp_tab');
{? ~(exec('dok_addb','phr_tab',ZP_OKR) & exec('zp_okr_chk','phr_zp_tab'))
|| return(0)
?};

_d0:=date(0,0,0);
{? ZP_OKR.OKRES_OD<>_d0 & ZP_OKR.OKRES_DO<>_d0 &
   exec('check','overlap',null(),ZP_OKR,'OKRES_OD','OKRES_DO',1,,,'OKRES_OD')<>''
|| return(0)
?};

1


\zp_okr_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw przed" tabeli ZP_OKR.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_okr_bp/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_OKR*'PUTB|'
|| return(1)
?};
exec('zp_okr_modb','phr_zp_tab');
{? ~(exec('dok_putb','phr_tab',ZP_OKR) & exec('zp_okr_chk','phr_zp_tab'))
|| return(0)
?};

_d0:=date(0,0,0);
{? ZP_OKR.OKRES_OD<>_d0 & ZP_OKR.OKRES_DO<>_d0 &
   exec('check','overlap',ZP_OKR.ref(),ZP_OKR,'OKRES_OD','OKRES_DO',1,,,'OKRES_OD')<>''
|| return(0)
?};

1


\zp_okr_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń przed" tabeli ZP_OKR.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_okr_del/zz_link.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',ZP_POZ,'OPIS',ZP_OKR.ref())


\zp_okr_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz po" tabeli ZP_OKR.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_okr_aa/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: do_state()=1 & _a Ten kawałek kodu i tak jest wykonywany w ramach \dok_adda/phr_tab.fml
{? exec('dok_adda','phr_tab',ZP_OKR,_a)
:: zweryfikuj zapotrzebowania zgłoszone na okres planowania
|| exec('zp_okr_zap','phr_zp_tab',ZP_OKR.ref(),ZP_OKR.OKRES_OD,ZP_OKR.OKRES_DO)
?};
~~


\zp_okr_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw po" tabeli ZP_OKR.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_okr_ap/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_OKR*'PUTA|'
|| return()
?};
:: do_state()=1 & _a Ten kawałek kodu jest wykonywany w ramach \dok_puta/phr_tab.fml
{? ~exec('dok_puta','phr_tab',ZP_OKR,_a)
|| return()
?};

:: !!! Powiadomienia
::{? bfld('SLO_KOD')<>ZP_OKR.SLO_KOD
::|| SLO_KOD.cntx_psh();
::   {? ZP_OKR.SLO_KOD().KOD='E' || exec('pzatStart','zz_mail',ZP_OKR.ref())
::   |? ZP_OKR.SLO_KOD().KOD='O' || exec('pzatEnd','zz_mail',ZP_OKR.ref())
::   ?};
::   SLO_KOD.cntx_pop()
::?};

: zweryfikuj zapotrzebowania przypadające na okres planowania
exec('zp_okr_zap','phr_zp_tab',ZP_OKR.ref(),ZP_OKR.OKRES_OD,ZP_OKR.OKRES_DO);

: obsługa akceptacji planu
{? ZP_OKR.AKC_STAN<>bfld('AKC_STAN') & ZP_OKR.AKC_STAN='T'
|| ZP_OKR.AKC_DATA:=date();
:  odrzuć wnioski
   ZP_WZP.cntx_psh();
   ZP_WZP.index('ZP_OKR');
   ZP_WZP.prefix(ZP_OKR.ref());
   _loop:=ZP_WZP.first();
   {!
   |? _loop
   |! {? ZP_WZP.AKC_STAN='?'
      || ZP_WZP.AKC_STAN:='N';
         ZP_WZP.put()
      ?};
      _loop:=ZP_WZP.next()
   !};
   ZP_WZP.cntx_pop();
:  akceptuj pozycje
   ZP_POZ.cntx_psh();
   ZP_POZ.index('OPIS');
   ZP_POZ.prefix(ZP_OKR.ref());
   _loop:=ZP_POZ.first();
   {!
   |? _loop
   |! {? ZP_POZ.AKC_STAN<>'T'
      || ZP_POZ.AKC_STAN:='T';
         {? ZP_OKR.AKC_P<>null() & ZP_POZ.AKC_P=null()
         || ZP_POZ.AKC_P:=ZP_OKR.AKC_P
         ?};
         ZP_POZ.put()
      ?};
      _loop:=ZP_POZ.next()
   !};
   ZP_POZ.cntx_pop()
?};

~~


\zp_okr_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń po" tabeli ZP_OKR.
::   WE: zgodna ze specyfikacją narzędzi
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dok_dela','phr_tab',_a);
~~


\zp_okr_zap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Weryfikuje zapotrzebowania i ewentualnie "odłącza je" od planu zatrudnienia.
::   WE: _a [REFERENCE] - Wskazanie na plan zatrudnienia.
::       _b [DATE]      - Data początku okresu.
::       _c [DATE]      - Data końca okresu.
::  OLD: \zp_okr_zap/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
RP_ZAP.cntx_psh();
RP_ZAP.index('ZP_OKR');

RP_ZAP.prefix(_a);
_loop:=RP_ZAP.first();
_ref:=null();
{!
|? _loop
|! {? RP_ZAP.OD_DNIA<_b | _c<RP_ZAP.OD_DNIA
   || RP_ZAP.cntx_psh();
      RP_ZAP.clear();
      RP_ZAP.ZP_OKR:=null();
      RP_ZAP.put();
      RP_ZAP.cntx_pop();
      {? ~(_ref & RP_ZAP.seek(_ref))
      || _loop:=RP_ZAP.first();
         _ref:=null()
      || _loop:=1
      ?}
   || _ref:=RP_ZAP.ref();
      _loop:=RP_ZAP.next()
   ?}
!};

RP_ZAP.prefix(null());
_loop:=RP_ZAP.first();
_ref:=null();
{!
|? _loop
|! {? _b<=RP_ZAP.OD_DNIA & RP_ZAP.OD_DNIA<=_c
   || RP_ZAP.cntx_psh();
      RP_ZAP.clear();
      RP_ZAP.ZP_OKR:=_a;
      RP_ZAP.put();
      RP_ZAP.cntx_pop();
      {? ~(_ref & RP_ZAP.seek(_ref))
      || _loop:=RP_ZAP.first();
         _ref:=null()
      || _loop:=1
      ?}
   || _ref:=RP_ZAP.ref();
      _loop:=RP_ZAP.next()
   ?}
!};

RP_ZAP.cntx_pop()


\zp_okr_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Wywoływana z wyzwalaczy przed dołącz i popraw.
::  OLD: \zp_okr_bw/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZP_OKR.AKC_WYM='N'
|| ZP_OKR.AKC_P:=null();
   ZP_OKR.AKC_STAN:='?'
?};
P.cntx_psh();
ZP_OKR.AKC_OS:=ZP_OKR.AKC_P().OSOBA;
P.cntx_pop();
1


\zp_okr_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::  OLD: \zp_okr_ck/zz_table.fml
::  OLD: \zp_okr_nn/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_OKR*'CHK|'
|| return(1)
?};
__CHK.record(ZP_OKR,,'OKRES_OD','OKRES_DO','SLO_KOD','AKC_WYM','AKC_STAN')='' &
{? ZP_OKR.AKC_WYM='T' || __CHK.record(ZP_OKR,,'AKC_P','AKC_OS')='' || 1 ?} &
__CHK.in_set(ZP_OKR,'AKC_WYM',,'T','N') &
__CHK.in_set(ZP_OKR,'AKC_STAN',,'T','N','?') &
{? ZP_OKR.OKRES_DO<ZP_OKR.OKRES_OD || undo('Podano niespójne daty okresu obowiązywania planu.'@); 0
|? ZP_OKR.PLAN_DO<ZP_OKR.PLAN_OD || undo('Podano niespójne daty okresu tworzenia planu.'@); 0
|| 1
?}


\zp_poz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz przed" tabeli ZP_POZ.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_poz_ba/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zp_poz_modb','phr_zp_tab');
{? ~exec('dok_addb','phr_tab',ZP_POZ)
|| return(0)
?};

_len:=ZP_POZ.fld_num();
{! _lp:=23.._len
|! {? type_of(ZP_POZ[_lp])=type_of(0)
   || ZP_POZ[_lp]:=0
   ?}
!};

exec('zp_poz_chk','phr_zp_tab')


\zp_poz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw przed" tabeli ZP_POZ.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_poz_bp/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_POZ*'PUTB|'
|| return(1)
?};
exec('zp_poz_modb','phr_zp_tab');

{? ~exec('dok_putb','phr_tab',ZP_POZ)
|| return(0)
?};

::  __BULK.ZP_POZ.before.put
{? exec('get','#bulk',ZP_POZ,'adda',$ZP_POZ.ZP_OKR)
|| return(1)
?};

{? ZP_POZ.RODZAJ='STN'
|| _test:=0;
   ZP_POZ.cntx_psh();
   ZP_POZ.index('ZP_POZ');
   ZP_POZ.prefix(#ZP_POZ.ref());
   _test:=ZP_POZ.size();
   ZP_POZ.cntx_pop();
   {? _test
   || __CHK.err_msg('Niedozwolona zmiana rodzaju pozycji planu.'@);
      return(0)
   ?}
?};

_akt:=0;
_stn:=ZP_POZ.STN;
ZP_POZ.cntx_psh();
ZP_POZ.index('OPIS');
ZP_POZ.prefix(ZP_POZ.ZP_OKR,#ZP_POZ.ref());
{? ZP_POZ.size() | _stn=null()
|| _start:={? _stn<>null() || 23 || 21 ?};
   _stop:=38;
   _val:=obj_new(_stop+1-_start);
   {! _lp:=_start .. _stop
   |! _val[_lp+1-_start]:=0
   !};
   _loop:=ZP_POZ.first();
   {!
   |? _loop
   |! {! _lp:=_start .. _stop
      |! _val[_lp+1-_start]+=ZP_POZ[_lp]
      !};
      _loop:=ZP_POZ.next()
   !};
   _akt:=1
?};
ZP_POZ.cntx_pop();
{? _akt
|| {! _lp:=_start .. _stop
   |! ZP_POZ[_lp]:=_val[_lp+1-_start]
   !}
?};

exec('zp_poz_chk','phr_zp_tab')


\zp_poz_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń przed" tabeli ZP_POZ.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_poz_del/zz_link.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('del_ndx','#table',ZP_POZ,'ZP_POZ',ZP_POZ.ref())
|| return(0)
?};

_del:=0;
_key:=$ZP_POZ.ref();

:: __BULK.ZP_DET.after.del:=1;
{? exec('add','#bulk',ZP_DET,'dela',_key)
|| _del:=exec('del_ndx','#table',ZP_DET,'DATA',ZP_POZ.ref());
:: __BULK.ZP_DET.after.del:=0;
   exec('del','#bulk',ZP_DET,'dela',_key)
?};
{? ~_del
|| return(0)
?};

:: __BULK.ZP_WZP.after.del:=1;
{? exec('add','#bulk',ZP_WZP,'dela',_key)
|| _del:=exec('del_ndx','#table',ZP_WZP,'DATA',ZP_POZ.ref());
:: __BULK.ZP_WZP.after.del:=0;
   exec('del','#bulk',ZP_WZP,'dela',_key)
?};

_del


\zp_poz_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz po" tabeli ZP_POZ.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_poz_aa/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: __BULK.ZP_POZ.after.add
{? ~exec('dok_adda','phr_tab',ZP_POZ,_a) | exec('get','#bulk',ZP_POZ,'adda',$ZP_POZ.ZP_OKR)
|| return()
?};

{? ZP_POZ.UD_SKL<>null() & ZP_POZ.STN<>null()
|| ZP_OKR.cntx_psh();
   exec('zp_det_akt','phr_zp_tab',
      ZP_POZ.ZP_OKR().OKRES_OD,ZP_POZ.ZP_OKR().OKRES_DO,ZP_POZ.UD_SKL,ZP_POZ.STN,ZP_POZ.ref());
   ZP_OKR.cntx_pop()
?};

exec('zp_poz_dx','phr_zp_tab',ZP_POZ.ZP_POZ);

~~


\zp_poz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw po" tabeli ZP_POZ.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_poz_ap/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_POZ*'PUTA|'
|| return()
?};
{? ~exec('dok_puta','phr_tab',ZP_POZ,_a)
|| return()
?};

:: Propagacja informacji o redagującym i akceptującym (jeśli ich brak) w zapisach podrzędnych.
{? (ZP_POZ.RED_P<>null() & bfld('RED_P')<>ZP_POZ.RED_P) | (ZP_POZ.AKC_P<>null() & bfld('AKC_P')<>ZP_POZ.AKC_P) |
   bfld('AKC_WYM')<>ZP_POZ.AKC_WYM
|| _wym:=ZP_POZ.AKC_WYM;
   _red:=ZP_POZ.RED_P;
   _akc:=ZP_POZ.AKC_P;
   ZP_POZ.cntx_psh();
   ZP_POZ.index('OPIS');
   ZP_POZ.prefix(ZP_POZ.ZP_OKR,#ZP_POZ.ref());
   _loop:=ZP_POZ.first();
   {!
   |? _loop
   |! _update:=0;
      {? ZP_POZ.AKC_WYM<>_wym
      || ZP_POZ.AKC_WYM:=_wym;
         _update:=1
      ?};
      {? ZP_POZ.RED_P=null()
      || ZP_POZ.RED_P:=_red;
         _update:=1
      ?};
      {? ZP_POZ.AKC_P=null()
      || ZP_POZ.AKC_P:=_akc;
         _update:=1
      ?};
      {? _update
      || ZP_POZ.put()
      ?};
      _loop:=ZP_POZ.next()
   !};
   ZP_POZ.cntx_pop()
?};

exec('zp_poz_dx','phr_zp_tab',bfld('ZP_POZ'));
{? bfld('ZP_POZ')<>ZP_POZ.ZP_POZ
|| exec('zp_poz_dx','phr_zp_tab',ZP_POZ.ZP_POZ)
?};

:: Powiadomienie o zakończeniu prac nad pozycją planu !!!
::{? bfld('RED_STAN')<>ZP_POZ.RED_STAN & ZP_POZ.RED_STAN='T' & ZP_POZ.AKC_P<>null() & ZP_POZ.AKC_P<>ZP_POZ.RED_P
::|| exec('pzatWer','zz_mail')
::?};

:: Powiadomienie o zakończeniu weryfikacji pozycji planu !!!
::{? bfld('AKC_STAN')<>ZP_POZ.AKC_STAN & ZP_POZ.AKC_STAN<>'?' & ZP_POZ.RED_P<>null() & ZP_POZ.RED_P<>ZP_POZ.AKC_P
::|| exec('pzatWerPoz','zz_mail')
::?};
~~


\zp_poz_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń po" tabeli ZP_POZ.
::   WE: zgodna ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_poz_ad/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('dok_dela','phr_tab',_a)
|| exec('zp_poz_dx','phr_zp_tab',bfld('ZP_POZ'))
?};
~~


\zp_poz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Wywoływana z wyzwalaczy przed dołącz i popraw.
::  OLD: \zp_poz_bw/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: Aktualizacja wskazań.
P.cntx_psh();
P.prefix();
ZP_POZ.RED_OS:=ZP_POZ.RED_P().OSOBA;
ZP_POZ.AKC_OS:=ZP_POZ.AKC_P().OSOBA;
P.cntx_pop();

:: Ustawienie opisu pozycji.
{? ZP_POZ.RODZAJ='UD_SKL'
|| UD_SKL.cntx_psh();
   ZP_POZ.OPIS:=ZP_POZ.UD_SKL().SYMBOL;
   UD_SKL.cntx_pop()
|? ZP_POZ.RODZAJ='STN'
|| STN.cntx_psh();
   ZP_POZ.OPIS:=ZP_POZ.STN().ST;
   STN.cntx_pop()
|| ZP_POZ.OPIS:=''
?};

:: Ustalenie jednostki dla stanowiska.
{? ZP_POZ.ZP_POZ & ZP_POZ.RODZAJ='STN'
|| ZP_POZ.cntx_psh();
   ZP_POZ.clear();
   _skl:={? ZP_POZ.seek(ZP_POZ.ZP_POZ,) || ZP_POZ.UD_SKL || null() ?};
   ZP_POZ.cntx_pop();
   ZP_POZ.UD_SKL:=_skl
?};

:: Edycja i weryfikacja.
_d0:=date(0,0,0);
ZP_POZ.RED_DATA:={? ZP_POZ.RED_STAN='?' || _d0 || date() ?};
ZP_POZ.AKC_DATA:={? ZP_POZ.AKC_STAN='?' || _d0 || date() ?};

:: Wyliczenie wartości.
ZP_POZ.ZWO_OS:=ZP_POZ.ZWOZ_OS+ZP_POZ.ZWOP_OS;
ZP_POZ.ZWO_ET:=ZP_POZ.ZWOZ_ET+ZP_POZ.ZWOP_ET;
ZP_POZ.ZAT_OS:=ZP_POZ.ZATZ_OS+ZP_POZ.ZATP_OS;
ZP_POZ.ZAT_ET:=ZP_POZ.ZATZ_ET+ZP_POZ.ZATP_ET;
:: Statystyki.
ZP_POZ.SUM_OS:=(ZP_POZ.AKT_OS+ZP_POZ.ZAT_OS-ZP_POZ.ZWO_OS)-ZP_POZ.WYM_OS;
ZP_POZ.SUM_ET:=(ZP_POZ.AKT_ET+ZP_POZ.ZAT_ET-ZP_POZ.ZWO_ET)-ZP_POZ.WYM_ET;
ZP_POZ.WSK_OS:=({? ZP_POZ.SUM_OS<>0 || ZP_POZ.WYM_OS/ZP_POZ.SUM_OS ?}*100)$2;
ZP_POZ.WSK_ET:=({? ZP_POZ.SUM_ET<>0 || ZP_POZ.WYM_ET/ZP_POZ.SUM_ET ?}*100)$2;
1


\zp_poz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::  OLD: \zp_poz_nn/zz_table.fml
::  OLD: \zp_poz_ck/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_POZ*'CHK|'
|| return(1)
?};
_test:=
   __CHK.record(ZP_POZ,,'ZP_OKR','RODZAJ','OPIS','UD_SKL','RED_WYM','RED_STAN','AKC_WYM','AKC_STAN')='' &
   {? ZP_POZ.RODZAJ='STN' || __CHK.record(ZP_POZ,,'STN')='' || 1 ?} &
   {? ZP_POZ.RED_WYM='T' || __CHK.record(ZP_POZ,,'RED_P')='' || 1 ?} &
   {? ZP_POZ.AKC_WYM='T' || __CHK.record(ZP_POZ,,'AKC_P')='' || 1 ?} &
   __CHK.in_set(ZP_POZ,'RED_WYM',,'T','N') &
   __CHK.in_set(ZP_POZ,'RED_STAN',,'T','N','?') &
   __CHK.in_set(ZP_POZ,'AKC_WYM',,'T','N') &
   __CHK.in_set(ZP_POZ,'AKC_STAN',,'T','N','?');
{? ~_test
|| return(0)
?};

:: Sprawdzenie spójności logicznej:
:: - stanowiska można "podpiąć" tylko do jednostek;
:: - jednostki organizacyjne tylko do jednostek.
{? ZP_POZ.ZP_POZ
|| ZP_POZ.cntx_psh();
   ZP_POZ.clear();
   {? ZP_POZ.seek(ZP_POZ.ZP_POZ,)
   || _rodzaj:=ZP_POZ.RODZAJ;
      ZP_POZ.cntx_pop();
      _test:=0;
      {? ZP_POZ.RODZAJ='UD_SKL' & _rodzaj<>'UD_SKL'
      || __CHK.err_msg('Jednostka organizacyjna musi być przypisana do innej jednostki organizacyjnej.'@)
      |? ZP_POZ.RODZAJ='STN' & _rodzaj<>'UD_SKL'
      || __CHK.err_msg('Stanowisko musi być przypisane do jednostki organizacyjnej.'@)
      || _test:=1
      ?}
   || ZP_POZ.cntx_pop()
   ?}
?};

_test


\zp_poz_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Aktualizuje zawartość bufora tabeli ZP_POZ.
::   WE: _a [STRING] - Rodzaj zapisu.
::       _b [NUMBER] - Wymiar zatrudnienia.
::  OLD: \zp_poz_set/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? 1+_a='.'
|| ZP_POZ.AKT_OS+=1;
   ZP_POZ.AKT_ET+=_b
|? 1+_a='+'
|| {? _a+1='Z'
   || ZP_POZ.ZATZ_OS+=1;
      ZP_POZ.ZATZ_ET+=_b
   |? _a+1='P'
   || ZP_POZ.ZATP_OS+=1;
      ZP_POZ.ZATP_ET+=_b
   ?}
|? 1+_a='-'
|| {? _a+1='Z'
   || ZP_POZ.ZWOZ_OS+=1;
      ZP_POZ.ZWOZ_ET+=_b
   |? _a+1='P'
   || ZP_POZ.ZWOP_OS+=1;
      ZP_POZ.ZWOP_ET+=_b
   ?}
?}


\zp_poz_dx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Aktualizuje pola liczbowe 20-37 wartościami z tablicy.
::   WE: _a [NUMBER] - Wskazanie pozycji planu.
::  OLD: \zp_poz_dx/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZP_POZ.cntx_psh();
ZP_POZ.clear();
{? ZP_POZ.seek(_a,)
|| ZP_POZ.put()
?};
ZP_POZ.cntx_pop();
~~


\zp_wzp_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz przed" tabeli ZP_WZP.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
exec('zp_wzp_modb','phr_zp_tab');
exec('dok_addb','phr_tab',ZP_WZP) & exec('zp_wzp_chk','phr_zp_tab')


\zp_wzp_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw przed" tabeli ZP_WZP.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::  OLD: \zp_wzp_bp/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_WZP*'PUTB|'
|| return(1)
?};
exec('zp_wzp_modb','phr_zp_tab');
{? ~(exec('dok_putb','phr_tab',ZP_WZP) & exec('zp_wzp_chk','phr_zp_tab'))
|| return(0)
?};

ZP_WZP.POZ_ET:=ZP_WZP.ZAT_OS;
ZP_WZP.POZ_OS:=ZP_WZP.ZAT_ET;
RP_ZAP.cntx_psh();
RP_ZAP.index('ZP_WZP');
RP_ZAP.prefix(ZP_WZP.ref());
_loop:=RP_ZAP.first();
{!
|? _loop
|! ZP_WZP.POZ_ET-=(RP_ZAP.WY*RP_ZAP.ILE);
   ZP_WZP.POZ_OS-=RP_ZAP.ILE;
   _loop:=RP_ZAP.next()
!};
RP_ZAP.cntx_pop();

1


\zp_wzp_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń przed" tabeli ZP_WZP.
::   WE:
::   WY: zgodna ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
1


\zp_wzp_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "dołącz po" tabeli ZP_WZP.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_wzp_aa/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
::  __BULK.ZP_DET.after.add
{? ~exec('dok_adda','phr_tab',ZP_WZP,_a) | exec('get','#bulk',ZP_DET,'adda',$ZP_WZP.ZP_POZ)
|| return()
?};

:: Aktualizuj plan na podstawie wniosków.
exec('zp_wzp_poz','phr_zp_tab',ZP_WZP.ZP_POZ);

:: Powiadomienie o konieczności weryfikacji wniosku zmiany planu. !!!
::ZP_POZ.cntx_psh();
::ZP_WZP.ZP_POZ();
::{? ZP_WZP.RED_STAN='T' & ZP_POZ.AKC_P<>null & ZP_POZ.RED_P<>ZP_POZ.AKC_P
::|| exec('pzatRedWnio','zz_mail')
::?};
::ZP_POZ.cntx_pop();
~~


\zp_wzp_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "popraw po" tabeli ZP_WZP.
::   WE: zgodne ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_wzp_ap/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_WZP*'PUTA|'
|| return()
?};
:: __BULK.ZP_DET.after.put
{? ~exec('dok_puta','phr_tab',ZP_WZP,_a) | exec('get','#bulk',ZP_DET,'puta',$ZP_WZP.ZP_POZ)
|| return()
?};

:: Aktualizuj plan na podstawie wniosków.
exec('zp_wzp_poz','phr_zp_tab',ZP_WZP.ZP_POZ);

:: Obieg informacji - powiadomienia. !!!
::ZP_POZ.cntx_psh();
::ZP_WZP.ZP_POZ();
::{? ZP_POZ.RED_P<>ZP_POZ.AKC_P
::|| {? bfld('RED_STAN')<>ZP_WZP.RED_STAN & ZP_WZP.RED_STAN='T' & ZP_POZ.AKC_P<>null()
:::     Powiadomienie o konieczności weryfikacji wniosku zmiany planu.
::   || exec('pzatRedWnio','zz_mail')
::   ?};
::   {? bfld('AKC_STAN')<>ZP_WZP.AKC_STAN & ZP_WZP.AKC_STAN<>'?' & ZP_POZ.RED_P<>null()
:::     Powiadomienie o zakończeniu weryfikacji wniosku zmiany planu.
::   || exec('pzatWerWnio','zz_mail')
::   ?}
::?};
::ZP_POZ.cntx_pop();

~~


\zp_wzp_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Formuła wyzwalacza "usuń po" tabeli ZP_WZP.
::   WE: zgodna ze specyfikacją narzędzi
::   WY:
::  OLD: \zp_wzp_ad/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: __BULK.ZP_DET.after.del
{? exec('dok_dela','phr_tab',_a) & ~exec('get','#bulk',ZP_DET,'dela',$bfld('ZP_POZ'))
|| exec('zp_wzp_poz','phr_zp_tab',bfld('ZP_POZ'))
?};
~~


\zp_wzp_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Wywoływana z wyzwalaczy przed dołącz i popraw.
::  OLD: \zp_wzp_bw/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
:: Weryfikacja.
ZP_WZP.AKC_DATA:={? ZP_WZP.AKC_STAN='?' || date(0,0,0) || date() ?};
1


\zp_wzp_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::  OLD: \zp_wzp_nn/zz_table.fml
::  OLD: \zp_wzp_ck/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.ZP_WZP*'CHK|'
|| return(1)
?};
__CHK.record(ZP_WZP,,'ZP_POZ','RED_STAN','RED_DATA','ZAT_ZM','ZAT_OS','ZAT_ET','AKC_STAN')='' &
{? ZP_WZP.AKC_STAN='T' || __CHK.record(ZP_WZP,,'AKC_DATA')='' || 1 ?} &
__CHK.in_set(ZP_WZP,'ZAT_ZM',,'+','-') &
__CHK.in_set(ZP_WZP,'RED_STAN',,'T','N') &
__CHK.in_set(ZP_WZP,'AKC_STAN',,'T','N','?') &
{? ZP_WZP.ZAT_OS<0 || __CHK.err_msg('Liczba osób nie może być ujemna.'@); 0 || 1 ?} &
{? ZP_WZP.ZAT_ET<0 || __CHK.err_msg('Liczba etatów nie może być ujemna.'@); 0 || 1 ?} &
{? ZP_WZP.ZAT_OS<ZP_WZP.ZAT_ET || __CHK.err_msg('Liczba etatów nie może przekraczać liczby osób.'@); 0 || 1 ?}


\zp_wzp_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Aktualizacja pozycji planu po zmianie w tabeli wniosków.
::   WE: _a [REFERENCE] - Wskazanie pozycji planu.
::  OLD: \zp_wzp_poz/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZP_POZ.cntx_psh();
ZP_POZ.clear();
{? ZP_POZ.seek(_a)
|| ZP_POZ.WZP_OS:=0;
   ZP_POZ.WZP_ET:=0;
   ZP_WZP.cntx_psh();
   ZP_WZP.index('DATA');
   ZP_WZP.prefix(ZP_POZ.ref());
   _loop:=ZP_WZP.first();
   {!
   |? _loop
   |! {? ZP_WZP.AKC_STAN='T'
      || {? ZP_WZP.ZAT_ZM='+'
         || ZP_POZ.WZP_OS+=ZP_WZP.ZAT_OS;
            ZP_POZ.WZP_ET+=(ZP_WZP.ZAT_OS*ZP_WZP.ZAT_ET)
         |? ZP_WZP.ZAT_ZM='-'
         || ZP_POZ.WZP_OS-=ZP_WZP.ZAT_OS;
            ZP_POZ.WZP_ET-=(ZP_WZP.ZAT_OS*ZP_WZP.ZAT_ET)
         ?}
      ?};
      _loop:=ZP_WZP.next()
   !};
   ZP_WZP.cntx_pop();
   ZP_POZ.put()
?};
ZP_POZ.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 c18cd293e114392ce23d0069c98d97fa9ffee3c8b5e54580997f7696ea053e0f1656984709b2dccf5c94f9d1d2458adc037b4d4f68d67c5a79849c2b03000347e1c5e739f68ae200bc82f6b32c09a13b798f65c919209f8479f71d118620201c467aa87a55d75a5723d3eb56d81896da290bc5ef1c153b904dc42c40e7d74605
