:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_kh.fml
:: Utworzony: 19.10.2018
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi kontrahentów przez MacroWebAPI
::======================================================================================================================


\serialize_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);
_data:="
   _nasz_kod:=\"
      _nasz_kod:='';
      KH_DOD.cntx_psh();
      KH_DOD.index('KH_DOD');
      KH_DOD.prefix(REF.FIRMA,KH.ref());
      {? KH_DOD.first()
      || _nasz_kod:=KH_DOD.NASZ_KOD
      ?};
      KH_DOD.cntx_pop();
      _nasz_kod
   \";
   KH.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'REFERENCE',,'IDADD',
      ,'KOD',,'LOTUSUID',,'TYP',,'SKR',,'NAZ',,'NAZ_P',,'KRAJ',,'MIASTO',,'UL',,'POCZ',,'KPOCZ',
      ,'TEL',,'TX',,'REG',,'REG_DATA',,'FAX',,'U',,'NIP',,'EM',,'NASZ_KOD',_nasz_kod
      ,'FIZYCZNY',,'GLN',,'REJ_INFO',,'WWW',
      ,'KRS',,'KRS_DATA',,'EORI',,'DATA_WDT',,'NDT',,'WP',,'PESEL',,'SN_DT',,'KOLOR',
   );
   ''
";
params_set('resp',_resp);
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\set_fields_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PS] [17.14]
:: OPIS: Ustawia pola kontrahenta
::   WE: _a - STRING - parametry kontrahenta
::       _b -_wsenv
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=_b;
exec('set_fields','mwapi',_a);
KODSLU.NIP_UE:='';

:: Zamiana skrótu na duże litery
KH.SKR:=~-KH.SKR;
{? KH.TYP<>'R' || KH.NDT:=null(); KH.WP:=null();KH.DATA_WDT:=date(0,0,0);KH.SN_DT:='' ?};
{? KH.NIP<>''
|| _snip:=exec('niptostr','#string',KH.NIP);
   {? 2+_snip='PL' || _snip:=2-_snip ?};
   {? KH.TYP='I' | exec('nip_ok','#id',KH.NIP)
   || KH.SNIP:=_snip
   ?}
?};
KH.NIP_UE:=exec('niptostr','#string',KH.NIP_UE);
_nip_ue_kraj:=exec('get_value','mwapi',_a,'NIP_UE_KRAJ');
{? KH.TYP='U' &  (KH.NIP_UE='' | _nip_ue_kraj='')
|| _wsenv.add_error('Należy podać NIP w UE i kod kraju.'@)
|? KH.NIP_UE<>'' & _nip_ue_kraj<>''
|| SLO.cntx_psh();
   SLU.cntx_psh();
   SLU.index('NAZ');
   SLU.prefix('~KRAJE UE');
   {? SLU.first()
   || SLO.index('SL');
      SLO.prefix(SLU.ref(),2+_nip_ue_kraj,);
      {? SLO.first()
      || KODSLU.NIP_UE:=(2+_nip_ue_kraj)+' '+(KH.NIP_UE)
      || _wsenv.add_error('Brak kraju o kodzie %1.'@[2+_nip_ue_kraj])
      ?}
   ?};
   SLO.cntx_pop();
   SLU.cntx_pop()
|| KH.NIP_UE:=''
?};
~~


\read_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Odczytuje wszystkich kontrahentów.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? exec('authorized','#b__box','ZWS_KHR','ZWS')
|| KH.cntx_psh();
   KH.index('KOD');
   KH.prefix(2);
   _result:=exec('serialize_kh','mwa_kh',_par);
   KH.cntx_pop()
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _msg:='Brak uprawnień do przeglądania kontrahentów.'@;
   mwa_status(401,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\create_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Dodaje kontrahenta w oparciu o przekazane parametry.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Kh');

exec('czytaj','#stalesys',,XINFO);
{? XINFO.DWD<>null() || _option.fields:=exec('update_fields','mwa_kh',_option.fields,'NDT',XINFO.DWD) ?};
{? XINFO.UWD<>null() || _option.fields:=exec('update_fields','mwa_kh',_option.fields,'WP',XINFO.UWD) ?};
_fields_kh:='KH'+_option.fields;
KH.cntx_psh();
KH.blank();
KH.P=2;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

exec('set_fields_kh','mwa_kh',_fields_kh,_wsenv);

KH.KOD:='';
KH.SKR:='';
KH.WIELKOSC:='nieustalony';

:sprawdzenie czy przeznaczenie komunikatu to Abstore
:_option_ab:=exec('get_option','mwapi',_par,'Name_conf');
:_abstore:=(_option_ab.value*'ABSTOREB2B' | _option_ab.value*'ABSTOREB2C');

_em_uni:=exec('get_option','mwapi',_par,'EM_UNI');

::sprawdzenie czy kontrahent o takim mailu ju z istnieje w bazie
_lotusuid:=KH.LOTUSUID;
_naz:=KH.NAZ;
_naz_p:=KH.NAZ_P;
_miasto:=KH.MIASTO;
_ul:=KH.UL;
_kpocz:=KH.KPOCZ;

KH.cntx_psh();
_ndx:=KH.ndx_tmp(,,'EM',,);
KH.index(_ndx);
KH.prefix(KH.EM,);
{? KH.EM<>'' & KH.first() & _em_uni.value<>'N'
||
   _put:=0;
   {? _lotusuid<>''  || KH.LOTUSUID:=_lotusuid; _put:=1 ?};
   {? _naz<>''       || KH.NAZ:=_naz; _put:=1 ?};
   {? _naz_p<>''     || KH.NAZ_P:=_naz_p; _put:=1 ?};
   {? _miasto<>''    || KH.MIASTO:=_miasto; _put:=1 ?};
   {? _ul<>''        || KH.UL:=_ul; _put:=1 ?};
   {? _kpocz<>''     || KH.KPOCZ:=_kpocz; _put:=1 ?};
   {? _put           || KH.put(1) ?};
   _wsenv.IDADD:=KH.IDADD;
   KH.cntx_pop()
||
   KH.cntx_pop();
   {? ~_wsenv.has_errors()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KKHR';
      _params.AKCJA:='Dołącz';
      _params.PROC_START:='T';
      _params.QUIET:='T';
      exec('mp_run','#b__box',_params)
   ?}
?};
KH.ndx_drop(_ndx);

:sprawdzenie czy użytkownik wysłał dane do faktury które będą nadpisane na dane użytkownika
_option_f:=exec('get_option','mwapi',_par,'Kh_f');

{? _option_f.fields<>'' & _wsenv.IDADD<>''
||
   KH.cntx_psh();
   KH.index('IDADD');
   KH.prefix(_wsenv.IDADD);
   {? KH.first() & KH.LOTUSUID<>''
   ||
      _id_kh:=KH.LOTUSUID;
      exec('add_fak','mwa_kh',_id_kh,_option_f,_wsenv)
   ?};
   KH.cntx_pop()
?};

{? ~_wsenv.has_errors() & _wsenv.IDADD<>''
|| KH.cntx_psh();
   KH.index('IDADD');
   KH.prefix(_wsenv.IDADD);
   KH.first();
   mwa_status(201);
   _result:=exec('serialize_kh','mwa_kh',_par);
   KH.cntx_pop()
||
   mwa_status(400);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
KH.cntx_pop();
_result


\read_kh_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Odczytuje kontrahenta na podstawie IDADD
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'IDADD');
_idadd:=_option.value;
{? exec('authorized','#b__box','ZWS_KHR','ZWS')
|| KH.cntx_psh();
   KH.index('IDADD');
   KH.prefix();
   {? +_idadd=31 & KH.find_key(_idadd)
   || KH.prefix(KH.IDADD);
      _result:=exec('serialize_kh','mwa_kh',_par)
   || _wsenv:=exec('wsenv','#mwapi');
      _wsenv.erase();
      _msg:='Nieprawidłowa wartość parametru %1 [%2].'@ ['"idadd"',_idadd];
      mwa_status(400,_msg);
      _wsenv.add_error(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?};
   KH.cntx_pop()
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _msg:='Brak uprawnień do przeglądania kontrahentów.'@;
   mwa_status(401,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\update_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Modyfikuje danego kontrahenta.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Kh.IDADD');
_idadd:=_option.value;
_fields_kh:='KH'+_option.fields;
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

KH.cntx_psh();
KH.index('IDADD');
KH.prefix();

{? _idadd=''
||
   _msg:='Nie przekazano IDADD.'@;
   mwa_status(400,_msg);
   _wsenv.add_error(_msg)
|? +_idadd=31 & KH.find_key(_idadd)
|| KH.prefix(KH.IDADD);
   {? KH.first()
   || exec('set_fields_kh','mwa_kh',_fields_kh,_wsenv);
      {? ~_wsenv.has_errors()
      || _params:=exec('mp_run_a','#b__box');
         _params.ACT_UID:='ZWS_PAR_KKHR';
         _params.AKCJA:='Popraw';
         _params.QUIET:='T';
         exec('mp_run','#b__box',_params)
      ?}
   ||
      _msg:='Nie znaleziono kontrahenta.'@;
      mwa_status(204,_msg);
      _wsenv.add_error(_msg)
   ?}
||
   _msg:='Nieprawidłowa wartość pola %1 [%2].'@ ['IDADD',_idadd];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg)
?};

{? ~_wsenv.has_errors()
||
   _result:=exec('serialize_kh','mwa_kh',_par)
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

KH.cntx_pop();
_result


\delete_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Usuwa danego kontrahenta.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'IDADD');
_idadd:=_option.value;
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

KH.cntx_psh();
KH.index('IDADD');
KH.prefix();

{? _idadd=''
|| _msg:='Nie przekazano IDADD.'@;
   mwa_status(400,_msg);
   _wsenv.add_error(_msg)
|? +_idadd=31 & KH.find_key(_idadd)
|| KH.prefix(KH.IDADD);
   {? KH.first()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KKHR';
      _params.AKCJA:='Usuń';
      _params.QUIET:='T';
      exec('mp_run','#b__box',_params)
   ||
      _msg:='Nie znaleziono kontrahenta.'@;
      mwa_status(204,_msg);
      _wsenv.add_error(_msg)
   ?}
||
   _msg:='Nieprawidłowa wartość pola %1 [%2].'@ ['IDADD',_idadd];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg)
?};

_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_par,_resp,~_wsenv.has_errors());
KH.cntx_pop();

_result


\serialize_han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Formuła pomocnicza do serializacji handlowców do XML
::       Kontekst wywołania: ustawiona dziedzina tabeli M
::   WE: _a - obiekt???
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null(),'Uw',,1,1);

_data:="
   HAN.xml_records(,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'REFERENCE',,'IDADD',
      ,'KOD',,'NAZ',
   )
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\read_han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Odczytuje wszystkie aktywnych handlowców
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

HAN.index('KOD');
HAN.prefix();
_result:=exec('serialize_han','mwa_kh',_par);

_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\add_fak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.14]
:: OPIS: Formuła aktualizuje dane kontrahenta w B2C jeśli wybrał opcję faktury
:: WE: _a- KH.LOTUSUID
::     _b- ('get_option','mwapi')
::     _c- _wsenv
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=_c;
KH.cntx_psh();
KH.blank();

_fields_kh_f:='KH'+_b.fields;
exec('set_fields_kh','mwa_kh',_fields_kh_f,_wsenv);

_naz:=KH.NAZ-(+KH.LOTUSUID)+_a;
_naz_p:=KH.NAZ_P-(+KH.LOTUSUID)+_a;
_miasto:=KH.MIASTO;
_ul:=KH.UL;
_kpocz:=KH.KPOCZ;
_nip:=KH.NIP;

KH.index('LOTUSUID');
KH.prefix(2,_a,_a);
{? KH.first() & ~_wsenv.has_errors()
||
   _put:=0;
   {? _naz<>''       || KH.NAZ:=_naz; _put:=1 ?};
   {? _naz_p<>''     || KH.NAZ_P:=_naz_p; _put:=1 ?};
   {? _miasto<>''    || KH.MIASTO:=_miasto; _put:=1 ?};
   {? _ul<>''        || KH.UL:=_ul; _put:=1 ?};
   {? _kpocz<>''     || KH.KPOCZ:=_kpocz; _put:=1 ?};
   {? _nip<>''       || KH.NIP:=_nip; _put:=1 ?};
   {? _put           || KH.put(1) ?}
?};
KH.cntx_pop()


\update_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Podmienia wartości pól
::   WE: _a - String  z polami
::       _b - nazwa pola
::       _c - słownik
::----------------------------------------------------------------------------------------------------------------------
{? _a*'`sep`%1`sep`'[_b]
|| _value:=
   {? ((_a*'`sep`%1`sep`'[_b]+(+'`sep`%1`sep`'[_b])-_a)*'`sep`')=0
   || (_a*'`sep`%1`sep`'[_b]+(+'`sep`%1`sep`'[_b]-1)-_a)
   || ((_a*'`sep`%1`sep`'[_b]+(+'`sep`%1`sep`'[_b])-_a)*'`sep`')+(_a*'`sep`%1`sep`'[_b]+(+'`sep`%1`sep`'[_b]-1)-_a)
   ?};
   _mask:='sl_ogol';
   {? ~(+_value=16 & BB.sqlint(_value)>0 & ((+_mask)+_value)=_mask) & _value<>''
   || SLO.cntx_psh();
      SLO.index('SL');
      SLO.prefix(_c,_value,);
      {? SLO.first()
      || _a:=gsub(_a,'`sep`%1`sep`%2'[_b,_value],'`sep`%1`sep`%2'[_b,$SLO.ref()])
      ?};
      SLO.cntx_pop()
   ?}
?};
_a


\add_nip_ue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Dodaje pole NIP_UE - wykorzystywane w webserwisie
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh();
SLU.cntx_psh();
SLU.index('NAZ');
SLU.prefix('~KRAJE UE');
{? SLU.first()
|| SLO.index('SL');
   SLO.prefix(SLU.ref(),2+KODSLU.NIP_UE,);
   _put:=0;
   {? SLO.first()
   || TYM_NIP.cntx_psh();
      TYM_NIP.prefix(SLO.KOD);
      {? TYM_NIP.first()
      || {? TYM_NIP.NIP<>3-KODSLU.NIP_UE
         || TYM_NIP.NIP:=3-KODSLU.NIP_UE;
            TYM_NIP.prefix();
            {? ~TYM_NIP.put()
            || FUN.info('Nie udało się przypisać pola NIP_UE.'@)
            ?}
         ?}
      || TYM_NIP.blank();
         TYM_NIP.KRAJ:=SLO.KOD;
         TYM_NIP.NIP:=3-KODSLU.NIP_UE;
         TYM_NIP.REFKH:=#KH.ref();
         TYM_NIP.DEFAULT:='N';
         {? ~TYM_NIP.add()
         || FUN.info('Nie udało się przypisać pola NIP_UE.'@)
         ?}
      ?};
      TYM_NIP.cntx_pop()
   || FUN.info('Brak kraju o kodzie %1.'@[2+KODSLU.NIP_UE])
   ?}
|| FUN.info('Nie odnaleziono słownika krajów UE.'@)
?};
SLO.cntx_pop();
SLU.cntx_pop()

:Sign Version 2.0 jowisz:1045 2023/11/23 12:59:24 1ae149d5d82d0093e53523cf979188c8f1b9d712cd29637fab321066fcaca653646f5a65977fb1ad38a30625155c38a393959ed08da6db6b017360537f295a3d0bceecd8d26fb45e39c915efdbac1b07ebecfe19ea63394c82f06a452982cac90f2759a5f1ca7962cbb7f9ffc41b4bfa40566b7d3cb311ebd388ba8f675dd3cd
