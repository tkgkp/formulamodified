:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: kody_kresk.fml
:: Utworzony: 03.03.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Obsługa kodów kreskowych w logistyce
::======================================================================================================================


\eangform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: szuka formuły na kod dostawy
::   WE: _a - ref magazynu
::       _b - tabela
::       _c - pole
::       [_d] - formuła grupująca 1, 0-ogólna(domyślnie)
::   WY: treść formuły lub jak jej nie ma pusty tekst
::  OLD: \eangform/mws.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};

_wyn:='';
EANG.cntx_psh();
EANG.index('TAB');
EANG.prefix(_a,_b,_b,_c,_c);
{? EANG.first() || _wyn:={? _d & EANG.FORG<>null ||EANG.FORG().FORMULA || EANG.FORM().FORMULA ?} ?};
{? _wyn=''
|| EANG.index('TAB');
   EANG.prefix(null,_b,_b,_c,_c);
   {? EANG.first() || _wyn:={? _d & EANG.FORG<>null ||EANG.FORG().FORMULA || EANG.FORM().FORMULA ?} ?}
?};
EANG.cntx_pop();
_wyn


\m_kody_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: sprawdza czy na liscie kodow dla towaru _a sa kody _b lub _c
::   WE: _a - M.refernce
::       _b - KTM
::       _c - kod kreskowy
::   WY: '' - brak kodow na liscie, 'KTM' - istnieje kod KTM, 'KODK' - istnieje kod kreskowy
::  OLD: \m_kody_chk/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_return:='';

HELP.KODK:='m';
MKODK.cntx_psh();
MKODK.index('UNIK');
MKODK.prefix(null,M.ref(),'T');
{? MKODK.first()
||
   MKODK.KTM:=M.KTM;
   MKODK.KODK:=M.KODK;
   M.cntx_psh();
   _return:=exec('mkodk_chk','kody_kresk','P','M');
   M.cntx_pop()
?};
MKODK.cntx_pop();
HELP.KODK:='';

_return


\unik_ean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009]
:: OPIS: kontrola unikalnosci kodow stosowanych kodow kreskowych
::   WE: _a - czego dotyczy 'M'-materialy 'R'-lokalizacje 'K'-pole KOD dla tabeli EANL 'P'-palety
::            'A'-kontola dowolnego wystąpienia
::       _b - kod kreskowy
::       _c - ref danej pozycji (popraw) lub null (dolacz)
::   WY: 1-jest ok 0-niestety nie
::  OLD: \unik_ean/ean.fml
::----------------------------------------------------------------------------------------------------------------------
_ktm:='';
_wyn:=1;
{? _b<>''
||
   {? _a='M' | _a='R' | _a='P' | _a='A'
   || M.cntx_psh();
      M.index('KODK');
      M.prefix(_b,_b);
      _wyn:={? M.first() || _ktm:=M.KTM; (ref_name(_c)='material' & _c<>null & M.ref=_c) || 1 ?};
      {? _wyn
      || MKODK.cntx_psh();
         MKODK.index('KK');
         MKODK.prefix(_b,_b);
         _wyn:={? MKODK.first() & (_a='A' | {? _ktm<>'' || _ktm<>MKODK.M().KTM || 1 ?})
               || {? _a='A'
                  || 0
                  |? (8+($_c))='material' & MKODK.M<>null()
                  || ~(MKODK.M<>_c & MKODK.IL>0)
                  |? _c<>null
                  || 1
                  || MKODK.IL>0
                  ?} & {? ref_name(_c)='mkodk' || _c<>null & MKODK.ref=_c || 1 ?}
               || 1
               ?};
         MKODK.cntx_pop()
      ?};
      M.cntx_pop();
      {? _wyn
      || EANL.cntx_psh();
         EANL.index('EAN');
         EANL.prefix(_b,_b);
         _wyn:={? EANL.first() || _c<>null & EANL.ref=_c || 1 ?};
         EANL.cntx_pop()
      ?};
      {? _wyn
      || PAL.cntx_psh();
         PAL.index('PAL');
         PAL.prefix(_b,_b);
         _wyn:={? PAL.first() | exec('kodkINarch','magdok_palety',_b) || _c<>null & PAL.ref=_c || 1 ?};
         PAL.cntx_pop()
      ?}
   |? _a='K'
   || EANL.cntx_psh();
      EANL.index('KOD');
      EANL.prefix(_b,_b);
      _wyn:={? EANL.first() || _c<>null & EANL.ref=_c || 1 ?};
      EANL.cntx_pop()
   ?}
?};
_wyn


\m_kody_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: dopisuje lub aktualizuje domyslne kody dla kartoteki materialow
::   WE: _a - M.refernece
::       _b - KTM materialu
::       _c - nazwa materialu
::       _d - kod kreksowy materialu
::       [_e] - wpis o zmianie trybu wprowadzania terminu ważności na dostawie:
::              ''-(domyślnie) brak wpisu, wpis w formacie data czas
::   WY: 1-dopisanie lub aktualizacjia powiodla sie, 0-wpp
::  OLD: \m_kody_akt/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=0;
_dtzmtw:={? var_pres('_e')=type_of('') || _e || '' ?};

MKODK.cntx_psh();
MKODK.index('UNIK');
MKODK.prefix(null,_a,'T');
_put:={? MKODK.first() || 1 || MKODK.blank(); 0 ?};
MKODK.KH:=null;
MKODK.M:=_a;
MKODK.D:='T';
MKODK.KTM:=_b;
MKODK.N:=_c;
MKODK.KODK:=_d;
MKODK.IL:=0;
{? MKODK.M<>null & MKODK.OLD<>'T' & (MKODK.OPMOB='' | (_dtzmtw<>'' & _put))
|| _ist:=0;
   _opis:={? _dtzmtw<>''
          || _dtzmtw
          |? MKODK.M().FOMOB<>null
          || ($MKODK.M().FOMOB().FORMULA)()
          || _ist:=1;
             _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
             _op[1]
          ?};
   MKODK.OPMOB:=_opis;
   MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
   {? _ist || obj_del(_op) ?}
?};
_return:={? _put=1 || MKODK.put() || MKODK.add() ?};
MKODK.cntx_pop();

_return


\chk_mkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2009]
:: OPIS: kontrola wypelnienia danych tabeli MKODK
::   WY: ''-jest OK 'pole'-nie jest
::  OLD: \chk_mkod/ean.fml
::----------------------------------------------------------------------------------------------------------------------
{? MKODK.M().IDMOB='A' & MKODK.RSQL<>'' & MKODK.KODK=''
|| FUN.info('Kod identyfikujący dostawy należy podać Kod kreskowy.'@);
   'KODK'
|? MKODK.KTM='' & MKODK.KODK=''
|| FUN.info('Należy podać chociaż jedną z wartości: Indeks, Kod kreskowy.'@);
   'KTM'
|? MKODK.IL<=0 & BEER.EANP
|| FUN.info('Należy podać wartość większą od zera.'@);
   'IL'
|? MKODK.IL<0
|| FUN.info('Należy podać wartość większą lub równą zero.'@);
   'IL'
|? MKODK.IL>0 & MKODK.KODK<>'' & MKODK.M().KODK=''
|| FUN.info('Kod kreskowy dla ilości zbiorczej można wprowadzić wyłącznie\n'
    'jeśli dla materiału został podany kod kreskowy.'@);
   {? BEER.EANP || 'KTM' || 'KODK' ?}
|? (MKODK.IL>0 | (MKODK.M().IDMOB='A' & MKODK.RSQL<>''))
 & ~exec('unik_ean','kody_kresk','M',MKODK.KODK,{? (1+menu_txt())='P' || MKODK.ref() || null ?})
|| FUN.info('Podany kod kreskowy wykorzystano w systemie.\nNależy podać inny.'@);
   {? BEER.EANP || 'KTM' || 'KODK' ?}
|| ''
?}


\kod_obcy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2008]
:: OPIS: Formula wyszukuje kod obcy kontrahenta
::   WE: _a - M.ref ; _b - KH.ref
::   WY: kod obcy
::  OLD: \kod_obcy/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:='';
MKODK.cntx_psh();
MKODK.index('UNIK');
MKODK.prefix(_b,_a,'N');
{? MKODK.first() || _kod:=MKODK.KTM ?};
MKODK.cntx_pop();
_kod


\wyb_etykiety
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: wybór etykiety dla zdefiniowanej drukarki kodów kreskowych
::   WY: URZ_LAB.ref
::  OLD: \wyb_etykiety/skid_kkr.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
{? PAR_WYDR.URZ_LAB<>null
|| _wyn:=PAR_WYDR.URZ_LAB
|? PAR_WYDR.TYPDR<>null & PAR_WYDR.URZ_LAB=null
|| URZ_LAB.cntx_psh;
   _wer:=URZ_LAB.mk_sel('Definicje etykiet'@);
   URZ_LAB.win_fld(_wer,,'TRYB',,,4,,,'Definicja'@);
   URZ_LAB.win_fld(_wer,,'KOD',,,35,,,'Kod etykiety'@);
   URZ_LAB.win_fld(_wer,,'OPIS',,,40,,,'Opis'@);
   URZ_LAB.win_fld(_wer,,'ROZM_X',,,10,,,'Szerokość'@);
   URZ_LAB.win_fld(_wer,,'ROZM_Y',,,10,,,'Wysokość'@);
   URZ_LAB.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
   URZ_LAB.win_sel(_wer);

   URZ_LAB.index('URZ_LAB'); URZ_LAB.prefix(PAR_WYDR.TYPDR().URZ_KOM);
   {? URZ_LAB.select()
   || _wyn:=URZ_LAB.ref
   || FUN.info('Nie wybrano etykiety.'@)
   ?};
   URZ_LAB.cntx_pop
?};
_wyn


\kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [8.10]
:: OPIS: Formuła generuje ciąg znaków który jest drukowany czcionką kodów kreskowych. Ciąg znaków jest generowany
::       na podstawie kodu kreskowego (parametr wejściowy) oraz liczby kontrolnej (dla standardu Code 128).
:: WOLANA: drukuslk.rpm, druktowk.rpm, ...
::   WE: _a - ciąg znaków kodu do wydrukowania
::   WY: ciąg znaków w przypadku powodzenia operacji
::       wpp '' oraz komunikat błędu w postaci echa na dolnym pasku
::  OLD: \kod/skid_kkr.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=''
|| ''
|? PAR_WYDR.FONTKRES*'39'>0
|| '*'+_a+'*'
|? PAR_WYDR.FONTKRES*'128'
|| %136+_a+exec('kontrol','kody_kresk',_a)+%138
|| echo('W parametrach wydruku wskazano nieobsługiwany system kodów kreskowych.'@);
   ''
?}


\kontrol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [8.10]
:: OPIS: Formuła wylicza liczbę kontrolną dla kodów kreskowych standardu Code 128
:: WOLANA: ('kod','kod_kresk')
::   WE: _a - string dla którego należy wyliczyć liczbę kontrolną
::   WY: liczba kontrolna dla standardu Code 128
::  OLD: \kontrol/skid_kkr.fml
::----------------------------------------------------------------------------------------------------------------------
_pozycja:=1;
_kontrol:=104;
{! |? _kontrol+=_pozycja*(%((_pozycja+_a)+1)-32);
      _pozycja+=1;
      _pozycja<=+_a
!};
_kontrol:=(_kontrol%*103)+32;
%_kontrol


\m_kod_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed szukaj wg kodu okna WER_ZAM tabeli M
::   WY: 1
::  OLD: \m_kod_szuk/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_kh_ref:={? exec('get','#params',100100,2)='T' || BEER.KH || null ?};
_m_rodz:=POMOC.RODZ;

undefine();
define('KOD','','Kod'@,'Kod lub fragment kodu wg którego szukany jest materiał'@,50,50);
def_btn('text='+'&Zapisz'@,"'key:F2'");
def_btn('text='+'&Anuluj'@,"'key:Esc'");

{? def_edit("chk_rec()",'Szukany kod'@)
||
:: wyszukiwanie

   _old_m:=M.win_dict('?');
   _old_ma:=M.actions('SEL');
   _old_z:=ZAKR.MATU;
   _old_kh:=KH.win_dict('?');
   _old_kha:=KH.actions('WER');
   ZAKR.MATU:='T';
   M.win_dict('SEL');
   M.actions('SEL','T');
   KH.win_dict('WER');
   KH.actions('WER','T');
   MKODK.cntx_psh;
   MKODK.clear();
   MKODK.f_clear(1);

   _sort:='KTM,KODK';
   _from:={? _m_rodz='' || '' || ' join M using("MKODK".M,M.reference)'?};
   _where:=
      '(lower("MKODK".KTM) like ''%:_a%'' or lower("MKODK".KODK) like ''%:_a%'')'+
      {? _kh_ref=null || '' || ' and "MKODK".KH=:_b' ?}+
      {? POMOC.MGR=null || '' || ' and "M".MGR=:_c' ?}+
      {? _m_rodz=''   || '' || ' and M.RODZ='':_d''' ?};
   MKODK.f_set(_sort,_from,_where,-DEFINE.KOD,_kh_ref,POMOC.MGR,_m_rodz);

   {? MKODK.f_first()=0
   ||
      FUN.info('Brak materiału o kodzie %1.'@[DEFINE.KOD])
   ||
      {? MKODK.f_get()
      ||
         _mref:=MKODK.M;
         _cont:=_one:=1;
         {!
         |? {? _cont:=MKODK.f_get() || _one:=MKODK.M=_mref ?};
            _cont=1 &_one=1 & MKODK.f_next()
         !};
         {? _cont=1
         ||
            {? _one=1
            ||
::          przypadek jesli znaleziono tylko jeden material lub usluge
               {? ~
                  {? M.f_active
                  || M.f_seek(MKODK.M)
                  || M.seek(MKODK.M)
                  ?}
               ||
                  FUN.info('Indeks nie występuje w bieżącym zakresie.'@)
               ?}
            ||
::          przypadek jesli znaleziono wiele materialow lub uslug
               MKODK.win_edit('REDKH');
               MKODK.win_sel('WERSZUK');
               MKODK.hdr_sel();
               M.cntx_psh();
               _sel:=MKODK.select();
               M.cntx_pop();
               {? _sel<>0
               ||
                  {? ~
                     {? M.f_active
                     || M.f_seek(MKODK.M)
                     || M.seek(MKODK.M)
                     ?}
                  ||
                     FUN.info('Indeks nie występuje w bieżącym zakresie.'@)
                  ?}
               ?}
            ?}
         ?}
      ?}
   ?};
   MKODK.f_clear();
   MKODK.cntx_pop;
   M.win_dict(_old_m);
   M.actions('SEL',_old_ma);
   ZAKR.MATU:=_old_z;
   KH.win_dict(_old_kh);
   KH.actions('WER',_old_kha)
?};

undefine();
1


\mkodk_werkh_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wyswietl okna WERKH tabli MKODK
::  OLD: \mkodk_werkh_wys/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
MKODK.win_edit('REDKHALL');
MKODK.get();
MKODK.display()


\blzl_sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: blank dla zlecenia dla SCEAN
::  OLD: \blzl_sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZL.KTM<>null & ZL.KTM().IDMOB='Z'
|| exec('mkodkKODK','kody_kresk',ZL.KTM,'ZL.SCEAN')
|| ''
?}


\pwzl_sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyświetleniem kodu identyfikacyjnego
::  OLD: \pwzl_sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=(2+cur_kwin())='e_';
_wined:=ZL.win_edit('?');
{? _edit & _wined<>'' & ZL.KTM<>null & ZL.KTM().IDMOB='Z'
|| ZL.win_efml(_wined,,'SCEAN',,'ICON_BEFORE',"'xwin16.png:167'");
   ''
|? _edit & _wined<>''
|| ZL.win_efml(_wined,,'SCEAN',,'ICON_BEFORE',"''");
   exec('findfnv','#color')
|| ''
?}


\pwzl2sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyświetleniem kodu identyfikacyjnego
::  OLD: \pwzl2sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=(2+cur_kwin())='e_';
_wined:=ZL.win_edit('?');
{? _edit & _wined<>'' & ZL.ZLEAN<>''
|| ZL.win_efml(_wined,,'ZLEAN',,'ICON_BEFORE',"'xwin16.png:167'");
   ''
|? _edit & _wined<>''
|| ZL.win_efml(_wined,,'ZLEAN',,'ICON_BEFORE',"''");
   exec('findfnv','#color')
|| ''
?}


\blzl2sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: blank dla zlecenia dla ZLEAN
::  OLD: \blzl2sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZL.KTM<>null & ZL.KTM().IDMOB='Z'
|| ZL.SCEAN
|| exec('mkodkKODK','kody_kresk',ZL.KTM,'ZL.ZLEAN')
?}


\addscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: funkcja przypisujaca kod identyfikujacy dostawe
::   WE: [_a] 0(domyslnie)-klawisz dla DK 1-okienko dla INY-inwentaryzacji 2-DK rozchodowe 3-DK_L 4-EANP 5-TR_ZLM
::            -1-INP
::       [_b] - bez podanego kodu SCEAN domyslnie brak
::  OLD: \addscean/ean2.fml
:: ~OST: INWINBTN
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};

_wyn:='';

VAR_DEL.delete('__newsea');
__newsea:=tab_tmp(3,'TREE','TREE_REF','galazka'
           ,'OPI','STRING[255]','Etykieta'
           ,'SCEAN','STRING[128]',''
           ,'TYP','STRING[1]',''
           ,'REF','STRING[16]',''
           ,'LOK','STRING[30]',''
           ,'TW','DATE',''
           ,'ILE','REAL','');

_win_sel:=__newsea.mk_sel('Kod identyfikujące'@,'P',,'#kodyidmob',,,__newsea.size(),1);

__newsea.win_fld(_win_sel,,'OPI',,,80,,1,'');
__newsea.win_fld(_win_sel,,'SCEAN',,,30,,1,'Kod identyfikacyjny'@);
{? _a=3
|| __newsea.win_fld(_win_sel,,'LOK',,,15,,1,'Lokalizacja'@);
   __newsea.win_fld(_win_sel,,'TW',,,10,,1,'Termin ważności'@);
   __newsea.win_fld(_win_sel,,'ILE',,,12,3,1,'Stan dostępny'@)
?};

{? ~_a
|| __newsea.win_act(_win_sel,,'Formuła','&Wybierz'@@,,,$'exec(\'wybscean\',\'kody_kresk\')',,,1,,,'W');
   __newsea.btn_sopt(_win_sel,
   __newsea.win_btn(_win_sel,'text=%1, panel=right, align=begin'['&Wybierz'@],'menu:W',,,,,,'noempty'),'default=1')
|? _a>0 | _a=-1
|| __newsea.win_act(_win_sel,,'Formuła','&Wybierz'@@,,,$'exec(\'wybscean\',\'kody_kresk\',1)',,,,,,'W');
   __newsea.btn_sopt(_win_sel,
   __newsea.win_btn(_win_sel,'text=%1, panel=right, align=begin'['&Wybierz'@],'menu:W',,,,,,'noempty'),'default=1')
?};
{? (_a=1 & INY.M().IDMOB='D') | (_a=5 & TR_ZLM.TR_ZL().M().IDMOB='D') | (_a=-1 & INP.M().IDMOB='D')
|| __newsea.win_act(_win_sel,,'Formuła','&Nowy kod'@@,,,$'exec(\'ad2scean\',\'kody_kresk\',1)',,,1,,,'N');
   __newsea.win_btn(_win_sel,'text=%1, panel=bottom, align=begin'['&Nowy kod'@],'menu:N',,,,,,'noempty')
?};

__newsea.tr_fml(_win_sel,,"{? _a || {? __newsea.TREE=0 || 1 || _a ?} || _a ?}");
__newsea.win_fml(_win_sel,,'OPI',,'ICON_BEFORE',"
         {? __newsea.TYP='B' || 'xwin16.png:52'
         |? __newsea.TYP='N' || 'xwin16.png:101'
         || ''
         ?}
      ");
__newsea.win_sel(_win_sel);

__newsea.fld_fml('TW','DISPLAY_FORMAT',"{? ~__newsea.TREE || 'empty=1' || 'empty=0' ?}");

{? _a>=2 & _a<4
|| SLD.index('MG_M');
   {? _a=2 || SLD.prefix(DK.N().MAG,DK.M) || SLD.prefix(DK_L.MG,DK_L.M) ?};
   {? SLD.first()
   || _sum:=0;
      __newsea.clear();
      __newsea.blank();
      __newsea.TREE:=null;
      __newsea.OPI:='Identyfikatory dostaw w magazynie'@;
      __newsea.SCEAN:='';
      __newsea.TYP:={? _a=2 || 'D' || 'R' ?};
      __newsea.REF:='';
      _tree:={? __newsea.add(1) || __newsea.ref() || null ?};
      {? _tree<>null
      || {!
         |? _opis:={? SLD.SL().M().FOMOB<>null
                   || ($SLD.SL().M().FOMOB().FORMULA)()
                   || _op:=exec('formopis','kody_kresk',SLD.SL().M().IDMOB
                       ,exec('FindInSet','#table','MKODK','KK',SLD.SCEAN,SLD.SCEAN,"MKODK.RSQL",,,''),-1
                       ,,SLD.SL().M().IDZP);
                      _bop:=_op[1]; obj_del(_op); _bop
                   ?};
            __newsea.blank();
            __newsea.TREE:=_tree;
            __newsea.OPI:=_opis;
            __newsea.SCEAN:=SLD.SCEAN;
            __newsea.TYP:={? _a=2 || 'D' || 'R' ?};
            __newsea.REF:=$SLD.ref();
            __newsea.LOK:=SLD.SL().EANL().KOD;
            __newsea.TW:=SLD.SL().TW;
            __newsea.ILE:={? _a=3 || SLD.IL-exec('ilwydsce','magazyn_stan',SLD.SL().MG,SLD.SL().M,SLD.SCEAN) || 0 ?};
            _sum+=__newsea.ILE;
            __newsea.add(1);
            SLD.next()
         !};
         {? __newsea.first() || __newsea.ILE:=_sum; __newsea.put(1) ?}
      ?}
   ?}
|| MKODK.index('BEZ');
   MKODK.prefix(null);
   {? {? _a=1 || INY.M().IDMOB='D' || 1 ?} & MKODK.first()
   || __newsea.clear();
      __newsea.blank();
      __newsea.TREE:=null;
      __newsea.OPI:='Nieprzypisane kody kreskowe'@;
      __newsea.SCEAN:='';
      __newsea.TYP:='B';
      __newsea.REF:='';
      _tree:={? __newsea.add(1) || __newsea.ref() || null ?};
      {? _tree<>null
      || {!
         |? _opis:={? MKODK.M().FOMOB<>null
                   || ($MKODK.M().FOMOB().FORMULA)()
                   || _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,-1,,MKODK.M().IDZP);
                      _bop:=_op[1]; obj_del(_op); _bop
                   ?};
            __newsea.blank();
            __newsea.TREE:=_tree;
            __newsea.OPI:=_opis;
            __newsea.SCEAN:=MKODK.KODK;
            __newsea.TYP:='B';
            __newsea.REF:=$MKODK.ref();
            {? _b='' | _b<>MKODK.KODK || __newsea.add(1) ?};
            MKODK.next()
         !}
      ?}
   ?};
   {? (_a=1 & INY.M<>null()) | (_a=-1 & INP.M<>null())
   || {? _a=1
      || _czydst:=INY.M().IDMOB='D';
         _mat:=INY.M
      || _czydst:=INP.M().IDMOB;
         _mat:=INP.M
      ?};
      MKODK.index('M');
      MKODK.prefix(_mat);
      {? MKODK.first()
      || __newsea.clear();
         __newsea.blank();
         __newsea.TREE:=null;
         __newsea.OPI:='Kody identyfikujące dostawę'@;
         __newsea.SCEAN:='';
         __newsea.TYP:='A';
         __newsea.REF:='';
         _tree:={? __newsea.add(1) || __newsea.ref() || null ?};
         {? _tree<>null
         || {!
            |? {? MKODK.D<>'T'
               || _opis:={? MKODK.M().FOMOB<>null
                         || ($MKODK.M().FOMOB().FORMULA)()
                         || _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,-1,,MKODK.M().IDZP);
                            _bop:=_op[1]; obj_del(_op); _bop
                         ?};
                  __newsea.blank();
                  __newsea.TREE:=_tree;
                  __newsea.OPI:=_opis;
                  __newsea.SCEAN:=MKODK.KODK;
                  __newsea.TYP:='B';
                  __newsea.REF:=$MKODK.ref();
                  __newsea.add(1)
               ?};
               MKODK.next()
            !}
         ?}
      ?}
   |? _a=5 & TR_ZLM.TR_ZL().M<>null
   || _czydst:=TR_ZLM.TR_ZL().M().IDMOB='D';
      MKODK.index('M');
      MKODK.prefix(TR_ZLM.TR_ZL().M);
      {? MKODK.first()
      || __newsea.clear();
         __newsea.blank();
         __newsea.TREE:=null;
         __newsea.OPI:='Kody identyfikujące dostawę'@;
         __newsea.SCEAN:='';
         __newsea.TYP:='A';
         __newsea.REF:='';
         _tree:={? __newsea.add(1) || __newsea.ref() || null ?};
         {? _tree<>null
         || {!
            |? {? MKODK.D<>'T'
               || _opis:={? MKODK.M().FOMOB<>null
                         || ($MKODK.M().FOMOB().FORMULA)()
                         || _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,-1,,MKODK.M().IDZP);
                            _bop:=_op[1]; obj_del(_op); _bop
                         ?};
                  __newsea.blank();
                  __newsea.TREE:=_tree;
                  __newsea.OPI:=_opis;
                  __newsea.SCEAN:=MKODK.KODK;
                  __newsea.TYP:='B';
                  __newsea.REF:=$MKODK.ref();
                  __newsea.add(1)
               ?};
               MKODK.next()
            !}
         ?}
      ?}
   ?}
?};

__newsea.clear();
__newsea.first();
_wyb:=__newsea.select();
{? _a=0
|| _wyn:='activate:button'
|? _a=1 & _wyb
|| _rsql:=exec('FindAndGet','#table',MKODK,__newsea.REF,,"RSQL",'');
   {? (5+_rsql)='dokma'
   || INY.DK_C:=exec('FindAndGet','#table',DK,_rsql,,"DK_C",null())
   |? (5+_rsql)='dokce'
   || INY.DK_C:=exec('FindAndGet','#table',DK_C,_rsql,,"ref()",null())
   ?};
   {? INY.DK_C<>null()
   || {! _ii..10 |! ($('ATR.WAR%1'[form(_ii,-2,0,'99')]))():=($('INY.DK_C().WAR%1'[form(_ii,-2,0,'99')]))() !}
   ?};
   _wyn:=__newsea.SCEAN
|? _a=-1 & _wyb
|| _rsql:=exec('FindAndGet','#table',MKODK,__newsea.REF,,"RSQL",'');
   {? (5+_rsql)='dokma'
   || INP.DK_C:=exec('FindAndGet','#table',DK,_rsql,,"DK_C",null())
   |? (5+_rsql)='dokce'
   || INP.DK_C:=exec('FindAndGet','#table',DK_C,_rsql,,"ref()",null())
   ?};
   {? INP.DK_C<>null()
   || {! _ii..10 |! ($('ATR.WAR%1'[form(_ii,-2,0,'99')]))():=($('INP.DK_C().WAR%1'[form(_ii,-2,0,'99')]))() !}
   ?};
   _wyn:=__newsea.SCEAN
|? _a=5
|| {? _wyb || _wyn:=__newsea.SCEAN || _wyn:=TR_ZLM.SCEAN ?}
|? _a>=2
|| _wyn:={? _wyb || __newsea.SCEAN || '' ?}
?};
VAR_DEL.delete('__newsea');
_wyn


\wybscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wybor kodu identyfikujacego
::   WE: [_a] - 0(domyslnie) z aktualizacja kodow 1-bez przypisywania kodow
::   WY: 1-wybrano 0-blad
::  OLD: \wybscean/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};

{? ~__newsea.TREE
|| FUN.info('Należy wybrać kod indentyfikujący dostawę z listy.'@);
   0
|? __newsea.TYP='B' & __newsea.TREE=null
|| FUN.info('Należy wybrać jeden z nieprzypisanych kodów.'@);
   0
|? __newsea.TYP='B' & FUN.ask('Czy przypisać kod kreskowy do dostawy?'@)
|| {? ~_a
   || _rsql:={? HELP.POP || $DK.ref() || $ND.ref() ?};
      exec('mkodkadd','kody_kresk',DK.M,__newsea.SCEAN,_rsql);
      DK.SCEAN:=__newsea.SCEAN
   ?};
   sel_exit()
|? (__newsea.TYP='N' | __newsea.TYP='M')  & FUN.ask('Czy wygenerować nowy kod kreskowy dla dostawy?'@)
|| {? __newsea.TYP='N' & ~_a
   || _rsql:={? HELP.POP || $DK.ref() || $ND.ref() ?};
      _scean:=exec('mkodkKODK','kody_kresk',DK.M);
      exec('mkodkadd','kody_kresk',DK.M,_scean,_rsql);
      DK.SCEAN:=_scean
   |? __newsea.TYP='N' & _a=1 & INY.M<>null
   || _scean:=exec('mkodkKODK','kody_kresk',INY.M);
      exec('mkodkadd','kody_kresk',INY.M,_scean,'')
   |? __newsea.TYP='M' & EANP.M<>null
   || _scean:=exec('mkodkKODK','kody_kresk',null(),'MKODK.KODK');
      exec('mkodkadd','kody_kresk',null,_scean,'');
      __newsea.clear();
      __newsea.blank();
      __newsea.SCEAN:=_scean;
      __newsea.TYP:='B';
      __newsea.add(1)
   ?};
   sel_exit()
|? __newsea.TYP='D' & FUN.ask('Czy przypisać kod identyfikujący dostawę?'@)
|| DK.SCEAN:=__newsea.SCEAN;
   sel_exit()
|? __newsea.TYP='R' & FUN.ask('Czy przypisać kod identyfikujący dostawę?'@)
|| DK_L.SCEAN:=__newsea.SCEAN;
   {? (3+__newsea.REF)='sld' & (DK_L.M().SETW='P' | exec('get','#params',600200,2)='T')
   || {? DK_L.IL=0 || DK_L.IL:=__newsea.ILE ?};
      DK_L.LOK:=exec('FindAndGet','#table',SLD,__newsea.REF,,"SL().EANL",DK_L.LOK);
      DK_L.TW:=DK_L.TWDO:=__newsea.TW;
      {? DK_L.M().SETW='P' || exec('pobierzDst','magdok_wspolne',DK_L.SCEAN) ?}
   ?};
   sel_exit();
   ''
|| 0
?}


\ad2scean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: dodaje nowy kod identyfikujacy dostawe
::   WE: _a - 0-DK 1-INX
::  OLD: \ad2scean/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy przypisać kod kreskowy do dostawy?'@)
|| {? ~_a
   || _rsql:={? HELP.POP || $DK.ref() || $ND.ref() ?};
      exec('mkodkadd','kody_kresk',DK.M,__newsea.SCEAN,_rsql);
      DK.SCEAN:=__newsea.SCEAN
   || _rsql:={? (1+menu_pth())='P' || $INY.ref() || $INX.ref() ?};
      _scean:=exec('mkodkKODK','kody_kresk',INY.M);
      exec('mkodkadd','kody_kresk',INY.M,_scean,_rsql);
      INY.SCEAN:=_scean;
      __newsea.clear();
      __newsea.blank();
      __newsea.SCEAN:=_scean;
      __newsea.add(1)
   ?};
   sel_exit()
?}


\mkodkadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: dołączenie/update kodu kreskowego
::   WE: _a - ref M lub null
::       _b - kod kreskowy
::       _c - ref SQL
::       [_d] - 1-usunięcie 0-add/update (domyślnie) 2-aktualizacja RSQL 3-aktualizacja-RSQL wg starego PRDK
::       [_e] - domyslna identyfikacja dla starych dostaw
::   WY: 1-operacja zakończona sukcesem 0-nie
::  OLD: \mkodkadd/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=4 || {? type_of(_d)<>1 || _d:=0 ?} || _d:=0 ?};
{? _>=5 || {? type_of(_e)<>1 || _e:=0 ?} || _e:=0 ?};

_wyn:=0;
MKODK.cntx_psh();
MKODK.index('KK');
MKODK.prefix(_b,_b);
{? _b<>'' & MKODK.first() & (MKODK.OLD='N' | (_d=1 & _e=1) | _d>1)
|| {? ~_d
   || MKODK.M:=_a;
      {? MKODK.KTM='' || MKODK.KTM:=_b ?};
      MKODK.N:={? MKODK.M<>null || MKODK.M().N || '' ?};
      MKODK.IDMOB:={? MKODK.M<>null || MKODK.M().IDMOB || 'N' ?};
      MKODK.RSQL:=_c;
      {? MKODK.M<>null
      || _ist:=0;
         MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                      || ($MKODK.M().FOMOB().FORMULA)()
                      || _ist:=1;
                         _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                         _op[1]
                      ?};
         MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
         {? _ist || obj_del(_op) ?}
      || MKODK.OPMOB:='';
         MKODK.OPMOB2:=''
      ?};
      _wyn:=MKODK.put(1)
   ||
::    usuniecie MKODK
      {? _d>1 & _c<>'' & MKODK.IDMOB='D'
       & {? _d=2
         || (_rsql:=exec('lastRSQL','magdok_wspolne',MKODK.KODK,_c); _rsql<>_c)
         || _rsql:=_c; MKODK.RSQL<>_rsql
         ?}
      || MKODK.RSQL:=_rsql;
         _ist:=0;
         MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                      || ($MKODK.M().FOMOB().FORMULA)()
                      || _ist:=1;
                         _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                         _op[1]
                      ?};
         MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
         {? _ist || obj_del(_op) ?};
         _wyn:=MKODK.put(1)
      |? _c<>'' & MKODK.IDMOB='D' & MKODK.M().IDZP & (_rsql:=exec('lastRSQL','magdok_wspolne',MKODK.KODK,_c); _rsql<>'')
      || MKODK.RSQL:=_rsql;
         _ist:=0;
         MKODK.OPMOB:={? MKODK.M().FOMOB<>null()
                      || ($MKODK.M().FOMOB().FORMULA)()
                      || _ist:=1;
                         _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                         _op[1]
                      ?};
         MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
         {? _ist || obj_del(_op) ?};
         _wyn:=MKODK.put(1)
      || _rsql:=exec('lastRSQL','magdok_wspolne',MKODK.KODK,_c);
         {? _rsql<>'' & exec('FindAndGet','#table',DK,_rsql,,"SCEAN=@.MKODK.KODK & Z='T'",0)
         || _wyn:=1
         || _wyn:=MKODK.del(,1)
         ?}
      ?}
   ?}
|? _b<>'' & ~_d
|| MKODK.blank();
   MKODK.M:=_a;
   MKODK.KODK:=_b;
   MKODK.KH:=null;
   MKODK.KTM:=_b;
   MKODK.N:={? MKODK.M<>null || MKODK.M().N || '' ?};
   MKODK.IL:=1;
   MKODK.D:='N';
   MKODK.IDMOB:={? MKODK.M<>null || MKODK.M().IDMOB || 'N' ?};
   MKODK.RSQL:={? _e || $MKODK.M || _c ?};
   MKODK.OLD:={? _e || 'T' || 'N' ?};
   {? MKODK.M<>null & MKODK.OLD<>'T'
   || _ist:=0;
      MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                   || ($MKODK.M().FOMOB().FORMULA)()
                   || _ist:=1;
                      _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                      _op[1]
                   ?};
      MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
      {? _ist || obj_del(_op) ?}
   |? MKODK.OLD='T'
   || _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
      MKODK.OPMOB:=_op[1];
      MKODK.OPMOB2:=_op[2];
      obj_del(_op)
   || MKODK.OPMOB:='';
      MKODK.OPMOB2:=''
   ?};
   {? ~(MKODK.M().IDMOB='A') & (5+MKODK.RSQL)='dokce'
   || _wyn:=1
   || _wyn:=MKODK.add(1)
   ?}
|? _d
|| _wyn:=1
?};
MKODK.cntx_pop();
_wyn


\formopis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: domyślne formuły na opis
::   WE: _a - typ IDMOB
::       _b - ref SQL
::       [_c] - 0(domyslnie) Merit 1-urządzenie mobilne, -1 Merit bez ID typu 2-dla EANP
::       [_d] - dla _c=2 __infean TREE
::       [_e] - 1-dostawy z partiami 0(domyślnie)-nie
::   WY: opis lub pusty string - tabela
:: UWAGA. Funkcja wykorzystywana również w przesyłaniu danych na urzadzenie mobilne, gdzie separatorem są znaki:
::        `~`
::  OLD: \formopis/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};
{? _>=4 || {? type_of(_d)<>7 || _d:=null ?} || _d:=null ?};
_idzp:={? var_pres('_e')=type_of(0) || _e || 0 ?};

_sep:={? _c=1 || '`~`' || ', ' ?};

_res:=obj_new(2);
_res[1]:=_res[2]:='';
_wyn:='';

{? (8+_b)='material' | (2+_b)='in'
|| {? _a='D' || _wyn:={? _c=-1 | _c=2 || '' || {? _idzp || 'DOSTAWA PARTII.' || 'DOSTAWA.' ?} ?}
   |? _a='A' || _wyn:={? _c=-1 | _c=2 || '' || 'ATRYBUTY DOSTAWY.' ?}
   |? _a='P' || _wyn:={? _c=-1 | _c=2 || '' || 'PARTIA PRODUKCYJNA.' ?}
   |? _a='Z' || _wyn:={? _c=-1 | _c=2 || '' || 'ZLECENIE.' ?}
   ?};
   {? _c=2
   || __infean.clear();
      __infean.TREE:=_d;
      __infean.OPI:='DOSTAWY BEZ IDENTYFIKACJI';
      __infean.WAR:='BRAK';
      __infean.add(1)
   || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'dostawa bez identyfikacji'
   ?}
|? _a='D'
|| _wyn:={? _c=-1 | _c=2 || '' || {? _idzp || 'DOSTAWA PARTII.' || 'DOSTAWA.' ?} ?};
   {? _b<>'' & (~_idzp | (5+_b)<>'zparn')
   || _mask:=form(8+_b);
      ND.cntx_psh();
      DK.cntx_psh();
      DK_C.cntx_psh();
      {? (5+_mask)='nagdo'
      || ND.use(_mask);
         ND.clear();
         {? ND.seek(_b)
         || {? _c=2
            || __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='a.DATA DOSTAWY';
               __infean.WAR:=form(ND.D);
               __infean.add(1);
               __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='b.TYP DOKUMENTU';
               __infean.WAR:=ND.TYP().T;
               __infean.add(1);
               __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='c.KONTRAHENT';
               __infean.WAR:=ND.KH().KOD+' - '+ND.KH().SKR;
               __infean.add(1);
               __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='d.NR DOKUMENTU';
               __infean.WAR:=$ND.NR;
               __infean.add(1);
               __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='e.POZYCJA';
               __infean.WAR:='0';
               __infean.add(1);
               __infean.clear();
               __infean.TREE:=_d;
               __infean.OPI:='f.MAGAZYN';
               __infean.WAR:=ND.MAG().SYM;
               __infean.add(1)
            || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'data dostawy> '+form(ND.D)
                   +_sep+'typ dokumentu> '+ND.TYP().T
                   +_sep+'kontrahent> '+ND.KH().KOD
                   +_sep+'nr dokumentu> '+$ND.NR
                   +_sep+'pozycja> '+'0'
                   +_sep+'magazyn> '+ND.MAG().SYM
            ?}
         ?}
      |? (5+_mask)='dokma'
      || _prdk:=_b;
         ND.use('nagdo'+(_mask+3));
         DK.use(_mask);
         DK.clear();
         {? DK.seek(_b)
         || {? DK.N().TYP().INW='I' &  DK.N().INN='T' & DK.SCEAN<>''
            || _prdk:=exec('lastRSQL','magdok_wspolne',DK.SCEAN,_b)
            ?};
            _mask:=form(8+_prdk);
            {? _prdk<>'' & _prdk<>_b
            || {? DK.name()<>_mask
               || ND.use('nagdo'+(_mask+3));
                  DK.use(_mask)
               ?};
               DK.clear();
               _oki:=DK.seek(_prdk)
            || _oki:=1
            ?};
            {? _oki
            || _dost:={? DK.N().Z='N' & DK.N().TYP().P='T' || ND.D || DK.DOST ?};
               _numero:=102;
               {? _c=2
               || __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='a.DATA DOSTAWY';
                  __infean.WAR:=form(_dost);
                  __infean.add(1);
                  __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='b.TYP DOKUMENTU';
                  __infean.WAR:=DK.N().TYP().T;
                  __infean.add(1);
                  __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='c.KONTRAHENT';
                  __infean.WAR:=DK.N().KH().KOD+' - '+DK.N().KH().SKR;
                  __infean.add(1);
                  __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='d.NR DOKUMENTU';
                  __infean.WAR:=$DK.N().NR;
                  __infean.add(1);
                  __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='e.POZYCJA';
                  __infean.WAR:=$DK.P;
                  __infean.add(1);
                  __infean.clear();
                  __infean.TREE:=_d;
                  __infean.OPI:='f.MAGAZYN';
                  __infean.WAR:=ND.MAG().SYM;
                  {? DK.M().SETW='P'
                  || _numero+=1;
                     __infean.clear();
                     __infean.TREE:=_d;
                     __infean.OPI:='g.TERMIN';
                     __infean.WAR:=$DK.TW;
                     __infean.add(1)
                  ?};
                  {? _idzp & DK.PARTIA<>null()
                  || __infean.clear();
                     __infean.TREE:=_d;
                     __infean.OPI:={? DK.M().SETW='P' || _numero+=1; 'h.PARTIA' || 'g.PARTIA' ?};
                     __infean.WAR:=DK.PARTIA().SYM;
                     __infean.add(1)
                  ?};
                  {? ref_name(DK.DK_C)<>'' || DK_C.use(ref_name(DK.DK_C)) ?};
                  {? DK.DK_C<>null() & DK.DK_C().M_ATR<>null()
                  || DK_C.prefix();
                     {? DK_C.seek(DK.DK_C)
                     || _i:=0;
                        {!
                        |? _i+=1;
                           {? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                           || {? _c=2
                              || __infean.clear();
                                 __infean.TREE:=_d;
                                 __infean.OPI:=(%(_numero+_i))+'.'+($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))();
                                 __infean.WAR:=($('DK_C.WAR'+form(_i,-2,0,'99')))();
                                 __infean.add(1)
                              ?};
                              _i<10
                           || 0
                           ?}
                        !}
                     ?}
                  ?}
               || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'data dostawy> '+form(_dost)
                      +_sep+'typ dokumentu> '+DK.N().TYP().T
                      +_sep+'kontrahent> '+DK.N().KH().KOD
                      +_sep+'nr dokumentu> '+$DK.N().NR
                      +_sep+'pozycja> '+$DK.P
                      +_sep+'magazyn> '+DK.N().MAG().SYM
                      +{? DK.M().SETW='P'
                       || _sep+'termin> '+$DK.TW
                       || ''
                       ?}
                      +{? _idzp & DK.PARTIA<>null()
                       || _sep+'partia> '+DK.PARTIA().SYM
                       || ''
                       ?};
                  {? ref_name(DK.DK_C)<>'' || DK_C.use(ref_name(DK.DK_C)) ?};
                  {? DK.DK_C<>null() & DK.DK_C().M_ATR<>null()
                  || DK_C.prefix();
                     {? DK_C.seek(DK.DK_C)
                     || _i:=0;
                        {!
                        |? _i+=1;
                           {? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
                           || _wyn+={? _i=1 & (_c=-1 | _c=2)
                                    || ''
                                    || _sep
                                    ?}+($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))()
                                      +'> '+($('DK_C.WAR'+form(_i,-2,0,'99')))();
                              _i<10
                           || 0
                           ?}
                        !}
                     ?}
                       ?}
               ?}
            ?}
         ?}
      ?};
      ND.cntx_pop();
      DK.cntx_pop();
      DK_C.cntx_pop()
   |? _b<>'' & (5+_b)='zparn'
   || _mask:=form(8+_b);
      ZPARN.cntx_psh();
      ZPARN.use(_mask);
      ZPARN.clear();
      {? ZPARN.seek(_b)
      || {? _c=2
         || __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='a.SYMBOL PARTII';
            __infean.WAR:=form(ZPARN.SYM);
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='b.NUMER PARTII';
            __infean.WAR:=$ZPARN.NR;
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='c.OPIS';
            __infean.WAR:=ZPARN.OPIS;
            __infean.add(1)
         || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'symbol partii> '+form(ZPARN.SYM)
                +_sep+'numer partii> '+($ZPARN.NR)
                +_sep+'opis> '+ZPARN.OPIS
         ?}
      ?};
      ZPARN.cntx_pop()
   ?}
|? _a='A'
|| _wyn:={? _c=-1 | _c=2 || '' || 'ATRYBUTY DOSTAWY.' ?};
   {? _b<>'' & (5+_b)='dokce'
   || _mask:=form(8+_b);
      DK_C.cntx_psh();
      DK_C.use(_mask);
      DK_C.clear();
      {? DK_C.seek(_b)
      || {? DK_C.M_ATR<>null
         || _i:=0;
            {!
            |? _i+=1;
               {? ($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')))()<>null
               || {? _c=2
                  || __infean.clear();
                     __infean.TREE:=_d;
                     __infean.OPI:=(%(96+_i))+'.'+($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))();
                     __infean.WAR:=($('DK_C.WAR'+form(_i,-2,0,'99')))();
                     __infean.add(1)
                  || _wyn+={? _i=1 & (_c=-1 | _c=2)
                           || ''
                           || _sep
                           ?}+($('DK_C.M_ATR().SL_'+form(_i,-2,0,'99')+'().NA'))()
                             +'> '+($('DK_C.WAR'+form(_i,-2,0,'99')))()
                  ?};
                  _i<10
               || 0
               ?}
            !}
         || _wyn+={? _c=2
                  || __infean.clear();
                     __infean.TREE:=_d;
                     __infean.OPI:='a.CECHA'+DK_C.SYM;
                     __infean.WAR:=DK_C.NAZ;
                     __infean.add(1)
                  || _wyn+={? (_c=-1 | _c=2) || '' || _sep ?}+DK_C.SYM+' - '+DK_C.NAZ
                  ?}
         ?}
      ?};
      DK_C.cntx_pop()
   ?}
|? _a='P'
|| _wyn:={? _c=-1 | _c=2 || '' || 'PARTIA PRODUKCYJNA.' ?};
   {? _b<>'' & (5+_b)='zparn'
   || _mask:=form(8+_b);
      ZPARN.cntx_psh();
      ZPARN.use(_mask);
      ZPARN.clear();
      {? ZPARN.seek(_b)
      || {? _c=2
         || __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='a.SYMBOL PARTII';
            __infean.WAR:=form(ZPARN.SYM);
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='b.NUMER PARTII';
            __infean.WAR:=$ZPARN.NR;
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='c.OPIS';
            __infean.WAR:=ZPARN.OPIS;
            __infean.add(1)
         || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'symbol partii> '+form(ZPARN.SYM)
                +_sep+'numer partii> '+($ZPARN.NR)
                +_sep+'opis> '+ZPARN.OPIS
         ?}
      ?};
      ZPARN.cntx_pop()
   ?}
|? _a='Z'
|| _wyn:={? _c=-1 | _c=2 || '' || 'ZLECENIE.' ?};
   {? _b<>'' & (5+_b)='zlec_'
   || _mask:=form(8+_b);
      ZL.cntx_psh();
      ZL.use(_mask);
      ZL.clear();
      {? ZL.seek(_b)
      || {? _c=2
         || __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='a.SYMBOL ZLECENIA';
            __infean.WAR:=form(ZL.SYM);
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='b.DATA OTWARCIA ZLECENIA';
            __infean.WAR:=form(ZL.OD);
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='c.WYDZIAŁ';
            __infean.WAR:=ZL.JORG().KOD;
            __infean.add(1);
            __infean.clear();
            __infean.TREE:=_d;
            __infean.OPI:='d.PRODUKT';
            __infean.WAR:=ZL.KTM().KTM;
            __infean.add(1)
         || _wyn+={? _c=-1 | _c=2 || '' || _sep ?}+'symbol zlecenia> '+form(ZL.SYM)
                +_sep+'data otwarcia zlecenia> '+form(ZL.OD)
                +_sep+'wydział> '+ZL.JORG().KOD
                +_sep+'produkt> '+ZL.KTM().KTM
         ?}
      ?};
      ZL.cntx_pop()
   ?}
?};
_res[1]:=255+_wyn;
_res[2]:=255-_wyn;
_res


\korscean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: koryguje informacje w tabeli MKODK
::   WE: _a - poprzedni kod SCEAN
::       _b - nowy kod SCEAN
::       _c - 1-dolacz 0-popraw
::       _d - operacja udana
::  OLD: \korscean/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? (1+DK.N().MAG().TYP)='D' & DK.M().IDMOB='D'
|| {? (_a=_b & _d) | (_c & _a<>_b & _d)
   || exec('mkodkadd','kody_kresk',DK.M,DK.SCEAN,DK.SRDK)
   |? ~_c & _a<>'' & _a<>_b & _d
   || {? HELP.MOD_IND().IDMOB='D' || exec('mkodkadd','kody_kresk',null,_a,'') ?};
      exec('mkodkadd','kody_kresk',DK.M,_b,DK.SRDK)
   |? ~_d & _c & _b<>''
   || exec('mkodkadd','kody_kresk',null,_b,'')
   ?}
?}


\blpp_sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: blank dla partii produkcyjnej dla SCEAN
::  OLD: \blpp_sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
_czy:=ZPARN.ZL().KTM<>null & ';P'*ZPARN.ZL().KTM().IDMOB;
_mat:=ZPARN.ZL().KTM;
ZL.cntx_pop();
{? _czy
|| exec('mkodkKODK','kody_kresk',_mat,'ZPARN.SCEAN')
|| ''
?}


\kodk_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2008]
:: OPIS: przed kodY tow. okien WER_SN, WER_OSEL, WER_PROD tabeli M
::       wyswietla liste kodow dla danego materialu
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::   WY: 1
::  OLD: \kodk_m/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

{? HELP.REFMAT<>null || M.seek(HELP.REFMAT) ?};

{? M.get()
||
   POMOC.RODZ:=M.RODZ;
   MKODK.index('M_KTM');
   MKODK.prefix(null,M.ref,'N');
   MKODK.win_fml('WERM',MKODK,'IDMOB',,'ICON_BEFORE',exec('mkodk_icon','kody_kresk'));
   MKODK.win_sel('WERM');
   _no_et:={? ~exec('isDEFetyk','magazyn_mobi','MKODK') || 'T' || '' ?};
   MKODK.actions_grayed('WERM',_no_et);
   MKODK.hdr_sel();
   MKODK.hdr_sel(' dla materiału: %1'@[M.KTM]);
   MKODK.win_edit('REDM');
   MKODK.win_patt('FIND');
   HELP.KODK:='m';
   {? _a
   || MKODK.select();
      HELP.KODK:=''
   ?};
   MKODK.hdr_sel()
?};
1


\mkodk_werm_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed dolacz okna WERM tabel MKODK
::  OLD: \mkodk_werm_dol/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=0;
{!
|? MKODK.blank();
   _add:=1;
   _new:=0;
   {? MKODK.M<>null & (';DAPZ'*MKODK.M().IDMOB)>1
   || _add:=FUN.ask('Dla indeksu materiałowego: %1'
                    '\nwymagana jest identyfikacja na urządzeniu mobilnym.'
                    '\n\nMożliwe dołączenie nowych kodów przelicznikowych i kodów kontrahenta.'
                    '\nCzy dodać nowy kod?'@[MKODK.M().KTM]);
      _new:=1
   ?};
   {? _add
   || {? MKODK.M<>null || {? _new | MKODK.M().IDMOB='N' || MKODK.IDMOB:='O' || MKODK.IDMOB:=MKODK.M().IDMOB  ?} ?};
      {? 'DAPZ'*MKODK.IDMOB
      || MKODK.win_edit('REDMOB');
         MKODK.KODK:=exec('mkodkKODK','kody_kresk',MKODK.M);
         exec('set_efld_opt','kody_kresk','REDMOB')
      || MKODK.win_edit('REDM');
         exec('set_efld_opt','kody_kresk','REDM')
      ?};
      {? BEER.EANP
      || MKODK.KODK:=EANP.EAN;
         MKODK.IL:=1
      ?};

      {? _exit:=MKODK.edit("exec('mkodk_chk','kody_kresk','D','MKODK')")
      || {? MKODK.M<>null & MKODK.IDMOB='O' & MKODK.IL<>0 || MKODK.IDMOB:='R' ?};
         MKODK.cntx_psh();
         MKODK.clear();
         _return:=MKODK.add();
         MKODK.cntx_pop();
         win_disp()
      ?};
      {? BEER.EANP || 0 || _exit ?}
   ?}
!};
_return


\mkodk_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2008]
:: OPIS: Formula po redakcji KODK
::   WE: _a = 'D' - dolacz, 'P' - popraw
::       _b = 'MKODK' - redakcja kartoteki MKODK, 'M' - redakcja kartoteki M
::   WY: '' - jesli pola wypelnione prawidlowo, akronim pola zle wypelnionego
::  OLD: \mkodk_chk/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_return:='';
_return:=exec('chk_mkod','kody_kresk');

{? _return=''
|| {? _b='MKODK' & HELP.KODK='kh'
   ||
      _return:={? MKODK.M=null || 'M' || '' ?};
      {? _return='' || _return:={? MKODK.KTM='' & MKODK.KODK='' || 'KTM' || '' ?} ?}
   |? _b='MKODK' & HELP.KODK='m'
   ||
      _return:={? MKODK.KTM='' & MKODK.KODK='' || 'KTM' || '' ?}
   ?};
   {? _return<>''
   ||
      _msg:={? _return='M' || 'Materiał'@ |? _return='KTM' || 'Kod lub Kod kreskowy'@ || '' ?};
      FUN.info('Niewypełnione pole: %1.'@[_msg])
   ||
      {? HELP.KODK='kh' | HELP.KODK='bl'
      ||
         _ref:={? _a='P' || MKODK.ref() || null() ?};
         MKODK.cntx_psh();
         MKODK.index('UNIK');
         MKODK.prefix(MKODK.KH,MKODK.M);
         {? MKODK.first() & MKODK.ref()<>_ref
         ||
            FUN.info('Dla indeksu %1 zdefiniowano już kod %2.'@[MKODK.M().KTM,MKODK.KTM]);
            _return:='M'
         ?};
         MKODK.cntx_pop()
      |? HELP.KODK='m'
      ||
         _ref:={? _a='P' || MKODK.ref() || null() ?};
         _ktm:=MKODK.KTM;
         _kk:=MKODK.KODK;
         MKODK.cntx_psh();
         MKODK.index('UNIK');
         MKODK.prefix(null,MKODK.M);
         {? MKODK.first()
         || _ilpow:=0;
            {!
            |? {? MKODK.ref()<>_ref & MKODK.D<>'T' & MKODK.IL>0
               ||
                  {? MKODK.KTM<>'' & MKODK.KTM=_ktm
                  || {? _a='P'
                     || _ilpow+=1
                     || FUN.info('Dla materiału %1 zdefiniowano już kod %2.'@[MKODK.M().KTM,_ktm]);
                        _return:='KTM'
                     ?}
                  ?};
                  {? _return='' & MKODK.KODK<>'' & MKODK.KODK=_kk
                  ||
                     FUN.info('Dla materiału %1 zdefiniowano już kod kreskowy %2.'@[MKODK.M().KTM,_kk]);
                     _return:='KODK'
                  ?}
               |? _a='P' & MKODK.D='T' & MKODK.KTM=_ktm
               || _ilpow-=1
               ?};
               _return='' & MKODK.next()
            !};
            {? _return='' & _ilpow>0
            || FUN.info('Dla materiału %1 zdefiniowano już kod %2.'@[MKODK.M().KTM,_ktm]);
               _return:='KTM'
            ?}
         ?};
         MKODK.cntx_pop()
      ?}
   ?}
?};

_return


\mkodk_werm_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed popraw okna WERM tabel MKODK
::  OLD: \mkodk_werm_pop/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
MKODK.get();
{? 'DAPZ'*MKODK.IDMOB
|| MKODK.win_edit('REDMOB');
   exec('set_efld_opt','kody_kresk','REDMOB')
|| MKODK.win_edit('REDM');
   exec('set_efld_opt','kody_kresk','REDM')
?};
{? MKODK.OLD<>'T' & MKODK.edit("exec('mkodk_chk','kody_kresk','P','MKODK')")
|| {? ~((';DAPZ'*MKODK.IDMOB)>1) & MKODK.M<>null || {? MKODK.IL<>0 || MKODK.IDMOB:='R' || MKODK.IDMOB:='O' ?} ?};
   {? MKODK.M<>null & MKODK.OLD<>'T'
   || _ist:=0;
      MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                   || ($MKODK.M().FOMOB().FORMULA)()
                   || _ist:=1;
                      _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                      _op[1]
                   ?};
      MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
      {? _ist || obj_del(_op) ?}
   ?};
   MKODK.put()
|| 0
?}


\prdelmko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: sprawdzenie czy mozna usunac MKODK
::  OLD: \prdelmko/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? MKODK.RSQL<>''
|| MKODK.get();
   {? (';DAPZ'*MKODK.IDMOB)>1
   || _ist:=0;
      EANX.OPMOB:={? MKODK.M().FOMOB<>null
                  || ($MKODK.M().FOMOB().FORMULA)()
                  || _ist:=1;
                     _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,,,MKODK.M().IDZP);
                     _op[1]
                  ?};
      {? _ist || obj_del(_op) ?}
   || EANX.OPMOB:='dodatkowy kod dla indeksu materiałowego'@
   ?};
   FUN.info('Dany kod kreskowy został wykorzystany.\n\n%1\n\nUsunięcie niemożliwe.'@[EANX.OPMOB]);
   0
|| 1
?}


\mkodk_werm_dr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2009+]
:: OPIS: drukowanie kodow towarowych
::  OLD: \mkodk_werm_dr/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_where:=EANX.WHERE;
EANX.WHERE:='X';
rep_exec('wsp_kodk_mat');
EANX.WHERE:=_where


\mkodk_werm_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed wyswietl okna WERM tabli MKODK
::  OLD: \mkodk_werm_wys/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
MKODK.get();
{? MKODK.IL>0 & ~((';DAPZ'*MKODK.IDMOB)>1)
|| MKODK.win_edit('REDM')
|? 'DAPZ'*MKODK.IDMOB
|| MKODK.win_edit('REDMOB')
|| MKODK.win_edit('REDM')
?};
MKODK.get();
MKODK.display()


\prn_kodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wydruki kodow kreskowych
::   WE: _a - 0-bez 1-atrybtutow 2-parti 3-zlecenia 4-domyslne
::  OLD: \prn_kodk/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=0
|| _where:=EANX.WHERE;
   EANX.WHERE:='Q';
   rep_exec('wsp_kodk_mat');
   EANX.WHERE:=_where
|? _a=1
|| exec('mat_atr_sel','mat_atr')
|? _a=2
|| rep_exec('wsp_zpdodsce')
|? _a=3
|| rep_exec('wsp_zldodsce')
|? _a=4
|| VAR_DEL.delete('__domys');
   __domys:=1;
   rep_exec('wsp_mater_001');
   VAR_DEL.delete('__domys')
|| ''
?};
''


\druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula drukuje etykiete na drukarce kodow kreskowych
::  OLD: \druk/skid_uz.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return(0)
?};
{? VAR.DEBUG=1 | VAR.DEBUG=2 | VAR.DEBUG=3
|| exec('ddruk','param_wydr')
|? PAR_WYDR.TYPDR().TYPPODL='S'
|| _txt:=exec('lbl_gen','param_wydr');
   {? +_txt
   || _printer:=PAR_WYDR.TYPDR().DRIVER;
      _wy:=myDPRINT.PrintText(_txt,_printer,'Druk etykiety %1'@[PAR_WYDR.URZ_LAB().KOD])
   || _wy:=0
   ?};
   {? _wy=0
   || FUN.emsg('Wydruk nieudany. Należy sprawdzić konfigurację sterownika\ndrukarki '
               'lub definicję etykiety.'@)
   ?};
   _wy
|? PAR_WYDR.TYPDR().TYPPODL='B'
|| _adres:=PAR_WYDR.TYPDR().PORT;
   {? PAR_WYDR.TYPDR().RODZPODL='L' & 1+_adres<>'@' || _adres:='@'+_adres ?};
   _tryb:={? -_adres*'lpt'<>0||'dpm'||'db' ?};
   on_error(2);
   _out:=fopen(_adres,_tryb);
   on_error(0);
   {? _out
   || _txt:=exec('lbl_gen','param_wydr');
      {? +_txt
      || fwrite(_out,_txt);
         _wy:=1
      || _wy:=0
      ?};
      delay(1);
      fclose(_out);
      _wy
   || FUN.emsg('Błąd otwarcia portu: %1.\nPort jest niedostępny lub zajęty przez inny program.'@[_adres]);
      0
   ?}
?}


\prn_pal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: wydruk kodow kreskowych palet
::  OLD: \prn_pal/mws.fml
::----------------------------------------------------------------------------------------------------------------------
rep_exec('lmg_palkodk')


\aktzwmkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.41]
:: OPIS: aktywacja MKODK
::   WE: _a - ref materiału M
::       _b - kod kreskowy
::       [_c] - ustawienie/usunięcie triggera-1 0-nie(domyślnie)
::  OLD: \aktzwmkodk/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=3 || {? type_of(_c)<>1 || _c:=0 ?} || _c:=0 ?};
{? _a<>null() & _b<>''
|| MKODK.cntx_psh();
   MKODK.index('BEZ');
   MKODK.prefix(_a,_b,);
   {? MKODK.first() & MKODK.AKT<>'T'
   || {? _c || exec('ustaw_trigger','synchro') ?};
      MKODK.AKT:='T';
      MKODK.put(1);
      {? _c || exec('usun_trigger','synchro') ?}
   ?};
   MKODK.cntx_pop()
?};
~~


\pwpp_sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietleniem kodu identyfikacyjnego
::  OLD: \pwpp_sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------

_edit:=(2+cur_kwin())='e_';
_wined:=ZPARN.win_edit('?');
ZL.cntx_psh();
_czy:=ZPARN.ZL().KTM<>null & ZPARN.ZL().KTM().IDMOB='P';
ZL.cntx_pop();
{? _edit & _wined<>'' & _czy
|| ZPARN.win_efml(ZPARN.win_edit('?'),,'SCEAN',,'ICON_BEFORE',"'xwin16.png:167'");
   ''
|? _edit & _wined<>''
|| ZPARN.win_efml(ZPARN.win_edit('?'),,'SCEAN',,'ICON_BEFORE',"''");
   exec('findfnv','#color')
|| ''
?}


\pwopmob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: przed wyswietleniem zmiennej
::  OLD: \pwopmob/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=MKODK
|| MKODK.win_efml('REDMOB',EANX,'OPMOB',,'ICON_BEFORE',"
            {? MKODK.OLD='T'   || 'xwin16.png:137'
            |? MKODK.IDMOB='D' || 'xwin16.png:17'
            |? MKODK.IDMOB='A' || 'xwin16.png:91'
            |? MKODK.IDMOB='P' || 'xwin16.png:31'
            |? MKODK.IDMOB='Z' || 'xwin16.png:30'
            || 'xwin16.png:15'
            ?}");
   {? (';DAPZ'*MKODK.IDMOB)>1
   || _ist:=0;
      EANX.OPMOB:={? MKODK.M().FOMOB<>null
                  || ($MKODK.M().FOMOB().FORMULA)()
                  || _ist:=1;
                     _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,,,MKODK.M().IDZP);
                     _op[1]
                  ?};
      {? _ist || obj_del(_op) ?}
   || EANX.OPMOB:='dodatkowy kod dla indeksu materiałowego'@
   ?}
|? cur_tab()=SLD
|| SLD.win_fml('WER',EANX,'OPMOB',,'ICON_BEFORE',"
            {? SLD.SL().M<>null & exec('FindInSet','#table','MKODK','KK',SLD.SCEAN,SLD.SCEAN,\"MKODK.OLD\",,,'')='T'
            || 'xwin16.png:137'
            |? SLD.SL().M().IDMOB='D'
            || 'xwin16.png:17'
            |? SLD.SL().M().IDMOB='A'
            || 'xwin16.png:91'
            |? SLD.SL().M().IDMOB='P'
            || 'xwin16.png:31'
            |? SLD.SL().M().IDMOB='Z'
            || 'xwin16.png:30'
            || 'xwin16.png:15'
            ?}");
   {? (';DAPZ'*SLD.SL().M().IDMOB)>1
   || _ist:=0;
      EANX.OPMOB:={? SLD.SL().M().FOMOB<>null
                  || ($SLD.SL().M().FOMOB().FORMULA)()
                  || _ist:=1;
                     _op:=exec('formopis','kody_kresk',SLD.SL().M().IDMOB
                           ,exec('FindInSet','#table','MKODK','KK',SLD.SCEAN,SLD.SCEAN,"MKODK.RSQL",,,'')
                             ,,SLD.SL().M().IDZP);
                     _op[1]
                  ?};
      {? _ist || obj_del(_op) ?}
   || EANX.OPMOB:='dodatkowy kod dla indeksu materiałowego'@
   ?}
?};
~~


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zaznacza wymagalne pola MKODK
::   WE: _a - akronim okna redakcji
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || MKODK.win_edit('?') ?};

{? MKODK.RSQL<>'' | (MKODK.KTM='' & MKODK.KODK<>'')
|| MKODK.efld_opt(_win_red,'mark=0',,'KTM');
   MKODK.efld_opt(_win_red,'mark=1',,'KODK')
|? MKODK.KTM='' & MKODK.KODK=''
|| MKODK.efld_opt(_win_red,'mark=1',,'KTM');
   MKODK.efld_opt(_win_red,'mark=1',,'KODK')
|? MKODK.KTM<>'' & MKODK.KODK=''
|| MKODK.efld_opt(_win_red,'mark=1',,'KTM');
   MKODK.efld_opt(_win_red,'mark=0',,'KODK')
?};
''


\mkodk_werkh_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed dolacz okna WERKH tabel MKODK
::  OLD: \mkodk_werkh_dol/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=0;
{? HELP.KODK='mkh' & MKODK.size()
|| FUN.info('Dla materiału %1 zdefiniowano już kody.'@[M.KTM])
|| {? cur_win_id()='U'
   || MKODK.win_edit('REDKHU');
      M.win_dict('NL_WERU');
      POMOC.RODZ:='U'
   |? cur_win_id()='T'
   || MKODK.win_edit('REDKH');
      M.win_dict('NL_WER');
      POMOC.RODZ:='T'
   || MKODK.win_edit('REDKHALL');
      M.win_dict('SEL');
      M.actions('SEL','W');
      POMOC.RODZ:=''
   ?};
   {!
   |? MKODK.blank();
      {? _exit:=MKODK.edit("exec('mkodk_chk','kody_kresk','D','MKODK')")
      || do();
         MKODK.cntx_psh();
         MKODK.clear();
         {? _return:=MKODK.add()
         || {? HELP.KODK='mkh' & MKODK.size() || _exit:=0 ?};
::       aktualizacja zapisów dla MDOST
            {? ~exec('act_mdostMkodk','kody_kresk',MKODK.KH,MKODK.M,MKODK.ref())
            || _return:=0;
               undo()
            ?}
         || undo()
         ?};
         MKODK.cntx_pop();
         end();
         win_disp()
      ?};
      _exit
   !};
   M.actions('SEL','')
?};
_return


\mkodk_werkh_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: przed popraw okna WERKH tabel MKODK
::  OLD: \mkodk_werkh_pop/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
_mat:=MKODK.M;
_kh:=MKODK.KH;
_f_active:=0;
{? cur_win_id()='U'
|| MKODK.win_edit('REDKHU');
   M.win_dict('NL_WERU');
   POMOC.RODZ:='U'
|? cur_win_id()='T'
|| MKODK.win_edit('REDKH');
   M.win_dict('NL_WER');
   POMOC.RODZ:='T'
|| MKODK.win_edit('REDKHALL');
   _wer_grp:=M.grp_make('Materiały/Usługi'@,,'map_ind');
   _fb:="M.actions('SEL','W',,1)";
   M.grp_sel(_wer_grp,,'SEL','Indeksy'@,,,,,_fb,,,,'maximized');
   _fb:="M.prefix('T','T'); M.seek(M.ref()); POMOC.RODZ:='T'";
   _fa:="POMOC.RODZ:=''; M.prefix('T')";
   M.grp_sel(_wer_grp,,'NL_WERI','Materiały'@,,,,,_fb,_fa,,,'maximized');
   _fb:="M.prefix('T','U');  M.seek(M.ref()); POMOC.RODZ:='U'";
   M.grp_sel(_wer_grp,,'NL_WERI','Usługi'@,,,,,_fb,_fa,,,'maximized');
   M.win_dict(_wer_grp);
   POMOC.RODZ:='';
   _f_active:=MKODK.f_active()
?};
{? MKODK.edit("exec('mkodk_chk','kody_kresk','P','MKODK')")
|| do();
   {? MKODK.M<>null & MKODK.OLD<>'T'
   || _ist:=0;
      MKODK.OPMOB:={? MKODK.M().FOMOB<>null
                   || ($MKODK.M().FOMOB().FORMULA)()
                   || _ist:=1;
                      _op:=exec('formopis','kody_kresk',MKODK.IDMOB,MKODK.RSQL,1,,MKODK.M().IDZP);
                      _op[1]
                   ?};
      MKODK.OPMOB2:={? _ist || _op[2] || '' ?};
      {? _ist || obj_del(_op) ?}
   ?};
   MKODK.cntx_psh();
   _put:=MKODK.get();
   MKODK.cntx_pop();
   _res:={? _put || MKODK.put() || MKODK.add() ?};
   {? _res
   ||
::    zmieniono materiał
      {? _mat<>MKODK.M
      || {? ~exec('act_mdostMkodk','kody_kresk',_kh,_mat,null())
         || _res:=0;
            undo()
         ?}
      ?};
::    aktualizacja zapisów dla MDOST
      {? ~exec('act_mdostMkodk','kody_kresk',MKODK.KH,MKODK.M,MKODK.ref())
      || _res:=0;
         undo()
      ?}
   || undo()
   ?};
   end()
|| _res:=0
?};
{? _f_active & MKODK.f_active()=0 || exec('zakres','kody_kresk',0) ?};
_res


\mkodk_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: ikony dla pola MKODK.IDMOB
::----------------------------------------------------------------------------------------------------------------------
"{? MKODK.OLD='T'
 || MKODK.IDMOB:=''; 'xwin16.png:137'
 |? MKODK.IDMOB='M'
 || MKODK.IDMOB:=''; 'xwin16.png:46'
 |? MKODK.IDMOB='O'
 || MKODK.IDMOB:=''; 'xwin16.png:46'
 |? MKODK.IDMOB='R'
 || MKODK.IDMOB:=''; 'xwin16.png:46'
 |? MKODK.IDMOB='D'
 || MKODK.IDMOB:=''; 'xwin16.png:17'
 |? MKODK.IDMOB='A'
 || MKODK.IDMOB:=''; 'xwin16.png:91'
 |? MKODK.IDMOB='P'
 || MKODK.IDMOB:=''; 'xwin16.png:31'
 |? MKODK.IDMOB='Z'
 || MKODK.IDMOB:=''; 'xwin16.png:30'
 |? MKODK.IDMOB='N'
 || MKODK.IDMOB:=''; 'xwin16.png:15'
 || MKODK.IDMOB:=''; ''
 ?}"


\bezmkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: wyswietla liste nieprypisanych kodów kreskowych
::  OLD: \bezmkodk/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
_sel:=MKODK.win_sel('?');
MKODK.win_sel('WERBEZ');
_no_et:={? ~exec('isDEFetyk','magazyn_mobi','MKODK') || 'T' || '' ?};
MKODK.actions_grayed('WERBEZ',_no_et);
MKODK.index('BEZ');
MKODK.prefix(null);
MKODK.select();
MKODK.win_sel(_sel);
~~


\auto_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.30]
:: OPIS: automatyczna generacja kodow kreskowych
::  OLD: \auto_kod/ena2.fml
::----------------------------------------------------------------------------------------------------------------------
undefine();
define('ILE',1,'Podaj liczbę kodów kreskowych do wygenerowania.'@,'Generacja nieprzypisanych kodów kreskowych'@,10,10);
{? def_edit("{? DEFINE.ILE>0 & DEFINE.ILE<=1000
             || 1
             || FUN.info('Należy podać liczbę większą od zera oraz mniejszą lub równą 1000.'@);
                0
             ?}",'Generacja nieprzypisanych kodów kreskowych'@)
|| _ile:=DEFINE.ILE;
   {! _i.._ile |! exec('mkodkadd','kody_kresk',null,exec('mkodkKODK','kody_kresk',null(),'MKODK.KODK'),'') !}
?};
undefine();
~~


\mkodk_werkh_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.02]
:: OPIS: akcja usuń dla kodów dostawcy, okno WERKH tabel MKODK
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? exec('prdelmko','kody_kresk') & FUN.ask('Czy usunąć bieżący wiersz?'@)
|| _mat:=MKODK.M;
   _kh:=MKODK.KH;
   do();
   {? ~exec('act_mdostMkodk','kody_kresk',_kh,_mat,null())
   || _res:=0;
      undo()
   || {? ~MKODK.del(,1)
      || _res:=0;
         undo()
      ?}
   ?};
   end()
?};
{? HELP.KODK='mkh' || MDOST.get() ?};
_res


\act_mdostMkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [18.02]
:: OPIS: zaktualizowanie zapisów dla pola MDOST.MKODK
::   WE: _a - kontrahent
::       _b - materiał
::       _c - null()-usunięcie zapisu lub ref MKODK
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_byl:=0;
MKODK.cntx_psh();
MDOST.cntx_psh();
MDOST.index('M');
MDOST.prefix('D',_b,_a);
{? MDOST.first()
|| {!
   |? _ref:=MDOST.ref();
      _oki:=MDOST.next();
      MDOST.cntx_psh();
      MDOST.prefix();
      {? MDOST.seek(_ref)
      || _byl:=1;
         MDOST.MKODK:=_c;
         _res:=MDOST.put(1)
      ?};
      MDOST.cntx_pop();
      _res & _oki
   !}
?};
MKODK.cntx_pop();
MDOST.cntx_pop();
{? _res & _byl || _res:=2 ?};
_res


\blpp2sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: blank dla parti dla ZPEAN
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
_czy:=ZPARN.ZL().KTM<>null & ZPARN.ZL().KTM().IDMOB='D';
ZL.cntx_pop();
{? _czy
|| {? ZPARN.SCEAN<>'' & ZPARN.ZL().KTM().IDZP
   || ZPARN.SCEAN
   || exec('mkodkKODK','kody_kresk',ZPARN.ZL().KTM,'ZPARN.ZPEAN')
   ?}
|| ''
?}


\pwpp2sce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.42]
:: OPIS: przed wyświetleniem kodu identyfikacyjnego
::  OLD: \pwzl2sce/ean2.fml
::----------------------------------------------------------------------------------------------------------------------
1


\mkodk_jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [20.42]
:: OPIS: wartość początkowa JM i JMK po edycji IL
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=MKODK & 'REDKH,REDKHALL,REDKHU'*cur_win() & MKODK.IL>0
||
   {? MKODK.JM=null || MKODK.JM:=MKODK.M().J ?};
   {? MKODK.JMK=null || MKODK.JMK:=MKODK.M().J ?}
?};
1


\mkodk_jm_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [20.42]
:: OPIS: przed edycją JM i JMK
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab()=MKODK & 'REDKH,REDKHALL,REDKHU'*cur_win() & MKODK.IL<=0
|| 0
|| 1
?}


\barcode_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Zwraca rodzaj kodu kreskowego dla wydruków
::   WY: STRING
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('set_var','param_wydr');
_result:=PAR_WYDR.KODKRESK;
{? _result=''
|| _result:='Code 128'
?};
_result


\barcode_height
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Zwraca wysokość kodu kreskowego dla wydruków
::   WY: INTEGER
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
2


\zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [22.26]
:: OPIS: Indeksy kontrahenta - Zakres
::   WE: _a - 0/1 - komunikaty
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=1 ?};
MKODK.index('KH_KK');
_f_active:=MKODK.f_active();
{? _f_active=1 | _f_active=3
||
   {? _a=0 | FUN.ask('Czy wyświetlić wszystkie indeksy kontrahenta?'@)
   ||
      MKODK.prefix(KH.ref());
      MKODK.f_clear()
   ?}
||
   {? _a=0 | FUN.ask('Czy wyświetlić indeksy kontrahenta ograniczone do indeksów z dokumentu Businesslink?'@)
   ||
      MKODK.prefix();
      MKODK.f_set(,'join :_a using(MKODK.KTM,:_a.KTM)','MKODK.KH=:_b',__Map,KH.ref())
   ?}
?}


\ctrlKodPal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: Kontrola kodu kreskowego palety
::   WE: _a - kod palety
::   WY: pusty string jak jest ok lub napis co jest nie tak
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_kodk:={? var_pres('_a')=type_of('') || _a || '' ?};
{? _kodk<>''
|| {? exec('FindInSet','#table','MKODK','KK',_kodk,,,1,,null())<>null()
   || _res:='Podany kod kreskowy przypisany jest do materiału.'@
   |? exec('FindInSet','#table','EANL','EAN',_kodk,,,1,,null())<>null()
   || _res:='Podany kod kreskowy przypisany jest do lokalizacji w magazynie.'@
   ?}
?};
_res


\cnndform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - długość kodu 6 - pomijalna w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of(date())
     || _b
     |? var_pres('_b')=type_of('')
     || {? (+_b)=10
        || exec('str2date','#convert',_b)
        |? (+_b)=8
        || exec('str2date8','#convert',_b)
        || date(0,0,0)
        ?}
     || date(0,0,0)
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};

{? _iz<>'' & _xx<>date(0,0,0)
|| _res:={? ~_tz || _iz || '(%1)'[_iz] ?}
        +form({? (_xx~1)<2000 || (_xx~1)-1900 || (_xx~1)-2000 ?},-2,0,'99')
        +form(_xx~2,-2,0,'99')
        +form(_xx~3,-2,0,'99')
?};
_res


\cnnrform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - długość kodu 6 - pomijalna w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') & (+_a)=4 || _a || '' ?};
_xx:={? var_pres('_b')=type_of(0.1)
     || _b
     |? var_pres('_b')=type_of('') & exec('allDigit','#valid',_b)
     || #_b
     || 0
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};

{? _iz<>'' & _xx>0
|| _val:=gsub(gsub(form(_xx),','),'.');
   _len:=+_val;
   _frac:=frac(_xx);
   _prec:={? ~_frac || 0 || +form(_frac)-2 ?};
   {? (_len)>6
   || {? (1+_val)<>'0'
      || _val:=6+_val;
         _prec-=(_len-6)
      || _val:=6+(1-_val);
         _prec-=(_len-7)
      ?};
      {? _prec<0 || _prec:=0 ?}
   ?};
   _res:={? ~_tz
         || ('%1%2'[(_iz-1),$_prec])+form(#_val,-6,0,'99')
         || ('(%1%2)'[(_iz-1),$_prec])+form(#_val,-6,0,'99')
         ?}
?};
_res


\cntsform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allDigit','#valid',_b,1)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};
_fnc1:={? exec('FindInSet','#table','EAND','KOD',_iz,,"@.EAND.FNC1='T'",1,,0) || EANX.FNC1 || '' ?};

_ld:=_ln-1;
{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)<=_ln
|| {? (+_xx)<_ld
   || _xx:=form(#_xx,-_ld,0,'99')
   |? (+_xx)=_ln
   || _xx:=_xx-1
   ?};
   _cd:=exec('digitCTRL','%mobil',_xx);
   _res:={? ~_tz || '%1%2%3'[_iz,_xx,_cd] || '(%1)%2%3'[_iz,_xx,_cd] ?}
?};
_res


\vansform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allAlfaNum','#valid',_b)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};
_fnc1:={? exec('FindInSet','#table','EAND','KOD',_iz,,"@.EAND.FNC1='T'",1,,0) || EANX.FNC1 || '' ?};

{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)<=_ln
|| _res:={? ~_tz || '%1%2'[_iz,_xx+_fnc1] || '(%1)%2'[_iz,_xx+_fnc1] ?}
?};
_res


\cansform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allAlfaNum','#valid',_b)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};
_fnc1:={? exec('FindInSet','#table','EAND','KOD',_iz,,"@.EAND.FNC1='T'",1,,0) || EANX.FNC1 || '' ?};

{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)=_ln
|| _res:={? ~_tz || '%1%2'[_iz,_xx+_fnc1] || '(%1)%2'[_iz,_xx+_fnc1] ?}
?};
_res


\vntsform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allAlfaNum','#valid',_b)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};

{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)<=_ln
|| {? (+_xx)=_ln
   || _xx:=_xx-1
   ?};
   _cd:=exec('digitCTRL','%mobil',_xx);
   _res:={? ~_tz || '%1%2%3'[_iz,_xx,_cd] || '(%1)%2%3'[_iz,_xx,_cd] ?}
?};
_res


\vatsform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_lc:=(+_iz)+10;
_xx:={? var_pres('_b')=type_of('') & exec('allDigit','#valid',_lc+_b,1) & exec('allAlfaNum','#valid',_lc-_b)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};

_xn:=_lc+_xx;
_xx:=_lc-_xx;
{? _iz<>'' & _xn<>'' & _xx<>'' & _ln>0 & (+_xx)<=_ln
|| {? (+_xn)=_lc
   || _xn:=_xn-1
   ?};
   _cd:=exec('digitCTRL','%mobil',_xn);
   _res:={? ~_tz || '%1%2%3%4'[_iz,_xn,_cd,_xx] || '(%1)%2%3%4'[_iz,_xn,_cd,_xx] ?}
?};
_res


\vnnsform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allDigit','#valid',_b,1)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};
_fnc1:={? exec('FindInSet','#table','EAND','KOD',_iz,,"@.EAND.FNC1='T'",1,,0) || EANX.FNC1 || '' ?};

{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)<=_ln
|| _res:={? ~_tz || '%1%2'[_iz,_xx+_fnc1] || '(%1)%2'[_iz,_xx+_fnc1] ?}
?};
_res


\cnnsform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przetwarzania danych dla kodu GS1
::   WE: _a - kod GS1
::       _b - wartość do przetworzenia
::       _c - maksymalna długość kodu w przypadku liczby ujemnej zwraca format w zapisie (XX)YYYYY
::   WY: kod lub pusty string
::----------------------------------------------------------------------------------------------------------------------
_res:='';
_iz:={? var_pres('_a')=type_of('') || _a || '' ?};
_xx:={? var_pres('_b')=type_of('') & exec('allDigit','#valid',_b,1)
     || _b
     || ''
     ?};
_ln:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_tz:={? _ln<0 || _ln:=-_ln; 1 || 0 ?};
_fnc1:={? exec('FindInSet','#table','EAND','KOD',_iz,,"@.EAND.FNC1='T'",1,,0) || EANX.FNC1 || '' ?};

{? _iz<>'' & _xx<>'' & _ln>0 & (+_xx)=_ln
|| _res:={? ~_tz || '%1%2'[_iz,_xx+_fnc1] || '(%1)%2'[_iz,_xx+_fnc1] ?}
?};
_res


\labline2LABMEMO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przepisuje zawartość URZ_LABZ do tabeli URZ_LABM
::   WE: _a - wskazanie na URZ_LAB
::       [_b] - twórz tabelę buforującą
::   WY: tabela buforująca POZ i LOG lub bez znaczenia jeśli nie tworzono tabeli
::----------------------------------------------------------------------------------------------------------------------
_urz_lab:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_czy_buf:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_res:={? _czy_buf || tab_tmp(1,'POZ','STRING[255]','','LOG','STRING[255]','') || 1 ?};
_txt:='';

{? _urz_lab<>null()
|| URZ_LABM.cntx_psh();
   URZ_LABM.index('URZ_LAB');
   URZ_LABM.prefix(_urz_lab);
   {? URZ_LABM.first() || URZ_LABM.del() ?};

   URZ_LABZ.cntx_psh();
   URZ_LABZ.index('URZ_LABZ');
   URZ_LABZ.prefix(_urz_lab);
   {? URZ_LABZ.first()
   || {!
      |? _txt+='%1\n'[form(URZ_LABZ.POZ)];
         {? _czy_buf
         || _res.clear();
            _res.prefix(URZ_LABZ.POZ,);
            {? ~_res.first()
            || _res.blank();
               _res.POZ:=URZ_LABZ.POZ;
               _res.LOG:=URZ_LABZ.LOG;
               _res.add(1)
            ?}
         ?};
         URZ_LABZ.next()
      !};
      _txt-=1
   ?};
   URZ_LABZ.cntx_pop();

   URZ_LABM.blank();
   URZ_LABM.URZ_LAB:=_urz_lab;
   URZ_LABM.memo_set(_txt,'ETYK');
   {? URZ_LABM.add(1) || URZ_LABM.memo_put() ?};
   URZ_LABM.cntx_pop()
?};
_res


\etyk_notatnik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła na redakcję definicji etykiety w notatniku
::----------------------------------------------------------------------------------------------------------------------
_urz_lab:=URZ_LAB.ref();

_buf:=exec('labline2LABMEMO','kody_kresk',_urz_lab,1);
URZ_LABM.index('URZ_LAB');
URZ_LABM.prefix(_urz_lab);
{? URZ_LABM.first()
|| {? URZ_LABM.edit() & URZ_LABM.put(1) & URZ_LABM.memo_put() || exec('labmemo2LABLINE','kody_kresk',_urz_lab,_buf) ?}
|| FUN.info('Brak definicji etykiety w formie notatnikowej.'@)
?};
obj_del(_buf);
~~


\labmemo2LABLINE
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła przepisuje zawartość pola memo URZ_LABM do tabeli URZ_LABZ
::   WE: _a - wskazanie na URZ_LAB
::       [_b] - tabela buforująca lub jej brak
::----------------------------------------------------------------------------------------------------------------------
_urz_lab:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_czy_buf:={? var_pres('_b')=type_of(FIRMA) || _buf:=_b; 1 || 0 ?};

_txt:='';

{? _urz_lab<>null()
|| URZ_LABZ.cntx_psh();
   URZ_LABZ.index('URZ_LABZ');
   URZ_LABZ.prefix(_urz_lab);
   {? URZ_LABZ.first() || {! |? URZ_LABZ.del() !} ?};

   URZ_LABM.cntx_psh();
   URZ_LABM.index('URZ_LAB');
   URZ_LABM.prefix(_urz_lab);
   {? URZ_LABM.first() & URZ_LABM.memo_line('ETYK')<>'\n'
   || _txt:=spli_str(URZ_LABM.memo_txt(,1,'ETYK'),'\n');
      _len:=obj_len(_txt);
      _lp:=0;
      {! _ii:=1.._len
      |! _ltx:=+_txt[_ii];
         {!
         |? _lp+=1;
            URZ_LABZ.blank();
            URZ_LABZ.URZ_LAB:=_urz_lab;
            URZ_LABZ.LP:=_lp;
            URZ_LABZ.POZ:=255+_txt[_ii];
            _txt[_ii]:=255-_txt[_ii];
            {? _czy_buf & (_buf.clear(); _buf.prefix(URZ_LABZ.POZ,); _buf.first())
            || URZ_LABZ.LOG:=_buf.LOG
            ?};
            URZ_LABZ.add(1);
            _ltx-=255;
            _ltx>0
         !}
      !};
      obj_del(_txt)
   ?};
   URZ_LABM.cntx_pop();
   URZ_LABZ.cntx_pop()
?};
~~


\mkodkKODK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła na kod kreskowy dla MKODK i materiału
::   WE: _a - M.ref()
::       [_b] - kontekst wywołania tabela i pole np. ZL.SCEAN - domyślnie pusty STRING
::   WY: kod kreskowy - alfanumeryczny
::----------------------------------------------------------------------------------------------------------------------
_res:=$MKODK.tm_stamp();
_where:={? var_pres('_b')=type_of('') || _b || '' ?};

_beerm:=BEER.M;
BEER.M:=_a;
{? _where='ZL.ZLEAN' || _res:=$ZL.tm_stamp() ?};

{? Plugin.exists('MKODK_KODK_001')
|| _buf:=Plugin.run('MKODK_KODK_001',{? BEER.M=null() || '' || BEER.M().uidref() ?},_where);
   {? _buf<>'' & exec('unik_ean','kody_kresk','A',_buf,null()) || _res:=_buf ?}
?};
BEER.M:=_beerm;
_res


\bl_idean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wartość początkowa pola ZGP.IDEAN, GROP.IDEAN (kod kreskowy identyfikujący operację)
::   WE: _a - alias tabeli, której dotyczy kod
::   WY: kod kreskowy - alfanumeryczny
::----------------------------------------------------------------------------------------------------------------------
{? _a=ZGP
|| 'P%1'[$ZGP.tm_stamp()]
|? _a=GROP
|| 'G%1'[$GROP.tm_stamp()]
|? _a=GROPS
|| 'S%1'[$GROPS.tm_stamp()]
|| ''
?}

:Sign Version 2.0 jowisz:1045 2023/08/21 15:49:01 881af87fd4a724ba5de97fc9e6847f63dc2686be59e6a115b52f281719036dc4937b711414c22792f3a87717ef97f7c68fc299079bd0dc95c2a14059ecd932646e70d5eaa2eae3f9ccd41ccbb534b5a6b1ee532ae36db4f383dc922359a57d819c4b2a13797d9f6910c33db9cd78d288c38b3ab6e59ff1dd68afb33d0b421703
