:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc_rozlicz.fml
:: Utworzony: 07.08.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły do obsługi rozliczenia czasu pracy.
::======================================================================================================================

\kwalifikacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja do redagcji danych do kwalifikacji.
::   WE:
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';
_side:='NAW_MIN';
_par:=obj_new('rozn','od','do','grupa','upr','ud_def_win');

_par.rozn:=exec('roznica','prc_rozlicz',A_OKRP.OD,A_OKRP.DO);
_par.od:=A_OKRP.OD;
_par.do:=A_OKRP.DO;
_par.grupa:=0;
_par.upr:=exec('chk_role','#b__box',OPERATOR.USER,'PRC_CZP_PWER');
_par.ud_def_win:=params_get().cfg.window;
:: Ustawienie kalendarza współpracownika.
{? P.KAL
|| __KAL.set_cal(P.KAL().NAZWA,_par.od~1)
|| __KAL.set_cal('standard')
?};
:: Przygotowanie tabeli i okna do wyświetlania informacji o kwalifiacji czasu pracy.

:: tabela z kwalifikacją czasu pracy
_KWAL:=exec('tab_create','prc_rozlicz');
:: obiekt do kwalifikacji czasu pracy na w podziale na obiekty kosztowe
_KWKK:=exec('kwkk_create','prc_rozlicz');
:: obiekt do kwalifikacji czasu pracy poza siedzibą firmy
_PZD:=exec('pzd_create','prc_rozlicz');

:: okno wertowania tabeli z kwalifikacją czasu pracy
_wer:=_KWAL.mk_sel(
   'Rozliczenie czasu pracy współpracownika %1 %2'@[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE],
   'N',,
   'r_wyk_011',,,,,
   'U',,,,,
   _mode,,'on'
);
:: wtyczka z okienkiem, akcjami okienka, ikonami
:params_set('KWAL',_KWAL,'WER',_wer,'PAR',_par);
{? ~Plugin.run('PRC_CZP_PKWA_WIN',_KWAL,_KWKK,_par,_wer,_PZD)
||
:: pola
   _mob:='mobile_visible=1';
   _KWAL.win_fld(_wer,,'DTI',,,10,,1,'Data'@,,'Data w okresie'@,,,,,,_mob);
   _KWAL.win_fld(_wer,,'LP',,,10,,1,'Dzień'@,,'Dzień tygodnia'@);
   _KWAL.win_fld(_wer,,'TYP',,,8,,1,'Typ'@,,'Rodzaj dnia'@,,,,,,_mob);
   _KWAL.win_fld(_wer,,'CP',,,-8,,1,'Praca i nieobecność'@,,'Liczba godzin pracy i nieobecności'@,,,,,,_mob);
   _KWAL.win_fld(_wer,,'G7135',,,-8,,,'Poza siedzibą'@,,'Liczba godzin pracy poza siedzibą'@);
   _KWAL.win_fld(_wer,,'CN',,,-8,,1,'Nadmiar'@,,'Liczba godzin ponad normę dzienną'@);
   _KWAL.win_fld(_wer,,'NB',,,-8,,1,'Niedobór'@,,'Liczba godzin niedoboru'@);
   _KWAL.win_fld(_wer,,'OG',,,-8,,1,'Odebrane'@,,'Liczba godzin odebranych'@);
   _KWAL.win_fld(_wer,,'G54',,,-8,,,'Przepracowane'@,,'Liczba godzin przepracowanych'@,,,,,,_mob);
   _KWAL.win_fld(_wer,,'G55',,,-8,,,'Nadgodziny 50\%'@,,'Liczba nadgodzin 50\%'@);
   _KWAL.win_fld(_wer,,'DN5',,,-8,,1,'Odbiór 50\%'@,,'Liczba odebranych nadgodzin 50\%'@);
   _KWAL.win_fld(_wer,,'G56',,,-8,,,'Nadgodziny 100\%'@,,'Liczba nadgodzin 100\%'@);
   _KWAL.win_fld(_wer,,'DN1',,,-8,,1,'Odbiór 100\%'@,,'Liczba odebranych nadgodzin 100\%'@);
   _KWAL.win_fld(_wer,,'G57',,,-8,,,'Nocne'@,,'Liczba godzin przepracowanych w porze nocnej'@);
   _KWAL.win_fld(_wer,,'G58',,,-8,,,'Wolne'@,,'Liczba godzin przepracowanych w dzień wolny'@);
   _KWAL.win_fld(_wer,,'G65',,,-8,,,'Średniotygodniowe'@,,'Liczba godzin przekroczenia normy średniotygodniowej'@);
   _KWAL.win_fld(_wer,,'G64',,,-8,,,'Dopełnienie do etatu'@,,'Liczba godzin nadliczbowych: dopełnienie do wymiaru etatu'@);
   _KWAL.win_fld(_wer,,'G67',,,-8,,,'Dopełnienie do wymiaru'@,,
      'Liczba godzin dopełnienia do wymiaru godzin podczas pracy w niepełny dzień świąteczny lub wolny'@
   );
   _KWAL.win_fld(_wer,,'G68',,,-8,,,'Dodatek 50\% do etatu'@,,'Liczba godzin 50\% dodatku do dopełnienia do etatu'@);
   _KWAL.win_fld(_wer,,'G69',,,-8,,,'Dodatek 100\% do etatu'@,,'Liczba godzin dodatku 100\% do dopełnienia do etatu'@);
   _KWAL.win_fld(_wer,,'ODP',,,-8,,,'Do odpracowania'@,,'Liczba godzin do odpracowania'@);
   _KWAL.win_fld(_wer,,'NI',,,-6,,1,'Nieobecności'@,,'Rodzaj nieobecności'@);
:: ikony
   _KWAL.win_fml(_wer,,'TYP',,'ICON_BEFORE',"{? cur_tab(1,1).BL='T' || 'xwin16.png:157' || 'xwin16.png:156' ?}");
:: ukrywanie wartości zerowych
   {! _ii:=1.._KWAL.fld_num()
   |! _acr:=_KWAL.fld_acr(_ii);
      {? var_pres(_acr,_KWAL)=29 || _KWAL.fld_fml(_acr,'BEFORE_DISPLAY',"*fld()") ?}
   !};
   _KWAL.fld_fml('NI','BEFORE_DISPLAY',"+fld()");
:: akcje
   {? _par.upr
   || _KWAL.win_act(_wer,0,
         'Formuła',
         'Wylicz'@@,,
         'Ponowne obliczenie kwalifikacji w wybranym dniu'@,,
         "  params_exec('prc_czp_pwer_afw','prc_rozlicz')
         ",1,1,
         "  sel_nchk(); params_exec('prc_czp_pwer_gbfw','prc_rozlicz')
         ",
         "  params_exec('prc_czp_pwer_gafw','prc_rozlicz')
         ",'W'
      );
      _KWAL.win_act(_wer,0,
         'Formuła',
         'Aktualizuj'@@,,
         'Aktualizacja tabeli dziennej'@,,
         "  params_exec('akt_tab_dzien','prc_rozlicz')
         ",,1,
         "  sel_nchk(); params_exec('akt_tab_dzien_gbfw','prc_rozlicz')
         ",
         "  params_exec('akt_tab_dzien_gafw','prc_rozlicz')
         ",'A'
      );
      _KWAL.win_act(_wer,,
         'Formuła',
         'Zablokowanie'@@,,
         'Zablokowanie danych do  modyfikacji w wybranym dniu'@,,
         "  params_exec('blokada','prc_rozlicz',1)
         ",,1,,,'Z'
      );
      _KWAL.win_act(_wer,,
         'Formuła',
         'Odblokowanie'@@,,
         'Odblokowanie danych do modyfikacji w wybranym dniu'@,,
         "  params_exec('blokada','prc_rozlicz',0)
         ",,1,,,'O'
      )
   ?};
   _KWAL.win_act(_wer,,
      'Formuła',
      'Plan dnia'@@,,
      'Wyświetlenie planu pracy w wybranym dniu'@,,
      "  {? __KAL.get_day(params_get().KWAL.DT) || KAL_DEF.display() ?}
      ",,1,,,'P'
   );
   _KWAL.win_act(_wer,,
      'Formuła',
      'Grafik'@@,,
      'Wyświetlenie grafiku w wybranym dniu'@,,
      "  _var:=exec('poprawnyTypWS','kaledit',(params_get().KWAL.DT));
         KAL_BUFF.cntx_psh();
         KAL_BUFF.index('PRZNODT');
         KAL_BUFF.prefix(P.ref(),'G','T',params_get().KWAL.DT);
         KAL_BUFF.first();
         _value:=KAL_BUFF.TYP+(1+(KAL_BUFF.TYPWS+' '));
         _var.prefix(_value,);
         VAR1.TYPWS:=_var.VALUE+' - '+_var.OPIS;
         _main_acr:=KAL_BUFF.win_edit('?');
         {? exec('isEnabled','prc_przerwy')
         || KAL_BUFF.win_edit('RED_P')
         || KAL_BUFF.win_edit('RED')
         ?};
         KAL_BUFF.display();
         KAL_BUFF.win_edit(_main_acr);
         KAL_BUFF.cntx_pop()
      ",,1,,,'G'
   );
   _KWAL.win_act(_wer,,
      'Formuła',
      'Legenda'@@,,
      'Wyświetlenie okna legendy'@,,
      "  exec('legenda','color','PRC_ROZ#01#','PRC#01')
      ",,1,,,'L',,'target=window'
   );
   _KWAL.win_act(_wer,,'Rekord',,,,"Color.fnd_kol('PRC_ROZ#01#0'+$params_get().KWAL.K)");
   _KWAL.win_act(_wer,0,'Wyświetl',,,,,"{? __KAL.get_day(params_get().KWAL.DT) || KAL_DEF.display() ?}")
?};
:: przyciski
{? _par.upr
|| _KWAL.win_btn(_wer,'text=%1'['Wylicz'@],'menu:W');
   _KWAL.win_btn(_wer,'text=%1'['Zablokowanie'@],'menu:Z');
   _KWAL.win_btn(_wer,'text=%1'['Odblokowanie'@],'menu:O')
?};
_KWAL.win_btn(_wer,'text=%1'['Plan dnia'@],'menu:P');
_KWAL.win_btn(_wer,'text=%1'['Grafik'@],'menu:G');
:: okienko główne tabeli z kwalifikacją czasu pracy
_wnd:=_KWAL.grp_make('Wykaz przepracowanych dni oraz kwalifikacji godzin. '@,,'grp_prc_rozlicz',,,,,_mode);
_KWAL.grp_sel(_wnd,,_wer,,
   "  params_set(_par:=params_get());
      _gray:=
         {? ~cur_tab(1,1).R_PRACDN
         || 'ZO'
         |? cur_tab(1,1).BL='T'
         || 'ZW'
         |? cur_tab(1,1).BL='N'
         || 'O'
         ?};
      {? ~__HARM.KW_AUTO || _gray+='W' ?};
      cur_tab(1,1).actions_grayed(cur_win(1,1),_gray);
      exec('pkd_refresh','pkd');
      grp_disp(cur_tab(1,1),cur_win(1,1),0)
   ",,,25,
   " {? _a=0
     || _par:=params_get();
        {? var_pres('SEL_AGET',_par.cfg.extra)>0 || obj_del(_par.cfg.extra.SEL_AGET) ?};
        _par.cfg.extra.SEL_AGET:=cur_tab(1,1).sel_aget();
        params_set(_par)
     ?}
   "
   ,,0,0,_mode,_side
);
_KWAL.grp_splt(_wnd,,'horizontal','panel1');
:: konfiguracja obszaru zakładek
_cfg:=exec('pkd_conf','pkd','PRC_HAR',_KWAL,_wnd,'PRC_HAR',_side);
_cfg.extra:=obj_new('FLAGA','WEWY','G','SEL_AGET');
_cfg.extra.WEWY:=0;
_cfg.extra.SEL_AGET:=_KWAL.sel_aget();
_cfg.final:='T';
params_set('par',_par,'cfg',_cfg,'KWAL',_KWAL,'WER',_wer,'KWKK',_KWKK,'PZD',_PZD);
:: dołączenie kolejnych zakładek
exec('prc_conf_kwew','prc_rozlicz',_cfg);
exec('prc_conf_podz','prc_rozlicz',_cfg);
exec('prc_conf_kwgo','prc_rozlicz',_cfg);
exec('prc_conf_droz','prc_rozlicz',_cfg);
exec('prc_conf_dodb','prc_rozlicz',_cfg);
exec('prc_conf_dodo','prc_rozlicz',_cfg);
exec('prc_conf_dnad','prc_rozlicz',_cfg);
exec('prc_conf_dwew_hist','prc_rozlicz',_cfg);
exec('prc_conf_dwew','prc_rozlicz',_cfg);
exec('prc_conf_dphw','prc_rozlicz',_cfg);
exec('prc_conf_pdnp','prc_rozlicz',_cfg);
:: zakończenie konfiguracji obszaru zakładek
exec('pkd_conf_end','pkd',_cfg);
:: Przygotowanie danych do wyświetlenia tabeli z kwalifikacją czasu pracy.
exec('licz_tab','prc_rozlicz',_par.od);
:: Wyświetlenie tabeli z kwalifikacją czasu pracy i zakładkami.
_KWAL.win_sel(_wnd);
_KWAL.actions(_wer,{? A_OKR.S='Z' || 'ZOWA' || '' ?});
($_cfg.prolog)();
VAR.P:=#P.ref();
AreaTitle.setTabWin(_KWAL,_wnd);
AreaTitle.setTitle();
_KWAL.select();
params_exec('oblicz','okres',1);
VAR.P:=0;
AreaTitle.setTabWin(P,_par.ud_def_win);
AreaTitle.setTitle();
($_cfg.epilog)();
VAR_DEL.delete('__GODZ');
R_POR_WW.fld_fml('DZK','BLANK',"*");
R_POR_WW.fld_fml('DZ','BLANK',"*");
~~


\prc_czp_pwer_afw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Wylicz" czynności weryfikacja czasu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? _par.KWAL.BL<>'T'
|| params_exec('wylicz_kw','prc_rozlicz')
|| {? ~_par.par.grupa || FUN.emsg('%1\n%2'['Dzień zablokowany.'@,'Opcja niedostępna.'@]) ?}
?}


\prc_czp_pwer_gbfw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed grupową akcją "Wylicz" dla czynności weryfikacja czasu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().par.grupa:=1


\prc_czp_pwer_gafw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po grupowej akcji "Wylicz" dla czynności weryfikacja czasu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().par.grupa:=0;
1


\prc_conf_dphw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zarejestrowane wejścia i wyjścia .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_POR_WW,'DZK','WER',,,'PRC_CZP_PPHW','PRC_CZP_DPHW',P)
|| return()
?};

_a.prolog+=
   "R_POR_WW.cntx_psh();
    {? exec('is_pzd02','ppsf')
    || R_POR_WW.fld_attr('CREATOR',2)
    ?};
   ";
_a.epilog+=
   "R_POR_WW.cntx_pop();
    {? exec('is_pzd02','ppsf')
    || R_POR_WW.fld_attr('CREATOR',1)
    ?};
   ";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zapisy z Portal HR'@,,,,,
   $($_a.bs)(_a.map,
      "  _KWAL:=params_get().KWAL;
         R_POR_WW.fld_fml('DZK','BLANK',$('date(%1)'[gsub(_KWAL.DT$2,'.',',')]));
         R_POR_WW.fld_fml('DZ','BLANK',$('date(%1)'[gsub(_KWAL.DT$2,'.',',')]));
         MASK.Use('R_POR_WW',_KWAL.DT~1,_KWAL.DT~2);
         R_POR_WW.index('DZK');
         R_POR_WW.prefix(P.ref(),_KWAL.DT);
         R_POR_WW.first()
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_dwew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Zarejestrowane wejścia i wyjścia .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_REJ_WW,'R_REJ_WW','WER',,,'PRC_CZP_DWEW','PRC_CZP_DWEW',P)
|| return()
?};

_a.prolog+="R_REJ_WW.cntx_psh();";
_a.epilog+="R_REJ_WW.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zakwalifikowane wejścia i wyjścia wg dnia'@,,,,,
   $($_a.bs)(_a.map,
      "  _KWAL:=params_get().KWAL;
         MASK.Use('R_REJ_WW',_KWAL.DT~1,_KWAL.DT~2);
         R_REJ_WW.prefix(P.ref(),_KWAL.DT);
         R_REJ_WW.first()
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\prc_conf_kwew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacje wejścia i wyjścia .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pzd02','ppsf')
|| {? ~_a.init(_a,R_SPEC,'LP','WER',,,'PRC_CZP_DWEW','PRC_CZP_DWEW',P)
   || return()
   ?}
|| {? ~_a.init(_a,R_SPEC,'R_SPECK','WER',,,'PRC_CZP_DWEW','PRC_CZP_DWEW',P)
   || return()
   ?}
?};

_a.prolog+="R_SPEC.cntx_psh();";
_a.epilog+="R_SPEC.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wejścia i wyjścia wg kwalifikacji'@,
   "  _empty:='';
      _no_empty:='';
      _gray:=
         {? params_get().KWAL.BL='T' | ~__HARM.mc_otw(params_get().KWAL.DT,0)
         || _no_empty:='dpuW';_empty:='dW'
         |? R_SPEC.ZM='D'
         || _no_empty:='p'
         || ''
         ?};
      {? ~__HARM.KW_AUTO || _no_empty+='W'; _empty+='W' ?};
      _gray:=_no_empty+':'+_empty;
      R_SPEC.actions_grayed('WER',_gray)
   ",,,,
   $($_a.bs)(_a.map,
      "  params_exec('kwalifikacja_wewy','prc_rozlicz');
         params_get.cfg.extra.WEWY:=_a;
         {? _a
         || R_OPCZYT.cntx_psh();
            R_OPCZYT.win_sel('SLO');
            R_OPCZYT.index('R_OPCZSL');
            R_OPCZYT.prefix('T')
         ?}
      "
   ),
   $($_a.as)(_a.map,
      "  {? _a
         || params_exec('wewy_as','prc_wewy');
            R_OPCZYT.cntx_pop()
         ?}
      "
   ),
   ,,_a.mode
)


\prc_conf_kwgo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacja czasu pracy .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_KWGODZ,'DATA_RUB','WER',,,'PRC_CZP_PKWA','PRC_CZP_PKWA',P)
|| return()
?};

_a.prolog+="R_KWGODZ.cntx_psh(); R_PRACDN.cntx_psh();";
_a.epilog+="R_KWGODZ.cntx_pop(); R_PRACDN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Kwalifikacja czasu pracy'@,
   "  _KWAL:=params_get().KWAL;
      MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
      {? _KWAL.BL='T' | ~R_PRACDN.seek(_KWAL.R_PRACDN,,1) | ~__HARM.mc_otw(params_get().KWAL.DT,0)
      || R_KWGODZ.actions_grayed('WER','dpu:d')
      || R_KWGODZ.actions_grayed('WER','')
      ?}
   ",,,,
   $($_a.bs)(_a.map,
      "  params_exec('kwalifikacja_godz','prc_rozlicz')
      "
   ),
   $($_a.as)(_a.map,
      "  {? _a
         || params_exec('kw_godz_as','prc_rozlicz')
         ?}
      "
   ),
   ,,_a.mode
)


\prc_conf_dodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wnioski o odbiór godzin.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_WO,'PORDO','SEL',,,'PRC_CZP_DODB','PRC_CZP_DODB',P)
|| return()
?};

_a.prolog+="R_WO.cntx_psh(); R_WYK.cntx_psh();";
_a.epilog+="R_WO.cntx_pop(); R_WYK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o odbiór nadgodzin w dniu'@,
   "  params_set(params_get());
      exec('conf_dodb_af','prc',R_WO.DO)
   ",,,,
   $($_a.bs)(
      _a.map,
      "  R_WYK.index('R_WYKDN');
         R_WO.clear();
         {? R_WO.f_active() || R_WO.f_clear() ?};
         R_WO.f_set(,
            \'join P join R_WYK using (R_WYK.R_WO,R_WO.REFERENCE)\',
            \'P.REFERENCE=\\\':_a\\\' and (R_WYK.DO=to_date(:_b) or R_WYK.DN=to_date(:_b))\',
            $P.ref,params_get().KWAL.DT
         );
         R_WO.f_first()
      "
   ),
   $($_a.as)(_a.map,
      "  {? R_WO.f_active() || R_WO.f_clear() ?}
      "
   ),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_wyk');
_a.table.grp_sel(_a.window,R_WYK,'WER',,,,9,5,,,,,_a.mode)


\prc_conf_dodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wnioski o czas wolny.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_ODN,'PRAC','SEL',,,'PRC_CZP_DODO','PRC_CZP_DODO',P)
|| return()
?};

_a.prolog+="R_ODN.cntx_psh(); R_ODP.cntx_psh();";
_a.epilog+="R_ODN.cntx_pop(); R_ODP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o czas wolny w dniu'@,
   $( 'params_set(params_get());
      R_ODP.index(\'NAG\');
      R_ODP.prefix({? {? R_ODN.f_active() || R_ODN.f_size() || R_ODN.size() ?} || R_ODN.ref() || null() ?});
      R_ODP.first();
      grp_disp(R_ODP,\'SEL\')'
   ),,,,
   $($_a.bs)(_a.map,
      "  R_ODN.prefix(P.ref(),params_get().KWAL.DT);
         {? ~R_ODN.first()
         || R_ODP.index('PRAC');
            R_ODP.prefix(P.ref(),params_get().KWAL.DT);
            {? R_ODP.first()
            || R_ODN.clear();
               {? R_ODN.f_active() || R_ODN.f_clear() ?};
               R_ODN.f_set(,
                  \'join P join R_ODP using (R_ODP.R_ODN,R_ODN.REFERENCE)\',
                  \'P.REFERENCE=\\\':_a\\\' and R_ODP.DW=to_date(:_b)\',
                  $P.ref,params_get().KWAL.DT
               );
               R_ODN.f_first()
            ?}
         ?}
      "
   ),
   $($_a.as)(_a.map,
      "  {? R_ODN.f_active() || R_ODN.f_clear() ?}
      "
   ),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_odp',',60%');
_a.table.grp_sel(_a.window,R_ODP,'SEL',,,,9,5,,
   "  {? _a || params_exec('oblicz_odprac','prc_rozlicz') ?}
   ",,,_a.mode
)


\prc_conf_dnad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Redakcja wniosków o pracę w nadgodzinach.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_NADG,'PRDATA','SEL','','','PRC_CZP_DNAD','PRC_CZP_DNAD',P)
|| return()
?};

_a.prolog+="
   R_NADG.cntx_psh();
   R_NADGK.cntx_psh();
   R_NADG.win_fml('SEL',POLA_GRP,'TXT_1',,'ICON_BEFORE',""exec('czy_pocz_icon','prc_nadg',R_NADG.CZY_POCZ)"");
   R_NADG.fld_attr('TYP',2);
   R_NADG.fld_attr('G',2);
   R_NADG.fld_attr('CZY_WYPL',2);
   R_NADG.fld_attr('CZY_POCZ',2);
   R_NADG.win_edit('RED');
   BPMN.KK_DOM:='PPL';
";
_a.epilog+="R_NADG.cntx_pop();R_NADGK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o nadgodziny'@,
   "params_exec('conf_dnad_af','prc_rozlicz')",,,,
   $($_a.bs)(_a.map,
      "  _p_ref:=P.ref();
         _data:=params_get().KWAL.DT;
         R_NADG.index('PRDATA');
         R_NADG.prefix(_p_ref,_data);
         {? ~R_NADG.first()
         || R_NADGK.index('TYPPRAC');
            R_NADGK.prefix('N',_p_ref,_data);
            {? R_NADGK.first()
            || R_NADG.clear();
               {? R_NADG.f_active() || R_NADGK.f_clear() ?};
               R_NADG.f_set(,
                  \'join P join R_NADGK using (R_NADGK.R_NADG,R_NADG.REFERENCE)\',
                  \'P.REFERENCE=\\\':_a\\\' and R_NADGK.DATA=to_date(:_b)\',
                  $_p_ref,_data
               );
               R_NADG.f_first()
            ?}
         ?}
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_nadg',',70%');
_a.table.grp_sel(_a.window,R_NADGK,'WER',,,,9,5,,,,,_a.mode,'R_NADG')


\conf_dnad_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Formuła do odświeżenia okna WER z tabeli R_NADGK w zakładce
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
R_NADGK.index('WNIOSEK');
_ref:=
   {? {? R_NADG.f_active() || R_NADG.f_size() || R_NADG.size() ?}
   || R_NADG.ref()
   || null()
   ?};
R_NADGK.prefix(_ref);
R_NADGK.first();
grp_disp(R_NADGK,'WER')


\prc_conf_pdnp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacja czasu pracy .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_PRACDN,'R_PRACDN','WER',,,'PRC_CZP_PDNP','PRC_CZP_PDNP',P)
|| return()
?};

_a.prolog+="R_PRACDN.cntx_psh();";
_a.epilog+="R_PRACDN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Dzień pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  _KWAL:=params_get().KWAL;
         MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
         R_PRACDN.prefix(P.ref(),params_get().KWAL.DT)
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
)


\prc_conf_podz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Podziały wykonania.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,PLOB_P,'PRAC','WER',,,'PRC_CZP_DWEW','PRC_CZP_DWEW',P)
|| return()
?};

_a.prolog+="PLOB_P.cntx_psh();";
_a.epilog+="PLOB_P.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Podziały'@,,,,,
   $($_a.bs)(_a.map,
      "PLOB_P.prefix(P.ref(),'W',params_get().KWAL.DT)
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
)


\prc_conf_droz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Roliczenie czasu pracy dla dnia z tabeli przepracowanych godzin.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: przygotowanie tabeli rozliczenia godzin
VAR_DEL.delete('__GODZ');
exec('tabela_godzin','prc_rozlicz',_a,params_get().par);
__GODZ:=_a.extra.G.TAB;

{? ~_a.init(_a,__GODZ,_a.extra.G.NDX,_a.extra.G.WER,,,'PRC_CZP_DROZ','PRC_CZP_DROZ',P)
|| return()
?};

_a.prolog+="";
_a.epilog+="";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny pracy'@,,,,,
   $($_a.bs)(_a.map,
      "  {? _a
         || params_exec('licz_tab_godz','prc_rozlicz')
         ?};
         __GODZ.prefix(params_get().KWAL.DT)
      "
   ),$($_a.as)(_a.map),,,_a.mode
)


\roznica
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Wyliczenie różnicy miesięcy między początkiem i końcem okresu.
::   WE: _a - [DATE] - Data od
::       _b - [DATE} - Data do
::   WY: Ilość miesięcy róźnicy 0 oznacza ten sam miesiąc.
::  OLD: \roznica/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=12*(_a~1)+_a~2;
_do:=12*(_b~1)+_b~2;
_do-_od


\tab_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Tworzy bufor tabeli dla kwalifikacji przepracowanych godzin.
::   WE:
::   WY: _KWAL - tabela do wyświetlania rozliczenia w wybranym okresie.
::  OLD: \tab_create/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,
   'LP','INTEGER','Lp',
   'AKRONIM','STRING[8]','Akronim',
   'NAZWA','STRING[30]','Nazwa',
   'TYP','STRING[20]','Typ');

_add:="_a.AKRONIM:=_b;
      _a.TYP:=_c;
      _a.NAZWA:=_d;
      _a.add()";
_add(_tab,'DT','DATE','Data',1);
_add(_tab,'CP','TIME','Praca');
_add(_tab,'CN','TIME','Nadmiar');
_add(_tab,'NB','TIME','Poprzednia doba');
_add(_tab,'WS','TIME','Wyjście służbowe');
_add(_tab,'WP','TIME','Wyjście prywatne');
_add(_tab,'BL','STRING[1]','Blokada');
_add(_tab,'OG','TIME','Odbiór');
_add(_tab,'DN5','TIME','Odebrane 50%');
_add(_tab,'DN1','TIME','Odebrane 100%');
_add(_tab,'G54','TIME','Przepracowane');
_add(_tab,'G55','TIME','Nadgodziny 50%');
_add(_tab,'G56','TIME','Nadgodziny 100%');
_add(_tab,'G57','TIME','Godziny nocne');
_add(_tab,'G58','TIME','Godziny w dni wolne');
_add(_tab,'G65','TIME','Potencjalne średniotygodniowe');
_add(_tab,'G64','TIME','Dopełnienie do pełnego etatu');
_add(_tab,'G67','TIME','Liczba godzin do wynagrodzenia średniotygodniowego');
_add(_tab,'G66','TIME','Liczba godzin do dodatku średniotygodniowego');
_add(_tab,'G68','TIME','Liczba godzin do dodatku 50% do pełnego etatu');
_add(_tab,'G69','TIME','Liczba godzin do dodatku 100% do pełnego etatu');
_add(_tab,'DTI','DATE','Data ind');
_add(_tab,'K','INTEGER','Kolor');
_add(_tab,'N','STRING[20]','Nieobecność');
_add(_tab,'NI','STRING[6]','Nieobecność');
_add(_tab,'LP','STRING[12]','Dzień');
_add(_tab,'R_PRACDN','INTEGER','Dzien pracy');
_add(_tab,'TYP','STRING[2]','Typ');
_add(_tab,'GRAF','STRING[1]','Pochodzenie danych');
_add(_tab,'DOP','TIME','Dopełnienie do etartu');
_add(_tab,'WYMIAR','TIME','Wymiar dzienny');
_add(_tab,'NORMA','TIME','Nominalny wymiar dzienny');
_add(_tab,'ODP','TIME','Godziny odpracowane');
_add(_tab,'PD','STRING[1]','Nieobecności godzinowa');
_add(_tab,'CPP','TIME','Praca pierwotna');
_add(_tab,'STATUS','STRING[1]','Status');
_add(_tab,'G7135','TIME','Poza siedzibą');
_add(_tab,'PPSF','STRING[1]','Generowanie');
_add(_tab,'KK_PZ','STRING[16]','Konto kosztów - praca zdalna');
_rub:=__RUB.sys_rub(8311);
{? _rub.first
|| {!
   |? {? ~_tab.find_tab(,'AKRONIM',,'=','G'+$_rub.RN)
      || _tab.NAZWA:=_rub.RT;
         _tab.AKRONIM:='G'+$_rub.RN;
         _tab.TYP:='TIME';
         _tab.add()
      ?};
      _rub.next
   !}
?};

{? _tab.first
|| _kwal:='tab_tmp(1';
   {!
   |? _kwal+=',';
      _kwal+='\''+_tab.AKRONIM+'\''+','+'\''+_tab.TYP+'\''+','+'\''+_tab.NAZWA+'\'';
      _tab.next
   !};
   _kwal+=')'
|| _kwal:=''
?};
($_kwal)()


\ust_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Ustawienie wartości pola K w tabeli dla kwalifikacji przepracowanych godzin.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;

_ppsf:={? _KWAL.PPSF='G' || _KWAL.G7135 || *0 ?};
{? _KWAL.STATUS='E' & _KWAL.DT<date()
|| _KWAL.K:=9
|? _KWAL.BL='T'
|| _KWAL.K:=7
|? 2+_KWAL.NI='OD'
|| _KWAL.K:=6
|? _KWAL.NI<>'' & _KWAL.PD<>'T'
|| _KWAL.K:=4
|? _KWAL.NI<>'' & _KWAL.PD='T'
|| _KWAL.K:=5
|? _KWAL.OG=_KWAL.NB & _KWAL.OG<>*0
|| _KWAL.K:=3
|? _KWAL.CP+_KWAL.CN-_KWAL.NB+_KWAL.OG+_ppsf=_KWAL.G54+_KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G65
      &
      (_KWAL.CP+_KWAL.G54+_KWAL.CN+_KWAL.NB+_KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G65)>*0
|| _KWAL.K:=2
|? (_KWAL.CN-_KWAL.NB+_KWAL.OG<>_KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G64+_KWAL.G65+_KWAL.G68+_KWAL.G69)
   &
   _KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G64+_KWAL.G65+_KWAL.G68+_KWAL.G69+_KWAL.CN-_KWAL.NB+_KWAL.OG+_ppsf<>*0
   |
   _KWAL.DN5<>*0
   |
   _KWAL.DN1<>*0
|| _KWAL.K:=3
|? _KWAL.G54+_KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G64+_KWAL.G65+_KWAL.G68+_KWAL.G69=*0
|| _KWAL.K:=1
|? _KWAL.OG>*0 & _KWAL.G55>*0
|| _KWAL.K:=3
|? _KWAL.G54+_KWAL.G55+_KWAL.G56+_KWAL.G58+_KWAL.G64+_KWAL.G65+_KWAL.G68+_KWAL.G69<>*0
|| _KWAL.K:=3
|| _KWAL.K:=1
?}


\licz_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja wprowadzająca dane do tabeli rozliczenia czasu pracy
::   WE: _a - [DATE] - Ustalenie bufora w tabeli dla kwalifikacji przepracowanych godzin po wyjściu z funkcji
::       _b - [INTEGER] - 1 wołana bez okienka - kwalifikacja zdalna
::       _c - [INTEGER] - czy uwzględniac nieobecności
::  OLD: \licz_tab/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
:: Statusy pracy poza siedzibą firmy (R_PRACDN.PPSF):
::    'W' - Praca poza siedzibą firmy na podstawie we/wy.
::    'G' - Praca poza siedzibą firmy na część dnia - liczba godzin.
::    'N' - Praca poza siedzibą firmy nie występuje.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().par;
_KWAL:=params_get().KWAL;
_KWKK:=params_get().KWKK;
_PZD:=params_get().PZD;
_b:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_c:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_KWAL.lock(2,1);
{? _KWAL.first()
|| {! |? _KWAL.del() !}
?};
_KWAL.unlock();
_KWKK.erase();
_PZD.erase();
R_SPEC.cntx_psh();
R_SPEC.clear();
R_SPEC.f_set(,,''+"P=:_a and DZ between to_date(:_b) and to_date(:_c)",P.ref(),_par.od,_par.do);
{? R_SPEC.f_first()
|| {!
   |? {? R_SPEC.f_get() || R_SPEC.del() ?};
      R_SPEC.f_first()
   !}
?};
{? R_SPEC.f_active() || R_SPEC.f_clear() ?};
R_SPEC.cntx_pop();

_lp:=0;

{! _ii:=0.._par.rozn
|! VAR_EDIT.cntx_psh();
   _data:=date(_par.do~1,_par.do~2-_ii,1);
   R_WYK.index('R_WYKDN');
   MASK.Use('R_KWGODZ',_data~1,_data~2);
   MASK.Use('R_PRACDN',_data~1,_data~2);
   R_KWGODZ.index('DATA_RUB');
   R_PRACDN.index('R_PRACDN');
   R_PRACDN.prefix(P.ref());
   {? R_PRACDN.first()
   || {!
      |? {? R_PRACDN.DT>=_par.od & R_PRACDN.DT<=_par.do
         || _KWAL.blank(1);
            _lp+=1;
            {! _ind:=2..8
            |! _acr:=R_PRACDN.fld_acr(_ind);
               ($('_a.'+_acr))(_KWAL):=($('R_PRACDN.'+_acr))()
            !};
            _KWAL.CPP:=_KWAL.CP;
            _KWAL.GRAF:=R_PRACDN.GRAF;
            _KWAL.R_PRACDN:=#R_PRACDN.ref();
            _KWAL.STATUS:=R_PRACDN.ZM;
            _KWAL.PPSF:=R_PRACDN.PPSF;
            params_exec('r_kwg_s','prc_rozlicz',1);
            _KWAL.LP:=(3+_KWAL.DT$7)+'.';
            __KAL.get_day(R_PRACDN.DT);
            _KWAL.TYP:=__KAL.type_day(_KWAL.DT);
            params_exec('dopelnienie','prc_rozlicz',R_PRACDN.DT);
            _KWAL.DTI:=_KWAL.DT;
            _KWAL.add()
         ?};
         R_PRACDN.next()
      !}
   ?};
   {! _ind:=1..date(_data~1,_data~2,0)~3
   |! _data_t:=date(_data~1,_data~2,_ind);
      VAR_EDIT.DATA:=_data_t;
      VAR_EDIT.ROK:=_data_t~1;
      VAR_EDIT.MSC:=_data_t~2;
      {? ~R_PRACDN.find_key(_data_t)
      || R_PRACDN.blank();
         R_PRACDN.DT:=_data_t;
         R_PRACDN.ZM:='A';
         R_PRACDN.add()
      ?}
   !};
   VAR_EDIT.cntx_pop()
!};
:: wprowadzenie nieobecności
{? ~_b | _c
|| _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref(),_par.od,_par.do);
   {? _NBS.first()
   || {!
      |? {? _KWAL.find_key(_NBS.DZIEN)
         || _KWAL.N:=_NBS.RT;
            _KWAL.CP+=*(_NBS.G*60);
            _KWAL.NI:=exec('nieo_typ','grafik',_NBS.RN);
            _KWAL.PD:=_NBS.PD;
            _KWAL.put()
         || _KWAL.blank();
            _KWAL.CP:=*(_NBS.G*60);
            _KWAL.N:=_NBS.RT;
            _KWAL.NI:=exec('nieo_typ','grafik',_NBS.RN);
            _KWAL.DTI:=_KWAL.DT:=_NBS.DZIEN;
            _KWAL.LP:=(3+_KWAL.DT$7)+'.';
            params_exec('dopelnienie','prc_rozlicz',_KWAL.DT);
            __KAL.get_day(_KWAL.DT);
            _KWAL.TYP:=__KAL.type_day(_KWAL.DT);
            _KWAL.add()
         ?};
         _NBS.next()
      !}
   ?}
?};

_tab_odb:=tab_tmp(1,
   'D','DATE','Dzień',
   'G','TIME','Godziny'
);
:: odbiory
R_WYK.cntx_psh();
R_WYK.index('R_WYKDN');
{? _KWAL.first()
|| {!
   |? R_WYK.prefix(P.ref(),_KWAL.DT);
      {? R_WYK.first
      || _odbior5:=_odbior1:=time(0,0,0);
         {!
         |? {? R_WYK.R().RN=55 || _odbior5+=R_WYK.G || _odbior1+=R_WYK.G ?};
            R_WYK.next()
         !};
         _KWAL.DN5:=_odbior5;
         _KWAL.DN1:=_odbior1
      ?};
      params_exec('ust_kol','prc_rozlicz',_b);
      _KWAL.put();
      _KWAL.next()
   !}
?};

R_WYK.index('R_WYKDO');
R_WYK.prefix(P.ref());
{? R_WYK.first()
|| {!
   |? {?  R_WYK.DO>=_par.od & R_WYK.DO<=_par.do
      || {? _tab_odb.find_key(R_WYK.DO) & R_WYK.R().RN<>58
         || _tab_odb.G:=_tab_odb.G+R_WYK.GO;
            _tab_odb.put()
         || _tab_odb.blank();
            _tab_odb.D:=R_WYK.DO;
            _tab_odb.G:=R_WYK.GO;
            _tab_odb.add(1)
         ?}
      ?};
      R_WYK.next()
   !}
?};
R_WYK.cntx_pop();
:: dodanie dni odbioru
{? _tab_odb.first()
|| {!
   |? {? ~_KWAL.find_key(_tab_odb.D)
      || _KWAL.blank(1);
         _KWAL.OG:=_tab_odb.G;
         _KWAL.DTI:=_KWAL.DT:=_tab_odb.D;
         params_exec('dopelnienie','prc_rozlicz',_KWAL.DT);
         __KAL.get_day(_KWAL.DT);
         _KWAL.TYP:=__KAL.type_day(_KWAL.DT);
         _KWAL.NI:='ODBIÓR';
         _KWAL.K:=6;
         _KWAL.LP:=(3+_KWAL.DT$7)+'.';
         _KWAL.add(1)
      || _KWAL.OG:=_tab_odb.G;
         {? _KWAL.CP+_KWAL.CN=*0
         || _KWAL.NI:='ODBIÓR';
            _KWAL.K:=6
         || params_exec('ust_kol','prc_rozlicz',_b)
         ?};
         _KWAL.put()
      ?};
      _tab_odb.next()
   !}
?};
:: godziny odpracowane
_tab_odp:=tab_tmp(1,
   'D','DATE','Dzien',
   'G','TIME','Godziny'
);

R_ODP.index('PRAC');
_do:=_par.do;
{!
|?  R_ODP.prefix(P.ref(),_do);
    {? R_ODP.first()
    || _odbior:=time(0,0,0);
       {!
       |? _odbior+=R_ODP.G;
          {? _tab_odp.find_key(R_ODP.DW)
          || _tab_odp.G:=_tab_odp.G+R_ODP.G;
             _tab_odp.put(1)
          || _tab_odp.blank();
             _tab_odp.D:=R_ODP.DW;
             _tab_odp.G:=R_ODP.G;
             _tab_odp.add(1)
         ?};
         R_ODP.next()
      !}
   ?};
   params_exec('ust_kol','prc_rozlicz',_b);
   _do-=1;
   _do>=_par.od
!};
:: dodanie godzin odpracowania
{? _tab_odp.first()
|| {!
   |? {? ~_KWAL.find_key(_tab_odp.D)
      || _KWAL.blank(1);
         _KWAL.ODP:=_tab_odp.G;
         _KWAL.DTI:=_KWAL.DT:=_tab_odp.D;
         params_exec('dopelnienie','prc_rozlicz',_KWAL.DT);
         _KWAL.TYP:=__KAL.type_day(_KWAL.DT);
         _KWAL.NI:='ODPRAC';
         _KWAL.K:=6;
         _KWAL.LP:=(3+_KWAL.DT$7)+'.';
         _KWAL.add(1)
      || _KWAL.ODP:=_tab_odp.G;
         params_exec('ust_kol','prc_rozlicz',_b);
         _KWAL.put()
      ?};
      _tab_odp.next()
   !}
?};
:: podsumowaie
{? ~_b
|| _do:=_par.do;
   {!
   |? {? ~_KWAL.find_key(_do)
      || _KWAL.blank(1);
         __KAL.get_day(_do);
         _KWAL.TYP:=__KAL.type_day(_do);
         _KWAL.DTI:=_KWAL.DT:=_do;
         _KWAL.K:=1;
         params_exec('dopelnienie','prc_rozlicz',_KWAL.DT);
         _KWAL.LP:=(3+_KWAL.DT$7)+'.';
         {? 1+_KWAL.TYP='R' & _KWAL.CP+_KWAL.G7135>*0
         || {? _KWAL.WYMIAR>_KWAL.CP+_KWAL.G7135
            || _KWAL.NB:=_KWAL.WYMIAR-_KWAL.CP
            || _KWAL.NB:=*0
            ?}
         ?};
         _KWAL.add(1)
      ||  params_exec('dopelnienie','prc_rozlicz',_KWAL.DT);
         {? 1+_KWAL.TYP='R' & _KWAL.CP+_KWAL.DN5+_KWAL.DN1>*0
         || {? _KWAL.WYMIAR>_KWAL.CP
            || _KWAL.NB:=_KWAL.WYMIAR-_KWAL.CP
            || _KWAL.NB:=*0
            ?}
         ?};
         _KWAL.put(1)
      ?};
      _do-=1;
      _do>=_par.od
   !}
?};
_KWAL.prefix();
_KWAL.find_ge(_a);
~~


\r_kwg_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Dodatkowe informacje przepisywane do tab
::   WE: _a - [INTEGER] - 0 - zerowanie, 1 - wstawianie
::   WY:
::  OLD: \r_kwg_s/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;
_PZD:=params_get().PZD;
_PZD.erase();
_ppsf:=exec('is_pzd01','ppsf');
R_KWGODZ.prefix(P.ref(),_KWAL.DT);
{? R_KWGODZ.first()
|| {!
   |? {? _ppsf & __RUB.sys_attr(R_KWGODZ.KW,816,_KWAL.DT)
:   |? {? _ppsf & R_PRACDN.PPSF_R=R_KWGODZ.KW
      || {? ~_a
         || _KWAL.G7135:=time(0,0,0)
         || _PZD.add(_KWAL.DT,R_KWGODZ.KW().RN,'G7135',R_KWGODZ.GODZ);
            _KWAL.G7135+=R_KWGODZ.GODZ
         ?}
      || {? R_KWGODZ.KW().RN>=54 & R.RN<=58 | R.RN=67 | R.RN=64 | R.RN=65 | R.RN=68 | R.RN=69
      || {? ~_a
         || ($('_a.'+'G'+$R_KWGODZ.KW().RN))(_KWAL):=time(0,0,0)
         || ($('_a.'+'G'+$R_KWGODZ.KW().RN))(_KWAL)+=R_KWGODZ.GODZ
         ?}
         ?}
      ?};
      R_KWGODZ.next()
   !};
:: godziny firmowe
   _rub:=__RUB.sys_rub(8311);
   {? _rub.first
   || {!
      |? {? R_KWGODZ.find_key(_rub.RN)
         || {? ~_a
            || ($('_a.'+'G'+$_rub.RN))(_KWAL):=time(0,0,0)
            || ($('_a.'+'G'+$_rub.RN))(_KWAL)+=R_KWGODZ.GODZ
            ?}
         ?};
         _rub.next
      !}
   ?}
?}


\dopelnienie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyliczenie średniej liczby godzin w dniu pracy dla współpracownika.
::       Wypełnienie pól DOP i WYMIAR w tabeli dla kwalifikacji przepracowanych godzin.
::   WE: a - [DATE] - Data badania
::   WY:
::  OLD: \dopelnienie/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;
_wymiar:=_KWAL.WYMIAR:=exec('wymiar_godz','prc_rozlicz',_a);
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref);
_nieob:={? N.find_le(_a) & N.DO>=_a & ~__RUB.sys_attr(N.NB,122722) & ~__RUB.sys_attr(N.NB,122742)
        || {? N.PARTDAY='T' || *((N.NG*60)$2) || _wymiar ?}
        || *0
        ?};
N.cntx_pop();
_KWAL.WYMIAR-=_nieob;
{? _KWAL.WYMIAR<*0 || _KWAL.WYMIAR:=*0 ?};
_dop:=_wyn:=0;
_wym:={? H.find_le(_a) || H.WY || 1 ?};
A_SCPP.index('POD');
A_SCPP.prefix(P.ref());
_godz:={? A_SCPP.find_le(_a) || *(A_SCPP.A_SCP().ND)/60 ?};
_kal_norm:=exec('get_kal_norm','grafik',P.ref(),_a);
{? _kal_norm=0 || _kal_norm:=8 ?};
{? _godz=0 || _godz:=_kal_norm ?};
_w_kal:=__KAL.w_hours(_a,_a);
{? _godz>_kal_norm
|| {? _w_kal<=_kal_norm
   || _godz:=_kal_norm
   |? _w_kal<_godz
   || _godz:=_w_kal
   ?}
?};

_KWAL.NORMA:=*((_godz*60)$2);
_KWAL.NORMA-=_nieob;
{? _KWAL.NORMA<*0 || _KWAL.NORMA:=*0 ?};
{? _wym<>1
|| _praca:=*(_KWAL.NORMA-_KWAL.WYMIAR)/60;
   {? H.CZY_NADG='T'
   || _wyn:=H.DOP_NADG;
      {? _praca<0 || _praca:=0 ?};
      _dop:={? _praca>_wyn || _wyn || _praca ?}
   || _dop:=_praca
   ?}
|| _dop:=*(_KWAL.NORMA-_KWAL.WYMIAR)/60;
   {? _dop<0 || _dop:=0 ?}
?};
H.cntx_pop();
_KWAL.DOP:=*((_dop*60)$2)


\wymiar_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Wyliczenie średniej liczby godzin w dniu pracy dla współpracownika.
::   WE: _a - [DATE] - Data badania
::   WY: [TIME] nominalna ilość godzin pracy współpracownika
::  OLD: \wymiar_godz/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_wym:=__KAL.w_hours(_a,_a,,1);
{? ~_wym
|| H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   _wym:={? H.find_le(_a) || H.WY || 1 ?};
   H.cntx_pop();
   _kal_norm:=exec('get_kal_norm','grafik',P.ref(),_a);
   {? _kal_norm=0 || _kal_norm:=8 ?};
   _wym*=_kal_norm
?};
*((_wym*60)$2)


\nieobecnosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2006]
:: OPIS: Wyliczenie nieobecności w okresie. Wypełnienie tabeli _NBS dniami nieobecności z opisem
::   WE: _a - [REFERENCE]- wskazanie na współpracownika,
::       _b - [DATE] - Data początku okresu,
::       _c - [DATE] - Data końca okresu
::   WY: Tabela z nieobecnościami.
::  OLD: \nieobecnosc/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_rubMacP:=__RUB.sys_sql(122722);
_rubRodP:=__RUB.sys_sql(122742);
_rn:='';
{? _rubMacP<>''
|| _rn+=_rubMacP;
   {? _rubRodP<>'' || _rn+=','+_rubRodP ?}
|? _rubRodP<>'' || _rn+=_rubRodP
|| _rn+='0'
?};
{? var_pres('PARTDAY',N)>0
|| _NBN:=sql(
      'select  R.RT, N.OD, N.DO, R.RN RN, N.NG G, N.PARTDAY PD '
      'from N join P join R '
      'where N.P=:_a and N.KOR=\'N\' and R.RN not in (:_d) and OD<=to_date(:_c) and to_date(:_b)<=DO '
      'order by 2',
      _a, _b,_c,_rn
   )
|| _NBN:=sql(
   'select  R.RT, N.OD, N.DO, R.RN RN, N.NG G, \'N\' PD '
   'from N join P join R '
   'where N.P=:_a and N.KOR=\'N\' and R.RN not in (:_d) and OD<=to_date(:_c) and to_date(:_b)<=DO '
   'order by 2',
   _a, _b,_c,_rn
   )
?};
_NBS:=tab_tmp( 1,
   'DZIEN','DATE','Data nieobecnosci',
   'RT','STRING[20]','Opis',
   'RN','INTEGER','Numer',
   'G','REAL','Godziny',
   'PD','STRING[1]','Nieobecność godzinowa'
);
{? P.KAL
|| __KAL.set_cal(P.KAL().NAZWA,_b~1)
|| __KAL.set_cal('standard')
?};

H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? _NBN.first()
|| {!
   |? _dat:={? _b>_NBN.OD || _b || _NBN.OD ?};
      {!
      |? _NBS.RT:=_NBN.RT;
         _NBS.DZIEN:=_dat;
         _NBS.RN:=_NBN.RN;
         _NBS.PD:=_NBN.PD;
         _NBS.G:=__KAL.w_hours(_NBS.DZIEN,_NBS.DZIEN,,1);
         _NBS.G*={? P.KIN<>'T' || {? H.find_le(_dat) || H.WY || P.WY ?} || 1 ?}$2;
         {? _NBS.G>_NBN.G || _NBS.G:=_NBN.G ?};
         _NBS.add();
         _dat+=1;
         _dat<=_NBN.DO & _dat<=_c
      !};
      _NBN.next()
   !}
?};
H.cntx_pop();
_NBS


\blokada
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Zablokowanie dnia przepracowanego przed ponowną kwalifikacją.
::   WE: _a - [INTEGER] - 1 blokowanie, 0 odblokowanie
::       _b - [REFERENCE] - wskazanie na A_OKR. UWAGA! domyślnie brany jest aktualny A_OKR.ref
::   WY: Czy udało sie zablokować/odblokować dzień
::  OLD: \blokada/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;
_blokuj:={? var_pres('_a')=type_of(0) || _a || return(-1)  ?};
_a_okr:={? var_pres('_b')=type_of(null()) || _b || A_OKR.ref() ?};
_ret_val:=0;
MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);

R_PRACDN.index('R_PRACDN');
R_PRACDN.prefix(P.ref());
{? R_PRACDN.seek(_KWAL.R_PRACDN,)
|| {? _blokuj
   || R_PRACDN.BL:='T';
      _KWAL.BL:='T'
   || R_PRACDN.BL:='N';
      _KWAL.BL:='N'
   ?};
   params_exec('ust_kol','prc_rozlicz');
   _ret_val:=R_PRACDN.put();
   _KWAL.put();
   {? _ret_val
   || _wyn:=exec('del_plan','grafik',P.ref(),_KWAL.DT,_KWAL.DT,'w',_a_okr)
   ?}
?};
_ret_val


\wylicz_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyliczenie wartości w tabeli dla kwalifikacji przepracowanych godzin. Poprzednio formuła __wylicz()
::   WE: _a -
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;
_PZD:=params_get().PZD;
_popokr:={? var_pres('_a')=type_of(0) || _a || 0 ?};

{? _KWAL.BL<>'T' & (__HARM.mc_otw(_KWAL.DT,1,_popokr) | ~__HARM.OKRES)
|| {? VAR_EDIT.FLAGA=2
   || params_exec('akt_prac','prc_wewy',_KWAL.DT,_KWAL.DT,1,1)
   || params_exec('akt_prac','prc_wewy',_KWAL.DT,_KWAL.DT)
   ?};
   params_exec('licz_tab','prc_rozlicz',_KWAL.DT);
:: licz_tab zmienia maskę tabeli R_KWGODZ
   MASK.Use('R_KWGODZ',_KWAL.DT~1,_KWAL.DT~2);
   params_exec('wylicz','prc_rozlicz');
   params_exec('ust_kol','prc_rozlicz');
   _KWAL.put();
   {! _ind:=54..58
   |! _wart:=($('_a.G'+$_ind))(_KWAL);
      params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_ind,_wart,,_popokr)
   !};
:: obsługa godzin firmowych
   _rub:=__RUB.sys_rub(8311);
   {? _rub.first
   || {!
      |? _wart:=($('_a.G'+$_rub.RN))(_KWAL);
         params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub.RN,_wart,,_popokr);
         _rub.next
      !}
   ?};
   params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,64,_KWAL.G64,,_popokr);
   params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,65,_KWAL.G65,,_popokr);
   params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,68,_KWAL.G68,,_popokr);
   params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,69,_KWAL.G69,,_popokr);

:: praca poza siedzibą firmy
   MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
   R_PRACDN.index('R_PRACDN');
   R_PRACDN.prefix(P.ref());
   {? exec('is_pzd01','ppsf')
   || _rub_zdal:=__RUB.sys_rub(816);
      {? _rub_zdal.first
      || {!
         |? params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub_zdal.RN,*0,,_popokr);
            _rub_zdal.next
         !}
      ?};
      {? exec('is_pzd02','ppsf')
      || _PZD.tab.prefix(_KWAL.DT);
         {? _PZD.tab.first()
         || {!
            |? params_exec('wpr_godz','prc_rozlicz',_PZD.tab.DT,_PZD.tab.RN,_PZD.tab.GODZ,,_popokr,_KWAL.KK_PZ);
               _PZD.tab.next()
            !}
         ?}
      || {? R_PRACDN.seek(_KWAL.R_PRACDN,) & R_PRACDN.PPSF_R
         || _rub7135:=R_PRACDN.PPSF_R().RN
         || _rub7135:=7135
         ?};
         params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub7135,_KWAL.G7135,,_popokr,_KWAL.KK_PZ)
      ?}
   || params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,7135,_KWAL.G7135,,_popokr,_KWAL.KK_PZ)
   ?};
   params_exec('add_wymiar_67','prc_rozlicz',_KWAL.DT);
   params_exec('r_kwg_s','prc_rozlicz',0);
   params_exec('r_kwg_s','prc_rozlicz',1);
   _KWAL.put();
   params_exec('wstep_odprac','prc_rozlicz',_KWAL.DT)
?};
~~


\isBlokada
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Sprawdza czy zablokowano dzień przed ponowną kwalifikacją.
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATA]      - data badania
::   WY: (-1) - błędne parametry
::        (0) - brak blokady
::        (1) - jest blokada
::  OLD: \isBlokada/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(-1) ?};
 _data:={? var_pres('_b')=type_of(#0) || _b || return(-1) ?};

R_PRACDN.cntx_psh();
MASK.Use('R_PRACDN',_data~1,_data~2);
_ret_val:=0;
R_PRACDN.index('R_PRACDN');
R_PRACDN.prefix(_p_ref,_data);
{? R_PRACDN.first()
|| {? R_PRACDN.BL='T'
   || _ret_val:=1
   ?}
?};
R_PRACDN.cntx_pop();
_ret_val


\kwal_zdalnie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Kwalifikacja godzin bez okienka - zdalnie ref pracownika musi być ustalony
::       Tabela tymczasowa tab musi być powołana
::   WE: _a - date - początek
::       _b - date - koniec
::       _c - date - kwalifikacja wyłącznie dla jednego dnia
::   WY:
::  OLD: \kwal_zdalnie/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_KWAL:=params_get().KWAL;
_KWKK:=params_get().KWKK;
_PZD:=params_get().PZD;
{? _a=#0 | _b=#0 || return(0) ?};
_par:=obj_new('rozn','od','do');
_par.od:=_a;
_par.do:=_b;
_par.rozn:=exec('roznica','prc_rozlicz',_a,_b);
params_set('KWAL',_KWAL,'KWKK',_KWKK,'PZD',_PZD,'par',_par);
_ppsf:=exec('is_pzd01','ppsf');
:: ustawiamy flagę na 2 na potrzeby poprawnej kwalifikacji godzin
VAR_EDIT.cntx_psh();
VAR_EDIT.FLAGA:=2;
VAR_EDIT.DATA:=_a;

:: ustawienie kalendarza
{? P.KAL
|| __KAL.set_cal(P.KAL().NAZWA,_par.od~1)
|| __KAL.set_cal('standard')
?};
A_OKRP.cntx_psh();
A_OKRP_M.cntx_psh();
A_OKRP.index('A_OKRDP');
A_OKRP.prefix(P.ref());
A_OKRP_M.index('A_OKRPM');
_webTerm:=app_info('web_sesid')<>'';
{? ~_webTerm
|| params_exec('akt_prac','prc_wewy',_par.od,_par.do,1,1,,1)
?};
exec('licz_tab','prc_rozlicz',_par.od,1,1);

{? __HARM.KW_AUTO
||
:: prefix na tabelę _KWAL może być założony dopiero po exec('licz_tab','prc_rozlicz')
   {? var_pres('_c')=type_of(#0) || _KWAL.prefix(_c) ?};
   {? _KWAL.first()
   || _rub:=__RUB.sys_rub(8311);
      _rub_zdal:=__RUB.sys_rub(816);
      {!
      |? _popokr:=exec('prz_okr','prc_rozlicz',_KWAL.DT);
         {? _KWAL.BL<>'T' & __HARM.mc_otw(_KWAL.DT,0,_popokr)
         || MASK.Use('R_KWGODZ',_KWAL.DT~1,_KWAL.DT~2);
            exec('wylicz','prc_rozlicz');

            params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,64,_KWAL.G64,1,_popokr);
            params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,65,_KWAL.G65,1,_popokr);
            params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,68,_KWAL.G68,1,_popokr);
            params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,69,_KWAL.G69,1,_popokr);

::          praca poza siedzibą firmy
            MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
            R_PRACDN.index('R_PRACDN');
            R_PRACDN.prefix(P.ref());
            {? _ppsf
            || {? _rub_zdal.first
               || {!
                  |? params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub_zdal.RN,*0,,_popokr);
                     _rub_zdal.next
                  !}
               ?};
               {? exec('is_pzd02','ppsf')
               || _PZD.tab.prefix(_KWAL.DT);
                  {? _PZD.tab.first()
                  || {!
                     |? params_exec('wpr_godz','prc_rozlicz',
                           _PZD.tab.DT,_PZD.tab.RN,_PZD.tab.GODZ,,_popokr,_KWAL.KK_PZ);
                        _PZD.tab.next()
                     !}
                  ?}
               || {? R_PRACDN.seek(_KWAL.R_PRACDN,) & R_PRACDN.PPSF_R
                  || _rub7135:=R_PRACDN.PPSF_R().RN
                  || _rub7135:=7135
                  ?};
                  params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub7135,_KWAL.G7135,,_popokr,_KWAL.KK_PZ)
               ?}
            || params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,7135,_KWAL.G7135,,_popokr,_KWAL.KK_PZ)
            ?};

            {! _ind:=54..58
            |! _wart:=($('_a.G'+$_ind))(_KWAL);
               params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_ind,_wart,1,_popokr)
            !};
:: obsługa godzin firmowych
            {? _rub.first
            || {!
               |? _wart:=($('_a.G'+$_rub.RN))(_KWAL);
                  params_exec('wpr_godz','prc_rozlicz',_KWAL.DT,_rub.RN,_wart,1,_popokr);
                  _rub.next
               !}
            ?};
            exec('add_wymiar_67','prc_rozlicz',_KWAL.DT);
            exec('r_kwg_s','prc_rozlicz',0);
            exec('r_kwg_s','prc_rozlicz',1);
            _KWAL.put();
            exec('wstep_odprac','prc_rozlicz',_KWAL.DT)
         ?};
         _KWAL.next()
      !}
   ?}
?};
A_OKRP.cntx_pop();
A_OKRP_M.cntx_pop();
VAR_EDIT.cntx_pop();
1


\prz_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Weryfikacja czy w bieżącym dniu istnieje wejście z datą dnia nastepnego lub nierozliczone godziny
::   WE: _a  [DATE]      - data badania
::      [_b] [INTEGER]   - sprawdź wszystko (1 - domyślnie) lub tylko tabelę kwalifikacji (0)
::      [_c] [REFERENCE] - wskazanie na pracownika (domyślnie bieżący rekord)
::   WY:
::  OLD: \prz_okr/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=_ok:=0;
_data:={? var_pres('_a')=type_of(#0) || _a || return(_ret) ?};
_all:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_p_ref:={? var_pres('_c')=type_of(null()) || _c || P.ref() ?};

:: Sprawdzenie daty zamknięcia miesiąca
_closeD:=exec('getMscCloseDate','grafik',_data,1);
{? _closeD=#0
|| return(1)
?};

R_KWGODZ.cntx_psh();
MASK.Use('R_KWGODZ',_data~1,_data~2);
R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(_p_ref,_data);

:: Jeżeli jest zapis rozliczenia bez wypełnionej daty lub brak rozliczenia
{? R_KWGODZ.first()
|| {!
   |? _ret:=(R_KWGODZ.MR=#0);
      ~_ret & R_KWGODZ.next()
   !}
|| _ok:=1
?};
R_KWGODZ.cntx_pop();

:: Dodatkowa sytuacja: dni w miesiącu po dacie zamknięcia
{? _all & (_ok | ~_ret)
|| _ret:=_closeD<=_data
?};
_ret


\wylicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Funkcja przenosi dane z pracy do godzin przepracowanych oraz z (nadmiaru - niedobór) do nadgodzin 50%
::   WE:
::   WY:
::  OLD: \wylicz/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__HARM.KW_AUTO || return(0) ?};
_KWAL:=params_get().KWAL;
{? _KWAL.TYP='O' | _KWAL.BL='T' || return() ?};

{? _KWAL.STATUS='E'
|| _KWAL.G57:=_KWAL.G54:=_KWAL.G55:=_KWAL.G56:=_KWAL.G58:=_KWAL.G64:=
   _KWAL.G65:=_KWAL.G66:=_KWAL.G68:=_KWAL.G69:=_KWAL.G7135:=time(0,0,0);
   _KWAL.put();
:: godziny firmowe
   _rub:=__RUB.sys_rub(8311);
   {? _rub.first
   || {!
      |? ($('_a.'+'G'+$_rub.RN))(_KWAL):=time(0,0,0);
         _rub.next
      !}
   ?};
   return(0)
?};
_KWKK:=params_get().KWKK;
_PZD:=params_get().PZD;

: czy uzywac tabeli podzialu na obiekty kosztowe
_podz:=exec('exist','plob_p',P.ref(),'W',_KWAL.DT);
{? ~_podz
|| _podz:=exec('exist','plob_p',P.ref(),'W',_KWAL.DT+1)
?};

_diff:=obj_new('dwe','gwe','dwy','gwy','praca');
_diff.dwe:=_diff.dwy:=date(0,0,0);
_diff.gwe:=_diff.gwy:=time(0,0,0);
_diff.praca:=time(0,0,0);
__KAL.get_day(_KWAL.DT);
_d_wyj:=_KWAL.DT;
_we:=_g_b_we:=KAL_DEF.POCZATEK;
_wy:=_g_b_wy:=KAL_DEF.KONIEC;
_nocka:=KAL_DEF.DATAW>KAL_DEF.DATA;
_czas:=*(__KAL.w_hours(_KWAL.DT,_KWAL.DT,,1)*60);
_d_we:=KAL_DEF.DATA;
_d_wy:=KAL_DEF.DATAW;
_r_pnod:=__HARM.pn_time(P.ref(),_d_we,'OD');
_r_pndo:=__HARM.pn_time(P.ref(),_d_wy,'DO');
exec('czytaj','#stalesys',_KWAL.DT,KST,'R_MARG','R_PNDO','R_PNOD');

exec('wpisz_ts','prc_wewy',_KWAL.DT,1);

:: dane start stop z portalu
_ppsf:=exec('is_pzd01','ppsf');
{? _ppsf & exec('is_pzd02','ppsf')
|| _PZD.erase();
   _startstop:=_PZD.get_portal(_KWAL.DT)
|| _startstop:=0
?};

:: Dodanie nieobecności związaniej z planowaniem pracy po godzinie 14 w Wigilie bądź w Wielką Sobotę
:: Tylko dla firm Handlowych
{? ~do_state & exec('get_par','#parametr',320,2)='T' & _KWAL.DT>=date(2018,3,1)
|| _wigilia:=0;
   _wigilia+=(_d_wyj~2=12 & _d_wyj~3=24);
   _wigilia+=(exec('wielkan','kalendarz',_d_wyj~1)-1=_d_wyj);
   {? _d_wy>_KWAL.DT
   || _g_wyjsc:=time(24,0,0)
   || _g_wyjsc:=_wy
   ?};
:: Najpierw należy usunąć ewentulany zapis w nieobecnościach
   {? _wigilia & _g_wyjsc>time(14,0,0)
   ||
:: pracownicy z grupy PR_NIEDZ (praca w niedzielę - wyłączenia z ustawy o zakazie handlu)
      _slo_kod:=exec('kod','ext_slo','GRUPPRAC','PR_NIEDZ');
      {? _slo_kod<>null
      || GRUPPRAC.cntx_psh();
         GRUPPRAC.index('GRPOD');
         GRUPPRAC.prefix(_slo_kod,P.ref());
         {? GRUPPRAC.find_le(_KWAL.DT) & (GRUPPRAC.DO>=_KWAL.DT | GRUPPRAC.DO=#0)
         || _wigilia:=0
         ?};
         GRUPPRAC.cntx_pop()
      ?};
:: Należy wyłączyć trigger dla N
      _u_wig:=0;
      {? _wigilia
      || N.trig_a('add',"exec('akt_buff','prc_plan','add',N)",'aktkalbuff');
         N.trig_a('del',"",'aktkalbuff');
         _u_wig:=exec('usun_wigilie','nieobecnosc',_d_wyj);
         {? _u_wig
         ||
:: weryfikacja planu pracy po godz 14tej - jeśli jest plan i brak pracy należy wprowadzic zapis w nieobecnościach
            {? R_SPEC.last() & R_SPEC.DZ=_d_wyj & R_SPEC.GD<_wy
            || _g_wigil:=_g_wyjsc-{? R_SPEC.GD<time(14,0,0) || time(14,0,0) || R_SPEC.GD ?};
               {? _czas>_KWAL.CPP+_KWAL.CN
               || _g_wigil:={? _g_wigil>_czas-(_KWAL.CPP+_KWAL.CN) || _czas-(_KWAL.CPP+_KWAL.CN) || _g_wigil ?};
                  exec('dodaj_wigilie','nieobecnosc',_d_wyj,_g_wigil);
                  _KWAL.PD:='T'
               ?}
            || {? _u_wig=1 || _KWAL.PD:='N' ?}
            ?}
         ?}
      ?};
      {? _u_wig | _wigilia
      || _KWAL.CP:=_KWAL.CPP;
         _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref(),_KWAL.DT,_KWAL.DT);
         _jaka_nieob:="exec('nieo_typ','grafik',_a.RN)";
         {? _NBS.first()
         || {!
            |? _KWAL.N:=_NBS.RT;
               {? _KWAL.WYMIAR>_KWAL.CP || _KWAL.NB:=_KWAL.WYMIAR-_KWAL.CP || _KWAL.NB:=*0 ?};
               _KWAL.CP+=*(_NBS.G*60);
               _KWAL.NI:=_jaka_nieob(_NBS);
               _NBS.next()
            !}
         || _KWAL.N:='';
            {? _KWAL.WYMIAR>_KWAL.CP || _KWAL.NB:=_KWAL.WYMIAR-_KWAL.CP || _KWAL.NB:=*0 ?};
            _KWAL.NI:=''
         ?};
         _KWAL.put();
         params_exec('ust_kol','prc_rozlicz')
      ?};

:: Przywracamy triger N
      N.trig_a('add',"exec('kwal','grafik',N.P,N.OD,N.DO); exec('akt_buff','prc_plan','add',N)",'aktkalbuff');
      N.trig_a('del',"{? _a || exec('kwal','grafik',bfld('P'),bfld('OD'),bfld('DO')) ?};~~",'aktkalbuff')
   ?}
?};

_TAB:=tab_tmp(1,
   'G','INTEGER','Godzina',
   'M','REAL','Minuta',
   'ORDER','REAL','Kolejność',
   'OD','INTEGER','Od',
   'DO','INTEGER','Do',
   'NOC','INTEGER','Noc',
   'N_PRACA','TIME','Czas pracy w godzinach nocnych',
   'D_PRACA','TIME','Czas pracy w godzinach dziennych',
   'PRACA','TIME','Czas pracy',
   'WE','TIME','Wejście',
   'WY','TIME','Wyjście',
   'KOL','INTEGER','Kolejność noc',
   'PLAN','INTEGER','Wg planu',
   'DATA','DATE','Data'
);

{! _ind:=0..23
|! _TAB.blank(1);
   _TAB.G:=_ind;
   _TAB.ORDER:=100;
   _TAB.add()
!};
_plan:=0;
:: Ustalenie pracy wg planu
{? _nocka
|| {! _ind:=0.._wy~1-(~(_wy~2>0))
   |! {? _TAB.find_key(_ind)
      || _TAB.PLAN:=1;
         _plan:=1;
         _TAB.put()
      ?}
   !};
   {! _ind:=_we~1..23
   |! {? _TAB.find_key(_ind)
      || _TAB.PLAN:=1;
         _plan:=1;
         _TAB.put()
      ?}
   !}
|| {! _ind:=_we~1.._wy~1-(~(_wy~2>0))
   |! {? _TAB.find_key(_ind)
      || _TAB.PLAN:=1;
         _plan:=1;
         _TAB.put()
      ?}
   !}
?};
{! _ind:=_r_pnod~1..23
|! {? _TAB.find_key(_ind)
   || {? _r_pnod~1=_ind
      || {? _r_pnod~2
         || _TAB.M:=_r_pnod~2;
            _TAB.OD:=1
         ?}
      ?};
      _TAB.NOC:=1;
      _TAB.put()
   ?}
!};
{! _ind:=0.._r_pndo~1
|! {? _TAB.find_key(_ind)
   || {? _r_pndo~1=_ind
      || {? _r_pndo~2
         || _TAB.M:=_r_pndo~2;
            _TAB.NOC:=1;
            _TAB.DO:=1
         ?}
      || _TAB.NOC:=1
      ?};
      _TAB.put()
   ?}
!};

_norma:=_KWAL.NORMA;
_dop:=
   {? _KWAL.DOP<=_norma-_KWAL.WYMIAR
   || _KWAL.DOP
   |? _norma>_KWAL.WYMIAR
   || _norma-_KWAL.WYMIAR
   || time(0,0,0)
   ?};

_WYMIAR:=_KWAL.WYMIAR;
{? _WYMIAR<*0 || _WYMIAR:=time(0,0,0) ?};
_norma-=_KWAL.OG;
{? _norma<*0 || _norma:=time(0,0,0) ?};
_dwy_pom:=_dwe_pom:=_order:=0;

: praca poza siedzibą
_KWAL.G7135:=_G7135:=_PPSF_GODZ:=time(0,0,0);
_PPSF_RUB:=0;
_g_wymiar:=_WYMIAR;
PPSFP.index('PRMO');
PPSFP.prefix(exec('firma','ustawienia'),P.ref(),_KWAL.DT~1,_KWAL.DT~2);
_tab:=tab_tmp(1,
   'KK','STRING[50]','Konto kosztów',
   'G','REAL','Czas pracy',
   'RODZAJ','STRING[1]','Generuj',
   'RN','INTEGER','Kod rubryki',
   'SKL_RCP','STRING[1]','Portal',
   'TYP','STRING[16]','Typ'
);
{? PPSFP.first()
|| exec('ppsfp_info','ppsf',_KWAL.DT~1,_KWAL.DT~2,'SLGKK',_KWAL.DT,_tab);
   {? ~_tab.first()
   || exec('ppsfp_info','ppsf',_KWAL.DT~1,_KWAL.DT~2,'DSLGKK',_KWAL.DT,_tab)
   ?}
?};
{? _ppsf & (~_tab.first() | (_tab.first() & _startstop))
|| exec('ppsf_h_info','ppsf',_KWAL.DT,_tab)
?};
:: sprawdzenie czy pasuje start stop z portalu do wniosku
{? _startstop & _tab.first()
|| {!
   |? {? _tab.SKL_RCP='T' & _PZD.test_portal(_tab.TYP)
      || {? _tab.RN
         || _startstop:=1;
            _PPSF_RUB:=_tab.RN;
            _PZD.add(_KWAL.DT,_tab.RN,'G7135',*0)
         ?};
         _tab.next()
      || {? _tab.RODZAJ='G'
         || _t_godz:=*_tab.G;
            _t_godz:=time(_t_godz~1,_t_godz~2,0);
            {? _tab.RODZAJ='G'
            || {? _t_godz>=_g_wymiar
               || _t_godz:=_g_wymiar; _g_wymiar:=*0
               || _g_wymiar-=_t_godz
               ?}
            ?};
            {? _t_godz>*0
            || _KWKK.add(_KWAL.DT,'G7135',_tab.KK,_t_godz);
               _KWAL.G7135+=_t_godz;
               _KWAL.PPSF:=_tab.RODZAJ;
               {? _tab.RN
               || _PPSF_RUB:=_tab.RN;
                  _PPSF_GODZ+=_t_godz
               ?};
               _G7135+=_t_godz;
               _KWAL.KK_PZ:=_tab.KK;
               _PZD.add(_KWAL.DT,_tab.RN,'G7135',_t_godz);
               _tab.next()
            ?}
         || _tab.del(,1)=2
         ?}
      ?}
   !}
|? ~_startstop & _tab.first()
|| {!
   |? _t_godz:=*_tab.G;
      _t_godz:=time(_t_godz~1,_t_godz~2,0);
      {? _tab.RODZAJ='G'
      || {? _t_godz>=_g_wymiar
         || _t_godz:=_g_wymiar; _g_wymiar:=*0
         || _g_wymiar-=_t_godz
         ?}
      ?};
      {? _t_godz>*0
      || _KWKK.add(_KWAL.DT,'G7135',_tab.KK,_t_godz);
         _KWAL.G7135+=_t_godz;
         _KWAL.PPSF:=_tab.RODZAJ;
         {? _tab.RN
         || _PPSF_RUB:=_tab.RN;
            _PPSF_GODZ+=_t_godz
         ?};
         _G7135+=_t_godz;
         _KWAL.KK_PZ:=_tab.KK;
         _PZD.add(_KWAL.DT,_tab.RN,'G7135',_t_godz);
         _tab.next()
      ?};
      _tab.next()
   !}
?};
&_g_wymiar;
{? _G7135>*0 & _KWAL.PPSF='G'
|| {? _KWAL.WYMIAR>_KWAL.CP || _KWAL.NB:=_KWAL.WYMIAR-_KWAL.CP || _KWAL.NB:=*0 ?};
   MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
   R_PRACDN.index('R_PRACDN');
   R_PRACDN.prefix(P.ref,_KWAL.DT);
   {? ~R_PRACDN.first()
   || R_PRACDN.blank();
      R_PRACDN.DT:=_KWAL.DT;
      R_PRACDN.CP:=*0;
      R_PRACDN.CN:=*0;
      R_PRACDN.NB:=*0;
      R_PRACDN.WS:=*0;
      R_PRACDN.WP:=*0;
      R_PRACDN.ZM:='A';
      R_PRACDN.NOC:=*0;
      R_PRACDN.I_USERS:=null();
      R_PRACDN.GRAF:='N';
      R_PRACDN.PPSF:=_KWAL.PPSF;
      {? _ppsf & _PPSF_RUB
      || R_PRACDN.PPSF_R:=__RUB.ref(_PPSF_RUB)
      ?};
      R_PRACDN.add()
   || R_PRACDN.PPSF:=_KWAL.PPSF;
      {? _ppsf & _PPSF_RUB
      || R_PRACDN.PPSF_R:=__RUB.ref(_PPSF_RUB)
      ?};
      R_PRACDN.put(1)
   ?};
   {? R_SPEC.last() & R_SPEC.ST=3
   || _g_pom:=R_SPEC.GD+_KWAL.G7135;
      {? _g_pom>time(24,0,0)
      || R_SPEC.GD:=time(24,0,0);
         R_SPEC.put(1);
         R_SPEC.GD:=*0;
         R_SPEC.DZ:=R_SPEC.DZ+1;
         R_SPEC.ST:=2;
         R_SPEC.ZM:='S';
         R_SPEC.CZ:='SYS_5';
         R_SPEC.add(1);
         R_SPEC.GD:=_g_pom-time(24,0,0);
         R_SPEC.ST:=3;
         R_SPEC.add(1)
      || R_SPEC.GD:=_g_pom;
         R_SPEC.put(1)
      ?}
   || R_SPEC.blank(1);
      R_SPEC.P:=P.ref;
      R_SPEC.DZ:=_KWAL.DT;
      R_SPEC.DZK:=_KWAL.DT;
      R_SPEC.CZ:='SYS_5';
      R_SPEC.GD:=_we;
      R_SPEC.ST:=2;
      R_SPEC.ZM:='S';
      {? R_SPEC.add(1)
      || _g_pom:=_we+_KWAL.G7135;
         {? _g_pom>time(24,0,0)
         || R_SPEC.GD:=time(24,0,0);
            R_SPEC.ST:=3;
            R_SPEC.add(1);
            R_SPEC.GD:=*0;
            R_SPEC.DZ:=R_SPEC.DZ+1;
            R_SPEC.ST:=2;
            R_SPEC.add(1);
            R_SPEC.GD:=_g_pom-time(24,0,0)
         || R_SPEC.GD:=_g_pom
         ?};
         R_SPEC.ST:=3;
         R_SPEC.add(1)
      ?}
   ?}
|? _KWAL.PPSF='W'
|| MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
   R_PRACDN.index('R_PRACDN');
   R_PRACDN.prefix(P.ref,_KWAL.DT);
   {? R_PRACDN.first()
   || R_PRACDN.PPSF:=_KWAL.PPSF;
      {? _ppsf & _PPSF_RUB
      || R_PRACDN.PPSF_R:=__RUB.ref(_PPSF_RUB)
      ?};
      R_PRACDN.put()
   || R_PRACDN.blank();
      R_PRACDN.DT:=_KWAL.DT;
      R_PRACDN.CP:=*0;
      R_PRACDN.CN:=*0;
      R_PRACDN.NB:=*0;
      R_PRACDN.WS:=*0;
      R_PRACDN.WP:=*0;
      R_PRACDN.ZM:='A';
      R_PRACDN.NOC:=*0;
      R_PRACDN.I_USERS:=null();
      R_PRACDN.GRAF:='N';
      R_PRACDN.PPSF:=_KWAL.PPSF;
      {? _ppsf & _PPSF_RUB
      || R_PRACDN.PPSF_R:=__RUB.ref(_PPSF_RUB)
      ?};
      R_PRACDN.add()
   ?}
?};

{? _startstop & _tab.first()
|| _startstop:=0;
   {? _tab.first()
   || {!
      |? {? _tab.SKL_RCP='T' & _PZD.test_portal(_tab.TYP)
         || _tab.next()
         || _tab.del(,1)=2
         ?}
      !}
   ?};
   {? _tab.first()
   || {? R_SPEC.last()
      || _g_pom:=_KWAL.G7135:=*0;
         _ok:=0;
         {!
         |? {? R_SPEC.ST=3 & (R_SPEC.CZ='SYS_5' | R_SPEC.CZ='SYS_1' | R_SPEC.CZ='SYS_4')
            || _g_pom:=time(R_SPEC.GD~1,R_SPEC.GD~2,0);
               _stop:=_PZD.stop('WY',R_SPEC.DZK,R_SPEC.DZ);
               _stop:=time(_stop~1,_stop~2,0);
               {? _stop>*0
               || {? _g_pom>_stop
                  || _g_pom:=_stop
                  ?};
                  _ok:=1
               ?}
            ?};
            {? _ok & R_SPEC.ST=2 & (R_SPEC.CZ='SYS_5' | R_SPEC.CZ='SYS_1' | R_SPEC.CZ='SYS_4')
            || _t_rub:=_PZD.find_we_typ('WE',R_SPEC.DZK,R_SPEC.DZ,R_SPEC.GD);
               _start:=_PZD.start('WE',R_SPEC.DZK,R_SPEC.DZ);
               _ok:=0;
               {? _start<time(24,0,0)
               || _start:=time(_start~1,_start~2,0);
                  {? _g_pom>*0 & _t_rub<>0
                  || {? _start>time(R_SPEC.GD~1,R_SPEC.GD~2,0)
                     || _t_godz:=_g_pom-_start
                     || _t_godz:=_g_pom-time(R_SPEC.GD~1,R_SPEC.GD~2,0)
                     ?};
                     _PZD.put(_KWAL.DT,_t_rub,_t_godz);
                     _KWAL.G7135+=_t_godz
                  ?}
               ?}
            ?};
            @.R_SPEC.prev()
         !}
      ?}
   ?}
?};

{? R_SPEC.first() & (_G7135=*0 | (_G7135>*0 & _KWAL.PPSF='W'))
|| R_REJ_WW.cntx_psh();
   MASK.Use('R_REJ_WW',(R_SPEC.DZK-(R_SPEC.GD=*0))~1,(R_SPEC.DZK-(R_SPEC.GD=*0))~2);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(P.ref(),R_SPEC.DZK-1,(R_SPEC.DZ-(R_SPEC.GD=*0)));
   {? R_REJ_WW.last()
   || _g_wy:=R_REJ_WW.GD
   || _g_wy:=time(150)
   ?};
   {? _g_wy=time(24,0,0) & R_REJ_WW.DZ<R_SPEC.DZ
   || _g_wy:=time(0,0,0)
   || _g_wy:=time(150)
   ?};
   _g_we:=time(100);

   {!
   |? {? 3+R_SPEC.CZ<>'SYS'
      || {? R_SPEC.ST=2 & _g_wy<>R_SPEC.GD
         || {? ~R_SPEC.put(1) | R_SPEC.GD>time(24,0,0)
            || R_SPEC.del();
               R_SPEC.del()
            || R_SPEC.next()
            ?}
         |? R_SPEC.ST=3
         || {? R_SPEC.next()
            || _g_we:=R_SPEC.GD;
               {? _g_we=*0 || _g_we:=time(24,0,0) ?};
               R_SPEC.prev()
            || MASK.Use('R_REJ_WW',(R_SPEC.DZ+(R_SPEC.GD=time(24,0,0)))~1,(R_SPEC.DZ+(R_SPEC.GD=time(24,0,0)))~2);
               R_REJ_WW.index('R_REJ_WX');
               R_REJ_WW.prefix(P.ref(),R_SPEC.DZK+1,(R_SPEC.DZ+(R_SPEC.GD=time(24,0,0))));
               {? R_REJ_WW.first()
               || _g_we:=R_REJ_WW.GD;
                  {? _g_we=*0 || _g_we:=time(24,0,0) ?}
               || _g_we:=time(0,0,0)
               ?}
            ?};
            {? _g_we<>R_SPEC.GD
            || _g_wy:=R_SPEC.GD;
               {? _g_wy=time(24,0,0) || _g_wy:=time(0,0,0) ?};
               R_SPEC.put();
               {? R_SPEC.put(1) & R_SPEC.GD<*0
               || {? R_SPEC.prev()
                  || R_SPEC.del();
                     R_SPEC.del()
                  || R_SPEC.next()
                  ?}
               || R_SPEC.next()
               ?}
            || _g_wy:=R_SPEC.GD;
               {? _g_wy=time(24,0,0) || _g_wy:=time(0,0,0) ?};
               R_SPEC.next()
            ?}
         || R_SPEC.next()
         ?}
      || R_SPEC.next()
      ?}
   !};
   R_REJ_WW.cntx_pop()
?};

{? R_SPEC.first()
|| {!
   |? R_SPEC.cntx_psh();
      {? R_SPEC.ST=2
      || _we_pom:=R_SPEC.GD;
         _dwe_pom:=1;
         _diff.dwe:=R_SPEC.DZ;
         _diff.gwe:=_we_pom
      |? R_SPEC.ST=3
      || _wy_pom:=R_SPEC.GD;
         _dwy_pom:=1;
         _diff.dwy:=R_SPEC.DZ;
         _diff.gwy:=_wy_pom
      ?};
      {? _dwy_pom & _dwe_pom & _we_pom<_wy_pom
      || {! _ind:=_we_pom~1.._wy_pom~1
         |! {? _TAB.find_key(_ind)
            || {? _TAB.ORDER<100
               || _TAB.ORDER:=100;
                  _TAB.N_PRACA:=_TAB.D_PRACA:=_TAB.PRACA:=time(0,0,0);
                  _TAB.PLAN:=0;
                  _TAB.add(1)
               ?};
               _order+=1;
               {? _ind=_wy_pom~1 & _ind=_we_pom~1
               || _60:=_wy_pom~2
               || _60:=60
               ?};
               {? _ind=_we_pom~1
               || _TAB.ORDER:=_order;
                  _TAB.PRACA+=_60-_we_pom~2;
                  {? _TAB.PRACA<>time(0,0,0)
                  || _TAB.WE:=time(_ind,_we_pom~2,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                     _TAB.WY:=time(_ind,0,0)+_60+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?}
                  ?}
               |? _ind=_wy_pom~1
               || _TAB.PRACA+=_wy_pom~2;
                     {? _TAB.PRACA<>time(0,0,0)
                     || _TAB.WE:=time(_ind,0,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.WY:=time(_ind,_wy_pom~2,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?}
                     ?};
                  {? _wy_pom~2 || _TAB.ORDER:=_order ?}
               || _TAB.PRACA+=60;
                     {? _TAB.PRACA<>time(0,0,0)
                     || _TAB.WE:=time(_ind,0,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.WY:=time(_ind,0,0)+_60+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?}
                     ?};
                  _TAB.ORDER:=_order
               ?};
               {? _TAB.NOC
: Praca poza planem w nocy
               || {? _ind=_we_pom~1
: godzina wejscia
                  || {? _TAB.OD & _TAB.M
: Jeżeli jest to rozpoczęcie pory nocnej w niepełnej godzinie
                     || {? _TAB.M>=_we_pom~2
                        || {? _we_pom~1=_wy_pom~1
                           || {? _TAB.M>=_wy_pom~2
                              || _TAB.D_PRACA+=_60-_we_pom~2
                              || _TAB.N_PRACA+=_60-_TAB.M;
                                 _TAB.PRACA:=_TAB.N_PRACA;
                                 _TAB.D_PRACA:=*0;
                                 _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _order:=_TAB.ORDER;
                                 _TAB.ORDER+=0.1;
                                 _TAB.put();

                                 _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.D_PRACA+=_TAB.M-_we_pom~2;
                                 _TAB.PRACA:=_TAB.D_PRACA;
                                 _TAB.N_PRACA:=*0;
                                 _TAB.NOC:=0;
                                 _TAB.ORDER:=_order;
                                 _TAB.add()
                              ?}
                           || _TAB.N_PRACA+=_60-_TAB.M;
                              _TAB.PRACA:=_TAB.N_PRACA;
                              _TAB.D_PRACA:=*0;
                              _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                              _order:=_TAB.ORDER;
                              _TAB.ORDER+=0.1;
                              _TAB.put();

                              _TAB.WE:=_we;
                              _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                              _TAB.D_PRACA+=_TAB.M-_we_pom~2;
                              _TAB.PRACA:=_TAB.D_PRACA;
                              _TAB.N_PRACA:=*0;
                              _TAB.NOC:=0;
                              _TAB.ORDER:=_order;
                              _TAB.add()
                           ?}
                        || _TAB.N_PRACA+=_60-_we_pom~2;
                           _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?}
                        ?}
                     |? _TAB.DO & _TAB.M
: Jezeli jest to zakonczenie pory nocnej w niepelnej godzinie
                     || _TAB.KOL:=1;
                        {? _TAB.M<=_we_pom~2
                        || _TAB.D_PRACA+=_60-_we_pom~2;
                           _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?}
                        || {? _we_pom~1=_wy_pom~1
                           || {? _TAB.M>=_wy_pom~2
                              || _TAB.N_PRACA+=_60-_we_pom~2;
                                 _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.PRACA:=_TAB.N_PRACA;
                                 _TAB.D_PRACA:=*0
                              || _TAB.N_PRACA+=_TAB.M-_we_pom~2;
                                 _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.PRACA:=_TAB.N_PRACA;
                                 _TAB.D_PRACA:=*0;
                                 _TAB.put();

                                 _TAB.D_PRACA+=_60-_TAB.M;
                                 _TAB.WY:=_wy;
                                 _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                                 _TAB.NOC:=0;
                                 _TAB.PRACA:=_TAB.D_PRACA;
                                 _TAB.ORDER+=0.1;
                                 _TAB.N_PRACA:=*0;
                                 _TAB.add()
                              ?}
                           || _TAB.N_PRACA+=_TAB.M-_we_pom~2;
                              _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                              _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                              _TAB.PRACA:=_TAB.N_PRACA;
                              _TAB.D_PRACA:=*0;
                              _TAB.put();

                              _TAB.D_PRACA+=_60-_TAB.M;
                              _TAB.WY:=_wy;
                              _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                              _TAB.NOC:=0;
                              _TAB.PRACA:=_TAB.D_PRACA;
                              _TAB.N_PRACA:=*0;
                              _TAB.ORDER+=0.1;
                              _TAB.add()
                           ?}
                        ?}
                     |? _TAB.OD
: Jezeli jest to rozpoczecie pory nocnej w pelnej godzinie
                     || _TAB.N_PRACA+=_60-_we_pom~2;
                        _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?}
                     |? _TAB.DO
: Jezeli jest to zakonczenie pory nocnej w pelnej godzinie
                     || _TAB.KOL:=1;
                        _TAB.put()
                     || _TAB.N_PRACA+=_60-_we_pom~2;
                        _TAB.WE:=_we_pom+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?}
                     ?}
: godzina wyjscia
                  |? _ind=_wy_pom~1
                  || {? _TAB.OD & _TAB.M
                     || {? _TAB.M>=_wy_pom~2
                        || _TAB.D_PRACA+=_wy_pom~2;
                           _TAB.NOC:=0;
                           {? _TAB.D_PRACA<>time(0,0,0)
                           || _TAB.WY:=_wy_pom+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?}
                           ?}
                        || _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                           _TAB.N_PRACA:=*0;
                           _TAB.D_PRACA:=_TAB.WY-_TAB.WE;
                           _TAB.PRACA:=_TAB.D_PRACA;
                           _order:=_TAB.ORDER;
                           _TAB.ORDER+=0.1;
                           _TAB.put();

                           _TAB.N_PRACA+=_wy_pom~2-_TAB.M;
                           _TAB.WY:=_wy_pom+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                           _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                           _TAB.PRACA:=_TAB.N_PRACA;
                           _TAB.D_PRACA:=*0;
                           _TAB.ORDER:=_order;
                           _TAB.add()
                        ?}
                     |? _TAB.DO & _TAB.M
                     || _TAB.KOL:=1;
                        {? _TAB.M<=_wy_pom~2
                        || _TAB.N_PRACA+=_TAB.M;
                           _TAB.WE:=_we;
                           _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                           _TAB.PRACA:=_TAB.N_PRACA;
                           _TAB.D_PRACA:=*0;
                           _TAB.put();

                           _TAB.D_PRACA+=_wy_pom~2-_TAB.M;
                           _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                           _TAB.WY:=_wy;
                           _TAB.N_PRACA:=*0;
                           _TAB.NOC:=0;
                           _TAB.PRACA:=_TAB.D_PRACA;
                           _TAB.ORDER+=0.1;
                           _TAB.add()

                        || _TAB.N_PRACA+=_wy_pom~2;
                           _TAB.WY:=_wy_pom+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?}
                        ?}
                     || _TAB.KOL:=1;
                        _TAB.N_PRACA+=_wy_pom~2
                     ?}
: w pozostałych przypadkach pobieramy pełną godzinę pracy w nocy poza planem
                  || {? _TAB.OD & _TAB.M
                     || _TAB.N_PRACA+=_60-_TAB.M;
                        _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.PRACA:=_TAB.N_PRACA;
                        _TAB.D_PRACA:=*0;
                        _order:=_TAB.ORDER;
                        _TAB.ORDER+=0.1;
                        _TAB.put();

                        _TAB.D_PRACA+=_TAB.M;
                        _TAB.WE:=time(_ind,0,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.N_PRACA:=*0;
                        _TAB.NOC:=0;
                        _TAB.PRACA:=_TAB.D_PRACA;
                        _TAB.ORDER:=_order;
                        _TAB.add()

                     |? _TAB.DO & _TAB.M
                     || _TAB.KOL:=1;
                        _TAB.N_PRACA+=_TAB.M;
                        _TAB.WE:=time(_ind,0,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.WY:=time(_ind,_TAB.M,0)+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.PRACA:=_TAB.N_PRACA;
                        _TAB.D_PRACA:=*0;
                        _TAB.put();

                        _TAB.D_PRACA+=_60-_TAB.M;
                        _TAB.WE:=time(_ind,_TAB.M,0)+{? _diff.dwe>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.WY:=time(_ind,0,0)+_60+{? _diff.dwy>_KWAL.DT || time(24,0,0) || *0 ?};
                        _TAB.N_PRACA:=*0;
                        _TAB.NOC:=0;
                        _TAB.PRACA:=_TAB.D_PRACA;
                        _TAB.ORDER+=0.1;
                        _TAB.add()

                     || {? _TAB.NOC || _TAB.KOL:=1 ?};
                        _TAB.N_PRACA+=60
                     ?}
                  ?}
: dla pracy w dzień poza planem
               || {? _ind=_we_pom~1
                  || _TAB.D_PRACA+=_60-_we_pom~2
                  |? _ind=_wy_pom~1
                  || _TAB.D_PRACA+=_wy_pom~2
                  || _TAB.D_PRACA+=60
                  ?}
               ?};
               _TAB.DATA:=R_SPEC.DZ;
               _TAB.put()
            ?}
         !};
:: zmiana czasu na zimowy
         {? _diff.dwe~2=10 | _diff.dwy~2=10
         || _diff.praca+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_diff.gwy,,1)
         ?};
         _dwy_pom:=_dwe_pom:=0
      ?};
      R_SPEC.cntx_pop();
      R_SPEC.next()
   !}
?};
:: zmiana czasu na zimowy - dodanie przesuniętej godziny
{? *_diff.praca>0
|| {? _TAB.find_key(2)
   || _TAB.NOC:=1;
      _TAB.KOL:=1;
      _TAB.N_PRACA+=_diff.praca;
      _TAB.PRACA+=_diff.praca;
      _TAB.put()
   ?}
?};

{? _TAB.first()
|| {!
   |? _zmien:=0;
      {? _TAB.PRACA<>*0 & _TAB.DATA<>#0
      || _tab_G:=time(_TAB.G,0,0);
         {? _TAB.DATA=_d_we
         || {? _nocka
            || {? _tab_G<time(_g_b_we~1,0,0) || _zmien:=1 ?}
            || {? ~(_tab_G>=time(_g_b_we~1,0,0) & _tab_G<=time(_g_b_wy~1,0,0)) || _zmien:=1 ?}
            ?}
         |? _TAB.DATA=_d_wy
         || {? _tab_G>time(_g_b_wy~1,0,0) || _zmien:=1 ?}
         ?};
         {? _zmien
         || _TAB.PLAN:=0;
            _TAB.put()
         ?}
      ?};
      _TAB.next()
   !}
?};

_praca_n:=_praca_d:=_praca_5:=_praca_1:=_praca_x:=_prac_d5:=_prac_d1:=_noc:=_sr_tyg:=time(0,0,0);
_wymiar:=_dodatek:=_dopeln:=0;
_fday:=__KAL.f_days(_KWAL.DT,_KWAL.DT);
_hday:=__KAL.h_days(_KWAL.DT,_KWAL.DT);
_h_wym:=exec('ust_wym','pracownik',_KWAL.DT);
_h_cp:=exec('ustal_h_wym','lista_licz','CP().S',_KWAL.DT);

_TAB.index(_TAB.ndx_tmp(,,'ORDER',,,'G',,));
{? _TAB.first()
|| _KWKK.tabkk.prefix(_KWAL.DT);
   {? _plan
   || _we_x:={? _KWAL.TYP='RN' | _KWAL.TYP='RS' || __HARM.GRDN || _we ?};
      _first:=1;
      {!
      |? _delta:=_we_x-time(_TAB.G,_TAB.M,0);
         _czas_x:=*0;
         {? _TAB.G=_we_x~1
         || {? _first
            || _czas_x:=*60-(_we_x-time(_TAB.G,0,0))
            || _pr_do:=time(_TAB.G,0,0)+_TAB.PRACA;
               _czas_x:=_pr_do-_we_x
            ?}
         ?};
         _first:=0;
         {? (~_TAB.PLAN | (_czas_x>*0 & _czas_x<_TAB.PRACA)) & (_we_x>time(_TAB.G,_TAB.M,0)) & _TAB.DATA<=_KWAL.DT
         || _x_praca:=_TAB.PRACA-_czas_x;
            _x_noc:=_TAB.N_PRACA-_czas_x;
            {? _x_noc<*0 || _x_noc:=*0 ?};
            _sr_tyg+=_x_praca; _noc+=_x_noc;
            {? _TAB.PLAN & (_delta<_TAB.PRACA | (_czas_x>*0 & _czas_x<_TAB.PRACA))
            || _TAB.PRACA:=_TAB.PRACA-_x_praca;
               _TAB.N_PRACA:=_TAB.N_PRACA-_x_noc;
               _TAB.put();
               0
            || _TAB.next()
            ?}
         ?}
      !}
   ?};
   {!
   |? {? _TAB.PRACA>*0
      || _noc+=_TAB.N_PRACA;
         {? _podz
         || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G57',_TAB.WE,_TAB.WY,_TAB.N_PRACA)
         ?};
         {? ~_wymiar
         || {? _praca_n+_TAB.PRACA<_WYMIAR
            || {? _podz
               || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _fday+_hday || 'G58' || 'G54' ?},_TAB.WE,_TAB.WY,_TAB.PRACA)
               ?};
               _praca_n+=_TAB.PRACA
            || _wymiar:=1;
               _czas_pr:=_WYMIAR-_praca_n;
               {? _podz
               || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _fday+_hday || 'G58' || 'G54' ?},_TAB.WE,_TAB.WE+_czas_pr,_czas_pr)
               ?};
               _TAB.PRACA:=_praca_n+_TAB.PRACA-_WYMIAR; _praca_n:=_WYMIAR
            ?}
         ?};
         {? _wymiar
         || {? ~_dopeln
            || {? _praca_d+_TAB.PRACA<_dop
               || {? _podz
                  || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _h_wym<>1 || 'G64' || 'G65' ?},_TAB.WE,_TAB.WY,_TAB.PRACA)
                  ?};
                  _praca_d+=_TAB.PRACA
               || _dopeln:=1;
                  _czas_pr:=_dop-_praca_d;
                  {? _podz
                  || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _h_wym<>1 || 'G64' || 'G65' ?},_TAB.WE,_TAB.WE+_czas_pr,_czas_pr)
                  ?};
                  _TAB.PRACA:=_praca_d+_TAB.PRACA-_dop;
                  _praca_d:=_dop
               ?}
            ?};
            {? _dopeln
            || {? ~_dodatek
               || {? _TAB.NOC
                  || {? _TAB.KOL
                     || {? _TAB.PRACA<_TAB.N_PRACA
                        || _TAB.N_PRACA:=_TAB.PRACA; _TAB.D_PRACA:=*0
                        || _TAB.D_PRACA:=_TAB.PRACA-_TAB.N_PRACA
                        ?};
                        {? _praca_x+_praca_n+_praca_d+_TAB.N_PRACA<=_norma
                        || {? _podz
                           || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G69',_TAB.WE,_TAB.WY,_TAB.N_PRACA)
                           ?};
                           _praca_x+=_TAB.N_PRACA; _prac_d1+=_TAB.N_PRACA; _TAB.N_PRACA:=*0;
                           {? _praca_x+_praca_n+_praca_d+_TAB.D_PRACA<=_norma
                           || _praca_x+=_TAB.D_PRACA;
                              {? _podz
                              || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _hday || 'G69' || 'G68' ?},_TAB.WE,_TAB.WY,_TAB.D_PRACA)
                              ?};
                              _prac_d5+=_TAB.D_PRACA; _TAB.D_PRACA:=*0
                           || _dodatek:=1;
                              {? _praca_x+_praca_n+_praca_d<_norma
                              || _tmp:=_norma-(_praca_x+_praca_n+_praca_d);
                                 {? _podz
                                 || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _fday+_hday || 'G58' || 'G54' ?},_TAB.WE,_TAB.WE+_tmp,_tmp)
                                 ?};
                                 _prac_d5+=_tmp;
                                 _praca_x+=_tmp;
                                 _TAB.D_PRACA-=_tmp
                              ?}
                           ?}
                        || _dodatek:=1;
                           {? _praca_x+_praca_n+_praca_d<=_norma
                           || _tmp:=_norma-(_praca_x+_praca_n+_praca_d);
                              _prac_d1+=_tmp;
                              {? _podz
                              || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G69',_TAB.WE,_TAB.WY,_tmp)
                              ?};
                              _praca_x+=_tmp;
                              _TAB.N_PRACA-=_tmp
                           ?}
                        ?}
                     || {? _TAB.PRACA<_TAB.D_PRACA
                        || _TAB.D_PRACA:=_TAB.PRACA; _TAB.N_PRACA:=*0
                        || _TAB.N_PRACA:=_TAB.PRACA-_TAB.D_PRACA
                        ?};
                        {? _praca_x+_praca_n+_praca_d+_TAB.D_PRACA<=_norma
                        || _praca_x+=_TAB.D_PRACA; _prac_d5+=_TAB.D_PRACA;
                           {? _podz
                           || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _hday || 'G69' || 'G68' ?},_TAB.WE,_TAB.WY,_TAB.D_PRACA)
                           ?};
                           _TAB.D_PRACA:=*0;
                           {? _praca_x+_praca_n+_praca_d+_TAB.N_PRACA<=_norma
                           || _praca_x+=_TAB.N_PRACA; _prac_d1+=_TAB.N_PRACA;
                              {? _podz
                              || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G69',_TAB.WE,_TAB.WY,_TAB.N_PRACA)
                              ?};
                              _TAB.N_PRACA:=*0
                           || _dodatek:=1;
                              {? _praca_x+_praca_n+_praca_d<=_norma
                              || _tmp:=_norma-(_praca_x+_praca_n+_praca_d);
                                 _prac_d1+=_tmp;
                                 {? _podz
                                 || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G69',_TAB.WE,_TAB.WY,_tmp)
                                 ?};
                                 _praca_x+=_tmp;
                                 _TAB.N_PRACA-=_tmp
                              ?}
                           ?}
                        || _dodatek:=1;
                           {? _praca_x+_praca_n+_praca_d<=_norma
                           || _tmp:=_norma-(_praca_x+_praca_n+_praca_d);
                              _prac_d5+=_tmp;
                              {? _podz
                              || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,{? _hday || 'G69' || 'G68' ?},_TAB.WE,_TAB.WY,_tmp)
                              ?};
                              _praca_x+=_tmp;
                              _TAB.D_PRACA-=_tmp
                           ?}
                        ?}
                     ?}
                  || {? _praca_x+_praca_n+_praca_d+_TAB.PRACA<=_norma
                     || _praca_x+=_TAB.PRACA; _prac_d5+=_TAB.PRACA;
                        {? _podz
                        || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,
                              {? _hday || 'G69' || 'G68' ?},_TAB.WE,_TAB.WY,_TAB.PRACA)
                        ?};
                        _TAB.PRACA:=*0
                     || _dodatek:=1;
                        {? _praca_x+_praca_n+_praca_d<_norma
                        || _tmp:=_norma-(_praca_x+_praca_n+_praca_d);
                           _prac_d5+=_tmp;
                           {? _podz
                           || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,
                                 {? _hday || 'G69' || 'G68' ?},_TAB.WE,_TAB.WY,_tmp)
                           ?};
                           _praca_x+=_tmp;
                           _TAB.PRACA-=_tmp
                        ?}
                     ?}
                  ?}
               ?};
               {? _dodatek
               || {? _TAB.NOC
                  || {? _praca_x+_praca_n+_praca_d>=_norma
                     || _praca_x+=_TAB.N_PRACA; _praca_1+=_TAB.N_PRACA;
                        _praca_x+=_TAB.D_PRACA; _praca_5+=_TAB.D_PRACA;
                        {? _podz
                        || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,'G56',_TAB.WE,_TAB.WY,_TAB.N_PRACA);
                           params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,
                              {? _hday || 'G56' || 'G55' ?},_TAB.WE,_TAB.WY,_TAB.D_PRACA)
                        ?}
                     ?}
                  || {? _praca_x+_praca_n+_praca_d>=_norma
                     || _praca_x+=_TAB.PRACA; _praca_5+=_TAB.PRACA;
                        {? _podz
                        || params_exec('dod_kw','prc_rozlicz',P.ref(),_KWAL.DT,
                              {? _hday || 'G56' || 'G55' ?},_TAB.WE,_TAB.WY,_TAB.PRACA)
                        ?}
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ?};
      _TAB.next()
   !}
?};
_KWAL.G57:=_noc;
_KWAL.G54:=_KWAL.G55:=_KWAL.G56:=_KWAL.G58:=_KWAL.G64:=_KWAL.G65:=_KWAL.G66:=_KWAL.G68:=_KWAL.G69:=time(0,0,0);

: G54 - godziny przepracowane
: G55 - nadgodziny 50%
: G56 - nadgodziny 100%
: G64 - godziny dopełnienia do pełnego etatu
: G58 - godziny przepracowane
: G65 - potencjalne średniotygodniowe przekroczenia
: G68 - dododatek 50% do pełnego etatu
: G69 - dodatek 100% do pełnego etatu
_praca:=_praca_n+_praca_d+_sr_tyg+_praca_5+_praca_1+_prac_d5+_prac_d1;
{? _KWAL.G7135>_praca
|| _KWAL.G7135:=_praca
?};
{? P.F_ZATR().KOD='Z'
||
:: Dla zleceniobiorców tylko godziny przepracowane 54
   _KWAL.G54:=_praca;
   _KWAL.G57:=*0;
: zmiana kwalifikacji pracy na obiektach kosztowych dla wszystkich zapisów G54
   {? _podz
   || _KWKK.tabkk.prefix(_KWAL.DT);
      {? _KWKK.tabkk.first()
      || {!
         |? {? _KWKK.tabkk.RUB<>'G57' & _KWKK.tabkk.RUB<>'G54'
            || _KWKK.tabkk.cntx_psh();
               _KWKK.tabkk.RUB_ORG:=_KWKK.tabkk.RUB;
               _KWKK.tabkk.RUB:='G54';
               _KWKK.tabkk.put();
               _KWKK.tabkk.cntx_pop()
            ?};
            _KWKK.tabkk.next()
         !}
      ?}
   ?}
|| {? _KWAL.TYP='R' | _KWAL.TYP='RN' | _KWAL.TYP='RS'
: planowany dzień roboczy
   || _KWAL.G54:=_praca_n; 'Przepr.';
      _KWAL.G65:=_sr_tyg;
      {? _h_wym<>1
      || _KWAL.G64:=_praca_d; 'dop. do pełnego etatu'
      || {? _dop>*0
         || {? _dop>_praca_d
            || _KWAL.G64:=_praca_d
            || _KWAL.G64:=_dop;
               _KWAL.G65+=_praca_d-_dop
            ?}
         || _KWAL.G65+=_praca_d
         ?}
      ?};
      {? _praca_5+_praca_1+_prac_d5+_prac_d1>KST.R_MARG
      || {? +_KWAL.N & _KWAL.PD<>'T'
::       praca w nieobecność
         || {? _praca_5>=_czas
            || _KWAL.G64:=_czas;
               _praca_5-=_czas;
               _czas:=*0
            || _KWAL.G64:=_praca_5;
               _praca_5:=*0;
               _czas-=_praca_5
            ?};
            {? _praca_1>=_czas
            || _KWAL.G64+=_czas;
               _praca_1-=_czas;
               _czas:=*0
            || _KWAL.G64+=_praca_1;
               _praca_1:=*0;
               _czas-=_praca_1
            ?}
         ?};
         _KWAL.G55:=_praca_5;
         _KWAL.G56:=_praca_1;
         _KWAL.G68:=_prac_d5;
         _KWAL.G69:=_prac_d1
      ?}
   |? _KWAL.TYP='WH' | _KWAL.TYP='WN' | _KWAL.TYP='WS'
: dzień harmonogramowo wolny, dzień wolny za niedzielę bądź święto
   || {? _h_wym<>1
      || _KWAL.G64:=_praca_n+_praca_d+_prac_d5+_prac_d1+_sr_tyg
      || _KWAL.G65:=_praca_n+_praca_d+_prac_d5+_prac_d1+_sr_tyg
      ?};
      {? _praca_5+_praca_1>KST.R_MARG
      || {? _KWAL.TYP='WH'
         || _KWAL.G55:=_praca_5;
            _KWAL.G56:=_praca_1
         || _KWAL.G56:=_praca_1+_praca_5
         ?}
      ?}
   |? _KWAL.TYP='SN' | _KWAL.TYP='SW' | _KWAL.TYP='W5'
: dni swiąteczne i wolne
   || _KWAL.G58:=_praca_n+_praca_d+_prac_d5+_prac_d1+_sr_tyg;
      {? _praca_5+_praca_1>KST.R_MARG
      || {? _KWAL.TYP='W5'
         || _KWAL.G55:=_praca_5;
            _KWAL.G56:=_praca_1
         ||
: w niedziele i święta wszystkie przekroczenia dobowe 100%
            _KWAL.G56:=_praca_5+_praca_1
         ?}
      ?}
   ?}
?};
:: obsługa wtyczki dodatkowej kwalifikacji godzin
_zmienne:=obj_new('TAB','praca_n','praca_d','praca_5','praca_1','praca_x','prac_d5','prac_d1','noc','sr_tyg',
   'wymiar','dodatek','dopeln','czas','podz');
_zmienne.praca_n:=_praca_n;
_zmienne.praca_d:=_praca_d;
_zmienne.praca_5:=_praca_5;
_zmienne.praca_1:=_praca_1;
_zmienne.praca_x:=_praca_x;
_zmienne.prac_d5:=_prac_d5;
_zmienne.prac_d1:=_prac_d1;
_zmienne.noc:=_noc;
_zmienne.sr_tyg:=_sr_tyg;
_zmienne.wymiar:=_wymiar;
_zmienne.dodatek:=_dodatek;
_zmienne.dopeln:=_dopeln;
_zmienne.czas:=_czas;
_zmienne.czas:=_podz;
_zmienne.TAB:=_TAB;
_par:=params_get();
Plugin.run('PRC_CZP_PKWA_WYLICZ',_zmienne,_par);
_KWAL.put()


\wpr_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Zapis danych do tabeli kwalifikacji
::   WE: _a - [DATA] data
::       _b - [INT] rubryka
::       _c - [TIME] ilość godzin
::       _d - [INT] 1 - bez komunikatu
::       _e - [INT] 1 - zapis dotyczy poprzedniego okresu, który może być zamknięty
::      [_f]- [REFSQL] - wskazanie na konto kosztów
::   WY:
::  OLD: \wpr_godz/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
  _data:={? var_pres('_a')=type_of(date) || _a || return(0) ?};
   _rub:={? var_pres('_b')=type_of(0)    || _b || return(0) ?};
  _godz:={? var_pres('_c')=type_of(time) || _c || return(0) ?};
 _noMsg:={? var_pres('_d')=type_of(0)    || _d || 0         ?};
_popOkr:={? var_pres('_e')=type_of(0)    || _e || 0         ?};

{? ~__HARM.mc_otw(_data,~_noMsg,_popOkr) || return(0) ?};
_par:=params_get();
_KWKK:={? type_of(_par)>0 & var_pres('KWKK',_par)>0 || params_get().KWKK || exec('kwkk_create','prc_rozlicz') ?};
_PZD:={? type_of(_par)>0 & var_pres('PZD',_par)>0 || params_get().PZD || exec('pzd_create','prc_rozlicz') ?};
_kk:=
   {? var_pres('_f')=type_of('') & +_f
   || {? KK.seek(_f,,1) || "KK.ref()" || "null()" ?}
   || "  _ret:=exec('FindAndGet','#table',KK,_a,,,null());
         {? _ret=null()
         || _ret:=exec('kk_hist','pracownik',_b,_c)
         ?};
         _ret
      "
   ?};
:: formuły pomocnicze
_add:=
   "R_KWGODZ.blank();
    R_KWGODZ.KK:=_a;
    R_KWGODZ.GODZ:=_b;
    R_KWGODZ.KW:=_c;
    R_KWGODZ.DZ:=_d;
    R_KWGODZ.add()
   ";

R.cntx_psh();
R.index('RUBKOD');
R.prefix();
R_WYK.index('R_WYKDN');
R_WYK.prefix();
R_KWGODZ.cntx_psh();
R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(P.ref(),_data,_rub);
{? R_KWGODZ.first()
|| {? R_WYK.find_key(P.ref,R_KWGODZ.DZ,R_KWGODZ.KW().RN,R_KWGODZ.KK)
   || {? ~_noMsg
      || FUN.emsg('%1\n%2'
            ['Wyzerowanie wartości: %1 na dzień: %2, niemożliwe.'@[R.RT,$R_KWGODZ.DZ],
             'Rekord wykorzystywany w odebranych godzinach.'@]
         )
      ?}
   || {? ~_popOkr | __HARM.mc_otw(_data,0)
      || {? _godz=*0
         || {? R_WYK.find_key(P.ref(),R_KWGODZ.DZ,R_KWGODZ.KW().RN)
            || {? ~_noMsg
               || FUN.emsg('%1\n%2'
                  ['Wyzerowanie wartości: %1 na dzień: %2, niemożliwe.'@[R.RT,$R_KWGODZ.DZ],
                   'Rekord wykorzystywany w odebranych godzinach.'@]
                  )
               ?}
            || {! |? R_KWGODZ.del() !}
            ?}
         || {! |? R_KWGODZ.del() !};
            {? R.find_key(_rub)
            || _KWKK.tabkk.prefix(_data,'G'+form(R.RN,,,'99'));
               {? _KWKK.tabkk.first()
               || {!
                  |? {? _KWKK.tabkk.GODZ>_godz
                     || _KWKK.tabkk.GODZ:=_godz; _godz:=*0
                     || _godz-=_KWKK.tabkk.GODZ
                     ?};
                     _add(_kk(_KWKK.tabkk.KK,P.ref(),_data),_KWKK.tabkk.GODZ,R.ref(),_data);
                     _KWKK.tabkk.next()
                  !}
               || _add(exec('kk_hist','pracownik',P.ref(),_data),_godz,R.ref(),_data)
               ?}
            ?}
         ?}
      || _tabkk:=0;
         _KWKK.tabkk.prefix(_data,'G'+form(R.RN,,,'99'));
         _tabkk:=_KWKK.tabkk.first();
         _old_ndx:=R_KWGODZ.index('?');
         {? _tabkk || R_KWGODZ.index('RUB_KONT') ?};
         {!
         |? _kkref:={? _tabkk || _kk(_KWKK.tabkk.KK,P.ref(),_data) || exec('kk_hist','pracownik',P.ref(),_data) ?};
            {? _tabkk || R_KWGODZ.prefix(P.ref,_data,_rub,_kkref) ?};
            {? R_KWGODZ.first()
            || {? _tabkk || _godz:=_KWKK.tabkk.GODZ ?};
               _sumg:=*0;
               {!
               |? {? R_KWGODZ.MR<>#0 || _sumg+=R_KWGODZ.GODZ ?};
                  R_KWGODZ.next()
               !};
               {? _godz<_sumg
               || {? ~_noMsg
                  || FUN.emsg('%1\n%2'
                        ['Zmodyfikowanie wartości: %1 na dzień: %2, niemożliwe.'@[R.RT,$R_KWGODZ.DZ],
                         'Godziny zostały przeniesione do rozliczenia.'@]
                     )
                  ?}
               || R_KWGODZ.first();
                  {!
                  |? {? R_KWGODZ.MR=#0
                     || R_KWGODZ.del()
                     || R_KWGODZ.next()
                     ?}
                  !};
                  {? _godz>_sumg
                  || {? R.find_key(_rub) & _godz<>*0
                     || _add(_kkref,_godz-_sumg,R.ref(),_data)
                     ?}
                  ?}
               ?}
            ?};
            _tabkk & _KWKK.tabkk.next()
         !};
         R_KWGODZ.index(_old_ndx)
      ?}
   ?}
|| {? R.find_key(_rub) & _godz<>*0
   || _KWKK.tabkk.prefix(_a,'G'+form(R.RN,,,'99'));
      {? _KWKK.tabkk.first()
      || {!
         |? {? _KWKK.tabkk.GODZ>_godz
            || _KWKK.tabkk.GODZ:=_godz; _godz:=*0
            || _godz-=_KWKK.tabkk.GODZ
            ?};
            _add(_kk(_KWKK.tabkk.KK,P.ref(),_data),_KWKK.tabkk.GODZ,R.ref(),_data);
            _KWKK.tabkk.next()
         !}
      || _add(exec('kk_hist','pracownik',P.ref(),_data),_godz,R.ref(),_data)
      ?}
   ?}
?};
R_KWGODZ.cntx_pop();
R.cntx_pop()


\add_wymiar_67
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Dodanie zapisu dopełnienia do wymiaru za czas niedopracowania w dzień wolny podczas odbioru tego dnia
::   WE: _a - badana data
::   WY:
::  OLD: \add_wymiar_67/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__HARM.OKRES || return(0) ?};
_data:={? var_pres('_a')=type_of(#0) || _a || return(0) ?};

_webTerm:=app_info('web_sesid')<>'';
{? _webTerm
|| VAR_EDIT.DATA:=_data;
   VAR_EDIT.ROK:=_data~1;
   VAR_EDIT.MSC:=_data~2;
   ZMIENNE.RODZAJ:='S'
?};
R_WO.cntx_psh();
R_WYK.cntx_psh();
R_PRACDN.cntx_psh();
R_PRACDN.index('R_PRACDN');
R_KWGODZ.cntx_psh();
R_WYK.index('R_WYKDO');
R_WYK.prefix(P.ref(),_data);
_godz:=*0;
{? R_WYK.first()
|| {!
   |? {? R_WYK.G<R_WYK.GO & (R_WYK.W='W' | R_WYK.W='S')
      || MASK.Use('R_KWGODZ',R_WYK.DO~1,R_WYK.DO~2);
         MASK.Use('R_PRACDN',R_WYK.DO~1,R_WYK.DO~2);
         R_PRACDN.prefix(P.ref(),R_WYK.DO);
         {? ~R_PRACDN.first()
         || R_PRACDN.blank();
            R_PRACDN.DT:=R_WYK.DO;
            R_PRACDN.ZM:='S';
            _jest_d:=R_PRACDN.add()
         || R_PRACDN.ZM:='S';
            _jest_d:=R_PRACDN.put()
         ?};
         {? _jest_d
         || _godz+=R_WYK.GO-R_WYK.G
         ?}
      ?};
      R_WYK.next()
   !}
?};
_popokr:=(exec('prz_okr','prc_rozlicz',_data) & __HARM.mc_otw(_data+1,0));

params_exec('wpr_godz','prc_rozlicz',_data,67,_godz,1,_popokr);
R_KWGODZ.cntx_pop();
R_WO.cntx_pop();
R_WYK.cntx_pop();
R_PRACDN.cntx_pop();
1


\kwalifikacja_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie kwalifikacji wejść i wyjść w zakładce
::   WE:
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_EDIT.AKT:=0;
_KWAL:=params_get().KWAL;
params_get().cfg.extra.FLAGA:=VAR_EDIT.FLAGA;
VAR_EDIT.DATA:=_KWAL.DT;
VAR_EDIT.ROK:=_KWAL.DT~1;
VAR_EDIT.MSC:=_KWAL.DT~2;
MASK.Use('R_REJ_WW',VAR_EDIT.ROK,VAR_EDIT.MSC);
R_REJ_WW.index('R_REJ_WX');
R_REJ_WW.prefix(P.ref(),_KWAL.DT);
R_SPEC.win_edit('RED');
{? exec('is_pzd02','ppsf')
|| R_SPEC.index('LP')
|| R_SPEC.index('R_SPECK')
?};
R_SPEC.prefix(P.ref(),_KWAL.DT);

R_WYK.index('R_WYKDN');
R_WYK.prefix(P.ref(),_KWAL.DT);
{? ~R_WYK.first() & ((__HARM.OKRES & A_OKR.S<>'Z' & _KWAL.BL<>'T') & __HARM.mc_otw(_KWAL.DT,0) | ~__HARM.OKRES)
|| REJ_INFO.ERROR:=0;
   params_get().cfg.extra.FLAGA:=2
?};
exec('wpisz_ts','prc_wewy',_KWAL.DT,1)


\kwalifikacja_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie kwalifikacji godzin w zakładce.
::   WE:
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_KWAL:=params_get().KWAL;
VAR_EDIT.DATA:=_KWAL.DT;
VAR_EDIT.AKT:=0;
MASK.Use('R_KWGODZ',_KWAL.DT~1,_KWAL.DT~2);
MASK.Use('R_PRACDN',_KWAL.DT~1,_KWAL.DT~2);
R_KWGODZ.win_edit('RED');
{? R_PRACDN.seek(_KWAL.R_PRACDN,,1,1)
|| _wyn:=((__HARM.OKRES & A_OKR.S<>'Z' & _KWAL.BL<>'T' & __HARM.mc_otw(_KWAL.DT,0)) | ~__HARM.OKRES)
?};
params_exec('PRDKWGpr','prc_rozlicz');
_wyn


\PRDKWGpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja wywoływana przez akcję Kwalifikacja okienka.
::       Otwiera odpowiedni zbiór tabeli kwalifikacji godzin i ogranicza jej dziedzinę.
::   WE:
::   WY:
::  OLD: \PRDKWGpr/przeprac.fml
::----------------------------------------------------------------------------------------------------------------------
R_WZCZ.index('R_WZCZ');
R_WZCZ.prefix(P.name(),P.ref());
{? _Kalend:=
   {? R_WZCZ.find_le(R_PRACDN.DT)
   || R_WZCZ.KAL
   || P.KAL
   ?}
|| KAL_ROK.index('KAL_ROK');
   KAL_ROK.prefix(_Kalend);
   {? KAL_ROK.find_key(R_PRACDN.DT~1)
   || KAL_DEF.index('KAL_DEF');
      KAL_DEF.prefix(KAL_ROK.ref());
      KAL_DEF.find_key(R_PRACDN.DT)
   ?}
?};
R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(P.ref(),R_PRACDN.DT);
R.index('RUBKLKOD');
VAR.KLASA:='R';
{? __KAL.p_kin(R_PRACDN.DT)<>'T' & __KAL.grafik(R_PRACDN.DT)<>'T'
|| KAL_DEF.CZAS:=*(*KAL_DEF.CZAS*P.WY$2)
?};
KAL_DEF.get()


\AKTSUMCP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Aktualizacja czasu pracy.
::   WE:
::   WY:
::  OLD: \AKTSUMCP/przeprac.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
R_KWGODZ.cntx_psh();
{! _ind:=54..69
|! _fml:='{? var_pres(\'G'+$_ind+'\',_a)>0 || _a.G'+$_ind+':=time(0,0,0) ?}';
   ($_fml)(_par.KWAL)
!};
_ind:=7135;
_fml:='{? var_pres(\'G'+$_ind+'\',_a)>0 || _a.G'+$_ind+':=time(0,0,0) ?}';
($_fml)(_par.KWAL);
:: obsługa godzin firmowych
_rub:=__RUB.sys_rub(8311);
{? _rub.first
|| {!
   |? _fml:='{? var_pres(\'G'+$_rub.RN+'\',_a)>0 || _a.G'+$_rub.RN+':=time(0,0,0) ?}';
      ($_fml)(_par.KWAL);
      _rub.next
   !}
?};
params_exec('r_kwg_s','prc_rozlicz',0);
params_exec('r_kwg_s','prc_rozlicz',1);
_par.KWAL.put();
grp_disp(_par.KWAL,_par.WER);
R_KWGODZ.cntx_pop()


\spr_czy_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Sprawdzenie czy istnieją odbiory godzin dla pozycji.
::   WE:
::   WY:
::  OLD: \czy_odb/przeprac.fml
::----------------------------------------------------------------------------------------------------------------------
R_WYK.index('R_WYKDN');
R_WYK.prefix();
{? R_WYK.find_key(P.ref(),R_KWGODZ.DZ,R_KWGODZ.KW().RN,R_KWGODZ.KK)
|| FUN.emsg('%1\n%2'
      [  'Istnieją zapisy w odebranych godzinach, które korzystają z tej kwalifikacji.'@,
         'Prosze sprawdzić kartotekę odbioru godzin.'@
      ]
   ); 0
|| 1
?}


\r_kw_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Funkcja na rekord po tabeli R_KWGODZ. Sprawdzenie poprawności wprowadzanych danych.
::   WE:
::   WY:
::  OLD: \r_kw_chk/przeprac.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record2(cur_tab(1,1),'KW','Kod i nazwa'@,'GODZ','Godziny'@);
{? +_wyn || return(_wyn) ?};

{? R_KWGODZ.KW().RN=63
|| FUN.emsg('%1\n%2'['Wprowadzenie odbioru nadgodzin możliwe tylko w opcji \"Odbiór\".'@,'Proszę poprawić dane.'@]);
   'KW'
|| ''
?}


\kw_godz_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła do wykonania po obsłudze zakładki kwalifikacji czasu pracy.
::   WE:
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR_EDIT.AKT
|| _KWAL:=params_get().KWAL;
   R.index('RUBKOD');
   {! _ind:=54..58 |! ($('_a.'+'G'+$_ind))(_KWAL):=time(0,0,0) !};
   _KWAL.G7135:=time(0,0,0);
   exec('r_kwg_s','prc_rozlicz',0);
   exec('r_kwg_s','prc_rozlicz',1);
   _KWAL.put()
?}


\wstep_odprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wstepne wprowadzenie danych o odpracowaniu do kartoteki udzielenia czasu wolnego.
::   WE: _a - data odpracowania
::   WY:
::  OLD: \wstep_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=_a~1;
_mc:=_a~2;
_data:=_a;
MASK.Use('R_KWGODZ',_rok,_mc);
R_ODP.index('ROK');
R_ODP.prefix(P.ref(),_rok,_mc,_data);
{? R_ODP.first
|| {!
   |? R_ODP.GO:=*0;
      R_ODP.put(1);
      R_ODP.next ()
   !} ?};
R_KWGODZ.index('DATA_RUB');
R_KWGODZ.prefix(P.ref(),_data);
{? R_KWGODZ.first()
|| {!
   |? _kod:=R_KWGODZ.KW().RN;
      _Czas:=(*R_KWGODZ.GODZ/60);
:: wprowadzenie odpracowania w tym samym dniu
      {? _kod=54
      || R_ODP.index('PRAC');
         R_ODP.prefix(P.ref(),_data);
         {? R_ODP.first()
         || {!
            |? {? R_ODP.R_ODN().DW=R_ODP.DW & R_ODP.GO=*0
               || R_KWGODZ.cntx_psh();
                  R_KWGODZ.index('DATA_RUB');
                  R_KWGODZ.prefix(P.ref(),R_ODP.DW,54);
                  _czas_pr:=*0;
                  {? R_KWGODZ.first()
                  || {!
                     |? _czas_pr+=R_KWGODZ.GODZ;
                        R_KWGODZ.next()
                     !}
                  ?};
                  {? _czas_pr>=exec('wymiar_godz','prc_rozlicz',R_ODP.DW)
                  || R_ODP.GO:=R_ODP.G;
                     R_ODP.put(1)
                  ?};
                  R_KWGODZ.cntx_pop()
               ?};
               R_ODP.next()
            !}
         ?}
      ?};

:: Jeśli jest wniosek odpracowania
      {? _kod=55 | _kod=56 | _kod=64 | _kod=65 | _kod=68 | _kod=69
      || R_ODP.index('PRAC');
         R_ODP.prefix(P.ref(),_data);
         {? R_ODP.first()
         || _czas:=0;
            {!
            |? {? R_ODP.R_ODN().DW<>R_ODP.DW
               || _g_odp:=(*R_ODP.G/60)-(*R_ODP.GO/60);
                  {? _g_odp>0
                  || _g_odpn:=_g_odp-_Czas;
                     {? _g_odpn>=0
                     || R_ODP.GO:=R_ODP.GO+*(_Czas*60);
                        R_ODP.put(1);
                        _czas+=_Czas;
                        _Czas:=0;
                        0
                     || _Czas:=_Czas-_g_odp;
                        R_ODP.GO:=R_ODP.GO+*(_g_odp*60);
                        _czas+=_g_odp;
                        R_ODP.put(1);
                        R_ODP.next()
                     ?}
                  || R_ODP.next()
                  ?}
               || R_ODP.GO:=R_ODP.G;
                  R_ODP.put(1);
                  R_ODP.next()
               ?}
            !}
         ?}
      ?};
      R_KWGODZ.next()
   !}
?};
1


\r_wo_po_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie słownika w polu PO tabeli R_WO.
::   WE:
::   WY:
::  OLD: \f3_pocz_kon/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'PO','STRING[1]','Typ',
   'OPIS','STRING[20]','Opis czasu odbioru'
);

_add:=
   "  _a.LP:=_b;
      _a.PO:=1+_c;
      _a.OPIS:=_c;
      _a.add()
   ";

_add(_TAB,1,'Początek');
_add(_TAB,1,'Koniec');

_wer:=_TAB.mk_sel('Czas odbioru'@,,,'#czasodb',,,,,'U',,,,,'maximized');
_TAB.win_fld(_wer,,'PO',,,2,,1,'Typ'@,,'Czy odbiór godzin na [P]oczątku czy na [K]ońcu dnia pracy'@);
_TAB.win_fld(_wer,,'OPIS',,,20,,1,'Opis',,'Opis czasu odbioru'@);
_TAB.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_TAB.win_sel(_wer);
_ret:='';
_TAB.prefix();
{? _TAB.select()
|| _ret:=_TAB.PO
?};
{? _ret<>'' || _ret || 0 ?}


\r_wo_w_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyświetlenie słownika w polu W tabeli R_WO.
::   WE:
::   WY:
::  OLD: \f3_rodz_odb/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'W','STRING[1]','Typ',
   'OPIS','STRING[20]','Opis typu wniosku'
);

_add:=
   "  _a.LP:=_b;
      _a.W:=_c;
      _a.OPIS:=_d;
      _a.add()
   ";

_add(_TAB,1,'P','Pracownik');
_add(_TAB,1,'F','Pracodawca');
_add(_TAB,1,'S','Święto');
_add(_TAB,1,'W','Dzień wolny');

_wer:=_TAB.mk_sel('Typy odbiorów',,,'#typodb');
_TAB.win_fld(_wer,,'PO',,,2,,1,'Typ'@,,'Typy odbiorów: P-pracownik, F-firma, S-święto, W-dzień wolny'@);
_TAB.win_fld(_wer,,'OPIS',,,20,,1,'Opis',,'Opis typu wniosku o odbiór'@);
_TAB.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_TAB.win_sel(_wer);
_ret:='';
_TAB.prefix();
{? _TAB.select()
|| _ret:=_TAB.W
?};
{? _ret<>'' || _ret || 0 ?}


\var_edit_go_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Przed wyświetleniem pola zmiennej VAR_EDIT.GO
::   WE:
::   WY:
::  OLD: \harm11/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_EDIT.GO:=time(0,0,0);
{? cur_tab(1,1)=R_WO
|| R_WYK.cntx_psh();
   R_WYK.index('R_WYKWO');
   R_WYK.prefix(R_WO.ref());
   {? R_WYK.first()
   || {!
      |? VAR_EDIT.GO+=R_WYK.GO;
         R_WYK.next()
      !}
   ?};
   R_WYK.cntx_pop()
|| R_ODP.cntx_psh();
   R_ODP.index('NAG');
   R_ODP.prefix(R_ODN.ref());
   {? R_ODP.first()
   || {!
      |? VAR_EDIT.GO+=R_ODP.GO;
         R_ODP.next()
      !}
   ?};
   R_ODP.cntx_pop()
?};
1


\r_wo_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Formuła na "rekord przed" w okienku WER tabeli R_WO
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie maski EDOKUM
{? R_WO.EDOKUM<>null() & (ref_name(R_WO.EDOKUM)<>EDOKUM.name())
|| EDOKUM.use(ref_name(R_WO.EDOKUM))
?}


\r_wo_wer_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed dołączeniem wniosku o odbiór godzin w oknie WER tabeli R_WO.
:Po dołączeniu wniosku o odbiór godzin
::   WE:
::   WY:
::  OLD: \add_wniosek/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
R_WO.blank();
R_WO.PO:='K';

{? __HARM.OKRES
|| R_WO.A_OKR:=A_OKR.ref();
   R_WO.R:=A_OKRP.OD~1;
   R_WO.M:=A_OKRP.OD~2
|| R_WO.R:=VAR_EDIT.ROK;
   R_WO.M:=VAR_EDIT.MSC
?};

{! _ii:=1..R_WO.fld_num()
|! _acr:=R_WO.fld_acr(_ii);
   ($('R_WO.fld_fml(\''+_acr+'\',\'BEFORE_EDIT\',\"*\")'))();
   R_WO.efld_opt('RED','label_color=',,_acr);
   {? ',R,M,DO,G,'*(','+_acr+',') || R_WO.efld_opt('RED','mark=1',,_acr) ?}
!};
_wyn:=
   {? R_WO.edit(
      "  exec('spr_wniosek','prc_rozlicz',,null)=''
      "
   )
   || R_WO.add(1)
   ?};
_wyn


\r_wo_wer_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po dołączeniu wniosku o odbiór godzin w oknie WER tabeli R_WO.
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_WO.AUTO='T'
|| R_WYK.prefix(R_WO.ref());
   exec('r_wo_wer_afo','prc_rozlicz')
?};
_sTyp:=R_WO.W;
_p_ref:=R_WO.P;
_data:=R_WO.DO;
_okr_ref:=R_WO.A_OKR;
{? (_sTyp='S' | _sTyp='W') & exec('copy_buff_day','prc_plan',_p_ref,_data,'P','G')
|| exec('ustaw_status','prc_graf',_p_ref,_data,'Z',_okr_ref)
|| exec('ustaw_status','prc_graf',_p_ref,_data,'',_okr_ref)
?}


\r_wo_wer_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed popraw dla wniosku o odbiór godzin w oknie WER tabeli R_WO.
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
{! _ii:=1..R_WO.fld_num()
|! _acr:=R_WO.fld_acr(_ii);
   {? _acr<>'PO'
   || ($('R_WO.fld_fml(\''+_acr+'\',\'BEFORE_EDIT\',\"~R_WYK.size()\")'))();
      {? R_WYK.size()
      || R_WO.efld_opt('RED','label_color='+exec('findfnrd','color'),,_acr)
      || R_WO.efld_opt('RED','label_color=',,_acr)
      ?}
   || ($('R_WO.fld_fml(\''+_acr+'\',\'BEFORE_EDIT\',\"*")'))();
      R_WO.efld_opt('RED','label_color=',,_acr)
   ?};
   {? ',R,M,DO,G,'*(','+_acr+',') || R_WO.efld_opt('RED','mark='+($(~R_WYK.size())),,_acr) ?}
!};

A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
A_OKRM.prefix(R_WO.DO~1,R_WO.DO~2);
{? A_OKRM.first() & A_OKRM.S='Z'
|| FUN.emsg('%1\n%2'['Zamknięty miesiąc rozliczeniowy w dniu odbioru.'@,'Akcja niedostępna.'@]);
   _ok:=0
?};
A_OKRM.cntx_pop();
_ok


\r_wo_wer_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po popraw dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_WO.AUTO='T' & (R_WYK.size()=0)
|| exec('r_wo_wer_afo','prc_rozlicz')
?}


\r_wo_wer_afu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po usuń dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::   WE:
::   WY:
::  OLD: \del_wniosek/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('spr_del','prc_rozlicz')
|| {? FUN.ask('Czy na pewno usunąć wniosek?'@)
   || _p_ref:=R_WO.P;
      _data:=R_WO.DO;
      _okr_ref:=R_WO.A_OKR;
      exec('del_odbior','prc_rozlicz');
      {? R_WO.del(,1)
      ||  exec('ustaw_status','prc_graf',_p_ref,_data,'',_okr_ref)
      ?}
   ?}
?}


\spr_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Sprawdza czy można usunąc wniosek
::   WE: [_a] [NUMBER] - czy wyświetlać komunikaty
::   WY:
::  OLD: \spr_del/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_msg:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_wyn:=1;
R_WYK.cntx_psh();
{? R_WO.W='P' | R_WO.W='F'
|| {? R_WYK.first()
   || {!
      |? _wyn:=__HARM.mc_otw(R_WYK.DN,_msg);
         _wyn & R_WYK.next()
      !}
   ?}
?};
R_WYK.cntx_pop();
_wyn


\del_odbior
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Po modyfikacji wniosku o odbior godzin
::  OLD: \del_odbior/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_WYK.first()
|| {! |? R_WYK.del() !}
?};
exec('add_wymiar_67','prc_rozlicz',R_WO.DO)


\r_wo_wer_afo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Po dołączeniu wniosku o odbiór godzin.
::   WE:
::   WY:
::  OLD: \add_odbior/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? __HARM.OKRES
|| {? R_WO.W<>'S' & R_WO.W<>'W'
   || _roznica:=0;
      _od:={? date(R_WO.R,R_WO.M,1)<A_OKRP.OD || A_OKRP.OD || date(R_WO.R,R_WO.M,1) ?};
      _do:={? date(R_WO.R,R_WO.M,0)>A_OKRP.DO || A_OKRP.DO || date(R_WO.R,R_WO.M,0) ?}
   || _roznica:=exec('roznica','prc_rozlicz',A_OKRP.OD,A_OKRP.DO);
      _od:=A_OKRP.OD;
      _do:=A_OKRP.DO
   ?}
|| _od:=date(R_WO.R,R_WO.M,1);
   _do:=date(R_WO.R,R_WO.M,0);
   _roznica:=0
?};

{? R_WO.AUTO='N'
|| exec('licz_odb','prc_rozlicz',_od,_do,_roznica)
|| {? ~R_WYK.size() || exec('licz_odb_auto','prc_rozlicz',_od,_do,_roznica) ?}
?};
exec('add_wymiar_67','prc_rozlicz',R_WO.DO);
1


\r_wo_wer_afm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Możliwe odbiory" dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRP.cntx_psh();
_ODB:=exec('nadmiar','grafik',P.ref(),A_OKR.ref());
_win:=_ODB.mk_sel('Możliwe odbiory'@,,,,,,,,'U',,,,,'maximized');
_ODB.win_fld(_win,,'DT',,,12,,,'Data nadmiaru'@,,'Data wystąpienia godzin do odebrania'@);
_ODB.win_fld(_win,,'RN',,,5,,,'Rubryka'@,,'Rodzaj godzin do odebrania'@);
_ODB.win_fld(_win,,'RT',,,20,,,'Opis'@,,'Nazwa godzin do odebrania'@);
_ODB.win_fld(_win,,'TYP',,,1,,,'Typ'@,,'Typ godzin do odebrania'@);
_ODB.win_fld(_win,,'G',,,12,,,'Godziny'@,,'Liczba godzin do odebrania'@);
_ODB.win_fld(_win,,'KK',,,35,,,'Konto kosztowe'@,,'Symbol konta kosztów godzin do odebrania'@);
_ODB.win_sel(_win);
_ODB.select();
A_OKRP.cntx_pop()


\mozliwe_odbiory
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Ustalenie możliwych odbiorów z godzin wstępnie zakwalifikowanych jako nadgodziny.
::   WE: _a - [DATE] - Data początkowa
::       _b - [DATE] - Data końcowa
::       _c - [INTEGER] - Różnica miesięcy w okresie rozliczeniowym
::   WY: _ODB - tabela z możliwymi odbiorami
::  OLD: \mozliwe_odbiory/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{! _ind:=0.._c
|!
:: pętla podstawowa dla mięsiecy okresu uwzględnienie poczętku i końca okresu rozliczeniowego
   _data:=date(_b~1,_b~2-_ind,1);
   _pocz:={? _data<_a || _a || _data ?};
   _kon:={? date(_b~1,_b~2-_ind,0)>_b || _b || date(_b~1,_b~2-_ind,0) ?};

   MASK.Use('R_KWGODZ',_data~1,_data~2);
   _sql:='select R_KWGODZ.DZ DT, '+
               'R.RN RN, 0 WORK, \'R\' TYP, '+
               'R.RT RT, '+
               'R_KWGODZ.GODZ G,  '+
               'R_KWGODZ.DZ as P,  '+
               '\'N\' as USTAW, '+
               '0 REF, '+
               'R_KWGODZ.GODZ GO, '+
               'KK.SYM KK, '+
               'KK.REFERENCE REF_K, '+
               '0 LP '+
         'from  R_KWGODZ '+
         'join  R left join KK '+
         'where R_KWGODZ.P=:_a '+
            'and R.RN in (55,56,58,65) '+
            'and (R_KWGODZ.REFERENCE like \''+MASK.R_KWGODZ+($(_data~1)+2)+(('0'+$(_data~2))+2)+'%\') '+
            'and R_KWGODZ.DZ>=to_date(:_b) '+
            'and R_KWGODZ.DZ<=to_date(:_c) '+
         'order by 1,2,3';

   {? ~_ind
   ||
:: Dla pierwszego obrotu tworzona jest właściwa tabela wyjściowa
      {? var_pres('_ODB')>100 || &_ODB ?};
      _ODB:=sql(_sql,P.ref(),_pocz,_kon)
   ||
:: Następne obroty pętli mają za zadanie dopisywać dane do tabeli wyjścia
      {? var_pres('_POM')>100 || &_POM ?};
      _POM:=sql(_sql,P.ref(),_pocz,_kon);
      {? _POM.first()
      || {!
         |? _ODB.blank(1);
            {! _ind:=1.._POM.fld_num()
            |! _acr:=_POM.fld_acr(_ind);
               ($('_a.'+_acr))(_ODB):=($('_a.'+_acr))(_POM)
            !};
            _ODB.add();
            _POM.next()
         !}
      ?}
   ?}
!};
:: usunięcie nadgodzin z miesięcy przeniesionych do wyliczeń
{? _ODB.first()
|| {!
   |? {? ~__HARM.mc_otw(_ODB.DT,0,exec('prz_okr','prc_rozlicz',_ODB.DT,0)) & _ODB.RN<>58 & _ODB.RN<>65
      || _ODB.del()
      || _ODB.next()
      ?}
   !}
?};
params_set('ODB',_ODB);
:: dodanie dodatkowych informacji do tabeli wyjścia
_ODB.for_each(
   "  _ODB:=params_get().ODB;
      _ODB.GO:=time(0,0,0);
      _ODB.WORK:=
         {? _ODB.RN=55 | _ODB.RN=56 | _ODB.RN=65
         || 1
         || __KAL.w_days(_ODB.DT,_ODB.DT)
         ?};
      _ODB.TYP:=
         {? _ODB.WORK
         || 'R'
         |? __KAL.h_days(_ODB.DT,_ODB.DT)
         || 'S'
         || 'W'
         ?};
      _ODB.put()
   "
);
exec('odprac_minus','prc_rozlicz');
:: Uwzględnienie już odebranych godzin z kwalifikacji
R_WYK.cntx_psh();
R_WYK.index('R_WYKDN');

{? _ODB.first()
|| {!
   |? _ODB.P:=date(0,0,0);
      R_WYK.prefix(P.ref,_ODB.DT,_ODB.RN);
      {? R_WYK.first()
      || {!
         |? {? _ODB.REF_K=$R_WYK.KK
            || _ODB.P:=R_WYK.DO;
               {? R_WYK.W='S' | R_WYK.W='W'
               || _ODB.G:=*0
               || _ODB.G-=R_WYK.G
               ?};
               {? (R_WYK.W='S' | R_WYK.W='W') & (_ODB.RN=55 | _ODB.RN=56 | _ODB.RN=65) || _ODB.WORK:=1 ?}
            ?};
            R_WYK.next()
         !}
      ?};
      {? _ODB.G>*0
      || _ODB.put();
         _ODB.next()
      || _ODB.del(,1)=2
      ?}
   !}
?};
R_WYK.cntx_pop();
:: godziny zrealizowane
_ODB


\r_wo_wer_afs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Usuń szczegóły" dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('spr_del','prc_rozlicz')
|| exec('del_odbior','prc_rozlicz')
?}


\r_wo_wer_bfz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Zmiana daty" dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_WO.W='S' | R_WO.W='W'
|| FUN.emsg('Akcja dostępna tylko dla wniosku o odbiór godzin.'@);
   0
|| 1
?}


\r_wo_wer_afz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Zmiana daty" dla wniosku o odbiór godzin w oknie WER tabeli R_WO
::       Modyfikacja daty odbioru dla wniosku o odbiór godzin.
::   WE:
::   WY:
::  OLD: \wnioski_odbioru/wykorz.fml
::  OLD: \popr_wniosek/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
A_OKRM.prefix(R_WYK.DO~1,R_WYK.DO~2);
{? A_OKRM.first() & A_OKRM.S='Z'
|| FUN.emsg('%1\n%2'['Zamknięty miesiąc rozliczeniowy w dniu odbioru.'@,'Akcja niedostępna.'@])
|| VAR_EDIT.DATA:=R_WYK.DO;
   VAR_EDIT.win_edit('WEWY_DAT');
   {? VAR_EDIT.edit(
         "  {? VAR_EDIT.DATA=#0
            || FUN.emsg('Nie wprowadzono daty odbioru.'@);
               'DATA'
            |? VAR_EDIT.DATA<=R_WYK.DN
            || FUN.emsg('%1\n%2'['Błędna data odbioru.'@,'Data odbioru musi być późniejsza od daty nadmiaru.'@]);
               'DATA'
            || A_OKRM.prefix(VAR_EDIT.DATA~1,VAR_EDIT.DATA~2);
               {? A_OKRM.first()
               || {? A_OKRM.S='Z'
                  || FUN.emsg('%1\n%2'['Błędna data odbioru.'@,'Zamknięty miesiąc rozliczeniowy w dniu odbioru.'@]);
                     'DATA'
                  || 1
                  ?}
               || 1
               ?}
            ?}
         "
      )
   || _wyn:=exec('spr_wniosek','prc_rozlicz',VAR_EDIT.DATA);
      {? _wyn=''
      || _old_DO:=R_WO.DO;
         _mydo:=do_state()=0;
         {? _mydo || do() ?};

         _r_wo:=R_WO.ref();
         R_WYK.cntx_psh();
         R_WYK.index('R_WYKWO');
         {? R_WYK.first()
         || {!
            |? R_WYK.DO:=VAR_EDIT.DATA;
               {? ~R_WYK.put(1) || undo() ?};
               R_WYK.next()
            !}
         ?};
         R_WYK.cntx_pop();

         R_WO.DO:=VAR_EDIT.DATA;
         {? ~R_WO.put(1) || undo() ?};
::       ponowna kwalifikacja dla starego i nowego dnia odbioru
         _KWAL:=exec('tab_create','prc_rozlicz');
         _KWKK:=exec('kwkk_create','prc_rozlicz');
         params_set('KWAL',_KWAL,'KWKK',_KWKK);
         exec('kwal_zdalnie','prc_rozlicz',_old_DO,_old_DO,_old_DO);
         &_KWAL;&_KWKK;
         _KWAL:=exec('tab_create','prc_rozlicz');
         _KWKK:=exec('kwkk_create','prc_rozlicz');
         params_set('KWAL',_KWAL,'KWKK',_KWKK);
         exec('kwal_zdalnie','prc_rozlicz',R_WO.DO,R_WO.DO,R_WO.DO);

         {? _mydo || end() ?}
      ?}
   ?}
?};
A_OKRM.cntx_pop();
1


\licz_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyszukanie godzin możliwych do odbioru przez zgłoszenie pracownika
::   WE: _a - [DATE] - Początek
::       _b - [DATE] - Koniec
::       _c - [INTEGER] - Liczba miesięcy między początkiem i końcem okresu
::   WY:
::  OLD: \licz_odb/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ODB:=exec('tabela_odbioru','prc_rozlicz',_a,_b,_c);
params_set('ODB',_ODB);
{? _ODB.first()
|| R.index('RUBKOD');
   R.prefix();

   _licz_odb:=
      "  _ODB:=params_get().ODB;
         _godz:=time(0,0,0);
         _ODB.cntx_psh();
         {? _ODB.first()
         || {!
            |? _godz+=_ODB.GF;
               _ODB.next()
            !}
         ?};
         _ODB.cntx_pop();
         _godz
      ";

   _win:=_ODB.mk_sel('Ustawienie odbiorów.'@,,,'r_wyk_03',20,10,20,,'U',,,,,'maximized');
   _ODB.fld_attr(,2);
:: pola okienka
   _ODB.win_fld(_win,,'DT',,,12,,1,'Data'@,,'Data odbioru'@);
   _ODB.win_fld(_win,,'RN',,,5,,1,'Kod'@,,'Kod rodzaju godzin'@);
   _ODB.win_fld(_win,,'RT',,,25,,1,'Nazwa'@,,'Nazwa rodzaju godzin'@);
   _ODB.win_fld(_win,,'G',,,8,,1,'Godziny do odbioru'@,,'Liczba godzin do odbioru'@);
   _ODB.win_fld(_win,,'GO',,,8,,1,'Godziny odbioru'@,,'Liczba godzin odbieranych'@);
   _ODB.win_fld(_win,,'GF',,,8,,0,'Faktyczny odbiór'@,,'Liczba faktycznie odbieranych godzin'@);
   _ODB.win_fld(_win,,'KK',,,20,,1,'Konto kosztów'@,,'Symbol konta kosztów'@);
   _ODB.win_fld(_win,,'USTAW',,,,,1,'Ustaw'@,,'Akceptacja godzin do odbioru'@,2,,"'T'","'N'");
:: akcje okienka
   _ODB.win_act(_win,0,'Formuła','Ustaw'@@,,,,
      "  {? cur_tab(1,1).USTAW='N'
         || {? R_WO.W='S' | R_WO.W='W'
            || _godz:=exec('wymiar_godz','prc_rozlicz',R_WO.DO);
               cur_tab(1,1).USTAW:='T';
               cur_tab(1,1).GO:={? cur_tab(1,1).G>_godz || _godz || cur_tab(1,1).G ?};
               cur_tab(1,1).GF:=_godz
            || cur_tab(1,1).USTAW:='T';
               cur_tab(1,1).GO:=cur_tab(1,1).G;
               cur_tab(1,1).GF:={?  R_WO.W='F' || *(*cur_tab(1,1).GO*1.5) || cur_tab(1,1).GO ?}
            ?}
         ?};
         cur_tab(1,1).put();
         cur_tab(1,1).actions_grayed(
            cur_win(1,1),
            {? cur_tab(1,1).USTAW='N'
            || 'ZA'+{? R_WO.W<>'S' & R_WO.W<>'W' || 'P' || '' ?}
            || 'U'
            ?}
         );
         win_disp()
      ",,1,,,'U'
   );
   _ODB.win_act(_win,0,'Formuła','Zeruj'@@,,,,
      "  {? cur_tab(1,1).USTAW='T'
         || cur_tab(1,1).USTAW:='N';
            cur_tab(1,1).GO:=cur_tab(1,1).GF:=time(0,0,0)
         ?};
         cur_tab(1,1).put();
         cur_tab(1,1).actions_grayed(
            cur_win(1,1),
            {? cur_tab(1,1).USTAW='N'
            || 'ZA'+{? R_WO.W<>'S' & R_WO.W<>'W' || 'P' || '' ?}
            || 'U'
            ?}
         );
         win_disp()
      ",,1,,,'Z');

   {? R_WO.W<>'S' & R_WO.W<>'W'
   || _ODB.win_act(_win,0,'Popraw',,,,
         "  {? cur_tab(1,1).USTAW<>'T' || FUN.emsg('Należy najpierw ustawić odbiór.'@); 0 || 1 ?}
         "
      )
   ?};
   _ODB.win_act(_win,0,'Formuła','Akceptacja'@@,,,,"sel_exit",,,,,'A');
   _ODB.win_act(_win,,'Rekord',,,,
      "  cur_tab(1,1).cntx_psh();
         cur_tab(1,1).first();
         _godz:=0;
         {!
         |? _godz+=cur_tab(1,1).GF;
            cur_tab(1,1).next()
         !};
         cur_tab(1,1).cntx_pop();
         _gray:={? _godz<>R_WO.G || 'A' || '' ?};
         _gray+=
            {? cur_tab(1,1).USTAW='N'
            || 'Z'+{? R_WO.W<>'S' & R_WO.W<>'W' || 'P' || '' ?}
            || 'U'
            ?};
         cur_tab(1,1).actions_grayed(cur_win(1,1),_gray)
      ",
      "  cur_tab(1,1).GO:={?  R_WO.W='F' || *(*cur_tab(1,1).GF/1.5) || cur_tab(1,1).GF ?};
         {? cur_tab(1,1).GO>cur_tab(1,1).G
         || FUN.emsg('Za dużo godzin odbioru.'@);
            'GF'
         || 1
         ?}
      "
   );
:: przyciski okienka
   _ODB.win_btn(_win,'text=%1'['Ustaw'@],'menu:U');
   _ODB.win_btn(_win,'text=%1'['Zeruj'@],'menu:Z');
   {? R_WO.W<>'S' & R_WO.W<>'W'
   || _ODB.win_btn(_win,'text=%1'['Popraw'@],'menu:P')
   ?};
   _ODB.win_btn(_win,'text=%1,panel=bottom'['Akceptacja'@],'menu:A');
   _ODB.win_sel(_win);

   {? R_WYK.first()
   || {!
      |? _ODB.prefix(R_WYK.DN,R_WYK.R().RN);
         {?  _ODB.first()
         || {!
            |? {? $R_WYK.KK=_ODB.REF_K
               || _ODB.USTAW:='T';
                  _ODB.put();
                  0
               || _ODB.next()
               ?}
            !}
         ?};
         R_WYK.next()
      !}
   ?};
   _ODB.prefix();

   {!
   |? _ODB.hdr_sel();
      _ODB.hdr_sel('Faktyczny odbiór godzin: %1.'@[$_licz_odb()]);
      {? _ODB.select()
      || _ok:=1;
         {? _ODB.first()
         || _godz:=time(0,0,0);
            {!
            |? _godz+=_ODB.GF;
               _ODB.next()
            !};
            {? _godz>*0 & _godz<>R_WO.G
            || FUN.emsg('%1\n%2\n%3'
                  [  'Zadeklarowana wartość odbioru: %1.'@[$R_WO.G],
                     'Faktyczna wartość odbioru: %1.'@[$_godz],
                     'Proszę skorygować ilość godzin odbioru.'@
                  ]
                );
               return(1)
            ?}
         ?};
         {? R_WYK.first()
         || _ok:=0;
            {? FUN.ask('%1\n%2'['Istnieją zapisy w odbiorze godzin.'@,'Czy nadpisać?'@])
            || {! |? R_WYK.del() !};
               _ok:=1
            ?}
         ?};
         {? _ODB.first() & _ok
         || {!
            |? {? _ODB.USTAW='T'
               || {? _ODB.GO>*0 & R.find_key(_ODB.RN)
                  || R_WYK.blank();
                     R_WYK.R_WO:=R_WO.ref();
                     R_WYK.W:=R_WO.W;
                     R_WYK.DO:=R_WO.DO;
                     R_WYK.R:=R.ref();
                     R_WYK.DN:=_ODB.DT;
                     {? KK.seek(_ODB.REF_K)
                     || R_WYK.KK:=KK.ref()
                     ?};
                     R_WYK.G:={? _ODB.GO>_ODB.GF || _ODB.GF || _ODB.GO ?};
                     R_WYK.GO:=_ODB.GF;
                     R_WYK.add();
                     _ODB.P:=R_WYK.DO
                  ?}
               || 1
               ?};
               _ODB.put();
               _ODB.next()
            !};
            R_WYK.first()
         ?};
         0
      || {? _ODB.first()
         || _czy_ust:=0;
            {!
            |?  _czy_ust:=_ODB.USTAW='T';
                ~_czy_ust & _ODB.next()
            !};
            {? _czy_ust
            || ~FUN.ask('Na pewno przerwać wprowadzanie odbiorów?'@)
            ?}
         ?}
      ?}
   !}
|| FUN.emsg('Brak możliwego odbioru dla danego typu.'@)
?}


\tabela_odbioru
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Dla konkretnego wniosku o odbiór nadgodzin.
::       Ustalenie możliwych odbiorów z nadgodzin wstępnie zakwalifikowanych jako nadgodziny.
::   WE: _a - [DATE] - Początek
::       _b - [DATE] - Koniec
::       _c - [INTEGER] - Liczba miesięcy między początkiem i końcem okresu
::   WY: _ODB - tabela z możliwymi odbiorami
::  OLD: \tabela_odbioru/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_WO.W='S'
|| _work:=0;
   _typ:='S'
|? R_WO.W='W'
|| _work:=0;
   _typ:='W'
|| _work:=1;
   _typ:='R'
?};

KK.index('KONTASYM');
KK.prefix();
{! _ind:=0.._c
|! _data:=date(_b~1,_b~2-_ind,1);
   _poczat:={? _data<_a || _a || _data ?};
   _koniec:={? date(_b~1,_b~2-_ind,0)>_b || _b || date(_b~1,_b~2-_ind,0) ?};
   MASK.Use('R_KWGODZ',_data~1,_data~2);

   _sql:='select R_KWGODZ.DZ DT, '+
                'R.RN RN, 0 WORK, \'R\' TYP, '+
                'R.RT RT, '+
                'R_KWGODZ.GODZ G, '+
                'R_KWGODZ.DZ as P, '+
                '\'N\' as USTAW, '+
                '0 REF, '+
                'R_KWGODZ.GODZ GO, '+
                'R_KWGODZ.GODZ GF, '+
                'KK.SYM KK, '+
                'KK.REFERENCE REF_K, '+
                '0 LP '+
         'from  R_KWGODZ join  R left join KK '+
         'where R_KWGODZ.P=:_a '+
                'and R.RN in (55,56,58,65) '+
                'and (R_KWGODZ.REFERENCE like \''+MASK.R_KWGODZ+($(_data~1)+2)+(('0'+$(_data~2))+2)+'%\') '+
                'and R_KWGODZ.DZ>=to_date(:_b) '+
                'and R_KWGODZ.DZ<=to_date(:_c) '+
         'order by 1,2,3';
   {? ~_ind
   || {? var_pres('_ODB')>100 || &_ODB ?};
      _ODB:=sql(_sql,P.ref(),_poczat,_koniec)
   || {? var_pres('_POM')>100 || &_POM ?};
      _POM:=sql(_sql,P.ref(),_poczat,_koniec);
      {? _POM.first()
      || {!
         |? _ODB.blank(1);
            {! _ind:=1.._POM.fld_num()
            |! _acr:=_POM.fld_acr(_ind);
               ($('_a.'+_acr))(_ODB):=($('_a.'+_acr))(_POM)
            !};
            _ODB.add();
            _POM.next()
         !}
      ?}
   ?}
!};

:: usunięcie nadgodzin z miesięcy przeniesionych do wyliczeń
{? _ODB.first()
|| {!
   |? {? ~__HARM.mc_otw(_ODB.DT,0) & _ODB.RN<>58 & _ODB.RN<>65
      || _ODB.del()
      || _ODB.next()
      ?}
   !}
?};
params_set('ODB',_ODB);

_ODB.for_each(
   "  _ODB:=params_get().ODB;
      _ODB.GO:=time(0,0,0);
      _ODB.GF:=time(0,0,0);
      {? _ODB.RN=56 || _ODB.LP:=1
      |? _ODB.RN=55 || _ODB.LP:=2
      |? _ODB.RN=69 || _ODB.LP:=3
      |? _ODB.RN=68 || _ODB.LP:=4
      |? _ODB.RN=64 || _ODB.LP:=5
      || _ODB.LP:=0
      ?};
      _ODB.put()
   "
);

R_WYK.cntx_psh();
R_WYK.index('R_WYKDN');
{? _ODB.first()
|| {!
   |? _ODB.P:=date(0,0,0);
      _ODB.WORK:={? _ODB.RN=55 | _ODB.RN=56  | _ODB.RN=65 || 1 || __KAL.w_days(_ODB.DT,_ODB.DT) ?};
      {? ~_ODB.WORK
      || _godz:=exec('wymiar_godz','prc_rozlicz',_ODB.DT);
         _ODB.WORK:=_work;
         _ODB.TYP:={? __KAL.h_days(_ODB.DT,_ODB.DT) || 'S' || 'W' ?};
         {? _work
         || _ODB.G:={? _ODB.G<_godz || time(0,0,0) || _ODB.G-_godz ?}
         || _ODB.G:={? _ODB.G<_godz || _ODB.G || _godz ?}
         ?}
      ?};
      R_WYK.prefix(P.ref(),_ODB.DT,_ODB.RN);
      {? R_WYK.first()
      || {!
         |? {? _ODB.REF_K=$R_WYK.KK
            || _ODB.P:=R_WYK.DO;
               {? R_WYK.R_WO=R_WO.ref()
               || _ODB.GF+=R_WYK.GO;
                  _ODB.GO+=R_WYK.G
               || {? (R_WYK.W<>'S' & R_WYK.W<>'W')=_work
                  || {? R_WYK.W='S' | R_WYK.W='W'
                     || _ODB.G:=time(0,0,0)
                     || _ODB.G-=R_WYK.G
                     ?}
                  ?}
               ?}
            ?};
            R_WYK.next()
         !}
      ?};
      _ODB.put();
      _ODB.next()
   !};
   _ODB.first();
   {!
   |? {? _ODB.G>time(0,0,0) |  _ODB.GO>time(0,0,0)
      || _ODB.next()
      || _ODB.del()
      ?}
   !}
?};
R_WYK.cntx_pop();

{? _ODB.first()
|| {!
   |? {? _ODB.WORK=_work || _ODB.next() || _ODB.del() ?}
   !}
?};

{? _ODB.first()
|| {!
   |? {? _ODB.TYP=_typ || _ODB.next() || _ODB.del() ?}
   !}
?};

{? _ODB.first()
|| {!
   |? {? _ODB.WORK=_work & _ODB.DT<=R_WO.DO || _ODB.next() || _ODB.del() ?}
   !}
?};
:: Uwzglednienie już odebranych godzin z kwalifikacji
exec('odprac_minus','prc_rozlicz');
:: dodać weryfikacje rozliczonych godzin w tabeli G
_ODB


\odprac_minus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Odjęcie zarejestrowanych wniosków o odpracowanie
::   WE:
::   WY:
::  OLD: \odprac_minus/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ODB:=params_get().ODB;
R_ODP.cntx_psh();
R_ODP.index('PRAC');
_ODB.cntx_psh();
_ODB.index(_ODB.ndx_tmp(,1,'LP',,));
{? _ODB.first()
|| {!
   |? _del:=0;
      {? _ODB.WORK=1
      || R_ODP.prefix(P.ref(),_ODB.DT);
         {? R_ODP.first()
         || {!
            |? _g_odp:=R_ODP.G;
               {? _g_odp>*0
               || _g_odpn:=_g_odp-_ODB.G;
                  {? _g_odpn>=*0
                  || _del:=1; 0
                  || _ODB.G:=_ODB.G-_g_odp;
                     _ODB.put(1);
                     R_ODP.next()
                  ?}
               ?}
            !}
         ?}
      ?};
      {? _del || _ODB.del(,1)=2 || _ODB.next() ?}
   !}
?};
_ODB.cntx_pop();
R_ODP.cntx_pop();
1


\licz_odb_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Automatyczne wyszukanie godzin możliwych do odbioru
::   WE: _a - [DATE] - Początek
::       _b - [DATE] - Koniec
::       _c - [INTEGER] - Liczba miesięcy między początkiem i końcem okresu
::   WY:
::  OLD: \licz_odb_auto/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ODB:=exec('tabela_odbioru','prc_rozlicz',_a,_b,_c);
{? _ODB.first()
|| R.index('RUBKOD');
   R.prefix();

   {? exec('odbierz','prc_rozlicz',_ODB,R_WO.W,R_WO.G,R_WO.DO)<>*0
   || {? cli_ver()<>'mbasic'
      || FUN.info('%1\n%2'
            [  'Automatyczne przypisanie nadmiaru nie zakończyło się sukcesem.'@,
               'Brak wystarczającej ilości nadgodzin.'@
            ]
         )
      ?}
   ?}
|| {? cli_ver()<>'mbasic'
   || FUN.info('%1\n%2'
         [  'Automatyczne przypisanie nadmiaru nie zakończyło się sukcesem.'@,
            'Brak wystarczającej ilości nadgodzin.'@
         ]
      )
   ?}
?}


\odbierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Wyliczenie odbioru godzin
::   WE: _a - tabela nadgodzin
::       _b - [STRING] - Typ odbioru
::       _c - [TIME] - Ilość godzin odbioru
::       _d - [DATE] - Data odbioru
::   WY: TIME - ilosc godzin pozostalych do odbioru lub zerowy czas jesli udalo sie odebrac calosc
::  OLD: \odbierz/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ile_g:=_c;
:: ewentualne pomniejszenie ilości godzin odbioru dla typu "F" o wartość powiększenia odbioru 1 do 1,5
:: podczas zapisu, godziny odbiru zostaną ponownie powiększone o wartość pomniejszenia
{? _b='F' || _ile_g:=*(*_ile_g/1.5) ?};
_czy_sw:=(_b='S'|_b='W');
:: funkcja zapisująca dane do tabeli odbiorów
_zap:=
   "  R_WYK.blank(1);
      R_WYK.R_WO:=R_WO.ref();
      R_WYK.P:=P.ref();
      R_WYK.DO:=_g;
      R_WYK.R:=__RUB.ref(_a);
      R_WYK.DN:=_b;
      {? KK.seek(_c)
      || R_WYK.KK:=KK.ref()
      ?};
      R_WYK.W:=_e;
      R_WYK.G:=_d;
      R_WYK.GO:={? _e='F' || *(*_f*1.5) || _f ?};
      R_WYK.add(1)
   ";

R_WYK.index('R_WYKDN');
R_WYK.prefix();
KK.index('KONTASYM');
KK.prefix();
:: główna pętla po godzinach kandydujacych do odbioru - po tabeli przekazanej argumentem _a
_w_trans:=do_state();
{? ~_w_trans || do ?};
{? _a.first()
|| _g_sw:=time(0,0,0);
:: dla święta lub wolnego prefiksujemy się na dzień i typ godzin i sprawdzamy ile mamy zapisów do odbioru
   {? _czy_sw
   || _a.cntx_psh();
      _ndx:=_a.ndx_tmp('',1,'TYP',,0,'DT',,0);
      _a.index(_ndx);
      {? _a.first()
      || {!
         |? _a.prefix(_b,_a.DT);
      {? _a.first()
      || {!
         |? _g_sw+=_a.G;
            _a.next()
         !}
      ?};
            _g_sw=*0 & _a.next()
         !}
      ?};
      _a.cntx_pop();
      _a.ndx_drop(_ndx)
   ?};
   {? _g_sw>_ile_g || _g_sw:=_ile_g ?};
   {!
   |? {? _a.G>*0 & _ile_g>*0
      || {? _czy_sw
         ||
:: odbiory oznaczonem typem S czyli za dni świąteczne muszą być godziny, które wystąpiły w takich dniach
:: zasada jest taka, że bez wzgledu na ilość godzin przepracowanych w święta odbierany jest cały dzień
:: dodatkowo jeżeli zostaną godziny ponad ilość odbioru są traktowane jako zwykłe nadgodziny do ewentualnego
:: odbioru lub wypłacenia
            {? ~_a.WORK
            ||
:: nie było odbioru - musi być cały dzień - powyżej co zostanie przechodzi jak zwykłe
               _gx:={? _a.G>_ile_g || _ile_g || _a.G ?};
               {? _gx>*0
               ||
:: rejestracja odbioru dla całego dnia
::                jeżeli ze względu na podziały mamy więcej rekordów w kwalifikacji godzin, to tylko
::                dla ostatniego rekordu "Godziny do odbioru" dobijamy do wymiaru w dniu odbioru
                  _g2save:={? _gx<_g_sw
                           || _gx
                           |? _gx=_g_sw | _gx>_g_sw
                           || _ile_g
                           ?};
                  _zap(_a.RN,_a.DT,_a.REF_K,_gx,_b,_g2save,_d);
                  _a.G-=_gx;
                  _g_sw-=_gx;
                  _a.put();
                  _ile_g-=_g2save
               ?}
            ?}
         ||
:: nadgodziny z dni roboczych - najpierw ewentualnie to co zostało powyżej całego dnia odbioru ze świąt
            {? ~_a.WORK
            ||
:: były już odbierane godziny traktujemy jak zwykłe
               _gx:={? _a.G>_ile_g || _ile_g || _a.G ?};
               {? _gx>*0
               ||
:: rejestracja odbioru dla ilości godzin możliwych do odebrania
                  _zap(_a.RN,_a.DT,_a.REF_K,_gx,_b,_gx,_d);
                  _a.G-=_gx;
                  _a.put();
                  _ile_g-=_gx
               ?}
            ?};
            {? _a.WORK & _ile_g>*0
            || _gx:={? _a.G>_ile_g || _ile_g || _a.G ?};
               {? _gx>*0
               ||
:: rejestracja odbioru dla ilości godzin możliwych do odebrania
                  _zap(_a.RN,_a.DT,_a.REF_K,_gx,_b,_gx,_d);
                  _a.G-=_gx;
                  _a.put();
                  _ile_g-=_gx
               ?}
            ?}
         ?}
      ?};
:: wykonujemy pętlę do czasu aż odbierzemy wszystkie godziny oraz do końca tebeli z nadgodzinami
      _a.next() & _ile_g>*0
   !}
?};
{? ~_w_trans
|| {? _ile_g>*0 & ~_czy_sw || undo() ?};
   end()
?};
{? _czy_sw || _ile_g:=*0 ?};
_ile_g


\spr_wniosek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Rekord po dla wniosku odbioru godzin.
::   WE: [_a] - [DATE]       - data sprawdzania [domyślnie R_WO.DO]
::       [_b] - [REFERENCE]  - wskazanie na wniosek odbioru
::       [_c] - [INTEGER]    - czy przetwarzanie wsadowe? [1 / 0 - domyślnie]
::   WY:
::  OLD: \spr_wniosek/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
 _data:={? var_pres('_a')=type_of(date) || _a || R_WO.DO    ?};
  _ref:={? var_pres('_b')=type_of(null) || _b || R_WO.ref() ?};
_batch:={? var_pres('_c')=type_of(0)    || _c || 0          ?};

_wyn:=__CHK.record2(R_WO,'W','Typ'@,'R','Rok'@,'M','Miesiąc'@,'DO','Data odbioru'@,'GO','Odebrane godziny'@);
:: wyszukujemy okres pracownika na wskazaną datę
_okrp_od:=_okrp_do:=date(0,0,0);
_okr_nazwa:='';
A_OKRP.cntx_psh();
A_OKRN.cntx_psh();
A_OKR.cntx_psh();
A_OKRP.index('A_OKPP');
A_OKRP.prefix(R_WO.A_OKR,R_WO.P);
{? _wyn=''
|| {? A_OKRP.first()
   || _okrp_od:=A_OKRP.OD;
      _okrp_do:=A_OKRP.DO;
      _okr_nazwa:=A_OKRP.OKR().NAZ().NAZ
   || _text:='Pracownik nie jest przypisany do okresu rozliczeniowego zgodnego z wnioskiem o odbiór nadgodzin.'@;
      {? ~_batch || FUN.emsg(_text) ?};
      _wyn:='DO'
   ?}
?};
A_OKR.cntx_pop();
A_OKRN.cntx_pop();
A_OKRP.cntx_pop();

{? _wyn=''
|| {? R_WO.R<1900 | R_WO.R>9999
   || _text:='Błędna wartość w polu \"Rok\".'@;
      {? _batch || return(_text) || FUN.emsg(_text); return('R') ?}
   ?};
   {? R_WO.M<1 | R_WO.M>12
   || _text:='Błędna wartość w polu \"Miesiąc\".'@;
      {? _batch || return(_text) || FUN.emsg(_text); return('M') ?}
   ?};
   {? ~(date(R_WO.R,R_WO.M,0)>=_okrp_od & date(R_WO.R,R_WO.M,1)<=_okrp_do)
   || _text:='Wartość w polu \"Rok\" lub \"Miesiąc\" spoza okresu rozliczeniowego.'@;
      {? _batch || return(_text) || FUN.emsg(_text); return('R') ?}
   ?};
   {? _data<_okrp_od
   || _text:='Błędna wartość w polu \"Data odbioru\".'@;
      {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
   ?};
   {? P.DZ<>#0 & _data>P.DZ
   || _text:='Nie można wprowadzić odbioru po dacie zwolnienia pracownika.'@;
      {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
   ?};
   _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref(),_data,_data);
:: sprawdzenie czy mamy nieobecność na cały dzień czy tylko na część dnia
   _nbs_ok:=1;
   _nbs_time:=*0;
   {? _NBS.first()
   || {!
      |? {? _NBS.PD='N' || _nbs_ok:=0 ?};
         _nbs_time+=*(_NBS.G*60);
         _NBS.next()
      !}
   ?};
   {? ~_nbs_ok
   || _text:='%1\n%2'['Nie można wprowadzić odbioru w czasie nieobecności: '@,_NBS.RT];
      {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
   ?};
   {? __KAL.set_cal(R_WO.P().KAL,_data~1)
   || {? 1+__KAL.type_day(_data)<>'R'
      || _text:='Nie można wprowadzić odbioru w dniu wolnym od pracy.'@;
         {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
      ?}
   || _text:='Nie znaleziono kalendarza pracownika na %1 rok.'@[$(_data~1)];
      {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
   ?};
   _wymiar:=exec('wymiar_godz','prc_rozlicz',_data) - _nbs_time;
   {? 'P,S,F,W'*R_WO.W
   || {? R_WO.G>time(24,0,0)
      || _text:='Liczba odebranych godzin nie może przekraczać 24 godziny.'@;
         {? _batch || return(_text) || FUN.emsg(_text); return('G') ?}
      ?};
      {? 'S,W'*R_WO.W
      || {? _data>_okrp_do | _data<_okrp_od
         || _text:='%1\n%2'
               [  'Data odbioru spoza okresu rozliczeniowego.'@,
                  'Dla wybranego typu odbioru należy wprowadzić datę odbioru w zakresie dat okresu rozliczeniowego.'@
               ];
            {? _batch || return(_text) || FUN.emsg(_text); return('DO') ?}
         ?};
         R_WO.G:=_wymiar
      |? R_WO.G=*0
      || _text:='Nie wprowadzono godzin odbioru.'@;
         {? _batch
         || return(_text)
         || {? FUN.ask('%1\n%2'[_text,'Czy ustalić pełny wymiar godzin w dniu odbioru?'@])
            || R_WO.G:=_wymiar
            || return('G')
            ?}
         ?}
      ?};
      {? R_WO.G>_wymiar
      || _txt1:='Przekroczono wymiar godzin w dniu odbioru (%1).'@[_wymiar$3];
         _text:='%1\n%2'
                 [_txt1,
                  'Należy wskazać dzień z odpowiednią liczbą zaplanowanych godzin '
                  'lub zmienić liczbę odbieranych godzin w wybranym dniu.'@
                 ];
         {? _batch || return(_text) || FUN.emsg(_text); return('G') ?}
      ?}
   || _text:='%1\n%2'['Błędny typ odbioru.'@,'Możliwe typy: P-pracownik, F-firma, S-święto, W-dzień wolny.'@];
      {? _batch || return(_text) || FUN.emsg(_text); return('W') ?}
   ?};
   {? ~('T,N'*R_WO.AUTO)
   || _text:='%1\n%2'['Błędnie zaznaczony tryb automatyczny.'@,'Możliwe tryby: T-tak, N-nie.'@];
      {? _batch || return(_text) || FUN.emsg(_text); return('AUTO') ?}
   ?};
   _wyn:=exec('spr_odb_pk','prc_rozlicz',_data,_ref,_batch)
?};
_wyn


\spr_odb_pk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Sprawdza określenie odbioru dla kilku wniosków w dniu.
::   WE: _a  - [DATE]      - data sprawdzania
::       _b  - [REFERENCE] - wskazanie na wniosek odbioru
::       _c - [INTEGER]    - czy przetwarzanie wsadowe?
::   WY: Akronim pola w przypadku błędu lub '' jeśli wszystko ok
::  OLD: \spr_odb_pk/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
 _data:={? var_pres('_a')=type_of(date) || _a || R_WO.DO    ?};
  _ref:={? var_pres('_b')=type_of(null) || _b || R_WO.ref() ?};
_batch:={? var_pres('_c')=type_of(0)    || _c || 0          ?};

{? R_WO.PO='P' | R_WO.PO='K'
|| _po:=R_WO.PO;
   {? _ref2:=exec('r_wo_exist','prc_rozlicz',_ref,R_WO.P,R_WO.A_OKR,_data)
   || _po:=exec('FindAndGet','#table',R_WO,#_ref2,ref_name(_ref2),"PO",'K')
   ?};
   {? R_WO.PO=_po
   || R_WO.PO:=_po
   || _wyb:={? _batch
            || {? R_WO.PO='P'
               || 1
               |? R_WO.PO='K'
               || 2
               || 0
               ?}
            || FUN.choice('%1\n%2'
                  [  'Na dzień %1 istnieje kilka wniosków odbioru.'@[$_data],
                     'Proszę określić sposób prezentacji odbioru dla wszystkich wniosków w dniu.'@
                  ],,'Początek dnia'@,'Koniec dnia'@)
            ?};
      {? _wyb
      || _po:={? _wyb=1 || 'P' || 'K' ?};
         R_WO.PO:=_po;
         {? exec('r_wo_set_po','prc_rozlicz',R_WO.P,R_WO.A_OKR,_data,_po)=0
         || _text:='Nie udało się zmienić prezetacji odbioru dla wszystkich wniosków w wybranym dniu.'@;
            {? _batch || _result:=_text || FUN.info(_text); _result:='PO' ?}
         ?}
      || _result:='PO'
      ?}
   ?}
|| _text:='%1\n%2'['Błędne określenie umiejscowienia odbioru w trakcie dnia.'@,
                   'Możliwe typy: P-początek, K-koniec.'@];
   {? _batch || _result:=_text || FUN.emsg(_text); _result:='PO' ?}
?};
_result


\r_wo_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Czy istnieje już wniosek na wskazaną datę dla pracownika
::   WE: _a - [REFERENCE] - wskazanie na R_WO
::       _b - [REFERENCE] - wskazanie na P
::       _c - [REFERENCE] - wskazanie na A_OKR
::       _b - [DATE] - data wniosku
::   WY: null/ref wniosku
::  OLD: \r_wo_exist/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
_ref:={? var_pres('_a')=type_of(null) || _a || return(null()) ?};
_p_ref:={? var_pres('_b')=type_of(null) || _b || return(null()) ?};
_a_okr:={? var_pres('_c')=type_of(null) || _c || return(null()) ?};
_data:={? var_pres('_d')=type_of(date) || _d || return(null()) ?};

:: sprawdzamy czy w danym dniu są już jakieś wnioski jeśli tak to wszystkie muszą mieć ten sam zanacznik PO
_dalej:=1;
R_WO.cntx_psh();
R_WO.index('PORDO');
R_WO.prefix(_p_ref,_a_okr,_data);
{? R_WO.first()
|| {!
   |? {? R_WO.ref()<>_ref
      || _result:=R_WO.ref();
         _dalej:=0
      ?};
      _dalej & R_WO.next()
   !}
?};
R_WO.cntx_pop();
_result


\r_wo_set_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Ustawia wartość PO dla wszystkich wniosków w dniu.
::   WE: _a - [REFERENCE] - wskazanie na P
::       _b - [REFERENCE] - wskazanie na A_OKR
::       _c - [DATE] - data wniosku
::       _d - [STRING] - wartość PO
::   WY: 0/1
::  OLD: \r_wo_set_po/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_a_okr:={? var_pres('_b')=type_of(null()) || _b || return(0) ?};
_data:={? var_pres('_c')=type_of(#0) || _c || return(0) ?};
_po:={? var_pres('_d')=type_of('') || _d || return(0) ?};

_size:=0;
:: powrót w przypadku zerwanej transakcji
{? do_state()=2 || return(null()) ?};

:: założenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

R_WO.cntx_psh();
R_WO.index('PORDO');
R_WO.prefix(_p_ref,_a_okr,_data);
{? R_WO.first()
|| _size:=R_WO.size();
   {!
   |? R_WO.PO:=_po;
      _result+=R_WO.put();
      R_WO.next()
   !}
|| _result:=1
?};
R_WO.cntx_pop();

{? _result<>_size
|| undo()
?};

{? _mydo || end() ?};

_result=_size


\r_wyk_tr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Triger dla put i add tabeli R_WYK - uzupełnienie pola ROK i MC.
::   WE:
::   WY:
::  OLD: \r_wyk_tr/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
R_WYK.ROK:=R_WYK.DN~1;
R_WYK.MC:=R_WYK.DN~2;
1


\r_odn_wer_bfd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Dołącz" w oknie WER tabeli R_ODN.
::       Dodanie wniosku o wyjście prywatne w czasie pracy.
::   WE: _a - [INTEGER} - (1)akjca "Popraw"
::   WY:
::  OLD: \add_przerwa/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_a:=var_pres('_a')=type_of(0);
{? ~_a || R_ODN.blank() ?};
R_ODN.A:='T';
_error:="FUN.emsg('%1\n%2'['Nie udało się zapisać zmian.'@,'Należy sprawdzić wprowadzane dane.'@])";

{? R_ODN.edit("exec('spr_przerwa','prc_rozlicz')")
|| {? ~__HARM.mc_otw(R_ODN.DW,1) || return(0) ?};
   _ref:={? _a || R_ODN.ref() || null() ?};
   _ok:=1;
   R_ODN.cntx_psh();
   R_ODN.prefix(R_ODN.P,R_ODN.DW);
   _god:=R_ODN.GOD;
   _gdo:=R_ODN.GDO;
   _dw:=R_ODN.DW;
   {? R_ODN.first()
   || {!
      |? {? _ref<>R_ODN.ref() & R_ODN.GOD<=_gdo & R_ODN.GDO>=_god & R_ODN.DW=_dw
         || _ok:=0
         ?};
         _ok & R_ODN.next()
      !}
   ?};
   R_ODN.cntx_pop();

   {? ~_ok
   || FUN.emsg('%1\n%2'['Istnieje wniosek w danym terminie.'@,'Proszę wprowadzić poprawne dane.'@]);
      return(0)
   ?};
   _rodzaj:=exec('spr_wewy_odl','prc_wewy');
   {? _rodzaj=2 | _rodzaj=20 | _rodzaj=22 | _rodzaj=100 | _rodzaj=300  | _rodzaj=500
   || FUN.emsg('%1\n%2'
         [  'Istnieją wpisy w tabeli WE/WY w podanym czasie przerwy.'@,
            'Proszę zweryfikować dane WE/WY.'@
         ]
      );
      _ok:=0
   ?};

   {? _ok
   || {? ~_a
      || {? ~R_ODN.add(1) || _error() ?}
      || {? ~R_ODN.put(1) || _error() ?}
      ?};
      win_activate('R_ODP')
   ?}
?}


\spr_przerwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Weryfikacja danych wprowadzanych do wniosku o czas wolny.
::   WE:
::   WY:
::  OLD: \spr_przerwa/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record2(R_ODN,'DW','Data'@);
{? _wyn=''
|| {? R_ODN.GDO<=R_ODN.GOD
   || FUN.emsg('Godzina zakończenia musi być późniejsza od godziny rozpoczęcia.'@);
      return('GOD')
   ?};
   _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref(),R_ODN.DW,R_ODN.DW);
   {? _NBS.first()
   || FUN.emsg('%1\n%2'['Nie można wprowadzić wniosku podczas nieobecności:'@,_NBS.RT]);
      return('DW')
   ?};
   R_ODN.G:=R_ODN.GDO-R_ODN.GOD
?};
_wyn


\r_odn_wer_bfp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Popraw" w oknie WER tabeli R_ODN.
::       Poprawienie wniosku o wyjście prywatne w czasie pracy.
::   WE:
::   WY:
::  OLD: \put_wn_przerwa/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
R_ODP.cntx_psh();
R_ODP.index('NAG');
_ok:=1;
{? R_ODP.first()
|| {!
   |? {? R_ODP.GO>*0 || _ok:=0 || R_ODP.next() ?}
   !}
?};
R_ODP.cntx_pop();
{? _ok
|| params_exec('r_odn_wer_bfd','prc_rozlicz',1)
|| FUN.emsg('%1\n%2'
      [  'Istnieją wprowadzone w tabeli godzin przepracowanych, odpracowane godziny.'@,
         'Modyfikacja nie jest możliwa.'@
      ]
   );
   0
?}


\r_odn_wer_afu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Usuń" w oknie WER tabeli R_ODN.
::       Usunięcie wniosku o wyjście prywatne w czasie pracy.
::   WE:
::   WY:
::  OLD: \del_wn_przerwa/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('spr_wewy_odl','prc_wewy');
{? _wyn=1 | _wyn=11 | _wyn=10
|| {? ~FUN.ask('%1\n%2'
      [  'Istnieją zapisy w tabeli WE/WY uwzględniające zapis o czasie wolnym.'@,
         'Czy na pewno usunąć wniosek?'@
      ]
      )
   || return(0)
   ?}
?};
{? R_ODP.size()
|| {? FUN.ask('%1\n%2'['Istnieją przypisane odpracowania.'@,'Czy na pewno usunąć wniosek?'@])
   || _ok:=1;
      {? R_ODP.first()
      || {!
         |? {? R_ODP.GO>*0 || _ok:=0 || R_ODP.next ?}
         !}
      ?};
      {? _ok
      || do();
         {? R_ODP.first()
         || {! |? R_ODP.del() !}
         ?};
         {? ~R_ODP.size()
         || {? R_ODN.del(,1)
            || end()
            ||  undo();
                end();
                FUN.emsg('Próba usunięcia zakończyła się niepowodzeniem.'@)
            ?}
         || end()
         ?}
      || FUN.emsg('%1\n%2'
            [  'Istnieją wprowadzone w tabeli godzin przepracowanych, odpracowane godziny.'@,
               'Usunięcie zapisów nie jest możliwe.'@
            ]
         )
      ?}
   ?}
|| {? FUN.ask('Czy na pewno usunąć wniosek?'@)
   || R_ODN.del()
   ?}
?}


\r_odn_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Rekord" w oknie WER tabeli R_ODN.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('var_edit_go_bd','prc_rozlicz');
:: ustawienie maski EDOKUM
{? R_ODN.EDOKUM<>null() & (ref_name(R_ODN.EDOKUM)<>EDOKUM.name())
|| EDOKUM.use(ref_name(R_ODN.EDOKUM))
?};
{? VAR_EDIT.GO<>R_ODN.G
|| Color.fnd_kol('R_ODN#01#01')
?}


\r_odp_wer_bfd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Dołącz" w oknie WER tabeli R_ODP.
::       Dodanie wniosku.
::   WE: _a - [INTEGER] - (1) akcja "Popraw"
::   WY:
::  OLD: \add_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_a:=var_pres('_a')=type_of(0);
{? ~_a || R_ODP.blank() ?};
R_ODP.A:='T';
_error:="FUN.emsg('%1\n%2'['Nie udało się zapisać zmian.'@,'Należy sprawdzić wprowadzane dane.'@])";

{? ~(~_a | __HARM.mc_otw(R_ODP.DW,0) | R_ODP.GO=*0)
|| R_ODP.fld_fml('DW','BEFORE_EDIT',"0");
   R_ODP.efld_opt('RED','label_color='+exec('findfnrd','color'),,'DW')
?};

R_ODP.R_ODN:=R_ODN.ref();
R_ODP.R:=R_ODP.DW~1;
R_ODP.M:=R_ODP.DW~2;
{? R_ODP.edit("exec('spr_odprac','prc_rozlicz',1)")
|| R_ODP.cntx_psh();
   _ref:={? _a || R_ODP.ref() || null() ?};
   _ok:=1;
   _dw:=R_ODP.DW;
:: sprawdzenie czy dla wniosku nie podano już tego samego dnia odprawcowania
   R_ODP.index('NAG');
   R_ODP.prefix(R_ODN.ref(),_dw);
   {? R_ODP.first()
   || {!
      |? {? _ref<>R_ODP.ref() & R_ODP.DW=_dw || _ok:=0 ?};
         _ok & R_ODP.next()
      !}
   ?};
   R_ODP.cntx_pop();
   {? ~_ok
   || FUN.emsg('%1\n%2'['Na podaną datę istnieje już odpracowanie dla wniosku o czas wolny.'@,
                        'Proszę wprowadzić poprawne dane.'@]);
      return(0)
   ?};
   {? _ok
   || {? ~_a
      || {? ~R_ODP.add(1)
         || _error() ?}
         || {? ~R_ODP.put(1) || _error()
         ?}
      ?}
   ?}
?};
R_ODP.fld_fml('DW','BEFORE_EDIT',"*");
R_ODP.efld_opt('RED','label_color=',,'DW')


\r_odn_zalaczniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Załączniki - przed" w oknach tabeli R_ODN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('show_zalacz','zalacz','P','R_ODN',exec('chk_role','#b__box',OPERATOR.USER,'PRC_CZP_DODO'))


\r_odn_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.42]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli R_ODN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',ZALACZ,'NAG',R_ODN.uidref())


\spr_odprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Weryfikacja wprowadzanych danych.
::   WE: _a - [INTEGER] - (1) akcja "Popraw"
::   WY:
::  OLD: \spr_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_a:=var_pres('_a')=type_of(0);
_wyn:=__CHK.record2(R_ODP,'DW','Data'@,'G','Liczba godzin'@);
{? _wyn=''
|| {? _a & R_ODP.G<>R_ODP.GO & ~__HARM.mc_otw(R_ODP.DW,0)
   || FUN.emsg('%1\n%2'
         [  'Godziny odpracowane zostały przeniesione do tabeli rozliczenia godzin.'@,
            'Liczba godzin do odpracowania nie może być różna od godzin odpracowanych.'@
         ]
      );
      return('G')
   ?};
   _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref(),R_ODP.DW,R_ODP.DW);
   {? _NBS.first()
   || FUN.emsg('%1\n%2'['Nie można wprowadzić wniosku podczas nieobecności:'@,_NBS.RT]);
      return('DW')
   ?};
   R_ODP.R:=R_ODP.DW~1;
   R_ODP.M:=R_ODP.DW~2
?};
_wyn


\r_odp_wer_bfp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Popraw" w oknie WER tabeli R_ODP.
::       Poprawienie wniosku.
::   WE:
::   WY:
::  OLD: \put_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? __HARM.OKRES & __HARM.mc_otw(R_ODP.DW,1) & (R_ODP.G>R_ODP.GO)
|| exec('r_odp_wer_bfd','prc_rozlicz',1)
?}


\r_odp_wer_afu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Usuń" w oknie WER tabeli R_ODP.
::       Usunięcie wniosku.
::   WE:
::   WY:
::  OLD: \del_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
{? __HARM.OKRES & __HARM.mc_otw(R_ODP.DW,1) & R_ODP.GO=*0 &
   FUN.ask('Czy na pewno usunąć wniosek?'@)
|| R_ODP.del()
?}


\r_odn_tr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Triger dla put i add tabeli R_ODN - uzupełnienie pola ROK i MC.
::   WE:
::   WY:
::  OLD: \r_odn_tr/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
R_ODN.ROK:=R_ODN.DW~1;
R_ODN.MC:=R_ODN.DW~2;
1


\oblicz_odprac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Weryfikacja ilości odpracowania względem udzielonego czasu wolnego.
::   WE:   [_a] [REFERENCE] - wskazanie na wniosek o czas wolny (domyślnie null)
::         [_b] [INTEGER]   - czy wyświetlać komunikaty? (domyślnie tak)
::  OLD: \oblicz_odprac/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_msg:={? var_pres('_b')=type_of(0)      || _b || 1      ?};
_wyn:=1;
_errDate:=#0;
_form:=
   "  _godz:=time(0,0,0);
      {? R_ODP.first()
      || {!
         |? _godz+=R_ODP.G;
            R_ODP.next()
         !}
      ?};
      _godz=R_ODN.G
   ";

{? _ref<>null()
|| R_ODN.cntx_psh();
   R_ODN.prefix();
   {? R_ODN.seek(_ref)
   || R_ODP.cntx_psh();
      R_ODP.index('NAG');
      R_ODP.prefix(_ref);
      _wyn:=_form();
      {? _wyn=0 || _errDate:=R_ODN.DW ?};
      R_ODP.cntx_pop()
   ?};
   R_ODN.cntx_pop()
||
   R_ODN.cntx_psh();
   {? R_ODN.first()
   || {!
      |? R_ODP.prefix(R_ODN.ref());
         _wyn:=_form();
         {? _wyn=0 || _errDate:=R_ODN.DW ?};
         _wyn & R_ODN.next()
      !}
   ?};
   R_ODN.cntx_pop()
?};
{? ~_wyn & _msg
|| FUN.emsg('%1\n%2 %3'
      [  'Nie wprowadzono poprawnej liczby godzin odpracowania do zadeklarowanego we wniosku czasu wolnego.'@,
         'Należy wprowadzić poprawne informacje o odpracowaniu dla wniosku z dnia: '@,
         $_errDate
      ]
   )
?};
_wyn


\r_odp_wer_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "Okienko" w oknie WER tabeli R_ODP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? params_get().cfg.extra.R_ODP_OK
|| params_exec('oblicz_odprac','prc_rozlicz')
|| 1
?}


\tabela_godzin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła tworząca tabelę godzin do wyświetlenia zakładki dla czynności PRC_CZP_DROZ.
::   WE: _a - _cfg
::   WY: tabela do wyświetlenia rozliczenia, okno i index
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'DT','DATE','Data',
   'M','INTEGER','Miesiąc rozliczeniowy',
   'RN','INTEGER','Numer rubryki',
   'RT','STRING[20]','Rubryka',
   'G','REAL','Liczba godzin',
   'KK','STRING[35]','Konto kosztów',
   'LT','STRING[8]','Lista',
   'BL','STRING[1]','Blokada'
);

_NDX:=_TAB.ndx_tmp(,1,'DT',,);

_mob:='mobile_visible=1';
_WER:=_TAB.mk_sel('Rozliczenie godzin'@,,,'rozlicz_godz',,,,,'U',,,,,'maximized');
_TAB.win_fld(_WER,,'DT',,,11,,1,'Data'@,,'Data powstania godzin'@,,,,,,_mob);
_TAB.win_fld(_WER,,'M',,,3,0,1,'Miesiąc'@,,'Miesiąc rozliczeniowy'@);
_TAB.win_fld(_WER,,'RN',,,5,0,1,'Numer'@,,'Numer rubryki składnia'@,,,,,,_mob);
_TAB.win_fld(_WER,,'RT',,,20,,1,'Nazwa'@,,'Nazwa rodzaju godzin pracy'@,,,,,,_mob);
_TAB.win_fld(_WER,,'G',,,6,2,1,'Liczba godzin'@,,'Liczba przepracowanych godzin'@,,,,,,_mob);
_TAB.win_fld(_WER,,'KK',,,35,,1,'Konto kosztów'@,,'Symbol konta kosztów'@);
_TAB.win_fld(_WER,,'LT',,,8,,1,'Lista'@,,'Symbol listy płac'@);
_TAB.win_fld(_WER,,'BL',,,3,,1,'Blokada'@,,'Godziny zablokowane do edycji (T/N)'@,2,,"'T'","'B'");

_a.extra.G:=obj_new('TAB','NDX','WER');
_a.extra.G.TAB:=_TAB;
_a.extra.G.NDX:=_NDX;
_a.extra.G.WER:=_WER;
~~


\licz_tab_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Uzupełnienie wartości w tabeli do wyświetlenia godzin pracy
::   WE: _a - parametry do tworzenia tabeli godzin
::   WY:
::  OLD: \kwalifikacja/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get().par;
_TAB:=params_get().cfg.extra.G.TAB;
_TAB.clear();
_TAB.erase();
{! _ii:=(_par.od~1)-1..(_par.do~1)+1
|! G.use('godz'+$(_ii));
   G.index('PRRODATA');
   G.prefix(P.ref(),'G');
   {? G.first()
   || {!
      |? _TAB.M:=G.M;
         _TAB.RN:=G.K().RN;
         _TAB.RT:=G.K().RT;
         _TAB.G:=G.G;
         _TAB.KK:=G.KK().SYM;
         _TAB.DT:=G.D;
         _TAB.BL:=G.BL;
         _TAB.LT:=G.LT;
         _TAB.add();
         G.next()
      !}
   ?}
!};
~~


\p_prc_har_afw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacja czasu pracy dla współpracownika.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: zakres dat
{? P.sel_size()=0 & var_pres('data_start')<0 & var_pres('data_koniec')<0
|| data_start:=data_koniec:=date(0,0,0);
   Pierwotny:=0;
   Normy:=0;
   _PAR:=tab_tmp(,'OD','DATE','Data od'@,
                  'DO','DATE','Data do'@,
                  'NORM','INTEGER','Wyliczenia norm współpracownika'@,
                  'OLD','INTEGER','Ponowna aktualizacja tabeli dziennej'@);
   _we:=_PAR.mk_edit('Podaj dane'@,,'kcp_zakr_dat1');
   _PAR.win_esep(_we,'Zakres dat'@);
   _PAR.win_efld(_we,,'OD',,,12,0,,,,'Data, od której wprowadzane będą zmiany.'@);
   _PAR.win_efld(_we,,'DO',,,12,0,,,,'Data, do której wprowadzane będą zmiany.'@);
   _PAR.win_efld(_we,,'NORM',,,,,,,
      ,'W jaki sposób wyliczane są normy współpracownika'@,'radio-buttons','left_label=1'
      ,'dla okresu'@,"0"
      ,'dla zakresu dat'@,"1"
   );
   _PAR.win_esep(_we,'Aktualizacja tabeli dziennej'@);
   _PAR.win_efld(_we,,'OLD',,,,0,,'Ponowna aktualizacja'@,,,
      'check-box','check_label="Tak - ponów aktualizacje na podstawie zapisów z czytnika"'@,"1","0");
   _PAR.efld_opt(_we,'mark=1',,'OD');
   _PAR.efld_opt(_we,'mark=1',,'DO');
   _PAR.win_ebtn(_we,'text='+'&OK'@+
                 ',btn_label_align=center,panel=bottom,align=end',"'key:F2'");
   _PAR.win_ebtn(_we,'text='+'&Anuluj'@+
                 ',btn_label_align=center,panel=bottom,align=end',"'key:Esc'");
   _PAR.win_edit(_we);
   _PAR.OD:={? date(,,1)>A_OKR.DO || date(A_OKR.DO~1,A_OKR.DO~2,1) || date(,,1) ?};
   _PAR.DO:={? date>A_OKR.DO || A_OKR.DO || date ?};

   {? ~_PAR.edit(
      "  _PAR:=cur_tab();
         {? (_chk:=__CHK.record(_PAR,,'OD'))<>'' | (_chk:=__CHK.record(_PAR,,'DO'))<>''
         || return(_chk); 0
         |? _PAR.OD<=date(0,0,0)
         || return(__CHK.err_fld(_PAR,'OD',1,'Wprowadzono błędną datę.'@ )); 0
         |? _PAR.OD<A_OKR.OD | _PAR.OD>A_OKR.DO
         || return(__CHK.err_fld(_PAR,'OD',1,'Data wykracza poza ustawiony okres rozliczeniowy.'@)); 0
         |? _PAR.DO>A_OKR.DO | _PAR.DO<A_OKR.OD
         || return(__CHK.err_fld(_PAR,'DO',1,'Data wykracza poza ustawiony okres rozliczeniowy.'@)); 0
         |? _PAR.OD>_PAR.DO
         || return(__CHK.err_fld(_PAR,'DO',1,'Data nie może być wcześniejsza niż: \"Data od\".'@)); 0
         || data_start:=_PAR.OD; data_koniec:=_PAR.DO; Pierwotny:=_PAR.OLD; Normy:=_PAR.NORM; 1
         ?}
      "
      )
   || &data_start; &data_koniec; &Pierwotny; &Normy; return
   ?};
   &_we;
   obj_del(_PAR);
   &_PAR
?};

{? var_pres('data_start')>0 & var_pres('data_koniec')>0
|| _par_start:=data_start;
   _par_koniec:=data_koniec;
   {? data_start<=A_OKRP.DO & data_koniec>=A_OKRP.OD
   || {? data_start<A_OKRP.OD || data_start:=A_OKRP.OD ?};
      {? data_koniec>A_OKRP.DO || data_koniec:=A_OKRP.DO ?};
      {? Pierwotny
      || _tab:=exec('wyp_buff_pierw','prc',data_start,data_koniec);
         {? _tab.first()
         || {!
            |? _przelicz:=0;
               _popokr:=exec('prz_okr','prc_rozlicz',_tab.DZK);
               {? __HARM.mc_otw(_tab.DZK,0,_popokr)
               || _maska:=MASK.MaskZbio(_tab.DZK~1,_tab.DZK~2);
                  {? R_PRACDN.name()<>(MASK.R_PRACDN+_maska)
                  || R_PRACDN.use(MASK.R_PRACDN+_maska)
                  ?};
                  R_PRACDN.prefix(P.ref(),_tab.DZK);
                  {? R_PRACDN.first()
                  || _przelicz:=R_PRACDN.BL<>'T'
                  ?}
               || _przelicz:=0
               ?};
               {? ~_przelicz
               || _tab.del(,1)=2
               || _tab.next()
               ?}
            !}
         ?};

         {? _tab.first()
         || {!
            |? exec('del_dane_wewy','prc',_tab.DZK,_tab.DZK);
               _tab.next
            !};
            exec('kwal_wewy_z_hist','prc',_tab)
         ?}
      ?};
      exec('oblicz','okres',0,,,data_start,data_koniec,Normy)
   ?};
   {? P.sel_size()
   || data_start:=_par_start;
      data_koniec:=_par_koniec;
      PROGRESS.next()
   || FUN.info('Funkcja kwalifikująca czas pracy została zakończona.'@);
      &data_start; &data_koniec; &Pierwotny; &Normy
   ?}
?};
~~


\p_prc_har_bfgw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacja czasu pracy dla współpracownika formuła przed grupą.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PROGRESS.set(P.sel_size(),'Trwa kwalifikacja czasu pracy.'@);

::zakres dat
{? var_pres('data_start')<0 & var_pres('data_koniec')<0
|| data_start:=data_koniec:=date(0,0,0);
   Pierwotny:=0;
   Normy:=0;
   _PAR:=tab_tmp(,'OD','DATE','Data od'@,
                  'DO','DATE','Data do'@,
                  'NORM','INTEGER','Wyliczenia norm współpracownika'@,
                  'OLD','INTEGER','Ponowna aktualizacja tabeli dziennej'@);
   _we:=_PAR.mk_edit('Podaj dane'@,,'kcp_zakr_dat2');
   _PAR.win_esep(_we,'Zakres dat'@);
   _PAR.win_efld(_we,,'OD',,,12,0,,,,'Data, od której wprowadzane będą zmiany.'@);
   _PAR.win_efld(_we,,'DO',,,12,0,,,,'Data, do której wprowadzane będą zmiany.'@);
   _PAR.win_efld(_we,,'NORM',,,,,,,
      ,'W jaki sposób wyliczane są normy współpracownika'@,'radio-buttons','left_label=1'
      ,'dla okresu'@,"0"
      ,'dla zakresu dat'@,"1"
   );
   _PAR.win_esep(_we,'Aktualizacja tabeli dziennej'@);
   _PAR.win_efld(_we,,'OLD',,,,0,,'Ponowna aktualizacja'@,,,
      'check-box','check_label="Tak - ponów aktualizacje na podstawie zapisów z czytnika"'@,"1","0");
   _PAR.efld_opt(_we,'mark=1',,'OD');
   _PAR.efld_opt(_we,'mark=1',,'DO');
   _PAR.win_ebtn(_we,'text='+'&OK'@+
                 ',btn_label_align=center,panel=bottom,align=end',"'key:F2'");
   _PAR.win_ebtn(_we,'text='+'&Anuluj'@+
                 ',btn_label_align=center,panel=bottom,align=end',"'key:Esc'");
   _PAR.win_edit(_we);
   _PAR.OD:={? date(,,1)>A_OKR.DO || date(A_OKR.DO~1,A_OKR.DO~2,1) || date(,,1) ?};
   _PAR.DO:={? date>A_OKR.DO || A_OKR.DO || date ?};
   {! |?
      {? ~_PAR.edit(
         "  _PAR:=cur_tab();
            {? (_chk:=__CHK.record(_PAR,,'OD'))<>'' | (_chk:=__CHK.record(_PAR,,'DO'))<>''
            || return(_chk); 0
            |? _PAR.OD<=date(0,0,0)
            || return(__CHK.err_fld(_PAR,'OD',1,'Wprowadzono błędną datę.'@ )); 0
            |? _PAR.OD<A_OKR.OD | _PAR.OD>A_OKR.DO
            || return(__CHK.err_fld(_PAR,'OD',1,'Data wykracza poza ustawiony okres rozliczeniowy.'@)); 0
            |? _PAR.DO>A_OKR.DO | _PAR.DO<A_OKR.OD
            || return(__CHK.err_fld(_PAR,'DO',1,'Data wykracza poza ustawiony okres rozliczeniowy.'@)); 0
            |? _PAR.OD>_PAR.DO
            || return(__CHK.err_fld(_PAR,'DO',1,'Data nie może być wcześniejsza niż: \"Data od\".'@)); 0
            || data_start:=_PAR.OD; data_koniec:=_PAR.DO; Pierwotny:=_PAR.OLD; Normy:=_PAR.NORM; 1
            ?}
         "
         )
      || {? FUN.ask('Czy na pewno chcesz zrezygnować z wprowadzania danych?'@)
         || &data_start; &data_koniec; &Pierwotny; &Normy; return
         || 1
         ?}
      || 0
      ?}
   !};
   &_we;
   obj_del(_PAR);
   &_PAR
?};

~~


\p_prc_har_afgw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Kwalifikacja czasu pracy dla współpracownika formuła po grupie.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PROGRESS.close();
{? var_pres('data_start')>0 & var_pres('data_koniec')>0
|| FUN.info('Funkcja kwalifikująca czas pracy została zakończona.'@);
   &data_start; &data_koniec; &Pierwotny; &Normy
?};
~~


\akt_tab_dzien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [18.42]
:: OPIS: Aktualizacja tabeli dziennej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? _par.KWAL.BL<>'T'
|| {? __HARM.mc_otw(_par.KWAL.DT,1,exec('prz_okr','prc_rozlicz',_par.KWAL.DT)) & __HARM.mc_otw(_par.KWAL.DT+1,0)
   || {? VAR_EDIT.FLAGA=2
      || exec('akt_prac','prc_wewy',_par.KWAL.DT,_par.KWAL.DT,1,1)
      || exec('akt_prac','prc_wewy',_par.KWAL.DT,_par.KWAL.DT)
      ?};
      {? ~_par.par.grupa
      || _data_od:=A_OKRP.OD;
         _data_do:=A_OKRP.DO;
         _ref:=_par.KWAL.ref();
         R.index('RUBKOD');
         params_exec('licz_tab','prc_rozlicz',_data_od,_data_do);
         _par.KWAL.seek(_ref)
      ?}
   ?}
|| {? ~_par.par.grupa || FUN.emsg('%1\n%2'['Dzień zablokowany.'@,'Opcja niedostępna.'@]) ?}
?}


\akt_tab_dzien_gafw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [18.42]
:: OPIS: Formuła po grupowej akcji "Aktualizuj".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_get().par.grupa:=0;
R.index('RUBKOD');
_ref:=_par.KWAL.ref();
params_exec('licz_tab','prc_rozlicz',A_OKRP.OD,A_OKRP.DO);
_par.KWAL.seek(_ref)


\akt_tab_dzien_gbfw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [18.42]
:: OPIS: Formuła przed grupową akcją "Aktualizuj".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().par.grupa:=1


\kwkk_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PM/TMR [18.42]
:: OPIS: Tworzy bufor tabeli dla kwalifikacji przepracowanych godzin z podzialem na konta kosztowe
::   WY: [OBJECT] - obiekt do obsługi kwalifikacji czasu pracy na obiekty kosztowe
::  OLD: \tabkk_create/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new('tabkk','add','erase');

:: definicja tabeli do przechowywania podziałów podczas kwalifikacji
_obj.tabkk:=tab_tmp(3,'DT'  ,'DATE'        ,'Data',
::                     RUB jest akronimem pola w tabeli kwalifikacji _KWAL
                      'RUB' ,'STRING[8]'   ,'Akronim pola',
                      'KK'  ,'STRING[20]'  ,'Ref konta kosztowego',
                      'GODZ','TIME'        ,'Liczba godzin',
                      'RUB_ORG' ,'STRING[8]'   ,'Akronim pola');

:: formuła na dodawanie rekordu do tabeli tabkk
_obj.add:="
   _result:=time(0,0,0);
   _dzien:={? var_pres('_a')=type_of(date) ||  _a || return(_result) ?};
    _rodz:={? var_pres('_b')=type_of('')   ||  _b || return(_result) ?};
      _kk:={? var_pres('_c')=type_of(null)
           || $_c
           |? var_pres('_c')=type_of('')
           || _c
           || return(_result) ?};
    _czas:={? var_pres('_d')=type_of(time) ||  _d || return(_result) ?};

   .tabkk.prefix();
   {? .tabkk.find_key(_dzien,_rodz,_kk) & .tabkk.KK=_kk
   || .tabkk.GODZ+=_czas;
      {? .tabkk.put() || _result:=_czas ?}
   || .tabkk.DT:=_dzien;
      .tabkk.RUB:=_rodz;
      .tabkk.KK:=_kk;
      .tabkk.GODZ:=_czas;
      {? .tabkk.add() || _result:=_czas ?}
   ?};
   _result
";

:: formuła na usuwanie wszystkich rekodrów tabeli tabkk
_obj.erase:="
   .tabkk.prefix();
   {? .tabkk.lock(2,1)
   || {? .tabkk.first()
      || {! |? .tabkk.del() !}
      ?};
      .tabkk.unlock()
   ?}
";

_obj


\dod_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PM/TMR [18.42]
:: OPIS: Wpisuje kwalifikacje czasu pracy do tymczasowej kartoteki obiektu _KWKK na podstawie obiektow kosztowych
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _a [DATE]      - dzien kwalifikacji
::       _b [STRING]    - akronim pola w tabeli _KWAL
::       _c [TIME]      - czas od
::       _d [TIME]      - czas do
::       _e [TIME]      - czas pracy
::   WY: zwraca łączny czas pracy dodany do tabeli _KWKK
::  OLD: \dod_kw/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=time(0,0,0);
_p_ref:={? var_pres('_a')=type_of(null)         || _a || return(_result) ?};
 _data:={? var_pres('_b')=type_of(date)         || _b || return(_result) ?};
  _acr:={? var_pres('_c')=type_of('')           || _c || return(_result) ?};
 _g_od:={? var_pres('_d')=type_of(time)         || _d || return(_result) ?};
 _g_do:={? var_pres('_e')=type_of(time)         || _e || return(_result) ?};
 _czas:={? var_pres('_f')=type_of(time) & _f>*0 || _f || return(_result) ?};

:: obiekt _KWKK musi być przekazany params_set-em
_par:=params_get();
{? var_pres('KWKK',_par)<0 || return(_result) ?};
_KWKK:=params_get().KWKK;
_KWKK.tabkk.cntx_psh();
_KWKK.tabkk.clear();
PLOB_L.cntx_psh();
PLOB_L.index('UNIQUE');
PLOB_P.cntx_psh();
PLOB_P.index('PRAC');

_chk:=*0;
_jestpb:=0;
:: musimy sprawdzić zapisy w dwóch dobach
{! _chk_pb:=0..1
|! PLOB_P.prefix(_p_ref,'W',_data+_chk_pb);
   {? PLOB_P.first()
   || {!
      |? _kk:={? PLOB_P.KK || PLOB_P.KK || exec('kk_hist','pracownik',_p_ref,_data) ?};
         _od:=PLOB_P.GODZ_OD+{? PLOB_P.DATA_OD=_data+1
                             || time(24,0,0)
                             |? PLOB_P.DATA_OD=_data+1+_chk_pb
                             || time(48,0,0)
                             || *0
                             ?};
         _do:=PLOB_P.GODZ_DO+{? PLOB_P.DATA_DO=_data+1
                             || time(24,0,0)
                             |? PLOB_P.DATA_DO=_data+1+_chk_pb
                             || time(48,0,0)
                             || *0
                             ?};
         {? _od<_g_od || _od:=_g_od ?};
         {? _do>_g_do || _do:=_g_do ?};
         {? _od<_do
         || {? (_od<>_g_od | _do<>_g_do)
            || _tmp:=(_do-_od);
               {? _chk+_tmp>_czas || _tmp:=_czas-_chk ?}
            || _tmp:=_czas-_chk
            ?};
            _result+=_KWKK.add(_data,_acr,_kk,_tmp);
            _chk+=_tmp
         ?};
         PLOB_P.next()
      !}
   ?}
!};
:: jeżeli nie udało się całości przekazanego czasu przydzielić do kont wynikających z podziałów, to resztę czasu
:: dodajemy na konto domyślne pracownika
{? _chk<_czas
|| _kk:=exec('kk_hist','pracownik',_p_ref,_data);
   _czas:=_czas-_chk;
   _KWKK.add(_data,_acr,_kk,_czas)
?};
PLOB_P.cntx_pop();
PLOB_L.cntx_pop();
_KWKK.tabkk.cntx_pop();

_result


\prc_conf_dwew_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [20.42]
:: OPIS: Pierwotne wejścia i wyjścia .
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_REJ_WW,'R_REJ_WW','WER',,,'PRC_CZP_DWEW','PRC_CZP_DWEW',P)
|| return()
?};

_a.prolog+="R_REJ_WW.cntx_psh();";
_a.epilog+="R_REJ_WW.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zapisy z czytników'@,,,,,
   $($_a.bs)(_a.map,
      "  _KWAL:=params_get().KWAL;
         R_REJ_WW.use('r_hw'+MASK.MaskZbio(_KWAL.DT~1,_KWAL.DT~2));
         R_REJ_WW.prefix(P.ref(),_KWAL.DT);
         R_REJ_WW.first()
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\blokada_gr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Zablokowanie dnia przepracowanego przed ponowną kwalifikacją.
::   WE: _a - [REFERENCE] - wskazanie na R_PRACDN
::       _b - [INTEGER] - 1 blokowanie, 0 odblokowanie
::       _c - [REFERENCE] - wskazanie na A_OKR. UWAGA! domyślnie brany jest aktualny A_OKR.ref
::   WY: Czy udało sie zablokować/odblokować dzień
::  OLD: \blokada/wykorz.fml
::----------------------------------------------------------------------------------------------------------------------
_refR_PRACDN:={? var_pres('_a')=type_of(null()) || _a || R_PRACDN.ref() ?};
_blokuj:={? var_pres('_b')=type_of(0) || _b || return(-1)  ?};
_a_okr:={? var_pres('_c')=type_of(null()) || _c || A_OKR.ref() ?};
_ret_val:=0;

R_PRACDN.index('R_PRACDN');
R_PRACDN.prefix(P.ref());
{? R_PRACDN.seek(_refR_PRACDN,)
|| {? _blokuj
   || R_PRACDN.BL:='T'
   || R_PRACDN.BL:='N'
   ?};
   _ret_val:=R_PRACDN.put();
   {? _ret_val
   || _wyn:=exec('del_plan','grafik',P.ref(),R_PRACDN.DT,R_PRACDN.DT,'w',_a_okr)
   ?}
?};
_ret_val


\r_wzcz_kwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Ponowna kwalifikacja po zmianach we wzorcach czasu pracy (dni poza wzorcem)
::   WE: _a - rodzaj wykonywanej operacji
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || 'add' ?};
{? R_WZCZ.P<>null() & (_akcja='add' | _akcja='del' |
   (_akcja='put' & (R_WZCZ.KAL<>bfld('KAL') | R_WZCZ.OD<>bfld('OD'))))
|| _normaOld:=_normaNew:=0;
   _kalOld:=_kalNew:=R_WZCZ.KAL;
   _aktOd:=_aktDo:=R_WZCZ.OD;
   {? _akcja='put'
   || _aktOd:={? R_WZCZ.OD<bfld('OD') || R_WZCZ.OD || bfld('OD') ?};
      _aktDo:={? bfld('OD')>_aktOd || bfld('OD') || _aktOd ?};
      _aktDo:={? R_WZCZ.OD>_aktDo || R_WZCZ.OD || _aktDo ?}
   ?};
   KAL_NAZW.cntx_psh();
   KAL_NAZW.prefix();
   {? (_akcja='put' | _akcja='del') & KAL_NAZW.seek(bfld('KAL'))
   || _normaOld:=KAL_NAZW.NORMA;
      _kalOld:=KAL_NAZW.ref();
      {? _akcja='del'
      || _aktOd:=R_WZCZ.OD;
         _aktDo:=R_WZCZ.OD
      || _normaNew:=R_WZCZ.KAL().NORMA
      ?}
   |? _akcja='add'
   || _normaNew:=R_WZCZ.KAL().NORMA
   ?};
   KAL_NAZW.cntx_pop();

   {? _normaNew<>_normaOld | (_akcja='put' & R_WZCZ.OD<>bfld('OD'))
   || exec('aktKalNorm4Prac','grafik',R_WZCZ.P,_aktOd)
   ?}
?};
~~


\pzd_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [22.26]
:: OPIS: Tworzy bufor tabeli dla kwalifikacji przepracowanych godzin pracy zdalnej
::   WY: [OBJECT] - obiekt do obsługi kwalifikacji czasu pracy dla pracy zdalnej
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new('tab','add','put','erase',
   'if_portal','get_portal','test_portal','erase_portal','find_we_typ','tab_portal','start','stop');
_obj.if_portal:=0;

:: definicja tabeli kwalifikacji pracy zdalnej
_obj.tab:=tab_tmp(3,
   'DT','DATE','Data',
   'RN','INTEGER','Numer rubryki',
:: RUB jest akronimem pola w tabeli kwalifikacji _KWAL
   'RUB','STRING[8]','Akronim pola',
   'GODZ','TIME','Liczba godzin'
);
:: definicja tabeli informacji start stop z portalu
_obj.tab_portal:=tab_tmp(4,
   'TP','STRING[1]','Typ zdarzenia',
   'DZK','DATE','Data kwalifikacji',
   'DZ','DATE','Data zdarzenia',
   'GD','TIME','Godzina zdarzenia',
   'PPSFT','STRING[16]','Typ pracy',
   'RN','INTEGER','Numer rubryki'
);


:: formuła na dodawanie rekordu do tabeli tab
:: WE: _a [DATE] - data kwalifikacji
::     _b [INT] - numer rubryki
::     _c [STRING] - nazwa pola w tabeli kwalifikacji
::     _d [TIME] - liczba godzin
_obj.add:="
   _result:=time(0,0,0);
   _dzien:={? var_pres('_a')=type_of(date) ||  _a || return(_result) ?};
   _RN:={? var_pres('_b')=type_of(0) || _b || return(_result) ?};
   _rodz:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
   _czas:={? var_pres('_d')=type_of(time) ||  _d || return(_result) ?};

   .tab.prefix();
   {? .tab.find_key(_dzien,_RN)
   || .tab.GODZ+=_czas;
      {? .tab.put() || _result:=_czas ?}
   || .tab.DT:=_dzien;
      .tab.RN:=_RN;
      .tab.RUB:=_rodz;
      .tab.GODZ:=_czas;
      {? .tab.add() || _result:=_czas ?}
   ?};
   _result
";

_obj.put:="
   _result:=time(0,0,0);
   _dzien:={? var_pres('_a')=type_of(date) ||  _a || return(_result) ?};
   _RN:={? var_pres('_b')=type_of(0) || _b || return(_result) ?};
   _czas:={? var_pres('_c')=type_of(time) ||  _c || return(_result) ?};
   .tab.prefix();
   {? .tab.find_key(_dzien,_RN)
   || .tab.GODZ+=_czas;
      {? .tab.put() || _result:=_czas ?}
   ?};
   _result:=_czas
";
:: Zadaniem metody jest pobranie informacji start stop do tabeli tab_portal
:: WE: _a [DATE] data kwalifikacji
_obj.get_portal:="
   _year:=($(_a~1))+2;
   _month:={? (_mc:=_a~2)>=10 || $_mc || '0%1'[$_mc] ?};
   R_POR_WW.use('r_ph%1%2'[_year,_month]);
   R_POR_WW.index('DZK');
   R_POR_WW.prefix(P.ref(),_a);
   .if_portal:=R_POR_WW.first();
   .tab_portal.prefix();
   .erase_portal();
   {? .if_portal
   || {!
      |? .tab_portal.TP:=R_POR_WW.TP;
         .tab_portal.DZK:=R_POR_WW.DZK;
         .tab_portal.DZ:=R_POR_WW.DZ;
         .tab_portal.GD:=R_POR_WW.GD;
         .tab_portal.PPSFT:=$R_POR_WW.PPSFT;
         .tab_portal.RN:=R_POR_WW.PPSFT().R().RN;
         .tab_portal.add(1);
         R_POR_WW.next()
      !}
   ?};
   .if_portal
";

:: metoda sprawdza czy w danym dniu istnieje zapis o przekazanym parametrem typie
:: WE: _a [STRING] - ref tabeli PPSFT
_obj.test_portal:="
   .tab_portal.prefix();
   _exist:=0;
   {? .tab_portal.first()
   || {!
      |? _exist+=.tab_portal.PPSFT=_a;
         .tab_portal.next()
      !}
   ?};
   _exist
";

:: metoda zwraca godzinę zakończenia pracy w danym typie
:: WE: _a [STRING] - Typ zdarzenia
::     _b [DATE] - data kwalifikacji
::     _c [DATE] - data zdarzenia
_obj.stop:="
   .tab_portal.prefix(_a,_b);
   _stop:=*0;
   {? .tab_portal.last()
   || _stop:=.tab_portal.GD;
      {? .tab_portal.DZ>_c
      || _stop+=time(24,0,0)
      ?}
   ?};
   _stop
";

:: metoda zwraca godzinę rozpoczęcia pracy w danym typie
:: WE: _a [STRING] - Typ zdarzenia
::     _b [DATE] - data kwalifikacji
::     _c [DATE] - data zdarzenia
_obj.start:="
   .tab_portal.prefix(_a,_b);
   _start:=time(24,0,0);
   {? .tab_portal.first()
   || {? .tab_portal.DZ<_c
      || _start:=*0
      || _start:=.tab_portal.GD
      ?}
   ?};
   _start
";

:: metoda zwraca znaleziony numer rubryki dla typu dla podanych danych uwzględniając czas wystąpienia
:: WE: _a [STRING] - Typ zdarzenia
::     _b [DATE] - data kwalifikacji
::     _c [DATE] - data zdarzenia
::     _d [TIME] - godzina zdarzenia
_obj.find_we_typ:="
   .tab_portal.prefix(_a,_b);
   _exist:=0;
   {? .tab_portal.find_key(_c,_d)
   || _exist:=.tab_portal.RN
   || {? .tab_portal.last()
      || _exist:=.tab_portal.RN;
         {!
         |? {? time(_d~1,_d~2,0)>=time(.tab_portal.GD~1,.tab_portal.GD~2,0)
            || _exist:=.tab_portal.RN;
               0
            || .tab_portal.prev()
            ?}
         !}
      ?}
   ?};
   _exist
";

:: formuła na usuwanie wszystkich rekodrów tabeli tab
_obj.erase:="
   .tab.prefix();
   {? .tab.first()
   || {! |? .tab.del() !}
   ?}
";

:: formuła na usuwanie wszystkich rekodrów tabeli tab_portal

_obj.erase_portal:="
   .tab_portal.prefix();
   {? .tab_portal.first()
   || {! |? .tab_portal.del() !}
   ?}
";

_obj

:Sign Version 2.0 jowisz:1045 2023/10/24 11:44:33 47cd56183143a87cd1fce1f2dc1238a30ce288a36466335f537f900661e17485c6d891476e970eaad4a29b5c4ba6de2202e0b7e090e881d76467dec4fdeb92a286dbf7ebc6b60d83dce773dfd81dccf3d618fa6780365cf676a557bbaaf4bd817992a40b765d02933de00883ce2f9c8066dd81bae49eb7d57f984e7c8a8ae3ba
