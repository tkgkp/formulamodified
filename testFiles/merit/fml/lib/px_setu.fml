:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: px_setu.fml [12.41]
:: Utworzony: 17.06.2014
:: Autor: WH
::======================================================================================================================
:: Zawartosc: Formuly do obslugi uzytkownikow dla zestawow planistycznych w Planie Strategicznym
::======================================================================================================================

\buffer
::----------------------------------------------------------------------------------------------------------------------
::  UTW:  []
:: OPIS: tablica buforowa dla tabeli PX_SETU
::   WE: FORMULA [_a] - dodatkowe pola do obiektu - umieszczane na koncu - nie obslugiwane przez standardowe metody [""]
::   WY: tablica buforowa o następującej strukturze
::             _USERS    USERS - Użytkownik przypisany do zestawu
::             _PX_SET   PX_SET - Zestaw planistyczny
::----------------------------------------------------------------------------------------------------------------------
::               PX_SETU.ref()
_buffer:=$("obj_new('Ref'
::  _USERS       Użytkownik //Użytkownik przypisany do zestawu
                   ,'USERS'
::  _PX_SET      Zestaw planistyczny //Zestaw planistyczny
                   ,'PX_SET'
::  metoda          czyszczenie bufora blank(), gdy podany parametr ~~, to bl_void()
                   ,'blank'
::  metoda          czyszczenie bufora typem pustym bl_void()
                   ,'bl_void'
::  metoda          czyszczenie bufora za pomocą bufora tabeli bl_table()
                   ,'bl_table'
::  metoda          _buffer.get() - pobieranie zawartości bufora
                   ,'get'
::  metoda          _buffer.set() - pola<>~~ nanoszone do tabeli
                   ,'set'
::  metoda          _buffer.setf() - wszystkie pola nanoszone do tabeli
                   ,'setf'
::  metoda          _buffer.cntx_get(ref()/#ref()[,maska]) - wczytuje bufor podanych parametrów
                   ,'cntx_get'
::  metoda          _buffer.ref() - zwraca wartosc .Ref
                   ,'ref'
                   "+{? var_pres('_a')=3 & form(_a)<>'' || ","+_a || "" ?}+"
                   )");
_buffer:=_buffer();

:: metody - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_buffer.blank:="
                {? var_pres('_a')=0   || .bl_void()
                |? var_pres('_a')>100 || .bl_table(_a)
                || .bl_table(PX_SETU)
                ?}
               ";

_buffer.bl_void:="
                  .USERS:=~~;
                  .PX_SET:=~~;
                  .Ref:=null();
                  1
                 ";

_buffer.bl_table:="
                  _tab:=PX_SETU;
                  _tab.cntx_psh();
                  _tab.blank(1);
                  .get(_tab);
                  _tab.cntx_pop();
                  _tab.get();
                  .Ref:=null();
                   1
                  ";

_buffer.get:="
              .USERS:=PX_SETU.USERS;
              .PX_SET:=PX_SETU.PX_SET;
              .Ref:=PX_SETU.ref();
              (.)
             ";

_buffer.set:="
              {? .USERS<>~~      || PX_SETU.USERS:=.USERS ?};
              {? .PX_SET<>~~     || PX_SETU.PX_SET:=.PX_SET ?};
              ~~
             ";

_buffer.setf:="
               PX_SETU.USERS:=.USERS;
               PX_SETU.PX_SET:=.PX_SET;
               ~~
              ";

_buffer.cntx_get:="
                   _tab:=PX_SETU;
                   {? type_of(_a)=7 || _ref:=#_a; _mask:=ref_name(_a)
                   |? type_of(_a)=1 || _ref:=_a;  _mask:={? var_pres('_b')=2 || _b || _tab.name() ?}
                   || .blank(~~); return(.)
                   ?};
                   _tab.cntx_psh();
                   {? {? _tab.name()<>_mask
                      || _tab.use(_mask)
                      || 1
                      ?}
                   || _tab.prefix();
                      {? _tab.seek(_ref,)
                      || .get()
                      || .blank(~~)
                      ?}
                   || .blank(~~)
                   ?};
                   _tab.cntx_pop();
                   (.)
                  ";

_buffer.ref:=".Ref";
:: czyszczenie bufora
_buffer.blank(~~);

:: zwracam bufor
_buffer


\add
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Dodaje jeden rekord do tabeli PX_SETU
::   WE: _a - obj_new - tablica nazwana bedaca buforem tabeli exec('buffer','px_setu')
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_buffer:={? var_pres('_a')>100
         || _a
         || exec('buffer','px_setu')
         ?};
_result:=0;


PX_SETU.cntx_psh();
PX_SETU.blank();
_buffer.set();
_result:=PX_SETU.add();
PX_SETU.cntx_pop();
_result


\delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Kasuje podany rekord tabeli PX_SETU (wykonywane w transakcji!!!)
::   WE: _a - PX_SETU.ref()
::   WY: >0 -wyczyszczone, usuniete
::      -1 - nie udalo sie znalezc rekordu
::      -2 - nie udalo sie czyszczenie powiazan
::      -3 - nie udalo sie usuniecie rekordu
::      -4 - nie udalo sie zablokowanie rekordu
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
:: jeżeli transakcja została zerwana, to nie ma sensu przetwarzać formuły
{? do_state()=2 || return(-100) ?};
_result:=0;
_ref:=_a;
:: sprawdzam, czy to w tej formule będę zakładał transakcję, czy już jest założona
_mydo:=do_state()=0;
{? _mydo || do() ?};
PX_SETU.cntx_psh(); PX_SETU.clear();
{? PX_SETU.seek(_ref)
||
:: Sprawdzam czy zestaw moge zablokowac do zapisu, jesli tak to moge go usuwac
   {? PX_SETU.r_lock(1,1,1)
   ||
      {? exec('clean','px_setu',_ref)>0
      || {? PX_SETU.del(,1)>0
         || _result:=1
         || undo();
            _result:=-3
         ?}
      || PX_SETU.r_unlock();
         _result:=-2
      ?}
   || _result:=-4
   ?}
|| _result:=-1
?};
PX_SETU.cntx_pop();
{? _mydo || end() ?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
:: UTW: WH [12.41]
:: OPIS: Czysci powiazania do rekordu tabeli PX_SETU
:: WE: _a - PX_SET.ref()
:: WY: >0 -wyczyszczone,
:: <=0 -niewyczyszczone
::UWAGA: Parametry bez [] sa wymagane, formula moze nie sprawdzac czy zostaly podane i moze wystapic blad.
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=2 || return(-100) ?};
_result:=1;
_px_setu:=_a;

_mydo:=do_state()=0;
{? _mydo || do() ?};
:: --- powiązania do ---

:: --- wszystkie powiazania usuniete? ---
{? _mydo || _result:=end()?};
_result


\add_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Akcja 'Dołącz' w oknie wertowania tabeli PX_SETU
::----------------------------------------------------------------------------------------------------------------------

_users:=tab_tmp(3,
:: 'POLE','TYP','Nazwa w oknie',
   'KOD','STRING[10]','Kod użytkownika',
   'DANE','STRING[50]','Informacje o użytkowniku',
   'REF','STRING[16]','SQL ref uzytkownika'
);

PX_SETU.cntx_psh();
PX_SETU.index('PX_SET');
USERS.cntx_psh();
USERS.index('USR_KKOD');
{? USERS.first()
|| PX_SETU.cntx_psh();
   {!
   |?
::    Sprawdzam czy jest juz taki uzytkownik przypisany do zestawu
      PX_SETU.prefix(PX_SET.ref(),USERS.ref());
      {? PX_SETU.size()=0
      ||
::       Nie ma jeszcze takiego uzytkownika dla zestawu wiec dodaje do tabelki tymczasowej
         _users.blank();
         _users.REF:=$USERS.ref();
         _users.KOD:=USERS.KOD;
         _users.DANE:=USERS.DANE;
         _users.add()
      ?};
      USERS.next()
   !};
   PX_SETU.cntx_pop()
?};

_wer:=_users.mk_sel('Użytkownicy nie przypisani do zestawu: %1'@[PX_SET.SYMBOL],,0,'px_setu_users',,,20,,'U');
_users.win_fld(_wer,,'KOD',,,10,,,'Kod'@);
_users.win_fld(_wer,,'DANE',,,60,,,'Dane użytkownika'@);
_users.win_act(_wer,,'Formuła','Wybierz'@@,,'Wybór bieżącego zapisu ze słownika'@,"
                       {? USERS.seek(cur_tab(1,1).REF,USERS.name())
                       ||
                          _buffer:=exec('buffer','px_setu');
                          _buffer.PX_SET:=PX_SET.ref();
                          _buffer.USERS:=USERS.ref();
                          {? exec('add','px_setu',_buffer)>0
                          || cur_tab(1,1).del()
                          ?}
                       ?}",,1,1);
_users.win_act(_wer,,'Kolejność');
_users.win_sel(_wer);
_users.select()
;

PX_SETU.cntx_pop();
USERS.cntx_pop();
~~


\delete_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' w oknie wertowania tabeli PX_SETU
::   WY: <=0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------

_result:=0;
_can_continue:=1;

_group:=0;
_is_used:=0;

{? PX_SETU.sel_size()>0
|| _group:=1
?};

{? _group=0
|| {? FUN.ask('Czy na pewno usunąć użytkownika: \'%1\' z zestawu?'@[PX_SETU.USERS().KOD])
   || _can_continue:=1
   || _can_continue:=0
   ?};
   ~~
?};

{? _can_continue>0
|| _result:=exec('delete','px_setu',PX_SETU.ref());

   {? _result<=0
   ||
      {? _result=-4
      || _msg:='Użytkownik: \'%1\' używa w tej chwili swojego zestawu. Usuwanie niemożliwe.'@[PX_SETU.USERS().KOD]
      || _msg:='Usunięcie użytkownika: %1 z zestawu zakończone niepowodzeniem.'@[PX_SETU.USERS().KOD]
      ?};
      {? _group=0
      || FUN.emsg(_msg)
      || KOMM.add(_msg,2)
      ?}
   ?}
?};
_result


\delete_act_gr1
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' grupa przed w oknie wertowania PX_SETU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczonych użytkowników: %1. Czy usunąć ich z zestawu?'@[$PX_SETU.sel_size()])
|| _result:=1;
   KOMM.init(200,,'Usuwanie użytkowników przypisanych do zestawu.'@,'')
?};
_result


\delete_act_gr2
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.41]
:: OPIS: Akcja 'Usun' grupa po w oknie wertowania PX_SETU
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\lock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Blokuje zestaw planistyczny dla uzytkownika, ale w trybie Read Only
::   WE: _a - PX_SET.ref()
::       _b - USERS.ref()
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_set:=_a;
_users:=_b;

_result:=0;

PX_SETU.cntx_psh();
PX_SETU.index('PX_SET');
PX_SETU.prefix(_px_set,_users);
{? PX_SETU.first()
|| _result:=PX_SETU.r_lock(0,1,1)
?};
PX_SETU.cntx_pop();
_result


\unlock
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.41]
:: OPIS: Odblokowuje zestaw planistyczny dla uzytkownika
::   WE: _a - PX_SET.ref()
::       _b - USERS.ref()
::   WY: 0 - porazka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_px_set:=_a;

_result:=0;

PX_SETU.cntx_psh();
PX_SETU.index('PX_SET');
PX_SETU.prefix(_px_set,_users);
{? PX_SETU.first()
|| _result:=PX_SETU.r_unlock()
?};
PX_SETU.cntx_pop();
_result


\default_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Zwraca domyslny zestaw planistyczny dla uzytkownika
::   WY: PX_SET.ref() albo null()
::----------------------------------------------------------------------------------------------------------------------
_res:=null();

_p8063:=exec('get','#params',8063,2,OPERATOR.USER);

PX_SETU.cntx_psh();
PX_SETU.index('USERS');
PX_SETU.prefix(OPERATOR.USER,_p8063,);
{? PX_SETU.first()
|| _res:=PX_SETU.PX_SET
?};
PX_SETU.cntx_pop();

_res


\get_user_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Zwraca tabele tymczasowa z PX_SETami usera rozszerzona od rekord '-- brak --'
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select
      PX_SET.SYMBOL as SYMBOL,
      PX_SETU.PX_SET as REF
   from PX_SETU join PX_SET
   where PX_SETU.USERS=:_a
   order by 1
',OPERATOR.USER);

_tab.SYMBOL:='-- brak --';
_tab.REF:='';
_tab.add();

_tab

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 df217fd25e68f1854588f4cda603c7f3a3bf81335c55590c1c0bb5d02a839a80b6503a8df7c9b94fa663477eab0b4b1325891f6e5339a80cc17d80c759b07072a9821994d88ec5b829b986a0d4674ba194da1e2ed0aeafd2e59fc191a11d698e258e2668f455bbb91e6c218ad898d7c490c4fb574ffa38fd1cfed0dc5aedb5b3
