:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: godziny.fml
:: Utworzony: 13.11.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość:  Formuły do manipulowania godzinami.
::======================================================================================================================


\nominal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wylicza nominalną liczbę godzin z uwzględnieniem wymiaru zatrudnienia.
::       Bufor tabeli P musi być określony.
::   WE:  _a  [DATE]    - Data od.
::        _b  [DATE]    - Data do.
::       [_c] [INTEGER] - Czy ignorować ograniczenie dat wynikające z przebiegu zatrudnienia?
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::       [_d] [INTEGER] - Uwzględniać indywidualną normę?
::                         0 - Nie [domyślnie].
::                         1 - Tak. Wybór określa wartości następnych parametrów: _c:=0; _f:=1; _g:=0; _h:=1;
::       [_e] [INTEGER] - Tryb bezgłośny:
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::       [_f] [INTEGER] - Zawsze uwzględniany wymiar zatrudnienia:
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::       [_g] [INTEGER] - Dla podanego wymiaru zatrudnienia
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::       [_h] [INTEGER] - Czy pomijać wymiar zatrudnienia?
::                         0 - Nie [domyślnie].
::                         1 - Tak.
::       [_i] [INTEGER] - Wywołanie z funkcji licz_go_macrodz - czy wyliczenie następuje dla kalendarza typu grafik:
::                         0 - brak informacji
::                         1 - Nie.
::                         2 - Tak.
::   WY: Nominalna liczba godzin.
::  OLD: /licz_go.fml
::  OLD: \licz_godz/plf_nadg.fml
::----------------------------------------------------------------------------------------------------------------------
_okres_od:=_a;
_okres_do:=_b;
_igndt:=2*(var_pres('_c')=type_of(0) & _c);
_in:=var_pres('_d')=type_of(0) & _d;
{? _in
|| _f:=1;
   _g:=0;
   _h:=1
?};
_silent:=var_pres('_e')=type_of(0) & _e;
_wymiar:=var_pres('_f')=type_of(0) & _f;
_jest_wym:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_pwym:=var_pres('_h')=type_of(0) & _h;
_mac:={? var_pres('_i')=type_of(0) || _i || 0 ?};

_Fgodz:=
   {? _in
   || "
      _dni:=_b-_a;
      _licz:=0;
      {! _ind:=0 .. _dni
      |! {? __KAL.w_days(_b-_ind,_b-_ind)
         || _licz+=exec('norma','godziny',_b-_ind)
         ?}
      !};
      _licz"
   || "__KAL.w_hours(_a,_b,_c)"
   ?};

{? _jest_wym
|| _pwym:=1;
   _wym:=$form(_jest_wym,,,'..')
|| {? _wymiar & ~_mac
   || _pwym:=1;
      _wym:="H.WY"
   |? _wymiar & _mac
   || _pwym:=1;
      _wym:={? _mac=1 || "{? H.MAC='T' || H.RWY-H.WY || H.WY ?}" || "{? H.MAC='T' || (H.RWY-H.WY)/H.WY || H.WY ?}" ?}
   || _wym:="1"
   ?}
?};

_ret:=0;
_d0:=date(0,0,0);

P.cntx_psh();
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_okres_do)
|| {!
   |? {? H.OD>_okres_od
      || H.prev()
      ?}
   !};
   {? H.OD<=_okres_do & (H.DO=_d0 | _okres_od<=H.DO)
   || {? H.DO<>_d0 & H.DO<_okres_do
      || _koniec:=0;
         {!
         |? {? _igndt=2
            || _od:=_okres_od;
               _igndt:=1
            || _od:={? H.OD<_okres_od || _okres_od || H.OD ?}
            ?};
            _do:={? H.DO>_okres_do || _okres_do |? H.DO=_d0 || _okres_do || H.DO ?};
            _ret+=_Fgodz(_od,_do,_pwym)*_wym()$2;
            {? H.DO<_okres_do
            || {? H.next()
               || {? H.DO=_d0 | _okres_do<H.DO
                  || _koniec:=1;
                     _od:={? H.OD<_okres_od || _okres_od || H.OD ?};
                     _do:={? H.DO>_okres_do || _okres_do |? H.DO=_d0 || _okres_do || H.DO ?};
                     _ret+=_Fgodz(_od,_do,_pwym)*_wym()$2
                  ?}
               || _koniec:=1
               ?}
            || _koniec:=1
            ?};
            ~_koniec
         !};
         {? _igndt & _do<_okres_do
         || _ret+=_Fgodz(_do+1,_okres_do,_pwym)*_wym()$2
         ?}

      |? H.OD<=_okres_od
      || _ret+=_Fgodz(_okres_od,_okres_do,_pwym)*_wym()$2

      |? _igndt
      || _ret+=_Fgodz(_okres_od,_okres_do,_pwym)*_wym()$2

      || _ret+=_Fgodz(H.OD,_okres_do,_pwym)*_wym()$2
      ?}
   ?}
|? ~_silent
|| RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,'Brak danych w przebiegu zatrudnienia'@)
?};
P.cntx_pop();
H.cntx_pop();
_ret$2


\ustaw_maski
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Ustawia maskę tabeli godzin, tabeli rozliczenia godzin oraz tabeli danych o godzinach w controllingu
::       Ustawia również aktualnie obowiązujące indeksy
::   WE: _a [INTEGER] - rok
::       _b [INTEGER] - miesiąc
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_rok:={? var_pres('_a')=type_of(0) || _a || return(_result) ?};
_msc:={? var_pres('_b')=type_of(0) || _b || return(_result) ?};

_mask:='godz'+('0000'+$_rok+4);
{? G.name()=''
|| _result+=G.use(_mask)
|? G.name()<>_mask
|| _ind:=G.index('?');
   _result+=G.use(_mask);
   G.index(_ind)
|| _result+=1
?};

_mask:='rzg_'+('0000'+$_rok+4);
{? R_GODZ.name()=''
|| _result+=R_GODZ.use(_mask)
|? R_GODZ.name()<>_mask
|| _ind:=R_GODZ.index('?');
   _result+=R_GODZ.use(_mask);
   R_GODZ.index(_ind)
|| _result+=1
?};

_mask:='cog'+(('0'+($_rok))+2)+(('0'+($_msc))+2);
{? CON_KG.name()=''
|| _result+=CON_KG.use(_mask)
|? CON_KG.name()<>_mask
|| _ind:=CON_KG.index('?');
   _result+=CON_KG.use(_mask);
   CON_KG.index(_ind)
|| _result+=1
?};

_result=3


\norma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Dla bieżącego pracownika funkcja zwraca wartość pola norma kalendarza określonego na podany dzień,
::       lub 8 jeśli określenie kalendarza nie powiodło się.
::       Funkcja wykorzystywana przy wyliczaniu karty urlopowej i drukowaniu świadectwa pracy.
::   WE: [_a] [DATE] - Data badania stanu (określenia kalendarza) [domyślnie:date()].
::   WY: Obowiązująca norma.
::  OLD: \norma/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~P.KAL
|| return(8)
?};

_dt:={? var_pres('_a')=type_of(date()) || _a || date() ?};
_norma:=0;

{? P.KAL().CZESC='T'
|| R_WZCZ.cntx_psh();
   R_WZCZ.index('R_WZCZE');
   R_WZCZ.prefix(P.KAL);
   {? R_WZCZ.find_le(_dt)
   || _norma:=R_WZCZ.KAL().NORMA
   ?};
   R_WZCZ.cntx_pop()
|| _norma:=P.KAL().NORMA
?};

{? _norma
|| _norma
|| 8
?}


\norma_zmiana
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Weryfikacja czy w zadanym okresie pracownik ma inną normę dzienną niż 8h (bez uwzględnienia wymiaru
::       zatrudnienia).
::   WE: _a [DATE] - Poczętek badanego okresu.
::       _b [DATE] - Koniec badanego okresu.
::   WY: Norma zmieniona choćby w jednym dniu:
::       0 - Nie.
::       1 - Tak.
::  OLD: \norma/plf_nadg.fml
::----------------------------------------------------------------------------------------------------------------------
_pocz:=_a;
_koniec:=_b;
_dni:=_koniec-_pocz;
_bz:=1;
_norma:=
   {? O.T().KA().NORMA
   || O.T().KA().NORMA
   || 8
   ?};
{! _ind:=0 .. _dni
|? _bz:=exec('norma','godziny',_koniec-_ind)=_norma
!};
~_bz


\norma_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca formułę, do wykorzystania przy ustalaniu normy pracy.
::   WE:
::   WY: Formuła zwracająca normę.
::----------------------------------------------------------------------------------------------------------------------
{? P.KAL
|| {? P.KAL().CZESC='T'
   || "exec('norma','godziny',_a)"
   |? KAL_NAZW.NORMA
   || $form(KAL_NAZW.NORMA,,,'0.')
   || "8"
   ?}
|| "8"
?}


\suma_g_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed wyświetleniem pola SUMA.G.
::       Formuła służy do obliczenia sumy zaznaczonych rekordów.
::       Formuła odwołuje się do tabeli aktualnie wyświetlanego okna. Wykorzystywana jest na rzecz tabeli G.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);
_sel_size:=_TAB.sel_size();
_fml:='\'empty='+$(_sel_size=0)+'\'';
SUMA.fld_fml('G','DISPLAY_FORMAT',$_fml);
{? _sel_size
|| _sql:=
      'select sum(TAB.G) G '+
      'from :_a TAB '+
      'where reference_num(TAB.REFERENCE) in (select SEL.REF from :_b SEL)';
   _SUMA:=sql(_sql,_TAB,_TAB.sel_aget());
   SUMA.G:=_SUMA.G
?};
1


\g_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli G.
::   WE:
::   WY:
::  OLD: \leg_g/menu.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','#G#01')


\g_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Ustala ikonki dla kolumn okienek tabeli G
::----------------------------------------------------------------------------------------------------------------------
_rub:=G.K().RN;

'xwin16.png:'+
::             godziny nieobecności
              ${? _rub=49   || '170'
::             godziny przepracowane
               |? _rub=54
               |  _rub=65   || '134'
::             nadgodziny 50%
               |? _rub=55   || '135'
::             nadgodziny 100%
               |? _rub=56
               |  _rub=66   || '136'
::             nnocne
               |? _rub=57   || '137'
::             godziny w dni wolne
               |? _rub=58   || '138'
::             warunki szkodliwe
               |? _rub=59
               |  _rub=60
               |  _rub=61
               |  _rub=62   || '139'
::             odbiór nadgodzin, dopełnienie do wymiaru
               |? _rub=63
               |  _rub=67   || '140'
::             inne
               || '141'
               ?}


\ustaw_okno
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Ustawia okno tabeli godzin
::   WE: _a [STRING] - ID czynności
::----------------------------------------------------------------------------------------------------------------------
_id:={? var_pres('_a')=type_of('') || _a || '' ?};

{? _id='PPL_PLL_RPKO'
|| G.win_patt('REDK');
   G.win_edit('REDK')
|| G.win_patt('WZOC');
:: ustawienie okienek w zależności od dostępnej ewidencji podziałów controllingowych
   exec('czytaj','#stalesys',date,KST_PAR,'SKID_MB');
   {? PAR_SKID.get(80)<>'T' | ~KST_PAR.SKID_MB
   || G.win_edit('RED')
   || G.win_edit('REDC');
      exec('set_fld_controlling','godziny')
   ?};
   _icon_fml:="exec('g_icon','godziny')";
   G.win_fml('WER',,'K','RN','ICON_BEFORE',_icon_fml);
   G.win_fml('WERA',,'K','RN','ICON_BEFORE',_icon_fml);
   G.win_fml('WER_PRC',,'K','RN','ICON_BEFORE',_icon_fml);
   G.win_fml('WER_PRCZ',,'K','RN','ICON_BEFORE',_icon_fml)
?};
exec('g_efld_opt','godziny','*',G,G.win_edit('?'));
~~


\set_fld_controlling
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Ustawienie obsługi pól zmiennej UD_POM oraz CON_KG dla okienek redagowania godzin związanych z controllingiem
::----------------------------------------------------------------------------------------------------------------------
F3DimArea:=1;
:: dla UD_POM
exec('set_fml','#field',UD_POM,'PBUD',
:: przed wyświetleniem
   "UD_POM.PBUD:=CON_KG.POZ_BUD().SYMBOL;
   exec('g_efld_opt','godziny')",
:: przed redakcją
   "exec('be_dim','control',CON_KG.SKID_MB,1)",
:: F3
   "  _sym:=exec('f3_dim','control',CON_KG.SKID_MB,1);
      {? _sym<>''
      || fld(_sym)
      ?}
   ",
:: po redakcji
   "  _ref:=exec('ae_dim','control',CON_KG.SKID_MB,1);
      {? _ref
      || CON_KG.POZ_BUD:=_ref;
         fld(CON_KG.POZ_BUD().SYMBOL);
         1
      || CON_KG.POZ_BUD:=null;
         fld('');
         1
      ?}
   "
);
exec('set_fml','#field',UD_POM,'JORG',
:: przed wyświetleniem
   "UD_POM.JORG:=CON_KG.PODZORG().SYMBOL;
   exec('g_efld_opt','godziny')",
:: przed redakcją
   "exec('be_dim','control',CON_KG.SKID_MB,2)",
:: F3
   "  _sym:=exec('f3_dim','control',CON_KG.SKID_MB,2);
      {? _sym<>''
      || fld(_sym)
      ?}
   ",
:: po redakcji
   "  _ref:=exec('ae_dim','control',CON_KG.SKID_MB,2);
      {? _ref
      || CON_KG.PODZORG:=_ref;
         fld(CON_KG.PODZORG().SYMBOL);
         1
      || CON_KG.PODZORG:=null;
         fld('');
         1
      ?}
   "
);
exec('set_fml','#field',UD_POM,'OKOSZ',
:: przed wyświetleniem
   "UD_POM.OKOSZ:=CON_KG.OB_KOSZ().SYMBOL;
   exec('g_efld_opt','godziny')",
:: przed redakcją
   "exec('be_dim','control',CON_KG.SKID_MB,3)",
:: F3
   "  _sym:=exec('f3_dim','control',CON_KG.SKID_MB,3);
      {? _sym<>''
      || fld(_sym)
      ?}
   ",
:: po redakcji
   "  _ref:=exec('ae_dim','control',CON_KG.SKID_MB,3);
      {? _ref
      || CON_KG.OB_KOSZ:=_ref;
         fld(CON_KG.OB_KOSZ().SYMBOL);
         1
      || CON_KG.OB_KOSZ:=null;
         fld('');
         1
      ?}
   "
);
exec('set_fml','#field',UD_POM,'WYM4',
:: przed wyświetleniem
   "UD_POM.WYM4:=CON_KG.WYM4().SYMBOL;
   exec('g_efld_opt','godziny')",
:: przed redakcją
   "exec('be_dim','control',CON_KG.SKID_MB,4)",
:: F3
   "  _sym:=exec('f3_dim','control',CON_KG.SKID_MB,4);
      {? _sym<>''
      || fld(_sym)
      ?}
   ",
:: po redakcji
   "  _ref:=exec('ae_dim','control',CON_KG.SKID_MB,4);
      {? _ref
      || CON_KG.WYM4:=_ref;
         fld(CON_KG.WYM4().SYMBOL);
         1
      || CON_KG.WYM4:=null;
         fld('');
         1
      ?}
   "
);
exec('set_fml','#field',UD_POM,'WYM5',
:: przed wyświetleniem
   "UD_POM.WYM5:=CON_KG.WYM5().SYMBOL;
   exec('g_efld_opt','godziny')",
:: przed redakcją
   "exec('be_dim','control',CON_KG.SKID_MB,5)",
:: F3
   "  _sym:=exec('f3_dim','control',CON_KG.SKID_MB,5);
      {? _sym<>''
      || fld(_sym)
      ?}
   ",
:: po redakcji
   "  _ref:=exec('ae_dim','control',CON_KG.SKID_MB,5);
      {? _ref
      || CON_KG.WYM5:=_ref;
         fld(CON_KG.WYM5().SYMBOL);
         1
      || CON_KG.WYM5:=null;
         fld('');
         1
      ?}
   "
);

exec('set_fml','#field',UD_POM,'NAZ_WYM1',
:: przed wyświetleniem
   "exec('bd_naz_wym','control','1');
    exec('g_efld_opt','godziny')
   "
);
exec('set_fml','#field',UD_POM,'NAZ_WYM2',
:: przed wyświetleniem
   "exec('bd_naz_wym','control','2');
    exec('g_efld_opt','godziny')
   "
);
exec('set_fml','#field',UD_POM,'NAZ_WYM3',
:: przed wyświetleniem
   "exec('bd_naz_wym','control','3');
    exec('g_efld_opt','godziny')
   "
);
exec('set_fml','#field',UD_POM,'NAZ_WYM4',
:: przed wyświetleniem
   "exec('bd_naz_wym','control','4');
    exec('g_efld_opt','godziny')
   "
);
exec('set_fml','#field',UD_POM,'NAZ_WYM5',
:: przed wyświetleniem
   "exec('bd_naz_wym','control','5');
    exec('g_efld_opt','godziny')
   "
);

:: dla CON_KG
exec('set_fml','#field',CON_KG,'POZ_BUD',
:: przed wyświetleniem
   "exec('g_efld_opt','godziny')"
);
exec('set_fml','#field',CON_KG,'PODZORG',
:: przed wyświetleniem
   "exec('g_efld_opt','godziny')"
);
exec('set_fml','#field',CON_KG,'OB_KOSZ',
:: przed wyświetleniem
   "exec('g_efld_opt','godziny')"
);
exec('set_fml','#field',CON_KG,'WYM4',
:: przed wyświetleniem
   "exec('g_efld_opt','godziny')"
);
exec('set_fml','#field',CON_KG,'WYM5',
:: przed wyświetleniem
   "exec('g_efld_opt','godziny')"
)


\g_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli G, CON_KG, zmiennych UD_POM i SKL_OKR.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(G)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _we='REDK'
|| {? _fld='' | _fld='G'
   || _sval:=$(G.F='');
      _tab.efld_opt(_we,'enable='+_sval,G,'G')
   ?};

   {? _fld='' | _fld='F'
   || _sval:=$(G.G=0.0);
      _tab.efld_opt(_we,'enable='+_sval,G,'F')
   ?};

   {? G.G=0.0 & G.F=''
   || _tab.efld_opt(_we,'mark=1',G,'G');
      _tab.efld_opt(_we,'mark=1',G,'F')
   |? G.G<>0.0 & G.F=''
   || _tab.efld_opt(_we,'mark=1',G,'G');
      _tab.efld_opt(_we,'mark=0',G,'F')
   |? G.G=0.0 & G.F<>''
   || _tab.efld_opt(_we,'mark=0',G,'G');
      _tab.efld_opt(_we,'mark=1',G,'F')
   ?}

||
:: dla pól zmiennej UD_POM
   {? _fld='PBUD' | _fld='NAZ_WYM1'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,1);
      _tab.efld_opt(_we,'enable='+_sval,UD_POM,_fld)
   ?};

   {? _fld='JORG' | _fld='NAZ_WYM2'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,2);
      _tab.efld_opt(_we,'enable='+_sval,UD_POM,_fld)
   ?};

   {? _fld='OKOSZ' | _fld='NAZ_WYM3'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,3);
      _tab.efld_opt(_we,'enable='+_sval,UD_POM,_fld)
   ?};

   {? _fld='WYM4' | _fld='NAZ_WYM4'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,4);
      _tab.efld_opt(_we,'enable='+_sval,UD_POM,_fld)
   ?};

   {? _fld='WYM5' | _fld='NAZ_WYM5'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,5);
      _tab.efld_opt(_we,'enable='+_sval,UD_POM,_fld)
   ?};

   {? _fld='POZ_BUD'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,1);
      _tab.efld_opt(_we,'enable='+_sval,CON_KG,_fld)
   ?};

   {? _fld='PODZORG'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,2);
      _tab.efld_opt(_we,'enable='+_sval,CON_KG,_fld)
   ?};

   {? _fld='OB_KOSZ'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,3);
      _tab.efld_opt(_we,'enable='+_sval,CON_KG,_fld)
   ?};

   {? _fld='WYM4'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,4);
      _tab.efld_opt(_we,'enable='+_sval,CON_KG,_fld)
   ?};

   {? _fld='WYM5'
   || _sval:=$exec('be_dim','control',CON_KG.SKID_MB,5);
      _tab.efld_opt(_we,'enable='+_sval,CON_KG,_fld)
   ?}
?};
{? _fld='' | _fld='D'
|| exec('czytaj','#stalesys',{? G.D=#0 || date() || G.D ?},KST,'PROJZAKR');
   _sval:={? +exec('uprawnieniawrap','pkd','Brak wymaganych uprawnień'@,'ZWS_PAR_KPRR','ZWS_PAR_KPRP')
             |
             KST.PROJZAKR='Nie dotyczy'
       || '0'
       || '1'
       ?};
   _tab.efld_opt(_we,'enable='+_sval,G,'PROJEKTY','NR');
   _tab.efld_opt(_we,'enable='+_sval,G,'PROJEKTY','SYM');
   _tab.efld_opt(_we,'enable='+_sval,G,'PROJEKTY','NAZWA')
?};

{? _we='RED' & G.RH<>null()
|| _tab.efld_opt(_we,'enable=0',G);
   _tab.efld_opt(_we,'enable=1',G,'G')
?};

1


\ustal_date_sred
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Ustalenie daty od ktorej nastepuje zmiana spososobu naliczania dodatku sredniotygodniowego.
::       To znaczy od kiedy wprowadzane sa skladniki 7006 oraz 7011.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_param:=exec('get_par','#parametr',248);
{? +_param=10
|| _param:=date(#(4+_param),#(2+(5-_param)),#(_param+2))
|| _param:=date(9999,1,1)
?};
_param


\chk_skid_mb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [2013]
:: OPIS: Procedura sprawdza wypelnienie podstawowych parametrow, wymaganych przy rozliczaniu godzin z projektow.
::   WE: _a - Sposob prezentacji komunikatow o bledach:
::          0 - Bez komunikatow [domyslnie].
::          1 - Komunikaty podczas naliczania listy plac (RAPLS) - wymagana jest prawidlowa zawartosc tabeli P i brak
::              ograniczen (prefiksow) dla tabeli OSOBA. Zawartosc bufora tabeli OSOBA moze ulec zmianie.
::          2 - Komunikaty poza naliczaniem listy plac (FUN).
::   WY: 1 - Parametry sa ustawione.
::       0 - Parametry NIE sa ustawione.
::  OLD: \cfg/godzproj.fml
::----------------------------------------------------------------------------------------------------------------------
_verb:={? var_pres('_a')=type_of(0) || _a ?};

_txt:=
   {? KST_PAR.SKID_MB=null()
   || 'Domyślny model dla controllingu nie został określony.\n'
      'Należy uzupełnić konfirurację systemu.'@
   || ''
   ?};

{? _txt=''
|| 1
|| {? _verb=1 || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,_txt)
   |? _verb=2 || FUN.error(_txt)
   ?};
   0
?}


\g_g_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po redagowaniu pola G.G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? G.win_edit('?')='REDK'
|| exec('g_efld_opt','godziny','*',G,'REDK')
|| 1
?}


\g_f_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po redagowaniu pola G.F
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? G.win_edit('?')='REDK'
|| exec('g_efld_opt','godziny','*',G,'REDK')
|| 1
?}


\g_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed dołączeniem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: konieczny blank przed odświeżeniem pól okna redagowania
G.blank(1);
exec('g_efld_opt','godziny','*',G,G.win_edit('?'));
params_exec('g_act_b','godziny','dołącz')


\g_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed poprawieniem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('g_efld_opt','godziny','*',G,G.win_edit('?'));
params_exec('g_act_b','godziny','popraw')


\g_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed usunięciem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_b','godziny','usuń')


\g_da
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po dołączeniem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('g_efld_opt','godziny','*',G,G.win_edit('?'));
{? params_exec('g_act_a','godziny','dołącz')
|| {? params_exec('g_db','godziny')
   || params_exec('g_da','godziny')
   ?}
?}


\g_pa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po poprawieniem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('g_efld_opt','godziny','*',G,G.win_edit('?'));
params_exec('g_act_a','godziny','popraw')


\g_ua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po usunięciem rekordu G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_a','godziny','usuń')


\g_ub_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed usunięciem grupy rekordów G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_msg:='';
_tab:=G.sel_aget();
{? _tab.first()
|| _dalej:=1;
   {!
   |? {? G.seek(_tab.REF,,1) & G.AUTO='T'
      || _msg:='Znaleziono zapisy wprowadzone na podstawie danych pochodzących z obszaru: Harmonogramy.'@;
         _dalej:=0
      ?};
      _dalej & _tab.next()
   !}
?};
FUN.ask('%1%2%3'[_msg,{? +_msg || '\n' || '' ?},'Usunąć zaznaczone pozycje?'@]
)


\g_kopiuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed akcją "Kopiuj"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_b','godziny','kopiuj')


\g_kopiuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po akcji "Kopiuj"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_a','godziny','kopiuj')


\g_wyrozniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed akcją "Wyróżniki"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_b','godziny','wyróżniki')


\g_wyrozniki_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po akcji "Wyróżniki"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_exec('g_act_a','godziny','wyróżniki')


\g_act_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: formula na akcję przed
::   WE: _a [STRING] - symbol akcji
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_rok:=_msc:=0;
_par:=params_get();
{? var_pres('mp',_par)>100
|| _mp:=_par.mp;
   _int:=_mp.load(exec('kind_internal','#b_port'));
   _rok:={? var_pres('R',_int)=type_of(0)      || _int.R || 0      ?};
   _msc:={? var_pres('M',_int)=type_of(0)      || _int.M || 0      ?}
|? ZMIENNE.RODZAJ='Z'
|| _rok:=VAR.AR;
   _msc:=VAR.AM
|? VAR.O<>null()
|| _rok:=VAR.O().R;
   _msc:=VAR.O().M
|? ZMIENNE.RODZAJ='H'
|| _rok:=A_OKRM.R;
   _msc:=A_OKRM.M
?};

params_set('akcja',_akcja);

_test:="{? ZMIENNE.RODZAJ<>'S' & EDIT_VAR.KOD_DOK<>'K'
        || exec('o_writable','lista_plac',G.LT,1)
        || 1
        ?}";

_zwrot:=0;

{? _akcja='dołącz'
|| {? G.win_edit('?')='REDC'
   || CON_KG.prefix();
      CON_KG.blank(1);
      CON_KG.P:=P.ref();
      CON_KG.SKID_MB:=UD_POM.SKID_MB;
      CON_KG.BL:='N';

      CON_KG.D:=date(_rok,_msc,1);
      UD_POM.JORG:='';
      UD_POM.OKOSZ:='';
      UD_POM.PBUD:='';
      UD_POM.WYM4:='';
      UD_POM.WYM5:=''
   ?};

   G.blank(1);

   {? ZMIENNE.RODZAJ<>'S' & _rok & $_rok<>G.name()+4
   || FUN.emsg('Maska tabeli godzin niezgodna z wybranym rokiem rejestracji godzin.'@);
      {? var_pres('_mp')>100 || _mp.cancel() ?}
   || G.P:=P.ref();
      {? _msc & _msc<>G.M
      || G.M:=_msc
      ?};
      {? ZMIENNE.RODZAJ<>'S' & _rok & _msc
      || G.D:=date(_rok,_msc,1); {? G.D<P.DZA || G.D:=P.DZA ?}
      || G.D:=date(0,0,0)
      ?};
      _data_kk:={? G.D<>date(0,0,0) & G.D<P.DZA || P.DZA || G.D ?};
      G.LT:=
         {? ZMIENNE.RODZAJ='S'
         || {? PAR_SKID.get(395)='L' || VAR.NAZWALIS+3 || '< ---- >' ?}
         |? ZMIENNE.RODZAJ='M' & PAR_SKID.get(396)='L'
         || VAR.NAZWALIS
         || ''
         ?};
      G.KK:=exec('kk_hist','pracownik',P.ref(),_data_kk);
      G.BL:='T';
      G.R:=EDIT_VAR.KOD_DOK;
      G.AUTO:='N';

      UD_TYP.cntx_psh();
      UD_SCH.cntx_psh();
      _zwrot:=G.edit("exec('spr','godziny')") & _test(G.LT);
      UD_SCH.cntx_pop();
      UD_TYP.cntx_pop()
   ?}

|? _akcja='popraw'
||
:: sprawdzenie czy zapis został utworzony przez moduł Harmonogramy czasu pracy
   {? exec('spr_auto','godziny') || return(0) ?};
   {? G.win_edit('?')='REDC'
   || CON_KG.index('CON_GRD'); CON_KG.prefix(G.ref());
      {? CON_KG.first()
      || _find_kh:=1;
         UD_POM.JORG:=CON_KG.PODZORG().SYMBOL;
         UD_POM.OKOSZ:=CON_KG.OB_KOSZ().SYMBOL;
         UD_POM.PBUD:=CON_KG.POZ_BUD().SYMBOL;
         UD_POM.WYM4:=CON_KG.WYM4().SYMBOL;
         UD_POM.WYM5:=CON_KG.WYM5().SYMBOL
      || _find_kh:=0;
         CON_KG.blank();
         UD_POM.JORG:='';
         UD_POM.OKOSZ:='';
         UD_POM.PBUD:='';
         UD_POM.WYM4:='';
         UD_POM.WYM5:=''
      ?}
   ?};
   UD_TYP.cntx_psh();
   UD_SCH.cntx_psh();
   _zwrot:={? _test(G.LT) & G.edit("exec('spr','godziny','popraw')")
           || {? G.win_edit('?')='REDC'
              || CON_KG.R:=G.K; CON_KG.W:=G.G; CON_KG.D:=G.D; CON_KG.BL:=G.BL;
                 {? _find_kh || CON_KG.put() || CON_KG.G:=G.ref(); CON_KG.add() ?}
              ?};
              1
           ?};
   UD_SCH.cntx_pop();
   UD_TYP.cntx_pop()

|? _akcja='usuń'
||
:: sprawdzenie czy zapis został utworzony przez moduł Harmonogramy czasu pracy
   {? exec('spr_auto','godziny') || return(0) ?};
   {? _test(G.LT) & {? G.sel_size()>0 || 1 || FUN.ask('\nUsunąć bieżącą pozycję?'@) ?}
   || {? G.win_edit('?')='REDC'
      || CON_KG.index('CON_GRD'); CON_KG.prefix(G.ref());
         {? CON_KG.first() || {! |? CON_KG.del() !} ?}
      |? G.RH<>null
      || _mask:='cog'+(('0'+($G.RH().G_ROK))+2)+(('0'+($G.RH().G_MC))+2);
         CON_KG.use(_mask);
         CON_KG.index('CON_GRD'); CON_KG.prefix(G.ref());
         {? CON_KG.first() || {! |? CON_KG.del() !} ?}
      ?};
      _zwrot:=1
   ?}

|? _akcja='kopiuj' ||
   _zwrot:=1

|? _akcja='wyróżniki' ||
   _zwrot:=1

?};

_zwrot


\g_act_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: formula po akcji menu okienka
::  OLD: \menu_aa/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};
_rok:=_msc:=0;
_par:=params_get();
{? var_pres('_par')>100 & var_pres('mp',_par)>100
|| _mp:=_par.mp;
   _int:=_mp.load(exec('kind_internal','#b_port'));
   _rok:={? var_pres('R',_int)=type_of(0)      || _int.R || 0      ?};
   _msc:={? var_pres('M',_int)=type_of(0)      || _int.M || 0      ?}
|? VAR.O<>null()
|| _rok:=VAR.O().R;
   _msc:=VAR.O().M
?};

{? _akcja='dołącz'
|| G.add();
   {? G.win_edit('?')='REDC'
   || CON_KG.R:=G.K; CON_KG.W:=G.G; CON_KG.D:=G.D; CON_KG.BL:=G.BL; CON_KG.G:=G.ref(); CON_KG.add()
   ?}; 1

|? _akcja='popraw'
|| G.put()

|? _akcja='usuń'
|| {? EDIT_VAR.KOD_DOK<>'G' & G.RH=null
   || exec('kas_wyr','dok_fks_aut_dok','G',#G.ref(),'X')
   || exec('kas_rgz','godziny')
   ?};
   G.del()

|? _akcja='kopiuj'
|| params_set('rok',_rok,'msc',_msc);

   _popup:=''+
         {? (ZMIENNE.RODZAJ='S' & G.size()) |  ZMIENNE.RODZAJ='M'
         || "params_set(params_get());
             popup(0,'Wybierz opcję',"
             +
             {? G.size()
             ||"'kopiowanie podziału wybranego składnika do innego składnika'@,
                   'Kopiuje podział wybranego składnika do innego składnika'@,
                   \"{? G.size()
                     || exec('kopdoskl','godz_kop')
                     || FUN.info('Brak składników do skopiowania'@)
                     ?}\",
               'kopiowanie podziału wybranego składnika do innych pracowników'@,
                   'Kopiuje podział wybranego składnika do innych pracowników'@,
                   \"{? G.size()
                     || _par:=params_get();
                        exec('kop_skl','godz_kop',1,_par.msc)
                     || FUN.info('Brak składników do skopiowania'@)
                     ?}\",
               '---',,,
             'kopiowanie podziału wszystkich składników do innych pracowników'@,
                   'Kopiuje podział wszystkich składników do innych pracowników'@,
                   \"{? G.size()
                     || _par:=params_get();
                        exec('kop_skl','godz_kop',0,_par.msc)
                     || FUN.info('Brak składników do skopiowania'@)
                     ?}\"
               "
             || ""
             ?}
         || ""
         ?}
          +
          {? ZMIENNE.RODZAJ='M'
          || {? G.size()
             || ","
             || ""
             ?}+
              "
              'kopiowanie podziału wszystkich składników z innego miesiąca'@,
                  'Kopiuje podziały wszystkich składników z innego miesiąca dla pracownika'@,
                  \"_par:=params_get();
                    exec('kopzmies','godz_kop',_par.rok,_par.msc)
                    \"
             "
          || ""
          ?}
          +
          {? (ZMIENNE.RODZAJ='S' & G.size()) | ZMIENNE.RODZAJ='M'
          ||")"
          || ""
          ?};
          {? +_popup
          || ($_popup)()
          || FUN.info('Brak składników do skopiowania'@)
          ?}

|? _akcja='wyróżniki'
|| exec('wyr','wyrozniki','G','X','WER2P')

?}


\wer2p_grp_dsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Wypełnienie okna grupowego
::----------------------------------------------------------------------------------------------------------------------
grp_edisp(R,'WYR')


\spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sprawdzenie poprawnosci zredagowanych danych - akcja rekord po okienek.
::       Wypelnione musza byc pola: data, kwalifikacja, liczba godzin i konto kosztow
::       _a [STRING] - akcja ('dołącz','popraw','usuń')
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') || _a || '' ?};

{? {? ZMIENNE.RODZAJ<>'S' & EDIT_VAR.KOD_DOK<>'K'
   || exec('o_writable','lista_plac',G.LT,1)
   || 1
   ?}
||
   {? {? G.F<>''
      || (_chk:=__CHK.record(G,,'K','KK'))=''
      || {? EDIT_VAR.KOD_DOK='K'
         || {? (_chk:=__CHK.record(G,,'K','KK'))=''
            || {? G.G<=0
               || FUN.emsg('Pole "Procent" musi być wypełnione wartością większą od 0.'@);
                  _chk:='G';
                  0
               || 1
               ?}
            || 0
            ?}
         || {? (_chk:=__CHK.record(G,,'D','K','G'))=''
            || {? G.G<0
               || FUN.emsg('Pole "Liczba godzin" musi być wypełnione wartością większą od 0.'@);
                  _chk:='G';
                  0
               |? P.DZ<>date(0,0,0) & P.DZ<G.D
               || FUN.emsg('Próba rejestracji godzin po dacie zakończenia współpracy.'@);
                  _chk:='D';
                  0
               || 1
               ?}
            || 0
            ?}
         ?}
      ?}
   ||
:     kontrola przekroczenia limitu nadgodzin PR/WRT/KALI/8.40/0005
      {? #(KST.R_NLIM-3)
      || _limit:=(#(KST.R_NLIM-3)+#(KST.R_NLIM+2)/60)$2
      || _limit:=150
      ?};
      _suma:=0;
      _suma_pr:={? EDIT_VAR.KOD_DOK='K' || G.G || 0 ?};
      _kod:=G.K;
      _mc:=G.M;
      _ref:={? _akcja='popraw' || G.ref() ?};

      {? EDIT_VAR.KOD_DOK='G' & (G.K().RN=55 | G.K().RN=56 | G.K().RN=66 |
                                 G.K().RN=7008 | G.K().RN=7009 | G.K().RN=7011)
      || _suma+=G.G;
         _rok:=G.D~1;
         _rok_wst:=(G.D~1)-1;
         _rok_wpr:=(G.D~1)+1;
         _data_od:=date(G.D~1,1,1);
         _data_do:=date(G.D~1,12,31);
         _g_ind:=G.index('?');
         G.cntx_psh();
         G.use('godz'+$_rok);
         G.index('PRRD');
         _skl:=obj_new(6);
         _skl[1]:=55; _skl[2]:=56; _skl[3]:=66; _skl[4]:=7008; _skl[5]:=7009; _skl[6]:=7011;
         {! _ind:=1..3
         |!
::          pierwszy obrot petli prefiksuje biezaca maske na rubryke 55
::          drugi obrot petli prefiksuje biezaca maske na rubryke 56
::          trzeci obrot petli zmienia maske z roku poprzedniego i prefiksuje ja na rubryke 55
::          czwarty obrot petli prefiksuje ustawiona juz maske poprzedniego roku na rubryke 56
            {? _ind=2
            || G.use('godz'+$_rok_wst);
               G.index(_g_ind);
               G.cntx_psh();
               G.index('PRRD')
            |? _ind=3
            || G.use('godz'+$_rok_wpr);
               G.index(_g_ind);
               G.cntx_psh();
               G.index('PRRD')
            ?};
            {! _rub:=1..6
            |! G.prefix(P.ref(),'G',_skl[_rub]);
               {? G.first()
               || {!
                  |?
::          sprawdza czy nadgodzina jest w danym roku i czy nie jest to godzina wlasnie poprawiana
                     {? G.D>=_data_od & G.D<=_data_do & G.ref()<>_ref
                     || _suma+=G.G
                     ?};
                     G.next()
                  !}
               ?}
            !};
::          przywrócenie kontestu w maskach z roku poprzedniego i następnego
            {? _ind=2 | _ind=3
            || G.cntx_pop()
            ?}
         !};
         G.cntx_pop()
      ?};

      {? EDIT_VAR.KOD_DOK='K'
      || G.cntx_psh;
         G.index('PODZ_SL');
         _lista:=
            {? ZMIENNE.RODZAJ='S'
            || {? PAR_SKID.get(395)='L' || VAR.NAZWALIS+3 || '< ---- >' ?}
            |? ZMIENNE.RODZAJ='M' & PAR_SKID.get(396)='L'
            || VAR.NAZWALIS
            || ''
            ?};
         G.prefix(P.ref,'K',_lista,);
         {? G.first()
         || {!
            |? {? G.ref()<>_ref & G.K=_kod & {? ZMIENNE.RODZAJ='M' || G.M=_mc || 1 ?}
               || _suma_pr+=G.G
               ?};
               G.next()
            !}
         ?};
         G.cntx_pop()
      ?};

      {? _limit<_suma &
         ~FUN.ask('Przekroczono dopuszczalną liczbę %1 nadgodzin.'@[$_limit]+'\n'+
                  'Czy chcesz zaakceptować wprowadzony zapis?'@)
      || _chk:='G'
      ?}
   ?};
   {? EDIT_VAR.KOD_DOK<>'K' & _chk='' & G.RH=null
   || {? +G.LT & (2+(1-G.LT)<>G.name()+2 | 2+(3-G.LT)<>('0'+$G.M)+2)
      || _miesiac:=date(#(G.name()+4),G.M,1)$8;
         FUN.emsg('Należy wybrać listę płac zgodną z miesiącem rejestrowanych godzin (%1).'@[_miesiac]);
         _chk:='LT'
      ?};
      {? exec('czy_lista_z_nkor','nieobecnosc',,G.LT)
      || {? ~FUN.ask('Wprowadzona lista płac zawiera korygowane lub wycofane nieobecności.'@+'\n'+
                     'Lista nie będzie ponownie obliczona.'@+'\n'+'Czy kontynuować?'@)
         || _chk:='LT'
         ?}
      ?}
   ?};
   {? EDIT_VAR.KOD_DOK='K' & _chk='' & G.RH=null
   || {? G.F<>'' & G.G>0
      || FUN.emsg('Niedopuszczalne jest podanie zarówno formuły na wartość jak i procentu!'@);
         _chk:='F'
      |? G.G>100
      || FUN.emsg('Wartość pola procent nie może być większa od 100!'@);
         _chk:='G'
      |? _suma_pr>100
      || FUN.emsg('Suma z pola procent dla składnika "%1" nie może być większa od 100!'@[G.K().RT]);
         _chk:='G'
      ?}
   ?};
   _chk
?}


\spr_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Sprawdzenie czy zapis był wprowadzony przez harmonogramy czasu pracy jeżeli akcja nie jest grupowa.
::----------------------------------------------------------------------------------------------------------------------
{? ~G.sel_size()
|| G.AUTO='T'
   &
   ~FUN.ask('%1\n%2'
      [  'Zapis wprowadzony na podstawie danych pochodzących z obszaru: Harmonogramy.'@,
         'Czy kontynuować?'@
      ]
   )
|| 0
?}


\spr_pr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Sprawdzanie czy suma wprowadzonych procentów dla rubryki jest mniejsza od 100%
::   WE: _a [STRING] - Tytuł zakładki
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_title:={? var_pres('_a')=type_of('') || _a || '' ?};

R.cntx_psh();
G.cntx_psh();
OSOBA.cntx_psh();
:: tworzymy nową unikatowa zmienna globalna i przypisujemy do niej obiekt kalsy JCQ
_var:=VAR_DEL.new(,"obj_new(@.CLASS.JCQ)");
_KOMM:=($_var)();
_KOMM.init(255);
{? +_title
|| _KOMM.sect_beg(_title,9)
?};
_KOMM.sect_beg('%1 %2 [nr teczki - %3]'[P.OSOBA().NAZWISKO, OSOBA.PIERWSZE, form(P.T)],'xwin16.png:100');

_wynik:=0;
{? G.first()
|| _size:=G.size();
   _nr:=obj_new(_size);
   _procent:=obj_new(_size);
   _formula:=obj_new(_size);
   {! _i:=1.._size
   |! _nr[_i]:=''; _procent[_i]:=_formula[_i]:=0
   !};

   _buf:=0;
   {!
   |? _jest:=0;
      {! _i:=1.._buf
      |? {? _nr[_i]<>G.K().RT || 1 || _jest:=1; 0 ?}
      !};
      {? ~_jest || _buf+=1; _i:=_buf ?};
      _nr[_i]:=G.K().RT;
      _procent[_i]+=G.G;
      {? G.F<>''
      || _formula[_i]+=1
      ?};
      G.next()
   !};

   {! _i:=1.._buf
   |!
      {? ~_formula[_i] & _procent[_i]<100
      || _komm:='Suma pola "Procent" dla składnika: "%1" nie może być mniejsza od 100.'@[_nr[_i]];
         {? _komm<>'' & _KOMM.find_msg(_komm)=0 || _KOMM.add(_komm,4) ?};
         _wynik:=1
      ?}
   !}
|| _wynik:=0
?};

{? +_title
|| _KOMM.sect_end()
?};
_KOMM.sect_end();
:: jezeli jest błąd to wyświetl komma
{? _wynik
|| _KOMM.select(,,,,,1)
?};
:: usuwamy dynamicznie powolana zmienna globalna
{? var_pres('_var')>0 || VAR_DEL.delete(_var) ?};

OSOBA.cntx_pop();
G.cntx_pop();
R.cntx_pop();
_wynik


\kas_rgz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: kasowanie rozliczenia godzin podczas usuwania rekordu z tabeli godzin
::  OLD: \kas_rgz/roz_godz.fml
::----------------------------------------------------------------------------------------------------------------------
R_GODZ.index('R_GODZ');
R_GODZ.prefix(G.ref());
{? R_GODZ.first()
|| {!
   |? R_GODZ.del()
   !}
?}


\ust_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
::  MOD: MicKoc 10.11.2021
:: OPIS: Założenie prefiksu w zależnosci od wartości FLAGA.
::       Wykorzystywane w definicji cech dla składnika płacowego
::----------------------------------------------------------------------------------------------------------------------
{? FLAGA=1
|| {? PAR_SKID.get(396)='L'
   || G.prefix(exec('ref_firma','ustawienia'),'K',O.M,'L'+($O.R+2)+form(O.M,-2)+O.T().T,R.RN)
   || G.prefix(exec('ref_firma','ustawienia'),'K',O.M,'',R.RN)
   ?}
|| {? PAR_SKID.get(395)='L'
   || G.prefix(exec('ref_firma','ustawienia'),'K',O.T().T,R.RN)
   || G.prefix(exec('ref_firma','ustawienia'),'K','< ---- >',R.RN)
   ?}
?};
G.first()


\kw_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
::  MOD: MicKoc 10.11.2021
:: OPIS: Pobranie i wyliczenie kwoty dla mechanizmu podziału kosztów w definicji cechy dla składnika płacowego
::----------------------------------------------------------------------------------------------------------------------
G.P();
_ok:=_kw:=0;
{? FLAGA=1
|| _ok:=1
|| _ok:=~__TAB.find_key(#P.ref,'G')
?};
{? _ok
|| {? PR_KWOTA=0
   || PR_KWOTA:=KWOTA:=FUNKCJE.L(G.K().RN)
   ?}
?};
: projekt
{? _ok & PROJEKT<>G.PROJEKTY || PROJEKT:=G.PROJEKTY ?};

{? _ok & PR_KWOTA
|| _nowy:=0;
   _p:=G.P;
   _komm:=obj_new(3);
   {! _ind:=1..obj_len(_komm) |! _komm[_ind]:='' !};
   _uwagi:=0;

   P.cntx_psh();
   OSOBA.cntx_psh();
   _nazwisko:=G.P().OSOBA().NAZWISKO;
   _imie:=OSOBA.PIERWSZE;
   _teczka:=form(P.T);
   OSOBA.cntx_pop();
   P.cntx_pop();

   _f:={? G.F='' || G.G || {? 3+G.F='RCP' || G.G || ($G.F)() ?}?};
   {? var_pres('_f')<>1
   || _komm[1]:='Nieprawidłowy typ wyniku formuły'@;
      _uwagi:=1;
      _f:=0
   || PR_PROC+=_f;
      {? _f>100 || _f:=0 ?}
   ?};

   G.cntx_psh();
   {? G.next()
   || _nowy:=G.P<>_p
   || _nowy:=1
   ?};
   G.cntx_pop();

   {? _nowy
   || _skladnik:=$G.K().RN+' - '+G.K().RT;
      _rodzaj:={? G.name()='godzstal' || 'Stały podział kosztów'@ || 'Miesięczny podział kosztów'@ ?};
      {? PR_PROC<100
      || _komm[2]:='[%1 - składnik "%2"] - Suma z pola "Procent" jest mniejsza od 100.'@ [_rodzaj,_skladnik];
         _uwagi:=1
      ?};
      {? PR_PROC>100
      || _komm[3]:='[%1 - składnik "%2"] - Przekroczono wskaźnik procentowy.'@ [_rodzaj,_skladnik];
         _uwagi:=1
      ?};
      _kw:=KWOTA;
      PR_KWOTA:=KWOTA:=0;
      PR_PROC:=0
   || _kw:=PR_KWOTA*_f/100$2;
      KWOTA-=_kw
   ?};

   {? _kw<>0 & FLAGA=1
   || __TAB.blank();
      __TAB.PRAC:=#P.ref();
      __TAB.RODZAJ:='G';
      __TAB.add()
   ?};

:: dodanie komunikatów do obiektu KOMM
   {? _uwagi
   || _section:=0;
      _newSection:=0;
      _sectionExist:=0;
      __TAB.cntx_psh();
      {? __TAB.find_key(#P.ref,'G')
      || _section:=__TAB.SECTION;
         _sectionExist:=1
      ?};
      {? _section=0
      || _newSection:=KOMM.sect_beg('Skontroluj wyliczenia dla: %1 %2 [nr teczki - %3]'@ [_nazwisko,_imie,_teczka],
                                    'xwin16.png:100')
      ?};
      {! _ind:=1..obj_len(_komm)
      |! {? _komm[_ind]<>''
         || _lp_add:=KOMM.add(_komm[_ind],4);
            {? _section || KOMM.chngroot(_lp_add,_section) ?}
         ?}
      !};
      {? _section=0
      || KOMM.sect_end()
      ?};
      {? _sectionExist & _section=0
      || __TAB.SECTION:=_newSection;
         __TAB.put()
      ?};
      __TAB.cntx_pop()
   ?}
?};
_kw


\ustaw_conkg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Wypelnienie danych tabeli CON_KG danymi z tabeli G
::   WE: _a - ref tabeli P
::       _b - data godziny
::       _c - wskazanie na model
::  OLD: \ustaw_conkg/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
CON_KH.index('CON_KHP'); CON_KH.prefix('P',_a,_c);
{? CON.T_MBP.first() & CON_KH.first & CON_KH.find_le(_b)
|| {!
   |? {? ~($('CON_KG.'+CON.T_MBP.POLE))()
      || {? CON.T_MBP.UD_TYP='PODZORG'
         || ($('CON_KG.'+CON.T_MBP.POLE))():=exec('h_find','pracownik','WYDZIAL',_b)
         || ($('CON_KG.'+CON.T_MBP.POLE))():=($('CON_KH.'+CON.T_MBP.POLE))()
         ?}
      ?};
      ($('UD_POM.'+CON.T_MBP.UD_POM))():=($('CON_KG.'+CON.T_MBP.POLE+'().SYMBOL'))();
      CON.T_MBP.next()
   !}
?}


\akt_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS:  Aktualizuje tabelę przepracowanych godzin pracownika na podstawie zapisów zawartych w tabeli dni pracy i ich
::        kwalifikacji godzin.
::   WE: _a - [INTEGER] Rok dla okresu miesięcznego.
::       _b - [INTEGER] Miesiąc dla okresu miesięcznego.
::       _c - [INTEGER] Rok kwalifikacji dla okresu innego.
::       _d - [INTEGER] Miesiąc kwalifikacji dla okresu innego.
::       _e - Funkcja wolana dla zamknięcia okresu.
::       _f - Aktualizacja z uwględnieniem znacznika rozliczonego miesiąca.
::       _g - [DATE] Data od.
::       _h - [DATE] Data, do której przenosimy godziny do G.
::       _i - Blokowanie kwalifikacji dni przepracowanych.
::       _j - Numer rubryki dla zamknięcia okresu.
::   WY: Miesiąc
::----------------------------------------------------------------------------------------------------------------------
_rok:={? var_pres('_a')=1 || _a || VAR_EDIT.ROK ?};
_msc:={? var_pres('_b')=1 || _b || VAR_EDIT.MSC ?};
_rokKwal:={? var_pres('_c')=1 || _c || _rok ?};
_mscKwal:={? var_pres('_d')=1 || _d || _msc ?};
_zamkOkr:={? var_pres('_e')>0 || _e || 0 ?};
_chkMR:={? var_pres('_f')=1 || _f || 0 ?};
_data_od:={? var_pres('_g')=type_of(date()) & _g>=date(_rok,_msc,1) || _g || date(_rok,_msc,1) ?};
_data_do:={? var_pres('_h')=type_of(date()) & _h<=date(_rok,_msc,0) || _h || date(_rok,_msc,0) ?};
_blokada:={? var_pres('_i')=1 || _i || 0            ?};

_Mask:='godz'+(('0000'+$_rok)+4);
{? G.name()<>_Mask || G.use(_Mask) ?};
G.cntx_psh();
_jest_okres:=exec('jest_okres','okres');
_Mask:=MASK.MaskZbio(_rok,_msc);
_MaskKwal:='r_kg'+_Mask;
_MaskPrac:='r_pd'+_Mask;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? R_PRACDN.name()<>_MaskPrac || R_PRACDN.use(_MaskPrac) ?};
{? R_KWGODZ.name()<>_MaskKwal || R_KWGODZ.use(_MaskKwal) ?};
{? KST.R_KG
|| _tab:=tab_tmp(1,'LP','INTEGER','LP','REF','INTEGER','REF');
   R_KWGODZ.index('DATA_RUB');
   R_WYK.index('R_WYKDN');
   R.index('RUBKOD');
   R.prefix();
   R_PRACDN.prefix(P.ref());
   {? R_PRACDN.last()
   || {!
      |? {? (R_PRACDN.DT>=P.DZA) & (P.DZ=#0 | R_PRACDN.DT<=P.DZ)
         || {? _blokada
            || R_PRACDN.BL:='T';
               R_PRACDN.put()
            ?};
            {? _zamkOkr
            || {? R_PRACDN.DT>=A_OKR.OD & R_PRACDN.DT<=A_OKR.DO
               || echo('Trwa przenoszenie danych do tabeli przepracowanych godzin %1'@[$R_PRACDN.DT]);
                  G.index('MSCKW_KD');
                  G.prefix(P.ref(),_msc,'G');
                  R_KWGODZ.prefix(P.ref(),R_PRACDN.DT); _czyprac:=1;
                  {? R_KWGODZ.first()
                     &
                     (~_chkMR
                     |
                     ({? _jest_okres
                     || R_KWGODZ.MR>=A_OKR.OD & R_KWGODZ.MR<=A_OKR.DO
                     || R_KWGODZ.MR=date(_rokKwal,_mscKwal,0)
                     ?}
                     |
                     R_KWGODZ.MR=#0))
                  || _Rub:=_Kont:=null();
                     {!
                     |? _odb:=_odb_nad:=time(0,0,0);
                        _odb_date:=date(0,0,0);
                        {? R_KWGODZ.KW().RN=58 | R_KWGODZ.KW().RN=64 | R_KWGODZ.KW().RN=65 |
:: Obsługa godzin firmowych do przeniesienia - tylko posiadające atrybut 8313 "Rozliczane podczas zamknięcia okresu"
                           __RUB.sys_attr(R_KWGODZ.KW,8313,R_PRACDN.DT)
                        || R_WYK.prefix(P.ref(),R_PRACDN.DT,R_KWGODZ.KW().RN,R_KWGODZ.KK);
                           {? (R_KWGODZ.KW().RN=58 | R_KWGODZ.KW().RN=65) & R_WYK.first()
                           || {!
                              |? _odb_nad+=R_WYK.G;
                                 _odb+=R_WYK.GO;
                                 _odb_date:=R_WYK.DO;
                                 R_WYK.next()
                              !};
                              {? R_KWGODZ.KW().RN=58
                              || R_KWGODZ.cntx_psh();
                                 MASK.Use('R_KWGODZ',R_WYK.DO~1,R_WYK.DO~2);
                                 R_KWGODZ.index('DATA_RUB');
                                 R_KWGODZ.prefix(P.ref(),R_WYK.DO,67);
                                 {? R_KWGODZ.first()
                                 || _odb:=time(0,0,0)
                                 ?};
                                 R_KWGODZ.cntx_pop()
                              ?}
                           ?};
                           _MaskGodz:='godz'+(('0000'+$_rokKwal)+4);
                           {? G.name()<>_MaskGodz || G.use(_MaskGodz) ?};
                           _miesiac:=_mscKwal;
                           G.index('MSCKW_KD');
                           G.prefix(P.ref(),_miesiac,'G');
                           _Test:=(_Rub=R_KWGODZ.KW & (_Kont:=R_KWGODZ.KW));
: Dla potencjalnych średniotygodniowych nie wykazujemy odbioru, gdyż info zostało odpisane podczas zamknięcia miesiąca
: jako godziny 65 lg wynagrodzenie średniotygodniowe
                           {? R_KWGODZ.KW().RN=65
                           || _odb:=time(0,0,0);
                              _odb_date:=#0
                           ?};

                           exec('zapisz','godziny',
                              R_KWGODZ.KW().RN,
                              _miesiac,
                              R_KWGODZ.GODZ-_odb_nad,
                              _Test,
                              R_KWGODZ.KK,
                              _odb,
                              _odb_date,
                              _zamkOkr
                           );
                           _Rub:=R_KWGODZ.KW;
                           _Kont:=R_KWGODZ.KW;
                           {? R_KWGODZ.KW().RN=58 & R_KWGODZ.MR=#0
                           || R_KWGODZ.MR:=date(_rokKwal,_mscKwal,0)
                           ?};
                           {? ~R_KWGODZ.put(1)
                           || FUN.error('Pracownik: (%1) %2 %3\n'
                                        'Ponowne zamknięcie okresu, zweryfikuj kwalifikację godzin'@
                                        [form(P.T),P.OSOBA().NAZWISKO,OSOBA.PIERWSZE])
                           ?}
                        ?}; R_KWGODZ.next()
                     !}
                  ?}
               ?}
            || {?  R_PRACDN.DT~1=_rok & R_PRACDN.DT~2=_msc
                   &
                   R_PRACDN.DT>=_data_od & R_PRACDN.DT<=_data_do
               || echo('Trwa przenoszenie danych do tabeli przepracowanych godzin %1'@[$R_PRACDN.DT]);
                  G.index('MSCKW_KD');
                  G.prefix(P.ref(),_mscKwal,'G');
                  R_KWGODZ.prefix(P.ref(),R_PRACDN.DT); _czyprac:=1;

                  {? R_KWGODZ.first()
                  || _tab.erase();
                     {!
                     |? _spr_godz:=0;
                        {? R_KWGODZ.MR=#0 & R_KWGODZ.DZ~2<>_mscKwal
                        || _rozn:=exec('roznica','prc_rozlicz',
                              date(R_KWGODZ.DZ~1,R_KWGODZ.DZ~2,1),
                              date(_rokKwal,_mscKwal,1)
                           );
                           G.cntx_psh();
                           {! _ind:=1.._rozn
                           |! _msc_g:=_mscKwal;
                              _rok_g:=date(_rokKwal,_mscKwal-_ind,1)~1;
                              _MaskGodz:='godz'+(('0000'+$_rok_g)+4);
                              {? G.name()<>_MaskGodz || G.use(_MaskGodz) ?};
                              G.index('MSCDKW');
                              _rubryka:={? R_KWGODZ.KW().RN=58 || 65 || R_KWGODZ.KW().RN ?};
                              G.prefix(P.ref(),_msc_g,'G',R_KWGODZ.DZ,_rubryka);
                              _spr_godz+=G.first()
                           !};
                           G.cntx_pop()
                        ?};
                        {? ~_spr_godz
                        || {? R_KWGODZ.KW().RN=56 || _tab.LP:=1
                           |? R_KWGODZ.KW().RN=55 || _tab.LP:=2
                           |? R_KWGODZ.KW().RN=69 || _tab.LP:=3
                           |? R_KWGODZ.KW().RN=68 || _tab.LP:=4
                           |? R_KWGODZ.KW().RN=64 || _tab.LP:=5
                           |? R_KWGODZ.KW().RN=65 || _tab.LP:=6
                           |? R_KWGODZ.KW().RN=54 || _tab.LP:=7
                           || _tab.LP:=0
                           ?};
:: Obsługa godzin firmowych do przeniesienia - tylko posiadające atrybut 8312 "Rozliczane podczas zamknięcia miesiąca"
                           {? ~_tab.LP & __RUB.sys_attr(R_KWGODZ.KW,8311,R_PRACDN.DT)
                           || {? __RUB.sys_attr(R_KWGODZ.KW,8312,R_PRACDN.DT)
                              || _tab.REF:=#R_KWGODZ.ref();
                                 _tab.add(1)
                              ?}
                           || _tab.REF:=#R_KWGODZ.ref();
                              _tab.add(1)
                           ?}
                        ?};
                        R_KWGODZ.next()
                     !};
                     {? _tab.first()
                     || _Rub:=_Kont:=null();
                        {!
                        |? {? R_KWGODZ.seek(_tab.REF,)
                           || _odb:=_odb_nad:=time(0,0,0);
                              _odb_date:=date(0,0,0);
                              _ok:=0;
                              {? (~_chkMR | (R_KWGODZ.MR=date(_rokKwal,_mscKwal,0) | R_KWGODZ.MR=#0))
                              || {? R_KWGODZ.KW().RN=58
                                 || G.index('MSCKW_KD');
                                    G.prefix(P.ref(),_mscKwal,'G');
                                    _Test:=(_Rub=R_KWGODZ.KW & (_Kont:=R_KWGODZ.KW));
                                    exec('zapisz','godziny',65,_mscKwal,R_KWGODZ.GODZ,_Test,R_KWGODZ.KK);
                                    {? R_KWGODZ.MR=#0 || R_KWGODZ.MR:=date(_rokKwal,_mscKwal,0)?};
                                    {? ~R_KWGODZ.put(1)
                                    || FUN.error('Pracownik: (%1) %2 %3\n'
                                        'Ponowne zamknięcie miesiąca, zweryfikuj kwalifikację godzin'@
                                        [form(P.T),P.OSOBA().NAZWISKO,OSOBA.PIERWSZE])
                                    ?};
                                    _Rub:=R_KWGODZ.KW;
                                    _Kont:=R_KWGODZ.KW
                                 ?};
                                 {? R_KWGODZ.KW().RN=55 | R_KWGODZ.KW().RN=56 | (R_KWGODZ.KW().RN=58 & ~_jest_okres)
                                 || R_WYK.prefix(P.ref(),R_PRACDN.DT,R_KWGODZ.KW().RN,R_KWGODZ.KK);
                                    {? R_WYK.first()
                                    || {!
                                       |? _odb_nad+=R_WYK.G;
                                          _odb+=R_WYK.GO;
                                          _odb_date:=R_WYK.DO;
                                          R_WYK.next()
                                       !}
                                    ?};

                                    _MaskGodz:='godz'+(('0000'+$_rokKwal)+4);
                                    _ok:=1;
                                    {? G.name()<>_MaskGodz || G.use(_MaskGodz) ?};
                                    _miesiac:=_mscKwal
                                 || {? (R_KWGODZ.KW().RN<>55 & R_KWGODZ.KW().RN<>56 & R_KWGODZ.KW().RN<>58)
                                    || _MaskGodz:='godz'+(('0000'+$_rokKwal)+4);
                                       _ok:=1;
                                       {? G.name()<>_MaskGodz || G.use(_MaskGodz) ?};
                                       _miesiac:=_mscKwal;
                                       {? R_KWGODZ.KW=KST.R_KG & R_KWGODZ.GODZ<>*0 || _czyprac:=0 ?}
                                    ?}
                                 ?};
                                 {? _ok
                                 || G.index('MSCKW_KD');
                                    G.prefix(P.ref(),_miesiac,'G');
                                    _Test:=(_Rub=R_KWGODZ.KW & (_Kont:=R_KWGODZ.KW));
                                    exec('zapisz','godziny',
                                       R_KWGODZ.KW().RN,
                                       _miesiac,
                                       R_KWGODZ.GODZ-_odb_nad,
                                       _Test,
                                       R_KWGODZ.KK,
                                       _odb,
                                       _odb_date
                                    );
                                    {? R_KWGODZ.MR=#0 || R_KWGODZ.MR:=date(_rokKwal,_mscKwal,0) ?};
                                    {? ~R_KWGODZ.put(1)
                                    || FUN.error('Pracownik: (%1) %2 %3\n'
                                        'Ponowne zamknięcie miesiąca, zweryfikuj kwalifikację godzin'@
                                        [form(P.T),P.OSOBA().NAZWISKO,OSOBA.PIERWSZE])
                                    ?};
                                    _Rub:=R_KWGODZ.KW;
                                    _Kont:=R_KWGODZ.KW
                                 ?}
                              ?}
                           ?};
                           _tab.next()
                        !}
                     ?}
                  ?}
               ?}
            ?}
         ?};
         R_PRACDN.prev()
      !}; echo()
   ?};
   VAR_DEL.delete('_tab')
?};
G.cntx_pop();
_mscKwal


\zamk_okr_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK 12.10
:: OPIS: Przeniesienie danych o przekroczeniach średniotygodniowych do kartoteki rozliczenia godzin
::       Kontekst A_OKR, A_OKRP, P musi być ustawiony
::   WE:  _a  [INTEGER] - (0) normalne zamknięcie okresu(domyślnie); (1) wymuszone przeniesienie godzin dla pracownika
::       [_b] [OBJECT]  - objekt z polami:
::                       {r_rozl} - rok rozliczeniowy
::                       {m_rozl} - miesiąc rozliczeniowy
::                       {r_nast} - rok dla następnego miesiąca po zamykanym okresie
::                       {m_nast} - miesiąc następny po zamykanym okresie
::                       {wyb}    - wybór użytkownika - czy zapisujemy godziny w:
::                                 (0) - rezygnacja z wyboru
::                                 (1) - ostatnim miesiącu okresu rozliczeniowego
::                                 (2) - następnym po ostatnim miesiącu okresu rozliczeniowego?
::----------------------------------------------------------------------------------------------------------------------
_force:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _force
|| {? ~FUN.ask('Funkcja przenosi dane o przekroczeniach średniotygodniowych do kartoteki rozliczenia godzin.\n'
               'Czy na pewno kontynuować?'@)
   || return(0)
   ?};
   {? A_OKRP.S_PLAN='O'
   || FUN.emsg('Planowanie okresu dla pracownika ma status "Otwarty".\nNależy zamknąć planowanie dla pracownika.'@);
      return(0)
   ?};
   {? A_OKRP.S_PLAN='X'
   || FUN.emsg('Informacje były wcześniej przenoszone.\nNależy odblokować przenoszenie danych.'@);
      return(0)
   ?};
   {? A_OKR.S='Z'
   || {? ~FUN.ask('Okres rozliczeniowy ma status "Zamknięty".\nCzy na pewno kontynuować?'@)
      || return(0)
      ?}
   ?};
: weryfikacja odbiorow
   _tab:=exec('zwrot_bufor','godziny');
   exec('zwrot_odb_okres','godziny',_tab,A_OKRP.P);
   {? _tab.first()
   || FUN.emsg('W zamykanym okresie znajdują się pracownicy z odbiorem dni wolnych podczas nieobecności.\n\n'
               'Należy zweryfikować wykazane odbiory.'@);
      _ident:='zwrot_odbioru';
      _wer:=_tab.mk_sel('Pracownicy z odbiorem w dzień wolny'@,,0,_ident);
      _tab.win_fld(_wer,,'NAZWISKO',,,20,,,'Nazwisko'@);
      _tab.win_fld(_wer,,'IMIE',,,15,,,'Imię'@);
      _tab.win_fld(_wer,,'WYDZIAL',,,10,,,'Wydział'@);
      _tab.win_fld(_wer,,'T',,,9,,,'Teczka'@);
      _tab.win_fld(_wer,,'DO',,,10,,,'Data odbioru'@);
      _tab.win_fld(_wer,,'G',,,10,,,'Ilość godzin'@);
      _tab.win_fld(_wer,,'NB',,,20,,,'Nieobecność'@);
      _tab.win_fld(_wer,,'N_OD',,,10,,,'Początek'@);
      _tab.win_fld(_wer,,'N_DO',,,10,,,'Koniec'@);
      _tab.win_sel(_wer);
      _tab.select(,,,'W');
      FUN.emsg('Istnieją odbiory w dni wolne.\n'
               'Należy zmienić dzień odbioru lub wykasować odbiór dnia wolnego w celu przeniesienia do wyplaty.\n'
               'Procedury zamknięcia okresu nie można kontynuować.'@);
      VAR_DEL.delete('_tab','_wer');
      return(0)
   ?};

: ewentualne kasowanie założonych miesięcy okresu dla pracownika wybiegających poza datę zatrudnienia
   {? exec('akt_plan_m_prac','okres')
   || A_OKRP_M.cntx_psh();
      A_OKRP_M.index('A_OKRPM');
      A_OKRP_M.prefix(A_OKRP.ref(),A_OKRP.DO~1,A_OKRP.DO~2);
      {? A_OKRP_M.first()
      || {? A_OKRP_M.STATUS='Z' | A_OKRP_M.STATUS='X'
         || A_OKRP.S_PLAN:='Z'
         || A_OKRP.S_PLAN:='O'
         ?};
         A_OKRP.put(1)
      ?};
      A_OKRP_M.cntx_pop()
   ?};
:: ustalenie roku i miesiąca rozliczenia
   {? var_pres('_res')>0 || obj_del(_res) ?};
   _res:=exec('rok_msc_rozl','godziny',A_OKRP.DO);
   {? _res.wyb=0 || return(0) ?};
   {? exec('lista_sum_zamk','godziny',_res.r_rozl,_res.m_rozl,1)
   || return(0)
   ?};
   obj_del(_tab);
   &_tab;
   _rok:=A_OKRP.DO~1+1; _roczek:=_rok; _ile:=0;
   {!
   |? {? _rok<>_roczek
      || _ile+=1
      ?};
      _rok-=1;
      _rok>=A_OKRP.OD~1
   !};
   _sql:='select distinct G.M M, G.LT, SUBSTR(G.REFERENCE,5,4) AS ROK ';
   _sql+='from A_OKRP join OSOBA join @G using(A_OKRP.P,G.P) ';
   _sql+='where A_OKRP.REFERENCE=\':_a\'  and G.F=\':_b\' and ';
   _sql+='(G.REFERENCE like \'godz'+$(A_OKRP.DO~1+1)+'%\'';
   {? _ile
   || {! _ind:=1.._ile |! _sql+=' or G.REFERENCE like \'godz'+$(A_OKRP.DO~1+1-_ind)+'%\'' !}
   ?};
   _sql+=') ';
   _sql+='order by 1,2';
   _tab:=sql(_sql,$A_OKRP.ref(),'RCP_'+$A_OKR.ref());
   {? _tab.first()
   || {!
      |? {? #_tab.ROK=_res.r_rozl & _tab.M=_res.m_rozl || _tab.del(,1)=2 || _tab.next() ?}
      !}
   ?};
   {? _tab.first()
   || FUN.emsg('Zostały znalezione dane odnośnie zamknięcia wybranego okresu\n'
               'w miesiącu rozliczenia innym niż wybrany.\n'
               'Operacja zamknięcia okresu dla wybranego pracownika zostanie zakończona.'@);
      return(0)
   ?}
||
   _res:={? var_pres('_b')=117 || _b || return(0) ?}
?};

_rozn:=exec('roznica','prc_rozlicz',A_OKRP.OD,A_OKRP.DO);

__H_norm:=__H_pnd:=n_norma:=__bez_n:=__norm_s:=__norm_p:=__wyn_d:=0;
_tab_wym:=exec('wymiar_h','okres',A_OKRP.OD,A_OKRP.DO);
{? _tab_wym.first()
|| _H_norm:=_H_pnd:=_bez_n:=_norm_s:=_norm_p:=_wyn_d:=0;
   {!
   |? {? _tab_wym.DO=#0 | _tab_wym.DO>A_OKRP.DO || _tab_wym.DO:=A_OKRP.DO ?};
      {? _tab_wym.OD<A_OKRP.OD || _tab_wym.OD:=A_OKRP.OD ?};
      exec('oblicz','okres',1,1,,_tab_wym.OD,_tab_wym.DO);
      __bez_n:=__H_norm:=__H_pnd:=__norm_s:=__norm_p:=__wyn_d:=0;
      n_norma+=exec('nad_norma_prac','okres',_tab_wym.WY,_tab_wym.DOP_ST,_tab_wym.OD,_tab_wym.DO);
      _H_norm+=__H_norm;
      _H_pnd+=__H_pnd;
      _bez_n+=__bez_n;
      _norm_s+=__norm_s;
      _norm_p+=__norm_p;
      _wyn_d+=__wyn_d;
      _tab_wym.next
   !};
   __H_norm:=_H_norm;
   __H_pnd:=_H_pnd;
   __bez_n:=_bez_n;
   _norm_s+=__norm_s;
   _norm_p+=__norm_p;
   __wyn_d:=_wyn_d;
   {? __bez_n>0
   || {? n_norma>__bez_n
      || n_norma-=__bez_n;
         __bez_n:=0
      || __bez_n-=n_norma;
         n_norma:=0
      ?};
      {? __bez_n>0
      || {? __H_norm>__bez_n
         || __H_norm-=__bez_n;
            __bez_n:=0
         || __bez_n-=__H_norm;
            __H_norm:=0
         ?};
         {? __bez_n>0
         || {? __H_pnd>__bez_n
            || __H_pnd-=__bez_n;
               __bez_n:=0
            || __bez_n-=__H_pnd;
               __H_pnd:=0
            ?}
         ?}
      ?}
   ?};
   exec('oblicz','okres',1,1)
|| exec('oblicz','okres',1,1);
   n_norma:=exec('nad_norma_prac','okres')
?};
{? A_OKRP.DO<A_OKR.DO & *(__norm_p*60$2)>A_OKRP.NORMA
||
:: Sprawdzenie planowania ponad normę z jednoczesną nieobecnością nieusprawiedliwioną
:: Dla nadplanowania pomimo wypracowania godzin zgodnych z limitem na liście NN zostanie naliczone potrącenie
:: Dla takich sytuacji należy wyliczyć wynagrodzenie za pracę dla ilości godzin związanych z nieobecnością
   _tab_pr:=exec('dane_pracownika','pracownik',,A_OKRP.OD,A_OKRP.DO);
   _NB:=sql('select sum(NG) NG from :_a where NB in (:_b)',_tab_pr,__RUB.sys_sql(14152)).NG;
   {? _NB>0
   || _NG:=*(_NB*60$2);
      _norma:=A_OKRP.NORMA-A_OKRP.P_NIEOB;
      {? _norma<*0 || _norma:=*0 ?};
      {? A_OKRP.PRZEP-A_OKRP.N_DOBA>_norma-_NG
      || _praca:=A_OKRP.PRZEP-_norma-A_OKRP.N_DOBA-exec('zlicz_64','okres',A_OKRP.OD,A_OKRP.DO);
         _praca:=*_praca/60$2;
         {? _praca>=0
         || __H_pnd+=_NB
         || __H_pnd+=_NB+_praca
         ?}
      ?}
   ?}
?};

:: usuwamy godziny z okresu rozliczenioweego przypisane do rozliczenia dla calego okresu rozliczeniowego
_err:=0;
{! _ind:=0.._rozn
|! _data:=date(A_OKRP.DO~1,A_OKRP.DO~2-_ind,1);
   _err+=exec('del_godz','godziny',_data~1,_data~2,1,A_OKRP.OD,A_OKRP.DO)
!};
{? _err
|| VAR_DEL.delete('__H_pnd','__H_norm','n_norma');
   return(0)
?};
:: usuwamy godziny z okresu rozliczenioweego ale być może przypisane do rozliczenia do następnego miesiąca
:: po okresie rozliczeniowym
exec('del_godz','godziny',_res.r_nast,_res.m_nast,1,A_OKRP.OD,A_OKRP.DO);
:: jeżeli wybrany jest do rozliczenia następny miesiąc po okresie, to raz jeszcze usuwamy godziny
:: ale wszystkie, które mają przypisane rozliczenie do tego miesiąca
{? _res.wyb=2
|| _err+=exec('del_godz','godziny',_res.r_rozl,_res.m_rozl,1)
?};
{? _err
|| VAR_DEL.delete('__H_pnd','__H_norm','n_norma');
   return(0)
?};
{! _i:=0.._rozn
|! _data:=date(A_OKRP.DO~1,A_OKRP.DO~2-_i,1);
   exec('akt_godz','godziny',_data~1,_data~2,_res.r_rozl,_res.m_rozl,_rozn+1)
!};
_data:=date(A_OKRP.DO~1,A_OKRP.DO~2-_rozn-1,1);
exec('akt_godz','godziny',_data~1,_data~2,_res.r_rozl,_res.m_rozl,_rozn+1,1);
:: dodanie przekroczen sredniotygodniowych zwiazanych ze zwolnieniem pracownika przed koncem okresu rozliczeniowego
{? __HARM.KW_AUTO & n_norma>0
|| R.index('RUBKOD');
   R.prefix;
   _Mask:='godz'+$_res.r_rozl;
   {? G.name<>_Mask || G.use(_Mask) ?};
   G.index('MSCKW_KD');
   G.prefix(P.ref,_res.m_rozl,'G');
   _konto:=exec('kk_hist','pracownik',A_OKRP.P,A_OKRP.DO);
   _66:={? _rozn & A_OKRP.DO>=exec('ustal_date_sred','godziny') || 7011 || 66 ?};
   {? ~G.find_key(_66,_konto,A_OKRP.DO)
   || {? R.find_key(_66)
      || G.blank(1);
         G.P:=P.ref();
         G.R:='G';
         G.BL:='N';
         G.AUTO:='T';
         G.M:=_res.m_rozl;
         G.D:=A_OKRP.DO;
         G.KK:=_konto;
         G.K:=R.ref();
         G.G:=n_norma;
         G.F:='RCP_'+$A_OKR.ref();
         G.add()
      ?}
   || {? G.LT=''
      || {? G.BL='N'
         || G.G+=n_norma;
            G.AUTO:='T';
            G.F:='RCP_'+$A_OKR.ref();
            G.put()
         ?}
      ?}
   ?}
?};
&n_norma;
{? __HARM.KW_AUTO & __H_norm>0
|| _7026:={? _rozn & A_OKRP.DO>=exec('ustal_date_sred','godziny') || 7026 || 7027 ?};
   R.index('RUBKOD');
   R.prefix();
   _Mask:='godz'+$_res.r_rozl;
   {? G.name()<>_Mask || G.use(_Mask) ?};
   G.index('MSCKW_KD');
   G.prefix(P.ref(),_res.m_rozl,'G');
   _konto:=exec('kk_hist','pracownik',A_OKRP.P,A_OKRP.DO);
   {? ~G.find_key(_7026,_konto,A_OKRP.DO)
   || {? R.find_key(_7026)
      || G.blank(1);
         G.P:=P.ref();
         G.R:='G';
         G.BL:='N';
         G.AUTO:='T';
         G.M:=_res.m_rozl;
         G.D:=A_OKRP.DO;
         G.KK:=_konto;
         G.K:=R.ref();
         G.G:=__H_norm;
         G.F:='RCP_'+$A_OKR.ref();
         G.add()
      ?}
   || {? G.LT=''
      || {? G.BL='N'
         || G.G+=__H_norm;
            G.AUTO:='T';
            G.F:='RCP_'+$A_OKR.ref();
            G.put()
         ?}
      ?}
   ?}
?};
{? __HARM.KW_AUTO & __H_pnd>0
|| _7056:={? _rozn & A_OKRP.DO>=exec('ustal_date_sred','godziny') || 7057 || 7056 ?};
   R.index('RUBKOD');
   R.prefix();
   _Mask:='godz'+$_res.r_rozl;
   {? G.name<>_Mask || G.use(_Mask) ?};
   G.index('MSCKW_KD');
   G.prefix(P.ref(),_res.m_rozl,'G');
   _konto:=exec('kk_hist','pracownik',A_OKRP.P,A_OKRP.DO);
   {? ~G.find_key(_7056,_konto,A_OKRP.DO)
   || {? R.find_key(_7056)
      || G.blank(1);
         G.P:=P.ref();
         G.R:='G';
         G.BL:='N';
         G.AUTO:='T';
         G.M:=_res.m_rozl;
         G.D:=A_OKRP.DO;
         G.KK:=_konto;
         G.K:=R.ref();
         G.G:=__H_pnd;
         G.F:='RCP_'+$A_OKR.ref();
         G.add()
      ?}
   || {? G.LT=''
      || {? G.BL='N'
         || G.G+=__H_pnd;
            G.AUTO:='T';
            G.F:='RCP_'+$A_OKR.ref();
            G.put()
         ?}
      ?}
   ?}
?};
:: sytuzcja w ktorej sa godziny platne jak nadgodziny ale nie sa przekroczeniem sredniotygodniowym
:: dla osób zwolniotych przed zakończeniem okresu z nadplanowaniem
:: Dla sytuacji w której nie wystapiły godziny 64,65 lub 68 dla tego przekroczsenia ponad wymiar tzw 39..40 h
{? __HARM.KW_AUTO & __wyn_d>0
|| _7035:={? _rozn & A_OKRP.DO>=exec('ustal_date_sred','godziny') || 7035 || 7036 ?};
   R.index('RUBKOD'); R.prefix;
   _Mask:='godz'+$_res.r_rozl;
   {? G.name<>_Mask || G.use(_Mask) ?};
   G.index('MSCKW_KD');
   G.prefix(P.ref,_res.m_rozl,'G');
   _konto:=exec('kk_hist','pracownik',A_OKRP.P,A_OKRP.DO);
   {? ~G.find_key(_7035,_konto,A_OKRP.DO)
   || {? R.find_key(_7035)
      || G.blank(1);
         G.P:=P.ref;
         G.R:='G';
         G.BL:='N';
         G.AUTO:='T';
         G.M:=_res.m_rozl;
         G.D:=A_OKRP.DO;
         G.KK:=_konto;
         G.K:=R.ref;
         G.G:=__wyn_d;
         G.F:='RCP_'+$A_OKR.ref();
         G.add
      ?}
   || {? G.LT=''
      || {? G.BL='N'
         || G.G+=__wyn_d;
            G.AUTO:='T';
            G.F:='RCP_'+$A_OKR.ref();
            G.put
         ?}
      ?}
   ?}
?};
&__wyn_d;
&__H_pnd;
&__H_norm;
{? _force
|| A_OKRP.S_PLAN:='X';
   A_OKRP.put();
   FUN.info('Dane o godzinach pracownika zostały przeniesione do rozliczenia.'@)
?};
1


\zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Dokonuje zapisu w tabeli przepracowanych godzin. Dziedzina tabeli godzin musi być ograniczona do rekordów
::       powiązanych z bieżacym zapisem w tabeli P.
::   WE: _a - [INTEGER] Kod rubryki.
::       _b - [INTEGER] Miesiąc.
::       _c - [REAL] Ilość godzin.
::       _d - [REAL] Suma dla istniejącego zapisu.
::       _e - [REFERENCE] Wskazanie na konto kosztów.
::       _f - [TIME] Czas odebranych nadgodzin.
::       _g - [DATE] Data odebranych nadgodzin.
::       _h - [INTEGER] Dla zamknięcia okresu (ilość miesięcy w okresie).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a=67 & R_PRACDN.ZM<>'S' || return() ?};
{? var_pres('_e')=7
|| {? _e=null()
   || {? R_KWGODZ.KK
      || _rodz:=0;
         _e:=R_KWGODZ.KK
      || _rodz:=1;
         _e:=null()
      ?}
   || _rodz:=0
   ?}
|| _rodz:=1;
   _e:=null()
?};
_f:={? var_pres('_f')<>type_of(*0) || time(0,0,0) || _f ?};
_g:={? var_pres('_g')<>type_of(#0) || date(0,0,0) || _g ?};
_h:={? var_pres('_h')<>type_of(0) || 0 || _h ?};
: sprawdzenie daty od której zostaje zmieniony sposób realizacji dodatku za przekroczenia średniotygodniowe
_66_ok:=date(#(G.name()+4),_b,0)>=exec('ustal_date_sred','godziny');

{? _h || _swieto:=__KAL.h_days(R_PRACDN.DT,R_PRACDN.DT) ?};
_wolne:=
   "  {? R_WYK.R_WO().W='S' |  R_WYK.R_WO().W='W' ||  R_WYK.DO || R_WYK.DN ?}
   ";
_odbior:=
   "  {? R_WYK.R_WO().W='S' |  R_WYK.R_WO().W='W'
      || 0
      || {? KST.R_ODBIOR || KST.R_ODBIOR().RN || 63 ?}
      ?}
   ";
_odprac:=48;
_konto:={? _rodz || exec('kk_hist','pracownik',R_PRACDN.P,R_PRACDN.DT) || _e ?};
_kod_wh:=_a;
_Czas:=(*_c/60);
{? H.find_le(R_PRACDN.DT)
|| _nwymiar:=H.WY<>1;
   _ryczaltowy:=-(1+H.CP().CP)='u'
?};
_kod:=_a;

_kod_spc:=obj_new(5);
{! _ind:=1..obj_len(5)
|! _kod_spc[_ind]:=0
!};
{? _h>1 & _66_ok
: okres dłuższy niż miesiąc
||
: przekroczenie sredniotygodniowe ponad pelny wymiar zatrudniennia
   _kod_spc[1]:=7011;
: praca w dzien swiateczny niebedacy przekroczeniem sredniotygodniowym
   _kod_spc[2]:=7029;
: dla niepełnoetatowca, czas pracy w dniu typu W5, SW,SN płatne jak średniotygodniowe
: (praca powyżej dopełnienia średniotygodniowego  poniżej normy dla pełnego etatu)
   _kod_spc[3]:=7035;
: dla niepełnoetatowca, praca w dniu typu W5 (nieodebrane do końca okresu rozliczeniowego),
: ale w sytuacji kiedy zliczając zarejestrowany czas pracy (bez przekroczeń dobowych)
: wykonanie jest poniżej dopełnienia średniotygodniowego (39h * ilość pełnych tygodni w okresie)
   _kod_spc[4]:=7038;
: dla niepełnoetatowca, czas zakwalifikowany jako dopełnienia do etatu, do rozliczenia jako średniotygodniowe,
: powyżej dopełnienia średniotygodniowego ale poniżej normy dla pełnego etatu
   _kod_spc[5]:=7026
||
: okres miesiecczny
: przekroczenie sredniotygodniowe ponad pelny wymiar zatrudniennia
   _kod_spc[1]:=66;
: praca w dzien swiateczny niebedacy przekroczeniem sredniotygodniowym
   _kod_spc[2]:=7028;
: dla niepełnoetatowca, czas pracy w dniu typu W5, SW,SN płatne jak średniotygodniowe
: (praca powyżej dopełnienia średniotygodniowego  poniżej normy dla pełnego etatu)
   _kod_spc[3]:=7036;
: dla niepełnoetatowca, praca w dniu typu W5 (nieodebrane do końca okresu rozliczeniowego),
: ale w sytuacji kiedy zliczając zarejestrowany czas pracy (bez przekroczeń dobowych)
: wykonanie jest poniżej dopełnienia średniotygodniowego (39h * ilość pełnych tygodni w okresie)
   _kod_spc[4]:=7037;
: dla niepełnoetatowca, czas zakwalifikowany jako dopełnienia do etatu, do rozliczenia jako średniotygodniowe,
: powyżej dopełnienia średniotygodniowego ale poniżej normy dla pełnego etatu
   _kod_spc[5]:=7027
?};

{? _Czas<0 || _Czas:=0 ?};
_Czas_WY:=_kod_WY:=_Czas_WM:=_kod_WM:=0; _czastmp:=_Czas;
_G_add:=
   "  G.blank(1);
      G.P:=P.ref();
      G.R:='G';
      G.BL:='N';
      G.AUTO:='T';
      G.M:=_a;
      G.D:=_b;
      G.KK:=_c;
      G.K:=_d;
      G.G:=_e;
      G.F:=_f;
      G.add()
   ";
{? _Czas & _h
|| {? _kod=65
   || R_ODP.index('PRAC');
      R_ODP.prefix(P.ref(),R_PRACDN.DT);
      {? R_ODP.first()
      || G.cntx_psh();
         {? #(G.name()+4)<>R_PRACDN.DT~1
         || _Mask:='godz'+(('0000'+$(R_PRACDN.DT~1))+4);
            {? G.name<>_Mask || G.use(_Mask) ?}
         ?};
         G.index('MSCDKW');
         G.prefix(P.ref(),R_PRACDN.DT~2,'G',R_PRACDN.DT,_odprac);
         _text:='';
         _godz:=0;
         {? G.first()
         || {!
            |? _text+=G.F;
               G.next()
            !};
            {!
            |? _temp_t:=11+_text;
               {? +_temp_t=11
               || _text:=11-_text;
                  {? #(4+(3-_temp_t))=_kod
                  || _godz+=(#(_temp_t+4))*0.01
                  ?};
                  +_text
               ?}
            !}
         ?};
         _Czas-=_godz;
         {? _Czas<0 || _Czas:=0 ?};
         _czastmp:=_Czas;
         G.cntx_pop()
      ?}
   ?}
|| {? _Czas
   ||
:  wprowadzenie odpracowania w tym samym dniu
      {? _kod=54
      || R_ODP.index('PRAC');
         R_ODP.prefix(P.ref(),R_PRACDN.DT);
         {? R_ODP.first()
         || {!
            |? {? R_ODP.R_ODN().DW=R_ODP.DW & R_ODP.GO=*0
               || R_KWGODZ.cntx_psh();
                  R_KWGODZ.index('DATA_RUB');
                  R_KWGODZ.prefix(P.ref(),R_ODP.DW,54);
                  _czas_pr:=time(0,0,0);
                  {? R_KWGODZ.first()
                  || {!
                     |? _czas_pr+=R_KWGODZ.GODZ;
                        R_KWGODZ.next()
                     !}
                  ?};
                  {? _czas_pr>=exec('wymiar_godz','prc_rozlicz',R_ODP.DW)
                  || R_ODP.GO:=R_ODP.G;
                     R_ODP.put(1)
                  ?};
                  R_KWGODZ.cntx_pop()
               ?};
               R_ODP.next()
            !}
         ?}
      ?};

:     Jesli jest wniosek odpracowania
      {? _kod=55 | _kod=56 | _kod=64 | _kod=65 | _kod=68 | _kod=69
      || R_ODP.index('PRAC');
         R_ODP.prefix(P.ref(),R_PRACDN.DT);
         {? R_ODP.first()
         || _czas:=0;
            {!
            |? {? R_ODP.R_ODN().DW<>R_ODP.DW
               || _g_odp:=(*R_ODP.G/60)-(*R_ODP.GO/60);
                  {? _g_odp>0
                  || _g_odpn:=_g_odp-_Czas;
                     {? _g_odpn>=0
                     || R_ODP.GO:=R_ODP.GO+*(_Czas*60);
                        R_ODP.put(1);
                        _czas+=_Czas;
                        _Czas:=0;
                        0
                     || _Czas:=_Czas-_g_odp;
                        R_ODP.GO:=R_ODP.GO+*(_g_odp*60);
                        _czas+=_g_odp;
                        R_ODP.put(1);
                        R_ODP.next()
                     ?}
                  || R_ODP.next()
                  ?}
               || R_ODP.GO:=R_ODP.G;
                  R_ODP.put(1);
                  R_ODP.next()
               ?}
            !};
:           wprowadzenie czasu odpracowanego
            {? _czas
            || {? ~G.find_key(_odprac,_konto,R_PRACDN.DT)
               || {? R.find_key(_odprac)
                  || _G_add(_b,R_PRACDN.DT,_konto,R.ref(),_czas$2,'RCP'+form(_kod,-4,0,'9')+form(_czas*100,-4,0,'9'))
                  ?}
               || {? G.LT=''
                  || {? G.BL='N'
                     || G.G+=_czas$2;
                        G.AUTO:='T';
                        G.F+='RCP'+form(_kod,-4,0,'9')+form(_czas*100,-4,0,'9');
                        G.put()
                     ?}
                  ?}
               ?}
            ?}
         ?}
      ?}
   ?}
?};

{? _Czas
|| {? _h
   ||
:: dla pelnego wymiaru
      {? ~_nwymiar & (_kod=58 | _kod=65)
      ||
:: nastapilo przekroczenie sredniotygodniowe powyzej normy
         {? n_norma>=_Czas
         || n_norma-=_Czas;
            _kod:=_kod_spc[1]
         || {? n_norma>0
            || _Czas:=n_norma;
               _czastmp-=n_norma;
               _kod:=_kod_spc[1];
:: godziny pracy w dzien swiateczny
               {? _swieto & _a=58
               || _Czas_WY:=_czastmp;
                  _kod_WY:=_kod_spc[2]
:: praca w dzien wolny W5 - sobota
               |? _a=58
               || _Czas_WY:=_czastmp;
                  _kod_WY:=_kod_spc[4]
               ?};
               n_norma:=0
            ||
:: godziny pracy w dzien swiateczny
               {? _swieto & _kod=58
               || _Czas:=_czastmp;
                  _kod:=_kod_spc[2]
:: praca w dzien wolny W5 - sobota
               |? _a=58
               || _Czas:=_czastmp;
                  _kod:=_kod_spc[4]
               ?};
               n_norma:=0
            ?}
         ?}
      ||
:: dla niepelnego wymiaru
         {? n_norma>=_Czas & (_kod=58 | _kod=65)
         || n_norma-=_Czas;
            _kod:=_kod_spc[1]
         |? (_kod=58 | _kod=65)
         || {? n_norma>0
            || _Czas:=n_norma;
               _czastmp-=_Czas;
               n_norma:=0;
               _kod:=_kod_spc[1];
               {? _czastmp>0
               || {? __H_norm>=_czastmp
                  || _Czas_WY:=_czastmp;
                     _kod_WY:=_kod_spc[3];
                     __H_norm-=_czastmp;
                     _czastmp:=0
                  |? __H_norm>0
                  || _Czas_WY:=__H_norm;
                     _kod_WY:=_kod_spc[3];
                     _czastmp-=__H_norm;
                     __H_norm:=0;
                     {? _swieto
                     ||  _Czas_WM:=_czastmp;
                         _kod_WM:=_kod_spc[2];
                         _czastmp:=0
                     ||  _Czas_WM:=_czastmp;
                         _kod_WM:=_kod_spc[4];
                         _czastmp:=0
                     ?}
                  || {? _swieto
                     ||  _Czas_WY:=_czastmp;
                         _kod_WY:=_kod_spc[2];
                         _czastmp:=0
                     ||  _Czas_WY:=_czastmp;
                         _kod_WY:=_kod_spc[4];
                         _czastmp:=0
                     ?}
                  ?}
               ?}
            || {? _czastmp>0
               || {? __H_norm>=_czastmp
                  || _Czas:=_czastmp;
                     _kod:=_kod_spc[3];
                     __H_norm-=_czastmp;
                     _czastmp:=0
                  |? __H_norm>0
                  || _Czas:=__H_norm;
                     _kod:=_kod_spc[3];
                     _czastmp-=__H_norm;
                     __H_norm:=0;
                     {? _swieto
                     ||  _Czas_WY:=_czastmp;
                         _kod_WY:=_kod_spc[2];
                         _czastmp:=0
                     ||  _Czas_WY:=_czastmp;
                         _kod_WY:=_kod_spc[4];
                         _czastmp:=0
                     ?}
                  || {? _swieto
                     ||  _Czas:=_czastmp;
                         _kod:=_kod_spc[2];
                         _czastmp:=0
                     ||  _Czas:=_czastmp;
                         _kod:=_kod_spc[4];
                         _czastmp:=0
                     ?}
                  ?}
               ?}
            ?}
         |? _kod=64
            || {? __H_norm>=_Czas
            || __H_norm-=_Czas;
               _kod:=_kod_spc[5]
            || {? __H_norm>0
               || _kod:=_kod_spc[5];
                  _Czas:=__H_norm;
                  __H_norm:=0
               || _Czas:=0
            ?}
            ?}
         ?}
      ?};
      {? __H_norm<0 || __H_norm:=0 ?};
      {? n_norma<0 || n_norma:=0 ?}
   ?};
   {? _Czas
   || _Czas:=_Czas$2;
      {? ~G.find_key(_kod,_konto,R_PRACDN.DT)
      || {? R.find_key(_kod)
         || _G_add(_b,R_PRACDN.DT,_konto,R.ref(),_Czas,{? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?})
         ?}
      || {? G.LT=''
         || {? G.BL='N'
            || ($('G.G'+{? var_pres('_d')=type_of(0) & _d || '+' || ':' ?}+'=_a'))
               (_Czas);
               G.AUTO:='T';
               {? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?};
               G.put()
            ?}
         ?}
      ?}
   ?};
   {? _Czas_WY
   || _kod:=_kod_WY;
      _Czas:=_Czas_WY$2;
      _Czas_WY:=0;
      {? ~G.find_key(_kod,_konto,R_PRACDN.DT)
      || {? R.find_key(_kod)
         || _G_add(_b,R_PRACDN.DT,_konto,R.ref(),_Czas,{? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?})
         ?}
      || {? G.LT=''
         || {? G.BL='N'
            || ($('G.G'+{? var_pres('_d')=type_of(0) & _d || '+' || ':' ?}+'=_a'))
               (_Czas);
               G.AUTO:='T';
               {? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?};
               G.put()
            ?}
         ?}
      ?}
   ?};
   {? _Czas_WM
   || _kod:=_kod_WM;
      _Czas:=_Czas_WM$2;
      _Czas_WM:=0;
      {? ~G.find_key(_kod,_konto,R_PRACDN.DT)
      || {? R.find_key(_kod)
         || _G_add(_b,R_PRACDN.DT,_konto,R.ref(),_Czas,{? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?})
         ?}
      || {? G.LT=''
         || {? G.BL='N'
            || ($('G.G'+{? var_pres('_d')=type_of(0) & _d || '+' || ':' ?}+'=_a'))
               (_Czas);
               G.AUTO:='T';
               {? _h || G.F:='RCP_'+$A_OKR.ref() || G.F:='RCP' ?};
               G.put()
            ?}
         ?}
      ?}
   ?}
?};
_Czas:=(*_f/60)$2;
{? _Czas<0 || _Czas:=0 ?};
{? _Czas & _g<>#0
|| {? R_WYK.first()
   || {!
      |? {? ~_odbior()
         || R_KWGODZ.cntx_psh();
            R_KWGODZ.index('DATA_RUB');
            R_KWGODZ.prefix(P.ref(),R_PRACDN.DT,67);
            {? R_KWGODZ.first() & R_KWGODZ.GODZ>*0
            || _kon_kk:={? R_KWGODZ.KK || R_KWGODZ.KK || exec('kk_hist','pracownik',R_KWGODZ.P,R_KWGODZ.DZ) ?};
               {? ~G.find_key(67,_kon_kk,R_KWGODZ.DZ)
               || {? R.find_key(67)
                  || _G_add(_b,R_PRACDN.DT,_kon_kk,R.ref(),(*R_KWGODZ.GODZ/60)$2,'RCP')
                  ?}
               ?}
            ?};
            R_KWGODZ.cntx_pop()
         || {? R_WYK.KK || _konto:=R_WYK.KK ?};
            {? ~G.find_key(_odbior(),_konto,_wolne())
            || {? R.find_key(_odbior())
               || _G_add(_b,_wolne(),_konto,R.ref(),(*R_WYK.GO/60)$2,'RCP')
               ?}
            || {? G.LT=''
               || {? G.BL='N'
                  || G.G+=(*R_WYK.GO/60)$2;
                     G.AUTO:='T';
                     G.F:='RCP';
                     G.put()
                  ?}
               ?}
            ?}
         ?};
         R_WYK.next()
      !}
   ?}
?}


\del_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
::  MOD: PK [10.30]
:: OPIS: Wykasowanie niezablokowanych godzin w danym miesiacu, otwarcie maski dla godzin.
::       Sprawdzenie wypelnienia brygad.
::   WE: _a - rok dla maski godzin
::       _b - miesiac godzin do wykasowania
::       _c - 1 -funkcja wolana dla okresu
::       _d - data od
::       _e - data, do której usuwamy godziny, jeśli nie podamy to bez limitu,
::            jeśli podamy źle to domyslnie koniec miesiaca
::       [_f] [STRING] dodatkowe rubryki do wykasowania
::   WY: >0 - kod błędu
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=1 || _c || 0 ?};
_wyn:=0;
_limit:={? var_pres('_d')=type_of(date) & var_pres('_e')=type_of(date) || 1 || 0 ?};
_MaskGodz:='godz'+(('0000'+$_a)+4);
{? G.name()<>_MaskGodz || G.use(_MaskGodz) ?};
_MaskCon:='cog'+($_a+2)+(('0'+($_b))+2);
{? CON_KG.name()<>_MaskCon || CON_KG.use(_MaskCon) ?};
_usu_con:="{? G.count()
           || CON_KG.prefix(G.ref());
              {? CON_KG.first() & ~CON_KG.ZLBR
              || {! |? CON_KG.del() !}; 1
              || 0
              ?}
           || 1
           ?}";
_usu_mr:="exec('zeruj_MR','godziny',G.P,G.D,G.D)";
CON_KG.index('CON_GRD');
G.index('MSCDKW');
G.prefix(P.ref(),_b,'G');
O.cntx_psh();
O.index('LISTYPZN');
O.prefix(exec('ref_firma','ustawienia'));
{? _c
|| _dataod:={? _limit || _d || date(0,0,0) ?};
   _datado:={? _limit || _e || date(0,0,0) ?};

   {? G.first()
   || {!
      |? {? G.BL='N'
         || {? (((',66,7011,7026,7027,7029,7035,7038,7028,7036,7037,7056,7057,')*(','+($G.K().RN)+',')) |
               __RUB.sys_attr(G.K,83221,G.D) | __RUB.sys_attr(G.K,8313,G.D)) &
               {? _limit || G.D<=_datado & G.D>=_dataod || 1 ?}
            || {? G.F='' | G.F='RCP_'+$A_OKR.ref()
               || {? G.LT=''
                  || {? _usu_con() || G.del() || G.next() ?}
                  || {? O.find_key(-G.LT) & O.Z='T'
                     || _wyn:=1; 0
                     || G.next()
                     ?}
                  ?}
               || G.next()
               ?}
            || G.next()
            ?}
         || G.next()
         ?}
      !}
   ?}
||
:: limitujemy godziny do kasowania
   _ppsf:=exec('is_pzd01','ppsf');
   _dataod:={? _limit || _d || date(_a,_b,1) ?};
   _datado:={? _limit || _e || date(_a,_b,0) ?};
   _rub_ppsf:=__RUB.sys_sql(816,_dataod);
   _odbior:={? KST.R_ODBIOR || KST.R_ODBIOR().RN || 63 ?};
   _odbior:=$_odbior;
   {? G.first()
   || {!
      |? {? G.BL='N'
         || {? G.LT='' & ((('48,54,55,56,57,64,65,68,67,69,7015,7016,'+_odbior+',')*(($G.K().RN)+',')) |
               __RUB.sys_attr(G.K,83211,G.D) | __RUB.sys_attr(G.K,8312,G.D)) &
               {? _limit || G.D<=_datado & G.D>=_dataod || 1 ?}
            || {? _usu_con() || _usu_mr(); G.del() || G.next() ?}
            |? _ppsf & G.LT='' & 3+G.F='RCP' & ((_rub_ppsf+',')*(($G.K().RN)+',')) &
               {? _limit || G.D<=_datado & G.D>=_dataod || 1 ?}
            || {? _usu_con() || _usu_mr(); G.del || G.next ?}
            || G.next()
            ?}
         || G.next()
         ?}
      !}
   ?};
   {? var_pres('R_ODP')>100
   || R_ODP.index('ROK');
      R_ODP.prefix(P.ref(),_a,_b);
      {? R_ODP.first() || {! |? R_ODP.GO:=*0; R_ODP.put(1); R_ODP.next() !} ?}
   ?}
?};
O.cntx_pop();
_wyn


\lista_sum_zamk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Sprawdzenie czy lista sum jest otwarta lub niezałożona
::   WE: _a - [INTEGER] Rok
::       _b - [INTEGER] Miesiac
::       [_c] - [INTEGER] 1 - wyświetlenie komunikatu
::   WY: 1 - lista zamknięta / 0 - lista otwarta
::----------------------------------------------------------------------------------------------------------------------
_c:={? var_pres('_c')=type_of(0) || _c || 0 ?};
O.cntx_psh();
KT.cntx_psh();
O.index('LISTYMIE');
_firma:=exec('ref_firma','ustawienia');
O.prefix(_firma,_a,_b,'SUM');
_wynik:={? O.first() & O.Z='T' || 1 || 0 ?};
KT.cntx_pop();
O.cntx_pop();
{? _c & _wynik
|| FUN.info('%1\n%2'['Lista płac typu SUM jest zamknięta.'@,'Funkcji nie można kontynuować.'@])
?};
_wynik


\rok_msc_rozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja mająca na celu ustalenie roku i miesiąca rozliczeniowego dla zamykanego okresu
::   WE: _a [INTEGER] - data ostatniego dnia okresu rozliczeniowego
::       [_b] [STRING] - wskazany sposób rozliczenia O- ostatni miesiąc, N- następny miesiąc
::   WY: Obiekt z informacjami dotyczacymi roku rozliczenia wybranego przez użytkownika
::       Zwracane pola obieltu:
::          {r_rozl} - rok rozliczeniowy
::          {m_rozl} - miesiąc rozliczeniowy
::          {r} - rok rozliczeniowy początkowy
::          {m} - miesiąc rozliczeniowy początkowy
::          {r_nast} - rok dla następnego miesiąca po zamykanym okresie
::          {m_nast} - miesiąc następny po zamykanym okresie
::          {wyb}    - wybór użytkownika - czy zapisujemy godziny w:
::                     (0) - rezygnacja z wyboru
::                     (1) - ostatnim miesiącu okresu rozliczeniowego
::                     (2) - następnym po ostatnim miesiącu okresu rozliczeniowego?
::----------------------------------------------------------------------------------------------------------------------
_lastDay:={? var_pres('_a')=type_of(date()) || _a || date(0,0,0) ?};
_res:=obj_new('r_rozl','m_rozl','r_nast','m_nast','wyb','r','m');
_res.wyb:=0;

{? _lastDay=#0
|| FUN.error('Błędna data.'@);
   return(_res)
?};
_res.r_rozl:=_lastDay~1;
_res.m_rozl:=_lastDay~2;
_res.r:=_lastDay~1;
_res.m:=_lastDay~2;
_res.r_nast:=_lastDay~1;
_res.m_nast:={? _lastDay~2=12 || _res.r_nast+=1; 1 || _lastDay~2+1 ?};

{? var_pres('_b')=type_of('')
|| _res.wyb:={? _b='O' || 1 |? _b='N' || 2 || 0 ?}
|| _res.wyb:=FUN.choice('%1\n%2'
      [  'Należy wskazać rok i miesiąc rozliczenia dla przekroczeń średniotygodniowych.'@,
         'O - ostatni miesiąc w okresie\nN - następny miesiąc'@
      ],,'&O - %1'[_lastDay$8],'&N - %1'[(date(_res.r_nast,_res.m_nast,0))$8]
   )
?};

{? _res.wyb=2
|| _res.r_rozl:=_res.r_nast;
   _res.m_rozl:=_res.m_nast
?};
_res


\zeruj_MR
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja zeruje informacje o miesiącu rozliczeniowym dla kwalifikacji w zakresie podanych dat
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATE]      - data od
::       _c [DATE]      - data do
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_data_od:={? var_pres('_b')=type_of(date()) || _b || return(0) ?};
_data_do:={? var_pres('_c')=type_of(date()) || _c || return(0) ?};
_first:=1;
R_WZCZ.cntx_psh();
A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
_rok:=0;
_msc:=0;
{? var_pres('__HARM')<100
|| exec('harm_decl','harmonogramy');
   __HARM:=obj_new(@.CLASS.__HARM)
?};
{! _ind:=#_data_od..#_data_do
|! _data:=#_ind;
   {? _rok<>_data~1 | _msc<>_data~2
   || _rok:=_data~1;
      _msc:=_data~2;
      A_OKRM.prefix(_rok,_msc)
   ?};
   _Mask:=MASK.MaskZbio(_rok,_msc);
   _MaskKwal:='r_kg'+_Mask;
   {? _first | (R_KWGODZ.name()<>_MaskKwal)
   || _first:=0;
      R_KWGODZ.use(_MaskKwal);
      R_KWGODZ.index('DATA_RUB')
   ?};
   R_KWGODZ.prefix(P.ref(),_data);
   {? R_KWGODZ.first()
   || _put:=0;
      {? __HARM.mc_otw(_data,0) | ((A_OKRM.S='Z') & (_data>A_OKRM.DZ))
      || _put:=1
      ?};
      {? _put
      || {!
         |? R_KWGODZ.MR:=date(0,0,0);
            {? ~R_KWGODZ.put(1)
            || _ref:=#R_KWGODZ.ref();
               _godz:=R_KWGODZ.GODZ;
               R_KWGODZ.index('DATA_RUB');
               R_KWGODZ.prefix(R_KWGODZ.P,R_KWGODZ.DZ,R_KWGODZ.KW().RN);
               {? R_KWGODZ.first()
               || {!
                  |? {? #R_KWGODZ.ref()<>_ref
                     || R_KWGODZ.GODZ+=_godz;
                        {? R_KWGODZ.put(1)
                        || {? R_KWGODZ.seek(_ref,)
                           || R_KWGODZ.del(,1)=2
                           ?}
                        ?}
                     || R_KWGODZ.next()
                     ?}
                  !}
               || R_KWGODZ.next()
               ?}
            || R_KWGODZ.next()
            ?}
         !}
      ?}
   ?}
!};
A_OKRM.cntx_pop();
R_WZCZ.cntx_pop()


\zwrot_bufor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wynikiem jest bufor tabeli do zwrotu odbioru.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(2,
   'NAZWISKO','STRING[30]','Nazwisko',
   'IMIE','STRING[25]','Imię',
   'T','STRING[10]','Teczka',
   'WYDZIAL','STRING[16]','Wydział',
   'DN','DATE','Data nadmiaru',
   'DO','DATE','Data odbioru',
   'G','TIME','Godziny nadmiaru',
   'P_REF','INTEGER','Ref pracownika',
   'R_WYK','INTEGER','Ref odbioru',
   'NB','STRING[20]','Nieobecność',
   'N_OD','DATE','Początek',
   'N_DO','DATE','Koniec',
   'WYP','STRING[1]','Do wypłaty',
   'OPIS','STRING[100]','Akcja',
   'R','STRING[20]','Rodzaj nadmiaru',
   'RN','INTEGER','Numer rodzaju'
)


\zwrot_odb_okres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Zwrot godzin do odbiory. W sytuacji gdy dzien odbioru wyznaczono po zwolnieniu pracownika.
::       Jezeli wystąpi taka sytuacja program wyswietli okienko z informacja oraz z potwierdzeniem ze w tej sytuacji
::       ma nastapic rozliczenie dodatku poprzez wyplacenie w okresie zamykanym. Niezbedny jesli pracownik konczy
::       zatrudnienie i nie ma mozliwosci zmiany daty odbioru nadgodzin.
::   WE: _a - bufor tabeli
::       [_b] - P.ref - opcjonalny
::   WY: Tabelka z ustaleniem dalszego działania
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
R_WO.cntx_psh();
P.cntx_psh();
N.index('NIEORM');
H.index('_HISTKOD');
R.prefix();
_ndx:=R_WO.ndx_tmp(,1,'A_OKR',,,'P',,);
R_WO.index(_ndx);
{? var_pres('_b')=type_of(null)
|| R_WO.prefix(A_OKR.ref(),_b)
|| R_WO.prefix(A_OKR.ref())
?};
{? R_WO.first()
|| {!
   |? {? 'SW'* R_WO.W
      || _wyn:=0; _nieob:=''; _od:=_do:=#0; R_WO.P();
         {? ~_wyn
         || {? P.DZ<>#0 & R_WO.DO>P.DZ
            || _wyn:=1; _od:=R_WO.DO; _do:=R_WO.DO;
               _nieob:='Pracownik zwolniony'
            ?}
         ?};
         {? _wyn
         || _tab.NAZWISKO:=R_WO.P().OSOBA().NAZWISKO;
            _tab.IMIE:=OSOBA.PIERWSZE;
            _tab.T:=P.T;
            _tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
            _tab.DO:=R_WO.DO;
            _tab.G:=R_WO.G;
            _tab.P_REF:=#P.ref();
            _tab.R_WYK:=#R_WO.ref();
            _tab.NB:=_nieob;
            _tab.N_OD:=_od;
            _tab.N_DO:=_do;
            _tab.WYP:='N';
            _tab.add()
         ?}
      ?};
      R_WO.next()
   !}
?};
A_OKRP.cntx_pop();
R_WO.ndx_drop(_ndx);
R_WO.cntx_pop();
P.cntx_pop();
_tab


\g_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Rekord przed dla G
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wer:=G.win_sel('?');
{? _wer='WERZ'
|| _mod:=exec('czy_mod','lista_plac',G.RH,,1);
   {? _mod.status<0 & _mod.status<>-6

   || G.actions_grayed(_wer,'PU');
      R_GODZ.actions_grayed('R_GODZ','DPU')
   || G.actions_grayed(_wer,'');
      R_GODZ.actions_grayed('R_GODZ','')
   ?}
|? _wer='WER'
|| {? G.RH<>null
   || G.actions_grayed('WER_PRC','PU');
      G.actions_grayed('WER_PRCZ','PU')
   || G.actions_grayed('WER_PRC','');
      G.actions_grayed('WER_PRCZ','')
   ?}
?}


\g_mscroz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Akcja przed zmianą miesiąca rozliczeniowego
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_PAR:=tab_tmp(,'ROK','INTEGER','Rok rozliczeniowy'@,
               'MSC','INTEGER','Miesiąc rozliczeniowy'@);
_we:=_PAR.mk_edit('Podaj dane'@,,'#zlec_rozpar');
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,,'ROK',,,5,,,'Rok rozliczeniowy'@,,'Wybierz rok rozliczeniowy'@);
_PAR.win_efld(_we,,'MSC',,,5,,,'Miesiąc rozliczeniowy'@,,'Wybierz miesiąc rozliczeniowy'@);
_PAR.win_edit(_we);
_PAR.efld_opt(_we,'mark=1');
exec('ok_esc','#window',_PAR,_we);

_PAR.ROK:=VAR.AR;
_PAR.MSC:=VAR.AM;

{? _PAR.edit("exec('var_valid','godziny')")
|| VAR.AR:=_PAR.ROK;
   VAR.AM:=_PAR.MSC;

   exec('ustaw_maski','godziny',VAR.AR,VAR.AM);
   G.index('MSCKW_KK');
   G.prefix(P.ref(),VAR.AM,'G');
   G.index('MSCKW_KD');
   G.prefix(P.ref(),VAR.AM,'G');
   G.index('MSCDKW');
   G.prefix(P.ref(),VAR.AM,'G');

   exec('CON','object');
   exec('ustaw_okno','godziny','PRC_MCR_DWGD')
?}


\var_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Formuła sprawdzająca poprawność parametrów
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_PAR:=cur_tab();
{? (_chk:=__CHK.record(_PAR,,'ROK','MSC'))<>''
|| return(_chk)
|? _PAR.ROK<1900 | _PAR.ROK>exec('max_rok','#datetime')
|| FUN.emsg('Rok rozliczeniowy musi być wartością z przedziału od %1 do %2.'@[$1900,$exec('max_rok','#datetime')]);
   return('ROK')
|? _PAR.MSC<1 | _PAR.MSC>12
|| FUN.emsg('Miesiąc rozliczeniowy musi być wartością z przedziału od 1 do 12.'@);
   return('MSC')
?};

''


\usun_podzial
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Usuwa definicję podziału na konta kosztowe
::   WE: _a [STRING] - 'M' dla podziału miesięcznego, 'S' dla podziału stałego
::       _b [STRING] - 'M' lub 'S' dla podziału domyślnego, 'L' dla podziału wg listy lub typu listy
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & 'SM'*_a & +|_a || _a || '' ?};
_czyL:={? var_pres('_b')=type_of('') & 'SML'*_b & +|_b || _b='L' || 0 ?};
{? ~+|_typ || return(0) ?};
{? ~FUN.ask('Nastąpi trwałe usunięcie definicji podziału kosztów.\nCzy kontynuować?'@) || return(0) ?};
_ret:=1;
_licz:=0;
G.cntx_psh();
{? _typ='S'
|| G.use('godzstal');
   G.index('PODZIALK');
   {? _czyL
   || G.prefix(exec('firma','ustawienia'),'K',)
   || G.prefix(exec('firma','ustawienia'),'K','< ---- >',)
   ?};
   {? G.first()
   || FUN.prg_start(G.size(),'Trwa usuwanie definicji %1.'@['podziałów stałych'@]);
      do();
      {!
      |? FUN.prg_next();
         {? {? _czyL || |G.LT<>'< ---- >' || 1 ?}
         || _licz+=1; G.del()
         || G.next()
         ?}
      !};
      end();
      FUN.prg_stop()
   ?};
   G.f_clear()
|? _typ='M'
|| _maski:=G.names();
   {? _maski.first()
   || FUN.prg_start(_maski.size(),'Trwa usuwanie definicji %1.'@['podziałów miesięcznych'@]);
      {!
      |? {? _maski.NAME<>'godzstal'
         || {? G.name()<>_maski.NAME || G.use(_maski.NAME) ?};
            G.index('PODZIALK');
            {? _czyL
            || G.prefix(exec('firma','ustawienia'),'K','L')
            || G.prefix(exec('firma','ustawienia'),'K','',)
            ?};
            {? G.first()
            || do();
               {! |? _licz+=1; G.del() !};
               end()
            ?}
         ?};
         FUN.prg_next();
         _maski.next()
      !};
      FUN.prg_stop()
   ?}
?};
G.cntx_pop();
FUN.info('Usunięto %1 rekordów.'@[$_licz]);
_ret


\atrybut
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Procedura zwraca string w postaci jaka odpowiada wynikowi metody sys_sql.
::       Jeżeli brakuje w syetmie wybranych atrybutów - wynik zostanie uzupełniony.
::   WE: _a - numer atrybutu
::   WY: string - wynik metody sys_sql dla podanego atrybutu lub uzupełnienie.
::  OLD: \atrybut/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return('') ?};
_attr:=_a;
_wynik:=__RUB.sys_sql(_a);
{? ~(+_wynik)
|| {? _a=82
   || _wynik:=('7057,7056,7038,7037,7036,7035,7029,7028,7027,7026,7016,7015,7011,'+
         '69,68,67,66,65,64,63,58,57,56,55,54,48')
   |? _a=8211
   || _wynik:=('54')
   ?}
?};
_wynik


\rozliczone_godziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Procedura zwraca tabelę z godzinami z tabeli G według atrybutow i miesiąca rozliczenia.
::   WE: _a - rok dla maski tabeli G
::       _b - miesiąc rozliczenia
::       _c - pobrane elementy zbioru z atrybutów dla różnicy _c-_d
::       [_d] - pominięte elemety zbioru z atrybutów dla różnicy _c-_d
::       [_e] - początkowa data (domyślnie początek wskazanego miesiąca)
::       [_f] - końcowa data (domyślnie koniec wskazanego miesiąca)
::   WY: tabela wynikowa
::  OLD: \rozliczone_godziny/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(0) | var_pres('_c')<>type_of(0)
|| _tab:=tab_tmp(1,'D','DATE',,'G','REAL',,'RN','INTEGER',)
|| _rok:=_a;
   _mc:=_b;
   _atrybut:=_c;
   {? var_pres('_d')=type_of(0) || _minus:=_d || _minus:=0 ?};
   {? var_pres('_e')=type_of(date()) || _start:=_e || _start:=date(0,0,0) ?};
   {? var_pres('_f')=type_of(date()) || _end:=_f || _end:=date(0,0,0) ?};
   G.cntx_psh();
   {? _Mask:='godz'+(('0000'+$(_rok))+4); G.name<>_Mask || G.use(_Mask) ?};
   _tab:=sql('
      select G.D, G.G, R.RN
      from G join P using(P.REFERENCE,G.P) join R using(R.REFERENCE,G.K)
      where P.REFERENCE=:_a and G.R=\'G\' and G.M=:_b and R.RN in (:_c) '+
         {? _minus || 'and R.RN not in (:_d) ' || '' ?}+
         {? _start<>date(0,0,0) || 'and G.D>=to_date(:_e) ' || '' ?}+
         {? _end<>date(0,0,0) || 'and G.D<=to_date(:_f) ' || '' ?}+'
      order by 1',
      P.ref,_mc,exec('atrybut','godziny',_atrybut),{? _minus || exec('atrybut','godziny',_minus) ?},_start,_end);
   G.cntx_pop()
?};
_tab



:Sign Version 2.0 jowisz:1045 2023/08/24 13:12:19 72a788a9302e0090009e3e85f4ba75382c5e19e72a17cbf4fb01be3359ab18da5cf3871e237a0639c4c839d58d5428ec3f5d38594bb9aaeb0d3e00bc010ab0152b34064f259583a10bda93b2c0ca1bae1b2fe908877d540fec53ab65e3a5ec311625c70ef538e1d218e46e26dd20c5135210600d3d44783c6da0adc4e6db300d
