:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: rubobj.fml
:: Utworzony: 27.01.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Plik zawiera definicje obiektów ułatwiających i optymalizujących proces obliczania składników listy płac.
::            Obiekt korzysta ze zmiennej SEEK.
::======================================================================================================================


\dekl_rub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
::       RWR [12.30]
:: OPIS: Deklaracja klasy RUB wspomagającej dostęp do rubryk i ich atrybutów.
::   WE:
::   WY: ~~
::  OLD: \rubobj/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
: Zakończ, jeśli klasa została zadeklarowana.
{? var_pres('RUB',@.CLASS)>0 || return() ?};

obj_decl('RUB',

:  ---------------------------------------------------------------------------------------------------------------------
:  Pola publiczne (tylko do odczytu)
:  ---------------------------------------------------------------------------------------------------------------------

:  Wskazania na rubryki według kodu.
   obj_fld('REF',~~),

:  Wskazania na rubryki według numeru.
   obj_fld('RLP',~~),

:  Szybka zamiana kodu na numer.
   obj_fld('MAP',~~),

:  Nazwy rubryk.
   obj_fld('RT',~~),

:  Liczba zdefiniowanych rubryk i pole z znacznikiem modyfikacji rekordu.
   obj_fld('MAX',0),
   obj_fld('MAX_IDPUT',''),
   obj_fld('LAST_MOD',''),


:  ---------------------------------------------------------------------------------------------------------------------
:  Metody prywatne - rubryki
:  ---------------------------------------------------------------------------------------------------------------------

   obj_meth('is_mod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy zmodyfikowano rubryki.
::   WE:
::   WY: 0 - bez zmian
::       1 - zmieniono rubryki
::----------------------------------------------------------------------------------------------------------------------
   "  _ret:=0;
      R.cntx_psh();
      R.index('IDPUT');
      _ret:=(R.last() & (R.IDPUT<>.LAST_MOD));
      R.cntx_pop();
      _ret
   ",-1),

   obj_meth('reset_mod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala stan modyfikacji rubryk na "niezmodyfikowane".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  R.cntx_psh();
      R.index('IDPUT');
      R.prefix();
      .LAST_MOD:=
         {? R.last()
         || .LAST_MOD:=R.IDPUT
         || ''
         ?};
      R.cntx_pop();
      ~~
   ",-1),

   obj_meth('max',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda znajduje najwyższy używany numer rubryki. Dodatkowo rubryki bez ustalonej kolejności obliczeń (R.LP=0)
::       zostają umieszczone na końcu.
::       Działanie jest uzależnione od tego, czy jakikolwiek rekord tabeli R został zmodyfikowany od ostatniego
::       wywołania metody.
::       Wynik jest również zapisywany do pola .MAX.
::       Metoda wykorzystywana np. przy określaniu rozmiaru zakładanych tablic.
::   WE:
::   WY: Najwyższy używany numer rubryki
::  OLD: \max_rub/kali.fml
::----------------------------------------------------------------------------------------------------------------------
   "  R.cntx_psh();
      R.index('IDPUT');
      R.prefix();
      {? ~R.last()
      || .MAX_IDPUT:='';
         .MAX:=0
      |? .MAX_IDPUT<>R.IDPUT
      || .MAX_IDPUT:=R.IDPUT;
         .MAX:=0;
         R.index('RUBLP');
         R.prefix();
         {? R.first()
         || R.index('RUBKOD');
            R.prefix();
            {? R.LP=0
            || {? R.lock(2)
               || R.last();
                  _lp:=R.LP;
                  R.index('RUBKOD');
                  _loop:=R.first();
                  {!
                  |? _loop
                  |! {? R.LP=0
                     || _lp+=1;
                        R.LP:=_lp;
                        R.put()
                     ?};
                     _loop:=R.next()
                  !};
                  R.unlock()
               ?}
            ?};
            {? R.last()
            || .MAX:=R.RN
            ?}
         ?}
      ?};
      R.cntx_pop();
      .MAX
   "),

   obj_meth('get',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca wartość pola wskazanego akronimem dla rubryki wskazanej ref-em.
::   WE: _a [REFERENCE] - Ref rubryki.
::       _b [STRING]    - Akronim pola (poprawny), którego wartość ma być zwrócona.
::   WY: Wartość wskazanego pola.
::----------------------------------------------------------------------------------------------------------------------
   "  _ref:=R.ref();
      SEEK.R:=_a;
      _ret:=($('SEEK.R().'+_b))();
      SEEK.R:=_ref;
      SEEK.R();
      _ret
   ",type_of(null()),type_of(''),-1),


   obj_meth('get',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca wartość pola wskazanego akronimem dla rubryki wskazanej kodem.
::   WE: _a [INTEGER] - Kod rubryki.
::       _b [STRING] - Akronim pola (poprawny), którego wartość ma być zwrócona.
::   WY: Wartość wskazanego pola.
::----------------------------------------------------------------------------------------------------------------------
   ".get(.REF[_a],_b)",type_of(0),type_of(''),-1),


:  ---------------------------------------------------------------------------------------------------------------------
:  Metody prywatne - atrybuty
:  ---------------------------------------------------------------------------------------------------------------------


   obj_meth('test_rub',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Sprawdza, czy w podanym dniu, rubryka ma ustawiony atrybut wskazany poprzez typ i symbol.
::   WE: _a [STRING]    - Typ atrybutu (Systemowy/Użytkowy).
::       _b [INTEGER]   - Symbol atrybutu.
::       _c [REFERENCE] - Ref rubryki.
::       _d [DATE]      - Data badania stanu.
::   WY: 1 - W dniu _d rubryka _c ma ustawiony atrybut typu _a o symbolu _b.
::       0 - W dniu _d rubryka _c nie ma ustawionego atrybut typu _a o symbolu _b.
::----------------------------------------------------------------------------------------------------------------------
   "  RA_USE.index('DEF_R');
      RA_USE.prefix(_a,_b,_c);
      RA_USE.find_le(_d) & RA_USE.STAN='T'
   ",type_of(''),type_of(0),type_of(null()),type_of(date())),


   obj_meth('get_val',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Na podany dzień zwraca wartość atrybutu określonego poprzez typ i symbol.
::   WE:  _a  [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::        _b  [INTEGER] - Symbol atrybutu.
::        _c  [DATE]    - Data badania stanu.
::       [_d] [ANY]     - Wartość dowolnego typu, zwracana w przypadku nieznalezienia atrybutu [domyślnie:~~]
::   WY: Wartość atrybutu lub ~~.
::----------------------------------------------------------------------------------------------------------------------
   "  RA_VAL.index('RA_VAL');
      RA_VAL.prefix(_a,_b);
      {? RA_VAL.find_le(_c)
      || ($(RA_VAL.WARTOSC))()
      |? .find_def(_a,_b)
      || {? RA_DEF.TYP=1 || 0
         |? RA_DEF.TYP=2 || ''
         |? RA_DEF.TYP=4 || date(0,0,0)
         |? RA_DEF.TYP=5 || time(0,0,0)
         || ~~
         ?}
      |? _>3
      || _d
      || ~~
      ?}
   ",type_of(''),type_of(0),type_of(date())),


   obj_meth('get_name',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Zwraca nazwę atrybutu określonego poprzez typ i symbol.
::   WE: _a [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::       _b [INTEGER] - Symbol atrybutu.
::   WY: Nazwa atrybutu lub '' jeżeli nie znaleziono atrybutu.
::----------------------------------------------------------------------------------------------------------------------
   "{? .find_def(_a,_b)|| RA_DEF.NAZWA || '' ?}",type_of(''),type_of(0),-1),


   obj_meth('get_rub',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Na podany dzień zwraca tabelę tymczasową z rubrykami wykorzystującymi wskazany atrybut
::       określony poprzez typ i symbol.
::       Metoda CHRONI zawartość bufora tabeli R (w ramach PR/WRT/XP/21.37/2202/0036).
::   WE: _a [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::       _b [INTEGER] - Symbol atrybutu.
::       _c [DATE]    - Data badania stanu.
::   WY: Tabela tymczasowa o strukturze ustalonej przez metodę .buf() (może być pusta).
::----------------------------------------------------------------------------------------------------------------------
   "  _rub:=.buf();
      RA_USE.index('DEF_RN');
      RA_USE.prefix(_a,_b);
      {? RA_USE.last()
      || R.cntx_psh();
         R.prefix();
         _r:=null();
         {!
         |? {? _r<>RA_USE.R
            || {? RA_USE.DATA<=_c
               || _r:=RA_USE.R;
                  {? RA_USE.STAN='T'
                  || _rub.RN:=RA_USE.R().RN;
                     _rub.RT:=R.RT;
                     _rub.R:=R.ref();
                     _rub.add()
                  ?}
               ?}
            ?};
            RA_USE.prev()
         !};
         R.cntx_pop()
      ?};
      _rub
   ",type_of(''),type_of(0),type_of(date()),-1),


   obj_meth('get_zakres',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Na podany dzień zwraca tabelę tymczasową z zakresami przedziałów rubryk, które wykorzystują
::       wskazany atrybut określony poprzez typ i symbol.
::   WE: _a [INTEGER] - Symbol atrybutu.
::       _b [DATE]    - Data badania stanu.
::       _c [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::   WY: Tabela tymczasowa (patrz definicja zmiennej _zakres).
::----------------------------------------------------------------------------------------------------------------------
   "  _rub:=.get_rub(_c,_a,_b);
      _zakres:=tab_tmp(1,
         'RN_P','INTEGER','Początek',
         'RN_K','INTEGER','Koniec'
      );
      {? _rub.first()
      || _pocz:=_kon:=_rub.RN;
         {!
         |? {? _rub.next()
            || {? _rub.RN=_kon+1
               || _kon:=_rub.RN
               || _zakres.RN_P:=_pocz;
                  _zakres.RN_K:=_kon;
                  _zakres.add(1);
                  _pocz:=_kon:=_rub.RN
               ?};
               1
            || _zakres.RN_P:=_pocz;
               _zakres.RN_K:=_kon;
               _zakres.add(1);
               0
            ?}
         !}
      ?};
      _zakres
   ",type_of(0),type_of(date()),type_of('')),


   obj_meth('get_sql',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda - silnik. Na podany dzień zwraca listę kodów rubryk, które wykorzystują wskazany atrybut określony
::       poprzez typ i symbol.
::   WE: _a [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::       _b [INTEGER] - Symbol atrybutu.
::       _c [DATE]    - Data badania stanu.
::   WY: Lista w postaci ciągu znaków, w którym kody rubryk są oddzielone przecinkami.
::       Przecinki znajdują się wyłącznie między rubrykami. Jeżeli odpowiedzią jest jedna rubryka - ciąg znaków
::       nie zawiera przecinka.
::----------------------------------------------------------------------------------------------------------------------
   "  _rub:='';
      _tab:=.get_rub(_a,_b,_c);
      _loop:=_tab.first();
      {!
      |? _loop
      |! _rub+=','+$_tab.RN;
         _loop:=_tab.next()
      !};
      1-_rub
   ",type_of(''),type_of(0),type_of(date()),-1),


:  ---------------------------------------------------------------------------------------------------------------------
:  Metody publiczne
:  ---------------------------------------------------------------------------------------------------------------------


   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda inicjująca obiekt. Tworzy odpowiednie struktury i wypełnia je danymi .
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "_a.fill()"),


:  ---------------------------------------------------------------------------------------------------------------------
:  Metody publiczne - rubryki
:  ---------------------------------------------------------------------------------------------------------------------


   obj_meth('free',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda usuwa zdefiniowane tablice.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
   "  {? var_pres('REF',.)<>type_of(~~) || obj_del(.REF); .REF:=~~ ?};
      {? var_pres('RLP',.)<>type_of(~~) || obj_del(.RLP); .RLP:=~~ ?};
      {? var_pres('MAP',.)<>type_of(~~) || obj_del(.MAP); .MAP:=~~ ?};
      {? var_pres('RT',.)<>type_of(~~) || obj_del(.RT); .RT:=~~ ?};
      .reset_mod();
      1
   ",-1),


   obj_meth('alloc',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda tworzy tablice do przechowywania informacji o rubrykach.
::   WE:
::   WY: 1 - W systemie są zdefiniowane rubryki i tablice zostały utworzone.
::       0 - W systemie nie ma zdefiniowanych rubryk.
::----------------------------------------------------------------------------------------------------------------------
   "  .free();
      {? .max()=0
      || return(0)
      ?};
      _tab:=sql('select max(from_hex(substr(R.REFERENCE,9,8))) MAXREF from R');
      {? _tab.first()
      || .REF:=obj_new(.MAX);
         .RLP:=obj_new(.MAX);
         .MAP:=obj_new(.MAX);
         .RT:=obj_new(.MAX);
         {! _lp:=1 .. .MAX
         |! .REF[_lp]:=null();
            .RLP[_lp]:=null();
            .MAP[_lp]:=0;
            .RT[_lp]:=''
         !};
         1
      ?}
   ",-1),


   obj_meth('fill',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda wypełnia tablice danymi.
::   WE:
::   WY: 1 - W systemie są zdefiniowane rubryki i tablice zostały utworzone.
::       0 - W systemie nie ma zdefiniowanych rubryk.
::----------------------------------------------------------------------------------------------------------------------
   "  {? .alloc()=0
      || return(0)
      ?};

      R.cntx_psh();
      R.index('RUBLP');
      R.prefix();
      _loop:=R.first();
      {!
      |? _loop
      |! _ref:=R.ref();
         .REF[R.RN]:=_ref;
         .RLP[R.LP]:=_ref;
         .MAP[R.RN]:=R.LP;
         .RT[R.RN]:=R.RT;
         _loop:=R.next()
      !};
      R.cntx_pop();
      1
   ",-1),


   obj_meth('seek',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda ustawia bieżący rekord w tabeli R na podstawie numeru (kodu) rubryki.
::   WE: _a [INTEGER] - Kod rubryki.
::   WY: 1 - Rekord udało się wczytać.
::       0 - W systemie nie ma zdefiniowanych rubryk lub rekordu nie udało się wczytać.
::----------------------------------------------------------------------------------------------------------------------
   "  R.seek(.ref(_a))
   ",type_of(0),-1),


   obj_meth('ref',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca ref rubryki o podanym kodzie.
::   WE: _a [INTEGER] - Kod rubryki.
::   WY: Ref rekordu lub null().
::----------------------------------------------------------------------------------------------------------------------
   "  {? _a<=0 | .MAX<_a
      || null()
      || .REF[_a]
      ?}
   ",type_of(0),-1),


   obj_meth('ref',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca ref rubryki o podanym kodzie. Sprawdzana jest również klasa rubryki.
::       Jeżeli klasa nie jest zgodna z oczekiwaną to wynikiem jest null().
::   WE: _a [INTEGER] - Kod rubryki.
::       _b [STRING]  - Klasa rubryki.
::   WY: Ref rekordu lub null().
::  OLD: \kod_nieo/nieobecn.fml
::       Wcześniejsze wywołanie exec('kod_nieo','nieobecn',_a) jest równoważne obecnemu wywołaniu .ref(_a,'N')
::----------------------------------------------------------------------------------------------------------------------
   "  {? _a<=0 | .MAX<_a
      || return(null())
      ?};
      _ref:=.REF[_a];
      {? .get(_ref,'RK')=_b
      || _ref
      || null()
      ?}
   ",type_of(0),type_of(''),-1),


:  ---------------------------------------------------------------------------------------------------------------------
:  Metody publiczne - atrybuty
:  ---------------------------------------------------------------------------------------------------------------------


   obj_meth('buf',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda tworzy bufor wykorzystywanych rubryk.
::   WE:
::   WY: Alias utworzonej tabeli tymczasowej.
::  OLD: \buf_rub/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
   "  tab_tmp(1,
         'RN','INTEGER','Kod',
         'RT','STRING[20]','Nazwa',
         'R','INTEGER','Rubryka'
      )
   "),


   obj_meth('find_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda wyszukuje atrybut o podanym typie i symbolu.
::   WE: _a [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::       _b [INTEGER] - Symbol atrybutu.
::   WY: 1 - Rekord został znaleziony.
::       0 - Rekord nie został znaleziony.
::----------------------------------------------------------------------------------------------------------------------
   "  RA_DEF.index('RODZAJ');
      RA_DEF.prefix();
      RA_DEF.find_key(_a,_b)
   ",type_of(''),type_of(0),-1),


   obj_meth('find_def',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda wyszukuje atrybut o podanym symbolu i typie.
::   WE: _a [INTEGER] - Symbol atrybutu.
::       _b [STRING]  - Typ atrybutu (Systemowy/Użytkowy).
::   WY: 1 - Rekord został znaleziony.
::       0 - Rekord nie został znaleziony.
::----------------------------------------------------------------------------------------------------------------------
   "  RA_DEF.index('SYMBOL');
      RA_DEF.prefix();
      RA_DEF.find_key(_a,_b)
   ",type_of(0),type_of(''),-1),


   obj_meth('sys_attr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Sprawdza czy na określony dzień podana rubryka ma ustawiony wskazany atrybut systemowy.
::   WE:  _a  [INTEGER] - Kod rubryki.
::        _b  [INTEGER] - Symbol atrybutu (systemowego).
::       [_c] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: 1 - W dniu _c, rubryka o kodzie _a ma ustawiony atrybut systemowy o symbolu _b.
::       0 - W dniu _c, rubryka o kodzie _a nie ma ustawionego atrybutu systemowego o symbolu _b.
::----------------------------------------------------------------------------------------------------------------------
      ".test_rub('S',_b,.REF[_a],_c)",type_of(0),type_of(0),type_of(date()),-1),


   obj_meth('sys_attr',".sys_attr(_a,_b,date())",type_of(0),type_of(0),-1),


   obj_meth('sys_attr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Sprawdza czy na określony dzień podana rubryka ma ustawiony wskazany atrybut systemowy.
::   WE:  _a  [REFERENCE] - Ref rubryki.
::        _b  [INTEGER]   - Symbol atrybutu (systemowego).
::       [_c] [DATE]      - Data badania stanu [domyślnie: date()].
::   WY: 1 - W dniu _c, rubryka o kodzie _a ma ustawiony atrybut systemowy o symbolu _b.
::       0 - W dniu _c, rubryka o kodzie _a nie ma ustawionego atrybutu systemowego o symbolu _b.
::----------------------------------------------------------------------------------------------------------------------
      ".test_rub('S',_b,_a,_c)",type_of(null()),type_of(0),type_of(date()),-1),


   obj_meth('sys_attr',".sys_attr(_a,_b,date())",type_of(null()),type_of(0),-1),


   obj_meth('usr_attr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Sprawdza czy na określony dzień podana rubryka ma ustawiony wskazany atrybut użytkownika.
::   WE:  _a  [INTEGER] - Kod rubryki.
::        _b  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_c] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: 1 - W dniu _c, rubryka o kodzie _a ma ustawiony atrybut użytkownika o symbolu _b.
::       0 - W dniu _c, rubryka o kodzie _a nie ma ustawionego atrybutu użytkownika o symbolu _b.
::----------------------------------------------------------------------------------------------------------------------
      ".test_rub('U',_b,.REF[_a],_c)",type_of(0),type_of(0),type_of(date()),-1),


   obj_meth('usr_attr',".usr_attr(_a,_b,date())",type_of(0),type_of(0),-1),


   obj_meth('usr_attr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Sprawdza czy na określony dzień podana rubryka ma ustawiony wskazany atrybut użytkownika.
::   WE:  _a  [REFERENCE] - Ref rubryki.
::        _b  [INTEGER]   - Symbol atrybutu (użytkownika).
::       [_c] [DATE]      - Data badania stanu [domyślnie: date()].
::   WY: 1 - W dniu _c, rubryka o kodzie _a ma ustawiony atrybut użytkownika o symbolu _b.
::       0 - W dniu _c, rubryka o kodzie _a nie ma ustawionego atrybutu użytkownika o symbolu _b.
::----------------------------------------------------------------------------------------------------------------------
      ".test_rub('U',_b,_a,_c)",type_of(null()),type_of(0),type_of(date()),-1),


   obj_meth('usr_attr',".usr_attr(_a,_b,date())",type_of(null()),type_of(0),-1),


   obj_meth('sys_val',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca wartość atrybutu systemowego na podany dzień.
::   WE:  _a  [INTEGER] - Symbol atrybutu (systemowego).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::       [_c] [ANY]     - Wartość dowolnego typu, zwracana w przypadku nieznalezienia atrybutu [domyślnie:~~]
::   WY: Wartość atrybutu systemowego na podany dzień lub
::       ~~, jeżeli wartość nie została określona.
::----------------------------------------------------------------------------------------------------------------------
      "  {? _>2
         || .get_val('S',_a,_b,_c)
         || .get_val('S',_a,_b)
         ?}
      ",type_of(0),type_of(date())),

   obj_meth('sys_val',
      "  {? _>2
         || .sys_val(_a,date(),_c)
         || .sys_val(_a,date())
         ?}
      ",type_of(0),type_of(~~)),

   obj_meth('sys_val',".sys_val(_a,date())",type_of(0),-1),


   obj_meth('usr_val',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca wartość atrybutu użytkownika na podany dzień.
::   WE:  _a  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::       [_c] [ANY]     - Wartość dowolnego typu, zwracana w przypadku nieznalezienia atrybutu [domyślnie:~~]
::   WY: Wartość atrybutu użytkownika na podany dzień lub
::       ~~, jeżeli wartość nie została określona.
::----------------------------------------------------------------------------------------------------------------------
      "  {? _>2
         || .get_val('U',_a,_b,_c)
         || .get_val('U',_a,_b)
         ?}
      ",type_of(0),type_of(date()),-1),

   obj_meth('usr_val',
      "  {? _>2
         || .usr_val(_a,date(),_c)
         || .usr_val(_a,date())
         ?}
      ",type_of(0),type_of(~~)),

   obj_meth('usr_val',".usr_val(_a,date())",type_of(0),-1),


   obj_meth('sys_name',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca nazwę atrybutu systemowego.
::   WE: _a [INTEGER] - Symbol atrybutu (systemowego).
::   WY: Nazwa atrybutu lub '' jeżeli nie znaleziono atrybutu.
::----------------------------------------------------------------------------------------------------------------------
      ".get_name('S',_a)",type_of(0),-1),


   obj_meth('usr_name',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca nazwę atrybutu użytkowego.
::   WE: _a [INTEGER] - Symbol atrybutu (użytkowego).
::   WY: Nazwa atrybutu lub '' jeżeli nie znaleziono atrybutu.
::----------------------------------------------------------------------------------------------------------------------
      ".get_name('U',_a)",type_of(0),-1),


   obj_meth('sys_rub',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca tabelę tymczasową z rubrykami wykorzystującymi podany atrybut systemowy we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (systemowego).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Tabela tymczasowa o strukturze ustalonej przez metodę .buf() (może być pusta).
::----------------------------------------------------------------------------------------------------------------------
      ".get_rub('S',_a,_b)",type_of(0),type_of(date()),-1),


   obj_meth('sys_rub',".sys_rub(_a,date())",type_of(0),-1),


   obj_meth('usr_rub',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca tabelę tymczasową z rubrykami wykorzystującymi podany atrybut użytkownika we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Tabela tymczasowa o strukturze ustalonej przez metodę .buf() (może być pusta).
::----------------------------------------------------------------------------------------------------------------------
      ".get_rub('U',_a,_b)",type_of(0),type_of(date()),-1),


   obj_meth('usr_rub',".usr_rub(_a,date())",type_of(0),-1),


   obj_meth('sys_zakres',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca tabelę tymczasową z zakresem rubryk wykorzystujących podany atrybut systemowy we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (systemowego).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Tabela tymczasowa o strukturze ustalonej przez metodę .get_zakres() (może być pusta).
::----------------------------------------------------------------------------------------------------------------------
      ".get_zakres(_a,_b,'S')",type_of(0),type_of(date()),-1),


   obj_meth('sys_zakres',".sys_zakres(_a,date())",type_of(0),-1),


   obj_meth('usr_zakres',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca tabelę tymczasową z zakresem rubryk wykorzystujących podany atrybut użytkownika
::       we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Tabela tymczasowa o strukturze ustalonej przez metodę .get_zakres() (może być pusta).
::----------------------------------------------------------------------------------------------------------------------
      ".get_zakres(_a,_b,'U')",type_of(0),type_of(date()),-1),


   obj_meth('usr_zakres',".usr_zakres(_a,date())",type_of(0),-1),


   obj_meth('sys_sql',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca listę kodów rubryk wykorzystujących podany atrybut systemowy we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (systemowego).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Lista w postaci ciągu znaków, w którym kody rubryk są oddzielone przecinkami.
::----------------------------------------------------------------------------------------------------------------------
      ".get_sql('S',_a,_b)",type_of(0),type_of(date()),-1),


   obj_meth('sys_sql',".sys_sql(_a,date())",type_of(0),-1),


   obj_meth('usr_sql',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca listę kodów rubryk wykorzystujących podany atrybut użytkownika we wskazanym dniu.
::   WE:  _a  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::   WY: Lista w postaci ciągu znaków, w którym kody rubryk są oddzielone przecinkami.
::----------------------------------------------------------------------------------------------------------------------
      ".get_sql('U',_a,_b)",type_of(0),type_of(date()),-1),


   obj_meth('usr_sql',".usr_sql(_a,date())",type_of(0),-1),


   obj_meth('sys_kod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda do obsługi "jednoznacznych" atrybutów systemowych, związanych z dokładnie jedną rubryką - zwraca kod
::       tej rubryki (R.RN).
::   WE:  _a  [INTEGER] - Symbol atrybutu (systemowego).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::       [_c] [INTEGER] - Sposób obsługi komunikatu o błędach:
::            1 - Komunikat będzie wyświetlony.
::            0 - Komunikat nie będzie wyświetlony [domyślnie].
::   WY: Numer rubryki lub 0 w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
   "  _lista:=.sys_sql(_a,_b);
      {? _lista*','
      || {? _c
         || RAPLS.msg('','','','Atrybut systemowy %1 związany z wieloma rubrykami (%2).'@ [$_a,_lista])
         ?};
         0
      |? _lista=''
      || {? _c
         || RAPLS.msg('','','','Brak atrybutu systemowego %1 lub powiązanej z nim rubryki.'@ [$_a])
         ?};
         0
      || #_lista
      ?}
   ",type_of(0),type_of(date()),type_of(0),-1),


   obj_meth('sys_kod',".sys_kod(_a,_b,0)",type_of(0),type_of(date()),-1),


   obj_meth('sys_kod',".sys_kod(_a,date(),_c)",type_of(0),type_of(~~),type_of(0),-1),


   obj_meth('sys_kod',".sys_kod(_a,date(),0)",type_of(0),-1),


   obj_meth('usr_kod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda do obsługi "jednoznacznych" atrybutów użytkownika, związanych z dokładnie jedną rubryką - zwraca kod
::       tej rubryki (R.RN).
::   WE:  _a  [INTEGER] - Symbol atrybutu (użytkownika).
::       [_b] [DATE]    - Data badania stanu [domyślnie: date()].
::       [_c] [INTEGER] - Sposób obsługi komunikatu o błędach:
::            1 - Komunikat będzie wyświetlony.
::            0 - Komunikat nie będzie wyświetlony.
::   WY: Numer rubryki lub 0 w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
   "  _lista:=.usr_sql(_a,_b);
      {? _lista*','
      || {? _c
         || RAPLS.msg('','','','Atrybut użytkownika %1 związany z wieloma rubrykami (%2).'@ [$_a,_lista])
         ?};
         0
      |? _lista=''
      || {? _c
         || RAPLS.msg('','','','Brak atrybutu użytkownika %1 lub powiązanej z nim rubryki.'@ [$_a])
         ?};
         0
      || #_lista
      ?}
   ",type_of(0),type_of(date()),type_of(0),-1),


   obj_meth('usr_kod',".usr_kod(_a,_b,0)",type_of(0),type_of(date()),-1),


   obj_meth('usr_kod',".usr_kod(_a,date(),_c)",type_of(0),type_of(~~),type_of(0),-1),


   obj_meth('usr_kod',".usr_kod(_a,date(),0)",type_of(0),-1),


   obj_meth('ok',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda sprawdza prawidłowość parametryzacji rubryk.
::   WE: [_a] [INTEGER] - Komunikować błędy?
::             1 - Tak [domyślnie].
::             0 - Nie.
::   WY: 1 - Rubryki są sparametryzowane poprawnie.
::       0 - Rubryki nie są sparametryzowane poprawnie.
::----------------------------------------------------------------------------------------------------------------------
   "  {? .MAX=0
      || {? {? var_pres('_a')=type_of(0) || _a || 1 ?}
         || FUN.info('W systemie rubryki płacowe nie są sparametryzowane.'@)
         ?};
         0
      || 1
      ?}
   ")
);
~~


\dekl_zb_rub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Deklaruje klasę obiektu przechowującego informacje o rubryce. Wykorzystanie w wydrukach składników w formacie
::       pasków.
::   WE:
::   WY: \zb_rub/rubobj.fml
::----------------------------------------------------------------------------------------------------------------------
: zakończ, jeśli klasa została zadeklarowana.
{? var_pres('ZB_RUB',@.CLASS)>0
|| return()
?};

obj_decl('ZB_RUB',
:  pola opisujące składnik
   obj_fld('Kod',0),
   obj_fld('Nazwa',''),
   obj_fld('Klasa',''),
   obj_fld('Kwota',0),
:  informacje dla wydruku
   obj_fld('Wydruk','X'),
   obj_fld('Kolumna',0),
   obj_fld('Wiersz',0),

   obj_meth('__init',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzenie obiektu - ustawienie domyślnych, "pustych" wartości.
::----------------------------------------------------------------------------------------------------------------------
      _a.Clear()
   "),

   obj_meth(':=',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przepisuje zawartość pól obiektu.
::   WE: _a - wskazanie obiektu docelowego
::       _b - wskazanie obiektu źródłowego
::----------------------------------------------------------------------------------------------------------------------
      _a.Kod:=_b.Kod;
      _a.Nazwa:=_b.Nazwa;
      _a.Klasa:=_b.Klasa;
      _a.Kwota:=_b.Kwota;
      _a.Wydruk:=_b.Wydruk;
      _a.Kolumna:=_b.Kolumna;
      _a.Wiersz:=_b.Wiersz
   ",THIS,THIS),

   obj_meth('==',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zamienia zawartości pól obiektów
::   WE: _a - wskazanie obiektu docelowego
::       _b - wskazanie obiektu źródłowego
::----------------------------------------------------------------------------------------------------------------------
      _a.Kod==_b.Kod;
      _a.Nazwa==_b.Nazwa;
      _a.Klasa==_b.Klasa;
      _a.Kwota==_b.Kwota;
      _a.Wydruk==_b.Wydruk;
      _a.Kolumna==_b.Kolumna;
      _a.Wiersz==_b.Wiersz
   ",THIS,THIS),

   obj_meth('Clear',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawia domyślne, "puste" wartości pól obiektu.
::----------------------------------------------------------------------------------------------------------------------
      .Kod:=0;
      .Nazwa:='';
      .Klasa:='';
      .Kwota:=0;
      .Wydruk:='X';
      .Kolumna:=1;
      .Wiersz:=0
   ",-1),

   obj_meth('Set',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawia wartości pól obiektu.
::   WE:  _a  [INTEGER] - kod
::        _b  [STRING] - nazwa
::        _c  [STRING] - klasa
::       [_d] [REAL] - kwota
::       [_e] [INTEGER] - numer kolumny
::----------------------------------------------------------------------------------------------------------------------
      .Kod:=_a;
      .Nazwa:=_b;
      {? _c='' || .Klasa:=' ' || .Klasa:=_c ?};
      {? var_pres('_d')=1 || .Kwota:=_d || .Kwota:=0 ?};
      {? var_pres('_e')=1 || .Kolumna:=_e || .Kolumna:=1 ?};
      .Wiersz:=0;
      .Wydruk:='X';
      _a
   ",type_of(0),type_of(''),type_of('')),

   obj_meth('Out',"
      .Wydruk:=
         {? _a='N' & _b='N' || 'H'
         |? _a='T' & _b='T' || '*'
         |? _a='T' || 'L'
         |? _b='T' || 'Z'
         || 'H'
         ?}
   ",type_of(''),type_of(''))
)

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 33caf6c6445db2eab66e7177da23e5226fbd063bf1504b45f996cbd942d9efcfa311d727631d97830fa4427af07481c5ccc38b13265e3ad3855a17c713387ffa891a28c62c7a4763bed008b6023531ce608976a919fcfe313857b0fbfb873ecbb87959722bda66a1018078017a6d865a09f6f46322c82db22b06cd0fbc6f9e69
