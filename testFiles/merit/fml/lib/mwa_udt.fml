:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_udt.fml
:: Utworzony: 08.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi umów przez MacroWebAPI
::======================================================================================================================


\serialize_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji umów
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   UDT.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'ZLEC',,'ODD',,'REFERENCE',,'IDADD',
      ,'FIRMA',,'NR',,'ID',,'SYM',,'SYM_ZEW',,'OPIS',
      ,'SLO_TYP',,'SLO_RODZ',,'SLO_KAT',
      ,'DATAP',,'DATAO',,'DATAZ',,'WUM',,'GODZ',,'TYP',,'ZAK',
      ,'JORG',,'ID_KSG',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\serialize_udt_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji umów
::   WE: _a - parametry
::       _b - STRING - treść błędu
::       _c - _wsenv
::----------------------------------------------------------------------------------------------------------------------
{? _ >= 3
|| _wsenv:=_c
|| _wsenv:=exec('wsenv','#mwapi')
?};
_wsenv.erase();
_wsenv.add_error(_b);
_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_a,_resp);
_result


\serialize_udt_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji umów
::   WE: _a - parametry
::       _b - STRING - treść informacji
::       _c - _wsenv
::----------------------------------------------------------------------------------------------------------------------
{? _ >= 3
|| _wsenv:=_c
|| _wsenv:=exec('wsenv','#mwapi')
?};
_wsenv.erase();
_wsenv.add_info(_b);
_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_a,_resp,1);
_result


\set_fields_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Ustawia pola umowy
::   WE: _a - STRING - parametry umowy
::----------------------------------------------------------------------------------------------------------------------
exec('set_fields','mwapi',_a);

:: Opisy pól:
:: #FIRMA Firma
:: #NR Numer umowy (INTEGER) <font color="0000FF">(automatyczne)</font>
:: #ID_KSG Unikalny identyfikator księgowy umowy (INTEGER) <font color="FF00FF">(unikalne)</font>
:: #ID Identyfikator techniczny umowy np. LOTUS ID (STRING[32]) <font color="FF00FF">(unikalne)</font>
:: #SYM Symbol umowy (STRING[16]) <font color="0000FF">(automatyczne)</font>
:: #SYM_ZEW Symbol zewnętrzny umowy (STRING[30])
:: #OPIS Nazwa umowy (STRING[100])
:: #SLO_TYP Typ umowy (_SLO)
:: #SLO_RODZ Rodzaj umowy (_SLO)
:: #SLO_KAT Kategoria umowy (_SLO)
:: ##ZLEC Kontrahent (_KH)
:: #DATAP Data podpisania umowy
:: #DATAO Data rozpoczęcia umowy
:: #DATAZ Data zakończenia umowy
:: #WUM Pierwotna wartość umowy
:: #GODZ Całkowity limit godzin umowy (INTEGER)
:: #TYP Typ umowy (STRING[1]) - T-długoterminowa N-nie
:: #ZAK Status umowy (STRING[1]) - N-aktywna X-anulowana T-zakończona
:: ##ODD Jednostka księgowa umowy (_ODD)
:: #JORG Jednostka organizacyjna umowy (_UD_SKL)
~~


\read_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie umowy
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_result:=exec('authorized','mwa_udt',_par);

{? type_of(_result)=0
||
:: #PARAM firma Symbol firmy [domyślnie: wszystkie]
   _firma:=null();
   _firma_str:=exec('get_option','mwapi',_par,'firma').value;
   {? _firma_str<>''
   || FIRMA.cntx_psh();
      FIRMA.index('SYMBOL'); FIRMA.prefix(_firma_str,);
      {? FIRMA.first()
      || _firma:=FIRMA.ref()
      ?};
      FIRMA.cntx_pop()
   ?};
   {? _firma_str<>'' & _firma=null()
   || _result:=exec('serialize_udt_error','mwa_udt',_par,'Nie znaleziono firmy: %1.'@[_firma_str])
   || UDT.cntx_psh();
      UDT.index('SYM');
      {? _firma=null() || UDT.prefix() || UDT.prefix(_firma) ?};
      {? UDT.first()
      ||
         _result:=exec('serialize_udt','mwa_udt',_par)
      ||
         _result:=exec('serialize_udt_error','mwa_udt',_par,'Brak umów w systemie.'@)
      ?};
      UDT.cntx_pop()
   ?}
?};
_result


\create_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Dodaje umowę w oparciu o przekazane parametry.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'UDT');
_fields_udt:='UDT'+_option.fields;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

UDT.prefix();
UDT.blank();
UDT.ODD:=null;
exec('set_fields_udt','mwa_udt',_fields_udt);
UDT.ID_KSG:=exec('bl_udt_id','projekty');

_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KUMR';
_params.AKCJA:='Dołącz';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID);
_params.QUIET:='T';
_params.PROC_START:='T';
exec('mp_run','#b__box',_params);

{? ~_wsenv.has_errors()
|| _result:=exec('read_udt_get_row','mwa_udt',_par,UDT.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\read_udt_get_row
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dane umowy
::   WE: _a _params
::       _b idadd
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
_idadd:=_b;
UDT.cntx_psh();
UDT.index('IDADD');
{? idtime_valid(_idadd)
||
   UDT.prefix(_idadd);
   {? UDT.first()
   || _result:=exec('serialize_udt','mwa_udt',_par)
   || _result:=exec('serialize_udt_error','mwa_udt',_par,'Nie znaleziono umowy.'@)
   ?}
|| _result:=exec('serialize_udt_error','mwa_udt',_par,'Nie znaleziono umowy.'@)
?};
UDT.cntx_pop();
_result


\read_udt_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dane umowy
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_result:=exec('authorized','mwa_udt',_par);

{? type_of(_result)=0
|| _idadd:=exec('get_option','mwapi',_par,'IDADD').value;
   _result:=exec('read_udt_get_row','mwa_udt',_par,_idadd)
?};

_result


\read_udt_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dane umowy wg refsql
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_result:=exec('authorized','mwa_udt',_par);

{? type_of(_result)=0
|| _ref:=exec('get_option','mwapi',_par,'ref').value;

   UDT.cntx_psh();
   UDT.prefix();
   {? UDT.seek(_ref)
   || UDT.index('IDADD');
      UDT.prefix(UDT.IDADD);
      _result:=exec('serialize_udt','mwa_udt',_par)
   || _result:=exec('serialize_udt_error','mwa_udt',_par,'Nie znaleziono umowy.'@)
   ?};
   UDT.cntx_pop()
?};
_result


\read_udt_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dane umowy wg identyfikatora technicznego
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_result:=exec('authorized','mwa_udt',_par);

{? type_of(_result)=0
|| _id:=exec('get_option','mwapi',_par,'Id').value;

   UDT.cntx_psh();
   UDT.index('ID');
   UDT.prefix(_id,);
   {? UDT.first()
   || _result:=exec('serialize_udt','mwa_udt',_par)
   || _result:=exec('serialize_udt_error','mwa_udt',_par,'Nie znaleziono umowy.'@)
   ?};
   UDT.cntx_pop()
?};
_result


\delete_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Usuwa daną umowę
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;

UDT.cntx_psh();
{? 8+_idadd='umdlterm'
|| UDT.prefix();
   {? UDT.seek(_idadd)
   || _idadd:=UDT.IDADD
   || _idadd:=''
   ?}
?};
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();
{? _idadd<>'' & idtime_valid(_idadd)
|| UDT.index('IDADD');
   UDT.prefix(_idadd);
   {? UDT.first()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KUMR';
      _params.AKCJA:='Usuń';
      _params.QUIET:='T';
      exec('mp_run','#b__box',_params);
      {? UDT.first()
      || _wsenv.add_error('Nie udało się usunąć umowy.'@)
      || _wsenv.add_info('Usunięto umowę.'@)
      ?}
   || _wsenv.add_error('Nie znaleziono umowy.'@)
   ?}
|| _wsenv.add_error('Nie znaleziono umowy.'@)
?};

_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_par,_resp, {? _wsenv.has_errors() || 0 || 1 ?});

UDT.cntx_pop();
_result


\update_udt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Modyfikuje daną umowę
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_error:='';

_option:=exec('get_option','mwapi',_par,'udt.IDADD');
_idadd:=_option.value;

_fields_udt:='UDT'+_option.fields;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();
{? _idadd<>''
||
   UDT.index('IDADD');
   UDT.prefix(_idadd);
   {? UDT.first()
   || exec('set_fields_udt','mwa_udt',_fields_udt);
      _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KUMR';
      _params.AKCJA:='Popraw';
      _params.QUIET:='T';
      exec('mp_run','#b__box',_params)
   || _error:='Nie znaleziono umowy.'@
   ?}
|| _error:='Nie przekazano IDADD.'@
?};

{? ~_wsenv.has_errors() & _error=''
||
   _result:=exec('read_udt_get_row','mwa_udt',_par,UDT.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\authorized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Sprawdza uprawnienia do odglądania umów
::   WY: ~~ / obiekt plikowy xml (odpowiedź z błędem)
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;

_result:=~~;
{? ~exec('authorized','#b__box','ZWS_UMO','ZWS')
|| _result:=exec('serialize_udt_error','mwa_udt',_par,'Brak uprawnień do przeglądania umów.'@)
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 64821094cdb130994f95a90668767eed8af8f9ac18dabe14b16ac785f2443eeecaaf5153639ffc14a71f90f2531976e2dbd0601c56d6c5c7bed2ac39421b6dd5882d093f26099e5234ea7c68f5fac2873f08511e1e081539bf9d382b3d56b9ec18bc8c23b1fa0e5d82b93e4cb01b9f01200e383d71166aeea108971013469f68
