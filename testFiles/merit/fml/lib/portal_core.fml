:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_core.fml
:: Utworzony: 29.10.2020
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły wspólne obsługujące metody dostępu do HR Portal.
::======================================================================================================================


\renameMethod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Przenazwanie zbyt długich nazw metod API na odpowiedniej długości nazwy formuli
::   WE: _a [STRING] - nazwa metody API
::   WY: metoda formuli użyta do obsługi
::----------------------------------------------------------------------------------------------------------------------
_method:={? var_pres('_a')=type_of('') || _a || return('') ?};

:: zmieniamy tylko te metody API, które po doklejeniu sufiksu będą miały więcej niż 31 znaków
{? _method='sl_TenantDataDictionaryDelete'
|| _method:='sl_TenantDataDictDelete'
|? _method='sl_TenantDataDictionaryGet'
|| _method:='sl_TenantDataDictGet'
|? _method='sl_TenantDataDictionaryModify'
|| _method:='sl_TenantDataDictModify'
|? _method='sl_TenantLookupCodesModify'
|| _method:='sl_TenantLookupCModify'
|? _method='sl_TenantLookupCodesDelete'
|| _method:='sl_TenantLookupCDelete'
|? _method='sl_TenantLookupCodeItemsGet'
|| _method:='sl_TenantLookupCItGet'
|? _method='sl_TenantLookupCodeItemsModify'
|| _method:='sl_TenantLookupCItModify'
|? _method='sl_TenantLookupCodeItemsDelete'
|| _method:='sl_TenantLookupCItDelete'
|? _method='SL_GETBYPOSTDATAABOUTENTITIESTOSYNC'
|| _method:='sl_GetEntitiesToSync'
|? _method='csl_TenantUserCompanyModify'
|| _method:='csl_TenantUserCompModify'
|? _method='csl_TenantUserCompanyDelete'
|| _method:='csl_TenantUserCompDelete'
|? _method='chr_PersonBankAccountDelete'
|| _method:='chr_PersonBankAccDelete'
|? _method='chr_PersonBankAccountGet'
|| _method:='chr_PersonBankAccGet'
|? _method='chr_PersonBankAccountModify'
|| _method:='chr_PersonBankAccModify'
|? _method='chr_PersonInsuranceInfoDelete'
|| _method:='chr_PersonInsurInfoDelete'
|? _method='chr_PersonInsuranceInfoGet'
|| _method:='chr_PersonInsurInfoGet'
|? _method='chr_PersonInsuranceInfoModify'
|| _method:='chr_PersonInsurInfoModify'
|? _method='chr_PersonPayoutMethodDelete'
|| _method:='chr_PersonPayMethDelete'
|? _method='chr_PersonPayoutMethodGet'
|| _method:='chr_PersonPayMethGet'
|? _method='chr_PersonPayoutMethodModify'
|| _method:='chr_PersonPayMethModify'
|? _method='chr_PersonEmployInfoDelete'
|| _method:='chr_PersonEmployDelete'
|? _method='chr_PersonEmployInfoGet'
|| _method:='chr_PersonEmployGet'
|? _method='chr_PersonEmployInfoModify'
|| _method:='chr_PersonEmployModify'
|? _method='chr_PersonPayElementDelete'
|| _method:='chr_PersonPayElemDelete'
|? _method='chr_PersonPayElementGet'
|| _method:='chr_PersonPayElemGet'
|? _method='chr_PersonPayElementModify'
|| _method:='chr_PersonPayElemModify'
|? _method='chr_PersonLoanRepaymentDelete'
|| _method:='chr_PersonLoanRDelete'
|? _method='chr_PersonLoanRepaymentGet'
|| _method:='chr_PersonLoanRGet'
|? _method='chr_PersonLoanRepaymentModify'
|| _method:='chr_PersonLoanRModify'
|? _method='chr_PersonContributionDelete'
|| _method:='chr_PersonContribDelete'
|? _method='chr_PersonContributionGet'
|| _method:='chr_PersonContribGet'
|? _method='chr_PersonContributionModify'
|| _method:='chr_PersonContribModify'
|? _method='chr_PersonContributionPayDelete'
|| _method:='chr_PersonContribPDelete'
|? _method='chr_PersonContributionPayGet'
|| _method:='chr_PersonContribPGet'
|? _method='chr_PersonContributionPayModify'
|| _method:='chr_PersonContribPModify'
|? _method='chr_PayCompGroupConfigDelete'
|| _method:='chr_PayCompGrpCfgDelete'
|? _method='chr_PayCompGroupConfigGet'
|| _method:='chr_PayCompGrpCfgGet'
|? _method='chr_PayCompGroupConfigModify'
|| _method:='chr_PayCompGrpCfgModify'
|? _method='chr_QuestionCategoryDelete'
|| _method:='chr_QuestionCatDelete'
|? _method='chr_QuestionCategoryGet'
|| _method:='chr_QuestionCatGet'
|? _method='chr_QuestionCategoryModify'
|| _method:='chr_QuestionCatModify'
|? _method='chr_PPKParticipationDelete'
|| _method:='chr_PPKPartDelete'
|? _method='chr_PPKParticipationGet'
|| _method:='chr_PPKPartGet'
|? _method='chr_PPKParticipationModify'
|| _method:='chr_PPKPartModify'
|? _method='chr_PayElementsConfigDelete'
|| _method:='chr_PayElemCfgDelete'
|? _method='chr_PayElementsConfigGet'
|| _method:='chr_PayElemCfgGet'
|? _method='chr_PayElementsConfigModify'
|| _method:='chr_PayElemCfgModify'
|? _method='chr_PayElementsConfigDDelete'
|| _method:='chr_PayElemCfgDDelete'
|? _method='chr_PayElementsConfigDGet'
|| _method:='chr_PayElemCfgDGet'
|? _method='chr_PayElementsConfigDModify'
|| _method:='chr_PayElemCfgDModify'
|? _method='chr_PersonRequestParDefsModify'
|| _method:='chr_PersonReqDefsModify'
|? _method='chr_PersonRequestParDefsGet'
|| _method:='chr_PersonReqDefsGet'
|? _method='chr_PersonRequestParDefsDelete'
|| _method:='chr_PersonReqDefsDelete'
|? _method='cseod_AcceptanceHeaderModify'
|| _method:='cseod_AcceptHeaderModify'
|? _method='chr_PersonContractAccountDelete'
|| _method:='chr_PersonCntrctADelete'
|? _method='chr_PersonContractAccountGet'
|| _method:='chr_PersonCntrctAGet'
|? _method='chr_PersonContractAccountModify'
|| _method:='chr_PersonCntrctAModify'
|? _method='chr_PersonLeaveLimitDelete'
|| _method:='chr_PersonAbsLimitDelete'
|? _method='chr_PersonLeaveLimitGet'
|| _method:='chr_PersonAbsLimitGet'
|? _method='chr_PersonLeaveLimitModify'
|| _method:='chr_PersonAbsLimitModify'
|? _method='chr_PersonWorkScheduleModify'
|| _method:='chr_PersonWSchedModify'
|? _method='chr_PersonWorkScheduleDelete'
|| _method:='chr_PersonWSchedDelete'
|? _method='chr_PersonAbsenceRequestDelete'
|| _method:='chr_PersonAbsReqDelete'
|? _method='chr_PersonAbsenceRequestGet'
|| _method:='chr_PersonAbsReqGet'
|? _method='chr_PersonAbsenceRequestModify'
|| _method:='chr_PersonAbsReqModify'
|? _method='chr_KnowledgeBaseCategoryDelete'
|| _method:='chr_KnowledgeBCatDelete'
|? _method='chr_KnowledgeBaseCategoryGet'
|| _method:='chr_KnowledgeBCatGet'
|? _method='chr_KnowledgeBaseCategoryModify'
|| _method:='chr_KnowledgeBCatModify'
|? _method='chr_PersonReplacementModify'
|| _method:='chr_PersonRepModify'
|? _method='chr_PersonReplacementDelete'
|| _method:='chr_PersonRepDelete'
|? _method='chr_PersonReplacementRoleDelete'
|| _method:='chr_PersonRepRoleDelete'
|? _method='chr_PersonReplacementRoleModify'
|| _method:='chr_PersonRepRoleModify'
|? _method='chr_PersonReplacementRoleGet'
|| _method:='chr_PersonRepRoleGet'
|? _method='chr_PositionInOrganizationDelete'
|| _method:='chr_PositionInOrgDelete'
|? _method='chr_PositionInOrganizationGet'
|| _method:='chr_PositionInOrgGet'
|? _method='chr_PositionInOrganizationModify'
|| _method:='chr_PositionInOrgModify'
|? _method='chr_KnowledgeBaseItemDelete'
|| _method:='chr_KnowledgeBItemDelete'
|? _method='chr_KnowledgeBaseItemGet'
|| _method:='chr_KnowledgeBItemGet'
|? _method='chr_KnowledgeBaseItemModify'
|| _method:='chr_KnowledgeBItemModify'
|? _method='chr_DepartmentHierarchyDelete'
|| _method:='chr_DepartmentHierDelete'
|? _method='chr_DepartmentHierarchyGet'
|| _method:='chr_DepartmentHierGet'
|? _method='chr_DepartmentHierarchyModify'
|| _method:='chr_DepartmentHierModify'
|? _method='sl_TenantUserRowRightsGet'
|| _method:='sl_TenantUserRowRGet'
|? _method='sl_TenantUserRowRightsModify'
|| _method:='sl_TenantUserRowRModify'
|? _method='sl_TenantUserRowRightsDelete'
|| _method:='sl_TenantUserRowRDelete'
|? _method='chr_PersonBonusForAssignmentDelete'
|| _method:='chr_PersonBonusFADelete'
|? _method='chr_PersonBonusForAssignmentGet'
|| _method:='chr_PersonBonusFAGet'
|? _method='chr_PersonBonusForAssignmentModify'
|| _method:='chr_PersonBonusFAModify'
|? _method='chr_AdsImprovementCategoryDelete'
|| _method:='chr_AdsImprCatDelete'
|? _method='chr_AdsImprovementCategoryGet'
|| _method:='chr_AdsImprCatGet'
|? _method='chr_AdsImprovementCategoryModify'
|| _method:='chr_AdsImprCatModify'
|? _method='chr_AdsImprovCategoryPersonDelete'
|| _method:='chr_AdsImprCatPerDelete'
|? _method='chr_AdsImprovCategoryPersonGet'
|| _method:='chr_AdsImprCatPerGet'
|? _method='chr_AdsImprovCategoryPersonModify'
|| _method:='chr_AdsImprCatPerModify'
|? _method='chr_AdsImprovementPersonDelete'
|| _method:='chr_AdsImprPerDelete'
|? _method='chr_AdsImprovementPersonGet'
|| _method:='chr_AdsImprPerGet'
|? _method='chr_AdsImprovementPersonModify'
|| _method:='chr_AdsImprPerModify'
|? _method='chr_AdsImprovementVoteDelete'
|| _method:='chr_AdsImprVoteDelete'
|? _method='chr_AdsImprovementVoteGet'
|| _method:='chr_AdsImprVoteGet'
|? _method='chr_AdsImprovementVoteModify'
|| _method:='chr_AdsImprVoteModify'
|? _method='chr_AdsImprovementRatingDelete'
|| _method:='chr_AdsImprRatingDelete'
|? _method='chr_AdsImprovementRatingGet'
|| _method:='chr_AdsImprRatingGet'
|? _method='chr_AdsImprovementRatingModify'
|| _method:='chr_AdsImprRatingModify'
|? _method='chr_PersonWorkingHoursDelete'
|| _method:='chr_PersonWorkingHDelete'
|? _method='chr_PersonWorkingHoursGet'
|| _method:='chr_PersonWorkingHGet'
|? _method='chr_PersonWorkingHoursModify'
|| _method:='chr_PersonWorkingHModify'
|? _method='SL_RGT_OPRGRUPYCOMMUNICATE_GET'
|| _method:='SL_RGT_OPRGRUPYCOMM_GET'
|? _method='chr_RequestResponsiblePersonModify'
|| _method:='chr_RequestRespPerModify'
|? _method='chr_RequestResponsiblePersonDelete'
|| _method:='chr_RequestRespPerDelete'
|? _method='sl_AttachmentConfirmSettingDelete'
|| _method:='sl_AttachConfirmSDelete'
|? _method='sl_AttachmentConfirmSettingGet'
|| _method:='sl_AttachConfirmSGet'
|? _method='sl_AttachmentConfirmSettingModify'
|| _method:='sl_AttachConfirmSModify'
|? _method='chr_RequestExecutingPersonModify'
|| _method:='chr_RequestExecPerModify'
|? _method='chr_RequestExecutingPersonDelete'
|| _method:='chr_RequestExecPerDelete'
|? _method='chr_RequestTypeParDefParamModify'
|| _method:='chr_RequestTParDefPModify'
|? _method='chr_RequestTypeParDefParamDelete'
|| _method:='chr_RequestTParDefPDelete'
|? _method='sl_TenantGenericDashItemsModify'
|| _method:='sl_TenantGenDashIModify'
|? _method='rgt_OprGrupyCommunicateGet'
|| _method:='rgt_OprGrupyCommGet'
|? _method='cseod_AcceptanceHeaderDelete'
|| _method:='cseod_AcceptHeaderDelete'
|? _method='chr_CourseDefinitionDelete'
|| _method:='chr_CourseDefinDelete'
|? _method='chr_CourseDefinitionModify'
|| _method:='chr_CourseDefinModify'
|? _method='sl_OperatorCertificatesModify'
|| _method:='sl_OperCertModify'
|? _method='sl_OperatorCertificatesGet'
|| _method:='sl_OperCertGet'
|? _method='sl_OperatorCertificatesDelete'
|| _method:='sl_OperCertDelete'
|? _method='chr_PersonAnnualPayCompDelete'
|| _method:='chr_PersonAPCDelete'
::|? _method='chr_PersonAnnualPayCompGet'
::|| _method:='chr_PersonAPCGet'
|? _method='chr_PersonAnnualPayCompModify'
|| _method:='chr_PersonAPCModify'
|? _method='chr_PersonAnnualPayCompDetDelete'
|| _method:='chr_PersonAPCDetDelete'
::|? _method='chr_PersonAnnualPayCompDetGet'
::|| _method:='chr_PersonAPCDetGet'
|? _method='chr_PersonAnnualPayCompDetModify'
|| _method:='chr_PersonAPCDetModify'
|? _method='chr_PersonWorkCalendarGet'
|| _method:='chr_PersonWorkCalGet'
|? _method='chr_PersonWorkCalendarModify'
|| _method:='chr_PersonWorkCalModify'
|? _method='chr_PersonWorkCalendarDelete'
|| _method:='chr_PersonWorkCalDelete'
|? _method='chr_PersonDeclarationModify'
|| _method:='chr_PersonDeclModify'
|? _method='chr_PersonDeclarationDelete'
|| _method:='chr_PersonDeclDelete'
|? _method='csl_PCRightsDefinitionGet'
|| _method:='csl_PCRightsDefGet'
|? _method='chr_PersonResendRegMailModify'
|| _method:='chr_PResendRegMailModify'
:: Praca poza siedzibą firmy
|? _method='chr_PersonWorkCalendarDelete'
|| _method:='chr_PersonWorkCalDelete'
|? _method='chr_PersonWorkCalendarGet'
|| _method:='chr_PersonWorkCalGet'
|? _method='chr_PersonWorkCalendarModify'
|| _method:='chr_PersonWorkCalModify'
|? _method='chr_WorkRelatedEventTypeDelete'
|| _method:='chr_WorkRelEventTDelete'
|? _method='chr_WorkRelatedEventTypeModify'
|| _method:='chr_WorkRelEventTModify'
|? _method='chr_PersonWorkRelatedEventLDelete'
|| _method:='chr_PersWorkREventLDelete'
|? _method='chr_PersonWorkRelatedEventLGet'
|| _method:='chr_PersWorkREventLGet'
|? _method='chr_PersonWorkRelatedEventLModify'
|| _method:='chr_PersWorkREventLModify'
|? _method='chr_PersonDeclarationModify'
|| _method:='chr_PersonDeclModify'
|? _method='chr_PersonDeclarationDelete'
|| _method:='chr_PersonDeclDelete'
|? _method='chr_PersonLimWorkTypeModify'
|| _method:='chr_PerLimWorkTModify'
|? _method='chr_PersonLimWorkTypeDelete'
|| _method:='chr_PerLimWorkTDelete'
:: SEOD
|? _method='cseod_BCAddresHistoryModify'
|| _method:='cseod_BCAddresHModify'
|? _method='cseod_PurchaseDocumentModify'
|| _method:='cseod_PurchaseDocModify'
|? _method='cseod_PurchaseDocumentGet'
|| _method:='cseod_PurchaseDocGet'
|? _method='cseod_PurchaseDocumentDelete'
|| _method:='cseod_PurchaseDocDel'
|? _method='cseod_CostCenterTypeTenantModify'
|| _method:='cseod_CostTypeTModify'
|? _method='cseod_CostCenterTypeTenantDelete'
|| _method:='cseod_CostTypeTDelete'
|? _method='sl_TenantExfAvailCtrlValSetModify'
|| _method:='sl_TExfAvailCValModify'
|? _method='sl_TenantExfAvailCtrlValSetDelete'
|| _method:='sl_TExfAvailCValDelete'
|? _method='cseod_BusinessTripReasonModify'
|| _method:='cseod_BTReasonModify'
|? _method='cseod_BusinessTripReasonDelete'
|| _method:='cseod_BTReasonDelete'
|? _method='cseod_BusinessTripVehicleModify'
|| _method:='cseod_BTVehicleModify'
|? _method='cseod_BusinessTripVehicleDelete'
|| _method:='cseod_BTVehicleDelete'
|? _method='cseod_BusinessTripGet'
|| _method:='cseod_BTGet'
|? _method='cseod_BusinessTripModify'
|| _method:='cseod_BTModify'
|? _method='cseod_BusinessTripDelete'
|| _method:='cseod_BTDelete'
|? _method='cseod_PaymentTypeTenantDelete'
|| _method:='cseod_PaymentTTDelete'
|? _method='cseod_PaymentTypeTenantModify'
|| _method:='cseod_PaymentTTModify'
?};

_method


::======================================================================================================================
:: Metody dostępu do portalu - uniwersalne.
::======================================================================================================================


\Get_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna funkcja parametrów dla zapytań "Get"
::   WE: _a - liczba zamawianych rekordów (standardowo zwracane jest 100)
::   WY: tablica z elementem JSON
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _order_count:=$_a || _order_count:='null' ?};

params_set(params_get());
_env:=params_get().env;

_pos:=_env.Param*'|';
_modified_date:={? _pos=0 || _env.Param || (_pos-1)+_env.Param ?};
_id_cloud:={? _pos=0 || 0 || #(_pos-_env.Param) ?};
_method:=_env.MethodName;

_args:=obj_new('JSON');
_args.JSON:=exec('json_man','__jsonm','
   {
      "Array%1Data": {
         "%1Data": [{
            "__OrderCount": %2,
            "__id_cloud": %3,
            "__ModifiedDate_cloud": %4
         }]
      }
   }
'
[  _method,
   _order_count,
   {? _id_cloud=0 || 'null' || json_value(_id_cloud) ?},
   {? _modified_date='' | _modified_date=~~ || json_value('2000-01-01T00:00:00') || json_value(_modified_date) ?}
]).getJSON();
_args


\Get_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalne parsowanie odpowiedzi dla zapytań "Get"
::       Przetwarza dane i modyfikuje zbiór rekordów wskazanej tabeli
::   WE: _a - Kod identyfikatora rekordu
::       _b - FORMULA - wykonywana w kontekście rekordu tabeli TAB (gdy jest) z argumentami:
::                      _a=Response.ArrayResult.Result[i], _b='put' (gdy modyfikacja rekordu w chmurze)
::                      _a=Response.ArrayResult.Result[i], _b='del' (gdy usunięcie rekordu w chmurze)
::                      w przypadku udanego zmodyfikowania/usunięcia rekordu formuła powinna zwrócić '', wpp. ~~
::                    - dodająca rekord tabeli TAB z argumentami:
::                      _a=Response.ArrayResult.Result[i], _b='add'
::                      w przypadku udanego dołączenia formuła powinna zwrócić uidref() rekordu, wpp. ~~
::   WY: data+czas modyfikacji w cloud (tekst) + '|'+ $id_cloud / '' - zapamiętywane w definicji gdy akcja jest udana
::       ~~ - w przypadku niepowodzenia, 0 - w przypadku błędu (np. komunikacji)
::       Dodatkowo, o ile w danej encji są jeszcze dane (można wykonać kolejne pytanie), to ustawiany jest _env.Loop:=1
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_response:=_env.InetResponse;
_method:=_env.MethodName;
_TAB:=($_env.TabAcr)();

_sync_id:=_a;
_formula:=_b;

_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

:: Przed uruchomieniem zakładamy, że nie będzie zapętlania
_env.Loop:=0;

{? _response.Status=200
||
   _jman:=exec('json_man','__jsonm',_data,'silent');
::   _jman:=exec('json_man','__jsonm',_data);

:: Podręczny obiekt JMAN przekazywany do właściwych formuł parsujących
   _obj:=_jman.new('{}');

:: Przygotowanie wzorca dla elementu tablicy
   _obj1:=_jman.new('{}');
   {? _env.ResponseTemplate<>''
   || _jman1:=_jman.new(_env.ResponseTemplate);
      {? _jman1.isPath('Array%1Result.%1Result[1]'[_method])
      || _obj1.load(_jman1.getJSON('Array%1Result.%1Result[1]'[_method]))
      ?}
   ?};

:: Wyniki dla wielu zapisów: uwzględniamy tylko te rekordy, dla których: ModifiedDate_cloud>ModifiedDate_erp
:: Wyznaczamy najpóźniejszą datę ModifiedDate_cloud, dla której zostały pobrane dane
   {? _jman.Valid=0
   || KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _jman.getValue('%1Response.Array%1Result.Status'[_method])<>1
      || KOMM.msg(
            'Błąd %1 (%2)'@
            [  $_jman.getValue('%1Response.Array%1Result.ErrorCode'[_method]),
               utf8_maz(_jman.getValue('%1Response.Array%1Result.ErrorMessage'[_method]))
            ],0
         )

      |? _jman.typeOf('%1Response.Array%1Result.%1Result'[_method],1)='A'
::       Jeżeli odpowiedź nie jest typu 'A' to najprawdopodobniej brakuje danych na portalu.
      || _count:=_jman.countChildren('%1Response.Array%1Result.%1Result'[_method]);
::       Sprawdzamy, czy jest kolejna porcja danych
         _env.Loop:=(_jman.getValue('%1Response.Array%1Result.MoreResult'[_method])>0);
::       Zmienna kontrolna - jak coś się nie uda zostanie odrzucona cała paczka danych
         _is_ok:=1;
         {? _count>0
         || _env.logApp(,'Liczba rekordów: %1'[$_count]);
            _env.logApp(,'Czy są jeszcze rekordy: %1'[$_env.Loop]);
            _result:=''; _res_date:=''; _res_id:=0;
::          Ręczne wspomaganie kolejności przetwarzania. Elementy w tablicy czasami NIE przychodzą w kolejności
::          znaczników modyfikacji.
            _MDC:=tab_tmp(1
               ,'TS','STRING[30]','Znacznik modyfikacji rekordu'
               ,'LP','INTEGER','Lp.'
            );
            {! _it:=1.. _count
            |! _MDC.TS:=_jman.getValue('%1Response.Array%1Result.%1Result[%2].__ModifiedDate_cloud'[_method,$_it]);
               _MDC.LP:=_it;
               _MDC.add()
            !};
            _loop:=_MDC.first();
            {!
            |? _loop
            |! _it:=_MDC.LP;
               _loop:=_MDC.next();

               _json:=fopen(null(),'Uw',,,1);
               _jman.getJSON('%1Response.Array%1Result.%1Result[%2]'[_method,$_it],_json);
               _obj.load(_json);

::             Iteracja po polach wzorca i uzupełnienie struktury o brakujące pola z wartością null
::             Dalej będzie przetwarzany JSON uzupełniony o te brakujące pola
               _names:=_obj1.getChildrenNames();
               {! _it1:=1.. obj_len(_names)
               |! {? _obj.typeOf(_names[_it1],1)='?'
                  || _obj.setValue(_obj.addChildElement('',_names[_it1]))
                  ?}
               !};
               obj_del(_names);

               _date_cloud:=_obj.getValue('__ModifiedDate_cloud');
               _date_erp:=_obj.getValue('__ModifiedDate_erp');

               {? _date_cloud>_date_erp
               || _TAB.cntx_psh();
                  _TAB.prefix();
::                Dane zostały odebrane z portalu - pole __id_cloud (powinno/musi) jest wypełnione.
                  _id_cloud:=_obj.getValue('__id_cloud');
::                Pole __id_erp może nie być wypełnione. Oznacza to jedną z dwóch sytuacji:
::                   1. W Mericie odpowiedni rekord jeszcze nie został utworzony.
::                   2. Rekord w Mericie został utworzony, tylko jego __id_erp nie został jeszcze wysłany na portal.
                  _id_erp:=_obj.getValue('__id_erp');

::                Sprawdzamy, czy mamy już informację o __id_cloud w naszych tabelach.
::                Zakładamy, że to co powstaje na portalu trafia do jednego rekordu!
                  {? type_of(_id_erp)=type_of(~~)
                  || _id_erp:=exec('get_id_erp','portal_core',_sync_id,_id_cloud,,'uidref')
                  ?};
                  {? +_id_erp>=48 & type_of(ref_tab(48+_id_erp))>0 & ref_tab(48+_id_erp)=_TAB
                  || _wm:=ref_name(48+_id_erp);
                     {? _TAB.name()<>_wm
                     || _TAB.use(_wm)
                     ?};
                     _TAB.prefix();
                     _ok:=1
                  || _ok:=0
                  ?};
                  _is_deleted:=_obj.typeOf('__IsDeleted',1)=_obj.Const.TYPE.NUMBER & _obj.getValue('__IsDeleted');
                  {? _ok & _TAB.seek(48+_id_erp)
::                   Aktualizacja istniejącego zapisu - 'put' albo usunięcie istniejącego zapisu - 'del'.
                  || {? _is_deleted
                     || _env.AppId:=48+_id_erp;
                        _id:=_formula(_obj,'del',48-_id_erp);
                        _env.AppId:='';
::                      Jeżeli w trakcie usuwania pojawiły się błędy, to powinny zostać obsłużone wewnątrz formuły -
::                      tylko tam możliwe jest precyzyjne podanie przyczyny.
                        {? var_pres('_id')=type_of('') & _id=''
::                         Usunięcie doszło do skutku - dodajmy automatyczne komunikaty.
                        || exec('del_rek','#sync_id',_sync_id,48+_id_erp,48-_id_erp);
                           KOMM.add('Usunięcie zapisu powiodło się: %1'@[48+_id_erp])
                        || KOMM.add('Usunięcie zapisu nie powiodło się: %1'@[exec('record','#to_string',48+_id_erp)])
                        ?}
                     || _idput:=_TAB.idput_value();
                        _env.AppId:=48+_id_erp;
                        _id:=_formula(_obj,'put',48-_id_erp);
                        _env.AppId:='';
::                      Jeżeli w trakcie aktualizacji pojawiły się błędy, to powinny zostać obsłużone wewnątrz formuły -
::                      tylko tam możliwe jest precyzyjne podanie przyczyny.
                        {? var_pres('_id')=type_of('') & _id=''
::                         Aktualizacja doszła do skutku - dodajmy automatyczne komunikaty.
                        || _add_erp:=48-_id_erp;
                           _id_erp:=48+_id_erp;
                           _old_id_cloud:=exec('get_id_cloud','portal_core',_sync_id,_id_erp,_add_erp);
                           _old_date_cloud:=exec('get_date_cloud','portal_core',_sync_id,_id_erp,_add_erp);
                           {? _old_id_cloud=0
                           || _old_id:='%1|%2'[$_id_cloud,_date_cloud];
                              _new_id:=''
                           |? _old_date_cloud=''
                           || _old_id:='%1'[$_id_cloud];
                              _new_id:='%1|%2'[$_id_cloud,_date_cloud]
                           || _old_id:='%1|%2'[$_id_cloud,_old_date_cloud];
                              _new_id:='%1|%2'[$_id_cloud,_date_cloud]
                           ?};
                           exec('add_id','#sync_id',_sync_id,_id_erp,_old_id,_add_erp,_new_id);
                           {? _idput=_TAB.idput_value()
                           || KOMM.add('Bez poprawiania zapisu: %1'@[exec('record','#to_string',_id_erp)])
                           || KOMM.add('Poprawienie zapisu: %1'@[exec('record','#to_string',_id_erp)])
                           ?}
                        || KOMM.add('Poprawienie zapisu nie powiodło się: %1'@[exec('record','#to_string',_id_erp)])
                        ?}
                     ?}

::                   Z portalu przyszedł nowy rekord (nie ma go w Mericie).
::                   Jeżeli nie ma znacznika "usunięty", to wykonujemy 'add'.
                  |? _is_deleted
                  || KOMM.add('Odebrany rekord został już usunięty na portalu. Pominęto dołączanie.'@)

                  || _id:=_formula(_obj,'add','');
                     {? var_pres('_id')=type_of('') & +_id>=48
                     || _id_erp:=48+_id;
                        _add_erp:=48-_id;
                        _old_id_cloud:=exec('get_id_cloud','portal_core',_sync_id,_id_erp,_add_erp);
                        _old_date_cloud:=exec('get_date_cloud','portal_core',_sync_id,_id_erp,_add_erp);
                        {? _old_id_cloud=0
                        || _old_id:='%1|%2'[$_id_cloud,_date_cloud];
                           _new_id:=''
                        |? _old_date_cloud=''
                        || _old_id:='%1'[$_id_cloud];
                           _new_id:='%1|%2'[$_id_cloud,_date_cloud]
                        || _old_id:='%1|%2'[$_id_cloud,_old_date_cloud];
                           _new_id:='%1|%2'[$_id_cloud,_date_cloud]
                        ?};
                        exec('add_id','#sync_id',_sync_id,_id_erp,_old_id,_add_erp,_new_id);
                        KOMM.add('Dołączenie zapisu powiodło się: %1'@[exec('record','#to_string',48+_id)])
                     |? var_pres('_id')=0
                     || KOMM.add(
                           'Dołączenie zapisu nie powiodło się (pobranie danych zostanie ponowione): %1'@ [$_id_cloud]
                        );
                        _is_ok:=0
                     |? var_pres('_id')=type_of(0) & _id=0
                     || KOMM.add('Dołączenie zapisu nie powiodło się: %1'@ [$_id_cloud])
                     ?}
                  ?};
                  _TAB.cntx_pop()
               ?};
               _json.fclose();
               obj_del(_json);
               {? _obj.getValue('__ModifiedDate_cloud')>=_res_date
               || _res_date:=_obj.getValue('__ModifiedDate_cloud');
                  _res_id:=_obj.getValue('__id_cloud')
               ?}
            !}
         ?};
         {? _is_ok
         || _result:=_res_date+'|'+$_res_id
         || _env.Loop:=0;
            _result:=0
         ?}
      ?}
   ?}

|| _result:=0;
   KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


\Modify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna formuła parametru dla zapytań "Modify"
::   WE: _a - Kod identyfikatora rekordu
::       _b - FORMULA - wykonywana w kontekście rekordu tabeli TAB zwraca JSON zgodny z definicją metody
::      [_c]- tylko pierwszy rekord będzie przetwarzany dla wszystkich _ext-ów
::   WY: JSON (napis lub uchwyt do pliku - obecnie zawsze uchwyt do pliku) lub ~~.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_TAB:=($_env.TabAcr)();

:: uidref przekazany bezpośrednio _env.Param, w trybie 'Uruchomienie' _env.Param.uidref
_uidref:='';
:: Jeżeli dostępne _env.Param.ext (przetwarzanie w trybie 'Uruchamianie') to użyte do pozyskania ID rekordów
_ext:='';
:: Jeżeli dostępne _env.Param.action (przetwarzanie w trybie 'Uruchomienie') to przekazane jako _c do _formula_json
_action:='';
:: uidref-y przekazane w postaci tabeli _env.Param, czyli elementy to _env.Param.UIDREF
:: Dla zgodności kodu, gdy przekazany jest pojedynczy uidref, to też umieszczamy w tej tabeli
_tab_uidref:=~~;

_array:=obj_new(1);
_type_of_array:=type_of(_array);

{? var_pres('Param',_env)=type_of('')
|| _tab_uidref:=tab_tmp(1,'UIDREF','STRING[48]','uidref()');
   _uidref:=_env.Param;
   _env.logApp('U:%1|'[_uidref]);
   _tab_uidref.UIDREF:=_uidref; _tab_uidref.add()
|? var_pres('Param',_env)=exec('type_of_array','#var')
|| _tab_uidref:=tab_tmp(1,'UIDREF','STRING[48]','uidref()');
   {? var_pres('uidref',_env.Param)=type_of('')
   || _uidref:=_env.Param.uidref;
      _env.logApp('U:%1|'[_uidref]);
      _tab_uidref.UIDREF:=_uidref; _tab_uidref.add()
   ?};
   {? var_pres('ext',_env.Param)=type_of('')
   || _ext:=_env.Param.ext
   ?};
   {? var_pres('action',_env.Param)=type_of('')
   || _action:=_env.Param.action
   ?}
|? var_pres('Param',_env)>100
|| _tab_uidref:=_env.Param
?};

_env.Adds.sync_id:=_sync_id:=_a;
_formula_json:=_b;
_onlyFirst:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_args:=~~;

_tab_uidref.prefix();
{? _tab_uidref.first()
|| _ret:=0;
   {!
   |? _uidref:=_tab_uidref.UIDREF;
      _env.AppId:=_uidref;
      {? +_uidref=48 & type_of(ref_tab(_uidref))>0 & ref_tab(_uidref)=_TAB & _TAB.idput_acr()<>''
      || _TAB.cntx_psh();
         _wm:=ref_name(_uidref);
         {? _TAB.name()<>_wm
         || _TAB.use(_wm)
         ?};
         _TAB.prefix();
         {? _TAB.seek(_uidref)
         || _tab_id:=exec('get_id','#sync_id',_sync_id,_uidref,_ext);
            {? var_pres('_tab_id')>100 & _tab_id.first()
            || {? _onlyFirst
               || _ret1:=_formula_json(#spli_str(_tab_id.ID,'|')[1],_tab_id.OPIS,_action,_tab_id);
                  _ret+={? type_of(_ret1)=type_of(0) || _ret1 || 0 ?}
               || {!
                  |? _ret1:=_formula_json(#spli_str(_tab_id.ID,'|')[1],_tab_id.OPIS,_action);
                     _ret+={? type_of(_ret1)=type_of(0) || _ret1 || 0 ?};
                     _tab_id.next()
                  !}
               ?}
            || _ret+={? _onlyFirst || _formula_json(0,'',_action,~~) || _formula_json(0,'',_action) ?}
            ?};
            obj_del(_tab_id)
         ?};
         _TAB.cntx_pop()
      ?};
      _env.AppId:='';
      _tab_uidref.next()
   !};
:: Obecnie zawsze uchwyt do pliku
::   {? _ret>0
::   || _args:=_env.Adds.obj.json();
::      {? type_of(_args)=type_of(~~)
::      || _args:=fopen(null(),'Uw!',,,1);
::         _env.Adds.obj.json(_args)
::      ?}
::   ?}
   {? _ret>0
   || _args:=fopen(null(),'Uw!',,,1);
      _env.Adds.obj.json(_args)
   ?}
?};

_args


\Modify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna formuła na parsowanie odpowiedzi dla zapytań "Modify"
::   WE: _a  - Kod identyfikatora rekordu
::      [_b] - Formuła do wykonania po dodaniu identyfikatora rekordu
::   WY: ~~ - gdy wszystko się udało, nic nie jest zapamiętywane w rekordzie definicji
::       0 - w przypadku niepowodzenia, gdy należy ponowić próbę wysłania danych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_response:=_env.InetResponse;
_method:=_env.MethodName;

_sync_id:=_a;
_fml_after:={? var_pres('_b')=type_of("") || _b || "1" ?};

_result:=~~;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
||
   _obj:=json_parse(_data
      ,'%1Response'[_method],'Response'
      ,'Array%1Result'[_method],'ArrayResult'
      ,'%1Result'[_method],'Result'
   );

:: Dla pojedynczego zapisu ERP mogło być modyfikowanych/dodawanych kilka zapisów w cloud
:: Zapamiętanie otrzymanego/otrzymanych id_cloud oraz ModifiedDate_cloud
   {? type_of(_obj)=type_of(~~)
   || _result:=0;
      KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _obj.Response.ArrayResult.Status=1
      || {? var_pres('Result',_obj.Response.ArrayResult)>0
         || _res:=_obj.Response.ArrayResult.Result;
            {! _it:=1.. obj_len(_res)
            |! _id_cloud:=_res[_it].__id_cloud;
               _date_cloud:={? var_pres('__ModifiedDate_cloud',_res[_it])>0
                            || _res[_it].__ModifiedDate_cloud
                            || gsub($date,'/','-')+'T'+time$3
                            ?};
               _id_full:=_res[_it].__id_erp;
               _id_erp:=48+_id_full;
               _add_erp:=48-_id_full;
               _old_id_cloud:=exec('get_id_cloud','portal_core',_sync_id,_id_erp,_add_erp);
               _old_date_cloud:=exec('get_date_cloud','portal_core',_sync_id,_id_erp,_add_erp);
               {? _old_id_cloud=0
               || _old_id:='%1|%2'[$_id_cloud,_date_cloud];
                  _new_id:=''
               |? _old_date_cloud=''
               || _old_id:='%1'[$_id_cloud];
                  _new_id:='%1|%2'[$_id_cloud,_date_cloud]
               || _old_id:='%1|%2'[$_id_cloud,_old_date_cloud];
                  _new_id:='%1|%2'[$_id_cloud,_date_cloud]
               ?};
               exec('add_id','#sync_id',_sync_id,_id_erp,_old_id,_add_erp,_new_id);
               _fml_after(_id_erp,_add_erp)
            !}
         ?}
      || _result:=0;
         KOMM.msg(
            'Błąd %1 (%2)'@
            [$_obj.Response.ArrayResult.ErrorCode,_obj.Response.ArrayResult.ErrorMessage],0
         )
      ?}
   ?}

|| _result:=0;
   KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


\Delete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna formuła parametru dla zapytań "Delete"
::   WE:  _a  [STRING] - Kod identyfikatora rekordu
::       [_b] [TABLE]  - Tabela z identyfikatorami. Struktura musi być zgodna z tym co zwraca formuła
::                       \get_id/#sync_id.fml.
::   WY: JSON lub ~~.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_uidref:=_env.Param;

_env.logApp('U:%1|'[_uidref]);

_sync_id:=_a;

:: Uruchamiamy usuwanie wszystkich id_cloud powiązanych z naszym uidref()
_tab_id:={? var_pres('_b')=type_of(@.CLASS.DBF_T) || _b || exec('get_id','#sync_id',_sync_id,_uidref) ?};
{? var_pres('_tab_id')>100 & _tab_id.first()
|| exec('json_man','__jsonm','
      {
          "Array%1Data": {
              "%1Data": %2
          }
      }
   '
   [
      _method,
      params_set('tab_id',_tab_id); _tab_id.json_records(,'__id_cloud',"spli_str(params_get().tab_id.ID,'|')[1]")
   ]).getJSON()
|| KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
   ~~
?}


\Delete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna formuła na parsowanie odpowiedzi dla zapytań "Delete"
::   WE: _a - Kod identyfikatora rekordu
::   WY: ~~ - nie daje żadnego sterowania i nic nie jest zapamiętywane w definicji gdy akcja jest udana
::       0 - w przypadku niepowodzenia, gdy należy ponowić próbę usunięcia danych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_response:=_env.InetResponse;
_method:=_env.MethodName;

_sync_id:=_a;

_result:=0;

:: _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_response.Data);

{? _response.Status=200
||
   _obj:=json_parse(_data
      ,'%1Response'[_method],'Response'
      ,'Array%1Result'[_method],'ArrayResult'
      ,'%1Result'[_method],'Result'
   );

:: Usunięcie otrzymanego/otrzymanych id_erp
   {? type_of(_obj)=type_of(~~)
   || KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
   || {? _obj.Response.ArrayResult.Status=1
      || _result:=~~;
         {? var_pres('Result',_obj.Response.ArrayResult)>0
         || _res:=_obj.Response.ArrayResult.Result;
            {! _it:=1.. obj_len(_res)
            |! {? var_pres('__id_erp',_res[_it])>0
               || {? var_pres('_result')=0 || _result:=0 ?};
                  _result+=exec('del_rek','#sync_id',_sync_id,48+_res[_it].__id_erp,48-_res[_it].__id_erp)
               || _result:=1
               ?}
            !}
         ?}
      || KOMM.msg(
            'Błąd %1 (%2)'@
            [$_obj.Response.ArrayResult.ErrorCode,_obj.Response.ArrayResult.ErrorMessage],0
         )
      ?}
   ?}

|| KOMM.msg(exec('status_notOK','portal_engine',_response.Status,_data),0)
?};

obj_del(_data);

_result


::======================================================================================================================
:: Funkcje pomocnicze, wykorzystywane przez formuły dedykowane.
::======================================================================================================================


\txt_sep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Znak separatora używany do rozdzielania napisów (sekcji) na portalu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: MIDDLE DOT (U+00B7 Hex -> 183 Dec)
^183
:: MESSAGE WAITING (U+0095 Hex -> 149 Dec)
::^149


\get_id_erp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca wskazanie rekordu (__id_erp) na podstawie identyfikatora na portalu (__id_cloud) i dodatkowego
::       opisu (wyróżnika).
::   WE:  _a  [STRING] - Kod identyfikatora rekordu.
::        _b  [NUMBER] - Identyfikator rekordu na portalu.
::       [_c] [STRING] - Dodatkowy opis (wyróżnik) rekordu.
::       [_d] [STRING] - Typ zwracanego wyniku: ref/uidref [domyślnie: ref].
::   WY: W zależności od _d: wynikiem będzie uidref / '' lub wskazanie rekordu / null().
::----------------------------------------------------------------------------------------------------------------------
_sync_id:=_a;
_id_cloud:=_b;
_opis:={? var_pres('_c')=type_of('') || _c || '' ?};
_tret:={? var_pres('_d')=type_of('') & ',ref,uidref,'*',%1,' [_d] || _d || 'ref' ?};

_ret:={? _tret='ref' || null() || '' ?};
_TAB:=exec('get_rek','#sync_id',_sync_id,$_id_cloud,_opis);
{? var_pres('_TAB')>100 & _TAB.first()
|| _SRC:=ref_tab(_TAB.REK);
   _SRC.cntx_psh();
   {? _SRC.name()<>ref_name(_TAB.REK)
   || _SRC.use(ref_name(_TAB.REK))
   ?};
   _SRC.prefix();
   {? _SRC.seek(_TAB.REK)
   || _ret:={? _tret='ref' || _SRC.ref() || _TAB.REK+_TAB.OPIS ?}
   ?};
   _SRC.cntx_pop()
?};

_ret


\getPref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca wskazanie pracownika na podstawie PersonId.
::   WE:  _a  [NUMBER] - PersonId (identyfikator pracownika na portalu).
::       [_b] [STRING] - Typ zwracanego wyniku: ref/uidref [domyślnie: ref].
::   WY: W zależności od _b: wynikiem będzie uidref / '' lub wskazanie rekordu / null().
::----------------------------------------------------------------------------------------------------------------------
_tret:={? var_pres('_b')=type_of('') & ',ref,uidref,'*',%1,' [_b] || _b || 'ref' ?};

exec('get_id_erp','portal_core','PORTAL_P_ID',_a,,_tret)


\get_id_cloud
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca identyfikator rekordu na portalu (__id_cloud) na podstawie wskazania rekordu (dokładniej:
::       uidref-a) i dodatkowego opisu (wyróżnika).
::   WE:  _a  [STRING] - Kod identyfikatora rekordu.
::        _b  [STRING] - Wskazanie (uidref) rekordu.
::       [_c] [STRING] - Dodatkowy opis (wyróżnik) rekordu.
::   WY: Portalowy identyfikator rekordu (jako liczba) lub 0.
::----------------------------------------------------------------------------------------------------------------------
_sync_id:=_a;
_id_erp:=_b;
_opis:={? var_pres('_c')=type_of('') || _c || '' ?};

_TAB:=exec('get_id','#sync_id',_sync_id,_id_erp,_opis);
{? var_pres('_TAB')>100 & _TAB.first()
|| #spli_str(_TAB.ID,'|')[1]
?}


\getPid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca identyfikator pracownika (PersonId) na podstawie wskazania pracownika.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::   WY: Portalowy identyfikator pracownika (jako napis) lub ''.
::----------------------------------------------------------------------------------------------------------------------
exec('get_id_cloud','portal_core','PORTAL_P_ID',_a)


\getDateTime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła dekodująca
::   WE: _a [STRING] - Data i czas w formacie ISO 8601.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('date','time','tz','fsec');
_ret.date:=date(0,0,0);
_ret.time:=time(0,0,0);
_ret.tz:='';
_ret.fsec:=0;

{? var_pres('_a')<>type_of('')
|| return(_ret)
?};

iso_datetime_parse(_a)


\get_date_cloud
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Formuła zwraca znacznik czasowy rekordu na portalu (__DateModified_cloud) na podstawie wskazania rekordu
::       (dokładniej: uidref-a) i dodatkowego opisu (wyróżnika).
::   WE:  _a  [STRING] - Kod identyfikatora rekordu.
::        _b  [STRING] - Wskazanie (uidref) rekordu.
::       [_c] [STRING] - Dodatkowy opis (wyróżnik) rekordu.
::   WY: Portalowy data modyfikacji rekordu (jako string) lub ''.
::----------------------------------------------------------------------------------------------------------------------
_sync_id:=_a;
_id_erp:=_b;
_opis:={? var_pres('_c')=type_of('') || _c || '' ?};

_TAB:=exec('get_id','#sync_id',_sync_id,_id_erp,_opis);
{? var_pres('_TAB')>100 & _TAB.first()
|| {? _TAB.ID*'|'>0 || spli_str(_TAB.ID,'|')[2] || '' ?}
|| ''
?}


\get_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Zwraca identyfikator odpowiadający rekordowi _b
::       Specjalna wersja dla Portal HR - zwraca tylko część identyfikatora będącą id_cloud
::       (bez części będącej DateModified_cloud)
::   WE: _a - kod definicji
::       _b - rekord ($TAB.ref() lub TAB.uidref())
::       [_c] - opis rekordu
::   WY: ~~ lub tabela identyfikatorów rekordu
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')=type_of('')
|| _tab:=exec('get_id','#sync_id',_a,_b,_c)
|| _tab:=exec('get_id','#sync_id',_a,_b)
?};
{? var_pres('_tab')>100
|| _tab.cntx_psh();
   _tab.prefix();
   {? _tab.first()
   || {!
      |? _tab.ID:=spli_str(_tab.ID,'|')[1];
         _tab.put();
         _tab.next()
      !}
   ?};
   _tab.cntx_pop()
?};
_tab

:Sign Version 2.0 jowisz:1045 2023/08/25 11:56:13 3ea1557cc90ed8467d0a461a8cb667ff9f10267977a11faeacfef6beb90ccff457ea3ec16680694c6e287132a8ebd1bcbeb817ac22fee2377e62928d556181b0fc740752b164fe5b92c2720d05130b78dc839d9e006aea324534ddc252f59de29389584df54c30f2448ce36af3393195e3b234a7288a09d2478bf4e65f5d801f
