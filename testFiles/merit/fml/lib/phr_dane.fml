:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: phr_dane.fml
:: Utworzony: 14.03.2017
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły dla obsługi manipulacji danymi dziedzin POC, PSZ, PRE, PBA.
::======================================================================================================================


\move_doks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.28]
:: OPIS: Przenosi dokumenty kadrowe (tabela ZZ_DOK) ze zbioru zz_dok do zbioru docelowego, właściwego dla firmy w grupie
::       kapitałowej, jednocześnie aktualizując powiązania we wszystkich miejscach wykorzystania.
::   WE: _a [STRING] - maska źródłowa
::       _b [STRING] - maska docelowa
::       _c [INTEGER] - sposób obsługi dialogów:
::                      0 - wszystkie dialogi są wyświetlane [domyślnie];
::                      1 - wyłącz tylko dialogi zatrzymujące przetwarzanie;
::                      2 - wyłącz wszystkie.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_src:=_a;
_dst:=_b;
_blok:={? var_pres('_c')=type_of(0) & 0<=_c & _c<=2 || _c || 0 ?};

ZZ_DOK.cntx_psh();
ZZ_DOK.use(_dst);
ZZ_DOK.clear();
ZZ_DOK.index('ID');
ZZ_DOK.use(_src);
ZZ_DOK.clear();
ZZ_DOK.index('ID');
_size:=ZZ_DOK.size();

{? _size=0
|| {? _blok<1
   || FUN.info('Nie znaleziono dokumentów kadrowych wymagających przeniesienia.'@)
   ?};
   ZZ_DOK.cntx_pop();
   return(1)
?};

:: kopia zbioru źródłowego z dokładnością do ref(!)
:: absolutny zakaz zmiany tego założenia ze względu na:
:: - unikalność indeksów uwzględniających pole typu ZZ_DOK
:: - poprawność struktur hierarchicznych (pola kluczowe przed TREE_REF)
_max:=ref_num(sql('select max(Z.REFERENCE) as REF from ZZ_DOK as Z').REF);
_cnt:=1;
{! _ref:=1.._max
|! {? _blok<2 & progress(
         int(100*_cnt/_max),
         'Trwa tworzenie dokumentów kadrowych...'@,
         'Aktualizacja danych'@,,,,,
         'Anuluj'@
      )=0
   || ZZ_DOK.cntx_pop();
      prgs_clr();
      return()
   ?};
   ZZ_DOK.use(_src);
   {? ZZ_DOK.seek(_ref,)
   || _text:=ZZ_DOK.memo_txt(,1,'NOTA');
      ZZ_DOK.use(_dst);
      {? ~ZZ_DOK.seek(_ref,)
      || {? ZZ_DOK.add()
         || ZZ_DOK.memo_set(_text,'NOTA');
            ZZ_DOK.memo_put(,'NOTA')
         ?}
      ?}
   || ZZ_DOK.use(_dst);
      ZZ_DOK.blank(1);
      ZZ_DOK.KLASA:='ZZ_DOK';
      ZZ_DOK.ID:=ZZ_DOK.tm_stamp();
      ZZ_DOK.DATA:=date();
      ZZ_DOK.GODZ:=time();
      ZZ_DOK.add()
   ?};
   _cnt+=1
!};
prgs_clr();

: informacje o odwołaniach do tabeli ZZ_DOK
: i sposobie aktualizacji każdego z nich
_FLD:=tab_tmp(,
   'TABELA','STRING[8]','Tabela'@,
   'POLE','STRING[8]','Pole'@
);
_tab_num:=tab_num();
{! _ti:=1..tab_num
|! _acr:=tab_acr(_ti);
   _TAB:=($_acr)();
   {? tab_real(_ti)
   || _fld_num:=_TAB.fld_num();
      {! _fi:=1.._fld_num
      |! {? _TAB.fld_join(_fi)='ZZ_DOK'
         || _FLD.TABELA:=_acr;
            _FLD.POLE:=_TAB.fld_acr(_fi);
            _FLD.add()
         ?}
      !}
   ?};
   &_TAB
!};
_FLD.index(_FLD.ndx_tmp(,,'TABELA',,,'TABELA',,,'POLE',,));

: utwórz tablicę zawierającą informacje o tabelach,
: które mają być przetwarzane jako pierwsze
_acr:=spli_str(
   'ZZ_PROFK,ZZ_PROFT,ZZ_PROFO,'
   'ZO_OCENA,ZO_TEST,'
   'ZA_SKL,ZA_WAR,ZA_TEST,ZA_ZEST',
   ','
);

: priorytet przetwarzania tabel określony w _LNK
_LNK:=tab_tmp(2,
   'LP','INTEGER','Lp'@,
   'TABELA','STRING[8]','Tabela'@,
   'ID','INTEGER','Identyfikator'@
);
{! _ii:=1..obj_len(_acr)
|! _LNK.LP:=_ii;
   _LNK.TABELA:=_acr[_ii];
   _LNK.ID:=_LNK.size()+1;
   _LNK.add()
!};
: _acr już zbędny
obj_del(_acr);
&_acr;

: uzupełnij listę tabel
_loop:=_FLD.first();
{!
|? _loop
|! {? ~_LNK.find_tab(,'TABELA',,'=',_FLD.TABELA)
   || _LNK.blank();
      _LNK.TABELA:=_FLD.TABELA;
      _LNK.ID:=_LNK.size()+1;
      _LNK.add()
   ?};
   _loop:=_FLD.next()
!};

: bufor formuł dla każdego pola przetwarzanych tabel
: kolumna ID tabeli _LNK służy do adresowania komórki
_FML:=obj_new(_LNK.size());
_loop:=_LNK.first();
{!
|? _loop
|! _FLD.prefix(_LNK.TABELA,_LNK.TABELA);
   _FML[_LNK.ID]:=obj_new(_FLD.size());
   _loop:=_FLD.first();
   {! _ii:=1
   |? _loop
   |! _FML[_LNK.ID][_ii]:=obj_new('GET','SET','PUT');
      _FML[_LNK.ID][_ii].GET:=$('%1.%2'[_FLD.TABELA,_FLD.POLE]);
      _FML[_LNK.ID][_ii].SET:=$('%1.%2:=_a'[_FLD.TABELA,_FLD.POLE]);
      _FML[_LNK.ID][_ii].PUT:=$(
         '{? var_pres(\'NP_DOK\',%1)=27 '
         '|| %1.NP_DOK:=\'%2\' '
         '?}; '
         '%1.put()'
         [_FLD.TABELA,_dst]
      );
      _loop:=_FLD.next()
   !};
   _loop:=_LNK.next()
!};
: _FLD już zbędny
obj_del(_FLD);
&_FLD;

: ustal zbiór docelowy
ZZ_DOK.use(_dst);

_ntab:=_LNK.size();
_loop:=_LNK.last();
{!
|? _loop
:  pętla dla tabeli z odwołaniami do ZZ_DOK
|! _TAB:=($_LNK.TABELA)();
   _TAB.cntx_psh();
   _TAB.trig_off('*','*');
   _MASK:=_TAB.names();
   _loop:=_MASK.first();
   {!
   |? _loop
:     pętla dla wszystkich zbiorów tabeli
   |! _TAB.use(_MASK.NAME);
      _TAB.clear();
      _size:=_TAB.size();
      _cnt:=0;
      _msg:=
         'Trwa przetwarzanie kartoteki %1 (zbiór: %2, liczba wierszy: %3).\n\n'
         'Liczba kartotek wymagających aktualizacji: %4.\n'@
         [_LNK.TABELA,_MASK.NAME,$_size,$_ntab];
:     kolejność przetwarzania nie ma znaczenia, nawet jeśli indeks zawiera wskazania na ZZ_DOK,
:     to i tak ignorowana jest nazwa zbioru - sortowanie odbywa się tylko po numerze wiersza
      _TAB.f_set(,,);
      _loop:=_TAB.f_first();
      {!
      |? _loop
:        pętla dla wszystkich wierszy tabeli bieżącego zbioru tabeli
      |! {? _blok<2 & progress(int(100*_cnt/_size),_msg,'Aktualizacja danych'@,,,,,'Anuluj'@)=0
         || ZZ_DOK.cntx_pop();
            _TAB.cntx_pop();
            prgs_clr();
            return()
         ?};
         _mod:=0;
         {! _ii:=1..obj_len(_FML[_LNK.ID])
         |! _dok:=_FML[_LNK.ID][_ii].GET();
            {? _dok<>null & ref_name(_dok)<>_dst & ZZ_DOK.seek(#_dok,)
            || _FML[_LNK.ID][_ii].SET(ZZ_DOK.ref());
               _mod+=1
            ?}
         !};
         {? _mod
         || _FML[_LNK.ID][1].PUT()
         ?};
         _cnt+=1;
:        kolejny wiersz
         _loop:=_TAB.f_next()
      !};
      _TAB.f_clear();
:     kolejny zbiór
      _loop:=_MASK.next()
   !};
   _TAB.trig_on('*','*');
   _TAB.cntx_pop();
   obj_del(_MASK);
   &_TAB;
   _ntab-=1;
:  kolejna tabela
   _loop:=_LNK.prev()
!};

_remove:="
   ZZ_DOK.use(_a);
   ZZ_DOK.clear();
   _cnt:=1;
   _size:=ZZ_DOK.size();
   _loop:=ZZ_DOK.first();
   {!
   |? _loop
   |! {? _b<2
      || progress(
            int(100*_cnt/_size),
            'Trwa usuwanie dokumentów kadrowych ze zbioru %1.'@[_a],
            'Aktualizacja danych'@
         )
      ?};
      _loop:=
         {? ZZ_DOK.count()<>0
         || ZZ_DOK.next()
         || ZZ_DOK.del()
         ?};
      _cnt+=1
   !}
";

:: usunięcie zbędnych zapisów w zbiorach źródłowym i docelowym
:: można włączyć kod poniżej żeby usunąć zapisy archiwalne, ale
:: kosztem możliwości wielokrotnego wywoływania formuły
:: _remove(_a,_blok);
:: _remove(_b,_blok);

ZZ_DOK.cntx_pop();
prgs_clr();
~~


\create_doks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Aktualizuje dane pod kątem spójości zapisow w tabeli ZZ_DOK.
::   WE: _a [INTEGER] - wyłącz elementy dialogowe (różne od 0), domyślnie dialogi są wyświetlane
::  OLD: \transfer/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_dialog:=(var_pres('_a')<>type_of(0) | ~_a);

{? ~exec('jest_lic','phr_tab')
|| {? _dialog
   || FUN.emsg('Brak licencji PSZ, POC, PRE lub PBA.'@)
   ?};
   return(1)
?};

:: domyślna maska tabeli ZZ_DOK
_cur:='zz_do'+($REF.FIRMA+1);

:: diagnostyka
_ERR:=tab_tmp(2,
   'TAB','STRING[8]','Tabela'@,
   'REC','STRING[16]','Rekord'@,
   'NFO','STRING[100]','Komentarz'@
);

_msg:=form('Weryfikacja więzów spójności logicznej...'@,80)+'\n';
_nfo:='';
_cnt:=0;

_size:=tab_num();
{! _ndx:=1.._size
|! _pgs:=100*(_cnt+=1)/_size;
   _prc:='\n'+$int(_pgs)+'%';
   {? tab_real(_ndx)
   || _tab:=($tab_acr(_ndx))();
      {? _dialog
      || _nfo:=_msg+form(_tab.comment(),80);
         progress(_pgs,_nfo+_prc,FUN.TYT)
      ?};
      {? exec('has_dok','phr_tab',_tab)
      ||
::       ER/WRT/XP/21.37/2203/0049 - uzupełnienie ZZ_DOK w wielu firmach
::       Dla tabeli lokalnej wszystkie zapisy można uzupełnić z maską tabeli
::       ZZ_DOK właściwą dla firmy, w której wykonywana jest formuła.
::       Dla tabeli globalnej należy dla każdego wiersza ustalić maskę właściwą
::       firmie, której bezpośrednio lub pośrednio został przypisany.
         _use:='1';
         {? exec('czy_tab_glob','#table',_tab,1)
         || _cnt:=0;
            _fld:='';
            {! _ii:=1.._tab.fld_num()
            |! {? _tab.fld_join(_ii)='FIRMA'
               || _fld:=_tab.fld_acr(_ii);
                  _cnt+=1
               ?}
            !};
            _use:=
               {? _cnt=1
               || '{? %1.%2<>null '
                  '|| ZZ_DOK.use(\'zz_do\'+($%1.%2+1)) '
                  '|| \'Pole "%2" ma wartość null.\' '
                  '?}'[2-!_tab,_fld]
               || exec('create_doks_open','phr_dane',_tab)
               ?}
         || ZZ_DOK.use(_cur)
         ?};
         _use:=$_use;

::       przetwarzaj wszystkie zbiory tabeli
         _mdb:=_tab.names();
         _loop:=_mdb.first();
         {!
         |? _loop
         |! _tab.cntx_psh();
            _tab.trig_off('*','*');
            _tab.use(_mdb.NAME);
            _tab.clear();
            _REF:=sql('select REFERENCE as ID from :_a',_tab);
            _loop:=_REF.first();
            {!
            |? _loop
            |! {? _tab.seek(_REF.ID)
               || _err:='';
                  _val:=_use(_tab);
                  {? type_of(_val)=type_of('')
                  || _err:=_val
                  |? _val=0
                  || _err:='Błąd otwarcia zbioru tabeli ZZ_DOK.'
                  || do();
                     {? _tab.ZZ_DOK=null
                     || _tab.ZZ_DOK:=exec('add_dok','phr_tab',_tab);
                        {? ~_tab.put()
                        || _err:='Błąd zapisu rekordu.'
                        ?}
                     || exec('ver_dok','phr_tab',_tab)
                     ?};
                     end()
                  ?};
                  {? _err<>''
                  || _ERR.blank();
                     _ERR.TAB:=2-!_tab;
                     _ERR.REC:=$_tab.ref();
                     _ERR.NFO:=_err;
                     _ERR.add()
                  ?}
               ?};
               _loop:=_REF.next()
            !};
            obj_del(_REF);
            _tab.trig_on('*','*');
            _tab.cntx_pop();
            _loop:=_mdb.next()
         !};
         obj_del(_mdb)
      ?};
      &_tab
   ?}
!};

prgs_clr();

{? _dialog & _ERR.first()
|| _wnd:=_ERR.mk_sel('Raport'@,,1,'#create_doks',,,,,'U');
   _ERR.win_act(_wnd,,'Szukaj');
   _ERR.win_act(_wnd,,'Kolejność');
   _ERR.win_sel(_wnd);
   _ERR.select()
?};

1


\create_doks_open
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Tworzy fragment formuły otwierającej właściwą dla wiersza tabeli globalnej nazwę zbioru tabeli ZZ_DOK.
::   WE: _a [TABLE] - alias tabeli, z której pochodzi przetwarzany wiersz
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_TAB:=_a;

{? _TAB=PRZ
|| '{? PRZ.P().FIRMA<>null '
   '|| ZZ_DOK.use(\'zz_do\'+($PRZ.P().FIRMA+1)) '
   '|| \'Pole "FIRMA" ma wartość null.\' '
   '?}'
|| '{? %1.ZZ_DOK<>null '
   '|| ZZ_DOK.use(\'zz_do\'+(ref_name(%1.ZZ_DOK)+1)) '
   '|| \'Pole "ZZ_DOK" ma wartość null.\' '
   '?}'[2-!_TAB]
?}


\update_np_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła narzędziowa aktualizująca wartość w kolumnie NP_DOK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_files:=exec('chk_off_files','phr_dane');
_off:=exec('chk_off','phr_dane',_files);
{? _off.STATUS<>''
|| exec('chk_on','phr_dane',_off);
   return(_off.STATUS)
?};

_msg:=form('Aktualizacja kolumny NP_DOK...'@,80)+'\n';
_nfo:='';
_cnt:=0;

_size:=tab_num();
{! _ti:=1.._size
|! _pgs:=100*(_cnt+=1)/_size;
   _prc:='\n'+$int(_pgs)+'%';
   {? tab_real(_ti)
   || _TAB:=($tab_acr(_ti))();
      {? var_pres('NP_DOK',_TAB)>0
      || _nfo:=_msg+form(_TAB.comment(),80);
         progress(_pgs,_nfo+_prc,FUN.TYT);
         _src:='';
         {! _fi:=1.._TAB.fld_num()
         |? _src=''
         |! {? _TAB.fld_join(_fi)='ZZ_DOK'
            || _src:=_TAB.fld_acr(_fi)
            ?}
         !};
         {? _src<>''
         || _TAB.cntx_psh();
            _MASK:=_TAB.names();
            _loop:=_MASK.first();
            {!
            |? _loop
            |! _TAB.use(_MASK.NAME);
               _TAB.clear();
               _TAB.for_each(
                  $('{? %1.NP_DOK=\'\' & %1.%2<>null '
                    '|| %1.NP_DOK:=ref_name(%1.%2); '
                    '   %1.put() '
                    '?}'[tab_acr(_ti),_src]),
                  0
               );
               _loop:=_MASK.next()
            !};
            obj_del(_MASK);
            _TAB.cntx_pop()
         ?}
      ?};
      &_TAB
   ?}
!};

prgs_clr();
exec('chk_on','phr_dane',_off)


\init_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy w słowniku zmian w module występuje choć jeden zapis. Jeśli nie, to zakłada domyślny.
::   WE: _a [DATE] - data, na którą ustalić zmianę metodyki
::  OLD: \init_hist/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_HIST.index('DATA');
ZZ_HIST.prefix(exec('ref_firma','ustawienia'));
{? ~ZZ_HIST.first()
|| ZZ_HIST.blank();
   ZZ_HIST.DATA:=date(0,0,0);
   ZZ_HIST.OPIS:='ustawienia początkowe';
   ZZ_HIST.add()
?};
ZZ_HIST.find_le({? var_pres('_a')=type_of(date) || _a || date() ?});
ZZ_POM.ZZ_HIST:=ZZ_HIST.ref()


\chk_off_files
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Zwraca tablicę akronimów tabel związanych z obsługą ZKL-a.
::       Nazwa funkcji, nie odzwierciedla jej funkcjonalności, ale nie będzie zmieniona w związku z wykorzystaniem
::       w formułach potransferowych wcześniejszych wersji.
::   WE:
::   WY: _a [ARRAY] - Tablica z nazwami plików
::----------------------------------------------------------------------------------------------------------------------
spli_str(
   'RP_ETAP|RP_ETOC|RP_ETZE|RP_LOK|RP_OFE|RP_OSET|RP_OSOBA|RP_OWYM|RP_PRET|RP_PROC|RP_WOW|RP_ZAP|'
   'RPW_DEF|RPW_POZ|RPW_STN|RPW_TYP|STN_GR|STN_GRP|SZB_OKR|SZB_POZ|SZB_WYK|'
   'SZK_DAT|SZK_KOMP|SZK_OFE|SZK_OPIS|SZK_ORG|SZK_PLAN|SZK_PRAC|SZK_PROG|SZK_PSZK|SZK_PUCZ|SZK_PWZO|SZK_STN|SZK_TEM|'
   'SZK_TREN|SZK_WZO|SZK_ZAP|SZK_ZOK|'
   'ZA_FORM|ZA_INFO|ZA_INST|ZA_NOTA|ZA_SKL|ZA_TEST|ZA_TYP|ZA_WAR|ZA_ZEST|'
   'ZF_DEF|ZF_POZ|ZF_RPI|ZF_SKL|ZF_WID|ZF_WYK|'
   'ZO_ARCH|ZO_ASP|ZO_CEL|ZO_CELP|ZO_DOD|ZO_FORM|ZO_HIST|ZO_KOMP|ZO_MOB|'
   'ZO_NOTA|ZO_NOTAB|ZO_NOTAK|ZO_NOTAO|ZO_NOTAS|ZO_OCENA|ZO_OSOBA|ZO_OSTYP|ZO_PROC|ZO_PROF|ZO_PROG|ZO_SK|ZO_TEST|'
   'ZP_DET|ZP_OKR|ZP_POZ|ZP_WZP|'
   'ZZ_ASYS|ZZ_ASYST|ZZ_DOK|ZZ_DOKZ|ZZ_FML|ZZ_GOT|ZZ_GOTW|ZZ_HIST|ZZ_KOMP|ZZ_KOMPK|ZZ_KOMPS|ZZ_KOMPZ|'
   'ZZ_KRYT|ZZ_KRYTF|ZZ_KRYTJ|ZZ_KRYTP|ZZ_KRYTS|ZZ_MET|ZZ_MOBW|ZZ_OSOBA|ZZ_OSTYP|ZZ_POW|'
   'ZZ_PROF|ZZ_PROFK|ZZ_PROFO|ZZ_PROFT|ZZ_STAN|ZZ_STANP|ZZ_STANS|ZZ_TEMP|ZZ_TMPT|ZZ_TYP|ZZ_WIKON|',
   '|'
)


\chk_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła wyłącza działanie walidatorów tabel (zawartych w formułach typu \TAB_chk) poprzez nadanie wartości
::       'CHK|' odpowiednim polom zmiennej TRIG_OFF. Dodatkowo tabele są blokowane.
::   WE: _a [ARRAY] - Tablica z akronimami tabel, dla których mają zostać wyłączone walidatory.
::   WY: Tablica nazwana od strukturze:
::          STATUS  - tekst pusty w przypadku sukcesu, wpp. komunikat o błędzie
::          TABELA  - lista akronimów tabel (wskazanie tablicy podanej argumentem _a)
::          BLOKADA - alias tabeli tymczasowej zawierającej w pierwszej kolumnie akronimy zablokowanych tabel
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('off_arg','phr_dane','CHK','1');
exec('fml_off','phr_dane',_a,_arg)


\off_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Tworzy i wypełnia tablicę argumentów dla wywołania fml_off.
::UWAGA: Poprawność argumentów wywołania nie jest weryfikowana
::   WE: _a [STRING] - końcówka nazwy formuły
::       _b [STRING] - nowa treść formuły
::                     UWAGA: argument stracił swoje znaczenie po rezygnacji z obsługi poprzez modyfikację warstwy M.
::       ...
::   WY: tablica z kodami (pod-)wyzwalaczy do pomijania.
::----------------------------------------------------------------------------------------------------------------------
_arg:=obj_new(_/2);
{! _ni:=1 // 2 .. _
|! _ii:=(_ni+1)%2;
   _sufix:=_[_ni];
   _arg[_ii]:={? 1+_sufix='_' || ~-(1-_sufix) || _sufix ?}
!};
_arg


\fml_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła "włącza" blokowanie wykonywania wskazanych (pod-)wyzwalaczy dla wybranych tabel.
::   WE: _a [ARRAY] - Tablica z akronimami tabel, dla których mają zostać wyłączone (pod-)wyzwalacze.
::       _b [ARRAY] - Kody (pod-)wyzwalaczy.
::   WY: Tablica nazwana od strukturze:
::          STATUS  - tekst pusty w przypadku sukcesu, wpp. komunikat o błędzie
::          TABELA  - lista akronimów tabel (wskazanie tablicy podanej argumentem _a)
::          BLOKADA - alias tabeli tymczasowej zawierającej w pierwszej kolumnie akronimy zablokowanych tabel
::----------------------------------------------------------------------------------------------------------------------
_sfx:=_b;
_ret:=obj_new('STATUS','TABELA','BLOKADA');
_ret.STATUS:='';
_ret.TABELA:=_a;
_ret.BLOKADA:=tab_tmp(,'TABELA','STRING[8]','Akronim tabeli');

{? var_pres('_a')<>type_of(obj_new(1))
|| _ret.STATUS:='Błąd wewnętrzny: nieprawidłowy parametr wywołania.';
   return(_ret)
?};

:: Zamieniamy zawartość tablicy _sfx na napis, który będzie przypisywany polom zmiennej TRIG_OFF.
_off:='';
{! _lp:=1 .. obj_len(_sfx)
|! _off+=_sfx[_lp]+'|'
!};

_tTABLE:=type_of(SYSLOG);
_tTSTRING:=27;

{! _lp:=1 .. obj_len(_ret.TABELA)
|? _ret.STATUS=''
|! _tabela:=_ret.TABELA[_lp];
   {? _tabela=''
   || 'OK - nie róbmy scen ...'
   |? var_pres(_tabela)<>_tTABLE
   || _ret.STATUS:='Definicja systemu nie zawiera tabeli %1.' [_tabela]
   |? var_pres(_tabela,TRIG_OFF)<>_tTSTRING
   || _ret.STATUS:='Definicja zmiennej TRIG_OFF nie zawiera pola %1.' [_tabela]
   |? ($_tabela)().lock(1,1)
   || ($('TRIG_OFF.'+_tabela+':=_a'))(_off);
      _ret.BLOKADA.TABELA:=_tabela;
      _ret.BLOKADA.add()
   || _ret.STATUS:='Zablokowanie tabeli %1 nie powiodło się.' [_acr]
   ?}
!};

_ret


\chk_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Formuła "wyłącza" blokowanie wykonywania wskazanych (pod-)wyzwalaczy dla wybranych tabel.
::   WE: _a [OBJECT] - Tablica nazwana zwracana przez \chk_off/phr_dane.fml
::   WY:
::UWAGA: poprawność argumentu wywołania nie jest weryfikowana
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a.BLOKADA;

_loop:=_TAB.first();
{!
|? _loop
|! ($('TRIG_OFF.'+_TAB.TABELA+':=_a'))('');
   ($_TAB.TABELA)().unlock();
   _loop:=_TAB.next()
!}


\get_profk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje kompetencję profilu, jeśli brak informacji, to zapis jest dodawany
::   WE: _a - wskazanie na właścicela zapisu
::       _b - wskazanie na opis kompetencji
::       _c - (opcjonalny) pominięty wskazanie na ZZ_PROFK, większy od 0 wskazanie na ZZ_DOK, napis wartość pola
::       _d - (opcjonalny) blokada automatycznego dodawania rekordu - większy od 0 zapis nie jest dodawany
::   WY: wskazanie na rekord, jeśli został znaleziony lub dodany, null w przeciwnym wypadku
::  OLD: \get_profk/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null | _b=null
|| return(null)
?};

_mod:=
   {? var_pres('_c')=type_of(0) & _c>0 || 1
   |? var_pres('_c')=type_of('') & +_c || 2
   ?};
_add:=(var_pres('_d')<>type_of(0) | _d<=0);
_ret:={? _mod=2 || ~~ || null ?};

ZZ_PROFK.cntx_psh();
ZZ_PROFK.index('UNIQUE');
ZZ_PROFK.prefix(ref_name(_a),_a,_b);
_ret:=
   {? {? ~ZZ_PROFK.first()
      || {? _add
         || ZZ_PROFK.blank(1);
            ZZ_PROFK.ZZ_LINK:=_a;
            ZZ_PROFK.ZZ_KOMP:=_b;
            ZZ_PROFK.add()
         ?}
      || 1
      ?}
   || {? _mod=1 || ZZ_PROFK.ZZ_DOK
      |? _mod=2 || ($('ZZ_PROFK.'+_c))()
      || ZZ_PROFK.ref()
      ?}
   ?};
ZZ_PROFK.cntx_pop();

_ret


\get_profo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje metodę oceny kompetencji profilu, jeśli brak informacji, to zapis jest dodawany
::   WE: _a - wskazanie na kompetencję profilu
::       _b - wskazanie na typ oceny kompetencji
::       _c - wskazanie na metodę oceny
::   WY: wskazanie na rekord, jeśli został znaleziony lub dodany, null w przeciwnym wypadku
::  OLD: \get_profo/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null | _b=null | _c=null
|| return(null)
?};

_ret:=null;
ZZ_PROFO.cntx_psh();
ZZ_PROFO.index('UNIQUE');
ZZ_PROFO.prefix(_a,_b);
{? ~ZZ_PROFO.find_key(_c)
|| ZZ_PROFO.blank(1);
   ZZ_PROFO.ZZ_PROFK:=_a;
   ZZ_PROFO.ZZ_PROFT:=_b;
   ZZ_PROFO.ZZ_MET:=_c;
   {? ZZ_PROFO.add()
   || _ret:=ZZ_PROFO.ref()
   ?}
|| _ret:=ZZ_PROFO.ref()
?};
ZZ_PROFO.cntx_pop();

_ret


\get_proft
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ oceny w profilu, jeśli brak informacji, to zapis jest dodawany
::   WE: _a - wskazanie właścicela zapisu
::       _b - wskazanie typu oceny
::       _c - (opcjonalny) pominięty wskazanie na ZZ_PROFT, wiekszy od 0 wskazanie na ZZ_DOK, napis wartość pola
::       _d - (opcjonalny) blokada automatycznego dodawania rekordu - wiekszy od 0 zapis nie jest dodawany
::   WY: wskazanie na rekord, jeśli został znaleziony lub dodany, null w przeciwnym wypadku lub ~~ dla _c typu napis
::  OLD: \get_proft/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null | _b=null
|| return(null)
?};

_mod:=
   {? var_pres('_c')=type_of(0) & _c>0 || 1
   |? var_pres('_c')=type_of('') & +_c || 2
   ?};
_add:=(var_pres('_d')<>type_of(0) | _d<=0);
_ret:={? _mod=2 || ~~ || null ?};

ZZ_PROFT.cntx_psh();
ZZ_PROFT.index('UNIQUE');
ZZ_PROFT.prefix(ref_name(_a),_a,_b);
_ret:=
   {? {? ~ZZ_PROFT.first()
      || {? _add
         || ZZ_PROFT.blank(1);
            ZZ_PROFT.ZZ_LINK:=_a;
            ZZ_PROFT.ZZ_TYP:=_b;
            ZZ_PROFT.add()
         ?}
      || 1
      ?}
   || {? _mod=1 || ZZ_PROFT.ZZ_DOK
      |? _mod=2 || ($('ZZ_PROFT.'+_c))()
      || ZZ_PROFT.ref()
      ?}
   || null
   ?};
ZZ_PROFT.cntx_pop();

_ret


\met_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje metodę oceny
::   WE: _a - kod identyfikujący metodę
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \met_find/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | |_a=''
|| return(null)
?};
_ref:=null;
ZZ_MET.cntx_psh();
ZZ_MET.index('KOD');
ZZ_MET.prefix();
{? ZZ_MET.find_key(_a,)
|| _ref:=ZZ_MET.ref()
?};
ZZ_MET.cntx_pop();
_ref


\typ_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ oceny / oceniającego
::   WE: _a - typ zapisu
::       _b - kod identyfikujacy typ
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_find/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | |_a='' || return(null)
|? var_pres('_b')<>type_of('') | |_b='' || return(null)
?};
_ref:=null;
ZZ_TYP.cntx_psh();
ZZ_TYP.index('KOD');
ZZ_TYP.prefix(_a);
{? ZZ_TYP.find_key(_b,_b)
|| _ref:=ZZ_TYP.ref()
?};
ZZ_TYP.cntx_pop();
_ref


\typ_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ oceny pracownika
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_op/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('typ_find','phr_dane',ZZ_POM.MODUL,'OP')


\typ_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ oceny bezposredniego przelozonego
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_pb/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('typ_find','phr_dane',ZZ_POM.MODUL,'PB')


\typ_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Wyszukuje typ oceny przelozonego wyzszego szczebla
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_pw/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('typ_find','phr_dane',ZZ_POM.MODUL,'PW')


\typ_ps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ samooceny pracownika
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_ps/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('typ_find','phr_dane',ZZ_POM.MODUL,'PS')


\typ_ou
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje typ oceny uzgodnionej
::   WY: wskazanie na rekord, jeśli został znaleziony, null w przeciwnym wypadku
::  OLD: \typ_ou/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('typ_find','phr_dane',ZZ_POM.MODUL,'OU')


\copy_buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Tworzy strukturę pomocniczą do kopiowania rekordów
::   WY: wskazanie na tablicę
::  OLD: \copy_buff/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_lnk:=obj_new(4);
_lnk[1]:=tab_tmp(,'CLS','STRING[10]',,'SRC','INTEGER',,'DST','INTEGER',);
_lnk[4]:=_lnk[1].ndx_tmp(,,'CLS',,,'CLS',,,'DST',,);
_lnk[3]:=_lnk[1].ndx_tmp(,,'CLS',,,'CLS',,,'SRC',,);
_lnk[2]:=_lnk[1].index('?');
_lnk[1].index(_lnk[4]);
_lnk


\copy_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Uzupełnia dane pomocnicze procesu kopiowania danych.
::   WE: _a - wskazanie na tablicę pomocniczą
::       _b - alias do tabeli
::       _c - wskazanie na zapis w tabeli _b
::  OLD: \copy_link/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_a[1].cntx_psh();
_a[1].clear();
_a[1].CLS:=!_b;
_a[1].SRC:=_c;
_a[1].DST:=_b.ref();
_a[1].add();
_a[1].cntx_pop()


\copy_fdst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Ustala wskazanie na kopię rekordu.
::   WE: _a - wskazanie na tablicę pomocniczą
::       _b - alias do tabeli
::       _c - wskazanie na zapis w tabeli _b
::   WY: numer rekordu kopii _c
::  OLD: \copy_fdst/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_a[1].index(_a[3]);
_a[1].prefix(!_b,!_b);
{? _c & _a[1].find_key(_c)
|| _a[1].DST
?}


\copy_icon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje ikonę ze wskazanego rekordu (pole "ref") do rekordu bieżącego.
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord źródłowy
::       _c - (opcjonalny) wskazanie na rekord docelowy
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \copy_icon/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
exec('copy_icon','phr_widok',2-!_a,'ref',$_b,{? var_pres('_c')=type_of(null) || $_c || $_a.ref() ?})


\copy_hist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje dane historyczne profili i kompetencji.
::   WE: _a - wskazanie na rekord w tabeli ZZ_HIST
::  OLD: \copy_hist/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_HIST.cntx_psh();
ZZ_HIST.index('DATA');
ZZ_HIST.prefix(exec('ref_firma','ustawienia'));
{? ~ZZ_HIST.seek(_a)
|| ZZ_HIST.cntx_pop();
   return()
?};
_new_dok:=ZZ_HIST.ZZ_DOK;
{? ~ZZ_HIST.next()
|| ZZ_HIST.cntx_pop();
   return()
?};

_hist:=ZZ_HIST.ref();
_dok:=ZZ_HIST.ZZ_DOK;
_lnk:=exec('copy_buff','phr_dane');

ZZ_PROF.cntx_psh();

: kopiowanie wartości globalnych
: domyślne typy ocen
exec('copy_proft','phr_dane',_dok,_new_dok);
: skala punktowa i wartosci bezposrednie
exec('copy_kompk','phr_dane',_dok,_new_dok);
exec('copy_komps','phr_dane',_dok,_new_dok);
exec('copy_kompz','phr_dane',_dok,_new_dok);

: kopiowanie opisów kompetencji
ZZ_KOMP.cntx_psh();
ZZ_KOMP.clear();
ZZ_KOMP.f_clear(0);
ZZ_KOMP.f_set('ZZ_KOMP,NAZWA',,'ZZ_HIST=:_a',_hist);
_loop:=ZZ_KOMP.f_first();
{!
|? _loop
|! {? ZZ_KOMP.f_get()
   || _ref:=ZZ_KOMP.ref();
      _dok:=ZZ_KOMP.ZZ_DOK;
      ZZ_KOMP.ZZ_DOK:=null;
      ZZ_KOMP.ZZ_HIST:=_a;
      ZZ_KOMP.ZZ_KOMP:=exec('copy_fdst','phr_dane',_lnk,ZZ_KOMP,ZZ_KOMP.ZZ_KOMP);
      {? ZZ_KOMP.add()
      || exec('copy_link','phr_dane',_lnk,ZZ_KOMP,_ref);
:        przypisz ikonę nowej kompetencji
         exec('copy_icon','phr_dane',ZZ_KOMP,_ref);
:        przepisz szczegółowy opis do nowej kompetencji
         {? (_text:=exec('memo_get','phr_tab',ZZ_DOK,_dok))<>''
         || exec('memo_put','phr_tab',ZZ_KOMP,_text)
         ?};
:        nadpisywanie skali punktowej i wartości bezposrednich
         exec('copy_kompk','phr_dane',_dok,ZZ_KOMP.ZZ_DOK,ZZ_KOMP.ref());
         exec('copy_komps','phr_dane',_dok,ZZ_KOMP.ZZ_DOK,ZZ_KOMP.ref());
         exec('copy_kompz','phr_dane',_dok,ZZ_KOMP.ZZ_DOK,ZZ_KOMP.ref());
:        kopiowanie stanowisk, dla ktorych kompetencja jest oceniana
         exec('copy_kryt','phr_dane',_lnk,_dok,ZZ_KOMP.ZZ_DOK);
:        nadpisywanie domyślnych typów i metod oceny kompetencji
         exec('copy_proft','phr_dane',_dok,ZZ_KOMP.ZZ_DOK);
         exec('copy_profo','phr_dane',
            exec('get_profk','phr_dane',_dok,_ref),
            exec('get_profk','phr_dane',ZZ_KOMP.ZZ_DOK,ZZ_KOMP.ref())
         )
      ?}
   ?};
   _loop:=ZZ_KOMP.f_next()
!};
ZZ_KOMP.f_clear(0);
ZZ_KOMP.cntx_pop();

: kopiowanie profili ogólnych
_typ_op:=exec('typ_op','phr_dane');
ZZ_PROF.index('NAZWA');
ZZ_PROF.prefix(_hist);
ZZ_KRYT.cntx_psh();
_loop:=ZZ_PROF.first();
{!
|? _loop
|! _ref:=ZZ_PROF.ref();
   _dok:=ZZ_PROF.ZZ_DOK;
   ZZ_PROF.cntx_psh();
   ZZ_PROF.clear();
   ZZ_PROF.ZZ_DOK:=null;
   ZZ_PROF.ZZ_HIST:=_a;
   {? ZZ_PROF.add()
   || exec('copy_link','phr_dane',_lnk,ZZ_PROF,_ref);
:     przypisz ikonę nowego profilu
      exec('copy_icon','phr_dane',ZZ_PROF,_ref);
:     przepisz szczegółowy opis do nowego profilu
      {? (_text:=exec('memo_get','phr_tab',ZZ_DOK,_dok))<>''
      || exec('memo_put','phr_tab',ZZ_KOMP,_text)
      ?};
:     przepisz kryteria doboru
      exec('copy_kryt','phr_dane',_lnk,
         exec('get_proft','phr_dane',_dok,_typ_op,1),
         exec('get_proft','phr_dane',ZZ_PROF.ZZ_DOK,_typ_op,1)
      );
:     zależnie od rodzaju profilu
      {? ZZ_PROF.RODZAJ().KOD='B' | SLO_KOD.KOD='O'
      || exec('copy_profk','phr_dane',_dok,ZZ_PROF.ZZ_DOK)
      ?}
   ?};
   ZZ_PROF.cntx_pop();
   _loop:=ZZ_PROF.next()
!};

ZZ_KRYT.cntx_pop();
ZZ_PROF.cntx_pop();
ZZ_HIST.cntx_pop();

: porządki
obj_del(_lnk[1]);
obj_del(_lnk)


\copy_kompk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Kopiuje wartości kodowane.
::   WE: _a - wskazanie na poprzedniego własciciela (ZZ_DOK)
::       _b - wskazanie na nowego właściciela (ZZ_DOK)
::       _c - (opcjonalny) wskazanie na kompetencję
::  OLD: \copy_kompk/zz_table.fml
::  OLD: \auto_kompk/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_c')=type_of(null) || _c || null ?};
_setup:='ZZ_KOMPK.ZZ_DOK:=null;ZZ_KOMPK.ZZ_LINK:=_a';

ZZ_KOMPK.cntx_psh();
ZZ_KOMPK.index('WARTOSC');
{? _ref
|| ZZ_KOMPK.prefix(ref_name(_b),_b,_ref);
   _setup+=';ZZ_KOMPK.ZZ_KOMP:=_b'
|| ZZ_KOMPK.prefix(ref_name(_b),_b)
?};
{? ZZ_KOMPK.first()
|| {! |? ZZ_KOMPK.del() !}
?};

_count:=0;
ZZ_KOMPK.clear();
ZZ_KOMPK.f_clear(0);
ZZ_KOMPK.f_set('WARTOSC',,'ZZ_LINK=:_a',_a);
_loop:=ZZ_KOMPK.f_first();
_setup:=$_setup;
{!
|? _loop
|! {? ZZ_KOMPK.f_get()
   || _txt:=exec('memo_get','phr_tab',ZZ_KOMPK);
      _setup(_b,_ref);
      {? ZZ_KOMPK.add()
      || _count+=1;
         {? _txt<>''
         || exec('memo_put','phr_tab',ZZ_KOMPK,_txt)
         ?}
      ?}
   ?};
   _loop:=ZZ_KOMPK.f_next()
!};
ZZ_KOMPK.f_clear(0);
ZZ_KOMPK.cntx_pop();
_count


\copy_komps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje wartości słownikowe.
::   WE: _a - wskazanie na poprzedniego właściciela (ZZ_DOK)
::       _b - wskazanie na nowego właściciela (ZZ_DOK)
::       _c - (opcjonalny) wskazanie na kompetencję
::  OLD: \copy_komps/zz_table.fml
::  OLD: \auto_komps/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_c')=type_of(null) || _c || null ?};
_setup:='ZZ_KOMPS.ZZ_DOK:=null;ZZ_KOMPS.ZZ_LINK:=_a';

ZZ_KOMPS.cntx_psh();
ZZ_KOMPS.index('WARTOSC');
{? _ref
|| ZZ_KOMPS.prefix(ref_name(_b),_b,_ref);
   _setup+=';ZZ_KOMPS.ZZ_KOMP:=_b'
|| ZZ_KOMPS.prefix(ref_name(_b),_b)
?};
{? ZZ_KOMPS.first()
|| {! |? ZZ_KOMPS.del() !}
?};

_count:=0;
ZZ_KOMPS.clear();
ZZ_KOMPS.f_clear(0);
ZZ_KOMPS.f_set('WARTOSC',,'ZZ_LINK=:_a',_a);
_loop:=ZZ_KOMPS.f_first();
_setup:=$_setup;
{!
|? _loop
|! {? ZZ_KOMPS.f_get()
   || _txt:=exec('memo_get','phr_tab',ZZ_KOMPS);
      _setup(_b,_ref);
      {? ZZ_KOMPS.add()
      || _count+=1;
         {? _txt<>''
         || exec('memo_put','phr_tab',ZZ_KOMPS,_txt)
         ?}
      ?}
   ?};
   _loop:=ZZ_KOMPS.f_next()
!};
ZZ_KOMPS.f_clear(0);
ZZ_KOMPS.cntx_pop();
_count


\copy_kompz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje wartości bezpośrednie.
::   WE: _a - wskazanie na poprzedniego właściciela (ZZ_DOK)
::       _b - wskazanie na nowego właściciela (ZZ_DOK)
::       _c - (opcjonalny) wskazanie na kompetencję
::  OLD: \copy_kompz/zz_table.fml
::  OLD: \auto_kompz/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_c')=type_of(null) || _c || null ?};
_setup:='ZZ_KOMPZ.ZZ_DOK:=null;ZZ_KOMPZ.ZZ_LINK:=_a';

ZZ_KOMPZ.cntx_psh();
ZZ_KOMPZ.index('UNIQUE');
{? _ref
|| ZZ_KOMPZ.prefix(ref_name(_b),_b,_ref);
   _setup+=';ZZ_KOMPZ.ZZ_KOMP:=_b'
|| ZZ_KOMPZ.prefix(ref_name(_b),_b)
?};
{? ZZ_KOMPZ.first()
|| {! |? ZZ_KOMPZ.del() !}
?};

_count:=0;
ZZ_KOMPZ.clear();
ZZ_KOMPZ.f_clear(0);
ZZ_KOMPZ.f_set('ZZ_KOMP',,'ZZ_LINK=:_a',_a);
_loop:=ZZ_KOMPZ.f_first();
_setup:=$_setup;
{!
|? _loop
|! {? ZZ_KOMPZ.f_get()
   || _txt:=exec('memo_get','phr_tab',ZZ_KOMPZ);
      _setup(_b,_ref);
      {? ZZ_KOMPZ.add()
      || _count+=1;
         {? _txt<>''
         || exec('memo_put','phr_tab',ZZ_KOMPZ,_txt)
         ?}
      ?}
   ?};
   _loop:=ZZ_KOMPZ.f_next()
!};

ZZ_KOMPZ.f_clear(0);
ZZ_KOMPZ.cntx_pop();
_count


\copy_proft
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje typy oceny.
::   WE: _a - wskazanie na poprzedniego właściciela (ZZ_DOK)
::       _b - wskazanie na nowego właściciela (ZZ_DOK)
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \copy_proft/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFT.cntx_psh();

ZZ_PROFT.index('UNIQUE');
ZZ_PROFT.prefix(ref_name(_b),_b);
{? ZZ_PROFT.first()
|| {! |? ZZ_PROFT.del() !}
?};

ZZ_PROFT.clear();
ZZ_PROFT.f_clear(0);
ZZ_PROFT.f_set('ZZ_TYP(KOD)',,'ZZ_LINK=:_a',_a);
_loop:=ZZ_PROFT.f_first();
{!
|? _loop
|! {? ZZ_PROFT.f_get()
   || _text:=exec('memo_get','phr_tab',ZZ_PROFT);
      ZZ_PROFT.ZZ_DOK:=null;
      ZZ_PROFT.ZZ_LINK:=_b;
      {? ZZ_PROFT.add() & _text<>''
      || exec('memo_put','phr_tab',ZZ_PROFT,_text)
      ?}
   ?};
   _loop:=ZZ_PROFT.f_next()
!};

ZZ_PROFT.f_clear(0);
ZZ_PROFT.cntx_pop()


\copy_profk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje kompetencje profilu.
::   WE: _a - wskazanie na poprzedniego właściciela (ZZ_DOK)
::       _b - wskazanie na nowego właściciela (ZZ_DOK)
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \copy_profk/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFK.cntx_psh();

ZZ_PROFK.index('UNIQUE');
ZZ_PROFK.prefix(ref_name(_b),_b);
{? ZZ_PROFK.first()
|| {! |? ZZ_PROFK.del() !}
?};

ZZ_PROFK.clear();
ZZ_PROFK.f_clear(0);
ZZ_PROFK.f_set('ZZ_KOMP',,'ZZ_LINK=:_a',_a);
_loop:=ZZ_PROFK.f_first();
{!
|? _loop
|! {? ZZ_PROFK.f_get
   || _text:=exec('memo_get','phr_tab',ZZ_PROFT);
      ZZ_PROFK.ZZ_DOK:=null;
      ZZ_PROFK.ZZ_LINK:=_b;
      {? ZZ_PROFK.add() & _text<>''
      || exec('memo_put','phr_tab',ZZ_PROFK,_text)
      ?}
   ?};
   _loop:=ZZ_PROFK.f_next()
!};

ZZ_PROFK.f_clear(0);
ZZ_PROFK.cntx_pop()


\copy_profo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje metody oceny.
::   WE: _a - wskazanie na poprzedniego właściciela (ZZ_PROFK)
::       _b - wskazanie na nowego właściciela (ZZ_PROFK)
::UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \copy_profo/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFO.cntx_psh();

ZZ_PROFO.index('UNIQUE');
ZZ_PROFO.prefix(_b);
{? ZZ_PROFO.first()
|| {! |? ZZ_PROFO.del() !}
?};

ZZ_PROFO.clear();
ZZ_PROFO.f_clear(0);
ZZ_PROFO.f_set('ZZ_MET',,'ZZ_PROFK=:_a',_a);
_loop:=ZZ_PROFO.f_first();
{!
|? _loop
|! {? ZZ_PROFO.f_get
   || _text:=exec('memo_get','phr_tab',ZZ_PROFO);
      _typ:=ZZ_PROFO.ZZ_PROFT().ZZ_TYP;
      ZZ_PROFO.ZZ_DOK:=null;
      ZZ_PROFO.ZZ_PROFK:=_b;
      ZZ_PROFO.ZZ_PROFT:=exec('get_proft','phr_dane',ZZ_PROFO.ZZ_PROFK().ZZ_KOMP().ZZ_DOK,_typ);
      {? ZZ_PROFO.add & _text<>''
      || exec('memo_put','phr_tab',ZZ_PROFO,_text)
      ?}
   ?};
   _loop:=ZZ_PROFO.f_next()
!};

ZZ_PROFO.f_clear(0);
ZZ_PROFO.cntx_pop()


\copy_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje kryteria doboru.
::   WE: _a - wskazanie na tablicę pomocniczą
::       _b - właściciel zapisu
::       _c - wskazanie nowego właściciela
::  OLD: \copy_kryt/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('UNIQUE');
ZZ_KRYT.prefix(ref_name(_b),_b);
_loop:=ZZ_KRYT.first();
{!
|? _loop
|! _ref:=ZZ_KRYT.ref();
   _dok:=ZZ_KRYT.ZZ_DOK;
   _lnk:=exec('dok2ref','phr_tab',ZZ_KRYT.ZZ_LINK);
   ZZ_KRYT.cntx_psh();
   ZZ_KRYT.clear();
   ZZ_KRYT.ZZ_DOK:=null;
   ZZ_KRYT.ZZ_LINK:=_c;
   ZZ_KRYT.ZZ_KRYT:=exec('copy_fdst','phr_dane',_a,ZZ_KRYT,ZZ_KRYT.ZZ_KRYT);
   {? ZZ_KRYT.add()
   || exec('copy_link','phr_dane',_a,ZZ_KRYT,_ref);
:     nadpisywanie skali punktowej i wartości bezpośrednich
      {? ZZ_KRYT.ZZ_LINK().KLASA=2-!ZZ_KOMP
      || {? ZZ_KOMP.seek(exec('copy_fdst','phr_dane',_a,ZZ_KOMP,_lnk),)
         || exec('copy_kompk','phr_dane',_dok,ZZ_KRYT.ZZ_DOK,ZZ_KOMP.ref());
            exec('copy_komps','phr_dane',_dok,ZZ_KRYT.ZZ_DOK,ZZ_KOMP.ref());
            exec('copy_kompz','phr_dane',_dok,ZZ_KRYT.ZZ_DOK,ZZ_KOMP.ref())
         ?}
      |? ZZ_KRYT.ZZ_LINK().KLASA=2-!ZZ_PROFT
      || exec('copy_profk','phr_dane',_dok,ZZ_KRYT.ZZ_DOK)
      ?};
      _tab:=($ZZ_KRYT.KLASA)();
      _ref:=_tab.ref();
      _tab.cntx_psh();
      _tab.clear();
      _tab.index('ZZ_KRYT');
      {? _tab.find_key(_ref)
      || _tab.ZZ_KRYT:=ZZ_KRYT.ref();
         {? _tab.add()
         || exec('copy_link','phr_dane',_a,_tab,_ref)
         ?}
      ?};
      _tab.cntx_pop();
      &_tab
   ?};
   ZZ_KRYT.cntx_pop();
   _loop:=ZZ_KRYT.next()
!};
ZZ_KRYT.cntx_pop()


\kryt_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Ustala tabelę szczegułów kryterium dla tabeli źródłowej.
::   WE: _a - alias tabeli źródłowej
::   WY: alias tabeli
::  OLD: \kryt_tab/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG)
|| return
?};
{? _a=ZZ_FML || ZZ_KRYTF
|? _a=UD_DEF || ZZ_KRYTJ
|? _a=UD_SKL || ZZ_KRYTJ
|? _a=STN    || ZZ_KRYTS
|? _a=P      || ZZ_KRYTP
|| ~~
?}


\kryt_src
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Ustala tabelę źrodłową dla krytrium ogólnego.
::   WE: _a - wskazanie na kryterium ogólne, jeśli pominięty lub inny niż wskazanie na rekord ZZ_KRYT, to dla bieżącego.
::   WY: alias tabeli
::  OLD: \kryt_src/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_cntx:=1;
{? var_pres('_a')=type_of(null) & 8+$_a=ZZ_KRYT.name()
|| ZZ_KRYT.cntx_psh();
   ZZ_KRYT.clear();
   {? ~ZZ_KRYT.seek(_a)
   || ZZ_KRYT.cntx_pop();
      return(null)
   ?}
|? var_pres('_a')=type_of(0)
|| ZZ_KRYT.cntx_psh();
   ZZ_KRYT.clear();
   {? ~ZZ_KRYT.seek(_a,)
   || ZZ_KRYT.cntx_pop();
      return(null)
   ?}
|| _cntx:=0
?};

_tab:=($ZZ_KRYT.KLASA)();
_src:=_tab.fld_join(2);

{? _cntx || ZZ_KRYT.cntx_pop() ?};
{? _src<>'' || ($_src)() || ~~ ?}


\kryt_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca wartość kryterium.
::   WE: _a - alias tabeli szczegółow kryterium
::       _b - wskazanie na kryterium ogólne
::   WY: wskazanie na rekord przechowywane w szczegółach kryterium.
::  OLD: \kryt_ref/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_a.clear();
_a.index('ZZ_KRYT');
{? _a.find_key(_b)
|| _a.REKORD
|| null
?}


\kryt_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca wartość kryterium.
::   WE: _a - wskazanie na kryterium ogólne, jeśli pominięty lub inny niz wskazanie na rekord ZZ_KRYT, to dla bieżącego.
::   WY: wskazanie na rekord przechowywane w szczegółach kryterium.
::  OLD: \kryt_val/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_cntx:=1;
{? var_pres('_a')=type_of(null) & 8+$_a=ZZ_KRYT.name()
|| ZZ_KRYT.cntx_psh();
   ZZ_KRYT.clear();
   {? ~ZZ_KRYT.seek(_a)
   || ZZ_KRYT.cntx_pop();
      return(null)
   ?}
|? var_pres('_a')=type_of(0)
|| ZZ_KRYT.cntx_psh();
   ZZ_KRYT.clear();
   {? ~ZZ_KRYT.seek(_a,)
   || ZZ_KRYT.cntx_pop();
      return(null)
   ?}
|| _cntx:=0
?};
_ref:=exec('kryt_ref','phr_dane',($ZZ_KRYT.KLASA)(),ZZ_KRYT.ref());
{? _cntx || ZZ_KRYT.cntx_pop() ?};
_ref


\kryt_key
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca tekstową reprezentację gałęzi kryterium.
::   WE: _a - alias tabeli
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \kryt_key/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
_str:='';
_a.cntx_psh();
ZZ_KRYT.cntx_psh();
{? ZZ_KRYT.seek(_a.ZZ_KRYT().ZZ_KRYT,)
|| _tab:=($ZZ_KRYT.KLASA)();
   _tab.cntx_psh();
   _tab.index('ZZ_KRYT');
   {? _tab.find_key(ZZ_KRYT.ref())
   || _str:=exec('kryt_key','phr_dane',_tab)
   ?};
   _tab.cntx_pop()
?};
_str+='|'+$_a.REKORD;
ZZ_KRYT.cntx_pop();
_a.cntx_pop();
_str


\poziom_komp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Ustala wartość oczekiwaną ocenianej kompetencji.
::   WE: _a - wskazanie na dokument oceny
::       _b - wskazanie na opis kompetencji
::       _c - alias do tabeli przechowującej wartości
::  OLD: \poziom_komp/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_poziom:=exec('poziom_oceny','phr_dane',_a,_b,_c))>0
|| return(_poziom)
?};

_dok:=null;
ZZ_KOMP.cntx_psh();
ZZ_KOMP.clear();
{? ZZ_KOMP.seek(_b)
|| _dok:=ZZ_KOMP.ZZ_DOK
|| ZZ_KOMP.cntx_pop();
   return(0)
?};
ZZ_KOMP.cntx_pop();

_c.cntx_psh();
{? _c=ZZ_KOMPS | _c=ZZ_KOMPK
|| _c.index('POZIOM');
   _c.prefix(ref_name(_dok),_dok,_b);
   {? _c.find_key('T') & _poziom<_c.WARTOSC
   || _poziom:=_c.WARTOSC
   ?}
|? _c=ZZ_KOMPZ
|| _c.index('UNIQUE');
   _c.prefix(ref_name(_dok),_dok,_b);
   {? _c.first & _poziom<_c.POZIOM
   || _poziom:=_c.POZIOM
   ?}
?};
_c.cntx_pop();
_poziom


\poziom_oceny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [#12.10]
:: OPIS: Ustala wartość oczekiwaną oceny.
::   WE: _a - wskazanie na dokument kadrowy
::       _b - wskazanie na opis kompetencji
::       _c - alias do tabeli przechowującej wartości
::  OLD: \poziom_oceny/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_poziom:=0;
_c.cntx_psh();
{? _c=ZZ_KOMPS | _c=ZZ_KOMPK
|| _c.index('POZIOM');
   _c.prefix(ref_name(_a),_a,_b);
   {? _c.find_key('T')
   || _poziom:=_c.WARTOSC
   ?}
|? _c=ZZ_KOMPZ
|| _c.index('UNIQUE');
   _c.prefix(ref_name(_a),_a,_b);
   {? _c.first()
   || _poziom:=_c.POZIOM
   ?}
?};
_c.cntx_pop();
_poziom


\ocena_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.02]
:: OPIS: Aktualizuje zawartość kartoteki ocen
::   WE: _a [_ZO_KOMP] - wskazanie oceny kompetencji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZO_KOMP.cntx_psh();
ZO_KOMP.prefix();
{? ~ZO_KOMP.seek(_a)
|| ZO_KOMP.cntx_pop();
   return()
?};

exec('for_each','phr_tab',"_a.cntx_psh(); _a.clear()",ZO_FORM,ZO_OSTYP,ZO_OCENA);

_type:=ZO_KOMP.ZO_FORM().ZO_OSTYP().ZZ_TYP;
_test:=ZO_FORM.ZO_TEST;
_komp:=ZO_KOMP.ZZ_KOMP;
_ocena:=null;

ZO_OCENA.index('UNIQUE');
ZO_OCENA.prefix(_test);
{? ~ZO_OCENA.find_key(_komp,_type)
|| {? ZO_OCENA.find_key(_komp,null)
   || _ocena:=ZO_OCENA.ref()
   || ZO_OCENA.blank();
      ZO_OCENA.ZO_TEST:=_test;
      ZO_OCENA.ZZ_KOMP:=_komp;
      {? ZO_OCENA.add()
      || _ocena:=ZO_OCENA.ref()
      ?}
   ?};
   {? _ocena
   || ZO_OCENA.blank();
      ZO_OCENA.ZO_TEST:=_test;
      ZO_OCENA.ZO_OCENA:=_ocena;
      ZO_OCENA.ZZ_KOMP:=_komp;
      ZO_OCENA.ZZ_TYP:=_type;
      ZO_OCENA.add()
   ?}
|| ZO_OCENA.put()
?};

exec('for_each','phr_tab',"_a.cntx_pop",ZO_KOMP,ZO_FORM,ZO_OSTYP,ZO_OCENA);
~~


\ocena_nad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Uzupełnia listę ocen kompetencji o oceny kompetencji nadrzędnych.
::  OLD: \ocena_nad/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
:: czy istnieje kompetencja nadrzędna w stosunku do ocenianej kompetencji?
:: nie:
::    koniec
:: tak:
::    czy istnieje już ocena dla nadrzędnej kompetencji?
::    tak:
::       koniec
::    nie:
::       dołącz ocenę dla kompetencji nadrzędnej

{? ZO_OCENA.ZZ_KOMP().ZZ_KOMP=0 | ZO_OCENA.ZZ_TYP<>null
|| return()
?};

_test:=ZO_OCENA.ZO_TEST;
_ref:=null;

ZO_OCENA.cntx_psh();
ZO_OCENA.index('UNIQUE');
ZO_OCENA.prefix(_test,ZZ_KOMP.ZZ_KOMP,null);
{? ZO_OCENA.first()
|| _ref:=ZO_OCENA.ref()
|| _komp:=null;
   ZZ_KOMP.cntx_psh();
   ZZ_KOMP.prefix();
   {? ZZ_KOMP.seek(ZZ_KOMP.ZZ_KOMP,)
   || _komp:=ZZ_KOMP.ref()
   ?};
   ZZ_KOMP.cntx_pop();
   {? _komp=null
   || ZO_OCENA.cntx_pop();
      return
   ?};
   ZO_OCENA.blank(1);
   ZO_OCENA.ZO_TEST:=_test;
   ZO_OCENA.ZZ_KOMP:=_komp;
   {? ZO_OCENA.add()
   || _ref:=ZO_OCENA.ref()
   ?}
?};
ZO_OCENA.cntx_pop();

{? _ref<>null
|| ZO_OCENA.ZO_OCENA:=_ref;
   ZO_OCENA.put()
?}


\ocena_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wylicza wartosc pol.
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord ZO_TEST
::       _c - wskazanie na rekord ZZ_KOMP
::       _d - wskazanie na rekord ZZ_TYP
::  OLD: \ocena_licz/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_awc:=_exc:=_aec:=_tfc:=0;
_a.AW:=_a.EX:=_a.AE:=_a.TW:=0;
_a.CLO:=_a.CEX:=_a.CHI:=_a.TF:=0;

_chk:=0;
{? _a=ZO_OCENA
|| _a.cntx_psh();
   _a.index('NAZWA');
   _a.prefix(_b,#_a.ref());
   _chk:=(_a.first() & ~_a.ZZ_TYP);
   {? ~_chk || _a.cntx_pop() ?}
?};

{? _chk
||
:  licz na podstawie ocen pośrednich
   _clo:=_cex:=_chi:=_mod:=0;
   _cnt:=_a.size;
   _loop:=1;
   {!
   |? _loop
   |! _mod+=(_a.AE>0);
      _awc+=_a.AW;
      _exc+=_a.EX;
      _aec+=_a.AE;
      _clo+=_a.CLO;
      _cex+=_a.CEX;
      _chi+=_a.CHI;
      _loop:=_a.next()
   !};
   _a.cntx_pop();
   _a.AW:=(_awc/_cnt)$2;
   _a.EX:=(_exc/_cnt)$2;
   _a.AE:={? _mod || (_aec/_mod)$2 ?};
   _a.CLO:=_clo;
   _a.CEX:=_cex;
   _a.CHI:=_chi;
   _a.TF:=_a.CEX+_a.CHI;
   _tfc:=_a.CLO+_a.CEX+_a.CHI

||
:  licz na podstawie ocen niższego poziomu
   _c_pres:=(var_pres('_c')=type_of(null) & _c);
   _d_pres:=(var_pres('_d')=type_of(null) & _d);

   ZO_KOMP.cntx_psh();
   ZO_KOMP.index('OCENA');

:  czy dla łącznej oceny kompetencji przepisać ocenę uzgodnioną
   {? _c_pres & ~_d_pres
   || _typ_uo:=exec('typ_ou','phr_dane');
      ZO_KOMP.prefix(_b,_c);
      {? ZO_KOMP.find_key(_typ_uo)
      || _d:=_typ_uo;
         _d_pres:=1
      ?}
   ?};

   {? _d_pres || ZO_KOMP.prefix(_b,_c,_d)
   |? _c_pres || ZO_KOMP.prefix(_b,_c)
   || ZO_KOMP.prefix(_b)
   ?};

   _loop:=ZO_KOMP.first();
   {!
   |? _loop
   |! {? _d_pres & ZO_KOMP.W_TYP
      || _a.AW+=ZO_KOMP.W_TYP;
         _awc+=1
      |? _c_pres & ZO_KOMP.W_KOMP
      || _a.AW+=ZO_KOMP.W_KOMP;
         _awc+=1
      ?};
      {? ZO_KOMP.POZIOM
      || _a.EX+=ZO_KOMP.POZIOM;
         _exc+=1
      ?};
      {? ZO_KOMP.OCENA
      || {? ~_d_pres
         || _a.AE+=ZO_KOMP.OCENA*ZO_KOMP.W_TYP;
            _aec+=ZO_KOMP.W_TYP
         |? ~_c_pres
         || _a.AE+=ZO_KOMP.OCENA*ZO_KOMP.W_TYP*ZO_KOMP.W_KOMP;
            _aec+=ZO_KOMP.W_TYP*ZO_KOMP.W_KOMP
         || _a.AE+=ZO_KOMP.OCENA;
            _aec+=1
         ?}
      ?};
      _st:=ZO_KOMP.STATUS;
      {? ZO_KOMP.STATUS<>'?'
      || {? ZO_KOMP.STATUS='-' || _a.CLO+=1
         |? ZO_KOMP.STATUS='=' || _a.CEX+=1
         |? ZO_KOMP.STATUS='+' || _a.CHI+=1
         ?};
         {? ZO_KOMP.STATUS<>'-'
         || _a.TF+=1
         ?};
         _tfc+=1
      ?};
      _loop:=ZO_KOMP.next()
   !};

   ZO_KOMP.cntx_pop();

   _a.AW:={? _awc || _a.AW/_awc ?}$2;
   _a.EX:={? _exc || _a.EX/_exc ?}$2;
   _a.AE:={? _aec || _a.AE/_aec ?}$2
?};

_a.TW:={? _a.EX || 100*_a.AE/_a.EX ?}$2;
_a.TF:={? _tfc || 100*_a.TF/_tfc ?}$2;

~~


\init_typzal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy istnieje UD_DEF dla typu załącznika, jeśli nie, to tworzy odpowiedni zapis.
::   WE: _a - alias tabeli
::       _b - symbol składnika
::       _c - opis składnika
::       _d - symbol zapisu nadrzędnego
::       _e - typ zwracanego wyniku
::            nie zero - tablica nazwana z elementami: UD_DEF, UD_SKL, UD_TYP
::   WY: wskazanie na rekord w tabeli UD_DEF
:: UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \init_typzal/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('has_dok','phr_tab',_a)
|| return(null)
?};

exec('for_each','phr_tab',"_a.cntx_psh()",UD_TYP,UD_SCH,UD_SKL,UD_DEF);
_restore:="exec('for_each','phr_tab',$'_a.cntx_pop()',UD_TYP,UD_SCH,UD_SKL,UD_DEF)";

_result:={? var_pres('_e')<>type_of(0) | _e=0 || "_a.UD_DEF" || "_a" ?};
_val:=obj_new('UD_DEF','UD_SKL','UD_TYP');
_val.UD_DEF:=null;
_val.UD_SKL:=null;
_val.UD_TYP:=null;

_typ_sym:='TYPZAL';
_sch_sym:=2-!_a;
_typ_ref:=exec('dodaj_ud_typ','schemat',_typ_sym,'Typy załączników','N','N','T');
_sch_ref:=exec('dodaj_ud_sch','schemat',_typ_ref,_sch_sym,_a.comment(),'T');
_skl_ref:=exec('dodaj_ud_skl','schemat',_typ_ref,_b,_c);

{? _skl_ref=null
|| _restore();
   return(_result(_val))
?};

_def:=exec('szukaj_ud_def','schemat',_sch_ref,_skl_ref);

{? _def.REF<>null
|| _val.UD_DEF:=_def.REF;
   _val.UD_SKL:=_def.UD_SKL;
   _val.UD_TYP:=_typ_ref;
   _restore();
   return(_result(_val))
?};

_def_nad:=null;
{? var_pres('_d')=type_of('') & _d<>''
|| _skl_nad:=exec('szukaj_ud_skl','schemat',_typ_ref,_d);
   _def_nad:=exec('szukaj_ud_def','schemat',_sch_ref,_skl_nad).REF
|? var_pres('_d')=type_of(null)
|| _def_nad:=_d
?};

UD_DEF.clear();
UD_DEF.blank();
UD_DEF.UD_SCH:=_sch_ref;
UD_DEF.UD_DEF:=_def_nad;
UD_DEF.UD_SKL:=_skl_ref;
{? UD_DEF.add()
|| _val.UD_DEF:=UD_DEF.ref();
   _val.UD_SKL:=UD_DEF.UD_SKL;
   _val.UD_TYP:=UD_DEF.UD_SKL().UD_TYP
?};

_restore();
_result(_val)


\typzal_root
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy istnieje UD_DEF dla typu załącznika, jeśli nie, to tworzy odpowiedni zapis.
::   WE: _a - alias do tabeli
::       _b - typ zwracanego wyniku
::            nie zero - tablica nazwana z elementami: UD_DEF, UD_SKL, UD_TYP
::  OLD: \typzal_root/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('init_typzal','phr_dane',_a,'_','Wszystkie załączniki',,(var_pres('_b')=type_of(0) & _b))


\typzal_rep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy istnieje UD_DEF dla typu załącznika, jeśli nie, to tworzy odpowiedni zapis.
::   WE: _a - alias do tabeli
::       _b - typ zwracanego wyniku
::            nie zero - tablica nazwana z elementami: UD_DEF, UD_SKL, UD_TYP
::  OLD: \typzal_rep/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('init_typzal','phr_dane',_a,'_R','Raporty',exec('typzal_root','phr_dane',_a),(var_pres('_b')=type_of(0) & _b))


\get_dokz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Wyszukuje/tworzy załącznik
::   WE: _a - alias do tabeli, dla której zapisywany jest załącznik
::       _b - wskazanie na typ załącznika
::       _c - tytuł załącznika
::       _d - (opcjonalny) sygnatura
::       _e - (opcjonalny) różny od 0 - wyłączenie tworzenia załącznika
::  OLD: \get_dokz/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
_off:=var_pres('_e')=type_of(0) & _e;
{? exec('has_dok','phr_tab',_a)
|| _insert:=exec('insert','phr_tab',ZZ_DOKZ,0,'ZZ_LINK','UD_SKL','ISD');
   ZZ_DOK.clear();
   ZZ_DOKZ.clear();
   {? var_pres('_d')=type_of('') & +form(_d)
   || ZZ_DOKZ.index('ISD');
      ZZ_DOKZ.prefix(ref_name(_a.ZZ_DOK),_a.ZZ_DOK,_b);
      {? ZZ_DOKZ.find_key(_d,_d)
      || _ref:=ZZ_DOKZ.ref();
         {? ~_off
         || ZZ_DOKZ.ZZ_DOK();
            ZZ_DOK.AUTOR:=userdata();
            ZZ_DOK.TYTUL:=_c;
            ZZ_DOK.DATA:=date();
            ZZ_DOK.GODZ:=time();
            ZZ_DOK.put()
         ?}
      |? ~_off
      || {? _insert(_a.ZZ_DOK,_b,_d)
         || ZZ_DOKZ.ZZ_DOK().TYTUL:=_c;
            {? ZZ_DOK.put()
            || _ref:=ZZ_DOKZ.ref()
            ?}
         ?}
      ?}
   |? ~_off
   || {? _insert(_a.ZZ_DOK,_b)
      || ZZ_DOKZ.ZZ_DOK().TYTUL:=_c;
         {? ZZ_DOK.put()
         || _ref:=ZZ_DOKZ.ref()
         ?}
      ?}
   ?}
?};
_ref


\copy_zf_wid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Kopiuje ustawienia widoków.
::   WE: _a [REFERENCE] - wskazanie na źródłowy dokument kadrowy
::       _b [REFERENCE] - wskazanie na docelowy dokument kadrowy
::  OLD: \zf_wid_copy/zz_table.fml
::----------------------------------------------------------------------------------------------------------------------
ZF_WID.cntx_psh();
ZF_WID.clear();
ZF_WID.f_clear();
{? _a<>null()
|| ZF_WID.f_set(,,'ZZ_LINK=:_a',_a)
|| ZF_WID.f_set(,,'ZZ_LINK is null')
?};
_loop:=ZF_WID.f_first();
{!
|? _loop
|! {? ZF_WID.f_get()
   || ZF_WID.ZZ_LINK:=_b;
      ZF_WID.add()
   ?};
   _loop:=ZF_WID.f_next()
!};
ZF_WID.f_clear();
ZF_WID.cntx_pop()


\proc_sf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Uzupełnia formularze o pozycje zgodnie z definicją.
::   WE: _a - wskazanie na dokument zapisu w tabeli ZO_TEST
::  OLD: \proc_sf/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_TEST.cntx_psh();
ZO_TEST.index('ZZ_DOK');
ZO_TEST.prefix();
{? ~ZO_TEST.find_key(ref_name(_a),_a)
|| ZO_TEST.cntx_pop();
   return()
?};

ZF_WYK.cntx_psh();
ZF_WYK.index('OK');
ZF_WYK.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK);
{? ~ZF_WYK.find_key('T')
|| ZO_TEST.cntx_pop();
   ZF_WYK.cntx_pop();
   return()
?};

ZO_FORM.cntx_psh();
ZO_FORM.index('UNIQUE');
ZO_FORM.prefix(ZO_TEST.ref());

ZO_ASP.cntx_psh();
ZO_ASP.index('UNIQUE');

ZO_DOD.cntx_psh();
ZO_DOD.index('UNIQUE');

ZF_WID.cntx_psh();
ZF_WID.index('UNIQUE');

ZF_POZ.cntx_psh();
ZF_POZ.index('NUMER');
ZF_POZ.prefix(ZF_WYK.ZF_DEF);

_loop:=ZF_POZ.first();
{!
|? _loop
|! ZF_WID.prefix(ref_name(ZF_POZ.ZZ_DOK),ZF_POZ.ZZ_DOK);
   ZO_ASP.prefix(ZF_WYK.ref());
   _asp:=ZO_ASP.find_key(ZF_POZ.ZF_SKL);
   {? ~_asp
   || ZO_ASP.blank(1);
      ZO_ASP.ZF_WYK:=ZF_WYK.ref();
      ZO_ASP.ZF_SKL:=ZF_POZ.ZF_SKL;
      ZO_ASP.NUMER:=ZF_POZ.NUMER;
      _asp:=ZO_ASP.add()
   ?};
   {? _asp
   || _loop:=ZO_FORM.first();
      {!
      |? _loop
      |! {? ZF_WID.find_key(ZO_FORM.ZZ_TYP) & ZF_WID.OCENA_W='T'
         || ZO_DOD.prefix(ZO_FORM.ref());
            {? ~ZO_DOD.find_key(ZO_ASP.ref())
            || ZO_DOD.blank(1);
               ZO_DOD.ZO_ASP:=ZO_ASP.ref();
               ZO_DOD.ZO_FORM:=ZO_FORM.ref();
               ZO_DOD.add(1)
            ?}
         ?};
         _loop:=ZO_FORM.next()
      !}
   ?};
   _loop:=ZF_POZ.next()
!};

ZF_WYK.cntx_pop();
ZF_POZ.cntx_pop();
ZF_WID.cntx_pop();
ZO_DOD.cntx_pop();
ZO_ASP.cntx_pop();
ZO_FORM.cntx_pop();
ZO_TEST.cntx_pop()


\czy_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Sprawdza, czy bieżący zapis danej tabeli występuje jak rekord w tabeli ZZ_OSOBA.
::   WE: _a - alias tabeli
::       _b - czy w przypadku braku osoby utworzyć? [0*/1]
::   WY: wskazanie rekordu, jeśli został znaleziony, wpp null
::  OLD: \czy_osoba/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) || return(null)
|? ~exec('has_dok','phr_tab',_a) || return(null)
?};
ZZ_OSOBA.clear();
ZZ_OSOBA.index('ZZ_LINK');
{? ZZ_OSOBA.find_key(ref_name(_a.ZZ_DOK),_a.ZZ_DOK)
|| ZZ_OSOBA.ref()
|| {? var_pres('_b')=type_of(0) & _b>0
   || {? exec('utworz_osoba','phr_dane',_a)
      || ZZ_OSOBA.ref
      || null
      ?}
   ?}
?}


\ocena_trenera
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.10]
:: OPIS: Aktualizuje ocenę trenera i organizatora na podstawie ankiet.
::   WE: _a - wskazanie na osobę bedacą trenerem
::UWAGA! Poprawność argumentów wywołania nie jest weryfikowana
::  OLD: \ocena_tren/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| return
?};

SZK_TREN.cntx_psh();
SZK_TREN.index('ZZ_OSOBA');
SZK_TREN.prefix();
{? SZK_TREN.find_key(_a) & exec('zz_ocena_ver','phr_tab',SZK_TREN)
|| SZK_TREN.ZZ_OCENA()
|| SZK_TREN.cntx_pop();
   return()
?};

ZA_TEST.cntx_psh();
ZA_TEST.clear();
ZA_TEST.f_set(
   'NUMER',
   'join ZA_ZEST using (ZA_TEST.ZA_ZEST,ZA_ZEST.REFERENCE) '+
   'join SZK_OPIS using (ZA_ZEST.ZZ_LINK,SZK_OPIS.ZZ_DOK)',
   'SZK_OPIS.TRENER=:_a',
   _a
);

: aktualizuj ocenę organizatora na podstawie ankiet
exec('zz_ocena_cnt','phr_tab',SZK_TREN.ZZ_OCENA);
ZA_TEST.f_clear();
ZA_TEST.cntx_pop();
SZK_TREN.cntx_pop()


\utworz_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła tworzy nowy zapis w tabeli ZZ_OSOBA.
::   WE: _a - alias tabeli
::  OLD: \osoba_create/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=P | _a=PRZ
|| _src:=OSOBA;
   _a.OSOBA()
|? _a=RP_OSOBA
|| _src:=RP_OSOBA
|| return(0)
?};

ZZ_OSOBA.blank(1);
ZZ_OSOBA.ZZ_LINK:=_a.ZZ_DOK;
exec('ustaw_osoba','phr_dane',_src);
ZZ_OSOBA.add()


\ustaw_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Formuła ustawia wartości pól w tabeli ZZ_OSOBA.
::   WE: _a [REFERENCE] - Wskazanie tabeli z której przepisywane będą pola.
::  OLD: \osoba_setup/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_OSOBA.NAZWISKO:=_a.NAZWISKO;
ZZ_OSOBA.RODOWE:=_a.RODOWE;
ZZ_OSOBA.PIERWSZE:=_a.PIERWSZE;
ZZ_OSOBA.DRUGIE:=_a.DRUGIE;
{? var_pres('PLEC',_a)>0
|| ZZ_OSOBA.PLEC:=_a.PLEC
?};
{? var_pres('PESEL',_a)>0
|| ZZ_OSOBA.PESEL:=_a.PESEL
?}


\kopiuj_wym_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Kopiuje wymagania
::   WE: _a - wskazanie na nowego właściciela wymagań
::       _b - wskazanie na jednostkę organizacyjną
::       _c - wskazanie na opis stanowiska
::  OLD: \kopiuj_wym_str/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
RPW_STN.cntx_psh();
RPW_STN.index('UNIQUE');
RPW_STN.prefix();

: wyszukaj wg jednostki i stanowiska
{? ~RPW_STN.find_key(_b,_c)
|| {? ~RPW_STN.find_key(null,_c)
   || RPW_STN.cntx_pop();
:     porażka!
      return()
   ?}
?};

exec('kopiuj_wym','phr_dane',_a,RPW_STN.ZZ_DOK);

RPW_STN.cntx_pop()


\kopiuj_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Kopiuje wymagania
::   WE: _a - wskazanie na nowego właściciela wymagań
::       _b - wskazanie na dotychczasowego właściciela
::  OLD: \kopiuj_wym/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
RPW_DEF.cntx_psh();
RPW_DEF.index('UNIQUE');
RPW_DEF.prefix(ref_name(_a),_a);
{? RPW_DEF.first()
|| RPW_DEF.cntx_pop();
   return()
?};
RPW_DEF.clear();

RPW_POZ.cntx_psh();
RPW_POZ.clear();

RPW_DEF.f_set(,,'ZZ_LINK=:_a',_b);
_loop:=RPW_DEF.f_first();
{!
|? _loop
|! _dok:=RPW_DEF.ZZ_DOK;
   RPW_DEF.ZZ_DOK:=null;
   RPW_DEF.ZZ_LINK:=_a;
   {? RPW_DEF.add()
   || _link:=RPW_DEF.ZZ_DOK;
      RPW_POZ.f_set(,,'ZZ_LINK=:_a',_dok);
      _loop:=RPW_POZ.f_first();
      {!
      |? _loop
      |! RPW_POZ.ZZ_DOK:=null;
         RPW_POZ.ZZ_LINK:=_link;
         RPW_POZ.add();
         _loop:=RPW_POZ.f_next()
      !}
   ?};
   _loop:=RPW_DEF.f_next()
!};

RPW_POZ.cntx_pop();
RPW_DEF.cntx_pop()


\kopiuj_lok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.30]
:: OPIS: Kopiuje lokalizacje
::   WE: _a - wskazanie na nowego właściciela lokalizacji
::       _b - wskazanie na dotychczasowego właściciela lokalizacji
::  OLD: \kopiuj_lok/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
RP_LOK.cntx_psh();
RP_LOK.clear();
RP_LOK.index('UNIQUE');
RP_LOK.f_set(,,'ZZ_LINK=:_a',_b);
_loop:=RP_LOK.f_first();
{!
|? _loop
|! {? ~RP_LOK.find_key(ref_name(_a),_a,RP_LOK.SLO_NAZ)
   || RP_LOK.ZZ_LINK:=_a;
      RP_LOK.add()
   ?};
   _loop:=RP_LOK.f_next()
!};
RP_LOK.f_clear();
RP_LOK.cntx_pop()


\komp4stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [#12.10]
:: OPIS: Zakłada filtr na tabelę kompetencji ograniczający listę do tych przypisanych do stanowiska.
::       UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::   WE:  _a  [REFERENCE] - Wskazanie na stanowisko.
::       [_b] [REFERENCE] - Wskazanie na typ oceny.
::  OLD: \komp4stn/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KOMP.sel_adel();
ZZ_KOMP.prefix();
ZZ_KOMP.f_set(
   'NAZWA',,
   'ZZ_KOMP.ZZ_HIST=:_a and '
   'ZZ_KOMP.ZZ_DOK in ( '
      'select ZZ_LINK '
      'from ZZ_KRYTS join ZZ_KRYT using (ZZ_KRYTS.ZZ_KRYT,ZZ_KRYT.REFERENCE) '
      'where ZZ_KRYTS.REKORD=:_b and ZZ_KRYT.ZZ_TYP=:_c '
   ')',
   ZZ_POM.ZZ_HIST,_a,{? var_pres('_b')<>type_of(null()) || exec('typ_op','phr_dane') || _b ?}
)


\stn2krytdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Ustala wskazanie na dokument właąciwy wg. stanowiska i właściciela kryteriów doboru.
::       UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::   WE: _a [REFERENCE] - Wskazanie na stanowisko.
::       _b [REFERENCE] - Dokument właściciela kryteriów.
::  OLD: \stn2krytdok/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
ZZ_KRYT.cntx_psh();
ZZ_KRYTS.cntx_psh();
ZZ_KRYTS.index('REKORD');
ZZ_KRYTS.prefix(_a);
_loop:=ZZ_KRYTS.first();
{!
|? _loop & ~_result
|! {? ZZ_KRYTS.ZZ_KRYT().ZZ_LINK=_b
   || _result:=ZZ_KRYT.ZZ_DOK
   || _loop:=ZZ_KRYTS.next()
   ?}
!};
ZZ_KRYTS.cntx_pop();
ZZ_KRYT.cntx_pop();
_result


\copyProfComps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje kompetencje profilu.
::   WE: _a - wskazanie na dokument docelowy
::  OLD: \copyProfComps/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_dst:=ZZ_PROF.NAZWA;

ZZ_PROF.cntx_psh();
ZZ_PROF.clear();
ZZ_PROF.f_set(
   'NAZWA,RODZAJ(KOD)',
   'join SLO_KOD using (ZZ_PROF.RODZAJ,SLO_KOD.REFERENCE)',
   'ZZ_PROF.ZZ_HIST=:_a and ZZ_PROF.ZZ_DOK<>:_b and SLO_KOD.KOD'+
   {? ZZ_PAR.OGR_KOP='N' || ' in (\'B\',\'O\')' || '=\'B\'' ?},
   ZZ_POM.ZZ_HIST,_a
);

ZZ_PROF.win_sel('WYB');

{? ZZ_PROF.select()
   &
   FUN.ask(
      'Czy uzupełnić zestaw kompetencji profilu "%1"\n'
      'kompetencjami właściwymi dla profilu "%2"?'@
      [_dst,ZZ_PROF.NAZWA]
   )
|| exec('mergeCompSet','phr_dane',ZZ_PROF.ZZ_DOK,_a)
?};

ZZ_PROF.f_clear();
ZZ_PROF.cntx_pop()


\mergeCompSet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Kopiuje zestaw kompetencji.
::   WE: _a - wskazanie dokumentu źródłowego
::       _b - wskazanie dokumentu docelowego
::  OLD: \mergeCompSet/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_PROFK.cntx_psh();
ZZ_PROFK.index('UNIQUE');
ZZ_PROFK.prefix(ref_name(_a));
_loop:=ZZ_PROFK.find_ge(_a,null);
{!
|? _loop & ZZ_PROFK.ZZ_LINK=_a
|! _komp:=ZZ_PROFK.ZZ_KOMP;
   _ref:=ZZ_PROFK.ref();
   _wym:=ZZ_PROFK.WYMOG;
   {? ~ZZ_PROFK.find_key(_b,_komp)
   || ZZ_PROFK.blank(1);
      ZZ_PROFK.ZZ_LINK:=_b;
      ZZ_PROFK.ZZ_KOMP:=_komp;
      ZZ_PROFK.WYMOG:=_wym;
      ZZ_PROFK.add()
   ?};
   _loop:=ZZ_PROFK.seek(_ref) & ZZ_PROFK.next()
!};
ZZ_PROFK.cntx_pop()


\komank2opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [2011]
:: OPIS: Wypelnia pomocnicza tabele danymi z ankiet.
::   WE: _a - wskazanie na opis ankiety ZA_ZEST
::       _b - wskazanie na metode oceny
::----------------------------------------------------------------------------------------------------------------------
ZA_OPIS.clear();
ZA_OPIS.erase();
_test:=0;
ZA_NOTA.cntx_psh();
{? ZA_ZEST.get()
|| {? ZA_ZEST.TYP().KOD='O'
   || ZA_NOTA.index('ZZ_MET');
      ZA_NOTA.prefix(_a,_b)
   || ZA_NOTA.index('ZA_NOTA');
      _test:=1
   ?}
?};

{? _test
|| _loop:=ZA_FORM.first()
|| _loop:=ZA_NOTA.first()
?};
ZA_OPIS.index('TEKST');
ZA_FORM.index('ZA_ZEST');
ZA_FORM.prefix(ZA_ZEST.ref());
{!
|? _loop
|! {? _test
   || ZA_NOTA.prefix(ZA_FORM.ref(),0);
      _loop:=ZA_NOTA.first();
      {!
      |? _loop
      |! {? -ZA_NOTA.ZA_FORM().SLO_KOD().KOD='z'
         || _tekst:='';
            _tekst:=ZA_NOTA.memo_txt(,1,'NOTA');
            {? _tekst<>''
            || _tresc:=ZA_NOTA.ZA_TEST().TRESC;
               {? ~ZA_OPIS.find_key(ZA_NOTA.ZA_TEST().ZA_ZEST,0,_tresc)
               || ZA_OPIS.blank();
                  ZA_OPIS.TEKST:=_tresc;
                  ZA_OPIS.ZA_ZEST:=ZA_NOTA.ZA_TEST().ZA_ZEST;
                  ZA_OPIS.add()
               ?};
               ZA_OPIS.blank();
               ZA_OPIS.ZA_OPIS:=ZA_OPIS.ref();
               ZA_OPIS.TEKST:=_tekst;
               ZA_OPIS.REF:=ZA_NOTA.ref();
               ZA_OPIS.ZA_ZEST:=ZA_NOTA.ZA_TEST().ZA_ZEST;
               ZA_OPIS.add()
            ?}
         ?};
         _loop:=ZA_NOTA.next
      !};
      _loop:=ZA_FORM.next()
   || {? -ZA_NOTA.ZA_FORM().SLO_KOD().KOD='z'
      || _tekst:='';
         _tekst:=ZA_NOTA.memo_txt(,1,'NOTA');
         {? _tekst<>''
         || _tresc:=ZA_NOTA.ZA_TEST().TRESC;
            {? ~ZA_OPIS.find_key(ZA_NOTA.ZA_TEST().ZA_ZEST,0,_tresc)
            || ZA_OPIS.blank();
               ZA_OPIS.TEKST:=_tresc;
               ZA_OPIS.ZA_ZEST:=ZA_NOTA.ZA_TEST().ZA_ZEST;
               ZA_OPIS.add()
            ?};
            ZA_OPIS.blank();
            ZA_OPIS.ZA_OPIS:=ZA_OPIS.ref();
            ZA_OPIS.TEKST:=_tekst;
            ZA_OPIS.REF:=ZA_NOTA.ref();
            ZA_OPIS.ZA_ZEST:=ZA_NOTA.ZA_TEST().ZA_ZEST;
            ZA_OPIS.add()
         ?}
      ?};
      _loop:=ZA_NOTA.next
   ?}
!};
ZA_NOTA.cntx_pop;
ZA_OPIS.prefix(ZA_NOTA.ZA_TEST().ZA_ZEST);
ZA_OPIS.first()


\rand_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Generuje unikalny identyfikator
::   WE: _a - alias do tabeli
::       _b - akronim indeksu
::       _c - dlugosc identyfikatora
::       _d - rodzaj (brak lub zero - alfanumeryczny, rozny od zera - numeryczny)
::----------------------------------------------------------------------------------------------------------------------
_ch:='0123456789';
{? var_pres('_d')<>type_of(0) | ~_d
|| _ch+='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
?};

_a.cntx_psh;
_a.index(_b);
{!
|? _id:='';
   {!
   |? _rc:=int(rand*+_ch)+1+_ch+1;
      _id+={? rand<0.5 || _rc || ~_rc ?};
      +_id<_c
   !};
   _a.find_key(_id,_id)
!};
_a.cntx_pop;
_id


\zo_osoba_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy bieżący współpracownik występuje jak rekord w tabeli ZO_OSOBA.
::   WE: _a - wskazanie na proces
::       _b - rodzaj zapisu (E - egzaminujący, O - oceniany)
::       _c - wyłączenie pytania o potwierdzenie dołączenia (opcjonalne) 1 - dodawaj, 0 - pomijaj
::   WY: wskazanie na rekord, jesli zostal znaleziony lub dodany, null w przeciwnym wypadku
::UWAGA! Poprawność argumentów nie jest weryfikowana, kursor w tabeli P musi być ustawiony na odpowiednim rekordzie.
::  OLD: \zo_osoba_p/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
{? _osoba:=exec('czy_osoba','phr_dane',P,1)
|| ZO_OSOBA.cntx_psh();
   ZO_OSOBA.index('UNIQUE');
   ZO_OSOBA.prefix(_a);
   {? ZO_OSOBA.find_key(_osoba,_b)
   || _ref:=ZO_OSOBA.ref()
   || ZO_OSOBA.blank(1);
      ZO_OSOBA.ZO_PROC:=_a;
      ZO_OSOBA.ZZ_OSOBA:=_osoba;
      ZO_OSOBA.RODZAJ:=_b;
      _data:=ZO_OSOBA.ZO_PROC().DATA;
      {? exec('test_zatr','phr_dane',_data) |
         {? var_pres('_c')<>type_of(0)
         || FUN.ask(
               'Wybrany pracownik nie spełnia warunku zatrudnienia na dzień %1.\n'
               'Czy mimo to dołączyć go do listy %2?'@
               [$_data,{? _b='E' || 'oceniających'@ || 'ocenianych'@ ?}]
            )
         || _c
         ?}
      || H.cntx_psh();
         H.index('_HISTKOD');
         H.prefix(P.ref(),'Z');
         _src:={? H.find_le(_data) || H || P ?};
         ZO_OSOBA.UD_SKL:=_src.WYDZIAL;
         ZO_OSOBA.STN:=_src.ST;
         H.cntx_pop();
         {? ZO_OSOBA.UD_SKL<>null & ZO_OSOBA.STN<>null & ZO_OSOBA.add()
         || _ref:=ZO_OSOBA.ref()
         ?}
      ?}
   ?};
   ZO_OSOBA.cntx_pop()
?};
_ref


\test_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium doboru.
::   WE: _a - wskazanie na dokument właściciela
::       _b - wskazanie na typ oceny
::       _c - wskazanie na kryterium nadrzędne
::       _d - data, na ktorą przeprowadzany jest test
::       _e - alias do tabeli dla której prowadzony jest test
::   WY: 1 - kryterium spełnione
::       0 - współpracownik nie pasuje
::  OLD: \test_kryt/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_match:=-1;
ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('UNIQUE');
ZZ_KRYT.prefix(ref_name(_a),_a,_b,_c);
_loop:=ZZ_KRYT.first();
{!
|? _loop
|! {? ZZ_KRYT.ZZ_KRYT=_c
   || _test:=($ZZ_KRYT.TEST)(_e,_d);
      {? type_of(_test)=type_of(0)
      || _test:=_test & (exec('test_kryt','phr_dane',_a,_b,#ZZ_KRYT.ref,_d,_e)<>0);
         {? _match<0
         || {? ZZ_KRYT.TRYB='~'
            || _match:=~_test
            || _match:=_test
            ?}
         ?};
         {? ZZ_KRYT.TRYB<>'~'
         || _match:=($('_a'+ZZ_KRYT.TRYB+'_b'))(_match,_test)
         || {? _test || _match:=_match & ~_test ?}
         ?}
      || _match:=0
      ?}
   ?};
   _loop:=ZZ_KRYT.next()
!};
ZZ_KRYT.cntx_pop();
_match


\kryt_dobor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła wyszukująca pierwsze kwalifikujące kryterium.
::   WE: _a - wskazanie na dokument właściciela
::       _b - wskazanie na typ oceny
::       _c - data, na którą przeprowadzany jest test
::       _d - alias do tabeli dla której prowadzony jest test
::   WY: wskazanie kryterium lub null jeśli nie znaleziono
::  OLD: \kryt_dobor/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('DOBOR');
ZZ_KRYT.prefix(ref_name(_a),_a,_b,1);
_loop:=ZZ_KRYT.first();
{!
|? _loop
|! _ref:=ZZ_KRYT.ref();
   {? exec('test_dobor','phr_dane',#_ref,_c,_d)
   || ZZ_KRYT.cntx_pop();
      return(_ref)
   ?};
   _loop:=ZZ_KRYT.next()
!};
ZZ_KRYT.cntx_pop();
null


\test_dobor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy gałąź kryterium kwalifikuje bieżący rekord w testowanej tabeli.
::   WE: _a - wskazanie (INTEGER) na kryterium
::       _b - data, na którą przeprowadzany jest test
::       _c - alias do tabeli dla której prowadzony jest test
::   WY: wynik dopasowania dla całej gałęzi
::  OLD: \test_dobor/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_match:=0;
ZZ_KRYT.cntx_psh();
ZZ_KRYT.prefix();
{? ZZ_KRYT.seek(_a,)
|| _test:=($ZZ_KRYT.TEST)(_c,_b);
   _match:={? ZZ_KRYT.TRYB='~' || ~_test || _test ?};
   {? ZZ_KRYT.ZZ_KRYT
   || _match:=_match & exec('test_dobor','phr_dane',ZZ_KRYT.ZZ_KRYT,_b,_c);
:     sprawdz, czy cala galaz do ktorej nalezy biezace kryterium kwalifikuje rekord
      {? ~exec('test_kryt','phr_dane',ZZ_KRYT.ZZ_LINK,ZZ_KRYT.ZZ_TYP,ZZ_KRYT.ZZ_KRYT,_b,_c)
      || ZZ_KRYT.cntx_pop();
         return(0)
      ?}
   ?}
?};
ZZ_KRYT.cntx_pop();
_match


\test_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy pracownik jest zatrudniony na dany dzień.
::   WE: _a - data przeprowadzenia testu
::  OLD: \test_zatr/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
P.DZA<=_a & (P.DZ=date(0,0,0) | _a<=P.DZ) & P.F_ZATR().KOD<>'R'


\test_ud_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium dla szczegółów UD_SKL.
::   WE: _a - alias tabeli, dla której prowadzony jest test
::       _b - wskazanie na rekord z kryterium
::       _c - data przeprowadzenia testu
::  OLD: \test_ud_skl/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=P
|| {? ~exec('test_zatr','phr_dane',_c)
   || return()
   ?};
   _test:=0;
   H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(_c)
   || {? H.WYDZIAL=_b
      || _test:=1
      || UD_DEF.cntx_psh();
         UD_DEF.prefix();
         _sch:=exec('domyslny','schemat','PODZORG');
         _loop:=#exec('szukaj_ud_def','schemat',_sch,H.WYDZIAL).REF;
         _path:=',';
         {!
         |? _loop
         |! {? UD_DEF.seek(_loop,)
            || _path+=UD_DEF.SYMBOL+',';
               _loop:=UD_DEF.UD_DEF
            || _loop:=0
            ?}
         !};
         UD_DEF.cntx_pop();
         UD_SKL.cntx_psh();
         UD_SKL.clear();
         {? UD_SKL.seek(_b)
         || _test:=_path*(','+UD_SKL.SYMBOL+',')
         ?};
         UD_SKL.cntx_pop()
      ?}
   ?};
   H.cntx_pop();
   _test
?}


\test_stn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium dla szczegółów STN.
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord
::       _c - data przeprowadzenia testu
::  OLD: \test_stn/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=P
|| {? ~exec('test_zatr','phr_dane',_c)
   || return()
   ?};
   _test:=0;
   H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(_c)
   || _test:=H.ST=_b
   ?};
   H.cntx_pop();
   _test
?}


\test_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium dla szczegółów P
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord
::       _c - data przeprowadzenia testu
::  OLD: \test_p/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
P.ref()=_b & exec('test_zatr','phr_dane',_c)


\test_p_ps
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium dla szczegółów P
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord
::       _c - data przeprowadzenia testu
::  OLD: \test_p_ps/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('test_p','phr_dane',_a,_b,_c)


\test_zz_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Formuła sprawdzająca kryterium dla szczegółów ZZ_FML.
::   WE: _a - alias do tabeli
::       _b - wskazanie na rekord
::       _c - data przeprowadzenia testu
::  OLD: \test_zz_fml/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? _a=P
|| ZZ_FML.cntx_psh();
   ZZ_FML.clear();
   {? ZZ_FML.seek(_b)
   || _result:=($ZZ_FML.FORMULA)(_a,_a.ref(),_c)
   ?};
   ZZ_FML.cntx_pop()
?};
_result


\jest_kryt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Sprawdza, czy istnieją kryteria danego typu.
::   WE: _a - wskazanie na właściciela zapisu
::       _b - kod lub wskazanie typu oceny
::  OLD: \jest_kryt/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_b')=type_of('') || exec('typ_find','phr_dane',_b) || _b ?};
_test:=-1;
ZZ_KRYT.cntx_psh();
ZZ_PROFT.cntx_psh();
ZZ_PROFT.index('UNIQUE');
ZZ_PROFT.prefix(ref_name(_a),_a);
{? ZZ_PROFT.find_key(_typ)
|| ZZ_KRYT.index('UNIQUE');
   ZZ_KRYT.prefix(ref_name(ZZ_PROFT.ZZ_DOK),ZZ_PROFT.ZZ_DOK,_typ);
   _test:=ZZ_KRYT.size()
?};
ZZ_PROFT.cntx_pop();
ZZ_KRYT.cntx_pop();
_test


\links_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Tworzy tabelę pomocniczą dla funkcji generowania formularzy ocen.
::   WE:
::   WY: alias tabeli
::  OLD: \links_tab/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(2,
:  wskazanie na profil
   'PROF','INTEGER','Profil',
:  rodzaj: O (oceniany) / E (oceniający)
   'RODZAJ','STRING[1]','Rodzaj',
:  wskazanie na uczestnika procesu
   'OSOBA','INTEGER','Osoba',
:  wskazanie na typ oceny
   'TYP','INTEGER','Typ',
:  powiązane rekordy
   'R','INTEGER',,
   'L','INTEGER',
)


\kryt_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Normalizacja kryteriów doboru.
::   WE: _a [TABLE] - alias tabeli szczegółów kryterium
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.cntx_psh();
_a.clear();
_a.for_each($(
   '{? %1=ZZ_KRYTS '
   '|| ZZ_DOK.cntx_psh(); '
   '   ZZ_KRYT.cntx_psh(); '
   '   {? %1.ZZ_KRYT().ZZ_LINK().KLASA=\'ZZ_KOMP\' '
   '   || ZZ_KRYT.cntx_pop(); '
   '      ZZ_DOK.cntx_pop();  '
   '      return() '
   '   ?}; '
   '   ZZ_KRYT.cntx_pop(); '
   '   ZZ_DOK.cntx_pop()  '
   '?}; '
   '%1.put()'
   [!_a]
   ),0
);
_a.cntx_pop();
~~


\proc_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Normalizuje bieżący profil ogólny, tak aby mógł być traktowany jak profil szczegółowy
::  OLD: \proc_norm/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_prof_dok:=ZZ_PROF.ZZ_DOK;
_typ_op:=exec('typ_op','phr_dane');
_proft_op:=exec('get_proft','phr_dane',_prof_dok,_typ_op,1);

ZZ_KRYT.cntx_psh();
ZZ_KRYT.index('DOBOR');
ZZ_KRYT.prefix(ref_name(_proft_op),_proft_op,_typ_op,1);
_loop:=ZZ_KRYT.first();
{!
|? _loop
|! ZZ_PROFK.cntx_psh();
   ZZ_PROFK.index('UNIQUE');
   ZZ_PROFK.prefix(ref_name(ZZ_KRYT.ZZ_DOK),ZZ_KRYT.ZZ_DOK);
   _loop:=ZZ_PROFK.first();
   {!
   |? _loop
   |! _komp:=ZZ_PROFK.ZZ_KOMP;
      _profk:=exec('get_profk','phr_dane',_prof_dok,_komp);

      ZZ_PROFO.cntx_psh();
      ZZ_PROFO.index('UNIQUE');
      ZZ_PROFO.prefix(ZZ_PROFK.ref());
      {? ZZ_PROFO.first() || {! |? ZZ_PROFO.del() !} ?};
      ZZ_PROFO.cntx_pop();

      ZZ_PROFT.cntx_psh();
      ZZ_PROFT.index('UNIQUE');
      ZZ_PROFT.prefix(ref_name(_prof_dok),_prof_dok);
      _loop:=ZZ_PROFT.first();
      {!
      |? _loop
      |! ZZ_PROFO.cntx_psh();
         ZZ_PROFO.index('UNIQUE');
         ZZ_PROFO.prefix(_profk,ZZ_PROFT.ref());
         _loop:=ZZ_PROFO.first();
         {!
         |? _loop
         |! exec('get_profo','phr_dane',ZZ_PROFK.ref(),ZZ_PROFT.ref(),ZZ_PROFO.ZZ_MET);
            _loop:=ZZ_PROFO.next()
         !};
         ZZ_PROFO.cntx_pop();
         _loop:=ZZ_PROFT.next()
      !};
      ZZ_PROFT.cntx_pop();

      _loop:=ZZ_PROFK.next()
   !};
   ZZ_PROFK.cntx_pop();
   _loop:=ZZ_KRYT.next()
!};
ZZ_KRYT.cntx_pop()


\proc_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje dane procesu oceny pracowniczej
::   WE: _a - wskazanie zapisu w tabeli ZO_PROC
::  OLD: \proc_create/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_TEST.cntx_psh();
ZO_TEST.index('ZO_TEST');
ZO_TEST.prefix(_a);
_test:=ZO_TEST.first();
ZO_TEST.cntx_pop();

{? ~_test
|| exec('proc_gen','phr_dane',_a)
|| _todo:=FUN.choice(
      'Proszę wskazać zakres danych do utworzenia/uzupełnienia.'@,,
      'Formularze ocen'@,'Oceny dodatkowe'@
   );
   {? _todo=1 || exec('proc_gen','phr_dane',_a)
   |? _todo=2 || exec('proc_dod','phr_dane',_a)
   ?}
?};
~~


\proc_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje dane procesu oceny pracowniczej - uzupełnia oceny dodatkowe
::   WE: _a - wskazanie na zapis w tabeli ZO_PROC
::  OLD: \proc_dod/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_TEST.cntx_psh();
ZO_TEST.index('ZO_TEST');
ZO_TEST.prefix(_a);
_count:=0;
_size:=ZO_TEST.size();
_loop:=ZO_TEST.first();
{!
|? _loop
|! progress(100*(_count+=1)/_size,'Uzupełnianie ocen dodatkowych...'@,FUN.TYT);
   exec('proc_sf','phr_dane',ZO_TEST.ZZ_DOK);
   _loop:=ZO_TEST.next()
!};
ZO_TEST.cntx_pop();
prgs_clr


\proc_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje dane procesu oceny - tworzy i uzupełnia formularze
::   WE: _a - wskazanie na zapis w tabeli ZO_PROC
::  OLD: \proc_gen/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));
{? ~P.size()
|| return()
?};

exec('kryt_norm','phr_dane',ZZ_KRYTF);
exec('kryt_norm','phr_dane',ZZ_KRYTJ);
exec('kryt_norm','phr_dane',ZZ_KRYTS);
exec('kryt_norm','phr_dane',ZZ_KRYTP);

ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ~ZO_PROC.seek(_a)
|| ZO_PROC.cntx_pop();
   return()
|| ZO_PROF.cntx_psh();
   ZO_PROF.index('UNIQUE');
   ZO_PROF.prefix(ZO_PROC.ZO_PROG);
   {? ZO_PROF.first()
   || progress(,'Przygotowanie i weryfikacja profili ogólnych...'@,FUN.TYT,1);
      {!
      |? {? ZO_PROF.ZZ_PROF().RODZAJ().KOD='O'
         || exec('proc_norm','phr_dane')
         ?};
         ZO_PROF.next()
      !}
   || ZO_PROC.cntx_pop();
      ZO_PROF.cntx_pop();
      FUN.emsg(
         'Nie znaleziono profili, na podstawie których należałoby utworzyć formularze ocen.\n'
         'Proszę uzupełnić brakujące informacje w zakładce "Profile" w oknie "Programy ocen".'@
      );
      return()
   ?};
   ZO_PROF.cntx_pop()
?};
ZO_PROC.cntx_pop();

: utworz tabele pomocnicza
_LINK:=exec('links_tab','phr_dane');

: przygotuj liste ocenianych
exec('proc_s1','phr_dane',_a,_LINK);

: przygotuj liste oceniajacych
exec('proc_s2','phr_dane',_a,_LINK);

: przygotuj formularze oceny
exec('proc_s3','phr_dane',_LINK);

: porzadkownie listy osob
exec('proc_s4','phr_dane',_a);

: dobiera formularze
exec('proc_s5','phr_dane',_a);

obj_del(_LINK);
&_LINK;

prgs_clr();

exec('zo_form_check','phr_dane',_a)


\proc_s1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje listę ocenianych.
::   WE: _a - wskazanie na zapis w tabeli ZO_PROC
::       _b - alias do pomocniczej tabeli połączeń
::  OLD: \proc_s1/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));
_size:=P.size();

ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ~ZO_PROC.seek(_a)
|| ZO_PROC.cntx_pop();
   return()
?};

_data:=ZO_PROC.DATA;
_typ:=obj_new('op','ps','pb','pw','ou','bp','wb','wi');
_typ.op:=exec('typ_op','phr_dane');
_typ.ps:=exec('typ_ps','phr_dane');
_typ.pb:=exec('typ_pb','phr_dane');
_typ.pw:=exec('typ_pw','phr_dane');
_typ.ou:=exec('typ_ou','phr_dane');
_typ.bp:=exec('typ_find','phr_dane',ZZ_POM.MODUL,'BP');
_typ.wb:=exec('typ_find','phr_dane',ZZ_POM.MODUL,'WB');
_typ.wi:=exec('typ_find','phr_dane',ZZ_POM.MODUL,'WI');
_kryt:=obj_new('ps','pb','pw','ou','bp','wb','wi');
_jest:=tab_tmp(1,'REF','INTEGER',);
_test:="
   {? ~_a.find_key(_b)
   || _a.REF:=_b;
      _a.add()
   ?}";
_info:=form('Przygotowanie profili ocenianych osób...'@,60);

_jest_kryt:="
   _ret:=-1;
   ZZ_PROFK.cntx_psh();
   ZZ_PROFK.index('UNIQUE');
   ZZ_KRYT.cntx_psh();
   ZZ_KRYT.index('UNIQUE');
   ZZ_KRYT.prefix(ref_name(_a),_a,_c);
   _loop:=ZZ_KRYT.first();
   {!
   |? _loop
   |! _link:=ZZ_KRYT.ZZ_DOK;
      ZZ_PROFK.prefix(ref_name(_link),_link);
      _loop:=ZZ_PROFK.first();
      {!
      |? _loop
      |! _link:=ZZ_PROFK.ZZ_DOK;
         _test:=exec('jest_kryt','phr_dane',_link,_b);
         {? _test>=0
         || ZZ_KRYT.cntx_pop();
            ZZ_PROFK.cntx_pop();
            return(_test)
         ?};
         _loop:=ZZ_PROFK.next()
      !};
      _loop:=ZZ_KRYT.next()
   !};
   ZZ_KRYT.cntx_pop();
   ZZ_PROFK.cntx_pop();
   _ret
";

ZF_WYK.cntx_psh();
ZF_WYK.index('UNIQUE');
ZO_OSOBA.cntx_psh();
ZO_TEST.cntx_psh();
ZZ_PROFT.cntx_psh();
ZZ_PROFK.cntx_psh();
ZZ_PROFO.cntx_psh();
ZO_PROF.cntx_psh();
ZO_PROF.index('NAZWA');
ZO_PROF.prefix(ZO_PROC.ZO_PROG);

_count:=0;
_size*=ZO_PROF.size();
_loop:=ZO_PROF.first();
: przegladaj profile oceny
{!
|? _loop
|! _link:=ZO_PROF.ZZ_PROF().ZZ_DOK;
   _proft_dok:=exec('get_proft','phr_dane',_link,_typ.op,1);
   {? ZZ_PROF.RODZAJ().KOD='O'
   || _kryt.ps:=exec('jest_kryt','phr_dane',_link,_typ.ps);
      _kryt.pb:=exec('jest_kryt','phr_dane',_link,_typ.pb);
      _kryt.pw:=exec('jest_kryt','phr_dane',_link,_typ.pw);
      _kryt.ou:=exec('jest_kryt','phr_dane',_link,_typ.ou);
      _kryt.bp:=exec('jest_kryt','phr_dane',_link,_typ.bp);
      _kryt.wb:=exec('jest_kryt','phr_dane',_link,_typ.wb);
      _kryt.wi:=exec('jest_kryt','phr_dane',_link,_typ.wi)
   |? ZZ_PROF.RODZAJ().KOD='S'
   || _kryt.ps:=_jest_kryt(_proft_dok,_typ.ps,_typ.op);
      _kryt.pb:=_jest_kryt(_proft_dok,_typ.pb,_typ.op);
      _kryt.pw:=_jest_kryt(_proft_dok,_typ.pw,_typ.op);
      _kryt.ou:=_jest_kryt(_proft_dok,_typ.ou,_typ.op);
      _kryt.bp:=_jest_kryt(_proft_dok,_typ.bp,_typ.op);
      _kryt.wb:=_jest_kryt(_proft_dok,_typ.wb,_typ.op);
      _kryt.wi:=_jest_kryt(_proft_dok,_typ.wi,_typ.op)
   ?};
   _loop:=P.first();
   {!
   |? _loop
   |! _jest.erase();
      _p_ref:=P.ref();
      _test(_jest,_p_ref);
      progress(100*(_count+=1)/_size,_info,FUN.TYT);
:     uwzględnij w procesie, jeśli pracownik spełnia kryterium doboru
      {? exec('test_kryt','phr_dane',_proft_dok,_typ.op,0,_data,P)>0
      || _osoba:=exec('zo_osoba_p','phr_dane',ZO_PROC.ref(),'O',1);
         _szef:=exec('prac_nad','stanprac',P.ref(),0);
         _prac:={? _kryt.bp<=0 || exec('prac_pod','stanprac',P.OSOBA) || obj_new(1) ?};
         _kryt_ref:=exec('kryt_dobor','phr_dane',_proft_dok,_typ.op,_data,P);
         _kryt_dok:=null;
         ZZ_KRYT.cntx_psh();
         ZZ_KRYT.prefix();
         {? ZZ_KRYT.seek(_kryt_ref)
         || _kryt_dok:=ZZ_KRYT.ZZ_DOK
         ?};
         ZZ_KRYT.cntx_pop();
:        brak kryterium dla samooceny
:        usatal z bieżącego rekordu P
         {? _kryt.ps<=0
         || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.ps,_b,_osoba)
         ?};
:        brak kryterium dla bezpośredniego przełożonego
:        ustalenie na podstawie zależności służbowych
         {? _kryt.pb=0
         || P.cntx_psh();
            P.prefix();
            {? _szef.first() & P.seek(_szef.P,)
:              znaleziono bezpośredniego przełożonego ocenianego pracownika
            || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.pb,_b,_osoba);
               _test(_jest,P.ref())
            ?};
            P.cntx_pop()
         ?};
:        brak kryterium dla przełożonego wyższego szczebla
:        ustalenie na podstawie zależności służbowych
         {? _kryt.pw=0
         || P.cntx_psh();
            P.prefix();
            {? _szef.first() & _szef.next() & P.seek(_szef.P,)
:              znaleziono przełożonego wyższego szczebla ocenianego pracownika
            || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.pw,_b,_osoba);
               _test(_jest,P.ref())
            ?};
            P.cntx_pop()
         ?};
:        ocena uzgodniona
:        brak kryterium dla bezpośredniego przełożonego
:        ustalenie na podstawie zależności służbowych
         {? _kryt.ou=0
         || P.cntx_psh();
            P.prefix();
            {? _szef.first() & P.seek(_szef.P,)
:              znaleziono bezpośredniego przełożonego ocenianego pracownika
            || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.ou,_b,_osoba);
               _test(_jest,P.ref())
            ?};
            P.cntx_pop()
         ?};
:        brak kryterium dla bezpośredniego podwładnego
:        ustalenie na podstawie zależności służbowych
         {? _kryt.bp=0
         || P.cntx_psh();
            P.prefix();
            _loop:=_prac.first();
            {!
            |? _loop
            |! {? _prac.L=1 & P.seek(_prac.P,)
:                 znaleziono bezpośredniego podwładnego ocenianego pracownika
               || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.bp,_b,_osoba);
                  _test(_jest,P.ref())
               ?};
               _loop:=_prac.next()
            !};
            P.cntx_pop()
         ?};
:        brak kryterium dla bezpośredniego współpracownika
:        ustalenie na podstawie jednostki zatrudnienia
         {? _kryt.wb=0
         || _ud_skl:=null;
            P.cntx_psh();
            H.cntx_psh();
            H.index('_HISTKOD');
            H.prefix(_p_ref,'Z');
            {? H.find_le(ZO_PROC.DATA)
            || _ud_skl:=H.WYDZIAL
            ?};
            H.clear();
            H.f_set(,
               'join H_ZM',
               'H_ZM.KZ=\'Z\' and WYDZIAL=:_a and OD<=to_date(:_b) and (DO is null or to_date(:_b)<=DO)',
               _ud_skl,
               ZO_PROC.DATA
            );
            _loop:=H.f_first();
            {!
            |? _loop
            |! H.P();
               {? _test(_jest,P.ref()) &
                  exec('test_zatr','phr_dane',ZO_PROC.DATA) &
                  exec('test_zatr','phr_dane',ZO_PROC.PLAN_OD)
:                 znaleziono bezpośredniego współpracownika ocenianej osoby
               || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.wb,_b,_osoba)
               ?};
               _loop:=H.f_next()
            !};
            H.f_clear();
            H.cntx_pop();
            P.cntx_pop()
         ?};
:        brak kryterium dla innych współpracowników
:        ustalenie na podstawie stanu zatrudnienia
         {? _kryt.wi=0
         || P.cntx_psh();
            _loop:=P.first();
            {!
            |? _loop
            |! {? _test(_jest,P.ref()) &
                  exec('test_zatr','phr_dane',ZO_PROC.DATA) &
                  exec('test_zatr','phr_dane',ZO_PROC.PLAN_OD)
:                 pracownik nie występuje jako żaden z powyższych oceniających
               || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ.wi,_b,_osoba)
               ?};
               _loop:=P.next()
            !};
            P.cntx_pop()
         ?};
         obj_del(_szef);
         obj_del(_prac);

         ZO_OSOBA.prefix();
         {? ZO_OSOBA.seek(_osoba)
         || ZO_TEST.index('UNIQUE');
            ZO_TEST.prefix();
            _test_dok:=null;
            {? ZO_TEST.find_key(ZO_OSOBA.ref())
            || _test_dok:=ZO_TEST.ZZ_DOK
            || ZO_TEST.blank(1);
               ZO_TEST.ZO_OSOBA:=ZO_OSOBA.ref();
               {? ZO_TEST.add()
               || _test_dok:=ZO_TEST.ZZ_DOK
               ?}
            ?};
:           jeśli jest ocena całkowita, to na podstawie profilu ogólnego
:           uzupełnij profil indywidualny oceny: typy ocen, kompetencje,
:           wartości słownikowe i bezpośrednie oraz metody oceny
            {? _test_dok
            || _b.blank();
               _b.PROF:=ZO_PROF.ref();
               _b.RODZAJ:='O';
               _b.OSOBA:=_osoba;
               _b.TYP:=_typ.op;
               _b.R:=ZO_TEST.ref();
               _b.add();

:              uzupełnij typy ocen
               ZZ_PROFT.index('UNIQUE');
               ZZ_PROFT.prefix(ref_name(ZZ_PROF.ZZ_DOK),ZZ_PROF.ZZ_DOK);
               _loop:=ZZ_PROFT.first();
               {!
               |? _loop
               |! {? ZZ_PROFT.ZZ_TYP<>_typ.op
                  || {? (_ref:=exec('get_proft','phr_dane',_test_dok,ZZ_PROFT.ZZ_TYP))<>null
                     || _waga:=ZZ_PROFT.WAGA;
                        ZZ_PROFT.cntx_psh();
                        ZZ_PROFT.prefix();
                        {? ZZ_PROFT.seek(_ref) & ZZ_PROFT.WAGA<>_waga
                        || ZZ_PROFT.WAGA:=_waga;
                           ZZ_PROFT.put()
                        ?};
                        ZZ_PROFT.cntx_pop()
                     ?}
                  ?};
                  _loop:=ZZ_PROFT.next()
               !};

:              uzupelnij kompetencje (w zależności od tego, jaki formularz został wykorzystany do generowania ocen)
               _oc_komp:=sql(
                  'select * from ZF_POZ join ZF_SKL where ZF_POZ.ZF_DEF=\':_a\' and ZF_SKL.KOD=\'OK\'',
               $ZZ_PROF.ZF_DEF);
               {? _oc_komp.size()
               || ZZ_PROFK.index('UNIQUE');
                  ZZ_PROFK.prefix(ref_name(_kryt_dok),_kryt_dok);
                  _loop:=ZZ_PROFK.first();
                  {!
                  |? _loop
                  |! _dok:=ZZ_PROFK.ZZ_DOK;
                     _komp:=ZZ_PROFK.ZZ_KOMP;
                     {? ZZ_PROF.RODZAJ().KOD='O'
                     || ZZ_PROFK.cntx_psh();
                        ZZ_PROFK.index('UNIQUE');
                        ZZ_PROFK.prefix(ref_name(ZZ_PROF.ZZ_DOK),ZZ_PROF.ZZ_DOK);
                        {? ZZ_PROFK.find_key(_komp)
                        || _dok:=ZZ_PROFK.ZZ_DOK
                        ?};
                        ZZ_PROFK.cntx_pop()
                     ?};
:                 uzupełnij wartości słownikowe i bezpośrednie
                     {? _ref:=exec('get_profk','phr_dane',_test_dok,_komp)
                     || exec('copy_kompk','phr_dane',_dok,_test_dok,_komp);
                        exec('copy_komps','phr_dane',_dok,_test_dok,_komp);
                        exec('copy_kompz','phr_dane',_dok,_test_dok,_komp);
                        _waga:=ZZ_PROFK.WAGA;
                        ZZ_PROFK.cntx_psh();
                        ZZ_PROFK.prefix();
                        {? ZZ_PROFK.seek(_ref) & ZZ_PROFK.WAGA<>_waga
                        || ZZ_PROFK.WAGA:=_waga;
                           ZZ_PROFK.put()
                        ?};
                        ZZ_PROFK.cntx_pop()
                     ?};
                     _loop:=ZZ_PROFK.next()
                  !};

:                 uzupełnij metody oceny
                  ZZ_PROFO.index('ZZ_LINK');
                  ZZ_PROFO.prefix(ref_name(_kryt_dok),_kryt_dok);
                  _loop:=ZZ_PROFO.first();
                  {!
                  |? _loop
                  |! _metp:=ZZ_PROFO.ZZ_MET;
                     _typp:=exec('get_proft','phr_dane',_test_dok,ZZ_PROFO.ZZ_PROFT().ZZ_TYP);
                     _komp:=exec('get_profk','phr_dane',_test_dok,ZZ_PROFO.ZZ_PROFK().ZZ_KOMP);
                     ZZ_PROFO.cntx_psh();
                     ZZ_PROFO.clear();
                     ZZ_PROFO.index('UNIQUE');
                     {? _komp & _typp & _metp &
                        ~ZZ_PROFO.find_key(_komp,_typp,_metp)
                     || ZZ_PROFO.blank(1);
                        ZZ_PROFO.ZZ_PROFK:=_komp;
                        ZZ_PROFO.ZZ_PROFT:=_typp;
                        ZZ_PROFO.ZZ_MET:=_metp;
                        ZZ_PROFO.add(1)
                     ?};
                     ZZ_PROFO.cntx_pop();
                     _loop:=ZZ_PROFO.next()
                  !}
               ?};

:              ustal formularz wynikający z profilu
               {? ZZ_PROF.ZF_DEF<>null
               || ZF_WYK.prefix(ref_name(_test_dok),_test_dok);
                  {? ~ZF_WYK.find_key(ZZ_PROF.ZF_DEF)
                  || ZF_WYK.blank(1);
                     ZF_WYK.ZZ_LINK:=_test_dok;
                     ZF_WYK.ZF_DEF:=ZZ_PROF.ZF_DEF;
                     ZF_WYK.PROFIL:='T';
                     ZF_WYK.AUTO:='T';
                     ZF_WYK.OK:='T';
                     ZF_WYK.add()
                  ?}
               ?}
            ?};
            &_oc_komp
         ?}
      ?};
      _loop:=P.next()
   !};
   _loop:=ZO_PROF.next()
!};

: porzadki
ZZ_PROFO.cntx_pop();
ZZ_PROFK.cntx_pop();
ZZ_PROFT.cntx_pop();
ZO_OSOBA.cntx_pop();
ZO_TEST.cntx_pop();
ZO_PROF.cntx_pop();
ZO_PROC.cntx_pop();
ZF_WYK.cntx_pop();

obj_del(_typ);
obj_del(_kryt);
obj_del(_jest)


\proc_s2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje listę oceniających.
::   WE: _a - wskazanie zapisu w tabeli ZO_PROC
::       _b - alias pomocniczej tabeli połączeń
::  OLD: \proc_s2/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));
_size:=P.size();

ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ~ZO_PROC.seek(_a)
|| ZO_PROC.cntx_pop();
   return()
?};

_data:=ZO_PROC.DATA;
_typ_op:=exec('typ_op','phr_dane');
_info:=form('Przygotowanie listy osób oceniajacych...'@,60);

ZZ_PROFT.cntx_psh();

ZO_PROF.cntx_psh();
ZO_PROF.index('NAZWA');
ZO_PROF.prefix(ZO_PROC.ZO_PROG);
_count:=0;
_size*=ZO_PROF.size();
_loop:=ZO_PROF.first();
: przeglądaj profile oceny
{!
|? _loop
|! _link:=ZO_PROF.ZZ_PROF().ZZ_DOK;
   ZZ_PROFT.index('UNIQUE');
   ZZ_PROFT.prefix(ref_name(_link),_link);
   _loop:=ZZ_PROFT.first();
   {!
   |? _loop
   |! _typ:=ZZ_PROFT.ZZ_TYP;
      _proft_dok:=exec('get_proft','phr_dane',_link,_typ,1);
      {? _typ<>_typ_op
      || _loop:=P.first();
         {!
         |? _loop
         |! {? exec('test_kryt','phr_dane',_proft_dok,_typ,0,_data,P)>0
:           uwzględnij, jeśli pracownik spełnia kryterium doboru
            || exec('proc_links','phr_dane',_a,ZO_PROF.ref(),_typ,_b)
            ?};
            _loop:=P.next()
         !}
      ?};
      _loop:=ZZ_PROFT.next()
   !};
   _loop:=ZO_PROF.next()
!};

: porzadki
ZZ_PROFT.cntx_pop();
ZO_PROF.cntx_pop();
ZO_PROC.cntx_pop()


\proc_s3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Przygotowuje formularze ocen.
::   WE: _a - alias pomocniczej tabeli połączeń
::  OLD: \proc_s3/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
exec('for_each','phr_tab',"_a.cntx_psh",ZZ_PROFK,ZZ_PROFO,ZO_OSTYP,ZO_TEST,ZO_FORM,ZO_KOMP);
_restore:="exec('for_each','phr_tab',$'_a.cntx_pop',ZZ_PROFK,ZZ_PROFO,ZO_OSTYP,ZO_TEST,ZO_FORM,ZO_KOMP)";

_typ_ps:=exec('typ_ps','phr_dane');
_PROF:=sql('select distinct PROF from :_a',_a);
_TEMP:=sql('select count(*) as LICZ from :_a where RODZAJ=''O''',_a);
{? type_of(_PROF)<>type_of(SYSLOG) | type_of(_TEMP)<>type_of(SYSLOG)
|| _restore();
   return()
?};
_size:=_TEMP.LICZ;
obj_del(_TEMP);

_step:=0;
_loop:=_PROF.first();
{!
|? _loop
|! _a.prefix(_PROF.PROF,'O');
   _loop:=_a.first();
   {!
   |? _loop
   |! ZO_TEST.clear();
      {? ZO_TEST.seek(_a.R,)
      || ZO_TEST.ZZ_OSOBA();
         progress(
            100*(_step+=1)/_size,
            form('Tworzenie formularzy oceny pracowniczej...'@,60)+'\n'+
            form(ZZ_OSOBA.NAZWISKO+' '+ZZ_OSOBA.PIERWSZE,60),
            FUN.TYT,
            1
         );
         _a.cntx_psh();
         _a.prefix(_PROF.PROF,'E');
         _loop:=_a.first();
         {!
         |? _loop
         |! _form_test:=0;
            ZO_OSTYP.clear();
            {? {? _a.L
               || ZO_TEST.ZO_OSOBA=_a.L
               || 1
               ?} &
               ZO_OSTYP.seek(_a.R,)
            || ZO_FORM.index('UNIQUE');
               ZO_FORM.prefix(ZO_TEST.ref());
               {? ~ZO_FORM.find_key(ZO_OSTYP.ref())
:              brak formularza oceny - dołącz
               || {? {? ZO_OSTYP.ZZ_TYP=_typ_ps
                     || ZO_OSTYP.ZO_OSOBA().ZZ_OSOBA=ZO_TEST.ZO_OSOBA().ZZ_OSOBA
                     || ZO_OSTYP.ZO_OSOBA().ZZ_OSOBA<>ZO_TEST.ZO_OSOBA().ZZ_OSOBA
                     ?}
                  || ZO_FORM.blank(1);
                     ZO_FORM.ZO_OSTYP:=ZO_OSTYP.ref();
                     ZO_FORM.ZO_TEST:=ZO_TEST.ref();
                     ZO_FORM.Z:='N';
                     {? ZO_FORM.add(1)
                     || _form_test:=1
                     ?}
                  ?}
               || _form_test:=1
               ?}
           ?};
            {? _form_test
            || ZZ_PROFO.index('ZZ_LINK');
               ZZ_PROFO.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK,ZO_OSTYP.ZZ_TYP);
               _loop:=ZZ_PROFO.first();
               {!
               |? _loop
               |! _jest:=0;
                  ZO_KOMP.index('UNIQUE');
                  ZO_KOMP.prefix(ZO_FORM.ref());
                  {? ~ZO_KOMP.find_key(ZZ_PROFO.ZZ_PROFK().ZZ_KOMP)
                  || ZO_KOMP.blank(1);
                     ZO_KOMP.ZO_FORM:=ZO_FORM.ref();
                     ZO_KOMP.ZZ_KOMP:=ZZ_PROFK.ZZ_KOMP;
                     {? ~(ZO_KOMP.W_TYP:=ZZ_PROFO.ZZ_PROFT().WAGA)
                     || ZO_KOMP.W_TYP:=ZZ_PROFT.ZZ_TYP().WAGA
                     ?};
                     {? ~(ZO_KOMP.W_KOMP:=ZZ_PROFK.WAGA)
                     || ZO_KOMP.W_KOMP:=ZZ_PROFK.ZZ_KOMP().WAGA
                     ?};
                     _jest:=ZO_KOMP.add(1)
                  || _change:=0;
                     {? ZO_KOMP.W_TYP<ZZ_PROFO.ZZ_PROFT().WAGA
                     || ZO_KOMP.W_TYP:=ZZ_PROFT.ZZ_TYP().WAGA;
                        _change+=1
                     ?};
                     {? ZO_KOMP.W_KOMP<ZZ_PROFK.WAGA
                     || ZO_KOMP.W_TYP:=ZZ_PROFT.ZZ_TYP().WAGA;
                        _change+=1
                     ?};
                     {? _change
                     || ZO_KOMP.put()
                     ?};
                     _jest:=1
                  ?};

                  {? _jest
                  || exec('nota_create','phr_dane',ZO_KOMP.ref(),ZZ_PROFO.ZZ_MET);
                     {? ZZ_PROFO.ZZ_MET().RODZAJ='S'
                     || ZZ_PROFK.index('UNIQUE');
                        ZZ_PROFK.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK);
                        {? ZZ_PROFK.find_key(ZO_KOMP.ZZ_KOMP)
                        || _TAB:=exec('met2tabwar','phr_tab',ZZ_PROFO.ZZ_MET().KOD);
                           ZO_KOMP.POZIOM:=exec('poziom_oceny','phr_dane',ZO_TEST.ZZ_DOK,ZZ_PROFK.ZZ_KOMP,&_TAB);
                           ZO_KOMP.put()
                        ?}
                     ?}
                  ?};

                  _loop:=ZZ_PROFO.next()
               !}
            ?};
            _loop:=_a.next()
         !};
         _a.cntx_pop()
      ?};
      _loop:=_a.next()
   !};
   ZZ_PROF.clear();
   _loop:=_PROF.next()
!};

_restore()


\proc_s4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Porządkuje listę uczestników procesu.
::   WE: _a - wskazanie na zapis w tabeli ZO_PROC
::  OLD: \proc_s4/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_FORM:=tab_tmp(3,
   'ZO_TEST','INTEGER',,
   'OSOBA','INTEGER',,
   'TYP','STRING[2]',,
   'REF','INTEGER',
);

ZO_OSOBA.cntx_psh();
ZO_FORM.cntx_psh();
P.cntx_psh();

_test_form:="
   ZO_FORM.index(_a);
   ZO_FORM.prefix(_b);
   {? ZO_FORM.first()
   || {!
      |? ZO_KOMP.index('UNIQUE');
         ZO_KOMP.prefix(ZO_FORM.ref());
         {? ZO_KOMP.first()
         || {!
            |? ZO_NOTA.index('UNIQUE');
               ZO_NOTA.prefix(ZO_KOMP.ref());
               {? ZO_NOTA.first()
               || ZO_KOMP.next()
               || ZO_KOMP.del()
               ?}
            !};
            {? ZO_KOMP.size()
            || ZO_FORM.next()
            || ZO_FORM.del()
            ?}
         || ZO_FORM.del()
         ?}
      !}
   ?};
   ZO_FORM.size()
";

: usuwanie "pustych" elementów
: przeglądaj uczestników sesji
ZO_OSOBA.index('UNIQUE');
ZO_OSOBA.prefix(_a);
ZO_TEST.cntx_psh();
ZO_TEST.index('UNIQUE');
ZF_WYK.cntx_psh();
ZF_WYK.index('UNIQUE');
{? ZO_OSOBA.first()
|| ZO_TEST.cntx_psh();
   _size:=ZO_OSOBA.size();
   _cnt:=0;
   {!
   |? _pgs:=100*(_cnt+=1)/_size;
      progress(_pgs,'Weryfikacja listy uczestników...\n%1%%'@[$int(_pgs)],FUN.TYT);
      ZO_TEST.prefix(ZO_OSOBA.ref());
      _def:='';
      {? ZO_TEST.first()
      || ZF_WYK.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK);
         {? ZF_WYK.first()
         || _def:=$ZF_WYK.ZF_DEF
         ?}
      ?};
      _oc_komp:=sql('select * from ZF_POZ join ZF_SKL where ZF_POZ.ZF_DEF=\':_a\' and ZF_SKL.KOD=\'OK\'',_def);
      {? ZO_OSOBA.RODZAJ='E'
      || {? {? _oc_komp.size() || _test_form('KOGO',ZO_OSOBA.ref()) || 1 ?}
         || &_oc_komp;
            ZO_OSOBA.next()
         || {? _oc_komp.size()
            || &_oc_komp;
               ZO_OSOBA.del()
            ?}
         ?}
      |? ZO_OSOBA.RODZAJ='O'
      || {? {? _oc_komp.size() || _test_form('KTO',ZO_OSOBA.ref()) || 1 ?}
         || &_oc_komp;
            ZO_OSOBA.next()
         || ZO_OSOBA.cntx_psh();
            _ref:=null;
            {? ZO_OSOBA.next()
            || _ref:=ZO_OSOBA.ref()
            ?};
            ZO_OSOBA.cntx_pop();
            ZO_TEST.index('UNIQUE');
            ZO_TEST.prefix();
            {? ZO_TEST.find_key(ZO_OSOBA.ref())
            || &_oc_komp;
               ZO_TEST.del()
            ?};
            ZO_OSOBA.seek(_ref)
         ?}
      || &_oc_komp;
         ZO_OSOBA.next()
      ?}
   !};
   ZO_TEST.cntx_pop()
?};
ZF_WYK.cntx_pop();
ZO_TEST.cntx_pop();
: usuwanie wszystkich formularzy poza samooceną, w których oceny
: dokonuje osoba właściwa dla oceniającego pracownika
P.index('ZZ_DOK');
P.prefix();
ZO_OSOBA.index('ZO_OSOBA');
ZO_OSOBA.prefix('O',_a);
_loop:=ZO_OSOBA.first();
_size:=ZO_OSOBA.size();
_cnt:=0;
{!
|? _loop
|! _osoba:=null;
   _pgs:=100*(_cnt+=1)/_size;
   progress(_pgs,'Weryfikacja listy formularzy...\n'@+$int(_pgs)+'%',FUN.TYT);
   {? P.find_key(ref_name(ZO_OSOBA.ZZ_OSOBA().ZZ_LINK),ZO_OSOBA.ZZ_OSOBA().ZZ_LINK)
   || _osoba:=P.OSOBA
   ?};
   ZO_FORM.index('KTO');
   ZO_FORM.prefix(ZO_OSOBA.ref);
   {? ZO_FORM.first()
   || {!
      |? _x_dok:=ZO_FORM.ZZ_KTO().ZZ_LINK;
         {? P.find_key(ref_name(_x_dok),_x_dok) & P.OSOBA=_osoba
         || {? ZO_FORM.ZZ_TYP().KOD='PS'
            || ZO_FORM.next()
            || ZO_FORM.del()
            ?}
         || _FORM.ZO_TEST:=ZO_FORM.ZO_TEST;
            _FORM.OSOBA:=P.OSOBA;
            _FORM.TYP:=ZO_FORM.ZZ_TYP().KOD;
            _FORM.REF:=ZO_FORM.ref();
            _FORM.add();
            ZO_FORM.next()
         ?}
      !}
   ?};
   _loop:=ZO_OSOBA.next()
!};

: usuwanie formularzy oceny przez współpracownikow dla ocen całkowitych zawierąjacych oceny przełożonych
_NORM:=sql('select ZO_TEST, OSOBA, count(*) from :_a group by ZO_TEST, OSOBA having count(*)>1',_FORM);
_loop:=_NORM.first();
ZO_FORM.clear();
{!
|? _loop
|! _FORM.prefix(_NORM.ZO_TEST,_NORM.OSOBA);
   {? _FORM.find_key('PB') | _FORM.find_key('PW') | _FORM.find_key('OU') | _FORM.find_key('BP')
   || {!
      |? _FORM.find_key('WB') | _FORM.find_key('WI')
      |! {? ZO_FORM.seek(_FORM.REF,)
         || ZO_FORM.del();
            _FORM.del()
         ?}
      !}
   ?};
   _loop:=_NORM.next()
!};

P.cntx_pop();
ZO_FORM.cntx_pop();
ZO_OSOBA.cntx_pop()


\proc_s5
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Dobiera formularze.
::   WE: _a - wskazanie zapisu w tabeli ZO_PROC
::  OLD: \proc_s5/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_typ_op:=exec('typ_op','phr_dane');

P.index('PRACONAZ');
P.prefix(exec('ref_firma','ustawienia'));

ZO_TEST.cntx_psh();
ZO_TEST.index('ZO_TEST');
ZO_TEST.prefix(_a);

ZF_WYK.cntx_psh();
ZF_WYK.index('UNIQUE');

_loop:=ZO_TEST.first();
_size:=ZO_TEST.size();
_cnt:=0;

{!
|? _loop
|! _pgs:=100*(_cnt+=1)/_size;
   progress(_pgs,'Dobór formularzy oceny...\n'@+$int(_pgs)+'%',FUN.TYT);
   _p:=exec('dok2ref','phr_tab',ZO_TEST.ZO_OSOBA().ZZ_OSOBA().ZZ_LINK);
   _x_dok:=ZO_TEST.ZO_OSOBA().ZO_PROC().ZO_PROG().ZZ_DOK;
   ZF_WYK.prefix(ref_name(_x_dok),_x_dok);
   _loop:=(P.seek(_p) & ZF_WYK.first());
   _data:=ZO_PROC.DATA;
   {!
   |? _loop
   |! _def:=ZF_WYK.ZF_DEF;
      _link:=ZF_WYK.ZF_DEF().ZZ_DOK;
      {? exec('test_kryt','phr_dane',_link,_typ_op,0,_data,P)>0
      || ZF_WYK.cntx_psh();
         ZF_WYK.index('PROFIL');
         ZF_WYK.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK,'T');
         _ok:={? ZF_WYK.first() || 'N' || 'T' ?};
         ZF_WYK.index('UNIQUE');
         ZF_WYK.prefix(ref_name(ZO_TEST.ZZ_DOK),ZO_TEST.ZZ_DOK);
         {? ~ZF_WYK.find_key(_def)
         || ZF_WYK.blank(1);
            ZF_WYK.ZZ_LINK:=ZO_TEST.ZZ_DOK;
            ZF_WYK.ZF_DEF:=ZF_DEF.ref();
            ZF_WYK.PROFIL:='N';
            ZF_WYK.AUTO:='T';
            ZF_WYK.OK:=_ok;
            ZF_WYK.add()
         ?};
         ZF_WYK.cntx_pop()
      ?};
      _loop:=ZF_WYK.next()
   !};
   {? ZO_TEST.L_FORM=1
   || exec('proc_sf','phr_dane',ZO_TEST.ZZ_DOK)
   ?};
   _loop:=ZO_TEST.next()
!};

ZF_WYK.cntx_pop();
ZO_TEST.cntx_pop()


\proc_links
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Wyodrębniony kod z proc_create. Uzupełnia informacje dla bieżącego pracownika.
::   WE: _a - wskazanie na proces
::       _b - wskazanie na profil
::       _c - wskazanie na typ oceny
::       _d - alias do bufora danych
::       _e - (opcjonalny) wartosc pola L
::UWAGA: nie wywolywac z innych miejsc niz proc_s? - ustawione konteksty tabel, pozycje w buforach, etc.
::  OLD: \proc_links/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:=exec('zo_osoba_p','phr_dane',_a,'E',1);
ZO_OSTYP.cntx_psh();
ZO_OSTYP.index('UNIQUE');
ZO_OSTYP.clear();
_ostyp:=null;
{? ZO_OSTYP.find_key(_osoba,_c)
|| _ostyp:=ZO_OSTYP.ref()
|| ZO_OSTYP.blank(1);
   ZO_OSTYP.ZZ_TYP:=_c;
   ZO_OSTYP.ZO_OSOBA:=_osoba;
   {? _osoba<>null & ZO_OSTYP.add()
   || _ostyp:=ZO_OSTYP.ref()
   ?}
?};
{? _ostyp
|| _d.blank();
   _d.PROF:=_b;
   _d.RODZAJ:='E';
   _d.OSOBA:=_osoba;
   _d.TYP:=_c;
   _d.R:=_ostyp;
   {? var_pres('_e')>0
   || _d.L:=_e
   ?};
   {? ~_d.find_rec()
   || _d.add()
   ?}
?};
ZO_OSTYP.cntx_pop()


\nota_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Dodaje notę.
::   WE: _a - wskazanie na rekord ZO_KOMP
::       _b - wskazanie na rekord ZZ_MET
::UWAGA! Poprawność argumentów wywołania nie jest weryfikowana.
::  OLD: \nota_create/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZO_NOTA.index('UNIQUE');
ZO_NOTA.prefix(_a);
{? ~ZO_NOTA.find_key(_b)
|| ZO_NOTA.blank(1);
   ZO_NOTA.ZO_KOMP:=_a;
   ZO_NOTA.ZZ_MET:=_b;
   _kod:=ZZ_PROFO.ZZ_MET().KOD;
   ZO_NOTA.KLASA:=
      2-!{? _kod='WB' || ZO_NOTAB
         |? _kod='OO' || ZO_NOTAO
         |? _kod='SP' || ZO_NOTAS
         |? _kod='KW' || ZO_NOTAK
         ?};
   ZO_NOTA.add(1)
?}


\zo_form_ostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ustala rekord w ZO_OSTYP.
::   WE: _a - wskazanie na rekord ZO_OSOBA
::       _b - wskazanie na rekord ZZ_TYP
::  OLD: \zo_form_ostyp/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null | _b=null
|| return(null)
?};

_ref:=null;
ZO_OSTYP.cntx_psh();
ZO_OSTYP.clear();
ZO_OSTYP.index('UNIQUE');
{? ZO_OSTYP.find_key(_a,_b)
|| _ref:=ZO_OSTYP.ref()
|| ZO_OSTYP.blank(1);
   ZO_OSTYP.ZO_OSOBA:=_a;
   ZO_OSTYP.ZZ_TYP:=_b;
   {? _a<>null & ZO_OSTYP.add()
   || _ref:=ZO_OSTYP.ref()
   ?}
?};
ZO_OSTYP.cntx_pop();
_ref


\zo_form_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ustala rekord w ZO_TEST.
::   WE: _a - wskazanie na rekord ZO_OSOBA
::  OLD: \zo_form_test/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null
|| return(null)
?};
_ref:=null;
ZO_TEST.cntx_psh();
ZO_TEST.clear();
ZO_TEST.index('UNIQUE');
{? ZO_TEST.find_key(_a)
|| _ref:=ZO_TEST.ref()
|| ZO_TEST.blank(1);
   ZO_TEST.ZO_OSOBA:=_a;
   {? ZO_TEST.add()
   || _ref:=ZO_TEST.ref()
   ?}
?};
ZO_TEST.cntx_pop();
_ref


\zo_form_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.42]
:: OPIS: Ustala rekord w ZO_TEST.
::   WE: _a - wskazanie na rekord ZO_TEST
::       _b - wskazanie na rekord ZO_OSTYP
::  OLD: \zo_form_form/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=null | _b=null
|| return(null)
?};

_ref:=null;
ZO_FORM.cntx_psh();
ZO_FORM.clear();
ZO_FORM.index('UNIQUE');
{? ZO_FORM.find_key(_a,_b)
|| _ref:=ZO_FORM.ref()
|| ZO_FORM.blank(1);
   ZO_FORM.ZO_OSTYP:=_b;
   ZO_FORM.ZO_TEST:=_a;
   ZO_FORM.Z:='N';
   ZO_FORM.VALID:='T';
   {? ZO_FORM.add()
   || _ref:=ZO_FORM.ref()
   ?}
?};
ZO_FORM.cntx_pop();
_ref


\zo_form_eready
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła zwraca tabelę tymczasową z informacjami o formularzach "gotowych" do przetwarzania.
::   WE: _a [STRING] - Wskazanie (SQL-ref) oceny całkowitej (ZO_TEST).
::       _b [STRING] - Wskazanie (SQL-ref) oceniającego (ZZ_OSOBA).
::       _c [NUMBER] - Czy pomijać formularze zamknięte? [0*/1]
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'KOD','STRING[3]','Kod'@,
   'NAZWA','STRING[50]','Nazwa'@,
   'Z','STRING[1]','Zatwierdzony? [T/N]'@,
   'ZO_FORM','STRING[16]','SQL-ref formularza'@
);

{? var_pres('_a')=type_of('') & +_a=16 & ref_num(_a) & ref_tab(_a)=ZO_TEST
|| _zo_test:=_a
|| return(_TAB)
?};
{? var_pres('_b')=type_of('') & +_b=16 & ref_num(_b) & ref_tab(_b)=ZZ_OSOBA
|| _zz_osoba:=_b
|| return(_TAB)
?};
_bezzamk:=var_pres('_c')=type_of(0) & _c;

ZO_TEST.cntx_psh();
ZO_TEST.prefix();
{? ZO_TEST.seek(_zo_test)
|| ZO_FORM.cntx_psh();
   ZO_FORM.index('UNIQUE');
   ZO_FORM.prefix(ZO_TEST.ref());
   {? ZO_FORM.first()
   || ZO_OSTYP.cntx_psh();
      ZO_OSTYP.prefix();
      ZZ_TYP.cntx_psh();
      ZZ_TYP.prefix();
::    Liczba otwartych formularzy (bez OU) dla oceny całkowitej, a nie oceniającego.
      _lo:=0;
      {!
      |? _lo+=ZO_FORM.ZO_OSTYP().ZZ_TYP().KOD<>'OU' & ZO_FORM.Z='N';
::       Kolejność warunków w linii powyżej jest istotna.
         {? $ZO_FORM.ZZ_KTO=_zz_osoba & (~_bezzamk | ZO_FORM.Z='N')
         || _TAB.blank();
            _TAB.KOD:=ZZ_TYP.KOD;
            _TAB.NAZWA:=ZZ_TYP.NAZWA;
            _TAB.Z:=ZO_FORM.Z;
            _TAB.ZO_FORM:=$ZO_FORM.ref();
            _TAB.add()
         ?};
         ZO_FORM.next()
      !};
      {? _lo & _TAB.find_key('OU',)
::       Jeżeli istnieją otwarte formularze (dla oceny całkowitej, a nie oceniającego), to OU nie powinno być jeszcze
::       dostępne - usuwamy rekord.
      || _TAB.del()
      ?};
      ZZ_TYP.cntx_pop();
      ZO_OSTYP.cntx_pop()
   ?};
   ZO_FORM.cntx_pop()
?};
ZO_TEST.cntx_pop();

_TAB


\nota_text
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2011]
:: OPIS: Zwraca tekstową reprezentację oceny.
::   WE: _a - alias do tabeli szczegolow oceny
::       _b - wskazanie na rekord w tabeli ZO_NOTA
::  OLD: \nota_text/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_a.cntx_psh();
_a.index('UNIQUE');
_a.prefix(_b);
_text:='<brak oceny>';
{? _a.first()
|| {? _a=ZO_NOTAB
:     wartość bezpośrednia
   || _text:=$_a.WARTOSC
   |? _a=ZO_NOTAO
:     ocena opisowa
   || _memo:=_a.memo_txt(,1,'OPIS');
      {? _memo<>''
      || _text:=gsub(_memo,'\n',' ');
         _text:=gsub(_text,'\t',' ');
         {!
         |? _text*'  '
         |! _text:=gsub(_text,'  ',' ')
         !}
      ?}
   |? _a=ZO_NOTAK
:     kodowanie wartości
   || {? _a.ZZ_KOMPK
      || _a.ZZ_KOMPK();
         _text:=$ZZ_KOMPK.KOD+' - '+ZZ_KOMPK.OPIS
      ?}
   |? _a=ZO_NOTAS
:     wartość słownikowa
   || {? _a.ZZ_KOMPS
      || _a.ZZ_KOMPS();
         _text:=$ZZ_KOMPS.WARTOSC+' - '+ZZ_KOMPS.OPIS
      ?}
   ?}
|| _text:='<brak zapisu>'
?};
_a.cntx_pop();
_text


\zz_tmpt_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Zwraca wskazanie na typ szablonow
::   WE: _a - alias lub akronim tabeli
::   WY: wskazanie na typ szablonow
::  OLD: \zz_tmpt_ref/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _a:=($_a)()
?};
_acr:=2-!_a;
ZZ_TMPT.clear();
ZZ_TMPT.index('SYMBOL');
{? ~ZZ_TMPT.find_key(_acr,_acr)
|| ZZ_TMPT.blank();
   ZZ_TMPT.SYMBOL:=_acr;
   ZZ_TMPT.NAZWA:=_a.comment();
   ZZ_TMPT.add()
?};
ZZ_TMPT.ref()


\get_form_perm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła ustala uprawnienia do poszczególnych elementów formularza.
::   WE: _a [STRING] - Wskazanie (SQL-ref) formularza (ZO_FORM).
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'KOD','STRING[3]','Kod elementu formularza'@,
   'NAZWA','STRING[120]','Nazwa elementu formularza'@,
   'SYSTEM','STRING[1]','Systemowy [T/N]'@,
   'WYMOG_W','STRING[1]','Wymagalny [T/N]'@,
   'OCENA_W','STRING[1]','Dostępny do edycji [T/N]'@,
   'WIDOK_W','STRING[1]','Widoczny na etapie oceny [T/N]'@,
   'WYNIK_W','STRING[1]','Widoczny po zakończeniu oceny [T/N]'@,
   'ZZ_TYP','STRING[3]','Typ oceny'@,
   'FORMZ','STRING[1]','Formularz zatwierdzony [T/N]'@,
   'VIEW','STRING[1]','Element może być przeglądany [T/N]'@,
   'EDIT','STRING[1]','Element może być redagowany [T/N]'@
);

_zo_form:={? var_pres('_a')=type_of('') & +_a=16 & ref_num(_a) & ref_tab(_a)=ZO_FORM || _a || '' ?};

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_zo_form)
|| _zak:=sql('
   select
      ZZ_TYP.KOD as KOD,
      ZO_FORM.Z as Z,
      ZO_FORM.REFERENCE as REF
   from
      ZO_FORM join
      ZZ_TYP using (ZO_FORM.ZZ_TYP,ZZ_TYP.REFERENCE)
   where
     ZO_FORM.ZO_TEST=\':_a\' and ZO_FORM.Z=\'N\''
   ,$ZO_FORM.ZO_TEST
   );
   ZO_TEST.cntx_psh();
   ZO_TEST.prefix();
   ZF_WYK.cntx_psh();
   ZF_WYK.index('UNIQUE');
   ZF_WYK.prefix(ZO_FORM.ZO_TEST().NP_DOK,ZO_FORM.ZO_TEST().ZZ_DOK);
   {? ZF_WYK.first()
   || ZF_POZ.cntx_psh();
      ZF_POZ.index('NUMER');
      ZF_POZ.prefix(ZF_WYK.ZF_DEF);
      {? ZF_POZ.first()
      || ZO_OSTYP.cntx_psh();
         ZO_OSTYP.prefix();
         ZZ_TYP.cntx_psh();
         ZZ_TYP.prefix();
         _zz_typ:=ZO_FORM.ZO_OSTYP().ZZ_TYP().KOD;
         ZF_SKL.cntx_psh();
         ZF_SKL.prefix();
         ZF_WID.cntx_psh();
         ZF_WID.index('UNIQUE');
         {!
         |? ZF_WID.prefix(ZF_POZ.NP_DOK,ZF_POZ.ZZ_DOK);
            {? ZF_POZ.ZF_SKL().STALY='T'
            || _TAB.blank();
               _TAB.KOD:=ZF_SKL.KOD;
               _TAB.NAZWA:=ZF_SKL.NAZWA;
               _TAB.SYSTEM:=ZF_SKL.SYSTEM;
               _TAB.WYMOG_W:='N';
               _TAB.OCENA_W:='T';
               _TAB.WIDOK_W:='T';
               _TAB.WYNIK_W:='T';
               _TAB.ZZ_TYP:=_zz_typ;
               _TAB.FORMZ:=ZO_FORM.Z;
               _TAB.VIEW:='T';
               _TAB.EDIT:='T';
               _TAB.add()
            |? ZF_WID.find_key(ZO_OSTYP.ZZ_TYP)
            || ZF_POZ.ZF_SKL();
               _TAB.blank();
               _TAB.KOD:=ZF_SKL.KOD;
               _TAB.NAZWA:=ZF_SKL.NAZWA;
               _TAB.SYSTEM:=ZF_SKL.SYSTEM;
               _TAB.WYMOG_W:=ZF_WID.WYMOG_W;
               _TAB.OCENA_W:=ZF_WID.OCENA_W;
               _TAB.WIDOK_W:=ZF_WID.WIDOK_W;
               _TAB.WYNIK_W:=ZF_WID.WYNIK_W;
               _TAB.ZZ_TYP:=_zz_typ;
               _TAB.FORMZ:=ZO_FORM.Z;
               _TAB.VIEW:=
                  {? (_zak.size() & _TAB.WIDOK_W='T') | (~_zak.size() & _TAB.WYNIK_W='T')
                  || 'T'
                  || 'N'
                  ?};
               _TAB.EDIT:={? _TAB.FORMZ='N' & _TAB.OCENA_W='T' || 'T' || 'N' ?};
               _TAB.add()
            ?};
            ZF_POZ.next()
         !};
         ZF_WID.cntx_pop();
         ZF_SKL.cntx_pop();
         ZO_OSTYP.cntx_pop();
         ZZ_TYP.cntx_pop()
      ?};
      ZF_POZ.cntx_pop()
   ?};
   ZF_WYK.cntx_pop();
   ZO_TEST.cntx_pop()
?};
ZO_FORM.cntx_pop();

_TAB


\ank_nazwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Ustala unikalna nazwe ankiety.
::   WE: _a - wskazanie na dokument
::       _b - domyslna nazwa ankiety
::  OLD: \ank_nazwa/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZA_ZEST.cntx_psh;
ZA_ZEST.index('NAZWA');
ZA_ZEST.prefix(ref_name(_a),_a,exec('ref_firma','ustawienia'));
_nazwa:=_b;
_nr:=1;
{!
|? {? ZA_ZEST.find_key(_nazwa)
   || _nazwa:=_b+' ('+$_nr+')';
      _nr+=1
   ?}
!};
ZA_ZEST.cntx_pop;
_nazwa


\ank_kop_zes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Kopiuje szablon ankiety do definicji ankiety.
::   WE: _a - wskazanie na szablon
::       _b - wskazanie na dokument szablonu
::       _c - wskazanie na ankiete
::       _d - wskazanie na dokument ankiety
::  OLD: \ank_kop_zes/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
: ustaw ikone ankiety z w wybraneg szablonu
exec('copy_icon','phr_dane',ZA_ZEST,_a,_c);
: naglowek ankiety
ZA_ZEST.cntx_psh;
ZA_ZEST.clear;
{? ZA_ZEST.seek(_a)
|| _met:=ZA_ZEST.ZZ_MET;
   {? ZA_ZEST.seek(_c)
   || ZA_ZEST.ZZ_MET:=_met;
      {? ZA_ZEST.put
      || _kod:=ZA_ZEST.ZZ_MET().KOD;
         {? _kod='KW' || exec('copy_kompk','phr_dane',_b,_d)
         |? _kod='SP' || exec('copy_komps','phr_dane',_b,_d)
         |? _kod='WB' || exec('copy_kompz','phr_dane',_b,_d)
         ?}
      ?}
   ?}
?};
ZA_ZEST.cntx_pop;

_lnk:=exec('copy_buff','phr_dane');

: pytania ankiety
ZA_TEST.cntx_psh;
ZA_TEST.index('NUMER');
: usun wszystkie pytania
ZA_TEST.prefix(_c);
{? ZA_TEST.last
|| {! |? ZA_TEST.del !}
?};
: kopiuj pytania
ZA_TEST.clear;
ZA_TEST.f_clear(0);
ZA_TEST.f_set('ZA_TEST,NUMER',,'ZA_ZEST=:_a',_a);
_loop:=ZA_TEST.f_first;
{!
|? _loop
|! {? ZA_TEST.f_get
   || _ref:=ZA_TEST.ref;
      _dok:=ZA_TEST.ZZ_DOK;
      _memo:='';
      {? ZA_TEST.ZZ_DOK().ref() || _memo:=ZZ_DOK.memo_txt(,1,'NOTA') ?};
      ZA_TEST.ZZ_DOK:=null;
      ZA_TEST.ZA_ZEST:=_c;
      ZA_TEST.ZA_TEST:=exec('copy_fdst','phr_dane',_lnk,ZA_TEST,ZA_TEST.ZA_TEST);
      ZA_TEST.ZZ_OCENA:=null();
      {? ZA_TEST.add
      || exec('copy_link','phr_dane',_lnk,ZA_TEST,_ref);
:        przypisz ikone nowemu pytaniu lub zgrupowaniu
         exec('copy_icon','phr_dane',ZA_TEST,_ref);
:        nadpisywanie skali punktowej lub wartosci bezposrednich
         {? ZA_TEST.seek(exec('copy_fdst','phr_dane',_lnk,ZA_TEST,_ref),)
         || _kod:=ZA_TEST.ZZ_MET().KOD;
            {? _kod='KW' || exec('copy_kompk','phr_dane',_dok,ZA_TEST.ZZ_DOK)
            |? _kod='SP' || exec('copy_komps','phr_dane',_dok,ZA_TEST.ZZ_DOK)
            |? _kod='WB' || exec('copy_kompz','phr_dane',_dok,ZA_TEST.ZZ_DOK)
            |? _kod=''
            || exec('copy_answer','phr_dane',_ref,ZA_TEST.ref())
            ?}
         ?};
:        przepisanie skladnikow oceny
         exec('ank_kop_skl','phr_dane',_ref,ZA_TEST.ref);
::       tresc pytania z memo
         {? +_memo & ZA_TEST.ZZ_DOK().ref()
         || ZZ_DOK.memo_set(_memo,'NOTA');
            ZZ_DOK.memo_put()
         ?}
      ?}
   ?};
   _loop:=ZA_TEST.f_next
!};
ZA_TEST.f_clear(0);
ZA_TEST.cntx_pop()


\ank_kop_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
:: OPIS: Kopiuje skladniki oceny.
::   WE: _a - wskazanie na pytanie zrodlowe
::       _b - wskazanie na pytanie docelowe
::  OLD: \ank_kop_skl/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZA_SKL.cntx_psh;
ZA_SKL.clear;

ZA_SKL.f_set(,,'ZA_TEST=:_a',_a);
_loop:=ZA_SKL.f_first;
{!
|? _loop
|! ZA_SKL.f_get;
   ZA_SKL.ZA_TEST:=_b;
   ZA_SKL.add;
   _loop:=ZA_SKL.f_next
!};

ZA_SKL.f_clear;
ZA_SKL.cntx_pop()


\ocena_dod_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tworzy tabelę tymczasową ze spisem treści pozostałych elementów oceny - formularze oceny pracowniczej.
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: definicja pozostałych elementów oceny
_tab:=sql(
   'select
      ROW_NUMBER() OVER (ORDER BY 2) as INDEX,
      ZF_SKL.NAZWA as NAME,
      ZF_SKL.KOD as ZF_KOD,
      ZF_SKL.ZZ_DOK as DOK,
      ZZ_MET.KOD as TYP,
      ZZ_TYP.KOD as TYP_KOD,
      ZZ_TYP.REFERENCE as TYP_REF,
      ZZ_TYP.NAZWA as TYPN,
      ZF_SKL.REFERENCE as S_REF,
      ZO_FORM.Z as CZY_ZAM,
      ZO_DOD.REFERENCE as DOD_REF,
      P_FORM.REFERENCE as KTO,
      P_TEST.REFERENCE as KOGO,
      ZO_TEST.REFERENCE as TEST_REF,
      O_TEST.NAZWISKO as SNAME,
      O_TEST.PIERWSZE as FNAME,
      \'N\' as MEMO,
      \'N\' as RADIO,
      \'N\' as CZY_MOD,
      \'                                                \' as PROC_ID,
      ZO_PROG.NAZWA as PROGRAM,
      ZO_PROC.OKRES_OD as PROC_OD,
      ZO_PROC.OKRES_DO as PROC_DO
   from
      ZO_DOD join
      ZO_ASP using (ZO_DOD.ZO_ASP,ZO_ASP.REFERENCE) join
      ZZ_TYP using (ZO_DOD.ZZ_TYP,ZZ_TYP.REFERENCE) join
      ZZ_MET using (ZO_ASP.ZZ_MET,ZZ_MET.REFERENCE) join
      ZF_SKL using (ZO_ASP.ZF_SKL,ZF_SKL.REFERENCE) join
      ZO_FORM using (ZO_DOD.ZO_FORM,ZO_FORM.REFERENCE) join
      ZO_TEST using (ZO_FORM.ZO_TEST,ZO_TEST.REFERENCE) join
      ZO_OSOBA using (ZO_TEST.ZO_OSOBA,ZO_OSOBA.REFERENCE) join
      ZO_PROC using (ZO_OSOBA.ZO_PROC,ZO_PROC.REFERENCE) join
      ZO_PROG using (ZO_PROC.ZO_PROG, ZO_PROG.REFERENCE) join

      ZZ_OSOBA as O_FORM using (ZO_FORM.ZZ_KTO,O_FORM.REFERENCE) join
      @P as P_FORM using (O_FORM.ZZ_LINK,P_FORM.ZZ_DOK) join

      ZZ_OSOBA as O_TEST using (ZO_FORM.ZZ_KOGO,O_TEST.REFERENCE) join
      @P as P_TEST using (O_TEST.ZZ_LINK,P_TEST.ZZ_DOK)
   where
      ZO_TEST.REFERENCE=\':_c\'
   order by
      INDEX, NAME',
   _a,_b,_c
);
_tab


\ocena_dod_spis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tworzy tabelę tymczasową ze spisem treści pozostałych elementów oceny - formularze oceny pracowniczej.
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('ocena_dod_list','phr_dane',_a,_b,_c,_d);
:: przygotowanie tabeli z wynikami

_dok:=null();
_form:=null();
_typ:=null();
_status:='';
ZO_TEST.cntx_psh();
ZO_TEST.prefix();
{? ZO_TEST.seek(_c)
|| _dok:=ZO_TEST.ZZ_DOK;
   _zak:=ZO_TEST.KOMPLET
|| _dok:=null()
?};
ZO_TEST.cntx_pop();

_nr:=0;
_PERM:=exec('get_form_perm','phr_dane',_d);
_fml:=$"exec('ocena_dod_zapis','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);

_loop:=_tab.first();
{!
|? _loop
|! _tab.PROC_ID:=_proc;
   _tab.put();
   _loop:=_tab.next()
!};

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_d)
|| _form:=ZO_FORM.ref();
   _typ:=ZO_FORM.ZZ_TYP().KOD;
   _status:=ZO_FORM.Z
?};
ZO_FORM.cntx_pop();

_spis:=sql('
   select
      INDEX,
      NAME,
      MEMO,
      RADIO,
      CZY_MOD,
      CZY_ZAM,
      PROC_ID as FORMULAID,
      DOD_REF as FIELD,
      TYP as TYP,
      TYP_KOD as TYP_KOD,
      TYPN as TYPN,
      ZF_KOD as KOD
   from
      :_a
   order by
      1',
   _tab
);

_loop:=_spis.first();
{!
|? _loop
|! {? _typ=_spis.TYP_KOD | _typ='OU' | (_typ='PS' & _zak='T')
   || {? _PERM.find_key(_spis.KOD,) & _PERM.VIEW='T'
      || {? _spis.TYP<>'OO'
         || _spis.RADIO:='T'
         || _spis.MEMO:='T'
         ?};
         {? _spis.CZY_ZAM='N' & _PERM.EDIT='T'
         || _spis.CZY_MOD:='T'
         ?};
         _spis.NAME:=_PERM.NAZWA+' ('+_spis.TYPN+')';
         _spis.put();
         _loop:=_spis.next()
      || _loop:=_spis.del()
      ?}
   || _loop:=_spis.del()
   ?}
!};

_spis


\ocena_dod_radio
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tabela przygotowana do przeslania do kontrolki - radio buttony.
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::   WY: uchwyt do tablicy z radio_buttonami.
::----------------------------------------------------------------------------------------------------------------------
:: definicja pól radio_button
_tab:=exec('ocena_dod_spis','phr_dane',_a,_b,_c,_d);
_radio_list:=tab_tmp(,
   'INDEX','STRING[3]','INDEX',
   'NR','INTEGER','NR',
   'NAME','STRING[255]','NAME',
   'CHCK','STRING[1]','CHECKED',
   'KOMP','STRING[50]','KOMP'
);
ZO_DOD.cntx_psh();
ZO_DOD.prefix();
_loop:=_tab.first();
{!
|? _loop
|! _radio_list.KOMP:=_tab.NAME;
   {? ZO_DOD.seek(_tab.FIELD)
   || _dok:=ZO_DOD.ZO_ASP().ZF_SKL().ZZ_DOK;
      _np_dok:=ref_name(_dok)
   ?};
   {? _tab.TYP<>'OO'
   || _kod:=_tab.TYP;
      _radio_list.INDEX:=$_tab.INDEX;
      {? _kod='KW'
      || ZZ_KOMPK.index('WARTOSC');
         ZZ_KOMPK.prefix(_np_dok,_dok);
         _loop:=ZZ_KOMPK.first();
         {!
         |? _loop
         |!
            _radio_list.NR:=ZZ_KOMPK.WARTOSC;
            _radio_list.NAME:='('+ZZ_KOMPK.KOD+')'+' '+ZZ_KOMPK.OPIS;
            {? ZO_DOD.WARTOSC=_radio_list.NR
            || _radio_list.CHCK:='T'
            || _radio_list.CHCK:='N'
            ?};
            _radio_list.add();
            _loop:=ZZ_KOMPK.next()
         !}
      |? _kod='SP'
      || ZZ_KOMPS.index('WARTOSC');
         ZZ_KOMPS.prefix(_np_dok,_dok);
         _loop:=ZZ_KOMPS.first();
         {!
         |? _loop
         |! _radio_list.NR:=ZZ_KOMPS.WARTOSC;
            _radio_list.NAME:=$ZZ_KOMPS.WARTOSC+' - '+ZZ_KOMPS.OPIS;
            {? ZO_DOD.WARTOSC=_radio_list.NR
            || _radio_list.CHCK:='T'
            || _radio_list.CHCK:='N'
            ?};
            _radio_list.add();
            _loop:=ZZ_KOMPS.next()
         !}
      |? _kod='WB'
      || ZZ_KOMPZ.index('UNIQUE');
         ZZ_KOMPZ.prefix(_np_dok,_dok);
         {? ZZ_KOMPZ.first()
         || {! _wartosc:=ZZ_KOMPZ.MIN..ZZ_KOMPZ.MAKS
            |! _radio_list.NR:=_wartosc;
               _radio_list.NAME:=$_wartosc;
               {? ZO_DOD.WARTOSC=_radio_list.NR
               || _radio_list.CHCK:='T'
               || _radio_list.CHCK:='N'
               ?};
               _radio_list.add()
            !}
         ?}
      ?}
   ?};
   _loop:=_tab.next()
!};
ZO_DOD.cntx_pop();

:: tabela przekazywana metoda web_ctrl_set_table do kontrolki

_rad:=sql('
   select
      INDEX,
      NR,
      NAME,
      CHCK,
      KOMP
   from
      :_a
   order by
      5',
   _radio_list
);
_rad


\ocena_komp_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tabela pomocnicza - lista kompetencji do oceny na formularzu przez wskazanego pracownika
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql(
   'select
      FORM_TYP.KOD as KOD,
      \'   \' as INDEX,
      ZZ_KOMP.NAZWA as K_NAZWA,
      ZZ_KOMP.REFERENCE as K_REF,
      ZO_KOMP.REFERENCE as ZK_REF,
      ZZ_MET.KOD as MET,
      \'N\' as DOK_MOD,
      ZO_NOTA.REFERENCE as N_REF,
      ZO_FORM.Z as CZY_ZAK,
      \'N\' as CZY_MOD,
      FORM_TYP.NAZWA as TYP,
      O_FORM.NAZWISKO as OSOBA,
      P_FORM.REFERENCE as KTO,
      P_TEST.REFERENCE as KOGO,
      O_TEST.PIERWSZE as PIERWSZE,
      O_TEST.NAZWISKO as NAZWISKO,
      ZO_PROG.NAZWA as PROGRAM,
      ZO_PROC.OKRES_OD as PROC_OD,
      ZO_PROC.OKRES_DO as PROC_DO
   from
      ZO_NOTA join
      ZZ_MET using (ZO_NOTA.ZZ_MET, ZZ_MET.REFERENCE) join
      ZO_KOMP using (ZO_NOTA.ZO_KOMP, ZO_KOMP.REFERENCE) join
      ZZ_KOMP using (ZO_KOMP.ZZ_KOMP, ZZ_KOMP.REFERENCE) join
      ZO_FORM using (ZO_KOMP.ZO_FORM, ZO_FORM.REFERENCE) join
      ZO_TEST using (ZO_FORM.ZO_TEST, ZO_TEST.REFERENCE) join
      ZO_OSOBA using (ZO_TEST.ZO_OSOBA, ZO_OSOBA.REFERENCE) join
      ZO_PROC using (ZO_OSOBA.ZO_PROC, ZO_PROC.REFERENCE) join
      ZO_PROG using (ZO_PROC.ZO_PROG, ZO_PROG.REFERENCE) join
      ZZ_TYP as FORM_TYP using (ZO_FORM.ZZ_TYP, FORM_TYP.REFERENCE) join

      ZZ_OSOBA as O_FORM using (ZO_FORM.ZZ_KTO, O_FORM.REFERENCE) join
      @P as P_FORM using (O_FORM.ZZ_LINK,P_FORM.ZZ_DOK) join

      ZZ_OSOBA as O_TEST using (ZO_FORM.ZZ_KOGO,O_TEST.REFERENCE) join
      @P as P_TEST using (O_TEST.ZZ_LINK,P_TEST.ZZ_DOK)
   where
      P_TEST.REFERENCE=\':_a\' and ZO_FORM.ZO_TEST=\':_b\'
   order by
      1, K_NAZWA',
   _a,_b
);

:: usuwam oceny kompetencji, ktore maja sie nie pokazywac na formularzu
_szef:=exec('isManager','phr_dane',_c,_a);
_TEST:=sql('select * from :_a where CZY_ZAK=\'N\' and KOD<>\'OU\'',_tab);

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
_kod:='';
_zak:=0;
{? ZO_FORM.seek($_d)
|| _kod:=ZO_FORM.ZZ_TYP().KOD;
   _zak:=ZO_FORM.ZO_TEST().KOMPLET='T'
?};
ZO_FORM.cntx_pop();

{? ~_tab.find_key('OU',)
|| {? _tab.first()
   || {!
      |? {? (_kod<>'PB' & _kod<>'PS' & _tab.KTO<>_c) | (~_zak & _kod='PS' & _tab.KTO<>_c)
         || _tab.del()
         |? _kod='PS' & _zak
         || _tab.next()
         || {? _tab.CZY_ZAK='N' & _tab.KTO=_c
            || _tab.CZY_MOD:='T';
               _tab.put()
            ?};
            _tab.next()
         ?}
      !}
   ?}
|? _tab.find_key('OU',)
|| {? _TEST.first()
   || {? _tab.first()
      || {!
         |? {? _tab.KTO<>_c | _tab.KOD='OU'
            || _tab.del()
            || {? _tab.CZY_ZAK='N'
               || _tab.CZY_MOD:='T';
                  _tab.put()
               ?};
               _tab.next()
            ?}
         !}
      ?}
   || {? ~_zak
      || {? _tab.first()
         || {!
            |? {? (_kod<>'OU' & _tab.KTO<>_c) | (_tab.KOD='OU' & _kod='PB')
               || _tab.del()
               || {? _tab.CZY_ZAK='N'
                  || _tab.CZY_MOD:='T';
                     _tab.put()
                  ?};
                  _tab.next()
               ?}
            !}
         ?}
      || {? _tab.first()
         || {!
            |? {? _kod<>'PS' & _kod<>'OU'
               || {? _tab.KTO<>_c | _tab.KOD='OU'
                  || _tab.del()
                  || _tab.next()
                  ?}
               || _tab.next()
               ?}
            !}
         ?}
      ?}
   ?}
?};

:: tabela pomocnicza dzieki ktorej przekarzemy nastepnie ostateczny wynik

_pom:=tab_tmp(1,
   'NAME','STRING[255]','NAME',
   'INDEX','STRING[10]','INDEX',
   'ZZ_MET','STRING[2]','ZZ_MET',
   'TYPE','STRING[3]','TYPE',
   'NTYPE','STRING[20]','NAME_TYPE',
   'MEMO','STRING[1]','MEMO',
   'RADIO','STRING[1]','RADIO',
   'CZY_MOD','STRING[1]','MOD',
   'NOTA_REF','STRING[16]','NOTA_REF',
   'ZO_KOMP','STRING[16]','ZKOM_REF',
   'SNAME','STRING[50]','NAZWISKO',
   'FNAME','STRING[50]','IMIE',
   'PROC_ID','STRING[50]','PROC_ID',
   'KTO','STRING[16]','KTO',
   'KOGO','STRING[16]','KOGO',
   'PROG','STRING[50]','PROGRAM',
   'SES','STRING[50]','SESJA',
   'PWO','STRING[1]','PWO'
);

_fml:=$"exec('ocena_komp_zapis','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);
_PERM:=exec('get_form_perm','phr_dane',_d);
_edit:=0;

_loop:=_tab.first();
{!
|? _loop
|! _pom.INDEX:=_tab.INDEX;
   _pom.NAME:=_tab.K_NAZWA+' ('+_tab.TYP+')';
   _pom.ZZ_MET:=_tab.MET;
   _pom.TYPE:=_tab.KOD;
   _pom.NTYPE:=_tab.TYP;
   _pom.CZY_MOD:=_tab.CZY_MOD;
   _pom.NOTA_REF:=_tab.N_REF;
   _pom.KTO:=_tab.KTO;
   _pom.ZO_KOMP:=_tab.ZK_REF;
   _pom.SNAME:=_tab.NAZWISKO;
   _pom.FNAME:=_tab.PIERWSZE;
   _pom.PROC_ID:=_proc;
   _pom.KTO:=_tab.KTO;
   _pom.KOGO:=_tab.KOGO;
   _pom.PROG:=_tab.PROGRAM;
   _pom.PWO:=PAR_SKID.get(427);
   _pom.SES:='(sesja: '@+$_tab.PROC_OD+' - '+$_tab.PROC_DO+')';
   _pom.add();
   _loop:=_tab.next()
!};

:: określam jakie metody oceny składają się na daną kompetencję: jesli kompetencja wystepuje dwa razy, ma dwie metody

_name:='';
_type:='';
_loop:=_pom.first();
{!
|? _loop
|! _name:=_pom.NAME;
   _type:=_pom.TYPE;
   _count:=sql('select * from :_a where NAME=\':_b\' and TYPE=\':_c\'',_pom,_name,_type);
   {? _count.size>1
   || _pom.MEMO:='T';
      _pom.RADIO:='T';
      _pom.put()
   || {? _pom.ZZ_MET<>'OO'
      || _pom.MEMO:='N';
         _pom.RADIO:='T';
         _pom.put()
      || _pom.MEMO:='T';
         _pom.RADIO:='N';
         _pom.put()
      ?}
   ?};
   &_count;
   _loop:=_pom.next()
!};
:: sklejam powtorzone kompetencje
_nazwa:='';
_index:=0;
_loop:=_pom.first();
{!
|? _loop
|! {? _nazwa=_pom.ZO_KOMP
   || _loop:=_pom.del(,1)=2
   || _nazwa:=_pom.ZO_KOMP;
      _index+=1;
      _pom.INDEX:=$_index;
      _pom.put();
      _loop:=_pom.next()
   ?}
!};

_pom


\isManager
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Sprawdza, czy pracownik jest przelozonym innego pracownika.
:   WE: _a - wskazanie na pracownika, ktory moze byc szefem
::       _b - wskazanie na pracownika, ktory moze byc podwladnym
::  OLD: \isManager/zz_web.fml
::----------------------------------------------------------------------------------------------------------------------
P.prefix();
{? ~P.seek(_a)
|| return(0)
?};

: pobierz liste podwladnych pracownika
_P:=exec('prac_pod','stanprac',P.OSOBA);
_P.blank();
_P.P_SQL:=_b;
_P.find_rec()


\ocena_komp_spis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tworzy tabelę tymczasową ze "spisem treści" oceny kompetencji (zakładka) - formularze oceny pracowniczej.
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::   WY: uchwyt do tablicy z lista kompetencji
::----------------------------------------------------------------------------------------------------------------------
_pom:=_a;
:: tabela przekazywana metoda web_ctrl_set_table do kontrolki

_spis:=sql('
   select
     INDEX,
     NAME,
     MEMO,
     RADIO,
     CZY_MOD,
     PWO,
     ZO_KOMP as FIELD,
     PROC_ID as FORMULAID,
     TYPE
   from
     :_a
  order by
     9,2',
   _pom
);
_spis


\ocena_komp_radio
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tabela przygotowana do przeslania do kontrolki - radio buttony.
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::   WY: uchwyt do tablicy z radio_buttonami.
::----------------------------------------------------------------------------------------------------------------------
_pom:=_a;
_radio_list:=tab_tmp(,
   'NR','INTEGER','NR',
   'NAME','STRING[255]','NAME',
   'CHCK','STRING[1]','CHECKED',
   'KOMP','STRING[50]','KOMP',
   'POZ','STRING[1]','POZ'
);
ZO_NOTA.clear();
ZO_NOTA.index('RODZAJ');
ZO_NOTAK.clear();
ZO_NOTAK.index('UNIQUE');
ZO_NOTAS.clear();
ZO_NOTAS.index('UNIQUE');
ZO_NOTAB.clear();
ZO_NOTAB.index('UNIQUE');
ZO_KOMP.cntx_psh();
ZO_KOMP.prefix();
_dok:='';
_np_dok:='';
_komp:='';
_loop:=_pom.first();
{!
|? _loop
|! {? _pom.RADIO='T'
   || _radio_list.KOMP:=_pom.NAME;
      {? ZO_KOMP.seek(_pom.ZO_KOMP)
      || ZO_NOTA.prefix(ZO_KOMP.ref,'S');
         {? ZO_NOTA.first()
         || _dok:=ZO_NOTA.ZO_KOMP().ZO_FORM().ZO_TEST().ZZ_DOK;
            _dok_main:=ZO_NOTA.ZO_KOMP().ZZ_KOMP().ZZ_DOK;
            _komp:=ZO_NOTA.ZO_KOMP().ZZ_KOMP;
            {? ZO_NOTA.KLASA=2-!ZO_NOTAK
            || ZZ_KOMPK.index('WARTOSC');
               ZZ_KOMPK.prefix(ref_name(_dok),_dok,_komp);
               {? ZZ_KOMPK.first()
               || _loop:=ZZ_KOMPK.first()
               || ZZ_KOMPK.prefix(ref_name(_dok_main),_dok_main,_komp);
                  _loop:=ZZ_KOMPK.first()
               ?};
               {!
               |? _loop
               |! _radio_list.NR:=ZZ_KOMPK.WARTOSC;
                  _radio_list.NAME:='('+ZZ_KOMPK.KOD+')'+' '+ZZ_KOMPK.OPIS;
                  {? ZO_NOTA.ZO_KOMP().OCENA=_radio_list.NR
                  || _radio_list.CHCK:='T'
                  || _radio_list.CHCK:='N'
                  ?};
                  _radio_list.POZ:={? PAR_SKID.get(427)='T' || ZZ_KOMPK.POZIOM || 'N' ?};
                  _radio_list.add();
                  _loop:=ZZ_KOMPK.next()
               !}
            |? ZO_NOTA.KLASA=2-!ZO_NOTAS
            || ZZ_KOMPS.clear();
               ZZ_KOMPS.index('WARTOSC');
               ZZ_KOMPS.prefix(_np_dok,_dok,_komp);
               {? ZZ_KOMPS.first()
               || _loop:=ZZ_KOMPS.first()
               || ZZ_KOMPS.prefix(ref_name(_dok_main),_dok_main,_komp);
                  _loop:=ZZ_KOMPS.first()
               ?};
               {!
               |? _loop
               |! _radio_list.NR:=ZZ_KOMPS.WARTOSC;
                  _radio_list.NAME:=$ZZ_KOMPS.WARTOSC+' - '+ZZ_KOMPS.OPIS;
                  {? ZO_NOTA.ZO_KOMP().OCENA=_radio_list.NR
                  || _radio_list.CHCK:='T'
                  || _radio_list.CHCK:='N'
                  ?};
                  _radio_list.POZ:={? PAR_SKID.get(427)='T' || ZZ_KOMPS.POZIOM || 'N' ?};
                  _radio_list.add();
                  _loop:=ZZ_KOMPS.next()
               !}
            |? ZO_NOTA.KLASA=2-!ZO_NOTAB
            || ZZ_KOMPZ.index('UNIQUE');
               ZZ_KOMPZ.prefix(_np_dok,_dok,_komp);
               {? ZZ_KOMPZ.first()
               || _first:=ZZ_KOMPZ.first()
               || ZZ_KOMPZ.prefix(ref_name(_dok_main),_dok_main,_komp);
                  _first:=ZZ_KOMPZ.first()
               ?};
               {? _first
               || {! _wartosc:=ZZ_KOMPZ.MIN..ZZ_KOMPZ.MAKS
                  |! _radio_list.NR:=_wartosc;
                     _radio_list.NAME:=$_wartosc;
                     {? ZO_NOTA.ZO_KOMP().OCENA=_radio_list.NR
                     || _radio_list.CHCK:='T'
                     || _radio_list.CHCK:='N'
                     ?};
                     _radio_list.POZ:={? PAR_SKID.get(427)='T' || ZZ_KOMPZ.POZIOM || 'N' ?};
                     _radio_list.add()
                  !}
               ?}
            ?}
         ?}
      ?}
   ?};
   _loop:=_pom.next()
!};
ZO_KOMP.cntx_pop();

_rad:=sql('
   select
      \'   \' as INDEX,
      NR,
      NAME,
      CHCK,
      POZ,
      KOMP
   from
      :_a
   order by
      6',
   _radio_list
);

:: nadaje index zgodnie z indexem zwiazanym z dana kompetencja (lista kompetencji do oceny)
:: tabela przekazywana metoda web_ctrl_set_table do kontrolki

_loop:=_rad.first();
_name:='';
_indeks:=0;
{!
|? _loop
|! {? _name='' | _name<>_rad.KOMP
   || _indeks+=1;
      _rad.INDEX:=$_indeks;
      _name:=_rad.KOMP;
      _rad.put()
   || _rad.INDEX:=$_indeks;
      _rad.put()
   ?};
   _loop:=_rad.next()
!};
_rad


\new_gotw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Dodaje zapisy gotowości dla przekazanego właściciela.
::   WE: _a [REFERENCE] - Ref zz_dok właściciela.
::   WY: Wynik operacji: 0 - jeżeli nie udało się dodać lub liczba dodanych rekordow.
::  OLD: \new_gotw/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=ZZ_DOK
|| _zz_dok:=_a
|| return(0)
?};
_ret:=0;
ZZ_GOTW.cntx_psh();
ZZ_GOTW.index('LINKPOZ');
ZZ_GOTW.prefix(ref_name(_zz_dok),_zz_dok);
{? ~ZZ_GOTW.first()
|| ZZ_GOT.cntx_psh();
   ZZ_GOT.index('MM');
   ZZ_GOT.prefix();
   {? ZZ_GOT.first()
   || {!
      |? ZZ_GOTW.blank(1);
         ZZ_GOTW.ZZ_LINK:=_zz_dok;
         ZZ_GOTW.MIN:=ZZ_GOT.MIN;
         ZZ_GOTW.MAX:=ZZ_GOT.MAX;
         ZZ_GOTW.OPIS:=ZZ_GOT.OPIS;
         ZZ_GOTW.POZIOM:='N';
         _ret+=ZZ_GOTW.add();
         ZZ_GOT.next()
      !}
   ?};
   ZZ_GOT.cntx_pop()
?};
ZZ_GOTW.cntx_pop();
_ret


\new_mobw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Dodaje zapisy mobilności dla przekazanego właściciela.
::   WE: _a [REFERENCE] - Ref zz_dok właściciela.
::   WY: Wynik operacji: 0 - jeżeli nie udało się dodać lub liczba dodanych rekordow.
::  OLD: \new_mobw/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=ZZ_DOK
|| _zz_dok:=_a
|| return(0)
?};
_ret:=0;
ZZ_MOBW.cntx_psh();
ZZ_MOBW.index('LINKOP');
ZZ_MOBW.prefix(ref_name(_zz_dok),_zz_dok);
{? ~ZZ_MOBW.first()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   _typ:=exec('slo_typ','ext_slo','MOB_TYP');
   SLO_KOD.prefix(_typ);
   {? SLO_KOD.first()
   || {!
      |? ZZ_MOBW.blank(1);
         ZZ_MOBW.ZZ_LINK:=_zz_dok;
         ZZ_MOBW.OPIS:=SLO_KOD.NAZWA;
         _ret+=ZZ_MOBW.add();
         SLO_KOD.next()
      !}
   ?};
   SLO_KOD.cntx_pop()
?};
ZZ_MOBW.cntx_pop();
_ret


\ocena_komp_about
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła przekazująca opisy kompetencji i odpowiedzi z oceny opisowej (jeśli występuje).
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_spis:=exec('ocena_komp_spis','phr_dane',_a);
_loop:=_spis.first();
ZO_KOMP.cntx_psh();
ZO_NOTA.cntx_psh();
ZO_NOTAO.cntx_psh();
ZO_NOTA.index('RODZAJ');
ZO_NOTAO.index('UNIQUE');
ZO_KOMP.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{!
|? _loop
|! _index:=_spis.INDEX;
   _komp:=_spis.FIELD;
   {? ZO_KOMP.seek(_komp)
   ||
::    pobieram opisy dla kompetencji
      {? exec('seek_dok','phr_tab',ZO_KOMP.ZZ_KOMP().ZZ_DOK)
      || web_ctrl_set_obj('FORM_CTRL',,'about',_index,ZZ_DOK.memo_txt(,1,'NOTA'));
         web_ctrl_call('FORM_CTRL',,'setAboutVal')
      ?}
?};
   _loop:=_spis.next()
!};
ZZ_DOK.cntx_pop();
ZO_NOTAO.cntx_pop();
ZO_NOTA.cntx_pop();
ZO_KOMP.cntx_pop();
~~


\ocena_komp_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Tablica z nagłówkiem oceny kompetencji (kogo oceniamy, jaki jest etap oceny).
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_fml:=$"exec('ocena_btn_zamknij','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);
_PERM:=exec('get_form_perm','phr_dane',_a);
_nag:=tab_tmp(,
   'TITLE','STRING[100]','TITLE',
   'BUTTON','STRING[1]','BUTTON',
   'FORM_ID','STRING[50]','FORMULAID',
   'TAB','STRING[20]','TAB'
);
_program:='';
_sesja:='';
ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek($_a)
|| _program:=ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().ZO_PROG().NAZWA;
   _od:=$ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().OKRES_OD;
   _do:=$ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().OKRES_DO;
   _sesja:='(sesja: '@+_od+' - '+_do+')';
   _nag.TITLE:='Program: '@+_program+' '+_sesja
?};
{? (_PERM.find_key('OK',) & _PERM.OCENA_W='T')
|| _nag.BUTTON:='T'
|| _nag.BUTTON:='N'
?};
ZO_FORM.cntx_pop();
_nag.FORM_ID:=_proc;
_nag.TAB:='Kompetencje';
_nag.add();
_nag


\ocena_komp_answer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła przekazująca opisy kompetencji i odpowiedzi z oceny opisowej (jeśli występuje).
::   WE: _a - wskazanie ocenianego.
::       _b - wskazanie na ocenę całkowitą (ZO_TEST).
::       _c - wskazanie na oceniajacego.
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_spis:=exec('ocena_komp_spis','phr_dane',_a);
_loop:=_spis.first();
ZO_KOMP.cntx_psh();
ZO_NOTA.cntx_psh();
ZO_NOTAO.cntx_psh();
ZO_NOTA.index('RODZAJ');
ZO_NOTAO.index('UNIQUE');
ZO_KOMP.prefix();
ZZ_DOK.prefix();
{!
|? _loop
|! _index:=_spis.INDEX;
   _komp:=_spis.FIELD;
   {? ZO_KOMP.seek(_komp)
   ||
:     pobierania odpowiedz memo (o ile jest)
      ZO_NOTA.prefix(ZO_KOMP.ref());
      {? ZO_NOTA.first() & _spis.MEMO='T'
      || ZO_NOTAO.prefix(ZO_NOTA.ref());
         {? ZO_NOTAO.first()
         || web_ctrl_set_obj('FORM_CTRL',,'answer',_index,ZO_NOTAO.memo_txt(,1,'OPIS'));
            web_ctrl_call('FORM_CTRL',,'setAnswerVal')
        ?}
      ?}
   ?};
   _loop:=_spis.next()
!};
ZO_NOTAO.cntx_pop();
ZO_NOTA.cntx_pop();
ZO_KOMP.cntx_pop();
~~


\ocena_dod_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Tablica z nagłówkiem oceny kompetencji (kogo oceniamy, jaki jest etap oceny).
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_fml:=$"exec('ocena_btn_zamknij','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);
_program:='';
_sesja:='';

_nag:=tab_tmp(,
   'TITLE','STRING[100]','TITLE',
   'BUTTON','STRING[1]','BUTTON',
   'FORM_ID','STRING[50]','FORMULAID',
   'TAB','STRING[20]','TAB'
);

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_d)
|| _program:=ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().ZO_PROG().NAZWA;
   _od:=$ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().OKRES_OD;
   _do:=$ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC().OKRES_DO;
   _sesja:='(sesja: '@+_od+' - '+_do+')';
   _nag.TITLE:='Program: '@+_program+' '+_sesja
?};
ZO_FORM.cntx_pop();

_nag.BUTTON:='T';
_nag.FORM_ID:=_proc;
_nag.TAB:='Dodatkowe';
_nag.add();
_nag


\ocena_dod_about
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła przekazująca opisy kompetencji i odpowiedzi z oceny opisowej (jeśli występuje).
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('ocena_dod_list','phr_dane',_a,_b,_c,_d);
_loop:=_tab.first();
ZF_SKL.cntx_psh();
ZF_SKL.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{!
|? _loop
|! _index:=$_tab.INDEX;
   {? ZF_SKL.seek(_tab.S_REF)
   ||
::    pobieram opisy dla elementu formularza (pozostale elementy oceny)
      {? exec('seek_dok','phr_tab',ZF_SKL.ZZ_DOK)
      || web_ctrl_set_obj('FORM_CTRL',,'about',_index,ZZ_DOK.memo_txt(,1,'NOTA'));
         web_ctrl_call('FORM_CTRL',,'setAboutVal')
      ?}
   ?};
   _loop:=_tab.next()
!};
ZZ_DOK.cntx_pop();
ZF_SKL.cntx_pop();
~~


\ocena_dod_answer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła przekazująca opisy kompetencji i odpowiedzi z oceny opisowej (jeśli występuje).
::   WE: _a - wskazanie oceniającego
::       _b - wskazanie ocenianego
::       _c - wskazanie na ocenę całkowitą (ZO_TEST)
::       _d - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('ocena_dod_list','phr_dane',_a,_b,_c,_d);
_loop:=_tab.first();
ZO_DOD.cntx_psh();
ZO_DOD.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{!
|? _loop
|! _index:=$_tab.INDEX;
   {? ZO_DOD.seek(_tab.DOD_REF)
   ||
:     pobierania odpowiedz memo (o ile jest)
      {? exec('seek_dok','phr_tab',ZO_DOD.ZZ_DOK)
      || web_ctrl_set_obj('FORM_CTRL',,'answer',_index,ZZ_DOK.memo_txt(,1,'NOTA'));
         web_ctrl_call('FORM_CTRL',,'setAnswerVal')
      ?}
   ?};
   _loop:=_tab.next()
!};
ZZ_DOK.cntx_pop();
ZO_DOD.cntx_pop();
~~


\ocena_dod_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formula odpowiedzialna za zapis odpowiedzi dla pozostalych elementach oceny -
::       formularz oceny okresowej webterm.
::   WE: _a - wskazanie na ocene dodatkowa
::       _b - wartosc odpowiedzi
::       _c - typ odpowiedzi
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
:: pobranie parametrow (ocena dodatkowa, wartosc odpowiedzi, typ odpowiedzi)
_par:=_a;
_id:=_par.macroFieldId;
_typ:=_par.typ;
{? _typ='radiogroup'
|| _val:=#_par.wartoscPola
|? _typ='textarea'
|| _val:=_par.wartoscPola
?};
:: zapis odpowiedzi do wskazanej oceny dodatkowej
ZO_DOD.cntx_psh();
ZO_DOD.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{? ZO_DOD.seek(_id)
|| {? _typ='radiogroup'
   || ZO_DOD.WARTOSC:=_val;
      ZO_DOD.DATA:=date();
      ZO_DOD.put()
   |? _typ='textarea'
   || ZO_DOD.DATA:=date();
      ZO_DOD.put();
      {? exec('seek_dok','phr_tab',ZO_DOD.ZZ_DOK)
      || ZZ_DOK.memo_set(_val,'NOTA');
         ZZ_DOK.memo_put(,'NOTA')
      ?}
   ?}
?};
ZZ_DOK.cntx_pop();
ZO_DOD.cntx_pop();
~~


\ocena_komp_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formula odpowiedzialna za zapis odpowiedzi dla ocen kompetencji - formularz oceny okresowej webterm.
::   WE: _a - wskazanie na ocene czastkowa
::       _b - wartosc odpowiedzi
::       _c - typ odpowiedzi
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
:: pobranie parametrow (ocena dodatkowa, wartosc odpowiedzi, typ odpowiedzi)
_par:=_a;
_id:=_par.macroFieldId;
_typ:=_par.typ;
{? _typ='radiogroup'
|| _val:=#_par.wartoscPola
|? _typ='textarea'
|| _val:=_par.wartoscPola
?};

ZO_KOMP.prefix();
{? ZO_KOMP.seek(_id)
|| _komp:=ZO_KOMP.ZZ_KOMP;
   _dok:=ZO_KOMP.ZZ_KOMP().ZZ_DOK;
   _np_dok:=ref_name(_dok)
?};

ZO_NOTA.cntx_psh();
ZO_NOTA.index('RODZAJ');
ZO_NOTAK.cntx_psh();
ZO_NOTAS.cntx_psh();
ZO_NOTAB.cntx_psh();
ZO_NOTAO.cntx_psh();
ZO_NOTAK.clear();
ZO_NOTAK.index('UNIQUE');
ZO_NOTAS.clear();
ZO_NOTAS.index('UNIQUE');
ZO_NOTAB.clear();
ZO_NOTAB.index('UNIQUE');
ZO_NOTAO.clear();
ZO_NOTAO.index('UNIQUE');
ZZ_KOMP.prefix();
ZZ_KOMPS.index('WARTOSC');
ZZ_KOMPK.index('WARTOSC');
ZZ_KOMPZ.index('UNIQUE');

{? _typ='radiogroup'
|| ZO_KOMP.cntx_psh();
   ZO_KOMP.prefix();
   {? ZO_KOMP.seek(_id)
   || ZO_NOTA.prefix(ZO_KOMP.ref(),'S');
   {? ZO_NOTA.first()
   || {? ZO_NOTA.KLASA=2-!ZO_NOTAK
      || ZO_NOTAK.prefix(ZO_NOTA.ref);
         ZZ_KOMPK.prefix(_np_dok,_dok,_komp,_val);
         {? ZZ_KOMPK.first() & ZO_NOTAK.first()
         || ZO_NOTAK.ZZ_KOMPK:=ZZ_KOMPK.ref();
            ZO_NOTAK.put()
         ?}
      |? ZO_NOTA.KLASA=2-!ZO_NOTAS
      || ZO_NOTAS.prefix(ZO_NOTA.ref);
         ZZ_KOMPS.prefix(_np_dok,_dok,_komp,_val);
         {? ZZ_KOMPS.first() & ZO_NOTAS.first()
         || ZO_NOTAS.ZZ_KOMPS:=ZZ_KOMPS.ref();
            ZO_NOTAS.put()
         ?}
      |? ZO_NOTA.KLASA=2-!ZO_NOTAB
      || ZO_NOTAB.prefix(ZO_NOTA.ref);
         ZZ_KOMPZ.prefix(_np_dok,_dok,_komp);
         {? ZZ_KOMPZ.first() & ZO_NOTAB.first()
         || ZO_NOTAB.WARTOSC:=_val;
            ZO_NOTAB.put()
         ?}
      ?}
   ?}
   ?};
   ZO_KOMP.cntx_pop()
|? _typ='textarea'
|| ZO_NOTA.prefix(BIT.sqlint(_id),'O');
   {? ZO_NOTA.first()
   || ZO_NOTAO.prefix(ZO_NOTA.ref);
      {? ZO_NOTAO.first()
      || ZO_NOTAO.memo_set(_val,'OPIS');
         ZO_NOTAO.memo_put(,'OPIS')
      ?}
   ?}
?};
ZO_NOTAK.cntx_pop();
ZO_NOTAS.cntx_pop();
ZO_NOTAB.cntx_pop();
ZO_NOTAO.cntx_pop();
ZO_NOTA.cntx_pop();
~~


\ocena_form_spis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Definicja komentarzy do kontrolki webterm.
::   WE: _a - wskazanie na ocene calkowita
::       _b - wskazanie na oceniajcego
::       _c - wskazanie na ocenianego
::   WY: alias do tabeli z definicja
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
      select
         ZO_FORM.REFERENCE as F_REF,
         O_FORM.NAZWISKO as NAZWISKO,
         O_FORM.PIERWSZE as PIERWSZE,
         O_TEST.NAZWISKO as SNAME,
         O_TEST.PIERWSZE as FNAME,
         ZO_FORM.ZZ_DOK as DOK_REF,
         case when ZO_FORM.Z=\'T\' then \'N\' else \'T\' end as DOK_MOD,
         ZO_FORM.Z as Z,
         ZZ_TYP.KOD as KOD,
         ZZ_TYP.NAZWA as TNAZWA,
         P_FORM.REFERENCE as KTO,
         P_TEST.REFERENCE as KOGO,
         ZO_PROG.NAZWA as PROGRAM,
         ZO_PROC.OKRES_OD as PROC_OD,
         ZO_PROC.OKRES_DO as PROC_DO
      from
         ZO_FORM join
         ZO_TEST using (ZO_FORM.ZO_TEST,ZO_TEST.REFERENCE) join
         ZO_OSOBA using (ZO_TEST.ZO_OSOBA,ZO_OSOBA.REFERENCE) join
         ZO_PROC using (ZO_OSOBA.ZO_PROC,ZO_PROC.REFERENCE) join
         ZO_PROG using (ZO_PROC.ZO_PROG,ZO_PROG.REFERENCE) join
         ZZ_TYP using (ZO_FORM.ZZ_TYP,ZZ_TYP.REFERENCE) join

         ZZ_OSOBA as O_FORM using (ZO_FORM.ZZ_KTO,O_FORM.REFERENCE) join
         P as P_FORM using (O_FORM.ZZ_LINK,P_FORM.ZZ_DOK) join

         ZZ_OSOBA as O_TEST using (ZO_FORM.ZZ_KOGO,O_TEST.REFERENCE) join
         P as P_TEST using (O_TEST.ZZ_LINK,P_TEST.ZZ_DOK)
      where
         ZO_FORM.ZO_TEST=\':_a\' and P_TEST.REFERENCE=\':_b\'',
      _a,_c
);

_tab.blank();
_tab.KOD:='OU';
_TEST:=sql('select * from :_a where Z=\'N\' and KOD<>\'OU\'',_tab);
{? _TEST.first() & _tab.first()
|| {!
   |? {? _tab.KTO=_b & _tab.KOD<>'OU'
      || _tab.next()
      || _tab.del()
      ?}
   !}
?};

{? _tab.first()
|| {!
   |? {? _tab.KOD='OU'
      || _tab.del()
      |? _tab.KTO=_b | (_szef:=exec('isManager','phr_dane',_b,_c))=1
      || {? _tab.KTO<>_b & _tab.DOK_MOD='T'
         || _tab.DOK_MOD:='N';
            _tab.put()
         ?};
         _tab.next()
      || _tab.del()
      ?}
   !}
?};


_fml:=$"exec('ocena_form_zapis','phr_dane',_a)";
_fml_all:=$"exec('ocena_test_zapis','phr_dane',_a)";
_fml_sum:=$"exec('ocena_sum_zapis','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);
_proc_all:=exec('HTML_fml_add','#web_srv',_fml_all);
_proc_sum:=exec('HTML_fml_add','#web_srv',_fml_sum);

_spis:=tab_tmp(1,
   'INDEX','STRING[10]','INDEX',
   'NAME','STRING[255]','NAME',
   'MEMO','STRING[1]','MEMO',
   'RADIO','STRING[1]','RADIO',
   'CZY_MOD','STRING[1]','CZY_MOD',
   'FIELD','STRING[16]','FIELD',
   'SNAME','STRING[50]','SNAME',
   'FNAME','STRING[50]','FNAME',
   'FORM_ID','STRING[50]','FORMULAID',
   'PROGRAM','STRING[50]','PROGRAM',
   'SES','STRING[50]','SESJA'
);

_PERM:=exec('get_form_perm','phr_dane',_d);
_index:=0;
{? (_PERM.find_key('OPK',) & _PERM.VIEW='T')
|| _index:=1;
   _spis.INDEX:=$_index;
   _spis.NAME:='Ocena opisowa przełożonego'@;
   _spis.MEMO:='T';
   _spis.RADIO:='N';
   {? _PERM.EDIT='T'
   || _spis.CZY_MOD:='T'
   || _spis.CZY_MOD:='N'
   ?};
   _spis.FIELD:=_a;
   _spis.FORM_ID:=_proc_all;
   _spis.SES:=
      {? _tab.first()
      || '(sesja: '@+$_tab.PROC_OD+' - '+$_tab.PROC_DO+')'
      || ''
      ?};
   _spis.add()
?};

{? (_PERM.find_key('POO',) & _PERM.VIEW='T')
|| {? _index=0
   || _index:=1
   || _index:=2
   ?};
   _spis.INDEX:=$_index;
   _spis.NAME:='Podsumowująca ocena opisowa'@;
   _spis.MEMO:='T';
   _spis.RADIO:='N';
   {? _PERM.EDIT='T'
   || _spis.CZY_MOD:='T'
   || _spis.CZY_MOD:='N'
   ?};
   _spis.FIELD:=_a;
   _spis.FORM_ID:=_proc_sum;
   _spis.SES:=
      {? _tab.first()
      || '(sesja: '@+$_tab.PROC_OD+' - '+$_tab.PROC_DO+')'
      || ''
      ?};
   _spis.add()
?};

{? (_PERM.find_key('OPP',) & _PERM.VIEW='T')
|| _loop:=_tab.first();
{!
|? _loop
|! _index+=1;
   _spis.INDEX:=$_index;
   _spis.NAME:=_tab.PIERWSZE+' '+_tab.NAZWISKO;
   _spis.MEMO:='T';
   _spis.RADIO:='N';
      {? _PERM.EDIT='T'
      || _spis.CZY_MOD:=_tab.DOK_MOD
      || _spis.CZY_MOD:='N'
      ?};
   _spis.FIELD:=_tab.F_REF;
   _spis.SNAME:=_tab.SNAME;
   _spis.FNAME:=_tab.FNAME;
   _spis.FORM_ID:=_proc;
   _spis.PROGRAM:=_tab.PROGRAM;
      _spis.SES:='(sesja: '@+$_tab.PROC_OD+' - '+$_tab.PROC_DO+')';
   _spis.add();
   _loop:=_tab.next()
   !}
?};
_spis


\ocena_form_answer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła przekazująca opisy kompetencji i odpowiedzi z oceny opisowej (jeśli występuje).
::   WE: _a - wskazanie na ocene calkowita
::       _b - wskazanie na oceniajacego
::       _c - wskazanie na ocenianego
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('ocena_form_spis','phr_dane',_a,_b,_c,_d);
_loop:=_tab.first();
ZO_FORM.cntx_psh();
ZO_TEST.cntx_psh();
ZO_TEST.prefix();
ZO_FORM.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{!
|? _loop
|! _index:=_tab.INDEX;
   {? _tab.FIELD=_a
   || {? ZO_TEST.seek(_tab.FIELD)
   ||
:     pobieram odpowiedz memo
         {? _tab.NAME='Podsumowująca ocena opisowa'
         || web_ctrl_set_obj('FORM_CTRL',,'answer',_index,ZO_TEST.memo_txt(,1,'POO'));
            web_ctrl_call('FORM_CTRL',,'setAnswerVal')
         || {? exec('seek_dok','phr_tab',ZO_TEST.ZZ_DOK)
            || web_ctrl_set_obj('FORM_CTRL',,'answer',_index,ZZ_DOK.memo_txt(,1,'NOTA'));
               web_ctrl_call('FORM_CTRL',,'setAnswerVal')
            ?}
         ?}
      ?}
   || {? ZO_FORM.seek(_tab.FIELD)
      ||
:     pobieram odpowiedz memo
      {? exec('seek_dok','phr_tab',ZO_FORM.ZZ_DOK)
      || web_ctrl_set_obj('FORM_CTRL',,'answer',_index,ZZ_DOK.memo_txt(,1,'NOTA'));
         web_ctrl_call('FORM_CTRL',,'setAnswerVal')
      ?}
      ?}
   ?};
   _loop:=_tab.next()
!};
ZZ_DOK.cntx_pop();
ZO_TEST.cntx_pop();
ZO_FORM.cntx_pop();
~~


\ocena_form_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Tablica z nagłówkiem dla komentarzy (kogo oceniamy, program oceny).
::   WE: _a - wskazanie na ocene calkowita
::       _b - wskazanie na oceniajacego
::       _c - wskazanie na ocenianego
::----------------------------------------------------------------------------------------------------------------------
_fml:=$"exec('ocena_btn_zamknij','phr_dane',_a)";
_proc:=exec('HTML_fml_add','#web_srv',_fml);
_PERM:=exec('get_form_perm','phr_dane',_d);
_spis:=exec('ocena_form_spis','phr_dane',_a,_b,_c,_d);
_nag:=tab_tmp(,
   'TITLE','STRING[100]','TITLE',
   'BUTTON','STRING[1]','BUTTON',
   'FORM_ID','STRING[50]','FORMULAID',
   'TAB','STRING[20]','TAB'
);
_nag.TITLE:='Program: '@+_spis.PROGRAM+' '+_spis.SES;
{? (_PERM.find_key('OPK',) & _PERM.OCENA_W='T')
|| _nag.BUTTON:='T'
|| _nag.BUTTON:='N'
?};
_nag.FORM_ID:=_proc;
_nag.TAB:='Komentarze'@;
_nag.add();
_nag


\ocena_form_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formula odpowiedzialna za zapis odpowiedzi dla komentarzy - formularz oceny okresowej webterm.
::   WE: _a - wskazanie na formularz oceny
::       _b - wartosc odpowiedzi
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie srodowiska
{? ~exec('env_wt','poc')
|| return()
?};

:: pobranie parametrow (ocena dodatkowa, wartosc odpowiedzi, typ odpowiedzi)
_par:=_a;
_id:=_par.macroFieldId;
_val:=_par.wartoscPola;

ZO_TEST.cntx_psh();
ZO_FORM.cntx_psh();
ZO_FORM.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{? ZO_FORM.seek(_id)
|| {? exec('seek_dok','phr_tab',ZO_FORM.ZZ_DOK)
   || ZZ_DOK.memo_set(_val,'NOTA');
      ZZ_DOK.memo_put(,'NOTA')
   ?}
?};
ZZ_DOK.cntx_pop();
ZO_FORM.cntx_pop();
ZO_TEST.cntx_pop();
~~


\ocena_test_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formula odpowiedzialna za zapis odpowiedzi dla komentarzy - formularz oceny okresowej webterm.
::   WE: _a - wskazanie na formularz oceny
::       _b - wartosc odpowiedzi
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie srodowiska
{? ~exec('env_wt','poc')
|| return()
?};

:: pobranie parametrow (ocena dodatkowa, wartosc odpowiedzi, typ odpowiedzi)
_par:=_a;
_id:=_par.macroFieldId;
_val:=_par.wartoscPola;

ZO_TEST.cntx_psh();
ZO_TEST.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
{? ZO_TEST.seek(_id)
|| {? exec('seek_dok','phr_tab',ZO_TEST.ZZ_DOK)
   || ZZ_DOK.memo_set(_val,'NOTA');
      ZZ_DOK.memo_put(,'NOTA')
   ?}
?};
ZZ_DOK.cntx_pop();
ZO_TEST.cntx_pop();
~~


\ocena_btn_zamknij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła do obsługi przycisku zamknij na formularzu oceny pracowniczej - webTerm.
::   WE: _a - rodzaj zakładki ['Kompetencje'/'Dodatkowe','Komentarze']
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
{? _par.macroFormTab='Kompetencje'
|| ZO_KOMP.web_close('WT_ZKOMP')
|? _par.macroFormTab='Dodatkowe'
|| ZO_DOD.web_close('WT_ZDOD')
|? _par.macroFormTab='Komentarze'
|| ZO_FORM.web_close('WT_ZFORM')
?};
~~


\ocena_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.41]
:: OPIS: Weryfikuje wypelnienie wszystkich wymaganych elementow oceny
::  MOD: RO [18.02]
::   WE: _a - wskazanie na formularz (ZO_FORM)
::       _b - alias do tabeli wyniku procedur skladowanych
::       _c - wskazanie na oceniajacego
::       _d - wskazanie na ocene calkowita
::   WY: tresc komunikatu o brakujacych elementach lub tekst pusty jesli ocena jest komplatna
:: UWAGA! Poprawnosc argumentow wywolania nie jest weryfikowana.
::  OLD: \ocena_akc/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_dok:='';
_np_dok:='';
_PERM:=exec('get_form_perm','phr_dane',$_a);

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ~ZO_FORM.seek(_a)
|| ZO_FORM.cntx_pop();
:  to nie powinno miec miejsca...
   return(0)
|| _dok:=ZO_FORM.ZO_TEST().ZZ_DOK;
   _np_dok:=ref_name(_dok)
?};

ZF_WYK.cntx_psh();
ZF_WYK.index('OK');
ZF_WYK.prefix(_np_dok,_dok,'T');
{? ~ZF_WYK.first()
|| ZO_FORM.cntx_pop();
   ZF_WYK.cntx_pop();
:  to nie powinno miec miejsca...
   return(0)
?};

ZF_POZ.cntx_psh();
ZF_POZ.index('ZF_SKL');
ZF_POZ.prefix(ZF_WYK.ZF_DEF);
ZF_WYK.cntx_pop();
ZO_DOD.cntx_psh();
ZO_ASP.cntx_psh();
ZF_WID.cntx_psh();
ZO_ASP.index('NUMER');
ZO_ASP.prefix(_np_dok,_dok,'T');
_loop:=ZO_ASP.first();
{!
|? _loop
|! ZO_ASP.ZF_SKL();
   _kod:=ZF_SKL.KOD;
:  weryfikuj wypelnienie tylko pozycji dynamicznych, podlegajacych kontroli
   {? ZF_SKL.STALY='N' & ZF_SKL.WALIDUJ='T' & ZF_POZ.find_key(ZF_SKL.ref())
   || ZF_WID.index('UNIQUE');
      _dok:=ZF_POZ.ZZ_DOK;
      _np_dok:=ref_name(_dok);
      ZF_WID.prefix(_np_dok,_dok);
:     czy dla typu oceniajacego jest wymagane wypelnienie
      {? _PERM.find_key(_kod,) & (_PERM.WYMOG_W='T')
         &
         {? ZO_ASP.ZZ_MET<>null
         || ZO_DOD.index('UNIQUE');
            ZO_DOD.prefix(_a);
            {? ZO_DOD.find_key(ZO_ASP.ref())
            || {? ZF_SKL.ZZ_MET().RODZAJ<>'O'
               || ZO_DOD.WARTOSC<=0
               || ZO_DOD.ZZ_DOK();
                  form(ZZ_DOK.memo_txt(,1,'NOTA'))=''
               ?}
            ?}
         || ~exec('ocena_wer_sys','phr_dane',_kod)
         ?}
      || _b.NR+=1;
         _b.INFO:=1;
         _b.NAZ:=ZF_SKL.NAZWA;
         _b.add()
      ?}
   ?};
   _loop:=ZO_ASP.next()
!};
ZO_ASP.cntx_pop();
ZO_DOD.cntx_pop();
ZF_WID.cntx_pop();
ZF_POZ.cntx_pop();
ZO_FORM.cntx_pop();

{? _b.size()
|| 'Należy uzupełnić brakujące elementy oceny.'
|| ''
?}


\ocena_wer_sys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.41]
:: OPIS: Weryfikuje wypelnienie elementu "systemowego" oceny - dedykowana obsluga elementow zlozonych.
::       Kod wyodrebniony z formuly ocena_akc, zaklada sie odpowiednia pozycje kursora w tabelach.
::   WE: _a - kod elementu formularza
::   WY: 0/1 element nie wypelniony/uzupelniony
:: UWAGA! Poprawnosc argumentow wywolania nie jest weryfikowana.
::  OLD: \ocena_wer_sys/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_txt:='';
{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};
{? _a='OK'
|| ZO_NOTA.cntx_psh();
   ZO_KOMP.cntx_psh();
   ZO_KOMP.index('UNIQUE');
   ZO_KOMP.prefix(ZO_FORM.ref());
   _loop:=ZO_KOMP.first();
   {!
   |? _loop
   |! ZO_NOTA.index('RODZAJ');
      ZO_NOTA.prefix(ZO_KOMP.ref(),'S');
      _loop:=ZO_NOTA.first();
      {!
      |? _loop
      |! {? ZO_NOTA.DATA=date(0,0,0)
         || ZO_KOMP.cntx_pop();
            ZO_NOTA.cntx_pop();
            return(0)
         ?};
         _loop:=ZO_NOTA.next()
      !};
      _loop:=ZO_KOMP.next()
   !};
   ZO_KOMP.cntx_pop();
   ZO_NOTA.cntx_pop();
   1
|? _a='CN'
|| _test:=sql('
      select C.REFERENCE from ZO_CEL as C
      where C.KOGO=:_a and C.KTO_Z=:_b and C.PROC=\':_c\' and C.DATA_W is null',
      ZO_FORM.ZZ_KOGO,ZO_FORM.ZZ_KTO,$ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC
   );
   _test.size()>0
|? _a='CW'
|| _test:=sql('
      select C.REFERENCE from ZO_CEL as C
      where C.KOGO=:_a and C.KTO_Z=:_b and C.ZO_PROC=:_c and C.DATA_W is null',
      ZO_FORM.ZZ_KOGO,ZO_FORM.ZZ_KTO,ZO_FORM.ZO_TEST().ZO_OSOBA().ZO_PROC
   );
   _test.size()=0
|? _a='MB'
|| ZO_MOB.cntx_psh();
   ZO_MOB.index('TEKO');
   ZO_MOB.prefix(ZO_FORM.ZO_TEST);
   _jest:=ZO_MOB.first();
   ZO_MOB.cntx_pop();
   _jest
|? _a='OPK'
|| ZZ_DOK.cntx_psh();
   ZZ_DOK.prefix();
   {? exec('seek_dok','phr_tab',ZO_FORM.ZO_TEST().ZZ_DOK)
   || _txt:=ZZ_DOK.memo_txt(,1,'NOTA')
   ?};
   ZZ_DOK.cntx_pop();
   _txt<>''
|? _a='OPP'
|| ZZ_DOK.cntx_psh();
   ZZ_DOK.prefix();
   {? exec('seek_dok','phr_tab',ZO_FORM.ZO_TEST().ZZ_DOK)
   || _txt:=ZZ_DOK.memo_txt(,1,'NOTA')
   ?};
   ZZ_DOK.cntx_pop();
   _txt<>''
|? _a='POO'
|| ZO_FORM.ZO_TEST();
   _txt:=ZO_TEST.memo_txt(,1,'POO');
   _txt<>''
|? _a='PS'
|| SZK_ZAP.cntx_psh();
   SZK_ZAP.index('OCENADAT');
   SZK_ZAP.prefix(ZO_FORM.ZO_TEST);
   _jest:=SZK_ZAP.first();
   SZK_ZAP.cntx_pop();
   _jest
|? _a='RK'
|| ZO_SK.cntx_psh();
   ZO_SK.index('OCENASTN');
   ZO_SK.prefix(ZO_FORM.ZO_TEST);
   _jest:=(ZO_SK.first() & ZO_SK.STN<>null());
   ZO_SK.cntx_pop();
   _jest
|| 1
?}


\zo_test_owner_or_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła sprawdza, czy dla wskazanej parametrem _a oceny całkowitej, pracownik lub osoba (_b) są ocenianym lub
::       mają rolę PB.
::   WE: _a [STRING] - Wskazanie (SQL-ref) oceny całkowitej (ZO_TEST).
::       _b [STRING] - Wskazanie (SQL-ref) pracownika (P) lub osoby (OSOBA).
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_num(_a) & ref_tab(_a)=ZO_TEST
|| _zo_test:=_a
|| return(0)
?};
{? var_pres('_b')=type_of('') & +_b=16 & ref_num(_b)
|| _TAB:=ref_tab(_b);
   {? _TAB=P | _TAB=OSOBA
   || _ref:=_b;
      _typ:=2-!_TAB
   || return(0)
   ?}
|| return(0)
?};

_ret:=0;
ZO_TEST.cntx_psh();
ZO_TEST.prefix();
{? ZO_TEST.seek(_zo_test)
|| P.cntx_psh();
   P.index('ZZ_DOK');
   _fo:=
      {? _typ='P'
      || "P.prefix(ref_name(_a),_a); {? P.first() || $P.ref() || null() ?}"
      |? _typ='OSOBA'
      || "P.prefix(ref_name(_a),_a); {? P.first() || $P.OSOBA || null() ?}"
      || "0"
      ?};

   ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();
   _ret:=_fo(ZO_TEST.ZZ_OSOBA().ZZ_LINK)=_ref;

   {? ~_ret
::    Użytkownik nie jest osobą ocenianą. Sprawdźmy czy ma rolę PB.
   || ZO_FORM.cntx_psh();
      ZO_FORM.index('UNIQUE');
      ZO_FORM.prefix(ZO_TEST.ref());
      {? ZO_FORM.first()
      || ZO_OSTYP.cntx_psh();
         ZO_OSTYP.prefix();
         _pb:=exec('typ_pb','phr_dane');
         {!
         |? {? ZO_FORM.ZO_OSTYP().ZZ_TYP=_pb
            || _ret:=_fo(ZO_FORM.ZZ_KTO().ZZ_LINK)=_ref
            ?};
            ~_ret & ZO_FORM.next()
         !};
         ZO_OSTYP.cntx_pop()
      ?};
      ZO_FORM.cntx_pop()
   ?};

   ZZ_OSOBA.cntx_pop();
   P.cntx_pop()

?};
ZO_TEST.cntx_pop();
_ret


\ocena_sum_zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formula odpowiedzialna za zapis odpowiedzi dla komentarzy - formularz oceny okresowej webterm.
::   WE: _a - wskazanie na formularz oceny
::       _b - wartosc odpowiedzi
::----------------------------------------------------------------------------------------------------------------------
:: ustawienie srodowiska
{? ~exec('env_wt','poc')
|| return()
?};

:: pobranie parametrow (ocena dodatkowa, wartosc odpowiedzi, typ odpowiedzi)
_par:=_a;
_id:=_par.macroFieldId;
_val:=_par.wartoscPola;

ZO_TEST.cntx_psh();
ZO_TEST.prefix();
{? ZO_TEST.seek(_id)
|| ZO_TEST.memo_set(_val,'POO');
   ZO_TEST.memo_put(,'POO')
?};
ZO_TEST.cntx_pop();
~~


\dom_rpi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.30]
::  MOD: RO [18.42]
:: OPIS: Domyslny szablon dla elementu wydruku - wartosc poczatkowa ZF_RPI.SZABLON
::   WE: _a - 1 - szablon, 2 - szablon do uzupełnienia ręcznego
::       _b - czy kontroliwać ilość wzorców
::   WY: nazwa pliku szablonu, jesli udalo sie znalezc odpowiedni
::  OLD: \dom_rpi/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?};

{? ZF_RPI.ZF_SKL=null
|| return('')
?};

_zn:={? _a=2 || 'poc_zr' || 'poc_zf' ?};
_TMP:=files(_zn+(-ZF_RPI.ZF_SKL().KOD)+'*.rpi');
{? _TMP.first & _TMP.size<>1 & _TMP.FILENAME=(_zn+(-ZF_RPI.ZF_SKL().KOD)+'01.rpi')
|| _TMP.FILENAME
?};

{? _TMP.first & _TMP.size=1
|| _TMP.FILENAME
|? ZF_SKL.SYSTEM<>'T'
|| obj_del(_TMP);
   _TMP:=files(_zn+'dod*.rpi');
   {? _TMP.first & _TMP.size=1
   || _TMP.FILENAME
   || ''
   ?}
|| ''
?}


\komp_add_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.42]
:: OPIS: Formuła sprawdza czy można dodać wybraną kompetencję do formularza oceny lub profilu kompetencji
::       (czy nie kłóci się z dodaną wcześniej kompetencją nadrzędną, o ile taką posiada).
::   WE: _a - wskazanie na ZZ_KOMP, _b - wskazanie ZO_FORM/ZZ_PROF.ZZ_DOK, _c - alias tabeli (ZO_KOMP/ZZ_PROFK)
::   WY: 1 - kompetencja może być dodana, 0 - kompetencji nie można dodać
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,'REF','STRING[16]',);
_valid:=0;
ZZ_KOMP.cntx_psh();
{? _a<>null()
|| {? ZZ_KOMP.ZZ_KOMP=0
   || ZZ_KOMP.index('NAZWA');
      ZZ_KOMP.prefix(exec('init_hist','phr_dane'),ZZ_KOMP.ref());
      _loop:=ZZ_KOMP.first();
      {!
      |? _loop
      |! _tab.REF:=$ZZ_KOMP.ref();
         _tab.add();
         _loop:=ZZ_KOMP.next()
      !};
      _form:=sql('
         select
            ZZ_KOMP.REFERENCE as REF
         from
            ZO_KOMP join ZZ_KOMP join ZO_FORM
         where
            ZO_FORM.REFERENCE=\':_a\'',
         _b
      );
      _check:=sql('select REF from :_a where REF IN (select REF from :_b)',_tab,_form);
      {? ~_check.size()
      || _valid:=1
      || _valid:=2
      ?}
   || _komp:=$ZZ_KOMP.ref();
      _form:=sql('
         select
            ZZ_KOMP.REFERENCE as REF
         from
            ZO_KOMP join ZZ_KOMP join ZO_FORM
         where
            ZO_FORM.REFERENCE=\':_a\' and ZZ_KOMP.ZZ_KOMP=0',
         _b
      );
      _loop:=_form.first();
      {!
      |? _loop
      |! _ref:=exec('FindAndGet','#table',ZZ_KOMP,_form.REF,,,null());
         ZZ_KOMP.prefix(exec('init_hist','phr_dane'),_ref);
         _loop:=ZZ_KOMP.first();
         {!
         |? _loop
         |! _tab.REF:=$ZZ_KOMP.ref();
            _tab.add();
            _loop:=ZZ_KOMP.next()
         !};
         _loop:=_form.next()
      !};
      _check:=sql('
         select
            REF
         from
            :_a
         where
            REF=\':_b\'',
         _tab,_komp
      );
      {? ~_check.size()
      || _valid:=1
      || _valid:=3
      ?}
   ?}
?};
ZZ_KOMP.cntx_pop();
_valid


\zo_form_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.42]
:: OPIS: Bada poprawność kompetencji dla wygenerowanych formularzy oceny pracowniczej.
::   WE: _a - wskazanie na sesję ocen
::   WY: Komunikat o niepoprawnych formularzach lub 1 jeśli formularze zostały wygenerowane poprawnie.
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,
   'KTO','STRING[60]','Oceniający',
   'KOGO','STRING[60]','Oceniany',
   'ZZ_TYP','STRING[50]','Typ oceny'
);
_blad:=0;
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_a)
|| _forms:=sql('
      select
         ZO_FORM.REFERENCE as REF
      from
         ZO_FORM join
         ZO_TEST using(ZO_FORM.ZO_TEST, ZO_TEST.REFERENCE) join
         ZO_OSOBA using(ZO_TEST.ZO_OSOBA,ZO_OSOBA.REFERENCE) join
         ZO_PROC using(ZO_OSOBA.ZO_PROC,ZO_PROC.REFERENCE)
      where
         ZO_PROC.REFERENCE=\':_a\'',
      $ZO_PROC.ref()
   );
   _loop:=_forms.first();
   {!
   |? _loop
   |! _komps:=sql('
         select
            ZZ_KOMP.REFERENCE as REF,
            ZZ_KOMP.ZZ_KOMP as KOMP
         from
            ZO_KOMP join ZZ_KOMP join ZO_FORM
         where
            ZO_FORM.REFERENCE=\':_a\'
         order by
            2',
         _forms.REF
      );
      _loop:=_komps.first();
      {!
      |? _loop
      |! {? _komps.KOMP=0
         || _ref:=exec('FindAndGet','#table',ZZ_KOMP,_komps.REF,,,null());
            _komps.cntx_psh();
            _komps.prefix(_ref);
            {? _komps.first()
            || _blad:=1
            ?};
            _komps.cntx_pop()
         ?};
         _loop:=_komps.next()
      !};
      ZO_FORM.cntx_psh();
      ZO_FORM.prefix();
      {? ZO_FORM.seek(_forms.REF)
      || {? _blad
         || ZO_FORM.VALID:='N';
            {? ZO_FORM.put()
            || _tab.KTO:=ZO_FORM.ZZ_KTO().NAZWISKO+' '+ZO_FORM.ZZ_KTO().PIERWSZE;
               _tab.ZZ_TYP:=ZO_FORM.ZZ_TYP().NAZWA;
               _tab.KOGO:=ZO_FORM.ZZ_KOGO().NAZWISKO+' '+ZO_FORM.ZZ_KOGO().PIERWSZE;
               _tab.add()
            ?}
         || ZO_FORM.VALID:='T';
            ZO_FORM.put()
         ?}
      ?};
      ZO_FORM.cntx_pop();
      &_komps;
      _blad:=0;
      _loop:=_forms.next()
   !}
?};
ZO_PROC.cntx_pop();
{? _tab.size()
|| _win:=_tab.mk_sel('Lista błędnych formularzy'@,,1,'zo_form');
   _tab.win_sel(_win);
   FUN.info('Wykryto błędy w wygenerowanych formularzach ocen pracowniczych.\nW wygenerowanych formularzach istnieją '
            'jednocześnie kompetencje nadrzędne i podrzędne.\nBez poprawy błędów w formularzach otwarcie sesji ocen '
            'będzie niemożliwe.'@);
   _tab.select()
|| 1
?}


\za_nota_pkt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Aktualizacja uzyskanych punktów dla formularzy ankiet typu test.
::   WE: _a - wskazanie na nagłówek odpowiedzi (pytanie)
::       _b - wartosc odpowiedzi
::       _c - 1/0 [pytanie jednokrotnego wyboru/wielokrotnego wyboru]
::       _d - 1/0 [liczenie punktów dla całego pytania/liczenie dla odpowiedzi]
::----------------------------------------------------------------------------------------------------------------------
_ndx:=ZA_NOTA.ndx_tmp(,,'ZA_NOTA',,,'NUMER',,);
ZA_NOTAO.cntx_psh();
ZA_NOTAO.index('UNIQUE');
_true:=0;
_blad:=0;
_tresc:='';
_pyt:=null();
_wartosc:=_b;
_pkt:=0;
_ank:=null();
ZA_NOTA.cntx_psh();
ZA_NOTA.index(_ndx);
:: sprawdzamy udzieloną/udzielone odpowiedzi
{? _c
|| ZA_NOTA.prefix(_a,_wartosc);
   {? ZA_NOTA.first()
   || _tresc:=ZA_NOTA.TRESC;
      _pyt:=ZA_NOTA.ZA_TEST;
      _ank:=ZA_NOTA.ZA_TEST().ZA_ZEST
   ?};
   ZA_NOTAO.prefix(_ank,_pyt,_tresc);
   {? ZA_NOTAO.first()
   || {? _d
   || {? ZA_NOTAO.TRUE='T'
      || _true:=1
      ?}
      || _pkt:=ZA_NOTAO.ODPT
      ?}
   ?}
|| ZA_NOTA.prefix(_a);
   _loop:=ZA_NOTA.first();
   {!
   |? _loop
   |! _tresc:=ZA_NOTA.TRESC;
      _pyt:=ZA_NOTA.ZA_TEST;
      _ank:=ZA_NOTA.ZA_TEST().ZA_ZEST;
      _odp:=ZA_NOTA.ODP='T';
      ZA_NOTAO.prefix(_ank,_pyt,_tresc);
      {? ZA_NOTAO.first()
      || {? _d
      || {? ZA_NOTAO.TRUE='T' & _odp
         || _true:=1
         |? ZA_NOTAO.TRUE='N' & _odp
            || _blad:=1
         |? ZA_NOTAO.TRUE='T' & ~_odp
            || _blad:=1
            ?}
         || {? _odp & ZA_NOTAO.ODPT<>0
            || _pkt+=ZA_NOTAO.ODPT
            |? _odp & ZA_NOTAO.ODPT=0
            || _blad:=1
            ?}
         ?}
      ?};
      {? _blad
      || _true:=0
      ?};
      _loop:=ZA_NOTA.next()
   !}
?};
ZA_NOTA.cntx_pop();
:: punkty za całe pytanie
ZA_NOTA.prefix();
{? ZA_NOTA.seek(_a)
|| ZA_NOTA.cntx_psh();
   ZA_NOTA.index(_ndx);
   ZA_NOTA.WARTOSC:=_wartosc;
   {? _d
   || {? _true
   || ZA_NOTA.PKT:=ZA_NOTA.ZA_TEST().PKT
   || ZA_NOTA.PKT:=0
      ?}
   ||
      {? ~_blad
      || ZA_NOTA.PKT:=_pkt
      || ZA_NOTA.PKT:=0
      ?}
   ?};
   ZA_NOTA.put();
   ZA_NOTA.cntx_pop()
?};
ZA_NOTA.ndx_drop(_ndx);
ZA_NOTAO.cntx_pop()


\insert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: tworzy formule dodajaca zapis do tabeli
::   WE: _a - alias do tabeli
::       _b - wykonanie blank: brak - nie wykonywane, liczba - wykonywane _a.blank(_b<>0)
::       _c - akronim pierwszego pola
::       ...
::       _n - akronim n-tego pola
::   WY: formula, ktorej wynikiem jest wywolanie metody add
:: UWAGA! poprawnosc argumentow wywolania nie jest weryfikowana
::  OLD: \insert/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(SYSLOG) || return("0") ?};

_loc:=(!_a='');
_tab:={? _loc || '_a' || !_a ?};
_fml:='{|'+_tab+'|!'+
      '_pfx:=cur_prfx;';
{? var_pres('_b')=type_of(0)
|| _fml+='blank('+$(_b<>0)+');'
?};
{? _<=2
|| {! _ndx:=1.._a.fld_num
   |! _arg:=$(_ndx+_loc);
      _fml+='{?var_pres(\'_['+_arg+']\')>0'+
            '||'+_a.fld_acr(_ndx)+':=_['+_arg+']'+
            '?};'
   !}
|| {! _arg:=3.._
   |! _ndx:=$(_arg-2+_loc);
      _fml+='{?var_pres(\'_['+_ndx+']\')>0'+
            '||'+_[_arg]+':=_['+_ndx+']'+
            '?};'
   !}
?};
_fml+='_res:=add;'+
      '($("_a.prefix("+_pfx+")"))('+_tab+');'+
      '_res|}';
$_fml


\ank_excel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła przygotowująca tabelę agregującą formularze i odpowiedzi ze wskazanej ankiety.
::   WE: _a - wskazanie na ankietę
:: ~OST: INSYSEXEC
::  OLD: \za_zest_excel/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_msg:=no_msg(1);
_wykonaj:=sql('select * from ZA_FORM join SLO_KOD where ZA_FORM.ZA_ZEST=\':_a\' and SLO_KOD.KOD=\'Z\'',$_a);
_forms:=sql('select * from ZA_FORM where ZA_FORM.ZA_ZEST=\':_a\'',$_a);

{? ~_wykonaj.size() & _forms.size()
|| FUN.info('Ankieta nie zawiera żadnych zamkniętych formularzy, wykonanie zestawienia niemożliwe.'@);
   return(0)
|? ~_forms.size()
|| FUN.info('Ankieta nie zawiera żadnych formularzy, wykonanie zestawienia niemożliwe.'@);
   return(0)
?};

_anonim:=ZA_ZEST.ANONIM;
_test:=ZA_ZEST.TYP().KOD='T';
_tab:=$('tab_tmp(1,'+'\'ID\',\'STRING[50]\',\'Indeks\'');
::tworzymy tabelę tymczasową do której zbierzemy informacje do zestawienia
ZA_TEST.cntx_psh();
ZA_TEST.index('NUMER');
ZA_TEST.prefix(_a);
_lp:=2;
_loop:=ZA_TEST.first();
_zn:=$255;
_dl:='\',\'STRING['+_zn+']\',\'';
_dl_kto:='\',\'STRING['+$100+']\',\'';
_tab+=',\'FORM'+_dl_kto+'\Wypełniający \'';
{!
|? _loop
|! _zn:=0;
   _kod:=ZA_TEST.RODZ().KOD;
   {? _kod='J' | _kod='W' || _zn:=$150 || _zn:=$255 ?};
   _typ:=ZA_TEST.ZA_ZEST().TYP().KOD;
   _dl:='\',\'STRING['+_zn+']\',\'';
   {? _kod<>'' | ZA_TEST.ZZ_MET<>null()
   || _lp+=1;
      _tab+=',\'P'+$_lp+_dl+'\Pytanie \''+'\''+ZA_TEST.INDEKS+'\''
   ?};
   _loop:=ZA_TEST.next()
!};
ZA_TEST.cntx_pop();
{? var_pres('__zes')>100 || obj_del(__zes) ?};
__zes:=($(_tab+')'))();

_error:=errno();
{? _error=357
|| FUN.info('Wskazana ankieta jest zbyt obszerna, żeby utworzyć zestawienie na jej podstawie.'@);
   return(0)
?};
:: tabelka z legendą dotyczącą pytań i prawidłowych odpowiedzi (tylko dla testów, pytania zamknięte)
_pytania:=tab_tmp(1,
   'REF','STRING[16]','Ref pytania',
   'TRESC','STRING[255]','Treść pytania',
   'ODP','STRING[255]','Prawidłowe odpowiedzi'
);

::wypełniamy utworzoną tabelę na podstawie wskazanej ankiety i wypełnionych formularzy
ZA_FORM.cntx_psh();
ZA_FORM.index('ZA_ZEST');
ZA_FORM.prefix(_a);
ZA_NOTA.cntx_psh();
ZA_NOTA.index('ZA_NOTA');
_licz:=2;
{? ZA_FORM.first()
|| ZA_NOTA.prefix(ZA_FORM.ref(),0);
   __zes.blank();
   __zes.ID:='';
   {? _test
   || __zes.FORM:='Wypełniający'
   || {? _anonim='N'
      || __zes.FORM:='Wypełniający'
      || __zes.FORM:='Formularz o identyfikatorze'
      ?}
   ?};
   _loop:=ZA_NOTA.first();
   {!
   |? _loop
   |! _licz+=1;
      _tresc:=ZA_NOTA.TRESC;
      __zes[_licz]:=_tresc;
::    odpisujemy pytania do tabelki pomocniczej
      {? ZA_ZEST.TYP().KOD='T' & ZA_NOTA.ZA_TEST().RODZ().KOD<>'O'
      || _pytania.REF:=$ZA_NOTA.ZA_TEST;
         _pytania.TRESC:=ZA_NOTA.TRESC;
         _pytania.add()
      ?};
      _loop:=ZA_NOTA.next()
   !};
   __zes.add()
?};

{? ZA_ZEST.TYP().KOD='T'
|| ZA_NOTAO.cntx_psh();
   ZA_NOTAO.index('NUMER');
::uzupełniamy tabelkę z poprawnymi odpowiedziami
   _loop:=_pytania.first();
   {!
   |? _loop
   |! ZA_NOTAO.prefix(BIT.sqlint(_pytania.REF));
      _loop:=ZA_NOTAO.first();
      _cut:=0;
      {!
      |? _loop
      |! {? ZA_NOTAO.TRUE='T' | ZA_NOTAO.ODPT>0
         || {? ZA_NOTAO.ZA_TEST().RODZ().KOD='J'
            || _pytania.ODP+=ZA_NOTAO.TRESC
            |? ZA_NOTAO.ZA_TEST().RODZ().KOD='W'
            || _pytania.ODP+=ZA_NOTAO.TRESC+'; ';
               _cut:=1
            ?}
         ?};
         _loop:=ZA_NOTAO.next()
      !};
      {? _cut
      || _pytania.ODP:=_pytania.ODP-2
      ?};
      _pytania.put();
      _loop:=_pytania.next()
   !};
   ZA_NOTAO.cntx_pop()
?};

::wypełniamy utworzoną tabelę na podstawie wskazanej ankiety i wypełnionych formularzy
_ile:=0;
_odp:='';
_wartosc:='';
_loop:=ZA_FORM.first();
{!
|? _loop
|! {? ZA_FORM.SLO_KOD().KOD='Z'
   || _licz:=2;
      {? _anonim='N'
      || ZA_FORM.ZZ_KTO();
         P.cntx_psh();
         P.index('ZZ_DOK');
         P.prefix(ref_name(ZZ_OSOBA.ZZ_LINK),ZZ_OSOBA.ZZ_LINK);
         {? P.first()
         || _teczka:=P.T
         || _teczka:=''
         ?};
         P.cntx_pop();
         __zes.FORM:=ZA_FORM.ZZ_KTO().NAZWISKO+' '+ZA_FORM.ZZ_KTO().PIERWSZE+' (Nr teczki: '+gsub(_teczka,' ','')+')'
      || __zes.FORM:=ZA_FORM.ID
      ?};
      __zes.add();
      ZA_NOTA.prefix(ZA_FORM.ref(),0);
      _loop:=ZA_NOTA.first();
      {!
      |? _loop
      |! _licz+=1;
         _wybor:=ZA_NOTA.ZA_TEST().RODZ().KOD;
         _ref:=ZA_NOTA.ref();
         {? ZA_NOTA.ZA_TEST().ZZ_MET().RODZAJ='S' | ZA_NOTA.ZA_TEST().ZZ_MET=null & _wybor<>'O'
         || ZA_NOTA.cntx_psh();
            ZA_NOTA.prefix(ZA_FORM.ref(),_ref);
            _loop:=ZA_NOTA.first();
            {!
            |? _loop
            |! {? ZA_NOTA.ODP='T'
               || _wartosc:=ZA_NOTA.TRESC;
                  _odp+=_wartosc+'; '
               ?};
               _loop:=ZA_NOTA.next()
            !};
            ZA_NOTA.cntx_pop()
         || ZA_NOTA.memo_get(,'NOTA');
            _txt:=ZA_NOTA.memo_txt(,1,'NOTA');
            _odp:=_txt
         ?};
         __zes[_licz]:={? _wybor='J' | _wybor='W' || _odp-2 || _odp ?};
         _odp:='';
         _loop:=ZA_NOTA.next()
      !};
      __zes.put()
   ?};
   _loop:=ZA_FORM.next()
!};
ZA_FORM.cntx_pop();
ZA_NOTA.cntx_pop();

::deklaracja klasy
exec('init','#excel');
:: zmienna _inDevice dla jTerm ma wartość 1
_inDevice:=exec('cli_functions','#system');
:przypisujemy obiekt klasy EXCEL do zmiennej globalnej
{? var_pres('__excel')>100 || obj_del(__excel) ?};
{? __develop
|| __excel:=obj_new(@.Class.EXCEL)
|| __excel:=obj_new(@.CLASS.EXCEL)
?};
::przekazujemy bufor tabeli z zestawieniem do obiektu
__excel.SetTab(__zes);
::ustawiamy domyślne formatowanie zestawienia
__excel.CellAddr('A1');
__excel.AutoSize(1);
__excel.Styling(1);
__excel.Title('Zestawienie: '+ZA_ZEST.NAZWA);
__excel.TabFldH('REF_, ID');
::odpalamy Excela z przygotowanym zestawieniem
_szablon:=__excel.Create();
__excel.SetTab(_pytania,'TRESC,ODP');
{? ZA_ZEST.TYP().KOD='T' & _pytania.size()
|| __excel.Header(1,0)
?};
__excel.RowNr(__zes.size+5);
__excel.Template(_szablon,1);

_zal:=__excel.Create();
{? fexists(_zal,1)
|| ZZ_DOKZ.cntx_psh;
   ZZ_DOKZ.index('ISD');
   ZZ_DOKZ.prefix(ref_name(ZA_ZEST.ZZ_DOK),ZA_ZEST.ZZ_DOK);
   _exist:=0;
   {? ZZ_DOKZ.first()
   || _exist:=1
   ?};
   _typ:=exec('typzal_rep','phr_dane',ZA_ZEST,1);
   {? _exist=1
   || exec('get_dokz','phr_dane',ZA_ZEST,_typ.UD_SKL,'Zestawienie z ankiety',,1);
      ZZ_DOKZ.ZZ_DOK();
      ZZ_DOK.AUTOR:=userdata;
      ZZ_DOK.TYTUL:='Zestawienie z ankiety';
      ZZ_DOK.DATA:=date;
      ZZ_DOK.GODZ:=time;
      ZZ_DOK.put()
   || exec('get_dokz','phr_dane',ZA_ZEST,_typ.UD_SKL,'Zestawienie z ankiety',,0)
   ?};
   {? ZZ_DOKZ.bl_put('PLIK',_zal,1,,'Zestawienie.xls',1)
   || ZZ_DOKZ.bl_file('PLIK',1);
      _exFile:=fopen(_zal,'r',1);
      {? _exFile
      || fclose(_exFile);
         {? _inDevice
         || sys_exec(_zal,'Otwieranie pliku...',1)
         || dlg_save(_zal,1)
         ?}
      ?}
   ?};
   ZZ_DOKZ.cntx_pop
?};
no_msg(_msg);
{? _inDevice
|| __excel.DelFiles()
?}


\ank_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Po akceptacji ankiety - wynik dla uczestnika szkolenia
::   WE: _a - wskazanie na formularz ankiety.
::----------------------------------------------------------------------------------------------------------------------
ZA_FORM.cntx_psh();
ZA_FORM.prefix();
{? ZA_FORM.seek(_a)
|| {? ZA_FORM.OCENA='T' & ZA_FORM.ZA_ZEST().TYP().KOD='T'
   || _szk_prac:=exec('dok2ref','phr_tab',ZA_FORM.ZZ_LINK);
      SZK_PRAC.cntx_psh();
      SZK_PRAC.prefix();
      {? SZK_PRAC.seek(_szk_prac)
      || SZK_PRAC.OCENA:=ZA_FORM.WYNIK;
         {? SZK_PRAC.OCENA>=SZK_PRAC.SZKOL().PROMOCJA
         || SZK_PRAC.ZALICZ:='T'
         ?};
         _przed:=TRIG_OFF.SZK_PRAC;
         TRIG_OFF.SZK_PRAC:='PUTB|';
         SZK_PRAC.put();
         TRIG_OFF.SZK_PRAC:=_przed
      ?};
      SZK_PRAC.cntx_pop()
   ?}
?};
ZA_FORM.cntx_pop()


\usun_nota
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Usuwa pytania i odpowiedzi zwiazane z formularzem ankiety.
::   WE: _a - wskazanie na formularz
::  OLD: \usun_nota/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTA.cntx_psh();
ZA_NOTA.index('ZA_NOTA');
ZA_NOTA.prefix(_a);
_loop:=ZA_NOTA.last();
{!
|? _loop
|! _dok:=ZA_NOTA.ZZ_DOK;
   _loop:=ZA_NOTA.del()
!};
ZA_NOTA.cntx_pop()


\ank_szk_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Generowanie formularzy ankiet dla szkolen
::  OLD: \ank_szk_po/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
_szk_ref:=exec('dok2ref','phr_tab',ZA_ZEST.ZZ_LINK);

SZK_PRAC.cntx_psh();
SZK_PRAC.index('SZK_PRAC');
SZK_PRAC.prefix(_szk_ref);

ZZ_OSOBA.cntx_psh();
ZZ_OSOBA.index('ZZ_LINK');
ZZ_OSOBA.prefix();

_loop:=SZK_PRAC.first();
{!
|? _loop
|! {? SZK_PRAC.OBECNY='T' &
      ~exec('za_form_jest','phr_dane',SZK_PRAC.ZZ_DOK,ZA_ZEST.ref)
   || SZK_PRAC.P();
      ZA_FORM.blank();
:     ankieta wlasciwa dla uczestnika szkolenia
      ZA_FORM.ZZ_LINK:=SZK_PRAC.ZZ_DOK;
      ZA_FORM.ZZ_KTO:=exec('czy_osoba','phr_dane',P,1);
      ZA_FORM.add()
   ?};
   _loop:=SZK_PRAC.next()
!};

ZZ_OSOBA.cntx_pop();
SZK_PRAC.cntx_pop()


\get_abc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Funkcja zwraca literę albafetu na podstawie przekazanego w parametrze numeru. Funkcja bazuje na współczesnyn
::       podstawowym alfabecie łacińskim.
::   WE: _a - numer
::   WY: odpowiednia litera alfabetu
::  OLD: \get_abc/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_abc:='abcdefghijklmnopqrstuvwxyz';
_minus:=_a-1;
_litera:=_minus-_abc;
_litera:=1+_litera;
_litera


\upgrade_pba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formula aktualizująca moduł badań ankietowych.
::----------------------------------------------------------------------------------------------------------------------
:: dodaje słowniki (o ile jeszcze nie powstały)
_typ_z:=exec('slo_typ','ext_slo','ZA_ZEST');
{? _typ_z<>null()
|| exec('kod_ref','ext_slo','ZA_ZEST','O','ocena');
   exec('kod_ref','ext_slo','ZA_ZEST','S','sondaż');
   exec('kod_ref','ext_slo','ZA_ZEST','T','test')
?};
_typ_t:=exec('slo_typ','ext_slo','ZA_TEST');
{? _typ_t<>null()
|| exec('kod_ref','ext_slo','ZA_TEST','J','jednokrotnego wyboru');
   exec('kod_ref','ext_slo','ZA_TEST','W','wielokrotnego wyboru');
   exec('kod_ref','ext_slo','ZA_TEST','O','otwarte')
?};
:: aktualizacja opisów ankiet
ZA_ZEST.clear();
ZA_ZEST.for_each("
   _put:=0;
   {? ZA_ZEST.WIDOK='' || ZA_ZEST.WIDOK:='N'; _put:=1 ?};
   {? ZA_ZEST.WER_A='' || ZA_ZEST.WER_A:='N'; _put:=1 ?};
   {? ZA_ZEST.TRYB='' || ZA_ZEST.TRYB:='N'; _put:=1 ?};
   {? ZA_ZEST.TYP=null() || ZA_ZEST.TYP:=exec('kod','ext_slo','ZA_ZEST','O'); _put:=1 ?};
   {? ZA_ZEST.ADN='' || ZA_ZEST.ADN:='N'; _put:=1 ?};
   {? _put
   || ZA_ZEST.put()
   ?}
",1);

:: aktualizacja pytań
ZA_TEST.clear();
ZA_TEST.for_each("
   _indeks:='';
   _put:=0;
   {? ZA_TEST.ZA_TEST
   || ZA_TEST.cntx_psh;
      ZA_TEST.prefix;
      {? ZA_TEST.seek(ZA_TEST.ZA_TEST,)
      || _indeks:=ZA_TEST.INDEKS
      ?};
      ZA_TEST.cntx_pop()
   ?};
   _ind:='';
   {? +$ZA_TEST.NUMER=2 | _indeks<>''
   || ZA_TEST.INDEKS:=_indeks+$ZA_TEST.NUMER+'.';
      _put:=1
   |? +$ZA_TEST.NUMER=1
   || _ind:='0';
      ZA_TEST.INDEKS:=_ind+_indeks+$ZA_TEST.NUMER+'.';
      _put:=1
   ?};

   {? ZA_TEST.ZZ_MET & ZA_TEST.ZZ_MET().RODZAJ='S' & ZA_TEST.RODZ=null()
   || ZA_TEST.RODZ:=exec('kod','ext_slo','ZA_TEST','J','jednokrotnego wyboru');
      _put:=1
   ?};

   {? _put
   || ZA_TEST.put()
   ?}
");

:: aktualizacja formularzy ankiet
ZA_FORM.clear();
ZA_FORM.for_each("
   _put:=0;
   {? ZA_FORM.Z='' || ZA_FORM.Z:='N'; _put:=1 ?};
   {? ZA_FORM.OCENA='' || ZA_FORM.OCENA:='N'; _put:=1 ?};
   {? _put
   || ZA_FORM.put()
   ?}
");

:: aktualizacja odpowiedzi
exec('init_bufs','phr_tab');
ZA_NOTA.clear();
ZA_NOTA.for_each("
   _put:=0;
   {? ZA_NOTA.TRESC='' || ZA_NOTA.TRESC:=ZA_NOTA.ZA_TEST().TRESC; _put:=1 ?};
   {? ZA_NOTA.TRUE='' || ZA_NOTA.TRUE:='N'; _put:=1 ?};
   {? ZA_NOTA.ODP='' || ZA_NOTA.ODP:='N'; _put:=1 ?};
   {? _put || ZA_NOTA.put() ?}
",1);

_nota:=sql(
   'select ZA_NOTA.REFERENCE as REF, ZZ_MET.KOD as MET, ZZ_MET.REFERENCE as MET_REF, ZA_NOTA.WARTOSC as VALUE '
   'from ZA_NOTA join '
   'ZA_TEST using(ZA_NOTA.ZA_TEST,ZA_TEST.REFERENCE) join '
   'ZZ_MET using(ZA_TEST.ZZ_MET,ZZ_MET.REFERENCE) '
   'where ZZ_MET.KOD<>\'OO\''
);

ZA_NOTA.prefix();
_ndx:=ZA_NOTA.ndx_tmp(,1,'ZA_FORM',,,'ZA_NOTA',,,'TRESC',,);
_ref:=null();
_pyt:=null();
_form:=null();
_size:=_nota.size();
_info:='Proszę czekać. Trwa konfigurowanie modułu ankiet...';
_count:=0;
_loop:=_nota.first();
{!
|? _loop
|! progress(100*(_count+=1)/_size,_info,FUN.TYT);

   {? ZA_NOTA.seek(_nota.REF,)
   || _ref:=ZA_NOTA.ref();
      _pyt:=ZA_NOTA.ZA_TEST;
      _dok:=ZA_NOTA.ZA_TEST().ZZ_DOK;
      _form:=ZA_NOTA.ZA_FORM;
      _parent:=ZA_NOTA.ZA_NOTA
   || _parent:=1
   ?};

   {? _parent=0
   || ZA_NOTA.cntx_psh();
      ZA_NOTA.index('ZA_NOTA');
      ZA_NOTA.prefix(_form,_ref);
      {? ~ZA_NOTA.first()
      || {? _nota.MET='KW'
         || ZZ_KOMPK.index('WARTOSC');
            ZZ_KOMPK.prefix(ref_name(_dok),_dok,null());
            {? ZZ_KOMPK.first()
            || {!
               |? ZA_NOTA.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTA);
                  ZA_NOTA.ZA_NOTA:=_ref;
                  ZA_NOTA.ZA_TEST:=_pyt;
                  ZA_NOTA.ZA_FORM:=_form;
                  {? _nota.VALUE=ZZ_KOMPK.WARTOSC
                  || ZA_NOTA.ODP:='T'
                  || ZA_NOTA.ODP:='N'
                  ?};
                  ZA_NOTA.TRESC:=ZZ_KOMPK.KOD+' '+ZZ_KOMPK.OPIS;
                  ZA_NOTA.WARTOSC:=ZZ_KOMPK.WARTOSC;
                  ZA_NOTA.add();
                  ZZ_KOMPK.next()
               !}
            ?}
         |? _nota.MET='SP'
         || ZZ_KOMPS.index('WARTOSC');
            ZZ_KOMPS.prefix(ref_name(_dok),_dok,null());
            {? ZZ_KOMPS.first()
            || {!
               |? ZA_NOTA.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTA);
                  ZA_NOTA.ZA_NOTA:=_ref;
                  ZA_NOTA.ZA_TEST:=_pyt;
                  ZA_NOTA.ZA_FORM:=_form;
                  {? _nota.VALUE<>0 & _nota.VALUE=ZZ_KOMPS.WARTOSC
                  || ZA_NOTA.ODP:='T'
                  || ZA_NOTA.ODP:='N'
                  ?};
                  ZA_NOTA.TRESC:=$ZZ_KOMPS.WARTOSC+' - '+ZZ_KOMPS.OPIS;
                  ZA_NOTA.WARTOSC:=ZZ_KOMPS.WARTOSC;
                  ZA_NOTA.add();
                  ZZ_KOMPS.next()
               !}
            ?}
         |? _nota.MET='WB'
         || exec('zz_komzb_fill','phr_widok',_dok,null());
            {? ZZ_KOMPZ.first()
            || {! _wartosc:=ZZ_KOMPZ.MIN..ZZ_KOMPZ.MAKS
               |! ZA_NOTA.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTA);
                  ZA_NOTA.ZA_NOTA:=_ref;
                  ZA_NOTA.ZA_TEST:=_pyt;
                  ZA_NOTA.ZA_FORM:=_form;
                  {? _nota.VALUE<>0 & _nota.VALUE=_wartosc
                  || ZA_NOTA.ODP:='T'
                  || ZA_NOTA.ODP:='N'
                  ?};
                  ZA_NOTA.TRESC:=STR.słownie(_wartosc);
                  ZA_NOTA.WARTOSC:=_wartosc;
                  ZA_NOTA.add()
               !}
            ?}
         ?};
         ZA_NOTA.cntx_pop();
         _loop:=_nota.next()
      || ZA_NOTA.cntx_pop();
         _loop:=_nota.next()
      ?}
   || _loop:=_nota.next()
   ?}
!};
prgs_clr();
ZA_NOTA.ndx_drop(_ndx);

::aktualizacja szkoleń
_przed:=TRIG_OFF.SZK_OPIS;
:: wyłączamy trigger sprawdzający poprawność danych (chodzi o weryfikację dat dla starszych szkoleń)
TRIG_OFF.SZK_OPIS:='CHK|';
SZK_OPIS.clear();
SZK_OPIS.for_each("
   {? SZK_OPIS.TRYB='' || SZK_OPIS.TRYB:='T'; SZK_OPIS.put() ?}
");
:: przywracamy stan zmiennej TRIG_OFF.SZK_OPIS
TRIG_OFF.SZK_OPIS:=_przed;
1


\nota_count
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła zliczająca ilość odpowiedzi dla ankiet typu sondaz i test.
::   WE: _a - wskazanie na odpowiedź
::       _b - tresc pytania
::  OLD: \nota_count/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
:: wszystkie odpowiedzi
_nota:=sql(
   'select count(*) as LICZBA from ZA_NOTA join '
   'ZA_FORM using(ZA_NOTA.ZA_FORM,ZA_FORM.REFERENCE) join '
   'ZA_TEST using(ZA_NOTA.ZA_TEST,ZA_TEST.REFERENCE) join '
   'SLO_KOD using(ZA_FORM.SLO_KOD,SLO_KOD.REFERENCE) '
   'where ZA_NOTA.ZA_NOTA<>0 and ZA_NOTA.ODP=\'T\' and SLO_KOD.KOD=\'Z\' and '
   'ZA_NOTA.ZA_NOTAO=\':_a\''
,_a);
_nota.LICZBA


\notaproc_count
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła zliczająca procent odpowiedzi dla ankiet typu sondaz i test.
::   WE: _a - wskazanie na ankiete
::  OLD: \notaproc_count/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
   _nota:=sql(
      'select count(*) as LICZBA from ZA_NOTA join '
      'ZA_FORM using(ZA_NOTA.ZA_FORM,ZA_FORM.REFERENCE) join '
      'ZA_TEST using(ZA_NOTA.ZA_TEST,ZA_TEST.REFERENCE) join '
      'SLO_KOD using(ZA_FORM.SLO_KOD,SLO_KOD.REFERENCE) '
      'where ZA_NOTA.ZA_NOTA<>0 and ZA_NOTA.ODP=\'T\' and SLO_KOD.KOD=\'Z\' and '
      'ZA_TEST.ZA_ZEST=\':_a\' and ZA_NOTA.ZA_TEST=\':_b\''
,$_a,_b);
_ret:=_nota.LICZBA;
_ret


\form_komp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła sprawdza czy dla danego bytu wykorzystywany jest formularz z oceną kompetencji czy nie.
::   WE: _a - wskazanie na dokument oceny całkowitej.
::   WY: 1/0 - jest ocena kompetencji/nie ma oceny kompetencji.
::  OLD: \form_komp/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_ndx:=ZF_WYK.ndx_tmp(,,'ZZ_LINK',,,'OK',,);
ZF_WYK.cntx_psh();
ZF_WYK.index(_ndx);
ZF_WYK.prefix(_a,'T');
{? ZF_WYK.first()
|| _oc_komp:=sql(
      'select * from ZF_POZ join ZF_SKL where ZF_POZ.ZF_DEF=\':_a\' and ZF_SKL.KOD=\'OK\'',
   $ZF_WYK.ZF_DEF);
   {? _oc_komp.first()
   || _ret:=1
   ?}
?};
ZF_WYK.cntx_pop();
ZF_WYK.ndx_drop(_ndx);
_ret


\akt_prog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła aktualizuje próg zdawalności egzaminu po szkoleniu po zmianie wartości progu przy ankiecie
::       i w drugą stronę (określane parametrem)
::   WE: _a - 1/0 [edycja szkolenia/edycja ankiety]
::       _b - wartosc progu
::  OLD: \akt_prog/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| _ndx:=ZA_ZEST.ndx_tmp(,,'ZZ_LINK',,,'TYP','KOD',);
   ZA_ZEST.cntx_psh();
   ZA_ZEST.index(_ndx);
   ZA_ZEST.prefix(SZK_OPIS.ZZ_DOK,'T');
   {? ZA_ZEST.first() & ZA_ZEST.SLO_KOD().KOD='P'
   || ZA_ZEST.PROG:=_b;
      ZA_ZEST.put()
   ?};
   ZA_ZEST.ndx_drop(_ndx);
   ZA_ZEST.cntx_pop()
|| SZK_OPIS.cntx_psh();
   SZK_OPIS.index('ZZ_DOK');
   SZK_OPIS.prefix(ref_name(ZA_ZEST.ZZ_LINK),ZA_ZEST.ZZ_LINK);
   {? SZK_OPIS.first()
   || SZK_OPIS.PROMOCJA:=_b;
      SZK_OPIS.put()
   ?};
   SZK_OPIS.cntx_pop()
?}


\ank_dostep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Formuła sprawdza, czy wskazana osoba ma dostęp do ankiety i podglądu formularza.
::   WE: _a - wskazanie na pesel zalogowanej osoby
::       _b - wskazanie na ankietę
::       _c - wskazana rola
::  OLD: \akt_dostep/zz_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('set_env','ank_por')
|| return(0)
?};
ZA_ZEST.cntx_psh();
ZA_ZEST.prefix();
ZZ_DOK.cntx_psh();
_typ:='';
_pkt:='';
_rola:=_c;

ZZ_DOK.prefix();
{? ZA_ZEST.seek(BIT.sqlint(_b),)
|| {? exec('seek_dok','phr_tab',ZA_ZEST.ZZ_LINK)
   || _klasa:=ZZ_DOK.KLASA;
      _dok:=ZZ_DOK.ref()
   || _klasa:=''
   ?};
   _typ:=ZA_ZEST.TYP().KOD;
   _widok:=ZA_ZEST.WIDOK;
   {? _klasa='SZK_OPIS'
   || SZK_OPIS.cntx_psh();
      SZK_OPIS.index('ZZ_DOK');
      SZK_OPIS.prefix(ref_name(_dok),_dok);
      {? SZK_OPIS.first()
      || _pkt:=SZK_OPIS.TRYB
      ?};
      SZK_OPIS.cntx_pop()
   ?}
?};
ZZ_DOK.cntx_pop();
ZA_ZEST.cntx_pop();

_ret:=0;
{? _typ='T'
|| _wyp:=sql(
         'select ZA_FORM.ZZ_KTO, Z.REFERENCE from ZA_FORM join '+
         'ZA_ZEST as Z using(ZA_FORM.ZA_ZEST,Z.REFERENCE) join '+
         'ZZ_OSOBA as KTO using(ZA_FORM.ZZ_KTO,KTO.REFERENCE) '+
         'where KTO.PESEL=\':_a\' and Z.REFERENCE=\':_b\''
   ,_a,_b);
   _oc:=sql(
         'select ZA_FORM.WER, Z.REFERENCE from ZA_FORM join '+
         'ZA_ZEST as Z using(ZA_FORM.ZA_ZEST,Z.REFERENCE) join '+
         'ZZ_OSOBA as WER using(ZA_FORM.WER,WER.REFERENCE) '+
         'where WER.PESEL=\':_a\' and Z.REFERENCE=\':_b\''
      ,_a,_b)
|? _typ<>'T'
|| _jest:=sql(
      'select KTO.REFERENCE, Z.REFERENCE from ZA_FORM join '+
      'ZA_ZEST as Z using(ZA_FORM.ZA_ZEST,Z.REFERENCE) join '+
      'ZZ_OSOBA as KTO using(ZA_FORM.ZZ_KTO,KTO.REFERENCE) '+
      'where (KTO.PESEL=\':_a\' and Z.REFERENCE=\':_b\')'
   ,_a,_b);
   _wyp:=sql('select SLO_NAZ.NAZWA as WYNIK from SLO_NAZ where 1=0');
   _oc:=sql('select SLO_NAZ.NAZWA as WYNIK from SLO_NAZ where 1=0')
?};


{? _klasa='SZK_OPIS' & _widok='T' & ~_wyp.size() & ~_oc.size()
|| _kto:=sql('
      select
         P.REFERENCE as P_SQL
      from
         ZA_FORM join
         ZA_ZEST join
         ZZ_OSOBA using(ZA_FORM.ZZ_KTO,ZZ_OSOBA.REFERENCE) join
         P using(ZZ_OSOBA.ZZ_LINK,P.ZZ_DOK) where ZA_ZEST.REFERENCE=\':_a\'',
      _b
   );
   _common:=sql('select P_SQL from :_a where P_SQL in (select P_SQL from :_b)',_kto,_d)
|| _common:=sql('select SLO_NAZ.NAZWA as WYNIK from SLO_NAZ where 1=0')
?};

{? _typ='T'
|| {? _common.size()
   || _ret:=3
   |? _wyp.size()
   || _ret:=1
   |? _oc.size()
   || _ret:=2
   ?}
|| {? _jest.size()
   || _ret:=1
   ?}
?};
_ret


\copy_answer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Kopiuje odpowiedzi dla ankiet typu test i sondaz.
::   WE: _a - wskazanie na poprzedniego wlasciciela (ZA_TEST.ref)
::       _b - wskazanie na nowego wlasciciela (ZA_TEST.ref)
::----------------------------------------------------------------------------------------------------------------------
_ndx:=ZA_NOTAO.ndx_tmp(,,'ZA_TEST',,,'NUMER',,);
ZA_NOTAO.cntx_psh();
ZA_NOTAO.index(_ndx);
ZA_NOTAO.prefix(_a);
_loop:=ZA_NOTAO.first();
{!
|? _loop
|! _tmp_tresc:=ZA_NOTAO.TRESC;
   _tmp_true:=ZA_NOTAO.TRUE;
   _tmp_pkt:=ZA_NOTAO.ODPT;
   _tmp_lp:=ZA_NOTAO.NUMER;
:: dodajemy odpowiedzi do pytania w nowej ankiecie
   ZA_NOTAO.cntx_psh();
   ZA_NOTAO.index(_ndx);
   ZA_NOTAO.prefix(_b);
   ZA_NOTAO.ZZ_DOK:=exec('add_dok','phr_tab',ZA_NOTAO);
   ZA_NOTAO.ZA_TEST:=_b;
   ZA_NOTAO.TRUE:=_tmp_true;
   ZA_NOTAO.TRESC:=_tmp_tresc;
   ZA_NOTAO.ODPT:=_tmp_pkt;
   ZA_NOTAO.NUMER:=_tmp_lp;
   ZA_NOTAO.add();
   ZA_NOTAO.cntx_pop();
   _loop:=ZA_NOTAO.next()
!};
ZA_NOTAO.ndx_drop(_ndx);
ZA_NOTAO.cntx_pop()


\usun_notaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [19.22]
:: OPIS: Usuwa wyniki ankiet typu test i sondaz zwiazane z ankieta.
::   WE: _a - wskazanie na ankiete
::----------------------------------------------------------------------------------------------------------------------
ZA_NOTAW.cntx_psh();
ZA_NOTAW.index('TREE');
ZA_NOTAW.prefix(_a);
_loop:=ZA_NOTAW.last();
{!
|? _loop
|! _dok:=ZA_NOTAW.ZZ_DOK;
   _loop:=ZA_NOTAW.del()
!};
ZA_NOTAW.cntx_pop()


\za_form_jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Sprawdza, czy dla danego "bytu" i ankiety wygenerowano formularz
::   WE: _a - wskazanie na dokument kadrowy
::       _b - wskazanie na ankiete
::   WY: 0/1 - brak formularza / formularz istnieje
::  OLD: \ank_form_jest/zz_data.fml
::----------------------------------------------------------------------------------------------------------------------
ZA_FORM.cntx_psh;
ZA_FORM.index('ZZ_LINK');
ZA_FORM.prefix(ref_name(_a),_a);
_jest:=ZA_FORM.find_key(_b);
ZA_FORM.cntx_pop;
_jest


\desc_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Tworzy i inicjalizuje tablicę nazwaną dla elementów opisu czynności należących do obszarów PBA, POC.
::   WE:
::   WY: tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_tab:=obj_new(
:: Czy tablica zawiera dane
   'ZAW_DANE',
:: Nazwa programu ocen
   'NAZWA',
:: Rodzaj programu ocen
   'RODZAJ',
:: Sesja ocen - okres od
   'OKRES_OD',
:: Sesja ocen - okres do
   'OKRES_DO',
:: Sesja ocen - plan do
   'PLAN_DO',
:: Dane osobowe - nazwisko
   'ZZ_NAZWISKO',
:: Dane osobowe - pierwsze
   'ZZ_PIERWSZE',
:: Dane osobowe - PESEL
   'ZZ_PESEL'
);
:: inicjalizacja tablicy
{! _ii..obj_len(_tab) |! _tab[_ii]:='' !};
_tab

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 535da8820404b71b6a7c6ed58ca907bc83d2086c4ad16498a75f2e56f7d2f60996b14ec940f821489bad2bb8215d039cbffd6a48845b20ac77ad293d4da60b073537c598dd6f179821498a222a673e23088d5452e324f83a0148a35afb053b678f59154311cd3716a54e025e63e4fb810628c4f22919697ad91002a0cb4ed374
