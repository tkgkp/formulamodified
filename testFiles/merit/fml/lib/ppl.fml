:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppl.fml
:: Utworzony: 26.11.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły oraz obszary robocze dziedziny PPL.
::======================================================================================================================


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła inicjująca dla dziedziny PPL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
BPMN.SYM_DOM:='PPL';
BPMN.KK_DOM:='PPL';
exec('czytaj','#stalesys',,KST,KST_PAR,XINFO,FINFO);

:: Przeglądanie osób (czynność z dziedziny PKD), może odbywać się na rzecz procesu związanego np. z logistyką.
:: Tylko jawne wskazanie w procesie pozwala na jego identyfikację jako "personelowego".
:: Zmienna poniżej służy optymalizacji dostępu do tej informacji.
{? var_pres('__PERSONEL')<>type_of(0)
|| __PERSONEL:=0
?};

:: Zmienna optymalizująca dostęp do parametru 188.
__PAR188:=PAR_SKID.get(188)='T';

exec('__F_ZATR','object');
exec('__WND','object');
exec('__KAL','object');
exec('__RUB','object');
exec('FUNKCJE','object');
exec('RB','object');
exec('__STALE','object');
exec('MASK','object');
exec('PODPIS','object');
exec('Icon','#object');

:: obsługa dedykowanych pól zależnych od dziedziny produktu
_wyd_f3:="exec('ud_def_symbol_f3','schemat','PODZORG',,'PPL')";
_wyd_ae:="exec('edit_var_h_wyd_ae','pracownik','PPL')";

EDIT_VAR.fld_fml('H_WYD','F3',_wyd_f3);
EDIT_VAR.fld_fml('H_WYD','AFTER_EDIT',_wyd_ae);

:: obiekt do wyliczenia zwolnienia z przychodu
exec('__ZW_PRZ','object');

~~


\dsk_callback_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa przycisku "Wybierz listę" w obszarze PPL_PLL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('select','lista_plac','PPL',__PARSES.getVal('F_ZATR').KOD,,__PARSES.getVal('ListaPłac').LT);
{? _ret.OK
|| __PARSES.setACF(0);
   _args:=__PARSES.args('ListaPłac');
   _args.REF:=O.ref();
   __PARSES.setVal('ListaPłac',_args);
   __PARSES.setACF(1);

   params_set(_par:=params_get());

   exec('wybierz','lista_plac',O.ref(),1);
   exec('dsk_set_callback','pkd','listaTXT@panel');

   AreaTitle.setTitle();

   _act:=_par.cfg.nav.main;
   _dis:={? _act='PPL_PLL' || 'PPL_RST' || 'PPL_PLL' ?};

   grp_disp(P,_dis,0,0);
   win_activate(_act)
?}


\ppl_pll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Główna formuła obszaru roboczego PPL_PLL - Listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: warunek podstawowy działania
_ps:=__PARSES.getVal('F_ZATR');
{? _ps.KOD='Z'
|| FUN.emsg('Obszar niedostępny dla formy współpracy "%1".'@[_ps.OPIS]);
   return()
?};

exec('init','ppl');
__PERSONEL:=1;

_id:='ListaPłac';
_ref:=__PARSES.getVal(_id).REF;
{? _ref=null()
|| {? __PARSES.editPar(_id)
   || _ref:=__PARSES.getVal(_id).REF
   || return()
   ?}
?};

O.cntx_psh();
O.clear();
{? O.seek(_ref)
|| exec('wybierz','lista_plac',O.ref(),1)
|| FUN.emsg('Lista płac nie została określona.'@);
   O.cntx_pop();
   return()
?};

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();

{? ~exec('domyslny','schemat','PODZORG')
|| UD_SCH.cntx_pop();
   UD_TYP.cntx_pop();
   O.cntx_pop();
   return()
?};

:: udostępnij akcje Zamknij, Otwórz, ... w oknie wyboru listy płac
:: podczas edycji parametrów pracy w widoku uproszczonym obszaru
PARSES.fld_fml('O','F3',"params_exec('o','parses','F3','')");

H.cntx_psh();
H.use('_hist');
H_UM.cntx_psh();
exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));

_loop:=1;
{!
|? _loop
|!
:: parametryzacja widoku obszaru roboczego
   _cfg:=exec('ppl_pll_config','ppl');
   params_set(
      'cfg',_cfg,
      'lsw',exec('lsw_params','lista_wyr')
   );
   P.cntx_psh();
   P.win_sel(_cfg.window);
   ($_cfg.prolog)();
   AreaTitle.setTabWin(P,_cfg.window);
   AreaTitle.setTitle();
   _loop:=P.select();
   ($_cfg.epilog)();
   P.cntx_pop();
   P.win_del(_cfg.window);
   obj_del(_cfg);

:: ustal kontekst po jego odtworzeniu w epilogu
   _ref:=__PARSES.getVal('ListaPłac').REF;
   {? _ref<>null
   || exec('wybierz','lista_plac',_ref,1)
   || FUN.emsg('Lista płac nie została określona.'@);
      _loop:=0
   ?}
!};

H_UM.cntx_pop();
H.cntx_pop();
exec('otworz_h_um','pracownik');

UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
O.cntx_pop();
~~


\ppl_pll_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Główna formuła - Zakres danych (płace).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? __PARSES.editPar('JednostkaOrganizacyjna','ZakresDanych','ListaPłac')
:: podano wszystkie wymagane do działania parametry
|| _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');

   _ref:=__PARSES.getVal('ListaPłac').REF;
   exec('wybierz','lista_plac',_ref,1);

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')

|? __PARSES.getVal('ListaPłac').REF=null
:: lista nie jest dostępna
|| FUNKCJE.ZAMKLIST()
?}


\ppl_pll_akcje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Główna formuła - Operacje grupowe (płace).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

: Przelewy
_sym:='HBN_PRZ_XXXX';
_set.add_grp('Przelewy'@,_sym);
: Przelewy wynagrodzenia
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DLIS','Przelewy wynagrodzenia'@,
   'Utworzenie przelewów wynagrodzenia'@,,
   "exec('hbn_prz_dlis','ppl',__PARSES.getVal('ListaPłac').REF); ''",,
   _sym
);
: Przelewy wybranych składników
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DWSK','Przelewy wybranych składników'@,
   'Utworzenie przelewów wybranych składników'@,,
   "exec('hbn_prz_dwsk','ppl',__PARSES.getVal('ListaPłac').REF); ''",,
   _sym
);
: Przelewy komornicze
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DLKR','Przelewy komornicze'@,
   'Utworzenie przelewów komorniczych'@,,
   "exec('hbn_prz_dlkr','ppl',__PARSES.getVal('ListaPłac').REF); ''",,
   _sym
);
exec('xxx_grp_act','personel',_set,'PPL_GRP_ASWI','Świadczenia socjalne'@,
   'Rejestracja świadczeń z ZFŚS i pozostałych'@);
exec('xxx_grp_act','personel',_set,'PPL_GRP_ALSW','Składniki listy'@,
   'Grupowe wprowadzanie składników listy'@);
exec('xxx_grp_act','personel',_set,'PPL_GRP_ASOK','Składniki okresowe'@,
   'Import / Aktualizacja składników okresowych'@);
: Przelewy
_sym:='PREMIE';
_set.add_grp('Premie'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_GRP_PMBD','Budżety premii uznaniowych'@,
   'Rejestracja budżetów premii uznaniowych'@,,,,_sym);
exec('xxx_grp_act','personel',_set,'PPL_GRP_GRPM','Premie uznaniowe'@,
   'Wprowadzanie premii miesięcznych przydzielanych przez dysponentów'@,,,,_sym);
exec('xxx_grp_act','personel',_set,'PPL_GRP_ONPR','Premia za publikacje'@,
   'Naliczanie premii za publikacje naukowe'@,,,,_sym);
: Podział kosztów
_sym:='PODZIAL_KOSZTOW';
_set.add_grp('Podział kosztów'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_GRP_APKO','Redagowanie podziału kosztów'@,
   'Redagowanie podziału kosztów'@,,,,_sym);
exec('xxx_grp_act','personel',_set,'PPL_PLL_RPPK','Przygotowanie podziału kosztów'@,
   'Przygotowanie podziału kosztów dla wybranej listy płac'@,'O.uidref()',,,_sym);
: Tworzenie zestawień zbiorczych i zestawień składników bieżącej listy płac
: Zestawienia
_sym:='ZESTAWIENIA';
_set.add_grp('Zestawienia'@,_sym);
: zbiorówki
exec('xxx_grp_act','personel',_set,'PPL_ZES_RZEZ','Zestawienia zbiorcze'@,
   'Tworzenie zestawień zbiorczych'@,,
   "exec('ppl_zes_rzez','ppl',O.ref()); ''",,
   _sym
);
: zestawienia
exec('xxx_grp_act','personel',_set,'PPL_ZES_RZEZ','Zestawienia składników'@,
   'Tworzenie zestawień składników'@,,
   "exec('skladniki','zbiorowk',O.ref()); ''",,
   _sym
);
exec('xxx_grp_act','personel',_set,'PPL_ZES_EXSO','Eksport danych do SODiR'@,
   'Eksport danych do SODiR'@);
: Tworzenie załączników
_set.add_fml('Generowanie załączników',"exec('generowanie_zal','ppl'); ''");
: Nieobecności bez kalendarza
exec('xxx_grp_act','personel',_set,'PKD_EZK_ORNN','Nieobecności bez kalendarza'@,
   'Przeglądanie nieobecności bez kalendarza'@,,
   "exec('nbk','nieobecnosc','PPL'); ''"
);
{? exec('lic','#b_domain','OBE')
|| exec('xxx_grp_act','personel',_set,'PPL_GRP_AZAL','Aktualizacja zaliczek'@,
      'Aktualizacja potrąceń na podstawie danych z obszaru "Zaliczki pracownicze"'@)
?};
exec('xxx_grp_act','personel',_set,'PPL_GRP_RIMP','Import składników płacowych'@);
: Praca poza siedzibą
_sym:='POZA_SIEDZIBA';
_set.add_grp('Praca poza siedzibą firmy'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_GRP_PPSF','Praca poza siedzibą firmy'@,
   'Grupowe wertowanie oraz redagowanie pracy poza siedzibą firmy'@,,,,_sym
);
exec('xxx_grp_act','personel',_set,'PPL_GRP_PPSL','Limity pracy poza siedzibą firmy'@,
   'Grupowe wertowanie oraz redagowanie limitów pracy poza siedzibą firmy'@,,,,_sym
);
exec('xxx_grp_act','personel',_set,'PPL_GRP_APAR','Globalne współczynniki wynagrodzeń'@,
   'Wertowanie oraz redagowanie globalnych współczynników wynagrodzeń'@);
: Przeniesienie rachunków korekcyjnych do tabeli nadwyżek
exec('xxx_grp_act','personel',_set,'PPL_PLL_RNZP','Przeniesienie nadwyżek z listy korekcyjnej'@,
   'Przeniesienie danych o nadwyżkach z listy korekcyjnej'@,,
   "exec('add_kor','lista_licz');''"
);

_set.run('Operacje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\ppl_zlc_akcje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Główna formuła - Operacje grupowe (umowy cywilnoprawne).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

: Przelewy
_sym:='HBN_PRZ_XXXX';
_set.add_grp('Przelewy'@,_sym);
: Przelewy wynagrodzenia
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DLUZ','Przelewy wynagrodzenia'@,
   'Utworzenie przelewów wynagrodzenia'@,,
   "exec('hbn_prz_dluz','ppl'); ''",,
   _sym
);
: Przelewy wybranych składników
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DWSK','Przelewy wybranych składników'@,
   'Utworzenie przelewów wybranych składników'@,,
   "  {? (_ret:=exec('select','lista_plac','PPL','Z',,,'MR')).REF<>null
      || exec('hbn_prz_dwsk','ppl',_ret.REF)
      ?};
      ''
   ",,
   _sym
);
: Przelewy komornicze
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DLKR','Przelewy komornicze'@,
   'Utworzenie przelewów komorniczych'@,,
   "  _lista:=__PARSES.getVal('ListaPłac');
      _okres:=exec('wybierz_rok_miesiac','daty',_lista.R,_lista.M);
      {? _okres.R<>0 & _okres.M<>0
      || exec('hbn_prz_dlkr','ppl',,_okres.R,_okres.M,'Z')
      ?};
      ''
   ",,
   _sym
);
: Przelewy korekt wynagrodzenia
exec('xxx_grp_act','personel',_set,'HBN_PRZ_DLUZ','Przelewy wynagrodzenia dla rachunków korygujących'@,
   'Utworzenie przelewów wynagrodzenia dla rachunków korygujących wprowadzonych zgodnie z rozporządzeniem '
   'Ministra Finansów z dnia 7 stycznia 2022r.'@,,
   "  {? var_pres('__KORAUTO')<0 || __KORAUTO:='T' ?};
      exec('hbn_prz_dluz','ppl');
      {? var_pres('__KORAUTO')>0 || &__KORAUTO ?};
      ''
   ",,
   _sym
);
: Praca poza siedzibą
_sym:='POZA_SIEDZIBA';
_set.add_grp('Praca poza siedzibą firmy'@,_sym);
:: Praca poza siedzibą firmy
exec('xxx_grp_act','personel',_set,'PPL_GRP_PPSF','Praca poza siedzibą firmy'@,
   'Grupowe wertowanie oraz redagowanie pracy poza siedzibą firmy'@,,,,_sym
);
exec('xxx_grp_act','personel',_set,'PPL_GRP_PPSL','Limity pracy poza siedz. firmy'@,
   'Grupowe wertowanie oraz redagowanie limitów pracy poza siedzibą firmy'@,,,,_sym
);
: Korekty podatkowe
exec('xxx_grp_act','personel',_set,'PPL_ZLC_RUZC','Korekta zaliczki na podatek'@,
   'Utworzenie korekty zaliczki podatkowej zgodnie z rozporządzeniem Ministra Finansów z dnia 7 stycznia 2022r.'@,,
   "  {? (_ret:=exec('select','lista_plac','PPL','Z',,,'MR')).REF<>null
      || exec('korekta_podatek_UZ','zlec_rh')
      ?};
      ''
   ",
   exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RRAC') & exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RUZC')
);
: Przeniesienie rachunków korekcyjnych do tabeli nadwyżek
exec('xxx_grp_act','personel',_set,'PPL_PLL_RNZP','Przeniesienie nadwyżek z rachunków korekcyjnych'@,
   'Przeniesienie danych o nadwyżkach z listy korekcyjnej'@,,
   "exec('add_kor','zlec_rh');''"
);
: Blokada rachunków
exec('xxx_grp_act','personel',_set,'PPL_ZLC_RRAC','Blokada rachunków'@,
   'Grupowa blokada rachunków'@,,
   "exec('rh_blokada','zlec_rh');''"
);

_set.run('Operacje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\ppl_zdr_edeklaracje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uruchamia sekcję e-deklaracji grupowych (płace)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: sprawdzanie czy mamy dostępnych współpracowników i uzależnienie od tego dostępności przycisków
_btn_state:=exec('dostepne_p','schemat','PPL',P_FILTER.F_ZATR().KOD,'*').size();

:: zestawy dla form współpracy
_wep:=exec('fun_set','object');
_wez:=exec('fun_set','object');
_wen:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

_name:='Deklaracje PIT-4R'@;
exec('xxx_grp_act','personel',_wep,'PPL_ZDR_D4RD',_name,_name,,,_btn_state);

_name:='Deklaracje PIT-11'@;
exec('xxx_grp_act','personel',_wep,'PPL_ZDR_G11D',_name,'Grupowe deklaracje PIT-11'@,,,_btn_state);

_przed_btn:=_btn_state;
{? params_get().cfg.extra.rok>=2017 || _btn_state:=0 ?};
_name:='Deklaracje PIT-40'@;
exec('xxx_grp_act','personel',_wep,'PPL_ZDR_G40D',_name,'Grupowe deklaracje PIT-40'@,,,_btn_state);
_btn_state:=_przed_btn;

_name:='Deklaracje PIT-8C'@;
exec('xxx_grp_act','personel',_wep,'PPL_ZDR_G8CD',_name,'Grupowe deklaracje PIT-8C'@,,,_btn_state);

_name:='Polecenie przelewu dla PIT-4'@;
exec('xxx_grp_act','personel',_wep,'HBN_PRZ_DLUS',_name,_name,,
   "exec('hbn_prz_dlus','ppl','PIT-4'); ''",_btn_state
);

:: Zestawienie zbiorcze PIT-11 jest dostępne tylko dla roku 2018, więc ukrywamy pozycję dla pozostałych lat
{? params_get().cfg.extra.rok=2018
|| _name:='Zestawienie zbiorcze PIT-11'@;
   exec('xxx_grp_act','personel',_wep,'PPL_ZDR_ZP11',_name,_name,,,_btn_state)
?};

{? PAR_SKID.get(337)='T'
|| _name:='Podpis elektroniczny'@;
   exec('xxx_grp_act','personel',_wep,'PPL_ZDR_G11D',_name,'Grupowe podpisywanie załączników PIT-11'@,,"
      exec('pit11_podpis','edeklar')
   ",_btn_state)
?};

::Poprawka SPIS ER/WRT/XP/22.26/2209/0036
:W firmie nie ma zatrudnionych pracowników tylko zleceniobiorcy nie można wykonać PIT-4R
::od umów cywilnoprawnych oraz przelewu do PIT-4
::dodajemy możliwość wykonania PIT-4R oraz przelewu do PIT-4 dla wybranej formy Z
_name:='Deklaracje PIT-4R'@;
exec('xxx_grp_act','personel',_wez,'PPL_ZDR_D4RD',_name,_name,,,_btn_state);

_name:='Deklaracje PIT-8AR'@;
exec('xxx_grp_act','personel',_wez,'PPL_ZDR_D8AD',_name,_name,,,_btn_state);

_name:='Deklaracje PIT-11'@;
exec('xxx_grp_act','personel',_wez,'PPL_ZDR_G11D',_name,'Grupowe deklaracje PIT-11'@,,,_btn_state);

_name:='Deklaracje PIT-8C'@;
exec('xxx_grp_act','personel',_wez,'PPL_ZDR_G8CD',_name,'Grupowe deklaracje PIT-8C'@,,,_btn_state);

_name:='Informacje IFT1/IFT1R'@;
exec('xxx_grp_act','personel',_wez,'PPL_ZDR_GIFD',_name,'Grupowe informacje IFT1/IFT1R'@,,,_btn_state);

: Polecenie przelewu
_name:='Polecenie przelewu dla PIT-4'@;
exec('xxx_grp_act','personel',_wez,'HBN_PRZ_DLUS',_name,_name,,
   "exec('hbn_prz_dlus','ppl','PIT-4'); ''",_btn_state
);

_name:='Polecenie przelewu dla PIT-8AR'@;
exec('xxx_grp_act','personel',_wez,'HBN_PRZ_DLUS',_name,_name,,
   "exec('hbn_prz_dlus','ppl','PIT-8AR'); ''",_btn_state
);

:: Zestawienie zbiorcze PIT-11 jest dostępne tylko dla roku 2018, więc ukrywamy pozycję dla pozostałych lat
{? params_get().cfg.extra.rok=2018
|| _name:='Zestawienie zbiorcze PIT-11'@;
   exec('xxx_grp_act','personel',_wez,'PPL_ZDR_ZP11',_name,_name,,,_btn_state)
?};

{? PAR_SKID.get(337)='T'
|| _name:='Podpis elektroniczny'@;
   exec('xxx_grp_act','personel',_wez,'PPL_ZDR_G11D',_name,'Grupowe podpisywanie załączników PIT-11'@,,
      "exec('pit11_podpis','edeklar')"
   ,_btn_state)
?};

_kod:=P_FILTER.F_ZATR().KOD;
{? _kod='P' || _wep
|? _kod='Z' || _wez
|| _wen
?}.run('E-deklaracje grupowe'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\hbn_prz_dlus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Polecenia przelewów dla deklaraci PIT-4 i PIT-8AR
::   WE: _a [STRING] - rodzaj deklaracji:
::          PIT-4
::          PIT-8A
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rodzaj:=_a;

_rok:={? var_pres('__Rok')=type_of(0) || __Rok || date()~1 ?};
_mc:=date()~2;

_okres:=exec('wybierz_rok_miesiac','daty',_rok,_mc);

{? _okres.R=0 | _okres.M=0
|| return()
?};

: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DLUS';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:='_%1/%2/%3'[$_okres.R,$_okres.M,_a];
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RP',_okres.R);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'MP',_okres.M);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RODZAJ',_rodzaj);
: uruchom czynność dla bieżącej listy płac
exec('mp_run','#b__box',_params)


\hbn_prz_dluz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Polecenia przelewów dla umów cywilnoprawnych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DLUZ';
_params.UIDREF:='_'+_params.ACT_UID;
_params.PROC_START:='N';
_params.GRUPA:='N';
: uruchom czynność
exec('mp_run','#b__box',_params)


\hbn_prz_dppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Polecenie przelewu wpłat na PPK
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_okres:=exec('wybierz_rok_miesiac','daty',date()~1,date()~2);
{? _okres.R=0 | _okres.M=0
|| return()
?};

: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DPPK';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:='_%1/%2/%3'[$_okres.R,$_okres.M,'PPK'];
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RU',_okres.R);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'MU',_okres.M);

: uruchom czynność
exec('mp_run','#b__box',_params)


\ppl_zlc_raporty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła - Zestawienia i raporty (zlecenia).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

: Wydruk rachunków do umów zleceń
_wydr:=
   (exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_PRAC') |
    exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RRAC')) &
   (exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_PUZC') |
    exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RUZC'));

exec('xxx_grp_act','personel',_set,'PPL_ZLC_WYDR','Rachunki do umowy'@,,,
   "params_set('TYP','rachunkiUmowy'); exec('np_run','#b__box','PPL_ZLC_WYDR'); ''",_wydr);
exec('xxx_grp_act','personel',_set,'PPL_ZLC_WYDR','Listy wypłat'@,,,
   "params_set('TYP','ListyWyplat'); exec('np_run','#b__box','PPL_ZLC_WYDR'); ''");
: Zestawienia
_sym:='ZESTAWIENIA';
_set.add_grp('Zestawienia'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_ZLC_WYDR','Zestawienia wypłat'@,,,
   "params_set('TYP','ZestawieniaWyplat'); exec('np_run','#b__box','PPL_ZLC_WYDR'); ''",,
   _sym
);
exec('xxx_grp_act','personel',_set,'PPL_ZLC_RZEZ','Zestawienia zbiorcze'@,
   'Tworzenie zestawień zbiorczych'@,,
   "exec('ppl_zlc_rzez','ppl',O.ref()); ''",,
   _sym
);
exec('xxx_grp_act','personel',_set,'PPL_ZLC_WYDR','Pozostałe wydruki'@,,,
   "params_set('TYP','PozostaleWydruki'); exec('np_run','#b__box','PPL_ZLC_WYDR'); ''");

: Zapytania SQL
exec('xxx_grp_act','personel',_set,'PPL_ZLC_PSQL','Zapytania SQL'@,,,
   "exec('np_run','#b__box','PPL_ZLC_PSQL'); ''");

: Raporty zgłoszeniowe ZUS
exec('xxx_grp_act','personel',_set,'PPL_ZLC_ZUBE','Raporty ZUS'@,,,
   "exec('np_run','#b__box','PPL_ZLC_ZUBE'); ''");

: Analizy BI
exec('xxx_grp_act','personel',_set,'BIQ_PER_ZLCA','Analizy BI'@);

_set.run('Zestawienia i raporty'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

params_set(params_get());
exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\ppl_pll_raporty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła - Zestawienia i raporty (płace).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
exec('pkd_conf_cntx','pkd','psh');

:: utwórz zestaw formuł
_set:=exec('fun_set','object');

:: zachowaj stan filtra i tabel
_nfo:=exec('get','#filter',P);
OSOBA.cntx_psh();
P.cntx_psh();

: Wydruk listy płac
exec('xxx_grp_act','personel',_set,'PPL_ZES_WLSL','Lista płac (paski)'@,'Wydruk listy płac (paski)'@,,
   "exec('ppl_zes_wlsl','ppl',__PARSES.getVal('ListaPłac').REF); ''"
);
exec('xxx_grp_act','personel',_set,'PPL_ZES_WLST','Wydruki list płac'@);
exec('xxx_grp_act','personel',_set,'PPL_ZES_WKAR','Kartoteki płacowe'@);

: Zestawienia
_sym:='ZESTAWIENIA';
_set.add_grp('Zestawienia'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_ZES_WZES','Zestawienia płacowe'@,,,,,_sym);
: Zestawienia zbiorcze
exec('xxx_grp_act','personel',_set,'PPL_ZES_RZEZ','Zestawienia zbiorcze'@,'Tworzenie zestawień zbiorczych'@,,
   "exec('ppl_zes_rzez','ppl',__PARSES.getVal('ListaPłac').REF); ''",,_sym);

exec('xxx_grp_act','personel',_set,'PPL_ZES_WSLO','Słowniki'@);

: Zapytania SQL
exec('xxx_grp_act','personel',_set,'PPL_PLL_PSQL','Zapytania SQL'@);

: Raporty rozliczeniowe ZUS
exec('xxx_grp_act','personel',_set,'PPL_ZES_WZUS','Raporty ZUS'@,'Raporty rozliczeniowe ZUS'@,,
   "exec('ppl_zes_wzus','ppl',__PARSES.getVal('ListaPłac').REF); ''");

: Rezerwy
_sym:='REZERWY';
_set.add_grp('Rezerwy'@,_sym);
exec('xxx_grp_act','personel',_set,'PPL_ZES_ERUR','Rezerwy urlopowe'@,,,,,_sym);
exec('xxx_grp_act','personel',_set,'PPL_ZES_WREM','Rezerwy emerytalne'@,,,,,_sym);

: Analizy BI
exec('xxx_grp_act','personel',_set,'BIQ_PER_ZLCA','Analizy BI'@);

_set.run('Zestawienia i raporty'@);

:: przywróć stan
OSOBA.cntx_pop();
P.cntx_pop();
P.prefix();
exec('set','#filter',P,_nfo);

exec('pkd_conf_cntx','pkd','pop');
win_activate(_par.cfg.nav.main);
~~


\ppl_zes_wlsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wydruk listy płac
::   WE: _a [_O] - nagłówek listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SEEK.O:=_a;
SEEK.O();
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='PPL_ZES_WLSL';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:=O.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
: uruchom czynność dla bieżącej listy płac
exec('mp_run','#b__box',_params)


\hbn_prz_dlis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewów do listy płac
::   WE: _a [_O] - nagłówek listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null | ref_tab(_a)<>O
|| FUN.emsg(
      'Nagłówek listy płac musi być wskazany.\n'
      'Polecenia przelewów nie zostały utworzone.'@
   );
   return()
?};

SEEK.O:=_a;
SEEK.O();
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DLIS';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:=O.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
: uruchom czynność dla wskazanej listy płac
exec('mp_run','#b__box',_params)


\hbn_prz_dwsk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Utw. przelewów składnika listy
::   WE: _a [_O] - nagłówek listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null | ref_tab(_a)<>O
|| FUN.emsg(
      'Nagłówek listy płac musi być wskazany.\n'
      'Polecenia przelewów nie zostały utworzone.'@
   );
   return()
?};

SEEK.O:=_a;
SEEK.O();
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DWSK';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:=O.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
: uruchom czynność dla wskazanej listy płac
exec('mp_run','#b__box',_params)


\hbn_prz_dlkr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewów dla komornika.
::       UWAGA: poprawność parametrów NIE jest weryfikowana.
::   WE: [_a] [_O] - Nagłówek listy płac [domyślnie:~~].
::       [_b] [NUMBER] - Rok [domyślnie:~~].
::       [_c] [NUMBER] - Miesiąc [domyślnie:~~].
::       [_c] [STRING] - Źródło potrącenia (P/Z/X*).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_lista:={? var_pres('_a')=type_of(null()) || _a || ~~ ?};
_rok:={? var_pres('_b')=type_of(0) || _b || ~~ ?};
_mc:={? var_pres('_c')=type_of(0) || _c || ~~ ?};
_zrodlo:={? var_pres('_d')=type_of('') || _d || 'X' ?};

O.cntx_psh();
O.prefix();
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='HBN_PRZ_DLKR';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);

{? _lista<>~~ & O.seek(_lista)
|| _params.UIDREF:=O.uidref();
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref())
|? _rok<>~~ & _mc<>~~
|| _params.UIDREF:='_'+$date(_rok,_mc,0)+_zrodlo;
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'R',_rok);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'M',_mc);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZRODLO',_zrodlo)
?};
: uruchom czynność dla wskazanej listy płac
_ret:=exec('mp_run','#b__box',_params);
O.cntx_pop();
_ret


\ppl_zes_rzez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzenie zestawień zbiorczych
::   WE: _a [_O] - nagłówek listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SEEK.O:=_a;
SEEK.O();
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='PPL_ZES_RZEZ';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:=O.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
: uruchom czynność dla bieżącej listy płac
exec('mp_run','#b__box',_params)


\ppl_zes_wzus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Raporty rozliczeniowe ZUS
::   WE: _a [_O] - nagłówek listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SEEK.O:=_a;
SEEK.O();
_typ:='';
: przygotuj czynność do uruchomienia
{!
|? (_typ:=exec('wyb_rap_rozl','rap_zus',_typ,''))<>''
|! _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='PPL_ZES_WZUS';
   _params.PROC_START:='N';
   _params.GRUPA:='N';
   _params.UIDREF:=exec('rap_rozl_uid','rap_zus',O.RU,O.MU,_typ);
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RU',O.RU);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'MU',O.MU);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'T',_typ);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'F_ZATR',O.F_ZATR().KOD);
:  uruchom czynność dla bieżącej listy płac
   exec('mp_run','#b__box',_params);
   obj_del(_params)
!}


\ppl_zlc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła obszaru roboczego PPL_ZLC - Umowy cywilnoprawne.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('dostepny_u','f_zatr',,,'Z',1)
|| return()
|? __PARSES.getVal('F_ZATR').KOD<>'Z'
|| _args:=__PARSES.args('F_ZATR');
   _args.KOD:='Z';
   __PARSES.setVal('F_ZATR',_args)
?};

exec('init','ppl');
__PERSONEL:=1;

:: Ustalenie treści linku i ustawienie domyślnych parametrów pracy
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();
_loop:=1;
{!
|? _loop
|!

   {? exec('domyslny','schemat','PODZORG')
   || _cfg:=exec('ppl_zlc_config','ppl');
      _fld:=exec('n_params','nieobecnosc');
:: Specjalna obsługa aktywnego indeksu dla tabeli RH.
      _rh:=obj_new('ndx');
:: Obsługa kartoteki dodatkowej
      _kart_def:=exec('params_kart_def','kart_dod');
      params_set(
         'cfg',_cfg,
         'fld',_fld,
         'rh',_rh,
         'kart_def',_kart_def,
         'link',_link
      );

      P.cntx_psh();
      P.win_edit('RED_Z');
      H.cntx_psh();
      H.use('_hist');
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));

      P.win_sel(_cfg.window);
      ($_cfg.prolog)();
      AreaTitle.setTabWin(P,_cfg.window);
      AreaTitle.setTitle();
      _loop:={? _link<>''
             || exec('pplzlcLinkSelect','ppl',_link)
             || P.select()
             ?};
      ($_cfg.epilog)();

      H_UM.cntx_pop();
      H.cntx_pop();
      P.cntx_pop();
      exec('otworz_h_um','pracownik');
      P.win_del(_cfg.window);
      obj_del(_cfg);
      obj_del(_fld);
      obj_del(_rh);
      obj_del(_kart_def)
   ?}
!};
UD_SCH.cntx_pop();
UD_TYP.cntx_pop();

~~


\zlc_edeklaracje_grupowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Uruchamia sekcję e-deklaracji grupowych (zlecenia)
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: utwórz zestaw formuł
_set:=exec('fun_set','object');

P.cntx_psh();

_name:='Deklaracje PIT-8AR'@;
exec('xxx_grp_act','personel',_set,'PPL_ZDR_D8AD',_name,_name);

_set.run('E-deklaracje grupowe (zlecenia)'@);

P.cntx_pop();
~~


\ppl_zlc_rzez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzenie zestawień zbiorczych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_symbol:=2-(6+$date());
_ret:=exec('select','lista_plac','PPL','Z','*','L%1%2'[2+_symbol,_symbol+2],'R');
{? _ret.OK<>1
|| return()
?};
SEEK.O:=_ret.REF;
SEEK.O();

: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='PPL_ZLC_RZEZ';
_params.PROC_START:='N';
_params.GRUPA:='N';
_params.UIDREF:=O.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
: uruchom czynność dla bieżącej listy płac
exec('mp_run','#b__box',_params)


\ppl_pll_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki ppl_pll.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'btnO@panel','Wybierz listę'@);
_add(_TAB,'przyciskRap@panel','Zestawienia i raporty'@);
_add(_TAB,'przyciskGrp@panel','Operacje grupowe'@);

_TAB


\ppl_pll_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego PLL w dziedzinie PPL.
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PPL_PLL')
   || 1
   ?};

_main:='';
_side:='';
_mode:='maximized';
_high:=14;

_main:='PPL_PLL';
_side:='NAW_MIN';


:  okienko główne obszaru - kontener do wstawiania zakładek
{? _inTerm=0
||
   _main:='PPL_PLL';
   _side:='NAW_MIN';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','ppl_pll.dsk',,,,,exec('ppl_pll_dsk_pl','ppl'),1);
         params_exec('stdor_bf','pkd','T');
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         1
      ",
:     identyfikator
      'or_ppl_pll',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor firmy jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:     po odświeżeniu
      "  params_exec('stdor_def_ar','pkd');
         params_exec('stdor_all_ar','ppl')
      ",
:     położenie i wysokość
      ,,_high,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

   P.grp_splt(_wnd,'panel','vertical','right')
||
   _main:='PPL_PLLI';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "params_exec('stdin_bf','pkd','T')",
:     identyfikator
      'in_ppl_pll',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdin_oc','pkd')
         ?}
      "
   )
?};

: listy pracowników
_wid:={? _inTerm=0 || 'PPL_PLL' || 'PPL_PLLI' ?};
P.grp_sel(_wnd,P,_wid,'Rozliczani na liście'@,
:  po odświeżeniu
   "  params_exec('stdor_p_ar','pkd');
      _inTerm:=
         {? ~exec('interm','#system')
         || exec('pxx_widok_uproszczony','pkd','PPL_PLL')
         || 1
         ?};
      {? ~_inTerm || params_exec('stdor_all_ar','ppl') ?};
      _wnd:=cur_win(1,1);
      _aid:='';
      {? VAR.O=null | VAR.O().Z='T'
      || _aid:='DUORIP(K)P(L)Z:DIZP(K)P(L)Z'
      |? ~exec('dom_empty','#table',P)
      || _akc:=exec('czy_mod','lista_plac',REF.P,VAR.O);
         {? ~_akc.usun
         || _aid+='U'
         ?};
         {? ~_akc.oblicz
         || _aid+='O'
         ?};
         {? ~_akc.przelicz
         || _aid+='R'
         ?};
         {? ~_akc.usun_skl
         || _aid+='I'
         ?}
      ?};
      _div:={? _aid*':'=0 || ':' || '' ?};
      {? exec('ses_get','xfilter',_wnd).SES=null
      || _aid:='W%1%2W'[_aid,_div];
         _div:=''
      ?};
      {? exec('interm','#system')
      || _act:='J(I)';
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      ?};
      P.actions_grayed(_wnd,_aid)
   ",
:  położenie i wysokość
   ,,_high,
:  przed obsługą
   "  LS.actions('WER',,,1);
      _par:=params_get();
      _par.cfg.nav.main:=cur_win(1,1);
      params_exec('stdor_p_bs_pll','ppl',_a);
      P.f_seek(_par.cfg.extra.REF_PLL)
   ",
:  po obsłudze
   "  _par:=params_get();
      _par.cfg.extra.REF_PLL:=P.ref();
      params_exec('stdor_p_as','pkd',_a)
   ",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _wid,
:  główne
   1
);
_wid:={? _inTerm=0 || 'PPL_RST' || 'PPL_RSTI' ?};
P.grp_sel(_wnd,P,_wid,'Wszyscy pracownicy'@,
:  po odświeżeniu
   "  params_exec('stdor_p_ar','pkd');
      _inTerm:=
         {? ~exec('interm','#system')
         || exec('pxx_widok_uproszczony','pkd','PPL_PLL')
         || 1
         ?};
      {? ~_inTerm || params_exec('stdor_all_ar','ppl') ?};
      _wnd:=cur_win(1,1);
      _aid:=
         {? exec('czy_mod','lista_plac',P.ref(),VAR.O).status<>1  || 'RW:W'
         |? SEEK.O_P<>null || 'R:'
         || ''
         ?};
      _div:={? _aid*':'=0 || ':' || '' ?};
      {? exec('ses_get','xfilter',_wnd).SES=null
      || _aid:='C%1%2C'[_aid,_div];
         _div:=''
      ?};
      {? exec('interm','#system')
      || _act:='J(I)';
         _aid:='%1%2%3%1'[_act,_aid,_div];
         _div:=''
      ?};
      P.actions_grayed(_wnd,_aid)
   ",
:  położenie i wysokość
   ,,_high,
:  przed obsługą
   "  _par:=params_get();
      _par.cfg.nav.main:=cur_win(1,1);
      params_exec('stdor_p_bs_rst','ppl',_a);
      P.f_seek(_par.cfg.extra.REF_RST)
   ",
:  po obsłudze
   "  _par:=params_get();
      _par.cfg.extra.REF_RST:=P.ref();
      params_exec('stdor_p_as','pkd',_a)
   ",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _wid,
:  główne
   0
);

: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom');

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','PPL_PLL',P,_wnd,_main,_side);
_cfg.extra:=obj_new('REF_PLL','REF_RST');
_cfg.extra.REF_PLL:=null;
_cfg.extra.REF_RST:=null;
_cfg.final:='T';

_num:=0;
_sym:='PPL_PLL';
: dołącz kolejne zakładki
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ls','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_h_odde','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_bnftp','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_n','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_g','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ga','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ppsf','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_gk_s','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_gk_m','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_h_um','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_lss','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_lsw','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_prem_okr','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_kom_os','ppl',_cfg,1);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_zalicz_a','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_k','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_korn','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_kz','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_kp','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ku','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_ipod','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ulgi_pod','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ds','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_dnauk','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_os_zwpoz','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_p_npod','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_ppsf_zds','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
{? exec('is_pzd02','ppsf')
|| exec('ppl_conf_phw','ppl',_cfg);
   Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg)
?};
: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\ppl_pll_listy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Obsługa akcji "Listy płac" w obszarze PPL_PLL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('select','lista_plac','PPL','P',,,'W')


\ppl_zlc_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki ppl_zlc.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'przyciskRap@panel','Zestawienia i raporty'@);
_add(_TAB,'przyciskListy@panel','Listy płac'@);

_TAB


\ppl_zlc_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego ZLC w dziedzinie PPL.
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PPL_ZLC')
   || 1
   ?};

_main:='';
_side:='NAW_MIN';
_mode:='maximized';
: okienko główne obszaru - kontener do wstawiania zakładek
{? ~_inTerm
||
   _main:='PPL_ZLC';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','ppl_zlc.dsk',,,,,exec('ppl_zlc_dsk_pl','ppl'),1);
         params_exec('stdor_bf','pkd','T','Z');
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         {? params_get().link<>''
         || exec('pplzlcLinkActivate','ppl')
         ?};
         1
      ",
:     identyfikator
      'or_ppl_zlc',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor firmy jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:     po odświeżeniu
      "params_exec('stdor_def_ar','pkd')",
:     położenie i wysokość
      ,,,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

:  lista pracowników zatrudnionych we wskazanej jednostce
   P.grp_splt(_wnd,'panel','vertical','right')
||
   _main:='PPL_ZLCI';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  params_exec('stdin_bf','pkd','T',exec('tmp2dest','f_zatr','Z'));
         1
      ",
:     identyfikator
      'or_ppl_zlc',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdin_oc','pkd')
         ?}
      "
   )
?};

P.grp_sel(_wnd,P,_main,,
:  po odświeżeniu
   "  params_exec('stdor_p_ar','pkd');
      _wnd:=cur_win(1,1);
      _aid:='';
      _act:='';
      _div:=':';
      {? exec('ses_get','xfilter',_wnd).SES=null
      || _aid:={? _wnd='PPL_ZLC' || 'W' || 'J(W)'?}
      ?};
      {? exec('interm','#system')
      || _act:='J(I)'
      ?};
      _aid:='%1%2%3%1%2'[_act,_aid,_div];
      P.actions_grayed(_wnd,_aid)
   ",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "params_exec('stdor_p_bs','pkd',_a)",
:  po obsłudze
   "params_exec('stdor_p_as','pkd',_a)",
:  utrwalenie, aktywacja, wypełnienie
   0,0,_mode,
:  identyfikator
   _main,
:  główne
   1
);

: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom',10);

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','PPL_ZLC',P,_wnd,_main,_side);
_cfg.final:='T';

_num:=0;
_sym:='PPL_ZLC';
: dołącz kolejne zakładki
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_zc','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_h_um','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_os_n','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_nwu','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_url','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_lss','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_kk','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_kom_os','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_adres','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_gp','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_ppsf','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_pko','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_os_us','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_info','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_r_wzcz','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_kart_dod_xxxxxxxx','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_os_zwpoz','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('ppl_conf_p_npod','ppl',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);
exec('pkd_conf_p_ipod','pkd',_cfg);
Plugin.run('PXX_TABS_001',_sym,_num+=1,_cfg);

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\ppl_zlc_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" obszaru PPL_ZLC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_popraw','pracownik')


\ppl_zlc_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń" obszaru PPL_ZLC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_usun','pracownik')


\ppl_zlc_listy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa przycisku "Listy płac" w obszarze PPL_ZLC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('select','lista_plac','PPL','Z',,,'WMR')


\ppl_zlc_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PPL_ZLC')


\stdor_all_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka nawigatorów i list pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_lm:=exec('last_mod_get','#table',O);
{? EDIT_VAR.O_LM=0
|| EDIT_VAR.O_LM:=_lm
|? EDIT_VAR.O_LM<>_lm
|| EDIT_VAR.O_LM:=_lm;
   exec('dsk_set_callback','pkd','listaTXT@panel');
   AreaTitle.setTitle()
?};
~~


\stdor_p_bs_pll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą listy pracowników w oknie obszaru PPL_PLL dziedziny PPL.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
_ses:=exec('ses_get','xfilter',cur_win(1,1));

exec('filtruj_p','schemat',
   'PPL',
   P_FILTER.UD_DEF,
   P_FILTER.F_ZATR().KOD,
   params_get().cfg.final,
   P_FILTER.STATUS,
   _ses.JOIN,
:  odrzuć pracowników nieuwzględnianych na bieżącej liście płac
   'P.REFERENCE in (select O_P.P from O_P where O_P.O=\''+$VAR.O+'\' order by 1)'+
   {? _ses.WHERE<>'' || ' and '+_ses.WHERE || '' ?}
);
exec('stdor_p_bs_ext','pkd')


\stdor_p_bs_rst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą listy pracowników w oknie obszaru PPL_RST dziedziny PPL.
::   WE: 0 - wywołana przez grp_disp, nie zero - wywołana przez aktywowanie
::----------------------------------------------------------------------------------------------------------------------
_ses:=exec('ses_get','xfilter',cur_win(1,1));

exec('filtruj_p','schemat',
   'PPL',
   UD_DEF.ref(),
   P_FILTER.F_ZATR().KOD,
   params_get().cfg.final,
   P_FILTER.STATUS,
   _ses.JOIN,
:  odrzuć pracowników, którzy zostali uwzględnieni na bieżącej liście płac
:  obecnie wyłączone (widoczni wszyscy), ale wystarczy "przełączyć" kod poniżej
:  'P.REFERENCE not in (select O_P.P from O_P where O_P.O=\''+$VAR.O+'\' order by 1)'+
:  {? _ses.WHERE<>'' || ' and '+_ses.WHERE || '' ?}
   _ses.WHERE
);
exec('stdor_p_bs_ext','pkd')


\o_p_jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy istnieje zapis w tabeli O_P właściwy dla listy i pracownika.
::   WE: _a - wskazanie listy
::       _b - wskazanie pracownika
::   WY: rezultat wyszukiwania rekordu
::----------------------------------------------------------------------------------------------------------------------
O_P.index('UNIQUE');
O_P.prefix(_a);
O_P.find_key(_b)


\o_p_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dodaje zapis do tabeli O_P właściwy dla listy i pracownika.
::   WE: _a - wskazanie listy
::       _b - wskazanie pracownika
::       _c - pracownik spełnia kryterium (T/N), jeśli pominięty, to przynależność pracownika do listy zostanie
::            zweryfikowana formułą określoną dla listy płac
::       _d - czy lista płac pracownika zawiera składniki
::   WY: 0 - dodanie rekordu nie powiodło się
::       1 - rekord został dodany lub występował już w tabeli
::----------------------------------------------------------------------------------------------------------------------
{? exec('o_p_jest','ppl',_a,_b)
|| return(1)
?};

O_P.blank();
O_P.O:=_a;
O_P.P:=_b;

{? O_P.O=null | O_P.P=null
|| return(0)
?};

{? var_pres('_c')<>type_of('') | _c=''
|| O_P.O();
   O_P.P();
   O_P.KT:={? FUNKCJE.TESTKRYT() || 'T' || 'N' ?}
|| O_P.KT:=_c
?};

{? var_pres('_d')<>type_of('') | _d=''
|| O_P.LS:='N'
|| O_P.LS:=_d
?};

O_P.add()


\o_p_rekord_b_pll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rekord przed okienka PPL_PLL tabeli P
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SEEK.O_P:=null;
{? exec('o_p_jest','ppl',VAR.O,P.ref())
|| SEEK.O_P:=O_P.ref()
?};
SEEK.O_P();
~~


\o_p_rekord_b_rst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rekord przed okienka PPL_RST tabeli P
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_p_rekord_b_pll','ppl');
SEEK.O_P();
~~


\o_p_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Dołącz" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

: filtrowanie pracowników według stanu obszaru
_args:=exec('wybierz_args','pracownik');
_args.DOMAIN:='PPL';
_args.UD_SCH:=UD_DEF.UD_SCH;
_args.UD_SKL:=UD_DEF.UD_SKL;
_args.F_ZATR:=P_FILTER.F_ZATR().KOD;
_args.VIEW:=P_FILTER.STATUS;
_args.SQL_FROM:='';
: odrzuć pracowników, którzy zostali uwzględnieni na bieżącej liście płac
_args.SQL_WHERE:='P.REFERENCE not in (select O_P.P from O_P where O_P.O=\''+$VAR.O+'\' order by 1)';
_args.FML_TEST:='';
_args.HDR_SEL:='';

: wybór wielu pracowników
_ret:=exec('wybierz','pracownik',_args);

{? _ret.STATUS=''
:  wybór zakończony sukcesem
|| _P:=_ret.P;
   P.f_clear();
   _test:=1;
   _stop:=0;
   _loop:=_P.first();
   {!
   |? _loop & _test
   |! {? P.seek(_P.SQL)
      || {? ~FUNKCJE.TESTKRYT()
         || {? _P.size()=1
            || {? ~FUN.ask(
                     'Wybrany współpracownik nie spełnia kryterium listy płac.\n'
                     'Czy mimo to uwzględnić go na liście płac %1?'@[VAR.NAZWALIS]
                  )
               || _stop:=1
               ?}
            |? ~FUN.ask(
                  'Wśród wybranych współpracowników są tacy, którzy nie spełniają kryterium listy płac.\n'
                  'Czy na pewno chcesz kontynuować?'@
               )
            || _stop:=1
            ?};
            _test:=0
         ?}
      ?};
      _loop:=_P.next()
   !};
   _loop:=(~_stop & _P.first());
   {!
   |? _loop
   |! {? P.seek(_P.SQL)
:        dołącz pracownika
      || exec('o_p_add','ppl',VAR.O,P.ref())
      ?};
      _loop:=_P.next()
   !}

|| FUN.error(_ret.STATUS)
?};

: przywróć ograniczenie zakresu
exec('stdor_p_bs_pll','ppl');
~~


\o_p_akcja_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupową akcją rozliczenia współpracowników.
::   WE:
::   WY: 1 - akcja dostępna
::       0 - akcja niedostępna
::----------------------------------------------------------------------------------------------------------------------
{? VAR.O().Z='T'
|| FUN.info('Operacja niedostępna dla zamkniętej listy płac.'@);
   P.sel_adel();
   0
|| 1
?}


\o_p_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed usunięciem informacji o rozliczeniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_p_rekord_b_pll','ppl');
{? O_P.P=P.ref() &
   {? P.sel_size()>0
   || FUNKCJE.USUNZLIS(1)
   |? O_P.LS='T'
   || FUNKCJE.USUNZLIS(0)
   || FUN.ask('Czy na pewno usunąć informację o rozliczeniu pracownika na liście?'@)
   ?} &
   O_P.del(,1)
|| {? P.sel_size()=0
   || P.f_del()
   ?}
?}


\o_p_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po usunięciu informacji o rozliczeniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? P.sel_size()=0
|| P.f_rfresh()
?}


\o_p_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupowym usunięciem rozliczenia współpracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('o_p_akcja_gb','ppl')
|| return(0)
?};

FUN.ask('Czy na pewno usunąć składniki listy płac wybranych pracowników?'@)


\o_p_usun_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po grupowym usunięciu rozliczenia współpracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.sel_adel();
P.f_rfresh()


\o_p_oblicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obliczenie składników listy płac (akcja przed).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_akc:=exec('czy_mod','lista_plac',O_P.P,O_P.O);

{? _akc.status=1
|| FUNKCJE.OBLICZ();
   1
|| FUN.info(
      '%1\nObliczenie wynagrodzenia pracownika %2 %3 nie jest możliwe.'@
      [exec('czy_mod_txt','lista_plac',_akc.status),P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]
   );
   0
?}


\o_p_oblicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obliczenie i przeliczenie składników listy płac (akcja po).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? P.sel_size()=0
|| RAPLS.raport();
   RAPLS.ustaw()
?}


\o_p_przelicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przeliczenie składników listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUNKCJE.OBLICZ({? O_P.BL='N' || 1 || -1 ?});
1


\o_p_oblicz_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupowym obliczeniem składników listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
RAPLS.ustaw()


\o_p_oblicz_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po grupowym obliczeniu składników listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RAPLS.raport();
RAPLS.ustaw();

FUNKCJE.buff.show_log()


\o_p_usun_ls_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Usuń składniki - przed" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_p_rekord_b_pll','ppl');
{? O_P.P<>P.ref()
|| return()
?};
FUNKCJE.USUNZLIS(P.sel_size()>0)


\o_p_usun_ls_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń składniki - przed" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
exec('o_p_usun_gb','ppl')


\o_p_usun_ls_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji grupowej "Usuń składniki - po" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.f_rfresh()


\o_p_uzupelnij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Przypisz pracowników | Na podstawie kryterium" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:={? P.f_size() || P.ref() || null ?};

params_set(params_get());
exec('stdor_p_bs_rst','ppl');
_loop:=P.f_first();
_size:=P.f_size();
_cnt:=0;
{!
|? _loop
|! progress(100*_cnt/_size,'Trwa przetwarzanie listy pracowników...'@);
   {? FUNKCJE.TESTKRYT()
   || exec('o_p_add','ppl',O.ref(),P.ref(),'T','N')
   ?};
   _loop:=P.f_next();
   _cnt+=1
!};
prgs_clr();

exec('stdor_p_bs_pll','ppl');
{? ~P.f_seek(_ref)
|| P.f_first()
?}


\o_p_kopiuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Przypisz pracowników | Na podstawie listy" dla tabeli O_P.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

: wybierz listę płac zgodnie z ustawieniami obszaru
_ret:=exec('select','lista_plac','PPL',P_FILTER.F_ZATR().KOD,'*',,'R');
{? _ret.OK<>1
|| return()
?};

O_P.cntx_psh();
O_P.f_clear();
O_P.index('UNIQUE');
O_P.prefix(_ret.REF);
_loop:=O_P.first();
{!
|? _loop
|! O_P.cntx_psh();
   O_P.clear();
:  dołącz pracownika
   exec('o_p_add','ppl',VAR.O,O_P.P);
   O_P.cntx_pop();
   _loop:=O_P.next()
!};
O_P.cntx_pop();

: odśwież widok pracowników
exec('stdor_p_bs_pll','ppl');
~~


\o_p_rozlicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rozliczenie pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('o_p_jest','ppl',VAR.O,P.ref()) | {? P.sel_size()=0 || FUNKCJE.TESTKRYT(1)=0 ?}
|| return()
?};

exec('o_p_add','ppl',VAR.O,P.ref(),{? FUNKCJE.TESTKRYT() || 'T' || 'N' ?},'N');
~~


\o_p_rozlicz_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupowym rozliczeniem pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('o_p_akcja_gb','ppl')
|| return(0)
?};

_ref:=P.ref();

_SEL:=P.sel_aget();
_loop:=_SEL.first();
{!
|? _loop
|! {? P.seek(_SEL.REF,)
   || {? FUNKCJE.TESTKRYT()=0
      || {? FUN.ask(
               'Wśród wybranych współpracowników są tacy, którzy nie spełniają kryterium listy płac.\n'
               'Czy mimo to uwzględnić ich na liście płac %1?'@ [VAR.NAZWALIS]
            )
         || return(1)
         || P.sel_adel();
            P.f_seek(_ref);
            return(0)
         ?}
      ?}
   ?};
   _loop:=_SEL.next()
!}


\o_p_rozlicz_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po grupowym rozliczeniu pracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.sel_adel();
P.f_rfresh()


\o_p_wybierz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przypisanie pracownika(-ów) do listy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=P.ref();
P.sel_adel();

P.f_rfresh();
_loop:=P.f_first();
_size:=P.f_size();
_cnt:=0;
{!
|? _loop
|! progress(100*_cnt/_size,'Trwa przetwarzanie listy pracowników...'@);
   {? FUNKCJE.TESTKRYT()
   || exec('o_p_add','ppl',O.ref(),P.ref(),'T','N')
   ?};
   _loop:=P.f_next();
   _cnt+=1
!};
prgs_clr();

P.f_rfresh();
{? ~P.f_seek(_ref)
|| P.f_first()
?}


\ppl_pll_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PPL_PLL')


\parses_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustalająca wartość parametru ListaPłac.
::   WE: _a [_O] - Wskazanie listy płac.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null()) & _a<>null()
|| _args:=__PARSES.args('ListaPłac');
   _args.REF:=_a;
   __PARSES.setVal('ListaPłac',_args)
?};

1


\ppl_conf_ls
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia składniki listy wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,LS,'PRACLPRU','WER','Z','Z','PPL_PLL_RSKP','PPL_PLL_PSKP',O_P)
|| return()
?};

_a.prolog+="
   LS.cntx_psh();
   LS.win_edit('RED');
   LS.win_patt('WZO');
";
_a.epilog+="LS.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Składniki listy'@,
   "  params_set(params_get());
      _hide:='';
      {? exec('o_p_jest','ppl',VAR.O,REF.P)
      || {? ~exec('dom_empty','#table',LS)
         || _akc:=exec('czy_mod','lista_plac',LS.ref())
         || _akc:=exec('czy_mod','lista_plac',REF.P,VAR.O)
         ?};
         _hide:=':';
         {? _akc.status<>1
         || {? ~_akc.dolacz
            || _hide:='D'+_hide+'D'
            ?};
            {? ~_akc.popraw
            || _hide:='P'+_hide
            ?};
            {? ~_akc.usun
            || _hide:='U'+_hide
            ?}
         ?};
         {? ~_akc.zablokuj
         || _hide:='B'+_hide
         ?};
         {? ~_akc.wycofaj
         || _hide:='W'+_hide
         ?};
         {? ~_akc.oblicz
         || _hide:='O'+_hide+'O'
         ?};
         {? ~_akc.przelicz
         || _hide:='R'+_hide
         ?};
         {? ~_akc.usun_skl
         || _hide:='I'+_hide
         ?};
         {? exec('done_state','pkd','PPL_PLL_RSKP',O_P.uidref())
         || _hide:='Z'+{? _hide<>'' || _hide || ':' ?}+'Z'
         ?}
      || _hide:='DPUBWORIZ:DOZ'
      ?};
      LS.actions_grayed('WER',_hide)
   ",,,,
   $($_a.bs)(_a.map,"
      _ndx:=LS.index('?');
      LS.index('PRACLPRU');
      LS.prefix(REF.P);
      LS.index('PRACNRRU');
      LS.prefix(REF.P);
      LS.index(_ndx);
      LS.prefix(REF.P);
      {? ~exec('o_p_jest','ppl',VAR.O,REF.P)
      || return('#disable')
      ?}
   "),
   $($_a.as)(_a.map,"
      {? exec('o_p_jest','ppl',VAR.O,REF.P) & _a
      || exec('pkd_run','pkd','STOP')
      ?};
      return()
   "),
   ,,_a.mode
)


\ppl_conf_kz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartę zarobkową pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || '_KARTAZX' || '_KARTAZA' ?};
{? ~_a.init(_a,KZ,_ind,'WER','Z','Z','PPL_PLL_PKPR','PPL_PLL_PKPR',P)
|| return()
?};

_a.prolog+="
   KZ.cntx_psh();
   KZ.win_edit('RED');
";
_a.epilog+="KZ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Karta zarobkowa'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=KZ.index('?');
      KZ.index('_KARTAZA');
      KZ.prefix(REF.P,VAR.O().R);
      KZ.index('_KARTAZX');
      KZ.prefix(REF.P,VAR.O().R);
      KZ.index(_ndx);
      KZ.prefix(REF.P,VAR.O().R)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartę podatkową pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || '_KARTAPX' || '_KARTAPO' ?};
{? ~_a.init(_a,KP,_ind,'WER','Z','Z','PPL_PLL_PKPR','PPL_PLL_PKPR',P)
|| return()
?};

_a.prolog+="
   KP.cntx_psh();
   KP.win_edit('RED');
";
_a.epilog+="KP.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Karta podatkowa'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=KP.index('?');
      KP.index('_KARTAPO');
      KP.prefix(REF.P,VAR.O().RP);
      KP.index('_KARTAPX');
      KP.prefix(REF.P,VAR.O().RP);
      KP.index(_ndx);
      KP.prefix(REF.P,VAR.O().RP)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_ku
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia kartę ubezpieczeniową pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'KARTAUBX' || 'KARTAUB' ?};
{? ~_a.init(_a,KU,_ind,'WER','Z','Z','PPL_PLL_PKPR','PPL_PLL_PKPR',P)
|| return()
?};

_a.prolog+="
   KU.cntx_psh();
   KU.win_edit('RED');
";
_a.epilog+="KU.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Karta ubezpieczeniowa'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=KU.index('?');
      KU.index('KARTAUB');
      KU.prefix(VAR.O().FIRMA,REF.OSOBA,VAR.O().RU);
      KU.index('KARTAUBX');
      KU.prefix(VAR.O().FIRMA,REF.OSOBA,VAR.O().RU);
      KU.index(_ndx);
      KU.prefix(VAR.O().FIRMA,REF.OSOBA,VAR.O().RU)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_k
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia pożyczki wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'KREDYTYX' || 'KREDYTY' ?};
{? ~_a.init(_a,K,_ndx,'WER','Z','Z','PPL_PLL_RPOZ','PPL_PLL_PPOZ',P)
|| return()
?};

_a.prolog+="
   K.cntx_psh();
   K.win_edit('RED');
   K.win_patt('RED');
";
_a.epilog+="K.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Pożyczki'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=K.index('?');
      K.index('KREDYTY');
      K.prefix(P.ref());
      K.index('KREDYTYX');
      K.prefix(P.ref());
      K.index(_ndx);
      K.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_korn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia korekty ZUS wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'KOR_NAPX' || 'KOR_NAPN' ?};
{? ~_a.init(_a,KORN,_ind,'WER','Z','Z','PPL_PLL_RKOR','PPL_PLL_PKOR',P)
|| return()
?};

_a.prolog+="
   KORN.cntx_psh();
   KORN.win_edit('RED');
   KORN.win_patt('WZO');
   KORN.win_fml('WER',EDIT_VAR,'KORN_MCL',,'ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
";
_a.epilog+="KORN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Korekty ZUS'@,,,,,
   $($_a.bs)(_a.map,"
      _ndx:=KORN.index('?');
      KORN.index('KOR_NAPN');
      KORN.prefix(P.ref());
      KORN.index('KOR_NAPX');
      KORN.prefix(P.ref());
      KORN.index(_ndx);
      KORN.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_lsw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia wyrównania składników płacowych wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'LTX' || 'LT' ?};
{? ~_a.init(_a,LSW,_ind,'WER','Z','Z','PPL_PLL_RWSP','PPL_PLL_PWSP',P)
|| return()
?};

_a.prolog+="
   LSW.cntx_psh();
   LSW.win_edit('RED');
   LSW.win_patt('RED');
";
_a.epilog+="LSW.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wyrównania składników'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=LSW.index('?');
      LSW.index('R');
      LSW.prefix(P.ref());
      LSW.index('LT');
      LSW.prefix(P.ref());
      LSW.index('LTX');
      LSW.prefix(P.ref());
      LSW.index(_ndx);
      LSW.prefix(P.ref());
      _par.lsw.tryb:='LS';
      _par.lsw.zn:=''
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_prem_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia składniki okresowe wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PREM_OKX' || 'PREM_OKR' ?};
{? ~_a.init(_a,PREM_OKR,_ind,'WER','Z','Z','PPL_PLL_RSOK','PPL_PLL_PSOK',P)
|| return()
?};

_a.prolog+="
   PREM_OKR.cntx_psh();
   PREM_OKR.win_edit('RED');
   PREM_OKR.win_patt('SZUK');
";
_a.epilog+="PREM_OKR.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Składniki okresowe'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=PREM_OKR.index('?');
      PREM_OKR.index('PREM_LST');
      PREM_OKR.prefix(P.ref());
      PREM_OKR.index('PREM_OKR');
      PREM_OKR.prefix(P.ref());
      PREM_OKR.index('PREM_OKX');
      PREM_OKR.prefix(P.ref());
      PREM_OKR.index(_ndx);
      PREM_OKR.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_g
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia godziny wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'MSCDKWX' || 'MSCDKW' ?};
{? ~_a.init(_a,G,_ind,'WER','Z','Z','PPL_PLL_RGOD','PPL_PLL_PGOD',P)
|| return()
?};

_a.prolog+="G.cntx_psh();";
_a.epilog+="G.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny pracy'@,"",,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      ZMIENNE.RODZAJ:='';
      EDIT_VAR.KOD_DOK:='G';
      exec('ustaw_maski','godziny',VAR.O().R,VAR.O().M);

      G.index('MSCKW_KK');
      G.prefix(P.ref(),VAR.O().M,'G');
      G.index('MSCDKW');
      G.prefix(P.ref(),VAR.O().M,'G');
      G.index('MSCDKWX');
      G.prefix(P.ref(),VAR.O().M,'G');
      G.index(_map.INDEX);
      G.prefix(P.ref(),VAR.O().M,'G');

      exec('CON','object');
      exec('ustaw_okno','godziny','PPL_PLL_RGOD')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'G_G'
)


\ppl_conf_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia godziny akordowe wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'MSCDKWX' || 'MSCDKW' ?};
{? ~_a.init(_a,G,_ind,'WERA','Z','Z',,'PPL_PLL_PAKO',P)
|| return()
?};

_a.prolog+="G.cntx_psh();";
_a.epilog+="G.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny akordowe'@,"",,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      ZMIENNE.RODZAJ:='A';
      EDIT_VAR.KOD_DOK:='A';
      exec('ustaw_okno','godziny','PPL_PLL_PAKO');
      exec('ustaw_maski','godziny',VAR.O().R,VAR.O().M);

      G.index('MSCKW_KK');
      G.prefix(P.ref(),VAR.O().M,'A');
      G.index('MSCDKW');
      G.prefix(P.ref(),VAR.O().M,'A');
      G.index('MSCDKWX');
      G.prefix(P.ref(),VAR.O().M,'A');
      G.index(_map.INDEX);
      G.prefix(P.ref(),VAR.O().M,'A')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'G_A'
)


\ppl_conf_kom_os
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia potrącenia wybranego pracownika.
::   WE:  _a  [ARRAY]  - Bufor konfiguracji.
::       [_b] [NUMBER] - Dostępność pola KOM_OS.RAZ w oknie redagowania RED:
::                      0 - Nie [domyślnie];
::                      1 - Tak.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PAR_SKID.get(230)<>'T'
|| return()
?};

_ind:={? PAR_SKID.get(236)='T' || 'KOM_OSX' || 'KOM_OS' ?};
{? ~_a.init(_a,KOM_OS,_ind,'WER','Z','Z','PPL_PLL_RPOT','PPL_PLL_PPOT',OSOBA)
|| return()
?};

KOM_OS.fld_fml('RAZ','BEFORE_EDIT',$$(var_pres('_b')=type_of(0) & _b));

_a.prolog+="
   KOM_OS.cntx_psh();
   KOM_OS.win_edit('RED');
   KOM_OS.win_patt('SZUK');
";
_a.epilog+="KOM_OS.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Potrącenia'@,"",,,,
   $($_a.bs)(_a.map,"
      _firma:=exec('ref_firma','ustawienia');
      _ndx:=KOM_OS.index('?');
      KOM_OS.index('KOM_OS');
      KOM_OS.prefix(_firma,OSOBA.ref());
      KOM_OS.index('KOM_OSX');
      KOM_OS.prefix(_firma,OSOBA.ref());
      KOM_OS.index(_ndx);
      KOM_OS.prefix(_firma,OSOBA.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_ulgi_pod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia ulgi z US wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'ULGIUSD' || 'ULGIUS' ?};
{? ~_a.init(_a,ULGI_POD,_ndx,'WER','Z','Z','PPL_PLL_RUUS','PPL_PLL_PUUS',P)
|| return()
?};

_a.prolog+="
   ULGI_POD.cntx_psh();
   ULGI_POD.win_edit('RED');
";
_a.epilog+="ULGI_POD.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Ulgi z US'@,"",,,,
   $($_a.bs)(_a.map,"
      ZMIENNE.RODZAJ:='';
      _ndx:=ULGI_POD.index('?');
      ULGI_POD.index('ULGIUS');
      ULGI_POD.prefix(P.OSOBA);
      ULGI_POD.index(_ndx);
      ULGI_POD.prefix(P.OSOBA)
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_gk_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia stały podział kosztów wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_key_arr:='_tab:=obj_new(2); _tab[1]:=P.uidref(); _tab[2]:=\'_S\'; _tab';
{? ~_a.init(_a,G,'PODZ_SL','WERK','','','PPL_PLL_RPKO','PPL_PLL_PPKO',P,_key_arr)
|| return()
?};

_a.prolog+="
   G.cntx_psh();
   G.win_edit('RED');
";
_a.epilog+="G.cntx_pop();";

_title:='Stały podział kosztów'@;

_as_fml:=$(''+ "{? _a || exec('spr_pr','godziny','"+_title+"') ?} ");

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_title,"",,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      EDIT_VAR.KOD_DOK:='K';
      ZMIENNE.RODZAJ:='S';
      _czyL:=PAR_SKID.get(395)='L';
      G.fld_fml('LT','BLANK',$'*');
      G.use('godzstal');
      G.index('PODZ_SL');
      {? _czyL
      || G.fld_fml('LT','BLANK',$'VAR.NAZWALIS+3');
         G.prefix(P.ref(),EDIT_VAR.KOD_DOK,VAR.NAZWALIS+3,)
      || G.prefix(P.ref(),EDIT_VAR.KOD_DOK,'< ---- >',)
      ?};
      G.index(_map.INDEX);
      {? _czyL
      || G.prefix(P.ref(),EDIT_VAR.KOD_DOK,VAR.NAZWALIS+3,)
      || G.prefix(P.ref(),EDIT_VAR.KOD_DOK,'< ---- >',)
      ?};
      exec('CON','object');
      exec('fl_decl','dekret_aut');
      exec('ustaw_okno','godziny','PPL_PLL_RPKO');

::    ze względu na jedno wspólne okno z czynnością PPL_PLL_RPKO tutaj trzeba zrobić własną obsługę wyszarzania akcji
      {? _state:=exec('done_state','pkd',_map.ACT_MOD,($_map.KEY_TAB)().uidref())
      || _done_noempty:='Z';
         _done_empty:='Z'
      || _done_noempty:=_done_empty:=''
      ?};

::    dla pustej dziedziny wyszarzamy akcję K&opiuj
      {? G.size()=0
      || _done_empty+='O'
      ?};
      G.actions_grayed(_map.WINDOW,_done_noempty+':'+_done_empty)

   "),
   $($_a.as)(_a.map,_as_fml),
   ,,_a.mode,'GK_S'
)


\ppl_conf_gk_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia miesięczny podział kosztów wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_key_arr:='_tab:=obj_new(2); _tab[1]:=P.uidref(); _tab[2]:=\'_M\'+$VAR.O().R+form(O.M,-2); _tab';
{? ~_a.init(_a,G,'PODZ_ML','WERK','Z','Z','PPL_PLL_RPKO','PPL_PLL_PPKO',P,_key_arr)
|| return()
?};

_a.prolog+="G.cntx_psh();";
_a.epilog+="G.cntx_pop();";

_title:='Miesięczny podział kosztów'@;

_as_fml:=$(''+"{? _a || exec('spr_pr','godziny','"+_title+"') ?}");

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,_title,"",,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      EDIT_VAR.KOD_DOK:='K';
      ZMIENNE.RODZAJ:='M';
      exec('ustaw_maski','godziny',VAR.O().R,VAR.O().M);
      _czyL:=PAR_SKID.get(396)='L';
      G.fld_fml('LT','BLANK',$'*');
      G.index('PODZ_ML');
      {? _czyL
      || G.fld_fml('LT','BLANK',$'VAR.NAZWALIS');
         G.prefix(P.ref(),VAR.O().M,'K',VAR.NAZWALIS,)
      || G.prefix(P.ref(),VAR.O().M,'K','',)
      ?};
      G.index(_map.INDEX);
      {? _czyL
      || G.prefix(P.ref(),VAR.O().M,'K',VAR.NAZWALIS,)
      || G.prefix(P.ref(),VAR.O().M,'K','',)
      ?};

      exec('CON','object');
      exec('fl_decl','dekret_aut');
      exec('ustaw_okno','godziny','PPL_PLL_RPKO')
   "),
   $($_a.as)(_a.map,_as_fml),
   ,,_a.mode,'GK_M'
)


\ppl_conf_dek_11
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Udostępnia deklaracje PIT-11
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,VAT_DEK,'VAT_PRAC','WERP','','','PPL_ZDR_D11D','PPL_ZDR_D11W',P)
|| return()
?};

_a.prolog+="
   VAT_DEK.cntx_psh();
   VAT_DEK.win_fml('WERP',,'NR','NR','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   exec('inipit11_select','edeklar','PIT11P',__Rok);";
_a.epilog+="
   exec('end_inipit11','edeklar');
   VAT_DEK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Deklaracje PIT-11'@,,,,,
   $($_a.bs)(_a.map,"
      EDIT_VAR.PIT_RODZ:='';
      BPMN.SYM_DOM:='PPL';
      _pitTyp:='';
      _rodzDekl:='';
      {? P_FILTER.F_ZATR().KOD='P'
      || _pitTyp:='PIT11P';
         _rodzDekl:='T'
      |? P_FILTER.F_ZATR().KOD='Z'
      || _pitTyp:='PIT11Z';
         _rodzDekl:='I'
      ?};
      _dekprok:=rok_dekp;
::Po zmianie usuniecia ROK_F i OKRO_F data _dekprok bedzie date(1,1,1)
      {? var_pres('__Rok')<0
      || {? ~exec('inipit11_select','edeklar',_pitTyp)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      |? _cfg.extra.rok<>__Rok
      || {? ~exec('inipit11_select','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?};
         _cfg.extra.rok:=__Rok
      |? _pitTyp<>pit_typ
      || {? ~exec('inipit11_select','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      ?};
      SKID.DEKL_NAZ:='PIT11';
      VAT_DEK.index('VAT_PRAC');
      VAT_DEK.prefix(P.ref(),_rodzDekl,_dekprok,okres);
      {? _dekprok=date(1,1,1)
      || return('#disable')
      ?}
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\run_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła do prostego uruchamiania akcji czynności.
::   WE:  _a  [TABLE]  - Uchwyt tabeli rekordu kluczowego.
::        _b  [STRING] - Identyfikator czynności do uruchomienia.
::        _c  [STRING] - Kod akcji do uruchomienia.
::       [_d] [STRING] - Identyfikator okna do aktywowania (dotyczy tylko akcji 'Zakończ').
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_act_uid:=_b;
_akcja:=_c;
: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:=_act_uid;
_params.PROC_START:='N';
_params.AKCJA:=_akcja;
_params.GRUPA:='N';

: uruchom czynność
_params.PORTS_IN:=exec('portsIn','#b__box',_act_uid);
_params.UIDREF:=_TAB.uidref();
exec('portsInSet','#b__box',_params.PORTS_IN,_act_uid,2-!_TAB,_TAB.ref());
exec('mp_run','#b__box',_params);

{? _akcja='ZAKOŃCZ'
|| win_activate(_d)
?}


\h_um_z_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia listę dostępnych akcji w oknie WERZ tabeli H_UM -
::       do wykorzystania np. w akcji "Po odświeżeniu". Zakłada się, że dziedzina tabeli H_UM jest ustalona.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ga:='';
H_UM.cntx_psh();
{? H_UM.size()=1
|| _ga:='U'+_ga
?};
{? H_UM.last() & H_UM.DO=date(0,0,0)
|| _ga:='D'+_ga
?};
H_UM.cntx_pop();
H_UM.actions_grayed('WERZ',_ga);
~~


\h_z_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustawia listę dostępnych akcji w oknie WERZ tabeli H - do wykorzystania np. w akcji "Po odświeżeniu".
::       Zakłada się, że dziedzina tabeli H jest ustalona.
::   WE: _a [STRING] - Identyfikator czynności modyfikującej dane.
::       _b [NUMBER] - Czy użytkownik ma prawo do modyfikacji?
::                     0 - Nie.
::                     1 - Tak.
::   WY: Status akcji/przycisku "Zakończ" - wyszarzony?
::                     0 - Nie.
::                     1 - Tak.
::----------------------------------------------------------------------------------------------------------------------
_act_mod:=_a;
_mod:=_b;

_noempty:=_empty:='';

_pos:=exec('h_mod_pos','pracownik',H.ref(),H.UMOWA);
{? _pos<>3
|| _noempty+='U'
?};

P.cntx_psh();
{? _ret:=(H.get() & exec('done_state','pkd',_act_mod,H.P().uidref()))
|| _noempty+='Z'
?};
P.cntx_pop();

H.actions_grayed('WERZ',_noempty+':'+_empty);

_ret


\ppl_conf_h_um
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia informacje o miejscu pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Obsługa "Zakończ" jest robiona ręcznie (w oknie H a nie H_UM).
{? ~_a.init(_a,H_UM,'OD','WERZ','','','PPL_ZLC_RUMP','PPL_ZLC_PUMP',P)
|| return()
?};

_a.prolog+=
   "  H_UM.cntx_psh();
      H.cntx_psh();
      exec('pkd_conf_h_um_icon','pkd');
   ";
_a.epilog+=
   "  H.cntx_pop();
      H_UM.cntx_pop();
   ";

_h_wer:='WERZ';

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Miejsca pracy'@,
   $( 'params_set(params_get());\n'
      'exec(\'h_um_z_act\',\'ppl\');\n'
      'grp_disp(H,\''+_h_wer+'\',1,0)'
   ),,,,
   $($_a.bs)(_a.map,
      "  _ndx:=H_UM.index('?');
         H_UM.index('HUM_RUM');
         H_UM.prefix(P.ref());
         H_UM.index('LISTA');
         H_UM.prefix(P.ref());
         H_UM.index('OD');
         H_UM.prefix(P.ref());
         H_UM.index(_ndx);
         H_UM.prefix(P.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
);

_a.table.tab_splt(_a.window,,'horizontal','bottom',7);
_a.table.grp_sel(_a.window,H,_h_wer,,
   $( 'params_set(params_get());\n'
      'exec(\'h_z_act\',\'ppl\',\''+_a.map.ACT_MOD+'\','+$_a.map.MOD+')'
   ),,,,
   $( 'params_set(_par:=params_get());\n'
      '_cfg:=_par.cfg;\n'
      '{? REF.OSOBA=null() | grp_empty(H_UM,\'WERZ\')\n'
      '|| return(\'#disable\')\n'
      '?};\n'
      '{? _a\n'
      '|| {? _cfg.disp.on\n'
      '   || grp_disp(_cfg.disp.TAB,_cfg.disp.ws,0,1);\n'
      '      _cfg.disp.on:=0\n'
      '   ?}\n'
      '?};\n'
      'H.index(\'HISTUM\');\n'
      'H.prefix(H_UM.ref());\n'
      'H.first()'+
      {? _a.map.MOD
      || ';\n'
::       Ustalenie dostępnych akcji, a przede wszystkim wyszarzenie akcji i przycisku "Zakończ", wykonywane jest
::       nie tylko podczas aktywowania okna (_a=1), ale równiez podczas zwykłego odrysowywania (_a=0).
::       Stąd poniższe wywołanie przed sprawdzeniem wartośc _a.
         '_done:=exec(\'h_z_act\',\'ppl\',\''+_a.map.ACT_MOD+'\','+$_a.map.MOD+');\n'
         '{? _a & ~_done\n'
         '|| exec(\'run_act\',\'ppl\','+_a.map.KEY_TAB+',\''+_a.map.ACT_MOD+'\',\'START\')\n'
         '?}'
      || ''
      ?}
   ),
   $( '{? REF.OSOBA=null() | grp_empty(H_UM,\'WERZ\')\n'
      '|| return()\n'
      '?}'+
      {? _a.map.MOD
      || ';\n'
         'params_set(_par:=params_get());\n'
::       Patrz komentarz dla formuły "Przed obsługą".
         '_done:=exec(\'h_z_act\',\'ppl\',\''+_a.map.ACT_MOD+'\','+$_a.map.MOD+');\n'
         '{? _a & ~_done\n'
         '|| params_set(params_get());\n'
         '   exec(\'run_act\',\'ppl\','+_a.map.KEY_TAB+',\''+_a.map.ACT_MOD+'\',\'STOP\')\n'
         '?}'
      || ''
      ?}
   ),
   ,,_a.mode
)


\ppl_conf_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia umowy cywilnoprawne i rachunki do umów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'ZLECPRAX' || 'ZLECPRAC' ?};
{? ~_a.init(_a,ZC,_ind,'WER','Z','Z','PPL_ZLC_RUZC','PPL_ZLC_PUZC',P,,1)
|| return()
?};

_rh_mod:=exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RRAC');
_rh_view:=_rh_mod | exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_PRAC');

:: Identyfikatory okien - wykorzystywane również w akcjach.
_zc_id:='zc_wer';
_rh_id:='rh_wer';
:: Okno wertowania rachunków.
_rh_wer:='WER';

_a.prolog+=
   "  ZC.cntx_psh();
      exec('zc_icon','zlec_rh');
      RH.cntx_psh();
      RH.index(params_get().rh.ndx:='RACHUNKI');
      exec('rh_icon','zlec_rh');
   ";
_a.epilog+=
   "  RH.cntx_pop();
      ZC.cntx_pop();
   ";
_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Umowy cywilnoprawne'@,
   {? _rh_view
   || $( 'params_set(_par:=params_get());\n'
::       Odrysowanie okna WER tabeli RH zmienia zawartość tablicy _cfg.done. Dlatego musimy ją zapamiętać ...
         '_de:=_par.cfg.done.empty;\n'
         '_dne:=_par.cfg.done.noempty;\n'
         '_ds:=_par.cfg.done.state;\n'
         'grp_disp(RH,\''+_rh_wer+'\');\n'
::       ... i odtworzyć.
         '_par.cfg.done.empty:=_de;\n'
         '_par.cfg.done.noempty:=_dne;\n'
         '_par.cfg.done.state:=_ds;\n'
         'exec(\'zc_wer_ar\',\'zlec_rh\')'
      )
   || ""
   ?},,,,
   $($_a.bs)(_a.map,
      "  exec('zc_wer_bo','zlec_rh');
         _ndx:=ZC.index('?');
         ZC.index('ZLECPRZ');
         ZC.prefix(P.ref());
         ZC.index('ZLECPRAC');
         ZC.prefix(P.ref());
         ZC.index('ZLECPRAX');
         ZC.prefix(P.ref());
         ZC.index(_ndx);
         ZC.prefix(P.ref());
         {? cur_tab(1,0)=P
::          Jeżeli okno jest odświeżane w związku ze zmianami w P, to ustawmy się na ostatnim rekordzie.
::          Nie będziemy tego robili przy zmianach związanych z ZC i RH.
         || {? PAR_SKID.get(236)='T' || ZC.first() || ZC.last() ?};
            win_set('cur_row_pos=-1')
         ?}
      "
   ),
   $($_a.as)(_a.map,"exec('zc_wer_ao','zlec_rh')"),
   ,,_a.mode,_zc_id
);
{? ~_rh_view
|| return()
?};

_state:=
::    Zakładamy, że w zmiennej _par znajdują się wszystkie parametry - wywołano wcześniej _par:=params_get(),
::    a tak na prawdę params_set(_par:=params_get()).
   '_done:=_par.cfg.done;\n'
   '{? exec(\'done_state\',\'pkd\',\'PPL_ZLC_RRAC\',ZC.uidref())\n'
   '|| _done.noempty:=\'Z\';\n'
   '   _done.empty:=\'Z\';\n'
   '   _done.state:=1\n'
   '|| _done.noempty:=_done.empty:=\'\';\n'
   '   _done.state:=0\n'
   '?};\n'
   '_aid:=spli_str(RH.actions_grayed(\''+_rh_wer+'\'),\':\');\n'
   '_cnd:="(_a<>\'\' & _b*_a=0) | _b<>\'\'";\n'
   '{? obj_len(_aid)>1\n'
   '|| {? _cnd(_done.noempty,_aid[1])\n'
   '   || _aid[1]+=_done.noempty\n'
   '   ?};\n'
   '   {? _cnd(_done.empty,_aid[2])\n'
   '   || _aid[2]+=_done.empty\n'
   '   ?}\n'
   '?};\n'
   'RH.actions_grayed(\''+_rh_wer+'\',_aid[1]+\':\'+_aid[2])\n';

_a.table.tab_splt(_a.window,,'horizontal','rh',15);
_a.table.grp_sel(_a.window,RH,_rh_wer,,
   $('params_set(_par:=params_get());\n'
::    Odrysowanie okna WER tabeli ZC zmienia zawartość tablicy _cfg.done. Dlatego musimy ją zapamiętać ...
      '_de:=_par.cfg.done.empty;\n'
      '_dne:=_par.cfg.done.noempty;\n'
      '_ds:=_par.cfg.done.state;\n'
      'grp_disp(ZC,\''+_a.map.WINDOW+'\',0,1)\n'
   ),,,,
   $( 'params_set(_par:=params_get());\n'
      '_cfg:=_par.cfg;\n'
      '{? _a\n'
      '|| {? _cfg.disp.on\n'
      '   || grp_disp(_cfg.disp.TAB,_cfg.disp.ws,0,1);\n'
      '      _cfg.disp.on:=0\n'
      '   ?}\n'
      '?};\n'
      '{? grp_empty(\''+_zc_id+'\',,1)\n'
      '|| return(\'#disable\')\n'
      '?};\n'
      'RH.index(\'RACHUNKC\');\n'
      'RH.prefix(ZC.ref());\n'
      'RH.index(\'RACHUNKI\');\n'
      'RH.prefix(ZC.ref());\n'
      'RH.index(_par.rh.ndx);\n'
      'RH.prefix(ZC.ref());\n'
      'RH.last();\n'
      'win_set(\'cur_row_pos=-1\')'+
      {? _rh_mod
      || ';\n'+_state
      || ''
      ?}
   ),
   $( '{? grp_empty(\''+_zc_id+'\',,1)\n'
      '|| return()\n'
      '?};\n'
      'params_set(_par:=params_get());\n'
      '_par.rh.ndx:=RH.index(\'?\')'+
      {? _rh_mod
      || ';\n'+_state
      || ''
      ?}
   ),,,_a.mode,_rh_id
);
~~


\ppl_conf_zalicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Udostępnia zaliczki pracownicze automatyczne (pochodzące z obszaru OBE_ZAL).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('lic','#b_domain','OBE')
:: Jeżeli brak licencji do dziedziny OBE, to nie ma automatycznych zaliczek pracowniczych.
|| return()
|? ~_a.init(_a,ZALICZ,'ZALPRACW','WERA','Z','Z','PPL_PLL_RZAF','PPL_PLL_PZAF',OSOBA)
|| return()
?};

_a.prolog+=
   "  ZALICZ.cntx_psh();
      ZALICZ.win_edit('REDA');
   ";
_a.epilog+="ZALICZ.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zaliczki (automatyczne)'@,"",,,,
   $($_a.bs)(_a.map,"
      _ndx:=ZALICZ.index('?');
      ZALICZ.index('ZALPRACW');
      ZALICZ.prefix(P.FIRMA,P.OSOBA,'T');
      ZALICZ.index(_ndx);
      ZALICZ.prefix(P.FIRMA,P.OSOBA,'T')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_zdr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Główna formuła obszaru roboczego PPL_ZDR - Deklaracje.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: warunek podstawowy działania dostępność tylko dla form 'P' i 'Z'
_f_zatr:=__PARSES.getVal('F_ZATR').KOD;
{? _f_zatr<>'P' & _f_zatr<>'Z'
|| FUN.emsg('Obszar niedostępny dla formy współpracy "%1".'@[__PARSES.getVal('F_ZATR').OPIS]);
   return()
?};
exec('init','ppl');
__PERSONEL:=1;
RAPLS.ustaw(0);

UD_TYP.cntx_psh();
UD_SCH.cntx_psh();

_loop:=1;
{!
|? _loop
|!
   {? exec('domyslny','schemat','PODZORG')
   || _cfg:=exec('ppl_zdr_config','ppl');
      VAR_DEL.delete('__Rok');
      __Rok:={? date~2<3 || (date~1)-1 || date~1 ?};
      _cfg.extra:=obj_new('rok');
      _cfg.extra.rok:=__Rok;
      params_set('cfg',_cfg);
      P.cntx_psh();
      P.win_edit('RED_P');
      H.cntx_psh();
      H.use('_hist');
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));

      P.win_sel(_cfg.window);
      ($_cfg.prolog)();
      AreaTitle.setTabWin(P,_cfg.window);
      AreaTitle.setTitle();
      _loop:=P.select();
      ($_cfg.epilog)();

      H_UM.cntx_pop();
      H.cntx_pop();
      P.cntx_pop();
      exec('otworz_h_um','pracownik');
      P.win_del(_cfg.window);
      obj_del(_cfg)

   ?}
!};

UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
~~


\ppl_zdr_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki ppl_zdr.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'formCB@panel','Forma współpracy'@);
_add(_TAB,'btnRok@panel','Rok'@);
_add(_TAB,'btnGrupowe@panel','Operacje grupowe'@);

_TAB


\ppl_zdr_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Główna formuła - Zakres danych (Umowy cywilnoprawne).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_edit:=__PARSES.editPar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych');
{? _edit
|| {!
   |? ~(__PARSES.getVal('F_ZATR').KOD='P' | __PARSES.getVal('F_ZATR').KOD='Z')
   |! FUN.info(
         'Wybrano błędną formę współpracy.'@+'\n'+
         'Należy wybrać spośród następujących form:'
         '\n- Pracownicy - zatrudnieni na podstawie umowy o pracę;'
         '\n- Zleceniobiorcy - współpraca na podstawie umów cywilnoprawnych.'@
      );
      {? ~__PARSES.editPar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych')
      || return()
      ?}
   !};
   _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.F_ZATR:=__PARSES.getVal('F_ZATR').REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}


\ppl_zdr_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła tworząca interfejs użytkownika dla obszaru roboczego ZDR w dziedzinie PPL.
::   WY: tablica elementów nazwanych z konfiguracją.
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=
   {? ~exec('interm','#system')
   || exec('pxx_widok_uproszczony','pkd','PPL_ZDR')
   || 1
   ?};
_main:='';
_side:='NAW_MIN';
_mode:='maximized';
{? ~_inTerm
||
   _main:='PPL_ZDR';
:  okienko główne obszaru - kontener do wstawiania zakładek
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  exec('load','#desktop','selektor','ppl_zdr.dsk',,,,,exec('ppl_zdr_dsk_pl','ppl'),1);
         params_exec('stdor_bf','pkd','T');
         grp_disp(UD_DEF,'NAW_MIN',1,1);
         1
      ",
:     identyfikator
      'or_ppl_zdr',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdor_oc','pkd')
         ?}
      ",,,
::    rozkład
      'jterm'
   );

:  utwórz selektor firmy jako kontrolkę
   exec('create','#desktop',P,'selektor',_wnd,2);

:  drzewko struktury organizacyjnej
   P.grp_splt(_wnd,,'horizontal','panel');
   P.grp_sel(_wnd,UD_DEF,_side,,
:     po odświeżeniu
      "params_exec('stdor_def_ar','pkd')",
:     położenie i wysokość
      ,,15,
:     przed obsługą
      "params_exec('stdor_def_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_def_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _side
   );

:  lista pracowników zatrudnionych we wskazanej jednostce
   P.grp_splt(_wnd,'panel','vertical','right');
   P.grp_sel(_wnd,P,_main,,
:     po odświeżeniu
      "  params_exec('stdor_p_ar','pkd');
         exec('set_value','#desktop','','selektor','rokTXT@panel',$__Rok);
         _wnd:=cur_win(1,1);
         _div:=':';
         _aid:='';
         {? exec('interm','#system')
         || _act:='J(I)';
            _aid:='%1%2%3%1'[_act,_aid,_div];
            _div:=''
         ?};
         {? exec('ses_get','xfilter',_wnd).SES=null
         || _aid:='W%1%2W'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         ?};
         P.actions_grayed(_wnd,_aid)
      ",
:     położenie i wysokość
      ,,15,
:     przed obsługą
      "params_exec('stdor_p_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_p_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _main,
:     główne
      1
   )
||
   _main:='PPL_ZDRI';
   _wnd:=P.grp_make(,
:     po wyświetleniu
      "  params_exec('stdin_bf','pkd','T');
         1
      ",
:     identyfikator
      'or_ppl_zdr',
:     położenie
      ,,
:     zamknięcie
      "  {? exec('exit','zws')
         || params_exec('stdin_oc','pkd')
         ?}
      "
   );
   P.grp_sel(_wnd,P,_main,,
:     po odświeżeniu
      "  params_exec('stdor_p_ar','pkd');
         _div:=':';
         _aid:='';
         _wnd:=cur_win(1,1);
         {? exec('interm','#system')
         || _act:='J(I)';
            _aid:='%1%2%3%1'[_act,_aid,_div];
            _div:=''
         ?};
         {? exec('ses_get','xfilter',_wnd).SES=null
         || _aid:='J(W)%1%2J(W)'[_aid,{? _aid*':'=0 || ':' || '' ?}]
         ?};
         P.actions_grayed(cur_win(1,1),_aid)
      ",
:     położenie i wysokość
      ,,15,
:     przed obsługą
      "params_exec('stdor_p_bs','pkd',_a)",
:     po obsłudze
      "params_exec('stdor_p_as','pkd',_a)",
:     utrwalenie, aktywacja, wypełnienie
      0,0,_mode,
:     identyfikator
      _main,
:     główne
      1
   )
?};
: obszar zakładek kartotek stowarzyszonych
P.grp_splt(_wnd,,'horizontal','bottom');

: przygotuj konfigurację obszaru roboczego
_cfg:=exec('pkd_conf','pkd','PPL_ZDR',P,_wnd,_main,_side);
_cfg.final:='T';

: dołącz kolejne zakładki
exec('ppl_conf_dek_11','ppl',_cfg);
exec('ppl_conf_dek_40','ppl',_cfg);
exec('ppl_conf_dek_8c','ppl',_cfg);
exec('ppl_conf_dek_if','ppl',_cfg);

: finalizuj konfigurację obszaru
exec('pkd_conf_end','pkd',_cfg);

: konfiguracja
_cfg


\ppl_zdr_widok_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PPL_ZDR')


\dsk_callback_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa przycisku "Zmień rok" w obszarze PPL_ZDR.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TPAR:=exec('tab_rok','edeklar','Deklaracje'@);
_TPAR.ROK:=__Rok;
_rok:=__Rok;
params_set('TPAR',_TPAR);

_okedit:=_TPAR.edit("_par:=params_get(); _TPAR:=_par.TPAR;
::          rok dla daty jest oparty na short int (max 32767)
            {? _TPAR.ROK>exec('max_rok','#datetime')
            || FUN.emsg('Podano błędny rok dla e-deklaracji.'@);
               return('ROK')
            ?};
            {? _TPAR.ROK>=2007
            || 1
            || FUN.emsg('E-deklaracje są dostępne tylko od 2007 roku.'@);
               return('ROK')
            ?}");
{? _okedit
|| __Rok:=_TPAR.ROK
|| __Rok:=_rok
?};

params_set(_par:=params_get());
{? var_press('_a')=-1 || exec('set_value','#desktop','','selektor','rokTXT@panel',$__Rok) ?};
win_activate(_par.cfg.nav.main);

AreaTitle.setTitle()

:_act:=_par.cfg.nav.main;
:_dis:='PPL_ZDR';

:grp_disp(P,_dis,0,0);
:win_activate(_act)


\zdr_dsk_get_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca dane dla selektora form współpracy. Formuła wykorzystywana również, przez akcję Dołącz w PKD_ZAT.
::   WE:  _a  [STRING] - typ formy współpracy: T - docelowa, N - przejściowa
::   WY: alias do tabeli tymczasowej zawierającej listę form współpracy.
::----------------------------------------------------------------------------------------------------------------------
_docelowa:=_a;

_rs:=sql('select 0 as LP, F.REFERENCE as REF, F.KOD as KOD, F.OPIS as OPIS from F_ZATR as F where 0=1');

exec('filtruj','f_zatr',_docelowa,'OPIS');
_loop:=F_ZATR.f_first();
{!
|? _loop
|! {? F_ZATR.KOD='P' | F_ZATR.KOD='Z'
   || _rs.LP+=1;
      _rs.REF:=$F_ZATR.ref();
      _rs.KOD:=F_ZATR.KOD;
      _rs.OPIS:=spli_str(F_ZATR.OPIS,'-')[1];
      _rs.add()
   ?};
   _loop:=F_ZATR.f_next()
!};

_rs


\ppl_conf_os_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Udostępnia nieobecności zleceniobiorcy
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ndx:={? PAR_SKID.get(236)='T' || 'ONDX' || 'OND' ?};
{? ~_a.init(_a,OS_N,_ndx,'WER','Z','Z','PPL_ZLC_RNIE','PPL_ZLC_PNIE')
|| return()
?};

_a.prolog+=
   "  OS_N.cntx_psh();
      OS_N.win_edit('RED');
      OS_N.win_patt('WZO');
   ";
_a.epilog+="OS_N.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Nieobecności'@,"",,,,
   $($_a.bs)(_a.map,
      "  _ndx:=OS_N.index('?');
         OS_N.index('OND');
         OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_N.index('ONDX');
         OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         OS_N.index(_ndx);
         OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref())
      "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_dek_40
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Udostępnia deklaracje PIT-40
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,VAT_DEK,'VAT_PRAC','WERP40','','','PPL_ZDR_D40D','PPL_ZDR_D40W',P)
|| return()
?};

_a.prolog+="
   VAT_DEK.cntx_psh();
   VAT_DEK.win_fml('WERP40',,'NR','NR','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   exec('inipit40_select','edeklar','PIT40',__Rok);";
_a.epilog+="
   exec('end_inipit40','edeklar');
   VAT_DEK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Deklaracje PIT-40'@,,,,,
   $($_a.bs)(_a.map,"
      EDIT_VAR.PIT_RODZ:='';
      BPMN.SYM_DOM:='PPL';
      _pitTyp:='PIT40';
      _rodzDekl:='R';
      _dekprok:=rok_dekp;
::Po zmianie usuniecia ROK_F i OKRO_F data _dekprok bedzie date(1,1,1)
      {? var_pres('__Rok')<0
      || {? ~exec('inipit40_select','edeklar',_pitTyp)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      |? _cfg.extra.rok<>__Rok
      || {? ~exec('inipit40_select','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?};
         _cfg.extra.rok:=__Rok
      |? _pitTyp<>pit_typ
      || {? ~exec('inipit40_select','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      ?};
      SKID.DEKL_NAZ:='PIT40';
      VAT_DEK.index('VAT_PRAC');
      VAT_DEK.prefix(P.ref(),_rodzDekl,_dekprok,okres);
      {? _dekprok=date(1,1,1) | __Rok>=2017
      || return('#disable')
      ?}
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_dek_8c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Udostępnia deklaracje PIT-8C
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,VAT_DEK,'VAT_PRAC','WER8C','','','PPL_ZDR_D8CD','PPL_ZDR_D8CW',P)
|| return()
?};

_a.prolog+="
   VAT_DEK.cntx_psh();
   VAT_DEK.win_fml('WER8C',,'NR','NR','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   exec('pit8c_ini','edeklar','PIT8CP',__Rok);";
_a.epilog+="
   exec('pit8c_end','edeklar');
   VAT_DEK.cntx_pop();";


_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Deklaracje PIT-8C'@,,,,,
   $($_a.bs)(_a.map,"
      EDIT_VAR.PIT_RODZ:='';
      BPMN.SYM_DOM:='PPL';
      _pitTyp:='';
      _rodzDekl:='';
      {? P_FILTER.F_ZATR().KOD='P'
      || _pitTyp:='PIT8CP';
         _rodzDekl:='K'
      |? P_FILTER.F_ZATR().KOD='Z'
      || _pitTyp:='PIT8CZ';
         _rodzDekl:='L'
      ?};
::Po zmianie usuniecia ROK_F i OKRO_F data _dekprok bedzie date(1,1,1)
      _dekprok:=rok_dekp;

      {? var_pres('__Rok')<0
      || {? ~exec('pit8c_ini','edeklar',_pitTyp)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      |? _cfg.extra.rok<>__Rok
      || {? ~exec('pit8c_ini','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?};
         _cfg.extra.rok:=__Rok
      |? _pitTyp<>pit_typ
      || {? ~exec('pit8c_ini','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      ?};
      SKID.DEKL_NAZ:='PIT8C';
      VAT_DEK.index('VAT_PRAC');
      VAT_DEK.prefix(P.ref(),_rodzDekl,_dekprok,okres);
      {? _dekprok=date(1,1,1)
      || return('#disable')
      ?}
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_conf_dek_if
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Udostępnia deklaracje IFT1/IFT1R
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,VAT_DEK,'VAT_PRAC','WERIFT1','','','PPL_ZDR_DIFD','PPL_ZDR_DIFW',P)
|| return()
?};

_a.prolog+="
   VAT_DEK.cntx_psh();
   VAT_DEK.win_fml('WERIFT1',,'NR','NR','ICON_BEFORE',""exec('x_zalacz_icon','zalacz')"");
   exec('ift1_ini','edeklar','IFT1',__Rok);";
_a.epilog+="
   exec('ift1_end','edeklar');
   VAT_DEK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Deklaracje IFT1/IFT1R'@,,,,,
   $($_a.bs)(_a.map,"
      EDIT_VAR.PIT_RODZ:='';
      BPMN.SYM_DOM:='PPL';
      _pitTyp:='IFT1';
      _rodzDekl:='F';
      _dekprok:=rok_dekp;
::Po zmianie usuniecia ROK_F i OKRO_F data _dekprok bedzie date(1,1,1)
      {? var_pres('__Rok')<0
      || {? ~exec('ift1_ini','edeklar',_pitTyp)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      |? _cfg.extra.rok<>__Rok
      || {? ~exec('ift1_ini','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?};
         _cfg.extra.rok:=__Rok
      |? _pitTyp<>pit_typ
      || {? ~exec('ift1_ini','edeklar',_pitTyp,__Rok)
         || _dekprok:=date(1,1,1)
         || _dekprok:=rok_dekp
         ?}
      ?};
      SKID.DEKL_NAZ:='IFT1';
      VAT_DEK.index('VAT_PRAC');
      VAT_DEK.prefix(P.ref(),_rodzDekl,_dekprok,okres);
      {? _dekprok=date(1,1,1)
      || return('#disable')
      ?}
   "),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\generowanie_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Okno do wyboru rodzaju generowanych załączników
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'SKROT','STRING[10]','Skrót','OPIS','STRING[100]','Opis','FORMULA','STRING[70]','Formuła do wykonania');
_add:="_a.SKROT:=_b; _a.OPIS:=_c; _a.FORMULA:=_d; _a.add()";
_wyb:=_tab.mk_sel('Generowanie załączników'@,,0,'generowaniezal',,,10,,'U');
_tab.win_fld(_wyb,,'SKROT',,,'10,15',,1,'Skrót'@);
_tab.win_fld(_wyb,,'OPIS',,,'100,',,1,'Opis'@);
_tab.win_act(_wyb,0,'Formuła','Wybierz'@@,,,"($(cur_tab().FORMULA))()",,1,,,,'W');
_tab.win_btn(_wyb,'text=%1,panel=bottom,align=end'['&OK'@],'menu:W');
_tab.win_btn(_wyb,'text=%1,panel=bottom,align=end'['&Anuluj'@],'key:Esc');
_tab.win_sel(_wyb);

_act_uid:='PPL_ZES_ZRMU';
{? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
|| _fml:="exec('np_run','#b__box','"+_act_uid+"')";
   _add(_tab,'RMUA','Dokumenty RMUA'@,_fml)
?};

_act_uid:='PPL_ZES_ZIMI';
{? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
|| _fml:="exec('np_run','#b__box','"+_act_uid+"')";
   _add(_tab,'IMiR','Dokumenty IMiR'@,_fml)
?};

_act_uid:='PPL_ZES_ZLST';
{? exec('chk_role','#b__box',OPERATOR.USER,_act_uid)
|| _fml:="exec('np_run','#b__box','"+_act_uid+"')";
   _add(_tab,'LISTA PŁAC','Paski listy płac'@,_fml)
?};

_tab.select()


\ppl_rp7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Główna formuła obszaru roboczego PPL_RP7 - Dane do Rp-7.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('init','ppl');
__PERSONEL:=1;

_cfg:=obj_new('rp7_os_last_mod');
_cfg.rp7_os_last_mod:=0;

params_set('cfg',_cfg);

R.cntx_psh();
R.index('RUBKOD');
R.prefix();
RP7_OS.cntx_psh();
RP7_OS.index('NAZWISKO');
RP7_OS.prefix();
RP7_OS.f_set('NAZWISKO,PIERWSZE,PESEL',,
   '("RP7_OS".P is null or "RP7_OS".P in (select REF from :_a))',exec('dostepne_p','schemat','PPL','P'));
RP7_RK.cntx_psh();
RP7_RK.index('ROK');
RP7_RK.prefix();
RP7_KP.cntx_psh();
_ind:={? PAR_SKID.get(236)='T' || 'ROKX' || 'ROK' ?};
RP7_KP.index(_ind);
RP7_KW.cntx_psh();
RP7_KW.index('ZAPIS');
RP7_NB.cntx_psh();
RP7_NB.index('OD');

RP7_OS.win_sel(exec('ppl_rp7_config','ppl'));
RP7_OS.win_edit('RED');
RP7_OS.win_patt('WZO');

RP7_OS.select();

RP7_NB.cntx_pop();
RP7_KW.cntx_pop();
RP7_KP.cntx_pop();
RP7_RK.cntx_pop();
RP7_OS.cntx_pop();
R.cntx_pop();

~~


\ppl_rp7_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.14]
:: OPIS: Formuła tworząca interfejs obszaru roboczego PPL_RP7.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';

_grp:=RP7_OS.grp_make('Dane do ERP-7'@,,,,,"exec('exit','zws')",,_mode);

:: Część górna - osoby.
RP7_OS.grp_sel(_grp,RP7_OS,'WER',,
   "  params_set(_par:=params_get());
      {? ~RP7_OS.sel_size()
      || _cfg:=_par.cfg;
         _lm:=exec('last_mod_get','#table',RP7_OS);
         {? _cfg.rp7_os_last_mod<>_lm
         || {? _cfg.rp7_os_last_mod
            || RP7_OS.f_rfresh();
               win_disp()
            ?};
            _cfg.rp7_os_last_mod:=_lm
         ?}
      ?};
      grp_disp(RP7_KP,'WER',1);
      grp_disp(RP7_NB,'WER',1)
   ",,,,,
   "exec('stn_ao','stanprac')",,,
   _mode
);

:: Część dolna - zakładki.
RP7_OS.grp_splt(_grp,,'horizontal','dane',15);

:: Wynagrodzenie (lata + wyjaśnienia).
RP7_OS.grp_sel(_grp,RP7_KP,'WER','Wynagrodzenie'@,"grp_disp(RP7_KW,'WER')",,,,
   "  {? grp_empty(RP7_OS,'WER')
      || '#disable'
      || RP7_KP.prefix(RP7_OS.ref())
      ?}
   ",
   "grp_disp(RP7_KW,'WER')",,,_mode
);
RP7_OS.tab_splt(_grp,,'vertical','rp7_kw',',70%');
RP7_OS.grp_sel(_grp,RP7_KW,'WER',,,,,,
   "  {? grp_empty(RP7_OS,'WER') | grp_empty(RP7_KP,'WER')
      || '#disable'
      || RP7_KW.prefix(RP7_KP.ref())
      ?}
   ",,,,_mode
);

:: Nieobecności.
RP7_OS.grp_sel(_grp,RP7_NB,'WER','Nieobecności'@,,,,,
   "  {? _a
      || _rs:=__RUB.sys_sql(191);
         {? _rs=''
         || _rs:='0'
         ?};
         R.cntx_psh();
         R.prefix();
         R.f_set('RN',,'\"R\".RN in (:_a)',_rs)
      ?};
      {? grp_empty(RP7_OS,'WER')
      || '#disable'
      || RP7_NB.prefix(RP7_OS.ref())
      ?}
   ",
   "  {? _a
      || R.f_clear();
         R.cntx_pop()
      ?}
   ",,,_mode
);

_grp


\tab_month
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.22]
:: OPIS: Formuła przygotowuje tablicę kolejnych miesięcy z wybranego przez użytkownika okresu - z dokładnością do roku
::       i miesiąca. Wykorzystywane w nowym raporcie: "Pełne zestawienie składników w wybranym okresie". Wszystkie daty
::       przzekazywane są typu liczbowego.
::   WE: _a - rok od
::       _b - miesiąc od
::       _c - rok do
::       _d - miesiąc do
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_okres:=tab_tmp(1,
   'LP','INTEGER','',
   'ROK','INTEGER','',
   'MIESIAC','INTEGER',''
);
_rok_od:=_a;
_mies_od:=_b;
_rok_do:=_c;
_mies_do:=_d;
_min:=_rok_od*100+_mies_od;
_max:=_rok_do*100+_mies_do;
_petla:=0;
_miesiac:=_mies_od;
{? _rok_od=_rok_do & _mies_od=_mies_do
|| _okres.LP:=1;
   _okres.MIESIAC:=_mies_od;
   _okres.ROK:=_rok_od;
   _okres.add()
|| {!
   |? ~(_min=_max)
   |! _petla+=1;
      _okres.LP+=1;
      {? _petla=1
      || _okres.MIESIAC:=_miesiac;
         _okres.ROK:=_rok_od
      || _okres.MIESIAC:=_miesiac+1;
         _miesiac+=1
      ?};
      {?  _okres.MIESIAC=13
      ||  _okres.ROK:=_okres.ROK+1;
          _okres.MIESIAC:=1;
          _miesiac:=1
      ?};
      _min:=_okres.ROK*100+_okres.MIESIAC;
      _okres.add()
   !}
?};
_okres


\o_p_storno_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed dołączeniem storno listy płac.
::   WE: _a [INTEGER] - nie wyświetlaj komunikatu (<>0)
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
_msg:=(var_pres('_a')<>type_of(0) | _a=0);
{? P.sel_size()>0
|| _msg:=0
?};

_nfo:=
   {? _msg
   || "FUN.emsg('%1\n%2'['Utworzenie storno składników wynagrodzenia nie jest możliwe.'@,_a])"
   || ""
   ?};

_ret:=exec('storno_ustal_o','lista_pow',O_P.O);
:: czy istnieje lista storno?
{? _ret.VALUE=null
|| _nfo(_ret.INFO);
   return(0)
?};
_pod:=_ret.VALUE;
obj_del(_ret);

:: czy storno listy jest otwarte?
O.cntx_psh();
SEEK.O:=_pod;
_lck:=(SEEK.O().Z='T');
_olt:=~-O.LT;
O.cntx_pop();
{? _lck
|| _nfo('Lista płac %1 jest zamknięta.'@[_olt]);
   return(0)
?};

_lck:=-1;
_olt:='';
O_O.cntx_psh();
_ret:=exec('storno_szukaj','lista_pow',_pod,'POD',1);
{? _ret.VALUE<>null & O_O.seek(_ret.VALUE,,1)
:: czy lista źródłowa jest otwarta?
|| O.cntx_psh();
   SEEK.O:=O_O.NAD;
   _lck:=(SEEK.O().Z='T');
   _olt:=~-O.LT;
   O.cntx_pop()
?};
O_O.cntx_pop();

{? _lck<0
|| _nfo(exec('err_rec_acc','#message',_ret.VALUE));
   return(0)

|? _lck=0
|| _nfo('Lista płac %1 jest otwarta.'@[_olt]);
   return(0)
?};

1


\o_p_storno_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Dołączenie storno listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('storno_utworz_ls','lista_pow',O_P.O,O_P.P);

{? P.sel_size()=0
|| P.f_rfresh();
   {? _ret.VALUE=0
   || FUN.emsg(_ret.INFO)
   || FUN.info(_ret.INFO)
   ?}
?};
~~


\o_p_storno_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed usunięciem storno listy płac.
::   WE: _a [INTEGER] - nie wyświetlaj komunikatu (<>0)
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
_msg:=(var_pres('_a')<>type_of(0) | _a=0);
{? P.sel_size()>0
|| _msg:=0
?};

_nfo:="FUN.emsg('%1\n%2'['Usunięcie storno składników wynagrodzenia nie jest możliwe.'@,_a])";

_ret:=exec('storno_ustal_o','lista_pow',O_P.O);
:: czy istnieje lista storno?
{? _ret.VALUE=null
|| {? _msg
   || _nfo(_ret.INFO)
   ?};
   return(0)
?};

:: czy storno listy jest zamknięte?
O.cntx_psh();
SEEK.O:=_ret.VALUE;
_lck:=(SEEK.O().Z='T');
_olt:=~-O.LT;
O.cntx_pop();
{? _lck
|| {? _msg
   || _nfo('Lista płac %1 jest zamknięta.'@[_olt])
   ?};
   return(0)
?};

1


\o_p_storno_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Usunięcie storno listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_ret:=exec('storno_usun_ls','lista_pow',O_P.O,O_P.P);

{? P.sel_size()=0
|| P.f_rfresh();
   {? _ret.VALUE=0
   || FUN.emsg(_ret.INFO)
   || FUN.info(_ret.INFO)
   ?}
?};
~~


\ppl_t_storno_inv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Pierwsze litery symboli typów list płac zastrzeżonych dla typów storno.
::   WE:
::   WY: ciąg znaków
::----------------------------------------------------------------------------------------------------------------------
'FUDZOSKPR'


\ppl_t_storno_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tablicę nazwaną wykorzystywaną jako parametr wtyczki ustalającej typ storna listy płac.
::   WE: _a [_O] - wskazanie wiersza tabeli O (domyślnie null)
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_buf:=obj_new(
   'O','O_R','O_M','O_T',
   'T','N','K','F','L','KA','F_ZATR','F_Z_KOD','ZC','FIRMA'
);

O.cntx_psh();
KT.cntx_psh();
SEEK.O:={? var_pres('_a')=type_of(null) || _a || null ?};
SEEK.O().T();

_buf.O:=SEEK.O;
_buf.O_R:=O.R;
_buf.O_M:=O.M;
_buf.O_T:=O.T;
_buf.T:=KT.T;
_buf.N:=KT.N;
_buf.K:=KT.K;
_buf.F:=KT.F;
_buf.L:=KT.L;
_buf.KA:=KT.KA;
_buf.F_ZATR:=KT.F_ZATR;
_buf.F_Z_KOD:=KT.F_ZATR().KOD;
_buf.ZC:=KT.ZC;
_buf.FIRMA:=KT.FIRMA;

KT.cntx_pop();
O.cntx_pop();

_buf


\ppl_t_storno_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Uruchamia wtyczkę PPL_T_STORNO_001 i przetwarza uzyskane informacje.
::   WE: _a [_O] - wskazanie wiersza tabeli O
::   WY: wskazanie typu listy płac
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_src:=_a;

:: spróbuj ustalić typ za pomocą wtyczki
_arg:=exec('ppl_t_storno_arg','ppl',_src);
_buf:=exec('ppl_t_storno_arg','ppl',_src);

{? ~Plugin.run('PPL_T_STORNO_001',_arg)
|| return(null)
?};

_ret:=null;

KT.cntx_psh();
KT.index('F_ZATR');
KT.prefix(_arg.FIRMA,_arg.F_ZATR);
{? KT.find_key(_arg.T,)
|| _ret:=KT.ref()
|| KT.blank();
   KT.T:=_arg.T;
   KT.N:=_arg.N;
   KT.K:=_arg.K;
   KT.F:=_arg.F;
   KT.L:=_arg.L;
   KT.KA:=_arg.KA;
   KT.F_ZATR:=_buf.F_ZATR;
   KT.ZC:=_buf.ZC;
   KT.FIRMA:=_buf.FIRMA;
   {? KT.add()
   || _ret:=KT.ref()
   ?}
?};
KT.cntx_pop();

{? _ret<>null
:: dodaj parametr STORNO z wartością ustawioną na T
|| exec('dodaj','o_xpar',,_ret,exec('kod_storno','ext_slo'),'T')
?};

_ret


\ppl_t_storno_001
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przykładowa wtyczka PPL_T_STORNO_001.
::   WE: _a [OBJECT] - wskazanie tablicy nazwanej (patrz opis gniazda)
::       _b [STRING] - pierwszy znak symbolu typu listy płac (domyślnie 'M')
::   WY: 0/1 - ignoruj/wyszukaj lub utwórz typ listy płac
::UWAGA: Wtyczka może być wykorzystana po analizie zasad tworzenia nagłówków list płac przez klienta.
::       Należy ustalić jaka litera będzie wykorzystywana jako pierwszy znak symbolu. Nie może nią być wykorzystywana
::       dotychczas, ponieważ do istniejących kryteriów może zostać dodany parametr STORNO, co uniemożliwi ich wybrór
::       podczas tworzenia nagłówków list płac.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_beg:={? var_pres('_b')=type_of('') & |_b<>'' || ~-(1+_b) || 'M'  ?};

{? exec('ppl_t_storno_inv','ppl')*_beg
:: znak zastrzeżony
|| return(0)
?};

:: zestaw znaków, do budowy symbolu
_set:='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
_gen:='';

O.cntx_psh();
O.index('LISTYPLA');
O.prefix(_arg.FIRMA,_arg.F_Z_KOD,_arg.O_R,_arg.O_M);
{! _ni:=1..+_set
|? _gen=''
|! {! _mi:=1..+_set
   |? _gen=''
   |! _tmp:=_beg+(_ni+_set+1)+(_mi+_set+1);
      {? ~O.find_key(_tmp,)
      || _gen:=_tmp
      ?}
   !}
!};
O.cntx_pop();

:: ustalenie symbolu nie powiodło się
{? _gen=''
|| return(0)
?};

_arg.T:=_gen;
_arg.N:='storno';
_arg.K:='';
_arg.F:='S';

1


\ppl_t_storno_002
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przykładowa wtyczka PPL_T_STORNO_001.
::   WE: _a [OBJECT] - wskazanie tablicy nazwanej (patrz opis gniazda)
::       _b [STRING] - pierwsze litery symbolu typu do zmiany (domyślnie 'FUDZ')
::       _c [STRING] - pierwsze litery nowego symbolu typu (domyślnie 'XYVQ')
::   WY: 0/1 - ignoruj/wyszukaj lub utwórz typ listy płac
::UWAGA: Wtyczka może być wykorzystana po analizie zasad tworzenia nagłówków list płac przez klienta.
::       Należy ustalić jaka litera będzie wykorzystywana jako pierwszy znak symbolu. Nie może nią być wykorzystywana
::       dotychczas, ponieważ do istniejących kryteriów może zostać dodany parametr STORNO, co uniemożliwi ich wybrór
::       podczas tworzenia nagłówków list płac.
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_old:='FUDZ';
_new:='XYVQ';

{? var_pres('_b')=type_of('') & var_pres('_c')=type_of('')
:: zmiana domyślnej translacji
|| {? +_b<>+_c | _b=_c
::    podstawowy błąd
   || return(0)
   ?};

   _old:=~-_b;
   _new:=~-_c;
   _len:=+_old;

   {! _ii:=1.._len
   |! _chr:=_ii+_old+1;
      {? _new*_chr<>0
::       cykl w mapie
      || return(0)
      ?}
   !};
   {! _ii:=1.._len
   |! _chr:=_ii+_new+1;
      {? exec('ppl_t_storno_inv','ppl')*_chr<>0
::       znak zastrzeżony
      || return(0)
      ?}
   !};
   {! _ii:=1.._len
   |! {? (_ii-_old)*(_ii+_old+1)<>0 | (_ii-_new)*(_ii+_new+1)<>0
::       niejednoznaczność
      || return(0)
      ?}
   !};
   _set:='ABCDEFGHIJKLMNOPQRSTUVWXYZ';
   {! _ii:=1.._len
   |! {? _set*(_ii+_old+1)=0 | _set*(_ii+_new+1)=0
::       niedozwolony znak
      || return(0)
      ?}
   !}

|? var_pres('_b')>=0 | var_pres('_c')>=0
:: błędny typ lub brak argumentu
|| return(0)
?};

_chr:=1+_arg.T;
{? (_pos:=_old*_chr)=0
|| return(0)
?};

_org:=_arg.T;
_arg.T:=(_pos+_new+1)+(1-_arg.T);
_arg.N:='storno dla listy '+_org;
_arg.K:='';
_arg.F:='S';

1


\ppl_conf_gp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Przepracowane godziny wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'MSCDKWX' || 'MSCDKW' ?};
{? ~_a.init(_a,G,_ind,'WER_PRCZ','Z','Z','PPL_PLL_RGOD','PPL_PLL_PGOD',P)
|| return()
?};

_a.prolog+="G.cntx_psh();";
_a.epilog+="G.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny pracy'@,
   "G.hdr_edit();G.hdr_edit(', miesiąc rozliczeniowy: %1'@[form(date(VAR.AR,VAR.AM,1),,8)])",,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      ZMIENNE.RODZAJ:='Z';
      EDIT_VAR.KOD_DOK:='G';
      VAR.AR:={? VAR.AR<>0 || VAR.AR || date()~1 ?};
      VAR.AM:={? VAR.AM<>0 || VAR.AM || date()~2 ?};
      exec('ustaw_maski','godziny',VAR.AR,VAR.AM);

      G.index('MSCKW_KK');
      G.prefix(P.ref(),VAR.AM,'G');
      G.index('MSCDKW');
      G.prefix(P.ref(),VAR.AM,'G');
      G.index('MSCDKWX');
      G.prefix(P.ref(),VAR.AM,'G');
      G.index(_map.INDEX);
      G.prefix(P.ref(),VAR.AM,'G');

      exec('CON','object');
      exec('ustaw_okno','godziny','PPL_PLL_RGOD')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'WER_PRCZ'
)


\ppl_zlc_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Główna formuła - Zakres danych (Umowy cywilnoprawne).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? __PARSES.editPar('JednostkaOrganizacyjna','ZakresDanych')
|| _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}


\ppl_conf_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie pracy poza siedzibą firmy współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'DATAX' || 'DATA' ?};
{? ~_a.init(_a,PPSFN,_ind,'WER','Z','Z','PPL_PLL_RPSF','PPL_PLL_PPSF',P)
|| return()
?};

_a.prolog+="
   PPSFN.cntx_psh();
   PPSFN.win_edit('RED');
   PPSFN.win_patt('WZO');
   PPSFP.cntx_psh();
   PPSFP.win_edit('RED');
   PPSFT.win_sel('SLO');
   PPSFT.win_edit('RED');
   PPSFT.win_patt('WZO');
";
_a.epilog+="
   PPSFP.cntx_pop();
   PPSFN.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Praca poza siedzibą firmy'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=PPSFN.index('?');
         PPSFN.index('DATA');
         PPSFN.prefix(exec('firma','ustawienia'),P.ref());
         PPSFN.index('DATAX');
         PPSFN.prefix(exec('firma','ustawienia'),P.ref());
         PPSFN.index(_ndx);
         PPSFN.prefix(exec('firma','ustawienia'),P.ref())
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode,'zdalna'
)


\ppl_conf_ppsg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie miesięcznego rozliczenia godzin pracy poza siedzibą firmy współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'PRMOX' || 'PRMO' ?};
{? ~_a.init(_a,PPSFP,_ind,'WER','Z','Z','PPL_PLL_RPSF','PPL_PLL_PPSF',P)
|| return()
?};

_a.prolog+="
   PPSFP.cntx_psh();
   PPSFP.win_sel('WER');
   PPSFP.win_edit('RED');
";
_a.epilog+="
   PPSFP.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Praca poza siedzibą firmy'@,,,,,
   $($_a.bs)(_a.map,
      "  _ndx:=PPSFP.index('?');
         PPSFP.index('PRMO');
         PPSFP.prefix(exec('ref_firma','ustawienia'),P.ref(),A_OKRM.R,A_OKRM.M);
         PPSFP.index('PRMOX');
         PPSFP.prefix(exec('ref_firma','ustawienia'),P.ref(),A_OKRM.R,A_OKRM.M);
         PPSFP.index(_ndx);
         PPSFP.prefix(exec('ref_firma','ustawienia'),P.ref(),A_OKRM.R,A_OKRM.M)
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\ppl_pll_zmmc_001_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tablicę nazwaną wykorzystywaną jako parametr wtyczki sprawdzającej możliwość zamknięcia listy płac.
::   WE: _a [_O] - wskazanie wiersza tabeli O (domyślnie bieżąca)
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_buf:=obj_new('O','RAPORT','info');

:: wskazanie listy płac, dla której sprawdzana jest możliwość zamknięcia
_buf.O:={? var_pres('_a')=type_of(null) || _a || O.ref() ?};

:: raport ze sprawdzenia
_buf.RAPORT:=tab_tmp(5,
   'LT','STRING[%1]'[$MS.fld_len(O,'LT')],'Lista'@,
   'IP','INTEGER',MS.name(P,'IP'),
   'T','STRING[%1]'[$MS.fld_len(P,'T')],MS.name(P,'T'),
   'NAZWISKO','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],MS.name(OSOBA,'PIERWSZE'),
   'SYMBOL','STRING[%1]'[$MS.fld_len(UD_SKL,'SYMBOL')],MS.name(P,'WYDZIAL'),
   'ST','STRING[%1]'[$MS.fld_len(STN,'ST')],MS.name(P,'ST'),
   'INFO','SYS_MEMO','Opis'@
);

:: zapis pozycji zaportu
_buf.info:="
   _so:=SEEK.O;
   _sp:=SEEK.P;
   O.cntx_psh();
   P.cntx_psh();
   OSOBA.cntx_psh();
   UD_SKL.cntx_psh();

   SEEK.O:=.O;
   SEEK.P:={? var_pres('_a')=type_of(null) & _a<>null || _a || null ?};
   SEEK.P().OSOBA();

   .RAPORT.blank();
   .RAPORT.LT:=~-SEEK.O().LT;
   .RAPORT.IP:=P.IP;
   .RAPORT.T:=P.T;
   .RAPORT.NAZWISKO:=OSOBA.NAZWISKO;
   .RAPORT.PIERWSZE:=OSOBA.PIERWSZE;
   .RAPORT.SYMBOL:=P.WYDZIAL().SYMBOL;
   .RAPORT.ST:=P.ST().ST;
   .RAPORT.memo_set({? var_pres('_b')=type_of('') || _b || '' ?},'INFO');
   .RAPORT.add() & .RAPORT.memo_put(,'INFO');

   UD_SKL.cntx_pop();
   OSOBA.cntx_pop();
   P.cntx_pop();
   O.cntx_pop();
   _so==SEEK.O;
   _sp==SEEK.P;
   ~~
";

_buf


\ppl_pll_zmmc_001_rap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyświetla raport z kontroli zamknięcia list płac.
::   WE: _a OBJECT - wskazanie tablicy argumentów wtyczki PPL_PLL_ZMMC_001
::       _b INTEGER - 0/1 raport dla pojedynczej listy/wielu list
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_arg:=_a;
_mul:=_b;

_wid:='#ppl_zmmc_001';
_BUF:=_arg.RAPORT;

_hdr:='Pozycja raportu'@;
_len:=50;
_com:="
   _a.win_esep(_b,'Dane podstawowe'@);
   _a.win_efld(_b,,'LT',,,_c);
   _a.win_efld(_b,,'IP',,,_c);
   _a.win_efld(_b,,'T',,,_c);
   _a.win_efld(_b,,'NAZWISKO',,,_c);
   _a.win_efld(_b,,'PIERWSZE',,,_c);
   _a.win_efld(_b,,'SYMBOL',,,_c);
   _a.win_efld(_b,,'ST',,,_c)
";

_opt:='btn_label_align=center,panel=bottom,align=end';
_wnd:=_BUF.mk_edit(_hdr,0,_wid);
_com(_BUF,_wnd,_len);
_BUF.win_efld(_wnd,,'INFO',,,_len,-5);
_BUF.win_ebtn(_wnd,'text=%1,%2'['&OK'@,_opt],'key:Esc');
_BUF.win_edit(_wnd);

_wnd:=_BUF.mk_edit(_hdr,0,_wid);
_com(_BUF,_wnd,_len);
_BUF.win_ebtn(_wnd,'text=%1,%2'[exec('text_red_ok','#window'),_opt],'key:F2');
_BUF.win_ebtn(_wnd,'text=%1,%2'['&Anuluj'@,_opt],'key:Esc');
_BUF.win_patt(_wnd);

_hdr:=
   {? _mul=0
   || _so:=SEEK.O;
      O.cntx_psh();
      SEEK.O:=_arg.O;
      _lt:=~-SEEK.O().LT;
      O.cntx_pop();
      _so==SEEK.O;
      'Raport z zamknięcia listy płac %1'@[_lt]
   || 'Raport z zamknięcia list płac'@
   ?};

_wnd:=_BUF.mk_sel(_hdr,'P',0,_wid,,,,,'U');
{? _mul<>0
|| _BUF.win_fld(_wnd,,'LT')
?};
_BUF.win_fld(_wnd,,'IP',,,-10);
_BUF.win_fld(_wnd,,'T',,,-MS.fld_len(_BUF,'T'));
_BUF.win_fld(_wnd,,'NAZWISKO',,,-20);
_BUF.win_fld(_wnd,,'PIERWSZE',,,-20);
_BUF.win_fld(_wnd,,'SYMBOL',,,-MS.fld_len(_BUF,'SYMBOL'));
_BUF.win_fld(_wnd,,'ST',,,-30);
_BUF.win_fld(_wnd,,'INFO',,,-50);

_BUF.win_act(_wnd,,'Szukaj');
_BUF.win_act(_wnd,,'Kolejność');

_BUF.win_sel(_wnd);

_BUF.select();
_BUF.erase();
~~


\ppl_conf_os_zwpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie rozliczenia zwolnionego przychodu dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ind:={? PAR_SKID.get(236)='T' || 'OS_RMOR' || 'OS_ZWPOZ' ?};
{? ~_a.init(_a,OS_ZWPOZ,_ind,'WER','Z','Z','PPL_PLL_RRZP','PPL_PLL_PRZP',P)
|| return()
?};

_a.prolog+="
   OS_ZWPOZ.cntx_psh();
   OS_ZWPOZ.win_sel('WER');
";
_a.epilog+="
   OS_ZWPOZ.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Zwolnione przychody'@,,,,,
   $($_a.bs)(_a.map,
      "  P.cntx_psh();
         O.cntx_psh();
         RH.cntx_psh();
         _ndx:=OS_ZWPOZ.index('?');
         OS_ZWPOZ.index('OS_ZWPOZ');
         OS_ZWPOZ.prefix(exec('ref_firma','ustawienia'),REF.OSOBA);
         OS_ZWPOZ.index('OS_RMOR');
         OS_ZWPOZ.prefix(exec('ref_firma','ustawienia'),REF.OSOBA);
         OS_ZWPOZ.index(_ndx);
         OS_ZWPOZ.prefix(exec('ref_firma','ustawienia'),REF.OSOBA)
      "
   ),
   $($_a.as)(_a.map,
      "  RH.cntx_pop();
         O.cntx_pop();
         P.cntx_pop()
      "
   ),
   ,,_a.mode
)


\ppl_conf_p_npod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Wyświetlenie nadwyżki zaliczki na podatek dla współpracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.ROK:=date()~1;
{? __F_ZATR.P='P'
|| _wer:='WER_P';
   _ind:={? PAR_SKID.get(236)='T' || 'OKNO_OX' || 'OKNO_O' ?}
|| _wer:='WER_Z';
   _ind:={? PAR_SKID.get(236)='T' || 'OKNO_RHX' || 'OKNO_RH' ?}
?};
{? ~(var_pres('P_NPOD')=type_of(SYSLOG)) |
   ~_a.init(_a,P_NPOD,_ind,_wer,'Z','Z','PPL_PLL_RNZP','PPL_PLL_PNZP',P)
|| return()
?};

_a.prolog+="
   P_NPOD.cntx_psh();
   _wer:={? __F_ZATR.P='P' || 'WER_P' || 'WER_Z' ?};
   P_NPOD.win_sel(_wer);
";
_a.epilog+="
   P_NPOD.cntx_pop();
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Nadwyżki zaliczki'@,
   "  POLA_GRP.REAL_1:=POLA_GRP.REAL_2:=POLA_GRP.REAL_3:=0;
      P_NPOD.cntx_psh();
      {? __F_ZATR.P<>'Z'
      || P_NPOD.index('OKNO_OX')
      || P_NPOD.index('OKNO_RHX')
      ?};
      {? EDIT_VAR.ROK<2022 || EDIT_VAR.ROK:=date()~1 ?};
      _nadwyzka:=_roznica:=0;
      P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK);
      {? P_NPOD.first()
      || {!
         |? {? P_NPOD.TYP='N'
            || _nadwyzka+=P_NPOD.NADWYZKA
            || _roznica+=P_NPOD.ROZNICA
            ?};
            P_NPOD.next()
         !}
      ?};
      P_NPOD.cntx_pop();
      _bilans:=_nadwyzka - _roznica;
      {? _bilans<0
      || _bilans:=0
      ?};
      POLA_GRP.REAL_1:=_nadwyzka;
      POLA_GRP.REAL_2:=_roznica;
      POLA_GRP.REAL_3:=_bilans
   ",,,,
   $($_a.bs)(_a.map,
      "  P.cntx_psh();
         O.cntx_psh();
         RH.cntx_psh();
         _ndx:=P_NPOD.index('?');
         P_NPOD.index('OKNO_O');
         P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK);
         P_NPOD.index('OKNO_OX');
         P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK);
         P_NPOD.index('OKNO_RH');
         P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK);
         P_NPOD.index('OKNO_RHX');
         P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK);
         P_NPOD.index(_ndx);
         P_NPOD.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,REF.OSOBA,EDIT_VAR.ROK)
      "
   ),
   $($_a.as)(_a.map,
      "  RH.cntx_pop();
         O.cntx_pop();
         P.cntx_pop()
      "
   ),
   ,,_a.mode
)


\pplzlcLinkSelect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Rozbudowany "select" dla obszaru PPL_ZLC (okienko grupowe) z uwzględnieniem wejścia przez wynik wyszukiwarki
::       danych.
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
params_set(_par:=params_get());
_link:=_par.link;
_TAB:=ref_tab(_link);

_TAB.cntx_psh();
{? (_TAB=ZC) & _TAB.seek(_link)
|| {? P.seek(_TAB.P)
   || _result:=P.select(,1,5)
   ?}
?};
_TAB.cntx_pop();
_result


\pplzlcLinkActivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Aktywacja zakładki związanej z linkiem
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_MAP:=_par.cfg.map;
_MAP.cntx_psh();
_MAP.prefix();

_link:=_par.link;
_TAB:=ref_tab(_link);
_TAB.cntx_psh();
{? _TAB.seek(_link)
|| {? _MAP.find_tab(,'TABLE',,'=',!_TAB)
   || win_set('cur_row_pos=1',_TAB,_MAP.WINDOW,_MAP.NRTAB,'bottom')
   ?};
   {? _TAB=ZC
   || win_activate('zc_wer')
   ?}
?};
_TAB.cntx_pop();
_MAP.cntx_pop();
1


\ppl_conf_phw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Udostępnia Start/Stop'y
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('is_pzd02','ppsf') || return() ?};
_ind:={? PAR_SKID.get(236)='T' || 'NRX' || 'NR' ?};
{? ~_a.init(_a,R_POR_WW,_ind,'WER','Z','Z','PPL_PLL_RPHW','PPL_PLL_PPHW',P)
|| return()
?};

_a.prolog+="
   Cntx.psh(R_POR_WW,PPSFT,O);
   PPSFT.fld_fml('SKL_RCP','BLANK',\"'T'\");
   R_POR_WW.fld_attr('CREATOR',2);
";
_a.epilog+="
   Cntx.pop(R_POR_WW,PPSFT,O);
   PPSFT.fld_fml('SKL_RCP','BLANK',\"*\");
   R_POR_WW.fld_attr('CREATOR',1);
";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Start/Stop'@,,,,,
   $($_a.bs)(_a.map,"
      VAR.AR:={? VAR.JESTLIST || VAR.O().R || date()~1 ?};
      VAR.AM:={? VAR.JESTLIST || VAR.O().M || date()~2 ?};
      R_POR_WW.hdr_edit();
      R_POR_WW.hdr_edit(', miesiąc rozliczeniowy: %1'@[form(date(VAR.AR,VAR.AM,1),,8)]);
      _year:=($(VAR.AR))+2;
      _month:={? VAR.AM>=10 || $VAR.AM || '0%1'[$VAR.AM] ?};
      _mask:='r_ph%1%2'[_year,_month];
      {? R_POR_WW.name()<>_mask
      || R_POR_WW.use(_mask)
      ?};
      PPSFT.index('NAZRODZ');
      PPSFT.prefix(exec('ref_firma','ustawienia'),'T',);
      R_POR_WW.index('NR');
      R_POR_WW.prefix(P.ref());
      R_POR_WW.index('NRX');
      R_POR_WW.prefix(P.ref());
      R_POR_WW.index('DZK');
      R_POR_WW.prefix(P.ref());
      R_POR_WW.index(_map.INDEX);
      R_POR_WW.prefix(P.ref())
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'WER'
)

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:28 65839ffa6ca188d55dbef96a7ad169435060ecfc20aabfd13be0e785054f80b32f42dc427d44482b97fe8cbec9fe02e4131af58294f357ab42428c13f3f3565e1cf3b52e55dbcc74cf2a0affaf1202358014f1a4c7f6b696fc229ac6f8cc1dc7ed6f9a473c0b204b0f7d56a15328cc0f0f7af73a6e2df635cfc48ca7ab32275f
