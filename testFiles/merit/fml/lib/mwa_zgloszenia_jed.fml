:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_zgloszenia_jed.fml
:: Utworzony: 06.05.2019
:: Autor: Markus
:: Systemy: Merit
::======================================================================================================================
:: Zawartość: Formuły do obsługi zgłoszeń jednorazowych przez MacroWebAPI
::======================================================================================================================


\obj_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Zwraca definicję tabeli tymczasowej zawierającej przepisującą dane do tabel ZLP i ZLE
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__Zgloszenia_jednorazowe')>0 || obj_del(__Zgloszenia_jednorazowe) ?};
__Zgloszenia_jednorazowe:=tab_tmp(1
:: 'POLE','TYP','Nazwa w oknie',
:: tabela ZLE
   ,'REF_ZLE','STRING[16]','REFERENCE ZLE'
   ,'UID_ZLE','STRING[48]','UIDREF ZLE'
   ,'KH','STRING[16]','REFERENCE Kontrahent'@
   ,'POS','STRING[16]','REFERENCE Posesja'@
   ,'TAR','STRING[10]','Kod cennika'@
   ,'ODDZ','STRING[1]','Kod oddziału'@
:: tabela ZLP
   ,'REF_ZLP','STRING[16]','REFERENCE ZLP'
   ,'UID_ZLP','STRING[48]','UIDREF ZLP'
   ,'IDADD','STRING[31]','IDADD ZLP'
   ,'MJ','STRING[16]','REFERENCE Usługa'@
   ,'DZP','DATE','Zgłoszenie podstawienia'@
   ,'DP','DATE','Data podstawienia'@
   ,'DZ','DATE','Zgłoszenie wykonania'@
   ,'DW','DATE','Data wykonania'@
   ,'DKP','DATE','Preferowane wykonanie'@
   ,'DK','DATE','Preferowane podstawienie'@
   ,'GW_OD','TIME','Od godz.'@
   ,'DK_OD','TIME','Preferowana godzina podstawienia od'@
   ,'GW_DO','TIME','Do godz.'@
   ,'DK_DO','TIME','Preferowana godzina podstawienia do'@
   ,'IL','REAL','Ilość'@
   ,'C','REAL','Cena'@
   ,'WAL','STRING[3]','Kod waluty'@
   ,'U','STRING[255]','Uwagi z pozycji umowy'@
   ,'LOKAL','STRING[40]','Nazwa / numer lokalu'@
);
~~


\set_obj_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Uzupełnienie tabeli tymczasowej
::   WE: _a - 0/1 czy tworzyć na nowo obiekt (domyślnie 1)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=1 ?};
{? _a || exec('obj_zlp','mwa_zgloszenia_jed') ?};

__Zgloszenia_jednorazowe.blank();
:: tabela ZLE
__Zgloszenia_jednorazowe.REF_ZLE:=$ZLE.ref();
__Zgloszenia_jednorazowe.UID_ZLE:=ZLE.uidref();
__Zgloszenia_jednorazowe.ODDZ:=ZLE.ODDZ;
__Zgloszenia_jednorazowe.KH:=$ZLE.KH;
__Zgloszenia_jednorazowe.POS:=$ZLE.POS;
__Zgloszenia_jednorazowe.TAR:=ZLE.TAR().KOD;
:: tabela ZLP
__Zgloszenia_jednorazowe.REF_ZLP:=$ZLP.ref();
__Zgloszenia_jednorazowe.UID_ZLP:=ZLP.uidref();
__Zgloszenia_jednorazowe.IDADD:=ZLP.IDADD;
__Zgloszenia_jednorazowe.MJ:=$ZLP.MJ;
__Zgloszenia_jednorazowe.DZP:=ZLP.DZP;
__Zgloszenia_jednorazowe.DP:=ZLP.DP;
__Zgloszenia_jednorazowe.DZ:=ZLP.DZ;
__Zgloszenia_jednorazowe.DW:=ZLP.DW;
__Zgloszenia_jednorazowe.DKP:=ZLP.DKP;
__Zgloszenia_jednorazowe.DK:=ZLP.DK;
__Zgloszenia_jednorazowe.GW_OD:=ZLP.GW_OD;
__Zgloszenia_jednorazowe.DK_OD:=ZLP.DK_OD;
__Zgloszenia_jednorazowe.GW_DO:=ZLP.GW_DO;
__Zgloszenia_jednorazowe.DK_DO:=ZLP.DK_DO;
__Zgloszenia_jednorazowe.IL:=ZLP.IL;
__Zgloszenia_jednorazowe.C:=ZLP.C;
__Zgloszenia_jednorazowe.WAL:=ZLP.WAL().KOD;
__Zgloszenia_jednorazowe.U:=ZLP.U;
__Zgloszenia_jednorazowe.LOKAL:=ZLP.LOKAL;

_add:=__Zgloszenia_jednorazowe.add();
~~


\set_fields_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Uzupełnienie tabel ZLP i ZLE z tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
exec('obj_zlp','mwa_zgloszenia_jed');

exec('set_fields','mwapi', '__'+_a);
_wsenv:=_b;

:: Wypełnienie pól tabeli ZLE + walidacja tego, co nie jest sprawdzane w standardowej funkcji walidującej
ZLE.blank();

ZLE.ODDZ:=__Zgloszenia_jednorazowe.ODDZ;
exec('chk_oddz','mwapi',ZLE.ODDZ);

ZLE.KH:=exec('FindAndGet','#table',KH,__Zgloszenia_jednorazowe.KH,,"KH.ref()",null());
ZLE.POS:=exec('FindAndGet','#table',POS,__Zgloszenia_jednorazowe.POS,,"POS.ref()",null());

{? ZLE.KH<>ZLE.POS().KH
|| _wsenv.add_error('Należy wybrać posesję przypisaną do wybranego kontrahenta.'@)
?};

TAR.cntx_psh();
TAR.index('KOD');
TAR.prefix(ZLE.ODDZ,'S',__Zgloszenia_jednorazowe.TAR,);
{? TAR.first()
|| ZLE.TAR:=TAR.ref()
|| _wsenv.add_error('Błędny kod cennika (nie występuje w oddziale %1).'@[ZLE.ODDZ])
?};
TAR.cntx_pop();

:: Wypełnienie pól tabeli ZLP + walidacja tego, co nie jest sprawdzane w standardowej funkcji walidującej
ZLP.blank();

ZLP.MJ:=exec('FindAndGet','#table',M,__Zgloszenia_jednorazowe.MJ,,"M.ref()",null());
{? ZLP.MJ().RODZ<>'U'
|| _wsenv.add_error('Należy wybrać pozycję słownika materiałów, która jest usługą.'@)
?};

{? __Zgloszenia_jednorazowe.DZP<>date(0,0,0) || ZLP.DZP:=__Zgloszenia_jednorazowe.DZP ?};
ZLP.DP:=__Zgloszenia_jednorazowe.DP;
ZLP.DZ:=__Zgloszenia_jednorazowe.DZ;
ZLP.DW:=__Zgloszenia_jednorazowe.DW;
ZLP.DKP:=__Zgloszenia_jednorazowe.DKP;
ZLP.DK:=__Zgloszenia_jednorazowe.DK;
ZLP.GW_OD:=__Zgloszenia_jednorazowe.GW_OD;
ZLP.DK_OD:=__Zgloszenia_jednorazowe.DK_OD;
ZLP.GW_DO:=__Zgloszenia_jednorazowe.GW_DO;
ZLP.DK_DO:=__Zgloszenia_jednorazowe.DK_DO;
ZLP.IL:=__Zgloszenia_jednorazowe.IL;
ZLP.C:=__Zgloszenia_jednorazowe.C;
ZLP.U:=__Zgloszenia_jednorazowe.U;
ZLP.LOKAL:=__Zgloszenia_jednorazowe.LOKAL;

_wal:=exec('wal_kod2ref','mwa_zgloszenia_jed',__Zgloszenia_jednorazowe.WAL);
{? _wal<>null()
|| ZLP.WAL:=_wal
|| _wsenv.add_error('Błędny kod waluty.'@)
?};
~~


\wal_kod2ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Pobranie refa waluty
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
exec('czytaj','#stalesys',,INFO);
_wal:=null();
SLO.cntx_psh();
SLO.index('SL');
SLO.prefix(XINFO.SLWAL,_a,);
{? SLO.first()
|| _wal:=SLO.ref()
|| _wal:=INFO.NAROD
?};
SLO.cntx_pop();
_wal


\serialize_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli ZLP/ZLE
::       Kontekst wywołania: ustawiona dziedzina tabeli tymczasowej z zapisami ZLP/ZLE
::   WE: _a - obiekt MWA
::       _b - JSON z błędami
::   WY: obiekt plikowy z odpowiedzią
::----------------------------------------------------------------------------------------------------------------------
::_resp:=fopen('Zgloszenia_jednorazowe.txt','Uw',,1,1);
_resp:=fopen(null(),'Uw',,1,1);

_json:=_b;

_data:="
   __Zgloszenia_jednorazowe.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'ODDZ',,'KH',,'POS',,'TAR',,'MJ',,'IL',
      ,'DZP',,'DP',,'DZ',,'DW',
      ,'WAL',,'IDADD',
      ,'DKP',,'DK',,'GW_OD',,'DK_OD',,'GW_DO',,'DK_DO',,'C',,'U',,'LOKAL',
      ,'REF_ZLE',,'REF_ZLP',,'UID_ZLE',,'UID_ZLP',
   );
   ''
";

_result:="
   json_tparse(params_get().json).json_tconvert(params_get().resp,,,,'result','p',,'noheader=1,nodata=1,indentation=1');
   ''
";

_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp,'json',_json);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
   ,'',_result
);

_resp


\create_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Dodaje zlecenie fakturowania w oparciu o przekazane parametry.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
::{? var_pres('_b')<>type_of('') || return() ?};

_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Zgloszenia_jednorazowe.IDADD');
_idadd:=_option.value;
_fields:='Zgloszenia_jednorazowe'+_option.fields;

ZLE.cntx_psh();
ZLP.cntx_psh();

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

exec('set_fields_zlp','mwa_zgloszenia_jed',_fields,_wsenv);

{? ~_wsenv.has_errors()
||
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LUM';
   _args.AR:=date()~1;
   _args.AM:=date()~2;
   __PARSES.setVal('OddzialLogProd',ZLE.ODDZ);
   __PARSES.setVal('OkresRok',_args);
   __PARSES.setEnv('LUM_ZGL');
   obj_del(_args);

   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_ZGL_DZGL';
   _params.AKCJA:='DołączMWA';
   _params.PROC_START:='T';

   exec('mp_run','#b__box',_params);

   {? _wsenv.IDADD=''
   || _wsenv.add_error('Wystąpił błąd podczas próby dodania zgłoszenia jednorazowego.'@)
   ?}
?};

{? _wsenv.has_errors()
||
   mwa_status(400);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
||
   mwa_status(201);
   _result:=exec('read_zlp_idadd_row','mwa_zgloszenia_jed',_par,_wsenv)
?};

ZLP.cntx_pop();
ZLE.cntx_pop();
_result


\read_zlp_idadd_row
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dane zlecenie fakturowania.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
_wsenv:=_b;
_idadd:=_wsenv.IDADD;

{? +_idadd=31
|| ZLP.cntx_psh();
   ZLE.cntx_psh();
   _names:=ZLP.names();
   _wynik:=0;
   {? _names.first()
   || {!
      |? ZLP.use(_names.NAME);
         ZLP.cntx_psh();
         ZLP.index('IDADD');
         ZLP.prefix();
         {? ZLP.find_key(_idadd)
         || ZLE.seek(ZLP.ZLE);
            exec('set_obj_zlp','mwa_zgloszenia_jed');
            _resp:=_wsenv.to_json();
            _result:=exec('serialize_zlp','mwa_zgloszenia_jed',_par,_resp);
            _wynik:=1
         ?};
         ZLP.cntx_pop();
         _wynik=0 & _names.next()
      !}
   ?};
   {? _wynik=0
   || _wsenv.add_error('Nie znaleziono zgłoszenia jednorazowego %1 [%2].'@ ['IDADD',_idadd])
   ?};
   ZLE.cntx_pop();
   ZLP.cntx_pop()

|| _wsenv.add_error('Nieprawidłowa wartość pola %1 [%2].'@ ['IDADD',_idadd])
?};

{? _wsenv.has_errors()
|| mwa_status(400);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\read_zle
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Odczytuje wszystkie zgłoszenia jednorazowe
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_par:=params_get();

_oddz:=exec('get_option','mwapi',_par,'ODDZ').value;
_rok:=exec('get_option','mwapi',_par,'ROK').value;
_miesiac:=exec('get_option','mwapi',_par,'MIESIAC').value;
_kh_kod:=exec('get_option','mwapi',_par,'KH').value;
_kh_odb_kod:=exec('get_option','mwapi',_par,'ODB').value;

exec('chk_oddz','mwapi',_oddz);
{? #_rok<=0 || _wsenv.add_error('Nieprawidłowy rok.'@) ?};
{? #_miesiac<=0 | #_miesiac>12 || _wsenv.add_error('Nieprawidłowy miesiąc.'@) ?};
_kh:=null();
{? _kh_kod<>''
|| _kh:=exec('FindInSet','#table','KH','KOD',_kh_kod,2,,1,,null());
   {? ~_kh || _wsenv.add_error('Nieprawidłowy kod kontrahenta.'@) ?}
?};
_kh_odb:=null();
{? _kh_odb_kod<>'' & _kh
|| _kh_odb:=exec('FindInSet','#table','KH_ODB','KH_ODB',_kh_odb_kod,_kh,,1,,null());
   {? ~_kh_odb || _wsenv.add_error('Nieprawidłowy kod odbiorcy.'@) ?}
|? _kh_odb_kod<>'' & _kh_kod=''
|| {? ~_kh || _wsenv.add_error('Brak kodu kontrahenta.'@) ?}
?};

{? _wsenv.has_errors() || mwa_status(400) ?};
{? exec('authorized','mwa_zgloszenia_jed',_wsenv) & ~_wsenv.has_errors()
||

   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LUM';
   _args.AR:=#_rok;
   _args.AM:=#_miesiac;
   _set_oddz:=__PARSES.setVal('OddzialLogProd',_oddz);
   _set_okr:=__PARSES.setVal('OkresRok',_args);
   __PARSES.setEnv('LUM_ZGL');
   obj_del(_args);

   {? ~_set_oddz
   || _msg:='Nie udało się ustawić parametrów pracy dla oddziału %1.'@[$_oddz];
      mwa_status(400,_msg);
      _wsenv.add_error(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   |? ~_set_okr
   || _msg:='Nie udało się ustawić parametrów pracy dla roku %1 i miesiąca %2.'@[$_rok,$_miesiac];
      mwa_status(400,_msg);
      _wsenv.add_error(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ||
      ZLP.cntx_psh();
      ZLE.cntx_psh();
      {? _kh_odb
      || ZLP.index('S6');
         ZLP.prefix(_kh_odb)
      |? _kh
      || ZLP.index('S4');
         ZLP.prefix(_kh)
      || ZLP.index('ZLE');
         ZLP.prefix()
      ?};
      exec('obj_zlp','mwa_zgloszenia_jed');
      {? ZLP.first()
      || {!|?
            ZLP.ZLE();
            exec('set_obj_zlp','mwa_zgloszenia_jed',0);
            ZLP.next()
         !}
      ?};
      _resp:=_wsenv.to_json();
      _result:=params_exec('serialize_zlp','mwa_zgloszenia_jed',_par,_resp);
      ZLP.cntx_pop();
      ZLE.cntx_pop()
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\authorized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Sprawdza uprawnienia do odglądania zgłoszeń jednorazowych
::----------------------------------------------------------------------------------------------------------------------
{? exec('authorized','#b__box','LUM_ZGL','LUM')
|| 1
|| _msg:='Brak uprawnień do przeglądania zgłoszeń jednorazowych.'@;
   mwa_status(401,_msg);
   _wsenv:=_a;
   _wsenv.add_error(_msg);
   0
?}


\read_zle_uidref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Odczytuje zgłoszenie jednorazowe o podanym uidrefie
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_par:=params_get();
_uidref:=exec('get_option','mwapi',_par,'uidref').value;

{? +_uidref<>48 | type_of(ref_tab(_uidref))<0
|| _msg:='Niepoprawna wartość parametru \'%1\'.'@['uidref'];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? (_mask:=exec('FindAndGet','#table',ZLP,_uidref,,"name()",''))=''
|| _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
   mwa_status(204,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? exec('authorized','mwa_zgloszenia_jed',_wsenv) & ~_wsenv.has_errors()
||
:: Ustalenie kontekstu rekordu
   _oddz:=((4+_mask)+1);
   _rok:=#('20'+((6+_mask)+2));
   _miesiac:=#((8+_mask)+2);

   {? exec('chk_oddz','mwapi',_oddz)
   ||
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LUM';
      _args.AR:=_rok;
      _args.AM:=_miesiac;
      _set_oddz:=__PARSES.setVal('OddzialLogProd',_oddz);
      _set_okr:=__PARSES.setVal('OkresRok',_args);
      __PARSES.setEnv('LUM_ZGL');
      obj_del(_args);

      {? ~_set_oddz
      || _msg:='Nie udało się ustawić parametrów pracy dla oddziału %1.'@[$_oddz];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      |? ~_set_okr
      || _msg:='Nie udało się ustawić parametrów pracy dla roku %1 i miesiąca %2.'@[$_rok,$_miesiac];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      ||
         ZLP.cntx_psh();
         ZLP.prefix();
         ZLE.cntx_psh();
         {? ZLP.seek(_uidref)
         ||
             ZLP.ZLE();
             exec('set_obj_zlp','mwa_zgloszenia_jed');
            _resp:=_wsenv.to_json();
            _result:=params_exec('serialize_zlp','mwa_zgloszenia_jed',_par,_resp)
         ||
            _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
            mwa_status(204,_msg);
            _wsenv.add_error(_msg);
            _resp:=_wsenv.to_json();
            _result:=exec('serialize_res','mwapi',_par,_resp)
         ?};
         ZLP.cntx_pop();
         ZLE.cntx_pop()
      ?}
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\update_zle
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Akcja - Zmień datę podstawienia/Podstawiono/Zmień datę wykonania/Wykonano
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_par:=params_get();
_uidref:=exec('get_option','mwapi',_par,'uidref').value;
_wymien:=exec('get_option','mwapi',_par,'WYMIEN').value;

{? +_uidref<>48 | type_of(ref_tab(_uidref))<0
|| _msg:='Niepoprawna wartość parametru \'%1\'.'@['uidref'];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? (_mask:=exec('FindAndGet','#table',ZLP,_uidref,,"name()",''))=''
|| _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
   mwa_status(204,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? exec('authorized','mwa_zgloszenia_jed',_wsenv) & ~_wsenv.has_errors()
||
:: Ustalenie kontekstu rekordu
   _oddz:=((4+_mask)+1);
   _rok:=#('20'+((6+_mask)+2));
   _miesiac:=#((8+_mask)+2);

   {? exec('chk_oddz','mwapi',_oddz)
   ||
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LUM';
      _args.AR:=_rok;
      _args.AM:=_miesiac;
      _set_oddz:=__PARSES.setVal('OddzialLogProd',_oddz);
      _set_okr:=__PARSES.setVal('OkresRok',_args);
      __PARSES.setEnv('LUM_ZGL');
      obj_del(_args);

      {? ~_set_oddz
      || _msg:='Nie udało się ustawić parametrów pracy dla oddziału %1.'@[$_oddz];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      |? ~_set_okr
      || _msg:='Nie udało się ustawić parametrów pracy dla roku %1 i miesiąca %2.'@[$_rok,$_miesiac];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      ||
         ZLP.cntx_psh();
         ZLP.prefix();
         ZLE.cntx_psh();
         {? ZLP.seek(_uidref)
         ||
             ZLP.ZLE();
:: mamy ustawione ZLE i ZLP więc można przypisywać wartości
            _option:=exec('get_option','mwapi',_par,'Zgloszenia_jednorazowe');
            _fields:='__Zgloszenia_jednorazowe'+_option.fields;
            exec('obj_zlp','mwa_zgloszenia_jed');
            exec('set_fields','mwapi',_fields);
:: Wykonuje akcję w zależności od przesłanych pól
            {? __Zgloszenia_jednorazowe.DZP<>date(0,0,0) & __Zgloszenia_jednorazowe.DZP<>ZLP.DZP
            ||  exec('zlp_przeplanuj_podst','!ltr_zle_prze',__Zgloszenia_jednorazowe.DZP)
            ?};
            {? ~_wsenv.has_errors() & __Zgloszenia_jednorazowe.DZ<>date(0,0,0) & __Zgloszenia_jednorazowe.DZ<>ZLP.DZ
            ||  exec('zlp_przeplanuj_wykon','!ltr_zle_prze',__Zgloszenia_jednorazowe.DZ)
            ?};
            {? ~_wsenv.has_errors() & __Zgloszenia_jednorazowe.DW<>date(0,0,0) & ZLP.DW=date(0,0,0)
            ||  exec('zabierz','!lum_zgl_dzgz',__Zgloszenia_jednorazowe.DW)
            ?};
            {? ~_wsenv.has_errors() & _wymien='T'
            || _anul:=exec('zlp_czy_anulowane','umowy_zlecenia');
               {? ~_anul & ZLP.SR='N' & ZLP.STAT_REJ='Z'
                     &
                  ZLP.DZP<>date(0,0,0) & ZLP.DZ<>date(0,0,0) & ZLP.DW=date(0,0,0)
               || exec('zlp_copy','!lum_zgl_dzgl',1,1)
               || _msg:='Akcja niedostępna dla danego rekordu.'@;
                  _wsenv.add_error(_msg)
               ?}
            ?};
            {? _wsenv.has_errors()
            ||
               mwa_status(400);
               _resp:=_wsenv.to_json();
               _result:=exec('serialize_res','mwapi',_par,_resp)
            ||
               ZLP.get();ZLP.ZLE();
               exec('set_obj_zlp','mwa_zgloszenia_jed');
               _resp:=_wsenv.to_json();
               _result:=params_exec('serialize_zlp','mwa_zgloszenia_jed',_par,_resp)
            ?}
         ||
            _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
            mwa_status(204,_msg);
            _wsenv.add_error(_msg);
            _resp:=_wsenv.to_json();
            _result:=exec('serialize_res','mwapi',_par,_resp)
         ?};
         ZLP.cntx_pop();
         ZLE.cntx_pop()
      ?}
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result



\get_tr_moc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Odsyła listę mocy przerobowych dla danej usługi
::----------------------------------------------------------------------------------------------------------------------
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_par:=params_get();
_ktm:=exec('get_option','mwapi',_par,'KTM').value;
_oddz:=exec('get_option','mwapi',_par,'ODDZ').value;
_tr_rodz:=null();

{? _ktm='' | ~(_tr_rodz:=exec('FindInSet','#table','M','MATKTM',_ktm,,"M.TR_RODZ",1,,null()))
|| _msg:='Niepoprawny indeks usługi lub brak przypisanego rodzaju transportu.'@;
   mwa_status(400,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
|? _oddz='' | ~exec('chk_oddz','mwapi',_oddz)
|| _msg:='Niepoprawny oddział lub brak uprawnień do niego.'@;
   mwa_status(400,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
|| TR_MOC.cntx_psh();
   TR_MOC.index('OTR_RODZ');
   TR_MOC.prefix(_oddz,_tr_rodz);
   {? TR_MOC.find_ge(date())
   || _tab_ref:=tab_tmp(1,
      'D','DATE','D',
      'D_RODZ','STRING[1]','D_RODZ',
      'PIL_SZT','REAL','PIL_SZT',
      'ZIL_SZT','REAL','ZIL_SZT',
      'WIL_SZT','REAL','WIL_SZT'
      );
      _ind:=1;
      {!|?
         _tab_ref.D:=TR_MOC.D;
         _tab_ref.D_RODZ:=TR_MOC.D_RODZ;
         _tab_ref.PIL_SZT:=TR_MOC.PIL_SZT;
         _tab_ref.ZIL_SZT:=TR_MOC.ZIL_SZT;
         _tab_ref.WIL_SZT:=TR_MOC.WIL_SZT;
         _ind+=1;
         _tab_ref.add(1) & TR_MOC.next() & _ind<32
      !};
      {? _tab_ref.first()
      ||
         _resp:=_wsenv.to_json();
         _result:=params_exec('serialize_tr_moc','mwa_zgloszenia_jed',0,_resp,_tab_ref)
      ||
         _msg:='Brak wyników.'@;
         mwa_status(204,_msg);
         _wsenv.add_info(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      ?}
   ||
      _msg:='Brak wyników.'@;
      mwa_status(204,_msg);
      _wsenv.add_info(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?};
   TR_MOC.cntx_pop()
?};
_result


\serialize_tr_moc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Serializuje moce transporu
::   WE: _a - buffer - czy wywołanie dla bufora tabeli (1), czy dla całej dziedziny (0)
::       _b - JSON z błędami/informacjami dodatkowymi
::       _c - tabela tymczasowa
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_args:=params_get();
_lib:=exec('lib','__mwa');
::_response:=_lib.Response.open('c:\\!\\response.xml');
_response:=_lib.Response.open();
_lib.Response.begin(_response);

:: status:
_response.fwrite('\n<%1:status>OK</%1:status>\n'[_args.OUTPREF]);

:: data: z tabeli dokumentów i pozycji
_lib.Response.getTableType.asString(_response,'data','TR_MOC',_c,_a);

:: result: z JSON do XML
{? var_pres('_b')=type_of('') || _json:=_b || _json:='{}' ?};
json_tparse(_json).json_tconvert(_response,,,,'result',_args.OUTPREF,,'noheader=1,nodata=1,indentation=1');

_lib.Response.end(_response);
_response

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 689e47ecde16de9fae1480040e658008964f844fab9dc2f4d906468de16d40648a5de408a3afc8fa4e342de838b6e2b54d132bca53ea452de739781798d80c531b6be2bab310d25a6c094756164133fbf70312d08a9a92fe26c938464d259ccfaf98f0aff4be7f71242a5fbfa1995f634f23f7dd52f29448e9cc0958cd0361aa
