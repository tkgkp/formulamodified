:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_walidacja.fml
:: Utworzony: 27.10.2021
:: Autor: achol
::======================================================================================================================
:: Zawartość: Formuły obsługujące walidowanie oraz akceptację wniosków z Portal HR
::======================================================================================================================

::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::                         Obiekty z identyfikatorami oraz nazwami obsługiwanych wniosków
::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

\_duplikat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wydania duplikatu świadectwa pracy na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','DuplikatSwiadectwa',exec('types','portal_wnioski').portal)


\_erp7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla ERP-7 na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','RP7',exec('types','portal_wnioski').portal)


\_opieka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla oświadczenia dot. opieki nad dzieckiem do lat 14 na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','OswiadczenieOpieka',exec('types','portal_wnioski').portal)


\_opiekun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla oświadczenia opiekuna dziecka do lat 4 na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','OswiadczenieOpiekun',exec('types','portal_wnioski').portal)


\_njo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla podjęcia lub kontynuacji nauki języka obcego na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','NaukaJezyka',exec('types','portal_wnioski').portal)


\_odbp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla polecenia odbioru nadgodzin na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANOdbiorNadgodzin',exec('types','portal_wnioski').portal)


\_nadg_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla polecenia pracy w godzinach nadliczbowych na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANNadgodziny',exec('types','portal_wnioski').portal)


\_praktyka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o szkolenie na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANPraktyka',exec('types','portal_wnioski').portal)


\_premia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku premiowego na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANPremia',exec('types','portal_wnioski').portal)


\_pruo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla przedłużenia lub rozwiązania umowy z oceną na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANOcena',exec('types','portal_wnioski').portal)


\_rdcr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zarejestrowanie członka rodziny na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZgloszenieCzlonkaRodziny',exec('types','portal_wnioski').portal)


\_czw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o czas wolny na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','CzasWolny',exec('types','portal_wnioski').portal)


\_dofs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o dofinansowanie studiów na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','DofinansowanieStudiow',exec('types','portal_wnioski').portal)


\_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o odbiór nadgodzin na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','OdbiorNadgodzin',exec('types','portal_wnioski').portal)


\_ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o pracę poza siedzibą firmy na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','PracaPozaSiedzibaFirmy',exec('types','portal_wnioski').portal)


\_nadg_w
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o pracę w godzinach nadliczbowych na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','Nadgodziny',exec('types','portal_wnioski').portal)


\_szkolenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja obiekt wniosku z Id i nazwą dla wniosku o szkolenie na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANSzkolenie',exec('types','portal_wnioski').portal)


\_edp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o udostępnienie kopii dokumentacji prac. na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','UdostepnienieEAkt',exec('types','portal_wnioski').portal)


\_zaliczka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zaliczkę na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','Zaliczka',exec('types','portal_wnioski').portal)


\_zod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zasiłek opiekuńczy z powodu sprawowania opieki
::       nad dzieckiem Z-15A na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZasilekOpiekunczyDziecko',exec('types','portal_wnioski').portal)


\_zoc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zasiłek opiekuńczy z powodu sprawowania opieki
::       nad dzieckiem Z-15B na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZasilekOpiekunczyChoryCzlonekRodziny',exec('types','portal_wnioski').portal)


\_woz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zatrudnienie na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANZatrudnienie',exec('types','portal_wnioski').portal)


\_wn_zzal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku z załącznikiem na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','WniosekPapierowy',exec('types','portal_wnioski').portal)


\_rekrutacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o rekrutację na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANZgloszenieRekrutacji',exec('types','portal_wnioski').portal)


\_wozda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmiane danych adresowych na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaAdresu',exec('types','portal_wnioski').portal)


\_zmiana_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę numeru NIP na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaNIP',exec('types','portal_wnioski').portal)


\_zmiana_pesel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt z id i nazwą dla deklaracji wniosku o zmianę numeru PESEL na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaPESEL',exec('types','portal_wnioski').portal)


\_zmiana_dowod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę numeru dowodu osobistego na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaNrDowodu',exec('types','portal_wnioski').portal)


\_zmiana_paszport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę numeru paszportu na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaNrPaszportu',exec('types','portal_wnioski').portal)


\_rachunek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę rachunku bankowego na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaNumeruROR',exec('types','portal_wnioski').portal)


\_zmiana_obywatelstwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę obywatelstwa na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaObywatelstwa',exec('types','portal_wnioski').portal)


\_zmiana_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę urzędu skarbowego na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaUS',exec('types','portal_wnioski').portal)


\_zmiana_wdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę wybranych danych osobowych na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaDanychOsob',exec('types','portal_wnioski').portal)


\_wzz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zmianę zatrudnienia na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','MANZmianaZatrudnienia',exec('types','portal_wnioski').portal)


\_ppk_dowu25
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla deklaracji opłacania wpłat uczestnika PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','DeklaracjaOplacaniaWplat25PPK',exec('types','portal_wnioski').portal)


\_ppk_opif
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla oświadczenia o podpisanych umowach o prowadzenie w innych
::       Instytucjach Finansowych na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','OswiadczenieOUmowachIF',exec('types','portal_wnioski').portal)


\_ppk_wodw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o dokonywanie wpłat PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','DokonywanieWplatPPK',exec('types','portal_wnioski').portal)


\_ppk_drwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla deklaracji rezygnacji z wpłaty dodatkowej PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','RezygnacjaZWplatyDodatkowejPPK',exec('types','portal_wnioski').portal)


\_ppk_wou
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o uczestnictwo w PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZgloszeniePPK',exec('types','portal_wnioski').portal)


\_ppk_dwwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla deklaracji wysokości wpłaty dodatkowej na PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaWplatyDodPPK',exec('types','portal_wnioski').portal)


\_ppk_dwwp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla deklaracji wysokości wpłaty podstawowej na PPK na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZmianaWplatyPodstPPK',exec('types','portal_wnioski').portal)


\_wydanie_zasw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o wydanie zaświadczenia na Portal HR (Paperless HR).
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','Paperless_ZASW',exec('types','portal_wnioski').paperless)


\_zlozenie_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o złożenie dokumentu na Portal HR (Paperless HR).
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','Paperless_ZDOK',exec('types','portal_wnioski').paperless)


\_pit_zero_26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla wniosku o zaprzestanie stosowania zwolenienia od podatku dla
::       osób poniżej 26 lat na Portal HR (Paperless HR).
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','PIT026Nie',exec('types','portal_wnioski').paperless)


\_pzd_osw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla oświadczenia o pracy zdalnej na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','OswiadczeniePracaZdalna')


\_pzd_wn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Funkcja zwraca obiekt wniosku z Id i nazwą dla oświadczenia o pracy zdalnej na Portal HR.
::----------------------------------------------------------------------------------------------------------------------
exec('name_feeder','portal_walidacja','ZdarzeniaDotPracy')


::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::                                 Formuły techniczne wspomagające proces walidacji
::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

\name_feeder
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła zwraca obiekt pomocniczy do pobierania standardowych Id oraz nazw wniosków portalowych.
::   WE:  _a [STRING] - Id wniosku na Portal HR
::       [_b] [STRING] - typ wniosku ('T' - Portal HR, 'P' - Paperless HR,...) [domyślnie 'T' - Portal HR]
::   WY: obiekt pomocniczy
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: id wniosku na Portal HR
   'id',
:: nazwa wniosku na Portal HR
   'name'
);

  _id:={? var_pres('_a')=type_of('') & _a<>'' || _a || ''  ?};
_type:={? var_pres('_b')=type_of('') & +_b=1  || _b || 'T' ?};

_obj.id:=_id;
_name:=exec('type_name','portal_walidacja',_id,_type);
_obj.name:=_name;

_obj


\type_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła zwraca nazwę wniosku dla podanego argumentem Id wniosku.
::   WE:  _a  [STRING] - Id wniosku
::       [_b] [STRING] - typ wniosku ('T' - Portal HR, 'P' - Paperless HR,...) [domyślnie 'T' - Portal HR]
::   WY: Nazwa wniosku lub ''
::----------------------------------------------------------------------------------------------------------------------
_result:='';

  _id:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(_result) ?};
_type:={? var_pres('_b')=type_of('') & +_b=1  || _b || 'T'             ?};

ETYPY.cntx_psh();
_ndx:=ETYPY.ndx_tmp(,1,'TYPOBIEG',,,'W_PORTAL',,,'ID_WP',,);
ETYPY.index(_ndx);
ETYPY.prefix(exec('bl_typ','obiegi',2),_type,_id,);
_result:={? ETYPY.first() || ETYPY.NAZWA || '' ?};
ETYPY.ndx_drop(_ndx);
:: Dodatkowe sprawdzenie po Id bazowym, jeśli nie powiodło się po zwykłym
{? _result=''
|| _ndx:=ETYPY.ndx_tmp(,1,'TYPOBIEG',,,'W_PORTAL',,,'ID_WP_B',,);
   ETYPY.index(_ndx);
   ETYPY.prefix(exec('bl_typ','obiegi',2),_type,_id,);
   _result:={? ETYPY.first() || ETYPY.NAZWA || '' ?};
   ETYPY.ndx_drop(_ndx)
?};
ETYPY.cntx_pop();

_result


\atr_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: pobranie wartości atrybutu o przekazanym ID_WP, maska EDOK_ATR jest otwarta, EDOKUM ustalony
::   WE: _a  [STRING]    - id_wp atrybutu
::      [_b] [STRING]    - akronim zwracanego pola, jeśli nie podany to WAR lub WAR_W (w zależnosci od typu)
::   WY: stringowa wartość pobieranego pola
::----------------------------------------------------------------------------------------------------------------------
   _id_wp:={? var_pres('_a')=type_of('') || _a || return('') ?};
 _akronim:={? var_pres('_b')=type_of('') || _b || ''         ?};

_wyn:='';

ETYPY.cntx_psh();
_wniosek_id:=EDOKUM.TYP().ID_WP;
ETYPY.cntx_pop();

TAT.cntx_psh();
TAT.index('ID_WP');
TAT.prefix();
_id:='%1%2'[_wniosek_id,_id_wp];
ETYP_ATR.cntx_psh();
ETYP_ATR.index('KOLZ');
ETYP_ATR.prefix(EDOKUM.TYP,null());
EDOK_ATR.cntx_psh();
{? TAT.find_tab(,'ID_WP',,'=',_id,'W_PORTAL',,'<>','N')
|| {? _akronim=''
   || _akronim:={? TAT.TYP='W' || 'WAR_W' || 'WAR' ?}
   ?};
   EDOK_ATR.index('REKTAT');
   EDOK_ATR.prefix(EDOKUM.ref(),null,'',TAT.ref());
   {? EDOK_ATR.first()
   || {? _akronim='WAR_W'
      || _wyn:=EDOK_ATR.memo_txt(,1,_akronim)
      || _wyn:=($('%1%2'['EDOK_ATR.',_akronim]))();
         {? TAT.TYP='B' || _wyn:=1+_wyn ?}
      ?}
   ?}
?};
EDOK_ATR.cntx_pop();
ETYP_ATR.cntx_pop();
TAT.cntx_pop();
_wyn


\atr_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: ustawienie wartości atrybutu o przekazanym ID_WP, maska EDOK_ATR jest otwarta, EDOKUM ustalony
::   WE: _a  [STRING]    - id_wp atrybutu
::       _b  [ANY]       - wartość pola
::      [_c] [STRING]    - akronim put-owanego pola, jeśli nie podany to WAR
::      [_d] [INTEGER]   - czy dodawać parametr do wniosku jeżeli nie istnieje? [0 - nie (domyślnie), 1 - tak]
::   WY: stringowa wartość pobieranego pola
::----------------------------------------------------------------------------------------------------------------------
  _id_wp:={? var_pres('_a')=type_of('')     || _a || return(0) ?};
    _val:={? var_pres('_b')>0               || _b || return(0) ?};
_akronim:={? var_pres('_c')=type_of('')     || _c || 'WAR'     ?};
    _add:={? var_pres('_d')=type_of(0)  || _d || 0         ?};

_wyn:='';

ETYPY.cntx_psh();
_wniosek_id:=EDOKUM.TYP().ID_WP;
ETYPY.cntx_pop();

TAT.cntx_psh();
TAT.index('ID_WP');
TAT.prefix();
_id:='%1%2'[_wniosek_id,_id_wp];
ETYP_ATR.cntx_psh();
ETYP_ATR.index('ID_WP');
ETYP_ATR.prefix(EDOKUM.TYP);
EDOK_ATR.cntx_psh();
{? TAT.find_tab(,'ID_WP',,'=',_id,'W_PORTAL',,'<>','N')
|| EDOK_ATR.index('REKTAT');
   EDOK_ATR.prefix(EDOKUM.ref(), null, '', TAT.ref());
   {? EDOK_ATR.first()
   || {? _akronim='WAR_W'
      || EDOK_ATR.memo_set(_val,_akronim);
         _wyn:=EDOK_ATR.memo_put(,_akronim)
      || ($('EDOK_ATR.'+_akronim+':=_a'))(_val);
         _wyn:=EDOK_ATR.put(1)
      ?}
   || {? _add & ETYP_ATR.find_key(_id_wp,)
      || EDOK_ATR.blank(1);
         EDOK_ATR.EDOKUM:=EDOKUM.ref();
         EDOK_ATR.TAT:=ETYP_ATR.TAT;
         EDOK_ATR.KOL:=ETYP_ATR.KOL;
         EDOK_ATR.REKORD:=1;
         EDOK_ATR.USERS:=EDOKUM.USERS;
         _typ:=ETYP_ATR.TAT().TYP;
         {? _typ<>'W'
         || EDOK_ATR.WAR:=_val
         ?};
         {? EDOK_ATR.add() & _typ='W'
         || EDOK_ATR.memo_set(_val,'WAR_W');
            EDOK_ATR.memo_put(,'WAR_W');
            EDOK_ATR.put()
         ?}
      ?}
   ?}
?};
EDOK_ATR.cntx_pop();
ETYP_ATR.cntx_pop();
TAT.cntx_pop();
_wyn


\atr_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zwraca nazwę atrybutu, którego identyfikator z Portalu HR został przekazany jako argument.
::       Zakładamy, że kontekst EDOKUM jest ustawiony, a maska EDOK_ATR otwarta.
::   WE: _a [STRING] - identyfikator atrybutu z Portalu HR
::   WY: Nazwa atrybutu lub '' jeśli nieznaleziony
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_id_wp:={? var_pres('_a')=type_of('') || _a || return(_result) ?};

ETYPY.cntx_psh();
_wniosek_id:=EDOKUM.TYP().ID_WP;
ETYPY.cntx_pop();

TAT.cntx_psh();
TAT.index('ID_WP');
TAT.prefix();
_id:='%1%2'[_wniosek_id,_id_wp];
{? TAT.find_tab(,'ID_WP',,'=',_id,'W_PORTAL',,'<>','N')
|| _result:=TAT.OPIS
?};
TAT.cntx_pop();
_result


\edokumZal_exist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja sprawdza czy istnieje załącznik do dokumentu w obiegu z Portal HR.
::   WE:  _a  [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::       [_b] [STRING]    - konkretna nazwa załącznika, który nas interesuje
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & _a<>null() & ref_tab(_a)=EDOKUM || _a || return(_result) ?};
  _name:={? var_pres('_b')=type_of('') & +_b || _b || '' ?};

EDOKUMZ.cntx_psh();
EDOKUMZ.use('%1%2'['skid_n',(ref_name(_edokum)+2)]);
EDOKUMZ.index('NAZWA');
{? +_name
|| EDOKUMZ.prefix(_edokum,_name,)
|| EDOKUMZ.prefix(_edokum)
?};
_result:=EDOKUMZ.first();
EDOKUMZ.cntx_pop();
_result


\edokumZal_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja kopiuje zalacznik z dokumentu w obiegu do osoby
::   WE: _a  [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::       _b  [REFERENCE] - wskazanie na osobę lub pracownika (poziom załącznika)
::       _c  [STRING]    - nazwa dla typu zalacznika
::      [_d] [STRING]    - opis dla typu zalacznika
::      [_e] [STRING]    - rekord-właściciel załącznika (uidref)
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=EDOKUM
|| _edokum:=_a
|| return(_result)
?};
{? var_pres('_b')=type_of(null()) & _b<>null() & (ref_tab(_b)=P | ref_tab(_b)=OSOBA)
|| _poziom:=_b
|| return(_result)
?};
{? var_pres('_c')=type_of('')
|| _nazwa:=_c
|| return(_result)
?};
_opis:={? var_pres('_d')=type_of('') || _d || '' ?};
_owner:={? var_pres('_e')=type_of('') & +_e=48 & type_of(ref_tab(_e))>0 || _e || '' ?};

:: wyszukanie typu zalacznika
_slo_typ:=exec('slo_typ','ext_slo','ZAL');
_slo_naz:=exec('slo_naz','ext_slo',_slo_typ,_nazwa);
{? _slo_typ=null()
|| return(_result)
?};

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.prefix();
{? EDOKUM.seek(_edokum)
|| EDOKUMZ.cntx_psh();
   EDOKUMZ.use('%1%2'['skid_n',EDOKUM.name()+2]);
   EDOKUMZ.index('DISP');
   EDOKUMZ.prefix(_edokum);
   _ds:=do_state();
   {? _ds=0
   || do()
   ?};
   {? _ds<>2 & EDOKUMZ.first()
   || OSOBA.cntx_psh();
      OSOBA.prefix();
      P.cntx_psh();
      P.prefix();
      _TAB:=ref_tab(_poziom);
      {? _TAB.seek(_poziom)
      || {!
         |? _file:=EDOKUMZ.EDOKUM;
            {? _file<>null()
            || ZALACZ.cntx_psh();
               ZALACZ.blank();
               {? _TAB=P
               || ZALACZ.P:=P.ref();
                  ZALACZ.OSOBA:=P.OSOBA
               || ZALACZ.OSOBA:=OSOBA.ref()
               ?};
               ZALACZ.DATA:=EDOKUMZ.DATE;
               ZALACZ.TYP_ZAL:=_slo_naz;
               {? _owner=''
               || ZALACZ.RODZAJ:=2-!_TAB
               || ZALACZ.NAG:=_owner;
                  ZALACZ.RODZAJ:=2-!ref_tab(_owner)
               ?};
               ZALACZ.WWWE:='T';
               ZALACZ.WWWS:='N';
               ZALACZ.ZAL_NAME:=EDOKUMZ.NAZWA;
               ZALACZ.ZAL:=EDOKUMZ.EDOKUM;
               ZALACZ.LOK:=
                  {? _opis<>''
                  || _opis
                  |? EDOKUMZ.KR_OP<>''
                  || '[%1] %2'[EDOKUM.ID,EDOKUMZ.KR_OP]
                  || 'Na podstawie wniosku \''+EDOKUM.TYP().NAZWA +'\' o nr: '+EDOKUM.ID
                  ?};
               ZALACZ.add();
               ZALACZ.cntx_pop()
            ?};
            EDOKUMZ.next()
         !}
      || undo()
      ?};
      P.cntx_pop();
      OSOBA.cntx_pop()
   ?};
   _result:={? _ds=0 || end() || do_state()=1 ?};
   EDOKUMZ.cntx_pop()
?};
EDOKUM.cntx_pop();
_result


\edokumZal_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja usuwa zalacznik do dokumentu w obiegu
::   WE: _a [REFERENCE] - wskazanie na dokument w obiegu (EDOKUM.ref)
::       _b [STRING]    - nazwa załącznika
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & _a<>null() & ref_tab(_a)=EDOKUM || _a || return(_result) ?};
_name:={? var_pres('_b')=type_of('') & +_b || _b || return(_result) ?};

EDOKUMZ.cntx_psh();
EDOKUMZ.use('%1%2'['skid_n',(EDOKUM.name()+2)]);
EDOKUMZ.index('NAZWA');
EDOKUMZ.prefix(_edokum,_name,);
{? EDOKUMZ.first()
|| _result:=(EDOKUMZ.del(,1)>0)
?};
EDOKUMZ.cntx_pop();
_result


\oMsgType
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja tworzy obiekt wykorzystywany podczas walidacji/akceptacji wniosku przechwoujący wartości dla okna kom.
::   WY: obiekt _msgType
::----------------------------------------------------------------------------------------------------------------------
_msgType:=obj_new('ERROR','INFO');
_msgType.ERROR:=1;
_msgType.INFO:=3;
_msgType


\tab_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Tworzy pomocniczą tablicę identyfikatorów z Portalu HR powiązanych z techniczną tablicą do walidacji.
::   WE: _a [TAB] - techniczna tablica do przeprowadzenia walidacji
::   WY: tablica z identyfikatorami z Portalu HR gdzie każdy element z tablicy technicznej dostarczonej argumentem
::       posiada odpowiednik w postaci identyfikatora na tej samej pozycji w tablicy zwracanej
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')>100 || obj_ntab_names(_a) || return() ?};
_fields:='';
_size:=obj_len(_tab);
_last:='\'%1\''[_tab[_size]];
{? _size>1
|| {! _ii:=1..(_size-1)
   |! _fields+='\'%1\','[_tab[_ii]]
   !};
   _fields:='%1%2'[_fields,_last]
|| _fields:=_last
?};
_tabId:='obj_new(%1)'[_fields];
($_tabId)()


\fldsNormalized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza czy pola tekstowe wypełnione we wniosku nie zawierają nadmiarowych białych znaków.
::   WE: _a [TAB] - tablica zawierająca wartości pól z wypełnionego wniosku z Portalu HR
::   WY: tablica _result:
::       _result.RES  - zawiera wynik przeprowadzenia formuły (1 - wszystko w porządku, 0 - nadmiarowe białe znaki)
::       _result.FLD  - pierwsze pole, które zawiera nadmiarowe białe znaki: numer pola (lub 0 jeśli _result.RES=1)
::       _result.DESC - standardowy opis dla błędu (lub '' jeśli _result.RES=1)
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('RES','FLD','DESC');
_result.RES:=1; _result.FLD:=0; _result.DESC:='';
_tab:={? var_pres('_a')>100 || _a || return(_result) ?};
{! _ii:=1..obj_len(_tab)
|! {? type_of(_tab[_ii])=type_of('') & _tab[_ii]<>|_tab[_ii]
   || _result.RES*=0;
      _result.FLD:=_ii;
      _result.DESC:='Wprowadzone dane zawierają nieprawidłowe lub nadmiarowe białe znaki. Pole: ';
      _ii:=obj_len(_tab)
   ?}
!};
_result


\fldsLengthOk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza czy długości wartości przypisanych do pól tablicy technicznej do walidacji wniosku nie przekraczają
::       długości docelowych pól (w tabeli) gdzie wartości te zostaną zapisane w kolejnym etapie
::   WE: _a [TAB]    - tablica techniczna z polami do przeprowadzenia walidacji
::       _b [STRING] - łańcuch zawierający oddzielone przecinkami identyfikatory pól do sprawdzenia w postaci
::                     <AKRONIM_TABELI>.<POLE_TABELI>
::   WY: tablica _result:
::       _result.RES    - wynik przeprowadzenia formuły (1 - wszystko w porządku, 0 - nadmiarowe białe znaki)
::       _result.NAME   - pierwsze pole, które przekroczyło długość: nazwa pola (lub '' jeśli _result.RES=1)
::       _result.LENGTH - dopuszczalna długość pola wynikająca z definicji [pobierana z tabeli docelowej]
::                        (lub 0 jeśli _result.RES=1)
::       _result.CHRS   - odpowiednio skonstruowany łańcuch do komunikatu (lub '' jeśli _result.RES=1)
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('RES','NAME','LENGTH','CHRS');
_result.RES:=1; _result.NAME:=''; _result.LENGTH:=0; _result.CHRS:='';

 _tab:={? var_pres('_a')>100                  || _a || return(_result) ?};
_flds:={? var_pres('_b')=type_of('') & _b<>'' || _b || return(_result) ?};
{? var_pres('MISC',@.CLASS)<=0 || MS:=obj_new(@.CLASS.MISC) ?};

_toCheck:=spli_str(_flds,',');
{! _count:=1..obj_len(_toCheck)
|! {? var_pres('_def')>0 || &_def ?};
   _def:=spli_str(_toCheck[_count],'.');
   _len:=MS.fld_len(_def[1],_def[2]);
   _chrs:='';
   {? +|(($('_a.'+_def[2]))(_tab))>_len
   || _chrs:=
      {? _len=1  || 'znak'
      |? _len<=4 || 'znaki'
      || 'znaków'
      ?}
   ?};
   {? _chrs<>''
   || _result.RES*=0;
      _result.NAME:=MS.name(_def[1],_def[2]);
      _result.LENGTH:=_len;
      _result.CHRS:=_chrs;
      _count:=obj_len(_toCheck)
   ?}
!};
_result


\prep_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Przygotowanie opisu komuniaktu z elementów dostarczonych tablicą.
::   WE: _a [TAB] - tablica zawierająca elementy opisu komunikatu
::   WY: przygotowany komunikat lub '' jeśli nie przekazano tablicy
::----------------------------------------------------------------------------------------------------------------------
_txt:={? var_pres('_a')>100 || _a || return('') ?};
_size:=obj_len(_txt);
_check:="((var_pres('[%1]'[$_a],_b)<0) | type_of(_b[_a])<>type_of(''))";
_el1:='';
_el2:='';
_lastEl1:='\%%1'[$_size];
_lastEl2:='_a[%1]'[$_size];
{? _size>1
|| {! _ii:=1..(_size-1)
   |! {? _check(_ii,_txt) || _txt[_ii]:='' ?};
      _el1+='\%%1 '[$_ii];
      _el2+='_a[%1],'[$_ii]
   !};
   {? _check(_size,_txt) || _txt[_size]:='' ?};
   _el1:='%1%2'[_el1,_lastEl1];
   _el2:='%1%2'[_el2,_lastEl2]
|| {? _check(1,_txt) || _txt[1]:='' ?};
   _el1:=_lastEl1;
   _el2:=_lastEl2
?};
_desc:='\'%1\'[%2]'[_el1,_el2];
($_desc)(_txt)


\oMsgErr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Funkcja tworzy obiekt wykorzystywany podczas walidacji wniosku przechwoujący najczęściej wykorzystywane
::       komunikaty błędów przekazywane na portal jako część odpowiedzi na błąd walidacji.
::   WY: obiekt _msgType
::----------------------------------------------------------------------------------------------------------------------
_err:=obj_new('config','kadry','copy_zal');
_err.config:='Błąd konfiguracji wniosków.'@;
_err.kadry:='Skontaktuj się z działem kadr w celu weryfikacji danych.'@;
_err.copy_zal:='Błąd podczas kopiowania załączników.'@;
_err


\obj_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Inicjalizacja obiektów wykorzystywanych przy walidacji / akceptacji.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('MISC',@.CLASS)<=0 || MS:=obj_new(@.CLASS.MISC) ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
exec('__HARM','object');
exec('__KAL','object');
exec('__RUB','object');
exec('MASK','object');
exec('open_prc','open_tab');
{? var_pres('ZWPODW',KST)>0 &
   var_pres('ZWPOD',KST)>0  &
   var_pres('ZWPODE',KST)>0 &
   var_pres('ZWPODP',KST)>0 &
   var_pres('ZWPODD',KST)>0
|| exec('__ZW_PRZ','object')
?};
~~


\oValidator
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja tworzy obiekt do możliwego wykorzystania podczas walidacji/akceptacji wniosku
::   WY: obiekt _validator
::----------------------------------------------------------------------------------------------------------------------
_validator:=obj_new(
:: dostawca wniosku / ref wniosku / firma wynikająca z exec('ref_firma','ustawienia')
   'osoba','edokum','firma',
:: tabela pobranych wartości / tabela akronimów tabeli obiektu / przypisanie tabeli do pola tab
   'tab','tabNames','setTab',
:: obiekt _result
   'result',
:: status walidacji / pobranie statusu walidacji
   'valid','getValid',
:: obiekt _msgType dla KOM13
   'msgTypeObj',
:: ustawienie warunku, który powoduje błąd walidacji / warunek generujący błąd dla walidacji
   'setErrorRule','rule',
:: sprawdzenie warunku z wygenerowaniem komunikatu błędu / informacyjnego
   'validateWithError','validateWithInfo',
:: ustawienie tekstu do zbudowania w przypadku błędu / tekst do zbudowania w przypadku walidacji podany jako formuła
   'setTxtToBuild','txtToBuild',
:: sprawdzenie warunku z odpowiednim komunikatem
   'validate',
:: zwraca wartość pola w tablicy o przekazanym akronimie
   'getTabFld',
:: ustawia wartość dla result.ok / pobiera wartość result.ok
   'setResult','getResult',
:: ustawia wartość dla result.errMsg
   'setErrMsg',
:: sprawdza czy pola wniosku typu STRING nie zawierają nieprawidłowych białych znaków
   'fldsNormalized',
:: sprawdza czy pola wniosku typu STRING mają odpowiednią długość co do podanego łańcucha
   'fldsLengthOk'
);
_validator.setTab:=
   "{? var_pres('_a')>100
    || {? var_pres('tab',.)>100 || obj_del(.tab) ?};
       .tab:=_a;
       {? var_pres('tabNames',.)>100 || obj_del(.tabNames) ?};
       .tabNames:=obj_ntab_names(.tab)
    ?}
   ";
_validator.osoba:=null;
_validator.edokum:=null;
_validator.firma:=null;
_validator.result:=exec('oResult','form_ob');
_validator.valid:=0;
_validator.msgTypeObj:=exec('oMsgType','portal_walidacja');
_validator.setErrorRule:="{? var_pres('_a')=type_of(\"\") || .rule:=_a || .rule:=\"0\" ?}";
_validator.setErrorRule();
_validator.validateWithError:=".setErrorRule(_a); .setTxtToBuild(_b); .validate(.msgTypeObj.ERROR)";
_validator.validateWithInfo:=".setErrorRule(_a); .setTxtToBuild(_b); .validate(.msgTypeObj.INFO)";
_validator.setTxtToBuild:="{? var_pres('_a')=type_of(\"\") || .txtToBuild:=_a || .txtToBuild:=\"''\" ?}";
_validator.setTxtToBuild();
_validator.validate:=
   "_type:={? var_pres('_a')=type_of(0) & _a>=1 & _a<=3 || _a || .msgTypeObj.ERROR ?};
    {? .result.ok & .rule(.tab,.osoba,.edokum,.firma)
    || {? _type=.msgTypeObj.ERROR || .result.ok*=0 ?};
       {? .valid || exec('tab_kom_add','form_ob',_type,.txtToBuild(.tab,.osoba,.edokum)) ?}
    ?}
   ";
_validator.getTabFld:=
"_founded:=0;
 {? var_pres('_a',.tab)>0
 || _loop:=1;
    {! _loop
    |? {? .tabNames[_loop]=_a
       || _founded:=_loop;
          _loop:=0
       ?};
       {? _loop<>0 & _loop<obj_len(.tabNames) || _loop+=1 || _loop:=0 ?}
    !}
 ?};
 return(_founded)
";
_validator.setResult:=
   "{? var_pres('result',.)>100 & var_pres('ok',.result)=type_of(0) & var_pres('_a')=type_of(0) || .result.ok:=_a ?}";
_validator.getResult:=
   "{? var_pres('result',.)>100 & var_pres('ok',.result)=type_of(0) || return(.result.ok) || return(0) ?}";
_validator.setErrMsg:=
   "{? var_pres('result',.)>100 & var_pres('errMsg',.result)=type_of('') & var_pres('_a')=type_of('')
    || .result.errMsg:=_a
    ?}
   ";
_validator.getValid:="{? var_pres('valid',.)=type_of(0) || return(.valid) || return(0) ?}";
_validator.fldsNormalized:=
   ".validateWithError(\"
         _ret:=0;
         {! _ii:=1..obj_len(_a)
         |! {? type_of(_a[_ii])=type_of('') & _a[_ii]<>|_a[_ii] || _ret:=1 ?}
         !};
         _ret
      \",\"
         'Wprowadzone dane zawierają nieprawidłowe lub nadmiarowe białe znaki'@
      \")
   ";
_validator.fldsLengthOk:=
   "_pola:={? var_pres('_a')=type_of('') & _a<>'' || _a || return() ?};
    _spr:=spli_str(_pola,',');
    {! _licz:=1..obj_len(_spr)
    |! {? var_pres('_co')>0 || &_co ?};
       _co:=spli_str(_spr[_licz],'.');
       _len:=MS.fld_len(_co[1],_co[2]);
       _res:=(+|(($('_a.'+_co[2]))(.tab))>_len);
       _zn:=
          {? _len=1 || 'znak'@
          |? _len<=4 || 'znaki'@
          || 'znaków'@
          ?};
       _msg:=$('\\'Za długa nazwa w polu [%1], dopuszczalna liczba to %2 %3.\\'@[MS.name(\\''+
         _co[1]+'\\',\\''+_co[2]+'\\'),$'+$_len+',\\''+_zn+'\\']');
       .validateWithError($($_res),_msg)
   !}
  ";
_validator


\oValManager
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Funkcja tworzy obiekt do możliwego wykorzystania podczas walidacji/akceptacji wniosku do pobierania wartości
::   WY: obiekt _valManager
::----------------------------------------------------------------------------------------------------------------------
_valManager:=obj_new(
:: podłączony obiekt _validator
   'validator',
:: pobiera wartość tekstową / daty / ref / pieniężną
   'getTextVal','getDateVal','getRefVal','getMonetaryVal',
:: przypisanie wartości (tekstowej/daty/ref/pieniężnej) / (tekstowej/daty/ref/pieniężnej) lub defaultowej dla walidacji
   'assignTextVal','assignTextValOrDefault',
   'assignDateVal','assignDateValOrDefault',
   'assignRefVal','assignRefValOrDefault',
   'assignMonetaryVal','assignMonetaryValOrDefault',
:: ogólne przypisanie wartości
   'assign',
:: zwraca aktualną wartość result.ok / ustawia wartość dla result.ok w trzymanym obiekcie _validator
   'getResult','setResult',
:: ustawia wartość dla result.errMsg w trzymanym obiekcie _validator
   'setErrMsg',
:: zwraca wartość dla podanego akronimu pola jeśli zapisany w tablicy obiektu _validator dla przekazanego pola lub ~~
   'getTabFieldVal',
:: zwraca aktualną wartość valid w trzymanym obiekcie _validator
   'isValidation',
:: ustawia formułę na modyfikację wartości wybranej z lookup'a na Portal HR do szukania referencji zapisu / formuła
   'setModifRef','modifRef'
);
_valManager.validator:=exec('oValidator','portal_walidacja');
_valManager.getTextVal:=
   "{? var_pres('_a')=type_of('')
    || {? var_pres('_b')=type_of('')
       || exec('atr_get','portal_walidacja',_a,_b)
       || exec('atr_get','portal_walidacja',_a)
       ?}
    || ''
    ?}
   ";
_valManager.getDateVal:=
   "{? var_pres('_a')=type_of('')
    || exec('str2date','#convert',exec('atr_get','portal_walidacja',_a)) || date(0,0,0)
    ?}
   ";
_valManager.getRefVal:=
   "{? var_pres('_a')=type_of('') & var_pres('_b')=type_of('') & var_pres('_c')=type_of('')
    || {? var_pres('_d')>0
       || exec('FindInSet','#table',_b,_c
            ,{? var_pres('modifRef',.)=type_of(\"\") || .modifRef(.getTextVal(_a)) || .getTextVal(_a) ?}
            ,_d,,1
          )
       || exec('FindInSet','#table',_b,_c
          ,{? var_pres('modifRef',.)=type_of(\"\") || .modifRef(.getTextVal(_a)) || .getTextVal(_a) ?}
          ,,,1)
       ?}
    || null
    ?}
   ";
_valManager.getMonetaryVal:=
   "{? var_pres('_a')=type_of('') || #gsub(.getTextVal(_a),',','.') || 0 ?}";
_valManager.assignTextVal:=
   "{? _var:=var_pres('_a')=type_of('') & var_pres('_b')=type_of('')
    || {? var_pres('_c')=type_of('')
       || .assign(_a,.getTextVal(_b,_c))
       || .assign(_a,.getTextVal(_b))
       ?}
    || {? _var || .assign(_a,'') ?}
    ?}
   ";
_valManager.assignTextValOrDefault:="{? ~(.validator.valid) || .assignTextVal(_a,_b) || .assign(_a,'') ?}";
_valManager.assignDateVal:=
   "{? _var:=var_pres('_a')=type_of('') & var_pres('_b')=type_of('')
    || .assign(_a,.getDateVal(_b))
    || {? _var || .assign(_a,date(0,0,0)) ?}
    ?}
   ";
_valManager.assignDateValOrDefault:="{? ~(.validator.valid) || .assignDateVal(_a,_b) || .assign(_a,date(0,0,0)) ?}";
_valManager.assignRefVal:=
   "{? _var:=var_pres('_a')=type_of('') & var_pres('_b')=type_of('') & var_pres('_c')=type_of('')
    & var_pres('_d')=type_of('')
    || {? var_pres('_e')>0
       || .assign(_a,.getRefVal(_b,_c,_d,_e))
       || .assign(_a,.getRefVal(_b,_c,_d))
       ?}
    || {? _var || .assign(_a,null()) ?}
    ?}
   ";
_valManager.assignRefValOrDefault:=
   "{? ~(.validator.valid)
    || {? var_pres('_e')>0
      || .assignRefVal(_a,_b,_c,_d,_e)
      || .assignRefVal(_a,_b,_c,_d)
      ?}
    || .assign(_a,null)
    ?}
   ";
_valManager.assignMonetaryVal:=
   "{? _var:=var_pres('_a')=type_of('') & var_pres('_b')=type_of('')
    || .assign(_a,.getMonetaryVal(_b))
    || {? _var || .assign(_a,0) ?}
    ?}
   ";
_valManager.assignMonetaryValOrDefault:=
   "{? ~(.validator.valid) || .assignMonetaryVal(_a,_b) || .assign(_a,0) ?}";
_valManager.assign:=
   "{? (_founded:=.validator.getTabFld(_a)) & var_pres('_b')>0 || .validator.tab[_founded]:=_b || return(0) ?}";
_valManager.getResult:=
   "{? var_pres('validator',.)>100 || return(.validator.getResult()) || return(0) ?}";
_valManager.setResult:=
   "{? var_pres('validator',.)>100 || .validator.setResult(_a) ?}";
_valManager.getTabFieldVal:=
   "_ret:=~~;
    {? var_pres('_a')=type_of('')
    || (_fld:=.validator.getTabFld(_a));
       {? _fld || _ret:=(.validator.tab[_fld]) ?}
    ?};
    return(_ret)
   ";
_valManager.isValidation:="{? var_pres('validator',.) || return(.validator.getValid()) || return(0) ?}";
_valManager.setModifRef:="{? var_pres('_a')=type_of(\"\") || .modifRef:=_a || .modifRef:=~~ ?}";
_valManager.setModifRef();
_valManager


\conflicting_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła tworzy tablicę nazwaną z elementami parametryzującymi sposób odnalezienia wniosku.
::   WE:
::   WY: Tablica z nazwami parametrów do zdefiniowania
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
:: Rok złożenia wniosku
   'YEAR',
:: Dostawca wniosku (złączenie do tabeli OSOBA -> OSOBA.ref)
   'OSOBA',
:: Nazwa typu wniosku
   'TYPEID',
:: Parametr określający identyfikatory pól, dla których należy przeprowadzić porównanie (czy uzupełnione tak samo)
:: Dla tego parametru należy dostarczyć nazwy identyfikatorów portalowych pól definicji wniosku oddzielonych przecinkami
:: Dla pustego łańcucha znaków zostanie w \exists/portal_walidacja sprawdzony warunek na samo istnienie wniosku
   'IDS',
:: Wartości kolejnych pól bieżącego wniosku, które będą sprawdzane z wnioskami odnalezionymi (dla niepustego arg. IDS)
:: Zawartość powinna być zdefiniowana jako tablica, gdzie nazwy elementów odpowiadają identyfikatorom z IDS,
:: a wartościami są odpowiednie wartości pobrane z pól wniosku
   'VALUES'
);

_makeFld:="_flds:=obj_new('value','get','set','validation')";

_args.YEAR:=_makeFld();
_args.YEAR.value:=date~1;
_args.YEAR.set:=
   "_result:=0;
    _default:=0;
    _value:={? var_pres('_a')=type_of(0) || _a || _default:=1; date~1 ?};
    .value:=_value;
    {? ((~_default & .validation()) | _default) || _result:=1 ?};
    _result
   ";
_args.YEAR.get:=".value";
_args.YEAR.validation:=".value>1900 & .value<2999";

_args.OSOBA:=_makeFld();
_args.OSOBA.value:=null;
_args.OSOBA.set:=
   "_result:=0;
    _default:=0;
    _value:={? var_pres('_a')=type_of(null) || _a || _default:=1; null ?};
    .value:=_value;
    {? ((~_default & .validation()) | _default) || _result:=1 ?};
    _result
   ";
_args.OSOBA.get:=".value";
_args.OSOBA.validation:=".value<>null & ref_tab(.value)=OSOBA";

_args.TYPEID:=_makeFld();
_args.TYPEID.value:='';
_args.TYPEID.set:=
   "_result:=0;
    _default:=0;
    _value:={? var_pres('_a')=type_of('') || _a || _default:=1; '' ?};
    .value:=_value;
    {? ((~_default & .validation()) | _default) || _result:=1 ?};
    _result
   ";
_args.TYPEID.get:=".value";
_args.TYPEID.validation:=
   "_result:=0;
    _id:={? var_pres('value',.)=type_of('') & .value<>'' || .value || return(_result) ?};
    ETYPY.cntx_psh();
    ETYPY.index('ID_WP');
    ETYPY.prefix(_id,);
    _result:=ETYPY.first();
    ETYPY.cntx_pop();
    _result
   ";

_args.IDS:=_makeFld();
_args.IDS.value:='';
_args.IDS.set:=
   "_result:=0;
    _default:=0;
    _value:={? var_pres('_a')=type_of('') || _a || _default:=1; '' ?};
    .value:=_value;
    {? ((~_default & .validation()) | _default) || _result:=1 ?};
    _result
   ";
_args.IDS.get:=".value";
_args.IDS.validation:="1";

_args.VALUES:=_makeFld();
_args.VALUES.value:=~~;
_args.VALUES.set:=
   "_result:=0;
    _default:=0;
    _value:={? var_pres('_a')=type_of(obj_new(1)) || _a || _default:=1; ~~ ?};
    .value:=_value;
    {? ((~_default & .validation()) | _default) || _result:=1 ?};
    _result
   ";
_args.VALUES.get:=".value";
_args.VALUES.validation:="1";

_args


\conflicting
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła sprawdza, czy w systemie istnieje już wniosek zadanego typu, złożony przez tego zadanego pracownika
::       dla podanego roku oraz innych parametrów przekazanych do formuły za pomocą pierwszego argumentuy, którego
::       definicję określa formuła \conflicting_args/portal_walidacja.
::       Ogółem: Czy istnieje wniosek kolidujący?
::   WE: _a [ARRAY]- Tablica elementów nazwanych parametryzująca sposób odnalezienia wniosku.
::   WY: Tablica wynikowa z informacjami odpisanymi po wykonaniu formuły
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new(
:: Czy istnieje wniosek kolidujący?
   'exists',
:: Jaki jest status odnalezionego wniosku
   'status',
:: Data wprowadzenia kolidującego wniosku
   'data'
);
_result.exists:=0;
_result.status:='';

_in:={? var_pres('_a')=type_of(obj_new(1)) || _a || return(_result) ?};

_mask:='skid_v%1'[$_in.YEAR.get()+2];
EDOKUM.cntx_psh();
EDOKUM.use(_mask);
_ndx:=EDOKUM.ndx_tmp(,,'FIRMA',,,'TYPOBIEG',,,'TYP','W_PORTAL',,'TYP','NAZWA',);
EDOKUM.index(_ndx);
EDOKUM.prefix(exec('ref_firma','ustawienia'),exec('bl_typ','obiegi',2),'T',_in.TYPEID.get());
{? _loop:=EDOKUM.first()
|| _ids:=spli_str(_in.IDS.get(),',');
   _numberOfIds:=obj_len(_ids);
   _matchingStatus:="_status:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(0) ?}; 'Y,P'*_status";
   {? _numberOfIds
   || EDOK_ATR.cntx_psh();
      EDOK_ATR.prefix();
      _values:=_in.VALUES.get();
      {!
      |? _loop
      |!
         {? exec('open_edk_atr','obiegi',EDOKUM.ref)
         || _same:=1;
            {! _index:=1.._numberOfIds
            |!
               _atr:=exec('atr_get','portal_walidacja',_ids[_index]);
               {? var_pres(_ids[_index],_values)>0
               || _same*=(($('_a.%1'[_ids[_index]]))(_values))=_atr
               ?}
            !};
            {? _same & _matchingStatus(EDOKUM.STATUS)
            || _result.exists:=1;
               _result.status:=EDOKUM.STATUS;
               _result.data:=EDOKUM.DATAW
            ?}
         ?};
         _loop:=(~_result.exists & EDOKUM.next())
      !};
      EDOK_ATR.cntx_pop()
   ?}
?};
EDOKUM.cntx_pop();

_result


\work_time_available
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła wykorzystywana we wnioskach związanych z dziedziną PRC (odbiór nadgodzin, czas wolny...) odpowiedzialna
::       za zwrot informacji o dostępnym czasie, który można wykorzystać na dany wniosek.
::   WE:  _a  [REFERENCE] - złączenie do rekordu tabeli P
::       [_b] [DATE]      - sprawdzany dzień [domyślnie bieżąca data]
::       [_c] [REFERENCE] - złączenie do rekordu tabeli A_OKR
::       [_d] [STRING]    - określenie warstwy KAL_BUFFa ['P' - planowanie, 'G' - grafik (domyślnie)]
::   WY: Czas pozostały do możliwego "wykorzystania" na wnioski
::----------------------------------------------------------------------------------------------------------------------
_result:=*0;

 _prac:={? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=P     || _a || return(_result) ?};
 _date:={? var_pres('_b')=type_of(date) & _b<>date(0,0,0)              || _b || date()          ?};
_a_okr:={? var_pres('_c')=type_of(null) & _c<>null & ref_tab(_c)=A_OKR || _c || null            ?};
 _type:={? var_pres('_d')=type_of('')                                  || _d || 'G'             ?};

_time:=obj_ntab_add(
   obj_new(
::    Wymiar dostępny na podany dzień [w milisekundach]
      'ofWork',
::    Czas wykorzystany na nieobecności [w milisekundach]
      'ofAbsence',
::    Czas wykorzystany na odbiór nadgodzin (wnioski o odbiór nadgodzin) [w milisekundach]
      'ofFreeTime',
::    Czas wykorzystany na czas wolny (wnioski o czas wolny) [w milisekundach]
      'ofWorkingOffOvertime'
   ),
:: Dostępny czas (w milisekundach)
   'available',
:: Aktualizuje dostępny czas
   'update'
);
{! _index:=1..obj_len(_time)-1 |! _time[_index]:=0 !};
_time.update:=
   "_sum:=0;
    {! _index:=2..obj_len(.)-2 |! _sum+=.[_index] !};
    .available:=.ofWork-_sum
   ";

_toMilis:="{? var_pres('_a')=type_of(0) || _a*60*1000 || 0 ?}";

_schedule:=obj_new('type','setBy','time');
_schedule.type:=_type;
_schedule.setBy:=0;
_schedule.time:=*0;

{? P.seek(_prac,,1)
||
   {? _a_okr=null
   || {? ~(var_pres('__KAL')>100) || exec('__KAL','object') ?};
      {? P.KAL
      || __KAL.set_cal(P.KAL().NAZWA,_date~1)
      || __KAL.set_cal('standard')
      ?}
   || KAL_BUFF.cntx_psh();
      KAL_BUFF.index('OKRPRDT');
      KAL_BUFF.prefix(_schedule.type,_a_okr,_prac,_date);
      {? KAL_BUFF.first() & KAL_BUFF.CZY_OKR='T'
      || _schedule.setBy:=1;
         _schedule.time:=KAL_BUFF.CZAS
      ?};
      KAL_BUFF.cntx_pop()
   ?};

:: Wymiar dla podanego dnia
   _time.ofWork:=_toMilis(*(
      {? _schedule.setBy
      || _schedule.time
      || {? __KAL.get_day(_date) || KAL_DEF.CZAS || exec('wymiar_godz','prc_rozlicz',_date) ?}
      ?}
   ));
   _time.update();
:: Czas wykorzystany na nieobecności
   _continue:=1;
   _NBS:=exec('nieobecnosc','prc_rozlicz',P.ref,_date,_date);
   {? _NBS.first()
   || {!
      |? {? _NBS.PD='N' || _continue*=0 ?};
         _time.ofAbsence+=_toMilis(60*_NBS.G);
         _NBS.next()
      !};
      _time.update()
   ?};
   {? ~_continue | (_continue & _time.available<=0) || return(_result) ?};
:: Czas wykorzystany na odbiór nadgodzin
   _tmpTime:=exec('get_r_odn_czas','prc_graf',P.ref,_date);
   {? _tmpTime>0
   || _time.ofWorkingOffOvertime:=_tmpTime;
      _time.update()
   ?};
   {? _time.available<=0 || return(_result) ?};
:: Czas wykorzystany na czas wolny
   _tmpTime:=exec('get_wodb_czas','prc_graf',P.ref,null,_date);
   {? _tmpTime>0
   || _time.ofFreeTime:=_tmpTime;
      _time.update()
   ?};
   {? _time.available<=0 || return(_result) ?};

   _result:=(*(_time.available/_toMilis(1)))
?};

_result


\save_as_attachment
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Zapisuje wniosek jako załącznik i wgrywa do teczki składającego wniosek pracownika, o ile tak wynika z
::       wprowadzonej do systemu konfiguracji.
::   WE: _a [REFERENCE] - złączenie do zapisu tabeli EDOKUM, dla którego należy utworzyć załącznik
::   WY: 1 - utworzenie załącznika powiodło się, wpp. 0
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=EDOKUM || _a || return(_result) ?};

_result:={? exec('to_be_saved','portal_walidacja',_edokum) || exec('gen_zal','portal_walidacja',_edokum) || 1 ?};

_result


\to_be_saved
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła sprawdza, czy dla podanego typu wnioski są zapisywane w załącznikach pracownika.
::   WE: _a [REFERENCE] - złączenie do zapisu tabeli EDOKUM, dla którego nastąpi sprawdzenie
::   WY: 1 - załączniki zgodnie z konfiguracją są tworzone dla podanego typu, wpp. 0
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=EDOKUM || _a || return(_result) ?};

_options:=exec('options_profile','zal');

_cfg:=exec('get','#profile',,_options.sectionName,_options.paramName);
_activeTypes:=spli_str(_cfg,',');

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.prefix();
{? EDOKUM.seek(_edokum,,1)
||
   ETYPY.cntx_psh();
   ETYPY.prefix();
   _name:=EDOKUM.TYP().ID_WP;
   {? _name='' || _name:=ETYPY.ID_WP_B ?};
   ETYPY.cntx_pop();

   {! _ii:=1..obj_len(_activeTypes)
   |!
      {? _name=_activeTypes[_ii]
      || _result:=1
      ?}
   !}
?};
EDOKUM.cntx_pop();
_result


\gen_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Generuje załącznik dla wniosku.
::   WE: _a [REFERENCE] - złączenie do zapisu tabeli EDOKUM, dla którego nastąpi sprawdzenie
::   WY: 1 - wygenerowanie załącznika powiodło się, wpp. 0
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_edokum:={? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=EDOKUM || _a || return(_result) ?};

_firma:=exec('ref_firma','ustawienia');
_obieg:='Obieg wniosków';
_typObieg:=exec('FindInSet','#table','TYPOBIEG','UNIK',_obieg,_obieg,,1,,null());

_file:=obj_new('user','extension','getNameFor');
_file.user:=username();
_file.extension:='.pdf';
_file.getNameFor:=
   "_BUF:={? var_pres('_a')=type_of(SYSLOG) & _a.name=P.name() || _a || '' ?};
    '%1%2%3'[.user,$_BUF.tm_stamp(),.extension]
   ";

params_set('show',0);

_options:=exec('file_ovr_options','zal');

_args:=exec('add_args','zal');
_args.OWNER:='EDOKUM';
_args.OVR:=_options.add;

_mask:=ref_name(_edokum);

OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
EDOKUM.cntx_psh();
ETYPY.cntx_psh();
ETYPY.prefix();
EDOK_ATR.cntx_psh();
EDOKUM.use(_mask);
EDOKUM.index('W_PORTAL');
{? EDOKUM.seek(_edokum,,1) & exec('open_edk_atr','obiegi',_edokum)
|| EDOKUM.TYP();
   _prac:=
      {? 3+ETYPY.ID_WP='MAN'
      || exec('atr_get','portal_walidacja','PracownikIdERP')
      || EDOKUM.OSOBAWWW
      ?};
   {? P.seek(_prac,,1)
   || _pdf:=_file.getNameFor(P);
      {? rep_exec('obe_dok',,0,_pdf,1)
      || _args.SLO_NAZ:=ETYPY.NAZWA;
         _args.FILE_PATH:=_pdf;
         _args.ZAL_NAME:='%1_%2.pdf' [ETYPY.ID_WP,EDOKUM.DATAW$2];
         _args.ZAL_DESC:='%1 (%2)' [ETYPY.NAZWA,EDOKUM.DATAW$1];
         _added:=exec('add','zal',_args);
         _result:=(var_pres('ok',_added)=type_of(0) & _added.ok)
      ?}
   ?};
   EDOKUM.next()
?};
EDOK_ATR.f_clear();
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();

_result


\types_application
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Definiuje obiekt informujący o możliwych kodach typów wniosku.
::   WE:
::   WY: obiekt z możliwymi kodami typów
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: Kod dla pracownika
   'employee',
:: Kod dla przełożonego
   'employer'
);

_obj.employee:='W';
_obj.employer:='P';

_obj


\types_overtime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Definiuje obiekt informujący o możliwych kodach typów nadgodzin dla wniosków.
::   WE:
::   WY: obiekt z możliwymi kodami typów
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: Kod dla odbioru - pracownik
   'employee',
:: Kod dla odbioru - firma
   'company',
:: Kod dla odbioru - dzień wolny
   'dayOff',
:: Kod dla odbioru - święto
   'holiday'
);

_obj.employee:='P';
_obj.company:='F';
_obj.dayOff:='W';
_obj.holiday:='S';

_obj


\types_pit_zero_codes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Definiuje obiekt informujący o możliwych podstawowych wyborach na wnioskach dot. zwolnionego przychodu
::   WE:
::   WY: obiekt z możliwymi kodami typów
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: Kod dla Emeryt (art. 21 ust. 1 pkt 154)
   'workingPensioner',
:: Kod dla Młody pracownik (art. 21 ust. 1 pkt 148)
   'employeeUnder26',
:: Kod dla Powrót z zagranicy (art. 21 ust. 1 pkt 152)
   'returnFromAbroad',
:: Kod dla Wielodzietność (art. 21 ust. 1 pkt 153)
   'manyChildren'
);

_obj.workingPensioner:='ZWPODE';
_obj.employeeUnder26:='ZWPOD';
_obj.returnFromAbroad:='ZWPODP';
_obj.manyChildren:='ZWPODD';

_obj


\types_pit_zero_26_changes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Definiuje obiekt informujący o możliwych sposobach na zmiany oświadczenia do stosowania ulgi dla pracowników
::       poniżej 26 lat.
::   WE:
::   WY: obiekt z możliwymi kodami typów
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: Zmiana z korzystania z ulgi dla młodych na rezygnację
   'applying',
:: Zmiana z rezygnacji ze stosowania ulgi i przejście na jej stosowanie
   'rejecting'
);

_obj.applying:=0;
_obj.rejecting:=1;

_obj


\types_tax_relief_rejection
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Definiuje obiekt informujący o możliwych wyborach na wniosku o zaprzestanie stosowania ulgi dla osób poniżej
::       26 lat.
::   WE:
::   WY: obiekt z możliwymi kodami typów
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
:: Kod dla rezygnacji z zaprzestania stosowania zwolnienia (chęć korzystania z ulgi)
   'stop',
:: Kod dla zaprzestania stosowania zwolnienia
   'apply'
);

_obj.stop:='0';
_obj.apply:='1';

_obj


\getFml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Wybiera formułę walidacji lub akceptacji wniosku w zależności od przekazanej nazwy typu wniosku.
::       Przyjmuje się, że w obecnym pliku przechowujemy obiekty z nazwą oraz id każdego wniosku w '\_(skrót)'.
::       Z kolei formuła inicjująca walidację dla danego typu wniosku jest przechowywana w pod nazwą '\(skrót)_walid'.
::       Analogicznie tworzone są nazwy dla formuł inicjujących akceptację: '\(skrót)_akcept'.
::       Wszystkie używane skróty widoczne są zwracane w obiekcie przez formułę \types_ident.
::       W \types_ident należy zdefiniować każde nowe identyfikatory poprzez uzupełnienie listy skrótów.
::   WE:  _a  [STRING]  - nazwa typu wniosku
::       [_b] [INTEGER] - akceptacja [0 - nie,domyślnie(zwracane info o walidacji), 1 - tak(info na akceptacji)]
::   WY: Obiekt zwracający:
::       - formułę na walidację/akceptację wniosku w postaci łańcucha znaków lub ''
::       - informację o tym, czy dla danego typu wywołanie formuły walidacji lub akceptacji powinno zostać pominięte
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('fml','skip');
_result.fml:='';
_result.skip:=0;

  _name:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(_result) ?};
_akcept:={? var_pres('_b')=type_of(0)  & _b     || _b || 0               ?};
_lib:=form_stack(0).file;
{? _lib+2='.m'
|| _lib:=_lib-2
?};

_types:=exec('types_ident','portal_walidacja');

_type:=obj_new('content','clear');
_type.clear:="{? var_pres('content',.)>100 || obj_del(.content) ?}";

_fmlType:={? _akcept || 'akcept' || 'walid' ?};

{? _loop:=_types.values.first()
|| {!
   |? _loop
   |!
      _type.clear();
      _type.content:=_types.values.get();
      {? _name=($('exec(\'_%1\',\'%2\').name'[_type.content.id,_lib]))()
      || _result.fml:='exec(\'%1_%2\',\'%3\')'[_type.content.id,_fmlType,_lib];
         _result.skip:=_type.content.skip;
         _loop*=0
      ?};
      {? _loop || _loop:=_types.values.next() ?}
   !}
?};

_result


\types_ident
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła zwraca obiekt z informacjami o dostępnych identyfikatorach dla walidacji/akceptacji oraz związanych
::       z nimi szczegółami.
::       Szczegóły odnośnie funkcjonalności identyfikatorów wpisywanych poniżej znajdują się w \getFml/portal_walidacja.
::   WE:
::   WY: Obiekt z informacjami dla walidacji/akceptacji
::----------------------------------------------------------------------------------------------------------------------
exec('list_decl','#list');

_obj:=obj_new('values','register');

_obj.values:=obj_new(@.CLASS.List);

_obj.register:=
   "_value:=obj_new(
::    Identyfikator typu (do utworzenia nazway formuły walidacyjnej/akceptacyjnej oraz pobrania nazwy
      'id',
::    Informacja o tym czy należy pominąć wywołanie formuły walidacyjnej dla danego identyfikatora
      'skip'
    );
    _value.id:={? var_pres('_a')=type_of('') || _a || return(.) ?};
    _value.skip:={? var_pres('_b')=type_of(0) || _b || 0 ?};
    .values.add(_value);
    return(.)
   ";

_skip:=1;

:: wnioski kadrowe - pracownicze
_obj
.register('duplikat'                ,~_skip)
.register('erp7'                    ,~_skip)
.register('opieka'                  ,~_skip)
.register('opiekun'                 ,~_skip)
.register('njo'                     ,~_skip)
.register('rdcr'                    ,~_skip)
.register('nadg_w'                  ,~_skip)
.register('czw'                     ,~_skip)
.register('dofs'                    ,~_skip)
.register('odb'                     ,~_skip)
.register('ppsf'                    ,~_skip)
.register('szkolenie'               ,~_skip)
.register('edp'                     ,~_skip)
.register('zaliczka'                ,~_skip)
.register('zod'                     ,~_skip)
.register('zoc'                     ,~_skip)
.register('wn_zzal'                 ,~_skip)
.register('wozda'                   ,~_skip)
.register('zmiana_nip'              ,~_skip)
.register('zmiana_pesel'            ,~_skip)
.register('zmiana_dowod'            ,~_skip)
.register('zmiana_paszport'         ,~_skip)
.register('rachunek'                ,~_skip)
.register('zmiana_obywatelstwa'     ,~_skip)
.register('zmiana_us'               ,~_skip)
.register('zmiana_wdo'              ,~_skip)
.register('pzd_osw'                 ,~_skip)
.register('pzd_wn'                  ,~_skip)
:: wnioski kadrowe - menadżerskie
.register('odbp'                    ,~_skip)
.register('nadg_p'                  ,~_skip)
.register('praktyka'                ,~_skip)
.register('premia'                  ,~_skip)
.register('pruo'                    ,~_skip)
.register('woz'                     ,~_skip)
.register('rekrutacja'              ,~_skip)
.register('wzz'                     ,~_skip)
:: wnioski PPK
.register('ppk_dowu25'              ,~_skip)
.register('ppk_opif'                ,~_skip)
.register('ppk_wodw'                ,~_skip)
.register('ppk_drwd'                ,~_skip)
.register('ppk_wou'                 ,~_skip)
.register('ppk_dwwd'                ,~_skip)
.register('ppk_dwwp'                ,~_skip)
:: - - - - - - - - - - wnioski Paperless HR
.register('wydanie_zasw'            ,_skip)
.register('pit_zero_26'             ,~_skip)
:: wnioski Polski Ład
.register('zlozenie_dok'            ,_skip);

_obj


::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::                                        Formuły walidacyjno-akceptacyjne
::- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

\walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Główna formuła na walidację wniosków kadrowych z Portal HR. Zakładamy, że EDOKUM jest ustawiony.
::       Obsługa wniosku przekazana będzie do odpowiednich procedur w zależności od wyniku zwróconego przez formułę
::       \getFml/ z obecnego pliku.
::   WE: [_a] [STRING] - nazwa typu wniosku
::   WY: tabela z komunikatami
::----------------------------------------------------------------------------------------------------------------------
_nazwa:={? var_pres('_a')=type_of('') & _a<>'' || _a || '' ?};

_types:=exec('types','portal_wnioski');
_type:='';

{? _nazwa='' | _type=''
|| ETYPY.cntx_psh();
   ETYPY.prefix();
   _nazwa:=EDOKUM.TYP().NAZWA;
   _type:=ETYPY.W_PORTAL;
   ETYPY.cntx_pop()
?};

_ok:=1;
exec('tab_kom', 'form_ob');
:: Pobranie i wywołanie odpowiedniej formuły walidacyjnej w zależności od nazwy typu
_valid:=exec('getFml','portal_walidacja',_nazwa);
{? ~_valid.skip & _valid.fml<>''
|| ($_valid.fml)()
|| _ok*=0
?};

{? ~_ok | _valid.skip
|| _ok+=(_type=_types.paperless)
?};
{? ~_ok
|| exec('tab_kom_add', 'form_ob', 1, 'Brak poprawnego powiązania wniosku z formułą walidacyjną.'@)
?};
TKOM13


\akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Główna formuła na akceptację wniosków kadrowych z Portal HR. Zakładamy, że EDOKUM jest ustawiony.
::       Obsługa wniosku przekazana będzie do odpowiednich procedur w zależności od wyniku zwróconego przez formułę
::       \getFml/ z obecnego pliku.
::   WE: [_a] [STRING] - nazwa typu wniosku
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_nazwa:={? var_pres('_a')=type_of('') & _a<>'' || _a || '' ?};

{? _nazwa=''
|| ETYPY.cntx_psh();
   ETYPY.prefix();
   _nazwa:=EDOKUM.TYP().NAZWA;
   ETYPY.cntx_pop()
?};

:: Pobranie i wywołanie odpowiedniej formuły akceptacji w zależności od nazwy typu
_akcept:=exec('getFml','portal_walidacja',_nazwa,1);
_result:={? _akcept.fml<>'' || ($_akcept.fml)() || exec('oResult','form_ob') ?};

:: obecnie funkcjonalność automatycznego zapisywania załączników została wyłączona
::  - do przerobienia w wersji 23.xx mechanizm konfiguracyjny
::{? _result.ok
::|| exec('save_as_attachment','portal_walidacja',EDOKUM.ref)
::?};
_result


\duplikat_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o duplikat świadectwa pracy - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('duplikat','portal_walidacja',_edokum,_osoba,_walid)


\duplikat_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o duplikat świadectwa pracy - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('duplikat','portal_walidacja',_edokum,_osoba)


\duplikat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o duplikat świadectwa pracy - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      P.cntx_psh();
      P.index('OSOBA');
      _refP:={? P.find_key(_osoba) || P.ref() || null() ?};
      P.cntx_pop();

      {? _refP=null()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Duplikat świadectwa pracy niedostępny dla osoby niebędącej współpracownikiem.'@;
            _txt[2]:=_err.kadry
         ?}
      ?};

:: sprawdzenie czy dla współpracownika możemy wskazać świadectwo pracy
      {? _result.ok
      || _zalExist:=0;
         ZALACZ.cntx_psh();
         ZALACZ.index('ZALACZ');
::    wyszukanie typu zalacznika
         _slo_typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','ZAL','ZAL',,,,null());
         _nazwa:=exec('FindInSet','#table','SLO_NAZ','NAZWA','Świadectwo pracy',_slo_typ,"@.SLO_NAZ.NAZWA",,,'');
         {? _nazwa<>''
         || ZALACZ.prefix(exec('ref_firma','ustawienia'),_osoba,_refP,'P',_nazwa);
            _zalExist:=ZALACZ.first()
         ?};
         ZALACZ.cntx_pop();
         {? ~_zalExist
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Brak w bazie świadectwa pracy,'@;
               _txt[2]:='na podstawie którego istniałaby możliwość utworzenia duplikatu.'@;
               _txt[3]:=_err.kadry
            ?}
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_duplikat','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\erp7_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - wniosek ERP-7 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('erp7','portal_walidacja',_edokum,_osoba,_walid)


\erp7_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - wniosek ERP-7 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('erp7','portal_walidacja',_edokum,_osoba)


\erp7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek ERP-7 - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      P.cntx_psh();
      F_ZATR.cntx_psh();
      P.index('OSOBA');
      _fZatr:={? P.find_key(_osoba) || P.F_ZATR().KOD || '' ?};
      F_ZATR.cntx_pop();
      P.cntx_pop();

      {? _fZatr='Z'
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Zaświadczenia ERP-7 niedostępne dla osób zatrudnionych na podstawie umowy cywilnoprawnej.'@;
            _txt[2]:=_err.kadry
         ?}
      |? _fZatr=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='System zwrócił błąd w trakcie sprawdzania formy współpracy z pracodawcą.'@;
            _txt[2]:=_err.kadry
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_erp7','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\opieka_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - wniosek oświadczenie dot. opieki nad dzieckiem do lat 14 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('opieka','portal_walidacja',_edokum,_osoba,_walid)


\opieka_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - wniosek oświadczenie dot. opieki nad dzieckiem do lat 14 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('opieka','portal_walidacja',_edokum,_osoba)


\opieka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek oświadczenia dot. opieki nad dzieckiem do lat 14 - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _opieka:=exec('_opieka','portal_walidacja');
   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=10;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Rok (dla składanego wniosku)
         'ROK',
::       Data urodzenia dziecka, dla którego składający jest opiekunem prawnym
         'UR_DATA',
::       Rodzaj limitu
         'RODZAJ',
::       Liczba dni/godzin wynikająca z wybranego rodzaju limitu [techniczne]
         'ILE',
::       Złączenie do tabeli P (P.ref) [techniczne]
         'P',
::       Złączenie do tabeli R (R.ref) [techniczne]
         'R'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.ROK:='Rok';
      _tabId.UR_DATA:='DataUrodzenia';
      _tabId.RODZAJ:='RodzajLimitu';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.ROK:=#_getAtr(_tabId.ROK);
      _tab.UR_DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.UR_DATA),'D');
      _tab.RODZAJ:=_getAtr(_tabId.RODZAJ);
      _tab.ILE:=0;
      _tab.P:=null;
      _tab.R:=null;

      {? _result.ok
      || P.cntx_psh();
         P.prefix();
         {? _result.ok
            & +EDOKUM.OSOBAWWW=16
            & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
            & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || _tab.P:=P.ref
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika składającego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         P.cntx_pop()
      ?};

      {? _result.ok & (_tab.ROK<1900 | _tab.ROK>2999)
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowa data wybrana w polu \"%1\".'@[_getName(_tabId.ROK)]
         ?}
      ?};

      {? _result.ok & _tab.UR_DATA=_d0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data w polu\"%1\" nie może być pusta.'@[_getName(_tabId.UR_DATA)] ?}
      ?};

      {? _result.ok
      || _today:=date();
         _years:=(_today~1)-(_tab.UR_DATA~1);
         {? ~(_years<14 | (_years=14 & (_today~2<_tab.UR_DATA~2 | (_today~2=_tab.UR_DATA~2 & _today~3<_tab.UR_DATA~3))))
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Oświadczenie przysługuje opiekunom dzieci do lat 14.'@;
               _txt[2]:=_err.kadry
            ?}
         ?}
      ?};

      {? _result.ok & _tab.UR_DATA>date
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowa data wybrana w polu \"%1\".'@[_getName(_tabId.UR_DATA)];
            _txt[2]:='Data nie może być późniejsza od daty bieżącej.'@
         ?}
      ?};

      {? _result.ok & _tab.ROK<date()~1
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowy rok wybrany w polu \"%1\".'@[_getName(_tabId.ROK)];
            _txt[2]:='Dla wybranego oświadczenia rok nie może być wcześniejszy od roku bieżącego.'@
         ?}
      ?};

      {? _result.ok & _tab.ROK<_tab.UR_DATA~1
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Rok pochodzący z daty wskazanej w polu \"%1\" nie może być'@[_getName(_tabId.UR_DATA)];
            _txt[2]:='późniejszy od roku, na który składane jest oświadczenie.'@
         ?}
      ?};


      _wym:=1;
      {? _result.ok
      || RD.cntx_psh();
         RD.index('_RODZINA');
         P.cntx_psh();
         P.prefix();
         _osoba:=null;
         {? P.seek(_tab.P,,1)
         || _osoba:=P.OSOBA().ref();
            H.cntx_psh();
            H.use('_hist');
            H.index('_HISTKOD');
            H.prefix(P.ref,'Z');
            {? H.find_le(date())
            || _wym:=H.WYL/H.WYM
            ?};
            H.cntx_pop()
         ?};
         P.cntx_pop();
         {? _osoba
         || RD.prefix(_osoba,_tab.UR_DATA);
            {? (exec('FindInSet','#table','S_ZUS','S_ZUS','11','R',,1,,null) |
               exec('FindInSet','#table','S_ZUS','S_ZUS','21','R',,1,,null))
            || {? _loop:=RD.first()
               || _today:=date();
::                   Możliwość uzyskania uprawnień do limitu na art. 188 KP na podstawie któregokolwiek zapisu z RD
                  _privileged:=0;
                  {!
                  |? _loop
                  |! {? RD.STPK().RODZAJ='R' & (RD.STPK().KOD='11' | RD.STPK().KOD='21')
                     || _years:=(_today~1)-(RD.DA~1);
                        _privileged:=(_years<14 |
                                     (_years=14 & (_today~2<RD.DA~2 | (_today~2=RD.DA~2 & _today~3<RD.DA~3))))
                     ?};
                     _loop:=~_privileged & RD.next()
                  !};
                  {? _result.ok & ~_privileged
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='W kartotece informującej o członkach rodziny brak informacji o dziecku'@;
                        _txt[2]:='w wieku poniżej 14 lat.'@;
                        _txt[3]:=_err.kadry
                     ?}
                  ?}
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='W kartotece informującej o członkach rodziny brak informacji o dziecku,'@;
                     _txt[2]:='którego datę urodzenia wskazano na wniosku.'@;
                     _txt[3]:=_err.kadry
                  ?}
               ?}
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Nie powiodło się odnalezienie kodu dla dokumentów ZUS.'@;
                  _txt[3]:=_err.kadry
               ?}
            ?}
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie danych osobowych pracownika rejestrującego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         RD.cntx_pop()
      ?};

      _porsloCode:='OpiekaRodzajLimitu';

      {? _result.ok
      || {? ~exec('exist_in_custom','portal_slowniki',_porsloCode,_tab.RODZAJ)
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.RODZAJ)]
            ?}
         || PORSLO.cntx_psh();
            PORSLO.index('FIELD');
            PORSLO.prefix(null,exec('customField','portal_slowniki'),'',_porsloCode,);
            _porslo:={? PORSLO.first() || PORSLO.ref() || null ?};
            _firma:=exec('firma4porsloit','portal_slowniki',_porslo);
            PORSLO.cntx_pop();
            PORSLOIT.cntx_psh();
            PORSLOIT.index('SLOVAL');
            PORSLOIT.prefix(_porslo,_firma,_tab.RODZAJ,);
            _tab.RODZAJ:={? PORSLOIT.first() || PORSLOIT.DESC || '?' ?};
            PORSLOIT.cntx_pop();

            {? _result.ok & _tab.RODZAJ='?'
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='W systemie nie odnaleziono wskazanego na wniosku rodzaju limitu.'@;
                  _txt[3]:=_err.kadry
               ?}
            ?};

::          pobranie informacji o zapisach znajdujących się w "Okresach zatrudnienia"
            _md:=exec('md_staz','staz',EDOKUM.DOSTAWCA,_tab.ROK);
            {? _result.ok
            || {? (_tab.RODZAJ='D' & _md.godz>0) | (_tab.RODZAJ='G' & _md.dni>0) | (_md.dni>0 & _md.godz>0)
               || _result.ok*=0;
                  {? _walid
                  || _KOMM:=obj_new(@.CLASS.JCQ);
                     {? _KOMM.init()
                     || exec('md_info','staz',EDOKUM.DOSTAWCA,_tab.ROK,_KOMM,0,0,0);
                        {? _size:=_KOMM.get_size()
                        || {! _index:=1.._size |! _txt[_index]:=_KOMM.get_msg(_index) !};
                           _txt[_size+1]:=_err.kadry
                        ?}
                     ?}
                  ?}
               ?}
            ?};

            {? _result.ok
            || _atr:={? _tab.RODZAJ='D' || 19711 |? _tab.RODZAJ='G' || _atr:=19712 ?};
               _limitAmount:=0;
               {? _atr || _limitAmount:=__RUB.sys_val(_atr,date) ?};
               {? type_of(_limitAmount)=type_of(0)
               || _tab.ILE:=ceil(_limitAmount*{? _tab.RODZAJ='G' || _wym || 1 ?});
::                możemy sumować _md.dni i _md.godz bo będąc w tym miejscu tylko jedno pole powinno mieć wartość
                  _tab.ILE:=_tab.ILE-(_md.dni+_md.godz);
                  {? _tab.ILE<=0
                  || _tab.ILE:=0;
                     _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Wykorzystano już dostępny limit opieki w roku %1.'[$_tab.ROK];
                        _txt[2]:=_err.kadry
                     ?}
                  ?}
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:=_err.config;
                        _txt[2]:='Nie powiodło się odnalezienie atrybutu przypisanego do rubryki.';
                     _txt[3]:=_err.kadry
                  ?}
               ?}
            ?}
         ?}
      ?};

      {? _result.ok
      || R.cntx_psh();
         R.index('RUBKOD');
         R.prefix();
         DS.cntx_psh();
         DS.index('DYSCYPLI');
         DS.prefix();
::       Wyszukanie rubryki przypisanej do opieki
         _rubs:=__RUB.sys_rub(1162);
         _nr:={? _rubs.first() || _rubs.RN || 0 ?};
         {? _nr
         || _tab.R:={? R.find_key(_nr) || R.ref() || null ?};
            {? _tab.R
            || {? DS.find_key(_tab.P,_tab.ROK,_tab.R)
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Istnieje już zapis w dyscyplinie pracy o opiece na dziecko do lat 14 (Art. 188)'@;
                     _txt[2]:='dotyczący wybranego roku.'@;
                     _txt[3]:=_err.kadry
                  ?}
               || DS.blank(1);
                  DS.P:=_tab.P;
                  DS.R:=_tab.ROK;
                  DS.NB:=_tab.R;
                  {? ~DS.add(1)
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:=_err.config;
                        _txt[2]:='Nie powiódł się próbny zapis wniosku do bazy danych.'@
                     ?}
                  || DS.NR:={? _tab.RODZAJ='G' || 'G' || 'R' ?};
                     DS.NN:=_tab.ILE;
                     DS.NP:=DS.NN-DS.NW;
                     DS.NZ:=0;
                     DS.NL:=DS.NN;
                     DS.DNL:=date();
                     {? ~DS.put(1)
                     || _result.ok*=0;
                        {? _walid
                        || _txt[1]:=_err.config;
                           _txt[2]:='Nie powiódł się próbny zapis wniosku do bazy danych.'@
                        ?}
                     || exec('FUNKCJE','object');
                        FUNKCJE.OBLICZDS(_tab.ROK)
                     ?}
                  ?}
               ?}
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Nie powiodło się wskazanie rubryki przypisanej do Opieki (Art.188)'@;
                  _txt[3]:=_err.kadry
               ?}
            ?}
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='W systemie brak rubryki przypisanej do Opieki (Art.188)'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         DS.cntx_pop();
         R.cntx_pop()
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=_opieka.name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\opiekun_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - wniosek oświadczenia opiekuna dzieckia do lat 4 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('opiekun','portal_walidacja',_edokum,_osoba,_walid)


\opiekun_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - wniosek oświadczenia opiekuna dzieckia do lat 4 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('opiekun','portal_walidacja',_edokum,_osoba)


\opiekun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek oświadczenia opiekuna dzieckia do lat 4 - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _opiekun:=exec('_opiekun','portal_walidacja');
   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=4;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Rok (dla składanego wniosku)
         'ROK',
::       Data urodzenia dziecka, dla którego składający jest opiekunem prawnym
         'UR_DATA',
::       Złączenie do tabeli P (P.ref) [techniczne]
         'P',
::       Czy korekta wniosku już istniejącego w systemie na dany rok
         'KOREKTA'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.ROK:='Rok';
      _tabId.UR_DATA:='DataUrodzenia';
      _tabId.KOREKTA:='Korekta';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.ROK:=#_getAtr(_tabId.ROK);
      _tab.UR_DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.UR_DATA),'D');
      _tab.KOREKTA:=(_getAtr(_tabId.KOREKTA)='T');
      _tab.P:=null();

      {? _result.ok
      || P.cntx_psh();
         P.prefix();
         {? _result.ok
            & +EDOKUM.OSOBAWWW=16
            & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
            & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || _tab.P:=P.ref()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika składającego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         P.cntx_pop()
      ?};

      {? _result.ok & (_tab.ROK<1900 | _tab.ROK>2999)
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowa data wybrana w polu \"%1\".'@[_getName(_tabId.ROK)]
         ?}
      ?};

      {? _result.ok & _tab.UR_DATA=_d0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data w polu\"%1\" nie może być pusta.'@[_getName(_tabId.UR_DATA)] ?}
      ?};

      {? _result.ok & _tab.UR_DATA>date
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowa data wybrana w polu \"%1\".'@[_getName(_tabId.UR_DATA)];
            _txt[2]:='Data nie może być późniejsza od daty bieżącej.'@
         ?}
      ?};

      {? _result.ok & _tab.ROK<date()~1
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nieprawidłowy rok wybrany w polu \"%1\".'@[_getName(_tabId.ROK)];
            _txt[2]:='Dla wybranego oświadczenia rok nie może być wcześniejszy od roku bieżącego.'@
         ?}
      ?};

      {? _result.ok & _tab.ROK<_tab.UR_DATA~1
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Rok pochodzący z daty wskazanej w polu \"%1\" nie może być'@[_getName(_tabId.UR_DATA)];
            _txt[2]:='późniejszy od roku, na który składane jest oświadczenie.'@
         ?}
      ?};

      {? _result.ok & _walid & ~_tab.KOREKTA
      ||
         _args:=exec('conflicting_args','portal_walidacja');
         _continue:=1;
         _continue*=_args.YEAR.set(EDOKUM.DATAW~1);
         _continue*=_args.OSOBA.set(_osoba);
         _continue*=_args.TYPEID.set(_opiekun.id);
         _continue*=_args.IDS.set(_tabId.ROK);
         _values:=($('obj_new(\'%1\')'[_tabId.ROK]))();
         ($('_a.%1:=\'%2\''[_tabId.ROK,_getAtr(_tabId.ROK)]))(_values);
         _continue*=_args.VALUES.set(_values);

         {? _continue
         || _conflict:=exec('conflicting','portal_walidacja',_args);
            {? _conflict.exists
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='W systemie istnieje już oświadczenie za rok %1.'@[$_tab.ROK];
                  _txt[2]:='Oświadczenie kolidujące zostało wprowadzone w dniu %1'@[_conflict.data$6];
                  _txt[3]:='i obecnie posiada status %1.'@
                     [{? _conflict.status='Y' || 'zaakceptowanego'@ || 'do poprawy'@ ?}];
                  _txt[4]:='Aby nadpisać uprzednio złożone oświadczenie należy zaznaczyć pole informujące o korekcie.'@
               ?}
            ?}
         ?}
      ?};

      {? _result.ok
      || RD.cntx_psh();
         RD.index('_RODZINA');
         P.cntx_psh();
         P.prefix();
         _osoba:=null;
         {? P.seek(_tab.P,,1)
         || _osoba:=P.OSOBA().ref()
         ?};
         P.cntx_pop();
         {? _osoba
         || _s_zus:=exec('FindInSet','#table','S_ZUS','S_ZUS','11','R',,1,,null);
            RD.prefix(_osoba,_tab.UR_DATA);
            {? _s_zus
            || {? _loop:=RD.first()
               || _today:=date();
::                Możliwość złożenia oświadczenia przysługuje opiekunom/rodzicom dziecka do lat 4
                  _privileged:=0;
                  {!
                  |? _loop
                  |! {? RD.STPK=_s_zus
                     || _years:=(_today~1)-(RD.DA~1);
                        _privileged:=(_years<4 |
                                     (_years=4 & (_today~2<RD.DA~2 | (_today~2=RD.DA~2 & _today~3<RD.DA~3))))
                     ?};
                     _loop:=~_privileged & RD.next()
                  !};
                  {? _result.ok & ~_privileged
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='W kartotece informującej o członkach rodziny brak informacji o dziecku'@;
                        _txt[2]:='w wieku poniżej 4 lat.'@;
                        _txt[3]:=_err.kadry
                     ?}
                  ?}
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='W kartotece informującej o członkach rodziny brak informacji o dziecku,'@;
                     _txt[2]:='którego datę urodzenia wskazano na wniosku.'@;
                     _txt[3]:=_err.kadry
                  ?}
               ?}
            || _result.ok*=0;
               {? _walid
                  || _txt[1]:=_err.config;
                     _txt[2]:='Nie powiodło się odnalezienie kodu dla dokumentów ZUS.'@;
                     _txt[3]:=_err.kadry
               ?}
            ?}
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie danych osobowych pracownika rejestrującego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         RD.cntx_pop()
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=_opiekun.name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\njo_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - wniosek o podjęcie lub kontynuację nauki języka obcego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('nauka_jezyka','portal_walidacja',_edokum,_osoba,_walid)


\njo_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - wniosek o podjęcie lub kontynuację nauki języka obcego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('nauka_jezyka','portal_walidacja',_edokum,_osoba)


\nauka_jezyka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o podjęcie lub kontynuację nauki języka obcego - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_njo','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\praktyka_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła na walidację - wniosek o praktykę - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('praktyka','portal_walidacja',_edokum,_osoba,_walid)


\praktyka_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła na akceptację - wniosek o praktykę - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('praktyka','portal_walidacja',_edokum,_osoba)


\praktyka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła obsługująca wniosek o praktykę - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Imię osoby podejmującej praktyki
         'PIERWSZE',
::       Nazwisko osoby podejmującej praktyki
         'NAZWISKO',
::       Imię i nazwisko opiekuna osoby podejmującej praktyki
         'OPIEKUN',
::       Miejsce praktyk
         'MIEJSCEPR',
::       Rodzaj praktyk
         'RODZ_PRAK',
::       Wynagrodzenie za praktyki
         'WYNAGR',
::       Wymiar etatu praktyk (licznik)
         'WYL',
::       Wymiar etatu praktyk (mianownik)
         'WYM',
::       Data rozpoczęcia praktyk
         'OD',
::       Data zakończenia praktyk
         'DO'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.PIERWSZE:='Imie';
      _tabId.NAZWISKO:='Nazwisko';
      _tabId.OPIEKUN:='OpiekunIdERP';
      _tabId.MIEJSCEPR:='MiejsceWykPracyNazwa';
      _tabId.RODZ_PRAK:='RodzajPraktyki';
      _tabId.WYNAGR:='WynagrodzeniePraktyki';
      _tabId.WYL:='EtatL';
      _tabId.WYM:='EtatM';
      _tabId.OD:='DataOdPraktyki';
      _tabId.DO:='DataDoPraktyki';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.PIERWSZE:=_getAtr(_tabId.PIERWSZE);
      _tab.NAZWISKO:=_getAtr(_tabId.NAZWISKO);
      _opiekun:=_getAtr(_tabId.OPIEKUN);

      _tab.OPIEKUN:=null();
      _tab.MIEJSCEPR:=exec('FindInSet','#table','SLO_NAZ','NAZWA',_getAtr(_tabId.MIEJSCEPR),
         exec('FindInSet','#table','SLO_TYP','SYMBOL','MIEJSCPR','MIEJSCPR',,,,null),,,,null
      );
      _tab.RODZ_PRAK:=_getAtr(_tabId.RODZ_PRAK);
      _tab.WYNAGR:=#gsub(_getAtr(_tabId.WYNAGR),',','.');
      _tab.WYL:=#_getAtr(_tabId.WYL);
      _tab.WYM:=#_getAtr(_tabId.WYM);
      _tab.OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.OD),'D');
      _tab.DO:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DO),'D');

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.NAZWISKO,OSOBA.PIERWSZE';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? _result.ok & _tab.MIEJSCEPR=null()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='W systemie nie odnaleziono miejsca pracy wynikającego z wyboru w polu \"%1\".'@
               [_getName(_tabId.MIEJSCEPR)];
            _txt[2]:=_err.kadry
         ?}
      ?};

      {? _result.ok & type_of(_opiekun)=type_of('')
      || P.cntx_psh();
         {? P.seek(_opiekun,,1)
         || _tab.OPIEKUN:=P.ref()
         ?};
         P.cntx_pop()
      ?};

      {? _result.ok & _tab.OPIEKUN=null()
      || _result.ok*=0;
         _result.errMsg:='%1 %2'@
            ['Nie powiodło się odnalezienie w systemie pracownika wskazanego jako opiekun'@,
             'dla osoby podejmującej praktyki.'@
            ];
         {? _walid
         || _txt[1]:=_result.errMsg;
            _txt[2]:=_err.config;
            _txt[3]:=_err.kadry
         ?}
      ?};

      {? _result.ok & ~(_tab.RODZ_PRAK='Płatna' | _tab.RODZ_PRAK='Bezpłatna')
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='W systemie nie odnaleziono rodzaju praktyk wynikającego z wyboru w polu \"%1\".'@
            [_getName(_tabId.RODZ_PRAK)]
         ?}
      ?};

      {? _result.ok & _tab.RODZ_PRAK='Płatna' & _tab.WYNAGR<=0
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Dla płatnych praktyk wartość w polu \"%1\" musi być większa od 0.'@[_getName(_tabId.WYNAGR)]
         ?}
      ?};

      {? _result.ok & _tab.WYL<=0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Wartość w polu \"%1\" musi być większa od 0.'@[_getName(_tabId.WYL)] ?}
      |? _result.ok & _tab.WYL>exec('maxint','#math')
      || _result.ok*=0;
         {? _walid || _txt[1]:='Niedozwolona wartość w polu \"%1\".'@[_getName(_tabId.WYL)] ?}
      ?};

      {? _result.ok & _tab.WYM<=0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Wartość w polu \"%1\" musi być większa od 0.'@[_getName(_tabId.WYM)] ?}
      |? _result.ok & _tab.WYM>exec('maxint','#math')
      || _result.ok*=0;
         {? _walid || _txt[1]:='Niedozwolona wartość w polu \"%1\".'@[_getName(_tabId.WYL)] ?}
      ?};

      {? _result.ok & _tab.OD=_d0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data w polu\"%1\" nie może być pusta.'@[_getName(_tabId.OD)] ?}
      ?};

      {? _result.ok & _tab.OD<date()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty bieżącej.'@[_getName(_tabId.OD)]
         ?}
      ?};

      {? _result.ok & _tab.DO<>_d0 & _tab.DO<_tab.OD
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty w polu \"%2\".'@
               [_getName(_tabId.DO),_getName(_tabId.OD)]
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_praktyka','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\premia_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - wniosek o premię - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('premia','portal_walidacja',_edokum,_osoba,_walid)


\premia_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - wniosek o premię - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('premia','portal_walidacja',_edokum,_osoba)


\premia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o premię - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   P.cntx_psh();
   P.prefix();
   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Premiowany pracownik: ref, nazwisko, imię
         'P','NAZWISKO','PIERWSZE',
::       Okres wypłaty premii: rok, miesiąc
         'R','M',
::       Budżet - ref
         'PM_BUDZ',
::       Wartość (brutto) premii
         'WART',
::       Składający wniosek - dysponent premii
         'DYSP'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.R:='Rok';
      _tabId.M:='Miesiac';
      _tabId.WART:='Wartosc';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

      _tab.R:=#_getAtr(_tabId.R);
      _tab.M:=#_getAtr(_tabId.M);

::    walidacja danych przełożonego i pracownika
      _errPTxt:='Błąd konfiguracji wniosków - nie znaleziono wybranego pracownika w bazie danych.'@;
      _pmDysp:=null();
      {? +EDOKUM.OSOBAWWW=16 & type_of(ref_tab(EDOKUM.OSOBAWWW))>0 & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW,,1)
      || _tab.DYSP:=P.ref();
         _refDysp:=exec('is_pm_dysp','pm_wspolne',_tab.DYSP);
         {? ~_refDysp
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Błąd konfiguracji wniosków - składający wniosek nie jest dysponentem premii.'@;
               _txt[2]:='Wniosek o premię może być złożony tylko przez pracowników będących dysponentami premii.'@
            ?}
         || _pmDysp:=_refDysp
         ?}
      || _result.ok*=0;
         {? _walid || _txt[1]:='Błąd konfiguracji wniosków - nie odnaleziono składającego wniosek'@ ?}
      ?};

      _imNaz:=spli_str(exec('atr_get','portal_walidacja','PracownikImieNazwisko'),' ');
      {? _result.ok & obj_len(_imNaz)<>2
      || _result.ok*=0;
         {? _walid || _txt[1]:=_errPTxt ?}
      || _tab.NAZWISKO:=_imNaz[2];
         _tab.PIERWSZE:=_imNaz[1]
      ?};
      obj_del(_imNaz);
      &_imNaz;

      {? _result.ok & _tab.NAZWISKO<>'' & _tab.PIERWSZE<>''
      || _pUid:=_getAtr('PracownikIdERP');
         {? P.seek(_pUid,,1)
         || {? P.OSOBA().NAZWISKO<>_tab.NAZWISKO | P.OSOBA().PIERWSZE<>_tab.PIERWSZE
            || _result.ok*=0
            || _tab.P:=P.ref();
               {? P.ZA<>'T'
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Błąd konfiguracji wniosków - nie można przyznać premii wybranemu pracownikowi'@;
                     _txt[2]:='-';
                     _txt[3]:='pracownik nie jest już zatrudniony w firmie.'@
                  ?}
               ?}
            ?}
         || _result.ok*=0
         ?};
         {? ~_result.ok & _walid
         || _txt[1]:=_errPTxt
         ?}
      ?};

::    walidacja wybranego roku oraz miesiąca przyznania premii
      _premDat:=_d0;
      {? _result.ok & (_tab.R=0 | _tab.M=0)
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nieprawidłowe wartości daty przyznania premii.'@ ?}
      || _premDat:=date(_tab.R,_tab.M,1)
      ?};

::    walidacja wysokości premii
      _wart:=gsub(_getAtr(_tabId.WART),',','.');
      _str:=spli_str(_wart,'.');
      {? _result.ok & obj_len(_str)>1 & +(_str[2])>2
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nieprawidłowo wprowadzona wartość premii do wniosku.'@ ?}
      ?};
      &_str;
      _tab.WART:=#_wart;

::    walidacja budżetu
      {? _result.ok
      || _budzUid:=exec('atr_get','portal_walidacja','PersonBonusForAssignmentIdErp');
         PM_BUDZ.cntx_psh();
         PM_BUDZ.prefix();
         {? ~PM_BUDZ.seek(_budzUid)
         || _result.ok*=0;
            {? _walid || _txt[1]:='Błąd konfiguracji wniosków - nie znaleziono wybranego budżetu w bazie danych.'@ ?}
         |? PM_BUDZ.PM_DYSP<>_pmDysp
         || _result.ok*=0;
            {? _walid || _txt[1]:='Błąd konfiguracji wniosków - zmiana dysponenta premii dla budżetu.'@ ?}

         |? ~(PM_BUDZ.OD<=_premDat & (PM_BUDZ.DO=_d0 | _premDat<=PM_BUDZ.DO))
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Rok i miesiąc przyznania premii nie zawierają się w ramach czasowych wybranego budżetu.'@
            ?}

         || {? PM_BUDZ.LIMIT='T'
            || {? PM_BUDZ.POZOST-_tab.WART<0
               || _result.ok*=0;
                  {? _walid || _txt[1]:='Przekroczono limit wybranego budżetu. Realizacja wniosku niemożliwa.'@ ?}
               |? PM_BUDZ.POZOST-_tab.WART>PM_BUDZ.PLAN
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Wskazana we wniosku wartość korygująca premię po uwzględnieniu w budżecie'@;
                     _txt[2]:='zawyżałaby łączny limit dostępny w ramach tego budżetu.'@;
                     _txt[3]:='Należy zweryfikować wprowadzone dane odnośnie wysokości korekty.'@
                  ?}
               ?}
            ?};
::          sprawdzenie czy nie istnieje już premia dla wybranego pracownika w wybranym roku i miesiącu
            PM_NAG.cntx_psh();
            PM_NAG.index('UNIQUE');
            PM_NAG.prefix(_pmDysp,_tab.R,_tab.M,PM_BUDZ.R,PM_BUDZ.ref());
            _pmNag:=null();
            {? PM_NAG.first()
            || {? _result.ok & (PM_NAG.AKC='T' | PM_NAG.BLOK='T')
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Dodanie premii dla wybranego pracownika nie jest możliwe.'@;
                     {? PM_NAG.AKC='T'
                     || _txt[2]:='Nagłówek premii uznaniowych w wybranym miesiącu został już zaakceptowany.'@
                     || _txt[2]:='Nagłówek premii uznaniowych w wybranym miesiącu został już zablokowany.'@
                     ?}
                  ?}
               || _pmNag:=PM_NAG.ref()
               ?}
            ||
::             Jeśli przyznajemy premię mieszczącą się w ramach czasowych budżetu, ale w punkcie w czasie, który
::             przypada wcześniej od daty bieżącej (roku i miesiąca) badamy czy listy z tego okresu są jeszcze
::             otwarte
               _firma:=exec('ref_firma','ustawienia');
               O.cntx_psh();
               O.index('LISTYZAM');
               O.prefix(_firma,'T',_tab.R,_tab.M);
               _listZam:=O.first();
               O.prefix(_firma,'N',_tab.R,_tab.M);
               _listOtw:=O.first();
               O.cntx_pop();
               {? _result.ok & _listZam>0 & _listOtw=0
               || _result.ok*=0;
                  {? _walid || _txt[1]:='W wybranym okresie wszystkie listy płac zostały zamknięte.'@ ?}
               || {? ~_walid
                  || PM_NAG.prefix();
                     PM_NAG.blank();
                     PM_NAG.PM_BUDZ:=PM_BUDZ.ref();
                     PM_NAG.ROK:=_tab.R;
                     PM_NAG.MSC:=_tab.M;
                     {? PM_NAG.add(1)
                     || _pmNag:=PM_NAG.ref()
                     ?}
                  ?}
               ?}
            ?};
            PM_NAG.cntx_pop();

            PM_PREM.cntx_psh();
            PM_PREM.index('UNIQUE');
            PM_PREM.prefix(_pmNag,_tab.P);
            {? _result.ok
            || {? PM_PREM.first()
               || {? (PM_PREM.KW+_tab.WART)<0
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Wartość korekty premii dla pracownika w wybranym miesiącu i roku dla'@;
                        _txt[2]:='wybranego budżetu przekracza wysokość wcześniej przyznanej premii.'@;
                        _txt[3]:='Należy zweryfikować wprowadzone dane.'@
                     ?}
                  ?};
                  {? _result.ok & ~_walid
                  || PM_PREM.KW+=_tab.WART;
                     {? PM_PREM.KW>0
::                      gdy kwota po korekcie nadal jest wyższa od 0 - nadpisujemy rekord
                     || {? PM_PREM.put(1) || _result.ok:=1 ?}
                     |? PM_PREM.KW=0
::                      gdy korekta powoduje zrównanie premii do 0 - rekord jest usuwany
                     || {? PM_PREM.del(,1) || _result.ok:=1 ?}
                     || _result.ok*=0
                     ?}
                  ?}
               || {? _tab.WART<=0
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Nieprawidłowa wysokość premii. Wartość premii powinna być większa od 0.'@
                     ?}
                  ?};
                  {? _result.ok & ~_walid
                  || PM_PREM.prefix();
                     PM_PREM.blank();
                     PM_PREM.PM_NAG:=_pmNag;
                     PM_PREM.P:=P.ref();
                     PM_PREM.KW:=_tab.WART;
                     PM_PREM.ZA:=P.ZA;
                     PM_PREM.OSOBA:=P.OSOBA;
                     PM_PREM.WYDZIAL:=P.WYDZIAL;
                     PM_PREM.KK:=P.KK;
                     PM_PREM.ST:=P.ST;
                     PM_PREM.CP:=P.CP;
                     PM_PREM.F_ZATR:=P.F_ZATR;
                     {? PM_PREM.add(1)
                     || _result.ok:=1
                     ?}
                  ?}
               ?}
            ?};
            PM_PREM.cntx_pop()
         ?};
         PM_BUDZ.cntx_pop()
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();
   P.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_premia','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\pruo_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - wniosek o przedłużenie lub rozwiązanie umowy z oceną - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

{? exec('open_edk_atr','obiegi',_edokum)
|| _dp:=exec('atr_get','portal_walidacja','DecyzjaPersonalna');
   {? _dp='Przedłużenie umowy'
   || exec('pruo_p','portal_walidacja',_edokum,_osoba,_walid)
   |? _dp='Rozwiązanie umowy'
   || exec('pruo_r','portal_walidacja',_edokum,_osoba,_walid)
   ?}
?}


\pruo_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - wniosek o przedłużenie lub rozwiązanie umowy z oceną - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

{? exec('open_edk_atr', 'obiegi', _edokum)
|| _dp:=exec('atr_get','portal_walidacja','DecyzjaPersonalna');
   {? _dp='Przedłużenie umowy'
   || exec('pruo_p','portal_walidacja',_edokum,_osoba)
   |? _dp='Rozwiązanie umowy'
   || exec('pruo_r','portal_walidacja',_edokum,_osoba)
   ?}
?}


\pruo_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formula na akceptacje - Wniosek o przedłużenie umowy lub zwolnienie z oceną - cześć dotycząca przedłużenia
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [REFERENCE] - wskazanie na OSOBA
::       _c [INTEGER]   - czy walidacja [1 - tak / 0 - nie (domyślnie)]
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_rodzaj:='';

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

:: powołanie obiektów
   exec('initObj','form_ob');
   exec('load_par','#parametr');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _p_uidref      :=exec('atr_get','portal_walidacja','PracownikIdERP');
      _data_s        :=exec('atr_get','portal_walidacja','WarunkiUmowyNaDzien');
      _akt_data      :=exec('to_ti_dt','form_ob',_data_s,'D');
      _data_s        :=exec('atr_get','portal_walidacja','DataZapoznaniaPracZOcena');
      _data_zap      :=exec('to_ti_dt','form_ob',_data_s,'D');


::    nowe warunki zatrudnienia po zmianie
      _new:=obj_new('MIEJSCE','OD','DO','WYDZIAL','ST','POZWORG','CP','WYL','WYM',
                    'S1','S2','S3','UM_TYP','UM_KOD','UM_OD','UM_DO');
      _LpDzial       :=exec('atr_get','portal_walidacja','LpDzial');
      _new.WYDZIAL   :={? +_LpDzial || _LpDzial || exec('atr_get','portal_walidacja','DzialNazwa') ?};
      _new.ST        :=exec('atr_get','portal_walidacja','StanowiskoNazwa');
      _new.POZWORG   :=exec('atr_get','portal_walidacja','PozycjaWOrg');
      _new.MIEJSCE   :=exec('atr_get','portal_walidacja','MiejsceWykPracyNazwa');
      _new.WYL       :=exec('atr_get','portal_walidacja','EtatL');
      _new.WYM       :=exec('atr_get','portal_walidacja','EtatM');
      _new.CP        :=exec('atr_get','portal_walidacja','CharakterPracy');
      _new.S1        :=exec('atr_get','portal_walidacja','Wynagrodzenie1');
      _new.S2        :=exec('atr_get','portal_walidacja','Wynagrodzenie2');
      _new.S3        :=exec('atr_get','portal_walidacja','Wynagrodzenie3');
      _umTypNazwa    :=exec('atr_get','portal_walidacja','UmowaTypNazwa');
      _typ:=exec('slo_typ','ext_slo','UMPRAC');
      _new.UM_TYP    :=exec('FindInSet','#table','RU','O',_umTypNazwa,_typ,,1,,null());
      _new.UM_KOD    :=exec('FindAndGet','#table','RU',_new.UM_TYP,,"K",'');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaOd');
      _new.UM_OD     :=exec('to_ti_dt','form_ob',_data_s,'D');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaDo');
      _new.UM_DO     :=exec('to_ti_dt','form_ob',_data_s,'D');
      _benefity      :=exec('atr_get','portal_walidacja','Benefity');
      _tekst         :=exec('atr_get','portal_walidacja','InformacjeDodatkowe','WAR_W');
      {? +_benefity
      || _tekst+='\nInne benefity:\n%1'[_benefity]
      ?};

::======================================================================================================================
:: Sprawdzenie dpoprawnosci danych jako takich
::======================================================================================================================
      {? _walid
      || {? _new.UM_TYP=null()
         || exec('tab_kom_add','form_ob',1,'Należy podać rodzaj nowej umowy o pracę.'@)
         ?};
         {? _new.UM_OD=#0
         || exec('tab_kom_add','form_ob',1,'Należy podać datę rozpoczęcia nowej umowy.'@)
         ?};
         {? _new.UM_KOD<>'C' & _new.UM_DO=#0
         || exec('tab_kom_add','form_ob',1,'Należy podać datę zakończenia nowej umowy.'@)
         ?};

         {? +_new.WYL | +_new.WYM
         || {? +_new.WYL & #_new.WYL=0
            || exec('tab_kom_add','form_ob',1,'Licznik wymiaru zatrudnienia musi być większy od 0.'@)
            ?};
            {? +_new.WYM & #_new.WYM=0
            || exec('tab_kom_add','form_ob',1,'Mianownik wymiaru zatrudnienia musi być większy od 0.'@)
            ?}
         ?}
      ?};

      P.cntx_psh(); H_UM.cntx_psh(); H.cntx_psh(); STN.cntx_psh(); CP.cntx_psh(); UD_SKL.cntx_psh(); UD_TYP.cntx_psh();
      KT.cntx_psh(); POZWORG.cntx_psh();
      UD_TYP.clear(); SLO_OSOB.clear(); STN.clear(); CP.clear(); POZWORG.clear(); H_UM.clear(); P.clear();
::======================================================================================================================
:: Wyszukanie pracownika i umowy
::======================================================================================================================
      _p_ref:=null();
      {? P.seek(_p_uidref)
      || _p_ref:=P.ref();
         _h_um:=null();
         _P180:=-PAR_SKID.get(180)='t';
         exec('otworz_h_um','pracownik',{? _P180 || 'h_u_' || 'h_um' ?});
         H_UM.index('OD');
         H_UM.prefix(_p_ref);
         H.use(exec('h_name','pracownik'));
         H.index('_HISTDAT');
         H.prefix(_p_ref);
         {? H.find_le(_akt_data)
         ||  _result.ok:=1;
             _h_um:=H.UMOWA;
             H.UMOWA();
::           zapamiętujemy bufor tabeli w obiekcie
             _H_UM:=exec('obj_new','#buf','H_UM');
             _H_UM.get();

            _pmp:=H.PMP;
            _new.DO:=H.DO;

            _akt_skl:=H.WYDZIAL;
            _akt_stn:=H.ST;
            _akt_pozworg:=H.POZWORG;
            _akt_cp:=H.CP;

            {? H.CZYWAL='T' | H.CZYWAL2='T' | H.CZYWAL3='T'
            || _result.ok:=0;
               _result.errMsg:='Obecna umowa w walucie obcej. Przedłużenie umowy niemożliwe.'@;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & H.PAT<>'N'
            || _result.ok:=0;
               _result.errMsg:='Obecna umowa z przychodem od praw autorskich. Przedłużenie umowy niemożliwe.'@;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & H.MAC='T'
            || _result.ok:=0;
               _result.errMsg:='Obecna umowa podczas trwania urlopu mac./rodz.. Przedłużenie umowy niemożliwe.'@;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & H.SP='T'
            || _result.ok:=0;
               _result.errMsg:='Obecna umowa jest umową o pracę w szczególnych warunkach lub charakterze. '
                               'Przedłużenie umowy niemożliwe.'@;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & H_UM.RU().K='C' & H_UM.DO=#0
            || _result.ok:=0;
               _result.errMsg:='Obecna umowa jest umową na czas nieokreślony. Przedłużenie umowy niemożliwe.'@;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & (_new.UM_OD<=H_UM.DO)
            || _result.ok:=0;
               _result.errMsg:='Data rozpoczęcia nowej umowy nie może być wcześniejsza niż data '
                               'zakończenia bieżącej umowy (%1).'@[$H_UM.DO];
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & (_new.UM_OD>(H_UM.DO+1))
            || _result.ok:=0;
               _result.errMsg:='Data rozpoczęcia nowej umowy musi przypadać bezpośrednio po zakończeniu '
                               'obowiązywania bieżącej umowy (%1).'@[$H_UM.DO];
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?}

         || _result.ok:=0;
            _result.errMsg:='Nie udało się ustalić umowy do przedłużenia dla pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

::======================================================================================================================
:: Umowa i przebieg
::======================================================================================================================
         {? _result.ok
         || VAR.P:=null();
            VAR.H:=null();
            {? var_pres('MAC',H)>0 || _RWY:="H.RWY" || _RWY:="H.WY" ?};
            _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
            _ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL','PODZORG',,,1,,null());
            {? +_LpDzial
            || _new_skl:=exec('FindInSet','#table','UD_SKL','SYMBOL',_new.WYDZIAL,_ud_typ,,1,_new.WYDZIAL,null())
            || _new_skl:=exec('FindInSet','#table','UD_SKL','OPIS',_new.WYDZIAL,_ud_typ,,1,,null())
            ?};
            _new_stn:=exec('FindInSet','#table','STN','STANONAZ',_new.ST,,,1,,null());
            _new_pozworg:=exec('FindInSet','#table','POZWORG','KOD',_new.POZWORG,_firma,,1,,null());
            _new_cp:=exec('FindInSet','#table','CP','CHARPRAW',_new.CP,,,1,,null());

            _ud_skl:={? _new_skl || _new_skl || _akt_skl ?};
            _stn:={? _new_stn || _new_stn || _akt_stn ?};
            _pozworg:={? _new_pozworg || _new_pozworg || _akt_pozworg ?};
            _cp:={? _new_cp || _new_cp || _akt_cp ?};

            _par313:=exec('get_par','#parametr',313,2)='T';
            STO.cntx_psh();
            STO.index('UNIQUE');
            STO.prefix();
            {? _ud_skl & _stn & ~STO.find_key(_ud_skl,_stn)
            || STO.UD_SKL:=_ud_skl;
               STO.STN:=_stn;
               STO.ST:=STO.STN().ST;
               {? STO.add(1) & _par313 & _pozworg
               || PSTO.cntx_psh();
                  PSTO.index('PSTO');
                  PSTO.blank(1);
                  PSTO.POZWORG:=_pozworg;
                  PSTO.STO:=STO.ref();
                  PSTO.add(1);
                  PSTO.cntx_pop()
               ?}
            ?};
            STO.cntx_pop();
::       wczytujemy to co jest obecnie w H do bufora
            H.memo_get(,'INNE');
            _H:=exec('obj_new','#buf','H');
            _H.get();
            {? +_tekst=0 || _tekst:=_H.INNE ?};

::          dodajemy nową umowę
            H_UM.index('OD');
            H_UM.prefix(P.ref());
            H_UM.blank(1);
            _H_UM.set();
            H_UM.OD:=_new.UM_OD;
            H_UM.DO:=_new.UM_DO;
            H_UM.RU:=_new.UM_TYP;
            H_UM.NUMER:='(%1) - do weryfikacji'[$(H_UM.size()+1)];
            H_UM.ROU:=null();
            H_UM.EKW:=0;
            H_UM.EKW_NSP:=0;
            H_UM.LT:='';
            H_UM.SW:='N';
            H_UM.WYM_UZAS:='N';
            H_UM.OKR_UZAS:=null();
            H_UM.memo_set('','UZASDN');
            H_UM.USPKOD:=H_UM.USPPPRAK:=H_UM.USPSTR:=null();
            H_UM.USPPPRAT:='';
            H_UM.EKW_LICZ:='N';
            _chk:=exec('h_um_p_com_ae','pracownik',0,1);
            {? type_of(_chk)=type_of('') & +_chk
            || _result.ok:=0;
               _result.errMsg:=_chk;
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? _result.ok & H_UM.add(1)
            || H.index('_HISTDAT');
               H.prefix(P.ref());
               H.blank(1);
::             i ustawiamy to co się zmieniło
               _H.set();
               H.UMOWA:=H_UM.ref();
               H.OD:=H_UM.OD;
               H.DO:=H_UM.DO;
               H.PODPIS:=_data_zap;
               H.RU:=H_UM.RU;
               H.RL:='';

               {? _ud_skl        || H.WYDZIAL:=_ud_skl ?};
               {? _stn           || H.ST:=_stn ?};
               {? _pozworg       || H.POZWORG:=_pozworg ?};
               {? _cp            || H.CP:=_cp ?};
               {? +_new.MIEJSCE  || H.MIEJSCE:=_new.MIEJSCE ?};
               {? #_new.WYM>0 & #_new.WYL>0
               || H.WYM:=#_new.WYM;
                  H.WYL:=#_new.WYL;
                  H.WY:={? H.WYM || H.WYL/H.WYM$3 || 0 ?};
                  H.RWY:=H.WY;
                  H.RWYL:=H.WYL;
                  H.RWYM:=H.WYM
               ?};
               exec('h_wyx_ae','pracownik');
               _s1:=#gsub(_new.S1,',','.');
               _s2:=#gsub(_new.S2,',','.');
               _s3:=#gsub(_new.S3,',','.');
               {? _s1>0 || H.S1:=_s1 ?};
               {? _s2>0 || H.S2:=_s2 ?};
               {? _s3>0 || H.S3:=_s3 ?};

               _sprh:=
                     {? H.RU().K<>'C' & H.RU().K<>'E'
                     || __CHK.record(H,1,'OD','DO','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
                     || __CHK.record(H,1,'OD','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
                     ?};
               {? ~H.S1 || H.CZYWAL:='N' ?};
               {? ~H.S2 || H.S2T:='K'; H.S2P:=null(); H.CZYWAL2:='N' ?};
               {? ~H.S3 || H.S3T:='K'; H.S3P:=null(); H.CZYWAL3:='N' ?};
               H.WAL:=H.ZWAL:=null();

               {? ~(H.WY>0 & H.WY<=1)
               || _result.ok:=0;
                  _result.errMsg:='Wymiar zatrudnienia musi być określony.';
                  {? _walid
                  || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?};

               _spr:=
                  {? H_UM.DO<>date(0,0,0) & (H.DO=date(0,0,0) | H.DO>H_UM.DO)
                  || 'Data "Do dnia" nie może być późniejsza od daty zakończenia umowy o pracę ('+$H_UM.DO+').'
                  |? H_UM.DO=date(0,0,0) & H.DO<>date(0,0,0)
                  || 'Data "Do dnia" musi być zgodna z datą zakończenia umowy o pracę ('+$H_UM.DO+').'
                  |? H.OD<H_UM.OD
                  || 'Data "Od dnia" nie może być wcześniejsza od daty rozpoczęcia umowy o pracę ('+$H_UM.OD+').'
                  || ''
                  ?};
               {? var_pres('_spr')=type_of('')  & _spr<>''
               || _result.ok:=0;
                  _result.errMsg:=_spr;
                  {? _walid
                  || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?};
               {? var_pres('_sprh')=type_of('')  & _sprh<>''
               || _result.ok:=0;
                  _result.errMsg:='Brak wymaganych informacji. Przebieg pracy zawodowej "'+MS.name('H',_sprh)+'".';
                  {? _walid
                  || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?};

               exec('h','overlap');

               {? _result.ok
               || _result.ok*=H.add(1);
                  {? _result.ok
                  || H.memo_set(_tekst,'INNE');
                     H.memo_put(,'INNE');
                     {? _result.ok
                     || EDOKUM.REFLISTA:=$H_UM.ref();
                        EDOKUM.REFPRAC:=$H.ref()
                     ?};

                     exec('norm_h_oddo','pracownik');
                     exec('pracownik_aktualizuj','pracownik');
                     exec('aktualizuj','kart_url',_p_ref)
                  ?}
               ?}
            ||
               _result.ok:=0;
               _result.errMsg:='Nie udało się dodać nowej umowy o pracę.'@;
               H_UM.cntx_psh();
               H_UM.last();
               {? H_UM.DO=#0 | H_UM.DO>_new.UM_OD
               || _result.errMsg+=' Istnieje już umowa o pracę od %1 do %2.'@[$H_UM.OD, $H_UM.DO]
               ?};
               H_UM.cntx_pop();
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?}
         ?}
      ?};
      POZWORG.cntx_pop(); KT.cntx_pop(); UD_TYP.cntx_pop(); UD_SKL.cntx_pop(); CP.cntx_pop(); STN.cntx_pop();
      H.cntx_pop(); H_UM.cntx_pop(); P.cntx_pop();

      {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
      || {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,'Inne')
         || _result.ok*=1
         || _result.ok:=0;
            _result.errMsg:=_err.copy_zal
         ?}
      ?};
      {? _walid & TKOM13.first()
      || _kom:=obj_new(TKOM13.size());
         {! _licz:=1..obj_len(_kom) |?
            _kom[_licz]:=obj_new(2);
            _kom[_licz][1]:=TKOM13[1];
            _kom[_licz][2]:=TKOM13[2];
            TKOM13.next()
         !}
      ?};

      {? _result.ok=0 | _walid || undo() ?};
      {? _mydo || end() ?};
      {? _walid & var_pres('_kom')>100
      || {! _licz:=1..obj_len(_kom) |?
            exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
         !}
      ?}
   ?};
   EDOK_ATR.cntx_pop()
?};
_ref_h_um:=EDOKUM.REFLISTA;
_ref_h:=EDOKUM.REFPRAC;
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
{? _result.ok & ~_walid & +|_ref_h_um
|| EDOKUM.REFLISTA:=_ref_h_um;
   EDOKUM.REFPRAC:=_ref_h;
   EDOKUM.put()
?};
_result


\pruo_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formula na akceptacje - Wniosek o przedłużenie umowy lub zwolnienie z oceną - cześć dotycząca zwolnienia
::   WE: _a [REFERENCE] - wskazanie na EDOKUM
::       _b [REFERENCE] - wskazanie na OSOBA
::       _c [INTEGER]   - czy walidacja [1 - tak / 0 - nie (domyślnie)]
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_rodzaj:='';

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

:: powołanie obiektów
   exec('initObj','form_ob');
   exec('load_par','#parametr');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _p_uidref:=exec('atr_get','portal_walidacja','PracownikIdERP');
      _data_s:=exec('atr_get','portal_walidacja','DataZwolnienia');
      _data_zw:=exec('to_ti_dt','form_ob',_data_s,'D');
      _data_s:=exec('atr_get','portal_walidacja','WarunkiUmowyNaDzien');
      _akt_data:=exec('to_ti_dt','form_ob',_data_s,'D');

::======================================================================================================================
:: Sprawdzenie dpoprawnosci danych jako takich
::======================================================================================================================
      {? _walid
      || {? _data_zw=date(0,0,0)
         || exec('tab_kom_add','form_ob',1,'Data zwolnienia nie może być pusta.')
         ?}
      ?};

::======================================================================================================================
:: Wyszukanie pracownika i umowy
::======================================================================================================================
      P.cntx_psh(); H_UM.cntx_psh(); H.cntx_psh();
      P.clear(); H_UM.clear(); H.clear();
      _p_ref:=null();
      {? P.seek(_p_uidref)
      || _p_ref:=P.ref();
         _h_um:=null();
         _P180:=-PAR_SKID.get(180)='t';
         exec('otworz_h_um','pracownik',{? _P180 || 'h_u_' || 'h_um' ?});
         H_UM.index('OD');
         H_UM.prefix(_p_ref);
         H.use(exec('h_name','pracownik'));
         H.index('_HISTDAT');
         H.prefix(_p_ref);
         {? H.find_le(_akt_data)
         ||  _result.ok:=1;
             _h_um:=H.UMOWA;
             H.UMOWA();

            {? ~(H.DO=#0 | _data_zw<=H.DO)
            || _result.ok:=0;
               _result.errMsg:='Data zwolnienia przypada poza okresem obowiązywania bieżącej umowy.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?}

         || _result.ok:=0;
            _result.errMsg:='Nie udało się znaleźć umowy pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?}
      ?};
      H.cntx_pop(); H_UM.cntx_pop(); P.cntx_pop();
      {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
      || {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,'Inne')
         || _result.ok*=1
         || _result.ok:=0;
            _result.errMsg:=_err.copy_zal
         ?}
      ?};
      {? _walid & TKOM13.first()
      || _kom:=obj_new(TKOM13.size());
         {! _licz:=1..obj_len(_kom) |?
            _kom[_licz]:=obj_new(2);
            _kom[_licz][1]:=TKOM13[1];
            _kom[_licz][2]:=TKOM13[2];
            TKOM13.next()
         !}
      ?};
      {? _result.ok=0 | _walid || undo() ?};
      {? _mydo || end() ?};
      {? _walid & var_pres('_kom')>100
      || {! _licz:=1..obj_len(_kom) |?
            exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
         !}
      ?}
   ?};
   EDOK_ATR.cntx_pop()
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\h_um_pruo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Wypełnia pola tabeli OSOBA na podstawie danych z wniosku o zatrudnienie.
::   WE: _a  [REFERENCE] - wskazanie na dokument w obiegu
::      [_b] [DICT]      - obiekt buforowy tabeli H_UM
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) & _a<>null() & ref_tab(_a)=EDOKUM || _a || return() ?};
  _h_um:={? var_pres('_b')=117 || _b || return() ?};

EDOKUM.cntx_psh();
EDOKUM.use(ref_name(_edokum));
EDOKUM.index('ID');EDOKUM.clear();
{? EDOKUM.seek(_edokum)
|| EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _data:=exec('atr_get','portal_walidacja','DataZwolnienia');
      _h_um.DO:=exec('to_ti_dt','form_ob',_data,'D')
   ?};
   EDOK_ATR.cntx_pop()
?};
EDOKUM.cntx_pop();
_h_um


\rdcr_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - wniosek o rejestrację danych członka rodziny - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('rdcr','portal_walidacja',_edokum,_osoba,_walid)


\rdcr_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - wniosek o rejestrację danych członka rodziny - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('rdcr','portal_walidacja',_edokum,_osoba)


\rdcr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o duplikat świadectwa pracy - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
exec('tab_kom', 'form_ob');
exec('JCQ_decl','#message');
_valManager:=exec('oValManager','portal_walidacja');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
_valManager.validator
.edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
_valManager.validator
 .osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_valManager.validator
 .valid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.clear();
{? OSOBA.seek(_valManager.validator.osoba) & EDOKUM.seek(_valManager.validator.edokum)
||
::    zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};
   _d0:=date(0,0,0);

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_valManager.validator.edokum)
   ||
      _valManager.setResult(1);
      exec('MS','#object');

      _valManager.validator.setTab(
         obj_new(
::          Dane z 1 sekcji wniosku - Dane podstawowe
::          Nazwisko, Nazwisko rodowe, Imię, Drugie imię, PESEL
            'NA','RODOWE','IM','IMD','PESEL',
::          Dane z 2 sekcji wniosku - Dane dodatkowe
::          Płeć, Data urodzenia, Miejsce urodzenia, Nazwisko ojca, Imię ojca, Imię matki, Data zgonu
            'PLEC','DA','UR_MIEJ','OJCIECN','OJCIEC','MATKA','DTZGON',
::          Dane z 3 sekcji wniosku - Dokument tożsamości
::          Dowód osobisty, Paszport
            'DOWOD','PASZPORT',
::          Dane z 4 sekcji wniosku - Ubezpieczenie zdrowotne
::          Kod stopnia pokorewieństwa,
            'STPK',
::          Kod stopnia niepełnosprawności, Niepełnosprawność od dnia, Niepełnosprawność do dnia,
            'STNP','STNP_OD','STNP_DO',
::          Wspólne gospodarstwo, Na wyłącznym utrzymaniu, Zgłoszony do ubezpieczenia
            'WSPGOSP','WYLUTRZ','ZCZA',
::          Dane z 5 sekcji wniosku - Dziecko przysposobione
::          Przysposobione, Data przysposobienia, Obowiązek szkolny odroczony, Termin odroczenia
            'DZPRZYSP','DTPRZYSP','ODROS','ODROSDO',
::          Dane z sekcji 6 wniosku - Uwagi pracownika
            'UWAGI',
::          Dane z sekcji 7 - Adres zamieszkania
::          Adres inny niż ubezpieczonego
            'ADRINNY',
::          Kraj, Kod pocztowy, Urząd pocztowy, Miejscowość, Gmina/Dzielnica, Ulica, Numer domu, Numer lokalu, Telefon
            'KRAJ','KOD','POCZTA','MIASTO','GMINA','ULICA','DOM','LOKAL','TEL',
::          Dodatkowa zmienna do sprawdzenia adresu
            'CHK_ADR'
         )
      );

::    Sekcja 1 - Dane podstawowe - pobranie wartości pól wartości pól
      _valManager.assignTextVal('NA','Nazwisko');
      _valManager.assignTextValOrDefault('RODOWE','NazwiskoRodowe');
      _valManager.assignTextVal('IM','Imie');
      _valManager.assignTextValOrDefault('IMD','DrugieImie');
      _valManager.assignTextVal('PESEL','PESEL');
::    Sekcja 2 - Dane dodatkowe - pobranie wartości pól
      _valManager.assignTextValOrDefault('PLEC','Plec');
      _valManager.assignDateVal('DA','DataUrodzenia');
      _valManager.assignTextValOrDefault('UR_MIEJ','MiejsceUrodzenia');
      _valManager.assignTextValOrDefault('OJCIECN','NazwiskoOjca');
      _valManager.assignTextValOrDefault('OJCIEC','ImieOjca');
      _valManager.assignTextValOrDefault('MATKA','ImieMatki');
      _valManager.assignDateVal('DTZGON','DataZgonu');
::    Sekcja 3 - Dokument tożsamości - pobranie wartości pól
      _valManager.assignTextVal('DOWOD','DowodOsobisty');
      _valManager.assignTextVal('PASZPORT','Paszport');
::    Sekcja 4 - Ubezpieczenie zdrowotne - pobranie wartości pól
      _valManager.assignRefVal('STPK','KodZUSPokrew','S_ZUS','S_ZUS','R');
      _valManager.assignRefVal('STNP','KodZUSStopNiep','S_ZUS','S_ZUS','N');
      _valManager.assignDateVal('STNP_OD','NiepelnosprawnoscOdDnia');
      _valManager.assignDateVal('STNP_DO','NiepelnosprawnoscDoDnia');
      _valManager.assignTextValOrDefault('WSPGOSP','WspolneGospodarstwo');
      _valManager.assignTextValOrDefault('WYLUTRZ','Utrzymanie');
      _valManager.assignTextValOrDefault('ZCZA','ZgloszonyDoUbezpieczenia');
::    Sekcja 5 - Dziecko przysposobione - pobranie wartości pól
      _valManager.assignTextVal('DZPRZYSP','Przysposobione');
      _valManager.assignDateVal('DTPRZYSP','DataPrzysposobienia');
      _valManager.assignTextVal('ODROS','ObowiazekSzkolny');
      _valManager.assignDateVal('ODROSDO','TerminOdroczenia');
::    Sekcja 6 - Uwagi pracownika - pobranie wartości pól
      _valManager.assignTextVal('UWAGI','Uwagi','WAR_W');
::    Sekcja 7 - Adres zamieszkania - pobranie wartości pól
      _valManager.assignTextVal('ADRINNY','AdresInny');
      _valManager.assignRefVal('KRAJ','KrajZamieszkania','KRAJE','KRAJE');
      _valManager.assignTextVal('KOD','KodPocztowy');
      _valManager.assignTextVal('POCZTA','UrzadPocztowyMiejscowosc');
      _valManager.assignTextVal('MIASTO','MiejscowoscZamieszkania');
      _valManager.assignTextVal('GMINA','GminaDzielnicaZamieszkania');
      _valManager.assignTextVal('ULICA','UlicaZamieszkania');
      _valManager.assignTextVal('DOM','Dom');
      _valManager.assignTextVal('LOKAL','Lokal');
      _valManager.assignTextVal('TEL','Telefon');

::    walidacja kluczowych pól
      _valManager.validator.validateWithError(
         "_a.NA=''",
         "'Nie podano nazwiska członka rodziny.'@"
      );

      _valManager.validator.validateWithError(
         "_a.IM=''",
         "'Nie podano imienia członka rodziny.'@"
      );

      _valManager.validator.validateWithError(
         "_a.DA=date(0,0,0)",
         "'Nieprawidłowo wypełniona data urodzenia członka rodziny.'@"
      );

      _valManager.validator.validateWithError(
         "_a.STPK=null",
         "'Nie wybrano stopnia pokrewieństwa.'@"
      );

::    walidacja unikalności (przyszłego - dla walidacji) zapisu
      RD.cntx_psh();
      RD.index('_RODZINA');
      RD.prefix(_valManager.validator.osoba,_valManager.getTabFieldVal('DA'),
         _valManager.getTabFieldVal('NA'),_valManager.getTabFieldVal('IM'),);
      _valManager.validator.validateWithError(
         "RD.first()",
         "_txt:='W systemie istnieją już informacje odpowiadające zgłaszanemu członkowi rodziny.'@;
          _txt+=' ';
          _txt+='Skontaktuj się z działem kadr w celu weryfikacji danych.'@
         "
      );

::    walidacja długości pól (czy wpisane wartości nie są za długie)
      _valManager.validator.fldsNormalized();
      _flds:='RD.NA,RD.RODOWE,RD.IM,RD.IMD,RD.PESEL,RD.PLEC,RD.UR_MIEJ,RD.OJCIECN,RD.OJCIEC,RD.MATKA,'+
         'RD.DOWOD,RD.PASZPORT,RD.WSPGOSP,RD.WYLUTRZ,RD.ZCZA,RD.DZPRZYSP,RD.ODROS,RD.ADRINNY,RD.KOD,'+
         'RD.POCZTA,RD.MIASTO,RD.GMINA,RD.ULICA,RD.DOM,RD.LOKAL,RD.TEL';
      _valManager.validator.fldsLengthOk(_flds);

::    walidacja wypełnienia pól
      S_ZUS.cntx_psh();
      S_ZUS.prefix();

      _valManager.validator.validateWithInfo(
         "_a.DA<>date(0,0,0) & +exec('pesel_ok','#id',_a.PESEL,_a.DA)>1",
         "'Wprowadzono niepoprawny numer PESEL dla członka rodziny.'@"
      );

      _valManager.validator.validateWithError(
         "_a.DTZGON<>date(0,0,0) & _a.DA>_a.DTZGON",
         "'\"Data zgonu\" nie może być wcześniejsza niż \"Data urodzenia\".'"
      );

      _valManager.validator.validateWithError(
         "_a.STNP<>null & _a.STNP_OD<>date(0,0,0) & _a.STNP_OD<_a.DA",
         "'\"Od dnia (niepełnosprawność)\" nie może być wcześniejsza niż \"Data urodzenia\".'"
      );

      S_ZUS.prefix();
      {? (_stpk:=_valManager.getTabFieldVal('STPK'))<>null & S_ZUS.seek(_stpk,,1)
      || _kod11:=S_ZUS.KOD='11';
         _dzprzysp:=_valManager.getTabFieldVal('DZPRZYSP');
         {? _kod11 & _dzprzysp='T'
         || _valManager.validator.validateWithError(
               "_a.DTPRZYSP=date(0,0,0)",
               "_txt:='Nieprawidłowo wypełnione dane.'@;
                _txt+='Data przysposobienia niewypełniona dla członka rodziny,'@;
                _txt+=' ';
                _txt+='dla którego zaznaczono informację o przysposobieniu.'@
               "
            );
            _valManager.validator.validateWithError(
               "_a.DTPRZYSP<_a.DA",
               "'\"Data przysposobienia\" nie może być wcześniejsza niż \"Data urodzenia\".'"
            );
            {? _valManager.getTabFieldVal('ODROS')='T'
            || _valManager.validator.validateWithError(
                  "_a.ODROSDO=date(0,0,0)",
                  "_txt:='Uzupełniono dane o obowiązku szkolnym bez wypełnienia potrzebnych informacji'@;
                   _txt+=' ';
                   _txt+=:='o przysposobieniu.'@;
                   _txt+=' ';
                   _txt+='Należy uzupełnić brakujące informacje dotyczące przysposobienia.'@
                  "
            )
            ?}
         |? _kod11 & _dzprzysp='N'
         || _valManager.validator.validateWithError(
               "_a.DTPRZYSP<>date(0,0,0)",
               "_txt:='Nieprawidłowo wypełnione dane.'@;
                _txt+='Data przysposobienia wypełniona dla członka rodziny,'@;
                _txt+=' ';
                _txt+='dla którego nie zaznaczono informacji o przysposobieniu.'@
               "
            );
            _valManager.validator.validateWithError(
              "_a.ODROS='T' | _a.ODROSDO<>date(0,0,0)",
              "_txt:='Uzupełniono dane o obowiązku szkolnym bez wypełnienia potrzebnych informacji o przysposobieniu.'@;
               _txt+=' ';
               _txt+='Należy uzupełnić brakujące informacje dotyczące przysposobienia.'@
              "
            )
         |? _dzprzysp='N'
         || _valManager.validator.validateWithError(
               "_a.DTPRZYSP<>date(0,0,0) | _a.ODROS='T' | _a.ODROSDO<>date(0,0,0)",
               "_txt:='Uzupełniono dane dotyczące przysposobienia oraz odroczenia obowiązku szkolnego'@;
                _txt+=' ';
                _txt+='dla niezaznaczonej pozycji \"Przysposobione\".'@;
                _txt+='Należy zaznaczyć pozycję lub usunąć niepotrzebne dane.'@
               "
            )
         ?};
         _valManager.validator.validateWithError(
            $('~'+$_kod11+' & '+$(_dzprzysp='T')),
            "_txt:='Uzupełniono informacje o przysposobieniu dla kodu stopnia pokrewieństwa innego niż 11.'@;
             _txt+=' ';
             _txt:='Informacje o przysposobeniu należy wypełnić tylko w przypadku wybrania kodu 11.'@
            "
         )
      ?};

      _valManager.validator.validateWithError(
         "_d0:=date(0,0,0);
          (_a.STNP_OD<>_d0 & _a.STNP_DO<>_d0 & _a.STNP_OD>_a.STNP_DO)
         ",
         "'\"Do dnia (niepełnosprawność)\" nie może być wcześniejsza niż \"Od dnia (niepełnosprawność)\".'"
      );

      _valManager.validator.validateWithInfo(
         "~exec('dowod_ok','#id',_a.DOWOD,1)",
         "'Wprowadzono niepoprawny numer dowodu osobistego dla członka rodziny.'@"
      );

      _valManager.validator.validateWithError(
         "_a.ODROS='T' & _a.ODROSDO=date(0,0,0)",
         "_txt:='Niewypełniona data terminu odroczenia obowiązku szkolnego dla członka rodziny,'@;
          _txt+=' ';
          _txt+='dla którego zaznaczono informację o odroczeniu obowiązku szkolnego.'@
         "
      );

      _valManager.validator.validateWithError(
         "_a.ODROS='N' & _a.ODROSDO<>date(0,0,0)",
         "_txt:='Nieprawidłowo wypełnione dane.'@;
          _txt+='Termin odroczenia obowiązku szkolego wypełniony dla członka rodziny,'@;
          _txt+=' ';
          _txt+='dla którego nie zaznaczono informacji o odroczeniu obowiązku szkolnego.'@
         "
      );

      _valManager.validator.validateWithError(
         "_a.ADRINNY='N' & (_a.KRAJ<>null | _a.KOD<>'' | _a.POCZTA<>'' | _a.MIASTO<>'' | _a.GMINA<>''
          | _a.ULICA<>'' | _a.DOM<>'' | _a.LOKAL<>'' | _a.TEL<>'')
         ",
         "_txt:='Nieprawidłowo wypełnione dane.'@;
          _txt+=' ';
          _txt+='Część danych adresowych wypełniona dla członka rodziny,'@;
          _txt+=' ';
          _txt+='dla którego nie zaznaczono informacji o zamieszkiwaniu pod innym adresem niż ubezpieczonego.'@
         "
      );

      _valManager.validator.validateWithError(
         "_a.ADRINNY='T' & _a.KRAJ=null",
         "_txt:='Kraju o podanym kodzie ISO 3166 nie odnaleziono'@;
          _txt+=' ';
          _txt+='lub';
          _txt+=' ';
          _txt+='nie uzupełniono wymaganej informacji o kraju zamieszkania członka rodziny.'@
         "
      );

      KRAJE.cntx_psh();
      {? (_kraj:=_valManager.getTabFieldVal('KRAJ'))<>null & KRAJE.seek(_kraj,,1) & (-KRAJE.NAZ='polska')
      || _valManager.validator.tab.CHK_ADR:='';
         {? _valManager.getTabFieldVal('KOD')=''    || _valManager.validator.tab.CHK_ADR+='Kod pocztowy, '@      ?};
         {? _valManager.getTabFieldVal('POCZTA')='' || _valManager.validator.tab.CHK_ADR+='Urząd pocztowy, '@    ?};
         {? _valManager.getTabFieldVal('MIASTO')='' || _valManager.validator.tab.CHK_ADR+='Miejscowość, '@       ?};
         {? _valManager.getTabFieldVal('GMINA')=''  || _valManager.validator.tab.CHK_ADR+='Gmina / Dzielnica, '@ ?};
         {? _valManager.getTabFieldVal('DOM')=''    || _valManager.validator.tab.CHK_ADR+='Dom'@                 ?};

         {? (_valManager.getTabFieldVal('CHK_ADR'))+2=', '
         || _valManager.validator.tab.CHK_ADR:=(_valManager.getTabFieldVal('CHK_ADR'))-2
         ?};

         _valManager.validator.validateWithError(
            "_a.CHK_ADR<>''",
            "_info:={? obj_len(spli_str(_a.CHK_ADR,','))>1 || 'wymaganych pól'@ || 'wymaganego pola'@ ?};
             'Nie uzupełniono %1 dla adresu: %2'@[_info,_a.CHK_ADR]
            "
         )
      ?};
      KRAJE.cntx_pop();
      S_ZUS.cntx_pop();

::    Przypisanie wartości i próba utworzenia zapisu
      {? ~_valManager.isValidation() & _valManager.getResult()
      || RD.prefix();
         RD.blank();
         RD.NA:=_valManager.getTabFieldVal('NA');
         RD.RODOWE:=_valManager.getTabFieldVal('RODOWE');
         RD.IM:=_valManager.getTabFieldVal('IM');
         RD.IMD:=_valManager.getTabFieldVal('IMD');
         RD.PESEL:=_valManager.getTabFieldVal('PESEL');
         RD.PLEC:=_valManager.getTabFieldVal('PLEC');
         RD.DA:=_valManager.getTabFieldVal('DA');
         RD.UR_MIEJ:=_valManager.getTabFieldVal('UR_MIEJ');
         RD.OJCIECN:=_valManager.getTabFieldVal('OJCIECN');
         RD.OJCIEC:=_valManager.getTabFieldVal('OJCIEC');
         RD.MATKA:=_valManager.getTabFieldVal('MATKA');
         RD.DTZGON:=_valManager.getTabFieldVal('DTZGON');
         RD.DOWOD:=_valManager.getTabFieldVal('DOWOD');
         RD.PASZPORT:=_valManager.getTabFieldVal('PASZPORT');
         RD.STPK:=_valManager.getTabFieldVal('STPK');
         RD.STNP:=_valManager.getTabFieldVal('STNP');
         RD.STNP_OD:=_valManager.getTabFieldVal('STNP_OD');
         RD.STNP_DO:=_valManager.getTabFieldVal('STNP_DO');
         RD.WSPGOSP:=_valManager.getTabFieldVal('WSPGOSP');
         RD.WYLUTRZ:=_valManager.getTabFieldVal('WYLUTRZ');
         RD.ZCZA:=_valManager.getTabFieldVal('ZCZA');
         RD.DZPRZYSP:=_valManager.getTabFieldVal('DZPRZYSP');
         RD.DTPRZYSP:=_valManager.getTabFieldVal('DTPRZYSP');
         RD.ODROS:=_valManager.getTabFieldVal('ODROS');
         RD.ODROSDO:=_valManager.getTabFieldVal('ODROSDO');
         RD.ADRINNY:=_valManager.getTabFieldVal('ADRINNY');
         RD.KRAJ:=_valManager.getTabFieldVal('KRAJ');
         RD.KOD:=_valManager.getTabFieldVal('KOD');
         RD.POCZTA:=_valManager.getTabFieldVal('POCZTA');
         RD.MIASTO:=_valManager.getTabFieldVal('MIASTO');
         RD.GMINA:=_valManager.getTabFieldVal('GMINA');
         RD.ULICA:=_valManager.getTabFieldVal('ULICA');
         RD.DOM:=_valManager.getTabFieldVal('DOM');
         RD.LOKAL:=_valManager.getTabFieldVal('LOKAL');
         RD.TEL:=_valManager.getTabFieldVal('TEL');
         _addRes:=0;
         {? RD.add(1)
         || _memo:=_valManager.getTabFieldVal('UWAGI');
            {? _memo<>''
            || {? RD.memo_set(_memo,'UWAGI') & RD.memo_put(,'UWAGI')
               || _addRes:=1
               ?}
            || _addRes:=1
            ?}
         ?};
         {? _addRes
         || _valManager.setResult(1)
         || _valManager.setResult(0);
            _valManager.setErrMsg('Nie udało dodać się zapisu dotyczącego członka rodziny do systemu.'@)
         ?}
      ?};
      RD.cntx_pop()
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_valManager.isValidation() & _valManager.getResult()
      & exec('edokumZal_exist','form_ob',_valManager.validator.edokum)
   || {? exec('edokumZal_copy','form_ob',_valManager.validator.edokum,_valManager.validator.osoba,
         exec('_rdcr','portal_walidacja').name)
      || _valManager.setResult(1)
      || _valManager.setResult(0);
         _valManager.setErrMsg('Błąd podczas kopiowania załączników.'@)
      ?}
   ?};
   {? _valManager.isValidation() & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};
   {? _valManager.getResult()=0 | _valManager.isValidation() || undo() ?};
   {? _mydo || end() ?};
   {? _valManager.isValidation() & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_valManager.validator.result


\nadg_p_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Polecenie pracy w godzinach nadliczbowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('nadgodziny','portal_walidacja',_edokum,_osoba,_walid,'P')


\nadg_p_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Polecenie pracy w godzinach nadliczbowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('nadgodziny','portal_walidacja',_edokum,_osoba,,'P')


\nadg_w_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - wniosek o pracę w godzinach nadliczbowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('nadgodziny','portal_walidacja',_edokum,_osoba,_walid,'W')


\nadg_w_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - wniosek o pracę w godzinach nadliczbowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('nadgodziny','portal_walidacja',_edokum,_osoba,,'W')


\nadgodziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o pracę w godzinach nadliczbowych - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::        _d - [STRING]   - symbol wniosku
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || ''              ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      exec('__HARM','object');
      exec('__KAL','object');

      _tab:=obj_new(
::       Data
         'DATA',
::       Liczba nadgodzin w przypadku braku wskazania zakresu GodzinaOd - GodzinaDo
         'NADG',
::       Godzina od
         'G_OD',
::       Godzina do
         'G_DO',
::       Wyliczona liczba nadgodzin
         'CZAS',
::       Typ wystąpienia nadgodzin T/N/G (Przed rozpoczęciem pracy/Po zakończeniu pracy/Od - do)
         'WYST_NADG',
::       Uwagi
         'OPIS',
::       Konto kosztów
         'KK',
::       Ref pracownika [STRING], dla którego planujemy nadgodziny (dla polecenia pracy w g. nadliczbowych)
         'P_REF_S',
::       Ref pracownika, dla którego planujemy nadgodziny (dla polecenia pracy w g. nadliczbowych)
         'P_REF'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);

      _tabId.DATA:='Data';
      _tabId.NADG:='LiczbaNadgodzin';
      _tabId.G_OD:='GodzinaOd';
      _tabId.G_DO:='GodzinaDo';
      _tabId.WYST_NADG:='WystapienieNadgodzin';
      _tabId.OPIS:='Uzasadnienie';
      _tabId.KK:='KontoKosztow';

::    Przypisanie wartości z Portalu HR
       _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

      _tab.DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DATA),'D');
      _tab.NADG:=exec('to_ti_dt','form_ob',_getAtr(_tabId.NADG),'T');
      _tab.G_OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.G_OD),'T');
      _tab.G_DO:=exec('to_ti_dt','form_ob',_getAtr(_tabId.G_DO),'T');
      _tab.WYST_NADG:=exec('rodz_wyst_nadg','portal_walidacja',_getAtr(_tabId.WYST_NADG));
      _tab.OPIS:=exec('atr_get','portal_walidacja','Uzasadnienie','WAR_W');
      {? _symbol='P'
      || _tab.KK:=_getAtr(_tabId.KK)
      ?};
      _tab.P_REF_S:='';
      _tab.P_REF:=null();

      P.cntx_psh(); P.prefix();
      {? _symbol='W'
      || {? +EDOKUM.OSOBAWWW=16 & type_of(ref_tab(EDOKUM.OSOBAWWW))>0 & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || _tab.P_REF_S:=EDOKUM.OSOBAWWW
         ?};
         _tab.P_REF:=P.ref()
      |? _symbol='P'
      || _uidP:=_getAtr('PracownikIdERP');
         {? P.seek(_uidP,,1)
         || _tab.P_REF:=P.ref();
            _osoba:=P.OSOBA;
            _tab.P_REF_S:=$_tab.P_REF
         ?}
      ?};
      P.cntx_pop();

      _typ:=exec('typ_dnia','form_ob',_tab.P_REF_S,_tab.DATA);
      _typ:=1+(1-_typ);

      {? _tab.P_REF=null()
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nie udało się znaleźć wskazanego pracownika'@ ?}
      ?};

      {? _typ='R' & ~(_tab.WYST_NADG='T' | _tab.WYST_NADG='N')
      || _result.ok*=0;
         {? _walid || _txt[1]:='Niepoprawnie wybrany typ wystąpienia nadgodzin dla dnia roboczego.'@ ?}
      |? _typ<>'R' & _tab.WYST_NADG<>'G'
      || _result.ok*=0;
         {? _walid || _txt[1]:='Niepoprawnie wybrany typ wystąpienia nadgodzin dla dnia wolnego od pracy.'@ ?}
      ?};

      {? _result.ok & (_tab.DATA<>#0 | _tab.NADG<>*0 | _tab.G_OD<>*0 | _tab.G_DO<>*0 | _tab.WYST_NADG<>'')
      || {? (_typ='R' & _tab.WYST_NADG<>'N' & _tab.WYST_NADG<>'T') | (_typ<>'R' & _tab.WYST_NADG<>'G')
         || _result.ok*=0;
            {? _walid || _txt[1]:='Błędne określenie wystąpienia nadgodzin'@ ?}
         ?};
         {? _result.ok & _tab.DATA=#0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie podano daty'@ ?}
         ?};
::       czy miesiąc dla badanej daty jest otwarty
         {? _result.ok
         || _text:=exec('can_be_mod','prc_nadg',_tab.DATA,'add',0);
            {? _text<>''
            || _result.ok*=0;
               {? _walid || _txt[1]:=_text ?}
            ?}
         ?};
         {? _result.ok & (_tab.WYST_NADG='T' | _tab.WYST_NADG='N') & _tab.NADG<*0
         || _result.ok:=0;
            {? _walid || _txt[1]:='Podano błędną wartość w polu "Liczba nadgodzin"'@ ?}
         ?};
         {? _result.ok & _tab.WYST_NADG='G'
         || {? _tab.G_OD<*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Podano błędną wartość w polu "Godzina od"'@ ?}
            |? _tab.G_DO<*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Podano błędną wartość w polu "Godzina do"'@ ?}
            ?}
         ?};
::       dni robocze
         {? _result.ok & (_tab.WYST_NADG='N' | _tab.WYST_NADG='T')
         || {? _tab.NADG=*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie podano liczby nadgodzin'@ ?}
            ?};
            {? _result.ok & _tab.G_OD>*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie należy wypełniać pola "Godzina od"'@ ?}
            ?};
            {? _result.ok & _tab.G_DO>*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie należy wypełniać pola "Godzina do"'@ ?}
            ?};
            _tab.CZAS:=_tab.NADG
         ?};
::       dni wolne i świąteczne
         {? _result.ok & _tab.WYST_NADG='G'
         || {? _tab.NADG>*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie należy wypełniać pola "Liczba nadgodzin"'@ ?}
            |? _tab.G_OD=*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Należy uzupełnić pole "Godzina od"'@ ?}
            |? _tab.G_DO=*0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Należy uzupełnić pole "Godzina do"'@ ?}
            |? _tab.G_OD>=_tab.G_DO
            || _result.ok*=0;
               {? _walid || _txt[1]:='"Godzina do" musi być późniejsza niż "Godzina od"'@ ?}
            || _tab.CZAS:=_tab.G_DO-_tab.G_OD
            ?}
         ?};
::       uzasadnienie
         {? _result.ok & (+form(_tab.OPIS)=0)
         || {? _walid || _txt[1]:='Nie podano uzasadnienia'@ ?}
         ?}
      || {? _result.ok & _walid
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie określono dni z nadgodzinami dla wniosku.'@ ?}
         ?}
      ?};

::    sprawdzenie czy nie ma już wcześniej dodanego wniosku na ten dzień
      {? _walid & exec('exist','prc_nadg',_tab.P_REF,_tab.DATA,'N')>0
      || _result.ok*=0;
         {? _walid || _txt[1]:='W systemie widnieje już wniosek o pracę w nadgodzinach na dzień: %1'@[$_tab.DATA] ?}
      ?};

::    zapisujemy do bazy informacje o wniosku
      {? _result.ok
      || _kk:={? _symbol='P'
              || exec('FindInSet','#table','KK','KONTAKOD',_tab.KK,exec('ref_firma','ustawienia'),,1,,null)
              ?};
         {? (_symbol='P' & _kk<>null) | (_symbol='W' & _kk=null)
         || _add:=exec('add','prc_nadg',_edokum,_tab.P_REF,_tab.DATA,{? _tab.WYST_NADG='G' || _tab.G_OD || _tab.NADG ?},
               _tab.G_DO,_tab.CZAS,_tab.WYST_NADG,_tab.OPIS,'N',_symbol,,_kk)
         || _add:=0
         ?};
         {? _add<1
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie udało się zapisać danych na dzień: %1'@[$_tab.DATA] ?}
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalCopy:=
      {? _symbol='W' | _symbol='P'
      || _nadg:={? _symbol='W'
                || exec('_nadg_w','portal_walidacja')
                |? _symbol='P'
                || exec('_nadg_p','portal_walidacja')
                ?};
         {? var_pres('_nadg')>100
         || exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_nadg.name)
         ?}
      || 0
      ?};
      {? _zalCopy
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\rodz_wyst_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła zwraca typ wystąpienia nadgodzin dla przekazanego opisu z Portal HR.
::   WE: _a [STRING] - przekazany z portalu opis
::   WY: typ wystąpienia nadgodzin T/N/G (Przed rozpoczęciem pracy/Po zakończeniu pracy/Od - Do)
::----------------------------------------------------------------------------------------------------------------------
_opis:={? var_pres('_a')=type_of('') || _a || return('?') ?};

{? _opis='Przed rozpoczęciem pracy'
|| 'T'
|? _opis='Po zakończeniu pracy'
|| 'N'
|? _opis='Od - Do'
|| 'G'
|| ''
?}


\szkolenie_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła na walidację - Wniosek o szkolenie - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('szkolenie','portal_walidacja',_edokum,_osoba,_walid)


\szkolenie_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła na akceptację - Wniosek o szkolenie - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('szkolenie','portal_walidacja',_edokum,_osoba)


\szkolenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła obsługująca wniosek o szkolenie - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=4;
      _txt:=obj_new(_komSize);

      {? exec('lic','#b_domain','PSZ')
      ||
         _tab:=obj_new(
::          Wzorzec szkolenia
            'SZK_WZO',
::          Temat szkolenia
            'TEMAT',
::          Termin realizacji - od
            'OD',
::          Termin realizacji - do
            'DO',
::          Waga szkolenia
            'WAGA',
::          Koszt szkolenia
            'KOSZT',
::          Komentarz
            'OPIS',
::          Rodzaj zgłoszenia
            'ZGL_TYP',
::          Pracownik, którego dotyczy szkolenie (uidref)
            'P_UID',
::          Pracownik, którego dotyczy szkolenie (ref) (techniczne)
            'P',
::          Osoba, której dotyczy szkolenie (techniczne)
            'OSOBA',
::          Pracownik zgłaszający (techniczne)
            'ZGL_KTO',
::          Osoba zgłaszająca (techniczne)
            'ZGL_OS',
::          Pracownik weryfikujący
            'WER_KTO',
::          Osoba weryfikująca
            'WER_OS'
         );

         _tabId:=exec('tab_id','portal_walidacja',_tab);
         _tabId.SZK_WZO:='SymbolRodzajuSzkolenia';
         _tabId.TEMAT:='RodzajSzkolenia';
         _tabId.OD:='DataRozpSzkol';
         _tabId.DO:='DataKonSzkol';
         _tabId.WAGA:='Waga';
         _tabId.KOSZT:='KosztSzkolenia';
         _tabId.OPIS:='Uzasadnienie';
         _tabId.P_UID:='PracownikIdERP';

         _getAtr:="exec('atr_get','portal_walidacja',_a)";
         _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
         _tab.SZK_WZO:=exec('FindInSet','#table','SZK_WZO','OPIS',_getAtr(_tabId.SZK_WZO),,,,,null);
         _tab.TEMAT:=exec('FindInSet','#table','SZK_TEM','TEMAT',
            _getAtr(_tabId.TEMAT),,"@.SZK_TEM.TEMAT",,,''
         );
         _tab.OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.OD),'D');
         _tab.DO:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DO),'D');
         _tab.WAGA:=#_getAtr(_tabId.WAGA);
         _tab.KOSZT:=#gsub(_getAtr(_tabId.KOSZT),',','.');
         _tab.OPIS:=_getAtr(_tabId.OPIS);
         _tab.ZGL_TYP:=exec('FindInSet','#table','SLO_KOD','KOD','S',
            exec('FindInSet','#table','SLO_TYP','SYMBOL','ZGL_TYP','ZGL_TYP',,,,null),,,,null
         );
         _tab.P_UID:=_getAtr(_tabId.P_UID);
         _tab.P:=null();
         _tab.OSOBA:=null();
         _tab.ZGL_KTO:=null();
         _tab.ZGL_OS:=EDOKUM.DOSTAWCA;
         _tab.WER_KTO:=null();
         _tab.WER_OS:=null();

         {? _result.ok
         || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
            {? ~_fldsNormalized.RES
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
               ?}
            ?}
         ?};

         {? _result.ok
         || _flds:='SZK_ZAP.OPIS';
            _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
            {? ~_fldsLengthOk.RES
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                     [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
               ?}
            ?}
         ?};

         {? _result.ok & _tab.SZK_WZO=null()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='W systemie nie odnaleziono wzorca szkoleń wynikającego z wyboru w polu \"%1\".'@
                  [_getName(_tabId.TEMAT)];
               _txt[2]:=_err.kadry
            ?}
         ?};

         {? _result.ok & _tab.TEMAT=''
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='W systemie nie odnaleziono tematu wybranego w polu \"%1\".'@ [_getName(_tabId.TEMAT)];
               _txt[2]:=_err.kadry
            ?}
         ?};

         {? _result.ok & _tab.OD=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Data w polu\"%1\" nie może być pusta.'@ [_getName(_tabId.OD)] ?}
         ?};

         {? _result.ok & _tab.OD<date()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty bieżącej.'@ [_getName(_tabId.OD)]
            ?}
         ?};

         {? _result.ok & _tab.DO<>_d0 & _tab.DO<_tab.OD
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty w polu \"%2\".'@
                  [_getName(_tabId.DO),_getName(_tabId.OD)]
            ?}
         ?};

         {? _result.ok & _tab.WAGA<0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Wartość w polu \"%1\" musi być większa od 0 lub równa 0.'@ [_getName(_tabId.WAGA)] ?}
         |? _result.ok & _tab.WAGA>exec('maxint','#math')
         || _ressult.ok*=0;
            {? _walid || _txt[1]:='Niedozwolona wartość w polu \"%1\".'@ [_getName(_tabId.WAGA)] ?}
         ?};

         {? _result.ok & _tab.KOSZT<0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Niedozwolona wartość w polu \"%1\".'@ [_getName(_tabId.KOSZT)] ?}
         ?};

         {? _result.ok & _tab.ZGL_TYP=null()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='W systemie nie odnaleziono typu zgłoszenia szkolenia dla przełożonego.'@;
               _txt[2]:=_err.config;
               _txt[3]:=_err.kadry
            ?}
         ?};

         P.cntx_psh(); P.prefix();
         OSOBA.cntx_psh(); OSOBA.prefix();

         {? _result.ok
         || {? P.seek(_tab.P_UID,,1)
            || _tab.P:=P.ref();
               _tab.OSOBA:=P.OSOBA().ref()
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='W systemie nie odnaleziono pracownika wybranego w polu \"%1\".'@
                     [_getName('PracownikImieNazwisko')];
                  _txt[2]:=_err.kadry
               ?}
            ?}
         ?};

         {? _result.ok
         || P.prefix();
            OSOBA.prefix();
            _tmpOs:=null();
            {? P.seek(EDOKUM.OSOBAWWW,,1)
            || _tab.ZGL_KTO:=P.ref();
               _tmpOs:=P.OSOBA().ref()
            ?};
            {? _tab.ZGL_KTO=null() | _tmpOs=null()
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='W systemie nie odnaleziono pracownika składającego wniosek.'@;
                  _txt[2]:=_err.config;
                  _txt[3]:=_err.kadry
               ?}
            |? _tmpOs<>_tab.ZGL_OS
            || _result.ok*=0;
               {? _walid
               ||
::             Osoba składająca wniosek różni się od osoby powiązanej z pracownikiem, którego ref jest przechowywany
::             w polu EDOKUM.OSOBAWWW - błąd konfiguracji wniosków
                  _txt[1]:='Wystąpiła niezgodność pomiędzy informacją o wnioskującym'@;
                  _txt[2]:='a zapisem znalezionym w systemie.'@;
                  _txt[3]:=_err.config;
                  _txt[4]:=_err.kadry
               ?}
            ?}
         ?};

         OSOBA.cntx_pop();
         P.cntx_pop();

         {? _result.ok
         ||
            SZK_ZAP.cntx_psh(); SZK_WZO.cntx_psh(); P.cntx_psh(); STN.cntx_psh();
            SZK_ZAP.prefix(); SZK_WZO.prefix(); P.prefix(); STN.prefix();

            SZK_ZAP.blank();
            SZK_ZAP.SZK_WZO:=_tab.SZK_WZO;
            SZK_ZAP.TEMAT:=_tab.TEMAT;
            SZK_ZAP.OPIS:=_tab.OPIS;
            SZK_ZAP.WAGA:=_tab.WAGA;
            SZK_ZAP.KOSZT:={? _tab.KOSZT<>0
                           || _tab.KOSZT
::                         Wstępna wartość szkolenia
                           || SZK_ZAP.SZK_WZO().KWOTA
                           ?};
            SZK_ZAP.ZGL_TYP:=_tab.ZGL_TYP;
            SZK_ZAP.DATA:=date();
            SZK_ZAP.OD:=_tab.OD;
            SZK_ZAP.DO:=_tab.DO;
            SZK_ZAP.ROK:=_tab.OD~1;
            SZK_ZAP.MC:=_tab.OD~2;
            SZK_ZAP.KWARTAL:=exec('kwartal','#datetime',SZK_ZAP.MC);
            SZK_ZAP.WER_WYM:='T';
            SZK_ZAP.P:=_tab.P;
            SZK_ZAP.OSOBA:=_tab.OSOBA;
            SZK_ZAP.ZGL_KTO:=_tab.ZGL_KTO;
            SZK_ZAP.ZGL_OS:=_tab.ZGL_OS;
            SZK_ZAP.WAKAT:='N';
            SZK_ZAP.UD_SKL:=SZK_ZAP.P().WYDZIAL;
            SZK_ZAP.STN:=SZK_ZAP.P().ST;
            SZK_ZAP.KADRA:=SZK_ZAP.P().ST().K;
            SZK_ZAP.KK:=exec('kk_hist','pracownik',SZK_ZAP.P,date());

            {? ~SZK_ZAP.add(1)
            || _result.ok*=0;
               _result.errMsg:=
                  'Nie powiodło się dodanie do systemu zapisu o zapotrzebowanie na szkolenie dla pracownika.'@;
               {? _walid
               || _txt[1]:='Potencjalny zapis o zapotrzebowanie na szkolenie'@;
                  _txt[2]:='nie będzie mógł zostać prawidłowo dodany.'@;
                  _txt[3]:=_err.config;
                  _txt[4]:=_err.kadry
               ?}
            ?};

            {? _result.ok
            ||
::          Wniosek został zaakceptowany przez pracownika kadr na portalu - w konsekwencji zapotrzebowanie uzyska
::          status zaakceptowanego, a potwierdzający z portalu przypisany jako weryfikujący zapotrzebowanie.
               {? ~_walid
               || EDOKOS.cntx_psh(); USERS.cntx_psh(); P.cntx_psh(); OSOBA.cntx_psh();
                  EDOKOS.index('SZUK8');
::                OPERACJA(Y-akceptacja), STATUS(T-zaakceptowany), WID(S-ścieżki akceptacji Portal HR)
                  EDOKOS.prefix(EDOKUM.ref(),'Y','T','S');
                  {? EDOKOS.last()
                  || _tab.WER_KTO:=EDOKOS.USERS().P;
                     _tab.WER_OS:=USERS.OSOBA;
::                   Jeżeli z użytkownikiem nie jest powiązany rekord P szukamy pracownika na podstawie powiązanego
::                   z rekordem tabeli USERS rekordu tabeli OSOBA
                     {? _tab.WER_KTO=null() & USERS.OSOBA
                     || P.index('OSOBA');
                        P.prefix();
                        _za:=spli_str('T,N',',');
                        _f_zatr:=spli_str('P,Z,K',',');
                        _jestP:=0;

::                      w pierwszej kolejności wyszukujemy współpracowników zatrudnionych a następnie niezatrudnionych
                        {! _ind_A:=1..obj_len(_za)
                        |? ~_jestP
                        |! {! _ind_B:=1..obj_len(_f_zatr)
                           |? ~_jestP
                           |! _jestP:=P.find_tab(,'OSOBA',,'=',USERS.OSOBA,
                                                  'ZA',,'=',_za[_ind_A],
                                                  'F_ZATR','KOD','=',_f_zatr[_ind_B])
                           !}
                        !};

                        {? _jestP || _tab.WER_KTO:=P.ref() ?}
                     ?}
                  ?};
                  OSOBA.cntx_pop(); P.cntx_pop(); USERS.cntx_pop(); EDOKOS.cntx_pop()
               ?};

               _wer_wyn:=exec('FindInSet','#table','SLO_KOD','KOD','Z',
                  exec('FindInSet','#table','SLO_TYP','SYMBOL','WER_WYN','WER_WYN',,,,null),,,,null
               );

               {? _wer_wyn=null()
               || _result.ok*=0;
                  _result.errMsg:='W systemie nie odnaleziono szukanego wyniku weryfikacji.'@;
                  {? _walid
                  || _txt[1]:='Potencjalny zapis o zapotrzebowanie na szkolenie'@;
                     _txt[2]:='nie zostanie prawidłowo zweryfikowany.'@;
                     _txt[3]:=_err.config;
                     _txt[4]:=_err.kadry
                  ?}
               ?};
::          Jeżeli sprawdzenie na etapie walidacji - poniżej zostanie utworzony sztuczny zapis tylko na potrzeby
::          sprawdzenia
::          Założenie sztucznego zapisu zostanie anulowane poprzez standardowe wycofanie transakcji(zawsze po walidacji)
               {? _result.ok
               || SZK_ZAP.WER_DAT:=date();
                  SZK_ZAP.WER_KTO:={? ~_walid || _tab.WER_KTO || _tab.ZGL_KTO ?};
                  SZK_ZAP.WER_OS:={? ~_walid || _tab.WER_OS || _tab.ZGL_OS ?};
                  SZK_ZAP.WER_WYN:=_wer_wyn;

                  {? ~SZK_ZAP.put(1)
                  || _result.ok*=0;
                     _result.errMsg:='%1 %2'@[
                           'Nie powiodło się zaktualizowanie zapisu o zapotrzebowanie na szkolenie'@,
                           'o rezultat weryfikacji.'@
                        ];
                     {? _walid
                     || _txt[1]:='Potencjalny zapis o zapotrzebowanie na szkolenie'@;
                        _txt[2]:='nie będzie mógł zostać prawidłowo zaktualizowany.'@;
                        _txt[3]:=_err.config;
                        _txt[4]:=_err.kadry
                     ?}
                  ?}
               ?}
            ?};

            STN.cntx_pop(); P.cntx_pop(); SZK_WZO.cntx_pop(); SZK_ZAP.cntx_pop()
         ?}
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak licencji na dziedzinę \"%1\" w systemie - nie można złożyć wniosku.'@
               [exec('name','#b_domain','PSZ')]
         ?}
      ?};
      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_szkolenie','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\czw_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o czas wolny - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('czw','portal_walidacja',_edokum,_osoba,_walid)


\czw_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o czas wolny - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('czw','portal_walidacja',_edokum,_osoba)


\czw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o czas wolny - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Data realizacji wyjścia prywatnego
         'DATA',
::       Godzina od
         'G_OD',
::       Godzina od [reprezentacja tekstowa]
         'G_OD_S',
::       Godzina do
         'G_DO',
::       Godzina do [reprezentacja tekstowa]
         'G_DO_S',
::       Złączenie do rekordu tabeli P (techniczne)
         'P_REF',
::       Złączenie do rekordu tabeli P (techniczne) [reprezentacja tekstowa]
         'P_REF_S',
::       Tabela tymczasowa przechowująca daty odpracowania wyjścia oraz liczbę godzin do odpracowania
         'ODP'
      );

      _tabId:=obj_ntab_add(exec('tab_id','portal_walidacja',_tab),'ODP_DATA','ODP_L_GODZ');
      _tabId.DATA:='Data';
      _tabId.G_OD:='GodzinaOd';
      _tabId.G_DO:='GodzinaDo';
      _tabId.ODP_DATA:='DataOdpracowania';
      _tabId.ODP_L_GODZ:='LiczbaGodzinDoOdpracowania';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DATA),'D');
      _tab.G_OD_S:=_getAtr(_tabId.G_OD);
      _tab.G_OD:=exec('to_ti_dt','form_ob',_tab.G_OD_S,'T');
      _tab.G_DO_S:=_getAtr(_tabId.G_DO);
      _tab.G_DO:=exec('to_ti_dt','form_ob',_tab.G_DO_S,'T');
      _tab.P_REF_S:='';
      _tab.P_REF:=null;
      _tab.ODP:=tab_tmp(1,
         'LP','INTEGER','Lp.',
         'DATA','STRING[10]','Data',
         'L_GODZ','STRING[8]','Liczba godzin'
      );

      {! _index:=1..5
      |!
         _tab.ODP.blank(1);
         _tab.ODP.LP:=_index;
         _tab.ODP.DATA:=$exec('to_ti_dt','form_ob',_getAtr('%1%2'[_tabId.ODP_DATA,$_index]),'D');
         _tab.ODP.L_GODZ:=exec('to_ti_dt','form_ob',_getAtr('%1%2'[_tabId.ODP_L_GODZ,$_index]),'T')$3;

         _tab.ODP.add(1)
      !};

      {? exec('lic','#b_domain','PRC')
      || P.cntx_psh();
         P.prefix();
         {? _result.ok
            & +EDOKUM.OSOBAWWW=16
            & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
            & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || _tab.P_REF_S:=EDOKUM.OSOBAWWW;
            _tab.P_REF:=P.ref()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika składającego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         P.cntx_pop();

         {? _result.ok & _tab.DATA=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.DATA)] ?}
         ?};

         {? _result.ok & _tab.DATA<>_d0 & _tab.DATA<date()
         || _result.ok*=0;
            {? _walid || _txt[1]:='Data realizacji wyjścia prywatnego nie może być wcześniejsza od obecnej daty.'@ ?}
         ?};

         {? _result.ok & _tab.G_OD=_tab.G_DO
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='\"%1\" nie może nastąpić o tej samej porze co \"%2\".'@
                  [_getName(_tabId.G_OD),_getName(_tabId.G_DO)]
            ?}
         ?};

         {? _result.ok & _tab.G_OD>_tab.G_DO
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='\"%1\" nie może nastąpić później niż \"%2\".'@
                  [_getName(_tabId.G_OD),_getName(_tabId.G_DO)]
            ?}
         ?};

         _tab.ODP.first();
         {? _result.ok & _tab.ODP.DATA=$_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1%2\".'@[_getName(_tabId.ODP_DATA),$1] ?}
         ?};

         {? _result.ok & _tab.ODP.L_GODZ=time(0,0,0)$3
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie uzupełniono obowiązkowego pola \"%1%2\".'@[_getName(_tabId.ODP_L_GODZ),$1] ?}
         ?};

         {? _result.ok
         || _timeAvailable:=exec('work_time_available','portal_walidacja',_tab.P_REF,_tab.DATA);
            _timeDifference:=*(|(*_tab.G_DO-*_tab.G_OD));
            _timeDifference:={? _tab.G_OD>_tab.G_DO || time(24,0,0)-_timeDifference || _timeDifference ?};
            {? _timeAvailable-_timeDifference<*0
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Przekroczono wymiar godzin w dniu odbioru.'@;
                  _txt[2]:='Należy wskazać dzień z odpowiednią liczbą zaplanowanych godzin'@;
                  _txt[3]:='lub zmienić liczbę odbieranych godzin w wybranym dniu.'@
               ?}
            ?}
         ?};

         {? _result.ok
         ||
            _par:='';
            _tab.ODP.first();
            {!
            |? {? _tab.ODP.DATA<>'0000/00/00'
               || _par:='%1%2;%3;00:00@'[_par,_tab.ODP.DATA,_tab.ODP.L_GODZ]
               ?};

               _tab.ODP.next()
            !};

            _bundle:=exec('bundle','prc_dane');

            _bundle
               .append('P_REF',_tab.P_REF_S,
                  "_refTab:=ref_tab(_a);
                   type_of(_refTab)<>type_of(~~) & _refTab=P & P.seek(_a,,1)
                  "
               )
               .append('DATA',$_tab.DATA,
                  "exec('str2date','#convert',_a)<>date(0,0,0)"
               )
               .append('TRYB','add',
                  "_a='add'"
               )
               .append('R_ODN_REF','',)
               .append('GODZ_OD',_tab.G_OD_S)
               .append('GODZ_DO',_tab.G_DO_S)
               .append('EDOKUM',$_edokum,
                  "_refTab:=ref_tab(_a);
                   type_of(_refTab)<>type_of(~~) & _refTab=EDOKUM
                  "
               )
               .append('PAR1',_par)
               .append('PAR2','')
               .append('PAR3','')
               .append('PAR4','');

            _package:='';
            _bundleCheckResult:=_bundle.check();
            {? _bundleCheckResult=''
            || _withCheck:=0;
               _package:=_bundle.create(_withCheck)
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:=_bundleCheckResult
               ?}
            ?}
         ?};

         {? _result.ok
         || _RS:=exec('r_odn_add','prc_dane',_package,0);
            {? _RS.first()
            || {? _RS.WYNIK<>'' & ~(_RS.WYNIK*'OK')
               || _result.ok*=0;
                  {? _walid || _txt[1]:=_RS.WYNIK ?}
               ?}
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Nie powiódł się próbny zapis wniosku do bazdy danych.'@
               ?}
            ?}
         ?}
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak obsługi Czasu Pracy w systemie - nie można złożyć wniosku.'@
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_czw','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\dofs_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o dofinansowanie studiów - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('dofinansowanie_studiow','portal_walidacja',_edokum,_osoba,_walid)


\dofs_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o dofinansowanie studiów - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('dofinansowanie_studiow','portal_walidacja',_edokum,_osoba)


\dofinansowanie_studiow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o dofinansowanie studiów - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_dofs','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\odb_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o odbiór nadgodzin - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;
_type:='W';

exec('odbior_nadgodzin','portal_walidacja',_edokum,_osoba,_walid,_type)


\odb_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o odbiór nadgodzin - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_type:='W';

exec('odbior_nadgodzin','portal_walidacja',_edokum,_osoba,,_type)


\odbp_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Polecenie odbioru nadgodzin - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;
_type:='P';

exec('odbior_nadgodzin','portal_walidacja',_edokum,_osoba,_walid,_type)


\odbp_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o odbiór nadgodzin - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_type:='P';

exec('odbior_nadgodzin','portal_walidacja',_edokum,_osoba,,_type)


\odbior_nadgodzin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o odbiór nadgodzin - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
  _type:={? var_pres('_d')=type_of('') & +_d=1 || _d || return(_result) ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=20;
      _txt:=obj_new(_komSize);
      _application_types:=exec('types_application','portal_walidacja');
      _overtime_types:=exec('types_overtime','portal_walidacja');
      exec('open_prc','open_tab');

      _tab:=obj_new(
::       Typ odbioru
         'TYP_ODB',
::       Data odbioru
         'DATA',
::       Odbiór nadgodzin
         'ODBN',
::       Okres rozliczeniowy
         'A_OKR',
::       Rok nadgodzin
         'ROK',
::       Miesiąc nadgodzin
         'MSC',
::       Wybór nadgodzin
         'WYB_NADG',
::       Godziny wnioskowane
         'GODZ_WN',
::       Godziny wnioskowane [reprezentacja tekstowa]
         'GODZ_WN_S',
::       Złączenie do rekordu tabeli P (techniczne)
         'P_REF',
::       Złączenie do rekordu tabeli P (techniczne) [reprezentacja tekstowa]
         'P_REF_S',
::       Tabela tymczasowa przechowująca liczbę godzin oraz daty, w których powstały nadgodziny
         'NADG',
::       Początek okresu pracownika [techniczne]
         'A_OKRP_OD',
::       Koniec okresu pracownika [techniczne]
         'A_OKRP_DO'
      );

      _tabId:=obj_ntab_add(exec('tab_id','portal_walidacja',_tab),'NADG_D','NADG_G');
      _tabId.TYP_ODB:='TypOdbioru';
      _tabId.DATA:='DataOdbioru';
      _tabId.ODBN:='OdbiorNadgodzin';
      _tabId.A_OKR:='OkresRozliczeniowy';
      _tabId.MSC:='MiesiacNadgodzin';
      _tabId.WYB_NADG:='WyborNadgodzin';
      _tabId.GODZ_WN:='GodzinyWnioskowane';
      _tabId.NADG_D:='DataNadgodzin';
      _tabId.NADG_G:='LiczbaNadgodzin';
      _tabId.P_REF_S:='PracownikIdERP';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _putAtr:="exec('atr_put','portal_walidacja',_a,_b,,1)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.TYP_ODB:=_getAtr(_tabId.TYP_ODB);
      _tab.DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DATA),'D');
      _tab.ODBN:=_getAtr(_tabId.ODBN);
      _tab.A_OKR:=_getAtr(_tabId.A_OKR);
      _tab.MSC:=#_getAtr(_tabId.MSC);
      _tab.WYB_NADG:=_getAtr(_tabId.WYB_NADG);
      _tab.GODZ_WN_S:=_getAtr(_tabId.GODZ_WN);
      _tab.GODZ_WN:=exec('to_ti_dt','form_ob',_tab.GODZ_WN_S,'T');
      _tab.P_REF_S:='';
      _tab.P_REF:=null;
      _tab.NADG:=tab_tmp(1,
         'LP','INTEGER','Lp.',
         'DATA','STRING[10]','Data nadgodzin',
         'L_GODZ','STRING[8]','Liczba nadgodzin'
      );
      _autoSelection:=_tab.WYB_NADG*'Automatyczny';

      {! _index:=1..5
      |!
         _tab.NADG.blank(1);
         _tab.NADG.LP:=_index;
         _tab.NADG.DATA:=$exec('to_ti_dt','form_ob',_getAtr('%1%2'[_tabId.NADG_D,$_index]),'D');
         _tab.NADG.L_GODZ:=exec('to_ti_dt','form_ob',_getAtr('%1%2'[_tabId.NADG_G,$_index]),'T')$3;

         _tab.NADG.add(1)
      !};

      {? exec('lic','#b_domain','PRC')
      || P.cntx_psh();
         P.prefix();
         {? _result.ok
            & +EDOKUM.OSOBAWWW=16
            & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
            & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || {? _type=_application_types.employee
            || _tab.P_REF_S:=EDOKUM.OSOBAWWW;
               _tab.P_REF:=P.ref()
            |? _type=_application_types.employer
            || _tab.P_REF_S:=_getAtr(_tabId.P_REF_S);
               {? P.seek(_tab.P_REF_S,,1)
               || _tab.P_REF:=P.ref();
                  _tab.P_REF_S:=$P.ref();
                  _osoba:=P.OSOBA
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:=_err.config;
                     _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika wybranego z listy'@;
                     _txt[3]:=_err.kadry
                  ?}
               ?}
            ?}
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika składającego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         P.cntx_pop();

         {? _result.ok
         || _convert:=
               "_value:={? var_pres('_a')=type_of('') & _a<>'' || _a || return('?') ?};
                _porsloCode:={? var_pres('_b')=type_of('') & _b<>'' || _b || return('?') ?};
                PORSLO.cntx_psh();
                PORSLO.index('FIELD');
                PORSLO.prefix(null,exec('customField','portal_slowniki'),'',_porsloCode,);
                _porslo:={? PORSLO.first() || PORSLO.ref() || null ?};
                _firma:=exec('firma4porsloit','portal_slowniki',_porslo);
                PORSLO.cntx_pop();
                PORSLOIT.cntx_psh();
                PORSLOIT.index('SLOVAL');
                PORSLOIT.prefix(_porslo,_firma,_value,);
                _result:={? PORSLOIT.first() || PORSLOIT.DESC || '?' ?};
                PORSLOIT.cntx_pop();
                _result
               ";

            _dictionaries:=obj_new('TypOdbioru','OdbiorNadgodzin');
            _dictionaries.TypOdbioru:={? _type=_application_types.employee
                                      || 'TypOdbioru'
                                      |? _type=_application_types.employer
                                      || 'TypOdbioruPolecenie'
                                      || ''
                                      ?};
            _dictionaries.OdbiorNadgodzin:='OdbiorNadgodzin';

            {? _result.ok & _tab.TYP_ODB=''
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.TYP_ODB)] ?}
            ?};

            {? _result.ok
               &
               _dictionaries.TypOdbioru<>''
               &
               ~exec('exist_in_custom','portal_slowniki',_dictionaries.TypOdbioru,_tab.TYP_ODB)
            ||
               _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.TYP_ODB)]
               ?}
            ?};

            {? _result.ok
            || _tab.TYP_ODB:=_convert(_tab.TYP_ODB,_dictionaries.TypOdbioru)
            ?};

            {? _result.ok & _tab.DATA=_d0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.DATA)] ?}
            ?};

            {? _result.ok & _tab.ODBN=''
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.ODBN)] ?}
            ?};

            {? _result.ok & ~exec('exist_in_custom','portal_slowniki',_dictionaries.OdbiorNadgodzin,_tab.ODBN)
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.TYP_ODB)]
               ?}
            ?};

            {? _result.ok
            || _tab.ODBN:=_convert(_tab.ODBN,_dictionaries.OdbiorNadgodzin)
            ?};

            A_OKR.cntx_psh();
            A_OKRN.cntx_psh();
            A_OKRP.cntx_psh();
            {? _result.ok
            ||
::             Po podzieleniu łańcucha spodziewamy się konkretnej ilości zmiennych
               _pattern:='date1 - date2 periodName';
               _matchingSize:=obj_len(spli_str(_pattern,' '));
               _okres:=spli_str(_tab.A_OKR,' ');
               {? obj_len(_okres)=_matchingSize
               || _status:='O';
                  _od:=exec('to_ti_dt','form_ob',_okres[1],'D');
                  _do:=exec('to_ti_dt','form_ob',_okres[3],'D');
                  _nazwa:=_okres[4];

                  A_OKRN.index('A_OKRN');
                  A_OKRN.prefix(_nazwa);
                  _a_okrn:={? A_OKRN.first() || A_OKRN.NAZ || '?' ?};

                  A_OKR.index('A_OKRZ');
                  A_OKR.prefix(_status,_od,_do);
                  {? A_OKR.find_tab('first','NAZ','NAZ','=',_a_okrn)
                  || _tab.A_OKR:=A_OKR.ref()
                  || _result.ok*=0
                  ?}
               || _result.ok*=0
               ?};

               {? ~_result.ok & _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.A_OKR)]
               ?}
            ?};

            {? _result.ok & ~((_tab.MSC>=1 & _tab.MSC<=12))
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.MSC)]
               ?}
            ?};

            {? _result.ok & exec('isRef_A_OKR','prc_dane',$_tab.A_OKR) & A_OKR.seek(_tab.A_OKR)
            || A_OKRP.index('A_OKPP');
               A_OKRP.prefix(A_OKR.ref(),_tab.P_REF);
               {? A_OKRP.first()
               || _tab.A_OKRP_OD:=A_OKR.OD;
                  _tab.A_OKRP_DO:=A_OKR.DO;
::                Ponieważ na wniosku znajduje się tylko miesiąc, to rok musimy odgadnąć. Zakładamy, że okres
::                rozliczeniowy albo w całości zawiera się w jednym roku kalendarzowym, albo obejmuje tylko jedną
::                zmianę roku.
                  _tab.ROK:={? A_OKR.OD~1=A_OKR.DO~1 | A_OKR.OD~2<=_tab.MSC || _tab.A_OKRP_OD~1 || _tab.A_OKRP_DO~1 ?};
                  {? ~(A_OKRP.OD<=date(_tab.ROK,_tab.MSC,0) & date(_tab.ROK,_tab.MSC,1)<=A_OKRP.DO)
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Wartość wybrana w polu \"%1\" musi zawierać się w zakresie dat'@
                           [_getName(_tabId.MSC)];
                        _txt[2]:='wskazanego okresu rozliczeniowego (pole: \"%1\").'@
                           [_getName(_tabId.A_OKR)]
                     ?}
                  ?}
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Pracownik nie jest przypisany do wybranego okresu rozliczeniowego.'@
                  ?}
               ?}
            ?};
            A_OKRP.cntx_pop();
            A_OKRN.cntx_pop();
            A_OKR.cntx_pop();

            P.cntx_psh();
            P.prefix();
            {? _result.ok & P.seek(_tab.P_REF,,1)
            || {? P.DZ<>#0 & _tab.DATA>P.DZ
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Nie można wprowadzić odbioru po dacie zwolnienia pracownika.'@;
                     _txt[2]:=_err.kadry
                  ?}
               ?};

               {? _result.ok
               || _okr:=obj_new('difference','od','do');
                  _okr.difference:=0;
                  _okr.od:=_tab.DATA;
                  _okr.do:=_tab.DATA;
                  {? _tab.TYP_ODB<>'S' & _tab.TYP_ODB<>'W'
                  || _okr.od:={? (_tmp:=date(_tab.ROK,_tab.MSC,1))<_tab.A_OKRP_OD || _tab.A_OKRP_OD || _tmp ?};
                     _okr.do:={? (_tmp:=date(_tab.ROK,_tab.MSC,0))>_tab.A_OKRP_DO || _tab.A_OKRP_DO || _tmp ?}
                  || _okr.difference:=exec('roznica','prc_rozlicz',_tab.A_OKRP_OD,_tab.A_OKRP_DO);
                     _okr.od:=_tab.A_OKRP_OD;
                     _okr.do:=_tab.A_OKRP_DO
                  ?};
                  R_WO.blank(1);
                  R_WO.DO:=_tab.DATA;
                  R_WO.W:=_tab.TYP_ODB;
                  R_WO.AUTO:={? _autoSelection || 'T' || 'N' ?};
                  _ODB:=exec('tabela_odbioru','prc_rozlicz',_okr.od,_okr.do,_okr.difference);
                  {? ~_ODB.size()
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Brak godzin nadliczbowych do odbioru dla określonych parametrów wniosku.'@;
                        _txt[2]:=_err.kadry
                     ?}
                  ?}
               ?};

               {? _result.ok
               || _N_OKR:=exec('nieobecnosc','prc_rozlicz',P.ref(),_tab.DATA,_tab.DATA);
                  {? _N_OKR.first()
                  || {!
                     |? {? _N_OKR.PD='N' || _result.ok*=0 ?};
                        _N_OKR.next()
                     !}
                  ?};

                  {? ~_result.ok & _walid
                  || _txt[1]:='Nie można wprowadzić odbioru w czasie nieobecności: %1'@[_N_OKR.RT]
                  ?}
               ?};

               {? _result.ok
               || {? __KAL.set_cal(P.KAL,_tab.DATA~1)
                  || {? 1+__KAL.type_day(_tab.DATA)<>'R'
                     || _result.ok*=0;
                        {? _walid
                        || _txt[1]:='Nie można wprowadzić odbioru w dniu wolnym od pracy.'@
                        ?}
                     ?}
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Nie znaleziono kalendarza pracownika na %1 rok.'@[$(_tab.DATA~1)];
                        _txt[2]:=_err.kadry
                     ?}
                  ?}
               ?};

               _typeMatch:="
                  _result:=0;
                  _type:={? var_pres('_a')=type_of('') || _a || return(_result) ?};
                  _overtime_types:={? var_pres('_b')=type_of(obj_new(1)) || _b || return(_result) ?};
                  {! _index:=1..obj_len(_overtime_types)
                  |! {? _type=_overtime_types[_index]
                     || _result:=1
                     ?}
                  !};
                  _result
               ";

               {? _result.ok & _typeMatch(_tab.TYP_ODB,_overtime_types)
               || {? _tab.GODZ_WN>time(24,0,0)
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Liczba odebranych godzin nie może przekraczać 24 godziny.'@
                     ?}
                  ?};

                  {? _result.ok & ('%1,%2'[_overtime_types.dayOff,_overtime_types.holiday]*_tab.TYP_ODB)
                  || {? _tab.DATA>_tab.A_OKRP_DO | _tab.DATA<_tab.A_OKRP_OD
                     || _result.ok*=0;
                        {? _walid
                        || _txt[1]:='Data odbioru spoza okresu rozliczeniowego.'@;
                           _txt[2]:='Dla wybranego typu odbioru należy wprowadzić datę odbioru w zakresie dat'@;
                           _txt[3]:='okresu rozliczeniowego.'@
                        ?}
                     ?}
                  ?};

                  {? _result.ok
                  || _type:={? _tab.TYP_ODB='S' | _tab.TYP_ODB='W' || 'P' || 'G' ?};
                     _timeAvailable:=exec('work_time_available','portal_walidacja',P.ref,_tab.DATA,_tab.A_OKR,_type);
                     {? _timeAvailable-_tab.GODZ_WN<*0
                     || _result.ok*=0;
                        {? _walid
                        || _txt[1]:='Przekroczono liczbę godzin w dniu odbioru.'@;
                           _txt[2]:='Maksymalna liczba godzin do odbioru w wybranym dniu to: %1h.'@[_timeAvailable$3];
                           _txt[3]:='Należy wskazać dzień z odpowiednią liczbą zaplanowanych godzin'@;
                           _txt[4]:='lub zmienić liczbę odbieranych godzin w wybranym dniu.'@
                        ?}
                     || {? ('%1,%2'[_overtime_types.dayOff,_overtime_types.holiday]*_tab.TYP_ODB)
                        || _tab.GODZ_WN_S:=_timeAvailable$1
                        ?}
                     ?}
                  ?}
               ?}
            ?};
            P.cntx_pop();

            _par:='';
            _overtime:=obj_new(
::             Łańcuch znaków z już przeprocesowanymi wyborami z wniosku
               'processed',
::             Łańcuch znaków z aktualnie przetwarzanym wyborem z wniosku
               'current',
::             'Ilość godzin pobranych wynikająca z wyborów na wniosku'
               'withdrawn',
::             'Czy któryś z wyborów został powtórzony więcej niż raz na wniosku'
               'repeated',
::             'Kod nadgodzin dla wyborów z Portalu HR'
               'code'
            );
            _overtime.processed:='';
            _overtime.current:='';
            _overtime.withdrawn:=*0;
            _overtime.repeated:=0;
            _overtime.code:=exec('overtime_code','portal_lib');
            {? _loop:=_tab.NADG.first()
            || {!
               |? _loop
               |! {? _tab.NADG.DATA<>'0000/00/00'
                  || _overtime.current:='[%1|%2]'[_tab.NADG.DATA,_overtime.code];
                     _overtime.repeated:=(_overtime.processed*_overtime.current)>0;
                     {? ~_overtime.repeated
                     || _par:='%1%2;%3;%4;%5@'[_par,_tab.NADG.DATA,_tab.NADG.L_GODZ,_tab.NADG.L_GODZ,_overtime.code];
                        _overtime.processed:='%1%2'[_overtime.processed,_overtime.current];
                        _overtime.withdrawn+=exec('to_ti_dt','form_ob',_tab.NADG.L_GODZ,'T')
                     ?}
                  ?};

                  _loop:=_tab.NADG.next() & ~_overtime.repeated
               !}
            ?};

            {? _result.ok & ~_autoSelection & _overtime.repeated
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='We wniosku wskazano wielokrotnie te same nadgodziny do odebrania.'@
               ?}
            ?};

            {? _result.ok & _autoSelection & _overtime.withdrawn>*0
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Dla wniosku z automatycznym wyborem ręcznie wskazano nadgodziny do odbioru.'@
               ?}
            ?};

            {? _result.ok & (_overtime.processed<>'' | _autoSelection)
            ||
               _bundle:=exec('bundle','prc_dane');

               _bundle
                  .append('P_REF',_tab.P_REF_S,
                     "_refTab:=ref_tab(_a);
                      P.cntx_psh();
                      P.prefix();
                      _result:=(type_of(_refTab)<>type_of(~~) & _refTab=P & P.seek(_a,,1));
                      P.cntx_pop();
                      _result
                     "
                  )
                  .append('OR_REF',$_tab.A_OKR,
                     "_refTab:=ref_tab(_a);
                      type_of(_refTab)<>type_of(~~) & _refTab=A_OKR
                     "
                  )
                  .append('TYP',_tab.TYP_ODB)
                  .append('ROK',$_tab.ROK)
                  .append('MSC',$_tab.MSC)
                  .append('DATA',$_tab.DATA,
                     "exec('str2date','#convert',_a)<>date(0,0,0)"
                  )
                  .append('GODZ',_tab.GODZ_WN_S,
                     "exec('str2time','#convert',_a)<>time(0,0,0)"
                  )
                  .append('AUTO',{? _autoSelection || 'T' || 'N' ?},
                     "_a='T' | _a='N'"
                  )
                  .append('PK',_tab.ODBN)
                  .append('TRYB','add')
                  .append('WODB_REF','')
                  .append('EDOKUM',$_edokum,
                     "_refTab:=ref_tab(_a);
                      type_of(_refTab)<>type_of(~~) & _refTab=EDOKUM
                     "
                  )
                  .append('PAR1',_par)
                  .append('PAR2','')
                  .append('PAR3','')
                  .append('PAR4','');

               _package:='';
               _bundleCheckResult:=_bundle.check();
               {? _bundleCheckResult=''
               || _withCheck:=0;
                  _package:=_bundle.create(_withCheck)
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:=_err.config;
                     _txt[2]:=_bundleCheckResult
                  ?}
               ?};

               _RS:=exec('wodb_add','prc_dane',_package,0);
               {? _RS.first()
               || {? +_RS.WYNIK & ~(_RS.WYNIK*'OK')
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:=_RS.WYNIK;
                        _txt[2]:=_err.kadry
                     ?}
                  || _oRes:=spli_str(_RS.WYNIK,';');
                     {? obj_len(_oRes)>3
                     || _r_wo:=_oRes[4];
                        R_WO.cntx_psh();
                        R_WO.index('PORDO');
                        R_WO.prefix();
                        _add_r_wo:=
                           {? type_of(ref_tab(_r_wo))>0 & R_WO.seek(_r_wo)
                           || _chk_txt:=exec('spr_wniosek','prc_rozlicz',,,1);
::                            sprawdzenie, czy nam automat nie zmienił liczby wnioskowanych godzin odbioru
                              {? +form(_chk_txt)=0 & _tab.GODZ_WN<>R_WO.G
                              || _chk_txt:='Dla wybranego typu wniosku należy zmienić '
                                           'liczbę wnioskowanych godzin na: %1'[R_WO.G$3]
                              ?};

                              {? +form(_chk_txt)=0
                              ||
                                 R_WYK.cntx_psh();
                                 R_WYK.index('R_WYKWO');
                                 _tab.NADG.cntx_psh();
                                 {? _tab.NADG.first()
                                 || {!
                                    |? _time_s:=*0$3;
                                       R_WYK.prefix(R_WO.ref(),exec('to_ti_dt','form_ob',_tab.NADG.DATA,'D'));
                                       {? R_WYK.first()
                                       || _time_s:=R_WYK.G$3
                                       ?};
                                       {? _tab.NADG.DATA<>$(#0)
                                       || _putAtr('%1%2'[_tabId.NADG_G,$_tab.NADG.LP],_time_s)
                                       ?};
                                       _tab.NADG.next()
                                    !}
                                 ?};
                                 _tab.NADG.cntx_pop();
                                 R_WYK.cntx_pop()
                              ?};
                              _chk_txt
                           || 'Dodanie wniosku o odbiór nie powiodło się.'@
                           ?};

                        R_WO.cntx_pop();
                        {? +form(_add_r_wo)
                        || _errors:=spli_str(_add_r_wo,'\n');
                           _result.ok*=0;
                           {! _index:=1..obj_len(_errors)
                           |! _txt[_index]:=_errors[_index]
                           !}
                        ?}
                     ?}
                  ?}
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:=_err.config;
                     _txt[2]:='Nie powiódł się próbny zapis wniosku do bazdy danych.'@
                  ?}
               ?}
            |? _result.ok & ~_autoSelection & _overtime.processed=''
            || _result.ok*=0;
               {? _walid || _txt[1]:='Nie wskazano nadgodzin do odbioru.'@ ?}
            ?}
         ?}
      ||
         _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak obsługi Czasu Pracy w systemie - nie można złożyć wniosku.'@
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalCopy:=
      {? _type='W' | _type='P'
      || _odb:={? _type='W'
               || exec('_odb','portal_walidacja')
               |? _type='P'
               || exec('_odbp','portal_walidacja')
               ?};
         {? var_pres('_odb')>100
         || exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_odb.name)
         ?}
      || 0
      ?};
      {? _zalCopy
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\ppsf_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o pracę poza siedzibą firmy - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppsf','portal_walidacja',_edokum,_osoba,_walid)


\ppsf_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o pracę poza siedzibą firmy - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppsf','portal_walidacja',_edokum,_osoba)


\ppsf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o pracę poza siedzibą firmy - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _firma:=exec('ref_firma','ustawienia');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Typ pracy
         'TYP',
::       Typ pracy (techniczne) - obiekt z danymi z rekordu tabeli PPSFT
         'PPSFT',
::       Na część dnia
         'PARTDAY',
::       Od dnia
         'OD',
::       Do dnia
         'DO',
::       Godziny robocze
         'GODZ',
::       Komentarz wnioskodawcy
         'KOMENT',
::       Złączenie do rekordu tabeli P (techniczne)
         'P_REF',
::       Złączenie do rekordu tabeli P (techniczne) [reprezentacja tekstowa]
         'P_REF_S',
::       Kto akceptuje wniosek (techniczne)
         'KTO_WER'
      );

      _tab.PPSFT:=obj_new(
::       Złączenie do rekordu tabeli PPSFT
         'REF',
::       Złączenie do powiązanego z rekordem PPSFT rekordu tabeli SLO_KOD
         'SLO_KOD',
::       Opis
         'OPIS',
::       Wymaga akceptacji oświadczenia
         'OSW_AKC'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.TYP:='TypPracy';
      _tabId.PARTDAY:='NaCzescDnia';
      _tabId.OD:='DataOd';
      _tabId.DO:='DataDo';
      _tabId.GODZ:='GodzinyRobocze';
      _tabId.KOMENT:='Komentarz';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.TYP:=_getAtr(_tabId.TYP);
      _tab.PARTDAY:=(_getAtr(_tabId.PARTDAY)='T');
      _tab.OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.OD),'D');
      _tab.DO:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DO),'D');
      _tab.GODZ:=exec('to_ti_dt','form_ob',_getAtr(_tabId.GODZ),'T');
      _tab.KOMENT:=exec('atr_get','portal_walidacja',_tabId.KOMENT,'WAR_W');
      _tab.P_REF:=null;
      _tab.P_REF_S:='';
      _tab.KTO_WER:=null;

      _tab.PPSFT.REF:=null;
      _tab.PPSFT.SLO_KOD:=null;
      _tab.PPSFT.OPIS:='';
      _tab.PPSFT.OSW_AKC:='N';

      {? exec('lic','#b_domain','PRC')
      || P.cntx_psh();
         P.prefix();
         {? _result.ok
            & +EDOKUM.OSOBAWWW=16
            & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
            & ref_tab(EDOKUM.OSOBAWWW)=P
            & P.seek(EDOKUM.OSOBAWWW)
         || _tab.P_REF_S:=EDOKUM.OSOBAWWW;
            _tab.P_REF:=P.ref()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Nie powiodło się odnalezienie w systemie pracownika składającego wniosek.'@;
               _txt[3]:=_err.kadry
            ?}
         ?};
         P.cntx_pop();

         {? _result.ok & ~exec('exist_in_custom','portal_slowniki','TypyPracyPozaSiedzibaFirmy',_tab.TYP)
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=_err.config;
               _txt[2]:='Wartość wybrana w polu \"%1\" nie jest prawidłowa.'@[_getName(_tabId.TYP)]
            ?}
         ?};

         _nazwa:='';
         _tab.PPSFT.OPIS:='';

         {? _result.ok
         || _oTyp:=spli_str(_tab.TYP,' - ');
            {? obj_len(_oTyp)=2
            || _nazwa:=_oTyp[1];
               _tab.PPSFT.OPIS:=_oTyp[2]
            ?};
            _slo_typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','PPSFT','PPSFT',,1,,null);
            _tab.PPSFT.SLO_KOD:=exec('FindInSet','#table','SLO_KOD','NAZWA',_nazwa,_slo_typ,,1,_nazwa,null);
            PPSFT.cntx_psh();
            PPSFT.prefix();
            {? ~PPSFT.find_tab(,'FIRMA',,'=',_firma,'OPIS',,'=',_tab.PPSFT.OPIS,'SLO_KOD',,'=',_tab.PPSFT.SLO_KOD)
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Nie udało się znaleźć wskazanego typu pracy'@
               ?}
            || _tab.PPSFT.REF:=PPSFT.ref();
               _tab.PPSFT.OSW_AKC:=PPSFT.OSW_WYM
            ?};
            PPSFT.cntx_pop()
         ?};

         {? _result.ok & _tab.OD=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.DATA)] ?}
         ?};

         {? _result.ok & _tab.DO=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nie wypełniono obowiązkowego pola \"%1\".'@[_getName(_tabId.DATA)] ?}
         ?};

         {? _result.ok & _tab.OD<>date(0,0,0) & _tab.OD<date()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data wybrana w polu \"%1\" nie może być wcześniejsza od obecnej daty.'@
                  [_getName(_tabId.OD)]
            ?}
         ?};

         {? _result.ok & _tab.DO<_tab.OD
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data wybrana w polu \"%1\" nie może być wcześniejsza od daty wybranej w polu \"%2\".'@
                  [_getName(_tabId.DO),_getName(_tabId.OD)]
            ?}
         ?};

         {? _result.ok & (_tab.OD~1)<>(_tab.DO~1)
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Daty wybrane w polach \"%1\" oraz \"%2\" muszą przypadać na ten sam rok.'@
                  [_getName(_tabId.DO),_getName(_tabId.OD)]
            ?}
         ?};

         {? _result.ok & _tab.GODZ<>time(0,0,0) & ~_tab.PARTDAY
         || _result.ok:=0;
            {? _walid
            || _txt[1]:='Liczba godzin może być wypełniona jedynie przy pracy na część dnia.'@
            ?}
         ?};

         {? _result.ok
         || _limit:=exec('limit_spr','ppsf',_tab.OD,_tab.DO,_tab.P_REF,_tab.PPSFT.SLO_KOD,_tab.GODZ,,,1);
            {? _limit.ok=0
            || _error:=exec('limit_kom','ppsf',_limit,1);
               _result.ok*=0;
               {? _walid
               || _txt[1]:='%1 - %2'@[_tab.PPSFT.OPIS,_error]
               ?}
            ?}
         ?};

         {? _result.ok & ~_tab.PARTDAY
         || PPSFN.cntx_psh();
            PPSFN.OD:=_tab.OD;
            PPSFN.DO:=_tab.DO;
            _ret:=exec('check','overlap',null(),PPSFN,'OD','DO',2,,,'DATA',exec('firma','ustawienia'),_tab.P_REF);
            PPSFN.cntx_pop();
            {? type_of(_ret)=type_of('') & _ret<>''
            || _result.ok*=0;
               {? _walid
               || _txt[1]:=gsub(_ret,'\n',' ')
               ?}
            ?}
         ?};

         {? _result.ok
         || {? ~_walid
            || EDOKOS.cntx_psh();
               USERS.cntx_psh();
               EDOKOS.prefix();
               {? EDOKOS.find_tab(,
                     'EDOKUM',,'=',_edokum,
                     'OPERACJA',,'=','Y',
                     'B_PREL',,'=','A2',
                     'B_PRELS',,'=','Akceptacja wniosku w obiegu'
                     )
               || _tab.KTO_WER:=EDOKOS.USERS().OSOBA
               ?};
               USERS.cntx_pop();
               EDOKOS.cntx_pop()
            || P.cntx_psh();
               P.prefix();
               {? P.seek(_tab.P_REF,,1)
               || _tab.KTO_WER:=P.OSOBA
               ?};
               P.cntx_pop()
            ?}
         ?};

         {? _result.ok
         || PPSFN.cntx_psh();
            PPSFN.prefix();
            PPSFN.blank();
            PPSFN.P:=_tab.P_REF;
            PPSFN.PPSFT:=_tab.PPSFT.REF;
            PPSFN.D:=date();
            PPSFN.OD:=_tab.OD;
            PPSFN.DO:=_tab.DO;
            PPSFN.G:=_tab.GODZ;
            PPSFN.PARTDAY:={? _tab.PARTDAY || 'T' || 'N' ?};
            PPSFN.AZ:='W';
            PPSFN.KOMENT:=_tab.KOMENT;
            PPSFN.OSW_AKC:=_tab.PPSFT.OSW_AKC;
            PPSFN.EDOKUM:=_edokum;
            PPSFN.ORIGIN:='P';
            PPSFN.KTO_WER:=_tab.KTO_WER;
            {? ~PPSFN.add()
            || _result.errMsg:='Nie udało się dodać wpisu do kartoteki.'@;
               _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Nie powiódł się próbny zapis wniosku do bazdy danych.'@
               ?}
            ?};
            PPSFN.cntx_pop()
         ?}

      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak obsługi Czasu Pracy w systemie - nie można złożyć wniosku.'@
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_ppsf','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\edp_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o udostępnienie kopii dokumentacji - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('edp','portal_walidacja',_edokum,_osoba,_walid)


\edp_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o udostępnienie kopii dokumentacji - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('edp','portal_walidacja',_edokum,_osoba)


\edp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o udostępnienie kopii dokumentacji - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Treść wniosku
         'TRESC',
::       Data wniosku
         'DATA'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.TRESC:='TrescEAkta';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.TRESC:=_getAtr(_tabId.TRESC);
      _tab.DATA:=exec('wn_date','form_ob',EDOKUM.uidref());

      {? var_pres('__WWKD_T')>100 || &__WWKD_T ?};
      {? exec('lic','#b_domain','PED')
      ||
::       jeżeli jesteśmy na etapie rejestracji to tworzymy załącznik z wniosku w postaci pliku .pdf
         {? _walid
         || _pdf:='wwkd_'+gsub($_tab.DATA,'/','_')+'.pdf';
            _dalej:=1;
::          musimy usunąć i ponownie wygenerować plik załącznika, ponieważ być może zmieniło się coś na wniosku
::          od ostatniej próby przekazania do zatwierdzenia
            {? exec('edokumZal_exist','portal_walidacja',_edokum,_pdf)
            || _dalej:=exec('edokumZal_del','portal_walidacja',_edokum,_pdf)
            ?};
            {? _dalej
            || __WWKD_T:=_tab;
               {? rep_exec('por_wwkd',,0,_pdf,1)
               || {? ~exec('edokumZal_add','form_ob',_pdf)
                  || _result.ok*=0;
                     _txt[1]:='Nie udało się dodać pliku załącznika dla wniosku.'@
                  ?}
               || _result.ok*=0;
                  _txt[1]:='Nie udało się utworzyć pliku załącznika dla wniosku.'@
               ?};
               &__WWKD_T
            || _result.ok*=0;
               _txt[1]:='Nie udało się ponownie wygenerować pliku załącznika dla wniosku.'@
            ?}
         ?}
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak obsługi Elektronicznej Dokumentacji Pracowniczej w systemie - nie można złożyć wniosku.'@
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_edp','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zaliczka_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o zaliczkę - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zaliczka','portal_walidacja',_edokum,_osoba,_walid)


\zaliczka_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o zaliczkę - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zaliczka','portal_walidacja',_edokum,_osoba)


\zaliczka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o zaliczkę - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Waluta
         'WAL',
::       Wartość netto z wniosku
         'NETTO',
::       Sposób realizacji zaliczki (przelew / gotówka)
         'RODZAJ',
::       Realizacja w płacach [T/N]
         'PLACE',
::       Data od dla realizacji w płacach
         'OD',
::       Numer rachunku
         'NR_RACH'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.WAL:='Waluta';
      _tabId.NETTO:='Netto';
      _tabId.RODZAJ:='Realizacja';
      _tabId.PLACE:='RealizacjaWPlacach';
      _tabId.OD:='RealizacjaWPlacachOdDnia';
      _tabId.NR_RACH:='NumerKonta';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.WAL:=exec('FindInSet','#table','SLO','SL',_getAtr(_tabId.WAL),
         exec('FindInSet','#table','SLU','NAZ','WALUTY',,,1,,null),,1,,null);
      _netto:=gsub(_getAtr(_tabId.NETTO),',','.');
      _str:=spli_str(_netto,'.');
      {? obj_len(_str)>1 & +(_str[2])>2
      || _result.ok*=0;
         _txt[1]:='Nieprawidłowo wprowadzona wartość zaliczki do wniosku.'@
      ?};
      &_str;
      _tab.NETTO:=#_netto;
      _tab.RODZAJ:=_getAtr(_tabId.RODZAJ);
      _tab.PLACE:=_getAtr(_tabId.PLACE);
      _tab.OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.OD),'D');
      _tab.NR_RACH:=_getAtr(_tabId.NR_RACH);

      {? _result.ok & _tab.WAL=null()
      || _result.ok*=0;
        {? _walid || _txt[1]:='Nie udało się znaleźć wybranej waluty: %1.'@[$_tab.WAL] ?}
      ?};

      {? _result.ok & _tab.NETTO<0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Kwota zaliczki musi być większa od 0.'@ ?}
      ?};

      {? _result.ok & _tab.RODZAJ<>'Przelew' & _tab.RODZAJ<>'Kasa'
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nieprawidłowa forma sposobu wypłaty zaliczki.'@ ?}
      ?};

      {? _result.ok & _tab.RODZAJ='Przelew' & _tab.NR_RACH=''
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nie wybrano rachunku bankowego przy zaznaczonej opcji \"Przelew\".'@ ?}
      ?};

      {? _result.ok & _tab.RODZAJ='Kasa' & _tab.NR_RACH<>''
      || _result.ok*=0;
         {? _walid || _txt[1]:='Wybrano rachunek bankowy przy zaznaczonej opcji \"Kasa\".'@ ?}
      ?};

      {? _result.ok
      || {? _tab.RODZAJ='Przelew' & _tab.NR_RACH<>''
         || _tab.RODZAJ:='P';
            exec('RB','object');
            _nrRachOsoby:=RB.get_rbtx(2,_tab.NR_RACH);
            {? _nrRachOsoby=''
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Nie można zrealizować zaliczki w wybranej formie (Przelew).'@;
                  _txt[2]:='Brak w systemie numeru rachunku przypisanego do składającego wniosek.'@
               ?}
            ?}
         |? _tab.RODZAJ='Kasa'
         || _tab.RODZAJ:='K'
         || _result.ok*=0;
            {? _walid || _txt[1]:='Nieprawidłowa forma sposobu wypłaty zaliczki.'@ ?}
         ?}
      ?};

      {? _result.ok & _tab.OD<>date(0,0,0) & _tab.OD<date()
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data realizacji zaliczki nie może być wcześniejsza od obecnej daty.'@ ?}
      ?};

      {? _result.ok & _tab.PLACE='T' & _tab.OD=date(0,0,0)
      || _result.ok*=0;
         {? _walid || _txt[1]:='Data realizacji zaliczki niewypełniona dla zaliczki uwzględnianej na liście płac.'@ ?}
      ?};

      {? _result.ok & _tab.PLACE<>'T' & _tab.OD<>date(0,0,0)
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Niepotrzebnie wypełniona data realizacji w płacach dla'@;
            _txt[2]:='niezaznaczonej informacji o realizacji w płacach.'@
         ?}
      ?};

      {? _result.ok
      || _typ:=EDOKUM.TYP;
         {? _cnt:=EDOKUM.tab_info('cntx_cnt')
         || EDOKUM.cntx_pop()
         ?};
         ETYPY.prefix();
         {? ETYPY.seek(_typ,,1)
         || {? ETYPY.CZY_ZALP<>'T'
            || ETYPY.CZY_ZALP:='T';
               ETYPY.trig_off('put','*');
               ETYPY.put(1);
               ETYPY.trig_on('put','*');
               EDOKUM.TYP:=ETYPY.ref()
            ?};
            EDOKUM.WAL:=_tab.WAL;
            EDOKUM.WART:=EDOKUM.NETTO:=_tab.NETTO;
            EDOKUM.KASPRZEL:=_tab.RODZAJ;
            EDOKUM.N:=_tab.NR_RACH;
            EDOKUM.PLACE:=_tab.PLACE;
            EDOKUM.POTRODDN:=_tab.OD;
            {? ~EDOKUM.put(1)
            || _result.ok*=0;
               {? _walid || _txt[1]:='Błąd konfiguracji wniosków - nieprawidłowo zapisany wniosek'@ ?}
            ?}
         ?};
         {? EDOKUM.tab_info('cntx_cnt')<>_cnt
         || EDOKUM.cntx_psh()
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zaliczka','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zod_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15a -
::       Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zasilek_dziecko','portal_walidacja',_edokum,_osoba,_walid)


\zod_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15a -
::       Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zasilek_dziecko','portal_walidacja',_edokum,_osoba)


\zasilek_dziecko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15a - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zod','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zoc_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15b -
::       Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zasilek_chory','portal_walidacja',_edokum,_osoba,_walid)


\zoc_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15b -
::       Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zasilek_chory','portal_walidacja',_edokum,_osoba)


\zasilek_chory
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o zasiłek opiekuńczy z powodu sprawowania opieki nad dzieckiem z-15b - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zoc','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\woz_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - Wniosek o zatrudnienie - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('woz','portal_walidacja',_edokum,_osoba,_walid)


\woz_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - Wniosek o zatrudnienie - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('woz','portal_walidacja',_edokum,_osoba)


\woz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła obsługująca wniosek o zatrudnienie - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
_osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
_walid:={? var_pres('_c')=type_of(0) || _c || 0 ?};

::obecnie formuła ma być wykonywana tylko podczas walidacji
_result.ok:=1;
{? ~_walid || return(_result) ?};
_result.ok:=0;

_rodzaj:='';
{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

:: powołanie obiektów
   exec('initObj','form_ob');
   exec('load_par','#parametr');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _tab:=obj_new('PIERWSZE','NAZWISKO','PODPIS','RU','MIEJSCE','OD','DO',
                    'WYDZIAL','ST','POZWORG','CP','WYL','WYM','S1','S2','S3');

      _tab.PIERWSZE  :=exec('atr_get','portal_walidacja','Imie');
      _tab.NAZWISKO  :=exec('atr_get','portal_walidacja','Nazwisko');
      _data_s        :=exec('atr_get','portal_walidacja','DataZatrudnienia');
      _tab.PODPIS    :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.RU        :=exec('atr_get','portal_walidacja','UmowaTypNazwa');
      _tab.MIEJSCE   :=exec('atr_get','portal_walidacja','MiejscePracyNazwa');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaOd');
      _tab.OD        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _data_s        :=exec('atr_get','portal_walidacja','UmowaDo');
      _tab.DO        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _LpDzial       :=exec('atr_get','portal_walidacja','LpDzial');
      _tab.WYDZIAL   :={? +_LpDzial || _LpDzial || exec('atr_get','portal_walidacja','DzialNazwa') ?};
      _tab.ST        :=exec('atr_get','portal_walidacja','StanowiskoNazwa');
      _tab.POZWORG   :=exec('atr_get','portal_walidacja','PozycjaWOrg');
      _tab.CP        :=exec('atr_get','portal_walidacja','CharakterPracy');
      _tab.WYL       :=exec('atr_get','portal_walidacja','EtatL');
      _tab.WYM       :=exec('atr_get','portal_walidacja','EtatM');
      _tab.S1        :=exec('atr_get','portal_walidacja','Wynagrodzenie');
      _tab.S2        :=exec('atr_get','portal_walidacja','DodatekFunkcyjny');
      _tab.S3        :=exec('atr_get','portal_walidacja','Dodatek');
      _tekst         :=exec('atr_get','portal_walidacja','InformacjeDodatkowe','WAR_W');
      _benefity:=exec('atr_get','portal_walidacja','Benefity');
      {? +_benefity
      || _tekst+='\nInne benefity:\n%1'[_benefity]
      ?};
::======================================================================================================================
:: Sprawdzenie poprawnosci danych jako takich
::======================================================================================================================
      _typ:=exec('slo_typ','ext_slo','UMPRAC');
      _ru:=exec('FindInSet','#table','RU','O',_tab.RU,_typ,,1,,null());
      {? _walid
      || _pola:='OSOBA.NAZWISKO,OSOBA.PIERWSZE,';
         _pola+='H.MIEJSCE';
         _spr:=spli_str(_pola,',');
         {! _licz:=1..obj_len(_spr) |!
            {? var_pres('_co')>0 || &_co ?};
            _co:=spli_str(_spr[_licz],'.');
            _len:=MS.fld_len(_co[1],_co[2]);
            {? +|(($('_a.'+_co[2]))(_tab))>_len
            || _zn:=
                  {? _len=1 || 'znak'@
                  |? _len<=4 || 'znaki'@
                  || 'znaków'@
                  ?};
               exec('tab_kom_add','form_ob'
                  ,1
                  ,'Za długa nazwa w polu "%1", dopuszczalna liczba to %2 %3.'@[MS.name(_co[1],_co[2]),$_len,_zn]
                  )
            ?}
         !};
         {? var_pres('_spr')>0 || &_spr ?};
         {? _tab.PODPIS=date(0,0,0)
         || exec('tab_kom_add','form_ob'
               ,1
               ,'Data "%1" nie może być pusta.'@[MS.name('H','PODPIS')]
               )
         ?};
         {? _tab.OD=date(0,0,0)
         || exec('tab_kom_add','form_ob'
               ,1
               ,'Data "%1" nie może być pusta.'@[MS.name('H_UM','OD')]
               )
         ?};
         {? _ru=null()
         || exec('tab_kom_add','form_ob'
               ,1
               ,'Nie znaleziono podanego rodzaju umowy w słowniku rodzajów umów.'@
               )
         ?}
      ?};

      OSOBA.cntx_psh(); P.cntx_psh(); KRAJE.cntx_psh(); WOJEWODZ.cntx_psh();
      H_UM.cntx_psh(); H.cntx_psh(); STN.cntx_psh(); STO.cntx_psh(); PSTO.cntx_psh(); CP.cntx_psh();
      UD_SKL.cntx_psh(); UD_TYP.cntx_psh(); S_ZUS.cntx_psh(); RU.cntx_psh(); SLO_OSOB.cntx_psh();
      F_ZATR.cntx_psh(); KT.cntx_psh(); POZWORG.cntx_psh(); KAL_NAZW.cntx_psh();

      OSOBA.clear(); KRAJE.clear(); WOJEWODZ.clear(); US.clear(); UD_TYP.clear(); SLO_OSOB.clear(); F_ZATR.clear();
      STN.clear(); STO.clear(); PSTO.clear(); CP.clear(); S_ZUS.clear(); RU.clear(); POZWORG.clear();

      OSOBA.index('OSOBA'); KRAJE.index('KRAJE'); WOJEWODZ.index('WOJNAZWA'); US.index('URZSKNAZ');
      UD_TYP.index('SYMBOL'); SLO_OSOB.index('OSOBA'); F_ZATR.index('UNIQUE');
      STN.index('STANONAZ'); STO.index('UNIQUE'); PSTO.index('PSTO'); CP.index('CHARPRAW'); S_ZUS.index('S_ZUS');
      RU.index('K'); POZWORG.index('KOD');
::======================================================================================================================
:: Dane osobowe
::======================================================================================================================
      _ref_osoba:=_ref_os_adres:=null();
      OSOBA.blank(1);
      OSOBA.NAZWISKO:=_tab.NAZWISKO;
      OSOBA.PIERWSZE:=_tab.PIERWSZE;

      _spr:={? |OSOBA.NAZWISKO='' || 'NAZWISKO'
            |? |OSOBA.PIERWSZE='' || 'PIERWSZE'
            || 1
            ?};

      {? var_pres('_spr')=type_of('') & _spr<>''
      || _result.ok:=0;
         _result.errMsg:='Brak wymaganych informacji. Dane osobowe "%1".'@[MS.name('OSOBA',_spr)];
         {? _walid
         || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
         ?}
      || _result.ok+=OSOBA.add(1);
         {? _result.ok=0
         || _result.errMsg:='Dodanie rekordu osoby nie powiodło się.'@
         ?}
      ?};
      {? _result.ok
      || _opis2:='Na podstawie: %1 o nr: %2'@[exec('nazwa_woz','obiegi'),EDOKUM.ID];
         _result.ok:=exec('add_giodo','form_ob',OSOBA.ref(),_opis2,,'W');
         _ref_osoba:=OSOBA.ref()
      ?};
::======================================================================================================================
:: Pracownik
::======================================================================================================================
      ZZ_DOK.cntx_psh();
      ZZ_DOK.use('zz_do'+($REF.FIRMA+1));
      ZZ_DOK.index('ID');
      ZZ_OSOBA.cntx_psh();
      ZZ_OSOBA.index('ZZ_LINK');
      ZZ_OSOBA.prefix();
      _ref_p:=null();
      _pozworg:=null();
      _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
      STN.clear();
      _ud_typ:={? UD_TYP.find_key('PODZORG',) || UD_TYP.ref() || null() ?};
      UD_SKL.index({? +_LpDzial || 'SYMBOL' || 'OPIS' ?});
      UD_SKL.prefix(_ud_typ);
      _ud_skl:={? UD_SKL.find_key(_tab.WYDZIAL,) || UD_SKL.ref() || null() ?};
      _stn:={? STN.find_key(_tab.ST,) || STN.ref() || null() ?};
      _par313:=exec('get_par','#parametr',313,2)='T';
      POZWORG.index('KOD');
      POZWORG.prefix(_firma);
      _pozworg:={? POZWORG.find_key(_tab.POZWORG,) || POZWORG.ref() || null() ?};

      {? _ud_skl & _stn & ~STO.find_key(_ud_skl,_stn)
      || STO.UD_SKL:=_ud_skl;
         STO.STN:=_stn;
         STO.ST:=STO.STN().ST;
         {? STO.add(1) & _par313 & _pozworg
         || PSTO.blank(1);
            PSTO.POZWORG:=_pozworg;
            PSTO.STO:=STO.ref();
            PSTO.add(1)
         ?}
      ?};

      {? _result.ok
      || exec('__F_ZATR','object');
         _f_zatr:=__F_ZATR.P;
         __F_ZATR.mod('P');
         P.index('PRACOIP');
         P.clear();
         F_ZATR.clear();
::       sprawdzamy czy obecnie jest zatrudniony pracownik na tym samym stanowisku i wydziale
         _overlap:=0;
         _zatr_p_big:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         __F_ZATR.mod('p');
         _zatr_p_small:=P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         P.cntx_psh();
         P.use('pracowni');
         P.index('OSOBA');
         P.prefix(_ref_osoba,_firma);
         {? P.first()
         || {!
            |? {? P.WYDZIAL=_ud_skl & P.ST=_stn & (P.DZ=#0 | P.DZ>=_tab.OD) &
                  (P.F_ZATR=_zatr_p_small | P.F_ZATR=_zatr_p_big)
               || _overlap:=1
               ?};
               ~_overlap & P.next()
            !}
         ?};
         P.cntx_pop();
         P.blank(1);
         P.FIRMA:=_firma;
         F_ZATR.index('UNIQUE');
         P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
         P.WYDZIAL:=_ud_skl;
         P.OSOBA:=_ref_osoba;
         P.ST:=_stn;

         {? _ud_skl & _stn & ~_overlap & ((_par313 & _pozworg) | (~_par313 & ~_pozworg))
::          zatrudniamy zawsze do brudnopisu (małe 'p')
         || _ip:=exec('prac_ip','pracownik','p');
            __F_ZATR.mod('p');
            P.F_ZATR:={? F_ZATR.seek(BIT.sqlint(__F_ZATR.REF),) || F_ZATR.ref() || null() ?};
            _n_ip:=0;
            {? type_of(_ip)=type_of(SYSLOG)
            || _licz:=1;
               {? _ip.find_key(_n_ip:=1)
               || {! _licz |? _ip.find_key(_licz) !}
               ?};
               _n_ip:=_licz
            ?};
            _prev:='PRAC '+$_n_ip;
            _len:=MS.fld_len('P','T');
            P.T:=form(_prev,-_len);
            P.IP:=_n_ip;
            OSOBA.KALI:='T';
            KAL_NAZW.index('KAL_NAZW');
            KAL_NAZW.prefix();
            P.DZA:=_tab.OD;
            P.KAL:={? KAL_NAZW.find_key(_firma,'standard',) || KAL_NAZW.ref() || null() ?};
            P.ODDEL:='N';
            {? _n_ip
            || _result.ok*=P.add(1);
               {? _result.ok
               || _ref_p:=P.ref()
               || _result.errMsg:='Dodanie rekordu pracownika nie powiodło się.'@
               ?};
               SLO_OSOB.index('OSOBA');
               SLO_OSOB.blank(1);
               SLO_OSOB.F_ZATR:=P.F_ZATR;
               SLO_OSOB.OSOBA:=P.OSOBA;
               SLO_OSOB.ID:=P.IP;
               {? _result.ok & (~SLO_OSOB.find_rec())
               || {? ~SLO_OSOB.add(1)
                  || _result.ok:=0;
                     _result.errMsg:='Dodanie rekordu SLO_OSOB nie powiodło się.'@
                  ?}
               ?}
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','IP')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?}
         || {? ~_ud_skl
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','WYDZIAL')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? ~_stn
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','ST')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? _par313 & ~_pozworg
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Pracownik "%1".'@[MS.name('P','POZWORG')];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? ~_par313 & _pozworg
            || _result.ok:=0;
               _result.errMsg:='"Pozycja w organizacji" nie jest wykorzystywane w systemie. Pole powinno być puste.'@;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?}
         ?};
         __F_ZATR.mod(_f_zatr)
      ?};

::======================================================================================================================
:: Umowa i przebieg
::======================================================================================================================
      {? _result.ok
      || H.use('_his'+{? P.F_ZATR().DOCELOWA='T' || 't' || '_' ?});
         exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
         H_UM.index('OD');
         H_UM.prefix(_ref_p);
         H.index('_HISTDAT');
         H.prefix(_ref_p);
         {? ~H_UM.first()
         || H_UM.blank(1);
            H.blank(1);
            H_UM.RU:=_ru;
            H_UM.P:=_ref_p;
            H_UM.OD:=_tab.OD;
            H_UM.DO:=_tab.DO;
            H_UM.SW:='N';
            H_UM.EKW_LICZ:='N';
            H.P:=_ref_p;
            H.WYDZIAL:=_ud_skl;
            H.ST:=_stn;
            H.CP:={? CP.find_key(_tab.CP,) || CP.ref() || null() ?};
            H.WYM:=#_tab.WYM;
            H.WYL:=#_tab.WYL;
            H.WY:={? H.WYM || (H.WYL/H.WYM)$3 || 0 ?};
            H.RWY:=H.WY;
            H.RWYL:=H.WYL;
            H.RWYM:=H.WYM;
            _tmp:=H_UM.NUMER;
            H_UM.NUMER:=|H_UM.NUMER;

            _len:=MS.fld_len('H_UM','NUMER');
            H_UM.NUMER:=_tmp;
            H.PODPIS:=_tab.PODPIS;
            H.PRZYG:=H.PODPIS;
            H.OD:=H_UM.OD;
            H.DO:=H_UM.DO;
            H.KZ:=exec('h_kz_bl','pracownik');
            H.MIEJSCE:=_tab.MIEJSCE;
            H.CZYWAL:=H.CZYWAL2:=H.CZYWAL3:='N';
            H.SP:='N';
            H.POZWORG:=_pozworg;
            H.S2T:=H.S3T:='K';
            H.PMP:='T';
            H.MAC:='N';
            H.PAT:='N';
            H.WN:='';
            H.S1:=#gsub(_tab.S1,',','.');
            H.S2:=#gsub(_tab.S2,',','.');
            H.S3:=#gsub(_tab.S3,',','.');
            H.RU:=H_UM.RU;
            H.ODDEL:=H.KODDEL:='N';
            {? H_UM.OD<H.PODPIS
            || {? _walid
               || exec('tab_kom_add','form_ob'
                     ,2
                     ,'Data podpisania umowy jest późniejsza niż data jej rozpoczęcia.'@
                  )
               ?}
            ?};
            exec('h_wyx_ae','pracownik');

::          sprawdź poprawność umowy o pracę i angażu
            _sprhum:=exec('h_um_p_ae','pracownik',0,1);
::          dla nowego portalu pomijamy sprawdzanie numeru umowy
            {? _sprhum*'NUMER' || _sprhum:='' ?};
            _sprh:=
               {? H.RU().K<>'C' & H.RU().K<>'E'
               || __CHK.record(H,1,'OD','DO','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
               || __CHK.record(H,1,'OD','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
               ?};
            {? ~H.S1 || H.CZYWAL:='N' ?};
            {? ~H.S2 || H.S2T:='K'; H.S2P:=null(); H.CZYWAL2:='N' ?};
            {? ~H.S3 || H.S3T:='K'; H.S3P:=null(); H.CZYWAL3:='N' ?};
            H.WAL:=H.ZWAL:=null();

            {? ~(H.WY>0 & H.WY<=1)
            || _result.ok:=0;
               _result.errMsg:='Wymiar zatrudnienia musi być określony.'@;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? var_pres('_sprhum')=type_of('')  & _sprhum<>''
            || {? 'RU,OD,DO'*_sprhum
               || _sprhum:='Pole: "%1"'@[MS.comment(H_UM,_sprhum)]
               ?};
               _sprhum:={? _sprhum+1='.' || _sprhum-1 || _sprhum ?};
               _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. %1.'@[_sprhum];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? _result.ok & var_pres('_sprh')=type_of('')  & _sprh<>''
            || {? 'OD,DO,WYDZIAL,ST,KZ,CP,KW_MSC,S1,PRZYG,PODPIS'*_sprh
               || _sprh:='Pole: "%1"'@[MS.comment(H,_sprh)]
               ?};
               _sprh:={? _sprh+1='.' || _sprh-1 || _sprh ?};
               _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. %1.'@[_sprh];
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};

            {? _result.ok
            || _result.ok*=H_UM.add(1);
               {? _result.ok
               || H.UMOWA:=H_UM.ref();
                  _result.ok*=H.add(1);
                  {? _result.ok
                  || H.memo_set(_tekst,'INNE');
                     H.memo_put(,'INNE');
                     _result.ok*=H.put(1);
                     {? _result.ok
                     || EDOKUM.REFLISTA:=$H_UM.ref();
                        EDOKUM.REFPRAC:=$H.ref()
                     || _result.errMsg:='Dodanie rekordu przebiegu umowy nie powiodło się.'@
                     ?};
                     {? P.KAL<>null
                     || exec('dod_kal_czesc','kaledit',P)
                     ?};
                     exec('pracownik_aktualizuj','pracownik')
                  ?}
               || _result.errMsg:='Dodanie rekordu umowy nie powiodło się.'@
               ?}
            ?}
         || _result.ok:=0;
            _result.errMsg:='Niemożliwe zatrudnienie. Ten pracownik ma już umowę.'@;
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         ?}
      ?};

      ZZ_OSOBA.cntx_pop();
      ZZ_DOK.cntx_pop();
      KAL_NAZW.cntx_pop();
      POZWORG.cntx_pop(); KT.cntx_pop(); F_ZATR.cntx_pop(); SLO_OSOB.cntx_pop(); RU.cntx_pop(); S_ZUS.cntx_pop();
      UD_TYP.cntx_pop(); UD_SKL.cntx_pop(); CP.cntx_pop(); STN.cntx_pop(); STO.cntx_pop(); PSTO.cntx_pop();
      H.cntx_pop(); H_UM.cntx_pop(); WOJEWODZ.cntx_pop(); KRAJE.cntx_pop(); P.cntx_pop(); OSOBA.cntx_pop();
      exec('otworz_h_um','pracownik')
   ?};
   EDOK_ATR.cntx_pop();
   {? _walid & TKOM13.first()
   || _kom:=obj_new(TKOM13.size());
      {! _licz:=1..obj_len(_kom) |?
         _kom[_licz]:=obj_new(2);
         _kom[_licz][1]:=TKOM13[1];
         _kom[_licz][2]:=TKOM13[2];
         TKOM13.next()
      !}
   ?};

   undo();
   {? _mydo || end() ?};
   {? _walid & var_pres('_kom')>100
   || {! _licz:=1..obj_len(_kom) |?
         exec('tab_kom_add','form_ob',_kom[_licz][1],_kom[_licz][2])
      !}
   ?}
?};
_ref_h_um:=EDOKUM.REFLISTA;
_ref_h:=EDOKUM.REFPRAC;
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
{? _result.ok & ~_walid & +|_ref_h_um
|| EDOKUM.REFLISTA:=_ref_h_um;
   EDOKUM.REFPRAC:=_ref_h;
   EDOKUM.put()
?};
_result


\wn_zzal_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek z załącznikiem - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('wn_zzal','portal_walidacja',_edokum,_osoba,_walid)


\wn_zzal_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek z załącznikiem - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('wn_zzal','portal_walidacja',_edokum,_osoba)


\wn_zzal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek z załącznikiem - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Nazwa kategorii bazy wiedzy
         'NAZWA',
::       Funkcja
         'FUNKC',
::       Kod
         'KOD'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.NAZWA:='KategoriaBazyWiedzy';

::    Przypisanie wartości z Portalu HR
      _tab.NAZWA:=exec('atr_get','portal_walidacja',_tabId.NAZWA);
      _tab.FUNKC:=((_tab.NAZWA*'^')-1)+_tab.NAZWA;
      {? _tab.FUNKC='BNFT'
      || _tab.KOD:='$'
      || _tab.KOD:=(+(_tab.FUNKC+'^'))-_tab.NAZWA
      ?};

      BIPKAT.cntx_psh();
      BIPKAT.index('KOD');
      BIPKAT.prefix(exec('ref_firma','ustawienia'),_tab.FUNKC,_tab.KOD,);
      {? ~BIPKAT.first()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Podana kategoria nie jest kategorią, dla której można składać wnioski z załącznikiem.'@;
            _txt[2]:=_err.kadry
         ?}
      ?};
      BIPKAT.cntx_pop();

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_wn_zzal','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\rekrutacja_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - Zgłoszenie rekrutacji - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('rekrutacja','portal_walidacja',_edokum,_osoba,_walid)


\rekrutacja_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - Zgłoszenie rekrutacji - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('rekrutacja','portal_walidacja',_edokum,_osoba)


\rekrutacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formula obsługująca wniosek o rekrutację - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
{? _walid || exec('tab_kom','form_ob') ?};
EDOK_ATR.cntx_psh();
{? exec('open_edk_atr','obiegi',EDOKUM.ref())
|| _result.ok:=1
?};
EDOK_ATR.cntx_pop();
_result


\wozda_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - Wniosek o zmianę danych adresowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('wozda','portal_walidacja',_edokum,_osoba,_walid)


\wozda_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - Wniosek o zmianę danych adresowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('wozda','portal_walidacja',_edokum,_osoba)


\wozda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formula obsługująca wniosek o zmianę danych adresowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

_rodzaj:='';
{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
exec('MS','#object');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _tab:=obj_new('OD','DO','TYP_ADRESU','KRAJ','WOJEWODZ','POWIAT','GMINA','GMGUS','KOD','POCZTA','MIASTO',
         'ULICA','DOM','LOKAL','TEL','EMAIL');

      _data_s        :=exec('atr_get','portal_walidacja','ZmianaOd');
      _tab.OD        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _data_s        :=exec('atr_get','portal_walidacja','ZmianaDo');
      _tab.DO        :=exec('to_ti_dt', 'form_ob', _data_s, 'D');
      _tab.TYP_ADRESU:=exec('atr_get','portal_walidacja','TypAdresu');
      _tab.KRAJ      :=exec('atr_get','portal_walidacja','Kraj');
      _tab.WOJEWODZ  :=exec('atr_get','portal_walidacja','Wojewodztwo');
      _tab.POWIAT    :=exec('atr_get','portal_walidacja','Powiat');
      _tab.GMINA     :=exec('atr_get','portal_walidacja','GminaDzielnica');
      _tab.GMGUS     :=exec('atr_get','portal_walidacja','GMGUS');
      _tab.KOD       :=exec('atr_get','portal_walidacja','KodP');
      _tab.POCZTA    :=exec('atr_get','portal_walidacja','Poczta');
      _tab.MIASTO    :=exec('atr_get','portal_walidacja','Miejscowosc');
      _tab.ULICA     :=exec('atr_get','portal_walidacja','Ulica');
      _tab.DOM       :=exec('atr_get','portal_walidacja','NrDomu');
      _tab.LOKAL     :=exec('atr_get','portal_walidacja','NrLok');
      _tab.TEL       :=exec('atr_get','portal_walidacja','NrTel');
      _tab.EMAIL     :=exec('atr_get','portal_walidacja','Email');

::======================================================================================================================
:: Sprawdzenie poprawnosci danych jako takich
::======================================================================================================================
      _result.ok:=1;
      {? ~+|_tab.TYP_ADRESU
      || _result.ok:=0;
         _result.errMsg:='Brak wymaganych informacji. Dane adresowe "%1".'@[MS.name('OS_ADRES','RODZAJ')];
         {? _walid
         || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
         ?}
      ?};

      OSOBA.cntx_psh(); OS_ADRES.cntx_psh(); KRAJE.cntx_psh(); WOJEWODZ.cntx_psh();
      OSOBA.clear(); KRAJE.clear(); WOJEWODZ.clear();

      OSOBA.index('OSOBA'); OS_ADRES.index('RODZAJ'); KRAJE.index('KRAJE'); WOJEWODZ.index('WOJNAZWA');

      {? +|_tab.TYP_ADRESU
      || {? _walid
         || _pola:='OS_ADRES.POWIAT,OS_ADRES.GMINA,OS_ADRES.GMGUS,OS_ADRES.KOD,OS_ADRES.POCZTA,';
            _pola+='OS_ADRES.MIASTO,OS_ADRES.ULICA,OS_ADRES.DOM,OS_ADRES.LOKAL,OS_ADRES.TEL,OS_ADRES.EMAIL';
            _spr:=spli_str(_pola,',');
            {! _licz:=1..obj_len(_spr)
            |! {? var_pres('_co')>0 || &_co ?};
               _co:=spli_str(_spr[_licz],'.');
               _len:=MS.fld_len(_co[1],_co[2]);
               {? +|(($('_a.'+_co[2]))(_tab))>_len
               || _zn:=
                     {? _len=1 || 'znak'@
                     |? _len<=4 || 'znaki'@
                     || 'znaków'@
                     ?};
                  exec('tab_kom_add','form_ob'
                     ,1
                     ,'Za długa nazwa w polu "%1", dopuszczalna liczba to %2 %3.'@[MS.name(_co[1],_co[2]),$_len,_zn]
                     )
               ?}
            !};
            {? var_pres('_spr')>0 || &_spr ?};
            {? _tab.OD=date(0,0,0)
            || exec('tab_kom_add','form_ob'
                  ,1
                  ,'Data "%1" nie może być pusta.'@[MS.name('OS_ADRES','OD')]
                  )
            ?}
         ?};
::======================================================================================================================
:: Dane adresowe
::======================================================================================================================
         OS_ADRES.index('RODZAJ');
         OS_ADRES.prefix(OSOBA.ref(),_tab.TYP_ADRESU,);
         OS_ADRES.blank(1);
         OS_ADRES.OSOBA:=OSOBA.ref();
         OS_ADRES.OD:=_tab.OD;
         OS_ADRES.DO:=_tab.DO;
         OS_ADRES.RODZAJ:=_tab.TYP_ADRESU;
         OS_ADRES.KRAJ:=exec('FindInSet','#table','KRAJE','KRAJE',_tab.KRAJ,,,1);
         OS_ADRES.WOJEWODZ:=_tab.WOJEWODZ;
         OS_ADRES.POWIAT:=_tab.POWIAT;
         OS_ADRES.GMINA:=_tab.GMINA;
         OS_ADRES.GMGUS:=_tab.GMGUS;
         OS_ADRES.KOD:=_tab.KOD;
         OS_ADRES.POCZTA:=_tab.POCZTA;
         OS_ADRES.MIASTO:=_tab.MIASTO;
         OS_ADRES.ULICA:=_tab.ULICA;
         OS_ADRES.DOM:=_tab.DOM;
         OS_ADRES.LOKAL:=_tab.LOKAL;
         OS_ADRES.TEL:=_tab.TEL;
         OS_ADRES.EMAIL:=_tab.EMAIL;

         exec('__CHK','object');
         _spr:=__CHK.record(OS_ADRES,1,'KRAJ','MIASTO','DOM');
         {? _spr='' & (~-OS_ADRES.KRAJ().KODISO='PL')
         || {? (_spr:=__CHK.record(OS_ADRES,1,'WOJEWODZ','POWIAT','GMINA'))=''
            || _ret:='';
               _zdate:=date(0,0,0);
               {? OS_ADRES.OD=_zdate & OS_ADRES.DO=_zdate
               || _result.errMsg:='Wprowadzono niespójne daty.'@;
                  _ret:='Zmiana od'
               |? OS_ADRES.OD<>_zdate & OS_ADRES.DO<>_zdate & OS_ADRES.DO<OS_ADRES.OD
               || _result.errMsg:='Podano błędną datę obowiązywania adresu.'@;
                  _ret:='Zmiana do'
               || OS_ADRES.cntx_psh();
                  _adres:=exec('szukaj','osoba',_tab.TYP_ADRESU,EDOKUM.DATAW);
                  _old_od:={? _adres || OS_ADRES.OD || #0 ?};
                  OS_ADRES.cntx_pop();
                  _od:=OS_ADRES.OD; _do:=OS_ADRES.DO;
                  OS_ADRES.cntx_psh();
                  OS_ADRES.index('RODZAJ');
                  OS_ADRES.prefix(OS_ADRES.OSOBA,OS_ADRES.RODZAJ);
                  {? OS_ADRES.first()
                  || {!
                     |? {? {? OS_ADRES.DO=_zdate | _od=_zdate || 1 || _od<=OS_ADRES.DO ?} &
                           {? OS_ADRES.OD=_zdate | _do=_zdate || 1 || OS_ADRES.OD<=_do ?}
                        || {? (OS_ADRES.DO=_zdate | OS_ADRES.DO>_do) & _od>OS_ADRES.OD & ~OS_ADRES.next()
                           || OS_ADRES.DO:=_od - 1; OS_ADRES.put()
                           || {? _old_od<>#0
                              || _rodzaj:=exec('rodzaj','osoba',_tab.TYP_ADRESU);
                                 _rodzaj:=-(1+_rodzaj)+(1-_rodzaj);
                                 exec('tab_kom_add', 'form_ob', 1,
                                    'Istnieje w systemie adres %1 obowiązujący od daty %2.'@[_rodzaj,$_old_od])
                              ?};
                              _result.errMsg:='Wprowadzono niespójne daty.'@;
                              _ret:='Zmiana od'
                           ?}
                        ?};
                        _ret='' & OS_ADRES.next()
                     !}
                  ?};
                  OS_ADRES.cntx_pop()
               ?};
               {? +_ret
               || _result.ok:=0;
                  _result.errMsg+=' Dane adresowe "%1".'@[_ret];
                  {? _walid
                  || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
                  ?}
               ?}
            ?}
         ?};
         {? type_of(_spr)=type_of('') & _spr<>''
         || _result.ok:=0;
            _result.errMsg:='Brak wymaganych informacji. Dane adresowe "%1".'@[MS.name('OS_ADRES',_spr)];
            {? _walid
            || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
            ?}
         || _result.ok*=OS_ADRES.add(1)
         ?}
      ?};

      WOJEWODZ.cntx_pop(); KRAJE.cntx_pop(); OS_ADRES.cntx_pop(); OSOBA.cntx_pop()
   ?};
   EDOK_ATR.cntx_pop();
   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,exec('_wozda','portal_walidacja').name)
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_nip_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Wniosek o zmianę NIP - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_nip','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_nip_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Wniosek o zmianę NIP - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_nip','portal_walidacja',_edokum,_osoba)


\zmiana_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formula obsługująca wniosek o zmianę NIP - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       numer NIP
         'NIP'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.NIP:='NIP';

      _tab.NIP:=exec('atr_get','portal_walidacja',_tabId.NIP);

      {? _tab.NIP=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Informacja o numerze NIP nie została wypełniona.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[exec('atr_name','portal_walidacja',_tabId.NIP)]
         ?}
      ?};

      {? _result.ok & ~(exec('nip_ok','#id',_tab.NIP,1))
      || _result.ok*=0;
         {? _walid || _txt[1]:='Niepoprawny numer NIP.'@ ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:=
                  '%1\"%2\"'@[_fldsNormalized.DESC,exec('atr_name','portal_walidacja',_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.NIP';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? gsub(_tab.NIP,' ','')<>''
         || OSOBA.NIP:=_tab.NIP
         ?};

         _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie numeru NIP.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_nip','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_pesel_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Zmiana numeru PESEL - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_pesel','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_pesel_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Zmiana numeru PESEL - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_pesel','portal_walidacja',_edokum,_osoba)


\zmiana_pesel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła obsługująca wniosek o zmianę numeru PESEL - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Numer PESEL
         'PESEL',
::       Data urodzenia
         'UR_DATA',
:        Płeć
         'PLEC'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.PESEL:='PESEL';
      _tabId.UR_DATA:='DataUrodzenia';
      _tabId.PLEC:='Plec';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.PESEL:=_getAtr(_tabId.PESEL);
      _tab.UR_DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.UR_DATA),'D');
      _tab.PLEC:=_getAtr(_tabId.PLEC);

      {? _tab.PESEL=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Informacja o numerze PESEL nie została wypełniona.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.PESEL)]
         ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.PESEL,OSOBA.PLEC';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? _result.ok & exec('nieobcy','osoba')
      || _zmUrData:=(_tab.UR_DATA<>_d0);
         _zmPlec:=(_tab.PLEC<>'' & _tab.PLEC<>OSOBA.PLEC);
         _kom:='System zwrócił błąd w trakcie walidacji wniosku.'@;
         {? ~(_zmUrData | _zmPlec)
         || _kom:=exec('pesel_ok','#id',_tab.PESEL,OSOBA.UR_DATA,OSOBA.PLEC)
         |? _zmUrData & ~_zmPlec
         || _kom:=exec('pesel_ok','#id',_tab.PESEL,_tab.UR_DATA,OSOBA.PLEC)
         |? ~_zmUrData & _zmPlec
         || _kom:=exec('pesel_ok','#id',_tab.PESEL,_tab.UR_DATA,_tab.PLEC)
         ?};
         {? +_kom>1
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Niepoprawny numer PESEL.'@;
               _txt[2]:=_kom
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? gsub(_tab.PESEL,' ','')<>''
         || OSOBA.PESEL:=_tab.PESEL
         ?};

         {? _tab.UR_DATA<>_d0
         || OSOBA.UR_DATA:=_tab.UR_DATA
         ?};

         {? gsub(_tab.PLEC,' ','')<>''
         || OSOBA.PLEC:=_tab.PLEC
         ?};

         _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie numeru PESEL.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'@[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_pesel','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_dowod_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Zmiana numeru dowodu osobistego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_dowod','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_dowod_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Zmiana numeru dowodu osobistego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_dowod','portal_walidacja',_edokum,_osoba)


\zmiana_dowod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła obsługująca wniosek o zmianę numeru dowodu osobistego - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=2;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Seria i numer dowodu
         'DOWOD',
::       Organ wydający dowód
         'ORG_DOW',
::       Data wydania
         'DWY_DOW',
::       Data ważności dowodu
         'DWA_DOW'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.DOWOD:='Numer';
      _tabId.ORG_DOW:='WydanyPrzez';
      _tabId.DWY_DOW:='DataDowodu';
      _tabId.DWA_DOW:='DataWaznosciDowodu';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.DOWOD:=_getAtr(_tabId.DOWOD);
      _tab.ORG_DOW:=_getAtr(_tabId.ORG_DOW);
      _tab.DWY_DOW:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DWY_DOW),'D');
      _tab.DWA_DOW:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DWA_DOW),'D');

      {? _tab.DOWOD=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Seria i numer dowodu nie zostały wypełnione.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.DOWOD)]
         ?}
      ?};

      {? _result.ok & _tab.DWY_DOW=_d0
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Informacja o dacie wydania dowodu nie została wypełniona.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.DWY_DOW)]
         ?}
      ?};

      {? _result.ok & _tab.ORG_DOW=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Informacja o organie wydającym dowód nie została wypełniona.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.ORG_DOW)]
         ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.DOWOD,OSOBA.ORG_DOW';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      _dow_ok:=exec('dowod_ok','#id',_tab.DOWOD);
      _msg:={? _dow_ok=-3 | _dow_ok=-2
            || 'Podany numer nie jest zgodny ze schematem właściwym dla dowodów osobistych nowego typu.'@
            |? _dow_ok=-1
            || _result.ok*=0;
               'Błąd wywołania funkcji. Kontrola nie została dokonana.'@
            |? _dow_ok<1
            || _result.ok*=0;
               'Błędny numer dowodu osobistego.'@
            || ''
            ?};
      {? _walid
      || {? _result.ok
         || {? _msg<>'' || exec('tab_kom_add','form_ob',_comm.INFO,_msg) ?}
         || _txt[1]:=_msg
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? gsub(_tab.DOWOD,' ','')<>''
         || OSOBA.DOWOD:=_tab.DOWOD
         ?};

         {? gsub(_tab.ORG_DOW,' ','')<>''
         || OSOBA.ORG_DOW:=_tab.ORG_DOW
         ?};

         {? _tab.DWY_DOW<>_d0
         || OSOBA.DWY_DOW:=_tab.DWY_DOW
         ?};

         {? _tab.DWA_DOW<>_d0
         || OSOBA.DWA_DOW:=_tab.DWA_DOW
         ?};

         _errMsg:='Nie powiodło się dodanie zapisu do systemu o zmianie numeru dowodu osobistego.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'@[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_dowod','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_paszport_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Zmiana numeru paszportu - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_paszport','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_paszport_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Zmiana numeru paszportu - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_paszport','portal_walidacja',_edokum,_osoba)


\zmiana_paszport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła obsługująca wniosek o zmianę numeru paszportu - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Seria i numer paszportu
         'PASZPORT',
::       Organ wydający paszport
         'ORG_PASZ',
::       Data wydania paszportu
         'DWY_PASZ',
::       Data ważności paszportu
         'DWA_PASZ',
::       Kraj
         'KRAJPASZ'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.PASZPORT:='NumerDokumentu';
      _tabId.ORG_PASZ:='OrganWydajacyOpis';
      _tabId.DWY_PASZ:='DataWydania';
      _tabId.DWA_PASZ:='DataWaznosci';
      _tabId.KRAJPASZ:='Kraj';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.PASZPORT:=_getAtr(_tabId.PASZPORT);
      _tab.ORG_PASZ:=_getAtr(_tabId.ORG_PASZ);
      _tab.DWY_PASZ:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DWY_PASZ),'D');
      _tab.DWA_PASZ:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DWA_PASZ),'D');
      _tab.KRAJPASZ:=exec('FindInSet','#table','KRAJE','KRAJE',_getAtr(_tabId.KRAJPASZ),,,,,null());

      {? _tab.PASZPORT=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Seria i numer paszportu nie zostały wypełnione.'@;
            _txt[2]:='Należy uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.PASZPORT)]
         ?}
      ?};

      {? _result.ok & _tab.KRAJPASZ=null()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Kraju o podanym kodzie ISO 3166 nie odnaleziono'@;
            _txt[2]:='lub';
            _txt[3]:='nie uzupełniono wymaganej informacji o kraju paszportu.'@
         ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.PASZPORT,OSOBA.ORG_PASZ';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? gsub(_tab.PASZPORT,' ','')<>''
         || OSOBA.PASZPORT:=_tab.PASZPORT
         ?};

         {? gsub(_tab.ORG_PASZ,' ','')<>''
         || OSOBA.ORG_PASZ:=_tab.ORG_PASZ
         ?};

         {? _tab.DWY_PASZ<>_d0
         || OSOBA.DWY_PASZ:=_tab.DWY_PASZ
         ?};

         {? _tab.DWA_PASZ<>_d0
         || OSOBA.DWA_PASZ:=_tab.DWA_PASZ
         ?};

         _kraj_curr:=OSOBA.KRAJPASZ;
         {? _kraj_curr<>_tab.KRAJPASZ
         || OSOBA.KRAJPASZ:=_tab.KRAJPASZ
         ?};

         _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie numeru paszportu.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'@[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_paszport','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\rachunek_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - Zmiana rachunku bankowego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('rachunek','portal_walidacja',_edokum,_osoba,_walid)


\rachunek_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - Zmiana rachunku bankowego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('rachunek','portal_walidacja',_edokum,_osoba)


\rachunek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła obsługująca wniosek o zmianę numeru paszportu - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref() ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || PKO.cntx_psh(); PKO.index('_PKO');

      _nrRach:=exec('atr_get','portal_walidacja','Konto');
      _nrRach:=gsub(_nrRach,' ','');

      _nrRub:=#(exec('atr_get','portal_walidacja','WyplataSposob')+3);
      R.cntx_psh();
      R.index('RUBKLKOD');
      R.prefix('B',_nrRub);
      _rub:={? R.first() || R.ref() || null() ?};
      R.cntx_pop();

      _rodz:=exec('atr_get','portal_walidacja','RodzajSposobuWypłaty');
      _kwota:=exec('atr_get','portal_walidacja','Wartosc');

      _kwota:=exec('str2real','#convert',_kwota);
::    jeżeli w polu _rodz wybrano wartość "Procent", to ustawiamy procent
      {? _rodz='Procent'
      || _kwota:=_kwota;
         _kwota/=100
      ?};

      {? _rub
      || _nrBanku:=exec('num_kier','rachunki',_nrRach);
         _bank:=exec('FindInSet','#table','B','BANKID',_nrBanku,,,1);

         {? _nrRach<>''
         || {? _bank<>null() & _rub<>null()
            || exec('RB','object');
               exec('czytaj','#stalesys',,KST_PAR,'NAROD');
               PKO.prefix(_osoba,_nrRub);
               {? PKO.first()
               || _old_nr:=PKO.N;
                  PKO.N:=_nrRach;
                  PKO.BA:=_bank;
                  PKO.K:=_kwota;
                  {? PKO.put(1)
                  || exec('update_rbk','banki','P',PKO,_old_nr);
                     _result.ok+=1
                  ?}
               || PKO.blank(1);
                  PKO.OSOBA:=_osoba;
                  PKO.R:=_rub;
                  PKO.N:=_nrRach;
                  PKO.BA:=_bank;
                  PKO.UZ:='N';
                  PKO.K:=_kwota;
                  PKO.prefix();
                  {? PKO.add(1)
                  || exec('update_rbk','banki','D',PKO,PKO.N);
                     _result.ok+=1
                  ?}
               ?}
            ?}
         ?}
      || exec('tab_kom_add','form_ob',_typ.ERROR,'Błąd konfiguracji wniosków - brak rubryki o numerze %1'@[$_nrRub])
      ?};
      PKO.cntx_pop()
   ?};
   EDOK_ATR.cntx_pop();

   {? exec('edokumZal_exist','form_ob',_edokum)
   || {? exec('edokumZal_copy','form_ob',_edokum,_osoba,exec('_rachunek','portal_walidacja').name)
      || _result.ok*=1
      || _result.ok:=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};

   {? _result.ok=0 || undo() ?};
   {? _mydo || end() ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_obywatelstwa_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Zmiana obywatelstwa - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_obywatelstwa','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_obywatelstwa_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Zmiana obywatelstwa - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_obywatelstwa','portal_walidacja',_edokum,_osoba)


\zmiana_obywatelstwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła obsługująca wniosek o zmianę obywatelstwa - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Obywatelstwo
         'OBYWATEL',
::       Zmiana z obywatelstwa PL na inne
         'ZMIANA_PL'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.OBYWATEL:='Obywatelstwo';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _kod:=_getAtr(_tabId.OBYWATEL);
      _tab.OBYWATEL:=
         exec('FindInSet','#table','SLO_KOD','KOD',_kod,
            exec('FindInSet','#table','SLO_TYP','SYMBOL','OBYWATEL','OBYWATEL',,1,,null),
            "@.SLO_KOD.NAZWA",1,_kod,''
         );
      _tab.ZMIANA_PL:=0;

      {? _tab.OBYWATEL=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Informacja o obywatelstwie nie została wypełniona lub też brak kraju o podanym kodzie ISO 3166.'@;
            _txt[2]:='Należy prawidłowo uzupełnić wymagane pole \"%1\".'@[_getName(_tabId.OBYWATEL)]
         ?}
      ?};

      {? _result.ok
      || _pl:='polskie';
         _prevOb:=OSOBA.OBYWATEL;
         _newOb:=_tab.OBYWATEL;
         {? _prevOb=_pl & _newOb<>_prevOb
         || {? OSOBA.PASZPORT<>''
            || _tab.ZMIANA_PL:=1
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='W systemie brak wymaganej informacji o paszporcie.'@;
                  _txt[2]:='Aby prawidłowo złożyć wniosek należy w pierwszej kolejności wypełnić wniosek'@;
                  _txt[3]:='\"Zmiana numeru paszportu\"'@
               ?}
            ?}
         ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'@[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.OBYWATEL';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? _tab.ZMIANA_PL
         || OSOBA.OBCY:='T'
         ?};

         {? gsub(_tab.OBYWATEL,' ','')<>''
         || OSOBA.OBYWATEL:=_tab.OBYWATEL
         ?};

         _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie obywatelstwa.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'@[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_obywatelstwa','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_us_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Zmiana Urzędu Skarbowego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_us','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_us_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Zmiana Urzędu Skarbowego - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_us','portal_walidacja',_edokum,_osoba)


\zmiana_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wniosek o zmianę Urzędu Skarbowego - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Od daty
         'OD',
::       Urząd skarbowy
         'US'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.OD:='ZmianaOd';
      _tabId.US:='UrzadSkarbowyNazwa';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.OD:=exec('to_ti_dt','form_ob',_getAtr(_tabId.OD),'D');
      _tab.US:=exec('FindInSet','#table','US','URZSKNAZ',_getAtr(_tabId.US),,,1,,null);

      US.cntx_psh();
      OS_US.cntx_psh();

      {? _tab.OD=_d0
      || _result.ok*=0;
         {? _walid || _txt[1]:='Nieprawidłowo wskazana data zmiany urzędu skarbowego.'@ ?}
      ?};

      {? _tab.US=null()
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Nie znaleziono podanego urzędu skarbowego w systemie.'@;
            _txt[2]:='Skontaktuj się z działem kadr w celu weryfikacji wprowadzonych danych.'@
         ?}
      ?};

      {? _result.ok
      || OS_US.index('OD');
         OS_US.prefix(_osoba);
         _infoKadr:='Skontaktuj się z działem kadr w celu weryfikacji danych.'@;
         {? ~OS_US.find_le(_tab.OD)
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Nie znaleziono poprzedniego zapisu dotyczącego przypisanego urzędu skarbowego.'@;
               _txt[2]:='Urzędu nie zmieniono.'@;
               _txt[3]:=_infoKadr
            ?}
         ?};
         {? _result.ok
         || OS_US.prefix(_osoba);
            {? OS_US.find_le(_tab.OD) & OS_US.US=_tab.US
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Wskazany we wniosku urząd jest aktualnie wybranym urzędem w systemie.'@;
                  _txt[2]:='Urzędu nie zmieniono.'@;
                  _txt[3]:=_infoKadr
               ?}
            ?}
         ?};
         {? _result.ok
         || OS_US.prefix(_osoba);
            {? OS_US.find_ge(_tab.OD)
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='W systemie istnieje już bardziej aktualny zapis dotyczący zmiany urzędu skarbowego'@;
                  _txt[2]:='w stosunku do daty wskazanej we wniosku.'@;
                  _txt[3]:=_infoKadr
               ?}
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie urzędu skarbowego.'@;
         OS_US.prefix(_osoba,_tab.OD);
         {? OS_US.first()
         || OS_US.US:=_tab.US;
            {? ~OS_US.put(1)
            || _result.ok*=0;
               _result.errMsg:=_errMsg
            ?}
         || OS_US.prefix(_osoba);
            {? OS_US.find_le(_tab.OD)
            || _osAdres:=OS_US.OS_ADRES;
               OS_US.prefix(); OS_US.blank();
               OS_US.OSOBA:=_osoba;
               OS_US.OD:=_tab.OD;
               OS_US.US:=_tab.US;
               OS_US.OS_ADRES:=_osAdres;
               {? ~OS_US.add(1)
               || _result.ok*=0;
                  _result.errMsg:=_errMsg
               ?}
            || _result.ok*=0;
               _result.errMsg:='Nie odnaleziono poprzedniego zapisu. Zmiana urzędu niemożliwa.'@
            ?}
         ?}
      ?};
      OS_US.cntx_pop();
      US.cntx_pop();

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_us','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zmiana_wdo_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Zmiana wybranych danych osobowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('zmiana_wdo','portal_walidacja',_edokum,_osoba,_walid)


\zmiana_wdo_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Zmiana wybranych danych osobowych - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('zmiana_wdo','portal_walidacja',_edokum,_osoba)


\zmiana_wdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła obsługująca wniosek o zmianę wybranych danych osobowych - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Nazwisko
         'NAZWISKO',
::       Imię
         'PIERWSZE',
::       Drugie imię
         'DRUGIE',
::       Nazwisko rodowe
         'RODOWE'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.NAZWISKO:='Nazwisko';
      _tabId.PIERWSZE:='Imie';
      _tabId.DRUGIE:='Imie2';
      _tabId.RODOWE:='NazwiskoPan';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.NAZWISKO:=_getAtr(_tabId.NAZWISKO);
      _tab.PIERWSZE:=_getAtr(_tabId.PIERWSZE);
      _tab.DRUGIE:=_getAtr(_tabId.DRUGIE);
      _tab.RODOWE:=_getAtr(_tabId.RODOWE);

      {? _tab.NAZWISKO='' & _tab.PIERWSZE='' & _tab.DRUGIE='' & _tab.RODOWE=''
      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Przesłany wniosek jest pusty.'@;
            _txt[2]:='Należy wypełnić pola danych osobowych, które powinny ulec zmianie.'@
         ?}
      ?};

      {? _result.ok
      || _fldsNormalized:=exec('fldsNormalized','portal_walidacja',_tab);
         {? ~_fldsNormalized.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='%1\"%2\"'[_fldsNormalized.DESC,_getName(_tabId[_fldsNormalized.FLD])]
            ?}
         ?}
      ?};

      {? _result.ok
      || _flds:='OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.DRUGIE,OSOBA.RODOWE';
         _fldsLengthOk:=exec('fldsLengthOk','portal_walidacja',_tab,_flds);
         {? ~_fldsLengthOk.RES
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Za długa nazwa w polu \"%1\", dopuszczalna liczba to %2 %3.'@
                  [_fldsLengthOk.NAME,$_fldsLengthOk.LENGTH,_fldsLengthOk.CHRS]
            ?}
         ?}
      ?};

      {? ~_walid & _result.ok
      || _id:=EDOKUM.ID;

         {? gsub(_tab.NAZWISKO,' ','')<>''
         || OSOBA.NAZWISKO:=_tab.NAZWISKO
         ?};

         {? gsub(_tab.PIERWSZE,' ','')<>''
         || OSOBA.PIERWSZE:=_tab.PIERWSZE
         ?};

         {? gsub(_tab.DRUGIE,' ','')<>''
         || OSOBA.DRUGIE:=_tab.DRUGIE
         ?};

         {? gsub(_tab.RODOWE,' ','')<>''
         || OSOBA.RODOWE:=_tab.RODOWE
         ?};

         _errMsg:='Nie powiodło się dodanie do systemu zapisu o zmianie danych osobowych.'@;
         {? OSOBA.put(1)
         || _desc:='Na podstawie wniosku o zmianę danych osobowych o nr: %1'@[_id];
            _result.ok*=exec('add_giodo','form_ob',_osoba,_desc,,'M');
            {? _result.ok
            || _result.errMsg:=_errMsg
            ?}
         || _result.ok*=0;
            _result.errMsg:=_errMsg
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zmiana_wdo','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\wzz_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na walidację - Zmiana zatrudnienia - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('wzz','portal_walidacja',_edokum,_osoba,_walid)


\wzz_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła na akceptację - Zmiana zatrudnienia - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('wzz','portal_walidacja',_edokum,_osoba)


\wzz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Formuła obsługująca wniosek o zmianę zatrudnienia - Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_rodzaj:='';

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('JCQ_decl','#message');
{? var_pres('KOMM')<0 || KOMM:=obj_new(@.CLASS.JCQ)?};
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

:: powołanie obiektów
   exec('initObj','form_ob');
   exec('load_par','#parametr');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum)
   || _p_uidref  :=exec('atr_get','portal_walidacja','PracownikIdERP');
::    aktualne warunki
      _akt:=obj_new('DATA','MIEJSCE','WYDZIAL','ST','POZWORG','CP','WYL','WYM','S1','S2','S3');
      _data_s        :=exec('atr_get','portal_walidacja','WarunkiUmowyNaDzien');
      _akt.DATA      :=exec('to_ti_dt','form_ob',_data_s,'D');
      _akt.WYDZIAL   :=exec('atr_get','portal_walidacja','Akt_DzialNazwa');
      _akt.ST        :=exec('atr_get','portal_walidacja','Akt_StanowiskoNazwa');
      _akt.POZWORG   :=exec('atr_get','portal_walidacja','Akt_PozycjaWOrg');
      _akt.MIEJSCE   :=exec('atr_get','portal_walidacja','Akt_MiejsceWykPracyNazwa');
      _akt.CP        :=exec('atr_get','portal_walidacja','Akt_CharakterPracy');
      _akt.S1        :=exec('atr_get','portal_walidacja','Akt_Wynagrodzenie1');
      _akt.S2        :=exec('atr_get','portal_walidacja','Akt_Wynagrodzenie2');
      _akt.S3        :=exec('atr_get','portal_walidacja','Akt_Wynagrodzenie3');

::    nowe warunki zatrudnienia po zmianie
      _new:=obj_new('MIEJSCE','OD','DO','WYDZIAL','ST','POZWORG','CP','WYL','WYM','S1','S2','S3');
      _data_s        :=exec('atr_get','portal_walidacja','ZmianaOd');
      _new.OD        :=exec('to_ti_dt','form_ob',_data_s,'D');
      _LpDzial       :=exec('atr_get','portal_walidacja','LpDzial');
      _new.WYDZIAL   :={? +_LpDzial || _LpDzial || exec('atr_get','portal_walidacja','DzialNazwa') ?};
      _new.ST        :=exec('atr_get','portal_walidacja','StanowiskoNazwa');
      _new.POZWORG   :=exec('atr_get','portal_walidacja','PozycjaWOrg');
      _new.MIEJSCE   :=exec('atr_get','portal_walidacja','MiejsceWykPracyNazwa');
      _new.WYL       :=exec('atr_get','portal_walidacja','EtatL');
      _new.WYM       :=exec('atr_get','portal_walidacja','EtatM');
      _new.CP        :=exec('atr_get','portal_walidacja','CharakterPracy');
      _new.S1        :=exec('atr_get','portal_walidacja','Wynagrodzenie1');
      _new.S2        :=exec('atr_get','portal_walidacja','Wynagrodzenie2');
      _new.S3        :=exec('atr_get','portal_walidacja','Wynagrodzenie3');
      _benefity      :=exec('atr_get','portal_walidacja','Benefity');
      _tekst         :=exec('atr_get','portal_walidacja','InformacjeDodatkowe','WAR_W');
      {? +_benefity
      || _tekst+='\nInne benefity:\n%1'[_benefity]
      ?};

::======================================================================================================================
:: Sprawdzenie dpoprawnosci danych jako takich
::======================================================================================================================
      {? _walid
      || {? _new.OD=date(0,0,0)
         || exec('tab_kom_add','form_ob',1,'Data zmiany warunków nie może być pusta.')
         ?};
         {? +_new.WYL | +_new.WYM
         || {? +_new.WYL & #_new.WYL=0
            || exec('tab_kom_add','form_ob',1,'Licznik wymiaru zatrudnienia musi być większy od 0.')
            ?};
            {? +_new.WYM & #_new.WYM=0
            || exec('tab_kom_add','form_ob',1,'Mianownik wymiaru zatrudnienia musi być większy od 0.')
            ?}
         ?}
      ?};

      P.cntx_psh(); H_UM.cntx_psh(); H.cntx_psh(); STN.cntx_psh(); CP.cntx_psh(); UD_SKL.cntx_psh(); UD_TYP.cntx_psh();
      KT.cntx_psh(); POZWORG.cntx_psh();
      UD_TYP.clear(); SLO_OSOB.clear(); STN.clear(); CP.clear(); POZWORG.clear(); H_UM.clear(); P.clear();
::======================================================================================================================
:: Wyszukanie pracownika i umowy
::======================================================================================================================
      _p_ref:=_os_ref:=null();
      {? P.seek(_p_uidref)
      || _p_ref:=P.ref();
         _os_ref:=P.OSOBA;
         _h_um:=null();
         _P180:=-PAR_SKID.get(180)='t';
         exec('otworz_h_um','pracownik',{? _P180 || 'h_u_' || 'h_um' ?});
         H_UM.index('OD');
         H_UM.prefix(_p_ref);
         H.use(exec('h_name','pracownik'));
         H.index('_HISTDAT');
         H.prefix(_p_ref);
         {? H.find_le(_akt.DATA)
         ||  _result.ok:=1;
             _h_um:=H.UMOWA;
             H.UMOWA();
            _pmp:=H.PMP;
            _new.DO:=H.DO;

            _akt_skl:=H.WYDZIAL;
            _akt_stn:=H.ST;
            _akt_pozworg:=H.POZWORG;
            _akt_cp:=H.CP;

            {? H.CZYWAL='T' | H.CZYWAL2='T' | H.CZYWAL3='T'
            || _result.ok:=0;
               _result.errMsg:='Umowa w walucie obcej. Przeszeregowanie niemożliwe.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? H.PAT<>'N'
            || _result.ok:=0;
               _result.errMsg:='Umowa z przychodem od praw autorskich. Przeszeregowanie niemożliwe.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? H.MAC='T'
            || _result.ok:=0;
               _result.errMsg:='Umowa podczas trwania urlopu mac./rodz.. Przeszeregowanie niemożliwe.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? H.SP='T'
            || _result.ok:=0;
               _result.errMsg:='Umowa o pracę w szczególnych warunkach lub charakterze. Przeszeregowanie niemożliwe.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?};
            {? ~(H.DO=#0 | H.DO>=_new.OD)
            || _result.ok:=0;
               _result.errMsg:='Data zmiany warunków przypada poza okresem obowiązywania bieżącej umowy.';
               {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
            ?}

         || _result.ok:=0;
            _result.errMsg:='Nie udało się ustalić umowy do zmiany dla pracownika.';
            {? _walid || exec('tab_kom_add', 'form_ob', 1, _result.errMsg) ?}
         ?};

::======================================================================================================================
:: Umowa i przebieg
::======================================================================================================================
         {? _result.ok
         || VAR.P:=null();
            VAR.H:=null();
            {? var_pres('MAC',H)>0 || _RWY:="H.RWY" || _RWY:="H.WY" ?};
            _firma:=exec('firma','#firma',exec('firma_symbol','#firma'));
            _ud_typ:=exec('FindInSet','#table','UD_TYP','SYMBOL','PODZORG',,,1,,null());
            {? +_LpDzial
            || _new_skl:=exec('FindInSet','#table','UD_SKL','SYMBOL',_new.WYDZIAL,_ud_typ,,1,_new.WYDZIAL,null())
            || _new_skl:=exec('FindInSet','#table','UD_SKL','OPIS',_new.WYDZIAL,_ud_typ,,1,,null())
            ?};
            _new_stn:=exec('FindInSet','#table','STN','STANONAZ',_new.ST,,,1,,null());
            _new_pozworg:=exec('FindInSet','#table','POZWORG','KOD',_new.POZWORG,_firma,,1,,null());
            _new_cp:=exec('FindInSet','#table','CP','CHARPRAW',_new.CP,,,1,,null());

            _ud_skl:={? _new_skl || _new_skl || _akt_skl ?};
            _stn:={? _new_stn || _new_stn || _akt_stn ?};
            _pozworg:={? _new_pozworg || _new_pozworg || _akt_pozworg ?};
            _cp:={? _new_cp || _new_cp || _akt_cp ?};

            _par313:=exec('get_par','#parametr',313,2)='T';
            STO.cntx_psh();
            STO.index('UNIQUE');
            STO.prefix();
            {? _ud_skl & _stn & ~STO.find_key(_ud_skl,_stn)
            || STO.UD_SKL:=_ud_skl;
               STO.STN:=_stn;
               STO.ST:=STO.STN().ST;
               {? STO.add(1) & _par313 & _pozworg
               || PSTO.cntx_psh();
                  PSTO.index('PSTO');
                  PSTO.blank(1);
                  PSTO.POZWORG:=_pozworg;
                  PSTO.STO:=STO.ref();
                  PSTO.add(1);
                  PSTO.cntx_pop()
               ?}
            ?};
            STO.cntx_pop();

::       wczytujemy to co jest obecnie w H do bufora
            _buffer:=exec('obj_new','#buf','H');
            _buffer.get();
::       i ustawiamy to co się zmieniło
            H.index('_HISTDAT');
            H.prefix(P.ref);
            _add:=~H.find_key(_new.OD,'Z');
            H.blank(1);
            _buffer.set();
            H.OD:=_new.OD;
            H.DO:=_new.DO;
            {? _ud_skl        || H.WYDZIAL:=_ud_skl ?};
            {? _stn           || H.ST:=_stn ?};
            {? _pozworg       || H.POZWORG:=_pozworg ?};
            {? _cp            || H.CP:=_cp ?};
            {? +_new.MIEJSCE  || H.MIEJSCE:=_new.MIEJSCE ?};
            {? #_new.WYM>0 & #_new.WYL>0
            || H.WYM:=#_new.WYM;
               H.WYL:=#_new.WYL;
               H.WY:={? H.WYM || H.WYL/H.WYM$3 || 0 ?};
               H.RWY:=H.WY;
               H.RWYL:=H.WYL;
               H.RWYM:=H.WYM
            ?};
            _s1:=#gsub(_new.S1,',','.');
            _s2:=#gsub(_new.S2,',','.');
            _s3:=#gsub(_new.S3,',','.');
            {? _s1>0 || H.S1:=_s1 ?};
            {? _s2>0 || H.S2:=_s2 ?};
            {? _s3>0 || H.S3:=_s3 ?};

::       sprawdzamy czy przeszeregowanie nastąpiło w ramach umowy z określonymi datami zakończenia (nawet dla typu C)
            H.cntx_psh();
            {? H_UM.RU().K='A' | H_UM.RU().K='B' | H_UM.RU().K='D' | (H_UM.RU().K='C' & H_UM.OD<>#0 & H_UM.DO<>#0)
            || H.index('HISTUM');
               H.prefix(_h_um);
               {? _new.OD=H_UM.OD & _new.DO>H_UM.OD & _new.DO<H_UM.DO & H.first()
               || H.OD:=_new.DO+1;
                  _result.ok*=H.put(1)
               |? _new.DO=H_UM.DO & _new.OD>H_UM.OD & _new.OD<H_UM.DO & H.last()
               || H.DO:=_new.OD-1;
                  _result.ok*=H.put(1)
               ?}
            ?};
            H.cntx_pop();

            exec('h_wyx_ae','pracownik');
            _sprh:=
                  {? H.RU().K<>'C' & H.RU().K<>'E'
                  || __CHK.record(H,1,'OD','DO','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
                  || __CHK.record(H,1,'OD','WYDZIAL','ST','KZ','CP','KW_MSC','S1')
                  ?};
            {? ~H.S1 || H.CZYWAL:='N' ?};
            {? ~H.S2 || H.S2T:='K'; H.S2P:=null(); H.CZYWAL2:='N' ?};
            {? ~H.S3 || H.S3T:='K'; H.S3P:=null(); H.CZYWAL3:='N' ?};
            H.WAL:=H.ZWAL:=null();

            _od:=date(0,0,0);
            _do:=date(0,0,0);
            H.cntx_psh();
            H.index('HISTUM');
            H.prefix(_h_um);
            _last_ref:=null();
            {? H.first() || _od:=H.OD ?};
            {? H.last() || _do:=H.DO; _last_ref:=H.ref() ?};
            H.cntx_pop();
            {? _do<>date(0,0,0) & H.OD>_do || _do:=H.DO ?};
            {? H.DO<>date(0,0,0) & H.DO<_od || _od:=H.OD ?};
            {? _od>H_UM.OD | _do<H_UM.DO
            || _spr:='Okres umowy o pracę nie pokrywa sie z okresem od początku pierwszego do końca ostatniego ';
               _spr+='przebiegu zatrudnienia.'
            ?};
            {? ~(H.WY>0 & H.WY<=1)
            || _result.ok:=0;
               _result.errMsg:='Wymiar zatrudnienia musi być określony.';
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? var_pres('_spr')=type_of('')  & _spr<>''
            || _result.ok:=0;
               _result.errMsg:=_spr;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};

            _spr:=
               {? H_UM.DO<>date(0,0,0) & (H.DO=date(0,0,0) | H.DO>H_UM.DO)
               || 'Data "Do dnia" nie może być późniejsza od daty zakończenia umowy o pracę ('+$H_UM.DO+').'
               |? H_UM.DO=date(0,0,0) & H.DO<>date(0,0,0) & H.ref()=_last_ref
               || 'Data "Do dnia" musi być zgodna z datą zakończenia umowy o pracę ('+$H_UM.DO+').'
               |? H.OD<H_UM.OD
               || 'Data "Od dnia" nie może być wcześniejsza od daty rozpoczęcia umowy o pracę ('+$H_UM.OD+').'
               || ''
               ?};
            {? var_pres('_spr')=type_of('')  & _spr<>''
            || _result.ok:=0;
               _result.errMsg:=_spr;
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};
            {? var_pres('_sprh')=type_of('')  & _sprh<>''
            || _result.ok:=0;
               _result.errMsg:='Brak wymaganych informacji. Przebieg pracy zawodowej "'+MS.name('H',_sprh)+'".';
               {? _walid
               || exec('tab_kom_add', 'form_ob', 1, _result.errMsg)
               ?}
            ?};

            exec('h','overlap');

            {? _result.ok
            || _result.ok*={? _add || H.add(1) || H.put(1) ?};
               {? _result.ok
               || H.memo_set(_tekst,'INNE');
                  H.memo_put(,'INNE');
                  H.UMOWA:=H_UM.ref();
                  _result.ok*=H.put(1);
                  {? _result.ok
                  || EDOKUM.REFLISTA:=$H_UM.ref();
                     EDOKUM.REFPRAC:=$H.ref()
                  ?};

                  exec('norm_h_oddo','pracownik');
                  exec('pracownik_aktualizuj','pracownik');
                  exec('aktualizuj','kart_url',_p_ref)
               ?}
            ?}
         ?}
      ?};
      POZWORG.cntx_pop(); KT.cntx_pop(); UD_TYP.cntx_pop(); UD_SKL.cntx_pop(); CP.cntx_pop(); STN.cntx_pop();
      H.cntx_pop(); H_UM.cntx_pop(); P.cntx_pop();

      {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
      || {? exec('edokumZal_copy','portal_walidacja',_edokum,_os_ref,exec('_wzz','portal_walidacja').name)
         || _result.ok*=1
         || _result.ok:=0;
            _result.errMsg:=_err.copy_zal
         ?}
      ?};
      _savedKom:=exec('tab_kom_save','form_ob',_walid);
      {? _result.ok=0 | _walid || undo() ?};
      {? _mydo || end() ?};
      exec('tab_kom_restore','form_ob',_savedKom,_walid)
   ?};
   EDOK_ATR.cntx_pop()
?};
_ref_h_um:=EDOKUM.REFLISTA;
_ref_h:=EDOKUM.REFPRAC;
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
{? _result.ok & ~_walid & +|_ref_h_um
|| EDOKUM.REFLISTA:=_ref_h_um;
   EDOKUM.REFPRAC:=_ref_h;
   EDOKUM.put()
?};
_result


\ppk_dowu25_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na walidację - Deklaracja opłacania wpłat uczestnika PPK art. 25 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'DOWU25')


\ppk_dowu25_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.14]
:: OPIS: Formuła na akceptację - Deklaracja opłacania wpłat uczestnika PPK art. 25 - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
exec('ppk','portal_walidacja',_edokum,_osoba,,'DOWU25')


\ppk_opif_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Oświadczenie o podpisanych umowach w IF - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'DWT')


\ppk_opif_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Oświadczenie o podpisanych umowach w IF - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'DWT')


\ppk_wodw_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o dokonywanie wpłat PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'WODW')


\ppk_wodw_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o dokonywanie wpłat PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'WODW')


\ppk_drwd_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o rezygnację z wpłaty dodatkowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'DRWD')


\ppk_drwd_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o rezygnację z wpłaty dodatkowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'DRWD')


\ppk_wou_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o udział w programie PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'WOU')


\ppk_wou_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o udział w programie PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'WOU')


\ppk_dwwd_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o zmianę % wpłaty dodatkowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'DWWD')


\ppk_dwwd_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o zmianę % wpłaty dodatkowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'DWWD')


\ppk_dwwp_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na walidację - Wniosek o zmianę % wpłaty podstawowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('ppk','portal_walidacja',_edokum,_osoba,_walid,'DWWP')


\ppk_dwwp_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła na akceptację - Wniosek o zmianę % wpłaty podstawowej PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('ppk','portal_walidacja',_edokum,_osoba,,'DWWP')


\ppk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Formuła obsługująca wnioski dotyczące PPK - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja   - walidacja
::       _d - [STRING]    - symbol wniosku
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};
_symbol:={? var_pres('_d')=type_of('')   || _d || return(_result) ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=3;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Poszczególne pola używane/nieużywane przy odpowiednich wnioskach
::       Data rozpoczęcia (data złożenia)
         'DATA',
::       Data zmiany
         'DATA_ZM',
::       Procent wpłaty podstawowej / dodatkowej
         'PROCENT',
::       Nazwa IF
         'NAZWA',
::       Numer rachunku w IF
         'NR_RACH',
::       pole techniczne - ref tabeli ADRES
         'REF'
      );
      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.DATA:='ZmianaOd';
      _tabId.PROCENT:=
         {? _symbol='DWWP'
         || 'ProcentWplatyPodst'
         |? _symbol='DWWD'
         || 'ProcentWplatyDod'
         || ''
         ?};
      _tabId.NAZWA:='Nazwa';
      _tabId.NR_RACH:='NrRachunkuUczestnika';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      {? _symbol='WOU' | _symbol='WODW' | _symbol='DOWU25'
      || _tab.DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DATA),'D');
         _tab.DATA_ZM:=_tab.DATA
      |? _symbol='DWWP' | _symbol='DWWD' | _symbol='DRWD'
      || _tab.DATA:=exec('to_ti_dt','form_ob',_getAtr(_tabId.DATA),'D');
         _tab.DATA_ZM:=exec('data_zm_dwwd','form_ob',_edokum,_tab.DATA);
         _procent:={? _symbol='DWWP' | _symbol='DWWD' || _getAtr(_tabId.PROCENT) || '0' ?};
         _tab.PROCENT:=#gsub(_procent,',','.')
      |? _symbol='DWT'
      || _tab.DATA:=exec('wn_date','form_ob',EDOKUM.uidref());
         _tab.NAZWA:=_getAtr(_tabId.NAZWA);
         _tab.NR_RACH:=gsub(_getAtr(_tabId.NR_RACH),' ','');
         _tab.REF:=
            exec('FindInSet','#table','ADRES','SYMBOL',_tab.NAZWA,
               exec('FindInSet','#table','SLO_TYP','SYMBOL','PPK_IF','PPK_IF',,1,,null)
               ,,1,,null
            )
      ?};
      _rodzaj:={? _symbol='WOU' || 'O' || 'U' ?};
      _ppk_wrd:=exec('szukaj','ppk_wrd',_rodzaj,_symbol);
      _akcept:='';

      {? exec('is_ppk','form_ob',1)
      || {? _ppk_wrd=null()
         || _result.ok*=0;
            {? _walid || _txt[1]:='Brak możliwości złożenia wniosku - nie znaleziono definicji wniosku w systemie.'@ ?}
         ?};

::       jeżeli jest to akceptacja i zapamiętany jest wnisek kolidujący, to wycofujemy go z ewidencji
         _par:=params_get();
         _pkw_wnu:={? var_pres('_par')>100 & var_pres('pkw_wnu',_par)>0 || _par.pkw_wnu || null() ?};
         {? ~_walid & _pkw_wnu
         || PPK_WNU.cntx_psh();
            PPK_WNU.prefix();
            {? PPK_WNU.seek(_pkw_wnu)
            || PPK_WNU.WER_WYM:='N';
               PPK_WNU.PWP_STAT:='N';
               {? ~PPK_WNU.put()
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Nie udało się wycofać z ewidencji wniosku z dnia: %1 r.'@[PPK_WNU.DATA$4];
                     _txt[2]:='Akceptacja bieżącego wniosku została przerwana.'@
                  ?}
               ?}
            ?};
            PPK_WNU.cntx_pop()
         ?};

         {? _result.ok
         || PPK_UMO.cntx_psh();
            _ppk_umo:=exec('init','ppk_umo',_tab.DATA);
            PPK_UMO.cntx_pop();
            {? _ppk_umo=null()
            || _result.ok*=0;
               {? _walid
               || _txt[1]:='Nie udało się ustalić umowy o zarządzanie.'@
               ?}
            ?}
         ?};

         {? _result.ok
         || {? ~exec('aktywny','ppk_ucz',_osoba,_tab.DATA)
            || _result.ok*=0;
               {? _walid || _txt[1]:='Osoba składająca wniosek nie jest aktywnym pracownikiem/zleceniobiorcą.'@ ?}
            ?}
         ?};

         {? _result.ok
         || _ppk_ucz:=exec('uczestn','ppk_ucz',_ppk_umo,_osoba);
            {? _ppk_ucz=null()
            || {? (_symbol='DWWP' | _symbol='DWWD' | _symbol='DRWD' | _symbol='DWT' | _symbol='DOWU25')
               || _result.ok*=0;
                  {? _walid || _txt[1]:='Osoba składająca wniosek nie jest uczestnikiem PPK.'@ ?}
               |? _symbol='WODW'
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Osoba składająca wniosek nie była w przeszłości uczestnikiem PPK.'@;
                     _txt[2]:='Wniosek o dokonywanie wpłat dostępny tylko dla osób będących już'@;
                     _txt[3]:='uczestnikami PPK w przeszłości.'@
                  ?}
               ?}
            |? _ppk_ucz<>null() & _symbol='WOU'
            || _result.ok*=0;
               {? _walid || _txt[1]:='Osoba składająca wniosek jest już uczestnikiem PPK.'@ ?}
            ?}
         ?};

::       obsługa daty zmiany dla poszczególnych typów wniosków

         {? _result.ok & _tab.DATA=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Data złożenia wniosku nie może być pusta.'@ ?}
         ?};

         {? _result.ok & _tab.DATA<date()
         || _result.ok*=0;
            {? _walid || _txt[1]:='Data złożenia wniosku nie może być wcześniejsza od daty bieżącej.'@ ?}
         ?};

         {? _result.ok & _symbol<>'DWT'
         || {? _tab.DATA_ZM=_d0
            || _result.ok*=0;
               {? _walid || _txt[1]:='Data zmiany wniosku nie może być pusta.'@ ?}
            ?};
            {? _result.ok & _tab.DATA_ZM<_tab.DATA
            || _result.ok*=0;
               {? _walid || _txt[1]:='Data zmiany wniosku nie może być wcześniejsza od daty złożenia.'@ ?}
            ?}
         ?};

::       walidacja wniosku
         {? _result.ok
         || {? _symbol='WOU'
            || _dt:=_tab.DATA;
               exec('czytaj','#stalesys',_dt,KST_PPK,'LAT_WYM','LAT_MAX');
               _data_min:=(date((_dt~1)-KST_PPK.LAT_WYM,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?})-1);
               _data_max:=(date((_dt~1)-KST_PPK.LAT_MAX,_dt~2,{? _dt~2=2 & _dt~3=29 || 0 || _dt~3 ?}));
               {? ~(OSOBA.UR_DATA>_data_max & OSOBA.UR_DATA<_data_min)
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Wniosek może złożyć osoba, która ukończyła %1. rok życia'@[$KST_PPK.LAT_WYM];
                     _txt[2]:='i nie ukończyła %1. roku życia.'@[$KST_PPK.LAT_MAX]
                  ?}
               ?}
            |? _symbol='DWWP'
            || exec('czytaj','#stalesys',_tab.DATA,KST_PPK,'SK_MINPU','SK_MAXPU');
               {? _tab.PROCENT<KST_PPK.SK_MINPU | _tab.PROCENT>KST_PPK.SK_MAXPU
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Procent wpłaty podstawowej musi zawierać się w zakresie od %1 do %2.'@
                       [$KST_PPK.SK_MINPU,$KST_PPK.SK_MAXPU]
                  ?}
               ?}
            |? _symbol='DWWD'
            || exec('czytaj','#stalesys',_tab.DATA,KST_PPK,'SK_MAXDU');
               {? _result.ok & (_tab.PROCENT>KST_PPK.SK_MAXDU | _tab.PROCENT<=0)
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Procent wpłaty dodatkowej musi być większy od 0 oraz mniejszy lub równy %1.'@
                        [$KST_PPK.SK_MAXDU]
                  ?}
               ?}
            |? _symbol='DRWD'
            || {? _tab.PROCENT<>0
               || _result.ok*=0;
                  {? _walid || _txt[1]:='Procent wpłaty dodatkowej musi być równy 0.'@ ?}
               ?}
            |? _symbol='DWT'
            || ADRES.cntx_psh(); ADRES.index('ADRES'); ADRES.prefix();
               {? ~ADRES.seek(_tab.REF,)
               || _result.ok*=0;
                  {? _walid || _txt[1]:='Nie udało się znaleźć instytucji finansowej o nazwie: %1'@[_tab.NAZWA] ?}
               ?};
               ADRES.cntx_pop();
::             sprawdzenie czy uczestnik nie ma już wcześniej dodanej instytucji
               {? _result.ok & _walid
               || PPK_WNU.cntx_psh();
                  PPK_WIF.cntx_psh();
                  PPK_WIF.index('UCZ_NAZ');
                  PPK_WIF.prefix(_ppk_ucz,_tab.NAZWA);
                  {? PPK_WIF.first()
                  || _txt[1]:='W systemie widnieje już oświadczenie o podpisanej umowie o prowadzenie PPK'@;
                     _txt[2]:='dotyczące instytucji finansowej \"%1\".'@[_tab.NAZWA];
                     _txt[3]:='Oświadczenie zostało złożone w dniu %1 roku.'@[PPK_WIF.PPK_WNU().DATA$6];
                     exec('tab_kom_add','form_ob',_comm.INFO,exec('prep_kom','portal_walidacja',_txt))
                  ?};
                  PPK_WIF.cntx_pop();
                  PPK_WNU.cntx_pop()
               ?}
            |? _symbol='DOWU25'
            ||
::             Sprawdzenie czy w przeszłości była rezygnacja z PPK i nie została wznowiona
               {? (
                     (_data_r:=exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'DRZW',1))<>_d0) &
                     ~(exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'AWW') |
                     ~exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'WODW')
                  )
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Brak możliwości złożenia wniosku przed ponownym wznowieniem opłacania składek na PPK.'@;
                     _txt[2]:='Aktualnie obowiązuje rezygnacja z PPK złożona w dniu: %1'@[$_data_r]
                  ?}
               ?};
::             Sprawdzenie, czy była blokada
               _dtWB25B:=exec('spr_wnu','ppk_wnu',_osoba,,_tab.DATA_ZM,'WB25B',1);
               {? _result.ok & _dtWB25B<>_d0
               ||
::                Sprawdzenie, czy nie nastąpiło wznowienie po blokadzie
                  {? exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_tab.DATA_ZM,'WB25W',0)
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:=
                           'Brak możliwości złożenia deklaracji po wznowieniu naliczania składek na program PPK.'@;
                        _txt[2]:='Skontaktuj się z działem kadr w celu weryfikacji.'@
                     ?}
                  ?};
::                Sprawdzenie czy nie został już złożony wniosek DOWU25
                  {? _result.ok &
                     (_dtDOWU25:=exec('spr_wnu','ppk_wnu',_osoba,_dtWB25B,_tab.DATA_ZM,'DOWU25',1))<>_d0
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='W systemie istnieje już zapis o deklaracji opłacania wpłat uczestnika'@;
                        _txt[2]:='złożonej w dniu %1.'@[$_dtDOWU25];
                        _txt[3]:='Brak możliwości ponownego złożenia deklaracji.'@
                     ?}
                  ?}
               || {? _result.ok & _walid
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:='Brak możliwości złożenia deklaracji.'@;
                        _txt[2]:='W systemie brak informacji o nałożeniu blokady naliczania składek na program PPK.'@;
                        _txt[3]:='Skontaktuj się z działem kadr w celu weryfikacji.'@
                     ?}
                  ?}
               ?}
            ?}
         ?}
      || _result.ok*=0;
         {? _walid || _txt[1]:='Brak obsługi PPK w systemie - nie można złożyć wniosku.'@ ?}
      ?};

      {? ~_walid & _result.ok
      || obj_del(_result);
         _user:='%1%2'[OSOBA.NAZWISKO,OSOBA.PIERWSZE];
         {? _symbol='WOU' | _symbol='DWWP' | _symbol='WODW' || _akcept:='T' ?};
         _result:=
         {? _symbol='WOU' | _symbol='WODW' | _symbol='DOWU25'
         || exec('dodaj','ppk_wnu',
               _osoba,_rodzaj,_tab.DATA,_tab.DATA_ZM,_ppk_umo,_ppk_ucz,_ppk_wrd,_user,_akcept
            )
         |? _symbol='DWT'
         || exec('dodaj','ppk_wnu',
               _osoba,_rodzaj,_tab.DATA,_tab.DATA,_ppk_umo,_ppk_ucz,_ppk_wrd,_user,_akcept
            )
         || exec('dodaj','ppk_wnu',
               _osoba,_rodzaj,_tab.DATA,_tab.DATA_ZM,_ppk_umo,_ppk_ucz,_ppk_wrd,_user,_akcept,_tab.PROCENT
            )
         ?};
         {? _result.ok>0
         || {? _symbol='WOU'
            || {? _result.ppk_wnu
               || psystem:='PPK';
                  exec('zap_kom','ppk_kom',_tab.DATA,'U','IUCZ');
                  &psystem
               ?}
            |? _symbol='DWT' & _result.ppk_wnu
            || _added:=0;
               ADRES.cntx_psh(); ADRES.index('ADRES'); ADRES.prefix();
               {? ADRES.seek(_tab.REF,)
               || {? exec('dodaj','ppk_wif',_result.ppk_wnu,ADRES.ref(),_tab.NR_RACH) || _added+=1 ?}
               || _result.ok*=0;
                  _result.ppk_wnu:=null();
                  {? _walid || _txt[1]:='Nie udało się znaleźć instytucji finansowej o nazwie: %1'@[_tab.NAZWA] ?}
               ?};
               ADRES.cntx_pop();
               {? _added
               || psystem:='PPK';
                   exec('zap_kom','ppk_kom',_tab.DATA,'U','IDWT');
                   &psystem
               || {? _mydo || undo() ?}
               ?}
            ?}
         ?};

::       obsługa błędów
         {? _result.ok<=0
         || {? _result.ppk_wnu
            || params_set(exec('obj_ntab_set','#array',params_get(),'pkw_wnu',_result.ppk_wnu))
            ?};
            {? _result.errMsg=''
            || _result.errMsg:='Nie udało się poprawnie zapisać wniosku do bazy danych.'@
            ?};
            {? _walid
            || {? TKOM13.first() || {! |? TKOM13.del() !} ?};
::          dzielimy komunikat
               _errs:=spli_str(_result.errMsg,'\n');
               {! _ind:=1..obj_len(_errs)
               |? _errNr:={?  _result.ok=-1 || _comm.INFO || _comm.ERROR ?};
                  exec('tab_kom_add','form_ob',_errNr,_errs[_ind])
               !}
            ?}
         ?};
         {? ~_walid & var_pres('__PPKWNP')>0 || &__PPKWNP ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalCopy:=
      {? _symbol='WOU'
      || _zalName:=exec('_ppk_wou','portal_walidacja').name;
         exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      |? _symbol='DWT'
      || _zalName:=exec('_ppk_opif','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      |? _symbol='WODW'
      || _zalName:=exec('_ppk_wodw','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      |? _symbol='DRWD'
      || _zalName:=exec('_ppk_drwd','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      |? _symbol='DWWD'
      || _zalName:=exec('_ppk_dwwd','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      |? _symbol='DWWP'
      || _zalName:=exec('_ppk_dwwp','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      |? _symbol='DOWU25'
      || _zalName:=exec('_ppk_dowu25','portal_walidacja').name;
         exec('edokumZal_copy','form_ob',_edokum,_osoba,_zalName)
      || 0
      ?};
      {? _zalCopy
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\wydanie_zasw_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formula na akceptacje - wniosek o wydanie zaświadczenia - Paperless HR
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref() ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: założenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum) || _result.ok:=1 ?};
   EDOK_ATR.cntx_pop();

   {? _result.ok & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zaswiadczenie:=exec('atr_get','portal_walidacja','ZaswiadczenieNazwa');
      _slo_typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','ZAL','ZAL',,1,,null);
      _slo_naz:=exec('FindInSet','#table','SLO_NAZ','NAZWA',_zaswiadczenie,_slo_typ,,1,_zaswiadczenie,null);
      {? _slo_naz & exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zaswiadczenie)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};

   {? _result.ok=0 || undo() ?};
   {? _mydo || end() ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\zlozenie_dok_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formula na akceptacje - wniosek złożenie dokumentu - Paperless HR
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref() ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

OSOBA.cntx_psh(); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: założenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr', 'obiegi', _edokum) || _result.ok:=1 ?};
   EDOK_ATR.cntx_pop();

   {? _result.ok & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_zlozenie_dok','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};

   {? _result.ok=0 || undo() ?};
   {? _mydo || end() ?}
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\pit_zero_26_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na walidację - Zaprzestanie stosowania zwolnienia od podatku dla osób poniżej 26 lat - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('pit_zero_26','portal_walidacja',_edokum,_osoba,_walid)


\pit_zero_26_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła na akceptację - Zaprzestanie stosowania zwolnienia od podatku dla osób poniżej 26 lat - Portal HR.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('pit_zero_26','portal_walidacja',_edokum,_osoba)


\pit_zero_26
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [22.26]
:: OPIS: Formuła obsługująca wniosek o zaprzestanie stosowania zwolnienia od podatku dla osób poniżej 26 lat -
::       Portal HR.
::   WE: [_a] [REFERENCE] - EDOKUM.ref
::       [_b] [REFERENCE] - OSOBA.ref
::       [_c] [INTEGER]   - 1 - walidacja, 0(domyślnie) - akceptacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

{? _walid || exec('tab_kom', 'form_ob') ?};
exec('obj_init','portal_walidacja');
OSOBA.cntx_psh(); OSOBA.index('OSOBA'); OSOBA.prefix();
EDOKUM.cntx_psh(); EDOKUM.index('ID'); EDOKUM.clear();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   _err:=exec('oMsgErr','portal_walidacja');

   EDOK_ATR.cntx_psh();
   {? exec('open_edk_atr','obiegi',_edokum)
   || _comm:=exec('oMsgType','portal_walidacja');
      _d0:=date(0,0,0);
      _result.ok:=1;
      _firma:=exec('ref_firma','ustawienia');
      _pit_zero:=exec('types_pit_zero_codes','portal_walidacja');
      _taxReliefRejection:=exec('types_tax_relief_rejection','portal_walidacja');
      _statementChange:=exec('types_pit_zero_26_changes','portal_walidacja');
::    Zmienna pomocnicza do przechowywania komunikatów o błędzie dla walidacji
      _komSize:=4;
      _txt:=obj_new(_komSize);

      _tab:=obj_new(
::       Data złożenia
         'D_ZO',
::       Rok
         'ROK',
::       Decyzja
         'REZYGN',
::       Złączenie do tabeli OS_ZWSLO (OS_ZWSLO.ref) [techniczne]
         'OS_ZWSLO',
::       Data końca obowiązywania [techniczne]
         'D_OW',
::       Zmiana istniejącego wniosku [techniczne]
::       0 -> zmiana z korzystania z ulgi dla młodych na rezygnację
::       1 -> zmiana z rezygnacji ze stosowania ulgi i przejście na jej stosowanie
         'ZMIANA',
::       Zmieniany zapis OS_ZWPOD [techniczne]
         'ZMIANA_REF'
      );

      _tabId:=exec('tab_id','portal_walidacja',_tab);
      _tabId.D_ZO:='ZmianaOd';
      _tabId.ROK:='Rok';
      _tabId.REZYGN:='DecyzjaSRSymbol';

      _getAtr:="exec('atr_get','portal_walidacja',_a)";
      _getName:="exec('atr_name','portal_walidacja',_a)";

::    Przypisanie wartości z Portalu HR
      _tab.D_ZO:=exec('to_ti_dt','form_ob',_getAtr(_tabId.D_ZO),'D');
      _tab.ROK:=#_getAtr(_tabId.ROK);
      _tab.REZYGN:=_getAtr(_tabId.REZYGN);
      _tab.OS_ZWSLO:=exec('FindInSet','#table','OS_ZWSLO','KOD',_pit_zero.employeeUnder26,_firma,,1,,null);
      _tab.D_OW:=date(0,0,0);
      _tab.ZMIANA:=_statementChange.applying;
      _tab.ZMIANA_REF:=null;

      {? var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL
      ||
         {? _result.ok & _tab.ROK<2022
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Nieprawidłowy rok wybrany w polu \"%1\".'@ [_getName(_tabId.ROK)]
            ?}
         ?};

         {? _result.ok & _tab.D_ZO=_d0
         || _result.ok*=0;
            {? _walid || _txt[1]:='Data w polu \"%1\" nie może być pusta.'@ [_getName(_tabId.D_ZO)] ?}
         ?};

         {? _result.ok & _tab.D_ZO<date()
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty obecnej.'@ [_getName(_tabId.D_ZO)]
            ?}
         ?};

         {? _result.ok & _tab.D_ZO<date(_tab.ROK,1,1)
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może być wcześniejsza od daty %2.'@
                  [_getName(_tabId.D_ZO),date(_tab.ROK,1,1)$1]
            ?}
         ?};

         {? _result.ok & _tab.D_ZO~1<_tab.ROK
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może przypadać w roku przed tym, wybranym w polu \"%2\".'@
                  [_getName(_tabId.D_ZO),_getName(_tabId.ROK)]
            ?}
         ?};

         {? _result.ok & _tab.D_ZO~1>_tab.ROK
         || _result.ok*=0;
            {? _walid
            || _txt[1]:='Data w polu \"%1\" nie może być późniejsza od daty %2.'@
                  [_getName(_tabId.D_ZO),date(_tab.ROK,12,0)$1]
            ?}
         ?};

         {? _result.ok
         || exec('czytaj','#stalesys',date(_tab.ROK,12,0),KST,'ZWPODW');
            OSOBA.cntx_psh();
            OSOBA.prefix();
            {? OSOBA.seek(_osoba,,1)
            || _birth:=obj_new('year','month','day');
               _birth.year:=OSOBA.UR_DATA~1;
               _birth.month:=OSOBA.UR_DATA~2;
               _birth.day:=OSOBA.UR_DATA~3;
               _age:=obj_new(
::                Wiek, do którego obowiązuje zwolnienie przychodu od podatku
                  'taxExemption',
::                Data, do której znalezionej osobie przysługuje zwolnienie przychodu od podatku
                  'personUpperRange'
               );
               _age.taxExemption:=KST.ZWPODW;
               _age.personUpperRange:=date(
                  (_birth.year)+_age.taxExemption,
                  _birth.month,
                  {? _birth.month=2 & _birth.day=29 || 0 || _birth.day ?}
               );
               &_birth;

               {? _result.ok & _age.personUpperRange<_tab.D_ZO
               || _result.ok*=0;
                  {? _walid
                  || _txt[1]:='Brak możliwości skorzystania ze zwolnienia przychodów z opodatkowania od daty'@;
                     _txt[2]:='wskazanej w polu \"%1\".'@
                        [_getName(_tabId.D_ZO)];
                     _txt[3]:='Wiek osoby nie uprawnia do skorzystania ze zwolnienie przychodów z opodatkowania'@;
                     _txt[4]:='dla młodych pracowników.'@
                  ?}
               ?};

               {? _result.ok & _tab.REZYGN=''
               || _result.ok*=0;
                  {? _walid || _txt[1]:='Nie zaznacznono wyboru w polu \"%1\"'@ [_getName(_tabId.REZYGN)] ?}
               || _match:=0;
                  {! _index:=1..obj_len(_taxReliefRejection)
                  |! {? _taxReliefRejection[_index]=_tab.REZYGN
                     || _match:=1
                     ?}
                  !};
                  {? ~_match
                  || _result.ok*=0;
                     {? _walid
                     || _txt[1]:=_err.config;
                        _txt[2]:='Błędna wartość wybrana w polu \"%1\"'@ [_getName(_tabId.REZYGN)]
                     ?}
                  ?}
               ?};

               {? _result.ok
               ||
                  OS_ZWPOD.cntx_psh();
                  OS_ZWPOD.index('TYP');
                  OS_ZWPOD.prefix(_firma,EDOKUM.DOSTAWCA,_tab.OS_ZWSLO);
                  OS_ZWSLO.cntx_psh();
                  OS_ZWSLO.prefix();
                  _coveringForm:=obj_new(
::                   Złączenie do oświadczenia pokrywającego się "czasowo" ze składanym wnioskiem
                     'ref',
::                   Typ oświadczenia pokrywającego się ze składanym
                     'type',
::                   Czy data składanego wniosku zawiera się w przedziale wyznaczanym przez oświadczenie zarejestrowane
::                   w systemie
                     'inRange'
                  );
                  _coveringForm.ref:=null;
                  _coveringForm.type:='';
                  _coveringForm.inRange:=0;
                  {? OS_ZWPOD.first()
                  || {!
                     |? {? _tab.ROK<=OS_ZWPOD.ROK_Z & _tab.ROK>=OS_ZWPOD.ROK
                        || _coveringForm.ref:=OS_ZWPOD.ref;
                           _coveringForm.type:=OS_ZWPOD.OS_ZWSLO().KOD;
                           {? _tab.D_ZO>=OS_ZWPOD.D_OB & ((_tab.D_ZO<=OS_ZWPOD.D_OW) | OS_ZWPOD.D_OW=_d0)
                           || _coveringForm.inRange:=1
                           ?}
                        ?};
                        OS_ZWPOD.next() & (_coveringForm=null)
                     !}
                  ?};
                  {? _coveringForm.ref<>null
                  || {? _coveringForm.type<>_pit_zero.employeeUnder26
                     || {? _tab.REZYGN=_taxReliefRejection.apply
                        || OS_ZWPOD.cntx_psh();
                           OS_ZWPOD.blank(1);
                           OS_ZWPOD.D_OB:=_tab.D_ZO;
                           OS_ZWPOD.D_OW:=_tab.D_OW;
                           {? exec('check','overlap',null,OS_ZWPOD,'D_OB','D_OW',1,,,'ORAD',_firma,_osoba,'N','T')<>''
                           || _result.ok*=0;
                              {? _walid
                              || _txt[1]:='W podanym okresie obowiązywania jest już wprowadzone inne'@;
                                 _txt[2]:='aktywne oświadczenie.';
                                 _txt[3]:=_err.kadry
                              ?}
                           ?};
                           OS_ZWPOD.cntx_pop()
                        ?}
                     || {? ~_coveringForm.inRange | (_coveringForm.inRange & _tab.REZYGN=_taxReliefRejection.apply)
                        || _result.ok*=0;
                           {? _walid
                           || _txt[1]:='W podanym zakresie lat jest już wprowadzone inne oświadczenie'@;
                              _txt[2]:='z wybranym rodzajem zwolnienia.'@;
                              _txt[3]:=_err.kadry
                           ?}
                        ||
                           _settled:=0;
                           OS_ZWPOZ.cntx_psh();
                           OS_ZWPOZ.index('OS_RWRM');
                           OS_ZWPOZ.prefix(_firma,_osoba,_tab.OS_ZWSLO,'N');
                           {? OS_ZWPOD.seek(_coveringForm.ref) & OS_ZWPOZ.find_ge(OS_ZWPOD.ROK)
                           || {!
                              |? {? OS_ZWPOZ.ROK>=_tab.ROK & date(OS_ZWPOZ.ROK,OS_ZWPOZ.MC,1)>=OS_ZWPOD.D_OB &
                                    OS_ZWPOZ.ROK<=_tab.ROK & date(OS_ZWPOZ.ROK,OS_ZWPOZ.MC,1)<=OS_ZWPOD.D_OW
                                 || _settled:=1
                                 ?};
                                 ~_result & OS_ZWPOZ.next() & OS_ZWPOZ.ROK<=_tab.ROK &
                                    date(OS_ZWPOZ.ROK,OS_ZWPOZ.MC,1)<=OS_ZWPOD.D_OW
                              !}
                           ?};
                           OS_ZWPOZ.cntx_pop();
                           {? _settled
                           || _result.ok*=0;
                              {? _walid
                              || _txt[1]:='Istniejące w systemie oświadczenie, dla którego złożono'@;
                                 _txt[2]:='wniosek o zmianę zostało już wykorzystane do rozliczenia'@;
                                 _txt[3]:='zwolnionego przychodu z opodatkowania.'@;
                                 _txt[4]:='Nie można dokonać zmiany.'@
                              ?}
                           || _tab.ZMIANA:=_statementChange.rejecting;
                              _tab.ZMIANA_REF:=_coveringForm.ref
                           ?}
                        ?}
                     ?}
                  ?};
                  OS_ZWSLO.cntx_pop();
                  OS_ZWPOD.cntx_pop();
                  &_coveringForm;

                  {? _result.ok
                  || OS_ZWPOD.cntx_psh();
                     OS_ZWPOD.prefix();
                     {? _tab.ZMIANA=_statementChange.rejecting
                     || _put:=0;
                        {? OS_ZWPOD.seek(_tab.ZMIANA_REF,,1)
                        || OS_ZWPOD.D_OW:=OS_ZWPOD.D_ZO;
                           _put:=OS_ZWPOD.put(1)
                        ?};
                        {? ~_put
                        || _result.ok*=0;
                           {? _walid
                           || _txt[1]:=_err.config;
                              _txt[2]:='Nie powiodła się próbna zmiana oświadczenia istniejącego w systemie.'@
                           ?}
                        ?}
                     |? _tab.ZMIANA=_statementChange.applying
                     || OS_ZWPOD.blank(1);
                        OS_ZWPOD.FIRMA:=_firma;
                        OS_ZWPOD.OSOBA:=_osoba;
                        OS_ZWPOD.OS_ZWSLO:=_tab.OS_ZWSLO;
                        OS_ZWPOD.ROK:=_tab.ROK;
                        OS_ZWPOD.ROK_Z:=_tab.ROK;
                        OS_ZWPOD.REZYGN:='T';
                        OS_ZWPOD.D_OW:=
                           {? _age.personUpperRange<date(_tab.ROK,1,1) | _age.personUpperRange>date(_tab.ROK,12,0)
                           || date(_tab.ROK,12,0)
                           || _age.personUpperRange
                           ?};
                        OS_ZWPOD.D_ZO:=_tab.D_ZO;
                        OS_ZWPOD.D_OB:=OS_ZWPOD.D_ZO;
                        OS_ZWPOD.AKTYWNY:='N';
                        {? ~OS_ZWPOD.add(1)
                        || _result.ok*=0;
                           {? _walid
                           || _txt[1]:=_err.config;
                              _txt[2]:='Nie powiódł się próbny zapis informacji z wniosku do bazy danych.'@
                           ?}
                        ?}

                     || _result.ok*=0;
                        {? _walid
                        || _txt[1]:=_err.config;
                           _txt[2]:='Nieobsługiwany typ oświadczenia.'@
                        ?}
                     ?};
                     OS_ZWPOD.cntx_pop()
                  ?}
               ?}

            || _result.ok*=0;
               {? _walid
               || _txt[1]:=_err.config;
                  _txt[2]:='Nie powiodło się odnalezienie w systemie osoby składającej wniosek.'@;
                  _txt[3]:=_err.kadry
               ?}
            ?};
            OSOBA.cntx_pop()
         ?}

      || _result.ok*=0;
         {? _walid
         || _txt[1]:='Brak obsługi Polskiego Ładu w systemie - nie można złożyć wniosku.'@
         ?}
      ?};

      {? ~_result.ok & _walid
      || exec('tab_kom_add','form_ob',_comm.ERROR,exec('prep_kom','portal_walidacja',_txt))
      ?}
   ?};
   EDOK_ATR.cntx_pop();

   {? ~_walid & exec('edokumZal_exist','portal_walidacja',_edokum)
   || _zalName:=exec('_pit_zero_26','portal_walidacja').name;
      {? exec('edokumZal_copy','portal_walidacja',_edokum,_osoba,_zalName)
      || _result.ok*=1
      || _result.ok*=0;
         _result.errMsg:=_err.copy_zal
      ?}
   ?};
   _savedKom:=exec('tab_kom_save','form_ob',_walid);
   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};
   exec('tab_kom_restore','form_ob',_savedKom,_walid)
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();
_result


\pzd_osw_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła na walidację - Oświadczenie o pracy zdalnej.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('pzd_osw','portal_walidacja',_edokum,_osoba,_walid)


\pzd_osw_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła na akceptację - Oświadczenie o pracy zdalnej.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('pzd_osw','portal_walidacja',_edokum,_osoba,)


\pzd_osw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła obsługująca oświadczenie o pracy zdalnej.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja   - walidacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

OSOBA.cntx_psh();
OSOBA.prefix();
EDOKUM.cntx_psh();
EDOKUM.prefix();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
|| _firma:=exec('ref_firma','ustawienia');
   _err:=exec('oMsgErr','portal_walidacja');
   _d0:=date(0,0,0);

   _osw:='PZD01';
   PPSF_NO.cntx_psh();
   PPSF_NO.index('AKT');
   PPSF_NO.prefix('T',_firma,_osw,);
   P.cntx_psh();
   P.prefix();
   EDOK_ATR.cntx_psh();

   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? ~PPSF_NO.first()
   || _result.error('Brak definicji oświadczenia %1.'@[_osw])

   |? _prac:=null();
      {? +EDOKUM.OSOBAWWW=16
         & type_of(ref_tab(EDOKUM.OSOBAWWW))>0
         & ref_tab(EDOKUM.OSOBAWWW)=P
         & P.seek(EDOKUM.OSOBAWWW)
      || _prac:=P.ref()
      ?};
      _prac=null()
   || _result.error('Odnalezienie pracownika [%1] składającego oświadczenie nie powiodło się.'@[EDOKUM.OSOBAWWW])

   |? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1;

::    Pola techniczne, których wartości nie są uwzględniane (nic nie wnoszą do procesowania):
::    __Tech__SkierujDoAkceptacji - Przyjmujemy, że skoro wniosek został odebrany, to pracownik "skierował go do
::                                  akceptacji" i powinno być zawsze 'T'
::    __TechSkopiujZAdrZam  - Flaga techniczna portalu - czy adress kopiować z dotychczasowych danych. Dla nas
::                            istotniejsza informacja o tym, czy adres został podany (JestAdres)
::    __TechSkopiujZAdrZam2 - j.w.
::
::    Uwaga: nazwy pól związanych z adresami (bez cyfr na końcu) są zgodne z akronimami pól z tabeli PPSF_ADR.
      _tabId:=json_parse('{'
         '"DATA":"ZmianaOd",'
::       DecyzjaSRSymbol: 1/0 = Składam / Wycofuję
         '"TYP":"DecyzjaSRSymbol",'
::       RodzajPracyLim = PPSFROZD.KOD
         '"PPSFROZD":"RodzajPracyLim",'

::       Akceptuję powyższe oświadczenie - tylko przy "Składam".
         '"AKCEPT":"CzyAkcOswiadczeniaPracaZdalna",'

::       Adres 1 - tylko przy "Składam".
         '"JA1":"JestAdres",'
         '"KOD1":"KodP",'
         '"MIASTO1":"Miejscowosc",'
         '"ULICA1":"Ulica",'
         '"DOM1":"NrDomu",'
         '"LOKAL1":"NrLokalu",'
         '"KRAJ1":"Kraj",'
         '"WOJEWODZ1":"Wojewodztwo",'
         '"POWIAT1":"Powiat",'
         '"GMINA1":"GminaDzielnica",'

::       Adres 2- tylko przy "Składam".
         '"JA2":"JestAdres2",'
         '"KOD2":"KodP2",'
         '"MIASTO2":"Miejscowosc2",'
         '"ULICA2":"Ulica2",'
         '"DOM2":"NrDomu2",'
         '"LOKAL2":"NrLokalu2",'
         '"KRAJ2":"Kraj2",'
         '"WOJEWODZ2":"Wojewodztwo2",'
         '"POWIAT2":"Powiat2",'
         '"GMINA2":"GminaDzielnica2"'
      '}');

      _tab:=obj_ntab_add(_tabId);
      {! _lp:=1 .. obj_len(_tab)
::       Uzupełniane są wszystkie pola TEKSTOWĄ reprezentacją wartości z wniosku.
::       Jeżeli pole ma być innego typu, to należy podmienić jego wartość (za pętlą).
      |! _tab[_lp]:=obj_new('VAL','S','REF');
         _tab[_lp].VAL:=_tab[_lp].S:=exec('atr_get','portal_walidacja',_tabId[_lp]);
         _tab[_lp].REF:=null()
      !};
      _tab.DATA.VAL:=exec('to_ti_dt','form_ob',_tab.DATA.S,'D');
      _tab.TYP.VAL:=#_tab.TYP.S;

::    Zakres pracy zdalnej stałej.
      _zd_st_zakres:='';

      {? _tab.DATA.VAL=_d0
      || _result.error('Nieuzupełniona lub nieprawidłowa wartość daty oświadczenia [%1].'@[_tab.DATA.S])

      |? _tab.DATA.VAL<P.DZA | (P.DZ<>_d0 & P.DZ<_tab.DATA.VAL)
      || _result.error(
            'Data oświadczenia/wycofania [%1] wykracza poza okres zatrudnienia [%2 - %3].'@
            [_tab.DATA.VAL$1,P.DZA$1,P.DZ$1]
         )

      |? _tab.TYP.VAL=1
::       Składam - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      || {? _tab.AKCEPT.VAL<>'T'
         || _result.error('Oświadczenie nie zostało zaakceptowane. Brak możliwości przetworzenia.'@)

         |? _tab.PPSFROZD.VAL<>''
::          Rodzaj pracy (rozkład) jest opcjonalny.
         || PPSFROZD.cntx_psh();
            PPSFROZD.index('FKOD');
            PPSFROZD.prefix(_firma,_tab.PPSFROZD.VAL,);
            {? PPSFROZD.first()
            || _tab.PPSFROZD.REF:=PPSFROZD.ref();
               PPSFR.cntx_psh();
               PPSFR.prefix();
               {? PPSFROZD.PPSFR().KOD='ZDALN_ST'
               || _zd_st_zakres:=PPSFROZD.ZAKRES
               ?};
               PPSFR.cntx_pop()
            || _result.error('Nieprawidłowa wartość rodzaju pracy [%1].'@[_tab.PPSFROZD.S])
            ?};
            PPSFROZD.cntx_pop()
         ?};

::       Adres 1 - wymagany.
         {? _result.ok
         || {? _tab.JA1.VAL<>'T' & _tab.JA1.VAL<>'N'
            || _result.error('Nieprawidłowa wartość flagi "Adres pracy zdalnej" [%1].'@[_tab.JA1.S])
            |? _tab.JA1.VAL<>'T'
            || _result.error('Co najmniej jeden adres pracy zdalnej musi być podany.'@)
            |? _tab.JA1.VAL='T'
            || KRAJE.cntx_psh();
               KRAJE.index('KRAJE');
               KRAJE.prefix();
               {? _tab.KRAJ1.VAL=''
               || _result.error('Nieuzupełniony kod kraju [1].'@)
               |? ~KRAJE.find_key(_tab.KRAJ1.VAL,)
               || _result.error('Nieprawidłowy kod kraju (1) [%1].'@[_tab.KRAJ1.S]+' '+_err.kadry)
               |? KRAJE.KODISO='PL' & _tab.MIASTO1.VAL=''
               || _result.error('Nieuzupełniona nazwa miasta [1].'@)
               |? KRAJE.KODISO='PL' & _tab.DOM1.VAL=''
               || _result.error('Nieuzupełniony numer domu [1].'@)
               || _tab.KRAJ1.REF:=KRAJE.ref()
               ?};
               KRAJE.cntx_pop()
            ?}
         ?};

::       Adres 2 - opcjonalny.
         {? _result.ok
         || {? _tab.JA2.VAL<>'T' & _tab.JA2.VAL<>'N'
            || _result.error('Nieprawidłowa wartość flagi "Dodatkowy adres pracy zdalnej" [%1].'@[_tab.JA1.S])
            |? _tab.JA2.VAL='T'
            || KRAJE.cntx_psh();
               KRAJE.index('KRAJE');
               KRAJE.prefix();
               {? _tab.KRAJ2.VAL=''
               || _result.error('Nieuzupełniony kod kraju [2].'@)
               |? ~KRAJE.find_key(_tab.KRAJ2.VAL,)
               || _result.error('Nieprawidłowy kod kraju [2] [%1].'@[_tab.KRAJ2.S]+' '+_err.kadry)
               |? KRAJE.KODISO='PL' & _tab.MIASTO2.VAL=''
               || _result.error('Nieuzupełniona nazwa miasta [2].'@)
               |? KRAJE.KODISO='PL' & _tab.DOM2.VAL=''
               || _result.error('Nieuzupełniony numer domu [2].'@)
               || _tab.KRAJ2.REF:=KRAJE.ref()
               ?};
               KRAJE.cntx_pop()
            ?}
         ?};

::       Powyżej walidacja pól, które przyszły na wniosku + zapamiętanie kilku wartości (wykorzystywanych poniżej).
::       Poniżej "walidacja" danych (w transakcji).

         {? _result.ok
::          Zapamiętanie oświadczenia i załączników.
         || _wx_size:=exec('ppsf_no_wx_size','ppsf');
            PPSF_PO.cntx_psh();
            PPSF_PO.index('PRAC');
            PPSF_PO.prefix();
            PPSF_PO.blank();
            PPSF_PO.P:=_prac;
            PPSF_PO.PPSF_NO:=PPSF_NO.ref();
            PPSF_PO.PPSFROZD:=_tab.PPSFROZD.REF;
            PPSF_PO.OD:=_tab.DATA.VAL;
            {! _lp:=1 .. _wx_size
            |? ($('{? PPSF_NO.W%1=\'T\' | PPSF_NO.W%1=\'N\' || PPSF_PO.O%1:=\'T\'; 1 ?}'[$_lp]))()
            !};
            PPSF_PO.EDOKUM:=EDOKUM.ref();
            _txt:=exec('ppsf_po','overlap',0,1);
            {? _txt<>''
            || _result.error(_txt)
            |? ~PPSF_PO.add(1)
            || _result.error('Utworzenie oświadczenia nie powiodło się.'@)
            |? exec('edokumZal_exist','portal_walidacja',EDOKUM.ref())
::             Jeżeli są załączniki ...
            || {? ~exec('edokumZal_copy','portal_walidacja'
                     ,EDOKUM.ref(),PPSF_PO.P,'Praca zdalna - oświadczenia',,PPSF_PO.uidref()
                  )
               || _result.error('Błąd podczas kopiowania załączników.'@)
               ?}
            ?};
            PPSF_PO.cntx_pop()
         ?};

         {? _result.ok
::          Zapamiętanie (obsługa) adresów.
         || _cfg:=exec('ppsf_adr_hash_cfg','ppsf');
            {! _la:=1 .. 2
            |! {? ($('_a.JA%1.VAL=\'T\''[$_la]))(_tab)
               || {! _lf:=1 .. _cfg.size
                  |! ($('{? var_pres(\'%1%2\',_b)>0 || _a.%1:=_b.%1%2.VAL ?}'[_cfg.NAME[_lf],$_la]))(_cfg.VAL,_tab)
                  !};
                  _adr:=exec('ppsf_adr_update','ppsf'
                     ,_prac
                     ,{? _la=1 || 'DOMYŚLNY' || 'DODATKOWY' ?}
                     ,_cfg
                     ,_tab.DATA.VAL
                     ,_d0
                  );
                  {? ~_adr.ok
                  || _result.error(_adr.msg)
                  ?};
                  obj_del(_adr)
               ?}
            !}
         ?};

         {? _result.ok & _zd_st_zakres<>'S'
::          Jeżeli NIE podano rozkładu lub rozkład NIE dotyczy pracy zdalnej stałej 100%, to spróbujmy założyć
::          limit pracy okazjonalnej.
         || _ret:=exec('ppsfl_zdaln_ok_create','ppsf',P.ref(),_tab.DATA.VAL~1);
            {? _ret.status='ERR'
            || _result.error(_ret.msg+' '+_err.kadry)
            ?};
            obj_del(_ret)
         ?};

         {? _result.ok & _zd_st_zakres<>''
::          Praca zdalna stała -> PPSF_H.
         || _zd_st_dom:=exec('ppsf_h_default','ppsf','get');
            {? _zd_st_dom.ok
            || PPSF_H.cntx_psh();
               PPSF_H.index('PRAC');
               PPSF_H.prefix();
               PPSF_H.blank();
               PPSF_H.P:=PPSF_H.CREATOR:=_prac;
               PPSF_H.OD:=_tab.DATA.VAL;
               PPSF_H.AKT:='T';
               PPSF_H.DRUK_U:='N';
               PPSF_H.EDOKUM:=EDOKUM.ref();
               PPSF_H.OO:=_zd_st_dom.OO;
               PPSF_H.ORIGIN:='W';
               PPSF_H.KOSZT:='N';
               PPSF_H.PPSFROZD:=_tab.PPSFROZD.REF;
               PPSF_H.PPSFT:=_zd_st_dom.PPSFT.ref;
               PPSF_H.PPSF_SN:=_zd_st_dom.PPSF_SN.ref;
               PPSF_H.WYC:='N';
               {? ~_walid
               || PPSF_H.KTO_WER:=exec('osoba_akcept_get','form_ob')
               ?};
               _chk:=exec('ppsfh_chk','ppsf',0,1,1);
               {? type_of(_chk)=type_of(0) & _chk=0
               || _result.error('Utworzenie zapisu dotyczącego pracy zdalnej nie powiodło się [1].'@)
               |? type_of(_chk)=type_of('') & _chk<>''
               || _result.error(_chk)
               |? (_chk:=exec('ppsf_h','overlap',0,1))<>''
               || _result.error(_chk)
               |? ~PPSF_H.add(1)
               || _result.error('Utworzenie zapisu dotyczącego pracy zdalnej nie powiodło się [2].'@)
               ?};
               PPSF_H.cntx_pop()
            ?};
            obj_del(_zd_st_dom)
         ?}
      |? _tab.TYP.VAL=0
::       Wycofuję  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      || PPSF_PO.cntx_psh();
         PPSF_PO.index('UNIQUE');
         PPSF_PO.prefix(PPSF_NO.ref(),_prac,);
         {? PPSF_PO.last() & PPSF_PO.OD<=_tab.DATA.VAL & (PPSF_PO.DO=_d0 | _tab.DATA.VAL<=PPSF_PO.DO)
         || PPSF_PO.DO:=_tab.DATA.VAL;
            PPSF_PO.WYC:='T';
            {? ~PPSF_PO.put(1)
            || _result.error('Wycofanie oświadczenia nie powiodło się.'@)
            |? _ok:=1;
               PPSF_ADR.cntx_psh();
               PPSF_ADR.prefix();
               {? PPSF_ADR.f_set('P,OD'
                     ,'join "PPSF_TA" using ("PPSF_ADR".TYP,"PPSF_TA".REFERENCE)'
                     ,'"PPSF_ADR".P=:_a and "PPSF_ADR".A=\'T\' and "PPSF_TA".KOD in (\'DOMYŚLNY\',\'DODATKOWY\')'
                     ,_prac
                  )
               || {? PPSF_ADR.f_first()
                  || {!
                     |? PPSF_ADR.A:='N';
                        _ok*=PPSF_ADR.put(1);
                        PPSF_ADR.f_next()
                     !}
                  ?}
               || _ok:=0
               ?};
               PPSF_ADR.f_clear();
               PPSF_ADR.cntx_pop();
               ~_ok
            || _result.error('Dezaktywacja adresu/(-ów) z oświadczenia nie powiodła się.'@)

::             Jeżeli oświadczenie dotyczyło pracy zdalnej stałej, to powstał zapis w PPSF_H, który również należy
::             wycofać. Ponieważ nie ma "sztywnego" połączenia między PPSF_PO a PPSF_H, to opieramy się (również)
::             wyłącznie na datach. Oznacza to, że nieznalezienie rekordu PPSF_H "aktywnego" w dniu złożenia wycofania
::             tłumaczone jest tym, że oświadczenie nie dotyczyło pracy zdalnej stałej. W praktyce (niestety) przyczyna
::             może być inna a sytuacja powinna zostać uznana za błędną (tak się jednak nie dzieje).
            || PPSF_H.cntx_psh();
               PPSF_H.index('PRAC_AKT');
               PPSF_H.prefix(_prac,'T',);
               {? PPSF_H.last() & PPSF_H.OD<=_tab.DATA.VAL
               || _put:=0;
                  {? PPSF_H.DO=_d0 | _tab.DATA.VAL<=PPSF_H.DO
                  || PPSF_H.DO:=_tab.DATA.VAL;
                     _put+=1
                  ?};
                  {? PPSF_H.WYC_DATA=_d0 | _tab.DATA.VAL<=PPSF_H.WYC_DATA
                  || PPSF_H.WYC_DATA:=_tab.DATA.VAL;
                     PPSF_H.WYC:='T';
                     _put+=1
                  ?};
                  {? _put & ~PPSF_H.put(1)
                  || _result.error('Dezaktywacja uzgodnień dotyczzących pracy zdalnej stałej nie powiodła się.'@)
                  ?}
               ?};
               PPSF_H.cntx_pop()
            ?}

         || _result.error('Nie znaleziono oświadczenia do wycofania.'@)
         ?};
         PPSF_PO.cntx_pop()

      || _result.error('Nieprawidłowa wartość typu oświadczenia (Składam / Wycofuję) [%1].'@[_tab.TYP.S])
      ?}

   || _result.error('Otworzenie właściwej maski tabeli EDOK_ATR (związanej z EDOKUM [%1]) nie powiodło się.'@[$_edokum])
   ?};

   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};

   EDOK_ATR.cntx_pop();
   P.cntx_pop();
   PPSF_NO.cntx_pop()

|| _result.error('Wczytanie do bufora rekordu tabeli OSOBA [%1] lub EDOKUM [%2] nie powiodło się.'@[$_osoba,$_edokum])
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();

{? _walid & ~_result.ok
|| _comm:=exec('oMsgType','portal_walidacja');
   exec('tab_kom_add','form_ob',_comm.ERROR,_result.errMsg)
?};

_result


\pzd_wn_walid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła na walidację - Wniosek o pracę zdalną.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};
_walid:=1;

exec('pzd_wn','portal_walidacja',_edokum,_osoba,_walid)


\pzd_wn_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła na akceptację - Wniosek o pracę zdalną.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_edokum:={? var_pres('_a')=type_of(null) || _a || EDOKUM.ref()    ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || EDOKUM.DOSTAWCA ?};

exec('pzd_wn','portal_walidacja',_edokum,_osoba,)


\pzd_wn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Formuła obsługująca wniosek o pracę zdalną.
::   WE: _a - [REFERENCE] - wskazanie na EDOKUM
::       _b - [REFERENCE] - wskazanie na OSOBA
::       _c - walidacja   - walidacja
::   WY: obiekt exec('oResult','form_ob')
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('oResult','form_ob');
_edokum:={? var_pres('_a')=type_of(null) || _a || return(_result) ?};
 _osoba:={? var_pres('_b')=type_of(null) || _b || return(_result) ?};
 _walid:={? var_pres('_c')=type_of(0)    || _c || 0               ?};

OSOBA.cntx_psh();
OSOBA.prefix();
EDOKUM.cntx_psh();
EDOKUM.prefix();
{? OSOBA.seek(_osoba) & EDOKUM.seek(_edokum)
|| _firma:=exec('ref_firma','ustawienia');
   _d0:=date(0,0,0);

   EDOK_ATR.cntx_psh();
   P.cntx_psh();
   P.prefix();
   PPSFR.cntx_psh();
   PPSFR.index('KOD');
   PPSFR.prefix(_firma);
   PPSFT.cntx_psh();
   PPSFT.index('NAZWA');
   PPSFT.prefix(_firma);
   PPSFN.cntx_psh();
   PPSFN.index('TYPPRAC');
   PPSFN.prefix();

   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   {? exec('open_edk_atr','obiegi',_edokum)
   || _result.ok:=1;

:: Jeżeli NaCzescDnia=1 to można określić niestandardowy harmonogram. Dane o harmonogramie zawarte będą w __JSON ...
::PoprawHarmonogram - czy wprowadzono niestandardowy harmonogram?
::Harmonogram  - TSLSloPanel (pole nie zawierda danych)
::Harmonogram2 - TSLSloPanel (pole nie zawierda danych)
::
::CzyCzescDniaWGodz  - wartość pola zgodna z parametrem globalnym IsWorkRelEventPartTimeInHourAmt, mówiącym o sposobie
::                     wprowadzania informacji o pracy na część dnia:
::                      0 - podawana jest godzina rozpoczęcia (GodzOd) i zakończenia (GodzDo) pracy zdalnej
::                      1 - podawana jest liczba godzin
::NastDzien          - dla CzyCzescDniaWGodz=0 flaga określa czy godzina zakończenia dotyczy następnego dnia
::                      (GodzOd=23:00, GodzDo=07:00, NastDzien=1)

      _tabId:=json_parse('{'
         '"PREF":"PracownikIdErp",'
         '"PPSFR":"TypPracy",'
         '"PPSFT":"TypZdarzeniaOpis",'
         '"DATAOD":"DataOd",'
         '"DATADO":"DataDo",'
         '"PARTDAY":"NaCzescDnia",'
         '"LGODZ":"Godziny",'

::         '"PARTDAY":"CzyCzescDniaWGodz",'
::         '"GODZOD":"GodzOd",'
::         '"ND":"NastDzien",'
::         '"GODZDO":"GodzDo",'

         '"AKCEPT":"AkceptacjaOswiadczenia",'

::       Adres
::       Możliwość wskazania adresu jest WYŁĄCZONA ze względu na brak obsługi typu TSLSloPanel.
::         '"CZYADRES":"WybierzAdres",'
::         '"KRAJ":"AdresKraj",'
::         '"WOJEWODZ":"AdresWojewodztwo",'
::         '"POWIAT":"AdresPowiat",'
::         '"GMINA":"AdresGminaDzielnica",'
::         '"KOD":"AdresKodP",'
::         '"MIASTO":"AdresMiejscowosc",'
::         '"DOM":"AdresNrDomu",'
::         '"LOKAL":"AdresNrLok",'
::         '"POCZTA":"AdresPoczta",'
::         '"ULICA":"AdresUlica"'
         '"KOMENT":"Komentarz"'
      '}');

      _tab:=obj_ntab_add(_tabId);
      {! _lp:=1 .. obj_len(_tab)
::       Uzupełniane są wszystkie pola TEKSTOWĄ reprezentacją wartości z wniosku.
::       Jeżeli pole ma być innego typu, to należy podmienić jego wartość (za pętlą).
      |! _tab[_lp]:=obj_new('VAL','S','REF');
         _tab[_lp].VAL:=_tab[_lp].S:=exec('atr_get','portal_walidacja',_tabId[_lp]);
         _tab[_lp].REF:=null()
      !};
      _tab.DATAOD.VAL:=exec('to_ti_dt','form_ob',_tab.DATAOD.S,'D');
      _tab.DATADO.VAL:=exec('to_ti_dt','form_ob',_tab.DATADO.S,'D');
      _tab.LGODZ.VAL:=#_tab.LGODZ.VAL;

      {? _result.ok
      || {? _tab.PREF.VAL=''
         || _result.error('Brak informacji o wnioskodawcy.'@)
         |?  +_tab.PREF.VAL<>48 | type_of(ref_tab(_tab.PREF.VAL))<>type_of(P) | ref_tab(_tab.PREF.VAL)<>P
         || _result.error('Nieprawidłowe wskazanie wnioskodawcy [%1].'@[_tab.PREF.VAL])
         |? ~P.seek(_tab.PREF.VAL)
         || _result.error('Odnalezienie wnioskodawcy [%1] nie powiodło się.'@[_tab.PREF.VAL])
         || _tab.PREF.REF:=P.ref()
         ?}
      ?};

      {? _result.ok
      || {? _tab.PPSFR.VAL=''
         || _result.error('Brak informacji o rodzaju świadczenia.'@)
         |? ~PPSFR.find_key(_tab.PPSFR.VAL,)
         || _result.error('Odnalezienie rodzaju świadczenia [%1] nie powiodło się.'@[_tab.PPSFR.VAL])

         |? _tab.PPSFT.VAL=''
         || _result.error('Brak informacji o typie świadczenia.'@)
         |? ~PPSFT.find_key(_tab.PPSFT.VAL,)
         || _result.error('Odnalezienie typu świadczenia [%1] nie powiodło się.'@[_tab.PPSFT.VAL])

         |? PPSFT.PPSFR<>PPSFR.ref()
         || _result.error('Typ świadczenia [%1] niezgodny z rodzajem świadczenia [%2].'@[PPSFT.OPIS,_tab.PPSFR.VAL])

         |? _tab.PARTDAY.VAL<>PPSFT.PARTDAY
         || _result.error(
               'Wartość znacznika "Na część dnia" [%1] niezgodna z definicją typu świadczenia.'@[_tab.AKCEPT.VAL]
            )
         || _tab.PPSFT.REF:=PPSFT.ref()
         ?}
      ?};

      {? _result.ok & PPSFT.OSW_WYM='T'
      || {? _tab.AKCEPT.VAL<>'T' & _tab.AKCEPT.VAL<>'N'
         || _result.error('Nieprawidłowa wartość znacznika akceptacji [%1].'@[_tab.AKCEPT.VAL])
         |? _tab.AKCEPT.VAL<>'T'
         || _result.error('Wniosek nie został zaakceptowany. Brak możliwości przetworzenia.'@)
         ?}
      ?};

      {? _result.ok
      || {? _tab.DATAOD.VAL=_d0
         || _result.error('Nieuzupełniona lub nieprawidłowa wartość daty "Od" [%1].'@[_tab.DATAOD.S])
         |? _tab.DATADO.VAL=_d0
         || _result.error('Nieuzupełniona lub nieprawidłowa wartość daty "Do" [%1].'@[_tab.DATADO.S])
         |? _tab.DATADO.VAL<_tab.DATAOD.VAL
         || _result.error('Nieprawidłowy okres wniosku [%1 - %2].'@[_tab.DATAOD.S,_tab.DATADO.S])
         |? _tab.DATADO.VAL~1<>_tab.DATAOD.VAL~1
         || _result.error(
               'Data "Do" [%1] nie może być w innym roku niż data "Od" [%2].'@[_tab.DATADO.S,_tab.DATAOD.S]
            )
         |? _tab.DATAOD.VAL<P.DZA | (P.DZ<>_d0 & P.DZ<_tab.DATADO.VAL)
         || _result.error(
               'Okres wniosku [%1 - %2] wykracza poza okres zatrudnienia [%3 - %4].'@
               [_tab.DATAOD.VAL$1,_tab.DATADO.VAL$1,P.DZA$1,P.DZ$1]
            )
         ?}
      ?};

      {? _result.ok
      || {? _tab.PARTDAY.VAL='T'
         || _gtime:=_tab.LGODZ.VAL*60;
::          Mimo, że wniosek może dotyczyć wielu dni, to zastosujemy walidację uproszczoną:
::             * nie będziemy sprawdzali, czy każdego dnia liczba godzin roboczych jesst większa od wprowadzonej;
::             * sprawdzimy jedynie, czy liczba godzin jest większa lub równa od _gmin i mniejsza lub równa od _gmax.
::          Za takim podejściem przemawia spójność: tak weryfikujemy przy wprowadzaniu danych w ERP-ie i CMSS-ie.
            _gmin:=*time(0,1,0);
            _gmax:=*time(24,0,0);
            {? _gtime<_gmin | _gmax<_gtime
            || _result.error('Liczba godzin pracy musi być dodatnia [%1].'@[_tab.LGODZ.S])
            ?}
         |? _tab.PARTDAY.VAL<>'N'
         || _result.error('Nieprawidłowa wartość znacznika "Na część dnia" [%1].'@[_tab.PARTDAY.VAL])
         ?}
      ?};

::    Powyżej walidacja pól, które przyszły na wniosku + zapamiętanie kilku wartości (wykorzystywanych poniżej).
::    Poniżej "walidacja" danych (w transakcji).

      {? _result.ok & PPSFT.PPSF_NO<>null()
         & exec('ppsf_po_exists','ppsf',PPSFT.PPSF_NO,_tab.PREF.REF,_tab.DATAOD.VAL,_tab.DATADO.VAL,'T')=null()
::       Jeżeli dla wniosku zdefiniowano oświadczenie, to sprawdźmy, czy zostało złożone.
      || _result.error('Przed złożeniem wniosku wymagane jest złożenie oświadczenia.'@)
      ?};

      {? _result.ok
::       Właściwe dodanie zapisów (na razie tylko wniosek - adresy nie są dostępne [TSLSloPanel]).
      || PPSFN.blank();
         PPSFN.FIRMA:=_firma;
         PPSFN.PPSFT:=_tab.PPSFT.REF;
         PPSFN.P:=PPSFN.CREATOR:=_tab.PREF.REF;
         PPSFN.D:=date();
         PPSFN.OD:=_tab.DATAOD.VAL;
         PPSFN.DO:=_tab.DATADO.VAL;
         PPSFN.PARTDAY:=_tab.PARTDAY.VAL;
         {? PPSFN.PARTDAY='T'
         || PPSFN.G:=*(60*_tab.LGODZ.VAL)
         ?};
::       Uzupełnienie pól PPSFN.DK i PPSFN.DR (szkoda, że nie wyzwalaczzem ...).
         exec('ppsfn_okres_ae','ppsf');
         PPSFN.AZ:='W';
         PPSFN.KOMENT:=_tab.KOMENT.VAL;
         PPSFN.PORTAL:='T';
         PPSFN.OSW_AKC:=_tab.AKCEPT.VAL;
         PPSFN.ORIGIN:='W';
         {? ~_walid
::          Zapamiętajmy osobę akceptującą.
         || PPSFN.KTO_WER:=exec('osoba_akcept_get','form_ob')
         ?};
         PPSFN.EDOKUM:=EDOKUM.ref();
         {? _msg:=exec('ppsfn_date_control','ppsf',null(),2);
            _msg<>''
         || _result.error(_msg)

         |? {? PPSFR.LIMITY='T'
            || _lim:=exec('limit_spr','ppsf',,,,,,null(),1,1);
               _msg:='';
               {? _lim.ok<1
               || _msg:=exec('limit_kom','ppsf',_lim,1)
               ?};
               obj_del(_lim);
               _msg<>''
            ?}
         || _result.error(_msg)

         |? ~PPSFN.add(1)
         || _result.error('Utworzenie wniosku nie powiodło się.'@)

         |? _msg:=exec('ppsfp_pos_management','ppsf','K',2);
            _msg<>''
         || _result.error(_msg)
         ?}
      ?}

   || _result.error('Otworzenie właściwej maski tabeli EDOK_ATR (związanej z EDOKUM [%1]) nie powiodło się.'@[$_edokum])
   ?};

   {? _result.ok=0 | _walid || undo() ?};
   {? _mydo || end() ?};

   PPSFN.cntx_pop();
   PPSFT.cntx_pop();
   PPSFR.cntx_pop();
   P.cntx_pop();
   EDOK_ATR.cntx_pop()

|| _result.error('Wczytanie do bufora rekordu tabeli OSOBA [%1] lub EDOKUM [%2] nie powiodło się.'@[$_osoba,$_edokum])
?};
EDOKUM.cntx_pop();
OSOBA.cntx_pop();

{? _walid & ~_result.ok
|| _comm:=exec('oMsgType','portal_walidacja');
   exec('tab_kom_add','form_ob',_comm.ERROR,_result.errMsg)
?};

_result

:Sign Version 2.0 jowisz:1045 2024/02/02 09:03:23 38fe1732fef0378707e73d13a3fdf7486fceca7fc7d6195dedcaa45d523b68306e8fcde3c528d423558e8d663bf52d19cce3878df0057ffdadf3b7370af655b7e597499cd39f5c187cdfd96ab3827111a066e870502233cfa5a150ba69bd0bb979488dac4cdb61e8f46a54d16416b87c35ca77629398f8debf883c20a42f6687
