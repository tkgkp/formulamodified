:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_engine.fml
:: Utworzony: 10.02.2020
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły obsługujące HR Portal o charakterze konfiguracyjnym, bibliotecznym i silnikowym.
::======================================================================================================================


\portaljson_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Deklaracja klasy wspomagającej obsługę parametrów metod typu Modify.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Deklaracja wykorzystywanych klas.
exec('fun_decl','#message');

:: Przy powtórnym wywołaniu deklaracji klasy PortalJSON - zakończ.
{? var_pres('PortalJSON',@.CLASS)>0
|| return()
?};


obj_decl('PortalJSON',


::======================================================================================================================
:: Stałe
::======================================================================================================================


:: Tablica z numerami typów.
   obj_fld('TYPE',~~),


:: Data "zerowa".
   obj_fld('d0',date(0,0,0)),


::======================================================================================================================
:: Pola
::======================================================================================================================


:: Uchwyt do samego siebie.
   obj_fld('THIS',~~),


:: Uchwyt do obiektu klasy JCQ.
   obj_fld('KOMM',~~),


:: Dodatkowy identyfikator (np. nazwa metody / encji), wyświetlany w komunikatach o błędach.
   obj_fld('extid',''),

:: Uchwyt obiektu klasy FUN_CLASS - tworzony w konstruktorze.
   obj_fld('FUN',~~),


:: Uchwyt tabeli tymczasowej, przechowującej dane niezbędne do utworzenia wynikowego napisu w formacie JSON.
   obj_fld('TJ',~~),
:: Uchwyt tablicy elementów nazwanych - indeksów tabeli TJ.
   obj_fld('NJ',~~),


:: Uchwyt tabeli tymczasowej z definicją "zestawu pól" (w gałęzi chr_*).
   obj_fld('TF',~~),


:: Tabela z załącznikami.
   obj_fld('ATT',~~),

:: Tablica z USTALONYMI nazwami elementów związanych z załącznikami.
   obj_fld('att',~~),

:: Liczba zestawów (elementów w gałęzi chr_*).
   obj_fld('ilElem',0),

:: Wartość pola __id_erp w aktualnie obsługiwanym komunikacie.
   obj_fld('id_erp',''),

:: Liczba ustawionych pól w bieżącym zestawie.
   obj_fld('ilSet',0),


:: Tablice z parametrami dla gsub().
   obj_fld('aPatt',~~),
   obj_fld('aRepl',~~),


::======================================================================================================================
:: Metody prywatne
::======================================================================================================================


   obj_meth('__error',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa komunikatów o błędach.
::   WE: _a  [STRING] - Komunikat, lub kod komunikatu.
::   WY: Numer błędu ze znakiem minus.
::----------------------------------------------------------------------------------------------------------------------
      _ret:={? 1+_a='#' || -#(1-_a) || -1000 ?};
      _msg:=
         {? _a='#1'
         || 'Brak inicjalizacji. Należy użyć metody init().'@
         |? _a='#2'
         || 'Nieprawidłowa wartość parametru ""%1"".'@ [_b]+
            {? var_pres('_c')=type_of('') || '\n[%1]' [_c] || '' ?}
         |? _a='#100'
         || 'Próba wywołania metody prywatnej.'@
         || _a
         ?};
      {? _msg<>''
      || _meth:='';
         _stack:=form_stack(-1);
         {! _lp:=2 .. obj_len(_stack)
         |? _stack[_lp].file='' & _stack[_lp].name<>''
         |! _meth+=_stack[_lp].name+' <- '
         !};
         _info:='Klasa obiektu: PortalJSON | Metoda: %1 | Kod błędu: %2'@ [_meth-4,$_ret];
         {? var_pres('KOMM',.THIS)=.TYPE.cJCQ
         || .KOMM.sect_beg(_info+{? .extid='' || '' || ' | '+.extid ?},14);
            _ls:=spli_str(_msg,'\n');
            {! _lp:=1 .. obj_len(_ls)
            |! .KOMM.add(_ls[_lp])
            !};
            .KOMM.sect_end()
         || echo(_info);
            .FUN.error(_msg+{? .extid='' || '' || '\n(%1)' [.extid] ?});
            echo()
         ?}
      ?};
      _ret
   "),


   obj_meth('__tjadd',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda dodaje rekord do tabeli .TJ (jako ostatnie dziecko wskazanego rodzica).
::   WE:  _a  [NUMBER] - Numer rekordu rodzica.
::        _b  [STRING] - Nazwa elementu.
::        _c  [STRING] - Typ elementu:
::                      O - obiekt,
::                      A - tablica,
::                      L - wartość logiczna (true lub false),
::                      N - liczba,
::                      S - napis,
::                      V - wartość null.
::       [_d] [STRING] - Wartość elementu [domyślnie: ''].
::   WY: Numer dodanego rekordu.
::----------------------------------------------------------------------------------------------------------------------
      _parent:=_a;
      _name:=_b;
      _type:=_c;
      _val:=_d;

::      !!! ze względu na błąd systemowy obecnie wyłączamy sprawdzenie wywołania
::      _stack:=form_stack(2);
::
::      {? ~(_stack[2].name<>'' & _stack[2].file='')
::      || .__error('#100');
::         return(0)
::      ?};

      _ret:=0;
::    Najpierw ustalmy INDEX.
      .TJ.prefix(_parent);
      _index:={? .TJ.last() || .TJ.INDEX ?}+1;

      .TJ.blank();
      .TJ.TREE:=_parent;
      .TJ.NAME:=_name;
      .TJ.NTRUNC:={? .TJ.NAME=_name || 'N' || 'T' ?};
      .TJ.TYPE:=_type;
      .TJ.VAL:=_val;
      .TJ.VTRUNC:={? .TJ.VAL=_val || 'N' || 'T' ?};
      .TJ.INDEX:=_index;
      {? .TJ.add()
      || _ret:=#.TJ.ref();
         {? .TJ.VTRUNC='T'
         || _fh:=fopen(null(),'Uw!',,,1);
            {? _fh.is_open()
            || _fh.fwrite(_val);
               .TJ.bl_put('BVAL',_fh,,,'value.txt');
               _fh.fclose()
            ?}
         ?}
      ?};
      .TJ.prefix();
      _ret
   ",type_of(0),type_of(''),type_of(''),type_of(''),-1),

   obj_meth('__tjadd',".__tjadd(_a,_b,_c,'')",type_of(0),type_of(''),type_of(''),-1),


::======================================================================================================================
:: Metody publiczne
::======================================================================================================================


   obj_meth('__init',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Konstruktor. Powołanie struktur złożonych.
::   WE: _a [OBJECT] - Alias do tworzonego obiektu.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
      _a.TYPE:=obj_new('VOID','NUMBER','STRING','DATE','TIME','TABLE','FILE','REF','cJCQ');
      _a.TYPE.VOID:=type_of(~~);
      _a.TYPE.NUMBER:=type_of(0);
      _a.TYPE.STRING:=type_of('');
      _a.TYPE.DATE:=type_of(date());
      _a.TYPE.TIME:=type_of(time());
      _a.TYPE.TABLE:=type_of(@.CLASS.DBF_T);
      _a.TYPE.FILE:=type_of(@.CLASS.FILE_T);
      _a.TYPE.REF:=type_of(null());
      _a.TYPE.cJCQ:=type_of(@.CLASS.JCQ);

      _a.THIS:=_a;

      _a.FUN:=obj_new(@.CLASS.FUN_CLASS);

      _a.TJ:=json_tparse('{}');
      _a.TJ.erase();
      _a.NJ:=obj_new('TREE','TYPE');
      _a.NJ.TREE:=_a.TJ.index('?');
      _a.NJ.TYPE:=_a.TJ.ndx_tmp(,,'TYPE',,);

      _a.TF:=tab_tmp(1,
         'NAME','STRING[255]','Nazwa elementu',
         'TYPE','STRING[1]','Typ elementu',
         'TVAL','STRING[64]','Nazwa typu wartości',
         'NULL','STRING[1]','Dopuszczalna wartość pusta [T/N]',
         'REF','INTEGER','Numer rekordu z danymi',
         'LP','INTEGER','Liczba porządkowa'
      );
::    Tabela załączników.
      _a.ATT:=tab_tmp(1,
         'LP','INTEGER','Lp.',
         'ZAL','BLOBRAW','Załącznik',
         'NAZWA','STRING[64]','Nazwa',
         'ID','STRING[48]','Identyfikator załącznika'
      );
      _a.att:=obj_new('fld','root','fname','fbody','fid','skip');
      _a.att.fld:='__BinAttachment';
      _a.att.root:='Attachments';
      _a.att.fname:='FileName';
      _a.att.fbody:='Body';
      _a.att.fid:='__id_erp';

      _att:=obj_new('Attachments');
      _att.Attachments:=obj_new('SkipAttachment');
      _att.Attachments.SkipAttachment:=1;
      _a.att.skip:=json_obj(_att);

      _a.aPatt:=spli_str('<,>',',');
      _a.aRepl:=spli_str('""<,>""',',');

      ~~
   "),


   obj_meth('init',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda tworząca struktury do obsługi zestawów pól.
::   WE:  _a  [STRING] - Napis w formacie JSON ze strukturą wyniku.
::       [_b] [STRING] - Dodatkowy identyfikator (np. nazwa metody / encji), wyświetlany w komunikatach o błędach.
::       [_c] [OBJECT] - Uchwyt do obiektu klasy JCQ. Jeżeli zostanie podany, to ewentualne komunikaty o błędach będą
::                       zbierane w tym własnie obiekcie. Jeżeli parametr nie wystapi, to komunikaty będą zgłaszan na
::                       ekran.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      {? var_pres('KOMM',.)>100
      || obj_del(.KOMM)
      ?};
      .KOMM:={? var_pres('_c')=.TYPE.cJCQ || _c || ~~ ?};

      .ilSet:=0;
      .ilElem:=0;
      .ilSet:=0;
      .TJ.erase();
      .TF.erase();

      _json:=gsub(_a,.aPatt,.aRepl);
      _TAB:=json_tparse(_json);
      {? type_of(_TAB)<>.TYPE.TABLE
      || .__error('Nieprawidłowa wartość napisu w formacie JSON.'@);
         return(0)
      ?};
      .extid:=_b;

::    Najpierw elementy stałe.
      _ok:=1;
      {! _lp:=1 .. 3
      |? _ok
      |! {? (_ok:=_TAB.seek(_lp))
         || .__tjadd(_TAB.TREE,_TAB.NAME,_TAB.TYPE,_TAB.VAL)
         ?}
      !};

::    Teraz pola zestawu.
      _TAB.prefix(4);
      {? _TAB.first()
      || _lp:=0;
         {!
         |? _lp+=1;
            .TF.blank();
            .TF.NAME:=_TAB.NAME;
            .TF.TYPE:=_TAB.TYPE;
            .TF.TVAL:=gsub(1-gsub(_TAB.VAL,' ','')-1,'|null','');
            .TF.NULL:={? _TAB.VAL*'null' || 'T' || 'N' ?};
            .TF.LP:=_lp;
            _ok:=.TF.add();
            _ok & _TAB.next()
         !}
      ?};

      _ok
   ",type_of(''),type_of('')),

   obj_meth('init',".init(_a,'')",type_of('')),


   obj_meth('getFlds',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda zwraca tabelę tymczasową z nazwami i typami pól zestawu.
::   WE: [_a] [STRING] - Kolejność w tabeli wynikowej: NAME lub LP [domyślnie: NAME].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
      {? ~.TJ.first() | ~.TF.first()
      || .__error('#1');
         return(0)
      ?};
      {? _a<>'NAME' & _a<>'LP'
      || .__error('#2','KOLEJNOSC');
         return(0)
      ?};
      sql('select * from :_a order by '+_a,.TF)
   ",type_of(''),-1),

   obj_meth('getFlds',".getFlds('NAME')",-1),


   obj_meth('create',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda tworzy kolejny zestaw pól (element w gałęzi chr_*).
::   WE:
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      {? ~.TJ.first() | ~.TF.first()
      || .__error('#1');
         return(0)
      |? .ilSet | .ATT.first()
      || .__error('Próba dodania kolejnego zestawu, przed zapisaniem poprzedniego.'@);
         return(0)
      ?};

      do();
      {? (_parent:=.__tjadd(3,'[%1]' [$(.ilElem+1)],'O'))
      || _ok:=1;
         {!
         |? {? (_ok:=.__tjadd(_parent,.TF.NAME,'V','null'))
            || .TF.REF:=_ok;
               .TF.put();
               .TF.next()
            ?}
         !};
         {? ~_ok
         || undo()
         ?}
      || undo()
      ?};
      {? end()
      || .ilElem+=1;
         .id_erp:='';
         1
      || .__error('Utworzenie zestawu nie powiodło się.'@);
         0
      ?}
   "),


   obj_meth('set',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda nadaje wartość wskazanemu polu.
::   WE:  _a  [STRING]        - Nazwa pola.
::       [_b] [ANY]           - Wartość pola.
::       [_c] [NUMBER/TIME]   - Znacznik pomijania konwersji [0/1] dla _b typu napisowego lub
::                              znacznik zamknięcia pliku dla _b będącego uchwytem pliku lub
::                              część 'time' dla pól typu DateTime (zakładamy, że część 'date' jest przekazana w _b).
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      _name:=_a;
      _val1:={? var_pres('_b')>0 || _b || ~~ ?};
      _val2:={? var_pres('_c')>0 || _c || ~~ ?};

      {? ~.TJ.first()
      || .__error('#1');
         return(0)
      |? ~.ilElem
      || .__error('Próba ustawienia wartości pola przed utworzeniem zestawu.'@);
         return(0)
      |? ~.TF.find_key(_name,)
      || .__error('#2','POLE',_name);
         return(0)
      |? ~.TF.REF
      || .__error('Błąd wewnętrzny: brak wskazania na rekord w zestawie.'@);
         return(0)
      |? ~.TJ.seek(.TF.REF,)
      || .__error('Błąd wewnętrzny: brak rekordu w zestawie.'@);
         return(0)
      ?};

      _ok:=1;
      _tval1:=type_of(_val1);
      _tval2:=type_of(_val2);
      {? _tval1=.TYPE.VOID
      || _jval:='null';
         _type:='V'

      |? .TF.TVAL='base64Binary' & _tval1=.TYPE.REF & (_val1=null() | ref_tab(_val1)=SYSBLOB)
::       Tutaj tylko zajawka - reszta poniżej.
      || _jval:={? _val1=null() || 'null' || '' ?};
         _type:='S'

      |? (.TF.TVAL='string' | (_tval2=.TYPE.NUMBER & _val2)) & _tval1=.TYPE.STRING
      || _jval:=_val1;
         _type:='S';
         {? _name='__id_erp'
         || .id_erp:=_jval
         ?}

      |? .TF.TVAL='string' & _tval1=.TYPE.FILE
::       Tutaj tylko zajawka - reszta poniżej.
      || _jval:='';
         _type:='S'

      |? ',decimal,int,long,short,unsignedByte,'*(',%1,' [.TF.TVAL]) & _tval1=.TYPE.NUMBER
      || _jval:=form(_val1,,,'9.');
         _type:='N'

      |? .TF.TVAL='dateTime' & _tval1=.TYPE.DATE
      || {? _val1=.d0
         || _jval:='null';
            _type:='V'
         || {? type_of(_val2)<>.TYPE.TIME
            || _val2:=time(0,0,0)
            ?};
            _jval:=iso_datetime_value(_val1,_val2);
            _type:='S'
         ?}

      |? .TF.TVAL='dateTime' & _tval1=.TYPE.STRING & +_val1=31
      || _jval:=iso_datetime_value(_val1);
         _type:='S'

      |? .TF.TVAL='dateTime' & _tval1=.TYPE.STRING & iso_datetime_parse_utc(_val1).utc>0
      || _jval:=_val1;
         _type:='S'

      || _ok:=0
      ?};

      {? _ok
      || .TJ.VAL:=_jval;
         .TJ.VTRUNC:={? .TJ.VAL<>_jval | _tval1=.TYPE.FILE | (_tval1=.TYPE.REF & _val1<>null()) || 'T' || 'N' ?};
         .TJ.TYPE:=_type;
         {? .ilSet+=.TJ.put()
         || {? .TJ.VTRUNC='T'
            || {? _tval1=.TYPE.REF
               || _fh:=fopen(null(),'Uw!',,,1);
                  {? _fh.is_open()
                  || base64('encode',fopen(_val1,'b',,1,1),_fh);
                     .TJ.bl_put('BVAL',_fh,,,'value.txt');
                     _fh.fclose()
                  ?}
               |? _tval1=.TYPE.FILE
               || .TJ.bl_put('BVAL',_val1,,,'value.txt');
                  {? _tval2=.TYPE.NUMBER & _val2
                  || _val1.fclose()
                  ?}
               || _fh:=fopen(null(),'Uw!',,,1);
                  {? _fh.is_open()
                  || _fh.fwrite(_jval);
                     .TJ.bl_put('BVAL',_fh,,,'value.txt');
                     _fh.fclose()
                  ?}
               ?}
            ?}
         ?}
      || .__error('Pole: %1'@ [_name]+'\n'+'Nie udało się przeprowadzić konwersji typu.'@)
      ?};

      _ok

   ",type_of('')),


   obj_meth('attach',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Metoda służy do dołączania załączników.
::   WE: _a [BLOBRAW] - Załącznik.
::       [_b] [STRING]  - Identyfikator załącznika.
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      _blob:=_a;
      _id:=_b;

      {? ~.TJ.first()
      || .__error('#1');
         return(0)
      |? ~.ilElem
      || .__error('Próba ustawienia wartości pola przed utworzeniem zestawu.'@);
         return(0)
      |? ~.TF.find_key(.att.fld,)
      || .__error('Próba dołączenia załącznika do encji bez pola [%1].'@ [.att.fld]);
         return(0)
      |? ~.TF.REF
      || .__error('Błąd wewnętrzny: brak wskazania na rekord w zestawie.'@);
         return(0)
      |? ~.TJ.seek(.TF.REF,)
      || .__error('Błąd wewnętrzny: brak rekordu w zestawie.'@);
         return(0)
      |? ref_tab(_blob)<>SYSBLOB
      || .__error('Parametr nie jest załącznikiem.'@);
         return(0)
      ?};

      _lp:=.ATT.size()+1;
      .ATT.blank();
      .ATT.LP:=_lp;
      .ATT.ZAL:=_blob;
      .ATT.NAZWA:=.ATT.bl_info('ZAL','NAME');
      .ATT.ID:=_id;
      .ATT.add()
   ",type_of(null()),type_of(''),-1),

   obj_meth('attach',".attach(_a,'')",type_of(null()),-1),


   obj_meth('get_id_erp',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [22.26]
:: OPIS: Metoda zwraca wartość pola __id_erp w aktualnie obsługiwanym komunikacie.
::       Zrezygnujmy z kosztownych testów stanu obiektu - najwyżej zwrócony zostanie pusty napis.
::   WE:
::   WY: Wartość pola __id_erp w aktualnie obsługiwanym komunikacie lub ''.
::----------------------------------------------------------------------------------------------------------------------
      .id_erp
   ",-1),


   obj_meth('skip_attach',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Metoda pozwala na "podtrzymanie" załączników na portalu. Jeżeli załączniki po stronie ERP nie zmieniły się, to
::       nie musimy ich wysyłać - musimy jednak wysłać na portal informację, że brak załączników w komunikacie nie
::       oznacza, że zostały one usuniete.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
      .set(.att.fld,.att.skip)
   ",-1),


   obj_virt('plugin',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda wirtualna, wykonywana przed zapisaniem zestawu.
::   WE: _a [OBJ] - Uchwyt do samego siebie (.THIS).
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      1
   "),


   obj_meth('save',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda uzupełnia pole z załącznikami i wirtualnie zapisuje zestaw.
::   WE:
::   WY: Wynik operacji [0/1].
::----------------------------------------------------------------------------------------------------------------------
      {? ~.TJ.first()
      || .__error('#1');
         return(0)
      |? ~.ilElem
      || .__error('Próba zapisania zestawu przed jego utworzeniem.'@);
         return(0)
      |? ~.ilSet
      || .__error('Próba zapisania zestawu przed ustawieniem jakiegokolwiek pola.'@);
         return(0)
      ?};

      {? .ATT.first()
      || _fh:=fopen(null(),'Uw!',,,1);
         {? _fh.is_open()
         || _fml:=""
               _par:=params_get();
               _ATT:=_par.ATT;
               {? _ATT.seek(_ref)
               || _fh:=_par.fh;
                  _fh.fwrite('""""');
                  base64('gzip+encode',fopen(_ATT.ZAL,'b',,1,1),_fh);
                  _fh.fwrite('""""')
               ?};
               ''"";

            _att:=obj_new(.att.root);
            _size:=.ATT.size();
            {? _size=1
            || _att.Attachments:=
                  {? .ATT.ID='' || obj_new(.att.fname,.att.fbody) || obj_new(.att.fname,.att.fbody,.att.fid) ?};
               _att.Attachments[1]:=.ATT.NAZWA;
               _att.Attachments[2]:=$(""_ref:='""+$.ATT.ref()+""';""+_fml);
               {? .ATT.ID<>''
               || _att.Attachments[3]:=.ATT.ID
               ?}
            || _lp:=0;
               _att.Attachments:=obj_new(_size);
               {!
               |? _lp+=1;
                  _att.Attachments[_lp]:=
                     {? .ATT.ID='' || obj_new(.att.fname,.att.fbody) || obj_new(.att.fname,.att.fbody,.att.fid) ?};
                  _att.Attachments[_lp][1]:=.ATT.NAZWA;
                  _att.Attachments[_lp][2]:=$(""_ref:='""+$.ATT.ref()+""';""+_fml);
                  {? .ATT.ID<>''
                  || _att.Attachments[_lp][3]:=.ATT.ID
                  ?};
                  .ATT.next()
               !}
            ?};
            params_set(
               'ATT',.ATT,
               'fh',_fh
            );
            json_obj(_att,_fh,1);

            .set(.att.fld,_fh)
         ?}
      ?};

      _acr:='';
      {? .TF.first()
      || {!
         |? {? .TF.NULL='N' & .TJ.seek(.TF.REF) & .TJ.VAL='null'
            || _acr+=','+.TF.NAME
            ?};
            .TF.next()
         !}
      ?};
      {? _acr<>''
      || .__error('W zestawie istnieją pola wymagalne, którym nie nadano wartości:'@+'\n'+(1-_acr)+'.');
         return(0)
      ?};

::    Przepchnięcie środowiska do plugina.
      params_set(params_get());
      _ret:=.plugin(.THIS);
      {? type_of(_ret)=.TYPE.NUMBER & _ret
      || .ilSet:=0;
         {? .TF.first()
         || {!
            |? .TF.REF:=0;
               .TF.put();
               .TF.next()
            !}
         ?};
         .ATT.erase();
         1
      ?}
   "),


   obj_meth('json',"
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Metoda tworzy napis w formacie JSON.
::   WE: [_a] [FILE] - Uchwyt do pliku, w którym będzie zapisany napis.
::   WY: Jeżeli podano _a, to wynikiem będzie wynik operacji: 1/0.
::       Jeżeli parametr _a nie jest uchwytem do pliku, to wynikiem będzie napis w formacie JSON.
::----------------------------------------------------------------------------------------------------------------------
      {? ~.TJ.first()
      || .__error('#1');
         return(0)
      |? .ilSet
      || .__error('Próba utworzenia napisu w formacie JSON przed zapisaniem zestawu.'@);
         return(0)
      ?};
::    Optymalizacja rozmiaru komunikatu - usuwanie elementów typu "null".
      .TJ.index(.NJ.TYPE);
      .TJ.prefix('V',);
      {? .TJ.first()
      || {!
         |? .TJ.del()
         !}
      ?};
      .TJ.index(.NJ.TREE);
      .TJ.first();
      {? var_pres('_a')=.TYPE.FILE
      || .TJ.json_twrite(_a)
      || .TJ.json_twrite()
      ?}
   ")


)


\get_attachments
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła do odczytu zawartośco pola __BinAttachment - zwraca tabelę tymczasową z załącznikami.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN zawierający pole __BinAttachment.
::   WY: tablica nazwana z ATT-tabela tymczasowa oraz ATT_SIGN-tablica tymczasowa z podpisami załączników
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_TAB:=tab_tmp(1
   ,'LP','INTEGER','Lp.'
   ,'BLOB','BLOBRAW','Załącznik'
   ,'KIND','STRING[150]','Typ załącznika'
   ,'LOGIN','STRING[255]','Login osoby rejestrującej'
   ,'DATE','DATE','Data rejestracji'
   ,'TIME','TIME','Czas rejestracji'
   ,'FSEC','REAL','Ułamkowa część sekund'
   ,'TZ','STRING[32]','Strefa czasowa'
   ,'OPIS','STRING[255]','Opis'
);
_sign:=exec('obj_att_sign','portal_engine');

_ret:=obj_new('ATT','ATT_SIGN');
_ret.ATT:=_TAB;
_ret.ATT_SIGN:=_sign.TAB;

{? _obj.getValueLen('__BinAttachment')>524172
|| _att:=fopen(null(),'Uw',,,1);
   _obj.getValue('__BinAttachment',_att)
|| _att:=_obj.getValue('__BinAttachment');
   {? _att='null'
   || return(_ret)
   ?}
?};

_jman:=_obj.new(_att);
_type:=_jman.typeOf('Attachments');
{? _type=_jman.Const.TYPE.ARRAY
|| _size:=_jman.countChildren('Attachments');
   _id:="'[%1]' [$_a]"
|? _type=_jman.Const.TYPE.OBJECT
|| _size:=1;
   _id:="''"
|| _size:=0
?};

{! _lp:=1 .. _size
|! _fn:=_jman.getValue('Attachments%1.FileName' [_id(_lp)]);
   {? +_fn>64
   || _fna:=exec('split_file_name','#file',_fn);
      _dln:=+_fna.fn;
      _dle:=+_fna.ext;
      _fn:='%1.%2' [(64-1-_dle)+_fna.fn,_fna.ext]
   ?};
   _fh:=fopen(null(),'bw',,,1);
   {? _fh.is_open()
   || _jman.getValue('Attachments%1.Body' [_id(_lp)],_fh,'decode+gunzip');
      _TAB.blank();
      _TAB.LP:=_lp;
      {? _path:='Attachments%1.AttachmentKind'[_id(_lp)];
         _jman.typeOf(_path,1)=_jman.Const.TYPE.STRING
      || _TAB.KIND:=_jman.getValue(_path)
      ?};
::    <Obsługa pól opcjonalnych>
      {? _path:='Attachments%1.RegisterLogin'[_id(_lp)];
         _jman.typeOf(_path,1)=_jman.Const.TYPE.STRING
      || _TAB.LOGIN:=_jman.getValue(_path)
      ?};
      {? _path:='Attachments%1.DateRegistration'[_id(_lp)];
         _jman.typeOf(_path,1)=_jman.Const.TYPE.STRING
      || _dt:=exec('getDateTime','portal_core',gsub(_jman.getValue(_path),' ',''));
::       Powyżej obejście błędu SL - daty mogą mieć zbędne spacje: "2023-06-09T09: 19: 00".
         _TAB.DATE:=_dt.date;
         _TAB.TIME:=_dt.time;
         _TAB.FSEC:=_dt.fsec;
         _TAB.TZ:=_dt.tz;
         obj_del(_dt)
      ?};
      {? _path:='Attachments%1.AttachmentDescription'[_id(_lp)];
         _jman.typeOf(_path,1)=_jman.Const.TYPE.STRING
      || _TAB.OPIS:=_jman.getValue(_path)
      ?};
::    </Obsługa pól opcjonalnych>
      _TAB.add();
      _TAB.bl_put('BLOB',_fh,,,_fn);
      {? _path:='Attachments%1.__JSON'[_id(_lp)];
         _jman.typeOf(_path,1)=_jman.Const.TYPE.STRING
      || _sig_str:=_jman.getValue(_path);
         _sign.add(_sig_str,_TAB.ref())
      ?};
      _fh.fclose()
   ?};
   obj_del(_fh)
!};
{? type_of(_att)=type_of(@.CLASS.FILE_T)
|| _att.fclose()
?};

_ret


\obj_att_sign
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [21.37]
:: OPIS: Obiekt do obsługi załaczników
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
   'TAB',
   'add',
   'jman',
   'getValue'
);
_tab:=tab_tmp(3,
   'ATT','INTEGER','Wskazanie na załącznik',
   'SIGNDATE','DATE','Data',
   'SIGNTIME','TIME','Czas',
   'FINGER','STRING[40]','Odcisk palca',
   'ISSUER','SYS_MEMO','Wystawca',
   'FROM_VD','DATE','Ważny od data',
   'FROM_VT','TIME','Ważny od czas',
   'TO_VD','DATE','Ważny do data',
   'TO_VT','TIME','Ważny do czas',
   'NAME','STRING[255]','Nazwa',
   'TYPE','STRING[1]','Typ',
   'SIGNER','STRING[255]','Sygnatariusz',
   'DECLAR','SYS_MEMO','Deklaracja',
   'AKC','INTEGER','Akceptacja',
   'USER','STRING[255]','Użytkownik'
);
_obj.TAB:=_tab;
_obj.getValue:="{? .jman.isPath(_a) || .jman.getValue(_a) || '' ?}";
_obj.add:="
   _json:=_a;
   _ref:=_b;
   _tab:=.TAB;
   {? var_pres('jman',(.))>0 || obj_del(.jman) ?};
   .jman:=exec('json_man','__jsonm',_json);
   _type:=.jman.typeOf('signatures');
   {? _type=.jman.Const.TYPE.ARRAY
   || _size:=.jman.countChildren('signatures');
      _id:=\"'[%1]' [$_a]\"
   |? _type=.jman.Const.TYPE.OBJECT
   || _size:=1;
      _id:=\"''\"
   || _size:=0
   ?};
   {! _lp:=1.._size
   |! _pth:='signatures%1'[_id(_lp)];
      _tab.blank(1);
      _tab.ATT:=#_ref;

      _str:=.getValue(_pth+'.SignDate');
      {? +_str
      || _tab.SIGNDATE:=exec('str2date','#convert',10+_str);
         _tab.SIGNTIME:=exec('str2time','#convert',8+(11-_str))
      ?};
      _tab.USER:=.getValue(_pth+'.BelongsToOperator');
      _tab.TYPE:={? +.getValue(_pth+'.IsQualified') || 'K'
                 |? +.getValue(_pth+'.IsNotQualified') || 'N'
                 |? +.getValue(_pth+'.IsSimply') || 'Z'
                 |? +.getValue(_pth+'.IsHandWritten') || 'R'
                 || ''
                 ?};
      {? 'KN'*_tab.TYPE
      || _tab.FINGER:=.getValue(_pth+'.FingerPrint');
         _str:=.getValue(_pth+'.CertValidFrom');
         {? +_str
         || _tab.FROM_VD:=exec('str2date','#convert',10+_str);
            _tab.FROM_VT:=exec('str2time','#convert',8+(11-_str))
         ?};
         _str:=.getValue(_pth+'.CertValidTo');
         {? +_str
         || _tab.TO_VD:=exec('str2date','#convert',10+_str);
            _tab.TO_VT:=exec('str2time','#convert',8+(11-_str))
         ?}
      ?};
      {? 'RZ'*_tab.TYPE
      || _tab.AKC:=.getValue(_pth+'.DeclarationAccept')
      ?};
      _tab.NAME:=.getValue(_pth+'.SignatureName');
      _tab.SIGNER:=.getValue(_pth+'.Signer');
      {? _tab.add()
      || _issuer:=.getValue(_pth+'.Issuer');
         {? +_issuer
         || _tab.memo_set(_issuer,'ISSUER');
            _tab.memo_put(,'ISSUER')
         ?};
         _declar:=.getValue(_pth+'.Declaration');
         {? +_declar
         || _tab.memo_set(_declar,'DECLAR');
            _tab.memo_put(,'DECLAR')
         ?};
         _tab.put()
      ?}
   !};
   ~~
";

_obj


\czytaj_conf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Podczytuje wartości dotyczące konfiguracji portalu do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,
   'POR_CONF','POR_TNNT','POR_USR','POR_PASS','POR_RURL','POR_OURL','POR_SCOP','POR_WADL','POR_ENV','POR_OAKW','POR_UAKW',
              'POR0TNNT','POR0USR','POR0PASS','POR0RURL','POR0OURL','POR0SCOP','POR0WADL','POR0ENV','POR0OAKW','POR0UAKW',
   'POR_TOUT','POR_RETR','POR_LOG');
exec('czytaj','#stalesys',,XINFO,
              'POR_ABCU','POR_ABCP','POR_ABCE',
              'POR0ABCU','POR0ABCP','POR0ABCE');
exec('czytaj','#stalesys',,XINFO,'POR_PPOR','POR_NAME','POR0PPOR','POR0NAME');
~~


\is_active
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdza, czy współpraca z HR Portal jest aktywna
::       Zakładamy, że podczytane są wartości do zmiennej XINFO (w razie konieczności użyć \czytaj_conf/portal_engine)
::   WE: [_a] - [0]/1 - czy wyświetlać info w przypadku braku współpracy
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_result:=0;
_tenant:=exec('tenant','portal_engine');
{? _tenant<>'' & 1+_tenant<>'_'
|| _result:=1
|| {? _display || FUN.info('Współpraca z HR Portal jest wyłączona.'@) ?}
?};
_result


\tenant
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Identyfikator dzierżawcy
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0TNNT || XINFO.POR_TNNT ?}


\login
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: login
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0USR || XINFO.POR_USR ?}


\password
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: hasło
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0PASS || XINFO.POR_PASS ?}


\api_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url usługi
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0RURL || XINFO.POR_RURL ?}


\oauth_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url autoryzacji
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0OURL || XINFO.POR_OURL ?}


\oauth_scope
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zasięg autoryzacji
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0SCOP || XINFO.POR_SCOP ?}


\wadl_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url WADL
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0WADL || XINFO.POR_WADL ?}


\abc_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Adres serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0ABCU || XINFO.POR_ABCU ?}


\abc_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Port serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W' || XINFO.POR0ABCP || XINFO.POR_ABCP ?}


\abc_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Środowisko serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.POR_CONF='W'
|| {? XINFO.POR0ABCE=''
   || spli_str(XINFO.POR0RURL,'_')[1]
   || XINFO.POR0ABCE
   ?}
|| {? XINFO.POR_ABCE=''
   || spli_str(XINFO.POR_RURL,'_')[1]
   || XINFO.POR_ABCE
   ?}
?}


\is_verbose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Czy zapisywanie komunikacji do logu systemowego
::----------------------------------------------------------------------------------------------------------------------
::XINFO.POR_LOG='T'
0


\timeout
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wartość timeout komunikacji z serwisem
::----------------------------------------------------------------------------------------------------------------------
::XINFO.POR_TOUT
0


\retry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Maksymalna ilość powtórzeń dla pojedynczego uruchomienia
::----------------------------------------------------------------------------------------------------------------------
::XINFO.POR_RETR
0


\pd_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła inicjująca dla przetwarzania danych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('PAR_SKID','object');
exec('MBJAR','#object');
exec('RAPLS','object');
exec('__RUB','object');
exec('__KAL','object');
exec('czytaj_conf','portal_engine');
~~


\client_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodatkowe akcje wykonywane na definicji klienta API
::   WY: 1-ok, 0-coś się nie powiodło
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_client:=_env.Client;

:: Dzierżawca
_tenant:=exec('tenant','portal_engine');

_firma:={? XINFO.POR_CONF='J' || REF.FIRMA || null() ?};

:: Sprawdzenie, czy warto wywoływać obsługę metody w przypadku, gdy nie jest licencjonowana
PORTALO.cntx_psh(); PORTALL.cntx_psh();
PORTALO.index('COMM_LIC');
PORTALO.prefix();
{? PORTALO.first()
|| _result:=0;
   PORTALO.prefix(~-exec('entity_name','portal_engine',_env.MethodName),);
   {? PORTALO.first()
   || {!
      |? PORTALL.index('LICENSE');
         PORTALL.prefix(_firma,PORTALO.LICENSE,);
         {? PORTALL.first() & PORTALL.BOUGHT>0 & PORTALL.EXPIRES>=date() || _result:=1 ?};
         PORTALO.next()
      !}
   ?};
:: Dodatkowe wyłączenia, których nie da się obsłużyć automatycznie
   {? _result=0 &
      (  _env.MethodName='rgt_OprGrupyCommunicateGet' |
         _env.MethodName='chr_PersonRequestParDefsModify' |
         _env.MethodName='chr_PersonRequestParDefsGet' |
         _env.MethodName='chr_PersonRequestParDefsDelete' |
         _env.MethodName='rgt_OprGrupyTenantGet' |
         26+_env.MethodName='cseod_CostCenterTypeTenant' |
         21+_env.MethodName='cseod_BCAddresHistory' |
         22+_env.MethodName='cseod_PurchaseDocument'
      )
   || _result:=1
   ?};
   {? _result=0
   || _desc:='Brak aktywnej licencji pozwalającej przetworzyć komunikat: %1'@[_env.MethodName];
      KOMM.error(_desc,0);
      exec('mwac_log_error','sync_mwa',_desc)
   ?}
||
:: Jeżeli nie ma zawartości tabeli PORTALO, to sprawdzenie jest wyłączone
   _result:=1
?};
PORTALO.cntx_pop(); PORTALL.cntx_pop();

:: Właściwe dodatki do klienta
{? _result=1
||
:: Do autoryzacji używany jest token OAuth2
   _token:=SL_api.token('Portal',exec('token_id','portal_engine'));
   {? _token=''
   || _result:=0
   || _result:=_client.setAuthenticationOAuth(_token)
   ?}
?};

:: Podmiana bazowego URL
{? _result=1
||
   _api_url:=exec('api_url','portal_engine');
   _api_uri:=spli_str(_api_url,'?')[1];

   _result:=_client.setBaseUrl(_api_uri)
?};

{? _result=1
||
:: Identyfikator bazy
   _verify:=SL_api.verify_base_id();
   {? _verify=0
   || _desc:='Błąd zgodności identyfikatora bazy danych - komunikacja została wyłączona.';
      exec('mwac_log_error','sync_mwa',_desc);
      KOMM.error(_desc,0);
      _result:=0
   || {? _verify<0 || SL_api.save_base_id() ?};
      _client.addHeaders('X-SL-ID: %1'[SL_api.base_id()])
   ?}
?};

{? _result=1
||
:: Identyfikator dzierżawcy
   _client.addHeaders('TenantIdentifier: %1'[_tenant]);

:: Nagłówek z ciasteczkiem sesji
   _cookie:=SL_api.cookie();
   {? _cookie<>'' || _client.addHeaders('Cookie: %1'[_cookie]) ?};

:: Token z serwisu notyfikacyjnego
   _NotificationClientToken:=SL_api.notify_token();
   {? _NotificationClientToken<>''
   || _client.addHeaders('NotificationClientToken: %1'[_NotificationClientToken]);
      _client.addHeaders('NotificationClientEnvironment: %1'[exec('abc_env','portal_engine')])
   ?}
?};

_result


\method_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodatkowe akcje wykonywane na definicji metody API
::   WY: 1-ok, 0-coś się nie powiodło
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_method:=_env.Method;

_result:=1;

_api_url:=exec('api_url','portal_engine');
_api_args:=spli_str(_api_url,'?');
{? var_pres('[2]',_api_args)=type_of('')
|| _api_dbc:=spli_str(_api_args[2],'=')[2];
   _result:=(_method.addParams('DBC',_api_dbc,'call'))>0
?};

_result


\inet_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodatkowe akcje wykonywane na obiekcie INET
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
::_inet:=_env.Inet;

_result:=1;

:: Logowanie "systemowe"
{? exec('is_verbose','portal_engine') || _env.Method.Inet.Object.set_verbose('portal_api.log') ?};

:: Timeout
_env.Method.Inet.Object.set_opt('TIMEOUT',exec('timeout','portal_engine'));

:: Wyłączenie kontroli certyfikatu SSL
_env.Method.Inet.Object.set_opt('SSL_VERIFYPEER', 0);

_result


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uniwersalna formuła uruchamiająca - wszystkie wywołania metod portalu MUSZĄ przechodzić przez tę formułę
::   WE: _a [STRING] - sufiks formuł
::   WY: JSON (napis lub uchwyt do pliku) lub ~~ / 0 (błąd) / zależne od implementacji
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_suffix:={? var_pres('_a')=type_of('') || _a || '' ?};

{? var_pres('Adds',_env)=type_of(~~)
|| _env.Adds:=obj_new('obj','reply','sync_id');
:: Obiekt do manipulacji JSONami
   exec('portaljson_decl','portal_engine');
   _env.Adds.obj:=obj_new(@.CLASS.PortalJSON);
:: Pole do zapamiętywania ilości powtórzeń dla bieżącego uruchomienia
   _env.Adds.reply:=0;
:: Pole do zapamiętania aktualnie używanego kodu identyfikatora rekordu
   _env.Adds.sync_id:=''
?};

_fml:=exec('fml','portal_engine',_env.MethodName,_suffix);

:: Aktywny mechanizm naprawczy
{? var_pres('__Data_get')>100
||
:: Dla *Get wywołanie specjalnej obsługi pobrania wszystkich danych z chmury
   {? _env.MethodName+3='Get'
   || {? _suffix='args'
      || params_exec('Get_args','portal_core')
      |? _suffix='parse'
      || {? exec('is_mwa_sync_idd','portal_engine')
         || _sync_idd:=SYNC_MWA.SYNC_IDD
         || _tab_idd:=params_get().tab_idd;
            _tab_idd.prefix(SYNC_MWA.SYNC_PD().SYM,SYNC_MWA.TAB_ACR,SYNC_MWA.METHOD,);
            {? _tab_idd.first()
            || _sync_idd:=_tab_idd.SYNC_IDD
            || _sync_idd:=''
            ?}
         ?};
         params_exec('Get_parse','portal_core',_sync_idd,"exec('Get_data_update','portal_engine',_a)")
      ?}
:: Dla *Delete wywołanie specjalnej obsługi kasowania danych wg id_cloud
   |? _env.MethodName+6='Delete'
   || {? _suffix='args'
      || params_exec('Delete_args','portal_engine')
      |? _suffix='parse'
      || {? exec('is_fun_core','#file',_fml.file,_fml.name) || params_exec(_fml.name,_fml.file) ?}
      ?}
   ?}

|? exec('is_fun','#file',_fml.file,_fml.name)
||
:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
   _env.logApp(,'Formuła: \\%1/%2'[_fml.name,_fml.file]);

:: Dla metod 'Modify' dane uzupełniane są o wartości pól kastomizowanych
:: oraz wypełnienie pola __ModifiedDate_cloud
   {? _env.MethodName+6='Modify'
   || _env.Adds.obj.init(_env.RequestTemplate,_env.MethodName,KOMM);
      set_virt(_env.Adds.obj,'plugin',"
         params_set(params_get());
         _env:=params_get().env;
         _flds:=.getFlds();
         _flds.prefix('__exf__');
         {? _flds.first()
         || {!
            |? _value:=params_exec('formula','portal_engine',_flds.NAME)();
               {? (_flds.NAME-3)+1='d'
               || {? type_of(_value)=type_of('')
                  || .set(_flds.NAME,_value,1)
                  |? type_of(_value)=type_of(time())
                  || .set(_flds.NAME,date(),_value)
                  || .set(_flds.NAME,_value)
                  ?}
               || .set(_flds.NAME,_value)
               ?};
               _flds.next()
            !}
         ?};
         {? _env.Adds.sync_id<>''
            & (_id_erp:=.get_id_erp())<>''
            & (_date_cloud:=exec('get_date_cloud','portal_core',_env.Adds.sync_id,48+_id_erp,48-_id_erp))<>''
         || .set('__ModifiedDate_cloud',_date_cloud)
         ?};
         1
      ")
   || set_virt(_env.Adds.obj,'plugin',"1")
   ?};
   _env.Adds.reply:=0;
   _result:=params_exec(_fml.name,_fml.file);
:: Przy parsowaniu zapamiętywane jest ciasteczko sesji (Set-Cookie: SL_SessionId...)
   {? _suffix='parse'
   || SL_api.save_cookie(_env.InetResponse)
   ?};
:: Przy parsowaniu uzupełnienie statusu biznesowego w rejestrze zdarzeń
   {? _suffix='parse'
   || _env.logApp('R:%1|'[exec('val2display','#convert',_result)])
   ?};
   _result
|| KOMM.error('Brak formuły %1 w pliku %2.%3'[_fml.name,_fml.file,'fml'],0);
   0
?}


\status_notOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Treść komunikatu o statusie innym niż poprawny
::   WE: _a - status
::       [_b] - dane do sparsowania i uzupełnienia komunikatu
::       [_c] - nagłówek do sparsowania i uzupełnienia komunikatu
::   WY: Opis statusu
::----------------------------------------------------------------------------------------------------------------------
_status:=_a;
_result:='Portal zwrócił kod: %1.'@[$_status]+'\n';
{? var_pres('_b')=type_of('')
||
:: Jeżeli dane zaczynają się od cydzysłowu, to biorę jako zrozumiały tekst wewnątrz cudzysłowów
   {? 1+_b='"'
   || _result+=utf8_maz(1-_b-1)
:: w przeciwnym wypadku (jak coś jest) biorę wszystko co jest
   |? +_b>0
   || _result+='\n'+_b
:: w przeciwnym wypadku wydłubuję coś z nagłówka
   || {? var_pres('_c')=type_of('')
      || _header:=_c;
         _tab:=spli_str(_header,'\n');
         {! _it:=1 .. obj_len(_tab)
         |! {? 8+_tab[_it]='HTTP/1.1'
            || _result+='\n'+(9-_tab[_it])
            ?}
         !}
      ?}
   ?}
:: Jeżeli dane są w pliku, to biorę wszystko co jest
|? var_pres('_b')=exec('type_of_file','#var')
|| {!
   |? _line:=_b.fread();
      _result+=_line;
      _line<>'\n'
   !}
?};
_result


\params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Parametry współpracy z portalem
::   WE: _a [STRING] - określa wywołanie, przy czym:
::          - dla wartości 'access' - wywołuje edycję parametrów dostępu do portalu
::          - dla wartości 'oper'   - wywołuje edycję parametrów działania dla portalu
::          - dla wartości 'scope'  - wywołuje edycję parametrów dot. zakresu prezentacji danych
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of('') & _a<>'' || _a || return() ?};

_cfg:=exec('porpar_cfg','portal_engine');
_tab:=exec('porpar_tab','portal_engine',_cfg);

_formula:="_val:=params_get().TAB.TNNT; {? XINFO.POR_CONF='W' || XINFO.POR0TNNT:=_val || XINFO.POR_TNNT:=_val ?}";
_tab.fld_fml('TNNT','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.NAME; {? XINFO.POR_CONF='W' || XINFO.POR0NAME:=_val || XINFO.POR_NAME:=_val ?}";
_tab.fld_fml('NAME','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.USR; {? XINFO.POR_CONF='W' || XINFO.POR0USR:=_val || XINFO.POR_USR:=_val ?}";
_tab.fld_fml('USR','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.PASS; {? XINFO.POR_CONF='W' || XINFO.POR0PASS:=_val || XINFO.POR_PASS:=_val ?}";
_tab.fld_fml('PASS','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.RURL; {? XINFO.POR_CONF='W' || XINFO.POR0RURL:=_val || XINFO.POR_RURL:=_val ?}";
_tab.fld_fml('RURL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.OURL; {? XINFO.POR_CONF='W' || XINFO.POR0OURL:=_val || XINFO.POR_OURL:=_val ?}";
_tab.fld_fml('OURL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.SCOPE; {? XINFO.POR_CONF='W' || XINFO.POR0SCOP:=_val || XINFO.POR_SCOP:=_val ?}";
_tab.fld_fml('SCOPE','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.WADL; {? XINFO.POR_CONF='W' || XINFO.POR0WADL:=_val || XINFO.POR_WADL:=_val ?}";
_tab.fld_fml('WADL','AFTER_EDIT',_formula);
_formula:="
   _env_internal:=params_get().env_internal;
   _tab:=_env_internal.TAB;
   _tab.prefix(params_get().TAB.ENV,);
   {? params_get().TAB.ENV='' | _tab.first()
   || _val:=params_get().TAB.ENV; {? XINFO.POR_CONF='W' || XINFO.POR0ENV:=_val || XINFO.POR_ENV:=_val ?}
   || FUN.info('Błędny kod środowiska.'@);
      0
   ?}
";
_tab.fld_fml('ENV','AFTER_EDIT',_formula);
_formula:="
   _env_internal:=params_get().env_internal;
   _tab:=_env_internal.TAB;
   _tab.prefix();
   _tab.blank();
   _tab.KOD:=params_get().TAB.ENV;
   _tab.find_rec();
   {? _tab.select(,1,-1)
   || fld(_tab.KOD)
   ?}
";
_tab.fld_fml('ENV','F3',_formula);
_formula:="_val:=params_get().TAB.ABC_URL; {? XINFO.POR_CONF='W' || XINFO.POR0ABCU:=_val || XINFO.POR_ABCU:=_val ?};1";
_tab.fld_fml('ABC_URL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.ABC_PORT; {? XINFO.POR_CONF='W' || XINFO.POR0ABCP:=_val || XINFO.POR_ABCP:=_val ?};1";
_tab.fld_fml('ABC_PORT','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.ABC_ENV; {? XINFO.POR_CONF='W' || XINFO.POR0ABCE:=_val || XINFO.POR_ABCE:=_val ?};1";
_tab.fld_fml('ABC_ENV','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.PPOR; {? XINFO.POR_CONF='W' || XINFO.POR0PPOR:=_val || XINFO.POR_PPOR:=_val ?}";
_tab.fld_fml('PPOR','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.OAKW; {? XINFO.POR_CONF='W' || XINFO.POR0OAKW:=_val || XINFO.POR_OAKW:=_val ?}";
_tab.fld_fml('OAKW','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.UAKW; {? XINFO.POR_CONF='W' || XINFO.POR0UAKW:=_val || XINFO.POR_UAKW:=_val ?}";
_tab.fld_fml('UAKW','AFTER_EDIT',_formula);
_formula:="
   _TAB:=params_get().TAB;
   _val:=_TAB.PRCPACT;
   _link:={? _val='T' || exec('getRCPLink','portal_engine') || '' ?};
   _TAB.PRCP:=_link;
   _url:={? _val='T' || exec('getURLFirma','portal_engine').url+'/webterm/app' || '' ?};
   _TAB.PEXTRA:=_url;
   {? +_link=0 & +_url=0 || _TAB.PRCPACT:='N' ?};
   1
";
_tab.fld_fml('PRCPACT','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.OKRPOD; {? XINFO.POR_CONF='W' || XINFO.POR0OKRP:=_val || XINFO.POR_OKRP:=_val ?}";
_tab.fld_fml('OKRPOD','AFTER_EDIT',_formula);
_formula:="exec('str_0_','#blank')";
_tab.fld_fml('ZASEDIT','BLANK',_formula);
_formula:="
   _val:=params_get().TAB.ZASEDIT;
   {? XINFO.POR_CONF='W' || XINFO.POR0ZAST:=_val || XINFO.POR_ZAST:=_val ?};
   {? _val='1'
   || _typ:=exec('FindInSet','#table','SLO_TYP','SYMBOL','TYPPOZ','TYPPOZ',,1,,null);
      SLO_KOD.cntx_psh();
      SLO_KOD.index('KOD');
      SLO_KOD.prefix(_typ);
      {? _loop:=SLO_KOD.first()
      || {!|? _loop |! SLO_KOD.put(,1); _loop:=SLO_KOD.next() !}
      ?};
      SLO_KOD.cntx_pop()
   ?};
   1
";
_tab.fld_fml('ZASEDIT','AFTER_EDIT',_formula);
_formula:="exec('str_0_','#blank')";
_tab.fld_fml('ZASUNIQ','BLANK',_formula);
_formula:="
   _val:=params_get().TAB.ZASUNIQ;
   _change:=((_val='0' & exec('uniq','portal_zaslu')) | _val='1');
   {? ~_change || FUN.emsg(exec('uniq_kom','portal_zaslu')) ?};
   _change
";
_tab.fld_fml('ZASUNIQ','BEFORE_EDIT',_formula);
_formula:="_val:=params_get().TAB.ZASUNIQ; {? XINFO.POR_CONF='W' || XINFO.POR0ZAST:=_val || XINFO.POR_ZAST:=_val ?}";
_tab.fld_fml('ZASUNIQ','AFTER_EDIT',_formula);
_pzd:=exec('is_pzd03','ppsf');
{? _pzd
|| _formula:="
   _TAB:=params_get().TAB;
   _we:=cur_win(1,1);
   _sval:=$(_TAB.CALACT='T');
   XINFO.efld_opt(_we,'enable=%1'[_sval],_TAB,'CALSTOP');
   XINFO.efld_opt(_we,'enable=%1'[_sval],_TAB,'CALOPT')
   ";
   _tab.fld_fml('CALACT','BEFORE_EDIT',_formula)
?};
_formula:= {? _pzd
           || " _act:=#exec('get_par','#portal','IsPersonWorkCalActive');
               _TAB:=params_get().TAB;
               _change:={? ~_act & _TAB.CALACT='T' || exec('ppsft_rcp_size','ppsf') || 1 ?};
               {? ~_change
               || FUN.info(
                     'Przed redakcją parametru, należy włączyć obsługę rejestracji czasu pracy w portalu'
                     ' dla przynajmniej jednego typu pracy poza siedzibą firmy.\n'@);
                  _TAB.CALACT:='N'
               ?};
               _we:=cur_win(1,1);
               _sval:=$(_TAB.CALACT='T');
               XINFO.efld_opt(_we,'enable=%1'[_sval],_TAB,'CALSTOP');
               XINFO.efld_opt(_we,'enable=%1'[_sval],_TAB,'CALOPT');
               {? XINFO.POR_CONF='W'
               || XINFO.POR0KALA:=_TAB.CALACT
               || XINFO.POR_KALA:=_TAB.CALACT
               ?}
            "
           || " _val:=params_get().TAB.CALACT;
               {? XINFO.POR_CONF='W'
               || XINFO.POR0KALA:=_val;
                  XINFO.POR0KALS:=_val
               || XINFO.POR_KALA:=_val;
                  XINFO.POR_KALS:=_val
               ?}
               "
           ?};
_tab.fld_fml('CALACT','AFTER_EDIT',_formula);
{? _pzd
|| _formula:="
      _TAB:=params_get().TAB;
      _change:={? _TAB.CALOPT='3' & _TAB.CALSTOP<>'T'
               || FUN.info('Nie dopuszcza się rejestracji dwóch wejść bez wyjść.'@);
                  _TAB.CALSTOP:='T'
               ?};
      {? XINFO.POR_CONF='W'
      || XINFO.POR0KALS:=_TAB.CALSTOP
      || XINFO.POR_KALS:=_TAB.CALSTOP
      ?}
   ";
   _tab.fld_fml('CALSTOP','AFTER_EDIT',_formula)
?};
_formula:="
   _val:=params_get().TAB.CALOPT;
   _opt:=#exec('get_par','#portal','PersonWorkCalOption');
   _change:=({? _opt=3 & ((var_pres('ftm')=type_of(0) & ftm) | _val<>'3') || exec('calOption','portal_engine') || 1 ?});
   {? ~_change
   || FUN.emsg(
         '%1\n%2\n\n%3 %4'[
            'Zmiana wybranego parametru nie jest możliwa.'@,
            'W systemie istnieją pracownicy, dla których wykazano wiele wejść/wyjść w dniu bieżącym.'@,
            'Wybrane ustawienie jest dostępne, gdy dla każdego pracownika zdefiniowano maksymalnie'@,
            'jedną parę wejść/wyjść przypadającą na obecną datę.'@
         ]
      )
   ?};
   ftm*=0;
   _change
";
_tab.fld_fml('CALOPT','BEFORE_EDIT',_formula);
_formula:= {? _pzd
           || " _TAB:=params_get().TAB;
               _opt:=exec('get_par','#portal','PersonWorkCalOption');
               _change:={? _TAB.CALSTOP<>'T' & _opt<>'3' & _TAB.CALOPT='3'
                        || FUN.info('Nie dopuszcza się rejestracji dwóch wejść bez wyjść.'@);
                           _TAB.CALOPT:=_opt
                        ?};
               {? XINFO.POR_CONF='W' || XINFO.POR0KALW:=_TAB.CALOPT || XINFO.POR_KALW:=_TAB.CALOPT ?}
               "
           || "_val:=params_get().TAB.CALOPT; {? XINFO.POR_CONF='W' || XINFO.POR0KALW:=_val || XINFO.POR_KALW:=_val ?}"
           ?};
_tab.fld_fml('CALOPT','AFTER_EDIT',_formula);

VAR_DEL.delete('ftm');
ftm:=1;

params_set('TAB',_tab,'cfg',_cfg,'env_internal',exec('env_internal','portal_engine'));

($('params_exec(\'param_%1\',\'%2\')'[_mode,spli_str(form_stack(0).file,'.')[1]]))()


\getRCPLink
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Zwraca link do portalu RCP w zależności od ustawienia konfiguracji zmiennej XINFO.POR_CONF
::   WE: [_a] [REFERENCE] - wskazanie na firmę
::       [_b] [NUMBER]    - czy doklejać parametr @#PersonId__id_Erp#
::   WY: link do portalu RCP
::----------------------------------------------------------------------------------------------------------------------
 _firma:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_id_erp:={? var_pres('_b')=type_of(0)      || _b || 1      ?};

_url:='';
_link:=exec('linkToRCP','prc_por');
{? +_link
|| _res:=exec('getURLFirma','portal_engine',_firma);
   _url:=_res.url;
   _app_ident:=_res.app_ident;
   {? +_url
   || _url+='/webterm/app/'+
      {? XINFO.POR_CONF='W' & _firma=null() || '' || _app_ident ?}+_link+
      {? +_link & _id_erp || '@#PersonId__id_Erp#' || '' ?}
   || _text:='Brak podanego adresu webTerma dla firmy o identyfikatorze: "%1".'@[_app_ident]+'\n'+
             'Należy sprawdzić parametryzację systemu '
             '(Ustawienia i parametryzacja -> Parametryzacja -> Wspólne -> Firmy).'@+'\n\n'+
             'Nie udało się utworzyć poprawnego linku do portalu powiązanego (webTerm).'@;
      {? app_info('web_sesid')='' || FUN.emsg(_text) ?}
   ?}
?};
_url


\getURLFirma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Zwraca url do webTerma w zależności od ustawienia konfiguracji zmiennej XINFO.POR_CONF
::   WE: [_a] - wskazanie na firmę - parametr jest uwzględniany w różny sposób w zależności od ustawień XINFO.POR_CONF
::   WY: obiekt _res z polami:
::                  .url - link do webterma
::                  .app_ident - identyfikator aplikacji
::----------------------------------------------------------------------------------------------------------------------
_firma:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_res:=obj_new('url','app_ident');
_res.url:='';
_res.app_ident:='';

:: w przypadku konfiguracji dla Portalu HR: jeden tenant dla wszystkich firm -> zakładamy, że adres webTerma
:: jest podany w firmie 000
_firma000:=exec('from_sym','#firma','000');
{? XINFO.POR_CONF='W' & _firma=null() & _firma000
|| _firma:=_firma000
:: w przypadku konfiguracji dla Portalu HR: jeden tenant dla jednej firmy (lub braku firmy 000) -> adres webTerma
:: jest pobierany z bieżącej firmy
|? _firma=null()
|| _firma:=exec('firma','ustawienia')
?};
_res.app_ident:=exec('FindAndGet','#table',FIRMA,_firma,,"APP_IDEN",'');
_res.url:=exec('FindAndGet','#table',FIRMA,_firma,,"URL",'');
_res


\setRCPLink
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Aktualizacja linku do portalu RCP
::   WE: _a - wskazanie na firmę
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_firma:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};

:: ustalenie kontekstu firmy w zależności od konfiguracji portalu
_firma:={? XINFO.POR_CONF='J' || _firma || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma,'PortalRCP',);
_val:={? PORPAR.first() || PORPAR.WARTOSC || '' ?};
{? _val='T'
|| PORPAR.prefix(_firma,'LinkToRCP',);
   {? PORPAR.first()
   || _url:=exec('getRCPLink','portal_engine',_firma);
      {? PORPAR.WARTOSC<>_url
      || PORPAR.WARTOSC:=_url;
         _result:=PORPAR.put()
      ?}
   ?}
?};
PORPAR.cntx_pop();
_result


\setExtraLink
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Aktualizacja linku do portalu z aplikacjami dodatkowymi
::   WE: _a - wskazanie na firmę
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_firma:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};

:: ustalenie kontekstu firmy w zależności od konfiguracji portalu
_firma:={? XINFO.POR_CONF='J' || _firma || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma,'PortalRCP',);
_val:={? PORPAR.first() || PORPAR.WARTOSC || '' ?};
{? _val='T'
|| PORPAR.prefix(_firma,'LinkToExtra',);
   {? PORPAR.first()
   || _url:=exec('getURLFirma','portal_engine').url+'/webterm/app';
      {? PORPAR.WARTOSC<>_url
      || PORPAR.WARTOSC:=_url;
         _result:=PORPAR.put()
      ?}
   ?}
?};
PORPAR.cntx_pop();
_result


\isWebTermInHRPortalEnabled
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Czy mamy włączoną współpracę z portalem powiązanym (webTermem) w ustawieniach HR Portalu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------

:: ustalenie kontekstu firmy w zależności od konfiguracji portalu
_firma:={? XINFO.POR_CONF='J' || exec('ref_firma','ustawienia') || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma,'PortalRCP',);
_result:={? PORPAR.first() || PORPAR.WARTOSC='T' || 0 ?};
PORPAR.cntx_pop();
_result


\por_conf_czytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Odczytuje dane konfiguracyjne z XINFO i PORPAR do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_tab:=_par.TAB;
{? XINFO.POR_CONF='W'
|| _tab.TNNT:=XINFO.POR0TNNT;
   _tab.NAME:=XINFO.POR0NAME;
   _tab.USR:=XINFO.POR0USR;
   _tab.PASS:=XINFO.POR0PASS;
   _tab.RURL:=XINFO.POR0RURL;
   _tab.OURL:=XINFO.POR0OURL;
   _tab.SCOPE:=XINFO.POR0SCOP;
   _tab.WADL:=XINFO.POR0WADL;
   _tab.ENV:=XINFO.POR0ENV;
   _tab.ABC_URL:=XINFO.POR0ABCU;
   _tab.ABC_PORT:=XINFO.POR0ABCP;
   _tab.ABC_ENV:=XINFO.POR0ABCE;
   _tab.PPOR:=XINFO.POR0PPOR;
   _tab.OAKW:=XINFO.POR0OAKW;
   _tab.UAKW:=XINFO.POR0UAKW;
   _tab.OKRPOD:=XINFO.POR0OKRP;
   _tab.ZASEDIT:=XINFO.POR0ZAST;
   _tab.ZASUNIQ:=XINFO.POR0ZASU;
   _tab.CALACT:=XINFO.POR0KALA;
   _tab.CALSTOP:=XINFO.POR0KALS;
   _tab.CALOPT:=XINFO.POR0KALW
|| _tab.TNNT:=XINFO.POR_TNNT;
   _tab.NAME:=XINFO.POR_NAME;
   _tab.USR:=XINFO.POR_USR;
   _tab.PASS:=XINFO.POR_PASS;
   _tab.RURL:=XINFO.POR_RURL;
   _tab.OURL:=XINFO.POR_OURL;
   _tab.SCOPE:=XINFO.POR_SCOP;
   _tab.WADL:=XINFO.POR_WADL;
   _tab.ENV:=XINFO.POR_ENV;
   _tab.ABC_URL:=XINFO.POR_ABCU;
   _tab.ABC_PORT:=XINFO.POR_ABCP;
   _tab.ABC_ENV:=XINFO.POR_ABCE;
   _tab.PPOR:=XINFO.POR_PPOR;
   _tab.OAKW:=XINFO.POR_OAKW;
   _tab.UAKW:=XINFO.POR_UAKW;
   _tab.OKRPOD:=XINFO.POR_OKRP;
   _tab.ZASEDIT:=XINFO.POR_ZAST;
   _tab.ZASUNIQ:=XINFO.POR_ZASU;
   _tab.CALACT:=XINFO.POR_KALA;
   _tab.CALSTOP:=XINFO.POR_KALS;
   _tab.CALOPT:=XINFO.POR_KALW
?};

_cfg:=_par.cfg;
exec('porpar_init','portal_engine',XINFO.POR_CONF,_cfg);
_firma:={? XINFO.POR_CONF='J' || exec('ref_firma','ustawienia') || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma);
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>''
   || _val:={? PORPAR.find_key(_cfg[_lp].SYMBOL,) || PORPAR.WARTOSC || _cfg[_lp].WARTOSC ?};
      ($('_a.%1:=_b' [_names[_lp]]))(_tab,_cfg[_lp].get(_val))
   ?}
!};
PORPAR.cntx_pop();

~~


\por_conf_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Po redakcji pola XINFO.POR_CONF
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('por_conf_czytaj','portal_engine');
1


\porpar_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła tworzy tablicę elementów nazwanych reprezentujących parametry działania portalu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Opis pól:
::    SYMBOL   STRING[40]  - Symbol parametru, którym posługuje się portal (sl_TenantParams.ParID).
::    OPIS     STRING[255] - Opis parametru (sl_TenantParams.Description).
::    WARTOSC  STRING[255] - Wartość parametru (sl_TenantParams.Value).
::    MB_TYP   STRING[12]  - Typ pola w tabeli tymczasowej. Jeżeli parametr nie jest redagowalny, to pole powinno mieć
::                           wartość ''.
::             Jeżeli MB_TYP='', to poniższe pola nie mają znaczenia - mogą zostać pominięte w definicji.
::    MB_NAZWA STRING[64]  - Nazwa pola w tabeli tymczasowej.
::    get      RULE        - Formuła realizująca konwersję wartości odczytanej z tabeli do wartości redagowanej w oknie.
::    set      RULE        - Formuła realizująca konwersję wartości zredagowanej w oknie do wartości zapisywanej do
::                           tabeli.
:: Uwaga.
::    Prawidłowa konfiguracja parametrów pozwala na bezobsługowe:
::       1. Dodanie odpowiednich pól do tabeli tymczasowej, dla której odbywa się redagowanie parametrów.
::       2. Odczyt danych z tabeli PORPAR i nadanie odpowiednich wartości polom tabeli tymczasowej.
::       3. Aktualizację wartości w tabeli PORPAR po redakcji pól tabeli tymczasowej.
::    Konfiguracja NIE wpływa na wygląd okna redagowania - każde pole tabeli tymczasowej (związane z parametrem) musi
::    być dodane indywidualnie do okna (patrz wyżej: \params).
::
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_pzd:=exec('is_pzd03','ppsf');
:: Parametry nieredagowalne (w tym systemowe).
_wuzast:=exec('obj_ntab_set','#array',,
   'SYMBOL','EnablePersonReplacementOnAbsRequest',
   'OPIS','Czy na wniosku urlopowym dawać do wyboru zastępstwo w wersji Softlab.HR',
   'WARTOSC','0',
   'MB_TYP',''
);
_zast_role:=exec('obj_ntab_set','#array',,
   'SYMBOL','ShowPersonReplacementWithRoles',
   'OPIS','Czy zastępstwa z rolami są dostępne w portalu?',
   'WARTOSC','1',
   'MB_TYP',''
);
_nb_kal:=exec('obj_ntab_set','#array',,
   'SYMBOL','AbsenceLengthBasedOnWorkSchedule',
   'OPIS','Czy wyliczanie godzin / dni absencji zliczać na podstawie kalendarza pracy?',
   'WARTOSC','0',
   'MB_TYP',''
);
_urlreh:=exec('obj_ntab_set','#array',,
   'SYMBOL','LimitOfAdditLeaveAndRehabilitLeave',
   'OPIS','Łączny limit urlopu dodatkowego i rehabilitacyjnego',
   'WARTOSC','21',
   'MB_TYP',''
);
_role_zaslu:=exec('obj_ntab_set','#array',,
   'SYMBOL','ReplacementRoleForProfDependency',
   'OPIS','Rola zastępcy przełożonego',
   'WARTOSC',exec('domyslny','zs_typ',1,0).KOD_KOD,
   'MB_TYP',''
);
{? ~_pzd
|| _cal_stop:=exec('obj_ntab_set','#array',,
      'SYMBOL','PersonWorkCalStopProcActive',
      'OPIS','Czy procedura do zakończenia czasu pracy dostępna?',
      'WARTOSC','',
      'MB_TYP','STRING[1]',
      'MB_NAZWA','Dostęp do procedury zakończenia czasu pracy'@,
      'get',"_a",
      'set',"_a"
   )
?};
_psf_okres:=exec('obj_ntab_set','#array',,
   'SYMBOL','WorkRelatedEventLimitPeriod',
   'OPIS','Tryb wprowadzania okresu limitu dla pracy poza siedzibą firmy.',
   'WARTOSC','Year',
   'MB_TYP',''
);
_psf_pd:=exec('obj_ntab_set','#array',,
   'SYMBOL','IsWorkRelEventPartTimeInHourAmt',
   'OPIS','Praca (poza siedzibą firmy) na część dnia jako: 0 - godz.od+godz.do, 1 - liczba godz.',
   'WARTOSC','1',
   'MB_TYP',''
);
:: Parametr na razie NIE jest wykorzystywany - limit wysyłany jest dla każdego pracownika indywidualnie.
::_limit:=KST_PAR.URL_LIM;
::exec('czytaj','#stalesys',,KST_PAR,'URL_LIM');
::_limit==KST_PAR.URL_LIM;
::_unzlim:=exec('obj_ntab_set','#array',,
::   'SYMBOL','LeaveOnRequestLimit',
::   'OPIS','Limit urlopu na żądanie',
::   'WARTOSC',$_limit,
::   'MB_TYP',''
::);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Parametry redagowalne.
_prcpact:=exec('obj_ntab_set','#array',,
   'SYMBOL','PortalRCP',
   'OPIS','Czy włączona jest współpraca z portalem powiązanym (webTerm)',
   'WARTOSC','',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Współpraca z portalem powiązanym (webTerm)'@,
   'get',"_a",
   'set',"_a"
);
_prcp:=exec('obj_ntab_set','#array',,
   'SYMBOL','LinkToRCP',
   'OPIS','Link do portalu powiązanego - czas pracy',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Link do portalu powiązanego - czas pracy'@,
   'get',"_a",
   'set',"_a"
);
_pextra:=exec('obj_ntab_set','#array',,
   'SYMBOL','LinkToExtra',
   'OPIS','Link do portalu powiązanego - aplikacje dodatkowe',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Link do portalu powiązanego - aplikacje dodatkowe'@,
   'get',"_a",
   'set',"_a"
);
_hrmail:=exec('obj_ntab_set','#array',,
   'SYMBOL','HRContactEmail',
   'OPIS','Adres email działu HR',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','E-mail działu HR'@,
   'get',"_a",
   'set',"_a"
);
_uwzalinf:=exec('obj_ntab_set','#array',,
   'SYMBOL','OverdueHolidayLeaveNotice',
   'OPIS','Uwaga dotycząca wykorzystania dostępnego urlopu zaległego',
   'WARTOSC','Zaległy urlop należy wykorzystać najpóźniej do dnia 30 września bieżącego roku.',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Urlop zaległy — uwaga'@,
   'get',"_a",
   'set',"_a"
);
_wu_dr0:=exec('obj_ntab_set','#array',,
   'SYMBOL','CanAddLeaveRequestWithNoWorkdays',
   'OPIS','Czy można dodać wniosek urlopowy z zerową liczbą dni roboczych',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Wniosek urlopowy bez dni roboczych'@,
   'get',"_a",
   'set',"_a"
);
_biproot:=exec('obj_ntab_set','#array',,
   'SYMBOL','KnowledgeBaseRootName',
   'OPIS','"Baza wiedzy i dokumenty" — tytuł elementu głównego',
   'WARTOSC','Wszystkie',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','"Baza wiedzy i dokumenty" — tytuł elementu głównego'@,
   'get',"_a",
   'set',"_a"
);
_biplabel:=exec('obj_ntab_set','#array',,
   'SYMBOL','KnowledgeBaseHowManyDayAddDate',
   'OPIS','Ile dni od dodania będą pokazywane dodatkowe etykiety',
   'WARTOSC','0',
   'MB_TYP','INTEGER',
   'MB_NAZWA','Liczba dni prezentacji dodatkowych etykiet'@,
   'get',"#_a",
   'set',"$_a"
);
_ulpmod:=exec('obj_ntab_set','#array',,
   'SYMBOL','ImprovementWithVerification',
   'OPIS','Czy opublikowanie ulepszenia ma kierować najpierw do etapu weryfikacji.',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Weryfikacja ulepszeń'@,
   'get',"_a",
   'set',"_a"
);
_oglmod:=exec('obj_ntab_set','#array',,
   'SYMBOL','AdvertisementWithVerification',
   'OPIS','Czy opublikowanie ogłoszenia ma kierować najpierw do etapu weryfikacji.',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Weryfikacja ogłoszeń'@,
   'get',"_a",
   'set',"_a"
);
_accptnot:=exec('obj_ntab_set','#array',,
   'SYMBOL','DisableAcceptanceNotification',
   'OPIS','Czy wyłączyć wysyłanie powiadomień dotyczących akceptacji?',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Akceptacja wniosków'@,
   'get',"_a",
   'set',"_a"
);
_pernot:=exec('obj_ntab_set','#array',,
   'SYMBOL','EnablePersonNotification',
   'OPIS','Czy włączone jest wysyłanie powiadomień oraz e-maili przez HR Portal?',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Pozostałe'@,
   'get',"_a",
   'set',"_a"
);
_okrpod:=exec('obj_ntab_set','#array',,
   'SYMBOL','IsDataPeriodBasedOnDepartments',
   'OPIS','Czy zakres dostępnych dla przełożonego danych o podwładnych ma być ograniczany okresem podwładności?',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Okres podwładności'@,
   'get',"_a",
   'set',"_a"
);
_sensabs:=exec('obj_ntab_set','#array',,
   'SYMBOL','ShowSesitivePersonAbsData4Manager',
   'OPIS','Czy prezentować przełożonemu typy zasiłków podwładnych?',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Typy zasiłków'@,
   'get',"_a",
   'set',"_a"
);
_zas_edit:=exec('obj_ntab_set','#array',,
   'SYMBOL','CanUserModifyReplWithRoleForProfDep',
   'OPIS','Umożliwienie edycji zastępstw urzędowych na Portal HR',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Możliwość edycji zastępstw urzędowych z poziomu portalu'@,
   'get',"_a",
   'set',"_a"
);
_zas_uniq:=exec('obj_ntab_set','#array',,
   'SYMBOL','CheckReplRoleIsUniqueForPeriod',
   'OPIS','Czy sprawdzać unikalność zastępstwa w ramach tej samej roli i okresu?',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Sprawdzanie unikalności zastępstw'@,
   'get',"_a",
   'set',"_a"
);
{? _pzd
|| _cal_act:=exec('obj_ntab_set','#array',,
      'SYMBOL','IsPersonWorkCalActive',
      'OPIS','Czy obsługa rejestracji czasu pracy przez pracownika aktywna?',
      'WARTOSC','0',
      'MB_TYP','STRING[1]',
      'MB_NAZWA','Rejestracja'@,
      'get',"{? _a='1' || 'T' || 'N' ?}",
      'set',"$(_a='T')"
   );
   _cal_stop:=exec('obj_ntab_set','#array',,
      'SYMBOL','PersonWorkCalStopProcActive',
      'OPIS','Czy rejestracja zakończenia czasu pracy dostępna?',
      'WARTOSC','',
      'MB_TYP','STRING[1]',
      'MB_NAZWA','Zakończenie'@,
      'get',"{? _a='1' || 'T' || 'N' ?}",
      'set',"$(_a='T')"
   )
|| _cal_act:=exec('obj_ntab_set','#array',,
      'SYMBOL','IsPersonWorkCalActive',
      'OPIS','Czy obsługa rejestracji czasu pracy przez pracownika aktywna?',
      'WARTOSC','0',
      'MB_TYP','STRING[1]',
      'MB_NAZWA','Obsługa rejestracji czasu pracy'@,
      'get',"_a",
      'set',"_a"
   )
?};
_cal_opt:=exec('obj_ntab_set','#array',,
   'SYMBOL','PersonWorkCalOption',
   'OPIS','Wybór wersji rejestrowania czasu pracy przez pracownika na kalendarzu',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Sposób rejestrowania czasu pracy'@,
   'get',"_a",
   'set',"_a"
);
:: https://confluence.assecobs.pl/pages/viewpage.action?spaceKey=WPE&title=3.10.+Parametry+chmurowe+dla+CHR
::
:: DEFAULT_MANAGEMENT_PORTAL_ADDRESS
:: DEFAULT_MANAGEMENT_PORTAL_GROUP
:: DEFAULT_MANAGEMENT_PORTAL_NAME
:: DEFAULT_PORTAL_ADDRESS
:: DEFAULT_PORTAL_GROUP
:: DEFAULT_PORTAL_NAME
::
:: LeaveOnRequestLimit - Limit urlopu na żądanie
:: IsLeavePlanModuleActivated - Czy moduł planowania urlopów jest włączony - parametr czeka na funkcjonalność
::                              planowania, pozwoli na wybór urlopu z planu podczas składania wniosku urlopowego


:: Zmienne będą użyte jako akronimy pól w tabeli tymczasowej - muszą mieć odpowiednią budowę i długość (8 znaków).
_cfg:=exec('obj_ntab_set','#array',
   ,'WUZAST'    ,_wuzast
   ,'ZASTROLE'  ,_zast_role
   ,'NB_KALL'   ,_nb_kal
   ,'URLREH'    ,_urlreh
   ,'ROLEZSL'   ,_role_zaslu
   ,'CALSTOP'   ,_cal_stop
   ,'PSF_OKRES' ,_psf_okres
   ,'PSF_PD'    ,_psf_pd
::   ,'UNZLIM'  ,_unzlim
);
_cfg1:=exec('obj_ntab_set','#array',_cfg
   ,'PRCPACT'   ,_prcpact
   ,'PRCP'      ,_prcp
   ,'HRMAIL'    ,_hrmail
   ,'UWZALINF'  ,_uwzalinf
   ,'WU_DR0'    ,_wu_dr0
   ,'BIPROOT'   ,_biproot
   ,'BIPLABEL'  ,_biplabel
   ,'ULPMOD'    ,_ulpmod
   ,'OGLMOD'    ,_oglmod
);
:: konieczne jest rozbicie na etapy (ograniczenie do 26 parametrów exec-a)
exec('obj_ntab_set','#array',_cfg1
   ,'ACCPTNOT'  ,_accptnot
   ,'PERNOT'    ,_pernot
   ,'PEXTRA'    ,_pextra
   ,'OKRPOD'    ,_okrpod
   ,'SENSABS'   ,_sensabs
   ,'ZASEDIT'   ,_zas_edit
   ,'ZASUNIQ'   ,_zas_uniq
   ,'CALACT'    ,_cal_act
   ,'CALOPT'    ,_cal_opt
)


\porpar_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.42]
:: OPIS: Tworzy tablicę tymczasową dla parametrów portalowych.
::   WE: [_a] - Tablica elementów nazwanych reprezentujących parametry działania portalu (patrz: \porpar_cfg).
::   WY: tabela tymczasowa
::----------------------------------------------------------------------------------------------------------------------
_cfg:={? var_pres('_a')>100 || _a || exec('porpar_cfg','portal_engine') ?};
_stru:=exec('tab_tmp','#table');

:: Parametry połączenia
_stru.add('TNNT','STRING[50]','Identyfikator dzierżawcy'@);
_stru.add('NAME','STRING[100]','Nazwa dzierżawcy'@);
_stru.add('USR','STRING[50]','Użytkownik'@);
_stru.add('PASS','STRING[50]','Hasło'@);
_stru.add('RURL','STRING[255]','Url usługi'@);
_stru.add('OURL','STRING[255]','Url autoryzacyjny'@);
_stru.add('SCOPE','STRING[50]','Zasięg autoryzacji'@);
_stru.add('WADL','STRING[255]','Url WADL'@);
_stru.add('ENV','STRING[20]','Środowisko'@);
:: Notyfikacje
_stru.add('ABC_URL','STRING[255]','Adres serwera notyfikacji'@);
_stru.add('ABC_PORT','INTEGER','Port serwera notyfikacji'@);
_stru.add('ABC_ENV','STRING[255]','Środowisko serwera notyfikacji'@);
:: Inne
_stru.add('PPOR','STRING[1]','Współpracownik na portalu'@);
_stru.add('UAKW','STRING[1]','Akceptacja ulepszeń'@);
_stru.add('OAKW','STRING[1]','Akceptacja ogłoszeń'@);
:: Parametry personelowe
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>''
   || _stru.add(_names[_lp],_cfg[_lp].MB_TYP,_cfg[_lp].MB_NAZWA)
   ?}
!};
_stru.create(1)


\porpar_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Inicjalizacja parametrów działania.
::   WE: [_a] [STRING] - Rodzaj konfiguracji (Jednofirmowa/Wielofirmowa) [domyślnie: 'J'].
::       [_b] [ARRAY]  - Tablica elementów nazwanych reprezentujących parametry działania portalu (patrz: \porpar_cfg).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & _a='W' || _a || 'J' ?};
_cfg:={? var_pres('_b')>100 || _b || exec('porpar_cfg','portal_engine') ?};

_firma:={? _typ='J' || exec('ref_firma','ustawienia') || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma);
{! _lp:=1 .. obj_len(_cfg)
|! _par:=_cfg[_lp];
   {? ~PORPAR.find_key(_par.SYMBOL,)
   || PORPAR.blank();
      PORPAR.FIRMA:=_firma;
      PORPAR.SYMBOL:=_par.SYMBOL;
      PORPAR.OPIS:=_par.OPIS;
      PORPAR.WARTOSC:=_par.WARTOSC;
      PORPAR.add()
   |? PORPAR.OPIS<>_par.OPIS
   || PORPAR.OPIS:=_par.OPIS;
      PORPAR.put()
   ?};
   obj_del(_par)
!};
PORPAR.cntx_pop();

~~


\porpar_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Formuła zapisuje do tabeli zmiany poczynione w oknie redagowania.
::   WE: [_a] [STRING] - Rodzaj konfiguracji (Jednofirmowa/Wielofirmowa) [domyślnie: 'J'].
::        _b  [ARRAY]  - Tablica elementów nazwanych reprezentujących parametry działania portalu (patrz: \porpar_cfg).
::        _c  [TABLE]  - Uchwyt tabeli tymczasowej.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & _a='W' || _a || 'J' ?};
_cfg:=_b;
_tab:=_c;

_firma:={? _typ='J' || exec('ref_firma','ustawienia') || null() ?};

PORPAR.cntx_psh();
PORPAR.index('SYMBOL');
PORPAR.prefix(_firma);
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>'' & PORPAR.find_key(_cfg[_lp].SYMBOL,)
   || _val:=_cfg[_lp].set(($('_a.%1' [_names[_lp]]))(_tab));
      {? PORPAR.WARTOSC<>_val
      || PORPAR.WARTOSC:=_val;
         PORPAR.put()
      ?}
   ?}
!};
PORPAR.cntx_pop();

~~


\GetConfigPortal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera konfigurację z pliku konfiguracyjnego i zachowuje w polach XINFO
::   WE: [_a] - plik konfiguracyjny (obiekt plikowy), jeżeli brak, to wyświetlony będzie dialog wyboru pliku
::   WY: 0/1 czy udało się wgrać konfigurację
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_result:=0;

:: Zakładam folder tymczasowy na serwerze do którego wgrany zostanie plik z terminala
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path();

   {? var_pres('_a')=exec('type_of_file','#var')
   || _file:=_a
   || _sep:=exec('sep','#file',2);
      _filepath:=_pth+_sep+$SYSLOG.tm_stamp()+'.xml';
      _upload_res:=dlg_upload(_filepath,0,'.xml',0);

      {? type_of(_upload_res)=type_of('')
      || {? _upload_res<>''
         || _file:=fopen(_filepath,'ur',0,,1)
         || FUN.emsg('Nie udało się zapisać pliku konfiguracyjnego po stronie serwera.'@)
         ?}
      ?}
   ?};

   {? var_pres('_file')=exec('type_of_file','#var')
   ||
      _cfg:=obj_new(
         'Name','Identifier','Login','Password','API_REST_Url','API_OAUTH_Url','API_OAUTH_Scope','API_REST_WADL_Url',
         'Address','Port','EnvironmentId'
      );
      _names:=obj_ntab_names(_cfg);

      {? _file.is_open()
      || _tab:=xml_tparse(_file);
         _ndx:=_tab.ndx_tmp(,,'NAME',,);
         _tab.index(_ndx);
         {! _it:=1.. obj_len(_names)
         |! _tab.prefix(_names[_it],);
            {? _tab.first()
            || ($('_a.'+_names[_it]))(_cfg):=_tab.VAL
            ?}
         !}
      ?};
      {? var_pres('Name',_cfg)=type_of('') & _cfg.Name<>'' &
         var_pres('Identifier',_cfg)=type_of('') & _cfg.Identifier<>'' &
         var_pres('Login',_cfg)=type_of('') & _cfg.Login<>'' &
         var_pres('Password',_cfg)=type_of('') & _cfg.Password<>'' &
         var_pres('API_REST_Url',_cfg)=type_of('') & _cfg.API_REST_Url<>'' &
         var_pres('API_OAUTH_Url',_cfg)=type_of('') & _cfg.API_OAUTH_Url<>'' &
         var_pres('API_OAUTH_Scope',_cfg)=type_of('') & _cfg.API_OAUTH_Scope<>'' &
         var_pres('API_REST_WADL_Url',_cfg)=type_of('') & _cfg.API_REST_WADL_Url<>''
      || {? FUN.ask('Czy wpisać dane konfiguracyjne dla dzierżawcy: %1?'@[_cfg.Name])
         || {? XINFO.POR_CONF='W'
            || XINFO.POR0TNNT:=_cfg.Identifier;
               XINFO.POR0NAME:=_cfg.Name;
               XINFO.POR0USR:=_cfg.Login;
               XINFO.POR0PASS:=_cfg.Password;
               XINFO.POR0RURL:=_cfg.API_REST_Url;
               XINFO.POR0OURL:=_cfg.API_OAUTH_Url;
               XINFO.POR0SCOP:=_cfg.API_OAUTH_Scope;
               XINFO.POR0WADL:=_cfg.API_REST_WADL_Url;
               {? var_pres('Name',_cfg)=type_of('') & _cfg.Name<>'' &
                  var_pres('EnvironmentId',_cfg)=type_of('') & _cfg.EnvironmentId<>''
               || XINFO.POR0ABCU:=_cfg.Address;
                  XINFO.POR0ABCE:=_cfg.EnvironmentId
               || XINFO.POR0ABCU:='';
                  XINFO.POR0ABCE:=''
               ?}
            || XINFO.POR_TNNT:=_cfg.Identifier;
               XINFO.POR_NAME:=_cfg.Name;
               XINFO.POR_USR:=_cfg.Login;
               XINFO.POR_PASS:=_cfg.Password;
               XINFO.POR_RURL:=_cfg.API_REST_Url;
               XINFO.POR_OURL:=_cfg.API_OAUTH_Url;
               XINFO.POR_SCOP:=_cfg.API_OAUTH_Scope;
               XINFO.POR_WADL:=_cfg.API_REST_WADL_Url;
               {? var_pres('Name',_cfg)=type_of('') & _cfg.Name<>'' &
                  var_pres('EnvironmentId',_cfg)=type_of('') & _cfg.EnvironmentId<>''
               || XINFO.POR_ABCU:=_cfg.Address;
                  XINFO.POR_ABCE:=_cfg.EnvironmentId
               || XINFO.POR_ABCU:='';
                  XINFO.POR_ABCE:=''
               ?}
            ?};
            exec('por_conf_czytaj','portal_engine');
            _result:=1;
            win_disp()
         ?}
      || FUN.emsg('Błędny plik konfiguracyjny: %1.'@[_filename])
      ?}
   ?}
|| FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@)
?};
_result


::======================================================================================================================
:: Obsługa parametryzacji kolumn/pól dodatkowych na portalu
::======================================================================================================================


\mwac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Nazwa pliku MWAC, w którym przechowywana jest definicja serwisu
::----------------------------------------------------------------------------------------------------------------------
'portal.mwac'


\portalk_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Definiowanie dodatkowych kolumn/pól oraz tabel/buforów na portalu
::----------------------------------------------------------------------------------------------------------------------
_client:=exec('client','__mwac',exec('mwac','portal_engine'));
{? ~_client.Valid
|| FUN.info('Inicjalizacja modułu obsługi klienta MacroWebApi nie powiodła się.'@);
   return(0)
?};
exec('portaljson_decl','portal_engine');

exec('czytaj','#stalesys',,XINFO,'POR_CONF');
{? XINFO.POR_CONF='J'
|| _firma:=REF.FIRMA;
   _firma_name:='firma %1'@[REF.FIRMA().SYMBOL]
|| _firma:=null();
   _firma_name:='wszystkie firmy'@
?};

PORTALK.cntx_psh();
PORTALB2.cntx_psh();

_werk:=PORTALK.mk_sel('Definicje pól dodatkowych'@,,,'portalkwer',,,,,'U');
PORTALK.win_fld(_werk,,'FLD');
PORTALK.win_fld(_werk,,'DESC',,,93);
PORTALK.win_fld(_werk,,'PRIORITY',,,-8,,,'Priorytet'@);
PORTALK.win_fld(_werk,,'ENABLED',,,-8,,,,,,2,,"'T'","'N'");
_formula:="
   exec('portalk_efld_opt','portal_engine');
   1
";
PORTALK.win_act(_werk,0,'Dołącz',,,,_formula);
PORTALK.win_act(_werk,1,'Dołącz',,,,_formula);
PORTALK.win_act(_werk,,'Popraw',,,,_formula);
PORTALK.win_act(_werk,,'Usuń');
_formula:="
   params_set(params_get());
   {? PORTALK.edit(\"params_exec('portalk_chk','portal_engine',0)\")
   || PORTALK.add()
   ?}
";
PORTALK.win_act(_werk,,'Formuła','K&opiuj'@@,,,_formula,,,,,,'O');
_formula:="
   PORTALK.ENABLED:='T';
   PORTALK.put()
";
_formula_bg:="
   1
";
PORTALK.win_act(_werk,,'Formuła','Włącz'@@,,,_formula,,,1,_formula_bg,,'W');
_formula:="
   PORTALK.ENABLED:='N';
   PORTALK.put()
";
_formula_bg:="
   1
";
PORTALK.win_act(_werk,,'Formuła','W&yłącz'@@,,,_formula,,,1,_formula_bg,,'Y');
PORTALK.win_act(_werk,,'Kolejność');
PORTALK.win_act(_werk,0,'Rekord',,,,,"params_exec('portalk_chk','portal_engine',-menu_txt()='popraw')");
PORTALK.win_act(_werk,1,'Rekord',,,,,"params_exec('portalk_chk','portal_engine',-menu_txt()='popraw')");
_formula:="
   exec('portalk_efld_opt','portal_engine');
   PORTALK.display();
   ~~
";
PORTALK.win_act(_werk,0,'Wyświetl',,,,_formula);
PORTALK.win_edit('RED');

_werb:=PORTALB2.mk_sel('Definicje tabel dodatkowych'@,,,'portalbwer',,,,,'U');
PORTALB2.win_fld(_werb,,'ENTITY');
PORTALB2.win_fld(_werb,,'TAB_ACR',,,-10);
PORTALB2.win_fld(_werb,,'FORM_UPD',,,-50,,,'Formuła — obróbka danych pobieranych'@);
PORTALB2.win_fld(_werb,,'FORM_RRN',,,-50,,,'Formuła — wyznaczanie %1'@['RowRightsName']);
PORTALB2.win_act(_werb,0,'Dołącz',,,,,"exec('init_ext_sync_id','portal_engine')");
PORTALB2.win_act(_werb,1,'Dołącz',,,,,"exec('init_ext_sync_id','portal_engine')");
PORTALB2.win_act(_werb,,'Popraw',,,,,"exec('init_ext_sync_id','portal_engine')");
PORTALB2.win_act(_werb,,'Usuń',,,,,"exec('init_ext_sync_id','portal_engine')");
PORTALB2.win_act(_werb,,'Formuła','Prawa do &wierszy'@@,,,"exec('portalr_select','portal_engine')",,,,,,'W');
PORTALB2.win_btn(_werb,'text=%1,panel=bottom,align=begin'['Prawa do &wierszy'@],'menu:W');
PORTALB2.win_act(_werb,,'Kolejność');
PORTALB2.win_act(_werb,0,'Rekord',,,,,"exec('portalb_chk','portal_engine',-menu_txt()='popraw')");
PORTALB2.win_act(_werb,1,'Rekord',,,,,"exec('portalb_chk','portal_engine',-menu_txt()='popraw')");

_grp:=PORTALK.grp_make(
   'Kastomizacja portalu: %1'@[_firma_name],"grp_disp(PORTALB2,params_get().WERB)",'#portalk',,,,,'html_maximized'
);
PORTALK.grp_sel(_grp,,_werk,,,,,,,,,,'maximized_with_title');
PORTALK.grp_splt(_grp,,'horizontal','bottom',15);
PORTALK.grp_sel(_grp,PORTALB2,_werb,,,,,,,,,,'maximized_with_title');
PORTALK.win_sel(_grp);

_redb:=PORTALB2.mk_edit('Tabela dodatkowa'@,,'portalbred');
PORTALB2.win_esep(_redb,'Powiązania'@);
PORTALB2.win_efld(_redb,,'ENTITY',,,100,,,,,,,'F3_button=1');
PORTALB2.efld_opt(_redb,'mark=1',,'ENTITY');
PORTALB2.win_efld(_redb,,'TAB_ACR',,,100,,,,,,,'F3_button=1');
PORTALB2.efld_opt(_redb,'mark=1',,'TAB_ACR');
PORTALB2.win_esep(_redb,'Obróbka danych pobieranych'@);
PORTALB2.win_efld(_redb,,'FORM_UPD',,,100,,,,,,,'F3_button=1');
PORTALB2.win_esep(_redb,'Wyznaczanie %1'@['RowRightsName']);
PORTALB2.win_efld(_redb,,'FORM_RRN',,,100,,,,,,,'F3_button=1');
exec('ok_esc','#window',PORTALB2,_redb);
PORTALB2.win_edit(_redb);

PORTALK.prefix(); PORTALK.first();
PORTALB2.prefix(); PORTALB2.first();

params_set(
   'firma',_firma,
   'client',_client,
   'obj',obj_new(@.CLASS.PortalJSON),
   'WERB',_werb,
   'WERK',_werk
);

PORTALK.select();

PORTALK.cntx_pop();
PORTALB2.cntx_pop();
~~


\portalk_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Formuła przed redagowanie pól tabeli PORTALK
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=1;

{? _afld='ENTITY'
|| ~~

|? _afld='FLD'
|| ~~

|? _afld='FLDTYPE'
|| ~~

|? _afld='FORMULA'
|| ~~
?};

_result


\portalk_fld_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Formuła na F3 dla pól tabeli PORTALK
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=~~;

{? _afld='ENTITY'
|| _result:=exec('entity_select','portal_engine',fld(),1,1)

|? _afld='FLD'
|| _result:=exec('exf_select','portal_engine',PORTALK.ENTITY,fld())

|? _afld='FLDTYPE'
|| _result:=exec('tsl_select','portal_engine',PORTALK.FLD,fld())

|? _afld='FORMULA'
|| _result:=fld();
   _exec:=exec('parse_exec','#file',fld());
   _fml:=exec('select_formula','#file',,_exec.FILE);
   {? _fml<>''
   || _fml:=gsub(_fml,'.m.fml','.fml');
      _split:=spli_str(_fml,'\\');
      {? obj_len(_split)>1
      || _result:='params_exec(\''+_split[1]+'\',\''+_split[2]-4+'\')'
      ?}
   ?}

|? _afld='LKUPTYPE'
|| _tab:=exec('typ_listy_tab','portal_slowniki',exec('customField','portal_slowniki'));
   _wer:=_tab.mk_sel('Kody typów'@,,,'#porslo_type_f3',,,8,,'U');
   _tab.win_fld(_wer,,'KOD',,,20,,,'Kod'@,,'Kod typu'@);
   _tab.win_fld(_wer,,'OPIS',,,30,,,'Opis'@,,'Opis typu'@);
   _tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
   _tab.win_sel(_wer);
   _tab.prefix();
   {? fld()=''
   || _tab.first()
   || _tab.find_key(fld())
   ?};
   {? _tab.select(,1,-1)
   || _result:=_tab.KOD
   ?}

|? _afld='LKUPCODE'
|| _por_conf:=exec('por_conf_firma','portal_lib',exec('ref_firma','ustawienia'));
   {? ~_por_conf.ok || return(_result) ?};
   PORSLO.cntx_psh();
   PORSLO.index('SYSTEM');
   PORSLO.prefix('N',_por_conf.firma,exec('customField','portal_slowniki'));
   PORSLO.win_edit('ULW');
   _wer:=PORSLO.mk_sel('Uniwersalne listy wartości'@,,,'porslower',,,,,'U');
   PORSLO.win_fld(_wer,,'CODE',,,25);
   PORSLO.win_fld(_wer,,'OPIS',,,25);
   PORSLO.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
   PORSLO.win_sel(_wer);
   {? PORSLO.select(,1,-1)
   || _result:=PORSLO.CODE
   ?};
   PORSLO.cntx_pop()

?};

_result


\entity_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca tabelę tymczasową z listą encji webserwisu - zakładamy istnienie metod kończących się na 'Modify'
::   WE: _a [NUMBER] - custom - czy zwracać wszystkie encje [0], czy tylko te, które mają kastomizowane pola (1),
::                       tylko te, które dotyczą dodatkowych buforów (2)
::   WY: Tabela tymczasowa lub ~~.
::----------------------------------------------------------------------------------------------------------------------
_client:=params_get().client;

_custom:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_tab:=tab_tmp(1,
   'ENTITY','STRING[50]','Encja'@,
   'FILLED','INTEGER','Szablon uzupełniony?'@,
   'TEMPLATE','SYS_MEMO','Szablon'@
);

_methods:=exec('methods_table','#mwac',_client);
{? _methods.first()
|| {!
   |? {? _methods.METHOD+6='Modify'
      || {? _custom=2
         || _add:=0;
            {? 7+_methods.METHOD='sl_ext_'
            || _add:=1
            ?}
         |? _custom=1
         || _add:=0;
            {? 7+_methods.METHOD='sl_ext_'
            || PORTALB2.cntx_psh();
               PORTALB2.index('ENTITY');
               PORTALB2.prefix(_methods.METHOD-6,);
               _add:=PORTALB2.first();
               PORTALB2.cntx_pop()
            || _ometh:=params_get().client.getMethod(_methods.METHOD);
               {? _ometh.Valid
               || {? _ometh.getRequestTemplate()*'__exf__' || _add:=1 ?}
               ?};
               obj_del(_ometh)
            ?}
         || _add:=1
         ?};
         {? _add
         || _tab.ENTITY:=_methods.METHOD-6;
            _tab.add()
         ?}
      ?};
      _methods.next()
   !}
?};

_tab


\entity_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wywołuje selekcję tabeli encji webserwisu - zakładamy istnienie metod kończących się na 'Modify'
::   WE: _a [STRING] - Nazwa encji, od której zacząć selekcję.
::       [_b] [NUMBER] - Czy prezentować szablon? [0*/1].
::       [_c] [NUMBER] - custom - czy zwracać wszystkie encje [0], czy tylko te, które mają kastomizowane pola (1),
::                       tylko te, które dotyczą dodatkowych buforów (2)
::   WY: nazwa wybranej encji / ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_client:=params_get().client;

_entity:={? var_pres('_a')=type_of('') || _a || '' ?};
_templ:=var_pres('_b')=type_of(0) & _b;
_custom:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_result:=~~;

_tab:=exec('entity_table','portal_engine',_custom);
_tab.prefix();
_tab.find_key(_entity);

_wer:=_tab.mk_sel('%1 — %2'['Encje webserwisu'@,{? _custom=2 || 'bufory'@ |? _custom=1 || 'kastomizowane' || 'wszystkie'@ ?}],,,'#webentities',,,,,'U');
_tab.win_fld(_wer,,'ENTITY');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
{? _templ
|| _tab.win_act(_wer,,'Formuła','Szablon'@@,,'Prezentacja szablonu'@,"
      _tab:=cur_tab(1,1);
      {? ~_tab.FILLED
      || _ometh:=params_get().client.getMethod(_tab.ENTITY+'Modify');
         {? _ometh.Valid
         || _templ:=gsub(_ometh.getRequestTemplate(),spli_str('{;,',';'),spli_str('{%1;,%1' [%10],';'));
            _tab.memo_set(_templ,'TEMPLATE');
            _tab.FILLED:=1;
            _tab.put();
            _tab.memo_put(,'TEMPLATE')
         ?}
      ?};
      _tab.memo_view(,'TEMPLATE')
    ")
?};
_tab.win_sel(_wer);
params_set('client',_client);
{? _tab.select(,1,5)
|| _result:=_tab.ENTITY
?};

_result


\exf_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca tabelę tymczasową z listą pól dodatkowych encji
::   WE: _a [STRING] - Nazwa encji
::   WY: Tabela tymczasowa lub ~~.
::----------------------------------------------------------------------------------------------------------------------
_client:=params_get().client;
_obj:=params_get().obj;

_entity:={? var_pres('_a')=type_of('') || {? _a='' || return() || _a ?} || return() ?};

_method:=_client.getMethod(_entity+'Modify');
{? _method.Valid
|| _obj.init(_method.getRequestTemplate());

   _tab:=tab_tmp(2
      ,'PARENT','TREE_REF','Nadrzędny'@
      ,'EXF','STRING[50]','Pole'@
      ,'TYP','STRING[1]','Typ'@
      ,'NR','INTEGER','Numer'@
      ,'DESC','STRING[50]','Opis'@
   );

   _tab_fld:=_obj.getFlds();
   _tab_fld.prefix('__exf__');
   {? _tab_fld.first()
   || {!
      |? _tab.EXF:=_tab_fld.NAME;
         _tab.TYP:=1+(_tab.EXF+4);
         _tab.NR:=#(_tab.EXF+2);
         _tab.DESC:='%1 %2'
            [  {? _tab.TYP='d' || 'Data'@ |? _tab.TYP='s' || 'Tekst'@ |? _tab.TYP='n' || 'Liczba'@ || '' ?},
               form(_tab.NR,-2)
            ];
         _tab.add();
         _tab_fld.next()
      !}
   ?}
|| _tab:=~~
?};

_tab


\exf_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wywołuje selekcję tabeli pól dodatkowych encji
::   WE: _a [STRING] - Nazwa encji, dla której obsługiwać pola
::       [_b] [STRING] - Nazwa pola, od którego zacząć selekcję.
::   WY: nazwa wybranego pola / ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_client:=params_get().client;

_result:=~~;

_entity:={? var_pres('_a')=type_of('') || _a || return() ?};
_exf:={? var_pres('_b')=type_of('') || _b || '' ?};

_tab:=exec('exf_table','portal_engine',_entity);
{? type_of(_tab)<100
|| FUN.info('Brak zdefiniowanej encji, nie można wyświetlić pól dodatkowych.'@)
|| _tab.prefix();
   {? _tab.first()
   || _tab.blank();
      _tab.EXF:=_exf;
      _tab.find_rec(1);
      _wer:=_tab.mk_sel('Dodatkowe pola encji'@,,,'webextfields',,,,,'U');
      _tab.win_fld(_wer,,'EXF');
      _tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
      _tab.win_sel(_wer);
      {? _tab.select(,1,5)
      || _result:=_tab.EXF
      ?}
   || FUN.info('Encja %1 nie zawiera pól dodatkowych.'@[_entity])
   ?}
?};

_result


\tsl_table
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zwraca tabelę tymczasową z typami danych obsługiwanymi na portalu
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(2
  ,'FLD','STRING[1]','Typ pola'@
  ,'TYP','STRING[20]','Typ danych'@
  ,'OPIS','STRING[20]','Opis'@
);

_tab.FLD:='n'; _tab.TYP:='TSLAmount'; _tab.OPIS:='Zmiennoprzecinkowy'; _tab.add();
_tab.FLD:='n'; _tab.TYP:='TSLBoolean'; _tab.OPIS:='Logiczny'; _tab.add();
_tab.FLD:='d'; _tab.TYP:='TSLDate'; _tab.OPIS:='Data'; _tab.add();
_tab.FLD:='d'; _tab.TYP:='TSLDateTime'; _tab.OPIS:='Data i czas'; _tab.add();
_tab.FLD:='s'; _tab.TYP:='TSLDescription'; _tab.OPIS:='Tekst'; _tab.add();
_tab.FLD:='n'; _tab.TYP:='TSLInt'; _tab.OPIS:='Całkowity'; _tab.add();
_tab.FLD:='s'; _tab.TYP:='TSLMemo'; _tab.OPIS:='Tekst wielolinijkowy'; _tab.add();
_tab.FLD:='n'; _tab.TYP:='TSLMoneyWL'; _tab.OPIS:='Kwota'; _tab.add();
_tab.FLD:='d'; _tab.TYP:='TSLTime'; _tab.OPIS:='Czas'; _tab.add();

_tab


\tsl_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wywołuje selekcję tabeli typów danych obsługiwanymi na portalu
::   WE: _a [STRING] - Nazwa pola, dla której obsługiwać typy
::       [_b] [STRING] - aktualna wartość
::   WY: nazwa wybranego typu danych / ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_client:=params_get().client;

_result:=~~;

_fld:={? var_pres('_a')=type_of('') || _a || return() ?};
_fld_type:=1+(_fld+4);
_tsl:={? var_pres('_b')=type_of('') || _b || '' ?};

_tab:=exec('tsl_table','portal_engine');

{? type_of(_tab)>100
|| _tab.prefix(_fld_type);
   {? _tab.first()
   || _tab.find_key(_tsl);
      _wer:=_tab.mk_sel('Typy danych'@,,,'tsltypes',,,10,,'U');
      _tab.win_fld(_wer,,'TYP');
      _tab.win_fld(_wer,,'OPIS');
      _tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
      _tab.win_sel(_wer);
      {? _tab.select(,1,5)
      || _result:=_tab.TYP
      ?}
   ?}
?};

_result


\portalk_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Formuła po redagowaniu pól w tabeli PORTALK
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=1;

{? _afld='ENTITY'
|| {? fld()<>''
   || _tab:=exec('entity_table','portal_engine',1);
      _tab.prefix(fld(),);
      {? ~_tab.first()
      || FUN.info('W serwisie nie ma zdefiniowanej encji %1.'@[fld()]);
         _result:=0
      ?}
   ?}

|? _afld='FLD'
|| {? fld()<>''
   || _tab:=exec('exf_table','portal_engine',PORTALK.ENTITY);
      {? type_of(_tab)<100
      || FUN.info('Brak zdefniowanej encji, nie można zweryfikować definicji pola.'@);
         _result:=0
      || _tab.blank();
         _tab.EXF:=fld();
         {? ~_tab.find_rec()
         || FUN.info('W encji %1 nie ma zdefiniowanego pola %2.'@[PORTALK.ENTITY,fld()]);
            _result:=0
         ?}
      ?}
   ?}

|? _afld='FLDTYPE'
|| {? fld()<>''
   || _tab:=exec('tsl_table','portal_engine');
      _tab.prefix(1+(PORTALK.FLD+4),fld(),);
      {? ~_tab.first()
      || FUN.info('Dla pola %1 nie zdefiniowano typu %2.'@[PORTALK.FLD,fld()]);
         _result:=0
      ?}
   ?}

|? _afld='FORMULA'
|| ~~

|? _afld='LKUPTYPE'
|| {? fld()=''
   || PORTALK.LKUPFLD:='';
      PORTALK.LKUPCODE:=''
   || _tab:=exec('typ_listy_tab','portal_slowniki',exec('customField','portal_slowniki'));
      _tab.prefix(fld(),);
      {? _tab.first()
      || PORTALK.LKUPFLD:=exec('customField','portal_slowniki');
         exec('portalk_efld_opt','portal_engine')
      || FUN.info('Typ listy wartości %1 nie jest obsługiwany.'@[fld()]);
         _result:=0
      ?}
   ?}

?};

_result


\portalk_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Akcja 'po rekord' w oknie tabeli PORTALK
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_chk:=__CHK.record(PORTALK,,'ENTITY','FLD','DESC','GRIDDESC','HINT','FLDTYPE','GRIDWDTH');
{? _chk=''
|| _chk:=__CHK.index(PORTALK,_a);
   {? _chk<>''
   || _chk:='ENTITY'
   ?}
?};
{? _chk=''
|| {? PORTALK.FLD<>''
   || _tab:=exec('exf_table','portal_engine',PORTALK.ENTITY);
      {? type_of(_tab)<100
      || FUN.info('Brak zdefniowanej encji, nie można zweryfikować definicji pola.'@);
         _chk:='FLD'
      || _tab.blank();
         _tab.EXF:=PORTALK.FLD;
         {? ~_tab.find_rec()
         || FUN.info('W encji %1 nie ma zdefiniowanego pola %2.'@[PORTALK.ENTITY,PORTALK.FLD]);
            _chk:='FLD'
         ?};
         obj_del(_tab)
      ?}
   ?}
?};
{? _chk=''
|| {? PORTALK.FLDTYPE<>''
   || _tab:=exec('tsl_table','portal_engine');
      _tab.prefix(1+(PORTALK.FLD+4),PORTALK.FLDTYPE,);
      {? ~_tab.first()
      || FUN.info('Dla pola %1 nie zdefiniowano typu %2.'@[PORTALK.FLD,PORTALK.FLDTYPE]);
         _chk:='FLDTYPE'
      ?};
      obj_del(_tab)
   ?}
?};
{? _chk=''
|| {? ~exec('valid_formula','#field',cur_tab(1,1).FORMULA)
   || _chk:='FORMULA'
   ?}
?};
_chk


\formula
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca treść formuły dla danego zapisu, jeśli brak to formułę zwracającą ~~
::   WE: _a - nazwa pola, np. '__exf__chr_PersonContract_s_01'
::----------------------------------------------------------------------------------------------------------------------
_fld_name:=_a;

_formula:="~~";

PORTALK.cntx_psh();
PORTALK.index('FLD');
PORTALK.prefix(_fld_name,);
{? PORTALK.first()
|| _formula:={? | PORTALK.FORMULA='' || "~~" || $PORTALK.FORMULA ?}
?};
PORTALK.cntx_pop();

_formula


\portalu_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Selekcja tabeli uprawnień do funkcjonalności portalu
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'POR_CONF');
{? XINFO.POR_CONF='J'
|| _firma:=REF.FIRMA;
   _firma_name:='firma %1'@[REF.FIRMA().SYMBOL]
|| _firma:=null();
   _firma_name:='wszystkie firmy'@
?};

params_set(
   'firma',_firma
);

_test:=0;

PORTALU.cntx_psh();

_wer:=PORTALU.mk_sel(
   'Uprawnienia do funkcjonalności portalu: %1'@[_firma_name],'P',,'portaluwer',,,,,'U'
);
PORTALU.win_fld(_wer,,'LOGIN',,,50);
PORTALU.win_fld(_wer,,'OPR_NAME',,,50);
PORTALU.win_fld(_wer,,'ENABLED',,,,,,,,,2,,"'T'","'N'");
:: UWAGA: funkcje modyfikacji zapisów tylko testowo!!!
{? _test
|| PORTALU.win_act(_wer,,'Usuń',,,,,,,1)
?};
:: UWAGA: włączanie i wyłączanie zapisów tylko testowo!!!
{? _test
|| _fb:="PORTALU.ENABLED:='T'; PORTALU.put()";
   PORTALU.win_act(_wer,,'Formuła','Włąc&z'@@,,,_fb,,,1,,,'Z');
   _fb:="PORTALU.ENABLED:='N'; PORTALU.put()";
   PORTALU.win_act(_wer,,'Formuła','W&yłącz'@@,,,_fb,,,1,,,'Y')
?};
_fb:="exec('portalu_update','#portal',1)";
PORTALU.win_act(_wer,0,'Formuła','Aktualizuj'@@,,,_fb,,,,,,'A');
PORTALU.win_act(_wer,1,'Formuła','Aktualizuj'@@,,,_fb,,,,,,'A');
PORTALU.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Aktualizuj'@],'menu:A');
_fb:="exec('portalu_send','portal_engine')";
PORTALU.win_act(_wer,0,'Formuła','Wyślij'@@,,,_fb,,,,,,'W');
PORTALU.win_act(_wer,1,'Formuła','Wyślij'@@,,,_fb,,,,,,'W');
PORTALU.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Wyślij'@],'menu:W');
_fb:="exec('portalu_tree','portal_engine')";
PORTALU.win_act(_wer,0,'Formuła','Drzewo'@@,,,_fb,,,,,,'D');
PORTALU.win_act(_wer,1,'Formuła','Drzewo'@@,,,_fb,,,,,,'D');
PORTALU.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','PORTALU#01')",,,,,,'L');
PORTALU.win_act(_wer,,'Kolejność');
PORTALU.win_sel(_wer);

:: Trzeba pobrać informacje przed select-em, bo tą metodą "zabija" system
::_fb:="
::   _tab:=proc_exe('new_sync@synchro','PORTAL_CFG',0,'PORTALU',10000);
::   _tab.index(_tab.ndx_tmp(,,'ACR',,,'REF',,));
::   _tab.prefix('PORTALU',$PORTALU.ref());
::   {? _tab.first()
::   || 'xwin16.png:184'
::   || exec('pusta','#icon')
::   ?}
::";
::PORTALU.win_fml(_wer,,'ENABLED',,'ICON_BEFORE',_fb);

PORTALU.index('LOGIN');
PORTALU.prefix('U');
PORTALU.select();

PORTALU.cntx_pop();
~~


\GetDataAboutEntitiesToSync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobiera zbiorczą informację o danych do pobrania przez API
::   WE: [_a] - przeznaczenie danych (kod lub lista kodów oddzielonych przecinkami)
::       [_b] - czy wyświelać utworzoną tabelę ([0]/1)
::   WY: ~~ / utworzona tabela
::----------------------------------------------------------------------------------------------------------------------
_pd:={? var_pres('_a')=type_of('') || spli_str(_a,',') || spli_str('PORTAL',',') ?};
_display:={? var_pres('_b')=type_of(0) || _b || 1 ?};

:: Aktywne metody "Get" typu "Odbieranie" ze wskazanych przeznaczeń danych
_tab:=tab_tmp(1,'ENTITY','STRING[100]','Encja'@,'DATE','STRING[30]','Data'@,'ID','REAL','Identyfikator'@);
SYNC_MWA.cntx_psh();
SYNC_MWA.index('PD_AKT');
{! _it:=1.. obj_len(_pd)
|! SYNC_MWA.prefix(_pd[_it],'T');
   {? SYNC_MWA.first()
   || {!
      |? {? SYNC_MWA.TYPE=exec('mwac_type_receive','synchro') & SYNC_MWA.METHOD+3='Get'
         || _tab.ENTITY:=SYNC_MWA.METHOD-3;
            _sync_mwa_result:=exec('sync_mwa_result_get','synchro',SYNC_MWA.ref());
            _pos:=_sync_mwa_result*'|';
            _tab.DATE:={? _pos=0 || _sync_mwa_result || (_pos-1)+_sync_mwa_result ?};
            _tab.ID:={? _pos=0 || 0 || #(_pos-_sync_mwa_result) ?};
            _tab.add()
         ?};
         SYNC_MWA.next()
      !}
   ?}
!};
SYNC_MWA.cntx_pop();

KOMM.init(,,'Informacja o danych do pobrania przez API'@);
_result:=exec('run_mwac','sync_mwa','PORTAL_CFG','SL_GETBYPOSTDATAABOUTENTITIESTOSYNC',0,,_tab);
{? _display
|| KOMM.select()
?};
{? _display & type_of(_result)>100
|| exec('select','#table',_result)
?};
_result


\SENDALLERRORSTOCLOUD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyła logi ERP na portal przez API
::   WY: data-godzina ostatniej aktualizacji (__Last_SortValue z chmury)
::----------------------------------------------------------------------------------------------------------------------
_sync_pd:='PORTAL_CFG';
_log_tab:='S01';
_method_name:='SL_SENDALLERRORSTOCLOUD';

SYNC_MWA.cntx_psh();
SYNC_MWA.index('PD_METH1');
SYNC_MWA.prefix(_sync_pd,exec('mwac_type_exec','synchro'),_method_name,'T');

_loop:=1;
{!
|?
:: Odczytujemy poprzednią wartość wyniku przetwarzania
   {? SYNC_MWA.first() & exec('sync_mwa_result_get','synchro',SYNC_MWA.ref())<>''
   ||
::    Korekta 0,001 dodana dla pewności zachowania nierówności (być może nie będzie potrzebna)
::      _req_time+=0.001
      _datetime:=iso_datetime_value_utc(iso_datetime_parse_utc(exec('sync_mwa_result_get','synchro',SYNC_MWA.ref())).utc+0.001);
      _datetime:=gsub(gsub(_datetime,'T',' '),'-','/')
   || _datetime:='2000/01/01 00:00:00.000'
   ?};

:: Przygotowanie danych
:: - pętla z pobieraniem za każdym razem TOP 100 z przefiltrowanej zawartości loga, dopóki jest zawartość
   _top:=100;

   _tab:=sql(""+"
      select top :_a *
      from @:_b
      where
         position('|PORTAL' in APP_STAT)>0
         and position('|F::_c|' in APP_STAT)>0
         and (position('|X|' in APP_STAT)>0 or substr(STATUS,1,3)='ERR')
         and DATETIME>':_d'
         and METHOD<>':_e'
      order by IDA
   ",_top,_log_tab,__Firma,_datetime,_method_name);

::   exec('select','#table',_tab);

:: Znacznik czasowy aktualizacji jest zapamiętywany (_result)
   _result:='';
   {? _tab.first()
   || _result:=exec('run_mwac','sync_mwa',_sync_pd,_method_name,1,,_tab);
::    Warunek wyjścia - błąd
      {? type_of(_result)=type_of(0) & _result=0
      || _loop:=0
      ?}
:: Warunek wyjścia - pusta tabela
   || _loop:=0
   ?};

   obj_del(_tab);

   _loop
!};

SYNC_MWA.cntx_pop();

_result


\portalb_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła przed redagowanie pól tabeli PORTALB
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=1;

{? _afld='ENTITY'
|| ~~

|? _afld='TAB_ACR'
|| ~~

|? _afld='FORM_UPD'
|| ~~

|? _afld='FORM_RRN'
|| ~~
?};

_result


\portalb_fld_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła na F3 dla pól tabeli PORTALB
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=~~;

{? _afld='ENTITY'
|| _result:=exec('entity_select','portal_engine',fld(),1,2)

|? _afld='TAB_ACR'
|| _result:=exec('f3_synctab','synchro')

|? 5+_afld='FORM_'
|| _result:=fld();
   _exec:=exec('parse_exec','#file',fld());
   _fml:=exec('select_formula','#file',,_exec.FILE);
   {? _fml<>''
   || _fml:=gsub(_fml,'.m.fml','.fml');
      _split:=spli_str(_fml,'\\');
      {? obj_len(_split)>1
      || _result:='params_exec(\''+_split[1]+'\',\''+_split[2]-4+'\')'
      ?}
   ?}
?};

_result


\portalb_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła po redagowaniu pól w tabeli PORTALB
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_afld:=cur_afld();

_result:=1;

{? _afld='ENTITY'
|| {? fld()<>''
   || _tab:=exec('entity_table','portal_engine',2);
      _tab.prefix(fld(),);
      {? ~_tab.first()
      || FUN.info('W serwisie nie ma zdefiniowanej encji %1.'@[fld()]);
         _result:=0
      ?}
   ?}

|? _afld='TAB_ACR'
|| {? fld()<>''
   || _tab:=exec('lista_tabel','synchro');
      {? ~_tab.find_key(fld())
      || FUN.info('Podano nieprawidłowy akronim tabeli.'@);
         _result:=0
      || fld():=_tab.ACR;
::         _form:=fld()+'.idput_acr()';
::         {? ($_form)()='' &
::            (  SYNC_MWA.TYPE=exec('mwac_type_send','synchro') |
::               SYNC_MWA.TYPE=exec('mwac_type_receive','synchro') |
::               SYNC_MWA.TYPE=exec('mwac_type_delete','synchro')
::            )
::         || FUN.info('Tabela musi posiadać pole typu %1.'@['IDPUT']);
::            _result:=0
::         ?};
         ~~
      ?}
   ?}

|? _afld='FORM_UPD'
|| ~~

|? _afld='FORM_RRN'
|| ~~
?};

_result


\portalb_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja 'po rekord' w oknie tabeli PORTALB
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(cur_tab(1,1),,'ENTITY','TAB_ACR');
{? _chk=''
|| _chk:=__CHK.index(cur_tab(1,1),_a);
   {? _chk<>''
   || _chk:='ENTITY'
   ?}
?};
{? _chk=''
|| {? ~exec('valid_formula','#field',cur_tab(1,1).FORM_UPD)
   || _chk:='FORM_UPD'
   ?}
?};
{? _chk=''
|| {? ~exec('valid_formula','#field',cur_tab(1,1).FORM_RRN)
   || _chk:='FORM_RRN'
   ?}
?};
_chk


\init_ext_sync_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zewnętrzne identyfikatory rekordów - init na cele obsługi tabel dodatkowych
::       Funkcja jest uruchamiana po modyfikacji definicji tabel dodatkowych
::       Należy odkomentować potrzebne wpisy i wypełnić w nich _args.TABELA i _args.UZUFIRMA
::----------------------------------------------------------------------------------------------------------------------
PORTALB2.cntx_psh();

_args:=exec('def_a','#sync_id');

{! _it:=1..10
|!
   _entity:='sl_ext_%1'[form(_it,-2,,'99')];
   PORTALB2.index('ENTITY');
   PORTALB2.prefix(_entity,);
   {? PORTALB2.first()
   || _tab_acr:=PORTALB2.TAB_ACR
   || _tab_acr:='SYSLOG'
   ?};

   _args.SYSTEM:='PORTAL';
   _args.KOD:='PORTAL_SL_EXT_%1_ID'[form(_it,-2,,'99')];
   _args.OPIS:='Identyfikator Cloud tabeli %1 dla encji %2'[_tab_acr,_entity];
   _args.TABELA:=_tab_acr;
   _args.UZUFIRMA:='T';
   exec('add_def','#sync_id',_args)
!};

PORTALB2.cntx_pop();
~~


\firmy_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyła dane o firmie/firmach do chmury
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
KOMM.init(,,'Aktualizacja słownika firm w chmurze'@);
_args:=obj_new('uidref');
{? XINFO.POR_CONF='W'
|| _choice:=FUN.choice(
      'Czy zaktualizować dane wszystkich firm dla dzierżawcy w chmurze?'@,,'Wyślij'@,'Usuń'@
   );
   {? _choice=1
   || FIRMA.index('SYMBOL');
      FIRMA.prefix();
      {? FIRMA.first()
      || {!
         |? {? FIRMA.A='T'
            || _args.uidref:=FIRMA.uidref();
               exec('run_mwac','sync_mwa','PORTAL_CFG','csl_TenantCompanyModify',0,,_args)
            ?};
            FIRMA.next()
         !}
      ?}
   |? _choice=2
   || FIRMA.index('SYMBOL');
      FIRMA.prefix();
      {? FIRMA.first()
      || {!
         |? {? FIRMA.A='T'
            || exec('run_mwac','sync_mwa','PORTAL_CFG','csl_TenantCompanyDelete',0,,FIRMA.uidref())
            ?};
            FIRMA.next()
         !}
      ?}
   ?}
|| FIRMA.prefix();
   {? FIRMA.seek(REF.FIRMA)
   || {? FIRMA.A='T'
      || _choice:=FUN.choice(
            'Czy zaktualizować dane firmy %1 dla dzierżawcy w chmurze?'@[FIRMA.SYMBOL],,'Wyślij'@,'Usuń'@
         );
         {? _choice=1
         || _args.uidref:=FIRMA.uidref();
            exec('run_mwac','sync_mwa','PORTAL_CFG','csl_TenantCompanyModify',0,,_args)
         |? _choice=2
         || exec('run_mwac','sync_mwa','PORTAL_CFG','csl_TenantCompanyDelete',0,,FIRMA.uidref())
         ?}
      ?}
   ?}
?};
KOMM.select();
FIRMA.cntx_pop();
~~


\manager
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uruchamia klienta MacroWebAPI z załadowanym WADL
::   WE: [_a] - czy zapisać plik MWAC (bez uruchamiania menadżera)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _save:=_a
|| _save:=0
?};

exec('czytaj_conf','portal_engine');
{? exec('is_active','portal_engine',1)
|| {? _save
   || exec('manager','__mwac',
         'load_url',exec('wadl_url','portal_engine'),
         'oauth',SL_api.token('Portal',exec('token_id','portal_engine')),,
         'save','portal',1,
         'exit'
      )
   || params_set('LogCustomFilterFormula',"exec('mwac_log_search','#mwac')");
      exec('manager','__mwac',
         'load_url',exec('wadl_url','portal_engine'),
         'oauth',SL_api.token('Portal',exec('token_id','portal_engine'))
      )
   ?}
?};
~~


\portal_lic
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Obsługa ilości licencji. Odczytuje ilość pracowników i kierowników, zapisanych w pliku merit.alic
::   WY: [OBJECT] -'PRAC','KIER' - z przypisaną ilością licencji
::----------------------------------------------------------------------------------------------------------------------
_result:=obj_new('PRAC','KIER','SEOD');
_result.PRAC:=0;
_result.KIER:=0;
_result.SEOD:=0;

:: Licencje dla Portal HR wg specjalnych wpisów
_file:=fopen('merit.alic','r',1,0,1);
{!
|? _ln:=fread(_file); _ln<>'\n'
|!
   {? _ln*'#!d_pracownikow'
   || _result.PRAC:=#(15-_ln)
   |? _ln*'#!d_kierownikow'
   || _result.KIER:=#(15-_ln)
   ?}
!};
obj_del(_file);

:: Licencja na SEOD wg licencji na dziedzinę SEO
{? exec('lic','#b_domain','SEO')
|| _result.SEOD:=10000
?};

_result


\clear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Inicjowanie systemu - zwykle po zmianie instancji danych w chmurze przed ponownym uruchomieniem systemu
::   WE: [_a] - Zadania dla bieżącej firmy (1), zadania wspólne (0), wszystko [-1]
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _default:=_a
|| _default:=-1
?};

_txt:=
   'Inicjowanie współpracy z portalem może dotyczyć całego systemu wielofirmowego albo tylko bieżącej firmy.\n\n'
   'W przypadku inicjowania całego systemu należy wywołać zadania wspólne w jednej z firm,\n'
   'a następnie zadania dla pojedynczej firmy w każdej firmie.\n\n'
   'W przypadku konfigurowania nowej (kolejnej) firmy należy wywołać zadania tylko dla tejże firmy.\n\n'
   'Aby wykonać zadania dla konkretnej firmy, należy się do niej zalogować.'@+
   {? _default=-1
   || '\n\n'+
      'Który zestaw zadań wywołać?'@
   || ''
   ?};
_buttons:=obj_new(3);
_buttons[1]:=obj_new('NAME','RULE','OPTIONS');
   _buttons[1].NAME:='Zadania dla bieżącej &firmy'@;
   _buttons[1].RULE:="params_get().args.RESULT:=1;'key:Esc'";
   _buttons[1].OPTIONS:={? _default=0 || 'state=grayed' || 'state=normal' ?};
_buttons[2]:=obj_new('NAME','RULE','OPTIONS');
   _buttons[2].NAME:='Zadania &wspólne'@;
   _buttons[2].RULE:="params_get().args.RESULT:=2;'key:Esc'";
   _buttons[2].OPTIONS:={? _default=1 || 'state=grayed' || 'state=normal' ?};
_buttons[3]:=obj_new('NAME','RULE','OPTIONS');
   _buttons[3].NAME:='text=%1,panel=bottom,align=end,display=%2'['Anuluj'@,$1];
   _buttons[3].RULE:="params_get().args.RESULT:=0;'key:Esc'";
   _buttons[3].OPTIONS:='default=1';
_args:=obj_new('RESULT');
   _args.RESULT:=0;
params_set('args',_args);
params_exec('edit_memo','#edit',_txt,,,100,8,,,0,_buttons);

_only_current_company:=_args.RESULT;
{? _only_current_company=0 || return() ?};
{? _only_current_company=2 || _only_current_company:=0 ?};

_company_desc:={? _only_current_company || 'w bieżącej firmie'@ || 'we wszystkich firmach'@ ?};

{? _only_current_company
||
   _choice:=FUN.multichoice(
      'Czy zainicjować współpracę z portalem?\n'
      'Działanie niektórych zadań może być czasochłonne.\n\n'
      'Uwaga:\n'
      'Zostaną wykonane zadania w kontekście bieżącej firmy.'@
      ,,,,13
      ,'text=%1;selected=N'['Zostaną usunięte identyfikatory danych z portalu (%1).'@[_company_desc]]
      ,'text=%1;selected=N'['Użytkownikom zostaną wyzerowane znaczniki współpracy z portalem (%1).'@[_company_desc]]
      ,'text=%1;selected=N'['Zostanie usunięta tabela uprawnień do funkcjonalności portalowych (w bieżącej firmie).'@]
      ,'text=%1;selected=N'['Zostaną zresetowane znaczniki synchronizacji danych (w bieżącej firmie).'@]
      ,'text=%1;selected=N'['Zostanie wymuszone pobranie wszystkich danych (w bieżącej firmie).'@]
      ,'text=%1;selected=N'['Zostanie wyzerowane użycie licencji (w bieżącej firmie).'@]
   );

   {? +_choice[1]>0
   ||
::    Usunięcie identyfikatorów potalowych - tylko z bieżącej firmy
      {? +_choice[2]>0
      || exec('sync_idm_del','#sync_id','PORTAL',__Firma)
      ?};

::    Wyłączenie znaczników USERSF.PORTAL2, USERSF.PORTAL2E, USERSF.BLK_SYNC (jeśli jest rekord USERSF)
::    UWAGA: działanie tylko w kontekście bieżącej firmy
      {? +_choice[3]>0
      || USERS.cntx_psh(); USERSF.cntx_psh();
         USERS.index('USR_KKOD'); USERSF.index('UNIK');
         USERS.prefix();
         {? USERS.first()
         || {!
            |? USERSF.prefix(REF.FIRMA,USERS.ref());
               {? USERSF.first()
               || USERSF.PORTAL2:='N';
                  USERSF.PORTAL2E:='N';
                  USERSF.BLK_SYNC:='N';
                  USERSF.put()
               ?};
               USERS.next()
            !}
         ?};
         USERS.cntx_pop(); USERSF.cntx_pop()
      ?};

::    Usunięcie zawartości tabeli uprawnień do funkcjonalności portalu (PORTALU) w bieżącej firmie
      {? +_choice[4]>0
      || PORTALU.trig_off('*','*');
         PORTALU.cntx_psh();
         PORTALU.index('OPR');
         PORTALU.prefix('U');
         {? PORTALU.first()
         || {!
            |? PORTALU.del()
            !}
         ?};
         PORTALU.cntx_pop();
         PORTALU.trig_on('*','*')
      ?};

::    Inicjowanie wysyłki - resetowanie znaczników synchronizacji w celu umożliwienia wysłania wszystkich danych
::    w bieżącej firmie
      {? +_choice[5]>0
      || exec('idput','portal_engine',0)
      ?};

::    Wymuszenie pobrania wszystkich danych - resetowanie znacznika czasowego pobrania danych - w bieżącej firmie
      {? +_choice[6]>0
      || _formula:="
            SYNC_MWA.cntx_psh();
            SYNC_MWA.index('PD_AKT');
            SYNC_MWA.prefix(_a,);
            {? SYNC_MWA.first()
            || {!
               |? {? SYNC_MWA.TYPE=exec('mwac_type_receive','synchro')
                  || exec('sync_mwa_result_save','synchro',SYNC_MWA.ref(),'')
                  ?};
                  SYNC_MWA.next()
               !}
            ?};
            SYNC_MWA.cntx_pop();
            ~~
         ";
         _formula('PORTAL');
         _formula('PORTAL_CFG');
         _formula('PORTAL_HR_CFG');
         _formula('PORTAL_SEOD_CFG');
         _formula('PORTAL_CUSTOM');
         _formula('PORTAL_WNIOSKI');
         _formula('PORTAL_SEOD')
      ?};

::    Wyzerowanie użycia licencji w bieżącej firmie
      {? +_choice[7]>0
      || PORTALO.erase();
         PORTALL.index('LICENSE');
         PORTALL.prefix(REF.FIRMA);
         {? PORTALL.first()
         || {!
            |? PORTALL.INSTALED:=0;
               PORTALL.USED:=0;
               PORTALL.USEDG:=0;
               PORTALL.put();
               PORTALL.next()
            !}
         ?}
      ?}
   ?}
||
   _choice:=FUN.multichoice(
      'Czy zainicjować współpracę z portalem?\n'
      'Działanie niektórych zadań może być czasochłonne.\n\n'
      'Uwaga:\n'
      'Zostaną wykonane zadania wspólne dla wszystkich firm.'@
      ,,,,9
      ,'text=%1;selected=N'['Zostaną usunięte identyfikatory danych z portalu (%1).'@[_company_desc]]
      ,'text=%1;selected=N'['Użytkownikom zostaną wyzerowane znaczniki współpracy z portalem (%1).'@[_company_desc]]
   );

   {? +_choice[1]>0
   ||
::    Usunięcie identyfikatorów potalowych - wszystkie
      {? +_choice[2]>0
      || exec('sync_idm_del','#sync_id','PORTAL')
      ?};

::    Wyłączenie znacznika USERS.PORTAL2 (historycznie)
::    oraz USERS.P*PRAC, USERS.P*KIER, USERS.P*SEOD
::    UWAGA: działanie w kontekście wszystkich firm
      {? +_choice[3]>0
      || USERS.cntx_psh(); USERSF.cntx_psh();
         USERS.index('USR_KKOD'); USERSF.index('UNIK');
         USERS.prefix();
         {? USERS.first()
         || {!
            |? USERS.PORTAL2:='N';
               USERS.P2PRAC:=0;
               USERS.PMPRAC:=0;
               USERS.PXPRAC:=0;
               USERS.P2KIER:=0;
               USERS.PMKIER:=0;
               USERS.PXKIER:=0;
               USERS.P2SEOD:=0;
               USERS.PMSEOD:=0;
               USERS.PXSEOD:=0;
               USERS.put();
               USERS.next()
            !}
         ?};
         USERS.cntx_pop(); USERSF.cntx_pop()
      ?}
   ?}
?};
~~


\get_thumbnail
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła do odczytu zawartości pola Thumbnail - zwraca tabelę tymczasową z jednym obrazkiem.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN zawierający pole Thumbnail.
::   WY: Tabela tymczasowa z maksymalnie jednym rekordem.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'BLOB','BLOBIMAGE','Zdjęcie'
);

{? _obj.getValueLen('Thumbnail')>0
|| _att:=fopen(null(),'bw',,,1);
   {? _att.is_open()
   || _obj.getValue('Thumbnail',_att,'decode');
      _TAB.blank();
      _TAB.LP:=1;
      _TAB.add();
      _TAB.bl_put('BLOB',_att,,,'Thumbnail');
      _att.fclose()
   ?};
   obj_del(_att)
?};

_TAB


\get_notes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła do odczytu zawartośco pola __Notes - zwraca tabelę tymczasową z komentarzami.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN zawierający pole __Notes.
::   WY: Tabela tymczasowa.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;

_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'TRESC','SYS_MEMO','Treść',
   'DT','DATE','Data',
   'GD','TIME','Godzina',
   'LOGIN','STRING[100]','Login',
   'PID','REAL','Person_id_cloud',
   'PUID','STRING[48]','P.uidref()'
);

{? _obj.getValueLen('__Notes')>524172
|| _att:=fopen(null(),'Uw',,,1);
   _obj.getValue('__Notes',_att)
|| _att:=_obj.getValue('__Notes');
   {? _att='null'
   || return(_TAB)
   ?}
?};

_jman:=_obj.new(_att);
_type:=_jman.typeOf('Notes');
{? _type=_jman.Const.TYPE.ARRAY
|| _size:=_jman.countChildren('Notes');
   _id:="'[%1]' [$_a]"
|? _type=_jman.Const.TYPE.OBJECT
|| _size:=1;
   _id:="''"
|| _size:=0
?};

_close:=
   "{? type_of(_a)=type_of(@.CLASS.FILE_T)
    || _a.fclose()
    ?}
   ";

{! _lp:=1 .. _size
|! _TAB.blank();
   _TAB.LP:=_lp;
   _content:=_jman.getValue('Notes%1.Content' [_id(_lp)],'decode');
   _datetime:=_jman.getValue('Notes%1.RegisterDate' [_id(_lp)]);
   _login:=_jman.getValue('Notes%1.RegisterLogin' [_id(_lp)]);
   _pId:=_jman.getValue('Notes%1.PersonId' [_id(_lp)]);
   _tNull:=type_of(~~);
   {? ~(type_of(_content)=_tNull | type_of(_datetime)=_tNull | type_of(_login)=_tNull)
   || _TAB.memo_set(_content,'TRESC');
      _datetime:=iso_datetime_parse(_datetime);
      _TAB.DT:=_datetime.date;
      _TAB.GD:=_datetime.time;
      obj_del(_datetime);
      _TAB.LOGIN:=_login;
      _TAB.PID:=
         {? type_of(_pId)<>_tNull
         || #_pId
         || -1
         ?};
::    Poszukiwanie P.uidref:
      P.cntx_psh();
      P.index('OSOZATR');
      {? _TAB.PID<>-1 & P.seek(exec('getPref','portal_core',_TAB.PID),,1)
      || _TAB.PUID:=P.uidref()
      |? +_login
      || USERS.cntx_psh();
         USERS.prefix();
         {? exec('getWebUser','users',_login) & USERS.OSOBA
         || P.prefix(exec('ref_firma','ustawienia'),USERS.OSOBA);
            {? P.last() &
               (P.find_tab(,'ZA',,'=','T','PORTAL',,'=','T') |
                P.find_tab(,'PORTAL',,'=','T') |
                P.find_tab(,'ZA',,'=','T') |
                1)
            || _TAB.PUID:=P.uidref()
            ?}
         ?};
         USERS.cntx_pop()
      ?};
      P.cntx_pop();

      {? _TAB.add()
      || _TAB.memo_put()
      ?}
   ?}
!};

_close(_att);

_TAB


\portall_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Selekcja licencji
::   WE: _a - pełne okno [1]/ tylko licencje (0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _full:=_a || _full:=1 ?};

exec('czytaj','#stalesys',,XINFO,'POR_CONF');
_por_conf:=XINFO.POR_CONF;

:: ustalenie kontekstu firmy w zależności od konfiguracji portalu
_firma:={? _por_conf='J' || REF.FIRMA || null() ?};

PORTALL.cntx_psh(); PORTALO.cntx_psh();

_werl:=PORTALL.mk_sel('Licencje'@,,,'portallselect'+$_full,,,,,'U');
PORTALL.win_fld(_werl,,'LICENSE',,,31,,1);
PORTALL.win_fld(_werl,,'BOUGHT',,,-12,,1,'Zakupione'@);
PORTALL.win_fld(_werl,,'INSTALED',,,-12,,1,'Zainstalowane'@);
PORTALL.win_fld(_werl,,'USED',,,-12,,1,'Wykorzystane'@);
::PORTALL.win_fld(_werl,,'USEDG',,,-12,,1,'Wykorzystane (grupa)'@);
PORTALL.win_fld(_werl,,'EXPIRES',,,-12,,1);
{? _por_conf='J'
|| _fb:="exec('portall_popraw','portal_engine')";
   PORTALL.win_act(_werl,,'Formuła','Popraw'@@,,,_fb,,,,,,'P')
?};
::PORTALL.win_act(_werl,,'Usuń');
{? _por_conf='J'
|| _fb:="exec('portall_float','portal_engine')";
   PORTALL.win_act(_werl,0,'Formuła','&Rozpisz'@@,,'Rozpisuje liczbę licencji między firmami'@,_fb,,,,,,'R');
   PORTALL.win_act(_werl,1,'Formuła','&Rozpisz'@@,,'Rozpisuje liczbę licencji między firmami'@,_fb,,,,,,'R');
   PORTALL.win_btn(_werl,'text=%1,panel=bottom,align=begin'['&Rozpisz'@],'menu:R')
?};
_fb:="exec('portall_sync','portal_engine',1)";
PORTALL.win_act(_werl,0,'Formuła','Synchro&nizuj'@@,,'Synchronizuje licencje z portalem'@,_fb,,,,,,'N');
PORTALL.win_act(_werl,1,'Formuła','Synchro&nizuj'@@,,'Synchronizuje licencje z portalem'@,_fb,,,,,,'N');
PORTALL.win_btn(_werl,'text=%1,panel=bottom,align=begin'['Synchro&nizuj'@],'menu:N');
{? _full
|| _fb:="
      PORTALO.cntx_psh();
      PORTALO.prefix();
      _size:=PORTALO.size();
      {? {? _size>0
         || FUN.ask('Czy pobrać ponownie komunikaty do licencji?'@)
         || FUN.ask('Czy pobrać komunikaty do licencji?'@)
         ?}
      || PORTALO.erase();
         _result:=1;
         KOMM.init(,,'Pobieranie komunikatów'@);
         _param:='';
         _loop:=1;
         {!
         |? _res:=exec('run_mwac','sync_mwa','PORTAL_CFG','rgt_OprGrupyCommunicateGet',0,,_param);
            {? type_of(_res)=type_of(0) & _res=0
            || _result:=0;
               _loop:=0
            |? type_of(_res)=type_of('')
            || _param:=_res;
               {? _res='' || _loop:=0 ?}
            |? type_of(_res)=type_of(~~)
            || _loop:=0
            ?};
            _loop
         !};
         {? _result>0
         || FUN.info('Komunikaty zostały pobrane.'@)
         || FUN.emsg('Wystąpił błąd podczas pobierania komunikatów.'@)
         ?}
      ?};
      PORTALO.cntx_pop();
      ~~
   ";
   PORTALL.win_act(_werl,,'Formuła','P&obierz komunikaty'@@,,
      'Pobiera komunikaty dla wszystkich licencji'@,_fb,,,,,,'O');
   _fb:="exec('portal_select','users')";
   PORTALL.win_act(_werl,,'Formuła','Uży&tkownicy portalowi'@@,,,_fb,,,,,,'T')
?};
::_fb:="
::   _tab:=proc_exe('new_sync@synchro','PORTAL_CFG',1,'PORTALL',100);
::   _tab.index(_tab.ndx_tmp(,,'ACR',,,'REF',,));
::   _tab.prefix('PORTALL',$PORTALL.ref());
::   {? _tab.first()
::   || FUN.info('Wymaga synchronizacji'@)
::   || FUN.info('Nie wymaga synchronizacji'@)
::   ?};
::   ~~
::";
::PORTALL.win_act(_werl,,'Formuła','Syn&chro?'@@,,,_fb,,,,,,'C');
PORTALL.win_act(_werl,,'Formuła','Zmian&y'@@,
   ,'Informacje o modyfikacjach bieżącego zapisu'@,"exec('zmiany','#syslog')",,,,,,'Y'
);
PORTALL.win_act(_werl,,'Formuła','Legenda'@@,,,"exec('legenda','color','PORTALL#01')",,,,,,'L');
PORTALL.win_act(_werl,,'Rekord',,,,"exec('rekprzed','color','PORTALL#01')");

_redl:=PORTALL.mk_edit('Licencja'@,,'portalledit');
PORTALL.win_esep(_redl,'Dane podstawowe'@);
PORTALL.win_efld(_redl,,'LICENSE',,,30,,1);
PORTALL.win_efld(_redl,,'FIRMA','SYMBOL',,27,,1,'Firma'@);
PORTALL.win_efld(_redl,,'BOUGHT',,,13,,,'Dostępy wykupione'@);
PORTALL.win_efld(_redl,,'INSTALED',,,13,,1,'Dostępy zainstalowane'@);
PORTALL.win_efld(_redl,,'USED',,,13,,1,'Dostępy wykorzystane'@);
PORTALL.win_efld(_redl,,'USEDG',,,13,,1,'Dostępy wykorzystane (grupa)'@);
PORTALL.win_efld(_redl,,'EXPIRES',,,,,1);
exec('ok_esc','#window',PORTALL,_redl);
PORTALL.win_edit(_redl);

_fb:="
   _tab:=proc_exe('new_sync@synchro','PORTAL_CFG',1,'PORTALL',100);
   _tab.index(_tab.ndx_tmp(,,'ACR',,,'REF',,));
   _tab.prefix('PORTALL',$PORTALL.ref());
   {? _tab.first()
   || 'xwin16.png:184'
   || exec('pusta','#icon')
   ?}
";
PORTALL.win_fml(_werl,,'BOUGHT',,'ICON_BEFORE',_fb);

{? _full
|| _wero:=PORTALO.mk_sel('Komunikaty dostępne dla licencji'@,,,'portaloselect',,,,,'U');
   PORTALO.win_fld(_wero,,'COMM',,,80);
   PORTALO.win_act(_wero,,'Usuń',,,,,,,1)
?};

_grp:=PORTALL.grp_make('Licencje'@,,'grplicense'+$_full,,,,,'normal');
{? _full
|| _faf:="
      PORTALO.index('LIC_COMM');
      PORTALO.prefix(PORTALL.LICENSE,);
      grp_disp(PORTALO,params_get().WERO);
      ~~
   "
|| _faf:="~~"
?};
PORTALL.grp_sel(_grp,,_werl,,_faf,,,10,,,,,'maximized');
{? _full
|| PORTALL.grp_splt(_grp,,'horizontal','bottom');
   PORTALL.grp_sel(_grp,PORTALO,_wero,,,,,,,,,,'maximized');
   params_set('WERO',_wero)
?};
PORTALL.win_sel(_grp);

PORTALL.index('MAIN');
PORTALL.prefix(0,_firma);

PORTALL.select();

PORTALL.cntx_pop(); PORTALO.cntx_pop();
~~


\portalu_tree
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Widok uprawnień do funkcjonalności portalu w postaci drzewa
::   WE: [_a] - e-mail użytkownika, do którego ograniczyć selekcję drzewa
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _user:=_a
|| _user:=''
?};

exec('czytaj','#stalesys',,XINFO,'POR_CONF');
{? XINFO.POR_CONF='J'
|| _firma:=REF.FIRMA;
   _firma_name:='firma %1'@[REF.FIRMA().SYMBOL]
|| _firma:=null();
   _firma_name:='wszystkie firmy'@
?};

_tab:=tab_tmp(2
   ,'PARENT','TREE_REF',''
   ,'LABEL','STRING[100]','Etykieta'@
   ,'LOGIN','STRING[100]',''
   ,'OPR_TAIL','STRING[100]','_ogon_techniczne_'
   ,'OPR_NAME','STRING[100]','_name_techniczne_'
   ,'ENABLED','STRING[1]','Włączone'@
   ,'IL','INTEGER','Liczba uprawnień'@
);

:: Sprawdzenie, czy dostępny jest wzorzec uprawnień
PORTALU.cntx_psh();
PORTALU.index('OPR');
PORTALU.prefix('W');
_pattern:=PORTALU.first();
PORTALU.cntx_pop();

PORTALU.cntx_psh();
PORTALU.index('LOGIN');
{? _user='' || PORTALU.prefix('U') || PORTALU.prefix('U',_user,) ?};
_size:=PORTALU.size();
{? PORTALU.first()
|| FUN.prg_start(_size,'Tworzenie drzewa uprawnień'@,,,1);
   {!
   |? FUN.prg_next(1,'Tworzenie drzewa uprawnień: %1'@[PORTALU.LOGIN]);
      _parent:=0;

::    Węzeł główny - LOGIN
      {? _user=''
      || _tab.prefix(0,PORTALU.LOGIN,);
         {? _tab.first()
         || {? _tab.ENABLED<>'T'
            || {? PORTALU.ENABLED='T'
               || _tab.ENABLED:='T';
                  _tab.put()
               ?}
            ?};
            _parent:=#_tab.ref()
         || _tab.blank();
            _tab.LABEL:=PORTALU.LOGIN;
            _tab.LOGIN:=PORTALU.LOGIN;
            _tab.ENABLED:=PORTALU.ENABLED;
            _tab.IL:=1;
            {? _tab.add()
            || _parent:=#_tab.ref()
            ?}
         ?}
      || _parent:=0
      ?};

      _is_pattern:=0;
      {? _pattern>0
      || _opr_name:=PORTALU.OPR_NAME;
         PORTALU.cntx_psh();
         PORTALU.index('OPR');
         PORTALU.prefix('W',_opr_name,);
         {? PORTALU.first()
         || _opr_tail:=gsub(PORTALU.PTH_NAME,'ERP\\ERPCLOUD\\','');
            _opr_tail:=gsub(_opr_tail,'\\','/')+'/%1/'[PORTALU.OPR_NAME];
            _opr_desc:=PORTALU.OPR_DESC;
            _pth_name:=PORTALU.PTH_NAME;
            _pth_desc:=PORTALU.PTH_DESC;
            _pth_tail:=gsub(PORTALU.PTH_DESC,'Chmura\\','');
            _pth_tail:=gsub(_pth_tail,'\\','/')+'/';
            _is_pattern:=1
         || _opr_tail:=PORTALU.OPR_NAME+'_';
            _opr_tail:=gsub(_opr_tail,'_','/');
            _opr_tail:=gsub(_opr_tail,'STD/PC/E','STD_PC_E');
            _opr_tail:=gsub(_opr_tail,'STD/PC/M','STD_PC_M');
            _opr_tail:=gsub(_opr_tail,'STD/PC/S','STD_PC_S');
            _opr_tail:=gsub(_opr_tail,'STD/PC/RCP','STD_PC_RCP');
            _opr_tail:=gsub(_opr_tail,'STD/PortalCloud/RightsManagement','STD_PortalCloud_RightsManagement');
            _opr_tail:=gsub(_opr_tail,'STD/PortalCloud/SEOD','STD_PortalCloud_SEOD')
         ?};
         PORTALU.cntx_pop()
      || _opr_tail:=PORTALU.OPR_NAME+'_';
         _opr_tail:=gsub(_opr_tail,'_','/');
         _opr_tail:=gsub(_opr_tail,'STD/PC/E','STD_PC_E');
         _opr_tail:=gsub(_opr_tail,'STD/PC/M','STD_PC_M');
         _opr_tail:=gsub(_opr_tail,'STD/PC/S','STD_PC_S');
         _opr_tail:=gsub(_opr_tail,'STD/PC/RCP','STD_PC_RCP');
         _opr_tail:=gsub(_opr_tail,'STD/PortalCloud/RightsManagement','STD_PortalCloud_RightsManagement');
         _opr_tail:=gsub(_opr_tail,'STD/PortalCloud/SEOD','STD_PortalCloud_SEOD')
      ?};

      {!
      |?
         _pos:=_opr_tail*'/';
         _opr:=(_pos-1)+_opr_tail;
         _opr_tail:=_pos-_opr_tail;

         {? _is_pattern>0
         || _pos1:=_pth_tail*'/';
            _pth:=(_pos1-1)+_pth_tail;
            _pth_tail:=_pos1-_pth_tail
         ?};

         _label:=
            {? _is_pattern>0 & _opr_tail=''
            || _opr_desc
            |? _is_pattern>0
            || _pos2:=_pth_tail*'/';
               _pos2+_pth_tail-1
            |? _is_pattern>0 & _opr_tail*'/'=+_opr_tail
            || _pth_desc
            || _opr
            ?};

         _tab.prefix(_parent,_label,);
         {? _tab.first()
         || {? _tab.ENABLED<>'T'
            || {? PORTALU.ENABLED='T'
               || _tab.ENABLED:='T';
                  _tab.put()
               ?}
            ?};
            _parent:=#_tab.ref()
         || _tab.blank();
            _tab.PARENT:=_parent;
            _tab.LABEL:=_label;
            _tab.LOGIN:=PORTALU.LOGIN;
            _tab.OPR_TAIL:=_opr_tail;
            _tab.OPR_NAME:=PORTALU.OPR_NAME;
            _tab.ENABLED:=PORTALU.ENABLED;
            _tab.IL:=1;
            {? _tab.add() || _parent:=#_tab.ref() ?}
         ?};

         _opr_tail*'/'>0
      !};
      PORTALU.next()
   !};
   FUN.prg_stop()
?};
PORTALU.cntx_pop();

_recursion:="
   _il:=0;
   _tab:=_a;
   _ref:=_b;
   _recursion:=_c;
   _tab.cntx_psh();
   _tab.prefix(#_ref);
   {? _tab.first()
   || {!
      |? _tab.IL:=_recursion(_tab,_tab.ref(),_recursion);
         _il+=_tab.IL;
         _tab.put();
         _tab.next()
      !}
   || _il:=1
   ?};
   _tab.cntx_pop();
   _il
";

_tab.prefix(0);
_size:=_tab.size();
{? _tab.first()
|| FUN.prg_start(_size,'Przeliczenie drzewa uprawnień'@,,,1);
   {!
   |? FUN.prg_next(1,'Przeliczenie drzewa uprawnień: %1'@[_tab.LOGIN]);
      _tab.IL:=_recursion(_tab,_tab.ref(),_recursion);
      _tab.put();
      _tab.next()
   !};
   FUN.prg_stop()
?};

_wer:=_tab.mk_sel(
   'Uprawnienia do funkcjonalności portalu: %1 %2'@[_firma_name,_user],'P',,'#portalutree',,,,1
);
_tab.win_fld(_wer,,'LABEL');
_tab.win_fld(_wer,,'ENABLED',,,,,,,,,2,,"'T'","'N'");
::_tab.win_fld(_wer,,'IL',,,-10);
_fb:="exec('portalu_send','portal_engine',,cur_tab(1,1).LOGIN)";
_tab.win_act(_wer,,'Formuła','Wyślij'@@,,,_fb,,,,,,'W');
_fb:="exec('zwin_rozwin','#tree')";
_tab.win_act(_wer,,'Formuła','Zwiń/rozwiń'@@,,,_fb,,,,,,'Z');
_tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Wyślij'@],'menu:W');
_tab.win_sel(_wer);

_tab.prefix();
_tab.first();
_tab.select();
~~


\api_url_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url usługi wewnętrznej
::   WE: _a - wariant usługi 1-dev (domyślnie), 2-test, 3-prod
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _wariant:=_a
|| _wariant:=1
?};

{? _wariant=1
|| 'https://portalcloudapi-dev-dev.abs.assecobs.pl/?dbc=internal_rest'
|? _wariant=2
|| 'https://portalcloudapi-test.abs.assecobs.pl?DBC=API_INTERNAL_REST'
|? _wariant=3
|| 'https://portalcloudapi.assecobs.pl?DBC=API_INTERNAL_REST'
|| ''
?}


\wadl_url_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url WADL usługi wewnętrznej
::   WE: _a - wariant usługi 1-dev (domyślnie), 2-test, 3-prod
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _wariant:=_a
|| _wariant:=1
?};

{? _wariant=1
|| 'https://portalcloudapi-dev-dev.abs.assecobs.pl/?dbc=internal_rest&WADL'
|? _wariant=2
|| 'https://portalcloudapi-internal.abs.assecobs.pl/TESTAPI/services_integration_api/ApiWebService.ashx?'
   'DBC=API_INTERNAL_DOC_REST&WADL'
|? _wariant=3
|| 'https://portalcloudapi-internal.abs.assecobs.pl/PORTAL_API/services_integration_api/ApiWebService.ashx?'
   'DBC=API_INTERNAL_DOC_REST&WADL'
|| ''
?}


\manager_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uruchamia klienta MacroWebAPI z załadowanym WADL dla usługi wewnętrznej
::----------------------------------------------------------------------------------------------------------------------
::_choice:=FUN.choice('Wybierz wariant:'@,,'DEV','TEST','PROD');
_choice:=1;
{? _choice>0
|| params_set('LogCustomFilterFormula',"exec('mwac_log_search','#mwac')");
   exec('manager','__mwac','load_url',
      exec('wadl_url_internal','portal_engine',_choice),'oauth',
      SL_api.token('Internal','portal'+SYSLOG.ses_id())
   )
?};
~~


\autoconfig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zakłada i pobiera automatycznie konfigurację dla bieżącej firmy (w okienku parametrów)
::   WY: 'key:F2' jeżeli konfiguracja została wgrana
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_result:='';

{? exec('chk_run_mwac','sync_mwa',exec('sync_pd_internal','portal_engine'),'SL_TENANT_ADD')
||
   {? FUN.ask(
        'Zostanie przeprowadzony proces automatycznej konfiguracji dostępu firmy do Portal HR.\n'
        'Po potwierdzeniu konfiguracji należy wykonać funkcję inicjowania systemu.\n\n'
        'Czy kontynuować?'@
      )
   || _res:=exec('add_tenant','portal_engine');
      {? var_pres('res',_res)>100 &
         var_pres('DETAILS',_res.res)>100 &
         var_pres('CFG_FILE',_res.res.DETAILS)=exec('type_of_file','#var')
      || {? exec('GetConfigPortal','portal_engine',_res.res.DETAILS.CFG_FILE.copy('ur'))
         || _tab:=params_get().TAB;
            {? XINFO.POR_CONF='W'
            || _tab.ENV:=XINFO.POR0ENV:=_res.ENV
            || _tab.ENV:=XINFO.POR_ENV:=_res.ENV
            ?};
            _result:='key:F2'
         ?}
      ?}
   ?}
?};

_result


\add_tenant
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodaje bieżącą firmę w portalu (funkcja wewnętrzna)
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'ENV','STRING[20]','Środowisko'@
   ,'NIP','STRING[20]','NIP'@
   ,'SKROT','STRING[100]','Nazwa skrócona'
   ,'NAZWA','STRING[100]','Nazwa pełna'@
   ,'FNAME','STRING[100]','Imię'@
   ,'SNAME','STRING[100]','Nazwisko'@
   ,'MAIL','STRING[100]','E-mail'@
   ,'LANG','STRING[2]','Język'@
   ,'CFNAME','STRING[100]','Imię'@
   ,'CSNAME','STRING[100]','Nazwisko'@
   ,'CMAIL','STRING[100]','E-mail'@
   ,'CLANG','STRING[2]','Język'@
);

_formula:="
   _tab:=params_get().env.TAB;
   _tab.prefix();
   {? _tab.select()
   || _tab.KOD
   || ~~
   ?}
";
_tab.fld_fml('ENV','F3',_formula);

_formula:="
   _result:=1;
   {? fld()<>''
   || _tab:=params_get().env.TAB;
      _tab.prefix(fld(),);
      {? ~_tab.first()
      || FUN.info('Niepoprawne środowisko: %1'@[fld()]);
         _result:=0
      ?}
   ?};
   _result
";
_tab.fld_fml('ENV','AFTER_EDIT',_formula);

_formula:="
   _choice:=FUN.choice('Wybierz domyślny język'@,,'PL','EN');
   {? _choice=1
   || fld('PL')
   |? _choice=2
   || fld('EN')
   ?}
";
_tab.fld_fml('LANG','F3',_formula);
_tab.fld_fml('CLANG','F3',_formula);

_formula:="
   {? fld()='PL' | fld()='EN'
   || 1
   || FUN.info('Podaj domyślny język: %1, %2.'@['PL','EN']);
      0
   ?}
";
_tab.fld_fml('LANG','AFTER_EDIT',_formula);
_tab.fld_fml('CLANG','AFTER_EDIT',_formula);

exec('czytaj','#stalesys',,XINFO,'NIP');
exec('czytaj','#stalesys',,KST,'SKROT','NAZWA');
_tab.blank();
_tab.NIP:=XINFO.NIP;
_tab.SKROT:=KST.SKROT;
_tab.NAZWA:=KST.NAZWA;
_tab.LANG:='PL';
_tab.CLANG:='PL';

_width:=60;
_red:=_tab.mk_edit('Dołącz firmę do HR Portal'@,,'companyhrportal');
_tab.win_esep(_red,'Środowisko'@);
_tab.win_efld(_red,,'ENV',,,_width-3,,,,,,,'F3_button=1');
_tab.win_esep(_red,'Dane kontrahenta'@);
_tab.win_efld(_red,,'NIP',,,_width);
_tab.win_efld(_red,,'SKROT',,,_width);
_tab.win_efld(_red,,'NAZWA',,,_width);
_tab.win_esep(_red,'Dane administratora klienta'@);
_tab.win_efld(_red,,'CFNAME',,,_width);
_tab.win_efld(_red,,'CSNAME',,,_width);
_tab.win_efld(_red,,'CMAIL',,,_width);
_tab.win_efld(_red,,'CLANG',,,3,,,,,,,'F3_button=1');
_tab.win_esep(_red,'Dane administratora ABS'@);
_tab.win_efld(_red,,'FNAME',,,_width);
_tab.win_efld(_red,,'SNAME',,,_width);
_tab.win_efld(_red,,'MAIL',,,_width);
_tab.win_efld(_red,,'LANG',,,3,,,,,,,'F3_button=1');
exec('ok_esc','#window',_tab,_red);
_tab.efld_opt(_red,'mark=1',_tab,'ENV');
_tab.efld_opt(_red,'mark=1',_tab,'NIP');
_tab.efld_opt(_red,'mark=1',_tab,'SKROT');
_tab.efld_opt(_red,'mark=1',_tab,'NAZWA');
_tab.efld_opt(_red,'mark=1',_tab,'CFNAME');
_tab.efld_opt(_red,'mark=1',_tab,'CSNAME');
_tab.efld_opt(_red,'mark=1',_tab,'CMAIL');
_tab.efld_opt(_red,'mark=1',_tab,'FNAME');
_tab.efld_opt(_red,'mark=1',_tab,'SNAME');
_tab.efld_opt(_red,'mark=1',_tab,'MAIL');
_tab.win_edit(_red);

_env:=exec('env_internal','portal_engine');
params_set('env',_env);

_result:=obj_new('res','ENV');
_result.ENV:='';
{? _tab.edit("__CHK.record(cur_tab(1,1),,'ENV','NIP','SKROT','NAZWA','FNAME','SNAME','MAIL')")
|| _result.ENV:=_tab.ENV;
   _env.TAB.prefix(_tab.ENV,);
   {? _env.TAB.first()
   || _url:=_env.TAB.URL
   || _url:=''
   ?};
   _result.res:=exec('TenantAdd','sl_api'
      ,exec('sync_pd_internal','portal_engine')
      ,_url
      ,_tab.NIP
      ,_tab.SKROT
      ,_tab.NAZWA
      ,_tab.MAIL
      ,_tab.FNAME
      ,_tab.SNAME
      ,_tab.LANG
      ,_tab.CMAIL
      ,_tab.CFNAME
      ,_tab.CSNAME
      ,_tab.CLANG
      ,1
   )
|| _result.res:=exec('parse_result','sl_api')
?};
_result


\license_superuser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod licencji superużytkownika
::----------------------------------------------------------------------------------------------------------------------
'ERP\\ERPCLOUD\\PORTAL_SUPERUSER'


\license_employee
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod licencji pracownika
::----------------------------------------------------------------------------------------------------------------------
'ERP\\ERPCLOUD\\PORTALHR_EMPLOYEE'


\license_manager
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod liencji menadżera
::----------------------------------------------------------------------------------------------------------------------
'ERP\\ERPCLOUD\\PORTALHR_MANAGER'


\license_seod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod licencji SEOD
::----------------------------------------------------------------------------------------------------------------------
'ERP\\ERPCLOUD\\SEOD'


\portal_lic_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Ładuje/aktualizuje informacje o licencjach portalowych
::----------------------------------------------------------------------------------------------------------------------
{? PORTALL.lock(1,,1)
|| PORTALL.cntx_psh();
   _lic:=exec('portal_lic','portal_engine');
   PORTALL.index('MAIN');

:: Uwaga, obecnie obsługiwana tylko konfiguracja 'J'
:;   exec('czytaj','#stalesys',,XINFO,'POR_CONF');
::   _por_conf:=XINFO.POR_CONF;
::   _firma:={? _por_conf='J' || REF.FIRMA || null() ?};
   _firma:=REF.FIRMA;

   _update:="
::    Zapis główny - nie podlega synchronizacji
      PORTALL.prefix(1,null(),_a,);
      {? PORTALL.first()
      || PORTALL.BOUGHT:=_b;
         PORTALL.EXPIRES:=exec('str2date','#convert',user(8));
         PORTALL.put()
      || PORTALL.blank();
         PORTALL.MAIN:=1;
         PORTALL.FIRMA:=null();
         PORTALL.LICENSE:=_a;
         PORTALL.BOUGHT:=_b;
         PORTALL.EXPIRES:=exec('str2date','#convert',user(8));
         PORTALL.add()
      ?};
::    Zapis podlegający synchronizacji (J - dla każdej firmy, W - jeden wspólny)
      PORTALL.prefix(0,_c,_a,);
      {? PORTALL.first()
      || {? PORTALL.LICENSE=exec('license_seod','portal_engine')
         || PORTALL.BOUGHT:={? _b>0 || 1000 || 0 ?}
         ?};
         PORTALL.EXPIRES:=exec('str2date','#convert',user(8));
         PORTALL.put()
      || PORTALL.blank();
         PORTALL.FIRMA:=_c;
         PORTALL.LICENSE:=_a;
         {? PORTALL.LICENSE=exec('license_seod','portal_engine')
         || PORTALL.BOUGHT:={? _b>0 || 1000 || 0 ?}
         ?};
         PORTALL.EXPIRES:=exec('str2date','#convert',user(8));
         PORTALL.add()
      ?};
      ~~
   ";

:: Licencja HR Portal Pracownik
   _update(exec('license_employee','portal_engine'),_lic.PRAC,_firma);
:: Licencja HR Portal Menadżer
   _update(exec('license_manager','portal_engine'),_lic.KIER,_firma);
:: Licencja SEOD
   _update(exec('license_seod','portal_engine'),_lic.SEOD,_firma);

   PORTALL.cntx_pop();
   PORTALL.unlock()
?};
~~


\entity_name
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dla nazwy metody zwraca nazwę encji
::   WE: _a - nazwa metody
::   WY: nazwa encji
::----------------------------------------------------------------------------------------------------------------------
_method:=_a;
_entity:=_method;

{? _method+6='Modify' | _method+6='Delete'
|| _entity:=_method-6
|? _method+3='Get'
|| _entity:=_method-3
?};

_entity


\portall_color
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kolor zapisu w tabeli PORTALL (licencje)
::----------------------------------------------------------------------------------------------------------------------
{? PORTALL.USED>PORTALL.BOUGHT | PORTALL.USEDG>PORTALL.BOUGHT
|| 'PORTALL#01#02'
|? PORTALL.INSTALED>PORTALL.BOUGHT
|| 'PORTALL#01#01'
|| ''
?}


\portalu_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysłanie uprawnień na portal - wysyłka zbiorcza albo w kontekście loginu
::       Przy uruchomieniu z dialogiem wybór: nowe czy wszystkie, bez dialogu tylko nowe
::   WE: [_a] - czy wyświetlać dialog/progress [1]/0
::       [_b] - login użytkownika - ogranicza wysyłkę tylko do niego
::       [_c] - rodzaj wyniku: [0] czy się udało, (1) pierwszy użytkownik (USERSF.uidref()), dla którego się nie udało
::   WY: 0/1 czy udało się odesłać wszystkie uprawnienia
::       ''/USERSF.uidref() pierwszy użytkownik, dla którego się nie udało wysłać uprawnień
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
|| _dialog:=1
?};

{? var_pres('_b')=type_of('')
|| _login:=_b
|| _login:=''
?};

{? var_pres('_c')=type_of(0)
|| _option:=_c
|| _option:=0
?};

_result:={? _option=1 || '' || 1 ?};

PORTALU.cntx_psh();
PORTALU.prefix();

{? _login=''
|| _choice:=
      {? _dialog
      || FUN.choice('Wysłać uprawnienia:'@,1,'Nowe / zmienione'@,'Wszystkie'@)
      || 1
      ?}
|| _choice:=
      {? _dialog
      || FUN.choice('Czy wysłać uprawnienia użytkownika %1?'@[_login],1,'Nowe / zmienione'@,'Wszystkie'@)
      || 1
      ?};
   {? _choice<>0
   || _choice+=2
   ?}
?};

{? _choice>0
||
   {? _dialog || KOMM.init(,,'Wysyłanie uprawnień na portal'@) ?};

   USERS.cntx_psh(); USERSF.cntx_psh();
   USERS.index('USR_AWEB');
   {? _login='' || USERS.prefix('T',) || USERS.prefix('T',_login,) ?};
   _size:=USERS.size();
   {? USERS.first()
   ||
      {? _dialog || FUN.prg_start(_size,'Wysyłanie uprawnień na portal'@,,,1) ?};

      {!
      |? {? _dialog || FUN.prg_next(,'Wysyłanie uprawnień na portal dla: %1'@[USERS.WEBLOGIN]) ?};

         {? USERS.WEBLOGIN<>''
         ||
            exec('get_usersf','users');
            {? USERSF.BLK_SYNC='T'
            || KOMM.add('Użytkownik %1 zablokowany do wysyłki — należy zweryfikować uprawnienia.'@[USERS.WEBLOGIN])
            ||
               _tab:=sql('
                  select
                     ENABLED,
                     OPR_NAME,
                     IDPUT,
                     REFERENCE as REF
                  from PORTALU
                  where PORTALU.LOGIN=\':_a\' and PORTALU.IDPUT>\':_b\'
                  order by ENABLED,OPR_NAME
               ',USERS.WEBLOGIN,{? _choice=2 | _choice=4 || '' || USERSF.UPR_SYNC ?});

::             Wysłanie uprawnień jednego użytkownika
               {? _tab.first()
               || _args:=obj_new('Tab','Status','ErrorCode','ErrorMessage');
                  _args.Tab:=_tab; _args.Status:=0; _args.ErrorCode:=0; _args.ErrorMessage:='';
                  _res:=exec('run_mwac','sync_mwa','PORTAL_CFG','sl_TenantUserRightsModify',0,,_args);
::                Jeśli błąd 50000 (Przekroczono ilość zakupionych licencji), to blokada dalszej synchronizacji
                  {? type_of(_res)=type_of(0) & _res=0
                  || {? _args.ErrorCode=50000 & _args.ErrorMessage*'Przekroczono ilość zakupionych licencji'>0
                     || exec('put_usersf','users',,,,,,,,,,,,,,,,'T')
                     ?};
                     {? _option=1 || {? _result='' || _result:=USERSF.uidref() ?} || _result:=0 ?}
::                Jeżeli ok, to stemplowanie użytkownika najwyższym IDPUTem wysłanych uprawnień
                  || _tab.index(_tab.ndx_tmp(,,'IDPUT',,));
                     {? _tab.last()
                     || exec('put_usersf','users',,,,,,,,,,,,,,,_tab.IDPUT)
                     ?}
                  ?};
                  obj_del(_args)
               ?};

               obj_del(_tab)
            ?}
         ?};

         USERS.next()
      !};
      {? _dialog || FUN.prg_stop() ?}
   ?};
   USERS.cntx_pop(); USERSF.cntx_pop();
   {? _dialog || KOMM.select() ?}
?};

PORTALU.cntx_pop();

_result


\data_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Funkcja wspomagająca usuwanie danych z encji portalu
::   WE: _a - 0-standardowe działanie, 1-naprawa błędów we współpracy z chmurą, wpp pytanie o sposób działania
::----------------------------------------------------------------------------------------------------------------------
:: Tryb deweloperski (aktywna funkcja eksportu danych w RR.xx)
_develop:=0;

_txt0:=
   'Funkcja pozwala usunąć wybrany zakres danych z portalu bez fizycznego usunięcia rekordu w ERP\n'
   'w oparciu o standardowe mechanizmy, czyli zapamiętane identyfikatory chmurowe.'@;

_txt1:=
   'Funkcja pozwala usunąć wybrany zakres danych z portalu w przypadku, gdy brak jest powiązań z rekordami w ERP.\n'
   'Mechenizm naprawczy umożliwia najpierw pobranie pałnego zakresu danych z encji (Analizuj dane z chmury),\n'
   'po czym oznacza błędne zapisy, które można usunąć.'@;

{? var_pres('_a')=type_of(0) & (_a=0 | _a=1)
|| _kind:=_a;
   {? _kind=0
   || {? ~FUN.ask(_txt0+'\n\n'+'Czy kontynuować?'@)
      || return()
      ?}
   || {? ~FUN.ask(_txt1+'\n\n'+'Czy kontynuować?'@)
      || return()
      ?}
   ?}
|| _choice:=FUN.choice(
      'Mechanizm służy do usunięcia wybranego zakresu danych z Portalu HR:'@+
      '\n\n'+
      'Standardowe:'+'\n'+
      _txt0+
      '\n\n'+
      'Naprawa błędów:'+'\n'+
      _txt1+
      '\n\n'+
      'Wybierz sposób działania:'@,,
      'Standardowe'@,'Naprawa błędów'@
   );
   {? _choice=1
   || _kind:=0
   |? _choice=2
   || _kind:=1
   || return()
   ?}
?};

:: Tabela SYNC_MWA jest filtrowana dla przeznaczeń danych PORTAL*,
:: tylko w zakresie zapisów metod '*Delete' uruchamianych dla obsługi 'Usuwanie'
_tab:=sql('
   select
      SYNC_MWA.REFERENCE as REF,
      SYNC_PD.REFERENCE as SYNC_PD,
      SYNC_PD.SYM as PD_SYM,
      SYNC_MWA.TAB_ACR as TAB_ACR,
      \'N\' as PDS
   from SYNC_MWA join SYNC_PD
   where SYNC_MWA.AKT=\'T\'
      and SYNC_MWA.TYPE=\':_a\'
      and SYNC_PD.SYM in values
         (\'PORTAL\'),
         (\'PORTAL_CFG\'),
         (\'PORTAL_CUSTOM\'),
         (\'PORTAL_HR_CFG\'),
         (\'PORTAL_SEOD\'),
         (\'PORTAL_SEOD_CFG\'),
         (\'PORTAL_WNIOSKI\')
',exec('mwac_type_delete','synchro'));

:: Dodatkowe sprawdzenie, czy dana tabela występuje w "synchro" w innych przeznaczeniach danych niż PORTAL*
:: (tylko takie zapisy są zostawiane jako potencjalnie generujące błędy) - wyłączone
::{? _kind=1 & _tab.first()
::|| {!
::   |? _count:=0;
::      SYNC_DEF.index('PDTAB');
::      SYNC_DEF.prefix(_tab.TAB_ACR,);
::      {? SYNC_DEF.first()
::      || {!
::         |? {? SYNC_DEF.AKT='T' & 6+SYNC_DEF.SYNC_PD().SYM<>'PORTAL'
::            || _count+=1
::            ?};
::            SYNC_DEF.next()
::         !}
::      ?};
::      {? _count>0 || _tab.PDS:='T'; _tab.put() ?};
::      _tab.next()
::   !};
::   {? _tab.first() || {! |? {? _tab.PDS='T' || _tab.next() || _tab.del() ?} !} ?}
::?};

SYNC_MWA.cntx_psh();
SYNC_MWA.prefix();
SYNC_MWA.f_set('SYNC_PD(SYM),LP',,'SYNC_MWA.REFERENCE in (select :_a.REF from :_a)',_tab);
obj_del(_tab);

_wer:=SYNC_MWA.mk_sel('Usuwanie danych'@,,,'entitydelete',,,,,'U');
SYNC_MWA.win_fld(_wer,,'SYNC_PD','SYM');
SYNC_MWA.win_fld(_wer,,'LP',,,5);
SYNC_MWA.win_fld(_wer,,'TAB_ACR');
SYNC_MWA.win_fld(_wer,,'METHOD');
{? exec('is_mwa_sync_idd','portal_engine')
|| _tab_idd:=~~;
   SYNC_MWA.win_fld(_wer,,'SYNC_IDD')
|| _tab_idd:=exec('tab_idd','portal_engine');
   SYNC_MWA.win_fld(_wer,_tab_idd,'SYNC_IDD')
?};
{? _kind=0
|| SYNC_MWA.win_act(_wer,,'Formuła','&Usuń dane z chmury'@@,,,
      "params_exec('data_delete_before','portal_engine')",,0,1,
      "params_exec('data_delete_group_before','portal_engine')",
      "params_exec('data_delete_group_after','portal_engine')",'U'
   )
|? _kind=1
|| SYNC_MWA.win_act(_wer,,'Formuła','&Analizuj dane z chmury'@@,,,
      "params_exec('data_get','portal_engine')",,1,1,
      "params_exec('data_get_group_before','portal_engine')",
      "params_exec('data_get_group_after','portal_engine')",'A'
   )
?};
{? exec('is_mwa_sync_idd','portal_engine') & _develop
|| _formula:="
      SYNC_MWA.export(exec('tab_idd_file','portal_engine'),1,'',,
         ,'SYNC_PD','SYM',1,
         ,'TAB_ACR',,2,
         ,'METHOD',,3,
         ,'SYNC_IDD',,4,
      );
      ~~
   ";
   SYNC_MWA.win_act(_wer,,'Formuła','Eksportuj identyfikatory'@@,,,_formula,,,,,,'E')
?};
{? ~exec('is_mwa_sync_idd','portal_engine')
|| _formula:="
      _tab_idd:=params_get().tab_idd;
      _tab_idd.prefix(SYNC_MWA.SYNC_PD().SYM,SYNC_MWA.TAB_ACR,SYNC_MWA.METHOD,);
      {? ~_tab_idd.first() || _tab_idd.blank() ?};
      ~~
   ";
   SYNC_MWA.win_act(_wer,,'Rekord',,,,_formula)
?};
SYNC_MWA.win_act(_wer,,'Kolejność');

SYNC_MWA.win_sel(_wer);
params_set('tab_idd',_tab_idd);
SYNC_MWA.select();

SYNC_MWA.f_clear();
SYNC_MWA.cntx_pop();
~~


\data_delete_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja usunięcia danych z encji
::       Uruchomienie w kontekście rekordu tabeli SYNC_MWA
::   WE: [_a] - czy wyświetlać dialogi [1]/0
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
|| _dialog:=1
?};

:: Środowisko wywołania
_env:=exec('env','sync_mwa');
params_set('env',_env);
_env.LogLevel:=-1;

params_set('env',_env);

_selected:=(SYNC_MWA.sel_size()>0);

{? ~_selected & _dialog & ~FUN.ask('Czy usunąć dane z chmury za pomocą wskazanej metody?'@) || return() ?};

{? ~_selected || KOMM.init(,,'Usuwanie'@) ?};

_env.MethodName:=SYNC_MWA.METHOD;
_env.TabAcr:=SYNC_MWA.TAB_ACR;
SYNC_PD.cntx_psh();
_sync_pd:=SYNC_MWA.SYNC_PD().SYM;
SYNC_PD.cntx_pop();

:: Odnalezienie warunku zapamiętywania zmian z przeznaczenia danych
SYNC_DEF.cntx_psh();
SYNC_DEF.index('PDTAB');
SYNC_DEF.prefix(SYNC_MWA.TAB_ACR,SYNC_MWA.SYNC_PD,'T');
{? SYNC_DEF.first()
|| _condition:=$SYNC_DEF.WAR_FORM
|| _condition:=""
?};
SYNC_DEF.cntx_pop();

_tab:=($(SYNC_MWA.TAB_ACR))();
params_set('env',_env,'tab',_tab,'sync_pd',_sync_pd);
_formula:="
   params_set(params_get());
   _env:=params_get().env;
   _tab:=params_get().tab;
   _sync_pd:=params_get().sync_pd;
   _uidref:=_tab.uidref();
:: Wywołanie zapytania i parsowanie wyniku
   KOMM.sect_beg(
      'Przetworzono metodę %1 (przeznaczenie danych %2) dla zapisu: %3.'@
      [SYNC_MWA.METHOD,_sync_pd,exec('record','#to_string',_uidref,1)]
   );
   _env.Param:=_uidref;
   _res:=exec('run','sync_mwa');
   KOMM.sect_end();
   ~~
";
params_exec('for_each','#table',_tab,_formula);

{? ~_selected & _dialog || KOMM.select() ?};
~~


\data_delete_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja usunięcia danych z encji - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć dane z pomocą zaznaczonych metod?'@)
|| KOMM.init(,,'Usuwanie'@);
   1
|| 0
?}


\data_delete_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja usunięcia danych z encji - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\TenantGenericDashItems
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przeprowadza kastomizację dashboardu chr_PersonRequest na portalu za pomocą wysłania odpowiednich komunikatów.
::   WY: data-godzina ostatniej aktualizacji (__Last_SortValue z chmury)
::----------------------------------------------------------------------------------------------------------------------
_pd:='PORTAL_CFG';

:: Przygotowanie danych
_tab:=exec('TenantGenericDashItemsTab','portal_engine');

_result:='';
{? _tab.first()
|| _result:=exec('run_mwac','sync_mwa',_pd,'sl_TenantGenericDashItemsModify',1,,_tab);
   ~~
?};
_result


\TenantGenericDashItemsTab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Przygotowywuje tymczasową strukturę z rekordami do wysłania na portal dla encji sl_TenantGenericDashItems.
::   WY: przygotowana struktura
::----------------------------------------------------------------------------------------------------------------------
::Utworzenie struktury tymczasowej dla rekordów kastomizacji dashboardu chr_PersonRequest
_tab:=tab_tmp(3,
:: Nazwa dashboardu
   'DASHBN',   'STRING[128]', 'DashboardName',
   'ISSTD',    'INTEGER',     'IsStd',
   'SPACT',    'STRING[128]', 'SpaceType',
   'SPACI',    'INTEGER',     'SpaceIndex',
   'LP',       'INTEGER',     'Lp',
   'COMPN',    'STRING[128]', 'ComponentName',
   'VISIBLE',  'INTEGER',     'Visible'
);

::Utworzenie i dodanie odpowiednich zapisów do struktury tymczasowej
_dashboardName:='chr_PersonRequest';

_tab.DASHBN:=_dashboardName;
_tab.ISSTD:=1;
_tab.SPACT:='RecordContext';
_tab.SPACI:=3;
_tab.LP:=2;
_tab.COMPN:='SLO\\chr_PersonRequestStatusHistory';
_tab.VISIBLE:=0;
_tab.add();

_tab.DASHBN:=_dashboardName;
_tab.ISSTD:=1;
_tab.SPACT:='RecordContext';
_tab.SPACI:=1;
_tab.LP:=2;
_tab.COMPN:='SLO\\cseod_AcceptanceHistory';
_tab.VISIBLE:=1;
_tab.add();

_tab


\portall_sync
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Synchronizuje licencje
::       Wymaga wpisania następujących metod jako 'Uruchomienie':
::       - rgt_OprGrupyTenantDelete
::       - rgt_OprGrupyTenantModify
::       - rgt_OprGrupyTenantGet
::   WE: _a - czy wyświetlać dialogi [0]/1
::   WY: 0/1 - czy udała się synchronizacja
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_result:=1;

{? ~_dialog | FUN.ask('Czy synchronizować licencje?'@)
||
   KOMM.init(,,'Synchronizacja licencji'@);
   _sync_pd:='PORTAL_CFG';

:: Synchronizacja wykonuje się 2x, aby pobrać również potwierdzenia modyfikacji z chmury
   {! _it:=1.. 2
   |! {? _it=2 || delay(5) ?};

      _id_sync:='';
      _tab:=proc_exe('new_sync@synchro','PORTAL_CFG',1,'PORTALL',100);
      {? _tab.first()
      || _id_sync:=_tab.IDSYNC;
         {!
         |? _uidref:=_uidref:=8-_tab.TR1-1;
            {? _tab.RODZ='put'
            || {? exec('FindAndGet','#table',PORTALL,_uidref,,"PORTALL.BOUGHT",0)=0
               || _res:=exec('run_mwac','sync_mwa',_sync_pd,'rgt_OprGrupyTenantDelete',0,,_uidref);
                  {? type_of(_res)=type_of(0) & _res=0 || _result:=0 ?}
               || _res:=exec('run_mwac','sync_mwa',_sync_pd,'rgt_OprGrupyTenantModify',0,,_uidref);
                  {? type_of(_res)=type_of(0) & _res=0 || _result:=0 ?}
               ?}
            |? _tab.RODZ='del'
            || _res:=exec('run_mwac','sync_mwa',_sync_pd,'rgt_OprGrupyTenantDelete',0,,_uidref);
               {? type_of(_res)=type_of(0) & _res=0 || _result:=0 ?}
            ?};
            _tab.next()
         !}
      ?};
      obj_del(_tab);
      {? _result
      || proc_exe('new_sync_id_del@synchro',_sync_pd,1,'PORTALL',,_id_sync)
      ?};

      SYNC_MWA.cntx_psh();
      SYNC_MWA.index('TYP_TAB');
      SYNC_MWA.prefix('T',exec('mwac_type_exec','synchro'),_sync_pd,'PORTALL',);
      {? SYNC_MWA.first()
      || _time:=exec('sync_mwa_result_get','synchro',SYNC_MWA.ref());
         PORTALL.cntx_psh();
         _res:=exec('run_mwac','sync_mwa','PORTAL_CFG','rgt_OprGrupyTenantGet',0,,_time);
         PORTALL.cntx_pop();
         {? type_of(_res)=type_of('') & _res<>''
         || exec('sync_mwa_result_save','synchro',SYNC_MWA.ref(),_res)
         |? type_of(_res)=type_of(0) & _res=0
         || _result:=0
         ?}
      ?};
      SYNC_MWA.cntx_pop()
   !};

   {? _dialog
   || {? _result>0
      || FUN.info('Licencje zostały zsynchronizowane.'@)
      || FUN.emsg('Wystąpiły błędy podczas synchronizacji licencji.'@)
      ?}
   ?}
?};

_result


\idput
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Wykonuje put()-y dla rekordów tabel w celu utworzenia zawartości do wysyłki inicjującej.
::   WE: _a - dialog ([1]/0)
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(0) || _a || 1 ?};

{? ~_dialog |
   FUN.ask(
      'Czy uruchomić funkcję inicjującą dane przed zasileniem portalu?\n\n'
      'Funkcję należy uruchomić raz przed pierwszym zasileniem portalu danymi.\n\n'
      'UWAGA: działanie funkcji może być czasochłonne.'@
   )
|| exec('tables_idput','sync_mwa',,'PORTAL_CFG',0);
   exec('tables_idput','sync_mwa',,'PORTAL_HR_CFG',0);
   exec('tables_idput','sync_mwa',,'PORTAL_SEOD_CFG',0);
   exec('tables_idput','sync_mwa',,'PORTAL',0);
   exec('tables_idput','sync_mwa',,'PORTAL_WNIOSKI',0);
   exec('tables_idput','sync_mwa',,'PORTAL_CUSTOM',0)
?};
''


\token_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Identyfikator używany do uzyskiwania tokenta dostępowego
::----------------------------------------------------------------------------------------------------------------------
:: Identyfikator tenanta, gdy chcemy uzyskać token globalnie dla dzierżawcy
::exec('tenant','portal_engine')
:: Dodatkowo identyfikator sesji, gdy chcemy użyskać token lokalnie dla sesji programu
'%1/%2'[exec('tenant','portal_engine'),SYSLOG.ses_id()]


\env_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Zwraca obiekt z definicją środowisk
::       https://confluence.assecobs.pl/pages/viewpage.action?pageId=180817055
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'KOD','STRING[20]','Kod'@
   ,'URL','STRING[255]','Url'@
   ,'WADL','STRING[255]','Url WADL'@
);

_wer:=_tab.mk_sel('Dostępne środowiska'@,,,'env_internal',,,20);
_tab.win_fld(_wer,,'KOD');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_tab.win_sel(_wer);

_obj:=obj_new('TAB','WER','add');
_obj.TAB:=_tab;
_obj.WER:=_wer;
_obj.add:="
   .TAB.blank();
   .TAB.KOD:=_a;
   .TAB.URL:=_b;
   .TAB.WADL:=_c;
   .TAB.add()
";

_obj.add('DEV-DEV',
   'https://portalcloudapi-dev-dev.abs.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi-dev-dev.abs.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('DEV-SETUP',
   'https://portalcloudapi-dev-setup.abs.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi-dev-setup.abs.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('TEST-PREPROD',
   'https://portalcloudapi-test-preprod.abs.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi-test-preprod.abs.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('TEST-ZEW',
   'https://portalcloudapi-test.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi-test.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('PROD',
   'https://portalcloudapi.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('DEMO',
   'https://portalcloudapi-demo.assecobs.pl/?dbc=internal_rest',
   'https://portalcloudapi-demo.assecobs.pl/?dbc=internal_rest&WADL');

_obj


\set_tenant_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Ustawia status dzierżawcy
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj_conf','portal_engine');
_env:=exec('env_internal','portal_engine');
_ENV:={? XINFO.POR_CONF='W' || XINFO.POR0ENV || XINFO.POR_ENV ?};
_env.TAB.prefix(_ENV,);
{? _env.TAB.first()
|| _choice:=FUN.choice('Status docelowy'@,,'Aktywny'@,'Ograniczony dostęp'@,'Wyłączony'@);
   {? _choice=1
   || _state:='Active'
   |? _choice=2
   || _state:='Suspended'
   |? _choice=3
   || _state:='Disabled'
   || _state:=''
   ?};
   {? _state<>''
   || exec('TenantModify','sl_api',
         exec('sync_pd_internal','portal_engine'),
         _env.TAB.URL,
         exec('tenant','portal_engine'),,,,
         _state,
         1
      )
   ?}
|| FUN.info(
      'Aby skorzystać z funkcji zmiany statusu dzierżawcy,\n'
      'należy ustawić poprawne środowisko w parametrach pracy Portalu.'@
   )
?};
''


\sync_pd_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Kod przeznaczenia danych - serwis wewnętrzny
::----------------------------------------------------------------------------------------------------------------------
'PORTAL_INTERNAL'


\portalr_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wyświetla listę uprawnień do wierszy (RowRightsName)
::   WE: [_a] - selekcja słownika 'SLO', pełne okno 'WER' (domyślnie)
::       [_b] - nazwa uprawnienia, od którego rozpocząć selekcję
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') || _variant:=_a || _variant:='WER' ?};
{? var_pres('_b')=type_of('') || _name:=_b || _name:='' ?};

_result:='';

PORTALRR.cntx_psh();
PORTALRU.cntx_psh();
USERS.cntx_psh();
USERSF.cntx_psh();

PORTALRR.index('NAME');
PORTALRR.prefix();
PORTALRR.find_key(_name);

PORTALRU.index('LOGIN');
PORTALRU.prefix();

_wer_r:=PORTALRR.mk_sel('Prawa do wierszy'@,'P',,'portalrrselect',,,,,'U');
PORTALRR.win_fld(_wer_r,,'NAME',,,50);
PORTALRR.win_fld(_wer_r,,'DESC',,,61);
{? _variant='WER'
|| PORTALRR.win_act(_wer_r,0,'Dołącz',,,,,,1);
   PORTALRR.win_act(_wer_r,1,'Dołącz',,,,,,1);
:: Bez poprawiania, bo wszystkie pola wchodzą do klucza biznesowego na portalu (można tylko dołączać i usuwać zapisy)
::   PORTALRR.win_act(_wer_r,,'Popraw');
   PORTALRR.win_act(_wer_r,,'Usuń',,,,,,,1);
   _formula:="params_exec('portalr_update','portal_engine')";
   PORTALRR.win_act(_wer_r,0,'Formuła','Aktualizuj'@@,,,_formula,,,,,,'A');
   PORTALRR.win_act(_wer_r,1,'Formuła','Aktualizuj'@@,,,_formula,,,,,,'A');
   _formula:="__CHK.record(PORTALRR,,'NAME','DESC')";
   PORTALRR.win_act(_wer_r,0,'Rekord',,,,,_formula);
   PORTALRR.win_act(_wer_r,1,'Rekord',,,,,_formula);
   PORTALRR.win_btn(_wer_r,'text=%1,panel=bottom,align=begin'['Aktualizuj'@],'menu:A')
|| PORTALRR.win_act(_wer_r,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W')
?};
PORTALRR.win_dict(_wer_r);

_wer_u:=PORTALRU.mk_sel('Prawa użytkowników do wierszy'@,'P',,'portalruselect',,,,,'U');
PORTALRU.win_fld(_wer_u,,'USERS','WEBLOGIN','WEBLOGIN',30);
PORTALRU.win_fld(_wer_u,,'PORTALRR','NAME','NAME',50);
PORTALRU.win_fld(_wer_u,,'CONTEXT',,,30);
PORTALRU.win_act(_wer_u,0,'Dołącz',,,,,,1);
PORTALRU.win_act(_wer_u,1,'Dołącz',,,,,,1);
:: Bez poprawiania, bo wszystkie pola wchodzą do klucza biznesowego na portalu (można tylko dołączać i usuwać zapisy)
::PORTALRU.win_act(_wer_u,,'Popraw');
PORTALRU.win_act(_wer_u,,'Usuń',,,,,,,1);
_formula:="params_exec('portalr_update','portal_engine')";
PORTALRU.win_act(_wer_u,0,'Formuła','Aktualizuj'@@,,,_formula,,,,,,'A');
PORTALRU.win_act(_wer_u,1,'Formuła','Aktualizuj'@@,,,_formula,,,,,,'A');
_formula:="
   _chk:=__CHK.record(PORTALRU,,'USERS','PORTALRR');
   {? _chk=''
   || USERSF.index('UNIK');
      USERSF.prefix(REF.FIRMA,PORTALRU.USERS);
      {? ~USERSF.first() | USERSF.PORTAL2<>'T'
      || FUN.emsg('Wskazany użytkownik nie ma dostępu do portalu.'@);
         _chk:='USERS'
      ?}
   ?};
   _chk
";
PORTALRU.win_act(_wer_u,0,'Rekord',,,,,_formula);
PORTALRU.win_act(_wer_u,1,'Rekord',,,,,_formula);
PORTALRU.win_btn(_wer_u,'text=%1,panel=bottom,align=begin'['Aktualizuj'@],'menu:A');

_grp:=PORTALRR.grp_make('Prawa do wierszy (%1)'@['RowRightsName'],,'portalrrgrp',,,,,'normal');
PORTALRR.grp_sel(_grp,,_wer_r,'Prawa do wierszy'@,,,,,,,,,'maximized');
PORTALRR.grp_sel(_grp,PORTALRU,_wer_u,'Prawa użytkowników do wierszy'@,,,,,,,,,'maximized');

PORTALRR.win_sel({? _variant='WER' || _grp || _wer_r ?});
{? PORTALRR.select(,1,-1) || _result:=PORTALRR.NAME ?};

PORTALRR.cntx_pop();
PORTALRU.cntx_pop();
USERS.cntx_pop();
USERSF.cntx_pop();
_result


\portalr_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Aktualizuje zapisy uprawnień do wierszy
::       - część standardowa dopisuje uprawnienia systemowe 'ExtData#%1'[_login]
::       - wtyczka wdrożeniowa dopisze dowolne inne uprawnienia
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh(); USERSF.cntx_psh(); PORTALRR.cntx_psh(); PORTALRU.cntx_psh();

USERS.index('USR_AWEB');
USERS.prefix('T');
{? USERS.first()
|| {!
   |? USERSF.index('UNIK');
      USERSF.prefix(REF.FIRMA,USERS.ref());
      {? USERSF.first() & USERSF.PORTAL2='T'
      || _portalrr:=null();
      _row_rights_name:=exec('ExtData','portal_engine',USERS.WEBLOGIN);
      PORTALRR.index('NAME');
      PORTALRR.prefix(_row_rights_name,);
      {? PORTALRR.first()
      || _portalrr:=PORTALRR.ref()
      || PORTALRR.NAME:=_row_rights_name;
         PORTALRR.DESC:='Domyślne prawo do danych w tabeli buforowej';
         {? PORTALRR.add() || _portalrr:=PORTALRR.ref() ?}
      ?};
      {? _portalrr<>null()
      || PORTALRU.index('UNIQUE');
         PORTALRU.prefix(USERS.ref(),_portalrr);
         {? ~PORTALRU.first()
         || PORTALRU.USERS:=USERS.ref();
            PORTALRU.PORTALRR:=_portalrr;
            PORTALRU.CONTEXT:='';
            PORTALRU.add()
         ?}
         ?}
      ?};
      USERS.next()
   !}
?};

USERS.cntx_pop(); USERSF.cntx_pop(); PORTALRR.cntx_pop(); PORTALRU.cntx_pop();

:: Uruchomienie wtyczki, która dopisze uprawnienia
Plugin.run('PORTAL_RR_UPDATE');
~~


\ExtData
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Nazwa specjalnego RowRightsName dla encji buforowych
::   WE: _a - tekst do przetworzenia
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & _a<>'' || 'ExtData#%1'[_a] || '' ?}


\param_history_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zmienia konfigurację ustawień przekazanych parametrów - wyłącza historię zmian wartości.
::   WE: _a [STRING] - przekazane w łańcuchu znaków kolejne nazwy parametrów do przetworzenia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_vars:={? var_pres('_a')=type_of('') & _a<>'' || spli_str(_a,',') || return() ?};

KST_DEF.cntx_psh();
KST_DEF.clear();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix('XINFO','XINFO');

{! _ii:=1..obj_len(_vars)
|! {? KST_MAP.find_key(_vars[_ii],_vars[_ii]) & KST_MAP.KST_DEF().HISTORIA<>'N'
   || KST_DEF.HISTORIA:='N';
      KST_DEF.put()
   ?}
!};
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();
~~


\param_set_global
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zmienia konfigurację ustawień przekazanych parametrów - ustawia parametry jako globalne.
::   WE: _a [STRING] - przekazane w łańcuchu znaków kolejne nazwy parametrów do przetworzenia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_vars:={? var_pres('_a')=type_of('') & _a<>'' || spli_str(_a,',') || return() ?};

KST_DEF.cntx_psh();
KST_DEF.clear();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix('XINFO','XINFO');

{! _ii:=1..obj_len(_vars)
|! {? KST_MAP.find_key(_vars[_ii],_vars[_ii]) & KST_MAP.KST_DEF().WSPOLNA<>'T'
   || KST_DEF.WSPOLNA:='T';
      KST_DEF.put()
   ?}
!};
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();
~~


\param_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Tworzy i wyświetla okienko redagowania parametrów portalu związanych z dostępem do portalu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Sterowanie działaniem konfiguratora: tylko 'W', tylko 'J', oba ''
_option:='J';

_vars:=obj_new('off','global');
:: Nazwy parametrów do wyłączenia historii zmian
_vars.off:=
   'POR_CONF,POR0TNNT,POR_TNNT,POR0NAME,POR_NAME,POR0USR,POR_USR,POR0PASS,POR_PASS,POR0RURL,POR_RURL,POR0OURL,POR_OURL,'
   'POR0SCOP,POR_SCOP,POR0WADL,POR_WADL,POR0ENV,POR_ENV,POR_TOUT,POR_RETR,POR_LOG,'
   'POR_ABCU,POR_ABCP,POR_ABCE,POR0ABCU,POR0ABCP,POR0ABCE';
:: Nazwy parametrów do ustawienia jako globalne
_vars.global:=
   'POR_CONF,POR0TNNT,POR0NAME,POR0USR,POR0PASS,POR0RURL,POR0OURL,POR0SCOP,POR0WADL,POR0ENV,POR_TOUT,POR_RETR,'
   'POR_LOG,'
   'POR0ABCU,POR0ABCP,POR0ABCE';

exec('param_history_off','portal_engine',_vars.off);
exec('param_set_global','portal_engine',_vars.global);

_par:=params_get();
_tab:=_par.TAB;
_szer:=80;

_red:=XINFO.mk_edit('Dostęp do portalu'@,0,'xinfoqpor_acc',5,7,'','');
XINFO.win_esep(_red,'Parametry podstawowe'@);
{? _option=''
|| XINFO.win_efld(_red,,'POR_CONF',,,,,,'Typ dzierżawcy'@,,,'radio-buttons',,
      'Jednofirmowy, dedykowany do obsługi bieżącej firmy'@,"'J'",
      'Wielofirmowy, wspólny dla całej grupy kapitałowej'@,"'W'"
   )
?};
XINFO.win_efld(_red,_tab,'TNNT','','',_szer-4,0,0,'Identyfikator dzierżawcy'@,0,
   'Identyfikator dzierżawcy (tananta)',,'');
_fbtn1:=XINFO.fld_ebtn(_red,'text="%1"'['​…'],"params_exec('GetConfigPortal','portal_engine')");
XINFO.btn_eopt(_red,_fbtn1,'tooltip="%1"'['Pobiera konfigurację usługi sieciowej z pliku konfig.'@]);
XINFO.efld_opt(_red,'mark=1',_tab,'TNNT','');
XINFO.win_efld(_red,_tab,'NAME','','',_szer,0,0,'Nazwa dzierżawcy'@,0,'Nazwa dzierżawcy (tenanta)'@,,'');
XINFO.efld_opt(_red,'mark=0',_tab,'NAME','');
XINFO.win_efld(_red,_tab,'USR','','',_szer,0,0,'Użytkownik'@,0,'Użytkownik API'@,,'');
XINFO.efld_opt(_red,'mark=1',_tab,'USR','');
XINFO.win_efld(_red,_tab,'PASS','','',_szer,0,0,'Hasło'@,0,'Hasło użytkownika API'@,'password','');
XINFO.efld_opt(_red,'mark=1',_tab,'PASS','');
XINFO.win_efld(_red,_tab,'RURL',,,_szer,,,,,'Adres url usługi'@);
XINFO.win_efld(_red,_tab,'OURL',,,_szer,,,,,'Adres url autoryzacyjnego OAUTH2'@);
XINFO.win_efld(_red,_tab,'SCOPE',,,_szer,,,,,'Zasięg autoryzacji OAUTH2 (scope)'@);
XINFO.win_efld(_red,_tab,'WADL',,,_szer,,,,,'Adres url pliku WADL'@);
XINFO.win_efld(_red,_tab,'ENV',,,_szer-3,,,,,'Kod środowiska'@,,'F3_button=1');
XINFO.win_esep(_red,'Notyfikacje'@);
XINFO.win_efld(_red,_tab,'ABC_URL',,,_szer);
::XINFO.win_efld(_red,_tab,'ABC_PORT');
XINFO.win_efld(_red,_tab,'ABC_ENV',,,_szer);
::XINFO.win_esep(_red,'Parametry techniczne'@);
::XINFO.win_efld(_red,,'POR_TOUT');
::XINFO.win_efld(_red,,'POR_RETR');
::XINFO.win_efld(_red,,'POR_LOG',,,,,,'Logowanie systemowe'@,,,
::   'check-box','left_label=1,check_label=%1'['Czy systemowe logowanie komunikacji jest włączone?'@],"'T'","'N'"
::);

exec('czytaj_conf','portal_engine');
:: Opcjonalnie nadpisanie XINFO.POR_CONF: 'W'/'J'
{? _option<>'' || XINFO.POR_CONF:=_option ?};
exec('zapisz','#stalesys',1,XINFO,'POR_CONF');
params_exec('por_conf_czytaj','portal_engine');

_opt:='panel=bottom,align=begin';
::{? exec('runtime_dro','#system')
::|| _formula:="params_exec('autoconfig','portal_engine')";
::   XINFO.win_ebtn(_red,'text=%1,%2'['Autokonfiguracja'@,_opt],_formula)
::?};
_formula:="params_exec('portall_select','portal_engine',0);''";
XINFO.win_ebtn(_red,
   'text=%1,%2'['Licencje'@,_opt]
   ,_formula
);

exec('ok_esc','#window',XINFO,_red);

_ae:="
   _TAB:=params_get().TAB;
   {? (_ret:=__CHK.record(_TAB,,'TNNT','USR','PASS'))<>'' || _ret || '' ?}
";
{? params_exec('edytuj','#stalesys',XINFO,_red,_ae,1)<>date(0,0,0)
|| exec('porpar_save','portal_engine',XINFO.POR_CONF,_par.cfg,_tab);
::   exec('firmy_act','portal_engine');
   ~~
?};
VAR_DEL.delete('ftm');
~~


\param_oper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Tworzy i wyświetla okienko redagowania parametrów portalu związanych z jego działaniem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_vars:=obj_new('off','global');
:: Nazwy parametrów do wyłączenia historii zmian
_vars.off:=
   'POR0OAKW,POR_OAKW,POR0UAKW,POR_UAKW,POR0OKRP,POR_OKRP,POR0ZAST,POR_ZAST,POR0ZASU,POR_ZASU,'
   'POR0KALA,POR0KALS,POR_KALS,POR0KALW,POR_KALW';
:: Nazwy parametrów do ustawienia jako globalne
_vars.global:=
   'POR0OAKW,POR0UAKW,POR0OKRP,POR0ZAST,POR0ZASU,POR0KALA,POR0KALS,POR0KALW';

exec('param_history_off','portal_engine',_vars.off);
exec('param_set_global','portal_engine',_vars.global);

_par:=params_get();
_tab:=_par.TAB;
_szer:=60;
_pzd:=exec('is_pzd03','ppsf');

_red:=XINFO.mk_edit('Parametry działania'@,0,'xinfoqpor_oper',5,7,'','');

XINFO.win_etab(_red,'Parametry ogólne'@);
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'PRCPACT',,,3,,,,,
   'Czy włączona współpraca z portalem powiązanym (webTerm)?'@,
   'check-box','check_label="%1"'['Tak, współpraca z portalem powiązanym jest włączona'],"'T'","'N'");
XINFO.win_efld(_red,_tab,'PRCP',,,_szer,,1,,,'Adres portalu współpracującego - czas pracy'@);
XINFO.win_efld(_red,_tab,'PEXTRA',,,_szer,,1,,,'Adres portalu współpracującego - aplikacje dodatkowe'@);
XINFO.win_efld(_red,_tab,'HRMAIL',,,_szer,,,,,'E-mail działu HR'@);
XINFO.win_etab(_red,'Powiadomienia'@);
XINFO.win_esep(_red,'Wysyłanie powiadomień oraz e-maili'@);
:: Obsługa parametru DisableAcceptanceNotification - negacja negacji ...
XINFO.win_efld(_red,_tab,'ACCPTNOT',,,3,,,,,
   'Czy wysyłać powiadomienia oraz e-maile dotyczące wniosków?'@,
   'check-box',
   'check_label="%1"' ['Tak, wysyłać powiadomienia oraz e-maile dotyczące wniosków'@],
   "'0'","'1'"
);
:: Obsługa parametru EnablePersonNotification.
XINFO.win_efld(_red,_tab,'PERNOT',,,3,,,,,
   'Czy wysyłać pozostałe powiadomienia oraz e-maile?'@,
   'check-box',
   'check_label="%1"' ['Tak, wysyłać pozostałe powiadomienia oraz e-maile'@],
   "'1'","'0'"
);
XINFO.win_etab(_red,'Urlopy'@);
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'UWZALINF',,,_szer,,,,,'Uwaga dotycząca wykorzystania urlopu zaległego'@);
XINFO.win_efld(_red,_tab,'WU_DR0',,,3,,,,,
   'Czy możliwe jest złożenie wniosku urlopowego z zerową liczbą dni roboczych?'@,
   'check-box',
   'check_label="%1"' ['Tak, złożenie takiego wniosku jest możliwe'@],
   "'1'","'0'"
);
XINFO.win_etab(_red,'Baza wiedzy i dokumenty'@);
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'BIPROOT',,,_szer,,,'Tytuł elementu głównego'@,,
   '"Baza wiedzy i dokumenty" — tytuł elementu głównego'@
);
XINFO.win_efld(_red,_tab,'BIPLABEL',,,_szer,,,'"Nowy" — liczba dni'@,,
   'Liczba dni od dodania dokumentu, w których przy dokumencie będzie prezentowana etykieta "Nowy"'@
);
XINFO.win_etab(_red,'Ogłoszenia i ulepszenia'@);
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'ULPMOD',,,3,,,,,
   'Czy opublikowanie ulepszenia ma kierować najpierw do etapu weryfikacji?'@,
   'check-box',
   'check_label="%1"' ['Tak, ulepszenia opublikowane na portalu wymagają weryfikacji'@],
   "'1'","'0'"
);
XINFO.win_efld(_red,_tab,'OGLMOD',,,3,,,,,
   'Czy opublikowanie ogłoszenia ma kierować najpierw do etapu weryfikacji?'@,
   'check-box',
   'check_label="%1"' ['Tak, ogłoszenia opublikowane na portalu wymagają weryfikacji'@],
   "'1'","'0'"
);
XINFO.win_efld(_red,_tab,'UAKW',,,3,,,,,
   'Czy można akceptować / oceniać własne wnioski dot. ulepszeń?'@,
   'check-box','check_label="%1"' ['Tak, można akceptować własne wnioski dot. ulepszeń'@],"'T'","'N'"
);
XINFO.win_efld(_red,_tab,'OAKW',,,3,,,,,
   'Czy można akceptować / oceniać własne wnioski dot. ogłoszeń?'@,
   'check-box','check_label="%1"' ['Tak, można akceptować własne wnioski dot. ogłoszeń'@],"'T'","'N'"
);
XINFO.win_etab(_red,'Zespół'@);
XINFO.win_esep(_red,'Ograniczenia w prezentacji danych'@);
XINFO.win_efld(_red,_tab,'OKRPOD',,,3,,,,,
   'Czy zakres dostępnych dla przełożonego danych o podwładnym ma być ograniczany okresem podwładności?'@,
   'check-box','check_label="%1"' ['Tak, ogranicz dane tylko do okresu podwładności'@],"'1'","'0'"
);
:: Obsługa parametru ShowSesitivePersonAbsData4Manager - negacja negacji ...
XINFO.win_efld(_red,_tab,'SENSABS',,,3,,,,,
   'Czy na kalendarzach/listach dostępnych dla przełożonego, ukryć dane wrażliwe zasiłków?'@,
   'check-box','check_label="%1"' ['Tak, dla zasiłków ukryj dane wrażliwe'@],"'0'","'1'"
);
XINFO.win_etab(_red,'Zastępstwa'@);
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'ZASEDIT',,,3,,,,,
   'Czy umożliwić edycję zastępstw służbowych na portalu?'@,
   'check-box','check_label="%1"' ['Tak, umożliwić edycję zastępstw na portalu'@],"'1'","'0'"
);
XINFO.win_efld(_red,_tab,'ZASUNIQ',,,3,,,,,
   'Czy sprawdzać unikalność zastępstw w ramach tej samej roli i okresu?'@,
   'check-box','check_label="%1"' ['Tak, sprawdzać unikalność zastępstw'@],"'1'","'0'"
);
XINFO.win_etab(_red,'Ewidencja wejść i wyjść na kalendarzu'@);
{? _pzd
|| XINFO.win_esep(_red,'Rejestracja czasu pracy'@);
   XINFO.win_efld(_red,_tab,'CALACT',,,3,,,,,
   'Czy włączyć obsługę rejestracji czasu pracy?'@,
   'check-box','check_label="%1"' ['Tak, włączyć obsługę rejestracji czasu pracy'@],"'T'","'N'"
   );
   XINFO.win_efld(_red,_tab,'CALSTOP',,,3,,,,,
   'Czy włączyć rejestrację zakończenia czasu pracy?'@,
   'check-box','check_label="%1"' ['Tak, włączyć rejestrację zakończenia czasu pracy'@],"'T'","'N'"
   );
   XINFO.win_efld(_red,_tab,'CALOPT',,,3,,,,,
   'Sposób rejestrowania czasu pracy przez pracownika na kalendarzu'@,
   'radio-buttons',,
   'Bez możliwości edycji czasu',"'1'",
   'Z możliwością edycji czasu',"'2'",
   'Dwa wejścia oraz wyjścia z możliwością edycji czasu',"'3'"
   )
|| XINFO.win_esep(_red,'Parametry podstawowe'@);
   XINFO.win_efld(_red,_tab,'CALACT',,,3,,,,,
   'Czy włączyć obsługę rejestracji czasu pracy?'@,
   'check-box','check_label="%1"' ['Tak, włączyć obsługę rejestracji czasu pracy'@],"'1'","'0'"
   );
   XINFO.win_efld(_red,_tab,'CALOPT',,,3,,,,,
   'Sposób rejestrowania czasu pracy przez pracownika na kalendarzu'@,
   'radio-buttons',,
   'Wejście oraz wyjście bez możliwości edycji czasu',"'1'",
   'Wejście oraz wyjście z możliwością edycji czasu',"'2'",
   'Dwa wejścia oraz wyjścia w ciągu pracy z możliwością edycji',"'3'"
   )
?};

exec('ok_esc','#window',XINFO,_red);

exec('czytaj_conf','portal_engine');
:: Nadpisanie XINFO.POR_CONF:='J' - obecnie tylko dzierżawca jednofirmowy, osobny dla każdej firmy w grupie kapitałowej
XINFO.POR_CONF:='J';
exec('zapisz','#stalesys',1,XINFO,'POR_CONF');
params_exec('por_conf_czytaj','portal_engine');

_ae:=$("
   _TAB:=params_get().TAB;
   {? _TAB.BIPLABEL<0
   || __CHK.err_fld(_TAB,'BIPLABEL',1,'"+'Wartość nie może być ujemna.'@+"')
   || ''
   ?};
   {? ~exec('is_pzd03','ppsf')
   || _TAB.CALSTOP:=_TAB.CALACT
   |? _TAB.CALACT='N'
   || _TAB.CALSTOP:='N';
      _TAB.CALOPT:='0'
   || ''
   ?}
");
{? params_exec('edytuj','#stalesys',XINFO,_red,_ae,1)<>date(0,0,0)
|| exec('porpar_save','portal_engine',XINFO.POR_CONF,_par.cfg,_tab);
::   exec('firmy_act','portal_engine');
   ~~
?};
VAR_DEL.delete('ftm');
~~


\param_scope
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Tworzy i wyświetla okienko redagowania parametrów portalu związanych z zakresem prezentacji danych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_vars:=obj_new('off','global');
:: Nazwy parametrów do wyłączenia historii zmian
_vars.off:=
   'POR0PPOR,POR_PPOR';
:: Nazwy parametrów do ustawienia jako globalne
_vars.global:=
   'POR0PPOR,POR_PPOR';

exec('param_history_off','portal_engine',_vars.off);
exec('param_set_global','portal_engine',_vars.global);

_par:=params_get();
_tab:=_par.TAB;

_red:=XINFO.mk_edit('Zakres prezentacji danych'@,0,'xinfoqpor_scop',5,7,'','');

XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'PPOR',,,3,,,,,
   'Czy nowozatrudnionym pracownikom domyślnie ustawiać flagę "Prezentuj dane na portalu"?'@,
   'check-box','check_label="%1"' ['Tak, nowozatrudniony będzie prezentowany na portalu'@],"'T'","'N'"
);

exec('ok_esc','#window',XINFO,_red);

exec('czytaj_conf','portal_engine');
:: Nadpisanie XINFO.POR_CONF:='J' - obecnie tylko dzierżawca jednofirmowy, osobny dla każdej firmy w grupie kapitałowej
XINFO.POR_CONF:='J';
exec('zapisz','#stalesys',1,XINFO,'POR_CONF');
params_exec('por_conf_czytaj','portal_engine');

{? params_exec('edytuj','#stalesys',XINFO,_red,,1)<>date(0,0,0)
|| exec('porpar_save','portal_engine',XINFO.POR_CONF,_par.cfg,_tab);
::   exec('firmy_act','portal_engine');
   ~~
?};
VAR_DEL.delete('ftm');
~~


\portalk_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Opcje dla pól tabeli PORTALK
::----------------------------------------------------------------------------------------------------------------------
:: Pola tymczasowo wyłączone z redakcji (niedostępne też na portalu)
PORTALK.efld_opt('RED','editable=grayed',,'MAXVALUE');
PORTALK.efld_opt('RED','editable=grayed',,'MINVALUE');
PORTALK.efld_opt('RED','editable=grayed',,'FORMSTR');
:: Pole niedostępne do redakcji - przyjmujemy, że przy włączonym lookupie ma wartość __CustomField__
PORTALK.efld_opt('RED','editable=grayed',,'LKUPFLD');
:: Pole zależne
PORTALK.efld_opt('RED','editable=%1'[{? PORTALK.LKUPTYPE='' || 'grayed' || '1' ?}],,'LKUPCODE');
~~


\help_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Url HELP
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
gsub(exec('wadl_url','portal_engine'),'wadl','help')


\calOption
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza, czy można zmienić parametr PersonWorkCalOption z pozwalającego na liczbę par wejść/wyjść większą od 1
::       na 1.
::   WE:
::   WY: 0/1 - zmiana nie jest możliwa / zmiana jest możliwa
::----------------------------------------------------------------------------------------------------------------------
_counter:=0;
_date:=date();
_year:=($(_date~1))+2;
_month:={? (_msc:=(_date~2))>=10 || $_msc || '0%1'[$_msc] ?};

R_POR_WW.cntx_psh();
R_POR_WW.use('r_ph%1%2'[_year,_month]);
R_POR_WW.index('NR');
P.cntx_psh();
_ndx:=P.ndx_tmp(,,'PORTAL',,);
P.index(_ndx);
P.prefix('T',);
{? _loop:=P.first()
|| {!
   |? _loop
   |!
      R_POR_WW.prefix(P.ref(),_date);
      _counter+=(R_POR_WW.size()>2 | R_POR_WW.find_key(2));

      _loop:={? ~_counter || P.next() ?}
   !}
?};
P.ndx_drop(_ndx);
P.cntx_pop();
R_POR_WW.cntx_pop();
~_counter


\portall_float
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Rozpisuje licencje między firmami
::----------------------------------------------------------------------------------------------------------------------
PORTALL.cntx_psh();

_wer_main:=PORTALL.mk_sel('Licencje'@,'P',,'portallfloat',,,,,'U');
PORTALL.win_fld(_wer_main,,'LICENSE',,,31,,1);
PORTALL.win_fld(_wer_main,,'BOUGHT',,,-12,,1,'Zakupione'@);
PORTALL.win_fld(_wer_main,,'INSTALED',,,-12,,1,'Zainstalowane'@);
PORTALL.win_fld(_wer_main,,'USED',,,-12,,1,'Wykorzystane'@);
::PORTALL.win_fld(_wer_main,,'USEDG',,,-12,,1,'Wykorzystane (grupa)'@);
PORTALL.win_fld(_wer_main,,'EXPIRES',,,-12,,1);
PORTALL.win_act(_wer_main,,'Formuła','Zmian&y'@@,
   ,'Informacje o modyfikacjach bieżącego zapisu'@,"exec('zmiany','#syslog')",,,,,,'Y'
);

_wer_firm:=PORTALL.mk_sel('Firmy'@,'P',,'portallfirmy',,,,,'U');
PORTALL.win_fld(_wer_firm,,'FIRMA','SYMBOL',,31,,1,'Firma'@);
PORTALL.win_fld(_wer_firm,,'BOUGHT',,,-12,,1,'Zakupione'@);
PORTALL.win_fld(_wer_firm,,'INSTALED',,,-12,,1,'Zainstalowane'@);
PORTALL.win_fld(_wer_firm,,'USED',,,-12,,1,'Wykorzystane'@);
::PORTALL.win_fld(_wer_firm,,'USEDG',,,-12,,1,'Wykorzystane (grupa)'@);
PORTALL.win_fld(_wer_firm,,'EXPIRES',,,-12,,1);
_fb:="exec('portall_popraw','portal_engine')";
PORTALL.win_act(_wer_firm,,'Formuła','&Popraw'@@,,,_fb,,1,,,,'P');
PORTALL.win_act(_wer_firm,,'Formuła','Zmian&y'@@,
   ,'Informacje o modyfikacjach bieżącego zapisu'@,"exec('zmiany','#syslog')",,,,,,'Y'
);
::_fb:="exec('portall_usun','portal_engine')";
::PORTALL.win_act(_wer_firm,,'Formuła',exec('action','#string','&Usuń'@@),,,_fb,,,,,,'U');

_grp:=PORTALL.grp_make('Rozpisywanie licencji'@,,'portallgrp',50,,,,'normal');
_after_refresh:="
   params_set(params_get());
   _env:=params_get().env;
   _env.LICENSE:=PORTALL.LICENSE;
   grp_disp(PORTALL,_env.WER_FIRM);
   ~~
";
_before:="
   PORTALL.cntx_psh();
   PORTALL.index('MAIN');
   PORTALL.prefix(1);
   ~~
";
_after:="
   PORTALL.cntx_pop();
   ~~
";
PORTALL.grp_sel(_grp,PORTALL,_wer_main,,_after_refresh,,,5,_before,_after,,,'maximized');
PORTALL.grp_splt(_grp,,'horizontal','firm');
_before:="
   PORTALL.cntx_psh();
   PORTALL.index('FIRMA');
   PORTALL.prefix(0,params_get().env.LICENSE,);
   PORTALL.first();
   ~~
";
_after:="
   PORTALL.cntx_pop();
   ~~
";
PORTALL.grp_sel(_grp,PORTALL,_wer_firm,,,,,,_before,_after,,,'maximized');

_env:=obj_new('WER_MAIN','WER_FIRM','LICENSE');
_env.WER_MAIN:=_wer_main;
_env.WER_FIRM:=_wer_firm;
_env.LICENSE:='';
params_set('env',_env);

PORTALL.win_sel(_grp);
PORTALL.select();
PORTALL.cntx_pop();
~~


\portall_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Poprawianie liczby licencji
::----------------------------------------------------------------------------------------------------------------------
_seod:=exec('license_seod','portal_engine');
{? PORTALL.LICENSE=_seod
|| FUN.info('Zapisu dla licencji %1 nie można modyfikować.'@[_seod]);
   return()
?};

_bought_main:=_bought:=0;
PORTALL.cntx_psh();
PORTALL.index('FIRMA');
PORTALL.prefix(1,PORTALL.LICENSE,);
{? PORTALL.first()
|| _bought_main:=PORTALL.BOUGHT
?};
PORTALL.prefix(0,PORTALL.LICENSE,);
{? PORTALL.first()
|| {!
   |? _bought+=PORTALL.BOUGHT;
      PORTALL.next()
   !}
?};
PORTALL.cntx_pop();
_bought-=PORTALL.BOUGHT;

params_set('bought_main',_bought_main,'bought',_bought);

_valid:="
   _bought:=params_get().bought;
   _bought_main:=params_get().bought_main;
   {? PORTALL.BOUGHT<0
   || FUN.info('Liczba licencji nie może być ujemna.'@);
      'BOUGHT'
   |? PORTALL.BOUGHT<>0 & PORTALL.BOUGHT+_bought>_bought_main
   || FUN.info(
         'Łączna liczba licencji w podziele na firmy (%1) nie może być większa niż wykupiona (%2).'@
         [$(PORTALL.BOUGHT+_bought),$_bought_main]
      );
      'BOUGHT'
   |? PORTALL.BOUGHT<PORTALL.INSTALED
   || {? FUN.ask('Czy ustawić liczbę licencji mniejszą niż dotychczas zainstalowana?'@)
      || 1
      || 'BOUGHT'
      ?}
   || 1
   ?}
";
{? PORTALL.edit(_valid)
|| PORTALL.put()
?};
~~


\portall_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Usuwanie licencji
::----------------------------------------------------------------------------------------------------------------------
{? PORTALL.BOUGHT=0;1
|| {? FUN.ask('Czy usunąć bieżący zapis?'@)
   || PORTALL.del()
   ?}
|| FUN.info('Usuwać można tylko zapisy z zerową liczbą licencji.'@)
?};
~~


\portall_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Podsumowanie licencji do zapisu nadrzędnego
::   WE: _a - identyfikator licencji
::----------------------------------------------------------------------------------------------------------------------
_licence:=_a;

_instaled:=_used:=_usedg:=0;

PORTALL.cntx_psh();
PORTALL.index('FIRMA');
PORTALL.prefix(0,_licence,);
{? PORTALL.first()
|| {!
   |? _instaled+=PORTALL.INSTALED;
      _used+=PORTALL.USED;
      _usedg+=PORTALL.USEDG;
      PORTALL.next()
   !}
?};
PORTALL.prefix(1,_licence,);
{? PORTALL.first()
|| PORTALL.INSTALED:=_instaled;
   PORTALL.USED:=_used;
   PORTALL.USEDG:=_usedg;
   PORTALL.put()
?};
PORTALL.cntx_pop();
~~


\portall_chk_il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26_04]
:: OPIS: Sprawdza, czy rozpisane ilości licencji zakupionych we wszystkich firmach
::       nie przewyższa ilości zakupionych licencji
::   WY: 1 - OK, 0 - błąd (więcej rozpisano niż zakupiono)
::----------------------------------------------------------------------------------------------------------------------
_result:=1;

_bought_e:=_bought_m:=0;
_lic:=exec('portal_lic','portal_engine');

PORTALL.cntx_psh();
PORTALL.index('FIRMA');
:: Licencje HR Portal Pracownik
PORTALL.prefix(0,exec('license_employee','portal_engine'),);
{? PORTALL.first()
|| {!
   |? _bought_e+=PORTALL.BOUGHT;
      PORTALL.next()
   !}
?};
:: Licencje HR Portal Menadżer
PORTALL.prefix(0,exec('license_manager','portal_engine'),);
{? PORTALL.first()
|| {!
   |? _bought_m+=PORTALL.BOUGHT;
      PORTALL.next()
   !}
?};
PORTALL.cntx_pop();

{? (_bought_e>_lic.PRAC) | (_bought_m>_lic.KIER)
|| _result:=0
?};

_result


\portall_info_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Tabela tymczasowa, w której trzymane są informacje o licencjach
::   WY: tab_tmp
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(
:: Zakupione ogółem (licencjonowane)
   ,'L2PRAC','INTEGER','Pracownik'@
   ,'L2KIER','INTEGER','Kierownik'@
   ,'L2SEOD','INTEGER','Obiegi'@
:: Nie rozpisane
   ,'R2PRAC','INTEGER','Pracownik'@
   ,'R2KIER','INTEGER','Kierownik'@
   ,'R2SEOD','INTEGER','Obiegi'@
:: Zakupione
   ,'B2PRAC','INTEGER','Pracownik'@
   ,'B2KIER','INTEGER','Kierownik'@
   ,'B2SEOD','INTEGER','Obiegi'@
:: Zainstalowane
   ,'I2PRAC','INTEGER','Pracownik'@
   ,'I2KIER','INTEGER','Kierownik'@
   ,'I2SEOD','INTEGER','Obiegi'@
:: Wykorzystane
   ,'U2PRAC','INTEGER','Pracownik'@
   ,'U2KIER','INTEGER','Kierownik'@
   ,'U2SEOD','INTEGER','Obiegi'@
:: Wykorzystane (grupa)
   ,'G2PRAC','INTEGER','Pracownik'@
   ,'G2KIER','INTEGER','Kierownik'@
   ,'G2SEOD','INTEGER','Obiegi'@
);
_tab.blank();
_tab.add();
_tab


\portall_info_load
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Ładuje dane licencji do umówionej struktury danych (tworzonej przez \portall_info_tab)
::   WE: _a - alias do tabeli tymczasowej
::       _b - FIRMA.ref()
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_firma:=_b;

{? _tab.first()
||
   PORTALL.cntx_psh();
   PORTALL.index('MAIN');
   PORTALL.prefix(1,null(),exec('license_employee','portal_engine'),);
   {? PORTALL.first()
   || _tab.L2PRAC:=PORTALL.BOUGHT;
      _tab.R2PRAC:=PORTALL.BOUGHT
   ?};
   PORTALL.prefix(1,null(),exec('license_manager','portal_engine'),);
   {? PORTALL.first()
   || _tab.L2KIER:=PORTALL.BOUGHT;
      _tab.R2KIER:=PORTALL.BOUGHT
   ?};
   PORTALL.prefix(1,null(),exec('license_seod','portal_engine'),);
   {? PORTALL.first()
   || _tab.L2SEOD:=PORTALL.BOUGHT
   ?};
   PORTALL.prefix(0,_firma,exec('license_employee','portal_engine'),);
   {? PORTALL.first()
   || _tab.B2PRAC:=PORTALL.BOUGHT;
      _tab.I2PRAC:=PORTALL.INSTALED;
      _tab.U2PRAC:=PORTALL.USED;
      _tab.G2PRAC:=PORTALL.USEDG
   ?};
   PORTALL.prefix(0,_firma,exec('license_manager','portal_engine'),);
   {? PORTALL.first()
   || _tab.B2KIER:=PORTALL.BOUGHT;
      _tab.I2KIER:=PORTALL.INSTALED;
      _tab.U2KIER:=PORTALL.USED;
      _tab.G2KIER:=PORTALL.USEDG
   ?};
   PORTALL.prefix(0,_firma,exec('license_seod','portal_engine'),);
   {? PORTALL.first()
   || _tab.B2SEOD:=PORTALL.BOUGHT;
      _tab.I2SEOD:=PORTALL.INSTALED;
      _tab.U2SEOD:=PORTALL.USED;
      _tab.G2SEOD:=PORTALL.USEDG
   ?};
   PORTALL.index('FIRMA');
   PORTALL.prefix(0,exec('license_employee','portal_engine'),);
   {? PORTALL.first()
   || {!
      |? _tab.R2PRAC-=PORTALL.BOUGHT;
         PORTALL.next()
      !}
   ?};
   PORTALL.prefix(0,exec('license_manager','portal_engine'),);
   {? PORTALL.first()
   || {!
      |? _tab.R2KIER-=PORTALL.BOUGHT;
         PORTALL.next()
      !}
   ?};
   PORTALL.cntx_pop()
?};
~~


\portall_repair
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Awaryjne naprawienie licencji - do usunięcia w wersji docelowej -> należy sprawdzić wywołania!!!
::----------------------------------------------------------------------------------------------------------------------
_firma:=REF.FIRMA;

PORTALL.cntx_psh();
PORTALL.index('MAIN');
PORTALL.prefix(0,_firma);
{? PORTALL.first()
|| {!
   |? {? PORTALL.BOUGHT>0 & PORTALL.EXPIRES>date(0,0,0)
      || PORTALL.EXPIRES+=1;
         PORTALL.put()
      ?};
      PORTALL.next()
   !}
?};
PORTALL.cntx_pop();

exec('portall_sync','portal_engine');

PORTALL.cntx_psh();
PORTALL.index('MAIN');
PORTALL.prefix(0,_firma);
{? PORTALL.first()
|| {!
   |? {? PORTALL.BOUGHT>0 & PORTALL.EXPIRES>date(0,0,0)
      || PORTALL.EXPIRES-=1;
         PORTALL.put()
      ?};
      PORTALL.next()
   !}
?};
PORTALL.cntx_pop();
~~


\message
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Komunikat informacyjny o użyciu licencji i problemach synchronizacji uprawnień użytkowników
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic','#b_domain','POR')
|| _firma:=REF.FIRMA;

   _bought_e:=_bought_m:=0;
   _instaled_e:=_instaled_m:=0;
   _used_e:=_used_m:=0;

   PORTALL.cntx_psh();
   PORTALL.index('MAIN');
   PORTALL.prefix(0,_firma,exec('license_employee','portal_engine'),);
   {? PORTALL.first()
   || _bought_e+=PORTALL.BOUGHT;
      _instaled_e+=PORTALL.INSTALED;
      _used_e+=PORTALL.USED
   ?};
   PORTALL.prefix(0,_firma,exec('license_manager','portal_engine'),);
   {? PORTALL.first()
   || _bought_m+=PORTALL.BOUGHT;
      _instaled_m+=PORTALL.INSTALED;
      _used_m+=PORTALL.USED
   ?};
   PORTALL.cntx_pop();

   _blk_sync:=0;

   USERSF.cntx_psh();
   USERSF.index('PORTAL');
   USERSF.prefix(_firma,'T');
   {? USERSF.first()
   || {!
      |? {? USERSF.BLK_SYNC='T'
         || _blk_sync+=1
         ?};
         USERSF.next()
      !}
   ?};
   USERSF.cntx_pop();

::_bought_e:=100; _instaled_e:=90; _used_e:=90;
::_bought_m:=100; _instaled_m:=90; _used_m:=90;
::_blk_sync:=2;

:: Próg alarmowy (%)
   _proc:=75;
   _pe:={? _bought_e || 100*_used_e/_bought_e ?};
   _pm:={? _bought_m || 100*_used_m/_bought_m ?};

   {? _bought_e<>_instaled_e | _bought_m<>_instaled_m | _pe>_proc | _pm>_proc | _blk_sync>0
   || _fint:="form(_a,5,0)";

      _fml:='__extmsg';
      _MSG:=exec(,_fml,1);

::    Uwaga teksty, oprócz kodów "sterujących" (~S~, ~R~, ~*~, ...)  zawierają znak '·' (0xB7) interpretowany jako
::    "spacja niełamiąca" (Non Breaking Space).
      _msg:='';
      _ls:=0;
      {? _bought_e<>_instaled_e | _bought_m<>_instaled_m
      || _msg+='~S~'+
            'Liczba licencji zakupionych (wynikająca z pliku merit.alic) i·przydzielonych do·bieżącej firmy '
            'jest różna od·liczby licencji zainstalowanych na portalu.'@+'\n'+
            {? _bought_e<>_instaled_e
            || _ls+=1;
               '~*~'+'Liczba licencji typu "Pracownik":'@+'\n'+
               '~R~'+'- zakupionych: %1'@[_fint(_bought_e)]+'\n'+
               '~R~'+'- zainstalowanych: %1'@[_fint(_instaled_e)]+'\n'
            || ''
            ?}+
            {? _bought_m<>_instaled_m
            || _ls+=1;
               '~*~'+'Liczba licencji typu "Kierownik":'@+'\n'+
               '~R~'+'- zakupionych: %1'@[_fint(_bought_m)]+'\n'+
               '~R~'+'- zainstalowanych: %1'@[_fint(_instaled_m)]+'\n'
            || ''
            ?}
      ?};

      {? _pe>_proc | _pm>_proc
      || _msg+='~S~'+
            'Liczba licencji wykorzystanych przekroczyła próg %1%% licencji zakupionych.'@[$_proc]+'\n'+
            {? _pe>_proc
            || _ls+=1;
               '~*~'+'Liczba licencji typu "Pracownik":'@+'\n'+
               '~R~'+'- zakupionych: %1'@[_fint(_bought_e)]+'\n'
               '~R~'+'- wykorzystanych: %1'@[_fint(_used_e)]+'\n'
            || ''
            ?}+
            {? _pm>_proc
            || _ls+=1;
               '~*~'+'Liczba licencji typu "Kierownik":'@+'\n'+
               '~R~'+'- zakupionych: %1'@[_fint(_bought_m)]+'\n'
               '~R~'+'- wykorzystanych: %1'@[_fint(_used_m)]+'\n'
            || ''
            ?}
      ?};

      {? _blk_sync>0
      || _ls+=1;
         _msg+=
            '~BoxOn~\n'+
            {? _blk_sync=1
            || 'Dla jednego z użytkowników wysyłka uprawnień jest zablokowana'
               ' -·nie·będzie powtarzana (do czasu odblokowania).'@
            || 'Istnieją użytkownicy (%1), dla których wysyłka uprawnień '
               'jest zablokowana -·nie·będzie powtarzana (do czasu odblokowania).'@[$_blk_sync]
            ?}+'\n~BoxOff~\n'
      ?};

      _msg:='~L~'+
         {? _ls=1
         || 'Przeprowadzona analiza stanu licencji Portalu HR wykryła sytuację, '
            'która·wymaga wyjaśnienia / reakcji (szczegóły poniżej).'@
         || 'Przeprowadzona analiza stanu licencji Portalu HR wykryła sytuacje, '
            'które·wymagają wyjaśnienia / reakcji (szczegóły poniżej).'@
         ?}+'\n'+_msg;

      _MSG.exclam(_msg,FUN.TYT)
   ?}
?};
~~


\portall_info_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_14]
:: OPIS: Okno redakcyjne do wyświetlania informacji o wykorzystanych licencjach
::   WE: _a - alias tabeli
::   WY: akronim okna
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

_seod:=exec('lic','#b_domain','SEO');

_red:=_tab.mk_edit('Licencje'@,,'licencjered');
_tab.win_esep(_red,'Zakupione (ogółem)'@);
_tab.win_efld(_red,,'L2PRAC');
_tab.win_efld(_red,,'L2KIER');
{? _seod || _tab.win_efld(_red,,'L2SEOD') ?};
::_tab.win_ecol(_red);
_tab.win_esep(_red,'Do rozpisania'@);
_tab.win_efld(_red,,'R2PRAC');
_tab.win_efld(_red,,'R2KIER');
::{? _seod || _tab.win_efld(_red,,'R2SEOD') ?};
::_tab.win_ecol(_red);
_tab.win_esep(_red,'Zakupione (firma)'@);
_tab.win_efld(_red,,'B2PRAC');
_tab.win_efld(_red,,'B2KIER');
{? _seod || _tab.win_efld(_red,,'B2SEOD') ?};
::_tab.win_ecol(_red);
_tab.win_esep(_red,'Zainstalowane'@);
_tab.win_efld(_red,,'I2PRAC');
_tab.win_efld(_red,,'I2KIER');
{? _seod || _tab.win_efld(_red,,'I2SEOD') ?};
::_tab.win_ecol(_red);
_tab.win_esep(_red,'Wykorzystane'@);
_tab.win_efld(_red,,'U2PRAC');
_tab.win_efld(_red,,'U2KIER');
{? _seod || _tab.win_efld(_red,,'U2SEOD') ?};
::_tab.win_ecol(_red);
::_tab.win_esep(_red,'Wykorzystane (grupa)'@);
::_tab.win_efld(_red,,'G2PRAC');
::_tab.win_efld(_red,,'G2KIER');
::{? _seod || _tab.win_efld(_red,,'G2SEOD') ?};

_red


\blob2txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Zamienia wartość BLOBRAW na odpowiadającą mu zawartość z pliku tekstowego
::       [MP] Kopia \blob2txt/mwapi
::   WE: _a - pole BLOBRAW
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_file:=fopen(_a,'Ur',,,1);
{? _file.is_open()
|| {!
   |? _line:=_file.fread();
      _line<>'\n'
   |! _result+=_line+'\n'
   !};
   fclose(_file)
?};
_result


\data_delete_cntx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IgPtasze [12.51]
:: OPIS: Usuwanie danych z encji poprzedzone ustawieniem kontekstu tabeli SYNC_MWA
::   WE: _a - symbol przeznaczenia danych
::       [_b] - nazwa pliku mwac (domyślnie portal.mwac)
::       _c - nazwa metody API
::       _d - akronim tabeli przeznaczenia danych
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('STATUS','INFO');
_ret.STATUS:='OK';
_ret.INFO:='';

{? var_pres('_a')=type_of('')
|| SYNC_PD.cntx_psh();
   SYNC_PD.index('SYM');
   {? SYNC_PD.find_key(_a,)
   || _sync_pd:=SYNC_PD.ref()
   || _ret.STATUS:='ErrPD';
      _ret.INFO:='Nie odnaleziono przeznaczenia danych %1'@[_a]
   ?};
   SYNC_PD.cntx_pop();
   {? _ret.STATUS<>'OK' || return(_ret) ?}
|| _ret.STATUS:='ErrARG';
   _ret.INFO:='Błędny typ argumentu _a (Symbol przeznaczenia danych). Oczekiwany typ napisowy.'@;
   return(_ret)
?};
{? var_pres('_b')=type_of('')
|| _mwac:=_b
|| _mwac:='portal.mwac'
?};
{? var_pres('_c')=type_of('')
|| _method:=_c
|| _ret.STATUS:='ErrARG';
   _ret.INFO:='Błędny typ argumentu _c (Nazwa metody API). Oczekiwany typ napisowy.'@;
   return(_ret)
?};
{? var_pres(_d)=type_of(P)
|| _tab_acr:=_d
|| _ret.STATUS:='ErrARG';
   _ret.INFO:='Błędny argument _d (Tabela przeznaczenia danych). Oczekiwany napis będący akronimem tabeli.'@;
   return(_ret)
?};

_type:=exec('mwac_type_delete','synchro');
SYNC_MWA.cntx_psh();
SYNC_MWA.index('PD_API');
SYNC_MWA.prefix(_sync_pd,_mwac,_method,_tab_acr,_type,);
{? SYNC_MWA.first()
|| exec('data_delete_before','portal_engine',0)
|| _ret.STATUS:='ErrMWA';
   _ret.INFO:='Nie odnaleziono definicji sychronizacji (SYNC_MWA). Przeznaczenie danych: %1, definicja api: %2, '
   'metoda: %3, tabela: %4, typ obsługi: %5.'@[_a,_mwac,_method,_tab_acr,_type]
?};
SYNC_MWA.cntx_pop();
_ret


\fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Nazwa i plik z formułą do obsługi danej metody
::   WE: _a - nazwa metody
::       _b - sufiks nazwy formuły
::   WY: obj('fml','file')
::----------------------------------------------------------------------------------------------------------------------
_method_name:=_a;
_suffix:=_b;

_fml:=obj_new('name','file');

:: Pełna nazwa (na wszelki wypadek małymi literami).
_method:=-_method_name;

:: Wybór pliku z formułami obsługującymi metody, podmiana nazw formuł dla encji buforowych
{? 7+_method='sl_ext_'
|| _fml.file:='%portal_custom';
   _method:=(7+_method)+(9-_method)
|? 7+_method='chr_ads'
|| _fml.file:='portal_method_chr_ads'
|? 4+_method='chr_'
|| _fml.file:='portal_method_chr'
|? 6+_method='cseod_'
|| _fml.file:='portal_method_seod'
|| _fml.file:='portal_method'
?};

:: Przenazwanie zbyt długich nazw metod API
_method:=exec('renameMethod','portal_core',_method_name);
_fml.name:=_method+'_'+_suffix;

_fml


\Delete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Formuła parametru dla zapytań "Delete" - wariant działający wg id_cloud
::   WY: JSON lub ~~.
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_method:=_env.MethodName;
_id_cloud:=_env.Param;

exec('json_man','__jsonm','
   {
       "Array%1Data": {
           "%1Data":[{"__id_cloud": %2}]
       }
   }
'
[
   _method,
   _id_cloud
]).getJSON()


\Get_data_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Dodaje rekord do tabeli __Data_get, o ile dostępna
::   WE: _a - JMAN
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_tab:=__Data_get;

:: Zapisywane są wyłącznie rekordy ze zgodnym __id_erp z przetwarzaną tabelą SYNC_MWA.TAB_ACR
_id_erp:=_jman.getValue('__id_erp');
{? type_of(_id_erp)=type_of('') & ref_tab(48+_id_erp)=($SYNC_MWA.TAB_ACR)()
|| _tab.IS_DEL:=_jman.getValue('__IsDeleted');
   _tab.ID_CLOUD:=$_jman.getValue('__id_cloud');
   _tab.UIDREF:=48+_id_erp;
   _tab.DESC:=48-_id_erp;
::   _tab.ERP:='X';
   _tab.ERP:=exec('FindAndGet','#table',ref_tab(_tab.UIDREF),_tab.UIDREF,,"'T'",'N');
   _tab.add()
?};

1


\data_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Pobiera z portalu dane dla wybranej encji (wywołanie metody *Get)
:: w kontekście metody *Delete uruchamianej dla obsługi 'Usuwanie'
::----------------------------------------------------------------------------------------------------------------------
_tab_idd:=params_get().tab_idd;

:: Środowisko wywołania
_env:=exec('env','sync_mwa');
params_set('env',_env,'tab_idd',_tab_idd);
_env.LogLevel:=-1;

VAR_DEL.delete('__Data_get');
_tab:=__Data_get:=tab_tmp(1
   ,'IS_DEL','INTEGER','Skasowany?'@
   ,'ID_CLOUD','STRING[30]','Identyfikator Cloud'@
   ,'UIDREF','STRING[48]','Identyfikator rekordu'@
   ,'DESC','STRING[100]','Opis rekordu'@
   ,'ERP','STRING[1]','Jest w ERP'@
);

_pos:=SYNC_MWA.METHOD*'Delete';
_entity:=((_pos-1)+SYNC_MWA.METHOD);
_method:='%1Get'[_entity];
_env.Param:=iso_datetime_value(date(1900,1,1),time(0,0,0));
_env.Loop:=0;
KOMM.init(,,'Pobieranie danych'@);
{!
|? _res:=exec('run','sync_mwa',_method,exec('mwac_type_receive','synchro'));
   SYNC_MWA.get();
   _env.Param:=exec('sync_mwa_result_get','synchro',SYNC_MWA.ref());
   _env.Loop
!};
::KOMM.select();

_wer:=_tab.mk_sel('Rekordy w chmurze [encja: %1]'@[_entity],,,'#inclod',,,,,'U');
_tab.win_fld(_wer,,'IS_DEL');
_tab.win_fld(_wer,,'ID_CLOUD');
_tab.win_fld(_wer,,'UIDREF');
_tab.win_fld(_wer,,'DESC',,,50);
_tab.win_fld(_wer,,'ERP',,,,,,,,,2,,"'T'","'N'","'X'");
::_formula:="
::   _tab:=cur_tab(1,1);
::   _tab.cntx_psh();
::   {? _tab.first()
::   || {!
::      |? _tab.ERP:=exec('FindAndGet','#table',ref_tab(_tab.ID_ERP),_tab.ID_ERP,,\"'T'\",'N');
::         _tab.put();
::         _tab.next()
::      !}
::   ?};
::   _tab.cntx_pop();
::   ~~
::";
::_tab.win_act(_wer,,'Formuła','Sprawdź wszystkie w &ERP'@@,,,_formula,,,,,,'E');
_formula:="
   _tab_idd:=params_get().tab_idd;
   _env:=params_get().env;
   params_set(params_get());
   _tab:=cur_tab(1,1);

   _selected:=(_tab.sel_size()>0);

   {? ~_selected || KOMM.init(,,'Usuwanie'@) ?};

:: Usuwane z chmury tylko zapisy niedostępne w ERP oraz dostępne w chmurze
   {? _tab.ERP='T' & _tab.IS_DEL=1
   || KOMM.info('Zapis %1/%2\njest dostępny w ERP i wykasowany w chmurze.'@[_tab.UIDREF,_tab.DESC],~_selected);
      return()
   |? _tab.IS_DEL=1
   || KOMM.info('Zapis %1/%2\njest wykasowany w chmurze.'@[_tab.UIDREF,_tab.DESC],~_selected);
      return()
   |? _tab.ERP='T'
   || KOMM.info('Zapis %1/%2\njest dostępny w ERP.'@[_tab.UIDREF,_tab.DESC],~_selected);
      return()
   |? _tab.ERP='X'
   || KOMM.info('Zapis %1/%2\nnie został przeanalizowany w ERP.'@[_tab.UIDREF,_tab.DESC],~_selected);
      return()
   ?};

   {? ~_selected & ~FUN.ask('Czy usunąć wskazany zapis z chmury?'@) || return() ?};

   _env.MethodName:=SYNC_MWA.METHOD;
   _env.TabAcr:=SYNC_MWA.TAB_ACR;
   _sync_pd:=SYNC_MWA.SYNC_PD().SYM;
   {? exec('is_mwa_sync_idd','portal_engine')
   || _sync_idd:=SYNC_MWA.SYNC_IDD
   || _tab_idd.prefix(SYNC_MWA.SYNC_PD().SYM,SYNC_MWA.TAB_ACR,SYNC_MWA.METHOD,);
      {? _tab_idd.first()
      || _sync_idd:=_tab_idd.SYNC_IDD
      || _sync_idd:=''
      ?}
   ?};

   _uidref:=_tab.UIDREF;
   _desc:=_tab.DESC;
:: Wywołanie zapytania i parsowanie wyniku
   KOMM.sect_beg(
      'Przetworzono metodę %1 (przeznaczenie danych %2) dla zapisu: %3.'@
      [SYNC_MWA.METHOD,_sync_pd,exec('record','#to_string',_uidref,1)]
   );
   _env.Param:=_tab.ID_CLOUD;
   _res:=exec('run','sync_mwa');
:: W przypadku powodzenia można posprzątać identyfikatory rekordów z chmury w ERP
   {? _sync_idd<>'' & type_of(_res)=type_of(0) & _res>0
   || exec('del_rek','#sync_id',_sync_idd,_uidref,_desc)
   ?};
   KOMM.sect_end();

   {? ~_selected || KOMM.select() ?};
   ~~
";
_formula_bg:="
   {? FUN.ask('Czy usunąć wskazane zapisy z chmury?'@)
   || KOMM.init(,,'Usuwanie'@);
      1
   || 0
   ?}
";
_formula_ag:="
   KOMM.select();
   ~~
";
_tab.win_act(_wer,,'Formuła','Usuń z chmury niedostępne w ERP'@@,,
   'Usuwa z chmury zapisy, które nie są dostępne w ERP'@,
   _formula,,,1,_formula_bg,_formula_ag,'U'
);
_tab.win_act(_wer,,'Kolejność');
_tab.win_sel(_wer);
_tab.select();

VAR_DEL.delete('__Data_get');
~~


\data_get_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Pobiera z portalu dane dla wybranej encji (wywołanie metody *Get) w kontekście metody *Delete - przed grupą
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Akcja grupowa nie jest obsługiwana.'@);
0


\data_get_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Pobiera z portalu dane dla wybranej encji (wywołanie metody *Get) w kontekście metody *Delete - po grupie
::----------------------------------------------------------------------------------------------------------------------
~~


\is_mwa_sync_idd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Sprawdza, czy dostępne jest pole SYNC_MWA.SYNC_IDD
::----------------------------------------------------------------------------------------------------------------------
var_pres('SYNC_IDD',SYNC_MWA)=27


\tab_idd_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Nazwa pliku z definicją identyfikatorów (do użycia w zastępstwie pola SYNC_MWA.SYNC_IDD)
::----------------------------------------------------------------------------------------------------------------------
'mwa_sync_idd.dfg'


\tab_idd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [RR.xx]
:: OPIS: Zwraca tabelę tymczasową z identyfikatorami (do użycia w zastępstwie pola SYNC_MWA.SYNC_IDD)
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(4
   ,'SYNC_PD','STRING[20]','Przeznaczenie danych'@
   ,'TAB_ACR','STRING[8]','Akronim tabeli'@
   ,'METHOD','STRING[50]','Metoda'@
   ,'SYNC_IDD','STRING[30]','Kod identyfikatora'@
);

_tab.import(exec('tab_idd_file','portal_engine'),,1,,,
   ,'SYNC_PD',,1,
   ,'TAB_ACR',,2,
   ,'METHOD',,3,
   ,'SYNC_IDD',,4,
);

::_wer:=_tab.mk_sel(,,1,'tabident',,,,,'U');
::_formula:="
::   cur_tab(1,1).export(exec('tab_idd_file','portal_engine'),1,,,
::      ,'SYNC_PD',,1,
::      ,'TAB_ACR',,2,
::      ,'METHOD',,3,
::      ,'SYNC_IDD',,4,
::   );
::   ~~
::";
::_tab.win_act(_wer,,'Formuła','Eksportuj identyfikatory'@@,,,_formula,,,,,,'E');
::_formula:="
::   cur_tab(1,1).import(exec('tab_idd_file','portal_engine'),,1,,,
::      ,'SYNC_PD',,1,
::      ,'TAB_ACR',,2,
::      ,'METHOD',,3,
::      ,'SYNC_IDD',,4,
::   );
::   ~~
::";
::_tab.win_act(_wer,,'Formuła','Importuj identyfikatory'@@,,,_formula,,,,,,'I');
::_tab.win_act(_wer,,'Usuń',,,,,,,1);
::_tab.win_act(_wer,,'Kolejność');
::_tab.win_sel(_wer);

_tab

:Sign Version 2.0 jowisz:1045 2024/01/19 14:44:31 debc159ddc0beaa12df30f109c4c56b7a3f2ca50640b05fec9886babad6c263ca935103a635f92fdd093090c0a5cf5858412a9fdb79de20738a82be75bda029b020bf971aa8b9140735fc30ca4bc271d4c1da631a9165e1814a18cb7a2874c98aa6754697071379b13b7e9002d1db6f21c365cbdceb9798f7a2d96107b431dc9
