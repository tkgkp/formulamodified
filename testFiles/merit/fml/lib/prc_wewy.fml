:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc_wewy.fml
:: Utworzony: 29.05.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły do obsługi kartoteki rejestracji wejść i wyjść.
::======================================================================================================================


\rejrekpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Formuła rekord przed w tabelach R_REJ_WW i R_SPEC. Kolorowanie błędnych zapisów.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \rejrekpr/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_RejPrev:=_RejCurr:=_RejNext:='';
{? cur_tab(1,1).name()='r_spec'
|| _tab:=R_SPEC
|| return(0)
?};
_tab.cntx_psh();
_RejCurr:=_tab.ST;
{? _tab.prev()
|| _RejPrev:=_tab.ST;
   _tab.next()
?};
{? _tab.next()
|| _RejNext:=_tab.ST
?};
_tab.cntx_pop();

{? {? +_RejPrev || _RejPrev=_RejCurr ?} | {? +_RejNext || _RejCurr=_RejNext ?}
|| Color.fnd_kol('R_REJ_WW#01#01')
?}


\akt_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
::  MOD: MicKoc [22.26]
:: OPIS: Funkcja odpowiedzialna za aktualizację tabeli przepracowanych dni.
::       Przegląda tabelę rejestracji wejść/wyjść w podanym zakresie dat określając wartości czasu pracy, nadmiaru,
::       wyjść służbowych i normalnych.
::       Wartości nadmiaru/niedomiaru oreślane są na podstawie aktualnego wzorca czasu pracy pracownika lub jego
::       kalendarza.
::       Jeśli pracownik nie ma określonego wzorca pracy lub przypisanego kalendarza do tabeli błędnych zapisów
::       dopisywany jest odpowiedni rekord.
::       Uwzględniana jest informacja o rodzaju dnia (godzinowy/widełkowy).
::       UWAGA: Funkcja nie sprawdza poprawności zapisów w tabeli rejestracji.
::   WE: _a - data kwalifikacji (od)
::       _b - data kwalifikacji (do)
::       _c - zapisanie do bazy pomocniczej
::       _d - usuniecie
::       _e - osoba - użytkownik internetowy
::       _f - bez aktualizacji przy zamkniętym miesiącu lub blokadzie
::       _g - dołączanie automatyczne dla przerwy niepłatnej
::   WY:
::  OLD: \akt_prac/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_Data:=VAR_EDIT.DATA;
{? var_pres('_a')<>type_of(date())
|| _a:={? _Data=#0 || date() || _Data ?}
|| {? _a=#0 || return() ?}
?};
{? var_pres('_b')=type_of(date()) || _b:={? _b<_a || _a || _b ?} || _b:=_a ?};
{? var_pres('_c')<>type_of(0) || _c:=0 ?};
{? var_pres('_d')<>type_of(0) || _d:=0 ?};
_e:={? var_pres('_e')=type_of(null()) || _e || null() ?};
_blokada:={? var_pres('_f')=type_of(0) || _f ?};
_p_auto:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_par321:=exec('get_par','#parametr',321,2)='T';
_par322:=exec('get_par','#parametr',322,2)='P';
prev_t:=time(0,0,0);
_tab:={? VAR_EDIT.FLAGA=1 || R_REJ_WW || R_SPEC ?};
_next_tW:=0;
_prev_tW:=time(0,0,0);
_tab.cntx_psh();
R_OPCZYT.cntx_psh();
R_OPCZYT.index('R_OPCZYT');
R_OPCZYT.prefix();
exec('czytaj','#stalesys',_a,KST,'R_WE','R_WY','R_PNOD','R_PNDO');
_zlec:=P.F_ZATR().KOD='Z';
{! _Count:=(#_a)..(#_b)
|! _Data:=#_Count;
   _przelicz:=1;
   {? _blokada
   || _popokr:=exec('prz_okr','prc_rozlicz',_Data);
      {? __HARM.mc_otw(_Data,0,_popokr)
      || _maska:=MASK.MaskZbio(_Data~1,_Data~2);
         {? R_PRACDN.name()<>(MASK.R_PRACDN+_maska)
         || R_PRACDN.use(MASK.R_PRACDN+_maska)
         ?};
         R_PRACDN.prefix(P.ref(),_Data);
         {? R_PRACDN.first()
         || _przelicz:=R_PRACDN.BL<>'T'
         ?}
      || _przelicz:=0
      ?}
   ?};
   {? _przelicz
   ||
::  weryfikacja pracy poprzedniej doby,
::  jeśli jest praca w poprzedniej dobie wykonaj drugi obieg pętli i zaktualizuj poprzedni dzień pracy
      prev_t:=time(0,0,0);
::  weryfikacja pracy nastepnej doby
::  jeśli jest praca w poprzedniej dobie wykonaj dodatkowy obieg pętli i zaktualizuj następny dzień pracy
      _next_t:=_escape:=0;
      _pn:=1;
      {! _prev:=0..3
      |? {? _escape
         || _Data:=#_Count-1;
            _escape:=0;
            _pn:=1
         |? _next_t
         || _Data:=#_Count+1;
            _next_t:=0;
            _pn:=1
         |? _pn
         || _Data:=#_Count;
            _pn:=0
         ?};
:: zapisanie danych w tabeli pomocniczej
         {? _c || exec('wpisz_ts','prc_wewy',_Data,1) ?};
         _maska:=MASK.MaskZbio(_Data~1,_Data~2);
:: ustalenie kalendarza
         _KalOk:=0;
         R_WZCZ.index('R_WZCZ');
         R_WZCZ.prefix(P.name(),P.ref());
         _Kalend:=
            {? R_WZCZ.find_le(_Data)
            || {? R_WZCZ.GRAFIK='T' || R_WZCZ.CZESC || R_WZCZ.KAL ?}
            || P.KAL
            ?};
         {? _Kalend
         || _KalOk:=0;
            KAL_ROK.cntx_psh();
            KAL_ROK.index('KAL_ROK');
            KAL_ROK.prefix(_Kalend);
            {? KAL_ROK.find_key(_Data~1)
            || KAL_DEF.index('KAL_DEF');
               KAL_DEF.prefix(KAL_ROK.ref);
               _KalOk:=KAL_DEF.find_key(_Data)
            ?};
            KAL_ROK.cntx_pop()
         ?};
         _grafik:=R_WZCZ.find_le(_Data) & (R_WZCZ.GRAFIK='T' | R_WZCZ.KIN='T');
         {? _KalOk
         || {? R_PRACDN.name()<>(MASK.R_PRACDN+_maska)
            || R_PRACDN.use(MASK.R_PRACDN+_maska)
            ?};
            __KAL.set_cal(P.KAL,_Data~1);
:: obcięcie ewentualnych przekroczen w warstwie wykonania na podstawie warstwy grafików
:: Weryfikacja paremetru 362
            {? ~_prev
            || _typ_par:=exec('get_par','#parametr',362,2);
               {? _typ_par='A' | _typ_par='R' | _typ_par='W'
               || exec('normalizacja','prc_wewy',_Data,_typ_par,_par321)
               ?}
            ?};

            VAR_DEL.delete('KalWW','KalDat');
            KalWW:=obj_new(2);
            KalDat:=obj_new(2);
            __KAL.get_day(_Data);
            KalWW[1]:=KAL_DEF.POCZATEK;
            KalWW[2]:=KAL_DEF.KONIEC;
            KalDat[1]:=KAL_DEF.DATA;
            KalDat[2]:={? KAL_DEF.DATAW=#0 || KalDat[1] || KAL_DEF.DATAW ?};
            {? _grafik
            || KalNorma:=KAL_DEF.CZAS
            || KalNorma:=*(__KAL.w_hours(_Data,_Data,,1)*60)
            ?};
            Nocka:=Praca:=Nadmiar:=Niedobor:=time(0,0,0);
            WyjPryw:=WyjSloz:=time(0,0,0);
            _RejRef:=0;
            {? VAR_EDIT.FLAGA=1
            || {? R_REJ_WW.name()<>(MASK.R_REJ_WW+_maska)
               || R_REJ_WW.use(MASK.R_REJ_WW+_maska)
               ?};
               R_REJ_WW.prefix(P.ref(),_Data)
            || R_SPEC.prefix(P.ref(),_Data)
            ?};

:: przerwa niepłatna
            {? ~_pn & _p_auto & _par321 & _par322 & _tab.first()
            || {? _tab.CZ='' | (R_OPCZYT.find_key(_tab.CZ,_tab.CZ) & R_OPCZYT.SYMBOL<>'<SYSTEM>')
               || _p_data:=#0;
                  _p_start:=_p_czas:=*0;
                  _p_data:=KAL_DEF.P_DATA;
                  _p_start:=KAL_DEF.P_START;
                  _p_czas:=KAL_DEF.P_CZAS;

                  {? _p_czas<>*0
                  || {? exec('przerwa_niepl','prc_wewy',_p_data,_tab.DZK,_tab.CZ,_p_start,_p_czas) & _c
                     || exec('wpisz_ts','prc_wewy',_Data,1)
                     ?}
                  ?}
               ?}
            ?};

:: następna doba
            {? ~_zlec & ~_prev & _c || _next_tW+=_next_t:=exec('next_dzk','prc_wewy',_tab,_next_t,_Data) ?};
:: poprzednia doba
:: sprawdzenie czy była nieobecność lub poprzedni miesiąc zamknięty dla pierwszego dnia miesiąca
            {? ~_zlec & ~_prev
            || _prev:=(P.DZA>_Data-1 | exec('czy_jest','nieobecnosc',P.ref(),_Data-1));
               {? _prev ||  exec('usu_zm_d','prc_wewy',_Data) ?}
            ?};
            {? ~_zlec & ~_prev & _c || _escape:=exec('prev_dzk','prc_wewy',_tab,_prev,_Data); _prev_tW:=prev_t ?};
            {? ~_escape
            || {? KAL_DEF.RODZAJ='G'
               || _RejRef:=exec('rodz_go','prc_wewy',_tab)
               || _RejRef:=exec('rodz_wi','prc_wewy',_tab)
               ?};
               R_PRACDN.prefix(P.ref(),_Data);
               {? R_PRACDN.first()
               || R_PRACDN.CP:=Praca;
                  R_PRACDN.CN:=Nadmiar;
                  R_PRACDN.NB:=Niedobor;
                  R_PRACDN.WS:=WyjSloz;
                  R_PRACDN.WP:=WyjPryw;
                  {? ~exec('spr_wewy','prc_wewy')
                  || R_PRACDN.ZM:='E'
                  || R_PRACDN.ZM:='A'
                  ?};
                  R_PRACDN.NOC:=Nocka;
::             poprawiamy informację o pracowniku, jeżeli jest przekazana informacja o osobie lub
::             w tym dniu znajdują się ręcznie dodane/poprawione zapisy w rejestrze we/wy
                  {? _e | (sql(''+"select * from prefixed_table(:_a) as PT where PT.ZM='P' or PT.ZM='R'",_tab).size()>0)
                  || R_PRACDN.I_USERS:=_e;
                     R_PRACDN.GRAF:={? _e & R_OPCZYT.find_key(_tab.CZ,) & R_OPCZYT.SYMBOL='<SYSTEM>' || 'T' || 'N' ?}
                  ?};
                  R_PRACDN.PPSF:='N';
                  R_PRACDN.put();
                  exec('wyp_buff_wewy','prc_wewy',P.ref(),_Data);
                  exec('wyp_buff_wewy','prc_wewy',P.ref(),_Data+1)
               || {? _RejRef
                  || R_PRACDN.blank();
                     R_PRACDN.DT:=_Data;
                     R_PRACDN.CP:=Praca;
                     R_PRACDN.CN:=Nadmiar;
                     R_PRACDN.NB:=Niedobor;
                     R_PRACDN.WS:=WyjSloz;
                     R_PRACDN.WP:=WyjPryw;
                     {? ~exec('spr_wewy','prc_wewy')
                     || R_PRACDN.ZM:='E'
                     || R_PRACDN.ZM:='A'
                     ?};
                     R_PRACDN.NOC:=Nocka;
                     R_PRACDN.I_USERS:=_e;
                     R_PRACDN.GRAF:={? _e & R_OPCZYT.find_key(_tab.CZ,) & R_OPCZYT.SYMBOL='<SYSTEM>' || 'T' || 'N' ?};
                     R_PRACDN.PPSF:='N';
                     R_PRACDN.add();
                     exec('wyp_buff_wewy','prc_wewy',P.ref(),_Data);
                     exec('wyp_buff_wewy','prc_wewy',P.ref(),_Data+1)
                  ?}
               ?}
            ?};
            VAR_DEL.delete('KalWW','KalDat','Praca','Nadmiar','Niedobor','WyjSloz','WyjPryw','KalNorma','Nocka')
         || R_ERRKAL.cntx_psh();
            {? R_ERRKAL.name()<>(MASK.R_ERRKAL+_maska) || R_ERRKAL.use(MASK.R_ERRKAL+_maska) ?};
            R_ERRKAL.index('R_ERRKAL');
            R_ERRKAL.prefix();
            R_ERRKAL.blank();
            R_KARHIS.index('PR_ZW_OD');
            R_KARHIS.prefix(P.ref(),'T');
            R_ERRKAL.K:={? R_KARHIS.last() || R_KARHIS.K().N || '' ?};
            {? ~R_ERRKAL.find_rec() || R_ERRKAL.add() ?};
            R_ERRKAL.cntx_pop()
         ?};
         {? _d || exec('usu_ts','prc_wewy',_Data) ?};
         ~_zlec & (_escape | _next_t | _pn)
      !}
   ?}
!};
_tab.cntx_pop();
R_OPCZYT.cntx_pop();
&prev_t;
$(&_prev_tW>*0)+$(&_next_tW)


\ak_tabdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Aktualizuje tabelę dzienną z zadanego zakresu dni dla wszpółracowników .
::       Informacje pobierane są tylko z tabeli wejść/wyjść. Aktualizuje zapisy w tabeli przepracowanych godzin.
::   WE: _a - (0) wyświetlenie okna do wprowadzenia zakresu dat
::       [_b] - tabela współpracowników do aktualizacji
::   WY:
::  OLD: \ak_tabdz/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')=1 || _a || 0 ?};
_tab:={? var_pres('_b')>100 || _TAB:=_b; 1 ?};
_aktualizacja:=
   "  {? VAR_EDIT.FLAGA=2
      || exec('akt_prac','prc_wewy',VAR_EDIT.D_OD,VAR_EDIT.D_DO,1,1)
      || exec('akt_prac','prc_wewy',VAR_EDIT.D_OD,VAR_EDIT.D_DO)
      ?};
      PROGRESS.next()
   ";
VAR_EDIT.win_edit('ZAKR_DAT');

{? {? _a
   || 1
   || VAR_EDIT.efld_opt('ZAKR_DAT','mark=1',,'D_OD');
      VAR_EDIT.efld_opt('ZAKR_DAT','mark=1',,'D_DO');
      VAR_EDIT.edit(
         "  _result:=__CHK.record(VAR_EDIT,,'D_OD','D_DO');
            {? _result='' & VAR_EDIT.D_OD>VAR_EDIT.D_DO
            || FUN.emsg('Wartość w polu \"Data od\" nie może być większa niż w polu \" Data do\".');
               _result:='D_OD'
            ?};
            _result
         "
      )
   ?}
|| P.cntx_psh();
   P.index('PRACOIP');
   P.prefix(exec('ref_firma','ustawienia'));
   {? _tab
   || {? _TAB.first()
      || PROGRESS.set(_TAB.size(),'Trwa aktualizacja tabeli Dziennej.'@);
         {!
         |? {? P.seek(_TAB.REF,,1)
            || _aktualizacja()
            ?};
            _TAB.next()
         !};
         PROGRESS.close()
      ?}
   || {? P.first()
      || PROGRESS.set(P.size(),'Trwa aktualizacja tabeli Dziennej.'@);
         {!
         |? _aktualizacja();
            P.next()
         !};
         PROGRESS.close()
     ?}
   ?};
   P.cntx_pop()
?};
~~


\st_ww_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Formuła wyświetlająca słownik statusów wejścia i wyjścia w polu ST tabeli R_REJ_WW i R_SPEC.
::   WE:
::   WY:
::  OLD: \WYBWW_F3/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_WEWY.cntx_psh();
R_WEWY.win_sel('SLO');
{? R_WEWY.select()
|| R_SPEC.ST:=R_WEWY.ST;
   R_SPEC.TP:=R_WEWY.TP;
   R_SPEC.RD:=R_WEWY.RD
?};
R_WEWY.cntx_pop();
R_SPEC.ST


\st_ww_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Formuła kontrolująca statusywejścia i wyjścia w tabeli R_REJ_WW i R_SPEC.
::   WE:
::   WY:
::  OLD: \RWWSTpor/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
R_WEWY.cntx_psh();
R_WEWY.index('R_STATUS');
_st:=R_SPEC.ST;
{? R_SPEC.CZ=''
|| R_SPEC.CZ:='SYS_4'
?};
{? R_WEWY.find_key(_st)
|| R_SPEC.TP:=R_WEWY.TP;
   R_SPEC.RD:=R_WEWY.RD;
   _result:=1
|| _ask:=FUN.choice('Brak pozycji w słowniku.'@,2,'Powtórzenie'@,'Wyświetlenie &słownika'@);
   {? _ask=1
   || _result:=0
   |? _ask=2
   || _result:=+exec('st_ww_f3','prc_wewy')
   || R_SPEC.TP:='';
      R_SPEC.RD:='';
      R_SPEC.ST:=0;
      _result:=1
   ?}
?};
R_WEWY.cntx_pop();
_result


\data_ww_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Wartość początkowa dla pól DZ i DZK w tabeli R_SPEC i R_REJ_WW
::   WE:
::   WY:
::  OLD: \data_ww/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_EDIT.DATA


\WYBCZYTN
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Formuła wyświetlająca słownik czytników w polu CZ tabeli R_REJ_WW i R_SPEC.
::   WE:
::   WY:
::  OLD: \WYBCZYTN/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_OPCZYT.select()
|| R_SPEC.CZ:=R_OPCZYT.K
?}


\wpisz_ts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Zapisanie danych w tabeli pomocniczej.
::   WE: _a - data początkowa kwalifikacji
::       _b - (-1) usunięcie wiersza z tabeli
::   WY:
::  OLD: \wpisz_ts/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=#0 || return(~~) ?};
{? var_pres('_b')=-1 || _del:=1 || _del:=0 ?};
R_REJ_WW.cntx_psh();
R_SPEC.index('R_SPECK');
R_SPEC.prefix(P.ref(),_a);
_trans:=do_state()>0;
{? ~_trans || do() ?};

{? R_SPEC.first()
|| {! |? R_SPEC.del() !}
?};

{! _ii:=-1..1
|! {? _ii=-1
   || _rok:=_a~1; _mc:=_a~2+1; {? _mc>12 || _rok+=1; _mc:=1 ?};
      _dt:=date(_rok,_mc,1)
   || _dt:=date(_a~1,_a~2-_ii,1)
   ?};
   MASK.Use('R_REJ_WW',_dt~1,_dt~2);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(P.ref(),_a);
   {? R_REJ_WW.first()
   || {!
      |? R_SPEC.blank(1);
         R_SPEC.P:=R_REJ_WW.P;
         R_SPEC.CZ:=R_REJ_WW.CZ;
         R_SPEC.DZ:=R_REJ_WW.DZ;
         R_SPEC.GD:=R_REJ_WW.GD;
         R_SPEC.ST:=R_REJ_WW.ST;
         R_SPEC.TP:=R_REJ_WW.TP;
         R_SPEC.RD:=R_REJ_WW.RD;
         R_SPEC.ZM:=R_REJ_WW.ZM;
         R_SPEC.DZK:=R_REJ_WW.DZK;
         {? ~R_SPEC.add(1)
         || R_SPEC.cntx_psh();
            R_SPEC.index('R_SPECD');
            R_SPEC.prefix(R_REJ_WW.P,R_REJ_WW.DZ,R_REJ_WW.GD,R_REJ_WW.ST);
            {? R_SPEC.first()
            || {! |? R_SPEC.del() !}
            ?};
            R_SPEC.cntx_pop();
            R_SPEC.add(1)
         ?};
         {? _del
         || R_REJ_WW.del()
         || R_REJ_WW.next()
         ?}
      !};
      R_SPEC.first()
   ?}
!};
{? ~_trans || end() ?};
{? exec('is_pzd02','ppsf')
|| R_SPEC.index('LP');
   R_SPEC.prefix(P.ref(),_a);
   {? R_SPEC.first()
   || exec('spr_wewy','prc_wewy',1);
      R_SPEC.first()
   ?}
?};
R_REJ_WW.cntx_pop();
~~


\next_dzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Dodanie rozbicia wejścia wyjścia na pracę w następnej dobie.
::   WE: _a - tabela we/wy
::       _b - wyliczenie jeżeli wartość 0
::       _c - data początkowa kwalifikacji
::   WY:
::  OLD: \next_dzk/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__HARM.POP_DOBA || return(0) ?};
:: Wtyczka do obsługi niestandardowego wyliczenia godzin
{? Plugin.run('PRC_CZP_PKWA_DOBA',_a,_b,_c) || return(0) ?};

_wyjscie:=0;

_ok:=0;
{? _a.last()
|| {! |? {? _a.ST=2 || _a.prev() || _ok:=1; 0 ?} !}
?};
{? _ok
|| _wyj:=_a.GD;
   _czytnik:=_a.CZ;
::  ustalenie czy wyliczamy pracę w następnej dobie
   _next_t:=_next_p:=time(0,0,0);
   {? ~_b & _a.DZK=_a.DZ-1
   || __KAL.get_day(_c);
      _ile:=_c;
      {? __KAL.h_days(_ile,_ile)
      || _next_p:=__HARM.sunday(_ile,P.ref())
      |? __KAL.h_days(_ile+1,_ile+1)
      || _next_p:=__HARM.sunday(_ile+1,P.ref())
      || {!
         |? {? __KAL.h_days(_ile,_ile)
            || _next_p:=__HARM.sunday(_ile,P.ref()); 0
            || {? KAL_DEF.CZAS>*0
               || _next_p:=KAL_DEF.POCZATEK; 0
               || _ile-=1;
                  __KAL.get_day(_ile)
               ?}
            ?}
         !}
      ?};
      {? _next_p<_wyj || _next_t:=_wyj-_next_p ?};
      __KAL.get_day(_c)
   ?};
:: jeśli jest późniejsze wyjście
   {? _next_t>*0
   || _wyjscie:=1;
:: obcina wyjscie do godziny zgodnej z harmonogramem - data kwalifikacji
      R_REJ_WW.cntx_psh();
      MASK.Use('R_REJ_WW',_a.DZ~1,_a.DZ~2);
      {? VAR_EDIT.FLAGA<>1
      || R_REJ_WW.index('R_REJ_WX');
         R_REJ_WW.prefix(P.ref(),_a.DZK,_a.DZ);
         {? R_REJ_WW.find_key(_next_p)
         || R_REJ_WW.del(1);
            {? R_REJ_WW.find_key(_a.GD) || R_REJ_WW.del(1) ?}
         || {? R_REJ_WW.find_key(_a.GD)
            || R_REJ_WW.GD:=_next_p;
               R_REJ_WW.put(1)
            ?}
         ?}
      ?};

      _a.GD:=_next_p;
      _a.put(1);

      exec('usu_zm_d','prc_wewy',_a.DZ);
:: zakłada dwa nowe rekordy z przesunięciem daty kwalifikacji
      R_REJ_WW.clear();
      R_REJ_WW.blank();
      R_REJ_WW.P:=P.ref();
      R_REJ_WW.GD:=_wyj;
      R_REJ_WW.DZ:=_c+1;
      R_REJ_WW.DZK:=_c+1;
      R_REJ_WW.TP:='WYJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_czytnik;
      R_REJ_WW.ZM:='D';
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.add(1);

      R_REJ_WW.blank();
      R_REJ_WW.P:=P.ref();
      R_REJ_WW.GD:=_next_p;
      R_REJ_WW.DZ:=_c+1;
      R_REJ_WW.DZK:=_c+1;
      R_REJ_WW.TP:='WEJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_czytnik;
      R_REJ_WW.ZM:='D';
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.add(1);
      R_REJ_WW.cntx_pop()
   ?}
?};
_wyjscie


\usu_zm_d
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Kasowanie wszystkich specjalnych rekordów ZM=D
::   WE: _a - data
::   WY:
::  OLD: \usu_zm_d/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_REJ_WW.cntx_psh();
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(P.ref(),_a);
{? R_REJ_WW.first()
|| {!
   |? {? R_REJ_WW.ZM='D'
      || R_REJ_WW.del()
      || R_REJ_WW.next
      ?}
   !}
?};
R_REJ_WW.cntx_pop();
~~


\prev_dzk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Dodanie rozbicia wejścia wyjścia na pracę w poprzedniej dobie.
::   WE: _a - [TABLE] Tabela wejść i wyjść.
::       _b - [INTEGER] Wyliczenie tylko dla 0.
::       _c - [DATE] Data.
::   WY:
::  OLD: \prev_dzk/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__HARM.POP_DOBA || return(0) ?};
:: Wtyczka do obsługi niestandardowego wyliczenia godzin
{? Plugin.run('PRC_CZP_PKWA_DOBA',_a,_b,_c) || return(0) ?};

_wyjscie:=0;

:: funkcja podręczna wyszukująca początek doby pracowniczej dla dnia wolnego (KAL_DEF.TYP='W')
_fPrev:="
   _res:=obj_new('poczatek','swieto');
   _res.poczatek:=time(0,0,0);
   _res.swieto:=0;
   _dn_wolny:=0;
   {!
   |? _dn_wolny+=1;
      __KAL.get_day(_a-_dn_wolny) & KAL_DEF.TYP='W'
   !};
   {? __KAL.h_days(_a-_dn_wolny,_a-_dn_wolny)
::    dla swiat pobiera wejscie z obiektu HARM
   || _res.swieto:=1;
      _res.poczatek:=__HARM.sunday(_a,P.ref())
::    poczatek nastepuje po 24 godzinach od poczatku dnia poprzedniego roboczego wg planu
   || _res.poczatek:=KAL_DEF.POCZATEK
   ?};
   _res
";

prev_t:=_plan:=time(0,0,0);
_swieto:=0;
_rcp:=__HARM.RCP(_c,P.ref());
_ok:=0;
{? _a.first()
|| {! |? {? _a.ST=3 || _a.next || _ok:=1; 0 ?} !}
?};
{? _ok
|| _wej:=_a.GD;
   _czytnik:=_a.CZ;
:: ustalenie czy wyliczamy prace w poprzedniej dobie
   prev_t:=_prev_p:=*0;
   _prev_W:=0;
   {? ~_b & _a.DZK=_a.DZ
   || __KAL.get_day(_c);
      _plan:=KAL_DEF.POCZATEK;
      {? _rcp || {? _plan=*0 & KAL_DEF.TYP<>'R' || _rcp:=0 ?} ?};
      _dn_wolny:=0;
      {? __KAL.h_days(_c,_c)
      || _swieto:=1;
         _prev_p:=__HARM.sunday(_c,P.ref())
      |? KAL_DEF.TYP='W'
      || _res:=_fPrev(_c);
         _prev_p:=_res.poczatek;
         _swieto:=_res.swieto
      || __KAL.get_day(_c-1);
         {? __KAL.h_days(_c-1,_c-1)
         || _swieto:=1;
            _prev_p:=__HARM.sunday(_c,P.ref())
         |? KAL_DEF.TYP='W' & _a.DZ=_c-1
         || _prev_W:=1;
            _res:=_fPrev(_c);
            _prev_p:=_res.poczatek;
            _swieto:=_res.swieto
         || _prev_p:=KAL_DEF.POCZATEK
         ?}
      ?};
      {? _prev_p>_wej
      || {? (_rcp | _prev_W) & _plan<_prev_p & ~_swieto || _prev_p:=_plan ?};
         prev_t:=_prev_p-_wej;
         {? _c~2=10
         || _diff:=exec('timeDiff','#datetime',KAL_DEF.DATA,_prev_p,_c,_prev_p,,1);
            prev_t-=_diff;
            _prev_p-=_diff
         ?}
      ?};
      _a.cntx_psh();
      _a.prefix(P.ref(),_c,_c);
      {? _a.find_le(_prev_p) & 2+_a.TP='WY'
      || {? _prev_p>=_a.GD
         || _prev_p:=_a.GD;
            _wyjscie:=1
         ?}
      ?};
      _a.cntx_pop();
      __KAL.get_day(_c)
   ?};
::  jeśli jest wcześniejsze wejście
   {? prev_t>*0
   ||
:: obcina wejście do godziny zgodnej z harmonogramem - data kwalifikacji
      R_REJ_WW.cntx_psh();
      MASK.Use('R_REJ_WW',_a.DZ~1,_a.DZ~2);
      {? VAR_EDIT.FLAGA<>1
      || R_REJ_WW.index('R_REJ_WX');
         R_REJ_WW.prefix(P.ref(),_a.DZK,_a.DZ);
         {? _wyjscie
         || {? R_REJ_WW.first()
            || {! |? R_REJ_WW.del() !}
            ?}
         || {? R_REJ_WW.find_key(_a.GD)
            || {? _a.next() & _a.GD<=_prev_p
               || R_REJ_WW.del()
               || R_REJ_WW.GD:=_prev_p;
                  R_REJ_WW.put(1)
               ?}
            ?}
         ?}
      ?};
      {? _wyjscie
      ||  _a.cntx_psh();
          _a.prefix(P.ref(),_c,_c);
          {! |? _a.del() !};
           _a.cntx_pop()
      || _a.GD:=_prev_p;
         _a.put(1)
      ?};
      exec('usu_zm_d','prc_wewy',_a.DZ);
:: zakłada dwa nowe rekordy z przesunięciem daty kwalifikacji
      R_REJ_WW.clear();
      R_REJ_WW.blank();
      R_REJ_WW.P:=P.ref();
      R_REJ_WW.GD:=_wej;
      R_REJ_WW.DZ:=_c;
      R_REJ_WW.DZK:=_c-1;
      R_REJ_WW.TP:='WEJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_czytnik;
      R_REJ_WW.ZM:='D';
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.add(1);

      R_REJ_WW.blank();
      R_REJ_WW.P:=P.ref();
      R_REJ_WW.GD:=_prev_p;
      R_REJ_WW.DZ:=_c;
      R_REJ_WW.DZK:=_c-1;
      R_REJ_WW.TP:='WYJŚCIE';
      R_REJ_WW.RD:='normalne';
      R_REJ_WW.CZ:=_czytnik;
      R_REJ_WW.ZM:='D';
      R_REJ_WW.ST:=exec('find_st_wewy','prc_wewy',R_REJ_WW.TP,R_REJ_WW.RD);
      R_REJ_WW.add(1);

      R_REJ_WW.cntx_pop()
   ?}
?};
prev_t>*0


\rodz_go
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Ustalenie pozycji Praca i Nadmiar z uwzglednieniem marginesow we/wy
::       (Dzień rozliczany godzinowo - dodatkowe ustalenie marginesu we/wy)
::   WE: _a - akronim tabeli
::   WY:
::  OLD: \rodz_go/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_RejRef:=0;
{? _a.first()
|| {? ~(2+_a.TP='WE' & _a.RD='normalne')
   || return(_a.ref())
   ?};
   _First:=_a.ref();
   _wej:=_Wejscie:=_a.GD;
   _Wyjscie:=time(0,0,0);
   _RejRef:=_a.ref();
   _DataWej:=_a.DZ;
   _diff:=obj_new('dwe','gwe','dwy','gwy','praca','nocka');
   _diff.dwe:=_a.DZ;
   _diff.dwy:=date(0,0,0);
   _diff.gwe:=_a.GD;
   _diff.gwy:=time(0,0,0);
   _diff.praca:=_diff.nocka:=time(0,0,0);
   VAR_DEL.delete('DataWyj','GodzWyj');
   DataWyj:=obj_new(2);
   GodzWyj:=obj_new(2);
   DataWyj[1]:=DataWyj[2]:=date(0,0,0);
   GodzWyj[1]:=GodzWyj[2]:=time(0,0,0);

   _a.cntx_psh();
   _a.last();
   _Last:=_a.ref();
   _a.cntx_pop();
   {!
   |? _r_pnod:=__HARM.pn_time(_a.P,_a.DZ,'OD');
      _r_pndo:=__HARM.pn_time(_a.P,_a.DZ,'DO');
      {? _First<>_a.ref() & _Last<>_a.ref()
      || {? _a.TP='WYJŚCIE'
         || _Wyjscie:=GodzWyj[1]:=_a.GD;
            {? _a.RD='normalne'
            || DataWyj[1]:=_a.DZ
            || DataWyj[2]:=_a.DZ;
               GodzWyj[2]:=_a.GD
            ?};
            _diff.dwy:=_a.DZ;
            _diff.gwy:=_a.GD;
            {? _diff.dwe~2=10 | _diff.dwy~2=10
            || _diff.praca+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_diff.gwy,,1)
            ?}
         ?};
         {? _a.TP='WEJŚCIE'
         || _Wyjscie:=time(0,0,0);
            _wej:=_a.GD;
            {? _a.RD='normalne' & DataWyj[1]<>#0
            || _godz:=exec('UstGodz','prc_wewy',DataWyj[1],_a.DZ,_a.GD);
               WyjPryw+=_godz-GodzWyj[1]
            |? DataWyj[2]<>#0
            || _godz:=exec('UstGodz','prc_wewy',DataWyj[2],_a.DZ,_a.GD);
               WyjSloz+=_godz-GodzWyj[2]
            ?};
            _diff.dwe:=_a.DZ;
            _diff.gwe:=_a.GD
            ?}
      ?};
      {? _Last=_a.ref()
      || _Wyjscie:=_a.GD;
         _diff.dwy:=_a.DZ;
         _diff.gwy:=_a.GD;
         {? _diff.dwe~2=10 | _diff.dwy~2=10
         || _diff.praca+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_diff.gwy,,1)
         ?}
      ?};
      {? _r_pnod<>*0 & _r_pndo<>*0 & _Wyjscie<>*0
      || {? _Wyjscie>_r_pnod
         || {? _wej<_r_pnod
            || Nocka+=_Wyjscie-_r_pnod;
               {? _diff.dwe~2=10 | _diff.dwy~2=10
               || _diff.nocka+=exec('timeDiff','#datetime',_diff.dwe,_r_pnod,_diff.dwy,_diff.gwy,,1)
               ?}
            || Nocka+=_Wyjscie-_wej;
               {? _diff.dwe~2=10 | _diff.dwy~2=10
               || _diff.nocka+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_diff.gwy,,1)
               ?}
            ?}
         ?};
         {? _wej<_r_pndo
         || {? _Wyjscie>_r_pndo
            || Nocka+=_r_pndo-_wej;
               {? _diff.dwe~2=10 | _diff.dwy~2=10
               || _diff.nocka+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_r_pndo,,1)
               ?}
            || Nocka+=_Wyjscie-_wej;
               {? _diff.dwe~2=10 | _diff.dwy~2=10
               || _diff.nocka+=exec('timeDiff','#datetime',_diff.dwe,_diff.gwe,_diff.dwy,_diff.gwy,,1)
               ?}
            ?}
         ?}
      ?};
      _a.next()
   !};
   _godz:=exec('UstGodz','prc_wewy',_DataWej,_a.DZ,_a.GD);
   Praca:=(_godz-_Wejscie)-WyjPryw;
:: Korekta dla zmiany czasu z letniego na zimowy dla miesiąca pazdziernika
   Praca+=_diff.praca;
   Nocka+=_diff.nocka;
   VAR_DEL.delete('DataWyj','GodzWyj')
?};

{? Nocka>Praca || Nocka:=Praca ?};
{? Praca>*0
|| {? KAL_DEF.TYP<>'R'
   || Nadmiar:=Praca;
      Praca:=time(0,0,0)
   || {? KalNorma>Praca
      || Niedobor:=KalNorma-Praca
      || Nadmiar:=Praca-KalNorma;
         Praca:=KalNorma
      ?}
   ?}
?};
_RejRef


\rodz_wi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Ustalenie pozycji Praca i Nadmiar z uwzglednieniem marginesow we/wy
::       (dzień rozliczany widełkowo - dodatkowe ustalenie marginesu we/wy)
::   WE: _a - akronim tabeli
::   WY:
::  OLD: \rodz_wi/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_MargWej:=_MargWyj:=time(0,0,0);
_RejRef:=0;

{? _a.first()
|| {? ~(2+_a.TP='WE' & _a.RD='normalne')
   || return(_a.ref())
   ?};
   VAR_DEL.delete('DataWyj','GodzWyj','DataWej','GodzWej');
   DataWyj:=obj_new(2);
   GodzWyj:=obj_new(2);
   DataWej:=obj_new(2);
   GodzWej:=obj_new(2);
   {! _ii:=1..2
   |! DataWej[_ii]:=DataWyj[_ii]:=date(0,0,0);
      GodzWej[_ii]:=GodzWyj[_ii]:=time(0,0,0)
   !};
   {!
   |? _Godz:=_a.GD;
      _RejRef:=_a.ref();
      _r_pnod:=__HARM.pn_time(_a.P,_a.DZ,'OD');
      _r_pndo:=__HARM.pn_time(_a.P,_a.DZ,'OD');
      {? _a.TP='WYJŚCIE'
      || {? _a.RD='normalne'
         || DataWyj[1]:=_a.DZ;
            GodzWyj[1]:=_a.GD
         || DataWyj[2]:=_a.DZ;
            GodzWyj[2]:=_a.GD
         ?};
         {? DataWej[1]<>#0
         || exec('licz_dn','prc_wewy',DataWej[1],GodzWej[1],_a.DZ,_a.GD,_MargWej,_MargWyj,_r_pnod,_r_pndo)
         ?}
      ?};
      {? _a.TP='WEJŚCIE'
      || DataWej[1]:=_a.DZ;
         GodzWej[1]:=_a.GD;
         {? _a.RD='normalne' & DataWyj[1]<>#0
         || _gd:=exec('UstGodz','prc_wewy',DataWyj[1],_a.DZ,_a.GD);
            WyjPryw+=_gd-GodzWyj[1];
            DataWyj[1]:=date(0,0,0)
         |? DataWyj[2]<>#0
         || _gd:=exec('UstGodz','prc_wewy',DataWyj[2],_a.DZ,_a.GD);
            WyjSloz+=_gd-GodzWyj[2];
            exec('licz_dn','prc_wewy',DataWyj[2],GodzWyj[2],_a.DZ,_a.GD,_MargWej,_MargWyj,_r_pnod,_r_pndo);
            DataWyj[2]:=date(0,0,0)
         ?}
      ?};
      _a.next()
   !};
   VAR_DEL.delete('DataWyj','GodzWyj','DataWej','GodzWej');
   {?  @.KAL_DEF.TYP<>'R'
   || Nadmiar+=Praca;
      Praca:=time(0,0,0);
      Niedobor:=time(0,0,0)
   || {? KalNorma>Praca
      || Niedobor:=KalNorma-Praca
      || Niedobor:=time(0,0,0)
      ?}
   ?}
?};
_RejRef


\licz_dn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Obliczenie liczby godzin do wiersza tabeli R_PRACDN.
::   WE: _a - data wejścia
::       _b - godzina wejścia
::       _c - data wyjścia
::       _d - godzina wyjścia
::       _e - margines wejścia
::       _f - margines wyjścia
::       _g - praca nocna od
::       _h - praca nocna do
::  OLD: \licz_dn/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_Praca:=_Nadmiar:=time(0,0,0);
_gd:=obj_new(6);
_gd[1]:=exec('UstGodz','prc_wewy',KalDat[1],_c,_d);
_gd[2]:=exec('UstGodz','prc_wewy',KalDat[2],_a,_b);
_gd[3]:=exec('UstGodz','prc_wewy',KalDat[2],_c,_d);
_gd[4]:=exec('UstGodz','prc_wewy',_a,KalDat[1],KalWW[1]);
_gd[5]:=exec('UstGodz','prc_wewy',_a,KalDat[2],KalWW[2]);
_gd[6]:=exec('UstGodz','prc_wewy',KalDat[1],_a,_b);
_r_pnod:=_g;
_r_pndo:=_h;

{? (_a<=KalDat[1] & _c<=KalDat[1] & _gd[1]<=KalWW[1]) | (_a>=KalDat[2] & _c>=KalDat[2] & _gd[2]>=KalWW[2])
||
:: 1. rejestracja poza normą
   _godz:=exec('UstGodz','prc_wewy',_a,_c,_d);
   _Nadmiar+=_godz-_b
|? (_a<=KalDat[1] & _c>=KalDat[1] & _gd[1]>=KalWW[1] & _b<=_gd[4]) & (_a<=KalDat[2] & _c>=KalDat[2] & _gd[3]>=KalWW[2])
||
:: 2. cała rejestracja obejmuje normę i dodatkowo występuje nadmiar przed wejściem i po wyjściu
   {? _gd[4]-_e>_b
   || _Nadmiar+=_gd[4]-_b
   ?};
   {? KalWW[2]+_f<_gd[3]
   || _Nadmiar+=_gd[3]-KalWW[2]
   ?};
   _Praca+=@.KAL_DEF.CZAS
|? _a<=KalDat[1] & _c>=KalDat[1] & _gd[1]>KalWW[1] & _b<_gd[4]
||
:: 3. wejście przed normą, wyjście w normie
   {? _gd[4]-_e>_b
   || _Nadmiar+=_gd[4]-_b
   ?};
   _Praca+=_gd[1]-KalWW[1]
|? _a<=KalDat[2] & _c>=KalDat[2] & _b<_gd[5] & _gd[3]>KalWW[2]
||
:: 4. wejście w normie, wyjście poza normą
   {? KalWW[2]+_f<_gd[3]
   ||  _Nadmiar+=_gd[3]-KalWW[2]
   ?};
   _Praca+=_gd[5]-_b
|? _a>=KalDat[1] & _c>=KalDat[1] & _gd[1]>=KalWW[1] & _gd[6]>=KalWW[1] & _gd[3]<=KalWW[2]
||
:: 5. cała rejestracja mieści się w normie
   _godz:=exec('UstGodz','prc_wewy',_a,_c,_d);
   _Praca+=_godz-_b
?};

:: Korekta dla zmiany czasu z letniego na zimowy dla miesiąca października
{? _a~2=10 | _c~2=10
|| _diff:=exec('timeDiff','#datetime',_a,_b,_c,_d,,1);
   Nocka+=_diff; _Nadmiar+=_diff
?};
{? _r_pnod<>*0 & _r_pndo<>*0
|| {? _d>_r_pnod
   || {? _b<_r_pnod
      || Nocka+=_d-_r_pnod
      || Nocka+=_d-_b
      ?}
   ?};
   {? _b<_r_pndo
   || {? _d>_r_pndo
      || Nocka+=_r_pndo-_b
      || Nocka+=_d-_b
      ?}
   ?}
?};
Praca+=_Praca;
Nadmiar+=_Nadmiar;
obj_del(_gd);
~~


\usu_ts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
:: OPIS: Usunięcie z tabeli pomocniczej.
::   WE: _a - data początkowa kwalifikacji
::   WY:
::  OLD: \usu_ts/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_SPEC.index('R_SPECK');
R_SPEC.prefix(P.ref(),_a);
{? R_SPEC.first()
|| {! |? R_SPEC.del() !}
?};
~~


\R_PRACDN_a_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyzwalacz po dodaniu rekordu w tabeli R_PRACDN.
::   WE:
::   WY:
::  OLD: \R_PRACDN_a_add/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=R_PRACDN.DT;
_rok:=_data~1;
_msc:=_data~2;
:: aktualizacja zatwierdzonych wykonań w KAL_BUFFie
exec('wyp_buff_wewy','prc_wewy',P.ref(),_data);
exec('wyp_buff_wewy','prc_wewy',P.ref(),_data+1);

:: aktualizacja widoku miesięcznego
R_SZYCH.index('R_TECH');
R_SZYCH.prefix(_rok,_msc);
{? ~R_SZYCH.first() || return(~~) ?};
R_SZYCH.index('R_SZPR');
R_SZYCH.prefix(P.ref(),_rok,_msc);
{? R_SZYCH.first()
|| _add:=0
|| _add:=1;
   R_SZYCH.blank()
?};
_ktory:=_data$1+2;
_kod:=$((R_PRACDN.CP+R_PRACDN.CN)~1);
_x:='R_SZYCH.DZ'+_ktory;
($(_x))():=_kod;

{? _kod<>''
|| _x:='R_SZYCH.INF'+_ktory;
   _praca:=(*(R_PRACDN.CP+R_PRACDN.CN)/60)$2;
   _plan:=__KAL.w_hours(R_PRACDN.DT,R_PRACDN.DT);
   {? _praca=_plan || _info:='='
   |? _praca>_plan || _info:='+'
   |? _praca<_plan || _info:='-'
   || _info:='*'
   ?};
   exec('info','prc_view',_data~3,1,_info);
   {? R_PRACDN.NOC<>*0
   ||  _info:='N'
   ||  _info:='*'
   ?};
   exec('info','prc_view',_data~3,2,_info)
?};

{? _add
|| R_SZYCH.P:=P.ref();
   R_SZYCH.OSOBA:=P.OSOBA;
   R_SZYCH.ROK:=_rok;
   R_SZYCH.MC:=_msc;
   R_SZYCH.add()
|| R_SZYCH.put()
?};
~~


\R_PRACDN_a_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyzwalacz po usunięciu rekordu w tabeli R_PRACN.
::   WE:
::   WY:
::  OLD: \R_PRACDN_a_del/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=bfld('DT');
_rok:=_data~1;
_msc:=_data~2;
:: aktualizacja zatwierdzonych wykonań w KAL_BUFFie
exec('wyp_buff_wewy','prc_wewy',P.ref(),_data);
exec('wyp_buff_wewy','prc_wewy',P.ref(),_data+1);

:: aktualizacja widoku miesięcznego
R_SZYCH.index('R_TECH');
R_SZYCH.prefix(_rok,_msc);
{? ~R_SZYCH.first() || return(~~) ?};
R_SZYCH.index('R_SZPR');
R_SZYCH.prefix(P.ref(),_rok,_msc);
{? R_SZYCH.first()
|| _ktory:=_data$1+2;
   _x:='R_SZYCH.DZ'+_ktory;
   ($(_x))():='';
   exec('info','prc_view',_data~3,1,'*');
   R_SZYCH.put()
?};
~~


\R_PRACDN_a_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyzwalacz po poprawieniu rekordu w tabeli R_PRACDN.
::   WE:
::   WY:
::  OLD: \R_PRACDN_a_put/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
exec('R_PRACDN_a_del','prc_wewy');
exec('R_PRACDN_a_add','prc_wewy');
~~


\get_wewy_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy tabelę tymczasową zawierającą inforacje o wejściach/wyjściach.
::   WE:
::   WY: alias tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
   'P','INTEGER','Ref',
   'DWE','DATE','DWE',
   'ZMD','INTEGER','ZMD',
   'GWE','TIME','GWE',
   'DWY','DATE','DWY',
   'GWY','TIME','GWY',
   'TYP','STRING[20]','Pochodzenie danych',
   'PORTAL','STRING[1]','Możliwa edycja na portalu',
   'PD','DATE','Data przerwy',
   'PS','TIME','Godzina rozp. przerwy',
   'PC','TIME','Czas trwania przerwy'
)


\nieznany_czytnik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Napis 'Nieznany czytnik'
::----------------------------------------------------------------------------------------------------------------------
'Nieznany czytnik'


\get_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
::  MOD: MicKoc [22.26]
:: OPIS: Pobranie we-wy z rejestru w postaci tabeli.
::   WE: _a [DATE] - konkretny dzień
::       _b [REFERENCE] - wskazanie współpracownika
::       _c [TABLE] - alias tabeli tymczasowej do wypełnienia
::       _d [STRING] - alternatywna maska zbioru R_REJ_WW (np. 'r_hw')
::   WY: tabela w ostaci tabeli tymczasowej z polami:
::       [P] P.ref
::       [DWE] DATA_WEJ
::       [GWE] GODZ_WEJ
::       [DWY] DATA_WYJ
::       [GWY] GODZ_WYJ
::       [TYP] CZYTNIK
::       [PD] P_DATA
::       [PS] P_START
::       [PC] P_CZAS
::  OLD: \get_wewy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_use_ww:=
   {? var_pres('_d')<>type_of('')
   || "MASK.Use('R_REJ_WW',_a,_b)"
   || $('R_REJ_WW.use(\'%1\'+(\'00\'+($_a)+2)+(\'00\'+($_b)+2))'[_d])
   ?};
_przerwy:=exec('isEnabled','prc_przerwy');
R_OPCZYT.cntx_psh();
R_REJ_WW.cntx_psh();
_use_ww(_a~1,_a~2);
R_OPCZYT.index('R_OPCZYT');
R_OPCZYT.prefix();
R_REJ_WW.index('R_REJ_WX');
R_REJ_WW.prefix(_b,_a);
:: sprawdzenie czy nie została zarejestrowana cała praca w następnej dobie dla ostatniego dnia miesiąca
{? ~R_REJ_WW.first() & (date(_a~1,_a~2,0)=_a)
|| _date:=_a+1;
   _use_ww(_date~1,_date~2);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(_b,_a)
?};

_tab:=
   {? var_pres('_c')<>type_of(SYSLOG)
   || exec('get_wewy_buf','prc_wewy')
   || _c
   ?};

_ok:=0;
_godzWY:=time(0,0,0);
:: wyszukanie pierwszego zapisu różnego od 'D'
_jestREJ:=0;
{? R_REJ_WW.first()
|| _dalej:=1;
   {!
   |? {? R_REJ_WW.ZM<>'D'
      || _dalej:=0;
         _jestREJ:=1
      ?};
      _dalej & R_REJ_WW.next()
   !}
?};
:: sprawdzamy zapisy na datę kwalifikacji
{? _jestREJ
|| {? R_REJ_WW.ZM<>'S' & R_REJ_WW.ST=2
   || _tab.blank(1);
      _tab.P:=#_b;
      _tab.DWE:=R_REJ_WW.DZ;
      _tab.GWE:=R_REJ_WW.GD;
      _godzWY:=R_REJ_WW.GD;
      {? R_OPCZYT.find_key(R_REJ_WW.CZ,R_REJ_WW.CZ)
      || _tab.TYP:=R_OPCZYT.O;
         _tab.PORTAL:=R_OPCZYT.PORTAL
      || _tab.TYP:=exec('nieznany_czytnik','prc_wewy')
      ?};
      _ok:=1
   ?};

   R_REJ_WW.index('R_REJ_WW');
   R_REJ_WW.prefix(_b,_a);
   {? R_REJ_WW.first()
   || _dalej:=1;
      {!
      |? {? R_REJ_WW.ZM='D' & R_REJ_WW.ST=2 & R_REJ_WW.DZ<>R_REJ_WW.DZK
         || _tab.GWE:=R_REJ_WW.GD;
            _tab.ZMD:=1;
            _dalej:=0
         ?};
         _dalej & R_REJ_WW.next()
      !}
   ?};

   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(_b,_a);
   _wyjscie:=
      "  {? R_REJ_WW.ZM<>'S' & R_REJ_WW.ZM<>'N'  & R_REJ_WW.ST=3
         || _a.DWY:=R_REJ_WW.DZ;
            _a.GWY:=R_REJ_WW.GD;
            {? (_a.TYP='' | _a.TYP=exec('nieznany_czytnik','prc_wewy')) & R_OPCZYT.find_key(R_REJ_WW.CZ,R_REJ_WW.CZ)
            || _a.TYP:=R_OPCZYT.O;
               _a.PORTAL:=R_OPCZYT.PORTAL
            ?};
            {? R_REJ_WW.ZM='D' || 2 || 1 ?}
         ?}
      ";

   {? _ok & R_REJ_WW.last()
   || {? R_REJ_WW.ZM='S'
      || _godzWY:=R_REJ_WW.GD
      ?};
      {! |? _ok:=_wyjscie(_tab); (_ok=0 | _ok=2) & R_REJ_WW.prev() !};
      {? _ok=0 | _ok=2
      ||
:: sprawdzenie wyjścia w następnym miesiącu (inna maska)
         {? (_a+1)~2<>_a~2
         || _use_ww((_a+1)~1,(_a+1)~2);
            R_REJ_WW.index('R_REJ_WX');
            R_REJ_WW.prefix(_b,_a);
            {? R_REJ_WW.last || {! |? _ok:=_wyjscie(_tab); (_ok=0 | _ok=2) & R_REJ_WW.prev() !} ?}
         ?};
:: przypadek szczególny - niedziela/dzień świąteczny rozpoczynający się o 00:00, tutaj praca na przełomie dni rozbijana
:: jest na osobne zapisy przy czym w dniu niedzielnym zapisy rozpoczynają się od 'D' 00:00
         _date:=_a+1;
         _use_ww(_date~1,_date~2);
         R_REJ_WW.index('R_REJ_WW');
         R_REJ_WW.prefix(_b,_date);
         {? _ok=0 & R_REJ_WW.first()
            &
            (R_REJ_WW.ZM='D') & (R_REJ_WW.DZ=R_REJ_WW.DZK) & (R_REJ_WW.GD=*0) & (_godzWY=time(24,0,0))
         || {!
            |? _ok:=_wyjscie(_tab);
               ~_ok & R_REJ_WW.next()
            !}
         ?}
      ?}
   ?};
:: sprawdzenie zakwalifikowanej pracy w dobie następnej tylko ze statusem D i w ciągłości
   {? _ok
   || _date:=_a+1;
      _ciag:=0;
      _use_ww(_date~1,_date~2);
      R_REJ_WW.index('R_REJ_WX');
      R_REJ_WW.prefix(_b,_date);
      {? R_REJ_WW.first()
      || {!
         |? {? (R_REJ_WW.ZM='D') & (R_REJ_WW.ST=2) & (R_REJ_WW.DZ=R_REJ_WW.DZK) & (R_REJ_WW.GD=_tab.GWY)
            || _ciag:=1
            ?};
            {? _ciag & (R_REJ_WW.ZM='D') & (R_REJ_WW.ST=3) & (R_REJ_WW.DZ=R_REJ_WW.DZK)
            || _tab.GWY:=R_REJ_WW.GD
            ?};
            R_REJ_WW.next()
         !}
      ?}
   ?};

:: przerwy niepłatne
   {? _przerwy & _ok
   || _use_ww(_a~1,_a~2);
      _add_prz:=" _polnoc:=0; _p_czas:=*0; _p_end:=*0;
                  R_REJ_WW.index('R_REJ_SX');
                  R_REJ_WW.prefix(_b,_a,3,'N');
                  {? R_REJ_WW.first()
                  || _c.PD:=R_REJ_WW.DZ;
                     _c.PS:=R_REJ_WW.GD
                  ?};
                  R_REJ_WW.prefix(_b,_a,2,'N');
                  {? R_REJ_WW.first()
                  || _polnoc:=R_REJ_WW.DZ-_c.PD;
                     _p_end:=R_REJ_WW.GD + *(*time(24,0,0)*_polnoc);
                     _p_czas:=_p_end-_c.PS;
                     _c.PC:=_p_czas
                  ?}";

      _add_prz(_a,_b,_tab);
::    sprawdzenie wyjścia w następnym miesiącu (inna maska)
      {? (_a+1)~2<>_a~2
      || _use_ww((_a+1)~1,(_a+1)~2);
         _add_prz(_a,_b,_tab)
      ?}
   ?};

   {? _ok || _tab.add(1) ?}
|| _use_ww(_a~1,_a~2);
:: jeżeli nie ma zapisów na datę kwalifikacji to sprawdzamy na datę zapisu (datę wejścia) i wyszukujemy ze statusem D
   R_REJ_WW.index('R_REJ_WW');
   R_REJ_WW.prefix(_b,_a);
   _tab.blank(1);
   _tab.P:=#_b;
   {? R_REJ_WW.first()
   || _dalej:=1;
      {!
      |? {? R_REJ_WW.ZM='D' & R_REJ_WW.ST=2 & R_REJ_WW.DZ<>R_REJ_WW.DZK
         || _tab.DWE:=_a;
            _tab.GWE:=R_REJ_WW.GD;
            _tab.ZMD:=1;
            _ok:=1;
            _dalej:=0
         ?};
         _dalej & R_REJ_WW.next()
      !}
   ?};
   {? _ok & R_REJ_WW.next() & R_REJ_WW.ZM='D' & R_REJ_WW.ST=3 & R_REJ_WW.DZ<>R_REJ_WW.DZK
   || _tab.DWY:=R_REJ_WW.DZ;
      _tab.GWY:=R_REJ_WW.GD;
      {? R_OPCZYT.find_key(R_REJ_WW.CZ,R_REJ_WW.CZ)
      || _tab.TYP:=R_OPCZYT.O;
         _tab.PORTAL:=R_OPCZYT.PORTAL
      || _tab.TYP:=exec('nieznany_czytnik','prc_wewy')
      ?};
      _tab.add()
   ?};
:: wykonania z przesuniętym rozpoczęciem na następny dzień, wyszukujemy tylko ze statusem D
   _data:=_a+1;
   _use_ww(_data~1,_data~2);
   R_REJ_WW.index('R_REJ_WW');
   R_REJ_WW.prefix(_b,_data);
   _tab.blank(1);
   _tab.P:=#_b;
   {? R_REJ_WW.first()
   || _dalej:=1;
      {!
      |? {? R_REJ_WW.ZM='D' & R_REJ_WW.ST=2 & R_REJ_WW.DZ=R_REJ_WW.DZK
         || _tab.DWE:=_data;
            _tab.GWE:=R_REJ_WW.GD;
            _ok:=1;
            _dalej:=0
         ?};
         _dalej & R_REJ_WW.next()
      !}
   ?};
   {? _ok & R_REJ_WW.next() & R_REJ_WW.ZM='D' & R_REJ_WW.ST=3 & R_REJ_WW.DZ=R_REJ_WW.DZK
   || _tab.DWY:=R_REJ_WW.DZ;
      _tab.GWY:=R_REJ_WW.GD;
      {? R_OPCZYT.find_key(R_REJ_WW.CZ,R_REJ_WW.CZ)
      || _tab.TYP:=R_OPCZYT.O;
         _tab.PORTAL:=R_OPCZYT.PORTAL
      || _tab.TYP:=exec('nieznany_czytnik','prc_wewy')
      ?};
      _tab.add()
   ?}
?};
R_REJ_WW.cntx_pop();
R_OPCZYT.cntx_pop();
_tab


\get_wewy_przerwy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Pobranie informacji o przerwach w czasie pracy dla zakresu czasowego reprezentowanego
::       na portalu przez kafelek wykonania.
::   WE: _a [REFERENCE] - P.ref
::       _b [DATA]      - początek kafelka - data
::       _c [TIME]      - początek kafelka - godzina
::       _d [DATA]      - koniec kafelka - data
::       _e [TIME]      - koniec kafelka - godzina
::      [_f][INTEGER]   - czy pomijać przerwę niepłatną? (0 / 1 - domyślnie)
::   WY: tabela zgodna ze schematem _TAB2
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(2,
   'TIME','REAL','Time stamp',
   'ST','INTEGER','Status',
   'DATA','DATE','Data',
   'GODZ','TIME','Godzina',
   'RODZ','STRING[1]','Rodzaj zapisu'
   );
_TAB2:=tab_tmp(2,
   'D_OD','DATE','Data od',
   'G_OD','TIME','Godzina od',
   'D_DO','DATE','Data do',
   'G_DO','TIME','Godzina do',
   'CZAS','TIME','Czas przerwy',
   'TYP','STRING[30]','Typ przerwy',
   'ZM','STRING[1]','Czy zmniejsza czas pracy?'
   );

:: parametry wejściowe
  _p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_TAB2) ?};
    _dod:={? var_pres('_b')=type_of(#0)     || _b || return(_TAB2) ?};
    _tod:={? var_pres('_c')=type_of(*0)     || _c || return(_TAB2) ?};
    _ddo:={? var_pres('_d')=type_of(#0)     || _d || return(_TAB2) ?};
    _tdo:={? var_pres('_e')=type_of(*0)     || _e || return(_TAB2) ?};
_skip_np:={? var_pres('_f')=type_of(0)      || _f || 1             ?};

_start:=exec('create','#tm_stamp',_dod,_tod);
  _end:=exec('create','#tm_stamp',_ddo,_tdo);
 _data:=_dod;

_add_det:="
   _TAB:=_a;
   _start:=_b;
   _end:=_c;
   _time:=exec('create','#tm_stamp',R_REJ_WW.DZ,R_REJ_WW.GD);
   _TAB.blank(1);
   _TAB.TIME:=_time;
   _TAB.RODZ:=_d;
   _TAB.ST:=R_REJ_WW.ST;
   {? ~_TAB.find_rec() & _time>=_start & _time<=_end &
      ({? _time=_start || R_REJ_WW.ST=2 || 1 ?}) &
      ({? _time=_end || R_REJ_WW.ST=3 || 1 ?})
   ||
      _TAB.DATA:=R_REJ_WW.DZ;
      _TAB.GODZ:=R_REJ_WW.GD;
      _TAB.add()
   ?}
";

_prevDay:=_data-1;
_nextDay:=_data+1;
_rok:=_data~1;
_msc:=_data~2;

R_REJ_WW.cntx_psh();
:: 1. sprawdzamy poprzedni dzień
{? _data=date(_rok,_msc,1)
:: 1a. dla pierwszego dnia miesiąca sprawdzamy czy nie ma wykonania z ZM='D' w masce z porzedniego miesiąca
|| MASK.Use('R_REJ_WW',_prevDay~1,_prevDay~2);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(_p_ref,_data);
   {? R_REJ_WW.first()
   || {!
      |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
         R_REJ_WW.next()
      !}
   ?}
:: 1b. dla pozostałych dni sprawdzamy poprzedni dzień
|| MASK.Use('R_REJ_WW',_rok,_msc);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(_p_ref,_data);
   {? R_REJ_WW.first()
   || {!
      |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
         R_REJ_WW.next()
      !}
   ?}
?};

:: 2. sprawdzmy bieżący dzień
:: 2a. dla maski z bieżącego miesiąca i dla bieżącego dnia zbieramy wszystkie zapisy bez ZM='S' (data wprowadzenia)
MASK.Use('R_REJ_WW',_rok,_msc);
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(_p_ref,_data);
{? R_REJ_WW.first()
|| {!
   |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
      R_REJ_WW.next()
   !}
?};

:: 2b. dla maski z bieżącego miesiąca i dla bieżącego dnia zbieramy wszystkie zapisy bez ZM='S' (data kwalifikacji)
::     zbieramy maksymalnie do końca doby pracowniczej
MASK.Use('R_REJ_WW',_rok,_msc);
R_REJ_WW.index('R_REJ_WX');
R_REJ_WW.prefix(_p_ref,_data);
{? R_REJ_WW.first()
|| {!
   |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
      R_REJ_WW.next()
   !}
?};

:: 3. sprawdzamy następny dzień
:: 3a. dla ostatniego dnia miesiąca sprawdzamy czy nie ma wykonania w masce z następnego miesiąca
{? date(_rok,_msc,0)=_data
|| MASK.Use('R_REJ_WW',_nextDay~1,_nextDay~2);
   R_REJ_WW.index('R_REJ_WX');
   R_REJ_WW.prefix(_p_ref,_nextDay);
   {? R_REJ_WW.first()
   || {!
      |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
         R_REJ_WW.next()
      !}
   ?}
?};
:: 3b. przypadek szczególny - niedziela/dzień świąteczny rozpoczynający się o 00:00, tutaj praca na przełomie dni
::     rozbijana jest na osobne zapisy przy czym w dniu niedzielnym zapisy rozpoczynają się od 'D' 00:00
MASK.Use('R_REJ_WW',_rok,_msc);
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(_p_ref,_nextDay);
{? R_REJ_WW.first()
|| {!
   |? {? R_REJ_WW.ZM<>'S' || _add_det(_TAB,_start,_end,R_REJ_WW.ZM) ?};
      R_REJ_WW.next()
   !}
?};

:: analiza występowania przerw w pracy
_add_prz:="
   _TAB2:=_a;
   _start:=_b;
   _end:=_c;
   _TAB2.blank(1);
   _TAB2.D_OD:=exec('tm_stamp2date','#tm_stamp',_start);
   _TAB2.G_OD:=exec('tm_stamp2time','#tm_stamp',_start);
   _TAB2.D_DO:=exec('tm_stamp2date','#tm_stamp',_end);
   _TAB2.G_DO:=exec('tm_stamp2time','#tm_stamp',_end);
   _TAB2.CZAS:=exec('tm_stamp2time','#tm_stamp',_end-_start);
   _TAB2.TYP:=_d;
   _TAB2.ZM:=_e;
   _TAB2.add()
";
{? _TAB.first()
|| _we:=_TAB.TIME;
   _wy:=_TAB.TIME;
   _przerwa:=0;
   _last_st:=0;
   {!
   |? {? (_TAB.ST=2 | _TAB.ST=4)
      || _ok:=~_skip_np | (_skip_np & _TAB.RODZ<>'N');
         _przerwa:=_TAB.TIME>_wy & _last_st<>_TAB.ST;
         {? _TAB.TIME>=_we || _we:=_TAB.TIME ?};
         {? _ok & _przerwa
         || _zm:='N';
            _typ:={? _TAB.ST=2
                  || _zm:='T';
                     {? _TAB.RODZ='N' || 'niepłatna przerwa w pracy'@ || 'przerwa w pracy'@ ?}
                  |? _TAB.ST=4
                  || 'wyjście służbowe'@
                  || ''
                  ?};
            _add_prz(_TAB2,_wy,_we,_typ,_zm)
         ?}
      |? (_TAB.ST=3 | _TAB.ST=5)
      || {? _TAB.TIME>=_wy || _wy:=_TAB.TIME ?}
      ?};
      _last_st:=_TAB.ST;
      _TAB.next()
   !}
?};
R_REJ_WW.cntx_pop();
return(_TAB2)


\get_wewy_zp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Pobranie zapisów pierwotnych we-wy z rejestru w postaci tabeli.
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATE]      - data badania
::   WY: tabela tymczasowa
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(3,
   'P','INTEGER','Ref',
   'DZ','DATE','Data',
   'GD','TIME','Godzina zdarzenia',
   'CZ','STRING[5]','Kod czytnika',
   'ST','INTEGER','Status',
   'TP','STRING[7]','Typ',
   'RD','STRING[9]','Rodzaj',
   'DZK','DATE','Data kwalifikacji');

:: parametry wejściowe
_p_ref:={? var_pres('_a')=type_of(null())      || _a || return(_TAB) ?};
 _data:={? var_pres('_b')=type_of(#0) & _b<>#0 || _b || return(_TAB) ?};

R_REJ_WW.cntx_psh();
R_REJ_WW.use('r_hw'+(($(_data~1))+2)+(('0'+$(_data~2))+2));
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(_p_ref,_data);
{? R_REJ_WW.first()
|| {!
   |? _TAB.P:=R_REJ_WW.P;
      _TAB.CZ:=R_REJ_WW.CZ;
      _TAB.DZ:=R_REJ_WW.DZ;
      _TAB.GD:=R_REJ_WW.GD;
      _TAB.ST:=R_REJ_WW.ST;
      _TAB.TP:=R_REJ_WW.TP;
      _TAB.RD:=R_REJ_WW.RD;
      _TAB.DZK:=R_REJ_WW.DZK;
      _TAB.add();
      R_REJ_WW.next()
   !}
?};
R_REJ_WW.cntx_pop();
_TAB


\usun_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
::  MOD: MicKoc [22.26]
:: OPIS: Funkcja usuwa dane z przepracowanych dni, tabeli wejść / wyjść, kwalifikacji, powiązane odbiory godzin
::   WE:  _a - P.ref
::        _b - [INT] - rok
::        _c - [INT] - miesiąc
::        _d - [INT] - 0 lub brak - wszystko
::             1 zapisy w tabeli wejść/wyjść
::             2 zapisy tabeli kwalifikacji i powiaząnych odbiorów
::             3 zapisy w tabeli dziennej
::             4 tylko nierozliczone zapisy tabeli kwalifikacji i powiązanych odbiorów
::             5 tylko test - sprawdzamy czy możemy usunąć kwalifikację w tym dniu
::             6 zapisy z tabeli R_SPEC
::        [_e] - [DATE] - konkretny dzień
::        [_f] - [INT] - kasowanie wejść wyjść zapisów pierwotnych [0*/1]
::        [_g] - [INT] - dla czytnika: SYS* - tylko jeśli _e=1
::        [_h] - [INT] - kasowanie wejść wyjść zapisów Portal HR (Start / Stop) [0*/1]
::  OLD: \usun_wewy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_d:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_dzien:={? var_pres('_e')=type_of(date()) || _e~3 || 0 ?};
_hist:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_czytnik:={? var_pres('_g')=type_of(0) || _g || 0 ?};
_del_ss:={? var_pres('_h')=type_of(0) || _h || 0 ?};
_can_del:=0;
{? _czytnik
|| _if_czyt:="3+R_REJ_WW.CZ='SYS'"
|| _if_czyt:="1"
?};
MASK.Init();
_typ_d:=0;
typ_k:=0;
:: tabela WE/WY
:: zapisy pierwotne
{? _hist
|| _Mask:='r_hw'+(($_b)+2)+(('0'+$_c)+2);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first()
   || {! |? R_REJ_WW.del() !}
   ?};

   _Mask:='r_hw'+((${? _c=12 || _b+1 || _b ?})+2)+(('0'+${? _c=12 || 1 || _c+1 ?})+2);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first()
   || {! |? R_REJ_WW.del() !}
   ?}
?};

:: zapisy z Portalu HR (Start / Stop)
{? _del_ss
|| R_POR_WW.cntx_psh();
   _year:=($(_b))+2;
   _month:={? _c>=10 || $_c || '0%1'[$_c] ?};
   _mask:='r_ph%1%2'[_year,_month];
   {? R_POR_WW.name()<>_mask
   || R_POR_WW.use(_mask)
   ?};
   R_POR_WW.index('DZK');
   {? _dzien || R_POR_WW.prefix(_a,date(_b,_c,_dzien)) || R_POR_WW.prefix(_a) ?};
   {? R_POR_WW.first()
   || {! |? R_POR_WW.del() !}
   ?};
   R_POR_WW.cntx_pop()
?};

:: zapisy po kwalifikacji
{? _d=0 | _d=1
|| R_REJ_WW.use('r_hw'+MASK.MaskZbio(_b,_c));
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first
   || {!
      |? {? 3+R_REJ_WW.CZ='SYS'
         || R_REJ_WW.del(,1)=2
         || R_REJ_WW.next()
         ?}
      !}
   ?};

   R_REJ_WW.use('r_hw'+MASK.MaskZbio({? _c=12 || _b+1 || _b ?},{? _c=12 || 1 || _c+1 ?}));
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first
   || {!
      |? {? 3+R_REJ_WW.CZ='SYS'
         || R_REJ_WW.del(,1)=2
         || R_REJ_WW.next()
         ?}
      !}
   ?};

   _Mask:=MASK.Name('R_REJ_WW',_b,_c);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first()
   || {? _dzien
      || {!
         |? {? R_REJ_WW.ZM<>'D'
            || {? _if_czyt()
               || R_REJ_WW.del(,1)=2
               || R_REJ_WW.next()
               ?}
            || typ_k:=1;
               R_REJ_WW.next()
            ?}
         !}
      || {! |? R_REJ_WW.del() !}
      ?}
   ?};

   _Mask:=MASK.Name('R_REJ_WW',{? _c=12 || _b+1 || _b ?},{? _c=12 || 1 || _c+1 ?});
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WX');
   {? _dzien || R_REJ_WW.prefix(_a,date(_b,_c,_dzien)) || R_REJ_WW.prefix(_a) ?};
   {? R_REJ_WW.first()
   || {? _dzien
      || {!
         |? {? R_REJ_WW.ZM<>'D'
            || {? _if_czyt()
               || R_REJ_WW.del(,1)=2
               || R_REJ_WW.next()
               ?}
            || typ_k:=1;
               R_REJ_WW.next()
            ?}
         !}
      || {! |? R_REJ_WW.del() !}
      ?}
   ?};
:  kasowania dnia specjalnego ze zmiana typu D
   _Mask:=MASK.Name('R_REJ_WW',_b,_c);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WW');

   {? _dzien
   || R_REJ_WW.prefix(_a,date(_b,_c,_dzien));
      {? R_REJ_WW.first()
      || {!
         |? {? R_REJ_WW.ZM='D' & R_REJ_WW.DZK<>R_REJ_WW.DZ
            || _typ_d:=1;
               {? _if_czyt()
               || R_REJ_WW.del(,1)=2
               || R_REJ_WW.next()
               ?}
            || R_REJ_WW.next()
            ?}
         !}
      ?}
   ?};

   _data:=date(_b,_c,_dzien)+1;
   _Mask:=MASK.Name('R_REJ_WW',_data~1,_data~2);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask);
      R_REJ_WW.index('R_REJ_WX');
      {? _dzien
      || R_REJ_WW.prefix(_a,date(_b,_c,_dzien));
         {? R_REJ_WW.first()
         || {!
            |? {? R_REJ_WW.ZM<>'D'
               || {? _if_czyt()
                  || R_REJ_WW.del(,1)=2
                  || R_REJ_WW.next()
                  ?}
               || R_REJ_WW.next()
               ?}
            !}
         ?}
      ?}
   ?};

   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask)
   ?};
   R_REJ_WW.index('R_REJ_WX');

   {? _data<>#0
   || R_REJ_WW.prefix(_a,_data);
      {? R_REJ_WW.first()
      || {!
         |? {? R_REJ_WW.ZM='D' & R_REJ_WW.DZK=R_REJ_WW.DZ
            || typ_n:=1;
               {? _if_czyt()
               || R_REJ_WW.del(,1)=2
               || R_REJ_WW.next()
               ?}
            || R_REJ_WW.next()
            ?}
         !}
      ?}
   ?};

   {? _dzien
   || exec('usun_r_spec','prc_wewy',_a,date(_b,_c,_dzien),date(_b,_c,_dzien))
   || exec('usun_r_spec','prc_wewy',_a,date(_b,_c,1),date(_b,_c,0))
   ?}
?};

:: sprawdz czy istnieje blokada na zarejestrowanym wykonaniu
_blokada:=exec('isBlokada','prc_rozlicz',_a,date(_b,_c,_dzien))>0;

:: tabela kwalifikacji oraz powiazane odbiory godzin
{? (~_blokada) & (_d=0 | _d=2 | _d=4 | _d=5)
|| MASK.Use('R_KWGODZ',_b,_c);
   R_KWGODZ.index('DATA_RUB');
   R_WYK.index('R_WYKDN');
   {? _dzien || R_KWGODZ.prefix(_a,date(_b,_c,_dzien)) || R_KWGODZ.prefix(_a) ?};
   {? R_KWGODZ.first()
   || _mc_otw:=__HARM.mc_otw(date(_b,_c,_dzien),0);
      {!
      |? {? (_d<>4 & _mc_otw) | R_KWGODZ.MR=#0
         || R_WYK.prefix(P.ref(),R_KWGODZ.DZ);
            {? _d=5
:: tyko test czy tu weszliśmy
            || _can_del:=1;
               R_KWGODZ.next()
            || {? R_WYK.first() || {! |? R_WYK.del() !} ?};
               R_KWGODZ.del()
            ?}
         || R_KWGODZ.next()
         ?}
      !}
   ?}
?};

:: tabela R_SPEC.CZ - specyfikacja wejść/wyjść, stale-tymczasowa tabela
{? _d=5 | _d=0
|| R_SPEC.index('R_SPECD');
   {? _dzien || R_SPEC.prefix(_a,date(_b,_c,_dzien)) || R_SPEC.prefix(_a) ?};
   {? R_SPEC.first() || {! |? R_SPEC.del() !} ?}
?};

:: tabela przepracowanych dni
{? _d=0 | _d=3
|| {? _c=3 | _c=4
   || _wig_d:=exec('wielkan','kalendarz',_b)-1
   |? _c=12
   || _wig_d:=date(_b,12,24)
   || _wig_d:=#0
   ?};
   _wigilia:=0;
   {? _wig_d<>#0 & exec('get_par','#parametr',320,2)='T' & date(_b,_c,1)>=date(2018,3,1)
   || {? _dzien
      || {? date(_b,_c,_dzien)=_wig_d
         || _wigilia:=1
         ?}
      || {? date(_b,_c,1)=date(_wig_d~1,_wig_d~2,1)
         || _wigilia:=1
         ?}
      ?}
   ?};

:: Najpierw należy usunąć ewentulany zapis w nieobecnościach
   {? _wigilia
   ||
:: Należy wyłączyć trigger dla N
      N.trig_a('del',"",'aktkalbuff')
   ?};

   MASK.Use('R_PRACDN',_b,_c);
   R_PRACDN.index('R_PRACDN');
   {? _dzien || R_PRACDN.prefix(_a,date(_b,_c,_dzien)) || R_PRACDN.prefix(_a) ?};
   {? R_PRACDN.first()
   || {!
      |? {? _wigilia & R_PRACDN.DT=_wig_d
         || exec('usun_wigilie','nieobecnosc',R_PRACDN.DT)
         ?};
         exec('wyp_buff_wewy','prc_wewy',_a,R_PRACDN.DT);
         R_PRACDN.del()
      !}
   ?};
   {? _wigilia
   || N.trig_a('del',"{? _a || exec('kwal','grafik',bfld('P'),bfld('OD'),bfld('DO')) ?};~~",'aktkalbuff')
   ?}
?};
{? _d=5
|| _can_del
|| _typ_d
?}


\save2wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
::  MOD: MicKoc [22.26]
:: OPIS: Wprowadza zapisy do rejestru we-wy
::   WE:  _a [REFERENCE] - ref pracownika, którego zapis dotyczy
::        _b [DATE]      - data wejścia
::        _c [TIME]      - godzina wejścia
::        _d [DATE]      - data wyjścia
::        _e [TIME]      - godzina wyjścia
::        _f [TIME]      - ilosc godzin odbioru
::        _g [STRING]    - F/P/S typ odbioru
::        _h [REFERENCE] - ref OSOBY - USERA internetowego
::        _i [STRING]    - nazwa czytnika
::        _j [DATE]      - data rozpoczęcia przerwy
::        _k [TIME]      - godzina rozpoczęcia przerwy
::        _l [TIME]      - czas trwania przerwy
::        _j [DATE]      - data rozpoczęcia przerwy
::        _k [TIME]      - godzina rozpoczęcia przerwy
::        _l [TIME]      - czas trwania przerwy
::        _m [DATE]      - data kwalifikacji wstępnej
::        _n [INT]       - 1 - bez usuwania danych
::   WY: 0 lub 1
::  OLD: \save2wewy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) || return(0) ?};
{? var_pres('_b')<>type_of(#0) || return(0) ?};
{? var_pres('_c')<>type_of(*0) || return(0) ?};
{? var_pres('_d')<>type_of(#0) || return(0) ?};
{? var_pres('_e')<>type_of(*0) || return(0) ?};
_f:={? var_pres('_f')<>type_of(*0) || time(0,0,0) || _f ?};
_typ:={? var_pres('_g')<>type_of('') || '' || _g ?};
_h:={? var_pres('_h')<>type_of(null()) || null() || _h ?};
_i:={? var_pres('_i')<>type_of('') || 'SYS_1' || _i ?};
 _p_data:={? var_pres('_j')=type_of(date)  || _j || #0        ?};
_p_start:={? var_pres('_k')=type_of(time)  || _k || *0        ?};
 _p_czas:={? var_pres('_l')=type_of(time)  || _l || *0        ?};
_kw_data:={? var_pres('_m')=type_of(date)  || _m || #0        ?};
_bez_usu:={? var_pres('_n')=type_of(0)     || _n              ?};


R_WZCZ.cntx_psh();
P.cntx_psh();
R_WZCZ.index('R_WZCZ');
P.clear();
_p_ref:=null();
{? P.seek(_a)
|| _p_ref:=P.ref()
|| R_WZCZ.cntx_pop();
   P.cntx_pop();
   return(0)
?};

_data_ww:=_b=_d;
VAR_EDIT.DATA:=_b;
VAR_EDIT.ROK:=_b~1;
VAR_EDIT.MSC:=_b~2;
VAR_EDIT.FLAGA:=2;
ZMIENNE.RODZAJ:='S';

MASK.Init();
typ_k:=0;
typ_n:=0;
{? ~_bez_usu
|| {? _typ='X'
   || _typ_d:=exec('usun_wewy','prc_wewy',_p_ref,(_b-1)~1,(_b-1)~2,0,(_b-1))
   || _typ_d:=exec('usun_wewy','prc_wewy',_p_ref,_b~1,_b~2,0,_b)
   ?}
?};
{? typ_n
|| _kon:=exec('kon_okr','grafik',_p_ref,_b);
   {? _kon>_b
   || exec('akt_prac','prc_wewy',_b+1,_b+1,1,1);
      {? ~_bez_usu
      || {? _typ='X'
         || exec('usun_wewy','prc_wewy',_p_ref,_b~1,_b~2,2,_b)
         || exec('usun_wewy','prc_wewy',_p_ref,(_b+1)~1,(_b+1)~2,2,_b+1)
         ?}
      ?}
   ?}
?};
&typ_n;
_zerotime:=time(0,0,0);
{? _c=_zerotime & _e=_zerotime
|| {? _f<>_zerotime
   || MASK.Use('R_PRACDN',_b~1,_b~2);
      R_PRACDN.blank();
      R_PRACDN.DT:=_b;
      R_PRACDN.GRAF:={? _h || 'T' || 'N' ?};
      R_PRACDN.I_USERS:=_h;
      R_PRACDN.ZM:='A';
      R_PRACDN.add(1)
   ?};
   {? typ_k || exec('akt_prac','prc_wewy',_b,_b,1,1) ?};
   {? _typ_d
   || _pocz:=exec('pocz_okr','grafik',_p_ref,_b);
      _day:=_b;
      _prevDay:=_b-1;
      _toDel:=0;
      {? _pocz<_b || _toDel:=2
      |? _pocz=_b || _toDel:=4
      ?};
      {? _toDel=2 | _toDel=4
      || exec('akt_prac','prc_wewy',_prevDay,_prevDay,1,1);
         _odb:=exec('spr_odb','grafik',_p_ref,_prevDay);
         {? ~_odb.jestOdb
         || {? ~_bez_usu
            || exec('usun_wewy','prc_wewy',_p_ref,_prevDay~1,_prevDay~2,_toDel,_prevDay)
            ?}
         ?};
         exec('ponow_kwal_wewy','grafik',_p_ref,_prevDay,_day,_h)
      ?}
   ?};
   VAR_DEL.delete('typ_k');
   R_WZCZ.cntx_pop();
   P.cntx_pop();
   return(1)
?};
&typ_k;

R_WEWY.index('R_TR_MOD');
R_WEWY.prefix();

_Ust_buf:=
   "  R_REJ_WW.DZ:=_a;
      R_REJ_WW.GD:=_b;
      R_REJ_WW.DZK:=_c
   ";
_czyt:="
   _ret:='';
   KAL_BUFF.cntx_psh();
   KAL_BUFF.index('PRACDATA');
   KAL_BUFF.prefix(_a,_b);
   {? KAL_BUFF.first()
   || {!
      |? {? KAL_BUFF.GPW='W'
         || _ret:=form(KAL_BUFF.OPIS)
         ?};
         KAL_BUFF.next()
      !}
   ?};
   KAL_BUFF.cntx_pop();
   _ret
";

_ok:=1;
R_REJ_WW.index('R_REJ_WW');
{! _ind:=0..1
|! R_REJ_WW.blank(1);
   R_REJ_WW.P:=_p_ref;
   R_REJ_WW.ZM:='A';
   _cz:=_czyt(_p_ref,_b);
   R_REJ_WW.CZ:={? _cz<>'' || _cz || _i ?};
   {? R_WEWY.find_key(_ind,0)
   || R_REJ_WW.TP:=R_WEWY.TP;
      R_REJ_WW.ST:=R_WEWY.ST;
      R_REJ_WW.RD:=R_WEWY.RD
   ?};

   _dzk:={? _typ='X' || _b-1 || _b ?};
   {? _ind
   || _Ust_buf(_d,_e,_dzk)
   || _Ust_buf(_b,_c,_dzk)
   ?};
   {? _kw_data<>#0
   || R_REJ_WW.DZK:=_kw_data
   ?};

   _Mask:=MASK.Name('R_REJ_WW',R_REJ_WW.DZ~1,R_REJ_WW.DZ~2);
   {? R_REJ_WW.name()<>(_Mask)
   || R_REJ_WW.use(_Mask);
      R_REJ_WW.index('R_REJ_WW')
   ?};
   R_REJ_WW.prefix(_p_ref);
   _wyn:=R_REJ_WW.add(1);
   {? ~_wyn
   || _ok:=0
   ?};
   {? ~_data_ww & _ok
   || {? _ind
      || R_REJ_WW.GD:=time(0,0,0);
         {? R_WEWY.find_key(0,0)
         || R_REJ_WW.TP:=R_WEWY.TP;
            R_REJ_WW.ST:=R_WEWY.ST;
            R_REJ_WW.RD:=R_WEWY.RD
         ?}
      || R_REJ_WW.GD:=time(24,0,0);
         {? R_WEWY.find_key(1,0)
         || R_REJ_WW.TP:=R_WEWY.TP;
            R_REJ_WW.ST:=R_WEWY.ST;
            R_REJ_WW.RD:=R_WEWY.RD
         ?}
      ?};
      R_REJ_WW.ZM:='S';
      R_REJ_WW.add(1)
   ?}
!};
: dodanie zapisów wyjść prywatnych zapisanych w specjalnej tabeli
{? _ok
|| {? _data_ww
   || exec('wyj_prywatne','prc_wewy',_b,R_REJ_WW.DZK,R_REJ_WW.CZ)
   || exec('wyj_prywatne','prc_wewy',_b,R_REJ_WW.DZK,R_REJ_WW.CZ);
      exec('wyj_prywatne','prc_wewy',_d,R_REJ_WW.DZK,R_REJ_WW.CZ)
   ?}
?};

:: przerwy niepłatne
{? _p_data>#0 & _p_czas>*0
|| exec('przerwa_niepl','prc_wewy',_p_data,R_REJ_WW.DZK,R_REJ_WW.CZ,_p_start,_p_czas)
?};

{? _typ='X'
|| exec('akt_prac','prc_wewy',VAR_EDIT.DATA-1,VAR_EDIT.DATA-1,1,1)
|| exec('akt_prac','prc_wewy',VAR_EDIT.DATA,VAR_EDIT.DATA,1,1)
?};

MASK.Use('R_PRACDN',_b~1,_b~2);
R_PRACDN.index('R_PRACDN');
R_PRACDN.prefix();
{? R_PRACDN.find_key(_p_ref,_b)
|| {? _h
   || R_PRACDN.I_USERS:=_h;
      R_PRACDN.GRAF:='T';
      R_PRACDN.ZM:='A';
      R_PRACDN.put(1)
   ?}
?};
R_WZCZ.cntx_pop();
P.cntx_pop();
_ok


\wyp_buff_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.28]
::  MOD: MicKoc [22.26]
:: OPIS: Wypełnienie KAL_BUF informacjami o WE/WY.
::   WE: _a - P.ref
::       _b - data
::   WY:
::  OLD: \wyp_buff_wewy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')<>type_of(null()) || return(0) || _a ?};
_data:={? var_pres('_b')<>type_of(#0) || return(0) || _b ?};

R_OPCZYT.cntx_psh();
R_OPCZYT.index('R_OPCZYT');
R_OPCZYT.prefix();
KAL_BUFF.cntx_psh();
KAL_BUFF.index('PRZNODT');
KAL_BUFF.prefix(_p_ref,'Z','',_data);
:: zawsze usuwamy zatwierdzony bufor
{? KAL_BUFF.first()
|| KAL_BUFF.del()
?};
:: dodajemy jeśli coś jest w we/wy
_wewy:=exec('get_wewy','prc_wewy',_data,_p_ref);
{? _wewy.first()
|| KAL_BUFF.blank(1);
   _PRZ:=exec('get_wewy_przerwy','prc_wewy',_p_ref,_wewy.DWE,_wewy.GWE,_wewy.DWY,_wewy.GWY);
   KAL_BUFF.STATUS:={? _PRZ.first() || 'P' || '' ?};
   &_PRZ;
   KAL_BUFF.P:=_p_ref;
   KAL_BUFF.GPW:='Z';
   KAL_BUFF.BL:={? _wewy.ZMD || 'T' || 'N' ?};
   {? _wewy.DWE>_data
   || KAL_BUFF.RODZAJ:='X';
      KAL_BUFF.DATA:=_wewy.DWE-1;
      KAL_BUFF.DATAW:=_wewy.DWY-1
   || KAL_BUFF.RODZAJ:='W';
      KAL_BUFF.DATA:=_wewy.DWE;
      KAL_BUFF.DATAW:=_wewy.DWY
   ?};
   KAL_BUFF.POCZATEK:=_wewy.GWE;
   {? _wewy.GWY=time(24,0,0)
   || KAL_BUFF.KONIEC:=time(0,0,0);
      KAL_BUFF.DATAW:=KAL_BUFF.DATAW+1
   || KAL_BUFF.KONIEC:=_wewy.GWY
   ?};
   KAL_BUFF.OPIS:={? R_OPCZYT.find_tab(,'O',,'=',_wewy.TYP) || $R_OPCZYT.ref() || _wewy.TYP ?};
:: przerwy niepłatne
   {? exec('isEnabled','prc_przerwy')
   || KAL_BUFF.P_DATA:=_wewy.PD;
      KAL_BUFF.P_START:=_wewy.PS;
      KAL_BUFF.P_CZAS:=_wewy.PC
   ?};
   _days:=KAL_BUFF.DATAW-KAL_BUFF.DATA;
   KAL_BUFF.CZAS:=*(*time(24,0,0)*_days)-KAL_BUFF.POCZATEK+KAL_BUFF.KONIEC-KAL_BUFF.P_CZAS;
   KAL_BUFF.prefix();
   KAL_BUFF.add()
?};
KAL_BUFF.cntx_pop();
R_OPCZYT.cntx_pop();
~~


\wyj_prywatne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wprowadzenie zapisów przerw / wyjsc prywatnych
::   WE: _a - data wyszukiwanego zapisu przerwy
::       _b - data kwalifikacji
::       _c - czytnik
::   WY: 1 - Pozostaly zapisy we/wy
::       0 - usunieto zapisy we/wy
::  OLD: \wyj_prywatne/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_REJ_WW.cntx_psh();
_wyn:=1;
_podz:=exec('exist','plob_p',P.ref(),'W',_b);
exec('wpisz_ts','prc_wewy',_b,1);
MASK.Use('R_REJ_WW',_a~1,_a~2);
R_WEWY.cntx_psh();
R_WEWY.index('R_TR_MOD');
R_WEWY.prefix();
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(P.ref(),_a);
{? exec('is_pzd02','ppsf')
|| R_SPEC.index('LP')
|| R_SPEC.index('R_SPECK')
?};
R_SPEC.prefix(P.ref(),_b);
R_ODN.index('PRAC');
R_ODN.prefix(P.ref(),_a);
{? R_ODN.first()
|| _form:=
      "  R_REJ_WW.blank(1);
         R_REJ_WW.P:=P.ref();
         R_REJ_WW.GD:=_c;
         R_REJ_WW.DZ:=_a;
         R_REJ_WW.DZK:=_b;
         R_REJ_WW.CZ:=_d;
         R_REJ_WW.ZM:=_f;
         {? R_WEWY.find_key(_e,0)
         || R_REJ_WW.TP:=R_WEWY.TP;
         R_REJ_WW.ST:=R_WEWY.ST;
         R_REJ_WW.RD:=R_WEWY.RD
         ?};
         R_REJ_WW.add(1)
      ";
   {!
   |?
:: pobierz rodzaj przerwy
      _rodzaj:=exec('wyj_prywatne_1','prc_wewy',R_SPEC);
:: zakończenie przerwy pokrywa sie z końcem zapisu we/wy
      {? _rodzaj=2
      || {? R_REJ_WW.find_key(R_ODN.GDO,3)
         || _g_old:=R_REJ_WW.GD; _g_new:=R_ODN.GDO;
            R_REJ_WW.GD:=R_ODN.GOD;
            {? R_REJ_WW.put() & _podz || _wyn:=exec('cut','plob_p',P.ref(),'W',_b,3,_g_old,_g_new) ?}
         ?}
:: początek przerwy pokrywa się z rozpoczęciem zapisu we/wy
      |? _rodzaj=20
      || {? R_REJ_WW.find_key(R_ODN.GOD,2)
         || _g_old:=R_REJ_WW.GD; _g_new:=R_ODN.GDO;
            R_REJ_WW.GD:=R_ODN.GDO;
            {? R_REJ_WW.put() & _podz || _wyn:=exec('cut','plob_p',P.ref(),'W',_b,2,_g_old,_g_new) ?}
         ?}
:: początek przerwy jest większy od zapisu we/wy jednocześnie zakończenie przerwy wykracza poza zapis we/wy
      |? _rodzaj=300
      || {? R_REJ_WW.find_ge(R_ODN.GOD,3)
         || _g_old:=R_REJ_WW.GD; _g_new:=R_ODN.GOD;
            R_REJ_WW.GD:=R_ODN.GOD;
            {? R_REJ_WW.put() & _podz || _wyn:=exec('cut','plob_p',P.ref(),'W',_b,3,_g_old,_g_new) ?}
         ?}
:: początek przerwy jest przed rozpoczęciem zapisu we jednocześnie zakończenie przerwy jest pomiedzy zapisami we/wy
      |? _rodzaj=500
      || {? R_REJ_WW.find_le(R_ODN.GDO,2)
         || _g_old:=R_REJ_WW.GD; _g_new:=R_ODN.GDO;
            R_REJ_WW.GD:=R_ODN.GDO;
            {? R_REJ_WW.put() & _podz || _wyn:=exec('cut','plob_p',P.ref(),'W',_b,2,_g_old,_g_new) ?}
         ?}
:: początek przerwy pokrywa się z rozpoczęciem zapisu we/wy jednocześnie zakończenie przerwy pokrywa się z końcem
:: zapisu we/wy
      |? _rodzaj=22
      || {? R_REJ_WW.first()
         || {!
            |? {? R_REJ_WW.GD=R_ODN.GOD | R_REJ_WW.GD=R_ODN.GDO
               || R_REJ_WW.del()
               || R_REJ_WW.next()
               ?}
            !};
::          kasuje podziały zgodne z wnioskiem o wyjście prywatne
            {? _podz || exec('del_podz','plob_p',P.ref(),'W',_b,R_ODN.GOD,R_ODN.GDO) ?}
         ?};
         _wyn:=R_REJ_WW.first()
:: Przerwa w pracy wystapiła pomiędzy wejściem a wyjściem
      |? _rodzaj=100
      || {? _form(_a,_b,R_ODN.GOD,_c,1,'S')
         || _form(_a,_b,R_ODN.GDO,_c,0,'S')
         ?}
      ?};
      R_ODN.next()
   !}
?};
exec('usu_ts','prc_wewy',_b);
R_WEWY.cntx_pop();
R_REJ_WW.cntx_pop();
_wyn


\get_wewy_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Sprawdza status dla dnia wykonania zarejestrowanego w wewy
::   WE: _a  - [REFERENCE] - P.ref pracownika
::       _b  - [DATE]      - data sprawdzenia
::      [_c] - [INTEGER]   - czy sprawdzać dzień poprzedni (domyślnie tak)
::   WY: status dnia ('O' - jest odbiór (nie można modyfikować) / '' - brak informacji)
::  OLD: \get_wewy_status/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_status:='';
  _p_ref:={? var_pres('_a')=type_of(null) || _a || return(_status) ?};
   _data:={? var_pres('_b')=type_of(date) || _b || return(_status) ?};
_chkPrev:={? var_pres('_c')=type_of(0)    || _c || 1               ?};

_odb:=exec('spr_odb','grafik',_p_ref,_data,,_chkPrev);
{? _odb.jestOdb
|| _status:='O'
?};
_status


\wyj_prywatne_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wprowadzenie zapisów przerw / wyjść prywatnych
::   WE: _a -tabela we/wy
::   WY: pokrycie zapisów
::       1 - zakończenie przerwy pokrywa się z rozpoczęciem zapisu we/wy
::       2 - zakończenie przerwy pokrywa się z końcem zapisu we/wy
::       10 - początek przerwy pokrywa się z końcem zapisu we/wy
::       20 - początek przerwy pokrywa się z rozpoczęciem zapisu we/wy
::       22 - początek przerwy pokrywa się z rozpoczęciem zapisu we/wy jednocześnie zakończenie przerwy pokrywa się
::            z końcem zapisu we/wy
::       100 - przerwa w pracy wystapiła pomiędzy wejściem a wyjściem
::       300 - początek przerwy jest większy od początku we/wy jednocześnie zakończenie przerwy
::             wykracza poza koniec we/wy
::       500 - początek przerwy jest przed rozpoczęciem zapisu wejścia jednocześnie zakończenie przerwy jest pomiędzy
::             zapisami we/wy
::  OLD: \wyj_prywatne_1/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _a.first()
|| {!
   |? {? _a.ST=2 & _a.DZ=R_ODN.DW
      || _od:=_a.GD;
         {! |? {? _a.ST=3 || _do:=_a.GD; 0 || _a.next() ?} !};
         {? var_pres('_do')=type_of(time())
         || {? R_ODN.GOD=_do
            || _wyn+=10
            ?};
            {? R_ODN.GDO=_do
            || _wyn+=2
            ?};
            {? R_ODN.GOD>_od & R_ODN.GDO<_do
            || _wyn+=100
            ?};
            {? R_ODN.GOD>_od & R_ODN.GOD<_do & R_ODN.GDO>_do
            || _wyn+=300
            ?};
            {? R_ODN.GOD<_od & R_ODN.GDO>_od & R_ODN.GDO<_do
            || _wyn+=500
            ?}
         ?};
         {? R_ODN.GOD=_od
         || _wyn+=20
         ?};
         {? R_ODN.GDO=_od
         || _wyn+=1
         ?}
      ?};
      _a.next()
   !}
?};
_wyn


\akt_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja wywoływana przez akcje Dołącz i Popraw po okienku tabeli. Jeżeli dane zawarte w tabeli są poprawne
::       (patrz funkcja spr_wewy), aktualizuje okienko zawierające informacje o wejściu, wyjściu, przepracowanych
::       godzinach i przerwach w przeciwnym wypadku zawartość okienka jest czyszczona.
::  OLD: \akt_info/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_Wejscie:=_Wyjscie:=_Praca:=_Przerwy:=time(0,0,0);

_tab:=R_SPEC;
{? exec('spr_wewy','prc_wewy')
|| _tab.cntx_psh();
   {? _tab.first()
   || _Wejscie:=_tab.GD;
      _Data:=_tab.DZ;
      _DataWej:=_DataWyj:=date(0,0,0);
      _GodzWyj:=time(0,0,0);
      {!
      |? _tab.cntx_psh();
         _WejWyj:=_tab.ref();
         {? _tab.TP='WEJŚCIE' & _tab.RD='normalne' & _tab.ZM<>'N'
         || _DataWej:=_tab.DZ;
            _GodzWej:=_tab.GD
         ?};
         {? (_tab.first(); _WejWyj<>_tab.ref()) & (_tab.last(); _WejWyj<>_tab.ref() | _DataWej<_tab.DZ)
         || _tab.cntx_pop();
            {? _tab.TP='WYJŚCIE' & _tab.RD='normalne' & _tab.ZM<>'N'
            || _DataWyj:=_tab.DZ;
               _GodzWyj:=_tab.GD;

               {? _DataWyj>_DataWej
               || _tab.cntx_psh();
                  _tab.DZ:=_DataWej;
                  _tab.GD:=time(24,0,0);
                  _tab.TP:='WYJŚCIE';
                  _tab.RD:='normalne';
                  _tab.ST:=exec('find_st_wewy','prc_wewy',_tab.TP,_tab.RD);
                  _tab.ZM:='S';
                  {? _tab.add()
                  || _tab.GD:=time(0,0,0);
                     _tab.DZ:=_DataWyj;
                     _tab.TP:='WEJŚCIE';
                     _tab.RD:='normalne';
                     _tab.ST:=exec('find_st_wewy','prc_wewy',_tab.TP,_tab.RD);
                     _tab.add
                  ?};
                  _tab.cntx_pop()
               ?}
            ?};
            {? _tab.TP='WEJŚCIE' & _tab.RD='normalne' & _DataWyj<>#0
            || _godz:=exec('UstGodz','prc_wewy',_DataWyj,_tab.DZ,_tab.GD);
               _Przerwy+=_godz-_GodzWyj
            ?}
         || _tab.cntx_pop()
         ?};
         _tab.next()
      !};
      _godz:=exec('UstGodz','prc_wewy',_Data,_tab.DZ,_tab.GD);
      _Praca:=(_godz-_Wejscie)-_Przerwy;
      _Wyjscie:=_tab.GD
   ?};
   _tab.cntx_pop()
?};
REJ_INFO.WEJ:=_Wejscie;
REJ_INFO.WYJ:=_Wyjscie;
REJ_INFO.PRACA:=_Praca;
REJ_INFO.PRZER:=_Przerwy


\spr_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [22.26]
:: OPIS: Funkcja wywoływana po każdej modyfikacji zapisów w tabeli rejestracji wej/wyj.
::       Sprawdza, czy wprowadzone zapisy są poprawne, tzn. po każdym wejściu następuje wyjście
::       oraz czy odpowiadające sobie wejścia i wyjścia są takiego samego rodzaju.
::   WE: _a [INT] - 1 bez weryfikacji, REJ_INFO.ERROR sprawdzenie (poprawności zapisów) nie będzie ustalone.
::   WY:
::  OLD: \spr_wewy/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_not_ver:=var_pres('_a')=type_of(0) & _a;
{? ~exec('is_pzd02','ppsf')
|| {? _not_ver
   || return(0)
   || return(exec('spr_wewy_norm','prc_wewy'))
   ?}
?};
_count:=R_SPEC.size();
{? _count<=2
|| return(exec('spr_wewy_norm','prc_wewy'))
?};

{? ~_not_ver
|| _count:=R_SPEC.size();
   {? _count<=2
   || return(exec('spr_wewy_norm','prc_wewy'))
   ?};
   REJ_INFO.ERROR:=0;
   {? _count%*2
   || REJ_INFO.ERROR:=1;
      return(0)
   ?}
?};

_R_SPEC:=tab_tmp(3,
   'ST','INTEGER','Status',
   'DZ','DATE','Data',
   'GD','TIME','Godzina zdarzenia',
   'LP','INTEGER','Lp',
   'REF','INTEGER','REF R_SPEC'
);
R_SPEC.cntx_psh();
 {? R_SPEC.first()
   || {!
      |? _R_SPEC.blank();
         _R_SPEC.DZ:=R_SPEC.DZ;
         _R_SPEC.GD:=R_SPEC.GD;
         _R_SPEC.ST:=R_SPEC.ST;
         _R_SPEC.REF:=#R_SPEC.ref();
         _R_SPEC.add(1);
         R_SPEC.next()
      !}
  ?};
R_SPEC.cntx_pop();

_fun_lp:="_R_SPEC:=_a; _we:=_b; _wy:=_c; _nr:=_d;
   _R_SPEC.prefix(_we);
   {? _R_SPEC.first()
   || {!
      |? _R_SPEC.LP:=(_nr+=1);
         _R_SPEC.put();
         _data:=_R_SPEC.DZ; _godz:=_R_SPEC.GD;
         _R_SPEC.cntx_psh();
         _R_SPEC.prefix(_wy);
         _ok:=0;
         {? _R_SPEC.find_ge(_R_SPEC.DZ,_R_SPEC.GD)
         || {? _data=_R_SPEC.DZ & _godz=_R_SPEC.GD
            || _ok:=_R_SPEC.next() & ~_R_SPEC.LP
            || _ok:=~_R_SPEC.LP
            ?};
            {? _ok
            || _R_SPEC.LP:=_nr;
               _R_SPEC.put()
            ?}
         ?};
         {? ~_ok
         || _R_SPEC.cntx_pop();
            _R_SPEC.LP:=0;
            _R_SPEC.put()
         || _R_SPEC.cntx_pop()
         ?};
         _R_SPEC.next()
      !}
   ?};
_nr";

_nr:=_fun_lp(_R_SPEC,2,3,0);
_fun_lp(_R_SPEC,5,4,_nr);
_R_SPEC.prefix();
_test:=1;
{? _R_SPEC.first()
|| {! |? _test:=_R_SPEC.LP; _test & _R_SPEC.next() !};
   {? _test & _R_SPEC.first()
   || _trans:=do_state()>0;
      {? ~_trans || do() ?};
      {!
      |? {? R_SPEC.seek(_R_SPEC.REF)
         || R_SPEC.LP:=_R_SPEC.LP;
            _ok:=R_SPEC.put(1)
         || _ok:=0
         ?};
         {? _ok
         || _R_SPEC.next()
         || {? ~_trans || undo() ?};
            0
         ?}
      !};
      {? ~_trans || end() ?}
   ?}
?};
{? ~_not_ver
|| REJ_INFO.ERROR:=~_test
?};
_test


\spr_wewy_norm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja wywoływana po każdej modyfikacji zapisów w tabeli rejestracji wej/wyj.
::       Sprawdza, czy wprowadzone zapisy są poprawne, tzn. po każdym wejściu następuje wyjście
::       oraz czy odpowiadające sobie wejścia i wyjścia są takiego samego rodzaju.
::   WE:
::   WY:
::  OLD: \spr_wewy/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_Tmp:=_Test:=1;
_Typ:=_Mod:='';
_tab:=R_SPEC;
_tab.cntx_psh();
{? _tab.last()
|| _Test:=_tab.last() & _tab.TP='WYJŚCIE';
   _Last:=_tab.ref();
   _Mod:=_tab.RD;
   _Test:=_Test & (_tab.first() & _tab.TP='WEJŚCIE' & _tab.RD=_Mod);
   _First:=_tab.ref();
   {? _Test
   || {!
      |? _Test:=(_Typ<>_tab.TP);
         _Typ:=_tab.TP;
         _Test & _tab.next()
      !}
   ?};
   {!
   |? _Test & _tab.prev() & (_tab.ref()<>_First)
   |! _Mod:=_tab.RD;
      _tab.prev();
      _Test:=(_Mod=_tab.RD)
   !}
?};
_tab.cntx_pop();
REJ_INFO.ERROR:=~_Test;
_Test


\r_spec_wer_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
::  MOD: MicKoc [22.26]
:: OPIS: Formuła do wykonania podczas wychodzenia z okna kwalifikacji wejścia i wyjścia.
::   WE:
::   WY:
::  OLD: \REJoknpo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? params_get().cfg.extra.WEWY & params_get().KWAL.BL<>'T' &
   __HARM.mc_otw(params_get().KWAL.DT,1,exec('prz_okr','prc_rozlicz',params_get().KWAL.DT)) &
   __HARM.mc_otw(params_get().KWAL.DT+1,0)

|| _blad:=0;
   exec('akt_info','prc_wewy');
   {? REJ_INFO.ERROR=0 & R_SPEC.first()
   || _prz_s:=_prz_k:=0;
      _noc_s:=_noc_k:=0;
      _noc:=0;
      _loop:=0;
      {!
      |? {?  R_SPEC.ZM<>'D'
         || {? 2+R_SPEC.TP='WY' & R_SPEC.ZM='N' || _prz_s:=1 ?};
            {? 2+R_SPEC.TP='WE' & R_SPEC.ZM='N' || _prz_k:=1 ?};
            {? 2+R_SPEC.TP='WY' & R_SPEC.ZM<>'N' & R_SPEC.GD=time(24,0,0) || _noc_s:=1 ?};
            {? VAR_EDIT.DATA<R_SPEC.DZ
            || {? _loop || _noc:=1 ?};
               {? 2+R_SPEC.TP='WY' & R_SPEC.ZM='N' || _prz_s:=2 ?};
               {? 2+R_SPEC.TP='WE' & R_SPEC.ZM='N' || _prz_k:=2 ?};
               {? 2+R_SPEC.TP='WE' & R_SPEC.ZM<>'N' & R_SPEC.GD=time(0,0,0) || _noc_k:=1 ?}
            || _loop+=1
            ?}
         ?};
         R_SPEC.next()
      !};
      _blad:=_noc & (_noc_s=0 | _noc_k=0);
      _blad:=_blad & (_prz_s | _prz_k) & _prz_s=_prz_k
   ?};
   {? REJ_INFO.ERROR
   || FUN.ask('%1\n%2'['Rejestr wejść/wyjść zawiera nieprawidłowe dane.'@,'Czy na pewno kontynuować?'@])
   |? _blad
   || FUN.emsg('%1\n%2\n%3\n%4.'
         [  'Rejestr wejść/wyjść zawiera nieprawidłowe dane.'@,
            'Dla pracy w porze nocnej muszą wystąpić zapisy: '@,
            'kończące dzień WYJŚCIE(24:00:00)'@,
            'rozpoczynające dzień WEJŚCIE(00:00:00)'@
         ]
      );
      0
   |? VAR_EDIT.AKT
   || _flaga:=VAR_EDIT.FLAGA;
      VAR_EDIT.FLAGA:=params_get().cfg.extra.FLAGA;
      exec('akt_prac','prc_wewy',VAR_EDIT.DATA,,,,,,1);
      VAR_EDIT.FLAGA:=_flaga
   || 1
   ?}
|| 1
?}


\wewy_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła do wykonania po obsłudze zakładki kwalifikacji wejścia i wyjścia.
::   WE:
::   WY:
::  OLD: \REJoknpo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? params_get().KWAL.f_active() || params_get().KWAL.f_clear() ?};
_KWAL:=params_get().KWAL;
_KWKK:=params_get().KWKK;
{? VAR_EDIT.AKT & ((__HARM.OKRES & A_OKR.S<>'Z' & _KWAL.BL<>'T') & __HARM.mc_otw(_KWAL.DT,0) | ~__HARM.OKRES)
|| _par:=params_get().par;
   _flaga:=VAR_EDIT.FLAGA;
   VAR_EDIT.FLAGA:=params_get().cfg.extra.FLAGA;
   exec('zap_ts','prc_wewy',VAR_EDIT.DATA,1);
   _prev_p:=exec('akt_prac','prc_wewy',VAR_EDIT.DATA,1,1,1);
   {? __HARM.OKRES
   || _par.od:=_data_od:=A_OKRP.OD;
      _par.do:=_data_do:=A_OKRP.DO
   || _par.od:=_data_od:=date(VAR_EDIT.ROK,VAR_EDIT.MSC,1);
      _par.do:=_data_do:=date(VAR_EDIT.ROK,VAR_EDIT.MSC,0)
   ?};
   {? ~R_REJ_WW.first()
   || {? R_PRACDN.seek(_KWAL.R_PRACDN,)
      || R_PRACDN.del()
      ?}
   ?};

   params_exec('licz_tab','prc_rozlicz',VAR_EDIT.DATA);
   {? #(1+_prev_p)
   || _prev_d:=VAR_EDIT.DATA;
:: czy dzień należy o bieżącego okresu rozliczeniowego
      {? _data_od<_prev_d
      || {? _KWAL.find_key(_prev_d-1)
         || params_exec('wylicz_kw','prc_rozlicz',1)
         ?}
      || A_OKRP.cntx_psh();
         A_OKRP.index('A_OKRDP');
         A_OKRP.prefix(P.ref());
:: dzień należy do poprzedniego okresu rozliczeniowego
         {? A_OKRP.find_le(_prev_d-1)
         || _tab_tmp:=_KWAL;
            _kwkk_tmp:=_KWKK;
            {? var_pres('_KWAL')>100 || &_KWAL ?};
            _KWAL:=exec('tab_create','prc_rozlicz');
            {? var_pres('_KWKK')>100 || &_KWKK ?};
            _KWKK:=exec('kwkk_create','prc_rozlicz');
:: tabela tylko na ostatni dzień okresu rozliczeniowego
            _par.od:=A_OKRP.DO;
            _par.do:=A_OKRP.DO;
            params_set(
               'cfg',params_get().cfg,
               'par',_par,
               'KWAL',_KWAL,
               'KWKK',_KWKK,
               'WER',params_get().WER
            );
            exec('licz_tab','prc_rozlicz',_prev_d-1,1);
:: bez weryfikacji czy okres rozliczeniowy został zamkniety
            params_exec('wylicz_kw','prc_rozlicz',1);
            {? var_pres('_KWAL')>100 || &_KWAL ?};
            {? var_pres('_KWKK')>100 || &_KWKK ?};
            _KWAL:=&_tab_tmp;
            _KWKK:=&_kwkk_tmp
         ?};
         A_OKRP.cntx_pop();
         _par.od:=A_OKRP.OD;
         _par.do:=A_OKRP.DO;
         params_set(
               'cfg',params_get().cfg,
               'par',_par,
               'KWAL',_KWAL,
               'KWKK',_KWKK,
               'WER',params_get().WER
            )
      ?};
      _KWAL.find_key(_prev_d)
   ?};

   {? #(1+(1-_prev_p))
   || _next_d:=_KWAL.DT;
:: czy dzień należy o bieżącego okresu rozliczeniowego
      {? _data_do>_next_d
      || {? _KWAL.find_key(_next_d+1)
         || params_exec('wylicz_kw','prc_rozlicz',1)
         ?}
      ?};
      _KWAL.find_key(_next_d)
   ?};
   params_exec('wylicz_kw','prc_rozlicz');
   VAR_EDIT.FLAGA:=_flaga;
   _KWAL.ndx_drop();
   grp_disp(_KWAL,params_get().WER)
?}


\wewy_ad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Formuła po akcji "usuń" w oknie WER tabeli R_SPEC.
::   WE:
::   WY:
::  OLD: \REJuspo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_SPEC.first()
|| _jest_d:=0;
   {!
   |? {? R_SPEC.ZM='D' || _jest_d+=1 ?};
      R_SPEC.next()
   !};
   {? _jest_d%*2 & R_SPEC.first()
   || {!
      |? {? R_SPEC.ZM='D'
         || R_SPEC.del()
         || R_SPEC.next()
         ?}
      !}
   ?}
?};
exec('akt_info','prc_wewy');
VAR_EDIT.AKT:=1


\wewy_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji "rekord" w oknie WER tabeli R_SPEC.
::   WE:
::   WY:
::  OLD: \REJrekpo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_tab:=R_SPEC;
_result:=__CHK.record2(_tab,'ST','Rodzaj','CZ','Czytnik');
{? _result=''
|| _tab.cntx_psh();
   _tab.clear();
   R_WEWY.cntx_psh();
   R_WEWY.index('R_STATUS');
   R_OPCZYT.cntx_psh();
   R_OPCZYT.index('R_OPCZSL');
   R_OPCZYT.prefix('T');
   {? {? +_tab.IDADD
      || _tab.find_tab(,
            'IDADD',,'<>',_tab.IDADD,
            'P',,'=',_tab.P,
            'DZ',,'=',_tab.DZ,
            'DZK',,'=',_tab.DZK,
            'GD',,'=',_tab.GD,
            'ST',,'=',_tab.ST
         )
      || _tab.find_tab(,
            'P',,'=',_tab.P,
            'DZ',,'=',_tab.DZ,
            'DZK',,'=',_tab.DZK,
            'GD',,'=',_tab.GD,
            'ST',,'=',_tab.ST
         )
      ?}
   || FUN.emsg('Dodanie zapisu nie jest możliwe ponieważ rekord już istnieje w tabeli.'@);
      _result:='DZ'
   |? _tab.ZM='D'
   || FUN.emsg('Nie można modyfikować zapisu specjalnego z typem zmiany \"D\".'@)
   |? _tab.GD>time(24,0,0)
   || FUN.emsg('Nieprawidłowa wartość w polu \"Godzina\".'@);
      _result:='GD'
   |? ~R_WEWY.find_key(_tab.ST)
   || FUN.emsg('Nieprawidłowa wartość w polu \"Rodzaj\".'@);
      _result:='ST'
   |? ~R_OPCZYT.find_key(_tab.CZ,)
   || FUN.emsg('Nieprawidłowa wartość w polu \"Czytnik\".'@);
      _tab.CZ:='';
      _result:='CZ'
   |? (_tab.ST=2 | _tab.ST=4) & _tab.GD=time(24,0,0)
   || FUN.emsg('Nieprawidłowa wartość w polu \"Godzina\".\nDla wejścia należy wprowadzić: 00\\00\\00.'@);
      _result:='GD'
   |? (_tab.ST=3 | _tab.ST=5) & _tab.GD=time(0,0,0)
   || FUN.emsg('Nieprawidłowa wartość w polu \"Godzina\".\nDla wyjścia należy wprowadzić: 24\\00\\00.'@);
      _result:='GD'
   ?};
   R_OPCZYT.cntx_pop();
   R_WEWY.cntx_pop();
   _tab.cntx_pop()
?};
_result


\wewy_dz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Formuła po redagowaniu pola DZ tabeli R_SPEC.
::   WE:
::   WY:
::  OLD: \spr_date/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_KalOk:=0;
R_WZCZ.index('R_WZCZ');
R_WZCZ.prefix(P.name(),P.ref());
_Kalend:=
   {? R_WZCZ.find_le(VAR_EDIT.DATA)
   || {? R_WZCZ.GRAFIK='T'
      || R_WZCZ.CZESC
      || R_WZCZ.KAL
      ?}
   || P.KAL
   ?};
{? _Kalend
|| KAL_ROK.index('KAL_ROK');
   KAL_ROK.prefix(_Kalend);
   {? KAL_ROK.find_key(VAR_EDIT.DATA~1)
   || KAL_DEF.index('KAL_DEF');
      KAL_DEF.prefix(KAL_ROK.ref());
      _KalOk:=KAL_DEF.find_key(VAR_EDIT.DATA)
   ?}
?};
{? _KalOk
|| {? chk_fld(1)
   || {? fld()<KAL_DEF.DATA | KAL_DEF.DATAW<fld()
      || {? fld()<KAL_DEF.DATA-1 | KAL_DEF.DATAW<fld()-1
         || FUN.emsg('Błędna wartość w polu \"Dzień\".'@);
            0
         || FUN.emsg('Wartość w polu \"Dzień\" niezgodna ze wzorcem czasu pracy.'@);
            1
         ?}
      || 1
      ?}
   || FUN.emsg('Wartość w polu \"Dzień\" musi być wypełniona.'@); 0
   ?}
|| FUN.emsg('Dla pracownika %1 %2,\nnie został określony wzorzec czasu pracy.'@[P.OSOBA().NAZWISKO,OSOBA.PIERWSZE]); 0
?}


\r_spec_ap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.42]
:: OPIS: Formuła po akcji Popraw w tabeli R_SPEC.
::   WE:
::   WY:
::  OLD: \SPECpopo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
{? R_SPEC.ZM<>'N'
|| R_SPEC.ZM:='P'
?};
R_SPEC.put();
exec('akt_info','prc_wewy');
VAR_EDIT.AKT:=1


\wewy_bfl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Przed wyświetleniem legendy w oknach tabeli R_REJ_WW, R_SPEC
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','R_REJ_WW#01#01')


\r_spec_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła po akcji dołącz w tabeli R_SPEC
::   WE:
::   WY:
::  OLD: \SPEdodpo/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_SPEC.ZM:='R';
R_SPEC.put();
exec('akt_info','prc_wewy');
VAR_EDIT.AKT:=1


\zap_ts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Zapisanie danych z tabeli pomocniczej.
::   WE: _a - data początkowa kwalifikacji
::       _b - usunięcie wiersza z tabeli
::  OLD: \zap_ts/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_del:={? var_pres('_b')=-1 || 0 || 1 ?};
{? R_SPEC.first()
|| {!
   |? R_SPEC.r_unlock();
      R_SPEC.next()
   !}
?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

{? _del
|| {? var_pres('_a')<>-1
   || {! _ind:=-1..1
      |! _Mask:=MASK.Name('R_REJ_WW',(_a+_ind)~1,(_a+_ind)~2);
         {? R_REJ_WW.name()<>_Mask
         || R_REJ_WW.use(_Mask);
            R_REJ_WW.clear()
         ?};
         R_REJ_WW.index('R_REJ_WX');
         R_REJ_WW.prefix(P.ref(),_a);
         {? R_REJ_WW.first()
         || {! |? R_REJ_WW.del() !}
         ?}
      !}
   ?}
?};
_ok:=1;
R_REJ_WW.clear();
{? R_SPEC.first()
   || {!
      |? _Mask:=MASK.Name('R_REJ_WW',R_SPEC.DZ~1,R_SPEC.DZ~2);
         {? R_REJ_WW.name()<>_Mask
         || R_REJ_WW.use(_Mask);
            R_REJ_WW.clear()
         ?};
         R_REJ_WW.blank();
         R_REJ_WW.P:=R_SPEC.P;
         R_REJ_WW.CZ:=R_SPEC.CZ;
         R_REJ_WW.DZ:=R_SPEC.DZ;
         R_REJ_WW.GD:=R_SPEC.GD;
         R_REJ_WW.ST:=R_SPEC.ST;
         R_REJ_WW.TP:=R_SPEC.TP;
         R_REJ_WW.RD:=R_SPEC.RD;
         R_REJ_WW.ZM:=R_SPEC.ZM;
         R_REJ_WW.DZK:=R_SPEC.DZK;
         {? ~R_REJ_WW.add(1)
         || {? _ok
            || exec('usu_zm_d','prc_wewy',R_SPEC.DZ);
               _ok:=0
            ?};
            R_REJ_WW.add(1)
         ?};
         R_SPEC.del()
      !}
?};
{? _mydo || end() ?}


\spr_wewy_odl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Sprawdzenie czy są zapisy we/wy w terminie wniosku wyjść prywatnych.
::       Wymagany kontekst danych dla tabeli R_ODN.
::   WE:
::   WY: >0 - istnieją zapisy pokrywające się czasowo
::       0 - nie istnieją zapisy pokrywające się czasowo
::      -1 - brak zapisęw WE/WY
::  OLD: \spr_wewy_odl/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
R_REJ_WW.cntx_psh();
MASK.Use('R_REJ_WW',R_ODN.DW~1,R_ODN.DW~2);
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(P.ref(),R_ODN.DW);
{? R_REJ_WW.first()
|| _wyn:=exec('wyj_prywatne_1','prc_wewy',R_REJ_WW)
|| _wyn:=-1
?};
R_REJ_WW.cntx_pop();
_wyn


\r_spec_wer_afw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Po akcji wylicz czynności akcji weryfikacja czasu pracy w oknie WER tabeli R_SPEC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR_EDIT.AKT:=1;
params_exec('wewy_as','prc_wewy');
exec('wpisz_ts','prc_wewy',params_get().KWAL.DT,1)


\rodzaj_czytnika
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyszukanie rodzaju czytnika wejścia/wyjścia.
::   WE: _a - [STRING] - Kod czytnika
::   WY: (0/1) - ustalenie czy należy sprawdzać marginesy
::----------------------------------------------------------------------------------------------------------------------
_wy:=1;
R_OPCZYT.cntx_psh();
R_OPCZYT.index('R_OPCZYT');
R_OPCZYT.prefix(_a,);
{? R_OPCZYT.first()
|| _wy:=R_OPCZYT.SYMBOL<>'<SYSTEM>'
?};
R_OPCZYT.cntx_pop();
_wy


\r_spec_wer_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Popraw" w oknie WER tabeli R_SPEC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_czytnik:=R_SPEC.CZ;
R_OPCZYT.cntx_psh();
R_OPCZYT.index('R_OPCZSL');
R_OPCZYT.prefix('T');
{? ~R_OPCZYT.find_key(_czytnik,)
|| R_SPEC.CZ:=''
?};
R_OPCZYT.cntx_pop()


\UstGodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Funkcja do ustalenia godziny wyjścia z uwzględnieniem różnicy pomiędzy daty wejścia i wyjścia.
::   WE: _a - [DATE] Data wejścia.
::       _b - [DATE] Data wyjścia.
::       _c - [TIME] Godzina wyjścia.
::   WY: Godzina wyjścia.
::----------------------------------------------------------------------------------------------------------------------
_gd:=_b-_a;
_gd*=24;
time(_c~1+_gd,_c~2,_c~3)


\find_st_wewy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Wyszukiwanie właściwego statusu wejścia lub wyjścia.
::   WE: _a - [STRING] Typ wejścia lub wyjścia.
::       _b - [STRING] Rodzaj wejścia lub wyjścia.
::   WY: Status wejścia lub wyjścia.
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
R_WEWY.cntx_psh();
R_WEWY.index('R_STATUS');
R_WEWY.prefix();
{? _a='WEJŚCIE' & R_WEWY.find_key(2)
|| _result:=R_WEWY.ST
|? _a='WYJŚCIE' & R_WEWY.find_key(3)
|| _result:=R_WEWY.ST
|| R_WEWY.index('R_TP_RD');
   R_WEWY.prefix();
   {? R_WEWY.find_key(_a,_b)
   || _result:=R_REJ_WW.ST:=R_WEWY.ST
   ?}
?};
R_WEWY.cntx_pop();
_result


\normalizacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [21.14]
::  MOD: MicKoc [22.26]
:: OPIS: Normalizacja we/wy. Bufor pracownika ma być ustalony. Kalendarz pracownika ma być ustalony.
::       Bufor kalendarza pracownika ma być ustalony na podaną datę.
::   WE: _a [DATE] - data kwalifikacji
::       _b [STRING] - typ parametru 362
::       _c [INTEGER] - czy jest aktywna przerwa niepłatna
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;

_przerwy:=var_pres('_c')=type_of(0) & _c;
:: bufor na przerwy
{? _przerwy
|| _tPrzerwy:=sql('select * from R_SPEC where 0=1 order by DZK, DZ, GD')
?};
{? R_SPEC.first()
|| _ile:=0;
   {!
   |? {? R_SPEC.ZM='P' | R_SPEC.ZM='R' | R_SPEC.ZM='D'
      || _ok+=1
      ?};
      ~_ok &
      {? _przerwy & R_SPEC.ZM='N'
      || _tPrzerwy.blank(1);
         _tPrzerwy.CZ:=R_SPEC.CZ;
         _tPrzerwy.DZ:=R_SPEC.DZ;
         _tPrzerwy.GD:=R_SPEC.GD;
         _tPrzerwy.ST:=R_SPEC.ST;
         _tPrzerwy.TP:=R_SPEC.TP;
         _tPrzerwy.RD:=R_SPEC.RD;
         _tPrzerwy.DZK:=R_SPEC.DZK;
         _ile+=_tPrzerwy.add();
:: jeśli są przerwy, usuwam z we/wy na czas analizy
         R_SPEC.del()
      || R_SPEC.next()
      ?}
   !};
:: przerwa niepłatna może być jedna czyli we + wy
   {? _przerwy & _ile<>2
   || {? _tPrzerwy.first() || {! |? _tPrzerwy.del() !} ?}
   ?}
|| _ok:=1
?};
{? _ok
|| return(0)
?};

KAL_DEF.cntx_psh();
_data:=_a;
_typ:=_b;
_wynik:=0;
:: Powołanie bufora do przechowywania informacji o zaplanowanych czasie pracy
_Kal_Buf:=exec('Kal_Buff','prc_wewy',_data);
_esc:=0;
{? _typ='R'
|| _esc+=_Kal_Buf.POCZATEK=KAL_DEF.POCZATEK;
   _esc+=_Kal_Buf.KONIEC=KAL_DEF.KONIEC;
   _esc+=_Kal_Buf.DATAW=KAL_DEF.DATAW;
   _esc+=_Kal_Buf.DATA=KAL_DEF.DATA;
   _esc+=_Kal_Buf.CZAS=KAL_DEF.CZAS
?};

{? _typ<>'W'
|| {? _Kal_Buf.DATA=#0 | _esc=5
   || KAL_DEF.cntx_pop();
      return(0)
   ?}
|| {? _Kal_Buf.DATA=#0 & R_SPEC.first()
   || {! |?  R_SPEC.del(,1)=3 !};

      KAL_DEF.cntx_pop();
      R_REJ_WW.cntx_psh();
      {! _ind:=-1..1
      |! _Mask:=MASK.Name('R_REJ_WW',(_data+_ind)~1,(_data+_ind)~2);
         {? R_REJ_WW.name()<>_Mask
         || R_REJ_WW.use(_Mask);
            R_REJ_WW.clear()
         ?};
         R_REJ_WW.index('R_REJ_WX');
         R_REJ_WW.prefix(P.ref(),_data);
         {? R_REJ_WW.first()
         || {! |? R_REJ_WW.del() !}
         ?}
      !};
      R_REJ_WW.cntx_pop();
      return(0)
   ?}
?};
_wynik+=exec('plan_we_wy','prc_wewy',_data,_Kal_Buf,_typ);

:: przywrócenie przerw, jeśli mieszczą się w zakresie we/wy
{? _przerwy & _tPrzerwy.first()
|| _first:={? R_SPEC.first() || exec('create','#tm_stamp',R_SPEC.DZ,R_SPEC.GD) || 0 ?};
   _last:={? R_SPEC.last() || exec('create','#tm_stamp',R_SPEC.DZ,R_SPEC.GD) || 0 ?};
   {? _first<>_last & _first
   || _ref:=null();
      {! |?
         _tm:=exec('create','#tm_stamp',_tPrzerwy.DZ,_tPrzerwy.GD);
         {? _tm>_first & _tm<_last
         || R_SPEC.CZ:=_tPrzerwy.CZ;
            R_SPEC.DZ:=_tPrzerwy.DZ;
            R_SPEC.GD:=_tPrzerwy.GD;
            R_SPEC.ST:=_tPrzerwy.ST;
            R_SPEC.TP:=_tPrzerwy.TP;
            R_SPEC.RD:=_tPrzerwy.RD;
            R_SPEC.DZK:=_tPrzerwy.DZK;
            R_SPEC.ZM:='N';
            {? R_SPEC.add(1)
            || {? _ref=null()
               || _ref:=R_SPEC.ref()
               || _ref:=R_SPEC.ref()
               ?}
            || {? _ref<>null() & R_SPEC.seek(_ref)
               || R_SPEC.del();
                  _ref:=null()
               ?}
            ?}
         || {? _ref<>null() & R_SPEC.seek(_ref)
            || R_SPEC.del();
               _ref:=null()
            ?}
         ?};
         _tPrzerwy.next()
      !};
      {? _ref<>null() & R_SPEC.seek(_ref)
      || R_SPEC.del();
         _ref:=null()
      ?}
   ?}
?};

:: Dodanie systemowych zapisów dla wejśc i wyjść służbowych (dopełnienie)
{? _wynik
|| exec('zap_ts','prc_wewy',_data,1);
   exec('wpisz_ts','prc_wewy',_data,1)
?};
KAL_DEF.cntx_pop();
1


\Kal_Buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.14]
:: OPIS: Utworzenie i wypełnienie tablicy nazwanej dla danych odnośnie zaplanowanego dnia pracy.
::       Pracownik i kalendarz w buforze bieżącym.
::   WE: _a (DATE) - data badania
::   WY: alias tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
:: Ustawienie bufora dla przechowywanych informacji
_Kal_Buf:=obj_new('POCZATEK','KONIEC','DATAW','DATA','CZAS','TYP');
_Kal_Buf.POCZATEK:=_Kal_Buf.KONIEC:=_Kal_Buf.CZAS:=*0;
_Kal_Buf.DATA:=_Kal_Buf.DATAW:=#0;
_Kal_Buf.TYP:='';

:: Wprowadzenie danych do bufora z grafików
KAL_BUFF.index('PRZNODT');
KAL_BUFF.prefix(P.ref, 'G', 'T', _data);

{? KAL_BUFF.first() & KAL_BUFF.TYP='R'
|| _Kal_Buf.POCZATEK:=KAL_BUFF.POCZATEK;
   _Kal_Buf.KONIEC:=KAL_BUFF.KONIEC;
   _Kal_Buf.DATAW:=KAL_BUFF.DATAW;
   _Kal_Buf.DATA:=KAL_BUFF.DATA;
   _Kal_Buf.CZAS:=KAL_BUFF.CZAS;
   _Kal_Buf.TYP:='KAL_BUFF'
?};
:: sprawdzenie odbiorów
R_WO.index('PORDO');
R_WO.prefix(P.ref,__HARM.OKR_REF,_data);
{? R_WO.first
|| {? 'WS'*R_WO.W
   || _Kal_Buf.POCZATEK:=_Kal_Buf.KONIEC:=_Kal_Buf.CZAS:=*0;
      _Kal_Buf.DATA:=_Kal_Buf.DATAW:=#0;
      _Kal_Buf.TYP:=''
   || {? R_WO.PO='K'
      || _Kal_Buf.KONIEC:=_Kal_Buf.KONIEC-R_WO.G;
         {? _Kal_Buf.KONIEC<*0
         || {? _Kal_Buf.DATA=_Kal_Buf.DATAW-1
            || _Kal_Buf.KONIEC:=time(24,0,0)+_Kal_Buf.KONIEC;
               _Kal_Buf.DATAW:=_Kal_Buf.DATAW-1
            || _Kal_Buf.POCZATEK:=_Kal_Buf.KONIEC:=_Kal_Buf.CZAS:=*0
            ?}
         ?}
      || _Kal_Buf.POCZATEK:=_Kal_Buf.POCZATEK+R_WO.G;
         {? _Kal_Buf.POCZATEK>time(24,0,0)
         || _Kal_Buf.POCZATEK:=_Kal_Buf.POCZATEK-time(24,0,0);
            _Kal_Buf.DATA:=_Kal_Buf.DATA+1
         ?}
      ?}
   ?}
?};
:: Sprawdzenie odpracowań
R_ODP.index('PRAC');
R_ODP.prefix(P.ref,_data);
{? R_ODP.first
|| _Kal_Buf.KONIEC:=_Kal_Buf.KONIEC+R_ODP.G;
   {? _Kal_Buf.KONIEC>time(24,0,0)
   || _Kal_Buf.KONIEC:=_Kal_Buf.KONIEC-time(24,0,0);
      _Kal_Buf.DATAW:=_Kal_Buf.DATAW+1
   ?}
?};
_Kal_Buf


\plan_we_wy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pk [21.14]
:: OPIS: Procedura ustala weścia i wyjścia względem grafiku lub planu.
::       Procedura korzysta z tabily nazwanej
::   WE: _a (DATE) - data badania
::       _b (OBJECT) - tablica nazwana dla poczatku i konca
::       _c (STRING) - typ parametru
::       [_d] (INT) - 0 - wszystko; 1 - początek; 2 - koniec
::   WY: 1 - dokonano modyfikacji rekordu / 0 - bez modyfikacji
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
_Kal_Buf:=_b;
_wynik:=0;
_typ:=_c;
_pocz_kon:={? var_pres('_d')=type_of(0) || _d ?};
_del:=0;

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(0) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

_podz:=exec('exist','plob_p',R_SPEC.P,'W',_data);
:: Obcięcie we/wy
{? R_SPEC.first()
|| _ok:=1;
   {! |? {? R_SPEC.ZM='D' || _ok:=R_SPEC.next() ?} !};
   {? _ok & (_pocz_kon=1 | _pocz_kon=0)
   ||
:: rozpoczęcie wczesniejsze od grafiku zakończenie po grafiku rozpoczęcia w tym samym dniu
      {? R_SPEC.ST=2 & R_SPEC.GD<_Kal_Buf.POCZATEK & R_SPEC.DZ=_Kal_Buf.DATA
      || {? R_SPEC.next()
         || {? ((R_SPEC.GD>_Kal_Buf.POCZATEK & R_SPEC.DZ=_Kal_Buf.DATA) |
               (R_SPEC.GD<_Kal_Buf.POCZATEK & R_SPEC.DZ-1=_Kal_Buf.DATA))
            || {? R_SPEC.prev()
               || _g_old:=R_SPEC.GD;
                  R_SPEC.GD:=_Kal_Buf.POCZATEK;
                  _wynik+={? R_SPEC.put(1)
                          || {? _podz || exec('cut','plob_p',R_SPEC.P,'W',_data,2,_g_old,_Kal_Buf.POCZATEK) ?};
                             1
                          || 0
                          ?}
               ?}
            || _del:=1
            ?}
         ?}
:: rozpoczęcie wczesniejsze od grafiku zakończenie po grafiku rozpoczęcia na przełomie dnia
      |? R_SPEC.ST=2 & R_SPEC.GD>_Kal_Buf.POCZATEK & R_SPEC.DZ=_Kal_Buf.DATA-1
      || {? R_SPEC.next()
         || {? R_SPEC.GD>_Kal_Buf.POCZATEK & R_SPEC.prev()
            || {? R_SPEC.prev()
               || _g_old:=R_SPEC.GD;
                  R_SPEC.GD:=_Kal_Buf.POCZATEK;
                  R_SPEC.DZ:=_Kal_Buf.DATA;
                  _wynik+={? R_SPEC.put(1)
                          || {? _podz || exec('cut','plob_p',R_SPEC.P,'W',_data,2,_g_old,_Kal_Buf.POCZATEK) ?};
                             1
                          || 0
                          ?}
               ?}
            || _del:=1
            ?}
         ?}
      ?};
:: usunięcie danych
      {? _typ='W' & _del
      || {? R_SPEC.first()
         || {! |?  R_SPEC.del(,1)=3 !}
         ?}
      ?}
   ?};

   {? R_SPEC.last()
   || _ok:=1;
      {! |? {? R_SPEC.ZM='D' || _ok:=R_SPEC.prev() ?} !};
      {? _ok & R_SPEC.ST=3
      || {? _pocz_kon=2 | _pocz_kon=0
         ||
:: zakończenie pracy po planowanym w grafiku dla tego samego dnia
            {? R_SPEC.GD>_Kal_Buf.KONIEC & R_SPEC.DZ=_Kal_Buf.DATAW
            || {? R_SPEC.prev()
               || {? ((R_SPEC.GD<_Kal_Buf.KONIEC & R_SPEC.DZ=_Kal_Buf.DATAW) |
                     (R_SPEC.GD>_Kal_Buf.KONIEC & R_SPEC.DZ=_Kal_Buf.DATAW-1))
                  || {? R_SPEC.next()
                     || _g_old:=R_SPEC.GD;
                        R_SPEC.GD:=_Kal_Buf.KONIEC;
                        _wynik+={? R_SPEC.put(1)
                                || {? _podz || exec('cut','plob_p',R_SPEC.P,'W',_data,3,_g_old,_Kal_Buf.KONIEC) ?};
                                   1
                                || 0
                                ?}
                     ?}
                  || _del:=1
                  ?}
               ?}
:: zakończenie pracy po planowanym w grafiku dla następnego dnia
            |? R_SPEC.GD<_Kal_Buf.KONIEC & R_SPEC.DZ-1=_Kal_Buf.DATAW
            || {? R_SPEC.prev()
            || {? (R_SPEC.GD<_Kal_Buf.KONIEC & R_SPEC.DZ=_Kal_Buf.DATAW)
                  || {? R_SPEC.next()
                     || _g_old:=R_SPEC.GD;
                        R_SPEC.GD:=_Kal_Buf.KONIEC;
                        _wynik+={? R_SPEC.put(1)
                                || {? _podz || exec('cut','plob_p',R_SPEC.P,'W',_data,3,_g_old,_Kal_Buf.KONIEC) ?};
                                   1
                                || 0
                                ?}
                     ?}
                  || _del:=1
                  ?}
               ?}
            ?}
         ?};
:: usunięcie danych
         {? _typ='W' & _del
         || {? R_SPEC.first()
            || {! |?  R_SPEC.del(,1)=3 !}
            ?}
         ?}
      ?}
   ?};
   {? _typ='W' & _del
   || R_REJ_WW.cntx_psh();
      {! _ind:=-1..1
      |! _Mask:=MASK.Name('R_REJ_WW',(_data+_ind)~1,(_data+_ind)~2);
         {? R_REJ_WW.name()<>_Mask
         || R_REJ_WW.use(_Mask);
            R_REJ_WW.clear()
         ?};
         R_REJ_WW.index('R_REJ_WX');
         R_REJ_WW.prefix(P.ref(),_data);
         {? R_REJ_WW.first()
         || {! |? R_REJ_WW.del() !}
         ?}
      !};
      R_REJ_WW.cntx_pop()
   ?}
?};
{? _mydo || end() ?};
_wynik


\ustaw_trigger
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Ustawienie trigerów związanych z aktualizacją tabeli R_OPCZYT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R_OPCZYT.trig_b('del',"exec('r_opczyt_del_b','prc_wewy')",'kal_buff_czyt')


\r_opczyt_del_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.14]
:: OPIS: Trigger przed usuń dla tabeli R_OPCZYT
::  TAG: <TRIGGER>
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_sql:=''+"select COUNT (DISTINCT KAL_BUFF.OPIS) as ILE from @KAL_BUFF where KAL_BUFF.GPW='Z' and KAL_BUFF.OPIS=:_a";
_result:=sql(_sql,R_OPCZYT.ref()).ILE=0;
{? _result
|| _sql:=''+"select COUNT (DISTINCT R_REJ_WW.CZ) as ILE from @R_REJ_WW where R_REJ_WW.CZ=':_a'";
   _result:=sql(_sql,R_OPCZYT.K).ILE=0
?};
{? ~_result
|| FUN.emsg('Nie można usunąć wybranego źródła danych.\nIstnieją powiązane z nim zapisy.'@)
?};
_result


\przerwa_niepl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51_24]
::  MOD: MicKoc [22.26]
:: OPIS: Wprowadzenie zapisów przerwy niepłatnej
::       UWAGA!!! - kontekst pracownika musi być ustawiony
::   WE: _a [DATE]   - data przerwy
::       _b [DATE]   - data kwalifikacji
::       _c [STRING] - czytnik
::       _d [TIME]   - godzina rozpoczęcia przerwy
::       _e [TIME]   - czas trwania przerwy
::   WY: 0/1
::  OLD: \przerwa_niepl/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_p_data:={? var_pres('_a')=type_of(#0) || _a || return(_result) ?};
_d_kwal:={? var_pres('_b')=type_of(#0) || _b || return(_result) ?};
_czytnik:={? var_pres('_c')=type_of('') || _c || return(_result) ?};
_p_start:={? var_pres('_d')=type_of(*0) || _d || return(_result) ?};
_p_czas:={? var_pres('_e')=type_of(*0) || _e || return(_result) ?};

R_REJ_WW.cntx_psh();
_R_SPEC:=sql('select * from R_REJ_WW where 1=2');
_R_SPECK:=_R_SPEC.ndx_tmp(,1,'DZK',,,'DZ',,,'GD',,,'ST',,);
_R_SPEC.index(_R_SPECK);
exec('wpisz_ts_tmp','prc_wewy',_d_kwal,_R_SPEC);
MASK.Use('R_REJ_WW',_p_data~1,_p_data~2);
R_WEWY.cntx_psh();
R_WEWY.index('R_TR_MOD');
R_WEWY.prefix();
R_REJ_WW.index('R_REJ_WW');
R_REJ_WW.prefix(P.ref(),_p_data);

_add:="MASK.Use('R_REJ_WW',_a~1,_a~2);
       R_REJ_WW.blank(1);
       R_REJ_WW.P:=P.ref();
       R_REJ_WW.GD:=_c;
       R_REJ_WW.DZ:=_a;
       R_REJ_WW.DZK:=_b;
       R_REJ_WW.CZ:=_d;
       R_REJ_WW.ZM:=_f;
       {? R_WEWY.find_key(_e,0)
       || R_REJ_WW.TP:=R_WEWY.TP;
          R_REJ_WW.ST:=R_WEWY.ST;
          R_REJ_WW.RD:=R_WEWY.RD
       ?};
       R_REJ_WW.cntx_psh();
       R_REJ_WW.prefix();
       _wyn:=R_REJ_WW.add(1);
       R_REJ_WW.cntx_pop();
       _wyn
      ";
_polnoc:=_polnoc1:=0; _g24:=time(24,0,0);
_p_end:=_p_start+_p_czas;
{? _p_end>_g24
|| _p_end_n:=_p_end-_g24;
   _p_end:=_g24;
   _p_d_n:=(_p_data+1);
   _p_st_n:=*0;
   _polnoc1:=_polnoc:=1
?};

{!
|?
:  pobierz informacje o przerwach poprzez tabelę
   {? var_pres('_tab')>100 || obj_del(_tab) ?};
   _tab:=exec('przerwa_npl_1','prc_wewy',_R_SPEC,_p_data,_p_start,_p_end);
:  wprowadzenie zapisów przerw do R_REJ_WW
   {? _tab.first()
   || {!
      |? _result+=1;
         _add(_p_data,_d_kwal,_tab.GRP,_czytnik,1,'N');
         _add(_p_data,_d_kwal,_tab.GZP,_czytnik,0,'N');
         _tab.next()
      !}
   ?};
   {? _polnoc || _p_data:=_p_d_n; _p_start:=_p_st_n; _p_end:=_p_end_n; _polnoc:=0;  1 ?}
!};

:: przerwa na przełomie doby
:: normalizacja zapisów przerwy oraz systemowych dotyczących przełomu dnia
{? _polnoc1
|| _del:="
      {? R_REJ_WW.first()
      || {!
         |? {? 'SN'*R_REJ_WW.ZM
            || R_REJ_WW.del(,1)=2
            || R_REJ_WW.next()
            ?}
         !}
      ?}";
:: usuwamy zapisy dodane automatycznie dla wy/we o północy
   MASK.Use('R_REJ_WW',(_p_data-1)~1,(_p_data-1)~2);
   R_REJ_WW.index('R_REJ_WW');
   R_REJ_WW.prefix(P.ref(),_p_data-1,_g24);
   _del();
   MASK.Use('R_REJ_WW',_p_data~1,_p_data~2);
   R_REJ_WW.index('R_REJ_WW');
   R_REJ_WW.prefix(P.ref(),_p_data,*0);
   _del()
?};
R_WEWY.cntx_pop();
R_REJ_WW.cntx_pop();
_result


\wpisz_ts_tmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wypełnienie tabeli tymczasowej informacjami we/wy.
::   WE: _a - data kwalifikacji
::       _b - alias tabeli tymczasowej
::   WY:
::  OLD: \wpisz_ts_tmp/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_R_SPEC:=_b;
R_REJ_WW.cntx_psh();
_R_SPEC.prefix();
{? _R_SPEC.first()
|| {! |? _R_SPEC.del() !}
?};
{! _ind:=-1..1
|! {? _ind=-1
   || _rok:=_a~1; _mc:=_a~2+1; {? _mc>12 || _rok+=1; _mc:=1 ?};
      _data:=date(_rok,_mc,1)
   || _data:=date(_a~1,_a~2-_ind,1)
   ?};
   MASK.Use('R_REJ_WW',_data~1,_data~2);
   R_REJ_WW.index('R_REJ_WX'); R_REJ_WW.prefix(P.ref(),_a);
   {? R_REJ_WW.first()
   || {!
      |? _R_SPEC.blank();
         _R_SPEC.CZ:=R_REJ_WW.CZ;
         _R_SPEC.DZ:=R_REJ_WW.DZ;
         _R_SPEC.GD:=R_REJ_WW.GD;
         _R_SPEC.ST:=R_REJ_WW.ST;
         _R_SPEC.TP:=R_REJ_WW.TP;
         _R_SPEC.RD:=R_REJ_WW.RD;
         _R_SPEC.ZM:=R_REJ_WW.ZM;
         _R_SPEC.DZK:=R_REJ_WW.DZK;
         _R_SPEC.add(1);
         R_REJ_WW.next()
      !};
      _R_SPEC.first()
  ?}
!};
R_REJ_WW.cntx_pop()


\przerwa_npl_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wprowadzenie zapisów przerw niepłatnych do tabeli tymczasowej
::   WE: _a -tabela we/wy
::       _b - data przerwy
::       _c - godzina rozpoczęcia przerwy
::       _d - godzina zakończenia przerwy
::   WY: tabela z informacjami o przerwach
::  OLD: \przerwa_npl_1/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_do:=time(99,0,0);
_dzien:=_b;
_pocz:=_c;
_koniec:=_d;
_tab:=tab_tmp(2,
   'DWE','DATE','Data wejścia',
   'GWE','TIME','Godzina wejścia',
   'DWY','DATE','Data wyjścia',
   'GWY','TIME','Godzina wyjścia',
   'DRP','DATE','Data rozpoczęcia przerwy',
   'DZP','DATE','Data zakończenia przerwy',
   'GRP','TIME','Godzina rozpoczęcia przerwy',
   'GZP','TIME','Godzina zakończenia przerwy'
   );
_add:="
   _tab:=_b;
   _od:=_c;
   _do:=_d;
   _pocz:=_e;
   _koniec:=_f;
   _tab.blank(1);
   _tab.DWE:=_a.DZ;
   _tab.GWE:=_od;
   _tab.DWY:=_a.DZ;
   _tab.GWY:=_do;
   _tab.DRP:=_a.DZ;
   _tab.DZP:=_a.DZ;
   _tab.GRP:=_pocz;
   _tab.GZP:=_koniec;
   _tab.add(1)";

:: uzupełnienie danymi tabeli z przerwami interpretowane są wszystkie zapisy o kodach 2 i 3 oprócz zmiany typu 'D'
{? _a.first()
|| {!
   |? {? _a.ST=2 & _a.DZ=_dzien & _a.ZM<>'D'
      || _od:=_a.GD;
         {!
         |? {? _a.ST=3 & _a.DZ=_dzien &  & _a.ZM<>'D'
            || _do:=_a.GD; 0
            || _a.next
            ?}
         !};
         {? _do<>time(99,0,0)
         || {? _pocz>=_od & _koniec<=_do & _pocz<=_do & _koniec>=_od
            || _add(_a,_tab,_od,_do,_pocz,_koniec)
            |? _pocz<=_od & _koniec<_do & _koniec>_od
            || _add(_a,_tab,_od,_do,_od,_koniec)
            |? _pocz>_od & _pocz<_do & _koniec>=_do
            || _add(_a,_tab,_od,_do,_pocz,_do)
            |? _pocz<=_od & _koniec>=_do
            || _add(_a,_tab,_od,_do,_od,_do)
            ?}
         ?}
      ?};
      _a.next()
   !}
?};
_tab


\start_stop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wykaz zarejestrowanych na portalu informacji o rozpoczęciu i zakończeniu pracy w danym dniu pracy.
::       Założenia: podany zakres dni dotyczy jednego miesiąca kalendarzowego.
::   WE: _a [DATE] - badany dzień
::       _b [_P]   - P.ref
::       _c [object] - tablica komunikatów
::   WY: 1/0
::  OLD: \start_stop/rejestrw.fml
::----------------------------------------------------------------------------------------------------------------------
_komm:=_c;
_data:=_a;
_P:=_b;
_year:=($(_data~1))+2;
_month:={? (_mc:=_data~2)>=10 || $_mc || '0%1'[$_mc] ?};
R_POR_WW.use('r_ph%1%2'[_year,_month]);
R_POR_WW.index('NR');
R_POR_WW.prefix(_P,_data);
_wyn:=_nr:=0;
P.cntx_psh();
P.prefix();
PPSFT.cntx_psh();
PPSFT.prefix();
{? R_POR_WW.first()
|| exec('usun_wewy','prc_wewy',_P,R_POR_WW.DZ~1,R_POR_WW.DZ~2,1,R_POR_WW.DZ,,1);
   {!
   |? {? R_POR_WW.TP='WE'
      || _we_d:=R_POR_WW.DZ;
         _we_t:=R_POR_WW.GD;
         _d_kw:=R_POR_WW.DZK;
         _nr:=R_POR_WW.NR
      || {? _nr=R_POR_WW.NR
         || _nr:=0;
            _wy_d:=R_POR_WW.DZ;
            _wy_t:=R_POR_WW.GD;
            {? P.seek(R_POR_WW.P)
            || _OSOBA:=P.OSOBA
            || _OSOBA:=null
            ?};
            {? _d_kw<>#0 & PPSFT.seek(R_POR_WW.PPSFT) & PPSFT.GEN_G='W'
            || _wyn+=_wyn_b:=exec('save2wewy','prc_wewy',_P,_we_d,_we_t,_wy_d,_wy_t,,,_OSOBA,'SYS_5',,,,_d_kw,1);
               {? _wyn_b
               || KOMM.chngroot(_komm.lpadd,_komm.ok)
               || _komm.chempty+=1;
                  KOMM.chngroot(_komm.lpadd,_komm.change)
               ?}
            || _komm.lwidout+=1;
               KOMM.chngroot(_komm.lpadd,_komm.widout)
            ?}
         ?}
      ?};
      R_POR_WW.next()
   !};
   {? _nr
   || _komm.lwidout+=1;
      KOMM.chngroot(_komm.lpadd,_komm.widout)
   ?}
?};
PPSFT.cntx_pop();
P.cntx_pop();
_wyn


\usun_r_spec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Usuwa zapisy z tabeli R_SPEC dla wskazanego współpracownika w zakresie podanych dat
::   WE: _a [REFERENCE] - wskazanie na współpracownika
::       _b [DATA]      - data początkowa
::       _c [DATA]      - data końcowa
::   WY: 0/1
::  OLD: \usun_r_spec/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
  _p_ref:={? var_pres('_a')=type_of(null()) || _a || return(0) ?};
_data_od:={? var_pres('_b')=type_of(date()) || _b || return(0) ?};
_data_do:={? var_pres('_c')=type_of(date()) || _c || return(0) ?};

_data:={? _data_od=_data_do || _data_od || #0 ?};
_dzien:=#_data;

:: usuwamy dane po dacie zapisu
R_SPEC.index('R_SPECD');
{? _dzien || R_SPEC.prefix(_p_ref,_data) || R_SPEC.prefix(_p_ref) ?};
{? R_SPEC.first()
|| {? _dzien
   || {! |? R_SPEC.del() !}
   || {! _ind:=#_data_od .. #_data_do
      |! R_SPEC.prefix(_p_ref,#_ind);
         {? R_SPEC.first() || {! |? R_SPEC.del() !} ?}
      !}
   ?}
?};

:: usuwamy dane po dacie kwalifikacji
R_SPEC.index('R_SPECK');
{? _dzien || R_SPEC.prefix(_p_ref,_data) || R_SPEC.prefix(_p_ref) ?};
{? R_SPEC.first()
|| {? _dzien
   || {! |? R_SPEC.del() !}
   || {! _ind:=#_data_od .. #_data_do
      |! R_SPEC.prefix(_p_ref,#_ind);
         {? R_SPEC.first() || {! |? R_SPEC.del() !} ?}
      !}
   ?}
?};
1

:Sign Version 2.0 jowisz:1045 2024/02/23 12:11:54 e17373e56e23f48ad35c882d44d633c004e461297895124c6d1b6e05290460e2c4ae7bef7077d3d2f2927985107f2fd21526abdf36d9ac7c5a8827f9ac85f5285618b4e253684904390bf4ec09dd6d87eca8df6f50c5a380bb58482685a53759a2c62cb845922940a8e54a11ce480a56d275a596f75580ba8c672729eb171477
