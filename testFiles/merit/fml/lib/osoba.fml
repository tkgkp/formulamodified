:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: osoba.fml
:: Utworzony: 26.03.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Plik zawiera formuły obsługi tabeli OSOBA i tabel z nią powiązanych.
::======================================================================================================================


\osoba_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli OSOBA.
::   WE: _a [REFERENCE] - Wskazanie poprawianego rekordu lub null() dla dołączanego.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('osoba_identyf_set','osoba');

{? ~exec('osoba_osoba','osoba',_a) & PAR_SKID.get(264)='T'
|| undo('Próba dodania rekordu o nieunikalnym kluczu do tabeli %1.'@ ['OSOBA']);
   return(0)
?};

: Porządki - zerowanie pól, które są "niedostępne".
_no:=exec('nieobcy','osoba');
{? _no
|| exec('blank','#field',OSOBA,,'KARTA')
?};
{? OSOBA.KARTA='N'
|| exec('blank','#field',OSOBA,,'KP','ORG_KP','DWY_KP','DWA_KP')
?};

1


\osoba_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli OSOBA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('osoba_modb','osoba',null())


\osoba_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza po dołączeniu rekordu tabeli OSOBA. Tworzy zapis dotyczący ochrony danych osobowych.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('zapisz','giodo','osoba',OSOBA.ref(),date(),'W');
~~


\osoba_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli OSOBA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('osoba_modb','osoba',OSOBA.ref())


\osoba_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza po poprawieniu rekordu tabeli OSOBA. Aktualizuje zapis dotyczący ochrony danych osobowych.
::       Formuła zastępuje dotychczasową funkcjonalność ręcznego wywoływania zapisu z informacją z modyfikacji
::       danych.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY: ~~
::  OLD: \popraw/skid_gio.fml
::  OLD: \pop/skid_gio.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

: Zmiany wartości niektórych pól nie wymagają odnotowania. Poniżej lista takich pól oddzielona przecinkami.
: Lista zaczyna się i kończy przecinkiem.
_pomin:=',KALI,REJ_DATA,REJ_KTO,REJ_INFO,IMEX,KWW_NAZ,KWW_IM,KWW_TEL,KWW_MAIL,IDENTYF,GRP_KEY,IDPUT,';

_zmiana:='';
{! _lp:=1 .. OSOBA.fld_num()
|! _acr:=OSOBA.fld_acr(_lp);
   {? _pomin*(','+_acr+',')=0
   || _wb:=bfld(_acr);
      _wa:=($('_a.'+_acr))(OSOBA);
      {? _wb<>_wa
      || _vp:=var_pres(_acr,OSOBA);
         {? _vp=27
:           Napisy - bez konwersji.
         || _wbs:=_wb;
            _was:=_wa
         |? _vp=26
:           Pole zrelacjonowane.
         || _wbs:=exec('record','#to_string',_wb);
            _was:=exec('record','#to_string',_wa)
:           Reszta - standardowa konwersja na napis.
         || _wbs:=$_wb;
            _was:=$_wa
         ?};
         _zmiana+='\n'+OSOBA.fld_name(_lp)+' Było: ['+_wbs+'] Jest: ['+_was+']'
      ?}
   ?}
!};
{? _zmiana<>''
|| exec('zapisz','giodo','osoba',OSOBA.ref(),date(),'M','Zakres zmian: '+_zmiana)
?};

P.cntx_psh();
P.index('OSOBA');
:: Symulacja zmiany na poziomie P.
{? _zmiana<>'' & exec('lic','#b_domain','POR')
|| P.prefix(OSOBA.ref());
   {? P.first()
   || P.trig_off('put','*');
      {!
      |? P.put(,1);
         P.next()
      !};
      P.trig_on('put','*')
   ?}
?};
:: Pielęgnacja informacji o zmianach - umożliwienie odświeżenia widoku pracowników.
P.prefix(OSOBA.ref(),exec('ref_firma','ustawienia'));
{? P.first()
|| exec('last_mod_set','#table',P)
?};
P.cntx_pop();

:: Zmiany w słownikach użytkownika i danych dziedzin zarządzania kapitałem ludzkim
{? bfld('NAZWISKO')<>OSOBA.NAZWISKO |
   bfld('RODOWE')<>OSOBA.RODOWE |
   bfld('PIERWSZE')<>OSOBA.PIERWSZE |
   bfld('DRUGIE')<>OSOBA.DRUGIE |
   bfld('PLEC')<>OSOBA.PLEC |
   bfld('PESEL')<>OSOBA.PESEL
|| exec('pop_slo','slo_slu','OSOBA');
   SLO_OSOB.cntx_psh;
   ZZ_OSOBA.cntx_psh();
   OS.cntx_psh();
   OS.index('OSOBA');
   OS.prefix(OSOBA.ref());
   {? OS.first()
   || exec('pop_slo','slo_slu','OS')
   ?};
   P.cntx_psh();
   P.index('OSOBA');
   P.prefix(OSOBA.ref());
   _loop:=P.first();
   {!
   |? _loop
   |! SLO_OSOB.index('ID');
      SLO_OSOB.prefix(P.F_ZATR);
      {? SLO_OSOB.find_key(P.IP)
      || exec('pop_slo','slo_slu','SLO_OSOB')
      ?};
      {? P.ZZ_DOK<>null
      || _dok:=P.ZZ_DOK;
         ZZ_OSOBA.index('ZZ_LINK');
         ZZ_OSOBA.prefix(ref_name(_dok),_dok);
         _loop:=ZZ_OSOBA.first();
         {!
         |? _loop
         |! ZZ_OSOBA.NAZWISKO:=OSOBA.NAZWISKO;
            ZZ_OSOBA.RODOWE:=OSOBA.RODOWE;
            ZZ_OSOBA.PIERWSZE:=OSOBA.PIERWSZE;
            ZZ_OSOBA.DRUGIE:=OSOBA.DRUGIE;
            ZZ_OSOBA.PLEC:=OSOBA.PLEC;
            ZZ_OSOBA.PESEL:=OSOBA.PESEL;
            ZZ_OSOBA.put();
            _loop:=ZZ_OSOBA.next()
         !}
      ?};
      _loop:=P.next()
   !};
   ZZ_OSOBA.cntx_pop();
   SLO_OSOB.cntx_pop();
   OS.cntx_pop();
   P.cntx_pop()
?};

{? OSOBA.NAZWISKO<>bfld('NAZWISKO') |
   OSOBA.PIERWSZE<>bfld('PIERWSZE')
:: aktualizuj zależności służbowe
|| exec('aktualizuj','zs_def',OSOBA.ref())
?};

{? bfld('PESEL')='' & bfld('DOWOD')='' & bfld('PASZPORT')='' &
   (OSOBA.PESEL<>'' | OSOBA.DOWOD<>'' | OSOBA.PASZPORT<>'') & exec('lic','#b_domain','PED')
:: Aktualizacja metadanych w dokumentacji pracownika.
|| ZALACZ.cntx_psh();
   ZALACZ.index('S1');
   ZALACZ.prefix(OSOBA.ref());
   {? ZALACZ.first()
   || {!
      |? exec('zaomeda_update','zalacz','ZALACZ','o');
         ZALACZ.next()
      !}
   ?};
   ZALACZ.cntx_pop()
?};
~~


\osoba_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza przed usunięciem rekordu tabeli OSOBA.
::   WE:
::   WY: 1 - Właściwa akcja może zostać wykonana.
::       0 - Usunięcie rekordu nie jest możliwe.
::  OLD: \restrict/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
:: Uwaga. Ze względu na powiązania usuwanych rekordów istotna jest kolejność wywołań.
:: P musi być przed OS_DNAUK.

exec('del_ndx','#table',P,'OSOBA',OSOBA.ref()) &
exec('del_ndx','#table',GIODO,'GIODDATA',OSOBA.ref()) &
exec('del_ndx','#table',OS_US,'OD',OSOBA.ref()) &
exec('del_ndx','#table',OS_ADRES,'OD',OSOBA.ref()) &
exec('del_ndx','#table',OS_NOTKA,'DATA',OSOBA.ref()) &
exec('del_ndx','#table',OS_PAB,'OSOBAOD',OSOBA.ref()) &
exec('del_ndx','#table',OS_ROR,'OS_ROR',OSOBA.ref()) &
exec('del_ndx','#table',OS_SZKOL,'OD',OSOBA.ref()) &
exec('del_ndx','#table',OS_TYT,'UNIQ',OSOBA.ref()) &
exec('del_ndx','#table',OV_UPR,'OSOBA2',OSOBA.ref()) &
exec('del_ndx','#table',OS_VIEW,'OSOZATR',OSOBA.ref()) &
exec('del_ndx','#table',OS_ZNIP,'OSOBAOD',OSOBA.ref()) &
exec('del_ndx','#table',OS_DNAUK,'OSDTTYP',OSOBA.ref()) &
exec('del_tmp','#table',P_INFO,'OSOBA',OSOBA.ref()) &
exec('del_ndx','#table',PIT12O,'ORP',OSOBA.ref()) &
exec('del_ndx','#table',PKO,'_PKO',OSOBA.ref()) &
exec('del_ndx','#table',RD,'_RODZINA',OSOBA.ref()) &
exec('del_pow_rbk','osoba') &
exec('del_ndx','#table',SKID_RBK,'RD',null(),REF.FIRMA().SYMBOL+'OSOBA',#OSOBA.ref()) &
exec('del_ndx','#table',SLO_OSOB,'OSOBA',OSOBA.ref()) &
exec('del_tmp','#table',STAZ,'OSOBA',OSOBA.ref()) &
exec('del_ndx','#table',ULGI_POD,'ULGIUS',OSOBA.ref()) &
exec('del_ndx','#table',WOJ,'_WOJSKO',OSOBA.ref()) &
exec('del_tmp','#table',ZALACZ,'OSOBA',OSOBA.ref()) &
exec('del_ndx','#table',ZJ,'JEZYK',OSOBA.ref()) &
exec('del_ndx','#table',ZUS_RAP,'ZUS_RAP',OSOBA.ref()) &
exec('del_ndx','#table',UPR_ZAWO,'OUN',OSOBA.ref()) &
exec('del_tmp','#table',KART_DOD,'OSOBA',OSOBA.ref()) &
exec('del_tmp','#table',STRST_P,'OSOBA',OSOBA.ref()) &
exec('del_ndx','#table',OS_ZWPOD,'OS_ZWPOD',OSOBA.ref())


\del_pow_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [18.22]
:: OPIS: Kasuje powiązania do rekordów w SKID_RBK dla osoby
::   WY: 1/0 - czy operacja się udała
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
_name:=EDOK_ZAL.names();
EDOKUMZ.cntx_psh(); EDOK_ZAL.cntx_psh();
SKID_RBK.cntx_psh(); SKID_RBK.index('RD'); SKID_RBK.prefix(null(),REF.FIRMA().SYMBOL+'OSOBA',#OSOBA.ref());
{? SKID_RBK.first()
|| {! |?
      {? _name.first()
      || {! |?
            EDOK_ZAL.use(_name.NAME); EDOK_ZAL.index('S1'); EDOK_ZAL.prefix(SKID_RBK.ref());
            EDOKUMZ.use('skid_n'+(EDOK_ZAL.name()+2)); EDOKUMZ.index('WYDATEK');
            {? EDOK_ZAL.first()
            || {! |?
                  EDOKUMZ.prefix(EDOK_ZAL.ref());
                  {? EDOKUMZ.first
                  || {! |?
                        _delr:=EDOKUMZ.del(,1);
                        {? _delr=1 || 0 |? _delr=0 || _zwrot:=0; 0 || 1 ?}
                     !}
                  ?};
                  {? _zwrot
                  || _delr:=EDOK_ZAL.del(,1);
                     {? _delr=1 || 0 |? _delr=0 || _zwrot:=0; 0 || 1 ?}
                  || 0
                  ?}
               !}
            ?};
            _zwrot & _name.next()
         !}
      ?};
      _zwrot & SKID_RBK.next()
   !}
?};
SKID_RBK.cntx_pop(); EDOKUMZ.cntx_pop(); EDOK_ZAL.cntx_pop();
_zwrot


\osoba_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła - "strażnik" programowej unikalności indeksu OSOBA. Zakłada prawidłowe wypełnienie bufora.
::   WE: _a [REFERENCE] - Wskazanie poprawianego rekordu lub null() dla dołączanego.
::   WY: 1 - Rekord nie narusza unikalności.
::       0 - Rekord narusza unikalność.
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;

_ok:=1;
OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix(OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.OBCY,OSOBA.IDENTYF,);
{? OSOBA.first()
|| {!
   |? {? OSOBA.ref()=_ref
      || OSOBA.next()
      || _ok:=0
      ?}
   !}
?};
OSOBA.cntx_pop();
_ok


\osoba_zadania_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zadania" w oknach wertowania tabeli OSOBA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',OSOBA.uidref())


\chk_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Formuła sprawdza, czy uprawnienia operatora zezwalają na wyświetlenie danych osobowych z bieżącego wiersza.
::  OLD: \wyswietl/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__PAR188')<1 || __PAR188:=PAR_SKID.get(188)='T' ?};
{? ~__PAR188
:  Jeżeli parametr 188 jest wyłączony (wyświetlanie danych osobowych nie jest blokowane) - nie sprawdzamy żadnych
:  uprawnień.
|| REF.OSOBA:=OSOBA.ref();
   return()
?};
exec('__F_ZATR','object');

: Jeżeli spełnione są następujące warunki:
:  - właścicielem ostatniego zapisu w "operacjach na danych osobowych" jest bieżący użytkownik;
:  - osoba nie jest wykorzystywana w tabeli P;
: to użytkownik będzie miał dostęp do danych osobowych.
_ok:=0;
_typ:='osoba';
GIODO_ED.TYP==_typ;
GIODO.cntx_psh();
GIODO.index('GIODDATA');
GIODO.prefix(OSOBA.ref());
GIODO.blank();
_oper:=GIODO.OPER;
_ok+=_oper<>'' & GIODO.last() & GIODO.OPER=_oper;
GIODO.cntx_pop();
GIODO_ED.TYP==_typ;

P.cntx_psh();
P.index('OSOBA');
P.prefix(OSOBA.ref(),exec('ref_firma','ustawienia'));
_ok+=~P.first();
P.cntx_pop();
{? _ok=2
|| REF.OSOBA:=OSOBA.ref();
   return()
?};

: Jeżeli użytkownik ma dostęp do choć jednej jednostki organizacyjnej współpracownika związanego z bieżącą osobą,
: to może mieć dostęp do danych osobowych.
REF.OSOBA:=null();
F_ZATR.cntx_psh();
UDB_UPR.cntx_psh();
UDB_UPR.index('FK_USR');
UDB_UPR.prefix(OPERATOR.USER,'T');
P.cntx_psh();
P.index('OSOBA');
P.prefix(OSOBA.ref(),exec('ref_firma','ustawienia'));
_next:=P.first();
{!
|? REF.OSOBA=null() & _next
|! {? __F_ZATR.upr(exec('dest','f_zatr',P.F_ZATR,'KOD')) &
      UDB_UPR.find_tab(0,'UD_SKL',,'=',P.WYDZIAL)
   || REF.OSOBA:=P.OSOBA
   || _next:=P.next()
   ?}
!};
P.cntx_pop();
UDB_UPR.cntx_pop();
F_ZATR.cntx_pop();
~~


\nieobcy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Kryterium określające, czy dana osoba jest obcokrajowcem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.OBCY='N'


\osoba_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła realizuje programowy słownik osób. Opcjonalne parametry wejściowe służą wskazaniu osoby, od której
::       rozpocznie sie wertowanie. Parametry są przetwarzane sekwencyjnie - nie ma sensu podawania parametru _b, jeżeli
::       nie został podany parametr _a.
::   WE: [_a] [STRING] - Nazwisko.
::       [_b] [STRING] - Imię.
::       [_c] [STRING] - Obcokrajowiec.
::       [_d] [STRING] - Identyfikator.
::   WY: Wskazanie wybranej osoby lub null().
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();

:: Zapamiętanie kontekstu wywołania.
_ref:=null();
REF.OSOBA==_ref;
_buf:=exec('save_fml_type','#field',OSOBA,'BEFORE_DISPLAY');
:: Ustawienie standardowych formuł.
exec('set_fml_type','#field',OSOBA,'BEFORE_DISPLAY',"*");

OSOBA.cntx_psh();
OSOBA.index('OSOBA');
OSOBA.prefix();
{? _
|| _keys:='';
   _tstring:=type_of(_keys);
   _lp:=0;
   {!
   |? (_lp+=1)<=_ & type_of(_[_lp])=_tstring & _[_lp]<>''
   |! _keys+=',\''+_[_lp]+'\''
   !};
   {? _keys<>''
   || ($('OSOBA.find_key('+(1-_keys)+')'))()
   ?}
?};
OSOBA.win_sel('WYB');
{? OSOBA.select(,1)
|| _ret:=OSOBA.ref()
?};
OSOBA.cntx_pop();

:: Odtworzenie kontekstu wywołania.
exec('restore_fml_type','#field',OSOBA,'BEFORE_DISPLAY',_buf);
REF.OSOBA==_ref;

_ret


\rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła udostępnia opis rodzaju adresu na podstawie jego kodu.
::   WE: _a [STRING] - Kod rodzaju adresu [domyślnie: OS_ADRES.RODZAJ].
::   WY: Opis rodzaju adresu.
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') & (+_a=1 | _a='') || _a || OS_ADRES.RODZAJ ?};
{? _kod=''  || '- Brak adresu -'@
|? _kod='S' || 'Zameldowania'@
|? _kod='C' || 'Zamieszkania'@
|? _kod='K' || 'Do korespondencji'@
|? _kod='I' || 'Inny'@
|| 'Nieokreślony'@
?}


\szukaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Formuła wyszukuje odpowiedni adres osoby.
::   WE: [_a] [STRING] - Typ adresu - dozwolone wartości:
::             S - Stały [domyślnie];
::             C - Pobyt czasowy;
::             K - Do korespondencji;
::             I - Inny.
::       [_b] [DATE]   - Data [domyślnie: bieżąca]
::   WY: OS_ADRES.ref() jeśli wyszukanie adresu powiodło się.
::       null() jeśli adres nie został odnaleziony.
::  OLD: \szukaj/adres.fml
::---------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & +_a || _a || 'S' ?};
_dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};

OS_ADRES.index('RODZAJ');
OS_ADRES.prefix(OSOBA.ref(),_typ);
{? OS_ADRES.find_le(_dt) & (OS_ADRES.DO=date(0,0,0) | _dt<=OS_ADRES.DO) || OS_ADRES.ref() || null() ?}


\ulica
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Na podstawie bieżącego adresu osoby, tworzy tekst zawierający nazwę ulicy z numerem domu i lokalu.
::   WE:
::   WY:
::  OLD: \ulica/adres.fml
::----------------------------------------------------------------------------------------------------------------------
{? +OS_ADRES.ULICA || OS_ADRES.ULICA || OS_ADRES.MIASTO ?}+' '+
OS_ADRES.DOM+{? |OS_ADRES.LOKAL='' || '' || ' m. '+OS_ADRES.LOKAL ?}


\poczta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Na podstawie bieżącego adresu osoby, tworzy tekst zawierający kod pocztowy i nazwę urzędu pocztowego.
::   WE:
::   WY:
::  OLD: \poczta/adres.fml
::----------------------------------------------------------------------------------------------------------------------
OS_ADRES.KOD+' '+{? |OS_ADRES.POCZTA='' || OS_ADRES.MIASTO || OS_ADRES.POCZTA ?}


\adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Formuła podaje pełny adres osoby.
::   WE: [_a] [STRING] - Typ adresu - dozwolone wartości:
::             S - Stały [domyślnie];
::             C - Pobyt czasowy;
::             K - Do korespondencji;
::             I - Inny.
::       [_b] [DATE] - Data [domyślnie: bieżąca]
::   WY: Tekst określający adres w postaci: KOD MIASTO, ULICA DOM m. LOKAL
::  OLD: \adres/adres.fml
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || 'S' ?};
_dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};

{? ~exec('szukaj','osoba',_typ,_dt) || return('') ?};

exec('form_adres','osoba')


\form_adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formatuje dane adresowe.
::   WY: Tekst określający adres w postaci: KOD MIASTO, ULICA DOM m. LOKAL
::----------------------------------------------------------------------------------------------------------------------
_poczta:=exec('poczta','osoba');
_ulica:=exec('ulica','osoba');

{? |OS_ADRES.POCZTA<>'' & |OS_ADRES.POCZTA<>|OS_ADRES.MIASTO & +OS_ADRES.ULICA
|| _poczta+=', '+OS_ADRES.MIASTO
?};

_poczta+{? +_poczta & +_ulica || ', ' || '' ?}+{? +_ulica || _ulica || '' ?}


\adresdous
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Adres do celów rozliczeń podatkowych.
::       Zakłada się, iż bufor osoby jest właściwie ustawiony w chwili wywołania.
::       W przypadku braku przypisania adresu do celów podatkowych do właściwego rekordu urzędu skarbowego podatnika
::       adres poszukiwany jest zgodnie z dotychczasową metodą jego ustalania.
::   WE: _a [INTEGER] - rok
::   WY: '10' - ustalenie adresu powiodło się (ustawiony bieżący rekord OS_ADRES), urząd skarbowy nieustalony
::       '01' - nie ustalono adresu, ustalono urząd skarbowy
::       '11' - ustalono poprawnie adres i urząd skarbowy
::       '00' - ustalenie adresu i urzędu skarbowego nie powiodło sie
::  OLD: \adresdous/adres.fml
::----------------------------------------------------------------------------------------------------------------------
_wynus:=_wynad:=0;
_dt:=date(_a,12,0);
{? exec('szukaj_us','osoba',_dt)
|| _wynus:=1;
   {? OS_US.OS_ADRES
   || OS_US.OS_ADRES();
      _wynad:=1
   ?}
?};
{? ~_wynad
|| {? exec('szukaj','osoba','C',_dt)
    | exec('szukaj','osoba','S',_dt)
   || _wynad:=1
   ?}
?};
$_wynad+$_wynus


\szukaj_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Funkcja wyszukuje zapis w tabeli OS_US dla podanej daty
::   WE:  _a - data
::   WY:  ref  OS_US lub null
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date) || _a:=date() ?};
OS_US.index('OD');
OS_US.prefix(OSOBA.ref());
{? OS_US.find_le(_a) || OS_US.ref || null ?}


\os_us_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Obsługa akcji "Okienko po". Przepisanie ostatniego urzędu skarbowego z tabeli OS_US do pola OSOBA.US.
::   WE:
::  OLD: \aktu_us/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
OS_US.cntx_psh();
OS_US.index('OD');
OS_US.prefix(OSOBA.ref());
_us:={? OS_US.last() || OS_US.US || null() ?};
{? OSOBA.US<>_us || OSOBA.US:=_us; OSOBA.put(1) ?};
OS_US.cntx_pop();
1


\x_od_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [KGS] [2011]
:: OPIS: Wartość początkowa pola OD dla tabel związanych z OSOBA, przy pustej dziedzinie. Formuła wymaga aby prawidłowo
::       ustawione były:
::        - bufor tabeli OSOBA;
::        - indeksy i prefiksy redagowanej tabeli.
::  OLD: \datakali/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=date();
{? OSOBA.KALI='T' & type_of(cur_tab(1,1))=type_of(OSOBA) & cur_tab(1,1).size()=0
|| P.cntx_psh();
   P.index('PRACOSOW');
   P.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
   {? P.last()
   || _ret:=P.DZA
   ?};
   P.cntx_pop()
?};
_ret


\os_adres_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła konfigurująca sposób obsługi tabeli OS_ADRES.
::   WE: [_a] [STRING] - Zakres konfiguracji:
::          'BLANK' - Ustawienie formuł na wartość początkową [domyślnie].
::          _b - Tryb pracy:
::             'OSOBA'  - Adresy osoby.
::             ''       - Przywrócenie standardowej obsługi [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_akcja:={? var_pres('_a')=type_of('') & _a='BLANK' || _a || 'BLANK' ?};

{? _akcja='BLANK'
|| _tryb:={? var_pres('_b')=type_of('') || _b || '' ?};
   {? _tryb='OSOBA'
   || OS_ADRES.fld_fml('OSOBA','BLANK',"OSOBA.ref()");
      OS_ADRES.fld_fml('KH','BLANK',"null()");
      OS_ADRES.fld_fml('RODZAJ','BLANK',"'S'")
   |? _tryb='KH'
   || OS_ADRES.fld_fml('OSOBA','BLANK',"null");
      OS_ADRES.fld_fml('KH','BLANK',"KH.ref()");
      OS_ADRES.fld_fml('RODZAJ','BLANK',"'H'")
   |? _tryb=''
   || OS_ADRES.fld_fml('RODZAJ','BLANK',"*");
      OS_ADRES.fld_fml('KH','BLANK',"*");
      OS_ADRES.fld_fml('OSOBA','BLANK',"*")
   ?}
?}


\osoba_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli OSOBA. Formuła wywoływana jest w dwóch
::       kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(OSOBA)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='OBCY'
|| _val:=exec('nieobcy','osoba');
   {? PAR_SKID.get(264)='T' || _tab.efld_opt(_we,'mark='+$_val,OSOBA,'PESEL') ?};
   _tab.efld_opt(_we,'mark='+$(~_val),OSOBA,'OBYWATEL');
   _tab.efld_opt(_we,'mark='+$(~_val),OSOBA,'PASZPORT');
   _tab.efld_opt(_we,'enable='+$(~_val),OSOBA,'KARTA');
   {? _fld<>''
   || exec('osoba_efld_opt','osoba','1',_tab,_we,'KARTA')
   ?}
?};

{? _fld='' | _fld='KARTA'
|| _sval:=$(~exec('nieobcy','osoba') & OSOBA.KARTA='T');
   _tab.efld_opt(_we,'enable='+_sval,OSOBA,'KP');
   _tab.efld_opt(_we,'enable='+_sval,OSOBA,'ORG_KP');
   _tab.efld_opt(_we,'enable='+_sval,OSOBA,'DWY_KP');
   _tab.efld_opt(_we,'enable='+_sval,OSOBA,'DWA_KP')
?};

1


\os_adres_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli OS_ADRES. Formuła wywoływana jest
::       w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(OS_ADRES)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='KRAJ'
|| _sval:=$(OS_ADRES.OSOBA().KALI='T' & (~-OS_ADRES.KRAJ().KODISO='PL'));
   _tab.efld_opt(_we,'mark='+_sval,OS_ADRES,'WOJEWODZ');
   _tab.efld_opt(_we,'mark='+_sval,OS_ADRES,'POWIAT');
   _tab.efld_opt(_we,'mark='+_sval,OS_ADRES,'GMINA')
?};

exec('os_adres_grayed','osoba',_we);

1


\os_adres_kraj_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Wartość początkowa pola OS_ADRES.KRAJ.
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
{? exec('nieobcy','osoba')
|| KRAJE.prefix();
   {? KRAJE.find_tab(,'SYM',,'=','PL') || _ret:=KRAJE.ref() ?}
?};
_ret


\os_adres_kraj_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola OS_ADRES.KRAJ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('os_adres_efld_opt','osoba')


\os_adres_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli OS_ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OS_ADRES.blank();
exec('os_adres_efld_opt','osoba','*',OS_ADRES,'RED')


\os_adres_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli OS_ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('os_adres_efld_opt','osoba','*',OS_ADRES,'RED')


\os_adres_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" w tabeli OS_ADRES.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('os_adres_efld_opt','osoba','*',OS_ADRES,'RED');
OS_ADRES.display()


\os_adres_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord przed" dla tabeli OS_ADRES.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.RODZAJ:=exec('rodzaj','osoba');
0


\os_adres_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Po redagowaniu pól tabeli OS_ADRES.
::   WY:
::  OLD: \chk_adr/skid_oso.fml
::  OLD: \sprawdz/adres.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(OS_ADRES,,'OD','KRAJ');
{? _chk='' & OS_ADRES.OSOBA<>null() & OSOBA.KALI='T' & ~-OS_ADRES.KRAJ().KODISO='PL'
|| _chk:=__CHK.record(OS_ADRES,,'WOJEWODZ','POWIAT','GMINA')
?};
{? _chk=''
|| _chk:=__CHK.record(OS_ADRES,,'MIASTO','DOM')
?};
{? _chk='' & ~exec('mail_ok','#email',OS_ADRES.EMAIL)
|| FUN.emsg('Nieprawidłowy adres e-mail.'@);
   _chk:='EMAIL'
?};
{? _chk=''
|| _chk:=exec('adr_over','osoba')
?};
{? _chk='' & OS_ADRES.win_edit('?')='REDKH'
|| exec('os_adres_teryt_sprawdz','osoba')
?};
{? _chk='' & OS_ADRES.win_edit('?')='RED'
|| _chk:=exec('osoba_adres_teryt_sprawdz','osoba')
?};
_chk


\adr_over
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [7.60]
:: OPIS: Walidacja rekordu tabeli OS_ADRES.
::  OLD: \adr_over/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
_zdate:=date(0,0,0);
{? OS_ADRES.DO<>_zdate & OS_ADRES.DO<OS_ADRES.OD
|| FUN.emsg('Podano błędną datę obowiązywania adresu.'@);
   _ret:='DO'
|| _adres:={? -menu_txt()='popraw' || OS_ADRES.ref() || null() ?};
   _od:=OS_ADRES.OD;
   _do:=OS_ADRES.DO;
   OS_ADRES.cntx_psh();
   {? OS_ADRES.OSOBA<>null()
   || OS_ADRES.index('RODZAJ');
      OS_ADRES.prefix(OS_ADRES.OSOBA,OS_ADRES.RODZAJ)
   || OS_ADRES.index('RODZAJ1');
      OS_ADRES.prefix(OS_ADRES.KH,OS_ADRES.RODZAJ)
   ?};
   {? OS_ADRES.first()
   || {!
      |? {? _adres<>OS_ADRES.ref()
         || {? {? OS_ADRES.DO=_zdate | _od=_zdate || 1 || _od<=OS_ADRES.DO ?} &
               {? OS_ADRES.OD=_zdate | _do=_zdate || 1 || OS_ADRES.OD<=_do ?}
            || {? (OS_ADRES.DO=_zdate | OS_ADRES.DO>_do) & _od>OS_ADRES.OD & ~OS_ADRES.next()
               || OS_US.cntx_psh();
                  OS_US.prefix();
                  {? OS_US.find_tab(,'OS_ADRES',,'=',OS_ADRES.ref())
:                  || FUN.info(
:                        'Proszę zweryfikować przypisanie urzędu skarbowego ze względu na zmianę adresu zamieszkania.'@)
                  || FUN.info(
                        'Proszę zweryfikować przypisanie urzędu skarbowego '
                        'i zmienić adres zamieszkania w zakładce "Urzędy skarbowe".'@)
                  ?};
                  OS_US.cntx_pop();
                  OS_ADRES.DO:=_od-1;
                  OS_ADRES.put()
               || FUN.emsg('Wprowadzono niespójne daty.'@);
                  _ret:='DO'
               ?}
            ?}
         ?};
         _ret='' & OS_ADRES.next()
      !}
   ?};
   OS_ADRES.cntx_pop()
?};
_ret


\rd_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli RD. Wykorzystywana zarówno przez
::       jTerma jak i webTerma. Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(RD)
|| _TAB:=_b
|? _tryb='1' & ~_webTerm
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1' & ~_webTerm
|| _we:=cur_win(1,1)
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1' & ~_webTerm
|| _fld:=cur_afld()
|| _fld:=''
?};

_set:=
   {? _webTerm
   || $( '_a.'+
         {? web_top_win()<>_we
         || 'web_efld_init'
         || 'web_efld_opt'
         ?}+
         '('
            '_b,'
            '_c,'
            '_d,'
            '{? var_pres(\'_e\')>0 || _e || _a ?},'
            '{? var_pres(\'_f\')>0 || _f || \'\' ?},'
            '{? var_pres(\'_g\')>0 || _g || \'\' ?}'
         ')'
      )
   || $( '_a.efld_opt'
         '('
            '_b,_d,_e,'
            '{? var_pres(\'_f\')>0 || _f || _a ?},'
            '{? var_pres(\'_g\')>0 || _g || \'\' ?}'
         ')'
      )
   ?};

{? _fld='' | _fld='TPID'
|| _kod:=RD.TPID().KOD;
   _set(_TAB,_we,_grp_ident,'mark=%1' [$(_kod='1')],RD,'DOWOD');
   _set(_TAB,_we,_grp_ident,'mark=%1' [$(_kod='2')],RD,'PASZPORT');
   _set(_TAB,_we,_grp_ident,'mark=%1' [$(_kod='N')],RD,'NIP');
   _set(_TAB,_we,_grp_ident,'mark=%1' [$(_kod='P')],RD,'PESEL')
?};

{? _fld='' | _fld='STPK'
|| _sval:=$(RD.STPK().KOD='11');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'DZPRZYSP');
   {? _fld<>''
   || exec('rd_efld_opt','osoba','1',_TAB,_we,_grp_ident,'DZPRZYSP')
   ?}
?};

{? _fld='' | _fld='STNP'
|| _sval:=$(RD.STNP<>null() & RD.STNP().KOD<>'0');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'STNP_OD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'STNP_DO');
   _set(_TAB,_we,_grp_ident,'mark=1',RD,'STNP')
?};

{? _fld='' | _fld='DZPRZYSP'
|| _sval:=$(RD.STPK().KOD='11' & RD.DZPRZYSP='T');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],RD,'DTPRZYSP');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'ODROS');
   {? _fld<>''
   || exec('rd_efld_opt','osoba','1',_TAB,_we,_grp_ident,'ODROS')
   ?}
?};

{? _fld='' | _fld='ODROS'
|| _sval:=$(RD.STPK().KOD='11' & RD.DZPRZYSP='T' & RD.ODROS='T');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],RD,'ODROSDO')
?};

{? _fld='' | _fld='ZP'
|| _sval:=$(RD.ZP='T');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'ZP_OD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'ZP_DO')
?};

{? _fld='' | _fld='KW'
|| _sval:=$(RD.KW>0);
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'KW_OD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'KW_DO')
?};

{? _fld='' | _fld='ADRINNY'
|| _sval:=$(RD.ADRINNY='T');
   _set(_TAB,_we,_grp_ident,'enable=%1,mark=%1' [_sval],RD,'KRAJ');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'KOD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'POCZTA');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'MIASTO');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'GMINA');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'ULICA');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'DOM');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],RD,'LOKAL');
   {? _fld<>''
   || exec('rd_efld_opt','osoba','1',_TAB,_we,_grp_ident,'KRAJ')
   ?}
?};

{? _fld='' | _fld='KRAJ'
|| _sval:=$(RD.ADRINNY='T' & ~-RD.KRAJ().KODISO='PL');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'KOD');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'POCZTA');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'MIASTO');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'GMINA');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'DOM')
?};

{? _fld='' | _fld='ZCZA'
|| _sval:=$(RD.ZCZA='N');
   _set(_TAB,_we,_grp_ident,'mark=%1' [_sval],RD,'UZOD')
?};
{? ~_webTerm || exec('rd_teryt_wyszarz','osoba') ?};
1


\rd_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Funkcja sprawdza, czy w zadanym zakresie dat dany zasiłek może być wypłacony.
::   WE:  _a [STRING] - 'R' zasiłek rodzinny;
::            'P' zasiłek pielęgnacyjny.
::       [_b] [DATE]  - Data początkowa kontrolowanego okresu.
::       [_c] [DATE]  - Data końcowa kontrolowanego okresu.
::   WY: 1 - Zasiłek może być wypłacony w danym okresie.
::       0 - Zasiłek nie może być wypłacony.
::  OLD: \RD_tdat/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_err:=0;
_ret:=0;

{? var_pres('_a')=type_of('') & 'RP'*_a
|| _d0:=date(0,0,0);
   _td:=type_of(_d0);

   {? {? var_pres('_b')=_td
      || {? var_pres('_c')=_td || {? _c<_b || _c==_b ?}; 1
         |? var_pres('_c')<=0 || _c:=_b; 1
         ?}
      |? var_pres('_b')<=0
      || {? var_pres('_c')=_td || _b:=_c; 1
         |? var_pres('_c')<=0 || _b:=_c:=date(); 1
         ?}
      ?}
   || _ret:=
         {? _a='R'
         || (RD.KW_OD=_d0 | RD.KW_OD<=_c) & (RD.KW_DO=_d0 | RD.KW_DO>=_b)
         || (RD.ZP_OD=_d0 | RD.ZP_OD<=_c) & (RD.ZP_DO=_d0 | RD.ZP_DO>=_b)
         ?}
   || _err:=1
   ?}
|| _err:=1
?};
{? _err
|| FUN.error('Błędne wywołanie funkcji rd_zas z pliku osoba.fml\nNieprawidłowa lista argumentów.'@);
   0
|| _ret
?}


\fld_fml_pkd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawia odpowiednie formuły dla pól tabeli osoba na potrzeby edycji danych w dziedzinie PKD.
::   WE: _a [INTEGER] - <>0 - wywołanie dla obszaru personel, 0 (domyślnie) dla pozostałych przypadków
::       _b [INTEGER] - <>0 - specjalna obsługa pól NAZWISKO, PIERWSZE, PESEL, OBCY,
::                        0 (domyślnie) dla pozostałych przypadków
::   WY: tablica zawierająca formuły do odtworzenia po zakończeniu edycji
::----------------------------------------------------------------------------------------------------------------------
: Zachowaj aktualne formuły pól tabeli.
_buf:=exec('save_fml_all','#field',OSOBA);

{? var_pres('_a')=type_of(0) & _a
: Dla czynności "personelowych" zmień formuły na wartość początkową wybranych pól.
|| OSOBA.fld_fml('KALI','BLANK',"'T'");
   OSOBA.fld_fml('REJ_INFO','BLANK',"'kwestionariusz osobowy'")
?};

{? var_pres('_b')=type_of(0) & _b
: Zmień obsługę pól kluczowych - "podmiana" osoby.
|| _fml:="exec('osoba_spec_ae','osoba')";
   OSOBA.fld_fml('NAZWISKO','AFTER_EDIT',_fml);
   OSOBA.fld_fml('PIERWSZE','AFTER_EDIT',_fml);
   OSOBA.fld_fml('UR_DATA','AFTER_EDIT',_fml);
   OSOBA.fld_fml('PESEL','AFTER_EDIT',_fml);
   OSOBA.fld_fml('OBCY','AFTER_EDIT',_fml);
   OSOBA.fld_fml('PASZPORT','AFTER_EDIT',_fml)
?};

: Odblokuj wyświetlanie zawartości.
exec('set_fml_type','#field',OSOBA,'BEFORE_DISPLAY',"");

_buf


\osoba_x_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola tabeli OSOBA. Formuła wspólna dla większości pól tabeli OSOBA oraz dla niektórych
::       akcji (np. "Wyświetl - przed"). W procesach personelowych pozwala na "wyświetlenie" pól jedynie pochodzących
::       z rekordu, do którego operator ma dostęp (uprawnienia).
::   WE:
::   WY:
::  OLD: \prz_wysw/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')='' & var_pres('__PERSONEL')=type_of(0) & __PERSONEL
|| {? var_pres('__OS188')<1
   || __OS188:=null()
   ?};
   {? var_pres('__PAR188')<1
   || __PAR188:=PAR_SKID.get(188)='T'
   ?};
   {? OSOBA.size()
   || {? ~__PAR188
      || REF.OSOBA:=OSOBA.ref()
      || {? __OS188<>OSOBA.ref()
         || exec('chk_upr','osoba')
         ?}
      ?};
      __OS188:=OSOBA.ref();
      REF.OSOBA<>null()
   || 1
   ?}
|| 1
?}


\osoba_identyf_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła ustala wartość pola OSOBA.IDENTYF.
::       Formuła wykorzystywana w wyzwalaczach przed modyfikacją, oraz w akcjach po redagowaniu pól:
::       OBCY, PESEL, PASZPORT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
OSOBA.IDENTYF:={? OSOBA.OBCY='T' || OSOBA.PASZPORT || OSOBA.PESEL ?}


\osoba_pierwsze_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola OSOBA.PIERWSZE. Próba odgadnięcia płci na podstawie imienia.
::   WE:
::   WY:
::  OLD: \plec/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
OSOBA.PLEC:={? -(fld()+1)='a' || 'K' || 'M' ?};
1


\osoba_ur_data_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola OSOBA.UR_DATA. Dla osoby niebędącej obcokrajowcem, gdy pole jest puste, wypełnia je
::       odpowiednią datą na podstawie numeru PESEL.
::   WE:
::   WY:
::  TAG:
::  OLD: \urdatpr/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
{? exec('nieobcy','osoba') & fld()=_d0
|| _dt:=exec('pesel_dt','#id',OSOBA.PESEL);
   {? type_of(_dt)=type_of(_d0) || fld(_dt) ?}
?};
1


\osoba_pesel_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Przed redagowaniem pola OSOBA.PESEL. JeŻeli osoba nie jest obcokrajowcem, określona została już data
::       urodzenia, a numer PESEL nie został jeszcze podany, to tworzone są jego pierwsze (sześć) cyfry.
::  OLD: \peselpr/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
{? PAR_SKID.get(264)='T'
|| _dt:=OSOBA.UR_DATA;
   {? exec('nieobcy','osoba') & _dt<>date(0,0,0)
   || {? +(|fld())<>11 || fld(exec('pesel_dt','#id',_dt)); set_cpos(7) ?}
   ?}
?};
1


\osoba_pesel_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Po redagowaniu pola OSOBA.PESEL. Dla osoby, która nie jest obcokrajowcem.
::       Jeśli osoba nie posiada jeszcze wypełnionej daty urodzenia, pola: OSOBA.UR_DATA i OSOBA.PLEC zostaną
::       zaktualizowane.
::       Jeśli osoba ma wypełnione datę urodzenia, to weryfikacja numeru PESEL jest rozszerzona o sprawdzenie
::       zgodności daty urodzenia oraz płci z informacją zawartą w numerze PESEL.
::  OLD: \peselpo/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
_ur:=OSOBA.UR_DATA;
_d0:=date(0,0,0);
{? _ur<>_d0 & OSOBA.PESEL=exec('pesel_dt','#id',_ur)
|| fld('')

|? exec('nieobcy','osoba')
|| _fld:=fld();
   _kom:=
      {? _ur=_d0
      || exec('pesel_ok','#id',_fld)
      || exec('pesel_ok','#id',_fld,_ur,OSOBA.PLEC)
      ?};
   {? +_kom=1 & type_of(_dt:=exec('pesel_dt','#id',_fld))=type_of(_d0) & _ur=_d0
   || OSOBA.UR_DATA:=_dt;
      OSOBA.PLEC:=_kom
   ?};
   {? +_kom>1
   || return(FUN.ask('Niepoprawny numer PESEL.\n'@+_kom+'\nZatwierdzić informację?'@))
   ?}
?};
exec('osoba_identyf_set','osoba');
1


\osoba_obcy_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Po redagowaniu pola OSOBA.OBCY. Jeżeli dana osoba jest obcokrajowcem, usuwana jest zawartość pól
::       "Narodowość" i "Obywatelstwo", w przeciwnym wypadku polom nadawane są wartości domyślne.
::  OLD: \obcypo/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
_obywatel:=exec('osoba_obywatel_bl','osoba');
_no:=exec('nieobcy','osoba');
{? _no
|| OSOBA.OBYWATEL:=_obywatel
|| {? OSOBA.OBYWATEL=_obywatel || OSOBA.OBYWATEL:='' ?}
?};
exec('osoba_identyf_set','osoba');
exec('osoba_efld_opt','osoba');
1


\osoba_dowod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Po redagowaniu pola OSOBA.DOWOD. Dla osoby, która nie jest obcokrajowcem.
::  OLD: \dowod_po/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
fld()='' | (exec('dowod_ok','#id',fld())>0)


\osoba_paszport_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola OSOBA.PASZPORT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('osoba_identyf_set','osoba');
1


\osoba_karta_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola OSOBA.KARTA.
::       Wartość pola jest wyświetlana jedynie dla osób będących obcokrajowcami, do których operator ma dostęp (patrz
::       komentarz do formuły \osoba_x_bd).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
~exec('nieobcy','osoba') & exec('osoba_x_bd','osoba')


\osoba_karta_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola OSOBA.KARTA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('osoba_efld_opt','osoba')


\osoba_nip_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Po redagowaniu pola OSOBA.NIP, dla osoby nie będącej obcokrajowcem.
::  OLD: \nip_po/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
fld()='' | exec('nip_ok','#id',fld())


\osoba_narod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Wartość początkowa pola OSOBA.NAROD.
::  OLD: \narod/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
'polska'


\osoba_obywatel_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Wartość początkowa pola OSOBA.OBYWATEL.
::  OLD: \obywatel/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
'polskie'


\osoba_obywatel_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola OSOBA.OBYWATEL. Pole dostępne tylko dla obcokrajowców.
::   WE:
::   WY:
::  OLD: \_OBCY/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
~exec('nieobcy','osoba')


\osoba_rej_kto_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Wartość początkowa pola OSOBA.REJ_KTO.
::  OLD: \REJ_OP/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? app_info('web_sesid')<>''
|| OPERATOR.USER:=exec('user_ident_web','#users')
?};
{? OPERATOR.USER<>null()
|| USERS.cntx_psh();
   _ret:=OPERATOR.USER().KOD;
   USERS.cntx_pop();
   _ret
|| ''
?}


\osoba_rej_info_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Wartość początkowa pola OSOBA.REJ_INFO.
::  OLD: \REJ_ZR/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
'od osoby, której dotyczą'


\osoba_spec_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redagowaniu pól NAZWISKO, PIERWSZE, PESEL, OBCY, PASZPORT.
::----------------------------------------------------------------------------------------------------------------------
_ret:=
   {? cur_afld()='PIERWSZE' || exec('osoba_pierwsze_ae','osoba')
   |? cur_afld()='PESEL'    || {? PAR_SKID.get(264)='T' || exec('osoba_pesel_ae','osoba') || 1 ?}
   |? cur_afld()='OBCY'     || exec('osoba_obcy_ae','osoba')
   |? cur_afld()='PASZPORT' || exec('osoba_paszport_ae','osoba')
   || 1
   ?};

{? ~((type_of(_ret)=type_of(0) & _ret) | (type_of(_ret)=type_of('') & _ret=''))
|| return(_ret)
?};

_jest:=0;
_pesel:=0;
_paszport:=0;
_ur_data:=0;
{? OSOBA.NAZWISKO<>'' & OSOBA.PIERWSZE<>'' &
   {? exec('nieobcy','osoba')
   || {? PAR_SKID.get(264)='T'
      || _pesel:=OSOBA.PESEL<>''; _pesel
      || _ur_data:=OSOBA.UR_DATA<>#0; _ur_data
      ?}
   || _paszport:=OSOBA.PASZPORT<>''; _paszport
   ?}
|| _ref:=REF.OSOBA;
   OSOBA.cntx_psh();
   OSOBA.index('OSOBA');
   OSOBA.prefix();
   {? (_paszport | _pesel) & OSOBA.find_key(OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.OBCY,OSOBA.IDENTYF,) &
      OSOBA.ref()<>REF.OSOBA &
      {? OSOBA.OBCY='T'
      || FUN.ask(
            'Osoba o podanym nazwisku, imieniu i numerze paszportu już występuje w kartotece.\n'
            'Czy wykorzystać istniejące dane?'@
         )
      || FUN.ask(
            'Osoba o podanym nazwisku, imieniu i numerze PESEL już występuje w kartotece.\n'
            'Czy wykorzystać istniejące dane?'@
         )
      ?}
   || _jest:=1;
      REF.OSOBA:=OSOBA.ref()
   ?};
   {? ~_jest & _ur_data
   || OSOBA.index('URDATA');
      OSOBA.prefix();
      {? OSOBA.find_key(OSOBA.NAZWISKO,OSOBA.PIERWSZE,OSOBA.UR_DATA) & OSOBA.ref()<>REF.OSOBA &
         FUN.ask(
            'Osoba o podanym nazwisku, imieniu i dacie urodzenia już występuje w kartotece.\n'
            'Czy wykorzystać istniejące dane?'@
         )
      || REF.OSOBA:=OSOBA.ref()
      ?}
   ?};
   OSOBA.cntx_pop();
   {? _ref<>REF.OSOBA & REF.OSOBA<>null()
   || REF.OSOBA()
   ?}
?};
1


\osoba_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pól tabeli OSOBA.
::   WY: zgodne ze specyfikacją dla akcji "rekord po" tabeli
::  OLD: \sprawdz/osoba.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(OSOBA,,'NAZWISKO','PIERWSZE','UR_DATA'))<>''
|| return(_chk)
?};

_no:=exec('nieobcy','osoba');

{? _no
|| {? {? PAR_SKID.get(264)='T' || (_chk:=__CHK.record(OSOBA,,'PESEL'))<>'' || 0 ?}
   || return(_chk)
   ?}
|| {? (_chk:=__CHK.record(OSOBA,,'OBYWATEL','PASZPORT'))<>''
   || return(_chk)
   ?}
?};

_d0:=date(0,0,0);

{? OSOBA.DWA_DOW<>_d0
|| {? __CHK.record(OSOBA,,'DWY_DOW')<>''
   || return('DWY_DOW')
   ?};
   {? OSOBA.DWY_DOW>OSOBA.DWA_DOW
   || FUN.emsg('Dowód osobisty - "Data ważności" nie może być wcześniejsza niż "Data wydania".'@);
      return('DWA_DOW')
   ?}
?};

{? ~_no & OSOBA.KARTA='T'
|| {? OSOBA.DWA_KP<>_d0
   || {? __CHK.record(OSOBA,,'DWY_KP')<>''
      || return('DWY_KP')
      ?};
      {? OSOBA.DWY_KP>OSOBA.DWA_KP
      || FUN.emsg('Karta pobytu - "Data ważności" nie może być wcześniejsza niż "Data wydania".'@);
         return('DWA_KP')
      ?}
   ?}
?};

{? OSOBA.DWA_PASZ<>_d0
|| {? __CHK.record(OSOBA,,'DWY_PASZ')<>''
   || return('DWY_PASZ')
   ?};
   {? OSOBA.DWY_PASZ>OSOBA.DWA_PASZ
   || FUN.emsg('Paszport - "Data ważności" nie może być wcześniejsza niż "Data wydania".'@);
      return('DWA_PASZ')
   ?}
?};

{? ~exec('mail_ok','#email',OSOBA.KWW_MAIL)
|| FUN.emsg('Nieprawidłowy adres e-mail.'@);
   return('KWW_MAIL')
?};

{? ~exec('osoba_osoba','osoba',REF.OSOBA) & PAR_SKID.get(264)='T'
|| __CHK.err_ndx(OSOBA,'OSOBA',REF.OSOBA<>null());
   return(0)
?};

''


\grp_edisp_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Aktualizacja nagłówka okienka kartoteki.
::   WE: _a [STRING] - akronim okienka nagłówkowego
::   WY:
::----------------------------------------------------------------------------------------------------------------------
grp_edisp(OSOBA,_a)


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dla czynności ustala elementy jej opisu do wyświetlenia na liście zadań.
::   WE:  _a  [OBJECT] - Wskazanie na obiekt menadżera procesu
::       [_b] [STRING] - Symbol rodzaju portu, z którego ma zostać pobrane złączenie do rekordu OSOBA
::   WY: tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('init_desc_tab','osoba');

  _mp:={? var_pres('_a')>100         || _a || return(_tab) ?};
_kind:={? var_pres('_b')=type_of('') || _b || exec('kind_in','#b_port') ?};

_in:=_mp.load(_kind);

OSOBA.cntx_psh();
OSOBA.prefix();
{? type_of(_in.OSOBA)=type_of(null) & _in.OSOBA<>null & OSOBA.seek(_in.OSOBA)
|| _mp.keyRef(OSOBA.uidref(),0,0);
   _tab.ZAW_DANE:='T';
   _tab.NAZWISKO:=OSOBA.NAZWISKO;
   _tab.PIERWSZE:=OSOBA.PIERWSZE;
   _tab.OBCY:=OSOBA.OBCY;
   _tab.PASZPORT:=OSOBA.PASZPORT;
   _tab.PESEL:=OSOBA.PESEL;
   _tab.UR_DATA:=$OSOBA.UR_DATA
|| _tab.ZAW_DANE:='N'
?};
OSOBA.cntx_pop();

_tab


\update_tyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Aktualizacja tytułu i dziedziny naukowej lub zawodowej dla wskazanego rekordu tabeli OSOBA i powiązanych z nim
::       rekordów tabeli P.
::   WE: _a [STRING]    - Tryb pracy:
::             Z - tytuł i dziedzina zawodowa;
::             N - tytuł i dziedzina naukowa.
::       _b [REFERENCE] - Wskazanie na osobę (OSOBA.ref()).
::       _c [REFERENCE] - Wskazanie na tytuł naukowy (w szczególności null()).
::       _d [REFERENCE] - Wskazanie na dziedzinę uzyskania tytułu (w szczególności null()).
::   WY: Wynik operacji:
::       0 - Niepowodzenie;
::       1 - Sukces.
::----------------------------------------------------------------------------------------------------------------------
{? _<>4 || return(0) ?};
{? type_of(_a)=type_of('') & (_a='Z' | _a='N') || _tryb:=_a || return(0) ?};
{? type_of(_b)=type_of(null()) || _osoba:=_b || return(0) ?};
{? type_of(_c)=type_of(null()) || _tytul:=_c || return(0) ?};
{? type_of(_d)=type_of(null()) || _dz:=_d || return(0) ?};

_ds:=do_state();
{? _ds=0 || do() |? _ds=2 || return(0) ?};
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.index('OSOBA');
{? OSOBA.seek(_osoba)
|| {? _tryb='Z' || OSOBA.TYTULZ:=_tytul; OSOBA.DZTZ:=_dz
   |? _tryb='N' || OSOBA.TYTULN:=_tytul; OSOBA.DZTN:=_dz
   ?};
   {? OSOBA.put(1)
   || P.prefix(OSOBA.ref(),exec('ref_firma','ustawienia'));
      {? P.first()
      || {!
         |? {? _tryb='Z' || P.TYTULZ:=_tytul; P.DZTZ:=_dz
            |? _tryb='N' || P.TYTULN:=_tytul; P.DZTN:=_dz
            ?};
            P.put();
            P.next()
         !}
      ?}
   || undo()
   ?}
|| undo()
?};
P.cntx_pop();
OSOBA.cntx_pop();
{? _ds=0 || end() || do_state()=1 ?}


\akt_wyk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2006]
:: OPIS: Aktualizacja wykształcenia osoby po zamknięciu okienka kartoteki szkół.
::       Przypisz wykształcenie z ostatnio ukończonej szkoły.
::----------------------------------------------------------------------------------------------------------------------
{? REF.OSOBA=null || return(1) ?};
OS_SZKOL.cntx_psh();
OS_SZKOL.index('DO');
OS_SZKOL.prefix(REF.OSOBA);
REF.OSOBA().WYK:={? OS_SZKOL.last() || OS_SZKOL.WYK ?};
OSOBA.put(1);
OS_SZKOL.cntx_pop()


\data_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala datę zatrudnienia lub zwolnienia osoby
::   WE:  _a  [REFERENCE] - wskazanie na osobę (obowiązkowy)
::        _b  [INTEGER]   - określenie wyszukiwanej daty (obowiązkowy), 0 - data zatrudnienia, 1 - data zwolnienia
::       [_c] [INTEGER]   - dowolny typu liczbowego, ignorowanie zerowych dat dla _b=0
::   WY: data zatrudnienia lub zwolnienia (zależnie od parametru _b)
::  OLD: \prac_dat/staze.fml
::----------------------------------------------------------------------------------------------------------------------
_c:=(var_pres('_c')=type_of(0));
_data:=_zdate:=date(0,0,0);

P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,_a);
{? P.first()
|| {? ~_b
   || _data:=P.DZA
   || _data:=P.DZ;
      {!
      |? {? P.next()
         || {? P.DZ=_zdate || _data:=_zdate; 0
            |? _data<P.DZ  || _data:=P.DZ; 1
            || 1
            ?}
         ?}
      !}
   ?}
?};
P.cntx_pop();

_data


\czy_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Sprawdza, czy dana osoba jest pracownikiem zatrudnionym na podstawie umowy o pracę. Jeśli funkcja wywołana
::       bez argumentów, to sprawdza się tylko wystąpienie "bieżącej" osoby w kartotece osobowej. Gdy drugim argumentem
::       jest data, wyszukiwany jest pierwszy, zatrudniony danego dnia pracownik. Jeśli wyszukanie powiodło się
::       zwracany jest ref pracownika, w przeciwnym wypadku null.
::       UWAGA.
::       Funkcja o kluczowym znaczeniu dla procesu wyliczania rachunkow i PIT-ów.
::       "ref" znalezionego pracownika przechowywany jest w polu P zmiennej UZ
::   WE: [_a] [REFERENCE] - Wskazanie osoby.
::       [_b] [DATE]      - Data wyszukiwania.
::       [_c] - STRING[1] - dodatkowa forma zatrudnienia do weryfikacji
::       [_d] - tylko ref bez zmiany UZ.P
::   WY: Wskazanie znalezionego pracownika lub null().
::  OLD: \czy_prac/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
:: Obsługa dodatkowej formy zatrudnienia
_Forma_zatr:='P';
{? var_pres('_c')=type_of('') || _Forma_zatr+=_c ?};
_czy_ref:=var_pres('_d')=type_of(0) & _d=1;
{? _czy_ref
|| _uz_p:=UZ.P
?};
UZ.P:=null();
_d0:=date(0,0,0);
_osoba:={? var_pres('_a')=type_of(null()) || _a || OSOBA.ref() ?};
_dt:={? var_pres('_b')=type_of(_d0) || _b || _d0 ?};
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),'P',_osoba);
{? P.first()
|| {? _dt=_d0
   || {!
      |? {? _Forma_zatr*P.F_ZATR().KOD
         || UZ.P:=P.ref; 0
         || P.next
         ?}
      !}
   || {!
      |? {? _Forma_zatr*P.F_ZATR().KOD
         || {? P.DZA<=_dt
            || {? P.DZ=_d0 | _dt<=P.DZ
               || UZ.P:=P.ref()
               ?}
            ?}
         ?};
         ~UZ.P & P.next()
      !}
   ?}
?};
P.cntx_pop();
{? _czy_ref
|| _ref:=UZ.P;
   UZ.P:=_uz_p;
   _ref
|| UZ.P
?}


\upd_pi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Aktualizacja i normalizacja zapisów w tabeli P_INFO.
::   WE:
::   WY:
::  OLD: \upd_pi/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
P_INFO.cntx_psh();
P_INFO.index('OD');
P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
{? P_INFO.first()
|| _d0:=date(0,0,0);
   _od:=_d0;
   {!
   |? {? _od~1<>P_INFO.OD~1
      || _blokada:=P_INFO.BLOKADA;
         _blwn:=P_INFO.BLWN;
         _kw_wsk:=P_INFO.KW_WSK;
         _rok_wsk:=P_INFO.ROK_WSK;
         _od:=P_INFO.OD
      ?};
      _bl_kc:=P_INFO.BL_KC;
      _put:=0;
      {? P_INFO.BLOKADA~1 & P_INFO.OD~1<>P_INFO.BLOKADA~1
      || P_INFO.BLOKADA:=_d0;
         P_INFO.BLWN:=null();
         _put+=1
      ?};
      {? _od~1=P_INFO.OD~1 & _od<P_INFO.OD
      || P_INFO.BLOKADA:=_blokada;
         P_INFO.BLWN:=_blwn;
         P_INFO.KW_WSK:=_kw_wsk;
         P_INFO.ROK_WSK:=_rok_wsk;
         _put+=1
      ?};
      _put+=P_INFO.BL_KC<>_bl_kc;
      {? _put
      || P_INFO.put()
      ?};
      P_INFO.next()
   !};
   exec('p_info_put_all','osoba')
?};
P_INFO.cntx_pop()


\p_info_put_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Sztucznie put-uje wszystkie rekordy tabeli P_INFO dla osoby - na potrzeby wysyłania danych na portal HR
::   WE: [_a] [REFERENCE] - wskazanie na osobę (domyślnie wskazanie na bieżący kontekst tabeli OSOBA)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) || _a || OSOBA.ref() ?};

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(~~) ?};

:: sprawdzenie licencji na dziedzinę POR
{? ~exec('lic','#b_domain','POR') || return(~~) ?};

:: zalozenie transakcji
_mydo:=do_state()=0;
{? _mydo || do() ?};

P_INFO.trig_off('*','*');
P_INFO.cntx_psh();
P_INFO.prefix(exec('ref_firma','ustawienia'),_osoba);
{? P_INFO.first()
|| {!
   |? P_INFO.put(,1);
      P_INFO.next()
   !}
?};
P_INFO.cntx_pop();
P_INFO.trig_on('*','*');

{? _mydo || end() ?};
~~


\p_info_check4portal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Sprawdza czy koniecza jest aktualizacja danych ubezpieczeniowych - na potrzeby wysyłania danych na portal HR
::       Metoda wykorzystywana w procesie aktualizacji pracownika
::   WE: _a [REFERENCE] - wskazanie na osobę
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) || _a || return(~~) ?};

:: powrot w przypadku zerwanej transakcji
{? do_state()=2 || return(~~) ?};

:: sprawdzenie licencji na dziedzinę POR
{? ~exec('lic','#b_domain','POR') || return(~~) ?};

P_INFO.cntx_psh();
:: ustalenie rekordów aktualnych na dzień dzisiejszy
_p_info:=exec('zn_ttub','pracownik',_osoba);
_od:=exec('FindAndGet','#table',P_INFO,_p_info,,"OD",#0);
_p_info_m:=exec('zn_ttub','pracownik',_osoba,,'m');
_od_m:=exec('FindAndGet','#table',P_INFO,_p_info_m,,"OD",#0);
{? _od_m<_od || _p_info_m:=null() ?};
_p_info_w:=exec('zn_ttub','pracownik',_osoba,,'w');
_od_w:=exec('FindAndGet','#table',P_INFO,_p_info_w,,"OD",#0);
{? _od_w<_od || _p_info_w:=null() ?};

_update:=0;
P_INFO.prefix(exec('ref_firma','ustawienia'),_osoba);
{? P_INFO.last()
|| {!
   |? _ref:=P_INFO.ref();
      _id_cloud:=exec('get_id_cloud','portal_core','PORTAL_P_INFO_ID',P_INFO.uidref());

::    jeżeli rekord powinien być wysłany na portal ale nie mamy identyfikatora portalowego
::    lub mamy identyfikator portalowy ale rekord nie powinien być na portalu, to zaktualizuj wszystkie rekordy
::    w celu zsynchronizowania z portalem
      _update:=((_ref=_p_info | _ref=_p_info_m | _ref=_p_info_w) & ~_id_cloud) +
               ((_ref<>_p_info & _ref<>_p_info_m & _ref<>_p_info_w) & _id_cloud);

      ~_update & P_INFO.prev()
   !}
?};
P_INFO.cntx_pop();
{? _update || exec('p_info_put_all','osoba',_osoba) ?};
~~


\upd_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [20.14]
:: OPIS: Uaktualnienie zapisów daty do na podstawie pola OD poprzedniego rekordu
::   WE: _a  [DICT]     - tabela do aktualizacji
::       _b  [STRING]   - index
::      [_c] [ANY]      - kolejna watość póla wykorzysane w prefixie
::      [_d] [ANY]      - kolejna watość póla wykorzysane w prefixie
::      ...             - kolejna watość póla wykorzysane w prefixie
::----------------------------------------------------------------------------------------------------------------------
  _TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || return(1) ?};
_index:={? var_pres('_b')=type_of('')     || _b || return(1) ?};

_TAB.cntx_psh();
_TAB.index(_index);
{? _>2
|| _prfx:='';
   _par:=obj_new(_);
   {! _lp:=3 .. _
   |! _par[_lp]:=_[_lp];
      _prfx+='_b['+$_lp+'],'
   !};
   {? type_of(_[_])<>type_of('') || _prfx:=_prfx-1 ?};
   ($('_a.prefix('+_prfx+')'))(_TAB,_par)
|| _TAB.prefix()
?};

{? _TAB.last()
|| {? _TAB.DO<>#0
   || _TAB.DO:=#0;
      _TAB.put(1)
   ?};
   {!
   |? _dalej:=0;
      _do:=_TAB.OD-1;
      _prev:=_TAB.prev();
      {? _prev
      || {? _TAB.DO<>_do
         || _TAB.DO:=_do;
            _TAB.put(1)
         ?}
      ?};
      _prev
   !}
?};
_TAB.cntx_pop();
1


\p_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Weryfikacja danych ubezpieczeniowych po zmianach w nieobecnościach.
::   WE:
::   WY:
::  OLD: \add_msg/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info(
   P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+'\n'+
   'Zmienione zostały podstawowe informacje o ubezpieczeniu pracownika.\n'
   'Zweryfikuj poprawność zmodyfikowanych danych ubezpieczeniowych.'@
);

P_INFO.cntx_psh();
P_INFO.index('OD');
P_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
P_INFO.win_sel('WERI');
P_INFO.win_edit('RED');
P_INFO.actions('WER','Z:Z');
P_INFO.select();
P_INFO.actions('WER');
P_INFO.cntx_pop();
~~


\p_info_update_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Dodaje rekord do tabeli P_INFO na podstawie zapisu we wskazanej tabeli (N lub LSW).
::   WE:  [_a] [INTEGER] - Tryb cichy (pomijać komunikaty):
::                0 - Nie [domyślnie]
::                1 - Tak.
::        [_b] [TABLE]   - Wskazanie tabeli [domyślnie:N].
::  OLD: \add_n/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;

_TAB:={? var_pres('_b')=type_of(N) || _b || N ?};
_nieobec:=_TAB=N;

{? _nieobec
|| _wych:=__RUB.sys_attr(N.NB,114);
   _mac:=__RUB.sys_attr(N.NB,115);
   {? _wych & _mac
   || FUN.emsg(
         '%1 - %2 ma ustawiony zarówno atrybut 114 jak i 115.\n'
         'Nieprawidłowa parametryzacja atrybutów 114 i 115.'@ [$N.NB().RN,N.NB().RT]
      );
      return()
   ?};
   _kod:=
      {? _wych
      || '1211'
      |? _mac
      || '1240'
      || ''
      ?}

:  Wypłata zasiłku macierzyńskiego (poprzez wyrównanie składnika - LSW) podczas wychowawczego.
|| _kod:='1211'
?};

{? _kod=''
|| return()
?};

{? _nieobec & ~__RUB.sys_attr(N.NB,1153)
:  Jeżeli wywołanie z nieobecności i urlop wychowawczy lub macierzyński to FP i FGŚP.
:  Przy wywołaniu z LSW nie ma takiej potrzeby, ponieważ wypłata zasiłku macierzyńskiego następuje W TRAKCIE
:  urlopu wychowawczego (a więc informacja o wychowawczym już jest).
|| exec('fp_fgsp','osoba','a',N.OD,N.DO)
?};
P_INFO.cntx_psh();
P_INFO.index('ST');
P_INFO.prefix(exec('ref_firma','ustawienia'),_TAB.P().OSOBA,'A',);

_ds:=do_state();
{? _ds=0
|| do()
?};
{? _ds<>2 &
   {? ~P_INFO.first()
:     Brak zapisów - trzeba dodać odpowiednie informacje
   || 1

   |? P_INFO.find_key(_TAB.OD) & P_INFO.TTUB().KOD=_kod
:     Odpowiedni zapis już istnieje (np. wiele etatów)
   || 0

   |? P_INFO.find_key(_TAB.OD) & P_INFO.TTUB().KOD<>_kod
:     Obowiązujący zapis jest różny od wymaganego
   || _base_ref:=P_INFO.ref();
      {? P_INFO.find_key(_TAB.DO+1)
      || {? P_INFO.TTUB().KOD<>_kod
:           Zmiana urlopu
         || {? P_INFO.seek(_base_ref)
            || P_INFO.del()
            ?};
            0

:           Połączenie urlopów
         || P_INFO.del();
            {? P_INFO.seek(_base_ref)
            || P_INFO.del()
            ?};
            0
         ?}

      |? P_INFO.find_le(_TAB.OD-1) & P_INFO.TTUB().KOD<>_kod
:        Zmiana urlopu
      || {? P_INFO.seek(_base_ref)
         || P_INFO.del()
         ?}

:        Kontynuacja urlopu
      |? P_INFO.seek(_base_ref)
      || P_INFO.OD:=_TAB.DO+1;
         P_INFO.put();
         0
      ?}

   |? P_INFO.find_key(_TAB.DO+1) & 2+P_INFO.TTUB().KOD='12'
   || _base_ref:=P_INFO.ref();
      {? P_INFO.find_key(_TAB.OD)
:        Połączenie urlopów
      || {? 2+P_INFO.TTUB().KOD<>'12'
         || P_INFO.del()
         ?};
         {? P_INFO.seek(_base_ref) & P_INFO.TTUB().KOD=_kod
         || P_INFO.del()
         ?};
         0

      || {? P_INFO.TTUB().KOD<>_kod
:           Zmiana urlopu
         || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P',_kod);
            P_INFO.OD:=_TAB.OD;
            P_INFO.add();
            0

:           Wstawienie urlopu przed istniejącym
         || P_INFO.OD:=_TAB.OD;
            P_INFO.put();
            0
         ?}
      ?}

:     Samodzielny zapis
   || 1
   ?}

:  Dodanie zapisów w układzie:
:     OD   - 12xx - przerwa
:     DO+1 - 0110 - powrót do podstawowego tytułu
:  Najpierw dodawany będzie zapis 0110 a potem 12xx (ze względu na wartości pozostałych pól).
|| P_INFO.index('OD');
   P_INFO.prefix(exec('ref_firma','ustawienia'),_TAB.P().OSOBA);

:  Szukamy zapisu podstawowego do skopiowania
   {? {? P_INFO.find_le(_TAB.DO+1) | P_INFO.last()
      || {!
         |? {? ~(_test:=2+P_INFO.TTUB().KOD<>'12')
            || P_INFO.prev()
            ?}
         !};
         &_test
      ?}
:     Zapis do skopiowania znaleziony. Podmieniamy tylko wybrane pola i dodajemy "powrót" z przerwy.
   || {? P_INFO.OD<>_TAB.DO+1
      || P_INFO.OD:=_TAB.DO+1;
         P_INFO.ST:='A';
         P_INFO.add()
      ?}

:     Zapisu do skopiowania nie znaleziony. Utwórzmy zapis z wartościami domyślnymi.
   || P_INFO.blank();
      P_INFO.OD:=_TAB.DO+1;
      P_INFO.ST:='A';
      P_INFO.DTUM:=date(0,0,0);
      P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
      P_INFO.PREM:=exec('kod_zus','nieobecnosc','E','0');
      P_INFO.STNP:=exec('kod_zus','nieobecnosc','N','0');
      P_INFO.TPID:=exec('kod_zus','nieobecnosc','I','P');
      P_INFO.NZPR:=exec('kod_zus','nieobecnosc','F','01');
      P_INFO.add()
   ?};
:  Czas na zapis 12xx (przerwa).
   P_INFO.OD:=_TAB.OD;
   P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P',_kod);
   P_INFO.add()
?};
{? _ds=0
|| end()
?};
P_INFO.cntx_pop();
exec('upd_pi','osoba');
{? ~_batch
|| exec('p_info','osoba');
   {? _nieobec
   || exec('wniosek','urlop_rodzicielski')
   ?}
?}


\p_info_update_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Modyfikuje zapisy w tabeli P_INFO po modyfikacji rekordu w tabeli N.
::   WE: [_a] [INTEGER] - Tryb cichy (pomijać komunikaty i część funkcjonalności):
::                         0 - Nie [domyślnie]
::                         1 - Tak.
::       [_b] [INTEGER] - Kod nieobecności przed zmianą [domyślnie:N.NB().RN].
::       [_c] [DATE]    - Data początku nieobecności [domyślnie:N.OD].
::       [_d] [DATE]    - Data końca nieobecności [domyślnie:N.DO].
::       [_e] [TABLE]   - Wskazanie tabeli [domyślnie:N].
::   WY:
::  OLD: \mod_n/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;
_nb:={? var_pres('_b')=type_of(0) || _b || N.NB().RN ?};
_od:={? var_pres('_c')=type_of(date()) || _c || N.OD ?};
_do:={? var_pres('_d')=type_of(date()) || _d || N.DO ?};
_TAB:={? var_pres('_e')=type_of(N) || _e || N ?};
_nieobec:=_TAB=N;

{? _nieobec & (__RUB.sys_attr(_nb,115)<>__RUB.sys_attr(N.NB,115) | __RUB.sys_attr(_nb,114)<>__RUB.sys_attr(N.NB,114))
|| {? __RUB.sys_attr(_nb,115) | __RUB.sys_attr(_nb,114)
   || exec('p_info_update_del','osoba',1,_nb,_od,_do)
   ?};
   {? __RUB.sys_attr(N.NB,115) | __RUB.sys_attr(N.NB,114)
   || exec('p_info_update_add','osoba',1)
   ?};
   {? ~_batch
   || exec('p_info','osoba')
   ?}

|| {? ~_nieobec | __RUB.sys_attr(N.NB,115) | __RUB.sys_attr(N.NB,114)
   || {? _nieobec
      || _kod:={? __RUB.sys_attr(N.NB,114) || '1211' || '1240' ?};
         exec('fp_fgsp','osoba','p',N.OD,N.DO)
      || _kod:='1211'
      ?};

      P_INFO.cntx_psh();
      P_INFO.index('ST');
      P_INFO.prefix(exec('ref_firma','ustawienia'),_TAB.P().OSOBA,'A',);
      {? _od<>_TAB.OD
      || {? P_INFO.find_key(_od)
         || _base_ref:=P_INFO.ref();
            {? P_INFO.find_key(_TAB.OD)
            || {? P_INFO.TTUB().KOD<>_kod
::               Połączenie urlopów.
               || P_INFO.del()
               ?};
               {? P_INFO.find_le(_TAB.OD)
               || {? P_INFO.TTUB().KOD<>_kod
                  || {? P_INFO.seek(_base_ref)
                     || P_INFO.OD:=_TAB.OD;
                        P_INFO.put()
                     ?}
                  |? P_INFO.seek(_base_ref)
                  || P_INFO.del()
                  ?}
               ?}

            || {? P_INFO.find_le(_od-1) & P_INFO.TTUB().KOD<>_kod
::                Rozdzielenie urlopów.
               || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
                  P_INFO.OD:=_od;
                  P_INFO.add();
                  {? P_INFO.seek(_base_ref)
                  || P_INFO.OD:=_TAB.OD;
                     P_INFO.put()
                  ?}

::                Początek urlopu.
               |? P_INFO.seek(_base_ref)
               || P_INFO.OD:=_TAB.OD;
                  P_INFO.put()
               ?}
            ?}

         |? P_INFO.find_le(_od) & 2+P_INFO.TTUB().KOD='12'
         || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
            P_INFO.OD:=_od;
            P_INFO.add();
            P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P',_kod);
            P_INFO.OD:=_TAB.OD;
            P_INFO.add()
         ?}
      ?};

      {? _do<>_TAB.DO
      || {? P_INFO.find_key(_do+1)
         || {? P_INFO.TTUB().KOD<>_kod
            || _base_ref:=P_INFO.ref();
               {? P_INFO.find_key(_TAB.DO+1)
               || {? 2+P_INFO.TTUB().KOD='12'
::                   Połączenie urlopów.
                  || {? P_INFO.TTUB().KOD=_kod
                     || P_INFO.del()
                     ?};
                     {? P_INFO.seek(_base_ref)
                     || P_INFO.del()
                     ?}
                  ?}

::               Koniec urlopu.
               || P_INFO.OD:=_TAB.DO+1;
                  P_INFO.put()
               ?}

::             Rozdzielenie urlopów.
            || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
               P_INFO.OD:=_TAB.DO+1;
               P_INFO.add()
            ?}

         |? P_INFO.find_le(_do+1) & 2+P_INFO.TTUB().KOD='12'
         || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
            P_INFO.OD:=_TAB.DO+1;
            P_INFO.add();
            P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P',_kod);
            P_INFO.OD:=_do+1;
            P_INFO.add()
         ?}
      ?};
      P_INFO.cntx_pop();
      exec('upd_pi','osoba');
      {? ~_batch
      || exec('p_info','osoba');
         {? _nieobec
         || exec('wniosek','urlop_rodzicielski')
         ?}
      ?}
   ?}
?}


\p_info_update_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Modyfikuje zapisy w tabeli P_INFO po usunięciu rekordu w tabeli N.
::   WE: [_a] [INTEGER] - Tryb cichy (pomijać komunikaty):
::                         0 - Nie [domyślnie]
::                         1 - Tak.
::       [_b] [INTEGER] - Numer rubryki nieobecności [domyślnie: N.NB().RN].
::       [_c] [DATE]    - Data początkowa nieobecności [domyślnie: N.OD].
::       [_d] [DATE]    - Data końcowa nieobecności [domyślnie: N.DO].
::       [_e] [INTEGER] - Wymuszenie akcji (wywołanie z LSW).
::   WY:
::  OLD: \del_n/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;
_nb:={? var_pres('_b')=type_of(0) || _b || N.NB().RN ?};
_od:={? var_pres('_c')=type_of(date()) || _c || N.OD ?};
_do:={? var_pres('_d')=type_of(date()) || _d || N.DO ?};
_e:={? var_pres('_e')=type_of(0) || _e || 0 ?};

{? _e
|| _wych:=1;
   _mac:=0;
   _kod:='1211'
|| _wych:=__RUB.sys_attr(_nb,114);
   _mac:=__RUB.sys_attr(_nb,115);
   _kod:=
      {? _wych
      || '1211'
      |? _mac
      || '1240'
      || ''
      ?}
?};

{? _wych | _mac
|| {? ~_e & ~__RUB.sys_attr(_nb,1153)
::    Urlop macierzyński lub wychowawczy
   || exec('fp_fgsp','osoba','u',_od,_do)
   ?};

   _ds:=do_state();
   {? _ds=0
   || do()
   ?};
   P_INFO.cntx_psh();
   P_INFO.index('ST');
   P_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA,'A',);

   {? P_INFO.find_key(_do+1) & P_INFO.find_key(_od)
::    Usunięta nieobecność w całości pokrywała przedział w P_INFO. Przedział można usunąć.
   || P_INFO.del();
      {? P_INFO.find_key(_do+1) & 2+P_INFO.TTUB().KOD<>'12'
::       Jeżeli następny przedział nie jest przerwą to też możemy usunąć.
      || P_INFO.del()
      ?};
      {? P_INFO.find_le(_od) & 2+P_INFO.TTUB().KOD='12'
::       Rozdzielenie urlopu(ów)
      || P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
         P_INFO.OD:=_od;
         P_INFO.add()
      ?}

::    Zapis wielokrotny
   |? P_INFO.find_key(_od)
::    Początek urlopu
   || P_INFO.OD:=_do+1;
      P_INFO.put()

   |? P_INFO.find_key(_do+1)
::    Koniec urlopu
   || {? 2+P_INFO.TTUB().KOD='12'
::       Jeżeli następny rekord też jest przerwą to musimy wypełnić dziurę.
      || P_INFO.OD:=_do;
         P_INFO.ST:='A';
         P_INFO.TTUB:=exec('kod_zus','nieobecnosc','P','0110');
         P_INFO.add()

::       Nie przerwa? To tylko przesuwamy datę.
      || P_INFO.OD:=_od;
         P_INFO.put()
      ?}

::    Środek urlopu
   || {? P_INFO.find_ge(_do)
      || P_INFO.OD:=_od;
         P_INFO.add()
      ?};
      {? P_INFO.find_le(_od-1)
      || P_INFO.OD:=_do+1;
         P_INFO.add()
      ?}
   ?};
   P_INFO.cntx_pop();
   {? _ds=0
   || end()
   ?};

   exec('upd_pi','osoba');
   {? ~_batch
   || exec('p_info','osoba');
      {? ~_e
      || exec('wniosek','urlop_rodzicielski',_nb)
      ?}
   ?}
?}


\p_ipod_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli P_IPOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',ZALACZ,'NAG',P_IPOD.uidref())


\p_nskl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wertowanie tabeli P_NSKL - przerwy w opłacaniu składek.
::   WE:
::   WY:
::  OLD: \p_nskl/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
P_NSKL.cntx_psh();
P_NSKL.index('OD');
P_NSKL.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
P_NSKL.win_sel('WER');
P_NSKL.win_edit('RED');
P_NSKL.select(,1);
P_NSKL.cntx_pop();
~~


\akt_nskl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Sprawdzenie czy należy zweryfikować okresy nieskładkowe.
::   WE:
::   WY:
::  OLD: \akt_nskl/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? {? P_INFO.PREM().KOD='0'
   || _chk:=0;
      P_NSKL.index('OD');
      P_NSKL.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
      {? P_NSKL.first()
      || {!
         |? {? P_NSKL.TTUB().KOD='2500'
            || {? P_NSKL.OD<=P_INFO.OD
               || _chk:=(P_NSKL.DO=date(0,0,0))
               || 0
               ?}
            || P_NSKL.next()
            ?} & ~_chk
         !}
      ?};
      _chk
   || 1
   ?}
|| FUN.info('Zweryfikuj informacje o okresach nieskładkowych.'@);
   exec('p_nskl','osoba')
?}


\fp_fgsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2009+]
:: OPIS: Formuła uzupełnia daty od i do dla okresu nieopłacania składek na FP i FGŚP.
::   WE:  _a [STRING] - Rodzaj operacji:
::            a - dodawanie rekordu;
::            p - poprawianie rekordu;
::            u - usuwanie rekordu.
::        _b [DATE]   - Data od.
::        _c [DATE]   - Data do.
::  OLD: \fg_fgsp/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_akcja:=_a;
_od:=_b;
_do:=_c;

_kd:='FP_FGSP';
EDIT_VAR.KART_DEF==_kd;

KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix(EDIT_VAR.KART_DEF,);
{? KART_DEF.first()
|| KART_DOD.cntx_psh();
   KART_DOD.index('KART_DOD');
   KART_DOD.prefix(exec('ref_firma','ustawienia'),KART_DEF.ref(),P.OSOBA);
   _select:=0;
   {? _akcja='a'
   || {? FUN.ask(
            P.OSOBA().NAZWISKO+' '+P.OSOBA().PIERWSZE+'\n'+
            'Ustalać okres nieopłacania składek na Fundusz Pracy\n'
            'i Fundusz Gwarantowanych Świadczeń Pracowniczych?'@)
      || _rok:=_do~1;
         _mc:=_do~2+1;
         {? _mc>=13
         || _mc:=1;
            _rok+=1
         ?};
         _dt:=date(_rok,_mc,1);
         KART_DOD.blank();
         KART_DOD.KART_DEF:=KART_DEF.ref();
         KART_DOD.OSOBA:=P.OSOBA;
         KART_DOD.OD:=_dt;
         KART_DOD.DO:=date(_dt~1+3,_dt~2-1,0);
         KART_DOD.OPIS:='Przerwa w opłacaniu składek na FP i FGŚP';
         {? KART_DOD.add(1)
         || _select:=1;
            FUN.info(
               P.OSOBA().NAZWISKO+' '+P.OSOBA().PIERWSZE+'\n'+
               'Proszę zweryfikować zapisy w okresach nieopłacania składek na Fundusz Pracy\n'
               'i Fundusz Gwarantowanych Świadczeń Pracowniczych.'@)
         ?}
      ?}

   |? _a='p' | _a='u'
   || _select:=1;
      FUN.info(
         P.OSOBA().NAZWISKO+' '+P.OSOBA().PIERWSZE+'\n'+
         'Zmieniono okres trwania urlopu.\n'
         'Proszę zweryfikować zapisy w okresach nieopłacania składek na Fundusz Pracy\n'
         'i Fundusz Gwarantowanych Świadczeń Pracowniczych.'@)
   ?};
   {? _select
   || exec('select4cp','kart_dod',EDIT_VAR.KART_DEF,'PKD_EZK_ORNN','PKD_EZK_OPNN')
   ?};
   KART_DOD.cntx_pop()
?};
KART_DEF.cntx_pop();

EDIT_VAR.KART_DEF==_kd;
~~


\zapisz_adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Zapisuje do tabeli (tymczasowej) informacje o aktualnym adresie.
::       Uwagi
::          Funkcja nie weryfikuje poprawności argumentów.
::          Funkcja może zmienić pozycję kursora w tabeli OS_ADRES.
::   WE:  _a  [TABLE]  - Alias tabeli, w której będą zapisane informacje o adresie.
::        _b  [STRING] - Rodzaj adresu.
::       [_c] [DATE]   - Data badania stanu (domyślnie: date()];
::   WY: Adres został znaleziony i dane udało się zapisać [0/1].
::  OLD: \zapisz/adres.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;
_typ:=_b;
_dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};

_add:=$("_a.TYP:='"+_b+"'; _a.NR+=1; _a.OPIS:=_b; _a.WARTOSC:=_c; _a.add()");

{? exec('szukaj','osoba',_typ,_dt)
|| _TAB.blank();
   KRAJE.cntx_psh();
   _add(_TAB,'Kraj',OS_ADRES.KRAJ().NAZ);
   KRAJE.cntx_pop();
   _add(_TAB,'Województwo',OS_ADRES.WOJEWODZ);
   _add(_TAB,'Powiat',OS_ADRES.POWIAT);
   _add(_TAB,'Gmina',OS_ADRES.GMINA);
   _add(_TAB,'Miejscowość',OS_ADRES.MIASTO);
   _add(_TAB,'Ulica',exec('ulica','osoba'));
   _add(_TAB,'Poczta',exec('poczta','osoba'));
   _add(_TAB,'Telefon',OS_ADRES.TEL);
   _add(_TAB,'e-Mail',OS_ADRES.EMAIL)
?}


\pokaz_adresy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Wyświetla w okienku informacje o aktualnych adresach osoby (właściwych według bieżącej daty).
::   WE: [_a] [STRING] - Lista zawierająca kody rodzajów adresów, które mają być prezentowane.
::       [_b] [DATE]   - Data badania stanu (domyślnie: date()];
::  OLD: \osoba/adres.fml
::----------------------------------------------------------------------------------------------------------------------
_lista:={? var_pres('_a')=type_of('') || _a || 'SCKI' ?};
_dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};

_BUF:=tab_tmp(2,
   'TYP','STRING[1]','Typ'@,
   'NR','INTEGER','Lp.'@,
   'OPIS','STRING[11]','Opis'@,
   'WARTOSC','STRING[175]','Wartość'@
);
_wnd:=_BUF.mk_sel(,'N',0,'#pokaz_adresy');
_BUF.win_fld(_wnd,,'OPIS',,,11,,,,1);
_BUF.win_fld(_wnd,,'WARTOSC',,,70,,,,1);
_grp:=_BUF.grp_make(,,'#os_adres_grp',20,10,,,'normal');


OS_ADRES.cntx_psh();
_os_us:=null();
{!
|? _lista<>''
|! _typ:=1+_lista;
   {? exec('zapisz_adres','osoba',_BUF,_typ,_dt)
   || _ref:=OS_ADRES.ref();
      _tytul:=exec('rodzaj','osoba',_typ);
      {? ~_os_us & (1+exec('adresdous','osoba',date~1))='1' & OS_ADRES.ref()=_ref
      || _tytul+=' (dla celów podatkowych)';
         _os_us:=OS_ADRES.ref()
      ?};
      _BUF.grp_sel(_grp,,_wnd,_tytul,
:        po odświeżeniu
         "",
:        położenie i wysokość
         ,,9,
:        przed obsługą
         $("cur_tab(1,1).prefix('"+_typ+"')"),
:        po obsłudze
         "",
:        utrwalenie, aktywacja, wypełnienie
         0,0,'maximized'
      )
   ?};
   _lista:=1-_lista
!};
OS_ADRES.cntx_pop();
{? _BUF.size()
|| _BUF.win_sel(_grp);
   _BUF.hdr_sel(exec('record','#to_string',OSOBA.ref()));
   _BUF.select()
|| FUN.info('Brak danych adresowych.'@)
?}


\pit12_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Formuła udostępniająca informacje o złożonym przez osobę oświadczeniu PIT-12.
::   WE: [_a] [REFERENCE] - Wskazanie na osobę [domyślnie: bieżący rekord tabeli OSOBA].
::       [_b] [INTEGER]   - Rok podatkowy [domyślnie: bieżący rok].
::   WY: Tablica z elementami nazwanymi:
::          Jeżeli w systemie nie została zdefiniowana tabela PIT12O - pole JEST przyjmie wartość 1.
::          Jeżeli znaleziony zostanie odpowiedni rekord to polu JEST zostanie nadana wartość 2, a pozostałe pola
::          tablicy przyjmą wartości pól rekordu. I tylko w takim przypadku (JEST=2) uprawnione są odwołania do
::          pozostałych pól.
::          Jeżeli rekord nie został odnaleziony - pole JEST przyjmie wartość 0.
::----------------------------------------------------------------------------------------------------------------------
_odp:=obj_new('JEST','KOSZTY','ODLICZ','MC','STATUS','PODATEK','P','LT');
_odp.JEST:=0;

{? var_pres('PIT12O')<>type_of(SYSLOG)
|| _odp.JEST:=1;
   return(_odp)
?};

_osoba:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA || _a || OSOBA.ref() ?};
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};

PIT12O.cntx_psh();
PIT12O.index('ORP');
PIT12O.prefix(_osoba,_rok);
{? PIT12O.first()
|| _odp.JEST:=2;
   _odp.KOSZTY:=PIT12O.KOSZTY;
   _odp.ODLICZ:=PIT12O.ODLICZ;
   _odp.MC:=PIT12O.MC;
   _odp.STATUS:=PIT12O.STATUS;
   _odp.PODATEK:=PIT12O.DOZAP-PIT12O.NADPL;
   _odp.P:=PIT12O.P;
   _odp.LT:=PIT12O.LT
?};
PIT12O.cntx_pop();

_odp


\pit12_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Formuła uaktualnia (jeżeli to możliwe) zapisy techniczne w oświadczeniu PIT12O i PIT12R. Obsługuje dwa rodzaje
::       aktualizacji, wskazywane pierwszym parametrem. Kolejne parametry zależa właśnie od pierwszego.
::   WE: [_a] [REFERENCE] - Wskazanie na osobę [domyślnie: bieżący rekord tabeli OSOBA].
::       [_b] [INTEGER]   - Rok podatkowy [domyślnie: bieżący rok].
::       _c [STRING] - Tryb działania
::             = 'O'  - Obliczenie podatku.
::             = 'R'  - Rozliczenie na liście.
::             = 'UR' - Usuwanie danych z listy.
::             = 'UO' - Usuwanie e-Deklaracji PIT-40.
::       _d - Typ i znaczenie parametru zależne od wartości _c.
::           Dla _c='O'  - Podatek do rozliczenia - różnica między podatkiem należnym a sumą zaliczek.
::                        Wartość dodatnia jest kwotą "do zapłaty", wartość ujemna "nadpłatą".
::           Dla _c='R'  - Wskazanie na pracownika.
::           Dla _c='UR' - Wskazanie na pracownika.
::       _e [STRING] - Znak listy (parametr istotny jeżeli _c='R' lub _c='UR').
::       _f [REAL]   - Rozliczony podatek (parametr istotny jeżeli _c='R').
::       _g [REAL]   - Rozliczenie w gotówce (parametr istotny jeżeli _c='R').
::   WY: Opis błędu / przyczyny niepowodzenia lub '' w przypadku prawidłowej aktualizacji.
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA || _a || OSOBA.ref() ?};
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};

{? var_pres('_c')=type_of('') & (_c='O' | _c='R' | _c='UR' | _c='UO')
|| _akcja:=_c
|| return('Nieprawidłowa wartość parametru AKCJA.'@)
?};

_odp:='Nierozpoznany błąd.'@;
PIT12O.cntx_psh();
PIT12O.index('ORP');
PIT12O.prefix(_osoba,_rok);
{? PIT12O.first()
|| {? _akcja='O'
   || {? var_pres('_d')<>type_of(0)
      || _odp:='Nieprawidłowa wartość parametru KWOTA.'@

      |? PIT12O.STATUS='W' | PIT12O.STATUS='O'
::       Pierwsze lub kolejne wystawienie PIT-40.
      || PIT12O.STATUS:='O';
         {? _d<=0
         || PIT12O.NADPL:=-_d;
            PIT12O.DOZAP:=0
         || PIT12O.NADPL:=0;
            PIT12O.DOZAP:=_d
         ?};
         _odp:={? PIT12O.put() || '' || 'Aktualizacja nie powiodła się.'@ ?}

      |? PIT12O.STATUS='R'
::       Podatek został już rozliczony na liście!
      || {? PIT12O.DOZAP-PIT12O.NADPL=_d
::          Jeżeli kwota się nie zmieniła, to wszystko jest OK
         || _odp:=''
::          Kwota się zmieniła - operator musi zostać o tym poinformowany.
         || _form:="form(_a,,2,'9,')";
            _odp:=
               'Kwota obecnie wyliczonego podatku do rozliczenia (%1) jest różna\n'
               'od kwoty wyliczonej poprzednio (%2) i już rozliczonej na liście %3.'@
               [_form(_d),_form(PIT12O.DOZAP-PIT12O.NADPL),PIT12O.LT]
         ?}
      ?}

   |? _akcja='R'
   || {? ~(var_pres('_d')=type_of(null()) & ref_name(_d)=P.name())
      || _odp:='Nieprawidłowa wartość parametru P.'@
      |? var_pres('_e')<>type_of('')
      || _odp:='Nieprawidłowy typ parametru LT.'@
      |? var_pres('_f')<>type_of(0)
      || _odp:='Nieprawidłowy typ parametru ROZLT.'@
      |? var_pres('_g')<>type_of(0)
      || _odp:='Nieprawidłowy typ parametru ROZGOT.'@
      |? PIT12O.STATUS='W'
::       Właściwie taka sytuacja nie powinna mieć miejsca - na podstawie rekordu W nie można rozliczyć podatku. Sytuacja
::       powinna być (i jest) obsłużona po wywołaniu 'p12_get'.
      || _odp:='Podatek nie został jeszcze rozliczony. Wykonaj deklarację PIT-40.'@
      |? PIT12O.STATUS='O' | (PIT12O.STATUS='R' & PIT12O.P=_d & PIT12O.LT=_e)
::       Pierwsze "Oblicz" na liście lub kolejne ale dla tego samego pracownika i na tej samej liście.
      || _put:=0;
         {? PIT12O.STATUS='O'
         || PIT12O.STATUS:='R';
            PIT12O.P:=_d;
            PIT12O.LT:=_e;
            _put+=1
         ?};
         _mn:={? PIT12O.NADPL>0 || -1 || 1 ?};
         {? PIT12O.ROZLLT<>_mn*_f || PIT12O.ROZLLT:=_mn*_f; _put+=1 ?};
         {? PIT12O.ROZLGOT<>_mn*_g || PIT12O.ROZLGOT:=_mn*_g; _put+=1 ?};
         {? _put
         || _odp:={? PIT12O.put() || '' || 'Aktualizacja nie powiodła się.'@ ?}
         || _odp:=''
         ?}
::       Pozostałe przypadki uznajemy za prawidłowe niewymagające obsługi.
      || _odp:=''
      ?}

   |? _akcja='UR'
   || {? ~(var_pres('_d')=type_of(null()) & ref_name(_d)=P.name())
      || _odp:='Nieprawidłowa wartość parametru P.'@
      |? var_pres('_e')<>type_of('')
      || _odp:='Nieprawidłowy typ parametru LT.'@
      |? PIT12O.STATUS='R' & PIT12O.P=_d & PIT12O.LT=_e
      || PIT12O.STATUS:='O';
         PIT12O.P:=null();
         PIT12O.LT:='';
         PIT12O.ROZLLT:=PIT12O.ROZLGOT:=0;
         _odp:={? PIT12O.put() || '' || 'Aktualizacja nie powiodła się.'@ ?}

::       Pozostałe przypadki uznajemy za prawidłowe niewymagające obsługi.
      || _odp:=''
      ?}

   |? _akcja='UO'
   || {? PIT12O.STATUS='O'
      || PIT12O.STATUS:='W';
         PIT12O.DOZAP:=PIT12O.NADPL:=0;
         _odp:={? PIT12O.put() || '' || 'Aktualizacja nie powiodła się.'@ ?}
      |? PIT12O.STATUS='R'
      || _odp:='Podatek został juz rozliczony na liście płac (%1).'@ [PIT12O.LT]

::       Pozostałe przypadki uznajemy za prawidłowe niewymagające obsługi.
      || _odp:=''
      ?}
   ?}
|| _odp:='Brak oświadczenia PIT-12.'@
?};
PIT12O.cntx_pop();
_odp


\email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.28]
:: OPIS: Zwraca adres e-mail osoby na podany dzień.
::       Kolejność poszukiwania: adres do korespondencji, stały, czasowy i inny
::   WE:  _a  - wskazanie na osobę
::       [_b] - data, domyślnie bieżąca
::   WY: adres e-mail lub '' gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=date() ?};
_email:='';
OS_ADRES.cntx_psh();
OSOBA.cntx_psh();
OSOBA.prefix();
{? OSOBA.seek(_a)
|| {? exec('szukaj','osoba','K',_b) & OS_ADRES.EMAIL<>''
   || _email:=OS_ADRES.EMAIL
   ?};
   {? _email='' & exec('szukaj','osoba','S',_b) & OS_ADRES.EMAIL<>''
   || _email:=OS_ADRES.EMAIL
   ?};
   {? _email='' & exec('szukaj','osoba','C',_b) & OS_ADRES.EMAIL<>''
   || _email:=OS_ADRES.EMAIL
   ?};
   {? _email='' & exec('szukaj','osoba','I',_b) & OS_ADRES.EMAIL<>''
   || _email:=OS_ADRES.EMAIL
   ?}
?};
OSOBA.cntx_pop();
OS_ADRES.cntx_pop();
_email


\os_adres_zagr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Sprawdzenie, czy adres korespondencyjny jest zagraniczny
::   WE:
::   WY: 1 - tak, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
_zagr:=0;
{? OS_ADRES.KRAJ<>null() & OS_ADRES.KRAJ().KODISO<>'PL'
|| _zagr:=1
?};
_zagr


\os_adres_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie zgodności z TERYT adresu do korespondencji kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('os_adres_zagr','osoba')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.TAB:='OS_ADRES';
   _par.ULI_P:='ULICA';
   _par.MSC_P:='MIASTO';
   _par.GMI_P:='GMINA';
   _par.POW_P:='POWIAT';
   _par.WOJ_P:='WOJEWODZ';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   _wyn.WYNIK
?}


\os_adres_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [20.14]
:: OPIS: Wyszarzenie klawiszy teryt
::   WE: _a - akronim okna redagowania
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_we:=_a;
{? _we='RED'
|| {? XINFO.TER_AKT<>'T' | exec('os_adres_zagr','osoba')
   || OS_ADRES.btn_eopt(_we,'WOJEWODZ','state=grayed');
      OS_ADRES.btn_eopt(_we,'POWIAT','state=grayed');
      OS_ADRES.btn_eopt(_we,'GMINA','state=grayed');
      OS_ADRES.btn_eopt(_we,'MIASTO','state=grayed');
      OS_ADRES.btn_eopt(_we,'ULICA','state=grayed')
   || OS_ADRES.btn_eopt(_we,'WOJEWODZ','state=normal');
      OS_ADRES.btn_eopt(_we,'POWIAT','state=normal');
      OS_ADRES.btn_eopt(_we,'GMINA','state=normal');
      OS_ADRES.btn_eopt(_we,'MIASTO','state=normal');
      OS_ADRES.btn_eopt(_we,'ULICA','state=normal')
   ?}
?}


\osoba_adres_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesosnow [20.14]
:: OPIS: sprawdzanie zgodności z TERYT adresu w danych osobowych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('os_adres_zagr','osoba')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.PYT_KOM:='P';
   _par.TAB:='OS_ADRES';
   _par.ULI_P:='ULICA';
   _par.MSC_P:='MIASTO';
   _par.GMI_P:='GMINA';
   _par.POW_P:='POWIAT';
   _par.WOJ_P:='WOJEWODZ';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   {? ~_wyn.DALEJ || _wyn.POLE || '' ?}
|| ''
?}


\rd_teryt_wyszarz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [20.14]
:: OPIS: Wyszarzanie przycisków Teryt
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_red:='RED';
{? RD.win_edit('?')='RED'
|| {? XINFO.TER_AKT<>'T' | exec('rd_zagr','osoba')
   || RD.btn_eopt(_red,'GMINA','state=grayed');
      RD.btn_eopt(_red,'MIASTO','state=grayed');
      RD.btn_eopt(_red,'ULICA','state=grayed')
   || RD.btn_eopt(_red,'GMINA','state=normal');
      RD.btn_eopt(_red,'MIASTO','state=normal');
      RD.btn_eopt(_red,'ULICA','state=normal')
   ?}
?};
~~


\rd_zagr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: wesos [20.14]
:: OPIS: Sprawdzenie, czy adres członka rodziny jest zagraniczny
::   WE:
::   WY: 1 - tak, 0 - nie
::----------------------------------------------------------------------------------------------------------------------
_zagr:=0;
{? RD.KRAJ<>null() & RD.KRAJ().KODISO<>'PL'
|| _zagr:=1
?};
_zagr


\init_desc_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [20.42]
:: OPIS: Inicjalizuje tablicę nazwaną dla elementów opisu czynności
::   WE:
::   WY: tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_tab:=obj_new(
:: Czy tablica zawiera dane [T/N]
   'ZAW_DANE',
:: Nazwisko osoby
   'NAZWISKO',
:: Pierwsze imię osoby
   'PIERWSZE',
:: Czy osoba jest obcokrajowcem [T/N]
   'OBCY',
:: Numer paszportu
   'PASZPORT',
:: PESEL osoby
   'PESEL',
:: Data urodzenia osoby
   'UR_DATA',
:: Data wniosku
   'DATAW'
);
{! _ii..obj_len(_tab) |! _tab[_ii]:='' !};
_tab


\zus_rap_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Prezentacja wysłanych dla pracownika raportów ZUS
::   WE: [_a][_OSOBA] - wskazanie na osobę, domyślnie bieżąca osoba (OSOBA.ref())
::       [_b][STRING] - typ raportu zus do wykazania w zestawieniu (np. 'ZUA')
::       ... [STRING] - ... kolejne typy raportów
::       [_z][STRING] - ---"---
::   WY: _TAB - tabela z listą raportów dla konkretnej osoby. Jeśli nie podano typów raportów do zestawienia
::              będą zakwalifikowane wszystkie typy zawarte w kartotece ZUS_RAP.
::----------------------------------------------------------------------------------------------------------------------
_osoba:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=OSOBA || _a || OSOBA.ref() ?};
:: Budowanie klauzuli WHERE na podstawie nadejszłych parametrów:
_where:=_tyt:='';
{! _ii:=2.._
|? _ii<>-1
|! {? type_of(_[_ii])=type_of('')
   || {? _ii=2
      || _where+=' and ('
      || _where+=' or ';
         _tyt+=', '
      ?};
      _where+='ZUS_RAP.RAPORT=\'%1\''[_[_ii]];
      _tyt+=_[_ii]
   || _where:=_tyt:='';
      _ii:=-1
   ?}
!};
{? +_where
|| _where+=')'
?};
{? +_tyt
|| _tyt:=' (%1)'[_tyt]
?};
:: Zapytanie SQL:
_TAB:=sql('
   select OSOBA.NAZWISKO, OSOBA.PIERWSZE, OSOBA.PESEL, ZUS_RAP.RAPORT, ZUS_RAP.DATA, USERS.KOD
   from ZUS_RAP
   join OSOBA using(ZUS_RAP.OSOBA, OSOBA.REFERENCE)
   join USERS using(ZUS_RAP.USER, USERS.REFERENCE)
   where ZUS_RAP.OSOBA=:_a %1
   order by ZUS_RAP.DATA
   '[_where]
   ,_osoba);
:: Jeśli zebrano dane, budowa okienka wertowania:
{? _TAB.first()
|| _wer:=_TAB.mk_sel('Raporty ZUS współpracownika%1'@[_tyt],,,'#zus_rap_sel',,,,,'U',,,,,'html_maximized');
   _TAB.win_fld(_wer,,'NAZWISKO',,,20,,,'Nazwisko'@,,'Aktualne nazwisko'@);
   _TAB.win_fld(_wer,,'PIERWSZE',,,20,,,'Imię'@,,'Pierwsze imię'@);
   _TAB.win_fld(_wer,,'PESEL',,,'11,14',,,'PESEL'@,,'Numer PESEL osoby'@);
   _TAB.win_fld(_wer,,'RAPORT',,,6,,,'Raport'@,,'Typ raportu'@);
   _TAB.win_fld(_wer,,'DATA',,,13,,,'Data utworzenia'@,,'Data wygenerowania raportu'@);
   _TAB.win_fld(_wer,,'KOD',,,19,,,'Operator'@,,'Kod użytkownika'@);
   _TAB.win_act(_wer,0,'Kolejność');
   _TAB.win_sel(_wer);
   _red:=_TAB.mk_edit('Raport ZUS współpracownika'@,0,'#zus_rap_e');
   _TAB.win_efld(_red,,'NAZWISKO',,,20,0,0,'Nazwisko'@,0,'Aktualne nazwisko'@);
   _TAB.win_efld(_red,,'PIERWSZE',,,20,0,0,'Imię'@,0,'Pierwsze imię'@);
   _TAB.win_efld(_red,,'PESEL',,,'11,14',0,0,'PESEL'@,0,'Numer PESEL osoby'@);
   _TAB.win_efld(_red,,'RAPORT',,,6,0,0,'Raport'@,0,'Typ raportu'@);
   _TAB.win_efld(_red,,'DATA',,,13,0,1,'Data utworzenia'@,0,'Data wygenerowania raportu'@);
   _TAB.win_efld(_red,,'KOD',,,13,0,1,'Operator'@,0,'Kod użytkownika'@);
   _TAB.win_edit(_red);
   _TAB.select()
|| FUN.info('Brak wysłanych raportów ZUS.'@)
?};

~~


\pkd_osoba_di
::----------------------------------------------------------------------------------------------------------------------
::   UTW: mafilo [22.26]
::  OPIS: Uzupełnienie pól DI w tabeli OSOBA
::    WE: _a [ARRAY] - tablica zwrócona przez formułę \pkd_osoba_di_arg określająca, które wtyczki należy wywołać
::        [_b] - argument wtyczki PKD_OSOBA_DI_1_001
::        [_c] - argument wtyczki PKD_OSOBA_DI_2_001
::        [_d] - argument wtyczki PKD_OSOBA_DI_3_001
:: UWAGA: Poprawność argumentów wywołania nie jest weryfikowana, użycie niezgodne ze specyfikacją spowoduje błąd.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<100 || return() ?};
{? _a.wtyczka1=0 & _a.wtyczka2=0 & _a.wtyczka3=0 || return() ?};

_RS:= sql(
   {? _a.firma<>0
   || 'select DISTINCT P.OSOBA as REF from P where P.FIRMA=:_a'
   || 'select OSOBA.REFERENCE as REF from OSOBA'
   ?},
   exec('ref_firma','ustawienia')
);

OSOBA.cntx_psh();
_loop:=_RS.first();
{!
|? _loop
|! {? OSOBA.seek(_RS.REF,,1)
   ||
     _put:=0;
      {? _a.wtyczka1<>0 & Plugin.runnable('PKD_OSOBA_DI_1_001')
      || _wtyczka:=Plugin.run('PKD_OSOBA_DI_1_001',{? var_pres('_b')>=0 || _b || ~~ ?});
         {? type_of(_wtyczka)<>type_of(~~)
         || OSOBA.DI_1:=form(_wtyczka);
            _put+=1
         ?}
      ?};
      {? _a.wtyczka2<>0 & Plugin.runnable('PKD_OSOBA_DI_2_001')
      || _wtyczka:=Plugin.run('PKD_OSOBA_DI_2_001',{? var_pres('_c')>=0 || _c || ~~ ?});
         {? type_of(_wtyczka)<>type_of(~~)
         || OSOBA.DI_2:=form(_wtyczka);
            _put+=1
         ?}
      ?};
      {? _a.wtyczka3<>0 & Plugin.runnable('PKD_OSOBA_DI_3_001')
      || _wtyczka:=Plugin.run('PKD_OSOBA_DI_3_001',{? var_pres('_d')>=0 || _d || ~~ ?});
         {? type_of(_wtyczka)<>type_of(~~)
         || OSOBA.DI_3:=form(_wtyczka);
            _put+=1
         ?}
      ?};
      {? _put<>0
      || OSOBA.put()
      ?}
   ?};
   _loop:=_RS.next()
!};
OSOBA.cntx_pop();
~~


\pkd_osoba_di_arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: mafilo [22.26]
:: OPIS: Formuła tworzy tablicę nazwaną z elementami parametryzującymi wybór wtyczki.
::       Formuła wykorzystywana w funckji \pkd_osoba_di
::   WE: [_a] [INTEGER] - wywołanie dla pola DI_1 (jeśli puste - nie wywołuj wtyczki PKD_OSOBA_DI_1_001)
::       [_b] [INTEGER] - wywołanie dla pola DI_2 (jeśli puste - nie wywołuj wtyczki PKD_OSOBA_DI_2_001)
::       [_c] [INTEGER] - wywołanie dla pola DI_3 (jeśli puste - nie wywołuj wtyczki PKD_OSOBA_DI_3_001)
::       [_d] [INTEGER] - argument, z jakiej firmy mają być przetworzone dane osoby (domyślnie - tylko z danej firmy)
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
_arg:=obj_new('wtyczka1','wtyczka2','wtyczka3','firma');
_arg.wtyczka1:=0;
_arg.wtyczka2:=0;
_arg.wtyczka3:=0;
_arg.firma:=1;

{? var_pres('_a')=type_of(0) || _arg.wtyczka1:=(_a<>0) ?};
{? var_pres('_b')=type_of(0) || _arg.wtyczka2:=(_b<>0) ?};
{? var_pres('_c')=type_of(0) || _arg.wtyczka3:=(_c<>0) ?};
{? var_pres('_d')=type_of(0) || _arg.firma:=_d ?};

_arg


\telefon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Zwraca numer telefonu osoby na podany dzień.
::       Kolejność poszukiwania: adres do korespondencji, czasowy, stały i inny
::   WE:  _a  - wskazanie na osobę
::       [_b] - data, domyślnie bieżąca
::   WY: numer telefonu lub '' gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=date() ?};
_tel:='';
OS_ADRES.cntx_psh();
OSOBA.cntx_psh();
OSOBA.prefix();
{? OSOBA.seek(_a)
|| {? exec('szukaj','osoba','K',_b) & OS_ADRES.TEL<>''
   || _tel:=OS_ADRES.TEL
   |? exec('szukaj','osoba','C',_b) & OS_ADRES.TEL<>''
   || _tel:=OS_ADRES.TEL
   |? exec('szukaj','osoba','S',_b) & OS_ADRES.TEL<>''
   || _tel:=OS_ADRES.TEL
   |? exec('szukaj','osoba','I',_b) & OS_ADRES.TEL<>''
   || _tel:=OS_ADRES.TEL
   ?}
?};
OSOBA.cntx_pop();
OS_ADRES.cntx_pop();
_tel


\rd_stnp_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wartość początkowa pola RD.STNP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=null();
S_ZUS.cntx_psh();
S_ZUS.index('S_ZUS');
S_ZUS.prefix('N','0');
{? S_ZUS.first()
|| _ret:=S_ZUS.ref()
?};
S_ZUS.cntx_pop();

_ret


\rd_zcza_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Po redagowaniu pola RD.ZCZA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rd_efld_opt','osoba')


\czy_aktywna_umowa
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Sprawdza, czy dana osoba ma aktywną umowę zgodną z kodem płatnika dla oświadczenia.
::   WE: _a - [REF] ref Osoby
::       _b - [DATE] data do wyszukiwania
::       [_c] - [reference] - ref oświadczenia lub ref wniosku
::       [_d] [STRING] - kod płatnika
::       [_e] [DATE] data dokumentu
::  WY:  1 - jest aktywna umowa
::  OLD: \czy_aktywna_umowa/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_data:=_b;
_typ:='';
_wniosek:=null();
{? var_pres('_c')=type_of(null)
|| {? ref_name(_c)=OS_ZWPOD.name()
   || _wniosek:=_c;
      _data_wniosku:=OS_ZWPOD.D_OB;
      _typ:='OS_ZWPOD'
   |? ref_name(_c)=OS_ZWZAL.name()
   || _wniosek:=_c;
      _data_wniosku:=OS_ZWZAL.D_OB;
      _typ:='OS_ZWZAL'
   ?}
?};
_platnik:={? var_pres('_d')=type_of('') || _d || '' ?};
_wynik:=0;

{? _platnik=''
|| _d_tmp:=exec('zatr_ciag_osob','osoba',_osoba,_data);
   _wynik:=_d_tmp<>#0 &_d_tmp<=_data_wniosku;
   {? ~_wynik
   || _d_tmp:=exec('zatr_ciag_osob','osoba',_osoba,_data,'Z');
      _wynik:=_d_tmp<>#0 &_d_tmp<=_data_wniosku;
      return(_wynik)
   ?}
?};
_kod:='';
{? _wniosek<>null
|| OS_GRPRZ.index(_typ);
   OS_GRPRZ.prefix(_wniosek);
   {? OS_GRPRZ.first()
   || {!
      |? {? OS_GRPRZ.SLO_KOD().KOD=_platnik
         || _kod:=_platnik
         ?};
         _kod='' & OS_GRPRZ.next()
      !}
   || _kod:=_platnik
   ?}
|| {? var_pres('_e')=type_of(date())
   || _data_wniosku:=_e
   || _data_wniosku:=_data
   ?};
   _kod:=_platnik
?};
{? _kod<>''
|| {? _kod='UM_PRAC'
   || _d_tmp:=exec('zatr_ciag_osob','osoba',_osoba,_data);
      _wynik:=_d_tmp<>#0 &_d_tmp<=_data_wniosku
   || _d_tmp:=exec('zatr_ciag_osob','osoba',_osoba,_data,'Z',_kod);
      _wynik:=_d_tmp<>#0 &_d_tmp<=_data_wniosku
   ?}
?};
_wynik


\zatr_ciag_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [22.26]
:: OPIS: Znajduje datę ciągłości zatrudnienia od wskazanej parametrem daty badania danej osoby dla formy zatrudnienia P.
::   WE: _a OSOBA.ref - ref osoby
::       _b DATE - data badania dla tej daty sprawdzona będzie ciągłość zatrudnienia
::       [_c] STRING[1] - opcjonalna forma zatrudnienia - domyślnie: P
::       [_d] STRING - kod płatnika
::   WY: [data] > 0000/00/00 - pierwsza data ciągłosci zatrudnienia
::       [data] = 0/0/0 - brak ciągłości dla podanej daty - pracownik na tę datę nie był zatrudniony
::  OLD: \zatr_ciag_osob/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _osoba:=_a
|| return(#0)
?};
{? var_pres('_b')=type_of(date)
|| _data_badania:=_b
|| return(#0)
?};
{? var_pres('_c')=type_of('')
|| _f_zatr:=_c
|| _f_zatr:='P'
?};
{? var_pres('_d')=type_of('')
|| _kod:=_d
|| _kod:=''
?};
_firma:=exec('ref_firma','ustawienia');
{? _f_zatr='Z'
|| _sql:='select ZC.DU DZA, ZC.DZB DZ '
         'from ZC join RU join OS_GRRU using(RU.REFERENCE, OS_GRRU.RU) join P using(ZC.P, P.REFERENCE) join '
         'SLO_KOD using(SLO_KOD.REFERENCE, OS_GRRU.SLO_KOD) '
         'where ZC.OSOBA = :_a and (SLO_KOD.KOD = \':_b\' or \':_b\'=\'\') and P.FIRMA=:_c'
         'order by 1 ';
   _tab:=sql(_sql,_osoba,_kod,_firma)
|| _tab:=sql('
      select P.DZA, P.DZ
      from P join F_ZATR
      where P.OSOBA=:_a and F_ZATR.KOD=\':_b\' and P.FIRMA=:_c
      order by 1
      ',_osoba,_f_zatr,_firma)
?};

_od:=_do:=#0;
{? _tab.find_le(_data_badania)
|| _do:=_data_badania;
   {!
   |? {? _do>=_tab.DZA & (_tab.DZ>=_do | _tab.DZ=#0)
      || _od:=_tab.DZA;
         _do:=_tab.DZA-1
      ?};
      _tab.prev()
   !}
?};
_od

:Sign Version 2.0 jowisz:1045 2023/11/13 12:41:56 1e3f744022eb142addb168d9c41b34ce39c5af894ff12b29f7c1f0d1e9d86ab4aaa1cab393351aa8ecdb1de4dc32f820874c7b17e9b5388217616324f6cdc4aff28fa76f1550166bdc76428404a4a8ea5e331e744d592ac2203f2fe76e1ff2612da3bb31979ebb30c1b526a406063812f63b3e72eddcc07b8765d4ef7577c3b4
