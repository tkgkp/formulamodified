:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zamsiw_limit.fml
:: Utworzony: 08.07.2015
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Obsługa zamówień sprzedaży/wewnętrznych - limity
::======================================================================================================================


\ZK_P_4_ZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Szuka pozycji zamówienia wewnętrznego dla podanego limitu i ewentualnie aktualizuje ilość na zamówieniu
::   WE: [_a] - ZK_N.ref() - nagłówek zamówienia, do którego dopinane jest zapotrzebowanie limitu
::       [_b] - 0/1 - zachowanie,
::              [0] - gdy nie znaleziono zwroci null()
::               1  - gdy nie znaleziono stworzy ZK_P, gdy znaleziono zaktualizuje (m.in. ilosc i daty)
::       [_c] - 0/1 - rezerwacja ZK_P  domyslnie 0 - nie, 1 - tak
::       [_d] - 1(domyslnie)-aktualizacja zamowien 0-nie
::       Kontekst wywolania: rekord ZLIM
::   WY: ZK_P.ref() lub null()
::  OLD: \ZK_P_4_ZLIM/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
_zk_n:={? _>0
        & type_of(_a)=type_of(ZK_N.ref())
        & _a<>null()
       || _a
       || null()
       ?};
_wtdo:={? _>1 & type_of(_b)=1 || _b<>0 || 0 ?};

_resr:={? _>2 & type_of(_c)=1 & ZLIM.MG().PAL<>'T' || _c<>0 || 0 ?};

{? _>=4 || {? type_of(_d)<>1 || _d:=1 ?} || _d:=1 ?};
_aktzk:=_d;

{? _zk_n=null()
|| _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
      ZLIM.ZLEC,ZLIM.WYD,_wtdo,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
   );
   {? _zk_n=null()
   || _zk_n:=exec('ZK_N_4_ZLiWYD','zamsiw_limit',
         ZLIM.ZLDOD,ZLIM.WYD,_wtdo,,,{? ZLIM.MG().PAL='T' || ZLIM.MG || null() ?},ZLIM.GROP
      )
   ?}
?};

_result:=null();

ZK_P.cntx_psh();
{? _zk_n<>null()
|| BEER.ZK_N:=_zk_n;
   BEER.TYP:='Z';

   _zlim_ref:=exec('do_kor_ref','zl_limit',ZLIM.ref());
   _from_sm:=exec('zl_from_sm','zl_head',ZLIM.ZLEC);
   ZK_P.clear();
   ZK_P.index('ZLIM');
   ZK_P.prefix(ref_name(_zlim_ref),_zlim_ref);
   {? ZK_P.first()
   || _result:=ZK_P.ref()
   ?};

   {? _wtdo=1
   ||
      {? _aktzk
      || VAR_DEL.delete('__matakt');
         __matakt:=tab_tmp(2
            ,'REF','STRING[16]',''
            ,'NRK','INTEGER',''
            ,'ILR','REAL',''
            ,'ZKP','STRING[16]',''
            ,'ZKN','STRING[16]','')
      ?};

      _lim_all:={? ZLIM.AKC<>'T' || ZLIM.LIL || 0 ?};

      ZLIM.cntx_psh();
      {? ZLIM.GROP<>null()
      || ZLIM.index('GROPM');
         ZLIM.prefix(ZLIM.GROP,ZLIM.KTM)
      || ZLIM.index('ZGP_M');
         ZLIM.prefix(ZLIM.ZGP,ZLIM.KTM)
      ?};
      {? ZLIM.first()
      || {!
         |?
            {? ZLIM.AKC='T' || _lim_all+=ZLIM.LIL ?};
            ZLIM.next()
         !}
      ?};
      ZLIM.cntx_pop();

      {? _lim_all>0
       & _result=null()
      || ZK_P.blank();
         ZK_P.CZYBEZ:='T';
         ZK_P.ILBEZ:=_lim_all;

::       Data powolania, zwrot planowania z naglowka
         ZK_P.DP:=BEER.ZK_N().DP;
         ZK_P.PL_DIR:=ZK_N.PL_DIR;

::       Zewnetrzna data realizacji, wewnetrzna data i godzina realizacji z limitu
         ZK_P.DT:=ZLIM.STARTD;
         ZK_P.PL_DATA:=ZLIM.STARTD;
         ZK_P.PL_TIME:=ZLIM.STARTT;

         ZK_P.RR:=ZK_N.R;
         ZK_P.RM:=ZK_N.M;

         ZK_P.A:='A';
         ZK_P.M:=ZLIM.KTM;
         ZK_P.ILP:=ZK_P.ILZ:=_lim_all;
         ZK_P.RMAG:=ZLIM.MG;
::  fragment pobrany na wzor z 'po_rmag','zk2'
         {? ZK_P.RMAG<>null()
         || ZK_P.ONLY:=1;
            ZK_P.MG:=ZK_P.RMAG;
            {? ~(ZK_P.MG().TYP*'DOST') || ZK_P.DOST:=0 ?};
            ~~
         ?};
         ZK_P.REZ:=0;
:         ZK_P.DOR:=ZK_P.ILZ;
         ZK_P.JM:=ZK_P.M().J;
         ZK_P.IL2:=ZK_P.ILZ;
         ZK_P.WS2:=1;
         ZK_P.T2:='G';
         ZK_P.J2:=ZK_P.JM;
         ZK_P.ZL:=ZLIM.ZLEC;
         ZK_P.WYD:=ZLIM.WYD;
         ZK_P.ZLIM:=_zlim_ref;
         ZK_P.M_ZLIM:=ref_name(_zlim_ref);
         ZK_P.DK_C:=ZLIM.DK_C;
         ZK_P.SV:=exec('m_vat','material',ZK_P.M,ZK_P.N().KH,,ZK_N.DP~1,ZK_N.DP~2);
         ZK_P.KH:=ZK_P.N().KH;
         ZK_P.KH_ODB:=ZK_P.N().ODB;
         {? ZK_P.add(0)
         ||
::          Produkcja - jesli dostepny modul planow strategicznych to po udanej
::          edycji pozycji zamowienia aktualizuje obiekt planowania
            {? exec('tpp_lic','tpp')='T'
            || exec('zkp2obj','px_obj')
            ?};

            _result:=ZK_P.ref();
            _czy_rez_sm:=0;
::          Produkcja - jeśli zlecenie powstało na podstawie stanów magazynowych, to przepinane są rezerwacje na
::          pozycję zamówienia (niezależnie od parametryzacji generowania rezerwacji)
            {? _from_sm>0
            || _tmat_src:=exec('FindAndGet','#table',TMAT,ZLIM.TMAT,,"{? SRC<>'' || SRC || $ref() ?}",'');
               REZ.cntx_psh();
               REZ.use((REZ.name()-2)+'__');
               REZ.index('ZLMREZ');
               REZ.prefix(ZLIM.ZLEC,'S','B',ZLIM.KTM,'T',_tmat_src);
               {? REZ.first()
               ||
                  _doroz:=_lim_all;
                  _sumr:=0;
::                Ustawiam ilość do zarazerwowania na pozycji zamówenia
                  {!
                  |?
                     _ilosc:={? _doroz>REZ.ILR || REZ.ILR || _doroz ?};
                     ZK_P.DOR:=_ilosc;
                     ZK_P.put();
                     {? exec('zrez_tym','rezerwacje','Z',REZ.ref(),_ilosc,ZLIM.ref(),ZK_P.ref())
                     || _sumr+=_ilosc;
                        _doroz-=_ilosc
                     ?};
                     _doroz>0 & REZ.next()
                  !};
                  {? _sumr>0
                  || _czy_rez_sm:=1
                  ?};
::                Aktualizacja stanów
                  exec('obl_stan','magazyn_stan',ZLIM.KTM,5);
                  exec('aktu_rez','rezerwacje',ZLIM.KTM,ZK_P.NR,_sumr)
               ?};
               REZ.cntx_pop()
            ?};

            {? _resr=1
            || exec('rez_pozy','rezerwacje',{? _czy_rez_sm>0 || 5 || 0 ?},,0,,,0)
            ?}
         ?}
      ?};
      {? _result<>null()
       & _lim_all<>ZK_P.ILZ
       &
         (  _diff:=_lim_all-ZK_P.ILZ;
            ZK_P.ILZ+=_diff;
            ZK_P.ILP+=_diff; {? ZK_P.ILP<0 || ZK_P.ILP:=0 ?};
            ZK_P.IL2:=ZK_P.ILZ;
            {? ZK_P.put(1)
            ||
::             Produkcja - jesli dostepny modul planow strategicznych to po udanej
::             edycji pozycji zamowienia aktualizuje obiekt planowania
               {? exec('tpp_lic','tpp')='T'
               || exec('zkp2obj','px_obj')
               ?};
               1
            ?}
         )
      ||
::         {? _diff<0 || exec('aktZK_RP_lim','zamsiw_rea',ZK_P.ref(),-_diff) ?};
         {? ZK_P.REZ
         || ZK_P.cntx_psh();
            _mydo:=do_state()=0;
            {? _mydo || do() ?};
            exec('rez_pozy','rezerwacje',5,,0);
            {? _mydo || end() ?};
            ZK_P.cntx_pop()
         ?}
      ?};

      exec('admatzkp','rezerwacje',$ZK_P.M,{? _resr || ZK_P.NR || 0 ?},{? _resr || ZK_P.ILR || ZK_P.ILP ?}
         ,$ZK_P.N,$ZK_P.ref());

      {? _aktzk
      || exec('openz','open_tab',ST.ODDZ+'__');
         exec('akt_rezy','rezerwacje',,1);
         VAR_DEL.delete('__matakt')
      ?}
   ?}
?};
ZK_P.cntx_pop();

{? _zk_n<>null()
|| exec('openz','open_tab',ref_name(_zk_n)+3);
   exec('aktznzkn','zamsiw_nag',_zk_n,1);
   exec('oblprea_zam','zamsiw_nag',_zk_n)
?};
_result


\ZK_N_4_ZLiWYD
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Szuka naglowka zlecenia wewnetrznego dla zlecenia na wydzial
::   WE: [_a] - ZL.ref(), zlecenia dla ktorego generowane sa limity
::       [_b] - SLO.ref, wydzialu dla ktorego generowane sa limity - domyslnie null()
::       [_c] - 0/1 - zachowanie, gdy nie znaleziono (domyslnie 0 - zwroci null(), 1 - stworzy ZK_N i zwroci ZK_N.ref())
::       [_d] - ref() typu zamowienia - domyslnie pobierane z GetTYPYZAM4ZL
::       [_e] - (0/1/2) - wyswietlac komunikat o zalozeniu naglowka zamowienia?
::                        ([0] - brak, 1 - na ekran, 2 - do KOMMa)
::       [_f] - magazyn w przypadku magazynu paletowego lub domyślnie null()
::       [_g] - GROP.ref(), grupa operacji
::   WY: ZK_N.ref() lub null()
::
::UWAGA: Zmiany w algorytmie szukania ZK_N dla ZL i SLO, nalezy rowniez uwzglednic w usurez/zl_lim01.fml
::  OLD: \ZK_N_4_ZLiWYD/zamowien.fml
::----------------------------------------------------------------------------------------------------------------------
_zlec:={? var_pres('_a')=type_of(ZL.ref())      || _a    || null() ?};
_wydz:={? var_pres('_b')=type_of(SLO.ref())     || _b    || null() ?};
_wtdo:={? var_pres('_c')=1                      || _c<>0 || 0 ?};
_msgs:={? var_pres('_e')=1                      || _e    || 0 ?};
_mpal:={? var_pres('_f')=type_of(null())        || _f    || null() ?};
_grop:={? var_pres('_g')=type_of(null())        || _g    || null() ?};
:: Uwaga: parametr _d nie może być analizowany "alfabetycznie" ze względu na zmienną _grop
_tzam:={? var_pres('_d')=type_of(TYPYZAM.ref()) || _d    || exec('GetTYPYZAM4ZL','zamsiw_wspolne',_zlec,_grop) ?};

_result:=null();

POM.cntx_psh();
TYPYZAM.cntx_psh();
BEER.cntx_psh();

TYPYZAM.clear();
{? _tzam<>null & TYPYZAM.seek(_tzam)
|| BEER.TYPYZAM:=TYPYZAM.ref();
   POM.TYPDOK:=TYPYZAM.KOD;
   POM.TAB:='ZK_N';

   ZL.cntx_psh(); GROP.cntx_psh();
   ZL.clear(); GROP.clear();
   {? _zlec<>null() & ZL.seek(_zlec)
   || ZK_N.cntx_psh();
      exec('openz','open_tab',ZL.ODDZ+'__');
      ZK_N.index('ATZZLWYD');
      {? ZL.STAN<>'Z'
      || ZK_N.prefix('A',_tzam,_zlec,_wydz)
      || ZK_N.prefix('Z',_tzam,_zlec,_wydz)
      ?};
      {? ZK_N.first() & ZK_N.MG=_mpal
      || _result:=ZK_N.ref()
      || {? _wtdo=1
         || ZK_N.blank();
            ZK_N.ZL:=_zlec;
            ZK_N.GROP:=null();
            ZK_N.WYD:=_wydz;
            ZK_N.AKC:={? ZK_N.ZL().STAN='O' || 'T' || 'N' ?};
            ZK_N.STAT_REJ:={? ZK_N.ZL().STAN='O' || 'T' || 'N' ?};

::          data przyjecia zamowienia musi byc wspolna dla wszystkich zamowien zlecenia, aby bylo mozliwe wyswietlenie
::          zamowien dla limitow zamknietego zlecenia
            ZK_N.DP:=ZL.OD;
::          jesli jest data startu zlecenia, to surowce powinny byc na ten czas dostepne, takze termin wewnetrzny
            ZK_N.DT:={? ZL.STARTD<>date(0,0,0) || ZL.STARTD || ZL.OD ?};
            {? ZK_N.DT<ZK_N.DP || ZK_N.DT:=ZK_N.DP ?};

            ZK_N.PL_DATA:={? ZL.STARTD<>date(0,0,0) || ZL.STARTD || ZL.PL_DATA ?};
            ZK_N.PL_TIME:={? ZL.STARTD<>date(0,0,0) || ZL.STARTT || ZL.PL_TIME ?};
            {? ZK_N.PL_DATA<ZK_N.DP || ZK_N.PL_DATA:=ZK_N.DP; ZK_N.PL_TIME:=time(0,0,0) ?};
            ZK_N.PL_DIR:=-1;

            ZK_N.R:=ZK_N.DP~1;
            ZK_N.M:=ZK_N.DP~2;

            ZK_N.LIM:='T';
            ZK_N.MG:=_mpal;

            ZK_N.clear();
            {? ZK_N.add()
            || {? ZK_N.r_lock(1,1,1)
               || ZK_N.NR:=exec('numer_new','numery','PACZKA');
                  {? exec('znak','numery','ZK_N')
                  || ZK_N.put();
                     _msg:='Dodano nagłówek zamówienia wewnętrznego o symbolu: %1'@[ZK_N.SYM];
                     {? _msgs=1
                     || FUN.info(_msg)
                     |? _msgs=2
                     || KOMM.add(_msg,1,1)
                     ?};
                     _result:=ZK_N.ref()
                  ?};
                  ZK_N.r_unlock()
               || {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',ZK_N.ref()) & do_state() || undo() ?};
                  ZK_N.del(1,1)
               ?}
            ?}
         ?}
      ?};
      ZK_N.cntx_pop();
      1
   |? _grop<>null() & GROP.seek(_grop)
   || ZK_N.cntx_psh();
      exec('openz','open_tab',GROP.ODDZ+'__');
      ZK_N.index('ATZGRWYD');
      {? GROP.STATUS<>'Z'
      || ZK_N.prefix('A',_tzam,_grop,_wydz)
      || ZK_N.prefix('Z',_tzam,_grop,_wydz)
      ?};
      {? ZK_N.first() & ZK_N.MG=_mpal
      || _result:=ZK_N.ref()
      || {? _wtdo=1
         || ZK_N.blank();
            ZK_N.ZL:=null();
            ZK_N.GROP:=_grop;
            ZK_N.WYD:=_wydz;
            ZK_N.AKC:={? ZK_N.GROP().AKC='T' || 'T' || 'N' ?};
            ZK_N.STAT_REJ:={? ZK_N.GROP().AKC='T' || 'T' || 'N' ?};

::          data przyjecia zamowienia musi byc wspolna dla wszystkich zamowien zlecenia, aby bylo mozliwe wyswietlenie
::          zamowien dla limitow zamknietego zlecenia
            ZK_N.DP:=GROP.DATA;
::          jesli jest data startu zlecenia, to surowce powinny byc na ten czas dostepne, takze termin wewnetrzny
            ZK_N.DT:={? GROP.STARTD<>date(0,0,0) || GROP.STARTD || GROP.DATA ?};
            {? ZK_N.DT<ZK_N.DP || ZK_N.DT:=ZK_N.DP ?};

            ZK_N.PL_DATA:={? GROP.STARTD<>date(0,0,0) || GROP.STARTD || GROP.PL_DATA ?};
            ZK_N.PL_TIME:={? GROP.STARTD<>date(0,0,0) || GROP.STARTT || GROP.PL_TIME ?};
            {? ZK_N.PL_DATA<ZK_N.DP || ZK_N.PL_DATA:=ZK_N.DP; ZK_N.PL_TIME:=time(0,0,0) ?};
            ZK_N.PL_DIR:=-1;

            ZK_N.R:=ZK_N.DP~1;
            ZK_N.M:=ZK_N.DP~2;

            ZK_N.LIM:='T';
            ZK_N.MG:=_mpal;

            ZK_N.clear();
            {? ZK_N.add()
            || {? ZK_N.r_lock(1,1,1)
               || ZK_N.NR:=exec('numer_new','numery','PACZKA');
                  {? exec('znak','numery','ZK_N')
                  || ZK_N.put();
                     _msg:='Dodano nagłówek zamówienia wewnętrznego o symbolu: %1'@[ZK_N.SYM];
                     {? _msgs=1
                     || FUN.info(_msg)
                     |? _msgs=2
                     || KOMM.add(_msg,1,1)
                     ?};
                     _result:=ZK_N.ref()
                  ?};
                  ZK_N.r_unlock()
               || {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',ZK_N.ref()) & do_state() || undo() ?};
                  ZK_N.del(1,1)
               ?}
            ?}
         ?}
      ?};
      ZK_N.cntx_pop();
      1
   ?};
   ZL.cntx_pop(); GROP.cntx_pop()
?};
POM.cntx_pop();
TYPYZAM.cntx_pop();
BEER.cntx_pop();
_result


\spr_rez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Sprawdza, czy są rezerwacje na limity.
::   WE: [_a] - zlecenie (domyślnie DK.ZL)
::       [_b] - magazyn (domyślnie ND.MAG)
::   WY: 1 - są rezerwacje, nie dodajemy ręcznie jako pozycje dokumentu
::       0 - brak rezewacji zlecenia.
::  OLD: \spr_rez/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>7 || _a:=DK.ZL ?} || _a:=DK.ZL ?};
{? _>=2 || {? type_of(_b)<>7 || _b:=ND.MAG ?} || _b:=ND.MAG ?};

REZ.cntx_psh();
REZ.index('MG_M');
REZ.prefix(_b);
_wyn:=REZ.find_tab('first','TYP',,'=','Z','ZL',,'=',_a);
REZ.cntx_pop();
~_wyn


\View_ZK_P4ZLIM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Pokazuje pozycje zamówienia dla limitu
::   WE: _a - ZLIM.ref() lub $ZLIM.ref()
::  OLD: \View_ZK_P4ZLIM/zl_limit.fml
::----------------------------------------------------------------------------------------------------------------------
ZK_N.cntx_psh();
ZK_P.cntx_psh(); ZK_P.clear();
ZLIM.cntx_psh(); ZLIM.clear();
M.cntx_psh();
M_ATR.cntx_psh();
_ZLIMref:={? _>0
          || {? type_of(_a)=type_of(SYSLOG.ref()) || _a
             |? type_of(_a)=type_of('')           || {? ZLIM.seek(_a, form(8+_a)) || ZLIM.ref() || ~~ ?}
                                                  || ~~
             ?}
          || ~~
          ?};

{? _ZLIMref<>~~ & ZLIM.seek(_ZLIMref)
|| ZK_P.cntx_psh();
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0);
   ZK_P.cntx_pop();
   {? _zk_p<>null() & ZK_P.seek(_zk_p)
   || exec('wys_pozy','zamsiw_poz',1)
   ?}
?};
M_ATR.cntx_pop();
M.cntx_pop();
ZLIM.cntx_pop();
ZK_P.cntx_pop();
ZK_N.cntx_pop();
1


\__ZLIM_rezerw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Rezerwacja aktualnego __ZLIMa -> rezerwacja ZK_Pa dla ZLIMa
::  OLD: \__ZLIM_rezerw/zl_limit.fml
::----------------------------------------------------------------------------------------------------------------------
_grupa:=VAR.GRUPA='T';

_zlim:=cur_tab(1,1);

{? _zlim.ZM='Z'
|| {? _grupa=0 || FUN.info('Pozycji grupującej nie można rezerwować.'@) ?};
:: docelowo może warto byłoby obsłużyć to w taki sposób, że dla grupującej zaznaczamy wszystkie podległe i rezerwujemy
   return()
|? _zlim.SO='O'
|| {? _grupa=0 || FUN.info('Rezerwacji nie można dokonać dla odpadów/koproduktów.'@) ?};
   return()
|? _zlim.X_KIND='P' & _zlim.ZM='M'
|| _zlim.cntx_psh();
   ZLIM.clear();
   {? ZLIM.seek(_zlim.REF_NR,)
   || exec('rezerwuj','zamsiw_limit',_grupa=0,ZLIM.ref())
   ?};
   _zlim.cntx_pop()
?}


\rezerwuj_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Akcja 'przed grupą' dla 'Zarezerwuj' w limitach
::   WY: 0 / 1
::  OLD: \rezerwuj_gpr/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
_size:=cur_tab(1,1).sel_size();
{? {? _size=1
   || ~FUN.ask('Czy zarezerwować zaznaczoną pozycję?'@)
   |? _size<5
   || ~FUN.ask('Zaznaczono %1 pozycje limitów.\n\nCzy wszystkie zarezerwować?'@[$_size])
   || ~FUN.ask('Zaznaczono %1 pozycji limitów.\n\nCzy wszystkie zarezerwować?'@[$_size])
   ?}
|| return(0)
?};
VAR.GRUPA:='T';
KOMM.init(,,'Rezerwacje do limitów'@,'');
1


\rezerwuj_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Akcja 'po grupie' dla 'Zarezerwuj' w limitach
::  OLD: \rezerwuj_gpo/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

KOMM.select();
win_disp();
VAR.GRUPA:='N';
~~


\rezerwuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Rezerwacja aktualnego ZLIMa -> rezerwacja ZK_Pa dla ZLIMa
::   WE: [_a] - 1 - komunikaty na ekran, 0 - komunikaty wrzucane do KOMM'a
::       [_b] - ZLIM.ref() - gdy nie podany, to pobierany aktualny
::UWAGA: To jest rezerwacja konkretnego ZLIMa (obsługi tabel __ZLIM itp muszą być załatwione na zewnątrz)
::  OLD: \rezerwuj/zl_limit.fml
::----------------------------------------------------------------------------------------------------------------------
_msgs:={? _>0 & type_of(_a)=1                   || _a || 1 ?};
_zlim:={? _>1 & type_of(_b)=type_of(ZLIM.ref()) || _b || ZLIM.ref() ?};
_txt:='';

ZLIM.cntx_psh();
ZLIM.clear();
{? ZLIM.seek(_zlim)
|| {? _msgs=0 || KOMM.sect_beg('Pozycja '+$ZLIM.NR+'. ('+ZLIM.KTM().KTM+') '+ZLIM.KTM().N,,,1) ?};

   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0);

   _zk_n:=exec('FindAndGet','#table',ZK_P,_zk_p,,"N",null());
   ZK_N.cntx_psh();
   ZK_N.prefix();
   {? ZK_N.seek(_zk_n) & ZK_N.r_lock(1,1)
   ||
      _jestrez:=0;
      _jestco:=1;
      _jestpal:=0;

      _allkor:=ZLIM.LIL;
      ZLIM.cntx_psh();
      ZLIM.index('ZGP_KM');
      ZLIM.prefix(ZLIM.ZGP,ZLIM.LIMIT,ZLIM.NR);
      {? ZLIM.first()
      || {!
         |? {? ZLIM.AKC='T' || _allkor+=ZLIM.LIL ?};
            ZLIM.next()
         !}
      ?};
      ZLIM.cntx_pop();

      ZK_P.cntx_psh();
      ZK_P.clear();
      {? ZK_P.seek(_zk_p)
      || _jestrez:=ZK_P.REZ;
         _jestco:=ZK_P.ILP>0;
         _jestpal:=ZK_P.RMAG().PAL='T'
      ?};
      ZK_P.cntx_pop();
      _rezerwuj:={? ZLIM.SO='O'  || _txt:='Rezerwacji nie można dokonać dla odpadów/koproduktów.'@; 0
                 |? _allkor=0    || _txt:='Pozycja została skorygowana, brak ilości do zarezerwowania.'@; 0
                 |? _zk_p=null() || _txt:='Rezerwacji można dokonać jedynie dla zaakceptowanych limitów.'@; 0
                 |? _jestco=0    || _txt:='Pozycja została już zrealizowana, brak ilości do zarezerwowania.'@; 0
                 |? _jestrez     || _txt:='Pozycja jest już zarezerwowana.'@; 0
                 |? _jestpal     || _txt:='Rezerwacji nie można dokonać w magazynie z obsługą palet.'@; 0
                 |? _msgs=1      || _txt:=''; KOMM.ask('Czy zarezerwować wybraną pozycję?'@,_msgs,1)
                 |? _msgs=0      || _txt:=''; 1
                 ?};
      {? _rezerwuj=0
      || {? _txt<>''
         || KOMM.info(_txt,_msgs,1)
         ?}
      || ZK_P.cntx_psh();
         ZK_P.clear();
         {? ZK_P.seek(_zk_p)
         || ZK_P.cntx_psh();
            _mydo:=0;
            {? do_state()=0
            || _mydo:=1;
               do()
            ?};
            ZK_P.REZ:=0;
            ZK_P.put(1);
            _com:=tab_tmp(1,'TXT','STRING[255]','');
            params_set('com',_com);
            exec('rez_pozy','rezerwacje',0,,,,,0);
            {? _mydo>0
            || end()
            ?};
            ZK_P.cntx_pop();
            {? ZK_P.get()
             & ZK_P.ref=_zk_p
             & ZK_P.REZ=1
            || _txt:='Pozycja została zarezerwowana.'@;
               KOMM.info(_txt,_msgs,1)
            || _com.clear();
               {? _com.first()
               || {!
                  |? KOMM.info(_com.TXT,_msgs,1);
                     _com.next()
                  !}
               ?};
               _txt:='Nie udało się zarezerwować pozycji.'@;
               KOMM.info(_txt,_msgs,1)
            ?};
            obj_del(_com);
            1
         ?};
         ZK_P.cntx_pop()
      ?}
   || _txt:='Nie można dokonać rezerwacji — zamówienie redagowane przez innego użytkownika.'@;
      KOMM.info(_txt,_msgs,1)
   ?};
   ZK_N.cntx_pop();
   {? _msgs=0 || KOMM.sect_end() ?}
?};
ZLIM.cntx_pop();
~~


\odrezerw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Usuwa rezerwacje materiału z limitu w magazynie. Usuwana jest rezerwacja całej ilości razem z korektami.
::  OLD: \odrezerw/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlim:=cur_tab(1,1);

{? _zlim.ZM='Z'
|| _txt:='Rezerwacji nie można dokonać dla pozycji grupującej.'@;
   {? VAR.GRUPA<>'T' || FUN.info(_txt) ?};
   return()
?};

_ktm:=ZLIM.KTM().KTM;

{? ZLIM.SO='O'
|| _txt:='Rezerwacji nie można dokonać dla odpadów/koproduktów.'@;
   {? VAR.GRUPA='T'
   || KOMM.add(_ktm+' - '+_txt,7)
   || FUN.info(_txt)
   ?}

|? ZLIM.KOR<>0
|| {? VAR.GRUPA='N' || FUN.info('Rezerwacji nie można wycofać z poziomu korekty.'@) ?}

|? ZLIM.AKC<>'T'
|| _txt:='Rezerwacji można dokonać tylko dla limitów zaakceptowanych.'@;
   {? VAR.GRUPA='T'
   || KOMM.add(_ktm+' - '+_txt,7)
   || FUN.info(_txt)
   ?}

|| {? VAR.GRUPA='T' | FUN.ask('Czy usunąć rezerwację pozycji limitu?'@)
   || exec('usurez','zamsiw_limit',null(),ZLIM.ref());
      {? VAR.GRUPA='T' || KOMM.add(_ktm+' - '+'Rezerwacja usunięta.'@,13) ?}
   ?}
?};
~~


\usurez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Usunięcie rezerwacji wszystkich surowcow do limitow zlecenia.
::       Opcjonalnie tylko dla wybranego materiału.
::   WE: _a - ZL.ref() albo $ZL.ref()
::       [_b] - ZLIM.ref() albo $ZLIM.ref()
::       [_c] - czy dodawać komunikat do KOMM.
::       [_d] - usunięcie i rezerwacja domyślnie brak
::  OLD: \usurez/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlecenie:={? _>0
           || {? type_of(_a)=type_of('')           || _a
              |? type_of(_a)=type_of(SYSLOG.ref()) || _a
                                                   || ~~
              ?}
           || ~~
           ?};

    _zlim:={? _>1
           || {? type_of(_b)=type_of('')           || _b
              |? type_of(_b)=type_of(SYSLOG.ref()) || _b
                                                   || ~~
              ?}
           || null()
           ?};

 _komunik:={? _>3 & type_of(_c)=type_of(0) || _c || 0 ?};
  _newrez:={? var_pres('_d')=type_of(0) & _d>0 || _d || 0 ?};

{? type_of(_zlecenie)=type_of('')
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_zlecenie,form(8+_zlecenie))
   || _zlecenie:=ZL.ref()
   ?};
   ZL.cntx_pop()
|? type_of(_zlecenie)=type_of(~~)
|| FUN.wdrerror('Błędny typ parametru _zlecenie w usurez/zamsiw_limit.fml.')
?};

{? type_of(_zlim)=type_of('')
|| exec('openmask','zl_common',_zlecenie);
   ZLIM.cntx_psh();
   ZLIM.clear();
   {? ZLIM.seek(_zlim,form(8+_zlim))
   || _zlim:=ZLIM.ref()
   ?};
   ZLIM.cntx_pop()
|? type_of(_zlim)=type_of(~~)
|| FUN.wdrerror('Błędny typ parametru _zlim w usurez/zamsiw_limit.fml.')
?};

{? ~(type_of(_zlecenie)
   & type_of(_zlim)
   )
|| FUN.wdrerror('Przerwano działanie usurez/zamsiw_limit.fml.');
   return()
?};

ZLIM.cntx_psh(); ZLIM.clear();
ZK_P.cntx_psh(); ZK_P.clear();
ZK_N.cntx_psh(); ZK_N.clear();
ZL.cntx_psh(); ZL.clear();

{? _zlim<>null()
||
   {? ZLIM.seek(_zlim)
   ||
::    teraz wycofujemy rezerwacje
      _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
      {? _zk_p<>null()
       & ZK_P.seek(_zk_p)
       & ZK_P.REZ
      || exec('rez_pozy','rezerwacje',-1,,,,,0);
         {? _newrez || ZK_P.REZ:=0; ZK_P.put(1); exec('rez_pozy','rezerwacje',0,,,,,0) ?}
      ?}
   ?};

   {? _komunik || KOMM.add('Usunięto rezerwacje dla limitu.'@) ?}

|? ZL.seek(_zlecenie)
|| _ZL_SYM:=ZL.SYM;

   ZLIM.index('ZN');  ZLIM.prefix(ZL.ref());

   {? ZLIM.first()
   || {!
      |?
::       teraz wycofujemy rezerwacje
         _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
         {? _zk_p<>null()
          & ZK_P.seek(_zk_p)
          & ZK_P.REZ
         || exec('rez_pozy','rezerwacje',-1,,,,,0);
            {? _newrez || ZK_P.REZ:=0; ZK_P.put(1); exec('rez_pozy','rezerwacje',0,,,,,0) ?}
         ?};
         ZLIM.next()
      !}
   ?};

   {? _komunik || KOMM.add('Usunięto rezerwacje dla zlecenia %1.'@[_ZL_SYM]) ?}

?};

ZL.cntx_pop();
ZK_P.cntx_pop();
ZK_N.cntx_pop();
ZLIM.cntx_pop();
~~


\odrezerw_gpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Akcja 'przed grupa' dla 'Odrezerwuj' w limitach
::   WY: 0 / 1
::  OLD: \odrezerw_gpr/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
_size:=cur_tab(1,1).sel_size();
{? {? _size=1
   || ~FUN.ask('Czy usunąć rezerwację zaznaczonej pozycji?'@)
   |? _size<5
   || ~FUN.ask('Zaznaczono %1 pozycje limitów.\n\nCzy wszystkie odrezerwować?'@[$_size])
   || ~FUN.ask('Zaznaczono %1 pozycji limitów.\n\nCzy wszystkie odrezerwować?'@[$_size])
   ?}
|| return(0)
?};
VAR.GRUPA:='T';
KOMM.init(,,'Rezerwacje do limitów'@,'');
1


\odrezerw_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Akcja 'po grupie' dla 'Odrezerwuj' w limitach
::  OLD: \odrezerw_gpo/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

KOMM.select();
win_disp();
VAR.GRUPA:='N';
~~


\rezerwacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: wyświetlanie zarezerwonanych dostaw dla limitu zlecenia.
::       [_a] - ZLIM.ref() - konkretny limit
::       [_b] - ZL.ref() - całe zlecenie
::
::UWAGA: W kodzie _list.TOP=~ZK_N.TOP !!!
::  OLD: \rezerwacje/zl_limit.fml
::----------------------------------------------------------------------------------------------------------------------
  _ZLref:=~~;
_ZK_Nref:=~~;
_ZK_Pref:=~~;
_full_zl:=0;

Cntx.psh(ZLIM,ZK_N,ZK_P,REZ,ZL,ZLIM,TMAT);
Cntx.clr(ZLIM,ZK_N,ZK_P,REZ,ZL,ZLIM,TMAT);

_ZLIMref:={? _>0
          || {? type_of(_a)=type_of(ZLIM.ref()) || _a
             |? type_of(_a)=type_of('')         || {? ZLIM.seek(_a, form(8+_a)) || ZLIM.ref() || ~~ ?}
                                                || ~~
             ?}
          || ~~
          ?};

{? _ZLIMref<>~~
 & ZLIM.seek(_ZLIMref)
|| _ZLref:=ZLIM.ZLEC;
   {? _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit',,0,0); _zk_p<>null() || _ZK_Pref:=_zk_p ?}

|| _ZLref:={? _>1
           || {? type_of(_b)=type_of(ZL.ref()) || _b
              |? type_of(_b)=type_of('')       || {? ZL.seek(_b, form(8+_b)) || ZL.ref() || ~~ ?}
                                               || ~~
              ?}
           || ~~
           ?};
   _full_zl:=1
?};

{? _ZLref<>~~
|| _rodzaj:=exec('FindAndGet','#table',ZL,_ZLref,,"RODZAJ",'');
   {? _rodzaj='P'
   || _ZLrefs:=sql('select ZL.REFERENCE as REF from ZL where ZL.REFERENCE=:_a',_ZLref)
   || _ZLrefs:=sql('select ZL.REFERENCE as REF from ZL where ZL.NRNZL=:_a',exec('FindAndGet','#table',ZL,_ZLref,,"UNRZL",0))
   ?}
?};

{? _ZLref<>~~
|| _sql:=''
        +("
          SELECT
             ZK_N.REFERENCE     AS ZK_N_REF
            ,ZK_P.POZ           AS POZ
            ,CASE
             WHEN ZK_P.TOP=0 THEN 1
             ELSE 0
             END                AS TOP
            ,ZK_P.NR            AS NR
            ,ZK_P.REZ           AS REZ
            ,ZK_P.REFERENCE     AS REF
          FROM
            ZK_P
            LEFT OUTER JOIN ZK_N USING(ZK_P.N, ZK_N.REFERENCE)
          WHERE  1=1
         "
         +{? _ZK_Pref<>~~
          || " AND ZK_P.REFERENCE=:_b "
          || ""
          ?}
         +"
             AND ZK_N.ZL IN (SELECT :_a.REF FROM :_a)
             AND ZK_N.LIM='T'
             AND ZK_P.ZL IN (SELECT :_a.REF FROM :_a)
             AND ZK_P.A='A'
             AND ZK_P.REZ=1
         "
         +"
          ORDER BY
             ZK_N_REF
            ,POZ
            ,TOP
            ,NR
            ,REZ
            ,REF
         "
         );

   {? _ZK_Pref<>~~
   || _list:=sql(_sql,_ZLrefs,_ZK_Pref)
   || _list:=sql(_sql,_ZLrefs)
   ?};
   {? _full_zl>0
   || _sql_mat:=''+("
                        SELECT
                           DISTINCT REZ.ZLIM as REF
                        FROM
                           REZ
                        WHERE
                           REZ.ZL IN (SELECT :_a.REF FROM :_a)
                           AND REZ.ZLIM like 'zlim%'
                        UNION
                        SELECT
                           DISTINCT REZ.REFREA as REF
                        FROM
                           REZ
                        WHERE
                           REZ.ZL IN (SELECT :_a.REF FROM :_a)
                           AND REZ.REFREA like 'txmat%'
                    ");
      _list_mat:=sql(_sql_mat,_ZLrefs)
   || _list_mat:=~~
   ?};
   _first:=type_of(_list)=type_of(SYSLOG) & _list.first();
   _first_mat:=(_full_zl>0 & type_of(_list_mat)=type_of(SYSLOG) & _list_mat.first());

   {? _first | _first_mat
   || _tab:=tab_tmp(4
                   ,'PARENT'  ,'TREE_REF'   ,'Rodzic'
                   ,'NAZWA'   ,'STRING[100]',''
                   ,'MAGAZYN' ,'STRING[10]' ,'Mag./Wydz.'
                   ,'SYMBOL'  ,'STRING[50]' ,'Symbol'
                   ,'POZ'     ,'INTEGER'    ,'Pozycja'
                   ,'DATA'    ,'DATE'       ,'Data'
                   ,'ILOSC'   ,'REAL'       ,'Ilość'
                   ,'CENA'    ,'REAL'       ,'Cena'
                   ,'WAR'     ,'REAL'       ,'Wartość'
                   ,'ILP'     ,'REAL'       ,'Pozostało'
                   ,'RODZAJ'  ,'STRING[1]'  ,'Rodzaj'
                   ,'TYP'     ,'STRING[1]'  ,'Typ'
                   ,'NDK'     ,'STRING[8]'  ,'NDK'
                   ,'RDK'     ,'INTEGER'    ,'RDK'
                   ,'ZK_P_NAM','STRING[8]'  ,'ZK_P.name()'
                   ,'ZK_P_REF','INTEGER'    ,'#ZK_P.ref()'
                   ,'ZK_P_QRF','STRING[16]' ,'$ZK_P.ref()'
                   ,'ZK_N_NAM','STRING[8]'  ,'ZK_N.name()'
                   ,'ZK_N_REF','INTEGER'    ,'#ZK_N.ref()'
                   ,'REZ_NAM' ,'STRING[8]'  ,'REZ.name()'
                   ,'REZ_REF' ,'INTEGER'    ,'$REZ.ref()'
                   );
      {? sec_superuser()=0 || _tab.fld_attr(,2) ?};
      exec('war_hid','ceny',_tab,'CENA','WAR');

::    1. poziom - ZLECENIE
      {? _first | _first_mat
      || _ZK_Nmask:=ZK_N.name();
         _mask:=ZK_N.name();

         _zk_n:='';
         _zk_n_rt:=0;
         _zk_n_rf:=null;
         _zk_n_sm:=0;

         _zk_p:='';
         _zk_p_rt:=0;
         _zk_p_poz:=0;
         _zk_p_sm:=obj_new(2);
         _zk_p_sm[1]:=_zk_p_sm[2]:=0;

         _tab.blank(1);
         _tab.PARENT:=0;
         _tab.NAZWA:='Zlecenie '+ZL.SYM;
         _tab.MAGAZYN:='';
         _tab.SYMBOL:='';
         _tab.POZ:=0;
         _tab.DATA:={? ZL.STARTD<>date(0,0,0) || ZL.STARTD || date(0,0,0) ?};
         _tab.ILOSC:=0;
         _tab.CENA:=0;
         _tab.WAR:=0;
         _tab.RODZAJ:='Z';
         _tab.add();
         _parent:=#_tab.ref();

::       2. poziom - ZAMÓWIENIE
         {? _first
         ||
            {!
            |? {? 8+_list.ZK_N_REF<>_mask
               || _mask:=8+_list.ZK_N_REF;
                  exec('open','open_tab',1+(_mask+3),_mask+2)
               ?};
               {? ZK_P.seek(_list.REF,form(8+_list.REF))
               || {? ZK_P.N<>_zk_n_rf
                  || {? _zk_n_rf<>null()
                     || _tab.seek(_zk_n_rt,);
                        _tab.WAR:=_zk_n_sm;
                        _tab.put()
                     ?};
                     _tab.blank(1);
                     _tab.PARENT:=_parent;
                     _tab.NAZWA:='Zamówienie: '+ZK_P.N().SYM;
                     _tab.MAGAZYN:=ZK_P.N().WYD().KOD;
                     _tab.SYMBOL:='';
                     _tab.POZ:=0;
                     _tab.DATA:=ZK_N.DT;
                     _tab.ILOSC:=0;
                     _tab.CENA:=0;
                     _tab.WAR:=0;
                     _tab.RODZAJ:='N';
                     _tab.ZK_N_NAM:=ref_name(ZK_P.N);
                     _tab.ZK_N_REF:=#ZK_P.N;
                     _tab.add();
                     _zk_n_rt:=#_tab.ref();
                     _zk_n_rf:=ZK_N.ref();
                     _zk_n_sm:=0;
                     _zk_p_poz:=-1;
                     1
                  ?};

::                3. poziom - POZYCJE ZAMOWIENIA
                  _tab.blank(1);
                  _tab.PARENT:=_zk_n_rt;
                  _tab.NAZWA:='('+ZK_P.M().KTM+') '+ZK_P.M().N;
                  _tab.MAGAZYN:=ZK_P.RMAG().SYM;
                  _tab.SYMBOL:=ZK_P.N().SYM+' poz.'+form(ZK_P.POZ,,,'9.');
                  _tab.POZ:=ZK_P.POZ;
                  _tab.DATA:=ZK_P.DT;
                  _tab.ILOSC:=ZK_P.DOR;
                  _tab.CENA:=0;
                  _tab.WAR:=0;
                  _tab.ILP:=ZK_P.ILP;
                  _tab.RODZAJ:='P';
                  _tab.ZK_P_NAM:=ZK_P.name();
                  _tab.ZK_P_REF:=#ZK_P.ref();
                  _tab.ZK_P_QRF:=$ZK_P.ref();

                  _tab.add();
                  _zk_p_rt:=#_tab.ref();
                  _zk_p_poz:=ZK_P.POZ;
                  _zk_p_sm[1]:=_zk_p_sm[2]:=0;

::                4. poziom - REZERWACJE
                  REZ.index('ZK_P');
                  REZ.prefix(ZK_P.ref());
                  {? REZ.first()
                  || {!
                     |?
                        _tab.blank(1);
                        _tab.PARENT:=_zk_p_rt;
                        _tab.NAZWA:=
                           {? REZ.RODZ='B' & REZ.SC=''      || 'Rezerwacja bez wskazania dostawy'
                           |? REZ.RODZ='B' & REZ.SC<>''     || 'Rezerwacja dostawy'
                           |? REZ.RODZ='W' & REZ.RP_REZ='T' || 'Rezerwacja powiązana ze zleceniem nadrzędnym'
                           |? REZ.RODZ='W'                  || 'Rezerwacja warunkowa'
                                                            || 'Rezerwacja?'
                           ?};
                        _tab.MAGAZYN:=REZ.MG().SYM;
                        exec('rek_rez1','rezerwacje');
                        _tab.SYMBOL:={? DISP.DOST<>'' || DISP.DOST+' z dnia '+form(BEER.DOSTAWA) || '' ?};
                        _tab.DATA:=BEER.DOSTAWA;
                        _tab.POZ:=100000;
                        _tab.ILOSC:=REZ.ILR;
                        _tab.RODZAJ:=REZ.RODZ;
                        _tab.TYP:=REZ.TYP;
                        _tab.REZ_NAM:=ref_name(REZ.ref());
                        _tab.REZ_REF:=#REZ.ref();
                        _tab.add();
                        REZ.next()
                     !}
                  ?}
               ?};
               _list.next()
            !};
            {? _zk_n_rf<>null()
            || _tab.seek(_zk_n_rt,);
               _tab.WAR:=_zk_n_sm;
               _tab.put()
            ?};

            {? ZK_N.name()<>_ZK_Nmask
            || exec('open','open_tab',1+(_ZK_Nmask+3),_ZK_Nmask+2)
            ?}
         ?};

::       2. poziom - REZERWACJE DO SUROWCÓW (NAGŁÓWEK)
         {? _first_mat
         || _tab.blank(1);
            _tab.PARENT:=_parent;
            _tab.NAZWA:='Rezerwacje do surowców';
            _tab.MAGAZYN:='';
            _tab.SYMBOL:='';
            _tab.POZ:=0;
            _tab.ILOSC:=0;
            _tab.CENA:=0;
            _tab.WAR:=0;
            _tab.RODZAJ:='N';
            _tab.add();
            _tmp_rt:=#_tab.ref();
            _mat_ref:=null();

            REZ.use((REZ.name()-2)+'__');
            REZ.clear();
            {!
            |?
               {? var_pres('_tab_mat')>0 || obj_del(_tab_mat) ?};
               {? 4+_list_mat.REF='zlim'
               || _tab_mat:=ZLIM;
                  _mat_mask:=ZLIM.name()
               || _tab_mat:=TMAT;
                  _mat_mask:=TMAT.name()
               ?};
               {? 8+_list_mat.REF<>_mat_mask
               || _mat_mask:=8+_list_mat.REF;
                  _tab_mat.use(_mat_mask);
                  _tab_mat.clear()
               ?};
               {? _tab_mat.seek(_list_mat.REF,form(8+_list_mat.REF))
               ||
::                3. poziom - SUROWCE (Z PODZIAŁEM NA ZLIM ŹRÓDŁOWY)
                  _tab.blank(1);
                  _tab.PARENT:=_tmp_rt;
                  {? _tab_mat=ZLIM
                  || _ktm:=ZLIM.KTM;
                     ZLIM.KTM()
                  || {? TMAT.GRKTM='G'
                     || _ktm:=TMAT.TGDFLT().PT;
                        TMAT.TGDFLT().PT()
                     || _ktm:=TMAT.PT;
                        TMAT.PT()
                     ?}
                  ?};
                  _tab.NAZWA:='('+M.KTM+') '+M.N;
                  _tab.ILOSC:=0;
                  _mat_ilsm:=0;
                  _tab.RODZAJ:='P';
                  _tab.ZK_P_NAM:=_tab_mat.name();
                  _tab.ZK_P_REF:=#_tab_mat.ref();
                  _tab.ZK_P_QRF:=$_tab_mat.ref();

                  _tab.add();
                  _mat_rt:=#_tab.ref();
                  _mat_ref:=_tab.ref();

::                4. poziom - REZERWACJE
                  _loop:={? _tab_mat=ZLIM || 2 || 1 ?};
                  {! _it:=1.._loop
                  |! {? _tab_mat=ZLIM
                     || {? _it=1
                        || REZ.index('ZLMREZ2');
                           REZ.prefix(ZL.ref(),'S','B',_ktm,'P',_list_mat.REF)
                        || REZ.index('ZLMREZ2');
                           REZ.prefix(ZL.ref(),'S','B',_ktm,'R',_list_mat.REF)
                        ?}
                     || REZ.index('ZLMREZ');
                        REZ.prefix(ZL.ref(),'S','B',_ktm,'T',_list_mat.REF)
                     ?};
                     {? REZ.first()
                     || {!
                        |?
                           _tab.blank(1);
                           _tab.PARENT:=_mat_rt;
                           _tab.NAZWA:=
                              {? REZ.SC=''      || 'Rezerwacja bez wskazania dostawy'
                              |? REZ.SC<>''     || 'Rezerwacja dostawy'
                                                || 'Rezerwacja?'
                              ?};
                           _tab.MAGAZYN:=REZ.MG().SYM;
                           exec('rek_rez1','rezerwacje');
                           _tab.SYMBOL:={? DISP.DOST<>'' || DISP.DOST+' z dnia '+form(BEER.DOSTAWA) || '' ?};
                           _tab.DATA:=BEER.DOSTAWA;
                           _tab.POZ:=100000;
                           _tab.ILOSC:=REZ.ILR;
                           _mat_ilsm+=_tab.ILOSC;
                           _tab.RODZAJ:=REZ.RODZ;
                           _tab.TYP:=REZ.TYP;
                           _tab.REZ_NAM:=ref_name(REZ.ref());
                           _tab.REZ_REF:=#REZ.ref();
                           _tab.add();
                           REZ.next()
                        !}
                     ?}
                  !}
               ?};
               {? _mat_ref<>null()
               || _tab.seek(_mat_ref,);
                  _tab.ILOSC:=_mat_ilsm;
                  _tab.put()
               ?};
               _list_mat.next()
            !}
         ?}
      ?};

      _wyswietl:=''+"
         _tab:=cur_tab(1,1);
         {? _tab.RDK>0 & _tab.NDK<>''
         || _ndk:=DK.name();
            DK.cntx_psh();
            exec('open','open_tab',1+(_tab.NDK+3) ,_tab.NDK+2);
            DK.clear();
            {? DK.seek(_tab.RDK,)
            || DK.win_edit('GRED1');
               DK.display()
            ?};
            exec('open','open_tab',1+(_ndk+3)     ,_ndk+2);
            DK.cntx_pop()
         |? _tab.REZ_REF>0 & _tab.REZ_NAM<>''
         || REZ.cntx_psh();
            exec('open','open_tab',1+(_tab.REZ_NAM+3) ,_tab.REZ_NAM+2);
            REZ.clear();
            {? REZ.seek(_tab.REZ_REF,)
            || BEER.RODZR:={? REZ.TYP='T' || 'T' || REZ.RODZ ?};
               exec('rek_rez1','rezerwacje');

               exec('wys_rezy','rezerwacje')
            ?};
            REZ.cntx_pop()
         |? _tab.ZK_P_REF>0 & _tab.ZK_P_NAM<>''
         || ZK_P.cntx_psh();
            _ndk:=ZK_P.name();
            exec('open','open_tab',1+(_tab.ZK_P_NAM+3) ,_tab.ZK_P_NAM+2);
            ZK_P.clear();
            {? ZK_P.seek(_tab.ZK_P_REF,) || exec('wys_pozy','zamsiw_poz',1) ?};
            exec('open','open_tab',1+(_ndk+3)     ,_ndk+2);
            ZK_P.cntx_pop()
         |? _tab.ZK_N_REF>0 & _tab.ZK_N_NAM<>''
         || ZK_N.cntx_psh();
            _ndk:=ZK_N.name();
            exec('open','open_tab',1+(_tab.ZK_N_NAM+3) ,_tab.ZK_N_NAM+2);
            ZK_N.clear();
            {? ZK_N.seek(_tab.ZK_N_REF,)
            || ZK_N.win_edit('REDW');
               ZK_N.display()
            ?};
            exec('open','open_tab',1+(_ndk+3)     ,_ndk+2);
            ZK_N.cntx_pop()
         ?}
      ";
      _rekord:="
         _tab:=cur_tab(1,1);
         _grayed:='U';
         {? _tab.REZ_REF>0 & _tab.REZ_NAM<>''
         || {? _tab.TYP='T' | _tab.TYP='S'
            || _grayed:=''
            || _parent:=_tab.PARENT;
               _tab.cntx_psh();
               {? _tab.seek(_parent)
               || ZK_P.cntx_psh();
                  {? ZK_P.seek(_tab.ZK_P_REF,_tab.ZK_P_NAM,1)
                  || {? exec('czyuprREZ','rezerwacje',OPERATOR.USER,ZK_P.M,-1,ZK_P.US)
                     || _grayed:=''
                     ?}
                  ?};
                  ZK_P.cntx_pop()
               ?};
               _tab.cntx_pop()
            ?}
         || _grayed:='U'+_grayed
         ?};
         _tab.actions_grayed(cur_win(1,1),_grayed);
         ~~
      ";
      _usun:="
         _tab:=cur_tab(1,1);
         {? _tab.REZ_REF>0 & _tab.REZ_NAM<>''
         || REZ.cntx_psh();
            exec('open','open_tab',1+(_tab.REZ_NAM+3) ,_tab.REZ_NAM+2);
            REZ.clear();
            {? REZ.seek(_tab.REZ_REF,)
            || {? _tab.TYP='T'
               || exec('delrezt','rezerwacje')
               || _rezzlim:=BEER.REZ_ZLIM;
                  {? _tab.TYP='S'
                  || BEER.REZ_ZLIM:=1;
                     __zkpref:=REZ.ZLIM;
                     __zkpmat:=REZ.M;
                     __zkpnag:=REZ.ZGP;
                     __zkppoz:=0;
                     __zkpus:=OPERATOR.USER
                  || BEER.REZ_ZLIM:=0;
                     __zkpmat:=REZ.M;
                     __zkpnag:=REZ.ZK_N;
                     __zkppoz:=exec('FindAndGet','#table',ZK_P,REZ.ZK_P,,\"ZK_P.POZ\",0);
                     __zkpus:=exec('FindAndGet','#table',ZK_P,REZ.ZK_P,,\"ZK_P.US\",OPERATOR.USER)
                  ?};
                  exec('del_rez1','rezerwacje',0);
                  BEER.REZ_ZLIM:=_rezzlim;
                  VAR_DEL.delete('__zkpmat','__zkpnag','__zkppoz','__zkpus')
               ?};
::             Aktualizacja widoku
               {? ~REZ.seek(_tab.REZ_REF,)
               ||
::                Usunięcie rekordu rezerwacji
                  _parent:=_tab.PARENT;
                  _ilosc:=_tab.ILOSC;
                  _tab.del();
::                Aktualizacja rekordu nagłówka surowca
                  _tab.cntx_psh();
                  _tab.prefix();
                  {? _tab.seek(_parent)
                  || _del:=0;
                     _tab.cntx_psh();
                     _tab.prefix(_parent,);
                     {? _tab.size()=0
                     || _del:=1
                     ?};
                     _tab.cntx_pop();
                     {? _del>0
                     ||
::                      Usunięcie nagłówka surowca (jeżeli usunięta rezerwacja była ostatnią)
                        _tab.del()
                     ||
::                      Odświeżenie ilości na nagłówku surowca
                        _tab.ILOSC-=_ilosc;
                        _tab.put()
                     ?}
                  ?};
                  _tab.cntx_pop()
               ?}
            ?};
            REZ.cntx_pop()
         ?};
         ~~
      ";
      _win:=_tab.mk_sel('Rezerwacje'@,'P', 0,'#rezerw_limn',5,10,10,1);
      _tab.win_fld(_win,,'NAZWA'   ,,,40,,,'Opis'@);
      _tab.win_fld(_win,,'MAGAZYN' ,,,10,,,'Magazyn/Wydział'@);
      _tab.win_fld(_win,,'SYMBOL'  ,,,15,,,'Symbol dokumentu'@);
      _tab.win_fld(_win,,'DATA'    ,,,10,,,'Data'@);
      _tab.win_fld(_win,,'ILOSC'   ,,,15,ST.DOKL,,'Ilość zarezerwowana'@);
::      _tab.win_fld(_win,,'CENA'    ,,, 8,2,,'Cena'@);
::      _tab.win_fld(_win,,'WAR'     ,,,12,2,,'Wartość'@);
      VAR_DEL.delete('ZlimZkpy');
      ZlimZkpy:=_tab;

      _tab.win_act(_win,,'Formuła','&Usuń'@@,,,_usun,,,,,,'U');
      _tab.win_act(_win,,'Formuła','Zwiń/roz&wiń'@@,,,$("exec('zwrw_all','#tree','ZlimZkpy','PARENT','"+_win+"')"));
      _tab.win_sel(_win);
      _tab.win_act(_win,,'Okienko' ,,,,$("exec('zwrw_all','#tree','ZlimZkpy','PARENT','"+_win+"')"));
      _tab.win_act(_win,,'Rekord',,,,_rekord);
      _tab.win_act(_win,,'Wyświetl',,,,$_wyswietl);

      _tab.fld_fml('DATA','DISPLAY_FORMAT',"{? fld()=date(0,0,0) || 'empty=1' || 'empty=0' ?}");
      _tab.fld_fml('ILOSC','DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
      _tab.fld_fml('CENA','DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");
      _tab.fld_fml('WAR','DISPLAY_FORMAT',"{? fld()=0 || 'empty=1' || 'empty=0' ?}");

      _tab.select();
      VAR_DEL.delete('ZlimZkpy');
      1
   || FUN.info('Rezerwacje nie zostały wygenerowane.'@)
   ?}
?};

Cntx.pop(ZLIM,ZK_N,ZK_P,REZ,ZL,ZLIM);
1


\rezerwacje_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wyświetlanie zarezerwowanych dostaw do zlecenia
::----------------------------------------------------------------------------------------------------------------------
exec('rezerwacje','zamsiw_limit',,params_get().env.ZL);
~~


\zkp_date_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Nanosi wewnętrzny termin realizacji (data i godzina) na pozycje zamówienia wewnętrznego powiązaną z limitem
::   WE: _a - ZLIM.ref()
::  OLD: \zkp_date_upd/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlim:=_a;

exec('openz_psh','open_tab');
{? ZK_P.name()+2<>'__' || exec('openz','open_tab',ST.ODDZ+'__') ?};

ZK_P.index('ZLIM');
ZK_P.prefix(ref_name(_zlim),_zlim);
{? ZK_P.first()
||
:: Zewnętrzna data, wewnętrzna data i godzina realizacji z limitu
   ZK_P.DT:=ZLIM.STARTD;
   ZK_P.PL_DATA:=ZLIM.STARTD;
   ZK_P.PL_TIME:=ZLIM.STARTT;
   {? ZK_P.put()
   || REZ.index('ZK_P');
      REZ.prefix(ZK_P.ref());
      {? REZ.first()
      || {!
         |? {? (REZ.RODZ='B' | REZ.AUTO)
            || REZ.DODT:=ZK_P.DT;
               REZ.put()
            ?};
            REZ.next()
         !}
      ?}
   ?}
?};

exec('openz_pop','open_tab');
~~


\rezerwDST
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: Podgląd i edycja rezerwacji
::----------------------------------------------------------------------------------------------------------------------
_zlim:=cur_tab(1,1);

{? _zlim.ZM='Z'
|| _txt:='Rezerwacji nie można dokonać dla pozycji grupującej.'@;
   {? VAR.GRUPA<>'T' || FUN.info(_txt) ?};
   return()
?};

_ktm:=ZLIM.KTM().KTM;

{? ZLIM.SO='O'
|| _txt:='Rezerwacji nie można dokonać dla odpadów/koproduktów.'@;
   {? VAR.GRUPA='T'
   || KOMM.add(_ktm+' - '+_txt,7)
   || FUN.info(_txt)
   ?}

|? ZLIM.KOR<>0
|| {? VAR.GRUPA='N' || FUN.info('Rezerwacji nie można wycofać z poziomu korekty.'@) ?}

|? ZLIM.AKC<>'T'
|| _txt:='Rezerwacji można dokonać tylko dla limitów zaakceptowanych.'@;
   {? VAR.GRUPA='T'
   || KOMM.add(_ktm+' - '+_txt,7)
   || FUN.info(_txt)
   ?}


|? ZLIM.MG().PAL='T'
|| _txt:='Rezerwacji nie można dokonać w magazynie z obsługą palet.'@;
   {? VAR.GRUPA='T'
   || KOMM.add(_ktm+' - '+_txt,7)
   || FUN.info(_txt)
   ?}

|| ZLIM.cntx_psh();
   ZK_P.cntx_psh(); ZK_P.prefix();
   ZK_N.cntx_psh(); ZK_N.prefix();
   ZL.cntx_psh(); ZL.clear();
   _zk_p:=exec('ZK_P_4_ZLIM','zamsiw_limit');
   {? _zk_p<>null()
    & ZK_P.seek(_zk_p)
   || exec('disp_rez','rezerwacje')
   ?};
   ZL.cntx_pop();
   ZK_P.cntx_pop();
   ZK_N.cntx_pop();
   ZLIM.cntx_pop()
?};
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 29c03994a92a30b50297130dd5cbe060db453c7b70389cd222398d0392e088d94345c24925b243967865fd470aa50a1a7c4aae7a3179793976267184f1b1b73030296f32a3c31f8f21a2044352a9a43bf6b51b0d2e924fe1f056334b2391763949421cac8d8405d2adc3f05f50d2869045e977ec93b44c6df2e16edafa5fe167
