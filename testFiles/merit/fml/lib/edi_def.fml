:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: edi_def.fml
:: Utworzony: 19.05.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Definiowanie komunikatów edi - nagłówki
::======================================================================================================================


\bl_istdf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2010]
:: OPIS: Wartosc poczatkowa pola ISTDEF.IST_ISTK
::  OLD: \bl_istdf/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.ISTDEF


\bl_istdef_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula ustawia na wartosc poczatkowa pola ISTDEF.RODZAJ na 'INVOIC' - FAKTURA
::  OLD: \bl_istdef_rodz/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? SKID.ISTDEF='D'   || ''
|? SKID.ISTDEF='J'   || HELPJPK.RODZAJ
|? SKID.ISTDEF='E'   || 'EDI'
|? SKID.ISTDEF='M'   || 'IMPORT'
                     || 'INVOIC'
?}


\f3_istdef_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula wyswietla okienka popup z wyborem rodzaju komunikatu
::  OLD: \f3_istdef_rodz/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? SKID.ISTDEF='D' || return(exec('f3_rodzaj','xml')) ?};
{? SKID.ISTDEF='J' || return(exec('f3_rodzaj','jpk')) ?};
_rodzaj:='';
VAR_DEL.delete('TYP_RODZ');
TYP_RODZ:=obj_new(@.CLASS.POPUP);
_rodzaj:=6+TYP_RODZ.select(
     'INVOIC - FAKTURA',
     'ORDERS - ZAMÓWIENIE',
     'DESADV - AWIZO WYSYŁKI',
     'RECADV - POTWIERDZENIE PRZYJĘCIA'
     );
_rodzaj:=form(_rodzaj);
VAR_DEL.delete('TYP_RODZ');
{? _rodzaj<>'' || ISTDEF.RODZAJ:=_rodzaj ?}


\ae_istdef_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula sprawdza czy uzytkownik wpisal wlasciwe slowo kluczowe
::  OLD: \ae_istdef_rodz/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? SKID.ISTDEF='D' || return(exec('ae_rodzaj','xml')) ?};
{? SKID.ISTDEF='J' || return(exec('ae_rodzaj','jpk')) ?};
{? ISTDEF.RODZAJ='INVOIC'
|| ISTDEF.EMAIL:='FAKTURA';
   1
|? ISTDEF.RODZAJ='ORDERS'
|| ISTDEF.EMAIL:='ZAMÓWIENIE';
   1
|? ISTDEF.RODZAJ='DESADV'
|| ISTDEF.EMAIL:='AWIZO WYSYŁKI';
   1
|? ISTDEF.RODZAJ='RECADV'
|| ISTDEF.EMAIL:='POTWIERDZENIE PRZYJĘCIA';
   1
|| FUN.info('Dopuszczalne wartości:           '
   '\n\nINVOIC - FAKTURA                 '
     '\nORDERS - ZAMÓWIENIE              '
     '\nDESADV - AWIZO WYSYŁKI           '
     '\nRECADV - POTWIERDZENIE PRZYJĘCIA '@,FUN.TYT
     );
   0
?}


\ae_typy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AK [1020]
:: OPIS: Typy e-deklaracji w Finansach i ksiegowosci budzetowe (Trezor i Besti@)
::       plus typy specyfikacji XML w Depozytach
::  OLD: \ae_typy/ml_xpert.fml
::----------------------------------------------------------------------------------------------------------------------
::Poczatek modyfikacji dla MacLEX Depozyt 29.09.2010 SK [1120]
'B27S|B28S|TPLW|TPLD|T23|T27|T28|TRBN|TRBZ|O27|O28|O23|O28z|'+'BRERAA|BRERAI|BRERBA|BRERBD|BRERBI|'
::Koniec modyfikacji dla MacLEX Depozyt


\blistdat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wartosc poczatkowa pola DATA tabeli ISTDEF
::  OLD: \blistdat/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? SKID.ISTDEF='D' || date() || date(0,0,0) ?}


\edi_format_pr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2008]
:: OPIS: Przed redakcja ISTDEF.FORMAT
::  OLD: \edi_format_pr/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
EDI_Z.ISTD_PD='D'


\bl_lpist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: Wartosc poczatkowa pola ISTDEF.LP
::  OLD: \bl_lpist/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
ISTDEF.cntx_psh();
ISTDEF.index('R');
ISTDEF.prefix('XPERTIS','M');
{? ISTDEF.first() || {! |? {? ISTDEF.LP>_wyn || _wyn:=ISTDEF.LP ?}; ISTDEF.next() !} ?};
ISTDEF.cntx_pop();
_wyn+=1;
_wyn


\idf_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2009]
:: OPIS: Kontrola usuniecia
::  OLD: \idf_del/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
{? ISTDEF.count()>0
||
   FUN.info('Specyfikacja posiada informacje o strukturze.\n'
            'Usunięcie niedozwolone.'@);
   0
||
   1
?}


\istd_wer_rekpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: rekord po okna WER tabeli ISTDEF
::  OLD: \istd_wer_rekpo/ist02.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(ISTDEF,,'VER','XMLNS')


\bl_system
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Wartość początkowa pola ISTDEF.SYSTEM
::----------------------------------------------------------------------------------------------------------------------
{? SKID.ISTDEF='D' || BPMN.SYM_DOM || BPMN.SYM_DOM ?}


\edi_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Definiowanie komunikatów EDI
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SKID.ISTDEF:='E';
_b_domain:=BPMN.B_DOMAIN;
BPMN.B_DOMAIN:=exec('FindInSet','#table','B_DOMAIN','SYMBOL',_a);
{? BPMN.B_DOMAIN
|| BPMN.SYM_DOM:=BPMN.B_DOMAIN().SYMBOL;
   ISTDEF.win_sel('EDI_DEF');
   ISTDEF.actions('EDI_DEF','E');
   ISTDEF.win_edit('EDI_DEF');
   ISTDEF.index('K');
::   ISTDEF.prefix(BPMN.SYM_DOM,'E');
   ISTDEF.prefix();
   ISTDEF.f_set('K,N',,'SYSTEM='':_a'' and IST_ISTK='':_b'' and (FIRMA='''' or FIRMA='':_c'')',
      BPMN.SYM_DOM,'E',__Firma);
   ISTDEF.select();
   ISTDEF.f_clear()
?};
BPMN.B_DOMAIN:=_b_domain;
BPMN.SYM_DOM:=BPMN.B_DOMAIN().SYMBOL


\edidefkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja kodow GLN kontrahentow, wolana Edi->Definicje->Kontrahenci
::  OLD: \edidefkh/edison.fml
::----------------------------------------------------------------------------------------------------------------------
__KH_R:=KH.mk_edit('Kod GLN kontrahenta'@,0);
KH.win_edit(__KH_R);
KH.win_esep(__KH_R,'Identyfikator kontrahenta'@);
KH.win_efld(__KH_R,,'KOD',,,14,,1);
KH.win_efld(__KH_R,,'NAZ',,,,,1,'Kontrahent'@);
KH.win_efld(__KH_R,,'GLN',,,,,,,,'Identyfikator kontrahenta wykorzystywany w komunikatach EDI'@);
__KH_S:=KH.mk_sel('Lista kodów GLN kontrahentów'@,'P',0,,,,,,'U');
KH.win_sel(__KH_S);
KH.win_fld(__KH_S,,'KOD');
KH.win_fld(__KH_S,,'NAZ');
KH.win_fld(__KH_S,,'GLN');
KH.win_act(__KH_S,,'Popraw',,,'Edycja kodu GLN kontrahenta'@,,,1);
KH.win_act(__KH_S,,'Formuła','&Odbiorcy'@@,,'Definiowanie GLN odbiorców'@,"exec('edidefod','edi_def')",,,,,,'O');
KH.win_act(__KH_S,,'Formuła','Kod&y towarowe'@@,,'Kody towarowe kontrahentów'@,"exec('kodk_kh','edi_def')",,,,,,'Y');
KH.win_act(__KH_S,,'Kolejność');
exec('ok_esc','#window',KH,__KH_R);
KH.fld_attr(,2);
KH.index('KOD');
KH.prefix(2);
KH.select();
KH.fld_attr(,3);
&__KH_R; &__KH_S


\edideftm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja kodow GTIN materialow, Edi->Definicje->Materialy
::  OLD: \edideftm/edison.fml
::----------------------------------------------------------------------------------------------------------------------
__M_R:=M.mk_edit('Kod kreskowowy materiału'@,0);
M.win_edit(__M_R);
M.win_esep(__M_R,'Identyfikator materiału wykorzystywany w komunikatach'@);
M.win_efld(__M_R,,'RODZ',,,,,1,'Materiał/Usługa'@);
M.win_efld(__M_R,,'KTM',,,100,,1);
M.win_efld(__M_R,,'N',,,,,1);
M.win_efld(__M_R,,'KODK',,,100,,,,,'Identyfikator materiału wykorzystywany w komunikatach EDI'@);
__M_S:=M.mk_sel('Kody kreskowe materiałów'@,'P',0,,,,,,'U');
M.win_sel(__M_S);
M.win_fld(__M_S,,'RODZ',,,,,,'Materiał/Usługa'@);
M.win_fld(__M_S,,'KTM');
M.win_fld(__M_S,,'N',,,20);
M.win_fld(__M_S,,'KODK',,,14);
exec('ok_esc','#window',M,__M_R);
_fm:="_wyn:=exec('m_kody_chk','kody_kresk',M.ref(),M.KTM,M.KODK);
      {? _wyn='' & M.KODK<>'' & ~exec('unik_ean','kody_kresk','M',M.KODK,M.ref())
      ||  FUN.info('Podany kod kreskowy jest już wykorzystywany w systemie.\nNależy podać inny.'@);
         _wyn:= 'KODK'
      ?};
      _wyn";
M.win_act(__M_S,,'Formuła','&Popraw'@@,,,,
   $('
   {? M.edit("'+_fm+'")
   || do;
      M.put();
      exec(\'m_kody_akt\',\'kody_kresk\',M.ref(),M.KTM,M.N,M.KODK);
      end
   ?}
   '),1,,,,'P');
M.win_act(__M_S,,'Kolejność');
M.fld_attr(,2);
M.index('MATKTM');
M.prefix();
M.select();
M.fld_attr(,3);
&__M_R; &__M_S


\edi_imp_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: import definicji edi
::   WE: _a - pth
::       _b - fname
::       _c - INTEGER - tryb pracy: 0 - nie zastępować istniejących wartości, 1 - zastępować istniejące
::  OLD: \edi_imp/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_pth:={? var_pres('_a')=type_of('') || _a || '' ?};
_fname:={? var_pres('_b')=type_of('') || _b || '' ?};
_mode:={? var_press('_c')=type_of(0) || _c || 0 ?};

_result:='';

{? _pth='' | _fname='' || return('Należy podać parametr _a i _b.'@) ?};

_wg_xp:=-1;
_firmowy:='';
_sep:=^708;
ISTDEF.cntx_psh();
ISTDEF.index('LP');
ISTDEF.prefix();
EDI_D.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEFI.cntx_psh();
EDI_D.prefix();
ISTDEFS.prefix();
ISTDEFI.prefix();
_Files:=tab_tmp(1,'FILENAME','STRING[64]','');
_wg_pth:=_pth='';
{? ~_wg_pth
|| _separ:=exec('sep','#file',{? 1+_pth='@' || 0 || 2 ?});
   _pth+=_separ;
   _pth:=gsub(_pth,'\\','\\\\')
?};
_Files.FILENAME:=_fname;
_Files.add();
_buf:=obj_new(@.CLASS.BUFFER,'ISTDEF');
_Hash_kom:=exec('hash_kom','edi_def',1);
_loop:=_Files.first();
{!
|? _loop
|!
   _in:=fopen(_pth+_Files.FILENAME,'ur',0);
   _istdef:=_edi_d:=_istdefs:=null();
   _eol:='';
   {? _in
   || {!
      |? (_txt:=fread(_in))<>'\n'
      |!
         _spli_txt:=spli_str(_txt,_sep); _spli_txt_len:=obj_len(_spli_txt); obj_del(_spli_txt);
         _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;
         {? _txt1='H'
         || _eol:='';
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _firmowy:=_txt1='FIRMOWY'
         |? _txt1='V'
         || _eol:='';
            _Hash_kom.blank();
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.OD:=date(#(4+_txt1),#(5-_txt1-3),#(_txt1+2));
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.HASH_DEF:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.HASH_STR:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.HASH_FOR:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.OPIS:=_txt1;
            {? 1
:: importowanie wersji wg danych w pliku
            || _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.ARCHIWUM:=_txt1
:: importowanie wersji zawsze jako archiwalnej
            || _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _Hash_kom.ARCHIWUM:='T'
            ?};
            _Hash_kom.add();
            {? _wg_xp || _wg_xp:=(6+_Hash_kom.OPIS)='~12.51' ?}
         |? _txt1='N'
         || _wg_xp:=_wg_xp=1;
            _istdef:=_edi_d:=_istdefs:=null();
            _eol:='';
            ISTDEF.blank();
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.SYSTEM:={? _txt1='ZBL' || 'ZWS' || _txt1 ?};
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.TM_STAM:=exec('convert_xp2merit','edi_def',#_txt1);
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.VER:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.XMLNS:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.IST_ISTK:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.EMAIL:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.RODZAJ:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.DATA:=date(#(4+_txt1),#(5-_txt1-3),#(_txt1+2));
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.K:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.N:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.W:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.R:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.FW:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.FR:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.FORMAT:=_txt1;
            _action:=var_pres('ACTION',ISTDEF)=27;
            {? _spli_txt_len=24
            || _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt; {? _action || ISTDEF.ACTION:=_txt1 ?};
               _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt; {? _action || ISTDEF.FMMAIN:=_txt1 ?}
            ?};
            {? _action & ISTDEF.ACTION='' || ISTDEF.ACTION:='N' ?};
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.F_STARTG:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.F_ENDG:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.F_STARTD:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.F_ENDD:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEF.BL_TYPE:=_txt1;
            {? ISTDEF.FORMAT='N'
            || ISTDEF.FIRMA:=__Firma;
               ISTDEF.VER:=ISTDEF.K+ISTDEF.FIRMA
            ?};
::            {? ISTDEF.K='UFD_INV_O_0001' || debug() ?};
:: przestawić na 0& jeśli potrzeba pobrać definicje z Xpertis w Merit np. podczas testów
            {? 1& _wg_xp
            ||
               _result:='Definicja dotyczy Xperits. Pominięto import definicji komunikatu: %1.'@[ISTDEF.K]

            |? ISTDEF.add(1)
            ||
               _istdef:=ISTDEF.ref();
               _loop:=_Hash_kom.first();
               {!
               |? _loop
               |!
                  exec('istdefv_add','edi_def',_Hash_kom,,1);
                  _loop:=_Hash_kom.next()
               !}
            ||
               _buf.save();
               _data:=date(0,0,0);
               _find:=ISTDEF.find_key(ISTDEF.FIRMA,ISTDEF.SYSTEM,ISTDEF.IST_ISTK,ISTDEF.TM_STAM);
               {? _find
               ||
                  _data:=ISTDEF.DATA;
                  exec('standard','edi_def',_Hash_kom);
                  {? _mode | ISTDEF.STANDARD='T'
                  ||
                     _loop:=_Hash_kom.first();
                     {!
                     |? _loop
                     |!
                        exec('istdefv_add','edi_def',_Hash_kom,,1);
                        _loop:=_Hash_kom.next()
                     !}
                  ?}
               ?};
               {? _mode=0 & _find & ISTDEF.STANDARD<>'T'
               ||
                  _result:=
                     {? ISTDEF.STANDARD='N'
                     || 'Pominięto import istniejącej niestandardowej definicji komunikatu: %1.'@[ISTDEF.K]
                     || 'Pominięto import istniejącej definicji komunikatu: %1.'@[ISTDEF.K]
                     ?}

               |? _find
               ||
::                   UWAGA:   Domyślnie dopisujemy strukturę komunikatu jeśli jej nie ma.
::                            Jeśli komunikat standardowy lub nieokreślony i 100304=T wtedy usuwamy strukturę
::                            wg dotychczasowej definicji i importujemy nową. Przy takim ustawieniu wszystkie
::                            dotychczasowe zmodyfikowane struktury zostaną utracone.
                  _usu_str:=
                       ISTDEF.STANDARD='T'
                     | ISTDEF.STANDARD='N' & _mode
                     | ISTDEF.STANDARD='' & _mode & exec('get','#params',100304,2)='T';
                  _put:=1;
                  {? ISTDEF.FORMAT='F'
                  || {? _usu_str
                     || exec('usun_strukture','edi_defff',ISTDEF.ref())
                     || _put:=exec('FindInSet','#table','EDI_D','LP',ISTDEF.ref(),,,,,null())=null()
                     ?}
                  |? ISTDEF.FORMAT='X' | ISTDEF.FORMAT='C'
                  || {? _usu_str
                     || exec('usun_strukture','edi_defxml',ISTDEF.ref())
                     || _put:=exec('FindInSet','#table','ISTDEFS','DRZEWO',ISTDEF.ref(),,,,,null())=null()
                     ?}
                  |? ISTDEF.FORMAT='N'
                  || {? _usu_str
                     || exec('usun_strukture','edi_xml',ISTDEF.ref())
                     || _put:=exec('FindInSet','#table','ISTXML','TREE',ISTDEF.ref(),,,,,null())=null()
                     ?}
                  ?};
::                   nadpisujemy nagłówek definicji
                  {? _put=0
                  ||
                     _result:='Pominięto import istniejącej definicji komunikatu: %1.'@[ISTDEF.K]
                  ||
                     _buf.restore();
                     ISTDEF.DATA:=_data;
                     {? ISTDEF.put()
                     ||
                        _istdef:=ISTDEF.ref();
                        _result:='Nadpisano strukturę komunikatu: %1'@[ISTDEF.K]
                     ?}
                  ?}
               ?}
            ?}
         |? _txt1='D' & _istdef
         || EDI_D.blank();
            EDI_D.G:=_istdef;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.LP:=#_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.K:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.T:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.OP:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.M:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.TAB:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.FLD:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.RL:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.FLF:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.DL:=#_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.WYM:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  EDI_D.UPPER:=_txt1;
            {? EDI_D.add() || _edi_d:=EDI_D.ref() ?}
         |? _txt1='<![CDATA[' & _edi_d
         || {?  var_pres('_memo')>100 || fclose(_memo); &_memo ?};
            _memo:=fopen('null','w!',,,1)
         |? _txt1='M' & _edi_d & var_pres('_memo')>100 & _memo.is_open()
         || fwrite(_memo,_eol+_txt);
            _eol:='\n'
         |? _txt1=']]>' & _edi_d & var_pres('_memo')>100 & _memo.is_open()
         || EDI_D.memo_put(_memo,'OPIS');
            fclose(_memo); &_memo
         |? _txt1='S' & _istdef
         || ISTDEFS.blank();
            ISTDEFS.ISTDEF:=_istdef;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.LP:=#_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.OPIS:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.LICZ:=#_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.WYM:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.REGULY:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.FORMULA:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.FORM_XML:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFS.NAZTAB:=_txt1;
            {? ISTDEFS.add() || _istdefs:=ISTDEFS.ref() ?}
         |? _txt1='I' & _istdefs
         || ISTDEFI.blank();
            ISTDEFI.ISTDEFS:=_istdefs;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.LP:=#_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.NAZ:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.NRFP:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.WYM:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.TYP:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.SLOWNIK:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.NAZFLD:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.REGULY:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.OPIS_FLD:=_txt1;
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  ISTDEFI.LOG:=_txt1;
            ISTDEFI.add()

         |? _txt1='F' & _istdef & ISTDEF.FORMAT='N'
         ||
            _wsk:=_txt*_sep; _txt1:=(_wsk-1)+_txt; _txt:=_wsk-_txt;  _fname:=_txt1;
            {? _fname<>''
            ||
               exec('def_imp','edi_xml',_pth+_fname,_istdef,1)
            ?}
         ?}
      !};
      {? _istdef
      ||
         exec('istdefv_del_unkown','edi_def',_Hash_kom);
         exec('standard','edi_def')
      ?};
      _Hash_kom.prefix();
      {? _Hash_kom.first() || {! |? _Hash_kom.del() !} ?};
      fclose(_in)
   ?};
   _loop:=_Files.next()
!};
ISTDEFI.cntx_pop();
ISTDEFS.cntx_pop();
EDI_D.cntx_pop();
ISTDEF.cntx_pop();
_result


\edi_exp_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: eksport definicji edi
::   WE: _a - pth
::       _b - ISTDEF.ref()
::  OLD: \edi_exp/edison.fml
::----------------------------------------------------------------------------------------------------------------------
_pth:={? var_pres('_a')=type_of('') || _a || '' ?};
_ref:={? var_pres('_b')=type_of(null()) || _b || null() ?};

_result:='';

{? _pth<>'' & _ref=null() | _pth='' & _ref || return(_result) ?};

_wg_pth:=_pth='';
{? ~_wg_pth
|| _separ:=exec('sep','#file',{? 1+_pth='@' || 0 || 2 ?});
   _pth+=_separ;
   _pth:=gsub(_pth,'\\','\\\\')
?};

_sep:=^708;
ISTDEF.cntx_psh();
ISTDEFS.cntx_psh();
ISTDEFI.cntx_psh();
ISTDEF.index('LP');
ISTDEF.prefix();
{? ISTDEF.seek(_ref) & ISTDEF.SYSTEM=BPMN.SYM_DOM & ISTDEF.IST_ISTK='E'
      &
   ISTDEF.FIRMA='' | ISTDEF.FIRMA=__Firma
||
   _formatn:=ISTDEF.FORMAT='N';
   {? ISTDEF.FORMAT='X' | ISTDEF.FORMAT='F' | _formatn
   || _typ:={? ISTDEF.FORMAT='X' || 'xml' |? ISTDEF.FORMAT='N' || 'xsd' || 'ff_' ?};
      _result:=_fname:='edidef_'+_typ+'_'+form(ISTDEF.K,,,'99')+'.dem';
      _out:=fopen(_pth+_fname,'uw',0);
      {? _out
      ||
         fwrite(_out,
            'H'+_sep+
            {? _formatn || 'FIRMOWY' || 'WSPÓLNY DLA FIRM' ?}+_sep
         );
         {? exec('upgrade2325_ksef2','zbl')
         || ISTDEFV.index('EXP')
         || ISTDEFV.index('ISTDEF')
         ?};
         ISTDEFV.prefix(ISTDEF.ref());
         _loop:=ISTDEFV.last();
         {!
         |? _loop
         |!
            fwrite(_out,
               'V'+_sep+
              $ISTDEFV.OD+_sep+
               ISTDEFV.HASH_DEF+_sep+
               ISTDEFV.HASH_STR+_sep+
               ISTDEFV.HASH_FOR+_sep+
               ISTDEFV.OPIS+_sep+
               ISTDEFV.ARCHIWUM+_sep
            );
            _loop:=ISTDEFV.prev()
         !} ;
         fwrite(_out,
            'N'+_sep+
            ISTDEF.SYSTEM+_sep+
           $ISTDEF.TM_STAM+_sep+
            {? ISTDEF.FIRMA='' || ISTDEF.VER || ISTDEF.VER-3 ?}+_sep+
            ISTDEF.XMLNS+_sep+
            ISTDEF.IST_ISTK+_sep+
            ISTDEF.EMAIL+_sep+
            ISTDEF.RODZAJ+_sep+
           $ISTDEF.DATA+_sep+
            ISTDEF.K+_sep+
            ISTDEF.N+_sep+
            ISTDEF.W+_sep+
            ISTDEF.R+_sep+
            ISTDEF.FW+_sep+
            ISTDEF.FR+_sep+
            ISTDEF.FORMAT+_sep+
            {? var_pres('ACTION',ISTDEF)=27
            || ISTDEF.ACTION+_sep+
               ISTDEF.FMMAIN+_sep
            || 'N'+_sep+
               ''+_sep
            ?}+
            ISTDEF.F_STARTG+_sep+
            ISTDEF.F_ENDG+_sep+
            ISTDEF.F_STARTD+_sep+
            ISTDEF.F_ENDD+_sep+
            ISTDEF.BL_TYPE+_sep)
      ?}
   ?};
   {? ISTDEF.FORMAT='F'
   || {? _out
      || EDI_D.index('LP');
         EDI_D.prefix(ISTDEF.ref());
         _loop:=EDI_D.first();
         {!
         |? _loop
         |!
            fwrite(_out,
               'D'+_sep+
               form(EDI_D.LP,,0,'99')+_sep+
               form(EDI_D.K)+_sep+
               form(EDI_D.T)+_sep+
               form(EDI_D.OP)+_sep+
               form(EDI_D.M)+_sep+
               form(EDI_D.TAB)+_sep+
               form(EDI_D.FLD)+_sep+
               form(EDI_D.RL)+_sep+
               form(EDI_D.FLF)+_sep+
               form(EDI_D.DL)+_sep+
               form(EDI_D.WYM)+_sep+
               form(EDI_D.UPPER)+_sep);
            fwrite(_out,'<![CDATA['+_sep);
            _memo:=EDI_D.memo_get('r','OPIS',0);
            {? _memo.is_open()
            || {!
               |? (_txt:=fread(_memo))<>'\n'
               |!
                  fwrite(_out,'M'+_sep+_txt)
               !};
               fclose(_memo)
            ?};
            &_memo;
            fwrite(_out,']]>'+_sep);
            _loop:=EDI_D.next()
         !}
      ?}
   |? ISTDEF.FORMAT='X'
   || {? _out
      || ISTDEFS.index('LP');
         ISTDEFS.prefix(ISTDEF.ref);
         _loop:=ISTDEFS.first();
         {!
         |? _loop
         |!
            fwrite(_out,
               'S'+_sep+
              $ISTDEFS.LP+_sep+
               ISTDEFS.OPIS+_sep+
              $ISTDEFS.LICZ+_sep+
               ISTDEFS.WYM+_sep+
               ISTDEFS.REGULY+_sep+
               ISTDEFS.FORMULA+_sep+
               ISTDEFS.FORM_XML+_sep+
               ISTDEFS.NAZTAB+_sep);
            ISTDEFI.index('LP');
            ISTDEFI.prefix(ISTDEFS.ref);
            _loop:=ISTDEFI.first();
            {!
            |? _loop
            |!
               fwrite(_out,
                  'I'+_sep+
                 $ISTDEFI.LP+_sep+
                  ISTDEFI.NAZ+_sep+
                  ISTDEFI.NRFP+_sep+
                  ISTDEFI.WYM+_sep+
                  ISTDEFI.TYP+_sep+
                  ISTDEFI.SLOWNIK+_sep+
                  ISTDEFI.NAZFLD+_sep+
                  ISTDEFI.REGULY+_sep+
                  ISTDEFI.OPIS_FLD+_sep+
                  ISTDEFI.LOG+_sep);
               _loop:=ISTDEFI.next()
            !};
            _loop:=ISTDEFS.next()
         !}
      ?}

   |? _formatn
   ||
      {? _out
      ||
         _fname:='edidef_%1_%2'[_typ,form(ISTDEF.K,,,'99')];
         exec('def_exp','edi_xml',_fname,ISTDEF.ref(),_pth);
         fwrite(_out,'F'+_sep+_fname+_sep)
      ?}
   ?};
   {? var_pres('_out')>0 || fclose(_out); _out:=0 ?}
?};
ISTDEFI.cntx_pop();
ISTDEFS.cntx_pop();
ISTDEF.cntx_pop();
_result


\edidefod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: definicja kodow GLN odbiorcow, wolana Edi->Definicje->Kontrhenci->Odbiorcy
::  OLD: \edidefod/edison.fml
::----------------------------------------------------------------------------------------------------------------------
__ODB_R:=KH_ODB.mk_edit('Kod GLN odbiorcy'@,0);
KH_ODB.win_edit(__ODB_R);
KH_ODB.win_esep(__ODB_R,'Identyfikator odbiorcy'@);
KH_ODB.win_efld(__ODB_R,,'KOD',,,40,,1);
KH_ODB.win_efld(__ODB_R,,'NAZ',,,40,,1);
KH_ODB.win_efld(__ODB_R,,'MIASTO',,,40,,1);
KH_ODB.win_efld(__ODB_R,,'UL',,,45,,1);
KH_ODB.win_efld(__ODB_R,,'EM',,,40,,1);
KH_ODB.win_efld(__ODB_R,,'GLN',,,,40,,,,'Identyfikator odbiorcy wykorzystywany w komunikatach EDI'@);
__ODB_S:=KH_ODB.mk_sel('Odbiorcy kontrahenta '@,'P',0);
KH_ODB.win_sel(__ODB_S);
KH_ODB.hdr_sel(KH.SKR);
KH_ODB.win_fld(__ODB_S,,'KOD');
KH_ODB.win_fld(__ODB_S,,'NAZ',,,20);
KH_ODB.win_fld(__ODB_S,,'MIASTO',,,20);
KH_ODB.win_fld(__ODB_S,,'UL');
KH_ODB.win_fld(__ODB_S,,'GLN');
exec('ok_esc','#window',KH_ODB,__ODB_R);
KH_ODB.win_act(__ODB_S,,'Popraw',,,'edycja kodu GLN odbiorcy'@,,,1);
KH_ODB.win_act(__ODB_S,,'Kolejność');
KH_ODB.index('KH_ODB');
KH_ODB.prefix(KH.ref());
KH_ODB.select();
&__ODB_R; &__ODB_S


\kodk_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2008]
:: OPIS: Formula wyswietla okienko wertowania kodow dla kontrahenta
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::  OLD: \kodk_kh/tkod.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

exec('khvz_kh','kontrahent');
M.cntx_psh();
M.win_dict('NL_WER');
_act:=M.actions('NL_WER','W');
HELP.KODK:='kh';
MKODK.win_sel('WERKH');
MKODK.hdr_sel();
MKODK.hdr_sel({? KHVZ.KH || ' kontrahenta: '@+KHVZ.KH().SKR || '' ?});
MKODK.win_sel('WERKHU');
MKODK.hdr_sel();
MKODK.hdr_sel({? KHVZ.KH || ' kontrahenta: '@+KHVZ.KH().SKR || '' ?});

_win_grp:=MKODK.grp_make('Kody: ' +KHVZ.KH().NAZ);
MKODK.grp_sel(_win_grp,MKODK,'WERKH','Materiały',,,,,"exec('b_mkodk','edi_def')",,,,,'T');
MKODK.grp_sel(_win_grp,MKODK,'WERKHU','Usługi',,,,,"exec('b_mkodk','edi_def')",,,,,'U');
MKODK.win_sel(_win_grp);

{? _a=1 || MKODK.select() ?};
M.actions('NL_WER',_act);
M.cntx_pop();
1


\edi_strukt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formula wyswietla strukture wybranej specyfikacji EDI
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~ISTDEF.r_lock(1,1,1)
|| FUN.info('Zasób zablokowany przez innego użytkownika.'@)
|| {? ISTDEF.FORMAT='F'
:: definicja flat file
   || exec('edipozcm','edi_defff')
   |? ISTDEF.FORMAT='N'
:: nowa definicja xml
   || exec('define','edi_xml')
:: definicja xml
   || exec('strukt','edi_defxml')
   ?};
   ISTDEF.r_unlock()
?}


\edi_dol_defin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula dodaje nowy naglowek komunikat EDI
::   WY: 1 - dodano naglowek komunikatu
::       0 - wpp
::----------------------------------------------------------------------------------------------------------------------
EDI_Z.ISTD_PD:='D';
EDI_Z.ACTION:='N';
ISTDEF.blank();
ISTDEF.memo_set(,'OPIS');
ISTDEF.win_edit('EDI_DEF');
{? ISTDEF.edit("exec('valid_edi_defin','edi_def','D')")
|| ISTDEF.add();
   ISTDEF.memo_put(,'OPIS');
   {? ISTDEF.f_active() || ISTDEF.f_rfresh() ?}
?}


\edi_pop_defin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula poprawia naglowek komunikatu EDI
::   WY: 1 - poprawiono naglowek komunikatu
::       0 - wpp
::----------------------------------------------------------------------------------------------------------------------
EDI_Z.ISTD_PD:='P';
ISTDEF.memo_get(,'OPIS');
{? ISTDEF.edit("exec('valid_edi_defin','edi_def','P')")
|| ISTDEF.put();
   ISTDEF.memo_put(,'OPIS');
   exec('standard','edi_def')
?}


\valid_edi_defin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula sprawdza poprawnosc wporawadzanego rekordu
::   WE: _a = 'P' - formula uruchomiona na popraw
::          = 'D' - formula uruchomiona na dolacz
::   WY: '' - poprawnie wypelniono dane w definicji
::       wpp - akronim pola ktore nie jest prowidlowo wypelnione
::  OLD: \valid_edi_defin/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_mechi:=ISTDEF.IST_ISTK='M';
_system:={? _mechi || 'XPERTIS' || BPMN.SYM_DOM ?};

{? _a='D' || ISTDEF.FIRMA:={? ISTDEF.FORMAT='N' || __Firma || '' ?} ?};
:: bezposrednio redagowanym polem jest ISTDEF.K, pole ISTDEF.VER uzupelniane w tle
ISTDEF.VER:={? _mechi || ISTDEF.K || ISTDEF.K+ISTDEF.FIRMA ?};
_rr:=
   {? ISTDEF.IST_ISTK='E'
   || __CHK.record(ISTDEF,,'K','N')
   |? ~_mechi
   || __CHK.record(ISTDEF,,'VER','K','N')
   || __CHK.record(ISTDEF,,'VER','K','N','FR')
   ?};
{? ISTDEF.W<>'T' || ISTDEF.MSC:='' ?};
{? _rr=''
|| _ref:={? _a='P' || ISTDEF.ref() || null() ?};
   _ver:=ISTDEF.VER;
   ISTDEF.cntx_psh();
   ISTDEF.index('VER');
   ISTDEF.prefix(_system,ISTDEF.IST_ISTK,ISTDEF.VER);
   {? ISTDEF.first
   || {!
      |?
         {? ISTDEF.VER=_ver & _ref<>ISTDEF.ref
         || FUN.info('Występuje już komunikat o podanym kodzie.\nZmień kod komunikatu.'@);
            _rr:='K';
            0
         || 1
         ?} & ISTDEF.next()
      !}
   ?};
   ISTDEF.cntx_pop()
?};
{? _rr='' & ISTDEF.ACTION='T' & ISTDEF.FMMAIN=''
|| FUN.info('Należy podać formułę główną definiującą parametry czynności.'@);
   _rr:='FMMAIN'
?};
_rr


\edi_usu_defin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Obsluga akcji Usun okienka W_EDI tabeli ISTDEF
::  OLD: \edi_usu_defin/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_count:=ISTDEF.count();
{? _count<0
||
   FUN.info('Niemożliwe sprawdzenie powiązań rekordu z innymi tabelami.'
      '\nRekordu bez sprawdzenia powiązań nie można usunąć.'@)

|? ~_count
||
   {? FUN.ask('Czy usunąć bieżący wiersz?'@)
   ||
      _wyn:=1;
      ISTDEF.del()
   ?}
||
   {? FUN.ask('Czy usunąć bieżący wiersz?'@)
   ||
      _linki:=ISTDEF.testlink();
      {? var_pres('_linki')=type_of(~~)
      ||
         FUN.info('Rekordu bez sprawdzenia powiązań z innymi tabelami\nnie można usunąć.'@)
      ||
         _sizeLink:=_linki.size();
         _linki.prefix('DEZEZW');
         _sizeLink-=(_sizeDZW:=_linki.size);
         {? ISTDEF.FORMAT='F' | ISTDEF.IST_ISTK='M'
         || _linki.prefix('EDI_D')
         |? ISTDEF.FORMAT='N'
         || _linki.prefix('ISTXML')
         || _linki.prefix('ISTDEFS')
         ?};
         _sizeLink-=(_sizeDFS:=_linki.size);
         {? ISTDEF.IST_ISTK='M'
         ||
            _linki.prefix('EDI_S');
            _sizeLink-=(_sizeDFS:=_linki.size)
         ?};
         _procDelOk:=0;
         _displInfo:=1;
         {? ISTDEF.RODZAJ='IMPORT'
         || _linki.prefix('B_PREL');
            {? _linki.size>0
            || _displInfo:=0;
               {? _procDelOk:=FUN.ask('Definicja wykorzystywana w czynnościach procesów importu.\n\n'
                                      'Usunięce definicji spowoduje pominięcie czynności w czasie'
                                      '\nuruchamiania powiązanych procesów importu, oraz usunięcie'
                                      '\npowiązanej z definicją historii komunikatów. Po usunięciu'
                                      '\nnależy poprawić procesy zawierające import \"'+ISTDEF.VER+'\".'
                                      '\nKontynuować?'@)
               || _sizeLink-=_linki.size;
                  _linki.prefix('EDI_I');
                  _sizeLink-=_linki.size
               ?}
            ?}
         ?};
         _linki.prefix('ISTDEFV');
         _sizeLink-=_linki.size;
         _dalej:=1;
         {? _sizeDZW
         ||
            _dalej:=FUN.ask('Definicja przypisana do zezwoleń na elektroniczną wymianę dokumentów.'
               '\nUsunąć przypisane zezwolenia i usunąć definicję?'@)
         ?};
         {? _sizeLink | _dalej=0
         ||
            {? _dalej & _displInfo
            || FUN.info('Rekord powiązany z innymi tabelami\nnie może być usunięty.'@)
            ?}
         ||
            do();
            exec('def_del','edi_xml',ISTDEF.ref(),null());
            _order:='DEZEZW|EDI_S|EDI_D|ISTDEFS|ISTDEFV|';
            {? _procDelOk || _order+='EDI_I|B_PREL|' ?};
            {!
            |? +_order
            |!
               _wsk:=_order*'|'; _tab:=(_wsk-1)+_order; _order:=_wsk-_order;
               _Tab:=($_tab)();
               _linki.prefix(_tab);
               _loop:=_linki.first();
               {!
               |? _loop
               |!
                  _linki.first();
                  _Tab.cntx_psh();
                  {!
                  |?
                     _Tab.use(_linki.MASKA);
                     _Tab.cntx_psh();
                     _Tab.prefix();
                     {? _Tab.seek(_linki.REF,_linki.MASKA)
                     ||
                        {? _Tab=ISTDEFS
                        ||
                           ISTDEFI.cntx_psh();
                           ISTDEFI.index('LP');
                           ISTDEFI.prefix(ISTDEFS.ref());
                           _loop:=ISTDEFI.first();
                           {!
                           |? _loop
                           |!
                              _loop:=ISTDEFI.del()
                           !};
                           ISTDEFI.cntx_pop()
                        |? _Tab=B_PREL
                        ||
                           _Tab.ISTDEF:=null
                        ?};
                        {? _Tab=B_PREL || _Tab.put() || _Tab.del() ?}
                     ?};
                     _Tab.cntx_pop();
                     _linki.next()
                  !};
                  _Tab.cntx_pop();
                  _loop:=_linki.next()
               !};
               obj_del(_Tab)
            !};
            _wyn:=ISTDEF.del(1,1)>0;
            end()
         ?}
      ?}
   ?}
?};
_wyn


\edi_wys_defin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2008]
:: OPIS: Przed Wyswietl okna W_EDI tabeli ISTDEF
::  OLD: \edi_wys_defin/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.win_edit('EDI_DEF');
ISTDEF.display(); ~~


\edi_zezw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.70]
:: OPIS: Zezwolenia na wystawianie e-faktur
::   WE: _a - 'W'-zapis, 'R'-odczyt
::  OLD: \edi_zezw/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>0 || {? type_of(_a)<>type_of('') || _a:='' ?} || _a:='' ?};

{? BPMN.SYM_DOM='ZWS'
|| {? _a=''
   || FUN.info('Błąd przekazywanych parametrów do funkcji edi_zezw.'@)
   || EDI_Z.C:=ISTDEF.ref(); EDI_Z.WR:=_a;
      exec('initDEZEZW','edi_def');
      DEZEZW.index('WR');
      DEZEZW.prefix('ZWS',EDI_Z.C,EDI_Z.WR);
      DEZEZW.select()
   ?}
|| {? cur_tab=SLO
   || KH.index('KOD');
      KH.prefix(2,SLO.KOD);
      _khref:={? KH.first() || KH.ref() || null() ?}
   || _khref:=KH.ref()
   ?};
   {? _khref<>null()
   || SKID.ISTDEF:='E';
      ISTDEF.win_sel('W_EDI'); ISTDEF.win_edit('R_EDI');
      exec('initDEZEZW','edi_def');
      DEZEZW.index('KH');
      DEZEZW.prefix(BPMN.SYM_DOM,_khref);
      DEZEZW.select();
      exec('doneDEZEZW','edi_def')
   ?}
?};
~~


\initDEZEZW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.70]
:: OPIS: Definicja tabeli historii importu eksportu.
::  OLD: \initDEZEZW/skid_edi.fml
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
:: definicja okien tabeli zezwolen na wystawianie e-faktur
{? BPMN.SYM_DOM='ZWS' & EDI_Z.WR='R'
|| _tyt:='Dane'@
|| _tyt:='Okresy obowiązywania'@
?};
DEZEZW_WER:=DEZEZW.mk_sel(_tyt,'P',,'#opgssayewkvago',,,,,'U');
DEZEZW.win_sel(DEZEZW_WER);
DEZEZW.win_fld(DEZEZW_WER,,'ISTDEF','VER',,,,,'Komunikat'@);
{? BPMN.SYM_DOM='ZWS' & EDI_Z.WR='W'
|| DEZEZW.win_fld(DEZEZW_WER,,'KH','NAZ',,30,,,'Nadawca/Odbiorca'@)
?};
{? BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W'
|| DEZEZW.win_fld(DEZEZW_WER,,'OD');
   DEZEZW.win_fld(DEZEZW_WER,,'DO');
   DEZEZW.win_fld(DEZEZW_WER,,'WYD_ZEZW')
?};
DEZEZW.win_fld(DEZEZW_WER,,'B',,,,,,,,,2,,"'T'","'N'");
DEZEZW.win_fld(DEZEZW_WER,,'FILE_PTH',,,30,,,'Ścieżka do plików'@);
DEZEZW.win_act(DEZEZW_WER,,'Wyświetl',,,,"DEZEZW.display()");
DEZEZW.win_act(DEZEZW_WER,1,'Formuła','Dołącz'@@,,'Dołączanie nowego zapisu'@,"exec('dol_zezw','edi_def')",,1);
DEZEZW.win_act(DEZEZW_WER,,'Formuła','Dołącz'@@,,'Dołączanie nowego zapisu'@,"exec('dol_zezw','edi_def')",,1);
DEZEZW.win_act(DEZEZW_WER,,'Formuła','Popraw'@@,,'Poprawianie bieżącego zapisu'@,"exec('pop_zezw','edi_def')",);
DEZEZW.win_act(DEZEZW_WER,,'Usuń');
DEZEZW.win_act(DEZEZW_WER,,'Kolejność');

{? BPMN.SYM_DOM='ZWS' & EDI_Z.WR='R'
|| _tyt:='Dane'@
|| _tyt:='Okres obowiązywania'@
?};
DEZEZW_RED:=DEZEZW.mk_edit(_tyt);
DEZEZW.win_esep(DEZEZW_RED,_tyt);
DEZEZW.win_edit(DEZEZW_RED);
{? BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W'
|| DEZEZW.win_efld(DEZEZW_RED,,'OD',,,,,,,,'Od kiedy obowiązuje'@);
   DEZEZW.win_efld(DEZEZW_RED,,'DO',,,,,,,,'Do kiedy obowiązuje'@);
   DEZEZW.win_efld(DEZEZW_RED,,'WYD_ZEZW','Osoba akceptująca'@,,60,,,,,'Osoba akceptująca'@)
|| DEZEZW.win_efld(DEZEZW_RED,,'FILE_PTH',,,57,,,'Ścieżka do plików'@,
                ,'Ścieżka do plików wymiany danych z kontrahentem',,'F3_button=1')
?};
{? BPMN.SYM_DOM='ZWS' & EDI_Z.WR='R'
|| _tyt:='Blokada obowiązywania ścieżki do plików [T/N]'@
|| _tyt:='Blokada okresu obowiązywania zgody [T/N]'@
?};
DEZEZW.win_efld(DEZEZW_RED,,'B',,,,,,,,_tyt);
DEZEZW.win_efld(DEZEZW_RED,,'U',,,60,,,'Uwagi'@,,'Dodatkowe adnotacje'@);
{? BPMN.SYM_DOM='ZWS'
|| {? EDI_Z.WR='W'
   || DEZEZW.win_efld(DEZEZW_RED,,'KH','NAZ',,57,,1,'Nadawca/Odbiorca'@,,'Nadawca lub odbiorca komunikatu'@)
   ?};
   DEZEZW.win_efld(DEZEZW_RED,,'ISTDEF','VER','VER',57,,1,'Definicja komunikatu'@,,
      'Specyfikacja techniczna komunikatów (wybór z listy)'@)
|| DEZEZW.win_efld(DEZEZW_RED,,'ISTDEF','VER','VER',,,,'Definicja komunikatu'@,,
      'Specyfikacja techniczna komunikatów (wybór z listy)'@);
   DEZEZW.win_efld(DEZEZW_RED,,'ISTDEF','RODZAJ',,,,1,'Rodzaj komunikatu'@)
?};
{? BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W'
|| DEZEZW.win_efld(DEZEZW_RED,,'FILE_PTH',,,57,,,'Ścieżka do plików'@,
                ,'Ścieżka do plików wymiany danych z kontrahentem',,'F3_button=1')
?};
DEZEZW.fld_fml('FILE_PTH','F3',"
   _pth:=exec('filechooser','#file','Wybierz folder dla plików elektronicznych',,,,,'DIRECTORIES_ONLY');
   {? _pth<>'' || DEZEZW.FILE_PTH:='@'+_pth ?};
   ~~
");
::{? ~(BPMN.SYM_DOM='ZWS')
::||
::   DEZEZW.win_efld(DEZEZW_RED,,'FILE_SIG',,,,,,'Rozszerzenie pliku z podpisem'@,,
::      'Rozszerzenie pliku z podpisem, o ile jest dołączany do komunikatu'@)
::?};

::{? BPMN.SYM_DOM='ZWS' & EDI_Z.WR='W'
::||
::   DEZEZW.win_efld(DEZEZW_RED,,'S',,,,,,'Zezwolenie na e-podpis'@,,
::      'Zezwolenie na podpisywanie komunikatów za pomocą podpisu elektronicznego'@)
::?};
exec('set_efld_opt','edi_def',DEZEZW_RED,DEZEZW);
exec('ok_esc','#window',DEZEZW,DEZEZW_RED);
{? BPMN.SYM_DOM='ZWS'
||
   DEZEZW.hdr_sel({? EDI_Z.WR='W' || ' dla zapisu'@ || ' dla odczytu'@ ?})
?};
~~


\doneDEZEZW
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.70]
:: OPIS: Zwalnia zmienne.
::  OLD: \doneDEZEZW/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('DEZEZW_WER','DEZEZW_RED','DEEM_WER','DEEM_RED','DEZEZW_GWER');
~~


\dol_zezw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.70]
:: OPIS: Dolacz w oknie zezwolen na wystawianie e-faktur
::   WE: _a =1 - dla pustej dziedziny; =0 - wpp
::  OLD: \dol_zezw/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? BPMN.SYM_DOM='ZWS'
|| DEZEZW.blank(1);
   DEZEZW.B:='N';
   DEZEZW.S:='N';
   DEZEZW.SYSTEM:=BPMN.SYM_DOM;
   DEZEZW.ISTDEF:=ISTDEF.ref();
   DEZEZW.WR:=EDI_Z.WR;
   {? EDI_Z.WR='W'
   || KH.win_sel('SEL');
      KH.index('KOD'); KH.prefix(2);
      _moz:= KH.select()
   || _moz:=1
   ?};
   {? _moz
   || {? EDI_Z.WR='W'
      || DEZEZW.KH:=KH.ref()
      ?};
      {? DEZEZW.edit("exec('valid_zezw','edi_def','D')")
      || {? EDI_Z.WR='W'
         || _od:=DEZEZW.OD;
            DEZEZW.cntx_psh();
            DEZEZW.index('WR');
            DEZEZW.prefix('ZWS',EDI_Z.C,EDI_Z.WR,DEZEZW.KH);
            {? DEZEZW.last()
            || {? DEZEZW.DO=date(0,0,0)
               || DEZEZW.DO:=_od-1;
                  DEZEZW.MOD_USER:=USERS.DANE;
                  DEZEZW.MOD_TIME:=KH.tm_stamp();
                  DEZEZW.put()
               ?}
            ?};
            DEZEZW.cntx_pop()
         ?};
         DEZEZW.CRE_USER:=DEZEZW.MOD_USER:=USERS.DANE;
         DEZEZW.CRE_TIME:=DEZEZW.MOD_TIME:=KH.tm_stamp();
         DEZEZW.add()
      ?}
   ?}
|| DEZEZW.blank(1);
   DEZEZW.B:='N';
   ISTDEF.win_dict('W_EDI');
   {? DEZEZW.edit("exec('valid_zezw','edi_def','D',0)")
   || _od:=DEZEZW.OD;
      _rodzaj:=DEZEZW.ISTDEF().RODZAJ;
      DEZEZW.cntx_psh();
      DEZEZW.index('KH');
      DEZEZW.prefix(BPMN.SYM_DOM,KH.ref(),_rodzaj);
      {? DEZEZW.last()
      || {? DEZEZW.DO=date(0,0,0)
         || DEZEZW.DO:=_od-1;
            DEZEZW.MOD_USER:=USERS.DANE;
            DEZEZW.MOD_TIME:=KH.tm_stamp();
            DEZEZW.put()
         ?}
      ?};
      DEZEZW.cntx_pop();
      DEZEZW.KH:=KH.ref();
      DEZEZW.SYSTEM:=BPMN.SYM_DOM;
      DEZEZW.CRE_USER:=DEZEZW.MOD_USER:=USERS.DANE;
      DEZEZW.CRE_TIME:=DEZEZW.MOD_TIME:=KH.tm_stamp();
      DEZEZW.add()
   ?}
?};
~~


\valid_zezw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula sprawdza poprawnosc danych podczas redakcji porozumien w sprawie
::       elektronicznej wymiany danych
::   WE: _a = 'P' - formula uruchomiona na popraw
::          = 'D' - formula uruchomiona na dolacz
::   WY: '' - poprawnie wypelniono dane w porozumieniu
::       wpp - akronim pola ktore nie jest prowidlowo wypelnione
::  OLD: \valid_zezw/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
_msg:=0;
_zdate:=date(0,0,0);
{? BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W'
|| {? DEZEZW.OD=_zdate || _msg:=1; _rr:='OD' ?};
   {? _rr=''
   || {? DEZEZW.OD<>_zdate & DEZEZW.DO<>_zdate & DEZEZW.DO<DEZEZW.OD || _msg:=2; _rr:='OD' ?}
   ?}
?};
DEZEZW.B:=~-DEZEZW.B;
{? _rr='' & ( ~('TN'*DEZEZW.B) | DEZEZW.B='' )
|| {? DEZEZW.B=''
   || FUN.emsg('Niewypełnione pole: Blokada.'@)
   || FUN.emsg('Dopuszczalne wartości dla pola Blokada: T - Tak, N - Nie.'@)
   ?};
   _rr:='B'
|? _rr='' & DEZEZW.ISTDEF=null
|| FUN.emsg('Niewypełnione pole: Definicja komunikatu.'@);
   _rr:='ISTDEF'
|? _rr='' & DEZEZW.FILE_PTH=''
|| FUN.emsg('Niewypełnione pole: Ścieżka do plików.'@);
   _rr:='FILE_PTH'
?};
{? _rr='' & (BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W')
|| _od:=DEZEZW.OD;
   _do:=DEZEZW.DO;
   _dezezw:={? _a='P' || DEZEZW.ref() || null() ?};
   DEZEZW.cntx_psh();
   {? BPMN.SYM_DOM='ZWS'
   || DEZEZW.index('WR');
      DEZEZW.prefix('ZWS',DEZEZW.ISTDEF,EDI_Z.WR,KH.ref())
   || DEZEZW.index('KH');
      DEZEZW.prefix(BPMN.SYM_DOM,KH.ref,DEZEZW.ISTDEF().RODZAJ)
   ?};
   {? DEZEZW.first()
   || {!
      |? {? (_dezezw<>DEZEZW.ref() &
             ( _od>=DEZEZW.OD & _od<=DEZEZW.DO
              | _do=_zdate & _od<=DEZEZW.OD
              | _do>=DEZEZW.OD & (_do<=DEZEZW.DO | DEZEZW.DO=_zdate)
              | _od<=DEZEZW.OD & DEZEZW.DO<>_zdate & _do>=DEZEZW.DO
              )
             )
         || _msg:=3; _rr:='OD'
         ?};
         _rr='' & DEZEZW.next()
      !}
   ?};
   DEZEZW.cntx_pop()
?};
{? _rr='' & BPMN.SYM_DOM='ZWS' & EDI_Z.WR='R'
|| _pth:=DEZEZW.FILE_PTH;
   _dezezw:={? _a='P' || DEZEZW.ref() || null() ?};
   DEZEZW.cntx_psh();
   DEZEZW.index('WR');
   DEZEZW.prefix('ZWS',DEZEZW.ISTDEF,EDI_Z.WR);
   {? DEZEZW.first()
   || {!
      |? {? _dezezw<>DEZEZW.ref() & -DEZEZW.FILE_PTH=-_pth
         || _msg:=4;
            _rr:='FILE_PATH'
         ?};
         _rr='' & DEZEZW.next()
      !}
   ?};
   DEZEZW.cntx_pop()
?};
{? _msg>0
|| {? _msg=1
   || FUN.emsg('Niewypełnione pole: OD.'@)
   |? _msg=2
   || FUN.emsg('Błędny zakres dat.'@)
   |? _msg=3
   || {? ~(BPMN.SYM_DOM='ZWS')
      || FUN.emsg('Błędny zakres dat.'@+
                  '\nDaty zezwoleń nie mogą nachodzić na siebie.'@)
      || FUN.emsg('Błędny zakres dat.'@+
                 '\nDaty z jednego rodzaju zezwoleń nie mogą nachodzić na siebie.'@)
      ?}
::   |? _msg=4
::   || FUN.emsg('Powtórzona ścieżka do plików.'@)
   ?}
?};
_rr


\pop_zezw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [8.70]
:: OPIS: Popraw w oknie zezwolen na wystawianie e-faktur
::  OLD: \pop_zezw/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEZEZW.edit("exec('valid_zezw','edi_def','P')")
|| DEZEZW.MOD_USER:=USERS.DANE;
   DEZEZW.MOD_TIME:=KH.tm_stamp();
   DEZEZW.put()
?};
~~


\istdef_action_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Wartość początkowa EDI_Z.ACTION
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDI_Z.ACTION


\istdef_action_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Po redkacji EDI_Z.ACTION
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('set_efld_opt','edi_def',,ISTDEF); 1


\kopiuj_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2006]
:: OPIS: Formula kopiuje definicje EDI
::   WE:
::   WY: zwraca ref nowej definicji lub null
::  OLD: \kopiuj_def/skid_edi.fml
::----------------------------------------------------------------------------------------------------------------------
_new_def:=null;
_czy_imp:=ISTDEF.IST_ISTK='M';
_old_def:=ISTDEF.ref();
undefine();
{? _czy_imp
|| define('LP',ISTDEF.LP,'Lp.'@,,20);
   define('VER',ISTDEF.VER+'?','Kod'@,,20);
   define('NAZ',ISTDEF.N+'?','Nazwa'@,,60);
   define('FRO',ISTDEF.FR,'Formuła odczytu'@,,100);
   def_opt('mark=1','VER');
   def_opt('mark=1','NAZ');
   def_opt('mark=1','FRO')
|? BPMN.SYM_DOM='ZWS'
|| define('VER',ISTDEF.K+'?','Kod'@,,20);
   def_opt('mark=1','VER')
|| define('VER',ISTDEF.VER+'?','Wersja'@,,20);
   def_opt('mark=1','VER')
?};
_ff:='key:F2';
def_btn('text=%1,btn_label_align=center,panel=bottom,align=end'['&Zapisz'@],_ff);
_ff:='key:Esc';
def_btn('text=%1,btn_label_align=center,panel=bottom,align=end'['&Anuluj'@],_ff);
_valid:="
   _rr:={? ISTDEF.IST_ISTK='M' || chk_rec('VER','NAZ','FRO') || chk_rec('VER') ?};
   {? _rr=''
   || ISTDEF.cntx_psh();
      ISTDEF.index('VER');
      ISTDEF.prefix(ISTDEF.SYSTEM,ISTDEF.IST_ISTK,DEFINE.VER);
      {? ISTDEF.first
      || {!|?
            {? DEFINE.VER=ISTDEF.VER
            || {? ISTDEF.IST_ISTK='M' | BPMN.SYM_DOM='ZWS'
               || FUN.emsg('Występuje już komunikat o podanym kodzie.\nZmień kod komunikatu.'@)
               || FUN.emsg('Występuje już komunikat o podanej wersji.\nZmień wersję komunikatu.'@)
               ?};
               _rr:='VER';
               0
            || 1
            ?} & ISTDEF.next()
         !}
      ?};
      ISTDEF.cntx_pop()
   ?};
   _rr
";
{? def_edit(_valid,'Kopiowanie bieżącej definicji'@)
||
:: obsluga memo
   _memo:=ISTDEF.memo_get('r','OPIS');


   ISTDEF.VER:=DEFINE.VER;
   ISTDEF.TM_STAM:=exec('tm_stamp','#tm_stamp');
   {? _czy_imp
   || ISTDEF.K:=ISTDEF.VER;
      ISTDEF.LP:=DEFINE.LP;
      ISTDEF.N:=DEFINE.NAZ;
      ISTDEF.FR:=DEFINE.FRO
   |? BPMN.SYM_DOM='ZWS'
   || ISTDEF.K:=ISTDEF.VER
   ?};
   _ok:=0;
   do();
   {? ISTDEF.add()
   ||
::    obluga memo
      {? _memo.is_open || ISTDEF.memo_put(_memo,'OPIS') ?};
      obj_del(_memo);
      _ok:=1;
      _new_def:=ISTDEF.ref();
      {? ISTDEF.FORMAT='N'
      || exec('istxml_copy','edi_xml',_old_def,_new_def,0)
      |? ISTDEF.FORMAT='X'
      || ISTDEFS.index('LP');
         ISTDEFS.prefix(_old_def);
         {? ISTDEFS.first()
         || ISTDEFI.index('LP');
            {!|?
               ISTDEFS.cntx_psh();
               ISTDEFS.prefix();
               ISTDEFS.ISTDEF:=_new_def;
               {? ISTDEFS.add() || _ok:=1; _newdefs:=ISTDEFS.ref() || _ok:=0 ?};
               ISTDEFS.cntx_pop();
               ISTDEFI.prefix(ISTDEFS.ref());
               {? _ok & ISTDEFI.first()
               || {!|?
                     ISTDEFI.cntx_psh();
                     ISTDEFI.prefix();
                     ISTDEFI.ISTDEFS:=_newdefs;
                     {? ~ISTDEFI.add || _ok:=0 ?};
                     ISTDEFI.cntx_pop();
                     _ok & ISTDEFI.next()
                  !}
               ?};
               _ok & ISTDEFS.next()
            !}
         ?}
      || {? _czy_imp | BPMN.SYM_DOM='ZWS'
         ||
            EDI_D.cntx_psh();
            EDI_D.index('K');
            EDI_D.prefix(_old_def);
            {? EDI_D.first()
            || {!
               |?
::                   obsluga memo
                     _memo:=EDI_D.memo_get('r','OPIS');

                     EDI_D.cntx_psh();
                     EDI_D.prefix();
                     EDI_D.G:=_new_def;
                     _ok:={? EDI_D.G=null
                          || 0
                          || EDI_D.add()
                          ?};
::                   obluga memo
                     {? _memo.is_open || EDI_D.memo_put(_memo,'OPIS') ?};
                     obj_del(_memo);
                     EDI_D.cntx_pop();
                     EDI_D.next()
               !}
            ?};
            EDI_D.cntx_pop()
         ?}
      ?};
      {? ~_ok || undo() || exec('standard','edi_def') ?}
   ?};
   {? end()
   ||
      ISTDEF.f_rfresh()
   ?}
?};
_new_def


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PS [17.00]
:: OPIS: Ustawia wymagane pola w okresie okresów obowiązywania
::   WE: _a - akronim okna redakcyjnego
::       _b - tabela
::----------------------------------------------------------------------------------------------------------------------
_win_red:={? var_pres('_a')=type_of('') || _a || ISTDEF.win_edit('?') ?};
_tab:={? var_pres('_b')=type_of(FIRMA) || _b || return() ?};

{? _tab=DEZEZW
|| {? BPMN.SYM_DOM<>'ZWS' | EDI_Z.WR='W'
   || DEZEZW.efld_opt(_a,'mark=1',,'OD')
   ?};
   DEZEZW.efld_opt(_a,'mark=1',,'FILE_PTH')
|? _tab=ISTDEF
|| _mark:={? ISTDEF.ACTION='T' || 'mark=1' || 'mark=0' ?};
   ISTDEF.efld_opt(_win_red,_mark,,'FMMAIN')
?};

~~


\istdef_export
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła eksportująca wartość parametru ISTDEF dla czynności
::   WE: _a - ISTDEF.ref() - wartość parametru
::       [_b] - STRING - formulizer command
::   WY: STRING - treść formuły która się wykona po stronie importu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_istdef:=_a;

_command:='';
{? var_pres('_b')=type_of('')
|| _command:=_b
?};

_fml:='';

ISTDEF.cntx_psh();
ISTDEF.clear();
{? type_of(_istdef)=type_of(null()) & _istdef<>null() & ISTDEF.seek(_istdef)
||
   _fml:=exec('formulizer_common','#b_export',_command);
   _fml+='
      ISTDEF.cntx_psh();
      ISTDEF.index(\'VER\');
      ISTDEF.prefix(\''+ISTDEF.SYSTEM+'\',\''+ISTDEF.IST_ISTK+'\',\''+ISTDEF.VER+'\');
      {? ISTDEF.first()
      || _result.REF:=ISTDEF.ref();
         _result.RESULT:=1
      || _result.RESULT:=0;
         _result.REF:=null();
         {? _komm>0
         ||
            _msg:=\'Nie znaleziono komunikatu o typie: %1 i symbolu: %2\'@[\''+ISTDEF.IST_ISTK+'\',\''+ISTDEF.VER+'\'];
            exec(\'import_komm\',\'#b_export\',_msg)
         ?}
      ?};
      ISTDEF.cntx_pop();
      _result
   ';
   _fml:=exec('formulizer_clean','#b_export',_fml)
?};
ISTDEF.cntx_pop();
_fml


\b_mkodk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [20.42]
:: OPIS: Przed obsługą MKODK
::----------------------------------------------------------------------------------------------------------------------
{? cur_win_id()='U'
||
   MKODK.index('KH_RODZ');
   MKODK.prefix({? KHVZ.KH || KHVZ.KH || -1 ?},'U');
   MKODK.win_edit('REDKHU');
   MKODK.win_patt('REDKHU');
   POMOC.RODZ:='U'
||
   MKODK.index('KH_RODZ');
   MKODK.prefix({? KHVZ.KH || KHVZ.KH || -1 ?},'T');
   MKODK.win_edit('REDKH');
   MKODK.win_patt('REDKH');
   POMOC.RODZ:='T'
?}


\f3_istdef_bltype
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.42]
:: OPIS: Formula wyswietla okienka popup z wyborem typu dokumentu Businesslink
::----------------------------------------------------------------------------------------------------------------------
_tb:=tab_tmp(1
   ,'TYP','STRING[30]','Typ dokumentu Businesslink'@
   ,'NAZ','STRING[100]','Nazwa dokumentu Businesslink'@);
_tb.TYP:='INV';
_tb.NAZ:='Faktura - zapis';
_tb.add();
_tb.TYP:='INV_CORR';
_tb.NAZ:='Korekta - zapis ';
_tb.add();
_tb.TYP:='KSeF_INV';
_tb.NAZ:='Faktura KSeF - zapis';
_tb.add();
_tb.TYP:='KSeF_INV_CORR';
_tb.NAZ:='Korekta KSeF - zapis ';
_tb.add();
_tb.TYP:='KSeF_INV_DKS';
_tb.NAZ:='Faktura KSeF - zapis - dokument księgowy';
_tb.add();
_tb.TYP:='KSeF_INV_CORR_DKS';
_tb.NAZ:='Korekta KSeF - zapis - dokument księgowy';
_tb.add();
_tb.TYP:='INV_DZK';
_tb.NAZ:='Faktura - odczyt - dokument zakupu';
_tb.add();
_tb.TYP:='INV_CORR_DZK';
_tb.NAZ:='Korekta - odczyt - dokument zakupu';
_tb.add();
_tb.TYP:='INV_DKS';
_tb.NAZ:='Faktura - odczyt - dokument księgowy';
_tb.add();
_tb.TYP:='INV_CORR_DKS';
_tb.NAZ:='Korekta - odczyt - dokument księgowy';
_tb.add();
_tb.TYP:='INV_OBG';
_tb.NAZ:='Faktura - odczyt - dokument w obiegu';
_tb.add();
_tb.TYP:='INV_CORR_OBG';
_tb.NAZ:='Korekta - odczyt - dokument w obiegu';
_tb.add();
_tb.TYP:='INV_OBE';
_tb.NAZ:='Faktura - odczyt - wniosek w obiegu';
_tb.add();
_tb.TYP:='INV_CORR_OBE';
_tb.NAZ:='Korekta - odczyt - wniosek w obiegu';
_tb.add();
_tb.TYP:='ORD_DZK';
_tb.NAZ:='Zamówienie dostawy - zapis';
_tb.add();
_tb.TYP:='ORD';
_tb.NAZ:='Zamówienie klienta - odczyt';
_tb.add();
_tb.TYP:='KSeF_INV_RR';
_tb.NAZ:='Faktura KSeF - zapis - dokument zakupu RR';
_tb.add();
_tb.TYP:='KSeF_INV_CORR_RR';
_tb.NAZ:='Korekta KSeF - zapis - dokument zakupu RR';
_tb.add();

_tb.find_key(fld());

_okn:=_tb.mk_sel('Typy dokumetów Businesslink'@,,1,,,,,,'U');
_tb.win_act(_okn,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
_tb.win_sel(_okn);

{? _tb.select(,1,1)
|| ISTDEF.BL_TYPE:=_tb.TYP
?};

~~


\istdefv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ISTDEFV.index('ISTDEF');
ISTDEFV.prefix(ISTDEF.ref());
ISTDEFV.win_edit('RED');
ISTDEFV.efld_opt('RED','editable=0',,'OD');
ISTDEFV.efld_opt('RED','editable=0',,'HASH_DEF');
ISTDEFV.efld_opt('RED','editable=0',,'HASH_STR');
ISTDEFV.efld_opt('RED','editable=0',,'HASH_FOR');
ISTDEFV.win_sel('WER');
ISTDEFV.select(,,,'d:d');
exec('standard','edi_def')


\istdefv_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: ISTDEFV.add lub ISTDEFV.put jeśli wersja od daty już istnieje
::   WE: _a - exec('hash_kom','edi_def')
::       [_b] - 0/1 - komunikaty
::       [_c] - 0/1 - import
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Hash_kom:=_a;
_kom:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_imp:={? var_pres('_c')=type_of(0) || _c || 0 ?};
ISTDEFV.cntx_psh();
{? _kom
||
   ISTDEFV.index('HASH');
   ISTDEFV.prefix(ISTDEF.ref(),_Hash_kom.HASH_DEF,_Hash_kom.HASH_STR,_Hash_kom.HASH_FOR);
   _loop:=ISTDEFV.first();
   {!
   |? _loop
   |!
      {? ISTDEFV.OD<>_Hash_kom.OD
      ||
         {? ISTDEFV.OPIS=''
         || exec('add_kom','#message','Istnieje już wersja obowiązująca od %1'@[$ISTDEFV.OD],3,ISTDEF.K)
         || exec('add_kom','#message','Istnieje już wersja (%1) obowiązująca od %2'@[ISTDEFV.OPIS,$ISTDEFV.OD],3,ISTDEF.K)
         ?}
      ?};
      _loop:=ISTDEFV.next()
   !}
?};
_put:=0;
_continue:=1;
{? _imp
||
   ISTDEFV.index('HASH');
   ISTDEFV.prefix(ISTDEF.ref());
   _put:=ISTDEFV.find_key(_Hash_kom.HASH_DEF,_Hash_kom.HASH_STR,_Hash_kom.HASH_FOR,_Hash_kom.OD)
||
   ISTDEFV.index('ISTDEF');
   ISTDEFV.prefix(ISTDEF.ref());
   {? ISTDEFV.find_key(_Hash_kom.OD,'N')
   ||
      {? ISTDEFV.HASH_DEF=_Hash_kom.HASH_DEF
       & ISTDEFV.HASH_STR=_Hash_kom.HASH_STR
       & ISTDEFV.HASH_FOR=_Hash_kom.HASH_FOR
      ||
::       definicja jest taka sama aktualizujemy tylko opis wersji
         {? exec('istdefv_system','edi_def')
         ||
            exec('add_kom','#message','Istnieje już odpowiadająca wersja systemowa: %1'@[ISTDEFV.OPIS],3,ISTDEF.K)
         ||
            ISTDEFV.OPIS:=_Hash_kom.OPIS;
            ISTDEFV.put()
         ?};
         _continue:=0
      ||
::       dodajemy nową definicję i archiwizujemy dotychczasową
         ISTDEFV.ARCHIWUM:='T';
         ISTDEFV.put()
      ?}
   ?}
?};
{? _continue>0
||
   ISTDEFV.blank();
   ISTDEFV.ISTDEF:=ISTDEF.ref();
   ISTDEFV.ARCHIWUM:={? _imp || _Hash_kom.ARCHIWUM || 'N' ?};
   ISTDEFV.OD:=_Hash_kom.OD;
   ISTDEFV.HASH_DEF:=_Hash_kom.HASH_DEF;
   ISTDEFV.HASH_STR:=_Hash_kom.HASH_STR;
   ISTDEFV.HASH_FOR:=_Hash_kom.HASH_FOR;
   ISTDEFV.OPIS:=_Hash_kom.OPIS;
   ISTDEFV.ZAINSTAL:='N';
   {? _put || ISTDEFV.put() || ISTDEFV.add() ?}
?};
ISTDEFV.cntx_pop()


\istdefv_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje - Dołącz
::   WE: [_a] - data
::       [_b] - opis
::       [_c] - 0/1 - komunikaty
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ISTDEFV.cntx_psh();
_typ:='xsd';
_fname:='edidef_%1_%2'[_typ,form(ISTDEF.K,,,'99')];
_hash_kom:=exec('hash_kom','edi_def');
exec('def_exp','edi_xml',_fname,ISTDEF.ref(),'',_hash_kom);
exec('hash_def','edi_def',_hash_kom);
{? var_pres('_a')=type_of(date())
||
   _hash_kom.OD:=_a;
   _hash_kom.OPIS:=_b;
   exec('istdefv_add','edi_def',_hash_kom,_c)
||
   ISTDEFV.ISTDEF:=ISTDEF.ref();
   ISTDEFV.OD:=date();
   ISTDEFV.HASH_DEF:=_hash_kom.HASH_DEF;
   ISTDEFV.HASH_STR:=_hash_kom.HASH_STR;
   ISTDEFV.HASH_FOR:=_hash_kom.HASH_FOR;
   {? ISTDEFV.edit()
   ||
      ISTDEFV.add()
   ?}
?};
ISTDEFV.cntx_pop();
0


\istdefv_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje - Generuj
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Wersje:=tab_tmp(1
   ,'OD','DATE','Data obowiązywania'@
   ,'OPIS','STRING[150]','Opis'@);
_Wersje.index(_Wersje.ndx_tmp(,,'OD',,1,'OPIS',,));
_wer:=_Wersje.mk_sel('Wersje'@,,,'istdefv_slo');
_Wersje.win_fld(_wer,,'OD',,,,,,'Data'@);
_Wersje.win_fld(_wer,,'OPIS',,,100,,,'Opis'@);
_fb:="
   _Wersje:=cur_tab();
   ISTDEFV.OD:=_Wersje.OD;
   ISTDEFV.OPIS:=_Wersje.OPIS;
   sel_exit()
";
_Wersje.win_act(_wer,,'Formuła','Wybierz',,,_fb,,1);
_Wersje.win_sel(_wer);
ISTDEF.cntx_psh();
ISTDEF.index('LP');
ISTDEF.prefix(__Firma,'ZWS','E');
_loop:=ISTDEF.first();
{!
|? _loop
|!
   ISTDEFV.index('ISTDEF');
   ISTDEFV.prefix(ISTDEF.ref());
   _loop:=ISTDEFV.first();
   {!
   |? _loop
   |!
      {? ~_Wersje.find_key(ISTDEFV.OD,ISTDEFV.OPIS,)
      ||
         _Wersje.OD:=ISTDEFV.OD;
         _Wersje.OPIS:=ISTDEFV.OPIS;
         _Wersje.add()
      ?};
      _loop:=ISTDEFV.next()
   !};
   _loop:=ISTDEF.next()
!};
ISTDEF.cntx_pop();
ISTDEFV.cntx_psh();
ISTDEFV.fld_fml('OD','F3',"_Wersje:=params_get().a; {? _Wersje.select() || ISTDEFV.OD ?}");
ISTDEFV.OD:=date(0,0,0);
ISTDEFV.OPIS:='';
ISTDEFV.win_edit('RED_OD');
params_set('a',_Wersje);
{? ISTDEFV.edit()
||
   exec('ini_kom','#message','Wynik generowania wersji'@);
   _od:=ISTDEFV.OD;
   _opis:=ISTDEFV.OPIS;
   _Sel:=ISTDEF.sel_aget();
   {? ~_Sel.first() || _Sel.REF:=#ISTDEF.ref(); _Sel.add() ?};
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? ISTDEF.seek(_Sel.REF) & ISTDEF.FORMAT='N'
      ||
         exec('istdefv_dolacz','edi_def',_od,_opis,1);
         exec('standard','edi_def')
      ?};
      _loop:=_Sel.next()
   !};
   exec('end_kom','#message')
?};
ISTDEFV.cntx_pop();
ISTDEF.sel_adel();
0


\istdefv_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje - Usun
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Wersje:=tab_tmp(3
   ,'OD','DATE','Data obowiązywania'@
   ,'ARCHIWUM','STRING[1]','Archiwalna'@
   ,'OPIS','STRING[150]','Opis'@);
_Wersje.index(_Wersje.ndx_tmp(,,'OD',,1,'ARCHIWUM',,,'OPIS',,));
_Sel:=ISTDEF.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#ISTDEF.ref(); _Sel.add() ?};
_loop:=_Sel.first();
{!
|? _loop
|!
   ISTDEFV.cntx_psh();
   ISTDEFV.index('ISTDEF');
   ISTDEFV.prefix(_Sel.REF);
   _loop:=ISTDEFV.first();
   {!
   |? _loop
   |!
      {? {? 1
:: bez możliwości usuwania wersji standardowych
         || ~exec('istdefv_system','edi_def') & ~_Wersje.find_key(ISTDEFV.OD,ISTDEFV.ARCHIWUM,ISTDEFV.OPIS,)
:: możliwość usuwania wersji standardowych
         || ~_Wersje.find_key(ISTDEFV.OD,ISTDEFV.ARCHIWUM,ISTDEFV.OPIS,)
         ?}
      ||
         _Wersje.OD:=ISTDEFV.OD;
         _Wersje.ARCHIWUM:=ISTDEFV.ARCHIWUM;
         _Wersje.OPIS:=ISTDEFV.OPIS;
         _Wersje.add()
      ?};
      _loop:=ISTDEFV.next()
   !};
   ISTDEFV.cntx_pop();
   _loop:=_Sel.next()
!};
_wer:=_Wersje.mk_sel('Wersje'@,,,'istdefv');
_Wersje.win_fld(_wer,,'OD',,,,,,'Data obowiązywania'@);
_Wersje.win_fld(_wer,,'ARCHIWUM',,,,,,'Archiwalna'@);
_Wersje.win_fld(_wer,,'OPIS',,,100,,,'Opis'@);
_fb:="
   _env:=params_get().env;
   _Wersje:=cur_tab();
   _Sel:=_Wersje.sel_aget();
   {? ~_Sel.first() || _Sel.REF:=#_Wersje.ref(); _Sel.add() ?};
   _env.SEL2DEL:=_Sel;
   _Wersje.sel_adel();
   sel_exit();
   0
";
_Wersje.win_act(_wer,,'Formuła','Wybierz'@@,,,_fb,,1,1,_fb);
_Wersje.win_btn(_wer,'text=%1, panel=right'['Wybierz'@@],'menu:W');
_Wersje.win_sel(_wer);
_env:=obj_new('SEL2DEL');
params_set('env',_env);
{? _Wersje.select() & FUN.ask('Czy usunąć wybrane wersje?'@)
||
   _Sel2del:=_env.SEL2DEL;
   _loop:=_Sel.first();
   {!
   |? _loop
   |!
      {? ISTDEF.seek(_Sel.REF)
      ||
         _loop:=_Sel2del.first();
         {!
         |? _loop
         |!
            {? _Wersje.seek(_Sel2del.REF)
            ||
               ISTDEFV.cntx_psh();
               ISTDEFV.index('ISTDEF');
               ISTDEFV.prefix(_Sel.REF,_Wersje.OD,_Wersje.ARCHIWUM,_Wersje.OPIS,);
               {? ISTDEFV.first() || ISTDEFV.del() ?};
               ISTDEFV.cntx_pop()
            ?};
            _loop:=_Sel2del.next()
         !};
         exec('standard','edi_def')
      ?};
      _loop:=_Sel.next()
   !}
?};
ISTDEF.sel_adel();
0


\istdefv_rekb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersje - rekord przed
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
   _act:='d:d';
   {? 1
:: bez możliwości usuwania wersji standardowych
   || {? exec('istdefv_system','edi_def') || _act:='pu'+_act ?}
:: możliwość usuwania wersji standardowych
   || ~~
   ?};
   ISTDEFV.actions('WER',_act,,1)
?}


\istdefv_system
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Wersja systemowa
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
::0&
(1+ISTDEFV.OPIS)='~'


\hash_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Skróty definicji EDI
::   WE: [_a] - 0-obj_new, 1-tab_tmp
::   WY: obj_new
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
||
   _result:=tab_tmp(3
      ,'HASH_DEF','STRING[32]','Skrót definicji'
      ,'HASH_STR','STRING[32]','Skrót struktury'
      ,'HASH_FOR','STRING[32]','Skrót formuł'
      ,'OPIS','STRING[150]','Opis'
      ,'OD','DATE','Od'
      ,'ARCHIWUM','STRING[1]','Archiwum')
||
   _result:=obj_new('OD','ARCHIWUM','HASH_DEF','HASH_STR','HASH_FOR','OPIS');
   _result.OD:=date(0,0,0);
   _result.ARCHIWUM:='';
   _result.HASH_DEF:='';
   _result.HASH_STR:='';
   _result.HASH_FOR:='';
   _result.OPIS:=''
?};
_result


\hash_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: hash definicji
::   WE: _a - exec('hash_def','edi_def')
::       [_b] - nr algorytmu
::   WY: hash md5
::----------------------------------------------------------------------------------------------------------------------
_algorytm:={? app_info()='merit' || 1 || 2 ?};
_sep:='^';
_action:='N';
_fmmain:='';
_system:='';
_tm_stam:=0;
_par:=
   {? _algorytm=1
   ||
      {? ISTDEF.ACTION<>'' || _action:=ISTDEF.ACTION ?};
      _fmmain:=ISTDEF.FMMAIN;
      _system:=ISTDEF.SYSTEM;
      _tm_stam:=$ISTDEF.TM_STAM
   ||
:: wykorzystywany w Xpertis
      _system:={? ISTDEF.IST_ISTK='E' & (ISTDEF.SYSTEM='EMAG' | ISTDEF.SYSTEM='ZBL') || 'ZWS' || ISTDEF.SYSTEM ?};
      _tm_stam:=$exec('convert_xp2merit','edi_def',ISTDEF.TM_STAM)
   ?};
_par:=
   _system+_sep+_tm_stam+_sep+ISTDEF.XMLNS+_sep+ISTDEF.IST_ISTK+_sep+
   ISTDEF.W+_sep+ISTDEF.R+_sep+ISTDEF.FW+_sep+ISTDEF.FR+_sep+ISTDEF.FORMAT+_sep+
   _action+_sep+_fmmain+_sep+ISTDEF.F_STARTG+_sep+ISTDEF.F_ENDG+_sep+ISTDEF.F_STARTD+_sep+ISTDEF.F_ENDD+_sep+
   ISTDEF.BL_TYPE+_sep;
_a.HASH_DEF:=hash(_par,'md5')


\hash_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: hash struktury
::   WE:
::   WY: hash md5
::----------------------------------------------------------------------------------------------------------------------
_a.HASH_STR:=hash(_b,'md5')


\hash_for
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: hash formuł
::   WE:
::   WY: hash md5
::----------------------------------------------------------------------------------------------------------------------
_a.HASH_FOR:=hash(_b,'md5')


\standard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Ustawia ISTDEF.STANDARD -
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tmp:=_=1;

ISTDEF.STANDARD:='';
{? _tmp
||
   _Hash_kom:=_a;
   _Hash_kom.cntx_psh();
   {? _Hash_kom.first()
   ||
      _typ:='xsd';
      _fname:='edidef_%1_%2'[_typ,form(ISTDEF.K,,,'99')];
      _hash_kom:=exec('hash_kom','edi_def');
      exec('def_exp','edi_xml',_fname,ISTDEF.ref(),'',_hash_kom);
      exec('hash_def','edi_def',_hash_kom);
      _Hash_kom.prefix(_hash_kom.HASH_DEF,_hash_kom.HASH_STR,_hash_kom.HASH_FOR);
      ISTDEF.STANDARD:={? _Hash_kom.first() || 'T' || 'N' ?};
      {? ISTDEF.STANDARD='N'
      ||
         ISTDEFV.cntx_psh();
         ISTDEFV.index('HASH');
         ISTDEFV.prefix(ISTDEF.ref(),_hash_kom.HASH_DEF,_hash_kom.HASH_STR,_hash_kom.HASH_FOR);
         ISTDEF.STANDARD:={? ISTDEFV.first() || 'T' || 'N' ?};
         ISTDEFV.cntx_pop()
      ?}
   ?};
   _Hash_kom.cntx_pop()
||
   ISTDEFV.cntx_psh();
   ISTDEFV.index('ZAINSTAL');
   ISTDEFV.prefix(ISTDEF.ref(),'T');
   {? ISTDEFV.first()
   ||
      ISTDEFV.prefix();
      ISTDEFV.ZAINSTAL:='N';
      ISTDEFV.put()
   ?};
   ISTDEFV.index('OPIS');
   ISTDEFV.prefix(ISTDEF.ref());
   ISTDEFV.index('HASH');
   ISTDEFV.prefix(ISTDEF.ref());
   {? ISTDEFV.first()
   ||
      _typ:='xsd';
      _fname:='edidef_%1_%2'[_typ,form(ISTDEF.K,,,'99')];
      _hash_kom:=exec('hash_kom','edi_def');
      exec('def_exp','edi_xml',_fname,ISTDEF.ref(),'',_hash_kom);
      exec('hash_def','edi_def',_hash_kom);
      ISTDEFV.prefix(ISTDEF.ref(),_hash_kom.HASH_DEF,_hash_kom.HASH_STR,_hash_kom.HASH_FOR);
      ISTDEF.STANDARD:={? ISTDEFV.first() || 'T' || 'N' ?};
      {? ISTDEF.STANDARD='T'
      ||
         exec('FindInSet','#table','ISTDEFV','ZAINSTAL','T',ISTDEF.ref(),"
            ISTDEFV.ZAINSTAL:='N'; ISTDEFV.prefix(); ISTDEFV.put()
         ");
         ISTDEFV.ZAINSTAL:='T';
         ISTDEFV.put()
      ?}
   ?};
   ISTDEFV.cntx_pop();
   ISTDEF.put()
?}


\convert_xp2merit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Konwertuje tm_stamp z Xpertis na Merit
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: edidef_xsd_KSEF_DKS_INV_0001.dem - ZGODNE
{? _a=1636543436000157 || 1636543436000157
:: edidef_xsd_KSEF_DKS_NOTE_0001.dem - ZGODNE
|? _a=1637581311000015 || 1637581311000015
:: edidef_xsd_KSEF_INV_0001.dem - NIEZGODNE
|? _a=1640161328000000 || 1627910914000000
:: edidef_xsd_KSEF_NOTE_0001.dem - NIEZGODNE
|? _a=1640162179000000 || 1629298730000000
:: edidef_xsd_UFD_DKS_INV_O_0001.dem - NIEZGODNE
|? _a=1609347581000000 || 1605998797000093
:: edidef_xsd_UFD_DKS_NOTE_O_0001.dem - NIEZGODNE
|? _a=1609347602000000 || 1606088491000019
:: edidef_xsd_UFD_INV_O_0001.dem - ZGODNE
|? _a=1598516558000000 || 1598516558000000
:: edidef_xsd_UFD_INV_Z_0001.dem - ZGODNE
|? _a=1598445346000014 || 1598445346000014
:: edidef_xsd_UFD_NOTE_O_0001.dem - ZGODNE
|? _a=1598359696000010 || 1598359696000010
:: edidef_xsd_UFD_NOTE_Z_0001.dem - ZGODNE
|? _a=1598280637000000 || 1598280637000000
:: edidef_xsd_UFD_OBE_INV_O_0001.dem - NIEZGODNE
|? _a=1633347780000000 || 1627906701000000
:: edidef_xsd_UFD_OBE_NOTE_O_0001.dem - NIEZGODNE
|? _a=1633348392000000 || 1627906709000002
:: edidef_xsd_UFD_OBG_INV_O_0001.dem - ZGODNE
|? _a=1604913356000021 || 1604913356000021
:: edidef_xsd_UFD_OBG_NOTE_O_0001.dem - NIEZGODNE
|? _a=1609337586000001 || 1605534865000009
|| _a
?}


\istdefv_del_unkown
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25]
:: OPIS: Usuwa nieznane wersje
::   WE: _a - tabela z wersjami
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_Hash_kom:=_a;
ISTDEFV.cntx_psh();
ISTDEFV.index('HASH');
ISTDEFV.prefix(ISTDEF.ref());
_loop:=ISTDEFV.first();
{!
|? _loop
|!
   _loop:=
      {? _Hash_kom.find_key(ISTDEFV.HASH_DEF,ISTDEFV.HASH_STR,ISTDEFV.HASH_FOR)
      || ISTDEFV.next()
      || ISTDEFV.del()
      ?}
!};
ISTDEFV.cntx_pop()

:Sign Version 2.0 jowisz:1045 2023/08/21 15:49:01 07d3f667a579a87d1e131e004155f1da5e7e848add08e30bb3def4564b161e66b258bfff7b95e4b0fc446830ad628b180a787704f32fa8a7bf20ddfcb2927d9dc9252c5a3709631befc0a966f8c75d4ac2c946d93a45e0443c01bf10e414fa8a2d04a8ab87ff78886e8f451a2a36d5d50c7e0a50adf3c907d806214514c4c1a2
