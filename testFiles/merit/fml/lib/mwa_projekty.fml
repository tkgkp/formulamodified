:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_projekty.fml
:: Utworzony: 13.02.2019
:: Autor: Markus
:: Systemy:
::======================================================================================================================
:: Zawartość: Formuły do obsługi projektów przez MacroWebAPI
::======================================================================================================================


\serialize_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli PROJEKTY
::       Kontekst wywołania: ustawiona dziedzina tabeli PROJEKTY
::   WE: _a - FILE - obiekt plikowy przeznaczony do zapisu wynikowego JSONa
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   PROJEKTY.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'T',,'NAZWA',
      ,'REFERENCE',,'IDADD',,'FIRMA',,'NR',,'SYM',,'ID_KSG',,'RDATA_OD',,'RDATA_DO',
      ,'KH',,'HAN',,'UD_SKL',,'SZEF',,'PLANPRZ',,'PLANKOS',
      ,'KK',,'A',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);

_resp


\set_fields_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Ustawia pola projektu.
::   WE: _a - STRING - parametry projektu
::----------------------------------------------------------------------------------------------------------------------
exec('set_fields','mwapi',_a);
~~


\create_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Dodaje projekt w oparciu o przekazane parametry.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Projekty');
_fields_projekty:='PROJEKTY'+_option.fields;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

PROJEKTY.blank();
exec('set_fields_projekty','mwa_projekty',_fields_projekty);

:: Wstępna walidacja
{? PROJEKTY.UD_SKL<>null() & PROJEKTY.T().R=exec('zewnetrzny','projtypy')
|| _wsenv.add_error('Projekt zewnętrzny nie może mieć wskazanego elementu struktury organizacyjnej.'@)
|? PROJEKTY.KH<>null() & PROJEKTY.T().R=exec('wewnetrzny','projtypy')
|| _wsenv.add_error('Projekt wewnętrzny nie może mieć wskazanego kontrahenta.'@)
?};

{? ~_wsenv.has_errors()
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='ZWS_PAR_KPRR';
   _params.AKCJA:='Dołącz';
   _params.PROC_START:='T';
   _params.QUIET:='T';
   exec('mp_run','#b__box',_params);

   {? _wsenv.IDADD=''
   || _wsenv.add_error('Wystąpił błąd podczas próby dodania projektu.')
   ?}
?};

{? ~_wsenv.has_errors() & _wsenv.IDADD<>''
|| _result:=exec('read_projekty_idadd_row','mwa_projekty',_par, _wsenv.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\serialize_projekty_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Formuła pomocnicza do serializacji projektów
::   WE: _a - parametry
::       _b - STRING - treść błędu
::       _c - _wsenv
::----------------------------------------------------------------------------------------------------------------------
{? _ >= 3
|| _wsenv:=_c
|| _wsenv:=exec('wsenv','#mwapi')
?};
_wsenv.erase();
_wsenv.add_error(_b);
_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_a,_resp);
_result


\read_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje wszystkie projekty.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_result:=exec('authorized','mwa_projekty',_par);

{? type_of(_result)=0
|| PROJEKTY.cntx_psh();
   PROJEKTY.index('FIRMA');
   PROJEKTY.prefix();
   {? PROJEKTY.first()
   || _result:=exec('serialize_projekty','mwa_projekty',_par)
   || _result:=exec('serialize_projekty_error','mwa_projekty',_par,'Brak projektów w systemie'@)
   ?};
   PROJEKTY.cntx_pop()
?};
_result


\read_projekty_idadd_row
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dany projekt.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: _a - par
::     : _b - idadd
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;
_idadd:=_b;
PROJEKTY.cntx_psh();
PROJEKTY.index('IDADD');
PROJEKTY.prefix();
{? +_idadd=31 & PROJEKTY.find_key(_idadd)
|| PROJEKTY.prefix(PROJEKTY.IDADD);
   _result:=exec('serialize_projekty','mwa_projekty',_par)
|| _result:=exec('serialize_projekty_error','mwa_projekty',_par,'Nieprawidłowa wartość parametru %1 [%2].'@ ['<idadd>',_idadd])
?};
PROJEKTY.cntx_pop();
_result


\read_projekty_idadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje dany projekt.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;

_result:=exec('authorized','mwa_projekty',_par);

{? type_of(_result)=0
|| _result:=exec('read_projekty_idadd_row','mwa_projekty',_par, _idadd)
?};
_result


\read_projekty_sym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odczytuje projekt wg pola SYM.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_sym:=exec('get_option','mwapi',_par,'Sym').value;

_result:=exec('authorized','mwa_projekty',_par);

{? type_of(_result)=0
|| PROJEKTY.cntx_psh();
   PROJEKTY.index('SYM');
   PROJEKTY.prefix(_sym,);
   {? PROJEKTY.first()
   || PROJEKTY.index('IDADD');
      PROJEKTY.prefix(PROJEKTY.IDADD);
      PROJEKTY.first();
      _result:=exec('serialize_projekty','mwa_projekty',_par)
   || _result:=exec('serialize_projekty_error','mwa_projekty',_par,'Brak projektu'@)
   ?};
   PROJEKTY.cntx_pop()
?};
_result


\update_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Modyfikuje dany projekt
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_option:=exec('get_option','mwapi',_par,'Projekty.IDADD');
_idadd:=_option.value;
_fields_projekty:='PROJEKTY'+_option.fields;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

PROJEKTY.cntx_psh();
PROJEKTY.index('IDADD');
PROJEKTY.prefix();

{? _idadd=''
|| _wsenv.add_error('Nie przekazano IDADD.'@)
|? +_idadd=31 & PROJEKTY.find_key(_idadd)
|| PROJEKTY.prefix(PROJEKTY.IDADD);
   {? PROJEKTY.first()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KPRR';
      _params.AKCJA:='Popraw';
      _params.UIDREF:=PROJEKTY.uidref();
      _params.QUIET:='T';
      exec('set_fields_projekty','mwa_projekty',_fields_projekty);
      exec('mp_run','#b__box',_params)
   || _wsenv.add_error('Nie znaleziono projektu.'@)
   ?}
|| _wsenv.add_error('Nieprawidłowa wartość pola %1 [%2].'@ ['IDADD',_idadd])
?};

::{? ~_wsenv.has_errors()
::|| _result:=exec('read_projekty_idadd','webservice',
::      _par,exec('make_options','#webservice','field','idadd','value',PROJEKTY.IDADD)
::   )
::|| _resp:=_wsenv.to_json();
::   _result:=exec('serialize_res','mwapi',_par,_resp)
::?};

{? ~_wsenv.has_errors()
|| _result:=exec('read_projekty_idadd_row','mwa_projekty',_par, PROJEKTY.IDADD)
|| _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

PROJEKTY.cntx_pop();
_result


\delete_projekty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Usuwa dany projekt.
::   WE: _a [FILE]   - Obiekt plikowy przeznaczony do zapisu wynikowego JSONa.
::       _b [STRING] - Opcje wywołania.
::   WY: STRING - JSON z błędami w przypadku niepowodzenia
::       0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

PROJEKTY.cntx_psh();
PROJEKTY.index('IDADD');
PROJEKTY.prefix();

{? +_idadd=31 & PROJEKTY.find_key(_idadd)
|| PROJEKTY.prefix(PROJEKTY.IDADD);
   {? PROJEKTY.first()
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='ZWS_PAR_KPRR';
      _params.AKCJA:='Usuń';
      _params.UIDREF:=PROJEKTY.uidref();
      _params.QUIET:='T';
      exec('mp_run','#b__box',_params)
   || _wsenv.add_error('Nie znaleziono projektu.'@)
   ?}
|| _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@ ['<idadd>',_idadd])
?};

_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_par,_resp, {? _wsenv.has_errors() || 0 || 1 ?});

PROJEKTY.cntx_pop();
_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\authorized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Sprawdza uprawnienia do odglądania projektów
::   WY: ~~ / obiekt plikowy xml (odpowiedź z błędem)
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;

_result:=~~;
{? ~exec('authorized','#b__box','ZWS_PRJ','ZWS')
|| _result:=exec('serialize_projekty_error','mwa_projekty',_par,'Brak uprawnień do przeglądania projektów.'@)
?};
_result

:Sign Version 2.0 jowisz:1045 2020/04/03 17:16:40 a574f9ece47c29c92f94896432a889ed818717f50a1a1349e2a30236358872691c8a802c3b85455ef96f80188088cbac6a1b392b602699312e32158f73288ac2d3357b7f874f318a5b75bfbb317b4791fe3afb0ff0f5e7e20d5c3c23589b147e71cb5eb4ba83267c701d39c1e8d1dd19aaadb3de4e73cd92f110d02b545fb395
