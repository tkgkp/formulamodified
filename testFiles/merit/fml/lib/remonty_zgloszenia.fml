:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: remonty_zgloszenia.fml
:: Utworzony: 21.02.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Obsługa zgłoszeń remontowych
::======================================================================================================================


\env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Definiuje środowisko obszaru roboczego zgłoszeń remontowych (TRE_ZGL)
::   WE: _a - 1 (area), 0 (okno uproszczone)
::       [_b] - REM_CYKL.ref() - dodaje do filtrowania
::       [_c] - REM_ZAS.ref() - dodaje do filtrowania
::----------------------------------------------------------------------------------------------------------------------
_area:=_a;

_env:=obj_new('WER'
              ,'ARC'
              ,'ALL'
              ,'OWN'
              ,'FILTER'
              ,'REM_CYKL'
              ,'REM_ZAS'
              ,'select'
              ,'TAB_POW'
              ,'WER_POW'
              ,'TAB_ZAKR'
              ,'WER_ZAKR');

:: Okno wertowania
_env.WER:='WER';
:: Czy archiwalne
_env.ARC:='N';
:: Czy widać wszystkie zgłoszenia
_env.ALL:={? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_PZGL') || 'T' || 'N' ?};
:: Czy widać własne zgłoszenia
_env.OWN:={? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_PZGW') || 'T' || 'N' ?};
:: Aktywny "filtr" - inicjowany wg uprawnień
_env.FILTER:=
   {? _env.ALL='T'
   || 'A'
   |? _env.OWN='T'
   || 'M'
   |? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL')
   || 'N'
   |? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AWZG')
   || 'W'
   |? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_RZGL')
   || 'R'
   |? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AEZG')
   || 'Z'
   || '~'
   ?};
:: Definicja REM_CYKL - dodaje do filtrowania
_env.REM_CYKL:={? var_pres('_b')=type_of(null()) || _b || null() ?};
:: Zasób REM_ZAS - dodaje do filtrowania
_env.REM_ZAS:={? var_pres('_c')=type_of(null()) || _c || null() ?};
:: Formuła selekcji
_env.select:=
   {? _area
   || "params_exec('select_area','remonty_zgloszenia',.)"
   || "params_exec('select_simple','remonty_zgloszenia',.)"
   ?};
:: Struktura zgłoszeń powiązanych
_env.TAB_POW:=_tab:=tab_tmp(2,
      'LP','INTEGER','Lp',
      'SYM','STRING[30]','Symbol',
      'STAT_REJ','STRING[15]','Status rejestracji',
      'REM_ZAS','STRING[100]','Zasób',
      'REM_KATG','STRING[100]','Kategoria',
      'TYTUL','STRING[100]','Tytuł',
      'REF','STRING[16]','REM_ZGL.ref()'
);
_env.WER_POW:=_wer:=_tab.mk_sel('Zgłoszenia remontowe'@,'N',0,'rem_zglqwerp',,,,0,'U','T',0,0,0,'','','on');
_tab.win_fld(_wer,,'SYM',,,30,,,'Symbol'@@);
_tab.win_fld(_wer,,'STAT_REJ',,,'15,15,15',,,'Status rejestracji'@@);
_tab.win_fld(_wer,,'REM_ZAS',,,30,,,'Zasób'@@);
_tab.win_fld(_wer,,'REM_KATG',,,20,,,'Kategoria zgłoszenia'@@);
_tab.win_fld(_wer,,'TYTUL',,,40,,,'Tytuł'@@);
_tab.win_act(_wer,0,'Formuła','Z&ałączniki'@@,,,"exec('action_attachments','!tre_zgl_dzgl')",,,,,,'A');
_tab.win_act(_wer,0,'Menu','Fu&nkcje'@@,,,,,,,,,'N',,);
_tab.win_act(_wer,0,'Formuła','Podgląd &realizacji'@@,'#N',,"exec('action_complete_view','!tre_zgl_rzgl')",,,,,,'R');
_tab.win_act(_wer,0,'Formuła','--Z'@@,'#N',,,,,,,,'Z');
_tab.win_act(_wer,0,'Formuła','Podglą&d planu'@@,'#N',,"exec('plan_view','remonty_plan')",,,,,,'D');
_tab.win_act(_wer,0,'Formuła','-- X'@@,'#N',,,,,,,,'Ś');
_tab.win_act(_wer,0,'Formuła','Informacje o zasobie'@@,'#N',,
             "exec('action_display','!zws_tre_dzas',REM_ZGL.REM_ZAS)",,,,,,'I');
_tab.win_act(_wer,0,'Formuła','Przebiegi zasobu'@@,'#N',,
             "exec('action_select','!tre_tre_dprz',REM_ZGL.REM_ZAS,REM_ZGL.ref())",,,,,,'P');
_tab.win_act(_wer,0,'Formuła','-- X'@@,'#N',,,,,,,,'Ź');
_tab.win_act(_wer,0,'Formuła','Zmian&y'@@,'#N','Historia zmian danych'@,"exec('zmiany','#syslog')",,,,,,'Y');
_tab.win_act(_wer,0,'Formuła','Legenda'@@,,,"exec('legenda','color','REM_ZGL_POW'); ~~",,,,,,'L');
_tab.win_act(_wer,0,'Formuła','Zadania&'@@,,'Zadania związane z bieżącym zapisem'@,
             "exec('todo_select','#b__box',REM_ZGL.uidref())",,,,,,'Ń');
_tab.win_act(_wer,0,'Wyświetl',,,,"exec('action_display','remonty_zgloszenia')");
_fb:="
   _tab:=cur_tab(1,1);
   _result:='';
   {? REM_ZGL.seek(_tab.REF)
   ||
      {? REM_ZGL.DK_C<>null() & ref_name(REM_ZGL.DK_C)<>DK_C.name()
      || DK_C.use(ref_name(REM_ZGL.DK_C))
      ?};
::      exec('action_record_before','remonty_zgloszenia',_a)
::    Kolorowanie
      {? REM_ZGL.ref()=REMONTY.REM_ZGL
      || _result:=Color.fnd_kol('REM_ZGL_POW#01')
      ?}
   ?};
   _result
";
_tab.win_act(_wer,0,'Rekord',,,,_fb);
_tab.win_sel(_wer);

_env.TAB_ZAKR:=exec('filters','remonty_zgloszenia',_env);
_env.WER_ZAKR:=_env.TAB_ZAKR.mk_sel('Zakres zgłoszeń'@,,0,'#remzglzakr',,,,,'U');
_env.TAB_ZAKR.win_fld(_env.WER_ZAKR,,'LABEL',,,25,,,'Zakres'@);
_env


\rem_zgl_set_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Podmiana formuł dla pól
::----------------------------------------------------------------------------------------------------------------------
exec('set_fml','#field',UD_POM,'PBUD',
   "UD_POM.PBUD:=REM_ZGL.UD_SKL().SYMBOL; ~~",
   "exec('domyslny','schemat','PODZORG')<>null()",
   "exec('ud_def_symbol_f3','schemat','PODZORG')",
   "  {? fld()='' || REM_ZGL.UD_SKL:=null(); return(1) ?};
      _ref:=exec('ud_def_symbol_ae','schemat',UD_SCH.ref());
      {? _ref
      || REM_ZGL.UD_SKL:=_ref;
         fld(REM_ZGL.UD_SKL().SYMBOL)
      ?}
   "
);
~~


\select_simple
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Selekcja zgłoszeń remontowych - proste okno
::   WE: _a - środowisko
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
params_set('env_rem_zgl',_env);

REM_ZGL.cntx_psh();
REM_ZGL.prefix();

exec('rem_zgl_set_fml','remonty_zgloszenia');

:: Ikony
exec('icon_before','remonty_zgloszenia','WERC');

exec('set_filter','remonty_zgloszenia');

REM_ZGL.win_sel('WERC');
_hdr:='';
{? _env.REM_ZAS<>null()
|| _hdr:=_hdr+' — '+'zasób: %1'@[exec('FindAndGet','#table',REM_ZAS,_env.REM_ZAS,,"SYMBOL",'')]
?};
_filters:=exec('filters','remonty_zgloszenia');
_ndx:=_filters.ndx_tmp(,,'FILTER',,);
_filters.index(_ndx);
_filters.prefix(_env.FILTER,);
{? _filters.first()
|| _hdr:=_hdr+' — '+'zakres: %1'@[_filters.LABEL]
?};
REM_ZGL.hdr_sel();
REM_ZGL.hdr_sel(_hdr);
REM_ZGL.select();

REM_ZGL.cntx_pop();
~~


\select_area
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Selekcja zgłoszeń remontowych - obszar roboczy
::   WE: _a - środowisko
::----------------------------------------------------------------------------------------------------------------------
_env:=_a;
_env_zasoby:=exec('env_zasoby_remontowe','zasoby');
_env_zasoby.DONE:=0;
_env_zasoby.REM_ZAS_VIEW:=0;

params_set('env_zasoby',_env_zasoby,'env_rem_zgl',_env);


REM_ZGL.cntx_psh();
REM_ZGL.prefix();

exec('rem_zgl_set_fml','remonty_zgloszenia');

:: Takie czary, żeby zadziałały tłumaczenia poniżej (teksty MUSZĄ być identyczne)
'Archiwum'@;'Zakres zgłoszeń'@;
_before:="
   params_set(params_get());
   _env:=params_get().env_rem_zgl;
::   _tab:=exec('elements_table','#desktop');
::   _tab.ID_SYS:='cmb_okres@panel'; _tab.NAME:='Archiwum'@; _tab.VISIBLE:='false'; _tab.add();
::   _tab.ID_SYS:='cmb_filter@panel'; _tab.NAME:='Zakres zgłoszeń'@; _tab.VISIBLE:='true'; _tab.add();
::   exec('load','#desktop','selektor','tre_zgl.dsk',,,,,_tab,1);
:: UWAGA: przełączanie na maskę archiwalną wyłączone - wszystkie zapisy są w masce '__'
::   _data_id:=$SYSLOG.tm_stamp();
::   exec('fetch_data','#desktop',_data_id,'selektor',_okresy:=exec('okresy','remonty_zgloszenia'),'OKRES,LABEL','');
::   exec('grab_data','#desktop','','selektor','cmb_okres@panel',_data_id,,'__');
::   _data_id:=$SYSLOG.tm_stamp();
::   exec('fetch_data','#desktop',_data_id,'selektor',_filters:=exec('filters','remonty_zgloszenia'),'FILTER,LABEL','');
::   exec('grab_data','#desktop','','selektor','cmb_filter@panel',_data_id,,params_get().env_rem_zgl.FILTER);

   _env.TAB_ZAKR.first();
   win_set('cur_row_pos=-1',REM_ZGL,'WER');
   grp_disp(_env.TAB_ZAKR,_env.WER_ZAKR,1,1);
   win_activate('WER');
   1
";
_env.WER:=_wnd:=REM_ZGL.grp_make(,_before,'tre_zgl',,,"exec('exit','zws',_a)",,'maximized');
::exec('create','#desktop',REM_ZGL,'selektor',_wnd,1);

_after_refresh:="
   params_set(params_get());
   _env:=params_get().env_rem_zgl;
   _env.FILTER:=_env.TAB_ZAKR.FILTER;
:: Filtr: [A]-wszystkie, [M]oje, [N]owe, [W]eryfikuję, [R]ealizuję, [Z]amykam
   params_exec('set_filter','remonty_zgloszenia');

   win_set('cur_row_pos=-1',REM_ZGL,'WER');
   grp_disp(REM_ZGL,'WER',1,1);
   ~~
";
_before:="


";
REM_ZGL.grp_sel(_wnd,_env.TAB_ZAKR,_env.WER_ZAKR,,_after_refresh,,,,_before,,0,0,'maximized','WER_ZAKR');

REM_ZGL.grp_splt(_wnd,,'vertical','prawy',',35');

::REM_ZGL.grp_splt(_wnd,,'horizontal','panel');
_after_refresh:="params_exec('rem_zgl_after_refresh','remonty_zgloszenia')";
_before:="
::   REM_ZGL.index('SYMBOL');
::   REM_ZGL.prefix();
   _env:=params_get().env_rem_zgl;
   _tab:=_env.TAB_ZAKR;
   {? grp_empty(_tab,_env.WER_ZAKR)
   || '#disable'
   || ~~
   ?}
";
REM_ZGL.grp_sel(_wnd,REM_ZGL,'WER',,_after_refresh,,,,_before,,0,0,'maximized','WER');
REM_ZGL.grp_splt(_wnd,'prawy','horizontal','bottom',25);
REM_ZGL.grp_edit(_wnd,REM_ZGL,'INFO',,,,,,'maximized');

:: Ikony
exec('icon_before','remonty_zgloszenia','WER');

REM_ZGL.win_sel(_wnd);
REM_CZYN.win_sel('WER');
REM_CZYG.win_sel('WER');
REM_CZYT.win_sel('WER');
REM_CZYP.win_sel('WER');
REM_CZYU.win_sel('WER');

AreaTitle.setTabWin(REM_ZGL,~~);
AreaTitle.setTitle();

:: Wyłączenie checkboxów zaznaczających na interm
_env.TAB_ZAKR.win_sopt(_env.WER_ZAKR,'select_record_checkbox=0');

:: Ustalenie treści linku
_params:=params_get();
{? type_of(_params)>0 & var_pres('LINK',_params)
|| _link:=_params.LINK
|| _link:=''
?};

:: Obsługa linku
{? _link<>''
|| _ini_zgl:=exec('FindAndGet','#table',REM_ZGL,_link,,"ref()",null());
   {? _ini_zgl=null()
   || FUN.info('Brak zgłoszenia o identyfikatorze %1.'@[_link])
   || exec('set_filter','remonty_zgloszenia');
      {? REM_ZGL.f_seek(_ini_zgl)
      || REM_ZGL.select(,1,5,,'WER',,1)
      || FUN.info(
            'Brak uprawnień do przeglądania zgłoszenia %1.'@
            [exec('FindAndGet','#table',REM_ZGL,_ini_zgl,,"SYM",'')]
         )
      ?}
   ?}
:: Obsługa standardowa
|| exec('set_filter','remonty_zgloszenia');
   REM_ZGL.select()
?};

REM_ZGL.cntx_pop();
~~


\okresy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Tabela tymczasowa zawierająca okresy archiwów zgłoszeń remontowych (do kontrolki PanelPlus)
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'LP','INTEGER','Lp'
   ,'OKRES','STRING[2]','Okres'
   ,'LABEL','STRING[20]','Etykieta'
);
_lp:=1;
_tab.LP:=_lp;
_tab.OKRES:='__';
_tab.LABEL:='---';
_tab.add();

_names:=REM_ZGL.names();
_names.prefix();
{? _names.first()
|| {!
   |? _okres:=_names.NAME+2;
      {? _okres<>'__'
      || _tab.OKRES:=_okres;
         {? ~_tab.find_rec()
         || _lp+=1;
            _tab.LP:=_lp;
            _tab.OKRES:=_okres;
            _tab.LABEL:=$(2000+(#_tab.OKRES));
            _tab.add()
         ?}
      ?};
      _names.next()
   !}
?};
_tab


\filters
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Tabela tymczasowa zawierająca filtry w oknie zgłoszeń remontowych (do kontrolki PanelPlus)
::   WE: [_a] - obj_new - środowisko
::----------------------------------------------------------------------------------------------------------------------
_env:=~~;
{? var_pres('_a')>100
|| _env:=_a
|| _env:=params_get().env_rem_zgl
?};

_tab:=tab_tmp(1
   ,'LP','INTEGER','Lp'
   ,'FILTER','STRING[200]','Filtr'
   ,'LABEL','STRING[50]','Etykieta'
);
_lp:=0;
{? _env.ALL='T'
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='A'; _tab.LABEL:='Wszystkie'@; _tab.add()
?};
{? _env.ALL='T' | _env.OWN='T'
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='M'; _tab.LABEL:='Moje'@; _tab.add()
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL')
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='N'; _tab.LABEL:='Moje nowe (zakończ rejestrację)'@; _tab.add()
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AWZG')
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='W'; _tab.LABEL:='Moje zarejestrowane (zweryfikuj)'@; _tab.add()
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_RZGL')
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='R'; _tab.LABEL:='Moje zweryfikowane (zrealizuj)'@; _tab.add()
?};
{? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AEZG')
|| _lp+=1; _tab.LP:=_lp; _tab.FILTER:='Z'; _tab.LABEL:='Moje zrealizowane (zamknij)'@; _tab.add()
?};

_tab


\filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Ustawia filtr zgłoszeń
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_zgl;
_env.FILTER:=exec('get_value','#desktop','','selektor','cmb_filter@panel');
:: Filtr: [A]-wszystkie, [M]oje, [N]owe, [W]eryfikuję, [R]ealizuję, [Z]amykam
params_exec('set_filter','remonty_zgloszenia');
win_activate('WER');
~~


\set_filter
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Ustawia filtr w oknie zgłoszeń
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_zgl;
_filter:=_env.FILTER;
_arc:=_env.ARC;
_rem_cykl:=_env.REM_CYKL;
_rem_zas:=_env.REM_ZAS;

:: Pusty filtr - zabezpieczenie na wypadek braku uprawnień
{? _filter='~'
|| REM_ZGL.f_set('SYM',,'0=1')

:: Zgłoszenia wszystkie, czyli niezależnie od tego czy są na liście zadań, czy nie
|? _filter='A'
|| {? _env.ALL='T'
   || REM_ZGL.f_set('SYM',,
         'ARC=\':_a\''+
         {? _rem_cykl=null() || '' || ' and REM_CYKL=:_b' ?}+
         {? _rem_zas=null() || '' || ' and REM_ZAS=:_c' ?},
         _arc,_rem_cykl,_rem_zas
      )
:: Nic nie widać, użytkownik nie ma dostępu do tej opcji, bo nie ma czynności TRE_ZGL_PZGL
   || REM_ZGL.f_set('SYM',,'0=1')
   ?}

:: Tylko zgłoszenia własne, czyli takie, które są na liście zadań przypisane do bieżącego operatora (względem czynności)
:: Dodatkowo dla 'M' (moje) także zgłoszenia ostemplowane bieżącym operatorem
|| _status_new:=exec('status_new','remonty_zgloszenia');
   _status_ended:=exec('status_ended','remonty_zgloszenia');
   _status_verified:=exec('status_verified','remonty_zgloszenia');
   _status_completed:=exec('status_completed','remonty_zgloszenia');
   _tab:=tab_tmp(1,'REF','STRING[16]','');
   {? _filter='M'
   || exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_DZGL',_status_new);
      exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_AWZG',_status_ended);
      exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_RZGL',_status_verified);
      exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_AEZG',_status_completed);

      exec('ftab_add_usr','remonty_zgloszenia',_tab,'USR_WA');
      exec('ftab_add_usr','remonty_zgloszenia',_tab,'USR_WPR');
      exec('ftab_add_usr','remonty_zgloszenia',_tab,'USR_ZAT');
      exec('ftab_add_usr','remonty_zgloszenia',_tab,'USR_ZAM')
   |? _filter='N'
   || exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_DZGL',_status_new)
   |? _filter='W'
   || exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_AWZG',_status_ended)
   |? _filter='R'
   || exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_RZGL',_status_verified)
   |? _filter='Z'
   || exec('ftab_add_uid','remonty_zgloszenia',_tab,'TRE_ZGL_AEZG',_status_completed)
   ?};

   REM_ZGL.f_set('SYM','join :_a using("REM_ZGL".REFERENCE,:_a.REF)',
      'ARC=\':_b\''+
      {? _rem_cykl=null() || '' || ' and REM_CYKL=:_c' ?}+
      {? _rem_zas=null() || '' || ' and REM_ZAS=:_d' ?},
      _tab,_arc,_rem_cykl,_rem_zas
   )
?};
~~


\rem_zgl_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Ustawia opcje pól w oknie redakcyjnym zgłoszeń remontowych
::   WE: [_a] - STRING - akronim okienka zawierającego pola dot planowania
::----------------------------------------------------------------------------------------------------------------------
_red_plan:='REDW';
{? var_pres('_a')=type_of('')
|| _red_plan:=_a
?};
{? REM_ZGL.PROJEKTY
|| REM_ZGL.efld_opt('REDR','editable=grayed',,'WEW');
   {? REM_ZGL.PROJEKTY().T().R=exec('wewnetrzny','projtypy')
   || REM_ZGL.efld_opt('REDR','enable=0',,'KH');
      REM_ZGL.efld_opt('REDR','enable=1',UD_POM,'PBUD');
      REM_ZGL.efld_opt('REDR','enable=1',,'UD_SKL')
   || REM_ZGL.efld_opt('REDR','enable=1',,'KH');
      REM_ZGL.efld_opt('REDR','enable=0',UD_POM,'PBUD');
      REM_ZGL.efld_opt('REDR','enable=0',,'UD_SKL')
   ?}
|| REM_ZGL.efld_opt('REDR','editable=1',,'WEW');
   {? REM_ZGL.WEW='T'
   || REM_ZGL.efld_opt('REDR','enable=0',,'KH');
      REM_ZGL.efld_opt('REDR','enable=1',UD_POM,'PBUD');
      REM_ZGL.efld_opt('REDR','enable=1',,'UD_SKL')
   || REM_ZGL.efld_opt('REDR','enable=1',,'KH');
      REM_ZGL.efld_opt('REDR','enable=0',UD_POM,'PBUD');
      REM_ZGL.efld_opt('REDR','enable=0',,'UD_SKL')
   ?}
?};

_has_planned_zas:=1;
REM_PLAN.cntx_psh();
REM_PLAN.index('REM_ZGL');
REM_PLAN.prefix(REM_ZGL.ref());
{? REM_PLAN.first()=0
|| _has_planned_zas:=0
?};
REM_PLAN.cntx_pop();

{? REM_ZGL.WERYFIK='T'
|| REM_ZGL.efld_opt(_red_plan,'enable=1',,'REM_CZYT')
|| REM_ZGL.efld_opt(_red_plan,'enable=0',,'REM_CZYT');
   REM_ZGL.REM_CZYT:=null
?};

{? REM_ZGL.WERYFIK='T'
||
:: Zgłoszenie potwierdzone
   REM_ZGL.efld_opt(_red_plan,'enable=1',,'DT_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=1',,'TM_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=1',,'DT_PST');
   REM_ZGL.efld_opt(_red_plan,'enable=1',,'TM_PST');

   {? _has_planned_zas>0
   ||
      {? _red_plan='REDW' | _red_plan='PLAN'
      || REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_KAL','state=normal')
      ?};
::    Zgłoszenie potwierdzone z zasobami w planie
      REM_ZGL.efld_opt(_red_plan,'mark=1',,'DT_PST');
      REM_ZGL.efld_opt(_red_plan,'enable=1',,'PL_TRYB');
      {? _red_plan='REDW' | _red_plan='PLAN'
      || {? REM_ZGL.PL_DOST='P' & REM_ZGL.PL_TRYB='A'
         || REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_ZASOBY','state=normal')
         || REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_ZASOBY','state=grayed')
         ?}
      ?};
      {? REM_ZGL.PL_TRYB='A'
      || REM_ZGL.efld_opt(_red_plan,'enable=0',,'DUR_TIME');
         REM_ZGL.efld_opt(_red_plan,'enable=1',,'PL_DOST')
      || REM_ZGL.efld_opt(_red_plan,'enable=1',,'DUR_TIME');
         REM_ZGL.efld_opt(_red_plan,'enable=0',,'DT_PST');
         REM_ZGL.efld_opt(_red_plan,'enable=0',,'TM_PST');
         REM_ZGL.efld_opt(_red_plan,'enable=0',,'DT_PUA');
         REM_ZGL.efld_opt(_red_plan,'enable=0',,'TM_PUA');
         REM_ZGL.efld_opt(_red_plan,'enable=0',,'PL_DOST')
      ?}
   ||
::    Zgłoszenie potwierdzone bez zasobów w planie
      REM_ZGL.efld_opt(_red_plan,'mark=0',,'DT_PST');
      REM_ZGL.efld_opt(_red_plan,'enable=0',,'PL_TRYB');
      REM_ZGL.efld_opt(_red_plan,'enable=0',,'DUR_TIME');
      REM_ZGL.efld_opt(_red_plan,'enable=0',,'PL_DOST');
      {? _red_plan='REDW' | _red_plan='PLAN'
      || REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_ZASOBY','state=grayed');
         REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_KAL','state=grayed')
      ?}
   ?};
   ~~
||
:: Zgłoszenie odrzucone
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'DT_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'TM_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'PL_TRYB');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'DUR_TIME');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'DT_PST');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'TM_PST');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'DT_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'TM_PUA');
   REM_ZGL.efld_opt(_red_plan,'enable=0',,'PL_DOST');
   {? _red_plan='REDW' | _red_plan='PLAN'
   || REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_ZASOBY','state=grayed');
      REM_ZGL.btn_eopt(_red_plan,'BTN_ZGL_KAL','state=grayed')
   ?};
   ~~
?};
~~


\tre_zgl_parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Parametry pracy w oknie zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
::_env:=params_get().env_rem_zgl;
exec('parses','tre');
::exec('set_value','#desktop','','selektor','cmb_okres@panel','__');
~~


\rem_zgl_after_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła po odświeżeniu okna głównego selekcji zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
::_env:=params_get().env_rem_zgl;

{? grp_empty('WER')
||
:: Odświeżenie okien zależnych
   REM_ZGL.memo_set('','OPIS');
   grp_edisp(REM_ZGL,'INFO',1,1)
||
:: Odświeżenie okien zależnych
   REM_ZGL.memo_get(,'OPIS');
   grp_edisp(REM_ZGL,'INFO',1,1)
?};
~~


\status_new
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Status zgłoszenia - nowe
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'Nowe'@
|| 'Nowe'
?}


\status_ended
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Status zgłoszenia - zakończona rejestracja
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'Zarejestrowane'@
|| 'Zarejestrowane'
?}


\status_verified
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Status zgłoszenia - zweryfikowane
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'Zweryfikowane'@
|| 'Zweryfikowane'
?}


\status_completed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Status zgłoszenia - zrealizowane
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'Zrealizowane'@
|| 'Zrealizowane'
?}


\status_closed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Status zgłoszenia - zamknięte
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'Zamknięte'@
|| 'Zamknięte'
?}


\source_manual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Źródło zgłoszenia - ręcznie
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'ręcznie'@
|| 'ręcznie'
?}


\source_auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Żródło zgłoszenia - automatycznie
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'automatycznie'@
|| 'automatycznie'
?}


\source_cykl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Żródło zgłoszenia - zdarzenie cykliczne
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'zdarzenie cykliczne'@
|| 'zdarzenie cykliczne'
?}


\source_portal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Żródło zgłoszenia - portal (EDOKUM)
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'portal'@
|| 'portal'
?}


\source_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Żródło zgłoszenia - reklamacja (REK_N)
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'reklamacja'@
|| 'reklamacja'
?}


\source_problem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Żródło zgłoszenia - problem produkcyjny (EK_PROB)
::   WE: [_a] - czy napis tłumaczony do etykiet (1), napis zwykły (domyślnie: 0)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| 'problem produkcyjny'@
|| 'problem produkcyjny'
?}


\chk_rem_katg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_KATG - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(REM_KATG,,'SYMBOL');
{? _chk=''
|| {? __CHK.index(REM_KATG,_a)<>''
   || _chk:='SYMBOL'
   ?}
?};
_chk


\rem_zgl_deleted_in_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Obsługa sytuacji że jest czynność na liście todo ale zgłoszenie remontowe zostało usunięte
::   WE: _a - obj_new - obiekt Menadżera Procesów
::       [_b] - INTEGER - 0/[1] - czy errorować proces, jeżeli 0 to jest robiony .done()
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;

_error:=1;
{? var_pres('_b')=type_of(0)
|| _error:=_b
?};

_msg:=exec('rem_zgl_deleted_msg','remonty_zgloszenia');
_action:=exec('cur_act_uid','#b__box');
{? _mp.isService()=0 & _mp.CLEANER=0
|| FUN.emsg(_msg)
?};
{? _error>0
|| _mp.error(_msg)
|| _mp.done()
?};
~~


\rem_zgl_deleted_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Komunikat o usunięciu zgłoszenia remontowego
::----------------------------------------------------------------------------------------------------------------------
'Zgłoszenie remontowe nie zostało odnalezione, prawdopodobnie zostało usunięte.'@@


\action_back
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Wycofaj' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_zgl;

{? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
||
   _del_plan:=0;
:: Uproszczona obsługa, gdy zgłoszenie jest tylko zarejestrowane
   {? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia') &
      exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL')
   || _to:='';
      {? FUN.ask('Czy wycofać rejestrację zgłoszenia?'@)
      || _del_plan:=1;
         _to:=exec('status_new','remonty_zgloszenia')
      ?}

:: Obsługa przez okno redagowania z check-boxami
   || _upr_dzgl:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL');
      _upr_awzg:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AWZG');
      _upr_rzgl:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_RZGL');
      _upr_aezg:=exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AEZG');

      _tab:=tab_tmp(
         ,'AEZG','INTEGER','Wycofanie zamknięcia'@
         ,'RZGL','INTEGER','Wycofanie realizacji'@
         ,'AWZG','INTEGER','Wycofanie weryfikacji'@
         ,'DZGL','INTEGER','Wycofanie rejestracji'@
      );

::    Formuły dla pól
      _formula:="
         _tab:=cur_tab(1,1); _red:=cur_win(1,1);
         {? _tab.AEZG=0
         || _tab.RZGL:=_tab.AWZG:=_tab.DZGL:=0
         ?};
         ~~
      ";
      _tab.fld_fml('AEZG','AFTER_EDIT',_formula);
      _formula:="
         _tab:=cur_tab(1,1); _red:=cur_win(1,1);
         {? _tab.RZGL=0
         || _tab.AWZG:=_tab.DZGL:=0
         || _tab.AEZG:=1
         ?};
         ~~
      ";
      _tab.fld_fml('RZGL','AFTER_EDIT',_formula);
      _formula:="
         _tab:=cur_tab(1,1); _red:=cur_win(1,1);
         {? _tab.AWZG=0
         || _tab.DZGL:=0
         || _tab.AEZG:=_tab.RZGL:=1
         ?};
         ~~
      ";
      _tab.fld_fml('AWZG','AFTER_EDIT',_formula);
      _formula:="
         _tab:=cur_tab(1,1); _red:=cur_win(1,1);
         {? _tab.DZGL=0
         || ~~
         || _tab.AEZG:=_tab.RZGL:=_tab.AWZG:=1
         ?};
         ~~
      ";
      _tab.fld_fml('DZGL','AFTER_EDIT',_formula);

::    Okno redakcyjne
      _red:=_tab.mk_edit('Wycofanie zgłoszenia'@,,'wycofajzgl');
      _tab.win_esep(_red,'Zakres operacji'@);
      {? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia')
      || _tab.win_efld(_red,,'AEZG',,,,,,,,,'check-box',,"1","0")
      ?};
      {?  REM_ZGL.WERYFIK='T' &
         (REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia') |
          REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia'))
      || _tab.win_efld(_red,,'RZGL',,,,,,,,,'check-box',,"1","0")
      ?};
      {? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || _tab.win_efld(_red,,'AWZG',,,,,,,,,'check-box',,"1","0")
      ?};
      {? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
      || _tab.win_efld(_red,,'DZGL',,,,,,,,,'check-box',,"1","0")
      ?};
      _tab.win_ebtn(_red,'text=%1,align=end'['&Zapisz'@],"'key:F2'");
      _tab.win_ebtn(_red,'text=%1,align=end'['&Anuluj'@],"'key:Esc'");

::    Opcje pól
      _tab.efld_opt(_red,{? _upr_aezg || 'enable=1' || 'enable=0' ?},,'AEZG');
      _tab.efld_opt(_red,{? _upr_rzgl || 'enable=1' || 'enable=0' ?},,'RZGL');
      _tab.efld_opt(_red,{? _upr_awzg || 'enable=1' || 'enable=0' ?},,'AWZG');
      _tab.efld_opt(_red,{? _upr_dzgl || 'enable=1' || 'enable=0' ?},,'DZGL');

      _valid:="1";

      _to:='';
      _tab.win_edit(_red);
      {? _tab.edit(_valid)
      || {? _tab.AEZG & REM_ZGL.WERYFIK='N' || _tab.RZGL:=1 ?};
         {? _tab.DZGL
         || _del_plan:=1;
            _to:=exec('status_new','remonty_zgloszenia')
         |? _tab.AWZG
         || _del_plan:=1;
            _to:=exec('status_ended','remonty_zgloszenia')
         |? _tab.RZGL
         || _to:=exec('status_verified','remonty_zgloszenia')
         |? _tab.AEZG
         || _to:=exec('status_completed','remonty_zgloszenia')
         ?}
      ?}
   ?};

   _can_continue:=1;
   {? _del_plan>0
   || _px_obj:=exec('get_rem_object','px_obj',REM_ZGL.ref());
      {? _px_obj<>null()
      || _can_continue:=exec('rem_clear','px_poz',REM_ZGL.ref());
         {? _can_continue=0
         || _msg:='Nie można wycofać zgłoszenia, ponieważ jest w planie, '
                  'którego nie można usunąć (np z powodu istniejących wykonań)'@;
            FUN.emsg(_msg)
         ?}
      ?};
      {? _can_continue>0
      || _can_continue:=exec('rem_clear','po_plan',REM_ZGL.ref())
      ?}
   ?};
   _from:=REM_ZGL.STAT_REJ;
   {? _can_continue>0 & _to<>'' & REM_ZGL.STAT_REJ<>_to
   || REM_ZGL.STAT_REJ:=_to;
      {? REM_ZGL.put() & ('NWRZ'*_env.FILTER)>0
      || REM_ZGL.f_del()
      ?};

      {? _to<>exec('status_completed','remonty_zgloszenia') & _to<>exec('status_closed','remonty_zgloszenia')
      ||
::       Oznaczam wykonanie dla planu operacyjnego
         exec('set_wyk','po_event',REM_ZGL.uidref(),'N')
      ?};
      {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
      || exec('edokum_update','remonty_zgloszenia',REM_ZGL.ref(),1,_from)
      ?}
   ?}
?};
exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref());
~~


\attachments
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Obsługa załączników do zgłoszenia remontowego
::   WE: [_a] - jeżeli wystąpi i =1, to tylko wyświetlanie zawartości, wpp zależy od uprawnień
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1
|| _edit:=0
|| _edit:=
      exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DZGL') |
      exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_DWZG')
?};

{? REM_ZGL.r_lock(1,1,1)
|| REM_ZGLA.index('REM_ZGL');
   REM_ZGLA.prefix(REM_ZGL.ref());

   _tab_tmp:=tab_tmp(1
      ,'NAME','STRING[255]','Nazwa pliku'@
      ,'SIZE','REAL','Rozmiar'@
      ,'MOD_DATE','STRING[16]','Data modyfikacji'@
      ,'ADD_DATE','STRING[19]','Data dodania'@
      ,'INT_DATA','INTEGER','Identyfikator pliku'@
      ,'STR_DATA','STRING[48]','Identyfikator pliku'@
::      ,'NAZWA','STRING[50]','Opis'@
   );
   _fml_load:="
      _tab_ctrl:=_a;
      _tab:=_b;
      _tab_ctrl.blank();
      _blob_ref:=($('_tab:=_a;_tab.'+.FIELD))(_tab);
      {? _blob_ref<>null()
      ||
         _tab_ctrl.NAME:=_tab.bl_info(.FIELD,'NAME');
         _tab_ctrl.SIZE:=_tab.bl_info(.FIELD,'SIZE');
         _tab_ctrl.MOD_DATE:=$_tab.bl_info(.FIELD,'MODIFY_DATE')+' '+$_tab.bl_info(.FIELD,'MODIFY_TIME')
      ?};
      _tab_ctrl.ADD_DATE:=19+_tab.IDADD;
      _tab_ctrl.STR_DATA:=_tab.uidref();
::      _tab_ctrl.NAZWA:=_tab.NAZWA;
      _tab_ctrl.add()
   ";
   _fml_edit:="
      params_set(params_get());
      _env:=params_get().env_blob;
      _args:=_a;
      _buffer:=_b;
      _action:=_c;
      _uid:=_d;
      {? _action='Popraw'
      ||
         _env.act_popraw(_uid)
::         _edit(_uid)
      || _buffer.REM_ZGL:=_args.REM_ZGL;
         1
      ?}
   ";
   _fml_file:="";
   _fml_valid:="
      _filename:=_c;
      _dialog:=_e;
      _result:=1;
      _env:=params_get().env_blob;
      {? _env.has_file(_filename)>0
      || _result:=0;
         _msg:='Plik o nazwie: %1 jest już dodany jako załącznik i nie może zostać dodany ponownie.'@[_filename];
         {? _dialog=0
         || FUN.emsg(_msg)
         || KOMM.add(_msg,2,,1)
         ?}
      ?};
      _result
   ";
   _args:=obj_new('REM_ZGL'); _args.REM_ZGL:=REM_ZGL.ref();
   exec('edit_blob','#edit',REM_ZGLA
      ,'ATA'
      ,exec('REM_ZGLA','buffer1')
      ,_fml_edit
      ,_fml_file
      ,_args
      ,_edit
      ,'Załączniki'@+{? _edit || '' || ' — '+'PODGLĄD'@ ?}
      ,'icons'
      ,_tab_tmp
      ,_fml_load
      ,_fml_valid
   );
   REM_ZGL.r_unlock()
|| FUN.emsg('Redagowanie listy załączników nie jest możliwe.\nRekord jest redagowany lub przetwarzany.'@)
?};
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Popraw' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_status_new:=exec('status_new','remonty_zgloszenia');
_status_ended:=exec('status_ended','remonty_zgloszenia');
_status_verified:=exec('status_verified','remonty_zgloszenia');

:: Uruchomienie czynności rejestracji zgłoszenia, gdy nie jest zakończona
:: Wymaga uprawnień do TRE_ZGL_DZGL albo TRE_ZGL_AWZG
{? REM_ZGL.STAT_REJ=_status_new
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='TRE_ZGL_DZGL';
   _args.UIDREF:=REM_ZGL.uidref();
   _args.AKCJA:='POPRAW';
   _args.PROC_START:='N';
   _args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
      _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
      _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

   exec('mp_run','#b__box',_args);

   {? params_get().env_rem_zgl.FILTER='N' & REM_ZGL.get() & REM_ZGL.STAT_REJ<>_status_new
   || REM_ZGL.f_del()
   ?}

:: Uruchomienie redakcji zgłoszenia bez czynności - gdy zgłoszenie jest zarejestrowane
:: Wymaga uprawnień do TRE_ZGL_DZGL albo TRE_ZGL_AWZG
|? REM_ZGL.STAT_REJ=_status_ended
|| {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
   || exec('rem_zgl_efld_opt','remonty_zgloszenia');
      REM_ZGL.win_edit('REDR');
      REM_ZGL.hdr_edit('Zgłoszenie remontowe — zarejestrowane'@);
      REM_ZGL.btn_eopt('REDR','END',
         {? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') || 'state=normal' || 'state=grayed'  ?}
      );
      REM_ZGL.memo_get(,'OPIS',);
      REM_ZGL.memo_get(,'WOPIS',);
      {? REM_ZGL.edit("params_exec('chk_rem_zgl_rej','remonty_zgloszenia',1)")
      || {? REM_ZGL.put()
         || exec('desc_update','#b__box',REM_ZGL.uidref());
            REM_ZGL.memo_put(,'OPIS');
            REM_ZGL.memo_put(,'WOPIS')
         ?}
      ?}
   ?};
   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

:: Uruchomienie redakcji zgłoszenia bez czynności - gdy zgłoszenie jest zweryfikowane
:: Wymaga uprawnień do TRE_ZGL_AWZG
|? REM_ZGL.STAT_REJ=_status_verified
|| {? exec('chk_role','#b__box',OPERATOR.USER,'TRE_ZGL_AWZG')
   || {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
      || exec('rem_zgl_efld_opt','remonty_zgloszenia');
         REM_ZGL.win_edit('REDW');
         REM_ZGL.hdr_edit('Zgłoszenie remontowe — zweryfikowane'@);
         REM_ZGL.memo_get(,'OPIS',);
         REM_ZGL.memo_get(,'WOPIS',);
         {? REM_ZGL.edit("params_exec('chk_rem_zgl_verify','remonty_zgloszenia',1)")
         || {? REM_ZGL.put()
            || exec('desc_update','#b__box',REM_ZGL.uidref());
               REM_ZGL.memo_put(,'OPIS');
               REM_ZGL.memo_put(,'WOPIS')
            ?}
         ?}
      ?}
   || FUN.info(
         'Nie można poprawiać zweryfikowanego zgłoszenia.\n'
         'Brak uprawnień do czynności weryfikacji zgłoszeń remontowych.'@
      )
   ?};
   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

|| FUN.info('Zgłoszenia o tym statusie nie można poprawiać.'@)
?};
~~


\chk_rem_zgl_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_ZGL (zgłoszenia remontowe) - wołana z poziomu rejestracji zgłoszenia
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
_chk:=__CHK.record(REM_ZGL,,'REM_KATG','DT_WA','TYTUL');
{? _chk=''
|| _tmstmp_wa:=exec('create','#tm_stamp',REM_ZGL.DT_WA,REM_ZGL.TM_WA);
   _tmstmp_now:=exec('create','#tm_stamp',date(),time());
   {? _tmstmp_wa>_tmstmp_now
   || FUN.info('Data i godzina zdarzenia nie może być w przyszłości.'@);
      _chk:='DT_WA'
   ?}
?};
_chk


\chk_rem_zgl_verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_ZGL (zgłoszenia remontowe) - wołana z poziomu weryfikacji zgłoszenia
::       (inny zakres walidacji niż przy wprowadzaniu zgłoszenia)
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:='';

{? REM_ZGL.REM_ZAS<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.REM_ZAS();
   _can_continue:=exec('chk_opiekun','zasoby',OPERATOR.USER);
   {? _can_continue=0
   || _chk:='REM_ZAS';
      _what:=exec('REM_ZAS','#to_string');
      _choice:=FUN.choice(
         'Zasób: %1 posiada opiekunów. Tylko oni mogą weryfikować zgłoszenia remontowe dotyczące tego zasobu.'@[_what],,
      );
      {? _choice>0
      || exec('rem_kato_select','zasoby',REM_ZAS.KAT)
      ?}
   ?};
   REM_ZAS.cntx_pop()
?};

{? _chk=''
||
   {? REM_ZGL.WERYFIK='T'
   || _res_plug:=Plugin.run('REM_ZGL_VERIFY_F_001');
      {? _res_plug<=0
      || _chk:='WOPIS'
      ?}
   || _res_plug:=Plugin.run('REM_ZGL_VERIFY_F_001');
      {? _res_plug<=0
      || _chk:='WOPIS'
      || _chk:=''
      ?}
   ?}
?};
{? _chk=''
|| _chk:=exec('valid_zgl','remonty_plan')
?};
_chk


\num
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Numeracja zgłoszeń zgodna z numeracją w systemie Xpertis
::       Klucz numeracji wg pól REM_ZGL.REM_KATG, REM_ZGL.AR
::----------------------------------------------------------------------------------------------------------------------
_rem_katg:=REM_ZGL.REM_KATG().SYMBOL;
_typ:=
   {? _rem_katg='!ZGŁOSZENIE'
   || 'ZGL'
   |? _rem_katg='!PRZEGLĄD'
   || 'PRZ'
   |? _rem_katg='!REMONT'
   || 'REM'
   |? _rem_katg='!GWARANCJA'
   || 'GW'
   |? _rem_katg='!UBEZPIECZENIE'
   || 'UB'
   || 'ZGL'
   ?};
_sym:='%1\\%2\\%3'[_typ,$REM_ZGL.NR,$REM_ZGL.AR];
_sym


\icon_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ustala ikony w oknie wertowania zgłoszeń remontowych
::   WE: _a - akronim okna wertowania
::----------------------------------------------------------------------------------------------------------------------
_wer:=_a;

_icon_before:="
   {? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
   || exec('zarejestrowany','icon')
   |? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
   || exec('zaakceptowany','icon')
   |? REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
   || 'xwin16.png:1'
   |? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia')
   || 'xwin16.png:157'
   || exec('pusta','#icon')
   ?}
";
REM_ZGL.win_fml(_wer,,'STAT_REJ',,'ICON_BEFORE',_icon_before,2);
_icon_before:="
   _icon:=exec('pusta','#icon');
   REM_ZGLA.cntx_psh();
   REM_ZGLA.index('REM_ZGL');
   REM_ZGLA.prefix(REM_ZGL.ref());
   {? REM_ZGLA.first()
   || _icon:=exec('zalacznik','icon')
   ?};
   REM_ZGLA.cntx_pop();
   _icon
";
REM_ZGL.win_fml(_wer,,'REM_KATG','SYMBOL','ICON_BEFORE',_icon_before,2);
_icon_before:="
   _icon:=exec('pusta','#icon');
   {? REM_ZGL.SYM<>REM_ZGL.SYM_TOP
   || _icon:='xwin16.png:11'
   ?};
   _icon
";
REM_ZGL.win_fml(_wer,,'SYM',,'ICON_BEFORE',_icon_before,2);
~~


\rem_zgl_zas_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Selekcja zgłoszeń remontowych przypisanych do zasobu
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_rem_zgl:=exec('env','remonty_zgloszenia',0,,REM_ZAS.ref());
_env_rem_zgl.select();
~~


\rem_zgl_zas_after_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: Po odświeżeniu w oknie REM_ZGL (dla zasobu)
::   WE: [_a] - czy odswiezac okno
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_rem_zgl:=params_get().env_rem_zgl;
_env_rem_zgl.REM_ZAS:=REM_ZAS.ref();
{? REM_ZGL.f_active()>0 & REM_ZGL.sel_size()>0
|| ~~
|| exec('set_filter','remonty_zgloszenia')
?};
~~


\action_record_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Rekord przed' w oknie zgłoszeń remontowych
::   WE: _a - parametr systemowy
::----------------------------------------------------------------------------------------------------------------------
{? REM_ZGL.DK_C<>null() & ref_name(REM_ZGL.DK_C)<>DK_C.name()
|| DK_C.use(ref_name(REM_ZGL.DK_C))
?};
:: ekiosk - podczytanie stanowiska/gniazda
{? VEK.TERM='T'
|| _str:='';
   REM_ZAS.cntx_psh();
   {? REM_ZGL.REM_ZAS<>null()
   || {? REM_ZGL.REM_ZAS().TWRKPLC<>null()
      || TWRKPLC.cntx_psh();
         _str:=REM_ZGL.REM_ZAS().TWRKPLC().KOD;
         TWRKPLC.cntx_pop()
      |? REM_ZGL.REM_ZAS().TWRKZBR<>null()
      || TWRKZBR.cntx_psh();
         _str:=REM_ZGL.REM_ZAS().TWRKZBR().SYMBOL;
         TWRKZBR.cntx_pop()
      ?}
   ?};
   REM_ZAS.cntx_pop();
   VAR.STRING:=_str
?};
{? _a
||
:: Wyszarzanie akcji
   exec('actions_grayed','remonty_zgloszenia')
?};
~~


\action_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'wyświetl' w oknie zgłoszeń remontowych
::   WE: [_a] - REM_ZGL.ref()
::----------------------------------------------------------------------------------------------------------------------
REM_ZGL.cntx_psh();
REM_ZGL.prefix();
{? var_pres('_a')=type_of(null())
|| _can_continue:=REM_ZGL.seek(_a)
|| _can_continue:=1
?};

{? _can_continue>0
|| {? VEK.TERM='T'
   || exec('uni_display','#desktop',REM_ZGL,'EK','Zgłoszenie remontowe'@,0,0,'rem_zgl1','maximized')
   || REM_ZGL.win_edit('DISP');
      REM_ZGL.hdr_edit('Zgłoszenie remontowe'@);
      REM_ZGL.display()
   ?}
?};

REM_ZGL.cntx_pop();
~~


\actions_grayed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Wyszarzator akcji dla zgłoszeń remontowych
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_grayed:=':';
:: > W zależności od archiwalności rekordu
{? REM_ZGL.ARC<>'T'
|| _grayed:='N(W)'+_grayed
|| _grayed:='PUOZIN(F)CÓ'+_grayed
?};
:: > W zależności od stanu rekordu
{? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia')
|| _grayed:='WIN(FRL)R'+_grayed
|? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
|| _grayed:='UZIRN(L)'+_grayed
|? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
|| _grayed:='PUZW'+_grayed
|? REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
|| _grayed:='PUZWRN(L)'+_grayed
|? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia')
|| _grayed:='PUZWIRN(L)'+_grayed
?};
:: > W zależności od stanu weryfikacji
{? REM_ZGL.WERYFIK='N'
|| _grayed:='R'+_grayed
?};
:: > W zależności od powiązania z zasobem
{? REM_ZGL.REM_ZAS=null()
|| _grayed:='N(IPLD)'+_grayed
|| REM_PLAN.cntx_psh();
   REM_PLAN.index('REM_ZGL');
   REM_PLAN.prefix(REM_ZGL.ref());
   {? REM_PLAN.first()=0
   || _grayed:='N(LD)'+_grayed
   ?};
   REM_PLAN.cntx_pop()
?};
:: > W zależności od powiązań z definicją zdarzeń cyklicznych lub reklamacją
{? REM_ZGL.REM_CYKL=null() & REM_ZGL.RREK=''
|| _grayed:='N(G)'+_grayed
?};
:: Faktyczne wyszarzenie
REM_ZGL.actions_grayed(cur_win(1,1),_grayed);
~~


\select_real
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Selekcja realizacji zgłoszenia remontowego
::   WE: _a - REM_ZGL.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zgl:=_a;

_env:=obj_new('edit'); _env.edit:=0;
params_set('env',_env);

REM_ZGL.cntx_psh();
REM_ZGL.prefix();
{? REM_ZGL.seek(_rem_zgl)
||
::   {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
::   || _env.edit:=1
::   || _env.edit:=0
::   ?};

:: Ustawienia
   POMOC.RODZ:='T';
   ZAKR.MATU:='T';

   {? _env.edit
   || _env.edit:=exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,1,'Zgłoszenie jest redagowane'@)
   ?};

:: Zasadnicze działanie - selekcja
   _tab:=REM_GRG;
   _grp:=_tab.grp_make('Realizacja zgłoszenia'@+{? _env.edit || '' || ' — '+'PODGLĄD'@ ?},,'grpremreal',,,,,'normal');

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ'
      ?};
      REM_GRG.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_GRG,'WER','Godziny'@,_after_refresh,,,,,,,,'maximized');
   REM_GRG.win_fml('WER',,'IL',,'SUM_FORMAT',"'out_prec=4'");

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ';
         {? ~REM_GRM.sel_size() || _grayed:='G'+_grayed ?}
      ?};
      _grayed:={? REM_GRM.ND='T' || 'PU'+{? ~REM_GRM.sel_size()||'G'||''?} || 'I' ?}+_grayed;
      _grayed:={? REM_GRM.MG=null() || 'G' || '' ?}+_grayed;
      REM_GRM.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_GRM,'WER','Materiały'@,_after_refresh,,,,,,,,'maximized');
   REM_GRM.win_fml('WER',,'IL',,'SUM_FORMAT',"'out_prec='+$ST.DOKL");

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ'
      ?};
      PROJ2FAP.actions_grayed('WRR_PRJZ',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,PROJ2FAP,'WRR_PRJZ','Zakupy'@,_after_refresh,,,,,,,,'maximized');
   PROJ2FAP.win_fml('WRR_PRJZ',,'IL',,'SUM_FORMAT',"'out_prec='+$ST.DOKL");
   PROJ2FAP.win_fml('WRR_PRJZ',,'W',,'SUM_FORMAT',"'out_prec=2'");

:: Czynności
   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZWY'+_grayed+'DZ'
      ?};
      REM_CZYU.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_CZYU,'WER','Czynności'@,_after_refresh,,,,,,,,'maximized');

   _tab.win_sel(_grp);
   REM_GRG.index('ZGL_OKR'); REM_GRG.prefix(REM_ZGL.ref());
   REM_GRM.index('ZGL_OKRM'); REM_GRM.prefix(REM_ZGL.ref());
   PROJ2FAP.index('REM_ZGL'); PROJ2FAP.prefix('N',REM_ZGL.ref());
   REM_CZYU.index('NR'); REM_CZYU.prefix(REM_ZGL.ref);
   _tab.select();

   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())
?};
REM_ZGL.cntx_pop();
~~


\select_godziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Selekcja godzin dla realizacji
::   WE: [_a] - REM_ZGL.ref lub bieżący rekord
::       [_b] - INTEGER - 0/[1] - czy edycja może być dostępna (w zależności od statusu)
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(REM_ZGL.ref())
|| _ref:=_a
?};

_edit:=1;
{? var_pres('_b')=type_of(0)
|| _edit:=_b
?};

_result:=0;
_can_continue:=1;

REM_ZGL.cntx_psh();
{? _ref<>null()
|| REM_ZGL.prefix();
   {? REM_ZGL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _env:=obj_new('edit');
   _env.edit:=0;
   params_set('env',_env);

   {? _edit>0
   || {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || _env.edit:=1
      || _env.edit:=0
      ?}
   ?};

:: Ustawienia
   POMOC.RODZ:='T';
   ZAKR.MATU:='T';

   {? _env.edit
   || _env.edit:=exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,1,'Zgłoszenie jest redagowane'@)
   ?};

:: Zasadnicze działanie - selekcja
   _tab:=REM_GRG;
   _grp:=_tab.grp_make('Godziny do realizacji zgłoszenia'@+{? _env.edit || '' || ' — '+'PODGLĄD'@ ?},,'grpremreal',,,,,'normal');

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ'
      ?};
      REM_GRG.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_GRG,'WER',,_after_refresh,,,,,,,,'maximized');
   REM_GRG.win_fml('WER',,'IL',,'SUM_FORMAT',"'out_prec=4'");

   _tab.win_sel(_grp);
   REM_GRG.index('ZGL_OKR'); REM_GRG.prefix(REM_ZGL.ref());
   _tab.select();

   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

?};
REM_ZGL.cntx_pop();
''


\select_materialy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Selekcja materiałów dla realizacji
::   WE: [_a] - REM_ZGL.ref lub bieżący rekord
::       [_b] - INTEGER - 0/[1] - czy edycja może być dostępna (w zależności od statusu)
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(REM_ZGL.ref())
|| _ref:=_a
?};

_edit:=1;
{? var_pres('_b')=type_of(0)
|| _edit:=_b
?};

_result:=0;
_can_continue:=1;

REM_ZGL.cntx_psh();
{? _ref<>null()
|| REM_ZGL.prefix();
   {? REM_ZGL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _env:=obj_new('edit');
   _env.edit:=0;
   params_set('env',_env);

   {? _edit>0
   || {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || _env.edit:=1
      || _env.edit:=0
      ?}
   ?};

:: Ustawienia
   POMOC.RODZ:='T';
   ZAKR.MATU:='T';
   exec('slo_m_ok','material','T',0,,'W');

   {? _env.edit
   || _env.edit:=exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,1,'Zgłoszenie jest redagowane'@)
   ?};

:: Zasadnicze działanie - selekcja
   _tab:=REM_GRM;
   _grp:=_tab.grp_make('Materiały do realizacji zgłoszenia'@+{? _env.edit || '' || ' — '+'PODGLĄD'@ ?},,'grpremreal',,,,,'normal');

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ';
         {? ~REM_GRM.sel_size() || _grayed:='G'+_grayed ?}
      ?};
      _grayed:={? REM_GRM.ND='T' || 'PU'+{? ~REM_GRM.sel_size()||'G'||''?} || 'I' ?}+_grayed;
      _grayed:={? REM_GRM.MG=null() || 'G' || '' ?}+_grayed;
      REM_GRM.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_GRM,'WER',,_after_refresh,,,,,,,,'maximized');
   REM_GRM.win_fml('WER',,'IL',,'SUM_FORMAT',"'out_prec='+$ST.DOKL");

   _tab.win_sel(_grp);
   REM_GRM.index('ZGL_OKRM'); REM_GRM.prefix(REM_ZGL.ref());
   _tab.select();

   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

?};
REM_ZGL.cntx_pop();
''


\select_zakupy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Selekcja zakupów dla realizacji
::   WE: [_a] - REM_ZGL.ref lub bieżący rekord
::       [_b] - INTEGER - 0/[1] - czy edycja może być dostępna (w zależności od statusu)
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(REM_ZGL.ref())
|| _ref:=_a
?};

_edit:=1;
{? var_pres('_b')=type_of(0)
|| _edit:=_b
?};

_result:=0;
_can_continue:=1;

REM_ZGL.cntx_psh();
{? _ref<>null()
|| REM_ZGL.prefix();
   {? REM_ZGL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _env:=obj_new('edit');
   _env.edit:=0;
   params_set('env',_env);

   {? _edit>0
   || {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || _env.edit:=1
      || _env.edit:=0
      ?}
   ?};

:: Ustawienia
   POMOC.RODZ:='T';
   ZAKR.MATU:='T';

   {? _env.edit
   || _env.edit:=exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,1,'Zgłoszenie jest redagowane'@)
   ?};

:: Zasadnicze działanie - selekcja
   _tab:=PROJ2FAP;
   _grp:=_tab.grp_make('Zakupy do realizacji zgłoszenia'@+{? _env.edit || '' || ' — '+'PODGLĄD'@ ?},,'grpremreal',,,,,'normal');

   _after_refresh:="
      _env:=params_get().env;
      _grayed:=':';
      {? _env.edit=0
      || _grayed:='DPUZ'+_grayed+'DZ'
      ?};
      PROJ2FAP.actions_grayed('WRR_PRJZ',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,PROJ2FAP,'WRR_PRJZ',,_after_refresh,,,,,,,,'maximized');
   PROJ2FAP.win_fml('WRR_PRJZ',,'IL',,'SUM_FORMAT',"'out_prec='+$ST.DOKL");
   PROJ2FAP.win_fml('WRR_PRJZ',,'W',,'SUM_FORMAT',"'out_prec=2'");

   _tab.win_sel(_grp);
   PROJ2FAP.index('REM_ZGL'); PROJ2FAP.prefix('N',REM_ZGL.ref());
   _tab.select();

   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

?};
REM_ZGL.cntx_pop();
''


\action_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Legenda' w oknie zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
{? cur_win(1,1)='EWER'
|| exec('legenda','color','REM_ZGL#02')
|| exec('legenda','color','REM_ZGL#01')
?};
~~


\rem_kato_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Walidacja rekordu REM_KATO
::   WE: _a - INTEGER - 0 - dołącz, 1 - popraw
::   WY: '' lub pole do którego wrócić
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_mode:=_a;

_result:=__CHK.record(REM_KATO,,'USERS');
{? _result=''
|| {? __CHK.index(REM_KATO,_mode)<>''
   || _result:='USERS'
   ?}
?};
_result


\select_czynnosci
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Selekcja czynności dla realizacji
::   WE: [_a] - REM_ZGL.ref lub bieżący rekord
::       [_b] - INTEGER - 0/[1] - czy edycja może być dostępna (w zależności od statusu)
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(REM_ZGL.ref())
|| _ref:=_a
?};

_edit:=1;
{? var_pres('_b')=type_of(0)
|| _edit:=_b
?};

_result:=0;
_can_continue:=1;

REM_ZGL.cntx_psh();
{? _ref<>null()
|| REM_ZGL.prefix();
   {? REM_ZGL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _env:=obj_new('edit');
   _env.edit:=0;
   params_set('env',_env);

   {? _edit>0
   || {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || _env.edit:=1
      || _env.edit:=0
      ?}
   ?};

:: Ustawienia
   POMOC.RODZ:='T';
   ZAKR.MATU:='T';

   {? _env.edit
   || _env.edit:=exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,1,'Zgłoszenie jest redagowane'@)
   ?};

:: Zasadnicze działanie - selekcja
   _tab:=REM_CZYU;
   _grp:=_tab.grp_make('Czynności do realizacji zgłoszenia'@+{? _env.edit || '' || ' — '+'PODGLĄD'@ ?},,'grpremreal',,,,,'normal');

   _after_refresh:="
      _env:=params_get().env;
      _grayed:='';
      _default:='';
      {? _env.edit=0
      || _grayed:='DPUZWY:DZ'
      || {? REM_CZYU.sel_size()=0
         || {? REM_CZYU.WYK='T'
            || _grayed:='UW';
               _default:='Y'
            || _grayed:='Y';
               _default:='W'
            ?}
         || _grayed:=''
         ?}
      ?};
      REM_CZYU.actions('WER',,_default+':D',1);
      REM_CZYU.actions_grayed('WER',_grayed);
      ~~
   ";
   _tab.grp_sel(_grp,REM_CZYU,'WER',,_after_refresh,,,,,,,,'maximized');

   _tab.win_sel(_grp);
   REM_CZYU.index('NR'); REM_CZYU.prefix(REM_ZGL.ref());
   REM_CZYU.win_edit('RED');
::   REM_CZYU.win_sel('WER');
   REM_CZYN.win_dict('WER');
:: Renumeracja rekordow za pomoca d'n'd
   REM_CZYU.dnd_sel('WER',,'records.REM_CZYU',"exec('renum','zasoby',REM_CZYU)");


   _tab.select();

   exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

?};
REM_ZGL.cntx_pop();
''


\rem_czyu_move
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Akcja Przesuń
::   WE: _a - STRING - kierunek przesuwania: 'U','D','N'
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_dir:='N';
{? var_pres('_a')=type_of('')
|| _dir:=_a
?};
exec('zmien_lpa','#dragdrop','NR','NR',,,_dir);
~~


\kalendarz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.42]
:: OPIS: Przycisk 'Kalendarz' w okienku redagowania REM_ZGL podczas weryfikacji
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_owner:=~~;
exec('__KAL','object');
TWRKPLC.cntx_psh();
TWRKZBR.cntx_psh();
REM_ZAS.cntx_psh();
{? REM_ZGL.REM_ZAS<>null()
||
   {? REM_ZGL.REM_ZAS().TWRKPLC<>null()
   || REM_ZGL.REM_ZAS().TWRKPLC();
      _owner:=TWRKPLC
   |? REM_ZGL.REM_ZAS().TWRKZBR<>null()
   || REM_ZGL.REM_ZAS().TWRKZBR();
      _owner:=TWRKZBR
   ?}
?};
{? type_of(_owner)>0
|| exec('start','kal_mies',_owner,'01')

|| FUN.emsg('Zgłoszenie remontowe nie dotyczy zasobu z kalendarzem.'@)
?};
REM_ZAS.cntx_pop();
TWRKPLC.cntx_pop();
TWRKZBR.cntx_pop();
''

\rem_zgl_word
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wydruk zgłoszenia remontowego do WORD
::----------------------------------------------------------------------------------------------------------------------
{? REM_ZGL.REM_ZAS<>null()
|| REM_ZGL.REM_ZAS()
|| REM_ZAS.seek(,,,1)
?};

params_exec('generuj','szablon_zws','TRE_ZGL_REMONTOWE',$REM_ZGL.ref());
~~


\edokum_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Aktualizuje statusy na dokumencie obiegowym (dla zgłoszeń pochodzących z portalu)
::   WE: _a - REM_ZGL.ref()
::       [_b] - NUMBER - wywoływana po akcji Wycofaj [0] - Nie, 1 - Tak
::       [_c] - STRING - status zgłoszenia przed wycofaniem ( dla _b=1)
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_wyc:={? var_press('_b')=type_of(0) || _b || 0 ?};
_from:={? var_press('_c')=type_of('') || _c || '' ?};
_add_wer:=0;
_add_revoke:=0;
_add_close:=0;
_del:=0;

REM_ZGL.cntx_psh();
REM_ZGL.clear();
{? REM_ZGL.seek(_ref) & REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
|| _edokum:=REM_ZGL.REDOKUM;
   _stat:=REM_ZGL.STAT_REJ;
   EDOKUM.cntx_psh();
   EDOKUM.use(ref_name(_edokum));
   EDOKUM.prefix();
   {? EDOKUM.seek(_edokum)
   ||
::    Zmiana statusu EDOKUMa
      _stat_before:=EDOKUM.STATUS;
      {? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
      || EDOKUM.STATUS:='S'
      |? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
      || {? REM_ZGL.WERYFIK='T'
         || EDOKUM.STATUS:='Y'
         || EDOKUM.STATUS:='D'
         ?}
      |? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia')
      || EDOKUM.STATUS:='E'
      ?};
::      {? _stat_before<>EDOKUM.STATUS
::      || EDOKUM.put(1)
::      ?};
      EDOKUM.put(,1);

      {? _wyc>0
      ||
::       Ustalam czy do ścieżki akceptacji dołączyć informacje o wycofaniu
         {? _from=exec('status_closed','remonty_zgloszenia')
         || _add_revoke:=1
         ?};
::       Ustalam czy do ścieżki akceptacji dołączyć rekord o rozpoczęciu weryfikacji
         _add_wer:=(_stat=exec('status_new','remonty_zgloszenia') & _from<>exec('status_ended','remonty_zgloszenia'))
                   | _stat=exec('status_ended','remonty_zgloszenia')
      ?};

::    Aktualizuje statusy w ścieżce akceptacji
      EDOKOS.cntx_psh();
      {? ~(_wyc>0 & _from=exec('status_ended','remonty_zgloszenia'))
      || EDOKOS.use('skid_y'+(EDOKUM.name()+2));
         EDOKOS.index('SZUK12');
         {?  _wyc>0
         || {? _from=exec('status_completed','remonty_zgloszenia') |
               _from=exec('status_verified','remonty_zgloszenia') & REM_ZGL.WERYFIK='N'
            || EDOKOS.prefix(EDOKUM.ref(),'E','N')
            || EDOKOS.prefix(EDOKUM.ref(),'Y','N')
            ?}
         || {? _stat=exec('status_closed','remonty_zgloszenia')
            || EDOKOS.prefix(EDOKUM.ref(),'E','N')
            || EDOKOS.prefix(EDOKUM.ref(),'Y','N')
            ?}
         ?};
         {? EDOKOS.first()
         || EDOKOS.prefix();
            {? _wyc>0
            || _del:=1
::               EDOKOS.STATUS:='W'
            || {? _stat=exec('status_verified','remonty_zgloszenia')
               || {? REM_ZGL.WERYFIK='T'
                  || EDOKOS.STATUS:='T'
                  || EDOKOS.STATUS:='O'
                  ?}
               |? _stat=exec('status_closed','remonty_zgloszenia')
               || EDOKOS.STATUS:='E'
               || EDOKOS.STATUS:='T'
               ?}
            ?};
            EDOKOS.DATA:=date();
            EDOKOS.TIME:=time();
            EDOKOS.USERS:=OPERATOR.USER;
            {? _del>0
            || EDOKOS.del();
               _add_revoke:=1
            || EDOKOS.put()
            ?}
         ||
::          Usuwa zapis niezakończonej ścieżki akceptacji (przy wcześniejszym zamykaniu zgłoszenia)
            EDOKOS.index('DISP'); EDOKOS.prefix('S',EDOKUM.ref(),);
            {? EDOKOS.last() & EDOKOS.STATUS='N'
            || EDOKOS.del();
::             Ustalam czy do ścieżki akceptacji dołączyć informacje o zakończeniu
               {? _stat=exec('status_closed','remonty_zgloszenia')
               || _add_close:=1
               ?}
            ?}
         ?}
      ?};
::    Dodaję nowy rekord do ścieżki akceptacji
      {? _add_revoke>0
      || exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),OPERATOR.USER,'P',,'S','Wycofanie wniosku'@,'T')
      ?};
      {? _add_wer>0
      || exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),null(),'Y',,'S','Weryfikowany'@,'N')
      |? _stat=exec('status_verified','remonty_zgloszenia') & REM_ZGL.WERYFIK='T'
      || exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),null(),'Y',,'S','Realizacja wniosku'@,'N')
      |? _stat=exec('status_completed','remonty_zgloszenia') |
        _stat=exec('status_verified','remonty_zgloszenia') & REM_ZGL.WERYFIK='N'
      || exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),null(),'E',,'S','Zamykanie wniosku'@,'N')
      ?};
::      {? _stat_before<>EDOKUM.STATUS
::      || exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),OPERATOR.USER,EDOKUM.STATUS,,'P')
::      ?};
      EDOKOS.cntx_pop()
   ?};
   EDOKUM.cntx_pop()
?};
REM_ZGL.cntx_pop();
~~


\rem_zgl_show_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Wyświetla powiązaną z danym zgłoszeniem remontowym reklamację (działa na aktualnym rekordzie tabeli REM_ZGL)
::----------------------------------------------------------------------------------------------------------------------
_ref:=REM_ZGL.RREK;
{? _ref<>''
|| REK_N.cntx_psh();
   REK_N.use(ref_name(_ref));
   REK_N.clear();
   {? REK_N.seek(_ref)
   || {? REK_N.STAT_REJ='X'
      || REK_N.win_edit('REDX')
      |? REK_N.STAT_REJ='T'
      || REK_N.win_edit('REDR')
      || REK_N.win_edit('RED')
      ?};
      exec('rek_n_set_zmienne','reklamacje',1);
      REK_N.hdr_edit(' — '+'źródło generowania zgłoszenia'@);
      REK_N.display()
   || FUN.info('Nie odnaleziono powiązanej ze zgłoszeniem reklamacji.'@)
   ?};
   REK_N.cntx_pop()
|| FUN.info('Dane zgłoszenie remontowe nie jest powiązane z reklamacją.'@)
?};
~~


\rem_zgl_czy_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Sprawdza, czy dane zgłoszenie remontowe posiada zgłoszenie pochodzne
::      (czy do zgłoszenia remontowego zostało wygenerowane zgłoszenie powiązane).
::   WE: [_a] - uidref zgłoszenia, jak nie podany to sprawdzany rekord bieżący
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_uidref:={? var_press('_a')=type_of('str') || _a || REM_ZGL.uidref() ?};
REM_ZGL.cntx_psh();
REM_ZGL.index('ZGL_NAD');
REM_ZGL.prefix(_uidref);
{? REM_ZGL.first()
|| _res:=1
?};
REM_ZGL.cntx_pop();
_res


\rem_zgl_show_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Wyświetla strukturę zgłoszeń powiązanych dla podanego zgłoszenia remontowego
::   WE: [_a] - REM_ZGL.ref(), jak nie podany to sprawdzany rekord bieżący
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_ref:={? var_press('_a')=type_of('str') || _a || REM_ZGL.ref() ?};

_env:={? type_of(params_get)<>type_of(~~) & var_press('env_rem_zgl',params_get());0
      || params_get().env_rem_zgl
      || exec('env','remonty_zgloszenia',1)
      ?};

_tab:=_env.TAB_POW;
_tab.erase();
REM_ZGL.cntx_psh();
REM_ZGL.clear();
{? REM_ZGL.seek(_ref)
|| {? REM_ZGL.ZGL_TOP<>'' | exec('rem_zgl_czy_pow','remonty_zgloszenia')
   ||
::    Uzupełnienie tabeli powiązań zaczynając od zgłoszenia nadrzędnego znajdującego się na najwyższym poziomie
      _top:={? REM_ZGL.ZGL_TOP<>''
            || exec('FindAndGet','#table',REM_ZGL,REM_ZGL.ZGL_TOP,,,null())
            || REM_ZGL.ref()
            ?};
      {? _top<>null()
      || exec('fill_tab_pow','remonty_zgloszenia',_top,_tab);
         _rem_zgl:=REMONTY.REM_ZGL;
         REMONTY.REM_ZGL:=REM_ZGL.ref();
         _tab.find_tab(,'REF',,'=',$REM_ZGL.ref());
         _tab.select(,1);
         REMONTY.REM_ZGL:=_rem_zgl
      || FUN.info('Nie udało się znaleźć zgłoszenia nadrzędnego na najwyższym poziomie.'@)
      ?}
   || FUN.info('Zgłoszenie %1 nie jest powiązane z innymi zgłoszeniami.'@[REM_ZGL.SYM])
   ?}
?};
REM_ZGL.cntx_pop();
~~


\fill_tab_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Tworzy strukturę powiązanych zgłoszeń remontowych
::   WE: _a - REM_ZGL.ref(), aktualnie przetwarzane zgłoszenie
::       _b - tabela struktury powiązań (tabela TAB_POW z obiektu środowiska exec('env','remonty_zgloszenia'))
::       [_c] - Lp, nr w hierarchii powiązań zgłoszenia, jeżeli nie podany to wynosi 1 (rozpoczęcie numeracji)
::----------------------------------------------------------------------------------------------------------------------
_ref:=_a;
_tab:=_b;
_lp:={? var_press('_c')=type_of(0) || _c || 1 ?};

REM_ZGL.cntx_psh();
REM_ZGL.clear();
{? REM_ZGL.seek(_ref)
||
:: Dodanie wpisu do tabeli tymczasowej
   REM_KATG.cntx_psh();
   REM_ZAS.cntx_psh();
   _tab.LP:=_lp;
   _tab.SYM:=REM_ZGL.SYM;
   _tab.STAT_REJ:=REM_ZGL.STAT_REJ;
   _tab.TYTUL:=REM_ZGL.TYTUL;
   _tab.REM_KATG:=REM_ZGL.REM_KATG().SYMBOL;
   _tab.REM_ZAS:={? REM_ZGL.REM_ZAS<>null() || REM_ZGL.REM_ZAS().SYMBOL || '' ?};
   _tab.REF:=$REM_ZGL.ref();
   _tab.add();
   REM_ZAS.cntx_pop();
   REM_KATG.cntx_pop();
:: Sprawdzenie, czy do danego zgłoszenie nie zostało wygenerowane kolejne zgłoszenie powiązane
   REM_ZGL.cntx_psh();
   REM_ZGL.index('ZGL_NAD');
   REM_ZGL.prefix(REM_ZGL.uidref());
   {? REM_ZGL.first()
   ||
::    !!!REKURENCJA!!!
      exec('fill_tab_pow','remonty_zgloszenia',REM_ZGL.ref(),_tab,_lp+1)
   ?};
   REM_ZGL.cntx_pop()
?};
REM_ZGL.cntx_pop();
~~


\ftab_add_uid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Uzupełnia tabelę pasujących refów zgłoszeń remontowych podczas filtrowania zgłoszeń dla aktualnego pracownika
::       (zakładki Moje..)
::   WE: _a - tabela za refami, którą uzupełniać
::       _b - UID czynności
::       _c - status zgłoszeń
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_uid:=_b;
_obj:=obj_new('status');
_obj.status:=_c;
B_KEYREF.cntx_psh(); BI_TODO.cntx_psh();
B_KEYREF.index('UID_REF'); BI_TODO.index('UNIQUE');
B_KEYREF.prefix(_uid);
{? B_KEYREF.first()
|| {!
   |? BI_TODO.prefix(B_KEYREF.BI_PREL,OPERATOR.USER);
      {? BI_TODO.first()
      || _tab.REF:=exec('FindAndGet','#table',REM_ZGL,B_KEYREF.KEY_REF,,
                      "{? STAT_REJ=_b.status || $ref() || '' ?}",'',_obj
                   );
         {? _tab.REF<>'' || _tab.add() ?}
      ?};
      B_KEYREF.next()
   !}
?};
B_KEYREF.cntx_pop(); BI_TODO.cntx_pop();
~~


\ftab_add_usr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Uzupełnia tabelę pasujących refów zgłoszeń remontowych podczas filtrowania zgłoszeń dla aktualnego pracownika
::       (zakładki Moje..)
::   WE: _a - tabela za refami, którą uzupełniać
::       _b - indeks tabeli REM_ZGL, dla którego sprawdzać użytkownika
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_ndx:=_b;
REM_ZGL.cntx_psh();
REM_ZGL.index(_ndx);
REM_ZGL.prefix(OPERATOR.USER);
{? REM_ZGL.first()
|| {!
   |? _tab.REF:=$REM_ZGL.ref();
      _tab.add();
      REM_ZGL.next()
   !}
?};
REM_ZGL.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:35 82352f3277108a5f7666e450bc2ff4bdab5a294da00cfc5b34145cf29b9f72f99229880a35cb3c4e2ccb547543f523edf013374730544f8097848a8374413d67347da2b36a1cf5ac6eb31989caeb963e77256df944f27580f174a7a26ce837c765afbf81b69f1241bfb42564e9b83bb4bbbb7c6c1d0da362f538304f22dad31e
