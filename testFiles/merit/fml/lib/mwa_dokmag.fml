:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_dokmag.fml
:: Utworzony: 15.10.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły do obsługi dokumentów magazynowych przez MacroWebAPI
::======================================================================================================================


\serialize_dokmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Serializuje dokument/dokumenty magazynowe
::       Kontekst wywołania: ustawiona dziedzina lub bufor tabeli ND
::   WE: _a - buffer - czy wywołanie dla bufora tabeli (1), czy dla całej dziedziny (0)
::       _b - JSON z błędami/informacjami dodatkowymi
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_args:=params_get();
_lib:=exec('lib','__mwa');
::_response:=_lib.Response.open('c:\\!\\response.xml');
_response:=_lib.Response.open();
_lib.Response.begin(_response);

:: status:
_response.fwrite('\n<%1:status>OK</%1:status>\n'[_args.OUTPREF]);

:: data: z tabeli dokumentów i pozycji
_lib.Response.getTableType.asString(_response,'data','ND',,_a);

:: result: z JSON do XML
{? var_pres('_b')=type_of('') || _json:=_b || _json:='{}' ?};
json_tparse(_json).json_tconvert(_response,,,,'result',_args.OUTPREF,,'noheader=1,nodata=1,indentation=1');

_lib.Response.end(_response);
_response


\pozycje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Serializuje pozycje dokumentu magazynowego (wołane dla elementu DK w typie ND)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_lib:=exec('lib','__mwa');
DK.cntx_psh();
DK.index('DOKMAG');
DK.prefix(ND.ref());
_lib.Response.getTableType.asString(params_get().FILE,_a,'DK');
DK.cntx_pop();
return('')


\ID_sym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera zewnętrzny symbol dokumentu przechowywany w dodatkowych strukturach
::----------------------------------------------------------------------------------------------------------------------
_id_sym:='';

_id_tab:=exec('get_id','#sync_id','MWA_ND_SYM',ND.uidref());

{? type_of(_id_tab)>0
|| {? _id_tab.first()
   || _id_sym:=_id_tab.ID
   ?}
?};

xml_value(_id_sym)


\read_dokmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Odczytuje dokumenty magazynowe - implementacja metody 'List'
::       Odczytywane są dokumenty z aktualnego okresu (roku) wg bieżącej daty
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_oddz:=exec('get_option','mwapi',_par,'Oddz').value;
{? _oddz='' || _oddz:='c' ?};
_typ:=exec('get_option','mwapi',_par,'Typ').value;
_mag:=exec('get_option','mwapi',_par,'Mag').value;
_rok:=#exec('get_option','mwapi',_par,'Rok').value;
{? _rok=0 || _rok:=date()~1 ?};

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

{? exec('authorized','mwa_dokmag',_par) & exec('chk_oddz','mwapi',_oddz)
||
   __PARSES.setVal('OddzialLogProd',_oddz);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=_rok;
   _args.AM:=1;
   _set_okres:=__PARSES.setVal('OkresRok',_args);
   __PARSES.setEnv('LMG_MAG');

   {? _set_okres
   || ND.cntx_psh();
      {? _typ<>'' & _mag=''
      || _typydok:=exec('FindInSet','#table','TYPYDOK','TYP',_typ,,,1);
         ND.index('CONTROL');
         ND.prefix(_typydok)
      |? _typ<>'' & _mag<>''
      || _typydok:=exec('FindInSet','#table','TYPYDOK','TYP',_typ,,,1);
         _magazyn:=exec('FindInSet','#table','MG','MAGAZYNY',_mag,,,1);
         ND.index('NAGNUM');
         ND.prefix(_magazyn,_typydok)
      |? _mag<>''
      || _magazyn:=exec('FindInSet','#table','MG','MAGAZYNY',_mag,,,1);
         ND.index('NAGNUM');
         ND.prefix(_magazyn)
      || ND.index('NAGDOK');
         ND.prefix()
      ?};
      _resp:=_wsenv.to_json();
      _result:=params_exec('serialize_dokmag','mwa_dokmag',0,_resp);
      ND.cntx_pop()
   || _msg:='Nie udało się ustawić parametrów pracy dla roku %1.'@[$_rok];
      mwa_status(400,_msg);
      _wsenv.add_error(_msg);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?}
||
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\read_dokmag_uidref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Odczytuje dokument magazynowy - implementacja metody 'Get'
::       Odczytywane jest dokument wg parametru 'uidref'
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_uidref:=exec('get_option','mwapi',_par,'uidref').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

{? +_uidref<>48 | type_of(ref_tab(_uidref))<0
|| _msg:='Niepoprawna wartość parametru \'%1\'.'@['uidref'];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? exec('FindAndGet','#table',ND,_uidref,,"ref()",null())=null()
|| _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
   mwa_status(204,_msg);
   _wsenv.add_error(_msg);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)

|? exec('authorized','mwa_dokmag',_par)
||
:: Ustalenie kontekstu rekordu
   _oddz:=exec('FindAndGet','#table',ND,_uidref,,"ND.ODDZ",'');
   _rok:=exec('FindAndGet','#table',ND,_uidref,,"ND.AR",date()~1);
   _miesiac:=exec('FindAndGet','#table',ND,_uidref,,"ND.AM",date()~2);

   {? exec('chk_oddz','mwapi',_oddz)
   ||
      __PARSES.setVal('OddzialLogProd',_oddz);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=_rok;
      _args.AM:=_miesiac;
      _set_okres:=__PARSES.setVal('OkresRok',_args);
      __PARSES.setEnv('LMG_MAG');

      {? _set_okres
      || ND.cntx_psh();
         ND.prefix();
         {? ND.seek(_uidref)
         || _resp:=_wsenv.to_json();
            _result:=params_exec('serialize_dokmag','mwa_dokmag',1,_resp)
         || _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
            mwa_status(204,_msg);
            _wsenv.add_error(_msg);
            _resp:=_wsenv.to_json();
            _result:=exec('serialize_res','mwapi',_par,_resp)
         ?};
         ND.cntx_pop()
      || _msg:='Nie udało się ustawić parametrów pracy dla roku %1.'@[$_rok];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg);
         _resp:=_wsenv.to_json();
         _result:=exec('serialize_res','mwapi',_par,_resp)
      ?}
   || _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?}
?};

_result


\create_dokmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dodaje dokument magazynowy - implementacja metody 'Add'
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_oddz:=exec('get_option','mwapi',_par,'Oddz').value;

:: Ustala zawartość pól nagłówka dokumentu i pozycji (zapis do tablic buforowych)
_buffers:=exec('set_buffers','mwa_dokmag',_par.DATA,_par.METHOD);

:: Uzupełnia pola w tablicy buforowej
exec('update_buffers','mwa_dokmag',_buffers,_oddz);

:: Ustalenie oddziału, bo dopuszczamy możliwość nie podania
{? exec('chk_oddz','mwapi',_buffers.ND.ODDZ)
|| _oddz:=_buffers.ND.ODDZ;

:: ustalenie magazynu i innych ważnych elementów dokumentu
   ~~
?};

{? ~_wsenv.has_errors()
||
   {? exec('create_chk','mwa_dokmag',_buffers)
   ||
::    parametry pracy dla czynności
      __PARSES.setVal('OddzialLogProd',_buffers.ND.ODDZ);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=_buffers.ND.D~1;
      _args.AM:=_buffers.ND.D~2;
      __PARSES.setVal('OkresRok',_args);
      obj_del(_args);

      BEER.TYPYDOK:=_buffers.ND.TYP;
      _act_uid:=exec('nd_dolacz_act_uid','magdok_nag',BEER.TYPYDOK().P,BEER.TYPYDOK().KOOP);

      {? _act_uid='LMG_MAG_DAPZ'
      ||
::       uruchomienie czynności, czynność jest kończona
         _args:=exec('mp_run_a','#b__box');
         _args.ACT_UID:=_act_uid;
         _args.AKCJA:='DołączMWA';
         _args.PROC_START:='T';
         _args.QUIET:='T';
         _context:=obj_new('BUFFERS'); _context.BUFFERS:=_buffers;
         _args.CONTEXT:=_context;
         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TYPYDOK',BEER.TYPYDOK);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'RODZAJ','P');
         exec('mp_run','#b__box',_args);

::       uzupełnienie identyfikatorów "portalowych"
         {? _wsenv.IDADD<>''
         || ND.index('IDADD');
            ND.prefix(_wsenv.IDADD);
            {? ND.first()
            || exec('add_id','#sync_id','MWA_ND_SYM',ND.uidref(),_context.BUFFERS.ND.ID_sym)
            ?}
         ?};
         ~~
      || _msg:='Obługiwane jest tylko dołączanie dokumentów przychodowych nie dotyczących kooperacji.'@;
         mwa_status(400,_msg);
         _wsenv.add_error(_msg)
      ?}
   ?}
?};

{? ~_wsenv.has_errors() & _wsenv.IDADD<>''
||
   mwa_status(201);
   ND.index('IDADD');
   ND.prefix(_wsenv.IDADD);
   _resp:=_wsenv.to_json();
   _result:=params_exec('serialize_dokmag','mwa_dokmag',0,_resp)
||
   mwa_status(400);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};

_result


\delete_dokmag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Usuwa dokument magazynowy - implementacja metody 'Delete'
::       Usuwany jest dokument wg parametru 'uidref'
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_uidref:=exec('get_option','mwapi',_par,'uidref').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

{? +_uidref<>48 | type_of(ref_tab(_uidref))<0
|| _msg:='Niepoprawna wartość parametru \'%1\'.'@['uidref'];
   mwa_status(400,_msg);
   _wsenv.add_error(_msg)

|? exec('FindAndGet','#table',ND,_uidref,,"ref()",null())=null()
|| _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
   mwa_status(204,_msg);
   _wsenv.add_error(_msg)

||
:: Ustalenie kontekstu rekordu
   _oddz:=exec('FindAndGet','#table',ND,_uidref,,"ND.ODDZ",'');
   _rok:=exec('FindAndGet','#table',ND,_uidref,,"ND.D~1",date()~1);
   _miesiac:=exec('FindAndGet','#table',ND,_uidref,,"ND.D~2",date()~2);

   {? exec('chk_oddz','mwapi',_oddz)
   ||
      __PARSES.setVal('OddzialLogProd',_oddz);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=_rok;
      _args.AM:=_miesiac;
      _set_okres:=__PARSES.setVal('OkresRok',_args);
      __PARSES.setEnv('LMG_MAG');
      obj_del(_args);

      {? _set_okres
      ||
         BEER.TYPYDOK:=exec('FindAndGet','#table',ND,_uidref,,"ND.TYP",null());
         _act_uid:=exec('nd_dolacz_act_uid','magdok_nag',BEER.TYPYDOK().P,BEER.TYPYDOK().KOOP);

         {? _act_uid='LMG_MAG_DAPZ'
         ||
            ND.cntx_psh();
            ND.prefix();
            {? ND.seek(_uidref)
            ||
::             uruchomienie czynności, czynność jest kończona
               _args:=exec('mp_run_a','#b__box');
               _args.ACT_UID:=_act_uid;
               _args.AKCJA:='UsuńMWA';
               _args.PROC_START:='N';
               _args.QUIET:='T';
               _args.UIDREF:=ND.uidref();
               _args.CONTEXT:=obj_new('RESULT'); _args.CONTEXT.RESULT:=0;
               exec('mp_run','#b__box',_args);
               {? _args.CONTEXT.RESULT=0
               || _msg:='Nie usunięto dokumentu %1.'@[ND.SYM];
                  mwa_status(400,_msg);
                  _wsenv.add_error(_msg)
               ?}

            || _msg:='Nie odnaleziono rekordu o identyfikatorze %1.'@[_uidref];
               mwa_status(204,_msg);
               _wsenv.add_error(_msg)
            ?};
            ND.cntx_pop()
         || _msg:='Obługiwane jest tylko usuwanie dokumentów przychodowych nie dotyczących kooperacji.'@;
            mwa_status(400,_msg);
            _wsenv.add_error(_msg)
         ?}
      || _msg:='Nie udało się ustawić parametrów pracy dla roku %1.'@[$_rok];
         mwa_status(400,_msg);
         _wsenv.add_error(_msg)
      ?}
   ?}
?};

_resp:=_wsenv.to_json();
_result:=exec('serialize_res','mwapi',_par,_resp,~_wsenv.has_errors());

_result


\set_buffers
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Ustala zawartość bufora nagłówka i tablicy buforów pozycji zamówienia (funkcja dedykowana)
::   WE: _a - [FILE] lub [TEXT] zawiera analizowany XML
::       _b - request method
::   WY: obj_new('ND','POZ') - bufor nagłówka i tablica buforów pozycji
::----------------------------------------------------------------------------------------------------------------------
_xml:=_a;
_method:=_b;
_buffers:=obj_new('ND','POZ');
_buffers.ND:=exec('ND','buffer1',"'Typ_T','Mag_SYM','Kh_KOD','ID_sym','Kh_odb_KOD'");
_buffers.ND.blank();
_buffers.ND.Typ_T:=_buffers.ND.Mag_SYM:=_buffers.ND.Kh_KOD:=_buffers.ND.ID_sym:=_buffers.ND.Kh_odb_KOD:=~~;
::_buffers.ND.UW:='';

_tab:=xml_tparse(_xml);

:: Podgląd drzewka - do włączenia dla debugowania
::_wer:=_tab.mk_sel(,'P',1,'qwerty',,,,1);
::_tab.win_sel(_wer);
::_tab.select();

{? _tab.find_tab(,'NAME',,'=',_method+'Request')
||
:: Pętla po zawartości parametru 'Dokmag'
   {? _tab.find_tab(,'NAME',,'=','Dokmag')
   || _node:=_tab.ref();
      _tab.prefix(_node);
      _size:=_tab.size();
      {? _tab.first()
      || {!
         |?
::          Pola tabeli ND (nagłówek dokumentu)
            {? _tab.NAME<>'DK'
            || _size-=1;
               exec('set_field','mwapi',_tab,ND,_buffers.ND)
            ?};
            _tab.next()
         !}
      ?};

::    Pozycje
      {? _size>0
      || _buffers.POZ:=obj_new(_size); _it:=0;
         _tab.prefix(_node);
         {? _tab.first()
         || {!
            |? {? _tab.NAME='DK'
               || _it+=1;
                  _buffers.POZ[_it]:=exec('DK','buffer1',"'M_KTM','J2_KOD'");
                  _buffers.POZ[_it].blank();
                  _buffers.POZ[_it].M_KTM:=_buffers.POZ[_it].J2_KOD:=~~;
                  _tab.cntx_psh();
                  _tab.prefix(_tab.ref());
                  {? _tab.first()
                  || {!
                     |?
::                      Pola tabeli DK (pozycja dokumentu)
                        exec('set_field','mwapi',_tab,DK,_buffers.POZ[_it]);
                        _tab.next()
                     !}
                  ?};
                  _tab.cntx_pop()
               ?};
               _tab.next()
            !}
         ?}
      || _buffers.POZ:=~~
      ?}
   ?}
?};
_buffers


\update_buffers
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Uzupełnia pola w tablicy buforowej
::   WE: _a - _buffers
::       _c - Oddz
::----------------------------------------------------------------------------------------------------------------------
_buffers:=_a;
_oddz:=_b;

_wsenv:=exec('wsenv','#mwapi');

:: Uzupełnienie danych w tablicy buforowej - nagłówek
{? var_pres('Typ_T',_buffers.ND)=type_of('')
|| _buffers.ND.TYP:=exec('FindInSet','#table','TYPYDOK','TYP',_buffers.ND.Typ_T,,,1)
?};
{? var_pres('Mag_SYM',_buffers.ND)=type_of('')
|| _buffers.ND.MAG:=exec('FindInSet','#table','MG','MAGAZYNY',_buffers.ND.Mag_SYM,,,1)
?};
{? var_pres('Kh_KOD',_buffers.ND)=type_of('')
|| _buffers.ND.KH:=exec('FindInSet','#table','KH','KOD',_buffers.ND.Kh_KOD,2,,1)
?};
{? type_of(_buffers.ND.Kh_odb_KOD)=2 & _buffers.ND.Kh_odb_KOD<>'' & _buffers.ND.KH<>null()
||
   _buffers.ND.KH_ODB:=exec('FindInSet','#table','KH_ODB','KH_ODB',_buffers.ND.Kh_odb_KOD,_buffers.ND.KH,,1,,)
?};
_buffers.ND.AR:=_buffers.ND.D~1;
_buffers.ND.AM:=_buffers.ND.D~2;

:: --- Komunikaty kontrolne - można włączyć do debugowania
::_wsenv.add_info('Typ_T:'+_buffers.ND.Typ_T);
::_wsenv.add_info('TYP:'+$_buffers.ND.TYP);
::_wsenv.add_info('Mag_SYM:'+_buffers.ND.Mag_SYM);
::_wsenv.add_info('MAG:'+$_buffers.ND.MAG);
::_wsenv.add_info('D:'+$_buffers.ND.D);
::_wsenv.add_info('Kh_KOD:'+_buffers.ND.Kh_KOD);
::_wsenv.add_info('KH:'+$_buffers.ND.KH);
::_wsenv.add_info('AR:'+$_buffers.ND.AR);
::_wsenv.add_info('AM:'+$_buffers.ND.AM);

:: Uzupełnienie pól w tablicy buforowej - pozycje
{? var_pres('POZ',_buffers)>0
|| {! _it:=1.. obj_len(_buffers.POZ)
   |! _buffers.POZ[_it].M:=exec('FindInSet','#table','M','MATKTM',_buffers.POZ[_it].M_KTM,,,1);
:: --- Komunikaty kontrolne - można włączyć dodebugowania
::   _wsenv.add_info('M_KTM:'+_buffers.POZ[_it].M_KTM);
::   _wsenv.add_info('M:'+$_buffers.POZ[_it].M);
:: Przypisanie jednostek dodatkowych
      {? (_buffers.POZ[_it].WS2=0 | _buffers.POZ[_it].J2_KOD='') & _buffers.POZ[_it].M<> null()
      ||
         _buffers.POZ[_it].WS2:=1;
         _buffers.POZ[_it].J2:=exec('FindAndGet','#table',M,_buffers.POZ[_it].M,,"M.J",'')
      ||
         _buffers.POZ[_it].J2:=
         exec('FindInSet','#table','JM','KOD',_buffers.POZ[_it].J2_KOD,_buffers.POZ[_it].J2_KOD,,1,,)
      ?};
      _buffers.POZ[_it].IL2:=_buffers.POZ[_it].WS2*_buffers.POZ[_it].IL;
      ~~
   !}
?};
~~


\create_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: sprawdzenie poprawności danych
::   WE: _a - buffers
::   WY: [0/1]
::----------------------------------------------------------------------------------------------------------------------
_buffers:=_a;

_wsenv:=exec('wsenv','#mwapi');

_result:=1;

{? var_pres('POZ',_buffers)<=0
|| _wsenv.add_error('Dokument musi mieć conajmniej jedną pozycję.'@);
   _result:=0
?};
{? _buffers.ND.D=date(0,0,0)
|| _wsenv.add_error('Data dokumentu musi być podana.'@);
   _result:=0
?};
{? _buffers.ND.TYP=null()
|| _wsenv.add_error('Musi być podany poprawny typ dokumentu.'@);
   _result:=0
?};
{? _buffers.ND.MAG=null()
|| _wsenv.add_error('Musi być podany poprawny symbol magazynu.'@);
   _result:=0
?};
{? _buffers.ND.TYP<>null()
|| {? exec('FindAndGet','#table',TYPYDOK,_buffers.ND.TYP,,"TYPYDOK.Z='T'",1)
   || {? _buffers.ND.KH=null()
      || _wsenv.add_error('Dokument zewnętrzny — kontrahent wymagany.'@);
         _result:=0
      ?}
   || {? _buffers.ND.KH<>null()
      || _wsenv.add_error('Dokument wewnętrzny — kontrahenta nie należy podawać.'@);
         _result:=0
      ?}
   ?}
?};
{? type_of(_buffers.ND.Kh_odb_KOD)=2 & _buffers.ND.Kh_odb_KOD<>'' & _buffers.ND.KH<>null() & type_of(_buffers.ND.KH_ODB)=0
||
   _wsenv.add_error('Nieprawidłowy kod odbiorcy kontrahenta.'@); _result:=0
?};
{? var_pres('POZ',_buffers)>0
|| {! _it:=1.. obj_len(_buffers.POZ)
   |!
      {? type_of(_buffers.POZ[_it].J2)<>7
      ||
         _wsenv.add_error('Nieprawidłowy kod jednostki dodatkowej.'@); _result:=0
      ?};
      {? _buffers.POZ[_it].WS2<=0
      ||
         _wsenv.add_error('Współczynnik przeliczenia jednostki dodatkowej powinien być większy od 0.'@); _result:=0
      ?}
   !}
?};
_result


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\authorized
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza uprawnienia do odglądania dokumentów magazynowych (w kontekście aktualnego OPERATOR.USER)
::----------------------------------------------------------------------------------------------------------------------
{? exec('authorized','#b__box','LMG_MAG','LMG')
|| 1
|| _msg:='Brak uprawnień do przeglądania dokumentów magazynowych.'@;
   mwa_status(401,_msg);
   _wsenv:=exec('wsenv','#mwapi');
   _wsenv.add_error(_msg);
   0
?}

:Sign Version 2.0 jowisz:1048 2021/04/09 15:26:29 2c14342069d4802457b9558cc526e835553852b8d120fc9e518281cf81d95043b3bb7b26aa000d4fcc2af0a1ff69736cb200765c4c323c48962f029ad32558a3c511111632460ed98d87220a8ff26b8e363a05ed0f68f6001716634270f7d53aa25a2eb7c7f429b2ca0f7fdd6caa55d384b8ea1b8f1e5821937d7e657f2c693d
