:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: personel_alerty.fml
:: Utworzony: 26.11.2019
:: Autor: IS
::======================================================================================================================
:: Zawartość: Formuły pomocnicze przy tworzeniu powiadomień.
::            Plik zawiera formuły powtarzające się w wielu powiadomieniach.
::======================================================================================================================


\desc_od_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła na opis zadania zawierającego conajmniej datę początkową, w formacie:
::       "Zdarzenie dziejące się DATA" lub
::       "Zdarzenie dziejące się DATA i później" lub
::       "Zdarzenie dziejące się w okresie od DATA do DATA"
::       Formuła przyjmuje początkowy ciąg i dopisuje do niego w odpowiedniej formie datę, lub datę początkową,
::       lub daty początkową i końcową. Jeżeli występowały dodatkowe warunki wyboru funkcja na końcu ciągu dopisuje [*]
::   WE: _a [STRING] - nazwa zdarzenia, np. "Wymiary urlopów zmieniające się"
::       _b [OBJ]    - tablica nazwana z parametrami wejściowymi. Część może mieć wartość pustą (void),
::                     ale struktura tablicy musi być zachowana:
::                     OD         [DATA]   - data początkowa
::                    [DO]        [DATA]   - data końcowa
::                    [UD_SCH]    [STRING] - schemat organizacyjny
::                    [UD_SKL]    [STRING] - jednostka organizacyjna
::                    [SQL_FROM]  [STRING] - dodatkowe relacje filtra
::                    [SQL_WHERE] [STRING] - dodatkowy warunek filtra
::                    [FML_TEST]  [STRING] - dodatkowy warunek wyboru
::   WY: _ret [STRING] - opis zadania
::----------------------------------------------------------------------------------------------------------------------
_ret:='';
_d0:=date(0,0,0);
:: Odpowiednia forma zdania w zależności od podanych dat:
{? _b.OD<>~~ & _b.OD<>_d0
|| _ret:=
      {? _b.DO=_d0 | _b.DO=~~
      || '%1 %2 i później'@ [_a,_b.OD$1]
      |? _b.OD=_b.DO
      || '%1 %2'@ [_a,_b.OD$1]
      || '%1 w okresie od %2 do %3'@ [_a,_b.OD$1,_b.DO$1]
      ?}
?};
:: Dopisanie jednostki organizacyjnej (jeżeli jest):
{? _b.UD_SKL<>~~ & _b.UD_SKL<>''
|| _ret+=' %1'[_b.UD_SKL]
?};
:: Dopisanie gwiazdki, jeżeli były założone dodatkowe warunki:
{? (_b.SQL_FROM<>~~ & _b.SQL_FROM<>'') |
   (_b.SQL_WHERE<>~~ & _b.SQL_WHERE<>'') |
   (_b.FML_TEST<>~~ & _b.FML_TEST<>'')
|| _ret+=' [*]'
?};

_ret


\input_chk_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Weryfikacja poprawności parametrów wejściowych. Jeżeli formuła jest wywołana w trybie dialogowych
::       wyświetli okienko edycji z możliwością wprowadzenia poprawnych danych.
::   WE: _a [NUMBER] - czynność bezdialogowa (serwisowa) czy dialogowa  - 1/0
::       _b [OBJ]    - tablica nazwana z parametrami wejściowymi. Parametry mogą mieć wartość pustą (void),
::                     ale struktura tablicy musi być zachowana:
::                    [OD]        [DATA]   - data początkowa
::                    [DO]        [DATA]   - data końcowa
::                    [UD_SCH]    [STRING] - schemat organizacyjny
::                    [UD_SKL]    [STRING] - jednostka organizacyjna
::                    [SQL_FROM]  [STRING] - dodatkowe relacje filtra
::                    [SQL_WHERE] [STRING] - dodatkowy warunek filtra
::                    [FML_TEST]  [STRING] - dodatkowy warunek wyboru
::       _c [STRING] - tytuł tworzonego okienka edycji
::      [_d][OBJ]    - tablica tablic nazwanych z dodatkowymi polami w postaci:
::                     AKR        [STRING] - akronim pola
::                     TYPE       [STRING] - typ pola, np. STRING[20], INTEGER
::                     NAZ        [STRING] - nazwa pola
::                     DESC       [STRING] - opis pola (podpowiedź)
::                     WD         [NUMBER] - szerokość pola
::                     PREC       [NUMBER] - precyzja pola
::      [_e][NUMBER] - Czy data DO z gwiazdką? 0/1, domyślnie 0 - bez gwiazdki
::      [_f][NUMBER] - Czy zawsze w wywołaniu ręcznym wyświetlać okno redakcji parametrów? 0/1, domyślnie 0
::      [_g][NUMBER] - Czy data OD z gwiazdką? 0/1, domyślnie 1 - z gwiazdką (obowiązkowa)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_service:=_a;
_in:=_b;
_title:=_c;
_d0:=date(0,0,0);
_addFlds:={? var_pres('_d')<0 || null || _d ?};
_addFlLen:={? type_of(_addFlds)<>117 || 0 || obj_len(_addFlds) ?};
_doObow:={? var_pres('_e')<0 || 0 || _e ?};
_okRed:={? var_pres('_f')<0 || 0 || _f ?};
_odObow:={? var_pres('_g')<0 || 1 || _g ?};

:: Unifikacja typów parametrów wejściowych.
{? _in.OD=~~ || _in.OD:=_d0 ?};
{? _in.DO=~~ || _in.DO:=_d0 ?};
{? _in.UD_SCH=~~ | _in.UD_SCH='' || _in.UD_SCH:=exec('domyslny','schemat','PODZORG',1).SYMBOL ?};
{? _in.UD_SKL=~~ || _in.UD_SKL:='' ?};
{? _in.SQL_FROM=~~ || _in.SQL_FROM:='' ?};
{? _in.SQL_WHERE=~~ || _in.SQL_WHERE:='' ?};
{? _in.FML_TEST=~~ || _in.FML_TEST:='' ?};

{? _service
:: Czynność uruchomiona w trybie serwisowym. Nieprawidłowe parametry wejściowe uniemożliwiają uruchomienie czynności.
|| {? _odObow & _in.OD=_d0
   || return('Nieprawidłowa wartość parametru wejściowego %1.'@['OD'])
   ?};
:: Sprawdzenie daty do jeśli jest wymagana:
   {? _doObow & _in.DO=_d0
   || return('Nieprawidłowa wartość parametru wejściowego %1.'@['DO'])
   ?};
   {? _in.DO<>_d0 & _in.DO<_in.OD
   || return('Parametr wejściowy %1 [%2] mniejszy niż parametr wejściowy %3 [%4].'@['DO',$_in.DO,'OD',$_in.OD])
   ?}

:: Czynność uruchomiona w trybie ręcznym. Nieprawidłowe parametry wejściowe mogą zostać skorygowane.
|? _okRed | _in.OD=_d0 | (_in.DO<>_d0 & _in.DO<_in.OD)
|| _PAR:='tab_tmp(,'
      '\'OD\',\'DATE\',\'Data początkowa\'@,'
      '\'DO\',\'DATE\',\'Data końcowa\'@,'
      '\'UD_SCH\',\'STRING[8]\',\'Schemat\'@,'
      '\'UD_SKL\',\'STRING[16]\',\'Jednostka organizacyjna\'@';
:: Dołączenie pól dodatkowych do tabeli tymczasowej:
   {! _ii:=1.._addFlLen
   |! _PAR+=',\''+_addFlds[_ii].AKR+'\',\''+_addFlds[_ii].TYPE+'\',\''+_addFlds[_ii].NAZ+'\'@'
   !};
   _PAR+=')';
   _PAR:=($_PAR)();

   _PAR.fld_fml('UD_SCH','F3',"exec('ud_sch_wybierz','schemat','PODZORG',fld()).SYMBOL");
   _PAR.fld_fml('UD_SCH','BEFORE_EDIT',"cur_tab(1,1).UD_SKL=''");
   _PAR.fld_fml('UD_SCH','AFTER_EDIT',
      "  _fld:=fld();
         cur_tab(1,1).efld_opt(cur_win(1,1),'enable=%1' [$(_fld<>'')],,'UD_SKL');
         _ret:=_fld='' | exec('szukaj_ud_sch','schemat','PODZORG',_fld)<>null();
         {? ~_ret || FUN.info('Brak schematu o podanym symbolu.'@) ?};
         _ret
      "
   );
   _PAR.fld_fml('UD_SKL','F3',"exec('ud_def_symbol_f3','schemat','PODZORG',cur_tab(1,1).UD_SCH,'PKD',2)");
   _PAR.fld_fml('UD_SKL','BEFORE_EDIT',"cur_tab(1,1).UD_SCH<>''");
   _PAR.fld_fml('UD_SKL','AFTER_EDIT',"fld()='' | exec('ud_skl_symbol_ae','schemat','PODZORG','PKD',2)<>null()");

   _we:=_PAR.mk_edit(_title,0,'#per_alerty');
   _PAR.win_esep(_we,'Badany okres'@);
   _PAR.win_efld(_we,,'OD',,,,,,,,'Data początkowa badanego okresu'@);
   _PAR.win_efld(_we,,'DO',,,,,,,,'Data końcowa badanego okresu'@);

:: Dołączenie pól dodatkowych do okenka edycji:
   {! _ii:=1.._addFlLen
   |! {? var_pres('CHB',_addFlds[_ii])>0 & _addFlds[_ii].CHB
      || _PAR.win_efld(_we,,_addFlds[_ii].AKR,,,,,,,,_addFlds[_ii].DESC,'check-box','left_label=1' ,"'T'","'N'")
      || _PAR.win_efld(_we,,_addFlds[_ii].AKR,,,_addFlds[_ii].WD,_addFlds[_ii].PREC,,,,_addFlds[_ii].DESC)
      ?}
   !};

   _PAR.win_esep(_we,'Struktura'@);
   _PAR.win_efld(_we,,'UD_SCH',,,16,,,,,'Schemat'@,,'F3_button=1');
   _PAR.win_efld(_we,,'UD_SKL',,,16,,,,,'Symbol jednostki organizacyjnej'@,,'F3_button=1');
   exec('ok_esc','#window',_PAR,_we);
   _PAR.win_edit(_we);

:: Jeśli pole data OD jest obowiązkowe:
   {? _odObow
   || _PAR.efld_opt(_we,'mark=1',,'OD')
   ?};
:: Jeśli pole data DO jest obowiązkowe:
   {? _doObow
   || _PAR.efld_opt(_we,'mark=1',,'DO')
   ?};
   params_set('doOb',_doObow,'odOb',_odObow);

   _PAR.blank();
   _PAR.OD:=_in.OD;
   _PAR.DO:=_in.DO;
   _PAR.UD_SCH:=_in.UD_SCH;
   _PAR.UD_SKL:=_in.UD_SKL;
:: Wypełnienie pól dodatkowych:
   {! _ii:=1.._addFlLen
   |! _akr:=_addFlds[_ii].AKR;
      {? var_pres(_akr,_in)>0 & var_pres(_akr,_PAR)>0 &
         type_of(($('_a.%1' [_addFlds[_ii].AKR]))(_in))=type_of(($('_a.%1' [_addFlds[_ii].AKR]))(_PAR))
      || ($('_a.%1:=_b.%1' [_addFlds[_ii].AKR]))(_PAR,_in)
      ?}
   !};

   {? _PAR.edit("_doObow:=params_get().doOb;
                 _odObow:=params_get().odOb;
                 exec('valid_dates','personel_alerty',_doObow,_odObow)
                ")
   || _in.OD:=_PAR.OD;
      _in.DO:=_PAR.DO;
      _in.UD_SCH:=_PAR.UD_SCH;
      _in.UD_SKL:=_PAR.UD_SKL;
:: Przekazanie wartości z pól dodatkowych:
      {! _ii:=1.._addFlLen
      |! _akr:=_addFlds[_ii].AKR;
         {? ~(var_pres(_akr,_in)<0 | var_pres(_akr,_PAR)<0)
         || ($('_a.%1:=_b.%1' [_addFlds[_ii].AKR]))(_in,_PAR)
         ?}
      !}
   || return('Rezygnacja z redagowania parametrów.'@)
   ?}
?};

''


\valid_dates
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła sprawdzająca poprawność dat pobieranych od użytkownika
::       (w przypadku czynności nie będącej serwisową).
::       Formuła sprawdza wypełnienie pola OD, oraz jeśli wypełniono pole DO, czy podana w nim data nie jest mniejsza
::       niż data OD.
::   WE: [_a][NUMBER] - Czy data DO obowiązkowa? 0/1, domyślnie 0 - nie obowiązkowa
::       [_b][NUMBER] - Czy data OD obowiązkowa? 0/1, domyślnie 1 - obowiązkowa
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_doObow:={? var_pres('_a')<0 || 0 || _a ?};
_odObow:={? var_pres('_b')<0 || 1 || _b ?};
_PAR:=cur_tab(1,1);
:: Sprawdzenie wypełnienia pól:
{? _odObow & (_chk:=__CHK.record(_PAR,,'OD'))<>''
|| return(_chk)
?};
{? _doObow & (_chk:=__CHK.record(_PAR,,'DO'))<>''
|| return(_chk)
?};
:: Porównanie wprowadzonych dat:
{? _PAR.DO<>date(0,0,0) & _PAR.DO<_PAR.OD
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(_PAR,'DO'),MS.name(_PAR,'OD')]);
   return('DO')
?};

''


\emls_w_perm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła zwracająca adresy e-mail użytkowników mających odpowiednią rolę w celu uruchomienia czynności.
::       Formuła przechodzi po tabeli USERS zaprefiksowanej na aktywnych użytkowników.
::       Jeżeli dany użytkownik ma adres e-mail oraz ma rolę pozwalającą na uruchomienie czynności jego adres
::       zostaje dopisany do ciągu adresów e-mail oddzielonych średnikiem. Ostatni średnik ciągu jest usuwany.
::   WE: _a [STRING] - uid czynności
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_list:='';
USERS.cntx_psh();
USERS.index('USR_AKOD');
USERS.prefix('T',);
{? USERS.first()
|| {!
   |? {? USERS.EMAIL<>'' & exec('chk_role','#b__box',USERS.ref(),_a)
      || _list+=USERS.EMAIL+';'
      ?};
      USERS.next()
   !}
?};
USERS.cntx_pop();
{? _list+1=';'
|| _list:=_list-1
?};

_list


\fltr_p_ud_sql
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła zakłada na tabelę P odpowiednie filtry wg. tego co przekazano w parametrach wejściowych.
::       Zakłada się odłożenie kontekstu przed wywołaniem funkcji i przywrócenie go po wykorzystaniu filtra.
::   WE: _a [NUMBER] - czynność bezdialogowa (serwisowa) czy dialogowa  - 1/0
::       _b [OBJ]    - tablica nazwana z parametrami wejściowymi. Struktura tablicy:
::                    [OD]        [DATA]   - data początkowa
::                    [DO]        [DATA]   - data końcowa
::                    UD_SCH      [STRING] - schemat organizacyjny
::                    UD_SKL      [STRING] - jednostka organizacyjna
::                    SQL_FROM    [STRING] - dodatkowe relacje filtra
::                    SQL_WHERE   [STRING] - dodatkowy warunek filtra
::                    [FML_TEST]  [STRING] - dodatkowy warunek wyboru
::       _c [OBJ]    - tablica stringów z dopuszczalnymi formami zatrudnienia
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_service:=_a;
_in:=_b;
_fZwhere:='';

{? var_pres('_c')<>117
|| {? _service
   || _fZwhere:=' and F_ZATR.KOD=\'P\''
   || _fZwhere:='P'
   ?}
|| {? _service
   || {! _ii:=1..obj_len(_c)
      |! {? _ii=1
         || _fZwhere+=' and (F_ZATR.KOD=\''+_c[_ii]+'\''
         || _fZwhere+=' or F_ZATR.KOD=\''+_c[_ii]+'\''
         ?}
      !};
      _fZwhere+=')'
   || {! _ii:=1..obj_len(_c)
      |! {? _ii=1
         || _fZwhere+=_c[_ii]
         || _fZwhere+=','+_c[_ii]
         ?}
      !}
   ?}
?};

P.clear();
_ud_sch:=exec('szukaj_ud_sch','schemat','PODZORG',_in.UD_SCH);
_ud_def:=
   {? _in.UD_SKL=''
   || exec('ud_def_firma','schemat','PODZORG')
   || exec('szukaj_ud_def','schemat',_ud_sch,exec('szukaj_ud_skl','schemat','PODZORG',_in.UD_SKL))
   ?};

{? _service
|| P.f_set(
::    SORT
      'OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',
::     FROM
      'join F_ZATR using("P".F_ZATR,F_ZATR.REFERENCE)'+
      {? _in.SQL_FROM<> '' || ' '+_in.SQL_FROM || '' ?},
::    WHERE
      'P.FIRMA=\''+$exec('ref_firma','ustawienia')+'\''+
      _fZwhere+
      {? _in.UD_SKL<>''
      || ' and P.WYDZIAL in '
            '('
               'select UD_DEF.UD_SKL '
               'from UD_DEF '
               'where UD_DEF.UD_SCH=\''+$_ud_sch+'\' and UD_DEF.SCIEZKA like \''+_ud_def.SCIEZKA+'%\''
            ')'
      || ''
      ?}+
      {? _in.SQL_WHERE<>'' || ' and ('+_in.SQL_WHERE+')' || '' ?}
   )
||
   exec('filtruj_p','schemat','PKD',_ud_def.REF,_fZwhere,'','W',_in.SQL_FROM,_in.SQL_WHERE)
?};

~~


\norm_result
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła pomocnicza do czynności ręcznej (ZWS_SER_VICE) decydująca na podstawie wcześniejszych
::       wejść jaka będzie dalsza czynność - wysłanie maila, wysłanie maila o braku osób, czy brak wysłania maila.
::       Funkcja powstała aby można było decydować na podstawie tego z jakiej gałęzi (usługowej czy ręcznej) proces
::       trafia na bramę rozdzielającą OR.
::       Na podstawie wejść z poprzednich elementów jest generowane jedno wyjście dla bramy rozdzielającej OR.
::   WE:
::   WY: 'END' - koniec, nie wysyłamy maila
::       'MAIL' - wysyłamy mail
::       'EMPTY' - wysyłamy mail, że brak takich osób
::----------------------------------------------------------------------------------------------------------------------
:: p01 - RESULT Service
:: p02 - RESULT User
:: p03 - BODYH Service
:: p04 - BODYH User
_ret:='END';
_in:=params_get().in;

:: Jeżeli serwisowy RESULT == 'OK' i jeżeli mamy coś w serwisowym BODYH
{? _in.p01='OK' & _in.p03<>''
|| _ret:='MAIL'
:: Jeżeli ręczny RESULT == 'OK'
|? _in.p02='OK'
:: i jeżeli ręczny BODYH jest niepusty
|| {? _in.p04<>''
   || _ret:='MAIL'
   || _ret:='EMPTY'
   ?}
?};

_ret


\wym_url_zm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, których wymiar urlopu zmienia się
::       w zadanym okresie, czyli takich których data nabycia urlopu uzupełniającego zawiera się w danym okresie.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate || _b || _d0 ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'LIM_AKT','REAL','Urlop bieżący - dni',
   'URL_DOD','REAL','Urlop uzupełniający - dni',
   'DATA_DOD','DATE','Data nabycia prawa do urlopu uzupełniającego'
);

{? (_in.DO=_d0 | _in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();
   KART_URL.cntx_psh();
   KART_URL.index('PRAC_ROK');
   KART_URL.prefix();

   _rOd:=_in.OD~1;
   _rDo:={? _in.DO~1 || _in.DO~1 || date()~1 ?};

   {!
   |? KART_URL.prefix(P.ref());
      P.OSOBA();
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d) i (czy istnieje kart_url)
      {? _war() & (_in.DO=_d0 | P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date())) & KART_URL.last()
      || _bRok:=_rOd;
::       Przebiegam po latach zawartych w badanym okresie:
         {!
         |? KART_URL.prefix(P.ref(),_bRok);
            {? KART_URL.last()
::             Sprawdzam czy jest urlop uzupełniający i czy jego data nabycia pokrywa się z badanym okresem:
            || {? KART_URL.URL_DOD>0 & KART_URL.DATA_DOD<>_d0 & KART_URL.DATA_DOD>=_in.OD
                  & (_in.DO=_d0 | KART_URL.DATA_DOD<=_in.DO)
               || _TAB.NAZWISKO:=OSOBA.NAZWISKO;
                  _TAB.PIERWSZE:=OSOBA.PIERWSZE;
                  _TAB.PESEL:=OSOBA.PESEL;
                  _TAB.T:=P.T;
                  _TAB.DZA:=P.DZA;
                  _TAB.DZ:=P.DZ;
                  _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
                  _TAB.LIM_AKT:=KART_URL.LIM_AKT;
                  _TAB.URL_DOD:=KART_URL.URL_DOD;
                  _TAB.DATA_DOD:=KART_URL.DATA_DOD;
                  _TAB.add()
               ?}
            ?};
            _bRok+=1;
            _bRok<=_rDo
         !}
      ?};
      P.f_next()
   !};

   KART_URL.cntx_pop();
   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\okr_wyp_zm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, których okres wypowiedzenia zmienia
::       się w zadanym okresie.
::       Formuła przebiegając po filtrowanej tabeli P bada okres wypowiedzenia pracownika w początkowej i końcowej
::       dacie zadanego zakresu. Badanie to odbywa się z pomocą funkcji \oblicz_okr_wyp/personel.fml.
::       Następnie oba zbadane okresy są porównywane. Jeżeli się różnią (pracownikowi zmienił się okres
::       wypowiedzenia w zadanym do zbadania zakresie dat) pracownik trafia do zwracanej tabeli tymczasowej.
::       Formuła dodatkowo znajduje datę zmiany okresu wypowiedzenia dla znalezionego pracownika.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::       [_e] [INTEGER]- Czy obliczać datę zmiany wymiaru okresu wypowiedzenia? 0/1 Domyślnie: 0
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate & _b<>_d0 || _b || date() ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};
_liczDzm:={? var_pres('_e')=type_of(0) || _e || 0 ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'RUM','STRING['+$MS.fld_len(RU,'O')+']','Rodzaj umowy',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'OKR_WYPP','STRING[12]','Okres wypowiedzenia przed zmianą',
   'OKR_WYPN','STRING[12]','Okres wypowiedzenia po zmianie',
   'DATA_ZM','DATE','Data zmiany długości okresu wypowiedzenia (ostatnia)'
);

{? (_in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();

:: Przebiegamy po zafiltrowanej tabeli P:
   {!
   |? P.OSOBA();
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
      {? _war() & (P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date()))
::       Dla pracownika badam okres na początku (lub P.DZA jeśli póżniejsza) i końcu zadanego zakresu:
      || _dataPocz:={? P.DZA<_in.OD || _in.OD || P.DZA ?};
         _okrOld:=exec('oblicz_okr_wyp','personel',P.ref(),_dataPocz);
         _okrNew:=exec('oblicz_okr_wyp','personel',P.ref(),_in.DO);

::       Jeśli te okresy się różnią to znaczy, że była gdzieś zmiana długości okresu wypowiedzenia:
         {? _okrOld.okres<>_okrNew.okres
         || _dataZm:=_d0;
            {? _liczDzm
::             Szukam daty zmiany okresu wypowiedzenia od końca:
            || _dataZm:={? P.DZ=_d0 | P.DZ>_in.DO || _in.DO || P.DZ ?};
               _skok:=(_dataZm-_dataPocz);
               {!
               |? _skok:=(_skok/2);
                  _okrTest:=exec('oblicz_okr_wyp','personel',P.ref(),_dataZm);
::             Jeżeli okres był taki jak finalny to badaj wstecz, a gdy inny to w przód:
                  {? _okrTest.okres=_okrNew.okres
                  || _dataZm-=int(_skok)
                  || _dataZm+=ceil(_skok)
                  ?};
                  obj_del(_okrTest);

                  _skok>1
               !};
               _okrPoprz:=exec('oblicz_okr_wyp','personel',P.ref(),_dataZm-1);
::             Korekta ew. błędnych wiliczeń (np. o dzień):
               {!
               |? _okrPoprz.okres=_okrNew.okres
               |! _dataZm-=1;
                  obj_del(_okrPoprz);
                  _okrPoprz:=exec('oblicz_okr_wyp','personel',P.ref(),_dataZm-1)
               !}
            || _okrPoprz:=_okrOld
            ?};

::          Dodanie pracownika do zwracanej tabeli:
            _TAB.NAZWISKO:=OSOBA.NAZWISKO;
            _TAB.PIERWSZE:=OSOBA.PIERWSZE;
            _TAB.PESEL:=OSOBA.PESEL;
            _TAB.T:=P.T;
            _TAB.DZA:=P.DZA;
            _TAB.DZ:=P.DZ;
            _TAB.RUM:=_okrNew.ru;
            _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
            _TAB.OKR_WYPP:=_okrPoprz.okres;
            _TAB.OKR_WYPN:=_okrNew.okres;
            _TAB.DATA_ZM:=_dataZm;
            _TAB.add();
            obj_del(_okrPoprz)
         ?};
         obj_del(_okrOld);
         obj_del(_okrNew)
      ?};
      P.f_next()
   !};

   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\dzc_kon_wiek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, których najmłodsze dzieci
::       kończą określony parametrem wiek.
::       Formuła przebiegając po filtrowanej tabeli P zakładam odpowiednio filtr na RD (Rodzina) - biorze pod uwagę
::       tylko rodzinę danej Osoby (P.OSOBA) i jedynie "dziecko własne, przysposobione lub dziecko małżonka".
::       Filtr zakłada również sortowanie malejące po dacie urodzenia dziecka, bierze pierwszy rekord (najmłodsze
::       dziecko). Następnie formuła porównuje datę ukończenia wymaganego wieku przez dziecko z datami wejściowymi
::       OD i DO. Jeżeli data ukończenia wymaganego wieku przez dziecko mieści się między datami OD i DO pracownik
::       wraz z wybranymi danymi dziecka jest zapisywany do zwracanej tabeli tymczasowej.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::       [_e] [NUMBER] - Wiek najmłodszego dziecka, którego ukończenie zakwalifikuje pracownika. Domyślnie: 14 (lat).
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate & _b<>_d0 || _b || date() ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};
_wiekGr:={? var_pres('_e')=type_of(1) & _e>0 || _e || 14 ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'DZ_IM','STRING['+$MS.fld_len(RD,'IM')+']','Imię najmłodszego dziecka',
   'DZ_DA','DATE','Data urodzenia',
   'DZ_DUK','DATE','Data ukończenia '+_wiekGr+' lat'
);

{? (_in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();
   RD.cntx_psh();
   RD.prefix();

:: Przebiegamy po zafiltrowanej tabeli P:
   {!
   |? P.OSOBA();
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
      {? _war() & (P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date()))
::       Zakładam filtr na RD (Rodzina) - biorę pod uwagę tylko rodzinę danej Osoby
::       i jedynie "dziecko własne, przysposobione lub dziecko małżonka":
      || RD.f_clear();
         RD.f_set(
            'DA^',
            'join S_ZUS using(RD.STPK, S_ZUS.REFERENCE)',
            'RD.OSOBA=:_a and S_ZUS.RODZAJ=\':_b\' and (S_ZUS.KOD=\':_c\' or S_ZUS.KOD=\':_d\')',P.OSOBA,'R','11','21');

::          Sortowanie było po dacie urodzenia dziecka malejąco - pierwszy rekord to najmłodsze dziecko.
         {? RD.f_first()
::          Data ukończenia przez najmłodsze dziecko wymaganego wieku:
         || _dataUk:=exec('data_uk','personel_alerty',RD.DA,_wiekGr);
::          Jeżeli data ukończenia jest większa niż OD i mniejsza niż DO:
            {? _dataUk>=_in.OD & _dataUk<=_in.DO
::             Dodanie pracownika do zwracanej tabeli:
            || _TAB.NAZWISKO:=OSOBA.NAZWISKO;
               _TAB.PIERWSZE:=OSOBA.PIERWSZE;
               _TAB.PESEL:=OSOBA.PESEL;
               _TAB.T:=P.T;
               _TAB.DZA:=P.DZA;
               _TAB.DZ:=P.DZ;
               _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
               _TAB.DZ_IM:=RD.IM;
               _TAB.DZ_DA:=RD.DA;
               _TAB.DZ_DUK:=_dataUk;
               _TAB.add()
            ?}
         ?}
      ?};
      P.f_next()
   !};
   RD.f_clear();
   RD.cntx_pop();
   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\prac_kon_wiek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, którzy kończą określony
::       parametrem wiek w określonych parametrami ramach czasowych.
::       Formuła przebiegając po filtrowanej tabeli P liczy datę ukończenia przez pracownika wymaganego wieku.
::       Jeżeli data ukończenia wymaganego wieku mieści się między datami OD i DO pracownik jest zapisywany
::       do zwracanej tabeli tymczasowej.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::       [_e] [NUMBER] - Wiek, którego ukończenie zakwalifikuje pracownika. Domyślnie: 26 (lat).
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate & _b<>_d0 || _b || date() ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};
_wiekGr:={? var_pres('_e')=type_of(1) & _e>0 || _e || 26 ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'UR_DATA','DATE','Data urodzenia',
   'UK_DATA','DATE','Data ukończenia '+_wiekGr+' lat'
);

{? (_in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();

:: Przebiegamy po zafiltrowanej tabeli P:
   {!
   |? P.OSOBA();
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
      {? _war() & (P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date()))
      || _dataUr:=OSOBA.UR_DATA;
::       Data ukończenia przez pracownika wymaganego wieku:
         _dataUk:=exec('data_uk','personel_alerty',_dataUr,_wiekGr);
::       Jeżeli data ukończenia jest większa niż OD i mniejsza niż DO:
         {? _dataUk>=_in.OD & _dataUk<=_in.DO
::          Dodanie pracownika do zwracanej tabeli:
         || _TAB.NAZWISKO:=OSOBA.NAZWISKO;
            _TAB.PIERWSZE:=OSOBA.PIERWSZE;
            _TAB.PESEL:=OSOBA.PESEL;
            _TAB.T:=P.T;
            _TAB.DZA:=P.DZA;
            _TAB.DZ:=P.DZ;
            _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
            _TAB.UR_DATA:=_dataUr;
            _TAB.UK_DATA:=_dataUk;
            _TAB.add()
         ?}
      ?};
      P.f_next()
   !};

   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\p_zal_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [19.22]
:: OPIS: Formuła zwraca tabelę z informacjami o załącznikach pracownika.
::       Zakres sprawdzanych załączników można ograniczyć przez podanie listy par SLO_KOD.KOD, SLO_TYP.SYMBOL.
::   WE:  _a  [_P]  - P.ref, wskazanie na pracownika
::       [_b] [OBJ] - lista par SLO_KOD.KOD [STRING], SLO_TYP.SYMBOL [STRING],
::                    np. _obj[1]:='s', _obj[2]:='AktOsobB'
::       Formuła nie sprawdza poprawności elementów obiektu z parami SLO_KOD.KOD i SLO_TYP.SYMBOL. Na nieparzystej
::       pozycji powinien się znajdować SLO_KOD.KOD [STRING], a na kolejnej odpowiadający jej SLO_TYP.SYMBOL [STRING].
::   WY: _ret [TAB] - tabela z informacjami o załącznikach pracownika:
::                    DATA [DATE]    - Data załączenia
::                    NAZWA [STRING] - Nazwa pliku załącznika
::                    TYP [STRING]   - Typ załącznika
::----------------------------------------------------------------------------------------------------------------------
_slo:={? var_pres('_b')<0 || null || _b ?};
_sloLen:={? type_of(_slo)<>117 || 0 || obj_len(_slo) ?};

:: Budowanie klauzuli WHERE na podstawie otrzymanego obiektu:
_where:='ZALACZ.P=:_a';
{? _sloLen
|| _where+=' and (';
   {! _ii:=1//2.._sloLen
   |! _where+='(SLO_KOD.KOD=\'%1\' and SLO_TYP.SYMBOL=\'%2\')' [_slo[_ii],_slo[_ii+1]];
      {? (_ii+1)<_sloLen
      || _where+=' or '
      ?}
   !};
   _where+=')'
?};

_ret:=sql('select distinct ZALACZ.DATA as DATA, ZALACZ.ZAL_NAME as NAZWA, SLO_NAZ.NAZWA as TYP '
          'from ZALACZ '
          'join ZAOTS using(ZALACZ.TYP_ZAL, ZAOTS.SLO_NAZ) '
          'join SLO_KOD using(ZAOTS.SLO_KOD, SLO_KOD.REFERENCE) '
          'join SLO_TYP using(SLO_KOD.SLO_TYP, SLO_TYP.REFERENCE) '
          'join SLO_NAZ using(ZALACZ.TYP_ZAL, SLO_NAZ.REFERENCE) '
          'where '+_where,_a);

_ret


\blk_zus_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z uidref pracowników, którzy mają nałożoną blokadę
::       składek ZUS w zadanym okresie.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE:  _a  [DATE]   - Początek badanego okresu.
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date()].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_dzis:=date();
_in:=obj_new('OD','DO');

_in.OD:=_a;
_in.DO:={? var_pres('_b')=type_of(_dzis) || _b || _dzis ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};

_TAB:=tab_tmp(1,'UID','STRING[48]','P.uidref()','MAIL','STRING[100]','e-mail');

{? _in.OD<=_in.DO & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   P_INFO.cntx_psh();
   P_INFO.index('OD');
   _fRef:=exec('ref_firma','#firma');

   {!
   |? P.OSOBA();
      P_INFO.prefix(_fRef,OSOBA.ref());

::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
::    i (czy istnieje rekord P_INFO związany przez OSOBA z danym P)
      {? _war() & (P.DZA<=_in.DO) & (P.DZ=date(0,0,0) | _in.OD<=P.DZ | (_za='T' & P.DZ>=_dzis)) & P_INFO.first()
      || _added:=0;
::       Idę po rekordach P_INFO:
         {!
         |? {? P_INFO.BLOKADA<>date(0,0,0) & P_INFO.BLOKADA>=_in.OD & P_INFO.BLOKADA<=_in.DO
::          Jeśli data blokady mieści się w zadanym zakresie, to dodaję takiego pracownika do zwracanej tabeli:
            || _TAB.UID:=P.uidref();
::             Przypisanie adresu e-mail. Najpierw z tabeli USERS, jeśli tam nie ma to z OS_ADRES:
               _TAB.MAIL:=exec('users_p_email','personel_alerty',P.ref());
               {? _TAB.MAIL=''
               || _TAB.MAIL:=exec('email','osoba',OSOBA.ref())
               ?};
               _TAB.add();
               _added:=1
            ?};

            P_INFO.next() & ~_added
         !}
      ?};
      P.f_next()
   !};

   P_INFO.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\users_p_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [19.22]
:: OPIS: Funkcja zwraca e-mail z tabeli USERS dla podanego pracownika (P.ref).
::   WE: _a [_P] - wskazanie na pracownika
::   WY: adres e-mail lub '' gdy nie znaleziono
::----------------------------------------------------------------------------------------------------------------------
_eml:='';
P.cntx_psh();
P.prefix();
P.seek(_a);
USERS.cntx_psh();
USERS.index('OSOBA');
USERS.prefix(P.OSOBA);
{? USERS.first()
|| {!
   |? _eml:=USERS.EMAIL;
::    while:
      _eml='' & USERS.next()
   !}
?};
USERS.cntx_pop();
P.cntx_pop();

_eml


\oon_end_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z uidref pracowników, których orzeczenie
::       o niepełnosprawności traci ważność w zadanym okresie.
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE:  _a  [DATE]   - Początek badanego okresu.
::        _b  [DATE]   - Koniec badanego okresu.
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_in:=obj_new('OD','DO');

_in.OD:=_a;
_in.DO:=_b;
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};

_TAB:=tab_tmp(1,'UID','STRING[48]','P.uidref()','MAIL','STRING[100]','e-mail');

{? (_in.OD<=_in.DO | _in.DO=_d0) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   P_INFO.cntx_psh();
   P_INFO.index('OD');
   S_ZUS.cntx_psh();
   S_ZUS.prefix();
   _fRef:=exec('ref_firma','#firma');

   {!
   |? P.OSOBA();
      P_INFO.prefix(_fRef,OSOBA.ref());

::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
::    i (czy istnieje rekord P_INFO związany przez OSOBA z danym P)
      {? _war() & (P.DZA<=_in.DO | _in.DO=_d0) & (P.DZ=_d0 | _in.OD<=P.DZ | (_za='T' & P.DZ>=date())) & P_INFO.first()
      || _added:=0;
::       Idę po rekordach P_INFO:
         {!
         |? {? P_INFO.STNP().KOD<>'0' & P_INFO.STNP_DO>=_in.OD & (_in.DO=_d0 | P_INFO.STNP_DO<=_in.DO)
::          Jeśli data końca orzeczenia mieści się w zadanym zakresie, to dodaję takiego pracownika do zwracanej tabeli:
            || _TAB.UID:=P.uidref();
::             Przypisanie adresu e-mail. Najpierw z tabeli USERS, jeśli tam nie ma to z OS_ADRES:
               _TAB.MAIL:=exec('users_p_email','personel_alerty',P.ref());
               {? _TAB.MAIL=''
               || _TAB.MAIL:=exec('email','osoba',OSOBA.ref())
               ?};
               _TAB.add();
               _added:=1
            ?};

            P_INFO.next() & ~_added
         !}
      ?};
      P.f_next()
   !};

   S_ZUS.cntx_pop();
   P_INFO.cntx_pop();
   OSOBA.cntx_pop()
?};

_TAB


\data_uk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Zwraca datę ukończenia n lat. Dla osoby urodzonej 29 lutego, urodziny w roku nieprzestępnym
::       przypadają 28 lutego.
::   WE: _a [DATE] - data urodzenia
::       _b [NUMBER] - liczba n (które urodziny)
::   WY: data n-tych urodzin
::----------------------------------------------------------------------------------------------------------------------
_dataur:=_a;
_lat:=_b;
_dataUk:=date(0,0,0);

_rok:=_dataur~1;
_mc:=_dataur~2;
_dzien:=_dataur~3;
_dataUk:=date(_rok+_lat,_mc,{? _mc=2 & _dzien=29 || 0 || _dzien ?});

_dataUk


\ppod_zm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Sprawdza czy nastąpiła zmiana wartości w rubrykach atrybutu w danym miesiącu,
::       lub zmiana na większą między poprzednim a obecnym miesiącem (przy jedn. sprawdzeniu czy nie wystąpiła zmiana
::       w samym miesiącu poprzednim).
::   WE: _a [_P] - wskazanie na pracownika
::       _b [NUMBER] - rok listy płac
::       _c [NUMBER] - miesiąc listy płac
::       _d [NUMBER] - kod atrybutu
::   WY: _ret [NUMBER] - 0/1 - 0-brak znalezionych zmian wartości, 1-znaleziono zmianę wartości
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
:: Powołanie niezbędnych obiektów:
exec('__RUB','object');
:: Tablica z rubrykami należącymi do podanego atrybutu:
_ATR:=__RUB.sys_rub(_d,date(_b,_c,0));
:: pierwsza znaleziona wartość w danym miesiącu:
_frstVal:=null();

O_P.cntx_psh();
O_P.index('P_RMP');
O_P.prefix('T',_a,_b,_c);
{? O_P.first()
|| LS.cntx_psh();
   O.cntx_psh();
   {!
   |? LS.use(O_P.O().LT);
      LS.index('PRACNRRU');
::       Przechodzę po rubrykach z atrybutu:
      {? _ATR.first()
      || {!
         |? LS.prefix(O_P.P,_ATR.RN);
::             Przechodzę po składnikach pracownika o odpowiednim kodzie rubryki:
            {? LS.first()
            || {!
               |? {? _frstVal=null()
::                   Zapisanie pierwszej znalezionej wartości:
                  || _frstVal:=LS.KW
::                   Jeśli jest różnica między pierwszą a kolejną, to znaleźliśmy zmianę:
                  || {? _frstVal<>LS.KW
                     || _ret:=1
                     ?}
                  ?};

                  ~_ret & LS.next()
               !}
            ?};

            ~_ret & _ATR.next()
         !}
      ?};

      O_P.next()
   !};
   O.cntx_pop();
   LS.cntx_pop()
?};

:: Jeśli nie było różnicy w danym miesiącu i była tam jakaś wartość:
{? ~_ret & _frstVal<>null()
|| _prevVal:=null();
   _bDiff:=0;
:: Sprawdzam czy były zmiany w poprzednim miesiącu (jeśli tak, to nie wykazujemy, bo były wykryte w poprzednim badaniu):
   {? _c<>1
   || _pRok:=_b;
      _pMsc:=_c-1
   || _pRok:=_b-1;
      _pMsc:=12
   ?};
   O_P.prefix('T',_a,_pRok,_pMsc);
   {? O_P.first()
   || LS.cntx_psh();
      O.cntx_psh();
      {!
      |? LS.use(O_P.O().LT);
         LS.index('PRACNRRU');
::       Przechodzę po rubrykach z atrybutu:
         {? _ATR.first()
         || {!
            |? LS.prefix(O_P.P,_ATR.RN);
::             Przechodzę po składnikach pracownika o odpowiednim kodzie rubryki:
               {? LS.first()
               || {!
                  |? {? _prevVal=null()
::                   Zapisanie pierwszej znalezionej wartości (miesiąca poprzedniego):
                     || _prevVal:=LS.KW
::                   Jeśli jest różnica między pierwszą a kolejną, to znaleźliśmy zmianę:
                     || {? _prevVal<>LS.KW
                        || _bDiff:=1
                        ?}
                     ?};

                     ~_bDiff & LS.next()
                  !}
               ?};

               ~_bDiff & _ATR.next()
            !}
         ?};

         O_P.next()
      !};
      O.cntx_pop();
      LS.cntx_pop()
   ?};
:: Jeśli w poprzednim miesiącu nie było różnic i była jakaś wartość:
   {? ~_bDiff & _prevVal<>null()
::    Jeśli wartość z poprzedniego miesiąca była mniejsza niż z podanego miesiąca, to wykryto zmianę:
   || {? _prevVal<_frstVal
      || _ret:=1
      ?}
   ?}
?};
O_P.cntx_pop();

_ret


\zm_atr_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Czy nastąpiło pojawienie się składnika płacowego dla danego pracownika w stosunku do miesiąca poprzedniego.
::       Najpierw jest sprawdzane czy w poprzednim miesiącu w stosunku do badanego nie było któregokolwiek ze składników
::       z atrybutu. Jeżeli nie było to sprawdzane jest czy w badanym miesiącu jest którykolwiek ze składników atrybutu.
::   WE: _a [REF] - wskazanie na pracownika (P.ref)
::       _b [NUMBER] - rok listy płac
::       _c [NUMBER] - miesiąc listy płac
::       _d [NUMBER] - numer atrybutu
::   WY: _ret [NUMBER] - 0/1. 1- składnik pojawił się i w miesiącu poprzednim go nie było
::----------------------------------------------------------------------------------------------------------------------
_prac:=_a;
_rok:=_b;
_msc:=_c;
_atr:=_d;
_ret:=_byl:=0;

:: Powołanie niezbędnych obiektów:
exec('__RUB','object');
:: Tablica z rubrykami należącymi do podanego atrybutu:
_ATR:=__RUB.sys_rub(_atr,date(_rok,_msc,0));

::Poprzedni miesiąc i rok:
{? _msc<>1
|| _pRok:=_rok;
   _pMsc:=_msc-1
|| _pRok:=_rok-1;
   _pMsc:=12
?};

O_P.cntx_psh();
O_P.index('P_RMP');
:: Sprawdzam czy w miesiącu poprzednim w stosunku do badanego występował którykolwiek ze składników badanego atrybutu:
O_P.prefix('T',_prac,_pRok,_pMsc);
{? O_P.first()
|| LS.cntx_psh();
   O.cntx_psh();
   {!
   |? LS.use(O_P.O().LT);
      LS.index('PRACNRRU');
::       Przechodzę po rubrykach z atrybutu:
      {? _ATR.first()
      || {!
         |? LS.prefix(O_P.P,_ATR.RN);
::             Przechodzę po składnikach pracownika o odpowiednim kodzie rubryki:
            {? LS.first()
            || _byl:=1
            ?};

            ~_byl & _ATR.next()
         !}
      ?};

      O_P.next()
   !};
   O.cntx_pop();
   LS.cntx_pop()
?};

:: Jeśli w poprzednim miesiącu nic nie było:
{? ~_byl
||
:: Sprawdzam czy w badanym miesiącu występował którykolwiek ze składników badanego atrybutu:
   O_P.prefix('T',_prac,_rok,_msc);
   {? O_P.first()
   || LS.cntx_psh();
      O.cntx_psh();
      {!
      |? LS.use(O_P.O().LT);
         LS.index('PRACNRRU');
::       Przechodzę po rubrykach z atrybutu:
         {? _ATR.first()
         || {!
            |? LS.prefix(O_P.P,_ATR.RN);
::             Przechodzę po składnikach pracownika o odpowiednim kodzie rubryki:
               {? LS.first()
               || _ret:=1
               ?};

               ~_ret & _ATR.next()
            !}
         ?};

         O_P.next()
      !};
      O.cntx_pop();
      LS.cntx_pop()
   ?}
?};
O_P.cntx_pop();

_ret


\input_chk_prp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Weryfikacja poprawności parametrów wejściowych dla czynności PKD_EZK_APRP - Pow. pracowników
::       o przekroczeniu pr. pod.. Jeżeli formuła jest wywołana w trybie dialogowych wyświetli okienko edycji
::       z możliwością wprowadzenia danych.
::   WE: _a [NUMBER] - czynność bezdialogowa (serwisowa) czy dialogowa  - 1/0
::       _b [OBJ]    - tablica nazwana z parametrami wejściowymi. Parametry mogą mieć wartość pustą (void),
::                     ale struktura tablicy musi być zachowana:
::                    [ROK]       [NUMBER] - rok
::                    [MSC]       [NUMBER] - miesiąc
::                    [UD_SCH]    [STRING] - schemat organizacyjny
::                    [UD_SKL]    [STRING] - jednostka organizacyjna
::                    [SQL_FROM]  [STRING] - dodatkowe relacje filtra
::                    [SQL_WHERE] [STRING] - dodatkowy warunek filtra
::                    [FML_TEST]  [STRING] - dodatkowy warunek wyboru
::       _c [STRING] - tytuł tworzonego okienka edycji
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_b;
_service:=_a;
_winT:=_c;

_d0:=date(0,0,0);

:: Unifikacja typów parametrów wejściowych.
{? _in.ROK=~~
|| _in.ROK:=date()~1
?};
{? _in.MSC=~~
|| _in.MSC:=date()~2
?};
{? _in.UD_SCH=~~ | _in.UD_SCH=''
|| _in.UD_SCH:=exec('domyslny','schemat','PODZORG',1).SYMBOL
?};
{? _in.UD_SKL=~~
|| _in.UD_SKL:=''
?};
{? _in.SQL_FROM=~~
|| _in.SQL_FROM:=''
?};
{? _in.SQL_WHERE=~~
|| _in.SQL_WHERE:=''
?};
{? _in.FML_TEST=~~
|| _in.FML_TEST:=''
?};

{? ~_service
:: Czynność uruchomiona w trybie ręcznym. Edycja parametrów wejściowych:
|| _PAR:=tab_tmp(,
      'ROK','INTEGER','Rok'@,
      'MSC','INTEGER','Miesiąc'@,
      'UD_SCH','STRING[8]','Schemat'@,
      'UD_SKL','STRING[16]','Jednostka organizacyjna'@
   );

   _PAR.fld_fml('UD_SCH','F3',"exec('ud_sch_wybierz','schemat','PODZORG',fld()).SYMBOL");
   _PAR.fld_fml('UD_SCH','BEFORE_EDIT',"cur_tab(1,1).UD_SKL=''");
   _PAR.fld_fml('UD_SCH','AFTER_EDIT',
      "  _fld:=fld();
         cur_tab(1,1).efld_opt(cur_win(1,1),'enable=%1' [$(_fld<>'')],,'UD_SKL');
         _fld='' | exec('szukaj_ud_sch','schemat','PODZORG',_fld)<>null()
      "
   );
   _PAR.fld_fml('UD_SKL','F3',"exec('ud_def_symbol_f3','schemat','PODZORG',cur_tab(1,1).UD_SCH,'PKD',2)");
   _PAR.fld_fml('UD_SKL','BEFORE_EDIT',"cur_tab(1,1).UD_SCH<>''");
   _PAR.fld_fml('UD_SKL','AFTER_EDIT',"fld()='' | exec('ud_skl_symbol_ae','schemat','PODZORG','PKD',2)<>null()");

   _we:=_PAR.mk_edit(_winT,0,'#prp_alerty');
   _PAR.win_esep(_we,'Badany okres'@);
   _PAR.win_efld(_we,,'ROK',,,,,,,,'Rok'@);
   _PAR.win_efld(_we,,'MSC',,,,,,,,'Miesiąc'@);
   _PAR.win_esep(_we,'Struktura'@);
   _PAR.win_efld(_we,,'UD_SCH',,,16,,,,,'Schemat'@,,'F3_button=1');
   _PAR.win_efld(_we,,'UD_SKL',,,16,,,,,'Symbol jednostki organizacyjnej'@,,'F3_button=1');
   exec('ok_esc','#window',_PAR,_we);
   _PAR.win_edit(_we);

   _PAR.efld_opt(_we,'mark=1',,'ROK');
   _PAR.efld_opt(_we,'mark=1',,'MSC');

   _PAR.blank();
   _PAR.ROK:=_in.ROK;
   _PAR.MSC:=_in.MSC;
   _PAR.UD_SCH:=_in.UD_SCH;
   _PAR.UD_SKL:=_in.UD_SKL;

   {? _PAR.edit("__CHK.record(cur_tab(1,1),,'ROK','MSC')")
   || _in.ROK:=_PAR.ROK;
      _in.MSC:=_PAR.MSC;
      _in.UD_SCH:=_PAR.UD_SCH;
      _in.UD_SKL:=_PAR.UD_SKL
   || return('Rezygnacja z redagowania parametrów.')
   ?}

?};

''


\pr_pod_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z uidref pracowników, którzy w danym miesiącu przekroczyli
::       próg podatkowy (w stosunku do miesiąca poprzedniego).
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE:  _a [NUMBER]  - Badany rok.
::        _b [NUMBER]  - Badany miesiąc.
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [STRING] - Czy uwzględniać pracowników, którzy są aktualnie zatrudnieni, a którym umowa o pracę wygasa
::                       przed datą kontroli lub końcem badanego okresu?
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_in:=obj_new('ROK','MSC');

_in.ROK:=_a;
_in.MSC:=_b;
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_za:={? var_pres('_d')=type_of('') || _d || 'N' ?};

_TAB:=tab_tmp(1,'UID','STRING[48]','P.uidref()','MAIL','STRING[100]','e-mail');

{? P.f_active() & P.f_first()
:: Pobranie daty z parametru 266 - Personel: Data zmiany sposobu naliczania w systemie progów podatkowych:
|| _p266:=exec('get_par','#parametr',266);
   _rok:=4+_p266;
   _mies:=(7+_p266)+2;
   _dzien:=_p266+2;
   _p266dt:=date(#_rok,#_mies,#_dzien);

:: Przechodzenie po pracownikach:
   {!
   |? {? _war()
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
         & (P.DZA~1<_in.ROK | (P.DZA~1=_in.ROK & P.DZA~2<=_in.MSC))
::    i (czy data zwolnienia nie jest przed badanym okresem, lub czy badamy wg. par. wej. _d)
         & (P.DZ=date(0,0,0) | (P.DZ~1>_in.ROK | (P.DZ~1=_in.ROK & P.DZ~2>=_in.MSC)) | (_za='T' & P.DZ>=date()))
::    i czy nastąpiło przekroczenie progu podatkowego w danym miesiącu:
         & exec('prz_prog','personel_alerty',P.ref(),_in.ROK,_in.MSC,_p266dt)
      || _TAB.UID:=P.uidref();
::       Przypisanie adresu e-mail. Najpierw z tabeli USERS, jeśli tam nie ma to z OS_ADRES:
         _TAB.MAIL:=exec('users_p_email','personel_alerty',P.ref());
         {? _TAB.MAIL=''
         || OSOBA.cntx_psh();
            _TAB.MAIL:=exec('email','osoba',P.OSOBA);
            OSOBA.cntx_pop()
         ?};

         _TAB.add()
      ?};
      P.f_next()
   !}
?};

_TAB


\prz_prog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Sprawdza czy pracownik przekroczył próg podatkowy w danym miesiącu.
::       W zależności od daty parametru 266 - Personel: Data zmiany sposobu naliczania w systemie progów podatkowych.
::       jest sprawdzane pojawienie się wartości w atrybucie 9033 - Dochód II próg podatkowy
::       lub zmiana w atrybucie 91 - Procent podatku w miesiącu podanym, bądź między miesiącem podanym a poprzednim,
::       ale bez zmian w samym poprzednim
::   WE: _a [_P] - wskazanie na pracownika
::       _b [NUMBER] - rok listy płac
::       _c [NUMBER] - miesiąc listy płac
::       _d [DATE] - data z parametru 266
::   WY: _ret [NUMBER] - 0/1 - 0-brak znalezionych zmian wartości, 1-znaleziono zmianę wartości
::----------------------------------------------------------------------------------------------------------------------
_p266dt:=_d;
_ret:=0;

{? _p266dt<>date(0,0,0) & _p266dt<=date(_b,_c,0)
|| _ret:=exec('zm_atr_msc','personel_alerty',_a,_b,_c,9033)
|| _ret:=exec('ppod_zm','personel_alerty',_a,_b,_c,91)
?};

_ret


\um_zak_kon_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła zwraca tabelę z informacjami o umowach lojalnościowych i o zakazie konkurencji pracownika.
::       Zakres sprawdzanych załączników można ograniczyć przez podanie typu umowy ['L','Z'].
::   WE:  _a  [_P]     - P.ref, wskazanie na pracownika
::       [_b] [STRING] - typ umów jakie znajdą się w zwracanej tabeli. Domyślnie wszystkie.
::       [_c] [DATE]   - data, która jeśli jest mniejsza niż data zakończenia, kwalifikuję umowę
::   WY: _ret [TAB] - tabela z informacjami o załącznikach pracownika:
::                    TYP [STRING]   - Typ umowy
::                    DATAZAW [DATE] - Data zawarcia
::                    NUMER [STRING] - Numer umowy
::                    PO [STRING]    - Znacznik czy zakaz po stosunku
::----------------------------------------------------------------------------------------------------------------------
_typUm:={? var_pres('_b')=type_of('') || _b || '' ?};
_dzis:=date();
_dtZak:={? var_pres('_c')=type_of(_dzis) || _c || _dzis ?};
_where:='';
{? +_typUm=1
|| _where:='and UMLOJN.TYP=\':_c\''
?};
_ret:=sql('select UMLOJN.TYP as TYP, UMLOJN.DTU as DATAZAW, UMLOJN.NU as NUMER, UMLOJN.PO as PO '
          'from UMLOJN '
          'where UMLOJN.P=:_a and (UMLOJN.DTZ is null or UMLOJN.DTZ>=to_date(:_b)) '+_where,
          _a,_dtZak,_typUm
         );

_ret


\odd_kon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła przygotowuje i udostępnia tabelę tymczasową z danymi pracowników, którym kończy się oddelegownie
::       w zadanym okresie.
::       Formuła przebiegając po filtrowanej tabeli P bada czy współpracownik w badanym okresie kończy oddelegowanie.
::       Jeśli pracownik nie zaczyna od razu kolejnego oddelegowania trafia do zwracanej tabeli tymczasowej.
::       Formuła bierze pod uwagę wszystkie oddelegowania lub tylko oddelegowania bez ZUS (zależnie od parametru).
::       Uwagi:
::          - Bufor tabeli P nie jest zapamiętywany.
::          - Zakłada się, że na tabelę P jest załozony filtr.
::          - Formuła wykorzystywana w 'alertach' i w wydrukach.
::   WE: [_a] [DATE]   - Początek badanego okresu [domyślnie: date()].
::       [_b] [DATE]   - Koniec badanego okresu [domyślnie: date(0,0,0)].
::       [_c] [STRING] - Napis interpretowany jako formuła [domyślnie: '1']. Jeżeli formuła zwróci wartość 0 to dany
::                       współpracownik nie będzie przetwarzany.
::       [_d] [INTEGER]- 0/1 Czy uwzględniać tylko wspólpracowników, przebywających na oddelgowaniu bez opłacania
::                       składek ZUS? Domyślnie 1 - tak.
::   WY: Tabela tymczasowa z danymi pracowników.
::----------------------------------------------------------------------------------------------------------------------
_d0:=date(0,0,0);
_tdate:=type_of(_d0);
_in:=obj_new('OD','DO');

_in.OD:={? var_pres('_a')=_tdate & _a<>_d0 || _a || date() ?};
_in.DO:={? var_pres('_b')=_tdate & _b<>_d0 || _b || date() ?};
_war:={? var_pres('_c')=type_of('') & _c<>'' || $_c || "1" ?};
_bZus:={? var_pres('_d')=type_of(0) || _d || 1 ?};

_TAB:=tab_tmp(2,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
   'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
   'DZA','DATE','Data zatrudnienia',
   'DZ','DATE','Data zwolnienia',
   'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna',
   'O_OD','DATE','Data od oddelegowania'@,
   'O_DO','DATE','Data do oddelegowania'@,
   'KRAJ','STRING['+$MS.fld_len(KRAJE,'NAZ')+']','Kraj oddelegowania'@,
   'FIR_N','STRING['+$MS.fld_len(H_ODDA,'NAZWA')+']','Nazwa firmy oddelegowania'@,
   'MIASTO','STRING['+$MS.fld_len(H_ODDA,'MIASTO')+']','Miejscowość oddelegowania'@,
   'ZAST','STRING['+$MS.fld_len(H_ODDE,'ZAST')+']','Zastępstwo'@,
   'ZAKW','STRING['+$MS.fld_len(H_ODDE,'ZAKW')+']','Noclegi'@,
   'POD','STRING['+$MS.fld_len(H_ODDE,'POD')+']','Podatek'@,
   'ZUS','STRING['+$MS.fld_len(H_ODDE,'ZUS')+']','Składki ZUS'@
);

{? (_in.OD<=_in.DO) & P.f_active() & P.f_first()
|| OSOBA.cntx_psh();
   OSOBA.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();

:: Przebiegamy po zafiltrowanej tabeli P:
   {!
   |? P.OSOBA();
::    Sprawdzamy (FML - dodatkowe filtry) i (czy data zatrudnienia mieści się w badanym okresie)
::    i (czy data zwolnienia nie jest przed badanym okresem)
      {? _war() & (P.DZA<=_in.DO) & (P.DZ=_d0 | _in.OD<=P.DZ)
::       Dla pracownika pobieram tabelę z jego oddelegowaniami:
      || _ODD:=exec('h_odde_b_zus','oddelegowanie',P.ref(),0,_bZus);
         {? _ODD.first()
         || _ind:=_ODD.ndx_tmp(,1,'O_DO',,0);
            _ODD.index(_ind);
            {? _ODD.find_le(_in.DO) & _ODD.O_DO>=_in.OD
::          Dodanie pracownika do zwracanej tabeli:
            || _TAB.NAZWISKO:=OSOBA.NAZWISKO;
               _TAB.PIERWSZE:=OSOBA.PIERWSZE;
               _TAB.PESEL:=OSOBA.PESEL;
               _TAB.T:=P.T;
               _TAB.DZA:=P.DZA;
               _TAB.DZ:=P.DZ;
               _TAB.WYDZIAL:=P.WYDZIAL().SYMBOL;
               _TAB.O_OD:=_ODD.O_OD;
               _TAB.O_DO:=_ODD.O_DO;
               _TAB.KRAJ:=_ODD.NAZ;
               _TAB.FIR_N:=_ODD.NAZWA;
               _TAB.MIASTO:=_ODD.MIASTO;
               _TAB.ZAST:=_ODD.ZAST;
               _TAB.ZAKW:=_ODD.ZAKW;
               _TAB.POD:=_ODD.POD;
               _TAB.ZUS:=_ODD.ZUS;
               _TAB.add()
            ?};
            _ODD.ndx_drop()
         ?};
         obj_del(_ODD)
      ?};
      P.f_next()
   !};

   UD_SKL.cntx_pop();
   OSOBA.cntx_pop()
?};
obj_del(_in);

_TAB


\brak_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Treść zdarzenia komunikatu wychodzącego w przypadku braku osób
::   WE: [_a][DATE]   - data od
::       [_b][DATE]   - data do
::       [_c][STRING] - treść uzupełniająca
::   WY: _ret [STRING] - treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
_od:=_do:=_uzu:='';
_td:=type_of(date());
{? var_pres('_a')=_td
|| _od:=' %1 %2'['od'@,$_a]
?};
{? var_pres('_b')=_td
|| _do:=' %1 %2'['do'@,$_b]
?};
{? var_pres('_c')=type_of('')
|| _uzu:=_c
|| _uzu:=$var_pres('_c')
?};
_brOs:='Brak osób'@;
{? +_od | +_do
|| _brOs:=' '+(-_brOs)
?};
_ret:='%1%2%3%4 %5.'[{? +_od | +_do || 'W okresie'@ || '' ?},_od,_do,_brOs,
   {? +_uzu || _uzu || 'spełniających kryteria powiadomienia'@ ?}];

_ret


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 e0375ff9064d3e27d3393d012ff8dc3203d7e95f2f4f59ee5645d4995c177bfb4ed95a74656e4e9fd7be5ee1cb1b145410d7a542d8a3eb9202bb560e544e185e5aa668dbc771ff2f6bfd889bf08120a19ab16e1ef095246ad7a0de387d7857bbfea34489ce395b1a69008e51410400daa50f19326152f2789e4ccbd4dad6a6f6
