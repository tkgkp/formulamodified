:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_zdn.fml [12.51]
:: Utworzony: 2019/05/28
:: Systemy: PPK
::======================================================================================================================
:: Zawartość: Formuły odpowiedzialne za obsługę nagłówka procesu / wniosku zmiany danych.
::======================================================================================================================


\_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Główna formuła konfiguracyjna obsługująca proces / wniosek zmiany danych.
::   WE: _a [STRING] - Symbol procesu / wniosku.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Przygotowanie narzędzi.
_STRU:=obj_new('TAB','NDX','add','lista','crt_tab');
_STRU.TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.',
   'TAG','STRING[32]','XML Tag',
   'ACR','STRING[8]','Akronim pola',
   'TYPE','STRING[12]','Typ pola',
   'NAME','STRING[64]','Nazwa pola'
);
_STRU.NDX:=obj_new('LP','TAG');
_STRU.NDX.LP:=_STRU.TAB.index('?');
_STRU.NDX.TAG:=_STRU.TAB.ndx_tmp(,,'TAG',,);
_STRU.add:="
   _lp:=.TAB.size()+1;
   .TAB.blank();
   .TAB.LP:=_lp;
   .TAB.TAG:={? var_pres('_a')=type_of('') || _a || '' ?};
   .TAB.ACR:=_b;
   .TAB.TYPE:=_c;
   .TAB.NAME:=_d;
   .TAB.add()
";
_STRU.lista:="
   {? .TAB.first()
   || _ret:='';
      {!
      |? {? .TAB.TAG<>''
         || _ret+=.TAB.TAG+','
         ?};
         .TAB.next()
      !};
      _ret-1
   || ''
   ?}
";
_STRU.crt_tab:="
   _tabs:='';
   _loop:=.TAB.first();
   {!
   |? _tabs+=',\\''+.TAB.ACR+'\\',\\''+.TAB.TYPE+'\\',\\''+.TAB.NAME+'\\'';
      _loop:=.TAB.next()
   !};
   {? _tabs=''
   || ~~
   || ($('tab_tmp(1'+_tabs+')'))()
   ?}
";

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Konfiguracja obsługiwanych procesów.

{? _typ='UCZESTNIK_ZMIANA'
:: Zmiana danych identyfikacyjnych (2.7 -> 3.2)
|| _STRU.add('DATA_ZMIANY','DATA','DATE','Data zmiany'@);
   _STRU.add(,'ZDS','STRING['+$MS.fld_len(PPK_XEL,'SYMBOL')+']','Symbol zmiany'@);
   _STRU.add(,'ZDO','STRING['+$MS.fld_len(PPK_XEL,'OPIS')+']','Opis zmiany'@);
   _STRU.add('ID_KADRY','ID_APP','STRING['+$MS.fld_len(PPK_UCZ,'ID_APP')+']',MS.name(PPK_UCZ,'ID_APP'));
   _STRU.add('IMIE','PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']',MS.name(OSOBA,'PIERWSZE'));
   _STRU.add('IMIE_2','DRUGIE','STRING['+$MS.fld_len(OSOBA,'DRUGIE')+']',MS.name(OSOBA,'DRUGIE'));
   _STRU.add('NAZWISKO','NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']',MS.name(OSOBA,'NAZWISKO'));
   _STRU.add('PLEC','PLEC','STRING[1]',MS.name(OSOBA,'PLEC'));
   _STRU.add('OBYW','OBYW','STRING[2]','Obywatelstwo');
   _STRU.add('NR_PESEL','PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']',MS.name(OSOBA,'PESEL'));
   _STRU.add('DATA_UR','UR_DATA','DATE',MS.name(OSOBA,'UR_DATA'));
   _STRU.add('DOK_TOZ_TYP','DTOZ_TYP','STRING[1]','Typ');
   _STRU.add('DOK_TOZ_SYM','DTOZ_SYM','STRING[50]','Seria i numer');
:: Pole techniczne
   _STRU.add(,'RDA','STRING[16]','Wskazanie na raport'@);
   _STRU.add(,'OB_PSL','STRING[1]','PESEL obcokrajowca'@);

   _TAB:=_STRU.crt_tab();

:: Formuły pól.
   _TAB.fld_fml('PLEC','BLANK',"'N'");
   _TAB.fld_fml('OBYW','PATTERN',"'UU'");
   _TAB.fld_fml('OBYW','BLANK',"'PL'");
   _TAB.fld_fml('OBYW','F3',"exec('lista','ext_slo','OBYWATEL',SLO_KOD,'WER','KOD',$'SLO_KOD.KOD')");
   _TAB.fld_fml('OBYW','AFTER_EDIT',"
      _fld:=fld();
      {? _fld=''
      || return(1)
      ?};
      _ret:=0;
      SLO_TYP.cntx_psh();
      SLO_TYP.index('SYMBOL');
      SLO_TYP.prefix();
      _typ:=exec('slo_typ','ext_slo','OBYWATEL');
      SLO_KOD.cntx_psh();
      SLO_KOD.index('KOD');
      SLO_KOD.prefix(_typ);
      {? SLO_KOD.find_key(_fld)
      || fld(SLO_KOD.KOD);
         _ret:=1
      ?};
      SLO_KOD.cntx_pop();
      SLO_TYP.cntx_pop();
      {? _ret
      || exec('_tab_efld_opt','ppk_zdn')
      ?}
   ");
   _TAB.fld_fml('DTOZ_TYP','AFTER_EDIT',"exec('_tab_efld_opt','ppk_zdn')");

:: Okno redagowania.
   _szer:=46;
   _we:=_TAB.mk_edit('Zmiana danych identyfikacyjnych'@,,'#zdnu',,,'html_maximized');
   _TAB.win_esep(_we,'Dane podstawowe'@);
   _TAB.win_efld(_we,,'DATA',,,,,,,,'Data zmiany'@);
   _TAB.win_efld(_we,,'ZDS',,,_szer,,1,,,'Symbol procesu / wniosku'@);
   _TAB.win_efld(_we,,'ZDO',,,_szer,,1,,,'Opis procesu / wniosku'@);
   _TAB.win_esep(_we,'Dane identyfikacyjne'@);
   _TAB.win_efld(_we,,'ID_APP',,,_szer,,1,,,MS.comment(PPK_UCZ,'ID_APP'));
   _TAB.win_efld(_we,,'NAZWISKO',,,_szer,,,,,MS.comment(OSOBA,'NAZWISKO'));
   _TAB.win_efld(_we,,'PIERWSZE',,,_szer,,,,,MS.comment(OSOBA,'PIERWSZE'));
   _TAB.win_efld(_we,,'DRUGIE',,,_szer,,,,,MS.comment(OSOBA,'DRUGIE'));
   _TAB.win_efld(_we,,'PLEC',,,,,,,,MS.comment(OSOBA,'PLEC'),'radio-buttons','left_label=1',
      'Kobieta'@,"'K'",
      'Mężczyzna'@,"'M'",
      'Nie podano'@,"'N'"
   );
   _TAB.win_efld(_we,,'OBYW',,,3,,,,,'Obywatelstwo'@,,'F3_button=1');
   _TAB.win_efld(_we,,'PESEL',,,_szer,,,,,MS.comment(OSOBA,'PESEL'));
   _TAB.win_efld(_we,,'UR_DATA',,,,,,,,MS.comment(OSOBA,'UR_DATA'));
   _TAB.win_esep(_we,'Dokument tożsamości'@);
   _TAB.win_efld(_we,,'DTOZ_TYP',,,,,,,,'Typ dokumentu tożsamości'@,'radio-buttons','left_label=1',
      'Dowód osobisty'@,"'D'",
      'Paszport'@,"'P'",
      'Karta stałego pobytu'@,"'K'",
      'Inny'@,"'I'",
      'Nie podano'@,"''"
   );
   _TAB.win_efld(_we,,'DTOZ_SYM',,,_szer,,,,,'Seria i numer dokumentu tożsamości'@);

   _TAB.efld_opt(_we,'mark=1',,'DATA');
   _TAB.efld_opt(_we,'mark=1',,'NAZWISKO');
   _TAB.efld_opt(_we,'mark=1',,'PIERWSZE');
   _TAB.efld_opt(_we,'mark=1',,'OBYW');


:: Formuły obsługi.
   _set:="
      _typ:={? var_pres('_a')=type_of('') || _a || 'ns' ?};
      _dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};
      _par:={? var_pres('_c')=type_of(obj_new(1)) || _c || 0 ?};
      .TAB.blank();
      {? _typ*'n'
      || .TAB.DATA:=PPK_ZDN.DATA;
         .TAB.ZDS:=PPK_ZDN.PPK_XEL().SYMBOL;
         .TAB.ZDO:=PPK_XEL.OPIS;
         .TAB.RDA:=$PPK_ZDN.PPK_RDA
      ?};
      {? _typ*'s'
      || .TAB.ID_APP:=PPK_UCZ.ID_APP;
         .TAB.NAZWISKO:=exec('chars_swap','ppk',OSOBA.NAZWISKO);
         .TAB.PIERWSZE:=exec('chars_swap','ppk',OSOBA.PIERWSZE);
         .TAB.DRUGIE:=exec('chars_swap','ppk',OSOBA.DRUGIE);
         .TAB.PLEC:=OSOBA.PLEC;
         {? -OSOBA.OBYWATEL<>'polskie'
         || SLO_TYP.cntx_psh();
            SLO_TYP.prefix();
            _typ:=exec('slo_typ','ext_slo','OBYWATEL');
            SLO_KOD.cntx_psh();
            SLO_KOD.index('NAZWA');
            SLO_KOD.prefix(_typ,OSOBA.OBYWATEL);
            {? SLO_KOD.first()
            || .TAB.OBYW:=SLO_KOD.KOD;
::          Jeżeli mamy więcej niż jedno obywatelstwo zaczynające się na podane w tabeli osoba:
               {? SLO_KOD.size()<>1
               || _msg:='Niejednoznaczne obywatelstwo: %1. Przypisano kod kraju: %2.'@[OSOBA.OBYWATEL,SLO_KOD.KOD];
                  SLO_KOD.prefix(_typ,OSOBA.OBYWATEL,);
::                Jeżeli w słowniku jest dokładnie takie jak w danych osobowych:
                  {? SLO_KOD.first()
                  || .TAB.OBYW:=SLO_KOD.KOD;
::                   Jeśli wpis ma mniej znaków niż długość pola - nie ostrzegamy:
                     {? +OSOBA.OBYWATEL<MS.fld_len(OSOBA,'OBYWATEL')
                     || _msg:=''
                     || _msg:='%1 %2'[_msg,'Należy zweryfikować poprawność przypisania kodu kraju.'@]
                     ?}
                  || _msg:='%1 %2'[_msg,
                        'Należy rozważyć skorygowanie zapisów w słowniku obywatelstw i/lub kartotece osób.'@]
                  ?};
                  {? +_msg
                  || {? type_of(_par)<>type_of(0)
                     || _par.uwaga(_par.DIU,_msg)
                     || _msg:='%1 %2 - %3'[OSOBA.PIERWSZE,OSOBA.NAZWISKO,_msg];
                        FUN.info(_msg)
                     ?}
                  ?}
               ?}
            || .TAB.OBYW:=''
            ?};
            SLO_KOD.cntx_pop();
            SLO_TYP.cntx_pop()
         ?};
         .TAB.PESEL:=OSOBA.PESEL;
         .TAB.UR_DATA:=OSOBA.UR_DATA;
         {? OSOBA.DOWOD<>''
         || .TAB.DTOZ_TYP:='D';
            .TAB.DTOZ_SYM:=gsub(OSOBA.DOWOD,' ','')
         |? OSOBA.PASZPORT<>''
         || .TAB.DTOZ_TYP:='P';
            .TAB.DTOZ_SYM:=gsub(OSOBA.PASZPORT,' ','')
         ?};
         PPK_UMO.cntx_psh();
         PPK_UMO.prefix();
         PPK_UZA.cntx_psh();
         PPK_UZA.prefix();
         PPK_UCZ.PPK_UMO().PPK_UZA();
         .TAB.OB_PSL:=exec('parrap_b','ppk_uza',1).OB_PSL;
         PPK_UZA.cntx_pop();
         PPK_UMO.cntx_pop()

      ?};
      ~~
   ";

   _ae:="
      _TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tab(1,1) ?};
      _batch:=var_pres('_b')=type_of(0) & _b;
      _silent:={? _batch || 1 || ~~ ?};

      {? (_chk:=__CHK.record(_TAB,_silent,'DATA','NAZWISKO','PIERWSZE','OBYW'))<>''
      || return(_chk)
      ?};
      {? _TAB.OBYW='PL'
      || _chk:=__CHK.record(_TAB,_silent,'PESEL')
      |? _TAB.OB_PSL='T'
      || _chk:=__CHK.record(_TAB,_silent,'UR_DATA','DTOZ_TYP','DTOZ_SYM')
      |? ~((_TAB.UR_DATA<>date(0,0,0) & _TAB.DTOZ_SYM<>'') | _TAB.PESEL<>'')
      || FUN.emsg('Należy podać datę urodzenia wraz z dokumentem tożsamości lub PESEL.');
         _chk:='PESEL'
      ?};
      {? _chk=''
      || _TAB.DTOZ_SYM:={? _TAB.DTOZ_TYP='' || '' || gsub(_TAB.DTOZ_SYM,' ','') ?}
      ?};
      _chk
   "

|? _typ='DANE_ZMIANA'
:: Zmiana danych kontaktu elektronicznego (2.6 -> 3.4)
|| _STRU.add('DATA_ZMIANY','DATA','DATE','Data zmiany'@);
   _STRU.add(,'ZDS','STRING['+$MS.fld_len(PPK_XEL,'SYMBOL')+']','Symbol zmiany'@);
   _STRU.add(,'ZDO','STRING['+$MS.fld_len(PPK_XEL,'OPIS')+']','Opis zmiany'@);
   _STRU.add('KONTAKT_EMAIL','EMAIL','STRING[100]','Adres e-mail'@);
   _STRU.add('KONTAKT_TEL','TEL','STRING[50]','Numer telefonu'@);
:: Pole techniczne
   _STRU.add(,'RDA','STRING[16]','Wskazanie na raport'@);

   _TAB:=_STRU.crt_tab();

:: Okno redagowania
   _szer:=56;
   _we:=_TAB.mk_edit('Zmiana danych kontaktu elektronicznego'@,,'#zdnd');
   _TAB.win_esep(_we,'Dane podstawowe'@);
   _TAB.win_efld(_we,,'DATA',,,,,,,,'Data zmiany'@);
   _TAB.win_efld(_we,,'ZDS',,,_szer,,1,,,'Symbol procesu / wniosku'@);
   _TAB.win_efld(_we,,'ZDO',,,_szer,,1,,,'Opis procesu / wniosku'@);
   _TAB.win_esep(_we,'Dane kontaktu elektronicznego'@);
   _TAB.win_efld(_we,,'EMAIL',,,_szer,,,,,'Adres e-mail'@);
   _TAB.win_efld(_we,,'TEL',,,_szer,,,,,'Numer telefonu (polskiego)'@);

   _TAB.efld_opt(_we,'mark=1',,'DATA');

:: Formuły obsługi.
   _set:="
      _typ:={? var_pres('_a')=type_of('') || _a || 'ns' ?};
      _dt:={? var_pres('_b')=type_of(date()) || _b || date() ?};
      .TAB.blank();
      {? _typ*'n'
      || .TAB.DATA:=PPK_ZDN.DATA;
         .TAB.ZDS:=PPK_ZDN.PPK_XEL().SYMBOL;
         .TAB.ZDO:=PPK_XEL.OPIS;
         .TAB.RDA:=$PPK_ZDN.PPK_RDA
      ?};
      {? _typ*'s'
      || _find:=""
            _dt:=_a;
            _typ:=_b;
            _kontakt:=_c;
            {? _kontakt.email='' | _kontakt.tel=''
            || OS_ADRES.prefix(OSOBA.ref(),_typ,);
               {? OS_ADRES.find_le(_dt) & (OS_ADRES.DO=date(0,0,0) | _dt<=OS_ADRES.DO)
               || {? _kontakt.email=''
                  || _kontakt.email:=OS_ADRES.EMAIL
                  ?};
                  {? _kontakt.tel=''
                  || _kontakt.tel:=OS_ADRES.TEL
                  ?}
               ?};
               1
            ?}
         "";

         OS_ADRES.cntx_psh();
         OS_ADRES.index('RODZAJ');
         _kontakt:=obj_new('email','tel');
         _kontakt.email:=_kontakt.tel:='';
         _find(_dt,'K',_kontakt) | _find(_dt,'C',_kontakt) | _find(_dt,'S',_kontakt);
         {? _kontakt.email<>''
         || .TAB.EMAIL:=_kontakt.email
         ?};
         {? _kontakt.tel<>''
         || .TAB.TEL:=_kontakt.tel
         ?};
         OS_ADRES.cntx_pop()
      ?}
   ";

   _ae:="
      _TAB:={? var_pres('_a')=type_of(SYSLOG) || _a || cur_tab(1,1) ?};
      _batch:=var_pres('_b')=type_of(0) & _b;
      _silent:={? _batch || 1 || ~~ ?};

      __CHK.record(_TAB,_silent,'DATA')
   "

?};

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Budowa części wspólnych.

exec('ok_esc','#window',_TAB,_we,,,,,,,exec('text_red_ok','#window'));
_TAB.win_edit(_we);

_BUF:=obj_new('STRU','TAB','we','set','ae','edit','display','write','read');
_BUF.STRU:=_STRU;
_BUF.TAB:=_TAB;
_BUF.we:=_we;
_BUF.set:=_set;
_BUF.ae:=_ae;
_BUF.edit:="exec('_tab_efld_opt','ppk_zdn','*',.TAB,.we); .TAB.edit(.ae)";
_BUF.display:="
   PPK_RDA.cntx_psh();
   PPK_RDA.prefix();
   PPK_RPL.cntx_psh();
   PPK_RPL.prefix();
   .TAB.cntx_psh();
   {? +.TAB.RDA=16 & PPK_RDA.seek(.TAB.RDA)
   || PPK_RDA.PPK_RPL();
      _we:=.TAB.mk_edit('Zmiana danych identyfikacyjnych'@,,'#zdnrap',,,'html_maximized');
      .TAB.win_etab(_we,'Dane identyfikacyjne'@);
      .TAB.win_ewin(_we,.TAB,.TAB.win_edit('?'));
      .TAB.win_etab(_we,'Raport'@);
      .TAB.win_ewin(_we,PPK_RPL,'POP');
      .TAB.win_edit(_we)
   ?};
   .TAB.display();
   .TAB.cntx_pop();
   PPK_RPL.cntx_pop();
   PPK_RDA.cntx_pop()
";

_BUF.write:="
   _put:=var_pres('_a')=type_of(0) & _a;
   {? .STRU.TAB.first()
   || _ds:=do_state();
      {? _ds=0
      || do()
      |? _ds=2
      || return(0)
      ?};
      {? _put | PPK_ZDN.add()
      || PPK_ZDP.cntx_psh();
         PPK_ZDP.index('SYMBOL');
         PPK_ZDP.prefix(PPK_ZDN.ref());
         PPK_XEL.cntx_psh();
         _numer:=0;
         {!
         |? {? .STRU.TAB.TAG<>''
            || _numer+=1;
               _val:=($('xml_value(_a.'+.STRU.TAB.ACR+')'))(.TAB);
               {? PPK_ZDP.find_key(.STRU.TAB.TAG,)
               || {? _val=''
                  || PPK_ZDP.del();
                     _numer-=1
                  |? PPK_ZDP.NUMER<>_numer | PPK_ZDP.WARTOSC<>_val
                  || PPK_ZDP.NUMER:=_numer;
                     PPK_ZDP.WARTOSC:=_val;
                     PPK_ZDP.put()
                  ?}
               |? _val=''
::                Nie będziemy tworzyli rekordu z pustą wartością ...
               || ~~
               |? (_xel:=exec('szukaj','ppk_xel',.STRU.TAB.TAG))=null()
::                Brak elementu w słowniku?!
               || undo()
               || PPK_ZDP.blank();
                  PPK_ZDP.PPK_ZDN:=PPK_ZDN.ref();
                  PPK_ZDP.PPK_XEL:=_xel;
                  PPK_ZDP.WARTOSC:=_val;
                  PPK_ZDP.NUMER:=_numer;
                  PPK_ZDP.add()
               ?}
            ?};
            .STRU.TAB.next()
         !};
         {? PPK_ZDN.DATA<>.TAB.DATA
         || PPK_ZDN.DATA:=.TAB.DATA;
            PPK_ZDN.put()
         ?};
         PPK_XEL.cntx_pop();
         PPK_ZDP.cntx_pop()
      ?};
      {? _ds=0
      || end()
      || do_state()=1
      ?}
   ?}
";

_BUF.read:="
   {? .STRU.TAB.first()
   || .set('n');
      PPK_ZDP.cntx_psh();
      PPK_ZDP.index('SYMBOL');
      PPK_ZDP.prefix(PPK_ZDN.ref());
      {!
      |? {? .STRU.TAB.TAG<>'' & PPK_ZDP.find_key(.STRU.TAB.TAG,)
         || _vals:=PPK_ZDP.WARTOSC;
            _val:=
               {? .STRU.TAB.TYPE='DATE'
               || exec('str2date','#convert',_vals)
               || _vals
               ?};
            ($('_a.'+.STRU.TAB.ACR+':=_b'))(.TAB,_val)
         ?};
         .STRU.TAB.next()
      !};
      PPK_ZDP.cntx_pop();
      1
   ?}
";

_BUF


\_tab_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli _TAB. Formuła wywoływana jest
::       w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(SYSLOG)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='OBYW'
|| {? var_pres('OBYW',_TAB)>0
   || _val:=_TAB.OBYW='PL';
      _TAB.efld_opt(_we,'mark=%1' [$_val],_TAB,'PESEL');
      _sval:=$(~_val & _TAB.OB_PSL='T');
      _TAB.efld_opt(_we,'mark=%1' [_sval],_TAB,'UR_DATA');
      exec('_tab_efld_opt','ppk_zdn','1',_TAB,_we,'DTOZ_TYP')
   ?}
?};
{? _fld='' | _fld='DTOZ_TYP'
|| {? var_pres('DTOZ_TYP',_TAB)>0
   || _enable:=_TAB.DTOZ_TYP<>'';
      _TAB.efld_opt(_we,'enable=%1,mark=%2'
         [$(_enable),$(_enable & _TAB.OBYW<>'PL' & _TAB.OB_PSL='T')],_TAB,'DTOZ_SYM')
   ?}
?};

1


\_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_zdn') & exec('_chk','ppk_zdn',0)


\_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('_modb','ppk_zdn') & exec('_chk','ppk_zdn',1)


\_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPK_ZDN.PPK_RDA<>null()
|| undo('Zapis wykorzystywany w raportach wysyłanych do instytucji finansowej. Usunięcie nie jest możliwe.'@);
   return(0)
?};
exec('del_ndx','#table',PPK_ZDP,'XEL',PPK_ZDN.ref())


\_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? PPK_ZDN.PPK_UCZ
|| PPK_UCZ.cntx_psh();
   PPK_ZDN.FIRMA:=PPK_ZDN.PPK_UCZ().FIRMA;
   PPK_ZDN.OSOBA:=PPK_ZDN.PPK_UCZ().OSOBA;
   PPK_UCZ.cntx_pop()
?};
1


\_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli PPK_ZDN.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(PPK_ZDN,
   $("_a.table(_b,"+$_put+",,'DATA','PPK_XEL')"),
:: Testy merytoryczne.
::    Zakładamy, że:
::       - nie zmienia się uczestnik;
::       - nie zmienia się element (typ zmiany).
::       - akcję "Popraw" można wykonać tylko na ostatnim (dla danego typu) rekordzie.
   $("_ret:=0;
      _put:="+$_put+";
      _ref:={? _put || PPK_ZDN.ref() || null() ?};
      _dt:=PPK_ZDN.DATA;
      PPK_ZDN.cntx_psh();
      PPK_ZDN.index('XEL');
      PPK_ZDN.prefix(PPK_ZDN.PPK_UCZ,PPK_ZDN.PPK_XEL);
      {? _put
      || {? PPK_ZDN.seek(_ref)
         || {? PPK_ZDN.DATA=_dt
            || _ret:=1
            |? PPK_ZDN.prev()
            || _ret:=PPK_ZDN.DATA<_dt
            || _ret:=1
            ?}
         ?}
      |? PPK_ZDN.last()
      || _ret:=PPK_ZDN.DATA<_dt
      || _ret:=1
      ?};
      PPK_ZDN.cntx_pop();
      {? ~_ret
      || FUN.emsg('Nieprawidłowa data zmiany danych identyfikacyjnych / kontaktowych.'@);
         'DATA'
      || ''
      ?}
   "),
:: Pola nieredagowalne.
   "_a.record(_b,,'PPK_UCZ','AUTO')",
   "_a.in_set(_b,'AUTO',,'T','N')"
)


\_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli PPK_ZDN.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

~~


\dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknie WER tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_XEL.cntx_psh();
PPK_XEL.index('SYMBOL');
PPK_XEL.prefix();
PPK_XEL.f_set('SYMBOL',,'"PPK_XEL"."SYMBOL" in (\'UCZESTNIK_ZMIANA\',\'DANE_ZMIANA\')');
PPK_XEL.win_dict('SLO');

_be:=PPK_ZDN.fld_fml('PPK_XEL','BEFORE_EDIT',"
   _ws:=PPK_XEL.win_sel('?');
   PPK_XEL.win_sel('SLO');
   PPK_XEL.hdr_sel();
   PPK_XEL.hdr_sel('Typy zmian');
   PPK_XEL.win_sel(_ws);
   1
");
PPK_ZDN.win_edit('RED');
PPK_ZDN.blank();
PPK_ZDN.PPK_UCZ:=PPK_UCZ.ref();
{? PPK_ZDN.edit("exec('_chk','ppk_zdn',0)")
|| _BUF:=exec('_cfg','ppk_zdn',PPK_ZDN.PPK_XEL().SYMBOL,'BUF');
   _BUF.set(,PPK_ZDN.DATA);
   {? _BUF.edit()
   || _BUF.write(0)
   ?}
?};
PPK_ZDN.fld_fml('PPK_XEL','BEFORE_EDIT',_be);

PPK_XEL.f_clear();
PPK_XEL.cntx_pop();
~~


\popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Popraw - przed" w oknie WER tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_XEL.cntx_psh();
PPK_XEL.index('SYMBOL');
PPK_XEL.prefix();
_BUF:=exec('_cfg','ppk_zdn',PPK_ZDN.PPK_XEL().SYMBOL,'BUF');
{? _BUF.read() & _BUF.edit()
|| _BUF.write(1)
?};
PPK_XEL.cntx_pop();
~~


\wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknie WER tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
PPK_XEL.cntx_psh();
PPK_XEL.index('SYMBOL');
PPK_XEL.prefix();
_BUF:=exec('_cfg','ppk_zdn',PPK_ZDN.PPK_XEL().SYMBOL,'BUF');
{? _BUF.read()
|| _BUF.display()
?};
PPK_XEL.cntx_pop();
~~


\legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.51]
:: OPIS: Obsługa akcji "Legenda - przed" w oknie WER tabeli PPK_ZDN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','PPK_ZDN#01');
~~


\bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.22]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WER tabeli PPK_ZDN.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','PPK_ZDN#01#')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 64a5db0089d72bc66543bc4d50b11a5485b75e37209493f3f487d20c98eccd55081d24c469932134ead90caddeb714c0b41ef820d562e5566941571fd1e53edf72f0720c3d2021937b54a14c0656906e417a5eef1fbea094896cd8fe96bc3432edd62aa83a8905d211ec379a810b83cec63303468436ecc8b789778b6e4cc43f
