:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: braki_k.fml
:: Utworzony: 03.08.2015
:: Autor: GZ
::======================================================================================================================
:: Zawartość: Obsługa kwalifikacji braków
::======================================================================================================================


\braki_nrprz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Przed wyswietl dla numeru przewodnika w oknie kwalifikacji brakow
::   WE:
::   WY: ZGH.NRPRZ
::----------------------------------------------------------------------------------------------------------------------
BRAKI_K.ZGP_SRC().NRPRZ().NRPRZ


\gen_tab_brak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Generuje tabelę braków do zlecenia
::   WE:
::   WY: _tab - tabela braków do zlecenia
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(5,
:: 'POLE','TYP','Nazwa w oknie',
   'ZL_SYM','STRING[20]','Symbol zlecenia',
   'NRPRZ','STRING[25]','Numer przewodnika',
   'OPIS','STRING[50]','Operacja',
   'DATE','DATE','Data',
   'WYKON','STRING[50]','Wykonawca',
   'M_KTM','STRING[50]','Wyrób zlecenia',
   'TWRKPLC','STRING[100]','Stanowisko',
   'IL_BRAK','REAL','Ilośc braków',
   'IL_KWAL','REAL','Ilość zakwalifikowana',
   'IL_WYK','REAL','Ilość wykonana',
   'CZAS','REAL','Czas',
   'DOKL','INTEGER','Dokładność',
   'ZLGDREF','STRING[16]','ZLGDREF',
   'ZGPREF','STRING[16]','ZGPREF',
   'ZL_REF','STRING[16]','Sql REF zlecenia',
   'BRAKI_R','STRING[20]','Rodzaj braku'
);
_tab


\load_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Ładuje zawartość tabeli
::   WE: _a - TABLE - uchwyt do tabeli
::       [_b] - ZL.ref() - zlecenie lub bieżący rekord
::       [_c] - INTEGER - tryb ładowania: [1] - ładować wszystkie
::                                         2  - ładować tylko nie zakończone
::   WY: 0/1
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

_ref:=null();
{? var_pres('_b')=type_of(ZL.ref())
|| _ref:=_b
?};

_mode:=1;
{? var_pres('_c')=type_of(0)
|| _mode:=_c
?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh();
{? _ref<>null()
|| ZL.prefix();
   {? ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
|| ZLGD.cntx_psh();
   ZGH.cntx_psh();
   ZGP.cntx_psh();
   P.cntx_psh();
   ZLBR.cntx_psh();
   BRAKI_GD.cntx_psh();
   ZL.cntx_psh();
   {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
   || ZL.index('NRNZL')
   || ZL.index('UNRZL')
   ?};
   ZL.prefix(ZL.UNRZL);
   {? ZL.first()
   || {!
      |? _names:=ZLGD.names();
         {? _names.first()
         || {!
            |? ZLGD.use(_names.NAME);
               {? _mode=1
               || ZLGD.index('ZLECENIE');
                  ZLGD.prefix(ZL.ref())
               |? _mode=2
               || ZLGD.index('BRAKI');
                  ZLGD.prefix('N',ZL.ref())
               ?};
               {? ZLGD.first()
               || {!
                  |? {? ZLGD.IL_BRAK>0
                     || _tab.blank();
                        {? ZLGD.BP='P'
                        || _tab.WYKON:='Pracownik: '+ZLGD.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE
                        || _tab.WYKON:='Brygada: '+ZLGD.B().KOD+' '+ZLBR.NAZ
                        ?};
                        _tab.ZL_REF:=$ZL.ref();
                        _tab.ZL_SYM:=ZL.SYM;
                        _tab.M_KTM:=ZL.KTM().KTM;
                        _tab.TWRKPLC:=ZLGD.PLACE().KOD;
                        _tab.IL_WYK:=ZLGD.IL;
                        _tab.NRPRZ:=ZLGD.ZGH().NRPRZ;
                        _tab.OPIS:=ZLGD.ZGP().OPIS;
                        _tab.DATE:=ZLGD.DT;
                        _tab.IL_BRAK:=ZLGD.IL_BRAK;
                        _tab.IL_KWAL:=exec('count_kwal4zlgd','braki_k',ZLGD.ref());
                        _tab.CZAS:=ZLGD.TIME;
                        _tab.DOKL:=ZL.KTM().DOKL;
                        _tab.ZLGDREF:=$ZLGD.ref();
                        _tab.ZGPREF:=$ZLGD.ZGP;
                        _tab.BRAKI_R:={? ZLGD.BRAKI_R<>null() || ZLGD.BRAKI_R().KOD || '' ?};
                        _can_continue:=_tab.add()
                     ?};
                     ZLGD.next()
                  !}
               ?};
               _names.next()
            !}
         ?};
         obj_del(_names);
         ZL.next()
      !}
   ?};
   ZL.cntx_pop();
   BRAKI_GD.cntx_pop();
   P.cntx_pop();
   ZLBR.cntx_pop();
   ZGP.cntx_pop();
   ZGH.cntx_pop();
   ZLGD.cntx_pop();
   ~~
?};
ZL.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\load_tab_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Ładuje tabelkę dla wszystkich zleceń z brakami
::   WE: _a - TABLE - uchwyt do tabeli
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_tab.erase();
ZL.cntx_psh();
ZL.index('BRAKI');
ZL.prefix('T','N');
{? ZL.first()
|| {!
   |?
::    Wykluczam zlecenia złożone/niezależne (zarówno nagłowek jak i zlecenia podrzędne mają oznaczone pole
::    niezakwalifikowanych braków (ZL.BRAKI), pomijam nagłówki żeby nie dublować danych i szybciej przejść po zleceniach
      {? ZL.RODZAJ<>'Z' & ZL.RODZAJ<>'N'
      || exec('load_tab','braki_k',_tab,,2)
      ?};
      ZL.next()
   !}
?};
_tab.first();
ZL.cntx_pop();
~~


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Wyświetla okno kwalifikacji braków
::   WE: _a - INTEGER - [0]/1 - czy dostępny przycisk Zakończ
::       [_b] - TABLE - tabela do której należy okno grupowe
::       [_c] - STRING - akronim okna grupowego do którego dodawać, jeżeli nie podane
::                       to tworzone okno
::       [_d] - STRING - nazwa zakładki do której dodawać okno
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_zakoncz:=0;
{? var_pres('_a')=type_of(0)
|| _zakoncz:=_a
?};
_table:=~~;
{? var_pres('_b')>100
|| _table:=_b
?};

_sel:='';
{? var_pres('_c')=type_of('')
|| _sel:=_c
?};
_tab:='';
{? var_pres('_d')=type_of('')
|| _tab:=_d
?};

:: Inicjalizacja środowiska
_env_braki:=obj_new('TAB','RELOAD');
_env_braki.TAB:=_tab;
_env_braki.RELOAD:=0;
_env:=obj_new('env_limit');
_env.env_limit:=exec('env_limit','zl_limit');
params_set('env_braki',_env_braki,'env',_env);

exec('zgp_icons','zl_guide','SLO_BRAK');

_result:=0;
ZL.cntx_psh();
ZGH.cntx_psh();
ZGP.cntx_psh();
ZLIM.cntx_psh();
_a_zlec:=VAR.A_ZLEC;
BRAKI_R.win_dict('WER');
BRAKI_R.actions('WER','O');
:: okno zarejestrowanych brakow do zlecenia
VAR_DEL.delete('__zlgdbrak','__zlgdwer','__zlgdndx');
__zlgdbrak:=exec('gen_tab_brak','braki_k');
{? type_of(_table)=0
|| _table:=__zlgdbrak
?};
__zlgdndx:=__zlgdbrak.ndx_tmp(,,'ZLGDREF',,);
__zlgdwer:=__zlgdbrak.mk_sel('Zarejestrowane braki'@,'P',0,'#brakselsel',,10,,,'U');
__zlgdbrak.win_fld(__zlgdwer,,'ZL_SYM',,,10,,,'Zlecenie'@);
__zlgdbrak.win_fld(__zlgdwer,,'NRPRZ',,,13,,,'Przewodnik'@,,'Numer przewodnika'@);
__zlgdbrak.win_fld(__zlgdwer,,'OPIS',,,30,,,'Operacja'@,,'Operacja'@);
__zlgdbrak.win_fld(__zlgdwer,,'WYKON',,,26,,,'Wykonawca'@,,'Wykonawca'@);
__zlgdbrak.win_fld(__zlgdwer,,'DATE',,,10,,,'Data'@,,'Data rejestracji czasu pracy'@);
__zlgdbrak.win_fld(__zlgdwer,,'IL_BRAK',,,-17,4,,'Ilość braków'@,,'Ilość braków'@);
__zlgdbrak.win_fld(__zlgdwer,,'IL_KWAL',,,-17,4,,'Ilość zakwalifikowana'@,,'Ilość zakwalifikowana'@);
__zlgdbrak.win_fld(__zlgdwer,,'CZAS',,,10,4,,'Czas'@,,'Zarejestrowany czas pracy'@);
__zlgdbrak.win_act(__zlgdwer,,'Formuła','Kwali&fikuj'@@,,,"params_exec('braki_kwal','braki_k')",,1,1,
                  "exec('braki_kwal_gr1','braki_k')","params_exec('braki_kwal_gr2','braki_k')",'F');

_fml:="params_exec('braki_zakoncz','braki_k')";
_fml_gr1:="params_exec('braki_zakoncz_gr1','braki_k')";
_fml_gr2:="params_exec('braki_zakoncz_gr2','braki_k')";
__zlgdbrak.win_act(__zlgdwer,,'Formuła','Zakończ'@@,,,_fml,,,1,_fml_gr1,_fml_gr2,'Z');
__zlgdbrak.win_act(__zlgdwer,0,'Formuła','Widok'@@,,,"params_exec('widok','braki_k')",,,,,,'W');
__zlgdbrak.win_act(__zlgdwer,1,'Formuła','Widok'@@,,,"params_exec('widok','braki_k')",,,,,,'W');

__zlgdbrak.win_act(__zlgdwer,,'Formuła','Legenda'@@,,,"params_exec('legenda','color','#ROB#03')",,,,,,'L');
__zlgdbrak.win_act(__zlgdwer,,'Kolejność');
_winfml:=" {? 1+cur_tab(1,1).WYKON='P'
           || 'xwin16.png:100'
           |? 1+cur_tab(1,1).WYKON='B'
           || 'xwin16.png:31'
           || 'xwin16.png:76'
           ?}
         ";
__zlgdbrak.win_fml(__zlgdwer,, 'WYKON',, 'ICON_BEFORE',_winfml);

:: Przyciski w górnym oknie
_btn_kwal:=__zlgdbrak.win_btn(__zlgdwer,'text=%1'['Kwali&fikuj'@@],'menu:F');
_btn_zak:=__zlgdbrak.win_btn(__zlgdwer,'text=%1,panel=right'['Zakończ'@@],'menu:Z');
{? _zakoncz>0
|| __zlgdbrak.actions_grayed(__zlgdwer)
|| __zlgdbrak.actions_grayed(__zlgdwer,'Z')
?};

__zlgdbrak.win_sel(__zlgdwer);

__zlgdbrak.fld_attr('ZLGDREF',2); __zlgdbrak.fld_attr('ZGPREF',2); __zlgdbrak.fld_attr('WYKON',2);
__zlgdbrak.fld_fml('DATE','DISPLAY_FORMAT',"{? fld()=date(0,0,0) || 'empty=1' || 'empty=0' ?}");

:: obiekt dla okna limitow
{? var_pres('__ZLIMp')>100 || _ZLIMp_buf:=__ZLIMp || _ZLIMp_buf:=~~ ?};
VAR_DEL.delete('__ZLIMp');
_ZLIMp:=_env.env_limit.ZLIMp;
__ZLIMp:=_ZLIMp;

__ZLIMp.ZL:=ZL.ref();
__ZLIMp.ZGH:=null();
__ZLIMp.View:=0;
__ZLIMp.Limit:='T';
__ZLIMp.A_edit:={? exec('stat_l','zl_limit',ZL.ref())<>'T' | VAR.A_ZLEC().STAN='O' || 'T' || 'N' ?};

exec('__ZLIM_prepwin','zl_limit',__ZLIMp,,,0);
_zlimsel:=__ZLIMp.WERP;
__ZLIMp.ZLIM.actions(_zlimsel,'GZ:GZ');
_nlimact:=ZLIM.actions('WERNLB','GZ:GZ');

:: sklejam okno grupowe

_brakifar:="
   {? BRAKI_K.size>0
   || ZGP.index('BRAKI');
      ZGP.prefix(BRAKI_K.ref(),'N');
      ZGP.first()
   || ZGP.index('NRPP');
      ZGP.prefix(null(),'x','xxxxx',9999)
   ?};
   grp_disp(ZGP,'SLO_BRAK',1)
";

_zgpfar:="";
_zlimfb:="";

{? exec('widok_complex','braki_k')>0
||
   _zgpfar:="
      {? ZGP.size()>0
      ||
         VAR.A_ZGP:=ZGP.ref();
::       ZGH.prefix(exec('FindAndGetQ','libfml',ZGP,cur_tab(1,1).ZGPREF,'ZGP.NRPRZ().NRPRZ',null()));
         VAR.A_ZLEC:=ZGP.ZL;
         __ZLIMp.ZL:=ZGP.ZL;
         __ZLIMp.ZGH:=ZGP.NRZLP;
         __ZLIMp.ZGP:=ZGP.ref();
         exec('__ZLIM_datapump','zl_limit',__ZLIMp);
         __ZLIMp.ZLIM.first();
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(ZGP.ref,'N');
         ZLIM.first();
         ~~
      || VAR.A_ZGP:=null();
         __ZLIMp.ZGP:=null();
         __ZLIMp.ZLIM.prefix(0);
         {? __ZLIMp.ZLIM.first()
         || {!
            |? exec('del_tree_branch','#tree',__ZLIMp.ZLIM,'PARENT',,__ZLIMp.ZLIM.ref());
               __ZLIMp.ZLIM.del()
            !}
         ?};
         __ZLIMp.ZLIM.clear();
         {? __ZLIMp.ZLIM.first() || {! |? __ZLIMp.ZLIM.del() !} ?};
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(null(),'N',10000)
      ?};
      grp_disp(NASZGP,'WER');
      grp_disp(NASZGP,'SLOPOP');
      grp_disp(ZLIM,'WERNLB');
      grp_disp(__ZLIMp.ZLIM,__ZLIMp.WERP)
   ";
   _zlimfb:="
      _result:=~~;
      ZGH.index('ZLNR');
      {? ZGP.size()>0
      || ZLIM.index('ZGP_NM');
         ZLIM.prefix(ZGP.ref,'N');
         ZLIM.first()
      || _result:='#disable';
         ZLIM.index('ZGP_NM');
         ZLIM.prefix(null(),'N',10000)
      ?};
      _result
   "
?};

{? _sel=''
|| {? exec('interm','#system')=0
   || _sel:=_table.grp_make('Obsługa operacji naprawczych zlecenia: %1'@[ZL.SYM],"~~",'#braki_k_1',,,,,,'jterm')
   || _sel:=_table.grp_make('Obsługa operacji naprawczych zlecenia: %1'@[ZL.SYM],"~~",'#braki_k_1')
   ?}
?};
_before:="
   _env_braki:=params_get().env_braki;
   _tab:=__zlgdbrak;
   {? ZL.seek(_tab.ZL_REF)
   || exec('openmask','zl_common',ZL.ref())
   ?};
   _view:=__zlgdbrak.ref();
   {? _env_braki.TAB<>'' & (_a>0 | _env_braki.RELOAD>0)
   || exec('load_tab_all','braki_k',__zlgdbrak);
      _env_braki.RELOAD:=0
   ?};
   {? _view<>null()
   || __zlgdbrak.seek(_view)
   ?};
   ~~
";
{? _tab<>''
|| exec('load_tab_all','braki_k',__zlgdbrak)
|| exec('load_tab','braki_k',__zlgdbrak)
?};

{? _tab<>''
||
   _far:="
      BRAKI_K.index('BRAKI');
      BRAKI_K.prefix('N',exec('FindAndGet','#table',ZGP,__zlgdbrak.ZGPREF,,,null()));
      VAR1.NRPRZ:=BRAKI_K.ZGP_SRC().NRPRZ().NRPRZ;
      BRAKI_K.first();
      grp_disp(BRAKI_K,'WER',1)
   "
||
   _far:="
      BRAKI_K.index('ZGP_SRC');
      BRAKI_K.prefix(exec('FindAndGet','#table',ZGP,__zlgdbrak.ZGPREF,,,null()));
      VAR1.NRPRZ:=BRAKI_K.ZGP_SRC().NRPRZ().NRPRZ;
      BRAKI_K.first();
      grp_disp(BRAKI_K,'WER',1)
   "
?};

_table.grp_sel(_sel,__zlgdbrak,__zlgdwer,_tab,_far,,,,_before,,,,'maximized_with_title');
task_attach('TTE_PZL_DGBR');
{? _tab<>''
|| _table.tab_splt(_sel,,'horizontal','KWALIFIKACJA')
|| _table.grp_splt(_sel,,'horizontal','KWALIFIKACJA',',33%')
?};
_table.grp_sel(_sel,BRAKI_K,'WER',,_brakifar,,,,,,,,'maximized_with_title');
task_attach('TTE_PZL_DGBR');
{? _tab<>''
|| _table.tab_splt(_sel,'KWALIFIKACJA','horizontal','ZGP')
|| _table.grp_splt(_sel,'KWALIFIKACJA','horizontal','ZGP',',50%')
?};
_table.grp_sel(_sel,ZGP,'SLO_BRAK',,_zgpfar,,,,,,,,'maximized_with_title');
task_attach('TTE_PZL_DGBR');
{? exec('widok_complex','braki_k')>0
||
   {? _tab<>''
   || _table.tab_splt(_sel,'ZGP','vertical','nast1')
   || _table.grp_splt(_sel,'ZGP','vertical','nast1')
   ?};
   _ar:="";
   _fb:="
      _result:=~~;
      {? ZGP.size()=0
      || _result:='#disable'
      ?};
      NASZGP.index('NASTOP');
      NASZGP.prefix(VAR.A_ZGP);
      {? ~NASZGP.first() || VAR.STRING3:='' ?};
      ZGP.cntx_psh();
      _result
   ";
   _fa:="
      ZGP.cntx_pop();
      ~~
   ";
   _table.grp_sel(_sel,NASZGP,'SLOPOP',,_ar,,,3,_fb,_fa,,,'maximized_with_title');
   task_attach('TTE_PZL_DGBR');
   {? _tab<>''
   || _table.tab_splt(_sel,'nast1','horizontal','nast2')
   || _table.grp_splt(_sel,'nast1','horizontal','nast2')
   ?};
   _ar:="";
   _fb:="
      _result:=~~;
      {? ZGP.size()=0
      || _result:='#disable'
      ?};
      {? VAR.A_ZLEC().STAN='Z'
      || NASZGP.actions('WER','dI:dI',,1)
      |? ZGP.size()=0
      || NASZGP.actions('WER','d:d',,1)
      || NASZGP.actions('WER','',,1)
      ?};
      NASZGP.index('OPNAST');
      NASZGP.prefix(VAR.A_ZGP);
      {? ~NASZGP.first() || VAR.STRING3:='' ?};
      ZGP.cntx_psh();
      _result
   ";
   _fa:="
      ZGP.cntx_pop();
      ~~
   ";
   _table.grp_sel(_sel,NASZGP,'WER',,_ar,,,3,_fb,_fa,,,'maximized_with_title');
   task_attach('TTE_PZL_DGBR');

   {? _tab<>''
   || _table.tab_splt(_sel,'ZGP','horizontal','ZLIM')
   || _table.grp_splt(_sel,'ZGP','horizontal','ZLIM')
   ?};
   _fb:="
      _result:=~~;
      {? ZGP.size()=0
      || _result:='#disable'
      ?};
      _result
   ";
   {? _tab<>''
   || _table.grp_sel(_sel,__ZLIMp.ZLIM,_zlimsel,,,,,,_fb,,,,'maximized_with_title');
      task_attach('TTE_PZL_DGBR');
      _table.tab_splt(_sel,'ZLIM','horizontal','NLIM');
      _table.grp_sel(_sel,ZLIM,'WERNLB',,,,,5,_zlimfb,,,,'maximized_with_title');
      task_attach('TTE_PZL_DGBR')
   || _table.grp_sel(_sel,__ZLIMp.ZLIM,_zlimsel,,,,,,_fb,,,,'maximized_with_title');
      task_attach('TTE_PZL_DGBR');
      _table.grp_splt(_sel,'ZLIM','horizontal','NLIM');
      _table.grp_sel(_sel,ZLIM,'WERNLB',,,,,5,_zlimfb,,,,'maximized_with_title');
      task_attach('TTE_PZL_DGBR')
   ?};
   ~~
?};
{? _tab=''
|| _table.win_sel(_sel);
   _result:=_table.select();

:: czyszczenie po funkcji
   ZLIM.actions('WERNLB','',_nlimact);
   VAR_DEL.delete('__ZLIMp');
   __ZLIMp:=_ZLIMp_buf;

   __zlgdbrak.ndx_drop(__zlgdndx);
   VAR_DEL.delete('__zlgdbrak','__zlgdwer','__zlgdndx');
   VAR.A_ZLEC:=_a_zlec
?};


ZLIM.cntx_pop();
ZGP.cntx_pop();
ZGH.cntx_pop();
ZL.cntx_pop();
_result


\braki_kwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja 'Kwalifikuj' w oknie wertowania tabeli tymczasowej braków do zlecenia
::   WE:
::   WY: 0/1 - porażka/sukces
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_ask:=1;
_group:=0;
_result:=0;
VAR.GEN_NAPR:='N';
_tab:=cur_tab(1,1);
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1
?};

{? _group=0
|| _zgpref:=_tab.ZGPREF;
   _il_brak:=_tab.IL_BRAK-_tab.IL_KWAL;
   ZGP.cntx_psh();
   ZGH.cntx_psh();
   BRAKI_GD.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(_zgpref,form(8+_zgpref))
   || BRAKI_K.blank();
      BRAKI_K.ZGP_SRC:=ZGP.ref();
      VAR1.NRPRZ:=ZGP.NRPRZ().NRPRZ;
      BRAKI_K.IL:=_il_brak;
      {? _tab.BRAKI_R<>''
      || BRAKI_K.BRAKI_R:=exec('FindInSet','#table','BRAKI_R','KOD',_tab.BRAKI_R,,,1,,null())
      ?};
      _nrprz:=ZGP.NRPRZ;
      _nrzlp:=ZGP.NRZLP;
      _nrp:=ZGP.NRP;
      _zl:=ZGP.ZL;
      _zgh:=ZGP.NRPRZ;
::    Ustawienie filtru na rodzaj braków
      exec('braki_r_filter','braki',ZGP.ref());
      ZGP.prefix();
      _close:=$("
         {? _a='TEN'
         || {? exec('chk_path','braki',exec('FindAndGet','#table',ZGP,'"+_zgpref+"'),ZGP.ref())
            || 1
            || FUN.emsg(
                  'Nie można wybrać tego zapisu.\n'
                  'Operacja, od której powtarzać musi należeć do tej samej ścieżki procesu co operacja naprawiana.'@
               );
               0
            ?}
         || 1
         ?}
      ");
      _win_slo:=ZGP.grp_make('Operacje naprawcze'@,,'grpslonapr',,,_close,,'normal');
      ZGP.grp_sel(_win_slo,,'SLO_BRAK',,,,,,,,,,'maximized');
      ZGP.win_dict(_win_slo);
      ZGP.actions('SLO_BRAK','K',,1);
      ZGP.f_set('NRP',,'ZGP.NRPRZ=:_a AND ZGP.NRP<=:_b AND ZGP.NRZLP=:_c AND ZGP.TPZ=\'N\'',_nrprz,_nrp,_nrzlp);
      exec('efl_opt','braki_k');
      {? BRAKI_K.edit("exec('chk_kwal','braki_k')")
      || ZGP.f_clear();
         BRAKI_K.IL:=BRAKI_K.IL_NNAPR+BRAKI_K.IL_NAPR;
         do();
         BRAKI_K.UID:=exec('uid','#blank');
         _result:=BRAKI_K.add();
         BRAKI_GD.blank();
         BRAKI_GD.clear();
         BRAKI_GD.BRAKI:=BRAKI_K.ref();
         BRAKI_GD.IL:=BRAKI_K.IL_NNAPR+BRAKI_K.IL_NAPR;
         BRAKI_GD.BRAKI_RK:=BRAKI_K.BRAKI_R;
::       Rozpisanie na ilości naprawialne/nienaprawialne (dla akcji niegrupowej zawsze 1 do 1)
         BRAKI_GD.IL_NAPR:=BRAKI_K.IL_NAPR;
         BRAKI_GD.IL_NNAPR:=BRAKI_K.IL_NNAPR;
         BRAKI_GD.DTK:=exec('get','daty',date());
         BRAKI_GD.USR_KWAL:=OPERATOR.USER;
         ZLGD.cntx_psh();
         ZLGD.clear();
         {? ZLGD.seek(_tab.ZLGDREF,ref_name(_tab.ZLGDREF),1)
         || BRAKI_GD.ZLGD:=ZLGD.ref();
::            BRAKI_GD.ZLGD:=exec('FindAndGet','#table',ZLGD,_tab.ZLGDREF,,,null());
            BRAKI_GD.ZL:=ZLGD.ZL;
            BRAKI_GD.ZGH:=ZLGD.ZGH;
            BRAKI_GD.ZGP:=ZLGD.ZGP;
            {? ZLGD.KOOP='T'
            || ZGP.cntx_psh();
               KH.cntx_psh();
               BRAKI_GD.WYKON:=ZLGD.ZGP().KONTRAH().NAZ;
               ZGP.cntx_pop();
               KH.cntx_pop()
            || {? ZLGD.BP='P'
               || BRAKI_GD.WYKON:=ZLGD.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE
               || BRAKI_GD.WYKON:=ZLGD.B().KOD+' '+ZLBR.NAZ
               ?}
            ?};
            ZL.cntx_psh();
            M.cntx_psh();
            BRAKI_GD.KTM:=ZLGD.ZL().KTM;
            BRAKI_GD.MGR:=ZLGD.ZL().KTM().MGR;
            BRAKI_GD.JM:=ZLGD.ZL().KTM().J;
            M.cntx_pop();
            ZL.cntx_pop();
            BRAKI_GD.PLACE:=ZLGD.PLACE;
            BRAKI_GD.BRAKI_RR:=ZLGD.BRAKI_R;
            BRAKI_GD.DTR:=exec('get','daty',ZLGD.DT)
         ?};
         ZLGD.cntx_pop();
         BRAKI_GD.add();
         _tab.IL_KWAL+=BRAKI_GD.IL;
         _tab.put();
         end();
         {? VAR.GEN_NAPR='T'
         || exec('gen_napr','braki_k',0)
         ?};
::       Aktualizacja pola ZL.BRAKI, ZGH.BRAKI po kwalifikacji
         {? _result>0
         || exec('update_braki','zl_common',_zl);
            exec('update_braki','zl_common',_zgh,,,ZGH)
         ?};
::       Obsługa procesowości - update opisów
         _zl_uid:=exec('FindAndGet','#table',ZL,VAR.A_ZLEC,,"uidref()",'');
         exec('desc_update','#b__box',_zl_uid,'TTE_PZL_DGBR');
         ~~
      ?};
      ZGP.actions('SLO_BRAK');
      ZGP.f_clear()
   ?};
   BRAKI_GD.cntx_pop();
   ZGP.cntx_pop();
   ZGH.cntx_pop();
   grp_disp(cur_tab(1,1),cur_win(1,1),1)
|| _result:=1
?};
_result


\braki_kwal_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja grupa przed 'Kwalifikuj' w oknie wertowania tabeli tymczasowej braków do zlecenia
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
KOMM.init(250,,'Kwalifikacja braków'@);
_group:=1;
_result:=0;
_il_brak:=0;
_can_continue:=1;
_zgp_ref:='';
VAR.GEN_NAPR:='N';

_tab:=cur_tab(1,1);
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1;
   _tab.cntx_psh();
   _tab.prefix();
   _tabsel:=_tab.sel_aget();
   sel_nchk();

   {? _tabsel.first()
   ||
      _zgpref:='';
      {? _tab.seek(_tabsel.REF,)
      || _zgpref:=_tab.ZGPREF
      ?};

      {!
      |? {? _tab.seek(_tabsel.REF,)
         || _il_brak+=(_tab.IL_BRAK-_tab.IL_KWAL);
            {? _tab.ZGPREF<>_zgpref
            || FUN.emsg('Braki do kwalifikacji muszą pochodzić z tej samej operacji i tego samego przewodnika.'@);
               _can_continue:=0
            ?}
         ?};
         _tabsel.next() & _can_continue>0
      !}
   ?};
   _tab.cntx_pop()
?};

{? _can_continue=1 & _zgpref<>''
|| ZGP.cntx_psh();
   ZGH.cntx_psh();
   ZGP.clear();
   {? ZGP.seek(_zgpref,form(8+_zgpref))
   || BRAKI_K.blank();
      BRAKI_K.ZGP_SRC:=ZGP.ref();
      VAR1.NRPRZ:=ZGP.NRPRZ().NRPRZ;
      BRAKI_K.IL:=_il_brak;
      _nrprz:=ZGP.NRPRZ;
      _nrzlp:=ZGP.NRZLP;
      _nrp:=ZGP.NRP;
      _zl:=ZGP.ZL;
      _zgh:=ZGP.NRPRZ;
::    Ustawienie filtru na rodzaj braków
      exec('braki_r_filter','braki',ZGP.ref());
      ZGP.prefix();
      ZGP.win_dict('SLO_BRAK');
      ZGP.f_set('NRP',,'ZGP.NRPRZ=:_a AND ZGP.NRP<=:_b AND ZGP.NRZLP=:_c AND ZGP.TPZ=\'N\'',_nrprz,_nrp,_nrzlp);
      exec('efl_opt','braki_k');
      {? BRAKI_K.edit("exec('chk_kwal','braki_k')")
      || BRAKI_K.IL:=BRAKI_K.IL_NNAPR+BRAKI_K.IL_NAPR;
         do();
         BRAKI_K.UID:=exec('uid','#blank');
         _add:=BRAKI_K.add();
         _tab.cntx_psh();
         _tabsel.first();
         _tab.seek(_tabsel.REF,);
         _il_brak:=BRAKI_K.IL_NAPR+BRAKI_K.IL_NNAPR;
         _il_napr:=BRAKI_K.IL_NAPR;
         _il_nnapr:=BRAKI_K.IL_NNAPR;
         {!
         |?
            _tab.seek(_tabsel.REF,);
            BRAKI_GD.blank();
            BRAKI_GD.clear();
            BRAKI_GD.BRAKI:=BRAKI_K.ref();
            _il_dop:=_tab.IL_BRAK-_tab.IL_KWAL;
            {? _il_dop>0
            || {? _il_brak>=_il_dop>0
               || BRAKI_GD.IL:=_il_dop
               || BRAKI_GD.IL:=_il_brak
               ?}
            ?};
            BRAKI_GD.BRAKI_RK:=BRAKI_K.BRAKI_R;
            BRAKI_GD.DTK:=exec('get','daty',date());
            BRAKI_GD.USR_KWAL:=OPERATOR.USER;
            ZLGD.cntx_psh();
            ZLGD.clear();
            {? ZLGD.seek(_tab.ZLGDREF,ref_name(_tab.ZLGDREF),1)
            || BRAKI_GD.ZLGD:=ZLGD.ref();
::            BRAKI_GD.ZLGD:=exec('FindAndGet','#table',ZLGD,_tab.ZLGDREF,,,null());
               BRAKI_GD.ZL:=ZLGD.ZL;
               BRAKI_GD.ZGH:=ZLGD.ZGH;
               BRAKI_GD.ZGP:=ZLGD.ZGP;
               {? ZLGD.KOOP='T'
               || ZGP.cntx_psh();
                  KH.cntx_psh();
                  BRAKI_GD.WYKON:=ZLGD.ZGP().KONTRAH().NAZ;
                  ZGP.cntx_pop();
                  KH.cntx_pop()
               || {? ZLGD.BP='P'
                  || BRAKI_GD.WYKON:=ZLGD.P().OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE
                  || BRAKI_GD.WYKON:=ZLGD.B().KOD+' '+ZLBR.NAZ
                  ?}
               ?};
               ZL.cntx_psh();
               M.cntx_psh();
               BRAKI_GD.KTM:=ZLGD.ZL().KTM;
               BRAKI_GD.MGR:=ZLGD.ZL().KTM().MGR;
               BRAKI_GD.JM:=ZLGD.ZL().KTM().J;
               M.cntx_pop();
               ZL.cntx_pop();
               BRAKI_GD.PLACE:=ZLGD.PLACE;
               BRAKI_GD.BRAKI_RR:=ZLGD.BRAKI_R;
               BRAKI_GD.DTR:=exec('get','daty',ZLGD.DT)
            ?};
            ZLGD.cntx_pop();
::          Rozpisanie na ilości naprawialne/nienaprawialne
            _rm:=roundmet();
            roundmet(5);
            _dokl:=exec('jaka_dok_m','jm',BRAKI_GD.KTM);
            _wsp:=BRAKI_GD.IL/BRAKI_K.IL;
            _napr:=(BRAKI_K.IL_NAPR*_wsp)$_dokl;
            _nnapr:=(BRAKI_K.IL_NNAPR*_wsp)$_dokl;
            {? _napr>_il_napr
            || BRAKI_GD.IL_NAPR:=_il_napr
            || BRAKI_GD.IL_NAPR:=_napr
            ?};
            {? _nnapr>_il_nnapr
            || BRAKI_GD.IL_NNAPR:=_il_nnapr
            || BRAKI_GD.IL_NNAPR:=_nnapr
            ?};
::          Ewentualne korekty zaokrągleń
            _diff:=BRAKI_GD.IL_NAPR+BRAKI_GD.IL_NNAPR-BRAKI_GD.IL;
            {? _diff<>0
            || _left:=_diff;
               {? _diff>0
               ||
::                Rozpisano za dużo
                  {? BRAKI_GD.IL_NAPR>0
                  || {? BRAKI_GD.IL_NAPR>=_left
                     || BRAKI_GD.IL_NAPR-=_left;
                        _left:=0
                     || _left-=BRAKI_GD.IL_NAPR;
                        BRAKI_GD.IL_NAPR:=0
                     ?}
                  ?};
                  {? _left>0 & BRAKI_GD.IL_NNAPR>0
                  || {? BRAKI_GD.IL_NNAPR>=_left
                     || BRAKI_GD.IL_NNAPR-=_left;
                        _left:=0
                     || _left-=BRAKI_GD.IL_NNAPR;
                        BRAKI_GD.IL_NNAPR:=0
                     ?}
                  ?}
               ||
::                Rozpisano za mało
                  {? _il_napr>0
                  || {? BRAKI_GD.IL_NAPR-_left<=_il_napr
                     || BRAKI_GD.IL_NAPR-=_left;
                        _left:=0
                     || _left+=(_il_napr-BRAKI_GD.IL_NAPR);
                        BRAKI_GD.IL_NAPR:=_il_napr
                     ?}
                  ?};
                  {? _left<0 & _il_nnapr>0
                  || {? BRAKI_GD.IL_NNAPR-_left<=_il_nnapr
                     || BRAKI_GD.IL_NNAPR-=_left;
                        _left:=0
                     || _left+=(_il_nnapr-BRAKI_GD.IL_NNAPR);
                        BRAKI_GD.IL_NNAPR:=_il_nnapr
                     ?}
                  ?}
               ?}
            ?};
            roundmet(_rm);
            BRAKI_GD.add();
            _tab.IL_KWAL+=BRAKI_GD.IL;
            _tab.put();
            _il_brak-=BRAKI_GD.IL;
            _il_napr-=BRAKI_GD.IL_NAPR;
            _il_nnapr-=BRAKI_GD.IL_NNAPR;
            _tabsel.next() & _il_brak
         !};
         _tab.cntx_pop();
         end();
::       Aktualizacja pola ZL.BRAKI, ZGH.BRAKI po kwalifikacji
         {? _add>0
         || exec('update_braki','zl_common',_zl);
            exec('update_braki','zl_common',_zgh,,,ZGH)
         ?};
         {? VAR.GEN_NAPR='T'
         || exec('gen_napr','braki_k',0)
         ?}
      ?};
      ZGP.f_clear()
   ?};
   ZGP.cntx_pop();
   ZGH.cntx_pop()
|| _msg:='Zapisy do kwalifikacji muszą dotyczyć tego samego przewodnika i tej samej operacji.\n'
         'Kwalifikacja braków dla zaznaczonych zapisów niemożliwa.'@;
    KOMM.add(_msg,2,,1)
?};
_can_continue


\braki_kwal_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja grupa po 'Kwalifikuj' w oknie wertowania tabeli tymczasowej braków do zlecenia
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
KOMM.select();
grp_disp(cur_tab(1,1),cur_win(1,1),1);
~~


\braki_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja 'Usuń' w oknie kwlaifikacji braków
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ask:=1;
_group:=0;
_result:=0;
_zl:=_zgh:=null();

_tab:=cur_tab(1,1);
_tab_zlgd:=__zlgdbrak;
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1
?};

{? exec('count_naprawcze','braki',BRAKI_K.ref)>0
|| _msg:='Wygenerowano już operacje naprawcze.\n'
         'Usunięcie zapisu kwalifikacji braków możliwe dopiero po usunięciu tych operacji.'@;
   {? _group=0
   || FUN.emsg(_msg)
   || KOMM.add(_msg,2,,1)
   ?};
   _result:=0
|| _can_continue:=1;
   {? _ask=1
   || _can_continue:=FUN.ask('Czy usunąć wskazany zapis kwalifikacji braków?'@)
   ?};
   {? _can_continue=1
   || BRAKI_GD.index('BRAKI');
      BRAKI_GD.prefix(BRAKI_K.ref());
      {? BRAKI_GD.first()
      || {!
         |? _zlgdref:=BRAKI_GD.ZLGD;
            _next:=BRAKI_GD.del();
            _tab_zlgd.cntx_psh();
            _tab_zlgd.index(__zlgdndx);
            _tab_zlgd.prefix($_zlgdref);
            {? _tab_zlgd.first()
            || {!
               |? _tab_zlgd.IL_KWAL:=exec('count_kwal4zlgd','braki_k',_zlgdref);
                  _tab_zlgd.put();
                  _tab_zlgd.next()
               !}
            ?};
            _tab_zlgd.cntx_pop();
            _next
         !}
      ?};
      _zgp:=BRAKI_K.ZGP_SRC;
      _result:=BRAKI_K.del(,1);
      {? _result>0
      || _zl:=exec('FindAndGet','#table',ZGP,_zgp,,"ZL",null());
         _zgh:=exec('FindAndGet','#table',ZGP,_zgp,,"NRPRZ",null())
      ?};
      {? _group=0
      ||
         grp_disp(__zlgdbrak,__zlgdwer,1)
      ?}
   || _result:=0
   ?}
?};

{? _result>0
||
:: Aktualizacja pola ZL.BRAKI, ZGH.BRAKI
   exec('update_braki','zl_common',_zl);
   exec('update_braki','zl_common',_zgh,,,ZGH);
:: Obsługa procesowości - update opisów
   _zl_uid:=exec('FindAndGet','#table',ZL,_zl,,"uidref()",'');
   exec('desc_update','#b__box',_zl_uid,'TTE_PZL_DGBR');
   ~~
?};
_result


\braki_del_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja grupa przed 'Usuń' w oknie wertowania tabeli BRAKI_K
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Usunąć %1 zaznaczonych zapisów kwalifikacji?'@[$_tab.sel_size()])
|| _result:=1;
   KOMM.init(250,,'Usuwanie zapisów kwalifikacji'@)
?};
_result


\braki_del_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja grupa po 'Kwalifikuj' w oknie wertowania tabeli BRAKI_K
::   WY: ~~
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
KOMM.select();
grp_disp(__zlgdbrak,__zlgdwer,1);
~~


\gen_napr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Akcja 'Generuj operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::       Generuje operacje naprawcze dla aktualnego rekordu w BRAKI_K
::   WE: [_a] - INTEGER - 0/[1] - czy ma się pojawiać pytanie czy nie
::       [_b] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_ask:=1;
{? var_pres('_a')=type_of(0)
|| _ask:=_a
?};

_komm:=1;
_tab:=cur_tab(1,1);
{? _tab.sel_size()>0
|| _ask:=0;
   _komm:=0
?};

_can_continue:=1;
{? _ask=1
|| _can_continue:=FUN.ask('Czy generować operacje naprawcze dla wskazanej kwalifikacji braków?'@)
?};

{? _komm>0
||
:: Inicjalizuję KOMMa
   KOMM.init(250,,'Generowanie operacji naprawczych'@)
?};

:: Kontrola poprawności
{? _can_continue>0
|| {? BRAKI_K.IL_NAPR>0 & BRAKI_K.ZGP_POWT=null()
   || _can_continue:=0;
      _msg:='Ilość braków naprawialnych jest większa od zera, ale nie wybrano operacji od której powtórzyć proces.'@;
      KOMM.add(_msg,2,,1)
   ?}
?};
{? _can_continue>0
||
   _mydo:=0;
   {? do_state()=0
   ||
::    Rozpoczynam transakcję
      _mydo:=1;
      do()
   ?};

   VAR_DEL.delete('__matakt');
   __matakt:=tab_tmp(2
      ,'REF','STRING[16]',''
      ,'NRK','INTEGER',''
      ,'ILR','REAL',''
      ,'ZKP','STRING[16]',''
      ,'ZKN','STRING[16]',''
   );

   ZGP.cntx_psh();
:: Generuję operacje naprawcze dla braku naprawialnego
   {? BRAKI_K.IL_NAPR>0
   ||
      _args:=exec('gen_repair_a','braki');
      _args.ZGP:=BRAKI_K.ZGP_SRC;
      _args.ZGP_BRAK:=BRAKI_K.ZGP_SRC;
      _args.BRAKI_SRC:=BRAKI_K.ZGP_SRC().BRAKI_K;
      _args.BRAKI_K:=BRAKI_K.ref();
      _args.KOM_MODE:=1;
      _args.IL_BRAK:=BRAKI_K.IL_NAPR;
      _args.TYPE:=exec('type_repair','braki');
      _args.ZGP_STOP:=BRAKI_K.ZGP_POWT;
      _args.PLANUJ:=BRAKI_K.PLANUJ;
      _args.BRAKIUID:=BRAKI_K.UID;

::    Startuję machinę generującą operacje naprawcze
      _can_continue:=exec('gen_repair','braki',_args)
   ?};
   {? _can_continue>0 & BRAKI_K.IL_NNAPR>0
   ||
      {? var_pres('_args')>100
      || obj_del(_args)
      ?};
      _args:=exec('gen_repair_a','braki');
      _args.ZGP:=BRAKI_K.ZGP_SRC;
      _args.ZGP_BRAK:=BRAKI_K.ZGP_SRC;
      _args.BRAKI_SRC:=BRAKI_K.ZGP_SRC().BRAKI_K;
      _args.BRAKI_K:=BRAKI_K.ref();
      _args.KOM_MODE:=1;
      _args.IL_BRAK:=BRAKI_K.IL_NNAPR;
      _args.TYPE:=exec('type_not_repair','braki');
      _args.ZGP_STOP:=null();
      _args.PLANUJ:=BRAKI_K.PLANUJ;
      _args.BRAKIUID:=BRAKI_K.UID;

::    Startuję machinę generującą operacje naprawcze
      _can_continue:=exec('gen_repair','braki',_args)
   ?};
   ZGP.cntx_pop();

   exec('openz','open_tab',ST.ODDZ+'__');
   exec('akt_rezy','rezerwacje');
   VAR_DEL.delete('__matakt');

   {? _can_continue=0
   || undo()
   ?};
   {? _mydo>0
   || end()
   ?}
?};
{? _komm>0
|| KOMM.select();
   grp_disp(BRAKI_K,'WER',1)
?};
~~


\gen_napr_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja grupa przed 'Generuj operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 kwalifikacji. Czy generować dla nich wszystkich operacje naprawcze?'@[$_tab.sel_size()])
|| _result:=1;
   KOMM.init(250,,'Generowanie operacji naprawczych'@)
?};
_result


\gen_napr_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja grupa po 'Generuj operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
grp_disp(BRAKI_K,'WER',1);
~~


\del_napr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja 'Usuń operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::   WY: 0 - porażka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ask:=1;
_group:=0;

_tab:=cur_tab(1,1);
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1
?};

_can_continue:=1;
_result:=0;

{? _ask=1
|| _can_continue:=FUN.ask('Czy usunąć wszystkie operacje naprawcze dla wskazanej kwalifikacji braków?'@)
?};

{? _group=0
||
:: Inicjalizuję KOMMa
   KOMM.init(250,,'Usuwanie operacji naprawczych'@)
?};

{? _can_continue>0
||
:: Rozpoczynam transakcję
   do();
:: Uruchamiam usuwanie operacji
   _can_continue:=exec('del_repair','braki',BRAKI_K.ref());
   {? _can_continue=0
   || undo()
   ?};
   end()
?};

{? _group=0
|| KOMM.select();
   grp_disp(__zlgdbrak,__zlgdwer,1)
?};

{? _can_continue>0
|| _result:=1
?};
_result


\del_napr_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja grupa przed 'Usuń operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_tab:=cur_tab(1,1);
{? FUN.ask('Zaznaczono: %1 kwalifikacji. Czy usunąć dla nich wszystkich operacje naprawcze?'@[$_tab.sel_size()])
|| _result:=1;
   KOMM.init(250,,'Generowanie operacji naprawczych'@)
?};
_result


\del_napr_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja grupa po 'Usuń operacje naprawcze' w oknie wertowania tabeli BRAKI_K
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
grp_disp(__zlgdbrak,__zlgdwer,1);
~~


\count_kwal4zgp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Wylicza ilość zakwalifikowanych braków dla ZGP
::   WE: _a - ZGP.ref
::   WY: Real - ilość zakwalifikowanych braków
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & var_pres('_a')=type_of(ZGP.ref())
|| _zgp:=_a
|| return(0)
?};

_result:=0;
ZGP.cntx_psh();
ZGP.clear();
{? ZGP.seek(_zgp)
|| BRAKI_K.cntx_psh();
   BRAKI_K.index('ZGP_SRC');
   BRAKI_K.prefix(ZGP.ref());
   {? BRAKI_K.first()
   || {!
      |?
         _result+=(BRAKI_K.IL_NNAPR+BRAKI_K.IL_NAPR);
         BRAKI_K.next()
      !}
   ?};
   BRAKI_K.cntx_pop()
|| _result:=0
?};
ZGP.cntx_pop();
_result


\count_kwal4zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Wylicza ilość zakwalifikowanych braków dla rekordu w tabeli tymczasowej __zlgdbrak
::   WE: ZLGD.ref
::   WY: Liczba braków dla wskazanego rekordu ZLGD. O, gdy nie wskazano.
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & var_pres('_a')=type_of(ZLGD.ref())
|| _zlgd:=_a
|| return(0)
?};

_result:=0;
BRAKI_GD.cntx_psh();
BRAKI_GD.index('ZLGD');
BRAKI_GD.prefix(ref_name(_zlgd),_zlgd);
{? BRAKI_GD.first()
|| {!
   |? _result+=BRAKI_GD.IL;
      BRAKI_GD.next()
   !}
?};
BRAKI_GD.cntx_pop();
_result


\count_kwal_none4zlgd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Oblicza ile rekordów ZLGD danego zlecenia nie ma zakwalifikowanych braków
::   WE: [_a] - ZL.ref - zlecenie
::   WY: REAL - ilość rekordów ZLGD które nie zostały zakwalifikowane
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZL.ref())
|| _ref:=_a
?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh();
{? _ref<>null()
|| ZL.prefix();
   {? ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? ZL.RODZAJ<>'P'
   ||
::    Zlecenie złożone
      ZL.cntx_psh();
      ZL.index('NRNZL');
      ZL.prefix(ZL.UNRZL);
      {? ZL.first()
      || {!
         |?
::          !!! REKURENCJA !!!
            _result+=exec('count_kwal_none4zlgd','braki_k');
            ZL.next()
         !}
      ?};
      ZL.cntx_pop();
      ~~
   ||
::    Zlecenie proste albo półfabrykatowe
      ZLGD.cntx_psh();
      BRAKI_GD.cntx_psh();
      BRAKI_GD.index('ZLGD');
      ZLGD.index('ZLECENIE');
      ZLGD.prefix(ZL.ref());
      {? ZLGD.first()
      || {!
         |? {? ZLGD.IL_BRAK>0
            || BRAKI_GD.prefix(ref_name(ZLGD.ref()),ZLGD.ref());
               {? BRAKI_GD.size()=0
               || _result+=1
               ?}
            ?};
            ZLGD.next()
         !}
      ?};
      BRAKI_GD.cntx_pop();
      ZLGD.cntx_pop();
      ~~
   ?}
?};
ZL.cntx_pop();
_result


\chk_kwal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Rekord-po dla tabeli BRAKI_K
::   WY: jak chk_rec
::----------------------------------------------------------------------------------------------------------------------
{? BRAKI_K.IL_NNAPR<0
|| FUN.emsg('Liczba braków musi być nieujemna.'@);
   VAR.GEN_NAPR:='N';
   'IL_NNAPR'
|? BRAKI_K.IL_NAPR<0
|| FUN.emsg('Liczba braków musi być nieujemna.'@);
   VAR.GEN_NAPR:='N';
   'IL_NAPR'
|? BRAKI_K.IL_NNAPR + BRAKI_K.IL_NAPR>BRAKI_K.IL
|| FUN.emsg('Suma braków zakwalifikowanych nie może być większa od ilości zarejestrowanych braków.'@);
   VAR.GEN_NAPR:='N';
   'IL_NNAPR'
|? BRAKI_K.IL_NNAPR + BRAKI_K.IL_NAPR<=0
|| FUN.emsg('Suma braków zakwalifikowanych musi byc większa od zera.'@);
   VAR.GEN_NAPR:='N';
   'IL_NNAPR'
|? BRAKI_K.IL_NAPR>0 & BRAKI_K.ZGP_POWT=null()
|| FUN.emsg('Dla braków naprawialnych należy wskazać operację, od której będzie powtórzony proces produkcyjny.'@);
   VAR.GEN_NAPR:='N';
   'ZGP_POWT'
|? BRAKI_K.IL_NAPR>0 & exec('chk_path','braki',BRAKI_K.ZGP_SRC,BRAKI_K.ZGP_POWT)=0
|| FUN.emsg(
      'Dla braków naprawialnych należy wskazać operację należącą do tej samej ścieżki procesu co operacja naprawiana.'@
   );
   VAR.GEN_NAPR:='N';
   'ZGP_POWT'
:: Kontrola rodzaju braku
|? exec('get','#params',500635,2)='T' & BRAKI_K.BRAKI_R=null()
|| FUN.emsg('Należy określić rodzaj braku.'@);
   VAR.GEN_NAPR:='N';
   _res:='BRAKI_R'
|| ''
?}


\zgp_powt_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: przed redakcją pola BRAKI.ZGP_POWT
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? BRAKI_K.IL_NAPR>0
|| 1
|| 0
?}


\il_napr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS: Po redakcji pola BRAKI.IL_NAPR
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
{? BRAKI_K.IL_NAPR=0 & BRAKI_K.ZGP_POWT<>null()
|| BRAKI_K.ZGP_POWT:=null
?};
exec('efl_opt','braki_k');
1


\il_nnapr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Po redakcji pola BRAKI.IL_NNAPR
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
exec('efl_opt','braki_k');
1


\zatw_gen_napr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [12.46]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
VAR.GEN_NAPR:='T';
'key:F2'


\zgp_berec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Funkcja rekord przed w oknie wertowania pozycji przewodników SLP_BRAK
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
:: Podczytanie odpowiedniego ZGH
ZL.cntx_psh();
{? ZGP.ZL().NRNZL<>0
|| ZGP.NRZLP().NRPRZ
|| ZGP.NRPRZ().NRPRZ
?};
ZL.cntx_pop();
~~


\add_napr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.46]
:: OPIS: Akcja 'Dołącz operację naprawczą' w oknie wertowania BRAKI_K
::   WE:
::   WY:
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_ask:=1;
_can_continue:=1;

_il_napr:=BRAKI_K.IL_NAPR;
_il_nie:=BRAKI_K.IL_NNAPR;

_msg:='Dołączyć operację naprawczą do bieżącej kwalifikacji braków?'@;
_msg1:='Brak naprawialny (ilość: %1)'@[$_il_napr];
_msg2:='Brak nienaprawialny (ilość: %1)'@[$_il_nie];
_zgp_ilosc:=0;
_type:='';
{? _il_napr>0 & _il_nie>0
|| _choice:=FUN.choice(_msg,,_msg1,_msg2);
   {? _choice=1
   || _zgp_ilosc:=_il_napr;
      _type:=exec('type_repair','braki')
   |? _choice=2
   || _zgp_ilosc:=_il_nie;
      _type:=exec('type_not_repair','braki')
   ?}
|? _il_napr>0
|| _choice:=FUN.choice(_msg,,_msg1);
   {? _choice=1
   || _zgp_ilosc:=_il_napr;
      _type:=exec('type_repair','braki')
   ?}
|? _il_nie>0
|| _choice:=FUN.choice(_msg,,_msg2);
   {? _choice=1
   || _zgp_ilosc:=_il_nie;
      _type:=exec('type_not_repair','braki')
   ?}
?};
{? _choice>0 & _zgp_ilosc>0
|| ZGH.cntx_psh();
   ZGP.cntx_psh();

:: Podczytanie pozycji przewodnika
   BRAKI_K.ZGP_SRC();

   VAR.A_WEW:='T';
   VAR.A_ZGP:=null();
   ZGP.win_edit('RED');

:: Wyznaczam następnik, czyli określam do jakiego zlecenia i jakiego przewodnika
:: zostanie podłączona operacja naprawcza  ręczna
   _a_zlec:=VAR.A_ZLEC;
   VAR.A_NRZLP:=BRAKI_K.ZGP_SRC().NRZLP;
   _top:=exec('top_level','zl_link',VAR.A_ZLEC);
   VAR.A_ZLEC:=_top;
   exec('utw_nast','zl_guide',_top,'Wybór następnika operacji naprawczej'@);
   _ndx:=__NAST.ndx_tmp(,,'NAZ',,,'NROP',,);
   __NAST.index(_ndx);
   __NAST.prefix();
   {? __NAST.select()
   || ZGP.clear();
      {? ZGP.seek(__NAST.SQLREF)
      ||
::       Stoję na następnej operacji
         VAR.A_NRZLP:=ZGP.NRZLP;
         VAR.A_NRPRZ:=ZGP.NRPRZ;
         _zlnast:=ZGP.ZL;
         _zgp_nrp:=ZGP.NRP;

::       Jeśli następna operacja jest operacją naprawczą to ilość dodanej operacji ręcznej
::       musi być równa ilości z operacji następnej, żeby zachować
         {? ZGP.NAPRAW='T'
         || {? _zgp_ilosc<>ZGP.ILOSC
            || _zgp_ilosc:=ZGP.ILOSC;
               FUN.info('Ponieważ wybrana następna operacja jest również naprawcza, ilość na tworzonej operacji będzie równa ilości następnika.'@)
            ?}
         ?};

         {? exec('edit_prz','zl_guide',_zgp_ilosc,'T',_type,BRAKI_K.ref(),_zgp_nrp)
         || exec('po_dol','zl_guide');
            VAR.A_ZGP:=ZGP.ref();
            NASZGP.cntx_psh();
::          Generuję następnik
            _sciezka:='';
            ZGP.cntx_psh();
            ZGP.prefix();
            {? ZGP.seek(__NAST.SQLREF)
            || _sciezka:=$ZGP.NRP
            ?};
            ZGP.cntx_pop();
            exec('add_nast','zl_guide',__NAST.UIN,_sciezka,ZGP.ZL,_zlnast);
            NASZGP.prefix();
            NASZGP.add(1);
            NASZGP.cntx_pop()
         ?}
      ?}
   ?};
   VAR.A_ZLEC:=_a_zlec;
   ZGH.cntx_pop();
   ZGP.cntx_pop();
   grp_disp(BRAKI_K,'WER',1);
   ~~
?};
~~


\efl_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [17.00]
:: OPIS: Ustawia opcje pól w oknie redagowania BRAKI_K
::----------------------------------------------------------------------------------------------------------------------
BRAKI_K.efld_opt('RED',
         {? BRAKI_K.IL_NAPR=0 & BRAKI_K.IL_NNAPR<>0 & BRAKI_K.IL_NNAPR=BRAKI_K.IL
            | BRAKI_K.IL_NAPR=0 & BRAKI_K.IL_NNAPR=0
            | BRAKI_K.IL_NAPR<>0 & BRAKI_K.IL_NNAPR<>0
         || 'mark=1'
         || 'mark=0'
         ?},,'IL_NNAPR');
BRAKI_K.efld_opt('RED',
         {? BRAKI_K.IL_NNAPR=0 & BRAKI_K.IL_NAPR<>0 & BRAKI_K.IL_NAPR=BRAKI_K.IL
            | BRAKI_K.IL_NAPR=0 & BRAKI_K.IL_NNAPR=0
            | BRAKI_K.IL_NAPR<>0 & BRAKI_K.IL_NNAPR<>0
         || 'mark=1'
         || 'mark=0'
         ?},,'IL_NAPR');
BRAKI_K.efld_opt('RED',
         {? BRAKI_K.IL_NAPR<>0
         || 'mark=1'
         || 'mark=0'
         ?},,'ZGP_POWT','NRP');
BRAKI_K.efld_opt('RED',
         {? exec('get','#params',500635,2)='T'
         || 'mark=1'
         || 'mark=0'
         ?},,'BRAKI_R','KOD');
~~


\braki_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja w oknie i przycisk Zakończ
::   WE:
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_tab:=cur_tab(1,1);
_env_braki:=params_get().env_braki;
_group:=0;
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1
?};
{? _group=0
||
   ZL.cntx_psh(); ZL.prefix();
   {? ZL.seek(__zlgdbrak.ZL_REF)
   || _args_mp:=exec('mp_run_a','#b__box');
      _args_mp.AKCJA:='ZAKOŃCZ';
      _args_mp.ACT_UID:='TTE_PZL_DGBR';
      _args_mp.UIDREF:=ZL.uidref();
      _args_mp.PROC_START:='N';
      _args_mp.PORTS_IN:=exec('portsIn','#b__box',_args_mp.ACT_UID);
      _args_mp.CONTEXT:=obj_new('sel_exit');
      _args_mp.CONTEXT.sel_exit:=1;
      {? _env_braki.TAB<>''
      || _args_mp.CONTEXT.sel_exit:=0
      ?};
      exec('portsInSet','#b__box',_args_mp.PORTS_IN,_args_mp.ACT_UID,'ZL',ZL.ref());
      exec('mp_run','#b__box',_args_mp)
   ?};
   ZL.cntx_pop();
   _env_braki.RELOAD:=1;
   grp_disp(__zlgdbrak,__zlgdwer,1)
?};
~~


\braki_zakoncz_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Akcja w oknie i przycisk Zakończ - grupa przed
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
KOMM.init(250,,'Zakańczanie obsługi braków'@);

_tab:=cur_tab(1,1);
_env_braki:=params_get().env_braki;

_result:=0;

_zl:=tab_tmp(1,
   'ZL_REF','STRING[16]','Zlecenie ref',
   'ZL_SYM','STRING[50]','Zlecenie symbol'
);
{? _tab.sel_size()>0
|| _ask:=0;
   _group:=1;
   _tab.cntx_psh();
   _tabsel:=_tab.sel_aget;
   sel_nchk();
   {? _tabsel.first()
   || {!
      |? {? _tab.seek(_tabsel.REF,)
         || _zl.prefix(_tab.ZL_REF,);
            {? _zl.first()=0
            || _zl.blank();
               _zl.ZL_REF:=_tab.ZL_REF;
               _zl.ZL_SYM:=_tab.ZL_SYM;
               _zl.add()
            ?}
         ?};
         _tabsel.next()
      !}
   ?};

   _zl.prefix();
   {? _zl.first()
   ||
      {!
      |?
         _loop:=0;
         _msg:='Zaznaczonych zleceń do zakończenia obsługi braków: %1. Kontynuować?'[$_zl.size()];
         _choice:=FUN.choice(_msg,,'Tak'@,'Szczegóły'@);

         {? _choice=1
         || _result:=1;
            {? _zl.first()
            || {!
               |? ZL.cntx_psh();
                  ZL.prefix();
                  {? ZL.seek(_zl.ZL_REF)
                  ||
                     {? var_pres('_args_mp')>100
                     || obj_del(_args_mp)
                     ?};
                     _args_mp:=exec('mp_run_a','#b__box');
                     _args_mp.AKCJA:='ZAKOŃCZ';
                     _args_mp.ACT_UID:='TTE_PZL_DGBR';
                     _args_mp.UIDREF:=ZL.uidref();
                     _args_mp.PROC_START:='N';
                     _args_mp.GRUPA:='T';
                     _args_mp.PORTS_IN:=exec('portsIn','#b__box',_args_mp.ACT_UID);
                     _args_mp.CONTEXT:=obj_new('sel_exit');
                     _args_mp.CONTEXT.sel_exit:=1;
                     {? _env_braki.TAB<>''
                     || _args_mp.CONTEXT.sel_exit:=0
                     ?};
                     exec('portsInSet','#b__box',_args_mp.PORTS_IN,_args_mp.ACT_UID,'ZL',ZL.ref());
                     exec('mp_run','#b__box',_args_mp)
                  ?};
                  ZL.cntx_pop();
                  _zl.next()
               !}
            ?}
         |? _choice=2
         || _loop:=1;

            _wer:=_zl.mk_sel('Zaznaczone zlecenia do zakończenia obsługi braków'@,,,'#brkzlgrp1',,,,,'U');
            _zl.win_fld(_wer,,'ZL_SYM',,,50,,,'Zlecenie'@);

            _zl.win_sel(_wer);
            _zl.select()
         ?};
         _loop
      !}
   ?};
   _tab.cntx_pop()
?};
_result


\braki_zakoncz_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [22.26]
:: OPIS: Akcja w oknie i przycisk Zakończ - grupa po
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_env_braki:=params_get().env_braki;
KOMM.select();
_env_braki.RELOAD:=1;
grp_disp(__zlgdbrak,__zlgdwer,1);
~~


\fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Format wyświetlania dla tabeli BRAKI_K
::   WY: STRING
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
M.cntx_psh();
ZGP.cntx_psh();
_dokl:=0;
{? BRAKI_K.ZGP_SRC<>null()
|| _dokl:=BRAKI_K.ZGP_SRC().ZL().KTM().DOKL
|| _dokl:=VAR.A_ZLEC().KTM().DOKL
?};
_result:='out_prec='+$_dokl;
ZL.cntx_pop();
M.cntx_pop();
ZGP.cntx_pop();
_result


\fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Format redagowania dla tabeli BRAKI_K
::   WY: STRING
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
M.cntx_psh();
ZGP.cntx_psh();
_dokl:=0;
{? BRAKI_K.ZGP_SRC<>null()
|| _dokl:=BRAKI_K.ZGP_SRC().ZL().KTM().DOKL
|| _dokl:=VAR.A_ZLEC().KTM().DOKL
?};
_result:='in_prec='+$_dokl;
ZL.cntx_pop();
M.cntx_pop();
ZGP.cntx_pop();
_result


\braki_gd_trigger
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Triger przed add i put dla tabeli BRAKI_GD
::----------------------------------------------------------------------------------------------------------------------
BRAKI_GD.MZLGD:=ref_name(BRAKI_GD.ZLGD);
1


\widok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Akcja widok w oknie braków
::   WE:
::   WY:
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? exec('interm','#system')>0
|| FUN.emsg(exec('interm_nacc_msg','#system'))
||
   _before:=exec('get','#params',8505,type_of(''),OPERATOR.USER);
   _value:=exec('widok_edit','braki_k');
   {? type_of(_value)=type_of('') & _before<>_value
   || exec('set','#params',8505,_value,OPERATOR.USER);
      FUN.info('Zmieniono sposób wyświetlania okna z brakami.\nNależy ponownie uruchomić okno.'@);
      sel_exit()
   ?}
?};
~~


\widok_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Edycja widoku w brakach
::   WY: STRING - wynik redagowania
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_par:=exec('get','#params',8505,type_of(''),OPERATOR.USER);
_names:=obj_new('SIMPLE','COMPLEX');
_names.SIMPLE:='Widok prosty'@;
_names.COMPLEX:='Widok rozbudowany (zapotrzebowania, następstwo operacji)'@;
_values:=obj_new('SIMPLE','COMPLEX');
_values.SIMPLE:='N';
_values.COMPLEX:='T';
exec('edit_radiobutton','#edit',_par,'Sposób prezentacji braków',_names,_values)


\widok_complex
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Zwraca informację czy tworzyć rozbudowany widok
::   WY: STRING: T/N
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? exec('interm','#system')=0
|| {? exec('get','#params',8505,type_of(''),OPERATOR.USER)='T'
   || _result:=1
   ?}
?};
_result


\limity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Akcja limity do pozycji przewodnika
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
exec('zgp_limity','zl_limit',ZGP.ref(),,'T');
~~


\nielimity
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [21.37]
:: OPIS: Akcja nielimity do pozycji przewodnika
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
exec('zgp_nlim','zl_nlimit',ZGP.ref());
~~


\surowce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Zapotrzebowania do pozycji przewodnika (limity i nielimity)
::----------------------------------------------------------------------------------------------------------------------
exec('zgp_sur','zl_nlimit',ZGP.ref());
~~


\braki_gd_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Akcja rekord przed dla tabeli BRAKI_GD
::----------------------------------------------------------------------------------------------------------------------
{? BRAKI_GD.MZLGD<>ZLGD.name()
|| ZLGD.use(BRAKI_GD.MZLGD)
?};
~~


\braki_gd_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Przed wyświetl dla tabeli BRAKI_GD
::----------------------------------------------------------------------------------------------------------------------
BRAKI_GD.display();
~~


\zl_brakigd_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Selekcja zakwalifikowanych braków od strony zlecenia produkcyjnego
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh(); ZGH.cntx_psh(); ZGP.cntx_psh();
BRAKI_GD.cntx_psh();
BRAKI_GD.win_sel('WER');
{? VAR.A_ZLEC().RODZAJ='Z' | VAR.A_ZLEC().RODZAJ='N'
|| BRAKI_GD.index('ZL_NRNZL')
|| BRAKI_GD.index('ZL_UNRZL')
?};
BRAKI_GD.prefix(VAR.A_ZLEC().UNRZL);
BRAKI_GD.select();
BRAKI_GD.cntx_pop();
ZL.cntx_pop(); ZGH.cntx_pop(); ZGP.cntx_pop();
~~


\zgh_brakigd_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Selekcja zakwalifikowanych braków od strony przewodnika zlecenia produkcyjnego
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ZGH,ZGP,BRAKI_GD);
BRAKI_GD.win_sel('WER');
BRAKI_GD.index('ZGH');
BRAKI_GD.prefix(ZGH.ref());
BRAKI_GD.select();
Cntx.pop(ZL,ZGH,ZGP,BRAKI_GD);
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 6ba54ddcaed50fcc2884546ccc3463fe0bcd680a062900abcf04aeae83be2cbf70b64a005a06f1d3bd8e9084584e9d3572b771e9f1345a07d8bce206494fd8dea887b3d47783488684aa7e48e50e89980289e7844997728be1ece82dd96127695ac44e6811c3448c41e3737cba3ca2025ed13cb98987b29774ceaf92234802d4
