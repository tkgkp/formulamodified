:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: xml.fml
:: Utworzony: 15.01.2015
:: Autor: AMK
::======================================================================================================================
:: Zawartość:  Procedury do obsługi e-Deklaracji i plików XML
::======================================================================================================================


\xml2val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Pobiera wartość elementu XML i przypisuje do zmiennej
::   WE:  _a  - linia pliku XML
::        _b  - znacznik XML
::        _c  - zmienna
::       [_d] - czy pełne znaczniki [1]-tak 0-nie
::  OLD: \xml2val/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<=0 || _d:=1 ?};
{? _d
|| _p1:=_a*('<'+_b+'>');
   _p2:=_a*('</'+_b+'>');
   _dl:=+_b
|| _p1:=_a*(_b+'>');
   _p2:=(_p1-_a)*('</')+_p1;
   _dl:=+_b-1
?};
_v:='';
{? _p1 & _p2
|| _s:=_p1+_dl+1;
   _v:=(_p2-_s-1)+(_s-_a);
   {? var_pres('_c')>0 || ($(_c+':=_a'))(_v) ?}
?};
_v


\xmlatr2val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [12.10]
:: OPIS: Pobiera wartosc atrybutu elementu XML i przypisuje do zmiennej
::   WE: _a - linia pliku XML
::       _b - znacznik XML
::       _c - atrybut
::       _d - zmienna
::  OLD: \xmlatr2val/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_p1:=_a*('<'+_b);
_v:='';
{? _p1
|| _a:=(_p1++_b+1)-_a;
   _p2:=_a*_c;
   {? _p2
   || _a:=((_p2++_c)+1)-_a;
      _p2:=_a*'"';
      _v:=_p2+_a-1;
      ($(_d+':=_a'))(_v)
   ?}
?}


\sgml2str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Przeksztalca tekst z polskimi znakami Unikode w zapisie SGML do mazowi
::   WE: _a - tekst z kodowaniem SGML np.: &#x00F3; (oznacza o z kreska)
::  OLD: \sgml2str/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_wz:=',0105ą,0107ć,0119ę,0142ł,0144ń,00F3ó,015Bś,017Aź,017Cż,0104Ą,0106Ć,0118Ę,0141Ł,0143Ń,00D3Ó,015AŚ,0179Ź,017BŻ';
{!
|? _p:=_a*'&#x';
   {? _p>0
   || _ok:=0;
      _p2:=_a*';';
      {? _p2>0 & _p2-_p<8
      || _zn:=(_p+2)-(_p2+_a-1);
         _szn:=('0000'+_zn)+4;
         _pwz:=_wz*(','+_szn);
         {? _pwz
         || _zm:=1+((_pwz+4)-_wz);
            {? _zm<>''
            || _a:=STR.gsub(_a,'&#x'+_zn+';',_zm);
               _ok:=1
            ?}
         ?}
      ?};
      _ok
   ?}
!};
_a


\is_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Czy istnieje e-Deklaracja wskazanego typu
::   WE: _a - typ deklaracji
::  OLD: \is_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a+4='_KOR' || _a:=_a-4 ?};
E_DEK.cntx_psh();
E_DEK.index('E_DEK');
E_DEK.prefix(BPMN.SYM_DOM,_a,VAT_DEK.ref());
_ok:=E_DEK.first();
E_DEK.cntx_pop();
_ok


\nr_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [DAROKR] [2009+]
:: OPIS: Funkcja przed redakcja pola VAT_DEK.NR, jezeli jest akcja Dolacz to mozna redagowac
::       jezeli akcja Popraw pole jest niedostepne do redakcji
::  OLD: \nr_edit/edeklar.fml
::----------------------------------------------------------------------------------------------------------------------
BPMN.SYM_DOM='FKS' & ~VAT_DEK.NR | EDIT_VAR.NR_EDIT


\blnazwa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2010]
:: OPIS: Wartosc poczatkowa pola VAT_VER.NAZWA
::  OLD: \blnazwa/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.DEKL_NAZ


\upo_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Zwraca numer upo e-deklaracji
::  OLD: \upo_id/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_vatd:=5+VAT_DEK.TYP='VAT7D';
_vat27:=5+VAT_DEK.TYP='VAT27';
_lz:={? _vatd | _vat27 || 5 || 4 ?};
{? BPMN.SYM_DOM='PPL'
|| _typ:=SKID.DEKL_NAZ
|| _typ:={? _vat27 & exec('zwr_rozl_okr','fks_ved')='K' || 'VAT27K' || _lz+VAT_DEK.TYP ?}
?};
E_DEK.cntx_psh();
E_DEK.index('AKC');
E_DEK.prefix(BPMN.SYM_DOM,_typ,VAT_DEK.ref(),'T');
_id:={? E_DEK.first() || E_DEK.REF_ID || '' ?};
E_DEK.cntx_pop();
_id


\uzas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Zwraca tekst uzasadnienie
::   WE:  _a  - kod uzasadnienia
::       [_b] - liczba znakow uzasadnienia
::  OLD: \uzas/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1 || _b:=3500 ?};
_tekst:='';
VAT_DEKT.index('VAT_DEK'); VAT_DEKT.prefix(VAT_DEK.ref(),_a,_a);
{? VAT_DEKT.first()
|| _tekst:=VAT_DEKT.memo_txt(0,1,'MEMO')
?};
_b+_tekst


\edek_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Generowanie e-Deklaracji
::   WE: _a - opcjonalny-integer 0-nie wyswietla komunikatow lub pytan, brak _a:=1-komunikaty
::  OLD: \edek_gen/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(1) || _a || _a:=1 ?};
_f_us:="
{? BPMN.SYM_DOM='FKS'
|| exec('czytaj','#stalesys',,XINFO,'URZAD');
   {? ~XINFO.URZAD
   || FUN.info('Dane licencjobiorcy nie zawierają\ndanych urzędu skarbowego.'@); 0
   |? XINFO.URZAD().EDEK_SYM=''
   || FUN.info('Urząd skarbowy wskazany w danych\nlicencjobiorcy nie przyjmuje e-Deklaracji.'@); 0
   || 1
   ?}
|? BPMN.SYM_DOM='PPL'
|| exec('czytaj','#stalesys',,KST,'US');
   {? ~KST.US
   || {? _a || FUN.info('Stałe systemu nie zawierają danych urzędu skarbowego.'@) ?}; 0
   |? KST.US().EDEK_SYM=''
   || {? _a || FUN.info('Urząd skarbowy wskazany w stałych\nsystemu nie przyjmuje e-Deklaracji.'@) ?}; 0
   || 1
   ?}
?}";
_f_spr:="
E_DEK.cntx_psh();
E_DEK.index('AKC'); E_DEK.prefix(BPMN.SYM_DOM,SKID.TYP_ZAP,VAT_DEK.ref());
_ok:={? E_DEK.find_key('T')
     || {? E_DEK.TYP='VIUDO'
        || {? _a
           || FUN.ask('Istnieje zaakceptowana deklaracja elektroniczna.\nCzy utworzyć nową?.'@)
           || 0
           ?}
        || {? _a
           || FUN.info('Istnieje zaakceptowana deklaracja elektroniczna.\nTworzenie nowej jest zbędne.'@)
           ?}; 0
        ?}
     |? E_DEK.find_key('N')
     || {? _a
        || FUN.ask('Istnieją nie zaakceptowane elektroniczne deklaracje.\nCzy utworzyć nową?'@)
        || 0
        ?}
     |? E_DEK.find_key('W')
     || {? E_DEK.TYP='VIUDO'
        || {? _a
           || FUN.ask('Istnieje wysłana deklaracja elektroniczna.\nCzy utworzyć nową?'@)
           || 0
           ?}
        || {? _a
           || FUN.info('Istnieje wysłana deklaracja elektroniczna.\nTworzenie nowej jest zbędne.'@)
           ?}; 0
        ?}
     || 1
     ?};
E_DEK.cntx_pop();
_ok";
_osobaus:="
{? BPMN.SYM_DOM='PPL'
|| {? ~VAT_DEK.US
   || {? _a || FUN.info('Dane podatnika nie zawierają danych urzędu skarbowego.'@) ?}; 0
   |? VAT_DEK.US().EDEK_SYM=''
   || {? _a || FUN.info('Urząd skarbowy podatnika nie przyjmuje e-Deklaracji.'@) ?}; 0
   || 1
   ?}
?}";
_tmpdir:=fmk_tmp_dir(0);
{? type_of(_tmpdir) <> type_of(~~)
|| _fdir:=_tmpdir.get_path
|| {? _a || FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@) ?};
   return()
?};
{? BPMN.SYM_DOM='FKS'
|| _okres:={? 1+(VAT_DEK.OKRES+2)='/'
           || $(VAT_DEK.ROK().POCZ_ROK~1)+(VAT_DEK.OKRES+2)
           || $(VAT_DEK.ROK().POCZ_ROK~1)+(VAT_DEK.OKRES+3)
           ?};
   {? SKID.TYP_ZAP<>'' & _f_us(_a) & _f_spr(_a)
   || _rok:=4+_okres;
      _okr:={? 1+(_okres+2)='/' || _okres+1 || _okres+2 ?};
      {? #_okr>12 || _rok:=$(#_rok+1); _okr:=$(#_okr-12) ?};
      _naz:={? SKID.TYP_ZAP='VAT7' | VAT_DEK.TYP='CIT2_KOR' || VAT_DEK.TYP || SKID.TYP_ZAP ?};
      _plik:=_fdir+'/'+_naz+'_'+_okr+_rok+'.xml';
      {? (_plik)<>''
      || {? +_okr=1
         || _kw:=#_okr;
            _okr:=$((_kw-1)*3+1)
         ?};
         exec('generuj','xml',_plik,SKID.TYP_ZAP,date( #(_rok),#(_okr),0 ) )
      ?}
   ?}
|? BPMN.SYM_DOM='PPL'
|| exec('czytaj','#stalesys',date(),KST);
   {? (SKID.DEKL_NAZ='PIT4R' | SKID.DEKL_NAZ='PIT8AR') & _f_us(_a) & _f_spr(_a)
   || _rok:=4+VAT_DEK.OKRES;
      _okr:='0'+$(VAT_DEK.DATA~2)+2;
      _plik:=_fdir+'/'+-SKID.DEKL_NAZ+'_'+_okr+_rok+'.xml';
      {? (_plik)<>''
      || exec('generuj','xml',_plik,SKID.TYP_ZAP,VAT_DEK.NR().OD)
      ?}
   |? (SKID.DEKL_NAZ='PIT11' | SKID.DEKL_NAZ='PIT40' | SKID.DEKL_NAZ='PIT8C' | SKID.DEKL_NAZ='IFT1' | SKID.DEKL_NAZ='IFT1R')
      & _osobaus(_a) & _f_spr(_a)
   || _rok:=4+VAT_DEK.OKRES;
      _okr:='0'+$(VAT_DEK.DATA~2)+2;
      _nazwa:=-VAT_DEK.TYP+_rok+'_'+(STR.maz2nop(-VAT_DEK.NAZWISKO))+(STR.maz2nop(-(1+VAT_DEK.PIERWSZE)))+($VAT_DEK.WER)+'.xml';
      _plik:=_fdir+'/'+_nazwa;
      {? (_plik)<>''
      || exec('generuj','xml',_plik,SKID.TYP_ZAP,VAT_DEK.NR().OD)
      ?}
   ?};
   exec('stalesys','#stalesys')
?}


\generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Generuje plik XML z deklaracja wg aktualnej specyfikacji
::   WE: _a - nazwa pliku
::       _b - rodzaj (np. VAT7)
::       _c - data specyfikacji
::  OLD: \generuj/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.index('DATA'); ISTDEF.prefix(BPMN.SYM_DOM,'D',_b,VAT_DEK.NR);
{? BPMN.SYM_DOM='FKS' & 3+_b='POD' & ISTDEF.find_le(_c) |
   ISTDEF.last()
|| ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),0);
   {? ISTDEFS.first()
   || TAB_ERR:=tab_tmp(1,
         'EL','STRING[40]','Element',
         'OPIS','SYS_MEMO','Opis'
      );
      _win:=TAB_ERR.mk_sel('Elementy wymagane bez wartości i błędy schematu'@);
      TAB_ERR.win_fld(_win,,'EL');
      TAB_ERR.win_fld(_win,,'OPIS',,,100);
      TAB_ERR.win_act(_win,0,'Wyświetl',,,,"
         TAB_ERR.memo_get(,'OPIS');
         TAB_ERR.memo_view(1,'OPIS')
      ");
      TAB_ERR.win_sel(_win);
      _f:=fopen(_a,'w',0);
      {? _f
      || fwrite(_f,'<?xml version="1.0" encoding="UTF-8"?>');
         {! |?
            exec('gen_one','xml',_f,0);
            ISTDEFS.next()
         !};
         fclose(_f);
         _valid:=exec('validate','xml',_a);
         {? TAB_ERR.first()
         || {! |?
               _ok:=FUN.choice('Deklaracja elektroniczna zawiera elementy wymagane\n'
                               'nie posiadające wartości i/lub niezgodności ze schematem.\n'
                               'Deklaracja będzie niezgodna ze specyfikacją.'@,,
                               '&Kontynuuj'@,'&Pokaż szczegóły'@);
               {? _ok=2
               || TAB_ERR.select(); 1
               || 0
               ?}
            !}
         || _ok:=_valid
         ?};
         {? _ok || exec('edek_add','xml',_a) ?}
      ?};
      VAR_DEL.delete('TAB_ERR')
   || FUN.info('Brak elementów specyfikacji e-Deklaracji %1.'@[ISTDEF.VER])
   ?}
|| FUN.info('Brak pasującej specyfikacji e-Deklaracji \'%1\'\ndla wersji numer %2.'@[_b,$VAT_DEK.NR().NR])
?}


\gen_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Generuje plik XML z deklaracja wg aktualnego elementu
::   WE: _a - uchwyt pliku
::       _b - poziom wciecia
::       [_c] - dopisywac do skrotu SHA1 1-tak [0]-nie
::  OLD: \gen_one/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_c')<=0 || _c:=0 ?};
ISTDEFS.cntx_psh(); ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
_is:=ISTDEFS.first();
ISTDEFS.cntx_pop(); _reg:='';
{? _is & (ISTDEFS.REGULY='' | exec('run_fml','xml',ISTDEFS.REGULY,1)) |
   ~_is & ISTDEFS.REGULY<>'' & (_reg:=exec('run_fml','xml',ISTDEFS.REGULY,0); type_of(_reg)=2) & (_reg<>'' | ISTDEFS.WYM='T') |
   ~_is & (ISTDEFS.E_DEK_S | ISTDEFS.WYM='T')
|| {? ISTDEFS.FORMULA='' |
      (ISTDEFS.FORMULA<>'' & exec('run_fml','xml',ISTDEFS.FORMULA,1,1))
   || {!
      |? {? ISTDEFS.COMMENT='T'
         || _t:=_b*' '+'<!--'+ISTDEFS.OPIS+'='
         || _t:=_b*' '+'<'+ISTDEFS.OPIS;
            ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first()
            || {!
               |? {? ISTDEFI.REGULY<>''
                  || _r:=exec('run_fml','xml',ISTDEFI.REGULY,0);
                     {? type_of(_r)=2 & _r<>''
                     || _t+=' '+ISTDEFI.NAZ+'="'+_r+'"'
                     ?}
                  ?};
                  ISTDEFI.next()
               !}
            ?};
            _t+='>'
         ?};
         {? _is
         || {? ISTDEFS.HIDDEN='T'
            || _b-=3
            || _tt:=maz_utf8(_t);
               {? _c || exec('toSHA','xml',_tt) ?};
               {? _a || fwrite(_a, _tt ) ?}
            ?};
            ISTDEFS.cntx_psh(); ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
            {? ISTDEFS.first()
            || {! |?
                  exec('gen_one','xml',_a,_b+3,_c);
                  ISTDEFS.next()
               !}
            ?};
            ISTDEFS.cntx_pop();

            _t:=_b*' '+'</'+ISTDEFS.OPIS+'>';
            {? ISTDEFS.HIDDEN<>'T' & _a || fwrite(_a, maz_utf8(_t) ) ?}
         || {? ISTDEFS.E_DEK_S || ISTDEFS.E_DEK_S(); _reg:=exec('tekst','xml') ?};

            _kom:='';
            {? ISTDEFS.ISTDEF().RODZAJ='FA'
            || _nk:=DOK.NK;
               {? _nk<>''
               || REJ.cntx_psh();
                  _rej:=DOK.REJ().KOD;
                  REJ.cntx_pop();
                  _kom:='symbol dok. '+_nk+', rejestr '+_rej
               ?}
            |? 2+ISTDEFS.ISTDEF().RODZAJ='V7'
            || _nk:=VAT_PS.SYM_ZEW;
               {? _nk<>''
               || _rej:=VAT_PS.REJ_VAT;
                  _kom:='symbol dok. '+_nk+', rejestr VAT: '+_rej
               ?}
            ?};

            {? type_of(_reg)=2 & _reg<>''
            || _t+=exec('konwersja_xml','xml',_reg);
               {? ISTDEFS.FORM_VAL<>''
               || {? ($ISTDEFS.FORM_VAL)(_reg)=0
                  || {? var_press('ErrFun')<=0
                     || TAB_ERR.EL:=ISTDEFS.OPIS; TAB_ERR.add()
                     || ErrFun(1,_reg)
                     ?}
                  ?}
               ?}
            || {? var_press('ErrFun')<=0
               || TAB_ERR.EL:=ISTDEFS.OPIS; TAB_ERR.add()
               || ErrFun(0,_kom)
               ?}
            ?};
            {? ISTDEFS.COMMENT='T'
            || _t+='-->'
            || _t+='</'+ISTDEFS.OPIS+'>'
            ?};
            {? ISTDEFS.HIDDEN<>'T'
            || _tt:=maz_utf8(_t);
               {? _c || exec('toSHA','xml',_tt) ?};
               {? _a || fwrite(_a, _tt ) ?}
            ?}
         ?};
         ISTDEFS.FORMULA<>'' & ISTDEFS.FORM_XML<>'' & exec('run_fml','xml',ISTDEFS.FORM_XML,1)
      !}
   ?};
   {? ISTDEFS.FORMULA<>'' || exec('run_fml','xml',ISTDEFS.FORMULA,1,0) ?}
?}


\run_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wykonanie formuly przekazanej w tresic
::   WE: _a - tresc formuly do wykonania
::       _b - oczekiwany typ wyniku formuly
::       _c - parametr formuly
::   WY: wynik formuly
::  OLD: \run_fml/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>''
|| _a:=exec('transfer','xml',_a);
   on_error(2);
   _r:={? var_pres('_c')>0 || ($_a)(_c) || ($_a)() ?};
   {? in_error() || _r:=~~ ?};
   on_error()
|| _r:=~~
?};
{? _b=0 | type_of(_r)=_b || _r
|? _b=1 || 0
|? _b=2 || ''
|? _b=3 || "~~"
|? _b=4 || date(0,0,0)
|? _b=5 || time(0,0,0)
|? _b=7 || null
|| ~~
?}


\tekst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Teksty oswiadczen uzyte w plikach e-Deklaracji
::   WE: [_a] - wskazanie na E_DEK_S
::  OLD: \tekst/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
E_DEK_S.cntx_psh();
E_DEK_S.prefix();
{? _=0
|| _ok:={? ISTDEFS.E_DEK_S || E_DEK_S.seek(ISTDEFS.E_DEK_S) ?}
|| _ok:={? _a || E_DEK_S.seek(_a) ?}
?};
{? _ok
|| _t:=E_DEK_S.memo_txt(0,1,'MEMO')
|| _t:=''
?};
E_DEK_S.cntx_pop();
_t


\konwersja_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [DAROKR] [11.22]
:: OPIS: Konwersja znakow zastrzezonych w XML - UWAGA: kolejnosc kownwersji jest znaczaca
::   WE: _a - String do konwersji
::   WY: Wartosc String (napis) po konwersji
::  OLD: \konwersja_xml/edeklar.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a || _a || return('') ?};
{? PAR_SKID.get(93)<>'T'
|| {? _a*'&' & _a*'&amp;'=0 & _a*'&gt;'=0 & _a*'&lt;'=0 & _a*'&apos;'=0 & _a*'&quot;'=0
   | _a*'\''
   | _a*'\"'
   | _a*'<'
   | _a*'>'
   || _a:=STR.gsub(_a,'&','&amp;');
      _a:=STR.gsub(_a,'>','&gt;');
      _a:=STR.gsub(_a,'<','&lt;');
      _a:=STR.gsub(_a,'\'','&apos;');
      _a:=STR.gsub(_a,'\"','&quot;')
   ?}
|| {? _a*'&'
   || _buffer:='';
      _rest:=_a;
      {!
      |? _buffer+=((_rest*'&')-1)+_rest;
         _rest:=((_rest*'&')-1)-_rest;
         _test:=((1-_rest)*'&')+_rest;
         {? _test='' || _test:=_rest ?};
         {? _test*'&amp;'=0 & _test*'&gt;'=0 & _test*'&lt;'=0 & _test*'&apos;'=0 & _test*'&quot;'=0
         || _buffer+=STR.gsub(_test,'&','&amp;')
         || _buffer+=_test
         ?};
         _rest:=(+_test)-_rest;
         +_rest
      !};
      {? +_buffer || _a:=_buffer ?}
   ?};
   {? _a*'\'' | _a*'\"' | _a*'<' | _a*'>'
   || _a:=STR.gsub(_a,'>','&gt;');
      _a:=STR.gsub(_a,'<','&lt;');
      _a:=STR.gsub(_a,'\'','&apos;');
      _a:=STR.gsub(_a,'\"','&quot;')
   ?}
?};
_a


\edek_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Dodanie rekordu do archiwum e-Deklaracji (tabela E_DEK)
::   WE: _a - nazwa pliku e-Deklaracji
::  OLD: \edek_add/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
E_DEK.cntx_psh();
E_DEK.index('E_DEK'); E_DEK.prefix(); E_DEK.blank(0);
E_DEK.SYSTEM:=BPMN.SYM_DOM;
E_DEK.TYP:=SKID.TYP_ZAP;
E_DEK.USER_GEN:=OPERATOR.USER;
E_DEK.DATA_GEN:=date();
E_DEK.CZAS_GEN:=time();
E_DEK.OPIS:={? VAT_DEK.TYP='VIUDO'
            || {? VAT_DEK.KOR='1' || 'Złożenie: '+VAT_DEK.OPIS || 'Wersja robocza: '+VAT_DEK.OPIS ?}
            || VAT_DEK.OPIS
            ?};
E_DEK.ZRODLO:=VAT_DEK.ref();
E_DEK.OKRES:=VAT_DEK.OKRES;
E_DEK.AKC:='N';
{? E_DEK.add() || _ref:=E_DEK.ref(); E_DEK.bl_put('PLIK_GEN',_a,0) ?};
E_DEK.cntx_pop();
{? _ref || E_DEK.seek(_ref) ?}


\bd_dedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Przed usun okna W_EDEK tabeli ISTDEF
::   WE: _a - opcjonalny-integer 0-nie wyswietla komunikatow lub pytan, brak _a:=1-komunikaty
::  OLD: \bd_dedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(1) || _a || _a:=1 ?};
{? _a || {? ~exec('bm_edek','xml',1) || return(0) ?} ?};
{? {? _a || FUN.ask('Czy usunąć bieżący wiersz?'@) || 1 ?}
|| {? ISTDEF.r_lock(1,1)
   || ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),0);
      {? ISTDEFS.first()
      || {!
         |? exec('del_el','xml');
            ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first() || {! |? ISTDEFI.del() !} ?};
            ISTDEFS.del()
         !}
      ?};
      {? ~ISTDEF.del(,1) || ISTDEF.r_unlock() ?}
   || FUN.info('Struktura jest definiowana przez innego użytkownika.'@)
   ?}
?}


\bm_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Czy mozna modyfikowac specyfikacje e-Deklaracji
::   WE: _a - czy komunikowac? 1-tak 0-nie
::   WY: 1-tak 0-nie
::  OLD: \bm_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
VAT_DEK.index('VAT_VER'); VAT_DEK.prefix(ISTDEF.NR);
{? VAT_DEK.first()
|| E_DEK.index('ZRODLO');
   {!
   |? E_DEK.prefix(VAT_DEK.ref());
      _ok:={? E_DEK.find_ge(ISTDEF.DATA)
           || {? _a || FUN.info('Istnieją elektroniczne deklaracje\nutworzone na podstawie tej specyfikacji.'@) ?};
              0
           || 1
           ?};
      _ok & VAT_DEK.next()
   !}
?};
{? _ok & var_pres('VAT_DEKS')>0
|| VAT_DEKS.cntx_psh();
   VAT_DEKS.index('ISTDEF');
   VAT_DEKS.prefix(ISTDEF.ref());
   _ok:=~VAT_DEKS.first();
   VAT_DEKS.cntx_pop();
   {? ~_ok & _a
   || FUN.info('Istnieją deklaracje utworzone\nna podstawie tej specyfikacji.'@)
   ?}
?};
_ok


\del_el
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Usuwa elementy drzewa struktury e-Deklaracji
::  OLD: \del_el/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh(); ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
{? ISTDEFS.first()
|| {!
   |? exec('del_el','xml');
      ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
      {? ISTDEFI.first() || {! |? ISTDEFI.del() !} ?};
      ISTDEFS.del()
   !}
?};
ISTDEFS.cntx_pop()


\edek_prn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wydruk e-Deklaracji
::  OLD: \edek_prn/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_pyt:={? E_DEK.DATA_AKC=date(0,0,0) | ~E_DEK.PLIK_AKC
      || 1
      || FUN.choice('Jaki plik wydrukować?'@,,'&Deklaracji'@,'&Potwierdzenia'@)
      ?};
VAT_DEK.cntx_psh(); VAT_DEK.prefix();
E_DEK.ZRODLO();
{? _pyt=1
|| E_DEK.bl_get('PLIK_GEN','edek.xml',1);
   _typ:=exec('get_typ','xml');
   __EDEK_V:=1;
   {? 3+_typ='VAT'
   || _is:=var_pres('vat_typ')>0;
      {? ~_is
      || {? _typ='VAT-7' || vat_typ:='VAT7'
         |? _typ='VAT-7D' || vat_typ:='VAT7D'
         |? 6+_typ='VAT-27' || vat_typ:='VAT27'
         || vat_typ:='POD'
         ?}
      ?};
      {? 4+vat_typ='VAT7'
      || exec('vat_dwy','!fks_ved_zv7p')
      |? 5+vat_typ='VAT27'
      || exec('vat_dwy','!fks_ved_zvop')
      || exec('vat_dwy','!fks_ved_zvup')
      ?};
      {? ~_is || &vat_typ ?}
   |? 3+_typ='CIT'
   || {? ~exec('edek2html','xml')
      || exec('cit_prn','!fks_ved_zvcp')
      ?}
   |? 3+_typ='PIT' | 3+_typ='IFT'
   || _is:=var_pres('pit_typ')>0;
      {? ~_is
      || {? _typ='PIT-11'
         || pit_typ:='PIT11P'
         |? _typ='PIT-4R'
         || pit_typ:='PIT4R'
         |? _typ='PIT-8AR'
         || pit_typ:='PIT8AR'
         || pit_typ:=''
         ?}
      ?};
      exec('pit_wyd','edeklar')
   |? _typ='VIU-DO'
   || exec('print','fks_viudo')
   || exec('bl_view','#blob',E_DEK,'PLIK_GEN')
   ?};
   &__EDEK_V
|? _pyt=2
|| exec('upo_prn','xml',E_DEK,'PLIK_AKC',E_DEK.DATA_WYS)
?};
VAT_DEK.cntx_pop()


\upo_prn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Wydruk UPO
::   WE: _a - tabela
::       _b - akronim pola z plikiem UPO
::       _c - data
::  OLD: \upo_prn/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_kod:=exec('set_upo','xml',_a,_b,_c);
_ver:=(1+ver_upo)+(ver_upo+1);
_ok:=1;
{? _kod='3' & (_ver<>'' & _ver<>'10' & _ver<>'40' & _ver<>'50' & _ver<>'60' & _ver<>'70')
|| _ok:=0
?};
{? _ok
|| rep_exec('wsp_upo'+_kod)
|| FUN.info('Wykryto nową wersję UPO %1.\nWymagana aktualizacja oprogramowania.'@[ver_upo])
?};
VAR_DEL.delete('upo','ver_upo')


\get_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Zwraca typ formularza e-Deklaracji
::  OLD: \get_typ/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_f:=fopen('edek.xml','r',1); _kod:='';
{? _f
|| {!
   |? _r:=fread(_f);
      {? _r<>'\n'
      || {? _r*'<KodFormularza'
         || _p:=_r*'>';
            _r:=_p-_r;
            _p:=_r*'<';
            _kod:=_p+_r-1
         ?};
         _kod=''
      ?}
   !};
   fclose(_f)
?};
_kod


\set_upo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Ustawia tablice upo na podstawie UPO
::   WE: _a - tabela
::       _b - pole z UPO
::       _c - data wyslania
::  OLD: \set_upo/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('upo','ver_upo');
upo:=obj_new(13);
ver_upo:='';
{! _i:=1..13 |! upo[_i]:='' !};
_a.bl_get(_b,'upo.xml',1);
_f:={? _c>=date(2013,10,17) || fopen('upo.xml','ur',1) || fopen('upo.xml','r',1) ?};
{? _f
|| {!
   |? _r:=fread(_f);
      {? _r<>'\n'
      || exec('xmlatr2val','xml',_r,'Potwierdzenie','wersjaSchemy','ver_upo');
         _upo1:=upo[1];
         exec('xml2val','xml',_r,'NazwaPodmiotuPrzyjmujacego','upo[1]');
         {? _upo1<>upo[1] || upo[1]:=exec('sgml2str','xml',upo[1]) ?};
         exec('xml2val','xml',_r,'NumerReferencyjny','upo[2]');
         exec('xml2val','xml',_r,'DataWplyniecia','upo[3]');
         exec('xml2val','xml',_r,'SkrotDokumentu','upo[4]');
         exec('xml2val','xml',_r,'SkrotZlozonejStruktury','upo[5]');
         exec('xml2val','xml',_r,'NazwaStrukturyLogicznej','upo[6]');
         exec('xml2val','xml',_r,'NIP1','upo[7]');
         exec('xml2val','xml',_r,'NIP2','upo[8]');
         exec('xml2val','xml',_r,'StempelCzasu','upo[9]');
         exec('xml2val','xml',_r,'KodUrzedu','upo[10]');
         exec('xml2val','xml',_r,'PESEL1','upo[11]');
         exec('xml2val','xml',_r,'PESEL2','upo[12]');
         exec('xml2val','xml',_r,'SigningTime','upo[13]',0);
         1
      ?}
   !};
   fclose(_f)
?};
{? (_pk:=upo[3]*'.')
|| _pp:=upo[3]*'+';
   upo[3]:=((_pk-1)+upo[3])+((_pp-1)-upo[3])
?};
{? upo[10]<>''
|| US.index('URZSKNAZ'); US.prefix(); US.blank(1);
   US.EDEK_SYM:=upo[10];
   {? US.find_rec()
   || upo[10]:=US.NU
   ?};
   '3'
|| ''
?}


\edek_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2010]
:: OPIS: Podglad pliku e-Deklaracji
::  OLD: \edek_view/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_pyt:={? E_DEK.DATA_AKC=date(0,0,0) | ~E_DEK.PLIK_AKC
      || 1
      || FUN.choice('Jaki plik wyświetlić?'@,2,'&Deklaracji'@,'&Potwierdzenia'@)
      ?};
{? _pyt=1
|| exec('bl_view','#blob',E_DEK,'PLIK_GEN')
|? _pyt=2
|| exec('bl_view','#blob',E_DEK,'PLIK_AKC')
?}


\send_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Wysyla e-deklaracje lub odbiera UPO z bramki MF
::   WE: _a - opcjonalny-integer 0-dzialanie jak dla grupy rekordow, brak to 1 dzialanie poprzednie bez grupy
::  OLD: \send_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return()
?};
{? var_pres('_a')=type_of(1) || _a || _a:=1 ?};
_snd:=-(1+menu_txt())='w';
{? E_DEK.sel_size() | _a=0
|| {? _snd & E_DEK.AKC='W' | _snd=0 & E_DEK.AKC='N'
   || __ED_SEND+=1; return(0)
   |? E_DEK.AKC='T'
   || __ED_AKC+=1; return(0)
   || exec('edek2tab','xml');
      return(1)
   ?}
|| {? -(4+XINFO.EDEKGATE)='test'
   || _bramka:='Bramka testowa: %1'@[XINFO.EDEKGATE];
      _typ:='EXCLAM'
   || _bramka:='Bramka: %1'@[XINFO.EDEKGATE];
      _typ:='ASK'
   ?};
   {? _snd & E_DEK.AKC='W'
   || FUN.info('Deklaracja była już wysłana.'@)
   |? _snd=0 & E_DEK.AKC='N'
   || FUN.info('Deklaracja nie była jeszcze wysłana.'@)
   |? E_DEK.AKC='T'
   || FUN.info('Deklaracja była już wysłana i odebrano\nurzędowe poświadczenie odbioru.'@)
   |? XINFO.EDEKGATE=''
   || FUN.info('Nie podano adresu bramki przyjmującej e-Deklaracje.'@)
   |? E_DEK.AKC='W' &
      FUN.ask('%1.\n\nCzy wysłać prośbę o urzędowe\npoświadczenie odbioru\nwysłanej deklaracji?'@[_bramka],_typ) |
      E_DEK.AKC='N' &
      FUN.ask(_bramka+'.\n\n'+'Czy wysłać deklarację?'@,_typ)
   || exec('edek_tab','xml');
      exec('edek2tab','xml');
      exec('edek2send','xml');
      exec('del_tab','xml')
   ?}
?}


\edek_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Przygotowanie struktur przed wyslaniem deklaracji
::  OLD: \edek_tab/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TTEDEK');
TTEDEK:=tab_tmp(1,
   'REF','INTEGER','',
   'REF_ID','STRING[50]','',
   'ZN','STRING[1]','',
   'FILENAME','STRING[50]','',
   'OPIS','STRING[40]',''
);
__ED_LP:=__ED_OK:=__ED_SEND:=__ED_AKC:=__ED_CAN:=0;
__ED_SEL:=E_DEK.sel_size()


\edek2tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Przygotowanie deklaracji do wyslania
::  OLD: \edek2tab/skid_xml.fml
:: ~OST: INBLGET
::----------------------------------------------------------------------------------------------------------------------
TTEDEK.REF:=#E_DEK.ref();
TTEDEK.REF_ID:=E_DEK.REF_ID;
TTEDEK.ZN:=E_DEK.AKC;
TTEDEK.FILENAME:='signthis'+$__ED_LP+'.xml'; __ED_LP+=1;
TTEDEK.OPIS:=E_DEK.OPIS;
E_DEK.bl_get('PLIK_GEN','@!Tmp/'+TTEDEK.FILENAME,0);
TTEDEK.add()


\edek2send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Wysyla e-deklaracje na bramke MF
::   WE: [_a] - czy wyswietlac podsumowanie [1]-tak 0-nie
::  OLD: \edek2send/skid_xml.fml
:: ~OST: INBLPUT,INEXEDIR,INFCOPY,INFERASE,INFEXISTS,INFOPEN
::----------------------------------------------------------------------------------------------------------------------
exec('MBJAR','#object');
_msg:='';
_snd:=-(1+menu_txt())='w';
{? TTEDEK.first()
|| _fc:="{? fexists('@!Tmp/'+_a,0) || 1 || fcopy(_a,'@!Tmp/'+_a,1,0,1) ?}";
   _fcopy:=_fc('commons-codec-1.1.jar');
   _fcopy*=_fc('commons-httpclient-3.1.jar');
   _fcopy*=_fc('commons-logging-1.1.1.jar');
   _fcopy*=fcopy('edek.ks','@!Tmp/edek.ks',1,0,1);
   _fcopy*=fcopy('settings.xml','@'+exe_dir()+'/xades/settings_cryptoproviders.xml',1,0,1);
   _fcopy*=_fc('edeklaracje.jar');
   {? _fcopy=0 || _msg:='Błąd konfiguracji środowiska e-Deklaracji.'@ ?};
   exec('save_todo','xml',_=0 | _a);
   _sign:={? _snd || {? _fcopy || sign('PKCS#7','@!Tmp/signthis*.xml') ?} || _fcopy ?};
   _sdate:=date();
   _stime:=time();
   {? _sign & ~MBJAR.JavaExec(tmp_dir,1,'-jar','edeklaracje.jar')
   || _f:=fopen('@!Tmp/err','r',0);
      _err0:=
      {? _f
      || fclose(_f);
         1
      ?};
      {? _err0
      || ferase('@!Tmp/err',0)
      || E_DEK.cntx_psh(); E_DEK.prefix();
         {!
         |? E_DEK.seek(TTEDEK.REF,);
            _ok:=0; _err:='';
            _f:=fopen('@!Tmp/'+TTEDEK.FILENAME+'.ref','r',0);
            {? _f
            || {? E_DEK.REF_ID=''
               || _r:=fread(_f);
                  {? _r='MacroEDeklaracjeREF'
                  || _ref:=utf8_maz(fread(_f),"{? _a=0 || '' || %_a ?}");
                     E_DEK.REF_ID:=_ref;
                     E_DEK.AKC:='W';
                     E_DEK.DATA_WYS:=_sdate;
                     E_DEK.CZAS_WYS:=_stime;
                     E_DEK.USER_WYS:=OPERATOR.USER;
                     E_DEK.put();
                     _err:='Deklaracja została wysłana.\nTrwa przetwarzanie w US.'@;
                     _ok:=1
                  ?}
               ?};
               _is_ref:=1;
               fclose(_f)
            ?};
            {? _ok=0
            || _f:=fopen('@!Tmp/'+TTEDEK.FILENAME+'.log','r',0);
               {? _f
               || _r:=fread(_f);
                  {? _r='MacroEDeklaracjeLOG'
                  || _err:=utf8_maz(fread(_f),"{? _a=0 || '' || %_a ?}")
                  ?};
                  fclose(_f)
               || _f:=fopen('@!Tmp/'+TTEDEK.FILENAME+'.upo.xml','r',0);
                  {? _f
                  || _data:=date(0,0,0); _czas:=time(0,0,0);
                     {! |?
                        _r:=fread(_f);
                        {? _r<>'\n'
                        || {? _ok=0 & _r*'<Potwierdzenie' || _ok:=-1 ?};
                           {? _ok & (_poz:=_r*'<DataWplyniecia>')<>0
                           || _poz2:=_r*'</DataWplyniecia>';
                              _d:=19+((_poz+15)-_r);
                              _data:=date( #(4+_d), #(2+(5-_d)), #(2+(8-_d)));
                              _czas:=time( #(2+(11-_d)), #(2+(14-_d)), #(2+(17-_d)) )
                           ?};
                           {? _ok & _r*'<Przyjeto'
                           || _ok:={? _r*'true' || 1 || 2 ?}
                           ?}; 1
                        || 0
                        ?}
                     !};
                     fclose(_f);
                     {? _ok=1
                     || E_DEK.bl_put('PLIK_AKC','@!Tmp/'+TTEDEK.FILENAME+'.upo.xml',0,,'_'+TTEDEK.FILENAME+'.upo.xml');
                        E_DEK.AKC:='T';
                        E_DEK.DATA_AKC:=_data;
                        E_DEK.CZAS_AKC:=_czas;
                        E_DEK.put();
                        _err:=''
                     ?}
                  |? E_DEK.AKC='W'
                  || _err:='Deklaracja w trakcie przetwarzania.'@
                  ?}
               ?}
            ?};
            {? _err<>''
            || _msg:=_err;
               {? _snd & 9+_msg='Anulowano'@ | _snd=0 & _err='Deklaracja w trakcie przetwarzania.'@
               || __ED_CAN+=1
               |? _ok
               || __ED_OK+=1
               ?}
            |? _ok
            || _msg:='Deklaracja została przyjęta przez urząd.'@;
               __ED_OK+=1
            || _msg:='Powstał nieznany błąd podczas wysyłania deklaracji.'@
            ?};
            E_DEK.STATUS:=_msg;
            E_DEK.put();
            TTEDEK.next()
         !};
         E_DEK.cntx_pop()
      ?}
   ?};
   ferase('@!Tmp/commons-codec-1.1.jar',0);
   ferase('@!Tmp/commons-httpclient-3.1.jar',0);
   ferase('@!Tmp/commons-logging-1.1.1.jar',0);
   fcopy('@!Tmp/edek.ks','edek.ks',0,1,1);
   ferase('@!Tmp/edek.ks',0);
   ferase('@!Tmp/response.xml',0);
   ferase('@!Tmp/todo.txt',0);
   {? TTEDEK.first()
   || {!
      |? ferase('@!Tmp/'+TTEDEK.FILENAME,0);
         ferase('@!Tmp/'+TTEDEK.FILENAME+'.ref',0);
         ferase('@!Tmp/'+TTEDEK.FILENAME+'.upo.xml',0);
         ferase('@!Tmp/'+TTEDEK.FILENAME+'.log',0);
         ferase('@!Tmp/'+TTEDEK.FILENAME+'.sig',0);
         TTEDEK.next()
      !}
   ?}
?};
{? _=0 | _a
|| {? __ED_SEL
   || _lerr:=__ED_SEL-__ED_SEND-__ED_AKC-__ED_OK-__ED_CAN;
      FUN.info(
         {? var_pres('_a')=type_of(1) & _a=2
         || 'Liczba przetwarzanych deklaracji: %1'@[$__ED_SEL]+'\n\n'
         || 'Liczba zaznaczonych deklaracji: %1'@[$__ED_SEL]+'\n\n'
         ?}+
         {? __ED_AKC || 'Liczba odebranych już UPO: %1'@[$__ED_AKC]+'\n' || '' ?}+
         {? __ED_SEND
         || {? _snd
            || 'Liczba wysłanych wcześniej deklaracji: %1'@[$__ED_SEND]
            || 'Liczba nie wysłanych wcześniej deklaracji: %1'@[$__ED_SEND]
            ?}
         || ''
         ?}+'\n'+
         {? __ED_OK
         || {? _snd
            || 'Liczba przyjętych deklaracji przez urząd: %1'@[$__ED_OK]
            || 'Liczba odebranych UPO: %1'@[$__ED_OK]
            ?}+'\n'
         || ''
         ?}+
         {? __ED_CAN
         || {? _snd
            || 'Liczba anulowanych podpisów deklaracji: %1'@[$__ED_CAN]
            || 'Liczba przetwarzanych deklaracji: %1'@[$__ED_CAN]
            ?}+'\n'
         || ''
         ?}+
         {? _lerr || 'Liczba błędnych deklaracji: %1'@[$_lerr]+'\n' || '' ?}
      )
   || {? _msg<>''
      || STR.split(_msg); _str:='';
         {!
         |? _str+=STR.line(50)+'\n';
            STR.next()
         !};
         FUN.info(_str)
      ?}
   ?}
?}


\del_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Usuwa struktury po wyslaniu deklaracji
::  OLD: \del_tab/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TTEDEK','__ED_LP','__ED_SEND','__ED_AKC','__ED_CAN','__ED_OK','__ED_SEL')


\save_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Zapisuje plik konfiguracyjny dla edeklaracje.jar
::   WE: _a - tryb: 1-dostepna interakcja z uzytkownikiem, 0-brak interakcji
::  OLD: \save_todo/skid_xml.fml
:: ~OST: INFOPEN
::----------------------------------------------------------------------------------------------------------------------
TTEDEK.cntx_psh();
{? TTEDEK.first()
|| _f:=fopen('@!Tmp/todo.txt','w',0);
   {? _f
   || fwrite(_f,'MacroEDeklaracjeToDo');
      fwrite(_f,'host:'+XINFO.EDEKGATE);
      {? _a & XINFO.EDEKPRXN<>'' & XINFO.EDEKPRXP & (exec('get_user','proxy'); PROXY.CZY<>'N')
      || fwrite(_f,'proxyHost:'+XINFO.EDEKPRXN);
         fwrite(_f,'proxyPort:'+$XINFO.EDEKPRXP)
      ?};
      fwrite(_f,'tryb:'+$_a);
      fwrite(_f,'nie pytaj:1');
      fwrite(_f,'weryfikuj:0');
      fwrite(_f,'podpisuj:0');
      {!
      |? fwrite(_f,$TTEDEK.REF+'@'+TTEDEK.REF_ID+'@'+TTEDEK.ZN+'@'+TTEDEK.FILENAME+'@'+STR.maz2w95(TTEDEK.OPIS));
         TTEDEK.next()
      !};
      fclose(_f)
   ?}
?};
TTEDEK.cntx_pop()


\bgsendek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Przed akcja grupowa wysylania deklaracji lub odebrania UPO
::   WE: _a - opcjonalny-integer 0-nie wyswietla inny komunikat, brak _a:=1-komunikat od funkcji grupowej
::       _b - opcjonalny np. 'PIT-40', nie podano to 'PIT-11'
::  OLD: \bgsendek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(1) || _a || _a:=1 ?};
{? var_pres('_b')=type_of('') || _b || _b:='PIT-11' ?};
{? -(4+XINFO.EDEKGATE)='test'
|| _bramka:='Bramka testowa: '+XINFO.EDEKGATE;
   _typ:='EXCLAM'
|| _bramka:='Bramka: '+XINFO.EDEKGATE;
   _typ:='ASK'
?};
{? XINFO.EDEKGATE=''
|| FUN.info('Nie podano adresu bramki przyjmującej e-Deklaracje.'@)
|? _snd:=-(1+menu_txt())='w';
   {? _a
   || {? _snd
      || FUN.ask('%1.\n\nCzy wysłać zaznaczone deklaracje?'@[_bramka],_typ)
      || FUN.ask('%1.\n\nCzy odebrać urzędowe poświadczenie\nodbioru dla zaznaczonych deklaracji?'@[_bramka],_typ)
      ?}
   || FUN.ask('%1.\n\nCzy na pewno rozpocząć proces wysyłania e-Deklaracji %2?'@[_bramka,_b],_typ)
   ?}
|| exec('edek_tab','xml');
   1
?}


\agsendek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Po akcji grupowej wysylania deklaracji lub odbierania UPO
::  OLD: \agsendek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
exec('edek2send','xml');
exec('del_tab','xml')


\edek_unakc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akceptacja i anulowanie akceptacji e-Deklaracji
::  OLD: \edek_unakc/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? E_DEK.AKC='N'
|| FUN.info('Deklaracja nie była wysłana.'@)
|| {? E_DEK.AKC='W'
   || _pyt:='Deklaracja została wysłana do US.'@
   || _pyt:='Deklaracja została zaakceptowania przez US.'@
   ?};
   _pyt+='\nCzy przywrócić deklarację do ponownego wysłania?'@;
   {? FUN.ask(_pyt)
   || E_DEK.AKC:='N';
      E_DEK.DATA_AKC:=date(0,0,0);
      E_DEK.CZAS_AKC:=time(0,0,0);
      E_DEK.DATA_WYS:=date(0,0,0);
      E_DEK.CZAS_WYS:=time(0,0,0);
      E_DEK.REF_ID:='';
      E_DEK.STATUS:='';
      E_DEK.put()
   ?}
?}


\edekprfx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Zmiana zakresu przegladania archiwalnych e-Deklaracji
::  OLD: \edekprfx/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('OknROKE1')<=0 || exec('okno_rok','xml') || SIK.win_edit(OknROKE1) ?};
{? SIK.edit()
|| E_DEK.hdr_sel();
   E_DEK.index('OKRES');
   {? SIK.ROK1
   || OKRO_F.index('ROK'); OKRO_F.prefix(SIK.ROK1);
      {? OKRO_F.first()
      || {! |? OKRO_F.POCZ=date(0,0,0) & OKRO_F.next() !};
         E_DEK.prefix(BPMN.SYM_DOM,$(OKRO_F.POCZ~1));
         E_DEK.hdr_sel(' - %1'@[$(OKRO_F.POCZ~1)])
      ?}
   || E_DEK.prefix(BPMN.SYM_DOM)
   ?}
?};
SIK.win_edit();
VAR_DEL.delete('OknROKE1')


\okno_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK  [8.50]
:: OPIS: Utworzenie okienka dla wyboru roku
::  OLD: \okno_rok/skid_sik.fml
::----------------------------------------------------------------------------------------------------------------------
OknROKE1:=SIK.mk_edit('Wybierz rok bilansowy'@,0,'sik_red');
SIK.win_efld(OknROKE1,,'ROK1','NAZ','NAZWA',20,,,'Rok bilansowy'@,,'Nazwa roku bilansowego'@,1);
SIK.win_ebtn(OknROKE1,'text=%1,panel=bottom,align=end,display=1'['&OK'@],"'key:F2'");
SIK.win_ebtn(OknROKE1,'text=%1,panel=bottom,align=end,display=1'['&Anuluj'@],"'key:Esc'");
SIK.win_edit(OknROKE1);
ROK_F.index('NAZWA'); ROK_F.prefix(REF.FIRMA)


\bv_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2009+]
:: OPIS: Przed wyswietleniem rekordu tabeli E_DEK
::  OLD: \bv_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
KH.memo_set(E_DEK.STATUS,'OPIS');
_o:=E_DEK.win_edit('?');
E_DEK.win_edit('RED');
E_DEK.display();
E_DEK.win_edit(_o);
UNPAR.P1_BV:=UNPAR.P1_BE:=UNPAR.P1_AE:=UNPAR.P2_BV:=''


\dekl_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [DAROKR] [2008]
:: OPIS: Funkcja wyswietla z pozycji menu wersje deklaracji podatkowych
::   WE: _a - obszar
::  OLD: \dekl_ver/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.DEKL_NAZ:='';
BPMN.SYM_DOM:=_a;
VAT_VER.index('VER_OD');
VAT_VER.prefix(BPMN.SYM_DOM);
VAT_VER.win_sel('WER');
VAT_VER.select(,1,5)


\edek_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Definiowanie naglowka struktur sluzacych do generowania e-Deklaracji
::   WE: _a - obszar
::  OLD: \edek_def/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.ISTDEF:='D';
BPMN.SYM_DOM:=_a;
exec('myURL','object');
ISTDEF.index('VER'); ISTDEF.prefix(BPMN.SYM_DOM,SKID.ISTDEF);
ISTDEF.win_sel('W_EDEK'); ISTDEF.win_edit('R_EDEK');
ISTDEF.select();
VAR_DEL.delete('EDEK_EL0','EDEK_EL1')


\edek_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Definiowanie struktury sluzacej do generowania e-Deklaracji
::  OLD: \edek_str/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? ISTDEF.r_lock(1,1)
|| ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref()); VAR_DEL.delete('__WSEDEK');
   {? var_pres('__WSEDEK')<=0
   || __WSEDEK:=ISTDEFS.mk_sel('Struktura'@,'P',,'istdefs_wer',,,,1);
      ISTDEFS.win_fld(__WSEDEK,,'OPIS',,,50);
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Zwiń/rozwiń całość'@@,,'Zwija/rozwija wszystkie gałęzie struktury'@,
         "exec('show_all','xml')",,,,,,'Z');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Dołącz'@@,,'Dodanie nowego elementu do struktury'@,
         "exec('ba_sedek','xml')",,1,,,,'D');
      ISTDEFS.win_act(__WSEDEK,0,'DołączS',,,,"exec('ba_sedek','xml')");
      ISTDEFS.win_act(__WSEDEK,1,'Formuła','Dołącz'@@,,'Dodanie nowego elementu do struktury'@,
         "exec('ba_sedek','xml')",,1,,,,'D');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','dupLikuj',,'Stworzenie kopi elementu',"exec('edek_kopia','xml')");
      ISTDEFS.win_act(__WSEDEK,0,'Popraw',,,'Modyfikacja elementu struktury'@);
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Usuń'@@,,'Usunięcie elementu struktury',"exec('bd_sedek','xml')",,,,,,'U');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Dane doda&tkowe'@@,,'Usunięcie elementu struktury',"exec('akc_dodat','xml')",,,,,,'T');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Atrybuty'@@,,'Wyświetla atrybuty elementu struktury'@,
         "exec('edek_atr','xml')",,,,,,'A');
      ISTDEFS.win_act(__WSEDEK,0,'Menu','Nawiguj'@,,'Zestaw akcji do przemieszczania elementu w strukturze'@);
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Przesuń do &góry'@@,'Nawiguj'@,'Przesunięcie o jeden element wyżej'@,
         "exec('edek_m','xml',-1)",,,,,,'Z');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Przesuń w &dół'@@,'Nawiguj'@,'Przesunięcie o jeden element niżej'@,
         "exec('edek_m','xml',1)",,,,,,'D');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','P&rzesuń/tu'@@,'Nawiguj'@,'Przesuniecie elementu we wskazane miejsce'@,
         "exec('edek_mov','xml',1)",,,,,,'R');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','K&opiuj/tu'@@,'Nawiguj'@,'Tworzy kopię we wskazanym miejscu'@,
         "exec('edek_mov','xml',0)",,,,,,'O');
      ISTDEFS.win_act(__WSEDEK,0,'Formuła','Formuła'@@,'Nawiguj'@,'Wykonuje formułę dla zaznaczonych elementów'@,
         "exec('edek_fml','xml',0)",,,1,"exec('edek_fml','xml',1)","exec('edek_fml','xml',2)",'F');
      ISTDEFS.win_act(__WSEDEK,0,'Szukaj');
      ISTDEFS.win_act(__WSEDEK,0,'Kolejność');
      ISTDEFS.win_act(__WSEDEK,0,'Rekord',,,,"
         {? ISTDEFS.WYM<>'T'
         || ISTDEFS.cntx_psh();
            ISTDEFS.index('DRZEWO');
            ISTDEFS.prefix(ISTDEFS.ISTDEF,#ISTDEFS.ref());
            _has:=ISTDEFS.first();
            ISTDEFS.cntx_pop();
            {? _has
            || ''
            || '150:150:150'
            ?}
         || ''
         ?}
      ","exec('sprsedek','xml')")
   ?};
   ISTDEFS.win_sel(__WSEDEK);
   ISTDEFS.tr_fml(__WSEDEK,,"{? _a=-1 || 1 || _a ?}");
   {? SKID.ISTDEF='D'
   || ISTDEFS.win_edit('R_EDEK_P')
   |? SKID.ISTDEF='J'
   || ISTDEFS.win_edit('R_JPK_P2')
   ?};
   ISTDEFS.win_patt('SZUK');
   ISTDEFS.hdr_sel(' %1'@[ISTDEF.VER]);
   UNPAR.P10_BV:='exec(\'bvedsmem\',\'xml\')';
   _akc:={? SKID.ISTDEF='D' & exec('bm_edek','xml',0) |
            SKID.ISTDEF='J' & exec('bm_jpk_def','jpk',0)
         || ''
         || 'DCpvUNL:D'
         ?};
   ISTDEFS.select(,,,_akc);
   ISTDEF.r_unlock()
|| FUN.info('Struktura jest definiowana przez innego użytkownika.'@)
?}


\bvedsmem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Przed wyswietleniem pola z tekstem edeklaracji
::  OLD: \bvedsmem/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? -menu_txt()='popraw'
|| E_DEK_S.cntx_psh();
   E_DEK_S.prefix();
   _t:={? E_DEK_S.seek(ISTDEFS.E_DEK_S) || E_DEK_S.memo_txt(0,1,'MEMO') || '' ?};
   E_DEK_S.cntx_pop()
|| _t:=''
?};
UNPAR.P10:=_t;
1


\show_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja Zwin/Rozwin calosc
::  OLD: \show_all/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref());
{! |? {? ISTDEFS.TREE || ISTDEFS.seek(ISTDEFS.TREE,ISTDEFS.name()) || 0 ?} !};
{? ISTDEFS.tr_state || ISTDEFS.tr_set(0) || ISTDEFS.tr_set(1) ?}


\ba_sedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja dolacz okna W_EDEK tabeli ISTDEFS
::  OLD: \ba_sedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_sr:=-menu_txt='dołącz';
_l:=ISTDEFS.size();
_lp:={? _sr || 0 || 1 ?}+{? _l || ISTDEFS.LP || 1 ?};
UD_POM.GLOWNY:='N';
_tree:=ISTDEFS.TREE;
ISTDEFS.blank(1);
ISTDEFS.LP:=_lp;
ISTDEFS.ISTDEF:=ISTDEF.ref();
ISTDEFS.WYM:='T';
_okno:=ISTDEFS.win_edit('?');
{? SKID.ISTDEF='D'
|| ISTDEFS.win_edit('R_EDEK_D')
|| ISTDEFS.win_edit('R_JPK_D')
?};
{? ISTDEFS.edit("exec('sprsedek','xml')")
|| ISTDEFS.LP+=UD_POM.GLOWNY='T' | _tree;
   ISTDEFS.TREE:={? UD_POM.GLOWNY='T' || ISTDEFS.ref() || _tree ?};
   ISTDEFS.cntx_psh();
   ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
   _l:=_l=0 | exec('reNrAdd','#table','ISTDEFS','LP');
   ISTDEFS.cntx_pop();
   {? _l || ISTDEFS.add() ?}
?};
ISTDEFS.win_edit(_okno)


\edek_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Definiowanie atrybutow struktury sluzacej do generowania e-Deklaracji
::  OLD: \edek_atr/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? ISTDEFS.WYM='K'
|| FUN.info('Element końcowy nie zawiera atrybutów.'@)
|| ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
   ISTDEFI.win_sel('W_EDEK'); ISTDEFI.win_edit('R_EDEK');
   ISTDEFI.hdr_sel(' - %1'@[ISTDEFS.OPIS]);
   ISTDEFI.select(,,,{? exec('bm_edek','xml',0) || '' || 'DpvU:D' ?})
?}


\edek_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Przemieszczenie elementow w strukturze
::   WE: _a - (-1) do góry (1) w dół
::  OLD: \edek_m/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_lp:=0;
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.TREE);
ISTDEFS.cntx_psh();
{? (_a=1 & ISTDEFS.next()) | (_a=-1 & ISTDEFS.prev())
|| _lp:=ISTDEFS.LP;
   ISTDEFS.LP:=-1; ISTDEFS.put()
?};
ISTDEFS.cntx_pop();
{? _lp
|| _lp2:=ISTDEFS.LP;
   ISTDEFS.LP:=_lp; ISTDEFS.put();
   {? ISTDEFS.find_key(-1) || ISTDEFS.LP:=_lp2; ISTDEFS.put() ?}
?};
ISTDEFS.cntx_pop()


\bd_sedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja usun okna W_EDEK tabeli ISTDEFS
::  OLD: \bd_sedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh(); ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
_more:=ISTDEFS.first();
ISTDEFS.cntx_pop();
{? (_more=0 & (_pyt:=FUN.ask('Usunąć bieżący element?'@)) ) |
   (_more=1 & (_pyt:=FUN.choice('Usunąć bieżący element?'@,,'&Tak'@,'Tak z &powiązanymi'@)) )
|| _lp:=ISTDEFS.LP;
   ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
   {? ISTDEFI.first() || {!|? ISTDEFI.del() !} ?};
   _tree:=ISTDEFS.TREE;
   ISTDEFS.cntx_psh(); ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.TREE);
   _ref:={? ISTDEFS.next() | ISTDEFS.prev()
         || ISTDEFS.ref()
         || ISTDEFS.TREE
         ?};
   ISTDEFS.cntx_pop();
   ISTDEFS.cntx_psh();
   {? _pyt=1
   || ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
      {? ISTDEFS.first()
      || {! |?
            ISTDEFS.cntx_psh(); ISTDEFS.prefix(ISTDEF.ref());
            ISTDEFS.TREE:=_tree;
            ISTDEFS.put();
            ISTDEFS.cntx_pop();
            ISTDEFS.first()
         !}
      ?}
   || f_del:="
         ISTDEFI.prefix(ISTDEFS.ref()); {? ISTDEFI.first() || {!|? ISTDEFI.del() !} ?};
         ISTDEFS.cntx_psh(); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
         {? ISTDEFS.first()
         || {!
            |? f_del(1)
            !}
         ?};
         ISTDEFS.cntx_pop();
         {? _a || ISTDEFS.del() ?}
      ";
      f_del(0)
   ?};
   ISTDEFS.cntx_pop();
   ISTDEFS.cntx_psh(); ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
   {? ISTDEFS.del()
   || {? _lp<ISTDEFS.LP
      || exec('reNrDel','#table','ISTDEFS','LP')
      ?}
   ?};
   ISTDEFS.cntx_pop();
   {? _ref || {? type_of(_ref)=7 || ISTDEFS.seek(_ref) || ISTDEFS.seek(_ref,) ?} ?}
?}


\edek_mov
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Przemieszczenie lub kopiowanie elementow w strukturze
::   WE: _a - 1-przemieszczenie 0-kopiowanie
::  OLD: \edek_mov/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('EDEK_EL'+$_a)>0
|| _el:=($('EDEK_EL'+$_a))();
   _tree:=ISTDEFS.ref(); _lp:=ISTDEFS.LP;
   ISTDEFS.cntx_psh(); ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
   ISTDEFS.LP+=1;
   do();
   exec('reNrAdd','#table','ISTDEFS','LP');
   ISTDEFS.prefix();
   {? ISTDEFS.seek(_el)
   || _lp2:=ISTDEFS.LP;
      _istdef:=ISTDEFS.ISTDEF;
      ISTDEFS.TREE:=_tree;
      ISTDEFS.LP:=_lp+1;
      ISTDEFS.ISTDEF:=ISTDEF.ref();
      {? _a & ISTDEFS.put(1) | ~_a & ISTDEFS.add(1)
      || {? _a=0
         || ISTDEFI.index('LP'); ISTDEFI.prefix(_el);
            {? ISTDEFI.first()
            || {! |?
                  ISTDEFI.ISTDEFS:=ISTDEFS.ref();
                  ISTDEFI.cntx_psh(); ISTDEFI.prefix(); ISTDEFI.add(); ISTDEFI.cntx_pop();
                  ISTDEFI.next()
               !}
            ?}
         ?};
         ISTDEFS.prefix(_istdef);
         {? _a & ISTDEFS.find_key(_lp2+1)
         || exec('reNrDel','#table','ISTDEFS','LP')
         ?}
      || FUN.info('Przesunięcie niemożliwe.'@); undo()
      ?}
   ?};
   end();
   ISTDEFS.cntx_pop();
   VAR_DEL.delete('EDEK_EL'+$_a)
|| ($('EDEK_EL'+$_a+':=ISTDEFS.ref()'))();
   FUN.info('Wskaż miejsce docelowe.'@)
?}


\sprsedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Sprawdzenie poprawnosci danych dla rekordu tabeli ISTDEFS
::  OLD: \sprsedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=__CHK.record2(ISTDEFS,'OPIS',);
{? _ok=''
|| {? ISTDEFS.REGULY<>'' & ISTDEFS.E_DEK_S
   || FUN.info('Pole Formuła i Tekst nie mogą być\njednocześnie wypełnione.'@);
      _ok:='REGULY'
   ?}
?};
_ok


\edek_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Podglad schematu XSD dostarczonego przez Ministerstwo Finansow
::  OLD: \edek_sch/skid_xml.fml
:: ~OST: INSYSEXEC
::----------------------------------------------------------------------------------------------------------------------
_tmpdir:=fmk_tmp_dir(0);
{? type_of(_tmpdir) <> type_of(~~)
|| _fdir:=_tmpdir.get_path;
   exec('myURL','object');
   _file:=ISTDEF.XMLNS;
   {! |? _p:=_file*'/'; {? _p || _file:=_p-_file; 1 ?} !};
   myURL.Progress:=1;
   {? exec('interm','#system')
   || _v:=myURL.ToFileIN(ISTDEF.XMLNS, _fdir+'/'+_file)
   || _v:=myURL.ToFile(ISTDEF.XMLNS, _fdir+'/'+_file)
   ?};
   {? _v<>''
   || FUN.info('Pobranie pliku schematu zakończyło się błędem:\n%1.'@[_v])
   |? fcopy(_fdir+'/'+_file,'schemat.xsd',0,1,1)
   || {? exec('interm','#system')
      || dlg_save(_fdir+'/'+_file)
      || sys_exec('schemat.xsd')
      ?}
   ?}
?}


\edek_cpy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja kOpiuj okna W_EDEK tabeli ISTDEF
::  OLD: \edek_cpy/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? ISTDEF.edit("exec('ar_dedek','xml')")
|| _ref:=ISTDEF.ref();
   ISTDEF.TM_STAM:=exec('tm_stamp','#tm_stamp');
   {? ISTDEF.add()
   || ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(_ref,0);
      {? ISTDEFS.first()
      || {! |?
            ISTDEFS.cntx_psh(); ISTDEFS.prefix();
            ISTDEFS.ISTDEF:=ISTDEF.ref();
            ISTDEFS.TREE:=0;
            _txt:=ISTDEFS.memo_txt(,1,'ANOTACJA');
            ISTDEFS.add();
            {? _txt<>''
            || ISTDEFS.memo_set(_txt,'ANOTACJA');
               ISTDEFS.memo_put(,'ANOTACJA');
               ISTDEFS.put()
            ?};
            _ref2:=ISTDEFS.ref();
            ISTDEFS.cntx_pop();
            exec('cpy_atr','xml',_ref2);
            exec('cpy_one','xml',_ref2);
            ISTDEFS.next()
         !}
      ?}
   ?}
?}


\cpy_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Kopiowanie jednego elementu struktury e-Deklaracji
::   WE: _a - element drzewa do ktorego kopiowane sa elementy
::  OLD: \cpy_one/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEFS.ISTDEF,ISTDEFS.ref());
{? ISTDEFS.first()
|| {! |?
      ISTDEFS.cntx_psh(); ISTDEFS.prefix();
      ISTDEFS.ISTDEF:=ISTDEF.ref();
      ISTDEFS.TREE:=_a;
      _txt:=ISTDEFS.memo_txt(,1,'ANOTACJA');
      ISTDEFS.add();
      {? _txt<>''
      || ISTDEFS.memo_set(_txt,'ANOTACJA');
         ISTDEFS.memo_put(,'ANOTACJA');
         ISTDEFS.put()
      ?};
      _ref:=ISTDEFS.ref(); ISTDEFS.cntx_pop();
      exec('cpy_atr','xml',_ref);
      exec('cpy_one','xml',_ref);
      ISTDEFS.next()
   !}
?};
ISTDEFS.cntx_pop()


\cpy_atr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Kopiowanie atrybutow struktury e-Deklaracji
::   WE: _a - nowy element do ktorego kopiowane sa atrybuty
::  OLD: \cpy_atr/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFI.index('LP'); ISTDEFI.prefix(ISTDEFS.ref());
{? ISTDEFI.first()
|| {! |?
      ISTDEFI.cntx_psh(); ISTDEFI.prefix();
      ISTDEFI.ISTDEFS:=_a;
      ISTDEFI.add();
      ISTDEFI.cntx_pop();
      ISTDEFI.next()
   !}
?}


\ar_dedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Rekord po okna W_EDEK tabeli ISTDEF
::   WE: [_a] - typ operacji: 1-dołacz 0-popraw
::  OLD: \ar_dedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_press('_a')<=0 || -menu_txt()<>'popraw' || _a ?};
_r:=__CHK.record2(ISTDEF,
      'RODZAJ','Rodzaj'@,
      'NR','Numer wersji'@,
      'DATA','Data'@,
      'VER','Nazwa'@,
      'XMLNS','Schemat'@
);
{? _r=''
|| {? ISTDEF.NR().OD>ISTDEF.DATA
   || FUN.info('Data specyfikacji wcześniejsza od\ndaty wersji (%1).'@[$VAT_VER.OD]); _r:='DATA'
   || VAT_DEK.index('VAT_VER'); VAT_DEK.prefix(ISTDEF.NR);
      {? VAT_DEK.first()
      || E_DEK.index('ZRODLO');
         {!
         |? E_DEK.prefix(VAT_DEK.ref());
            {? E_DEK.find_ge(ISTDEF.DATA)
            || FUN.info('Istnieją elektroniczne deklaracje'
                '\nutworzone po dacie (%1) obowiązywania specyfikacji.'@[form(ISTDEF.DATA)]);
               _r:='DATA'
            ?};
            _r='' & VAT_DEK.next()
         !}
      ?};
      {? _r='' & ISTDEF.RODZAJ<>'SF'
      || ISTDEF.cntx_psh();
         _ref:=ISTDEF.ref();
         ISTDEF.index('DATA'); ISTDEF.prefix(BPMN.SYM_DOM,SKID.ISTDEF);
         {? ISTDEF.find_key(ISTDEF.RODZAJ,ISTDEF.NR,ISTDEF.DATA) & (_a | _ref<>ISTDEF.ref())
         || FUN.info('Istnieje już specyfikacja dla rodzaju %1 ważna od dnia %2.'@[ISTDEF.RODZAJ,$ISTDEF.DATA]);
            _r:='DATA'
         ?};
         ISTDEF.cntx_pop()
      ?};
      {? _r=''
      || _ref:=ISTDEF.ref();
         ISTDEF.cntx_psh();
         {? ISTDEF.find_rec() & (_a | ISTDEF.ref()<>_ref)
         || FUN.info('Specyfikacja już istnieje.'@);
            _r:='DATA'
         ?};
         ISTDEF.cntx_pop()
      ?}
   ?}
?}; _r


\edek_exp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Eksport specyfikacji e-Deklaracji (okno W_EDEK tabeli ISTDEF)
::   WE: [_a] - scieżka do pliku
::  OLD: \edek_exp/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_plik:={? var_press('_a')>0 || _a || '' ?};
{? _plik='' & FUN.ask('Czy rozpocząć eksport?'@)
|| _tmpdir:=fmk_tmp_dir(0);
   {? type_of(_tmpdir) <> type_of(~~)
   || _fdir:=_tmpdir.get_path
   || FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@)
   ?};
   _plik:=_fdir+'\\'+ISTDEF.VER+'.txt'
?};
{? _plik<>''
|| exec('przen','xml',0);
   _f:=fopen(_plik,'w');
   {? _f
   || fwrite(_f,'(C) Macrologic IMPEXP'+{? SKID.ISTDEF='D' || 'EDEK' || 'JPK_' ?}+'@1.5');
      _txt:=ISTDEF.RODZAJ+'@'+$ISTDEF.DATA+'@'+ISTDEF.VER+'@'+ISTDEF.XMLNS+'@'+$ISTDEF.NR().NR+'@'+$VAT_VER.OD+'@'+ISTDEF.R+'@';
      fwrite(_f,_txt);
      ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
      ISTDEFI.index('LP');
      {? ISTDEFS.first()
      || {!
         |? _txt:='E@'+$ISTDEFS.LP+'@'+ISTDEFS.OPIS+'@'+ISTDEFS.REGULY+'@'+ISTDEFS.WYM+'@'+ISTDEFS.HIDDEN+'@'+
                  ISTDEFS.FORMULA+'@'+ISTDEFS.FORM_XML+'@'+
                  {? SKID.ISTDEF='J'
                  || ISTDEFS.NAZTAB+'@'+ISTDEFS.TYPFLD+'@'+ISTDEFS.FORM_VAL+'@'+ISTDEFS.COMMENT+'@'
                  || ''
                  ?};
            ISTDEFS.cntx_psh();
            _txt+={? ISTDEFS.seek(ISTDEFS.TREE,ISTDEFS.name()) || $ISTDEFS.LP || '0' ?}+'@';
            ISTDEFS.cntx_pop();
            {? ISTDEFS.E_DEK_S
            || _txt+=exec('tekst','xml')+'@'
            || _txt+='@'
            ?};
            _txt+=$ISTDEFS.LICZ+'@';
            _dok:=ISTDEFS.memo_txt(,1,'ANOTACJA');
            _dok:=STR.gsub(_dok,'\r','');
            _dok:=STR.gsub(_dok,'\n',' ');
            _txt+=ISTDEFS.PARSER+'@'+STR.maz2w95(_dok)+'@';
            {? SKID.ISTDEF='D'
            || _txt+=ISTDEFS.TYPFLD+'@'+ISTDEFS.NAZTAB+'@'
            ?};
            fwrite(_f,_txt);
            ISTDEFI.prefix(ISTDEFS.ref());
            {? ISTDEFI.first()
            || {! |?
                  fwrite(_f,'A@'+ISTDEFI.NAZ+'@'+ISTDEFI.REGULY+'@');
                  ISTDEFI.next()
               !}
            ?};
            ISTDEFS.next()
         !}
      ?};
      fclose(_f)
   ?};
   {? var_press('_a')<1
   || dlg_save(_plik,0)
   ?}
?}


\edek_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Import specyfikacji e-Deklaracji
::   WE: [_a] - nazwa pliku z servera lub gdy brak - dialog z uzytkownikiem
::       [_b] - import do istniejącego nagłówka
::       [_c] - plik na serwerze: 1-tak 0-nie
::  OLD: \edek_imp/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_add:=var_press('_b')<=0 | _b=0;
_local:=var_press('_a')<=0 | _add=0;
{? var_pres('_c')=type_of(1) || _local:=~_c ?};
{? _ | FUN.ask('Czy rozpocząć import?'@)
|| _tmpdir:=fmk_tmp_dir(0);
   {? type_of(_tmpdir) <> type_of(~~)
   || _fdir:=_tmpdir.get_path
   || FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@);
      return()
   ?};
   _plik:={? _
          || _a
          || dlg_upload(_fdir,0,'.txt',0)
          ?};
   {? _plik<>''
   || {? ~_ || _plik:=_fdir+exec('sep','#file',1)+_plik ?};
      _f:={? _local=0 || fopen(_plik,'r',1) || fopen(_plik,'r') ?};
      {? _f
      || _txt:=fread(_f);
         {? _txt*('(C) Macrologic IMPEXP'+{? SKID.ISTDEF='D' || 'EDEK' || 'JPK_' ?})
         || _ver:=26-_txt;
            _txt:=fread(_f);
            {? _txt<>'\n'
            || {? _add
               || ISTDEF.blank(0);
                  ISTDEF.SYSTEM:=BPMN.SYM_DOM;
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEF.RODZAJ:=_w;
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEF.DATA:=date(#(4+_w),#(5-_w-3),#(_w+2));
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEF.VER:=_w;
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEF.XMLNS:=_w;
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                  _p:=_txt*'@'; _data:=_p+_txt-1; _txt:=_p-_txt;
                  _ver:=null;
                  {? SKID.ISTDEF='D'
                  || VAT_VER.index('VER_NR'); VAT_VER.prefix(BPMN.SYM_DOM,ISTDEF.RODZAJ,ISTDEF.RODZAJ,#_w);
                     {? VAT_VER.first()
                     || _nr_add:=0;
                        _ver:=VAT_VER.ref()
                     || VAT_VER.SYSTEM:=BPMN.SYM_DOM;
                        VAT_VER.NR:=#_w;
                        VAT_VER.OD:=date(#(4+_data),#(5-_data-3),#(_data+2));

                        VAT_VER.NAZWA:=ISTDEF.RODZAJ;
                        _nr_add:=1
                     ?}
                  || _nr_add:=0

                  ?};
                  ISTDEF.IST_ISTK:=SKID.ISTDEF;
                  _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                  ISTDEF.R:=_w;
                  {? _nr_add
                  || _ok:=1
                  || ISTDEF.cntx_psh();
                     ISTDEF.index('DATA');
                     {? ISTDEF.RODZAJ='SF'
                     || ISTDEF.prefix(BPMN.SYM_DOM,SKID.ISTDEF,ISTDEF.RODZAJ,_ver,ISTDEF.DATA,ISTDEF.VER,)
                     || ISTDEF.prefix(BPMN.SYM_DOM,SKID.ISTDEF,ISTDEF.RODZAJ,_ver,ISTDEF.DATA)
                     ?};
                     {? ISTDEF.first()
                     || {? _=0
                        || {? SKID.ISTDEF='D'
                           || FUN.info('Istnieje specyfikacja \'%1\' dla dnia %2.'@[ISTDEF.VER,$ISTDEF.DATA])
                           || FUN.info('Istnieje specyfikacja dla dnia %1.'@[$ISTDEF.DATA])
                           ?}
                        ?};
                        _ok:=0
                     || _ok:=1
                     ?};
                     ISTDEF.cntx_pop()
                  ?}
               || _ok:=1
               ?};
               {? _ok
               || VAT_VER.cntx_psh();
                  ISTDEF.cntx_psh();
                  {? _add & _nr_add
                  || VAT_VER.prefix();
                     VAT_VER.add();
                     _ver:=VAT_VER.ref()
                  ?};
                  {? _add
                  || ISTDEF.NR:=_ver;
                     ISTDEF.prefix();
                     ISTDEF.add()
                  ?};
                  ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
                  ISTDEFI.index('LP'); ISTDEFI.prefix();
                  {! |?
                     _txt:=fread(_f);
                     {? _txt<>'\n'
                     || _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                        {? _w='E'
                        || ISTDEFS.blank(1);
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.LP:=#_w;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.OPIS:=_w;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.REGULY:=exec('transfer','xml',_w);
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.WYM:=_w;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.HIDDEN:=_w;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.FORMULA:=exec('transfer','xml',_w,1);
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFS.FORM_XML:=exec('transfer','xml',_w,1);
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                           {? SKID.ISTDEF='J'
                           || ISTDEFS.NAZTAB:=_w;
                              _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                              ISTDEFS.TYPFLD:=_w;
                              _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                              ISTDEFS.FORM_VAL:=_w;
                              _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                              ISTDEFS.COMMENT:=_w;
                              _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt
                           ?};
                           {? _w='0'
                           || ISTDEFS.TREE:=0
                           || ISTDEFS.cntx_psh();
                              _r:={? ISTDEFS.find_key(#_w)
                                  || ISTDEFS.ref()
                                  || 0
                                  ?};
                              ISTDEFS.cntx_pop();
                              ISTDEFS.TREE:=_r
                           ?};
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                           {? _w<>'' || ISTDEFS.E_DEK_S:=exec('find_txt','xml',_w) ?};
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                           {? _w<>'' || ISTDEFS.LICZ:=#_w ?};
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                           ISTDEFS.PARSER:=_w;
                           ISTDEFS.ISTDEF:=ISTDEF.ref();
                           ISTDEFS.add();
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                           {? var_press('ANOTACJA',ISTDEFS)>0 & _w<>''
                           || ISTDEFS.memo_set(STR.w952maz(_w),'ANOTACJA');
                              ISTDEFS.memo_put(,'ANOTACJA');
                              ISTDEFS.put()
                           ?};
                           {? SKID.ISTDEF='D'
                           || _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                              ISTDEFS.TYPFLD:=_w;
                              _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt;
                              ISTDEFS.NAZTAB:=_w;
                              ISTDEFS.put()
                           ?};
                           _lp:=1
                        || ISTDEFI.blank(1);
                           ISTDEFI.LP:=_lp; _lp+=1;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFI.NAZ:=_w;
                           _p:=_txt*'@'; _w:=_p+_txt-1; _txt:=_p-_txt; ISTDEFI.REGULY:=_w;
                           ISTDEFI.ISTDEFS:=ISTDEFS.ref();
                           ISTDEFI.add()
                        ?};
                        1
                     || 0
                     ?}
                  !};
                  ISTDEF.cntx_pop();
                  VAT_VER.cntx_pop()
               ?}
            ?};
            fclose(_f);
            _ok
         || fclose(_f);
            {? SKID.ISTDEF='D'
            || FUN.info('Wskazany plik nie jest plikiem\neksportu specyfikacji e-Deklaracji.'@)
            || FUN.info('Wskazany plik nie jest plikiem\neksportu specyfikacji JPK.'@)
            ?};
            0
         ?}
      ?}
   ?}
?}


\find_txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Zwraca wskazanie na tekst (E_DEK_S)
::   WE: _a - tekst
::  OLD: \find_txt/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
E_DEK_S.index('LP'); E_DEK_S.prefix(ISTDEF.RODZAJ,); _ok:=0;
{? E_DEK_S.first()
|| {!
   |? _ok:=_a=exec('tekst','xml',E_DEK_S.ref());
      _ok=0 & E_DEK_S.next()
   !}
?};
{? _ok=0
|| E_DEK_S.LP:=
   {? E_DEK_S.last()
   || E_DEK_S.LP
   || 0
   ?}+1;
   E_DEK_S.TYP:=ISTDEF.RODZAJ;
   E_DEK_S.add();
   E_DEK_S.memo_set(_a,'MEMO');
   E_DEK_S.memo_put(,'MEMO')
?};
E_DEK_S.ref()


\edek_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Aktualizacja e-deklaracji
::  OLD: \edek_upd/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'HTTPPATH');
{? XINFO.HTTPPATH=''
|| {? FUN.ask('Nie wskazano adresu serwera z\naktualizacjami w parametrach programu.\nCzy przyjąć adres domyślny?'@)
   || XINFO.HTTPPATH:='https://www.macrologic.pl/update/'
   || return(0)
   ?}
?};
{? SKID.ISTDEF='D'
|| _pyt:=FUN.choice('Uruchomiono procedurę aktualizacji e-Deklaracji.\n'
                    'Dane zostaną pobrane ze strony www.macrologic.pl.\n\n'
                    'Co zaktualizować?'@,1,'Schematy'@,'Moduł'@);
   {? _pyt=1
   || exec('edek_upd1','xml')
   |? _pyt=2
   || exec('edek_upd2','xml')
   ?}
|? SKID.ISTDEF='J'
|| _pyt:=FUN.choice('Uruchomiono procedurę aktualizacji schematów JPK.\n'
                    'Dane zostaną pobrane ze strony www.macrologic.pl.\n\n'@,1,
                    'Pobierz'@);
   {? _pyt=1
   || exec('edek_upd1','xml')
   ?}
?}


\edek_upd1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Aktualizacja schematow e-deklaracji
::   WE: [_a] - dostępne dialogi? [1]-tak 0-nie
::  OLD: \edek_upd1/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<=0 || _a:=1 ?};
_html:=XINFO.HTTPPATH+{? XINFO.HTTPPATH+1='/' || '' || '/' ?};
_file:={? SKID.ISTDEF='D'
       || 'edekupd1.txt'
       || 'jpk_upd.txt'
       ?};
_hed:={? SKID.ISTDEF='D'
      || '(C) Macrologic UPDATEEDEK1'
      || '(C) Macrologic UPDATEJPK_1'
      ?};
no_msg(1); errno;
_http:=inet_get(_html+_file);
_err:=errno;
{? _err & _a
|| no_msg();
   echo('Błąd funkcji inet_get().');
   FUN.info('Podano nieprawidłowy adres serwera do aktualizacji.\n'+
            'Wymagane wpisanie poprawnego adresu:\n\n'+
            'https://www.macrologic.pl/update\n\n'+
            'Wspólne - Ustawienia systemu - Ustawienia e-deklaracji i JPK');
   no_msg();
   return(0)
|| no_msg()
?};
exec('set_ssl','xml',_http);
_ok:=_http.http_get();
{? _ok=200
|| _text:=_http.get_data()
?};
&_http;
{? _ok=200 & 26+_text=_hed
|| _f:=fopen('edek_upd.txt','bw',1);
   {? _f
   || fwrite(_f,28-_text);
      fclose(_f)
   || {? _a || FUN.info('Błąd zapisu pliku aktualizacji.'@) ?};
      return(0)
   ?};
   VAR_DEL.delete('TT_UPD');
   TT_UPD:=tab_tmp(2,
      'SYSTEM','STRING[8]',,
      'TYP','STRING[10]',,
      'DATA','DATE',,
      'PLIK','STRING[100]',
   );
   TT_UPD.import('edek_upd.txt',,,'@',,,
      'SYSTEM',,1,,
      'TYP',,2,,
      'DATA',,3,,
      'PLIK',,4,
   );
   _l_upd:=0;
   TT_UPD.prefix({? BPMN.SYM_DOM='FKS' || 'FIKS' || 'KALI' ?});
   {? TT_UPD.first()
   || {!
      |? _http:=inet_get(_html+TT_UPD.PLIK);
         exec('set_ssl','xml',_http);
         _ok:=_http.http_get();
         {? _ok=200
         || _text:=_http.get_data()
         ?};
         &_http;
         {? _ok & 25+_text='(C) Macrologic IMPEXP'+{? SKID.ISTDEF='D' || 'EDEK' || 'JPK_' ?}
         || _f:=fopen('edek_up1.txt','bw',1);
            {? _f
            || fwrite(_f,_text);
               fclose(_f);
               VAT_VER.cntx_psh();
               _l_upd+=exec('edek_imp','xml','edek_up1.txt');
               VAT_VER.cntx_pop()
            ?}
         ?};
         TT_UPD.next()
      !}
   ?};
   {? _a
   || FUN.info('Liczba dostępnych aktualizacji: %1\n'
               'Liczba wykonanych aktualizacji: %2.'@[$TT_UPD.size(),$_l_upd])
   ?};
   _l_upd
|| FUN.info('Wystąpił błąd podczas pobierania plików aktualizacji.'@);
   -1
?}


\edek_upd2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Aktualizacja modułu e-deklaracji
::  OLD: \edek_upd2/skid_xml.fml
:: ~OST: INFCOPY,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return(0)
?};
_html:=XINFO.HTTPPATH+{? XINFO.HTTPPATH+1='/' || '' || '/' ?};
no_msg(1); errno;
_http:=inet_get(_html+'edeklaracje/sha.txt');
_err:=errno;
{? _err
|| no_msg();
   FUN.info('Podano nieprawidłowy adres serwera do aktualizacji.\n'@+
            'Wymagane wpisanie poprawnego adresu:\n\n'@+
            'https://www.macrologic.pl/update\n\n'+
            'Wspólne - Ustawienia systemu - Ustawienia e-deklaracji i JPK'@);
   no_msg();
   return(0)
|| no_msg()
?};
myURL.Progress:=0;
_text:=myURL.ToString(_html+'edeklaracje/sha.txt');
{? myURL.OK
|| _f:=fopen('sha.txt','bw',1);
   {? _f
   || fwrite(_f,_text);
      fclose(_f)
   || FUN.info('Błąd zapisu pliku aktualizacji.'@);
      return(0)
   ?};
   exec('Crypto','object');
   VAR_DEL.delete('TT_UPD');
   TT_UPD:=tab_tmp(1,
      'PLIK','STRING[50]',,
      'SHA','STRING[41]',,
      'UPD','INTEGER',,
      'OK','INTEGER',
   );
   _i1:=TT_UPD.index('?');
   _i2:=TT_UPD.ndx_tmp('',1,'UPD',,0);
   TT_UPD.import('sha.txt',,,'@',,,
      'PLIK',,1,,
      'SHA',,2,
   );
   {? TT_UPD.first()
   || _pth:=tmp_dir();
      {!
      |? _plik:=_pth+'/'+TT_UPD.PLIK;
         _sha:={? fcopy(TT_UPD.PLIK,'@'+_plik,1,0,1) || Crypto.sha(_plik) || '' ?};
         TT_UPD.UPD:={? TT_UPD.SHA=_sha || 0 || 1 ?};
         {? TT_UPD.UPD
         || TT_UPD.OK:=
            {? (5+(myURL.ToFile(_html+'edeklaracje/'+TT_UPD.PLIK,_pth+'/'+TT_UPD.PLIK)))='[ERR]'
            || 0
            || fcopy(TT_UPD.PLIK,TT_UPD.PLIK+'.bak',1,1,1);
               fcopy('@'+_pth+'/'+TT_UPD.PLIK,TT_UPD.PLIK,0,1,1)
            ?}
         ?};
         TT_UPD.put();
         TT_UPD.next()
      !}
   ?};
   _is_set:=exec('is_settings','xml');
   {? TT_UPD.find_key('settings1.xml') & TT_UPD.UPD & TT_UPD.OK |
      TT_UPD.find_key('settings2.xml') & TT_UPD.UPD & TT_UPD.OK |
      ~_is_set
   || _upd:=1;
      _bak:='settings.'+STR.gsub( date()$1,'/','')+'_'+STR.gsub(time()$1 ,':','')+'.xml';
      _ok:=~_is_set | fcopy('settings.xml',_bak,1,1,1);
      _ok:=_ok & fcopy('settings1.xml','settings.xml',1,1,1);
      {? _ok
      || _p2:=fopen('settings2.xml','ur',1);
         _p1:=fopen('settings.xml','ua',1);
         {? _p1
         || {? _p2
            || _first:=1;
               {!
               |? _line:=fread(_p2);
                  {? _first
                  || _dll:=spli_str(XINFO.EDEK_DLL,';');
                     _txt:='';
                     {! _i:=1..obj_len(_dll)
                     |! {? _dll[_i]+4='.dll'
                        || {? _first
                           || _txt+=_dll[_i];
                              _first:=0
                           || _txt+='</URI></HardwareProvider>\r\n\t\t<HardwareProvider><Name>PKCS#11 Type A</Name><URI>'+_dll[_i]
                           ?}
                        ?}
                     !};
                     _line:=_txt+_line;
                     _first:=0
                  ?};
                  fwrite(_p1,_line);
                  _line<>'\n'
               !};
               fclose(_p2);
               _ok:=1
            ?};
            fclose(_p1)
         || _ok:=0
         ?}
      ?}
   || _upd:=0;
      _ok:=0
   ?};
   {? TT_UPD.find_key('settings1.xml') || TT_UPD.del() ?};
   {? TT_UPD.find_key('settings2.xml') || TT_UPD.del() ?};
   TT_UPD.PLIK:='settings.xml';
   TT_UPD.UPD:=_upd;
   TT_UPD.OK:=_ok;
   TT_UPD.add();
   TT_UPD.index(_i2);
   TT_UPD.prefix(1);
   {? TT_UPD.first()
   || TT_UPD.index(_i1);
      TT_UPD.prefix();
      UNPAR.P10:='';
      _o:=TT_UPD.mk_sel('Wynik aktualizacji'@);
      TT_UPD.win_fld(_o,,'PLIK',,,,,,'Plik'@);
      TT_UPD.win_fld(_o,UNPAR,'P10',,,3,,,'Stan'@);
      TT_UPD.win_act(_o,,'Formuła','Legenda'@@,,,"
         exec('legenda','color','TT_UPD#01')
      ",,1);
      TT_UPD.win_fml(_o,UNPAR,'P10',,'ICON_BEFORE',"
         {? TT_UPD.UPD
         || {? TT_UPD.OK
            || 'xwin16.png:38'
            || 'xwin16.png:81'
            ?}
         || ''
         ?}
      ");
      TT_UPD.win_sel(_o);
      TT_UPD.select()
   || FUN.info('Aktualizacja modułu e-Deklaracji nie jest wymagana.'@)
   ?}
|| FUN.info('Nie udało się pobrać informacji o dostępnych aktualizacjach.'@)
?}


\is_settings
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Czy istnieje plik settings.xml
::  OLD: \is_settings/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_f:=fopen('settings.xml','r',1,0);
{? _f
|| fclose(_f);
   1
?}


\f3_rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Klawisz F3 dla pola ISTDEF.RODZAJ dla e-Deklaracji
::  OLD: \f3_rodzaj/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_r:='';
VAR_DEL.delete('P_RODZ');
P_RODZ:=obj_new(@.CLASS.POPUP);
{? BPMN.SYM_DOM='FKS'
|| _r:=6+P_RODZ.select('VAT7   - deklaracja VAT 7',
                       'VAT7D  - deklaracja VAT 7D',
                       'VAT27  - deklaracja VAT 27',
                       'VAT27K - deklaracja VAT 27K',
                       'POD    - deklaracja VAT UE',
                       'PODK   - deklaracja VAT UE korekta',
                       'VIUDO  - deklaracja VIU-DO',
                       'CIT2   - deklaracja CIT 2',
                       'CIT8   - deklaracja CIT 8',
::Poczatek modyfikacji dla Maclex
                       'O23    - Orcom Rb-23',
                       'O27    - Orcom Rb-27',
                       'O28    - Orcom Rb-28',
                       'O28z   - Orcom Rb-28 zalacznik',
                       'B27S   - Besti@ Rb-27S',
                       'B28S   - Besti@ Rb-28S',
                       'TPLW   - Trezor plan wydatków',
                       'TPLD   - Trezor plan dochodów',
                       'T23    - Trezor Rb-23',
                       'T27    - Trezor Rb-27',
                       'T28    - Trezor Rb-28',
                       'TRBN   - Trezor Rb-N',
                       'TRBZ   - Trezor Rb-Z'
::Koniec modyfikacji dla Maclex
                      )
|? BPMN.SYM_DOM='PPL'
|| _r:=6+P_RODZ.select('PIT4R  - deklaracja PIT 4R',
                       'PIT8AR - deklaracja PIT 8AR',
                       'PIT11  - deklaracja PIT 11',
                       'PIT40  - deklaracja PIT 40',
                       'PIT8C  - deklaracja PIT 8C',
                       'IFT1   - deklaracja IFT 1',
                       'IFT1R  - deklaracja IFT 1R'
                      )
?};
_r:=form(_r);
VAR_DEL.delete('P_RODZ');
{? _r<>'' || _r || 0 ?}


\ae_rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Po redakcji pola ISTDEF.RODZAJ dla e-Deklaracji
::  OLD: \ae_rodzaj/skid_xml.fml
::  OLD: \ae_rodzaj/edi_def.fml
::----------------------------------------------------------------------------------------------------------------------
_Rodzaj:={? cur_tab=VAT_VER || 'Nazwa'@ || 'Rodzaj'@ ?};
{? fld=''
|| FUN.info('Niewypełnione pola %1.'@[_Rodzaj]); 0
::Poczatek modyfikacji dla Maclex Fiks 12-10-2009 AK [1120]
|? exec('prfx_rodzaj','xml')*(fld+'|')=0
::Koniec modyfikacji dla Maclex
|| FUN.info('Niewłaściwa wartość pola %1.'@[_Rodzaj]); 0
|| SKID.DEKL_NAZ:=fld(); 1
?}


\prfx_rodzaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Dozwolone wartosci pola ISTDEF.RODZAJ dla e-deklaracji
::  OLD: \prfx_rodzaj/skid_xml.fml
::  OLD: \prfx_rodzaj/edi_def.fml
::----------------------------------------------------------------------------------------------------------------------
{? BPMN.SYM_DOM='FKS'
|| {? SKID.ISTDEF='D'
   || 'VAT7|VAT7D|VAT27|VAT27K|POD|PODK|CIT2|CIT8|VIUDO|'+exec('ae_typy','edi_def')
   || 'FA|KR|MAG|VAT|WB|SF|V7K|V7M|GV|'
   ?}
|| 'PIT4R|PIT8AR|PIT11|PIT40|PIT8C|IFT1|IFT1R|'
?}


\bl_edek_system
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Wartość początkowa pola VAT_VER.SYSTEM
::----------------------------------------------------------------------------------------------------------------------
BPMN.SYM_DOM


\ba_aedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja dolacz okna W_EDEK tabeli ISTDEFI
::  OLD: \ba_aedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_sr:=-menu_txt='dołącz';
_l:=ISTDEFI.size();
_lp:={? _sr || 0 || 1 ?}+{? _l || ISTDEFI.LP || 1 ?};
ISTDEFI.blank(1);
ISTDEFI.LP:=_lp;
ISTDEFI.ISTDEFS:=ISTDEFS.ref();
{? ISTDEFI.edit("exec('spraedek','xml')")
|| {? _l=0 | exec('reNrAdd','#table','ISTDEFI','LP') || ISTDEFI.add() ?}
?}


\bd_aedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Akcja usun okna W_EDEK tabeli ISTDEFI
::  OLD: \bd_aedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Usunąć bieżący atrybut?'@)
|| _lp:=ISTDEFI.LP;
   {? ISTDEFI.del()
   || {? _lp<ISTDEFI.LP || exec('reNrDel','#table','ISTDEFI','LP') ?}
   ?}
?}


\bd_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Przed akcja usun okna WER tabeli E_DEK
::  OLD: \bd_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? E_DEK.AKC<>'N'
|| FUN.info('Deklaracja elektroniczna jest zaakceptowana.\nUsunięcie niemożliwe.'@); 0
|| 1
?}


\spraedek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Sprawdzenie poprawnosci danych dla rekordu tabeli ISTDEFI
::  OLD: \spraedek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_r:=__CHK.record2(ISTDEFI,
      'LP','Liczba porządkowa',
      'NAZ','Nazwa',
      'REGULY','Formuła'
);
{? _r=''
|| _naz:=ISTDEFI.NAZ; _ref:=ISTDEFI.ref();
   ISTDEFI.cntx_psh();
   ISTDEFI.index('ISTDEFS'); ISTDEFI.prefix(ISTDEFS.ref(),_naz);
   {? ISTDEFI.first() & ISTDEFI.NAZ=_naz & (-menu_txt()<>'popraw' | _ref<>ISTDEFI.ref())
   || FUN.info('Istnieje już atrybut %1.'@[_naz]);
      _r:='NAZ'
   ?};
   ISTDEFI.cntx_pop()
?}; _r


\bl_edstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Wartosc poczatkowa pola E_DEK_S.TYP
::  OLD: \bl_edstyp/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEF.RODZAJ


\aeedeks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Po redakcji pola ISTDEF.E_DEK_S
::  OLD: \aeedeks/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
exec('bvedsmem','xml');
1


\poz_edek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wartosc pozycji e-Deklaracji
::   WE: [_a] - nr pozycji
::       [_b] - w systemie KALI numer wiersza w rekordzie tabeli VAT_POZ (0 lub 1)
::       [_c] - w systemie KALI numer pozycji w rekordzie tabeli VAT_POZ (1,2,3,4)
::   WY: Wartosc pozycji (napis)
::  OLD: \poz_edek/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0 || _a:=#(2-ISTDEFS.OPIS) ?};
{? BPMN.SYM_DOM='PPL'
|| {? _<>3 || {? ISTDEFS.WYM='T' || return('0') || return('') ?} ?};
   _naz:=VAT_DEK.NR().NAZWA;
   _acr:={? _naz='PIT11' | _naz='PIT40' | _naz='PIT8C' | _naz='IFT1' | _naz='IFT1R' || 'KW' || 'K' ?};
   VAT_POZ.index('NR_NRK'); VAT_POZ.prefix(VAT_DEK.ref(),_a,_b);
   {? VAT_POZ.first
   || _ret:=($('VAT_POZ.'+_acr+$_c))(); _ret:=form(_ret,,,'9.');
      return(_ret)
   || {? ISTDEFS.WYM='T' || return('0') || return('') ?}
   ?}
?};
VAT_POZ.index('POZ1'); VAT_POZ.prefix(VAT_DEK.ref(),_a);
{? VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T' | VAT_POZ.TYP='D'
         || VAT_POZ.TEXT
         |? VAT_POZ.NETTO | ISTDEFS.WYM='T'
         || $VAT_POZ.NETTO
         || ''
         ?}
|? VAT_POZ.index('POZ2'); VAT_POZ.prefix(VAT_DEK.ref(),_a); VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T'
         || VAT_POZ.TEXT
         |? VAT_POZ.VAT | ISTDEFS.WYM='T'
         || $VAT_POZ.VAT
         || ''
         ?}
|? BPMN.SYM_DOM='FKS'
|| _ret:=''
|| _ret:='0,00'
?}; _ret


\poz_edek_plus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wartosc nieujemna pozycji e-Deklaracji
::   WE: [_a] - nr pozycji
::   WY: Wartosc pozycji (napis)
::  OLD: \poz_edek_plus/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_r:={? _=0 || exec('poz_edek','xml') || exec('poz_edek','xml',_a) ?};
{? #_r>=0
|| STR.gsub(_r,',','.')
|? ISTDEFS.WYM='T'
|| '0'
|| ''
?}


\poz_edek_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wartosc pozycji dodatkowej e-Deklaracji
::   WE:  _a  - prefiks pozycji dodatkowej (VAT_POZ.LP)
::       [_b] - czy tylko nieujemne
::       [_c] - nr pozycji
::   WY: Wartosc pozycji (napis)
::  OLD: \poz_edek_dod/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=0 ?};
{? var_pres('_c')<=0 || _c:=#(ISTDEFS.OPIS+2) ?};
VAT_POZ.index('POZ1LP'); VAT_POZ.prefix(VAT_DEK.ref(),_c,_a);
{? VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T' | VAT_POZ.TYP='D'
         || VAT_POZ.TEXT
         |? VAT_POZ.NETTO | ISTDEFS.WYM='T'
         || STR.gsub($VAT_POZ.NETTO,',','.')
         || ''
         ?}
|? VAT_POZ.index('POZ2LP'); VAT_POZ.prefix(VAT_DEK.ref(),_c,_a); VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T' | VAT_POZ.TYP='D'
         || VAT_POZ.TEXT
         |? VAT_POZ.VAT | ISTDEFS.WYM='T'
         || STR.gsub($VAT_POZ.VAT,',','.')
         || ''
         ?}
|? ISTDEFS.WYM='T'
|| _ret:='0'
|| _ret:=''
?};
{? _b & #_ret<0
|| {? ISTDEFS.WYM='T'
   || _ret:='0'
   || _ret:=''
   ?}
?};
_ret


\grupa_if
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Czy wystepuja wartosci w elementach podrzednych
::  OLD: \grupa_if/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_jest:=0;
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEFS.ISTDEF,ISTDEFS.ref());
{? ISTDEFS.first()
|| {!
   |? ISTDEFS.WYM:='N';
      _jest:=exec('run_fml','xml',ISTDEFS.REGULY,0,0)<>'';
      _jest=0 & ISTDEFS.next()
   !}
?};
ISTDEFS.cntx_pop();
_jest


\edek_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Parametry e-deklaracji
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
exec('be_edek_dll','xml');
FINFO.win_edit('EDEK_RED');
{? FINFO.edit()
|| {? exec('zapisz','#stalesys',1,XINFO)<>date(0,0,0)
   || exec('ae_edek_dll','xml')
   ?}
?}


\be_edek_dll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Przed redakcja XINFO.EDEK_DLL
::  OLD: \be_edek_dll/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
EDEK_DLL:=XINFO.EDEK_DLL;
1


\f3_edek_dll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Klawisz F3 dla XINFO.EDEK_DLL
::  OLD: \f3_edek_dll/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TTDLL');
TTDLL:=tab_tmp(1,
   'TREE','TREE_REF',,
   'PLIK','STRING[100]','Firma/Biblioteka',
   'SEL','INTEGER',
);
_i1:=TTDLL.index('?');
_i2:=TTDLL.ndx_tmp('',1,'PLIK',,0);
__i3:=TTDLL.ndx_tmp('',1,'SEL',,0);
_fun:="
   {? _a
   || TTDLL.TREE:=0;
      TTDLL.SEL:=0
   || TTDLL.cntx_psh();
      TTDLL.TREE:=#TTDLL.ref();
      TTDLL.SEL:=fld()*_b>0
   ?};
   TTDLL.PLIK:=_b;
   TTDLL.add();
   {? ~_a
   || TTDLL.cntx_pop()
   ?}
";
_fun(1,'KIR');
_fun(0,'CCPkiP11.dll');
_fun(0,'CCP11s.dll');
_fun(0,'CCP1164.dll');
_fun(0,'Graphitep11.dll');
_fun(0,'Graphitep1164.dll');
_fun(0,'CCGraphiteP11.dll');
_fun(0,'CCGraphiteP1164.dll');
_fun(0,'asepkcs.dll');
_fun(0,'CloudSignerP11.dll');
_fun(0,'CloudSignerP1164.dll');
_fun(1,'Certum by Asseco');
_fun(0,'cryptoCertumPKCS11.dll');
_fun(0,'cryptoCertum3PKCS.dll');
_fun(0,'SimplySignPKCS.dll');
_fun(1,'CenCert');
_fun(0,'enigmap11.dll');
_fun(0,'enigmap11-x64.dll');
_fun(0,'IDPrimePKCS11.dll');
_fun(0,'IDPrimePKCS1164.dll');
_fun(0,'eTPKCS11.dll');
_fun(1,'EuroCert');
_fun(0,'cmP11.dll');
_fun(0,'cmP1164.dll');
_fun(1,'Polska Wytwórnia Papierów Wartościowych');
_fun(0,'asepkcs.dll');
_lista:=spli_str(fld(),';');
TTDLL.cntx_psh();
TTDLL.index(_i2);
TTDLL.prefix();
_inne:=0;
{! _i:=1..obj_len(_lista)
|! {? ~TTDLL.find_key(_lista[_i],) & _lista[_i]+4='.dll'
   || {? _inne=0
      || _fun(1,'Inne');
         _inne:=#TTDLL.ref()
      ?};
      _fun(0,_lista[_i])
   ?}
!};
TTDLL.cntx_pop();
_o:=TTDLL.mk_sel('Biblioteki do obsługi czytnika z podpisami do e-Deklaracji'@,'P',,'#ttdllsel',,,,1);
TTDLL.win_fld(_o,,'PLIK',,,40);
TTDLL.win_fld(_o,,'SEL',,,3,,,,,,2,,"1","0");
TTDLL.win_act(_o,,'Formuła','Zaznacz/&odznacz'@@,,,"
   {? TTDLL.TREE=0
   || FUN.info('Należy wybrać bibliotekę.'@)
   || TTDLL.SEL:=~TTDLL.SEL;
      TTDLL.put()
   ?}
",,1,,,,'O');
TTDLL.win_act(_o,,'Formuła','Kontynuuj'@@,,,"
   TTDLL.cntx_psh();
   TTDLL.index(__i3);
   TTDLL.prefix(1);
   _ok:=TTDLL.first();
   {? _ok
   || _str:='';
      {!
      |? _str+=TTDLL.PLIK+';';
         TTDLL.next()
      !};
      _str:=_str-1;
      {? +_str>250
      || _ok:=-1
      ?}
   ?};
   TTDLL.cntx_pop();
   {? _ok>0
   || sel_exit()
   |? _ok=0
   || FUN.info('Nie zaznaczono plików.'@)
   || FUN.info('Nazwy plików przekraczają długość 250 znaków.'@)
   ?}

",,,,,,'K');
TTDLL.tr_fml(_o,,"{? _a || {? TTDLL.TREE=0 || 1 || _a ?} || _a ?}");
TTDLL.win_sel(_o);
{? fld()=''
|| TTDLL.first()
|| TTDLL.index(_i2); TTDLL.prefix();
   TTDLL.find_key(_lista[1]);
   TTDLL.index(_i1); TTDLL.prefix()
?};
{? TTDLL.select(,1)
|| TTDLL.index(__i3);
   TTDLL.prefix(1);
   _str:='';
   {? TTDLL.first()
   || {!
      |? _str+=TTDLL.PLIK+';';
         TTDLL.next()
      !}
   ?};
   _str:=_str-1
|| _str:=~~
?};
VAR_DEL.delete('__i3','TTDLL');
_str


\ae_edek_dll
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Po redakcji dla XINFO.EDEK_DLL
::  OLD: \ae_edek_dll/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? EDEK_DLL<>XINFO.EDEK_DLL & XINFO.EDEK_DLL<>''
|| _ok:=0;
   _tmpdir:=fmk_tmp_dir(0);
   {? type_of(_tmpdir) <> type_of(~~)
   || _fdir:=_tmpdir.get_path
   || FUN.emsg('Nie udało się utworzyć katalogu tymczasowego po stronie serwera.'@);
      return()
   ?};
   {? fcopy('settings.xml',_fdir+'/settings.xml',1,0,1)
   || _f:=fopen(_fdir+'/settings.xml','ur',0);
      {? _f
      || _txt:='';
         {!
         |? _lin:=fread(_f);
            {? _txt<>'' & _lin<>'\n'
            || _txt+='\r\n'
            ?};
            {? _lin<>'\n'
            || _txt+=_lin;
               1
            ?}
         !};
         fclose(_f);
         _p1:=(-_txt)*'<cryptoproviders>';
         {? _p1
         || _p2:=(-_txt)*'</cryptoproviders>';
            {? _p2
            || _t1:=(_p1+16)+_txt;
               _t3:=((_p2-1)-_txt);
               _dll:=spli_str(XINFO.EDEK_DLL,';');
               _t2:='\r\n';
               {! _i:=1..obj_len(_dll)
               |! {? _dll[_i]+4='.dll'
                  || _t2+='\t\t<HardwareProvider><Name>PKCS#11 Type A</Name><URI>'+_dll[_i]+'</URI></HardwareProvider>\r\n'
                  ?}
               !};
               _txt:=_t1+_t2+'\t'+_t3;
               _ok:=1
            ?}
         ?};
         {? _ok
         || _f:=fopen(_fdir+'/settings.xml','uw',0);
            {? _f
            || fwrite(_f,_txt);
               fclose(_f);
               _ok:=fcopy(_fdir+'/settings.xml','settings.xml',0,1,1)
            ?}
         ?}

      ?}
   ?};
   {? ~_ok
   || FUN.info('Nie udało się zmienić biblioteki do obsługi czytnika\n'
               'z podpisami do e-Deklaracji w pliku settings.xml.'@)
   ?}
?};
VAR_DEL.delete('EDEK_DLL')


\f3_edekgate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [12.10]
:: OPIS: Klawisz F3 dla pola XINFO.EDEKGATE
::  OLD: \f3_edekgate/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__Edek');
__Edek:=tab_tmp(1,
   'ADRES','STRING[50]','Adres bramki e-Deklaracji',
   'TEST','STRING[1]','Bramka testowa?'
);
__Edek.ADRES:='test-bramka.edeklaracje.gov.pl';
__Edek.TEST:='T';
__Edek.add();
__Edek.ADRES:='bramka.e-deklaracje.mf.gov.pl';
__Edek.TEST:='N';
__Edek.add();
_o:=__Edek.mk_sel('Bramki e-Deklaracji'@,,,'#edekgatesel');
__Edek.win_fld(_o,,'ADRES',,,100);
__Edek.win_fld(_o,,'TEST',,,,,,,,,2,,"'T'","'N'");
__Edek.win_act(_o,,'Formuła','&Wybierz'@@,,,"
   {? __Edek.TEST='T'
   || {? FUN.ask('Wybrano testową bramkę e-Deklaracji.\nCzy kontynuować?'@)
      || sel_exit()
      ?}
   || sel_exit()
   ?}
",,1,,,,'W');
__Edek.win_sel(_o);
_ret:=0;
{? __Edek.select()
|| _ret:=__Edek.ADRES
?};
VAR_DEL.delete('__Edek');
_ret


\br_e_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Rekord przed okna WER tabeli E_DEK
::----------------------------------------------------------------------------------------------------------------------
_grey:='';
{? E_DEK.AKC='N' || _grey:='BZ'; POMOC.K1:='niewysłane'
|? E_DEK.AKC='W' || _grey:='Wu'; POMOC.K1:='wysłane'
|? E_DEK.AKC='T' || _grey:='WBu'; POMOC.K1:='odebrane UPO'
?};
E_DEK.actions_grayed('WER',_grey);
''


\crypto_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.10]
:: OPIS: Definicja klasy i powolanie obiektu Crypto do szyfrowania danych
::       metody klasy:
::         encAES(napis)       - zwraca zaszyfrowany AES-em napis (klucz 128bit utajniony)
::         encAES(klucz,napis) - zwraca zaszyfrowany AES-em napis kluczem, klucz to tekst do 128bitow (do 16 znakow)
::         decAES(klucz,napis) - zwraca odszyfrowany AES-em napis; klucz to tekst do 128bitow (do 16 znakow)
::       przyklad:
::         _crypto:=Crypto.encAES('1111','test'); //UiRfM+mZuznsh7/3btWOIQ==
::         Crypto.decAES('1111',_crypto) // 'test'
::  OLD: \crypto_decl/skid.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('CR_CLASS',@.CLASS)<0
|| obj_decl('CR_CLASS',
            obj_fld('LIB', 0),
            obj_fld('FEAES', 0),
            obj_fld('FEAES1', 0),
            obj_fld('FDAES1', 0),
            obj_fld('FSHA', 0),
            obj_meth('__init',"
            _Interm:=exec('interm','#system');
            {? _Interm
            ||
               .LIB:=lib_load_srv_jar('mbcrypto.jarl',0)
            ||
               .LIB:=lib_load('mbcrypto.dll',1)
            ?}
            "),
            obj_meth('__done',"
               {? .LIB
               || lib_free(.LIB)
               ?}
            "),
            obj_meth('encAES',"
               {? .LIB
               || {? ~.FEAES
                  || .FEAES:=lib_decl(.LIB,,'char *','encryptAES','char *')
                  ?};
                  {? .FEAES
                  || lib_call(.FEAES,_a)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of('')),
            obj_meth('encAES',"
               {? .LIB
               || {? ~.FEAES1
                  || .FEAES1:=lib_decl(.LIB,,'char *','encryptAES','char *','char *')
                  ?};
                  {? .FEAES1
                  || lib_call(.FEAES1,_a,_b)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''),type_of('')),
            obj_meth('decAES',"
               {? .LIB
               || {? ~.FDAES1
                  || .FDAES1:=lib_decl(.LIB,,'char *','decryptAES','char *','char *')
                  ?};
                  {? .FDAES1
                  || lib_call(.FDAES1,_a,_b)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''),type_of('')),
            obj_meth('sha',"
               {? .LIB
               || {? ~.FSHA
                  || .FSHA:=lib_decl(.LIB,,'char *','sha','char *')
                  ?};
                  {? .FSHA
                  || lib_call(.FSHA,_a)
                  || ''
                  ?}
               || ''
               ?}
            ",type_of(''))
   )
?}


\pytzwrot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Wybor typu powodu do zwrotu nadwyzki naliczonego podatku VAT
::  OLD: \pytzwrot/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
VAT_TYP:='';
{? VAT_DEK.OKRES<'2012/10'
|| popup(0,'Powód zwrotu nadwyżki naliczonego podatku VAT',
           '1 - zwrot podatnikowi wykonującemu czynności poza terytorium kraju',,"VAT_TYP:='1'",
           '2 - zwrot w formie zaliczki',,"VAT_TYP:='2'",
           '3 - zwrot dla jednostki poszukującej i rozpoznającej złoża kopalin',,"VAT_TYP:='3'",
           '4 - zwrot dotyczący nabycia i importu finansowego z bezzwrotnej pomocy',,"VAT_TYP:='4'")
|| popup(0,'Powód zwrotu nadwyżki naliczonego podatku VAT',
           '1 - zwrot podatnikowi, który dokonywał dostawy towarów lub świadczył usługi poza terytorium kraju i nie dokonywał sprzedaży opodatkowanej',,"VAT_TYP:='1'",
           '2 - zwrot podatnikowi, który nie dokonywał w okresie rozliczeniowym czynności opodatkowanych na terytorium kraju oraz czynności, o których mowa w art. 86 ust. 8 pkt 1 ustawy',,"VAT_TYP:='2'",
           '3 - zwrot podatnikowi, który dokonywał nabycia (importu) towarów lub usług finansowanych ze środków bezzwrotnej pomocy zagranicznej',,"VAT_TYP:='3'",
           '4 - w innych przypadkach niż wymienione w pkt 1 – 3',,"VAT_TYP:='4'")
?};
_r:=VAT_TYP; &VAT_TYP; _r


\transfer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zmienia formuly dla pól xml e-deklaracji
::   WE: _a - treść formuły
::      [_b] - formuły start/stop, następna? 1-tak [0]-nie
::----------------------------------------------------------------------------------------------------------------------
_next:={? var_pres('_b')>0 || _b ?};
{? ~_next
|| _a:=STR.gsub(_a,'skid_xml','xml');
   _a:=STR.gsub(_a,'\'konwersja_xml\',\'edeklar\'','\'konwersja_xml\',\'xml\'');
   _a:=STR.gsub(_a,'\'vat_zd_size\',\'vat\'','\'vat_zd_size\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'vzd_first\',\'vat\'','\'vzd_first\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'vzd_next\',\'vat\'','\'vzd_next\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'vat_zd_sum\',\'vat\'','\'vat_zd_sum\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'cit8_data\',\'cit\'','\'cit8_data\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'get_date\',\'cit\'','\'get_date\',\'fks_ved\'');
   _a:=STR.gsub(_a,'\'rok_kal\',\'cit\'','\'rok_kal\',\'fks_ved\'')
?};
_a:=STR.gsub(_a,'\'pod_f_petla\',\'vat\'','\'pod_f_petla\',\'fks_ved\'');
_a


\end_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Zakończono czynność wysyłania e-deklaracji i pobierania UPO
::----------------------------------------------------------------------------------------------------------------------
_akc:={? 4+E_DEK.TYP='VAT7' || 'FKS_VED_DV7W'
      |? 5+E_DEK.TYP='VAT27' || 'FKS_VED_DVOW'
      |? 3+E_DEK.TYP='POD' || 'FKS_VED_DVUW'
      |? 4+E_DEK.TYP='CIT8' || 'FKS_VED_DVUW'
      || ''
      ?};
{? _akc<>'' & E_DEK.AKC='T'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:=_akc;
   _params.UIDREF:=E_DEK.ZRODLO().uidref();
   _params.AKCJA:='Zakończ';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'DEKLARACJA',E_DEK.ZRODLO);
   _params.PROC_START:='N';
   exec('mp_run','#b__box',_params)
?}


\edek_trig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Triger po put i przed del tabeli E_DEK
::   WE: _a - 1-put 0-del
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| {? E_DEK.AKC='T' & var_press('TrFml')<0
   || exec('end_action','xml')
   ?};
   {? E_DEK.AKC='W' | E_DEK.AKC='T'
   || VAT_DEK.cntx_psh();
      VAT_DEK.prefix();
      E_DEK.ZRODLO();
      VAT_DEK.STATUS:=E_DEK.AKC;
      VAT_DEK.put();
      VAT_DEK.cntx_pop()
   ?}
?};
{? _a=0 | E_DEK.AKC='N'
|| _status:=0;
   _ref:=E_DEK.ref();
   E_DEK.cntx_psh();
   E_DEK.index('ZRODLO'); E_DEK.prefix(E_DEK.ZRODLO);
   {? E_DEK.first()
   || {!
      |? {? _a=1 | _a=0 & E_DEK.ref()<>_ref
         || {? E_DEK.AKC='W' & _status<1 || _status:=1
            |? E_DEK.AKC='T' & _status<2 || _status:=2
            ?}
         ?};
         E_DEK.next()
      !}
   ?};
   E_DEK.cntx_pop();
   VAT_DEK.cntx_psh();
   VAT_DEK.prefix();
   E_DEK.ZRODLO();
   VAT_DEK.STATUS:={? _status=0 || 'A' |? _status=1 || 'W' || 'T' ?};
   VAT_DEK.put();
   VAT_DEK.cntx_pop()
?};
{? _a=1 || ~~ || 1 ?}


\bd_eds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Wyswietl okna tabeli E_DEK_S
::  OLD: \bd_eds/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
E_DEK_S.memo_get(,'MEMO');
E_DEK_S.memo_vie(,'MEMO')


\bm_eds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Przed akcja popraw i usun tabeli E_DEK_S
::  OLD: \bm_eds/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? E_DEK_S.count()>0
|| FUN.info('Tekst przypisany do e-Deklaracji.'@); 0
|| 1
?}


\ar_eds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2011]
:: OPIS: Rekord po tabeli E_DEK_S
::   WE: [_a] - typ operacji: 1-dołacz 0-popraw
::  OLD: \ar_eds/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? E_DEK_S.LP<=0
|| FUN.info('Liczba porządkowa jest mniejsza lub równa zero.'@);
   _ok:='LP'
|| _a:={? var_press('_a')<=0 || -menu_txt<>'popraw' || _a ?};
   E_DEK_S.cntx_psh(); E_DEK_S.index('LP'); E_DEK_S.prefix(E_DEK_S.TYP); _ok:='';
   _ref:=E_DEK_S.ref();
   {? E_DEK_S.find_key(E_DEK_S.LP) & (_a | _ref<>E_DEK_S.ref())
   || FUN.info('Istnieje tekst o liczbie porządkowej: %1.'@[$E_DEK_S.LP]); _ok:=''
   ?};
   E_DEK_S.cntx_pop()
?};
_ok


\get_tag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Zwraca nazwę taga
::   WE:
::   WY:
::  OLD: \get_tag/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_p:=xmlLine*'<!--';
{? _p
|| xmlLine:=(_p+3)-xmlLine;
   _p:=xmlLine*'-->';
   {? _p
   || _l:=(_p-1)+xmlLine;
      xmlLine:=(_p+2)-xmlLine;
      _p:=_l*'=';
      {? _p
      || xmlValue:=_p-_l;
         xmlTag:=(_p-1)+_l
      || xmlValue:='';
         xmlTag:=_l
      ?}
   || ''
   ?}
|| _p:=xmlLine*'<';
   {? _p
   || _p2:=xmlLine*'>';
      {? _p2
      || _t:=(_p2-_p+1)+((_p-1)-xmlLine);
         _p:=_t*' ';
         {? _p=0
         || _p:=_t*'>'
         ?};
         xmlTag:=1-( (_p-1)+_t);
         xmlLine:=_p2-xmlLine;
         _p2:=xmlLine*('<');
         {? _p2
         || xmlValue:=(_p2-1)+xmlLine;
            xmlLine:=(_p2-1)-xmlLine
         ?};
         {? (_p:=xmlTag*':')>0
         || _jest:=(1+xmlTag)='/';
            xmlTag:={? _jest || '/' || '' ?}+(_p-xmlTag)
         ?};
         _t
      || ''
      ?}
   || ''
   ?}
?}


\imp_dane2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Pomocnicza do importu danych
::  OLD: \imp_dane2/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),#ISTDEFS.ref());
{? ISTDEFS.first()
|| {!
   |? {? ISTDEFS.NAZTAB<>''
      || XmlPol.TAB:=#XmlTab.ref();
         XmlPol.TAG:=ISTDEFS.OPIS;
         XmlPol.LP:=(__lp+=1);
         XmlPol.POLE:=ISTDEFS.NAZTAB;
         XmlPol.TYP:=ISTDEFS.TYPFLD;
         XmlPol.COMM:=ISTDEFS.COMMENT='T';
         {? 6+XmlPol.TYP='STRING' || _dl:=#(((XmlPol.TYP*'[')-XmlPol.TYP)-1) || _dl:=0 ?};
         {? _dl=255
         || XmlPol.TYP:='SYS_MEMO'
         ?};
         XmlPol.DL:={? _dl>160 || 160 || _dl ?};
         XmlPol.add();
         XmlTab.COMM:=XmlTab.COMM | XmlPol.COMM
      || exec('imp_dane2','xml')
      ?};
      ISTDEFS.next()
   !}
?};
ISTDEFS.cntx_pop()


\imp_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Importuje dane z pliku xml do tabel na podstawie schematu
::   WE:  _a  - sciezka do pliku lokalnego
::        _b  - nazwa okna
::       [_c] - liczba wczytywanych linii
::       [_d] - formula dodajaca akcje do okna w zakladkach - jako parametry formuly: tabela i akronim okna
::       [_e] - Wyłącz wyświetlanie okna wertowania (tworzone są tylko tabele tymczasowe): 0 - z oknem, 1 - bez okna
::       [_f] - czy pierwszy plik dla importu zbiorowego
::       [_g] - czy ostatni plik dla importu zbiorowego
::  OLD: \imp_dane/skid_xml.fml
:: ~OST: INFOPEN
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_c')<=0 || _c:=0 ?};
{? var_press('_e')<=0 || _e:=0 ?};
{? var_press('_f')<=0 || _zb:=0; _f:=1 || _zb:=1 ?};
{? var_press('_g')<=0 || _zb:=0; _g:=1 || _zb:=1 ?};
_find:=0;
{? _zb
|| {? _f
   || jpkf:=JPK.OD;
      lp_wiersz:=0;
      lp_wiersz2:=0
   ?};
   {? _g
   || jpkl:=JPK.DO
   ?}
?};
{? _f
|| VAR_DEL.delete('XmlTab','XmlPol','xmlpol1','xmlpol2','xmlLine','xmlTag','xmlValue');
   XmlTab:=tab_tmp(2,
      'TAG','STRING[20]',,
      'TAB','STRING[8]',,
      'LP','INTEGER',,
      'COMM','INTEGER',,
      'HIDDEN','INTEGER',,
      'LINK','STRING[20]',
   );
   xmltab1:=XmlTab.index('?');
   xmltab2:=XmlTab.ndx_tmp('',1,'LP',,0);
   XmlPol:=tab_tmp(2,
      'TAB','INTEGER',,
      'TAG','STRING[20]',,
      'LP','INTEGER',,
      'POLE','STRING[8]',,
      'TYP','STRING[100]',,
      'COMM','INTEGER',,
      'LICZ','REAL',,
      'DL','INTEGER',
   );
   xmlpol1:=XmlPol.index('?');
   xmlpol2:=XmlPol.ndx_tmp('',1,'TAB',,0, 'LP',,0)
?};
XmlTab.index(xmltab1);
XmlPol.index(xmlpol1);
ISTDEFS.index('LP');
ISTDEFS.prefix(ISTDEF.ref());
{? ISTDEFS.first()
|| _tablp:=0;
   {!
   |? {? ISTDEFS.NAZTAB<>'' & ~XmlTab.find_key(ISTDEFS.OPIS,)
      || XmlTab.TAG:=ISTDEFS.OPIS;
         XmlTab.TAB:=ISTDEFS.NAZTAB;
         XmlTab.COMM:=0;
         XmlTab.HIDDEN:=0;
         __lp:=0;
         ISTDEFS.cntx_psh();
         ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),#ISTDEFS.ref());
         {? ISTDEFS.first()
         || XmlTab.LP:=(_tablp+=1);
            {? XmlTab.add()
            || {!
               |? {? ISTDEFS.NAZTAB<>''
                  || XmlPol.TAB:=#XmlTab.ref();
                     XmlPol.TAG:=ISTDEFS.OPIS;
                     XmlPol.LP:=(__lp+=1);
                     XmlPol.POLE:=ISTDEFS.NAZTAB;
                     XmlPol.TYP:=ISTDEFS.TYPFLD;
                     XmlPol.COMM:=ISTDEFS.COMMENT='T' | ISTDEFS.TYPFLD='REFERENCE';
                     XmlPol.LICZ:=ISTDEFS.LICZ;
                     {? 6+XmlPol.TYP='STRING' || _dl:=#(((XmlPol.TYP*'[')-XmlPol.TYP)-1) || _dl:=0 ?};
                     {? _dl=255
                     || XmlPol.TYP:='SYS_MEMO'
                     ?};
                     XmlPol.DL:={? _dl>160 || 160 || _dl ?};
                     XmlPol.add();
                     XmlTab.COMM:=XmlTab.COMM | XmlPol.COMM;
                     {? ISTDEFS.TYPFLD='REFERENCE'
                     || XmlTab.LP:=(_tablp+=1);
                        XmlTab.LINK:=ISTDEFS.OPIS;
                        XmlTab.put();
                        XmlTab.cntx_psh();
                        XmlTab.blank(1);
                        XmlTab.TAG:=ISTDEFS.OPIS;
                        XmlTab.TAB:=ISTDEFS.NAZTAB;
                        XmlTab.COMM:=0;
                        XmlTab.HIDDEN:=1;
                        XmlTab.LP:=(_tablp-1);
                        XmlTab.add();
                        _lp:=__lp;
                        __lp:=0;
                        XmlPol.blank(1);
                        XmlPol.TAB:=#XmlTab.ref();
                        XmlPol.TAG:=ISTDEFS.OPIS;
                        XmlPol.LP:=(__lp+=1);
                        XmlPol.POLE:=ISTDEFS.NAZTAB;
                        XmlPol.TYP:='INTEGER';
                        XmlPol.COMM:=1;
                        XmlPol.LICZ:=ISTDEFS.LICZ;
                        XmlPol.DL:=5;
                        XmlPol.add();
                        exec('imp_dane2','xml');
                        {? XmlTab.COMM
                        || XmlTab.put()
                        ?};
                        __lp:=_lp;
                        XmlTab.cntx_pop()
                     ?}
                  || exec('imp_dane2','xml')
                  ?};
                  ISTDEFS.next()
               !};
               {? XmlTab.COMM
               || XmlTab.put()
               ?}
            ?}
         ?};
         ISTDEFS.cntx_pop()
      ?};
      ISTDEFS.next()
   !}
?};
{? XmlTab.first()
|| {? _f
   || VAR_DEL.delete('Xml');
      Xml:=obj_new(XmlTab.size());
      {!
      |? VAR_DEL.delete(XmlTab.TAB);
         _fml:=XmlTab.TAB+':=tab_tmp(1,';
         XmlPol.index(xmlpol2);
         XmlPol.prefix(#XmlTab.ref());
         {? XmlPol.first()
         || {!
            |? _fml+='\''+XmlPol.POLE+'\',\''+{? XmlPol.TYP='REFERENCE' || 'INTEGER' || XmlPol.TYP ?}+'\',\''+XmlPol.TAG+'\',';
               XmlPol.next()
            !}
         ?};
         _fml:=(_fml-1)+')';
         Xml[XmlTab.LP]:=($_fml)();
         XmlTab.next()
      !}
   ?};
   _file:={? type_of(_a)=7 || fopen(_a,'ur',0) || fopen('@'+_a,'ur',0) ?};
   {? _file
   || _lp:=0;
      _linii:=0;
      XmlPol.index(xmlpol1);
      xmlLine:='';
      _mem:='';
      {!
      |? {? _c
         || _linii+=1;
            progress(_linii/_c*100,'Wczytywanie pliku JPK ...'@)
         ?};
         _line:=fread(_file);
         {? _line<>'\n'
         || xmlLine+=_line;
            {!
            |? _tag:=exec('get_tag','xml');
               {? _zb & xmlTag='NumerRachunku' || JPK_RB:=xmlValue ?};
               {? _zb & xmlTag='DomyslnyKodWaluty'
               || SLO.cntx_psh(); SLO.index('SL'); SLO.prefix(XINFO.SLWAL,xmlValue);
                  {? SLO.first() || HELPJPK.WAL:=SLO.ref() ?};
                  SLO.cntx_pop()
               ?};
               {? _tag<>''
               || {? _lp
                  || {? xmlTag=_endtag
                     || _tab.put();
                        _lp:=0;
                        &_tab
                     |? 1+xmlTag<>'/' & XmlPol.find_key(xmlTag,)
                     || {? _zb=0 | (_endtag<>'/ZOiS' & _endtag<>'/Salda')
                                 | (_endtag='/ZOiS' & (_f=1 | (xmlTag*'ObrotyWinien' | xmlTag*'ObrotyMa' | xmlTag*'SaldoWinien' | xmlTag*'SaldoMa') | (XmlPol.TYP<>'REAL' & XmlPol.TYP<>'INTEGER')))
                                 | (_endtag='/Salda' & ((_f=1 & xmlTag='SaldoPoczatkowe') | (_g=1 & xmlTag='SaldoKoncowe')))
                        || {? _find=1
                           || _tab.find_key({? XmlPol.TYP='REAL' | XmlPol.TYP='INTEGER'
                                            || #xmlValue
                                            || exec('xml2txt','xml',xmlValue)
                                            ?});
                              _find:=0
                           ?};
                           {? XmlPol.TYP='SYS_MEMO'
                           || _tab.memo_set(exec('xml2txt','xml',xmlValue),XmlPol.POLE);
                              _tab.memo_put(,XmlPol.POLE)
                           |? XmlPol.TYP='REFERENCE'
                           || _mem:=XmlTab.TAG;
                              {? XmlTab.find_key(XmlPol.TAG,)
                              || __Ref:=_tab.ref();
                                 &_tab;
                                 _lp:=XmlTab.LP;
                                 _tab:=Xml[_lp];
                                 _tab.blank(1);
                                 _tab[1]:=#__Ref;
                                 _tab.add();
                                 _endtag:='/'+xmlTag;
                                 XmlPol.prefix(#XmlTab.ref())
                              ?}
                           || {? _zb=1 & (xmlTag='ObrotyWinien' | xmlTag='ObrotyMa')
                              || _tab[XmlPol.LP]+={? XmlPol.TYP='REAL' | XmlPol.TYP='INTEGER'
                                                  || #xmlValue
                                                  || exec('xml2txt','xml',xmlValue)
                                                  ?}
                              || _tab[XmlPol.LP]:={? XmlPol.TYP='REAL' | XmlPol.TYP='INTEGER'
                                                  || #xmlValue
                                                  || exec('xml2txt','xml',xmlValue)
                                                  ?}
                              ?};
                              {? _zb
                              || {? xmlTag='NumerWiersza' | xmlTag='LpZapisu'
                                 || lp_wiersz+=1; _tab[XmlPol.LP]:=lp_wiersz
                                 |? xmlTag='LpZapisuDziennika'
                                 || lp_wiersz2+=1; _tab[XmlPol.LP]:=lp_wiersz2
                                 ?}
                              ?}
                           ?}
                        ?}
                     ?}
                  |? _mem<>'' & xmlTag='/'+_mem & XmlTab.find_key(_mem,)
                  || _lp:=XmlTab.LP;
                     _tab:=Xml[_lp];
                     _tab.put();
                     _lp:=0;
                     &_tab;
                     _mem:=''
                  |? XmlTab.find_key(xmlTag,)
                  || _add:=1;
                     {? _zb=1
                     || _typ:=exec('typ_fld_grp_jpk','xml',{? var_press('_endtag')>0 || _endtag || xmlTag ?});
                        {? _typ='O' & _g=0
                        || _add:=0
                        ?}
                     ?};
                     {? _add
                     || _lp:=XmlTab.LP;
                        _tab:=Xml[_lp];
                           {? _zb=1 & xmlTag='ZOiS' & _f=0
                           || _find:=1
                           || _tab.blank(1);
                              {? XmlTab.HIDDEN
                              || _tab[1]:=#__Ref
                              ?};
                              _tab.add()
                           ?};
                        _endtag:='/'+xmlTag;
                        XmlPol.prefix(#XmlTab.ref())
                     ?}
                  ?};
                  xmlLine<>''
               ?}
            !};
            1
         ?}
      !};
      fclose(_file);
      {? _c || prgs_clr() ?};
      {? var_pres('_tab')>0 || &_tab ?};
      _tab:=Xml[1];
      _grp:=_tab.grp_make(_b,,-ISTDEF.RODZAJ+'sel');
      XmlPol.index(xmlpol2);
      XmlTab.index(xmltab2); XmlTab.prefix();
      {? XmlTab.first()
      || {!
         |? _t:=Xml[XmlTab.LP];
            {? _zb & _g
            || _typ:=exec('typ_fld_grp_jpk','xml',XmlTab.TAG);
               {? _typ='S' & XmlTab.TAG<>'ZOiS'
               || _t.cntx_psh();
                  _t.first();
                  XmlPol.prefix(#XmlTab.ref());
                  {? XmlPol.first()
                  || {!
                     |? {? XmlPol.TYP='INTEGER' | XmlPol.TYP='REAL' || _val:=0 || _val:='' ?};
                        {? _t.first()
                        || {!
                           |? _val+=($'_a.%1'[XmlPol.POLE])(_t);
                              _t.next()
                           !};
                           ($('_a.%1'[XmlPol.POLE]+':=_b'))(_t,_val);
                           _t.put()
                        ?};
                        XmlPol.next()
                     !};
                     _t.last(); _last:=_t.ref();
                     {? _t.first()
                     || {!
                        |? {? _t.ref()=_last || 0 || _t.del() ?}
                        !}
                     ?}
                  ?};
                  _t.cntx_pop()
               ?}
            ?};
            _o:=_t.mk_sel(XmlTab.TAG,'P',,14+(-XmlTab.TAG),,,,,'U');
            _t.win_sel(_o);
            {? var_press('_d')>0
            || _d(_t,_o,1)
            ?};
            {? _zb
            || _t.win_act(_o,0,'Formuła','Generuj JPK',,,
                      "_ext:='Pliki xml (*.xml)|*.xml|Wszystkie pliki (*.*)|*.*';
                      exec('czytaj','#stalesys',,XINFO);
                      _fn:=exec('gen_jpk','jpk');
                      prgs_clr();
                      _f2:=dlg_save(_fn,1)
                      "
                         )
            ?};
            _t.win_act(_o,0,'Szukaj');
            _t.win_act(_o,0,'Kolejność');
            _r:=_t.mk_edit(XmlTab.TAG,,15+(-XmlTab.TAG));
            XmlPol.prefix(#XmlTab.ref());
            {? XmlPol.first()
            || {!
               |? {? XmlPol.COMM=0
                  || {? XmlPol.TYP='INTEGER' | XmlPol.TYP='REAL'
                     || {? XmlPol.LICZ<>0
                        || _t.win_efld(_r,,XmlPol.POLE,,,15,XmlPol.LICZ,,XmlPol.TAG)
                        || _t.win_efld(_r,,XmlPol.POLE,,,15,,,XmlPol.TAG)
                        ?}
                     || _t.win_efld(_r,,XmlPol.POLE,,,XmlPol.DL,,,XmlPol.TAG)
                     ?}
                  ?};
                  XmlPol.next
               !}
            ?};
            _t.win_edit(_r);
            {? XmlPol.first()
            || _max:=220;
               {!
               |? {? XmlPol.COMM=0
                  || _dl:={? XmlPol.TYP='INTEGER' | XmlPol.TYP='REAL' || 3 || 10 ?};
                     {? _dl<+XmlPol.POLE || _dl:=+XmlPol.POLE ?};
                     _max-=_dl+1
                  ?};
                  _max>0 & XmlPol.next()
               !};
               _male:=_max<=0;
               XmlPol.first();
               _max:=220;
               _lp:=0;
               {!
               |? {? XmlPol.COMM=0
                  || _dl:={? _male
                          || {? XmlPol.TYP='INTEGER' | XmlPol.TYP='REAL'
                             || 3
                             || 4
                             ?}
                          |? XmlPol.TYP='INTEGER' | XmlPol.TYP='REAL'
                          || 3
                          || 10
                          ?};
                     {? ~_male & _dl<+XmlPol.POLE || _dl:=+XmlPol.POLE ?};
                     {? _dl<=_max
                     || {? _male
                        || {? var_press('K'+$(_lp+=1),POMOC)>0
                           || _t.win_fld(_o,,XmlPol.POLE,,,_dl,,,'1');
                              ($('POMOC.K'+$_lp+':=_a'))(XmlPol.TAG);
                              _t.fld_opt(_o,'col_name="%1"'[($('POMOC.K'+$_lp))()],,XmlPol.POLE);
                              _max-=_dl+1
                           ?}
                        || {? XmlPol.TYP='REAL' & XmlPol.LICZ<>0
                           || _t.win_fld(_o,,XmlPol.POLE,,,_dl,XmlPol.LICZ,,XmlPol.TAG)
                           || _t.win_fld(_o,,XmlPol.POLE,,,_dl,,,XmlPol.TAG)
                           ?};
                           _max-=_dl+1
                        ?}
                     ?}
                  ?};
                  _max>0 & XmlPol.next()
               !}
            ?};
            {? _male
            || _t.win_act(_o,0,'Okienko',,,,$('exec(\'set_kol\',\'xml\','+$#XmlTab.ref()+')'))
            ?};
            {? var_press('_d')>0
            || _d(_t,_o,2)
            ?};
            {? XmlTab.HIDDEN=0
            || {? XmlTab.LINK<>''
               || _fml:=$($"exec('ar_imp','xml',"+$(XmlTab.LP-1)+')')
               || _fml:=""
               ?};
               _tab.grp_sel(_grp,_t,_o,XmlTab.TAG,_fml,,,,,,,,'maximized_with_title')
            ?};
            {? XmlTab.LINK<>''
            || XmlTab.cntx_psh();
               XmlTab.index(xmltab1);
               XmlTab.prefix();
               {? XmlTab.find_key(XmlTab.LINK,)
               || _t2:=Xml[XmlTab.LP]
               ?};
               XmlTab.cntx_pop();
               {? var_pres('_t2')>0
               || _tab.tab_splt(_grp,,'horizontal','bottom',20);
                  _tab.grp_sel(_grp,_t2,_t2.win_sel('?'),,,,,,,,,,'maximized_with_title');
                  &_t2
               ?}
            ?};
            _t.first();
            &_t;
            XmlTab.next()
         !}
      ?};
      _tab.win_sel(_grp);
      {? ~_e & _g || _tab.select() ?}
   ?}
?};
{? _g || VAR_DEL.delete('XmlTab','XmlPol','xmlpol1','xmlpol2','xmlLine','xmlTag','xmlValue','Blp','Xml','jpkf','jpk_l','JPK_RB','XmlProg') ?}


\set_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Ustawie tytuly zmiennych dla kolumn okien z podgladem danych
::   WE: _a - ref tabeli
::  OLD: \set_kol/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
XmlPol.prefix(_a);
_lp:=0;
{? XmlPol.first()
|| {!
   |? {? XmlPol.COMM=0
      || _lp+=1;
         {? var_pres('K'+$_lp,POMOC)>0
         || ($('POMOC.K'+$_lp+':=_a'))(XmlPol.TAG)
         ?}
      ?};
      XmlPol.next()
   !}
?};
1


\toSHA
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Dodaje tag xml do tworzonego skrotu SHA1
::   WE: _a - tekst
::  OLD: \toSHA/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
LiczbaL+=1;
{? var_press('NoSHA')<=0 | NoSHA*ISTDEFS.OPIS=0
|| exec('shaAdd','jpk',_a)
?}


\getPath
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Zwraca sciezke elementu schematu dla biezacego elementu
::  OLD: \getPath/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_path:=ISTDEFS.OPIS;
ISTDEFS.cntx_psh();
ISTDEFS.prefix();
{!
|? {? ISTDEFS.TREE<>0 & ISTDEFS.seek(ISTDEFS.TREE,)
   || _path:=ISTDEFS.OPIS+'/'+_path;
      1
   ?}
!};
ISTDEFS.cntx_pop();
_path


\xml2txt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [DAROKR] [11.22]
:: OPIS: Konwersja znakow zastrzezonych w XML
::   WE: _a - String do konwersji
::   WY: Wartosc String (napis) po konwersji
::  OLD: \xml2txt/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') | _a='' || return('') ?};
{? _a*'&amp;' | _a*'&gt;' | _a*'&lt;' | _a*'&apos;' | _a*'&quot;'
|| _a:=STR.gsub(_a,'&amp;','&');
   _a:=STR.gsub(_a,'&gt;','>');
   _a:=STR.gsub(_a,'&lt;','<');
   _a:=STR.gsub(_a,'&apos;','\'');
   _a:=STR.gsub(_a,'&quot;','\"')
?};
_a


\przen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Przenumerowanie wg struktury drzewa
::  OLD: \przen/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=0
|| VAR_DEL.delete('TT');
   TT:=tab_tmp(2,
      'LP','INTEGER','Nazwa pola 1',
      'REF','INTEGER','Nazwa w oknie'
   );
   TTLp:=100000000;
   TTadd:="
      TTLp+=1;
      TT.REF:=#ISTDEFS.ref;
      TT.LP:=TTLp;
      TT.add()
   "
?};
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO');
ISTDEFS.prefix(ISTDEF.ref(),_a);
{? ISTDEFS.first()
|| {!
   |? TTadd();
      exec('przen','xml',#ISTDEFS.ref());
      ISTDEFS.next()
   !}
?};
{? _a=0
|| {! _nr:=1..2
   |! {? TT.last()
      || ISTDEFS.prefix();
         {!
         |? {? ISTDEFS.seek(TT.REF,)
            || ISTDEFS.LP:=TT.LP;
               ISTDEFS.put()
            ?};
            TT.prev()
         !}
      ?};
      {? _nr=1 & TT.first()
      || _lp:=0;
         {!
         |? TT.LP:=(_lp+=1);
            TT.put();
            TT.next()
         !}
      ?}
   !};
   VAR_DEL.delete('TT')
?};
ISTDEFS.cntx_pop()


\set_ssl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.02]
:: OPIS: Ustawia scieżkę z certyfikatami do połaczenia przez HTTPS
::   WE: _a - wskazanie na obiekt HTTP
::----------------------------------------------------------------------------------------------------------------------
{? sys_name(1)='U_LINUX'
|| _pem:='ssl_abs.pem';
   _a.set_cert(pth_dir(_pem)+'/'+_pem)
?}


\validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Walidacja e-deklaracji (plik xml) ze schematem XSD.
::       Schemat jest pobierany z www i zapisywany na serwerze.
::   WE: _a - plk xml
::   WY: 1-zgodny, 0-niezgodny, -1-brak schematu XSD, -2-walidacja wyłączona
::----------------------------------------------------------------------------------------------------------------------
{? exec('xml_valid_on','xml')=0
|| -2
|? ISTDEF.XMLNS<>''
|| _xsd:=ISTDEF.VER+'.xsd';
   _xsd:=STR.gsub(_xsd,' ','_');
   _ok:=1;
   _obj:=exec('obj_xml_validate','xml');
   _valid:=_obj.validate(ISTDEF.XMLNS,_xsd,_a);
   {? _obj.NOXSD
   || NoXSD:=1
   ?};
   {? ~_valid
   || exec('valid_info','xml',_obj.RESULT);
::    _obj.show();
      0
   || 1
   ?}
?}


\valid_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Dodanie informacji o błędach wtkrytych podczas walidacji xml ze schematem xsd
::   WE: _a - treść
::       [_b] - typ komunikatu
::  OLD: \valid_info/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_b')<=0 || _b:=-1 ?};
{? var_press('EdekGr')<0 & var_press('TAB_ERR')>0
|| TAB_ERR.EL:='Niezgodność ze schematem';
   {? TAB_ERR.add()
   || TAB_ERR.memo_set(_a,'OPIS');
      TAB_ERR.memo_put();
      TAB_ERR.put()
   ?}
|? var_press('ErrFun')>0
|| ErrFun(_b,_a)
?}


\f3_xml_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Klawisz F3 dla parametru 89 - Walidacja e-deklaracji i JPK ze schematem XSD
::----------------------------------------------------------------------------------------------------------------------
_wart:=~-PARAMETR.TRESC;
_tab:=tab_tmp(1,
   'PPL_E','INTEGER','Personel: e-deklaracje',
   'FKS_E','INTEGER','Finanse: e-deklaracje',
   'FKS_J','INTEGER','Finanse: JPK'
);
_tab.blank(1);
_tab.PPL_E:=(1+_wart)='T';
_tab.FKS_E:=(2+_wart+1)='T';
_tab.FKS_J:=(_wart+1)='T';
_tab.add();
_win:=_tab.mk_edit('Walidacja ze schematem XSD',,'xmlvalid1');
_tab.win_efld(_win,,'PPL_E',,,,,,,,,'check-box',,"1","0");
_tab.win_efld(_win,,'FKS_E',,,,,,,,,'check-box',,"1","0");
_tab.win_efld(_win,,'FKS_J',,,,,,,,,'check-box',,"1","0");
exec('ok_esc','#window',_tab,_win);
_tab.win_edit(_win);
{? _tab.edit()
|| _wart:={? _tab.PPL_E || 'T' || 'N' ?}+{? _tab.FKS_E || 'T' || 'N' ?}+{? _tab.FKS_J || 'T' || 'N' ?}
?};
_wart


\ae_xml_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Po redakcji parametru 89 - Walidacja e-deklaracji i JPK ze schematem XSD
::----------------------------------------------------------------------------------------------------------------------
_wart:=~-(3+PARAMETR.TRESC);
PARAMETR.TRESC:={? 1+_wart<>'T' || 'N' || 'T' ?}+{? 2+_wart+1<>'T' || 'N' || 'T' ?}+{? _wart+1<>'T' || 'N' || 'T' ?};
1


\xml_valid_on
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Czy walidacja włączona
::----------------------------------------------------------------------------------------------------------------------
_nrpar:={? ISTDEF.SYSTEM='PPL' || 1 |? ISTDEF.IST_ISTK='D' || 2 || 3 ?};
_par:=PAR_SKID.get(89);
_spr:=_nrpar+_par+1;
_spr='T'


\parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Parsowanie xml-a wg schematu
::   WE:  _a  - BLOB z plikiem xml
::        _b  - nazwa okna
::       [_c] - liczba linii
::       [_d] - formuła domyślna
::----------------------------------------------------------------------------------------------------------------------
_file:=fopen(_a,'r',,0,1);
{? _file.is_open()
|| VAR_DEL.delete('XmlInfo');
   XmlInfo:=obj_new('path','value','rej','title','fml_def','file','fname','ffml');
   XmlInfo.fml_def:={? var_press('_d')>0 || _d || '' ?};
   XmlInfo.path:=tab_tmp(2,
      'LP','INTEGER','lp',
      'REF','INTEGER','ref',
      'OPIS','STRING[40]','Opis',
      'H','INTEGER','Ukryty'
   );
   XmlInfo.rej:=0;
   XmlInfo.title:=_b;
   XmlInfo.file:=0;
   XmlInfo.fname:='';
   XmlInfo.ffml:="
      {? _a=1
      || {? .fname<>''
         || .file:=fopen(.fname,'w!',1)
         ?}
      |? .file
      || fclose(.file);
         .file:=0
      ?}
   ";
   x_parse(_file,,,"
         _kod:=_a;
         {? (_p:=_kod*':')
         || _kod:=_p-_kod
         ?};
         _tab:=XmlInfo.path;
         {? _tab.last()
         || _nad:=_tab.REF;
            _lp:=_tab.LP
         || _nad:=_lp:=0
         ?};
         _jest:=0;
         {? _nad<>-1
         || _pod:=0;
            ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),_nad);
            {? ISTDEFS.first()
            || {!
               |? {? ISTDEFS.HIDDEN='T'
                  || ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref());
                     ISTDEFS.first();
                     _pod+=1
                  ?};
                  _el:=ISTDEFS.OPIS;
                  {? (_p:=_el*':')
                  || _el:=_p-_el
                  ?};
                  {? _el=_kod
                  || _jest:=1
                  ?};
                  _dalej:=_jest=0 & ISTDEFS.next();
                  {? _dalej=0 & _jest=0
                  || {? _pod
                     || ISTDEFS.cntx_psh();
                        ISTDEFS.prefix();
                        ISTDEFS.seek(ISTDEFS.TREE,);
                        _nad:=ISTDEFS.TREE;
                        _ref:=ISTDEFS.ref();
                        ISTDEFS.cntx_pop();
                        ISTDEFS.prefix(ISTDEF.ref(),_nad);
                        ISTDEFS.seek(_ref);
                        _pod-=1;
                        _dalej:=ISTDEFS.next()
                     ?}
                  ?};
                  _dalej
               !}
            ?}
         ?};
         {? XmlInfo.rej
         || XmlInfo.value+='<'+_a+'>'
         ?};
         {? _jest
         || _tab.LP:=(_lp+=1);
            _tab.REF:=ISTDEFS.ref();
            _tab.OPIS:=ISTDEFS.OPIS;
            _tab.add();
            {? ISTDEFS.PARSER<>''
            || XmlInfo.rej:=($ISTDEFS.PARSER)(1,'');
               {? XmlInfo.rej
               || XmlInfo.value:='';
                  XmlInfo.ffml(1)
               ?}
            |? XmlInfo.fml_def<>''
            || XmlInfo.rej:=($XmlInfo.fml_def)(1,'');
               {? XmlInfo.rej
               || XmlInfo.value:='';
                  XmlInfo.ffml(1)
               ?}
            ?}
         || _tab.LP:=(_lp+=1);
            _tab.REF:=-1;
            _tab.OPIS:=_a;
            _tab.add()
         ?};
         1
      ","
         _tab:=XmlInfo.path;
         {? _tab.last()
         || _ref:=_tab.REF
         || _ref:=0
         ?};
         {? _ref
         || {? _ref>0
            || ISTDEFS.index('DRZEWO'); ISTDEFS.prefix();
               {? ISTDEFS.seek(_ref,)
               || _kod:=_a;
                  {? (_p:=_kod*':')
                  || _kod:=_p-_kod
                  ?};
                  _el:=ISTDEFS.OPIS;
                  {? (_p:=_el*':')
                  || _el:=_p-_el
                  ?};
                  {? _kod=_el
                  || _tab.del();
                     {? ISTDEFS.PARSER<>''
                     || XmlInfo.ffml(0);
                        ($ISTDEFS.PARSER)(0,XmlInfo.value);
                        XmlInfo.rej:=0
                     |? XmlInfo.fml_def<>'' & XmlInfo.rej
                     || XmlInfo.ffml(0);
                        ($XmlInfo.fml_def)(0,XmlInfo.value);
                        XmlInfo.rej:=0
                     ?}
                  ?}
               ?}
            |? _a=_tab.OPIS
            || _tab.del()
            ?}
         ?};
         {? XmlInfo.rej
         || XmlInfo.value+='</'+_a+'>'
         ?};
         1
      ","
         {? XmlInfo.rej
         || {? XmlInfo.file
            || fwrite(XmlInfo.file,_a)
            || XmlInfo.value+=_a
            ?}
         ?};
         1
      "
   );
   _file.fclose();
   VAR_DEL.delete('XmlInfo')
?};
1


\edek_kopia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Duplikowanie struktury drzewa
::----------------------------------------------------------------------------------------------------------------------
_next:=0;
_ref:=ISTDEFS.ref();
Last:="
   _last:=0;
   ISTDEFS.cntx_psh();
   ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),ISTDEFS.ref(),);
   {? ISTDEFS.last()
   || _last:=Last()
   || _last:=ISTDEFS.LP+1
   ?};
   ISTDEFS.cntx_pop();
   _last
";
_next:=Last();
_plus:=_next-ISTDEFS.LP;
{? _next
|| ISTDEFS.cntx_psh();
   ISTDEFS.index('LP'); ISTDEFS.prefix(ISTDEF.ref());
   {? ISTDEFS.last()
   || {!
      |? {? ISTDEFS.LP>=_next
         || ISTDEFS.LP+=_plus;
            ISTDEFS.put();
            ISTDEFS.prev()
         ?}
      !}
   ?};
   ISTDEFS.cntx_pop()
?};
ISTDEFS.cntx_psh();
ISTDEFS.prefix();
ISTDEFS.LP+=_plus;
_txt:={? var_press('ANOTACJA',ISTDEFS)>0 || ISTDEFS.memo_txt(,1,'ANOTACJA') || '' ?};
ISTDEFS.add();
{? _txt<>''
|| ISTDEFS.memo_set(_txt,'ANOTACJA');
   ISTDEFS.memo_put(,'ANOTACJA');
   ISTDEFS.put()
?};
_ref2:=ISTDEFS.ref();
ISTDEFS.cntx_pop();
exec('edek_kopia2','xml',_ref,_ref2,_plus);
ISTDEFS.seek(_ref2)


\edek_kopia2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Duplikowanie struktury drzewa - pomocnicza
::   WE: _a - element bazowy
::       _b - element nowy
::       _c - przesunięcie w LP
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh();
ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEF.ref(),_a);
{? ISTDEFS.first()
|| {!
   |? ISTDEFS.cntx_psh();
      ISTDEFS.prefix();
      ISTDEFS.LP+=_c;
      ISTDEFS.TREE:=_b;
      _txt:={? var_press('ANOTACJA',ISTDEFS)>0 || ISTDEFS.memo_txt(,1,'ANOTACJA') || '' ?};
      ISTDEFS.add();
      {? _txt<>''
      || ISTDEFS.memo_set(_txt,'ANOTACJA');
         ISTDEFS.memo_put(,'ANOTACJA');
         ISTDEFS.put()
      ?};
      _ref:=ISTDEFS.ref();
      ISTDEFS.cntx_pop();
      exec('edek_kopia2','xml',ISTDEFS.ref(),_ref,_c);
      ISTDEFS.next()
   !}
?};
ISTDEFS.cntx_pop()


\getAllXsd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Pobranie wszystkich plików XSD wymaganych do walidacji e-deklaracji i plików JPK
::  OLD: \getAllXsd/skid_xml.fml
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
{? exec('cli_functions','#system')=0
|| FUN.emsg(exec('indevice_nacc_msg','#system'));
   return(0)
?};
_Interm:=exec('interm','#system');
{? _Interm
|| __dir_controling:=fmk_tmp_dir(0);
   _dir:=fmkdir(__dir_controling.get_path(),'dir');
   _dir_loc:=_dir
|| _dir:=exec('filechooser','#file','Katalog na pliki schematów xsd'@,0,,,,'DIRECTORIES_ONLY',1);
   _dir_loc:='@'+_dir
?};
{? _dir<>''
|| _sql:=sql(
      'select REFERENCE as REF '+
      'from ISTDEF '+
      'where IST_ISTK=\'D\' or  IST_ISTK=\'J\' '
   );
   VAR_DEL.delete('VTab','VTab1','VTab2');
   VTab:=tab_tmp(1,
      'LP','INTEGER','LP'@,
      'FN','STRING[255]','Plik'@,
      'URL','STRING[255]','Adres'@,
      'STAT','INTEGER','Zapisano'@,
      'MEMO','SYS_MEMO','Opis'@
   );
   VTab1:=VTab.index('?');
   VTab2:=VTab.ndx_tmp('',1,'URL',,0);
   Lp:=0;
   _add:="
      VTab.cntx_psh();
      VTab.index(VTab2); VTab.prefix(_a,);
      _jest:=VTab.first();
      VTab.cntx_pop();
      {? ~_jest
      || VTab.blank(1);
         VTab.LP:=(Lp+=1);
         VTab.URL:=_a;
         VTab.FN:=_b;
         VTab.add()
      ?}
   ";
   {? _sql.first()
   || _obj:=exec('obj_xml_validate','xml');
      _tab:=~~;
      ISTDEF.cntx_psh();
      ISTDEF.prefix();
      {!
      |? {? ISTDEF.seek(_sql.REF) & -(4+ISTDEF.XMLNS)='http'
         || _xsd:=ISTDEF.VER+'.xsd';
            _xsd:=STR.gsub(_xsd,' ','_');
            echo('Pobieranie pliku: %1'@[ISTDEF.XMLNS]);
            _obj.get_link(ISTDEF.XMLNS,_xsd);
            {? var_pres('_tab')<=0
            || _tab:=_obj.TABXSD
            ?};
            {? _tab.first()
            || {!
               |? _add(_tab.URL,_tab.FILENAME);
                  _tab.next()
               !}
            ?}
         ?};
         _sql.next()
      !};
      ISTDEF.cntx_pop();
      echo()
   ?};
   {? VTab.first()
   || {!
      |? {? VTab.FN<>''
         || echo('Zapis pliku: '+VTab.FN);
            VTab.STAT:=fcopy(VTab.FN,_dir_loc+'/'+VTab.FN,1,0,1);
            VTab.put()
         ?};
         VTab.next()
      !};
      echo()
   ?};
   {? _Interm
   ||
      _zipname:=__dir_controling.get_path()+'\\Archiwum.zip';
      fpack_add(_zipname,_dir);
      dlg_save(_zipname,0,'Archiwum_plików_XSD.zip')
   ?};
   _o:=VTab.mk_sel('Pliki schematów'@,'P',,'#vtabsel',,,,,'U');
   VTab.win_fld(_o,,'FN',,,60);
   VTab.win_fld(_o,,'URL',,,100);
   VTab.win_fld(_o,,'STAT',,,,,,,,,2,,"1","0");
   VTab.win_sel(_o);
   VTab.select()
?};
VAR_DEL.delete('__dir_controling');
1


\upg_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [19.22]
:: OPIS: Import nagłówka i struktury e-deklaracji/pliku JPK
::   WE:  _a - dziedzina
::        _b - typ pliku: D-deklaracje J-jpk
::        _c - nazwa
::        _d - nr wersji e-Deklaracji lub nazwa pliku JPK
::        _e - data obowiązywania
::        _f - nazwa pliku na sewerze
::   WY: 1 - import poprawny, 0 - import zbędny, -1 - import nieudany
::----------------------------------------------------------------------------------------------------------------------
_ret:=-1;
BPMN.SYM_DOM:=_a;
SKID.ISTDEF:=_b;
{? _b='D'
|| VAT_VER.cntx_psh();
   VAT_VER.index('VER_NR');
   VAT_VER.prefix(_a,_c,_c,_d);
   {? VAT_VER.first()
   || ISTDEF.cntx_psh();
      ISTDEF.index('DATA');
      ISTDEF.prefix(_a,_b,_c,VAT_VER.ref(),_e);
      {? ~ISTDEF.first()
      || _ret:={? exec('edek_imp','xml',_f) || 1 || -1 ?}
      || _ret:=0
      ?};
      ISTDEF.cntx_pop()
   ?};
   VAT_VER.cntx_pop()
|? _b='J'
|| ISTDEF.cntx_psh();
   ISTDEF.index('JPK'); ISTDEF.prefix('J',_c,_d,);

   {? ~ISTDEF.first()
   || _ret:={? exec('edek_imp','xml',_f) || 1 || -1 ?}
   || _ret:=0
   ?};
   ISTDEF.cntx_pop()
?};

_ret


\add_ver
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [19.42]
:: OPIS: Dodaje wersję e-Deklaracji
::   WE:  _a  - dziedzina
::        _b  - data obowiązywania
::        _c  - rodzaj e-Deklaracji
::        _d  - wersja e-Deklaracji
::       [_e] - numer formularza
::       [_f] - wiersze
::----------------------------------------------------------------------------------------------------------------------
VAT_VER.cntx_psh();
VAT_VER.index('VER_OD'); VAT_VER.prefix(_a,_c,_c,_b,_d);
_jest:=VAT_VER.first();
{? ~_jest
|| _old:={? _a='FKS' || 'FIKS' |? _a='PPL' || 'KALI' || '' ?};
   VAT_VER.prefix(_old,_c,_c,_b,_d);
   _jest:=VAT_VER.first()
?};
{? _jest
|| _add:=0
|| _add:=1;
   VAT_VER.blank();
   VAT_VER.SYSTEM:=_a;
   VAT_VER.OD:=_b;
   VAT_VER.NAZWA:=_c;
   VAT_VER.NR:=_d
?};
{? _<6 || _f:='' ?};
{? _<5 || _e:=0 ?};
_put:=0;
{? VAT_VER.NRF<>_e || VAT_VER.NRF:=_e; _put+=1 ?};
{? VAT_VER.WIERSZ<>_f || VAT_VER.WIERSZ:=_f; _put+=1 ?};
VAT_VER.prefix();
_ok:={? _add || VAT_VER.add(1) |? _put || VAT_VER.put(1) || 1 ?};
VAT_VER.cntx_pop();
_ok


\switch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Formuła dla elemntu typu przełącznik
::   WE: [_a] - formuła elementu
::  OLD: \switch/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_fml:={? var_pres('_a')>0 || _a || ~~ ?};
{? var_pres('_fml')>0
|| {? XmlS.tryb=0
   || _a()
   || ISTDEFS.WYM:='N';
      XmlS.ile+=1;
      XmlS.val[XmlS.ile].VAL
   ?}
|| VAR_DEL.delete('XmlS');
   ISTDEFS.cntx_psh();
   ISTDEFS.index('DRZEWO'); ISTDEFS.prefix(ISTDEFS.ISTDEF,ISTDEFS.ref());
   {? ISTDEFS.first()
   || XmlS:=obj_new('val','ile','tryb');
      XmlS.ile:=ISTDEFS.size();
      XmlS.val:=obj_new(XmlS.ile);
      XmlS.tryb:=0;
      _lp:=0;
      {!
      |? ISTDEFS.WYM:='N';
         _val:=($ISTDEFS.REGULY)();
         XmlS.val[_lp+=1]:=obj_new('POZ','VAL');
         XmlS.val[_lp].POZ:=ISTDEFS.OPIS;
         XmlS.val[_lp].VAL:=_val;
         ISTDEFS.next()
      !};
      XmlS.tryb:=1;
      XmlS.ile:=0
   ?};
   ISTDEFS.cntx_pop();
   1
?}


\xml2html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Wykonuje transormację pliku xml do html przy uzyciu pliku xslt
::   WE: _a - scieżka do pliku xml
::       _b - scieżka do pliku xslt
::       _c - scieżka do pliku html
::       _d - scieżka do katalogu z plikiem jar
::  OLD: \xml2html/skid_xml.fml
:: ~OST: INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_d')>0
|| _fdir:=_d
|| _fdir:=tmp_dir()
?};
exec('MBJAR','#object');
fcopy('xml_translator.jar',{? var_press('_d')<=0 || '@' || '' ?}+_fdir+'/'+'xml_translator.jar',1,0,1);
_options:='runOnAppServer='+{? var_press('_d')>0 || '1' || '0' ?}+',wait=1';
jexec(_fdir,_options,'-Dfile.encoding=utf-8','-jar',_fdir+'/'+'xml_translator.jar',_b,_a,_c)


\uzu_html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Uzupełnia informacje o nr UPO oraz nazwie urzędu skarbowego
::   WE: _a - ścieżka do pliku html
::       _b - ścieżka do xml
::  OLD: \uzu_html/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_from:=5800;
_us:={? var_pres('_b')>0 || exec('us_name','jpk_v',_b) || XINFO.URZAD().NU ?};
exec('replace','xml',_a,32*'#',E_DEK.REF_ID,_from);
exec('replace','xml',_a,50*'Y',_us,_from);
exec('replace','xml',_a,20*'I',VAT_DEK.IMIE,_from);
exec('replace','xml',_a,30*'N',VAT_DEK.NAZ,_from);
exec('replace','xml',_a,20*'T',VAT_DEK.TEL,_from);
exec('replace','xml',_a,'0000/00/00',$VAT_DEK.DATA,_from)


\replace
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Zastępuje tekst w pliku
::   WE: _a - scieżka do pliku
::       _b - tekst źródłowy
::       _c - tekst docelowy
::       _d - przesunięcie od początku pliku w bajtach
::  OLD: \replace/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_src:=_b;
_dest:=maz_utf8(_c);
{? _dest='' || _dest:='&nbsp;' ?};
_dest+=(+_src-+_dest)*' ';
_shift:={? var_pres('_d')>0 || _d ?};
_file:=fopen({? exec('interm','#system') || '' || '@' ?}+_a,'b',0);
{? _file
|| _start:=0;
   _nr:=0;
   _ile:=1;
   _dalej:=1;
   {!
   |? _byte:=fread(_file);
      {? _byte=-1 || _dalej:=0 ?};
      _nr+=1;
      {? _byte=%(_ile+_src+1)
      || _ile+=1;
         {? _start=0
         || _start:=_nr
         ?};
         {? _ile=+_src
         || fseek(_file,_start-1);
            {! _ii:=1..+_dest
            |! _zn:=_ii+_dest+1;
               fwrite(_file,%_zn)
            !};
            _dalej:=0
         ?}
      || _start:=0;
         _ile:=1
      ?};
      _dalej
   !};
   fclose(_file)
?}


\ar_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Import danych z pliku JPK - formuła po odświeżeniu okna
::   WE: _a - nr tabeli
::  OLD: \ar_imp/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=cur_tab(1,1).ref();
Xml[_a].prefix(_ref);
Xml[_a].first();
grp_disp(Xml[_a],Xml[_a].win_sel('?'))


\urzad_jpk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [12.51]
:: OPIS: Formuła na KodUrzedu dla plików JPK_V7
::   WY: US.EDEK_SYM, dla odpowiedniego urzędu skarbowego
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.US_JPK<>null()
|| XINFO.US_JPK().EDEK_SYM
|| XINFO.URZAD().EDEK_SYM
?}


\poz_edek_full
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [12.51]
:: OPIS: Wartosc pozycji dodatkowej e-Deklaracji
::   WE:  _a  - prefiks pozycji dodatkowej (VAT_POZ.LP)
::       [_b] - czy tylko nieujemne
::       [_c] - 1-VAT 2-NETTO
::   WY: Wartosc pozycji (napis)
::  OLD: \poz_edek_full/skid_xml.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=0 ?};
{? var_pres('_c')<=0 || _c:=1 ?};
VAT_POZ.index('VAT_POZ'); VAT_POZ.prefix(VAT_DEK.ref(),_a,);
{? VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T' | VAT_POZ.TYP='D'
         || VAT_POZ.TEXT
         |? _c=1
         || {? VAT_POZ.VAT | ISTDEFS.WYM='T'
            || STR.gsub($VAT_POZ.VAT,',','.')
            || ''
            ?}
         |? _c=2
         || {? VAT_POZ.NETTO | ISTDEFS.WYM='T'
            || STR.gsub($VAT_POZ.NETTO,',','.')
            || ''
            ?}
         || ''
         ?}
|? ISTDEFS.WYM='T'
|| _ret:='0'
|| _ret:=''
?};
{? _b & #_ret<0
|| {? ISTDEFS.WYM='T'
   || _ret:='0'
   || _ret:=''
   ?}
?};
_ret


\typ_fld_grp_jpk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MP [22.26]
:: OPIS: Zwraca typ pola podczas grupowania JPK
::   WE:  _a  - nazwa nagłówka
::       [_b] - typ JPK
::   WY: String określający typ pola dla grupowania plików JPK
::       'O' - Wartość tylko dla ostatniego okresu w grupie
::       'S' - Wartości sumowane według klucza
::       'W' - Wszystkie rekordy w grupie
::----------------------------------------------------------------------------------------------------------------------
_nag:=_a;
_ret:='';
{? _nag*'ZOiS'
|| _ret:='S'
|? _nag*'DziennikCtrl' | _nag*'KontoZapisCtrl' | _nag*'Salda' | _nag*'WyciagCtrl'
|| _ret:='S'
|? _nag*'Dziennik' | _nag*'KontoZapis' | _nag*'WyciagWiersz'
|| _ret:='W'
?};
_ret


\obj_xml_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [22.26]
:: OPIS: Tworzy obiekt do obsługi validacji plików *.xml ze schematem w pliku *.xsd
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(
   'TAB','LP','SEL','RESULT','NOXSD','PROGRESS',
   'TABXSD','FILENAME',
   'add','clear','get_xsd','get_xsd_fn','get_hex',
   'validate','show','get_link'
);
_obj.LP:=0;
_obj.TAB:=tab_tmp(1,
   'LP','INTEGER','LP',
   'DESC','STRING[255]','Krótki opis',
   'MEMO','SYS_MEMO','Długi opis'
);
_obj.SEL:='';
_obj.TABXSD:=~~;
_obj.FILENAME:='';
_obj.PROGRESS:=0;
_obj.add:="
   _txt:=_a;
   _tab:=.TAB;
   _tab.blank(1);
   _tab.LP:=(.LP+=1);
   _tab.DESC:=_txt;
   {? _tab.add()
   || _tab.memo_set(_txt,'MEMO');
      _tab.memo_put(,'MEMO');
      _tab.put()
   ?}
";

_obj.clear:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Czyści pomocnicze dane
::----------------------------------------------------------------------------------------------------------------------
   _tab:=.TAB;
   _tab.erase();
   .RESULT:='';
   .NOXSD:=0
";

_obj.get_xsd:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca uchwyt do otwartego do czytania binarnie pliku xsd
::   WE:  _a  - url do pliku
::       [_b] - nazwa pliku xsd, który zostanie zapisany na serwerze
::       [_c] - czy sprawdzać istnienie pliku na serwerze? [1]-tak 0-nie, plik będzie pobierany z url
::       [_d] - tryb otwarcia pliku
::   WY: Uchwyt do otwartego pliku xsd lub ~~
::----------------------------------------------------------------------------------------------------------------------
   _url:=_a;
   _fn:={? var_press('_b')>0 || _b || .get_xsd_fn(_url) ?};
   _chk:={? var_press('_c')>0 || _c || 1 ?};
   _ftryb:={? var_pres('_d')>0 & type_of(_d)=type_of('') || _d || 'ur' ?};
   {? _fn+4='.xsd' || _fn:=_fn-4 ?};
   .FILENAME:=_fn:=(19+('v_'+_fn))+'_'+hash(_url)+'.xsd';
   _ok:=0;
   {? _chk & fexists(_fn,1)
   || _ok:=1
   || {? .PROGRESS
      || echo('Pobieranie pliku: '+_url)
      ?};
      _fxsd:=fopen(_fn,'b',1,,1);
      {? _fxsd.is_open()
      || _inet:=inet_get(_url);
         _inet.http_get(_fxsd);
         fclose(_fxsd)
      || .add('Nie udało się zapisanie pliku: '+_fn)
      ?};
      {? fexists(_fn,1)
      || _size:=0;
         _fxsd2:=fopen(_fn,'br',1,,1);
         {? _fxsd2.is_open()
         || _size:=fgetsize(_fxsd2);
            fclose(_fxsd2)
         ?};
         {? _size
         || _fxsd3:=fopen(_fn,'r',1,,1);
            {? _fxsd3.is_open()
            || _line:=fread(_fxsd3);
               {? _line*'<?xml'=0
               || _size:=0
               ?};
               fclose(_fxsd3)
            ?}
         ?};
         {? _size
         || _ok:=1
         || ferase(_fn);
            .add('Nie udane pobranie pliku z adresu: '+_url+'.')
         ?}
      || .add('Nie udane pobranie pliku z adresu: '+_url+'.')
      ?}
   ?};
   {? _ok
   || fopen(_fn,_ftryb,1,,1)
   || .NOXSD:=1;
      ~~
   ?}
";

_obj.get_xsd_fn:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca nazwę pliku ze ścieżki URL
::   WE: _a - url
::----------------------------------------------------------------------------------------------------------------------
   {!
   |? _p:=_a*'/';
      {? _p
      || _a:=_p-_a;
         1
      ?}
   !};
   _wyn:='';
   {!
   |? _p:=_a*'%';
      {? _p
      || _wyn+=(_p-1)+_a;
         _v:=2+(_p-_a);
         _wyn+=%.get_hex(_v);
         _a:=(_p+2)-_a;
         1
      || _wyn+=_a;
         0
      ?}
   !};
   _wyn
";

_obj.get_hex:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Zwraca liczbę zapisaną w systemie 16
::   WE: _a - liczba w zapisie heksadecymalnym
::----------------------------------------------------------------------------------------------------------------------
   _s:='0123456789abcdef';
   _l:=0;
   {!
   |? {? _a<>''
      || _zn:=1+_a;
         _a:=1-_a;
         _p:=_s*_zn;
         {? _p
         || _p-=1;
            _l*=16;
            _l+=_p;
            1
         ?}
      ?}
   !};
   _l
";

_obj.show:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Wyświetla informacje o błędach powstałych w trakcie walidacji
::----------------------------------------------------------------------------------------------------------------------
   _tab:=.TAB;
   {? .SEL=''
   || _win:=_tab.mk_sel('Wynik walidacji','P',,'#xsdxmlvalidwin',,,,,'U');
      _tab.win_fld(_win,,'DESC',,,100,,,'Opis'@);
      .SEL:=_win;
      _tab.win_sel(.SEL);
      _red:=_tab.mk_edit('Wynik weryfikacji',,'#xsdxmlvalidred');
      _tab.win_efld(_red,,'MEMO',,,150,-20,,'Opis'@);
      _tab.win_edit(_red)
   ?};
   _tab.select()
";

_obj.validate:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Metoda walidująca plik xml z xsd
::   WE:  _a  - url do pliku xsd, ścieżka do pliku xsd lub uchwyt do otwartego pliku xsd do czytania binarnie
::       [_b] - nazwa pliku xsd - używana do zapisu pobranego pliku z internetu na serwerze
::        _c  - ścieżka do pliku xml lub uchwyt do otwartego do czytania binarnie pliku xml lub treść xml-a
::   WY: 1-validacja bez błędów, 0-walidacja z błędami (błędy w tabeli _obj.TAB i napisie _obj.RESULT)
::----------------------------------------------------------------------------------------------------------------------
   _xsd_url:=~~;
   _xsd_file:=~~;
   {? var_pres('_a')>0 & type_of(_a)=type_of('')
   || {? -(4+_a)='http'
      || _xsd_url:=_a
      || _xsd_file:=fopen(_a,'ur',{? 1+_a='@' || 0 || 1 ?},,1)
      ?}
   || _xsd_file:=_a
   ?};
   _xsd_fn:={? var_pres('_b')>0 & type_of(_b)=type_of('') || _b || ~~ ?};
   _xml:=_c;
   .clear();
   _fxsd:={? var_pres('_xsd_url')>0 || .get_xsd(_xsd_url,_xsd_fn) || _xsd_file ?};
   _fxml:={? type_of(_xml)=type_of('')
          || {? 1+_xml='<'
             || _xml
             || fopen(_xml,'ur',0,,1)
             ?}
          || _xml
          ?};
   params_set('obj',.);
   xml_err();
   no_msg(1);
   x_valida(_fxsd,_fxml,\"_obj:=params_get().obj; _obj.get_xsd(_a)\");
   no_msg(0);
   _err:=xml_err();
   {? _err<>''
   || .RESULT:=_err;
      _arr:=spli_str(_err,'\n');
      {! _ii:=1..obj_len(_arr)
      |! {? _arr[_ii]<>'' || .add(_arr[_ii]) ?}
      !};
      0
   || 1
   ?}
";

_obj.get_link:="
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Pobiera powiązane schematy xsd dla wskazanego
::   WE: _a - url schematu xsd
::       _b - plik do którego będzie zapisany schemat
::----------------------------------------------------------------------------------------------------------------------
   _xsd_url:={? var_pres('_a')>0 & type_of(_a)=type_of('') || _a || '' ?};
   _xsd_fn:={? var_pres('_b')>0 & type_of('_b')=type_of('') || _b || '' ?};
   {? var_pres('TABXSD',.)<=0
   || _tab:=tab_tmp(2,
         'URL','STRING[255]','URL',
         'FILENAME','STRING[255]','Nazwa pliku'
      );
      .TABXSD:=_tab
   || _tab:=.TABXSD;
      _tab.erase()
   ?};
   {? _xsd_url<>'' & _xsd_fn<>''
   || _tab.blank(1);
      _tab.URL:=_xsd_url;
      _fxsd:=.get_xsd(_xsd_url,_xsd_fn,0);
      {? var_pres('_fxsd')>0
      || _tab.FILENAME:=.FILENAME
      ?};
      _tab.add();
      {? var_pres('_fxsd')>0
      || params_set('obj',.);
         no_msg(1);
         x_valida(_fxsd,'',\"
            _obj:=params_get().obj;
            _tab:=_obj.TABXSD;
            _fxsd:=_obj.get_xsd(_a,,,'b');
            _tab.blank(1);
            _tab.URL:=_a;
            {? var_pres('_fxsd')>0
            || _tab.FILENAME:=_obj.FILENAME
            ?};
            _tab.add();
            _fxsd
         \");
         no_msg(0)
      ?};
      echo()
   ?}
";

_obj


\poz_edek_dod2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [12.51]
:: OPIS: Wartosc pozycji dodatkowej e-Deklaracji
::   WE:  _a  - element deklaracji (VAT_POZ.LP)
::       [_b] - czy tylko nieujemne
::       [_c] - [1]-netto, 2-VAT
::   WY: Wartosc pozycji (napis)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<=0 || _b:=0 ?};
_netto:={? var_pres('_c')=type_of(1) || _c || 1 ?};
VAT_POZ.index('VAT_POZ'); VAT_POZ.prefix(VAT_DEK.ref(),_a,);
{? VAT_POZ.first()
|| _ret:={? VAT_POZ.TYP='T' | VAT_POZ.TYP='D'
         || VAT_POZ.TEXT
         |? _netto=1 & (VAT_POZ.NETTO | ISTDEFS.WYM='T')
         || STR.gsub($VAT_POZ.NETTO,',','.')
         |? _netto=2 & (VAT_POZ.VAT | ISTDEFS.WYM='T')
         || STR.gsub($VAT_POZ.VAT,',','.')
         || ''
         ?}
|? ISTDEFS.WYM='T'
|| _ret:='0'
|| _ret:=''
?};
{? _b & #_ret<0
|| {? ISTDEFS.WYM='T'
   || _ret:='0'
   || _ret:=''
   ?}
?};
_ret


\akc_dodat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Akcja dodatkowej edycji dnych
::----------------------------------------------------------------------------------------------------------------------
ISTDEFS.cntx_psh();
ISTDEFS.win_edit(exec('R_EDEK','xml'));
ISTDEFS.memo_get(,'ANOTACJA');
{? ISTDEFS.edit()
|| ISTDEFS.memo_put(,'ANOTACJA');
   ISTDEFS.put()
?};
ISTDEFS.cntx_pop()


\R_EDEK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Zwraca okno redagowania ISTDEFS
::----------------------------------------------------------------------------------------------------------------------
_win:=ISTDEFS.mk_edit('Element'@,0,'istdefsqr_edek');
ISTDEFS.win_esep(_win,'Redakcja'@);
ISTDEFS.win_efld(_win,,'NAZTAB',,,100,0,0,'Akronim pola'@,0,'',,'');
ISTDEFS.win_efld(_win,,'TYPFLD',,,100,0,0,'',0,'',,'');
ISTDEFS.win_esep(_win,'Anotacja'@);
ISTDEFS.win_efld(_win,,'ANOTACJA',,,100,-3,0,'Treść',,'',,'');
_btn1:=ISTDEFS.win_ebtn(_win,'text="%1",panel=bottom,align=end,edit=1'['Zapisz'@],'key:F2');
ISTDEFS.btn_eopt(_win,_btn1,'tooltip="%1"'['Zapisz dane z możliwością powrotu do edycji'@]);
_btn2:=ISTDEFS.win_ebtn(_win,'text="%1",panel=bottom,align=end,edit=1'['Anuluj'@],'key:Esc');
ISTDEFS.btn_eopt(_win,_btn2,'tooltip="%1"'['Anuluj zmiany i zamknij okno'@]);
_win


\edek_fml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Uruchamia formułę dla wskazanych elementów
::   WE: _a - 0-dla elementu 1-przed akcją grupową
::----------------------------------------------------------------------------------------------------------------------
_grupa:=_a;
_dalej:=0;
_obj:=exec('edek_fml_obj','xml');
{? _grupa=1 | _grupa=0 & ~ISTDEFS.sel_size()
|| {? _obj.edit()
   || _dalej:=1
   ?}
|| _dalej:=1
?};
{? _grupa=0 & _dalej & _obj.FORMULA<>''
|| ISTDEFS.cntx_psh();
   ($_obj.FORMULA)();
   ISTDEFS.cntx_pop()
?};
_dalej


\edek_fml_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Zwraca obiekt do zarządzania formułą dla schematów e-deklaracji
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('XmlFmlObj')<=0
|| _obj:=obj_new(
      'FORMULA',
      'TAB','I0','I1','MAX_HIST',
      'WRED','WSEL','edit','save','load',
      'f3'
   );
   _obj.MAX_HIST:=20;
   _obj.TAB:=_tab:=tab_tmp(1,
      'LP','INTEGER','Lp.',
      'FML','STRING[255]','Formuła'
   );
   _obj.I0:=_tab.index('?');
   _obj.I1:=_tab.ndx_tmp('',1,'FML',,0);
   _obj.edit:="
      _tab:=.TAB;
      {? var_pres('WRED',.)<=0
      || _tab.fld_fml('FML','F3',.f3);
         _edit:=_tab.mk_edit('Formuła',,'#istdefsformula');
         _tab.win_efld(_edit,,'FML',,,100,,,'Formuła',,,,'F3_button=1');
         _btn:=_tab.win_ebtn(_edit,'text=%1, btn_label_align=center, panel=bottom, align=end'['OK'@],\"'key:F2'\");
         _tab.btn_eopt(_edit,_btn,'tooltip='+exec('help_red_ok','#window','P'));
         _an:=_tab.win_ebtn(_edit,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Anuluj'@],'key:Esc');
         _tab.btn_eopt(_edit,_an,'tooltip='+exec('help_red_esc','#window','A'));
         .WRED:=_edit
      ?};
      _tab.win_edit(.WRED);
      params_set('obj',.);
      {? _tab.edit()
      || .FORMULA:=_tab.FML;
         _save:=0;
         _tab.cntx_psh();
         _tab.index(.I0);
         _tab.prefix();
         _last:={? _tab.last() || _tab.LP || 0 ?};
         _tab.index(.I1);
         _tab.prefix();
         {? _tab.find_key(.FORMULA,)
         || {? _last<>_tab.LP
            || _tab.del();
               _save:=1
            ?}
         || _save:=1
         ?};
         {? _save
         || _tab.index(.I0);
            _size:=_tab.size();
            {? _size>.MAX_HIST & _tab.first()
            || _ile:=_size-.MAX_HIST;
               {! _ii:=1.._ile
               |! _tab.del()
               !}
            ?};
            _lp:=0;
            {? _tab.first()
            || {!
               |? _tab.LP:=_lp+=1;
                  _tab.put();
                  _tab.next()
               !}
            ?};
            _tab.LP:=_lp+=1;
            _tab.FML:=.FORMULA;
            _tab.add();
            .save()
         ?};
         _tab.cntx_pop();
         1
      ?}
   ";
   _obj.save:="
      _tab:=.TAB;
      _file:=fopen('edekfml.hst','uw',1);
      {? _file
      || _tab.index(.I0);
         {? _tab.first()
         || {!
            |? fwrite(_file,_tab.FML);
               _tab.next()
            !}
         ?};
         fclose(_file)
      ?}
   ";
   _obj.load:="
      _tab:=.TAB;
      _file:=fopen('edekfml.hst','ur',1);
      {? _file
      || _lp:=0;
         {!
         |? _str:=fread(_file);
            {? _str<>'\n'
            || _tab.LP:=_lp+=1;
               _tab.FML:=_str;
               _tab.add();
               1
            ?}
         !};
         fclose(_file)
      ?};
      {? _tab.last()
      || .FORMULA:=_tab.FML
      ?}
   ";
   _obj.f3:="
      _obj:=params_get().obj;
      _tab:=_obj.TAB;
      {? var_pres('WSEL',_obj)<=0
      || _wer:=_tab.mk_sel('Formuły','P',,'#istdefsswl',,,,,'U');
         _tab.win_fld(_wer,,'LP');
         _tab.win_fld(_wer,,'FML',,,60);
         _tab.win_act(_wer,,'Formuła','Wybierz',,,\"sel_exit()\",,1);
         _obj.WSEL:=_wer
      ?};
      _tab.win_sel(_obj.WSEL);
      _ref:=null;
      {? var_pres('FORMULA',_obj)=type_of('') & _obj.FORMULA<>''
      || _tab.cntx_psh();
         _tab.index(_obj.I1);
         _tab.prefix();
         {? _tab.find_key(_obj.FORMULA,)
         || _ref:=_tab.ref()
         ?};
         _tab.cntx_pop()
      ?};
      _ret:=0;
      _tab.cntx_psh();
      {? _ref || _tab.seek(_ref) || _tab.last() ?};
      {? _tab.select(,1,5)
      || _ret:=_tab.FML
      ?};
      _tab.cntx_pop();
      {? var_pres('_ret')=type_of('')
      || fld(_ret);
         _ret:=0
      ?};
      _ret
   ";
   _obj.load();
   XmlFmlObj:=_obj
|| _obj:=XmlFmlObj
?};
_obj


\edek2html
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [23.25]
:: OPIS: Wyświetla transormatę edeklaracji do html
:: ~OST: INCLIEXEC,INFCOPY,INFEXISTS,INTMPDIR
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('VAT_DEKS')<=0 || return(0) ?};
_ok:=0;
VAT_DEK.cntx_psh();
_typ:=E_DEK.ZRODLO().TYP;
{? _typ+4='_KOR' || _typ:=_typ-4 ?};
VAT_DEKS.cntx_psh();
VAT_DEKS.index('VAT_DEKS');
VAT_DEKS.prefix(E_DEK.ZRODLO,_typ,);
ISTDEFS.cntx_psh();
_schemat:={? VAT_DEKS.first() || VAT_DEKS.ISTDEF().VER || '' ?};
ISTDEFS.cntx_pop();
VAT_DEKS.cntx_pop();
VAT_DEK.cntx_pop();
{? _schemat<>''
|| _fxsl:=_schemat+'.xsl';
   {? fexists(_fxsl,1)
   || _interm:=exec('interm','#system');
      {? _interm
      || _tmpdir:=fmk_tmp_dir(0);
         {? type_of(_tmpdir) <> type_of(~~)
         || _fdir:=_tmpdir.get_path
         || _fdir:=''
         ?};
         _fc:="{? ~fexists(_b+'/'+_a) || fcopy(_a,_b+'/'+_a,1,0,1) || 1 ?}"
      || _fc:="{? ~fexists('@'+tmp_dir()+'/'+_a) || fcopy(_a,'@'+tmp_dir()+'/'+_a,1,0,1) || 1 ?}";
         _fdir:=tmp_dir()
      ?};
      _fc(_fxsl,_fdir);
      _fin:=_fdir+'/edek.xml';
      _fout:=_fdir+'/edek.html';
      E_DEK.bl_get('PLIK_GEN',{? _interm || '' || '@' ?}+_fin,0);
      {? _interm
      || exec('xml2html','xml',_fin,_fdir+'/'+_fxsl,_fout,_fdir)
      || exec('xml2html','xml',_fin,_fdir+'/'+_fxsl,_fout)
      ?};
      _us:=exec('us_name','jpk_v',{? _interm || '' || '@' ?}+_fin);
      exec('replace','xml',_fout,50*'Y',_us);
      exec('replace','xml',_fout,32*'#',E_DEK.REF_ID);
      ferase({? _interm || '' || '@' ?}+_fdir+'/'+_fxsl,0);
      ferase({? _interm || '' || '@' ?}+_fin,0);
      {? _interm || dlg_save(_fout) || cli_exec(_fout) ?};
      _ok:=1
   ?}
?};
_ok

:Sign Version 2.0 jowisz:1045 2024/02/20 12:44:28 03c9e6ff5dd3ff28e6226683668a46d51e1009694463a6c4ada2f81bf843844032f561ce3365305ac80e53da4dd56a70c10d06fb4bdcf404c0f56bce9984941d5416967089d4466cdaf8a883d5270366fcd672e012ec586f7f875ea8cdbf44a9f3fe7b459bc90b0edc0671a604bfb16f1fef594ecc5bd705dceacf4d67feb0b4
