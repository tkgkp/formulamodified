:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: businesslink3.fml
:: Utworzony: 10.08.2020
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły obsługujące Businesslink multitenant o charakterze konfiguracyjnym i komunikacyjnym
::======================================================================================================================


\renameMethod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Przenazwanie nazw metod API na nazwy formuli
::   WE: _a [STRING] - nazwa metody API
::   WY: metoda formuli użyta do obsługi
::----------------------------------------------------------------------------------------------------------------------
_method:={? var_pres('_a')=type_of('') || _a || return('') ?};

{? _method='BLMT_PARTNER_GET'
|| _method:='PartnerGet'
|? _method='BLMT_PARTNER_GET_MANUAL'
|| _method:='PartnerGetManual'
|? _method='BLMT_PARTNER_FIND'
|| _method:='PartnerFind'
|? _method='BLMT_PARTNER_ADD_INVITE'
|| _method:='PartnerAddInvite'
|? _method='BLMT_OPERATOR_ADD_INVITE'
|| _method:='OperatorAddInvite'
|? _method='BLMT_SERVICE_INFO'
|| _method:='ServiceInfo'
|? _method='BLMT_DOCUMENT_SEND'
|| _method:='DocumentSend'
|? _method='BLMT_DOCUMENT_SEND_GO'
|| _method:='DocumentSendGo'
|? _method='BLMT_DOCUMENT_SEND:batch'
|| _method:='DocumentSendBatch'
|? _method='BLMT_DOCUMENT_GETINFO'
|| _method:='DocumentGetinfo'
|? _method='BLMT_DOCUMENT_GETINFO:batch'
|| _method:='DocumentGetinfoBatch'
|? _method='BLMT_SIGNATURE_SEND:batch'
|| _method:='SignatureSendBatch'
|? _method='BLMT_DOCUMENT_INVALIDATE'
|| _method:='DocumentInvalidate'
|? _method='BLMT_DOCUMENT_REPORT'
|| _method:='DocumentReport'
|? _method='BLMT_DOCUMENT_GET'
|| _method:='DocumentGet'
|? _method='BLMT_DOCUMENT_GET_CONFIRM'
|| _method:='DocumentGetConfirm'
|? _method='BLMT_SETTLEMENTS_SEND'
|| _method:='SettlementsSend'
|? _method='BLMT_DOCUMENT_ATTACHMENTS_ADD'
|| _method:='DocumentAttachmentsAdd'
|? _method='BLMT_MAPS_SEND'
|| _method:='MapsSend'
|? _method='sl_TenantParamsGet'
|| _method:='TenantParamsGet'
|? _method='sl_TenantParamsGroupGet'
|| _method:='TenantParamsGroupGet'
|? _method='sl_TenantParamsModify'
|| _method:='TenantParamsModify'
|? _method='SL_TENANT_STATS'
|| _method:='TenantStats'
|? _method='BLMT_NOTIFICATION_SEND'
|| _method:='NotificationSend'
|? _method='BLMT_KSEF_TOKEN_FIND'
|| _method:='KsefTokenFind'
|? _method='BLMT_KSEF_TOKEN_MODIFY_INIT'
|| _method:='KsefTokenModifyInit'
|? _method='BLMT_KSEF_TOKEN_MODIFY'
|| _method:='KsefTokenModify'
?};

_method


\is_active
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdza, czy współpraca z Businesslink jest aktywna
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::   WE: [_a] - [0]/1 - czy wyświetlać info w przypadku braku współpracy
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_result:=0;
{? exec('tenant','businesslink3')<>''
|| _result:=1
|| {? _display || FUN.info('Współpraca z usługą Businesslink jest wyłączona.'@) ?}
?};
_result


\tenant
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Identyfikator dzierżawcy
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_TNNT


\login
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: login
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_USR


\password
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: hasło
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_PASS


\api_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url usługi
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_RURL


\oauth_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url autoryzacji
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_OURL


\oauth_scope
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zasięg autoryzacji
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_SCOP


\wadl_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url WADL
::       Zakładamy, że podczytane są wartości do zmiennej XINFO
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_WADL


\abc_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Adres serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_ABCU


\abc_port
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Port serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
XINFO.BL_ABCP


\abc_env
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Środowisko serwera notyfikacji
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.BL_ABCE=''
|| spli_str(XINFO.BL_RURL,'_')[1]
|| XINFO.BL_ABCE
?}


\api_url_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url usługi wewnętrznej
::   WE: _a - wariant usługi 1-dev (domyślnie), 2-test, 3-prod
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _wariant:=_a
|| _wariant:=1
?};

{? _wariant=1
|| 'https://businesslinkapi-dev-dev.abs.assecobs.pl/?dbc=bl_internal_rest'
|| ''
?}


\wadl_url_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Url WADL usługi wewnętrznej
::   WE: _a - wariant usługi 1-dev (domyślnie), 2-test, 3-prod
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _wariant:=_a
|| _wariant:=1
?};

{? _wariant=1
|| 'https://businesslinkapi-dev-dev.abs.assecobs.pl/?dbc=bl_internal_rest&WADL'
|| ''
?}


\is_verbose
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Czy zapisywanie komunikacji do logu systemowego
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',100377)='T'


\timeout
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wartość timeout komunikacji z serwisem
::----------------------------------------------------------------------------------------------------------------------
::XINFO.POR_TOUT
0


\retry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Maksymalna ilość powtórzeń dla pojedynczego uruchomienia
::----------------------------------------------------------------------------------------------------------------------
::XINFO.POR_RETR
0


\pd_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Formuła inicjująca dla przetwarzania danych.
::----------------------------------------------------------------------------------------------------------------------
::exec('MBJAR','#object');
::exec('RAPLS','object');
::exec('__RUB','object');
::exec('__KAL','object');
exec('czytaj','#stalesys',,XINFO);
~~


\client_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodatkowe akcje wykonywane na definicji klienta API
::   WY: 1-ok, 0-coś się nie powiodło
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_client:=_env.Client;
_args:=_env.Param;

:: Dzierżawca
_tenant:=exec('tenant','businesslink3');

:: Do autoryzacji używany jest token OAuth2
_token:=SL_api.token('Businesslink',exec('token_id','businesslink3'));
{? _token=''
|| _result:=0
|| _result:=_client.setAuthenticationOAuth(_token)
?};

:: Podmiana bazowego URL
{? _result=1
||
   _api_url:=exec('api_url','businesslink3');
   _api_uri:=spli_str(_api_url,'?')[1];

   _result:=_client.setBaseUrl(_api_uri)
?};

{? _result=1
||
:: Identyfikator bazy
   _verify:=SL_api.verify_base_id();
   {? _verify=0
   || _desc:='Błąd zgodności identyfikatora bazy danych - komunikacja została wyłączona.';
      exec('mwac_log_error','sync_mwa',_desc);
      KOMM.error(_desc,0);
      _result:=0
   || {? _verify<0 || SL_api.save_base_id() ?};
      _client.addHeaders('X-SL-ID: %1'[SL_api.base_id()])
   ?}
?};

{? _result=1
||
:: Typ zawartości
   _client.addHeaders('Content-Type: %1'['application/json; charset=utf-8']);

:: Identyfikator dzierżawcy
   _client.addHeaders('TenantIdentifier: %1'[_tenant]);

:: Nagłówek z ciasteczkiem sesji
   _cookie:=SL_api.cookie();
   {? _cookie<>'' || _client.addHeaders('Cookie: %1'[_cookie]) ?};

:: Token z serwisu notyfikacyjnego
   _NotificationClientToken:=SL_api.notify_token();
   {? _NotificationClientToken<>''
   || _client.addHeaders('NotificationClientToken: %1'[_NotificationClientToken]);
      _client.addHeaders('NotificationClientEnvironment: %1'[exec('abc_env','businesslink3')])
   ?}
?};
_result


\method_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodatkowe akcje wykonywane na definicji metody API
::   WY: 1-ok, 0-coś się nie powiodło
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_method:=_env.Method;

_result:=1;

_api_url:=exec('api_url','businesslink3');
_api_args:=spli_str(_api_url,'?');
{? var_pres('[2]',_api_args)=type_of('')
|| _api_dbc:=spli_str(_api_args[2],'=')[2];
   {? spli_str(_env.MethodName,':')[1]='BLMT_DOCUMENT_GETINFO'
   || ~~
   || _result:=(_method.addParams('DBC',_api_dbc,'call'))>0
   ?}
?};

_result


\inet_adds
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodatkowe akcje wykonywane na obiekcie INET
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
::_inet:=_env.Inet;

_result:=1;

:: Logowanie "systemowe"
{? exec('is_verbose','businesslink3') || _env.Method.Inet.Object.set_verbose('blmt_api.log') ?};

:: Timeout
_env.Method.Inet.Object.set_opt('TIMEOUT',exec('timeout','businesslink3'));

:: Wyłączenie kontroli certyfikatu SSL
_env.Method.Inet.Object.set_opt('SSL_VERIFYPEER', 0);

_result


\status_notOK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Treść komunikatu o statusie innym niż poprawny
::   WE: _a - status
::       [_b] - dane do sparsowania i uzupełnienia komunikatu
::       [_c] - nagłówek do sparsowania i uzupełnienia komunikatu
::   WY: Opis statusu
::----------------------------------------------------------------------------------------------------------------------
_status:=_a;
_result:='Usługa zwróciła kod: %1.'@[$_status]+'\n';
{? var_pres('_b')=type_of('')
||
:: Jeżeli dane zaczynają się od cydzysłowu, to biorę jako zrozumiały tekst wewnątrz cudzysłowów
   {? 1+_b='"'
   || _result+=utf8_maz(1-_b-1)
:: w przeciwnym wypadku (jak coś jest) biorę wszystko co jest
   |? +_b>0
   || _result+='\n'+_b
:: w przeciwnym wypadku wydłubuję coś z nagłówka
   || {? var_pres('_c')=type_of('')
      || _header:=_c;
         _tab:=spli_str(_header,'\n');
         {! _it:=1 .. obj_len(_tab)
         |! {? 8+_tab[_it]='HTTP/1.1'
            || _result+='\n'+(9-_tab[_it])
            ?}
         !}
      ?}
   ?}
:: Jeżeli dane są w pliku, to biorę wszystko co jest
|? var_pres('_b')=exec('type_of_file','#var')
|| {!
   |? _line:=_b.fread();
      _result+=_line;
      _line<>'\n'
   !}
?};
_result


\tenant_state_awaiting
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status dzierżawcy - oczekujący
::----------------------------------------------------------------------------------------------------------------------
::'Oczekujący'
'Klient zaproszony do usługi'


\tenant_state_active
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status dzierżawcy - aktywny
::----------------------------------------------------------------------------------------------------------------------
::'Aktywny'
'Klient jest w usłudze'


\tenant_state_rejected
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status dzierżawcy - odrzucony
::----------------------------------------------------------------------------------------------------------------------
::'Odrzucony'
'Klient odrzucił zaproszenie'


\tenant_state_suspended
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Status dzierżawcy - wstrzymany
::----------------------------------------------------------------------------------------------------------------------
::'Wstrzymany'
'Klient wstrzymał współpracę'


\tenant_state_disabled
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Status dzierżawcy - wyłączony
::----------------------------------------------------------------------------------------------------------------------
::'Wyłączony'
'Klient wyłączył współpracę'


\relation_state_awaiting
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status relacji - oczekujący
::----------------------------------------------------------------------------------------------------------------------
::'Oczekujący'
'Czekamy na nawiązanie relacji z klientem'


\relation_state_active
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status relacji - aktywny
::----------------------------------------------------------------------------------------------------------------------
::'Aktywny'
'Relacja z klientem nawiązana'


\relation_state_rejected
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status relacji - odrzucony
::----------------------------------------------------------------------------------------------------------------------
::'Odrzucony'
'Klient odrzucił nawiązanie relacji'


\relation_state_suspended
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Status relacji - wstrzymany
::----------------------------------------------------------------------------------------------------------------------
::'Wstrzymany'
'Klient wstrzymał relację'


\relation_state_disabled
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Status relacji - wyłączony
::----------------------------------------------------------------------------------------------------------------------
::'Wyłączony'
'Klient wyłączył relację'


\relation_state_my_suspended
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Status relacji - wstrzymany (przez nas)
::----------------------------------------------------------------------------------------------------------------------
'Relacja z klientem została wstrzymana'


\relation_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Tłumaczy status relacji z usługi na opisowy
::   WE: _a - status relacji klienta z usługi (AWAITING, ACTIVE, REJECTED, SUSPENSED)
::       [_b] - status relacji naszej z usługi (AWAITING, ACTIVE, REJECTED, SUSPENSED)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & _a<>''
|| {? var_pres('_b')=type_of('') & _b<>''
   || {? -_b='suspended'
      || exec('relation_state_my_%1'[-_b],'businesslink3')
      || exec('relation_state_%1'[-_a],'businesslink3')
      ?}
   || exec('relation_state_%1'[-_a],'businesslink3')
   ?}
|| ''
?}


\tenant_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Tłumaczy status dzierżawcy na opisowy
::   WE: _a - status dzierżawcy z usługi (AWAITING, ACTIVE, REJECTED)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & _a<>''
|| exec('tenant_state_%1'[-_a],'businesslink3')
|| ''
?}


\params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parametry współpracy z Businesslink
::   WE: _a [STRING] - określa wywołanie, przy czym:
::          - dla wartości 'access' - wywołuje edycję parametrów dostępu
::          - dla wartości 'oper'   - wywołuje edycję parametrów działania
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of('') & _a<>'' || _a || return() ?};

exec('kst_def','businesslink3');

_cfg:=exec('bl_par_cfg','businesslink3');
_tab:=exec('bl_par_tab','businesslink3',_cfg);

:: Formuły dla pól obsługujących BL_PAR
_formula:="
   {? fld()<3
   || FUN.emsg('Wartość nie może być mniejsza niż 3 MB.'@);
      0
   || 1
   ?}
";
_tab.fld_fml('BL_MAX','AFTER_EDIT',_formula);
_formula:="
   params_exec('params_efld_opt','businesslink3',cur_win(1,1));
   _tab:=params_get().TAB;
   _tab.OCR_CONF:=fld();
   1
";
_tab.fld_fml('OCR_ENAB','AFTER_EDIT',_formula);
_formula:="
   _obj:=params_get().ocr_engines;
   _obj.TAB.prefix();
   _obj.TAB.blank();
   _obj.TAB.KOD:=fld();
   _obj.TAB.find_rec();
   _obj.TAB.win_sel(_obj.WER);
   {? _obj.TAB.select(,1,-1)
   || _obj.TAB.KOD
   || ~~
   ?}
";
_tab.fld_fml('OCR_ENGI','F3',_formula);
_formula:="
   _obj:=params_get().ocr_engines;
   _obj.TAB.prefix(fld(),);
   {? fld()='' | _obj.TAB.first()
   || params_exec('params_efld_opt','businesslink3',cur_win(1,1));
      fld()
   || FUN.info('Błędny kod dostawcy OCR.'@);
      0
   ?}
";
_tab.fld_fml('OCR_ENGI','AFTER_EDIT',_formula);

:: Formuły dla pól w XINFO
_formula:="_val:=params_get().TAB.TNNT; XINFO.BL_TNNT:=_val";
_tab.fld_fml('TNNT','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.NAME; XINFO.BL_NAME:=_val";
_tab.fld_fml('NAME','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.USR; XINFO.BL_USR:=_val";
_tab.fld_fml('USR','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.PASS; XINFO.BL_PASS:=_val";
_tab.fld_fml('PASS','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.RURL; XINFO.BL_RURL:=_val";
_tab.fld_fml('RURL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.OURL; XINFO.BL_OURL:=_val";
_tab.fld_fml('OURL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.SCOPE; XINFO.BL_SCOP:=_val";
_tab.fld_fml('SCOPE','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.WADL; XINFO.BL_WADL:=_val";
_tab.fld_fml('WADL','AFTER_EDIT',_formula);
_formula:="
   _env_internal:=params_get().env_internal;
   _tab:=_env_internal.TAB;
   _tab.prefix(params_get().TAB.ENV,);
   {? params_get().TAB.ENV='' | _tab.first()
   || _val:=params_get().TAB.ENV; XINFO.BL_ENV:=_val
   || FUN.info('Błędny kod środowiska.'@);
      0
   ?}
";
_tab.fld_fml('ENV','AFTER_EDIT',_formula);
_formula:="
   _env_internal:=params_get().env_internal;
   _tab:=_env_internal.TAB;
   _tab.prefix();
   _tab.blank();
   _tab.KOD:=params_get().TAB.ENV;
   _tab.find_rec();
   {? _tab.select(,1,-1)
   || fld(_tab.KOD)
   ?}
";
_tab.fld_fml('ENV','F3',_formula);
_formula:="_val:=params_get().TAB.ABC_URL; XINFO.BL_ABCU:=_val;1";
_tab.fld_fml('ABC_URL','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.ABC_PORT; XINFO.BL_ABCP:=_val;1";
_tab.fld_fml('ABC_PORT','AFTER_EDIT',_formula);
_formula:="_val:=params_get().TAB.ABC_ENV; XINFO.BL_ABCE:=_val;1";
_tab.fld_fml('ABC_ENV','AFTER_EDIT',_formula);

_env:=obj_new('configured'); _env.configured:=0;
params_set(
   'TAB',_tab,
   'env',_env,
   'cfg',_cfg,
   'env_internal',exec('env_internal','businesslink3'),
   'ocr_engines',exec('ocr_engines','businesslink3')
);

($('params_exec(\'param_%1\',\'%2\')'[_mode,spli_str(form_stack(0).file,'.')[1]]))()


\param_access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Tworzy i wyświetla okno redakcji parametrów związanych z dostępem do usługi
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_par:=params_get();
_tab:=_par.TAB;
_cfg:=_par.cfg;
_env:=_par.env;

_red:=XINFO.mk_edit('Dostęp do portalu'@,0,'xinfoqblink_p1',5,7,'','');

_szer:=80;
XINFO.win_esep(_red,'Parametry podstawowe'@);
XINFO.win_efld(_red,_tab,'TNNT','','',_szer-4,0,0,'Identyfikator dzierżawcy'@,0,'',,'');
_fbtn1:=XINFO.fld_ebtn(_red,'text="%1"'[' …'],"params_exec('GetConfigBL','businesslink3')");
XINFO.btn_eopt(_red,_fbtn1,'tooltip="%1"'['Pobiera konfigurację usługi sieciowej z pliku konfig.'@]);
XINFO.efld_opt(_red,'mark=1',_tab,'TNNT');
XINFO.win_efld(_red,_tab,'NAME','','',_szer,0,0,'Nazwa dzierżawcy'@,0,'',,'');
XINFO.efld_opt(_red,'mark=0',_tab,'USR');
XINFO.win_efld(_red,_tab,'USR','','',_szer,0,0,'Użytkownik'@,0,'',,'');
XINFO.efld_opt(_red,'mark=1',_tab,'USR');
XINFO.win_efld(_red,_tab,'PASS','','',_szer,0,0,'Hasło'@,0,'','password','');
XINFO.efld_opt(_red,'mark=1',_tab,'PASS');
XINFO.win_efld(_red,_tab,'RURL',,,_szer);
XINFO.efld_opt(_red,'mark=1',_tab,'RURL');
XINFO.win_efld(_red,_tab,'OURL',,,_szer);
XINFO.efld_opt(_red,'mark=1',_tab,'OURL');
XINFO.win_efld(_red,_tab,'SCOPE',,,_szer);
XINFO.efld_opt(_red,'mark=1',_tab,'SCOPE');
XINFO.win_efld(_red,_tab,'WADL',,,_szer);
XINFO.efld_opt(_red,'mark=1',_tab,'WADL');
XINFO.win_efld(_red,_tab,'ENV',,,_szer-3,,,,,,,'F3_button=1');

::{? exec('runtime_dro','#system')
::|| _formula:="params_exec('autoconfig','businesslink3')";
::   XINFO.win_ebtn(_red,'text=%1,panel=bottom,align=begin'['Autokonfiguracja'@],_formula)
::?};
_formula:="
   {? XINFO.BL_TNNT=''
   || FUN.emsg(
         'Nie można wyświetlić informacji o usłudze.\n'
         'Dostęp do portalu %1 nie został skonfigurowany.'@['Businesslink']
      )
   || _my_buf:=exec('obj_new','#buf','XINFO');
      _my_buf.get();
      exec('czytaj','#stalesys',,XINFO,'BL_TNNT','BL_NAME','BL_USR','BL_PASS','BL_RURL','BL_OURL','BL_SCOPE','BL_WADL','BL_ENV');
      _org_buf:=exec('obj_new','#buf','XINFO');
      _org_buf.get();
      _my_buf.set();
      exec('zapisz','#stalesys',1,XINFO,'BL_TNNT','BL_NAME','BL_USR','BL_PASS','BL_RURL','BL_OURL','BL_SCOPE','BL_WADL','BL_ENV');
      exec('ServiceInfo','businesslink3',1);
      _org_buf.set();
      exec('zapisz','#stalesys',1,XINFO,'BL_TNNT','BL_NAME','BL_USR','BL_PASS','BL_RURL','BL_OURL','BL_SCOPE','BL_WADL','BL_ENV');
      _my_buf.set()
   ?};
   ''
";
XINFO.win_ebtn(_red,'text=%1,panel=bottom,align=begin'['Informacje o usłudze'@],_formula);
exec('ok_esc','#window',XINFO,_red);

exec('czytaj','#stalesys',,XINFO);
exec('conf_czytaj','businesslink3');

exec('params_efld_opt','businesslink3',_red);

_ae:="__CHK.record(params_get().TAB,,'TNNT','USR','PASS','RURL','OURL','SCOPE','WADL')";
{? exec('edytuj','#stalesys',XINFO,_red,_ae,1)<>date(0,0,0)
||
::   exec('bl_par_save','businesslink3',_cfg,_tab);
   _ok:=1;
:: Sprawdzenie konfiguracji - wywołanie ServiceInfo (do skutku, nie wiecej niż 10 razy)
   {? _env.configured
   || _ok:=0;
      _it:=0;
      _size:=10;
      FUN.prg_start(_size,'Trwa sprawdzanie konfiguracji usługi.'@,,,0);
      {!
      |? _it+=1;
         FUN.prg_next(1);
         _result:=exec('ServiceInfo','businesslink3',0);
         {? _result.STATUS=1
         || _ok:=1
         || delay(1)
         ?};
         obj_del(_result);
         _ok=0 & _it<=_size
      !};
      FUN.prg_stop();
      {? _ok=0
      || FUN.emsg('Nie udało się poprawnie skontaktować z usługą.'@)
      ?}
   ?};
:: Zapisanie parametrów specyficznych dla Businesslink (tylko wybrane opcje)
::   {? _ok
::   || _result:=exec('TenantParamsModify','businesslink3');
::      {? _result.STATUS=0
::      || FUN.emsg('Parametry portalu nie zostały zaktualizowane.'@)
::      ?}
::   ?};
   ~~
?};
~~


\param_oper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Tworzy i wyświetla okno redakcji parametrów związanych z działaniem usługi
::----------------------------------------------------------------------------------------------------------------------
exec('param_oper_select','businesslink3');
return();

params_set(params_get());
_par:=params_get();
_tab:=_par.TAB;
_cfg:=_par.cfg;
_env:=_par.env;

exec('czytaj','#stalesys',,XINFO);
{? XINFO.BL_TNNT=''
|| FUN.emsg(
      'Nie można redagować parametrów działania.\n'
      'Dostęp do portalu %1 nie został skonfigurowany.'@['Businesslink']
   );
   return()
?};

_red:=XINFO.mk_edit('Parametry działania'@,0,'xinfoqblink_p2',5,7,'','');

_szer:=54;
XINFO.win_esep(_red,'Parametry techniczne'@);
::XINFO.win_efld(_red,,'BL_INVAL',,,,,,,,,'check-box',
::   'check_label="%1"'['Tak, dostępne jest unieważnianie pobranych dokumentów.'@],"1","0"
::);
XINFO.win_efld(_red,_tab,'BL_MAX',,,_szer,3);
XINFO.win_esep(_red,'Zarządzanie przerwami serwisowymi'@);
XINFO.win_efld(_red,_tab,'S_T_MSG',,,_szer);
XINFO.win_esep(_red,'Integracja z KSeF'@);
XINFO.win_efld(_red,_tab,'KSEF_ON',,,_szer,,,'Integracja włączona'@,,,'check-box',
   'check_label="%1"'['Tak, integracja z Krajowym Rejestrem Faktur (KSeF) włączona'@],"'1'","'0'"
);
XINFO.win_efld(_red,_tab,'KSEF_DWN',,,_szer,,,'Pobieranie dokumentów'@,,,'check-box',
   'check_label="%1"'['Tak, automatyczne pobieranie dokumentów z KSeF włączone'@],"'1'","'0'"
);
XINFO.win_esep(_red,'Integracja z OCR'@);
XINFO.win_efld(_red,_tab,'OCR_ENAB',,,_szer,,,'Włączony'@,,,'check-box',
   'check_label="%1"'['Tak, używać modułu OCR dla dokumentów przychodzących'@],"'1'","'0'"
);
::XINFO.win_efld(_red,_tab,'OCR_CONF',,,_szer,,,'Skonfigurowany'@,,,'check-box',
::   'check_label="%1"'['Tak, umożliwić włączenie OCR'@],"'1'","'0'"
::);
XINFO.win_efld(_red,_tab,'OCR_ENGI',,,_szer-3,,,'Dostawca'@,,,,'F3_button=1');
XINFO.win_efld(_red,_tab,'OCR_COMP',,,_szer,,,'Identyfikator firmy'@);
XINFO.win_efld(_red,_tab,'OCR_USER',,,_szer,,,'Użytkownik'@);
XINFO.win_efld(_red,_tab,'OCR_PASS',,,_szer,,,'Hasło'@,,,'password');

exec('ok_esc','#window',XINFO,_red);

exec('TenantParamsGet','businesslink3',0);
exec('conf_czytaj','businesslink3');

exec('params_efld_opt','businesslink3',_red);

_ae:="
   _max_size:=30;
   _tab:=params_get().TAB;
   _chk:='';
   {? _chk='' & #_tab.OCR_ENAB
   || {? _tab.OCR_ENGI=exec('ocr_engine_abs','businesslink3')
      || _chk:=__CHK.record(_tab,,'OCR_ENGI')
      || _chk:=__CHK.record(_tab,,'OCR_ENGI','OCR_COMP','OCR_USER','OCR_PASS')
      ?}
   ?};
   {? _chk='' & _tab.BL_MAX>_max_size
   || FUN.info('Maksymalny rozmiar załączników nie może być większy niż %1 MB.'@[$_max_size]);
      _chk:='BL_MAX'
   ?};
   _chk
";
{? exec('edytuj','#stalesys',XINFO,_red,_ae,1)<>date(0,0,0)
||
:: Czyszczenie niektórych pól, jeśli ABS
   {? _tab.OCR_ENGI=exec('ocr_engine_abs','businesslink3')
   || _tab.OCR_COMP:=_tab.OCR_USER:=_tab.OCR_PASS:=''
   ?};
   exec('bl_par_save','businesslink3',_cfg,_tab);
:: Zapisanie parametrów specyficznych dla Businesslink (tylko wybrane opcje)
   _result:=exec('TenantParamsModify','businesslink3');
   {? _result.STATUS=0
   || FUN.emsg('Parametry portalu nie zostały zaktualizowane.'@)
   ?};
   ~~
?};
~~


\autoconfig
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zakłada i pobiera automatycznie konfigurację dla bieżącej firmy (w okienku parametrów)
::   WY: 'key:F2' jeżeli konfiguracja została wgrana
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_result:='';

{? exec('chk_run_mwac','sync_mwa',exec('sync_pd_internal','businesslink3'),'SL_TENANT_ADD')
||
   _choice:=FUN.choice(
     'Jeżeli firma została zaproszona do Businesslink, to wybierz opcję \'Znajdź dzierżawcę\'.\n'
     '\n'
     'Jeżeli chcesz stworzyć nową integrację, to wybierz opcję \'Dodaj dzierżawcę\'.\n'
     'Zostanie wtedy przeprowadzony proces automatycznej konfiguracji dostępu firmy do portalu Businesslink.\n'
     '\n'
     'Po potwierdzeniu konfiguracji należy wykonać funkcję inicjowania systemu.\n\n'
     'Czy kontynuować?'@,,
     'Znajdź dzierżawcę'@,'Dodaj dzierżawcę'@
   );
   {? _choice=1
   || _res:=exec('find_company','businesslink3');
      {? var_pres('res',_res)>100 &
         var_pres('DETAILS',_res.res)>100 &
         var_pres('CFG_FILE',_res.res.DETAILS)=exec('type_of_file','#var')
      || {? exec('GetConfigBL','businesslink3',_res.res.DETAILS.CFG_FILE.copy('ur'))
         || params_get().TAB.ENV:=XINFO.BL_ENV:=_res.ENV;
            params_get().env.configured:=1;
            _result:='key:F2'
         ?}
      ?}
   |? _choice=2
   || _res:=exec('add_company','businesslink3');
      {? var_pres('res',_res)>100 &
         var_pres('DETAILS',_res.res)>100 &
         var_pres('CFG_FILE',_res.res.DETAILS)=exec('type_of_file','#var')
      || {? exec('GetConfigBL','businesslink3',_res.res.DETAILS.CFG_FILE.copy('ur'))
         || params_get().TAB.ENV:=XINFO.BL_ENV:=_res.ENV;
            params_get().env.configured:=1;
            _result:='key:F2'
         ?}
      ?}
   ?}
?};

_result


\GetConfigBL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobiera konfigurację z pliku konfiguracyjnego i zachowuje w polach XINFO
::   WE: [_a] - plik konfiguracyjny (obiekt plikowy), jeżeli brak, to wyświetlony będzie dialog wyboru pliku
::   WY: 0/1 czy udało się wgrać konfigurację
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_result:=0;

:: Zakładam folder tymczasowy na serwerze do którego wgrany zostanie plik z terminala
_tmp_dir:=fmk_tmp_dir(0);
{? type_of(_tmp_dir)<>type_of(~~)
|| _pth:=_tmp_dir.get_path();
   {? var_pres('_a')=exec('type_of_file','#var')
   || _file:=_a
   || _sep:=exec('sep','#file',2);
      _filepath:=_pth+_sep+$SYSLOG.tm_stamp()+'.xml';
      _upload_res:=dlg_upload(_filepath,0,'.xml',0);

      {? type_of(_upload_res)=type_of('')
      || {? _upload_res<>''
         || _file:=fopen(_filepath,'ur',0,,1)
         || FUN.emsg('Nie udało się zapisać pliku konfiguracyjnego po stronie serwera.'@)
         ?}
      ?}
   ?};

   {? var_pres('_file')=exec('type_of_file','#var')
   ||
      _cfg:=obj_new(
         'Name','Identifier','Login','Password','API_REST_Url','API_OAUTH_Url','API_OAUTH_Scope','API_REST_WADL_Url',
         'Address','Port','EnvironmentId'
      );
      _names:=obj_ntab_names(_cfg);

      {? _file.is_open()
      || _tab:=xml_tparse(_file);
         _ndx:=_tab.ndx_tmp(,,'NAME',,);
         _tab.index(_ndx);
         {! _it:=1.. obj_len(_names)
         |! _tab.prefix(_names[_it],);
            {? _tab.first()
            || ($('_a.'+_names[_it]))(_cfg):=_tab.VAL
            ?}
         !}
      ?};
      {? var_pres('Name',_cfg)=type_of('') & _cfg.Name<>'' &
         var_pres('Identifier',_cfg)=type_of('') & _cfg.Identifier<>'' &
         var_pres('Login',_cfg)=type_of('') & _cfg.Login<>'' &
         var_pres('Password',_cfg)=type_of('') & _cfg.Password<>'' &
         var_pres('API_REST_Url',_cfg)=type_of('') & _cfg.API_REST_Url<>'' &
         var_pres('API_OAUTH_Url',_cfg)=type_of('') & _cfg.API_OAUTH_Url<>'' &
         var_pres('API_OAUTH_Scope',_cfg)=type_of('') & _cfg.API_OAUTH_Scope<>'' &
         var_pres('API_REST_WADL_Url',_cfg)=type_of('') & _cfg.API_REST_WADL_Url<>''
      || {? {? _cfg.API_REST_Url*'businesslink'=0 | _cfg.API_REST_WADL_Url*'businesslink'=0
            || FUN.emsg('Wskazany plik konfiguracyjny najprawdopodobniej nie pochodzi z portalu Businesslink.'@)
            ?};
            FUN.ask('Czy wpisać dane konfiguracyjne dla dzierżawcy: %1?'@[_cfg.Name])
         || XINFO.BL_TNNT:=_cfg.Identifier;
            XINFO.BL_NAME:=_cfg.Name;
            XINFO.BL_USR:=_cfg.Login;
            XINFO.BL_PASS:=_cfg.Password;
            XINFO.BL_RURL:=_cfg.API_REST_Url;
            XINFO.BL_OURL:=_cfg.API_OAUTH_Url;
            XINFO.BL_SCOP:=_cfg.API_OAUTH_Scope;
            XINFO.BL_WADL:=_cfg.API_REST_WADL_Url;
            {? var_pres('Name',_cfg)=type_of('') & _cfg.Name<>'' &
               var_pres('EnvironmentId',_cfg)=type_of('') & _cfg.EnvironmentId<>''
            || XINFO.BL_ABCU:=_cfg.Address;
               XINFO.BL_ABCE:=_cfg.EnvironmentId
            || XINFO.BL_ABCU:='';
               XINFO.BL_ABCE:=''
            ?};
            exec('conf_czytaj','businesslink3');
            _result:=1;
            win_disp()
         ?}
      || FUN.emsg('Podano błędny plik konfiguracyjny.'@)
      ?}
   ?}
|| FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@)
?};
_result


\conf_czytaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Odczytuje dane konfiguracyjne z XINFO i BL_PAR do tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_tab:=_par.TAB;
_tab.TNNT:=XINFO.BL_TNNT;
_tab.NAME:=XINFO.BL_NAME;
_tab.USR:=XINFO.BL_USR;
_tab.PASS:=XINFO.BL_PASS;
_tab.RURL:=XINFO.BL_RURL;
_tab.OURL:=XINFO.BL_OURL;
_tab.SCOPE:=XINFO.BL_SCOP;
_tab.WADL:=XINFO.BL_WADL;
_tab.ENV:=XINFO.BL_ENV;
_tab.ABC_URL:=XINFO.BL_ABCU;
_tab.ABC_PORT:=XINFO.BL_ABCP;
_tab.ABC_ENV:=XINFO.BL_ABCE;

_cfg:=_par.cfg;
exec('bl_par_init','businesslink3',_cfg);
_firma:=exec('ref_firma','ustawienia');

BL_PAR.cntx_psh();
BL_PAR.index('SYMBOL');
BL_PAR.prefix(_firma);
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>''
   || _val:={? BL_PAR.find_key(_cfg[_lp].SYMBOL,) || BL_PAR.WARTOSC || _cfg[_lp].WARTOSC ?};
      ($('_a.%1:=_b' [_names[_lp]]))(_tab,_cfg[_lp].get(_val))
   ?}
!};
BL_PAR.cntx_pop();

~~


\sync_pd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod przeznaczenia danych
::----------------------------------------------------------------------------------------------------------------------
'BLMT'


\sync_pd_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Kod przeznaczenia danych - serwis wewnętrzny
::----------------------------------------------------------------------------------------------------------------------
'BLMT_INTERNAL'


\manager
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uruchamia klienta MacroWebAPI z załadowanym WADL
::   WE: [_a] - czy zapisać plik MWAC (bez uruchamiania menadżera)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _save:=_a
|| _save:=0
?};

exec('czytaj','#stalesys',,XINFO);
{? exec('is_active','businesslink3',1)
|| {? _save
   || exec('manager','__mwac',
         'load_url',exec('wadl_url','businesslink3'),
         'oauth',SL_api.token('Businesslink',exec('token_id','businesslink3')),,
         'TenantIdentifier: %1\nX-SL-ID: %2'[exec('tenant','businesslink3'),exec('base_id','#system')],
         'save','blmt',1,
         'exit'
      )
   || params_set('LogCustomFilterFormula',"exec('mwac_log_search','#mwac')");
      exec('manager','__mwac',
         'load_url',exec('wadl_url','businesslink3'),
         'oauth',SL_api.token('Businesslink',exec('token_id','businesslink3')),,
         'TenantIdentifier: %1\nX-SL-ID: %2'[exec('tenant','businesslink3'),exec('base_id','#system')]
      )
   ?}
?};
~~


\manager_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uruchamia klienta MacroWebAPI z załadowanym WADL dla usługi wewnętrznej
::----------------------------------------------------------------------------------------------------------------------
params_set('LogCustomFilterFormula',"exec('mwac_log_search','#mwac')");
exec('manager','__mwac','load_url',
   exec('wadl_url_internal','businesslink3'),'oauth',
   SL_api.token('Internal','blmt'+SYSLOG.ses_id())
);
~~


\clear
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Czyści w bazie informacje powiązane z portalem Businesslink3
::       Używane np. podczas przechodzenia z portalu testowego na produkcyjny
::  OLD: \clear/businesslink.fml
::   WY: 0/1 - czy system został zainicjowany
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

{? exec('is_active','businesslink3',1)
||
   _choice:=FUN.multichoice(
      'Czy zainicjować współpracę z Businesslink?\n\n'
      'Uwaga:\n'
      'W przypadku wersji wielofirmowej funkcję należy uruchomić w każdej firmie.'@,,,,
      ,'text=%1;selected=T'['Zostaną usunięte identyfikatory w kartotece kontrahentów.'@]
      ,'text=%1;selected=T'['Zostaną wyzerowane znaczniki współpracy z Businesslink z kartoteki kontrahentów.'@]
      ,'text=%1;selected=T'['Zostaną usunięte znaczniki pobrania i wysłania dokumentów.'@]
      ,'text=%1;selected=T'['Zostanie wymuszone pobranie wszystkich dokumentów (inicjowanie transmisji).'@]
      ,'text=%1;selected=T'['Zostanie wymuszone pobranie wszystkich partnerów (inicjowanie transmisji).'@]
   );

   {? +_choice[1]>0
   ||
::    Usunięcie identyfikatorów powiązanych z KH
      {? +_choice[2]>0
      ||
         KH.cntx_psh();
         KH.prefix();
         _formula:="
            exec('del_rek','#sync_id','BL_KH_ID',KH.uidref())
         ";
         KH.for_each(_formula);
         KH.cntx_pop()
      ?};

::    Usunięcie znaczników współpracy z Businesslink
      {? +_choice[3]>0
      ||
         KH.cntx_psh();
         KH.prefix();
         _formula:="
            _put:=0;
            {? KH.BL_STAT<>'' || KH.BL_STAT:=''; _put:=1 ?};
            {? _put || KH.put() ?}
         ";
         KH.for_each(_formula);
         KH.cntx_pop();

         KH_DOD.cntx_psh();
         KH_DOD.prefix();
         _formula:="
            _put:=0;
            {? KH_DOD.EFAKTURA='B' || KH_DOD.EFAKTURA:='N'; _put:=1 ?};
            {? KH_DOD.BL_INCL='T' || KH_DOD.BL_INCL:='N'; _put:=1 ?};
            {? KH_DOD.BL_STAT<>'' || KH_DOD.BL_STAT:=''; _put:=1 ?};
            {? KH_DOD.BL_MKODK<>'' || KH_DOD.BL_MKODK:=''; _put:=1 ?};
            {? _put || KH_DOD.put() ?}
         ";
         KH_DOD.for_each(_formula);
         KH_DOD.cntx_pop()
      ?};

      {? +_choice[4]>0
      ||
         DOKUM.cntx_psh();
         DOKUM.prefix();
         _formula:="
            {? DOKUM.BL='T' & DOKUM.FIRMA=REF.FIRMA
            || DOKUM.BSEND:='N';
               DOKUM.RECEIVED:='N';
               _pos:=DOKUM.SW*^160;
               {? _pos>0 || DOKUM.SW:=_pos+DOKUM.SW ?};
               DOKUM.BL_GUID:='';
               {? DOKUM.RODZAJ_K='W'
               || DOKUM.BL_STAT:=exec('ready_to_send','zbl_stat')
               || DOKUM.BL_STAT:=exec('ready_to_registration','zbl_stat')
               ?};
               exec('current_stage','zbl');
               DOKUM.BL_VISIB:='T';
               {? DOKUM.RODZAJ_K='P'
               || {? 3+DOKUM.BL_TYPE='INV' | DOKUM.BL_TYPE='DOC'
                  || DOKUM.BL_VDZK:='T'
                  ?};
                  {? DOKUM.BL_TYPE='ORD' | DOKUM.BL_TYPE='DOC'
                  || DOKUM.BL_VORD:='T'
                  ?}
               ?};
               DOKUM.put()
            ?}
         ";
         DOKUM.for_each(_formula);
         DOKUM.cntx_pop();

         DOKUMZ.cntx_psh();
         DOKUMZ.prefix();
         _formula:="
            {? DOKUMZ.BL_GUID<>''
            || DOKUMZ.BL_GUID:='';
               DOKUMZ.put()
            ?}
         ";
         DOKUMZ.for_each(_formula);
         DOKUMZ.cntx_pop()
      ?};

      {? +_choice[5]>0
      ||
         KOMM.init(,,'Inicjowanie współpracy z Businesslink'@);
         exec('default_tmstamp','businesslink3',0);
         KOMM.select()
      ?};

      {? +_choice[6]>0
      ||
         KOMM.init(,,'Inicjowanie współpracy z Businesslink'@);
         exec('default_tpstamp','businesslink3',0);
         KOMM.select()
      ?};

      _result:=1
   ?}
?};
_result


\default_tmstamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Ustala domyślną wartość znaczników czasowych ostatniej synchronizacji dokumentów
::  OLD: \default_tmstamp/businesslink.fml
::   WE: [_a] - dialog (0/[1])
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(0) || _a || 1 ?};

{? exec('is_active','businesslink3',_dialog)
|| {? ~_dialog |
      FUN.ask(
         'Czy wyzerować znaczniki czasowe ostatniej synchronizacji dokumentów?\n\n'
         'Uwaga: Kolejne wywołanie funkcji odebrania informacji z portalu Businesslink\n'
         'spowoduje odczytanie informacji o wszystkich dokumentach.'@
      )
   || XINFO.BL_TM:=XINFO.BL_TM_O:=XINFO.BL_TM_W:=iso_datetime_value(date(1900,1,1),time(0,0,0));
      XINFO.BL_ID_O:=XINFO.BL_ID_W:='';
      exec('zapisz','#stalesys',1,XINFO,'BL_TM','BL_TM_O','BL_TM_W','BL_ID_O','BL_ID_W')
   ?}
?};
~~


\default_tpstamp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Ustala domyślną wartość znacznika czasowego ostatniej synchronizacji partnerów
::   WE: [_a] - dialog (0/[1])
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(0) || _a || 1 ?};

{? exec('is_active','businesslink3',_dialog)
|| {? ~_dialog |
      FUN.ask(
         'Czy wyzerować znacznik czasowy ostatniej synchronizacji partnerów?\n\n'
         'Uwaga: Kolejne wywołanie funkcji odebrania informacji z portalu Businesslink\n'
         'spowoduje odczytanie informacji o wszystkich partnerach.'@
      )
   || XINFO.BL_TP:=iso_datetime_value(date(1900,1,1),time(0,0,0));
      exec('zapisz','#stalesys',1,XINFO,'BL_TP')
   ?}
?};
~~


\check_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdzenie stanu kontrahenta w usłudze
::----------------------------------------------------------------------------------------------------------------------
KH_DOD.cntx_psh();
exec('kh_dod_ini','kontrahent',KH.ref(),1);

_nip:=exec('kh_nip','businesslink3',KH.ref()).NIP;

{? KH.P=1
|| FUN.info('Kontrahent potencjalny — nie można sprawdzić stanu kontrahenta w usłudze Businesslink.'@)
|? KH.TYP='U' & _nip=''
|| FUN.info(
      'Kontrahent unijny nie posiada domyślnego NIP UE — '
      'nie można sprawdzić stanu kontrahenta w usłudze Businesslink.'@
   )
|? _nip=''
|| FUN.info('Kontrahent nie posiada NIP — nie można sprawdzić stanu kontrahenta w usłudze Businesslink.'@)
|? KH_DOD.BL_STAT=exec('relation_state_my_suspended','businesslink3')
|| FUN.info(
      'Relacja z klientem została wstrzymana — nie można sprawdzić stanu kontrahenta.\n\n'
      'Aby zweryfikować obecny status, należy użyć funkcji aktualizacji kontrahentów '
      'dostępnej w obszarze Administracja.'@
   )
||
:: Sprawdzenie, czy inny kontrahent o tym samym NIP jest już zarejestrowany w usłudze
   {? ~exec('kh_nip_registered','businesslink3',KH.ref(),1)
   || exec('PartnerFind','businesslink3',KH_DOD.ref(),1)
   ?}
?};

KH_DOD.cntx_pop();
~~


\check_kh_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdzenie stanu kontrahenta w usłudze - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
FUN.info(
   'Sprawdzenie stanu w usłudze Businesslink dla zaznacznych kontrahentów nie jest dostępne.\n\n'
   'Aby zweryfikować obecny status, należy użyć funkcji aktualizacji kontrahentów '
   'dostępnej w obszarze Administracja.'@);
0


\check_kh_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Sprawdzenie stanu kontrahenta w usłudze - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
~~


\add_company
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dodaje bieżącą firmę w portalu (funkcja wewnętrzna)
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'ENV','STRING[20]','Środowisko'@
   ,'NIP','STRING[20]','NIP'@
   ,'SKROT','STRING[100]','Nazwa skrócona'
   ,'NAZWA','STRING[100]','Nazwa pełna'@
   ,'FNAME','STRING[100]','Imię'@
   ,'SNAME','STRING[100]','Nazwisko'@
   ,'MAIL','STRING[100]','E-mail'@
   ,'LANG','STRING[2]','Język'@
   ,'CFNAME','STRING[100]','Imię'@
   ,'CSNAME','STRING[100]','Nazwisko'@
   ,'CMAIL','STRING[100]','E-mail'@
   ,'CLANG','STRING[2]','Język'@
);

_formula:="
   _tab:=params_get().env.TAB;
   _tab.prefix();
   {? _tab.select()
   || _tab.KOD
   || ~~
   ?}
";
_tab.fld_fml('ENV','F3',_formula);

_formula:="
   _result:=1;
   {? fld()<>''
   || _tab:=params_get().env.TAB;
      _tab.prefix(fld(),);
      {? ~_tab.first()
      || FUN.info('Niepoprawne środowisko: %1'@[fld()]);
         _result:=0
      ?}
   ?};
   _result
";
_tab.fld_fml('ENV','AFTER_EDIT',_formula);

_formula:="
   _choice:=FUN.choice('Wybierz domyślny język'@,,'PL','EN');
   {? _choice=1
   || fld('PL')
   |? _choice=2
   || fld('EN')
   ?}
";
_tab.fld_fml('LANG','F3',_formula);
_tab.fld_fml('CLANG','F3',_formula);

_formula:="
   {? fld()='PL' | fld()='EN'
   || 1
   || FUN.info('Podaj domyślny język: %1, %2.'@['PL','EN']);
      0
   ?}
";
_tab.fld_fml('LANG','AFTER_EDIT',_formula);
_tab.fld_fml('CLANG','AFTER_EDIT',_formula);

exec('czytaj','#stalesys',,XINFO,'NIP');
exec('czytaj','#stalesys',,KST,'SKROT','NAZWA');
_tab.blank();
_tab.NIP:=XINFO.NIP;
_tab.SKROT:=KST.SKROT;
_tab.NAZWA:=KST.NAZWA;
_tab.LANG:='PL';
_tab.CLANG:='PL';

_width:=60;
_red:=_tab.mk_edit('Dołącz partnera w Businesslink'@,,'companyblink');
_tab.win_esep(_red,'Środowisko'@);
_tab.win_efld(_red,,'ENV',,,_width-3,,,,,,,'F3_button=1');
_tab.win_esep(_red,'Dane kontrahenta'@);
_tab.win_efld(_red,,'NIP',,,_width);
_tab.win_efld(_red,,'SKROT',,,_width);
_tab.win_efld(_red,,'NAZWA',,,_width);
_tab.win_esep(_red,'Dane administratora klienta'@);
_tab.win_efld(_red,,'CFNAME',,,_width);
_tab.win_efld(_red,,'CSNAME',,,_width);
_tab.win_efld(_red,,'CMAIL',,,_width);
_tab.win_efld(_red,,'CLANG',,,3,,,,,,,'F3_button=1');
_tab.win_esep(_red,'Dane administratora ABS'@);
_tab.win_efld(_red,,'FNAME',,,_width);
_tab.win_efld(_red,,'SNAME',,,_width);
_tab.win_efld(_red,,'MAIL',,,_width);
_tab.win_efld(_red,,'LANG',,,3,,,,,,,'F3_button=1');
exec('ok_esc','#window',_tab,_red);
_tab.efld_opt(_red,'mark=1',_tab,'ENV');
_tab.efld_opt(_red,'mark=1',_tab,'NIP');
_tab.efld_opt(_red,'mark=1',_tab,'SKROT');
_tab.efld_opt(_red,'mark=1',_tab,'NAZWA');
_tab.efld_opt(_red,'mark=1',_tab,'CFNAME');
_tab.efld_opt(_red,'mark=1',_tab,'CSNAME');
_tab.efld_opt(_red,'mark=1',_tab,'CMAIL');
_tab.efld_opt(_red,'mark=1',_tab,'FNAME');
_tab.efld_opt(_red,'mark=1',_tab,'SNAME');
_tab.efld_opt(_red,'mark=1',_tab,'MAIL');
_tab.win_edit(_red);

_env:=exec('env_internal','businesslink3');
params_set('env',_env);

_result:=obj_new('res','ENV');
_result.ENV:='';
{? _tab.edit("__CHK.record(cur_tab(1,1),,'ENV','NIP','SKROT','NAZWA','FNAME','SNAME','MAIL')")
|| _result.ENV:=_tab.ENV;
   _env.TAB.prefix(_tab.ENV,);
   {? _env.TAB.first()
   || _url:=_env.TAB.URL
   || _url:=''
   ?};
   _result.res:=exec('TenantAdd','sl_api'
      ,exec('sync_pd_internal','businesslink3')
      ,_url
      ,_tab.NIP
      ,_tab.SKROT
      ,_tab.NAZWA
      ,_tab.MAIL
      ,_tab.FNAME
      ,_tab.SNAME
      ,_tab.LANG
      ,_tab.CMAIL
      ,_tab.CFNAME
      ,_tab.CSNAME
      ,_tab.CLANG
      ,1
   )
|| _result.res:=exec('parse_result','businesslink3')
?};
_result


\find_company
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wyszukuje bieżącą firmę w portalu (funkcja wewnętrzna)
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'ENV','STRING[20]','Środowisko'@
   ,'NIP','STRING[20]','NIP'@
);

_formula:="
   _tab:=params_get().env.TAB;
   _tab.prefix();
   {? _tab.select()
   || _tab.KOD
   || ~~
   ?}
";
_tab.fld_fml('ENV','F3',_formula);

_formula:="
   _result:=1;
   {? fld()<>''
   || _tab:=params_get().env.TAB;
      _tab.prefix(fld(),);
      {? ~_tab.first()
      || FUN.info('Niepoprawne środowisko: %1'@[fld()]);
         _result:=0
      ?}
   ?};
   _result
";
_tab.fld_fml('ENV','AFTER_EDIT',_formula);

exec('czytaj','#stalesys',,XINFO,'NIP');
exec('czytaj','#stalesys',,KST,'SKROT','NAZWA');
_tab.blank();
_tab.NIP:=XINFO.NIP;

_width:=60;
_red:=_tab.mk_edit('Wyszukaj partnera w Businesslink'@,,'fcompanyblink');
_tab.win_esep(_red,'Środowisko'@);
_tab.win_efld(_red,,'ENV',,,_width-3,,,,,,,'F3_button=1');
_tab.win_esep(_red,'Dane kontrahenta'@);
_tab.win_efld(_red,,'NIP',,,_width);
exec('ok_esc','#window',_tab,_red);
_tab.efld_opt(_red,'mark=1',_tab,'ENV');
_tab.efld_opt(_red,'mark=1',_tab,'NIP');
_tab.win_edit(_red);

_env:=exec('env_internal','businesslink3');
params_set('env',_env);

_result:=obj_new('res','ENV');
_result.ENV:='';
{? _tab.edit("__CHK.record(cur_tab(1,1),,'ENV','NIP')")
|| _result.ENV:=_tab.ENV;
   _env.TAB.prefix(_tab.ENV,);
   {? _env.TAB.first()
   || _url:=_env.TAB.URL
   || _url:=''
   ?};
   _result.res:=exec('TenantFind','sl_api'
      ,exec('sync_pd_internal','businesslink3')
      ,_url
      ,_tab.NIP
      ,1
   )
|| _result.res:=exec('parse_result','businesslink3')
?};
_result


\invite_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysłanie zaproszenia kontrahentowi do usługi
::----------------------------------------------------------------------------------------------------------------------
KH_DOD.cntx_psh();

:: Ustalenie NIP: domyślnego NIP UE, o ile jest dostępny albo NIP krajowy
_kh_nip:=exec('kh_nip','businesslink3',KH.ref());
_nip:=_kh_nip.NIP;
_nip_ue:=_kh_nip.UE;

{? KH.P=1
|| FUN.info('Kontrahent potencjalny — nie można nawiązać relacji w Businesslink.'@)
|? KH.TYP='U' & _nip=''
|| FUN.info('Kontrahent unijny nie posiada domyślnego NIP UE — nie można nawiązać relacji w Businesslink.'@)
|? _nip=''
|| FUN.info('Kontrahent nie posiada NIP — nie można nawiązać relacji w Businesslink.'@)
|? _nip_ue=0 & regex_match(_nip,'^\\d{10}$')[1]=0
|| FUN.info('Niepoprawny NIP — nie można nawiązać relacji w Businesslink.'@)
||
   exec('kh_dod_ini','kontrahent',KH.ref(),1);

   KOMM.init(,,'Sprawdzenie kontrahenta w usłudze Businesslink'@);
:: Sprawdzenie, czy inny kontrahent o tym samym NIP jest już zarejestrowany w usłudze
   {? ~exec('kh_nip_registered','businesslink3',KH.ref(),1)
   || _result:=exec('PartnerFind','businesslink3',KH_DOD.ref(),1)
   || KH_DOD.cntx_pop();
      return()
   ?};
   KH_DOD.get();

   {? _result.STATUS>0
   ||
      {? KH_DOD.BL_STAT<>''
      || FUN.info('Status relacji kontrahenta jest już ustalony: %1.'@[KH_DOD.BL_STAT])
      |? var_pres('ID_WEW',KH)>0 & KH.ID_WEW<>''
      || FUN.info(
            'Aby nawiązać relację z kontrahentem, który jest podmiotem zależnym\n'
            'wymagane jest założonie dzierżawcy przez podmiot nadrzędny.'@
         )
      ||
         params_set('RESULT',_result);

         {? var_pres('DETAILS',_result)>100
         || _tab_p:=_result.DETAILS.TAB;
            {? _tab_p.size()=0 | _tab_p.size()=1
            || _selected:=1
            || _selected:=0
            ?}
         || _selected:=1
         ?};

         _tab:=tab_tmp(2
            ,'TIN','STRING[20]','NIP'@
            ,'ID_WEW','STRING[20]','Identyfikator wewnętrzny'@
            ,'TNNTSTAT','STRING[40]','Status kontrahenta w usłudze'@
            ,'RELSTAT','STRING[40]','Status relacji w usłudze'@
            ,'TNNTID','STRING[50]','GUID dzierżawcy'@
            ,'NAME','STRING[60]','Nazwa'@
            ,'FIRSTNAM','STRING[60]','Imię'@
            ,'SURNAM','STRING[60]','Nazwisko'@
            ,'MAIL','STRING[60]','E-mail'@
            ,'LANGUAGE','STRING[2]','Język'@
            ,'INVNAME','STRING[60]','Dane'@
            ,'INVMAIL','STRING[60]','E-mail'@
            ,'SKIPINV','INTEGER','Warunki ustalone z partnerem'@
::          ...i nie jest wymagana akceptacja zaproszenia
            ,'MEMO','SYS_MEMO','Notatka z uwagami o współpracy'@
         );

         _tab.fld_fml('NAME','F3',"
            _tab:=cur_tab(1,1);
            _tab_p:=params_get().RESULT.DETAILS.TAB;
            _tab_p.prefix();
            {? _tab_p.select()
            || _tab.NAME:=_tab_p.SHRTNAME;
               _tab.TNNTID:=_tab_p.TNNTID;
               _tab.TNNTSTAT:=_tab_p.TNNTSTAT;
               _tab.RELSTAT:=_tab_p.RELSTAT;
               _tab.ID_WEW:=_tab_p.ID_WEW
            ?};
            _tab.NAME
         ");
         _tab.fld_fml('NAME','AFTER_EDIT',"
            {? fld()<>''
            || _tab:=cur_tab(1,1);
               _tab_p:=params_get().RESULT.DETAILS.TAB;
               _tab_p.prefix(fld(),);
               {? _tab_p.first()
               || _tab.NAME:=_tab_p.SHRTNAME;
                  _tab.TNNTID:=_tab_p.TNNTID;
                  _tab.TNNTSTAT:=_tab_p.TNNTSTAT;
                  _tab.RELSTAT:=_tab_p.RELSTAT;
                  _tab.ID_WEW:=_tab_p.ID_WEW
               || FUN.info('Nie znaleziono kontrahenta %1.'@[fld()]);
                  0
               ?}
            || 1
            ?}
         ");

         _tab.fld_fml('LANGUAGE','F3',"
            _choice:=FUN.choice('Wybierz domyślny język'@,,'PL','EN');
            {? _choice=1
            || fld('PL')
            |? _choice=2
            || fld('EN')
            ?}
         ");
         _tab.fld_fml('LANGUAGE','AFTER_EDIT',"
            {? fld()='PL' | fld()='EN'
            || 1
            || FUN.info('Podaj domyślny język: %1, %2.'@['PL','EN']);
               0
            ?}
         ");

         _width:=62;
         _red:=_tab.mk_edit('Nawiąż relację w Businesslink'@,,'relblink');
         _tab.win_esep(_red,'Dane kontrahenta'@);
         _tab.win_efld(_red,,'NAME',,,_width-3,,,,,,,'F3_button=1');
         _tab.win_efld(_red,,'TIN',,,_width);
::         _tab.win_efld(_red,,'ID_WEW',,,_width);
         _tab.win_efld(_red,,'TNNTSTAT',,,_width);
::         _tab.win_efld(_red,,'RELSTAT',,,_width);
         _tab.win_esep(_red,'Dane osoby kontaktowej'@);
         _tab.win_efld(_red,,'FIRSTNAM',,,_width-4);
         _fml:="
            _tab:=cur_tab(1,1);
            KH_OSOB.cntx_psh();
            KH_OSOB.index('KH');
            KH_OSOB.prefix(KH_DOD.KH);
            KH_OSOB.win_sel('SLO');
            {? KH_OSOB.select()
            || _tab.FIRSTNAM:=KH_OSOB.IMIE;
               _tab.SURNAM:=KH_OSOB.NAZWISKO;
               _tab.MAIL:=KH_OSOB.EMAIL;
               win_disp()
            ?};
            KH_OSOB.cntx_pop();
            ~~
         ";
         _fbtn:=_tab.fld_ebtn(_red,'text="%1"'['…'],_fml);
         _tab.btn_eopt(_red,_fbtn,'tooltip="%1"'['Wybór danych z listy osób kontaktowych.'@]);
         _tab.win_efld(_red,,'SURNAM',,,_width);
         _tab.win_efld(_red,,'MAIL',,,_width);
         _tab.win_efld(_red,,'LANGUAGE',,,3,,,,,,,'F3_button=1');
         _tab.win_esep(_red,'Zapraszający'@);
         _tab.win_efld(_red,,'INVNAME',,,_width);
         _tab.win_efld(_red,,'INVMAIL',,,_width);
         _tab.win_esep(_red,'Warunki współpracy'@);
         _tab.win_efld(_red,,'SKIPINV',,,,,,,,,'check-box',
            'check_label="%1"'['Nie jest wymagana akceptacja zaproszenia'@],"1","0"
         );
         _tab.win_efld(_red,,'MEMO',,,_width,-2,1,,1);
         exec('ok_esc','#window',_tab,_red);
         _tab.win_edit(_red);

         _tab.efld_opt(_red,'mark=%1,editable=%2'[{? _selected || '0' || '1' ?},{? _selected || 'grayed' || '1' ?}],,'NAME');
         _tab.efld_opt(_red,'editable=grayed',,'TIN');
         _tab.efld_opt(_red,'editable=grayed',,'ID_WEW');
         _tab.efld_opt(_red,'editable=grayed',,'TNNTSTAT');
         _tab.efld_opt(_red,'editable=grayed',,'RELSTAT');
         _tab.efld_opt(_red,'mark=1',,'FIRSTNAM');
         _tab.efld_opt(_red,'mark=1',,'SURNAM');
         _tab.efld_opt(_red,'mark=1',,'MAIL');
         _tab.efld_opt(_red,'mark=1',,'LANGUAGE');
         _tab.efld_opt(_red,'editable=grayed',,'INVNAME');
         _tab.efld_opt(_red,'editable=grayed',,'INVMAIL');

         _tab.blank();
         _tab.TIN:=_nip;
         _tab.ID_WEW:={? _selected & var_pres('ID_WEW',KH)>0 || KH.ID_WEW || '' ?};
         _tab.TNNTSTAT:={? _selected || KH.BL_STAT || '' ?};
         _tab.RELSTAT:={? _selected || KH_DOD.BL_STAT || '' ?};
         _tab.NAME:={? _selected || KH.NAZ || '' ?};
         _tab.FIRSTNAM:='';
         _tab.SURNAM:='';
         _tab.MAIL:='';
         _tab.LANGUAGE:='PL';
         _tab.INVNAME:=OPERATOR.USER().DANE;
         _tab.INVMAIL:=OPERATOR.USER().EMAIL;
         _tab.memo_set(exec('invite_note','businesslink3'),'MEMO');

         _valid:="
            _chk:=__CHK.record(cur_tab(1,1),,'NAME','FIRSTNAM','SURNAM','MAIL','LANGUAGE');
            {? _chk=''
            || {? ~exec('mail_ok','#email',cur_tab(1,1).MAIL)
               || FUN.info('Niepoprawny adres e-mail: %1.'[cur_tab(1,1).MAIL]);
                  _chk:='MAIL'
               ?}
            ?};
            _chk
         ";
         {? _tab.edit(_valid)
         || {? _tab.TNNTID<>''
            || exec('add_id','#sync_id','BL_KH_ID',KH.uidref(),_tab.TNNTID)
            ?};
            _result1:=exec('PartnerAddInvite','businesslink3',
               KH_DOD.ref(),_tab.MAIL,_tab.FIRSTNAM,_tab.SURNAM,_tab.LANGUAGE,_tab.INVNAME,_tab.INVMAIL,_tab.SKIPINV,1
            );
            {? _result1.STATUS>0
            ||
::               exec('PartnerFind','businesslink3',KH_DOD.ref(),0);
               KH_DOD.get();
               KH_DOD.BL_INV_N:=_tab.FIRSTNAM;
               KH_DOD.BL_INV_S:=_tab.SURNAM;
               KH_DOD.BL_INV_E:=_tab.MAIL;
               KH_DOD.BL_INV_L:=_tab.LANGUAGE;
               KH_DOD.BL_INV_D:=date();
               KH_DOD.put()
            ?}
         ?}
      ?}
   || _choice:=FUN.choice('Błąd aktualizacji danych kontrahenta w usłudze.'@,,'Szczegóły'@,,,,'OK'@);
      {? _choice=1
      || KOMM.select()
      ?}
   ?}
?};

KH_DOD.cntx_pop();
~~


\invite_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysłanie zaproszenia operatorowi do usługi
::   WE: 0/1 - czy wyświetlać okno i komunikaty
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(1) || _a || 1 ?};
KOMM.init(,,'Sprawdzenie kontrahenta w usłudze Businesslink'@);
:: Sprawdzenie, czy inny kontrahent o tym samym NIP jest już zarejestrowany w usłudze
{? ~exec('kh_nip_registered','businesslink3',KH.ref(),0)
|| _result:=exec('PartnerFind','businesslink3',KH_DOD.ref(),0)
|| _result:=exec('parse_result','businesslink3');
   _result.STATUS:=0
?};

{? _result.STATUS>0
||
   _tab_id:=exec('get_id','#sync_id','BL_KH_ID',KH_DOD.KH().uidref());
   {? _tab_id.first()
   || _tenantidentifier_d:=_tab_id.ID
   || _tenantidentifier_d:=''
   ?};

   {? _tenantidentifier_d=''
   || FUN.info('Nie można wysłać zaproszenia dla operatora.\nKontranent nie ma konta w usłudze.'@);
      return()
   ?};

   _tab:=tab_tmp(1
      ,'FIRSTNAM','STRING[60]','Imię'@
      ,'SURNAM','STRING[60]','Nazwisko'@
      ,'MAIL','STRING[60]','E-mail'@
      ,'LANGUAGE','STRING[2]','Język'@
      ,'SKIPINV','INTEGER','Warunki ustalone z partnerem'@
::    ...i nie jest wymagana akceptacja zaproszenia
      ,'MEMO','SYS_MEMO','Notatka z uwagami o współpracy'@
   );

   _tab.fld_fml('LANGUAGE','F3',"
      _choice:=FUN.choice('Wybierz domyślny język'@,,'PL','EN');
      {? _choice=1
      || fld('PL')
      |? _choice=2
      || fld('EN')
      ?}
   ");
   _tab.fld_fml('LANGUAGE','AFTER_EDIT',"
      {? fld()='PL' | fld()='EN'
      || 1
      || FUN.info('Podaj domyślny język: %1, %2.'@['PL','EN']);
         0
      ?}
   ");

   _width:=62;
   _red:=_tab.mk_edit('Ponowienie zaproszenia do usługi'@,,'relblink2');
   _tab.win_esep(_red,'Dane osoby kontaktowej'@);
   _tab.win_efld(_red,,'FIRSTNAM',,,_width-4);
   _fml:="
      _tab:=cur_tab(1,1);
      KH_OSOB.cntx_psh();
      KH_OSOB.index('KH');
      KH_OSOB.prefix(KH_DOD.KH);
      KH_OSOB.win_sel('SLO');
      {? KH_OSOB.select()
      || _tab.FIRSTNAM:=KH_OSOB.IMIE;
         _tab.SURNAM:=KH_OSOB.NAZWISKO;
         _tab.MAIL:=KH_OSOB.EMAIL;
         win_disp()
      ?};
      KH_OSOB.cntx_pop();
      ~~
   ";
   _fbtn:=_tab.fld_ebtn(_red,'text="%1"'['…'],_fml);
   _tab.btn_eopt(_red,_fbtn,'tooltip="%1"'['Wybór danych z listy osób kontaktowych.'@]);
   _tab.win_efld(_red,,'SURNAM',,,_width);
   _tab.win_efld(_red,,'MAIL',,,_width);
   _tab.win_efld(_red,,'LANGUAGE',,,3,,,,,,,'F3_button=1');
   _tab.win_esep(_red,'Warunki współpracy'@);
   _tab.win_efld(_red,,'SKIPINV',,,,,,,,,'check-box',
      'check_label="%1"'['Nie jest wymagana akceptacja zaproszenia'@],"1","0"
   );
   _tab.win_efld(_red,,'MEMO',,,_width,-2,1,,1);
   exec('ok_esc','#window',_tab,_red);
   _tab.win_edit(_red);

   _tab.efld_opt(_red,'mark=1',,'FIRSTNAM');
   _tab.efld_opt(_red,'mark=1',,'SURNAM');
   _tab.efld_opt(_red,'mark=1',,'MAIL');
   _tab.efld_opt(_red,'mark=1',,'LANGUAGE');

   _tab.blank();
   _tab.FIRSTNAM:='';
   _tab.SURNAM:='';
   _tab.MAIL:='';
   _tab.LANGUAGE:='PL';
   _tab.memo_set(exec('invite_note','businesslink3'),'MEMO');

   _valid:="
      _chk:=__CHK.record(cur_tab(1,1),,'NAME','FIRSTNAM','SURNAM','MAIL','LANGUAGE');
      {? _chk=''
      || {? ~exec('mail_ok','#email',cur_tab(1,1).MAIL)
         || FUN.info('Niepoprawny adres e-mail: %1.'[cur_tab(1,1).MAIL]);
            _chk:='MAIL'
         ?}
      ?};
      _chk
   ";
:: Podczytanie danych z ostatniego zaproszenia
   {? ~_display
   || _tab.FIRSTNAM:=KH_DOD.BL_INV_N;
      _tab.SURNAM:=KH_DOD.BL_INV_S;
      _tab.MAIL:=KH_DOD.BL_INV_E;
      _tab.LANGUAGE:=KH_DOD.BL_INV_L
   ?};

   {? ~_display | _tab.edit(_valid)
   || _result1:=exec('OperatorAddInvite','businesslink3',
         KH_DOD.ref(),_tab.MAIL,_tab.FIRSTNAM,_tab.SURNAM,_tab.LANGUAGE,_tab.SKIPINV,1
      );
      {? _result1.STATUS>0
      ||
::         exec('PartnerFind','businesslink3',KH_DOD.ref(),0);
         KH_DOD.get();
         KH_DOD.BL_INV_N:=_tab.FIRSTNAM;
         KH_DOD.BL_INV_S:=_tab.SURNAM;
         KH_DOD.BL_INV_E:=_tab.MAIL;
         KH_DOD.BL_INV_L:=_tab.LANGUAGE;
         KH_DOD.BL_INV_D:=date();
         KH_DOD.put();
         {? var_pres('__final_komm')=type_of('')
         || __final_komm+='Kontrahent %1 został ponownie zaproszony.;'@[KH_DOD.KH().NAZ]
         ?}
      ?}
   ?}
|| {? _display
   || _choice:=FUN.choice('Błąd aktualizacji danych kontrahenta w usłudze.'@,,'Szczegóły'@,,,,'OK'@);
      {? _choice=1
      || KOMM.select()
      ?}
   ?}
?};
1


\invite_op_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Wysłanie zaproszenia operatorowi do usługi - grupowe
::----------------------------------------------------------------------------------------------------------------------
KH.cntx_psh();
KH.prefix();
KH_DOD.cntx_psh();
KH_DOD.prefix();
VAR_DEL.delete('__final_komm');
__final_komm:='';
_tab:=cur_tab(1);
_sel_aget:=_tab.sel_aget();
{? _sel_aget.first()
||
   {!|?
      {? _tab=KH
      || {? ~KH.seek(_sel_aget.REF)
         || FUN.info('Nie odnaleziono kontrahenta'@); KH.cntx_pop(); KH_DOD.cntx_pop(); return(0)
         ?};
         exec('kh_dod_ini','kontrahent',,0)
      || {? ~KH_DOD.seek(_sel_aget.REF)
         || FUN.info('Nie odnaleziono kontrahenta'@); KH.cntx_pop(); KH_DOD.cntx_pop(); return(0)
         ?}
      ?};
      {? (KH_DOD.KH().BL_STAT=exec('tenant_state_awaiting','businesslink3')
      | KH_DOD.KH().BL_STAT=exec('tenant_state_active','businesslink3'))
      & KH_DOD.BL_STAT=exec('relation_state_awaiting','businesslink3')
      & KH_DOD.BL_INV_N<>''
      & KH_DOD.BL_INV_S<>''
      & KH_DOD.BL_INV_E<>''
      & KH_DOD.BL_INV_L<>''
      || exec('invite_op','businesslink3',0)
      ?};
      _sel_aget.next()
   !};
   _tab.sel_adel()
?};
:: wypełnieni komunikatu
{? __final_komm<>''
|| _komm:=spli_str(__final_komm,';');
   _idx:=1;
   exec('ini_kom','#message','Zaproszenia do BusinessLinka');
   {! |?
      exec('add_kom','#message',_komm[_idx],2);
      _idx+=1;
      _idx<=obj_len(_komm) & _komm[_idx]<>''
   !};
   exec('end_kom','#message')
|| FUN.info('Brak kontrahentów spełniających warunki.'@)
?};
VAR_DEL.delete('__final_komm');
KH.cntx_pop();
KH_DOD.cntx_pop();
0


\action_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Akcja 'Wysyłanie -> Wyślij do Businesslink' w oknie załączników - uruchamia czynność
::  OLD: \action_send/!zws_bil_doks.fml
::----------------------------------------------------------------------------------------------------------------------
_selected:=(DOKUM.sel_size()>0);
_symbol:={? DOKUM.SYM_ZEW<>'' || DOKUM.SYM_ZEW || DOKUM.SYM ?};

{? DOKUM.RODZAJ_K<>'W'
|| KOMM.msg('Dokument %1 nie jest \'wychodzący\'.'@[_symbol],~_selected)
|| exec('document_send','businesslink3',_selected)
?};
~~


\document_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Właściwe wysyłanie dokumentu - uruchamia czynność (różne konteksty użycia)
::   WE: [_a] - czy akcja dla grupy rekordów
::----------------------------------------------------------------------------------------------------------------------
_selected:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZBL_BIL_DOKS';
_args.UIDREF:=DOKUM.uidref();
_args.AKCJA:='WYŚLIJ';
_args.GRUPA:={? _selected>0 || 'T' || 'N' ?};
_args.PROC_START:='N';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'DOKUM',DOKUM.ref());

exec('mp_run','#b__box',_args);
~~


\document_send_check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Właściwe wysyłanie dokumentu do sprawdzenia - uruchamia czynność (różne konteksty użycia)
::   WE: [_a] - czy akcja dla grupy rekordów
::----------------------------------------------------------------------------------------------------------------------
_selected:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZBL_BIL_DOKS';
_args.UIDREF:=DOKUM.uidref();
_args.AKCJA:='SPRAWDŹ';
_args.GRUPA:={? _selected>0 || 'T' || 'N' ?};
_args.PROC_START:='N';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'DOKUM',DOKUM.ref());

exec('mp_run','#b__box',_args);
~~


\action_send_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyłanie dokumentu - przed grupą zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wysłać zaznaczone dokumenty?'@)
|| KOMM.init(,,'Wysyłanie dokumentów'@);
   1
|| 0
?}


\action_send_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyłanie dokumentu - po grupie zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\action_verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Weryfikacja dokumentu w usłudze Businesslink (akcja w oknie)
::  OLD: \action_verify/!zws_bil_doks.fml
::----------------------------------------------------------------------------------------------------------------------
{? DOKUM.RODZAJ_K<>'W'
|| FUN.info('Dokument nie jest \'wychodzący\'.'@)
|? DOKUM.RECEIVED='T'
|| {? DOKUM.BL_LOGIN='' & DOKUM.BL_DTCON=date(0,0,0)
   || FUN.info('Dokument został pobrany/potwierdzony w usłudze Businesslink.'@)
   |? DOKUM.BL_LOGIN=''
   || FUN.info(
         'Dokument został pobrany/potwierdzony %1 %2 w usłudze Businesslink.'@
         [$DOKUM.BL_DTCON,$DOKUM.BL_TMCON]
      )
   || FUN.info(
         'Dokument został pobrany/potwierdzony %1 %2\nw usłudze Businesslink przez: %3.'@
         [$DOKUM.BL_DTCON,$DOKUM.BL_TMCON,DOKUM.BL_LOGIN]
      )
   ?}
|| FUN.info(
      'Dokument nie został pobrany/potwierdzony w usłudze Businesslink.'@
   )
?};
~~


\action_invalidate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Unieważnienie dokumentu w usłudze Businesslink (akcja w oknie)
::  OLD: \action_invalidate/!zws_bil_doks.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);

{? DOKUM.BSEND='X'
|| FUN.info('Dokument jest już unieważniony.'@)
|? DOKUM.BSEND='N'
|| FUN.info('Dokument nie został wysłany do Businesslink.'@)
|? DOKUM.BL_GUID=''
|| FUN.info('Dokumentu wystawionego w poprzedniej wersji systemu nie da się unieważnić.'@)
|| DOKUM.get();
   {? XINFO.BL_INVAL
   || _ask:='Czy unieważnić wysłany dokument?'@;
      {? DOKUM.RECEIVED='T'
      || _ask:='UWAGA. Dokument został już pobrany.'@+'\n\n'+_ask
      ?};
      {? FUN.ask(_ask)
      || _res:=exec('DocumentInvalidate','businesslink3',DOKUM.ref(),1);
         {? _res.STATUS=1
         || FUN.info('Dokument został unieważniony.'@)
         || FUN.info('Nie udało się unieważnić dokumentu.'@+'\n'+_res.MESSAGE)
         ?}
      ?}
   || {? DOKUM.RECEIVED='T'
      || FUN.info(
            'Pobranego dokumentu nie można unieważnić.'@
::             bez zaznaczonej opcji '
::            '"Unieważnij nawet, gdy został już pobrany".'@
         )
      |? FUN.ask('Czy unieważnić wysłany dokument?'@)
      || _res:=exec('DocumentInvalidate','businesslink3',DOKUM.ref(),0);
         {? _res.STATUS=1
         || FUN.info('Dokument został unieważniony.'@)
         || FUN.info('Nie udało się unieważnić dokumentu.'@+'\n'+_res.MESSAGE)
         ?}
      ?}
   ?}
?}


\action_receive
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Akcja 'Odbieranie informacji' w menu Administracja - uruchamia czynność
::   WE: [_a] - 'T'/'N' czy akcja "grupowa" (wywołanie z funkcji 'Synchronizacja dokumentów')
::  OLD: \action_receive/businesslink.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='ZBL_BIL_DOKR';
   _args.AKCJA:='ODBIERZ';
   _args.PROC_START:='N';
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   _args.GRUPA:={? var_pres('_a')=type_of('') || _a || 'N' ?};

   exec('mp_run','#b__box',_args)
?};
~~


\action_settlements_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Wysłanie rozrachunków' w menu Administracja - uruchamia czynność
::  OLD: \action_settlements_send/businesslink.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='ZBL_BIL_DOKO';
   _args.AKCJA:='WYŚLIJ';
   _args.PROC_START:='N';
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

   exec('mp_run','#b__box',_args)
?};
~~


\action_partners_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja 'Aktualizacja kontrahentów' w menu Administracja - uruchamia czynność
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='ZBL_BIL_DOKK';
   _args.AKCJA:='AKTUALIZUJ';
   _args.PROC_START:='N';
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

   exec('mp_run','#b__box',_args)
?};
~~


\document_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie dokumentu
::----------------------------------------------------------------------------------------------------------------------
_selected:=(DOKUM.sel_size()>0);
_ready_to_download:=exec('ready_to_download','zbl_stat');
_ready_to_registration:=exec('ready_to_registration','zbl_stat');
{? DOKUM.BL_GUID=''
|| KOMM.msg('Nie można zaktualizować dokumentu, brak GUID.'@,~_selected)
|? (DOKUM.BL_STAT<>_ready_to_download & DOKUM.BL_STAT<>_ready_to_registration)
|| {? _selected
   || KOMM.msg(
         'Nie można zaktualizować dokumentu w innym stanie niż \'%1\' lub \'%2\'.'@
         [ _ready_to_download,_ready_to_registration],~_selected
      )
   || {? FUN.ask(
            'Dokument ma inny stan niż \'%1\' lub \'%2\'.\n\n'
            'Pobrane zostaną tylko nowe załączniki.\n'
            'Czy na pewno aktualizować?'@
            [ _ready_to_download,_ready_to_registration]
         )
      || exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
      ?}
   ?}
|| exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
?};
~~


\document_get_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobieranie dokumentu - przed grupą zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Pobieranie dokumentów'@);
1


\document_get_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobieranie dokumentu - po grupie zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\action_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Akcja 'Odbieranie dokumentów' w oknie 'Administracja' - uruchamia czynność
::   WE: [_a] - 'T'/'N' czy akcja "grupowa" (wywołanie z funkcji 'Synchronizacja dokumentów')
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='ZBL_BIL_DOKG';
   _args.AKCJA:='ODBIERZ';
   _args.PROC_START:='N';
   _args.GRUPA:={? var_pres('_a')=type_of('') || _a || 'N' ?};

   exec('mp_run','#b__box',_args)
?};
~~


\get_and_confirm_permission
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Sprawdza uprawnienie do pobierania i potwierdzania dokumentów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('chk_role','#b__box',OPERATOR.USER,'ZBL_BIL_DOKG')
|| 1
|| FUN.info(
      'Do wykonania funkcji wymagane są uprawnienia do czynności:\n%1.'@
      ['ZBL_BIL_DOKG']
   );
   0
?}


\document_get_and_confirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Pobranie i potwierdzenie dokumentu
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('get_and_confirm_permission','businesslink3')=0 || return() ?};

_selected:=(DOKUM.sel_size()>0);
_ready_to_download:=exec('ready_to_download','zbl_stat');
_ready_to_registration:=exec('ready_to_registration','zbl_stat');
{? DOKUM.BL_GUID=''
|| KOMM.msg('Nie można zaktualizować dokumentu, brak GUID.'@,~_selected)
|? (DOKUM.BL_STAT<>_ready_to_download & DOKUM.BL_STAT<>_ready_to_registration)
|| {? _selected
   || KOMM.msg(
         'Nie można zaktualizować dokumentu w innym stanie niż \'%1\' lub \'%2\'.'@
         [ _ready_to_download,_ready_to_registration],~_selected
      )
   || {? FUN.ask(
            'Dokument ma inny stan niż \'%1\' lub \'%2\'.\n\n'
            'Pobrane zostaną tylko nowe załączniki.\n'
            'Czy na pewno aktualizować?'@
            [ _ready_to_download,_ready_to_registration]
         )
      || exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
      ?}
   ?}
|| exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
?};
~~


\document_get_and_confirm_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Pobieranie i potwierdzanie dokumentu - przed grupą zaznaczonych rekordów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('get_and_confirm_permission','businesslink3')=0 || return(0) ?};

{? FUN.ask('Czy przetworzyć zaznaczone dokumenty?'@)
|| _tab:=params_get().env.TAB_DOKUM;
   _tab.erase();
   KOMM.init(,,'Pobieranie dokumentów'@);
   1
|| 0
?}


\document_get_and_confirm_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Pobieranie i potwierdzanie dokumentu - po grupie zaznaczonych rekordów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\send_or_get_permission
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Sprawdza uprawnienie do wysyłania i pobierania dokumentów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('chk_role','#b__box',OPERATOR.USER,'ZBL_BIL_DOKS')
   & exec('chk_role','#b__box',OPERATOR.USER,'ZBL_BIL_DOKG')
|| 1
|| FUN.info(
      'Do wykonania funkcji wymagane są uprawnienia do następujących czynności:\n%1,\n%2.'@
      ['ZBL_BIL_DOKS','ZBL_BIL_DOKG']
   );
   0
?}


\document_send_or_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wysyłanie lub pobranie i potwierdzenie dokumentu
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('send_or_get_permission','businesslink3')=0 || return() ?};

_selected:=(DOKUM.sel_size()>0);
_symbol:={? DOKUM.SYM_ZEW<>'' || DOKUM.SYM_ZEW || DOKUM.SYM ?};

{? DOKUM.RODZAJ_K<>'P'
|| KOMM.msg('Dokument %1 nie jest \'przychodzący\'.'@[_symbol],~_selected)
|? DOKUM.BL_OCR=''
|| KOMM.msg('Dokument %1 nie jest przeznaczony do OCR.'@[_symbol],~_selected)
|? DOKUM.BL_OCR=exec('ready_to_ocr','zbl_stat')
|| {? exec('bl_par','businesslink3','OCR.Enabled')<>'1'
   || KOMM.msg('Nie można wysłać dokumentu %1 — współpraca z OCR jest wyłączona.'@[_symbol],~_selected)
   || exec('document_send','businesslink3',_selected)
   ?}
|| _ready_to_download:=exec('ready_to_download','zbl_stat');
   _ready_to_registration:=exec('ready_to_registration','zbl_stat');
   {? DOKUM.BL_GUID=''
   || KOMM.msg('Nie można zaktualizować dokumentu %1, brak GUID.'@[_symbol],~_selected)
   |? (DOKUM.BL_STAT<>_ready_to_download & DOKUM.BL_STAT<>_ready_to_registration)
   || {? _selected
      || KOMM.msg(
            'Nie można zaktualizować dokumentu %1 w innym stanie niż \'%2\' lub \'%3\'.'@
            [_symbol,_ready_to_download,_ready_to_registration],~_selected
         )
      || {? FUN.ask(
               'Dokument %1 ma inny stan niż \'%2\' lub \'%3\'.\n\n'
               'Pobrane zostaną tylko nowe załączniki.\n'
               'Czy na pewno aktualizować?'@
               [_symbol,_ready_to_download,_ready_to_registration]
            )
         || exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
         ?}
      ?}
   |? DOKUM.BL_OCR<>exec('received_from_ocr','zbl_stat')
   || exec('DocumentGet','businesslink3',DOKUM.ref(),~_selected)
   || KOMM.msg('Aktualizacja dokumentu %1 nie jest wymagana.'@[_symbol],~_selected)
   ?}
?};
~~


\document_send_or_get_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wysyłanie lub pobieranie i potwierdzanie dokumentu - przed grupą zaznaczonych rekordów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? exec('send_or_get_permission','businesslink3')=0 || return(0) ?};

{? FUN.ask('Czy przetworzyć zaznaczone dokumenty?'@)
|| _tab:=params_get().env.TAB_DOKUM;
   _tab.erase();
   KOMM.init(,,'Wysyłanie i pobieranie dokumentów'@);
   1
|| 0
?}


\document_send_or_get_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wysyłanie lub pobieranie i potwierdzanie dokumentu - po grupie zaznaczonych rekordów
::       UWAGA: Od wersji 23.25_JST01 usunięto metodę BLMT_DOCUMENT_GET_CONFIRM - potwierdzanie dokumentów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\action_receive_get_and_confirm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Odbieranie informacji, pobieranie dokumentów, pobieranie UPO
::       - akcja 'Synchronizuj dokumenty' w oknie 'Administracja'
::   WE: [_a] - dodatkowe dialogi (do testów)
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(0) || _a || 0 ?};
::_dialog:=1;

KOMM.init(,,'Synchronizacja dokumentów'@);
{? ~_dialog | _dialog & FUN.ask('Uruchomić funkcję \'%1\'?'@['receive'])
|| exec('action_receive','businesslink3','T')
?};
{? ~_dialog | _dialog & FUN.ask('Uruchomić funkcję \'%1\'?'@['get'])
|| exec('action_get','businesslink3','T')
?};
{? ~_dialog | _dialog & FUN.ask('Uruchomić funkcję \'%1\'?'@['upo'])
|| exec('upo_service_get1','businesslink3','T')
?};
KOMM.select();
~~


\info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyświetla informacje o portalu Businesslink
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
|| exec('ServiceInfo','businesslink3',1)
?};
~~


\PartnerGet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Pobranie kontrahentów z usługi
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DETAILS','DISPLAY');
_args.RESULT:=_result;
_args.DETAILS:=~~;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'PartnerGet');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_PARTNER_GET',0,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\PartnerGetManual
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Pobranie kontrahentów z usługi - do wywołania tylko poza procesem
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DETAILS','DISPLAY');
_args.RESULT:=_result;
_args.DETAILS:=~~;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'PartnerGetManual');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_PARTNER_GET_MANUAL',0,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\PartnerFind
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyszukanie kontrahenta w usłudze
::       O ile kontrahent jest dostępny, to naniesienie id tenanta, statusu tenanta i statusu relacji
::       Dla argumentu w postaci NIP - zwraca tylko tenant_id (opcja obecnie nie jest używana)
::   WE: _a - KH_DOD.ref() / NIP
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','KH_DOD','NIP','DISPLAY');
_args.RESULT:=_result;
_args.KH_DOD:={? var_pres('_a')=type_of(null()) || _a || null() ?};
_args.NIP:={? var_pres('_a')=type_of('') || _a || '' ?};
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _args.DISPLAY || KOMM.init(,,'PartnerFind') ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_PARTNER_FIND',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\PartnerAddInvite
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zaproszenie kontrahenta do usługi
::       O ile kontrahent jest dostępny, to naniesienie id tenanta, statusu tenanta i statusu relacji
::   WE: _a - KH_DOD.ref()
::       _b - e-mail administratora
::       _c - imię administratora
::       _d - nazwisko administratora
::       [_e] - domyślny język administratora
::       [_f] - dane osoby zapraszającej
::       [_g] - e-mail osoby zapraszającej
::       [_h] - czy pominięcie procesu zapraszania [0]/1
::       [_i] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','KH_DOD','MAIL','FIRSTNAME','SURNAME','LANGUAGE','INVNAME','INVMAIL','DISPLAY','SKIPINV');
_args.RESULT:=_result;
_args.KH_DOD:=_a;
_args.MAIL:=_b;
_args.FIRSTNAME:=_c;
_args.SURNAME:=_d;
_args.LANGUAGE:={? var_pres('_e')=type_of('') || _e || 'PL' ?};
_args.INVNAME:={? var_pres('_f')=type_of('') || _f || '' ?};
_args.INVMAIL:={? var_pres('_g')=type_of('') || _g || '' ?};
_args.SKIPINV:={? var_pres('_h')=type_of(0) || _h || 0 ?};

_args.DISPLAY:={? var_pres('_i')=type_of(0) || _i || 0 ?};

KOMM.init(,,'PartnerAddInvite');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_PARTNER_ADD_INVITE',0,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\OperatorAddInvite
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zaproszenie operatora do usługi
::   WE: _a - KH_DOD.ref()
::       _b - e-mail administratora
::       _c - imię administratora
::       _d - nazwisko administratora
::       [_e] - domyślny język administratora
::       [_f] - czy pominięcie procesu zapraszania [0]/1
::       [_g] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','KH_DOD','MAIL','FIRSTNAME','SURNAME','LANGUAGE','SKIPINV','DISPLAY');
_args.RESULT:=_result;
_args.KH_DOD:=_a;
_args.MAIL:=_b;
_args.FIRSTNAME:=_c;
_args.SURNAME:=_d;
_args.LANGUAGE:={? var_pres('_e')=type_of('') || _e || 'PL' ?};
_args.SKIPINV:={? var_pres('_f')=type_of(0) || _f || 0 ?};

_args.DISPLAY:={? var_pres('_f')=type_of(0) || _g || 0 ?};

KOMM.init(,,'OperatorAddInvite');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_OPERATOR_ADD_INVITE',0,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\DocumentSend
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyła dokument
::   WE: _a - DOKUM.ref()
::       _b - 1-tylko do sprawdzenia w BusinessCheck, nie wysyła do KSeF / 0
::       [_c] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID','BATCH');
_result.DETAILS.GUID:='';
_result.DETAILS.BATCH:='N';
_args:=obj_new('RESULT','DOKUM','CHECK','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.CHECK:=_b;
_args.DISPLAY:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_SEND',-1,_log_level,_args);

_result


\DocumentSendBatch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Wysyła dokument (do KSeF w trybie wsadowym)
::   WE: _a - DOKUM.ref()
::       _b - 1-tylko do sprawdzenia w BusinessCheck, nie wysyła do KSeF / 0
::       [_c] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID','BATCH');
_result.DETAILS.GUID:='';
_result.DETAILS.BATCH:='T';
_args:=obj_new('RESULT','DOKUM','CHECK','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.CHECK:=_b;
_args.DISPLAY:={? var_pres('_c')=type_of(0) || _c || 0 ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_SEND:batch',-1,_log_level,_args);

_result


\DocumentAttachmentsAdd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyła dodatkowe załączniki do dokumentu
::   WE: _a - DOKUM.ref()
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DOKUM','DOKUMZ','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.DOKUMZ:=tab_tmp(1
   ,'UIDREF','STRING[48]','DOKUMZ.uidref()'
   ,'DOKUM','BLOBRAW','Załącznik'
);
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

_bl_stat:=exec('FindAndGet','#table',DOKUM,_args.DOKUM,,"BL_STAT",'');
{? _bl_stat=exec('abandoned','zbl_stat') |
   _bl_stat=exec('ready_to_send','zbl_stat')
|| {? _args.DISPLAY || FUN.info('Nie można dosyłać załączników dla dokumentu o statusie: %1.'@[_bl_stat]) ?}

|| DOKUMZ.cntx_psh();
   DOKUMZ.index('GUID');
   DOKUMZ.prefix(_args.DOKUM);
   {? DOKUMZ.first()
   ||
::    Wyliczenie objętości wysłanych załączników
      _size_sent:=0;
      DOKUMZ.prefix(_args.DOKUM);
      {? DOKUMZ.first()
      || {!
         |? {? DOKUMZ.BL_GUID<>''
            || _size:=DOKUMZ.bl_info('DOKUM','SIZE');
               _size_sent+=_size
            ?};
            DOKUMZ.next()
         !}
      ?};
::    Wystawienie załączników
      _msg:='';
      {? DOKUMZ.first()
      || {!
         |? _size:=DOKUMZ.bl_info('DOKUM','SIZE');
            {? DOKUMZ.BL_GUID=''
            || _max_size:=exec('max_size','businesslink3');
               {? _size_sent+_size<_max_size
               || _size_sent+=_size;
                  _args.DOKUMZ.UIDREF:=DOKUMZ.uidref();
                  _args.DOKUMZ.DOKUM:=DOKUMZ.DOKUM;
                  _args.DOKUMZ.add()
               || _msg+='Załącznik "%1" (rozmiar %2 MB) nie został wysłany.\nRozmiar przekracza łączny limit %3 MB.'@
                     [DOKUMZ.bl_info('DOKUM','NAME'),$(_size/1024/1024),$(_max_size/1024/1024)]+'\n'
               ?}
            ?};
            DOKUMZ.next()
         !}
      ?};

      {? _args.DOKUMZ.first()
      || KOMM.init(,,'Dosyłanie załączników'@);
         _log_level:=-1;
         exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_ATTACHMENTS_ADD',-1,_log_level,_args);
         {? _msg<>''
         || {? _args.DISPLAY || FUN.info(_msg) ?}
         ?}
      || {? _args.DISPLAY || FUN.info('Brak nowych załączników do wysłania.'@+'\n'+_msg) ?}
      ?}
   || {? _args.DISPLAY || FUN.info('Brak nowych załączników do wysłania.'@) ?}
   ?};
   DOKUMZ.cntx_pop()
?};

_result


\DocumentInvalidate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Unieważnia dokument
::   WE: _a - DOKUM.ref()
::       _b - ForceIfConfirmed (0/1)
::       [_c] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DOKUM','FORCE','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.FORCE:=_b;
_args.DISPLAY:={? var_pres('_c')=type_of(0) || _c || 0 ?};

KOMM.init(,,'DocumentInvalidate');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_INVALIDATE',0,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\DocumentReport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie danych o dokumentach
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DISPLAY');
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

{? _args.DISPLAY || KOMM.init(,,'DocumentReport') ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_REPORT',-1,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\DocumentGet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Pobranie dokumentu
::   WE: _a - DOKUM.ref()
::      [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID');
_result.DETAILS.GUID:='';
_args:=obj_new('RESULT','DOKUM','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _args.DISPLAY || KOMM.init(,,'Pobieranie dokumentu'@) ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_GET',-1,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\SettlementsSend
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Synchronizacja informacji dotyczących stanów płatności
::   WE: [_a] - czy wyświetlać informacje/progress [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.STATUS:=1;
_args:=obj_new('RESULT','KH','DISPLAY');
_args.RESULT:=_result;
_args.RESULT.DETAILS:=tab_tmp(1,'LP','INTEGER','Lp'@,'MESSAGE','STRING[255]','Komunikat'@);
_args.KH:=~~;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'SettlementsSend');

_log_level:=-1;

_il_kh:=_all_kh:=0;
_lp:=0;

_can_continue:=1;

VAR_DEL.delete('objBlOp');
_bl_op:=exec('obj_bl_op','rozrach');
KH.cntx_psh(); KH.clear();
_bl_op.KH.cntx(1);
{? _bl_op.KH.first()
|| _size:=_bl_op.KH.size();
   {? _args.DISPLAY || FUN.prg_start(_size,'Wysyłanie danych.'@,,,0) ?};
   {!
   |? _all_kh+=1;
      _lp+=1;
      _args.KH:=KH.ref();
      _res:=exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_SETTLEMENTS_SEND',0,_log_level,_args);
      {? type_of(_res)>100
      || _result.STATUS*=(_res.STATUS=1);
         {? _res.STATUS=1
         || _result.DETAILS.LP:=_lp;
            _result.DETAILS.MESSAGE:='Kontrahent %1: rozrachunki zostały wysłane'@[KH.KOD];
            _result.DETAILS.add();
            _il_kh+=1;
            _bl_op.send(KH.ref())
         || _result.DETAILS.LP:=_lp;
            _result.DETAILS.MESSAGE:='Kontrahent %1: rozrachunki nie zostały wysłane (%2)'[KH.KOD,_res.MESSAGE];
            _result.DETAILS.add();
            delay(1)
         ?};
         obj_del(_res)
      || _result.STATUS:=0;
         _result.DETAILS.LP:=_lp;
         _result.DETAILS.MESSAGE:='Kontrahent %1: rozrachunki nie zostały wysłane'[KH.KOD];
         _result.DETAILS.add();
         delay(1)
      ?};
      {? _args.DISPLAY || _can_continue:=FUN.prg_next(1,'Wysyłanie danych: %1'@[KH.KOD]) ?};
      _can_continue>0 & _bl_op.KH.next()
   !};
   {? _args.DISPLAY || FUN.prg_stop() ?}
?};
_bl_op.KH.cntx(2);
KH.cntx_pop();
VAR_DEL.delete('objBlOp');
_result.MESSAGE:=
   {? _all_kh=0
   || 'Nie wysłano rozrachunków — brak zmian w rozrachunkach kontrahentów Businesslink.'@
   || 'Wysłano rozrachunki dla %1 z %2 kontrahentów Businesslink.'@[$_il_kh,$_all_kh]
   ?};

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\MapsSend
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wysyłanie mapy indeksów
::   WE: _a - KH.ref()
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','KH_DOD','DISPLAY');
_args.RESULT:=_result;

KH_DOD.cntx_psh();
KH_DOD.index('KH_DOD');
KH_DOD.prefix(REF.FIRMA,_a);
KH_DOD.first();
_args.KH_DOD:=KH_DOD.ref();
KH_DOD.cntx_pop();

_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

KOMM.init(,,'MapsSend');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_MAPS_SEND',-1,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\ServiceInfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Dane o stanie usługi dzierżawcy
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DISPLAY');
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'ServiceInfo');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_SERVICE_INFO',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};
::{? _args.DISPLAY & _args.RESULT.STATUS<>1 & _args.RESULT.MESSAGE<>'' || FUN.info(_args.RESULT.MESSAGE) ?};

_result


\TenantParamsGet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Odczytanie parametrów dzierżawcy
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DISPLAY');
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'TenantParamsGet');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'sl_TenantParamsGet',-1,_log_level,_args);

::{? _args.DISPLAY || KOMM.select() ?};

_result


\TenantParamsModify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Modyfikacja parametrów dzierżawcy
::   WE: _a - znacznik czasowy IDPUT, powyżej którego wysyłać rekordy
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','TM','DISPLAY');
_args.RESULT:=_result;
_args.TM:={? var_pres('_a')=type_of('') || _a || '' ?};
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

KOMM.init(,,'TenantParamsModify');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'sl_TenantParamsModify',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\TenantStats
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Statystyki dzierżawcy
::   WE: [_a] - data "od" (poprawny znacznik czasowy ISO, np.: iso_datetime_value(date(1900,1,1),time(0,0,0)) )
::       [_b] - data "do" (poprawny znacznik czasowy ISO, np.: iso_datetime_value(date(),time()) )
::       [_c] - rok statystyk
::       [_d] - miesiąc statystyk
::       [_e] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=tab_tmp(1,'NAME','STRING[255]','Nazwa'@,'DESC','STRING[255]','Opis'@,'VALUE','INTEGER','Wartość'@);
_args:=obj_new('RESULT','DT_FROM','DT_TO','ST_YEAR','ST_MONTH','DISPLAY');
_args.RESULT:=_result;
_args.DT_FROM:=
   {? var_pres('_a')=type_of('') & _a<>''
   || _a
   || ~~
   ?};
_args.DT_TO:=
   {? var_pres('_b')=type_of('') & _a<>''
   || _b
   || ~~
   ?};
_args.ST_YEAR:={? var_pres('_c')=type_of(0) || _c || ~~ ?};
_args.ST_MONTH:={? var_pres('_d')=type_of(0) || _d || ~~ ?};
_args.DISPLAY:={? var_pres('_e')=type_of(0) || _e || 0 ?};

KOMM.init(,,'TenantStats');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'SL_TENANT_STATS',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\NotificationSend
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Wysyłanie notyfikacji e-mail
::   WE: _a - lista adresów e-mail oddzielone średnikami
::       _b - Temat powiadomienia
::       _c - Treść powiadomienia
::       [_d] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','EMAIL','SUBJECT','TEXT','DISPLAY');
_args.EMAIL:=_a;
_args.SUBJECT:=_b;
_args.TEXT:=_c;
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_d')=type_of(0) || _d || 0 ?};

{? _args.DISPLAY || KOMM.init(,,'NotificationSend') ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_NOTIFICATION_SEND',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\KsefTokenFind
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Wyszukanie tokena/tokentów danego dzierżawcy
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DISPLAY');
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_a')=type_of(0) || _a || 0 ?};

KOMM.init(,,'KsefTokenFind');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_KSEF_TOKEN_FIND',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\KsefTokenModifyInit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Pobranie dokumentu do podpisania w celu późniejszego wygenerowania tokenu KSeF
::   WE: [_a] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','DISPLAY');
_args.RESULT:=_result;
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

KOMM.init(,,'KsefTokenModifyInit');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_KSEF_TOKEN_MODIFY_INIT',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\KsefTokenModify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Generowanie/modyfikowanie tokenu KSeF
::   WE: _a - login uzytkownika
::       _b - uprawnienie do pobierania dokumentów z KSeF
::       _c - uprawnienie do wysyłania dokumentów do KSeF
::       _d - czy token KSeF aktywny
::       _e - plik z podpisanym dokumentem inicjującym
::       _f - czy wycofać token
::       _g - token skopiowany z portalu KSeF
::       _h - NIP / ID_WEW
::       [_i] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_args:=obj_new('RESULT','LOGIN','DOWNLOAD','UPLOAD','ENABLED','SIGNEDR','REVOKE','TOKEN','NIP','DISPLAY');
_args.RESULT:=_result;
_args.LOGIN:=_a;
_args.DOWNLOAD:=_b;
_args.UPLOAD:=_c;
_args.ENABLED:=_d;
_args.SIGNEDR:=_e;
_args.REVOKE:=_f;
_args.TOKEN:=_g;
_args.NIP:=_h;
_args.DISPLAY:={? var_pres('_i')=type_of(0) || _i || 0 ?};

KOMM.init(,,'KsefTokenModify');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_KSEF_TOKEN_MODIFY',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\DocumentGetinfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Odczytanie informacji o dokumencie
::   WE: _a - DOKUM.ref()
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID');
_result.DETAILS.GUID:='';
_args:=obj_new('RESULT','DOKUM','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

KOMM.init(,,'DocumentGetinfo');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_GETINFO',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\DocumentGetinfoBatch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Odczytanie informacji o dokumencie
::   WE: _a - DOKUM.ref()
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID');
_result.DETAILS.GUID:='';
_args:=obj_new('RESULT','DOKUM','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

KOMM.init(,,'DocumentGetinfoBatch');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_GETINFO:batch',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\SignatureSendBatch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Podpisywanie dokumentu wysyłanego wsadowo do KSeF
::   WE: _a - DOKUM.ref()
::       _b - plik z podpisanym dokumentem inicjującym
::       [_c] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID');
_result.DETAILS.GUID:='';
_args:=obj_new('RESULT','DOKUM','SIGNEDR','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.SIGNEDR:=_b;
_args.DISPLAY:={? var_pres('_c')=type_of(0) || _c || 0 ?};

KOMM.init(,,'SignatureSend');

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_SIGNATURE_SEND:batch',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


\DocumentSendGo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Kontynuowanie procesu wysyłki do KSeF po walidacji w Businesscheck
::   WE: _a - DOKUM.ref()
::       [_b] - czy wyświetlać informacje [0]/1
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','businesslink3');
_result.DETAILS:=obj_new('GUID');
_result.DETAILS.GUID:='';
_args:=obj_new('RESULT','DOKUM','DISPLAY');
_args.RESULT:=_result;
_args.DOKUM:=_a;
_args.DISPLAY:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _args.DISPLAY || KOMM.init(,,'DocumentSendGo') ?};

_log_level:=-1;

exec('run_mwac','sync_mwa',exec('sync_pd','businesslink3'),'BLMT_DOCUMENT_SEND_GO',-1,_log_level,_args);

{? _args.DISPLAY || KOMM.select() ?};

_result


::======================================================================================================================
:: Właściwe metody
::======================================================================================================================


\parse_result
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Wynik formuł parsujących
::  OLD: \parse_result/businesslink.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=exec('parse_result','sl_api');
_result.MESSAGE:='Błąd konfiguracji.\nNależy sprawdzić czy wszystkie metody zostały zaimportowane i są aktywne.'@;
_result


\args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uniwersalna metoda przygotowująca argumenty wywołania - przekazuje wywołanie do przenazwanej formuły 'args'
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_method:=_env.MethodName;
_fml:='%1_args'[exec('renameMethod','businesslink3',_method)];
:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
params_exec(_fml,'businesslink3')


\parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Uniwersalna metoda parsująca - zawiera główną obsługę błędów, przekazuje wywołanie
::       do przenazwanej formuły 'parse' podając za parametr wewnętrzną część response w postaci obiektu JMAN.
::       > W szczególnych przypadkach uruchamia formułę 'parse' bez parametru (obsługa pustego zagłębionego JSON).
::       > W szczególnych przypadkach, gdy Status=0, uruchamia formułę 'parse' do analizy błędu
::         (obiekt: ErrorCode, ErrorKey, ErrorMessage)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;
_method_name:=_env.MethodName;
_method:=spli_str(_method_name,':')[1];

:: Przy parsowaniu zapamiętywane jest ciasteczko sesji (Set-Cookie: SL_SessionId...)
SL_api.save_cookie(_env.InetResponse);

:: zmienna _data zawiera zawsze plik w unikodzie do odczytu
_data:=exec('datafile','sync_mwa',_env.InetResponse.Data);

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,'Formuła: \\%1/%2'['parse','businesslink3.fml']);

_content_type:=_env.InetResponse.ContentType;
{? _content_type=''
|| _txt:=exec('bin2txt','#file',_data);
   _res.MESSAGE:='Błędna odpowiedź:'@+'\n'+_txt
|? _content_type='text/html'
|| _txt:=exec('bin2txt','#file',_data);
   _res.MESSAGE:='Błędna odpowiedź:'@+'\n'+_txt
|? _content_type='text/plain'
|| _txt:=exec('bin2txt','#file',_data);
   _res.MESSAGE:='Błędna odpowiedź:'@+'\n'+_txt
||
::   _jman:=exec('json_man','__jsonm',_data);
   _jman:=exec('json_man','__jsonm',_data,'silent');
::   Testowe wyświetlenie wyniku - tylko jak jest wyłączona opcja 'silent'
   _jman.view();
   {? _jman.Valid=0
   || _txt:=exec('bin2txt','#file',_data);
      _res.MESSAGE:='JSON odpowiedzi o nieprawidłowej strukturze:'@+'\n'+_txt
   ||
::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Na początku obsługa przypadków szczególnych, które nie powinny wystąpić,
::    więc nie są uwzględniane w dedykowanych parserach
      {? _jman.isPath('nbf')
      || _res.MESSAGE:=_jman.getValue('nbf')
      |? _jman.isPath('brak.Details')
      || _res.MESSAGE:='%1: %2'
            [  $_jman.getValue('brak.Details.ErrorCode'),
               _jman.getValue('brak.Details.ErrorMessage')
            ]
      |? _jman.isPath('status')
      || {? _jman.isPath('errorMessage')
         || _res.MESSAGE:='%1: %2'
               [  $_jman.getValue('status'),
                  _jman.getValue('errorMessage')
               ]
         |? _jman.isPath('title')
         || _res.MESSAGE:='%1: %2'
               [  $_jman.getValue('status'),
                  _jman.getValue('title')
               ]
         || _res.MESSAGE:='%1: %2'[$_jman.getValue('status'),'Nieokreślony błąd']
         ?}

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Dopuszczony format komunikatu błędu: {statusCode, message}
::    - zakładamy możliwość dodatkowej obsługi wewnątrz dedykowanych parserów
      |? _jman.isPath('statusCode')
      || _status_code:=_jman.getValue('statusCode');
         _message:=_jman.getValue('message');
         _res.MESSAGE:='%1: %2'[$_status_code,_message];
::       Dla odpowiedzi "429" dajemy trochę ładniejszy komunikat
         {? _status_code=429
         || _wait:=ceil((#spli_str((_message*'ponownie za ')-_message,' ')[3])/60);
            {? _wait>0
            || _res.MESSAGE:=
                  'Limit wywołań dla metody %1 został osiągnięty.\nSpróbuj ponownie za około %2 min (%3).'
                  [_method_name,$_wait,$utc_time(utc_get()+_wait*60)]
            ?}
         ?};
::       Uruchomienie dedykowanego parserów dla błędnych odpowiedzi
::       - w przypadku "429" dla poniższych metod:
         {? _status_code=429 &
            (  _method_name='BLMT_DOCUMENT_GETINFO' |
               _method_name='BLMT_DOCUMENT_GETINFO:batch'
            )
         || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
            params_exec(_fml,'businesslink3',
               exec('obj_ntab_set','#array',
                  ,'ErrorCode',_status_code
                  ,'ErrorKey','TO_MANY_REQUESTS'
                  ,'ErrorMessage',_message
               )
            )
         ?}

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Samotny {message} albo statusCode nie obsłużone powyżej
      |? _jman.isPath('message')
      || _res.MESSAGE:=_jman.getValue('message')

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Metody "BLMT"
      |? 5+_method_name='BLMT_'
      || {? _jman.getValue('%1_Response.DATA_OUT.Status'[_method])=1
         || {? _jman.isPath('%1_Response.DATA_OUT.%1_OUT'[_method])
            || _file:=fopen(null(),'Uw',,1,1);
               {? _jman.getJSON('%1_Response.DATA_OUT.%1_OUT'[_method],_file)
               || _jman_out:=_jman.new(_file);
::                Szczegółowy opis błędu "po staremu" - do usunięcia w wersji docelowej
                  {? _jman_out.isPath('COMMON_RESULT') & _jman_out.getValue('COMMON_RESULT.status')=1
                  || {? _jman_out.typeOf('COMMON_RESULT.description')=_jman_out.Const.TYPE.STRING
                     || _res.MESSAGE:='%1: %2'
                           [$_jman_out.getValue('COMMON_RESULT.status'),_jman_out.getValue('COMMON_RESULT.description')]
                     || _res.MESSAGE:='Brak szczegółowego opisu błędu.'@
                     ?}
                  || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                   Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                     _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                     params_exec(_fml,'businesslink3',_jman_out)
                  ?}
               ?}
            ||
::             Pusty wynik zapytania
               {? _method_name='BLMT_PARTNER_FIND' |
                  _method_name='BLMT_OPERATOR_ADD_INVITE' |
                  _method_name='BLMT_SETTLEMENTS_SEND' |
                  _method_name='BLMT_DOCUMENT_INVALIDATE' |
                  _method_name='BLMT_DOCUMENT_GET_CONFIRM' |
                  _method_name='BLMT_MAPS_SEND' |
                  _method_name='BLMT_NOTIFICATION_SEND' |
                  _method_name='BLMT_KSEF_TOKEN_FIND' |
                  _method_name='BLMT_SIGNATURE_SEND:batch' |
                  _method_name='BLMT_DOCUMENT_SEND_GO'
               || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                  _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                  params_exec(_fml,'businesslink3')
               || _res.STATUS:=1;
                  _res.MESSAGE:='Pusty wynik zapytania.'@
               ?}
            ?}
         || _res.MESSAGE:='%1: %3\n%2'
               [  {? _jman.isPath('%1_Response.DATA_OUT.ErrorCode'[_method])
                  || $_jman.getValue('%1_Response.DATA_OUT.ErrorCode'[_method])
                  || $0
                  ?},
                  _jman.getValue('%1_Response.DATA_OUT.ErrorMessage'[_method]),
                  {? _jman.isPath('%1_Response.DATA_OUT.ErrorKey'[_method])
                  || _jman.getValue('%1_Response.DATA_OUT.ErrorKey'[_method])
                  || ''
                  ?}
               ];
::          Uruchomienie parsera dla błędnej odpowiedzi
            {? _method_name='BLMT_DOCUMENT_SEND' |
               _method_name='BLMT_DOCUMENT_SEND:batch' |
               _method_name='BLMT_DOCUMENT_GETINFO' |
               _method_name='BLMT_DOCUMENT_GETINFO:batch' |
               _method_name='BLMT_SIGNATURE_SEND:batch'
            || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::             Uzupełnienie opisu biznesowego w rejestrze zdarzeń
               _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
               params_exec(_fml,'businesslink3',
                  exec('obj_ntab_set','#array',
                     ,'ErrorCode',_jman.getValue('%1_Response.DATA_OUT.ErrorCode'[_method])
                     ,'ErrorKey',_jman.getValue('%1_Response.DATA_OUT.ErrorKey'[_method])
                     ,'ErrorMessage',_jman.getValue('%1_Response.DATA_OUT.ErrorMessage'[_method])
                  )
               )
            ?}
         ?}

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Metody "sl"
      |? 3+_method_name='sl_'
      || {? _jman.getValue('%1Response.Array%1Result.Status'[_method])=1
         ||
::          Spacjalna obsługa sl_TenantParamsGroupGetResult zwracanego dodatkowo dla sl_TenantParamsGet
            {? _method='sl_TenantParamsGet'
            || _my_method:='sl_TenantParamsGroupGet';
               {? _jman.isPath('%1Response.Array%1Result.%2Result'[_method,_my_method])
               || _file1:=fopen(null(),'Uw',,1,1);
                  {? _jman.getJSON('%1Response.Array%1Result.%2Result'[_method,_my_method],_file1)
                  || _jman_out1:=_jman.new(_file1);
                     _fml:='%1_parse'[exec('renameMethod','businesslink3',_my_method)];
::                   Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                     _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                     params_exec(_fml,'businesslink3',_jman_out1)
                  ?}
               ?}
            ?};
            {? _jman.isPath('%1Response.Array%1Result.%1Result'[_method])
            || _file:=fopen(null(),'Uw',,1,1);
               {? _jman.getJSON('%1Response.Array%1Result.%1Result'[_method],_file)
               || _jman_out:=_jman.new(_file);
                  _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                  _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                  params_exec(_fml,'businesslink3',_jman_out)
               ?}
            ||
::             Pusty wynik zapytania
               {? _method_name='XYZ'
               || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                  _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                  params_exec(_fml,'businesslink3')
               || _res.STATUS:=1;
                  _res.MESSAGE:='Pusty wynik zapytania.'@
               ?}
            ?}
         || _res.MESSAGE:='%1: %3\n%2'
               [  {? _jman.isPath('%1Response.Array%1Result.ErrorCode'[_method])
                  || $_jman.getValue('%1Response.Array%1Result.ErrorCode'[_method])
                  || $0
                  ?},
                  _jman.getValue('%1Response.Array%1Result.ErrorMessage'[_method]),
                  {? _jman.isPath('%1Response.Array%1Result.ErrorKey'[_method])
                  || _jman.getValue('%1Response.Array%1Result.ErrorKey'[_method])
                  || ''
                  ?}
               ]
         ?}

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    Metody "SL"
      |? 3+_method_name='SL_'
      || {? _jman.getValue('%1_Response.%1_Result.Status'[_method])=1
         || {? _jman.isPath('%1_Response.%1_Result.%2_OUT'[_method,3-_method])
            || _file:=fopen(null(),'Uw',,1,1);
               {? _jman.getJSON('%1_Response.%1_Result.%2_OUT'[_method,3-_method],_file)
               || _jman_out:=_jman.new(_file);
                  _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                  _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                  params_exec(_fml,'businesslink3',_jman_out)
               ?}
            ||
::             Pusty wynik zapytania
               {? _method_name='XYZ'
               || _fml:='%1_parse'[exec('renameMethod','businesslink3',_method_name)];
::                Uzupełnienie opisu biznesowego w rejestrze zdarzeń
                  _env.logApp(,'Formuła: \\%1/%2'[_fml,'businesslink3.fml']);
                  params_exec(_fml,'businesslink3')
               || _res.STATUS:=1;
                  _res.MESSAGE:='Pusty wynik zapytania.'@
               ?}
            ?}
         || _res.MESSAGE:='%1: %3\n%2'
               [  {? _jman.isPath('%1_Response.%1_Result.ErrorCode'[_method])
                  || $_jman.getValue('%1_Response.%1_Result.ErrorCode'[_method])
                  || $0
                  ?},
                  _jman.getValue('%1_Response.%1_Result.ErrorMessage'[_method]),
                  {? _jman.isPath('%1_Response.%1_Result.ErrorKey'[_method])
                  || _jman.getValue('%1_Response.%1_Result.ErrorKey'[_method])
                  || ''
                  ?}
               ]
         ?}
      || _res.MESSAGE:='Nieobsłużona metoda: %1.'@[_method_name]
      ?}
   ?}
?};
:: Uzupełnienie KOMM (i zarazem opisu biznesowego w rejestrze zdarzeń)
{? _res.STATUS=0
|| KOMM.error(gsub(gsub(_res.MESSAGE,'. ','.\n'),'><','>\n<'),_env.Param.DISPLAY)
?};
:: Uzupełnienie statusu w rejestrze zdarzeń...
_env.logApp('R:%1|'[$_res.STATUS]);
:: ...dodatkowo GUID dokumentu, jeżeli wystąpił
{? var_pres('DETAILS',_res)>100 & var_pres('GUID',_res.DETAILS)=type_of('') || _env.logApp(_res.DETAILS.GUID) ?};
_res


\PartnerGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Argument wywołania metody PartnerGet
::----------------------------------------------------------------------------------------------------------------------
:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

{? exec('czytaj','#stalesys',,XINFO,'BL_TP')
|| _modified_date:={? XINFO.BL_TP='' || iso_datetime_value(date(1900,1,1),time(0,0,0)) || XINFO.BL_TP ?};
   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'__ModifiedDate_cloud'),_modified_date)
?};

:: do testów
::_jman.view();

_jman.getJSON()


\PartnerGetManual_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody PartnerGetManual
::----------------------------------------------------------------------------------------------------------------------
params_exec('PartnerGet_args','businesslink3')


\PartnerGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Parsowanie wyniku metody PartnerGet
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_PARTNER_GET_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_PARTNER_GET_OUT": {
::            "PARTNERS": {
::                "PARTNER": [{
::                    "tenantIdentifier": <string | null>,
::                    "shortName": <string | null>,
::                    "longName": <string | null>,
::                    "country": <string | null>,
::                    "tenantState": <string | null>,
::                    "relationState": <string | null>,
::                    "partnerRelationState": <string | null>
::                    "TIN": <string | null>,
::                    "MyInboxes": {
::                        "Inbox": [{
::                            "_tenantIdentifier": <string>,
::                            "type": <string | null>,
::                            "address": <string | null>
::                        }]
::                    },
::                    "TenantInboxes": {
::                        "Inbox": [{
::                            "_tenantIdentifier": <string>,
::                            "type": <string | null>,
::                            "address": <string | null>
::                        }]
::                    }
::                }]
::            }
::        }
::    }
::}

:: są zmodyfikowani partnerzy
{? type_of(_jman)>100 & _jman.isPath('PARTNERS')
||
:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
   _env.logApp(,'Zmodyfikowani partnerzy:');

:: Lista partnerów
   _jman1:=_jman.new('{}');
:: Partner
   _jman2:=_jman.new('{}');
:: Lista adresów e-mail dla partnera
   _jman3:=_jman.new('{}');
:: Adres e-mail dla partnera
   _jman4:=_jman.new('{}');

   _file:=fopen(null(),'Uw',,1,1);
   _jman.getJSON('PARTNERS.PARTNER',_file);
   _jman1.load(_file);
   _size1:=_jman1.countChildren();
   {! _it1:=1.. _size1
   |! _jman2.load(_jman1.getJSON('[%1]'[$_it1]));

::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Partner: %1 / %2'[_jman2.getValue('shortName'),_jman2.getValue('longName')]);

::    Znalezienie partnera wg id tenanta i aktualizacja relacji
      _tab:=exec('get_rek','#sync_id','BL_KH_ID',_jman2.getValue('tenantIdentifier'));
      {? var_pres('_tab')>100
      || {? _tab.first()
         || _kh:=exec('FindAndGet','#table',KH,_tab.REK,,"ref()",null())
         || _kh:=null()
         ?};
         obj_del(_tab)
      || _kh:=null()
      ?};

      {? _kh
      || KH.cntx_psh();
         KH.prefix();
         {? KH.seek(_kh)
         ||
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'-> Kontrahent: %1 / %2'[KH.KOD,KH.SKR]);

            KH.BL_STAT:=exec('tenant_state','businesslink3',_jman2.getValue('tenantState'));
            {? KH.put()
            || KH_DOD.cntx_psh();
               KH_DOD.index('KH_DOD');
               KH_DOD.prefix(REF.FIRMA,KH.ref());
               {? KH_DOD.first()
               || _bl_stat:=KH_DOD.BL_STAT;
                  KH_DOD.BL_STAT:=exec('relation_state','businesslink3',_jman2.getValue('relationStateMix'));
                  {? KH_DOD.BL_STAT=exec('relation_state_active','businesslink3')
                  || KH_DOD.EFAKTURA:='B';
                     {? _bl_stat=exec('relation_state_awaiting','businesslink3')
                     || KH_DOD.BL_DATE:=date()
                     ?}
                  || {? KH_DOD.EFAKTURA='B'
                     || KH_DOD.EFAKTURA:='N'
                     ?}
                  ?};
                  _jman3.load(_jman2.getJSON('MyInboxes.Inbox'));
                  _size3:=_jman3.countChildren();
                  {! _it3:=1.. _size3
                  |! _jman4.load(_jman3.getJSON('[%1]'[$_it3]));
                     _type:=_jman4.getValue('type');
                     {? _type='ADD' | _type='INV' | _type='ORD'
                     || ($('KH_DOD.EM_'+_type))():=_jman4.getValue('address')
                     ?}
                  !};
                  KH_DOD.put()
               ?};
               KH_DOD.cntx_pop()
            ?}
         ?};
         KH.cntx_pop()
      ?}
   !}
||
:: Brak partnerów do przetworzenia - nie jest to błąd
   ~~
?};

:: Ustawienie nowego znacznika czasowego
{? exec('czytaj','#stalesys',,XINFO,'BL_TP')
|| {? _jman.getValue('__ModifiedDate_cloud')>XINFO.BL_TP
   ||
      XINFO.BL_TP:=_jman.getValue('__ModifiedDate_cloud');
      exec('zapisz','#stalesys',1,XINFO,'BL_TP');
      ~~
   ?}
?};

_res.STATUS:=1;

_res


\PartnerGetManual_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody PartnerGetManual
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_PARTNER_GET_MANUAL_OUT
::----------------------------------------------------------------------------------------------------------------------
params_exec('PartnerGet_parse','businesslink3',_a)


\PartnerFind_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa wyszukującego kontrahenta
::       (dla metody POST PartnerFind)
::   WE: params_get().env.Param.KH_DOD - KH_DOD.ref() / null()
::   WY: JSON [STRING]
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_kh_dod:=_env.Param.KH_DOD;
_nip:=_env.Param.NIP;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
{? _kh_dod<>null()
|| _env.logApp(,exec('FindAndGet','#table',KH_DOD,_kh_dod,,"'Kontrahent: %1 / %2'[KH().KOD,KH().SKR]",''))
?};
{? _nip<>''
|| _env.logApp(,'NIP: %1'[_nip])
?};

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

{? _kh_dod<>null()
|| KH_DOD.cntx_psh(); KH.cntx_psh();
   KH_DOD.prefix();
   {? KH_DOD.seek(_kh_dod)
   ||
      _tab:=exec('get_id','#sync_id','BL_KH_ID',KH_DOD.KH().uidref());
      {? _tab.first()
      || _tenantidentifier_d:=_tab.ID
      || _tenantidentifier_d:=''
      ?};

      _nip:=exec('kh_nip','businesslink3',KH_DOD.KH).NIP;

      {? _nip<>'' | _tenantidentifier_d<>''
      || _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
            _jman.setValue(_jman.addChildElement(_path,'TIN'),_nip);
            _jman.setValue(_jman.addChildElement(_path,'tenantIdentifier_d'),_tenantidentifier_d)
      ?}
   ?};
   KH_DOD.cntx_pop(); KH.cntx_pop()

|? _nip<>''
|| _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'TIN'),_nip)
?};

:: do testów
::_jman.view();

_jman.getJSON()


\PartnerFind_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi po wyszukiwaniu kontrahenta
::       (dla metody POST PartnerFind)
::   WE: [_a] - obiekt JMAN reprezentujący zawartość BLMT_PARTNER_FIND_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:={? var_pres('_a')>100 || _a || ~~ ?};

_res:=params_get().env.Param.RESULT;
_kh_dod:=params_get().env.Param.KH_DOD;
_nip:=params_get().env.Param.NIP;
_display:=params_get().env.Param.DISPLAY;

_can_continue:=1;

{? _can_continue>0 & type_of(_jman)>100 & _jman.isPath('PARTNERS')
||
   _res.DETAILS:=obj_new('TAB','WER');
   _res.DETAILS.TAB:=_tab:=tab_tmp(2
      ,'ID_WEW','STRING[20]','Identyfikator wewnętrzny KSeF'@
      ,'SHRTNAME','STRING[100]','Krótka nazwa kontrahenta'@
      ,'LONGNAME','STRING[255]','Pełna nazwa kontrahenta'@
      ,'COUNTRY','STRING[2]','Identyfikator kraju kontrahenta'@
      ,'TNNTID','STRING[50]','Unikalny identyfikator kontrahenta w usłudze'@
      ,'TNNTSTAT','STRING[40]','Status kontrahenta w usłudze'@
      ,'RELSTAT','STRING[40]','Status relacji kontrahenta'@
   );
   _res.DETAILS.WER:=_wer:=_tab.mk_sel('Wybierz kontrahenta w usłudze Businesslink'@,,,'selkhblink',,,,,'U');
   _tab.win_fld(_wer,,'SHRTNAME',,,40,,,'Nazwa krótka w usłudze'@);
   _tab.win_fld(_wer,,'LONGNAME',,,50,,,'Nazwa pełna w usłudze'@);
   _tab.win_fld(_wer,,'ID_WEW',,,16,,,'Identyfikator wewnętrzny'@);
   _tab.win_fld(_wer,,'TNNTSTAT',,,-30,,,'Status kontrahenta'@);
   _tab.win_fld(_wer,,'RELSTAT',,,-30,,,'Status relacji'@);
   _tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
   _tab.win_sel(_wer);

   _jman1:=_jman.new(_jman.getJSON('PARTNERS.PARTNER'));
   _size:=_jman1.countChildren();
   _count:=0;
   {! _it:=1.. _size
   |! _jman2:=_jman.new(_jman1.getJSON('[%1]'[$_it]));
      _tab.ID_WEW:=
         {? _jman2.typeOf('internalID')=_jman.Const.TYPE.STRING
         || _jman2.getValue('internalID')
         || ''
         ?};
      {? _tab.ID_WEW=exec('FindAndGet','#table',KH_DOD,_kh_dod,,"@.KH_DOD.KH().ID_WEW",0)
      || _tab.TNNTID:=_jman2.getValue('tenantIdentifier');
         _tab.SHRTNAME:=_jman2.getValue('shortName');
         _tab.LONGNAME:=_jman2.getValue('longName');
         _tab.TNNTSTAT:=
            {? _jman2.typeOf('tenantState')=_jman.Const.TYPE.STRING
            || exec('tenant_state','businesslink3',_jman2.getValue('tenantState'))
            || ''
            ?};
         _tab.RELSTAT:=
            {? _jman2.typeOf('relationStateMix')=_jman.Const.TYPE.STRING
            || exec('relation_state','businesslink3',_jman2.getValue('relationStateMix'))
            |? _jman2.typeOf('relationState')=_jman.Const.TYPE.STRING
            || exec('relation_state','businesslink3',_jman2.getValue('relationState'))
            || ''
            ?};
         _tab.add();
         _count+=1
      ?};
      obj_del(_jman2)
   !};

   {? ~_tab.first() || _can_continue:=0 ?};

   {? _can_continue>0
   || {? _display
      || {? _count=1 & _tab.first()
         || _selected:=1
         || _selected:=_tab.select()
         ?}
      || {? _count=1 & _tab.first()
         || _selected:=1
         || _selected:=0
         ?}
      ?}
   ?};

   {? _can_continue>0 & _display & _selected>0
   ||
      FUN.info(
         'Kontrahent: %1 (%2)\n\n'
         'Identyfikator wewnętrzny KSeF: %3\n\n'
         'Status kontrahenta: %4\n'
         'Status relacji: %5\n\n'
         'Identyfikator dzierżawcy: %6'
         [  _tab.SHRTNAME,
            _tab.LONGNAME,
            {? _tab.ID_WEW='' || 'nie posiada' || _tab.ID_WEW ?},
            _tab.TNNTSTAT,
            {? _tab.RELSTAT='' || 'nie jest ustalony' || _tab.RELSTAT ?},
            _tab.TNNTID
         ]
      )
   ?};

   {? _can_continue>0 & _selected>0 & _kh_dod<>null()
   || KH_DOD.cntx_psh();
      KH_DOD.prefix();
      {? KH_DOD.seek(_kh_dod)
      || _bl_stat:=KH_DOD.BL_STAT;
         KH_DOD.BL_STAT:=_tab.RELSTAT;
         {? KH_DOD.BL_STAT=exec('relation_state_active','businesslink3')
         || KH_DOD.EFAKTURA:='B';
            {? _bl_stat=exec('relation_state_awaiting','businesslink3')
            || KH_DOD.BL_DATE:=date()
            ?}
         || {? KH_DOD.EFAKTURA='B'
            || KH_DOD.EFAKTURA:='N'
            ?}
         ?};
         KH_DOD.put();

         KH.cntx_psh();
         KH.prefix();
         {? KH.seek(KH_DOD.KH)
         || KH.BL_STAT:=_tab.TNNTSTAT;
            KH.put();
            {? _tab.TNNTID<>''
            || exec('add_id','#sync_id','BL_KH_ID',KH.uidref(),_tab.TNNTID)
            ?}
         ?};
         KH.cntx_pop()
      ?};
      KH_DOD.cntx_pop()
   ?}
|| _can_continue:=0
?};

{? _can_continue=0
|| {? _display
   || FUN.info('Brak kontrahenta w usłudzie.\nNależy użyć zaproszenia aby go utworzyć.'@)
   ?};
   {? _kh_dod<>null()
   || KH_DOD.cntx_psh();
      KH_DOD.prefix();
      {? KH_DOD.seek(_kh_dod)
      || KH_DOD.BL_STAT:='';
         {? KH_DOD.EFAKTURA='B' || KH_DOD.EFAKTURA:='N' ?};
         KH_DOD.put()
      ?};
      KH_DOD.cntx_pop();

      KH.cntx_psh();
      KH.prefix();
      {? KH.seek(KH_DOD.KH)
      || KH.BL_STAT:='';
         KH.put();
         exec('del_rek','#sync_id','BL_KH_ID',KH.uidref())
      ?};
      KH.cntx_pop()
   ?}
?};

_res.STATUS:=1;

_res


\PartnerAddInvite_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa zapraszającego kontrahenta
::       (dla metody POST PartnerAddInvite)
::   WE: params_get().env.Param.KH_DOD - KH_DOD.ref() / null()
::   WY: JSON [STRING]
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_param:=_env.Param;
_kh_dod:=_param.KH_DOD;
_mail:=_param.MAIL;
_firstname:=_param.FIRSTNAME;
_surname:=_param.SURNAME;
_language:=_param.LANGUAGE;
_invitername:=_param.INVNAME;
_invitermail:=_param.INVMAIL;
_skip_invitations:=_param.SKIPINV;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
{? _kh_dod<>null()
|| _env.logApp(,exec('FindAndGet','#table',KH_DOD,_kh_dod,,"'Kontrahent: %1 / %2'[KH().KOD,KH().SKR]",''))
?};

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

{? _kh_dod<>null()
|| KH_DOD.cntx_psh(); KH.cntx_psh();
   KH_DOD.prefix();
   {? KH_DOD.seek(_kh_dod)
   ||
      _tab:=exec('get_id','#sync_id','BL_KH_ID',KH_DOD.KH().uidref());
      {? _tab.first()
      || _tenantidentifier_d:=_tab.ID
      || _tenantidentifier_d:=''
      ?};

      _nip:=exec('kh_nip','businesslink3',KH_DOD.KH).NIP;

      _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
         _jman.setValue(_jman.addChildElement(_path,'tenantIdentifier_d'),_tenantidentifier_d);
         _jman.setValue(_jman.addChildElement(_path,'TIN'),_nip);
         _jman.setValue(_jman.addChildElement(_path,'shortName'),KH.SKR);
         _jman.setValue(_jman.addChildElement(_path,'longName'),KH.NAZ_P);
         _jman.setValue(_jman.addChildElement(_path,'adminFirstname'),_firstname);
         _jman.setValue(_jman.addChildElement(_path,'adminSurname'),_surname);
         _jman.setValue(_jman.addChildElement(_path,'adminMail'),_mail);
         _jman.setValue(_jman.addChildElement(_path,'adminDefaultLanguage'),_language);
         _jman.setValue(_jman.addChildElement(_path,'inviterName'),_invitername);
         _jman.setValue(_jman.addChildElement(_path,'inviterMail'),_invitermail);
         _jman.setValue(_jman.addChildElement(_path,'skipInvitations'),_skip_invitations)
   ?};
   KH_DOD.cntx_pop(); KH.cntx_pop()
?};

:: do testów
::_jman.view();

_jman.getJSON()


\PartnerAddInvite_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi po zaproszeniu kontrahenta
::       (dla metody POST PartnerAddInvite)
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_PARTNER_ADD_INVITE_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_res:=params_get().env.Param.RESULT;
_kh_dod:=params_get().env.Param.KH_DOD;
_display:=params_get().env.Param.DISPLAY;

{? _kh_dod<>null()
|| {? _jman.typeOf('relationStateMix')=_jman.Const.TYPE.STRING
   || _relationState:=_jman.getValue('relationStateMix')
   |? _jman.typeOf('relationState')=_jman.Const.TYPE.STRING
   || _relationState:=_jman.getValue('relationState')
   || _relationState:=''
   ?};
   {? _jman.typeOf('tenantState')=_jman.Const.TYPE.STRING
   || _tenantState:=_jman.getValue('tenantState')
   || _tenantState:=''
   ?};
   {? _display
   || FUN.info(
         'Status kontrahenta: %1\n'
         'Status relacji: %2\n\n'
         'Identyfikator dzierżawcy: %3'
         [  exec('tenant_state','businesslink3',_tenantState),
            exec('relation_state','businesslink3',_relationState),
            _jman.getValue('tenantIdentifier_d')
         ]
      )
   ?};

   KH_DOD.cntx_psh();
   KH_DOD.prefix();
   {? KH_DOD.seek(_kh_dod)
   || {? _relationState<>''
      || KH_DOD.BL_STAT:=exec('relation_state','businesslink3',_relationState);
         {? KH_DOD.BL_STAT=exec('relation_state_active','businesslink3')
         || KH_DOD.EFAKTURA:='B';
            KH_DOD.BL_DATE:=date()
         ?};
         KH_DOD.put()
      ?};
      {? _tenantState<>''
      || KH.cntx_psh();
         KH.prefix();
         {? KH.seek(KH_DOD.KH)
         || KH.BL_STAT:=exec('tenant_state','businesslink3',_tenantState);
            KH.put();
            exec('add_id','#sync_id','BL_KH_ID',KH.uidref(),_jman.getValue('tenantIdentifier_d'))
         ?};
         KH.cntx_pop()
      ?}
   ?};
   KH_DOD.cntx_pop();

   _res.STATUS:=1
?};

_res


\OperatorAddInvite_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa zapraszającego operatora
::       (dla metody POST OperatorAddInvite)
::   WE: params_get().env.Param.KH_OSOB - KH_OSOB.ref() / null()
::   WY: JSON [STRING]
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_param:=_env.Param;
_kh_dod:=_param.KH_DOD;
_mail:=_param.MAIL;
_firstname:=_param.FIRSTNAME;
_surname:=_param.SURNAME;
_language:=_param.LANGUAGE;
_skip_invitations:=_param.SKIPINV;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
{? _kh_dod<>null()
|| _env.logApp(,exec('FindAndGet','#table',KH_DOD,_kh_dod,,"'Kontrahent: %1 / %2'[KH().KOD,KH().SKR]",''))
?};

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

{? _kh_dod<>null()
|| KH_DOD.cntx_psh(); KH.cntx_psh();
   KH_DOD.prefix();
   {? KH_DOD.seek(_kh_dod)
   ||
      _tab:=exec('get_id','#sync_id','BL_KH_ID',KH_DOD.KH().uidref());
      {? _tab.first()
      || _tenantidentifier_d:=_tab.ID
      || _tenantidentifier_d:=''
      ?};

      _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
         _jman.setValue(_jman.addChildElement(_path,'tenantIdentifier_d'),_tenantidentifier_d);
         _jman.setValue(_jman.addChildElement(_path,'firstname'),_firstname);
         _jman.setValue(_jman.addChildElement(_path,'surname'),_surname);
         _jman.setValue(_jman.addChildElement(_path,'mail'),_mail);
         _jman.setValue(_jman.addChildElement(_path,'defaultLanguage'),_language);
         _jman.setValue(_jman.addChildElement(_path,'skipInvitations'),_skip_invitations)
   ?};
   KH_DOD.cntx_pop(); KH.cntx_pop()
?};

:: do testów
::_jman.view();

_jman.getJSON()


\OperatorAddInvite_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi po zaproszeniu operatora
::       (dla metody POST OperatorAddInvite)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_res:=_env.Param.RESULT;

_res.STATUS:=1;
_res


\DocumentSend_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa wysyłającego dokument
::       (dla metody POST DocumentSend)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::       params_get().env.Param.CHECK - 1-tylko do sprawdzenia w BusinessCheck, nie wysyła do KSeF / 0
::       params_get().env.Param.NAZ_DOK - akronim pola, w którym przechowywany jest załącznik
::   WY: JSON [FILE] / ~~
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;
_check:=_env.Param.CHECK;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

:: jeśli wystąpią wyjątki w budowaniu JSONów - zerować zmianną _all_ok
_all_ok:=1;

DOKUM.cntx_psh(); DOKUMZ.cntx_psh(); FIRMA.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
:: Tryb wysyłki do Businesscheck zależny od typu dokumentu, dla trybu sprawdzania zawsze 1)
   _send_to_businesscheck:={? _check || 1 || exec('sendToBusinessCheck','zbl_dok',DOKUM.ref()) ?};

   exec('czytaj','#stalesys',,XINFO,'NIP');
   exec('czytaj','#stalesys',,KST,'ID_WEW','NAZWA');

   _recipient_emails:='';
   _direction:='';
   _customer_tin:='';
   _customer_name:='';
   {? var_pres('GRVAT',KST)>0
   || _subject3_tin:={? KST.GRVAT=null() || '' || {? var_pres('ID_WEW',KST)>0 & KST.ID_WEW<>'' || KST.ID_WEW || '' ?} ?};
      _subject3_name:={? KST.GRVAT=null() || '' || KST.NAZWA ?}
   || _subject3_tin:='';
      _subject3_name:=''
   ?};

:: Decyzja, czy:
:: - dokument wysyłany w celu OCR (musi być plik graficzny oznaczony do OCR, wróci uzupełniony o xml)
:: - dokument wysyłany do kontrahenta
   DOKUMZ.index('KOCR');
   DOKUMZ.prefix(DOKUM.ref(),'T');
   _to_ocr:=DOKUMZ.first();

   {? _to_ocr
   || _tenantidentifier_d:=exec('tenant','businesslink3');
      _direction:='IN';
      _include_to_email:=0;
::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Dokument z kontaktów do OCR')
   ||
::    Kontrahent bezpośrednio z DOKUM.KH
      KH.cntx_psh();
      KH.prefix();
      {? KH.seek(DOKUM.KH)
      || exec('kh_dod_ini','kontrahent',KH.ref(),0);
         {? KH_DOD.EFAKTURA='B'
         || _tab:=exec('get_id','#sync_id','BL_KH_ID',KH.uidref());
            {? _tab.first()
            || _tenantidentifier_d:=_tab.ID
            || _tenantidentifier_d:=''
            ?};
            _include_to_email:=exec('FindInSet','#table','KH_DOD','KH_DOD',KH.ref(),REF.FIRMA,"KH_DOD.BL_INCL='T'",,,0);
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'Kontrahent Businesslink: %1 / %2'[KH.KOD,KH.SKR])
         |? KH_DOD.EFAKTURA='U'
         || _tenantidentifier_d:=exec('tenant','businesslink3');
            _include_to_email:=0;
            _recipient_emails:=exec('email_bl_simple','kontrahent',KH.ref(),DOKUM.KH_ODB);
            _direction:='OUT';
            _customer_tin:=KH.NIP;
            _customer_name:=KH.NAZ;
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'Odbiorcy: %1'[_recipient_emails]);
            _env.logApp(,'Kontrahent (e-faktura): %1 / %2'[KH.KOD,KH.SKR])
         || _tenantidentifier_d:=exec('tenant','businesslink3');
            _include_to_email:=0;
            _direction:='OUT';
            _customer_tin:=KH.NIP;
            _customer_name:=KH.NAZ;
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'Kontrahent bez zgody: %1 / %2'[KH.KOD,KH.SKR])
         ?}
      || _tenantidentifier_d:='';
         _include_to_email:=0
      ?};
      KH.cntx_pop()
   ?};

:: Pola z DOKUM
   _external_doc_id:=DOKUM.uidref();
   _symbol:={? DOKUM.SYM_SYS='' || DOKUM.SYM || DOKUM.SYM_SYS ?};
   _opis:=DOKUM.KR_OP;

:: docInfoCallBackURL - jeśli jest określony (docelowo tylko dla dokumentów skierowanych do KSeF lub do BC)
   _callback_url:=exec('docinfo_callback_url','businesslink3');

:: Typy:
::INV (INVOICE - faktura)
::INV_CORR (INVOICE_CORRECTION - faktura korygująca)
::INV_DUP (INVOICE_DUPLICATE - duplikat faktury)
::INV_CORR_DUP (INVOICE_CORRECTION_DUPLICATE - duplikat faktury korygującej)
::ORD (ORDER - zamówienie)
::DEM4PAY (DEMAND FOR PAYMENT - wezwanie do zapłaty)
::BAL_CONFIRM (BALANCE_CONFIRMATION - potwierdzenie sald)
::DOC - inny dokument

::{? FAKS.SZ='Z' & FAKS.T().KSEF='T'

   _ksef_err:='N';
:: faktura utworzona na podstawie dokumentu księgowego zadekretowanego z logistyki
   {? var_pres('DOKR',DOKUM)>0 & DOKUM.REFSQL<>'' & DOKUM.AUTOADD='T' & ref_tab(DOKUM.REFSQL)=FAKS & DOKUM.DOKR<>''
   || _typ:={? _check
            || 'INV_CHECK'
            || {? DOKUM.BL_TYPE*'DKS' || DOKUM.BL_TYPE-4 || DOKUM.BL_TYPE ?}
            ?};
      _data_wyst:=exec('FindAndGet','#table',DOK,DOKUM.DOKR,,"iso_datetime_value(DTO,time(0,0,0))",'');
      _data_sp:=exec('FindAndGet','#table',DOK,DOKUM.DOKR,,"iso_datetime_value(DOP,time(0,0,0))",'');
      _wal:=exec('FindAndGet','#table',DOK,DOKUM.DOKR,,"DOK.WAL().KOD",'');
      _kwota_brutto:=exec('dok_wart','edi_fo_ksef_fks',DOKUM.DOKR,'BRUTTO');
      _kwota_netto:=exec('dok_wart','edi_fo_ksef_fks',DOKUM.DOKR,'NETTO');
      _ksef_err:=exec('FindAndGet','#table',DOK,DOKUM.DOKR,,"DOK.KSEF_ERR",'');
      ~~
:: Część pól wypełniona tylko dla faktur
   |? DOKUM.REFSQL<>'' & DOKUM.AUTOADD='T' & ref_tab(DOKUM.REFSQL)=FAKS
   || _typ:={? _check
            || 'INV_CHECK'
            || {? DOKUM.BL_TYPE*'DKS' || DOKUM.BL_TYPE-4 || DOKUM.BL_TYPE ?}
            ?};
::    Ewentualny wytrych, gdyby typ nie był wpisany w DOKUM
::      {? _typ='' || _typ:='INV' ?};
      _data_wyst:=exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"iso_datetime_value(DW,time(0,0,0))",'');
      _data_sp:=exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"iso_datetime_value(D,time(0,0,0))",'');
      _wal:=exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"FAKS.WAL().KOD",'');
      _kwota_brutto:=exec('dok_war','edi_fo_ufd',DOKUM.REFSQL,'BRUTTO');
      _kwota_netto:=exec('dok_war','edi_fo_ufd',DOKUM.REFSQL,'NETTO');
      _ksef_err:=exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"FAKS.KSEF_ERR",'');
::      _nip:=exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"NIP",'');
      ~~
:: faktura utworzona na podstawie dokumentu księgowego
   |? DOKUM.REFSQL<>'' & DOKUM.AUTOADD='T' & ref_tab(DOKUM.REFSQL)=DOK
   || _typ:={? _check
            || 'INV_CHECK'
            || {? DOKUM.BL_TYPE*'DKS' || DOKUM.BL_TYPE-4 || DOKUM.BL_TYPE ?}
            ?};
      _data_wyst:=exec('FindAndGet','#table',DOK,DOKUM.REFSQL,,"iso_datetime_value(DTO,time(0,0,0))",'');
      _data_sp:=exec('FindAndGet','#table',DOK,DOKUM.REFSQL,,"iso_datetime_value(DOP,time(0,0,0))",'');
      _wal:=exec('FindAndGet','#table',DOK,DOKUM.REFSQL,,"DOK.WAL().KOD",'');
      _kwota_brutto:=exec('dok_wart','edi_fo_ksef_fks',DOKUM.REFSQL,'BRUTTO');
      _kwota_netto:=exec('dok_wart','edi_fo_ksef_fks',DOKUM.REFSQL,'NETTO');
      _ksef_err:=exec('FindAndGet','#table',DOK,DOKUM.REFSQL,,"DOK.KSEF_ERR",'');
      ~~
:: zamówienie dostawy
   |? DOKUM.REFSQL<>'' & DOKUM.AUTOADD='T' & ref_tab(DOKUM.REFSQL)=ZD_NAG
   || _typ:='ORD';
      _data_wyst:=exec('FindAndGet','#table',ZD_NAG,DOKUM.REFSQL,,"iso_datetime_value(DATA,time(0,0,0))",'');
      _data_sp:='';
      _wal:=exec('FindAndGet','#table',ZD_NAG,DOKUM.REFSQL,,"ZD_NAG.WAL().KOD",'');
      _kwota_brutto:=0;
      _kwota_netto:=exec('FindAndGet','#table',ZD_NAG,DOKUM.REFSQL,,"ZD_NAG.WARW",0);
      ~~
:: Inny dokument
   |? _to_ocr=0
   || _typ:='DOC';
      _data_wyst:=iso_datetime_value(date(),time(0,0,0));
      _data_sp:='';
      _wal:='';
      _kwota_brutto:=0;
      _kwota_netto:=0;
::      _nip:='';
      ~~
:: Ten przypadek obecnie tylko dla wysyłki do OCR - zakładam, że jest to faktura,
:: ale docelowo nalezy uzupełnić pole DOKUM.BL_TYPE i brać z niego
   || _typ:='INV';
      _data_wyst:=iso_datetime_value(date(),time(0,0,0));
      _data_sp:='';
      _wal:='';
      _kwota_brutto:=0;
      _kwota_netto:=0;
::      _nip:='';
      ~~
   ?};

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
   _env.logApp(,'Dokument: %1'[_symbol]);
   _env.logApp(,'Typ dokumentu: %1'[_typ]);
   _env.logApp(,'BusinessCheck: %1'[$_send_to_businesscheck]);

:: Nadgrywanie dokumentu, jeżeli poszedł do KSeF, ale był błąd
   {? 5+DOKUM.KSEFSTAT='ERROR' | _ksef_err='T'
   || _overwrite:=1
   || _overwrite:=0
   ?};

::{
::    "DATA_IN": {
::        "externalDocId": <string>,
::        "docKind": <string>,
::        "docNumber": <string>,
::        "docDate": <dateTime>,
::        "businesslinkDocIdentifier": <string | null>,
::        "tenantIdentifier_d": <string>,
::        "recipientEmails": <string>,
::        "direction": <string>,
::        "sendToKSeF": <unsignedByte | null>,
::        "sendToBusinessCheck": <unsignedByte | null>,
::        "loginNameKSeF": <string | null>,
::        "overwriteExistingDoc": <unsignedByte | null>,
::        "docInfoCallBackURL": <string | null>,
::        "ATTRIBUTES": {
::            "ATTRIBUTE": [{
::                "attrName": <string>,
::                "attrFormat": <string>,
::                "attrValue": <string>
::            }]
::        },
::        "ATTACHMENTS": {
::            "ATTACHMENT": [{
::                "externalAttachmentId": <string>,
::                "attachType": <string>,
::                "isCompressed": <unsignedByte>,
::                "attachName": <string>,
::                "attachBody": <base64Binary>,
::                "AttachSize": <long | null>,
::                "businesslinkAttachIdentifier": <string | null>,
::                "includeToEmail": <unsignedByte>,
::                "attachDesc": <string>
::            }]
::        }
::    }
::}

   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'externalDocId'),_external_doc_id);
      _jman.setValue(_jman.addChildElement(_path,'docKind'),_typ);
      _jman.setValue(_jman.addChildElement(_path,'docNumber'),_symbol);
      _jman.setValue(_jman.addChildElement(_path,'docDate'),_data_wyst);
      _jman.setValue(_jman.addChildElement(_path,'tenantIdentifier_d'),_tenantidentifier_d);
      _jman.setValue(_jman.addChildElement(_path,'sendToBusinessCheck'),_send_to_businesscheck);
      {? exec('is_dokum_ksef','zbl_dok',DOKUM.ref()) & ~_check
      || _jman.setValue(_jman.addChildElement(_path,'sendToKSeF'),1);
         _jman.setValue(_jman.addChildElement(_path,'loginNameKSeF'),DOKUM.KSEFAUTH().KOD);
         {? _overwrite
         || _jman.setValue(_jman.addChildElement(_path,'overwriteExistingDoc'),_overwrite)
         ?}
      ?};
      {? _recipient_emails<>''
      || _jman.setValue(_jman.addChildElement(_path,'recipientEmails'),_recipient_emails)
      ?};
      {? _direction<>''
      || _jman.setValue(_jman.addChildElement(_path,'direction'),_direction)
      ?};
      {? _callback_url<>''
      || _jman.setValue(_jman.addChildElement(_path,'docInfoCallBackURL'),_callback_url)
      ?};
      _jman.setObject(_path1:=_jman.addChildElement(_path,'ATTRIBUTES'),'{}');
         _jman.setObject(_path1:=_jman.addChildElement(_path1,'ATTRIBUTE'),'[]');
::          Wzorzec dla atrybutów
            _jman1.load('{}');
            _jman1.setValue(_jman1.addChildElement('','attrName'),'');
            _jman1.setValue(_jman1.addChildElement('','attrFormat'),'');
            _jman1.setValue(_jman1.addChildElement('','attrValue'),'');

            {? _data_sp<>''
            || _jman1.setValue('attrName','SalesDate');
               _jman1.setValue('attrFormat','DATETIME');
               _jman1.setValue('attrValue',_data_sp);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

            {? _kwota_brutto<>0
            || _jman1.setValue('attrName','TotalGrossAmount');
               _jman1.setValue('attrFormat','MONEY');
               _jman1.setValue('attrValue',_jman1.Const.TYPE.STRING,_kwota_brutto);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

            {? _kwota_netto<>0
            || _jman1.setValue('attrName','TotalNetAmount');
               _jman1.setValue('attrFormat','MONEY');
               _jman1.setValue('attrValue',_jman1.Const.TYPE.STRING,_kwota_netto);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

            {? _wal<>''
            || _jman1.setValue('attrName','CurrencyCode');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',_wal);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

::            _jman1.setValue('attrName','PayerTIN');
::            _jman1.setValue('attrFormat','TEXT');
::            _jman1.setValue('attrValue',_nip);
::            _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON());

            {? _opis<>''
            || _jman1.setValue('attrName','Description');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',exec('strcut','#string',_opis,100));
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

::          Przy odbiorze będzie łatwiej zidentyfikować wystawiającego fakturę, gdy ustawiony będzie ten atrybut
            {? _to_ocr
            || _jman1.setValue('attrName','externalClientCode');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',exec('FindAndGet','#table',KH,DOKUM.KH,,"uidref()",''));
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

::          Atrybuty dla wysyłki uproszczonej
            {? _customer_tin<>''
            || _jman1.setValue('attrName','CustomerTIN');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',_customer_tin);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};
            {? _customer_name<>''
            || _jman1.setValue('attrName','CustomerName');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',_customer_name);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

::          Atrybuty dla podmiotu 3 w KSeF
            {? _subject3_tin<>''
            || _jman1.setValue('attrName','Subject3TIN');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',_subject3_tin);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};
            {? _subject3_name<>''
            || _jman1.setValue('attrName','Subject3Name');
               _jman1.setValue('attrFormat','TEXT');
               _jman1.setValue('attrValue',_subject3_name);
               _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON())
            ?};

      _jman.setObject(_path1:=_jman.addChildElement(_path,'ATTACHMENTS'),'{}');
         _jman.setObject(_path1:=_jman.addChildElement(_path1,'ATTACHMENT'),'[]');
::          Wzorzec dla załączników
            _jman1.load('{}');
            _jman1.setValue(_jman1.addChildElement('','externalAttachmentId'),'');
            _jman1.setValue(_jman1.addChildElement('','attachType'),'');
            _jman1.setValue(_jman1.addChildElement('','isCompressed'),0);
            _jman1.setValue(_jman1.addChildElement('','attachName'),'');
            _jman1.setValue(_jman1.addChildElement('','attachBody'),'');
            _jman1.setValue(_jman1.addChildElement('','includeToEmail'),0);

   _is_compressed:=(exec('get','#params',100364)='T');

   {? _to_ocr
   || DOKUMZ.index('KOCR');
      DOKUMZ.prefix(DOKUM.ref(),'T')
   || DOKUMZ.index('DISP');
      DOKUMZ.prefix(DOKUM.ref())
   ?};
   {? DOKUMZ.first()
   || {!
      |? {? _all_ok
         || _filename:=DOKUMZ.bl_info('DOKUM','NAME');
            _ext:=DOKUMZ.bl_info('DOKUM','EXTENSION');
            _jman1.setValue('externalAttachmentId',DOKUMZ.uidref());
            _jman1.setValue('attachType',
               {? _to_ocr
               || {? DOKUMZ.P_OCR='T' || 'DOCIMAGE' || 'ATTACHMENT' ?}
               || {? _ext='pdf' & DOKUMZ.DOKUM=DOKUM.DOKUMI
                  || 'DOCIMAGE'
                  |? _ext='xml' &
                     ( DOKUMZ.BL_TYPE=exec('bl_type_ksef_inv','zbl_dok') |
                       DOKUMZ.BL_TYPE=exec('bl_type_ksef_inv_corr','zbl_dok') |
                       DOKUMZ.BL_TYPE=exec('bl_type_ksef_dks_inv','zbl_dok') |
                       DOKUMZ.BL_TYPE=exec('bl_type_ksef_dks_inv_corr','zbl_dok')
                     )
                  || exec('attach_type','businesslink3',DOKUMZ.SCHEMAT,'KSEF-INVOICE')
                  |? _ext='xml' &
                     ( DOKUMZ.BL_TYPE=exec('bl_type_inv','zbl_dok') |
                       DOKUMZ.BL_TYPE=exec('bl_type_inv_corr','zbl_dok')
                     )
                  || exec('attach_type','businesslink3',DOKUMZ.SCHEMAT,'UFD-INVOICE')
                  |? _ext='xml' &
                     DOKUMZ.BL_TYPE=exec('bl_type_ord_dzk','zbl_dok')
                  || 'UFD-ORDER'
                  || 'ATTACHMENT'
                  ?}
               ?}
            );
            _jman1.setValue('isCompressed',_is_compressed);
            _jman1.setValue('attachName',_filename);
            _all_ok:=_jman1.setValue('attachBody',
               {? _is_compressed
               || exec('dokumz_pack','businesslink3',DOKUMZ,'DOKUM')
               || fopen(DOKUMZ.DOKUM,'br',,,1)
               ?},'encode'
            );
            _jman1.setValue('includeToEmail',_include_to_email);

            _file1:=fopen(null(),'Uw',,1,1);
            {? _jman1.getJSON(_file1)
            || _jman.setObject(_jman.addChildElement(_path1),_file1)
            ?};
            obj_del(_file1)
         ?};

         DOKUMZ.next()
      !}
   ?}
?};
DOKUM.cntx_pop(); DOKUMZ.cntx_pop(); FIRMA.cntx_pop();

:: do testów
::_jman.view();

_file:=fopen(null(),'Uw',,1,1);
{? _all_ok & _jman.getJSON(_file) || _file || ~~ ?}


\DocumentSendBatch_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Generuje JSONa wysyłającego dokument
::       (dla metody POST DocumentSendBatch)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::       params_get().env.Param.NAZ_DOK - akronim pola, w którym przechowywany jest załącznik
::   WY: JSON [FILE] / ~~
::----------------------------------------------------------------------------------------------------------------------
params_exec('DocumentSend_args','businesslink3')


\DocumentSend_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi dotyczącej wysyłki dokumentu
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_SEND_OUT
::            obiekt: ErrorCode, ErrorKey, ErrorMessage
::----------------------------------------------------------------------------------------------------------------------
_res:=params_get().env.Param.RESULT;
_dokum:=params_get().env.Param.DOKUM;
_display:=params_get().env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_DOCUMENT_SEND_OUT": {
::            "businesslinkDocIdentifier": <string>,
::            "externalDocId": <string>,
::            "ATTACHMENTS": {
::                "ATTACHMENT": [{
::                    "businesslinkAttachIdentifier": <string>,
::                    "externalAttachmentId": <string>
::                }]
::            }
::        }
::    }
::}

:: 1401     NO_TENANT_CONTEXT                       Brak możliwości wyznaczenia kontekstu dzierżawcy dla użytkownika [^1]
:: 1030401  NO_TENANT_FOR_INDETIFIER                Brak firmy o identyfikatorze [^1]
:: 1030402  NO_ACTIVE_TENANT_RELATION               Firma [^1] nie ma aktywnej relacji z Twoją firmą. Nie zaakceptowała zaproszenia lub zawiesiła relację. Dostarczenie dokumentu nie jest możliwe.
:: 1030403  NO_ACTIVE_TENANT                        Firma [^1] nie jest jeszcze aktywna w platformie Businesslink. Dostarczenie dokumentu będzie możliwe po zakończeniu procesu rejestracji przez kontrahenta i akceptacji nawiązania relacji z Twoją firmą.
:: 1030404  NO_ACTIVE_MY_TENANT_RELATION            Twoja firma nie ma ustawionej aktywnej relacji z firmą [^1]. Dostarczenie dokumentu nie jest możliwe.
:: 1030405  ATTACHMENTS_SIZE_EXCEEDED               Nie można dostarczyć dokumentu ^1 do usługi. Sumaryczny rozmiar załączników dla dokumentu przekroczył ^2 MB.
:: 1030406  KSEF_LOGINNAME_NEEDED                   Pole loginNameKSeF nie może być puste.
:: 1030407  KSEF_LOGINNAME_NOACTIVETOKEN            Brak aktywnego Tokena KSeF dla loginu ^1 lub login nie ma uprawnień do wysyłania do KSeF.
:: 1030408  KSEF_NOKSEFINVOICE_FILE                 Dokument nie posiada załącznika KSEF-INVOICE. Nie może zostać wysłany do KSeF.
:: 1030409  KSEF_INTEGRATION_DISABLED               To konto ma wyłączoną integrację z KSeF.
:: 1030410  KSEF_P3_LICENSE_DISABLED                Brak licencji na wysyłanie dokumentów do KSeF w imieniu firmy trzeciej.
:: 1030411  KSEF_P3_INCORECT_DOCKIND                Błędny rodzaj dokumentu dla wysyłki dokumentów do KSeF w imieniu firmy trzeciej.
:: 1030412  SIMPLIFIED_MODE_LACK_OF_SENDER_NAME     Nie można wysyłać dokumentów w trybie uproszczonym bez podania Nazwy kontrahenta.
:: 1030413  EXTERNALDOCID_EXISTS                    Istnieje dokument o podanym identyfikatorze zewnętrznym [^1]
:: 1030414  KSEF_P3_NO_TIN_OR_INCORECT_TIN          Wysyłasz dokument o rodzaju sugerującym wysyłkę dokumentu do KSeF w ramach firmy trzeciej. Uzupełnij dane nadawcy lub podaj NIP nadawcy różny od NIPu firmy wysyłającej.
:: 1030415  KSEF_P3_ONLY_SIMPLIFIED_MODE            Wysyłka dokumentu do KSEF w ramach firmy trzeciej możliwa tylko w trybie wysyłki uproszczonej.
:: 1030416  WRONG_DOCKIND                           Rodzaju dokumentu C-INV_OUT wolno używać tylko gdy wysyłamy dokument do KSeF.
:: 1030417  SIMPLIFIED_MODE_LACK_OF_RECIPIENT_MAIL  Nie można wysyłać dokumentów w trybie uproszczonym bez podania adresu e-mail odbiorcy

DOKUM.cntx_psh(); DOKUMZ.cntx_psh();
DOKUM.prefix(); DOKUMZ.prefix();
{? DOKUM.seek(_dokum)
||
:: Obsługa sytuacji nadzwyczajnych (obiekt z błędem)
   {? var_pres('_a')=type_of(obj_new(1))
   || _obj:=_a;
      {? _obj.ErrorKey='KSEF_LOGINNAME_NOACTIVETOKEN'
      || DOKUM.BL_STAT:=exec('waiting_auth','zbl_stat')
      ||
::       Znacznik czasowy ostatniej błędnej transmisji, licznik błędów transmisji
         DOKUM.BL_ERRTM:=utc_get();
         DOKUM.BL_ERRCN+=1
      ?};
      DOKUM.put()
   || _jman:=_a;
::    Decyzja, czy:
::    - dokument wysyłany w celu OCR (musi być plik graficzny oznaczony do OCR, wróci uzupełniony o xml)
::    - dokument wysyłany do kontrahenta
      DOKUMZ.index('KOCR');
      DOKUMZ.prefix(DOKUM.ref(),'T');
      _to_ocr:=DOKUMZ.first();

      DOKUM.BL_GUID:=_res.DETAILS.GUID:=_jman.getValue('businesslinkDocIdentifier');
      DOKUM.BATCH:=_res.DETAILS.BATCH;
::    Jeśli brak kontroli BusinessCheck (kod 0) to nawijam status dla natychmiastowej zmiany na tabeli nadrzędnej
::    W przypadku kontroli (kody 1 / 2) byłoby to niepożądane bo statusy ustawiamy zgodnie z odpowiedziami BLMT_DOCUMENT_GETINFO
      {? exec('upgrade2325_blbc1','zbl')
      || {? exec('sendToBusinessCheck','zbl_dok',DOKUM.ref())=0 || DOKUM.KSEFSTAT:='READY' ?}
      || DOKUM.KSEFSTAT:='READY'
      ?};
      DOKUM.KSEF2SGN:='N';
      DOKUM.INFO_END:='N';
      DOKUM.BL_GETTM:=0;
      DOKUM.BL_GETCN:=0;
::    Od razu ustawiam znaczniki, bo nie ma funkcji weryfikującej
      DOKUM.BSEND:='T';
      _pos:=DOKUM.SW*^160;
      DOKUM.SW:={? _pos=0 || DOKUM.SW+^160 || _pos+DOKUM.SW ?}+'Przekazano do Businesslink '+$date()+' '+$time();
      DOKUM.BL_STAT:={? _to_ocr || exec('sent_to_ocr','zbl_stat') || exec('send','zbl_stat') ?};
      {? _to_ocr || DOKUM.BL_OCR:=exec('sent_to_ocr','zbl_stat') ?};
      {? DOKUM.put()
      || _res.STATUS:=1
      || _res.MESSAGE:='Błąd aktualizacji dokumentu.'@
      ?};

      DOKUMZ.prefix();
      _jman1:=_jman.new(_jman.getJSON('ATTACHMENTS.ATTACHMENT'));
      _size:=_jman1.countChildren();
      {! _it:=1.. _size
      |! _jman2:=_jman.new(_jman1.getJSON('[%1]'[$_it]));
         {? DOKUMZ.seek(_jman2.getValue('externalAttachmentId'))
         || DOKUMZ.BL_GUID:=_jman2.getValue('businesslinkAttachIdentifier');
            DOKUMZ.put()
         ?};
         obj_del(_jman2)
      !}
   ?}
?};
DOKUM.cntx_pop(); DOKUMZ.cntx_pop();

_res


\DocumentSendBatch_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Parsowanie wyniku odpowiedzi dotyczącej wysyłki dokumentu
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_SEND_OUT
::            obiekt: ErrorCode, ErrorKey, ErrorMessage
::----------------------------------------------------------------------------------------------------------------------
params_exec('DocumentSend_parse','businesslink3',_a)


\DocumentAttachmentsAdd_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa wysyłającego dodatkowe załączniki dokumentu
::       (dla metody POST DocumentAttachmentsAdd)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::   WY: JSON [FILE] / ~~
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;
_dokumz:=_env.Param.DOKUMZ;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

::{
::    "DATA_IN": {
::        "businesslinkDocIdentifier": <string>,
::        "ATTACHMENTS": {
::            "ATTACHMENT": [{
::                "externalAttachmentId": <string>,
::                "businesslinkAttachIdentifier": <string>,
::                "attachType": <string>,
::                "isCompressed": <unsignedByte>,
::                "attachName": <string>,
::                "attachBody": <base64Binary>,
::                "includeToEmail": <unsignedByte>,
::                "sendEmailNotification": <unsignedByte>
::            }]
::        }
::    }
::}

:: jeśli wystąpią wyjątki w budowaniu JSONów - zerować zmianną _all_ok
_all_ok:=1;

DOKUM.cntx_psh(); FIRMA.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'businesslinkDocIdentifier'),DOKUM.BL_GUID);
      _jman.setObject(_path1:=_jman.addChildElement(_path,'ATTACHMENTS'),'{}');
         _jman.setObject(_path1:=_jman.addChildElement(_path1,'ATTACHMENT'),'[]');
::          Wzorzec dla załączników
            _jman1.load('{}');
            _jman1.setValue(_jman1.addChildElement('','externalAttachmentId'),'');
            _jman1.setValue(_jman1.addChildElement('','businesslinkAttachIdentifier'),'');
            _jman1.setValue(_jman1.addChildElement('','attachType'),'');
            _jman1.setValue(_jman1.addChildElement('','isCompressed'),0);
            _jman1.setValue(_jman1.addChildElement('','attachName'),'');
            _jman1.setValue(_jman1.addChildElement('','attachBody'),'');
            _jman1.setValue(_jman1.addChildElement('','includeToEmail'),0);
            _jman1.setValue(_jman1.addChildElement('','sendEmailNotification'),0);

   _is_compressed:=(exec('get','#params',100364)='T');

   _dokumz.prefix();
   {? _dokumz.first()
   || {!
      |? {? _all_ok
         || _filename:=_dokumz.bl_info('DOKUM','NAME');
            _ext:=_dokumz.bl_info('DOKUM','EXTENSION');

            _jman1.setValue('externalAttachmentId',_dokumz.UIDREF);
            _jman1.setValue('attachType','ATTACHMENT');
            _jman1.setValue('isCompressed',_is_compressed);
            _jman1.setValue('attachName',_filename);
            _all_ok:=_jman1.setValue('attachBody',
               {? _is_compressed
               || exec('dokumz_pack','businesslink3',_dokumz,'DOKUM')
               || fopen(_dokumz.DOKUM,'br',,,1)
               ?},'encode'
            );

            _file1:=fopen(null(),'Uw',,1,1);
            {? _jman1.getJSON(_file1)
            || _jman.setObject(_jman.addChildElement(_path1),_file1)
            ?};
            obj_del(_file1)
         ?};
         _dokumz.next()
      !}
   ?}
?};
DOKUM.cntx_pop(); FIRMA.cntx_pop();

:: do testów
::_jman.view();

_file:=fopen(null(),'Uw',,1,1);
{? _all_ok & _jman.getJSON(_file) || _file || ~~ ?}


\DocumentAttachmentsAdd_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi dotyczącej wysyłki dodatkowych załączników dokumentu
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_ATTACHMENTS_ADD_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_res:=params_get().env.Param.RESULT;
_dokum:=params_get().env.Param.DOKUM;
_display:=params_get().env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorMessage": <string>,
::        "BLMT_DOCUMENT_ATTACHMENTS_ADD_OUT": {
::            "Status_TECH": <int>,
::            "ATTACHMENTS": {
::                "ATTACHMENT": [{
::                    "businesslinkAttachIdentifier": <string>,
::                    "externalAttachmentId": <string>
::                }]
::            }
::        }
::    }
::}

DOKUMZ.cntx_psh();
DOKUMZ.prefix();

_jman1:=_jman.new(_jman.getJSON('ATTACHMENTS.ATTACHMENT'));
_size:=_jman1.countChildren();
_il:=0;
{! _it:=1.. _size
|! _jman2:=_jman.new(_jman1.getJSON('[%1]'[$_it]));
   {? DOKUMZ.seek(_jman2.getValue('externalAttachmentId'))
   || DOKUMZ.BL_GUID:=_jman2.getValue('businesslinkAttachIdentifier');
      {? DOKUMZ.put() || _il+=1 ?}
   ?};
   obj_del(_jman2)
!};

_res.STATUS:=1;
_res.MESSAGE:='Liczba nowych wysłanych załączników: %1.'@[$_il];

DOKUMZ.cntx_pop();

_res


\DocumentInvalidate_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa unieważniającego dokument - na podstawie wskazanego zapisu DOKUM
::       (dla metody POST DocumentInvalidate)
::   WE: params_get().env.in[1] - DOKUM.ref()
::       params_get().env.in[2] - ForceIfConfirmed
::   WY: JSON [STRING]
::----------------------------------------------------------------------------------------------------------------------
_dokum:=params_get().env.Param.DOKUM;
_force_if_confirmed:=params_get().env.Param.FORCE;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
:: Wysyłka tylko dla faktur
   {? ref_tab(DOKUM.REFSQL)=FAKS
   || _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
         _jman.setValue(_jman.addChildElement(_path,'businesslinkDocIdentifier'),DOKUM.BL_GUID);
         _jman.setValue(_jman.addChildElement(_path,'forceIfConfirmed'),_force_if_confirmed)
   ?}
?};
DOKUM.cntx_pop();

:: do testów
::_jman.view();

_jman.getJSON()


\DocumentInvalidate_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku odpowiedzi po wysłaniu dokumentu
::       (dla metody POST DocumentInvalidate)
::----------------------------------------------------------------------------------------------------------------------
_res:=params_get().env.Param.RESULT;
_dokum:=params_get().env.Param.DOKUM;
_display:=params_get().env.Param.DISPLAY;

DOKUM.cntx_psh();
DOKUM.clear();
{? DOKUM.seek(_dokum)
|| DOKUM.BSEND:='X';
   DOKUM.BL_STAT:=exec('cancelled_portal','zbl_stat');
   _pos:=DOKUM.SW*^160;
   DOKUM.SW:={? _pos=0 || DOKUM.SW+^160 || _pos+DOKUM.SW ?}+'Unieważniono w Businesslink';
   DOKUM.put()
?};
DOKUM.cntx_pop();

_res.STATUS:=1;

_res


\MapsSend_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Argument wywołania metody MapsSend
::   WY: JSON (STRING) / ~~
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_kh_dod:=_env.Param.KH_DOD;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
{? _kh_dod<>null()
|| _env.logApp(,exec('FindAndGet','#table',KH_DOD,_kh_dod,,"'Kontrahent: %1 / %2'[KH().KOD,KH().SKR]",''))
?};

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

::{
::    "DATA_IN": {
::        "tenantIdentifier_s": <string>,
::        "MAPS": {
::            "MAP": [{
::                "indexId_s": <string>,
::                "indexName_s": <string>,
::                "unitId_s": <string>,
::                "indexId_d": <string>,
::                "indexName_d": <string>,
::                "unitId_d": <string>,
::                "mapConverter": <string>
::            }]
::        }
::    }
::}

:: Odesłanie mapy dla jednego kontrahenta
_is_map:=0;
_f_active:=MKODK.f_active();
KH.cntx_psh(); MKODK.cntx_psh(); KH_DOD.cntx_psh();
KH.prefix();
{? KH_DOD.seek(_kh_dod) & KH.seek(KH_DOD.KH)
||
   _tab:=exec('get_id','#sync_id','BL_KH_ID',KH.uidref());
   {? _tab.first()
   || _tenantidentifier_s:=_tab.ID
   || _tenantidentifier_s:=''
   ?};

   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'tenantIdentifier_s'),_tenantidentifier_s);
      _jman.setObject(_path1:=_jman.addChildElement(_path,'MAPS'),'{}');
         _jman.setObject(_path1:=_jman.addChildElement(_path1,'MAP'),'[]');
::          Wzorzec dla map
            _jman1.load('{}');
            _jman1.setValue(_jman1.addChildElement('','indexId_s'),'');
            _jman1.setValue(_jman1.addChildElement('','indexName_s'),'');
            _jman1.setValue(_jman1.addChildElement('','unitId_s'),'');
            _jman1.setValue(_jman1.addChildElement('','indexId_d'),'');
            _jman1.setValue(_jman1.addChildElement('','indexName_d'),'');
            _jman1.setValue(_jman1.addChildElement('','unitId_d'),'');
            _jman1.setValue(_jman1.addChildElement('','mapConverter'),'');

   MKODK.index('KH_IDPUT');
   MKODK.prefix();
   _tm_stamp:=tm_form(#KH_DOD.BL_MKODK);

   {? MKODK.f_set(,,'MKODK.IDPUT>\''+_tm_stamp+'\' and MKODK.KH=\''+$KH.ref()+'\'') & MKODK.f_first()
   || {!
      |? _is_map:=1;
            _jman1.setValue('indexId_s',MKODK.KTM);
            _jman1.setValue('indexName_s',MKODK.N);
            _jman1.setValue('unitId_s',{? MKODK.JMK=null()|| MKODK.M().J().KOD || MKODK.JMK().KOD ?});
            _jman1.setValue('indexId_d',MKODK.M().KTM);
            _jman1.setValue('indexName_d',MKODK.M().N);
            _jman1.setValue('unitId_d',{? MKODK.JM=null()|| MKODK.M().J().KOD || MKODK.JM().KOD ?} );
            _jman1.setValue('mapConverter',{? MKODK.IL=0 || '1' || $MKODK.IL ?});
            _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON());
         MKODK.f_next()
      !};
      MKODK.f_clear()
   ?};
   {? MKODK.f_active() || MKODK.f_clear() ?}
?};
KH.cntx_pop(); MKODK.cntx_pop(); KH_DOD.cntx_pop();
{? (_f_active=1 | _f_active=3) & ~MKODK.f_active()
|| MKODK.prefix();
   MKODK.f_set(,'join :_a using(MKODK.KTM,:_a.KTM)','MKODK.KH=:_b',__Map,KH.ref())
?};
:: do testów
::_jman.view();

{? _is_map || _jman.getJSON() || ~~ ?}


\MapsSend_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku metody MapsSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_kh_dod:=_env.Param.KH_DOD;

KH_DOD.cntx_psh();
KH_DOD.prefix();
{? KH_DOD.seek(_kh_dod)
|| KH_DOD.BL_MKODK:=$exec('create','#tm_stamp');
   KH_DOD.put()
?};
KH_DOD.cntx_pop();

_res:=_env.Param.RESULT;

_res.STATUS:=1;
_res


\ServiceInfo_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Argument wywołania metody ServiceInfo
::----------------------------------------------------------------------------------------------------------------------
:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

::{
::    "DATA_IN": {
::        "RemoteSystemName": <string | null>,
::        "RemoteSystemIdent": <string | null>
::    }
::}

_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
   _jman.setValue(_jman.addChildElement(_path,'RemoteSystemName'),exec('remote_system_name','sl_api'));

_jman.getJSON()


\ServiceInfo_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku metody ServiceInfo
::       Wyświetla stan i adres portalu, w opcji bezdialogowej zwraca stan tenanta
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_SERVICE_INFO_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_res:=params_get().env.Param.RESULT;
_display:=params_get().env.Param.DISPLAY;

{? _display
|| _choice:=FUN.choice(
      'Status dzierżawcy: %1\n'
      'Data uruchomienia usługi: %2\n\n'
      'Adres portalu: %3'@
      [  exec('tenant_state','businesslink3',_jman.getValue('tenantState')),
         _date:=_jman.getValue('setupDate'); {? type_of(_date)=type_of('') || _date || '---' ?},
         _jman.getValue('portalUrl')
      ],,
      'Portal'@,,,,'OK'@,'@'+'Informacje o usłudze Businesslink'@
   );
   {? _choice=1
   || exec('browser_launch','#help',_jman.getValue('portalUrl'))
   ?}
?};

_res.STATUS:=1;

_res


\DocumentReport_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Argument wywołania metody DocumentReport
::----------------------------------------------------------------------------------------------------------------------
:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

::{
::    "DATA_IN": {
::        "__ModifiedDate_cloud": <dateTime>,
::        "__ModifiedDate_cloud_W": <dateTime>,
::        "businesslinkDocIdentifier_W": <string>,
::        "__ModifiedDate_cloud_O": <dateTime>,
::        "businesslinkDocIdentifier_O": <string>
::    }
::}

{? exec('czytaj','#stalesys',,XINFO,'BL_TM_O','BL_TM_W')
||
   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');

   _modified_date_o:={? XINFO.BL_TM_O='' || iso_datetime_value(date(1900,1,1),time(0,0,0)) || XINFO.BL_TM_O ?};
   _modified_date_w:={? XINFO.BL_TM_W='' || iso_datetime_value(date(1900,1,1),time(0,0,0)) || XINFO.BL_TM_W ?};
   _jman.setValue(_jman.addChildElement(_path,'__ModifiedDate_cloud_W'),_modified_date_w);
   _jman.setValue(_jman.addChildElement(_path,'__ModifiedDate_cloud_O'),_modified_date_o)
?};

:: do testów
::_jman.view();

_jman.getJSON()


\DocumentReport_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku metody DocumentReport
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_REPORT_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

:: + jest w dokumentacji, - nie ma w WADL
::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_DOCUMENT_REPORT_OUT": {
::            "__ModifiedDate_cloud": <dateTime | null>,
::            "__ModifiedDate_cloud_W": <dateTime | null>,
::            "businesslinkDocIdentifier_W": <string | null>,
::            "__ModifiedDate_cloud_O": <dateTime | null>,
::            "businesslinkDocIdentifier_O": <string | null>,
::            "isThereMoreDataToReport": <unsignedByte | null>,
::            "DOCUMENTS_SENDER": {
::                "DOCUMENT_SENDER": [{
::+                    "businesslinkDocIdentifier": <string | null>,
::+                    "externalDocId": <string | null>,
::+                    "docKind": <string | null>,
::+                    "docNumber": <string | null>,
::+                    "docDate": <dateTime | null>,
::+                    "isConfirmed": <unsignedByte | null>,
::+                    "confirmDate": <dateTime | null>,
::+                    "confirmLoginName": <string | null>,
::                    "paymentStatus": <string | null>,
::                    "paymentDate": <dateTime | null>,
::+                    "isMailSent": <unsignedByte | null>,
::                    "isMailDownloadLinkIncluded": <unsignedByte | null>,
::                    "SMSStatus": <string | null>,
::+                    "ksefReferenceNumber": <string | null>,
::                    "ksefUPO": <base64Binary | null>,
::+                    "ksefSendDate": <dateTime | null>,
::+                    "ksefConfirmDate": <dateTime | null>,
::+                    "ksefStatus": <string | null>,
::+                    "ksefDescription": <string | null>
::                    "ksefUPOReference": <string | null>,
::+                    "ksefUPOUrl": <string | null>,
::-                    "businessCheckStatus": <>,
::-                    "businessCheckUrl": <>
::                }]
::            },
::            "DOCUMENTS_RECIPIENT": {
::                "DOCUMENT_RECIPIENT": [{
::                    "businesslinkDocIdentifier": <string | null>
::                }]
::            }
::        }
::    }
::}

:: Dokumenty
_jman1:=_jman.new('{}');
:: Dokument
_jman2:=_jman.new('{}');

:: Dokumenty wysłane - obróbka potwierdzeń
{? _jman.isPath('DOCUMENTS_SENDER')
|| _jman1.load(_jman.getJSON('DOCUMENTS_SENDER.DOCUMENT_SENDER'));
   _size:=_jman1.countChildren();
   {? _size>0
   ||
::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Dokumenty potwierdzane:');

      DOKUM.cntx_psh();
      DOKUM.prefix();

      {! _it:=1.. _size
      |! _jman2.load(_jman1.getJSON('[%1]'[$_it]));

         {? type_of(_jman2.getValue('externalDocId'))=type_of('')
         ||
::          Uzupełnienie opisu biznesowego w rejestrze zdarzeń
            _env.logApp(,'Dokument: %1'[_jman2.getValue('docNumber')]);

            _ext_id:=_jman2.getValue('externalDocId');
            _ksef:=0;
            {? +_ext_id=48
               & type_of(ref_tab(_ext_id))>100
               & ref_tab(_ext_id)=DOKUM
               & DOKUM.seek(_ext_id)
            || {? DOKUM.BSEND<>'X'
               ||
::                Businesslink
                  {? type_of(_jman2.getValue('isConfirmed'))=type_of(0)
                  || DOKUM.RECEIVED:={? _jman2.getValue('isConfirmed') || 'T' || 'N' ?};
                     {? type_of(_jman2.getValue('confirmDate'))=type_of('')
                     || _pos:=DOKUM.SW*^160;
                        DOKUM.SW:=
                           {? _pos=0 || DOKUM.SW+^160 || _pos+DOKUM.SW ?}+
                           'Odebrano w Businesslink %1'[gsub(_jman2.getValue('confirmDate'),'T',' ')];
                        DOKUM.BL_DTCON:=iso_datetime_parse(_jman2.getValue('confirmDate')).date;
                        DOKUM.BL_TMCON:=iso_datetime_parse(_jman2.getValue('confirmDate')).time
                     |? DOKUM.RECEIVED='T'
                     || _pos:=DOKUM.SW*^160;
                        DOKUM.SW:=
                           {? _pos=0 || DOKUM.SW+^160 || _pos+DOKUM.SW ?}+
                           'Odebrano w Businesslink %1 %2'[$date(),time()$3];
                        DOKUM.BL_DTCON:=date();
                        DOKUM.BL_TMCON:=time()
                     ?};
                     {? type_of(_jman2.getValue('confirmLoginName'))=type_of('')
                     || DOKUM.BL_LOGIN:=_jman2.getValue('confirmLoginName')
                     ?}
                  ?};
::                KSeF
                  {? type_of(_jman2.getValue('ksefReferenceNumber'))=type_of('')
                  || DOKUM.NRKSEF:=_jman2.getValue('ksefReferenceNumber');
                     _ksef:=(DOKUM.NRKSEF<>'' & DOKUM.DOKUMI=null)
                  ?};
                  {? type_of(_jman2.getValue('ksefSendDate'))=type_of('')
                  || DOKUM.KSEFSDAT:=iso_datetime_parse(_jman2.getValue('ksefSendDate')).date;
                     DOKUM.KSEFSTIM:=iso_datetime_parse(_jman2.getValue('ksefSendDate')).time
                  ?};
                  {? type_of(_jman2.getValue('ksefConfirmDate'))=type_of('')
                  || DOKUM.KSEFCDAT:=iso_datetime_parse(_jman2.getValue('ksefConfirmDate')).date;
                     DOKUM.KSEFCTIM:=iso_datetime_parse(_jman2.getValue('ksefConfirmDate')).time
                  ?};
                  {? type_of(_jman2.getValue('ksefStatus'))=type_of('')
                  || DOKUM.KSEFSTAT:=_jman2.getValue('ksefStatus')
                  ?};
                  {? type_of(_jman2.getValue('ksefDescription'))=type_of('')
                  || DOKUM.KSEFDESC:=_jman2.getValue('ksefDescription')
                  || DOKUM.KSEFDESC:=''
                  ?};
                  {? type_of(_jman2.getValue('ksefUPOUrl'))=type_of('')
                  || DOKUM.KSEFUPO:=_jman2.getValue('ksefUPOUrl');
                     {? DOKUM.KSEFUPOG='N' || DOKUM.KSEFUPOG:='P' ?}
                  ?};

                  DOKUM.put();
                  {? _ksef
                  || exec('gen_pdf', 'businesslink3');
::                     exec('DocumentAttachmentsAdd','businesslink3',DOKUM.ref(),0);
                     ~~
                  ?};
                  {? _ksef || exec('ksef_sended_pdf','dokum',DOKUM.ref(),DOKUM.DOKR) ?}
               ?}
            ?}
         ?}
      !};
      DOKUM.cntx_pop()
   ?}
||
:: Brak dokumentów do przetworzenia - nie jest to błąd
   ~~
?};

:: Dokumenty odebrane
{? _jman.isPath('DOCUMENTS_RECIPIENT')
|| _jman1.load(_jman.getJSON('DOCUMENTS_RECIPIENT.DOCUMENT_RECIPIENT'));
   _size:=_jman1.countChildren();
   {? _size>0
   ||
::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Dokumenty do odebrania:');

      _docs:=json_parse(_jman.getJSON('DOCUMENTS_RECIPIENT'));
      DOKUM.cntx_psh();
      DOKUM.index('BL_GUID');
      {! _it:=1.. obj_len(_docs.DOCUMENT_RECIPIENT)
      |! _doc:=_docs.DOCUMENT_RECIPIENT[_it];

::       Uzupełnienie opisu biznesowego w rejestrze zdarzeń
         _env.logApp(,'Dokument: %1'[_doc.businesslinkDocIdentifier]);

::       Sprawdzenie dostępności dokumentu wysłanego do OCR - test z indentyfikatorem zmienionym na małe litery:
         DOKUM.prefix(REF.FIRMA,-_doc.businesslinkDocIdentifier,'P');
         {? DOKUM.first()
         ||
::          Dokument już jest - odblokowanie do pobrania jeśli był wysłany do OCR, a jeszcze nie został odebrany
            {? DOKUM.BL_OCR=exec('sent_to_ocr','zbl_stat')
            || DOKUM.BL_OCR:=exec('ready_to_get_from_ocr','zbl_stat');
               DOKUM.put()
            ?}
         ||
            DOKUM.prefix(REF.FIRMA,_doc.businesslinkDocIdentifier,'P');
::          Nowy dokument - tworzymy jego szkielet
            {? ~DOKUM.first()
            || DOKUM.blank(1);
               DOKUM.TYP:='D';
               DOKUM.BL:='T';
               DOKUM.FIRMA:=REF.FIRMA;
               DOKUM.DATAKONT:=date();
               DOKUM.RODZAJ_K:='P';
               DOKUM.BSEND:='N';
               DOKUM.ESEND:='N';
               DOKUM.WO:='N';
               DOKUM.OPER:=OPERATOR.USER().KOD;
               DOKUM.DATA:=date();
               DOKUM.CZAS:=time();
               DOKUM.DATA_ODB:=date();
               DOKUM.CZAS_ODB:=time();
               DOKUM.BL_VISIB:='N';
               DOKUM.BL_VDZK:='N';
               DOKUM.BL_VORD:='N';
               DOKUM.BL_GUID:=_doc.businesslinkDocIdentifier;
               DOKUM.BL_STAT:=exec('ready_to_download','zbl_stat');
               DOKUM.add()
::          Dokument już jest - odblokowanie do pobrania jeśli był wysłany do OCR, a jeszcze nie został odebrany
            |? DOKUM.BL_OCR=exec('sent_to_ocr','zbl_stat')
            || DOKUM.BL_OCR:=exec('ready_to_get_from_ocr','zbl_stat');
               DOKUM.put()
            ?}
         ?};
         obj_del(_doc)
      !};
      DOKUM.cntx_pop();

      obj_del(_docs)
   ?}
||
:: Brak dokumentów do przetworzenia - nie jest to błąd
   ~~
?};

:: Ustawienie nowych znaczników czasowych
{? exec('czytaj','#stalesys',,XINFO,'BL_TM_O','BL_TM_W')
|| _date_o:=_jman.getValue('__ModifiedDate_cloud_O');
   {? type_of(_date_o)=type_of('') & _date_o>XINFO.BL_TM_O
   || XINFO.BL_TM_O:=_date_o;
      exec('zapisz','#stalesys',1,XINFO,'BL_TM_O')
   ?};
   _date_w:=_jman.getValue('__ModifiedDate_cloud_W');
   {? type_of(_date_w)=type_of('') & _date_w>XINFO.BL_TM_W
   || XINFO.BL_TM_W:=_date_w;
      exec('zapisz','#stalesys',1,XINFO,'BL_TM_W')
   ?}
?};

_more:=_jman.getValue('isThereMoreDataToReport');
_res.DETAILS:=(type_of(_more)=type_of(0) & _more);

_res.STATUS:=1;

_res


\DocumentGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Generuje JSONa odbierającego dokument
::       (dla metody POST DocumentGet)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::   WY: JSON [TEXT]
::----------------------------------------------------------------------------------------------------------------------
_dokum:=params_get().env.Param.DOKUM;
_res:=params_get().env.Param.RESULT;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
|| _res.DETAILS.GUID:=DOKUM.BL_GUID;
   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'businesslinkDocIdentifier'),DOKUM.BL_GUID)
?};
DOKUM.cntx_pop();

:: do testów
::_jman.view();

_jman.getJSON()


\DocumentGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku metody DocumentGet
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_GET_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

:: Do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

_env:=params_get().env;
_res:=_env.Param.RESULT;
_dokum:=_env.Param.DOKUM;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorMessage": <string>,
::        "BLMT_DOCUMENT_GET_OUT": {
::            "externalDocId": <string>,
::            "docKind": <string>,
::            "docNumber": <string>,
::            "docDate": <dateTime>,
::            "tenantIdentifier_s": <string>,
::            "businessCheckStatus": <string>
::            "businessCheckUrl": <string>
::            "ATTRIBUTES": {
::                "ATTRIBUTE": [{
::                    "attrName": <string>,
::                    "attrFormat": <string>,
::                    "attrValue": <string>
::                }]
::            },
::            "ATTACHMENTS": {
::                "ATTACHMENT": [{
::                    "externalAttachmentId": <string>,
::                    "attachType": <string>,
::                    "isCompressed": <unsignedByte>,
::                    "attachName": <string>,
::                    "attachBody": <base64Binary>,
::                    "includeToEmail": <unsignedByte>
::                }]
::            }
::        }
::    }
::}
DOKUM.cntx_psh(); DOKUMZ.cntx_psh(); DOKUMZBC.cntx_psh(); KH.cntx_psh();
DOKUM.prefix(); DOKUMZ.prefix();
:: Obróbka dokumentu. Jeżeli już został odebrany z OCR, to jest pomijana
{? DOKUM.seek(_dokum) & DOKUM.BL_OCR<>exec('received_from_ocr','zbl_stat')
||
   _tenantidentifier_s:=_jman.getValue('tenantIdentifier_s');
   _tab:=exec('get_rek','#sync_id','BL_KH_ID',_tenantidentifier_s);
   {? var_pres('_tab')>100 & _tab.first()
   || _kh:=exec('FindAndGet','#table',KH,_tab.REK,,"ref()",null())
   || _kh:=null()
   ?};
   {? _kh=null() & _tenantidentifier_s<>exec('tenant','businesslink3')
   ||
::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Kontrahent nie został ustalony, tenant_id: %1'[_tenantidentifier_s])
   ?};
:: Dane są pobierane również wtedy, gdy kontrahent nie został ustalony
   {? 1
   ||
      _ready_to_download:=exec('ready_to_download','zbl_stat');
      _ready_to_registration:=exec('ready_to_registration','zbl_stat');
      _sent_to_ocr:=exec('sent_to_ocr','zbl_stat');
      _received_from_ocr:=exec('received_from_ocr','zbl_stat');
      _abandoned:=exec('abandoned','zbl_stat');
      _doc_kind:=_jman.getValue('docKind');
      {? DOKUM.DOT=null() || DOKUM.DOT:=exec('kkh_typ','zbl_dok') ?};
      DOKUM.BL_TYPE:=_doc_kind;
      DOKUM.SYM_ZEW:=_jman.getValue('docNumber');
::      DOKUM.DATA:=iso_datetime_parse(_jman.getValue('docDate')).date;
::      DOKUM.CZAS:=iso_datetime_parse(_jman.getValue('docDate')).time;
      {? DOKUM.DATA=date(0,0,0) || DOKUM.DATA:=date() ?};
      {? DOKUM.CZAS=time(0,0,0) || DOKUM.CZAS:=time() ?};
      {? DOKUM.DATA_ODB=date(0,0,0) || DOKUM.DATA_ODB:=date() ?};
      {? DOKUM.CZAS_ODB=time(0,0,0) || DOKUM.CZAS_ODB:=time() ?};
      DOKUM.BL_KHUID:=_tenantidentifier_s;

::    Numeracja
      {? DOKUM.NR=0 & DOKUM.SYM=''
      || _pom_tab:=POM.TAB;
         _pom_typdok:=POM.TYPDOK;
         POM.TAB:='DOKUM';
         POM.TYPDOK:='SYS';
         exec('add_grnr','numery','SYS');
         DOKUM.KH();
         DOKUM.NR:=exec('numer_new','numery','PACZKA');
         exec('znak','numery','DOKUM');
         POM.TAB:=_pom_tab;
         POM.TYPDOK:=_pom_typdok
      ?};

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::    BusinessCheck
::    businessCheckStatus: NOTREADY, SENT, CONFIRMED, WARNING, ERROR, UNAVAILABLE - zostanie utrwalony
      {? exec('upgrade2325_blbc1','zbl')
      || {? type_of(_jman.getValue('businessCheckStatus'))=type_of('')
         || _status:=_jman.getValue('businessCheckStatus');
            _env.logApp(,'businessCheckStatus: %1'[_status]);
            DOKUM.BLC_STAT:=_status
         ?};
         _checked:=0;
         {? type_of(_jman.getValue('businessCheckUrl'))=type_of('')
         || _checked:=1;
            DOKUM.memo_set(_jman.getValue('businessCheckUrl'),'BLC_URL')
         || DOKUM.memo_set('','BLC_URL')
         ?}
      ?};
::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

::    Atrybuty (większość w konkretne pola)
      {? _jman.isPath('ATTRIBUTES.ATTRIBUTE')
      || _desc:='';
         {! _it:=1.. _jman.countChildren('ATTRIBUTES.ATTRIBUTE')
         |! _jman1.load(_jman.getJSON('ATTRIBUTES.ATTRIBUTE[%1]'[$_it]));
            _attr_name:=_jman1.getValue('attrName');
            _attr_value:=_jman1.getValue('attrValue');
            _desc+='%1: %2\n'[_attr_name,_attr_value];
            {? _attr_name='Description'
            || DOKUM.KR_OP:=_attr_value
            |? _attr_name='BL_InputSource'
            || DOKUM.BL_SOURC:=_attr_value
            |? _attr_name='EMAIL_Sender'
            || DOKUM.BLE_SNDR:=_attr_value
            |? _attr_name='EMAIL_Recipient'
            || DOKUM.BLE_RCPT:=_attr_value
            |? _attr_name='EMAIL_Subject'
            || DOKUM.BLE_SUBJ:=_attr_value
            |? _attr_name='EMAIL_DateSend'
            || DOKUM.DATA_ODB:=iso_datetime_parse(_attr_value).date;
               DOKUM.CZAS_ODB:=iso_datetime_parse(_attr_value).time
            |? _attr_name='OCR'
            || {? _attr_value='1'
               || DOKUM.BL_OCR:=exec('received_from_ocr','zbl_stat');
::                UWAGA: od razu uzupełniamy, że zostało odebrane z portalu
::                  DOKUM.RECEIVED:='T';
                  _pos:=DOKUM.SW*^160;
                  DOKUM.SW:=
                     {? _pos=0 || DOKUM.SW+^160 || _pos+DOKUM.SW ?}+
                     'Odebrano w Businesslink %1 %2'[$date(),$time()];
                  DOKUM.BL_DTCON:=date();
                  DOKUM.BL_TMCON:=time()
               ?}
            |? _attr_name='KSeF_ReferenceNumber'
            || DOKUM.NRKSEF:=_attr_value
            |? _attr_name='KSeF_ConfirmDate'
            || DOKUM.KSEFCDAT:=iso_datetime_parse(_attr_value).date;
               DOKUM.KSEFCTIM:=iso_datetime_parse(_attr_value).time
            |? _attr_name='KSeF_SendDate'
            || DOKUM.KSEFSDAT:=iso_datetime_parse(_attr_value).date;
               DOKUM.KSEFSTIM:=iso_datetime_parse(_attr_value).time
            ?}
         !};
::       Atrybuty obecnie nie są wpisywane do opisu
::         DOKUM.memo_set(_desc,'OPIS');
         ~~
      ?};
::    Kontrahent pod warunkiem, że nie jest już wypełniony i nie jest mailem do samego siebie
      {? DOKUM.KH=null() & (DOKUM.BL_SOURC<>'EMAIL' | _tenantidentifier_s<>exec('tenant','businesslink3'))
      || DOKUM.KH:=_kh
      || _kh:=null()
      ?};
::    Dokument z KSeF - nadpisywanie kontrahenta, ale musi być jeden kontrahent o danym NIP,
::    jeśli jest kilku kontrahentów z tym samym NIP, należy wybrać jednostkę nadrzędną (czyli bez ID_WEW)
      {? DOKUM.NRKSEF<>'' & _tenantidentifier_s=exec('tenant','businesslink3')
      || _nip:=spli_str(DOKUM.NRKSEF,'-')[1];
         KH.cntx_psh();
         KH.index('SNIP');
         KH.prefix(2,_nip,);
         {? KH.size()=1 & KH.first()
         || _kh:=DOKUM.KH:=KH.ref()
         || _kh:=DOKUM.KH:=null();
            {? KH.first()
            || {!
               |? {? KH.ID_WEW=''
                  || _kh:=DOKUM.KH:=KH.ref()
                  ?};
                  KH.next()
               !}
            ?}
         ?};
         KH.cntx_pop()
      ?};
      {? _kh<>null() || DOKUM.DLA_KH:=1 ?};

::    Uzupełnienie opisu biznesowego w rejestrze zdarzeń
      _env.logApp(,'Źródło: %1'[DOKUM.BL_SOURC]);
      {? DOKUM.KH<>null()
      || _env.logApp(,'Kontrahent: %1 / %2'[DOKUM.KH().KOD,KH.SKR])
      ?};
      _env.logApp(,'Dokument: %1'[DOKUM.SYM_ZEW]);

::    Załączniki
      _ksef:=0;
      {? _jman.isPath('ATTACHMENTS.ATTACHMENT')
      || DOKUMZ.index('GUID');
         DOKUMZ.prefix(DOKUM.ref());
::       Usuwanie tylko przed zarejestrowaniem
         {? (DOKUM.BL_STAT=_ready_to_download | DOKUM.BL_STAT=_ready_to_registration) & DOKUMZ.first()
         || {!
            |?
::             Nie dotyczy dokumentu głównego z podczepionym wynikiem kontroli BC
               {? DOKUMZ.FILEBC<>null()
               || DOKUMZ.next()
               || DOKUMZ.del()
               ?}
            !}
         ?};
         _img_ref:=null();
         {! _it:=1.. _jman.countChildren('ATTACHMENTS.ATTACHMENT')
         |! _file1:=fopen(null(),'Uw',,1,1);
            {? _jman.getJSON('ATTACHMENTS.ATTACHMENT[%1]'[$_it],_file1)
            || _jman1.load(_file1);
               _attach_id:=_jman1.getValue('businesslinkAttachIdentifier');
               _is_compressed:=_jman1.getValue('isCompressed');
               _attach_type:=_jman1.getValue('attachType');
               _attach_name:=_jman1.getValue('attachName');
               _split_file_name:=exec('split_file_name','#file',_attach_name);
               {? _split_file_name.ext=''
               || _attach_name:=50+_split_file_name.fn
               || _attach_name:='%1.%2'[(49-(+_split_file_name.ext))+_split_file_name.fn,_split_file_name.ext]
               ?};
               obj_del(_split_file_name);
               {? _is_compressed
               || _attach_body:=exec('dokumz_unpack','businesslink3',_jman1);
                  {? type_of(_attach_body)=type_of(~~)
                  || _attach_body:=fopen(null(),'bw',,,1)
                  ?}
               || _attach_body:=fopen(null(),'bw',,,1);
                  _jman1.getValue('attachBody',_attach_body,'decode')
               ?};
::             Załącznik jest dodawany tylko wtedy, gdy go jeszcze nie ma
               DOKUMZ.prefix(DOKUM.ref(),_attach_id,);
               {? ~DOKUMZ.first()
               || DOKUMZ.blank();
                  DOKUMZ.DOK:=DOKUM.ref();
                  {? exec('upgrade2325_blbc1','zbl')
                  || DOKUMZ.REFSQL:=DOKUM.REFSQL
                  ?};
                  DOKUMZ.BL_GUID:=_attach_id;
                  DOKUMZ.NAZWA:=_attach_name;
                  {? _attach_type='UFD-INVOICE' | _attach_type='UFD-ORDER'
                  || DOKUMZ.BL_TYPE:=DOKUM.BL_TYPE
                  ?};
                  {? _attach_type='KSEF-INVOICE'
                  || {? exec('upgrade2325_blbc1','zbl') & _checked
                     || DOKUMZ.BC:='T'
                     ?};
                     _ksef:=1;
                     DOKUMZ.BL_TYPE:='KSeF_%1'[DOKUM.BL_TYPE]
                  ?};
                  DOKUMZ.DATE:=date();
                  DOKUMZ.TIME:=time();
                  {? DOKUMZ.add() || DOKUMZ.bl_put('DOKUM',_attach_body,,,_attach_name) ?};
                  {? _attach_type='DOCIMAGE'
::                  & (-_attach_name)*'faktura'>0
                  ||
                     {? DOKUMZ.bl_info('DOKUM','EXTENSION')='pdf' || _ksef:=0 ?};
                     DOKUM.bl_put('DOKUMI',_attach_body,,,_attach_name);
::                     _img_ref:=DOKUMZ.ref();
                     ~~
                  |? DOKUM.DOKUMI=null() & DOKUMZ.bl_info('DOKUM','EXTENSION')='pdf'
                  ||
                     DOKUM.bl_put('DOKUMI',_attach_body,,,_attach_name)
                  ?}
               ?};
::             Jeżeli nie było jeszcze załącznika 'DOCIMAGE', to do podglądu wrzucany jest pierwszy pdf
               obj_del(_attach_body)
            ?};
            obj_del(_file1)
         !};
::       Jeżeli brak pliku UFD, to PDF (oznaczony DOCIMAGE) oznaczamy do OCR ===> nieaktualne
::         {? exec('czy_ufd','edi_fo_ufd',DOKUM.ref())=null()
::         || {? DOKUMZ.seek(_img_ref) || DOKUMZ.P_OCR:='T'; DOKUMZ.put() ?}
::         ?}
         ~~
      ?};

::    Zmiana statusu tylko jak był 'Do pobrania' albo 'Wysłany do OCR'
      {? DOKUM.BL_STAT=_ready_to_download
      ||
::       Dla dokumentu z KSeF dodatkowo sprawdzenie, czy jest zgoda na odbieranie
         {? -DOKUM.BL_SOURC*'ksef' & DOKUM.NRKSEF<>'' & DOKUM.KH<>null()
         || exec('kh_dod_ini','kontrahent',DOKUM.KH,1);
            {? KH_DOD.KSEFLIOD=date(0,0,0) | KH_DOD.KSEFLIOD>DOKUM.DATA
            || DOKUM.BL_STAT:=_abandoned
            || DOKUM.BL_STAT:=_ready_to_registration
            ?}
         || DOKUM.BL_STAT:=_ready_to_registration
         ?}
      |? DOKUM.BL_STAT=_sent_to_ocr
      ||
::       Zmiana tylko wtedy, gdy został odebrany wynik OCR
         {? exec('czy_ufd','edi_fo_ufd',DOKUM.ref())
         || DOKUM.BL_STAT:=_ready_to_registration;
            DOKUM.BL_OCR:=_received_from_ocr
         ?}
      ?};

      {? DOKUM.put()
      || DOKUM.memo_put(,'OPIS');
         {? exec('upgrade2325_blbc1','zbl')
         || DOKUM.memo_put(,'BLC_URL')
         ?}
      ?};
      {? _ksef || exec('ksef_to_pdf','dokum',DOKUM.ref()) ?}
   ?}
?};

DOKUM.cntx_pop(); DOKUMZ.cntx_pop(); DOKUMZBC.cntx_pop(); KH.cntx_pop();

_res.STATUS:=1;

_res


\SettlementsSend_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Argument wywołania metody SettlementsSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_kh:=_env.Param.KH;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,exec('FindAndGet','#table',KH,_kh,,"'Kontrahent: %1 / %2'[KH.KOD,KH.SKR]",''));

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

::{
::    "DATA_IN": {
::        "TOTALBALANCES": {
::            "TOTALBALANCE": [{
::                "tenantIdentifier_d": <string>,
::                "currencySymbol": <string>,
::                "totalBalance": <decimal>
::            }]
::        },
::        "DOCUMENTS": {
::            "DOCUMENT": [{
::                "tenantIdentifier_d": <string>,
::                "externalDocId": <string>,
::                "currencySymbol": <string>,
::                "paymentDate": <dateTime>,
::                "creditTotal": <decimal>,
::                "debitTotal": <decimal>,
::                "balanceTotal": <decimal>,
::                "comment": <string>,
::                "timestamp_check": <base64Binary>
::            }]
::        }
::    }
::}

DOKUM.cntx_psh(); FIRMA.cntx_psh();

:: Waluta narodowa, bo może nie być podczytana
exec('czytaj','#stalesys',,FINFO,'NAROD');
_narod:=FINFO.NAROD().KOD;

_id_tab:=exec('get_id','#sync_id','BL_KH_ID',exec('FindAndGet','#table',KH,_kh,,"uidref()",''));
{? _id_tab.first()
|| _tenantIdentifier_d:=_id_tab.ID
|| _tenantIdentifier_d:=''
?};

_total_balance:=0;

:: Początek JSON-a
_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');

:: Jeżeli podany kontrahent, to jego saldo i rozrachunki do wszystkich DOKUMów tego kontrahenta
{? _kh<>null()
||
:: Saldo ogólne
   _jman.setObject(_path1:=_jman.addChildElement(_path,'TOTALBALANCES'),'{}');
      _jman.setObject(_path1:=_jman.addChildElement(_path1,'TOTALBALANCE'),'[]');
::       Przygotowanie wzorca
         _jman1.load('{}');
         _jman1.setValue(_jman1.addChildElement('','tenantIdentifier_d'),'');
         _jman1.setValue(_jman1.addChildElement('','currencySymbol'),'');
         _jman1.setValue(_jman1.addChildElement('','totalBalance'),0);
   _tab:=exec('op_kh','businesslink3',_kh);
   _tab.cntx_psh();
   _tab.prefix();
   {? _tab.first()
   || {!
      |? _jman1.setValue('tenantIdentifier_d',_tenantIdentifier_d);
         _jman1.setValue('currencySymbol',_tab.WAL);
         _jman1.setValue('totalBalance',_tab.BALANCE);
         _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON());
         _tab.next()
      !}
   ?};
   _tab.cntx_pop();

:: Dokumenty
   _jman.setObject(_path1:=_jman.addChildElement(_path,'DOCUMENTS'),'{}');
      _jman.setObject(_path1:=_jman.addChildElement(_path1,'DOCUMENT'),'[]');
::       Przygotowanie wzorca
         _jman1.load('{}');
         _jman1.setValue(_jman1.addChildElement('','tenantIdentifier_d'),'');
         _jman1.setValue(_jman1.addChildElement('','externalDocId'),'');
         _jman1.setValue(_jman1.addChildElement('','currencySymbol'),'');
         _jman1.setValue(_jman1.addChildElement('','paymentDate'),'');
         _jman1.setValue(_jman1.addChildElement('','creditTotal'),0);
         _jman1.setValue(_jman1.addChildElement('','debitTotal'),0);
         _jman1.setValue(_jman1.addChildElement('','balanceTotal'),0);
         _jman1.setValue(_jman1.addChildElement('','comment'),'');
         _jman1.setValue(_jman1.addChildElement('','timestamp_check'),'');

::       Wysyłka tylko dla faktur kontrahenta _kh wysłanych do BL
   _bl_op:=exec('obj_bl_op','rozrach');
   _bl_op.DOKUM.cntx(1);
   _bl_op.DOKUM.prefix(_kh);
   {? _bl_op.DOKUM.first()
   || {!
      |? FAKS.cntx_psh();
         FAKS.use(ref_name(DOKUM.REFSQL));
         FAKS.prefix();
         {? FAKS.seek(DOKUM.REFSQL)
         || _wal:=FAKS.WAL().KOD;
            _tp:={? FAKS.TZ=date(0,0,0) || iso_datetime_value(FAKS.DW) || iso_datetime_value(FAKS.TZ) ?}
         || _wal:=_narod;
            _tp:=''
         ?};
         FAKS.cntx_pop();
            _jman1.setValue('tenantIdentifier_d',_tenantIdentifier_d);
            _jman1.setValue('externalDocId',DOKUM.uidref());
            _jman1.setValue('currencySymbol',_wal);
            _jman1.setValue('paymentDate',_tp);
            _jman1.setValue('creditTotal',_bl_op.DOKUM.WN);
            _jman1.setValue('debitTotal',_bl_op.DOKUM.MA);
            _jman1.setValue('balanceTotal',_bl_op.DOKUM.WN-_bl_op.DOKUM.MA);
            _jman1.setValue('comment',DOKUM.KR_OP);
            _jman1.setValue('timestamp_check','AAAAAAAAAAE=');
            _jman.setObject(_jman.addChildElement(_path1),_jman1.getJSON());
         _bl_op.DOKUM.next()
      !}
   ?};
   _bl_op.DOKUM.cntx(2)
?};

DOKUM.cntx_pop(); FIRMA.cntx_pop();

:: do testów
::_jman.view();

_jman.getJSON()


\op_faks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Zwraca obroty rozrachunku dla faktury
::  OLD: \op_faks/businesslink.fml
::   WE: FAKS.ref(), $FAKS.ref()
::   WY: obj_new('WN','MA')
::----------------------------------------------------------------------------------------------------------------------
_faks:=_a;

_wal:=exec('FindAndGet','#table',FAKS,_faks,,"FAKS.WAL",null());

_result:=obj_new('WAL','WN','MA');
_result.WAL:=exec('FindAndGet','#table',FAKS,_faks,,"FAKS.WAL().KOD",'');
:: Wstępnie kwota faktury cała do zapłaty, w przypadku gdyby nie było jeszcze rozrachunku
_result.WN:=exec('FindAndGet','#table',FAKS,_faks,,"FAKS.BRTW",0);
_result.MA:=0;

_znal:=0;
ROK_F.cntx_psh();
{? var_pres('AKT_ROZ',ROK_F)>0
|| ROK_F.index('AKT_OP'); ROK_F.prefix(REF.FIRMA,'T');
   _znal:=(ROK_F.last() & date()>=ROK_F.POCZ_ROK)
?};
{? ~_znal
|| ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   _znal:=ROK_F.find_le(date())
?};
{? _znal
|| OP.cntx_psh();
   OP.use('operac'+ROK_F.KOD); OP.index('SYM');
   OP.prefix(_wal,exec('FindAndGet','#table',FAKS,_faks,,"FAKS.SYM",''),);
   {? OP.first()
   || _result.WN:=OP.WN;
      _result.MA:=OP.MA
   ?};
   OP.cntx_pop()
?};
ROK_F.cntx_pop();

_result


\op_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Zwraca salda ogólne rozrachunków kontrahenta w poszczególnych walutach
::  OLD: \op_kh/businesslink.fml
::   WE: _a - KH.ref()
::   WY: tab_tmp()
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
_obj:=exec('obj_bl_op','rozrach');
{? _obj.KH.BL_OP
|| _obj.OBR.KH:=_kh;
   _tab:=_obj.OBR
|| _znal:=0;
   _tab:=tab_tmp(1,'WAL','STRING[8]','Waluta','BALANCE','REAL','Saldo');

   ROK_F.cntx_psh();
   {? var_pres('AKT_ROZ',ROK_F)>0
   || ROK_F.index('AKT_OP'); ROK_F.prefix(REF.FIRMA,'T');
   _znal:=(ROK_F.last() & date()>=ROK_F.POCZ_ROK)
   ?};
   {? ~_znal
   || ROK_F.index('ROKPOCZ'); ROK_F.prefix(REF.FIRMA);
   _znal:=ROK_F.find_le(date())
   ?};
   {? _znal
   || OP.cntx_psh(); OP.use('operac'+ROK_F.KOD);
   OP.index('DSP'); OP.prefix(_kh);
   {? OP.first()
   || {!
      |? _tab.prefix(OP.WAL().KOD,);
         {? _tab.first()
         || _tab.BALANCE+=OP.WN-OP.MA;
            _tab.put()
         || _tab.WAL:=OP.WAL().KOD;
            _tab.BALANCE:=OP.WN-OP.MA;
            _tab.add()
         ?};
         OP.next()
      !}
   ?};
   OP.cntx_pop()
   ?};
   ROK_F.cntx_pop()
?};
_tab


\SettlementsSend_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Parsowanie wyniku metody SettelementsSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_res:=_env.Param.RESULT;

_res.STATUS:=1;
_res


\TenantParamsGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Argument wywołania metody TenantParamsGet
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_date:=iso_datetime_value(date(2000,1,1),time(0,0,0));

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,'Pobranie parametrów modyfikowanych po: %1'[_date]);

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

::{
::    "Arraysl_TenantParamsGetData": {
::        "sl_TenantParamsGetData": [{
::            "__OrderCount": 100,
::            "__id_cloud": 0,
::            "__ModifiedDate_cloud": "2019-12-03T18:00:25.370"
::        }]
::    }
::}

_jman.setObject(_path:=_jman.addChildElement('','Arraysl_TenantParamsGetData'),'{}');
   _jman.setObject(_path:=_jman.addChildElement(_path,'sl_TenantParamsGetData'),'[]');
      _jman1.load('{}');
      _jman1.setValue(_jman1.addChildElement('','__OrderCount'),100);
      _jman1.setValue(_jman1.addChildElement('','__id_cloud'),0);
      _jman1.setValue(_jman1.addChildElement('','__ModifiedDate_cloud'),_date);
      _jman.setObject(_jman.addChildElement(_path),_jman1.getJSON());

:: Do testów
::_jman.view();

exec('obj_ntab_set','#array',,'JSON',_jman.getJSON())


\TenantParamsGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parsowanie wyniku metody TenantParamsGet
::   WE: _a - obiekt JMAN reprezentujący zawartość sl_TenantParamsGetResult
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

:: Do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

_size:=_jman.countChildren();
{? _size>0
||
:: Pobierane są wszystkie parametry dostępne w portalu
   BL_PAR.cntx_psh();
   BL_PAR.index('SYMBOL');
   {! _it:=1.. _size
   |!
      _jman1.load(_jman.getJSON('[%1]'[$_it]));
      _par_id:=_jman1.getValue('ParID');
      _value:=_jman1.getValue('Value');
      _value:={? type_of(_value)=type_of('') || _value || '' ?};
      _description:=_jman1.getValue('Description');
      _hint_text:=_jman1.getValue('HintText');
      _hint_text:={? type_of(_hint_text)=type_of('') || _hint_text || '' ?};
      _lookup_type:=_jman1.getValue('LookupType');
      _lookup_type:={? type_of(_lookup_type)=type_of('') || _lookup_type || '' ?};
      _available_values:=_jman1.getValue('AvailableValues');
      _available_values:={? type_of(_available_values)=type_of('') || _available_values || '' ?};
      _display_order:=_jman1.getValue('DisplayOrder');
      {? type_of(_display_order)=type_of('') || _display_order:=#_display_order ?};
      _group_name:=_jman1.getValue('GroupName');

      BL_PAR.prefix(REF.FIRMA,_group_name,);
      {? BL_PAR.first()
      || _group:=#BL_PAR.ref();
         _active:=BL_PAR.ACTIVE
      || _group:=0;
         _active:='N'
      ?};

      BL_PAR.prefix(REF.FIRMA,_par_id,);
      {? BL_PAR.first()
      || BL_PAR.ACTIVE:=_active;
         BL_PAR.WARTOSC:=_value;
         BL_PAR.OPIS:=form(_description);
         BL_PAR.HINT:=_hint_text;
         BL_PAR.LOOKUP:=_lookup_type;
         BL_PAR.AVVALUES:=_available_values;
         BL_PAR.ORDER:=_display_order;
         BL_PAR.GROUP:=_group;
         BL_PAR.put()
      || BL_PAR.blank(1);
         BL_PAR.FIRMA:=REF.FIRMA;
         BL_PAR.ACTIVE:=_active;
         BL_PAR.SYMBOL:=_par_id;
         BL_PAR.WARTOSC:=_value;
         BL_PAR.OPIS:=form(_description);
         BL_PAR.HINT:=_hint_text;
         BL_PAR.LOOKUP:=_lookup_type;
         BL_PAR.AVVALUES:=_available_values;
         BL_PAR.ORDER:=_display_order;
         BL_PAR.GROUP:=_group;
         BL_PAR.add()
      ?}
   !};
   BL_PAR.cntx_pop()
?};

_res.STATUS:=1;
_res


\TenantParamsGroupGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Parsowanie wyniku metody TenantParamsGet
::   WE: _a - obiekt JMAN reprezentujący zawartość sl_TenantParamsGroupGetResult
::            zwracanego dodatkowo łącznie z sl_TenantParamsGetResult
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

:: Do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

_size:=_jman.countChildren();
{? _size>0
||
   BL_PAR.cntx_psh();
   BL_PAR.index('SYMBOL');

:: Konfigurowanie grup najwyższego poziomu, odpięcie od nich paramatrów i ich dezaktywacja w przypadku zmiany aktywności
   _group_names:=spli_str('BL\\Portal\\;BL\\Businesscheck\\',';');
   _descriptions:=spli_str('Portal Businesslink;Businesscheck',';');
   _check_on:=exec('upgrade2325_blbc1','zbl');
   _actives:=spli_str('%1;%2'['T',{? _check_on || 'T' || 'N' ?}],';');
   _groups:=obj_new(2);
   {! _it:=1.. 2
   |! BL_PAR.prefix(REF.FIRMA,_group_names[_it],);
      {? BL_PAR.first()
      || _groups[_it]:=#BL_PAR.ref();
         {? BL_PAR.ACTIVE<>_actives[_it]
         || exec('param_oper_group_off','businesslink3',BL_PAR.ACTIVE,#BL_PAR.ref())
         ?};
         BL_PAR.ACTIVE:=_actives[_it];
         BL_PAR.OPIS:=form(_descriptions[_it]);
         BL_PAR.ORDER:=_it;
         BL_PAR.put()
      || BL_PAR.blank(1);
         BL_PAR.FIRMA:=REF.FIRMA;
         BL_PAR.ACTIVE:=_actives[_it];
         BL_PAR.SYMBOL:=_group_names[_it];
         BL_PAR.OPIS:=form(_descriptions[_it]);
         BL_PAR.ORDER:=_it;
         {? BL_PAR.add()
         || _groups[_it]:=#BL_PAR.ref()
         ?}
      ?}
   !};

:: Pobierane są wszystkie grupy parametrów dostępne w portalu
   {! _it:=1.. _size
   |!
      _jman1.load(_jman.getJSON('[%1]'[$_it]));
      _group_name:=_jman1.getValue('GroupName');
      _description:=_jman1.getValue('Description');
      _display_order:=_jman1.getValue('DisplayOrder');
      {? type_of(_display_order)=type_of('') || _display_order:=#_display_order ?};

      _group:=0;
      {! _it:=1.. 2
      |! {? _group_name*_group_names[_it]>0 || _group:=_groups[_it]; _active:=_actives[_it] ?}
      !};

      BL_PAR.prefix(REF.FIRMA,_group_name,);
      {? BL_PAR.first()
      || BL_PAR.ACTIVE:=_active;
         BL_PAR.OPIS:=form(_description);
         BL_PAR.ORDER:=_display_order;
         BL_PAR.GROUP:=_group;
         BL_PAR.put()
      || BL_PAR.blank(1);
         BL_PAR.FIRMA:=REF.FIRMA;
         BL_PAR.ACTIVE:=_active;
         BL_PAR.SYMBOL:=_group_name;
         BL_PAR.OPIS:=form(_description);
         BL_PAR.ORDER:=_display_order;
         BL_PAR.GROUP:=_group;
         BL_PAR.add()
      ?}
   !};

   BL_PAR.cntx_pop()
?};

_res.STATUS:=1;
_res


\TenantParamsModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Argument wywołania metody TenantParamsModify
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_timestamp:=_env.Param.TM;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');
:: do manipulacji elementami podrzędnymi
_jman1:=_jman.new('{}');

::{
::    "Arraysl_TenantParamsModifyData": {
::        "sl_TenantParamsModifyData": [{
::            "__id_cloud": <long | null>,
::            "ParID": <string>,
::            "Value": <string | null>,
::            "Description": <string | null>,
::            "__ModifiedDate_cloud": <dateTime | null>,
::            "__ModifiedDate_erp": <dateTime | null>,
::            "__id_erp": <string | null>
::        }]
::    }
::}

_jman.setObject(_path:=_jman.addChildElement('','Arraysl_TenantParamsModifyData'),'{}');
   _jman.setObject(_path:=_jman.addChildElement(_path,'sl_TenantParamsModifyData'),'[]');

::    Wzorzec
      _jman1.load('{}');
      _jman1.setValue(_jman1.addChildElement('','ParID'),'');
      _jman1.setValue(_jman1.addChildElement('','Value'),'');
::      _jman1.setValue(_jman1.addChildElement('','Description'),'');
      _jman1.setValue(_jman1.addChildElement('','__id_erp'),'');

:: Wysyłane są zawsze wszystkie parametry, które są obsługiwane po stronie ERP
BL_PAR.cntx_psh();
BL_PAR.index('SYMBOL');
BL_PAR.prefix(REF.FIRMA);
{? BL_PAR.first()
|| {!
   |? {? BL_PAR.IDPUT>_timestamp
      || _jman1.setValue('ParID',BL_PAR.SYMBOL);
         _jman1.setValue('Value',BL_PAR.WARTOSC);
::         _jman1.setValue('Description',BL_PAR.OPIS);
         _jman1.setValue('__id_erp',BL_PAR.uidref());
         _jman.setObject(_jman.addChildElement(_path),_jman1.getJSON())
      ?};
      BL_PAR.next()
   !}
?};
BL_PAR.cntx_pop();

:: do testów
::_jman.view();

_jman.getJSON()


\TenantParamsModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Parsowanie wyniku metody TenantParamsModify
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_res:=_env.Param.RESULT;

_res.STATUS:=1;
_res


\TenantStats_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody TenantStats
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_date_from:=_env.Param.DT_FROM;
_date_to:=_env.Param.DT_TO;
_stat_year:=_env.Param.ST_YEAR;
_stat_month:=_env.Param.ST_MONTH;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

_jman.setObject(_path:=_jman.addChildElement('','SL_TENANT_STATS_IN'),'{}');
   _jman.setObject(_path:=_jman.addChildElement(_path,'TENANT_STATS'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'DateFrom'),_date_from);
      _jman.setValue(_jman.addChildElement(_path,'DateTo'),_date_to);
      _jman.setValue(_jman.addChildElement(_path,'StatYear'),_stat_year);
      _jman.setValue(_jman.addChildElement(_path,'StatMonth'),_stat_month);

:: do testów
::_jman.view();

_jman.getJSON()


\TenantStats_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody TenantStats
::   WE: _a - obiekt JMAN (tablica) reprezentujący zawartość TENANT_STATE_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_env:=params_get().env;
_res:=_env.Param.RESULT;

:: Do manipulacji elemetami podrzędnymi
_jman1:=_jman.new('{}');

:: Tymczasowo statystyki tylko do rejestru zdarzeń (logApp) i do KOMM,
:: docelowo w razie potrzeby będzie ładnie wyświetlane
::_tab:=_res.DETAILS;
_size:=_jman.countChildren();
{? _size>0
|| {? type_of(_env.Param.DT_FROM)=type_of('')
   || _msg:='Statystyki dzierżawcy (%1 ÷ %2):'[_env.Param.DT_FROM,_env.Param.DT_TO]
   || _msg:='Statystyki dzierżawcy (%1/%2):'[$_env.Param.ST_YEAR,$_env.Param.ST_MONTH]
   ?};
   KOMM.sect_beg(_msg);
   _env.logApp(,'\n%1'[_msg]);
   {! _it:=1.. _size
   |! _jman1.load(_jman.getJSON('[%1]'[$_it]));
::      _tab.NAME:=_jman1.getValue('StatName');
::      _tab.DESC:=_jman1.getValue('StatDesc');
::      _tab.VALUE:=#_jman1.getValue('StatValue');
::      _tab.add();
      _msg:='%1: %2'[_jman1.getValue('StatDesc'),_jman1.getValue('StatValue')];
::      _env.logApp(,_msg);
      KOMM.add(_msg)
   !};
   KOMM.sect_end()
?};

_res.STATUS:=1;
_res.MESSAGE:='';
_res


\NotificationSend_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody NotificationsSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_email_address:=_env.Param.EMAIL;
_subject:=_env.Param.SUBJECT;
_notification_text:=_env.Param.TEXT;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,'Email: \"%1\", do: %2'[_subject,_email_address]);

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
   _jman.setValue(_jman.addChildElement(_path,'emailAddress'),_email_address);
   _jman.setValue(_jman.addChildElement(_path,'subject'),_subject);
   _jman.setValue(_jman.addChildElement(_path,'notificationText'),base64('encode',_notification_text));

:: do testów
::_jman.view();

_jman.getJSON()


\NotificationSend_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody NotificationSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_res:=_env.Param.RESULT;

_res.STATUS:=1;
_res


\KsefTokenFind_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody KsefTokenFind
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');

_jman.getJSON()


\KsefTokenFind_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody KsefTokenFind
::   WE: [_a] - obiekt JMAN reprezentujący zawartość BLMT_KSEF_TOKEN_MODIFY_INIT_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:={? var_pres('_a')>100 || _a || ~~ ?};

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_KSEF_TOKEN_FIND_OUT": {
::            "TOKENS": {
::                "TOKEN": [{
::                    "loginName": <string | null>,
::                    "lastModifyDate": <dateTime | null>,
::                    "invoice_Download": <unsignedByte | null>,
::                    "invoice_Upload": <unsignedByte | null>,
::                    "tokenEnabled": <unsignedByte | null>,
::                    "TIN": <string|null>
::                }]
::            }
::        }
::    }
::}

:: W wyniku zawsze tablica zgodna z TOKEN
{? type_of(_jman)>100 & _jman.isPath('TOKENS')
|| _res.DETAILS:=json_parse(_jman.getJSON('TOKENS.TOKEN'))
|| _res.DETAILS:=exec('obj_ntab_set','#array',,'TOKEN',exec('token_tab','businesslink3'))
?};

_res.STATUS:=1;
_res


\KsefTokenModifyInit_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody KsefTokenModifyInit
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');

_jman.getJSON()


\KsefTokenModifyInit_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody KsefTokenModifyInit
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_KSEF_TOKEN_MODIFY_INIT_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_KSEF_TOKEN_MODIFY_INIT_OUT": {
::            "requestInit": <base64Binary>,
::            "signRequired": <unsignedByte>
::        }
::    }
::}

_res.DETAILS:=obj_new('REQUEST','SIGN');
_res.DETAILS.REQUEST:=fopen(null(),'bw',,,1);
_res.STATUS:=_jman.getValue('requestInit',_res.DETAILS.REQUEST,'decode');
_res.DETAILS.SIGN:=_jman.getValue('signRequired');

_res


\KsefTokenModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Argument wywołania metody KsefTokenModify
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_login_name:=_env.Param.LOGIN;
_invoice_download:=_env.Param.DOWNLOAD;
_invoice_upload:=_env.Param.UPLOAD;
_token_enabled:=_env.Param.ENABLED;
_init_session_signed_request:=_env.Param.SIGNEDR;
_revoke_token:=_env.Param.REVOKE;
_token_value:=_env.Param.TOKEN;
_nip:=_env.Param.NIP;

:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
_env.logApp(,'LoginName: %1'[_login_name]);
_env.logApp(,'TIN: %1'[_nip]);
_env.logApp(,'InvoiceDownload: %1'[$_invoice_download]);
_env.logApp(,'InvoiceUpload: %1'[$_invoice_upload]);
_env.logApp(,'TokenEnabled: %1'[$_token_enabled]);
_env.logApp(,'RevokeToken: %1'[$_revoke_token]);

:: do manipulacji elementem głównym
_jman:=exec('json_man','__jsonm','{}');

::{
::    "DATA_IN": {
::        "loginName": <string>,
::        "invoice_Download": <unsignedByte>,
::        "invoice_Upload": <unsignedByte>,
::        "tokenEnabled": <unsignedByte>,
::        "initSessionSignedRequest": <base64Binary | null>,
::        "makeExpiratingToken": <unsignedByte | null>,
::        "TIN": <string | null>,
::        "revokeToken": <unsignedByte | null>,
::        "tokenValue": <string | null>
::    }
::}

:: UWAGI: - wymagamy podania niepustych wartości dla initSessionSignedRequest bądź tokenValue
::        - nie można jednocześnie używać unieważnienia tokena (revokeToken) ze wskazaniem wartości (tokenValue)
_jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
   _jman.setValue(_jman.addChildElement(_path,'loginName'),_login_name);
   _jman.setValue(_jman.addChildElement(_path,'invoice_Download'),_invoice_download);
   _jman.setValue(_jman.addChildElement(_path,'invoice_Upload'),_invoice_upload);
   _jman.setValue(_jman.addChildElement(_path,'tokenEnabled'),_token_enabled);
   {? _token_value=''
   || _jman.setValue(_jman.addChildElement(_path,'initSessionSignedRequest'),_init_session_signed_request,'encode')
   ?};
   _jman.setValue(_jman.addChildElement(_path,'revokeToken'),_revoke_token);
   {? _token_value<>''
   || _jman.setValue(_jman.addChildElement(_path,'tokenValue'),_token_value)
   ?};
   {? _nip<>''
   || _jman.setValue(_jman.addChildElement(_path,'TIN'),_nip)
   ?};

_jman.getJSON()


\KsefTokenModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Parsowanie wyniku metody KsefTokenModify
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_KSEF_TOKEN_MODIFY_OUT
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_env:=params_get().env;
_res:=_env.Param.RESULT;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_KSEF_TOKEN_MODIFY_OUT": {
::            "lastModifyDate": <dateTime | null>,
::            "invoice_Download": <unsignedByte | null>,
::            "invoice_Upload": <unsignedByte | null>,
::            "tokenEnabled": <unsignedByte | null>
::        }
::    }
::}

_res.DETAILS:=exec('obj_ntab_set','#array',
   ,'DATE',_jman.getValue('lastModifyDate')
   ,'DOWNLOAD',_jman.getValue('invoice_Download')
   ,'UPLOAD',_jman.getValue('invoice_Upload')
   ,'ENABLED',_jman.getValue('tokenEnabled')
);
_res.STATUS:=1;

_res


\DocumentGetinfo_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Tworzy parametr odbierający informacje o dokumencie
::       (dla metody GET DocumentGetinfo)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::   WY: obj_new(2) z tablicą elementów (parametr,wartość) oraz 'call'
::----------------------------------------------------------------------------------------------------------------------
_dokum:=params_get().env.Param.DOKUM;
_res:=params_get().env.Param.RESULT;

_bl_guid:=_res.DETAILS.GUID:=exec('FindAndGet','#table',DOKUM,_dokum,,"BL_GUID",'');

_obj:=obj_new(2);
_obj[1]:=exec('obj_ntab_set','#array',,'businesslinkDocIdentifier',_bl_guid);
_obj[2]:='call';
_obj


\DocumentGetinfoBatch_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Tworzy parametr odbierający informacje o dokumencie
::       (dla metody GET DocumentGetinfoBatch)
::   WE: params_get().env.Param.DOKUM - DOKUM.ref()
::   WY: obj_new(2) z tablicą elementów (parametr,wartość) oraz 'call'
::----------------------------------------------------------------------------------------------------------------------
params_exec('DocumentGetinfo_args','businesslink3')


\DocumentGetinfo_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Parsowanie wyniku metody DocumentGetinfo
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_GETINFO_OUT
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_res:=_env.Param.RESULT;
_dokum:=_env.Param.DOKUM;
_display:=_env.Param.DISPLAY;

::{
::    "DATA_OUT": {
::        "Status": <int>,
::        "ErrorCode": <int>,
::        "ErrorKey": <string>,
::        "ErrorMessage": <string>,
::        "BLMT_DOCUMENT_GETINFO_OUT": {
::            "externalDocId": <string>,
::            "docKind": <string>,
::            "docDate": <dateTime>,
::            "docNumber": <string>,
::            "ksefSendDate": <dateTime | null>,
::            "ksefConfirmDate": <dateTime | null>,
::            "ksefReferenceNumber": <string | null>,
::            "ksefUPOUrl": <string | null>,
::            "ksefUPOReference": <string | null>,
::            "ksefStatus": <string>,
::            "ksefStatusDescription": <string>,
::            "ksefServiceStatus": <string>,
::            "ksefDownloadStatus": <string>,
::            "businesslinkStatus": <string>,
::            "businessCheckStatus": <string>,
::            "businessCheckUrl": <string | null>
::        }
::    }
::}

:: Odszukujemy dokument wg externalDocId
DOKUM.cntx_psh();
DOKUM.prefix();

{? DOKUM.seek(_dokum)
||
   _res.STATUS:=1;

:: Obsługa sytuacji nadzwyczajnych (obiekt z błędem)
   {? var_pres('_a')=type_of(obj_new(1))
   || _obj:=_a;
::    Decyzja, co z tym robimy jeśli namierzony konkretny błąd:
::      - TO_MANY_REQUESTS - kolejne odpytywanie przesuwamy o 60 sekund
      {? _obj.ErrorKey='TO_MANY_REQUESTS'
      || DOKUM.BL_GETTM+=60
::    Jak coś niespodziewanego - kolejne odpytywanie przesuwamy o 60 sekund
      || DOKUM.BL_GETTM+=60
      ?};
      DOKUM.put()

   || _jman:=_a;
      {? type_of(_jman.getValue('externalDocId'))=type_of('')
      ||
::       Uzupełnienie opisu biznesowego w rejestrze zdarzeń
         _env.logApp(,
            'Dokument: %1 / %2 / %3'[_jman.getValue('docKind'),_jman.getValue('docNumber'),_jman.getValue('docDate')]
         );

         _ext_id:=_jman.getValue('externalDocId');
         _ksef:=0;
         {? DOKUM.uidref()=_ext_id
         || {? DOKUM.BSEND<>'X'
            ||
::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::             Wymuszenie kolejnego GETINFO po czasie ...
               DOKUM.BL_GETCN+=1;
               _upd:={? DOKUM.BL_GETCN<20 || pow(DOKUM.BL_GETCN/17,2)*60 || 30 ?};
               DOKUM.BL_GETTM:=utc_get()+_upd;
::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::             Businesslink
               _bl_end:=0;
::             businesslinkStatus: NOTREADY, READY, SENT, ERROR
::                - przestać przetwarzać, gdy jest NOTREADY, SENT lub ERROR
               _status:=_jman.getValue('businesslinkStatus');
               {? type_of(_status)=type_of('')
               || {? _status='NOTREADY' | _status='SENT' | _status='ERROR'
                  || _bl_end:=1
                  ?};
                  _env.logApp(,'businesslinkStatus: %1'[_status])
               ?};
::             UWAGA: potwierdzenia odbioru zostaną zaimportowane komunikatem DocumentReport aktualizując pola:
::                    DOKUM.RECEIVED, DOKUM.SW, DOKUM.BL_DTCON, DOKUM.BL_TMCON, DOKUM.BL_LOGIN

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::             KSeF
               _ksef_end:=0;
               {? type_of(_jman.getValue('ksefSendDate'))=type_of('')
               || DOKUM.KSEFSDAT:=iso_datetime_parse(_jman.getValue('ksefSendDate')).date;
                  DOKUM.KSEFSTIM:=iso_datetime_parse(_jman.getValue('ksefSendDate')).time
               ?};
               {? type_of(_jman.getValue('ksefConfirmDate'))=type_of('')
               || DOKUM.KSEFCDAT:=iso_datetime_parse(_jman.getValue('ksefConfirmDate')).date;
                  DOKUM.KSEFCTIM:=iso_datetime_parse(_jman.getValue('ksefConfirmDate')).time
               ?};
               {? type_of(_jman.getValue('ksefReferenceNumber'))=type_of('')
               || DOKUM.NRKSEF:=_jman.getValue('ksefReferenceNumber');
                  _ksef:=(DOKUM.NRKSEF<>'' & DOKUM.DOKUMI=null)
               ?};
               {? type_of(_jman.getValue('ksefUPOUrl'))=type_of('')
               || DOKUM.KSEFUPO:=_jman.getValue('ksefUPOUrl');
                  {? DOKUM.KSEFUPOG='N' || DOKUM.KSEFUPOG:='P' ?}
               ?};
::             >>> ksefUPOReference >>> dodać nowe pole jeśli okaże się potrzebne
               {? type_of(_jman.getValue('ksefUPOReference'))=type_of('')
               || ~~
               ?};
::             ksefStatus: NOTREADY, READY, SENT, READY2SIGN, SIGNED, CONFIRMED, ERROR, READY2GO
::                - przestać przetwarzać, gdy jest NOTREADY, CONFIRMED, ERROR lub READY2GO
::                - wstrzymać przetwarzanie na czas podpisywania, gdy jest READY2SIGN
               {? type_of(_jman.getValue('ksefStatus'))=type_of('')
               || _status:=_jman.getValue('ksefStatus');
                  {? _status='NOTREADY' | _status='CONFIRMED' | _status='ERROR' | _status='READY2GO'
                  || _ksef_end:=1
                  ?};
                  _env.logApp(,'ksefStatus: %1'[_status]);
                  {? _status='READY2SIGN'
                  || DOKUM.KSEF2SGN:='T';
                     _xml2sign:=fopen(null(),'bw',,,1);
                     _jman.getValue('xmlToSignBase64',_xml2sign,'decode');
                     DOKUM.bl_put('KSEFXSGN',_xml2sign,,,'ksef2sign.xml')
::                  |? _status='READY2GO'
::                  || DOKUM.BC2GO:='T'
                  ?};
                  DOKUM.KSEFSTAT:=_status
               ?};
               {? type_of(_jman.getValue('ksefStatusDescription'))=type_of('')
               || DOKUM.KSEFDESC:=_jman.getValue('ksefStatusDescription')
               || DOKUM.KSEFDESC:=''
               ?};
::             ksefServiceStatus: AVAILABLE, UNAVAILABLE
::                - wymusić koniec pobierania informacji w aktualnej pętli
               {? type_of(_jman.getValue('ksefServiceStatus'))=type_of('')
               || {? _jman.getValue('ksefServiceStatus')='UNAVAILABLE'
                  || _res.STATUS:=-1
                  ?}
               ?};
::             ksefDownloadStatus: NOTREADY, SYNC, DOWNLOADED
::             >>> do czego ta informacja? >>> dodać nowe pole jeśli okaże się przydatne
               {? type_of(_jman.getValue('ksefDownloadStatus'))=type_of('')
               || ~~
               ?};

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::             BusinessCheck
               _check_end:=0;
::             businessCheckStatus: NOTREADY, SENT, CONFIRMED, WARNING, ERROR, UNAVAILABLE
::                - przestać przetwarzać gdy jest NOTREADY, CONFIRMED, WARNING, ERROR lub UNAVAILABLE
               {? type_of(_jman.getValue('businessCheckStatus'))=type_of('')
               || _status:=_jman.getValue('businessCheckStatus');
                  {? _status='NOTREADY' | _status='CONFIRMED' |
                     _status='WARNING' | _status='ERROR' | _status='UNAVAILABLE'
                  || _check_end:=1
                  ?};
                  _env.logApp(,'businessCheckStatus: %1'[_status]);
                  DOKUM.BLC_STAT:=_status
               ?};
               {? type_of(_jman.getValue('businessCheckUrl'))=type_of('')
               || DOKUM.memo_set(_jman.getValue('businessCheckUrl'),'BLC_URL')
               || DOKUM.memo_set('','BLC_URL')
               ?};

::-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
::             Zakończenie przetwarzania (pobierania komunikatu BLMT_DOCUMENT_GETINFO), gdy spełnione wszystkie warunki
               {? _bl_end & _ksef_end & _check_end
               || DOKUM.INFO_END:='T'
               ?};
               {? DOKUM.put()
               || DOKUM.memo_put(,'BLC_URL')
               ?};
               {? _ksef
               || exec('gen_pdf', 'businesslink3');
::                  exec('DocumentAttachmentsAdd','businesslink3',DOKUM.ref(),0);
                  ~~
               ?};
               {? _ksef || exec('ksef_sended_pdf','dokum',DOKUM.ref(),DOKUM.DOKR) ?}
            ?}
         ?}
      ?}
   ?}
?};

DOKUM.cntx_pop();

_res


\DocumentGetinfoBatch_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Parsowanie wyniku metody DocumentGetinfoBatch
::   WE: _a - obiekt JMAN reprezentujący zawartość BLMT_DOCUMENT_GETINFO_OUT
::----------------------------------------------------------------------------------------------------------------------
params_exec('DocumentGetinfo_parse','businesslink3',_a)


\SignatureSendBatch_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Argument wywołania metody SignatureSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;
_res:=_env.Param.RESULT;
_signed_request:=_env.Param.SIGNEDR;

::{
::    "DATA_IN": {
::        "businesslinkDocIdentifier":<string>,
::        "signedInitXmlBase64":<string>
::    }
::}

_all_ok:=0;
DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
   _env.logApp(,'businesslinkDocIdentifier: %1'[DOKUM.BL_GUID]);
   _res.DETAILS.GUID:=DOKUM.BL_GUID;

:: do manipulacji elementem głównym
   _jman:=exec('json_man','__jsonm','{}');

   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'businesslinkDocIdentifier'),DOKUM.BL_GUID);
      _jman.setValue(_jman.addChildElement(_path,'signedInitXmlBase64'),_signed_request,'encode');

   _all_ok:=1
?};
DOKUM.cntx_pop();

_file:=fopen(null(),'Uw',,1,1);
{? _all_ok & _jman.getJSON(_file) || _file || ~~ ?}


\SignatureSendBatch_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Parsowanie wyniku metody SignatureSend
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;

_res:=_env.Param.RESULT;

DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
|| DOKUM.KSEF2SGN:='S';
   DOKUM.KSEFSTAT:='SIGNED';
   DOKUM.put()
?};
DOKUM.cntx_pop();

_res.STATUS:=1;
_res


\DocumentSendGo_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Argument wywołania metody DocumentSendGo
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;
_res:=_env.Param.RESULT;

::{
::    "DATA_IN": {
::        "businesslinkDocIdentifier":<string>,
::    }
::}

_all_ok:=0;
DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
:: Uzupełnienie opisu biznesowego w rejestrze zdarzeń
   _env.logApp(,'businesslinkDocIdentifier: %1'[DOKUM.BL_GUID]);
   _res.DETAILS.GUID:=DOKUM.BL_GUID;

:: do manipulacji elementem głównym
   _jman:=exec('json_man','__jsonm','{}');

   _jman.setObject(_path:=_jman.addChildElement('','DATA_IN'),'{}');
      _jman.setValue(_jman.addChildElement(_path,'businesslinkDocIdentifier'),DOKUM.BL_GUID);

   _all_ok:=1
?};
DOKUM.cntx_pop();

_file:=fopen(null(),'Uw',,1,1);
{? _all_ok & _jman.getJSON(_file) || _file || ~~ ?}


\DocumentSendGo_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Parsowanie wyniku metody DocumentSendGo
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_dokum:=_env.Param.DOKUM;

_res:=_env.Param.RESULT;

DOKUM.cntx_psh();
DOKUM.prefix();
{? DOKUM.seek(_dokum)
||
:: Nawinięcie statusu dla natychmiastowej zmiany na tabeli nadrzędnej
   DOKUM.KSEFSTAT:='READY';
:: Odblokowanie pobierania informacji o dokumencie, resetowanie liczników
   DOKUM.INFO_END:='N';
   DOKUM.BL_GETCN:=0;
   DOKUM.BL_GETTM:=0;
   DOKUM.put()
?};
DOKUM.cntx_pop();

_res.STATUS:=1;
_res


::======================================================================================================================
:: Pozostałe funkcje
::======================================================================================================================


\kst_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Zmienia konfigurację ustawień wybranych parametrów
::----------------------------------------------------------------------------------------------------------------------
KST_DEF.cntx_psh();
KST_DEF.clear();
KST_MAP.cntx_psh();
KST_MAP.index('KST_MAP');
KST_MAP.prefix('XINFO','XINFO');
:: wyłącz historię zmiany wartości
"  {! _ai:=1.._
   |! {? KST_MAP.find_key(_[_ai],_[_ai]) & KST_MAP.KST_DEF().HISTORIA<>'N'
      || KST_DEF.HISTORIA:='N';
         KST_DEF.put()
      ?}
   !}
"( 'BL_TNNT','BL_NAME','BL_USR','BL_PASS','BL_RURL','BL_OURL','BL_SCOP','BL_WADL','BL_ENV','BL_INVAL');
:: jeszcze kilka...
"  {! _ai:=1.._
   |! {? KST_MAP.find_key(_[_ai],_[_ai]) & KST_MAP.KST_DEF().HISTORIA<>'N'
      || KST_DEF.HISTORIA:='N';
         KST_DEF.put()
      ?}
   !}
"( 'BL_ABCU','BL_ABCP','BL_ABCE');
:: ustaw jako lokalne - jest domyślnie, więc nie trzeba
::"  {! _ai:=1.._
::   |! {? KST_MAP.find_key(_[_ai],_[_ai]) & KST_MAP.KST_DEF().WSPOLNA<>'N'
::      || KST_DEF.WSPOLNA:='N';
::         KST_DEF.put()
::      ?}
::   !}
::"( 'BL_TNNT','BL_NAME','BL_USR','BL_PASS','BL_RURL','BL_OURL','BL_SCOP','BL_WADL','BL_ENV','BL_INVAL');
KST_DEF.cntx_pop();
KST_MAP.cntx_pop();
~~


\token_id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Identyfikator używany do uzyskiwania tokenta dostępowego
::----------------------------------------------------------------------------------------------------------------------
:: Identyfikator tenanta, gdy chcemy uzyskać token globalnie dla dzierżawcy
::exec('tenant','businesslink3')
:: Dodatkowo identyfikator sesji, gdy chcemy uzyskać token lokalnie dla sesji programu
'%1/%2'[exec('tenant','businesslink3'),SYSLOG.ses_id()]


\max_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14]
:: OPIS: Maksymalny łączny rozmiar załączników wysyłanych do usługi
::----------------------------------------------------------------------------------------------------------------------
_size:=#exec('bl_par','businesslink3','BL.Docs.Attachments.MaxSizeInMegabytes');
{? _size<3 || _size:=3 ?};
_size*1024*1024


\dokumz_pack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Tworzy archiwum zip z zawartością pola BLOB o akronimie acr tabeli tab, zwraca je w postaci obiektu plikowego
::   WE: _a - alias tabeli
::       _b - akronim pola BLOB
::   WY: [FILE] / ~~
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
_acr:=_b;

_temp:=fmk_tmp_dir(0);
{? type_of('_temp')=type_of(~~) || return() ?};

_sep:=exec('sep','#file',2);

_file_name:=_temp.get_path()+_sep+_tab.bl_info(_acr,'NAME');
{? ~_tab.bl_get(_acr,_file_name,0) || return() ?};

_zip_name:=_temp.get_path()+_sep+'zipfile.zip';
{? ~fpack_add(_zip_name,_file_name) || return() ?};

fopen(_zip_name,'br',,,1)


\dokumz_unpack
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Wypakowuje z archiwum zip (pole struktury JSON) plik, zwraca go w postaci obiektu plikowego
::   WE: _a - obiekt JMAN zawierający m.in. pola attachBody, attachName
::   WY: [FILE] / ~~
::----------------------------------------------------------------------------------------------------------------------
_jman:=_a;

_temp:=fmk_tmp_dir(0);
{? type_of('_temp')=type_of(~~) || return() ?};

_sep:=exec('sep','#file',2);

_zip_name:=_temp.get_path()+_sep+'zipfile.zip';
_zip_file:=fopen(_zip_name,'bw',,,1);
_jman.getValue('attachBody',_zip_file,'decode');
_zip_file.fclose();

{? ~funpack('zip',_zip_name,_temp.get_path()) || return() ?};

fopen(_temp.get_path()+_sep+_jman.getValue('attachName'),'br',,,1)


\env_internal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Zwraca obiekt z definicją środowisk
::       https://confluence.assecobs.pl/pages/viewpage.action?pageId=191338242
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'KOD','STRING[20]','Kod'@
   ,'URL','STRING[255]','Url'@
   ,'WADL','STRING[255]','Url WADL'@
);

_wer:=_tab.mk_sel('Dostępne środowiska'@,,,'env_internal',,,20);
_tab.win_fld(_wer,,'KOD');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_tab.win_sel(_wer);

_obj:=obj_new('TAB','WER','add');
_obj.TAB:=_tab;
_obj.WER:=_wer;
_obj.add:="
   .TAB.blank();
   .TAB.KOD:=_a;
   .TAB.URL:=_b;
   .TAB.WADL:=_c;
   .TAB.add()
";

:: Środowisk DEV obecnie nie używamy
::_obj.add('DEV-DEV',
::   'https://businesslinkapi-dev-dev.abs.assecobs.pl/?dbc=bl_internal_rest',
::   'https://businesslinkapi-dev-dev.abs.assecobs.pl/?dbc=bl_internal_rest&WADL');
::_obj.add('DEV-SETUP',
::   'https://businesslinkapi-dev-setup.abs.assecobs.pl/?dbc=bl_internal_rest',
::   'https://businesslinkapi-dev-setup.abs.assecobs.pl/?dbc=bl_internal_rest&WADL');
_obj.add('TEST-PREPROD',
   'https://businesslinkapi-test-preprod.abs.assecobs.pl/?dbc=internal_rest',
   'https://businesslinkapi-test-preprod.abs.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('TEST-ZEW',
   'https://businesslinkapi-test.assecobs.pl/?dbc=internal_rest',
   'https://businesslinkapi-test.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('PROD',
   'https://businesslinkapi.assecobs.pl/?dbc=internal_rest',
   'https://businesslinkapi.assecobs.pl/?dbc=internal_rest&WADL');
_obj.add('DEMO',
   'https://businesslinkapi-demo.assecobs.pl/?dbc=internal_rest',
   'https://businesslinkapi-demo.assecobs.pl/?dbc=internal_rest&WADL');

_obj


\set_tenant_state
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.14_05]
:: OPIS: Ustawia status dzierżawcy
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
_env:=exec('env_internal','businesslink3');
_env.TAB.prefix(XINFO.BL_ENV,);
{? _env.TAB.first()
|| _choice:=FUN.choice('Ustaw status docelowy dzierżawcy'@,,'Aktywny'@,'Ograniczony dostęp'@,'Wyłączony'@);
   {? _choice=1
   || _state:='Active'
   |? _choice=2
   || _state:='Suspended'
   |? _choice=3
   || _state:='Disabled'
   || _state:=''
   ?};
   {? _state<>''
   || exec('TenantModify','sl_api',
         exec('sync_pd_internal','businesslink3'),
         _env.TAB.URL,
         exec('tenant','businesslink3'),,,,
         _state,
         1
      )
   ?}
|| FUN.info(
      'Aby skorzystać z funkcji zmiany statusu dzierżawcy,\n'
      'należy ustawić poprawne środowisko w parametrach pracy Businesslink.'@
   )
?};
''


\send_to_ocr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wystawia dokument do OCR przed Businesslink
::       W przypadku posiadania uprawnień do ZBL_BIL_DOKS dodatkowo może wysłać od razu przez API
::----------------------------------------------------------------------------------------------------------------------
_selected:=(DOKUM.sel_size()>0);

DOKUMZ.cntx_psh();
DOKUMZ.index('KOCR');
DOKUMZ.prefix(DOKUM.ref(),'T','N');
{? ~DOKUMZ.first()
|| KOMM.info('Nie znaleziono żadnego dokumentu do OCR.'@,~_selected);
   DOKUMZ.cntx_pop();
   return()
?};
DOKUMZ.cntx_pop();

{? _selected | FUN.ask('Czy oznaczyć dokument do OCR w Businesslink?'@)
|| DOKUM.BL_STAT:=exec('ready_to_send','zbl_stat');
   DOKUM.BL_OCR:=exec('ready_to_ocr','zbl_stat');
   DOKUM.put()
?}


\send_to_ocr_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wysyłanie dokumentu - przed grupą zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy oznaczyć zaznaczone dokumenty do OCR w Businesslink?'@)
|| KOMM.init(,,'Oznaczanie dokumentów'@);
   1
|| 0
?}


\send_to_ocr_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wysyłanie dokumentu - po grupie zaznaczonych rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\bl_par_cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła tworzy tablicę elementów nazwanych reprezentujących parametry działania Businesslink.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Opis pól:
::    SYMBOL   STRING[40]  - Symbol parametru, którym posługuje się portal (sl_TenantParams.ParID).
::    OPIS     STRING[255] - Opis parametru (sl_TenantParams.Description).
::    WARTOSC  STRING[255] - Wartość parametru (sl_TenantParams.Value).
::    MB_TYP   STRING[12]  - Typ pola w tabeli tymczasowej. Jeżeli parametr nie jest redagowalny, to pole powinno mieć
::                           wartość ''.
::             Jeżeli MB_TYP='', to poniższe pola nie mają znaczenia - mogą zostać pominięte w definicji.
::    MB_NAZWA STRING[64]  - Nazwa pola w tabeli tymczasowej.
::    get      RULE        - Formuła realizująca konwersję wartości odczytanej z tabeli do wartości redagowanej w oknie.
::    set      RULE        - Formuła realizująca konwersję wartości zredagowanej w oknie do wartości zapisywanej do
::                           tabeli.
:: Uwaga.
::    Prawidłowa konfiguracja parametrów pozwala na bezobsługowe:
::       1. Dodanie odpowiednich pól do tabeli tymczasowej, dla której odbywa się redagowanie parametrów.
::       2. Odczyt danych z tabeli BL_PAR i nadanie odpowiednich wartości polom tabeli tymczasowej.
::       3. Aktualizację wartości w tabeli BL_PAR po redakcji pól tabeli tymczasowej.
::    Konfiguracja NIE wpływa na wygląd okna redagowania - każde pole tabeli tymczasowej (związane z parametrem) musi
::    być dodane indywidualnie do okna (patrz wyżej: \params).
::
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Parametry nieredagowalne (w tym systemowe).

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Parametry redagowalne.
_s_t_message:=exec('obj_ntab_set','#array',,
   'SYMBOL','SuspendedTenantMessage',
   'OPIS','Komunikat wyświetlany podczas ograniczenia dostępu do dzierżawcy',
   'WARTOSC','Trwają prace serwisowe. Dostęp do portalu dla Twojej firmy został czasowo wstrzymany.',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Komunikat wyświetlany podczas ograniczenia dostępu'@,
   'get',"_a",
   'set',"_a"
);
_ocr_configured:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.Configured',
   'OPIS','Umożliwia włączenie OCR przez Tenanta',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Umożliwia włączenie OCR przez Tenanta'@,
   'get',"_a",
   'set',"_a"
);
_ocr_enabled:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.Enabled',
   'OPIS','Czy używać modułu OCR dla dokumentów przychodzących',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Czy używać modułu OCR dla dokumentów przychodzących'@,
   'get',"_a",
   'set',"_a"
);
_ocr_engine:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.Engine',
   'OPIS','Dostawca OCR',
   'WARTOSC',exec('ocr_engine_skanuj_to','businesslink3'),
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Dostawca OCR'@,
   'get',"_a",
   'set',"_a"
);
_ocr_company:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.CompanyId',
   'OPIS','Identyfikator firmy',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Identyfikator firmy'@,
   'get',"_a",
   'set',"_a"
);
_ocr_user:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.UserName',
   'OPIS','Użytkownik OCR',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Użytkownik OCR'@,
   'get',"_a",
   'set',"_a"
);
_ocr_pass:=exec('obj_ntab_set','#array',,
   'SYMBOL','OCR.Password',
   'OPIS','Hasło OCR',
   'WARTOSC','',
   'MB_TYP','STRING[255]',
   'MB_NAZWA','Hasło OCR'@,
   'get',"_a",
   'set',"_a"
);
_bl_maxsize:=exec('obj_ntab_set','#array',,
   'SYMBOL','BL.Docs.Attachments.MaxSizeInMegabytes',
   'OPIS','Maksymalny rozmiar wszystkich załączników dla jednego dokumentu (MB)',
   'WARTOSC','3',
   'MB_TYP','REAL',
   'MB_NAZWA','Maks. rozmiar załączników dla jednego dokumentu (MB)'@,
   'get',"#_a",
   'set',"$_a"
);
_ksef_enabled:=exec('obj_ntab_set','#array',,
   'SYMBOL','BL.KSEF.IntegrationEnabled',
   'OPIS','Integracja z Krajowym Rejestrem Faktur (KSeF) włączona',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Integracja z Krajowym Rejestrem Faktur (KSeF) włączona'@,
   'get',"_a",
   'set',"_a"
);
_ksef_download:=exec('obj_ntab_set','#array',,
   'SYMBOL','BL.KSEF.AutoDownloadDocuments',
   'OPIS','Chcę pobierać dokumenty z KSeF automatycznie',
   'WARTOSC','0',
   'MB_TYP','STRING[1]',
   'MB_NAZWA','Automatyczne pobieranie dokumentów z KSeF włączone'@,
   'get',"_a",
   'set',"_a"
);

_cfg:=exec('obj_ntab_set','#array',,
:: '12345678',
   'S_T_MSG',_s_t_message,
   'OCR_CONF',_ocr_configured,
   'OCR_ENAB',_ocr_enabled,
   'OCR_ENGI',_ocr_engine,
   'OCR_COMP',_ocr_company,
   'OCR_USER',_ocr_user,
   'OCR_PASS',_ocr_pass,
   'BL_MAX',_bl_maxsize,
   'KSEF_ON',_ksef_enabled,
   'KSEF_DWN',_ksef_download
);

_cfg


\bl_par_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Tworzy tablicę tymczasową dla parametrów Businesslink.
::   WE: [_a] - Tablica elementów nazwanych reprezentujących parametry działania (patrz: \bl_par_cfg).
::   WY: tabela tymczasowa
::----------------------------------------------------------------------------------------------------------------------
_cfg:={? var_pres('_a')>100 || _a || exec('bl_par_cfg','businesslink3') ?};
_stru:=exec('tab_tmp','#table');

:: Parametry połączenia
_stru.add('TNNT','STRING[50]','Identyfikator dzierżawcy'@);
_stru.add('NAME','STRING[100]','Nazwa dzierżawcy'@);
_stru.add('USR','STRING[50]','Użytkownik'@);
_stru.add('PASS','STRING[50]','Hasło'@);
_stru.add('RURL','STRING[255]','Url usługi'@);
_stru.add('OURL','STRING[255]','Url autoryzacyjny'@);
_stru.add('SCOPE','STRING[50]','Zasięg autoryzacji'@);
_stru.add('WADL','STRING[255]','Url WADL'@);
_stru.add('ENV','STRING[20]','Środowisko'@);
:: Parametry serwera notyfikacji
_stru.add('ABC_URL','STRING[255]','Adres serwera notyfikacji'@);
_stru.add('ABC_PORT','INTEGER','Port serwera notyfikacji'@);
_stru.add('ABC_ENV','STRING[255]','Środowisko serwera notyfikacji'@);
:: Parametry specyficzne Businesslink
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>''
   || _stru.add(_names[_lp],_cfg[_lp].MB_TYP,_cfg[_lp].MB_NAZWA)
   ?}
!};
_stru.create(1)


\bl_par_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Inicjalizacja parametrów działania.
::   WE: [_a] [ARRAY] - Tablica elementów nazwanych reprezentujących parametry działania (patrz: \bl_par_cfg).
::----------------------------------------------------------------------------------------------------------------------
_cfg:={? var_pres('_a')>100 || _a || exec('bl_par_cfg','businesslink3') ?};

_firma:=exec('ref_firma','ustawienia');

BL_PAR.cntx_psh();
BL_PAR.index('SYMBOL');
BL_PAR.prefix(_firma);
{! _lp:=1 .. obj_len(_cfg)
|! _par:=_cfg[_lp];
   {? ~BL_PAR.find_key(_par.SYMBOL,)
   || BL_PAR.blank();
      BL_PAR.FIRMA:=_firma;
      BL_PAR.SYMBOL:=_par.SYMBOL;
      BL_PAR.OPIS:=_par.OPIS;
      BL_PAR.WARTOSC:=_par.WARTOSC;
      BL_PAR.add()
   ?};
   obj_del(_par)
!};
BL_PAR.cntx_pop();
~~


\bl_par_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła zapisuje do tabeli zmiany poczynione w oknie redagowania.
::   WE: _a [ARRAY] - Tablica elementów nazwanych reprezentujących parametry działania (patrz: \bl_par_cfg).
::       _b [TABLE] - Uchwyt tabeli tymczasowej.
::----------------------------------------------------------------------------------------------------------------------
_cfg:=_a;
_tab:=_b;

_firma:=exec('ref_firma','ustawienia');

BL_PAR.cntx_psh();
BL_PAR.index('SYMBOL');
BL_PAR.prefix(_firma);
_names:=obj_ntab_names(_cfg);
{! _lp:=1 .. obj_len(_names)
|! {? _cfg[_lp].MB_TYP<>'' & BL_PAR.find_key(_cfg[_lp].SYMBOL,)
   || _val:=_cfg[_lp].set(($('_a.%1' [_names[_lp]]))(_tab));
      {? BL_PAR.WARTOSC<>_val
      || BL_PAR.WARTOSC:=_val;
         BL_PAR.put()
      ?}
   ?}
!};
BL_PAR.cntx_pop();
~~


\ocr_engines
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Zwraca obiekt z definicją dostawców OCR
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1
   ,'KOD','STRING[20]','Kod'@
   ,'USER','STRING[1]','Użytkownik i hasło wymagane'@
);

_wer:=_tab.mk_sel('Dostawcy OCR'@,,,'ocr_engines',,,20);
_tab.win_fld(_wer,,'KOD');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
_tab.win_sel(_wer);

_obj:=obj_new('TAB','WER','add');
_obj.TAB:=_tab;
_obj.WER:=_wer;
_obj.add:="
   .TAB.blank();
   .TAB.KOD:=_a;
   .TAB.USER:=_b;
   .TAB.add()
";

:: Dla wersji deweloperskiej dodatkowo dostępny dostawca "systemowy"
{? exec('runtime_dro','#system')
|| _obj.add(exec('ocr_engine_abs','businesslink3'),'N')
?};
_obj.add(exec('ocr_engine_skanuj_to','businesslink3'),'T');
::_obj.add('NAVYSOL','T');
::_obj.add('SALDEO','T');

_obj


\ocr_engine_skanuj_to
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Nazwa dostawcy OCR - 'SKANUJ.TO'
::----------------------------------------------------------------------------------------------------------------------
'SKANUJ.TO'


\ocr_engine_abs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Nazwa dostawcy OCR - 'ABS'
::----------------------------------------------------------------------------------------------------------------------
'ABS'


\params_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Formuła na opcje pól w oknie parametrów
::   WE: _a - akronim okna redagowania
::----------------------------------------------------------------------------------------------------------------------
_red:=_a;
_tab:=params_get().TAB;
_obj:=params_get().ocr_engines;
_obj.TAB.prefix();
XINFO.efld_opt(_red,'mark=1',_tab,'BL_MAX');
XINFO.efld_opt(_red,'editable=grayed',_tab,'OCR_CONF');
XINFO.efld_opt(_red,
   {? _tab.OCR_ENAB='1' & _obj.TAB.size()>0 || 'editable=1,mark=1' || 'editable=grayed,mark=0' ?},
   _tab,
   'OCR_ENGI'
);
XINFO.efld_opt(_red,
   {? _tab.OCR_ENAB='1' & _tab.OCR_ENGI<>exec('ocr_engine_abs','businesslink3') || 'enable=1' || 'enable=0' ?}+',mark=1',
   _tab,
   'OCR_COMP'
);
XINFO.efld_opt(_red,
   {? _tab.OCR_ENAB='1' & _tab.OCR_ENGI<>exec('ocr_engine_abs','businesslink3') || 'enable=1' || 'enable=0' ?}+',mark=1',
   _tab,
   'OCR_USER'
);
XINFO.efld_opt(_red,
   {? _tab.OCR_ENAB='1' & _tab.OCR_ENGI<>exec('ocr_engine_abs','businesslink3') || 'enable=1' || 'enable=0' ?}+',mark=1',
   _tab,
   'OCR_PASS'
);
~~


\invite_note
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Notka wyświetlana przy zaproszeniu do usługi
::----------------------------------------------------------------------------------------------------------------------
'Pamiętaj, że jesteś zobowiązany do podania prawdziwych i rzetelnych danych firmy i osoby z tej firmy, '
'do której wyślesz zaproszenie do nawiązania współpracy w ramach usługi Businesslink.'@


\bl_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Odczytuje bieżącą wartość parametru portalu Businesslink
::   WE: _a - kod parametru
::   WY: wartość parametru
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _code:=_a
|| return('')
?};

_firma:=exec('ref_firma','ustawienia');

_par:='';

BL_PAR.cntx_psh();
BL_PAR.index('SYMBOL');
BL_PAR.prefix(_firma,_code,);
{? BL_PAR.first() || _par:=BL_PAR.WARTOSC ?};
BL_PAR.cntx_pop();

_par


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Akcja 'Wysyłanie -> Doślij załączniki' w oknie załączników
::----------------------------------------------------------------------------------------------------------------------
{? DOKUM.BSEND='T'
|| exec('DocumentAttachmentsAdd','businesslink3',DOKUM.ref(),1)
|| FUN.info('Dosyłać można tylko załączniki do wysłanego dokumentu.'@)
?};
~~


\invite_simply_kh_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Okno dialogowe do obsługi uproszczonego zapraszania
::   WE: _a - [0]/1 czy wariant dla akcji grupowej (dla akcji niegrupowej wywołanie w kontekście rekordu KH)
::   WY: obj_new('tab','red')
::----------------------------------------------------------------------------------------------------------------------
_grupa:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_tab:=tab_tmp(1
   ,'LP','INTEGER','Lp'@
   ,'HINT','SYS_MEMO','Podpowiedź'@
   ,'TEXT','SYS_MEMO','Treść'@
   ,'NOTIFY','INTEGER','Chcę powiadomić kontrahenta o zmianie'@
   ,'EMAIL','SYS_MEMO','Adresy e-mail kontrahenta'@
   ,'EINFO','SYS_MEMO','Adresy e-mail kontrahentów'@
);
_tab.memo_set(exec('invite_simply_hint','businesslink3',_grupa),'HINT');
_tab.memo_set(exec('invite_simply_text','businesslink3'),'TEXT');
{? ~_grupa || _tab.memo_set(exec('email_bl_simple','kontrahent',KH.ref()),'EMAIL') ?};
_tab.memo_set(exec('invite_simply_einfo','businesslink3'),'EINFO');
_red:=_tab.mk_edit('Włącz komunikację przez Businesslink'@,0,'invitesimplyon'+$_grupa,,,'html_maximized');
_tab.win_esep(_red,{? _grupa || 'Powiadom kontrahentów o zmianie'@ || 'Powiadom kontrahenta o zmianie'@ ?});
_tab.win_efld(_red,,'HINT',,,90,-2,1,,1);
_tab.win_efld(_red,,'TEXT',,,90,-9,,,1);
_tab.win_efld(_red,,'NOTIFY',,,,,,
   {? _grupa || 'Chcę powiadomić kontrahentów o zmianie'@ || 'Chcę powiadomić kontrahenta o zmianie'@ ?},
   ,,'check-box',,"1","0"
);
{? _grupa
|| _tab.win_efld(_red,,'EINFO',,,90,-3,1)
|| _tab.win_efld(_red,,'EMAIL',,,90,-3,1)
?};
_formula:="
   _tab:=cur_tab(1,1);
   _email:=OPERATOR.USER().EMAIL;
   {? _email=''
   || FUN.info('Nie można wysłać przykładowej wiadomości — brak adresu e-mail użytkownika.'@)
   || {? FUN.ask('Czy wysłać przykładową wiadomość na adres: %1?'[_email])
      || _res:=exec('NotificationSend','businesslink3',
            _email,
            'Powiadomienie o dostępie do usługi Businesslink',
            gsub(_tab.memo_txt(,0,'TEXT'),'\n','<br>')
         );
         {? _res.STATUS
         || FUN.info('Przykładowa wiadomość została wysłana.\nSprawdź swoją skrzynkę pocztową.'@)
         || FUN.info('Przykładowa wiadomość nie została wysłana.'@)
         ?}
      ?}
   ?};
   ''
";
_tab.win_ebtn(_red,'text=%1,align=begin'['Wyślij przykładową wiadomość'@],_formula);
exec('ok_esc','#window',_tab,_red);

exec('obj_ntab_set','#array',,'tab',_tab,'red',_red)


\invite_simply_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Przeprowadzenie procesu zawiązania uproszczonej współpracy z kontrahentem do wysyłki dokumentów przez BL
::----------------------------------------------------------------------------------------------------------------------
{? KH.sel_size()>0
|| _tab:=KH.sel_aget();
   _grupa:=1
|| _tab:=tab_tmp(1,'REF','INTEGER','#KH.ref()');
   _tab.REF:=#KH.ref();
   _tab.add();
   _grupa:=0
?};

:: Rekordy faktycznie do obrobienia
_tab1:=tab_tmp(1,'REF','INTEGER','#KH.ref()');

KOMM.init(,,'Włączanie współpracy przez Businesslink'@);

KH.cntx_psh(); KH_DOD.cntx_psh();
KH.prefix(); KH_DOD.prefix();

{? _tab.first()
|| {!
   |? {? KH.seek(_tab.REF)
      ||
         exec('kh_dod_ini','kontrahent',KH.ref(),1);

         _email:=exec('email_bl_simple','kontrahent',KH.ref());

         {? KH_DOD.EFAKTURA='T'
         || KOMM.info(
               {? _grupa || 'Kontrahent: %1'@[KH.SKR]+'\n' || '' ?}+
               'Została wyrażona zgoda na otrzymywanie dokumentów e-mailem,\n'
               'zmiana na otrzymywanie dokumentów nie jest możliwa.\n\n'
               'Najpierw należy wyłączyć zgodę na otrzymywanie dokumentów e-mailem.'@,~_grupa
            )

         |? KH_DOD.EFAKTURA='B'
         || KOMM.info(
               {? _grupa || 'Kontrahent: %1'@[KH.SKR]+'\n' || '' ?}+
               'Została wyrażona zgoda na wymianę dokumentów w usłudze Businesslink,\n'
               'zmiana na samo otrzymywanie dokumentów (wersja uproszczona) nie jest możliwa.\n\n'
               'Najpierw należy wyłączyć relację w usłudze Businesslink.'@,~_grupa
            )

         |? _email=''
         || KOMM.info(
               {? _grupa
               || 'Kontrahent %1 nie ma przypisanej osoby kontaktowej z adresem e-mail\n'
                  'i zgodą na otrzymywanie e-dokumentów w usłudze Businesslink.'@[KH.SKR]
               || 'Kontrahent nie ma przypisanej osoby kontaktowej z adresem e-mail\n'
                  'i zgodą na otrzymywanie e-dokumentów w usłudze Businesslink.'@
               ?},~_grupa
            )

         |? KH_DOD.EFAKTURA='U'
         || {? _grupa
            || KOMM.info(
                  'Kontrahent: %1'@[KH.SKR]+'\n'+
                  'Została już wyrażona zgoda na otrzymywanie dokumentów w usłudze Businesslink.\n'
                  'Współpracę można wyłączyć za pomocą akcji dla pojedynczego kontrahenta.'@,~_grupa
               )
            || {? FUN.ask(
                     'Została już wyrażona zgoda na otrzymywanie dokumentów w usłudze Businesslink.\n'
                     'Czy chesz wyłączyć współpracę?'@
                  )
               || KH_DOD.EFAKTURA:='N';
                  KH_DOD.put()
               ?}
            ?}

         || _tab1.REF:=_tab.REF;
            _tab1.add()
         ?}
      ?};
      _tab.next()
   !}
?};

:: Może nic nie zostało, to kończymy
{? _tab1.size()=0
|| KOMM.select();
   {? KH.sel_size()>0 || KH.sel_adel() ?}
:: A jak coś jest, to dialog
|| _obj:=exec('invite_simply_kh_dialog','businesslink3',_grupa);
   _obj.tab.win_edit(_obj.red);
   {? _obj.tab.edit()
   || {? _obj.tab.NOTIFY
      || _ask:=
            {? _grupa
            || 'Czy wysłać powiadomienia na adresy e-mail\n'
               'i włączyć komunikację przez Businesslink dla zaznaczonych kontrahentów?'@
            || 'Czy wysłać powiadomienie na adres(y):\n%1\n'
               'i włączyć komunikację przez Businesslink dla kontrahenta %2?'@
               [_email,KH.SKR]
            ?};
         {? FUN.ask(_ask)
         || {? _tab1.first()
            || {!
               |? {? KH.seek(_tab1.REF)
                  || exec('kh_dod_ini','kontrahent',KH.ref(),1);
                     _res:=exec('NotificationSend','businesslink3',
                        exec('email_bl_simple','kontrahent',KH.ref()),
                        'Powiadomienie o dostępie do usługi Businesslink',
                        gsub(_obj.tab.memo_txt(,0,'TEXT'),'\n','<br>')
                     );
                     {? _res.STATUS
                     || KH_DOD.EFAKTURA:='U';
                        KH_DOD.put();
                        KOMM.info(
                           'Powiadomienie zostało wysłane, współpraca z kontrahentem %1 została włączona.'@
                           [KH.SKR],~_grupa
                        )
                     || KOMM.error(
                           'Powiadomienie nie zostało wysłane, współpraca z kontrahentem %1 nie została włączona.'@
                           [KH.SKR],~_grupa
                        )
                     ?};
                     obj_del(_res)
                  ?};
                  _tab1.next()
               !}
            ?};
            {? KH.sel_size()>0 || KH.sel_adel() ?}
         ?}
      || _ask:=
            {? _grupa
            || 'Czy włączyć komunikację przez Businesslink dla zaznaczonych kontrahentów?'@
            || 'Czy włączyć komunikację przez Businesslink dla kontrahenta %1?'@[KH.SKR]
            ?};
         {? FUN.ask(_ask)
         || {? _tab1.first()
            || {!
               |? {? KH.seek(_tab1.REF)
                  || exec('kh_dod_ini','kontrahent',KH.ref(),1);
                     KH_DOD.EFAKTURA:='U';
                     KH_DOD.put();
                     KOMM.info('Współpraca z kontrahentem %1 została włączona.'@[KH.SKR],~_grupa)
                  ?};
                  _tab1.next()
               !}
            ?};
            {? KH.sel_size()>0 || KH.sel_adel() ?}
         ?}
      ?}
   ?};
   KOMM.select()
?};

KH.cntx_pop(); KH_DOD.cntx_pop();
0


\invite_simply_hint
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Notka wyświetlana przy uproszczonym zaproszeniu do usługi
::   WE: _a - [0]/1 czy wariant dla akcji grupowej
::----------------------------------------------------------------------------------------------------------------------
_grupa:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _grupa
|| 'Jeżeli chcesz powiadomić swoich kontrahentów o zmianie dotyczącej dystrybucji e-dokumentów '
   'platforma Businesslink może zrobić to za Ciebie. Poniżej proponowana treść powiadomienia.'@
|| 'Jeżeli chcesz powiadomić swojego kontrahenta o zmianie dotyczącej dystrybucji e-dokumentów '
   'platforma Businesslink może zrobić to za Ciebie. Poniżej proponowana treść powiadomienia.'@
?}


\invite_simply_text
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Przykład treści powiadomienia przy uproszczonym zaproszeniu do usługi
::----------------------------------------------------------------------------------------------------------------------
'Szanowni Państwo,\n\n'
'Dla naszych klientów, do celu wymiany dokumentów, uruchomiliśmy platformę Businesslink.\n\n'
'Powiadomienia o wystawionych dokumentach, będziemy wysyłać do Państwa za pośrednictwem Businesslink, '
'na ten sam adres e-mail, na który do tej pory je wysyłaliśmy. Załączniki dokumentów będą mogli Państwo '
'pobrać bezpośrednio z powiadomienia e-mail, bez potrzeby logowania się do portalu Businesslink.\n\n'
'%1\n'
'%2'
[OPERATOR.USER().DANE,XINFO.NAZ]


\invite_simply_einfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Notka na temat adresów e-mail wyświetlana przy uproszczonym zapraszaniu do usługi
::----------------------------------------------------------------------------------------------------------------------
'Adresy e-mail pobierane są z osób kontaktowych kontrahenta, które mają zaznaczoną zgodę '
'na otrzymywanie dokumentów w usłudze Businesslink.\n'
'W przypadku braku takich adresów komunikacja z kontrahentem przez Businesslink nie zostanie włączona.'@


\my_inboxes
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Wyświetla adresy e-mail do odbioru dokumentów dla tego kontrahenta
::----------------------------------------------------------------------------------------------------------------------
KH_DOD.cntx_psh();
exec('kh_dod_ini','kontrahent',KH.ref(),1);

{? KH_DOD.BL_VIEW='T'
|| _red:=KH_DOD.mk_edit('Adresy e-mail do odbioru dokumentów dla tego kontrahenta'@,,'myinboxes');
   _width:=100;
   KH_DOD.win_esep(_red,'Adresy'@);
   KH_DOD.win_efld(_red,,'EM_INV',,,_width,,,'Faktury'@);
   KH_DOD.win_efld(_red,,'EM_ORD',,,_width,,,'Zamówienia'@);
   KH_DOD.win_efld(_red,,'EM_ADD',,,_width,,,'Inne dokumenty'@);
   KH_DOD.win_edit(_red);
   KH_DOD.display()
|| FUN.info('Kontrahent nie ma zbudowanej relacji w Businesslink — brak adresów e-mail.'@)
?};
KH_DOD.cntx_pop();
~~


\user_ksef_creator
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Kreator dostępu do KSeF dla użytkownika
::   WE: [_a] - USERS.ref() - jeżeli podany, to konfiguracja wskazanego użytkownika,
::                            jeżeli podany inny niż bieżący, to tylko wgrywanie tokena (bez opcji podpisywania)
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _user:=_a
|| _user:=OPERATOR.USER
?};

exec('czytaj','#stalesys',,XINFO,'BL_TNNT','NIP');
exec('czytaj','#stalesys',,KST,'ID_WEW','GRVAT');
{? exec('is_active','businesslink3',1)
|| _can_continue:=1;
   _my_account:=(_user=OPERATOR.USER);
:: Uwaga, przed redagowaniem nie pobieramy informacji o aktualnych tokenach z usługi, tylko z bazy ERP
   _token:=exec('token_tab','businesslink3');
   _permissions:=obj_new('download','upload'); _permissions.download:=_permissions.upload:=1;
   {? var_pres('ID_WEW',KST)>0 & KST.ID_WEW<>''
   || _token.TIN:=KST.ID_WEW
   |? var_pres('GRVAT',KST)>0 & KST.GRVAT<>null()
   || _choice:=FUN.choice(
         'Kontekst użycia tokenu:\n\n'
         '- jednostka nadrzędna:\n'
         '   token tylko z uprawnieniami do wysyłania (wystawiania) dokumentów do KSeF '
         'należy pobrać w kontekście NIP %1,\n\n'
         '- jednostka podrzędna:\n'
         '   token tylko z uprawnieniemi do odbierania (przeglądania) dokumentów z KSeF '
         'należy pobrać w kontekście NIP %2.'@
         [KST.GRVAT().SNIP,XINFO.NIP],,
         'Jednostka nadrzędna'@,'Jednostka podrzędna'@
      );
      {? _choice=1
      || _token.TIN:=KST.GRVAT().SNIP;
         _permissions.download:=0
      |? _choice=2
      || _token.TIN:=XINFO.NIP;
         _permissions.upload:=0
      || _can_continue:=0
      ?}
   || _token.TIN:=XINFO.NIP
   ?};
   {? _can_continue>0
   ||
      USERS.cntx_psh(); USERSF.cntx_psh();
      USERS.index('USR_KKOD');
      USERS.prefix();
      {? USERS.seek(_user)
      || exec('get_usersf','users');
         _token.loginName:=USERS.KOD;
         _token.invoice_Upload:=(USERSF.KSEF_UL='T');
         _token.invoice_Download:=(USERSF.KSEF_DL='T')
      ?};
      USERS.cntx_pop(); USERSF.cntx_pop();

      _tab:=tab_tmp(1
         ,'LOGIN','STRING[255]','Użytkownik z powiązanym tokenem KSeF'@
         ,'TIN','STRING[50]','NIP / Identyfikator wewnętrzny'@
         ,'DATE','STRING[30]','Data ostatniej modyfikacji tokenu KSeF'@
         ,'DOWNLOAD','INTEGER','Czy nadano uprawnienia do pobierania dokumentów z KSeF'@
         ,'UPLOAD','INTEGER','Czy nadano uprawnienia do wysyłania dokumentów do KSeF'@
         ,'ENABLED','INTEGER','Czy token KSeF jest aktywny'@
         ,'REVOKE','INTEGER','Czy token KSeF należy wycofać'@
         ,'HINT','SYS_MEMO','Podpowiedź'@
         ,'TOKEN','STRING[255]','Token'@
      );
      _tab.LOGIN:=_token.loginName;
      _tab.TIN:=_token.TIN;
      _tab.DATE:=gsub(_token.lastModifyDate,'T',' ');
      _tab.DOWNLOAD:={? _permissions.download || _token.invoice_Download || 0 ?};
      _tab.UPLOAD:={? _permissions.upload || _token.invoice_Upload || 0 ?};
      _tab.ENABLED:=_token.tokenEnabled;
      _tab.REVOKE:=0;
      _tab.memo_set(
         {? _my_account
         || exec('user_ksef_creator_hint','businesslink3')
         || exec('user_ksef_info_hint','businesslink3')
         ?},'HINT'
      );
      _tab.TOKEN:='';
      _red:=_tab.mk_edit('Konfigurowanie użytkownika KSeF'@,,'ksefcreator');
      _width:=90;
      _tab.win_esep(_red,'Użytkownik'@);
      _tab.win_efld(_red,,'LOGIN',,,_width,,1,,1);
      _tab.win_efld(_red,,'HINT',,,_width,-6,1,,1);
      _tab.win_esep(_red,'NIP / Identyfikator wewnętrzny'@);
      _tab.win_efld(_red,,'TIN',,,_width,,1,,1);
      _tab.win_esep(_red,'Token KSeF'@);
      _tab.win_efld(_red,,'DOWNLOAD',,,,,,'Pobieranie'@,,,'check-box',
         'check_label="%1"'['Tak, nadano uprawnienia do przeglądania dokumentów z KSeF'@],"1","0"
      );
      _tab.efld_opt(_red,'editable=%1'[{? _permissions.download || '1' || 'grayed' ?}],,'DOWNLOAD');
      _tab.win_efld(_red,,'UPLOAD',,,,,,'Wysyłanie'@,,,'check-box',
         'check_label="%1"'['Tak, nadano uprawnienia do wystawiania dokumentów do KSeF'@],"1","0"
      );
      _tab.efld_opt(_red,'editable=%1'[{? _permissions.upload || '1' || 'grayed' ?}],,'UPLOAD');
      _tab.win_efld(_red,,'TOKEN',,,_width);
      _tab.win_edit(_red);
      _tab.win_ebtn(_red,'text=%1,align=begin'['&Aktualizuj'@],"params_exec('user_ksef_activate','businesslink3')");
      _btnzam:=_tab.win_ebtn(_red,'text=%1,align=end'['Zamknij okno'@],'key:Esc');
      _tab.btn_eopt(_red,_btnzam,'tooltip='+'Zamknij okno konfigurowania użytkownika KSeF'@);
      params_set('tab',_tab,'token',_token,'user',_user,'my_account',_my_account);
      _tab.edit()
   ?}
?};
~~


\user_ksef_activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Aktywacja/aktualizacja,wycofanie użytkownika KSeF (tokenu)
::----------------------------------------------------------------------------------------------------------------------
_param:=params_get();
_tab:=_param.tab;
_token:=_param.token;
::_user:=_param.user;
_my_account:=_param.my_account;

_res:='';

{? _tab.DOWNLOAD | _tab.UPLOAD
||
:: Utworzenie/aktualizacja tokenu
   _tab.ENABLED:=1;
   _tab.REVOKE:=0
||
:: Usunięcie tokenu
   _tab.ENABLED:=0;
   _tab.REVOKE:=1
?};

{? _tab.REVOKE=0 & _tab.TOKEN='' & ~_my_account
|| FUN.emsg('Nie dostarczono tokena dotępowego KSeF.\nNie można zaktualizować uprawnień.'@)
|? _tab.REVOKE=1 & _tab.TOKEN<>''
|| FUN.info('Dostarczono token dostępowy KSeF.\nNależy zaznaczyć zgodne z nim uprawnienia (Pobieranie, Wysyłanie).'@)
|? params_exec('user_ksef_token_exchange','businesslink3')
|| _res:='key:Esc';
   _tab.ENABLED:=_token.tokenEnabled
?};

_res


\user_ksef_token_exchange
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Wymiana danych z Businesslink dotycząca autoryzacji tokena KSeF
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
_param:=params_get();
_tab:=_param.tab;
_token:=_param.token;
_user:=_param.user;
_my_account:=_param.my_account;

_result:=0;

exec('czytaj','#stalesys',,XINFO,'NIP');
exec('czytaj','#stalesys',,KST,'ID_WEW');

_ask:=
   {? _tab.REVOKE
   || 'Czy wycofać token dostępowy KSeF dla użytkownika %1 w kontekście %2?'@[_tab.LOGIN,_token.TIN]
   || {? ~_tab.UPLOAD & ~_tab.DOWNLOAD
      || 'Czy aktywować token dostępowy KSeF dla użytkownika %1 w kontekście %2?'@[_tab.LOGIN,_token.TIN]
      || 'Czy aktualizować token dostępowy KSeF dla użytkownika %1 w kontekście %2?'@[_tab.LOGIN,_token.TIN]
      ?}
   ?};
{? _tab.TOKEN=''
|| _ask+='\n\n'+'Uwaga: wymagane będzie podpisanie dokumentu elektronicznego.'@
?};

{? FUN.ask(_ask)
|| _can_continue:=0;
   {? _tab.TOKEN<>''
   || _response:=exec('KsefTokenModify','businesslink3'
         ,exec('FindAndGet','#table',USERS,_user,,"KOD",'')
         ,_tab.DOWNLOAD
         ,_tab.UPLOAD
         ,_tab.DOWNLOAD | _tab.UPLOAD
         ,''
         ,_tab.REVOKE
         ,_tab.TOKEN
         ,_token.TIN
      );
      _can_continue:=1
   || _init:=exec('KsefTokenModifyInit','businesslink3');
      {? _init.STATUS=1 &
         var_pres('DETAILS',_init)=exec('type_of_array','#var') &
         var_pres('REQUEST',_init.DETAILS)=exec('type_of_file','#var')
      || _tab_blob:=tab_tmp(1,'NR','INTEGER','Nr','XML','BLOBRAW','Xml');
         {? _tab_blob.add() || _tab_blob.bl_put('XML',_init.DETAILS.REQUEST,,,'init.xml') ?};
         _sign:=0;
         {? _init.DETAILS.SIGN
         || _obj:=exec('ESIGN','#object');
            _obj.start();
            _obj.s_blob_add(_tab_blob,'XML','XML');
            _res:=_obj.sign('XAdES-BES,EncodeToBase64=false',1);
            _obj.stop();
            _sign:=_res.status
         || _sign:=1
         ?};
         {? _sign
         || _tab_blob.get();
            _response:=exec('KsefTokenModify','businesslink3'
               ,exec('FindAndGet','#table',USERS,_user,,"KOD",'')
               ,_tab.DOWNLOAD
               ,_tab.UPLOAD
               ,_tab.DOWNLOAD | _tab.UPLOAD
               ,fopen(_tab_blob.XML,'br',,,1)
               ,_tab.REVOKE
               ,''
               ,_token.TIN
            );
            _can_continue:=1
         ?}
      ?}
   ?};
   {? _can_continue=1
   || {? _response.STATUS=1
      || {? _tab.REVOKE
         || _token.invoice_Download:=_tab.DOWNLOAD:=0;
            _token.invoice_Upload:=_tab.UPLOAD:=0;
            _token.tokenEnabled:=_tab.ENABLED:=0;
            _token.lastModifyDate:=_tab.DATE:=''
         || _token.invoice_Download:=_tab.DOWNLOAD:=_response.DETAILS.DOWNLOAD;
            _token.invoice_Upload:=_tab.UPLOAD:=_response.DETAILS.UPLOAD;
            _token.tokenEnabled:=_tab.ENABLED:=_response.DETAILS.ENABLED;
            _token.lastModifyDate:=_tab.DATE:=_response.DETAILS.DATE
         ?};
         USERS.cntx_psh(); USERSF.cntx_psh();
         USERS.prefix();
         {? USERS.seek(_user)
         || _result:=1;
            {? _tab.ENABLED
            || _ksef_dl:={? _tab.DOWNLOAD || 'T' || 'N' ?};
               _ksef_ul:={? _tab.UPLOAD || 'T' || 'N' ?}
            || _ksef_dl:=_ksef_ul:='N'
            ?};
            exec('put_usersf','users',,,,,,,,,,,,_ksef_dl,_ksef_ul);
            {? _tab.REVOKE
            || FUN.info('Wycofano token dostępowy użytkownika %1.'@[_tab.LOGIN])
            || _red:=_tab.mk_edit('Skonfigurowano użytkownika KSeF'@,,'ksefcreator1');
               _width:=80;
               _tab.win_esep(_red,'Użytkownik'@);
               _tab.win_efld(_red,,'LOGIN',,,_width,,1,,1);
               _tab.win_esep(_red,'Token KSeF'@);
               _tab.win_efld(_red,,'DOWNLOAD',,,,,1,'Pobieranie'@,,,'check-box',
                  'check_label="%1"'['Tak, nadano uprawnienia do pobierania dokumentów z KSeF'@],"1","0"
               );
               _tab.win_efld(_red,,'UPLOAD',,,,,1,'Wysyłanie'@,,,'check-box',
                  'check_label="%1"'['Tak, nadano uprawnienia do wysyłania dokumentów do KSeF'@],"1","0"
               );
               _tab.win_efld(_red,,'ENABLED',,,,,1,'Aktywny'@,,,'check-box',
                  'check_label="%1"'['Tak, token KSeF jest aktywny'@],"1","0"
               );
               _tab.win_efld(_red,,'DATE',,,30,,1,'Data ostatniej modyfikacji'@);
               exec('ok_esc','#window',_tab,_red,,,,1,'OK');
               _tab.win_edit(_red);
               _tab.display()
            ?}
         ?};
         USERS.cntx_pop(); USERSF.cntx_pop()
      || FUN.emsg(_response.MESSAGE)
      ?}
   || FUN.emsg(_init.MESSAGE)
   ?}
?};
_result


\token_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Zwraca element tablicy zgodny z wynikiem metody BLMT_KSEF_TOKEN_FIND
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('obj_ntab_set','#array',,
   'loginName','',
   'lastModifyDate','',
   'invoice_Download',0,
   'invoice_Upload',0,
   'tokenEnabled',0,
   'TIN',''
);
_tab


\user_ksef_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Wyświetla informacje o dostępie do komunikacji z KSeF
::       - rozbudowane o możliwość wgrania tokena
::----------------------------------------------------------------------------------------------------------------------
exec('user_ksef_creator','businesslink3',USERS.ref());
~~


\user_ksef_creator_hint
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Podpowiedź w przypadku konfigurowania dostępu własnego użytkownika
::----------------------------------------------------------------------------------------------------------------------
'Aktywacja lub dezaktywacja tokenu dostępowego może wymagać podpisania dokumentu elektronicznego.\n'
'\n'
'W przypadku wklejania tokenu uzyskanego z portalu KSeF należy odpowiednio zaznaczyć \'Pobieranie\' i \'Wysyłanie\'.\n'
'Zgodność uprawnień dostarczonego tokenu z KSeF oraz jego ważność są sprawdzane dopiero w chwili komunikacji z KSeF.'@


\user_ksef_info_hint
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Podpowiedź w przypadku konfigurowania dostępu przez administratora
::----------------------------------------------------------------------------------------------------------------------
'Administrator może wkleić token dostępowy uzyskany z portalu KSeF, '
'w takim przypadku należy odpowiednio zaznaczyć \'Pobieranie\' i \'Wysyłanie\'.\n'
'Zgodność uprawnień dostarczonego tokenu z KSeF oraz jego ważność są sprawdzane dopiero w chwili komunikacji z KSeF.\n'
'\n'
'Dostęp do wysyłania dokumentów do KSeF lub odbierania dokumentów z KSeF może też ustalić użytkownik osobiście '
'wywołując: Ustawienia i parametryzacja -> Ustawienia -> Ustawienia osobiste -> Uprawnienia do KSeF.\n'
'Aktywacja lub dezaktywacja tokenu dostępowego może wymagać podpisania dokumentu elektronicznego.'@


\user_ksef_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Odświeża informację o aktywnych dostępach do KSeF
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_active','businesslink3',1)
   & FUN.ask('Czy odświeżyć informacje o aktywnych dostępach użytkowników do KSeF?'@)
||
   _find:=exec('KsefTokenFind','businesslink3',1);

   {? type_of(_find)>100 & _find.STATUS=1
   || _users:=sql('
         select
            USERS.KOD
         from USERS join USERSF
         where (USERSF.KSEF_DL=\'T\' or USERSF.KSEF_UL=\'T\') and USERSF.FIRMA=:_a
      ',REF.FIRMA);
      {? _users.first()
      || USERS.cntx_psh(); USERSF.cntx_psh();
         USERS.index('USR_KKOD');
         {!
         |? USERS.prefix(_users.KOD,);
            {? USERS.first()
            || exec('put_usersf','users',,,,,,,,,,,,'N','N')
            ?};
            _users.next()
         !};
         USERS.cntx_pop(); USERSF.cntx_pop()
      ?};
      obj_del(_users);

      _token:=_find.DETAILS;
      _size:=obj_len(_find.DETAILS);
      {? _size>0
      || _tab:=tab_tmp(1
            ,'LOGIN','STRING[10]','Użytkownik'@
            ,'DOWNLOAD','STRING[1]','Odbieranie'@
            ,'UPLOAD','STRING[1]','Wysyłanie'@
            ,'ENABLED','STRING[1]','Token włączony'@
            ,'DATE','STRING[30]','Data modyfikacji'@
            ,'NIP','STRING[20]','NIP / Id. wewnętrzny'@
         );
         _wer:=_tab.mk_sel('Dostępy użytkowników do KSeF'@,'P',,'usersksef',,,,,'U');
         _tab.win_fld(_wer,,'LOGIN');
         _tab.win_fld(_wer,,'UPLOAD',,,,,,,,,2,,"'T'","'N'");
         _tab.win_fld(_wer,,'DOWNLOAD',,,,,,,,,2,,"'T'","'N'");
         _tab.win_fld(_wer,,'ENABLED',,,,,,,,,2,,"'T'","'N'");
         _tab.win_fld(_wer,,'DATE');
         _tab.win_fld(_wer,,'NIP');
         _formula:="_tab:=cur_tab(1,1); exec('user_ksef_token_revoke','businesslink3',_tab)";
         _tab.win_act(_wer,,'Formuła','Wycofaj token'@@,,,_formula,,,,,,'W');
         _tab.win_sel(_wer);

         {! _it:=1.. _size
         |! _login:=_token[_it].loginName;
            {? _login<>''
            || _tab.LOGIN:=_login;
               _tab.DOWNLOAD:={? _token[_it].invoice_Download || 'T' || 'N' ?};
               _tab.UPLOAD:={? _token[_it].invoice_Upload || 'T' || 'N' ?};
               _tab.ENABLED:={? _token[_it].tokenEnabled || 'T' || 'N' ?};
               _tab.DATE:=gsub(_token[_it].lastModifyDate,'T',' ');
               _tab.NIP:=_token[_it].TIN;
               _tab.add()
            ?}
         !};
         _users:=sql('select distinct :_a.LOGIN as KOD from :_a',_tab);

         {? _users.first()
         || USERS.cntx_psh(); USERSF.cntx_psh();
            USERS.index('USR_KKOD');
            {!
            |? USERS.prefix(_users.KOD,);
               {? USERS.first()
               || _tab.prefix(_users.KOD,);
                  _ksef_dl:=_ksef_ul:='N';
                  {? _tab.first()
                  || {!
                     |? {? _tab.DOWNLOAD='T' & _tab.ENABLED='T' || _ksef_dl:='T' ?};
                        {? _tab.UPLOAD='T' & _tab.ENABLED='T' || _ksef_ul:='T' ?};
                        _tab.next()
                     !}
                  ?};
                  exec('put_usersf','users',,,,,,,,,,,,_ksef_dl,_ksef_ul)
               ?};
               _users.next()
            !};
            USERS.cntx_pop(); USERSF.cntx_pop()
         ?};
         _tab.prefix();
         _tab.select()
      ?}
   ?}
?};
~~


\upo_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Pobieranie UPO w kontekście okna z dokumentami FAKS lub DOK
::----------------------------------------------------------------------------------------------------------------------
_Tab:=cur_tab(1,1);

DOKUM.cntx_psh();

_symbol:={? _Tab=FAKS || FAKS.SYM |? _Tab=DOK || DOK.NK || DOKUM.SYM ?};

{? _Tab=DOKUM | exec('bl_dokum_seek','zbl',_Tab)
|| {? DOKUM.RODZAJ_K<>'W'
   || FUN.info('E-dokument do %1 nie jest \'wychodzący\'.'@[_symbol])
   || {? DOKUM.KSEFUPO=''
      || FUN.info('Brak UPO do dokumentu %1.'@[_symbol])
      |? 4+DOKUM.KSEFUPO<>'http'
      || FUN.info('Błędny link do UPO dla dokumentu %1.'@[_symbol])
      || exec('upo_dokum_get','businesslink3',1)
      ?}
   ?}
|| FUN.info('E-dokument do %1 nie został wygenerowany.'@[_symbol])
?};

DOKUM.cntx_pop();
~~


\upo_dokum_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Pobieranie UPO w kontekście zapisu DOKUM
::   WE: _a - czy wyświetlać dokument albo ewentualne komunikaty? 0/[1]
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_url:=DOKUM.KSEFUPO;
_inet:=inet_get(_url);
{? type_of(_inet)<100
|| {? _display || FUN.emsg('Błąd wywołania funkcji %1.'@['inet_get()']) ?}
||
:: Załącznik jest dodawany tylko wtedy, gdy go jeszcze nie ma.
:: Dla UPO wpisywany ten sam GUID co dla dokumentu głównego.
   _attach_id:=DOKUM.BL_GUID;
   DOKUMZ.cntx_psh();
   DOKUMZ.index('GUID');
   DOKUMZ.prefix(DOKUM.ref(),_attach_id,);
   {? ~DOKUMZ.first()
   || DOKUMZ.blank();
      DOKUMZ.DOK:=DOKUM.ref();
      {? exec('upgrade2325_blbc1','zbl')
      || DOKUMZ.REFSQL:=DOKUM.REFSQL
      ?};
      DOKUMZ.BL_GUID:=_attach_id;
      DOKUMZ.BL_TYPE:='UPO';
      DOKUMZ.DATE:=date();
      DOKUMZ.TIME:=time();
      _answer:=fopen(null(),'bw',,,1);
      _utc_start:=utc_get();
      _response:=_inet.http_get(_answer);
      {? _response<>0
      || _status:=_inet.get_status();
         _utc_stop:=utc_get();
         _mwac_log_ref:=exec('mwac_log','#mwac',
            'UPO',
            _inet.get_url(),
            'GET',
            _status,
            _utc_start,
            _utc_stop,
            '',
            _answer,
            _inet.get_header(1),
            _inet.get_header(0)
         );
         {? _status=200
         || _jman:=exec('json_man','__jsonm',_answer.copy('ur'));
            _attach_body:=fopen(null(),'bw',,,1);
            _processing_code:={? _jman.isPath('processingCode') || _jman.getValue('processingCode') || 0 ?};
            _reference_number:={? _jman.isPath('referenceNumber') || _jman.getValue('referenceNumber') || '' ?};
            _processing_description:=
               {? _jman.isPath('processingDescription')
               || _jman.getValue('processingDescription')
               || 'Błędny format odpowiedzi.'
               ?};
            {? type_of(_processing_code)=type_of(~~)
            || exec('mwac_log_app','#mwac',
                  _mwac_log_ref,
                  '|KSEF|UPO|F:%1|R:0|'[__Firma],
                  ''
               )
            || exec('mwac_log_app','#mwac',
                  _mwac_log_ref,
                  '|KSEF|UPO|F:%1|R:%2|%3'[__Firma,$_processing_code,_reference_number],
                  _processing_description
               )
            ?};
            {? _processing_code<>200 | _jman.typeOf('upo')=_jman.Const.TYPE.NULL
            || DOKUM.KSEFUPOT:=utc_get()+(15*60);
               DOKUM.put();
               {? _display
               || FUN.info(
                     'UPO jest jeszcze niedostępne. Należy spróbować pobrać później.\n\n[%1: %2]'@
                     [$_processing_code,_processing_description]
                  )
               ?}
            || _jman.getValue('upo',_attach_body,'decode');
               _file_name:='KSeF_UPO_%1.xml'[_reference_number];
               DOKUMZ.NAZWA:=_file_name;
               {? DOKUMZ.add()
               || DOKUMZ.bl_put('DOKUM',_attach_body,,,_file_name);
                  DOKUM.KSEFUPOG:='T';
                  DOKUM.put()
               ?}
            ?};
            obj_del(_attach_body)
         || exec('mwac_log_app','#mwac',
               _mwac_log_ref,
               '|KSEF|UPO|F:%1|R:%2|'[__Firma,$_status],
               ''
            );
            DOKUM.KSEFUPOT:=utc_get()+(15*60);
            DOKUM.put();
            {? _display
            || FUN.info('Błąd pobierania UPO (%1).'@[$_status])
            ?}
         ?}
      ?}
   ?};
   {? _display
   || {? DOKUMZ.first()
      || exec('bl_view','#blob',DOKUMZ,'DOKUM')
      ?}
   ?};
   DOKUMZ.cntx_pop()
?};
~~


\upo_service_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Pobieranie brakujących upo wywołane w zadaniu serwisowym (alercie)
::----------------------------------------------------------------------------------------------------------------------
::_tab:=sql('
::   select DOKUM.REFERENCE as REF
::   from DOKUM left join DOKUMZ using(DOKUMZ.BL_GUID,DOKUM.BL_GUID)
::   where DOKUM.NRKSEF<>\'\' and DOKUM.BL_GUID<>\'\' and DOKUM.RODZAJ_K=\'W\' and DOKUMZ.REFERENCE is null
::');

_tab:=tab_tmp(1,'REF','STRING[16]','$DOKUM.ref()');

DOKUM.cntx_psh();

_ndx:=DOKUM.ndx_tmp(,,'FIRMA',,,'KSEFUPOG',,);
DOKUM.index(_ndx);
DOKUM.prefix(REF.FIRMA,'P');
{? DOKUM.first()
|| {!
   |? _tab.REF:=$DOKUM.ref();
      _tab.add();
      DOKUM.next()
   !}
?};
DOKUM.ndx_drop(_ndx);

DOKUM.prefix();
{? _tab.first()
|| {!
   |? {? DOKUM.seek(_tab.REF)
      || {? DOKUM.KSEFUPO<>'' & 4+DOKUM.KSEFUPO='http' & DOKUM.KSEFUPOT<utc_get()
         || exec('upo_dokum_get','businesslink3',0)
         ?}
      ?};
      _tab.next()
   !}
?};

DOKUM.cntx_pop();
~~


\upo_service_get1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Pobieranie brakujących upo wywołane w zadaniu serwisowym (alercie) - wersja zoptymalizowana
::   WE: _a - czy wyświetlać dokument albo ewentualne komunikaty? 0/[1]
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(0) || _a || 0 ?};

:: Pobieranie zbioru UPO sesyjnych z bieżącej firmy do tabeli tymczasowej
_tab:=sql('
   select distinct
      DOKUM.KSEFUPO
   from DOKUM left join DOKUMZ using(DOKUMZ.BL_GUID,DOKUM.BL_GUID)
   where DOKUM.FIRMA=:_b
      and DOKUM.NRKSEF<>\'\'
      and DOKUM.BL_GUID<>\'\'
      and DOKUM.RODZAJ_K=\'W\'
      and DOKUMZ.REFERENCE is null
      and DOKUM.KSEFUPO<>\'\'
      and substr(DOKUM.KSEFUPO,1,4)=\'http\'
      and DOKUM.KSEFUPOT<:_a
      and DOKUM.KSEFUPOG<>\'T\'
   order by KSEFUPO
',utc_get(),REF.FIRMA);

:: exec('select','#table',_tab);

{? _tab.first()
||
:: Pobranie zbioru dokumentów wymagających ściągnięcia UPO
   _tab0:=sql('
      select
         DOKUM.KSEFUPO,
         DOKUM.REFERENCE as REF,
         DOKUM.REFSQL,
         \'N\' as OK
      from DOKUM
      where DOKUM.KSEFUPO in (select :_a.KSEFUPO from :_a)
         and DOKUM.KSEFUPOG<>\'T\'
      order by KSEFUPO
   ',_tab);

::   exec('select','#table',_tab0);

   {!
   |? _url:=_tab.KSEFUPO;
      _inet:=inet_get(_url);
      {? type_of(_inet)<100
      || {? _display || FUN.emsg('Błąd wywołania funkcji %1.'@['inet_get()']) ?}
      ||
         _answer:=fopen(null(),'bw',,,1);
         _utc_start:=utc_get();
         _response:=_inet.http_get(_answer);
         {? _response<>0
         || _status:=_inet.get_status();
            _utc_stop:=utc_get();
            _mwac_log_ref:=exec('mwac_log','#mwac',
               'UPO',
               _inet.get_url(),
               'GET',
               _status,
               _utc_start,
               _utc_stop,
               '',
               _answer,
               _inet.get_header(1),
               _inet.get_header(0)
            );
            {? _status=200
            || _jman:=exec('json_man','__jsonm',_answer.copy('ur'));
               _processing_code:=_jman.getValue('processingCode');
               _reference_number:=_jman.getValue('referenceNumber');
               _processing_description:=_jman.getValue('processingDescription');
               {? type_of(_processing_code)=type_of(~~)
               || exec('mwac_log_app','#mwac',
                     _mwac_log_ref,
                     '|KSEF|UPO|F:%1|R:0|'[__Firma],
                     ''
                  )
               || exec('mwac_log_app','#mwac',
                     _mwac_log_ref,
                     '|KSEF|UPO|F:%1|R:%2|%3'[__Firma,$_processing_code,_reference_number],
                     _processing_description
                  )
               ?};
::             Kody procesowania kończące przetwarzanie:
::             - do 2023/07/31 - 200
::             - od 2023/08/01 - 205
               {? (_processing_code<>200 & _processing_code<>205) | _jman.typeOf('upo')=_jman.Const.TYPE.NULL
               ||
                  {? _display
                  || FUN.info(
                        'UPO jest jeszcze niedostępne. Należy spróbować pobrać później.\n\n[%1: %2]'@
                        [$_processing_code,_processing_description]
                     )
                  ?}
               || _attach_body:=fopen(null(),'bw',,,1);
                  _jman.getValue('upo',_attach_body,'decode');
                  _file_name:='KSeF_UPO_%1.xml'[_reference_number];
::                Przypisywanie UPO do poszczególnych dokumentów
                  _tab0.prefix(_tab.KSEFUPO,);
                  {? _tab0.first()
                  || {!
                     |? DOKUM.cntx_psh();
                        {? DOKUM.seek(_tab0.REF)
                        || _lock:=0;
                           _lock1:=0;
                           {? (_lock:=exec('r_lock_one','#table',DOKUM,DOKUM.ref()); _lock)
                              &
                              (_lock1:=exec('r_lock_one','#table',ref_tab(DOKUM.REFSQL),DOKUM.REFSQL); _lock1)
                           || _attach_id:=DOKUM.BL_GUID;
                              DOKUMZ.cntx_psh();
                              DOKUMZ.index('GUID');
                              DOKUMZ.prefix(DOKUM.ref(),_attach_id,);
                              {? ~DOKUMZ.first()
                              || DOKUMZ.blank();
                                 DOKUMZ.DOK:=DOKUM.ref();
                                 {? exec('upgrade2325_blbc1','zbl')
                                 || DOKUMZ.REFSQL:=DOKUM.REFSQL
                                 ?};
                                 DOKUMZ.BL_GUID:=_attach_id;
                                 DOKUMZ.BL_TYPE:='UPO';
                                 DOKUMZ.DATE:=date();
                                 DOKUMZ.TIME:=time();
                                 DOKUMZ.NAZWA:=_file_name;
                                 {? DOKUMZ.add()
                                 || DOKUMZ.bl_put('DOKUM',_attach_body,,,_file_name);
                                    DOKUM.KSEFUPOG:='T';
                                    DOKUM.put();
                                    _tab0.OK:='T';
                                    _tab0.put()
                                 ?}
                              ?};
                              DOKUMZ.cntx_pop()
                           ?};
                           exec('r_unlock_one','#table',DOKUM,DOKUM.ref(),_lock);
                           exec('r_unlock_one','#table',ref_tab(DOKUM.REFSQL),DOKUM.REFSQL,_lock1)
                        ?};
                        DOKUM.cntx_pop();
                        _tab0.next()
                     !}
                  ?};
                  obj_del(_attach_body);
                  ~~
               ?};
               obj_del(_jman)
            || exec('mwac_log_app','#mwac',
                  _mwac_log_ref,
                  '|KSEF|UPO|F:%1|R:%2|'[__Firma,$_status],
                  ''
               );
               {? _display
               || FUN.info('Błąd pobierania UPO (%1).'@[$_status])
               ?}
            ?}
         ?};
         obj_del(_answer);
         obj_del(_inet)
      ?};
::    Dokumentom, dla których nie pobrano UPO ustawiamy nowy znacznik czasowy (+15 minut)
      {? _tab0.first()
      || {!
         |? {? _tab0.OK='N'
            || _lock:=0;
               _lockt:=0;
               {? (_lock:=exec('r_lock_one','#table',DOKUM,_tab0.REF); _lock)
                  &
                  (_lock1:=exec('r_lock_one','#table',ref_tab(_tab0.REFSQL),_tab0.REFSQL); _lock1)
               || exec('FindAndGet','#table',DOKUM,_tab0.REF,,"KSEFUPOT:=utc_get()+(15*60); put()")
               ?};
               exec('r_unlock_one','#table',DOKUM,_tab0.REF,_lock);
               exec('r_unlock_one','#table',ref_tab(_tab0.REFSQL),_tab0.REFSQL,_lock1)
            ?};
            _tab0.next()
         !}
      ?};
      _tab.next()
   !}
?};
~~


\kh_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Zwraca NIP kontrahenta (krajowy lub domyślny UE)
::   WE: _a - KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
_result:=obj_new('NIP','UE');

_ue:=exec('FindAndGet','#table',KH,_kh,,"TYP='U'",0);

{? _ue
|| NIPY.cntx_psh();
   NIPY.index('DEFAULT');
   NIPY.prefix(_kh,'T');
   {? NIPY.first()
   || _result.UE:=1;
      _result.NIP:='%1%2'[NIPY.KRAJ().KOD,exec('niptostr','#string',NIPY.NIP)]
   || _result.UE:=0;
      _result.NIP:=''
   ?};
   NIPY.cntx_pop()
|| _result.UE:=0;
   _result.NIP:=exec('FindAndGet','#table',KH,_kh,,"SNIP",'')
?};

_result


\xinvite_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Usuwa relację z kontrahentem (tylko po stronie ERP)
::       Kontekst wywołania: rekordy KH i KH_DOD
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask(
      'Czy usunąć relację z kontrahentem?'@+
      '\n\n'+
      'Instancja danych dzierżawcy nie zostanie usunięta z chmury.\n'
      'Po zmianie numeru NIP kontrahenta ponowne nawiązanie relacji\n'
      'może dotyczyć innej instancji danych w chmurze.'@
   )
|| KH_DOD.cntx_psh(); KH.cntx_psh();
   KH_DOD.EFAKTURA:='N';
   KH_DOD.BL_STAT:='';
   {? KH_DOD.put()
   ||
::    W przypadku odczepiania ostatniej relacji usuwany zostaje identyfikator
      _last:=1;
      KH_DOD.index('KH');
      KH_DOD.prefix(KH.ref());
      {? KH_DOD.first()
      || {!
         |? {? KH_DOD.EFAKTURA='B' || _last:=0 ?};
            KH_DOD.next()
         !}
      ?};
      {? _last || exec('del_rek','#sync_id','BL_KH_ID',KH.uidref()) ?}
   ?};
   KH_DOD.cntx_pop(); KH.cntx_pop()
?};
~~


\send_if_errors
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Warunek, czy wysyłać dokument mimo wcześniej zgłoszonych błędów transmisji
::   WE: _a - licznik błędów transmisji
::       _b - znacznik czasowy ostatniej błędnej transmisji
::----------------------------------------------------------------------------------------------------------------------
:: Minęło 2^(_a) minut od ostatniego uruchomienia
_b+pow(2,_a)*60<utc_get()


\documents_getinfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Pobiera informacje o wysłanych dokumentach - zadanie do realizacji w kolejce technicznej (poza procesowością)
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzenie, czy dostępna i aktywna jest metoda BLMT_DOCUMENT_GETINFO
SYNC_MWA.cntx_psh();
SYNC_MWA.index('PD_METH');
SYNC_MWA.prefix('BLMT','BLMT_DOCUMENT_GETINFO','T');
_is_method:=SYNC_MWA.first();
SYNC_MWA.cntx_pop();

{? _is_method
||
:: Ustalenie dziedziny dokumentów:
   _tab:=sql('
      select
         DOKUM.REFERENCE as REF,
         DOKUM.REFSQL,
         DOKUM.BATCH
      from DOKUM
      where '
::       >> wysłane do BL (utrwalony identyfikator)
         'DOKUM.BL_GUID<>\'\' '
::       >> wychodzące lub tylko do sprawdzenia
         'and not (not DOKUM.RODZAJ_K=\'W\' and not DOKUM.RODZAJ_K=\'_\') '
::       >> nie zakończone pobieranie informacji
::       >> (szczegółowe warunki opisane w exec('DocumentGetinfo_parse','businesslink3') )
         'and DOKUM.INFO_END<>\'T\' '
::       >> nie oczekujące na podpis (przy przetwarzaniu wsadowym)
         'and DOKUM.KSEF2SGN<>\'T\' '
::       >> z bieżącej firmy
         'and DOKUM.FIRMA=:_a '
::       >> z uwzględnieniem opóźnienia przy odbieraniu
::       >> (znacznik czasowy określany w exec('DocumentGetinfo_parse','businesslink3') )
         'and DOKUM.BL_GETTM<:_b
   ',REF.FIRMA,utc_get());
   _can_continue:=1; _result:=1;
   {? _tab.first()
   || {!
      |? _lock:=0;
         _lockt:=0;
         {? (_lock:=exec('r_lock_one','#table',DOKUM,_tab.REF); _lock)
            &
            (_lock1:=exec('r_lock_one','#table',ref_tab(_tab.REFSQL),_tab.REFSQL); _lock1)
         ||
            {? _tab.BATCH='T'
            || _res:=exec('DocumentGetinfoBatch','businesslink3',exec('FindAndGet','#table',DOKUM,_tab.REF))
            || _res:=exec('DocumentGetinfo','businesslink3',exec('FindAndGet','#table',DOKUM,_tab.REF))
            ?};
::          Kończymy przetwarzać tę sesję w przypadku błędu dostępności serwisu KSeF
            {? _res.STATUS<0
            || _can_continue:=0; _result:=0
            ?};
            obj_del(_res)
         ?};
         exec('r_unlock_one','#table',DOKUM,_tab.REF,_lock);
         exec('r_unlock_one','#table',ref_tab(_tab.REFSQL),_tab.REFSQL,_lock1);
         {? _can_continue>0 || _tab.next() || 0 ?}
      !}
   ?};
:: Opóźnić kolejne sprawdzenie o 60 sekund, jeśli usługa KSeF nie jest dostępna
   {? _result=0
   || {? _tab.first()
      || {!
         |? _lock:=0;
            _lockt:=0;
            {? (_lock:=exec('r_lock_one','#table',DOKUM,_tab.REF); _lock)
               &
               (_lock1:=exec('r_lock_one','#table',ref_tab(_tab.REFSQL),_tab.REFSQL); _lock1)
            || exec('FindAndGet','#table',DOKUM,_tab.REF,,"@DOKUM.BL_GETTM:=utc_get()+60; @DOKUM.put()")
            ?};
            exec('r_unlock_one','#table',DOKUM,_tab.REF,_lock);
            exec('r_unlock_one','#table',ref_tab(_tab.REFSQL),_tab.REFSQL,_lock1);
            _tab.next()
         !}
      ?}
   ?}
?};
~~


\dokum_fun_tech
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Funkcje techniczne dotyczące dokumentu Businesslink uruchamiane z poziomu DOKUM
::----------------------------------------------------------------------------------------------------------------------
exec('dokum_fun_tech_core','businesslink3');
~~


\dokum_fun_tech_upo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Funkcja blokująca kolejne próby pobierania UPO do dokumentu
::   WE: _a - 0/1 - czy akcja dla grupy rekordów
::       _b - sel_aget()/~~
::----------------------------------------------------------------------------------------------------------------------
_grupa:=_a;
_tab:=_b;

_hint:='\n\n'+'Zaleca się wykonywanie funkcji przy wyłączonych kolejkach.'@;

{? _grupa
|| {? FUN.ask(
         'Czy zablokować kolejne próby automatycznego pobierania UPO dla zaznaczonych dokumentów?'@+
         _hint
      )
   || KOMM.init(,,'UPO'@);
      DOKUM.cntx_psh();
      DOKUM.prefix();
      {? _tab.first()
      || {!
         |? {? DOKUM.seek(_tab.REF)
            || {? DOKUM.BL_GUID=''
               || KOMM.error('Dokument %1 nie został wysłany do Businesslink.'@[DOKUM.SYM],0)
               |? DOKUM.KSEFUPOG='P'
               || DOKUM.KSEFUPOG:='T';
                  DOKUM.put();
                  KOMM.info('Zmieniono stan dokumentu %1.'@[DOKUM.SYM],0)
               |? DOKUM.KSEFUPOG='N'
               || KOMM.error('Do dokumentu %1 nie jest generowane UPO.'@[DOKUM.SYM],0)
               || KOMM.error('Nie można zmienić stanu dokumentu %1.'@[DOKUM.SYM],0)
               ?}
            ?};
            _tab.next()
         !}
      ?};
      DOKUM.cntx_pop();
      KOMM.select()
   ?}
|| {? DOKUM.BL_GUID=''
   || FUN.info('Dokument nie został wysłany do Businesslink.'@,_grupa)
   |? DOKUM.KSEFUPOG='P'
   || _ask:=FUN.ask(
         'UPO nie zostało jeszcze pobrane z serwisu KSeF.\n\n'
         'Czy zablokować kolejne próby automatycznego pobierania UPO dla tego dokumentu?'@+
         _hint
      );
      {? _ask
      || {? DOKUM.get()
         || DOKUM.KSEFUPOG:='T';
            DOKUM.put()
         ?}
      ?}
   |? DOKUM.KSEFUPOG='N'
   || FUN.info('Do tego dokumentu nie jest generowane UPO.'@)
   || FUN.info('Nie można zmienić stanu tego dokumentu.'@)
   ?}
?};
~~


\dokum_fun_tech_getinfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Funkcja blokująca pobieranie informacji do dokumentu
::   WE: _a - 0/1 - czy akcja dla grupy rekordów
::       _b - sel_aget()/~~
::----------------------------------------------------------------------------------------------------------------------
_grupa:=_a;
_tab:=_b;

_hint:='\n\n'+'Zaleca się wykonywanie funkcji przy wyłączonych kolejkach.'@;

{? _grupa
|| {? FUN.ask(
         'Czy zablokować kolejne próby automatycznego pobierania informacji dla zaznaczonych dokumentów?'@+
         _hint
      )
   || KOMM.init(,,'BLMT_DOCUMENT_GET'@);
      DOKUM.cntx_psh();
      DOKUM.prefix();
      {? _tab.first()
      || {!
         |? {? DOKUM.seek(_tab.REF)
            || {? DOKUM.BL_GUID=''
               || KOMM.error('Dokument %1 nie został wysłany do Businesslink.'@[DOKUM.SYM],0)
               |? DOKUM.INFO_END<>'T'
               || DOKUM.INFO_END:='T';
                  DOKUM.put();
                  KOMM.info('Zmieniono stan dokumentu %1.'@[DOKUM.SYM],0)
               || KOMM.error('Nie można zmienić stanu dokumentu %1.'@[DOKUM.SYM],0)
               ?}
            ?};
            _tab.next()
         !}
      ?};
      DOKUM.cntx_pop();
      KOMM.select()
   ?}
|| {? DOKUM.BL_GUID=''
   || FUN.info('Dokument nie został wysłany do Businesslink.'@,_grupa)
   |? DOKUM.INFO_END<>'T'
   || _ask:=FUN.ask(
         'Czy zablokować kolejne próby automatycznego pobierania informacji dla tego dokumentu?'@+
         _hint
      );
      {? _ask
      || {? DOKUM.get()
         || DOKUM.INFO_END:='T';
            DOKUM.put()
         ?}
      ?}
   || FUN.info('Nie można zmienić stanu tego dokumentu.'@)
   ?}
?};
~~


\dokum_fun_tech_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Funkcje techniczne dotyczące dokumentu Businesslink uruchamiane z poziomu DOKUM - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
exec('dokum_fun_tech_core','businesslink3');
_res


\dokum_fun_tech_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26_KSEF1]
:: OPIS: Funkcje techniczne dotyczące dokumentu Businesslink uruchamiane z poziomu DOKUM - funkcja główna
::----------------------------------------------------------------------------------------------------------------------
::on_error(0);

_szer:=60;

{? DOKUM.sel_size()>0
|| _grupa:=1;
   _sel_aget:=DOKUM.sel_aget()
|| _grupa:=0;
   _sel_aget:=~~
?};

_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.'@,
   'NAME','STRING[%1]'[$_szer],'Nazwa'@,
   'HELP','SYS_MEMO','Informacja'@,
   'FORMULA','STRING[255]','Formuła do wykonania'@
);
_add:="
   _a.blank();
   _a.LP:=_a.size()+1;
   {? var_pres('_d')=3
   || _a.FORMULA:=$_d
   ?};
   _a.NAME:=_b;
   _help:={? var_pres('_c')=type_of('') || _c  || '' ?};
   _a.memo_set(_help,'HELP');
   {? _a.add() || _a.memo_put(,'HELP') ?}
";

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
_add(_TAB,
   'Zablokowanie kolejnych prób automatycznego pobierania UPO'@,
   'Funkcja blokuje kolejne próby automatycznego pobierania UPO dla wskazanego dokumentu.\n'
   'Po jej użyciu możliwe będzie tylko:\n'
   '- ręczne pobranie UPO dla wskazanego dokumentu\n'
   '- automatyczne pobranie UPO, o ile zostanie pobrane do innego dokumentu z tej samej sesji KSeF.'@,
   {? _grupa | 1
   || "exec('dokum_fun_tech_upo','businesslink3',params_get().grupa,params_get().sel_aget)"
   || ""
   ?}
);
_add(_TAB,
   'Zablokowanie pobierania informacji o dokumencie'@,
   'Funkcja blokuje kolejne próby automatycznego pobierania informacji o wskazanym dokumencie.\n'
   'Po jej użyciu nie będzie dla danego dokumentu wywoływana metoda BLMT_DOCUMENT_GETINFO.\n'
   'Możliwe będzie tylko uzyskanie informacji na podstawie wywołania metody BLMT_DOCUMENT_REPORT.'@,
   {? _grupa | 1
   || "exec('dokum_fun_tech_getinfo','businesslink3',params_get().grupa,params_get().sel_aget)"
   || ""
   ?}
);

:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

_dh:=_TAB.size()+1;
{? _dh<5
|| _dh:=5
|? _dh>30
|| _dh:=30
?};
_ws:=_TAB.mk_sel('Businesslink — funkcje techniczne'@,'N',,,,,_dh,,'U');
_TAB.win_fld(_ws,,'NAME',,,,,,,1);
_fb:="
   params_set(params_get());
   ($params_get().TAB.FORMULA)()
";
_TAB.win_act(_ws,,'Formuła','Uruchom'@,,,_fb,,1,,,,'U');
_fb:="
   _TAB:=params_get().TAB;
   _TAB.memo_get(,'HELP');
   _TAB.memo_view(,'HELP')
";
_TAB.win_act(_ws,,'Formuła','Informacja'@,,,_fb,,,,,,'I');
_TAB.win_act(_ws,,'Rekord',,,,"
   _par:=params_get();
   _TAB:=_par.TAB;
   {? _TAB.FORMULA=''
   || _ag:='U';
      _color:=exec('findfnv','#color')
   || _ag:='';
      _color:=0
   ?};
   {? _a
   || _TAB.actions_grayed(_par.ws,_ag)
   ?};
   _color
");
_TAB.win_sel(_ws);
params_set(
   'TAB',_TAB,
   'ws',_ws,
   'szer',_szer,
   'grupa',_grupa,
   'sel_aget',_sel_aget
);
_TAB.select();

{? _grupa
|| DOKUM.sel_adel()
?};
~~


\kh_nip_registered
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Sprawdzenie, czy inny kontrahent o tym samym NIP jest już zarejestrowany w usłudze
::   WE: _a - KH.ref()
::       _b - dialog - forma komunikatów: [1]-dialogi, 0-do KOMMa
::   WY: 1-inny kontrahent o tym samym NIP jest już zarejstrowany w usłudze / 0
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
_dialog:={? var_pres('_b')=type_of(0) || _b || 1 ?};

_result:=0;

_tab:=tab_tmp(1,'ID_WEW','STRING[50]','Identyfikator wewnętrzny'@,'UIDREF','STRING[50]','KH.uidref()');

_nip:=exec('FindAndGet','#table',KH,_kh,,"SNIP",'');
_id_wew:={? var_pres('ID_WEW',KH)>0 || exec('FindAndGet','#table',KH,_kh,,"ID_WEW",'') || '' ?};

KH.cntx_psh();
KH.index('SNIP');
KH.prefix(2,_nip,);
{? KH.first()
|| {!
   |? {? KH.ref()<>_kh
      || _tab.ID_WEW:=KH.ID_WEW;
         _tab.UIDREF:=KH.uidref();
         _tab.add()
      ?};
      KH.next()
   !}
?};
KH.cntx_pop();

_tenantidentifier_d:='';
_tab.prefix(_id_wew,);
{? _tab.first()
|| {!
   |? _tab_id:=exec('get_id','#sync_id','BL_KH_ID',_tab.UIDREF);
      {? _tab_id.first()
      || _tenantidentifier_d:=_tab_id.ID
      ?};
      obj_del(_tab_id);
      _tenantidentifier_d='' & _tab.next()
   !}
?};
_result:=(_tenantidentifier_d<>'');

{? _result
|| KOMM.info('Inny kontrahent o tym samym NIP oraz ID_WEW jest już zarejestrowany w usłudze.'@,_dialog)
?};

_result


\send_batch_condition
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Warunek wysyłki wsadowej dokumentu
::   WE: _a - DOKUM.ref()
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_size:=exec('FindAndGet','#table',DOKUMZ,exec('dokumz','edi_fo_ufd',_a,'ksef'),,"DOKUMZ.bl_info('DOKUM','SIZE')",0);
_res:=_size>1024*1024;
::{? fexists('../../__action/batch_ask.txt',0)
::|| _res:=FUN.ask(
::      'Rozmiar pliku KSeF: %1 B\n'
::      'Czy wysłać dokument metodą wsadową?\n\n'
::      'Uwaga: po wysłaniu metodą wsadową dokument będzie wymagał podpisu.'@[$_size]
::   )
::|| _res:=_size>1024*1024
::?};
_res


\send_batch_sign
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Podpisywanie dokumentu przetwarzanego wsadowo
::       Kontekst wywołania: rekord tabeli DOKUM
::----------------------------------------------------------------------------------------------------------------------
_tab_blob:=tab_tmp(1,'NR','INTEGER','Nr','XML','BLOBRAW','Xml');
_tab_blob.XML:=DOKUM.KSEFXSGN;
_tab_blob.add();
_sign:=0;
_obj:=exec('ESIGN','#object');
_obj.start();
_obj.s_blob_add(_tab_blob,'XML','XML');
_res:=_obj.sign('XAdES-BES,EncodeToBase64=false',1);
_obj.stop();
_sign:=_res.status;
{? _sign
|| _tab_blob.get();
   _response:=exec('SignatureSendBatch','businesslink3',DOKUM.ref(),fopen(_tab_blob.XML,'br',,,1))
?};
~~


\param_oper_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Redagowanie parametrów związanych z działaniem usługi - wersja z listą parametrów
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
{? XINFO.BL_TNNT=''
|| FUN.emsg(
      'Nie można redagować parametrów działania.\n'
      'Dostęp do portalu %1 nie został skonfigurowany.'@['Businesslink']
   );
   return()
?};

:: Dodatkowa tabela z polami SYS_MEMO do ładnej prezentacji opisu parametru
_tab:=tab_tmp(1
   ,'LP','INTEGER','Lp'@
   ,'WARTOSC','STRING[255]','Wartość'@
   ,'OPIS','SYS_MEMO','Opis'@
   ,'HINT','SYS_MEMO','Podpowiedź'@
   ,'EDIT','INTEGER','Parametr redagowalny'@
   ,'TM1','STRING[50]','Znacznik czasowy'@
   ,'TM2','STRING[50]','Znacznik czasowy'@
);
_tab.LP:=1;
_tab.TM1:=time_ident(date(),time());
_tab.add();
params_set('tab',_tab);

:: Standardowo nie ma pytania o możliwość pobrania danych z portalu
_ask:=0;
{? ~_ask | FUN.ask('Czy pobrać aktualną wartość parametrów z portalu %1?'@['Businesslink'])
|| delay(1);
   _result:=exec('TenantParamsGet','businesslink3',1);
   {? _result.STATUS=0
   || return()
   ?};
   delay(1)
?};

_tab.TM2:=time_ident(date(),time());
_tab.put();

_wer:=BL_PAR.mk_sel('Parametry Businesslink'@,'P',,'blparselect',,,,1);
BL_PAR.win_fld(_wer,,'OPIS',,,70);
BL_PAR.win_fld(_wer,_tab,'WARTOSC',,,30);
BL_PAR.win_act(_wer,,'Formuła','Popraw'@@,,,"params_exec('param_oper_modify','businesslink3')",,1,,,,'P');
_formula:="exec('zwrw_all','#tree',BL_PAR,'GROUP',cur_win(1,1),REF.FIRMA,'T')";
BL_PAR.win_act(_wer,,'Formuła','Zwiń/rozwiń'@@,,,_formula,,,,,,'Z');
BL_PAR.win_act(_wer,,'Formuła','Wyślij'@@,,
   'Wysyła na portal zmienione wartości parametrów'@,
   "params_exec('param_oper_send','businesslink3')",,,,,,'W'
);
BL_PAR.win_act(_wer,,'Kolejność');
BL_PAR.win_act(_wer,,'Formuła','Legenda'@@,,,
   "exec('legenda','color',
      '$%1$%2'['TAB_TYMCZ#01#01','Parametry odświeżone'@],
      '$%1$%2'['TAB_TYMCZ#01#02','Parametry zmodyfikowane'@])",,,,,,'L'
);
BL_PAR.win_act(_wer,,'Wyświetl',,,,"params_exec('param_oper_display','businesslink3')");
BL_PAR.win_act(_wer,,'Rekord',,,,"params_exec('param_oper_record','businesslink3',_a)");

_formula:="
   {? params_exec('param_oper_modified','businesslink3')
   || FUN.ask(
         'Wartości parametrów były modyfikowane.\n'
         'Czy wyjść z okna bez wysyłania ich na portal?'@
      )
   || 1
   ?}
";
_grp:=BL_PAR.grp_make('Parametry Businesslink'@,,'bppargrpsel',,,_formula,,'normal');
BL_PAR.grp_sel(_grp,,_wer,,,,,,,,,,'maximized');
BL_PAR.win_sel(_grp);

BL_PAR.cntx_psh();
BL_PAR.index('GROUP');
BL_PAR.prefix(REF.FIRMA,'T');
BL_PAR.select();
BL_PAR.cntx_pop();
~~


\param_oper_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Redagowanie parametru związanego z działaniem usługi
::       Kontekst wywołania: rekord tabeli BL_PAR
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tab:=params_get().tab;

{? _tab.EDIT
|| _red:=exec('param_oper_win_edit','businesslink3');
   BL_PAR.win_edit(_red);
   {? BL_PAR.edit()
   || BL_PAR.put()
   ?}
|| FUN.info('Parametr nie podlega edycji.'@)
?};
~~


\param_oper_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyświetlenie parametru związanego z działaniem usługi
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tab:=params_get().tab;

{? _tab.EDIT
|| _red:=exec('param_oper_win_edit','businesslink3');
   BL_PAR.win_edit(_red);
   BL_PAR.display()
?};
~~


\param_oper_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Tworzy okienko redakcji pól typu tekstowego (w kontelście rekordu BL_PAR)
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().tab;

_width:=100;
_red:=BL_PAR.mk_edit('Parametr'@,,'blparedit');
_height:=obj_len(spli_str(BL_PAR.OPIS,'\n'));
BL_PAR.win_efld(_red,_tab,'OPIS',,,_width,{? _height>1 || -_height || 1 ?},1,'Opis'@);
{? BL_PAR.HINT<>'' & BL_PAR.HINT<>BL_PAR.OPIS
|| BL_PAR.win_efld(_red,_tab,'HINT',,,_width,,1,,1)
?};
{? BL_PAR.LOOKUP='YesNo' & BL_PAR.AVVALUES=''
|| BL_PAR.win_efld(_red,,'WARTOSC',,,,,,'Wartość'@,,,'radio-buttons',,'Nie'@,"'0'",'Tak'@,"'1'")
|? BL_PAR.LOOKUP<>'' & BL_PAR.AVVALUES<>''
|| _fml:="BL_PAR.win_efld(_a,,'WARTOSC',,,,,,'Wartość'@,,,'radio-buttons',";
   _choices:=spli_str(BL_PAR.AVVALUES,'\n');
   {! _it:=1.. obj_len(_choices)
   |! {? _choices[_it]<>''
      || _fml+=',\'%1\',"\'%2\'"'[spli_str(_choices[_it],'=')[2],spli_str(_choices[_it],'=')[1]]
      ?}
   !};
   _fml+=")";
   ($_fml)(_red)
|| BL_PAR.win_efld(_red,,'WARTOSC',,,_width,,,'Wartość'@)
?};
exec('ok_esc','#window',BL_PAR,_red,,,,,,,'Zapisz'@);
_red


\param_oper_record
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Obsługa na rekord w oknie parametrów związanych z działaniem usługi
::   WE: _a - parametr systemowy akcji przed rekord
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().tab;

:: Redagowalne tylko listki
BL_PAR.cntx_psh();
BL_PAR.index('GROUP');
BL_PAR.prefix(REF.FIRMA,BL_PAR.ACTIVE,#BL_PAR.ref());
_tab.EDIT:=~BL_PAR.first();
BL_PAR.cntx_pop();

{? BL_PAR.LOOKUP='YesNo' & BL_PAR.AVVALUES=''
|| {? BL_PAR.WARTOSC='1'
   || _tab.WARTOSC:='Tak'
   || _tab.WARTOSC:='Nie'
   ?}
|? BL_PAR.LOOKUP<>'' & BL_PAR.AVVALUES<>''
|| _tab.WARTOSC:=BL_PAR.WARTOSC;
   _choices:=spli_str(BL_PAR.AVVALUES,'\n');
   {! _it:=1.. obj_len(_choices)
   |! {? _choices[_it]<>''
      || {? BL_PAR.WARTOSC=spli_str(_choices[_it],'=')[1]
         || _tab.WARTOSC:=spli_str(_choices[_it],'=')[2]
         ?}
      ?}
   !}
|| _tab.WARTOSC:=BL_PAR.WARTOSC
?};
_tab.memo_set(BL_PAR.OPIS,'OPIS');
_tab.memo_set(BL_PAR.HINT,'HINT');

{? _a
|| _grayed:=':';
   {? ~_tab.EDIT || _grayed:='P'+_grayed ?};
   BL_PAR.actions_grayed(cur_win(1,1),_grayed)
?};

{? ~_tab.EDIT
|| ~~
|? BL_PAR.IDPUT>_tab.TM1 & BL_PAR.IDPUT<=_tab.TM2
|| exec('findtmp','#color')
|? BL_PAR.IDPUT>_tab.TM2
|| exec('findtmp2','#color')
|| ~~
?}


\param_oper_modified
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Sprawdza, czy parametry były modyfikowane od wejścia do redagowania (czy należy odesłać)
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().tab;

:: Pobranie zmodyfikowanych parametrów
_bl_par:=sql('
   select
      REFERENCE as REF,
      SYMBOL,
      WARTOSC
   from BL_PAR
   where BL_PAR.FIRMA=:_a and BL_PAR.IDPUT>\':_b\'
',REF.FIRMA,_tab.TM2);

_bl_par.first()


\param_oper_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wysyła na portal zmienione wartości parametrów
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().tab;

{? params_exec('param_oper_modified','businesslink3')
|| {? FUN.ask('Czy wysłać zmodyfikowane wartości parametrów na portal %1?'@['Businesslink'])
   || _result:=exec('TenantParamsModify','businesslink3',_tab.TM2,1);
      {? _result.STATUS
      || _tab.TM1:=_tab.TM2:=time_ident(date(),time());
         _tab.put()
      ?}
   ?}
|| FUN.info('Nie zmodyfikowano wartości parametrów.\nNie ma potrzeby wysyłania danych na portal %1.'@['Businesslink'])
?};
~~


\kh_repair
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Przypisanie kontrahenta w przypadku braku, gdy jest dostępny jego tenant_id
::   WE: _a - DOKUM.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _formula:="
      exec('czytaj','#stalesys',,XINFO,'BL_TNNT');
      {? @.DOKUM.KH=null() & @.DOKUM.BL_KHUID<>'' & @.DOKUM.BL_KHUID<>exec('tenant','businesslink3')
      || _tab:=exec('get_rek','#sync_id','BL_KH_ID',@.DOKUM.BL_KHUID);
         {? var_pres('_tab')>100 & _tab.first()
         || @.DOKUM.KH:=exec('FindAndGet','#table',@.KH,_tab.REK,,\"ref()\",null());
            @.DOKUM.put()
         ?}
      ?}
   ";
   exec('FindAndGet','#table',DOKUM,_a,,_formula)
?};
~~


\param_oper_group_off
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Odpięcie parametrów od grupy i ich dezaktywacja
::   WE: _a - BL_PAR.ACTIVE
::       _b - #BL_PAR.ref()
::----------------------------------------------------------------------------------------------------------------------
_active:=_a;
_parent:=_b;
BL_PAR.cntx_psh();
BL_PAR.index('GROUP');
BL_PAR.prefix(REF.FIRMA,_active,_parent);
{? BL_PAR.first()
|| {!
   |? exec('param_oper_group_off','businesslink3',BL_PAR.ACTIVE,#BL_PAR.ref());
      BL_PAR.GROUP:=0;
      BL_PAR.ACTIVE:='N';
      BL_PAR.cntx_psh();
      BL_PAR.prefix();
      BL_PAR.put();
      BL_PAR.cntx_pop();
      BL_PAR.first()
   !}
?};
BL_PAR.cntx_pop();
~~


\blc_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Wyświetlenie informacji z BusinessCheck w kontekście okna z dokumentami DOKUM, FAKS lub DOK
::   WE: _a - opcja uruchamiania 1-wyświetlenie dokumentu, 2-analiza dokumentu, wpp. pytanie o zakres
::       [_b] - DOKUMZ.ref()
::----------------------------------------------------------------------------------------------------------------------
_option:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_dokumz0:={? var_pres('_b')=type_of(null()) || _b || null() ?};

_Tab:={? cur_tab(1,1)=DOK | cur_tab(1,1)=FAKS | cur_tab(1,1)=DOKUMZBC || cur_tab(1,1) || DOKUM ?};

DOKUM.cntx_psh(); DOKUMZ.cntx_psh();

_symbol:={? _Tab=FAKS || FAKS.SYM |? _Tab=DOK || DOK.NK |? _Tab=DOKUM || DOKUM.SYM || '' ?};

{? _dokumz0<>null() | _Tab=DOKUM | _Tab=DOKUMZBC | exec('bl_dokum_seek','zbl',_Tab)
|| {? _dokumz0=null() & _Tab<>DOKUMZBC & DOKUM.RODZAJ_K<>'W'
   || FUN.info('E-dokument do %1 nie jest \'wychodzący\'.'@[_symbol])
   || {? _Tab=DOKUMZBC | _dokumz0<>null()
      || _blc_url:=''
      || _blc_url:=DOKUM.memo_txt(,1,'BLC_URL')
      ?};
      {? _Tab<>DOKUMZBC & _dokumz0=null() & _blc_url=''
      || FUN.info('Brak informacji z BusinessCheck dla dokumentu %1.'@[_symbol])
      |? _Tab<>DOKUMZBC & _dokumz0=null() & 4+_blc_url<>'http'
      || FUN.info('Błędny link do informacji z BusinessCheck dla dokumentu %1.'@[_symbol])
      ||
::       Znajdź DOKUMZ z zawartością KSeF
         {? _dokumz0<>null()
         || _dokumz:=_dokumz0
         |? _Tab=DOKUMZBC
         || {? DOKUMZBC.size()=0
            || {? var_pres('__DOKUMZ_BC')>0 & __DOKUMZ_BC.DOKUMZ<>null()
               || _dokumz:=__DOKUMZ_BC.DOKUMZ
               || _dokumz:=null()
               ?}
            || _dokumz:=DOKUMZBC.DOKUMZ
            ?}
         || _dokumz:=exec('dokumz','edi_fo_ufd',DOKUM.ref(),'ksef')
         ?};
         DOKUMZ.prefix();
         {? _dokumz<>null() & DOKUMZ.seek(_dokumz)
         ||
::          Próba ściągnięcia zawartości, jeżeli nie została utrwalona przez \blc_service_get/businesslink3.fml
            {? DOKUMZ.FILEBC=null() & _blc_url<>''
            || exec('blc_url_get','businesslink3',_blc_url)
            ?};
            {? DOKUMZ.FILEBC<>null()
            || {? _option=0
               || _choice:=FUN.choice('Analiza BusinessCheck'@,,'Wyświetlenie dokumentu'@,'Analiza &dokumentu'@)
               || _choice:=_option
               ?};
               {? _choice=1
               ||
::                Szczegóły postępowania wg: https://confluence.assecobs.pl/pages/viewpage.action?pageId=275257581

::                Folder roboczy na serwerze
                  _tmpdir:=fmk_tmp_dir(0);
                  {? type_of(_tmpdir)<>type_of(~~)
                  || _pth:='%1/'[_tmpdir.get_path]
                  ?};

::                Folder roboczy lokalny
                  _pth_local:='#!Tmp/';

::                JSON
                  _jman:=exec('json_man','__jsonm',fopen(DOKUMZ.FILEBC,'br',,,1));

::                Pobranie dokumentu KSef (xml) - wstrzyknięcie do JSON w pole 'document'
                  _jman.setValue('document',fopen(DOKUMZ.DOKUM,'br',,,1),'encode');

::                Zapisanie zmodyfikowanej zawartości JSON
                  _file:=fopen('%1template.json'[_pth],'Uw',,,1);
                  {? _file.is_open()
                  || _jman.getJSON(_file);
                     _file.fclose()
                  ?};
                  obj_del(_file);

::                Ściągnięcie template, o ile nie jest dostępny o tej nazwie
                  _template_url:=_jman.getValue('template');
                  _template_name:=spli_str(_template_url,'/')[4];
                  {? _template_name='' || _template_name:='template.html' ?};
                  {? ~fexists(_template_name,1)
                  || _ret:=exec('file_url_get','businesslink3',_template_url,_template_name,1);
                     {? _ret<>''
                     || FUN.info(_ret);
                        DOKUM.cntx_pop(); DOKUMZ.cntx_pop();
                        return()
                     ?}
                  ?};

::                Tabela pomocnicza do przechowania template w SYS_MEMO
                  _tab:=tab_tmp(1,'LP','INTEGER','Lp','TEMPLATE','SYS_MEMO','Template');
                  _tab.add();

::                Template wrzucony do SYS_MEMO
                  _file:=fopen(_template_name,'ur',1,,1);
                  {? _file.is_open()
                  || _tab.memo_put(_file,'TEMPLATE');
                     _file.fclose()
                  ?};
                  obj_del(_file);

::                Plik JSON do odczytu
                  _file_json:=fopen('%1template.json'[_pth],'br',,,1);
                  {? _file_json.is_open()
                  ||
::                   Wynikowy plik zakładany w folderze roboczym na serwerze
                     _file:=fopen('%1docview.html'[_pth],'bw',0,,1);
                     {? _file.is_open()
                     ||
::                      Początek template
                        _file.fwrite(spli_str(_tab.memo_txt(,1,'TEMPLATE'),'$content')[1]);
::                      Wstrzyknięcie JSON do template
                        _buf:=obj_new(10000);
                        {! |? (_count:=_file_json.fread(,_buf))>0
                        |! _file.fwrite(_buf,_count)
                        !};
::                      Koniec template
                        _file.fwrite(spli_str(_tab.memo_txt(,1,'TEMPLATE'),'$content')[2]);
                        _file.fclose()
                     ?};
                     obj_del(_file)
                  ?};
                  obj_del(_file_json);

::                Kopiowanie pliku do folderu lokalnego
                  fcopy('%1docview.html'[_pth],'%1docview.html'[_pth_local],0,0,1);

::                Wynikowy HTML wyświetlony we wbudowanej przeglądarce
                  params_set('html','%1docview.html'[_pth_local]);
                  _win_acr:=SYSLOG.mk_ctr('Kontrola dokumentu'@,'#ctrl_browser',,,,,'maximized');
                  SYSLOG.win_ctr(_win_acr);
                  SYSLOG.win_cctr(_win_acr,'ctr_id','@webframe');
                  SYSLOG.control(,,"
                     ctr_set(,'ctr_id','disableCSP',params_get().html);
                     ctr_set(,'ctr_id','navigate',params_get().html)
                  ")

               |? _choice=2
               || exec('blc_analyze','businesslink3',1)
               ?}
            || FUN.info('Brak informacji z kontroli Businesscheck.'@)
            ?}
         || FUN.info('Brak dokumentu KSeF podlegającego kontroli Businesscheck.'@)
         ?}
      ?}
   ?}
|| FUN.info('E-dokument do %1 nie został wygenerowany.'@[_symbol])
?};

DOKUM.cntx_pop(); DOKUMZ.cntx_pop();
~~


\blc_url_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Pobieranie informacji z BusinessCheck do pola FILEBC bieżącego DOKUMZ w kontekście podanego URL
::   WE: _a - URL
::----------------------------------------------------------------------------------------------------------------------
_url:=_a;

_display:=1;

_inet:=inet_get(_url);
{? type_of(_inet)<100
|| {? _display || FUN.emsg('Błąd wywołania funkcji %1.'@['inet_get()']) ?}
||
   _answer:=fopen(null(),'bw',,,1);
   _utc_start:=utc_get();
   _response:=_inet.http_get(_answer);
   {? _response<>0
   || _status:=_inet.get_status();
      _utc_stop:=utc_get();
      _mwac_log_ref:=exec('mwac_log','#mwac',
         'BL_CHECK',
         _inet.get_url(),
         'GET',
         _status,
         _utc_start,
         _utc_stop,
         '',
         _answer,
         _inet.get_header(1),
         _inet.get_header(0)
      );
      _document_id:='';
      {? _status=200
      || _jman:=exec('json_man','__jsonm',_answer);
         {? _jman.isPath('document_id')
         || _document_id:=_jman.getValue('document_id')
         ?}
      ?};
      exec('mwac_log_app','#mwac',
         _mwac_log_ref,
         '|BL_CHECK|F:%1|R:%2|%3'[__Firma,$_status,_document_id],
         ''
      );

      {? _status=200
      || DOKUMZ.bl_put('FILEBC',_answer,,,'answer.json')
      || FUN.info('Błąd pobierania szczegółowych informacji o dokumencie: %1.'@[$_status])
      ?}
   ?}
?};
~~


\is_businesscheck
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Czy współpraca z Businesscheck jest aktywna
::   WY: 0 - kontrola wyłączona
::       1 - kontrola automatyczna lub ręczna zależnie od typu dokumentu lub kontekstu użycia
::----------------------------------------------------------------------------------------------------------------------
{? exec('upgrade2325_blbc1','zbl')
|| (exec('get','#params',100375)='T')
|| 0
?}


\is_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Czy dostępna jest informacja o statusie usługi Businesslink
::----------------------------------------------------------------------------------------------------------------------
{? fexists('../../__action/businessstatus.txt',0)
|| 1
|| 0
?}


\api_status_browse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wyświetla stan usług w oknie przeglądarki
::   WE: [_a] - dodatkowo status techniczny [0]/1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1 || _tech:='technicalinformation/' || _tech:=''  ?};
exec('czytaj','#stalesys',,XINFO,'BL_ENV');
{? 4+XINFO.BL_ENV='TEST' || _env:='test' |? XINFO.BL_ENV='DEMO' || _env:='demo' || _env:='' ?};
_win_acr:=SYSLOG.mk_ctr('Stan usług'@,'#ctrl_browser',,,,,'maximized');
params_set('url','https://businesslink-status.assecobs.pl/%1%2'[_tech,_env]);
SYSLOG.win_ctr(_win_acr);
SYSLOG.win_cctr(_win_acr,'ctr_id','@webframe');
SYSLOG.control(,,"ctr_set(,'ctr_id','navigate',params_get().url)");
~~


\api_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Pobiera (i na żądanie wyświetla) stan usług
::   WE: _a - czy wyświetlać informacje [0]/1
::   WY: JMAN z wynikowym JSON / ~~ w przypadku niepowodzenia
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'BL_ENV');
{? 4+XINFO.BL_ENV='TEST' || _env:='test' |? XINFO.BL_ENV='DEMO' || _env:='demo' || _env:='' ?};
_url:='https://businesslinkapi-status.assecobs.pl/%1'[_env];

_display:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_result:=~~;

_inet:=inet_get(_url);
{? type_of(_inet)<100
|| {? _display || FUN.emsg('Błąd wywołania funkcji %1.'@['inet_get()']) ?}
||
   _answer:=fopen(null(),'bw',,,1);
   _utc_start:=utc_get();
   _response:=_inet.http_get(_answer);
   {? _response<>0
   || _status:=_inet.get_status();
      _utc_stop:=utc_get();
      _mwac_log_ref:=exec('mwac_log','#mwac',
         'BL_STAT',
         _inet.get_url(),
         'GET',
         _status,
         _utc_start,
         _utc_stop,
         '',
         _answer,
         _inet.get_header(1),
         _inet.get_header(0)
      );
      exec('mwac_log_app','#mwac',
         _mwac_log_ref,
         '|BL_STAT|F:%1|R:%2|'[__Firma,$_status],
         ''
      );

      {? _status=200
      || _result:=exec('json_man','__jsonm',_answer.copy('ur'));
         {? _display || _result.view() ?}
      || {? _display || FUN.info('Błąd pobierania informacji o stanie usług: %1.'@[$_Status]) ?}
      ?}
   ?}
?};

_result


\file_url_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Pobranie pliku z URL (na wzór DownToFile/downclass.fml)
::   WE: _a - URL pliku
::       _b - ścieżka do zapisu pliku
::       [_c] - wyszukiwanie wg deklaracji ścieżek 1/[0]
::----------------------------------------------------------------------------------------------------------------------
_pth:={? var_pres('_c') || _c || 0 ?};

_ret:='';
{? var_pres('_a')<>type_of('') | _a=''
|| _ret:='[ERR] Nie podano adresu pliku do pobrania'
?};

{? _ret=''
|| _ht:=inet_get(_a);
   _ht.set_opt('SSL_VERIFYPEER',0);
   _status:=_ht.http_get();
   {? _status=200
   || _data:=_ht.get_data();
      _f:=fopen(_b,'bw',_pth);
      {? _f
      || fwrite(_f,_data);
         fclose(_f)
      || _ret:='[ERR] Błąd przy zapisywaniu pliku.'
      ?}
   || _ret:='[ERR] %1'[$_status]
   ?}
?};

return(_ret)


\api_status_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Wyświetla stan usług - akcja do podpięcia w oknach wertowania i redakcyjnych (na żądanie)
::----------------------------------------------------------------------------------------------------------------------
exec('api_status_browse','businesslink3');
''


\blc_analyze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Pobiera i opcjonalnie wyświetla analizę Businesscheck - w kontekście rekordu DOKUMZ
::   WE: [_a] - czy wyświetlać analizę [0]/1
::----------------------------------------------------------------------------------------------------------------------
_display:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_can_continue:=1;

{? DOKUMZ.FILEBC=null()
|| {? _display
   || FUN.info('Brak informacji z kontroli Businesscheck.'@)
   ?};
   _can_continue:=0
?};

{? _can_continue>0
||
:: Analiza i utrwalenie treści wg https://confluence.assecobs.pl/pages/viewpage.action?pageId=275251645
:: JSON
   _jman:=exec('json_man','__jsonm',fopen(DOKUMZ.FILEBC,'br',,,1));

:: do manipulacji elementami podrzędnymi
   _jman1:=_jman.new('{}');
   _jman2:=_jman.new('{}')

?};

{? _can_continue>0
|| {? _jman.isPath('doc_types')
   || _count:=_jman.countChildren('doc_types');
      {? _count=1 & _jman.getValue('doc_types[1]')='$'
      || {? _display
         || FUN.info('Brak szczegółowych informacji z kontroli — typ dokumentu nie został rozpoznany.'@)
         ?};
         _can_continue:=0
      ?}
   ?}
?};

DOKUMZBC.cntx_psh();
exec('dokumzbc_open','zbl',DOKUMZ.ref());

{? _can_continue>0
||
:: DOKUMZBC jest ustawione

:: Analiza w tabeli tymczasowej dla DOKUMZ, który już nie jest spięty z DOKUM
::   _arch:=(DOKUMZ.DOK=null());
   _arch:=0;

:: Usunięcie analizy dla zapisu archiwalnego (będzie wyświetlana tylko tymczasowa)
   {? _arch
   || {? DOKUMZBC.first() || {! |? DOKUMZBC.del() !} ?}
   ?};

:: Czy załadować stałą analizę?
   _load:=~_arch & ~DOKUMZBC.first();

:: Analiza checklist do tabeli tymczasowej - wykonywana jest zawsze
:: >> Dodać kolorowanie w kolumnie RESULT w zależności od wartości:
:: >> OK-dobre zielono, WARN-uwagi pomarańczono, ERR-błędy czerwono
   _tab:=tab_tmp(1
      ,'LP','INTEGER','Lp.'@
      ,'RESULT','STRING[20]','Status kontroli'@
      ,'DATE','DATE','Data'@
      ,'TIME','TIME','Godzina'@
      ,'CODE','STRING[20]','Kod'@
      ,'MESSAGE','STRING[255]','Komunikat kontroli'@
      ,'PATHS','SYS_MEMO','Pozycje'@
   );

   _wer:=_tab.mk_sel('Rezultaty kontroli Businesscheck (archiwalne)'@,'P',0,'blcresults',,,,,'U');
   _tab.win_fld(_wer,,'LP',,,5);
   _tab.win_fld(_wer,,'RESULT',,,20);
::   _tab.win_fld(_wer,,'DATE',,,-10);
::   _tab.win_fld(_wer,,'TIME',,,-10);
   _tab.win_fld(_wer,,'CODE',,,20);
   _tab.win_fld(_wer,,'MESSAGE',,,50);
   _tab.win_fld(_wer,,'PATHS',,,50);
   _formula:="exec('blc_display','businesslink3',1)";
   _tab.win_act(_wer,,'Formuła','Wizualizacja dokumentu'@@,,,_formula);
   _tab.win_btn(_wer,'text=%1,panel=bottom,align=begin'['Wizualizacja dokumentu'@],'menu:W');
   _tab.win_act(_wer,,'Kolejność');
   _formula:="exec('dokumzbc_legenda','zbl',1)";
   _tab.win_act(_wer,,'Formuła','Legenda'@@,,,_formula);
   _formula:="exec('dokumzbc_record','zbl',1)";
   _tab.win_act(_wer,,'Rekord',,,,_formula);
   _tab.win_sel(_wer);

   _red:=_tab.mk_edit('Rezultat kontroli Businesscheck (archiwalny)'@,,'blcresult');
   _width:=80;
   _tab.win_efld(_red,,'RESULT',,,_width);
::   _tab.win_efld(_red,,'DATE',,,_width-3);
::   _tab.win_efld(_red,,'TIME',,,_width);
   _tab.win_efld(_red,,'CODE',,,_width);
   _tab.win_efld(_red,,'MESSAGE',,,_width);
   _tab.win_efld(_red,,'PATHS',,,_width,-5);
   _tab.win_edit(_red);

   {? _jman.isPath('checklist')
   || _count:=_jman.countChildren('checklist');
      {? _count>0
      || {! _it:=1.. _count
         |! _file1:=fopen(null(),'Uw',,1,1);
            {? _jman.getJSON('checklist[%1]'[$_it],_file1)
            || _jman1.load(_file1);

               _result:=spli_str(_jman1.getValue('result'),'-')[1];
               _result:=
                  {? _result='OK'
                  || exec('check_pos_ok','zbl_stat')
                  |? _result='WARN'
                  || exec('check_pos_warn','zbl_stat')
                  |? _result='ERR'
                  || exec('check_pos_err','zbl_stat')
                  |? _result='STOP'
                  || exec('check_pos_stop','zbl_stat')
                  |? _result='ND'
                  || exec('check_pos_nd','zbl_stat')
                  || '---'
                  ?};
               {? _jman.isPath('date')
               || _date:=iso_datetime_parse(_jman.getValue('date')).date;
                  _time:=iso_datetime_parse(_jman.getValue('date')).time
               || _date:=date();
                  _time:=time()
               ?};
               _code:=_jman1.getValue('code');
               _message:=_jman1.getValue('message');
               _paths:='';
               {? _jman1.isPath('paths')
               || _count1:=_jman1.countChildren('paths');
                  {? _count1>0
                  || {! _it1:=1.. _count1
                     |! _paths+='"%1",'[_jman1.getValue('paths[%1]'[$_it1])]
                     !}
                  ?}
               ?};

::             Zasilenie tabeli tymczasowej (zawsze dla zapisu archiwalnego, gdy wyświetlanie)
               {? _arch & _display
               || _tab.blank();
                  _tab.LP:=_it;
                  _tab.RESULT:=_result;
                  _tab.DATE:=_date;
                  _tab.TIME:=_time;
                  _tab.CODE:=_code;
                  _tab.MESSAGE:=_message;
                  {? _tab.add()
                  || _tab.memo_set(_paths,'PATHS');
                     _tab.memo_put(,'PATHS')
                  ?}
               ?};

::             Zasilenie tabeli stałej (o ile konieczene)
               {? _load
               || DOKUMZBC.blank();
                  DOKUMZBC.DOKUMZ:=DOKUMZ.ref();
                  DOKUMZBC.LP:=_it;
                  DOKUMZBC.RESULT:=_result;
                  DOKUMZBC.DATE:=_date;
                  DOKUMZBC.TIME:=_time;
                  DOKUMZBC.CODE:=_code;
                  DOKUMZBC.MESSAGE:=_message;
                  {? DOKUMZBC.add()
                  || DOKUMZBC.memo_set(_paths,'PATHS');
                     DOKUMZBC.memo_put(,'PATHS')
                  ?}
               ?}
            ?};
            obj_del(_file1)
         !}
      ?}
   ?};

   {? _display
   || {? _arch
      || _tab.select()
      || _win0:=DOKUMZBC.win_sel('?');
         DOKUMZBC.win_sel('WER1');
         DOKUMZBC.win_edit('RED');
         DOKUMZBC.select();
         DOKUMZBC.win_sel(_win0)
      ?}
   ?}

?};
DOKUMZBC.cntx_pop();

~~


\attach_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [23.25_BLBC1]
:: OPIS: Zwraca typ załącznika dla schematu _a lub jeśli nie znaleziono schematu zwraca typ _b
::   WE: _a - schemat
::       _b - typ załącznika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_schemat:={? _a+4='.xsd' || _a-4 || _a ?};
{? _schemat=''                                        || 'UFD-INVOICE'
|? _schemat='UFD-INVOICE-20'                          || 'UFD-INVOICE'
|? _schemat='Schemat_FA_VAT(1)_v9-0E'                 || 'KSEF-INVOICE'
|? _schemat='struktura-logiczna-fa-2-wersja-robocza'  || 'KSEF-INVOICE'
|| _b
?}


\blc_display_doc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Wyświetlenie obrazu dokumentu z informacją o błędach/uwagach
::       w kontekście okna z dokumentami DOKUM, FAKS lub DOK
::----------------------------------------------------------------------------------------------------------------------
exec('blc_display','businesslink3',1)


\blc_service_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: Pobranie wyników analizy Businesscheck - zadanie do realizacji w kolejce technicznej (poza procesowością)
::----------------------------------------------------------------------------------------------------------------------
:: Przetwarzane będą:
:: DOKUM z DOKUMZ oznaczonymi jako przetwarzane przez BC, ale bez ściągnietego wyniku analizy (w bieżącej firmie)
:: - FAKS
:: - uwzględnić powiązanie z DOK w celu odzyskania kontekstu masek dla rekordu
:: - jeżeli brak powiązania z FAKS lub DOK, to przyjmowane jest... wg...
_tab:=sql('
   select
      DOKUM.REFERENCE as DOKUM,
      DOKUMZ.REFERENCE as DOKUMZ,
      DOKUMZ.NAZWA,
      DOKUM.BLC_URL,
      FAKS.ODDZ as ODDZ,
      FAKS.AR as AR,
      FAKS.AM as AM
   from DOKUMZ join DOKUM
      left join @FAKS using(DOKUMZ.REFSQL,FAKS.REFERENCE)
   where
      DOKUM.FIRMA=:_a
      and DOKUM.BLC_URL is not null
      and DOKUMZ.BC=\'T\'
      and DOKUMZ.FILEBC is null
',REF.FIRMA);
::exec('select','#table',_tab);
DOKUMZ.cntx_psh();
DOKUMZ.prefix();
{? _tab.first()
|| {!
   |?
::    Otwarcie masek tabel zgodnie z powiązanym dokumentem
      __PARSES.setVal('OddzialLogProd',_tab.ODDZ);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LSP';
      _args.AR:=_tab.AR;
      _args.AM:=_tab.AM;
      __PARSES.setVal('OkresRok',_args);
      obj_del(_args);

      {? DOKUMZ.seek(_tab.DOKUMZ)
      || _blc_url:=_tab.memo_txt(,1,'BLC_URL');
::       UWAGA: Zabezpieczenie na przeterminowany link - używane pola z zapamiętanego linku
::              W przypadku problemów powinna być dostępna metoda aktywująca nowy link
         _par:=spli_str(_blc_url,'?')[2];
         _par_tab:=spli_str(_par,'&');
         _date:='';
         _expires:=0;
         {! _it:=1.. obj_len(_par_tab)
         |! {? spli_str(_par_tab[_it],'=')[1]='X-Amz-Date'
            || _date:=spli_str(_par_tab[_it],'=')[2]
            |? spli_str(_par_tab[_it],'=')[1]='X-Amz-Expires'
            || _expires:=#spli_str(_par_tab[_it],'=')[2]
            ?}
         !};
         obj_del(_par_tab);
         _date:=regex_replace(_date,'(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})','$1-$2-$3T$4:$5:$6');
         _utc:=utc_get();
         {? _date>iso_datetime_value(utc_date(_utc,1),utc_time(_utc,1)-(_expires/60),'utc')
         || exec('blc_url_get','businesslink3',_blc_url);
::          Jeżeli jest dostępny wynik sprawdzenia, to wypełnienie tabeli DOKUMZBC
            {? DOKUMZ.FILEBC<>null()
            || exec('blc_analyze','businesslink3',0)
            ?}

         ?}
      ?};
      _tab.next()
   !}
?};
DOKUMZ.cntx_pop();
~~


\docinfo_callback_url
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_BLBC1]
:: OPIS: URL serwisu callback do powiadamiania o zmianie statusu dokumentów
::----------------------------------------------------------------------------------------------------------------------
''


\user_ksef_token_revoke
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Unieważnienie tokena KSeF dla wskazanego użytkownika i kontekstu
::   WE: _a - tabela z informacjami o tokenie (bieżący rekord)
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;

{? FUN.ask('Czy wycofać token dostępowy użytkownika %1 w kontekście %2?'@[_tab.LOGIN,_tab.NIP])
|| _response:=exec('KsefTokenModify','businesslink3'
      ,_tab.LOGIN
      ,0
      ,0
      ,0
      ,~~
      ,1
      ,~~
      ,_tab.NIP
   );
   {? _response.STATUS=1
   || _tab.DOWNLOAD:='N';
      _tab.UPLOAD:='N';
      _tab.ENABLED:='N';
      _tab.DATE:='';
      {? _tab.put()
      || USERS.cntx_psh(); USERSF.cntx_psh();
         USERS.index('USR_KKOD');
         USERS.prefix(_tab.LOGIN,);
         {? USERS.first()
         || exec('put_usersf','users',,,,,,,,,,,,'N','N')
         ?};
         USERS.cntx_pop(); USERSF.cntx_pop()
      ?};
      FUN.info('Wycofano token dostępowy użytkownika %1 w kontekście %2.'@[_tab.LOGIN,_tab.NIP])
   ?}
?};
~~


\ksef_environment_path
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_JST01]
:: OPIS: Zwraca ścieżkę do środowiska KSeF
::   WE: _a - 1-odbieranie, 0-wysyłane
::----------------------------------------------------------------------------------------------------------------------
_par:={? _a || 'BL.KSEF.DownloadEnvironment' || 'BL.KSEF.Environment' ?};
_env:=exec('bl_par','businesslink3',_par);
{? _env='TEST'
|| 'https://ksef-test.mf.gov.pl'
|? _env='DEMO'
|| 'https://ksef-demo.mf.gov.pl'
|| 'https://ksef.mf.gov.pl'
?}


\ksef_verification_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25_JST01]
:: OPIS: Tworzy link weryfikacyjny
::       Kontekst wywołania - rekord tabeli DOKUM
::----------------------------------------------------------------------------------------------------------------------
_environment_path:=exec('ksef_environment_path','businesslink3',DOKUM.RODZAJ_K='P');
_ksef_reference_number:={? DOKUM.NRKSEF='' || 'OFFLINE' || DOKUM.NRKSEF ?};

:: Funkcja pomocnicza
_hex2int:="
   _a:='0'+(-_a);
   _res:=0;
   {!
   |? _a<>''
   |! _hexd:=1+_a; _a:=1-_a;
     _intd:={? _hexd>='0' & _hexd<='9' || %_hexd-%'0' |? _hexd>='a' & _hexd<='f' || 10+%_hexd-%'a' ?};
     _res:=16*_res+_intd
   !};
   return(_res)
";

_dokumz:=exec('dokumz','edi_fo_ufd',DOKUM.ref(),'ksef');
DOKUMZ.cntx_psh();
DOKUMZ.prefix();
{? _dokumz<>null() & DOKUMZ.seek(_dokumz)
|| _hash:=hash(fopen(DOKUMZ.DOKUM,'br',,,1),'sha256');
   _hashfile:=fopen(null,'b',,1,1);
   {!
   |? _hash<>''
   |! _byte:=_hex2int(2+_hash);
      _hash:=2-_hash;
      _hashfile.fwrite(_byte)
   !};

   _hash:=base64('encode',_hashfile);
   _inet:=inet_get('http://encode');
   _hash:=_inet.url_encode(_hash);

   ~~
|| _hash:=''
?};
DOKUMZ.cntx_pop();

'%1/web/verify/%2/%3'[_environment_path,_ksef_reference_number,_hash]


\gen_pdf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [RR.XX]
:: OPIS: Generuje PDF po potwierdzeniu faktury w KSeF
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: odblokować jak wróci temt QR code w PDF faktury
{? 0& DOKUM.REFSQL<>'' & ref_tab(DOKUM.REFSQL)=FAKS
||
   exec('FindAndGet','#table',FAKS,DOKUM.REFSQL,,"
::      VAR_DEL.delete('__GRP_DR');
::      __GRP_DR:=exec('grp_dr_init','param_wydr');
::      __GRP_DR.GR:=1;
::      __GRP_DR.PDF:=1;
::      _params:=exec('mp_run_a','#b__box');
::      _params.ACT_UID:='LSP_FAK_ZWFS';
::      _params.GRUPA:={? __GRP_DR.GR || 'T' || 'N' ?};
::      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
::      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'FAKS',FAKS.ref());
::      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'CZY_PDF','E-DOKUMENT');
::      exec('mp_run','#b__box',_params)

      exec('fak_psh','open_tab');
      exec('fak_open','open_tab',1+(FAKS.name()+3),FAKS.name()+2);
      KSTE.cntx_psh();
      KSTE.use(gsub(KSTE.name(1),'?',1+(FAKS.name()+3)));
      exec('init','lsp');
      exec('init_fak','lsp');
      VAR_DEL.delete('__GRP_DR');
      __GRP_DR:=exec('grp_dr_init','param_wydr');
      __GRP_DR.GR:=1;
      __GRP_DR.PDF:=_czy_pdf:=1;
      _msk:={? FAKS.T().WZ<>'' || FAKS.T().WZ || exec('rep_mask','faktury_wydruk',1) ?};
      {? _msk='' | _msk*'?' | _msk*'*' || _msk:=exec('msk','dp_wydrukow',FAKS.ref(),'E-dokument') ?};
      _auto:=0;
      _czy_edokument:=1;
      _rodzaje_edokumentu:=exec('rodzaje_edokumentu','zbl_dok',exec('kh_dokum','zbl_dok',FAKS.ref()),FAKS.T,FAKS.DW,
         FAKS.WHERE,FAKS.MANSKSEF);
      exec('fak_druk','faktury_wspolne',_czy_pdf,_msk,_auto,_czy_edokument,_rodzaje_edokumentu);
      VAR_DEL.delete('__GRP_DR');
      KSTE.cntx_pop();
      exec('fak_pop', 'open_tab')
   ")
?}

:Sign Version 2.0 jowisz:1045 2024/01/30 12:15:54 4fe4105dac10739810e98214abb7c29584b16a2b0b887413c1425d38e98de52c25dc204e217f72d2b088aa0f6cd7b550557aeaea2d1f0974fe2cade2b8cc891cdc506ef34cf19c0e6d164c73bc892b084fe6ef1b1c23c943da0f36ae8591b528bfd1e6ba1964cd557ab41e8d3f8cd945600aec362ab6c0a0a9cfdc88747c23a0
