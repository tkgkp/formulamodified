:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: zs_lib.fml [20.42]
:: Utworzony: 06.08.2019
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły obsługujące typy zależności służbowych w PKD_EZK i PKD_EZK_ORLP.
::======================================================================================================================


\def_dnd_setup
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Konfiguruje drag'n'drop dla okienka podwładnych.
::   WE: _a STRING - akronim okienka wertowania
::       _b INTEGER - status 0/1* - wyłącz/włącz
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wnd:=_a;
_off:=(var_pres('_b')=type_of(0) & _b=0);

ZS_DEF.dnd_sel(_wnd,,'records.ZS_DEF',
   {? _off<>0    || ""
   |? _wnd='WER' || "exec('dnd_def_wer','zs_def')"
   |? _wnd='POD' || "exec('dnd_def_pod','zs_def')"
   || ""
   ?}
);
~~


\wnd_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Część wspólna formuł przed otwarciem okna.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: przygotuj typy zależności
ZS_TYP.cntx_psh();
:: znajdź typ domyślny
_def:=exec('domyslny','zs_typ',,1);
ZS_TYP.index('TREE');
ZS_TYP.prefix(exec('ref_firma','ustawienia'));

:: przygotuj definicje zależności
ZS_DEF.cntx_psh();
ZS_DEF.index('TREE');
ZS_DEF.prefix(_def);
1


\wnd_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Podczas zamykania okna zarządzania zależnościami służbowymi.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
:: porządki
ZS_DEF.cntx_pop();
ZS_TYP.cntx_pop();
1


\zs_def_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Ogólna formuła "przed obsługą" okien tabeli ZS_DEF.
::   WE: _a STRING - akronim okienka tabeli ZS_TYP
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_wnd:=_a;

_ref:=null;
{? grp_empty(ZS_TYP,_wnd,1)=0
:: niepuste okienko typów
|| {? ZS_TYP.ZS_TYP=0
   || _ref:=ZS_TYP.ref()
   || ZS_TYP.cntx_psh();
      {? ZS_TYP.seek(ZS_TYP.ZS_TYP,,1)
      || _ref:=ZS_TYP.ref()
      ?};
      ZS_TYP.cntx_pop()
   ?}
|| ZS_DEF.prefix(null);
   return('#disable')
?};

ZS_DEF.prefix(_ref);
~~


\zs_typ_naw_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po odświeżeniu wiersza w oknie NAW tabeli ZS_TYP w PKD_EZK i PKD_EZK_ORLP.
::   WE: _a STRING - akronim okienka współpracowników
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: parametry formuł grupy
params_set(params_get());

:: włącz/wyłącz obsługę przeciągnij i upuść
exec('def_dnd_setup','zs_lib','POD',ZS_TYP.ZS_TYP=0);

:: odrysuj okno zależności
grp_disp(ZS_DEF,'POD',1,1);
~~


\zs_typ_nad_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po odświeżeniu wiersza w oknie NAD tabeli ZS_TYP w PKD_EZK i PKD_EZK_ORLP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: parametry formuł grupy
params_set(params_get());

:: współpracownik
REF.P();

_aid:=':';
{? ZS_TYP.ZS_TYP<>0 | ~exec('dostepny_ud_skl','schemat',,'PKD',P.WYDZIAL)
:: typ pochodny lub brak dostępu do jednostki organizacyjnej
|| _aid:='WU:'

|? ZS_POM.ZS_DEF=null
:: brak przełożonego
|| _aid:='U:'
?};

{? exec('done_state','pkd','PKD_EZK_ORLN',P.uidref())
:: brak czynności na liście zadań
|| _aid:='Z%1Z'[_aid]
?};

ZS_TYP.actions_grayed('NAD',_aid);
~~


\zs_def_pod_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po odświeżeniu wiersza w oknie POD tabeli ZS_DEF w PKD_EZK i PKD_EZK_ORLP.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: parametry formuł grupy
params_set(params_get());

:: współpracownik
REF.P();

_aid:=':';
{? ZS_TYP.ZS_TYP<>0 |
   ~exec('dostepny_ud_skl','schemat',,'PKD',P.WYDZIAL) |
   ~exec('szukaj','zs_def',REF.P,exec('slo_kod','zs_typ'))
:: typ pochodny, współpracownik nie występuje w zależnościach
:: lub brak dostępu do jednostki organizacyjnej współpracownika
|| _aid:='DPUW:D'

|| {? ZS_DEF.OK='T'
::    zweryfikowany
   || _aid:='W'+_aid
   ?}
?};

{? exec('done_state','pkd','PKD_EZK_ORLP',P.uidref())
:: brak czynności na liście zadań
|| _aid:='Z%1Z'[_aid]
?};

ZS_DEF.actions_grayed('POD' ,_aid);
~~


\zs_def_pod_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Przed obsługą okna POD tabeli ZS_DEF w PKD_EZK i PKD_EZK_ORLP.
::   WE: _a INTEGER - zgodny ze specyfikacją narzędzi
::   WY: zgodny ze specyfikacją narzędzi
::----------------------------------------------------------------------------------------------------------------------
{? REF.P=null
:: blokada okna
|| return('#disable')
?};

:: ogranicz dziedzinę lub zablokuj okno
_ret:=exec('zs_def_bs','zs_lib','NAW');
{? type_of(_ret)=type_of('')
:: blokada całego okna
|| return(_ret)
?};

_kod:=exec('slo_kod','zs_typ');
_ref:=exec('szukaj','zs_def',REF.P,_kod);

{? _ref<>null
|| ZS_DEF.seek(_ref);
   ZS_DEF.prefix(ZS_DEF.ZS_TYP);
   ZS_DEF.tr_root('POD',1,#_ref)
|| ZS_DEF.prefix(null);
   ZS_DEF.tr_root('POD',1,-1)
?};
~~


\transfer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Formuła uzupełniająca zależności służbowe.
::   WE:
::   WY: wynik zadania potransferowego
::----------------------------------------------------------------------------------------------------------------------
_res:=1;

:: sprawdź wystąpienie cykli
_BUF:=exec('transfer_chk','zs_lib');
{? _BUF.first() & FUN.ask(
      'Znaleziono cykliczne zależności służbowe.\n'
      'Czy udostępnić raport kontrolny? '
   )
|| _BUF.select()
?};
{? _BUF.first() & ~FUN.ask(
      'Znaleziono cykliczne zależności służbowe.\n'
      'Czy na pewno kontynuować działanie? '
   )
|| return(-1)
?};

_firma:=exec('ref_firma','ustawienia');
ZS_TYP.cntx_psh();
ZS_TYP.index('UNIQUE');
ZS_TYP.prefix(_firma);
{? ZS_TYP.first()
|| _res:=-1;
   {? FUN.ask(
         'Znaleziono typy zależności służbowych.\n'
         'Czy usunąć istniejące dane?'
      )
   || _res:=exec('del_ndx','#table',ZS_TYP,'TREE',_firma,0)
   ?}
?};
ZS_TYP.cntx_pop();

{? _res<=0
:: błąd lub rezygnacja
|| return(_res)
?};

SLO_KOD.cntx_psh();
SLO_KOD.index('KOD');
SLO_KOD.prefix(exec('slo_typ','zs_typ'));
{? SLO_KOD.find_key('DOSTINF',)
:: zależności domyślne
|| _kod:=SLO_KOD.ref();
   _res:=exec('transfer_typ','zs_lib',_kod,null);
   _loop:=(_res>0 & SLO_KOD.first());
   {!
   |? _loop
   |! {? SLO_KOD.ref()<>_kod
::       zależności inne niż domyślne
      || _res:=exec('transfer_typ','zs_lib',SLO_KOD.ref(),_kod)
      ?};
      _loop:=(_res>0 & SLO_KOD.next())
   !}
?};
SLO_KOD.cntx_pop();

_res


\transfer_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Uzupełnia zależności wskazanego typu.
::   WE: _a [_SLO_KOD] - wskazanie typu zależności
::       _b [_SLO_KOD] - wskazanie typu nadrzędnego
::   WY: wynik zadania potransferowego
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_typ:=_a;
_nad:=_b;

_res:=1;
_dt:=date();
_zd:=date(0,0,0);

:: test dla złączenia typów zależności służbowych
:: czy na datę transferu są przypisania podwładnych
P_PZ.cntx_psh();
P_PZ.prefix();
P_PZ.f_set(,
   'join P using(P_PZ.P,P.REFERENCE)',
   'KLASA=\'P\' and TYP=:_a and P.FIRMA=:_b',
   _typ,exec('ref_firma','ustawienia')
);
_loop:=(_nad<>null & P_PZ.f_first());
{!
|? _loop
|! {? P_PZ.CO='N'
::    zależność stała
   || _nad:=null

   |? (P_PZ.OD=_zd | P_PZ.OD<=_dt) &
      (P_PZ.DO=_zd | _dt<=P_PZ.DO)
::    zależność okresowa
   || _nad:=null
   ?};
   _loop:=(_nad<>null & P_PZ.f_next())
!};
P_PZ.f_clear();
P_PZ.cntx_pop();

_firma:=exec('ref_firma','ustawienia');

ZS_TYP.cntx_psh();
ZS_TYP.index('UNIQUE');
ZS_TYP.prefix(_firma);
{? ~ZS_TYP.find_key(_typ)
|| ZS_TYP.blank();
   ZS_TYP.SLO_KOD:=_typ;
   ZS_TYP.KOD_NAD:=_nad;
   SLO_KOD.cntx_psh();
   _slo_kod:=ZS_TYP.SLO_KOD().KOD;
   _kod_nad:=ZS_TYP.KOD_NAD().KOD;
   {? ZS_TYP.add()
   || {? ZS_TYP.KOD_NAD<>null
      || __UPG.msg('Utworzono typ zależności %1 przypisany do %2.'[_slo_kod,_kod_nad])
      || __UPG.msg('Utworzono typ zależności %1.'[_slo_kod])
      ?}
   || _res:=-1;
      __UPG.msg('Nie utworzono typu zależności %1.'[_slo_kod])
   ?};
   SLO_KOD.cntx_pop()
?};
{? _nad<>null
:: typ pochodny
|| ZS_TYP.cntx_pop();
   return(_res)
?};

SLO_KOD.cntx_psh();
_slo:=ZS_TYP.SLO_KOD().SLO_TYP().SYMBOL;
_kod:=SLO_KOD.KOD;

{? _kod='DOSTINF'
|| _slo:=_kod:=~~
?};

:: dla kontroli wystąpienia cyklu
VAR_DEL.delete('__heap');
__heap:=obj_new('exc','pth');

ZS_DEF.cntx_psh();
ZS_DEF.index('UNIQUE');
ZS_DEF.prefix(ZS_TYP.ref());

OSOBA.cntx_psh();
P.cntx_psh();
P.index('PRACONAZ');
P.prefix(_firma);

_loop:=P.first();
_size:=P.size();
{! _cnt:=1
|? _loop
|! progress(
      int(100*_cnt/_size),
      'Proszę czekać. Trwa aktualizacja zależności służbowych typu "%1".\n'
      'Współpracownik %2 %3 (%4)'[ZS_TYP.SLO_KOD().KOD,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,P.T],
      FUN.TYT
   );
   _def:=null;
   _ref:=P.ref();
   __heap.exc:=0;
   __heap.pth:=',';
:: pobierz listę przełożonych współpracownika
   _BUF:=exec('prac_nad_old','stanprac',P.ref(),,_slo,_kod);
   {? _BUF.first() & _BUF.P_SQL<>'' & _BUF.P_SQL<>$P.ref()
::    jest przełożony
   || P.cntx_psh();
      {? P.seek(_BUF.P_SQL,,1)
::       znajdź/utwórz przełożonego
      || {? ZS_DEF.find_key(P.ref())
         || _def:=ZS_DEF.ref()
         || ZS_DEF.blank();
            ZS_DEF.ZS_TYP:=ZS_TYP.ref();
            ZS_DEF.P:=P.ref();
            {? ZS_DEF.add()
            || _def:=ZS_DEF.ref()
            || _res:=-1
            ?}
         ?}
      || _res:=-1
      ?};
      P.cntx_pop();
      {? _res>0
::       aktualizuj/utwórz zależność
      || {? ZS_DEF.find_key(P.ref())
         || ZS_DEF.ZS_DEF:=#_def;
            ZS_DEF.put()
         || ZS_DEF.blank();
            ZS_DEF.ZS_TYP:=ZS_TYP.ref();
            ZS_DEF.ZS_DEF:=#_def;
            ZS_DEF.P:=P.ref();
            {? ~ZS_DEF.add()
            || _res:=-1
            ?}
         ?}
      ?}
   ?};
   obj_del(_BUF);
   _loop:=(_res>0 & P.next())
!};
prgs_clr();

P.cntx_pop();
OSOBA.cntx_pop();
ZS_DEF.cntx_pop();
ZS_TYP.cntx_pop();
SLO_KOD.cntx_pop();
VAR_DEL.delete('__heap');

{? _res>0
|| __UPG.msg('Uzupełniono zależności typu %1.'[_slo_kod])
|| __UPG.msg('Wystąpił błąd podczas uzupełniania zależności typu %1.'[_slo_kod])
?};

_res


\transfer_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Weryfikacja danych przed transferem.
::   WE:
::   WY: 0/1 - dane błędne/poprawne
::----------------------------------------------------------------------------------------------------------------------
:: lista potencjalnie błędnych zależności
_BUF:=tab_tmp(1,
   'NUM','INTEGER','Lp'@,
   'TYP','STRING[%1]'[$MS.fld_len(SLO_KOD,'KOD')],'Typ'@,
   'N_T','STRING[%1]'[$MS.fld_len(P,'T')],'Przełożony (%1)'@[MS.name(P,'T')],
   'N_NA','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],'Przełożony (%1)'@[MS.name(OSOBA,'NAZWISKO')],
   'N_IM','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],'Przełożony (%1)'@[MS.name(OSOBA,'PIERWSZE')],
   'P_T','STRING[%1]'[$MS.fld_len(P,'T')],'Podwładny (%1)'@[MS.name(P,'T')],
   'P_NA','STRING[%1]'[$MS.fld_len(OSOBA,'NAZWISKO')],'Podwładny (%1)'@[MS.name(OSOBA,'NAZWISKO')],
   'P_IM','STRING[%1]'[$MS.fld_len(OSOBA,'PIERWSZE')],'Podwładny (%1)'@[MS.name(OSOBA,'PIERWSZE')],
   'P_PZ','STRING[16]','Zależność'@
);
_wnd:=_BUF.mk_sel('Raport kontrolny'@,'T',,,,,,,'U');
:: widok
_BUF.win_fld(_wnd,,'NUM',,,-3);
_BUF.win_fld(_wnd,,'TYP',,,-MS.fld_len(SLO_KOD,'KOD'),,,,,MS.comment(SLO_KOD,'KOD'));
_BUF.win_fld(_wnd,,'N_T',,,-MS.fld_len(P,'T'),,,,,MS.comment(P,'T'));
_BUF.win_fld(_wnd,,'N_NA',,,-MS.fld_len(OSOBA,'NAZWISKO'),,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.win_fld(_wnd,,'N_IM',,,-MS.fld_len(OSOBA,'PIERWSZE'),,,,,MS.comment(OSOBA,'PIERWSZE'));
_BUF.win_fld(_wnd,,'P_T',,,-MS.fld_len(P,'T'),,,,,MS.comment(P,'T'));
_BUF.win_fld(_wnd,,'P_NA',,,-MS.fld_len(OSOBA,'NAZWISKO'),,,,,MS.comment(OSOBA,'NAZWISKO'));
_BUF.win_fld(_wnd,,'P_IM',,,-MS.fld_len(OSOBA,'PIERWSZE'),,,,,MS.comment(OSOBA,'PIERWSZE'));
:: obsługa
_BUF.win_act(_wnd,,'Formuła','S&zczegóły'@@,,
   'Wyświetlenie szczegółowych informacji'@,
   "P_PZ.seek(cur_tab(1,1).P_PZ,,1)",
   "  P_PZ.win_edit('RED_PODP');
      P_PZ.display()
   ",1,,,,
   'Z'
);
_BUF.win_act(_wnd,,'Formuła','Usuń'@@,,
   'Usunięcie zależności służbowej'@,
   "  _BUF:=cur_tab(1,1);
      P_PZ.seek(_BUF.P_PZ,,1) &
      (_BUF.sel_size()<>0 | exec('del_ask','#table',P_PZ))
   ",
   "P_PZ.del() & cur_tab(1,1).del()",,1,
   "exec('del_ask','#table',P_PZ)",,
   'U'
);
_BUF.win_act(_wnd,,'Szukaj');
_BUF.win_act(_wnd,,'Kolejność');
_BUF.win_btn(_wnd,'text=%1'['S&zczegóły'@],'menu:Z');
_BUF.win_btn(_wnd,'text=%1'['Usuń'@],'menu:U');
_BUF.win_sel(_wnd);

:: dla kontroli wystąpienia cyklu
VAR_DEL.delete('__heap');
__heap:=obj_new('exc','pth');

_firma:=exec('ref_firma','ustawienia');

P_PZ.cntx_psh();
P_PZ.clear();
SLO_KOD.cntx_psh();
SLO_KOD.index('KOD');
SLO_KOD.prefix(exec('slo_typ','zs_typ'));
_loop:=SLO_KOD.first();
{!
|? _loop
|! P_PZ.f_set(,
      'join P using(P_PZ.P,P.REFERENCE) ',
      'P_PZ.KLASA=\'P\' and P_PZ.TYP=:_a and '
      'P_PZ.CO=\'N\' and P_PZ.NB=\'N\' and '
      'P.FIRMA=:_b',
      SLO_KOD.ref(),_firma
   );
   _loop:=P_PZ.f_first();
   {!
   |? _loop
   |! __heap.exc:=0;
      __heap.pth:=',';
::    spróbuj określić listę przełożonych
      exec('prac_nad_old','stanprac',P_PZ.PZ,,SLO_TYP.SYMBOL,SLO_KOD.KOD);
      {? __heap.exc<>0
      || _BUF.NUM+=1;
         _BUF.TYP:=SLO_KOD.KOD;
         _BUF.N_T:=P_PZ.P().T;
         _BUF.N_NA:=P.OSOBA().NAZWISKO;
         _BUF.N_IM:=OSOBA.PIERWSZE;
         _BUF.P_T:=P_PZ.PZ().T;
         _BUF.P_NA:=P.OSOBA().NAZWISKO;
         _BUF.P_IM:=OSOBA.PIERWSZE;
         _BUF.P_PZ:=$P_PZ.ref();
         _BUF.add()
      ?};
      _loop:=P_PZ.f_next()
   !};
   P_PZ.f_clear();
   _loop:=SLO_KOD.next()
!};
SLO_KOD.cntx_pop();
P_PZ.cntx_pop();
VAR_DEL.delete('__heap');

_BUF


\jednorodne_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.37]
:: OPIS: Sprawdza, czy należy stosować jednorodne zastępstwa dla zależności dodatkowych.
::   WE:
::   WY: 0/1 - nie/tak
::----------------------------------------------------------------------------------------------------------------------
PAR_SKID.get(366)='T'

:Sign Version 2.0 jowisz:1045 2022/06/30 14:23:27 0536e5858cda5ce3f04ef3c2f9d0b60c1bb60b17fc823a3de98d39d6c89a9093585ba47acb012309f493f57c58310d3a7fe2294fdbc195046009f84fe691d9dd2e375732ed5eab67a2d3eedba2eab8162548e59f2a325dd8e0c4ac815d72976b2708ccc419d101cbdd9ade4cf6be48f10f09040aa81afff98c23c054d50f3f56
