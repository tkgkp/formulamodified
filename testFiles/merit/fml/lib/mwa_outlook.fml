:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: mwa_outlook.fml
:: Utworzony: 19.10.2018
:: Autor: RO
::======================================================================================================================
:: Zawartość: Formuły do obsługi integracji z MS Outlook.
::======================================================================================================================


\prolog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła startowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('prolog','mwapi',_par);
~~


\list_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Odczytuje wszystkich kontrahentów.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

{? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHP')
|| KH.cntx_psh();
   KH.index('KOD');
   KH.prefix();
   _result:=exec('serialize_kh','mwa_outlook',_par,0);
   KH.cntx_pop()
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Brak uprawnień do przeglądania kontrahentów.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\get_kh_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Odczytuje kontrahenta na podstawie przekazanego adresu email.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__KH')>0 || obj_del(__KH) ?};

_par:=params_get();
_email:=exec('get_option','mwapi',_par,'EMAIL').value;
:: Parametr już nie jest potrzebny
::_app_iden:=exec('get_option','mwapi',_par,'APP_IDEN').value;
_ndx_kho:=KH_OSOB.ndx_tmp(,,'EMAIL',,,'EMAIL',,);
_ndx_kh:=KH.ndx_tmp(,,'EM',,,'EM',,);
__KH:=tab_tmp(1,
   'IDADD','STRING[31]','khid',
   'KHO_KH','STRING[31]','khallid',
   'NAZWA','STRING[90]','nazwa',
   'FIRMA','STRING[90]','firma',
   'STN','STRING[60]','stanowisko',
   'FLINK','STRING[255]','firmalink',
   'OLINK','STRING[255]','osobalink',
   'IMIE','STRING[20]','khimiepracownik',
   'NAZW','STRING[30]','khnazwiskopracownik'
);
_first:=0;
_add:="
   __KH.IDADD:=_a;
   __KH.KHO_KH:=_b;
   __KH.NAZWA:={? +_c || _c || '-Brak-' ?};
   __KH.FIRMA:={? +_d || _d || '-Brak danych-' ?};
   __KH.STN:={? +_e || _e || '-Brak danych-' ?};
   __KH.FLINK:={? +_f || _f || '' ?};
   __KH.OLINK:={? +_g || _g || '' ?};
   __KH.IMIE:={? +_h || _h || '-Brak danych-' ?};
   __KH.NAZW:={? +_i || _i || '-Brak danych-' ?};
   __KH.add()
";

{? exec('authorized','#b__box','ZWS_KHR','ZWS')
|| {? +_email
   || KH_OSOB.cntx_psh();
      KH_OSOB.index(_ndx_kho);
      {? KH_OSOB.find_tab(1,'EMAIL',,'likeIC',_email)
      || _first:=1;
         _a:=KH_OSOB;
         KH_OSOB.KH();
         _khidadd:=KH.IDADD;
         _imie:=KH.OSOBA().PIERWSZE;
         _nazw:=KH.OSOBA().NAZWISKO;
         _olink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH_OSOB.uidref()));
         _flink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH.uidref()));
         KH_OSOB.prefix(_email,_email);
         _add(_a.IDADD,_khidadd,_a.IMIE+' '+_a.NAZWISKO,_a.KH().NAZ_P,_a.STANOW,_flink,_olink,_imie,_nazw);
         _result:=exec('serialize_kh','mwa_outlook',_par,1)
      || KH.cntx_psh();
         KH.index(_ndx_kh);
         {? KH.find_tab(1,'EM',,'likeIC',_email)
         || _flink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH.uidref()));
            _add(KH.IDADD,'','Brak osoby kontaktowej',KH.NAZ_P,'',_flink,'',KH.OSOBA().PIERWSZE,KH.OSOBA().NAZWISKO);
            _result:=exec('serialize_kh','mwa_outlook',_par,1)
         || _wsenv:=exec('wsenv','#mwapi');
            _wsenv.erase();
            _wsenv.add_error('Nie znaleziono kontrahenta o podanym adresie email: %1'@ [_email]);
            _resp:=_wsenv.to_json();
            _result:=exec('serialize_res','mwapi',_par,_resp)
         ?};
         KH.cntx_pop()
      ?};
      KH_OSOB.cntx_pop()
   || _wsenv:=exec('wsenv','#mwapi');
      _wsenv.erase();
      _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@ ['EMAIL',_email]);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?}
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Brak uprawnień do przeglądania kontrahentów.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
KH_OSOB.ndx_drop(_ndx_kho);
KH.ndx_drop(_ndx_kh);
_result


\get_khosob_khidadd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Zwraca wszystkie osoby kontaktowe związane z kontrahentem (na podstawie przekazanego IDADD).
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__KH')>0 || obj_del(__KH) ?};

_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;
:: Parametr już nie jest potrzebny
::_app_iden:=exec('get_option','mwapi',_par,'APP_IDEN').value;
__KH:=tab_tmp(1,
   'IDADD','STRING[48]','khid',
   'KHO_KH','STRING[48]','khallid',
   'NAZWA','STRING[90]','nazwa',
   'FIRMA','STRING[60]','firma',
   'STN','STRING[60]','stanowisko',
   'KHN','STRING[20]','khn',
   'FLINK','STRING[255]','firmalink',
   'OLINK','STRING[255]','osobalink',
   'IMIE','STRING[20]','khimie',
   'NAZW','STRING[30]','khnazwisko',
   'EMAIL','STRING[100]','emailpracownik'
);

_add:="
   __KH.IDADD:=_a;
   __KH.KHO_KH:=_b;
   __KH.NAZWA:={? +_c || _c || '-Brak-' ?};
   __KH.FIRMA:={? +_d || _d || '-Brak danych-' ?};
   __KH.STN:={? +_e || _e || '-Brak danych-' ?};
   __KH.KHN:={? +_f || _f || '-Brak danych-' ?};
   __KH.FLINK:={? +_g || _g || '' ?};
   __KH.OLINK:={? +_h || _h || '' ?};
   __KH.IMIE:={? +_i || _i || '-Brak danych-' ?};
   __KH.NAZW:={? +_j || _j || '-Brak danych-' ?};
   __KH.EMAIL:={? +_k || _k || '-Brak danych-' ?};
   __KH.add()
";

{? exec('authorized','#b__box','ZWS_KHR','ZWS')
|| KH.cntx_psh();
   KH.index('IDADD');
   KH.prefix();
   {? +_idadd=31 & KH.find_key(_idadd)
   || KH_OSOB.cntx_psh();
      KH_OSOB.index('KH');
      KH_OSOB.prefix(KH.ref());
      _loop:=KH_OSOB.first();
      {!
      |? _loop
      |! _nazwa:=KH_OSOB.IMIE+' '+KH_OSOB.NAZWISKO;
         _olink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH_OSOB.uidref()));
         _flink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH.uidref()));
         _add(
            KH_OSOB.IDADD,KH.IDADD,_nazwa,KH.NAZ_P,KH_OSOB.STANOW,KH.SKR+'/'+_nazwa,
            _olink,_flink,KH_OSOB.IMIE,KH_OSOB.NAZWISKO,KH_OSOB.EMAIL
         );
         _loop:=KH_OSOB.next()
      !};
      KH_OSOB.cntx_pop();
      _result:=exec('serialize_kh','mwa_outlook',_par,2)
   || _wsenv:=exec('wsenv','#mwapi');
      _wsenv.erase();
      _wsenv.add_error('Nieprawidłowa wartość parametru %1 [%2].'@ ['"IDADD"',_idadd]);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?};
   KH.cntx_pop()
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Brak uprawnień do przeglądania kontrahentów.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\serialize_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

{? ~_b
|| _data:="
      KH.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
        ,'IDADD',,'SKR',,'NAZ_P',,'NIP',,'SNIP',
      );
      ''
   "
|? _b=1
||  _data:="
         __KH.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'IDADD',,'KHO_KH',,'NAZWA',,'FIRMA',,'STN',,'FLINK',,'OLINK',,'IMIE',,'NAZW',
      );''
   "
|? _b=2
|| _data:="
         __KH.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'IDADD',,'KHO_KH',,'NAZWA',,'FIRMA',,'STN',,'KHN',,'FLINK',,'OLINK',,'IMIE',,'NAZW',,'EMAIL',
      );''
   "
?};

params_set('resp',_resp);
_tab:=tab_tmp(,'STATUS','STRING[20]','','LINK','STRING[150]','');
_tab.STATUS:='OK'; {? _b=3 || _tab.LINK:=_c ?}; _tab.add();
{? _b<>3
|| _tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1','STATUS:status',,'',_data)
|| _tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1','STATUS:status',,'LINK:link',)
?};
_resp


\create_dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Do obsługi wysyłania dokumentu z kontrolki Outlook do tabeli DOKUM w Merit (dokumenty powiązane - kontakty).
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? exec('chk_role','#b__box',OPERATOR.USER,'KKH_KON_DRKO')
|| _idadd:=exec('get_option','mwapi',_par,'KHIDADD').value;
   _T:=xml_tparse(_par.DATA,,,0);
   _dokumk:=exec('get_option','mwapi',_par,'DOKUMK').value;
   _typ:=exec('get_option','mwapi',_par,'TYP').value;
   _symbol:=exec('get_option','mwapi',_par,'SYMBOL').value;
   _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   {? type_of(_T) = type_of(~~)
   || _wsenv.add_error('Nie udało się pobrać informacji o załącznikach do dokumentu.'@);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?};

   DOKUM.cntx_psh();
   DOKUM.index('KH1F');
   _ndx_dk:=DOKUMK.ndx_tmp(,,'IDADD',,,'IDADD',,);
   DOKUMK.cntx_psh();
   DOKUMK.index(_ndx_dk);
   _kat:={? DOKUMK.find_tab(1,'IDADD',,'=',_dokumk) || DOKUMK.ref() || null() ?};
   DOKUMK.cntx_pop();
   ZDARZT.cntx_psh();
   _zdarzt:={? ZDARZT.find_tab(1,'IDADD',,'=',_typ) || ZDARZT.ref() || null() ?};
   ZDARZT.cntx_pop();
   _ndx_kho:=KH_OSOB.ndx_tmp(,,'IDADD',,,'IDADD',,);
   KH_OSOB.cntx_psh();
   KH_OSOB.index(_ndx_kho);
   KH.cntx_psh();
   KH.index('IDADD');
   _find:='';
   _who:={? KH_OSOB.find_tab(0,'IDADD',,'=',_idadd)
        || _find:='kh_osob'; _kh_osob:=KH_OSOB.ref(); 1
        |? KH.find_tab(0,'IDADD',,'=',_idadd)
        || _find:='kh'; 1
        || 0
        ?};
   {? +_idadd=31 & _who
   || DOKUM.blank();
      DOKUM.KH:={? _find='kh_osob' ||  KH_OSOB.KH || KH.ref() ?};
      DOKUM.OPER:={? _T.find_tab(1,'NAME',,'=','OPER') || _T.VAL || '' ?};
      DOKUM.KR_OP:={? _T.find_tab(1,'NAME',,'=','KR_OP') || _T.VAL || '' ?};
      {? _T.find_tab(1,'NAME',,'=','DATAKONT')
      || _date:=iso_datetime_parse(gsub(_T.VAL,' ','T')).date;
         _time:=iso_datetime_parse(gsub(_T.VAL,' ','T')).time
      || _date:=date();
         _time:=time()
      ?};
      DOKUM.DATAKONT:=_date;
      DOKUM.DATA_ODB:=_date;
      DOKUM.CZAS_ODB:=_time;
      DOKUM.CZAS:=time();
      DOKUM.RODZAJ_K:={? _T.find_tab(1,'NAME',,'=','RODZAJ_K') || _T.VAL || '' ?};
      {? _find='kh_osob'
      || DOKUM.KH_OSOB:=_kh_osob
      ?};
      DOKUM.EM:={? _T.find_tab(1,'NAME',,'=','EM') || _T.VAL || '' ?};
      DOKUM.EM_DW:={? _T.find_tab(1,'NAME',,'=','DW') || _T.VAL || '' ?};
      DOKUM.EM_UDW:={? _T.find_tab(1,'NAME',,'=','UDW') || _T.VAL || '' ?};
      DOKUM.FIRMA:=REF.FIRMA;
      DOKUM.TYP:='K';
      POM.TAB:='DOKUM';
      POM.TYPDOK:='SYS';
      exec('add_grnr','numery','SYS');
      DOKUM.NR:=exec('numer_new','numery','PACZKA');
      DOKUM.SYM:=form(DOKUM.NR,-8,,'99');
      DOKUM.BSEND:='N';
      DOKUM.DOT:=_zdarzt;
      DOKUM.SYM_ZEW:=_symbol;
      {? DOKUM.add()
      || exec('znak','numery','DOKUM');
         DOKUM.DOKUMK:=_kat;
         Plugin.run('KKH_VALID_001','ADD',2);
         DOKUM.put();
         _dokum:=DOKUM.ref();
         _link:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',DOKUM.uidref(),'text','Odsyłacz do kontaktu'));
         {? _T.find_tab(1,'NAME',,'=','OPIS') & _T.VAL<>''
         || {? _T.VTRUNC='T'
            || _txt:=exec('blob2txt','mwapi',_T.BVAL);
               DOKUM.memo_set(_txt,'OPIS');
               DOKUM.memo_put(,'OPIS')
            || DOKUM.memo_set(_T.VAL,'OPIS');
               DOKUM.memo_put(,'OPIS')
            ?}
         ?};
         {? _T.find_tab(1,'NAME',,'=','DOK')
         || _ref:=_T.ref();
            _ndx:=_T.ndx_tmp(,,'TREE',,);
            _pocr_jest:=0;
            DOKUMZ.cntx_psh();
            DOKUMZ.index('DISP');
            _T.cntx_psh();
            _T.index(_ndx);
            _T.prefix(_ref);
            _loop:=_T.first();
            {!
            |? _loop
            |! _zal:=_T.ref();
               _T.cntx_psh();
               _T.prefix(_zal);
               _loop:=_T.first();
               _short:='';
               _nazwa:='';
               _licz:=0;
               _pocr:='N';
               {!
               |? _loop
               |! {? var_pres('_data')>100 || obj_del(_data) ?};
                  {? var_pres('_file')>100 || obj_del(_file) ?};
                  {? _T.NAME='KR_OP'
                  || _short:=_T.VAL
                  |? _T.NAME='NAZWA'
                  || _nazwa:=_T.VAL
                  |? _T.NAME='P_OCR'
                  || _pocr:=_T.VAL
                  || {? _T.VTRUNC='T'
                     || _data:=fopen(_T.BVAL,'br',,,1)
                     || _data:=_T.VAL
                     ?};
                    _licz+=1;
                    {? _pocr='T'
                    || {? ~_pocr_jest & _nazwa<>'' & exec('ocr_ext_chk','mwa_outlook',_nazwa)
                       || _pocr_jest:=1
                       || _pocr:='N'
                       ?}
                    ?};
                    DOKUMZ.KR_OP:=_short;
                    DOKUMZ.DOK:=_dokum;
                    DOKUMZ.NAZWA:=_nazwa;
                    DOKUMZ.DATE:=date();
                    DOKUMZ.P_OCR:=_pocr;
                    {? ~DOKUMZ.add()
                    || _wsenv.add_error('Nie udało się dodać załączników do dokumentu powiązanego.'@);
                       _resp:=_wsenv.to_json();
                       _result:=exec('serialize_res','mwapi',_par,_resp)
                    || {? +_nazwa>64
                       || DOKUMZ.bl_put('DOKUM',exec('decode','mwa_outlook',_data),,,55+_nazwa+$_licz+(_nazwa+exec('revert','#string',_nazwa)*'.'))
                       || DOKUMZ.bl_put('DOKUM',exec('decode','mwa_outlook',_data),,,_nazwa)
                       ?}
                    ?}
                 ?};
                 _loop:=_T.next()
               !};
               _licz:=0;
               _T.cntx_pop();
               _loop:=_T.next()
            !};
            DOKUMZ.cntx_pop();
            _T.cntx_pop();
            _T.ndx_drop(_ndx)
         ?};
         DOKUM.index('IDADD');
         DOKUM.prefix(DOKUM.IDADD);
         exec('dokump_zapis','dokum');
         _result:=exec('serialize_dokum','mwa_outlook',_par,_link)
      || _wsenv.add_error('Nie udało się dodać dokumentu'@);
        _resp:=_wsenv.to_json();
        _result:=exec('serialize_res','mwapi',_par,_resp)
      ?}
   || _wsenv.add_error('Nie udało się znaleźć osoby kontaktowej.'@);
      _resp:=_wsenv.to_json();
      _result:=exec('serialize_res','mwapi',_par,_resp)
   ?};
   KH.cntx_pop();
   KH_OSOB.cntx_pop();
   KH_OSOB.ndx_drop(_ndx_kho);
   DOKUMK.ndx_drop(_ndx_dk);
   DOKUM.cntx_pop()
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Brak uprawnień do czynności Rejestracja kontaktów.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\serialize_dokum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do serializacji rekordów z tabeli DOKUM.
::       Kontekst wywołania: ustawiona dziedzina tabeli DOKUM
::   WE: _a - FILE - obiekt plikowy przeznaczony do zapisu wynikowego JSONa
::   WY: 0 / 1 - czy udało się wygenerować wynikowego JSONa do pliku
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);
_link:=_b;

_tab:=tab_tmp(,'STATUS','STRING[20]','','LINK','STRING[255]','');
_tab.STATUS:='OK'; _tab.LINK:=_link; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',,'LINK:link',
);
_resp


\get_version
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Metoda zwraca aktualną wersję dodatku outlook.
::   WY: AKtualna wersja dodatku outlook.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_get:=exec('get_option','mwapi',_par,'RESULT').value;
:: Parametr już nie jest potrzebny
::_app_iden:=exec('get_option','mwapi',_par,'APP_IDEN').value;
_nazwa:='';

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_firma:=REF.FIRMA;

MSO.cntx_psh();
MSO.index('FIRMA');
MSO.prefix('N',_firma);
{? MSO.last()
|| _idadd:=MSO.IDADD;
   _nazwa:=MSO.bl_info('MSO_P','NAME');
   MSO.prefix('N',_firma,_idadd);
   _result:=exec('serialize_version','mwa_outlook',_par,_get,_nazwa)
|| MSO.cntx_psh();
   MSO.prefix('T');
   {? MSO.last()
   || _idadd:=MSO.IDADD;
      _nazwa:=MSO.bl_info('MSO_P','NAME');
      MSO.index('IDADD');
      MSO.prefix(_idadd);
      _result:=exec('serialize_version','mwa_outlook',_par,_get,_nazwa)
   || _nazwa:='0.0.0.0';
      _get:='brak';
      _result:=exec('serialize_version','mwa_outlook',_par,_get,_nazwa)
   ?};
   MSO.cntx_pop()
?};
MSO.cntx_pop();
_result


\serialize_version
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

{? _b='wersja'
|| _data:="
      MSO.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'MSO_W:version',
      );''
   "
|? _b='plik'
|| _data:="
      MSO.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'MSO_P',
      );''
   "
?};
_tab:=tab_tmp(1,'STATUS','STRING[20]','','NAZWA','STRING[50]','');
_tab.STATUS:='OK'; _tab.NAZWA:=_c; _tab.add();
params_set('resp',_resp);
{? _b='brak'
|| _tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1','STATUS:status',,'NAZWA:nazwa',)
|? _b='wersja' | _b='plik'
|| exec('write','%logger',,'wykonuję xml-records z data');
   _tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1','STATUS:status',,'NAZWA:nazwa',,'',_data)
?};
_resp


\get_notif
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Pobiera listę powiadomień dla osoby we wskazanym przedziale czasowym.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_login:=exec('get_option','mwapi',_par,'LOGIN').value;
:: Parametr już nie jest potrzebny
::_app_iden:=exec('get_option','mwapi',_par,'APP_IDEN').value;
_dataOd:=exec('get_option','mwapi',_par,'D_OD').value;
_dataDo:=exec('get_option','mwapi',_par,'D_DO').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();
{? var_pres('__TAB')>0 || obj_del(__TAB) ?};

__TAB:=sql('
   select
      DOKUMP.IDADD,
      DOKUMP.EMAIL,
      DOKUM.REFERENCE as REF,
      DOKUM.IDADD as DOKUM,
      DOKUMP.DT as DATA,
      space(200) as TEMAT,
      DOKUMP.INFO as OPIS,
      space(255) as LINK,
      cast(DOKUMP.GD1 as string_type) as GOD,
      cast(DOKUMP.GD2 as string_type) as GDO,
      cast(DOKUMP.CZP as string_type) as CZP
   from
      DOKUMP join
      USERS using(DOKUMP.USER,USERS.REFERENCE) join
      DOKUM using(DOKUMP.DOKUM,DOKUM.REFERENCE)
   where
      lower(USERS.KOD)=lower(\':_a\') and DOKUMP.DT>=to_date(\':_b\') and DOKUMP.DT<=to_date(\':_c\')
      and DOKUMP.RODZ=\':_d\' and DOKUMP.CZP>=0 and DOKUMP.GD1<=DOKUMP.GD2',
   _login,_dataOd,_dataDo,'K'
);

DOKUM.cntx_psh();
DOKUM.index('IDADD');
_loop:=__TAB.first();
{? ~_loop
|| _wsenv.add_error('Nie znaleziono żadnych powiadomień.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
|| {!
   |? _loop
   |! DOKUM.prefix(__TAB.DOKUM);
      {? DOKUM.first()
      || _dlink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',DOKUM.uidref()));
         __TAB.LINK:=_dlink;
         _temat:='';
         {? DOKUM.KH<>null() & DOKUM.KH().NAZ<>''
         || _temat:=DOKUM.KH().NAZ
         ?};
         {? DOKUM.KR_OP<>''
         || {? _temat<>''
            || _temat+=': '
            ?};
            _temat+=DOKUM.KR_OP
         ?};
         _temat:=200+_temat;
         __TAB.TEMAT:=_temat;
         __TAB.put()
      ?};
      _loop:=__TAB.next()
   !};
   _result:=exec('serialize_notif','mwa_outlook',_par)
?};
DOKUM.cntx_pop();
_result


\serialize_notif
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   __TAB.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'IDADD',,'DATA',,'TEMAT',,'OPIS',,'LINK',,'GOD',,'GDO',,'CZP',
   );''
";

params_set('resp',_resp);
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);
_resp


\list_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Pobiera informacje o logującym się użytkowniku (kliencie). Informacje na potrzeby autoryzacji na portalu.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

_ndx:=FIRMA.ndx_tmp(,,'A',,,'SYMBOL',,);
FIRMA.cntx_psh();
FIRMA.index(_ndx);
FIRMA.prefix('T');
_result:=exec('serialize_firma','mwa_outlook',_par);
FIRMA.cntx_pop();
FIRMA.ndx_drop(_ndx);
_result


\serialize_firma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   params_set(params_get());
      FIRMA.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'APP_IDEN',,'OPIS',,'URL_MWA',
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);
_resp


\get_kh_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [Merit Soup]
:: OPIS: Pobieranie linka do kontrahenta w aplikacji Merit.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_idadd:=exec('get_option','mwapi',_par,'IDADD').value;

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

KH.cntx_psh();
KH.index('IDADD');
KH.prefix(_idadd);
{? KH.first()
|| _flink:=exec('link_uri','#system',exec('obj_ntab_set','#array',,'LINK',KH.uidref()));
   _result:=exec('serialize_kh','mwa_outlook',_par,3,_flink)
|| _wsenv.add_error('Nie udało się znaleźć kontrahenta.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
KH.cntx_pop();
_result


\epilog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Fomuła końcowa usługi sieciowej
::----------------------------------------------------------------------------------------------------------------------
exec('epilog','mwapi');
~~


\out_firm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Fomuła na wartość początkową XINFO.OUT_FIRM
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
FIRMA.prefix();
_wyn:='';
{? var_press('FIRMA', REF)>0 & type_of(REF.FIRMA)=7 & var_press('APP_IDEN', FIRMA)>0 & FIRMA.seek(REF.FIRMA)
|| _wyn:=FIRMA.APP_IDEN
?};
FIRMA.cntx_pop();
_wyn


\out_firm_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Fomuła na wartość po redagowaniu XINFO.OUT_FIRM
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('WYN');
WYN:=0;
FIRMA.cntx_psh();
FIRMA.prefix();
FIRMA.for_each("{? XINFO.OUT_FIRM=FIRMA.APP_IDEN & FIRMA.A='T' || WYN:=1 ?}");
_wyn:=WYN;
VAR_DEL.delete('WYN');
FIRMA.cntx_pop();
_wyn


\out_firm_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Słownik firmy
::----------------------------------------------------------------------------------------------------------------------
_ndx:=FIRMA.ndx_tmp(,,'A',,,'SYMBOL',,);
FIRMA.cntx_psh();
FIRMA.index(_ndx);
FIRMA.prefix('T');
_sel:=FIRMA.mk_sel('Domyślna firma dla dodatku w Outlook'@,,0,,,,,,'U');
FIRMA.win_fld(_sel,,'APP_IDEN',,,10);
FIRMA.win_fld(_sel,,'OPIS',,,80);
FIRMA.win_act(_sel,0,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
FIRMA.win_sel(_sel);
_wyn:=XINFO.OUT_FIRM;
{? FIRMA.select()
||
   _wyn:=FIRMA.APP_IDEN
?};
FIRMA.cntx_pop();
FIRMA.ndx_drop(_ndx);
_wyn


\edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Fomuła wyświetlania okienka redagowania
::----------------------------------------------------------------------------------------------------------------------
exec('edytuj','#stalesys',XINFO,'OUT',,1);
~~


\get_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Odczytuje parametry dla dodatku Outlook
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
exec('czytaj','#stalesys',,XINFO,'OUT_FIRM','OUT_WYB','OUT_EDIT','OUT_OCR');
{? var_pres('__OUT')>0 || obj_del(__OUT) ?};

__OUT:=tab_tmp(1,
   'OUT_FIRM','STRING[20]',,
   'OUT_WYB','INTEGER',,
   'OUT_EDIT','INTEGER',,
   'OUT_OCR','INTEGER',
);
_first:=0;
_add:="
   __OUT.OUT_FIRM:=_a;
   __OUT.OUT_WYB:={? _b='T' || 1 || 0 ?};
   __OUT.OUT_EDIT:={? _c='T' || 1 || 0 ?};
   __OUT.OUT_OCR:={? _d='T' || 1 || 0 ?};
   __OUT.add()
";

{? exec('authorized','#b__box','ZWS_PAR','ZWS')
||
   _add(XINFO.OUT_FIRM, XINFO.OUT_WYB, XINFO.OUT_EDIT, XINFO.OUT_OCR);
   _result:=exec('serialize_par','mwa_outlook',_par)
|| _wsenv:=exec('wsenv','#mwapi');
   _wsenv.erase();
   _wsenv.add_error('Brak uprawnień do przeglądania parametrów.'@);
   _resp:=_wsenv.to_json();
   _result:=exec('serialize_res','mwapi',_par,_resp)
?};
_result


\serialize_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.42]
:: OPIS: Serializuje dokument/dokumenty sprzedaży
::       Kontekst wywołania: ustawiona dziedzina lub bufor tabeli FAKS
::   WE: _a - buffer - czy wywołanie dla bufora tabeli (1), czy dla całej dziedziny (0)
::       _b - JSON z błędami/informacjami dodatkowymi
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen('out.txt','Uw',,1,1);

_data:="
         __OUT.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
         ,'OUT_FIRM',,'OUT_WYB',,'OUT_EDIT',,'OUT_OCR',
      );''
   ";

params_set('resp',_resp);
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);
_resp


\encode
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
_file:=fopen(null(),'bw',,1,1);
base64('encode',_a,_file);
_file


\decode
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS:
::   WE: _a - file
::----------------------------------------------------------------------------------------------------------------------
_out:=fopen(null(),'bw',,1,1);
{? var_pres('_a')>100
|| _in:=_a.copy()
|| _in:=_a
?};
base64('decode',_in,_out);
_out


\get_dokumk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [Merit Soup]
:: OPIS: Pobiera słownik kategorii.
::   WY: Nazwa kategorii i ref.
::----------------------------------------------------------------------------------------------------------------------
__SVER__:=params_get().SVER;
_par:=params_get();
_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

DOKUMK.cntx_psh();
_result:=exec('serialize_dokumk','mwa_outlook',_par);
DOKUMK.cntx_pop();
_result


\serialize_dokumk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO (RR.xx)
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);
:_mwa_lib:=exec('lib','__mwa');
DOKUMK.index('DOKUMK');
_data:="
   DOKUMK.prefix();
   DOKUMK.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
     ,'IDADD',,'NAZ',
   );
   ''
";

_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1','STATUS:status',,'',_data
);
_resp


\ocr_ext_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.37]
:: OPIS: Sprawdzenie wg rozszerzenia pliku czy może być znacznik DOKUMZ.P_OCR
::   WE: _a nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_ext:=-(exec('split_file_name','#file',_a).ext);
:: OCR przez Businesslink obsługuje obecnie tylko jpg i pdf:
{? _ext='jpg' | _ext='pdf'
|| _wyn:=1
?};
_wyn


\list_zdarzt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Pobiera informacje o logującym się użytkowniku (kliencie). Informacje na potrzeby autoryzacji na portalu.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_wsenv:=exec('wsenv','#mwapi');
_wsenv.erase();

ZDARZT.cntx_psh();
ZDARZT.index('OBJAKO');
ZDARZT.prefix('N',0);
_result:=exec('serialize_zdarzt','mwa_outlook',_par);
ZDARZT.cntx_pop();
_result


\serialize_zdarzt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [20.14]
:: OPIS: Formuła pomocnicza do otrzymania wynikowego xmla
::----------------------------------------------------------------------------------------------------------------------
_resp:=fopen(null,'Uw',,1,1);

_data:="
   _sym:=\"{? ZDARZT.RODZINF().NAZ='Dokument prosty' || '0' || '1' ?}\";
   params_set(params_get());
      ZDARZT.xml_records(params_get().resp,,'data','p',,'noheader=1,norecord=0,nodata=1,indentation=1'
      ,'ZDARZ',,'RODZ:SPOSOB',,'RODZAJ_K',,'RODZINF:DOMYSLNY','NAZ','IDADD',,'SYMBOL',_sym
   );
   ''
";
_tab:=tab_tmp(,'STATUS','STRING[20]','');
_tab.STATUS:='OK'; _tab.add();
params_set('resp',_resp);
_tab.xml_records(_resp,_a.METHOD+'Response',,'p',_a.OUTNSPC,'norecord=1'
   ,'STATUS:status',
   ,'',_data
);
_resp


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 bb209f9862de622718fe32f561156570498cd3637ac612b180a70c706ff3e36a3d0785f62747c0b13b333b0377a615f3d85a74e08aec3edd2e40432302c1adfef5a5cf3a0bde8430c25866d2ede2279fd10c96cf7206ac44817daca7c73a03ee2b8cadae4348c9ca9a259b062bea160685b0dd90c880eede0e8835380f46ac4e
