:!UTF-8
:: (c) Asseco Business Solutions S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ppk_eml.fml [12.51]
:: Utworzony: 25.04.2019
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Funkcje do obsługi alertów i powiadomień w PPK.
::======================================================================================================================


\odbiorcy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.22]
:: OPIS: Formuła ustalająca tabelę ze wskazaniem odbiorców informacji.
::   WE: _a [STRING] - symbol czynności.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_odbiorcy:='';

USERS.cntx_psh();
USERS.index('USR_AKOD');
USERS.prefix('T',);
{? USERS.first()
|| {!
   |? {? USERS.EMAIL<>'' & exec('chk_role','#b__box',USERS.ref(),_a)
      || _odbiorcy+=USERS.EMAIL+';'
      ?};
      USERS.next()
   !}
?};
USERS.cntx_pop();
{? _odbiorcy+1=';'
|| _odbiorcy:=_odbiorcy-1
?};
_odbiorcy


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.22]
:: OPIS: Formuła obsługująca powiadomienia dla użytkowników PPK (wywoływana z czynności).
::   WE: _a [ARRAY] - tablica argumentów, na podstawie której powstanie wiadomość e-mail.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;
_par:=params_get();
_mp:=_par.mp;
_out:=_par.out;
_msg:=_result:=_info:='';

{? exec('fun_perm','ppk')
|| {? _args.RCV=''
   || _result+='- %1\n'['brak odbiorcy'@]
   ?};
   {? _args.BODYH=''
   || _info:='Brak uczestników spełniających kryteria.'@
   ?};
   {? +_result
   || _msg:='%1\n%2'['Brak wymaganych danych umożliwiających wysłanie powiadomienia:'@,_result]
   ?}
|| _msg:=_result:='Wysłanie powiadomienia zablokowane w programie.'
?};

{? +_result
|| {? ~_mp.isService()
   || FUN.emsg(_msg)
   ?};
   _out.RESULT:='BŁĄD';
   _out.BODYH:=_msg
|| {? +_info & ~_mp.isService()
   || FUN.info(_info)
   ?};
   _out.SUB:=_args.SUB;
   _out.TO:=_args.RCV;
   _out.BODYH:=_args.BODYH;
   _out.RESULT:=
      {? _out.BODYH<>''
      || 'OK'
      || 'EMPTY'
      ?}
?};

_mp.save(,_out);
_mp.done();
~~


\nowy_uczestnik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Obsługa zdarzeń PPK.
::   WE:
::   WY:
::  OLD: \nowy_ucz/ppk_eml.fml
::----------------------------------------------------------------------------------------------------------------------
PPK_UMO.cntx_psh();
{? exec('fun_perm','ppk') & exec('init','ppk_umo',date())
|| exec('declare','kalendarz');
   {? var_pres('__KAL')<>type_of(@.CLASS.KALEND)
   || __KAL:=obj_new(@.CLASS.KALEND,'standard')
   ?};

:: Lista nowych uczestników, których należy zapisać do PPK.
   _PPK:=exec('uzu_b','ppk_ucz',1)
:: Przypisanie pustej listy:
|| _PPK:=exec('tab_ucz','ppk_rep')
?};
PPK_UMO.cntx_pop();
_PPK


\informacja_wznowienie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Utworzenie powiadomienia o uczestnikach PPK, którym należy wznowić naliczanie i odprowadzanie wpłat do PPK.
::   WE: [_a][INTEGER] - 0/1 Czy wywołanie z czynności serwisowej? Domyślnie 0 - nie
::   WY:
::  OLD: \info_wzn/ppk_eml.fml
::----------------------------------------------------------------------------------------------------------------------
_service:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_pokazKom:=~_service;
PPK_UMO.cntx_psh();
{? exec('fun_perm','ppk') & exec('init','ppk_umo',date())
|| exec('declare','kalendarz');
   {? var_pres('__KAL')<>type_of(@.CLASS.KALEND)
   || __KAL:=obj_new(@.CLASS.KALEND,'standard')
   ?};

:: Utworzenie listy uczestników, którym należy wznowić naliczanie i odprowadzanie wpłat do PPK.
:: W ramach generowania listy są tworzone komunikaty, oraz wysyłane powiadomienia do osób i uczestników.
   _PPK:=exec('info_wzn','ppk_ucz',,,,,1,,_pokazKom,_service);
   {? _PPK.first()
   || {!
      |? {? _PPK.UWAGI=''
         || _PPK.next()
         || _PPK.del()
         ?}
      !}
   ?}
:: Przypisanie pustej listy:
|| _PPK:=exec('tab_ucz','ppk_rep')
?};
PPK_UMO.cntx_pop();
_PPK


\wznowienie_wplat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Utworzenie powiadomienia o uczestnikach PPK, którym należy wznowić naliczanie i odprowadzanie wpłat do PPK.
::   WE: [_a][INTEGER] - 0/1 Czy pokazywać listę wygenerowanych AWW? Domyślnie: 0 - nie pokazuj
::       [_b][INTEGER] - Ogranicznie rodzaju podmiotu (współpracownika):
::                         0 - wszyscy (osoby i uczestnicy) - domyślnie
::                         1 - tylko uczestnicy
::                         2 - tylko osoby
::       [_c][INTEGER] - 0/1 Czy wywołanie z czynności serwisowej? Domyślnie 0 - nie
::   WY:
::  OLD: \wznow_wp/ppk_eml.fml
::----------------------------------------------------------------------------------------------------------------------
_pokaz:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_ogrPodm:={? var_pres('_b')=type_of(0) || _b || 0 ?};
_service:={? var_pres('_c')=type_of(0) || _c || 0 ?};
_exit:=0;
{? _pokaz
|| _ostrz:=
      'Uwaga! Po wyborze zakresu generowania zostaną wygenerowanie deklaracje automatycznego wznowienia wpłat,\n'
      'a dla osób zostaną założone wpisy w kartotece uczestników PPK.\nOperacja jest nieodwracalna.\n'
      'W celu podglądu listy osób, dla której wygenerowane będą wznowienia należy skorzystać z wydruku '
      '"Lista współpracowników, którym nie wznowiono odprowadzania wpłat".\n\n'
      'Dla kogo generować wznowienie?'@;

   _ogrPodm:=FUN.choice(_ostrz,,'Uczestnicy'@,'Osoby'@,'Wszyscy'@,,,'@Ograniczenie rodzaju współpracowników'@);
   {? _ogrPodm=0
   || _exit:=1
   |? _ogrPodm=3
   || _ogrPodm:=0
   ?}
?};
PPK_UMO.cntx_psh();
{? ~_exit & exec('fun_perm','ppk') & exec('init','ppk_umo',date())
|| exec('declare','kalendarz');
   {? var_pres('__KAL')<>type_of(@.CLASS.KALEND)
   || __KAL:=obj_new(@.CLASS.KALEND,'standard')
   ?};
:: Utworzenie listy uczestników, którym należy wznowić naliczanie i odprowadzanie wpłat do PPK.
   _PPK:=exec('info_wzn','ppk_ucz',,1,1,1,,_ogrPodm,_pokaz,_service);

:: Opcjonalne pokazanie wygenerowanych:
   {? _pokaz & _PPK.first() & _ogrPodm<>2
   || PPK_UZA.cntx_psh();
      PPK_UMO.PPK_UZA();
      _zapNakt:=(exec('parrap_b','ppk_uza',1).ZAP_NAKT='T');
::    ZAP_NAKT - Czy generowanie również dla osób nieaktywnych, które nie były wcześniej uczestnikami
      _kom:=
         'Parametr "%1" ustawiono na "%2".\n'
         'Nieaktywne osoby, które zrezygnowały z PPK przed uczestnictwem%3 zostały uwzględnione podczas generowania.\n'
         'Zmiana wartości parametru możliwa w: Ustawienia i parametryzacja->Parametryzacja->'
         'Pracownicze plany kapitałowe->Rejestracja umów->Parametry raportów->Parametry wznowienia wpłat'@
         ['Automatyczny zapis nieaktywnych osób'@,{? _zapNakt || 'T' || 'N' ?},
          {? _zapNakt || '' || ' nie'@ ?}];
      FUN.info(_kom);
      PPK_UZA.cntx_pop()
   ?};

:: Automatycznie wznowienie wpłat dla uczestników z listy.
   exec('gen_AWW','ppk_wnu',_PPK,_pokaz);

:: Opcjonalne pokazanie wygenerowanych:
   {? _pokaz & _PPK.first()
   || _tyt:='Wynik generowania automatycznego wznowienia wpłat'@;
      _ws:=_PPK.mk_sel(_tyt,,0,'#ppkgenaww',,,,,'U');
      _PPK.win_fld(_ws,,'NAZWISKO',,,-20,,,'Nazwisko'@,,'Nazwisko'@);
      _PPK.win_fld(_ws,,'PIERWSZE',,,-20,,,'Imię'@,,'Imię pierwsze'@);
      _PPK.win_fld(_ws,,'TYPDOK',,,-15,,,'Typ dokumentu tożsamości'@,,'Typ dokumentu tożsamości'@);
      _PPK.win_fld(_ws,,'SYMDOK',,,-20,,,'Symbol dokumentu tożsamości'@,,'Symbol dokumentu tożsamości'@);
      _PPK.win_fld(_ws,,'EMAIL',,,-25,,,'E-mail'@,,'Adres poczty elektronicznej'@);
      _PPK.win_fld(_ws,,'OK',,,-10,,,'Generowanie zakończone powodzeniem?'@,,
                   'Generowanie zakończone powodzeniem [T/N]',2,,"'T'","'N'");
      _PPK.win_fld(_ws,,'OSTRZ',,,-40,,,'Ostrzeżenia'@,,'Ostrzeżenia i uwagi generowania'@);
      _PPK.win_sel(_ws);

      _PPK.select()
   ?}

:: Przypisanie pustej listy:
|| _PPK:=exec('tab_ucz','ppk_rep')
?};
PPK_UMO.cntx_pop();
_PPK


\tre_kom
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Treść informacji z komunikatów formatowana do e-mail.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Treść wiadomości
'<center><h4>%1</h4></center>'
'<p style="font-size:120%%;"><br>%2<br></p>'
'<br>'
'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'
[PPK_KOM.PPK_KRD().OPIS,gsub(PPK_KOM.memo_txt(,1,'TRESC'),'\n','<br>')]


\wplata_transferowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [12.51]
:: OPIS: Lista uczestników, za których należy wysłać deklarację wpłaty transferowej.
::   WE:
::   WY:
::  OLD: \dekl_dwt/ppk_eml.fml
::----------------------------------------------------------------------------------------------------------------------
_dt:=date();
PPK_UMO.cntx_psh();
{? exec('fun_perm','ppk') & exec('init','ppk_umo',_dt)
:: Utworzenie listy uczestników, za których należy wysłać deklarację wypłaty transferowej.
|| _PPK:=exec('dekl_dwt','ppk_ucz',_dt)
:: Przypisanie pustej listy:
|| _PPK:=exec('tab_ucz','ppk_rep')
?};
PPK_UMO.cntx_pop();
_PPK

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:36 a808d60d42e3f798c121e06fc5080530579142efdfccea1d274e02bf307c83a92a74e6f452f8767e6cbe29dbfb3ddd2e0be699631aaee894044593246558ec5826653c38e8cfa5bafe2a57d2e7a2eea7d51b9245a96d839c4c955c3bdbbb287f8aa2270ae9d5460c6dc8cc26ab6970f95b983a102327faab11e992e891daf62f
