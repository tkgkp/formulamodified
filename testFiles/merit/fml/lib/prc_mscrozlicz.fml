:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: prc_mscrozlicz.fml
:: Utworzony: 05.09.2017
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły do obsługi miesięcy rozliczeniowych.
::======================================================================================================================


\a_okrm_wer_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Przed popraw i usuń w okienku WER tabeli miesięcy rozliczeniowych A_OKRM.
::       Sprawdzenie statusu zamknięcia miesiąca do planowania i rozliczenia.
::   WE:
::   WY:
::  OLD: \msc_popraw/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_txt:='Modyfikacja niemożliwa.'@;
{? A_OKRM.S='Z'
|| FUN.info('%1\n%2'['Miesiąc zamknięty.'@,_txt]);
   return(0)
?};
{? A_OKRM.S_PLAN='Z'
|| FUN.info('%1\n%2'['Miesiąc zamknięty do planowania.'@,_txt]);
   return(0)
?};
1


\a_okrm_wer_bfz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Zablokuj planowanie" w okienku WER tabeli A_OKRM.
::       Zablokowanie miesiąca rozliczeniowego do planowania.
::   WE: _a - [INTEGER] (1/0) - wyświetlenie komunikatu o zablokowaniu planowania w miesiącu.
::   WY:
::  OLD: \harm05/okres.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRM.get();
_ref:=A_OKRM.ref();
_res:=exec('lock_A_OKRM','prc_mscrozlicz',_ref);
{? +_res
|| FUN.emsg(_res)
|| {? A_OKRM.S_PLAN='O'
   || {? exec('test_par','parametr',252,'T')
      || exec('getPracZeroMc','okres',A_OKRM.R,A_OKRM.M)
      ?};
      {? {? {? var_pres('_a')=type_of(0) || _a || 1 ?}
         || FUN.ask(
               'Zostanie zablokowane planowanie dla wybranego miesiąca rozliczeniowego.'@+'\n'+
               'Dla współpracowników z odblokowanym planowaniem, nastąpi przepisanie\n'+
               'informacji z bufora planowania do kalendarza współpracownika.'@+'\n'+
               'Kontynuować?'@
            )
         || 1
         ?}
      || exec('endPlan4Msc','okres',A_OKRM.R,A_OKRM.M)
      ?}
   ?}
?};
exec('unlock_A_OKRM','prc_mscrozlicz',_ref);
~~


\a_okrm_wer_bfo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Odblokuj planowanie" w okienku WER tabeli A_OKRM.
::       Odblokowanie zablokowanego miesiąca do planowania.
::   WE: _a - [INTEGER] (1/0) - wyświetlenie komunikatu o odblokowaniu planowania w miesiącu.
::   WY:
::  OLD: \harm05/okres.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRM.get();
_ref:=A_OKRM.ref();
_res:=exec('lock_A_OKRM','prc_mscrozlicz',_ref);
{? +_res
|| FUN.emsg(_res)
|| {? A_OKRM.S_PLAN='Z'
   || {? {? {? var_pres('_a')=type_of(0) || _a || 1 ?}
         || FUN.ask(
               'Odblokowanie planowania dla wybranego miesiąca spowoduje, że również zostaną\n'+
               'odblokowane do planowania wszystkie okresy rozliczeniowe zawierające odblokowany miesiąc.'@+'\n'+
               'Czy na pewno zmienić status planowania zablokowanego miesiąca?'@
            )
         || 1
         ?}
      || {? exec('openPlan4Msc','okres',A_OKRM.R,A_OKRM.M)
         || A_OKRM.get();
            A_OKRM.S:='O';
            A_OKRM.put()
         ?}
      ?}
   ?}
?};
exec('unlock_A_OKRM','prc_mscrozlicz',_ref);
~~


\a_okrm_wer_bfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Zamknij rozliczenie" w okienku WER tabeli A_OKRM.
::       Zamknięcie rozliczenia w miesiącu rozliczeniowym.
::   WE: _a - [INTEGER] (1/0) - wyświetlenie komunikatu o zamknięciu miesiąca do rozliczenia.
::       _b - [DATE] Data, do której będzie zamknięte rozliczenie miesiąca.
::   WY:
::  OLD: \harm05/okres.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRM.get();
{? A_OKRM.S='Z'
|| return(~~)
?};
{? exec('test_par','parametr',252,'T')
|| exec('getPracZeroMc','okres',A_OKRM.R,A_OKRM.M)
?};
_tab:=exec('getPracInMsc','okres',A_OKRM.R,A_OKRM.M,'KO');
{? _tab.first()
|| FUN.emsg('%1\n%2'
      [  'W zamykanym miesiącu rozliczeniowym znajdują się współpracownicy z odblokowanym planowaniem.'@,
         'Należy zablokować planowanie wszystkim współpracownikom przed zamknięciem miesiąca do rozliczenia.'@
      ]
   );
   _win:=_tab.mk_sel('Współpracownicy z odblokowanym planowaniem'@,,,,,,,,'U',,,,,'maximized');
   _tab.win_sel(_win);
   _tab.win_fld(_win,,'T',,,9,,1,'Teczka'@,,'Symbol teczki współpracownika'@);
   _tab.win_fld(_win,,'NAZWISKO',,,30,,1,'Nazwisko'@,,'Nazwisko współpracownika'@);
   _tab.win_fld(_win,,'IMIE',,,20,,1,'Imię'@,,'Imię współpracownika'@);
   _tab.win_fld(_win,,'WYDZIAL',,,15,,1,'Jednostka organizacyjna'@,,'Jednostka organizacyjna współpracownika'@);
   _tab.select();
   return(~~)
?};
{? {? var_pres('_a')=type_of(0) || _a || 1 ?}
|| {? ~FUN.ask('%1\n%2'
         [  'Zostanie zamknięty miesiąc rozliczeniowy oraz zostaną przeniesione dane o przepracowanych godzinach.'@,
            'Kontynuować?'@
         ]
      )
   || return(0)
   ?}
?};
{? var_pres('_b')=type_of(#0)
|| _data:=_b
|| _data:=exec('edit_date','#edit',
      date(A_OKRM.R,A_OKRM.M,A_OKRM.DZ~3),
      'Data'@,
      "cur_tab().VAL~1=A_OKRM.R & cur_tab().VAL~2=A_OKRM.M",
      'Przeniesienie rozliczenia do daty'@
   )
?};

{? _data<>~~
|| __HARM.ZAMK_MIE:=#A_OKRM.ref();
   _okrm_S:=A_OKRM.S;
   _okrm_P:=A_OKRM.S_PLAN;
   A_OKRM.S:='Z';
   A_OKRM.S_PLAN:='Z';
   A_OKRM.put();

   {? exec('zamkmie','prc_mscrozlicz',1,_data~3)
   || A_OKRM.DZ:=_data
   || {? FUN.ask('%1\n%2'
            [  'Czy zmienić status otwartego miesiąca na "Zamknięty"?'@,
               'Dane o godzinach pracy nie zostaną przeniesione do rozliczenia.'@
            ]
         )
      || A_OKRM.DZ:=_data
      || A_OKRM.S:=_okrm_S;
         A_OKRM.S_PLAN:=_okrm_P
      ?}
   ?};
   A_OKRM.put()
?};
__HARM.ZAMK_MIE:=0;
~~


\a_okrm_wer_bft
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Otwórz rozliczenie" w okienku WER tabeli A_OKRM.
::       Otworzenie rozliczenia w miesiącu rozliczeniowym.
::   WE: _a - [INTEGER] (1/0) - wyświetlenie komunikatu o otworzeniu miesiąca do rozliczenia.
::   WY:
::  OLD: \harm05/okres.fml
::----------------------------------------------------------------------------------------------------------------------
A_OKRM.get();
{? A_OKRM.S='Z'
|| {? {? {? var_pres('_a')=type_of(0) || _a || 1 ?}
      || FUN.ask('Czy na pewno zmienić status zamkniętego miesiąca?'@)
      || 1
      ?}
   || A_OKRM.S:='O';
      A_OKRM.put()
   ?}
?};
~~


\lock_A_OKRM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Zakłada blokadę dla rekordu tabeli A_OKRM
::   WE: _a [REFERENCE] - wskazanie na rekord tabeli A_OKRM
::   WY:    [STRING]    - pusty napis w razie powodzenia, lub komunikat błędu
::  OLD: \lock_A_OKRM/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null()) || _a || return('') ?};
_res:='';
_blk_sid:=exec('blk_lock','#table','A_OKRM',_ref,,2);
{? _blk_sid<>A_OKRM.ses_id()
|| A_OKRM.cntx_psh();
   A_OKRM.clear();
   {? A_OKRM.seek(_ref)
   || _res:=
         {? A_OKRM.S_PLAN='Z'
         || 'Miesiąc %1/%2 jest otwierany do planowania%3przez użytkownika \'%4\' na terminalu \'%5\'.'@
            [  $A_OKRM.R,
               $A_OKRM.M,
               {? cli_ver()='mbasic'|| ' ' || '\n'?},
               A_OKRM.ses_info(_blk_sid,'log_name'),
               A_OKRM.ses_info(_blk_sid,'log_tty')
            ]
         || 'Miesiąc %1/%2 jest zamykany do planowania%3przez użytkownika \'%4\' na terminalu \'%5\'.'@
            [  $A_OKRM.R,
               $A_OKRM.M,
               {? cli_ver()='mbasic'|| ' ' || '\n'?},
               A_OKRM.ses_info(_blk_sid,'log_name'),
               A_OKRM.ses_info(_blk_sid,'log_tty')
            ]
         ?}+{? cli_ver()='mbasic' || ' Należy odświeżyć dane i spróbować ponownie.'@ || '' ?}
   ?};
   A_OKRM.cntx_pop()
?};
_res


\unlock_A_OKRM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Zdejmuje blokadę dla rekordu tabeli A_OKRM
::   WE: _a [REFERENCE] - wskazanie na rekord tabeli A_OKRM
::  OLD: \unlock_A_OKRM/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(~~) ?};
exec('blk_unlock','#table','A_OKRM',_ref)


\is_A_OKRM_lock
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Funkcja sprawdza czy w podanym zakresie dat jest nałożona blokada dla miesiąca
::   WE: _a [DATE] - data od
::       _b [DATE] - data do
::   WY: [STRING] - pusty - jeżeli żaden miesiąc nie jest zablokowany
::                - komunikat błędu - jeżeli jest nałożona blokada na choćby jeden miesiąc
::  OLD: \is_A_OKRM_lock/plan_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_data_od:={? var_pres('_a')=type_of(date()) || _a || return('') ?};
_data_do:={? var_pres('_b')=type_of(date()) || _b || return('') ?};
_res:='';

_rok_od:=_data_od~1;_rok_do:=_data_do~1;
_msc_od:=_data_od~2;_msc_do:=_data_do~2;
_rok:=_rok_od; _msc:=_msc_od;
_dalej:=1;
A_OKRM.cntx_psh();
A_OKRM.index('A_OKRMR');
{!
|? A_OKRM.prefix(_rok,_msc);
   {? A_OKRM.first()
   || _res:=exec('lock_A_OKRM','prc_mscrozlicz',A_OKRM.ref());
      {? _res=''
      || exec('unlock_A_OKRM','prc_mscrozlicz',A_OKRM.ref())
      || _dalej:=0
      ?}
   ?};
   _msc+=1;
   {? _msc>12 || _rok+=1; _msc:=1 ?};
   _dalej & ((_rok<_rok_do) | (_rok=_rok_do & _msc<=_msc_do))
!};
A_OKRM.cntx_pop();
_res


\a_okrm_wer_br
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.42]
:: OPIS: Formuła przed akcją "Rekord" w oknie WER tabeli A_OKRM.
::       Ustalenie koloru dla miesiąca zamkniętego.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \kol_rek_mc/okres.fml
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:=
   {? A_OKRM.S_PLAN='O'
   || 'Odblokowany'
   || 'Zablokowany'
   ?};
POLA_GRP.TXT_2:=
   {? A_OKRM.S='O'
   || 'Otwarty'
   || 'Zamknięty'
   ?};

{? _a
|| _gray:='';
   {? A_OKRM.S='Z'
   || _gray+='puZOR'
   |? A_OKRM.S_PLAN='Z'
   || _gray+='puZT'
   || _gray+='ORT'
   ?};
   {? ~__F_ZATR.upr('P')
   || _gray+='G'
   ?};
   A_OKRM.actions_grayed('WER',_gray);
   AreaTitle.setTabWin(UD_DEF,);
   AreaTitle.setTitle()
?};

{? A_OKRM.S='Z'
|| Color.fnd_kol('PRC_MCR#01#01')
|? A_OKRM.S_PLAN='Z'
|| Color.fnd_kol('PRC_MCR#01#02')
?}


\a_okrm_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Formuła po akcji "Rekord" w oknie WER tabeli A_OKRM.
::   WE:
::   WY:
::  OLD: \rekpomc/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=__CHK.record(A_OKRM,,'R','M');
{? _ret<>'' || return(_ret) ?};
{? A_OKRM.R<1900 | A_OKRM.R>3000
|| FUN.emsg('Wprowadzono błędy rok rozliczeniowy.'@);
   return('R')
?};
{? A_OKRM.M<1 | A_OKRM.M>12
|| FUN.emsg('Wprowadzono błędy miesiąc rozliczeniowy.'@);
   return('M')
?};
_ret


\a_okrm_wer_afma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wypełnienie danymi widoku miesięcznego po wcześniejszym wykasowaniu danych dla miesiąca.
::   WE:
::   WY:
::  OLD: \odswiez_view/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('%1\n%2\n%3'['Nastąpi odświeżenie widoku.'@,'Operacja jest czasochłonna.'@,'Kontynuować?'@])
|| return(0)
?};
{? A_OKRM.R & A_OKRM.M
|| R_SZYCH.index('R_SZROK');
   R_SZYCH.prefix(A_OKRM.R,A_OKRM.M);
   do();

:: Wykasowanie danych z wybranego okresu rozliczeniowegos
   {? R_SZYCH.first() || {! |? R_SZYCH.del() !} ?};

:: Odtworzenie danych w wybranym miesiącu rozliczeniowym
   {? R_SZYCH.size()
   || undo();
      FUN.emsg('%1\n%2'['Akcja zakończyła się niepowodzeniem.'@,'Wszystkie zmiany zostały anulowane.'@]);
      end();

      return(0)
   || R_KWGODZ.cntx_psh();
      R_PRACDN.cntx_psh();
      MASK.Use('R_KWGODZ',A_OKRM.R,A_OKRM.M);
      MASK.Use('R_PRACDN',A_OKRM.R,A_OKRM.M);
      R_SZYCH.index('R_TECH');
      exec('add_view','prc_view',A_OKRM.R,A_OKRM.M);
      R_PRACDN.cntx_pop();
      R_KWGODZ.cntx_pop();
      end();
      FUN.emsg('Zakończono odświeżanie widoku danych rozliczenia czasu pracy.'@)
   ?}
?};
1


\prc_mcr_view_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki prc_mcr_view.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);
_add(_TAB,'formCB@panel','Forma współpracy'@);

_TAB


\a_okrm_wer_afmw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyświetla okienko z widokiem godzin przepracowanych i nieobecności.
::   WE:
::   WY:
::  OLD: \sel_szych/rcp_view.fml
::----------------------------------------------------------------------------------------------------------------------
_loop:=1;
{!
|? _loop
|! _inTerm:=
      {? ~exec('interm','#system')
      || exec('pxx_widok_uproszczony','pkd','PRC_MSM')
      || 1
      ?};
   UD_TYP.cntx_psh();
   UD_SCH.cntx_psh();
   R_SZYCH.cntx_psh();
   N.cntx_psh();
   G.cntx_psh();
   R_KWGODZ.cntx_psh();
   R_PRACDN.cntx_psh();

   {? exec('domyslny','schemat','PODZORG')
   || _mode:='maximized';

:: Odświeżenie danych do widoku dni pracy, jeżeli są zapisy w danym miesiącu.
      MASK.Use('R_KWGODZ',A_OKRM.R,A_OKRM.M);
      MASK.Use('R_PRACDN',A_OKRM.R,A_OKRM.M);
      R_SZYCH.index('R_TECH');
      exec('add_view','prc_view',A_OKRM.R,A_OKRM.M,R_SZYCH.first());
      R_PRACDN.first();
      R_SZYCH.prefix(exec('ref_firma','ustawienia'),A_OKRM.R,A_OKRM.M);
      {? R_SZYCH.first()
      || {!
         |? R_SZYCH.P();
            {? P.DZA>date(A_OKRM.R,A_OKRM.M,0)
               |
               (P.DZ<>#0 & P.DZ<date(A_OKRM.R,A_OKRM.M,1))
            || R_SZYCH.del()
            || R_SZYCH.next()
            ?}
         !}
      ?};

:: Odświeżenie widoku odbiorów, kwalifikacji czasu pracy i wniosków o czas wolny.
      {? R_SZYCH.first()
      || {!
         |? exec('ustaw_odbiory','prc_view');
            exec('WerGodz','prc_view');
            R_SZYCH.next()
         !}
      ?};
      R_SZYCH.clear();

:: Badania okresowe.
      exec('updateBadania','prc_view');

:: Przygotowanie widoku dla nieobecności.
      __NB:=exec('tab_NB','prc_view');

   {? ~_inTerm ||
:: Główne okno widoku
      _wnd:=P.grp_make(,
         "  exec('load','#desktop','selektor','prc_mcr_view.dsk',,,,,exec('prc_mcr_view_dsk_pl','prc_mscrozlicz'),1);
            params_exec('stdor_bf','pkd','T');
            grp_disp(UD_DEF,'NAW_MIN',1,1);
            1
         ",'a_okrm_godziny',,,
         "  params_exec('stdor_oc','pkd')
         ",,,
::       rozkład
         'jterm'
      );

:: Utworzenie kontrolki selektora schematu
      exec('create','#desktop',P,'selektor',_wnd,2);

:: Drzewko struktury organizacyjnej
      P.grp_splt(_wnd,,'horizontal','panel');
      P.grp_sel(_wnd,UD_DEF,'NAW_MIN',,
         "  params_set(_par:=params_get());
            exec('f_set_r_szych','prc_mscrozlicz');
            grp_disp(R_SZYCH,_par.cfg.nav.main,1,1)
         ",,,9,
         "  params_exec('stdor_def_bs','pkd',_a)
         ",
         "  params_exec('stdor_def_as','pkd',_a)
         ",
         0,0,_mode,'NAW_MIN'
      );

:: Współpracownicy
      P.grp_splt(_wnd,'panel','vertical','right');
      P.grp_edit(_wnd,P,'INFO_P',,,,,,_mode);
      P.grp_splt(_wnd,'right','horizontal','pracownik')
      ||
         _wnd:=P.grp_make(,
                        "  UD_DEF.cntx_psh();
                           _sch:=exec('domyslny','schemat','PODZORG');
                           _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
                           P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
                           UD_DEF.seek(P_FILTER.UD_DEF);
                           params_exec('stdin_bf','pkd','T');
                           1
                        ",'a_okrm_godziny',,,
                        "  UD_DEF.cntx_pop();
                           params_exec('stdin_oc','pkd')
                        "
                        )
      ?};
      _wer:=exec('init_win_R_SZYCH','prc_mscrozlicz',_inTerm);
      P.grp_sel(_wnd,R_SZYCH,_wer,,
         "  params_set(_par:=params_get());

:: Ustawienie kontekstu przeglądania pokaż/ukryj zakładki czynności
            {? ~exec('dom_empty','#table',R_SZYCH)
            || REF.P:=P.ref();
               REF.OSOBA:=P.OSOBA;
               _saz:=_paz:=0;
               F_ZATRA.cntx_psh();
               F_ZATRA.index('ACT_SYM');
               F_ZATRA.prefix(P.F_ZATR);
               _map:=_par.cfg.map;
               _map.cntx_psh();
               {? _map.first()
               || {!
                  |? _on:=
                        (_map.MOD & _map.ACT_MOD<>'' & F_ZATRA.find_key(_map.ACT_MOD,)) |
                        (_map.VIEW & _map.ACT_VIEW<>'' & F_ZATRA.find_key(_map.ACT_VIEW,));
                     {? _on
                     || tab_show(_map.NRTAB,'bottom');
                        {? ~_paz
                        || _paz:=_map.NRTAB
                        ?}
                     || tab_hide(_map.NRTAB,,'bottom')
                     ?};
                     {? _map.NRTAB=_par.cfg.atab
                     || _saz:=_on
                     ?};
                     _map.next()
                  !}
               ?};
               _map.cntx_pop();
               F_ZATRA.cntx_pop();
               {? _saz
               || _atab:=_par.cfg.atab
               || _atab:=_paz;
                  _par.cfg.atab:=_paz
               ?};
               tab_sel(_atab,'bottom');
               _id:='F_ZATR';
               {? P_FILTER.F_ZATR=null() & P.F_ZATR<>__PARSES.getVal(_id).REF
:: Forma współpracy: Wszystkie dostępne
               || _args:=__PARSES.args(_id);
                  _args.REF:=P.F_ZATR;
                  __PARSES.setVal(_id,_args)
               ?}
            || tab_hide(,1,'bottom');
               REF.P:=REF.OSOBA:=null()
            ?};
            {? P.seek(REF.P,,,1)
            || OSOBA.seek(REF.OSOBA,,,1)
            ?};
            _inTerm:=_par.cfg.extra.inTerm;
            {? ~_inTerm || mb_exec('GRP_EDISP_P_INFO_P') ?};

:: Odrysowanie obszaru zakładek
            exec('pkd_refresh','pkd')
         ",,,9,
         "  params_set(_par:=params_get());
            _par.cfg.nav.main:=_par.cfg.extra.WER;
            exec('f_set_r_szych','prc_mscrozlicz');
            R_SZYCH.f_seek(_par.cfg.extra.REF)
         ",
         "  _par:=params_get();
            _par.cfg.extra.REF:=R_SZYCH.ref();
            params_exec('stdor_p_as','pkd',_a)
         ",0,,_mode,_wer
      );

      P.grp_splt(_wnd,,'horizontal','bottom');
      _cfg:=exec('pkd_conf','pkd','PRC_MCR',P,_wnd,_wer,'NAW_MIN');
      _cfg.extra:=obj_new('REF','WER','R_ODP_OK','inTerm');
      _cfg.extra.REF:=null();
      _cfg.extra.WER:=_wer;
      _cfg.extra.R_ODP_OK:=0;
      _cfg.final:='T';
      _cfg.extra.inTerm:=_inTerm;

:: Wyświetlenie okna z rozliczanymi godzinami pracy w miesiącu.
      exec('msc_conf_dp','prc_mscrozlicz',_cfg);
      exec('msc_conf_nb','prc_mscrozlicz',_cfg);
      exec('pkd_conf_bdo','pkd',_cfg);
      exec('msc_conf_gd','prc_mscrozlicz',_cfg);
      exec('pkd_conf_r_wzcz','pkd',_cfg);
      exec('prc_conf_dpok','prc',_cfg);
      exec('msc_conf_dodb','prc_mscrozlicz',_cfg);
      exec('prc_conf_dodo','prc',_cfg);
      exec('prc_conf_dnad','prc',_cfg);
      exec('ppl_conf_ppsg','ppl',_cfg);
      exec('prc_conf_druc','prc',_cfg);
      exec('prc_conf_dprz','prc',_cfg);
      exec('prc_conf_dpsy','prc',_cfg);
      exec('pkd_conf_kart_dod_szkolbhp','pkd',_cfg);

      exec('pkd_conf_end','pkd',_cfg);
      params_set('cfg',_cfg);

      P.cntx_psh();
      P.win_edit('RED_P');
      H.cntx_psh();
      H.use('_hist');
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
      P.win_sel(_cfg.window);
      ($_cfg.prolog)();
      AreaTitle.setTabWin(P,_cfg.window);
      AreaTitle.setTitle();
      _loop:=P.select();
      ($_cfg.epilog)();
      H_UM.cntx_pop();
      H.cntx_pop();
      P.cntx_pop();
      P.win_del(_cfg.window);
      R_SZYCH.win_del(_wer);
      obj_del(_cfg);
      exec('otworz_h_um','pracownik')
   || _loop:=0
   ?};

   VAR_DEL.delete('__NB');
   R_PRACDN.cntx_pop();
   R_KWGODZ.cntx_pop();
   G.cntx_pop();
   N.cntx_pop();
   R_SZYCH.cntx_pop();
   UD_SCH.cntx_pop();
   UD_TYP.cntx_pop()
!};
~~


\init_win_R_SZYCH
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Zainicjowanie okna do wyświetlenia współpracowników
::   WE: _a [INTEGER] - czy okienko ma posiadać przycisk - Parametry pracy (InTerm)
::   WY: _wer - okno do wyświetlania współpracowników
::----------------------------------------------------------------------------------------------------------------------
_upr:={? var_pres('_a')<>type_of(0) || 0 || _a ?};
_lastDay:=(date(A_OKRM.R,A_OKRM.M,0)~3);
_dl:=15+((31-_lastDay)*3);
_wer:=R_SZYCH.mk_sel('Widok miesięczny'@,,,'widok_mc'+($_lastDay),,,,,'U',,,,0,'maximized');
R_SZYCH.win_fld(_wer,,'P','T',,10,,1,'Teczka'@,,'Teczka współpracownika'@);
R_SZYCH.win_fld(_wer,P,'OSOBA','NAZWISKO',,_dl,,1,'Nazwisko'@,,'Nazwisko współpracownika'@);
R_SZYCH.win_fld(_wer,P,'OSOBA','PIERWSZE',,15,,1,'Imię'@,,'Imię współpracownika'@);
R_SZYCH.win_fld(_wer,,'DWBO',,,-10,,1,'Badanie okresowe'@,,'Termin ważności badania okresowego'@);
R_SZYCH.win_fld(_wer,,'NG',,,-5,,1,'Nadgodziny'@,,'Czy wystąpiły nadgodziny (T/N)'@,2,,"'T'","'N'");
R_SZYCH.win_fld(_wer,,'OK',,,-5,,1,
   'Bez błędów'@,,'Czy wystąpiły błędy pomiędzy planem i wykonaniem (T/N)'@,2,,"'T'","'N'"
);
:: Pola w oknie dla każdego dnia miesiąca.
{! _ii:=1.._lastDay
|! R_SZYCH.win_fld(_wer,,'DZ'+(('0'+($_ii))+2),,,3,,1,$_ii,,'%1 dzień miesiąca rozliczeniowego'@[$_ii])
!};

:: Formuły do wyświetlenia ikon w oknie dla każdego dnia miesiąca.
{! _ii:=1.._lastDay
|! R_SZYCH.win_fml(_wer,,'DZ'+(('0'+($_ii))+2),,'ICON_BEFORE',
      "exec('formulaICO','prc_view',date(A_OKRM.R,A_OKRM.M,#(cur_afld()+2)),cur_afld()+2,R_SZYCH.P().DZ,R_SZYCH.ref())"
   )
!};

R_SZYCH.win_act(_wer,,'Formuła','Przełożeni'@@,,'Wyświetlenie przełożonych współpracownika'@,
   "  exec('show_kier','stanprac',R_SZYCH.P)
   ",,,,,,'P');
R_SZYCH.win_act(_wer,,'Formuła','Uwagi'@@,,'Zdarzenia związane z czasem pracy w podanym miesiacu'@,
   "  exec('uwagi','prc_view',R_SZYCH.P)
   ",,1,,,,'U');
R_SZYCH.win_act(_wer,,'Formuła','Weryfikuj'@@,,'Sprawdzenie czasu przepracowanego względem planu'@,
   "  exec('weryfikuj','prc_view')
   ",,,,,,'W');
R_SZYCH.win_act(_wer,,'Wyświetl',,,,"params_exec('wyswietl_a','zs_def')");
{? _upr
|| R_SZYCH.win_act(_wer,,'Formuła','Parametry pracy'@@,,'Zmiana zakresu prezentowanych danych'@,
      "  params_exec('prc_mcr_parametry','prc_mscrozlicz',1)
      ",,,,,,'Y'
   );
   R_SZYCH.win_act(_wer,1,'Formuła','Parametry pracy'@@,,'Zmiana zakresu prezentowanych danych'@,
      "  params_exec('prc_mcr_parametry','prc_mscrozlicz',1)
      ",,,,,,'Y'
   );
   {? ~exec('interm','#system')
   || R_SZYCH.win_act(_wer,,'Formuła','W&idok rozbudowany'@@,,'Zmiana widoku na rozbudowany'@,
         "  params_exec('prc_msc_mies_w_b','prc_mscrozlicz',1)
         ","params_exec('sel_exit_', '#window')",,,,,'I'
      );
      R_SZYCH.win_act(_wer,1,'Formuła','W&idok rozbudowany'@@,,'Zmiana widoku na rozbudowany'@,
         "  params_exec('prc_msc_mies_w_b','prc_mscrozlicz',1)
         ","params_exec('sel_exit_', '#window')",,,,,'I'
      )
   ?};
   R_SZYCH.win_btn(_wer,'text=%1,panel=top,align=begin'['Parametry prac&y'@],'menu:Y')
|| R_SZYCH.win_act(_wer,,'Formuła','W&idok uproszczony'@@,,'Zmiana widoku na uproszczony'@,
      "  params_exec('prc_msc_mies_w_b','prc_mscrozlicz',1)
      ","params_exec('sel_exit_', '#window')",,,,,'I'
   );
   R_SZYCH.win_act(_wer,1,'Formuła','W&idok uproszczony'@@,,'Zmiana widoku na uproszczony'@,
      "  params_exec('prc_msc_mies_w_b','prc_mscrozlicz',1)
      ","params_exec('sel_exit_', '#window')",,,,,'I'
   )
?};
R_SZYCH.win_act(_wer,,'Formuła','Legenda'@@,,'Wyświetlenie okna legendy'@,
   "  exec('legenda','color','PRC_VIEW#0','PRC#02')
   ",,,,,,'L',,'target=window'
);

_wer


\f_set_r_szych
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Przed obsługą listy współpracowników w oknie funkcji widok miesięczny
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_TAB:=sql(
   'select P.REFERENCE as REF from P where '+
   exec('filtr_p','schemat',P_FILTER.F_ZATR().KOD,'T',P_FILTER.STATUS)+
   ' order by REF',
:  ograniczenie widoku
   exec('ref_firma','ustawienia'),
   exec('szukaj_udb_sys','schemat','PRC',UD_TYP.SYMBOL),
   OPERATOR.USER,
   UD_SCH.ref(),
   '\''+UD_DEF.SCIEZKA+'%\''
);

{? R_SZYCH.sel_size()
|| R_SZYCH.sel_adel()
?};
_cur:=R_SZYCH.ref();
R_SZYCH.clear();
{? R_SZYCH.f_active() || R_SZYCH.f_clear() ?};

R_SZYCH.f_set('OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',,
   'R_SZYCH.ROK=:_a and R_SZYCH.MC=:_b and R_SZYCH.P in (select :_c.REF from :_c)',
   A_OKRM.R,A_OKRM.M,_TAB
);
&_TAB;
R_SZYCH.f_seek(_cur) | R_SZYCH.f_first()


\msc_conf_dp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Kwalifikacja czasu pracy.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_PRACDN,'R_PRACDN','WER',,,'PRC_MCR_PWMC','PRC_MCR_PWMC',R_SZYCH)
|| return()
?};

_a.prolog+="R_PRACDN.cntx_psh();";
_a.epilog+="R_PRACDN.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Przepracowane dni'@,
   "  exec('R_szych_AF','prc_view');
      grp_edisp(R_ZM,'DISP')
   ",,,,
   $($_a.bs)(_a.map,
      "  MASK.Use('R_PRACDN',A_OKRM.R,A_OKRM.M);
         R_PRACDN.prefix(P.ref());
         {? ~R_SZYCH.f_size
         || return('#disable')
         ?}
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_pracdn',',70%');
_a.table.grp_edit(_a.window,R_ZM,'DISP',,,,,,_a.mode,'DISP')


\msc_conf_nb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: arKc [18.02]
:: OPIS: Nieobecności wybranego współpracownika w widoku miesięcznym (także nieobecności ad-hoc).
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,__NB.TAB,__NB.NDX,__NB.WER,,,'PRC_MCR_PWMC','PRC_MCR_PWMC',R_SZYCH)
|| return()
?};

_a.prolog+="N.cntx_psh();N_AH.cntx_psh();";
_a.epilog+="N.cntx_pop();N_AH.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Nieobecności'@,,,,,
   $($_a.bs)(_a.map,
      "  exec('R_szych_N','prc_view');
         {? ~R_SZYCH.f_size
         || return('#disable')
         ?}
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode
)


\msc_conf_gd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: arKc [18.02]
:: OPIS: Godziny wybranego współpracownika w widoku miesięcznym.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,G,'MSCDKW','WERA',,,'PRC_MCR_PWMC','PRC_MCR_PWMC',R_SZYCH)
|| return()
?};

_a.prolog+="G.cntx_psh();CON_KG.cntx_psh();";
_a.epilog+="G.cntx_pop();CON_KG.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Rozliczone godziny'@,,,,,
   $($_a.bs)(_a.map,
      "  UD_POM.SKID_MB:=KST_PAR.SKID_MB;
         ZMIENNE.RODZAJ:='H';
         EDIT_VAR.KOD_DOK:='G';
         exec('ustaw_maski','godziny',A_OKRM.R,A_OKRM.M);

         G.index('MSCKW_KK');
         G.prefix(P.ref(),A_OKRM.M,'G');
         G.index('MSCKW_KD');
         G.prefix(P.ref(),A_OKRM.M,'G');
         G.index('MSCDKW');
         G.prefix(P.ref(),A_OKRM.M,'G');

         exec('CON','object');
         exec('ustaw_okno','godziny','PRC_MCR_PWMC');
         {? ~R_SZYCH.f_size
         || return('#disable')
         ?}
      "
   ),
   $($_a.as)(_a.map),
   ,,_a.mode,'WERA'
)


\msc_conf_dodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Wprowadzenie wniosków o odbiór nadgodzin.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,R_WO,'PRM','WER','','','PRC_CZP_DODB','PRC_CZP_DODB',P)
|| return()
?};

_a.prolog+="R_WO.cntx_psh();R_WYK.cntx_psh();R_WO.win_edit('RED');";
_a.epilog+="R_WO.cntx_pop();R_WYK.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Wnioski o odbiór'@,
   "  params_set(params_get());
      exec('conf_dodb_af','prc')
   ",,,,
   $($_a.bs)(_a.map,
      "  R_WO.prefix(P.ref(),A_OKRM.R,A_OKRM.M)
      "
   ),
   $($_a.as)(_a.map),,,_a.mode
);

_a.table.tab_splt(_a.window,,'vertical','r_wyk');
_a.table.grp_sel(_a.window,R_WYK,'WER',,,,9,5,,,,,_a.mode)


\zamkmie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2006]
:: OPIS: Przeniesienie do rozliczenia danych o przepracowanych godzinach. Dla wszystkich pracowników.
::   WE: _a - [INTEGER] (1) funkcja wołana poprzez zamknięcie miesiąca rozliczeniowego.
::       _b - [DATE] Data, do której przenosimy dane o czasie pracy - przy zamykaniu miesiaca _a=1.
::   WY: 1 - poprawnie, 0 z błędem
::  OLD: \zamkmie/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_a:={? var_pres('_a')<>type_of(0) || 0 || _a ?};
{? ~KST.R_KG
|| FUN.info('%1\n%2'
      [  'Nie zostały wprowadzone informacje o kwalifikacji godzin w stałych systemu.'@,
         'Funkcja nie może kontynuować działania.'@
      ]
   );
   return(0)
?};
__HARM.set_par();
{? ~_a
|| {? ~FUN.ask('%1\n%2'
         [  'Funkcja przenosi dane o przepracowanych godzinach do kartoteki rozliczenia godzin.'@,
            'Czy na pewno kontynuować?'@
         ]
      )
   || return(0)
   ?};
   undefine();
   define('ROK',date()~1,'Rok'@,,,4,-1);
   define('MC',date()~2,'Miesiąc'@,,,2,-1);
   define('DZ',20,'Dzień, do którego przenieść dane.'@,,,2,-1);
   {? ~def_edit(
      "  {? DEFINE.ROK>0
         || {? DEFINE.MC>0 & DEFINE.MC<13
            || {? DEFINE.DZ>0 & date(DEFINE.ROK,DEFINE.MC,0)~3>=DEFINE.DZ || 1 || 'DZ' ?}
            || 'MC'
            ?}
         || 'ROK'
         ?}
      ",'Proszę wprowadzić dane.'@)
   || undefine();
      return(0)
   ?};
   _rok:=DEFINE.ROK;
   _mc:=DEFINE.MC;
   _dz:=DEFINE.DZ;
   undefine()
|| _rok:=A_OKRM.R;
   _mc:=A_OKRM.M;
   _dz:={? var_pres('_b')=type_of(1) || _b || date(_rok,_mc,0)~3 ?}
?};

{? exec('lista_sum_zamk','godziny',_rok,_mc,1)
|| return(0)
?};
_data_od:=date(_rok,_mc,1);
{? _a
|| A_OKRM.cntx_psh();
   A_OKRM.prefix();
   {? A_OKRM.prev() & A_OKRM.S='Z' & A_OKRM.DZ<date(A_OKRM.R,A_OKRM.M,0)
   || _data_od:=A_OKRM.DZ+1
   ?};
   A_OKRM.cntx_pop()
?};
{? ~exec('wer_zatw','prc_mscrozlicz',_data_od,date(_rok,_mc,_dz),1) || return(0) ?};
_r_nast:=_rok;
_m_nast:={? _mc=12 || _r_nast+=1; 1 || _mc+1 ?};
A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
A_OKRP_M.index('A_OKRPM');
P.cntx_psh();
P.index('PRACOIP');
P.prefix(exec('firma','ustawienia'));
:: Umożliwienie zwrotu dodatku gdy nie może nastapić zaplanowany odbiór przekroczeń dobowych
:: Weryfikacja odbiorów za przekroczenia dobowe
_tab:=exec('zwrot_bufor','godziny');
exec('zwrot_odbioru','prc_mscrozlicz',_tab,_rok,_mc);
{? exec('zwrot_zapisz','prc_mscrozlicz',_tab)
|| {? ~FUN.ask('%1\n%2\n%3'
         [  'Istnieją odbiory w dni wolne, które nie zostały zaznaczone do wypłaty.'@,
            'Należy zmienić dzień odbioru lub zaznaczyć wypłatę dodatku.'@,
            'Czy mimo to kontynuować procedurę zamknięcia miesiąca?'@
         ]
      )
   || A_OKRP.cntx_pop();
      P.cntx_pop();
      return(0)
   ?}
?};

{? P.first()
|| PROGRESS.set(P.size(),'Trwa aktualizacja rozliczenia godzin z modułu Harmonogramy.'@);
   {!
   |? _blokuj:=0;
      {? _a
      || A_OKRP.prefix(P.ref());
         {? A_OKRP.first()
         || {!
            |? {? A_OKRP.OD<=date(_rok,_mc,_dz) & A_OKRP.DO>=date(_rok,_mc,1)
               || A_OKRP_M.prefix(A_OKRP.ref(),_rok,_mc);
                  {? A_OKRP_M.first()
                  || {? A_OKRP_M.STATUS='X' || _blokuj:=1 ?}
                  ?}
               ?};
               ~_blokuj & A_OKRP.next()
            !}
         ?}
      ?};
      {? ~_blokuj
      || exec('del_godz','godziny',_rok,_mc);
:: Usuwanie w następnym miesiącu rozliczeniowym, godzin pochodzących z bieżącego miesiąca ale nie rozliczonych
         exec('del_godz','godziny',_r_nast,_m_nast,0,date(_rok,_mc,1),date(_rok,_mc,0));
         _okr:=null();
         _iter:=1;
         {!
         |? _okr:=exec('find_okr','grafik',P.ref(),date(_rok,_mc,_iter),'okr');
            {? _okr=null() || _iter+=1; _iter<=_dz || 0 ?}
         !};
         A_OKR.cntx_psh();
         A_OKR.prefix();
         _rozn:=0;
:: Znalezienie przekroczeń dla niepełnoetatowca - jeśli nastepuje zamiana ze składnika 64 na składnik 65
         {? __HARM.KW_AUTO || exec('przekroczenie','prc_mscrozlicz',_rok,_mc,_rok,_mc) ?};
         {? _a & _okr<>null() & A_OKR.seek(_okr) & A_OKR.OD<=_data_od & _data_od<date(_rok,_mc,1)
         || exec('akt_godz','godziny',_data_od~1,_data_od~2,_rok,_mc,,,_data_od,date(_data_od~1,_data_od~2,0));
            _rozn:=exec('roznica','prc_rozlicz',A_OKR.OD,A_OKR.DO)
         ?};
         A_OKR.cntx_pop();
         exec('akt_godz','godziny', _rok, _mc,,,,,date(_rok,_mc,1),date(_rok,_mc,_dz));
         {? _rozn=0 || _rozn:=1 ?};
         {! _iter:=1.._rozn
         |! exec('akt_godz','godziny', date(_rok,_mc-_iter,0)~1, date(_rok,_mc-_iter,0)~2,_rok,_mc,,1)
         !}
      ?};
      PROGRESS.next();
      P.next()
   !};
   PROGRESS.close();
   exec('zwrot_dodatek','prc_mscrozlicz',_tab,_rok,_mc);
   _tab.prefix();
   {? _tab.first()
   || _tab.select(,,,'Wr')
   ?}
?};

echo();
P.cntx_pop();
A_OKRP.cntx_pop();
{? date(_rok,_mc,_dz)<>date(_rok,_mc,0)
|| A_OKRM.cntx_psh();
   A_OKRM.prefix(_r_nast,_m_nast);
   {? A_OKRM.first() & A_OKRM.S='Z'
   || A_OKRM.S:='O';
      {? A_OKRM.put()
      || _txt:=
            'Następny miesiąc (%1) został otwarty.'@[date(_r_nast,_m_nast,1)$8]+'\n'+
            'Aby prawidłowo rozliczyć godziny pracy po dacie %1,\nnależy ponownie zamknąć miesiąc %2.'@
               [  $date(_rok,_mc,_dz),date(_r_nast,_mc_nast,1)$8
               ]
      || _txt:=
            'Nie udało się otworzyć miesiąca: %1.'@[date(_r_nast,_m_nast,1)$8]+'\n'+
            'Aby prawidłowo rozliczyć godziny pracy po dacie %1,\nnależy ponownie otworzyć i zamknąć miesiąc %2.'@
               [  $date(_rok,_mc,_dz),date(_r_nast,_m_nast,1)$8
               ]
      ?};
      FUN.emsg(_txt)
   ?};
   A_OKRM.cntx_pop()
?};
1


\wer_zatw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GU 2012.07.23
:: OPIS: Formuła sprawdza czy w okresie rozliczeniowym są jakieś niezatwierdzone godziny w buforze planowania.
:        Jeżeli tak, to wyświetla listę w oknie wertowania i umożliwia zatwierdzenie.
:        Zwraca 1 gdy wszystkie zostały zatwierdzone, a 0 gdy pozostały jakieś godziny niezatwierdzone.
:        Jeżeli podane zostaną argumenty _a i _b, to funkcja działa dla wskazanego w nich okresu.
:        Jeżeli pominiemy argumenty, lub jeden z nich, funkcja zapyta o rok i miesiąc.
::   WE: [_a] - Data od lub rok.
:        [_b] - Data do lub miesiąc.
:        [_c] - Zestaw komunikatów. 0 - wywołanie z funkcji "Weryfikacja ...."  1 - wywołanie podczas zamykania okresu.
:        [_d] - wskazanie na pracownika (opcjonalnie) - jeśli podane to będzie sprawdzane tylko dla tego pracownika.
:        [_e] - data badania (opcjonalnie) - jeśli podana bedzie sprawdzany tylko ten dzień.
: WY:    0 - pozostały godziny niezatwierdzone
:        1 - wszystkie godziny w okresie są zatwierdzone (nie było niezatwierdzonych lub użytkownik teraz zatwierdził )
::  OLD: \wer_zatw/okres.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=_do:=date();
{? var_pres('_a')<=0 | var_pres('_b')<=0
|| VAR_EDIT.D_OD:=date(,,1);
   VAR_EDIT.D_DO:=date();
   {? AREATIT.AREA='PRC_MCR'
   || VAR_EDIT.D_OD:=date(A_OKRM.R,A_OKRM.M,1);
      VAR_EDIT.D_DO:=date(A_OKRM.R,A_OKRM.M,0)
   ?};
   VAR_EDIT.win_edit('ZAKR_DAT');
   VAR_EDIT.efld_opt('ZAKR_DAT','mark=1',,'D_OD');
   VAR_EDIT.efld_opt('ZAKR_DAT','mark=1',,'D_DO');
   {? VAR_EDIT.edit("exec('chk_VAR_EDIT_ZAKR_DAT','prc')")
   || _od:=VAR_EDIT.D_OD;
      _do:=VAR_EDIT.D_DO
   || return(0)
   ?};
   VAR_EDIT.efld_opt('ZAKR_DAT','mark=0',,'D_OD');
   VAR_EDIT.efld_opt('ZAKR_DAT','mark=0',,'D_DO')
|| {? var_pres('_a')=1 & var_pres('_b')=1 & _b>0 & _b<13 & _a>2000 & _a<2100
   || _od:=date(_a,_b,1);
      _do:=date(_a,_b,0)
   |? var_pres('_a')=type_of(date()) & var_pres('_b')=type_of(date())
   || _od:=_a;
      _do:=_b
   || return(0)
   ?}
?};
{? var_pres('_c')<>1 || _c:=0 ?};
_p_ref:={? var_pres('_d')=type_of(null()) || _d || null() ?};
_data:={? var_pres('_e')=type_of(date()) || _e || date(0,0,0) ?};

_NZ:=tab_tmp(2,
   'NAZWISKO','STRING[30]','Nazwisko współpracownika',
   'IMIE','STRING[20]','Imię współpracownika',
   'P_REF','STRING[16]','Wskazanie na współpracownika',
   'WYDZIAL','STRING[16]','Wydział',
   'T','STRING[9]','Nr teczki',
   'DATA','DATE', 'Data',
   'DATAW','INTEGER','Data wyjscia',
   'WE','TIME', 'Wejście',
   'WY','TIME', 'Wyjście',
   'CZAS','TIME','Czas pracy',
   'SZEF','STRING[60]','Przełożony',
   'SZEF_REF','STRING[16]','Wskazanie na przełożonego',
   'KAL_BUFF','STRING[16]','Wskazanie na KAL_BUFF'
);
_wer:=_NZ.mk_sel('',,0,'',,,,,'U',,,,,'maximized');
_NZ.win_fld(_wer,,'NAZWISKO',,,15,,1,'Nazwisko'@,,'Nazwisko współpracownika'@);
_NZ.win_fld(_wer,,'IMIE',,,15,,1,'Imię'@,,'Imię współpracownika'@);
_NZ.win_fld(_wer,,'WYDZIAL',,,12,,1,'Jednostka organizacyjna'@,,'Jednostka organizacyjna współpracownika'@);
_NZ.win_fld(_wer,,'T',,,9,,1,'Teczka'@,,'Symbol teczki współpracownika'@);
_NZ.win_fld(_wer,,'DATA',,,10,,1,'Data'@,,'Data zdarzenia'@);
_NZ.win_fld(_wer,,'WE',,,10,,1,'Wejście'@,,'Godzina wejścia'@);
_NZ.win_fld(_wer,,'WY',,,10,,1,'Wyjście'@,,'Godzina wyjścia'@);
_NZ.win_fld(_wer,,'CZAS',,,10,,1,'Praca'@,,'Liczba godzin pacy'@);
_NZ.win_fld(_wer,,'SZEF',,,20,,1,'Przełożony'@,,'Przełożony współpracownika'@);
_NZ.win_act(_wer,,'Formuła','Usuń'@@,,,
   "  {? cur_tab().sel_size()=0 || FUN.ask('Czy usunąć zaznaczony wiersz?'@) || 1 ?}
   ",
   "  P.cntx_psh();
      _res:='';
      cur_tab().get();
      {? P.seek(cur_tab().P_REF,,1)
      || _data:={? P.DZ<>#0 & P.DZ<cur_tab().DATA || P.DZ || cur_tab().DATA ?};
         _or_ref:=exec('find_okr','grafik',P.ref(),_data,'okr');
         _force:=1;
         _res:=exec('usun_paczke_wewy','prc_dane',
               'P_REF=%1#WARSTWA=w#OR_REF=%2#PAR1=%3'[cur_tab().P_REF,$_or_ref,form(cur_tab().DATA)+'; @'],_force)
      ?};
      P.cntx_pop();
      {? 2+_res='OK' || cur_tab().del() ?}
   ",,1,
   "  {? cur_tab().sel_size()=1
      || FUN.ask('Czy usunąć zaznaczony wiersz?'@)
      || FUN.ask('Czy usunąć zaznaczone wiersze?'@)
      ?}
   ",,'U'
);
_NZ.win_act(_wer,,'Formuła','Zatwierdź'@@,,,,
   "  {? cur_tab().sel_size()=0 || KOMM.init(200)?};
      _ok:=exec('zapisz_paczke_wewy','prc_dane',
         'P_REF=%1#WARSTWA=w#PAR1=%2'[cur_tab().P_REF,
         form(cur_tab().DATA)+';'+form(cur_tab().DATAW,-2)+';'+form(cur_tab().WE)+';'+form(cur_tab().WY)+';00:00; @'],
         'wynik'
      );

      {? cur_tab().sel_size()=0 || KOMM.select()?};
      {? _ok || cur_tab().del() ?}
   ",1,1,
   "  KOMM.init(200);
      FUN.ask('Czy zatwierdzić zaznaczone zapisy?'@)
   ",
   "  KOMM.select()
   ",'Z'
);
_NZ.win_act(_wer,1,'Formuła','Dalej'@@,,,,
   "  _par:=params_get();
      _par.obj.wynik:=1;
      params_set('obj',_par.obj);
      sel_exit()
   ",,,,,'D',,'target=window'
);
_NZ.win_act(_wer,0,'Formuła','Dalej'@@,,,,
   "  _par:=params_get();
      _par.obj.wynik:=1;
      params_set('obj',_par.obj);
      sel_exit()
   ",,,,,'D',,'target=window'
);
_NZ.win_btn(_wer,'text=%1,panel=right,align=begin'['Usuń'@],'menu:U');
_NZ.win_btn(_wer,'text=%1,panel=right,align=begin'['Zatwierdź'@],'menu:Z');
_NZ.win_btn(_wer,'text=%1,icon=xwin16.png:22,panel=bottom,align=end'['Dalej'@],'menu:D');
_NZ.win_btn(_wer,'text=%1,icon=xwin16.png:14,panel=bottom,align=end'['Anuluj'@],'key:Esc');
_NZ.win_sel(_wer);

:: Przygotowanie listy współpracowników zgodnie z uprawnieniami użytkownika.
P.cntx_psh();
P.clear();
{? P.f_active() || P.f_clear() ?};
_where:=
   {? _p_ref
   || 'P.REFERENCE in (select P.REFERENCE from P where P.REFERENCE=\''+$_p_ref+'\' order by 1)'
   || ''
   ?};
_ud_sch:=exec('domyslny','schemat','PODZORG');
_ud_skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_ud_def:=exec('szukaj_ud_def','schemat',_ud_sch,_ud_skl).REF;
exec('filtruj_p','schemat','PRC',_ud_def,P_FILTER.F_ZATR().KOD,'T',P_FILTER.STATUS,,_where);

:: Wypełnienie tabeli danymi.
KAL_BUFF.cntx_psh();
KAL_BUFF.index('PRZNODT');
OSOBA.cntx_psh();
{? P.f_first()
|| {!
   |? {? _data=#0
      || KAL_BUFF.prefix(P.ref(),'W','T')
      || KAL_BUFF.prefix(P.ref(),'W','T',_data)
      ?};
      {? KAL_BUFF.first()
      || {!
         |? {? KAL_BUFF.DATA>=_od & KAL_BUFF.DATA<=_do
            || _NZ.blank();
               _NZ.NAZWISKO:=KAL_BUFF.P().OSOBA().NAZWISKO;
               _NZ.IMIE:=KAL_BUFF.P().OSOBA().PIERWSZE;
               _NZ.P_REF:=$KAL_BUFF.P;
               _NZ.WYDZIAL:=exec('zhist','okres','WYDZIAL().SYMBOL',_do);
               _NZ.T:=KAL_BUFF.P().T;
               _NZ.DATA:=KAL_BUFF.DATA;
               _NZ.DATAW:=KAL_BUFF.DATAW-KAL_BUFF.DATA;
               _NZ.WE:=KAL_BUFF.POCZATEK;
               _NZ.WY:=KAL_BUFF.KONIEC;
               _NZ.CZAS:=KAL_BUFF.CZAS;
                _szef:=exec('prac_nad','stanprac',P.ref(),0,'TYPPOZ','PLANCZP',,1);
                {? _szef.first()
                || _NZ.SZEF:=_szef.IMIE+' '+_szef.NAZWISKO;
                   _NZ.SZEF_REF:=_szef.P_SQL
                ?};
                obj_del(_szef);
               _NZ.KAL_BUFF:=$KAL_BUFF.ref();
               _NZ.add()
            ?};
            KAL_BUFF.next()
         !}
      ?};
      P.f_next()
   !}
?};
OSOBA.cntx_pop();
KAL_BUFF.cntx_pop();
{? P.f_active() || P.f_clear() ?};
P.cntx_pop();

:: Jeżeli istnieją niezatwierdzone godziny, to wyświetla okno i daje mozliwość zatwierdzenia lub usunięcia
{? _NZ.size()>0
|| {? _c=1
   || FUN.emsg('%1\n%2\n%3\n%4'
         [  'W zamykanym okresie wykryto niezaakceptowane godziny.'@,
            'Należy zweryfikować ich poprawność i usunąć bądź zatwierdzić.'@,
            'Aby zamknięcie miesiąca było możliwe, nie mogą pozostać żadne niezatwierdzone godziny.'@,
            'Akcje zatwierdzania lub usuwania można wykonać grupowo po zaznaczeniu grupy zapisów.'@
         ]
      )
   ?};
   _obj:=obj_new('wynik');
   _obj.wynik:=0;
   params_set('obj',_obj);
   _NZ.select();
   _wynik:=_NZ.size=0 & params_get(1).obj.wynik
|| {? _c=0 || FUN.emsg('Wszystkie godziny w wybranym okresie są zatwierdzone.'@) ?};
:: Jeżeli wszystkie godziny są zatwierdzone, to funkcja zwraca 1 bez wyświetlania okna
   _wynik:=1
?};
obj_del(_NZ);
_wynik


\zwrot_odbioru
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Zwrot godzin do odbiory. W sytuacji gdy dzień odbioru wyznaczono w czasie nieobecności pracownika.
::       Jeżeli wystąpi taka sytuacja program wyświetli okienko z informacją oraz z potwierdzeniem że w tej sytuacji
::       ma nastąpić rozliczenie dodatku poprzez wypłacenie w miesiącu zamykanym. Niezbędny jeżeli pracownik kończy
::       zatrudnienie i nie ma możliwości zmiany daty odbioru nadgodzin.
::       Informacja o godzinach zwrotu zostaje zapisana na skladnikach L.g. dod. odb. 100% oraz L.g. dod. odb. 50%
::   WE: _a - Bufor tabeli.
::       _b - [INTEGER] Rok.
::       _c - [INTEGER] Miesiąc.
::       [_d] - P.ref
::   WY: Tabela z ustaleniem dalszego działania
::  OLD: \zwrot_odbioru/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=_b;
_mc:=_c;
_tab:=_a;

::dodanie rozliczenia odbioru godzin nadliczbowych w dniu wolnym
A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
A_OKRP_M.cntx_psh();
R_PRACDN.cntx_psh();
P.cntx_psh();
N.index('NIEORM');
H.index('_HISTKOD');
R.prefix();
R_WYK.index('R_WYKDO');
{? var_pres('_d')=type_of(null())
|| R_WYK.prefix(_d)
|| R_WYK.prefix()
?};
{? R_WYK.first()
|| _wyk_G:=*0;
   _wyk_DO:=#0;
   _wyk_P:=R_WYK.P;
   {!
   |? {? 'PF'* R_WYK.R_WO().W
      || _wyn:=_blokuj:=0;
         _nieob:='';
         _od:=_do:=#0;
         _wyk_GX:=*0;
         R_WYK.P();
         __KAL.set_cal(P.KAL,R_WYK.DO~1);
         A_OKRP.prefix(R_WYK.P);
         {? A_OKRP.first()
         || {!
            |? {? A_OKRP.OD<=date(_rok,_mc,0) & A_OKRP.DO>=date(_rok,_mc,1)
               || A_OKRP_M.prefix(A_OKRP.ref(),_rok,_mc);
                  {? A_OKRP_M.first()
                  || {? A_OKRP_M.STATUS='X' || _blokuj:=1 ?}
                  ?}
               ?};
               ~_blokuj & A_OKRP.next()
            !}
         ?};
         {? ~_blokuj
         || {? date(R_WYK.DO~1,R_WYK.DO~2,1)=date(_rok,_mc,1)
            || N.prefix('N',R_WYK.P,_rok,_mc);
               {? N.first()
               || {!
                  |? {? R_WYK.DO>=N.OD & R_WYK.DO<=N.DO
                     || _all_g:=*(__KAL.w_hours(R_WYK.DO,R_WYK.DO)*60);
                        {? _wyk_P=R_WYK.P & _wyk_DO=R_WYK.DO
                        || _wyk_G+=R_WYK.G
                        || _wyk_G:=R_WYK.G;
                           _wyk_DO:=R_WYK.DO;
                           _wyk_P:=R_WYK.P
                        ?};
                        _nb_g:=*(N.NG*60);
                        {? _nb_g+_wyk_G>_all_g
                        || {? _nb_g+_wyk_G-R_WYK.G>=_all_g
                           || _wyk_GX:=R_WYK.G
                           || _wyk_GX:=_nb_g+_wyk_G-_all_g
                           ?};
                           _wyn+=1;
                           _nieob:=N.NB().RT;
                           _od:=N.OD;
                           _do:=N.DO
                        ?}
                     ?};
                     ~_wyn & N.next()
                  !}
               ?};
               {? ~_wyn
               || {? ~__KAL.w_days(R_WYK.DO,R_WYK.DO)
                  || _wyn:=1;
                     _od:=R_WYK.DO;
                     _do:=R_WYK.DO;
                     _nieob:='Zaplan. dzień wolny'
                  ?}
               ?}
            ?};
            {? ~_wyn
            || {? P.DZ<>#0 & date(P.DZ~1,P.DZ~2,1)=date(_rok,_mc,1) & R_WYK.DO>P.DZ
               || _wyn:=1;
                  _od:=R_WYK.DO;
                  _do:=R_WYK.DO;
                  _nieob:='Pracownik zwolniony'
               ?}
            ?};
            {? _wyn
            || _tab.NAZWISKO:=R_WYK.P().OSOBA().NAZWISKO;
               _tab.IMIE:=OSOBA.PIERWSZE;
               _tab.T:=P.T;
               _tab.WYDZIAL:=P.WYDZIAL().SYMBOL;
               _tab.DN:=R_WYK.DN;
               _tab.DO:=R_WYK.DO;
               _tab.G:={? _wyk_GX=*0 || R_WYK.G || _wyk_GX ?};
               _tab.P_REF:=#P.ref();
               _tab.R_WYK:=#R_WYK.ref();
               _tab.NB:=_nieob;
               _tab.N_OD:=_od;
               _tab.N_DO:=_do;
               _tab.WYP:='N';
               _tab.RN:=R_WYK.R().RN;
               _tab.R:=R_WYK.R().RT;
               _tab.add()
            ?}
         ?}
      ?};
      R_WYK.next()
   !}
?};
A_OKRP.cntx_pop();
A_OKRP_M.cntx_pop();
P.cntx_pop();
R_PRACDN.cntx_pop();
_tab


\zwrot_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Zapisanie danych o zwrocie odbioru. W _tab znajduje sie tabela zwrotów.
::   WE: _a - Bufor tabeli.
::   WY:
::  OLD: \zwrot_zapisz/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
{? _tab.first()
|| FUN.emsg(
      'W zamykanym miesiącu znajdują się pracownicy\n '+
      'z odbiorem przekroczeń dobowych w dniu wolnym lub podczas nieobecności.'@+'\n'+
      'Należy wskazać czy pracownikom należy wypłacić dodatek za godziny nadliczbowe.'@+'\n'+
      'Jeżeli nie będzie wypłacany dodatek, należy pamiętać o przesunięciu dnia odbioru na inny termin.'@
   );
   _wer:=_tab.mk_sel('Pracownicy z odbiorem w dzień wolny'@,,0,'zwrot_odbioru',,,,,'U',,,,,'maximized');
   _tab.win_fld(_wer,,'NAZWISKO',,,15,,,'Nazwisko'@,,'Nazwisko współpracownika'@);
   _tab.win_fld(_wer,,'IMIE',,,15,,,'Imię'@,,'Imię współpracownika'@);
   _tab.win_fld(_wer,,'WYDZIAL',,,-15,,,'Jednostka organizacyjna'@,,'Jednostka organizacyjna współpracownika'@);
   _tab.win_fld(_wer,,'T',,,9,,,'Teczka'@,,'Symbol teczki współpracownika'@);
   _tab.win_fld(_wer,,'DO',,,10,,,'Data odbioru'@,,'Data odbioru godzin'@);
   _tab.win_fld(_wer,,'DN',,,10,,,'Data nadmiaru'@,,'Data powstania nadmiaru'@);
   _tab.win_fld(_wer,,'G',,,-8,,,'Ilość godzin'@,,'Ilość godzin odbioru');
   _tab.win_fld(_wer,,'R',,,15,,,'Typ godzin'@,,'Typ godzin'@);
   _tab.win_fld(_wer,,'NB',,,15,,,'Nieobecność'@,,'Rodzaj nieobecności'@);
   _tab.win_fld(_wer,,'N_OD',,,10,,,'Początek'@,,'Początek nieobecności'@);
   _tab.win_fld(_wer,,'N_DO',,,10,,,'Koniec'@,,'Koniec nieobecności'@);
   _tab.win_fld(_wer,,'WYP',,,-3,,,'Wypłata'@,,'Kwota do wypłaty (T/N)'@,2,,"'T'","'N'");
   _tab.win_fld(_wer,,'OPIS',,,25,,,'Akcja'@,,'Rodzaj akcji'@);
   _tab.win_act(_wer,0,'Rekord',,,,
      "  {? cur_tab().RN=65 || cur_tab().actions(cur_win(),'W',,1) || cur_tab().actions(cur_win(),'',,1) ?};
         cur_tab().WYP='T'
      "
   );
   _tab.win_act(_wer,0,'Formuła','Anuluj'@@,,,,
      "  _grupa:=0;
         {? cur_tab().sel_size()>0
         || _grupa:=1
         ?};
         {? cur_tab().RN<>65
         || {? cur_tab().WYP='T'
            || cur_tab().WYP:='N';
               cur_tab().put()
            ?}
         ?};
         {? ~_grupa
         || FUN.prg_start(2,'Trwa przetwarzanie.'@,,,1);
            FUN.prg_next()
         ?};
         {? ~_grupa
         || FUN.prg_next();
            FUN.prg_stop()
         ?};
         {? cur_tab().size()=0 || sel_exit() ?};
         ~~
      ",1,1,
      "  {? FUN.ask('Czy zmienić status wypłaty dodatku dla zaznaczonych pozycji?'@) || 1 || 0 ?}
      ",
      "  {? cur_tab().size()=0 || sel_exit() ?}
      ",'A'
   );
   _tab.win_act(_wer,0,'Formuła','Wypłać'@@,,,,
      "  _grupa:=0;
         {? cur_tab().sel_size()>0
         || _grupa:=1
         ?};
         {? cur_tab().RN<>65
         || {? cur_tab().WYP='N'
            || {? date(cur_tab().DN~1,cur_tab().DN~2,1)=date(cur_tab().DO~1,cur_tab().DO~2,1)
               || cur_tab().OPIS:='%1 %2'['Akcja \"Wypłać\" nie jest możliwa.'@,'Ten sam miesiąc nadmiaru i odbioru.'@]
               || cur_tab().WYP:='T'
               ?};
               cur_tab().put()
            ?}
         ?};
         {? ~_grupa
         || FUN.prg_start(2,'Trwa przetwarzanie.'@,,,1);
            FUN.prg_next()
         ?};
         {? ~_grupa
         || FUN.prg_next();
            FUN.prg_stop()
         ?};
         {? cur_tab().size()=0 || sel_exit() ?};
         ~~
      ",1,1,
      "  {? FUN.ask('Czy zmienić status wypłaty dodatku dla zaznaczonych pozycji?'@) || 1 || 0 ?}
      ",
      "  {? cur_tab().size()=0 || sel_exit() ?}
      ",'W'
   );
   _tab.win_act(_wer,0,'Kolejność');
   _tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Wypłać'@],'menu:W');
   _tab.win_btn(_wer,'text=%1,icon=xwin16.png:22,panel=bottom,align=end'['Dalej'@],'key:Esc');
   _tab.win_sel(_wer);
   _tab.select()
?};
sql('select * from :_a where :_a.WYP=\'N\'',_tab).first()


\przekroczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Weryfikacja przekroczenia średniotygodniowego dla pracowników niepełnoetatowych.
::       Procedura ma za zadanie zmianę składnika 64 na składnik 65 jeżeli od danej godziny nastąpiło przekroczenie.
::   WE: _a - [INTEGER] Rok.
::       _b - [INTEGER] Miesiąc.
::       _c - [INTEGER] Rok kwalifikacji.
::       _d - [INTEGER] Miesiąc kwalifikacji.
::   WY:
::  OLD: \przekroczenie/okres.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~__HARM.OKRES || return(~~) ?};
_rok:=_a;
_mc:=_b;
_rokKwal:=_c;
_mscKwal:=_d;
_g58:=*0;
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
R_KWGODZ.cntx_psh();
MASK.Use('R_KWGODZ',_rok,_mc);
R_KWGODZ.index('RUB_DATA');
:: ewentualna zamiana z 65 na 64
R_KWGODZ.prefix(P.ref(),65);
{? R_KWGODZ.first()
|| _tab:=tab_tmp(,'REF','INTEGER','REF');
   {!
   |? {? R_KWGODZ.DZ>=date(_rok,_mc,1) & R_KWGODZ.DZ<=date(_rok,_mc,0)
         &
         R_KWGODZ.MR=date(_rokKwal,_mscKwal,0) | R_KWGODZ.MR=#0
      || {? H.find_le(R_KWGODZ.DZ) & H.WY<>1
         || _tab.REF:=#R_KWGODZ.ref();
            _tab.add()
         ?}
      ?};
      R_KWGODZ.next()
   !};
   {? _tab.first()
   || R_KWGODZ.index('DATA_RUB');
      R_KWGODZ.prefix();
      {!
      |? {? R_KWGODZ.seek(_tab.REF,)
         || _godz:=R_KWGODZ.GODZ;
            R_KWGODZ.prefix(P.ref(),R_KWGODZ.DZ,64);
            {? R_KWGODZ.first
            || R_KWGODZ.GODZ+=_godz; R_KWGODZ.put();
               R_KWGODZ.prefix();
               {? R_KWGODZ.seek(_tab.REF,) || R_KWGODZ.del() ?}
            || R_KWGODZ.KW:=__RUB.ref(64);
               R_KWGODZ.put()
            ?};
            R_KWGODZ.prefix()
         ?};
         _tab.next()
      !}
   ?}
?};
R_KWGODZ.index('DATA_RUB');
A_OKRP.cntx_psh();
A_OKRP.index('A_OKRDP');
A_OKRP.prefix(P.ref());
{? A_OKRP.first()
|| {!
   |? {? A_OKRP.OD<=date(_rok,_mc,0) & A_OKRP.DO>=date(_rok,_mc,1)
      || _od:={? A_OKRP.OD>date(_rok,_mc,1) || A_OKRP.OD || date(_rok,_mc,1) ?};
         _do:={? A_OKRP.DO<date(_rok,_mc,0) || A_OKRP.DO || date(_rok,_mc,0) ?};
         _g58:=exec('oblicz','okres',1,1,1,A_OKRP.OD,{? A_OKRP.DO>=date(_rok,_mc,0) || date(_rok,_mc,0) || A_OKRP.DO ?});
         _wyn:=*0;
:: od faktycznie przepracowanych w danym okresie rozliczeniowym godzin pracy odejmuje się liczbę godzin pracy
:: planowanych na dany okres rozliczeniowy
         _kal_naz:=__KAL.nazwa;
         _kal_rok:=__KAL.rok;
         __KAL.set_cal('standard',_do);
         _norma_w:=__KAL.w_hours(A_OKRP.OD,A_OKRP.DO);
:: przywrócenie kalendarza pracownika
         __KAL.set_cal(_kal_naz,_kal_rok);
         _norma:=*(_norma_w*60)-A_OKRP.P_NIEOB;
         {? _norma<*0 || _norma:=*0 ?};
         {? A_OKRP.PRZEP>_norma
         || _praca:=A_OKRP.PRZEP-_norma;
::  od tak uzyskanego wyniku odejmuje się liczbę godzin, które powstały z tytułu pracy w godzinach nadliczbowych
::  wynikających z przekroczenia dobowego wymiaru czasu pracy (lub jego przedłużonego wymiaru),
            _praca:=_praca-A_OKRP.N_DOBA-_g58;
::  otrzymana w ten sposób liczba godzin pracy wyraża liczbę godzin nadliczbowych powstałych
::  z tytułu przekroczenia przeciętnie tygodniowych norm czasu pracy.
            {? _praca>*0 || _wyn:=_praca ?}
         ?};
         {? _wyn>*0
         || {! _ind:=_do~3//-1.._od~3
            |! R_KWGODZ.prefix(P.ref(),date(_rok,_mc,_ind),65);
               {? R_KWGODZ.first()
               || {!
                  |? {? _wyn>*0
                     || _wyn-=R_KWGODZ.GODZ
                     ?};
                     _wyn>*0 & R_KWGODZ.next()
                  !}
               ?}
            !}
         ?};
         {? _wyn>*0
         || {! _ind:=_do~3//-1.._od~3
            |! R_KWGODZ.prefix(P.ref,date(_rok,_mc,_ind),64);
               {? R_KWGODZ.first()
               || {!
                  |? {? _wyn>*0
                     || {? _wyn>=R_KWGODZ.GODZ
                        || _wyn-=R_KWGODZ.GODZ;
                           _g_64:=R_KWGODZ.GODZ;
                           R_KWGODZ.cntx_psh();
                           R_KWGODZ.prefix(P.ref,date(_rok,_mc,_ind),65);
                           {? R_KWGODZ.first
                           || R_KWGODZ.GODZ+=_g_64;
                              R_KWGODZ.put(1)
                           || R_KWGODZ.prefix(P.ref,date(_rok,_mc,_ind));
                              R_KWGODZ.KW:=__RUB.ref(65);
                              R_KWGODZ.put(1)
                           ?};
                           R_KWGODZ.cntx_pop()
                        || R_KWGODZ.GODZ:=R_KWGODZ.GODZ-_wyn;
                           R_KWGODZ.put(1);
                           R_KWGODZ.cntx_psh();
                           R_KWGODZ.prefix(P.ref,date(_rok,_mc,_ind),65);
                           {? R_KWGODZ.first
                           || R_KWGODZ.GODZ+=_wyn;
                              R_KWGODZ.put(1)
                           || R_KWGODZ.GODZ:=_wyn;
                              R_KWGODZ.KW:=__RUB.ref(65);
                              R_KWGODZ.add(1)
                           ?};
                           _wyn:=*0;
                           R_KWGODZ.cntx_pop()
                        ?}
                     ?};
                     _wyn>*0 & R_KWGODZ.next()
                  !}
               ?}
            !}
         ?}
      ?};
      A_OKRP.next()
   !}
?};
R_KWGODZ.cntx_pop();
A_OKRP.cntx_pop();
H.cntx_pop();
~~


\zwrot_dodatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Zapisuje dodatek zamiast odbioru.
::   WE: _a - tabela
::       _b - [INTEGER] Rok.
::       _c - [INTEGER] Miesiąc.
::   WY:
::  OLD: \zwrot_dodatek/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_rok:=_b;
_mc:=_c;
__RUB.fill();
P.prefix();
R_WYK.prefix();
_Mask:='godz'+(('0000'+$_rok)+4);
{? G.name()<>_Mask || G.use(_Mask) ?};
G.index('MSCKW_KK');
{? _a.first()
|| {!
   |? {? _a.WYP='T' & P.seek(_a.P_REF,) & R_WYK.seek(_a.R_WYK,)
      || {? R_WYK.KK
         || _konto:=R_WYK.KK
         || _konto:=exec('kk_hist','pracownik',P.ref(),R_WYK.DN)
         ?};
         G.prefix(P.ref(),_mc,'G');
         {? R_WYK.R().RN=55 || _nr:=7015 || _nr:=7016 ?};
         G.blank(1);
         G.P:=P.ref();
         G.R:='G';
         G.BL:='N';
         G.AUTO:='T';
         G.M:=_mc;
         G.D:=R_WYK.DN;
         G.F:='RCP_ODB_G:'+$(#R_WYK.ref());
         G.KK:=_konto;
         G.K:=__RUB.ref(_nr);
         G.G:=(*R_WYK.G/60)$2;
         G.add();
         _a.OPIS:='Wprowadzono dodatek do rozliczenia.';
         _a.put()
      ?};
      _a.next()
   !}
?};
1


\prc_mcr_godz_dsk_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła przygotowuje tłumaczenia dla kontrolki prc_mcr_godz.dsk.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=exec('elements_table','#desktop');
_add:="_a.blank(); _a.ID_SYS:=_b; _a.NAME:=_c; _a.add()";

_add(_TAB,'schCB@panel','Schemat'@);
_add(_TAB,'statusCB@panel','Status'@);

_TAB


\godziny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Wyswietlenie okienka z godzinami dla wybranego miesiaca rozliczeniowego.
::   WE:
::   WY:
::  OLD: \godziny/okres.fml
::----------------------------------------------------------------------------------------------------------------------
UD_TYP.cntx_psh();
UD_SCH.cntx_psh();
_loop:=1;
{!
|? _loop
|! _inTerm:=
      {? ~exec('interm','#system')
      || exec('pxx_widok_uproszczony','pkd','PRC_MSG')
      || 1
      ?};
   _main:='';
   {? _inTerm || _main:='SLOI' || _main:='PRC_SLO' ?};

   {? exec('domyslny','schemat','PODZORG')
   || _mode:='maximized';
      {? ~_inTerm
      ||
:: Główne okno widoku
         _wnd:=P.grp_make(,
            "  exec('load','#desktop','selektor','prc_mcr_godz.dsk',,,,,exec('prc_mcr_godz_dsk_pl','prc_mscrozlicz'),1);
               params_exec('stdor_bf','pkd','T');
               grp_disp(UD_DEF,'NAW_MIN',1,1);
               1
            ",'a_okrm_godziny',,,
            "  params_exec('stdor_oc','pkd')
            ",,,
::          rozkład
            'jterm'
         );

:: Utworzenie kontrolki selektora schematu
         exec('create','#desktop',P,'selektor',_wnd,2);

:: Drzewko struktury organizacyjnej
         P.grp_splt(_wnd,,'horizontal','panel');
         P.grp_sel(_wnd,UD_DEF,'NAW_MIN',,
            "  params_exec('stdor_def_ar','pkd')
            ",,,15,
            "  params_exec('stdor_def_bs','pkd',_a)
            ",
            "  params_exec('stdor_def_as','pkd',_a)
            ",
            0,0,_mode,'NAW_MIN'
         );

:: Współpracownicy
::   UD_DEF.grp_splt(_wnd,'panel','vertical','right');
::   UD_DEF.grp_sel(_wnd,P,'SLO',,
::      "  params_exec('stdor_p_ar','pkd');
::         params_exec('stdor_all_ar','prc')
::      ",,,14,
::      "  _par:=params_get();
::         _par.cfg.nav.main:='SLO';
::         P_FILTER.F_ZATR:=__F_ZATR.find('P');
::         params_exec('stdor_p_bs_all','prc',_a);
::         P.f_seek(_par.cfg.extra.REF_PRAC)
::      ",
::      "  _par:=params_get();
::         _par.cfg.extra.REF_PRAC:=P.ref();
::         params_exec('stdor_p_as','pkd',_a)
::      ",0,,_mode,'SLO'
::   );

         P.grp_splt(_wnd,'panel','vertical','right')
      ||
         _wnd:=P.grp_make(,
            "  params_exec('stdin_bf','pkd','T');
               1
            ",'a_okrm_godziny',,,
            "  params_exec('stdin_oc','pkd')
            "
         )
      ?};
      P.grp_sel(_wnd,P,_main,,
:  po odświeżeniu
         "  _ev:=EDIT_VAR.P_LM;
            EDIT_VAR.P_LM:=1;
            params_exec('stdor_p_ar','pkd');
            EDIT_VAR.P_LM:=_ev;
           params_exec('stdor_all_ar','prc');
           {? exec('interm','#system')
           || cur_tab().actions_grayed(cur_win(1,1),'J(I):J(I)')
           ?}
         ",
:  położenie i wysokość
         ,,14,
:  przed obsługą
         "  _par:=params_get();
            _par.cfg.nav.main:=cur_win(1,1);
            params_exec('stdor_p_bs_all','prc',_a);
            P.f_seek(_par.cfg.extra.REF_PRAC)
         ",
:  po obsłudze
         "  _par:=params_get();
            _par.cfg.extra.REF_PRAC:=P.ref();
            params_exec('stdor_p_as','pkd',_a)
         ",
:  utrwalenie, aktywacja, wypełnienie
         0,,_mode,
:  identyfikator
         _main
      );

:: Godziny pracy w zakładce okienka
      P.grp_splt(_wnd,,'horizontal','bottom');
      {? _inTerm
      || _cfg:=exec('pkd_conf','pkd','PRC_MCR',P,_wnd,_main)
      || _cfg:=exec('pkd_conf','pkd','PRC_MCR',P,_wnd,_main,'NAW_MIN')
      ?};
      _cfg.extra:=obj_new('REF_PRAC');
      _cfg.extra.REF_PRAC:=null();
      _cfg.final:='T';

      exec('godz_conf_gp','prc_mscrozlicz',_cfg);
      exec('godz_conf_ga','prc_mscrozlicz',_cfg);

      exec('pkd_conf_end','pkd',_cfg);

:: Wyświetlenie okna rozliczanymi godzinami pracy w miesiącu
      params_set('cfg',_cfg);
      P.cntx_psh();
      P.win_edit('RED_P');
      H.cntx_psh();
      H.use('_hist');
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
      P.win_sel(_cfg.window);
      ($_cfg.prolog)();
      AreaTitle.setTabWin(P,_cfg.window);
      AreaTitle.setTitle();
      _loop:=P.select();
      ($_cfg.epilog)();
      H_UM.cntx_pop();
      H.cntx_pop();
      P.cntx_pop();
      P.win_del(_cfg.window);
      obj_del(_cfg);
      exec('otworz_h_um','pracownik')
   || _loop:=0
   ?}
!};

UD_SCH.cntx_pop();
UD_TYP.cntx_pop();
~~


\PRC_MSC_GODZ_W_B
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PRC_MSG')


\prc_msc_mies_w_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Zmiana widoku uproszczony/rozbudowany.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('pxx_widok_zmien','pkd','PRC_MSM')


\godz_conf_gp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: arKc [18.02]
:: OPIS: Przepracowane godziny wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,G,'MSCDKW','WER_PRC',,,'PRC_MCR_DWGD','PRC_MCR_DWGD',P)
|| return()
?};

_a.prolog+="G.cntx_psh();CON_KG.cntx_psh();";
_a.epilog+="G.cntx_pop();CON_KG.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny pracy'@,,,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      ZMIENNE.RODZAJ:='H';
      EDIT_VAR.KOD_DOK:='G';
      exec('ustaw_maski','godziny',A_OKRM.R,A_OKRM.M);

      G.index('MSCKW_KK');
      G.prefix(P.ref(),A_OKRM.M,'G');
      G.index('MSCKW_KD');
      G.prefix(P.ref(),A_OKRM.M,'G');
      G.index('MSCDKW');
      G.prefix(P.ref(),A_OKRM.M,'G');

      exec('CON','object');
      exec('ustaw_okno','godziny','PRC_MCR_DWGD')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'WER_PRC'
)


\godz_conf_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: arKc [18.02]
:: OPIS: Godziny akordowe wybranego pracownika.
::   WE: _a [ARRAY] - Bufor konfiguracji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a.init(_a,G,'MSCDKW','WERA',,,'PRC_MCR_DWGD','PRC_MCR_DWGD',P)
|| return()
?};

_a.prolog+="G.cntx_psh();CON_KG.cntx_psh();";
_a.epilog+="G.cntx_pop();CON_KG.cntx_pop();";

_a.table.grp_sel(_a.window,($_a.map.TABLE)(),_a.map.WINDOW,'Godziny akordowe'@,,,,,
   $($_a.bs)(_a.map,"
      UD_POM.SKID_MB:=KST_PAR.SKID_MB;
      ZMIENNE.RODZAJ:='A';
      EDIT_VAR.KOD_DOK:='A';
      exec('ustaw_maski','godziny',A_OKRM.R,A_OKRM.M);

      G.index('MSCKW_KK');
      G.prefix(P.ref(),A_OKRM.M,'A');
      G.index('MSCKW_KD');
      G.prefix(P.ref(),A_OKRM.M,'A');
      G.index('MSCDKW');
      G.prefix(P.ref(),A_OKRM.M,'A');

      exec('CON','object');
      exec('ustaw_okno','godziny','PRC_MCR_DWGD')
   "),
   $($_a.as)(_a.map),
   ,,_a.mode,'WERA'
)


\zadania_A_OKRM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Zadania z okresów rozrachunkowych
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',A_OKRM.uidref())


\msc_otwarty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.02]
:: OPIS: Sprawdzenie statusu miesiąca rozliczeniowego.
::       UWAGA! Funkcja służy do ustalenia statusu miesiąca dlatego wymagane jest podanie poprawnych parametrów.
::   WE: _a - [INTEGER] Rok dla miesiąca rozliczeniowego
::       _b - [INTEGER] Miesiąc rozliczeniowy
::       _c - [STRING] Rodzaj statusu 'R'-rozliczenie,'P'-planowanie
::   WY: [STRING] Stan wybranego rodzaju statusu lub wartość pusta jeżeli podano błędne parametry wejściowe.
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? var_pres('_a')=type_of(0) & var_pres('_b')=type_of(0) & var_pres('_c')=type_of('')
|| A_OKRM.cntx_psh();
   A_OKRM.index('A_OKRMR');
   A_OKRM.prefix(_a,_b);
   {? A_OKRM.first()
   || _result:={? _c='P' || A_OKRM.S_PLAN |? _c='R' || A_OKRM.S ?}
   ?};
   A_OKRM.cntx_pop()
?};
_result


\prc_mcr_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J9SZAFRA [21.37]
:: OPIS: Formuła główna - Zakres danych (Godziny pracy) w dziedzinie PRC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_edit:=__PARSES.editPar('F_ZATR','JednostkaOrganizacyjna','ZakresDanych');
{? _edit
|| _sch:=exec('domyslny','schemat','PODZORG');
   _skl:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
   P_FILTER.UD_DEF:=exec('szukaj_ud_def','schemat',_sch,_skl).REF;
   UD_DEF.seek(P_FILTER.UD_DEF);
   P_FILTER.F_ZATR:=__PARSES.getVal('F_ZATR').REF;
   P_FILTER.STATUS:=__PARSES.getVal('ZakresDanych');

:: odrysuj okienko obszaru
   params_exec('pxx_odrysuj','pkd')
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 9345cf169ae0e0d8704cf2733d215bac831f6065b101fc6c77baa92e0dbff0df354f72ff395490457a8c5ad2d158e37768c567894c9987c01a8f4e29b545b8e2f3c22f8b1c44b354acd1696b940e489ca02e80e92b01473ca60d9326017158ae86844e264a696aa398e29b6394ac1a5f13d5553a8e62b54c9ffb8b3f4b738672
