:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: slo_slu.fml
:: Utworzony: 01.01.2009
:: Autor: Mario
::======================================================================================================================
:: Zawartość:  Procedury do obsługi słowników użytkownika
::======================================================================================================================


\pwys_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formula przed wyswietleniem pola zmiennej obslugujacego pole o zlaczeniu do SLUAPPL
::   WE: _a - akronim pola [tabela].[pole] ktorego dotyczy wywolanie
::       _b - akronim pola zmiennej, z której formuła jest wywolywana
::  OLD: \pwys_slu/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_PoleTab:=$(_a);
_PoleZm:=$(_b);
{? _PoleTab()<>0
|| _Naz:=$(_a+'().SLU().NAZ');
   _PoleZm():=_Naz()
|| _PoleZm():=''
?};
~~


\f3_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formula na F3 dla pola zmiennej obslugujacego pole o zlaczeniu do SLUAPPL
::   WE: _a - akronim pola [tabela].[pole], ktorego dotyczy wywolanie
::       _b - akronim pola zmiennej, z ktorej formula jest wywolywana
::  OLD: \f3_slu/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_PoleTab:=$(_a);
_PoleZm:=$(_b);
wyb:=0;
SLUAPPL.index('NAZ'); SLUAPPL.prefix({? cur_tab(1,1)=SKID_WYR || 'F' || exec('prfx_slu','slo_slu') ?});
{? _PoleZm()<>'' || SLUAPPL.find_key(_PoleZm()) || SLUAPPL.first() ?};
{? 4+_a='KS_W'
|| SLUAPPL.win_sel('SLO')
|| SLUAPPL.win_sel('SLOWYR')
?};
{? SLUAPPL.select(,1) || _PoleZm():=SLUAPPL.SLU().NAZ ?};
_PoleZm()


\prfx_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2008]
:: OPIS: Znacznik do prefiksu słowników systemu
::  TAG: <SLOSLU>
::  OLD: \prfx_slu/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_sys:='F'


\pw_kodsl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: przed wyświetleniem kodu użytkownika
::   WE: 0-brac wzorzec bezpośrednio z SLU.WZ, 1-brac wzorzec pośrednio przez SLO
::  OLD: \pw_kodsl/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};
_par300233:=exec('get','#params',300233,2);
KODSLU.KOD:=SLO.KOD;
RS.index('RS'); RS.prefix();
{? _a & SLO.get || SLO.SLU() ?};
{? RS.find_key(SLU.WZ)
|| {? RS.TAB='KH'
   || KH.index('KOD');
      KH.prefix(2);
      {? _a & KH.find_key(SLO.KOD)
      || {? INFO.NAROD=null || exec('czytaj','#stalesys',,INFO,'NAROD') ?};
         DISP.WALNKLIM:=INFO.NAROD;
         DISP.GRKHKLIM:=KH.GRKH;
         SKID.GR_LIM:=KH.GRKH().KLIM;
         exec('kh_dod_ini','kontrahent')
      ?}
   |? RS.TAB='WAL'
   || WAL.index('WAL_SYM');
      WAL.prefix();
      SLO.win_edit('WAL');
      {? _a || WAL.find_key(SLO.KOD) ?};
      WAL.get()
   |? RS.TAB='UDT'
   || UDT.index('UDTKOD');
      UDT.prefix(REF.FIRMA);
      SLO.win_edit('UDT');
      {? _a
      || {? SLO.SLU().WZ='Umowy_id'
         || UDT.index('ID_KSG');
            UDT.prefix();
            UDT.find_key(#SLO.KOD)
         || UDT.index('SYM2');
            UDT.prefix();
            UDT.find_key(SLO.KOD)
         ?}
      ?}
   |? RS.TAB='US'
   || US.index('URZSKNAZ');
      US.prefix();
      SLO.win_edit('US');
      {? _a || US.find_key(SLO.TR) ?}
   |? RS.TAB='B'
   || B.index('BANKOD');
      B.prefix();
      SLO.win_edit('BANK');
      {? _a || B.blank(1); B.find_key(SLO.KOD,) ?}
   |? RS.TAB='KRAJE'
   || KRAJE.index('KRAJE');
      KRAJE.prefix();
      SLO.win_edit('KRAJ');
      {? _a || KRAJE.find_key(SLO.KOD) ?}
   |? RS.TAB='UD_SKL' | RS.TAB='UD_DEF'
   || UD_SKL.index('SYMBOL'); RS.UD_TYP(); UD_SKL.prefix(UD_TYP.ref());
      exec('bv_skl','slo_slu');
      {? UD_SKL.find_key(SLO.KOD) || exec('be_skl','schemat',1) ?}
   |? RS.TAB='ZL'
   || ZL.index('ID_KSG'); ZL.prefix(); ZL.find_key(#({? REF.WFIRM=1 & _par300233='N' || 3-SLO.KOD || SLO.KOD ?}));
      SLO.win_edit('ZLECENIA')
   |? RS.TAB='OS'
   || OS.index('KOD');
      OS.prefix();
      SLO.win_edit('RED');
      {? _a || OS.find_key(SLO.KOD) ?};
      OS.OSOBA()
   |? RS.TAB='OSOBA'
   || OSOBA.index('OSOBA'); OSOBA.prefix(); OSOBA.first()
   |? RS.TAB='PROJEKTY'
   || {? RS.KOD='ID_KSG'
      || PROJEKTY.index('ID_KSG')
      || PROJEKTY.index('SYM')
      ?};
      PROJEKTY.prefix();
      {? _a=1
      || {? RS.KOD='ID_KSG'
         || PROJEKTY.find_key(#SLO.KOD)
         || PROJEKTY.find_key(SLO.KOD)
         ?}
      ?};
      SLO.win_edit('PROJEKTY')
   |? RS.TAB='FIRMA'
   || FIRMA.index('SYMBOL');
      FIRMA.prefix();
      {? _a=1
      || FIRMA.find_key(SLO.KOD)
      ?};
      SLO.win_edit('BANK');
      FIRMA.win_edit('RED')
   || SLO.win_edit('RED')
   ?}
|| SLO.win_edit('RED')
?};

{? {? SLO.f_active>0 || SLO.f_size() || SLO.size() ?}>0 & SLO.win_edit('?')='RED' & SLO.get()
|| {? SLO.SLU
   || SLU.cntx_psh();
      SLO.SLU();
      SLO.hdr_edit();
     {? SLU.SYSTEM='T' || _opis:=1-SLU.NAZ || _opis:=48+SLU.OP ?};
      SLO.hdr_edit(' %1'@[_opis]);
      SLU.cntx_pop()
   ?}
|? SLO.win_edit('?')='RED' & SLO.size()=0
|| SLO.hdr_edit();
        {? SLU.SYSTEM='T' || _opis:=1-SLU.NAZ || _opis:=48+SLU.OP ?};
       SLO.hdr_edit(' %1'@[_opis])
?};
{? RS.TAB='KH'
|| {? _a || KH.memo_get(,'OPIS') ?};
   1
|| 1
?}


\czy_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.30]
:: OPIS: Formuła sprawdza czy słownik jest wykorzystywany w stałych
::   WE: Wskazanie na ref tabeli SLUAPPL lub tabeli SLU
::   WY: 1 - Słownik jest wykorzystywany w FINFO
::  OLD: \czy_stale/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
SLUAPPL.cntx_psh();
SLU.cntx_psh();
_wy:=0;
exec('czytaj','#stalesys',,FINFO);
exec('czytaj','#stalesys',,XINFO);

:: SLUAPPL
{? 7+$_a='sluappl'
|| _num:=FINFO.fld_num();
   {! _i:=1.._num |!
      _acr:=FINFO.fld_acr(_i);
      {? FINFO.fld_join(_i)='SLUAPPL' & ($('FINFO.'+_acr))()=_a
      || _wy:=1
      ?}
   !};
   {? _wy=0
   || _num:=XINFO.fld_num();
      {! _i:=1.._num |!
         _acr:=XINFO.fld_acr(_i);
         {? XINFO.fld_join(_i)='SLUAPPL' & ($('XINFO.'+_acr))()=_a
         || _wy:=1
         ?}
      !}
   ?}
?};

:: SLU
{? 7+$_a='sl_uzyt' & _wy=0
|| _num:=FINFO.fld_num();
   {! _i:=1.._num |!
      _acr:=FINFO.fld_acr(_i);
      {? FINFO.fld_join(_i)='SLU' & ($('FINFO.'+_acr))()=_a
      || _wy:=1
      ?}
   !};
   {? _wy=0
   || _num:=XINFO.fld_num();
      {! _i:=1.._num |!
         _acr:=XINFO.fld_acr(_i);
         {? XINFO.fld_join(_i)='SLU' & ($('XINFO.'+_acr))()=_a
         || _wy:=1
         ?}
      !}
   ?}
?};
SLU.cntx_pop();
SLUAPPL.cntx_pop();
_wy


\fld_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS: Funkcja zwracjąca długość pola.
::   WE: _a -> nazwa pola
::  OLD: \fld_size/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_b:=($_a)();
_c:=0;
{? type_of(_b)=2
||
  ($(_a + ':=100*''*'''))();
  _c:=($('+' + _a))();
  ($(_a + ':=''' + _b + ''''))()
?};
_c


\rs_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Definiowanie wzorcow
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
exec('ini_tsys','slo_slu');
RS.index('RS');
RS.prefix();
RS.win_sel('WER');
RS.select();
VAR_DEL.delete('TT_TSYS','TT_PSYS');
''


\zdr_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.60]
:: OPIS: Wyświetlenie parametrów dla aktualnego rozdzaju wzorca
::  OLD: \zdr_sel/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
ZR_DSLO.index('WZ_NR');
ZR_DSLO.prefix(RS.ref());
_plgn:={? Plugin.runnable('ZR_DSLO_001') || Plugin.run('ZR_DSLO_001') || '' ?};
{? _plgn<>''
|| STR.split(_plgn,',');
   _wz:=STR.get_word();
   {? _wz=RS.WZ
   || exec('par_plg','slo_slu')
   ?}
?};
ZR_DSLO.win_sel('DEF');
ZR_DSLO.select()


\czy_rusu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.60]
:: OPIS: Akcja 'Usuń' w okienku wertowania RS
::  OLD: \czy_rusu/skid_slu
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? 1+RS.WZ='~'
|| FUN.info('Wzorzec zastrzeżony.\nModyfikacje zabronione.'@); 0
|? RS.WZ='prosty'
|| FUN.info('Wzorzec systemowy.\nModyfikacje zabronione.'@); 0
|| 1
?}


\ppop_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Przed redagowaniem i usuwaniem wzorca
::  OLD: \ppop_wz/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_rusu','slo_slu')
|| _a:=1;
   SLU.cntx_psh();
   SLU.blank(1);
   SLU.WZ:=RS.WZ;
   {? SLU.find_rec() & (SLU.WZ=RS.WZ)
   || _a:=0;
      {? -menu_txt='popraw'
      ||  FUN.info('Pierwszy napotkany słownik z wzorcem \"%1\" to\n%2.\n'
             'Poprawienie wzorca nie jest możliwe.'@[RS.WZ,SLU.NAZ])
      ||  FUN.info('Pierwszy napotkany słownik z wzorcem \"%1\" to\n%2.\n'
             'Usunięcie wzorca nie jest możliwe.'@[RS.WZ,SLU.NAZ])
       ?}
   ?};
   SLU.cntx_pop();
   _a
?}


\pr_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS: Przed redagowaniem wzorca
::  OLD: \pr_wz/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
SLU.cntx_psh;
SLU.blank(1);
SLU.WZ:=RS.WZ;
{? SLU.find_rec() & (SLU.WZ=RS.WZ)
   & (-menu_txt()='dołącz' | (RS.cntx_psh(); _ok:={? RS.get() || SLU.WZ=RS.WZ || 1 ?}; RS.cntx_pop(); _ok) )
|| _a:=0
|| _a:=1
?};
SLU.cntx_pop;
_a


\clr_rs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Czyści pola tabeli RS w zależności od zawartości bufora
::  OLD: \clr_rs/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? RS.TAB=''
|| RS.KOD:=RS.TR:='';
   RS.UD_TYP:=RS.UD_SCH:=null
|| {? RS.TAB<>'UD_DEF' || RS.UD_SCH:=null ?};
   {? RS.TAB<>'UD_SKL' & RS.TAB<>'UD_DEF' || RS.UD_TYP:=null ?}
?}


\ae_tsys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Po redakcji pola z akronimem tabeli systemu
::  OLD: \ae_tsys/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
exec('clr_rs','slo_slu');
{? fld=''
|| 1
|| TT_TSYS.prefix();
   {? TT_TSYS.find_key(fld())
   || fld(TT_TSYS.TAB);
      RS.KOD:=exec('pol_wz','slo_slu',RS.TAB); 1
   || FUN.info('Brak tabeli na liście tabel dostępnych do wyboru.'@); 0
   ?}
?}


\spr_rs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: rekord po dla tabeli RS
::  OLD: \spr_rs/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
exec('clr_rs','slo_slu');
_zwrot:='';
{? RS.WZ=''
|| FUN.info('Niewypełniona nazwa wzorca.'@); _zwrot:='WZ'
?};
{? _zwrot='' & (1+RS.WZ)='~'
|| FUN.info('Nazwy wzorców zaczynające się od znaku "~"\nsą zastrzeżone.'@); _zwrot:='WZ'
?};
{? _zwrot='' & ~(RS.WZ='prosty')
|| RS.cntx_psh(); RS.index('RS'); RS.prefix(RS.WZ);
   _wz:=RS.WZ; _ref:=RS.ref();
   {? RS.first()
   || {! |?
         {? _wz=RS.WZ & (-(1+menu_txt)='d' | RS.ref()<>_ref)
         || FUN.info('Nazwa wzorca \'%1\' już istnieje.'@[_wz]); _zwrot:='WZ'; 0
         || RS.next()
         ?}
      !}
   ?};
   RS.cntx_pop();
   {? _zwrot='WZ' & -(1+menu_txt)='d' || RS.WZ:='' ?};
   {? _zwrot='' & RS.TAB=''
   || FUN.info('Pole Tabela (TAB).\nNiewypełnione pole.'@); _zwrot:='TAB'
   ?};
   {? _zwrot='' & RS.KOD=''
   || FUN.info('Pole Kod (KOD).\nNiewypełnione pole.'@); _zwrot:='KOD'
   ?};
   {? _zwrot='' & RS.TR=''
   || FUN.info('Pole Treść (TR).\nNiewypełnione pole.'@); _zwrot:='TR'
   ?};
   {? _zwrot='' & (RS.TAB='UD_SKL' | RS.TAB='UD_DEF')
   || {? RS.UD_TYP=null
      || FUN.info('Pole Typ (UD_TYP).\nNiewypełnione pole dla tabeli %1.'@[RS.TAB]); _zwrot:='UD_TYP'
      |? RS.TAB='UD_DEF' & RS.UD_SCH=null
      || FUN.info('Pole Schemat (UD_SCH).\nNiewypełnione pole dla tabeli UD_DEF.'@); _zwrot:='UD_SCH'
      ?}
   ?};
   {? _zwrot='' & RS.TAB='SLO_OSOB'
   || {? RS.F_ZATR=null
      || FUN.info('Pole Rodzaj (F_ZATR).\nNiewypełnione pole dla tabeli %1.'@[RS.TAB]); _zwrot:='F_ZATR'
      ?}
   ?};
   {? _zwrot=''
   || _ref:=RS.ref(); RS.cntx_psh();
      {? RS.TAB='UD_DEF' | RS.TAB='UD_SKL'
      || RS.index('UNIK'); RS.prefix(RS.TAB,RS.TAB,RS.KOD,RS.KOD,RS.UD_TYP,RS.UD_SCH);
         {? RS.first() & {? -menu_txt='popraw' || RS.ref()<>_ref || 1 ?}
         || FUN.info('Istnieje już w systemie taki sam wzorzec z inną nazwą.'@); _zwrot:='TAB'
         ?}
      |? RS.TAB='SLO_OSOB'
      || RS.index('F_ZATR'); RS.prefix(RS.TAB,RS.TAB,RS.KOD,RS.KOD,RS.F_ZATR);
         {? RS.first() & {? -menu_txt='popraw' || RS.ref()<>_ref || 1 ?}
         || FUN.info('Istnieje już w systemie taki sam wzorzec z inną nazwą.'@); _zwrot:='TAB'
         ?}
      || RS.index('TAB_POLE'); RS.prefix(RS.TAB,RS.TAB,RS.KOD,RS.KOD);
         {? RS.first() & {? -menu_txt='popraw' || RS.ref()<>_ref || 1 ?}
         || FUN.info('Istnieje już w systemie wzorzec oparty o tabelę %1.'@[RS.TAB]); _zwrot:='TAB'
         ?}
      ?};
      RS.cntx_pop()
   ?}
?};
_zwrot


\f3_tsys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Na F3 dla pola z akronimem tabeli systemu
::  OLD: \f3_tsys/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TT_TSYS')>100
|| TT_TSYS.prefix();
   {? ~TT_TSYS.find_key(fld()) || TT_TSYS.first() ?};
   {? TT_TSYS.select(,1) || TT_TSYS.TAB || 0 ?}
|| 0
?}


\pol_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2006]
:: OPIS: Ustala pole wzorca (KOD) dla zadanej tabeli
::   WE: _a - akronim tabeli
::  OLD: \pol_wz/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=''; _end:=0;
_acrs:={? Plugin.runnable('RS_TSYS_001') || Plugin.run('RS_TSYS_001') || '' ?};
{? _acrs<>''
|| STR.split(_acrs,',');
   {! |?
      _acr:=STR.get_word();
      {? _a=_acr
      || _tmp:=STR.get_word();
         _tabela:=($_acr)();
         {? var_pres(_tmp,_tabela)>0
         || _wyn:=_tmp
         || _wyn:=''; _end:=1
         ?}
      ?};
      {? _wyn='' & _end=0
      || _tmp:=STR.get_word();
         STR.next()
      || 0
      ?}
   !}
?};
{? _wyn=''
|| {? _a='B' || 'KOD'
   |? _a='OSOBA' || 'IMEX'
   |? _a='UD_SKL' || 'SYMBOL'
   |? _a='KRAJE' || 'SYM'
   |? _a='OS' || 'KOD'
   |? _a='SLO_OSOB' || 'ID'
   |? _a='SKID_RBK' || 'KOD'
   |? _a='UDT' || 'ID_KSG'
   |? _a='US' || 'SYM'
   |? _a='WAL' || 'SYM'
   |? _a='UD_DEF' || 'SYMBOL'
   |? _a='ZL' || 'ID_KSG'
   |? _a='KH' || 'KOD'
   |? _a='PROJEKTY' || 'ID_KSG'
   |? _a='FIRMA' || 'SYMBOL'
::Początek modyfikacji dla Maclex 12-31-2009 WS [1110]
   |? _a='ML_CZ' || 'SYM'
   |? _a='ML_DZ' || 'SD'
   |? _a='ML_PG' || 'SP'
   |? _a='ML_PP' || 'KP'
   |? _a='ML_RZ' || 'SR'
   |? _a='ML_ZAD' || 'KOD'
   |? _a='ML_DZLAN' || 'KOD'
   |? _a='ML_FUN' || 'KOD'
   |? _a='ML_PODZ' || 'KOD'
::Koniec modyfikacji dla Maclex
   ?}
|| _wyn
?}


\spr_tr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [?????]
:: OPIS: sprawdzenie formuły generującej pole treść słownika użytkownika
::       po redagowaniu pola treść tabela RS
::  OLD: \spr_tr/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? RS.TAB<>'' & fld<>''
||
   _a:=1;
   on_error(2);
   no_msg(1);
   ($('{|'+RS.TAB+'|!'+fld+'|}'))();
   no_msg();
   {? in_error()
   ||
      FUN.info('Błąd w formule generującej pole TREŚĆ słownika.'@);
      _a:=0
   ?};
   on_error;
   _a
||
   1
?}


\be_rs_ud
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Przed redakcją pol RS.UD_TYP i RS.UD_SCH
::   WE: _a - 1-UD_TYP lub 0-UD_SCH
::  OLD: \be_rs_ud/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| RS.TAB='UD_SKL' | RS.TAB='UD_DEF'
|| RS.TAB='UD_DEF' &
   {? RS.UD_TYP || UD_SCH.index('SYMBOL'); UD_SCH.prefix(RS.UD_TYP); 1 || 0 ?}
?}


\ae_rstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Po redakcji pola RS.UD_TYP
::  OLD: \ae_rstyp/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? chk_fld()
|| {? RS.UD_SCH & RS.UD_SCH().UD_TYP<>RS.UD_TYP || RS.UD_SCH:=null ?};
   1
?}


\be_rs_f_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Przed redakcją pol RS.F_ZATR
::  OLD: \be_rs_f_zatr/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
RS.TAB='SLO_OSOB'


\test_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Formuła testuje czy można poprawiać lub usuwać rekord,
::  OLD: \test_slo/war_tech.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_pref:=REF.S_FIRMA().SYMBOL;
_edit:=1;
_par300233:=exec('get','#params',300233,2);
{? REF.WFIRM & _par300233='N'
|| RS.cntx_psh();
   RS.index('RS');
   RS.prefix();
   {? SLO.size()>0
   || {? RS.find_key(SLO.SLU().WZ) & RS.TAB<>''
      || {? exec('czy_tab_glob','#table',RS.TAB)=0
         || {? 3+SLO.KOD<>_pref || _edit:=0 ?}
         ?}
      ?}
   ?};
   RS.cntx_pop()
?};
_edit


\spr_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [7.60]
:: OPIS: Formuła sprawdza czy wzorzec słownika jest oparty na tabeli źródłowej.
::   WE: _a - nazwa wzorca słownika
::      _b - opcjonalnie zmienna do przekazania ref-a tabeli wzorca (RS)
::   WY: 1 - wzorzec jest oparty na tabeli źródłowej, 0 - wpp
::  OLD: \spr_wz/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
RS.cntx_psh(); RS.index('RS'); RS.prefix(_a);
{? RS.first()
|| {? RS.TAB='' || _ok:=0 ?};
   {? _>1 || _b[1]:=RS.ref() ?}
?};
RS.cntx_pop();
_ok


\del_slo_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Formuła zwraca zawartość pola SLO.KOD bez symbolu firmy w przypadku instalacji wielofirmowej i słowników
::       opartych na tabelach lokalnych
::  OLD: \del_slo_kod/war_tech.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_pref:=REF.S_FIRMA().SYMBOL;
_par300233:=exec('get','#params',300233,2);
_wy:=SLO.KOD;
{? REF.WFIRM & _par300233='N'
|| RS.cntx_psh(); RS.index('RS'); RS.prefix();
   {? RS.find_key(SLO.SLU().WZ) & RS.TAB<>''
   || {? exec('czy_tab_glob','#table',RS.TAB)=0
      || {? 3+_wy=_pref || _wy:=3-_wy ?}
      ?}
   ?};
   RS.cntx_pop()
?};
_wy


\wz_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS: Odszukanie odpowiedniego rekordu tabeli.
::       Funkcja wykorzystywana przy obsłudze słownika SLO.
::       Podczytuje odpowiedni rekord tabeli, z której utworzono pozycję
::       słownika SLO.
::  OLD: \wz_szuk/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
pier_raz:=0; ref_pier:=null; zwrot:=0; zwrot1:=1;
REF.SLOKOD:=exec('del_slo_kod','slo_slu');
_slo_kod:='{?type_of('+RS.TAB+'.'+RS.KOD+')=1|| #REF.SLOKOD || REF.SLOKOD ?}';

{? (RS.TAB<>'')&(_rodz:='ML_CZ,ML_DZ,ML_RZ,ML_PG,ML_PP'*RS.TAB)
|| {? _rodz=1
   || ML_CZ.index('CZSYM')
   |? _rodz=7
   || ML_DZ.index('DZSDND')
   |? _rodz=13
   || ML_RZ.index('RZSRNR')
   |? _rodz=19
   || ML_PG.index('PGSPNP')
   |? _rodz=25
   || ML_PP.index('PPRZKP')
   ?};
   ($(RS.TAB+'.prefix(ROK_F.ref)'))()
|? (RS.TAB<>'')&(_rodz:='ML_FUN,ML_ZAD,ML_PODZ,ML_DZLAN'*RS.TAB)
||
   {? _rodz=1
   || ML_FUN.index('MLFUNRK')
   |? _rodz=8
   || ML_ZAD.index('MLZADRK')
   |? _rodz=15
   || ML_PODZ.index('MLPODZRK')
   |? _rodz=23
   || ML_DZLAN.index('MLDZLARF')
   ?};
   ($(RS.TAB+'.prefix(ROK_F.ref)'))()
?};
_f:=$('{!|?'+RS.TAB+'.prefix();'+
             RS.TAB+'.blank(1);'+
             RS.TAB+'.'+RS.KOD+':='+_slo_kod+';'+
             'zwrot:=~('+RS.TAB+'.find_rec &'+RS.TAB+'.'+RS.KOD+'='+_slo_kod+');'+
             '{? pier_raz=0 || ref_pier:='+RS.TAB+'.ref(); pier_raz:=1 || pier_raz:=2 ?};'+
             'zwrot & {? pier_raz=2 || zwrot1:=ref_pier<>'+RS.TAB+'.ref(); zwrot1 || 1 ?}'+
       '!}');
{? RS.TAB='UD_DEF' || UD_DEF.index('PODTEC'); UD_DEF.prefix(RS.UD_SCH) ?};
_f();
_zwrot:=(zwrot=0 & zwrot1);
&zwrot; &zwrot1; &pier_raz; &ref_pier;
{? ~_zwrot
|| {? RS.TAB='UD_DEF'
   || UD_SKL.index('SYMBOL'); UD_SKL.prefix(RS.UD_TYP,SLO.KOD,SLO.KOD);
      {? UD_SKL.first()
      || _zwrot:=FUN.ask('Nie znaleziono odpowiedniego rekordu w tabeli zawierającej strukturę hierarchiczną.\n'
                         'Wykonać operację na tabeli elementów?'@)*-1;
         {? _zwrot=-1 & 0
         || RS.index('TAB'); RS.prefix(); RS.find_key('UD_SKL','UD_SKL')
         ?}
      || FUN.info('Nie znaleziono odpowiedniego rekordu w tabeli zawierającej strukturę hierarchiczną ani '
                  '\nw tabeli elementów.'@)
      ?}
   || FUN.info('Nie znaleziono odpowiedniego rekordu w tabeli %1.'@[RS.TAB])
   ?}
?};
_zwrot


\cn_psh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS:
::  OLD: \cn_psh/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
RS.cntx_psh();
SLUAPPL.cntx_psh();
SLU.cntx_psh();
SLO.cntx_psh();
1


\cn_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS:
::  OLD: \cn_pop/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
RS.cntx_pop();
SLUAPPL.cntx_pop();
SLU.cntx_pop();
SLO.cntx_pop();
1


\slo_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO []
:: OPIS: Zamienia kod tabeli RS.TAB na string.
::       Funkcja wykorzystywana przy tworzeniu zawartości słownika
::       ogólnego SLO. Zwraca odpowiednio sformatowany kod lub treść pozycji
::   WE: _a=1  -- formatowanie kodu
::       _a=2  -- formatowanie treści
::  OLD: \slo_kod/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| _f:=$(RS.TAB+'.get(); type_of('+RS.TAB+'.'+RS.KOD+')');
   _g:=$('form('+RS.TAB+'.'+RS.KOD+',-SLU.DL)');
   _h:=$('form('+RS.TAB+'.'+RS.KOD+',SLU.DL)');
   _i:=$('(20*\'0\'+$'+RS.TAB+'.'+RS.KOD+')+SLU.DL')
|| _f:=$(RS.TAB+'.get(); type_of( {|'+RS.TAB+'|!'+RS.TR+'|})');
   _g:=$('form( {|'+RS.TAB+'|!'+RS.TR+'|})');
   _h:=$('form( {|'+RS.TAB+'|!'+RS.TR+'|})');
   _i:=$('(20*\'0\'+$({|'+RS.TAB+'|!'+RS.TR+'|}))+SLU.DL')
?};
_typ:=_f();
{? _typ=1 || _i() |?_typ<>2 || _g() || _h() ?}


\pop_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Podczas poprawiania rekordów w tabelach bazowych objętych wzorcami
::       poprawia powiązane pozycje w słownikach użytkownika.
::       Rekord w tabeli bazowej musi byc podczytany.
::   WE: _a - akronim tabeli zrodlowej
::   WY: czy udało sie poprawić rekord w SLO
::  OLD: \pop_slo/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
popwslo:=1;
_par300233:=exec('get','#params',300233,2);
RS.cntx_psh();
_wz:={? _a='SLO_OSOB' || P.F_ZATR().KOD  || '' ?};
{? _wz<>''
|| _ind:=RS.ndx_tmp(,1,'TAB',,0,'F_ZATR','KOD',0);
   RS.index(_ind); RS.prefix(_a,_wz)
|| RS.index('TAB'); RS.prefix(_a,_a)
?};
{? RS.first()
|| SLU.cntx_psh(); SLU.index('WZORZEC');
   SLO.cntx_psh(); SLO.index('SL');
   {! |?
      SLU.prefix(RS.WZ);
      {? SLU.first()
      || {! |?
            _kod:={? _a='B'
                  || B.KOD
                  || ($('{? type_of('+RS.TAB+'.'+RS.KOD+')=2
                      || SLU.DL+form('+RS.TAB+'.'+RS.KOD+')
                      || form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,'+"'1'"+')
                      ?}'))()
                  ?};
            _pref:=REF.S_FIRMA().SYMBOL;
            {? REF.WFIRM & RS.TAB<>'' & _par300233='N'
            || {? exec('czy_tab_glob','#table',RS.TAB)=0
               || {? 3+_kod<>_pref
                  || {? (+_kod)+3>SLU.DL || _kod:=_kod+(SLU.DL-3) ?};
                     _kod:=_pref+_kod
                  ?}
               ?}
            ?};
            {? SLU.WZ=RS.WZ & (+_kod)=SLU.DL
            || SLO.prefix(SLU.ref());
               {? SLO.find_key(_kod) & _kod=SLO.KOD
               || ($('SLO.TR:={|'+_a+'|!'+RS.TR+'|}; popwslo:=SLO.put()'))()
               ?}
            ?};
            popwslo & SLU.next()
         !}
      ?};
      popwslo & RS.next()
   !};
   SLU.cntx_pop(); SLO.cntx_pop()
?};
{? var_pres('_ind')>0 || RS.ndx_drop(_ind) ?};
RS.cntx_pop();
_popwslo:=popwslo; VAR_DEL.delete('popwslo');
_popwslo


\kod2id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Zwraca zawartość pola RS.KOD tabeli RS.TAB
::  OLD: \kod2id/skid_oso.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_a:=$(RS.TAB+'.'+RS.KOD);
_par300233:=exec('get','#params',300233,2);
{? type_of(_a())=1
|| {? REF.WFIRM & RS.TAB<>'' & exec('czy_tab_glob','#table',RS.TAB)=0 & _par300233='N'
   || #(3-SLO.KOD)
   || #SLO.KOD
   ?}
|| {? REF.WFIRM & RS.TAB<>'' & exec('czy_tab_glob','#table',RS.TAB)=0 & _par300233='N'
   || 3-SLO.KOD
   || SLO.KOD
   ?}
?}


\chk_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: rekord po dla tabeli WAL
::  OLD: \chk_wal/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(WAL,,'SYM','KRAJ','NAZ','KOD','J')


\pop_subkonta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [11.22]
:: OPIS: Uaktualnia subkonta
::  OLD: \pop_subkonta/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_wal:=SKID_RBK.WAL;
_ref:=#SKID_RBK.ref();
SKID_RBK.cntx_psh();
SKID_RBK.index('SKID_RBK');
SKID_RBK.prefix(_ref);
{? SKID_RBK.first()
|| {! |?
         SKID_RBK.WAL:=_wal;
         SKID_RBK.put();
         SKID_RBK.next()
   !}
?};
SKID_RBK.cntx_pop()


\akr_red_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Zwraca akronim redagowanej tabeli (tabela musi być tabelą posiadajacą wzorzec RS)
::  OLD: \akr_red_tab/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
{? _tab=B || 'B'
|? _tab=OSOBA || 'OSOBA'
|? _tab=UD_SKL || 'UD_SKL'
|? _tab=KH || 'KH'
|? _tab=KRAJE || 'KRAJE'
|? _tab=OS || 'OS'
|? _tab=SLO_OSOB || 'SLO_OSOB'
|? _tab=SKID_RBK || 'SKID_RBK'
|? _tab=UDT || 'UDT'
|? _tab=US || 'US'
|? _tab=WAL || 'WAL'
|? _tab=UD_DEF || 'UD_DEF'
|? _tab=ZL || 'ZL'
|| ''
?}


\pored_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formuła przed wyświetleniem pola zmiennej obsługującego pole o złączeniu do SLUAPPL
::   WE: _a - akronim pola [tabela].[pole] którego dotyczy wywołanie
::       _b - akronim pola zmiennej, z której formuła jest wywoływana
::       _c - dodatkowa formuła sprawdzająca poprawność danych
::   WY: 1/0 poprawna nazwa słownika/zła nazwa słownika
::  OLD: \pored_slu/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_PoleTab:=$(_a);
_PoleZm:=$(_b);
_Formula:=_c;
_Wynik:=1;
SLUAPPL.index('NAZ'); SLUAPPL.prefix({? cur_tab(1,1)=SKID_WYR || 'F' || exec('prfx_slu','slo_slu') ?});
{? _PoleZm()<>''
|| {? SLUAPPL.find_key(_PoleZm())
   || _PoleZm():=SLUAPPL.SLU().NAZ;
      {? _PoleTab<>'' || ($(_a+':=SLUAPPL.ref()'))() ?};
      SLO.index('SL');
      SLO.prefix(SLUAPPL.SLU);
      {? _c<>'' || _Wynik:=($_Formula)() ?}
   || _Wynik:=0; FUN.info('Brak słownika o takiej nazwie.'@)
   ?}
|| {? _PoleTab<>'' || ($(_a+':=null'))() ?}
?};
_Wynik


\slu_okn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formuła ustawiająca okienko red. dla tabeli SLO
::  OLD: \slu_okn/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
exec('pw_kodsl','slo_slu',0)


\allow_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Sprawdza czy dozwolone jest wejście w rachunki bankowe tj.
::       czy słownik jest na wzorcu KH lub US.
::  OLD: \allow_rb/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
RS.index('RS'); RS.prefix();
{? RS.find_key(SLO.SLU().WZ)
|| {? RS.TAB='KH'
   || KH.index('KOD'); KH.prefix(2); KH.find_key(SLO.KOD)
   || {? RS.TAB<>'US'
      || FUN.info('Funkcja dotyczy wyłącznie\nsłowników kontrahentów, pracowników lub urzędów skarbowych.'@); 0
      || US.index('URZSKNAZ'); US.prefix(); US.find_key(SLO.TR)
      ?}
   ?}
?}


\bv_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Przed wyświetl dla okien tabeli SLO
::  OLD: \bv_slo/skid_slu
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
exec('pw_kodsl','slo_slu');
SLO.display()


\wz_rbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [7.62]
:: OPIS: Wartość pola TR tabeli RS dla wzorca rachunków bankowych
::   WY: Zwraca pełny numer rachunku bankowego
::  OLD: \wz_rbk/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
RB.get_rbtx(1,SKID_RBK.ref())


\get_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [7.60]
:: OPIS: Pobranie zawartości parametru
::   WE: _a - SLO ref
::       _b - nr parametru
::   WY: zawartość parametru
::  OLD: \get_par/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
ZR_SLO.index('SLO_NR');
ZR_SLO.prefix(_a,_b);
{? ZR_SLO.first() || ZR_SLO.WAR || '' ?}


\new_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.60]
:: OPIS: Formuła wypełnia i dodaje rekord tabeli ZR_DSLO
::   WE: _a - rodzaj wzorca (ref RS)
::       _b - nr parametru
::       _c - nazwa parametru
::       _d - typ parametru
::   WY: 1 - brak wypełnienia parametru lub wartość tego parametru
::  OLD: \new_par/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
ZR_DSLO.index('WZ_NR');
ZR_DSLO.prefix();
{? ~ZR_DSLO.find_key(_a,_b)
|| ZR_DSLO.blank();
   ZR_DSLO.RS:=_a;
   ZR_DSLO.NR:=_b;
   ZR_DSLO.NAZ:=_c;
   ZR_DSLO.TYP:=_d;
   ZR_DSLO.add(1)
?}


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Funkcja przed akcja Usuń, dla słownikow ogólnych.
::       Sprawdza, czy rekord został użyty w SLO i dopuszcza lub blokuje
::   WE: _a - akronim tabeli
::   WY: czy można usunąć
::  OLD: \usun/ogolne.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_slo','slo_slu',_a)
|| FUN.info('Rekord wykorzystywany w słownikach użytkownika.'@); 0
|? _a='US' & US.ref()=XINFO.URZAD
|| FUN.info('Urząd wskazany w danych licencjobiorcy.'@); 0
|? _a='US'
|| SKID_RBK.cntx_psh();
   SKID_RBK.index('TAB');
   SKID_RBK.prefix(null,'US','US',#US.ref());
   {? SKID_RBK.first()
   || FUN.emsg('Urząd posiada przypisane rachunki bankowe.'@); _wy:=0

   || _wy:=1
   ?};
   SKID_RBK.cntx_pop();
   {? _wy & US.count()>0
   || FUN.emsg('Urząd jest wykorzystywany w systemie i nie można go usunąć.'@); _wy:=0
   ?};
   _wy
|| 1
?}


\czy_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [8.60]
:: OPIS: Właściwa formuła sprawdzajaca, czy rekord został użyty
::       w SLOWNIKACH UŻYTKOWNIKA
::   WE: _a - akronim tabeli z której usuwany jest rekord
::   WY: =1 - rekord uzyty w SLO
::       =0 - wpp.
::  OLD: \czy_slo/skid_lb0.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_par300233:=exec('get','#params',300233,2);
RS.cntx_psh(); RS.index('RS'); RS.prefix();
_w:=0;
{? RS.first()
|| SLO.cntx_psh();
   {! |?
      {? RS.TAB=_a
      || _typ:=type_of(($(RS.TAB+'.'+RS.KOD))())=1;
         SLU.index('WZORZEC'); SLU.prefix(RS.WZ,);
         {? SLU.first()
         || {!
            |? {? _typ
               || _kod:=$('form('+RS.TAB+'.'+RS.KOD+',-'+$SLU.DL+',,\'0\')')
               || _kod:=$('form('+RS.TAB+'.'+RS.KOD+')')
               ?};
               _wkod:=_kod();
               {? ~(RS.TAB='B' & _wkod='')
               || {? REF.WFIRM=1 & exec('czy_tab_glob','#table',RS.TAB)=0 & 3+_wkod<>REF.FIRMA().SYMBOL & _par300233='N'
                  || _wkod:=REF.FIRMA().SYMBOL+(3-_wkod)
                  ?};
                  SLO.index('SL'); SLO.prefix(SLU.ref(),_wkod);
                  {? SLO.first()
                  || {!
                     |? {? +form(SLO.SLU().WZ)=+form(RS.WZ) & SLO.SLU().DL=+_wkod || _w:=1 ?};
                        ~_w & SLO.next()
                     !}
                  ?}
               ?};
               ~_w & SLU.next()
            !}
         ?}
      ?};
      ~_w & RS.next()
   !};
   SLO.cntx_pop()
?};
RS.cntx_pop();
_w


\ini_tsys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Tworzy słownik z akronimami tabel systemu
::  OLD: \ini_tsys/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TT_TSYS');
TT_TSYS:=tab_tmp(1,'TAB','STRING[8]','Akronim','OPIS','STRING[60]','Opis');
{! _i:=1..tab_num()
|! _tab:=tab_acr(_i);
   {? exec('tab_wz','slo_slu',_tab) & tab_real(_i) & ($(_tab+'.tab_read'))()
   || TT_TSYS.TAB:=_tab;
      TT_TSYS.OPIS:=($(_tab+'.comment'))();
      {? _tab<>'' || TT_TSYS.add() ?}
   ?}
!};
_win_sel:=TT_TSYS.mk_sel('Tabele systemu'@,'P',1,'tt_tsys_wer',,,,,'U');
TT_TSYS.win_act(_win_sel,0,'Formuła','Wybierz'@@,,'Wybór tabeli'@,"sel_exit()",,1,,,,'W');
TT_TSYS.win_sel(_win_sel)


\tab_wz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2006]
:: OPIS: Sprawdza czy podana tabela może byc podana jako tabela wzorca
::   WE: _a - akronim tabeli
::  OLD: \tab_wz/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_acrs:={? Plugin.runnable('RS_TSYS_001') || Plugin.run('RS_TSYS_001') || '' ?};
_wyn:=0; _end:=0;
{? _acrs<>''
|| STR.split(_acrs,',');
   {! |?
      _acr:=STR.get_word();
      {? _a=_acr
      || _tmp:=STR.get_word();
         _tabela:=($_acr)();
         {? var_pres(_tmp,_tabela)>0
         || _wyn+=1
         || _end+=1
         ?}
      ?};
      _tmp:=STR.get_word();
      STR.next() & (~_wyn) & (~_end)
   !}
?};
_wyn |
_a='B' | _a='OSOBA' | _a='UD_SKL' | _a='KH' | _a='KRAJE' | _a='OS' | _a='SLO_OSOB' |
_a='SKID_RBK' | _a='UDT' | _a='US' | _a='WAL' | _a='UD_DEF' | _a='ZL' | _a='UDT' | _a='PROJEKTY' |
_a='FIRMA'
::Poczatek modyfikacji dla Maclex 12-31-2009 WS [1110]
| _a='ML_CZ' | _a='ML_DZ' | _a='ML_PG' | _a='ML_RZ' | _a='ML_PP'
| _a='ML_ZAD' | _a='ML_DZLAN' | _a='ML_FUN' | _a='ML_PODZ'
::Koniec modyfikacji dla Maclex


\id2kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Zwraca kod pozycji słownika na podstawie aktualnej pozycji tabeli
::       wzorca i tabeli źródłowej wzorca
::   WE: _a - dopelniać kod zerami? 1-tak, [0]-nie
::   WY: kod pozycji słownika
::  OLD: \id2kod/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_kod:=($(RS.TAB+'.'+RS.KOD))();
_kod:={? type_of(_kod)=1 || $_kod || _kod ?};
{? _a || (8*'0'+_kod)+SLU.DL || SLU.DL+_kod ?}


\br_sluappl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2010]
:: OPIS: Rekord przed okien SLUAPPL
::  OLD: \br_sluappl/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
SLUAPPL.SLU(); exec('rekprzed','color','SLU#01#')


\slo_slu2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.40]
:: OPIS: Znajduje slownik w SLU o podanej nazwie i ustawia okienko slownika dla SLO
::   WE: _a - nazwa slownika
::       [_b] - akronim okienka wertowania SLO
::  OLD: \slo_slu2/skid.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.index('NAZ');
SLO.index('SL'); SLU.prefix();
{? SLU.find_key(_a)
|| SLO.prefix(SLU.ref)
|| FUN.info('Brak słownika: %1.'@[_a])
?};
{? _>1 & form(_b)<>'' || SLO.win_dict(_b); SLO.win_sel(_b) ?};
1


\wz_stvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: ustawia slownik stawek VAT
::   WE: _a - kod kraju dla stawki VAT
::  OLD: \wz_stvat/wzorce.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a='' || _a:='PL' ?};
exec('slo_slu2','slo_slu','~STAWKI VAT '+_a,'ONE');
''


\wz_grvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: ustawia slownik grup VAT
::  OLD: \wz_grvat/wzorce.fml
::----------------------------------------------------------------------------------------------------------------------
FINFO.SLGRVAT().SLU(); ''


\kod_pl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.40]
:: OPIS: Formula zwraca ref SLO dla podanego kodu w slowniku ~KRAJE UE
::   WE: [_a - kod kraju, domyslnie _a='PL']
::   WY: ref SLO
::  OLD: \kod_pl/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
{? _=0 || _a:='PL' ?};
SLUAPPL.cntx_psh();
SLO.cntx_psh();
SLUAPPL.index('NAZ');
SLUAPPL.prefix('F','~KRAJE UE');
{? SLUAPPL.first() & _a<>''
|| SLO.index('SL');
   SLO.prefix(SLUAPPL.SLU,_a);
   {? SLO.first() || _ref:=SLO.ref ?}
?};
SLUAPPL.cntx_pop();
SLO.cntx_pop();
_ref


\kod_pln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.40]
:: OPIS: Formula zwraca ref SLO dla podanego kodu w slowniku ~KRAJE UE
::   WE: [_a - kod kraju, domyslnie _a='PL']
::   WY: ref SLO
::  OLD: \kod_pl/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
{? _=0 || _a:='PLN' ?};
SLUAPPL.cntx_psh();
SLO.cntx_psh();
SLUAPPL.index('NAZ');
SLUAPPL.prefix('F','WALUTY');
{? SLUAPPL.first() & _a<>''
|| SLO.index('SL');
   SLO.prefix(SLUAPPL.SLU,_a);
   {? SLO.first() || _ref:=SLO.ref ?}
?};
SLUAPPL.cntx_pop();
SLO.cntx_pop();
_ref


\slo_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Zwraca SLO.ref()
::  OLD: \slo_ref/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.ref()


\wz_rdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: ustawia slownik rodzaje dokumentow
::  OLD: \wz_rdok/wzorce.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.index('NAZ');
SLU.prefix();
SLU.find_key('~RODZAJE DOKUMENTÓW');
''


\slownik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2008]
:: OPIS: Formula przed na akcje Dolacz okna wertowania tabeli SLUAPPL
::  OLD: \slownik/fiks.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.index('NAZ'); SLU.prefix();
B.win_sel('WER');
KH.win_sel('WER');
OS.win_sel('WER');
US.win_sel('SEL');
WAL.win_sel('WALUTY'); WAL.win_dict('WALUTYF3');
WAL.win_edit('WALUTA'); WAL.win_patt('SZUK');
WOJEWODZ.win_sel('WOJEWODZ');
SLU.hdr_sel();
SLU.select(,1)


\slu_spac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [??]
:: OPIS: na spacje w oknie sluappl
:: \slu_spac/sloslu.fml
::----------------------------------------------------------------------------------------------------------------------
SLUAPPL.SLU();
SLU.display()


\bl_gdzie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: wartość początkowa pola SLUAPPL.GDZIE
::  OLD: \bl_gdzie/skid.fml
::----------------------------------------------------------------------------------------------------------------------
'F'


\spr_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ?? [??]
:: OPIS:
::  OLD: \spr_slu/sluappl.fml
::----------------------------------------------------------------------------------------------------------------------
_pole:=__CHK.record(POMOC,,'NAZSLU','DLSLU');
{? _pole=''
|| {? POMOC.NAZSLU=nazslu
   || FUN.emsg('Wprowadź nazwę inną niż nazwa słownika\nktóry jest kopiowany.'@);
      _pole:='NAZSLU'
   |? 1+POMOC.NAZSLU='~'
   || FUN.emsg('Jako pierwszy znak nazwy słownika\nnie może występować "~".'@);
      _pole:='NAZSLU'
   |? POMOC.DLSLU<dluslu | POMOC.DLSLU>8
   || FUN.emsg('Długość kodu słownika nie może być\nmniejsza od długości kodu słownika,\n'
               'który jest kopiowany i większa od 8.'@);
      _pole:='DLSLU'
   ?}
?};
_pole


\ten_slo_s
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formuła wyboru pozycji dodawanej do słownika użytkownika (SLO)
::  OLD: \ten_slo/skid_slu.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_vsel:={? _=2 || _b  || 1 ?};
RS.index('RS'); RS.prefix();
{? RS.find_key(SLU.WZ)
|| {? RS.TAB='OSOBA' & RS.KOD='IMEX' & OSOBA.get()
   || _imex:=OSOBA.IMEX; OSOBA.IMEX:=#OSOBA.ref(); OSOBA.put()
   || _imex:=0
   ?};
   _a:=$('{? ( type_of('+RS.TAB+'.'+RS.KOD+')=2 & SLU.DL<>+form('+RS.TAB+'.'+RS.KOD+') ) |'+
            '( type_of('+RS.TAB+'.'+RS.KOD+')=1 & SLU.DL<>+form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,'+"'1'"+') )'+
         '|| 1'+
         '|| 0'+
         '?}');
   _b:=$('SLO.KOD:={? type_of('+RS.TAB+'.'+RS.KOD+')=2'+
                  '|| SLU.DL+form('+RS.TAB+'.'+RS.KOD+')'+
                  '|| form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,'+"'1'"+')'+
                  '?}');
   _c:=$('SLO.TR:={|'+RS.TAB+'|!'+RS.TR+'|}');
   SLO.blank(); SLU.get();
   {? _a()
   || {? RS.TAB='OSOBA' & RS.KOD='IMEX' & OSOBA.get() & OSOBA.IMEX<>_imex
      || OSOBA.IMEX:=_imex; OSOBA.put()
      ?};
      FUN.info('Długość kodu niezgodna z definicją wzorca.'@);
      2
   |? RS.TAB='UD_SKL' & RS.UD_TYP().SYMBOL<>'PROJ_REM' & UD_SKL.LISTA='N'
   || FUN.info('Element nie jest wykorzystywany w ewidencji danych.'@); 2
   || _b();
      _c();
      {? SLO.add(1)
      || {? RS.TAB='ZL' || SLO_AKC:=SLO.actions(SLO.win_sel('?'),'P',,1) ?};
         slo_ref:=SLO.ref()
      || {? RS.TAB='OSOBA' & RS.KOD='IMEX' & OSOBA.get() & OSOBA.IMEX<>_imex
         || OSOBA.IMEX:=_imex; OSOBA.put()
         ?};
         {? SLO.find_key(SLO.KOD) || slo_ref:=SLO.ref() ?}
      ?};
      {? _vsel & RS.TAB<>'UD_DEF' & RS.TAB<>'UD_SKL' || sel_exit() ?};
      1
   ?}
|| FUN.info('Nie znaleziono wzorca słownika.'@); 2
?}


\ust_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.10]
:: OPIS: Funkcja Rekord przed w okienku wertowania tabeli SLO przy wypełnianiu
::       wyróżników podczas redakcji tabeli POZ
::  OLD: \ust_kw/skid_wyr.fml
::----------------------------------------------------------------------------------------------------------------------
::Początek modyfikacji dla Maclex Fiks 30.04.2009 EP [10.40]
_a:=SLO.win_sel('?');
{? _a='AU_ROZ'
|| TPOW1.prefix(OKNO.SLZ,SLO.KOD);
   _zwrot:={? TPOW1.first() || KA.KW:=TPOW1.KW; 1 ||  KA.KW:=0; 0 ?};
   {? _zwrot
   || _zwrot:='SLO#01#01'
   ?};
   _zwrot
|? _a='WYR' & MLEX.FIKSB
:: dodano kolorowanie niezgodnych wyróźników
|| _pow:=1;
   {? KS_W.LP>1
   || _pow:=exec('slo_br','ml_xpert','K')
   ?};
   {? ZMIENNE.POPRAW='T'
   || ZMIENNE.POPRAW:='N'
   || TPOW.prefix(KS_W.LP,SLU.NAZ,SLO.KOD);
      _zwrot:={? TPOW.first() || KA.KW:=TPOW.KW; 1 ||  KA.KW:=0; 0 ?};
      {? ~_pow & _zwrot
      || _zwrot:='SLO#01#01'
      |? _zwrot
      || _zwrot:='SLO#01#02'
      |? _pow
      || _zwrot:='SLO#01#03'
      ?};
      _zwrot
   ?}
||
::Koniec modyfikacji dla Maclex Fiks
   {? ZMIENNE.POPRAW='T'
   || ZMIENNE.POPRAW:='N'
   || TPOW.prefix(KS_W.LP,SLU.NAZ,SLO.KOD);
      _zwrot:={? TPOW.first() || KA.KW:=TPOW.KW; 1 ||  KA.KW:=0; 0 ?};
      {? _zwrot
      || _zwrot:='SLO#01#01'
      ?};
      _zwrot
   ?}
::Poczatek modyfikacji dla Maclex Fiks 12.10.2009 AK [1120]
?}
::Koniec modyfikacji dla Maclex Fiks


\slo_link
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Zwraca listę kodów w słowniku.
::       UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::   WE: _a - Akronim tabeli z wartościami wzorca.
::       _b - Akronim pola przypisanego jako kod.
::   WY: Alias do tabeli zawierającej kody lub ~~.
::  OLD: \slo_link/util.fml
::----------------------------------------------------------------------------------------------------------------------
_par300233:=exec('get','#params',300233,2);
_pre:=REF.WFIRM & exec('czy_tab_glob','#table',_a)=0 & _par300233='N';
_war:='';
{? _a='SLO_OSOB'
|| F_ZATR.cntx_psh();
   F_ZATR.index('UNIQUE'); F_ZATR.prefix();
   {? F_ZATR.find_key(__F_ZATR.P)
   || _war:='and RS.F_ZATR=\''+$F_ZATR.ref()+'\' '
   ?};
   F_ZATR.cntx_pop()
?};
sql('select cast('+{? _pre || 'SUBSTR(SLO.KOD,4,5)' || 'SLO.KOD' ?}+' as INTEGER_TYPE) IP, SLO.REFERENCE '+
    'from SLO join SLU join RS using(SLU.WZ,RS.WZ) '+
    'where RS.TAB=\':_a\' and RS.KOD=\':_b\' '+_war+
    'order by IP',_a,_b
)


\slo_test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2010]
:: OPIS: Sprawdza wystąpienie zapisu w słowniku.
::       UWAGA: Poprawność argumentów wywołania nie jest weryfikowana.
::   WE: _a - Akronim tabeli z wartościami wzorca.
::       _b - Akronim pola przypisanego jako kod.
::       _c - Szukany kod.
::       _d - Sposób obsługi komunikatu:
::            0 - Brak komunikacie o błędzie odczytu danych [domyślnie].
::            1 - W przypadku błędu, komunikat zostanie wyświetlony.
::   WY: -1 - Nie udało się odczytać kodów.
::        0 - Kod _c nie występuje w słowniku.
::        1 - Kod _c występuje w słowniku.
::  OLD: \slo_test/util.fml
::----------------------------------------------------------------------------------------------------------------------
_link:=exec('slo_link','slo_slu',_a,_b);
{? type_of(_link)=type_of(SLO)
|| _link.find_key(_c)
|| {? var_press('_d')=type_of(0) & _d
   || FUN.emsg('Wystąpił błąd odczytu danych.'@)
   ?};
   -1
?}


\ten_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Wybór rekordu tabeli bazowej - wprowadzenie do słownika
::  OLD: \ten_slo/wspol.fml
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_vsel:={? _ || _a  || 1?};
{? var_pres('sl_ref')>0 || SLU.seek(sl_ref) ?};
RS.index('RS'); RS.prefix();
{? RS.find_key(SLU.WZ)
|| _a:=$('{? (SLU.DL<>+form('+ RS.TAB+'.'+RS.KOD+') & type_of('+RS.TAB+'.'+RS.KOD+')=2) |
             (SLU.DL<>+form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,'+"'1'"+') & type_of('+RS.TAB+'.'+RS.KOD+')=1)
          || 1
          || 0
          ?}');
   _b:=$('SLO.KOD:={? type_of('+RS.TAB+'.'+RS.KOD+')=2
                   || SLU.DL+form('+RS.TAB+'.'+RS.KOD+')
                   || form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,'+"'1'"+')
                   ?}');
   _c:=$('SLO.TR:={|'+RS.TAB+'|!'+RS.TR+'|}');
   SLO.blank(); SLU.get();
   {? RS.TAB='OSOBA' & ~OSOBA.IMEX
   || FUN.info('Nie można wybrać danej osoby - niewypełnione pole z identyfikatorem systemowym.'@); 0
   |? ~_a()
   || _b(); _c();
      {? ~SLO.add(1)
      || {? RS.TAB='KH' & KH.sel_size()>1
         || 1
         |? SLO.f_active()>0
         || slokod:=SLO.KOD; sloref:=SLO.ref();
            SLO.f_each("{? SLO.KOD=slokod || sloref:=SLO.ref() ?}");
            SLO.f_seek(sloref)
         || {? SLO.index('?')='SL'
            || SLO.find_key(SLO.KOD)
            || sloref:=SLO.ref();
               SLO.cntx_psh();
               SLO.index('SL');
               {? SLO.find_key(SLO.KOD) || sloref:=SLO.ref() ?};
               SLO.cntx_pop();
               SLO.seek(sloref)
            ?}
         ?};
         VAR_DEL.delete('sloref','slokod')
      || {? SLO.f_active()>0 || SLO.f_rfresh() ?};
         {? var_pres('licz_gr')>0 || licz_gr+=1 ?};
         {? exec('lic','#b_domain','POR') & SLU.WZ='Waluta'
         || exec('porsloit_oper','portal_slowniki','add',SLO.KOD,SLO.TR,,,'Waluty')
         ?}
      ?};
      {? _vsel || sel_exit ?}; 1
   || {? (RS.TAB='KH' & KH.sel_size()=0) | RS.TAB<>'KH'
      || FUN.info('Długość kodu niezgodna z ustaloną w słowniku "%1" (%2).'@[SLU.NAZ,$SLU.DL])
      ?}; 2
   ?}
|| {? (RS.TAB='KH' & KH.sel_size()=0) | RS.TAB<>'KH' || FUN.info('Nie znaleziono wzorca słownika.'@) ?}; 2
?}


\jaki_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Funkcja znajduje slownik o podanej nazwie w slownikach
::       uzytkownika dla systemu FIKS. Funkcja ustawia odpowiednio SLUAPPL
::   WE: _a - nazwa slownika
::   WY: ref SLUAPPL odnalezionego slownika
::         null gdy brak slownika o podanej nazwie
::  OLD: \jaki_slu/skid_wyr.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SLUAPPL.index('NAZ');
SLUAPPL.prefix();
{? _a<>'' & SLUAPPL.find_key('F',_a) || _ref:=SLUAPPL.ref() ?};
_ref


\jaki_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.10]
:: OPIS: Formula znajduje ref tabeli SLO dla podanego slownika i kodu elementu
::       slownika
::   WE: _a - ref SLU
::       _b - kod (SLO.KOD)
::   WY: ref SLO
::  OLD: \jaki_slo/skid_wyr.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
SLO.index('SL');
SLO.prefix(_a);
{? _b<>'' & SLO.find_key(_b) || _ref:=SLO.ref() ?};
_ref


\wysw_war
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [7.60]
:: OPIS: Formula uzupelnia zmienna POMOC.ZRSL_WAR wartoscia parametru.
::       Wolana w definicji przed wyswietl pola POMOC.ZRSL_WAR z formuly WYSW_WAR
::   WY: 1 - brak wypelnienia parametru lub wartosc tego parametru
::  OLD: \wysw_war/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.ZRSL_WAR:='';
ZR_SLO.index('SLO_NR');
ZR_SLO.prefix();
{? ZR_SLO.find_key(SLO.ref(),ZR_DSLO.NR)
|| POMOC.ZRSL_WAR:=ZR_SLO.WAR
|| 1
?}


\spr_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [7.60]
:: OPIS: Formula sprawdza poprawnosc wprowadzonej wartosci parametru do pola ZR_SLO.WAR
::       przez zmianna HURT2.ZRSL_WAR. Wartosc musi byc zgodna z zadeklarowanym
::       typem parametru przechowywanym w polu ZR_DSLO.TYP.
::       Wolana w definicji po redakcji pola zminnej POMOC.ZRSL_WAR z formuly _SPR_TYP
::   WY: 1 - wprowadzona wartosc jest zgodna z typem parametru, 0 - wpp
::  OLD: \spr_typ/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
{? ZR_DSLO.TYP='STRING'
|| _ok:=1
|? ZR_DSLO.TYP='REAL'
|| _ok:={? #POMOC.ZRSL_WAR | ((+POMOC.ZRSL_WAR)*'0')=POMOC.ZRSL_WAR || 1 || 0 ?}
|? ZR_DSLO.TYP='INTEGER'
|| _ok:={? #POMOC.ZRSL_WAR | ((+POMOC.ZRSL_WAR)*'0')=POMOC.ZRSL_WAR
        || {? frac(#POMOC.ZRSL_WAR) || 0 || 1 ?}
        || 0
        ?}
|? ZR_DSLO.TYP='DATE'
|| _ok:=exec('spr_date','slo_slu',POMOC.ZRSL_WAR)
|? ZR_DSLO.TYP='TIME'
|| _ok:=exec('spr_time','slo_slu',POMOC.ZRSL_WAR)
|? ZR_DSLO.TYP='TAK_NIE'
|| POMOC.ZRSL_WAR:=~-POMOC.ZRSL_WAR;
   _ok:=(POMOC.ZRSL_WAR='T' | POMOC.ZRSL_WAR='N' | POMOC.ZRSL_WAR='')
|? ZR_DSLO.TYP='S_O_W'
|| _ok:=(POMOC.ZRSL_WAR='S' | POMOC.ZRSL_WAR='O' | POMOC.ZRSL_WAR='W' | POMOC.ZRSL_WAR='')
?};
{? ~_ok
|| {? ZR_DSLO.TYP='REAL'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić liczbę w postaci: 99999.999'@)
   |? ZR_DSLO.TYP='INTEGER'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić liczbę w postaci: 9999'@)
   |? ZR_DSLO.TYP='DATE'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić datę w postaci: rrrr/mm/dd'@)
   |? ZR_DSLO.TYP='TIME'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić czas w postaci: gg:mm'@)
   |? ZR_DSLO.TYP='TAK_NIE'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić Tak lub Nie w postaci: T lub N \n'
               'lub pole pozostawić puste.'@)
   |? ZR_DSLO.TYP='S_O_W'
   || FUN.info('Nieprawidłowy typ pola wartość.'
               '\nNależy wprowadzić S dla daty sprzedaży, O - otrzymania, W - wystawienia\n'
               'w postaci: S,O lub W \n'
               'lub pole pozostawić puste.'@)
   ?}
|| ZR_SLO.index('SLO_NR');
   ZR_SLO.prefix();
   {? ZR_SLO.find_key(SLO.ref(),ZR_DSLO.NR)
   || ZR_SLO.WAR:=POMOC.ZRSL_WAR;
      _ok:=ZR_SLO.put()
   || ZR_SLO.blank();
      ZR_SLO.WAR:=POMOC.ZRSL_WAR;
      _ok:=ZR_SLO.add()
   ?}
?};
_ok


\spr_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [7.60]
:: OPIS: Formula sprawdza czy podany STRING parametrem _a mozna prawdlowo zamienic na date.
::       Wołana z formuly \spr_typ w pliku slo_slu.fml
::   WE: _a - data w postaci stringu
::   WY: 1 - przekazany parametrem _a string mozna zamienic na date, 0 - wpp
::  OLD: \spr_date/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_ok:=( (#(4+_a) & 0<(#(4+_a))) | (4+_a)='0000');
{? _ok || _ok:=( ( (#(2+(_a+5))) & 0<(#(2+(_a+5))) & (#(2+(_a+5)))<13) | (2+(_a+5))='00') ?};
{? _ok || _ok:=( ( (#(_a+2)) & 0<(#(_a+2)) ) | (_a+2)='00') ?};
{? _ok
|| _mm:=(#(2+(_a+5)));
   _dd:=(#(_a+2));
   _ok:={?( _mm=1 | _mm=3 | _mm=5 | _mm=7 | _mm=8 | _mm=10 | _mm=12
          ) & _dd<32
        || _ok:=1
        |? ( _mm=2 | _mm=4 | _mm=6 | _mm=9 | _mm=11 ) & _dd<31
        || _ok:=1
        |?  _mm=2  & _dd<29
        || _ok:=1
        || _ok:=0
        ?}
?};
_ok


\spr_time
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [7.60]
:: OPIS: Formula sprawdza czy podany STRING parametrem _a mozna prawdlowo zamienic na czas
::       Wolana z formuły \spr_typ w pliku slo_slu.fml
::   WE: _a - czas w postaci stringu
::   WY: 1 - przekazany parametrem _a string mozna zamienic na czas, 0 - wpp
::  OLD: \spr_time/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_ok:=( ((#(_a+2)) & 0<=(#(_a+2)) & (#(_a+2))<60) | (_a+2)='00');
{? _ok || _ok:=( ((#(2+_a)) & 0<=(#(2+_a)) & (#(2+_a))<24) | (2+_a)='00') ?};
_ok


\bl_zrsn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2010]
:: OPIS: Wartosc poczatkowa pola ZR_SLO.NR
::  OLD: \bl_zrsn/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
ZR_DSLO.NR


\szukaj_oso
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula szukaj w okienku OSOBA tabeli SLO
::   WE: _a - szukanie dokladne (0) lub kontekstowe (1)
::       _b - akronim rzeczywiscie przeszukiwanej tabeli
::           (jesli pominieto jest to tabela "zawarta" w RS.TAB)
::  OLD: \szukaj/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
SLO_OSOB.cntx_psh();
SKID.KOD_OS:='';
OS.cntx_psh();
US.win_dict('SEL_DIC');
{? _=1 || _b:=RS.TAB ?};
{? var_pres('BUF') > 5 || obj_del(BUF) ?};
BUF:=obj_new(@.CLASS.BUFFER,_b);
refs:=finds:=0;
OSOBA.blank(1); BUF.save();
_c:=$(_b+'.cntx_psh()');
_c();
OSOBA.win_edit('WZO');
exec('edit_tab','slo_slu',_a,{? _>1 || _b ?});
_c:=$(_b+'.cntx_pop()');
_c();
{? var_pres('BUF') > 5 || obj_del(BUF); &BUF ?};
SLO_OSOB.cntx_pop();
OS.cntx_pop();
0


\edit_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula wolana z formuly szukajacej w okienku OSOBA tabeli SLO (szukaj,skid_oso)
::   WE: _a - szukanie dokladne (0) lub kontekstowe (1)
::       _b - akronim rzeczywiscie przeszukiwanej tabeli
::            (jesli pominieto jest to tabela "zawarta" w RS.TAB)
::  OLD: \edit_tab/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1 || _b:=RS.TAB ?};
($(_b+'.get()'))();
_c:=$(_b+'.edit()');
{! |?
   BUF.restore();
   _c() & exec('find','slo_slu',_a,{? _>1 || _b ?})
!}


\find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula wolana z formuly szukajacej w okienku OSOBA tabeli SLO (szukaj,skid_oso)
::       wolana z edit_tab w skid_oso.fml
::   WE: _a - szukanie dokladne (0) lub kontekstowe (1)
::       _b - akronim rzeczywiscie przeszukiwanej tabeli
::            (jesli pominieto jest to tabela "zawarta" w RS.TAB)
::  OLD: \find/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1 || _b:=RS.TAB ?}; _dalej:=0; os_ref:=null; refs:=finds:=0;
($(_b+'.cntx_psh()'))();
ilrekbaz:=1;
BUF.save(); _ok:=0; _ret:=1; _sloref:=SLO.ref();
{!|? {? _ret & exec('replay','slo_slu',_a,_b,_ok)
     || {! |?
            _ok:=FUN.choice('Znaleziono rekord:\n%1\n%2\n'@[SLO.KOD,SLO.TR],,'Wybierz'@,'Kontynuuj'@,'Edytuj'@,'Szczegóły >>'@);
           {? _ok=1
           || _ret:=_ok:=0
           |? _ok=0
           || SLO.seek(_sloref); _ret:=0
           || OSOBA.win_edit('WZO');
              {? RS.TAB='OSOBA'
              || OSOBA.cntx_psh(); OSOBA.index('IMEX'); OSOBA.prefix(); OSOBA.find_key(#SLO.KOD)
              || ($(RS.TAB+'.OSOBA()'))()
              ?};
              {? _ok=4
              || _c:=$(_b+'.display'); _c()
              ?};
              {? RS.TAB='OSOBA' || OSOBA.cntx_pop() ?};
              OSOBA.win_edit('WZO'); 0
           ?}
        !}
     || FUN.info('Rekordu nie znaleziono.'@)
     ?};
     {? _ok=1 | _ok=3 || 0 || _ok ?}
!}; &os_ref;
($(_b+'.cntx_pop()'))();
&ilrekbaz;
_ok


\replay
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula wolana z formuly szukajacej w okienku OSOBA tabeli SLO (szukaj,skid_oso)
::       wolana z find w skid_oso.fml
::   WE: _a - szukanie dokladne (0) lub kontekstowe (1)
::       _b - akronim rzeczywiscie przeszukiwanej tabeli
::       _c - 0 - pierwsze przeszukiwanie, 1 - kolejne
::  OLD: \replay/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
BUF.restore();
_d:=$(_b+'.ref()');
_e:=1; _ref_os:=null;
{!|? {? ilrekbaz=1
     || _f:=$(_b+'.find_rec('+$_a+')')
     || _f:=$('1')
     ?};
     {? _f() & _e & ((refs<>_d() & ~finds) | finds | ilrekbaz>1)
     || 1
     || finds:=1; _c:=0; 0
     ?}
|! {? ~refs & ~finds || refs:=_d() ?};
   ($(RS.TAB+'.cntx_psh()'))();
   c:=(_c=1 & os_ref=_d() & ($(RS.TAB+'.next()'))());
   ($(RS.TAB+'.cntx_pop()'))();
   {? ilrekbaz>1 & c=0 & _ref_os=OSOBA.ref() || c:=1 ?};
   _ref_os:=OSOBA.ref();
   os_ref:=_d();
   {? ($(RS.TAB+".seek(exec('fnd_oslo','slo_slu',c))"))()
   || {? exec('find_slo','slo_slu',_a)
      || finds:=1; refs:=_e:=0
      ?}
   || finds:=0
   ?}; &c;
   {? _e || BUF.restore() ?}
!};
{? _e=1 & |SKID.KOD_OS<>''
|| _ref_slo:=null;
   SLO.cntx_psh();
   BUF.restore();
   OSOBA.blank(1);
   {? BUF.is_equal()
   || SLO.blank(1);
      SLO.KOD:=SKID.KOD_OS;
      _e:=~SLO.find_rec(_a);
      {? ~_e || _ref_slo:=SLO.ref() ?}
   ?};
   SLO.cntx_pop();
   {? _ref_slo<>null
   || SLO.seek(_ref_slo);
      {? type_of(($(RS.TAB+'.'+RS.KOD))())=1
      || _b:=#SLO.KOD
      || _b:='\''+SLO.KOD+'\''
      ?};
      {? RS.TAB='OSOBA'
      || OSOBA.index('IMEX'); OSOBA.prefix()
      ?};
      _e:=~(($(RS.TAB+'.find_key('+$_b+')'))())
   ?}
?};
~_e


\find_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula wolana z formuly szukajacej w okienku OSOBA tabeli SLO (szukaj,skid_oso)
::       wolana z replay w skid_oso.fml
::   WE: _a - szukanie dokladne (0) lub kontekstowe (1)
::  OLD: \find_slo/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
_par300233:=exec('get','#params',300233,2);
SLO.cntx_psh();
_b:=$(RS.TAB+'.'+RS.KOD); _c:=0;
_d:=_b();
_rs_glob:={? RS.TAB<>'' & _par300233='N' || exec('czy_tab_glob','#table',RS.TAB) || 1 ?};
{? type_of(_d)<>2
|| {? REF.WFIRM & RS.TAB<>'' & _rs_glob=0
   || _d:=form(_d,-SLO.SLU().DL+(+REF.FIRMA().SYMBOL),,'99')
   || _d:=form(_d,-SLO.SLU().DL,,'99')
   ?}
?};
{? REF.WFIRM & RS.TAB<>'' & _rs_glob=0 || _d:=REF.FIRMA().SYMBOL+_d ?};
{? SLO.find_key(_d) &
  (|SKID.KOD_OS='' |
   (|SKID.KOD_OS<>'' & _a=1 & (SLO.KOD*SKID.KOD_OS)>0) |
   (|SKID.KOD_OS<>'' & _a=0 & SLO.KOD*SKID.KOD_OS=1)
  )
|| _c:=SLO.ref()
?};
SLO.cntx_pop();
{? _c || SLO.seek(_c); SLO.get(); 1 || 0 ?}


\fnd_oslo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Formula wolana z formuly szukajacej w okienku OSOBA tabeli SLO (szukaj,skid_oso)
::       wolana z replay w skid_oso.fml
::   WE: _a - 0 - pierwsze przeszukiwanie, 1 - kolejne
::  OLD: \fnd_oslo/skid_oso.fml
::----------------------------------------------------------------------------------------------------------------------
{? RS.TAB='OSOBA' || ilrekbaz:=1; return(OSOBA.ref()) ?};
_zwrot:=null;
{? RS.TAB='SLO_OSOB'
|| ($(RS.TAB+".index('OSOBA')"))(); ($(RS.TAB+'.prefix(OSOBA.ref(),RS.F_ZATR)'))()
|| ($(RS.TAB+".index('OSOBA')"))(); ($(RS.TAB+'.prefix(OSOBA.ref())'))()
?};
{? (~_a & ($(RS.TAB+'.first()'))())
|| ilrekbaz:=($(RS.TAB+'.size()'))();
   _zwrot:=($(RS.TAB+'.ref()'))()
|? _a
|| _ilrek:=($(RS.TAB+'.size()'))();
   {? _ilrek>1
   || {? ilrekbaz:=($(RS.TAB+'.next()'))();
         {? ilrekbaz>0 & _ilrek>ilrekbaz || ilrekbaz:=_ilrek ?};
         ilrekbaz
      || _zwrot:=($(RS.TAB+'.ref()'))()
      || ilrekbaz:=1
      ?};
      ($(RS.TAB+'.cntx_psh()'))();
      ilrekbaz:={? ($(RS.TAB+'.next()'))() || ilrekbaz || 1 ?};
      ($(RS.TAB+'.cntx_pop()'))()
   || ilrekbaz:=1
   ?}
|| ilrekbaz:=1
?};
_zwrot


\wz_wyst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: ustawia slownik uzytkownika
::  OLD: \wz_wyst/wzorce.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.index('POM');
SLU.prefix('T');
SLU.win_sel('WER2');
_def:=SLU.actions('WER2',,'W',1);
SLU.select();
SLU.actions('WER2',,_def,1);
''


\slo_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Wyświetlenie słownika
::   WE: _a - nazwa słownika
::       _b - akronim pola
::  OLD: \slo_slu/dok_zrd.fml
::----------------------------------------------------------------------------------------------------------------------
exec('slo_slu2','slo_slu',_a,_b)


\SLOzLpar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [8.50]
:: OPIS: Znajduje wskazanie do SLO uzytego w parametrach globalnych
::           Nie sprawdzamy poprawnosci wywolania, zakladamy swiadomosc
::           uzytkownika (programisty), ze wie co reprezentuje parametr
::           na liscie
::WOLANA:    (listaRat,skid_op); (jakaplat,pola2)
::WE: -      _a - wskazanie na SLU
::           _b - numer parametru globalnego
::WY: -      _slo - wskazanie na SLO
::  OLD: \SLOzLpar/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_slo:=0;
{? _=2
|| SLO.cntx_psh();
   SLO.index('SL');
   SLO.prefix();
   {? SLO.find_key(_a,PAR_SKID.get(_b))
   || _slo:=SLO.ref
   ?};
   SLO.cntx_pop()
?};
_slo


\akt_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Uaktualnienie rekordów w tabeli SLO wg wzorca
::   WE: _a - kod w słowniku
::       _b - treść w slowniku
::   WY: Komunikat o błędzie
::----------------------------------------------------------------------------------------------------------------------
_msg:='';
_kod:=exec('slo_kod','slo_slu',1);
_tr:=exec('slo_kod','slo_slu',2);
_par300233:=exec('get','#params',300233,2);
{? +form(_kod)<>SLU.DL
|| undo();
   _msg:=('Długość kodu niezgodna ze wzorcem\ndla słownika: %1'@[SLU.NAZ])
|| SLO.cntx_psh();  SLO.index('SL_WZ');
   {? REF.WFIRM=1 & exec('czy_tab_glob','#table',RS.TAB)=0 & 3+_kod<>REF.FIRMA().SYMBOL & _par300233='N'
   || _kod:=REF.FIRMA().SYMBOL+_kod
   ?};
   {? _a<>_kod
   || SLO.prefix(RS.WZ);
      {? SLO.find_key(_a)
      || {! |? SLO.KOD:=_kod; SLO.TR:=_tr; SLO.put(); SLO.find_key(_a) !}
      ?}
   |? _b<>_tr & _kod=_a
   || SLO.prefix(RS.WZ,_a);
      {? SLO.first()
      || {! |? {? SLO.KOD=_a || SLO.TR:=_tr; SLO.put() ?}; SLO.next() !}
      ?}
   ?};
   SLO.cntx_pop()
?};
_msg


\set_slo_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Formula modyfikuje zawartosc pola SLO.KOD w przypadku instalacji wielofirmowej i slownikow
::       opartych na tabelach lokalnych
::  OLD: \set_slo_kod/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
_pref:=REF.S_FIRMA().SYMBOL;
_par300233:=exec('get','#params',300233,2);
{? REF.WFIRM & _par300233='N'
|| RS.cntx_psh(); RS.index('RS'); RS.prefix();
   {? RS.find_key(SLO.SLU().WZ) & RS.TAB<>''
   || {? exec('czy_tab_glob','#table',RS.TAB)=0
      || {? 3+SLO.KOD<>_pref
         || {? (+SLO.KOD)+3>SLO.SLU().DL || SLO.KOD:=SLO.KOD+(SLO.SLU().DL-3) ?};
            SLO.KOD:=_pref+SLO.KOD
         ?}
      ?}
   ?};
   RS.cntx_pop()
?};
1


\ud2slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Wykonuje formule dla pozycji slownikow uzytkownika zwiazanych
::       z UD_SKL lub UD_DEF
::   WE: _a - 1 dla UD_SKL, 0 dla UD_DEF
::       _b - wykonywana formula
::  OLD: \ud2slo/skid_ud.fml
::----------------------------------------------------------------------------------------------------------------------
RS.cntx_psh(); SLU.cntx_psh(); SLO.cntx_psh(); UD_SKL.cntx_psh();
RS.index('RS'); RS.prefix();
{? RS.first()
|| {! |?
      {?  _a & RS.TAB='UD_SKL' & RS.UD_TYP=UD_SKL.UD_TYP |
         ~_a & RS.TAB='UD_DEF' & RS.UD_TYP=UD_SKL.UD_TYP
      || _kod:=UD_SKL.SYMBOL;
         SLU.index('WZORZEC'); SLU.prefix(RS.WZ);
         {? SLU.first()
         || {! |?
               SLO.index('SL'); SLO.prefix(SLU.ref(),_kod);
               {? SLO.first()
               || {! |?
                     {? _kod=SLO.KOD || _b() ?};
                     SLO.next()
                  !}
               ?};
               SLU.next()
            !}
         ?}
      ?};
      RS.next()
   !}
?};
RS.cntx_pop(); SLU.cntx_pop(); SLO.cntx_pop(); UD_SKL.cntx_pop()


\win_edit_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Tworzy i ustawia okienko redakcyjne tabeli OSOBA
::----------------------------------------------------------------------------------------------------------------------
_we:=OSOBA.mk_edit('Dane osobowe'@);
OSOBA.win_ewin(_we,,'RED');
_zapisz:=OSOBA.win_ebtn(_we,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Zapisz'@],"'key:F2'");
_anuluj:=OSOBA.win_ebtn(_we,'text=%1,btn_label_align=center,panel=bottom,align=end'['&Anuluj'@],"'key:Esc'");
OSOBA.btn_eopt(_we,_zapisz,'tooltip='+exec('help_red_ok','#window','Z'));
OSOBA.btn_eopt(_we,_anuluj,'tooltip='+exec('help_red_esc','#window','A'));
OSOBA.win_edit(_we); OSOBA.win_patt(_we)


\find_slo_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2008]
:: OPIS: Szuka pozycji slownika uzytkownika
::   WE: _a - pelna nazwa slownika uzytkownika lub wskazanie na slownik uzytkownika
::       _b - kod pozycji slownika
::   WY: wskazanie na pozycje slownika lub null gdy nie znaleziono
::  OLD: \find_slo/skid_slu.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
_is_ref:=type_of(_a)=7;
SLU.cntx_psh(); SLU.index('NAZ'); {? _is_ref || SLU.prefix() || SLU.prefix(_a) ?};
SLO.cntx_psh(); SLO.index('SL');
{? _is_ref | SLU.first() & SLU.NAZ=_a
|| SLO.prefix({? _is_ref || _a || SLU.ref() ?},_b);
   {? SLO.first() & SLO.KOD=_b  || _ref:=SLO.ref() ?}
?};
SLO.cntx_pop(); SLU.cntx_pop();
_ref


\bv_skl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Przed wyświetleniem zawartości UD_SKL w oknie tabeli SLO - ustawienie okien redagowania
::  OLD: \bv_skl/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.win_edit('UD_SKL'+{? PAR_SKID.get(80)='T' || '1' || '0' ?}+
                      {? UD_TYP.SYMBOL='POZ_BUD' || '1' || '0' ?}
            )


\pop_slo_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2006]
:: OPIS: Modyfikacja pozycji slowników użytkownika związanych z tabela wzorca
::   WE:  _a  - akronim tabeli wzorca
::       [_b] - dopełniać kod zerami? 1-tak, [0]-nie
::  OLD: \pop_slo/skid_slu
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? _=1 || _b:=0 ?}; {? _a='OS' || _b:=0 ?};
_ok:=1;_rek_pop:=0;
SLU.cntx_psh(); SLU.index('WZORZEC');
SLO.cntx_psh(); SLO.index('SL');
RS.index('RS'); RS.prefix();
RS.blank(1); RS.TAB:=_a;
{? RS.find_rec(0)
|| _ref:=RS.ref();
   {! |?
      {? RS.TAB=_a
      || _slo_tr:=$('SLO.TR:={|'+RS.TAB+'|!'+RS.TR+'|}');
         _kod:=exec('id2kod','slo_slu',_b);
         SLU.prefix(RS.WZ);
         {? SLU.first()
         || {! |?
               SLO.prefix(SLU.ref(),_kod);
               {? SLO.first()
               || _zmiana:=SLO.TR;
                  {! |?
                     {? SLO.KOD=_kod
                     || _slo_tr(); _ok:=SLO.put();
                        _rek_pop+=(_zmiana<>SLO.TR)
                     ?};
                     _ok & SLO.next()
                  !}
               ?};
               _ok & SLU.next()
            !}
         ?}
      ?};
      RS.blank(1); RS.TAB:=_a;
      _ok & RS.find_rec(0) & _ref<>RS.ref()
   !}
?};
SLO.cntx_pop(); SLU.cntx_pop();
_ok+_rek_pop


\po_pop_o
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [7.60]
:: OPIS: Poprawia rekordy tabeli SLO związane z tabela
::   WE: _a - akronim tabeli
::   WY: Liczba pooprawionych rekordów tabeli SLO
::  OLD: \po_pop_o/skid_oso
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_ok:=1; _rek_pop:=0;
($(_a+".cntx_psh()"))();
($(_a+".index('OSOBA')"))();
($(_a+".prefix(OSOBA.ref)"))();
{? ($(_a+".first()"))()
|| {! |?
      _ok:=exec('pop_slo_o','slo_slu',_a,1);
      _rek_pop+=_ok;
      _ok & ($(_a+".next()"))()
   !}
?};
($(_a+".cntx_pop()"))();
_ok+_rek_pop


\czykont
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [??]
:: OPIS: Formuła sprawdzająca czy aktualny rekord tabeli SLO
::       należy do słownika użytkownika zbudowanego w oparciu o
::       wzorzec wykorzystujący tabelę KH
::  OLD: \czykont/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
RS.index('RS'); RS.prefix();
{? RS.find_key(SLO.SLU().WZ)
|| {? RS.TAB='KH'
   || KH.index('KOD');
      KH.prefix(2);
      KH.find_key(SLO.KOD)
   || FUN.info('Funkcja dotyczy wyłącznie słowników kontrahentów.'@);
      0
  ?}
?}


\kop_slu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [7.20]
:: OPIS: Formuly sluza do kopiowania slownikow uzytkownika - rekordy w tabelach SLO, SLU i SLUAPPL
::       Uruchamiana na akcję 'koPiuj zawartość' w okienku wertowania SLUAPPL.WER_MAGF
::   WE: rekord w tabeli SLUAPPL
::   WY: rekordy w tabelach SLO, SLU i SLUAPPL
::  OLD: \kop_slu/sluappl.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
POMOC.win_edit('SLU');
POMOC.NAZSLU:='';
POMOC.OPISSLU:=SLU.OP;
POMOC.DLSLU:=SLU.DL;
SLU.cntx_psh(); SLO.cntx_psh();
nazslu:=SLU.NAZ;
dluslu:=SLU.DL;
{? POMOC.edit("exec('spr_slu','slo_slu')")
|| do();
   SLU.cntx_psh();
   SLU.prefix();
   SLU.NAZ:=POMOC.NAZSLU;
   SLU.OP:=POMOC.OPISSLU;
   SLU.DL:=POMOC.DLSLU;
   SLU.SYSTEM:='N';
   SLU.add();
   _ref:=SLU.ref();
   SLU.cntx_pop();
   SLO.index('SL');
   SLO.prefix(SLU.ref);
   {? SLO.first()
   || {!
      |? SLO.cntx_psh();
         SLO.prefix();
         {? dluslu<POMOC.DLSLU
         || SLO.KOD:=SLO.KOD+(POMOC.DLSLU-dluslu)*'0'
         ?};
         SLO.SLU:=_ref;
         SLO.add();
         SLO.cntx_pop();
         SLO.next()
      !}
   ?};
   SLUAPPL.cntx_psh();
   SLUAPPL.prefix();
   SLUAPPL.GDZIE:='F';
   SLUAPPL.SLU:=_ref;
   SLUAPPL.add();
   SLUAPPL.cntx_pop();
   end()
?};
SLU.cntx_pop(); SLO.cntx_pop();
{? _ref
|| SLU.seek(_ref)
?};
&nazslu; &dluslu


\czy_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Funkcja sprawdza, czy dopuszczalna jest modyfikacja redagowanego pola.
::       Jeżeli pole jest zadeklarowane we wzorcu jako RS.KOD to redagowanie pola nie jest możliwe
::   WE: _a - akronim tabeli i pola np. KH.KOD
::   WY: czy możliwa modyfikacja
::  OLD: \czy_kod/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_edit:=0;
_par300233:=exec('get','#params',300233,2);
{? -menu_txt()<>'szukaj'
|| {? (_a='KH.NAZ' | _a='KH.SKR' | _a='KH.KRAJ' | _a='KH.MIASTO' | _a='KH.UL' |
       _a='KH.TEL' | _a='KH.TX' | _a='KH.FAX' | _a='KH.POCZ' | _a='KH.REG' | _a='KH.NIP')
   || _edit:=1
   || {? -menu_txt<>'dołącz' | (var_pres('zm_kh')>0 & zm_kh=1)
      || {? form(($_a)())<>''
         || _tab:=(_a*'.'-1)+_a;
            _pole:=(_a*'.')-_a;
            RS.cntx_psh(); RS.index('TAB_POLE'); RS.prefix(_tab,_tab,_pole,_pole);
            _edit:=1;
            {? RS.first()
            || {! |?
                  {? RS.TAB+'.'+RS.KOD=_a
                  || _typpola:=($('type_of('+RS.TAB+'.'+RS.KOD+')'))();
                     {? _typpola=2
                     || ($(RS.TAB+'.cntx_psh(); '+RS.TAB+'.get()'))();
                        _pole:=($(RS.TAB+'.'+RS.KOD))();
::                      modyfikacja wartosci w wersji wielofirmowej, dla slownikow opartych na wzorcu z tabela lokalna
                        {? REF.WFIRM=1 & exec('czy_tab_glob','#table',RS.TAB)=0
                           & 3+_pole<>REF.FIRMA().SYMBOL & _par300233='N'
                        || _pole:=REF.FIRMA().SYMBOL+(3-_pole)
                        ?};
                        ($(RS.TAB+'.cntx_pop()'))();
                        SLO.cntx_psh();
                        SLO.index('SL_WZ'); SLO.prefix(RS.WZ,_pole);
                        {? SLO.first() & SLO.KOD=_pole || _edit:=0 ?};
                        SLO.cntx_pop()
                     |? _typpola=1
                     || SLO.cntx_psh(); SLO.index('SL');
                        SLU.cntx_psh(); SLU.index('WZORZEC'); SLU.prefix(RS.WZ);
                        {? SLU.first()
                        || {! |?
                              {? SLU.WZ=RS.WZ
                              || ($(RS.TAB+'.cntx_psh(); '+RS.TAB+'.get()'))();
                                 _pole:=($('form('+RS.TAB+'.'+RS.KOD+',-SLU.DL,,\'1\')'))();
::                               modyfikacja wartosci w wersji wielofirmowej, dla slownikow opartych na wzorcu z tabela lokalna
                                 {? REF.WFIRM=1 & exec('czy_tab_glob','#table',RS.TAB)=0
                                    & 3+_pole<>REF.FIRMA().SYMBOL & _par300233='N'
                                 || _pole:=REF.FIRMA().SYMBOL+(3-_pole)
                                 ?};
                                 ($(RS.TAB+'.cntx_pop()'))();
                                 SLO.prefix(SLU.ref(),_pole);
                                 {? SLO.first() & SLO.KOD=_pole || _edit:=0 ?};
                                 _edit & SLU.next()
                              || 0
                              ?}
                           !}
                        ?};
                        SLU.cntx_pop(); SLO.cntx_pop()
                     ?}
                  ?};
                  _edit & RS.next()
               !}
            ?};
            RS.cntx_pop()
         || _edit:=1
         ?}
      || _edit:=1
      ?}
   ?}
|| _edit:=1
?};
_edit


\slo_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.28]
:: OPIS: Usunięcie pozycji ze słownika
::----------------------------------------------------------------------------------------------------------------------
do();
ZR_SLO.index('SLO_NR'); ZR_SLO.prefix(SLO.ref());
{? ZR_SLO.first() || {! |? ZR_SLO.del() !} ?};
{? SLO.SLU<>null & SLO.SLU().WZ='Waluta' || exec('porsloit_oper','portal_slowniki','del',SLO.KOD,SLO.TR,,,'Waluty') ?};
SLO.del();
end


\spr_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Sprawdzanie rekordu w SLO (dolacz)
::   WE: _a - 1 - formuła add, 0(domyślnie) - formuła put
::  OLD: \spr_slo/wspol
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_add:={? _ > 0 || {? type_of(_a)=type_of(0) & _a=1 || 1 || 0 ?} || 0 ?};
_zwrot:='';
{? SLO.TR=''
|| FUN.info('Nie wprowadzono treści pozycji w słowniku.'@); _zwrot:='TR'
?};
{? _zwrot=''
||
   {? SLO.SLU().KDK=0 & +SLO.KOD>SLO.SLU().DL
   || FUN.info('Za długi kod.\nWymagana ilość znaków w kodzie: %1.'@[$SLO.SLU().DL]); _zwrot:='KOD'
   |? SLO.SLU().KDK=0 & +SLO.KOD<SLO.SLU().DL
   || FUN.info('Za krótki kod.\nWymagana ilość znaków w kodzie: %1.'@[$SLO.SLU().DL]); _zwrot:='KOD'
   || _zwrot:=''
   ?}
?};
{? _zwrot='' & _add=1
|| _kod:=SLO.KOD;
   SLO.cntx_psh();
   SLO.index('SL'); SLO.prefix(SLO.SLU,_kod);
   {? SLO.first() & SLO.KOD=_kod
   || FUN.info('W słowniku istnieje już pozycja o podanym kodzie.'@); _zwrot:='KOD'
   ?};
   SLO.cntx_pop()
?};
_zwrot


\slo_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Usuwanie rekordu do słownika użytkownika
::  OLD: \slo_us/wspol
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? SLU.SYSTEM='T'
||
   {? SLO.sel_size()=0
   || FUN.info('Usunięcie zabroniona dla słownika systemowego.'@)
   ?};
   _wyn:=0
?};
{? exec('test_slo','slo_slu')=0
|| FUN.info('Usunięcie pozycji słownika niemożliwe w bieżącej firmie.'@);
   _wyn:=0
?};

_slo_count:=SLO.count();
_par_size:=0;
{? _wyn=1 & _slo_count>0
||
   ZR_SLO.cntx_psh();
   ZR_SLO.index('SLO_NR');
   ZR_SLO.prefix(SLO.ref());
:: sprawdza czy parametry są uzupełnione
   {? ZR_SLO.first()
   ||
      _par_size:=ZR_SLO.size();
      {? _par_size>0
      ||
         {!
         |?
            {? ZR_SLO.WAR<>''
            ||
               FUN.info('Pozycja %1 posiada uzupełnione parametry.\nUsunięcie niemożliwe.'@[SLO.KOD]);
               _wyn:=0
            ?};
            _wyn=1 & ZR_SLO.next()
         !}
      ?}
   ?};
:: czy nie ma innych powiazań
   {? _wyn=1 & _slo_count>_par_size
   ||
      FUN.info(
         'Pozycja %1 jest wykorzystywana w strukturach %2.\nUsunięcie niemożliwe.'@
         [SLO.KOD,exec('nazwa','#system')]
      );
      _wyn:=0
   ?};
:: usuwa parametry jeśli są puste
   {? _par_size>0 & _wyn=1 & ZR_SLO.first()
   ||
      {!
      |?
         ZR_SLO.del()
      !}
   ?};
   ZR_SLO.cntx_pop()
?};

{? _wyn=1
||
   POMOC.KOD:=SLO.KOD;
   POMOC.WZ:=SLO.SLU().WZ;
   {? exec('spr_wz','slo_slu',SLU.WZ)
   ||
      RS.index('RS');
      RS.prefix();
      {? RS.find_key(SLU.WZ) || POMOC.TAB:=RS.TAB ?}
   ?}
?};
_wyn


\be_slo_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PB [$12.10]
:: OPIS: Akcja przed redakcja pola KOD tabeli SLO dla słowników o wzorcach, które nie są oparte na tabelach źródłowych
::  OLD: \be_slo_kod/wspol
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? -menu_txt<>'popraw' | exec('spr_wz','slo_slu',SLO.SLU().WZ) || return(1) ?};
_red:=1;
AN_SLU.cntx_psh();
_mask:=AN_SLU.names;
{? _mask.first
|| {!
   |? AN_SLU.use(_mask.NAME);
      AN_SLU.index('SLO_AN');
      AN_SLU.prefix(SLO.ref());
      {? AN_SLU.last
      || _red:=(AN_SLU.AN=null)
      ?};
      _red & _mask.next
   !}
?};
AN_SLU.cntx_pop();
_red


\slu_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: Formuła akcje Rekord po oknien tabeli SLU
::  TAG: <SLOSLU>
::  OLD: \spr_slu/wspol
::  OLD: \spr_slu/!zws_par_kslo.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_zwrot:=__CHK.record(SLU,,'NAZ','WZ'))=''
|| {? SLU.KDK=0
   || _zwrot:={? SLU.DL>(_b:=exec('fld_size','slo_slu','SLO.KOD'))
              || FUN.info('Nieprawidłowa długość kodu (maksimum %1 znaków).'@[$_b]); 'DL'
              |? SLU.DL<=0
              || FUN.info('Długość kodu musi być liczbą wiekszą od zera.'@); 'DL'
              || ''
              ?}
   ?}
?};
{? _zwrot='' & -menu_txt='popraw' & SLOSLU.SLFAK<>'' & SLU.NAZ<>SLOSLU.SLFAK
|| exec('spr_algp','!zws_par_kslo',SLOSLU.SLFAK,1)
?};
_zwrot


\chk_zr_slo_nr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.02]
:: OPIS: Przy imporcie dodatkowych parametrów słownika użytkownika (tabela ZR_SLO)
:: z pliku xlsx sprawdzenie, czy dodatkowy parametr słownika użytkownika jest prawidłowy
:: tylko sprawdzenie, czy jego numer jest zdefiniowany we wzorcu słownika
::----------------------------------------------------------------------------------------------------------------------
_kom:='';
_wz:=ZR_SLO.SLO().SLU().WZ;
{? _wz=''
|| _kom:='Nieznany wzorzec słownika %1.'@[ZR_SLO.SLO().SLU().NAZ]
|| RS.cntx_psh();
   RS.index('RS');
   RS.prefix(_wz,);
   {? RS.first()
   || ZR_DSLO.cntx_psh();
      ZR_DSLO.index('WZ_NR');
      ZR_DSLO.prefix(RS.ref(),ZR_SLO.NR);
      {? ~ZR_DSLO.first()
      || _kom:='We wzorcu %1 słownika %2 brak parametru o numerze %3.'@[_wz,ZR_SLO.SLO().SLU().NAZ,$ZR_SLO.NR]
      ?};
      ZR_DSLO.cntx_pop()
   || _kom:='Nieznany wzorzec %1 słownika %2.'@[_wz,ZR_SLO.SLO().SLU().NAZ]
   ?};
   RS.cntx_pop()
?};
{? _kom <> ''
|| FUN.info(_kom)
?};
_kom


\pw_sl_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przed wyswietleniem sloslu.sl_u
::       jaka_tp - dla pola z tabeli np. 'UMANGR.SLU' zalozenie ze pole w tabeli bedzie typu: _SLU
::  OLD: \pw_sl_u/tr_info.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('jaka_tp')<=0 || jaka_tp:='UMANGR.SLU' ?};
{? ($jaka_tp)()<>null || SLOSLU.SL_U:=($(jaka_tp+'().NAZ'))() || SLOSLU.SL_U:='' ?}


\be_sl_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przed redakcja sloslu.sl_u
::  OLD: \be_sl_u/tr_info.fml
::----------------------------------------------------------------------------------------------------------------------
1


\f3_sl_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: f3 dla sloslu.sl_u - tylko przypisane do systemu z wzorcem 'Kontrahent'
::       jaka_tp - dla pola z tabeli np. 'UMANGR.SLU'
::  OLD: \f3_sl_u/tr_info.fml
::----------------------------------------------------------------------------------------------------------------------
SLUAPPL.win_sel('WYB');
SLUAPPL.index('REF');
_slu:=($jaka_tp)();
_ndx:=SLUAPPL.ndx_tmp('',,'GDZIE',,,'SLU','WZ',,'SLU','NAZ',);
SLUAPPL.index(_ndx);
SLUAPPL.find_key('F','Kontrahent',SLOSLU.SL_U);
SLUAPPL.ndx_drop(_ndx);
SLUAPPL.index('WZ');
SLUAPPL.prefix('F','Kontrahent');
{? SLUAPPL.select(,1,10)
|| ($jaka_tp)():=SLUAPPL.SLU;
   SLOSLU.SL_U :=($(jaka_tp+'().NAZ'))()
?};
SLOSLU.SL_U


\ae_sl_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: po redakcji sloslu.sl_u
::       jaka_tp - dla pola z tabeli np. 'UMANGR.SLU'
::  OLD: \ae_sl_u/tr_info.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()<>''
|| _ndx:=SLUAPPL.ndx_tmp('',,'GDZIE',,,'SLU','WZ',,'SLU','NAZ',);
   SLUAPPL.index(_ndx);
   {? SLUAPPL.find_key('F','Kontrahent',fld)
   || ($jaka_tp)():=SLUAPPL.SLU;
      SLOSLU.SL_U :=($(jaka_tp+'().NAZ'))()
   || ($jaka_tp)():=null;
      SLOSLU.SL_U :=''
   ?};
   SLUAPPL.ndx_drop(_ndx)
|| ($jaka_tp)():=null;
   SLOSLU.SL_U :=''
?};
SLOSLU.SL_U


\slkh__f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: formula na klawisz F3 pola SLOSLU.SLKH___
::  OLD: \slkh__f3/tr_info.fml
::----------------------------------------------------------------------------------------------------------------------
_pole:=cur_afld;
_sl1:='SLOSLU.'+_pole;
_sl2:='INFO.'+_pole;

exec('slaplwer','slo_slu');
SLUAPPL.find_key(($_sl1)());
{? SLUAPPL.select(,1,10)
|| ($_sl2)():=SLUAPPL.ref();
   ($_sl1)():=SLUAPPL.SLU().NAZ
?}


\slaplwer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: formula pomocnicza, ustawia dziedzinę tabeli SLUAPPL
::----------------------------------------------------------------------------------------------------------------------
SLUAPPL.index('NAZ');
SLUAPPL.win_sel('WER_F3');
SLUAPPL.prefix(exec('bl_gdzie','slo_slu'))


\zrslo_war_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: przed redagowaniem ZR_SLO.WAR (parametr dodatkowy pozycji ze słownika użytkownika, POMOC.ZRSL_WAR)
::----------------------------------------------------------------------------------------------------------------------
{? -SLU.WZ='~płatności' & ZR_DSLO.NR=5
|| _pl_got:=exec('plat_czy_gotowka','slo_slu');
   _pl_typ:=exec('plat_typ_sel','slo_slu',POMOC.ZRSL_WAR,_pl_got);
   {? _pl_typ<>'' & _pl_typ<>'-'
   || POMOC.ZRSL_WAR:=_pl_typ
   ?}
?};
1


\plat_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Typ płatności - słownik
::----------------------------------------------------------------------------------------------------------------------
_Tab:=tab_tmp(1,'PLATNOSC','STRING[50]','Płatność');
_Tab.PLATNOSC:='gotówka';
_Tab.add();
_Tab.PLATNOSC:='karta';
_Tab.add();
_Tab.PLATNOSC:='bon';
_Tab.add();
_Tab.PLATNOSC:='czek';
_Tab.add();
_Tab.PLATNOSC:='kredyt';
_Tab.add();
_Tab.PLATNOSC:='przelew';
_Tab.add();
_Tab.PLATNOSC:='mobilna';
_Tab.add();
_Tab.PLATNOSC:='voucher';
_Tab.add();
_Tab.PLATNOSC:='konto klienta';
_Tab.add();
_Tab.PLATNOSC:='inna';
_Tab.add();
_Tab.PLATNOSC:='-';
_Tab.add();
_Tab


\plat_typ_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Typ płatności - wybór ze słownika
::   WE: _a - aktualna wartość
::       _b - czy płatnośc jest oznaczona jako gotówka
::   WY: wybrana wartość
::----------------------------------------------------------------------------------------------------------------------
_pl_typ:='';
_pl_got:=0;
{? var_pres('_a')>0
|| _pl_typ:=_a
?};
{? var_pres('_b')>0
|| _pl_got:=_b
?};
_tab:=exec('plat_typ','slo_slu');
_win:=_tab.mk_sel('Typy płatności'@,,1,,,,,,'U');
_tab.win_act(_win,,'Formuła','&Wybierz'@@,,'Wybór beżącego zapisu ze słownika'@,"sel_exit()",,1,,,,'W');
_tab.win_sel(_win);
{? _pl_typ=''
|| {? _pl_got
   || _tab.find_key('gotówka')
   || _tab.find_key('przelew')
   ?}
|| {? ~_tab.find_key(_pl_typ)
   || ~_tab.find_key('-')
   ?}
?};
{? _tab.select(,1,5)
|| _pl_typ:=_tab.PLATNOSC
?};
_pl_typ


\plat_czy_gotowka
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Czy forma płatności SLO.ref() jest gotówką
::   WE: _a SLO.ref
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<0
|| _a:=SLO.ref()
?};
_pl_got:=0;
ZR_SLO.cntx_psh();
ZR_SLO.index('SLO_NR');
ZR_SLO.prefix(_a,1);
{? ZR_SLO.first() & ZR_SLO.WAR='T'
|| _pl_got:=1
?};
ZR_SLO.cntx_pop();
_pl_got


\plat_czy_karta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Czy forma płatności SLO.ref() jest kartą
::   WE: _a SLO.ref
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<0
|| _a:=SLO.ref()
?};
_pl_kar:=0;
{? ~exec('plat_czy_gotowka','slo_slu',_a)
|| ZR_SLO.cntx_psh();
   ZR_SLO.index('SLO_NR');
   ZR_SLO.prefix(_a,5);
   {? ZR_SLO.first() & ZR_SLO.WAR='karta'
   || _pl_kar:=1
   ?};
   ZR_SLO.cntx_pop()
?};
_pl_kar


\plat_czy_przelew
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Czy forma płatności SLO.ref() jest przelewem
::   WE: _a SLO.ref
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<0
|| _a:=SLO.ref()
?};
_pl_prz:=0;
{? ~exec('plat_czy_gotowka','slo_slu',_a)
|| ZR_SLO.cntx_psh();
   ZR_SLO.index('SLO_NR');
   ZR_SLO.prefix(_a,5);
   {? ZR_SLO.first() & ZR_SLO.WAR='przelew'
   || _pl_prz:=1
   ?};
   ZR_SLO.cntx_pop()
?};
_pl_prz


\plat_czy_czek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Czy forma płatności SLO.ref() jest kartą
::   WE: _a SLO.ref
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<0
|| _a:=SLO.ref()
?};
_pl_czek:=0;
{? ~exec('plat_czy_gotowka','slo_slu',_a)
|| ZR_SLO.cntx_psh();
   ZR_SLO.index('SLO_NR');
   ZR_SLO.prefix(_a,5);
   {? ZR_SLO.first() & ZR_SLO.WAR='czek'
   || _pl_czek:=1
   ?};
   ZR_SLO.cntx_pop()
?};
_pl_czek


\plat_dni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Liczba dni formy płatności SLO.ref()
::   WE: _a SLO.ref
::   WY: liczba dni
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<0
|| _a:=SLO.ref()
?};
_dni:=0;
ZR_SLO.cntx_psh();
ZR_SLO.index('SLO_NR');
ZR_SLO.prefix(_a,2);
{? ZR_SLO.first()
|| _dni:=#ZR_SLO.WAR
?};
ZR_SLO.cntx_pop();
_dni


\plat_opi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Opis formy płatności SLO.ref()
::   WE: _a SLO.ref
::   WY: opis "kod - nazwa"
::----------------------------------------------------------------------------------------------------------------------
_opi:='';
{? var_pres('_a')<0
|| _opi:=SLO.KOD+' - '+SLO.TR
|| SLO.cntx_psh();
   SLO.prefix();
   {? SLO.seek(_a)
   || _opi:=SLO.KOD+' - '+SLO.TR
   ?};
   SLO.cntx_pop()
?};
_opi


\wz_osoba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.37]
:: OPIS: Wzorzec dla słownika z wykorzystaniem danych osobowych
::   WE: _a - złączenie do tabeli OSOBA
::       Kolejne numery kolumn z tabeli OSOBA:
::       (1 - nazwisko, 3 - imię - 4 - drugie imię)
::       _b - liczba
::       _c - liczba
::       _d - liczba
::   WY: napis z danymi osoby np: Nazwisko+' '+Imię+' '+Drugie imię
::----------------------------------------------------------------------------------------------------------------------
_osoba:=_a;
_result:='';
{? var_pres('_b')>0 & _osoba[_b]<>''
|| _result+=_osoba[_b]
?};
{? var_pres('_c')>0 & _osoba[_c]<>''
|| {? +_result || _result+=' ' ?};
   _result+=_osoba[_c]
?};
{? var_pres('_d')>0 & _osoba[_d]<>''
|| {? +_result || _result+=' ' ?};
   _result+=_osoba[_d]
?};
_result


\par_plg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Formuła umożliwiająca korzystanie z wtyczki ZR_DSLO_001
::----------------------------------------------------------------------------------------------------------------------
_plgn:={? Plugin.runnable('ZR_DSLO_001') || Plugin.run('ZR_DSLO_001') || '' ?};
{? _plgn<>''
|| _i:=1;
   STR.split(_plgn,',');
   _wz:=STR.get_word();
   RS.cntx_psh(); RS.index('RS'); RS.prefix(_wz);
   _dalej:=exec('par_chck','slo_slu',_plgn);
   {? _dalej & _wz<>'prosty' & 1+_wz<>'~'
   || _dalej2:=exec('par_ex','slo_slu')
   || _dalej2:=1
   ?};
   {? RS.first() & _dalej & ~_dalej2 & STR.next()
   || ZR_DSLO.cntx_psh();ZR_DSLO.index('WZ_NR');ZR_DSLO.prefix(RS.ref());
      _notempty:=ZR_DSLO.first();
      {? _notempty & _wz<>'prosty' & 1+_wz<>'~'
      || {! |?
            ZR_DSLO.del()
         !};
         _notempty:=0
      ?};
      ZR_DSLO.cntx_pop();
      {? ~_notempty & _wz<>'prosty' & 1+_wz<>'~'
      || ZR_DSLO.cntx_psh();
         {! |?
            _naz:=STR.get_word();
            _typ:=STR.get_word();
            exec('new_par','slo_slu',RS.ref(),_i,_naz,_typ);
            _i+=1;
            STR.next()
         !};
         ZR_DSLO.cntx_pop()
      ?}
   ?};
   RS.cntx_pop()
?}


\par_chck
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Formuła sprawdzająca, czy zaszła zmiana w parametrach
::   WE: _a - STRING będący wynikiem wtyczki ZR_DSLO_001
::   WY: 1 - zmiana, 0 - brak zmian
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new(@.CLASS.STRING);
_obj.split(_a,',');
_wz:=_obj.get_word();
_wyn:=1;
_next1:=next2:=0;
ZR_DSLO.cntx_psh();ZR_DSLO.index('WZ_NR');ZR_DSLO.prefix(RS.ref());
{? ZR_DSLO.first()
|| _wyn:=0;
   {! |?
      {? ~(_obj.get_word()=ZR_DSLO.NAZ & _obj.get_word()=ZR_DSLO.TYP) || _wyn:=1 ?};
      _next1:=ZR_DSLO.next();
      _next2:=_obj.next();
      {? (_next1=0 & _next2<>0) | (_next1<>0 & _next2=0) || _wyn:=1 ?};
      (~_wyn) & _next1 & _next2
   !}
?};
ZR_DSLO.cntx_pop();
_wyn


\par_ex
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PBS [23.25]
:: OPIS: Sprawdza zawartość dodatkowych parametrów w słownikach użytkownika
::   WY: 0 - brak zawartości, 1 - jest zawartość
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
SLO.cntx_psh(); SLU.cntx_psh(); ZR_SLO.cntx_psh();
SLO.index('SL_WZ'); SLO.prefix(RS.WZ);
ZR_SLO.index('SLO_NR');
{? SLO.first()
|| {! |?
      ZR_SLO.prefix(SLO.ref());
      {? ZR_SLO.first()
      || {! |?
            _wyn:=1;
            0
         !}
      ?};
      SLO.next() & (~_wyn)
   !}
?};
SLO.cntx_pop(); SLU.cntx_pop(); ZR_SLO.cntx_pop();
_wyn


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 05ac323ba91a1e41fc9ffede3724081f8603d9e56071cc90afc6225f17f71b0fcfae83de25a22fb9b95bb5766e734350e8f8a53d0600f84d7cc32ebb3054e72e5f7b79cabe9416b5f23839dd9eb9685c0da97c4d8b681a594b03df494f346c7cf2eb8a542416dc94d4645a1335cf625b996f950100210f489b9e68def1a6d702
