:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: portal_method_chr_ads.fml
:: Utworzony: 05.04.2023
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły obsługujące metody dostępu do HR Portal typu chr_Ads* (patrz opis w portal_method.fml).
::======================================================================================================================


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovementCategory -> chr_AdsImprCat (Kategorie dla ogłoszeń i ulepszeń).
::======================================================================================================================


\chr_AdsImprCatModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovementCategoryModify.
::       Kontekst wywołania - rekord tabeli BIPKAT.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Sprawdzenie czy kategoria dotyczy ogłoszeń lub ulepszeń:
{? BIPKAT.FUNKC<>'OGL' & BIPKAT.FUNKC<>'ULP'
|| KOMM.add('Kategoria nie jest kategorią ogłoszeń/ulepszeń.'@);
   return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Category','%1^%2'[BIPKAT.FUNKC,BIPKAT.KOD]);
_obj.set('CategoryName',BIPKAT.NAZWA);
_obj.set('NotificationDaysPortal',BIPKAT.POW_KOM);
_obj.set('NotificationDaysMail',BIPKAT.POW_MAIL);
_obj.set('Icon',BIPKAT.IKONA);
_obj.set('__ModifiedDate_erp',BIPKAT.idput_value());
_obj.set('__id_erp',BIPKAT.uidref());
_obj.set('CategoryType',{? BIPKAT.FUNKC='OGL' || 'OGŁOSZENIE' || 'ULEPSZENIE' ?});

_obj.save()


\chr_AdsImprCatModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja kategorii ulepszeń i ogłoszeń - parametr zapytania chr_AdsImprovementCategoryModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprCatModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPKAT_OGUL_ID',_formula_json)


\chr_AdsImprCatModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementCategoryModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPKAT_OGUL_ID')


\chr_AdsImprCatDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovementCategoryDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_BIPKAT_OGUL_ID')


\chr_AdsImprCatDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementCategoryDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPKAT_OGUL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovCategoryPerson -> chr_AdsImprCatPer (Kategorie ogłoszeń i ulepszeń - osoby).
::======================================================================================================================


\chr_AdsImprCatPerModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovCategoryPerson.
::       Kontekst wywołania - rekord tabeli BIPPYTK.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ret:=0;
BIPKAT.cntx_psh();
BIPKAT.prefix();
BIPPYTK.BIPKAT();
P.cntx_psh();
P.prefix();
BIPPYTK.P();
{? BIPKAT.FUNKC<>'OGL' & BIPKAT.FUNKC<>'ULP'
|| KOMM.add('Kategoria nie jest kategorią ogłoszeń/ulepszeń.'@)
|? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@)
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('Category','%1^%2'[BIPKAT.FUNKC,BIPKAT.KOD]);
   _obj.set('__ModifiedDate_erp',BIPPYTK.idput_value());
   _obj.set('__id_erp',BIPPYTK.uidref());
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};
P.cntx_pop();
BIPKAT.cntx_pop();
_ret


\chr_AdsImprCatPerModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja osób odpowiedzialnych za kategorie ulepszeń i ogłoszeń - parametr
::       zapytania chr_AdsImprovCategoryPersonModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprCatPerModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPPYTK_OGUL_ID',_formula_json)


\chr_AdsImprCatPerModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovCategoryPersonModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPPYTK_OGUL_ID')


\chr_AdsImprCatPerDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovCategoryPersonDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_BIPPYTK_OGUL_ID')


\chr_AdsImprCatPerDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovCategoryPersonDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPPYTK_OGUL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovement (Ogłoszenia i ulepszenia).
::======================================================================================================================


\chr_AdsImprovementModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovement.
::       Kontekst wywołania - rekord tabeli BIPULP.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_pomin:=0;
:: Sprawdzenie znacznika "Widoczny na portalu":
{? BIPULP.STATUS<>'W trakcie edycji'@ & BIPULP.PORTAL<>'T'
|| KOMM.add('Ogłoszenie/ulepszenie nieprezentowane na portalu.'@);
   _pomin:=1
?};

:: Sprawdzenie czy kategoria dotyczy ogłoszeń lub ulepszeń:
{? ~_pomin
|| BIPKAT.cntx_psh();
   BIPKAT.prefix();
   _funkc:=BIPULP.BIPKAT().FUNKC;
   _kod:=BIPKAT.KOD;
   {? ~(',OGL,ULP,'*',%1,'[_funkc])
   || KOMM.add('Kategoria nie jest kategorią ogłoszeń/ulepszeń.'@);
      _pomin:=1
   ?};
   BIPKAT.cntx_pop()
?};

{? ~_pomin
|| P.cntx_psh();
   P.prefix();
   BIPULP.P();
   {? P.PORTAL<>'T'
   || KOMM.add('Współpracownik nieprezentowany na portalu.'@);
      _pomin:=1
   ?};
   P.cntx_pop()
?};
{? _pomin
|| return(0)
?};

_obj.create();

_obj.set('__id_cloud',{? _id || _id || ~~ ?});
_obj.set('Title',BIPULP.TYTUL);
_obj.set('Category','%1^%2'[_funkc,_kod]);
_obj.set('Description',exec('strcut','#string',BIPULP.memo_txt(,1,'OPIS'),6000,1));
_obj.set('AdsImprovementDate',BIPULP.DT1,BIPULP.GD1);
_obj.set('ExpirationDate',BIPULP.DT2,BIPULP.GD2);
{? _funkc='ULP'
|| _obj.set('VotingEndDate',BIPULP.DT3)
?};
_obj.set('Points',BIPULP.PKT);
_obj.set('Rating',BIPULP.OCENA);
_obj.set('Status',exec('bipulp_status_kod','portal_bip',_funkc,BIPULP.STATUS));
_obj.set('__ModifiedDate_erp',BIPULP.idput_value());

:: Sprawdzanie załączników powiązanych z rekordem BIPULP:
{? _ext=BIPULP.HASH
|| _obj.skip_attach()
|| ZZ_DOKZ.cntx_psh();
   ZZ_DOKZ.index('CZAS');
   ZZ_DOKZ.prefix(BIPULP.NP_DOK,BIPULP.ZZ_DOK);
   {? ZZ_DOKZ.first()
   || {!
      |? _obj.attach(ZZ_DOKZ.PLIK);
         ZZ_DOKZ.next()
      !}
   ?};
   ZZ_DOKZ.cntx_pop()
?};

_obj.set('__id_erp',BIPULP.uidref()+BIPULP.HASH);

_jman:=exec('json_man','__jsonm','{}');
_jman.load('{}');

:: Dodanie komentarzy:
BIPPYTP.cntx_psh();
BIPPYTP.index('BIPPYTN');
BIPPYTN.cntx_psh();
BIPPYTN.index('BIPKAT');
_ulp_kom:={? _funkc='ULP' || exec('bipkat_ulp_kom','portal_bip') || exec('bipkat_ogl_kom','portal_bip') ?};
BIPPYTN.prefix(_ulp_kom,BIPULP.NP_DOK,BIPULP.ZZ_DOK);
_bippytn:={? BIPPYTN.first() || BIPPYTN.ref() || null() ?};
BIPPYTN.cntx_pop();
BIPPYTP.prefix(_bippytn);
{? BIPPYTP.first()
|| _jman.setObject(_jman.addChildElement('','Notes'),'[]');
   {!
   |? P.cntx_psh();
      P.prefix();
      BIPPYTP.P();
      {? P.PORTAL='T'
      || _jman.setObject(_path:=_jman.addChildElement('Notes'),'{}');
         _jman.setValue(_jman.addChildElement(_path,'Content'),base64('encode',BIPPYTP.memo_txt(,1,'TRESC')));
         _jman.setValue(_jman.addChildElement(_path,'RegisterDate'),iso_datetime_value(BIPPYTP.DT,BIPPYTP.GD));
         _jman.setValue(_jman.addChildElement(_path,'RegisterLogin'),exec('osoba2weblogin','users',BIPPYTP.OSOBA));
         _jman.setValue(_jman.addChildElement(_path,'PersonId'),exec('getPid','portal_core',P.uidref()))
      ?};
      P.cntx_pop();
      BIPPYTP.next()
   !}
?};
BIPPYTP.cntx_pop();
_obj.set('__Notes',_jman.getJSON());

:: Miniaturka (zdjęcie):
{? BIPULP.ZDJECIE
|| _obj.set('Thumbnail',BIPULP.ZDJECIE)
?};

::wewnętrzne portalowe:
::_obj.set('ImageId',);

P.cntx_psh();
P.prefix();
_obj.set('CreatorPersonId__id_Erp',BIPULP.P().uidref());
P.cntx_pop();

:: Zgodnie z ustaleniami ustawiamy zawsze na 0 (po zaznaczeniu na portalu i przejściu danych przez ERP jest już widoczna
:: normalna lista odbiorców, bez znacznika "Wszyscy...":
_obj.set('IsVisibleToAll',0);

_obj.save()


\chr_AdsImprovementModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja ulepszeń i ogłoszeń - parametr zapytania chr_AdsImprovementModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprovementModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPULP_OGUL_ID',_formula_json)


\chr_AdsImprovementModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPULP_OGUL_ID')


\chr_AdsImprovementGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Pobranie wątków - parametr zapytania chr_AdsImprovementGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_AdsImprovementGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli BIPULP na podstawie wyniku zapytania chr_AdsImprovementGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;
_ext:=_c;

{? _act='del'
:: Przed właściwym usunięciem samego BIPULP konieczne jest usunięcie identyfikatorów rekordów powiązanych,
:: gdyż te rekordy zostaną usunięte w wyzwalaczach BIPULP, ale nie chcemy już wysyłać informacji o konieczności ich
:: usunięcia na portal, gdyż tam już ich nie ma (zostały usunięte wraz z samym ogłoszeniem/ulepszeniem)
|| _tabs:=spli_str('BIPODB,BIPULPG,BIPULPO,BIPPYTN',',');
   {! _ii:=1..obj_len(_tabs)
   |! _TAB:=($_tabs[_ii])();
      _TAB.cntx_psh();
      _TAB.index('LINK');
      _TAB.prefix(BIPULP.NP_DOK,BIPULP.ZZ_DOK);
      {? _TAB.first()
      || {!
::          Jeśli to nagłówek pytań to usunięcie również wszystkich identyfikatorów pytań:
         |? {? _TAB=BIPPYTN
            || BIPPYTP.cntx_psh();
               BIPPYTP.index('BIPPYTN');
               BIPPYTP.prefix(_TAB.ref());
               {? BIPPYTP.first()
               || {!
                  |? exec('del_rek','#sync_id','PORTAL_BIPPYTP_KDR_ID',BIPPYTP.uidref(),BIPULP.HASH);

                     BIPPYTP.next()
                  !}
               ?};
               BIPPYTP.cntx_pop()
            ?};
            exec('del_rek','#sync_id','PORTAL_%1_%2_ID'[_tabs[_ii],{? _TAB=BIPPYTN || 'KDR' || 'OGUL' ?}],
               _TAB.uidref(),BIPULP.HASH);

            _TAB.next()
         !}
      ?};
      _TAB.cntx_pop();
      obj_del(_TAB)
   !};
   obj_del(_tabs);

   {? BIPULP.del(1,1)
   || return('')
   || KOMM.error('Usunięcie wiersza nie powiodło się.'@,0);
      return(~~)
   ?}
?};

_funkc:=_kat:='';
_Category:=spli_str(_obj.getValue('Category'),'^');
{? obj_len(_Category)=2
|| _funkc:=_Category[1];
   _kat:=_Category[2];
   obj_del(_Category)
|| obj_del(_Category);
   KOMM.error('Niewłaściwy zapis w polu %1.'@ ['Category'],0);
   return(~~)
?};

_firma:=exec('ref_firma','ustawienia');

BIPKAT.cntx_psh();
BIPKAT.index('KOD');
BIPKAT.prefix(_firma,_funkc,);
{? BIPKAT.find_key(_kat)
|| _katref:=BIPKAT.ref()
?};
BIPKAT.cntx_pop();
{? _katref=null()
|| KOMM.error('Odnalezienie kategorii "%1" nie powiodło się.'@ [_kat],0);
   return()
?};

{? _act='add'
|| _opisAkt:='';
   BIPULP.blank(1)
|| _opisAkt:=BIPULP.memo_txt(,1,'OPIS')
?};

BIPULP.BIPKAT:=_katref;
_opisNew:=_obj.getValue('Description');
BIPULP.memo_set(_opisNew,'OPIS');
_AdsImprovementDate:=exec('getDateTime','portal_core',_obj.getValue('AdsImprovementDate'));
BIPULP.DT1:=_AdsImprovementDate.date;
BIPULP.GD1:=_AdsImprovementDate.time;
_ExpirationDate:=exec('getDateTime','portal_core',_obj.getValue('ExpirationDate'));
BIPULP.DT2:=_ExpirationDate.date;
{? BIPULP.DT2<>date(0,0,0)
|| BIPULP.GD2:=time(23,59,59)
?};
_pkt:=_obj.getValue('Points');
BIPULP.PKT:={? type_of(_pkt)=type_of(0) || _pkt || 0 ?};
_rating:=_obj.getValue('Rating');
BIPULP.OCENA:={? type_of(_rating)=type_of(0) || _rating || 0 ?};
BIPULP.TYTUL:=_obj.getValue('Title');
{? _funkc='ULP'
|| BIPULP.DT3:=exec('getDateTime','portal_core',_obj.getValue('VotingEndDate')).date
?};

:: Właściciel:
_crPerId:=_obj.getValue('CreatorPersonId');
{? type_of(_crPerId)<>type_of(0)
|| KOMM.error('Niewłaściwy typ wartości w polu %1.'@ ['CreatorPersonId'],0);
   return(~~)
|? _crPerId:=exec('getPref','portal_core',_crPerId);
   _crPerId=null()
|| KOMM.error('Odnalezienie autora [%1] ulepszenia / ogłoszenia nie powiodło się.'@ [$_crPerId],0);
   return(~~)
?};
BIPULP.P:=_crPerId;

:: Status:
BIPKAT.cntx_psh();
BIPKAT.prefix();
BIPULP.STATUS:=exec('bipulp_status_nazwa','portal_bip',_obj.getValue('Status'),BIPULP.BIPKAT().FUNKC);
BIPKAT.cntx_pop();

:: Dołączenie rekordu wcześniej, żeby nadały się ZZ_DOK:
{? _act='add'
|| {? BIPULP.add()
   || {? _opisNew<>_opisAkt
      || BIPULP.memo_put(,'OPIS')
      ?}
   || KOMM.error('Dodanie rekordu nie powiodło się.'@,0);
      return(~~)
   ?}
?};

:: Załączniki:
_del:=0;
_ATT:=exec('get_attachments','portal_engine',_obj).ATT;
{? _ATT.first()
|| _hash:='';
   {!
   |? _hash+=exec('hash','#blob',_ATT.BLOB);
      _ATT.next()
   !};
   _hash:=hash(_hash);
   {? _act='put' & _ext<>_hash
   || _del:=exec('del_ndx','#table',ZZ_DOKZ,'CZAS',BIPULP.NP_DOK,BIPULP.ZZ_DOK)
   ?};
:: Dodajemy załączniki odebrane z portalu:
   {? _act='add' | _del
   || ZZ_DOK.cntx_psh();
      ZZ_DOK.prefix();
      _autor:=BIPULP.ZZ_DOK().AUTOR;
      ZZ_DOK.cntx_pop();
      ZZ_DOKZ.cntx_psh();
      ZZ_DOKZ.prefix();
      ZZ_DOKZ.blank();
      ZZ_DOKZ.ZZ_LINK:=BIPULP.ZZ_DOK;
      ZZ_DOKZ.NP_DOK:=BIPULP.NP_DOK;
      ZZ_DOKZ.UD_SKL:=exec('typzal_root','phr_dane',BIPULP,1).UD_SKL;
      {!
      |? ZZ_DOKZ.PLIK:=_ATT.BLOB;
         {? ZZ_DOKZ.add()
         || ZZ_DOK.cntx_psh();
            ZZ_DOK.prefix();
            ZZ_DOKZ.ZZ_DOK().AUTOR:=_autor;
            ZZ_DOK.put();
            ZZ_DOK.cntx_pop()
         ?};
         _ATT.prev()
      !};
      ZZ_DOKZ.cntx_pop()
   ?}
:: Rekord przyszedł z portalu bez załączników:
|? _act='put'
|| exec('del_ndx','#table',ZZ_DOKZ,'CZAS',BIPULP.NP_DOK,BIPULP.ZZ_DOK)
?};

:: Miniaturka/zdjęcie:
_thCh:=0;
_TMB:=exec('get_thumbnail','portal_engine',_obj);
{? _TMB.first()
|| {? hash(fopen(BIPULP.ZDJECIE,'b',,,1))<>hash(fopen(_TMB.BLOB,'b',,,1))
   || _thCh:=1;
      BIPULP.ZDJECIE:=_TMB.BLOB
   ?}
|? _act='put' & BIPULP.ZDJECIE<>null() & _obj.getValue('ImageId')=~~
:: Miniatura nie jest przysyłana, jeżeli się nie zmieniła, ale przysyłany jest jej identyfikator - 'ImageId'.
:: Tak więc dopiero brak miniatury i brak identyfikatora oznacza, że miniatura została usunięta z portalu i powinna
:: zostać usunięta z ERP-a.
|| _thCh:=1;
   BIPULP.ZDJECIE:=null()
?};

:: __Notes - komentarze:
_error:='';
BIPKAT.cntx_psh();
BIPKAT.index('KOD');
:: Podczytanie kategorii właściwej dla komentarzy ogłoszeń/ulepszeń:
BIPKAT.prefix(_firma,'%1_KOM'[_funkc],'%1_KOM'[_funkc],);
_bipkat:={? BIPKAT.first() || BIPKAT.ref() || null() ?};
BIPKAT.cntx_pop();
{? ~_bipkat
|| _error:='Brak kategorii właściwej dla komentarzy ogłoszeń/ulepszeń.'@
?};
{? ~+_error
|| BIPPYTN.cntx_psh();
   BIPPYTN.index('BIPKAT');
:: Podczytanie wątku właściwego dla komentarzy konkretnego ogłoszenia/ulepszenia:
   BIPPYTN.prefix(_bipkat,BIPULP.NP_DOK,BIPULP.ZZ_DOK);
   _bippytn:={? BIPPYTN.first() || BIPPYTN.ref() || null() ?};
   BIPPYTN.cntx_pop();
   {? ~_bippytn
   || _error:='Brak wątku właściwego dla komentarza.'@
   ?}
?};
:: Nadejszłe komentarze:
{? ~+_error
|| _NTS:=exec('get_notes','portal_engine',_obj);
   {? _NTS.find_tab(,'PUID',,'=','')
   || _error:='Brak wskazanego w komentarzu pracownika. Rekord nie został pobrany.'@
   ?}
?};
{? +_error
|| KOMM.error(_error,0);
   {? _act='add'
   || BIPULP.del()
   ?};
   return(~~)
?};

:: Usunięcie komentarzy, które mamy, a które nie przyszły z portalu:
{? _act='put'
|| BIPPYTP.cntx_psh();
   BIPPYTP.index('BIPPYTN');
   BIPPYTP.prefix(_bippytn);
   {? BIPPYTP.first()
   || P.cntx_psh();
      {!
      |? _del:=0;
         {? _NTS.find_tab(,'PUID',,'=',BIPPYTP.P().uidref(),'DT',,'=',BIPPYTP.DT,'GD',,'=',BIPPYTP.GD)
         || _NTS.memo_get();
            BIPPYTP.memo_get();
            _del:=(_NTS.memo_txt(,,'TRESC')<>BIPPYTP.memo_txt(,,'TRESC'))
         || _del:=1
         ?};
         {? _del
         || _del:=BIPPYTP.del(1)
         ?};

         _del | BIPPYTP.next()
      !};
      P.cntx_pop()
   ?};
   BIPPYTP.cntx_pop()
?};

:: Wypełnienie nadejszłymi komentarzami:
{? _NTS.first()
|| {!
   |? _pRef:=null();
      P.cntx_psh();
      {? P.seek(_NTS.PUID,,1)
      || _pRef:=P.ref()
      ?};
      P.cntx_pop();
      {? _pRef
      || _istn:=0;
::    Sprawdzam czy już istnieje identyczny komentarz:
         BIPPYTP.cntx_psh();
         BIPPYTP.index('BIPPYTN');
         BIPPYTP.prefix(_bippytn,_NTS.DT,_NTS.GD);
         {? BIPPYTP.first()
         || {!
            |? {? BIPPYTP.P=_pRef
               || _NTS.memo_get();
                  BIPPYTP.memo_get();
                  _istn:=(_NTS.memo_txt(,,'TRESC')=BIPPYTP.memo_txt(,,'TRESC'))
               ?};

               ~_istn | BIPPYTP.next()
            !}
         ?};
         BIPPYTP.cntx_pop();
::       Jeżeli komentarz nie istnieje w naszej bazie to go dodajemy:
         {? ~_istn
         || BIPPYTP.blank();
            BIPPYTP.BIPPYTN:=_bippytn;
            BIPPYTP.P:=_pRef;
            BIPPYTP.DT:=_NTS.DT;
            BIPPYTP.GD:=_NTS.GD;
            _NTS.memo_get();
            BIPPYTP.memo_set(_NTS.memo_txt(,,'TRESC'),'TRESC');
            {? BIPPYTP.add()
            || BIPPYTP.memo_put(,'TRESC')
            ?}
         ?}
      ?};

      _NTS.next()
   !}
?};

{? BIPULP.put()
|| {? _thCh & (_file:=BIPULP.bl_file('ZDJECIE'))<>''
   || BIPULP.bl_put('ZDJECIE',_file)
   ?};
   {? _act='add'
   || BIPULP.uidref()+BIPULP.HASH
   || {? _opisNew<>_opisAkt
      || BIPULP.memo_put(,'OPIS')
      ?};
      ''
   ?}
|| ~~
?}


\chr_AdsImprovementGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPULP.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPULP_OGUL_ID',
   "exec('chr_AdsImprovementGet_update','portal_method_chr_ads',_a,_b,_c)")


\chr_AdsImprovementDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovementDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id','PORTAL_BIPULP_OGUL_ID',_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   BIPULP.cntx_psh();
   BIPULP.prefix();
   {? BIPULP.seek(_uidref)
::    Porównanie hash załączników z tym zapisanym przy identyfikatorze rekordu oraz znacznika PORTAL:
   || _del:=BIPULP.STATUS<>'W trakcie edycji'@ & (BIPULP.HASH<>_DEL.OPIS | BIPULP.PORTAL<>'T')
   ?};
   BIPULP.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core','PORTAL_BIPULP_OGUL_ID',_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}

|| params_exec('Delete_args','portal_core','PORTAL_BIPULP_OGUL_ID')
?}


\chr_AdsImprovementDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPULP_OGUL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovementPerson -> chr_AdsImprPer (Ogłoszenia i ulepszenia - osoby).
::======================================================================================================================


\chr_AdsImprPerModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovementPerson.
::       Kontekst wywołania - rekord tabeli BIPODB.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Sprawdzenie czy kategoria dotyczy ogłoszeń lub ulepszeń:
BIPKAT.cntx_psh();
BIPKAT.prefix();
_ok:=',OGL,ULP,'*',%1,' [BIPODB.BIPKAT().FUNKC];
BIPKAT.cntx_pop();
{? ~_ok
|| KOMM.add('Kategoria nie jest kategorią ogłoszeń/ulepszeń.'@);
   return(0)
|? BIPODB.STATUS='W'
|| KOMM.add('Odbiorca wykluczony.'@);
   return(0)
?};

:: Pobranie ref ogłoszenia/ulepszenia:
_ref:=_hash:='';
BIPULP.cntx_psh();
BIPULP.index('ZZ_DOK');
BIPULP.prefix(BIPODB.NP_DOK,BIPODB.ZZ_LINK);
{? BIPULP.first()
|| P.cntx_psh();
   P.prefix();
   {? BIPULP.P().PORTAL<>'T'
   || _ref:='pportal'
   |? BIPULP.PORTAL<>'T'
::    Sprawdzenie znacznika "Widoczny na portalu":
   || _ref:='nportal'
   || _hash:=BIPULP.HASH;
      _ref:=BIPULP.uidref()
   ?};
   P.cntx_pop()
?};
BIPULP.cntx_pop();
{? _ref='' | _ref='nportal' | _ref='pportal'
|| {? _ref=''
   || KOMM.error('Odnalezienie ogłoszenia / ulepszenia dla odbiorcy nie powiodło się.'@,0)
   |? _ref='pportal'
   || KOMM.add('Osoba zgłaszająca ogłoszenie/ulepszenie nieprezentowana na portalu.'@)
   |? _ref='nportal'
   || KOMM.add('Ogłoszenie/ulepszenie nieprezentowane na portalu.'@)
   ?};
   return(0)
?};

P.cntx_psh();
P.prefix();
BIPODB.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('__ModifiedDate_erp',BIPODB.idput_value());
   _obj.set('__id_erp',BIPODB.uidref()+_hash);
   _obj.set('AdsImprovementId__id_Erp',_ref+_hash);
   _obj.set('PersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};
P.cntx_pop();
_ret


\chr_AdsImprPerModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja osób widzących ulepszenia i ogłoszenia - parametr zapytania chr_AdsImprovementPersonModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprPerModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPODB_OGUL_ID',_formula_json)


\chr_AdsImprPerModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementPersonModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPODB_OGUL_ID')


\chr_AdsImprPerGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Pobranie wątków - parametr zapytania chr_AdsImprovementPersonGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_AdsImprPerGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli BIPODB na podstawie wyniku zapytania chr_AdsImprovementPersonGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

_err:="KOMM.error(_a,0);
       return(~~)";
{? _act='del'
|| _errDel:='Usunięcie wiersza nie powiodło się.'@;
   {? BIPODB.STATUS='A'
:: Usuwany odbiorca był dodany w Merit przez kryteria - nie usuwamy tylko wykluczamy:
   || BIPODB.STATUS:='W';
      {? BIPODB.put()
      || return('')
      || return(_err(_errDel))
      ?}
:: Usuwany odbiorca był dodany ręcznie - usuwamy:
   |? BIPODB.STATUS='R'
   || {? BIPODB.del(1,1)
      || return('')
      || return(_err(_errDel))
      ?}
:: Usuwany jest już wykluczony - nie robimy nic:
   || KOMM.add('Usuwany odbiorca jest już wykluczony.'@);
      return('')
   ?}

:: Z dokumentacji wynika, że na portalu możliwe jest jedynie dodawanie i usuwanie odbiorców (nie są modyfikowalne pola
:: AdsImprovementId i PersonId, a są to jedyne pola z danymi, które moglibyśmy wykorzystać.
|? _act='add'
|| _ret:=~~;
:: Znalezienie wskazania na ogłoszenie ulepszenie:
   _ogulRef:=exec('get_id_erp','portal_core','PORTAL_BIPULP_OGUL_ID',_obj.getValue('AdsImprovementId'));
   {? _ogulRef=null()
   || return(_err('Znalezienie ogłoszenia / ulepszenia nie powiodło się.'@))
   ?};
:: Znalezienie wskazania na pracownika:
   _pRef:=exec('getPref','portal_core',_obj.getValue('PersonId'));
   {? _pRef=null()
   || return(_err('Znalezienie pracownika nie powiodło się [1].'@))
   ?};

   P.cntx_psh();
:: Ustawienie się na odpowiednim pracowniku:
   {? ~P.seek(_pRef,,1)
   || P.cntx_pop();
      return(_err('Znalezienie pracownika nie powiodło się [2].'@))
   ?};
   P.cntx_pop();

   BIPULP.cntx_psh();
   BIPULP.prefix();
:: Ustawienie się na odpowiednim ogłoszeniu/ulepszeniu:
   {? ~BIPULP.seek(_ogulRef)
   || BIPULP.cntx_pop();
      return(_err('Znalezienie ogłoszenia / ulepszenia nie powiodło się.'@))
   ?};

:: Sprawdzam czy odbiorca, któy przyszedł z portalu jest już w Merit:
   BIPODB.cntx_psh();
   BIPODB.index('LINK');
   BIPODB.prefix(BIPULP.NP_DOK,BIPULP.ZZ_DOK,_pRef);
   {? BIPODB.first()
::    Jest taki wykluczony:
   || {? BIPODB.STATUS='W'
      || _zz_typ:=exec('typ_find','phr_dane','P','ODB');
::       Sprawdzam czy odbiorca nadal spełnia kryteria:
         {? _zz_typ<>null() & exec('test_kryt','phr_dane',BIPULP.ZZ_DOK,_zz_typ,0,exec('dbk','portal_bip',BIPULP),P)>0
         || BIPODB.STATUS:='A'
         || BIPODB.STATUS:='R'
         ?};
         {? BIPODB.put()
         || KOMM.add('Poprawiono status odbiorcy.'@);
            _ret:=''
         || KOMM.error('Poprawienie odbiorcy nie powiodło się.'@,0)
         ?}
      ?}
:: Odbiorcy z portalu nie ma w Merit:
   || BIPODB.blank();
      BIPODB.FIRMA:=BIPULP.FIRMA;
      BIPODB.STATUS:='R';
      BIPODB.P:=_pRef;
      BIPODB.ZZ_LINK:=BIPULP.ZZ_DOK;
      BIPODB.BIPKAT:=BIPULP.BIPKAT;
      exec('bipodb_set','portal_bip','BIPULP');

:: Właściwe dodanie rekordu:
      {? BIPODB.add()
      || _ret:=BIPODB.uidref()+BIPULP.HASH
      || KOMM.error('Dodanie rekordu nie powiodło się.'@,0)
      ?}
   ?};
   BIPODB.cntx_pop();
   BIPULP.cntx_pop();

   _ret
:: _act=put - wynik wymiany danych między Portalem a Meritem (brak możliwości zmian na portalu):
|| ''
?}


\chr_AdsImprPerGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementPersonGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPODB.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPODB_OGUL_ID',
   "exec('chr_AdsImprPerGet_update','portal_method_chr_ads',_a,_b)")


\chr_AdsImprPerDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovementPersonDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id','PORTAL_BIPODB_OGUL_ID',_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   BIPODB.cntx_psh();
   BIPODB.prefix();
   {? BIPODB.seek(_uidref)
:: Oznaczenie wykluczonego odbiorcy do usunięcia z portalu:
   || _del:=(BIPODB.STATUS='W')
   ?};
:: Sprawdzenie czy hash z BIPODB równy jest aktualnemu w BIPULP oraz znacznika PORTAL:
   {? ~_del
   || BIPULP.cntx_psh();
      BIPULP.index('ZZ_DOK');
      BIPULP.prefix(BIPODB.NP_DOK,BIPODB.ZZ_LINK);
      {? BIPULP.first()
      || _del:=BIPULP.STATUS<>'W trakcie edycji'@ & (_DEL.OPIS<>BIPULP.HASH | BIPULP.PORTAL<>'T')
      ?};
      BIPULP.cntx_pop()
   ?};
   BIPODB.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core','PORTAL_BIPODB_OGUL_ID',_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      ~~
   ?}
:: Klasyczne usuwanie:
|| params_exec('Delete_args','portal_core','PORTAL_BIPODB_OGUL_ID')
?}


\chr_AdsImprPerDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementPersonDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPODB_OGUL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovementVote -> chr_AdsImprVote (Ogłoszenia i ulepszenia - głosy).
::======================================================================================================================


\chr_AdsImprVoteModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovementVoteModify.
::       Kontekst wywołania - rekord tabeli BIPULPG.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

_ref:=_hash:='';
:: Pobranie ref ogłoszenia/ulepszenia:
BIPULP.cntx_psh();
BIPULP.index('ZZ_DOK');
BIPULP.prefix(BIPULPG.NP_DOK,BIPULPG.ZZ_LINK);
{? BIPULP.first()
|| P.cntx_psh();
   P.prefix();
   {? BIPULP.P().PORTAL<>'T'
   || _ref:='pportal'
   |? BIPULP.PORTAL<>'T'
   || _ref:='nportal'
   || _hash:=BIPULP.HASH;
      _ref:=BIPULP.uidref()
   ?};
   P.cntx_pop()
?};
BIPULP.cntx_pop();
{? _ref='' | _ref='nportal' | _ref='pportal'
|| {? _ref=''
   || KOMM.error('Odnalezienie ogłoszenia / ulepszenia dla odbiorcy nie powiodło się.'@,0)
   |? _ref='pportal'
   || KOMM.add('Osoba zgłaszająca ogłoszenie/ulepszenie nieprezentowana na portalu.'@)
   |? _ref='nportal'
   || KOMM.add('Ogłoszenie/ulepszenie nieprezentowane na portalu.'@)
   ?};
   return(0)
?};

P.cntx_psh();
P.prefix();
BIPULPG.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('VoteDate',BIPULPG.DATA,BIPULPG.GODZ);
   _obj.set('__ModifiedDate_erp',BIPULPG.idput_value());
   _obj.set('__id_erp',BIPULPG.uidref()+_hash);
   _obj.set('AdsImprovementId__id_Erp',_ref+_hash);
   _obj.set('VotePersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};
P.cntx_pop();
_ret


\chr_AdsImprVoteModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja głosów ulepszeń - parametr zapytania chr_AdsImprovementVoteModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprVoteModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPULPG_OGUL_ID',_formula_json)


\chr_AdsImprVoteModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementVoteModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPULPG_OGUL_ID')


\chr_AdsImprVoteGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Pobranie wątków - parametr zapytania chr_AdsImprovementVoteGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_AdsImprVoteGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli BIPULPG na podstawie wyniku zapytania chr_AdsImprovementVoteGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? BIPULPG.del(1,1)
   || return('')
   || KOMM.error('Usunięcie wiersza nie powiodło się.'@,0);
      return(~~)
   ?}
?};
{? _act='add'
|| BIPULPG.blank()
?};

:: Znalezienie wskazania na ogłoszenie ulepszenie:
_ogulRef:=exec('get_id_erp','portal_core','PORTAL_BIPULP_OGUL_ID',_obj.getValue('AdsImprovementId'));
:: Znalezieniewskazania na pracownika:
_pRef:=exec('getPref','portal_core',_obj.getValue('VotePersonId'));
{? _ogulRef=null() | _pRef=null()
|| KOMM.error('Brak %1. Rekordu nie pobrano.'@[{? _pRef=null() || 'pracownika'@ || 'ogłoszenia/ulepszenia'@ ?}],0);
   return(~~)
?};

BIPULP.cntx_psh();
BIPULP.prefix();
:: Ustawienie się na odpowiednim ogłoszeniu/ulepszeniu:
{? ~BIPULP.seek(_ogulRef)
|| BIPULP.cntx_pop();
   return(~~)
?};
BIPULPG.NP_DOK:=BIPULP.NP_DOK;
BIPULPG.ZZ_LINK:=BIPULP.ZZ_DOK;
_hash:=BIPULP.HASH;
BIPULP.cntx_pop();

:: Podstawienie pobranej z portalu daty:
_VoteDate:=exec('getDateTime','portal_core',_obj.getValue('VoteDate'));
BIPULPG.DATA:=_VoteDate.date;
BIPULPG.GODZ:=_VoteDate.time;

BIPULPG.P:=_pRef;
P.cntx_psh();
:: Ustawienie się na odpowiednim pracowniku:
{? ~P.seek(_pRef,,1)
|| P.cntx_pop();
   return(~~)
?};
BIPULPG.OSOBA:=P.OSOBA;
BIPULPG.WYDZIAL:=P.WYDZIAL;
BIPULPG.ST:=P.ST;
BIPULPG.CP:=P.CP;
BIPULPG.F_ZATR:=P.F_ZATR;
P.cntx_pop();

{? _act='add'
|| {? BIPULPG.add()
   || BIPULPG.uidref()+_hash
   || ~~
   ?}
|| {? BIPULPG.put()
   || ''
   || ~~
   ?}
?}


\chr_AdsImprVoteGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementVoteGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPULPG.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPULPG_OGUL_ID',
   "exec('chr_AdsImprVoteGet_update','portal_method_chr_ads',_a,_b)")


\chr_AdsImprVoteDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovementVoteDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? _env.Type=exec('mwac_type_send','synchro')
:: Obsługa "wysyłania", czyli zmienił się rekord.
|| _uidref:=_env.Param;
   _DEL:=exec('get_id','#sync_id','PORTAL_BIPULPG_OGUL_ID',_uidref);
:: Powyżej przygotowujemy tabelę z wszystkimi rekordami na portalu (związanymi ze zmienionym rekordem).
:: W efekcie końcowym, będzie to tabela z rekordami do usunięcia.

   {? ~_DEL.first()
::    Na portal rekord nie został jeszcze wysłany - nie ma co kasować.
   || KOMM.add('Wiersz nie został jeszcze wysłany na portal.'@);
      return()
   ?};

   _del:=0;
   BIPULPG.cntx_psh();
   BIPULPG.prefix();
   {? BIPULPG.seek(_uidref)
   || BIPULP.cntx_psh();
      BIPULP.index('ZZ_DOK');
      BIPULP.prefix(BIPULPG.NP_DOK,BIPULPG.ZZ_LINK);
      {? BIPULP.first()
::    Sprawdzenie czy BIPULPG.HASH równy jest aktualnemu w BIPULP (jeśli się różnią, to znaczy, że była zmiana
::    w załącznikach oraz sprawdzenie znacznika "Widoczny na portalu":
      || _del:=(_DEL.OPIS<>BIPULP.HASH | BIPULP.PORTAL<>'T')
      ?};
      BIPULP.cntx_pop()
   || BIPULPG.cntx_pop();
      KOMM.error('Nie udało się wskazać znalezionego rekordu.'@,0);
      return(~~)
   ?};
   BIPULPG.cntx_pop();
   {? _del
   || params_exec('Delete_args','portal_core','PORTAL_BIPULPG_OGUL_ID',_DEL)
   || KOMM.add('Wiersz nie wymagał usunięcia.'@);
      return(~~)
   ?}
:: Klasyczne usuwanie:
|| params_exec('Delete_args','portal_core','PORTAL_BIPULPG_OGUL_ID')
?}


\chr_AdsImprVoteDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementVoteDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPULPG_OGUL_ID')


::======================================================================================================================
:: Metody dostępu do portalu - chr_AdsImprovementRating -> chr_AdsImprRating (Ogłoszenia i ulepszenia - oceny).
::======================================================================================================================
:: IS!!! WYSYŁANIE I ODBIERANIE OCEN NA RAZIE NIE BĘDZIE OBSŁUGIWANE PO STRONIE PORTALU.
:: Po uruchomieniu tej funkcjonalności na portalu należy wrócić do poniższego tematu...
\chr_AdsImprRatingModify_json
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: JSON dla zapytania chr_AdsImprovementRatingModify.
::       Kontekst wywołania - rekord tabeli BIPULPO.
::   WE: _a [NUMBER] - id_cloud / 0
::       _b [STRING] - opis dodatkowy / ''
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_id:=_a;
_ext:=_b;

params_set(_par:=params_get());
_env:=_par.env;
_obj:=_env.Adds.obj;

:: Pobranie ref ogłoszenia/ulepszenia:
BIPULP.cntx_psh();
BIPULP.index('ZZ_DOK');
BIPULP.prefix(BIPULPO.NP_DOK,BIPULPO.ZZ_LINK);
{? ~BIPULP.first()
|| BIPULP.cntx_pop();
   KOMM.add('Nie znaleziono właściwego ogłoszenia/ulepszenia.'@);
   return(0)
|| _ref:=BIPULP.uidref()
?};
BIPULP.cntx_pop();

P.cntx_psh();
P.prefix();
BIPULPO.P();
{? P.PORTAL<>'T'
|| KOMM.add('Współpracownik nieprezentowany na portalu.'@);
   _ret:=0
|| _obj.create();

   _obj.set('__id_cloud',{? _id || _id || ~~ ?});
   _obj.set('RatingDate',BIPULPO.DATA,BIPULPO.GODZ);
   _obj.set('__ModifiedDate_erp',BIPULPO.idput_value());
   _obj.set('__id_erp',BIPULPO.uidref());
   _obj.set('AdsImprovementId__id_Erp',_ref);
   _obj.set('RatingPersonId__id_Erp',P.uidref());

   _ret:=_obj.save()
?};
P.cntx_pop();
_ret


\chr_AdsImprRatingModify_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Dodanie/modyfikacja ocen ulepszeń - parametr zapytania chr_AdsImprovementRatingModify.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
_formula_json:="params_exec('chr_AdsImprRatingModify_json','portal_method_chr_ads',_a,_b)";
params_exec('Modify_args','portal_core','PORTAL_BIPULPO_OGUL_ID',_formula_json)


\chr_AdsImprRatingModify_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementRatingModify.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Modify_parse','portal_core','PORTAL_BIPULPO_OGUL_ID')


\chr_AdsImprRatingGet_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Pobranie wątków - parametr zapytania chr_AdsImprovementRatingGet.
::   WY: argumenty w postaci tablicy nazwanej.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_args','portal_core')


\chr_AdsImprRatingGet_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Formuła aktualizująca dane w tabeli BIPULPO na podstawie wyniku zapytania chr_AdsImprovementRatingGet.
::   WE: _a [OBJECT] - Obiekt klasy JSON_MAN.
::       _b [STRING] - Akcja do wykonania: add/put/del.
::       _c [STRING] - Dodatkowy opis (wyróżnik) rekordu. Dla akcji 'add' - zawsze ''.
::   WY: Identyfikator rekordu lub 0 - dla akcji 'add', '' - dla akcji 'put' i 'del' lub ~~ w przypadku błędu.
::----------------------------------------------------------------------------------------------------------------------
_obj:=_a;
_act:=_b;

{? _act='del'
|| {? BIPULPO.del(1,1)
   || return('')
   || KOMM.error('Usunięcie wiersza nie powiodło się.'@,0);
      return(~~)
   ?}
?};
{? _act='add'
|| BIPULPO.blank()
?};

:: Znalezienie wskazania na ogłoszenie ulepszenie:
_ogulRef:=exec('get_id_erp','portal_core','PORTAL_BIPULP_OGUL_ID',_obj.getValue('AdsImprovementId'));
:: Znalezieniewskazania na pracownika:
_pRef:=exec('getPref','portal_core',_obj.getValue('RatingPersonId'));
{? _ogulRef=null() | _pRef=null()
|| KOMM.error('Brak %1. Rekordu nie pobrano.'@[{? _pRef=null() || 'pracownika'@ || 'ogłoszenia/ulepszenia'@ ?}],0);
   return(~~)
?};

BIPULP.cntx_psh();
BIPULP.prefix();
:: Ustawienie się na odpowiednim ogłoszeniu/ulepszeniu:
{? ~BIPULP.seek(_ogulRef)
|| BIPULP.cntx_pop();
   KOMM.error('Brak wskazanego ogłoszenia/ulepszenia. Rekord nie został pobrany.'@,0);
   return(~~)
?};
BIPULPO.NP_DOK:=BIPULP.NP_DOK;
BIPULPO.ZZ_LINK:=BIPULP.ZZ_DOK;
BIPULP.cntx_pop();

:: Podstawienie pobranej z portalu daty:
_RatingDate:=exec('getDateTime','portal_core',_obj.getValue('RatingDate'));
BIPULPO.DATA:=_RatingDate.date;
BIPULPO.GODZ:=_RatingDate.time;

:: IS!!! Brak obsługi pola BIPPYTO

BIPULPO.P:=_pRef;
P.cntx_psh();
:: Ustawienie się na odpowiednim pracowniku:
{? ~P.seek(_pRef,,1)
|| P.cntx_pop();
   KOMM.error('Brak wskazanego pracownika. Rekord nie został pobrany.'@,0);
   return(~~)
?};
BIPULPO.OSOBA:=P.OSOBA;
BIPULPO.WYDZIAL:=P.WYDZIAL;
BIPULPO.ST:=P.ST;
BIPULPO.CP:=P.CP;
BIPULPO.F_ZATR:=P.F_ZATR;
P.cntx_pop();

BIPULPO.OCENA:=_obj.getValue('Rating');

{? _act='add'
|| {? BIPULPO.add()
   || BIPULPO.uidref()
   || ~~
   ?}
|| {? BIPULPO.put()
   || ''
   || ~~
   ?}
?}


\chr_AdsImprRatingGet_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementRatingGet.
::       Przetwarza dane i modyfikuje zbiór rekordów tabeli BIPULPO.
::----------------------------------------------------------------------------------------------------------------------
params_exec('Get_parse','portal_core','PORTAL_BIPULPO_OGUL_ID',
   "exec('chr_AdsImprRatingGet_update','portal_method_chr_ads',_a,_b)")


\chr_AdsImprRatingDelete_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parametr zapytania chr_AdsImprovementRatingDelete.
::   WE:
::   WY: JSON
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_args','portal_core','PORTAL_BIPULPO_OGUL_ID')


\chr_AdsImprRatingDelete_parse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.42]
:: OPIS: Parsowanie odpowiedzi dla chr_AdsImprovementRatingDelete.
::   WE:
::----------------------------------------------------------------------------------------------------------------------
params_exec('Delete_parse','portal_core','PORTAL_BIPULPO_OGUL_ID')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:38 04cee7f4d4cdab75b4a41a912100163a3d7561801c0cd03e9a16753cc0154e8f391bff3d41ab516b2bff3f45110d04c455aa9fbdcf3a050ca5072af3c505dda21bbfa90035ac26deb5552907884933769b1183240d4cf5623a20dc2009a754edd75a9ccd3aedf12c8aadc9cd16c428221832fbe56f63cd14312e580c4a6697b6
