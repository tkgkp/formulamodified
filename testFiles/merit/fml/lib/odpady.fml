:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrze�one
::======================================================================================================================
:: Nazwa pliku: odpady.fml
:: Utworzony: 13.02.2019
:: Autor: MW
:: Systemy: Merit
::======================================================================================================================
:: Zawartość: Odpady
::======================================================================================================================


\bl_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: wartosc na blank
::  OLD: \bl_kpo/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=~~;
{? _fld='KH_MPD'
|| _res:={? KPO.KH_ODB<>null() || KPO.KH_ODB().NRMPDBDO || '' ?}
|? _fld='KH_2_MPD'
|| _res:={? KPO.KH_ODB_2<>null() || KPO.KH_ODB_2().NRMPDBDO || '' ?}
|? _fld='KH_3'
|| _res:=exec('kpo_kh3_domyslny','odpady')
|? _fld='KH'
|| _res:=exec('kpo_kh_domyslny','odpady')
|? _fld='KH_ODB'
|| _res:=exec('kpo_khodb_domyslny','odpady',KPO.KH)
|? _fld='KH_2'
|| _res:=exec('kpo_kh2_domyslny','odpady')
|? _fld='KH_ODB_2'
|| _res:=exec('kpo_khodb2_domyslny','odpady',KPO.KH_2)
?};
_res


\disp_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: DISP.R
::  OLD: \disp_r/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
DISP.R


\mp_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2011]
:: OPIS: F3 wyswietla składowiska
::  OLD: \mp_f3/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
WYS.win_sel('WER');
WYS.index('ODDZ');
WYS.prefix(ST.ODDZ);
{? WYS.select()
|| WYS.NAZ+{? WYS.UL().UL<>'' || ' '+WYS.UL().UL || '' ?}+{? WYS.NR<>'' || ' '+WYS.NR || '' ?}
      +{? WYS.TEL<>'' || ' tel. '+WYS.TEL || '' ?}+{? WYS.REG<>'' || ' Nr REGON: '+WYS.REG || '' ?}
|| 0
?}


\kpo_poz1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: pozycje karty przekazania odpadu
::  OLD: \kpo_poz1/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
KPOZ.win_sel('SLO');
KPOZ.win_edit('');
KPOZ.index('KPO');
KPOZ.prefix(KPO.ref);
KPOZ.select();
1


\kpo_tra1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: transporty do karty przekazania odpadu
::  OLD: \kpo_tra1/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
KH.cntx_psh();
KPOT.win_sel('SLO');
KPOT.win_edit('RED');
KPOT.index('KPO');
KPOT.prefix(KPO.ref);
KPOT.select();
KH.cntx_pop();
1


\kpo_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: drukowanie karty przekazania odpadu
::  OLD: \kpo_druk/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='Area Drukuj' ?};

_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_WWKP';
_params.UIDREF:=KPO.uidref();
_params.AKCJA:=_a;
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KPO',KPO.ref());
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'CZY_PDF','NIE');

exec('mp_run','#b__box',_params)


\chk_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: po redakcji KPO
::   WE: [_a] - sprawdzenie obecności pozycji (KPOZ) 0 - nie (domyślnie), 1 - tak
::       [_b] - Karta/Wzorzec, [0] - Karta, 1 - Wzorzec
::  OLD: \chk_kpo/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | type_of(_a)<>type_of(0)
|| _a:=0
?};
_korw:={? var_pres('_b')=type_of(0) || _b || 0 ?};
:: czy wyświetlać komunikaty przy __CHK.record
_message:={? VAR.GRUPA='T' || 1 || '' ?};
:: Czy dodawać komunikaty do KOMM
_czy_komm:={? VAR.GRUPA='T' || 1 || 0 ?};
{? _korw
|| _wyn:=__CHK.record(KPO,_message,'SYM_W','OPIS_W');
   {? _wyn='' & ~exec('valid_time','#field',KPO.TMSKOK,1)
   || FUN.info('Pole skok czasu musi mieścić się w przedziale %1 ÷ %2.'@['0:0:0','23:59:59']);
      _wyn:='TMSKOK'
   ?}
|| _wyn:=__CHK.record(KPO,_message,'KH','KH_MPD');
:: Sprawdzenie czy podany numer MPD przekazującego jest zgodny z numerem na odbiorcy
   {? _wyn=''
   || {? KPO.KH_ODB<>null() & KPO.KH_ODB().NRMPDBDO<>KPO.KH_MPD
      || {? VAR.GRUPA='T'
         || _msg:='Numer miejsca prowadzenia działaności przekazującego karty %1 jest niezgodny z numerem przypisanym do odbiorcy.'@[KPO.SYM];
            _czy_komm:=0;
            KOMM.add(_msg)
         || _czy_komm:=0;
            FUN.info('Numer miejsca prowadzenia działaności przekazującego jest niezgodny z numerem przypisanym do odbiorcy.'@)
         ?};
::         KPO.KH_MPD:= KPO.KH_ODB().NRMPDBDO;
         _wyn:='KH_MPD'
      ?}
   ?};
   {? _wyn='' & KPO.WG
   || _wyn:=__CHK.record(KPO,_message,'WG_KOD_G')
   ?};
   {? _wyn=''
   || _wyn:=__CHK.record(KPO,_message,'KH_3','KH_2','KH_2_MPD')
   ?};
:: Sprawdzenie czy podany numer MPD przejmującego jest zgodny z numerem na odbiorcy
   {? _wyn=''
   || {? KPO.KH_ODB_2<>null() & KPO.KH_ODB_2().NRMPDBDO<>KPO.KH_2_MPD
      || {? VAR.GRUPA='T'
         || _msg:='Numer miejsca prowadzenia działaności przejmującego karty %1 jest niezgodny z numerem przypisanym do odbiorcy.'@[KPO.SYM];
            _czy_komm:=0;
            KOMM.add(_msg)
         || _czy_komm:=0;
            FUN.info('Numer miejsca prowadzenia działaności przejmującego jest niezgodny z numerem przypisanym do odbiorcy.'@)
         ?};
::         KPO.KH_2_MPD:= KPO.KH_ODB_2().NRMPDBDO;
         _wyn:='KH_2_MPD'
      ?}
   ?};
   {? _wyn='' &  KPO.TYP=exec('typ_kpok_rec','odpady')
   || _wyn:=__CHK.record(KPO,_message,'KOD_G')
   ?};
   {? _wyn=''
   || _wyn:=__CHK.record(KPO,_message,'ODP')
   ?};
   {? _wyn='' & KPO.EX
   || _wyn:=__CHK.record(KPO,_message,'EX_DESC')
   ?};
   {? _wyn=''
   || _wyn:=__CHK.record(KPO,_message,'NRREJ')
   ?};
   {? _wyn=''
   || {? KPO.TYP=exec('typ_kpo','odpady')
      || _wyn:=__CHK.record(KPO,_message,'IL')
      |? KPO.TYP=exec('typ_kpok_tra','odpady')
      || _wyn:=__CHK.record(KPO,_message,'IL')
      ?}
   ?};
   {? _wyn=''
   || _wyn:=__CHK.record(KPO,_message,'DTR');
      {? _wyn=''
      || {? KPO.DTR<date()
         || {? VAR.GRUPA='T'
            || _msg:='Data transportu karty %1 nie może być wcześniejsza od daty dzisiejszej.'@[KPO.SYM];
               _czy_komm:=0;
               KOMM.add(_msg)
            || _czy_komm:=0;
               FUN.info('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
            ?};
            _wyn:='DTR'
         ?}
      ?};
:: Sprawdzenie okresu - dotyczy tylko roku
      {? _wyn=''
      || {? KPO.DTR~1<>KPO.AR
         || {? VAR.GRUPA='T'
            || _msg:='Data transportu karty %1 nie zgadza się z aktywnym okresem karty (%2).'@[KPO.SYM,$KPO.AR];
               _czy_komm:=0;
               KOMM.add(_msg)
            || _czy_komm:=0;
               FUN.info('Data transportu nie zgadza się z aktywnym okresem karty (%1).'@[$KPO.AR])
            ?};
            _wyn:='DTR'
         ?}
      ?};
      ~~
   ?}
?};
{? _wyn='' & ~exec('valid_time','#field',KPO.GTR,0)
|| _wyn:='GTR'
?};
{? _wyn='' & exec('be_kpo_r','odpady') & KPO.R='G'
|| {? VAR.GRUPA='T'
   || _msg:='Do karty %1 przypisano niewłaściwy rodzaj - "Wydanie z Gminnego Punktu Odbioru".'@[KPO.SYM];
      _czy_komm:=0;
      KOMM.add(_msg)
   || FUN.info('Nie można wybrać rodzaju "Wydanie z Gminnego Punktu Odbioru".'@)
   ?};
   _wyn:='R'
?};
{? ~_korw & _wyn='' & _a
|| KPOZ.cntx_psh();
   KPOZ.index('KPO');
   KPOZ.prefix(KPO.ref());
   {? KPOZ.size()=0
   || {? VAR.GRUPA='T'
      || _msg:='Należy uzupełnić pozycje karty przekazania odpadów o symbolu: %1.'@[KPO.SYM];
         _czy_komm:=0;
         KOMM.add(_msg)
      || FUN.info('Należy uzupełnić pozycje karty przekazania odpadów.'@)
      ?};
      _wyn:='WYS'
   ?};
   KPOZ.cntx_pop()
?};
{? _wyn<>'' & _czy_komm
|| KOMM.add(
      'Karta %1 nie ma wypełnionego pola: "%2". Należy uzupełnić brakujące informacje.'@
      [KPO.SYM,exec('fldLabel','#field',KPO,_wyn)]
   )
?};
_wyn


\chk_kpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: po redakcji KPOZ
::  OLD: \chk_kpoz/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(KPOZ,,'IL');
{? _wyn='' & KPOZ.KPO().ODP().NB='T' & KPOZ.D=date(0,0,0)
||
   FUN.info('Dla odpadów niebezpiecznych należy podać datę przekazania.'@);
   _wyn:='D'
?};
{? _wyn='' & KPOZ.KPO().ODP().NB='T' & KPOZ.NRREJ=''
||
   FUN.info('Dla odpadów niebezpiecznych należy podać numer rejestracyjny.'@);
   _wyn:='NRREJ'
?};
{? _wyn='' & KPOZ.IL<=0
||
   FUN.info('Podano nieprawidłową ilość odpadów.'@);
   _wyn:='IL'
?};
_wyn


\chk_kpot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: po redakcji KPOT
::  OLD: \chk_kpot/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(KPOT,,'KH');
_wyn


\gpod_chk_rec_1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Sprawdza podprawnosc wypelnienia tabeli GPOD
::  OLD: \gpod_chk_rec_1/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(GPOD,,'KOD','MIA','KODP','UL');
_wyn


\chk_gpodkat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: po redakcji GPODKATO
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(GPODKAT,,'KAT');
_wyn


\chk_gpodkato
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: po redakcji GPODKATO
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(GPODKATO,,'GPODKAT');
{? _wyn=''
|| _wyn:=__CHK.record2(GPODKATO,'ODP','Kod odpadu'@)
?};
_wyn


\chk_gpodgios
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: po redakcji GPODGIOS
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(GPODGIOS,,'OP');
_wyn


\spr_count_umm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS: Sprawdza czy rekrod powiazany czy mozna usunac ?
::   WY:  1 - Nie powiazany mozna usunac / 0 - nie mozna
::  OLD: \spr_count_umm/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1).count()=0
|| 1
|| FUN.info('Nie można usunąć tych danych. Istnieją powiązane struktury.'@);
   0
?}


\spr_czy_kategro
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS: Sprawdza czy jest kategoria i pozwala dodac kod odpadu
::  OLD: \spr_czy_kategro/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? GPODKAT.get()
||
    1
||
   FUN.info('Brak kategorii. Wprowadzanie kodu odpadu niemożliwe.'@);
   0
?}


\kpo_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: dodawanie karty przekazania odpadu
::       dla miesiecznego, kwartalnego i polrocznego naliczania ksiazeczek
::   WE: [_a] - ref kontrahenta (jezeli nie podany to edit)
::        _b  - ref odpadu
::        _c  - rodzaj
::        _d  - data
::        [_e] - Karta/Wzorzec, [0] - Karta, 1 - Wzorzec
::        [_f] - Dołącz/Kopiuj, [0] - Dołącz, 1 - Kopiuj.
::   WY: ref dodanego rekordu
::  OLD: \kpo_add/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>7 || _a:=null() ?} || _a:=null() ?};
_korw:={? var_pres('_e')=type_of(0) || _e || 0 ?};
_dork:={? var_pres('_f')=type_of(0) || _f || 0 ?};
_wyn:=null();
{? type_of(params_get())>100 & var_pres('mp',params_get())>100 || params_set('mp',params_get().mp) ?};

:: jeżeli słownik statusów BDO nie jest wypełniony dalsza praca nie jest możliwa
_kpo_stat:=exec('kpo_stat_planned','odpady');
{? _kpo_stat=null() || return(_wyn) ?};

KPO.cntx_psh();
{? _korw
|| exec('kpo_open','open_tab','_','__')
|| exec('kpo_open','open_tab',ST.ODDZ,$(ST.AR)+2)
?};
KPO.prefix();
{? ~(_korw & _dork)
|| KPO.blank();
   KPO.memo_set('','REMARKS');
   _typ:=exec('get','#params',100172,2);
   {? _typ<>'' || KPO.TYP:=_typ ?};
   KPO.KPO_STAT:=_kpo_stat
||
:: Kopiowanie wzorca, czyszczenie wyłącznie pól z symbolem i nazwą
   KPO.SYM_W:='';
   KPO.OPIS_W:=''
?};

{? _a<>null()
|| KPO.KH:=_a;
   KPO.ODP:=_b;
   KPO.R:=_c;
   KPO.AR:=_d~1;
   KPO.AM:=_d~2
?};
KPO.KORW:={? _korw || 'W' || 'K' ?};
KPO.RUTW:='Ręcznie';

{? KPO.add()
|| _wyn:=KPO.ref();
   {? _a=null() & (_dork=0 | (_dork & _korw))
   || KPO.r_lock(1,1);
      __kpo_nowy:=1;
      __kpo_okno_edit:=1;
      {? _korw
      || KPO.win_edit('REDE_W');
         _jest:=KPO.edit("exec('chk_kpo','odpady',,1)")
      || KPO.win_edit('REDE');
         _jest:=KPO.edit("exec('chk_kpo','odpady')")
      ?};
      VAR_DEL.delete('__kpo_nowy');
      VAR_DEL.delete('__kpo_okno_edit');
      {? ~_jest
      || KPOZ.index('KPO');
         KPOZ.prefix(_wyn);
         {!
         |? KPOZ.first()
         |! KPOZ.del(1)
         !};
         KPOT.index('KPO');
         KPOT.prefix(_wyn);
         {!
         |? KPOT.first()
         |! KPOT.del(1)
         !};
         KPO.del(1);
         _wyn:=null()
      ?};
      KPO.r_unlock()
   || _jest:=1
   ?}
?};

{? _jest
|| KPO.NR:=0;
   {? KPO.put() & KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?};
   {? KPO.KORW='K'
   || exec('kpo_nr_nadaj','odpady');
      exec('kpo_obl','odpady')
   ?}
?};

KPO.cntx_pop();
{? _dork=0 & _wyn<>null || KPO.seek(_wyn) ?};
_wyn


\kpo_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: przed usun dla karty przekazania odpadow
::  OLD: \kpo_del/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? exec('kpo_mod','odpady',0)
|| {? KPO.r_lock(1,1,1)
   || {? VAR.GRUPA='T' |  FUN.ask('Usunąć kartę?'@)
      || _wyn:=KPO.del(1)
      ?};
      KPO.r_unlock()
   || KPO.r_unlock();
      {? VAR.GRUPA='T'
      || KOMM.add('Karta %1 jest modyfikowana przez innego użytkownika.'@[KPO.SYM])
      || FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
      ?}
   ?}
?};
_wyn


\kpo_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: edycja karty przekazania odpadu
::   WE: [_a] - Karta/Wzorzec, [0] - Karta, 1 - Wzorzec
::  OLD: \kpo_edit/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_korw:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_jest:=0;
{? exec('kpo_mod','odpady',1)
|| {? KPO.r_lock(1,1,1)
   ||
      {? VAR.GRUPA<>'T'
      ||
::       Edycja pojedynczego rekordu
         __kpo_okno_edit:=1;
         {? _korw
         || KPO.win_edit('REDE_W');
            _jest:=KPO.edit("exec('chk_kpo','odpady',,1)")
         || KPO.win_edit('REDE');
            _jest:=KPO.edit("exec('chk_kpo','odpady')")
         ?};
         VAR_DEL.delete('__kpo_okno_edit')
      ||
::       Edycja grupy rekordów
         {? VAR.KH_2<>null()
         || KPO.KH_2:=VAR.KH_2;
            KPO.KH_ODB_2:=VAR.KH_ODB_2;
            KPO.KH_2_MPD:=VAR.NR_MPD
         || {? VAR.NR_MPD<>'' || KPO.KH_2_MPD:=VAR.NR_MPD ?}
         ?};
         {? VAR.KH_3<>null() || KPO.KH_3:=VAR.KH_3 ?};
         {? VAR.DTR<>date(0,0,0)
         || {? VAR.DTR~1<>KPO.AR
            || KOMM.add('Data transportu karty %2 nie zgadza się z aktywnym okresem karty (%1).'@[$KPO.AR,KPO.SYM])
            || KPO.DTR:=VAR.DTR
            ?}
         ?};
         {? VAR.GTR<>time(0,0,0) || KPO.GTR:=VAR.GTR ?};
         {? VAR.NRREJ<>'' || KPO.NRREJ:=VAR.NRREJ ?};
         {? VAR.REAL<>0 || KPO.IL:=VAR.REAL ?};
         _jest:=1
      ?};
      {? _jest
      || {? KPO.put() & KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?};
         exec('kpo_obl','odpady')
      ?};
      KPO.r_unlock()
   || KPO.r_unlock();
      FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
   ?}
|| _jest:=1
?};
_jest


\kpo_nr_nadaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: nadanie numeru karty
::----------------------------------------------------------------------------------------------------------------------
{? KPO.NR=null() | KPO.NR=0
|| _nr:=0;
   _ro:=KPO.R;
   KPO.cntx_psh();
   {? _ro='G'
   || KH.cntx_psh();
      ODP.cntx_psh();
      _kh:=KPO.KH;
      _ro:=KPO.R;
      _odp:=KPO.ODP;
      _odpsym:=KPO.ODP().KOD;
      KH.cntx_pop();
      ODP.cntx_pop();
      KPO.index('KH');
      KPO.prefix(KPO.KORW,ST.ODDZ,_ro,_kh,_odp)
   || KPO.index('NR');
      KPO.prefix(KPO.KORW,ST.ODDZ,_ro)
   ?};
   {? KPO.last()
   || _nr:=KPO.NR
   ?};
   _nr+=1;
   KPO.cntx_pop();
   KPO.NR:=_nr;
   {? _ro='G'
   || KPO.SYM:=$_nr+'/'+_odpsym+'/'+$KPO.AR
   || KPO.SYM:=$_nr
   ?};
   KPO.put()
?};
~~


\kpo_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: pokazanie karty przekazania odpadu
::----------------------------------------------------------------------------------------------------------------------
KPO.win_edit('REDE');
KPO.display();
''


\kpo_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: czy mozliwa edycja karty
::   WE: _a - 0-usun 1-popraw
::  OLD: \kpo_mod/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_txt:='';
{? KPO.STATUS='T'
|| _txt+='Karta przekazania odpadów zaakceptowana.\nPoprawianie niemożliwe.'@;
   _wyn:=0
|? KPO.STATUS='Z'
|| _txt+='Karta przekazania odpadów zarejestrowana.\nPoprawianie niemożliwe.'@;
   _wyn:=0
|? _a=0
|| KPOZ.index('KPO');
   KPOZ.prefix(KPO.ref());
   {? KPOZ.first()
   || exec('kpo_obl','odpady',KPO.ref());
      _txt+='Karta przekazania odpadów posiada pozycje.'@+'\n';
      _wyn:=0
   ?};
   KPOT.index('KPO');
   KPOT.prefix(KPO.ref());
   {? KPOT.first()
   || _txt+='Karta przekazania odpadów jest związana z transportem.'@+'\n';
      _wyn:=0
   ?};
   ZLP.cntx_psh();
   _month:={? +$KPO.AM=1 || '0'+$KPO.AM || $KPO.AM ?};
   _msk:='zlp'+ST.ODDZ+(($KPO.AR)+2)+_month;
   ZLP.use(_msk);
   ZLP.index('KPO');
   ZLP.prefix(KPO.ref());
   {? ZLP.first()
   || _txt+='Karta przekazania odpadów jest związana ze zgłoszeniem jednorazowym o symbolu: %1. '@[ZLP.ZLE().SYM]+'\n';
      _wyn:=0
   ?};
   ZLP.cntx_pop();
   SAMBR.cntx_psh();
   SAMBR.index('KPO2');
::   SAMBR.prefix(KPO.ref());
   {? SAMBR.find_tab(,'KPO',,'=',KPO.ref())
   || _txt+='Karta przekazania odpadów jest związana z kartą drogową o numerze: %1 pojazdu: %2. '@[SAMBR.SAMK().SYM,SAMBR.SAMK().POJAZD().NAZ]+'\n';
      _wyn:=0
   ?};
   SAMBR.cntx_pop()
?};
{? _wyn=0 & _txt<>''
|| {? VAR.GRUPA='T'
   || KOMM.add(_txt+'\n'+'Operacja dla karty %1 niemożliwa.'@[KPO.SYM])
   || FUN.info(_txt+'\n'+'Operacja dla karty %1 niemożliwa.'@[KPO.SYM])
   ?}
?};
_wyn


\kpo_obl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: obliczanie ilosci dla podanej KPO
::   WE: _a - KPO.ref
::  OLD: \kpo_obl/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<1 | type_of(_a)<> 2
|| _ref:=KPO.ref()
|| _ref:=_a
?};

_kpo_okno_grupowe:=0;
{? var_pres('__kpo_okno_grupowe')=type_of(0)
|| _kpo_okno_grupowe:=__kpo_okno_grupowe
?};
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};

{? ~_kpo_okno_edit
|| KPO.cntx_psh();
   KPO.clear();
   {? _ref<>null() & KPO.seek(_ref) & KPO.r_lock(1,1)
   || KPOZ.cntx_psh();
      KPOZ.index('KPO');
      KPOZ.prefix(_ref);
      _il:=0;
      {? KPOZ.first()
      || {!
         |? _il+=KPOZ.IL;
            KPOZ.next()
         !}
      ?};
      {? _il>0 & KPO.IL<>_il
      || KPO.IL:=_il;
         KPO.put()
      ?};
      KPOZ.cntx_pop()
    ?};
    KPO.r_unlock();
    KPO.cntx_pop()
::    {? _kpo_okno_grupowe
::    || grp_disp(KPO, 'WER',,1)
::    ?}
?};
''


\kpo_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: pozycje karty przekazania odpadu
::  OLD: \kpo_poz/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_kpo_nowy:=0;
{? var_pres('__kpo_nowy')=type_of(0)
|| _kpo_nowy:=__kpo_nowy
?};
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
{? _kpo_okno_edit
|| _dob:=(exec('chk_kpo','odpady')='')
|| _dob:=1
?};
{? _dob
|| {? _kpo_okno_edit & _kpo_nowy
   || KPO.put();
      {? KPO.NR=null() | KPO.NR=0
      || exec('kpo_nr_nadaj','odpady')
      ?}
   ?};
   KPOZ.win_sel('WER');
   {? _kpo_okno_edit
   || KPOZ.actions('WER')
   || KPOZ.actions('WER','DPU:D',,1)
   ?};
   KPOZ.win_edit('');
   KPOZ.index('KPO');
   KPOZ.prefix(KPO.ref);
   KPOZ.select()
?};
''


\kpo_tran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: transporty do karty przekazania odpadu
::  OLD: \kpo_tran/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_kpo_nowy:=0;
{? var_pres('__kpo_nowy')=type_of(0)
|| _kpo_nowy:=__kpo_nowy
?};
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
{? _kpo_okno_edit
|| _dob:=(exec('chk_kpo','odpady')='')
|| _dob:=1
?};
{? _dob
|| {? _kpo_okno_edit & _kpo_nowy
   || KPO.put();
      {? KPO.NR=null() | KPO.NR=0
      || exec('kpo_nr_nadaj','odpady')
      ?}
   ?};
   KH.cntx_psh();
   KPOT.win_sel('WER');
   {? _kpo_okno_edit
   || KPOT.actions('WER')
   || KPOT.actions('WER','DPU:D',,1)
   ?};
   KPOT.win_edit('RED');
   KPOT.index('KPO');
   KPOT.prefix(KPO.ref);
:: drag&drop
   _dnd_fml:="exec('renumkpot','odpady')";
    KPOT.dnd_sel('WER',,'records.KPOT',_dnd_fml);
    KPOT.select();
    KH.cntx_pop()
?};
''


\beu_kpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: przed usun KPOZ
::  OLD: \beu_kpoz/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__kpoz_ref');
__kpoz_ref:=$KPOZ.ref();
1


\aeu_kpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: po usun KPOZ
::  OLD: \aeu_kpoz/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__kpoz_ref')>0 & __kpoz_ref<>''
||
   ZLP.cntx_psh();
   ZLP.index('KPOZ');
   ZLP.prefix(__kpoz_ref);
   {? ZLP.first()
   ||
      {!
      |?
         ZLP.cntx_psh();
         ZLP.prefix();
         ZLP.KPOZ:='';
         ZLP.put();
         ZLP.cntx_pop();
         ZLP.first()
      !}
   ?};
   ZLP.cntx_pop()
?};
VAR_DEL.delete('__kpoz_ref');
exec('kpo_obl','odpady');
1


\rek_kpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: Akcja rekord na KPOZ
::  OLD: \rek_kpoz/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
''


\odbior_zakres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Ustawia zakres danych do wyswietlenia
::  OLD: \odbior_zakresp/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMO.ZAKRES=0 || UMO.ZAKRES=2 ?};
UMO.win_edit('ZAKRES');
UMO.edit()


\odbior_odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS:  Rejestracja odpadow
::  OLD: \odbior_odp/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('odbior_zakres','odpady')
||
   ODP.win_dict('SLO');
   GPODKAT.win_sel('SLO');
   _ackt:=GPODKAT.actions('WER','DUP:DO',,1);
   GPODGIOS.win_sel('SLO');
   _acio:=GPODGIOS.actions('WER','dup:d',,1);
   GPODPOZ.win_sel('WER');
   GPODPOZ.win_edit('RED');
   GPODPOZ.index('ZAK');
   {? UMO.ZAKRES=1
   || GPODPOZ.prefix(GPOD.ref,ST.AR,ST.AM,date())
   |? UMO.ZAKRES=2
   || GPODPOZ.prefix(GPOD.ref,ST.AR,ST.AM)
   |? UMO.ZAKRES=3
   || GPODPOZ.prefix(GPOD.ref)
   ?};
   _wzorzec:=UMO.fld_fml('PESEL','PATTERN',"'99999999999#'");
   GPODPOZ.select();
   UMO.fld_fml('PESEL','PATTERN',_wzorzec);
   {? ODP.f_active() || ODP.f_clear() ?};
   GPODKAT.actions('WER','','d:d');
   GPODGIOS.actions('WER','','d:d')
?}


\gpod_lim_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Select na limity dla punktu odbioru odpadow
::  OLD: \gpod_lim_sel/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
TAZ.SD:='S';
BEER.TAB:='';
KALK.KH:=null;
KALK.GRKH:=null;
_rodz:=POMOC.RODZ;
POMOC.RODZ:='U';
ODP.f_clear();
ODP.win_dict('SLO');
M.win_dict('NL_WER');
_prev_def:=M.actions('NL_WER','W');
GPODLIM.win_sel('WER');
GPODLIM.hdr_sel();
GPODLIM.hdr_sel(', '+'Gminny punkt odbioru: %1'@[GPOD.KOD]);
GPODLIM.index('ODP');
GPODLIM.prefix(GPOD.ref);
GPODLIM.select();
GPODLIM.hdr_sel();
M.actions('NL_WER',,_prev_def);
POMOC.RODZ:=_rodz;
null


\gpod_kat_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Glowny select na kategorie gminnego punkt odbioru odpadaow
::  OLD: \gpod_kat_sel/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
ODP.f_clear();
ODP.win_dict('SLO');

GPODKAT.win_sel('WER');
GPODKAT.hdr_sel();
GPODKAT.hdr_sel(', '+'Gminny punkt odbioru: %1'@[GPOD.KOD]);

GPODKAT.win_sel('GR');
GPODKAT.index('KAT');
GPODKAT.prefix(ST.ODDZ,GPOD.ref);

GPODGIOS.index('GPOD');
GPODGIOS.prefix(GPOD.ref,);

GPODKAT.select();

GPODKAT.win_sel('WER');
GPODKAT.hdr_sel();
~~


\gpod_zestaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Zestawinia dla Punktu odbioru odpadow
::  OLD: \gpod_zestaw/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
popup
(
  1,'Zestawienie z bieżącego miesiąca'@,
  'Suma odpadów wg. kodów odpadu'@,, "exec('gpod_z1','odpady')",
  'Suma odpadów wg. GIOS'@,, "exec('gpod_z2','odpady')",
  'Suma odpadów wg. Kategorii'@,,"exec('gpod_z3','odpady')",
  'Suma odpadów dla osoby'@,,"exec('gpod_z4','odpady')",
  'Ilość osób w danym okresie'@,,"exec('gpod_z5','odpady')"
)


\gpod_z1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Suma odpadow wg. kodow odpadu
::  OLD: \gpod_z1/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_dell:="VAR_DEL.delete('__wyn','UNIMARIO')";
_dell();
UNIMARIO:=tab_tmp(2,
                   'ACR','STRING[8]','Akronim',
                   'NAZ','STRING[50]','Nazwa pola',
                   'DLO','INTEGER','Długość',
                   'NUM','INTEGER','Numer',
                   'DOKL','INTEGER','Dokładność');
undefine;
define('OD',date(ST.AR,ST.AM,1),'Od dnia'@,'Od dnia'@,12);
define('DO',date(ST.AR,ST.AM,0),'Do dnia'@,'Do dnia'@,12);
define('S','B','[B]-Bieżący punkt, [W]-Wszystkie punkty'@,'Do dnia'@,1);
{? def_edit("chk_rec()",'Parametry zestawienia'@)
||
   {? -DEFINE.S='b'
   || _skad:='GPODPOZ.GPOD=:_a and '
   || _skad:=''
   ?};
   __wyn:=psql('select
                       GPOD.KOD as PUNKT,
   CASE GPODPOZ.F   WHEN \'N\' THEN \'INDYWIDUALNY\'
                             ELSE \'FIRMA\'
                             END AS F,
                      ODP.KOD,
                      ODP.NAZ,
                      sum(WAGA) as WAGA
              from @GPODPOZ left join ODP join GPOD
              where '+_skad+' GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and WAGA>0
              group by ODP.KOD,ODP.NAZ,GPODPOZ.F,GPOD.KOD
              ',GPOD.ref(),DEFINE.OD,DEFINE.DO);
   _acr:=__wyn.mk_sel('Suma odpadów wg. kodów odpadu'@,,0,,1);
   __wyn.win_fld(_acr,,'PUNKT',,,5,,,'PUNKT'@);
   __wyn.win_fld(_acr,,'F',,,10,,,'Firma/Indywidualni'@);
   __wyn.win_fld(_acr,,'KOD',,,10,,,'Kod odpadu'@);
   __wyn.win_fld(_acr,,'NAZ',,,30,,,'Nazwa'@);
   __wyn.win_fld(_acr,,'WAGA',,,15,3,,'Waga [KG]'@);
   __wyn.win_sel(_acr);

   UNIMARIO.blank();
   UNIMARIO.ACR:='PUNKT';
   UNIMARIO.NAZ:='Punkt';
   UNIMARIO.NUM:=1;
   UNIMARIO.DLO:=5;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='F';
   UNIMARIO.NAZ:='Rodzaj';
   UNIMARIO.NUM:=2;
   UNIMARIO.DLO:=12;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='KOD';
   UNIMARIO.NAZ:='Kod odpadu.';
   UNIMARIO.NUM:=3;
   UNIMARIO.DLO:=10;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NAZ';
   UNIMARIO.NAZ:='Nazwa odpadu.';
   UNIMARIO.NUM:=4;
   UNIMARIO.DLO:=30;
   UNIMARIO.add();

   PARAM_W.TAB_TMP:='__wyn';
   PARAM_W.TAB_POL:=$__wyn.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   PARAM_W.TAB_TYT:='Suma odpadów wg. kodów odpadu od dnia %1 do %2'@[$DEFINE.OD,$DEFINE.DO];
   {? var_pres('UNI_M', @.CLASS)> 0 || obj_del(UNI_M) ?};
   exec('start','uniwers');
   UNI_M.n_init();
   UNI_M.DD_OGR.erase();
   exec('cr_tab','#sql');
   TAB_SQLR:=__wyn;
   __wyn.win_act(_acr,,'Formuła','Druku&j'@@,,'Wydruk zawartości okna'@,"rep_exec('wsp_uni')",,1);
   __wyn.select;
   _dell()
?};
1


\gpod_z2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Suma odpadów wg. GIOS
::  OLD: \gpod_z2/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_dell:="VAR_DEL.delete('__wyn','UNIMARIO')";
_dell();
UNIMARIO:=tab_tmp(2,
                   'ACR','STRING[8]','Akronim',
                   'NAZ','STRING[50]','Nazwa pola',
                   'DLO','INTEGER','Długość',
                   'NUM','INTEGER','Numer',
                   'DOKL','INTEGER','Dokładność');
undefine;
define('OD',date(ST.AR,ST.AM,1),'Od dnia'@,'Od dnia'@,12);
define('DO',date(ST.AR,ST.AM,0),'Do dnia'@,'Do dnia'@,12);
define('S','B','[B]-Bieżący punkt, [W]-Wszystkie punkty'@,,12);
{? def_edit("chk_rec()",'Parametry zestawienia'@)
||
   {? -DEFINE.S='b'
   || _skad:='GPODPOZ.GPOD=:_a and '
   || _skad:=''
   ?};
   __wyn:=psql('select
                      GPOD.KOD as PUNKT,
   CASE GPODPOZ.F   WHEN \'N\' THEN \'INDYWIDUALNY\'
                             ELSE \'FIRMA\'
                             END AS F,
                      GPODGIOS.OP as NAZ,
                      sum(WAGA) as WAGA
              from @GPODPOZ left join GPODGIOS using(GPODGIOS.reference,GPODPOZ.GPODGIOS) join GPOD
               using(GPODPOZ.GPOD,GPOD.reference)
              where '+_skad+' GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and WAGA>0
              group by GPODGIOS.OP,GPODPOZ.F,GPOD.KOD
              ',GPOD.ref(),DEFINE.OD,DEFINE.DO);
   _acr:=__wyn.mk_sel('Suma odpadów wg. GIOS'@,,0,,1);
   __wyn.win_fld(_acr,,'PUNKT',,,5,,,'PUNKT'@);
   __wyn.win_fld(_acr,,'F',,,10,,,'Firma/Indywidualni'@);
   __wyn.win_fld(_acr,,'NAZ',,,30,,,'Nazwa'@);
   __wyn.win_fld(_acr,,'WAGA',,,15,3,,'Waga [KG]'@);
   __wyn.win_sel(_acr);

   UNIMARIO.blank();
   UNIMARIO.ACR:='PUNKT';
   UNIMARIO.NAZ:='Punkt';
   UNIMARIO.NUM:=1;
   UNIMARIO.DLO:=5;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='F';
   UNIMARIO.NAZ:='Rodzaj ';
   UNIMARIO.NUM:=2;
   UNIMARIO.DLO:=15;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NAZ';
   UNIMARIO.NAZ:='Nazwa Kategorii';
   UNIMARIO.NUM:=3;
   UNIMARIO.DLO:=40;
   UNIMARIO.add();

   PARAM_W.TAB_TMP:='__wyn';
   PARAM_W.TAB_POL:=$__wyn.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   PARAM_W.TAB_TYT:='Suma odpadów wg. GIOŚ od dnia %1 do %2'@[$DEFINE.OD,$DEFINE.DO];
   {? var_pres('UNI_M', @.CLASS)> 0 || obj_del(UNI_M) ?};
   exec('start','uniwers');
   UNI_M.n_init();
   UNI_M.DD_OGR.erase();
   exec('cr_tab','#sql');
   TAB_SQLR:=__wyn;
   __wyn.win_act(_acr,,'Formuła','Druku&j'@@,,'Wydruk zawartości okna'@,"rep_exec('wso_uni')",,1);
   __wyn.select;
   _dell()
?};
1


\gpod_z3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Suma odpadów wg. Kategorii
::  OLD: \gpod_z3/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_dell:="VAR_DEL.delete('__wyn','UNIMARIO')";
_dell();
UNIMARIO:=tab_tmp(2,
                   'ACR','STRING[8]','Akronim',
                   'NAZ','STRING[50]','Nazwa pola',
                   'DLO','INTEGER','Długość',
                   'NUM','INTEGER','Numer',
                   'DOKL','INTEGER','Dokładność');
undefine;
define('OD',date(ST.AR,ST.AM,1),'Od dnia'@,'Od dnia'@,12);
define('DO',date(ST.AR,ST.AM,0),'Do dnia'@,'Do dnia'@,12);
define('S','B','[B]-Bieżący punkt, [W]-Wszystkie punkty'@,,12);
{? def_edit("chk_rec()",'Parametry zestawienia'@)
||
   {? -DEFINE.S='b'
   || _skad:='GPODPOZ.GPOD=:_a and '
   || _skad:=''
   ?};
   __wyn:=psql('select
                     GPOD.KOD as PUNKT,
   CASE GPODPOZ.F   WHEN \'N\' THEN \'INDYWIDUALNY\'
                             ELSE \'FIRMA\'
                             END AS F,
                      ODP.KOD,
                      ODP.NAZ,
                      GPODKAT.KAT,
                      sum(WAGA) as WAGA
              from @GPODPOZ left join ODP left join GPODKAT join GPOD using(GPODPOZ.GPOD,GPOD.reference)
              where '+_skad+' GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and WAGA>0
              group by ODP.KOD,ODP.NAZ,GPODPOZ.F,GPODKAT.KAT,GPOD.KOD
              ',GPOD.ref(),DEFINE.OD,DEFINE.DO);
   _acr:=__wyn.mk_sel('Suma odpadów wg. Kategorii'@,,0,,1);
   __wyn.win_fld(_acr,,'PUNKT',,,5,,,'PUNKT'@);
   __wyn.win_fld(_acr,,'F',,,10,,,'Firma/Indywidualni'@);
   __wyn.win_fld(_acr,,'KAT',,,10,,,'Kategoria'@);
   __wyn.win_fld(_acr,,'KOD',,,10,,,'Kod odpadu'@);
   __wyn.win_fld(_acr,,'NAZ',,,30,,,'Nazwa'@);
   __wyn.win_fld(_acr,,'WAGA',,,15,3,,'Waga [KG]'@);
   __wyn.win_sel(_acr);
   PARAM_W.TAB_TMP:='__wyn';
   PARAM_W.TAB_POL:=$__wyn.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   PARAM_W.TAB_TYT:='Suma odpadów wg. Kategorii od dnia %1 do %2'@[$DEFINE.OD,$DEFINE.DO];

   UNIMARIO.blank();
   UNIMARIO.ACR:='PUNKT';
   UNIMARIO.NAZ:='Punkt';
   UNIMARIO.NUM:=1;
   UNIMARIO.DLO:=5;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='F';
   UNIMARIO.NAZ:='Rodzaj ';
   UNIMARIO.NUM:=2;
   UNIMARIO.DLO:=15;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='KOD';
   UNIMARIO.NAZ:='Kod odpadu.';
   UNIMARIO.NUM:=3;
   UNIMARIO.DLO:=10;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NAZ';
   UNIMARIO.NAZ:='Nazwa odpadu.';
   UNIMARIO.NUM:=4;
   UNIMARIO.DLO:=30;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='KAT';
   UNIMARIO.NAZ:='Kategoria';
   UNIMARIO.NUM:=5;
   UNIMARIO.DLO:=50;
   UNIMARIO.add();

   {? var_pres('UNI_M', @.CLASS)> 0 || obj_del(UNI_M) ?};
   exec('start','uniwers');
   UNI_M.n_init();
   UNI_M.DD_OGR.erase();
   exec('cr_tab','#sql');
   TAB_SQLR:=__wyn;

   __wyn.win_act(_acr,,'Formuła','Druku&j'@@,,'Wydruk zawartości okna'@,"rep_exec('wsp_uni')",,1);
   __wyn.select;
   _dell()
?};
1


\gpod_z4
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Suma odpadów dla osoby
::  OLD: \gpod_z4/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_dell:="VAR_DEL.delete('__wyn','UNIMARIO')";
_dell();
UNIMARIO:=tab_tmp(2,
                   'ACR','STRING[8]','Akronim',
                   'NAZ','STRING[50]','Nazwa pola',
                   'DLO','INTEGER','Długość',
                   'NUM','INTEGER','Numer',
                   'DOKL','INTEGER','Dokładność');
undefine;
define('OD',date(ST.AR,ST.AM,1),'Od dnia'@,'Od dnia'@,12);
define('DO',date(ST.AR,ST.AM,0),'Do dnia'@,'Do dnia'@,12);
define('S','B','[B]-Bieżący punkt, [W]-Wszystkie punkty'@,'Do dnia'@,1);
define('PESEL','','Pesel'@,'Pesel'@,12);
define('header',~~,'lub pozostaw pusty dla wszystkich'@);
{? def_edit("chk_rec('OD','DO','B')",'Parametry zestawienia'@)
||
   {? -DEFINE.S='b'
   || _skad:='GPODPOZ.GPOD=:_a and '
   || _skad:=''
   ?};
   _tx:='select
             GPOD.KOD as PUNKT,
             GPODPOZ.IM,
              GPODPOZ.NAZ,
               MIA.NAZ as MIA,
               UL.UL || \' \'  ||  GPODPOZ.NRD as NR,
             ODP.KOD,
             ODP.NAZ as NAZO,
             sum(WAGA) as WAGA
              from @GPODPOZ left join ODP left join GPODKAT join GPOD using(GPODPOZ.GPOD,GPOD.reference)
                    left join UL using(GPODPOZ.UL,UL.reference)
                    left join MIA using(GPODPOZ.MIA,MIA.reference)
                    where '+_skad+' GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and  WAGA>0
               and  (\':_d\'=\'\' or GPODPOZ.PESEL=\':_d\')
              group by ODP.KOD,ODP.NAZ,GPODPOZ.F,GPODPOZ.IM,GPODPOZ.NAZ,GPOD.KOD,UL.UL,MIA.NAZ,GPODPOZ.NRD
              order by 1,4
              ';
   __wyn:=psql(_tx,GPOD.ref(),DEFINE.OD,DEFINE.DO,{? +DEFINE.PESEL || hash(DEFINE.PESEL) || '' ?});
   _acr:=__wyn.mk_sel('Suma odpadów dla osoby'@,,0,,1);
   __wyn.win_fld(_acr,,'PUNKT',,,5,,,'PUNKT'@);
   __wyn.win_fld(_acr,,'NAZ',,,20,,,'Nazwisko'@);
   __wyn.win_fld(_acr,,'IM',,,20,,,'Imię'@);
   __wyn.win_fld(_acr,,'MIA',,,20,,,'Miasto'@);
   __wyn.win_fld(_acr,,'NR',,,20,,,'Nr'@);
   __wyn.win_fld(_acr,,'KOD',,,10,,,'Kod odpadu'@);
   __wyn.win_fld(_acr,,'WAGA',,,15,3,,'Suma wagi [KG]'@);
   __wyn.win_sel(_acr);

   UNIMARIO.blank();
   UNIMARIO.ACR:='PUNKT';
   UNIMARIO.NAZ:='Punkt';
   UNIMARIO.NUM:=1;
   UNIMARIO.DLO:=5;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='IM';
   UNIMARIO.NAZ:='Imię';
   UNIMARIO.NUM:=2;
   UNIMARIO.DLO:=20;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NAZ';
   UNIMARIO.NAZ:='Nazwisko';
   UNIMARIO.NUM:=3;
   UNIMARIO.DLO:=20;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='MIA';
   UNIMARIO.NAZ:='Miasto';
   UNIMARIO.NUM:=4;
   UNIMARIO.DLO:=15;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NR';
   UNIMARIO.NAZ:='Ulica i Nr';
   UNIMARIO.NUM:=5;
   UNIMARIO.DLO:=40;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='KOD';
   UNIMARIO.NAZ:='Kod odpadu.';
   UNIMARIO.NUM:=6;
   UNIMARIO.DLO:=10;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='NAZO';
   UNIMARIO.NAZ:='Nazwa odpadu';
   UNIMARIO.NUM:=7;
   UNIMARIO.DLO:=45;
   UNIMARIO.add();

   PARAM_W.TAB_TMP:='__wyn';
   PARAM_W.TAB_POL:=$__wyn.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   PARAM_W.TAB_TYT:='Suma odpadów dla osoby od dnia %1 do %2'@[$DEFINE.OD,$DEFINE.DO];
   {? var_pres('UNI_M', @.CLASS)> 0 || obj_del(UNI_M) ?};
   exec('start','uniwers');
   UNI_M.n_init();
   UNI_M.DD_OGR.erase();
   exec('cr_tab','#sql');
   TAB_SQLR:=__wyn;
   __wyn.win_act(_acr,,'Formuła','Druku&j'@@,,'Wydruk zawartości okna'@,"rep_exec('wsp_uni')",,1);
   __wyn.select;
   _dell()
?};
1


\gpod_z5
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Ilosc osob w danym okresie
::  OLD: \gpod_z5/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_dell:="VAR_DEL.delete('__wyn','UNIMARIO')";
_dell();
UNIMARIO:=tab_tmp(2,
                   'ACR','STRING[8]','Akronim',
                   'NAZ','STRING[50]','Nazwa pola',
                   'DLO','INTEGER','Długość',
                   'NUM','INTEGER','Numer',
                   'DOKL','INTEGER','Dokładność');
undefine;
define('OD',date(ST.AR,ST.AM,1),'Od dnia'@,'Od dnia'@,12);
define('DO',date(ST.AR,ST.AM,0),'Do dnia'@,'Do dnia'@,12);
define('S','B','[B]-Bieżący punkt, [W]-Wszystkie punkty'@,'Do dnia'@,1);
{? def_edit("chk_rec('OD','DO','B')",'Parametry zestawienia'@)
||
   {? -DEFINE.S='b'
   || _skad:='GPODPOZ.GPOD=:_a and '
   || _skad:=''
   ?};

   _tmp:=psql('select distinct
             GPOD.KOD as PUNKT,
             GPODPOZ.PESEL
              from @GPODPOZ join GPOD using(GPODPOZ.GPOD,GPOD.reference)
              where '+_skad+' GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and  WAGA>0
              group by GPOD.KOD,GPODPOZ.PESEL
              order by 1,2
              ',GPOD.ref(),DEFINE.OD,DEFINE.DO);
   __wyn:=psql('select PUNKT,count(*) as ILOSC from :_a group by PUNKT',_tmp);
   VAR_DEL.delete('_tmp');
   _acr:=__wyn.mk_sel('Ilość osób w danym okresie'@,,0,,1);
   __wyn.win_fld(_acr,,'PUNKT',,,5,,,'PUNKT'@);
   __wyn.win_fld(_acr,,'ILOSC',,,10,,,'Ilość osób'@);
   __wyn.win_sel(_acr);

   UNIMARIO.blank();
   UNIMARIO.ACR:='PUNKT';
   UNIMARIO.NAZ:='PUNKT';
   UNIMARIO.NUM:=1;
   UNIMARIO.DLO:=10;
   UNIMARIO.add();

   UNIMARIO.blank();
   UNIMARIO.ACR:='ILOSC';
   UNIMARIO.NAZ:='Ilość osób';
   UNIMARIO.NUM:=2;
   UNIMARIO.DLO:=20;
   UNIMARIO.add();

   PARAM_W.TAB_TMP:='__wyn';
   PARAM_W.TAB_POL:=$__wyn.fld_num()+';';
   PARAM_W.TAB_SUM:='';
   PARAM_W.TAB_TYT:='Ilość osób odwiedzających od dnia %1 do %2'@[$DEFINE.OD,$DEFINE.DO];
   {? var_pres('UNI_M', @.CLASS)> 0 || obj_del(UNI_M) ?};
   exec('start','uniwers');
   UNI_M.n_init();
   UNI_M.DD_OGR.erase();
   exec('cr_tab','#sql');
   TAB_SQLR:=__wyn;
   __wyn.win_act(_acr,,'Formuła','Druku&j'@@,,'Wydruk zawartości okna'@,"rep_exec('wsp_uni')",,1);
   __wyn.select;
   _dell()
?};
1


\gpod_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Ref naglowka gminnego punktu odbioru odpadow
::  OLD: \gpod_ref/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
GPOD.ref


\gpodkat_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS:  Blank dla kategorii odobioru odpadow
::  OLD: \gpodkat_ref/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
GPODKAT.ref


\gpodkato_ref_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: blank na naglowek kategorii
::  OLD: \gpodkato_ref_n/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
null


\gpod_kat_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Kopiuje kategorie z innego punktu odbioru
::  OLD: \gpod_kat_copy/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_il:=0;
GPODKAT.cntx_psh();
GPOD.cntx_psh();
_acr:=GPOD.mk_sel('Gminne punkty odbioru'@,,1);
GPOD.win_sel(_acr);
GPOD.win_act(_acr,,'Formuła','&Wybierz'@,,,"sel_exit",,1);
{? FUN.ask('Pobrać dane z innego punktu?'@)
|| _ref:=GPOD.ref();
   GPOD.win_sel(_acr);
   GPOD.index('KOD');
   GPOD.prefix();
   {? GPOD.select() & (_ref<>GPOD.ref()) &  FUN.ask('Rozpocząć kopiowanie danych?'@)
   || GPODKAT.index('KAT');
      GPODKAT.prefix(ST.ODDZ,GPOD.ref);
      {? GPODKAT.first()
      || {!
         |? _il+=1;
            GPODKAT.cntx_psh();
            GPODKAT.prefix();
            GPODKAT.GPOD:=_ref;
            GPODKAT.add();
            _katref:=GPODKAT.ref();
            GPODKAT.cntx_pop();
            GPODKATO.index('KOD');
            GPODKATO.prefix(GPODKAT.ref);
            {? GPODKATO.first()
            || {!
               |? GPODKATO.cntx_psh();
                  GPODKATO.prefix();
                  GPODKATO.GPODKAT:=_katref;
                  GPODKATO.add();
                  GPODKATO.cntx_pop();
                  GPODKATO.next()
               !}
            ?};
            GPODKAT.next()
         !}
      ?};
      GPODGIOS.index('GPOD');
      GPODGIOS.prefix(GPOD.ref,);
      {? GPODGIOS.first()
      || {!
         |? _il+=1;
            GPODGIOS.cntx_psh();
            GPODGIOS.prefix();
            GPODGIOS.GPOD:=_ref;
            GPODGIOS.add(1);
            GPODGIOS.cntx_pop();
            GPODGIOS.next()
         !}
      ?};
      {? _il=0 || FUN.info('Wybrany punkt nie zawiera danych do skopiowania.'@) ?}
   |? (_ref=GPOD.ref())
   || FUN.info('Wybrałeś ten sam punkt. Wybierz inny.'@)
   ?}
?};
GPODKAT.cntx_pop();
GPOD.cntx_pop();
GPODKAT.first();
win_disp();
''


\czy_fak_gpod_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: uzywane przed redakcja np. Pesel
::  OLD: \czy_fak_gpod_po/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='PESEL' & GPODPOZ.F='N'
|| 1
|? cur_afld()='KH' & GPODPOZ.F='T'
|| 1
|| 0
?}


\szukpesel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS:  Po redakcji pola PESEL , szuka i podpowiada dane osoby przyworzacej
::  OLD: \szukpesel/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_info:=exec('pesel_ok','#id',UMO.PESEL);
{? +_info>2
|| FUN.info(_info);
   0
|? +UMO.PESEL
|| _jest:=1;
   _pesel:=hash(UMO.PESEL);
   GPODPOZ.PESEL:=_pesel;
   {? form(_pesel)='' || return(1) ?};
   GPODPOZ.cntx_psh();
   _name:=GPODPOZ.names;
   {? _name.first()
   || {!
      |? GPODPOZ.use(_name[1]);
         GPODPOZ.index('PESEL');
         GPODPOZ.prefix(_pesel);
         {? GPODPOZ.first() || _jest:=0 ?};
         _jest & _name.next()
      !};
      {? _jest=0
      || _im:=GPODPOZ.IM;
         _na:=GPODPOZ.NAZ;
         _mia:=GPODPOZ.MIA;
         _ul:=GPODPOZ.UL;
         _pos:=GPODPOZ.POS;
         _nrd:=GPODPOZ.NRD;
         _lok:=GPODPOZ.LOKAL
      ?}
   ?};
   GPODPOZ.cntx_pop();
   {? _jest=0
   || GPODPOZ.IM:=_im;
      GPODPOZ.NAZ:=_na;
      GPODPOZ.MIA:=_mia;
      GPODPOZ.UL:=_ul;
      GPODPOZ.POS:=_pos;
      GPODPOZ.NRD:=_nrd;
      GPODPOZ.LOKAL:=_lok;
      win_disp()
   ?};
1
|? UMO.PESEL=''
|| 1
?}


\gpod_poz_mia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Po redakcji po redakcji pola z miastem ustawia zmienna do dalszych prefiksow
::  OLD: \gpod_poz_mia/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.MIA:=fld


\gpod_poz_ul
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Po redakcji po redakcji polaz z ulica ustawia zmienna do dalszych prefiksow
::  OLD: \gpod_poz_ul/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld<>null()
|| UMO.UL:=fld;
   GPODPOZ.MIA:=UMO.UL().MIA
?};
1


\pos_cur_umo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Przed redakcja pola z posesja
::  OLD: \pos_cur_umo/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.MIA:=GPODPOZ.MIA;
UMO.UL:=GPODPOZ.UL;
{? UMO.MIA<>null & UMO.UL<>null
|| 1
|| FUN.info('Podaj miasto i ulicę'@);0
?}


\odp_f_set_kato
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS:  Ustawia filtr programowy na kategorie odpadow
::  OLD: \odp_f_set_kato/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? GPODPOZ.KAT<>null()
|| ODP.f_clear();
   ODP.prefix();
   ODP.f_set('KOD',,'0=1');
   GPODKATO.index('KOD');
   GPODKATO.prefix(GPODKAT.ref);
   {? GPODKATO.first()
   || {!
      |? {? ODP.seek(GPODKATO.ODP)
         ||  ODP.f_add()
         ?};
         GPODKATO.next()
      !}
   ?};
   _wyn:=ODP.f_size();
   {? _wyn=1 & ODP.f_first()
   || GPODPOZ.ODP:=ODP.ref;
      _wyn:=0;
      win_disp()
   ?};
   {? ~_wyn
   || ODP.f_clear()
   ?}
|| _wyn:=0
?};
_wyn


\ae_gpodpoz_odp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Po edycji ODP w GPODPOZ - zdjęcie filtra z ODP i sprawdzenie limitów 'spr_lim_odpgpoz'
::----------------------------------------------------------------------------------------------------------------------
ODP.f_clear();
exec('spr_lim_odpgpoz','odpady')


\spr_lim_odpgpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS:  Sprawdzenie limitow dla danego KH lub PESEL czy nie nastapilo przekroczenie
::  OLD: \spr_lim_odpgpoz/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? GPODPOZ.WAGA & GPODPOZ.ODP<>null
|| _wyn:=1;
   _sumar:=0;
   _am:=GPODPOZ.D~2;
   _sumam:=obj_new(12);
   {! _i:=1..12
   |! _sumam[_i]:=0
   !};
   _pesel:=GPODPOZ.PESEL;
   _kh:=GPODPOZ.KH;
   _odp:=GPODPOZ.ODP;
   {? -menu_txt='dołącz'
   || _sumar+=GPODPOZ.WAGA;
      _sumam[_am]+=GPODPOZ.WAGA
   ?};
   GPODPOZ.cntx_psh();
   {? GPODPOZ.first()
   || {? GPODPOZ.F='N'
      || GPODPOZ.index('PESEL');
         GPODPOZ.prefix(_pesel,_odp)
      || GPODPOZ.index('KH');
         GPODPOZ.prefix(_kh,_odp)
      ?};
      {? GPODPOZ.first()
      || {!
         |? _sumar+=GPODPOZ.WAGA;
            _sumam[GPODPOZ.AM]+=GPODPOZ.WAGA;
            GPODPOZ.next()
         !}
      ?}
   ?};

   GPODLIM.index('ODP');
   GPODLIM.prefix(GPOD.ref,_odp);
   {? GPODLIM.last() & GPODLIM.KG>0
   || {? GPODLIM.RL='R' & _sumar>GPODLIM.KG
      || FUN.info('Przekroczono wartość limitu rocznego dla odpadów. \n'@+
          'Limit wynosi :'@+$GPODLIM.KG+' Kg.\n'+
          'Suma dostarczonych odpadów w roku :'@+$_sumar+'.')
      |? GPODLIM.RL='M' & _sumam[_am]>GPODLIM.KG
      || FUN.info('Przekroczono wartość limitu miesięcznego dla odpadów. \n'@+
          'Limit wynosi :'@+$GPODLIM.KG+' Kg.\n'+
          'Suma dostarczonych odpadów w miesiącu :'@+$_sumam[_am]+'.')
      ?}
   ?};
   GPODPOZ.cntx_pop()
?};
1


\licz_wag_gpod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Obliczanie wagi po podaniu brutto i netto
::  OLD: \licz_wag_gpod/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld<>0
|| GPODPOZ.WAGA:=GPODPOZ.WB-GPODPOZ.WT;
   exec('spr_lim_odpgpoz','odpady');
   win_disp()
?};
1


\spr_czy_pse_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS:  Sprawdza czy pole kh.kod czy pesel jest juz wypelnione  i pozwala zmienic przed redagowaniem pola
::  OLD: \spr_czy_pse_kh/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMO.PESEL<>'' | GPODPOZ.PESEL<>'' | GPODPOZ.KH<>null()
|| 0
|| 1
?}


\ae_gpod_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Po redakcji KH pytanie czy nadpisać dane
::  OLD: \ae_gpod_kh/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? GPODPOZ.KH<>null
|| GPODPOZ.PESEL:='KH='+GPODPOZ.KH().KOD
?};
{? GPODPOZ.KH<>null & GPODPOZ.IM='' & FUN.ask('Czy uzupełnić dane odbiorcy z kartoteki kontrahentów?'@)
|| GPODPOZ.IM:='Firma: '+GPODPOZ.KH().SKR;
   GPODPOZ.NAZ:=''
|? GPODPOZ.KH<>null & GPODPOZ.IM<>'Firma: '+GPODPOZ.KH().SKR & FUN.ask('Czy zmienić dane odbiorcy z kartoteki kontrahentów?'@)
|| GPODPOZ.IM:='Firma: '+GPODPOZ.KH().SKR;
   GPODPOZ.NAZ:=''
|| 1
?}


\gpod_poz_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Dodanie zapisu z odbiorem odpadu
::  OLD: \gpod_poz_add/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1
|| {? type_of(_a)<>1
   || _a:=0
   ?}
|| _a:=0
?};
{? date()~1<>ST.AR | date()~2<>ST.AM
|| FUN.info('Okres obrachunkowy różny od bieżącego.\n Zmień okres obrachunkowy na bieżący.'@)
|| _last:=null;
   UMO.MIA:=GPOD.DMIA;
   UMO.UL:=null;
   GPODPOZ.win_edit('RED');
   UMO.NEXT:='N';
   _next:=_a;
   GPODPOZ.cntx_psh();
   {!
   |? GPODPOZ.index('D');
      GPODPOZ.prefix(GPOD.ref);
      GPODKAT.win_dict('SLO_ADD');
      _ackt:=GPODKAT.actions('WER','','d:d',1);
      _acio:=GPODGIOS.actions('WER','','d:d');
      GPODKAT.win_sel('WER');
      GPODPOZ.lock(1,);
      _wyn:=
      {? GPODPOZ.last()
      || GPODPOZ.NR
      || 0
      ?};
      {? _next=0
      || GPODPOZ.blank();
         UMO.PESEL:=''
      || {? UMO.PESEL=''
         || UMO.PESEL:='kopia'
         ?};
         GPODPOZ.D:=date();
         GPODPOZ.AR:=date()~1;
         GPODPOZ.AM:=date()~2;
         GPODPOZ.USER:=username();
         GPODPOZ.WAGA:=GPODPOZ.WT:=GPODPOZ.WB:=0;
         GPODPOZ.ODP:=GPODPOZ.KAT:=GPODPOZ.GPODGIOS:=null
      ?};
      MIA.index('MIA');
      MIA.prefix();
      {? MIA.seek(GPOD.DMIA)
      || GPODPOZ.MIA:=MIA.ref()
      ?};
      GPODPOZ.GPOD:=GPOD.ref;
      GPODPOZ.NR:=_wyn+1;
      GPODPOZ.SYM:=form(GPODPOZ.NR,-5,,'99')+'/'+$GPODPOZ.AR;
      {? GPODPOZ.add()
      || _last:=GPODPOZ.ref();
         {? GPODPOZ.f_active() & GPODPOZ.f_test()=0
         || FUN.info('Jest aktywny filtr. W celu podglądu dodawanego odbioru odpadu należy usunąć filtr.'@)
         ?}
      ?};
      GPODPOZ.unlock();
      exec('gpodpoz_pesel_kh_enable','odpady');
      {? GPODPOZ.edit("exec('gpodpoz_rec_ae','odpady')",,{? _next || 'KAT' || '' ?})
      || {? GPODPOZ.put()
         || {? GPODPOZ.f_active() & GPODPOZ.f_test()=0
            || FUN.info('Jest aktywny filtr. W celu podglądu dodawanego odbioru odpadu należy usunąć filtr.'@)
            ?}
         ?};
         _next:=UMO.NEXT='T';
         UMO.NEXT:='N'
      || _last:=null;
         GPODPOZ.del;
         UMO.NEXT:='N';
         _next:=0
      ?};
      GPODKAT.actions('WER',_ackt);
      GPODGIOS.actions('WER',_acio);
      _next
   !};
   GPODPOZ.cntx_pop();
   {? _last<>null
   || GPODPOZ.seek(_last)
   ?}
?};
UMO.PESEL:='';
1


\gpodpoz_rec_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Sprawdzenie poprawnosci wypelnienia danych
::   WY: Nie uzupelnione pole
::  OLD: \gpodpoz_rec_ae/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? GPODPOZ.F='N'
|| _wyn:=__CHK.record(GPODPOZ,,'PESEL','MIA','UL','NRD','KAT','ODP','WB')
|| _wyn:=__CHK.record(GPODPOZ,,'KH','MIA','UL','NRD','KAT','ODP','WB')
?};
_wyn


\be_gpozy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Uzupelnia pole Pesel dla zmiennej
::  OLD: \be_gpozy/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
GPODPOZ.win_edit('RED_P');
UMO.PESEL:=GPODPOZ.PESEL;
exec('gpodpoz_pesel_kh_enable','odpady','RED_P');
1


\gpodpoz_druk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [wrt_1120]
:: OPIS: Wydruk pokwitowania odbioru odpadow
::  OLD: \gpodpoz_druk/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__xdr');
__xdr:=tab_tmp(1,'REF','INTEGER','REF');
_fch:=FUN.choice('Chcesz wydrukować?'@,1,'Bieżącą pozycje'@,'Wszystkie z bieżącego dnia'@);
{? _fch=1
|| __xdr.REF:=#GPODPOZ.ref;
   __xdr.add();
   exec('rep_exec','#b_report','LUO_KPO_XXXX','luo_gpod*','Wydruki pokwitowania odbioru odpadów',1)
|? _fch=2
|| _date:=GPODPOZ.D;
   _pesel:=GPODPOZ.PESEL;
   _kh:=GPODPOZ.KH;
   GPODPOZ.cntx_psh();
   GPODPOZ.index('D');
   GPODPOZ.prefix(GPOD.ref,_date,);
   {? GPODPOZ.first()
   || {!
      |? {? _pesel=GPODPOZ.PESEL & _kh=GPODPOZ.KH
         || __xdr.REF:=#GPODPOZ.ref;
            __xdr.add()
         ?};
         GPODPOZ.next()
      !}
   ?};
   GPODPOZ.cntx_pop();
   exec('rep_exec','#b_report','LUO_KPO_XXXX','luo_gpod*','Wydruki pokwitowania odbioru odpadów',1)
?};
VAR_DEL.delete('__xdr');
1


\gen_fak_gpod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Generacja Faktury za odpady
::  OLD: \gen_fak_gpod/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? +GPODPOZ.ZLP=16
|| {? FUN.ask('Do pozycji wygenerowano już zgłoszenie.\n Czy chcesz je wyświetlić?'@)
   || ZLP.cntx_psh();
      ZLE.cntx_psh();
      ZLP.use(8+GPODPOZ.ZLP);
      ZLP.prefix();
      ZLE.prefix();
      {? ZLP.seek(GPODPOZ.ZLP) & ZLE.seek(ZLP.ZLE)
      || exec('zlp_aktu','umowy_zlecenia');
         exec('zle_win_edit_set','!lum_zgl_dzgl');
         ZLP.get();
         ZLE.get();
         ZLEC.MIA:=ZLE.POS().UL().MIA;
         ZLEC.UL:=ZLE.POS().UL;
         ZLE.display()
      ?};
      ZLP.cntx_pop();
      ZLE.cntx_pop()
   ?}
|| exec('zlp_gen_dla_gpodpoz','odpady',GPODPOZ.ref())
?};
''


\zlp_gen_dla_gpodpoz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie zgłoszenia jednorazowego (ZLE i ZLP) dla odbioru z Gminnego Punktu Odbioru (GPODPOZ)
::   WE : [_a]-_GPODPOZ
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_ZGL_DZGL';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'GPODPOZ',_a);

exec('mp_run','#b__box',_params)


\waga_tara_new_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Uzgodnienie wagi netto do obliczenia wagi tary
::  OLD: \waga_tara_new_u/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:="{? GPODPOZ.WB<=0 & GPODPOZ.WT<=0
       || FUN.info('Proszę uzupełnić wagę BRUTTO lub NETTO'@);
          0
       |? GPODPOZ.ODP=null
       || FUN.info('Proszę uzupełnić kod odpadu'@);
          0
       || 1
       ?}";
_red:=GPODPOZ.win_edit('?');
GPODPOZ.win_edit('RED_W');
{? GPODPOZ.edit(_chk,,'WT')
|| GPODPOZ.put()
?};
GPODPOZ.win_edit(_red);
1


\gpodpoz_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS: Wyswietla dla pozycji gminnego punktu
::  OLD: \gpodpoz_display/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
GPODPOZ.win_edit('RED_P');
GPODPOZ.display()


\fld_mr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Po redakcji pola z rodzajem limitu sprawdza czy są wpisane tylko dozwolone
::            wartosci
::  OLD: \fld_mr/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? 'MR'*fld()
|| 1
|| FUN.info('Dozwolone wartości to M,R'@);
  0
?}


\ae_gpodlim_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Po redakcji pola M
::  OLD: \ae_gpodlim_m/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
1


\gpodlim_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Kopia limitów  odpadow z innego punktu
::  OLD: \gpodlim_copy/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_old:=GPOD.ref;
GPOD.cntx_psh();
GPODLIM.cntx_psh();
_acr:=GPOD.mk_sel('Gminne punkty odbioru'@,,1);
GPOD.win_sel(_acr);
GPOD.win_act(_acr,,'Formuła','&Wybierz'@@,,,"sel_exit",,1);
{? FUN.ask('Pobrać dane z innego punktu?'@)
|| _ref:=GPOD.ref();
   GPOD.win_sel(_acr);
   GPOD.index('KOD');
   GPOD.prefix();
   {? GPOD.select() & (_old<>GPOD.ref())
   || GPODLIM.index('ODP');
      GPODLIM.prefix(GPOD.ref);
      {? GPODLIM.first()
      || {? FUN.ask('Rozpocząć kopiowanie danych?'@)
         || {!
            |? GPODLIM.cntx_psh();
               GPODLIM.prefix();
               GPODLIM.GPOD:=_ref;
               GPODLIM.add(1);
               GPODLIM.cntx_pop();
               GPODLIM.next()
            !}
         ?}
      || FUN.info('Brak limitów w wybranym punkcie.'@)
      ?}
   |? _old=GPOD.ref()
   || FUN.info('Wybrałeś ten sam punkt. Wybierz inny.'@)
   ?}
?};
GPODLIM.cntx_pop();
GPOD.cntx_pop();
''


\rec_afetr_gpodl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Sprawdzenie wypełnienia limitów, rekord PO
::  OLD: \rec_afetr_gpodl/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(GPODLIM,,'ODP','D','RL','KG')


\wyp_kategro_gpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS: Na wypelnienie okna grupowego
::  OLD: \wyp_kategro_gpo/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
GPODKAT.index('KAT');
GPODKAT.prefix(ST.ODDZ,GPOD.ref,);
{? GPODKAT.first()
|| _ref:=GPODKAT.ref()
|| _ref:=null
?};

GPODKATO.index('KOD');
GPODKATO.prefix(_ref,);
GPODKATO.first();

GPODGIOS.index('GPOD');
GPODGIOS.prefix(GPOD.ref,);
GPODGIOS.first();
1


\spr_pop_kategor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon [w_1230]
:: OPIS: Po wyjsciu z onka sprawdzam czy mam wypelnione wszystkie tabele
::   WY: 1 - mozna wyjsc / 0 - nie mozna
::  OLD: \spr_pop_kategor/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1; _txt:='';
GPODKAT.cntx_psh();
GPODKATO.cntx_psh();
GPODKAT.index('KAT');
GPODKAT.prefix(ST.ODDZ,GPOD.ref);
{? GPODKAT.first()
|| {!
   |? GPODKATO.index('KOD');
      GPODKATO.prefix(GPODKAT.ref);
      {? ~GPODKATO.first()
      || _txt+=GPODKAT.KAT+', ';
         _wyn:=0
      ?};
      GPODKAT.next
   !}
?};
{? +_txt || _txt:=_txt-2 ?};
{? _wyn=0
|| FUN.info('Każda kategoria musi posiadać jeden lub więcej odpadów. \n Uzupełnij Kategorię: '@+_txt+'.')
?};
GPODKAT.cntx_pop();
GPODKATO.cntx_pop();
_wyn


\gpodkat_po_odsw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Odswiezenie Okna grupowego z kategoriami i Limitami
::  OLD: \gpodkat_po_odsw/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
{? GPODKAT.get()
|| GPODKATO.index('KOD');
   GPODKATO.prefix(GPODKAT.ref);
   GPODKATO.first()
?};
grp_disp(GPODKATO,'WER');

GPODGIOS.index('GPOD');
GPODGIOS.prefix(GPOD.ref,);
GPODGIOS.first();
grp_disp(GPODGIOS,'WER');
1


\gpodz_next
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Czy nastepna pozycja
::  OLD: \gpodz_next/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
UMO.NEXT:='T';
'key:F2'


\kpo_disp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: display na grupowym okienku karty przekazania odpadow
::  OLD: \kpo_disp/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
KPOZ.index('KPO');
KPOZ.prefix(KPO.ref);
grp_disp(KPOZ,'SLO');

KPOT.index('KPO');
KPOT.prefix(KPO.ref);
grp_disp(KPOT,'SLO');
''


\kpo_disp_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: display na grupowym okienku karty przekazania odpadow
::----------------------------------------------------------------------------------------------------------------------
{? KPO.size() = 0 | KPO.STATUS = 'T' | KPO.STATUS = 'Z'
|| KPOZ.actions('WER','DPU:D',,1);
   KPOT.actions('WER','DPU:D',,1)
|| KPOZ.actions('WER',,,1);
   KPOT.actions('WER',,,1)
?};

KPOZ.index('KPO');
KPOZ.prefix(KPO.ref);
grp_disp(KPOZ,'WER');

KPOT.index('KPO');
KPOT.prefix(KPO.ref);
grp_disp(KPOT,'WER');
''


\kol_zolty_pola
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Marcin Makselon
:: OPIS: Dla akcji wyswietl, dawniej : Kolor zolty tła, teraz : Kolor niebieski czcionki
::  OLD: \kol_zolty_pola/um_mia.fml
::----------------------------------------------------------------------------------------------------------------------
'0:0:255'


\who_rlock_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Sprawdzenie kto blokuje rekord KPO
::   WE: _a - 0-sprawdzać kto blokuje, 1-nie sprawdzać i zapisać informację do __kom
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a
|| __kom.add('Kartę przekazania odpadów obsługuje inny użytkownik.'@,7)
|| {? FUN.ask('Kartę przekazania odpadów %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[KPO.SYM]) & KPO.r_lock(1,,1)
   || KPO.r_unlock()
   ?}
?}


\kpo_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: ustawienie kolorowania dla kart przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
{? KPO.STATUS='T'
|| _wyn:='KPO#01#01'
?};
_wyn


\kpo_sym_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MW] [19.22]
:: OPIS: Formuła ikony dla KPO.STATUS
::----------------------------------------------------------------------------------------------------------------------
"{? KPO.PDF_KPO<>null
 || 'xwin16.png:35'
 |? KPO.PDF_POTW<>null
 || 'xwin16.png:190'
 |? KPO.STATUS='T'
 || exec('zaakceptowany','icon')
 |? KPO.STATUS='Z'
 || exec('zarejestrowany','icon')
 || exec('pusta','#icon')
 ?}
"


\kpo_chk_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usunięcie karty przekazania odpadów - sprawdzenie, czy można
::----------------------------------------------------------------------------------------------------------------------
_moz:=1;
{? KPO.STATUS='T'
|| _moz:=0;
   {? VAR.GRUPA='T'
   || KOMM.add('Karta przekazania odpadów %1 zaakceptowana.\nUsunięcie niemożliwe.'@[KPO.SYM])
   || FUN.info('Karta przekazania odpadów %1 zaakceptowana.\nUsunięcie niemożliwe.'@[KPO.SYM])
   ?}
|? KPO.STATUS='Z'
|| _moz:=0;
   {? VAR.GRUPA='T'
   || KOMM.add('Karta przekazania odpadów %1 zarejestrowana.\nUsunięcie niemożliwe.'@[KPO.SYM])
   || FUN.info('Karta przekazania odpadów %1 zarejestrowana.\nUsunięcie niemożliwe.'@[KPO.SYM])
   ?}
?};
_moz


\kpo_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_DRKP';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';

exec('mp_run','#b__box',_params)


\kpo_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Modyfikacja karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
{? KPO.STATUS='T'
|| {? VAR.GRUPA='T'
   || KOMM.add('Karta przekazania odpadów %1 zaakceptowana.\nPoprawianie niemożliwe.'@[KPO.SYM])
   || FUN.info('Karta przekazania odpadów %1 zaakceptowana.\nPoprawianie niemożliwe.'@[KPO.SYM])
   ?}
|? KPO.STATUS='Z'
|| {? VAR.GRUPA='T'
   || KOMM.add('Karta przekazania odpadów %1 zarejestrowana.\nPoprawianie niemożliwe.'@[KPO.SYM])
   || FUN.info('Karta przekazania odpadów %1 zarejestrowana.\nPoprawianie niemożliwe.'@[KPO.SYM])
   ?}
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUO_KPO_DRKP';
   _params.UIDREF:=KPO.uidref();
   _params.AKCJA:='Popraw';
   exec('mp_run','#b__box',_params)
?}


\kpo_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usunięcie karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
{? exec('kpo_chk_usun','odpady')
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUO_KPO_DRKP';
   _params.UIDREF:=KPO.uidref();
   _params.AKCJA:='Usuń';
   _params.GRUPA:=VAR.GRUPA;
   exec('mp_run','#b__box',_params)
?}


\kpo_akcept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Formula akceptuje karte przekazania odpadów
::   WE: [_a] - 1-automatycznie 0-nie(domyślnie)
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & _a=1
|| _auto:=1
|| _auto:=0
?};

_wyn:=0;

{? KPO.r_lock(1,1)
|| {? KPO.STATUS='T'
   || KPO.r_unlock();
      {? VAR.GRUPA='T'
      || KOMM.add('Karta %1 jest już zaakceptowana.'@[KPO.SYM])
      || FUN.info('Wskazana karta jest już zaakceptowana.'@)
      ?}
   |? KPO.STATUS<>'Z'
   || KPO.r_unlock();
      {? VAR.GRUPA='T'
      || KOMM.add('Karta %1 nie jest zakończona.'@[KPO.SYM])
      || FUN.info('Wskazana karta nie jest zakończona.'@)
      ?}
   || {? VAR.GRUPA='T' | _auto | FUN.ask('Zaakceptować kartę przekazania odpadów?'@)
      || KPO.STATUS:='T';
         KPO.KTO_AKC:=OPERATOR.USER().KOD;
         KPO.DATA_AKC:=date();
         KPO.CZAS_AKC:=time();
         {? KPO.put()
         || _wyn:=1
         ?}
      ?};
      KPO.r_unlock()
   ?}
|| {? VAR.GRUPA='T'
   || KOMM.add('Karta %1 jest modyfikowana przez innego użytkownika.'@[KPO.SYM])
   || FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
   ?}
?};
_wyn


\kpo_akcept_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty przekazania odpadów z listy zadań (TODO)
::----------------------------------------------------------------------------------------------------------------------
KPO.win_edit('REDE_A');
KPO.edit();
KPO.win_edit('')


\kpo_akcept_f2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty przekazania odpadów z listy zadań (TODO) - formuła przycisku "Akceptuj" w oknie karty
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('kpo_akcept','odpady');
{? _wyn>0
|| 'key:F2'
|| ''
?}


\kpo_akceptuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Akceptacja karty przekazania odpadów
::   WE: [_a] - 0(domyślnie) 1-automatyczna akcja
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_EAKP';
_params.UIDREF:=KPO.uidref();
_params.AKCJA:={? var_pres('_a')=type_of(0) & _a || 'AkceptujAuto' || 'Akceptuj' ?};
_params.GRUPA:=VAR.GRUPA;
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);

exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KPO',KPO.ref());
exec('mp_run','#b__box',_params)


\kpo_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Formula wycofuje akceptację karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
{? KPO.r_lock(1,1)
|| _st:=KPO.STATUS;
   _st_nw:=_st;
   {? KPO.BDO_ID='' & KPO.TR_NAG=''
   ||
      {? _st='T'
      || _choice:=
             FUN.choice('Wybierz jedną z opcji wycofania zakończenia rejestracji, '
                        'akceptacji karty przekazania odpadów %1.'@[KPO.SYM],,
                        '&Akceptacja'@,'&Zakończenie i akceptacja'@);
         {? _choice=1
         || _st_nw:='Z'
         |? _choice=2
         || _st_nw:='N'
         ?}
      |? _st='Z'
      || _pytanie:='Wycofać zakończenie rejestracji karty przekazania odpadów?'@;
         {? FUN.ask(_pytanie)
         || _st_nw:='N'
         ?}
      || KPO.r_unlock();
         FUN.info('Wskazana karta nie jest zarejestrowana ani zaakceptowana.'@)
      ?};
      {? _st<>_st_nw
      || KPO.STATUS:=_st_nw;
         KPO.KTO_AKC:='';
         KPO.DATA_AKC:=date(0,0,0);
         KPO.CZAS_AKC:=time(0,0,0);
         KPO.put()
      ?}
   || {? KPO.BDO_ID<>''
      || FUN.info('Wskazana karta została wysłana do systemu BDO.'@)
      || FUN.info('Wskazana karta została powiązana z transportem.'@)
      ?}
   ?};
   KPO.r_unlock()
|| FUN.info('Wskazana karta jest modyfikowana przez innego użytkownika.'@)
?}


\ae_gpodpoz_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: gminny punkt - odbiór - po wybraniu firma/ indywidualny edycja odpowiednich danych
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='F'
|| _okn:=cur_win(1);
   exec('gpodpoz_pesel_kh_enable','odpady',_okn)
?};
1


\gpodpoz_pesel_kh_enable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: gminny punkt - odbiór - po wybraniu firma/ indywidualny edycja odpowiednich danych
::   WE: [_a] - akronim okna redagowania, domyslnie RED
::----------------------------------------------------------------------------------------------------------------------
{? _>0 & type_of(_a)=type_of('')
|| _okn:=_a
|| _okn:='RED'
?};
_f:=GPODPOZ.F;
{? _f= 'T'
|| GPODPOZ.efld_opt(_okn,'mark=0,enable=0',UMO,'PESEL');
   GPODPOZ.efld_opt(_okn,'mark=1,enable=1',,'KH')
|| GPODPOZ.efld_opt(_okn,'mark=1,enable=1',UMO,'PESEL');
   GPODPOZ.efld_opt(_okn,'mark=0,enable=0',,'KH')
?};
~~


\be_kpo_khodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - przed wypełnieniem pola KH_ODB
::----------------------------------------------------------------------------------------------------------------------
{? KPO.KH=null()
|| _wyn:=0
|| BEER.KH:=KPO.KH;
   _wyn:=1
?};
_wyn


\be_kpo_khodb2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - przed wypełnieniem pola KH_ODB_2
::----------------------------------------------------------------------------------------------------------------------
{? KPO.KH_2=null()
|| _wyn:=0
|| BEER.KH:=KPO.KH_2;
   _wyn:=1
?};
_wyn


\be_kpot_khodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - przed wypełnieniem pola KH_ODB
::----------------------------------------------------------------------------------------------------------------------
{? KPOT.KH=null()
|| _wyn:=0
|| BEER.KH:=KPOT.KH;
   _wyn:=1
?};
_wyn


\ae_kpot_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - przed wypełnieniem pola KH_ODB
::----------------------------------------------------------------------------------------------------------------------
{? KPOT.KH_ODB<>null()
|| {? KPOT.KH=null() | KPOT.KH<>KPOT.KH_ODB().KH
   || KPOT.KH_ODB:=null()
   ?}
?};
1


\pesel_hash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dla podanego pesel zwraca jego hash
::   WE: [_a] - pesel
::----------------------------------------------------------------------------------------------------------------------
_ph:='';
{? _>0 & type_of(_a)=type_of('') & _a<>'' & _a<>'%'
|| _ph:=hash(_a)
?};
_ph


\wys_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: dodawanie skladowiska
::  OLD: \wys_add/um.fml
::----------------------------------------------------------------------------------------------------------------------
WYS.win_edit('RED');
WYS.blank();
UMO.MIA:=null;
{? WYS.edit("exec('chk_wys','odpady')")
|| WYS.add()
?};
''


\chk_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: po rekord tab. WYS - składowiska
::  OLD: \chk_wys/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(WYS,,'KOD','NAZ');
{? _wyn='' & +WYS.KOD<>3
||
   FUN.info('Należy podać 3 znaki dla pola kod składowiska.'@);
   _wyn:='KOD'
?};
_wyn


\rek_wys
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: rekord przed dla WYS
::  OLD: \rek_wys/um.fml
::----------------------------------------------------------------------------------------------------------------------
::WYS.MIA:=WYS.UL().MIA;
''


\kpo_pdf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Odpady - Utwórz PDF
::   WE: [_a] - akcja
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='Area Utwórz PDF' ?};

_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_WWKP';
_params.UIDREF:=KPO.uidref();
_params.AKCJA:=_a;
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KPO',KPO.ref());

exec('mp_run','#b__box',_params)


\kpo_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: wyswietlanie zalacznikow do Odpadów
::----------------------------------------------------------------------------------------------------------------------
exec('sel_dok','dokum','KPO',,,,1)


\kpoz_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dopisywanie KPOZ (Pozycja karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
_win_red:=KPOZ.win_edit('RED');
KPO.cntx_psh();
{? KPO.r_lock(1,1)
|| KPOZ.index('KPO');
   KPOZ.prefix(KPO.ref());
   KPOZ.blank();
   _mark:={? KPOZ.KPO().ODP().NB='T' || 'mark=1' || 'mark=0' ?};
   KPOZ.efld_opt(_win_red,_mark,,'NRREJ');
   KPOZ.efld_opt(_win_red,_mark,,'D');
   {? KPOZ.edit("exec('chk_kpoz','odpady')")
   || KPOZ.add()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\kpoz_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Poprawianie KPOZ (Pozycja karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
_win_red:=KPOZ.win_edit('RED');
_mark:={? KPOZ.KPO().ODP().NB='T' || 'mark=1' || 'mark=0' ?};
KPOZ.efld_opt(_win_red,_mark,,'NRREJ');
KPOZ.efld_opt(_win_red,_mark,,'D');
KPO.cntx_psh();
{? KPOZ.KPO().r_lock(1,1) & KPOZ.r_lock(1,1)
|| {? KPOZ.edit("exec('chk_kpoz','odpady')")
   || KPOZ.put()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
KPOZ.r_unlock();
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\kpoz_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usuwanie KPOZ (Pozycja karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
KPO.cntx_psh();
{? KPOZ.KPO().r_lock(1,1) & KPOZ.r_lock(1,1,1)
|| {? FUN.ask('Czy usunąć pozycję?'@)
   || exec('beu_kpoz','odpady');
      KPOZ.del()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
KPOZ.r_unlock();
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\kpoz_il_format
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usuwanie KPOZ (Pozycja karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
exec('in_prec','#field',3)


\kpot_dodaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dopisywanie KPOT (Transport do karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
KPO.cntx_psh();
{? KPO.r_lock(1,1)
|| KPOT.index('KPO');
   KPOT.prefix(KPO.ref());
   KPOT.blank();
   {? KPOT.edit("exec('chk_kpot','odpady')")
   || KPOT.add()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\kpot_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Poprawianie KPOT (Transport do karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
KPO.cntx_psh();
{? KPOT.KPO().r_lock(1,1) & KPOT.r_lock(1,1)
|| {? KPOT.edit("exec('chk_kpot','odpady')")
   || KPOT.put()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
KPOT.r_unlock();
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\kpot_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Usuwanie KPOT (Transport do karty przekazania odpadów)
::----------------------------------------------------------------------------------------------------------------------
_kpo_okno_edit:=0;
{? var_pres('__kpo_okno_edit')=type_of(0)
|| _kpo_okno_edit:=__kpo_okno_edit
?};
KPO.cntx_psh();
{? KPOT.KPO().r_lock(1,1) & KPOT.r_lock(1,1,1)
|| {? FUN.ask('Czy usunąć transport?'@)
   || KPOT.del()
   ?}
|| FUN.info('Karta jest modyfikowana przez innego użytkownika.'@)
?};
KPOT.r_unlock();
{? ~_kpo_okno_edit
|| KPO.r_unlock()
?};
KPO.cntx_pop();
~~


\zlp_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: utworzenie kart przekazania odpadow na podstawie zgloszen
::  OLD: \zlp_kpo/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_env:=exec('env_create','odpady');
params_set('env',_env);
{? (4+ZLP.TKPO)='OSWK'
|| FUN.info('Dla oświadczenia klienta wystawienie karty przekazania odpadów niedostępne.'@)
|? ZLP.KPOZ='' & ZLP.KPO=null()
||
   _choice:=FUN.choice('Utworzyć nową kartę przekazania odpadów komunalnych czy powiązać zgłoszenie z istniejącą kartą?'@,,'Utwórz kartę'@,'Powiąż z istniejącą kartą'@);
   {? _choice=3
   ||
::    Generowanie karty
      {? exec('kpo_kh2_domyslny','odpady')=null()
      || FUN.info(
            'Wymagane ustawienie parametru aplikacyjnego 100193 - Domyślny kontrahent przejmujący odpad.\n'
            'Utworzenie karty przekazania odpadu jest niemożliwe.'@
         )
      |? ZLP.r_lock(1,1,1)
      ||
         {? var_pres('__kpo_tab')>100 || obj_del(__kpo_tab) ?};
         __kpo_tab:=tab_tmp(3
            ,'KH_REF','STRING[16]','KH_ref'
            ,'POS','STRING[100]','Posesja'
            ,'DW','DATE','Data wyk.'
            ,'FAS','STRING[1]','SP'
            ,'ODP_KOD','STRING[6]','Rodzaj odpadów'
            ,'MP','STRING[100]','Miejsce przeznaczenia'
            ,'D','DATE','Data karty'
            ,'G','TIME','Godzina karty'
            ,'IL','REAL','Masa'
            ,'ZLP_REF','STRING[16]','ZLP_ref'
            ,'ODP_REF','STRING[16]','ODP_ref'
            ,'WYS_REF','STRING[16]','WYS_ref'
            ,'NRREJ','STRING[100]','Numer pojazdu'
         );

         _fb:="{? __kpo_tab.WYS_REF=''
               || UMO.WYSYP:=null()
               || {? WYS.seek(__kpo_tab.WYS_REF)
                  || UMO.WYSYP:=WYS.ref()
                  || __kpo_tab.WYS_REF:=''
                  ?}
               ?};
               __kpo_tab.WYS_REF<>'' & __kpo_tab.IL>0";
         _fa:="{? UMO.WYSYP=null()
               || __kpo_tab.WYS_REF:=''
               || __kpo_tab.WYS_REF:=$UMO.WYSYP
               ?};
               _wyn:='';
               {? __kpo_tab.IL>0
               || _wyn:=__CHK.record(UMO,,'WYSYP');
                  {? _wyn=''
                  || _wyn:=__CHK.record(__kpo_tab,,'NRREJ','D')
                  ?}
               ?};
               _wyn";
         {? var_pres('__kpo_sel')>100 || obj_del(__kpo_sel) ?};
         __kpo_sel:=__kpo_tab.mk_sel('Utwórz karty przekazania odpadów'@+' — '
            +ZLP.ZLE().KH().KOD+' '+ZLP.ZLE().KH().SKR,'P',,'_zlp_kpo_gen_',,,,,'U');
         __kpo_tab.win_fld(__kpo_sel,,'FAS',,,-3,,1,'Sposób fakturowania'@,,'Sposób fakturowania'@);
         __kpo_tab.win_fld(__kpo_sel,,'DW',,,-10,,1,'Data wykonania'@,,'Data wykonania'@);
         __kpo_tab.win_fld(__kpo_sel,,'POS',,,20,,1);
         __kpo_tab.win_fld(__kpo_sel,,'ODP_KOD',,,10,,1);
         __kpo_tab.win_fld(__kpo_sel,UMO,'WYSYP','NAZ','NAZ',40,,,'Składowisko'@);
::         __kpo_tab.win_fld(__kpo_sel,UMO,'KHPOS','NAZ','NAZ',16,,,'Transportujący'@);

::         __kpo_tab.win_fld(__kpo_sel,,'NRREJ',,,16,,,'Numer pojazdu'@);

         __kpo_tab.win_fld(__kpo_sel,,'D',,,10,,,'Data'@);
::         __kpo_tab.win_fld(__kpo_sel,,'G',,,7,,,'Godzina'@);
         __kpo_tab.win_fld(__kpo_sel,,'IL',,,12,3,,'Masa'@+' '+UMO.JM_KPO);
         __kpo_tab.win_act(__kpo_sel,,'Szukaj');
         __kpo_tab.win_act(__kpo_sel,,'Popraw',,,,,,1);
         __kpo_tab.win_act(__kpo_sel,,'Formuła','Akceptuj'@@,,,,"exec('kpo_gen','odpady')");
         __kpo_tab.win_act(__kpo_sel,,'Rekord',,,,_fb,_fa);
         __kpo_tab.win_act(__kpo_sel,,'Kolejność');
         __kpo_tab.win_sel(__kpo_sel);
         __kpo_tab.win_fml(__kpo_sel,,'ODP_KOD',,'ICON_BEFORE'
            ,"{? __kpo_tab.WYS_REF<>'' & __kpo_tab.IL>0 || 'xwin16.png:38' || 'xwin16.png:110' ?}");

         _zlp_ref:=ZLP.ref();
         _biez:=_inne:=0;
         _kh:=ZLP.ZLE().KH;
         ZLP.cntx_psh();
         ZLP.index('KPOZ');
         ZLP.prefix('',_kh);
::    sprawdza czy sa inne zgloszenia bez kart przekazania
         {? ZLP.first()
         ||
            {!
            |?
               {? ZLP.ODP<>null & ZLP.STAT_REJ='Z' & ~exec('zlp_czy_anulowane','umowy_zlecenia')
               ||
                  {? ZLP.ref()=_zlp_ref  || _biez:=1 ?};
                  {? ZLP.ref()<>_zlp_ref || _inne:=1 ?}
               ?};
               ZLP.next()
            !}
         ?};
         {? _inne=1
               &
            FUN.ask(
               'Generować karty przekazania odpadów\ndla innych zgłoszeń kontrahenta %1 %2\n'
               'z uzupełnionym rodzajem odpadów?'@[ZLP.ZLE().KH().KOD,ZLP.ZLE().KH().SKR]
            )
         ||
            _biez:=0;
            ZLP.first();
            {!
            |?
               {? ZLP.r_lock(1,1,1)
               || exec('kpot_add','odpady')
               ?};
               ZLP.next()
            !}
         ?};
         ZLP.cntx_pop();

::    tylko dla biezacego ZLP
         {? _biez=1 || exec('kpot_add','odpady') ?};

         {? __kpo_tab.first()
         || __kpo_tab.select()
         || FUN.info(
               'Zgłoszenie nie ma uzupełnionego rodzaju odpadów.'@+'\n'+
               'Nie można zarejestrować karty przekazania odpadów.'@
            )
         ?};

         unlock_r()
      ||
         {? FUN.ask('Zgłoszenie obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@) & ZLP.r_lock(1,,1)
         || ZLP.r_unlock()
         ?}
      ?}
   |? _choice=1
   ||
::    Tworzenie KPOK
      exec('kpo_gen_dla_zlp','odpady',ZLP.ref())
   |? _choice=2
   ||
::      Powiązanie zgłoszenia z istniejącą kartą
         KH.cntx_psh();
         KPO.cntx_psh();
         _edit:=VAR.mk_edit('Parametry'@,,'zlp_kpo_params');
         VAR.win_efld(_edit,,'KH','SKR','KOD',30,,,'Kontrahent'@);
         VAR.win_efld(_edit,,'STRING',,,33,,1,'Typ KPO'@);
         VAR.win_efld(_edit,OKRO,'NAZWA',,,30,,,'Okres'@,,,,'F3_button=1');
         VAR.win_efld(_edit,OKRO,'ROK',,,33,,1,'Rok'@);

         _f3:="
            _res:=OKRO.NAZWA;
            {? OKRO.select(,1)
            || _res:=OKRO.NAZWA;
               VAR.AR:=OKRO.ROK;
               VAR.AM:=OKRO.NR_OKR
            ?};
            _res
         ";
         _fa:="
            OKRO.cntx_psh();
            OKRO.index('NAZ');
            OKRO.prefix(REF.FIRMA,OKRO.ROK,OKRO.NAZWA);
            {? OKRO.first()
            || VAR.AR:=OKRO.ROK;
               VAR.AM:=OKRO.NR_OKR
            ?};
            OKRO.cntx_pop()
         ";
         _prev_f3:=OKRO.fld_fml('NAZWA','F3',_f3);
         _prev_ae:=OKRO.fld_fml('NAZWA','AFTER_EDIT',_fa);
         _prev_df:=OKRO.fld_fml('ROK','DISPLAY_FORMAT',"'alignment=left'");
         _valid:="
            _res:='key:F2';
            _res:=__CHK.record(VAR,,'KH');
            {? _res=''
            || _res:=__CHK.record2(OKRO,'NAZWA','Okres'@)
            ?};
            {? _res=''
            || OKRO.cntx_psh();
               OKRO.index('NAZ');
               OKRO.prefix(REF.FIRMA,OKRO.ROK,OKRO.NAZWA);
               {? ~OKRO.first()
               || _res:='NAZWA';
                  FUN.emsg('Nie znaleziono okresu o podanej nazwie.'@)
               ?};
               OKRO.cntx_pop()
            ?};
            _res
         ";
         exec('ok_esc','#window',VAR,_edit);
         VAR.efld_opt(_edit,'mark=1',,'KH');
         VAR.efld_opt(_edit,'mark=1,',OKRO,'NAZWA');
         VAR.efld_opt(_edit,'mark=1',OKRO,'ROK');
         VAR.win_edit(_edit);
         KH.win_sel('SEL');

::       Podczytanie akutalnego okresu
         OKRO.cntx_psh();
         OKRO.index('ROK');
         OKRO.prefix(REF.FIRMA,ST.AM,ST.AR);
         OKRO.first();
         OKRO.index('UNIK');
         OKRO.prefix();
         OKRO.win_sel('WYB_OKRO');
         VAR.KH:=ZLP.KH;
         VAR.AR:=OKRO.ROK;
         VAR.AM:=OKRO.NR_OKR;
         VAR.STRING:=ZLP.TKPO;
         {? VAR.edit(_valid)
         || {? ST.ODDZ <> ''
            || exec('kpo_open','open_tab', ST.ODDZ, ($VAR.AR)+2)
            ?};
            KPO.win_sel('SEL');
            KPO.fld_opt('SEL','col_name=%1 %2'['Masa'@,UMO.JM_KPO],,'IL');
            KPO.index('ZLP');
            KPO.prefix('K',VAR.KH,VAR.AR,VAR.AM,VAR.STRING,);
            {? KPO.select()
            || ZLP.KPO:=KPO.ref();
               ZLP.put
            ?}
         ?};
         OKRO.fld_fml('NAZWA','F3',_prev_f3);
         OKRO.fld_fml('NAZWA','AFTER_EDIT',_prev_ae);
         OKRO.fld_fml('ROK','DISPLAY_FORMAT',_prev_df);
         OKRO.cntx_pop();
         KH.cntx_pop();
         KPO.cntx_pop()

   ?}
||
   {? ZLP.KPOZ<>''
   || KPOZ.cntx_psh();
      KPO.cntx_psh();
      exec('kpo_open','open_tab',(6+ZLP.KPOZ)+1,(8+ZLP.KPOZ)+2);
      KPOZ.prefix();
      KPO.prefix();
      {? KPOZ.seek(ZLP.KPOZ,8+ZLP.KPOZ)
      ||
         {? FUN.ask('Dla bieżącego zgłoszenia\nwystawiono kartę przekazania odpadów nr %1.\nDrukować?'@[KPOZ.KPO().SYM])
         || exec('kpo_druk','odpady')
         ?}
      ?};
      KPO.cntx_pop();
      KPOZ.cntx_pop()
   |? ZLP.KPO<>null
   || KPO.cntx_psh();
      KPO.use(ref_name(ZLP.KPO));
      _choice:=FUN.choice('Bieżące zgłoszenie zostało powiązane z kartą przekazania odpadów o symbolu %1.\n'
                 'Usunąć powiązanie, powiązać zgłoszenie z inną kartą czy przejść do zarządzania bieżącej karty?'@[ZLP.KPO().SYM],,'Usuń powiązanie'@ ,'Powiąż z inną kartą'@,'Zarządzaj bieżącą kartą'@);
      {? _choice=1
      ||
::         Usuwam powiązanie z kartą
         ZLP.KPO:=null;
         ZLP.put
      |? _choice=2
      ||
::       Powiązanie zgłoszenia z inną kartą
         KH.cntx_psh();
         KPO.cntx_psh();
         _edit:=VAR.mk_edit('Parametry'@,,'zlp_kpo_params');
         VAR.win_efld(_edit,,'KH','SKR','KOD',30,,,'Kontrahent'@);
         VAR.win_efld(_edit,,'STRING',,,33,,1,'Typ KPO'@);
         VAR.win_efld(_edit,OKRO,'NAZWA',,,30,,,'Okres'@,,,,'F3_button=1');
         VAR.win_efld(_edit,OKRO,'ROK',,,33,,1,'Rok'@);

         _f3:="
            _res:=OKRO.NAZWA;
            {? OKRO.select(,1)
            || _res:=OKRO.NAZWA;
               VAR.AR:=OKRO.ROK;
               VAR.AM:=OKRO.NR_OKR
            ?};
            _res
         ";
         _fa:="
            OKRO.cntx_psh();
            OKRO.index('NAZ');
            OKRO.prefix(REF.FIRMA,OKRO.ROK,OKRO.NAZWA);
            {? OKRO.first()
            || VAR.AR:=OKRO.ROK;
               VAR.AM:=OKRO.NR_OKR
            ?};
            OKRO.cntx_pop()
         ";
         _prev_f3:=OKRO.fld_fml('NAZWA','F3',_f3);
         _prev_ae:=OKRO.fld_fml('NAZWA','AFTER_EDIT',_fa);
         _prev_df:=OKRO.fld_fml('ROK','DISPLAY_FORMAT',"'alignment=left'");
         _valid:="
            _res:='key:F2';
            _res:=__CHK.record(VAR,,'KH');
            {? _res=''
            || _res:=__CHK.record2(OKRO,'NAZWA','Okres'@)
            ?};
            {? _res=''
            || OKRO.cntx_psh();
               OKRO.index('NAZ');
               OKRO.prefix(REF.FIRMA,OKRO.ROK,OKRO.NAZWA);
               {? ~OKRO.first()
               || _res:='NAZWA';
                  FUN.emsg('Nie znaleziono okresu o podanej nazwie.'@)
               ?};
               OKRO.cntx_pop()
            ?};
            _res
         ";
         exec('ok_esc','#window',VAR,_edit);
         VAR.efld_opt(_edit,'mark=1',,'KH');
         VAR.efld_opt(_edit,'mark=1,',OKRO,'NAZWA');
         VAR.efld_opt(_edit,'mark=1',OKRO,'ROK');
         VAR.win_edit(_edit);
         KH.win_sel('SEL');

::       Podczytanie akutalnego okresu
         OKRO.cntx_psh();
         OKRO.index('ROK');
         OKRO.prefix(REF.FIRMA,ST.AM,ST.AR);
         OKRO.first();
         OKRO.index('UNIK');
         OKRO.prefix();
         OKRO.win_sel('WYB_OKRO');
         VAR.KH:=ZLP.KH;
         VAR.AR:=OKRO.ROK;
         VAR.AM:=OKRO.NR_OKR;
         VAR.STRING:=ZLP.TKPO;
         {? VAR.edit(_valid)
         || {? ST.ODDZ <> ''
            || exec('kpo_open','open_tab', ST.ODDZ, ($VAR.AR)+2)
            ?};
            KPO.win_sel('SEL');
            KPO.fld_opt('SEL','col_name=%1 %2'['Masa'@,UMO.JM_KPO],,'IL');
            KPO.index('ZLP');
            KPO.prefix('K',VAR.KH,VAR.AR,VAR.AM,VAR.STRING,);
            {? KPO.select()
            || ZLP.KPO:=KPO.ref();
               ZLP.put
            ?}
         ?};
         OKRO.fld_fml('NAZWA','F3',_prev_f3);
         OKRO.fld_fml('NAZWA','AFTER_EDIT',_prev_ae);
         OKRO.fld_fml('ROK','DISPLAY_FORMAT',_prev_df);
         OKRO.cntx_pop();
         KH.cntx_pop();
         KPO.cntx_pop()
      |? _choice=3
      ||
::       Zarządzanie kartą
::         _env:=exec('env_create','odpady');
::         params_set('env',_env);
         KPO.cntx_psh();
         KPO.use(ref_name(ZLP.KPO));
         KPO.win_sel('WER');
         KPO.fld_opt('WER','col_name=%1 %2'['Masa'@,UMO.JM_KPO],,'IL');
         _actions:=KPO.actions('WER','DUOMKSEQYN(PU):DEN(U)');
         KPO.index('IDADD');
         KPO.prefix(ZLP.KPO().IDADD);
         {? KPO.size>0
         || KPO.select()
         ?};
         KPO.actions('WER',_actions);
         KPO.cntx_pop()
      ?};
      KPO.cntx_pop()
   ?}
?};
''


\kpot_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: dodanie pozycji __kpo_tab na podstawie ZLP (w buforze)
::  OLD: \kpot_add/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLP.ODP<>null & ZLP.STAT_REJ='Z' & ~exec('zlp_czy_anulowane','umowy_zlecenia')
||
   __kpo_tab.blank();
   __kpo_tab.FAS:=ZLP.ZLE().FAS().KOD;
   __kpo_tab.DW:=ZLP.DW;
   __kpo_tab.POS:={? ZLP.MIA().NAZ<>'' || form(ZLP.MIA().NAZ)+', ' || '' ?}+form(ZLP.UL().UL)+' '+form(ZLP.POS().NR);
   __kpo_tab.KH_REF:=$ZLP.ZLE().KH;
   __kpo_tab.ODP_KOD:=ZLP.ODP().KOD;
   __kpo_tab.ODP_REF:=$ZLP.ODP;
   __kpo_tab.MP:=ZLP.WYS().NAZ
      +{? ZLP.WYS().UL().UL<>'' || ' '+ZLP.WYS().UL().UL || '' ?}
      +{? ZLP.WYS().NR<>'' || ' '+ZLP.WYS().NR || '' ?};
   __kpo_tab.D:=ZLP.DW;
   __kpo_tab.WYS_REF:=$ZLP.WYS;
   {? ZLP.KG>0
   ||
      __kpo_tab.IL:=ZLP.KG
   ||
::    wg przelicznika jednostek dla uslugi podstawowej lub fakturuj jako
      _j_mg:=null;
      _fo:=exec('get_par','bdo_fun',100171,2);
      JM.index('KOD');
      JM.prefix(_fo,_fo);
      {? JM.first() || _j_mg:=JM.ref() ?};

      {? ZLP.MJ<>null & ZLP.IL>0
      ||
         _obj:=exec('przel','jm',ZLP.MJ,_j_mg,ZLP.MJ().J);
         _dokl:=exec('jaka_dok_mjm','jm',ZLP.MJ,_j_mg,ZLP.MJ().J);
         roundmet(BEER.MDOKL);
         __kpo_tab.IL:={? _obj>0 || (ZLP.IL/_obj)$_dokl || 0 ?}
      |? ZLP.M_R<>null & ZLP.ILR>0
      ||
         _obj:=exec('przel','jm',ZLP.M_R,_j_mg,ZLP.M_R().J);
         _dokl:=exec('jaka_dok_mjm','jm',ZLP.M_R,_j_mg,ZLP.M_R().J);
         roundmet(BEER.MDOKL);
         __kpo_tab.IL:={? _obj>0 || (ZLP.ILR/_obj)$_dokl || 0 ?}
      ||
         __kpo_tab.IL:=0
      ?};
      roundmet(5)
   ?};
   __kpo_tab.ZLP_REF:=$ZLP.ref();
   __kpo_tab.add()
?};
''


\kpo_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: generowanie KPO i KPOZ na podstawie tabeli __kpo_tab
::  OLD: \kpo_gen/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_qq:="
   select
      :_a.ZLP_REF ZLP_REF,
      :_a.WYS_REF WYS_REF,
      :_a.IL IL,
      :_a.D

   from
      :_a
   where
      :_a.WYS_REF<>'' and :_a.IL>0
";
_kpo_grp:=sql($_qq,__kpo_tab);
{? _kpo_grp.first()
||
   exec('JCQ_decl','#message');
   VAR_DEL.delete('__kpo_cq');
   __kpo_cq:=obj_new(@.CLASS.JCQ);
   __kpo_cq.init(,,'Generacja kart przekazania odpadów'@);
   __kpo_cq.sect_beg('Uzupełniono karty przekazania odpadów.'@);

  KPO.cntx_psh();

   _ndx:=__kpo_tab.ndx_tmp(,,'ODP_REF',,,'WYS_REF',,);
   __kpo_tab.index(_ndx);
:: petla po naglowkach
   {!
   |? _zlp:=null();
      {? ZLP.seek(_kpo_grp.ZLP_REF)
      || _zlp:=ZLP.ref()
      ?};
      _wys:=null();
      {? WYS.seek(_kpo_grp.WYS_REF)
      || _wys:=WYS.ref()
      ?};
      {? _zlp<>null() & _wys<>null()
      || {? exec('kpo_gen_dla_zlp','odpady', _zlp, _wys, _kpo_grp.IL, _kpo_grp.D)
         || ZLP.seek(_zlp);
            {? ZLP.KPOZ<>''
            || KPO.cntx_psh();
               KPOZ.cntx_psh();
               KPOZ.seek(ZLP.KPOZ);
               __kpo_cq.add('Karta przyjmująca odpady numer '+KPOZ.KPO().SYM,7);
               KPO.cntx_pop();
               KPOZ.cntx_pop()
            ?}
         ?}
      ?};
      _kpo_grp.next()
   !};
   __kpo_tab.ndx_drop(_ndx);

   KPO.cntx_pop();

   sel_exit();
   __kpo_cq.sect_end();
   __kpo_cq.select();
   VAR_DEL.delete('__kpo_cq')
||
   FUN.info(
      'Karty przekazania odpadów tworzone są dla pozycji\n'
      'z uzupełnionym miejscem przeznaczenia oraz masą w [%1].\n\n'
      'W żadnej z pozycji nie uzupełniono wymaganych danych.\nNie utworzono kart przekazania odpadów.'@
      [exec('get_par','bdo_fun',100171,2)]
   )
?};
''


\kpo_gen_dla_zlp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty przekazania odpadów (KPO i KPOZ) dla zgłoszenia jednorazowego (ZLP)
::   WE: [_a]-_ZLP
::       [_b]-_WYS
::       [_c]-ilość
::       [_d]-data
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_DRKP';
_params.AKCJA:='ZLP';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZLP',_a);
::exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'WYS',_b);
::exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'IL',_c);
::exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'D',_d);

exec('mp_run','#b__box',_params)


\kpo_gen_dla_zlp_wyko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty przekazania odpadów (KPO i KPOZ) dla zgłoszenia jednorazowego ZLP
::   WE: [_a]-_ZLP
::       [_b]-_WYS
::       [_c]-ilość
::       [_d]-data
::----------------------------------------------------------------------------------------------------------------------
_kpo_ref:=null();
ZLP.cntx_psh();
ZLP.prefix();
{? ZLP.seek(_a)
|| {? ZLP.r_lock(1,1,1)
   ||
      exec('kpo_open','open_tab', ST.ODDZ, ($ST.AR)+2);
      KPO.clear();
      KPO.blank();
      _typ:=ZLP.TKPO;
      KPO.R:='P';
      KPO.RUTW:='Zgłoszenie';
      KPO.RZLP:=$ZLP.ref;
      KPO.TYP:={? _typ<>'' || _typ || exec('typ_kpok_tra','odpady') ?};
      ZLP.TKPO:=KPO.TYP;
     {? ZLP.ZLE().FAS().KOD='N'
     ||
        KPO.IL:=ZLP.KG;
        KPO.KH_ODB:=ZLP.KH_ODB;
        KPO.KH_MPD:=ZLP.KH_ODB().NRMPDBDO
        ?};
        KPO.ODP:=ZLP.ODP;
        KPO.KOD_G:=exec('get_par','bdo_fun',100196,type_of(''));
        {? KPO.KOD_G<>'' || KPO.NAZ_G:=exec('WyszukajGmine','teryt',KPO.KOD_G) ?};
        KPO.DTR:=date();
        KPO.KPO_STAT:=exec('kpo_stat_planned','odpady');
        KPO.win_edit('REDE');
        {? KPO.edit("exec('chk_kpo','odpady')")
        ||
           {? KPO.add()
           || exec('kpo_nr_nadaj','odpady');
::              KPO.STATUS:='Z';
              FUN.info('Utworzono kartę przekazania odpadów komunalnych o symbolu: %1'@[KPO.SYM]);
              ZLP.KPO:=KPO.ref;
              ZLP.KG:=KPO.IL;
              ZLP.put()
           ?}
        ?}
   || FUN.info('Rekord zablokowany.'@)
   ?};
   ZLP.r_unlock()
?};
ZLP.cntx_pop();
_kpo_ref


\kpo_rekprzed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Akcja na rekord przed w oknie KOP WER
::   WE: _a - parametr systemowy
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| {? KPO.sel_size()=0
   || _grayed:=':';
::    Zakończ, Akceptuj - zależne od KPO.STATUS
      {? KPO.STATUS='T'
      || _grayed:='AZPU'+_grayed
      |? KPO.STATUS='Z'
      || _grayed:='ZPU'+_grayed
      || _grayed:='AW'+_grayed
      ?};
::    Dołącz wpis do  karty ewidencji - zależne od znacznika "Obsłużona"
      {? KPO.OB<>'T'
      || _grayed:='N(D)'+_grayed
      ?};
::    BDO - zależne od tokena dostępowego - wszystko wyłączone
      {? __BDO_TOKEN=''
      || _grayed:='B'+_grayed
      ||
::       BDO - zależne od KPO.STATUS
         {? KPO.STATUS<>'T'
         || _grayed:='B(WRMAUZOETYDGPK)'+_grayed
         ?};
::       BDO - zależne od niezgodnego MPD z kontekstem pracy
         {? KPO.KH_MPD<>exec('FindAndGet','#table',KH_ODB,VAR.MPD,,"KH_ODB.NRMPDBDO",'')
         || _grayed:='B(WRMUZOETYDGPK)'+_grayed
         ?};
::       BDO - zależne od KPO.KPO_STAT i KPO.BDO_ID
         {? KPO.BDO_ID=''
         || _grayed:='B(MAUZOETYDGPKJ)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_planned','odpady')
         || _grayed:='B(WROETYDGPK)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_approved','odpady')
         || _grayed:='B(WRMUZETDGPK)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_confirmation_generated','odpady')
         || _grayed:='B(WRMUZOTGK)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_receive_confirmation','odpady')
         || _grayed:='B(WRMUZOEYDGK)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_transport_confirmation','odpady')
         || _grayed:='B(WRMUZOETYDG)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_rejected','odpady')
         || _grayed:='B(WRMUZOETYDPK)'+_grayed
         |? KPO.KPO_STAT=exec('kpo_stat_withdrawn','odpady')
         || _grayed:='B(WRMUZOETYDGPK)'+_grayed
         ?};
::       BDO - zależne od roli w stosunku do aktualnej karty
::       - wycofać może tylko przekazujacy
::       - korektę może wykonać tylko przekazujący
         {? KPO.KH<>VAR.POD
         || _grayed:='B(YG)'+_grayed
         ?};
::       - wygenerować potwierdzenie może tylko przekazujący lub transportujący
         {? KPO.KH<>VAR.POD & KPO.KH_3<>VAR.POD
         || _grayed:='B(O)'+_grayed
         ?};
::       - potwierdzić przejęcie może tylko przejmujący
::       - odrzucić może tylko przejmujacy
         {? KPO.KH_2<>VAR.POD
         || _grayed:='B(ED)'+_grayed
         ?};
::       - potwierdzić transport może tylko transportujący
         {? KPO.KH_3<>VAR.POD
         || _grayed:='B(T)'+_grayed
         ?}
      ?};
::      _grayed:='';
      KPO.actions_grayed('WER',_grayed)
   || _grayed:=':';
::    BDO zależne od tokena dostępowego - wszystko wyłączone
      {? __BDO_TOKEN=''
      || _grayed:='B'+_grayed
      ?};
::    Dołącz wpis do  karty ewidencji - zależne od znacznika "Obsłużona"
      {? KPO.OB<>'T'
      || _grayed:='N(D)'+_grayed
      ?};
      KPO.actions_grayed('WER',_grayed)
   ?}
?};
exec('rekprzed','color','KPO#01#')


\kpo_kh_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - karta przekazania odpadów - domyślny kontrahent przekazujący (KH)
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_knt_kod:=exec('get_par','bdo_fun',100191,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
_knt


\kpo_kh2_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - karta przekazania odpadów - domyślny kontrahent przyjmujący (KH_2)
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_knt_kod:=exec('get_par','bdo_fun',100193,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
_knt


\kpo_khodb_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - karta przekazania odpadów - domyślne miejsce kontrahenta przekazującego (KH_ODB)
::   WE: _a - KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_odb:=null();
_knt_kod:=exec('get_par','bdo_fun',100191,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
{? _knt<>null() & _knt=_a
|| _odb_kod:=exec('get_par','bdo_fun',100192,type_of(''));
   {? _odb_kod<>''
   || _odb:=exec('FindInSet','#table','KH_ODB','KH_ODB',_odb_kod,_knt,,1,,null())
   ?}
?};
_odb


\kpo_khodb2_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - karta przekazania odpadów - domyślne miejsce kontrahenta przejmującego (KH_ODB_2)
::   WE: _a - KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_odb:=null();
_knt_kod:=exec('get_par','bdo_fun',100193,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
{? _knt<>null() & _knt=_a
|| _odb_kod:=exec('get_par','bdo_fun',100194,type_of(''));
   {? _odb_kod<>''
   || _odb:=exec('FindInSet','#table','KH_ODB','KH_ODB',_odb_kod,_knt,,1,,null())
   ?}
?};
_odb


\kpot_kh_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPOT - transport dla karty przekazania odpadów - domyślny kontrahent (KH)
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_knt_kod:=exec('get_par','bdo_fun',100195,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
_knt


\kpot_khodb_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPOT - transport dla karty przekazania odpadów - domyślne miejsce kontrahenta (KH_ODB)
::   WE: _a - KH.ref()
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_odb:=null();
_knt_kod:=exec('get_par','bdo_fun',100195,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
{? _knt<>null() & _knt=_a
|| _odb_kod:=exec('get_par','bdo_fun',100196,type_of(''));
   {? _odb_kod<>''
   || _odb:=exec('FindInSet','#table','KH_ODB','KH_ODB',_odb_kod,_knt,,1,,null())
   ?}
?};
_odb


\be_kpo_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: KPO - przed edycją pola R (rodzaj - P, W, G)
::----------------------------------------------------------------------------------------------------------------------
_kpo_nowy:=0;
{? var_pres('__kpo_nowy')=type_of(0)
|| _kpo_nowy:=__kpo_nowy
?};
{? _kpo_nowy
|| _wyn:=1
|| _wyn:=0
?};
_wyn


\gpod_kp_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [MPGK_1240]
:: OPIS: Generuj KP za miesiąc na dany kod Odpadu
::   WE:
::   WY:
::  OLD: \gpod_kp_gen/new_um.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_kh1:=exec('kpo_kh_domyslny','odpady');
{? _kh1=null()
|| FUN.info(
      'Wymagane ustawienie parametru aplikacyjnego 100191 - Domyślny kontrahent przekazujący odpad.\n'
      'Utworzenie karty przekazania odpadu jest niemożliwe.'@
   );
   return(~~)
?};

_khodb1:=null;
_odb_kod:=exec('get_par','bdo_fun',100192,type_of(''));
{? _odb_kod<>''
|| _khodb1:=exec('FindInSet','#table','KH_ODB','KH_ODB',_odb_kod,_kh1,,1,,null())
?};

{? _khodb1=null()
|| FUN.info(
      'Wymagane ustawienie parametru aplikacyjnego 100192 - Domyślne miejsce działalności kontrahenta przekazującego odpad.\n'
      'Utworzenie karty przekazania odpadu jest niemożliwe.'@
   );
   return(~~)
?};
_kh2:=exec('kpo_kh2_domyslny','odpady');
_khodb2:=exec('kpo_khodb2_domyslny','odpady',_kh2);
_kh3:=exec('kpot_kh_domyslny','odpady');
_khodb3:=exec('kpot_khodb_domyslny','odpady',_kh3);

_kh1_ref:=$_kh1;
{? _khodb1=null()
|| _khodb1_ref:=''
|| _khodb1_ref:=$_khodb1
?};
{? _kh2=null()
|| _kh2_ref:=form('',16)
|| _kh2_ref:=$_kh2
?};
{? _khodb2=null()
|| _khodb2_ref:=form('',16)
|| _khodb2_ref:=$_khodb2
?};
{? _kh3=null()
|| _kh3_ref:=form('',16)
|| _kh3_ref:=$_kh3
?};
{? _khodb3=null()
|| _khodb3_ref:=form('',16)
|| _khodb3_ref:=$_khodb3
?};

_par:=tab_tmp(,'OD','DATE','Od dnia'@,
               'DO','DATE','Do dnia'@);
_par.OD:=date(ST.AR,ST.AM,1);
_par.DO:=date(ST.AR,ST.AM,0);
{? _par.OD>date()
|| _par.OD:=date()
?};
{? _par.DO>date()
|| _par.DO:=date()
?};
_okn:=_par.mk_edit('Okres odbioru odpadów'@,0);
_par.win_esep(_okn,'Okres'@);
_par.win_efld(_okn,,'OD');
_par.win_efld(_okn,,'DO');
_par.win_ebtn(_okn,'text='+'&Zapisz'@+',align=end',"'key:F2'");
_par.win_ebtn(_okn,'text='+'&Anuluj'@+',align=end',"'key:Esc'");
_par.win_edit(_okn);
_chk_fml:="_p:=cur_tab(,1);
          _wyn:=(_p.OD<>date(0,0,0) & _p.DO<>date(0,0,0) & _p.OD<=_p.DO & _p.DO<=date());
          {? ~_wyn
          || FUN.info('Nieprawidłowe daty.'@)
          ?};
          _wyn";
{? ~_par.edit(_chk_fml)
|| return(~~)
?};

{? var_pres('__kpo_tab')>100
|| obj_del(__kpo_tab)
?};

__kpo_tab:=psql('select GPOD.KOD as PUNKT,
               ODP.REFERENCE as ODP_REF,
               ODP.KOD,
               ODP.NAZ,
               sum(WAGA) as WAGA,
               \':_f\' as TRANS,
               \':_d\' as KH,
               \':_g\' as SKLAD,
               TRIM(\':_h\') as NRREJ,
               \':_e\' as ADRES,
               to_date(:_i) as DATA,
               to_time(:_j) as GODZINA,
               GPOD.KOD_G as KOD_G,
               GPOD.NAZ_g as NAZ_g,
               GPOD.OB_G as OB_G
               from @GPODPOZ left join ODP join GPOD
               where GPODPOZ.GPOD=:_a and GPODPOZ.D>=to_date(:_b) and GPODPOZ.D<=to_date(:_c) and WAGA>0
               group by ODP.REFERENCE,ODP.KOD,ODP.NAZ,GPODPOZ.F,GPOD.KOD,GPOD.KOD_G,GPOD.NAZ_G,GPOD.OB_G',
               GPOD.ref(),_par.OD,_par.DO,_kh2_ref,_khodb2_ref,_kh3_ref,form('',16),form('',100),date(0,0,0),time(0,0,0));

{? __kpo_tab.first()
|| {? ~FUN.ask('Czy generować karty przekazania odpadu?'@)
   || return(~~)
   ?}
|| FUN.info('Brak odebranych odpadów w podanym okresie.'@);
   return(~~)
?};

__fb:="
      UMO.WYSYP:=null();
::      {? __kpo_tab.SKLAD<>''
::      || {? WYS.seek(BB.sqlint(__kpo_tab.SKLAD))
::         || UMO.WYSYP:=WYS.ref()
::         || __kpo_tab.SKLAD:=''
::         ?}
::      ?};
      UMO.KH:=null();
      {? __kpo_tab.KH<>''
      || {? KH.seek(__kpo_tab.KH)
         || UMO.KH:=KH.ref()
         || __kpo_tab.KH:=''
         ?}
      ?};
      UMO.KH_ODB:=null();
      {? __kpo_tab.ADRES<>'' & UMO.KH<>null()
      || {? KH_ODB.seek(__kpo_tab.ADRES) & KH_ODB.KH=UMO.KH
         || UMO.KH_ODB:=KH_ODB.ref()
         || __kpo_tab.ADRES:=''
         ?}
      ?};
      UMO.KHPOS:=null();
      {? __kpo_tab.TRANS<>''
      || {? KH.seek(__kpo_tab.TRANS)
         || UMO.KHPOS:=KH.ref()
         || __kpo_tab.TRANS:=''
         ?}
      ?};
      __kpo_tab.SKLAD<>'' & __kpo_tab.KH<>'' & __kpo_tab.TRANS<>''
";
__fa:="
::      {? UMO.WYSYP=null()
::      || __kpo_tab.SKLAD:=''
::      || __kpo_tab.SKLAD:=$UMO.WYSYP
::      ?};
      {? UMO.KH=null()
      || __kpo_tab.KH:=''
      || __kpo_tab.KH:=$UMO.KH
      ?};
      {? UMO.KH_ODB=null()
      || __kpo_tab.ADRES:=''
      || __kpo_tab.ADRES:=$UMO.KH_ODB
      ?};
      {? UMO.KHPOS=null()
      || __kpo_tab.TRANS:=''
      || __kpo_tab.TRANS:=$UMO.KHPOS
      ?};
      _wyn:='';
::      _wyn:=__CHK.record2(UMO,'WYSYP','Składowisko'@);
      {? _wyn=''
      || _wyn:=__CHK.record2(UMO,'KHPOS','Transportujący odpad'@)
      ?};
      {? _wyn=''
      || _wyn:=__CHK.record2(UMO,'KH','Przejmujący odpad'@)
      ?};
      {? _wyn=''
      || _wyn:=__CHK.record2(UMO,'KH_ODB','Miejsce działalności'@)
      ?};
      {? _wyn=''
      || _wyn:=__CHK.record2(__kpo_tab,'NRREJ','Numer rejestracyjny'@)
      ?};
      {? _wyn='' & __kpo_tab.WAGA<=0
      || FUN.emsg('Waga musi być większa od 0.'@);
         _wyn:='WAGA'
      ?};
      {? _wyn=''
      || _wyn:=__CHK.record2(__kpo_tab,'DATA','Data'@)
      ?};
      {? _wyn=''
      || {? __kpo_tab.DATA<date()
         || _wyn:='DATA';
            FUN.emsg('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
         |? __kpo_tab.DATA~1<>ST.AR | __kpo_tab.DATA~2<>ST.AM
         || _wyn:='DATA';
            FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AM+'/'+$ST.AR])
         ?}
      ?};
      {? _wyn='' & ~exec('valid_time','#field',__kpo_tab.GODZINA)
      || _wyn:='GODZINA'
      ?};
      _wyn
";
_ae_kh:="{? UMO.KH_ODB<>null() & (UMO.KH=null() | UMO.KH_ODB().KH<>UMO.KH)
         || UMO.KH_ODB:=null()
         ?};
         1";
_be_khodb:="{? UMO.KH = null()
            || 0
            || BEER.KH:=UMO.KH;
               1
            ?}";
_delbie:="{? FUN.ask('Czy usunąć wszystkie wiersze poza bieżącym?'@)
          || _bie:=__kpo_tab.ref;
             {? __kpo_tab.first()
             || {!
                |? {? __kpo_tab.ref<>_bie
                   || __kpo_tab.del
                   || __kpo_tab.next
                   ?}
                !}
             ?}
          ?}";

__spr:="_wyn:='';
        {? __kpo_tab.first()
        || {!
           |? __fb();
              _wyn:=__fa();
              _wyn='' & __kpo_tab.next()
             !}
         ?};
         _wyn=''
         ";
_nrrej_F3:="
   exec('kpo_nrrej_f3','odpady',__kpo_tab)
";

_acr:=__kpo_tab.mk_sel('Uzupełnij dane'@,,0);
__kpo_tab.win_fld(_acr,UMO,'KHPOS','NAZ','NAZ',16,,,'Transportujący'@);
__kpo_tab.win_fld(_acr,UMO,'KH','NAZ','NAZ',16,,,'Przejmujący'@);
__kpo_tab.win_fld(_acr,UMO,'KH_ODB','NAZ','KH_ODB1',16,,,'Miejsce działalności'@);
__kpo_tab.win_fld(_acr,,'NRREJ',,,16,,,'Numer rejestracyny'@);
__kpo_tab.win_fld(_acr,,'KOD',,,10,,1,'Kod odpadu'@);
__kpo_tab.win_fld(_acr,,'NAZ',,,20,,1,'Nazwa odpadu'@);
__kpo_tab.win_fld(_acr,,'WAGA',,,12,4,,'Waga [kg]'@);
::__kpo_tab.win_fld(_acr,UMO,'WYSYP','NAZ','NAZ',16,,,'Składowisko'@);
__kpo_tab.win_fld(_acr,,'DATA',,,10,,,'Data'@);
__kpo_tab.win_fld(_acr,,'GODZINA',,,7,,,'Godzina'@);
__kpo_tab.win_act(_acr,,'Formuła','&Generuj'@@,,,"{? __spr() || sel_exit() || 0 ?}",,,,,,'G');
__kpo_tab.win_act(_acr,,'Popraw',,,,,,1);
__kpo_tab.win_act(_acr,,'Usuń',,,,,,,1);
__kpo_tab.win_act(_acr,,'Formuła','Usuń poza &bieżącym'@@,,,_delbie,,,,,,'B');
__kpo_tab.win_act(_acr,,'Szukaj');
__kpo_tab.win_act(_acr,,'Kolejność');
__kpo_tab.win_act(_acr,,'Rekord',,,,__fb,__fa);
__kpo_tab.win_sel(_acr);
__kpo_tab.fld_fml('NRREJ','F3',_nrrej_F3);
UMO.fld_fml('KH','AFTER_EDIT',_ae_kh);
UMO.fld_fml('KH_ODB','BEFORE_EDIT',_be_khodb);
_fa:="
   {? fld()>=1000000000
   || FUN.emsg('Część całkowita wagi odpadów może składać się maksymalnie z 9 znaków.'@);
      return(0)
   ?};
   1
";
__kpo_tab.fld_fml('WAGA','AFTER_EDIT',_fa);
__kpo_tab.fld_fml('WAGA','EDIT_FORMAT',"'in_prec=4'");

_red:=__kpo_tab.mk_edit('Karta przekazania odpadów'@,,'gpod_kpo');
__kpo_tab.win_efld(_red,UMO,'KHPOS','NAZ','NAZ',30,,,'Transportujący'@);
__kpo_tab.win_efld(_red,UMO,'KH','NAZ','NAZ',30,,,'Przejmujący'@);
__kpo_tab.win_efld(_red,UMO,'KH_ODB','NAZ','KH_ODB1',30,,,'Miejsce działalności'@);
__kpo_tab.win_efld(_red,,'NRREJ',,,30,,,'Numer rejestracyny'@,,,,'F3_button=1');
__kpo_tab.win_efld(_red,,'WAGA',,,33,4,,'Waga'@);
__kpo_tab.win_efld(_red,,'DATA',,,10,,,'Data'@);
__kpo_tab.win_efld(_red,,'GODZINA',,,13,,,'Godzina'@);
exec('ok_esc','#window',__kpo_tab,_red);
__kpo_tab.efld_opt(_red,'mark=1',UMO,'KH','NAZ');
__kpo_tab.efld_opt(_red,'mark=1',UMO,'KH_ODB','NAZ');
__kpo_tab.efld_opt(_red,'mark=1',UMO,'KHPOS','NAZ');
__kpo_tab.efld_opt(_red,'mark=1',,'NRREJ');
__kpo_tab.efld_opt(_red,'mark=1',,'WAGA');
__kpo_tab.efld_opt(_red,'mark=1',,'DATA');

__kpo_tab.win_edit(_red);

_gen:=__kpo_tab.select();

UMO.fld_fml('KH','AFTER_EDIT',"*");
UMO.fld_fml('KH_ODB','BEFORE_EDIT',"*");

ODP.cntx_psh();

{? _gen
|| __kpo_tab.first();
  {!
  |? {? __fb() & ODP.seek(__kpo_tab.ODP_REF)
     || exec('kpo_gen_dla_gpod','odpady',UMO.WYSYP,(__kpo_tab.WAGA/1000)$4,__kpo_tab.DATA,ODP.ref(),
             UMO.KH,UMO.KH_ODB,UMO.KHPOS,__kpo_tab.NRREJ,__kpo_tab.GODZINA,__kpo_tab.KOD_G,__kpo_tab.NAZ_G,__kpo_tab.OB_G)
     ?};
     __kpo_tab.next()
  !}
?};

obj_del(__kpo_tab);
&__fa;
&__fb;
&__spr;

ODP.cntx_pop();

{? _gen
|| exec('gpod_kpo_show','odpady')
?};

~~


\gpod_kpo_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [12.10]
:: OPIS:
::   WE:
::   WY:
::  OLD: \gpod_kpo_show/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('jm_kpo','jm');
KPO.cntx_psh();
_r:=DISP.R;
DISP.R:='G';
_a0:=KPO.actions('WER','DPUOMBTZAN(W):DBT','A');
_w:=KPO.win_sel('?');
KPO.win_sel('WER');
KPO.fld_opt('WER','col_name=%1 %2'['Masa'@,UMO.JM_KPO],,'IL');
KPO.hdr_sel();
KPO.win_edit('REDE');
KPO.index('ODDZ');
KPO.prefix('K',ST.ODDZ,DISP.R);
KPO.select(,1);
KPO.win_sel(_w);
KPO.actions('WER','',_a0);
DISP.R:=_r;
KPO.cntx_pop();
~~


\kpo_gen_dla_gpod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty przekazania odpadów (KPO i KPOZ) dla zgłoszenia jednorazowego (ZLP)
::   WE : [_a]-_WYS
::        [_b]-ilość
::        [_c]-data
::        [_d]-_ODP
::        [_e]-KH_2
::        [_f]-KH_ODB_2
::        [_g]-KH_KPOT
::        [_h]-NRREJ
::        [_i]-godzina
::        [_j]-kod gminy
::        [_k]-nazwa gminy
::        [_l]-obszar gminy
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_DRKP';
_params.AKCJA:='GPOD';
_params.PROC_START:='T';
_params.CONTEXT:=obj_new('GODZINA','KOD_G','NAZ_G','OB_G');
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'WYS',_a);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'IL',_b);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'D',_c);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ODP',_d);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KH_2',_e);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KH_ODB_2',_f);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'KH_KPOT',_g);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'NRREJ',_h);
_params.CONTEXT.GODZINA:=_i;
_params.CONTEXT.KOD_G:=_j;
_params.CONTEXT.NAZ_G:=_k;
_params.CONTEXT.OB_G:=_l;
exec('mp_run','#b__box',_params)


\kpo_gen_dla_gpod_wyko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.22]
:: OPIS: Dołączenie karty przekazania odpadów (KPO i KPOZ) dla zgłoszenia jednorazowego ZLP
::   WE : [_a]-_WYS
::        [_b]-ilość
::        [_c]-data
::        [_d]-_ODP
::        [_e]-KH_2
::        [_f]-KH_ODB_2
::        [_g]-KH_KPOT
::        [_h]-NRREJ
::        [_i]-godzina
::        [_j]-kod gminy
::        [_k]-nazwa gminy
::        [_l]-obszar gminy
::----------------------------------------------------------------------------------------------------------------------
_kpo_ref:=null();
KPO.clear();
KPO.blank();
{? KPO.KH=null()
|| FUN.info(
      'Wymagane ustawienie parametru aplikacyjnego 100191 - Domyślny kontrahent przekazujący odpad.\n'
      'Utworzenie karty przekazania odpadu jest niemożliwe.'@
   )
|? KPO.KH_ODB=null()
|| FUN.info(
      'Wymagane ustawienie parametru aplikacyjnego 100192 - Domyślne miejsce działalności kontrahenta przekazującego odpad.\n'
      'Utworzenie karty przekazania odpadu jest niemożliwe.'@
   )
||
:: jeżeli słownik statusów BDO nie jest wypełniony dalsza praca nie jest możliwa
   _kpo_stat:=exec('kpo_stat_planned','odpady');
   {? _kpo_stat=null() || return(_kpo_ref) ?};

   KPO.KPO_STAT:=_kpo_stat;
   KPO.R:='G';
   KPO.RUTW:='GPOD';
   _typ:=exec('get','#params',100172,2);
   KPO.TYP:={? _typ<>'' || _typ || exec('typ_kpok_tra','odpady') ?};
   KPO.KH_2:=_e;
   KPO.KH_ODB_2:=_f;
   KPO.KH_2_MPD:=exec('FindAndGet','#table',KH_ODB,_f,,"KH_ODB.NRMPDBDO",'');
   KPO.KH_3:=_g;
   KPO.NRREJ:=_h;
   KPO.ODP:=_d;
   KPO.WYS:=_a;
   KPO.IL:=_b;
   KPO.STATUS:='Z';
   KPO.DTR:=_c;
   KPO.GTR:=_i;
   KPO.KOD_G:=_j;
   KPO.NAZ_G:=_k;
   KPO.OB_G:=_l;
   {? KPO.add()
   || exec('kpo_nr_nadaj','odpady');
      _kpo_ref:=KPO.ref();
      {? KPO.put() & KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?}
   ?}
?};
_kpo_ref


\import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.22]
:: OPIS: import kodów odpadów
::----------------------------------------------------------------------------------------------------------------------
_name_odpg:='kodyodpg.dem';
_name_odpp:='kodyodpp.dem';
_name_odp:='kodyodp.dem';

{? ~fexists(_name_odpg,1) |
   ~fexists(_name_odpp,1) |
   ~fexists(_name_odp,1)
|| FUN.info('Nie odnaleziono wszystkich wymaganych plików z kodami odpadów.\nImport niemożliwy.'@)
|? FUN.ask('Czy rozpocząć import kodów odpadów?'@)
|| ODPG.cntx_psh();
   ODPG.index('ODPG');
   ODPG.prefix();

   ODPP.cntx_psh();
   ODPP.index('ODPP');
   ODPP.prefix();

   ODP.cntx_psh();
   ODP.index('NAZ');
   ODP.prefix();

   _ret:=0;
   _ret+=ODPG.import(_name_odpg,1,,';',,,
      'KOD',,1,,
      'NAZ',,2,
      );
  _ret+=ODPP.import(_name_odpp,1,,';',,,
      'KOD',,1,,
      'NAZ',,2,,
      'ODPG','KOD',3,
      );
   _ret+=ODP.import(_name_odp,1,,';',,,
      'KOD',,1,,
      'NAZ',,2,,
      'K',,3,,
      'ODPG','KOD',4,,
      'ODPP','KOD',5,,
      'NB',,6,,
      'WM3',,7,,
      'PODZ',,8,,
      'BIOD',,9,
   );

   {? _ret =3
      || FUN.info('Dane z pliku pomyślnie zaimportowane.'@)
      || FUN.emsg('Nie wszystkie akcje zakończone zgodnie z oczekiwaniem, informacje o błędach i ostrzeżeniach zostały wpisane do pliku: %1.'@['import.log'])
   ?};

   ODP.cntx_pop();
   ODPP.cntx_pop();
   ODPG.cntx_pop()
?};
''


\eksport
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.22]
:: OPIS: eksport kodów odpadów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy rozpocząć eksport kodów odpadów?'@ )
|| _name_odpg:='kodyodpg.dem';
   _name_odpp:='kodyodpp.dem';
   _name_odp:='kodyodp.dem';

   ODPG.cntx_psh();
   ODPG.index('ODPG');
   ODPG.prefix();

   ODPP.cntx_psh();
   ODPP.index('ODPP');
   ODPP.prefix();

   ODP.cntx_psh();
   ODP.index('NAZ');
   ODP.prefix();

   _ret:= ODPG.export(_name_odpg,,';',,,
      'KOD',,1,,
      'NAZ',,2,
      ) &
   ODPP.export(_name_odpp,,';',,,
      'KOD',,1,,
      'NAZ',,2,,
      'ODPG','KOD',3,
      ) &
   ODP.export(_name_odp,,';',,,
      'KOD',,1,,
      'NAZ',,2,,
      'K',,3,,
      'ODPG','KOD',4,,
      'ODPP','KOD',5,,
      'NB',,6,,
      'WM3',,7,' .2',
      'PODZ',,8,,
      'BIOD',,9,
   );

   {? _ret
      || FUN.info('Dane pomyślnie zapisano do plików: %1, %2, %3'@[_name_odpg,_name_odpp,_name_odp])
      || FUN.emsg('Wystąpił błąd podczas zapisu danych do plików.'@)
   ?};

   ODP.cntx_pop();
   ODPP.cntx_pop();
   ODPG.cntx_pop()
?};
''


\kpo_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: Karta przekazania odpadów KPO - Zakończ rejestrację
::       [_a] - 1-automatyczna akceptacja 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
_autoakc:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? KPO.STATUS<>'N'
|| {? VAR.GRUPA='T'
   || KOMM.add('Karta %1 jest już zakończona.'@[KPO.SYM])
   || FUN.info('Wskazana karta jest już zakończona.'@)
   ?}
|? VAR.GRUPA='T' | FUN.ask('Zakończyć rejestrację karty przekazania odpadów?'@)
|| KPO.STATUS:='Z';
   {? _autoakc || KPO.put(1) ?};
   _wyn:=1
?};
{? _wyn & _autoakc || exec('kpo_akceptuj','odpady',1); KPO.get() ?};
_wyn


\kpo_zakoncz_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: Karta przekazania odpadów KPO - Zakończ rejestrację w oknie redakcji
::----------------------------------------------------------------------------------------------------------------------
_chk:=exec('chk_kpo','odpady',0);
_mp:=params_get().mp;
_autoakc:=exec('autoAkc','#b__box',_mp,100280,'LUO_KPO_EAKP');
{? _chk<>''
|| 'edit:'+_chk
|| {? exec('kpo_zakoncz','odpady',_autoakc)
   || 'key:F2'
   || ''
   ?}
?}


\kpo_zakoncz_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: Karta przekazania odpadów KPO - Zakończ w oknie wertowania
::----------------------------------------------------------------------------------------------------------------------
KPO.cntx_psh();
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUO_KPO_DRKP';
_params.UIDREF:=KPO.uidref();
_params.AKCJA:='Zakończ';
_params.GRUPA:=VAR.GRUPA;
exec('mp_run','#b__box',_params);
KPO.cntx_pop();
~~


\luo_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [19.42]
:: OPIS: Sprawdzenie, czy użytkownik ma dostęp do dowolnej czynności obszaru LUO_KPO - Odpady
::   WY:  1 - ma dostep / 0 - nie ma dostępu
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('chk_role','#b__box',OPERATOR.USER,'LUO_KPO_DRKP')
   | exec('chk_role','#b__box',OPERATOR.USER,'LUO_KPO_EAKP')
   | exec('chk_role','#b__box',OPERATOR.USER,'LUO_KPO_PGPO')
   | exec('chk_role','#b__box',OPERATOR.USER,'LUO_KPO_PKPO')
   | exec('chk_role','#b__box',OPERATOR.USER,'LUO_KPO_PODP');
_wyn


\chk_odpg_bdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza pozycję słownika ODPG z bazą BDO, jeżeli jest zapis w BDO, to stempluje ODPG.BDO_ID
::----------------------------------------------------------------------------------------------------------------------
_obj:=exec('WasteCode_chk','bdo_fun',ODPG.KOD);
{? type_of(_obj)>100
|| _description:=_obj.description;
   {? ODPG.NAZ<>_description
   || {? FUN.ask('Nazwa odpadu w bazie BDO jest inna niż w ERP\n(%1).\nCzy nadpisać?'@[_description])
      || ODPG.NAZ:=_description
      ?}
   ?};
   ODPG.BDO_ID:=_obj.wasteCodeId;
   ODPG.put()
?};
~~


\chk_odpp_bdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza pozycję słownika ODPP z bazą BDO, jeżeli jest zapis w BDO, to stempluje ODPP.BDO_ID
::----------------------------------------------------------------------------------------------------------------------
_obj:=exec('WasteCode_chk','bdo_fun','%1 %2'[ODPP.ODPG().KOD,ODPP.KOD]);
{? type_of(_obj)>100
|| _description:=_obj.description;
   {? ODPP.NAZ<>_description
   || {? FUN.ask('Nazwa odpadu w bazie BDO jest inna niż w ERP\n(%1).\nCzy nadpisać?'@[_description])
      || ODPP.NAZ:=_description
      ?}
   ?};
   ODPP.BDO_ID:=_obj.wasteCodeId;
   ODPP.put()
?};
~~


\chk_odp_bdo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza pozycję słownika ODP z bazą BDO, jeżeli jest zapis w BDO, to stempluje ODP.BDO_ID
::----------------------------------------------------------------------------------------------------------------------
_obj:=exec('WasteCode_chk','bdo_fun',exec('wasteCode','bdo_fun',ODP.ref()));
{? type_of(_obj)>100
|| _description:=_obj.description;
   {? ODP.NAZ<>_description
   || {? FUN.ask('Nazwa odpadu w bazie BDO jest inna niż w ERP\n(%1).\nCzy nadpisać?'@[_description])
      || ODP.NAZ:=_description
      ?}
   ?};
   ODP.BDO_ID:=_obj.wasteCodeId;
   ODP.put()
?};
~~


\odpr_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Import słownika ODPR (procesy przetwarzania odpadów) z systemu BDO (z poniższej struktury danych)
::[
::  {
::    "wasteProcessId": 0,
::    "name": "string",
::    "codeName": "string",
::    "dateCreated": "2019-11-20T14:23:33.544Z",
::    "parentId": 0
::  }
::]
::----------------------------------------------------------------------------------------------------------------------
ODPR.cntx_psh();
ODPR.index('KOD');
_obj:=exec('WasteProcess','bdo_api');
{? type_of(_obj)>100
|| {? _obj.STATUS=200
   || _tab:=json_parse(_obj.DATA);
      {! _it:=1 .. obj_len(_tab)
      |! ODPR.prefix(_tab[_it].codeName,);
         {? ODPR.first()
         || ODPR.NAZ:=_tab[_it].name;
            ODPR.BDO_ID:=_tab[_it].wasteProcessId;
            ODPR.put()
         || ODPR.KOD:=_tab[_it].codeName;
            ODPR.NAZ:=_tab[_it].name;
            ODPR.BDO_ID:=_tab[_it].wasteProcessId;
            ODPR.add()
         ?}
      !}
   ?}
?};
ODPR.cntx_pop();
~~


\odpr_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Selekcja słwonika ODPR (procesy przetwarzania odpadów)
::----------------------------------------------------------------------------------------------------------------------
ODPR.cntx_psh();
ODPR.index('KOD');
ODPR.prefix();
ODPR.win_sel('WER');
ODPR.select();
ODPR.cntx_pop();
~~


\kpo_stat_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Import słownika KPO_STAT (statusy kart) z systemu BDO (z poniższej struktury danych)
::[
::  {
::    "cardStatusId": 0,
::    "name": "string",
::    "codeName": "string"
::  }
::]
::----------------------------------------------------------------------------------------------------------------------
KPO_STAT.cntx_psh();
KPO_STAT.index('KOD');
_obj:=exec('CardStatus','bdo_api');
{? type_of(_obj)>100
|| {? _obj.STATUS=200
   || _tab:=json_parse(_obj.DATA);
      {! _it:=1 .. obj_len(_tab)
      |! KPO_STAT.prefix(_tab[_it].CodeName,);
         {? KPO_STAT.first()
         || KPO_STAT.NAZ:=_tab[_it].Name;
            KPO_STAT.BDO_ID:=_tab[_it].CardStatusId;
            KPO_STAT.put()
         || KPO_STAT.KOD:=_tab[_it].CodeName;
            KPO_STAT.NAZ:=_tab[_it].Name;
            KPO_STAT.BDO_ID:=_tab[_it].CardStatusId;
            KPO_STAT.add()
         ?}
      !}
   ?}
?};
KPO_STAT.cntx_pop();
~~


\kpo_stat_planned
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu PLANNED
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','PLANNED')


\kpo_stat_approved
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu PLANNED
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','APPROVED')


\kpo_stat_confirmation_generated
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu CONFIRMATION_GENERATED
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','CONFIRMATION_GENERATED')


\kpo_stat_withdrawn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu WITHDRAWN
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','WITHDRAWN')


\kpo_stat_transport_confirmation
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu TRANSPORT_CONFIRMATION
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','TRANSPORT_CONFIRMATION')


\kpo_stat_rejected
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu REJECTED
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','REJECTED')


\kpo_stat_receive_confirmation
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu RECEIVE_CONFIRMATION
::----------------------------------------------------------------------------------------------------------------------
exec('kpo_stat','odpady','RECEIVE_CONFIRMATION')


\kpo_stat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zwraca ref() statusu określonego w parametrze _a
::   WE: _a - kod statusu karty
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;

_result:=null();

KPO_STAT.cntx_psh();
KPO_STAT.index('KOD');
KPO_STAT.prefix(_kod,);
{? KPO_STAT.first()
|| _result:=KPO_STAT.ref()
|| _choice:=FUN.choice(
      'Brak zapisu %1 w słowniku statusów kart BDO.\n'
      'Dalsza praca nie jest możliwa, najpierw należy zaimportować słownik.'@[_kod],,
      'Importuj'@
   );
   {? _choice=1
   || {? __BDO_TOKEN=''
      || FUN.info('Brak autoryzacji w serwisie BDO — nie można zaimportować słownika.'@)
      || exec('kpo_stat_import','odpady');
         {? KPO_STAT.first()
         || _result:=KPO_STAT.ref()
         ?}
      ?}
   ?}
?};
KPO_STAT.cntx_pop();

_result


\kpo_bdo_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Importuje KPO z rejestru BDO, nie nadpisuje kart, które już są w ERP - funkcja wołana z okna KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

:: Do debugowania przydatne
::{? FUN.ask('DEBUG:\n'+'Czy przed importem skasować dane?'@) || KPOZ.erase(); KPOT.erase(); KPO.erase() ?};

:: Import dla podmiotu i miejsca prowadzenia działalności wybranych w kontekście pracy
_tab:=tab_tmp(
   ,'TYPE','STRING[4]','Typ'@
   ,'ROLE','STRING[8]','Rola'@
   ,'DT_FROM','DATE','Od daty'@
   ,'DT_TO','DATE','Do daty'@
);
_red:=_tab.mk_edit('Import kart przekazania odpadów'@,,'kpoimport');
_tab.win_ewin(_red,VAR,'KPO_KP');
_tab.win_esep(_red,'Parametry importu'@);
_tab.efld_opt(_red,'editable=grayed',VAR,'POD');
_tab.efld_opt(_red,'editable=grayed',VAR,'MPD');
_tab.efld_opt(_red,'mark=0',VAR,'POD');
_tab.efld_opt(_red,'mark=0',VAR,'MPD');
_tab.win_efld(_red,,'TYPE',,,,,,,,,'radio-buttons','left_label=1',
   'Karty przekazania odpadów'@,"'Kpo'",'Karty przekazania odpadów komunalnych'@,"'Kpok'"
);
_tab.win_efld(_red,,'ROLE',,,,,,,,,'radio-buttons','left_label=1',
   'Przekazujący'@,"'Sender'",'Transportujący'@,"'Carrier'",'Przejmujący'@,"'Receiver'"
);
_tab.win_efld(_red,,'DT_FROM');
_tab.win_efld(_red,,'DT_TO');
exec('ok_esc','#window',_tab,_red);

_valid:="
   _tab:=cur_tab(1,1);
   {? date(ST.AR,ST.AM,1)<>date(_tab.DT_FROM~1,_tab.DT_FROM~2,1)
   || FUN.emsg('Datę początkową neleży podać z bieżącego okresu.'@);
      'DT_FROM'
   |? date(ST.AR,ST.AM,1)<>date(_tab.DT_TO~1,_tab.DT_TO~2,1)
   || FUN.emsg('Datę końcową neleży podać z bieżącego okresu.'@);
      'DT_TO'
   |? _tab.DT_FROM>_tab.DT_TO
   || FUN.emsg('Data końcowa nie może być wcześniejsza od początkowej.'@);
      'DT_TO'
   || 1
   ?}
";
_tab.blank();
_tab.DT_FROM:=date(ST.AR,ST.AM,1);
_tab.DT_TO:=date(ST.AR,ST.AM,0);
VAR.POD:=_env.KH;
VAR.MPD:=_env.KH_ODB;
_tab.win_edit(_red);
{? _tab.edit(_valid)
|| _type:=_tab.TYPE;
   _role:=_tab.ROLE;
   _date_from:=_tab.DT_FROM;
   _date_to:=_tab.DT_TO;
   KOMM.init(250,,'Import kart przekazania odpadów'@);
   _count:=exec('kpo_bdo_import_core','odpady',_date_from,_date_to,_type,_role,1);
   {? _count>0 || KOMM.add('Liczba zaimportowanych kart: %1'@[$_count]) ?};
   KOMM.select()
?};
~~


\kpo_bdo_import_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Importuje KPO z rejestru BDO, nie nadpisuje kart, które są już w ERP.
::       Funkcja do wywołania w zadaniu serwisowym (Merit) lub alercie (Xpertis)
::   WE: [_a] - kod oddziału - domyślny 'c'
::       [_b] - rok - domyślny date()~1
::       [_c] - miesiąc - domyślny time()~2
::       [_d] - kontrahent (podmiot - domyślny null())
::       [_e] - odbiorca kontrahenta (miejsce prowadzenia działalności - domyślny null())
::       [_f] - typ kart: ['Kpo'], 'Kpok'
::       [_g] - rola: ['Sender'], 'Carrier', 'Receiver'
::   WY: liczba zaimportowanych kart (-1: wystąpił błąd)
::----------------------------------------------------------------------------------------------------------------------
_oddz:={? var_pres('_a')=type_of('') || _a || 'c' ?};
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};
_miesiac:={? var_pres('_c')=type_of(0) || _c || date()~2 ?};
_kh:={? var_pres('_d')=type_of(null()) || _d || null() ?};
_kh_odb:={? var_pres('_e')=type_of(null()) || _e || null() ?};
_type:={? var_pres('_f')=type_of('') || _f || 'Kpo' ?};
_role:={? var_pres('_g')=type_of('') || _g || 'Sender' ?};

KOMM.init(250,,'Import kart przekazania odpadów'@);

:: Powołanie środowiska - ustala podmiot i MPD, pobiera token dostępowy
_env:=exec('env_create','odpady',_kh,_kh_odb);
params_set('env',_env);

{? __BDO_TOKEN<>''
||
:: Ustawienie parametrów sesji - oddział i rok
   __PARSES.setVal('OddzialLogProd',_oddz);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=_rok;
   _args.AM:=_miesiac;
   __PARSES.setVal('OkresRok',_args);
   obj_del(_args);

   _count:=exec('kpo_bdo_import_core','odpady',_rok,_miesiac,_type,_role,0)
|| _count:=-1
?};

KOMM.select();
_count


\kpo_bdo_import_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Importuje KPO z rejestru BDO, nie nadpisuje kart, które już są w ERP
::       Właściwy import wykorzystywany w funkcji importu z okna KPO oraz w funkcjach importu w tle (zadania serwisowe)
::       Do działania wymagane przekazanie środowiska params_get().env zawierającego m.in. Podmiot i MPD
::          utworzonego za pomocą formuły exec('env_create','odpady')
::       Wszelkie komunikaty dodane są do KOMM-a, którego trzeba zainicjować i wyświetlić na zewnąrz tej funkcji
::   WE: [_a] - data początkowa [DATE] / rok [NUMBER] - domyślnie date()~1
::       [_b] - data końcowa [DATE] / miesiąc [NUMBER] - domyślnie date()~2
::       [_c] - typ kart: ['Kpo'], 'Kpok'
::       [_d] - rola: ['Sender'], 'Carrier', 'Receiver'
::       [_e] - czy wyświetlać progres [1]/0
::   WY: liczba zaimportowanych kart
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_result:=0;

{? var_pres('_a')=type_of(date()) & var_pres('_b')=type_of(date())
|| _date_from:=_a;
   _date_to:=_b;
   _rok:=_date_from~1;
   _miesiac:=_date_from~2;
   {? _rok<>_date_to~1 | _miesiac<>_date_to~2
   || FUN.emsg('Data początkowa i końcowa importu muszą być z tego samego okresu.'@);
      return(_result)
   |? _date_to<_date_from
   || FUN.emsg('Data końcowa nie może być wcześniejsza od początkowej.'@);
      return(_result)
   ?}
|? var_pres('_a')=type_of(0) & var_pres('_b')=type_of(0)
|| _rok:=_a;
   _miesiac:=_b;
   _date_from:=date(_rok,_miesiac,1);
   _date_to:=date(_rok,_miesiac,0)
|| FUN.emsg('Błędnie podane argumenty %1 i %2 funkcji.'@['_a','_b']);
   return(_result)
?};
_type:={? var_pres('_c')=type_of('') || _c || 'Kpo' ?};
_role:={? var_pres('_d')=type_of('') || _d || 'Sender' ?};
_progress:={? var_pres('_e')=type_of(0) || _e || 1 ?};

_page:=1;

:: Bufor do manipulacji danymi podczas uruchamiania czynności
_KPO:=exec('obj_new','#buf','KPO');

{!
|? _transportDateRange:='true';
   _transportDateFrom:=iso_datetime_value(_date_from,time(0,0,0));
   _transportDateTo:=iso_datetime_value(_date_to,time(23,59,59));
   _obj:=exec('%1_%2_search'[_type,-_role],'bdo_api',
      _page,
      50,
      _transportDateRange,
      _transportDateFrom,
      _transportDateTo
   );

   _hasNextPage:=0;

   {? _obj.STATUS=200
   || _response:=json_parse(_obj.DATA);
      _hasNextPage:=_response.hasNextPage;
      _totalPagesNumber:=_response.totalPagesNumber;
      _items:=_response.items;
      _size:=obj_len(_items);
      {? type_of(_items)>100 & _size>0
      || {? _progress
         || FUN.prg_start(
               _size,
               'Importowanie %1 kart przekazania odpadów z BDO (część %2 z %3).'@[$_size,$_page,$_totalPagesNumber]
            )
         ?};
         {! _it:=1 .. _size
         |! _kpoId:={? _type='Kpo' || _items[_it].kpoId || _items[_it].kpokId ?};
            _kpo:=exec('FindInSet','#table','KPO','BDO_ID',_kpoId,,,1);
            {? _kpo=null()
            ||
::       Część danych bezpośrednio z pól obiektu _item
::  "items": [
::    {
::      "plannedTransportTime": "2019-11-26T16:40:27.953Z",
::      "realTransportTime": "2019-11-26T16:40:27.953Z",
::      "wasteCode": "string",
::      "wasteCodeDescription": "string",
::      "vehicleRegNumber": "string",
::      "cardStatus": "string",
::      "cardNumber": "string",
::      "cardStatusCodeName": "string",
::      "senderName": "string",
::      "receiverName": "string",
::      "kpoId": "string",
::      "kpoLastModifiedAt": "2019-11-26T16:40:27.953Z",
::      "senderFirstNameAndLastName": "string",
::      "receiverFirstAndLastName": "string",
::      "revisionNumber": 0,
::      "cardRejectionTime": "2019-11-26T16:40:27.953Z",
::      "wasteCodeExtended": true,
::      "wasteCodeExtendedDescription": "string",
::      "hazardousWasteReclassification": true,
::      "hazardousWasteReclassificationDescription": "string"
::    }
::  ]
               _cardStatusCodeName:=_items[_it].cardStatusCodeName;
::       Reszty danych trzeba poszukać przez zapytanie o konkretną kartę w konkretnym statusie przetwarzania
:: Przykładowy response (tutaj dla planowanej KPO)
::{
::  "kpoId": "string",
::  "year": 0,
::  "cardNumber": "string",
::  "cardStatusId": 0,
::  "cardStatus": "string",
::  "senderCompanyId": "string",
::  "senderEupId": "string",
::  "carrierCompanyId": "string",
::  "receiverCompanyId": "string",
::  "receiverEupId": "string",
::  "wasteCodeId": 0,
::  "vehicleRegNumber": "string",
::  "wasteMass": 0,
::  "plannedTransportTime": "2019-11-26T18:54:33.057Z",
::  "receiveConfirmationTime": "2021-08-11T09:41:06.974Z",
::  "wasteProcessId": 0,
::  "certificateNumberAndBoxNumbers": "string",
::  "cardStatusCodeName": "string",
::  "additionalInfo": "string",
::  "wasteCodeExtended": true,
::  "wasteCodeExtendedDescription": "string",
::  "hazardousWasteReclassification": true,
::  "hazardousWasteReclassificationDescription": "string"
::}
               _can_continue:=1;
               _obj1:=exec('%1_%2_card'[_type,-gsub(_cardStatusCodeName,'_','')],'bdo_api',_kpoId,_role);
               {? _obj1.STATUS=200
               || _card:=json_parse(_obj1.DATA);
                  _cardNumber:={? var_pres('cardNumber',_card)=type_of('') || _card.cardNumber || '' ?};
                  _senderCompanyId:=_card.senderCompanyId;
                  _senderName:={? var_pres('senderName',_items[_it])=type_of('') || _items[_it].senderName || '' ?};
                  _senderEupId:=_card.senderEupId;
                  _carrierCompanyId:=_card.carrierCompanyId;
                  _carrierName:={? var_pres('carrierName',_items[_it])=type_of('') || _items[_it].carrierName || '' ?};
                  _receiverCompanyId:=_card.receiverCompanyId;
                  _receiverName:={? var_pres('receiverName',_items[_it])=type_of('') || _items[_it].receiverName || '' ?};
                  _receiverEupId:=_card.receiverEupId;
                  _wasteCodeId:=_card.wasteCodeId;
                  _vehicleRegNumber:=_card.vehicleRegNumber;
                  _wasteMass:=_card.wasteMass;
                  _cardSubtype:={? var_pres('cardSubtype',_card)=type_of('') || _card.cardSubtype || '' ?};
                  _plannedTransportTime:=_card.plannedTransportTime;
                  _receiveConfirmationTime:=
                     {? var_pres('receiveConfirmationTime',_card)=type_of('')
                     || _card.receiveConfirmationTime
                     || ''
                     ?};
                  _wasteProcessId:={? var_pres('wasteProcessId',_card)=type_of(0) || _card.wasteProcessId || 0 ?};
                  _communeId:={? var_pres('communeId',_card)=type_of('') || _card.communeId || '' ?};
                  _communeArea:={? var_pres('communeArea',_card)=type_of('') || _card.communeArea || '' ?};
                  _remarks:={? var_pres('remarks',_card)=type_of('') || _card.remarks || '' ?};
                  _wasteCodeExtended:={? var_pres('wasteCodeExtended',_card)=type_of(0) || _card.wasteCodeExtended || 0 ?};
                  _wasteCodeExtendedDescription:={? var_pres('wasteCodeExtendedDescription',_card)=type_of('') || _card.wasteCodeExtendedDescription || '' ?};
                  obj_del(_card)
               || _cardNumber:={? var_pres('cardNumber',_items[_it])=type_of('') || _items[_it].cardNumber || '' ?};
                  KOMM.error('Nie pobrano danych karty: %1.'@[_cardNumber]+' '+_obj1.MESSAGE,0);
::                  KOMM.info('%1|%2|%3'[_type,_role,_cardStatusCodeName],0);
                  _can_continue:=0
               ?};

               {? _can_continue>0
               || _obj2:=exec('%1_printingpage%2'[_type,{? _cardSubtype='' || '' || '_'+(-_cardSubtype) ?}],'bdo_api',
                     _kpoId
                  );
                  {? _obj2.STATUS=200
                  || _card:=json_parse(_obj2.DATA);
                     _senderEupNumber:=_card.senderEupNumber;
                     _receiverEupNumber:=_card.receiverEupNumber;
                     _isWasteGenerating:={? var_pres('isWasteGenerating',_card)=type_of(0) || _card.isWasteGenerating || 0 ?};
                     _wasteGeneratedTerytPk:={? var_pres('wasteGeneratedTerytPk',_card)=type_of('') || _card.wasteGeneratedTerytPk || '' ?};
                     _wasteGeneratingAdditionalInfo:={? var_pres('wasteGeneratingAdditionalInfo',_card)=type_of('') || _card.wasteGeneratingAdditionalInfo || '' ?};
                     obj_del(_card)
                  || _cardNumber:={? var_pres('cardNumber',_items[_it])=type_of('') || _items[_it].cardNumber || '' ?};
                     KOMM.error('Nie pobrano danych karty: %1.'@[_cardNumber]+' '+_obj2.MESSAGE,0);
                     _can_continue:=0
                  ?}
               ?};

::             Mamy wszystko
               {? _can_continue>0
               ||
::                Odfiltrowanie kart, których nie importujemy wg statusu
                  {? exec('get','#params',100337)*_cardStatusCodeName>0
                  || KOMM.msg(
                        'Karta \'%1\': o statusie \'%2\' nie jest importowana.'@
                        [{? _cardNumber='' || 'Planowana' || _cardNumber ?},_cardStatusCodeName],
                        0
                     );
                     _can_continue:=0
                  ?};

::                Odnalezienie ref-ów, o ile dostępne w ERP
                  _senderCompany:=exec('KH_get_ref','bdo_fun',_senderCompanyId);
                  {? _senderCompany=null()
                  || KOMM.msg(
                        'Karta \'%1\': brak kontrahenta \'%2\' powiązanego z bazą BDO.'@
                        [{? _cardNumber='' || 'Planowana' || _cardNumber ?},_senderName],
                        0
                     );
                     _can_continue:=0
                  ?};
                  _senderEup:=exec('KH_ODB_get_ref','bdo_fun',_senderEupId);
::               {? _senderEup=null()
::               || KOMM.msg(
::                     'Karta \'%1\': brak odbiorcy kontrahenta %2 powiązanego z bazą BDO.'@
::                     [_cardNumber,_senderEupId],
::                     0
::                  );
::                  _can_continue:=0
::               ?};
                  _receiverCompany:=exec('KH_get_ref','bdo_fun',_receiverCompanyId);
                  {? _receiverCompany=null()
                  || KOMM.msg(
                        'Karta \'%1\': brak kontrahenta \'%2\' powiązanego z bazą BDO.'@
                        [{? _cardNumber='' || 'Planowana' || _cardNumber ?},_receiverName],
                        0
                     );
                     _can_continue:=0
                  ?};
                  _receiverEup:=exec('KH_ODB_get_ref','bdo_fun',_receiverEupId);
::               {? _receiverEup=null()
::               || KOMM.msg(
::                     'Karta \'%1\': brak odbiorcy kontrahenta %2 powiązanego z bazą BDO.'@
::                     [_cardNumber,_receiverEupId],
::                     0
::                  );
::                  _can_continue:=0
::               ?};
                  _carrierCompany:=exec('KH_get_ref','bdo_fun',_carrierCompanyId);
                  {? _carrierCompany=null()
                  || KOMM.msg(
                        'Karta \'%1\': brak kontrahenta \'%2\' powiązanego z bazą BDO.'@
                        [{? _cardNumber='' || 'Planowana' || _cardNumber ?},_carrierName],
                        0
                     );
                     _can_continue:=0
                  ?};
                  {? type_of(_wasteCodeId)=type_of(0)
                  || _wasteCode:=exec('FindInSet','#table','ODP','BDO_ID',_wasteCodeId);
                     {? _wasteCode=null()
                     || KOMM.msg(
                           'Karta \'%1\': brak odpadu %2 (%3) powiązanego z bazą BDO.'@
                           [{? _cardNumber='' || 'Planowana' || _cardNumber ?},_items[_it].wasteCode,$_wasteCodeId],
                           0
                        );
                        _can_continue:=0
                     ?}
                  || _wasteCode:=null()
                  ?};
                  {? type_of(_wasteProcessId)=type_of(0) & _wasteProcessId<>0
                  || _wasteProcess:=exec('FindInSet','#table','ODPR','BDO_ID',_wasteProcessId);
                     {? _wasteProcess=null()
                     || exec('odpr_import','odpady');
                        _wasteProcess:=exec('FindInSet','#table','ODPR','BDO_ID',_wasteProcessId);
                        {? _wasteProcess=null()
                        || KOMM.msg(
                              'Karta \'%1\': brak procesu przetwarzania powiązanego z bazą BDO.'@
                              [{? _cardNumber='' || 'Planowana' || _cardNumber ?}],
                              0
                           );
                           _can_continue:=0
                        ?}
                     ?}
                  || _wasteProcess:=null()
                  ?};

::                Właściwe działanie - dodajemy kartę z przyległościami - przez czynność
                  {? _can_continue>0
                  || _KPO.bl_void();
                     _KPO.R:='P';
                     _KPO.RUTW:='Import';
                     _KPO.IL:=_wasteMass;
                     _KPO.KH:=_senderCompany;
                     _KPO.KH_ODB:=_senderEup;
                     _KPO.KH_MPD:=_senderEupNumber;
                     _KPO.KH_2:=_receiverCompany;
                     _KPO.KH_ODB_2:=_receiverEup;
                     _KPO.KH_2_MPD:=_receiverEupNumber;
                     _KPO.KH_3:=_carrierCompany;
                     _KPO.ODP:=_wasteCode;
                     {? _cardNumber<>'' || _KPO.SYM:=_cardNumber ?};
                     _KPO.ODPR:=_wasteProcess;
                     _KPO.KPO_STAT:=exec('kpo_stat','odpady',_cardStatusCodeName);
                     _KPO.TYP:=exec('typ_kpo%1'[{? _cardSubtype='' || '' || 'k_'+(-(3+_cardSubtype)) ?}],'odpady');
                     _KPO.KOD_G:=_communeId;
                     _KPO.OB_G:=_communeArea;
                     _KPO.NAZ_G:=exec('WyszukajGmine','teryt',_KPO.KOD_G);
                     _KPO.NRREJ:=_vehicleRegNumber;
                     _KPO.DTR:=iso_datetime_parse(_plannedTransportTime).date;
                     _KPO.GTR:=iso_datetime_parse(_plannedTransportTime).time;
                     _KPO.DREC:=iso_datetime_parse(_receiveConfirmationTime).date;
                     _KPO.GREC:=iso_datetime_parse(_receiveConfirmationTime).time;
                     _KPO.STATUS:='Z';
                     _KPO.REMARKS:=_remarks;
                     _KPO.BDO_ID:=_kpoId;
                     _KPO.EX:=_wasteCodeExtended;
                     _KPO.EX_DESC:=_wasteCodeExtendedDescription;
                     _KPO.WG:=_isWasteGenerating;
                     _KPO.WG_KOD_G:=_wasteGeneratedTerytPk;
                     _KPO.WG_NAZ_G:=exec('WyszukajGmine','teryt',_KPO.WG_KOD_G);
                     _KPO.WG_ADD:=_wasteGeneratingAdditionalInfo;

                     _args:=exec('mp_run_a','#b__box');
                     _args.ACT_UID:='LUO_KPO_DRKP';
                     _args.AKCJA:='Importuj';
                     _args.PROC_START:='T';
                     _args.CONTEXT:=obj_new('buffer','KPO'); _args.CONTEXT.buffer:=_KPO; _args.CONTEXT.KPO:=null();
                     exec('mp_run','#b__box',_args);

                     {? _args.CONTEXT.KPO<>null()
                     || KPO.cntx_psh();
                        KPO.prefix();
                        {? KPO.seek(_args.CONTEXT.KPO)
                        || {? KPO.SYM='' || exec('kpo_nr_nadaj','odpady') ?};
                           _obj1.log_update('|%1'[KPO.uidref()]);
                           _obj2.log_update('|%1'[KPO.uidref()]);
                           KOMM.info('Karta \'%1\' została zaimportowana.'@[KPO.SYM],0)
                        ?};
                        KPO.cntx_pop();
                        _result+=1
                     ?};

                     obj_del(_args)
                  ?}
               ?}
            ?};
            {? var_pres('_obj1')>100 || obj_del(_obj1) ?};
            {? var_pres('_obj2')>100 || obj_del(_obj2) ?};
            {? _progress || FUN.prg_next() ?}
         !};
         {? _progress || FUN.prg_stop() ?}
      || KOMM.msg('Brak danych do zaimportowania.'@,0)
      ?};
      obj_del(_response);
      {? var_pres('_items')>100 || obj_del(_items) ?}

   || KOMM.error('Nie pobrano listy kart.'@+'\n'+_obj.MESSAGE,0)
   ?};

   obj_del(_obj);
   _page+=1;
   _hasNextPage
!};
_result


\kpo_bdo_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę planowaną lub zatwierdzoną)
::       Kontekst wywołania - bieżący rekord KPO
::   WE: [_a] - czy zatwierdzić kartę [0]/1
::----------------------------------------------------------------------------------------------------------------------
_approve:={? var_pres('_a')=type_of(0) || _a || 0 ?};

:: Czy aktualizować kartę po zatwierdzeniu - konieczna ze względu na pobranie symbolu z portalu
_act_a:=1;

params_set(params_get());
_env:=params_get().env;

_selected:=(VAR.GRUPA='T');
_kpoId:=KPO.BDO_ID;

_ok:=1;

:: Sprawdzenie kodu odpadu, jeśli brak Id z BDO, to próba pobrania po cichu
{? KPO.ODP<>null()
|| ODP.cntx_psh();
   ODP.prefix();
   {? ODP.seek(KPO.ODP)
   || _wasteCodeId:=ODP.BDO_ID;
      {? _wasteCodeId=0
      || _obj0:=exec('WasteCode_chk','bdo_fun',exec('wasteCode','bdo_fun',ODP.ref()),0);
         {? type_of(_obj0)>100
         || ODP.BDO_ID:=_wasteCodeId:=_obj0.wasteCodeId;
            ODP.put()
         ?}
      ?};
      {? _wasteCodeId=0
      || KOMM.msg(
            'Karta \'%1\' — podano błędny kodu odpadu (%2), nie można wysłać do BDO.'@
            [KPO.SYM,ODP.KOD],
            ~_selected
         );
         _ok:=0
      ?}
   ?};
   ODP.cntx_pop()
|| KOMM.msg('Karta \'%1\' — nie podano kodu odpadu, nie można wysłać do BDO.'@[KPO.SYM],~_selected);
   _ok:=0
?};

:: Sprawdzenie akceptacji karty
{? _ok & KPO.STATUS<>'T'
|| KOMM.msg('Karta \'%1\' — nie została zaakceptowana, nie można wysłać do BDO.'@[KPO.SYM],~_selected);
   _ok:=0
?};

:: Sprawdzenie, czy jest już zapamiętany identyfikator BDO
{? _ok & _kpoId<>''
|| KOMM.msg('Karta \'%1\' została już wysłana do BDO.'@[KPO.SYM],~_selected);
   _ok:=0
?};

:: Sprawdzenie, czy karta jest planowana
{? _ok & KPO.KPO_STAT<>exec('kpo_stat_planned','odpady')
|| KOMM.msg('Karta \'%1\' o statusie innym niż planowana, nie można wysłać do BDO.'@[KPO.SYM],~_selected);
   _ok:=0
?};

:: Walidacja karty (jak przy redagowaniu - na wszelki wypadek)
{? _ok & KPO.DTR=date(0,0,0)
|| KOMM.msg('Karta \'%1\' — data transportu musi być określona, nie można wysłać do BDO.'@[KPO.SYM],~_selected);
   _ok:=0
?};
{? _ok & KPO.DTR<date() | KPO.DTR>date()+30
|| KOMM.msg(
      'Karta \'%1\' — należy wybrać datę transportu w zakresie 30 dni od daty bieżącej, nie można wysłać do BDO.'@
      [KPO.SYM],
      ~_selected
   );
   _ok:=0
?};

:: Sprawdzenie, czy karta dotyczy bieżącego kontekstu pracy - KH
{? _ok & KPO.KH<>_env.KH
|| KOMM.msg(
      'Karta \'%1\' dotyczy innego podmiotu (%2)\nniż ustawiony w kontekście pracy (%3).'@
      [KPO.SYM,KPO.KH().NRREJDBO,exec('FindAndGet','#table',KH,_env.KH,,"KH.NRREJDBO",'')],
      ~_selected
   );
   _ok:=0
?};

:: Sprawdzenie, czy karta dotyczy bieżącego kontekstu pracy - MPD
{? _ok & KPO.KH_MPD<>exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.NRMPDBDO",'')
|| KOMM.msg(
      'Karta \'%1\' dotyczy innego miejsca prowadzenia działalności (%2)\nniż ustawione w kontekście pracy (%3).'@
      [KPO.SYM,KPO.KH_MPD,exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.NRMPDBDO",'')],
      ~_selected
   );
   _ok:=0
?};

:: Sprawdzenie, czy MPD pasuje do KH_ODB
{? _ok & KPO.KH_ODB<>null() & KPO.KH_ODB().NRMPDBDO<>KPO.KH_MPD
|| KOMM.msg(
      'W karcie \'%1\' miejsce prowadzenia działalności jest niezgodne z danymi odbiorcy kontrahenta przekazującego odpad.'@
      [KPO.SYM],
      ~_selected
   );
   _ok:=0
?};

:: Sprawdzenie, czy karta dotyczy bieżącego kontekstu pracy - KH_ODB
:: WYŁĄCZONE: Spójność zapewnia poprzedni warunek
::{? _ok & KPO.KH_ODB<>null() & KPO.KH_ODB<>_env.KH_ODB
::|| KOMM.msg(
::      'Karta \'%1\' dotyczy innego miejsca prowadzenia działalności (%2)\nniż ustawione w kontekście pracy (%3).'@
::      [KPO.SYM,KPO.KH_ODB().NRMPDBDO,exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.NRMPDBDO",'')],
::      ~_selected
::   );
::   _ok:=0
::?};

:: Sprawdzenie transportującego, jeśli brak Id z BDO, to próba pobrania po cichu
{? _ok
|| {? KPO.KH_3=null()
   || _carrierCompanyId:=''
   || _carrierCompanyId:=exec('KH_get_id','bdo_fun',KPO.KH_3);
      {? _carrierCompanyId=''
      || exec('KH_put_id','bdo_fun',KPO.KH_3,0);
         _carrierCompanyId:=exec('KH_get_id','bdo_fun',KPO.KH_3)
      ?}
   ?};
   {? _carrierCompanyId=''
   || KOMM.msg(
         'Karta \'%1\' — należy uzupełnić dane kontrahenta transportującego odpad (Numer rejestrowy BDO).'@
         [KPO.SYM],
         ~_selected
      );
      _ok:=0
   ?}
?};

:: Sprawdzenie przejmującego, jeśli brak Id z BDO, to próba pobrania po cichu
{? _ok
|| {? KPO.KH_2=null()
   || _receiverCompanyId:=''
   || _receiverCompanyId:=exec('KH_get_id','bdo_fun',KPO.KH_2);
      {? _receiverCompanyId=''
      || exec('KH_put_id','bdo_fun',KPO.KH_2,0);
         _carrierCompanyId:=exec('KH_get_id','bdo_fun',KPO.KH_2)
      ?}
   ?};
   {? _receiverCompanyId=''
   || KOMM.msg(
         'Karta \'%1\' — należy uzupełnić dane kontrahenta przejmującego odpad (Numer rejestrowy BDO).'@
         [KPO.SYM],
         ~_selected
      );
      _ok:=0
   ?}
?};

:: Sprawdzenie miejsca prowadzenia działalności przejmującego odpad
{? _ok
|| _receiverEupId:='';
   {? _receiverEupId='' & KPO.KH_ODB_2<>null()
   || _receiverEupId:=exec('KH_ODB_get_id','bdo_fun',KPO.KH_ODB_2)
   ?};
   {? _receiverEupId='' & KPO.KH_2_MPD<>''
   || _receiverEupId:=exec('MPD_get_id','bdo_fun',_receiverCompanyId,KPO.KH_2_MPD)
   ?};
   {? _receiverEupId=''
   || KOMM.msg(
         'W karcie \'%1\' podano błędne miejsce prowadzenia działalności przejmującego odpad.'@
         [KPO.SYM],
         ~_selected
      );
      _ok:=0
   ?}
?};

:: Sprawdzenie środka transportu
{? _ok & KPO.NRREJ=''
|| KOMM.msg(
      'W karcie \'%1\' — nie podano środka transportu, nie można wysłać do BDO.'@
      [KPO.SYM],
      ~_selected
   );
   _ok:=0
?};

:: Wszystko OK - wysyłka
{? _ok
||
   _ask:={? _selected || 1 || FUN.ask('Czy wysłać kartę \'%1\' do bazy BDO?'@[KPO.SYM]) ?};
   {? _ask
   ||
::    W przypadku, gdy poprzednia próba wysłania karty skończyła się statusem 404 należy sprawdzić,
::    czy karta na portalu powstała - w takim przypadku wystarczy pobrać jej identyfikator
::    Podobnie traktowany jest kod 123 (mimo, że oficjalnie nie jest udokumentowany)
      {? KPO.HTTPSTAT=404 | KPO.HTTPSTAT=123
      || delay(,2500);
         _id:='';
         _send:=0;
         {? exec('kpo_bdo_find','odpady')
         || {? _selected
            || KOMM.msg(
                  'Jest już karta o tej samej charakterystyce co \'%1\' (odpad, pojazd, termin transportu).\n'
                  'Kartę należy obsłużyć pojedynczno.'@[KPO.SYM],
                  ~_selected
               )
            || _choice:=FUN.choice(
                  'Jest już karta o tej samej charakterystyce (odpad, pojazd, termin transportu) na portalu BDO.\n\n'
                  'Czy pobrać dane?'@,,
                  'Wyświetlić karty do wyboru'@,'Wysłać &bieżącą kartę'@
               );
               {? _choice=1
               || _id:=exec('kpo_bdo_select','odpady');
                  {? _id<>''
                  || KPO.BDO_ID:=_id;
                     KPO.HTTPSTAT:=200;
                     {? KPO.put()
                     || exec('kpo_bdo_act','odpady',1)
                     ?}
                  ?}
               |? _choice=2
               || _send:=1
               ?}
            ?}
         || _send:=1
         ?}
      || _send:=1
      ?};

::    Właściwe wysłanie karty do BDO
      {? _send>0
      || _communeId:=KPO.KOD_G;
         _communeArea:=KPO.OB_G;
         _vehicleRegNumber:=KPO.NRREJ;
         _wasteMass:=KPO.IL;
         _plannedTransportTime:=iso_datetime_value(KPO.DTR,KPO.GTR);
         _wasteProcessId:={? KPO.ODPR=null() || ~~ || KPO.ODPR().BDO_ID ?};
         _wasteCodeExtended:={? KPO.EX || 'true' || 'false' ?};
         _wasteCodeExtendedDescription:=KPO.EX_DESC;
         _isWasteGenerating:={? KPO.WG || 'true' || 'false' ?};
         _wasteGeneratedTerytPk:=KPO.WG_KOD_G;
         _wasteGeneratingAdditionalInfo:=KPO.WG_ADD;
         _additionalInfo:=KPO.uidref();

         _can_continue:=0;

::======================================================================================================================
         {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_create_plannedcard','bdo_api',
               _carrierCompanyId,
               _receiverCompanyId,
               _receiverEupId,
               _wasteCodeId,
               _vehicleRegNumber,
               _wasteMass,
               _plannedTransportTime,
               _wasteProcessId,
               _additionalInfo,
               _wasteCodeExtended,
               _wasteCodeExtendedDescription,
               _isWasteGenerating,
               _wasteGeneratedTerytPk,
               _wasteGeneratingAdditionalInfo
            );
::          Utrwalenie identyfikatora
            {? _obj.STATUS=201
            || _kpoId:=json_parse(_obj.DATA).kpoId;
               KPO.HTTPSTAT:=_obj.STATUS;
               KPO.BDO_ID:=_kpoId;
               {? KPO.put()
               || _can_continue:=1
               ?};
               _obj.log_update('%1|%2'[_kpoId,KPO.uidref()])
            || KPO.HTTPSTAT:=_obj.STATUS;
               KPO.put();
               KOMM.error(_obj.MESSAGE,~_selected)
            ?}

::======================================================================================================================
         |? KPO.TYP=exec('typ_kpok_rec','odpady')
         || _obj:=exec('Kpok_create_plannedreceivecard','bdo_api',
               _carrierCompanyId,
               _receiverCompanyId,
               _receiverEupId,
               _communeId,
               _communeArea,
               _wasteCodeId,
               _vehicleRegNumber,
               _plannedTransportTime,
               _additionalInfo,
               _wasteCodeExtended,
               _wasteCodeExtendedDescription
            );
::          Utrwalenie identyfikatora
            {? _obj.STATUS=201
            || _kpoId:=json_parse(_obj.DATA).kpokId;
               KPO.HTTPSTAT:=_obj.STATUS;
               KPO.BDO_ID:=_kpoId;
               {? KPO.put()
               || _can_continue:=1
               ?};
               _obj.log_update('%1|%2'[_kpoId,KPO.uidref()])
            || KPO.HTTPSTAT:=_obj.STATUS;
               KPO.put();
               KOMM.error(_obj.MESSAGE,~_selected)
            ?}

::======================================================================================================================
         |? KPO.TYP=exec('typ_kpok_tra','odpady')
         || _obj:=exec('Kpok_create_plannedtransfercard','bdo_api',
               _carrierCompanyId,
               _receiverCompanyId,
               _receiverEupId,
               _communeId,
               _communeArea,
               _wasteCodeId,
               _vehicleRegNumber,
               _wasteMass,
               _plannedTransportTime,
               _additionalInfo,
               _wasteCodeExtended,
               _wasteCodeExtendedDescription
            );
::          Utrwalenie identyfikatora
            {? _obj.STATUS=201
            || _kpoId:=json_parse(_obj.DATA).kpokId;
               KPO.HTTPSTAT:=_obj.STATUS;
               KPO.BDO_ID:=_kpoId;
               {? KPO.put()
               || _can_continue:=1
               ?};
               _obj.log_update('%1|%2'[_kpoId,KPO.uidref()])
            || KPO.HTTPSTAT:=_obj.STATUS;
               KPO.put();
               KOMM.error(_obj.MESSAGE,~_selected)
            ?}

::======================================================================================================================
         || KOMM.msg('Nie rozpoznano typu karty \'%1\' (%2).'@[KPO.SYM,KPO.TYP],~_selected)
         ?};

         {? _approve>0 & _can_continue>0
         || {? KPO.TYP=exec('typ_kpo','odpady')
            || _obj1:=exec('Kpo_approve','bdo_api',_kpoId);
               {? _obj1.STATUS=204
               || KPO.KPO_STAT:=exec('kpo_stat_approved','odpady');
                  {? KPO.put()
                  || _obj1.log_update('|%1'[KPO.uidref()]);
                     {? _act_a
                     || exec('kpo_bdo_act','odpady',0)
                     ?}
                  ?}
               || KOMM.error(_obj1.MESSAGE,~_selected)
               ?}
            || _obj1:=exec('Kpok_approve_card','bdo_api',_kpoId);
               {? _obj1.STATUS=200
               || KPO.KPO_STAT:=exec('kpo_stat_approved','odpady');
                  {? KPO.put()
                  || _obj1.log_update('|%1'[KPO.uidref()]);
                     {? _act_a
                     || exec('kpo_bdo_act','odpady',0)
                     ?}
                  ?}
               || KOMM.error(_obj1.MESSAGE,~_selected)
               ?}
            ?}
         ?}
      ?}
   ?}
?};
~~


\kpo_bdo_send_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę planowaną) - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wysłać zaznaczone karty do bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Wysyłka kart do bazy BDO'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_send_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę planowaną) - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_sapp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę zatwierdzoną)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('kpo_bdo_send','odpady',1);
~~


\kpo_bdo_sapp_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę zatwierdzoną) - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wysłać zaznaczone karty do bazy BDO i zatwierdzić?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Wysyłka i zatwierdzanie kart do bazy BDO'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_sapp_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Wysyła KPO do rejestru BDO (jako kartę zatwierdzoną) - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Modyfikuje KPO do rejestru BDO (jako kartę planowaną)
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

KPOT.cntx_psh();
KPOZ.cntx_psh();

:: Sprawdzenie, czy karta jest planowana
{? KPO.KPO_STAT<>exec('kpo_stat_planned','odpady')
|| FUN.info(
      'Karta \'%1\' o statusie innym niż planowana, nie można modyfikować w BDO.'@[KPO.SYM]
   )

||
:: identyfikator karty
   _kpoId:=KPO.BDO_ID;
:: transportujący
   KPOT.index('KPO');
   KPOT.prefix(KPO.ref());
   {? KPOT.first()
   || _carrierCompanyId:=exec('KH_get_id','bdo_fun',KPOT.KH)
   || _carrierCompanyId:=0
   ?};
:: odbierający
   _receiverCompanyId:=exec('KH_get_id','bdo_fun',KPO.KH_2);
:: miejsce prowadzenia działalności odbierającego
   _receiverEupId:=exec('KH_ODB_get_id','bdo_fun',KPO.KH_ODB_2);
:: Odpad
   KPOZ.index('KPO');
   KPOZ.prefix(KPO.ref());
   {? KPOZ.first()
   || _wasteCodeId:=KPO.ODP().BDO_ID;
      _vehicleRegNumber:=KPOZ.NRREJ;
      _wasteMass:=KPOZ.IL;
      _plannedTransportTime:='2019-11-26T18:04:34.097Z';
      _wasteProcessId:=KPO.ODPR().BDO_ID;
      _wasteCodeExtended:={? KPO.EX || 'true' || 'false' ?};
      _wasteCodeExtendedDescription:=KPO.EX_DESC;
      _isWasteGenerating:={? KPO.WG || 'true' || 'false' ?};
      _wasteGeneratedTerytPk:=KPO.WG_KOD_G;
      _wasteGeneratingAdditionalInfo:=KPO.WG_ADD;

      _obj:=exec('Kpo_update_plannedcard','bdo_api',
         _kpoId,
         _carrierCompanyId,
         _receiverCompanyId,
         _receiverEupId,
         _wasteCodeId,
         _vehicleRegNumber,
         _wasteMass,
         _plannedTransportTime,
         _wasteProcessId,
         _wasteCodeExtended,
         _wasteCodeExtendedDescription,
         _isWasteGenerating,
         _wasteGeneratedTerytPk,
         _wasteGeneratingAdditionalInfo
      );
::    Do testów - wyświetlenie wyniku w tymczasowym widoku
::      _tab:=json_tparse(_obj.DATA,50,50);
::      _wer:=_tab.mk_sel('Karta przekazania odpadów'@+' — '+'TEST'@,'N',1,'test',,,,1);
::      _tab.win_sel(_wer);
::      _tab.select();

      {? _obj.STATUS=201
      || ~~
      ?}
   ?}
?};

KPOT.cntx_pop();
KPOZ.cntx_pop();
~~


\kpo_bdo_act
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Aktualizacja danych karty na podstawie BDO - wołane z akcji okna oraz z innych funkcji
::   WE: [_a] czy zadawać pytanie (o ile akcja nie grupowa) ([1]/0)
::       Kontekst wywołania - bieżący rekord KPO
::   WY: 0/1 - czy nastąpiła aktualizacja
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_result:=0;

_selected:=(VAR.GRUPA='T');

:: identyfikator karty
_kpoId:=KPO.BDO_ID;
{? _kpoId<>''
|| _ask:=
      {? _selected
      || 1
      || {? var_pres('_a')=type_of(0) & _a=0
         || 1
         || FUN.ask('Czy zaktualizować kartę \'%1\' na podstawie bazy BDO?'@[KPO.SYM])
         ?}
      ?};

   {? _ask
   ||
::    Najpierw wyciągam rzeczywisty status karty (w ERP może być nieaktualny)
      {? KPO.TYP=exec('typ_kpo','odpady')
      || _obj:=exec('Kpo_printingpage','bdo_api',_kpoId)
      |? KPO.TYP=exec('typ_kpok_tra','odpady')
      || _obj:=exec('Kpok_printingpage_transfer','bdo_api',_kpoId)
      |? KPO.TYP=exec('typ_kpok_rec','odpady')
      || _obj:=exec('Kpok_printingpage_receive','bdo_api',_kpoId)
      || return(_result)
      ?};
      _obj.log_update('|%1'[KPO.uidref()]);

::    Nie znaleziono zasobu, czyli karta została usunięta z BDO albo nie zdążyła się zreplikować
::    - bez dialogów nic nie robimy na wszelki wypadek
::    - z dialogami pytamy, czy aby na pewno usunąć powiązanie
      {? _obj.STATUS=404 | _obj.STATUS=123
      || _txt:=
            'Nie udało się znaleźć karty \'%1\' w systemie BDO.\n\n'
            'Możliwe przyczyny:\n'
            '- karta została usunięta w systemie BDO,\n'
            '- dane karty nie zdążyły się zreplikować w systemie BDO.'@[KPO.SYM];
         {? _selected
         || KOMM.msg(_txt,0)
         || {? FUN.ask(_txt+'\n\n'+'Czy usunąć powiązanie w systemie ERP?'@)
            || KPO.BDO_ID:='';
               KPO.KPO_STAT:=exec('kpo_stat_planned','odpady');
               {? KPO.put()
               || _result:=1
               ?}
            ?}
         ?}

::    Jest OK, aktualizujemy zapis
      |? _obj.STATUS=200
      || _page:=json_parse(_obj.DATA);
         _cardStatus:=_page.cardStatus;
         _cardStatusCodeName:=exec('FindInSet','#table','KPO_STAT','NAZ',_cardStatus,,"KPO_STAT.KOD",1);
         _senderEupNumber:=_page.senderEupNumber;
         _receiverEupNumber:=_page.receiverEupNumber;
         _senderName:=_page.senderNameOrFirstNameAndLastNam;
         _senderNip:=_page.senderNip;
         _carrierName:=_page.carrierNameOrFirstNameAndLastNa;
         _carrierNip:=_page.carrierNip;
         _receiverName:=_page.receiverNameOrFirstNameAndLastN;
         _receiverNip:=_page.receiverNip;
         _isWasteGenerating:={? var_pres('isWasteGenerating',_page)=type_of(0) || _page.isWasteGenerating || 0 ?};
         _wasteGeneratedTerytPk:={? var_pres('wasteGeneratedTerytPk',_page)=type_of('') || _page.wasteGeneratedTerytPk || '' ?};
         _wasteGeneratingAdditionalInfo:={? var_pres('wasteGeneratingAdditionalInfo',_page)=type_of('') || _page.wasteGeneratingAdditionalInfo || '' ?};

::       Sprawdzenie, w której roli jestem kontrahentem wg nr BDO dla danej karty
         _my_nrbdo:=exec('FindAndGet','#table',KH,_env.KH,,"KH.NRREJDBO",'');
         _role:=
            {? _page.senderIdentificationNumber=_my_nrbdo
            || 'Sender'
            |? _page.carrierIdentificationNumber=_my_nrbdo
            || 'Carrier'
            |? _page.receiverIdentificationNumber=_my_nrbdo
            || 'Receiver'
            || ''
            ?};

         {? KPO.TYP=exec('typ_kpo','odpady')
         || _type:='Kpo'
         || _type:='Kpok'
         ?};

         _obj1:=exec('%1_%2_card'[_type,-gsub(_cardStatusCodeName,'_','')],'bdo_api',_kpoId,_role);
         _obj1.log_update('|%1'[KPO.uidref()]);

         {? _obj1.STATUS=200
         ||
::          Do testów - wyświetlenie wyniku w tymczasowym widoku
::            _tab:=json_tparse(_obj1.DATA,50,50);
::            _wer:=_tab.mk_sel('Karta przekazania odpadów'@+' — '+'TEST'@,'N',1,'test',,,,1);
::            _tab.win_sel(_wer);
::            _tab.select();

            _card:=json_parse(_obj1.DATA);
            _cardNumber:={? var_pres('cardNumber',_card)=type_of('') || _card.cardNumber || ~~ ?};
            _senderCompanyId:=_card.senderCompanyId;
            _senderEupId:=_card.senderEupId;
            _carrierCompanyId:=_card.carrierCompanyId;
            _receiverCompanyId:=_card.receiverCompanyId;
            _receiverEupId:=_card.receiverEupId;
            _wasteCodeId:=_card.wasteCodeId;
            _vehicleRegNumber:=_card.vehicleRegNumber;
            _wasteMass:=
               {? var_pres('correctedWasteMass',_card)=type_of(0) & _card.correctedWasteMass>0
               || _card.correctedWasteMass
               |? var_pres('wasteMass',_card)=type_of(0) & _card.wasteMass>0
               || _card.wasteMass
               |? var_pres('revisedWasteMass',_card)=type_of(0) & _card.revisedWasteMass>0
               || _card.revisedWasteMass
               || _card.wasteMass
               ?};
            _cardSubtype:={? var_pres('cardSubtype',_card)=type_of('') || _card.cardSubtype || '' ?};
            _transportTime:=
               {? var_pres('realTransportTime',_card)=type_of('')
               || _card.realTransportTime
               || _card.plannedTransportTime
               ?};
            _receiveTime:=
               {? var_pres('receiveConfirmationTime',_card)=type_of('')
               || _card.receiveConfirmationTime
               || ''
               ?};
            _wasteProcessId:={? var_pres('wasteProcessId',_card)=type_of(0) || _card.wasteProcessId || 0 ?};
            _remarks:={? var_pres('remarks',_card)=type_of('') || _card.remarks || '' ?};
            _wasteCodeExtended:={? var_pres('wasteCodeExtended',_card)=type_of(0) || _card.wasteCodeExtended || 0 ?};
            _wasteCodeExtendedDescription:={? var_pres('wasteCodeExtendedDescription',_card)=type_of('') || _card.wasteCodeExtendedDescription || '' ?};

::          Warunki na odrzucenie aktualizacji
            _senderCompany:=exec('KH_get_ref','bdo_fun',_senderCompanyId);
            _senderEup:=exec('KH_ODB_get_ref','bdo_fun',_senderEupId);
            _receiverCompany:=exec('KH_get_ref','bdo_fun',_receiverCompanyId);
            _receiverEup:=exec('KH_ODB_get_ref','bdo_fun',_receiverEupId);
            _carrierCompany:=exec('KH_get_ref','bdo_fun',_carrierCompanyId);

            {? _senderCompany=null() |
               _receiverCompany=null() |
               _carrierCompany=null()
            || _msg:='Karty \'%1\' nie można zaktualizować.'@[KPO.SYM];
               {? _senderCompany=null() || _msg+='\n'+'Przekazujący: %1 (NIP: %2).'@[_senderName,_senderNip] ?};
               {? _receiverCompany=null() || _msg+='\n'+'Przejmujący: %1 (NIP: %2).'@[_receiverName,_receiverNip] ?};
               {? _carrierCompany=null() || _msg+='\n'+'Transportujący: %1 (NIP: %2).'@[_carrierName,_carrierNip] ?};
               KOMM.error(_msg,~_selected)
            |? _rok:=(iso_datetime_parse(_transportTime).date)~1;
               date(_rok,1,1)<>date(ST.AR,1,1)
            || _msg:='Karty \'%1\' nie można zaktualizować. Należy przesunąć ją do roku %2.'@[KPO.SYM,$_rok];
               KOMM.error(_msg,~_selected)
            ||
               KPO.IL:=_wasteMass;
               KPO.KH:=_senderCompany;
               KPO.KH_ODB:=_senderEup;
               KPO.KH_2:=_receiverCompany;
               KPO.KH_ODB_2:=_receiverEup;
               _kpo_odp:=KPO.ODP;
               KPO.ODP:=
                  {? type_of(_wasteCodeId)=type_of(0)
                  || exec('FindInSet','#table','ODP','BDO_ID',_wasteCodeId)
                  || null()
                  ?};
               _change:=KPO.ODP<>_kpo_odp;
               {? type_of(_cardNumber)=type_of('') || KPO.SYM:=_cardNumber || ~~ ?};
               KPO.ODPR:=
                  {? type_of(_wasteProcessId)=type_of(0)
                  || exec('FindInSet','#table','ODPR','BDO_ID',_wasteProcessId)
                  || null()
                  ?};
               KPO.KPO_STAT:=exec('kpo_stat','odpady',_cardStatusCodeName);
::            KPO.TYP:=exec('typ_kpo%1'[{? _cardSubtype='' || '' || 'k_'+(-_cardSubtype) ?}],'odpady');
               KPO.NRREJ:=_vehicleRegNumber;
               KPO.DTR:=iso_datetime_parse(_transportTime).date;
               KPO.GTR:=iso_datetime_parse(_transportTime).time;
               KPO.DREC:=iso_datetime_parse(_receiveTime).date;
               KPO.GREC:=iso_datetime_parse(_receiveTime).time;
               KPO.KH_3:=_carrierCompany;
::            KPO.BDO_ID:=_kpoId;
               KPO.EX:=_wasteCodeExtended;
               KPO.EX_DESC:=_wasteCodeExtendedDescription;
               KPO.WG:=_isWasteGenerating;
               KPO.WG_KOD_G:=_wasteGeneratedTerytPk;
               KPO.WG_NAZ_G:=exec('WyszukajGmine','teryt',KPO.WG_KOD_G);
               KPO.WG_ADD:=_wasteGeneratingAdditionalInfo;

               KPO.memo_set(_remarks,'REMARKS');
::             Gdy zmiana kodu odpadu, to czyszczę PDFy, żeby zostały ponownie pobrane
               {? _change
               || KPO.PDF_POTW:=null();
                  KPO.PDF_KPO:=null()
               ?};
               {? KPO.put()
               || KPO.memo_put(,'REMARKS');
                  {? KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?};
                  _result:=1
               ?}
            ?}
         || KOMM.error(_obj1.MESSAGE,~_selected)
         ?}
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   ?}
|| KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
?};
_result


\kpo_bdo_act_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Aktualizacja danych karty na podstawie BDO - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy zaktualizować zaznaczone karty na podstawie bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Aktualizacja kart'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_act_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Aktualizacja danych karty na podstawie BDO - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_act_service
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Aktualizacja danych kart na podstwie BDO
::       Funkcja do wywołania w zadaniu serwisowym (Merit) lub alercie (Xpertis)
::   WE: _a - kod oddziału - domyślny 'c'
::       _b - rok - domyślny date()~1
::   WY: liczba zaktualizowanych kart (-1: wystąpił błąd)
::----------------------------------------------------------------------------------------------------------------------
_oddz:={? var_pres('_a')=type_of('') || _a || 'c' ?};
_rok:={? var_pres('_b')=type_of(0) || _b || date()~1 ?};

KOMM.init(,,'Aktualizacja kart przekazania odpadów'@);

:: Powołanie środowiska - ustala domyślny podmiot i domyślne MPD, pobiera token dostępowy
_env:=exec('env_create','odpady');
params_set('env',_env);

{? __BDO_TOKEN<>''
||
:: Ustawienie parametrów sesji - oddział i rok
   __PARSES.setVal('OddzialLogProd',_oddz);
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=_rok;
   _args.AM:=1;
   __PARSES.setVal('OkresRok',_args);
   obj_del(_args);

   _count:=0;
:: Przetwarzane tylko karty nieobsłużone
   KPO.cntx_psh();
   KPO.index('R');
   KPO.prefix('K','N');
   {? KPO.first()
   || {!
      |? _count+=exec('kpo_bdo_act','odpady',0);
         KPO.next()
      !}
   ?};
   KPO.cntx_pop()
|| _count:=-1
?};

KOMM.select();
_count


\kpo_bdo_appr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Planowana -> Zatwierdzona
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
:: Czy aktualizować kartę przed zatwierdzeniem - konieczna ze względu na możliwość zmiany statusu na portalu
_act_b:=1;
:: Czy aktualizować kartę po zatwierdzeniu
_act_a:=0;

params_set(params_get());

_selected:=(VAR.GRUPA='T');

:: Aktualizacja po cichu
{? {? _act_b || exec('kpo_bdo_act','odpady',0)=0 || 0 ?}
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_planned','odpady')
|| KOMM.msg('Karta \'%1\' o statusie innym niż planowana, nie można zatwierdzić.'@[KPO.SYM],~_selected)

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || {? KPO.TYP=exec('typ_kpo','odpady')
      || _obj:=exec('Kpo_approve','bdo_api',_kpoId);
         {? _obj.STATUS=204
         || KPO.KPO_STAT:=exec('kpo_stat_approved','odpady');
            {? KPO.put() & _act_a
            || exec('kpo_bdo_act','odpady',0)
            ?}
         || KOMM.error(_obj.MESSAGE,~_selected)
         ?};
         _obj.log_update('|%1'[KPO.uidref()])
      || _obj:=exec('Kpok_approve_card','bdo_api',_kpoId);
         {? _obj.STATUS=200
         || KPO.KPO_STAT:=exec('kpo_stat_approved','odpady');
            {? KPO.put() & _act_a
            || exec('kpo_bdo_act','odpady',0)
            ?}
         || KOMM.error(_obj.MESSAGE,~_selected)
         ?};
         _obj.log_update('|%1'[KPO.uidref()])
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_appr_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Planowana -> Zatwierdzona - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy zatwierdzić zaznaczone karty?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Zatwierdzenie kart'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_appr_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Planowana -> Zatwierdzona - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_genc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Zatwierdzona -> Potwierdzenie wygenerowane
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_selected:=(VAR.GRUPA='T');

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_approved','odpady')
|| KOMM.msg(
      'Karta \'%1\' o statusie innym niż zatwierdzona, nie można generować potwierdzenia.'@[KPO.SYM],
      ~_selected
   )

|? KPO.KH<>VAR.POD & KPO.KH_3<>VAR.POD
|| KOMM.msg('Potwierdzenie dla karty \'%1\' może wygenerować tylko przekazujący lub transportujący odpad.'@[KPO.SYM],
      ~_selected
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || {? KPO.TYP=exec('typ_kpo','odpady')
      || {? KPO.KH=_env.KH
         || _ask:={? _selected || 1 || FUN.ask('Czy wygenerować potwierdzenie dla karty \'%1\'?'@[KPO.SYM]) ?};
            {? _ask
            || _obj:=exec('Kpo_generateconfirmation','bdo_api',_kpoId);
               {? _obj.STATUS=204
               || KPO.KPO_STAT:=exec('kpo_stat_confirmation_generated','odpady');
                  KPO.put()
               || KOMM.error(_obj.MESSAGE,~_selected)
               ?};
               _obj.log_update('|%1'[KPO.uidref()])
            ?}
         || {? _selected
            || KOMM.msg(
                  'Karta przekazania odpadów \'%1\' nie może być potwierdzona grupowo przez transportującego.'@[KPO.SYM],
                  ~_selected
               )
            || _tab:=tab_tmp(
                  ,'NRREJ','STRING[100]','Środek transportu'@
                  ,'DTR','DATE','Data transportu'@
                  ,'GTR','TIME','Godzina transportu'@
               );
               _tab.fld_fml('NRREJ','F3',"exec('kpo_nrrej_f3','odpady')");
               _red:=_tab.mk_edit('Generowanie potwierdzenia karty'@,,'confirmation');
               _tab.win_efld(_red,,'NRREJ',,,50,,,,,,,'F3_button=1');
               _tab.efld_opt(_red,'mark=1',,'NRREJ');
               _tab.win_efld(_red,,'DTR');
               _tab.efld_opt(_red,'mark=1',,'DTR');
               _tab.win_efld(_red,,'GTR',,,13);
               _tab.efld_opt(_red,'mark=1',,'GTR');
               exec('ok_esc','#window',_tab,_red);
               _tab.win_edit(_red);
               _valid:="
                  _tab:=cur_tab(1,1);
                  _chk:=__CHK.record(_tab,,'NRREJ','DTR','GTR');
                  {? _chk=''
                  || {? exec('create','#tm_stamp',_tab.DTR,_tab.GTR)<exec('create','#tm_stamp')
                     || FUN.info('Należy wprowadzić późniejszą datę i godzinę transportu.'@);
                        _chk:='DTR'
                     ?}
                  ?};
                  _chk
               ";
               _tab.blank();
               _tab.NRREJ:=KPO.NRREJ;
               _tab.DTR:=KPO.DTR;
               _tab.GTR:=KPO.GTR;
               {? _tab.edit(_valid)
               || _vehicleRegNumber:=_tab.NRREJ;
                  _realTransportTime:='';
                  _realTransportDate:=iso_datetime_value(_tab.DTR,_tab.GTR);
                  _obj:=exec('Kpo_carrier_upd_approved_gener','bdo_api',
                     _kpoId,_vehicleRegNumber,_realTransportTime,_realTransportDate
                  );
                  {? _obj.STATUS=200
                  || KPO.KPO_STAT:=exec('kpo_stat_confirmation_generated','odpady');
                     KPO.put()
                  || KOMM.error(_obj.MESSAGE,~_selected)
                  ?};
                  _obj.log_update('|%1'[KPO.uidref()])
               ?}
            ?}
         ?}
      || _ask:={? _selected || 1 || FUN.ask('Czy wygenerować potwierdzenie dla karty \'%1\'?'@[KPO.SYM]) ?};
         {? _ask
         || _obj:=exec('Kpok_promote_confirmationgener','bdo_api',_kpoId);
            _obj.log_update('|%1'[KPO.uidref()]);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_confirmation_generated','odpady');
               KPO.put()
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?}
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_genc_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Zatwierdzona -> Potwierdzenie wygenerowane - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wygenerować potwierdzenia dla zaznaczonych kart?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Generowanie potwierdzeń'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_genc_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Zatwierdzona -> Potwierdzenie wygenerowane - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_receive
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Potwierdzenie wygenerowane -> Potwierdzenie przejęcia
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_selected:=0;

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_confirmation_generated','odpady')
|| KOMM.msg(
      'Karta \'%1\' o statusie innym niż \'Potwierdzenie wygenerowane\', nie można przejąć.'@[KPO.SYM],
      ~_selected
   )

|? exec('create','#tm_stamp',KPO.DTR,KPO.GTR)>exec('create','#tm_stamp')
|| KOMM.msg(
      'Data i godzina przejęcia odpadów dla karty %1\n'
      'nie może być wcześniejsza od daty i godziny rozpoczęcia transportu.'@[KPO.SYM],
      ~_selected
   )

|? KPO.KH_2<>VAR.POD
|| KOMM.msg(
      'Potwierdzić przejęcie dla karty \'%1\' może tylko przejmujący odpad.'@[KPO.SYM],
      ~_selected
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || _tab:=tab_tmp(1,'MASS','REAL','Masa'@,'REMARKS','SYS_MEMO','Uwagi'@);
      _tab.blank();
      _tab.MASS:=KPO.IL;
      _red:=_tab.mk_edit('Potwierdzenie przejęcia'@,,'potwprzej');
      _tab.win_efld(_red,,'MASS',,,,4);
      _tab.efld_opt(_red,'mark=1',,'MASS');
      _tab.win_efld(_red,,'REMARKS',,,100,-4);
      exec('ok_esc','#window',_tab,_red);
      _tab.win_edit(_red);
      {? _tab.edit("_tab:=cur_tab(1,1); exec('itsPositive','#field',1,,_tab.MASS)")
      || _correctedWasteMass:=_tab.MASS;
         _remarks:=_tab.memo_txt(,,'REMARKS');
         {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_assign_receiveconfirmation','bdo_api',_kpoId,_correctedWasteMass,_remarks);
            {? _obj.STATUS=204
            || KPO.KPO_STAT:=exec('kpo_stat_receive_confirmation','odpady');
               KPO.IL:=_correctedWasteMass;
               {? KPO.put()
               || exec('kpo_bdo_act','odpady',0);
                  {? KPO.RZLP<>''
                  || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0)
                  ?}
               ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         || _obj:=exec('Kpok_assign_receiveconfirmation','bdo_api',_kpoId,_correctedWasteMass,_remarks);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_receive_confirmation','odpady');
               KPO.IL:=_correctedWasteMass;
               {? KPO.put()
               || exec('kpo_bdo_act','odpady',0);
                  {? KPO.RZLP<>''
                  || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0)
                  ?}
               ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_withdr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Zatwierdzona albo Potwierdzenie wygenerowane -> Wycofana
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_selected:=0;

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_approved','odpady') & KPO.KPO_STAT<>exec('kpo_stat_confirmation_generated','odpady')
|| KOMM.msg(
      'Karta \'%1\' o statusie innym niż \'Zatwierdzona\' lub \'Potwierdzenie wygenerowane\', nie można wycofać.'@
      [KPO.SYM],
      ~_selected
   )

|? KPO.KH<>VAR.POD
|| KOMM.msg(
      'Wycofać kartę \'%1\' może tylko przekazujący odpad.'@[KPO.SYM],
      ~_selected
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || _valid:="
         _txt:=cur_tab(1,1).memo_txt(,,'MEMO');
         {? _txt=''
         || FUN.info('Należy wypełnić Uwagi.'@);
            0
         || 1
         ?}
      ";
      _remarks:=exec('edit_memo','#edit',,'Uwagi'@,'Wycofanie'@,100,4,_valid,1);
      {? type_of(_remarks)=type_of('')
      || {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_withdrawn','bdo_api',_kpoId,_remarks);
            {? _obj.STATUS=204
            || KPO.KPO_STAT:=exec('kpo_stat_withdrawn','odpady');
               KPO.memo_set(_remarks,'REMARKS');
               {? KPO.put() || KPO.memo_put(,'REMARKS') ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         || _obj:=exec('Kpok_card_withdrawn','bdo_api',_kpoId,_remarks);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_withdrawn','odpady');
               KPO.memo_set(_remarks,'REMARKS');
               {? KPO.put() || KPO.memo_put(,'REMARKS') ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_tran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Potwierdzenie przejęcia -> Potwierdzenie transportu
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

_selected:=(VAR.GRUPA='T');

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_receive_confirmation','odpady')
|| KOMM.msg(
      'Karta \'%1\' o statusie innym niż \'Potwierdzenie przejęcia\', nie można potwierdzić transportu.'@[KPO.SYM],
      ~_selected
   )

|? KPO.KH_3<>VAR.POD
|| KOMM.msg(
      'Potwierdzić transport dla karty \'%1\' może tylko transportujący odpad.'@[KPO.SYM],
      ~_selected
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || {? KPO.TYP=exec('typ_kpo','odpady')
      || _ask:={? _selected || 1 || FUN.ask('Czy potwierdzić transport dla karty \'%1\'?'@[KPO.SYM]) ?};
         {? _ask
         || _obj:=exec('Kpo_status_transportconfirmat','bdo_api',_kpoId);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_transport_confirmation','odpady');
               KPO.put()
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      || _ask:={? _selected || 1 || exec('env_dtrgtr_edit','odpady') ?};
         {? _ask
         || _receiptEndingTime:=iso_datetime_value(_env.DTR,_env.GTR);
            _obj:=exec('Kpok_status_transportconfirmat','bdo_api',_kpoId,_receiptEndingTime);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_transport_confirmation','odpady');
               KPO.put()
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_tran_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Potwierdzenie przejęcia -> Potwierdzenie transportu - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

:: Policzenie kart wg typów
KPO.cntx_psh();
_tab:=KPO.sel_aget();
_kpo:=_kpok:=0;
{? _tab.first()
|| {!
   |? {? exec('FindAndGet','#table',KPO,_tab.REF,KPO.name(),"KPO.TYP=exec('typ_kpo','odpady')",1)
      || _kpo+=1
      || _kpok+=1
      ?};
      _tab.next()
   !}
?};
KPO.cntx_pop();

{? _kpo>0 & _kpok>0
|| FUN.emsg(
      'Zaznaczono jednocześnie Karty przekazania odpadów i Karty przekazania odpadów komunalnych.\n'
      'W takim przypadku akcja dla zaznaczonych zapisów nie jest dostępna.'@
   );
   0
|| {? _kpok>0
   || {? exec('env_dtrgtr_edit','odpady')
      || VAR.GRUPA:='T';
         KOMM.init(,,'Potwierdzenie transportu'@,'');
         sel_nchk();
         1
      || 0
      ?}
   || {? FUN.ask('Czy potwierdzić transport dla zaznaczonych kart?'@)
      || VAR.GRUPA:='T';
         KOMM.init(,,'Potwierdzenie transportu'@,'');
         sel_nchk();
         1
      || 0
      ?}
   ?}
?}


\env_dtrgtr_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Redagowanie daty i godziny transportu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=tab_tmp(
   ,'DTR','DATE','Data transportu'@
   ,'GTR','TIME','Godzina transportu'@
);
_red:=_tab.mk_edit('Potwierdzenie transportu'@,,'potwtransp');
_tab.win_efld(_red,,'DTR');
_tab.efld_opt(_red,'mark=1',,'DTR');
_tab.win_efld(_red,,'GTR',,,13);
_tab.efld_opt(_red,'mark=1',,'GTR');
exec('ok_esc','#window',_tab,_red);
_tab.win_edit(_red);
_valid:="
   _tm:=exec('create','#tm_stamp',cur_tab(1,1).DTR,cur_tab(1,1).GTR);
   {? _tm>exec('create','#tm_stamp',date(),time())
   || FUN.emsg('Należy podać dane wcześniejsze niż bieżące.'@);
      0
   || 1
   ?}
";
_tab.blank();
_tab.DTR:=date();
_tab.GTR:=time();
{? _tab.edit(_valid)
|| _env.DTR:=_tab.DTR;
   _env.GTR:=_tab.GTR;
   _result:=1
|| _result:=0
?};
_result


\kpo_bdo_tran_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Potwierdzenie przejęcia -> Potwierdzenie transportu - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_reject
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Zmiana statusu karty: Potwierdzenie wygenerowane -> Odrzucona
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_selected:=0;

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_confirmation_generated','odpady')
|| KOMM.msg(
      'Karta \'%1\' o statusie innym niż \'Potwierdzenie wygenerowane\', nie można odrzucić.'@[KPO.SYM],
      ~_selected
   )

|? KPO.KH_2<>VAR.POD
|| KOMM.msg(
      'Odrzucić kartę \'%1\' może tylko przejmujący odpad.'@[KPO.SYM],
      ~_selected
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || _valid:="
         _txt:=cur_tab(1,1).memo_txt(,,'MEMO');
         {? _txt=''
         || FUN.info('Należy wypełnić Uwagi.'@);
            0
         || 1
         ?}
      ";
      _remarks:=exec('edit_memo','#edit',,'Uwagi'@,'Odrzucenie'@,100,4,_valid,1);
      {? type_of(_remarks)=type_of('')
      || {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_reject','bdo_api',_kpoId,_remarks);
            {? _obj.STATUS=204
            || KPO.KPO_STAT:=exec('kpo_stat_rejected','odpady');
               KPO.memo_set(_remarks,'REMARKS');
               {? KPO.put() || KPO.memo_put(,'REMARKS') ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         || _obj:=exec('Kpok_reject_card','bdo_api',_kpoId,_remarks);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_rejected','odpady');
               KPO.memo_set(_remarks,'REMARKS');
               {? KPO.put() || KPO.memo_put(,'REMARKS') ?}
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Usunięcie karty ze statusem 'Planowana'
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_selected:=(VAR.GRUPA='T');

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_planned','odpady')
|| KOMM.msg('Karta \'%1\'o statusie innym niż \'Planowana\', nie można usunąć.'@[KPO.SYM],~_selected)
|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || _ask:={? _selected || 1 || FUN.ask('Czy usunąć kartę \'%1\' z bazy BDO?'@[KPO.SYM]) ?};
      {? _ask
      || {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_delete','bdo_api',_kpoId);
            {? _obj.STATUS=204
            || KPO.HTTPSTAT:=0;
               KPO.BDO_ID:='';
               KPO.put()
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         || _obj:=exec('Kpok_delete','bdo_api',_kpoId);
            {? _obj.STATUS=204
            || KPO.HTTPSTAT:=0;
               KPO.BDO_ID:='';
               KPO.put()
            || KOMM.error(_obj.MESSAGE,~_selected)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
   ?}
?};
~~


\kpo_bdo_del_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Usunięcie karty ze statusem 'Planowana' - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć zaznaczone karty z bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Usuwanie kart z bazy BDO'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_del_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Usunięcie karty ze statusem 'Planowana' - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_revise
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Korekta odrzuconej karty
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

:: Aktualizacja po cichu
{? exec('kpo_bdo_act','odpady',0)=0
|| ~~

|? KPO.KPO_STAT<>exec('kpo_stat_rejected','odpady')
|| FUN.info(
      'Karta \'%1\' o statusie innym niż \'Odrzucone\', nie można korygować.'@[KPO.SYM]
   )

|? KPO.KH<>VAR.POD
|| FUN.info(
      'Korektę karty \'%1\' może wykonać tylko przekazujący odpad.'@[KPO.SYM]
   )

|| _kpoId:=KPO.BDO_ID;
   {? _kpoId<>''
   || _red:=KPO.mk_edit('Korekta karty'@,,'revisecard');
      KPO.win_efld(_red,,'ODP','KOD','KOD',12,,,'Rodzaj odpadu'@);
      KPO.efld_opt(_red,'mark=1',,'ODP');
      KPO.win_efld(_red,,'IL',,,15,4,,'Masa odpadów'@);
      KPO.efld_opt(_red,'mark=1',,'IL');
      exec('ok_esc','#window',KPO,_red);
      KPO.win_edit(_red);
      _valid:="
         _chk:='';
         {? _chk='' || _chk:=__CHK.record(KPO,,'ODP') ?};
         {? _chk=''
         || {? KPO.ODP().BDO_ID=0
            || FUN.emsg('Wybrany rodzaj odpadu nie jest powiązany z bazą BDO.'@); _chk:='ODP'
            ?}
         ?};
         {? _chk='' || {? exec('itsPositive','#field',1,,KPO.IL)=0 || _chk:='IL' ?} ?};
         _chk
      ";
      {? KPO.edit(_valid)
      || _wasteCodeId:=KPO.ODP().BDO_ID;
         _wasteMass:=KPO.IL;
         {? KPO.TYP=exec('typ_kpo','odpady')
         || _obj:=exec('Kpo_revise','bdo_api',_kpoId,_wasteCodeId,_wasteMass);
            {? _obj.STATUS=204
            || KPO.KPO_STAT:=exec('kpo_stat_confirmation_generated','odpady');
               {? KPO.put() & KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?}
            || FUN.emsg(_obj.MESSAGE)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         || _obj:=exec('Kpok_revise','bdo_api',_kpoId,_wasteCodeId,_wasteMass);
            {? _obj.STATUS=200
            || KPO.KPO_STAT:=exec('kpo_stat_confirmation_generated','odpady');
               {? KPO.put() & KPO.RZLP<>'' || exec('FindAndGet','#table',ZLP,KPO.RZLP,,"KG:=@.KPO.IL;put(1)",0) ?}
            || FUN.emsg(_obj.MESSAGE)
            ?};
            _obj.log_update('|%1'[KPO.uidref()])
         ?}
      ?}
   || FUN.info('Karta nie została wysłana do BDO (brak identyfikatora).'@)
   ?}
?};
~~


\kpo_bdo_pdfc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera potwierdzenie KPO (KPOK) jako PDF z rejestru BDO
::   WE: [_a] czy wyświetlać komunikaty FUN (o ile akcja nie grupowa) ([1]/0)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? var_pres('_a')=type_of(0) || _dialog:=_a || _dialog:=1 ?};

_selected:=(VAR.GRUPA='T' | _dialog=0);

_kpoId:=KPO.BDO_ID;
{? _kpoId<>''
|| {? KPO.TYP=exec('typ_kpo','odpady')
   || _obj:=exec('kpo_confirmation','bdo_api',_kpoId);
      _obj.log_update('|%1'[KPO.uidref()]);
      {? _obj.STATUS=200
      || exec('bdo_pdf','odpady',_obj.DATA,KPO,'PDF_POTW','p_%1.pdf'[gsub(KPO.SYM,'/','_')])
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   || _obj:=exec('kpok_confirmation','bdo_api',_kpoId);
      _obj.log_update('|%1'[KPO.uidref()]);
      {? _obj.STATUS=200
      || exec('bdo_pdf','odpady',_obj.DATA,KPO,'PDF_POTW','p_%1.pdf'[gsub(KPO.SYM,'/','_')])
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   ?}
|| KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
?};
~~


\kpo_bdo_pdfc_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera potwierdzenie KPO (KPOK) jako PDF z rejestru BDO - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy pobrać dla zaznaczonych kart potwierdzenia PDF z bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Pobieranie potwierdzeń PDF z bazy BDO'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_pdfc_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera potwierdzenie KPO (KPOK) jako PDF z rejestru BDO - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_prnc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje potwierdzenie/potwierdzenia PDF
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tab:=params_get().env.TAB_PDF;
{? VAR.GRUPA<>'T' || _tab.erase() ?};
{? KPO.PDF_POTW=null()
|| exec('kpo_bdo_pdfc','odpady',0)
?};
{? KPO.PDF_POTW<>null()
|| _tab.PDF:=KPO.PDF_POTW;
   _tab.OPIS:=Plugin.run('KPO_PRINT_OPIS_001',KPO.ref());
   _tab.SORT:=Plugin.run('KPO_PRINT_SORT_001',KPO.ref());
   _tab.add()
?};
{? VAR.GRUPA<>'T'
|| params_set(params_get());
   rep_exec('luo_bdo_confirmation')
?};
~~


\kpo_bdo_prnc_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje potwierdzenie KPO (KPOK) jako PDF z rejestru BDO - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wydrukować dla zaznaczonych kart potwierdzenia PDF z bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Wydruk potwierdzeń'@,'');
   _tab:=params_get().env.TAB_PDF;
   _tab.erase();
   Plugin.silent_on();
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_prnc_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje potwierdzenie KPO (KPOK) jako PDF z rejestru BDO - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
params_set(params_get());
rep_exec('luo_bdo_confirmation');
Plugin.silent_off();
~~


\kpo_bdo_view_c
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Podgląd potwierdzenia KPO w PDF
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? KPO.PDF_POTW=null() & FUN.ask('Brak wydruku potwierdzenia karty \'%1\'.\nCzy pobrać z BDO?'@[KPO.SYM])
|| exec('kpo_bdo_pdfc','odpady')
?};
{? KPO.PDF_POTW<>null()
|| exec('bl_view','#blob',KPO,'PDF_POTW')
?};
~~


\kpo_bdo_pdfp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera KPO (KPOK) jako PDF z rejestru BDO
::   WE: [_a] czy wyświetlać komunikaty FUN (o ile akcja nie grupowa) ([1]/0)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? var_pres('_a')=type_of(0) || _dialog:=_a || _dialog:=1 ?};

_selected:=(VAR.GRUPA='T' | _dialog=0);

_kpoId:=KPO.BDO_ID;
{? _kpoId<>''
|| {? KPO.TYP=exec('typ_kpo','odpady')
   || _obj:=exec('kpo_printingpage','bdo_api',_kpoId);
      _obj.log_update('|%1'[KPO.uidref()]);
      {? _obj.STATUS=200
      || exec('bdo_pdf','odpady',_obj.DATA,KPO,'PDF_KPO','k_%1.pdf'[gsub(KPO.SYM,'/','_')])
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   |? KPO.TYP=exec('typ_kpok_rec','odpady')
   || _obj:=exec('kpok_receive_printingpage','bdo_api',_kpoId);
      _obj.log_update('|%1'[KPO.uidref()]);
      {? _obj.STATUS=200
      || exec('bdo_pdf','odpady',_obj.DATA,KPO,'PDF_KPO','k_%1.pdf'[gsub(KPO.SYM,'/','_')])
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   |? KPO.TYP=exec('typ_kpok_tra','odpady')
   || _obj:=exec('kpok_transfer_printingpage','bdo_api',_kpoId);
      _obj.log_update('|%1'[KPO.uidref()]);
      {? _obj.STATUS=200
      || exec('bdo_pdf','odpady',_obj.DATA,KPO,'PDF_KPO','k_%1.pdf'[gsub(KPO.SYM,'/','_')])
      || KOMM.error(_obj.MESSAGE,~_selected)
      ?}
   ?}
|| KOMM.msg('Karta \'%1\' nie została wysłana do BDO (brak identyfikatora).'@[KPO.SYM],~_selected)
?};
~~


\kpo_bdo_pdfp_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera KPO (KPOK) jako PDF z rejestru BDO - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy pobrać dla zaznaczonych kart wydruki PDF z bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Pobieranie wydruków PDF z bazy BDO'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_pdfp_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobiera KPO (KPOK) jako PDF z rejestru BDO - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\kpo_bdo_prnp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje kartę/karty PDF
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_tab:=params_get().env.TAB_PDF;
{? VAR.GRUPA<>'T' || _tab.erase() ?};
{? KPO.PDF_KPO=null()
|| exec('kpo_bdo_pdfp','odpady',0)
?};
{? KPO.PDF_KPO<>null()
|| _tab.PDF:=KPO.PDF_KPO;
   _tab.add()
?};
{? VAR.GRUPA<>'T'
|| params_set(params_get());
   rep_exec('luo_bdo_printingpage')
?};
~~


\kpo_bdo_prnp_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje karty KPO (KPOK) jako PDF z rejestru BDO - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy wydrukować dla zaznaczonych kart PDF z bazy BDO?'@)
|| VAR.GRUPA:='T';
   KOMM.init(,,'Wydruk kart'@,'');
   _tab:=params_get().env.TAB_PDF;
   _tab.erase();
   sel_nchk();
   1
|| 0
?}


\kpo_bdo_prnp_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Drukuje karty KPO (KPOK) jako PDF z rejestru BDO - po grupie rekordól
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
params_set(params_get());
rep_exec('luo_bdo_printingpage');
~~


\kpo_bdo_view_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Podgląd KPO w PDF
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? KPO.PDF_KPO=null() & FUN.ask('Brak wydruku karty \'%1\'.\nCzy pobrać z BDO?'@[KPO.SYM])
|| exec('kpo_bdo_pdfp','odpady')
?};
{? KPO.PDF_KPO<>null()
|| exec('bl_view','#blob',KPO,'PDF_KPO')
?};
~~


\bdo_pdf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Pobranie PDF
::   WE: _a - _obj.DATA (tekst/plik)
::       _b - tabela, do której zapisać wynik (alias)
::       _c - pole tabeli, do którego zapisać wynik
::       _d - nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & 1+_a='"'
|| _data:=_a;
   _file:=fopen(null(),'bw',,,1);
   base64('decode',(1-_data-1),_file);
   _b.bl_put(_c,_file,,,_d);
   _file.fclose()
|? var_pres('_a')=exec('type_of_file','#var')
|| _in:=_a.copy('br');
   _out:=fopen(null(),'bw',,1,1);
   _buf:=obj_new(1024);
   {!
   |? (_count:=_in.fread(,_buf))>0
   |! {? _buf[1]=%'"'
      || _buf1:=obj_new(_count-1);
         {! _it:=2.. _count
         |! _buf1[_it-1]:=_buf[_it]
         !};
         _out.fwrite(_buf1,_count-1)
      || {? _buf[_count]=%'"' || _count-=1 ?};
         _out.fwrite(_buf,_count)
      ?}
   !};
   _file:=fopen(null(),'bw',,,1);
   base64('decode',_out.copy('br'),_file);
   _b.bl_put(_c,_file,,,_d);
   _file.fclose();
   _out.fclose()
|| FUN.info('Błędnie wygenerowany wydruk.'@)
?};
~~


\typ_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Typ karty 'KPO'
::----------------------------------------------------------------------------------------------------------------------
'KPO'


\typ_kpok_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Typ karty: 'KPOK Odbiór'
::----------------------------------------------------------------------------------------------------------------------
'KPOK Odbiór'


\typ_kpok_tra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Typ karty: 'KPOK Przekazanie'
::----------------------------------------------------------------------------------------------------------------------
'KPOK Przekazanie'


\kpo_zakoncz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Karta przekazania odpadów KPO - akcja Zakończ w oknie wertowania przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Ilość zaznaczonych kart przekazania odpadów: %1. Czy zakończyć rejestrację kart?'@[form(KPO.sel_size())])
|| VAR.GRUPA:='T';
   KOMM.init(,,'Rejestracja kart przekazania odpadów'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_zakoncz_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Karta przekazania odpadów KPO - akcja Zakończ w oknie wertowania po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
1


\kpo_akceptuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akceptacja karty przekazania odpadów - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Zaznaczono %1 kart przekazania odpadów. Czy zaakceptować je wszystkie?'@[form(KPO.sel_size())])
|| VAR.GRUPA:='T';
   KOMM.init(,,'Akceptacja kart przekazania odpadów'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_akceptuj_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akceptacja karty przekazania odpadów - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
1


\kpo_deleted_msg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Komunikat o usunięciu karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
'Karta przekazania odpadów nie została odnaleziona, prawdopodobnie została usunięta.'@@


\args_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Argumenty dla funkcji kopiującej karty przekazania odpadów
::   WY: obj_new() - tablica nazwana
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
::             Karta źródłowa
               'KPO_SRC'
::             Karta docelowa
               ,'KPO_DST'

::             Maska źródłowa
               ,'MASK_SRC'
::             Maska docelowa
               ,'MASK_DST'

::             Kontrahent przekazujący odpad
               ,'KH'
::             Rodzaj odpadów
               ,'ODP'
::             Rodzaj karty
               ,'R'
::             Masa
               ,'IL'
::             Przejmujący / wydający odpad
               ,'KHP'
::             Miejsce przeznaczenia odpadów
               ,'MP'
::             Odbiorca kontrahenta przekazującego odpad
               ,'KH_ODB'
::             Kontrahent przejmujący odpad
               ,'KH_2'
::             Odbiorca kontrahenta przejmującego odpad
               ,'KH_ODB_2'
::             Wysypisko
               ,'WYS'
::             Typ karty
               ,'TYP'
::             Proces przetwarzania odpadu
               ,'ODPR'
::             Kontrahent transpartujący odpad
               ,'KH_3'
::             Numer rejestracyjny środka transportu
               ,'NRREJ'
::             Miejsce prowadzenia działalności przekazującego odpad
               ,'KH_MPD'
::             Miejsce prowadzenia działalności przejmującego odpad
               ,'KH_2_MPD'
::             Kod gminy
               ,'KOD_G'
::             Nazwa gminy
               ,'NAZ_G'
::             Obszar gminy
               ,'OB_G'
::             Wymbol wzorca
               ,'SYM_W'
::             Opis wzorca
               ,'OPIS_W'
::             Karta/wzorzec
               ,'KORW'
::             Data transportu
               ,'DTR'
::             Godzina transportu
               ,'GTR'
::             Opis dodatkowy
               ,'OPIS_DOD'
::             Brygada
               ,'ZLBR'
::             Ex
               ,'EX'
::             Ex desc
               ,'EX_DESC'
::             Wytwarzanie odpadów (czy zostanie podane miejsce)
               ,'WG'
::             Miejsce wytwarzania odpadów (kod)
               ,'WG_KOD_G'
::             Miejsce wytwarzania odpadów (nazwa)
               ,'WG_NAZ_G'
::             Dodatkowe informacje o miejscu wytwarzania odpadów
               ,'WG_ADD'
              );
_args.KPO_SRC:=null();
_args.KPO_DST:=null();

_args.MASK_SRC:='___';
_args.MASK_DST:='___';

_args.KH:=null();
_args.ODP:=null();
_args.R:='P';
_args.IL:=0;
_args.KHP:=null();
_args.MP:='';
_args.KH_ODB:=null();
_args.KH_2:=null();
_args.KH_ODB_2:=null();
_args.WYS:=null();
_args.TYP:='';
_args.ODPR:=null();
_args.KH_3:=null();
_args.NRREJ:='';
_args.KH_MPD:='';
_args.KH_2_MPD:='';
_args.KOD_G:='';
_args.NAZ_G:='';
_args.OB_G:='';
_args.SYM_W:='';
_args.OPIS_W:='';
_args.DTR:=date(0,0,0);
_args.GTR:=time(0,0,0);
_args.OPIS_DOD:='';
_args.ZLBR:=null();
_args.WG:=0;
_args.WG_KOD_G:='';
_args.WG_NAZ_G:='';
_args.WG_ADD:='';

_args


\kpo_kopiuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja Kopiuj dla karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
KPO.cntx_psh();
_grupa:=VAR.GRUPA;
{? KPO.KORW='W' & KPO.ILKOP>1
|| _gtr:=VAR.GTR;
   _sym:=exec('FindAndGet','#table',KPO,KPO.ref(),,"KPO.SYM_W",'');
   _txt:='Czy utworzyć nowe karty przekazania odpadów na podstawie wzorca %1?'@[_sym];
   {? _grupa='T' | FUN.ask(_txt)
   ||
::    Wyświetlenie okna z parametrami kopiowania
      {? _grupa<>'T'
      || _red:=exec('copy_red','odpady',0) ;
         VAR.win_edit(_red);
         exec('copy_blank','odpady');
         VAR.DTR:=date();
         _valid:="
            _res:='key:F2';
            {? VAR.DTR<>date(0,0,0)
            || {? VAR.DTR<date()
               || _res:='DTR';
                  FUN.emsg('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
               |? (VAR.DTR~1<>ST.AR)
               || _res:='DTR';
                  FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AR])
               ?}
            || _res:='DTR';
               FUN.emsg('Pole data transportu musi być wypełnione.'@)
            ?};
            _res
         "
      ?};
      {? _grupa='T' | VAR.edit(_valid)
      ||
         {? _grupa<>'T'
         || VAR.GRUPA:='T';
            KOMM.init(250,,'Kopiowanie kart przekazania odpadów'@,'')
         ?};
         _skokCzasu:=KPO.TMSKOK;
         _ilkopii:=KPO.ILKOP;
         _x:=1;
         {? _skokCzasu=time(0,0,0) || _skokCzasu:=time(0,30,0) ?};
         {!
         |?
            KPO.cntx_psh();
            {? var_pres('_params')>100 || obj_del(_params) ?};
            _params:=exec('mp_run_a','#b__box');
            _params.ACT_UID:='LUO_KPO_DRKP';
            _params.AKCJA:='Kopiuj';
            _params.GRUPA:=VAR.GRUPA;
            _params.PROC_START:='T';
            _params.CONTEXT:=obj_new('SRC_REF');
            _params.CONTEXT.SRC_REF:=$KPO.ref();
            {? _x>1
            || VAR.GTR+=_skokCzasu
            ?};
            {? exec('valid_time','#field',VAR.GTR,1)
            || exec('mp_run','#b__box',_params);
               _x+=1
            || KOMM.add(
                  'Nie udało się utworzyć karty przekazania odpadów. '
                  'Godzina transportu musi zawierać się w przedziale %1÷%2'@['00:00','23:59']
               );
::             Wyjśćie z pętli
               _x:=_ilkopii+1
            ?};
            KPO.cntx_pop();
            _x<=_ilkopii
         !};
         {? _grupa<>'T' || VAR.GRUPA:='N'; KOMM.select() ?}
      ?}
   ?};
   VAR.GTR:=_gtr
||
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUO_KPO_DRKP';
   _params.AKCJA:='Kopiuj';
   _params.GRUPA:=VAR.GRUPA;
   _params.PROC_START:='T';
   _params.CONTEXT:=obj_new('SRC_REF');
   _params.CONTEXT.SRC_REF:=$KPO.ref();
   exec('mp_run','#b__box',_params)
?};
KPO.cntx_pop()


\kpo_kopiuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Kopiowanie karty przekazania odpadów - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_msg:={? KPO.KORW='K'
      || 'Zaznaczono %1 kart przekazania odpadów. Czy utworzyć kopię wszystkich zaznaczonych kart?'@[form(KPO.sel_size())]
      || 'Czy utworzyć karty przekazania odpadów na podstawie wybranych wzorców?'@
      ?};
{? FUN.ask(_msg)
||
:: Wyświetlenie okna z parametrami kopiowania
   _red:={? KPO.KORW='K'
         || exec('copy_red','odpady',0)
         || exec('copy_red','odpady',0)
         ?};
   VAR.win_edit(_red);
   exec('copy_blank','odpady');
   VAR.DTR:=date();
   _valid:="
      _res:='key:F2';
      {? VAR.DTR<>date(0,0,0)
      || {? VAR.DTR<date()
         || _res:='DTR';
            FUN.emsg('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
         |? (VAR.DTR~1<>ST.AR | VAR.DTR~2<>ST.AM)
         || _res:='DTR';
            FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AM+'/'+$ST.AR])
         ?}
      || _res:='DTR';
         FUN.emsg('Pole data transportu musi być wypełnione.'@)
      ?};
      _res
   ";
   {? VAR.edit(_valid)
   || VAR.GRUPA:='T';
      KOMM.init(250,,'Kopiowanie kart przekazania odpadów'@,'');
      sel_nchk();
      1
   || 0
   ?}
|| 0
?}


\kpo_kopiuj_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Kopiowanie karty przekazania odpadów - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
1


\kpo_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Właściwe kopiowanie danych z karty źródłowej na docelową
::   WE: _a - KPO.ref()
::       [_b] - tablica nazwana z parametrami dla funkcji kopiującej - wynik exec('args_copy','odpady')
::----------------------------------------------------------------------------------------------------------------------
_kpo:=_a;
{? type_of(_kpo)<>type_of(null) | _kpo=null() || return(_res) ?};

{? var_pres('_b')>100
|| _args:=_b
|| _args:=exec('args_copy','odpady')
?};
_res:=null;
_korw:=exec('FindAndGet','#table',KPO,_kpo,,"KPO.KORW",'');
{? _korw='K'
|| _sym:=exec('FindAndGet','#table',KPO,_kpo,,"KPO.SYM",'');
   _txt:='Czy utworzyć nową kartę przekazania odpadów na podstawie karty %1?'@[_sym]
|| _sym:=exec('FindAndGet','#table',KPO,_kpo,,"KPO.SYM_W",'');
   _txt:='Czy utworzyć nową kartę przekazania odpadów na podstawie wzorca %1?'@[_sym]
?};
{? VAR.GRUPA='T' | FUN.ask(_txt)
||
   {? VAR.GRUPA<>'T'
   ||
::    Wyświetlenie okna z parametrami kopiowania
      _red:={? KPO.KORW='K'
            || exec('copy_red','odpady',0)
            || exec('copy_red','odpady',0)
            ?};
      VAR.win_edit(_red);
      exec('copy_blank','odpady');
      VAR.DTR:=date();
      _valid:="
         _res:='key:F2';
         {? VAR.DTR<>date(0,0,0)
         || {? VAR.DTR<date()
            || _res:='DTR';
               FUN.emsg('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
::            |? (VAR.DTR~1<>ST.AR | VAR.DTR~2<>ST.AM)
::            || _res:='DTR';
::               FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AM+'/'+$ST.AR])
            ?}
         || _res:='DTR';
            FUN.emsg('Pole data transportu musi być wypełnione.'@)
         ?};
         _res
      ";
      {? ~VAR.edit(_valid)
      || return(null)
      ?}
   ?};
   KPO.cntx_psh();
   KPO.use(ref_name(_kpo));
   KPO.prefix();
   {? KPO.seek(_kpo)
   || _args.KPO_SRC:=KPO.ref;

      _args.KH:=KPO.KH;
      _args.ODP:=KPO.ODP;
      _args.IL:=KPO.IL;
      _args.KHP:=KPO.KHP;
      _args.MP:=KPO.MP;
      _args.KH_ODB:=KPO.KH_ODB;
      _args.KH_2:=KPO.KH_2;
      _args.KH_ODB_2:=KPO.KH_ODB_2;
      _args.WYS:=KPO.WYS;
      _args.TYP:=KPO.TYP;
      _args.ODPR:=KPO.ODPR;
      _args.KH_3:=KPO.KH_3;
      _args.NRREJ:=KPO.NRREJ;
      _args.KH_MPD:=KPO.KH_MPD;
      _args.KH_2_MPD:=KPO.KH_2_MPD;
      _args.KOD_G:=KPO.KOD_G;
      _args.NAZ_G:=KPO.NAZ_G;
      _args.OB_G:=KPO.OB_G;
      _args.KORW:=KPO.KORW;
      {? KPO.KORW='W'
      || _args.SYM_W:=KPO.SYM_W;
         _args.OPIS_W:=KPO.OPIS_W
      ?};
      {? VAR.DTR<>date(0,0,0) || _args.DTR:=VAR.DTR ?};
      {? VAR.GTR<>time(0,0,0) || _args.GTR:=VAR.GTR ?};
      _args.OPIS_DOD:=KPO.OPIS_DOD;
      _args.ZLBR:=KPO.ZLBR;
      _args.MASK_SRC:=ref_name(_kpo);
      _args.EX:=KPO.EX;
      _args.EX_DESC:=KPO.EX_DESC;
      _args.WG:=KPO.WG;
      {? _args.WG
      || _args.WG_KOD_G:=KPO.WG_KOD_G;
         _args.WG_NAZ_G:=KPO.WG_NAZ_G;
         _args.WG_ADD:=KPO.WG_ADD
      ?}
   ?};
   KPO.cntx_pop();
:: Dodaje nagłówek karty
   KPO.blank();
   _res:=_new_ref:=exec('kpo_add','odpady',_args.KH,_args.ODP,_args.R,date(ST.AR,ST.AM,1),_args.KORW,1);
   {? _new_ref<>null
   || KPO.cntx_psh();
      KPO.use(ref_name(_new_ref));
      KPO.prefix();
      {? KPO.seek(_new_ref)
      || _args.MASK_DST:=ref_name(KPO.ref);
         _args.KPO_DST:=KPO.ref;
::    Przepisywanie na kartę pozostałych danych
         KPO.IL:=_args.IL;
         KPO.KHP:=_args.KHP;
         KPO.MP:=_args.MP;
         KPO.KH_ODB:=_args.KH_ODB;
         KPO.KH_2:=_args.KH_2;
         KPO.KH_ODB_2:=_args.KH_ODB_2;
         KPO.WYS:=_args.WYS;
         KPO.TYP:=_args.TYP;
         KPO.IL:={? KPO.TYP<>exec('typ_kpok_rec','odpady') || _args.IL || 0 ?};
         KPO.ODPR:=_args.ODPR;
         KPO.KH_3:=_args.KH_3;
         KPO.NRREJ:=_args.NRREJ;
         KPO.KH_MPD:=_args.KH_MPD;
         KPO.KH_2_MPD:=_args.KH_2_MPD;
         KPO.KOD_G:=_args.KOD_G;
         KPO.NAZ_G:=_args.NAZ_G;
         KPO.OB_G:=_args.OB_G;
         KPO.KORW:='K';
         KPO.SYM_W:=_args.SYM_W;
         KPO.OPIS_W:=_args.OPIS_W;
         KPO.DTR:=_args.DTR;
         KPO.GTR:=_args.GTR;
         KPO.OPIS_DOD:=_args.OPIS_DOD;
         KPO.ZLBR:=_args.ZLBR;
         {? KPO.R='' || KPO.R:='P' ?};
         KPO.RUTW:={? _args.KORW='W' || 'Wzorzec' || 'Kopia' ?};
         KPO.EX:=_args.EX;
         KPO.EX_DESC:=_args.EX_DESC;
         KPO.WG:=_args.WG;
         {? KPO.WG
         || KPO.WG_KOD_G:=_args.WG_KOD_G;
            KPO.WG_NAZ_G:=_args.WG_NAZ_G;
            KPO.WG_ADD:=_args.WG_ADD
         ?};
         KPO.put();
         {? _args.KORW='W'
         ||  _txt:='Na podstawie wzorca %1 została wygenerowana karta przekazania odpadu o symbolu: %2'@[_args.SYM_W,KPO.SYM];
            {? VAR.GRUPA='T'
            || KOMM.add(_txt)
            || FUN.info(_txt)
            ?}
         || _sym:=exec('FindAndGet','#table',KPO,_args.KPO_SRC,,"KPO.SYM",'');
            _txt:='Na podstawie karty %1 została wygenerowana karta przekazania odpadu o symbolu: %2'@[_sym,KPO.SYM];
            {? VAR.GRUPA='T'
            || KOMM.add(_txt)
            || FUN.info(_txt)
            ?}
         ?}
      ?};
      KPO.cntx_pop();
::    Ustawienie się na nowym rekordzie jeżeli kopiowano tylko jeden rekord
      {? VAR.GRUPA<>'T' & _args.KORW='K' || KPO.seek(_new_ref) ?}
   ||
      {? VAR.GRUPA='T'
      || KOMM.add('Wystąpił błąd przy dołączaniu nagłówka karty. Karta przekazania odpadów nie została utworzona.'@)
      || FUN.info('Wystąpił błąd przy dołączaniu nagłówka karty. Karta przekazania odpadów nie została utworzona.'@)
      ?}
   ?}
?};
_res


\kpo_w_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Funkcja Kopiuj w oknie wzorców kart przekazania odpadów - kopiowanie zaznaczonego wzorca
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy utworzyć kopię wzorca \'%1\'?'@[KPO.SYM_W])
|| exec('kpo_add','odpady',,,,,1,1)
?};
~~


\ae_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja po redagowaniu dla pól tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='TYP'
|| exec('kpo_set_efld_opt','odpady');
   {? KPO.TYP=exec('typ_kpo','odpady')
   || KPO.KOD_G:='';
      KPO.NAZ_G:='';
      KPO.OB_G:=''
   |? KPO.TYP=exec('typ_kpok_rec','odpady')
   || KPO.IL:=0;
      {? KPO.KOD_G=''
      || KPO.KOD_G:=exec('get_par','bdo_fun',100196,type_of(''));
         {? KPO.KOD_G<>'' || KPO.NAZ_G:=exec('WyszukajGmine','teryt',KPO.KOD_G) ?}
      ?};
      KPO.ODPR:=null();
      KPO.WG:=0;
      KPO.WG_KOD_G:='';
      KPO.WG_NAZ_G:='';
      KPO.WG_ADD:=''
   |? KPO.TYP=exec('typ_kpok_tra','odpady')
   || {? KPO.KOD_G=''
      || KPO.KOD_G:=exec('get_par','bdo_fun',100196,type_of(''));
      {? KPO.KOD_G<>'' || KPO.NAZ_G:=exec('WyszukajGmine','teryt',KPO.KOD_G) ?}
      ?};
      KPO.ODPR:=null();
      KPO.WG:=0;
      KPO.WG_KOD_G:='';
      KPO.WG_NAZ_G:='';
      KPO.WG_ADD:=''
   ?}
|? _fld='KH_ODB'
|| {? KPO.KH_ODB<>null || KPO.KH_MPD:=KPO.KH_ODB().NRMPDBDO ?}
|? _fld='KH_ODB_2'
|| {? KPO.KH_ODB_2<>null || KPO.KH_2_MPD:=KPO.KH_ODB_2().NRMPDBDO ?}
|? _fld='KOD_G'
|| KPO.NAZ_G:=exec('WyszukajGmine','teryt',KPO.KOD_G)
|? _fld='WG_KOD_G'
|| KPO.WG_NAZ_G:=exec('WyszukajGmine','teryt',KPO.WG_KOD_G)
|? _fld='KH'
|| {? KPO.KH_ODB<>null()
   || {? KPO.KH=null() | KPO.KH<>KPO.KH_ODB().KH
      || {? KPO.KH=null()
         || KPO.KH_ODB:=null();
            KPO.KH_MPD:=''
         || KH_ODB.cntx_psh();
            KH_ODB.index('KH_ODB');
            KH_ODB.prefix(KPO.KH);
            {? KH_ODB.size()=1 & KH_ODB.first()
            || KPO.KH_ODB:=KH_ODB.ref();
               KPO.KH_MPD:=KH_ODB.NRMPDBDO
            || KPO.KH_ODB:=null();
               KPO.KH_MPD:=''
            ?};
            KH_ODB.cntx_pop()
         ?}
      ?}
   ?}
::   {? VAR.POD<>KPO.KH | KPO.KH=null
::   || VAR.POD:=KPO.KH;
::      KPO.KH_MPD:=''
::   ?}
|? _fld='KH_2'
|| {? KPO.KH_ODB_2<>null()
   || {? KPO.KH_2=null() | KPO.KH_2<>KPO.KH_ODB_2().KH
      || {? KPO.KH_2=null()
         || KPO.KH_ODB_2:=null();
            KPO.KH_2_MPD:=''
         || KH_ODB.cntx_psh();
            KH_ODB.index('KH_ODB');
            KH_ODB.prefix(KPO.KH_2);
            {? KH_ODB.size()=1 & KH_ODB.first()
            || KPO.KH_ODB_2:=KH_ODB.ref();
               KPO.KH_2_MPD:=KH_ODB.NRMPDBDO
            || KPO.KH_ODB_2:=null();
               KPO.KH_2_MPD:=''
            ?};
            KH_ODB.cntx_pop()
         ?}
      ?}
   ?}
::   {? VAR.POD<>KPO.KH_2 | KPO.KH_2=null
::   || VAR.POD:=KPO.KH_2;
::      KPO.KH_2_MPD:=''
::   ?}
|? _fld='IL'
|| {? fld()>=1000000000
   || FUN.emsg('Część całkowita masy odpadów może składać się maksymalnie z 9 znaków.'@);
      return(0)
   ?}
|? _fld='ILKOP'
|| {? KPO.ILKOP<0
   || FUN.emsg('Ilość nie może być mniejsza od zera.'@);
      return(0)
   ?}
|? _fld='KH_MPD'
|| {? KPO.KH_ODB<>null() & KPO.KH_MPD<>'' & KPO.KH_ODB().NRMPDBDO<>KPO.KH_MPD
   ||
      _jest:=0;
::    Sprawdzam czy nie ma innego odbiorcy o podanym numerze MPD
      KH_ODB.cntx_psh();
      KH_ODB.index('KH_ODB');
      KH_ODB.prefix(KPO.KH);
      {? KH_ODB.find_tab(,'NRMPDBDO',,'=',KPO.KH_MPD)
      || _jest:=1;
         KPO.KH_ODB:=KH_ODB.ref()
      ?};
      KH_ODB.cntx_pop();

::    Jeżeli odbiorca nie ma przypisanego nr mpd to pytam czy przepisać podany na niego
      {? ~_jest & KPO.KH_ODB().NRMPDBDO=''
      || {? FUN.ask('Odbiorca %1 nie ma przypisanego numeru miejsca prowadzenia działalności.\n'
                    'Przypisać do odbiorcy podany numer: %2? '@[KPO.KH_ODB().SKR,KPO.KH_MPD])
         || _jest:=1;
            KPO.KH_ODB().NRMPDBDO:=KPO.KH_MPD;
            KH_ODB.put()
         ?}
      ?};
      {? ~_jest
      || FUN.info('Numer miejsca prowadzenia działaności przekazującego jest niezgodny z numerem przypisanym do odbiorcy.'@);
::         KPO.KH_MPD:= KPO.KH_ODB().NRMPDBDO;
         return(0)
      ?}
   ?}
|? _fld='KH_2_MPD'
|| {? KPO.KH_ODB_2<>null() & KPO.KH_2_MPD<>'' & KPO.KH_ODB_2().NRMPDBDO<>KPO.KH_2_MPD
   ||
       _jest:=0;
::    Sprawdzam czy nie ma innego odbiorcy o podanym numerze MPD
      KH_ODB.cntx_psh();
      KH_ODB.index('KH_ODB');
      KH_ODB.prefix(KPO.KH_2);
      {? KH_ODB.find_tab(,'NRMPDBDO',,'=',KPO.KH_2_MPD)
      || _jest:=1;
         KPO.KH_ODB_2:=KH_ODB.ref()
      ?};
      KH_ODB.cntx_pop();

::    Jeżeli odbiorca nie ma przypisanego nr mpd to pytam czy przepisać podany na niego
      {? ~_jest & KPO.KH_ODB_2().NRMPDBDO=''
      || {? FUN.ask('Odbiorca %1 nie ma przypisanego numeru miejsca prowadzenia działalności.\n'
                    'Przypisać do odbiorcy podany numer: %2? '@[KPO.KH_ODB_2().SKR,KPO.KH_2_MPD])
         || _jest:=1;
            KPO.KH_ODB_2().NRMPDBDO:=KPO.KH_2_MPD;
            KH_ODB.put()
         ?}
      ?};
      {? ~_jest
      || FUN.info('Numer miejsca prowadzenia działaności przejmującego jest niezgodny z numerem przypisanym do odbiorcy.'@);
::         KPO.KH_2_MPD:= KPO.KH_ODB_2().NRMPDBDO;
         return(0)
      ?}
   ?}
|? _fld='EX'
|| {? KPO.EX=0
   || KPO.EX_DESC:=''
   ?};
   exec('kpo_set_efld_opt','odpady')
|? _fld='WG'
|| {? KPO.WG=0
   || KPO.WG_KOD_G:='';
      KPO.WG_NAZ_G:='';
      KPO.WG_ADD:=''
   ?};
   exec('kpo_set_efld_opt','odpady')
|? _fld='GTR' | _fld='TMSKOK'
|| fld(time(fld()~1,fld()~2,0))
?};
1


\be_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja przed redagowaniem dla pól tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
::{? _fld='KH'
::|| VAR.POD:=KPO.KH
::|? _fld='KH_2'
::||  VAR.POD:=KPO.KH_2
::?};
1


\bd_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja przed wyświetl dla pól tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_win:=cur_win(1,1);
_res:=1;
{? cur_kwin='e_edit'
|| {? _fld='ODPR' | _fld='IL' | _fld='KOD_G' | _fld='NAZ_G' | _fld='OB_G' | _fld='WG_KOD_G'
   || exec('kpo_set_efld_opt','odpady')
   ?}
|? VAR.POD<>null()
|| {?_fld='KH'
   || {? VAR.POD<>KPO.KH
      || _res:=exec('flddisp','color','KPO#KH#01')
      |? VAR.POD=KPO.KH & ((KPO.KH_ODB<>null() & KPO.KH_ODB<>VAR.MPD) | (KPO.KH_MPD<>exec('FindAndGet','#table',KH_ODB,VAR.MPD,,"KH_ODB.NRMPDBDO",'')))
      || _res:=exec('flddisp','color','KPO#KH#02')
      ?}
   |? _fld='KH_2'
   || {? VAR.POD<>KPO.KH_2
      || _res:=exec('flddisp','color','KPO#KH#01')
      ?}
   |? _fld='KH_3'
   || {? VAR.POD<>KPO.KH_3
      || _res:=exec('flddisp','color','KPO#KH#01')
      ?}
   ?}
?};
_res


\env_create
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Tworzy obiekt środowiska obsługującego odpady
::   WE: [_a] - Podmiot (KH.ref())
::       [_b] - MPD (KH_ODB.ref())
::----------------------------------------------------------------------------------------------------------------------
_env:=obj_new('BDOenv'
   ,'TAB','RED_PAR','KH','KH_ODB','KH_TMP','KH_ODB_TMP','TAB_PDF','DTR','GTR'
   ,'KEOP_WER','ZAKRES','WERS'
   ,'KPO2KEO_TAB','KEO_MULTI_TAB','MULTI_NDX1','MULTI_NDX2','CZY_ERR'
   ,'KPO_FIND_TAB'
);
_env.BDOenv:='BDOenv';

{? var_pres('_a')=type_of(null()) || _env.KH:=_a || _env.KH:=null() ?};
{? var_pres('_b')=type_of(null()) || _env.KH_ODB:=_b || _env.KH_ODB:=null() ?};

KOMM.init(250,,'Uruchomienie obszaru kart przekazania odpadów'@);

:: Przypisanie domyślnego podmiotu
{? _env.KH=null()
|| _env.KH:=exec('kpo_kh_domyslny','odpady')
?};
{? _env.KH=null()
|| KOMM.msg(
      'Należy wypełnić parametr %1 (%2).'@
      ['100191','Domyślny kontrahent przekazujący odpad'],
      0
   )
?};

:: Przypisanie domyślnego miejsca prowadzenia działalności
{? _env.KH_ODB=null()
|| _env.KH_ODB:=exec('kpo_khodb_domyslny','odpady',_env.KH)
?};
{? _env.KH_ODB=null()
|| KOMM.msg(
      'Należy wypełnić parametr %1 (%2).'@
      ['100192','Domyślne miejsce działalności kontrahenta przekazującego odpad'],
      0
   )
?};

VAR.POD:=_env.KH;
VAR.MPD:=_env.KH_ODB;

{? exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.KH",null())<>_env.KH
|| KOMM.msg(
      'Odbiorca z parametru %1 nie jest przypisany do kontrahenta z parametru %2.'@
      ['100192','100191'],
      0
   )
?};

{? exec('is_active','bdo_fun')
||
:: Ustalenie tokena dostępowego dla bieżącego MPD
   {? _env.KH_ODB=null()
   || KOMM.error(
      'Nie udało się ustalić domyślnego miejsca prowadzenia działalności.'@+
         '\n'+'Funkcje współpracy z BDO zostaną wyłączone.'@,
         0
      );
      __BDO_TOKEN:=''
   || _set_token:=exec('set_token','bdo_fun',exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.NRMPDBDO",''));
      {? _set_token.OK=0
      || {? _set_token.MESSAGE<>'' || KOMM.error(_set_token.MESSAGE,0) ?}
      ?}
   ?}
|| __BDO_TOKEN:=''
?};

_env.KH_TMP:=null();
_env.KH_ODB_TMP:=null();

:: tabela tymczasowa do obsługi wydruków grupowych i wysyłki e-mail plików PDF
_env.TAB_PDF:=tab_tmp(
   ,'PTH','STRING[255]','Ścieżka'
   ,'PDF','BLOBIMAGE','Pdf'
   ,'SORT','STRING[100]','Kolejność'
   ,'OPIS','STRING[100]','Opis'
);
_tabpdf:=_env.TAB_PDF;
_tabpdf.index(_tabpdf.ndx_tmp(,,'SORT',,));

:: data i godzina transportu (i ew. inne przechowywane dla potrzeby akcji grupowych)
_env.DTR:=date();
_env.GTR:=time();

:: obiekt do określenia zakresu wyświetlanych kart przekazania odpadów
_env.ZAKRES:=obj_new('TYP','CZY_ODP','CZY_KEO','ROK','CZY_GM');
_env.ZAKRES.TYP:=_env.ZAKRES.ROK:='';
_env.ZAKRES.CZY_ODP:=_env.ZAKRES.CZY_KEO:=_env.ZAKRES.CZY_GM:=0;

:: Obiekt przechowujący okna wertowania do poszczególnych typów pozycji
_env.WERS:=obj_new(
   'KEO_COL','KEO_EXC','KEO_FOR','KEO_GEN','KEO_TRE',
   'KEOK_COL','KEOK_PRO','KEOK_REC','KEOK_TRA',
   'KEON_ITE',
   'KEOP_ALL'
);
_env.WERS.KEO_COL:=exec('keop_win_create','odpady_keo',exec('typ_keo_collected','odpady_keo'));
_env.WERS.KEO_EXC:=exec('keop_win_create','odpady_keo',exec('typ_keo_excavated','odpady_keo'));
_env.WERS.KEO_FOR:=exec('keop_win_create','odpady_keo',exec('typ_keo_forwarded','odpady_keo'));
_env.WERS.KEO_GEN:=exec('keop_win_create','odpady_keo',exec('typ_keo_generated','odpady_keo'));
_env.WERS.KEO_TRE:=exec('keop_win_create','odpady_keo',exec('typ_keo_treated','odpady_keo'));
_env.WERS.KEOK_COL:=exec('keop_win_create','odpady_keo',exec('typ_keok_collected','odpady_keo'));
_env.WERS.KEOK_PRO:=exec('keop_win_create','odpady_keo',exec('typ_keok_processed','odpady_keo'));
_env.WERS.KEOK_REC:=exec('keop_win_create','odpady_keo',exec('typ_keok_received','odpady_keo'));
_env.WERS.KEOK_TRA:=exec('keop_win_create','odpady_keo',exec('typ_keok_transferred','odpady_keo'));
_env.WERS.KEON_ITE:=exec('keop_win_create','odpady_keo',exec('typ_keon_item','odpady_keo'));
_env.WERS.KEOP_ALL:=exec('keop_win_create','odpady_keo');

:: Aktywne okno wertowania pozycji ewidencji
_env.KEOP_WER:=_env.WERS.KEO_COL;

:: tabela tymczasowa z listą wpisów, jakie mają zostać utworzone na podstawie KPO
_env.KPO2KEO_TAB:=tab_tmp(3
   ,'MPD_REF','STRING[16]','KH_ODB.ref()'
   ,'ODP_REF','STRING[16]','$ODP.ref()'
   ,'KEO_TYP','STRING[4]','Typ karty'@
   ,'KEOP_TYP','STRING[30]','Typ wpisu'@
   ,'KOD','STRING[6]','Kod odpadu'@
   ,'NAZ','STRING[255]','Rodzaj odpadu'@
   ,'DT','DATE','Data'@
   ,'MASA','REAL','Masa'@
   ,'NRDOK','STRING[30]','Numer karty'@
   ,'KOD_G','STRING[7]','Kod gminy'@
   ,'KEO_REF','STRING[16]','$KEO.ref()'
   ,'KPO_REF','STRING[16]','$KPO.ref()'
);

:: tabela tymczasowa do określenia konkrentej karty ewidencji odpadów w przypadku, gdy do jednogo rodzaju odpadu
:: istenieje więcej niż jedna karta ewidencji
_tab_multi:=_env.KEO_MULTI_TAB:=tab_tmp(3
   ,'MPD','STRING[150]','Miejsce prowadzenia działalności'@
   ,'KEO_TYP','STRING[4]','Typ karty'@
   ,'KOD','STRING[6]','Kod odpadu'@
   ,'KOD_G','STRING[7]','Kod gminy'@
   ,'NAZ','STRING[255]','Rodzaj odpadu'@
   ,'SYM','STRING[50]','Numer karty'@
   ,'NAZ_G','STRING[255]','Gmina'@
   ,'EX','STRING[1]','Czy kod ex'@
   ,'EX_DESC','STRING[100]','Rodzaj odpadu ex'@
   ,'HAZ','STRING[1]','Zmiana statusu odpadu niebezpiecznego'@
   ,'HAZ_DESC','STRING[100]','Rodzaj odpadu'@
   ,'MPD_BDO','STRING[20]','Numer miejsca prowadzenia działalności'@
   ,'TRA_EMP','INTEGER','czy KPOK bez gminy'
   ,'ODP_REF','STRING[16]','$ODP.ref()'
   ,'KEO_REF','STRING[16]','$KEO.ref()'
   ,'MPD_REF','STRING[16]','KH_ODB.ref()'
);

:: Okno wertowania dla KEO_MULTI_TAB
_wer_multi:=_tab_multi.mk_sel('Wybór kart ewidencji odpadów'@,,,'keo_multi_tab',,,,,'U',,,,,'normal');
:: Pola
_tab_multi.win_fld(_wer_multi,,'MPD',,,30,,1);
_tab_multi.win_fld(_wer_multi,,'KEO_TYP',,,8,,1);
_tab_multi.win_fld(_wer_multi,,'KOD',,,10,,1);
_tab_multi.win_fld(_wer_multi,,'NAZ',,,30,,1);
_tab_multi.win_fld(_wer_multi,,'NAZ_G',,,25,,1);
_tab_multi.win_fld(_wer_multi,,'SYM',,,30);
_tab_multi.win_fld(_wer_multi,,'EX',,,-5,,1,'Kod ex'@,,'Czy kod ex'@);
_tab_multi.win_fld(_wer_multi,,'EX_DESC',,,15,,1);
_tab_multi.win_fld(_wer_multi,,'HAZ',,,-5,,1,'Zmiana statusu'@,,'Zmiana statusu odpadu niebezpiecznego'@);
_tab_multi.win_fld(_wer_multi,,'HAZ_DESC',,,15,,1);
_fb:="
   params_set(params_get());
   _res:=fld();
   _sym:=params_exec('tab_multi_sel_one','odpady',0);
   {? _sym<>'' || _res:=_sym ?};
   _res
";
_tab_multi.fld_fml('SYM','F3',_fb);
_fb:="
   _env:=params_get().env;
   _tab:=_env.KPO2KEO_TAB;
   _tab_multi:=_env.KEO_MULTI_TAB;
   _res:=1;
   _sym:=fld();
   {? _sym<>''
   ||
::    Sprawdzenie czy ref karty ewidencji zgodny z przypisanym symbolem
      {? ~(_sym=exec('FindAndGet','#table',KEO,_tab_multi.KEO_REF,,\"KEO.SYM\",''))
      ||
::       Symbol niezgodny z refem (ręcznie wpisano numer karty), wyszukuje karty o podanym symbolu
         _ref:=exec('FindInSet','#table','KEO','MPD_TSYM',_sym
                    ,exec('FindAndGet','#table',KH_ODB,_tab_multi.MPD_REF,,,null()),,,_tab_multi.KEO_TYP,null());
         {? _ref<>null()
         ||
::          Znaleziono kartę o wpisanym symbolu
            KEO.cntx_psh();
            KEO.clear();
            {? KEO.seek(_ref)
            ||
               {? $KEO.ODP=_tab_multi.ODP_REF &
                  (_tab_multi.TRA_EMP | (~_tab_multi.TRA_EMP & KEO.KOD_G=_tab_multi.KOD_G))
               ||
::                 Zgodny odpad oraz gmina, uzupełniam dane
                  _tab_multi.EX:=KEO.EX;
                  _tab_multi.EX_DESC:=KEO.EX_DESC;
                  _tab_multi.HAZ:=KEO.HAZ;
                  _tab_multi.HAZ_DESC:=KEO.HAZ_DESC;
                  _tab_multi.KEO_REF:=$KEO.ref();
                  _tab_multi.put()
               ||  FUN.info('Karta ewidencji o symbolu \'\'%1\'\' dotyczy innego odpadu lub gminy.'@[_sym]);
                  _res:=0
               ?}
            ?};
            KEO.cntx_pop()
         || FUN.info('Nie znaleziono karty ewidencji typu \'\'%1\'\' o symbolu \'\'%2\'\' dla danego miejsca '
                     'prowadzania działalności'@[_tab_multi.KEO_TYP,_sym]);
            _res:=0
         ?}
      ?}
   ||
::    Pusty symbol, czyszcze pola z danymi
      _tab_multi.EX:='';
      _tab_multi.EX_DESC:='';
      _tab_multi.HAZ:='';
      _tab_multi.HAZ_DESC:='';
      _tab_multi.KEO_REF:='';
      _tab_multi.put()
   ?};
   _res
";
_tab_multi.fld_fml('SYM','AFTER_EDIT',_fb);
_tab_multi.fld_attr(,2);
:: Akcje
_tab_multi.win_act(_wer_multi,,'Popraw',,,,,,1);
_fb:="
   _env:=params_get().env;
   _tab_multi:=_env.KEO_MULTI_TAB;
   _tab_multi.cntx_psh();
   _tab_multi.clear();
   _empty:=0;
   _res:=1;
:: Sprawdzenie czy są wpisy z nieprzypisaną kartą ewidencji odpadów
   {? _tab_multi.first()
   || {!
      |?
         {? _tab_multi.KEO_REF=''
         || _empty:=1
         ?};
         ~_empty & _tab_multi.next()
      !}
   ?};
   _tab_multi.cntx_pop();
   {? _empty
   || {? ~FUN.ask('Istnieją rekordy z nieprzypisaną kartą ewidencją odpadów.\n'
                  'Na podstawie takich pozycji nie zostaną utworzone wpisy do ewidencji.\n'
                  'Czy mimo to kontynuować?'@)
      || _res:=0
      ?}
   ?};
   {? _res
   || sel_exit()
   || 0
   ?}
";
_tab_multi.win_act(_wer_multi,,'Formuła','Akceptuj'@,,,_fb,,,,,,'A');
_tab_multi.win_btn(_wer_multi,'text=%1,panel=bottom,align=begin'['Akceptuj'@],'menu:A');
_fb:="
   _env:=params_get().env;
   _tab_multi:=_env.KEO_MULTI_TAB;
   _tab_multi.SYM:='';
   _tab_multi.EX:='';
   _tab_multi.EX_DESC:='';
   _tab_multi.HAZ:='';
   _tab_multi.HAZ_DESC:='';
   _tab_multi.KEO_REF:='';
   _tab_multi.put();
   ~~
";
_tab_multi.win_act(_wer_multi,,'Formuła','Wyczyść'@,,,_fb,,,1,"","",'W');
_close:="
   {? _a='sel_exit'
   || return(1)
   || {? FUN.ask('Czy przerwać generowanie wpisów do ewidencji?\nŻadne wpisy nie zostaną utworzone.'@)
      || return(1)
      || return(0)
      ?}
   ?}
";
_grp:=_tab_multi.grp_make('Wybór kart ewidencji odpadów'@,,'grp_multi_tab',,,_close,,'normal');
_tab_multi.grp_sel(_grp,,_wer_multi,,,,,,,,,,'maximized');
_tab_multi.win_sel(_grp);

_env.MULTI_NDX1:=_env.KEO_MULTI_TAB.ndx_tmp(,,'MPD_REF',,,'KEO_TYP',,,'KOD',,,'KOD_G',,);
_env.MULTI_NDX2:=_env.KEO_MULTI_TAB.ndx_tmp(,,'MPD',,,'KEO_TYP',,,'KOD_G',,,'KOD',,);

:: tabela tymczasowa przechowująca wyniki wyszukiwania KPO
_tab_find:=_env.KPO_FIND_TAB:=tab_tmp(3
   ,'TYP','STRING[25]','Typ karty'@
   ,'DTR','DATE','Data transportu'@
   ,'GTR','TIME','Godzina transportu'@
   ,'ODP','STRING[10]','Kod odpadu'@
   ,'NRREJ','STRING[100]','Numer rejestracyjny pojazdu'@
   ,'EX','STRING[1]','Kod ex'@
   ,'EX_DESC','STRING[100]','Rodzaj odpadu ex'@
   ,'ID','STRING[40]','Identyfikator'@
   ,'ERP','STRING[1]','Jest w ERP'@
);

_wer_find:=_tab_find.mk_sel('Karty przekazania z BDO'@,,,'kposelect',,,,,'U');
_tab_find.win_fld(_wer_find,,'DTR',,,-10);
_tab_find.win_fld(_wer_find,,'GTR',,,-10);
_tab_find.win_fld(_wer_find,,'NRREJ',,,-20);
_tab_find.win_fld(_wer_find,,'ODP');
_tab_find.win_fld(_wer_find,,'ID');
_tab_find.win_fld(_wer_find,,'EX',,,,,,,,,2,,"'T'","'N'");
_tab_find.win_fld(_wer_find,,'EX_DESC',,,40);
_tab_find.win_fld(_wer_find,,'ERP',,,,,,,,,2,,"'T'","'N'");
_formula:="sel_exit()";
_tab_find.win_act(_wer_find,,'Formuła','Wybierz'@@,,,_formula,,1,,,,'W');
_tab_find.win_btn(_wer_find,'text=%1'['Wybierz'@],'menu:W');
_formula:="
   _tab:=cur_tab(1,1);
   params_exec('mor_info_kpo_core','odpady',_tab.TYP,_tab.ID)
";
_tab_find.win_act(_wer_find,,'Formuła','Więce&j informacji'@@,,,_formula,,,,,,'J');
_tab_find.win_btn(_wer_find,'text=%1'['Więce&j informacji'@],'menu:J');
_formula:="
   _tab:=cur_tab(1,1);
   {? _tab.ERP='T' || _grayed:='W:' || _grayed:=':' ?};
   _tab.actions_grayed(cur_win(1,1),_grayed);
   ~~
";
_tab_find.win_act(_wer_find,,'Rekord',,,,_formula);
_tab_find.win_sel(_wer_find);

{? do_state()=0
|| KOMM.select()
|| {? ~KOMM.empty() & KOMM.tab().first()
   || undo(KOMM.tab().MESSAGE)
   ?}
?};

_env


\kpo_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja Kontekst pracy dla tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

VAR.POD:={? _env.KH<>null() || _env.KH || null() ?};
VAR.MPD:={? _env.KH_ODB<>null() || _env.KH_ODB || null() ?};

_red:=VAR.mk_edit('Kontekst pracy'@,,'kontekstkpo',20,10);
VAR.win_ewin(_red,,'KPO_KP');
VAR.win_edit(_red);
exec('ok_esc','#window',VAR,_red);
_valid:="
   params_set(params_get());
   _chk:=__CHK.record(VAR,,'POD','MPD');
   {? _chk=''
   || _id:=exec('KH_get_id','bdo_fun',VAR.POD);
      {? _id=''
      || exec('KH_put_id','bdo_fun',VAR.POD,0);
         _id:=exec('KH_get_id','bdo_fun',VAR.POD)
      ?};
      {? _id=''
      || FUN.emsg(
            'Nie można przypisać wybranego kontrahenta.\n'
            'Należy sprawdzić poprawność wypełnienia pola \'\'Numer rejestrowy BDO\'\' kotrahenta.'@
         );
         _chk:='POD'
      ?};
      {? _chk=''
      || _id:=exec('KH_ODB_get_id','bdo_fun',VAR.MPD);
         {? _id=''
         || exec('KH_ODB_put_id','bdo_fun',VAR.MPD,0);
            _id:=exec('KH_ODB_get_id','bdo_fun',VAR.MPD)
         ?};
         {? _id=''
         || FUN.emsg(
               'Nie można przypisać wybranego miejsca prowadzenia działalności.\n'
               'Należy sprawdzić poprawność wypełnienia pola \'\'Numer MPD (BDO)\'\' odbiorcy kontrahenta.'@
            );
            _chk:='MPD'
         ?}
      ?}
   ?};
   _chk
";
{? VAR.edit(_valid)
|| _change:=VAR.POD<>_env.KH | VAR.MPD<>_env.KH_ODB;
   _env.KH:=VAR.POD;
   _env.KH_ODB:=VAR.MPD;
   {? exec('is_active','bdo_fun')
   || _set_token:=exec('set_token','bdo_fun',exec('FindAndGet','#table',KH_ODB,_env.KH_ODB,,"KH_ODB.NRMPDBDO",''));
      {? _set_token.OK=0
      || FUN.emsg(_set_token.MESSAGE)
      ?}
   ?};
   {? AreaTitle.area='LUO_KPO'
   || grp_edisp(VAR,'KPO_KP')
   |? AreaTitle.area='LUO_KEO'
   || grp_edisp(VAR,'KPO_KP');
      {? _change>0
      || {? VAR.A_TABKEO=exec('typ_keo','odpady_keo')
         || exec('before_luokeo_keo','luo')
         |? VAR.A_TABKEO=exec('typ_keok','odpady_keo')
         || exec('before_luokeo_keok','luo')
         |? VAR.A_TABKEO=exec('typ_keon','odpady_keo')
         || exec('before_luokeo_keon','luo')
         |? VAR.A_TABKEO=''
         || exec('before_luokeo_keop_all','luo')
         ?}
      ?}
   ?}
||
:: Wyjście Esc z okna, przywrócenia początkowych wartości
   VAR.POD:=_env.KH;
   VAR.MPD:=_env.KH_ODB
?};
~~


\kpo_kh3_domyslny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: KPO - karta przekazania odpadów - domyślny kontrahent transportujący (KH_3)
::----------------------------------------------------------------------------------------------------------------------
_knt:=null();
_knt_kod:=exec('get_par','bdo_fun',100195,type_of(''));
{? _knt_kod<>''
|| _knt:=exec('FindInSet','#table','KH','KOD',_knt_kod,2,,1,,null())
?};
_knt


\ae_kpo_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja po redagowaniu pól w oknie Kontekst pracy
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_env:=params_get().env;

{? _fld='POD'
|| {? VAR.POD=null
   || _env.KH_TMP:=VAR.POD;
      VAR.MPD:=null;
      VAR.efld_opt(cur_win(1,1),'editable=0',,'MPD')
   || VAR.efld_opt(cur_win(1,1),'editable=1',,'MPD');
::    Sprawdza czy kontrahent ma przypisany numer rejestrowy BDO
      {? VAR.POD().NRREJDBO=''
      || FUN.emsg('Nie można przypisać wybranego kontrahenta.\n'
                  'Kontrahent będący podmiotem musi mieć wypełnione pole z numerem rejestrowym (BDO).'@);
         VAR.POD:=_env.KH_TMP;
         return(0)
      ?};
::    Sprawdza czy zmienił się kontrahent, jeżeli tak to czyści pole z odbiorcą
      {? _env.KH_TMP<>VAR.POD
      || _env.KH_TMP:=VAR.POD;
      VAR.MPD:=null()
      ?};
::    Sprawdza czy kontrahent ma przypisanego tylko 1 odbiorcę, jeżeli tak przypisuje go
      KH_ODB.cntx_psh();
      KH_ODB.index('KH_ODB');
      KH_ODB.prefix(VAR.POD);
      {? KH_ODB.first() & KH_ODB.size()=1 & KH_ODB.NRMPDBDO<>''
      || VAR.MPD:=KH_ODB.ref();
         _env.KH_ODB_TMP:=VAR.MPD
      ?};
      KH_ODB.cntx_pop()
   ?}
|? _fld='MPD'
||
:: Sprawdza czy odbiorca kontrahenta (miejsce prowadzenia działalności) ma przypisany numer miejsca prowadzenia działalności (BDO)
   {? VAR.MPD<>null()
   ||
      {? VAR.MPD().NRMPDBDO=''
      || FUN.emsg('Nie można przypisać wybranego miejsca prowadzenia działalności.\n'
                  'Odbiorca kontrahenta musi mieć wypełnione pole z numerem miejsca prowadzenia działalności (BDO).'@);
         VAR.MPD:=_env.KH_ODB_TMP;
         return(0)
      ?}
   ?};
   _env.KH_ODB_TMP:=VAR.MPD
?};
1


\be_kpo_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja przed redagowaniem pól w oknie Kontekst pracy
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_env:=params_get().env;

{? _fld='POD'
|| _env.KH_TMP:=VAR.POD
|? _fld='MPD'
|| {? VAR.POD=null()
   || VAR.MPD:=null();
      return(0)
   || BEER.KH:=VAR.POD
   ?}
?};
1


\bd_kpo_kp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja przed wyświetl dla pól w oknie Kontekst pracy
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_env:=params_get().env;

{? _fld='POD'
|| ''
|? _fld='MPD'
|| {? VAR.POD=null()
   || VAR.MPD:=null();
::      VAR.efld_opt(cur_win(1,1),'editable=0',,'MPD');
      ~~
   ||
::      VAR.efld_opt(cur_win(1,1),'editable=1',,'MPD');
      ~~
   ?}
?};
1


\kpo_nrrej_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja F3 dla Numeru rejestracyjnego środka transportu (NRREJ) tabeli KPO (lub innej)
::       - wyświetlenie listy pojazdów
::   WE: _a - uchwyt tabeli (nie używany)
::----------------------------------------------------------------------------------------------------------------------
_res:=fld();
POJAZDY.cntx_psh();
POJAZDY.index('NAZ');
POJAZDY.prefix(exec('firma','ustawienia'),'T');
{? POJAZDY.first()
|| POJAZDY.win_sel('WER_KW');
   {? POJAZDY.select()
   || {? _res*POJAZDY.NRREJ=0
      || _res+={? _res<>'' || ','+POJAZDY.NRREJ || POJAZDY.NRREJ ?}
      ?}
   ?}
?};
POJAZDY.cntx_pop();
_res


\kpo_kod_g_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja F3 dla Kodu gminy (KOD_G) tabeli KPO - wyświetlenie słownika gmin
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1)=GPOD
|| _res:=GPOD.KOD_G
|? cur_tab(1,1)=KEO
|| _res:=KEO.KOD_G
|? cur_tab(1,1)=KEOP
|| _res:=KEOP.KOD_G
|? cur_tab(1,1)=VAR
|| _res:=VAR.KOD_G
|| _res:=KPO.KOD_G
?};
::Ustawienie się na aktualnym rekordzie (gminie)
{? +_res=7
|| _tab:=exec('ter_gmi_sel','teryt',,,,_res)
|| _tab:=exec('ter_gmi_sel','teryt')
?};
{? _tab.kod<>''
|| _res:=_tab.kod
?};
_res


\kpo_set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Ustawia wymagane pola dla okna redakcyjnego karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
_win:=cur_win(1,1);
{? KPO.EX
|| KPO.efld_opt(_win,'editable=1',,'EX_DESC');
   KPO.efld_opt(_win,'mark=1',,'EX_DESC')
|| KPO.efld_opt(_win,'editable=grayed',,'EX_DESC');
   KPO.efld_opt(_win,'mark=0',,'EX_DESC')
?};
{? KPO.TYP=exec('typ_kpo','odpady')
|| KPO.efld_opt(_win,'editable=1',,'ODPR','KOD');
   KPO.efld_opt(_win,'editable=1',,'ODPR','NAZ');
   KPO.efld_opt(_win,'editable=1',,'IL');
   KPO.efld_opt(_win,'mark=1',,'IL');
   KPO.efld_opt(_win,'editable=grayed',,'KOD_G');
   KPO.efld_opt(_win,'mark=0',,'KOD_G');
   KPO.efld_opt(_win,'editable=grayed',,'NAZ_G');
   KPO.efld_opt(_win,'editable=grayed',,'OB_G');
   KPO.efld_opt(_win,'editable=1',,'WG');
   {? KPO.WG
   || KPO.efld_opt(_win,'editable=1',,'WG_KOD_G');
      KPO.efld_opt(_win,'mark=1',,'WG_KOD_G');
      KPO.efld_opt(_win,'editable=1',,'WG_NAZ_G');
      KPO.efld_opt(_win,'editable=1',,'WG_ADD')
   || KPO.efld_opt(_win,'editable=grayed',,'WG_KOD_G');
      KPO.efld_opt(_win,'mark=0',,'WG_KOD_G');
      KPO.efld_opt(_win,'editable=grayed',,'WG_NAZ_G');
      KPO.efld_opt(_win,'editable=grayed',,'WG_ADD')
   ?}
|? KPO.TYP=exec('typ_kpok_rec','odpady')
|| KPO.efld_opt(_win,'editable=grayed',,'ODPR','KOD');
   KPO.efld_opt(_win,'editable=grayed',,'ODPR','NAZ');
   KPO.efld_opt(_win,'editable=grayed',,'IL');
   KPO.efld_opt(_win,'mark=0',,'IL');
   KPO.efld_opt(_win,'editable=1',,'KOD_G');
   {? KPO.KORW='K'
   || KPO.efld_opt(_win,'mark=1',,'KOD_G')
   || KPO.efld_opt(_win,'mark=0',,'KOD_G')
   ?};
   KPO.efld_opt(_win,'editable=1',,'NAZ_G');
   KPO.efld_opt(_win,'editable=1',,'OB_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG');
   KPO.efld_opt(_win,'editable=grayed',,'WG_KOD_G');
   KPO.efld_opt(_win,'mark=0',,'WG_KOD_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG_NAZ_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG_ADD')
|? KPO.TYP=exec('typ_kpok_tra','odpady')
|| KPO.efld_opt(_win,'editable=grayed',,'ODPR','KOD');
   KPO.efld_opt(_win,'editable=grayed',,'ODPR','NAZ');
   KPO.efld_opt(_win,'editable=1',,'IL');
   KPO.efld_opt(_win,'mark=1',,'IL');
   KPO.efld_opt(_win,'editable=1',,'KOD_G');
   KPO.efld_opt(_win,'mark=0',,'KOD_G');
   KPO.efld_opt(_win,'editable=1',,'NAZ_G');
   KPO.efld_opt(_win,'editable=1',,'OB_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG');
   KPO.efld_opt(_win,'editable=grayed',,'WG_KOD_G');
   KPO.efld_opt(_win,'mark=0',,'WG_KOD_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG_NAZ_G');
   KPO.efld_opt(_win,'editable=grayed',,'WG_ADD')
?};
~~


\ae_gpod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja po redagowaniu dla pól tabeli GPOD
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='KOD_G'
|| GPOD.NAZ_G:=exec('WyszukajGmine','teryt',GPOD.KOD_G)
?};
1


\kpo_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja wyświetl dla okien karty przekazania odpadow (KPO)
::----------------------------------------------------------------------------------------------------------------------
_edit:=KPO.win_edit('?');
TR_NAG.cntx_psh();
{? KPO.KORW='K'
|| _disp:='REDE';
   _plus:=0;
   {? KPO.TR_NAG<>''
   || TR_NAG.use('trnt____');
      TR_NAG.index('IDADD');
      TR_NAG.prefix(KPO.TR_NAG);
      {? (_plus:=TR_NAG.first(); ~_plus)
      || _msk:=form((KPO.DTR~1)-2000,-2,0,'99')+form(KPO.DTR~2,-2,0,'99');
         TR_NAG.use('trnt'+_msk);
         TR_NAG.index('IDADD');
         TR_NAG.prefix(KPO.TR_NAG);
         _plus:=TR_NAG.first()
      ?};
      {? _plus
      || TR_NAG.memo_get(,'TR_KHBIS');
         TR_NAG.memo_get(,'UW')
      ?}
   ?};
   {? _plus
   || _title:='Karta przekazania odpadów'@;
      _disp:=KPO.mk_edit(_title,,'kpotr_nag');
      KPO.win_etab(_disp,'Dane karty'@);
      KPO.win_ewin(_disp,,'REDE');
      KPO.win_etab(_disp,'Dane transportu'@);
      KPO.win_ewin(_disp,TR_NAG,'RED')
   ?}
|| _disp:='REDE_W'
?};
KPO.win_edit(_disp);
KPO.display();
TR_NAG.cntx_pop();
KPO.win_edit(_edit);
1


\kpo_del_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Usunięcie kart przekazania odpadow - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć zaznaczone karty?'@)
|| VAR.GRUPA:='T';
   KOMM.init(250,,'Usuwanie kart przekazania odpadow'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_del_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Usunięcie kart przekazania odpadow - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\fd_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja format wyświetlania dla pól tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:='';
{? _fld='IL'
|| _res:='out_prec=4'
?};
_res


\kpo_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zmiana statusu karty - obsłużona/nieobsłużona
::----------------------------------------------------------------------------------------------------------------------
_txt:={? KPO.OB='N'
      || 'Czy zmienić status karty na "Obsłużona"?'@
      || 'Czy zmienić status karty na "Nieobsłużona"?'@
      ?};
{? VAR.GRUPA='T' | FUN.ask(_txt)
|| KPO.cntx_psh();
   KPO.prefix();
   _wyn:='';
   _czy_komm:=1;
   {? KPO.OB='N'
   ||
::    Przekierowanie do obsłużonych
      {? KPO.KH=null()
      || _wyn:='Kontrahent przekazujący odpad'
      |? KPO.KH_MPD=''
      || _wyn:='Miejsce prowadzenia działaności przekazującego odpad'
      |? KPO.KH_3=null()
      || _wyn:='Kontrahent transportujący odpad'
      |? KPO.KH_2=null()
      || _wyn:='Kontrahent przejmuący odpad'
      |? KPO.KH_2_MPD=''
      || _wyn:='Miejsce prowadzenia działaności przejmującego odpad'
      ?};
      {? _wyn='' &  KPO.TYP=exec('typ_kpok_rec','odpady')
      || {? KPO.KOD_G='' || _wyn:='Gmina' ?}
      ?};
      {? _wyn=''
      || {? KPO.ODP=null || _wyn:='Rodzaj odpadu' ?}
      ?};
      {? _wyn=''
      || {? KPO.NRREJ='' || _wyn:='Numer rejestracyjny środka transportu' ?}
      ?};
      {? _wyn=''
      || {? KPO.TYP=exec('typ_kpo','odpady') | KPO.TYP=exec('typ_kpok_tra','odpady')
         || {? KPO.IL<=0 || _wyn:='Masa odpadów' ?}
         ?}
      ?};
      {? _wyn=''
      || {? KPO.DTR=date(0,0,0) || _wyn:='Data transportu' ?};
         {? _wyn=''
         || {? KPO.DTR~1<>KPO.AR
            || {? VAR.GRUPA='T'
               || _msg:='Data transportu karty %1 nie zgadza się z aktywnym okresem karty (%2).'@[KPO.SYM,$KPO.AR];
                  _czy_komm:=0;
                  KOMM.add(_msg)
               || _czy_komm:=0;
                  FUN.info('Data transportu nie zgadza się z aktywnym okresem karty (%1).'@[$KPO.AR])
               ?};
               _wyn:='DTR'
            ?}
         ?}
      ?}
   ||
::    Przekierowanie do aktywnych
      {? KPO.KPO_STAT=null
      || KPO.KPO_STAT:=exec('kpo_stat_planned','odpady');
         {? KPO.KPO_STAT<>null || KPO.put ?}
      ?}
   ?};
   {? _wyn=''
   || KPO.OB:={? KPO.OB='T' || 'N' || 'T' ?};
      KPO.put()
   || {? _czy_komm
      || {? VAR.GRUPA='T'
         || KOMM.add('Karta %1 nie ma wypełnionego pola: "%2". Należy uzupełnić brakujące informacje.'@[KPO.SYM,_wyn])
         || FUN.info('Karta %1 nie ma wypełnionego pola: "%2". Należy uzupełnić brakujące informacje.'@[KPO.SYM,_wyn])
         ?}
      ?}
   ?};
   KPO.cntx_pop()
?}


\kpo_status_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zmiana statusu karty (obsłużona/nieobsłużona) - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy zmienić statusy wszystkich zaznaczonych kart?'@)
|| VAR.GRUPA:='T';
   KOMM.init(250,,'Zmiana statusu kart przekazania odpadow'@,'');
   sel_nchk();
   1
|| 0
?}


\kpo_status_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Zmiana statusu karty (obsłużona/nieobsłużona) - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
VAR.GRUPA:='N';
~~


\copy_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Tworzy okna redagowania parametrów kopiowania\grupowego poprawiania kart przekazania odpadów
::   WE: _a - Rodzaj okna: [0]-kopiowanie karty lub tworzenie ze wzorca, 1- Poprawianie karty
::----------------------------------------------------------------------------------------------------------------------
_tab:=VAR;
_type:={? var_pres('_a')=type_of(0) || _a || 0 ?};
_red:=_tab.mk_edit({? _type=0 || 'Parametry kopiowania'@ || 'Parametry redagowania'@ ?},,'kpo_red_cpy');
{? _type=1
|| _tab.win_esep(_red,'Transportujący odpad'@);
   _tab.win_efld(_red,,'KH_3','NAZ_P','KOD',35,,,'Kontrahent'@);
   _tab.win_esep(_red,'Przejmujący odpad'@);
   _tab.win_efld(_red,,'KH_2','NAZ_P','KOD',35,,,'Kontrahent'@);
   _tab.win_efld(_red,,'KH_ODB_2','NAZ','KH_ODB',35,,,'Odbiorca'@);
   _tab.win_efld(_red,,'NR_MPD',,,38,,,'Miejsce prowadzenia działalności'@)
?};
{? _type=1
|| _tab.win_esep(_red,'Odpad'@)
?};
_tab.win_efld(_red,,'DTR',,,10,,,'Data transportu'@,,,,);
_tab.win_efld(_red,,'GTR',,,13,,,'Godzina transportu'@);
{? _type=1
|| _tab.win_efld(_red,,'NRREJ',,,38,,,'Numer rejestracyjny środka transportu'@,,,,'F3_button=1');
   _f3:="
      _tab:=cur_tab(1,1);
      exec('kpo_nrrej_f3','odpady',_tab)
   ";
   _tab.fld_fml('NRREJ','F3',_f3);
   _tab.win_efld(_red,,'REAL',,,15,4,,'Masa odpadów'@)
?};
{? _type=0
|| _tab.efld_opt(_red,'mark=1',,'DTR')
?};
::_valid:="
::   _res:='key:F2';
::   {? VAR.DTR<>date(0,0,0) & VAR.DTR~1<>ST.AR
::   || _res:='edit:DTR';
::      FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AR])
::   ?};
::   _res
::";
_valid:="'key:F2'";
exec('ok_esc','#window',_tab,_red,,_valid);

_red


\copy_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Ustawia wartości domyślne parametrom kopiowania\grupowego poprawiania
::----------------------------------------------------------------------------------------------------------------------
VAR.KH_2:=null();
VAR.KH_ODB_2:=null();
VAR.KH_3:=null();
VAR.NR_MPD:='';
VAR.NRREJ:='';
VAR.DTR:=date(0,0,0);
VAR.GTR:=time(0,0,0);
VAR.REAL:=0;
~~


\kpo_edit_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: edycja karty przekazania odpadu - akcje przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Ilość zaznaczonych kart przekazania odpadów: %1. Czy poprawić wybrane karty?'@[form(KPO.sel_size())])
||
:: Wyświetlenie okna z parametrami kopiowania
   _red:=exec('copy_red','odpady',1);
   VAR.win_edit(_red);
   exec('copy_blank','odpady');
   _valid:="
      _res:='key:F2';
      {? VAR.DTR<>date(0,0,0)
      || {? VAR.DTR<date()
         || _res:='DTR';
            FUN.emsg('Data transportu nie może być wcześniejsza od daty dzisiejszej.'@)
         |? VAR.DTR~1<>ST.AR
         || _res:='DTR';
            FUN.emsg('Data transportu nie zgadza się z aktywnym okresem (%1).'@[$ST.AR])
         ?}
      ?};
      _res
   ";
   {? VAR.edit(_valid)
   || {? VAR.KH_2=null() & VAR.KH_ODB_2=null() & VAR.NR_MPD='' & VAR.KH_3=null() & VAR.DTR=date(0,0,0) &
         VAR.GTR=time(0,0,0) & VAR.NRREJ='' & VAR.REAL=0
      || 0
      || VAR.GRUPA:='T';
         KOMM.init(250,,'Edycja kart przekazania odpadów'@,'');
         sel_nchk();
         1
      ?}
   || 0
   ?}
|| 0
?}


\kpo_edit_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: edycja karty przekazania odpadu - akcje po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
1


\ae_kpo_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja po redagowaniu pól w oknie Parametrów edytowania karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
{? _fld='KH_2'
|| {? VAR.KH_ODB_2<>null()
   || {? VAR.KH_2=null() | VAR.KH_2<>VAR.KH_ODB_2().KH
      || VAR.KH_ODB_2:=null()
      ?}
   ?}
|? _fld='KH_ODB_2'
|| {? VAR.KH_ODB_2<>null || VAR.NR_MPD:=VAR.KH_ODB_2().NRMPDBDO ?}
?};
1


\be_kpo_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja przed redagowaniem pól w oknie Parametrów edytowania karty przekazania odpadów
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:=1;
{? _fld='KH_2'
|| ''
|? _fld='KH_ODB_2'
|| {? VAR.KH_2=null()
   || _res:=0
   || BEER.KH:=VAR.KH_2;
      _res:=1
   ?};
   _res
   ?};
_res


\kpo_symw_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja F3 dla Symbolu wzorca (SYM_W) tabeli KPO - wyświetlenie listy aktywnych harmonogramów
::----------------------------------------------------------------------------------------------------------------------
_res:=KPO.SYM_W;
HN.cntx_psh();
HN.win_sel('SEL');
_actions:=HN.actions('SEL','O:O');
HN.index('NAZ');
HN.prefix();
{? HN.select()
|| _res:=HN.KOD;
   KPO.OPIS_W:=HN.NAZ
?};
HN.actions('SEL',_actions);
HN.cntx_pop();
_res


\kpo_bdo_health
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Sprawdza stan usługi BDO
::----------------------------------------------------------------------------------------------------------------------
_obj:=exec('HealthCheck','bdo_api');
{? _obj.STATUS=200
|| FUN.info('Usługa działa poprawnie.'@)
|| FUN.emsg(_obj.MESSAGE)
?};
~~


\kpo_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: przed szukaj dla karty przekazania odpadow
::----------------------------------------------------------------------------------------------------------------------
{? KPO.KORW='K'
|| KPO.win_edit('REDE_S')
|| KPO.win_edit('REDE_W_S')
?};
1


\odp_import
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Import słownika ODP (rodzaje odpadów) z systemu BDO (z poniższej struktury danych)
::[
::  {
::    "wasteCodeId": 0,
::    "dateCreated": "2020-02-05T13:57:19.978Z",
::    "code": "string",
::    "description": "string",
::    "isDangerous": true,
::    "deleted": true,
::    "level": 0,
::    "parentId": 0
::  }
::]
::----------------------------------------------------------------------------------------------------------------------
ODPG.cntx_psh(); ODPP.cntx_psh(); ODP.cntx_psh();

_odp:=tab_tmp(4
   ,'PARENT','TREE_REF','Zapis nadrzędny'
   ,'ID','INTEGER','wasteCodeId'
   ,'CODE','STRING[10]','code'
   ,'DESC','STRING[255]','description'
   ,'DANGER','INTEGER','isDangerous'
   ,'DELETED','INTEGER','deleted'
   ,'LEVEL','INTEGER','level'
   ,'PARENTID','INTEGER','parentId'
);
params_set('odp',_odp);

_obj:=exec('WasteCode','bdo_api');
{? type_of(_obj)>100
|| {? _obj.STATUS=200
   || _tab:=json_parse(_obj.DATA);
      {! _it:=1 .. obj_len(_tab)
      |! _odp.PARENT:=0;
         _odp.ID:=_tab[_it].wasteCodeId;
         _odp.CODE:=_tab[_it].code;
         _odp.DESC:=_tab[_it].description;
         _odp.DANGER:=_tab[_it].isDangerous;
         _odp.DELETED:=_tab[_it].deleted;
         _odp.LEVEL:=_tab[_it].level;
         _odp.PARENTID:={? var_pres('parentId',_tab[_it])=type_of(0) || _tab[_it].parentId ?};
         _odp.add()
      !}
   ?}
?};

:: Odtworzenie powiązań w drzewie
_odp.for_each("
   _odp:=params_get().odp;
   _parentId:=_odp.PARENTID;
   _odp.cntx_psh();
   _odp.blank();
   _odp.ID:=_parentId;
   {? _odp.find_rec() || _parent:=#_odp.ref() || _parent:=0 ?};
   _odp.cntx_pop();
   _odp.PARENT:=_parent;
   _odp.put()
");

::_odp.first();
::exec('select','#table',_odp,1);

_wer:=_odp.mk_sel('Słownik odpadów BDO'@,'N',,'odpaduslobdo',,,,1);
_odp.win_fld(_wer,,'CODE',,,20,,,'Kod'@);
_odp.win_fld(_wer,,'DANGER',,,,,,'Odp. niebezpieczny'@,,,2,,"1","0");
_odp.win_fld(_wer,,'DESC',,,100,,,'Nazwa'@);
_odp.win_act(_wer,,'Formuła','Importuj'@@,,,
   "params_exec('odp_import_one','odpady',cur_tab(1,1).ref(),cur_tab.sel_size()=0,1,1)",,1,1,
   "params_exec('odp_import_one_bg','odpady')",
   "params_exec('odp_import_one_ag','odpady')",'I'
);
_odp.win_sel(_wer);
_odp.select();

ODPG.cntx_pop(); ODPP.cntx_pop(); ODP.cntx_pop();
~~


\odp_import_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Importuje grupę, pogrupę, odpad z tabeli tymczasowej do struktur programu
::   WE: _a - _tab.ref() / #_tab.ref()
::       _b - czy inicjować i wyświetlać KOMM (0/1)
::       _c - czy dodawać wpisy do KOMM w przypadku, gdy zapis już jest w bazie (0/1)
::       _d - czy importować elementy podrzędne (0/1)
::   WY: ODPG.ref() / ODPP.ref() / ODP.ref() / null()
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_tab:=params_get().odp;
_tab_ref:=_a;
_ini_komm:=_b;
_add_komm:=_c;
_import_sub:=_d;
_ref:=null();

{? _ini_komm || KOMM.init(,,'Import kodów odpadów'@,'') ?};

ODPG.cntx_psh(); ODPP.cntx_psh(); ODP.cntx_psh(); _tab.cntx_psh();

_tab.prefix();
{? _tab.seek(_tab_ref)
||

:: Grupa
   {? _tab.LEVEL=1
   || ODPG.index('ODPG');
      ODPG.prefix(_tab.CODE,);
      {? ODPG.first()
      || {? _add_komm || KOMM.add('Grupa %1 jest już dostępna w systemie.'@[ODPG.KOD]) ?};
         _ref:=ODPG.ref()
      || ODPG.KOD:=_tab.CODE;
         ODPG.NAZ:=_tab.DESC;
         ODPG.BDO_ID:=_tab.ID;
         {? ODPG.add()
         || KOMM.add('Grupa %1 została dodana do systemu.'@[ODPG.KOD]);
            _ref:=ODPG.ref()
         ?}
      ?};
::    Elementy podrzędne
      {? _import_sub
      || _tab.cntx_psh();
         _tab.prefix(#_tab.ref());
         {? _tab.first()
         || {!
            |? exec('odp_import_one','odpady',#_tab.ref(),0,0,1);
               _tab.next()
            !}
         ?};
         _tab.cntx_pop()
      ?}

:: Podgrupa
   |? _tab.LEVEL=2
   || _odpg:=exec('odp_import_one','odpady',_tab.PARENT,0,0,0);
      _kod:=2+(3-_tab.CODE);
      ODPP.index('ODPP');
      ODPP.prefix(_odpg,_kod,);
      {? ODPP.first()
      || {? _add_komm || KOMM.add('Podgrupa %1 jest już dostępna w systemie.'@[ODPP.ODPG().KOD+ODPP.KOD]) ?};
         _ref:=ODPP.ref()
      || ODPP.ODPG:=_odpg;
         ODPP.KOD:=_kod;
         ODPP.NAZ:=_tab.DESC;
         ODPP.BDO_ID:=_tab.ID;
         {? ODPP.add()
         || KOMM.add('Podgrupa %1 została dodana do systemu.'@[ODPP.ODPG().KOD+ODPP.KOD]);
            _ref:=ODPP.ref()
         ?}
      ?};
::    Elementy podrzędne
      {? _import_sub
      || _tab.cntx_psh();
         _tab.prefix(#_tab.ref());
         {? _tab.first()
         || {!
            |? exec('odp_import_one','odpady',#_tab.ref(),0,0,1);
               _tab.next()
            !}
         ?};
         _tab.cntx_pop()
      ?}

:: Odpad
   |? _tab.LEVEL=3
   || _odpp:=exec('odp_import_one','odpady',_tab.PARENT,0,0,0);
      {? ref_tab(_odpp)<>ODPP
      || KOMM.add('Kod %1 nie został zaimportowany — jest błędnie powiązany z podgrupą w bazie BDO.'@[_tab.CODE])
      || _odpg:=exec('FindAndGet','#table',ODPP,_odpp,,"ODPP.ODPG",null());

         _kod:=6+gsub(_tab.CODE,' ','');
         _kk:=2+(6-_tab.CODE);
         ODP.index('KOD');
         ODP.prefix(_kod,);
         {? ODP.first()
         || {? _add_komm || KOMM.add('Kod odpadu %1 jest już dostępny w systemie.'@[ODP.KOD]) ?};
            _ref:=ODP.ref()
         || ODP.blank();
            ODP.ODPG:=_odpg;
            ODP.ODPP:=_odpp;
            ODP.K:=_kk;
            ODP.KOD:=_kod;
            ODP.NB:={? _tab.DANGER || 'T' || 'N' ?};
            ODP.NAZ:=_tab.DESC;
            ODP.BDO_ID:=_tab.ID;
            {? ODP.add()
            || KOMM.add('Kod odpadu %1 został dodany do systemu.'@[ODP.KOD]);
               _ref:=ODP.ref()
            ?}
         ?}
      ?}
   ?}
?};

ODPG.cntx_pop(); ODPP.cntx_pop(); ODP.cntx_pop(); _tab.cntx_pop();

{? _ini_komm || KOMM.select() ?};

_ref


\odp_import_one_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Import kodów odpadów - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Import kodów odpadów'@,'');
1


\odp_import_one_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Import kodów odpadów - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\fe_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Akcja format redagowania dla pól tabeli KPO
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_res:='';
{? _fld='IL'
|| _res:='in_prec=4'
?};
_res


\mor_info_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [20.14]
:: OPIS: Wyświetla dane karty na podstawie BDO - wołane z akcji okna oraz z innych funkcji
::       Kontekst wywołania - bieżący rekord KPO
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('mor_info_kpo_core','odpady',KPO.TYP,KPO.BDO_ID,KPO.ref());
~~


\mor_info_kpo_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wyświetla dane karty na podstawie BDO - wołane z akcji okna oraz z innych funkcji - funkcja podstawowa
::   WE: _a - typ karty (KEO.TYP)
::       _b - identyfikator karty (KEO.BDO_ID)
::       [_c] - KPO.ref() - jeżeli wywołanie w kontekście zapisu w ERP
::----------------------------------------------------------------------------------------------------------------------
_typ:=_a;
_kpoId:=_b;
_kpo:={? var_pres('_c')=type_of(null()) || _c || null() ?};

params_set(params_get());
_env:=params_get().env;

_selected:=(VAR.GRUPA='T');

{? _kpoId<>''
||
:: Najpierw wyciągam rzeczywisty status karty (w ERP może być nieaktualny)
   {? _typ=exec('typ_kpo','odpady')
   || _obj:=exec('Kpo_printingpage','bdo_api',_kpoId)
   |? _typ=exec('typ_kpok_tra','odpady')
   || _obj:=exec('Kpok_printingpage_transfer','bdo_api',_kpoId)
   |? _typ=exec('typ_kpok_rec','odpady')
   || _obj:=exec('Kpok_printingpage_receive','bdo_api',_kpoId)
   || return()
   ?};

   {? _kpo<>null() || _obj.log_update('|%1'[exec('FindAndGet','#table',KPO,_kpo,,"uidref()",'')]) ?};

:: Nie znaleziono zasobu, czyli karta została usunięta z BDO, albo nie zdążyła się zreplikować
:: - nic nie robimy na wszelki wypadek
   {? _obj.STATUS=404 | _obj.STATUS=123
   || {? _kpo<>null()
      || KPO.cntx_psh();
         KPO.prefix();
         {? KPO.seek(_kpo)
         || FUN.info(
               'Nie udało się znaleźć karty \'%1\' w systemie BDO.\n\n'
               'Możliwe przyczyny:\n'
               '- karta została usunięta w systemie BDO,\n'
               '- dane karty nie zdążyły się zreplikować w systemie BDO.'@
               [KPO.SYM])
         ?};
         KPO.cntx_pop()
      ?}

:: Jest OK, aktualizujemy zapis
   |? _obj.STATUS=200
   || _page:=json_parse(_obj.DATA);
      _cardStatus:=_page.cardStatus;
      _cardStatusCodeName:=exec('FindInSet','#table','KPO_STAT','NAZ',_cardStatus,,"KPO_STAT.KOD",1);
      _senderEupNumber:=_page.senderEupNumber;
      _receiverEupNumber:=_page.receiverEupNumber;

::    Sprawdzenie, w której roli jestem kontrahentem wg nr BDO dla danej karty
      _my_nrbdo:=exec('FindAndGet','#table',KH,_env.KH,,"KH.NRREJDBO",'');
      _role:=
         {? _page.senderIdentificationNumber=_my_nrbdo
         || 'Sender'
         |? _page.carrierIdentificationNumber=_my_nrbdo
         || 'Carrier'
         |? _page.receiverIdentificationNumber=_my_nrbdo
         || 'Receiver'
         || ''
         ?};

      {? KPO.TYP=exec('typ_kpo','odpady')
      || _type:='Kpo'
      || _type:='Kpok'
      ?};
      _obj1:=exec('%1_%2_card'[_type,-gsub(_cardStatusCodeName,'_','')],'bdo_api',_kpoId,_role);
      _obj1.log_update('|%1'[KPO.uidref()]);

      {? _obj1.STATUS=200
      ||
         _jman:=exec('json_man','__jsonm',_obj1.DATA);
         _tab:=tab_tmp(1
            ,'LP','INTEGER','Lp.'@
            ,'N','STRING[50]','Kod BDO'@
            ,'NP','STRING[50]','Nazwa'@
            ,'W','STRING[80]','Wartość'@
         );

         _names:=_jman.getChildrenNames();
         {! _it:=1.. obj_len(_names)
         |! {? _names[_it]<>''
            || _name:=_names[_it];

               _tab.blank();
               _tab.LP:=_it;
               _tab.N:=_name;
               {? _tab.N='remarks' || _tab.NP:='Powód'@
               |? _tab.N='wasteMass' || _tab.NP:='Masa [Mg]'@
               |? _tab.N='vehicleRegNumber' || _tab.NP:='Nr. rejestracyjny samochodu'@
               |? _tab.N='additionalInfo' || _tab.NP:='Informacje dodatkowe'@
               |? _tab.N='cardStatus' || _tab.NP:='Status karty'@
               |? _tab.N='cardStatusCodeName' || _tab.NP:='Nazwa statusu'@
               |? _tab.N='previousStatusCodeName' || _tab.NP:='Poprzedni status'@
               |? _tab.N='generatingConfirmationTime' || _tab.NP:='Wygenerowano potwierdzenie dnia'@
               |? _tab.N='generatingConfirmationUser' || _tab.NP:='Kto wygenerował potwierdzenie'@
               |? _tab.N='approvalUser' || _tab.NP:='Zatwierdzający'@
               |? _tab.N='cardApprovalTime' || _tab.NP:='Zatwierdzono dnia'@
               |? _tab.N='cardNumber' || _tab.NP:='Symbol karty'@
               |? _tab.N='cardWithdrawalTime' || _tab.NP:='Wycofano dnia'@
               |? _tab.N='plannedTransportTime' || _tab.NP:='Zaplanowano dnia'@
               |? _tab.N='realTransportTime' || _tab.NP:='Data transportu'@
               |? _tab.N='withdrawnByUser' || _tab.NP:='Kartę wycofał operator'@
               |? _tab.N='year' || _tab.NP:='Rok'@
               |? _tab.N='communeArea' || _tab.NP:='Gmina'@
               |? _tab.N='revisedBy' || _tab.NP:='Odrzucił operator'@
               |? _tab.N='wasteCodeExtended' || _tab.NP:='Kod rozszerzony odpadu'@
               |? _tab.N='correctedWasteMass' || _tab.NP:='Korygowana masa [Mg]'@
               |? _tab.N='wasteCodeExtendedDescription' || _tab.NP:='Opis rozszerzony odpadu'@
               |? _tab.N='isRevised' || _tab.NP:='Jest odrzucona'@
               |? _tab.N='receiveConfirmationTime' || _tab.NP:='Data potwierdzenia przejęcia'@
               |? _tab.N='receiveConfirmationUser' || _tab.NP:='Przejęcie potwierdził'@
               |? _tab.N='revisedWasteMass' || _tab.NP:='Masa przed odrzuceniem [Mg]'@
               |? _tab.N='transportConfirmationTime' || _tab.NP:='Data potwierdzenia transportu'@
               |? _tab.N='transportConfirmationUser' || _tab.NP:='Transport potwierdził'@
               ?};
               _tab.W:={? _jman.typeOf(_name)=_jman.Const.TYPE.STRING || _jman.getValue(_name)
                       |? _jman.typeOf(_name)=_jman.Const.TYPE.NUMBER |
                          _jman.typeOf(_name)=_jman.Const.TYPE.BOOLEAN || $_jman.getValue(_name)
                       || ''
                       ?};
               _tab.add()
            ?}
         !};

         _wer:=_tab.mk_sel('Informacje z systemu BDO'@,'T',0,'moreinfokpo',1,,,,'U');
         _tab.win_fld(_wer,,'LP',,,5);
         _tab.win_fld(_wer,,'N',,,40);
         _tab.win_fld(_wer,,'NP',,,40);
         _tab.win_fld(_wer,,'W',,,80);
         _tab.win_sel(_wer);
         _tab.select()
      || KOMM.error(_obj1.MESSAGE,~_selected)
      ?}
   || KOMM.error(_obj.MESSAGE,~_selected)
   ?}
|| KOMM.msg('Karta nie została wysłana do BDO (brak identyfikatora).'@,~_selected)
?};
~~


\kpo_qr_szukam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [20.14]
:: OPIS: Szukanie karty wg QR-code
::----------------------------------------------------------------------------------------------------------------------
_id:=obj_new('id'); _id.id:='';
params_set('id',_id);

_valid:="
   _chk:=1;
   _obj:=json_parse(UMO.KQR);
   {? var_pres('_obj')<100
   || _chk:=0
   |? var_pres('CardId',_obj)<>type_of('')
   || _chk:=0
   || _id:=_obj.CardId;
      params_get().id.id:=_id
   ?};
   {? ~_chk
   || FUN.info('Nieprawidłowy QR-code.'@)
   ?};
   _chk
";

UMO.win_edit('KPO');
UMO.KQR:='';
{? UMO.edit(_valid)
|| KPO.cntx_psh();
   KPO.index('BDO_ID');
   KPO.prefix(_id.id);
   {? KPO.first()
   || _kpo:=KPO.ref()
   || _kpo:=null()
   ?};
   KPO.cntx_pop();
   _found:=(KPO.f_active()>0 & KPO.f_seek(_kpo)) | (KPO.f_active()=0 & KPO.seek(_kpo));
   {? ~_found
   || FUN.info('Nie znaleziono KPO: \'%1\'.'@[_id.id])
   ?}
?};
~~


\wzor_kqrkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MaX [20.14]
:: OPIS: Wzorzec dla pola UMO.KQR
::   WY: Wzorzec
::----------------------------------------------------------------------------------------------------------------------
::'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&'
''


\kpo_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Pokazuje powiązane z kartą przekazania odpadów zgłoszenie jednorazowe
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select FAS.KOD,ZLE.CZUM,UM.SYM,KH.SKR,ZLP.DP,ZLP.DZP,ZLP.DZ,ZLP.DW,UL.KDP,MIA.NAZ,UL.UL,POS.NR,'
                 'POJAZDY.NRREJ,ZLBR.KOD AS ZLBR,PRACW.PRAC,ZLE.TFAK, '
                 'ZLP.REFERENCE AS REF,ZLP.SR,\':_c\' as S,\':_d\' as FAKS, ZLP.FAP, ZLP.FAPU '
          'from @ZLP '
             'left join @KPO using (ZLP.KPO,KPO.REFERENCE) '
             'left join @ZLE using (ZLP.ZLE,ZLE.REFERENCE) '
             'left join @FAS using (ZLE.FAS,FAS.REFERENCE) '
             'left join @UM using (ZLP.UM,UM.REFERENCE) '
             'left join @KH using (ZLP.KH,KH.REFERENCE) '
             'left join @UL using (ZLP.UL,UL.REFERENCE) '
             'left join @MIA using (ZLP.MIA,MIA.REFERENCE) '
             'left join @POS using (ZLP.POS,POS.REFERENCE) '
             'left join @POJAZDY using (ZLP.POJAZD,POJAZDY.REFERENCE) '
             'left join @ZLBR using (ZLP.ZLBR,ZLBR.REFERENCE) '
             'left join @PRACW using (ZLP.PRACW,PRACW.REFERENCE) '
          'where ZLP.KPO = \':_a\' or \':_b\'=ZLP.REFERENCE'
          ,$KPO.ref(),KPO.RZLP,form('',20),form('',50));
_win:=_tab.mk_sel('Powiązane zgłoszenia'@,,0,'kpo_zgl_list');
_tab.win_fld(_win,,'KOD',,,-3,,,'Sposób fakturowania'@);
_tab.win_fld(_win,,'CZUM',,,-3,,,'Zgłoszenie jednorazowe'@,,,2,,"'N'","'T'");
_tab.win_fld(_win,,'SYM',,,14,,,'Symbol umowy'@);
_tab.win_fld(_win,,'SKR',,,13,,,'Kontrahent'@);
_tab.win_fld(_win,,'DP',,,9,,,'Podstawiono'@);
_tab.win_fld(_win,,'DZP',,,9,,,'Podstawienia'@);
_tab.win_fld(_win,,'DZ',,,8,,,'Wykonania'@);
_tab.win_fld(_win,,'DW',,,8,,,'Wykonano'@);
_tab.win_fld(_win,,'KDP',,,7,,,'Kod'@);
_tab.win_fld(_win,,'NAZ',,,10,,,'Miasto'@);
_tab.win_fld(_win,,'UL',,,13,,,'Ulica'@);
_tab.win_fld(_win,,'NR',,,6,,,'Numer'@);
_tab.win_fld(_win,,'NRREJ',,,6,,,'Pojazd'@);
_tab.win_fld(_win,,'ZLBR',,,7,,,'Brygada'@);
_tab.win_fld(_win,,'PRAC',,,8,,,'Pracownik'@);
_tab.win_fld(_win,,'TFAK',,,-3,,,'Fakturuj według realizacji'@,,,2,,"'T'","'N'");
_tab.win_fld(_win,,'S',,,12,,,'Status'@);
_tab.win_fld(_win,,'FAKS',,,19,,,'Faktura'@);
_tab.win_sel(_win);

_fb:="
   _tab:=cur_tab(1,1);
   _ref:=_tab.REF;
   _msk:=ref_name(_ref);
   ZLP.cntx_psh();
   ZLE.cntx_psh();
   ZLP.use(_msk);
   ZLP.clear();
   {? ZLP.seek(_ref)
   || exec('zle_win_edit_set','!lum_zgl_dzgl');
      ZLP.ZLE();
      ZLP.get();
      ZLE.get();
      ZLP.memo_get(,'OPIS');
      ZLEC.MIA:=ZLE.POS().UL().MIA;
      ZLEC.UL:=ZLE.POS().UL;
      ZLE.display()
   ?};
   ZLP.cntx_pop();
   ZLE.cntx_pop()
";
_tab.win_act(_win,,'Wyświetl',,,,_fb);

_fb:="
   _tab:=cur_tab(1,1);
::  Przypisanie statusu
   {? _tab.SR='N'
   || _tab.S:={? _tab.CZUM='N' & _tab.DW<>date(0,0,0)
             || 'Wykonano'
             |? _tab.CZUM='N' & _tab.DP<>date(0,0,0)
             || 'Podstawiono'
             || 'Niezrealizowane'
             ?}
   |? _tab.SR='R'
   || _tab.S:='Realizowane'
   |? _tab.SR='X'
   || _tab.S:='Anulowane'
   || _tab.S:='Zrealizowane'
   ?};
:: Przypisanie pola Faktura
   {? _tab.FAP<>''
   || _tab.FAKS:=exec('FindAndGet','#table',FAP,_tab.FAP,,\"FAP.FAKS().SYM\",'')+' poz. '@+
                 exec('FindAndGet','#table',FAP,_tab.FAP,,\"$FAP.POZ\",'')
   ?};
   {? _tab.FAPU<>''
   || _tab.FAKS+={? _tab.FAKS<>'' || ', ' || exec('FindAndGet','#table',FAP,_tab.FAPU,,\"FAP.FAKS().SYM\",'')+' poz. '@ ?}+
                 exec('FindAndGet','#table',FAP,_tab.FAPU,,\"$FAP.POZ\",'')+' (dodatek)'@
   ?}
";
_tab.win_act(_win,,'Rekord',,,,_fb);

{? _tab.size()
|| _tab.select()
|| FUN.info('Brak powiązanych zgłoszeń z daną kartą przekazania odpadów'@)
?};
~~


\ZLP_send_reset
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Resetuje status wysyłki powiadomienia o braku KPO do zaplanowanego zlecenia jednorazowego
::   WE: [_a] - ZLP.ref lub bieżący rekord
::       [_b] - INTEGER - czy wyświetlać dialogi
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZLP.ref())
|| _ref:=_a
?};

_dialog:=1;
{? var_pres('_b')=type_of(0)
|| _dialog:=_b
?};

_result:=0;
_can_continue:=1;

ZLP.cntx_psh();
{? _ref<>null()
|| ZLP.prefix();
   {? ZLP.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? ZLP.SENT_KPO='T'
   ||
      _can_reset:=1;
      _msg:='Zresetować status wysyłki powiadomienia o braku KPO do zaplanowanego zgłoszenia?'@;

      {? _can_reset>0 & _dialog>0
      || _can_continue:=FUN.ask(_msg)
      ?};

      {? _can_reset>0 & _can_continue>0
      || ZLP.SENT_KPO:='N';
         _can_continue:=ZLP.put()
      ?}
   || {? _dialog>0 & _dialog<>2
      || FUN.emsg('Status wysyłki nie wymaga resetowania.'@)
      ?}
   ?}
?};
ZLP.cntx_pop();
{? _can_continue>0
|| _result:=1
?};
_result


\odp_nb_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Wartosc blank dla pola NB (Niebezpieczny) tabeli ODP (rodzaje odpadów)
::----------------------------------------------------------------------------------------------------------------------
VAR.NB


\kpo2keo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tworzenie wpisów do ewidencji opadów na podstawie kart przekazania odpadów.
::       Działa na aktualnym rekordzie tabeli KPO.
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=0;
:: Sprawdzenie statusu karty
{? KPO.KPO_STAT=exec('kpo_stat_receive_confirmation','odpady') |
   KPO.KPO_STAT=exec('kpo_stat_transport_confirmation','odpady')
|| _can_continue:=1
|| {? VAR.GRUPA='T'
   || KOMM.add('Karta nr \'%1\' - nieprawidłowy status karty.'@[KPO.SYM],3)
   || FUN.emsg('Nieprawidłowy status karty.\nWpisy do ewidencji mogą być tworzone na podstawie kart, dla których '
               'w systemie BDO potwierdzono przyjęcie lub transport odpadów.'@)
   ?}
?};
{? _can_continue
|| _czy_kh:={? KPO.KH=VAR.POD & KPO.KH_ODB=VAR.MPD || 1 || 0 ?};
   _czy_kh2:={? KPO.KH_2=VAR.POD & KPO.KH_ODB_2=VAR.MPD || 1 || 0 ?};
   _can_continue:=1;
:: Wstępe walidacje
   {? ~(_czy_kh | _czy_kh2)
   || {? VAR.GRUPA<>'T'
      || FUN.info('Zarówno przekazujący jak i przejmujący odpad niezgodny z wybranym kontekstem pracy.'@)
      || KOMM.add('Karta nr \'%1\' - Zarówno przekazujący jak i przejmujący odpad niezgodny z wybranym '
                  'kontekstem pracy.'@[KPO.SYM],2)
      ?}
   ?};
   {? _can_continue & (_czy_kh & KPO.KEO_GEN='T') | (_czy_kh2 & KPO.KEO_REC='T')
   || {? VAR.GRUPA<>'T'
      || {? ~FUN.ask('Dana karta została już wykorzystana w ewidencji.\n'
                     'Czy mimo to generować nowe wpisy na podstawie tej karty?'@)
         || _can_continue:=0
         ?}
      || KOMM.add('Karta nr \'%1\' - na podstawie tej karty zostały już wygenerowane wpisy do ewidencji.'@[KPO.SYM],2);
         _can_continue:=0
      ?}
   ?};

   {? _can_continue
   || _env:=params_get().env;
      _tab:=_env.KPO2KEO_TAB;
      _tab_multi:=_env.KEO_MULTI_TAB;
      _env.CZY_ERR:=0;
      {? VAR.GRUPA<>'T'
      ||
::       Ustalanie maski wg biężącej daty, dla akcji grupowej maska ustalana w formule przed grupą
         _msk:=KEO.name()-2;
         _msk+=($(date()~1))+2;
         KEO.use(_msk);
         KEO.cntx_psh();
         KEOP.cntx_psh();
         _msk:=KEOP.name()-2;
         _msk+=($(date()~1))+2;
         KEOP.use(_msk);
         _tab.erase();
         _tab_multi.erase()
      ?};
      _tab_multi.index(_env.MULTI_NDX1);
::    Dołączenie wpisu jako przekazujący
      {? _czy_kh
      || params_exec('kpo2keo_single','odpady',1)
      ?};
::    Dołączenie wpisu jako przejmujący
      {? _czy_kh2
      || params_exec('kpo2keo_single','odpady',0)
      ?};
      {? VAR.GRUPA<>'T'
      ||
::       Przypisanie odpowiednich kart ewidencji do odpadów oraz tworzenie wpisów wg przygotowanej tabeli
::       Dla akcji grupowej jest to wykonywane w formule grupa po
         {? params_exec('tab_multi_sel','odpady')
         || params_exec('keopfromtab','odpady')
         ?};
         KEO.cntx_pop();
         KEOP.cntx_pop()
      ?}
   ?}
?};
~~


\kpo2keo_single
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tworzenie pojedyńczego rekordu do tabeli tymczasowej wykorzystywanej do tworzenie wpisów do kart
::       ewidencji opadów na podstawie kart przekazania odpadów. Działa na aktualnym rekordzie tabeli KPO.
::   WE: [_a] - INTEGER - strona wymiany: [1] - przekazujący, 0 - przejmujący
::----------------------------------------------------------------------------------------------------------------------
_tra:=_a;
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
_tab_multi:=_env.KEO_MULTI_TAB;
_can_add:=1;
:: Przypadek, gdy karta przekazania odpadów komunalnych - przekazanie i nie ma przypisanej gminy
_tra_empty:={? KPO.TYP=exec('typ_kpok_tra','odpady') & KPO.KOD_G='' || 1 || 0 ?};

_kh_odb:=
   {? _tra
   || {? KPO.KH_ODB<>null()
      || KPO.KH_ODB
      || exec('FindInSet','#table','KH_ODB','NRBDO',KPO.KH_MPD,KPO.KH,"KH_ODB.ref()",null())
      ?}
   || {? KPO.KH_ODB_2<>null()
      || KPO.KH_ODB_2
      || exec('FindInSet','#table','KH_ODB','NRBDO',KPO.KH_2_MPD,KPO.KH_2,"KH_ODB.ref()",null())
      ?}
   ?};
{? _kh_odb<>null()
|| _tab.blank();
   {? KPO.TYP=exec('typ_kpo','odpady')
   || _tab.KEO_TYP:=exec('typ_keo','odpady_keo');
      _tab.KEOP_TYP:=
         {? _tra
         || exec('typ_keo_forwarded','odpady_keo')
         || exec('typ_keo_collected','odpady_keo')
         ?}
   || _tab.KEO_TYP:=exec('typ_keok','odpady_keo');
      _tab.KEOP_TYP:=
         {? _tra & KPO.TYP=exec('typ_kpok_rec','odpady')
         || exec('typ_keok_collected','odpady_keo')
         |? _tra & KPO.TYP=exec('typ_kpok_tra','odpady')
         || exec('typ_keok_transferred','odpady_keo')
         || exec('typ_keok_received','odpady_keo')
         ?}
   ?};
   ODP.cntx_psh();
   KPO.ODP();
   _tab.KOD:=ODP.KOD;
   _tab.NAZ:=ODP.NAZ;
   _tab.ODP_REF:=$ODP.ref();
   ODP.cntx_pop();
   _tab.MPD_REF:=$_kh_odb;
   _tab.DT:=KPO.DTR;
   _tab.MASA:=KPO.IL;
   _tab.NRDOK:=KPO.SYM;
   _tab.KOD_G:=KPO.KOD_G;
   _tab.KPO_REF:=$KPO.ref();
:: Wyszukanie karty ewidencji o podanym kodzie odpadów (zawsze w masce bieżącej - wg dzisiejszej daty)
   KEO.cntx_psh();
   KEO.index('KPO2KEO');
   {? _tab.KEO_TYP=exec('typ_keo','odpady_keo')
   || KEO.prefix(_kh_odb,_tab.KEO_TYP,KPO.ODP)
   || {? _tra_empty
      || KEO.prefix(_kh_odb,_tab.KEO_TYP,KPO.ODP)
      || KEO.prefix(_kh_odb,_tab.KEO_TYP,KPO.ODP,KPO.KOD_G,)
      ?}
   ?};
   {? KEO.first()
   || _tab.KEO_REF:=$KEO.ref();
      {? KEO.size()>1 | _tra_empty
      ||
::       Więcej niż jedna karta dla danego rodzaju odpadu
         {? ~_tab_multi.find_key($_kh_odb,_tab.KEO_TYP,_tab.KOD,KPO.KOD_G,)
         || _tab_multi.blank();
            _tab_multi.KEO_TYP:=_tab.KEO_TYP;
            _tab_multi.KOD:=_tab.KOD;
            _tab_multi.NAZ:=_tab.NAZ;
            _tab_multi.KOD_G:=KPO.KOD_G;
            _tab_multi.NAZ_G:=KPO.NAZ_G;
            _tab_multi.TRA_EMP:=_tra_empty;
            {? ~_tra_empty
            || _tab_multi.SYM:=KEO.SYM;
               _tab_multi.EX:=KEO.EX;
               _tab_multi.EX_DESC:=KEO.EX_DESC;
               _tab_multi.HAZ:=KEO.HAZ;
               _tab_multi.HAZ_DESC:=KEO.HAZ_DESC;
               _tab_multi.KEO_REF:=$KEO.ref()
            ?};
            _tab_multi.MPD:=exec('FindAndGet','#table',KH_ODB,_kh_odb,,"KH_ODB.NAZ",'');
            _tab_multi.MPD_BDO:=exec('FindAndGet','#table',KH_ODB,_kh_odb,,"KH_ODB.NRMPDBDO",'');
            _tab_multi.MPD_REF:=$_kh_odb;
            _tab_multi.ODP_REF:=_tab.ODP_REF;
            {? _tab_multi.MPD='' || _tab.MPD:=_tab.MPD_BDO ?};
            _tab_multi.add()
         ?}
      ?}
   ||
      {? _tra_empty
      ||
::       Nie ma szukanej karty ewidencji i nie wiadomo na jaką gminę utworzyć
         {? _env.CZY_ERR=0
         || {? VAR.GRUPA='T'
            || KOMM.add('Karta nr \'%1\' - nie odnaleziono powiązanej karty ewidencji odpadów.'@[KPO.SYM],3)
            || FUN.emsg('Nie odnaleziono powiązanej karty ewidencji odpadów.'@)
            ?};
            _env.CZY_ERR:=1
         ?};
         _can_add:=0
      ||
::       Nie ma szukanej karty ewidencji, zakładanie nowej karty
         KEO.blank();
         KEO.ROK:=date()~1;
         KEO.KH_ODB:=_kh_odb;
         KEO.TYP:=_tab.KEO_TYP;
         KEO.ODP:=KPO.ODP;
         KEO.KOD_G:=KPO.KOD_G;
         KEO.NAZ_G:=KPO.NAZ_G;
         {? _tra
         || KEO.IS_GENE:='T'
         || {? _tab.KEO_TYP=exec('typ_keo','odpady_keo')
            || KEO.IS_COLL:='T'
            || KEO.IS_RECV:='T'
            ?}
         ?};
         {? KEO.add()
         || {? VAR.GRUPA='T'
            || KOMM.add('Utworzono kartę ewidencji odpadów na podstawie karty przekazania odpadów %1'@[_tab.NRDOK],2)
::            || FUN.info(''@)
            ?};
            exec('keo_nr_nadaj','odpady_keo');
            KEO.put();
            _tab.KEO_REF:=$KEO.ref()
         || {? VAR.GRUPA='T'
            || KOMM.add('Nie udało się utworzyć karty ewidencji odpadów na podstawie karty przekazania odpadów %1.'@
                        [_tab.NRDOK],3)
            || FUN.emsg('Nie udało się utworzyć karty ewidencji odpadów.'@)
            ?}
         ?}
      ?}
   ?};
   {? _can_add || _tab.add() ?};
   KEO.cntx_pop()
||
:: Brak przypisanego odbiorcy
   {? VAR.GRUPA='T'
   || {? _tra
      || KOMM.add('Karta nr \'%1\' - nie odnaleziono odbiorcy  powiązanym z kontrahentem przekazującym odpad.'@
                  [KPO.SYM],3)
      || KOMM.add('Karta nr \'%1\' - nie odnaleziono odbiorcy  powiązanym z kontrahentem przejmującym odpad.'@
                  [KPO.SYM],3)
      ?}
   || {? _tra
      || FUN.emsg('Nie odnaleziono odbiorcy  powiązanym z kontrahentem przekazującym odpad.'@)
      || FUN.emsg('Nie odnaleziono odbiorcy  powiązanym z kontrahentem przejmującym odpad.'@)
      ?}
   ?}
?};
~~


\kpo2keo_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tworzenie wpisów do ewidencji opadów na podstawie kart przekazania odpadów - akcja przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
_tab_multi:=_env.KEO_MULTI_TAB;
_tab.erase();
_tab_multi.erase();
VAR.GRUPA:='T';
KOMM.init(250,,'Dołączanie wpisów do ewidencji na podstawie kart przekazania odpadów'@);
:: Ustalenie maski kart ewidencji odpadów na zgodną z bieżącą datą
KEO.cntx_psh();
_msk:=KEO.name()-2;
_msk+=($(date()~1))+2;
KEO.use(_msk);
KEOP.cntx_psh();
_msk:=KEOP.name()-2;
_msk+=($(date()~1))+2;
KEOP.use(_msk);
1


\kpo2keo_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tworzenie wpisów do ewidencji opadów na podstawie kart przekazania odpadów - akcja po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
_tab_multi:=_env.KEO_MULTI_TAB;
::exec('select','#table',_tab);
{? params_exec('tab_multi_sel','odpady')
|| params_exec('keopfromtab','odpady');
   KOMM.select()
?};
KEO.cntx_pop();
KEOP.cntx_pop();
VAR.GRUPA:='N';
1


\tab_multi_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Wyświetla tabelę do ustalania kart ewidencji odpadów dla danych rodzajów odpadów oraz nanosi wprowadzone zmiany
::       do tabeli dodawanych rekordów
::   WY: wynik: 0 - przerwanie akcji przez użytkownika, 1 - kontynuacja generowania wpisów
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
_tab_multi:=_env.KEO_MULTI_TAB;
_continue:=1;
{? _tab_multi.first()
||
::  Więcej niż jedna karta ewidencji odpadów dla danego kodu odpadu, wybór odpowiedniej z nich
   {? _tab_multi.size()=1
   ||
::    Jak tylko jeden taki przypadek to wyświetlane jest bezpośrednio okno wertowania kart ewidencji
      _continue:=params_exec('tab_multi_sel_one','odpady',1)
   ||
::    Jak więcej niż jeden przypadek to wyświetlane jest okno wyboru do wskazania karty dla danego rodzaju odpadu
      params_set(params_get());
      {? ~_tab_multi.select()
      || _continue:=0
      ?}
   ?};
   {? _continue
   ||
::    Przepisanie wybranych kart ewidencji odpadów do rekordów tabeli
      {? _tab_multi.first()
      || _tab.cntx_psh();
         {!
         |?
            _tab.prefix(_tab_multi.MPD_REF,_tab_multi.ODP_REF,_tab_multi.KEO_TYP);
            {? _tab.first()
            || {!
               |?
                  {? _tab_multi.KEO_REF<>''
                  || _tab.KEO_REF:=_tab_multi.KEO_REF;
                     _tab.put();
                     _tab.next()
                  ||
::                   Usuwanie wpisów z nieprzypisaną kartą
                     _tab.del()
                  ?}
               !}
            ?};
            _tab_multi.next()
         !};
         _tab.cntx_pop()
      ?}
   ?}
?};
_continue


\tab_multi_sel_one
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Wyświetla dostępna do wyboru listę kart ewidencji dla danego (pojedynczego) rodzaju odpadu.
::   WE: _a - miejsce wywołania: 0 - F3 dla pola z listą kart do przypisania,
::                              [1] - bezpośrednio przy generowaniu wpisu z KPO
::   WY: symbol wybranej karty (_a=0) lub wynik działania: 1 - akceptacja, 0 - rezygnacja (dla _a=1)
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of(0) || _a || 1 ?};
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
_tab_multi:=_env.KEO_MULTI_TAB;
_continue:=1;
KEO.cntx_psh();
{? _tab_multi.KEO_TYP=exec('typ_keo','odpady_keo')
|| KEO.win_sel('SEL_KEO')
|| KEO.win_sel('SEL_KEOK')
?};
KEO.index('KPO2KEO');
{? _tab_multi.TRA_EMP
|| KEO.prefix(exec('FindAndGet','#table',KH_ODB,_tab_multi.MPD_REF,,,null()),_tab_multi.KEO_TYP,
              exec('FindAndGet','#table',ODP,_tab_multi.ODP_REF,,,null()))
|| KEO.prefix(exec('FindAndGet','#table',KH_ODB,_tab_multi.MPD_REF,,,null()),_tab_multi.KEO_TYP,
              exec('FindAndGet','#table',ODP,_tab_multi.ODP_REF,,,null()),_tab_multi.KOD_G,)
?};
{? KEO.first()
|| {? KEO.select()
   || _tab_multi.SYM:=KEO.SYM;
      {? ~_tab_multi.TRA_EMP
      || _tab_multi.KOD_G:=KEO.KOD_G;
         _tab_multi.NAZ_G:=KEO.NAZ_G
      ?};
      _tab_multi.EX:=KEO.EX;
      _tab_multi.EX_DESC:=KEO.EX_DESC;
      _tab_multi.HAZ:=KEO.HAZ;
      _tab_multi.HAZ_DESC:=KEO.HAZ_DESC;
      _tab_multi.KEO_REF:=$KEO.ref();
      _tab_multi.put()
   || _continue:=0
   ?}
?};
KEO.cntx_pop();
{? _typ=1 || _continue || _tab_multi.SYM?}


\keopfromtab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Tworzy wpis do karty ewidencji odpadów (KEOP) na podstawie rekordu tabeli tymczasowej
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=_env.KPO2KEO_TAB;
{? _tab.first()
||
   {!
   |?
      KEOP.blank();
      KEOP.KEO:=exec('FindAndGet','#table',KEO,_tab.KEO_REF,,,null());
      KEOP.TYP:=_tab.KEOP_TYP;
      KEOP.RODZ:=
         {? exec('FindAndGet','#table',KPO,_tab.KPO_REF,,"@.KPO.TYP=exec('typ_kpo','odpady')",0)
         || exec('rodz_kpo','odpady_keo')
         || exec('rodz_kpok','odpady_keo')
         ?};
      KEOP.DT:=_tab.DT;
      KEOP.AR:=KEOP.DT~1;
      KEOP.AM:=KEOP.DT~2;
      KEOP.MASA:=_tab.MASA;
      KEOP.NRDOK:=_tab.NRDOK;
      KEOP.RKPO:=_tab.KPO_REF;
::    Walidacja
      {? KEOP.KEO<>null() & KEOP.TYP<>'' & KEOP.DT<>date(0,0,0) & KEOP.MASA>0 & KEOP.NRDOK<>'' & KEOP.RKPO<>''
      || {? KEOP.add()
         || _typ:={? KEOP.TYP=exec('typ_keo_collected','odpady_keo') | KEOP.TYP=exec('typ_keok_received','odpady_keo')
                  || 'przyjęte'@
                  |? KEOP.TYP=exec('typ_keok_collected','odpady_keo')
                  || 'odbiór'@
                  || 'przekazane'@
                  ?};
            _keo_sym:=exec('FindAndGet','#table',KEO,KEOP.KEO,,"KEO.SYM",'');
            {? VAR.GRUPA='T'
            || KOMM.add('Na podstawie karty \'%1\' dołączono wpis do ewidencji \'%2\' typu "%3".'@
                        [exec('FindAndGet','#table',KPO,KEOP.RKPO,,"KPO.SYM",''),_keo_sym,_typ],1)
            || FUN.info('Dołączono wpis do ewidencji \'%1\' typu "%2".'@[_keo_sym,_typ])
            ?}
         ?}
      || {? VAR.GRUPA='T'
         || KOMM.add('Karta \'%1\' nie posiada wszystkich danych wymaganych do utworzenia wpisu.'@
                     [exec('FindAndGet','#table',KPO,KEOP.RKPO,,"KPO.SYM",'')],3)
         || FUN.emsg('Karta nie posiada wszystkich danych wymaganych do utworzenia wpisu.'@)
         ?}
      ?};
      _tab.next()
   !}
?};
~~


\kpo_bdo_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Sprawdzenie, czy na portalu BDO jest jakaś karta przekazania o takiej samej charakterystyce
::       (kod odpadu + pojazd + termin wywozu)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_tab:=_env.KPO_FIND_TAB;

:: Czyszczenie wyników
_tab.erase();

:: UWAGA: w tym przypadku nie jest robiona pętla w celu podebrania kolejnych wyników
::         - nie powinno być więcej niż jedna paczka danych
_page:=1;
_result:=0;

{? KPO.TYP=exec('typ_kpok_rec','odpady') | KPO.TYP=exec('typ_kpok_tra','odpady')
|| _type:='Kpok'
|| _type:='Kpo'
?};

{? KPO.KH=VAR.POD
|| _role:='Sender'
|? KPO.KH_3=VAR.POD
|| _role:='Carrier'
|? KPO.KH_2=VAR.POD
|| _role:='Receiver'
|| _role:=''
?};

{? _role='' || return(_result) ?};

:: Podręczne JMANy
_jman:=exec('json_man','__jsonm');
_jman1:=_jman.new('{}');
_jman2:=_jman.new('{}');

_obj:=exec('%1_%2_search'[_type,-_role],'bdo_api',1,50,,,
   ,exec('wasteCode','bdo_fun',KPO.ODP,0)
   ,KPO.NRREJ
   ,iso_datetime_value(KPO.DTR,KPO.GTR)
);
{? _obj.STATUS=200
|| _jman.load(_obj.DATA);
   _jman1.load(_jman.getJSON('items'));
   _size:=_jman1.countChildren();
   {? _size>0
   || {! _it:=1.. _size
      |! _jman2.load(_jman1.getJSON('[%1]'[$_it]));
         _tab.TYP:=KPO.TYP;
         _tab.ODP:=_jman2.getValue('wasteCode');
         _tab.DTR:=iso_datetime_parse(_jman2.getValue('plannedTransportTime')).date;
         _tab.GTR:=iso_datetime_parse(_jman2.getValue('plannedTransportTime')).time;
         _tab.ID:={? KPO.TYP=exec('typ_kpo','odpady') || _jman2.getValue('kpoId') || _jman2.getValue('kpokId') ?};
         _tab.NRREJ:=_jman2.getValue('vehicleRegNumber');
         _tab.EX:={? _jman2.getValue('wasteCodeExtended') || 'T' || 'N' ?};
         _tab.EX_DESC:=
            {? _jman2.typeOf('wasteCodeExtendedDescription',1)=_jman2.Const.TYPE.STRING
            || _jman2.getValue('wasteCodeExtendedDescription')
            || ''
            ?};
         _tab.ERP:={? exec('FindInSet','#table','KPO','BDO_ID',_tab.ID,,,1)=null() || 'N' || 'T' ?};
::       Dodajemy tylko wpisy 100% zgodne
         {? _tab.DTR=KPO.DTR & _tab.GTR=KPO.GTR & _tab.NRREJ=KPO.NRREJ
         || _tab.add()
         ?}
      !}
   ?}
|| KOMM.error(exec('podziel_string','#string',_obj.MESSAGE),1)
?};

_result:=_tab.first();

_result


\kpo_bdo_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Wyświetla karty przekazania o charakterystyce zgodnej z bieżącym rekordem
::       (kod odpadu + pojazd + termin wywozu)
::       Zakładamy wcześniejsze wywołanie \kpo_bdo_find
::   WY: identyfikator karty w systemie BDO / ''
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;
_tab:=_env.KPO_FIND_TAB;

_result:='';

{? _tab.size()>0
|| {? _tab.select()
   || _result:=_tab.ID
   ?}
?};

_result


\typ_osw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Typ karty: 'OSWK Oświadczenie klienta'
::----------------------------------------------------------------------------------------------------------------------
'OSWK Oświadczenie klienta'


\kpo_tr_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Powiązanie KPO z transportem
::   WE: [_a] - 1(domyślnie) powiązanie, 0-usunięcie powiązania
::----------------------------------------------------------------------------------------------------------------------
_adddel:={? var_pres('_a')=type_of(0) || _a || 1 ?};

_sel:=KPO.sel_aget();
KPO.sel_adel();
KPO.cntx_psh();
TR_NAG.cntx_psh();
{? _adddel
||
:: dodanie powiązania
   _wsel:=TR_NAG.win_sel('?');
   TR_NAG.win_sel('SELKPO');
   {? _sel.size()
   ||
:: kontrola poprawności zaznaczenia: zgodności dat, zakończonej edycji
      _oki:=-1;
      _oddz:='';
      _data:=date(0,0,0);
      {? _sel.first()
      || {!
         |? {? (KPO.prefix(); KPO.seek(_sel.REF))
            || {? KPO.STATUS='N'
               || _sel.del()
               || {? _data=date(0,0,0)
                  || _oki:=1;
                     _oddz:=KPO.ODDZ;
                     _data:=KPO.DTR;
                     _sel.next()
                  |? _data<>KPO.DTR | _oddz<>KPO.ODDZ
                  || _oki:=0;
                     0
                  || _sel.next()
                  ?}
               ?}
            || _sel.del()
            ?}
         !}
      ?};
      {? _oki<0
      || FUN.info(
            'Wśród zaznaczony kart żadna nie ma statusu Zakończonej redakcji.\nPowiązanie z transportem niemożliwe.'@
         )
      |? _oki=0
      || FUN.info(
            'Wśród zaznaczony kart są różne daty transportu lub oddziały.\nPowiązanie z transportem niemożliwe.'@
         )
      |? FUN.ask('Powiązać zaznaczone Karty przekazania odpadów z wybranym transportem?'@)
      || _wyb:=-1;
         TR_NAG.use('trnt____');
         TR_NAG.index('WYJ_D');
         TR_NAG.prefix(_oddz,_data);
         {? (_wyb:=TR_NAG.first();_wyb) & TR_NAG.select()
         || _tr_nag:=TR_NAG.IDADD;
            _tr_sym:=TR_NAG.SYM;
            {? _sel.first()
            || {!
               |? {? (KPO.prefix(); KPO.seek(_sel.REF) & KPO.STATUS<>'N')
                  || KPO.TR_NAG:=_tr_nag;
                     KPO.TR_SYM:=_tr_sym;
                     KPO.put(1)
                  ?};
                  _sel.next()
               !}
            ?}
         |? ~_wyb
         || FUN.info('Brak transportów na dzień: %1, w oddziale: %2.'@[$_data,_oddz])
         ?}
      ?}
   |? KPO.STATUS='N'
   || FUN.info('Nie zakończono redakcji karty: %1.\nPowiązanie z transportem niemożliwe.'@[KPO.SYM])
   |? FUN.ask('Powiązać Kartę przekazania odpadów z wybranym transportem?'@)
   || _wyb:=-1;
      _oddz:=KPO.ODDZ;
      _data:=KPO.DTR;
      TR_NAG.use('trnt____');
      TR_NAG.index('WYJ_D');
      TR_NAG.prefix(_oddz,_data);
      {? (_wyb:=TR_NAG.first();_wyb) & TR_NAG.select()
      || KPO.TR_NAG:=TR_NAG.IDADD;
         KPO.TR_SYM:=TR_NAG.SYM;
         KPO.put(1)
      |? ~_wyb
      || FUN.info('Brak transportów na dzień: %1, w oddziale: %2.'@[$_data,_oddz])
      ?}
   ?};
   TR_NAG.win_sel(_wsel)
||
:: usunięcie powiązania
   {? _sel.first() & FUN.ask('Usunąć powiązanie zaznaczonych Kart przekazania odpadów z transportem?'@)
   || {!
      |? {? (KPO.prefix(); KPO.seek(_sel.REF) & KPO.TR_NAG<>'')
         || KPO.TR_NAG:='';
            KPO.TR_SYM:='';
            KPO.put(1)
         ?};
         _sel.next()
      !}
   |? KPO.TR_NAG=''
   || FUN.info('Karta przekazania odpadów %1 nie jest powiązana z transportem.'@[KPO.SYM])
   |? FUN.ask('Usunąć powiązanie Karty przekazania odpadów z transportem?'@)
   || KPO.TR_NAG:='';
      KPO.TR_SYM:='';
      KPO.put(1)
   ?}
?};
KPO.cntx_pop();
TR_NAG.cntx_pop();
obj_del(_sel);
~~


\isKPO
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Sprawdza czy dany transport powiązano z KPO
::   WE: [_a] - TR_NAG.IDADD
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_msk:={? TR_NAG.WYJ_D<>date(0,0,0) || (KPO.name()-3)+TR_NAG.ODDZ+form((TR_NAG.WYJ_D~1)-2000,-2,0,'99') || '' ?};
_tr_nag:=_a;

{? _msk<>''
|| KPO.cntx_psh();
   KPO.use(_msk);
   KPO.index('TR_NAG');
   KPO.prefix(_tr_nag);
   _res:=KPO.first();
   KPO.cntx_pop()
?};
_res


\add_kpo_tr_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Sprawdza czy dany transport powiązano z KPO
::   WE: [_a] - TR_NAG.IDADD
::   WY: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_tr_nag:=TR_NAG.IDADD;
_tr_sym:=TR_NAG.SYM;
_data:=TR_NAG.WYJ_D;
_ref:=null();
KPO.cntx_psh();
KPO.index('DTR');
KPO.prefix();
KPO.f_clear();
KPO.f_set('SYM'
 ,,'\"KPO\".KORW=\'K\' and \"KPO\".TR_NAG=\'\' and \"KPO\".DTR=to_date(:_a) and \"KPO\".STATUS<>\'N\'',_data);
{? KPO.f_first()
|| _sel:=KPO.win_sel('?');
   KPO.win_sel('SEL2');
   {? KPO.select()
   || KPO.TR_NAG:=_tr_nag;
      KPO.TR_SYM:=_tr_sym;
      {? KPO.put(1) || _ref:=KPO.ref() ?}
   ?};
   KPO.win_sel(_sel)
|| FUN.info('Brak niepowiązanych Kart przekazania odpadów na dzień: %1.'@[$_data])
?};
KPO.f_clear();
KPO.cntx_pop();
{? _ref<>null() || KPO.seek(_ref) ?};
1


\del_kpo_tr_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Usuwa powiązania KPO z transportem
::----------------------------------------------------------------------------------------------------------------------
_sel:=KPO.sel_aget();
KPO.sel_adel();
KPO.cntx_psh();
{? _sel.first()
|| {? FUN.ask('Usunąć powiązanie zaznaczonych Kart przekazania odpadów z transportem %1?'@[TR_NAG.SYM])
   || {!
      |? {? (KPO.prefix(); KPO.seek(_sel.REF))
         || KPO.TR_NAG:='';
            KPO.TR_SYM:='';
            KPO.put(1)
         ?};
         _sel.next()
      !}
   ?}
|| {? FUN.ask('Usunąć powiązanie Karty przekazania odpadów %1 z transportem %2?'@[KPO.SYM,TR_NAG.SYM])
   || KPO.prefix();
      KPO.TR_NAG:='';
      KPO.TR_SYM:='';
      KPO.put(1)
   ?}
?};
KPO.cntx_pop();
obj_del(_sel);
~~


\tr_nag2kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: przepięcie TR_NAG.IDADD dla KPO
::   WE: _a - poprzedni IDADD
::       _b - nowy IDADD
::       _c - maska KPO
::   WY: 1-przepisano 0-nie
::----------------------------------------------------------------------------------------------------------------------
_tr_old:={? var_pres('_a')=type_of('') || _a || '' ?};
_tr_new:={? var_pres('_b')=type_of('') || _b || '' ?};
_msk:={? var_pres('_c')=type_of('') || _c || '' ?};

{? _msk<>''
|| KPO.cntx_psh();
   KPO.use(_msk);
   KPO.index('TR_NAG');
   KPO.prefix(_tr_old);
   {? KPO.first()
   || {!
      |? _ref:=KPO.ref(); _next:=KPO.next();
         KPO.cntx_psh();
         KPO.prefix();
         {? KPO.seek(_ref)
         || KPO.TR_NAG:=_tr_new;
            KPO.put(1)
         ?};
         KPO.cntx_pop();
         _next
      !}
   ?};
   KPO.cntx_pop()
?};
~~


\ae_var
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Po redakcji pól zmiennej VAR wykorzystywanych przez moduł odpadów
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='GTR'
|| fld(time(fld()~1,fld()~2,0))
?};
1


\renumkpot
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: renumeracja KPOT
::   WE: [_a] - ''(domyślnie) - drag&drop, 'U','D','N'-akcja do przenumerowania
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (';UDN'*_a)>1 || _a || '' ?};

KPOT.cntx_psh();
{? _tryb=''
|| _ref:=dnd_info('dest_record');
   {? KPOT.seek(_ref) || exec('zmien_lp','#dragdrop','POZ','KPO') ?}
|| exec('zmien_lpa','#dragdrop','POZ','KPO',,,_tryb)
?};
KPOT.cntx_pop()

:Sign Version 2.0 jowisz:1045 2024/01/15 11:38:24 22535d4fa23211e8eb594ed79ce0499d80b95eb820d30912dc9dadeb45f6c62cb61e76a7ac6b8bb75157cf2d7f058207801f894f53f788f0140c03b016d0e8c7dad7ae7e72ec1aee47cf4b37b3f9cd905c177b7631c5278ec2034a9c8f5b8d8f93f89a3cf1ec5267e477bae0daa8ed045cc95c2dd55ef375b637660f79cf1f8a
