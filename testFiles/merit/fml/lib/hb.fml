:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku : hb.fml
:: Utworzony   : -
:: Autor       : DPU
::======================================================================================================================
:: Zawartosc   : Formuly zwiazane z eksportem przelewow, importem wyciagow i kursow
::======================================================================================================================


\hb_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Importuje wyciagi bankowe i tabele kursow walut.
::       _vrref - ref HBP o kodzie r
::       hbfeof - koniec pliku
::       hbfline - linia wczytana z pliku
::       hbline - biezaca linia przetwarzana
::       _vcont - znacznik kontynuacji dla kolejnych rekordów
::       pbex - czy istnieje juz wyciag: 0 - tak, 1 - nie
::       pbcn - liczba zaimportowanych transakcji
::       pbcw - liczba zaimportowanych wyciagow
::       pbnw - nr ostatnio importowanego wyciagu
::   WE: _a: 1 - wyciagi bankowe; 2 - tabele kursow walut; 3 - tabele kursow z internetu
::----------------------------------------------------------------------------------------------------------------------
_vrref:=_vcont:=hbfeof:=pbcn:=pbcw:=0; pbex:=2; hbfnline:=1; _vref:=null; pbnw:='';
{? _a<>1
|| HBPKI.index('HBPKITP');
   HBPKI.prefix(1,'K',ROZNE.NUMER);
   HBP.index('HBNAZWA');
   {? HBPKI.first() & HBPKI.size()=1
   || _vref:=HBPKI.ref()
   |? HBPKI.size()>1 & _a<>3
   || _vsel:=HBPKI.mk_sel('Formaty plików'@,,0,'import_formaty');
      HBPKI.win_fld(_vsel,,'TPK',,,,50);
      HBPKI.win_act(_vsel,,'Formuła','Wybierz'@@,,,,"sel_exit()",1);
      HBPKI.win_sel(_vsel);
      {? HBPKI.select()
      || {? HBPKI.TPK='NBP kursy walut (ALERT)'
         || FUN.emsg('Wkazano niewłaściwą specyfikację, wersja (ALERT) działa jako serwis po stronie serwera.'@)
         || _vref:=HBPKI.ref()
         ?}
      ?}
   |? HBPKI.size()>1 & _a=3
   || {? HBPKI.first()
      || {!
         |? {? HBPKI.TPK=_b
            || _vref:=HBPKI.ref();
               0
            || HBPKI.next()
            ?}
         !}
      ?}
   ?};
   {? _vref & HBPKI.seek(_vref)
   || {? HBP.prefix(HBPKI.ref()); HBP.first()
      || {? HBPKI.ALLFILES<>'T'
         || ROZNE.win_edit('IMP1');
            {? _a=3
            || ROZNE.FILEPATH:=DEFINE.FILENAME+'.xml'
            |? +HBPKI.PD
            || {? 1+sys_name(0)='W' & HBPKI.FILELOC='T'
               || {? HBPKI.PD*'\\'=0 & HBPKI.PD*':'=0
                  || ROZNE.FILEPATH:=pth_dir({? HBPKI.FILELOC='T' || '@' || '' ?}+HBPKI.PD)+'\\'+HBPKI.PD
                  || ROZNE.FILEPATH:=HBPKI.PD
                  ?}
               || ROZNE.FILEPATH:=HBPKI.PD
               ?};
               {? _a=1
               || ROZNE.FILEMASK:=STR.maz2w95('Wyciągi bankowe')
                     +' MT 940 (*.sta)|*.sta|Wszystkie pliki (*.*)|*.*'
               || ROZNE.FILEMASK:=STR.maz2w95('Tabele kursów walut (*.csv, *.xml)|*.csv;*.xml|Wszystkie pliki (*.*)|*.*')
               ?}
            ?};
            {? +HBPKI.PD & ((_a<>3 & ROZNE.edit("chk_rec()")) | _a=3)
            || VAR_DEL.delete('hbfile');
               hbfile:=fopen({? HBPKI.FILELOC='T'  & _a<>3 || '@' || '' ?}+ROZNE.FILEPATH,'r',
                  {? HBPKI.FILELOC='T' & _a<>3 || 0 || 1 ?},0,1);
               {? hbfile.is_open()
               || {! |?
                     {? ~_vrref & HBP.KP().KD='r' || _vrref:=HBP.ref() ?};
                     {? HBP.KP().KD='' & HBP.DL='x' || exec('typwyn','hb') || 1 ?};
                     HBP.cntx_psh(); {? ~HBP.next() || _vcont:=1 || _vcont:=0 ?}; HBP.cntx_pop();
                     {? _vcont || HBP.seek(_vrref) & pbex || ~hbfeof & HBP.next() & pbex ?}
                  !};
                  fclose(hbfile); VAR_DEL.delete('hbfile');
                  {? HBPKI.ERFILE='T'
                  || ferase({? HBPKI.FILELOC='T' || '@' || '' ?}+ROZNE.FILEPATH,
                        {? HBPKI.FILELOC='T' & _a<>3 || 0 || 1 ?})
                  ?}
               || FUN.emsg('Import '+{? _a=1 || 'wyciągów bankowych.' || 'tabel kursów walut.' ?}
                          +'\nBłąd otwarcia pliku.',); pbcn:=0
               ?}
            |? ~+HBPKI.PD & HBPKI.RODZ='K'
            || {? HBP.KP().KD='' & HBP.DL='x' || exec('typwyn','hb') ?}
            ?}
         || {? +HBPKI.PD & _a<>3
            || {? HBPKI.FILELOC='T' & exec('interm','#system')
               || FUN.emsg(exec('interm_nacc_msg','#system'))
               || TT_FILES:=files({? HBPKI.FILELOC='T' || '@' || '' ?}+HBPKI.PD);
                  {? TT_FILES.first()
                  || {! |?
                        hbfile:=fopen({? HBPKI.FILELOC='T'  & _a<>3 || '@' || '' ?}+ROZNE.FILEPATH,'r',
                        {? HBPKI.FILELOC='T' & _a<>3 || 0 || 1 ?},0,1);
                        {? hbfile.is_open()
                        || HBP.first(); _vrref:=_vcont:=hbfeof:=0;
                           {! |?
                              {? ~_vrref & HBP.KP().KD='r' || _vrref:=HBP.ref() ?};
                              {? HBP.KP().KD='' & HBP.DL='x' || exec('typwyn','hb') || 1 ?};
                              HBP.cntx_psh(); {? ~HBP.next() || _vcont:=1 || _vcont:=0 ?}; HBP.cntx_pop();
                              {? _vcont || HBP.seek(_vrref) & pbex || ~hbfeof & HBP.next() & pbex ?}
                           !};
                           fclose(hbfile); VAR_DEL.delete('hbfile');
                           {? HBPKI.ERFILE='T'
                           || ferase({? HBPKI.FILELOC='T'  & _a<>3 || '@' || '' ?}+TT_FILES.FILENAME,
                                 {? HBPKI.FILELOC='T' & _a<>3 || 0 || 1 ?})
                           ?}
                        || FUN.emsg('Import tabel kursów walut.\nBłąd otwarcia pliku.'@); pbcn:=0
                        ?};
                        TT_FILES.next()
                     !}
                  ?}
               ?};
               VAR_DEL.delete('TT_FILES')
            ?}
         ?}
      || pbcn:=0
      ?}
   || {? _a=2 & HBPKI.size()=0
      || FUN.info('Nie znaleziono specyfikacji importu kursów walut dla wskazanego banku.'@)
      ?}
   ?};
   {? ~pbex
   || FUN.emsg('Tabela kursów %1 była już importowana.'@[TKRS.SYM])
   ?};
   {? pbcn
   || {? pbcw<=1
      || FUN.info('Liczba zaimportowanych z wyciągu %1 pozycji: %2'@[PW.NRW,$pbcn])
      || FUN.info('Liczba zaimportowanych wyciągów: %1\npozycji na wyciągach: %2'@[$pbcw,$pbcn])
      ?}
   ?}
|| pwb_fil:=0;
   exec('st_filtr','hbn_filtr');

:: pobieranie wyciągów on-line z banku tymczasowo wyłączone w nowej wersji
   PWB.actions(PWB.win_sel('?'),'D(B):D(B)',,1);

   PWB.select();
   VAR_DEL.delete('pwb_fil')
?};
1


\get_value_from_xml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AB] [20.14]
:: OPIS: Zapisuje podany plik xml _a w postaci tabeli tymczasowej i wybiera z niego _b
::----------------------------------------------------------------------------------------------------------------------
_temptable:=xml_tparse(_a);
{? type_of(_temptable) = type_of(~~) || return(0) ?};
{!|?
 {? _temptable.NAME = _b
 || return(_temptable.VAL)
 ?};
_temptable.next()
!}


\searchln
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyszukuje w pliku _a sekcje rozpoczynajaca sie znakami _b (po pominieciu wiodacych spacji)
::       i zwraca zawartosc sekcji do wiersza rozpoczynajacego sie znakami _c. Jesli nie podano _c,
::       zwraca jeden wiersz. Opcjonalny parametr d wskazuje znaki poczatkowe wiersza, ktory
::       stanowi naglowek wyciagu, co pozwala rozpoznac wiele wyciagow w jednym pliku.
::----------------------------------------------------------------------------------------------------------------------
_v:=1; _vline:=_vline2:='';
:: jezeli biezaca linia pliku odpowiada kryteriom _b, jest zapamietywana
{? var_pres('hbfline')>=0 & ((+_b)+hbfline=_b)
|| {? _>2 & +_c || _vline2:=hbfline; _v:=2 || _vline:=hbfline; _v:=0 ?}
?};
:: odczyt kolejnych linii
{! |? _v & (hbfline:=fread(_a))<>'\n' |!
   hbfline:=form(hbfline);
   {? _v=2 & (+_c)+hbfline<>_c || hbfline:=_vline2+hbfline; _v:=1 ?};
   {? (+_b)+hbfline=_b & _v<>2
   || _vline:=hbfline;
      {! |? _>2 & +_c & (hbfline:=fread(_a))<>'\n' & (+_c)+hbfline<>_c  & (_<4 | (_=4 & (+_d)+hbfline<>_d))
         |! _vline+=hbfline
      !}; _v:=0
   |? _v=2 || _vline:=_vline2; _v:=0
   |? _=4 & (+_d)+hbfline=_d || _v:=0
   ?}
!};
{? _=4 & (+_d)+hbfline=_d || HBP.first() ?};
{? hbfline='\n' || hbfeof:=1 ?}; _vline


\searchtx
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Zwraca fragment z lancucha _a rozpoczynajacy sie znakami _b
::       do znakow _c. Jesli nie podano _c zwraca tekst do konca _a
::----------------------------------------------------------------------------------------------------------------------
_v:=''; _vpb:=_a*_b;
{? _vpb
|| _v:=(_vpb-1++_b)-_a; {? _=3 || _vpe:=_v*_c; {? _vpe || _v:=(_vpe-1)+_v ?} ?}
?}; _v


\chk_nrwb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Sprawdza, czy wyciag byl juz importowany.
::   WE: _a: numer wyciagu; _b: data ksiegowania; _c: rachunek bankowy licencjobiorcy
::   WY: 0 - byl importowany, 1 - nie byl importowany
::----------------------------------------------------------------------------------------------------------------------
_ssql:='select PW.NRW from @PW where PW.DK=to_date(\''+_b+'\') and '
   +'PW.NRW=\''+_a+'\' and PW.RBL=\''+_c+'\'';
{? var_pres('TTPB')>0 || obj_del(TTPB) ?};
TTPB:=sql(_ssql);
_v:={? ~TTPB.first() || pwimp:=0; 1 || pwimp:=1; 0 ?};
obj_del(TTPB);
_v


\rbkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Ustala nr rachunku bankowego dla kontrahenta na podstawie
::          nr. banku i ostatniej czesci nr. rachunku bankowego
:: WEJSCIE: _a - kod banku, _b - ostatnia czesc nr. rach. bankowego
::----------------------------------------------------------------------------------------------------------------------
{? _b*'-'>0
|| _vrb:=_a+'-'+_b
|| _v:=_a+_b+'252100';
   {! |? _s:=9+_v; _v:=9-_v; _m:=#_s%*97; _v:=$_m+_v; +_v>+$_m !};
   _m:=98-_m; _vrb:={? +$_m=1 || '0'+$_m || $_m ?}+_a+_b
?};
_vrb


\f3_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.50]
:: OPIS: F3 w polu ROZNE.FILEPATH - okno wyboru pliku.
::       _vfd: folder pliku; _vfn: nazwa pliku
::----------------------------------------------------------------------------------------------------------------------
{? 1+sys_name(0)='W' & HBPKI.FILELOC='T'
|| _v:=_vx:=fld();
   _vpos:=_vposx:=0; _ret:='';
   {! |?
      _vposx:=_vx*'\\'; {? _vposx || _vpos+=_vposx; _vx:=_vposx-_vx ?};
      _vposx
   !};
   {? _vpos
   || _vfd:=(_vpos-1)+_v; _vfn:=_vpos-_v
   || _vfd:=_v-(+HBPKI.PD+1); _vfn:=HBPKI.PD
   ?};
   {? menu_txt()='Eksportuj'@ | (ROZNE.FILEMASK*'przelew')
   || _ret:=exec('save_as','#file',_vfn,_vfd,ROZNE.FILEMASK)
   |? menu_txt()='Importuj'@
   ||
      _ret:= _vfd + '\\'+ dlg_upload(_vfd+'\\'+_vfn,0)
   ?};
   {? _ret='' || fld(_v); 1 || _ret ?}
|? 1+sys_name(0)<>'W' | HBPKI.FILELOC<>'T'
|| _vpos:=HBPKI.PD*'.';
   _vfe:={? _vpos || _vfe:=(_vpos-HBPKI.PD) || '*' ?}; _vfe:='*.'+_vfe;
   TT_FILES:=files(_vfe);
   {? menu_txt()='Eksportuj'@ || _vtyt:='Pliki przelewów'@ || _vtyt:='Pliki wyciągów bankowych'@ ?};
   _wsel:=TT_FILES.mk_sel(_vtyt,,0,'file_list');
   TT_FILES.win_fld(_wsel,,'FILENAME',,,60);
   TT_FILES.win_act(_wsel,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
   TT_FILES.win_sel(_wsel);
   _ret:={? TT_FILES.select() || TT_FILES.FILENAME || 1 ?};
   obj_del(TT_FILES); _ret
|| 1
?}


\last_nrp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Znajduje ostatnio uzyty nr paczki przelewow (dla PLA w BPH)
::   WE: _a: data
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
TT_PB:=sql('select d_exp, nrp from @pb where rd=:_a and d_exp=to_date(\':_b\')',
   RB.get_rbel(2,TAB_SPEC.RB,TAB_SPEC.KRAJ),$_a);
{? TT_PB.first() || _ret:=TT_PB.NRP ?}; VAR_DEL.delete('TT_PB'); _ret


\test_hbpki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2011]
:: OPIS: Formula sprawdza istnienie specyfikacji o podanych parametrach
::   WE: _a = wskazanie na bank (HBPKI.KDB), _b = typ pliku (nazwa specyfikacji, HBPKI.TPK)
::   WY: 0 - nie istnieje, 1 - istnieje, 2 - istnieje lecz nie jest aktywna
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
HBPKI.cntx_psh();
HBPKI.index('HBPKIBT');
HBPKI.prefix(_a,_b);
{? HBPKI.first()
|| {! |?
      {? HBPKI.TPK=_b & HBPKI.AKT=1
      || _wy:=1
      |? HBPKI.TPK=_b & HBPKI.AKT=0
      || _wy:=2
      ?};
      HBPKI.next() & _wy=0
   !}
?};
HBPKI.cntx_pop();
_wy


\split35
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Funkcja dzieli podany string zgodnie z wymaganami pola szczegolow przelewu
::       w formacie MultiCash
::   WE: _a = zawartosc PB.TYT, _b = dlugosc czesci tekstu (domyslnie 35), _c - separator (domyslnie |)
::       _d = 1 - bez otaczania wyniku znakami cydzysłowu "
::       Jesli nie podano parametrow _b i _c i _d przyjmowane sa wartosci domyslne
::   WY: wynikowy string do przelewu
::----------------------------------------------------------------------------------------------------------------------
{? _=0 || return('') ?};
{? +_a>140 || _a:=140+_a ?};
_len:={? var_pres('_b')=type_of(0) & _b>0 || _b || 35 ?};
_sep:={? var_pres('_c')=type_of('') & +_c>0 || _c || '|' ?};
{? _<4 || _d:=0 ?};
_wiersze:=0;
_tekst:='';
{! |?
   {? _tekst<>'' || _tekst+=_sep ?};
   {? +_a>_len
   || _tekst+=_len+_a;
      _a:=_len-_a;
      _wiersze+=1
   || _tekst+=_a;
      _a:='';
      _wiersze+=1
   ?};
   +_a
!};
{? _d=1
|| (~-(_tekst))+(4-_wiersze)*_sep+','
|| '"'+(~-(_tekst))+(4-_wiersze)*_sep+'",'
?}


\getstring
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WS [12.30] [SK] [8.60]
:: OPIS: pobiera ciag znakow z plku wejsciowego i zwraca pola
::----------------------------------------------------------------------------------------------------------------------
_v:=1;
_vline:=_vline2:='';
{? _=1 || hbfline:=fread(_a) ?};
{? hbfline<>'\n'
||
::   znajdz poczatek pola
   {!
   |?
      _z:=1+hbfline;
      hbfline:=1-hbfline;
      {? _z='"' | _z=''
      || 0
      || 1
      ?}
   !};
::   odczytaj zawartosc pola
   {!
   |?
      _z:=2+hbfline;
      {? _z+1='"'
      || _z:=_z-1;
         hbfline:=1-hbfline
      || hbfline:=2-hbfline
      ?};
      {? _z='" ' | _z=''
      || 0
      |? _z='""'
      || _vline+='"';
         1
      || _vline+=_z;
         1
      ?}
   !}
?};
{? hbfline='\n' || hbfeof:=1 ?};
_vline


\getstring2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WS [12.30] [SK] [8.60]
:: OPIS: zwraca wartosc pola podzielonego
::----------------------------------------------------------------------------------------------------------------------
STR.split(_a,'???');
_vline:=STR.get_word();
{!|? {? STR.next() || _vline+=' '+STR.get_word(); 1 ?} !};
_vline


\typwyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [??]
:: OPIS: Formuła wykonuje i sprawdza jakiego typu wynik zwróci
::       formuła przypisana do pozycji specyfikacji, jeżeli nie będzie
::       to string pokaże stosowny komunikat
::----------------------------------------------------------------------------------------------------------------------
b7:=HBP.memo_txt(0,1,'FML');
b13:=($b7)();
PW.TYPTRAN:=form(PW.TYPTRAN);
b13


\usninpreg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.41]
:: OPIS: Formula ustala wartosc pola PB.USNIPREG ze wzgledu na ograniczenie 14 znakow w tym polu w definicji
::       oraz REGON dla firm moze miec 14 znakow wykorzystywane jest pole PB.USTYPID w ktorym wpisana jest wartosc 'R'
::       Funkcja korzysta z ustawionego bufora PB
::----------------------------------------------------------------------------------------------------------------------
_znak:='';
{? 1+PB.USNIPREG='R'
|| _znak:=PB.USNIPREG
|| _znak:={? PB.USTYPID<>'' || PB.USTYPID || 'R' ?}+PB.USNIPREG
?};
_znak


\ing_znaki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych wedlug
::       specyfikacji ING w stringu _a na znaki spacji
::   WE: _a - string do przetworzenia
::       Jesli podano parametr _b to:
::           _b=1 - przelew do ZUS i US(poza polem identyfikacja zobowiazania)
::           _b=2 - w przelewie do US dla pola identyfikacja zobowiazania
::           _b=3 - przelew MT103
::           _b=4 - Multicash
::   WY: przetworzony string wejsciowy
::  OLD: \ing_znaki/tech_hb.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=1 | _b=1
|| _znaki:='0123456789aąbcćdeęfghijklłmnńoópqrsśtuvwxyzźżAĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUVWXYZŹŻ\\/,.()[]{}=_%~^”-<>@$& #*+:;?!\'–—'
|? _=2 & _b=2
|| _znaki:='0123456789aąbcćdeęfghijklłmnńoópqrsśtuvwxyzźżAĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUVWXYZŹŻ,.{}~^”-<>@$& :;?!\'–—'
|? _=2 & _b=3
|| _znaki:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/-?:().,\'+{}'
|? _=2 & _b=4
|| _znaki:='0123456789aąbcćdeęfghijklłmnńoópqrsśtuvwxyzźżAĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUVWXYZŹŻ\\ -@$<>,.()[]{}/=_%~&^'''
|| FUN.emsg('Nieprawidłowe argumenty funkcji: ing_znaki. Przetwarzanie zostanie pominięte.'@);
   {? _>1 || return(_a) || return() ?}
?};
_wynik:='';
{! |?
   {? _znaki*(1+_a)<>0
   || _wynik+=1+_a
   || _wynik+=' '
   ?};
   _a:=1-_a;
   +_a<>0
!};
_wynik


\kb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MirPi][SK] [10.10]
:: OPIS: formatowanie informacji o klasyfikacji budzetowej na podstawie pola tytulem
::   WE: PB.TYT
::   WY: sformatowana informacja o klasyfikacji budzetowej zapisywana do pliku polecen
::       przelewow, uzupelnienie pol PB.RZ, PB.PG, PB.ZAD
::  OLD: \kb/hb_nbp.fml
::----------------------------------------------------------------------------------------------------------------------
_v:=PB.TYT;
_ptr:=_v*'r.:';
_r:=form(PB.RZ);
{? _ptr ||
   _v:=(_ptr+2)-_v;
   {? _r=''
      ||_r:=form(5+_v)
   ?}
?};
_ptr:=_v*'p.:';
_p:=form(PB.PG);
{? _ptr ||
   _v:=(_ptr+2)-_v;
   {? _p=''
      ||_p:=4+_v
   ?}
?};
_ptr:=_v*'z.:';
_z:=form(PB.ZAD);
{? _ptr ||
   _v:=(_ptr+2)-_v;
   {? _z=''
      ||_z:=3+_v
   ?}
?};
PB.RZ:=_r;
PB.PG:=_p;
PB.ZAD:=_z;
PB.TYT:=exec('tyt2','hb');
{? +_r | +_p | +_z
  ||' "'+(_r+{? +_p || '???'+_p+{? +_z || '???'+_z || '' ?} || '' ?})+'" '
  ||''
?}


\odmiana
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Zwraca sformulowanie 'tabela kursow' zaleznie od podanej liczby
::   WE: _a = liczba
::   WY: 'tabela kursow' w odpowiedniej odmianie
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| FUN.emsg('Brak parametru funkcji \\odmiana.'@);
   return('')
?};
{? type_of(_a)<>1
|| FUN.emsg('Parametr funkcji \\odmiana musi być liczbą.'@);
   return('')
?};
{? _a<0
|| FUN.emsg('Parametr funkcji \\odmiana nie może być mniejszy od zera.'@);
   return('')
?};
_wy:='';
{? _a>=2 & _a<=4
|| _wy:='tabele kursów'
|? _a=1
|| _wy:='tabelę kursów'
|| {? _a>21
   || {? #(($_a)+2)>=12 & #(($_a)+2)<=14
      || _wy:='tabel kursów'
      || {? #(($_a)+1)>1 & #(($_a)+1)<=4
         || _wy:='tabele kursów'
         || _wy:='tabel kursów'
         ?}
      ?}
   || _wy:='tabel kursów'
   ?}
?};
_wy


\tyt2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [SK] [10.40]
:: OPIS: formatowanie pola tytulem zawierajacego informacje o klasyfikacji budzetowej
::   WE: PB.TYT
::   WY: sformatowana informacja o polu tytulem zapisywana dla przelewow w archiwum
::  OLD: \tyt2/hb_nbp.fml
::----------------------------------------------------------------------------------------------------------------------
_v:=STR.gsub(PB.TYT,'"','""');
_ptr:=_v*'r.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=6-_v
?};
_ptr:=_v*'p.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=5-_v
?};
_ptr:=_v*'z.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=4-_v
?};
form(_v)


\sepa_trans
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pj [2009+]
:: OPIS: Formula zamienia znaki w podanym stringu na dozwolone w przelewach typu SEPA
::   WE: String do zamiany
::   WY: String po zamianie
::  OLD: \sepa_trans/znbre.fml
::----------------------------------------------------------------------------------------------------------------------
_znaki:='0123456789aąbcćdeęfghijklłmnńoópqrsśtuwxyzźżAĄBCĆDEĘFGHIJKLŁMNŃOÓPQRSŚTUWXYZŹŻ/|-?:().,;`+ ';
_wynik:='';
{! |?
   {? _znaki*(1+_a)<>0
   || _wynik+=1+_a
   || _wynik+=' '
   ?};
   _a:=1-_a;
   +_a<>0
!};
_wynik


\trans
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula ma za zadanie zamianę znakow (dla specyfikacji BRE):
::       :*;'"!+?|# (jesli _b=1 to takze /)
::       w stringu _a na znaki spacji
::   WE: _a string do zamiany, _jesli _b i i=1 to takze znak / (dla przelewu US w polu szczegoly platnosci)
::   WY: string wejsciowy po zamianie
::  OLD: \trans/znbre.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:='';
{? _>1 & _b=1
|| _znaki:='/:*;\'"!+?|#'
|| _znaki:=':*;\'"!+?|#'
?};
{! |?
      {? %(1+_a)=92
      || _wynik+=' ';
         _a:=1-_a
      ?};
      {? _znaki*(1+_a)<>0
      || _wynik+=' '
      || _wynik+=1+_a
      ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\tyt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [SK] [10.20]
:: OPIS: formatowanie pola tytulem zawierajacego informacje o klasyfikacji budzetowej
::   WE: _a - wartosc rozna od zera - z pola tytulem usuwana bedzie informacja o klasyfikacji budzetowej
::            wartosc rowna zero - pole tytulem z klasyfikacja budzetowa
::       PB.TYT
::   WY: sformatowana informacja o polu tytulem zapisywana do pliku polecen
::       przelewow
::  OLD: \tyt/hb_nbp.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || _a:=0 ?};
_v:=_t:=STR.gsub(PB.TYT,'"','""');
_ptr:=_v*'r.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=6-_v
?};
_ptr:=_v*'p.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=5-_v
?};
_ptr:=_v*'z.:';
{? _ptr ||
   _v:=(_ptr+2)-_v;
   _v:=4-_v
?};
_ptr:=_v*' TMS ';
{? _ptr ||
   _v:=(_ptr-1)+_v
?};
{? _a<>0
   ||form(_v)
   ||_t
?}


\uip_gen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008b]
:: OPIS: Formula generuje unikalny identyfikator przelewu dla przelewow CiTi
::  OLD: \uip_gen/tech_hb.fml
::----------------------------------------------------------------------------------------------------------------------
losuj:="int(_a*rand())";
_wy:='';
{! _i:=1..10
|! {! |?
      _int:=48+losuj(75);
      {? _int>=58 & _int<=64 || _loop:=1
      |? _int>=91 & _int<=96 || _loop:=1
      || _loop:=0
      ?};
      _loop
   !};
   _wy+=%_int
!};
_wy


\wyciagi1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ach [8.72] 2006/06/19
:: OPIS: Formuła ma za zadanie zamianę znaków
::   WE: _c w stringu _a na znaki _b
::   WY: sformatowany string
::  OLD: \wyciagi1/hb_nbp.fml
::----------------------------------------------------------------------------------------------------------------------
z23:=_a;wynik:='';
{!|?
   {? %(1+z23)=92 || wynik+=' '; z23:=1-z23 ?};
   {? _c*(1+z23)<>0 || wynik+=_b || wynik+=1+z23 ?};
   z23:=1-z23;
   +z23<>0
!};
wynik


\bszabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła ma za zadanie zamianę znaków:
::       :-,/"|[]\=^#@!_~`
::       w stringu _a na znaki spacji
::  OLD: /bszabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_z23:=_a;_wynik:='';
{! |?
      {? %(1+_z23)=92
      || _wynik+=' '; _z23:=1-_z23
      ?};
      {? ':-,/"|[]=^#@!_~`'*(1+_z23)<>0
      || _wynik+=' '
      || _wynik+=1+_z23 ?};
      _z23:=1-_z23;
      +_z23<>0
!};
_wynik


\paribas_zabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.22]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku BGŻ BNP Paribas.
::  OLD: /rfzabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_legal:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąćęłńóśźżĄĆĘŁŃÓŚŹŻ 0123456789,.()[]{}/=><+!_%~^\'`:-';
_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\rfzabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku Raiffeisen Polbank.
::  OLD: /rfzabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_legal:='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąśężźćńłóĄŚĘŻŹĆŃŁÓ!@#$%^&*()+[]{}<>?~`\'/_=-.';
_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\bpzabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku BPH.
::  OLD: /bpzabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_legal:='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąśężźćńłóĄŚĘŻŹĆŃŁÓ$%&*()-+{}\'/,.';
_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\pozabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku PEKAO.
::  OLD: /pozabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_legal:='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąśężźćńłóĄŚĘŻŹĆŃŁÓ().,/:;\+!@#$&*{}[ ]?=\'';
_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\cizabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formula ma za zadanie zamiane znakow:
::              :"|[]=^#@!_~`
::              w stringu _a na znaki spacji
::  OLD: /cizabzn.fml
::----------------------------------------------------------------------------------------------------------------------
_z23:=_a;_wynik:='';
{! |?
      {? %(1+_z23)=92
      || _wynik+=' '; _z23:=1-_z23
      ?};
      {? ':"|[]=^#@!_~`'*(1+_z23)<>0
      || _wynik+=' '
      || _wynik+=1+_z23 ?};
      _z23:=1-_z23;
      +_z23<>0
!};
_wynik


\get_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2009+]
:: OPIS: Formula wycina wartosc z tagow z podanego fragmentu pliku XML
::       Uzycie: hbline:=exec('get_val','proc_01',hbline,'<OPIS>','</OPIS>')
::   WE: _a - string do przetworzenia, _b - tag poczatkowy, _c - tag koncowy
::  OLD: \get_val/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? _<3
|| FUN.emsg('Niepoprawne parametry funkcji: get_val'@);
   return('')
?};
_a:=((_a*_c)-1)+_a;
_len:=+_b;
_a:=_len-_a;
_a:=STR.iso2maz(_a);
_a


\titles
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [18.22]
:: OPIS: Formula przedstawia listę komunikatów z pola memo specyfikacji bankowych do tłumaczeń
::----------------------------------------------------------------------------------------------------------------------
'Brak specyfikacji do przetwarzania plików z kursami NBP (lub nieaktywna).'@;
'Import kursów z NBP możliwy jest tylko dla aktywnej waluty PLN.'@;
'Przetwarzanie pliku: '@;
'Nazwa pliku'@;
'Zakończono pobieranie kursów walut z serwera NBP.'@;
'Pobrano '@;
'Data, od której importować kursy'@;
'NBP kursy walut'@;
'Przetwarzanie pliku: '@;
'Zakończono pobieranie kursów walut z serwera NBP. Pobrano '@;
'Import kursów z NBP możliwy jest tylko dla aktywnej waluty PLN.'@;
'Brak lub nieaktywna specyfikacja do przetwarzania plików xml\n z kursami NBP (specyfikacja \'NBP kursy walut\').'@;
'Zakończono pobieranie kursów walut z serwera NBP.\n'@        +'Pobrano '@;
~~


\hsbc_zabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.51]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku HSBC.
::----------------------------------------------------------------------------------------------------------------------
_legal:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąćęłńóśźżĄĆĘŁŃÓŚŹŻ 0123456789()+,-./:?';

_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\dnb_zabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.51]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku DNB.
::----------------------------------------------------------------------------------------------------------------------
_legal:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąćęłńóśźżĄĆĘŁŃÓŚŹŻ 0123456789()-:,.?/';

_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\bzwbk_zabzn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.51]
:: OPIS: Formula ma za zadanie zamiane znakow niedozwolonych
::       w przekazanym stringu _a na znaki spacji. Wersja dla banku BZWBK.
::   WE: _a - string do zamiany
::       _b - jeżeli _b='MT103' to zestaw znaków dozwolonych dla przelewów walutowych MT103
::----------------------------------------------------------------------------------------------------------------------
{? _>1 & type_of(_b)=type_of('') & _b='MT103' || _typ:=1 || _typ:=0 ?};
{? _typ=0
|| _legal:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZąćęłńóśźżĄĆĘŁŃÓŚŹŻ 0123456789`!@#$%^&*()_+-=[]{};:.\'?/'
|? _typ=1
|| _legal:='abcdefghijklmnopqrstuvwxyząćęłńóśżźABCDEFGHIJKLMNOPQRSTUVWXYZĄĆĘŁŃÓŚŻŹ0123456789/-?:().,\' +{}$'
?};

_wynik:='';
{! |?
      {? _legal*(1+_a)<>0 & %(1+_a)<>124 || _wynik+=1+_a || _wynik+=' ' ?};
      _a:=1-_a;
      +_a<>0
!};
_wynik


\trans_sp_mbank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [18.42]
:: OPIS: Formula weryfikuje czy podana transakcja jest typu Split payment
::   WE: _a - transakcja do zweryfikowania (string)
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
{? _=0 | _a='' || return(0) ?};
_a:=-_a;
{? var_pres('__TRANSP')<=0
|| __TRANSP:=tab_tmp(1,'NAZWA','STRING[150]','Nazwa transakcji');
   __TRANSP.NAZWA:=-'368 Przeksięgowanie podatku VAT'; __TRANSP.add();
   __TRANSP.NAZWA:=-'369 Przeksięgowanie podatku VAT'; __TRANSP.add();
   __TRANSP.NAZWA:=-'660 Obciążenie PZ SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'662 Zwrot PZ SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'665 Zwrot PZ do Płatnika SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'666 PZ Detaliczny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'722 Rozliczenie transakcji Mass Collect SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'760 Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'770 Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'771 Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'772 Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'773 Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'911 Transakcja Collect SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'920 Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'922 Przelew Organ Podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'923 Przelew SORBNET Transfer SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'928 BRESOK Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'930 BRESOK Przelew Organ podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'931 BRESOK Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'935 MT101 Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'941 MT101 Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'943 MT101 Przelew Organ podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'944 CompanyNet Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'946 CompanyNet Przelew Organ podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'947 CompanyNet Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'952 MULTICASH Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'954 MULTICASH Przelew Organ podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'955 MULTICASH Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'958 Przelew Blue Cash SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'959 CompanyNet Przelew Blue Cash SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'961 BRESOK Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'963 CompanyNet Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'964 MULTICASH Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'966 MT101 Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'967 MX01 Przelew krajowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'967 MX02 Przelew SORBNET SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'967 MX03 Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'967 MX07 Przelew Organ podatkowy SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'968 Przelew natychmiastowy Express Elixir SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'969 CompanyNet Przelew natychmiastowy Express Elixir SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'970 Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'971 BRESOK Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'973 CompanyNet Przelew wewnętrzny SP'; __TRANSP.add();
   __TRANSP.NAZWA:=-'974 MULTICASH Przelew wewnętrzny SP'; __TRANSP.add()
?};
{? __TRANSP.find_key(_a,) || 1 || 0 ?}


\nbp_xml_read
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [20.14]
:: OPIS: Formuła przetwarza plik xml z tabelą średnich kursów walut, wywoływana w specyfikacji NBP
::----------------------------------------------------------------------------------------------------------------------
_xml:='';

{! |? (_wiersz:=fread(hbfile))<>'\n' |!
      _xml+=_wiersz
!};

{? _xml<>''
|| _tp:=xml_tparse(_xml);
   {? type_of(_tp) = type_of(~~) | ~_tp.first()
   || return(0)
   ?}
?};

{! |?
   {? _tp.NAME='numer_tabeli'
   || TKRS.blank();
      TKRS.SYM:=_tp.VAL
   |? _tp.NAME='data_publikacji'
   || TKRS.DT:=date(#(4+_tp.VAL),#((7+_tp.VAL)+2),#(_tp.VAL+2));
      {? ~TKRS.add(1)
      || return(0)
      || _ref:=TKRS.ref()
      ?}
   |? _tp.NAME='pozycja'
   || _tp.cntx_psh();
      _tp.prefix(_tp.ref());
      {? _tp.first()
      || KRS.prefix(_ref);
         KRS.blank();
         KRS.TKRS:=_ref;
         {!
         |?
            {? _tp.NAME='kod_waluty'
            || {? SLO.find_key(_tp.VAL)
               || KRS.WAL:=SLO.ref();
                  {? WAL.find_key(KRS.WAL().KOD)
                  || KRS.KRAJ:=WAL.KRAJ
                  ?}
               ?}
            |? _tp.NAME='kurs_sredni'
            || KRS.SR:=#(gsub(_tp.VAL,',','.'))
            ?};
            _tp.next()
         !};
         {? KRS.WAL || KRS.add() ?}
      ?};
      _tp.cntx_pop()
   ?};
   _tp.next()
!};
1


\bgk_xml_read
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [20.14]
:: OPIS: Formuła przetwarza plik xml z wyciągiem bankowym z BGK, wywoływana w specyfikacji BGK - XML import wyciągów
::----------------------------------------------------------------------------------------------------------------------
_tp:=xml_tparse(hbfile);
{? type_of(_tp) = type_of(~~) | ~_tp.first()
|| return(0)
?};

_ndx_typ:=_tp.ndx_tmp(,,'TREE',,,'TYPE',,);
_odd:={? PWB.ODD<>null || PWB.ODD || exec('set_odd','homebank') ?};
_plik:=PWB.ref();

{! |?
   {? _tp.NAME='WYCIAG'
   ||
:: atrybuty elementu WYCIAG
      _tp.cntx_psh();
      _tp.index(_ndx_typ);
      _tp.prefix(_tp.ref(),'A');
      {? _tp.first()
      || _data:=_rach:=_opis:=_waluta:=_nazwa:='';
         {! |?
            {? _tp.TYPE='A' & _tp.NAME='data'
            || _data:=_tp.VAL
            |? _tp.TYPE='A' & _tp.NAME='rachunek'
            || _rach:=_tp.VAL
            |? _tp.TYPE='A' & _tp.NAME='opis'
            || _opis:=_tp.VAL
            |? _tp.TYPE='A' & _tp.NAME='waluta'
            || _waluta:=_tp.VAL
            |? _tp.TYPE='A' & _tp.NAME='nazwa'
            || _nazwa:=_tp.VAL
            ?};
            _tp.next()
         !};
         PWN.blank();
         PWN.NRW:=_data;
         PWN.ODD:=_odd;
         PWN.PLIK:=_plik;
         PWN.RBL:=RB.get_rbel(2,_rach);
         {? RB.getrrban(_rach,REF.INFO,0,null,1) || PWN.BL:=SKID_RBK.BANK ?};
         {? PWN.add() || pbcw+=1 ?}
      ?};
      _tp.cntx_pop();

:: pod-elementy elementu WYCIAG (operacje)
      _tp.cntx_psh();
      _tp.index(_ndx_typ);
      _tp.prefix(_tp.ref(),'E');
      {? _tp.first()
      || {! |?
            {? _tp.TYPE='E' & _tp.NAME='OPERACJA'
            || _tp.cntx_psh();
               _tp.prefix(_tp.ref());
               {? _tp.first()
               || {! |?
                     {? _tp.NAME='POZYCJA'
                     || _pozycja:=_tp.VAL
                     |? _tp.NAME='DATA_WALUTY'
                     || _data_w:=_tp.VAL
                     |? _tp.NAME='OPIS'
                     || _opis:=_tp.VAL
                     |? _tp.NAME='BANK'
                     || _bank:=_tp.VAL
                     |? _tp.NAME='RACHUNEK'
                     || _rach_k:=_tp.VAL
                     |? _tp.NAME='KWOTA'
                     || _kwota:=_tp.VAL
                     |? _tp.NAME='STRONA'
                     || _strona:=_tp.VAL
                     |? _tp.NAME='WALUTA'
                     || _waluta:=_tp.VAL
                     |? _tp.NAME='NAZWA1'
                     || _nazwa1:=_tp.VAL
                     |? _tp.NAME='NAZWA2'
                     || _nazwa2:=_tp.VAL
                     |? _tp.NAME='NAZWA3'
                     || _nazwa3:=_tp.VAL
                     |? _tp.NAME='NAZWA4'
                     || _nazwa4:=_tp.VAL
                     |? _tp.NAME='TRESC1'
                     || _tresc1:=_tp.VAL
                     |? _tp.NAME='TRESC2'
                     || _tresc2:=_tp.VAL
                     |? _tp.NAME='TRESC3'
                     || _tresc3:=_tp.VAL
                     |? _tp.NAME='TRESC4'
                     || _tresc4:=_tp.VAL
                     ?};
                     _tp.next()
                  !};
                  PW.blank();
                  PW.ODD:=_odd;
                  PW.PWN:=PWN.ref();
                  PW.RBL:=PWN.RBL;
                  PW.BL:=PWN.BL;
                  PW.NRP:=#_pozycja;
                  PW.NRW:=PWN.NRW;
                  {? +PW.NRW=10 || PW.NRW+='/'+_pozycja ?};
                  _rok:=4+_data_w; _data_w:=5-_data_w;
                  _mie:=2+_data_w; _data_w:=3-_data_w;
                  _dzi:=2+_data_w;
                  PW.DK:=date(#_rok,#_mie,#_dzi);
                  PW.TYPTRAN:=_opis;
                  B.cntx_psh();
                  B.index('BANKID');
                  B.prefix();
                  {? var_pres('_bank')>0
                  || {? B.find_key(_bank) & _bank=B.NUMER || PW.BK:=B.ref() || PW.BK:=null ?}
                  || PW.BK:=null
                  ?};
                  B.cntx_pop();
                  PW.RBK:=_rach_k;
                  _kwota:=gsub(_kwota,' ','');
                  _kwota:=gsub(_kwota,',','.');
                  PW.KW:=#_kwota;
                  {? _strona='C' || PW.STR:='Ma' |? _strona='D' || PW.STR:='Wn' ?};
                  PW.WAL:=_waluta;
                  PW.KONTR:=exec('ltgt','hb',_nazwa1);
                  PW.KONTR+={? _tmp:=exec('ltgt','hb',_nazwa2); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.KONTR+={? _tmp:=exec('ltgt','hb',_nazwa3); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.KONTR+={? _tmp:=exec('ltgt','hb',_nazwa4); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.TYTOP:={? _tmp:=exec('ltgt','hb',_tresc1); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.TYTOP+={? _tmp:=exec('ltgt','hb',_tresc2); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.TYTOP+={? _tmp:=exec('ltgt','hb',_tresc3); _tmp<>'' || ' '+_tmp || '' ?};
                  PW.TYTOP+={? _tmp:=exec('ltgt','hb',_tresc4); _tmp<>'' || ' '+_tmp || '' ?};
                  {? +PW.RBK=26 & PW.BK=null || PW.BK:=RB.getrbank(4,PW.RBK,'PL') ?};
                  PW.WSK_R:='N';
                  PW.AN:=PW.SYM:=PW.SYM_ZEW:='';
                  {? PW.WAL='' || PW.WAL:=HINFO.NAROD().KOD ?};
                  {? PW.add() || pbcn+=1 ?};
                  {? pbnw<>PW.NRW || pbnw:=PW.NRW ?}
               ?};
               _tp.cntx_pop()
            ?};
            _tp.next()
         !}
      ?};
      _tp.cntx_pop()

   ?};
   _tp.next()
!};
1


\ltgt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [20.14]
:: OPIS: Formuła zamienia znaczki &lt; &gt; na < i > po wczytaniu tekstu z xml
::   WE: tekst z xml
::   WY: tekst po przetworzeniu
::----------------------------------------------------------------------------------------------------------------------
{? _a<>'' & _a*'&lt;' || _a:=gsub(_a,'&lt;','<') ?};
{? _a<>'' & _a*'&gt;' || _a:=gsub(_a,'&gt;','>') ?};
_a


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:39 5aa014a7ead4afd573de8e0996280e8487ac6f25a5712cc96080f791521ec7e49ba27ec0caa764c15222923ed7219423dbed6b27acb3ebe529f104a624460489f930238c8f622c09d4563ab2894acef6525d2f1e3e93943f8a0b896fa82c44dca24df21a785c256a0c1b1e13bf9850ebbe618dd2e706ae241c71d277ad743d09
