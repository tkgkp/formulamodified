:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: pos_pay.fml
:: Utworzony: 08.06.2018
:: Autor: Markus
:: Systemy: Merit
::======================================================================================================================
:: Zawartość: Płatności dla POSa w Merit
::======================================================================================================================


\pos_pay_translate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.22]
:: OPIS: Tablica tłumaczeń przycisków dla posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('elements_table','#desktop');
_tab.blank(); _tab.ID_SYS:='ety2@pos_pay1'; _tab.NAME:='Do zapłaty'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='przy1@pos_pay1'; _tab.NAME:='Zapłać'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='przy2@pos_pay1'; _tab.NAME:='Anuluj'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='przy3@pos_pay1'; _tab.NAME:='Wybierz'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='calc_14@pos_pay1'; _tab.NAME:='Zmień'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='pay_del@pos_pay1'; _tab.NAME:='Usuń'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='ety3@pos_pay1'; _tab.NAME:='Gotówka:'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='ety4@pos_pay1'; _tab.NAME:='Przyjęto:'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='ety5@pos_pay1'; _tab.NAME:='Reszta:'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='pay_got_6@pos_pay1'; _tab.NAME:='Oblicz resztę'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='pay_got_5@pos_pay1'; _tab.NAME:='Anuluj'@; _tab.add();
_tab.blank(); _tab.ID_SYS:='pay_got_4@pos_pay1'; _tab.NAME:='Zapłać'@; _tab.add();
_tab


\bl_oz_slo_plat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
::params_get().env.slo:=fld();
SLO.win_sel('ONE');
SLO.win_dict('ONE');
XINFO.SLP();
XINFO.SLP <> null


\after_edit_slo_plat_oz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? OZ.POSFK = OZ.POSFG & OZ.POSFK<>null & OZ.POSFG<>null
||
   FUN.info('Formy płatności gotówką i kartą muszą być różne.'@);
   {? params_get().env.slo=~~
   ||
      fld(null)
   ||
      fld(params_get().env.slo)
   ?};
   return(0)
?};
return(exec('after_edit_slo_plat','pos_pay'))


\after_edit_slo_plat_fis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? FIS.POSFK = FIS.POSFG & FIS.POSFK<>null & FIS.POSFG<>null
||
   FUN.info('Formy płatności gotówką i kartą muszą być różne.'@);
   {? params_get().env.slo=~~
   ||
      fld(null)
   ||
      fld(params_get().env.slo)
   ?};
   return(0)
?};
return(exec('after_edit_slo_plat','pos_pay'))


\after_edit_slo_plat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: włącza widoczność formy płatności w POS
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
ZR_SLO.cntx_psh();
ZR_SLO.index('SLO_NR');
ZR_SLO.prefix(SLO.ref(), 4);
{? ZR_SLO.first() = 1
||
   {? ZR_SLO.WAR = 'N'
   ||
      {? FUN.ask('Forma płatności nie ma włączonej widoczności w POS, czy chcesz włączyć widoczność?'@)
      ||
         ZR_SLO.WAR:='T';
         ZR_SLO.put()
      ?}
   ?}
||
   {? FUN.ask('Forma płatności nie ma włączonej widoczności w POS, czy chcesz włączyć widoczność?'@)
   ||
      ZR_SLO.blank();
      ZR_SLO.WAR:='T';
      ZR_SLO.NR:=4;
      ZR_SLO.SLO:=SLO.ref();
      ZR_SLO.add()
   ?}
?};
ZR_SLO.cntx_pop();
1


\br_oz_slo_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
exec('sl_wal','eurusd','SLWAL','walut')


\after_edit_oz_tstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? OZ.TSTYP = 'six' | OZ.TSTYP = 'polcard' | OZ.TSTYP = 'paytel'
||
   return(1)
||
   FUN.info('Dopuszczalny typ terminala: six, polcard, paytel'@);
   return(0)
?}


\after_edit_fis_tstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? FIS.TSTYP = 'six' | FIS.TSTYP = 'polcard' | FIS.TSTYP = 'paytel'
||
   return(1)
||
   FUN.info('Dopuszczalny typ terminala: six, polcard, paytel'@);
   return(0)
?}


\f3_oz_postr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wybór typu rabatu w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
popup(0,'Typy <---  rabatu'@
      ,'P - procentowy (suma)      '@,,"fld('P')"
      ,'S - procentowy (kaskadowy) '@,,"fld('S')"
      ,'K - kwotowy (od ceny)      '@,,"fld('K')"
      ,'W - kwotowy (od wartości)  '@,,"fld('W')")


\f3_oz_tstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wybór typu terminala w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
popup(0,'Typy <---  terminala'@
      ,'Terminal six '@,,"fld('six')"
      ,'Terminal polcard '@,,"fld('polcard')",
      ,'Terminal paytel '@,,"fld('paytel')")


\after_edit_posczyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wybór wpływu na stan magazynowya w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? fld() = 'T' | fld() = 'N'
||
   return(1)
||
   FUN.info('Dopuszczalna wartość: T lub N.'@);
   return(0)
?}


\after_edit_posczyn_fis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: Wybór wpływu na stan magazynowya w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? FIS.POSCZYN='N'
||
   FIS.POSAUTO:='N'
?};
FIS.efld_opt('RED',{? FIS.POSCZYN='T' || 'enable=1' || 'enable=0' ?},,'POSAUTO');
1


\after_edit_posczyn_oz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.02]
:: OPIS: Wybór wpływu na stan magazynowya w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
{? OZ.POSCZYN='N'
||
   OZ.POSAUTO:='N'
?};
OZ.efld_opt('REDFIS',{? OZ.POSCZYN='T' || 'enable=1' || 'enable=0' ?},,'POSAUTO');
1


\f3_posczyn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wybór wpływu na stan magazynowya w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
popup(0,'Wpływ na stan magazynowy'@
      ,'Dokument nie wpływa na stan magazynowy'@,,"fld('N')"
      ,'Dokument wpływa na stan magazynowy '@,,"fld('T')")


\f3_posauto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Czy wybieranie stanu magazynu ma być automatyczne czy ręcznie w opcjach posa
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
popup(0,'Automatyczne / Ręczne wybieranie stanu magazynowego'@
      ,'Automatyczne wybieranie stanu magazynowego'@,,"fld('T')"
      ,'Ręczne wybieranie stanu magazynowego'@,,"fld('N')")


\pos_grp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wywołanie okienka grupowego
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
:: płatność tylko gotówką
{? var_pres('__temp_pos_pay_only_cash')<0 || __temp_pos_pay_only_cash:=0 ?};

:: czy zakończono pomyślnie dodawanie płatności do dokumnetu
{? var_pres('__temp_pos_pay_done')>0 || &__temp_pos_pay_done ?};
__temp_pos_pay_done:=0;

:: do jakiego pola mają być dodawane cyfry z kalkulatora
{? var_pres('__temp_pos_pay_calc_input')>0 || &__temp_pos_pay_calc_input ?};
__temp_pos_pay_calc_input:='calc_12';

:: jeżeli jest więcej płatności kartą oraz jest włączona opcja cashback,
:: cashback jest wykonywane tylko dla pierwszej transakcji kartą
{? var_pres('__temp_pos_pay_cashback_first')>0 || &__temp_pos_pay_cashback_first ?};
__temp_pos_pay_cashback_first:=1;

{? var_pres('__temp_pos_pay_select_list_lp')>0 || &__temp_pos_pay_select_list_lp ?};
__temp_pos_pay_select_list_lp:=null;


exec('create_temp___POSPAYVAL','pos_pay');
_platnosci:=exec('create_temp__POSPAY','pos_pay');
{? _platnosci=0
||
   FUN.info('Nie zdefiniowano form płatności dla POS.'@);
   return(~~)
?};

_ctr_id:=exec('create','#desktop',__POSPAY,'pos_pay1',,40);
_win_id:='kontrolka2';
__POSPAY.win_ctr(_ctr_id);
_before:="
            exec('load','#desktop','pos_pay1','pos_pay1.dsk',,,,,exec('pos_pay_translate','pos_pay'));
            exec('init','pos_pay');
            {? __temp_pos_pay_only_cash = 1
            ||
               exec('pay_only_cash_show','pos_pay')
::            ||
::               exec('pay_got_hide','pos_pay',0);
::               exec('pay_method_show','pos_pay', 1)
            ?};
            1";
__POSPAY.control(_win_id,'modal=false',_before);

{? __temp_pos_pay_done = 1
||
   exec('pay_return','pos')
?};
~~


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: init
::   WE: -
::   WY: __POSPAYVAL
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP='polcard' | OZ.TSTYP='paytel')  || __pos_cashback || 0 ?};
:: Ustawia wartość brutto do zapłaty
_currency:=FAKS.WAL().KOD;
exec('set_name','#desktop','','pos_pay1','pay_sum@pos_pay1','%1 %2'[form(_faks_brutto_suma_cashback,,2), _currency]);
:: Ustawia nagłówek listy
_header:=exec('list_header','pos_pay');
exec('set_value','#desktop','','pos_pay1','list_header@pos_pay1',_header);
exec('set_enabled','#desktop','','pos_pay1','pay_got_1@pos_pay1',0);
exec('set_enabled','#desktop','','pos_pay1','pay_got_3@pos_pay1',0);
exec('pay_got_hide','pos_pay');
~~


\list_pay
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Lista płatności
::   WE: -
::   WY: __POSPAYVAL
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('set_value','#desktop','','pos_pay1','calc_12@pos_pay1', '');
exec('set_name','#desktop','','pos_pay1','calc_13@pos_pay1', '');
::__temp_pos_pay_select_list_lp:=null();
{? __POSPAYVAL.size() > 0
||
   {? __temp_pos_pay_select_list_lp<>null
   ||
      {? __POSPAYVAL.find_key(__temp_pos_pay_select_list_lp)
      ||
::         exec('set_value','#desktop','','pos_pay1','calc_12@pos_pay1', $__POSPAYVAL.VAL);
::         exec('set_name','#desktop','','pos_pay1','calc_13@pos_pay1'
::         , '<html>Zmiana dla: <strong>%1</strong>, lp: <strong>%2</strong> albo kolejna płatność</html>'
::         [__POSPAYVAL.VIEW, $__POSPAYVAL.LP]);
         exec('grab_focus','#desktop','','pos_pay1','calc_12@pos_pay1')
      ?}
   ||
      {? __POSPAYVAL.last()
      ||
         __temp_pos_pay_select_list_lp:=__POSPAYVAL.LP;
::         exec('set_value','#desktop','','pos_pay1','calc_12@pos_pay1', $__POSPAYVAL.VAL);
::         exec('set_name','#desktop','','pos_pay1','calc_13@pos_pay1'
::         , '<html>Zmiana dla: <strong>%1</strong>, lp: <strong>%2</strong> albo kolejna płatność</html>'
::         [__POSPAYVAL.VIEW, $__POSPAYVAL.LP]);
         exec('grab_focus','#desktop','','pos_pay1','calc_12@pos_pay1')
      ?}
   ?};
   return(__POSPAYVAL)
||
   _temp:=tab_tmp(1
   ,'LP','INTEGER','Lp.'
   ,'TEXT','STRING[250]','Text'
   ,'REF','STRING[16]','Ref'
   ,'VIEW','STRING[80]','View'
   ,'VAL', 'REAL', 'Wartość gotówki'
   ,'VALP', 'REAL', 'Wartość procentowa'
   ,'PAY', 'STRING[1]', 'Dokonana płatność'
   ,'SLOKOD', 'STRING[8]', 'Kod typu płatności'
   );
   _temp.blank();
   _temp.LP:=0;
   _temp.TEXT:='Wybierz metodę płatności'@;
   _temp.REF:='';
   _temp.VIEW:='';
   _temp.VAL:=0;
   _temp.VALP:=0;
   _temp.SLOKOD:='';
   _temp.add();
   return(_temp)
?}


\list_pay_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wybór elementu z listy płatności
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
::
_tab_type:=exec('get_selection','#desktop','','pos_pay1','list_pay@pos_pay1');
_type:=1;
{? _tab_type.first()
||
    _type:=#_tab_type.KEY
?};

{? __POSPAYVAL.find_key(_type) > 0
||

   __temp_pos_pay_select_list_lp:=_type;

:: exec('set_value','#desktop','','pos_pay1','calc_12@pos_pay1', $__POSPAYVAL.VAL);
   exec('set_name','#desktop','','pos_pay1','calc_13@pos_pay1'
   , '<html>Zmiana dla: <strong>%1</strong>, lp: <strong>%2</strong> albo kolejna płatność</html>'
   [__POSPAYVAL.VIEW, $__POSPAYVAL.LP]);
:: , '<html>Zmiana wartości dla płatności:<strong>%1</strong></html>'[__POSPAYVAL.VIEW])
exec('grab_focus','#desktop','','pos_pay1','calc_12@pos_pay1')


?};
~~


\list_pay_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Zmiana danych wcześniej wybranego elementu z listy płatności
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel') || __pos_cashback || 0 ?};
{? __temp_pos_pay_select_list_lp <> null
||
   _value:=exec('get_value','#desktop','','pos_pay1','calc_12@pos_pay1');
   _value:=(#gsub(_value,',','.')) $ 2;
   _value:={? _value > 0 || _value || 0.00 ?};
   _value:={? _value > _faks_brutto_suma_cashback || _faks_brutto_suma_cashback || _value ?};

   {? __POSPAYVAL.find_key(__temp_pos_pay_select_list_lp) > 0
   ||
      __POSPAYVAL.VAL:=_value;
      _val_proc:=(_value * 100 / _faks_brutto_suma_cashback) $ 2;
      __POSPAYVAL.VALP:=_val_proc;
      __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _value, _val_proc);
      __POSPAYVAL.put();
      exec('list_pay_calculate','pos_pay', __POSPAYVAL.LP)
   ?};
   exec('set_value','#desktop','','pos_pay1','list_pay@pos_pay1','select_mode=SELECT_RESTORE');
   exec('set_value','#desktop','','pos_pay1','calc_12@pos_pay1', '');
   exec('refresh_element','#desktop','','pos_pay1','list_pay@pos_pay1')
?};
~~


\list_pay_calculate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Oblicza wartości form płatności aby suma się zgadzała z wartością brutto dokumentu
::   WE: _a - numer lp ostatnio edytowanego rekordu
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------

params_set(params_get());
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP='polcard' | OZ.TSTYP='paytel') || __pos_cashback || 0 ?};

::numer lp ostatnio edytowanego rekordu
_lp_aktualne:=0;
{? _ > 0 & type_of(_a) = 1
|| _lp_aktualne:=_a
?};

:: Obliczenie wartości form płatności aby suma się zgadzała z wartością brutto dokumentu
:: ale z zachowaniem wartości w ostatnio edytowanym rekordzie
{? _lp_aktualne > 0 & __POSPAYVAL.find_key(_lp_aktualne) > 0
||
   _val_aktualne:=__POSPAYVAL.VAL;
   {? _val_aktualne > _faks_brutto_suma_cashback
   || val_aktualne:=_faks_brutto_suma_cashback
   ?};
   {? _val_aktualne > 0 & __POSPAYVAL.first()
   ||
      _sum:=0;
      {! |?
         {? __POSPAYVAL.LP <> _lp_aktualne
         ||
           {? _sum <= _faks_brutto_suma_cashback - _val_aktualne
           ||
              {? _sum + __POSPAYVAL.VAL <= _faks_brutto_suma_cashback - _val_aktualne
              ||
                _sum+=__POSPAYVAL.VAL
              ||
                _new_val:=_faks_brutto_suma_cashback - _val_aktualne - _sum;
                __POSPAYVAL.VAL:=_new_val;
                _val_proc:=(_new_val * 100 / _faks_brutto_suma_cashback) $ 2;
                __POSPAYVAL.VALP:=_val_proc;
                __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _new_val, _val_proc);
                __POSPAYVAL.put();
                _sum+=_new_val
              ?}
           ||
              __POSPAYVAL.VAL:=0;
              __POSPAYVAL.VALP:=0;
              __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, 0, 0);
              __POSPAYVAL.put()
           ?}
         ?};
         __POSPAYVAL.next()
      !};
      {? _sum < _faks_brutto_suma_cashback - _val_aktualne & __POSPAYVAL.first()
      ||
         {! |?
            {? __POSPAYVAL.LP <> _lp_aktualne
            ||
                _new_val:=__POSPAYVAL.VAL + _faks_brutto_suma_cashback - _val_aktualne - _sum;
                __POSPAYVAL.VAL:=_new_val;
                _val_proc:=(_new_val * 100 / _faks_brutto_suma_cashback) $ 2;
                __POSPAYVAL.VALP:=_val_proc;
                __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _new_val, _val_proc);
                __POSPAYVAL.put();
                _sum+=_new_val
            ?};
            _sum < _faks_brutto_suma_cashback - _val_aktualne & __POSPAYVAL.next()
        !}
      ?}
   ?}
?};

:: Obliczenie wartości form płatności aby suma się zgadzała z wartością brutto dokumentu
{? __POSPAYVAL.first()
||
   _sum:=0;
   {! |?
      {? _sum <= _faks_brutto_suma_cashback
      ||
         {? (_sum + __POSPAYVAL.VAL) <= _faks_brutto_suma_cashback
         ||
            _sum+=__POSPAYVAL.VAL
         ||
            _new_val:=_faks_brutto_suma_cashback - _sum;
            __POSPAYVAL.VAL:=_new_val;
            _val_proc:=(_new_val * 100 / _faks_brutto_suma_cashback) $ 2;
            __POSPAYVAL.VALP:=_val_proc;
            __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _new_val, _val_proc);
            __POSPAYVAL.put();
            _sum+=_new_val
         ?}
      ||
        __POSPAYVAL.VAL:=0;
        __POSPAYVAL.VALP:=0;
        __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, 0, 0);
        __POSPAYVAL.put()
      ?};
      __POSPAYVAL.next()
   !};
   {? _sum  < _faks_brutto_suma_cashback & __POSPAYVAL.first()
   ||
      _new_val:=__POSPAYVAL.VAL + _faks_brutto_suma_cashback - _sum;
      __POSPAYVAL.VAL:=_new_val;
      _val_proc:=(_new_val * 100 / _faks_brutto_suma_cashback) $ 2;
      __POSPAYVAL.VALP:=_val_proc;
      __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _new_val, _val_proc);
      __POSPAYVAL.put();
      _sum+=_new_val
   ?}
?};
~~


\list_pay_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Dodaj nową płatność
::   WE: [_a] - string - metoda płatności: null - wybór z pola combobox, 'KARTA', 'GOTOW'
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel') || __pos_cashback || 0 ?};
_select:=1;
{? _ = 1
||
   {? type_of(_a) = 2
   ||
      _tk:='karta';
      _tg:='gotówka';
      {? _a = _tk | _a = _tg
      || _kod:='';
         {? _a=_tg & OZ.POSFG <> null
         || _kod:=OZ.POSFG().KOD
         |? _a=_tk & OZ.POSFK <> null
         || _kod:=OZ.POSFK().KOD
         ?};
         {? _kod<>''
         || _jest:=__POSPAY.find_tab(0,'SLOKOD',,'=',_kod)
         || _jest:=__POSPAY.find_tab(0,'SLOTYP',,'=',_a)
         ?};
         {? _jest
         || _select:=0;
            _type_ref:=__POSPAY.SLOREF;
            _value:=_faks_brutto_suma_cashback
         ?}
      ?}
   ?}
?};
{? _select = 1
||
   _type_ref:=exec('get_value','#desktop','','pos_pay1','pay_type@pos_pay1');
   _value:=exec('get_value','#desktop','','pos_pay1','calc_12@pos_pay1');
   _value:=(#gsub(_value,',','.')) $ 2
?};
{? __POSPAY.find_key(_type_ref) > 0
   ||
   _value:={? _value > 0 || _value || 0.00 ?};
::   __POSPAYVALLP+=1;
::   _lp:=__POSPAYVALLP;
   _lp:=__POSPAYVAL.size() + 1;

   _value:={? _value > _faks_brutto_suma_cashback || _faks_brutto_suma_cashback || _value ?};

::   {? __POSPAY.SLOKOD = 'GOTOW'
   {? _value = 0
   ||
       _sum:=0;
      {? __POSPAYVAL.first()
      ||
         {! |?
            _sum+=__POSPAYVAL.VAL;
            __POSPAYVAL.next()
         !}
      ?};
      _value:=_faks_brutto_suma_cashback - _sum
   ?};

::   _tg:={? OZ.POSFG <> null || OZ.POSFG().KOD || 'GOTOW' ?};
   _tg:='gotówka';
   {? __POSPAY.SLOTYP = _tg & __POSPAYVAL.find_tab(0,'SLOTYP',,'=',_tg) > 0
   ||
      _value2:=__POSPAYVAL.VAL + _value;
      __POSPAYVAL.REF:=__POSPAY.SLOREF;
      __POSPAYVAL.VIEW:=__POSPAY.SLOTR;
      __POSPAYVAL.SLOKOD:=__POSPAY.SLOKOD;
      __POSPAYVAL.SLOTYP:=__POSPAY.SLOTYP;
      __POSPAYVAL.VAL:=_value2;
      _val_proc:=(_value2 * 100 / _faks_brutto_suma_cashback) $ 2;
      __POSPAYVAL.VALP:=_val_proc;
      {? _select = 1
      ||
         __POSPAYVAL.TEXT:=exec('list_row','pos_pay',__POSPAYVAL.LP, __POSPAYVAL.VIEW, _value2, _val_proc)
      ?};
      __POSPAYVAL.put()
   ||
      __POSPAYVAL.blank();
      __POSPAYVAL.LP:=_lp;
      _val_proc:=(_value * 100 / _faks_brutto_suma_cashback) $ 2;
      __POSPAYVAL.VALP:=_val_proc;
      {? _select = 1
      ||
         __POSPAYVAL.TEXT:=exec('list_row','pos_pay', _lp, __POSPAY.SLOTR, _value, _val_proc)
      ?};
      __POSPAYVAL.REF:=__POSPAY.SLOREF;
      __POSPAYVAL.VIEW:=__POSPAY.SLOTR;
      __POSPAYVAL.VAL:=_value;
      __POSPAYVAL.SLOKOD:=__POSPAY.SLOKOD;
      __POSPAYVAL.SLOTYP:=__POSPAY.SLOTYP;
      __POSPAYVAL.add()
   ?};
   {? _select = 1
   ||
      __temp_pos_pay_select_list_lp:=__POSPAYVAL.LP;
      exec('list_pay_calculate','pos_pay', _lp);
      exec('set_value','#desktop','','pos_pay1','list_pay@pos_pay1','select_mode=SELECT_LAST');
      exec('refresh_element','#desktop','','pos_pay1','list_pay@pos_pay1');
::      exec('list_pay_select','pos_pay');
      exec('grab_focus','#desktop','','pos_pay1','calc_12@pos_pay1')
   ?}
?};
~~


\pay_type
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Lista form płatności
::   WE: -
::   WY: __POSPAY
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
__POSPAY


\list_pay_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Dodaj nową płatność
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel') || __pos_cashback || 0 ?};
{? __temp_pos_pay_select_list_lp <> null
||

   {? __POSPAYVAL.find_key(__temp_pos_pay_select_list_lp) > 0
   ||
      __POSPAYVAL.del();
      exec('list_pay_calculate','pos_pay', __POSPAYVAL.LP)
   ?};

   _lp:=0;
   {? __POSPAYVAL.first()
   ||
      {! |?
         _lp+=1;
         __POSPAYVAL.LP:=_lp;
         _val_proc:=(__POSPAYVAL.VAL * 100 / _faks_brutto_suma_cashback) $ 2;
         __POSPAYVAL.VALP:=_val_proc;
         __POSPAYVAL.TEXT:=exec('list_row','pos_pay', _lp, __POSPAYVAL.VIEW, __POSPAYVAL.VAL, _val_proc);
         __POSPAYVAL.put();
         __POSPAYVAL.next()
      !}
   ?};
   __temp_pos_pay_select_list_lp:=null;
   exec('set_value','#desktop','','pos_pay1','list_pay@pos_pay1','select_mode=SELECT_LAST');
   exec('refresh_element','#desktop','','pos_pay1','list_pay@pos_pay1')
?};
~~


\calc_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wstawia konkretny znak do pola calc_12
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_text:=exec('get_value','#desktop','','pos_pay1',__temp_pos_pay_calc_input+'@pos_pay1');
_text:={? _text = '0' || '' || _text ?} + $_a;
exec('set_value','#desktop','','pos_pay1',__temp_pos_pay_calc_input+'@pos_pay1',_text);
~~


\calc_comma
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Obsługa przycisku przecinka w kalkulatorze
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_text:=exec('get_value','#desktop','','pos_pay1',__temp_pos_pay_calc_input + '@pos_pay1');
_text:=gsub(_text,',','.');
_search:=0;
{! _ii:=1..(+_text) |!
   _char:=(_ii+_text)+1;
   {? _char = '.'
   ||
      _search:=1
   ?}
!};
{? _search = 0 || _text:=_text + '.' ?};
exec('set_value','#desktop','','pos_pay1',__temp_pos_pay_calc_input + '@pos_pay1',_text);
~~


\calc_ce
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Obsługa przycisku czyszczącego wartości w kalkulatorze
::   WE: [_a] -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('set_value','#desktop','','pos_pay1',__temp_pos_pay_calc_input + '@pos_pay1','');
~~


\paytel_pair
::----------------------------------------------------------------------------------------------------------------------
::  UTW: trocek [21.14]
:: OPIS: uruchomienie funkcji parowania ECR - EFT
::----------------------------------------------------------------------------------------------------------------------
{? OZ.TSTYP = 'paytel' | FIS.TSTYP = 'paytel'
||
   {? exec('interm','#system')>0
   || FUN.emsg(exec('interm_nacc_msg','#system'));
      return('')
   ?};

    _load:=1;
    _terminal:=exec('libload_paytel','pos_pay');
    _terminal.pair()
||
   FUN.info('Funkcja dostępna dla terminala PayTel'@)
?};
''


\list_header
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Generowanie nagłówka do listy
::   WE: -
::   WY: string - treść nagłówka
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_max_char_name:=40;
_max_char_value:=15;
::_max_char_proc:=8;

_text:=' Lp. | '@;

_a:='Forma płatności'@;
_text:=_text + _a + exec('list_space','pos_pay',(_max_char_name - (+_a)));
_b:='Wartość'@;
_text:=_text + ' | ' + exec('list_space','pos_pay',(_max_char_value - (+_b))) + _b;
::_c:='Procent';
::_text:=_text + ' | ' + exec('list_space','pos_pay',(_max_char_proc - (+_c))) + _c;

return(_text)


\list_row
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Generowanie lini tekstu do listy
::   WE: _a - lp
::       _b - nazwa produktu
::       _c - wartość
::       _d - procent
::   WY: string
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_max_char_name:=40;
_max_char_value:=15;
::_max_char_proc:=8;

_text:='';
{? _ = 4
||
   {? type_of(_a) = 1 & type_of(_b) = 2 & type_of(_c) = 1 & type_of(_d) = 1
   ||
      _currency:=FAKS.WAL().KOD;

      _text+=exec('list_space','pos_pay',(3 - (+($_a)))) + $_a + ' | ';
      {? +_b <= _max_char_name
      ||
         _text:=_text + _b + exec('list_space','pos_pay',(_max_char_name - (+_b)))
      ||
         _text:=_text + ((_max_char_name-3)+_b) + '...'
      ?};
      _wartoscT:=form(_c,,2) + ' ' + _currency;
      _text:=_text + ' | ' + exec('list_space','pos_pay',(_max_char_value - (+_wartoscT))) + _wartoscT
::      _procentT:=form(_d,,2);
::      _text:=_text + ' | ' + exec('list_space','pos_pay',(_max_char_proc - (+_procentT))) + _procentT
   ?}
?};
return(_text)


\list_space
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Generowanie spacji do wyrównania tekstu
::   WE: _a - ile spacji należy wygenerować
::   WY: string - spacje
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
:: _a - ilość spacji
_spaces:='';
{! _ii:=1.._a |!
   _spaces:=_spaces + ' '
!};
return(_spaces)


\libload
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Laduje TerminalSix.jar jako bibliotekę jar
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::laduje biblioteke
_terminalSix:=obj_new('LIB_ID'
                  ,'CALL_TERM_PARAM'
                  ,'CALL_PAYMENT'
                  ,'CALL_RESULT_CODE'
                  ,'CALL_RESULT_MESSAGE'
                  ,'CALL_ERROR_MESSAGE'
                  ,'CALL_REF_NUMBER'
                  ,'CALL_SHOW_WINDOW'
                  ,'CALL_REFUND'
                  ,'set_term_param'
                  ,'get_payment'
                  ,'get_result_code'
                  ,'get_result_message'
                  ,'get_error_message'
                  ,'get_ref_number'
                  ,'get_show_window'
                  ,'get_refund'
                  );
_terminalSix.LIB_ID:=lib_load('TerminalSix.jar', 1, 0);
{? _terminalSix.LIB_ID=0
||
   FUN.emsg('Błąd załadowania biblioteki TerminalSix.jar.'@)
||

::   OZ.TSAI = 172.27.161.34
::   OZ.TSP = 3000
::   OZ.TNS = 1

::   Ustawienie parametrów połączenia
   _terminalSix.CALL_TERM_PARAM:=lib_decl(_terminalSix.LIB_ID,,'void','setTerminalParameters','String','int','int');
   _terminalSix.set_term_param:="lib_call(.CALL_TERM_PARAM,OZ.TSAI,OZ.TSP,OZ.TSNS)";
::   Płatność kartą (w groszach, kwota pomnożona przez 100)
   _terminalSix.CALL_RESULT_CODE:=lib_decl(_terminalSix.LIB_ID,,'int','processPayment','int');
   _terminalSix.get_payment:="lib_call(.CALL_RESULT_CODE,_a * 100)";
::   Kod wyniku ostatniej transakcji na terminalu
   _terminalSix.CALL_PAYMENT:=lib_decl(_terminalSix.LIB_ID,,'int','getTransactionResultCode');
   _terminalSix.get_result_code:="lib_call(.CALL_PAYMENT)";
::   Opis wyniku trensakcji
   _terminalSix.CALL_RESULT_MESSAGE:=lib_decl(_terminalSix.LIB_ID,,'String','getTransactionResultMessage');
   _terminalSix.get_result_message:="lib_call(.CALL_RESULT_MESSAGE)";
::   Opis błędu ogólnego
   _terminalSix.CALL_ERROR_MESSAGE:=lib_decl(_terminalSix.LIB_ID,,'String','getErrorMessage');
   _terminalSix.get_error_message:="lib_call(.CALL_ERROR_MESSAGE)";
::   Numer trensakcji
   _terminalSix.CALL_REF_NUMBER:=lib_decl(_terminalSix.LIB_ID,,'String','getTransactionRefNumber');
   _terminalSix.get_ref_number:="lib_call(.CALL_REF_NUMBER)";

::   Test window
   _terminalSix.CALL_SHOW_WINDOW:=lib_decl(_terminalSix.LIB_ID,,'int','showWindow');
   _terminalSix.get_show_window:="lib_call(.CALL_SHOW_WINDOW)";

   _terminalSix.CALL_REFUND:=lib_decl(_terminalSix.LIB_ID,,'int','processRefund', 'int');
   _terminalSix.get_refund:="lib_call(.CALL_REFUND, _a * 100)";

   {? var_pres('__TERMSIX')>0 || obj_del(__TERMSIX) ?};
   __TERMSIX:=_terminalSix;
   ~~
?};
_terminalSix


\pay
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja na klikanięcie przycisku zapłać
::   WE: [_a] - czy zamknąć okienko 1(domyślnie) - true, 0 - false
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_sel_exit:=1;
_faks_brutto_suma_cashback:=FAKS.BRUTTO + {? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel') || __pos_cashback || 0 ?};
{? _ = 1
||
   {? type_of(_a) = 1
   ||
      {? _a = 0
      ||
         _sel_exit:=0
      ?}
   ?}
?};

_sum:=0;
{? __POSPAYVAL.first()
||
   {! |?
      _sum+=__POSPAYVAL.VAL;
      __POSPAYVAL.next()
   !}
?};
{? _sum = _faks_brutto_suma_cashback
||
:: Wykonanie wszystkich płatności

_error_deal:=0;
::_tk:={? OZ.POSFK <> null || OZ.POSFK().KOD || 'KARTA' ?};
_tk:='karta';

   {? __POSPAYVAL.first()
   ||
      {! |?
::         {?  __POSPAYVAL.SLOKOD = _tk & __POSPAYVAL.VAL > 0 & _error_deal = 0
         {?  __POSPAYVAL.SLOTYP = _tk & __POSPAYVAL.VAL > 0 & _error_deal = 0
         & __pos_cashback > 0 & ( OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel') & __temp_pos_pay_cashback_first=1
         & __POSPAYVAL.VAL<(__pos_cashback+0.01)
         ||
            FUN.info('Wartość pierwszej formy płatności kartą musi być większa od wartości cashback minimum o 0.01.'@);
            _error_deal:=1
         ?};
::         {? __POSPAYVAL.SLOKOD = _tk & __POSPAYVAL.VAL > 0 & _error_deal = 0
         {? __POSPAYVAL.SLOTYP = _tk & __POSPAYVAL.VAL > 0 & _error_deal = 0
         ||
            delay(2, 0);
            _re:=exec('pay_card','pos_pay', __POSPAYVAL.VAL);
            {? _re <> ~~
            ||
               __POSPAYVAL.PAY:='T';
               __POSPAYVAL.put()
            ||
               _error_deal:=1
            ?}
         ?};
         __POSPAYVAL.next()
      !}
   ?};

   _pay_got:=0;
   _pay_cash:=0;
::   _tg:={? OZ.POSFG <> null || OZ.POSFG().KOD || 'GOTOW' ?};
   _tg:='gotówka';
   {? __POSPAYVAL.first()
   ||
      {! |?
::         {? __POSPAYVAL.SLOKOD = _tg & __POSPAYVAL.VAL > 0 & _error_deal = 0
         {? __POSPAYVAL.SLOTYP = _tg & __POSPAYVAL.VAL > 0 & _error_deal = 0
         ||
            _pay_got:=1;
            _pay_cash:=__POSPAYVAL.VAL
         ?};
         __POSPAYVAL.next()
      !}
   ?};

   {? _pay_got = 1
   ||
      exec('pay_got_show','pos_pay', _pay_cash)
   ||
      exec('pay_set2doc','pos_pay', _error_deal, _sel_exit)
   ?}
||
   FUN.info('Wartości form płatności są niezgodne z wartością brutto dokumentu.'@)
?};
~~


\pay_set2doc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Zapis form płatności w dokumencie
::   WE: _a - int - error code
::       [_b] - czy zamknąć okienko 1(domyślnie) - true, 0 - false
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_sel_exit:=1;
{? _ >= 2
||
   {? type_of(_b) = 1
   ||
      {? _b = 0
      ||
         _sel_exit:=0
      ?}
   ?}
?};

::   {? _pay_zak = __POSPAYVAL.size()
_error_deal:=_a;
   {? _error_deal = 0
   ||

::params_exec('check','faktury_nag');

::{? FAKS.AKC<>'T' || exec('plat_przel','faktury_plat',FAKS.ref) ?};

::_checkpla:=exec('check_plat','faktury_plat',FAKS.ref);

::FUN.info($_checkpla);

::params_exec('faks_zakoncz_fap','faktury_nag')
::params_exec('pw_fapw','faktury_poz','WAL',0)


::exec('plat_one','faktury_plat',FAKS.ref);


::arams_exec('procr_a', 'faktury_plat');
::params_exec('plreca','faktury_plat')

exec('del_plat','faktury_plat', FAKS.ref());

VAR_DEL.delete('__PLAT');
__PLAT:=FAKS;

{? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP='paytel')
||
   FAKS.CASHBACK:=__pos_cashback;
   FAKS.put()
?};

:: Gdy wszystkie płatności się udały zostaje zaktualizowany dokument
      {? __POSPAYVAL.size() = 1
      ||
         _temp_product:=exec('FindAndGet','#table',SLO,__POSPAYVAL.REF,,"
            FAKS.PL:=SLO.ref();
            FAKS.put();
            {? __POSPAYVAL.first()
            ||
               FAKSPL.blank();
               FAKSPL.TERMPLAT:=FAKS.D;
               FAKSPL.WAR:=__POSPAYVAL.VAL;
               FAKSPL.PROCR:=__POSPAYVAL.VALP;
               FAKSPL.PROCW:=__POSPAYVAL.VALP;
               FAKSPL.FAKS:=FAKS.ref();
               FAKSPL.PL:=SLO.ref();
               FAKSPL.R:='T';
               FAKSPL.add()
            ?};
            1
         ",null)
      ||
         FAKS.PLISTA:='T';
         FAKS.put();
         {? __POSPAYVAL.first()
         ||
            {! |?
               _temp_product:=exec('FindAndGet','#table',SLO,__POSPAYVAL.REF,,"
                  FAKSPL.blank();
                  FAKSPL.TERMPLAT:=FAKS.D;
                  FAKSPL.WAR:=__POSPAYVAL.VAL;
                  FAKSPL.PROCR:=__POSPAYVAL.VALP;
                  FAKSPL.PROCW:=__POSPAYVAL.VALP;
                  FAKSPL.FAKS:=FAKS.ref();
                  FAKSPL.PL:=SLO.ref();
                  FAKSPL.R:='T';
                  FAKSPL.add();
                  1
               ",null);
               __POSPAYVAL.next()
            !}
         ?}
      ?};
   __temp_pos_pay_done:=1;
   {? _sel_exit = 1
   ||
      sel_exit()
   ?}
   ||
:: Zwrot gdy nie wszystkie płatności zostały pomyślnie zakończone
      exec('return_card','pos_pay')
   ?};
~~


\return_card
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja zwrotu na karte jeżeli część transakcji się powiodła i nastąpił jakiś błąd
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? __POSPAYVAL.first()
||
::   _tk:={? OZ.POSFK <> null || OZ.POSFK().KOD || 'KARTA' ?};
   _tk:='karta';
::   _tg:={? OZ.POSFG <> null || OZ.POSFG().KOD || 'GOTOW' ?};
   _tg:='gotówka';
   {! |?
      {? __POSPAYVAL.PAY = 'T'
      ||
::         {? __POSPAYVAL.SLOKOD = _tg
         {? __POSPAYVAL.SLOTYP = _tg
         ||
            FUN.info('Zwrot gotówki.'@)
::         |? __POSPAYVAL.SLOKOD = _tk
         |? __POSPAYVAL.SLOTYP = _tk
         ||
            _re:=exec('pay_card','pos_pay', __POSPAYVAL.VAL, 1);
            {? _re <> ~~
            ||
               __POSPAYVAL.PAY:='Z';
               __POSPAYVAL.put()
            ?}
         ?}
      ?};
      __POSPAYVAL.next()
   !}
?};
~~


\cancel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja wyjścia z płatności
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
sel_exit();
~~


\pay_got_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja akceptacji przyjęcia gotówki
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('pay_got_calculate','pos_pay');
_got:=exec('get_value','#desktop','','pos_pay1','pay_got_3@pos_pay1');
_got:=#gsub(_got,',','.');
{? _got >= 0
||
   exec('pay_set2doc','pos_pay', 0)
||
   FUN.emsg('Wartość przyjętej gotówki musi być większa niż wartość gotówki do zapłaty.'@)
?};
~~


\pay_got_cancel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja anulowania przyjęcia gotówki
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? __POSPAYVAL.size() > 1
||
   exec('return_card','pos_pay')
?};
sel_exit();
~~


\pay_got_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja wyświetlenia formularza z gotówką i resztą
::   WE: _a - real - wartość gotówki do zapłaty
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('set_value','#desktop','','pos_pay1','pay_got_1@pos_pay1',form(_a,,2,'9'));
exec('set_name','#desktop','','pos_pay1','calc_13@pos_pay1', '');

__temp_pos_pay_calc_input:='pay_got_2';

exec('pay_method_show','pos_pay', 0);

exec('pay_got_hide','pos_pay',1);
~~


\pay_got_hide
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja ukrycia formularza z gotówką i resztą
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_atr:=0;
{? _ = 1
||
   {? type_of(_a) = 1
   ||
      {? _a = 1
      ||
         _atr:=1
      ?}
   ?}
?};
exec('set_visible','#desktop','','pos_pay1','ety3@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','ety4@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','ety5@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_1@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_2@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_3@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_4@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_5@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_got_6@pos_pay1',_atr);
~~


\pay_got_calculate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Akcja obliczająca reszte do wydania
::   WE: -
::   WY: -
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_got:=exec('get_value','#desktop','','pos_pay1','pay_got_1@pos_pay1');
_prz:=exec('get_value','#desktop','','pos_pay1','pay_got_2@pos_pay1');
{? _prz = ''
||
::  nie wpisano wpłaconej gotówki
   exec('set_value','#desktop','','pos_pay1','pay_got_2@pos_pay1', _got);
   _prz:=_got
?};
_got:=gsub(_got,'.','');
_got:=gsub(_got,',','.');
_prz:=gsub(_prz,',','.');
exec('set_value','#desktop','','pos_pay1','pay_got_2@pos_pay1',form(#_prz$2,,2,'9'));
_res:=#_prz$2 - #_got$2;
exec('set_value','#desktop','','pos_pay1','pay_got_3@pos_pay1',form(_res,,2,'9'));
~~


\pay_card
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Płatność kartą
::   WE: _a - kwota transakcji
::       [_b] - int - zwrot: 0 (domyślnie) nie, 1 - tak
::   WY: string - numer transakcji, void - wystąpił błąd podczas transakcji
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_re:=~~;
{? _<1
||
   FUN.emsg('Nie podano kwoty do płatności kartą.'@);
   return(_re)
|? type_of(_a) <> 1
||
   FUN.emsg('Nie podano kwoty do płatności kartą.'@);
   return(_re)
?};
_zw:={? _>1 || {? _b=1 || 1 || 0 ?} || 0 ?};

::       [_c] - kwota cashback
::_cashback:={? _ > 3 || {? _c > 0 || _c || 0 ?} || 0 ?};

{? +OZ.TSAI > 0 & OZ.TSP > 0 & OZ.TSNS > 0
||
   _load:=0;
   {? OZ.TSTYP = 'six'
   ||
::   Terminal Six
      _load:=1;
      _test:=exec('libload','pos_pay')
   |? OZ.TSTYP = 'polcard'
   ||
::   Terminal Polcard
      _load:=1;
      _test:=exec('libload_polcard','pos_pay')
   |? OZ.TSTYP = 'paytel'
   ||
::   Terminal PayTel
      _load:=1;
      _test:=exec('libload_paytel','pos_pay')
   ?};

   {? __pos_cashback > 0 & __pos_cashback > OZ.TSCASHBA & OZ.TSCASHBA > 0
   ||
      FUN.info('Podana kwota Cashback musi być równa lub mniejsza od maksymalnej kwoty możliwej do wypłaty.'@);
      return(_re)
   ?};

   {? _load
   ||

      _test.set_term_param();
::numer paragonu dla PayTel
      {? OZ.TSTYP = 'paytel' || _test.set_numdok(FAKS.SYM)  ?};

      {? _zw = 1
      ||
         _result:=_test.get_refund(_a)
      ||
         {? __pos_cashback > 0 & (OZ.TSTYP = 'polcard' | OZ.TSTYP = 'paytel') & __temp_pos_pay_cashback_first=1
         ||
            _result:=_test.get_cashback(_a, __pos_cashback, OZ.TSCASHBA);
            {? _result=0
            || __temp_pos_pay_cashback_first:=0
            ?}
         ||
            _result:=_test.get_payment(_a)
         ?}
      ?};
:      debug;
      {? _result <> 0
      ||
         FUN.emsg(_test.get_error_message());
         {? FUN.ask('Czy ponowić płatność?'@)
         ||
            {? _>1
            ||
               _re:=exec('pay_card','pos_pay', _a, _b)
            ||
               _re:=exec('pay_card','pos_pay', _a)
            ?}
         ?}
      ||
         {? _test.get_result_code() <> 0
         ||
            FUN.emsg(_test.get_result_message())
         ||
            _re:=_test.get_ref_number()
         ?}
      ?}
   ||
      FUN.info('Wybrano zły typ terminala.'@)
   ?}
||
   FUN.emsg('Stanowisko nie ma skonfigurowanych parametrów połączenia z terminalem %1.'@[OZ.TSTYP])
?};
_re


\test
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_test:=exec('libload','pos_pay');
_result:=_test.get_show_window();
FUN.info('Wynik: '@ + $_result + '.');
~~


\create_temp___POSPAYVAL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Tabela - wybrane metody płatności
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('__POSPAYVAL')>0 || obj_del(__POSPAYVAL) ?};
__POSPAYVAL:=tab_tmp(1
,'LP','INTEGER','Lp.'
,'TEXT','STRING[250]','Text'
,'REF','STRING[16]','Ref'
,'VIEW','STRING[80]','View'
,'VAL', 'REAL', 'Wartość gotówki'
,'VALP', 'REAL', 'Wartość procentowa'
,'PAY', 'STRING[1]', 'Dokonana płatność'
,'SLOKOD', 'STRING[8]', 'Kod typu płatności'
,'NRTRA', 'STRING[30]', 'Numer transakcji'
,'SLOTYP', 'STRING[16]', 'Typ płatności'
);
_ndx1:=__POSPAYVAL.ndx_tmp(,,'LP',,);
__POSPAYVAL.index(_ndx1);

::__POSPAYVALLP:=0;
~~


\create_temp__POSPAY
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Tabela - Lista typów płatności
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_ret:=1;
:: _tk - forma płatności kartą
::_tk:={? OZ.POSFK <> null || OZ.POSFK().KOD || 'KARTA' ?};
_tk:='karta';
{? var_pres('__POSPAY')>0 || obj_del(__POSPAY) ?};
__POSPAY:=tab_tmp(,
   'SLOKOD', 'STRING[8]', 'Kod typu płatności'
   ,'SLOTR', 'STRING[80]', 'Treść typu płatności'
   ,'SLOREF', 'STRING[16]', 'REF typu płatności'
   ,'SLOTYP', 'STRING[16]', 'Typ płatności'
::   ,'VAL', 'REAL', 'Wartość gotówki'
::   ,'CHOSEN', 'STRING[1]', 'Aktywna płatność'
   );

:: at the beginning of defining the system
:: ZR_DSLO.NAZ - Płatność dostępna w PO
:: ZR_DSLO.NR - 4


:: SLO.SLU -- płatności ...
:: foreach
:: SLO.TR - Płatność kartą
:: SLO.KOD - KARTA
:: ZR_SLO.NR - 4 - płatność dostępna w pos
:: ZR_SLO.WAR - T
:: end foreach

::exec('form_plat_pos','upgrade_1842');

SLO.cntx_psh();
ZR_SLO.cntx_psh();
exec('czytaj','#stalesys',,XINFO,'SLP');
SLO.index('SL');
SLO.prefix(XINFO.SLP);
{? SLO.first()
||
   {! |?
      ZR_SLO.index('SLO_NR');
      ZR_SLO.prefix(SLO.ref());
::      {? ZR_SLO.first() = 1
      {? ZR_SLO.find_key(4)
      ||
         {? ZR_SLO.WAR = 'T'
         ||
            __POSPAY.blank();
            __POSPAY.SLOKOD:=SLO.KOD;
            {? ZR_SLO.find_key(5)
            ||
               __POSPAY.SLOTYP:=exec('spr_typ','faktury_plat',ZR_SLO.WAR)
            ||
               __POSPAY.SLOTYP:=exec('spr_typ','faktury_plat')
            ?};
            __POSPAY.SLOTR:=SLO.TR + ' ('+ __POSPAY.SLOTYP +')';
::            {? SLO.KOD = _tk
::            ||
::               __POSPAY.SLOTR:=__POSPAY.SLOTR + ' (terminal)'
::            ?};
            __POSPAY.SLOREF:=$SLO.ref();
::            __POSPAY.VAL:=0.00;
::            __POSPAY.CHOSEN:='N';
            __POSPAY.add()
         ?}
      ?};
      SLO.next()
   !}
?};
ZR_SLO.cntx_pop();
SLO.cntx_pop();

_ndx1:=__POSPAY.ndx_tmp(,,'SLOREF',,);
__POSPAY.index(_ndx1);

exec('sumfak','faktury_wspolne');
exec('plat_przel','faktury_plat',FAKS.ref());

{? __POSPAY.size()=0
||
   _ret:=0
?};

_ret


\pay_only_one_card
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Szybka płatność tylko jedną kartą
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

:: jeżeli jest więcej płatności kartą oraz jest włączona opcja cashback,
:: cashback jest wykonywane tylko dla pierwszej transakcji kartą
{? var_pres('__temp_pos_pay_cashback_first')>0 || &__temp_pos_pay_cashback_first ?};
__temp_pos_pay_cashback_first:=1;

{? exec('pos_pay_count_FAP','pos')
||
   __temp_pos_pay_done:=0;
   exec('create_temp___POSPAYVAL','pos_pay');
   exec('create_temp__POSPAY','pos_pay');

::   _tk:={? OZ.POSFK <> null || OZ.POSFK().KOD || 'KARTA' ?};
   _tk:='karta';
   exec('list_pay_add','pos_pay', _tk);

   exec('pay','pos_pay', 0);

   {? __temp_pos_pay_done = 1
   ||
      exec('pay_return','pos')
   ?}
?};
~~


\pay_only_cash
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Szybka płatność tylko gotówką
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? exec('pos_pay_count_FAP','pos')
||
   __temp_pos_pay_only_cash:=1;
   exec('pos_grp','pos_pay')
?};
~~


\pay_only_cash_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Szybka płatność tylko gotówką
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
::_tg:={? OZ.POSFG <> null || OZ.POSFG().KOD || 'GOTOW' ?};
_tg:='gotówka';
exec('list_pay_add','pos_pay', _tg);
exec('pay','pos_pay');
~~


\pay_method_show
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS: Wyświetlenie / ukrycie elementów okienka dotyczące metody płatności
::   WE: [_a] - 1 show (default) / 0 - hide
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_atr:=0;
{? _ = 1
||
   {? type_of(_a) = 1
   ||
      {? _a = 1
      ||
         _atr:=1
      ?}
   ?}
?};
exec('set_visible','#desktop','','pos_pay1','ety1@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','ety2@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_sum@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','list_header@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','list_pay@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','calc_12@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','przy1@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','przy2@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_type@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','przy3@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','calc_14@pos_pay1',_atr);
exec('set_visible','#desktop','','pos_pay1','pay_del@pos_pay1',_atr);
exec('set_enabled','#desktop','','pos_pay1','pay_type@pos_pay1',_atr);
exec('set_enabled','#desktop','','pos_pay1','przy3@pos_pay1',_atr);
~~


\test2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
::   WE: -
::   WY: ~~
::  OLD:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
   _test:=exec('libload','pos_pay');
   _test.set_term_param();
   _result2:=_test.get_show_window();
_result:=_test.get_refund(0.03);
~~


\libload_paytel
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Laduje terminalpaytel.jar jako bibliotekę jar
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::laduje biblioteke
_terminal:=obj_new('LIB_ID'
                  ,'CALL_TERM_PARAM'
                  ,'CALL_PAYMENT'
                  ,'CALL_RESULT_CODE'
                  ,'CALL_RESULT_MESSAGE'
                  ,'CALL_ERROR_MESSAGE'
                  ,'CALL_REF_NUMBER'
                  ,'CALL_SHOW_WINDOW'
                  ,'CALL_REFUND'
                  ,'CALL_REVERSAL'
                  ,'CALL_CASHBACK'
                  ,'CALL_SETNUMDOK'
                  ,'CALL_PAIR'
                  ,'set_numdok'
                  ,'set_term_param'
                  ,'get_payment'
                  ,'get_result_code'
                  ,'get_result_message'
                  ,'get_error_message'
                  ,'get_ref_number'
                  ,'get_show_window'
                  ,'get_refund'
                  ,'get_reversal'
                  ,'get_cashback'
                  ,'pair'
                  );
_terminal.LIB_ID:=lib_load('terminalpaytel.jar', 1, 0);
{? _terminal.LIB_ID=0
||
   FUN.emsg('Błąd załadowania biblioteki terminalpaytel.jar.'@)
||
   _terminal.CALL_TERM_PARAM:=lib_decl(_terminal.LIB_ID,,'void','setTerminalParameters','String','int','String');
   _terminal.set_term_param:="lib_call(.CALL_TERM_PARAM, OZ.TSAI, OZ.TSP, OZ.FIS().KOD)";
::   Płatność kartą (w groszach, kwota pomnożona przez 100)
   _terminal.CALL_RESULT_CODE:=lib_decl(_terminal.LIB_ID,,'int','processPayment','int');
   _terminal.get_payment:="lib_call(.CALL_RESULT_CODE,_a * 100)";
::   Kod wyniku ostatniej transakcji na terminalu
   _terminal.CALL_PAYMENT:=lib_decl(_terminal.LIB_ID,,'int','getTransactionResultCode');
   _terminal.get_result_code:="lib_call(.CALL_PAYMENT)";
::   Opis wyniku trensakcji
   _terminal.CALL_RESULT_MESSAGE:=lib_decl(_terminal.LIB_ID,,'String','getTransactionResultMessage');
   _terminal.get_result_message:="lib_call(.CALL_RESULT_MESSAGE)";
::   Opis błędu ogólnego
   _terminal.CALL_ERROR_MESSAGE:=lib_decl(_terminal.LIB_ID,,'String','getErrorMessage');
   _terminal.get_error_message:="lib_call(.CALL_ERROR_MESSAGE)";
::   Numer trensakcji
   _terminal.CALL_REF_NUMBER:=lib_decl(_terminal.LIB_ID,,'String','getTransactionRefNumber');
   _terminal.get_ref_number:="lib_call(.CALL_REF_NUMBER)";

   _terminal.CALL_SETNUMDOK:=lib_decl(_terminal.LIB_ID,,'void','setReceiptNumber','String');
   _terminal.set_numdok:="lib_call(.CALL_SETNUMDOK,_a)";
::   Test window
::   _terminal.CALL_SHOW_WINDOW:=lib_decl(_terminal.LIB_ID,,'int','showWindow');
::   _terminal.get_show_window:="lib_call(.CALL_SHOW_WINDOW)";

   _terminal.CALL_REFUND:=lib_decl(_terminal.LIB_ID,,'int','processRefund', 'int');
   _terminal.get_refund:="lib_call(.CALL_REFUND, _a * 100)";

   _terminal.CALL_REVERSAL:=lib_decl(_terminal.LIB_ID,,'int','processReversal', 'int');
   _terminal.get_reversal:="0";

::   public int processPaymentWithCashback(int amount, int cashback, int maxCashback)
   _terminal.CALL_CASHBACK:=lib_decl(_terminal.LIB_ID,,'int','processPaymentWithCashback', 'int', 'int', 'int');
   _terminal.get_cashback:="lib_call(.CALL_CASHBACK, _a * 100, _b * 100, _c * 100)";

   _terminal.CALL_PAIR:=lib_decl(_terminal.LIB_ID,,'int','pair');
   _terminal.pair:="lib_call(.CALL_TERM_PARAM, FIS.TSAI, FIS.TSP, FIS.KOD);
         _res:=lib_call(.CALL_PAIR);
         {? _res=0 || msg('Parowanie zakończone'@) || msg('Wystąpił błąd podczas parowania:'@+$_res) ?}";

   {? var_pres('__TERMSIX')>0 || obj_del(__TERMSIX) ?};
   __TERMSIX:=_terminal;
   ~~
?};
_terminal


\libload_polcard
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Laduje TerminalFirstData.jar jako bibliotekę jar
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::laduje biblioteke
_terminalSix:=obj_new('LIB_ID'
                  ,'CALL_TERM_PARAM'
                  ,'CALL_PAYMENT'
                  ,'CALL_RESULT_CODE'
                  ,'CALL_RESULT_MESSAGE'
                  ,'CALL_ERROR_MESSAGE'
                  ,'CALL_REF_NUMBER'
                  ,'CALL_SHOW_WINDOW'
                  ,'CALL_REFUND'
                  ,'CALL_REVERSAL'
                  ,'CALL_CASHBACK'
                  ,'set_term_param'
                  ,'get_payment'
                  ,'get_result_code'
                  ,'get_result_message'
                  ,'get_error_message'
                  ,'get_ref_number'
                  ,'get_show_window'
                  ,'get_refund'
                  ,'get_reversal'
                  ,'get_cashback'
                  );
_terminalSix.LIB_ID:=lib_load('TerminalFirstData.jar', 1, 0);
{? _terminalSix.LIB_ID=0
||
   FUN.emsg('Błąd załadowania biblioteki TerminalFirstData.jar.'@)
||
   _terminalSix.CALL_TERM_PARAM:=lib_decl(_terminalSix.LIB_ID,,'void','setTerminalParameters','String','int','int');
   _terminalSix.set_term_param:="lib_call(.CALL_TERM_PARAM,OZ.TSAI,OZ.TSP,OZ.TSNS)";
::   Płatność kartą (w groszach, kwota pomnożona przez 100)
   _terminalSix.CALL_RESULT_CODE:=lib_decl(_terminalSix.LIB_ID,,'int','processPayment','int');
   _terminalSix.get_payment:="lib_call(.CALL_RESULT_CODE,_a * 100)";
::   Kod wyniku ostatniej transakcji na terminalu
   _terminalSix.CALL_PAYMENT:=lib_decl(_terminalSix.LIB_ID,,'int','getTransactionResultCode');
   _terminalSix.get_result_code:="lib_call(.CALL_PAYMENT)";
::   Opis wyniku trensakcji
   _terminalSix.CALL_RESULT_MESSAGE:=lib_decl(_terminalSix.LIB_ID,,'String','getTransactionResultMessage');
   _terminalSix.get_result_message:="lib_call(.CALL_RESULT_MESSAGE)";
::   Opis błędu ogólnego
   _terminalSix.CALL_ERROR_MESSAGE:=lib_decl(_terminalSix.LIB_ID,,'String','getErrorMessage');
   _terminalSix.get_error_message:="lib_call(.CALL_ERROR_MESSAGE)";
::   Numer trensakcji
   _terminalSix.CALL_REF_NUMBER:=lib_decl(_terminalSix.LIB_ID,,'String','getTransactionRefNumber');
   _terminalSix.get_ref_number:="lib_call(.CALL_REF_NUMBER)";

::   Test window
::   _terminalSix.CALL_SHOW_WINDOW:=lib_decl(_terminalSix.LIB_ID,,'int','showWindow');
::   _terminalSix.get_show_window:="lib_call(.CALL_SHOW_WINDOW)";

   _terminalSix.CALL_REFUND:=lib_decl(_terminalSix.LIB_ID,,'int','processRefund', 'int');
   _terminalSix.get_refund:="lib_call(.CALL_REFUND, _a * 100)";

   _terminalSix.CALL_REVERSAL:=lib_decl(_terminalSix.LIB_ID,,'int','processReversal', 'int');
   _terminalSix.get_reversal:="lib_call(.CALL_REVERSAL, _a * 100)";

::   public int processPaymentWithCashback(int amount, int cashback, int maxCashback)
   _terminalSix.CALL_CASHBACK:=lib_decl(_terminalSix.LIB_ID,,'int','processPaymentWithCashback', 'int', 'int', 'int');
   _terminalSix.get_cashback:="lib_call(.CALL_CASHBACK, _a * 100, _b * 100, _c * 100)";

   {? var_pres('__TERMSIX')>0 || obj_del(__TERMSIX) ?};
   __TERMSIX:=_terminalSix;
   ~~
?};
_terminalSix



\test_300165
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [18.42]
:: OPIS:
:: params_exec('test_300165','pos_pay')
::----------------------------------------------------------------------------------------------------------------------
_lf:=params_get().linefoot;
_lf.add(25,'Nr zam.wew.:   1');
_lf.add(25,'Nr zam.wew.:   2');
_lf.add(25,'Nr zam.wew.:   3');
_lf.add(25,'Nr zam.wew.:   4');
_lf.add(25,'Nr zam.wew.:   5');
_lf.add(25,'Nr zam.wew.:   6');
_lf.add(25,'Nr zam.wew.:   7');
_lf.add(25,'Nr zam.wew.:   8');
_lf.add(25,'Nr zam.wew.:   9');
_lf.add(25,'Nr zam.wew.:   10');
_lf.add(25,'Nr zam.wew.:   11');
_lf.add(25,'Nr zam.wew.:   12');
_lf.add(25,'Nr zam.wew.:   13');
_lf.add(25,'Nr zam.wew.:   14');
_lf.add(25,'Nr zam.wew.:   15');
_lf.add(25,'Nr zam.wew.:   16');
_lf.add(25,'Nr zam.wew.:   17');
_lf.add(25,'Nr zam.wew.:   18');
_lf.add(25,'Nr zam.wew.:   19');
_lf.add(25,'Nr zam.wew.:   20')


:Sign Version 2.0 jowisz:1048 2023/06/23 14:14:37 7d5dd87e9844679d5a94b6398b851c59b9ca2ce16d56bfb2c32c4002b961e8e969c23de946acbb123ebab8c5c284e7e64ba83b68194e9fcddc24713bd98679f588d0adf145e63deceae2702df0acbd81e12a8731f24088f7fdde71b7750d277c32124aa97d8cb4495cc2c4fe37c553ab98f8d429e7057a41bad9e39b8ffe5932
