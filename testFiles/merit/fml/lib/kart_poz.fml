:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: kart_poz.fml
:: Utworzony: 13.05.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartosc: Formuły obsługujące kartoteki pełnionych obowiązkow, zastępstw i zwierzchności pracownikow.
::======================================================================================================================


\p_pz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz przed dołączeniem wiersza tabeli P_PZ.
::   WE:
::   WY:
::  OLD: \pz_biu/kart_poz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('p_pz_modb','kart_poz')


\p_pz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz przed poprawieniem wiersza tabeli P_PZ.
::   WE:
::   WY:
::  OLD: \pz_biu/kart_poz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('p_pz_modb','kart_poz')


\p_pz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2011]
:: OPIS: Formula wyzwalacza przed dolacz i przed popraw tabeli P_PZ.
::  OLD: \pz_biu/kart_poz.fml
::  OLD: \biu_co/kart_poz.fml
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
OSOBA.cntx_psh();
{? P_PZ.P<>null & P_PZ.P_OSO<>P_PZ.P().OSOBA
|| P_PZ.P_OSO:=P_PZ.P().OSOBA
?};
{? P_PZ.PZ<>null & P_PZ.PZ_OSO<>P_PZ.PZ().OSOBA
|| P_PZ.PZ_OSO:=P_PZ.PZ().OSOBA
?};
OSOBA.cntx_pop();
P.cntx_pop();

{? P_PZ.CO='N'
|| P_PZ.DO:=date(0,0,0)
?};

1


\p_pz_klasa_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola KLASA tabeli P_PZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.PZ_KLASA


\p_pz_p_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola P tabeli P_PZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.PZ_P


\p_pz_p_oso_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola P_OSO tabeli P_PZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.PZ_OSOBA


\p_pz_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wybór zastępcy / podwładnego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('wybierz_args','pracownik');
_arg.DOMAIN:='PKD';
_arg.UD_SCH:=exec('domyslny','schemat','PODZORG');
_arg.UD_SKL:=exec('ud_def_firma','schemat','PODZORG');
_arg.F_ZATR:='P,Z,K';
_arg.WIELU:=0;
{? exec('lic','#b_domain','POR') & P_PZ.TYP=exec('domyslny','zs_typ',1,0).SLO_KOD
|| _arg.SQL_WHERE:='P.PORTAL=\'T\''
?};
_ret:=exec('wybierz','pracownik',_arg);
{? _ret.P.first() & P.seek(_ret.P.SQL)
|| P_PZ.PZ:=P.ref()
?};
''


\p_pz_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Wybór zastępców / podwładnych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_arg:=exec('wybierz_args','pracownik');
_arg.DOMAIN:='PKD';
_arg.UD_SCH:=exec('domyslny','schemat','PODZORG');
_arg.UD_SKL:=exec('ud_def_firma','schemat','PODZORG');
_arg.F_ZATR:='P,Z,K';
_arg.WIELU:=1;
_ret:=exec('wybierz','pracownik',_arg);

_par:=params_get();
{? var_pres('_par')>100 & var_pres('par',_par)>100 & var_pres('P',_par.par)>=0
:  przez parametry wywołania podano referencję bufora o poprawnej strukturze
|| {? type_of(_par.par.P)=type_of(SYSLOG)
:     ponowny wybór współpracowników
   || obj_del(_par.par.P)
   ?};
:  lista współpracowników
   _par.par.P:=_ret.P
?};
''


\p_pz_typ_pt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [22.26]
:: OPIS: Wzorzec dla pola TYP - ograniczenie zakresu słownika przez filtrowanie.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.clear();
_kol:='NAZWA';
_ogr:='SLO_KOD.SLO_TYP=:_a';
_typ:=exec('slo_typ','zs_typ');
exec('slownik','ext_slo','TYPPOZ');
{? exec('jednorodne_zas','zs_lib')<>0
:: zastępstwa nie dla typów dodatkowych
|| SLO_KOD.f_set(_kol,,
      '%1 and SLO_KOD.REFERENCE not in ('
      '  select ZS_DOD.KOD_DOD from ZS_DOD where ZS_DOD.FIRMA=:_b'
      ')'[_ogr],
      _typ,exec('ref_firma','ustawienia')
   )
|| SLO_KOD.f_set(_kol,,_ogr,_typ)
?};
''


\p_pz_co_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wyświetleniem pola CO tabeli P_PZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wnd:=P_PZ.win_edit('?');
_opt:="'enable=%1,mark=%1'[$_a]";
_enable:=obj_new('od','do');

_enable.od:=1;
_enable.do:=(P_PZ.CO='T');
P_PZ.efld_opt(_wnd,_opt(_enable.od),,'OD');
P_PZ.efld_opt(_wnd,_opt(_enable.do),,'DO');
1


\p_pz_rekord_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rekord przed okienek tabeli P_PZ.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.PZ_P().OSOBA()


\p_pz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po edycji wiersza tabeli P_PZ.
::   WE:
::   WY: zgodna ze specyfikacją dla akcji "rekord po"
::  OLD: \sprawdz/kart_poz.fml
::  OLD: \sprawdz_dat/kart_poz.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(P_PZ,,'TYP','OD'))<>''
|| return(_chk)
?};

{? exec('jednorodne_zas','zs_lib')<>0
:: zastępstwa nie dla typów dodatkowych
|| ZS_DOD.cntx_psh();
   ZS_DOD.clear();
   _test:=ZS_DOD.find_tab(,
      'FIRMA',,'=',exec('ref_firma','ustawienia'),
      'KOD_DOD',,'=',P_PZ.TYP
   );
   ZS_DOD.cntx_pop();
   {? _test<>0
   || FUN.emsg('Zastępstwa nie są dozwolone dla dodatkowych zależności służbowych'@);
      return('TYP')
   ?}
?};

_por:=exec('lic','#b_domain','POR');

{? ~_por & P_PZ.CO='T'
|| {? (_chk:=__CHK.record(P_PZ,,'DO'))<>''
   || return(_chk)
   ?};
   {? P_PZ.DO<P_PZ.OD
   || exec('alert','overlap');
      return('OD')
   ?}
?};
{? exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD'))
|| {? __CHK.record(P_PZ,1,'PZ')<>''
   || {? P_PZ.KLASA='Z'
      || FUN.emsg('Zastępca musi być określony.\nNależy uzupełnić brakujące informacje.'@)
      || FUN.emsg('Podwładny musi być określony.\nNależy uzupełnić brakujące informacje.'@)
      ?};
      return(0)
   ?}
|| {? __CHK.record(P_PZ,1,'PZ_OSO')<>''
   || {? P_PZ.KLASA='Z'
      || FUN.emsg('Zastępca musi być określony.\nNależy uzupełnić brakujące informacje.'@)
      || FUN.emsg('Podwładny musi być określony.\nNależy uzupełnić brakujące informacje.'@)
      ?};
      return(0)
   ?}
?};

{? _por
|| {? P_PZ.P<>null & P_PZ.PZ<>null & P_PZ.PZ<>P_PZ.P & P_PZ.KLASA='Z' & P_PZ.TYP=exec('domyslny','zs_typ',1,0).SLO_KOD
   || P.cntx_psh();
      P.prefix();
      _ok:=1;
      {? P_PZ.PZ().PORTAL<>'T'
      || FUN.emsg('%1\n%2'@[
               'Wybrany typ jest typem zależności udostępnianym na Portal HR. '@,
               'Dla tego typu należy wybrać zastępcę, którego dane są prezentowane na portalu.'@
            ]
         );
         _ok*=0
      ?};
      P.cntx_pop();
      {? ~_ok || return(_ok) ?}
   ?}
?};

_skipAbsences:=(P_PZ.NB='N');

{? _por
|| P.cntx_psh(); OSOBA.cntx_psh();
   P.prefix(); OSOBA.prefix();
   _pz_oso:=P_PZ.PZ().OSOBA().ref;
   _p_oso:=P_PZ.P().OSOBA().ref;
   OSOBA.cntx_pop(); P.cntx_pop();
   _zaslu:=obj_new('p','pz');
   _zaslu.p:=exec('zaslu','portal_zaslu',_p_oso,P_PZ.TYP,P_PZ.OD,_skipAbsences);
   _zaslu.pz:=exec('zaslu','portal_zaslu',_pz_oso,P_PZ.TYP,P_PZ.OD,_skipAbsences)
?};

_popraw:=(-menu_txt()='popraw');
_loopLevel:=obj_new('employee','company');
_loopLevel.employee:=1;
_loopLevel.company:=2;

{? P_PZ.P<>null & P_PZ.PZ<>null & P_PZ.PZ=P_PZ.P
|| {? P_PZ.KLASA='Z'
   || FUN.emsg('Pracownik nie może być swoim zastępcą.'@)
   || FUN.emsg('Pracownik nie może być swoim podwładnym.'@)
   ?};
   return(0)

|? P_PZ.P_OSO<>null & P_PZ.PZ_OSO<>null & P_PZ.PZ_OSO=P_PZ.P_OSO
|| {? P_PZ.KLASA='Z'
   || FUN.emsg('Osoba nie może być swoim zastępcą.'@)
   || FUN.emsg('Osoba nie może być swoim podwładnym.'@)
   ?};
   return(0)

|? (_chk:=exec('p_pz_okres_ae','kart_poz',_popraw))<>''
|| FUN.info(_chk);
   return(0)

|? _por
      &
   (_looped:=
      {? exec('looped','portal_zaslu',_zaslu.p,_pz_oso,_popraw,_skipAbsences).looped |
         exec('looped','portal_zaslu',_zaslu.pz,_p_oso,_popraw,_skipAbsences).looped
      || _loopLevel.employee
      || {? exec('test_all','portal_zaslu',P_PZ.TYP,P_PZ.P,P_PZ.PZ)
         || _loopLevel.company
         ?}
      ?}
   )
||
   {? _looped=_loopLevel.employee
   || FUN.emsg(exec('looped_kom','portal_zaslu'))
   |? _looped=_loopLevel.company
   || FUN.emsg(exec('looped_kom','portal_zaslu',1,_popraw))
   ?};
   return(0)

|? (_chk:=exec('p_pz_role_ae','kart_poz'))<>''
|| FUN.ask('%1\nCzy zapisać wprowadzone informacje?'@[_chk])

|| 1
?}


\p_pz_w_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Po edycji okienka dołączenia wielu współpracowników.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? __CHK.record(P_PZ,,'TYP')<>''
|| return('TYP')
?};

{? P_PZ.CO='T'
|| {? (_chk:=__CHK.record(P_PZ,,'OD','DO'))<>''
   || return(_chk)
   ?};
   {? P_PZ.DO<P_PZ.OD
   || exec('alert','overlap');
      return('OD')
   ?}
?};

_par:=params_get();
{? var_pres('_par')>100 & var_pres('par',_par)>100 & var_pres('P',_par.par)>=0
:  przez parametry wywołania podano referencję bufora o poprawnej strukturze
|| {? type_of(_par.par.P)<>type_of(SYSLOG) | _par.par.P.size()=0
   || FUN.emsg('Nie wybrano żadnego współpracownika.'@);
      return(0)
   ?}
?};
1


\p_pz_okres_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [12.41]
:: OPIS: Sprawdza czy okresy zastępstw tego samego typu nie nakładają się na siebie
::   WE: _a - 0 dołączanie, 1 poprawianie
::   WY: treść komunikatu o błędzie lub ''
::  OLD: \sprawdz_okres/kart_poz.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:={? _a || P_PZ.ref() || null ?};
_por:=exec('lic','#b_domain','POR');
_pz:=obj_new('p','pz','p_oso','pz_oso','od','do','typ');
_pz.p:=P_PZ.P;
_pz.pz:=P_PZ.PZ;
_pz.p_oso:=P_PZ.P_OSO;
_pz.pz_oso:=P_PZ.PZ_OSO;
_pz.od:=P_PZ.OD;
_pz.do:=P_PZ.DO;
_pz.typ:=P_PZ.TYP;

P_PZ.cntx_psh();

{? P_PZ.KLASA='Z'
|| {? ~exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD'))
   || P_PZ.index('P_PZO2');
      P_PZ.prefix('Z',P_PZ.TYP,P_PZ.P_OSO)
   || P_PZ.index('P_PZ2');
      P_PZ.prefix('Z',P_PZ.TYP,P_PZ.P)
   ?};
   _loop:=P_PZ.first();
   {!
   |? _loop
   |! {? P_PZ.ref()<>_ref
      || {? exec('is','overlap',P_PZ,_pz.od,_pz.do)
         || _same:=(((_pz.p=P_PZ.P & _pz.pz=P_PZ.PZ) | (_pz.p_oso=P_PZ.P_OSO & _pz.pz_oso=P_PZ.PZ_OSO)) &
               _pz.typ=P_PZ.TYP
            );
            _parUniq:={? _por || #exec('get_par','#portal','CheckReplRoleIsUniqueForPeriod') ?};
            {? ~_por | (_por & _parUniq)
            || P_PZ.cntx_pop();
               return('Na podany okres został już wyznaczony zastępca.'@)
            |? _same
            || P_PZ.cntx_pop();
               return('Wybrany pracownik jest już przypisany w roli zastępcy dla wskazanego okresu.'@)
            ?}
         ?}
      ?};
      _loop:=P_PZ.next()
   !}

|? P_PZ.KLASA='P'
|| {? ~exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD'))
   || P_PZ.index('PZ_OSO1');
      P_PZ.prefix('P',P_PZ.TYP,P_PZ.PZ_OSO)
   || P_PZ.index('REVERT');
      P_PZ.prefix('P',P_PZ.TYP,P_PZ.PZ)
   ?};
   _loop:=P_PZ.first();
   {!
   |? _loop
   |! {? P_PZ.ref()<>_ref
      || {? exec('is','overlap',P_PZ,_pz.od,_pz.do)
         || P_PZ.cntx_pop();
            return(
               {? ~exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD'))
               || 'Osoba nie może być jednocześnie podwładnym kilku osób.'@
               || 'Pracownik nie może być jednocześnie podwładnym kilku osób.'@
               ?}
            )
         ?}
      ?};
      _loop:=P_PZ.next()
   !}
?};

P_PZ.cntx_pop();
''


\p_pz_role_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.41]
:: OPIS: Sprawdza czy zastepca ma wymagane czynności.
::   WE:
::   WY: tresc komunikatu o bledzie lub ''
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? P_PZ.KLASA='Z'
|| _jest:=0;
   _user_pz:=exec('osoba2user','users',P_PZ.PZ().OSOBA);

   {? _user_pz=null()
   || _result:='Brak zarejestrowanego użytkownika dla osoby zastępującej.\n'
               'Nie jest możliwe sprawdzenie uprawnień do wymaganych czynności dla zastępcy.'@+'\n'
   || SLO_KOD.cntx_psh();
      _kod:=P_PZ.TYP().KOD;
      SLO_KOD.cntx_pop();
      {? Plugin.runnable('P_PZ_UPR')=1
      || P.cntx_psh();
         _user_p:=exec('osoba2user','users',P_PZ.P().OSOBA);
         _result:=Plugin.run('P_PZ_UPR',_kod,_user_p,_user_pz);
         P.cntx_pop()
      || _sql:="select B_ACTION.UID from B_ACTION where B_ACTION.UID like ";
          {? _kod='DOSTINF'
::    sprawdzamy dostęp do danych pracownika
         || _sql+=''+"'PKW_POR_P%'";
            _result:='Zastępca nie ma wymaganych uprawnień.\n'
                     'Brak dostępu do czynności uprawniającej do przeglądania\n'
                     'danych w imieniu podwładnych (PKW_POR_P*).'@+'\n'

         |? _kod='AKCWNIO'
::    sprawdzamy dostęp do rejestracji lub akceptacji wniosków/planów urlopowych
         || _sql+=''+"'PKW_POR_I%U'";
            _result:='Zastępca nie ma wymaganych uprawnień.\n'
                     'Brak dostępu do czynności uprawniającej do rejestracji lub weryfikacji\n'
                     'wniosków/planów urlopowych (PKW_POR_I*U).'@+'\n'

         || _sql+=''+"''";
            _jest:=1
         ?};

:: pobieramy wymagane role i sprawdzamy czy użytkownik ma je przypisane
         _tab:=sql(_sql);
         {? _tab.first()
         || {!
            |? _jest+=exec('chk_role','#b__box',_user_pz,_tab.UID);
               ~_jest & _tab.next()
            !}
         ?};
:: jeżeli pracownik zastępowany ma jakąkolwiek z wymaganych ról to kasujemy komunikat
         {? _jest || _result:='' ?}
      ?}
   ?}
?};
_result


\p_pz_okno_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa "przed" okien WER_ZAS i WER_POD tabeli P_PZ
::   WE: _a [STRING] - klasa kartoteki
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.PZ_KLASA:=_a;
EDIT_VAR.PZ_P:=REF.P;
EDIT_VAR.PZ_OSOBA:=REF.OSOBA;

_red:='';
{? _a='Z'
|| _red:={? exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD')) || 'RED_ZASP' || 'RED_ZASO' ?}

|? _a='P'
|| _red:={? exec('lic','#b_domain',exec('domain_ref','#b_domain','PKD')) || 'RED_PODP' || 'RED_PODO' ?}

|| return(0)
?};

P_PZ.win_edit(_red);

1


\p_pz_okno_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa "po" okien WER_ZAS i WER_POD tabeli P_PZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.f_clear();
REF.P:=EDIT_VAR.PZ_P;
REF.OSOBA:=EDIT_VAR.PZ_OSOBA;
REF.P().OSOBA();
1

:Sign Version 2.0 jowisz:1045 2023/09/15 15:27:19 b84f47b22b1de1f0e67a7962424e0c0a5a9d8053868f547889cab4cb6dd2fedda46fe9065fe1824c20f1ad46131ad223ba2c54623455388b10231caf5c5eea2948609f22c58ae5d50f8dbe3cc81f465ad8edfe5d15eeaa8d00c95ee8a19101eb25c77e17106ef6451c7b4530be2033a6ca24334b53113796eaf2f4e17ac81bc4
