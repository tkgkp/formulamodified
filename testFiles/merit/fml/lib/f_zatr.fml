:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: f_zatr.fml
:: Utworzony: 11.12.2012
:: Autor: PK
::======================================================================================================================
:: Zawartość: Formuły związane z obsługą form współpracy.
::======================================================================================================================


\f_zatr_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "usuń przed" rekordu tabeli F_ZATR
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',F_ZATRA,'UNIQUE',F_ZATR.ref()) &
exec('del_ndx','#table',F_ZATRN,'TECH_D',F_ZATR.ref()) &
exec('del_tmp','#table',USERS_FZ,'F_ZATR',F_ZATR.ref())


\filtruj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Nakłada filtr programowy na formy współpracy danego typu dostępne dla użytkownika w firmie.
::   WE: _a - typ formy współpracy: T - docelowa, N - przejściowa
::       _b - kolejność sortowania wyniku (domyślnie OPIS)
::----------------------------------------------------------------------------------------------------------------------
_sort:={? var_pres('_b')=type_of('') & _b<>'' || _b || 'OPIS' ?};
F_ZATR.clear();
F_ZATR.f_set(
   _sort,,
   {? var_pres('_a')=type_of('') & _a<>''
   || 'F_ZATR.DOCELOWA=\''+_a+'\' and '
   ?}+
   'F_ZATR.REFERENCE in ('+
   '  select U.F_ZATR'+
   '  from USERS_FZ as U'+
   '  where U.FIRMA=:_a and U.USERS=:_b and U.DOSTEP=\'T\''+
   ')',
   REF.FIRMA,
   OPERATOR.USER
)


\tmp2dest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje docelową formę współpracy dla formy określonej kodem.
::   WE:  _a  [STRING] - kod formy współpracy
::       [_b] [STRING] - kod spodziewanego wyniku:
::             'ref' [domyślnie] lub akronim pola tabeli F_ZATR, które ma być zwrócone.
::   WY: wskazanie formy docelowej, lub wartość pola o akronimie przekazanym w parametrze _b.
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;
_tr:={? var_pres('_b')=type_of('') & var_pres(_b,F_ZATR)>0 || _b || 'ref()' ?};

_ret:=~~;
F_ZATR.cntx_psh();
F_ZATRN.cntx_psh();
F_ZATRN.index('TRN_F');
F_ZATRN.prefix('T');
{? F_ZATRN.find_key(_kod,)
|| _ret:=($('F_ZATRN.DOCELOWA().'+_tr))()
?};
F_ZATRN.cntx_pop();
F_ZATR.cntx_pop();
_ret


\tmp4dest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje tymczasową formę współpracy dla formy określonej kodem.
::   WE:  _a  [STRING] - kod formy współpracy
::       [_b] [STRING] - kod spodziewanego wyniku:
::             'ref' [domyślnie] lub akronim pola tabeli F_ZATR, które ma być zwrócone.
::   WY: wskazanie na tymczasową formę współpracy
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;
_tr:={? var_pres('_b')=type_of('') & var_pres(_b,F_ZATR)>0 || _b || 'ref()' ?};

_ret:=~~;
F_ZATR.cntx_psh();
F_ZATRN.cntx_psh();
F_ZATRN.index('TRN_D');
F_ZATRN.prefix('N');
{? F_ZATRN.find_key(_a,)
|| _ret:=($('F_ZATRN.F_ZATR().'+_tr))()
?};
F_ZATRN.cntx_pop();
F_ZATR.cntx_pop();
_ret


\dest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła zwraca informacje o docelowej formie współpracy.
::   WE: _a [STRING/REFERENCE]   - Kod lub wskazanie na formę współpracy. Jeżeli jest to forma tymczasowa, to najpierw
::                                 znaleziona zostanie forma docelowa.
::                                 Dla formy docelowej zwrócona zostanie wartość określona przez parametr _b.
::       [_b] [STRING]           - kod spodziewanego wyniku:
::                                 'ref' [domyślnie] lub akronim pola tabeli F_ZATR, które ma być zwrócone.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=~~;
F_ZATR.cntx_psh();
F_ZATR.index('UNIQUE');
F_ZATR.prefix();
{? (var_pres('_a')=type_of('') & F_ZATR.find_key(_a)) |
   (var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=F_ZATR & F_ZATR.seek(_a))
|| _tr:={? var_pres('_b')=type_of('') & var_pres(_b,F_ZATR)>0 || _b || 'ref()' ?};
   _ret:=
      {? F_ZATR.DOCELOWA='T'
      || ($('F_ZATR.'+_tr))()
      || exec('tmp2dest','f_zatr',F_ZATR.KOD,_tr)
      ?}
?};
F_ZATR.cntx_pop();
_ret


\dostepna_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza, czy wskazana forma współpracy jest dostępna dla danej czynności.
::   WE: _a [STRING/REFERENCE] - Kod lub wskazanie formy współpracy.
::       _b [STRING/REFERENCE] - Identyfikator lub wskazanie czynności.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tref:=type_of(null());
_tstr:=type_of('');

_vpa:=var_pres('_a');
_f_zatr:=null();
{? _vpa=_tref & _a<>_f_zatr & ref_tab(_a)=F_ZATR
|| _f_zatr:=_a
|? _vpa=_tstr
|| F_ZATR.cntx_psh();
   F_ZATR.index('UNIQUE');
   F_ZATR.prefix(_a,);
   {? F_ZATR.first()
   || _f_zatr:=F_ZATR.ref()
   ?};
   F_ZATR.cntx_pop()
?};
{? _f_zatr=null()
|| return(0)
?};


_vpb:=var_pres('_b');
_act:=null();
{? _vpb=_tref & _b<>_act & ref_tab(_b)=B_ACTION
|| _act:=_b
|? _vpb=_tstr
|| _act:=exec('ref','#b_action',_b)
?};
{? _act=null()
|| return(0)
?};

_ret:=0;

F_ZATRA.cntx_psh();
F_ZATRA.index('UNIQUE');
F_ZATRA.prefix(_f_zatr,_act);
_ret:=F_ZATRA.first();
F_ZATRA.cntx_pop();

_ret


\dostepny_u
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza, czy wskazana forma współpracy jest dostępna dla danego użytkownika.
::   WE: [_a] [REFERENCE]        - Wskazanie firmy [domyślnie: bieżąca].
::       [_b] [REFERENCE]        - Wskazanie użytkownika [domyslnie: bieżący].
::        _c  [REFERENCE/STRING] - Wskazanie lub kod formy współpracy.
::       [_d] [NUMBER]           - Wyświetlać komunikaty o błędach?
::                                  0 - Nie [domyślnie].
::                                  1 - Tak.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tref:=type_of(null());

_firma:={? var_pres('_a')=_tref & _a<>null() & ref_tab(_a)=FIRMA || _a || exec('firma','ustawienia') ?};
_user:={? var_pres('_b')=_tref & _b<>null() & ref_tab(_b)=USERS || _b || exec('operatorUser','#users') ?};
F_ZATR.cntx_psh();
F_ZATR.index('UNIQUE');
F_ZATR.prefix();
{? (var_pres('_c')=_tref & _c<>null() & ref_tab(_c)=F_ZATR & F_ZATR.seek(_c)) |
   (var_pres('_c')=type_of('') & +_c=1 & F_ZATR.find_key(_c,))
|| _f_zatr:=F_ZATR.ref();
   _kod:=F_ZATR.KOD;
   _opis:=F_ZATR.OPIS
|| _f_zatr:=null()
?};
F_ZATR.cntx_pop();
_msg:=var_pres('_d')=type_of(0) & _d;

{? _f_zatr=null()
|| {? _msg
   || FUN.error('"%1" - nieprawidłowy argument wywołania.\n%2'@ ['F_ZATR','\\dostepny_u/f_zatr.fml'])
   ?};
   return(0)
?};

USERS_FZ.cntx_psh();
USERS_FZ.index('DOSTEP');
USERS_FZ.prefix('T',_firma,_user,_f_zatr);
_ret:=USERS_FZ.first();
USERS_FZ.cntx_pop();

{? ~_ret & _msg
|| FUN.emsg('Brak dostępu do formy współpracy o kodzie %1\n(%2).'@ [_kod,_opis])
?};

_ret


\kody
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła zwraca listę kodów form współpracy z uwzględnieniem uprawnień wskazanego użytkownika
::   WE: [_a] [REFERENCE] - Wskazanie użytkownika [domyślnie: bieżący].
::       [_b] [STRING]    - Wejściowa lista kodów form współpracy. Możliwe jest użycie kodów specjalnych,
::                          których znaczenie jest następujące:
::                            '*T'  - wszystkie docelowe formy współpracy [domyślnie];
::                            '*N'  - wszystkie tymczasowe formy;
::                            '*'   - wszystkie formy współpracy.
::   WY: Lista (oddzielona przecinkami) kodów form współpracy.
::----------------------------------------------------------------------------------------------------------------------
_user:={? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=USERS || _a || exec('operatorUser','#users') ?};
_f_zatr:={? var_pres('_b')=type_of('') || _b || '*T' ?};

_ret:=',';
USERS_FZ.cntx_psh();
USERS_FZ.index('W_ZATR');
USERS_FZ.prefix(exec('ref_firma','ustawienia'),_user);
_afz:=spli_str(_f_zatr,',');
{! _lp:=1 .. obj_len(_afz)
|! _kfz:=_afz[_lp];
   {? 1+_kfz='*'
::    Obsługa kodów specjalnych wymaga pętli po tabeli F_ZATR
   || {? _kfz='*' | _kfz='*T' | _kfz='*N'
      || F_ZATR.cntx_psh();
         {? +_kfz=2
         || F_ZATR.index('KOD');
            F_ZATR.prefix(_kfz+1)
         || F_ZATR.prefix()
         ?};
         _dfz:=F_ZATR.first();
         {!
         |? _dfz
         |! {? USERS_FZ.find_key(F_ZATR.KOD,) & USERS_FZ.DOSTEP='T' & _ret*(',%1,' [F_ZATR.KOD])=0
            || _ret+=F_ZATR.KOD+','
            ?};
            _dfz:=F_ZATR.next()
         !};
         F_ZATR.cntx_pop()
      ?}

   |? USERS_FZ.find_key(_kfz,) & USERS_FZ.DOSTEP='T' & _ret*(',%1,' [_kfz])=0
::    Tutaj pewien skrót myślowy. Może się okazać, że kod, który aktualnie badamy nie jest poprawnym kodem formy
::    współpracy. Ale tym bardziej nie będzie go wśród kodów, do których użytkownik ma dostęp.
   || _ret+=_kfz+','
   ?}
!};
USERS_FZ.cntx_pop();
1-_ret-1


\f_zatra_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Formuła dodaje zapisy do tabeli F_ZATRA.
::   WE:  _a  [STRING] - Docelowa forma współprcacy (flaga: T/N).
::        _b  [STRING] - Kod formy współpracy.
::        _c  [STRING] - Identyfikatory czynności oddzielone przecinkami.
::       [_d] [NUMBER] - Tryb wsadowy (0-nie/1-tak) [domyślnie:0].
::   WY: Komunikat o błędzie.
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_d')=type_of(0) & _d;
_msg:={? _batch  || "_a" || "FUN.emsg(_a); _a" ?};

{? var_pres('_a')=type_of('') & (_a='T' | _a='N')
|| _docelowa:=_a
|| return(_msg('Nieprawodłowa wartość parametru %1.'@ ['DOCELOWA']))
?};

F_ZATR.cntx_psh();
F_ZATR.index('KOD');
F_ZATR.prefix(_docelowa);
{? var_pres('_b')=type_of('') & F_ZATR.find_key(_b,)
|| _txt:='';
   _f_zatr:=F_ZATR.ref()
|| _txt:='Nieprawodłowa wartość parametru %1.'@ ['KOD'];
   _f_zatr:=null()
?};
F_ZATR.cntx_pop();
{? _txt<>''
|| return(_msg(_txt))
?};

{? var_pres('_c')=type_of('')
|| _arr:=spli_str(_c,',');
   _l1:='';
   _l2:='';
   F_ZATRA.cntx_psh();
   F_ZATRA.index('UNIQUE');
   F_ZATRA.prefix(_f_zatr);
   B_ACTION.cntx_psh();
   B_ACTION.index('UNIK');
   B_ACTION.prefix();
   {! _lp:=1 .. obj_len(_arr)
   |! _uid:=_arr[_lp];
      {? _uid=''
::       Nadgorliwy przecinek - nie róbmy scen.
      || ~~
      |? ~B_ACTION.find_key(_uid,)
      || _l1+='%1,' [_uid]
      |? ~F_ZATRA.find_key(B_ACTION.ref())
      || F_ZATRA.blank();
         F_ZATRA.F_ZATR:=_f_zatr;
         F_ZATRA.B_ACTION:=B_ACTION.ref();
         {? ~F_ZATRA.add(1)
         || _l2+='%1,' [_uid]
         ?}
      ?}
   !};
   B_ACTION.cntx_pop();
   F_ZATRA.cntx_pop();
   _txt:='';
   {? _l1<>''
   || _txt+='Lista nieznalezionych czynności: %1.'@ [_l1-1]+'\n'
   ?};
   {? _l2<>''
   || _txt+='Lista niedodanych czynności dla form współpracy: %1.'@ [_l2-1]+'\n'
   ?};
   {? _txt<>''
   || return(_msg(_txt-1))
   ?}

|| return(_msg('Nieprawodłowa wartość parametru %1.'@ ['UID']))
?};
''


\f_zatra_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy tabela F_ZATRA jest pusta i jeśli tak, to proponuje uzupełnienie danych.
::   WE: [_a] [NUMBER] - Przetwarzanie wsadowe (bez komunikatów):
::                         0 - Nie [domyślnie];
::                         1 - Tak.
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_a')=type_of(0) & _a;

F_ZATRA.cntx_psh();
F_ZATRA.index('UNIQUE');
F_ZATRA.prefix();
_size:=F_ZATRA.size();
F_ZATRA.cntx_pop();
{? _size |
   (
      ~_batch &
      ~FUN.ask(
         'Nie znaleziono informacji o czynnościach dla form współpracy.'@+'\n'+
         'Czy uzupełnić dane zgodnie z ustawieniami domyślnymi?'@
      )
   )
|| return()
?};

_add:="
   _lista:='';
   {! _lp:=3 .. _
   |! _lista+='%1,' [_[_lp]]
   !};
   exec('f_zatra_add','f_zatr',_a,_b,_lista-1)
";

: nawiązywanie współpracy
_add('N','p','PKD_ZAT_PDUM','PKD_ZAT_PRUM');
_add('N','p','ZWS_DOS_PPDA','ZWS_DOS_PRDA');
_add('N','p','PKD_DOS_PPRB','PKD_DOS_PRRB');
_add('N','p','PKD_DOS_PPUS','PKD_DOS_PRUS');
_add('N','p','PKD_DOS_PRSZ','PKD_DOS_PPSZ');
_add('N','p','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('N','p','PKD_EZK_ORBL','PKD_EZK_OPBL');
_add('N','p','PKD_EZK_OROD','PKD_EZK_OPOD');
_add('N','z','ZWS_DOS_PPDA','ZWS_DOS_PRDA');
_add('N','z','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('N','p','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('N','z','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('N','k','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('N','r','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('N','t','PKD_EZK_OPHG','PKD_EZK_ORHG');

: pracownicy

_add('T','P','ZWS_DOS_PRDA','ZWS_DOS_PPDA');
_add('T','P','PKD_DOS_PPRB','PKD_DOS_PRRB');
_add('T','P','PKD_DOS_PRKW','PKD_DOS_PPKW');
_add('T','P','PKD_DOS_PRRO','PKD_DOS_PPRD');
_add('T','P','PKD_DOS_PRTN','PKD_DOS_PPTN');
_add('T','P','PKD_DOS_PRWK','PKD_DOS_PPWK');
_add('T','P','PKD_EZK_ORBL','PKD_EZK_OPBL');
_add('T','P','PKD_EZK_ORNN','PKD_EZK_OPNN');
_add('T','P','PKD_DOS_PPDU','PKD_DOS_PRDU');
_add('T','P','PKD_DOS_PPUS','PKD_DOS_PRUS');
_add('T','P','PKD_DOS_PPJO','PKD_DOS_PRJO');
_add('T','P','PKD_DOS_PPPN','PKD_DOS_PRPN');
_add('T','P','PKD_DOS_PPUZ','PKD_DOS_PRUZ');
_add('T','P','PKD_DOS_PPWO','PKD_DOS_PRWO');
_add('T','P','PKD_DOS_PPSW','PKD_DOS_PRSW');
_add('T','P','PKD_DOS_PPWY','PKD_DOS_PRWY');
_add('T','P','ZWS_DOS_PRGI','ZWS_DOS_PPGI');
_add('T','P','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('T','P','PKD_EZK_OPDP','PKD_EZK_ORDP');
_add('T','P','PKD_EZK_OPDS','PKD_EZK_ORDS');
_add('T','P','PKD_EZK_OPPN','PKD_EZK_ORPN');
_add('T','P','PKD_EZK_OPDS','PKD_EZK_ORDS');
_add('T','P','PKD_EZK_RPZA','PKD_EZK_PPZA');
_add('T','P','PKD_EZK_OPSW','PKD_EZK_ORSW');
_add('T','P','PKD_EZK_ORWS','PKD_EZK_OPWS');
_add('T','P','PKD_EZK_OPZA','PKD_EZK_ORZA');
_add('T','P','PKD_EZK_OPKA','PKD_EZK_ORKA');
_add('T','P','PKD_EZK_ORHK','PKD_EZK_OPHK');
_add('T','P','PKD_EZK_ORKU','PKD_EZK_OPKU');
_add('T','P','PKD_EZK_ORUL','PKD_EZK_OPUL');
_add('T','P','PKD_DOS_PRSZ','PKD_DOS_PPSZ');
_add('T','P','PKD_EZK_WSPR');
_add('T','P','PPL_PLL_PZAF');
_add('T','P','PKD_EZK_OROD','PKD_EZK_OPOD');
_add('T','P','PKD_EZK_ORDI','PKD_EZK_OPDI');
_add('T','P','POR_BNF_RPRC','POR_BNF_PPRC');
_add('T','P','PKD_EZK_OPSP');
_add('T','P','PKD_EZK_DEKU');
_add('T','P','PKD_EZK_OROS','PKD_EZK_OPOS');
_add('T','P','PKD_EZK_ORWP','PKD_EZK_OPWP');
_add('T','P','BIQ_EZK_DISP');
_add('T','P','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('T','P','PKD_GRP_AWSP');
: zastępstwa, podwładni, pełnione obowiązki, przełożeni
_add('T','P','PKD_EZK_OPZS','PKD_EZK_ORZS');
_add('T','P','PKD_EZK_OPLP','PKD_EZK_ORLP');
_add('T','P','PKD_EZK_OPOB','PKD_EZK_OROB');
_add('T','P','PKD_EZK_OPLN','PKD_EZK_ORLN');
:: szkolenia pracowników
_add('T','P','PKD_EZK_OPSZ','PKD_EZK_ORSZ');
_add('T','P','PKD_EZK_OPPU');
_add('T','P','PKD_EZK_ORZW');

_add('T','P','PPL_PLL_NALS');
_add('T','P','PPL_PLL_PAKO');
_add('T','P','PPL_PLL_PKPR');
_add('T','P','PPL_PLL_PPOT','PPL_PLL_RPOT');
_add('T','P','PPL_PLL_RGOD','PPL_PLL_PGOD');
_add('T','P','PPL_PLL_RKOR','PPL_PLL_PKOR');
_add('T','P','PPL_PLL_RPKO','PPL_PLL_PPKO');
_add('T','P','PPL_PLL_RPOZ','PPL_PLL_PPOZ');
_add('T','P','PPL_PLL_RSKP','PPL_PLL_PSKP');
_add('T','P','PPL_PLL_RSOK','PPL_PLL_PSOK');
_add('T','P','PPL_PLL_RUUS','PPL_PLL_PUUS');
_add('T','P','PPL_PLL_RWSP','PPL_PLL_PWSP');
_add('T','P','PPL_PLL_RPSF','PPL_PLL_PPSF');
_add('T','P','PPL_PLL_RRZP','PPL_PLL_PRZP');
_add('T','P','PPL_PLL_RNZP','PPL_PLL_PNZP');

_add('T','P','PPL_ZDR_D11D','PPL_ZDR_D11W');
_add('T','P','PPL_ZDR_D40D','PPL_ZDR_D40W');
_add('T','P','PPL_ZDR_D8CD','PPL_ZDR_D8CW');
_add('T','P','PKD_EZK_ORWN');
_add('T','P','PKD_ZES_ZZUA','PKD_ZES_ZZWU');
_add('T','P','PPL_GRP_APAR');

:: Dokumentacja pracownicza
_add('T','P','PED_EZK_PEDP','PED_EZK_REDP');

:: pracownicy - webTerm
_add('T','P','PKW_POR_IADR','PKW_POR_PADR');
_add('T','P','PKW_POR_IBAN','PKW_POR_PBAN');
_add('T','P','PKW_POR_IBOK','PKW_POR_PBOK');
_add('T','P','PKW_POR_IBPP','PKW_POR_PBPP');
_add('T','P','PKW_POR_IKUR','PKW_POR_PKUR');
_add('T','P','PKW_POR_IKWA','PKW_POR_PKWA');
_add('T','P','PKW_POR_ILST','PKW_POR_PLST');
_add('T','P','PKW_POR_INIE','PKW_POR_PNIE');
_add('T','P','PKW_POR_IPOZ','PKW_POR_PPOZ');
_add('T','P','PKW_POR_IRDA','PKW_POR_PRDA');
_add('T','P','PKW_POR_IRPU');
_add('T','P','PKW_POR_IRWU','PKW_POR_PRWU');
_add('T','P','PKW_POR_ITYN','PKW_POR_PTYN');
_add('T','P','PKW_POR_IWPU');
_add('T','P','PKW_POR_IWWU');
_add('T','P','PKW_POR_IWYK','PKW_POR_PWYK');
_add('T','P','PKW_POR_IZAL','PKW_POR_PZAL');
_add('T','P','PKW_POR_IZAT','PKW_POR_PZAT');
_add('T','P','PKW_POR_OPDO','PKW_POR_PPDO');
_add('T','P','PKW_POR_IRPM');

:: pracownicy - rozliczenie czasu pracy
_add('T','P','PRC_CZP_DKWA');
_add('T','P','PRC_CZP_DMPR');
_add('T','P','PRC_CZP_DODB');
_add('T','P','PRC_CZP_DODO');
_add('T','P','PRC_CZP_DNAD');
_add('T','P','PRC_CZP_DOOK');
_add('T','P','PRC_CZP_DOPO');
_add('T','P','PRC_CZP_DPOK');
_add('T','P','PRC_CZP_DPPO');
_add('T','P','PRC_CZP_DPRZ');
_add('T','P','PRC_CZP_DPSY');
_add('T','P','PRC_CZP_DROZ');
_add('T','P','PRC_CZP_DRUC');
_add('T','P','PRC_CZP_DZOK');
_add('T','P','PRC_CZP_DZPO');
_add('T','P','PRC_CZP_PKAP');
_add('T','P','PRC_CZP_PKOR');
_add('T','P','PRC_CZP_PMCR');
_add('T','P','PRC_CZP_WOKR');
_add('T','P','PRC_MCR_DOMP');
_add('T','P','PRC_MCR_DWGD');
_add('T','P','PRC_MCR_DZMK');
_add('T','P','PRC_MCR_PWMC');
_add('T','P','PRC_MCR_WMRO');
_add('T','P','PRC_CZP_DPPN','PRC_CZP_DRPN');
_add('T','P','PRC_CZP_DPHW','PRC_CZP_PPHW');

: praca zdalna i kontrola trzeźwości
_add('T','P','PKD_EZK_ORAD','PKD_EZK_OPAD');
_add('T','P','PKD_EZK_ORPO','PKD_EZK_OPPO');
_add('T','P','PKD_EZK_ORZD','PKD_EZK_OPZD');
_add('T','P','PKD_EZK_ORKT','PKD_EZK_OPKT');
_add('T','P','PKD_GRP_BTGB','PKD_GRP_BTWY');

: zleceniobiorcy
_add('T','Z','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('T','Z','PKD_DOS_PPRB','PKD_DOS_PRRB');
_add('T','Z','ZWS_DOS_PRDA','ZWS_DOS_PPDA');
_add('T','Z','PKD_DOS_PRDU','PKD_DOS_PPDU');
_add('T','Z','ZWS_DOS_PRGI','ZWS_DOS_PPGI');
_add('T','Z','PKD_DOS_PRJO','PKD_DOS_PPJO');
_add('T','Z','PKD_DOS_PRRO','PKD_DOS_PPRD');
_add('T','Z','PKD_DOS_PRTN','PKD_DOS_PPTN');
_add('T','Z','PKD_DOS_PRUS','PKD_DOS_PPUS');
_add('T','Z','PKD_DOS_PRWO','PKD_DOS_PPWO');
_add('T','Z','PKD_DOS_PRWY','PKD_DOS_PPWY');
_add('T','Z','PKD_EZK_OPDP','PKD_EZK_ORDP');
_add('T','Z','PKD_EZK_ORHK','PKD_EZK_OPHK');
_add('T','Z','PKD_EZK_ORKA','PKD_EZK_OPKA');
_add('T','Z','PKD_EZK_ORKU','PKD_EZK_OPKU');
_add('T','Z','PKD_EZK_ORSW','PKD_EZK_OPSW');
_add('T','Z','PKD_EZK_ORWS','PKD_EZK_OPWS');
_add('T','Z','PPL_PLL_PPOT','PPL_PLL_RPOT');
_add('T','Z','PPL_PLL_RUUS','PPL_PLL_PUUS');
_add('T','Z','PPL_ZLC_RUZC','PPL_ZLC_PUZC','PPL_ZLC_WUZC');
_add('T','Z','PPL_ZDR_D11D','PPL_ZDR_D11W');
_add('T','Z','PPL_ZDR_D8CD','PPL_ZDR_D8CW');
_add('T','Z','PPL_ZDR_DIFD','PPL_ZDR_DIFW');
_add('T','Z','PPL_ZLC_RNIE','PPL_ZLC_PNIE');
_add('T','Z','PPL_ZLC_RUMP','PPL_ZLC_PUMP');
_add('T','Z','PKD_EZK_ORWN');
_add('T','Z','PPL_ZLC_RRAC','PPL_ZLC_PRAC','PPL_ZLC_WERH');
_add('T','Z','PKD_EZK_OPPU');
_add('T','Z','PKD_ZES_ZZUA','PKD_ZES_ZZWU');
_add('T','Z','PPL_ZLC_WUCP','PPL_ZLC_WRAC');
_add('T','Z','PKD_EZK_OPZA','PKD_EZK_ORZA');
_add('T','Z','PPL_PLL_PZAF');
_add('T','Z','PKD_EZK_ORDI','PKD_EZK_OPDI');
_add('T','Z','POR_BNF_RPRC','POR_BNF_PPRC');
_add('T','Z','PKD_EZK_DEKU');
_add('T','Z','PPL_PLL_RGOD','PPL_PLL_PGOD');
_add('T','Z','PPL_PLL_RPSF','PPL_PLL_PPSF');
_add('T','Z','PPL_PLL_RRZP','PPL_PLL_PRZP');
_add('T','Z','PPL_PLL_RNZP','PPL_PLL_PNZP');
_add('T','Z','PKD_EZK_OROS','PKD_EZK_OPOS');
_add('T','Z','PKD_EZK_ORWP','PKD_EZK_OPWP');
_add('T','Z','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('T','Z','PKD_GRP_AWSP');
_add('T','Z','PPL_GRP_APAR');
: zastępstwa, podwładni, pełnione obowiązki, przełożeni
_add('T','Z','PKD_EZK_OPZS','PKD_EZK_ORZS');
_add('T','Z','PKD_EZK_OPLP','PKD_EZK_ORLP');
_add('T','Z','PKD_EZK_OPOB','PKD_EZK_OROB');
_add('T','Z','PKD_EZK_OPLN','PKD_EZK_ORLN');

:: zleceniobiorcy - webTerm
_add('T','Z','PKW_POR_IADR','PKW_POR_PADR');
_add('T','Z','PKW_POR_IBAN','PKW_POR_PBAN');
_add('T','Z','PKW_POR_IKUR','PKW_POR_PKUR');
_add('T','Z','PKW_POR_INIE','PKW_POR_PNIE');
_add('T','Z','PKW_POR_IRDA','PKW_POR_PRDA');
_add('T','Z','PKW_POR_IRPU');
_add('T','Z','PKW_POR_IRWU','PKW_POR_PRWU');
_add('T','Z','PKW_POR_ITYN','PKW_POR_PTYN');
_add('T','Z','PKW_POR_IUZC','PKW_POR_PUZC');
_add('T','Z','PKW_POR_IWPU');
_add('T','Z','PKW_POR_IWWU');
_add('T','Z','PKW_POR_IZAL','PKW_POR_PZAL');
_add('T','Z','PKW_POR_OPDO','PKW_POR_PPDO');
_add('T','Z','PKW_POR_IUZC','PKW_POR_PUZC');
_add('T','Z','PKW_POR_IRPM');

:: zleceniobiorcy - rozliczenie czasu pracy
_add('T','Z','PRC_CZP_DKWA');
_add('T','Z','PRC_CZP_DMPR');
_add('T','Z','PRC_CZP_DODB');
_add('T','Z','PRC_CZP_DODO');
_add('T','Z','PRC_CZP_DOOK');
_add('T','Z','PRC_CZP_DOPO');
_add('T','Z','PRC_CZP_DPOK');
_add('T','Z','PRC_CZP_DPPO');
_add('T','Z','PRC_CZP_DPRZ');
_add('T','Z','PRC_CZP_DPSY');
_add('T','Z','PRC_CZP_DROZ');
_add('T','Z','PRC_CZP_DRUC');
_add('T','Z','PRC_CZP_DZOK');
_add('T','Z','PRC_CZP_DZPO');
_add('T','Z','PRC_CZP_PKAP');
_add('T','Z','PRC_CZP_PKOR');
_add('T','Z','PRC_CZP_PMCR');
_add('T','Z','PRC_CZP_WOKR');
_add('T','Z','PRC_MCR_DOMP');
_add('T','Z','PRC_MCR_DWGD');
_add('T','Z','PRC_MCR_DZMK');
_add('T','Z','PRC_MCR_PWMC');
_add('T','Z','PRC_MCR_WMRO');
_add('T','Z','PRC_CZP_DPPN','PRC_CZP_DRPN');
_add('T','Z','PRC_CZP_DPHW','PRC_CZP_PPHW');

: praca zdalna i kontrola trzeźwości
_add('T','Z','PKD_EZK_ORKT','PKD_EZK_OPKT');
_add('T','Z','PKD_GRP_BTGB','PKD_GRP_BTWY');

: kontraktowcy
_add('T','K','PPL_ZLC_RUMP','PPL_ZLC_PUMP');
_add('T','K','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('T','K','PKD_EZK_OPPU');
_add('T','K','PKD_EZK_ORWN');
_add('T','K','ZWS_DOS_PPDA','ZWS_DOS_PRDA');
_add('T','K','PKD_DOS_PPRB','PKD_DOS_PRRB');
_add('T','K','PKD_DOS_PPDU','PKD_DOS_PRDU');
_add('T','K','PKD_EZK_OPDP','PKD_EZK_ORDP');
_add('T','K','PKD_DOS_PPUS','PKD_DOS_PRUS');
_add('T','K','PKD_EZK_OPKU','PKD_EZK_ORKU');
_add('T','K','PKD_EZK_OPNN','PKD_EZK_ORNN');
_add('T','K','PKD_EZK_OPSW','PKD_EZK_ORSW');
_add('T','K','PKD_EZK_ORWS','PKD_EZK_OPWS');
_add('T','K','PKD_EZK_OPDS','PKD_EZK_ORDS');
_add('T','K','PKD_DOS_PPRD','PKD_DOS_PRRO');
_add('T','K','PKD_EZK_OPHK','PKD_EZK_ORHK');
_add('T','K','PKD_DOS_PPWY','PKD_DOS_PRWY');
_add('T','K','PKD_EZK_OPKA','PKD_EZK_ORKA');
_add('T','K','PKD_EZK_OPSZ','PKD_EZK_ORSZ');
_add('T','K','PKD_EZK_OPZA','PKD_EZK_ORZA');
_add('T','K','PKD_DOS_PRSZ','PKD_DOS_PPSZ');
_add('T','K','PPL_PLL_PZAF');
_add('T','K','PKD_EZK_ORDI','PKD_EZK_OPDI');
_add('T','K','POR_BNF_RPRC','POR_BNF_PPRC');
_add('T','K','PKD_EZK_DEKU');
_add('T','K','PPL_PLL_RPSF','PPL_PLL_PPSF');
_add('T','K','PPL_PLL_RRZP','PPL_PLL_PRZP');
_add('T','K','PPL_PLL_RNZP','PPL_PLL_PNZP');
_add('T','K','PKD_EZK_OROS','PKD_EZK_OPOS');
_add('T','K','PKD_EZK_ORWP','PKD_EZK_OPWP');
_add('T','K','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('T','K','PKD_GRP_AWSP');
_add('T','K','PPL_GRP_APAR');
: zastępstwa, podwładni, pełnione obowiązki, przełożeni
_add('T','K','PKD_EZK_OPZS','PKD_EZK_ORZS');
_add('T','K','PKD_EZK_OPLP','PKD_EZK_ORLP');
_add('T','K','PKD_EZK_OPOB','PKD_EZK_OROB');
_add('T','K','PKD_EZK_OPLN','PKD_EZK_ORLN');

:: kontraktowcy - webTerm
_add('T','K','PKW_POR_IADR','PKW_POR_PADR');
_add('T','K','PKW_POR_IBAN','PKW_POR_PBAN');
_add('T','K','PKW_POR_IKUR','PKW_POR_PKUR');
_add('T','K','PKW_POR_INIE','PKW_POR_PNIE');
_add('T','K','PKW_POR_IRDA','PKW_POR_PRDA');
_add('T','K','PKW_POR_IRPU');
_add('T','K','PKW_POR_IRWU','PKW_POR_PRWU');
_add('T','K','PKW_POR_ITYN','PKW_POR_PTYN');
_add('T','K','PKW_POR_IWPU');
_add('T','K','PKW_POR_IWWU');
_add('T','K','PKW_POR_IZAL','PKW_POR_PZAL');
_add('T','K','PKW_POR_OPDO','PKW_POR_PPDO');
_add('T','K','PKW_POR_IRPM');

:: kontraktowcy - rozliczenie czasu pracy
_add('T','K','PRC_CZP_DKWA');
_add('T','K','PRC_CZP_DMPR');
_add('T','K','PRC_CZP_DODB');
_add('T','K','PRC_CZP_DODO');
_add('T','K','PRC_CZP_DOOK');
_add('T','K','PRC_CZP_DOPO');
_add('T','K','PRC_CZP_DPOK');
_add('T','K','PRC_CZP_DPPO');
_add('T','K','PRC_CZP_DPRZ');
_add('T','K','PRC_CZP_DPSY');
_add('T','K','PRC_CZP_DROZ');
_add('T','K','PRC_CZP_DRUC');
_add('T','K','PRC_CZP_DZOK');
_add('T','K','PRC_CZP_DZPO');
_add('T','K','PRC_CZP_PKAP');
_add('T','K','PRC_CZP_PKOR');
_add('T','K','PRC_CZP_PMCR');
_add('T','K','PRC_CZP_WOKR');
_add('T','K','PRC_MCR_DOMP');
_add('T','K','PRC_MCR_DWGD');
_add('T','K','PRC_MCR_DZMK');
_add('T','K','PRC_MCR_PWMC');
_add('T','K','PRC_MCR_WMRO');
_add('T','K','PRC_CZP_DPPN','PRC_CZP_DRPN');
_add('T','K','PRC_CZP_DPHW','PRC_CZP_PPHW');

: praca zdalna i kontrola trzeźwości
_add('T','K','PKD_EZK_ORKT','PKD_EZK_OPKT');
_add('T','K','PKD_GRP_BTGB','PKD_GRP_BTWY');

: RCP
_add('T','R','PPL_ZLC_RUMP','PPL_ZLC_PUMP');
_add('T','R','ZWS_DOS_PRDA','ZWS_DOS_PPDA');
_add('T','R','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('T','R','PKD_EZK_OPPU');
_add('T','R','PKD_EZK_OPZA','PKD_EZK_ORZA');
_add('T','R','PPL_PLL_RPSF','PPL_PLL_PPSF');
_add('T','R','PPL_PLL_RRZP','PPL_PLL_PRZP');
_add('T','R','PPL_PLL_RNZP','PPL_PLL_PNZP');
_add('T','R','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('T','R','PKD_GRP_AWSP');
_add('T','R','PPL_GRP_APAR');
: zastępstwa, podwładni, pełnione obowiązki
_add('T','R','PKD_EZK_OPZS','PKD_EZK_ORZS');
_add('T','R','PKD_EZK_OPLP','PKD_EZK_ORLP');
_add('T','R','PKD_EZK_OPOB','PKD_EZK_OROB');

:: RCP - webTerm
_add('T','R','PKW_POR_IADR','PKW_POR_PADR');
_add('T','R','PKW_POR_IBAN','PKW_POR_PBAN');
_add('T','R','PKW_POR_IKUR','PKW_POR_PKUR');
_add('T','R','PKW_POR_INIE','PKW_POR_PNIE');
_add('T','R','PKW_POR_IRDA','PKW_POR_PRDA');
_add('T','R','PKW_POR_IRPU');
_add('T','R','PKW_POR_IRWU','PKW_POR_PRWU');
_add('T','R','PKW_POR_ITYN','PKW_POR_PTYN');
_add('T','R','PKW_POR_IWPU');
_add('T','R','PKW_POR_IWWU');
_add('T','R','PKW_POR_IZAL','PKW_POR_PZAL');
_add('T','R','PKW_POR_OPDO','PKW_POR_PPDO');
_add('T','R','PKW_POR_IRPM');
_add('T','R','PKD_EZK_ORDI','PKD_EZK_OPDI');

:: RCP - rozliczenie czasu pracy
_add('T','R','PRC_CZP_DKWA');
_add('T','R','PRC_CZP_DMPR');
_add('T','R','PRC_CZP_DODB');
_add('T','R','PRC_CZP_DODO');
_add('T','R','PRC_CZP_DOOK');
_add('T','R','PRC_CZP_DOPO');
_add('T','R','PRC_CZP_DPOK');
_add('T','R','PRC_CZP_DPPO');
_add('T','R','PRC_CZP_DPRZ');
_add('T','R','PRC_CZP_DPSY');
_add('T','R','PRC_CZP_DROZ');
_add('T','R','PRC_CZP_DRUC');
_add('T','R','PRC_CZP_DZOK');
_add('T','R','PRC_CZP_DZPO');
_add('T','R','PRC_CZP_PKAP');
_add('T','R','PRC_CZP_PKOR');
_add('T','R','PRC_CZP_PMCR');
_add('T','R','PRC_CZP_WOKR');
_add('T','R','PRC_MCR_DOMP');
_add('T','R','PRC_MCR_DWGD');
_add('T','R','PRC_MCR_DZMK');
_add('T','R','PRC_MCR_PWMC');
_add('T','R','PRC_MCR_WMRO');
_add('T','R','PRC_CZP_DPPN','PRC_CZP_DRPN');
_add('T','R','PRC_CZP_DPHW','PRC_CZP_PPHW');

: praca zdalna i kontrola trzeźwości
_add('T','R','PKD_EZK_ORKT','PKD_EZK_OPKT');
_add('T','R','PKD_GRP_BTGB','PKD_GRP_BTWY');

: Tymczasowi
_add('T','T','PPL_ZLC_RUMP','PPL_ZLC_PUMP');
_add('T','T','PKD_DOS_PRKD','PKD_DOS_PPKD');
_add('T','T','PKD_EZK_OPPU');
_add('T','T','PKD_EZK_ORWN');
_add('T','T','ZWS_DOS_PPDA','ZWS_DOS_PRDA');
_add('T','T','PKD_DOS_PPRB','PKD_DOS_PRRB');
_add('T','T','PKD_DOS_PPDU','PKD_DOS_PRDU');
_add('T','T','PKD_EZK_OPDP','PKD_EZK_ORDP');
_add('T','T','PKD_DOS_PPUS','PKD_DOS_PRUS');
_add('T','T','PKD_EZK_OPKU','PKD_EZK_ORKU');
_add('T','T','PKD_EZK_OPNN','PKD_EZK_ORNN');
_add('T','T','PKD_EZK_OPSW','PKD_EZK_ORSW');
_add('T','T','PKD_EZK_ORWS','PKD_EZK_OPWS');
_add('T','T','PKD_EZK_OPDS','PKD_EZK_ORDS');
_add('T','T','PKD_DOS_PPRD','PKD_DOS_PRRO');
_add('T','T','PKD_EZK_OPHK','PKD_EZK_ORHK');
_add('T','T','PKD_DOS_PPWY','PKD_DOS_PRWY');
_add('T','T','PKD_EZK_ORBL','PKD_EZK_OPBL');
_add('T','T','PKD_EZK_OPKA','PKD_EZK_ORKA');
_add('T','T','PKD_EZK_OPSZ','PKD_EZK_ORSZ');
_add('T','T','PKD_EZK_OPZA','PKD_EZK_ORZA');
_add('T','T','PKD_DOS_PRSZ','PKD_DOS_PPSZ');
_add('T','T','PKD_EZK_ORDI','PKD_EZK_OPDI');
_add('T','T','PPL_PLL_RPSF','PPL_PLL_PPSF');
_add('T','T','PPL_PLL_RRZP','PPL_PLL_PRZP');
_add('T','T','PPL_PLL_RNZP','PPL_PLL_PNZP');
_add('T','T','PKD_EZK_OROS','PKD_EZK_OPOS');
_add('T','T','PKD_EZK_ORWP','PKD_EZK_OPWP');
_add('T','T','PKD_EZK_OPHG','PKD_EZK_ORHG');
_add('T','T','PKD_GRP_AWSP');
_add('T','T','PPL_GRP_APAR');
: zastępstwa, podwładni, pełnione obowiązki
_add('T','T','PKD_EZK_OPZS','PKD_EZK_ORZS');
_add('T','T','PKD_EZK_OPLP','PKD_EZK_ORLP');
_add('T','T','PKD_EZK_OPOB','PKD_EZK_OROB');

:: tymczasowi - webTerm
_add('T','T','PKW_POR_IADR','PKW_POR_PADR');
_add('T','T','PKW_POR_IBAN','PKW_POR_PBAN');
_add('T','T','PKW_POR_IKUR','PKW_POR_PKUR');
_add('T','T','PKW_POR_INIE','PKW_POR_PNIE');
_add('T','T','PKW_POR_IRDA','PKW_POR_PRDA');
_add('T','T','PKW_POR_IRPU');
_add('T','T','PKW_POR_IRWU','PKW_POR_PRWU');
_add('T','T','PKW_POR_ITYN','PKW_POR_PTYN');
_add('T','T','PKW_POR_IWPU');
_add('T','T','PKW_POR_IWWU');
_add('T','T','PKW_POR_IZAL','PKW_POR_PZAL');
_add('T','T','PKW_POR_OPDO','PKW_POR_PPDO');
_add('T','T','PKW_POR_IRPM');

:: tymczasowi - rozliczenie czasu pracy
_add('T','T','PRC_CZP_DKWA');
_add('T','T','PRC_CZP_DMPR');
_add('T','T','PRC_CZP_DODB');
_add('T','T','PRC_CZP_DODO');
_add('T','T','PRC_CZP_DOOK');
_add('T','T','PRC_CZP_DOPO');
_add('T','T','PRC_CZP_DPOK');
_add('T','T','PRC_CZP_DPPO');
_add('T','T','PRC_CZP_DPRZ');
_add('T','T','PRC_CZP_DPSY');
_add('T','T','PRC_CZP_DROZ');
_add('T','T','PRC_CZP_DRUC');
_add('T','T','PRC_CZP_DZOK');
_add('T','T','PRC_CZP_DZPO');
_add('T','T','PRC_CZP_PKAP');
_add('T','T','PRC_CZP_PKOR');
_add('T','T','PRC_CZP_PMCR');
_add('T','T','PRC_CZP_WOKR');
_add('T','T','PRC_MCR_DOMP');
_add('T','T','PRC_MCR_DWGD');
_add('T','T','PRC_MCR_DZMK');
_add('T','T','PRC_MCR_PWMC');
_add('T','T','PRC_MCR_WMRO');
_add('T','T','PRC_CZP_DPPN','PRC_CZP_DRPN');
_add('T','T','PRC_CZP_DPHW','PRC_CZP_PPHW');

: praca zdalna i kontrola trzeźwości
_add('T','T','PKD_EZK_ORKT','PKD_EZK_OPKT');
_add('T','T','PKD_GRP_BTGB','PKD_GRP_BTWY');

~~


\redaguj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Udostępnia formy współpracy.
::----------------------------------------------------------------------------------------------------------------------
exec('dod_f_zatr','f_zatr');

F_ZATR.cntx_psh;
F_ZATR.win_sel('ADM');
F_ZATR.win_dict('WER');
F_ZATR.select;
F_ZATR.cntx_pop


\adm_wyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na wypełnienie okna zarządzania formami współpracy.
::----------------------------------------------------------------------------------------------------------------------
VAR.DOCELOWA:='T';

F_ZATR.cntx_psh;

__REF_11:=null;
__NDX_11:='KOD';
__NDX_12:='KOD_F';

__REF_21:=null;
__NDX_21:='KOD';
__NDX_22:='KOD_D';

~~


\adm_zam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na zamknięcie okna zarządzania formami współpracy.
::----------------------------------------------------------------------------------------------------------------------
F_ZATRN.fld_fml('F_ZATR','BLANK');
F_ZATRN.fld_fml('DOCELOWA','BLANK');

&__REF_11;
&__NDX_11;
&__NDX_12;

&__REF_21;
&__NDX_21;
&__NDX_22;

F_ZATR.cntx_pop


\adm_doc_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na przed obsługą okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
VAR.DOCELOWA:='T';
F_ZATR.index(__NDX_11);
F_ZATR.prefix(VAR.DOCELOWA);
F_ZATR.seek(__REF_11)


\adm_doc_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po odświeżeniu okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__REF_11:=F_ZATR.ref;
grp_disp(F_ZATRN,'WER_F',1,1);
F_ZATR.seek(__REF_11);
VAR.DOCELOWA:='T'


\adm_doc_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po obsłudze okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__NDX_11:=F_ZATR.index('?')


\adm_t_tmp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na przed obsługą okienka tymczasowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
F_ZATRN.index(__NDX_12);
F_ZATRN.prefix(F_ZATR.ref);
F_ZATRN.win_edit('RED_F');

F_ZATRN.fld_fml('F_ZATR','BLANK');
F_ZATRN.fld_fml('DOCELOWA','BLANK',"F_ZATR.ref")


\adm_t_tmp_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po obsłudze okienka tymczasowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__NDX_12:=F_ZATRN.index('?')


\adm_tmp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na przed obsługą okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
VAR.DOCELOWA:='N';
F_ZATR.index(__NDX_21);
F_ZATR.prefix(VAR.DOCELOWA);
F_ZATR.seek(__REF_21)


\adm_tmp_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po odświeżeniu okienka tymczasowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__REF_21:=F_ZATR.ref;
grp_disp(F_ZATRN,'WER_D',1,1);
F_ZATR.seek(__REF_21);
VAR.DOCELOWA:='N'


\adm_tmp_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po obsłudze okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__NDX_21:=F_ZATR.index('?')


\adm_t_doc_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na przed obsługą okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
F_ZATRN.index(__NDX_22);
F_ZATRN.prefix(F_ZATR.ref);
F_ZATRN.win_edit('RED_D');

F_ZATRN.fld_fml('F_ZATR','BLANK',"F_ZATR.ref");
F_ZATRN.fld_fml('DOCELOWA','BLANK')


\adm_t_doc_as
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na po obsłudze okienka docelowych form współpracy.
::----------------------------------------------------------------------------------------------------------------------
__NDX_22:=F_ZATRN.index('?')


\docelowa_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wzorzec pola F_ZATR tabeli F_ZATRN.
::----------------------------------------------------------------------------------------------------------------------
VAR.DOCELOWA:='N'; ''


\docelowa_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wzorzec pola DOCELOWA tabeli F_ZATRN.
::----------------------------------------------------------------------------------------------------------------------
VAR.DOCELOWA:='T'; ''


\f_zatr_docelowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola DOCELOWA w tabeli F_ZATR.
::----------------------------------------------------------------------------------------------------------------------
{? VAR.DOCELOWA=''
|| VAR.DOCELOWA:='T'
?};
VAR.DOCELOWA


\spr_f_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza poprawność danych w tabeli F_ZATR.
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(F_ZATR,-menu_txt='popraw')


\spr_f_zatrn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza poprawność danych w tabeli F_ZATRN.
::----------------------------------------------------------------------------------------------------------------------
__CHK.table(F_ZATRN,-menu_txt='popraw')


\dod_f_zatr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Procedura aktualizująca słownik F_ZATR. Myślnik po nazwie jest niezbędny do celów opisowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
F_ZATR.index('KOD');
F_ZATR.prefix();
F_ZATRN.clear();

_f_zatr:="
   F_ZATR.blank(1);
   F_ZATR.KOD:=_a;
   F_ZATR.TYP:=_b;
   {? ~F_ZATR.find_rec()
   || F_ZATR.OPIS:=_c;
      F_ZATR.DOCELOWA:='T';
      {? ~F_ZATR.add(1)
      || return()
      ?}
   ?};
   _ref_1:=F_ZATR.ref();

   {? ~F_ZATR.find_key('N',-_a,-_b)
   || F_ZATR.KOD:=-_a;
      F_ZATR.TYP:=-_b;
      F_ZATR.DOCELOWA:='N';
      {? ~F_ZATR.add(1)
      || return()
      ?}
   ?};
   _ref_2:=F_ZATR.ref();

   F_ZATRN.index('TECH_D');
   {? F_ZATRN.find_key(_ref_1)
   || return()
   ?};

   F_ZATRN.index('TECH_F');
   {? F_ZATRN.find_key(_ref_2)
   || return()
   ?};

   F_ZATRN.F_ZATR:=_ref_2;
   F_ZATRN.DOCELOWA:=_ref_1;
   F_ZATRN.add(1)
";

_f_zatr('P','P','Pracownicy - zatrudnieni na podstawie umowy o pracę');
_f_zatr('Z','Z','Zleceniobiorcy - współpraca na podstawie umów cywilno prawnych');
_f_zatr('K','K','Kontraktowcy - współpraca na podstawie kontraktu menadżerskiego');
_f_zatr('R','R','RCP niezatrudnieni - współpraca z osobami zewnętrznymi do celów RCP');
_f_zatr('T','T','Pracownicy tymczasowi - współpraca na podstawie umowy z agencją pracy tymczasowej')


\users_upr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnia uprawnienia dla użytkownika w firmie.
::   WE: _a - wskazanie firmy
::       _b - wskazanie użytkownika
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) | _a=null |
   var_pres('_b')<>type_of(null) | _b=null
|| return()
?};

USERS_FZ.cntx_psh();
USERS_FZ.index('UNIQUE');
USERS_FZ.prefix(_a,_b);

F_ZATR.cntx_psh();
F_ZATR.index('KOD');
F_ZATR.prefix();
_loop:=F_ZATR.first();
{!
|? _loop
|! {? ~USERS_FZ.find_key(F_ZATR.ref())
   || USERS_FZ.blank();
      USERS_FZ.FIRMA:=_a;
      USERS_FZ.USERS:=_b;
      USERS_FZ.F_ZATR:=F_ZATR.ref();
      USERS_FZ.DOSTEP:='?';
      USERS_FZ.add()
   ?};
   _loop:=F_ZATR.next()
!};

F_ZATR.cntx_pop();
USERS_FZ.cntx_pop();
~~


\f_zatr_decl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Definicja klasy F_ZATR.
::   WE:
::   WY:
::  OLD: \F_ZATR_decl/skid.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('F_ZATR',@.CLASS)>0
|| return()
?};

:Deklaracja klasy Stack.
exec('stack_decl','#stack');

obj_decl('F_ZATR',
:  pole do kontekstu danych tabeli P
   obj_fld('P','P'),
:  pole do kontekstu obliczeń z listy płac
   obj_fld('O','P'),
:  pole do kontekstu wydruków z filtrem
   obj_fld('W','P'),
:  ref sql rekordu tabeli F_ZATR zgodny z kodem pola O
   obj_fld('REF',''),
:  pole do kontekstu danych tabeli - opis kontekstu danych
   obj_fld('OPIS',''),
:  Pole do obsługi stosu kontekstów.
   obj_fld('CNTX',~~),


   obj_meth('__init',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda ustawia kontekst domyślnie Pracownicy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
   "  .CNTX:=obj_new(@.CLASS.Stack);
      .mod('P')
   "),


   obj_meth('find',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Ustawienie formy współpracy.
::   WE: _a - Kod formy współpracy.
::   WY: Ref słownika lub null()
::  OLD: \forma_zatr/kali.fml
::----------------------------------------------------------------------------------------------------------------------
   "  F_ZATR.index('UNIQUE');
      F_ZATR.prefix();
      {? F_ZATR.find_key(_a)
      || F_ZATR.ref()
      || null()
      ?}
   ",type_of('')),


   obj_meth('opis',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zwraca skróconą wersje opisu formy współpracy.
::   WE: _a - Pełna forma opisu.
::   WY: Skrócona wersja opisu.
::----------------------------------------------------------------------------------------------------------------------
   "  _pos:=(_a*'-');
      {? _pos<>0
      || form(_pos-_a)
      || _a
      ?}
   ",type_of('')),


   obj_meth('mod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda ustawia kontekst obliczeń.
::   WE: _a - Kod formy współpracy.
::   WY: Status operacji:
::       1 - Kontekst udało się ustawić.
::       0 - Kontekstu nie udało się ustawić.
::----------------------------------------------------------------------------------------------------------------------
   "  .P:=.O:=.W:=_a;
      {? .find(_a)
      || .REF:=$F_ZATR.ref();
         .OPIS:=.opis(F_ZATR.OPIS);
         1
      || .OPIS:=.REF:='';
         0
      ?}
   ",type_of('')),


   obj_meth('mod',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda ustawia kontekst obliczeń dla wskazanego elementu.
::   WE: _a - Kod formy współpracy.
::       _b - Typ kontekstu (P/O/W).
::   WY: Status operacji:
::       1 - Kontekst udało się ustawić.
::       0 - Kontekstu nie udało się ustawić.
::----------------------------------------------------------------------------------------------------------------------
   "  ($('_a.'+_b+':=_b'))(.,_a);
      {? .find(_a)
      || {? _b='P'
         || .OPIS:=.opis(F_ZATR.OPIS);
            1
         |? _b='O'
         || .REF:=$F_ZATR.ref();
            1
         || 1
         ?}
      || 0
      ?}
   ",type_of(''),type_of('')),


   obj_meth('push',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda zapamiętuje na stosie bieżące wartości pól P, O, W.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
   "  _akt:=obj_new('P','O','W');
      _akt.P:=.P;
      _akt.O:=.O;
      _akt.W:=.W;
      .CNTX.push(_akt);
      ~~
   "),


   obj_meth('pop',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Metoda przywraca ze stosu i ustwaia bieżące wartości pól P, O, W.
::   WE:
::   WY: Status operacji:
::          1 - Sukces;
::          0 - Porażka.
::----------------------------------------------------------------------------------------------------------------------
   "  _akt:=.CNTX.pop();
      {? type_of(_akt)
      || .mod(_akt.P,'P') & .mod(_akt.O,'O') & .mod(_akt.W,'W')
      || 0
      ?}
   "),


   obj_meth('control',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda do sprawdzania czy możliwa jest praca w danym kontekście.
::   WE: _a - Wyświetlanie komunikatu:
::             1 - Tak;
::             0 - Nie.
::       _b - Kod kontekstu pracy (formy współpracy).
::       .. - Kolejne kody dla zbioru kontekstów wymaganych (opcjonalnie).
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
   "  _ok:=0;
      {! _ind:=2.._
      |! {? .control(_[_ind])
         || _ok:=1
         ?}
      !};
      {? ~_ok & _a
      || FUN.emsg('Opcja niedostępna dla obszaru roboczego:\n'+.OPIS)
      ?};
      _ok
   ",type_of(0),type_of('')),


   obj_meth('control',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda do sprawdzania czy możliwa jest praca w danym kontekście.
::   WE: _a Kod kontekstu pracy (formy współpracy).
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
      ".P=_a",type_of('')),


   obj_meth('upr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda sprawdza, czy użytkownik ma uprawnienia do wskazanej formy współpracy.
::   WE: _a - Kod formy współpracy.
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
   "  USERS_FZ.index('W_ZATR');
      USERS_FZ.prefix(REF.FIRMA,OPERATOR.USER);
      {? USERS_FZ.find_key(_a)
      || USERS_FZ.DOSTEP='T'
      ?}
   ",type_of('')),


   obj_meth('upr',
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Metoda sprawdza, czy użytkownik ma uprawnienia do wskazanej formy współpracy.
::   WE: _a - Kod formy współpracy.
::       _b - Wyświetlanie komunikatu:
::             1 - Tak;
::             0 - Nie [domyślnie].
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
   "  {? .upr(_a)
      || return(1)
      ?};
      {? _b
      || FUN.emsg('Brak uprawnień do formy współpracy [%1].'@ [_a])
      ?};
      0
   ",type_of(''),type_of(0))
)


\napraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuwa źle przetransferowane formy współpracy
::----------------------------------------------------------------------------------------------------------------------
F_ZATR.cntx_psh();
F_ZATR.index('KOD');
F_ZATR.prefix();

_loop:=F_ZATR.first();
{!
|? _loop
|! {? F_ZATR.DOCELOWA='T'
   || _lnk:=F_ZATR.testlink();
      _ref:=null;
      F_ZATR.cntx_psh();
      {? F_ZATR.find_key('',F_ZATR.KOD)
      || _ref:=F_ZATR.ref()
      ?};
      F_ZATR.cntx_pop();
      {? _ref<>null
      || _loop:=_lnk.first();
         {!
         |? _loop
         |! _TAB:=($_lnk.TABELA)();
            _TAB.use(_lnk.MASKA);
            _TAB.clear();
            {? _TAB.seek(_lnk.REF,)
            || {? _TAB=P
               || P.F_ZATR:=_ref;
                  P.put()
               |? _TAB=PARSES
               || PARSES.F_ZATR:=_ref;
                  PARSES.put()
               ?}
            ?};
            &_TAB;
            _loop:=_lnk.next()
         !};
         F_ZATR.del()
      ?};
      obj_del(_lnk)
   ?};
   _loop:=F_ZATR.next()
!};

F_ZATR.cntx_pop();

exec('f_zatr_tran','f_zatr');
exec('dod_f_zatr','f_zatr');
~~


\wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła pozwala wskazać formy współpracy dostępne w danej czynności.
::       Formuła wykorzystywana jako argument atrybutu 'fml_val' parametru czynności.
::   WE: [_a] [STRING] - Aktualna lista form współpracy.
::       [_b] [NUMBER] - Możliwy wybór wielu form?
::             0 - Nie [domyślnie].
::             1 - Tak.
::       [_c] [STRING] - Dostępne typy formy współpracy:
::              T - Docelowe [domyślnie].
::             *T - Docelowe z obsługą kodów specjalnych.
::              N - Tymczasowe.
::             *N - Tymczasowe z obsługą kodów specjalnych.
::              * - Docelowe i tymczasowe.
::             ** - Docelowe i tymczasowe z obsługą kodów specjalnych.
::   WY: Wybrane kody oddzielone przecinkami.
::----------------------------------------------------------------------------------------------------------------------
_in:={? var_pres('_a')=type_of('') || form(_a) || '' ?};
_multi:=var_pres('_b')=type_of(0) & _b;
_typ:={? var_pres('_c')=type_of('') & (_c='T' |_c='*T' | _c='N' | _c='*N' | _c='*' | _c='**') || _c || 'T' ?};

_TAB:=tab_tmp(2,
   'RODZIC','TREE_REF','Rodzic',
   'OPIS','STRING[%1]' [$MS.fld_len(F_ZATR,'OPIS')],'Opis'@,
   'KOD','STRING[2]','Kod',
   'STAN','INTEGER','Stan'
);
_ndx:=obj_new('RODZIC','KOD');
_ndx.RODZIC:=_TAB.index('?');
_ndx.KOD:=_TAB.ndx_tmp(,,'KOD',,);

_TAB.fld_fml('STAN','BEFORE_DISPLAY',"cur_tab(1,1).KOD<>''");

:: Formuła dodająca rekord do tabeli.
_add:=
   "  _a.blank();
      _a.RODZIC:={? var_pres('_b')=type_of(0) || _b || 0 ?};
      _a.OPIS:=_c;
      _a.KOD:={? var_pres('_d')=type_of('') || _d || '' ?};
      {? _a.add()
      || #_a.ref()
      ?}
   ";

:: Formuła zmiany znacznika.
_set:=
   "  params_set(_par:=params_get());
      _TAB:=_par.TAB;
      _ndx:=_par.ndx;
      _set:=_par.set;

      {? var_pres('_a')=type_of('')
      || {? _a='+'
         || _s0:=1;
            _s1:=-1
         || _s0:=_s1:=0
         ?};
         _TAB.STAN:=_s0;
         _TAB.put()
      || _s1:=_a
      ?};
      _TAB.cntx_psh();
      _TAB.index(_ndx.RODZIC);
      _TAB.prefix(#_TAB.ref());
      {? _TAB.first()
      || {!
         |? _TAB.STAN:=_s1;
            _TAB.put();
            $_set(_s1);
            _TAB.next()
         !}
      ?};
      _TAB.cntx_pop()
   ";

_tree:=0;

:: Ewentualne tworzenie korzenia.
{? _typ='*' | _typ='**'
|| _all:=_add(_TAB,,'Wszystkie'@,{? _typ='**' || '*' || '' ?})
|| _all:=0
?};

_tree+=_all;

:: Tworzenie odpowiednich zapisów związanych z formami współpracy i ewentualnie ich grupami.
F_ZATR.cntx_psh();
F_ZATR.index('KOD');
{! _lp:=1 .. 2
|! {? _lp=1
   || _prfx:='T';
      _opis:='Docelowe'@;
      _war:='N'
   || _prfx:='N';
      _opis:='Tymczasowe'@;
      _war:='T'
   ?};

   {? _typ<>_war & _typ<>'*'+_war
   || {? _all | +_typ=2
      || _rodzic:=_add(_TAB,_all,_opis,{? +_typ=2 || '*'+_prfx || '' ?})
      || _rodzic:=0
      ?};
      _tree+=_rodzic;
      F_ZATR.prefix(_prfx);
      {? F_ZATR.first()
      || {!
         |? _add(_TAB,_rodzic,F_ZATR.OPIS,F_ZATR.KOD);
            F_ZATR.next()
         !}
      ?}
   ?}

!};
F_ZATR.cntx_pop();

:: Budowa okna.
_dh:=_TAB.size()+2;
{? _dh<5
|| _dh:=5
|? _dh>30
|| _dh:=30
?};

_ws:=_TAB.mk_sel('Formy współpracy'@,'N',,,,,_dh,_tree);
_TAB.win_fld(_ws,,'OPIS',,,,,,'Opis'@,,'Opis typu i/lub formy współpracy');
{? _multi
|| _TAB.win_fld(_ws,,'STAN',,,-3,,,,,'',2,,"1","0","-1");
   _TAB.win_act(_ws,,'Formuła','Akceptuj'@@,,'Akceptuje wybór'@,"sel_exit()",,,,,,'A');
   _TAB.win_act(_ws,,'Formuła','Uwzględnij'@@,,'',"params_set(_par:=params_get()); _par.set('+')",,,,,,'U');
   _TAB.win_act(_ws,,'Formuła','P&omiń'@@,,'',"params_set(_par:=params_get()); _par.set('-')",,,,,,'O');
   _TAB.win_btn(_ws,'text='+'Uwzględnij'@,'menu:U');
   _TAB.win_btn(_ws,'text='+'P&omiń'@,'menu:O');
   _TAB.win_btn(_ws,'text='+'Akceptuj'@+',icon=xwin16.png:13,panel=bottom','menu:A')
|| _TAB.win_act(_ws,,'Formuła','Wybierz'@@,,'Wybierz'@,
      "params_set(_par:=params_get()); _par.set('+')","sel_exit()",1,,,,'W')
?};
_TAB.win_act(_ws,,'Szukaj');
_TAB.win_act(_ws,,'Rekord',,,,
   "  params_set(_par:=params_get());
      _TAB:=_par.TAB;
      _ws:=_par.ws;
      {? _par.multi
      || {? _TAB.KOD='' | _TAB.STAN=-1
         || _ag:='UO';
            _def:=''
         |? _TAB.STAN
         || _ag:='U';
            _def:='O'
         || _ag:='O';
            _def:='U'
         ?}
      || {? -_TAB.KOD=''
         || _ag:='W';
            _def:=''
         || _ag:='';
            _def:='W'
         ?}
      ?};
      _TAB.actions_grayed(_ws,_ag);
      _TAB.actions(_ws,,_def,1)
   ");

_TAB.win_edit(_TAB.mk_edit(,1));
_TAB.win_sel(_ws);
{? _tree
|| _TAB.tr_fml(_ws,,"{? _a=-1 || 1 || _a ?}")
?};

params_set(
   'TAB',_TAB,
   'ndx',_ndx,
   'ws',_ws,
   'multi',_multi,
   'set',_set
);

:: Obsługa aktualnej listy.
_ref:=null();
{? _in<>''
|| _TAB.cntx_psh();
   _TAB.index(_ndx.KOD);
   _TAB.prefix();
   _ain:=spli_str(_in,',');
   {! _lp:=1 .. obj_len(_ain)
   |! _kod:=form(_ain[_lp]);
      {? _kod<>'' & _TAB.find_key(_kod,)
      || {? _multi
         || _set('+')
         |? _ref=null()
         || _ref:=_TAB.ref()
         ?}
      ?}
   !};
   _TAB.cntx_pop()
?};
{? _multi | _ref=null()
|| _TAB.first()
|| _TAB.seek(_ref)
?};

:: Wertowanie
{? _TAB.select(,1,-1)
|| _ret:='';
   {? _TAB.first()
   || {!
      |? {?_TAB.STAN=1
         || _ret+=_TAB.KOD+','
         ?};
         _TAB.next()
      !}
   ?};
   _ret-1
|| _in
?}


\f_zatr_tran
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Uzupełnienie informacji w tabeli F_ZATR.
::----------------------------------------------------------------------------------------------------------------------
F_ZATR.cntx_psh();
F_ZATR.prefix();
F_ZATR.for_each("
   {? F_ZATR.DOCELOWA=''
   || F_ZATR.DOCELOWA:='T';
      F_ZATR.put()
   ?}
",1);
F_ZATR.cntx_pop();
~~

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:29 b8e73bd350a81b9e5c83a9c5a224c7718b044b2c0364abd2d18d66dc7061df95bed4c08d402b605a2b782ee53ff404fbe8490e3915f89810ce6ae15fc2bcad5196f13decc2e3816c331c03633152023364da79af3b496bb4e51f29c604152d1118fdf9c7e90ea0872590012e929e27945d38a575b355fe179db7d62c04b07667
