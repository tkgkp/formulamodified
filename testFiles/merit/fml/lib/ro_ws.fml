:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: ro_ws.fml
:: Utworzony: 12.01.2018
:: Autor: MB
:: Systemy: RODO
::======================================================================================================================
:: Zawartość: Formuły do obsługi komunikacji z RODO Utility
::======================================================================================================================


\send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wysyla zapytanie do RODO Utility
::   WE: _a - pytanie
::       _b - strumień przygotowany na odpowiedź
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'AIP_SYS','AIP_URL','AIP_USR','AIP_PASS');
_http:=inet_get(XINFO.AIP_URL);
_http.append_h('Content-Type: application/soap+xml;charset=UTF-8');
_http.set_auth({? XINFO.AIP_USR*'\\'=0 || 'ASP\\' || '' ?}+XINFO.AIP_USR,XINFO.AIP_PASS,'ntlm');
exec('set_ssl','ro_ws',_http);
_res:=_http.http_post(_b,_a);
_res


\koperta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Opakowanie zapytania do RODO Utility
::   WE: _a - pytanie
::----------------------------------------------------------------------------------------------------------------------
exec('koperta2','ro_ws',0)+_a+exec('koperta2','ro_ws',1)


\koperta2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Opakowanie zapytania do RODO Utility
::   WE: _a - 0-poczatek, 1-koniec
::----------------------------------------------------------------------------------------------------------------------
{? _a=0
|| '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ass="http://www.assecobs.pl">'+
   '<soap:Header/>'+
   '<soap:Body>'
|| '</soap:Body>'+
   '</soap:Envelope>'
?}


\log
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Tworzy obiekt do zapisywania loga
::----------------------------------------------------------------------------------------------------------------------
_log:=obj_new('F','log','close','err');
_log.F:=0;
_log.err:='';
_log.log:="
   .err:=_a;
   {? ~.F
   || .F:=fopen('ws_rodo.log','a',1)
   ?};
   {? .F
   || fwrite(.F,'\r\n'+$date+' '+time()$3+': '+STR.maz2w95(_a))
   ?}
";
_log.close:="
   {? .F
   || fclose(.F);
      .F:=0
   ?}
";
_log


\base64
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Zakodowanie pliku do postaci BASE64
:::   WE: _a  - Nazwa pliku lub pole z plikiem.
::        _b  - scieżka do pliku wynikowego
::       [_c] - tryb pracy [0]-zakodowanie, 1-odkodowanie
::----------------------------------------------------------------------------------------------------------------------
_pth:=var_pres('_a')=type_of('');
_tryb:={? var_pres('_c')>0 & _c || 'decode' || 'encode' ?};

_ret:=-1;
_fin:=fopen(_a,'br',_pth,,1);
{? _fin.is_open()
|| _fout:=fopen(_b,'bw',1,,1);
   {? _fout.is_open()
   || _ret:=base64(_tryb,_fin,_fout);
      fclose(_fout)
   ?};
   fclose(_fin)
?};
_ret


\toDateTime
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Zwraca datę i czas w formacie XML
::   WE: _a - data
:        _b - czas
::----------------------------------------------------------------------------------------------------------------------
_str:=STR.gsub($_a,'/','-')+'T';
{? var_press('_b')>0
|| _b$3+'.0'
|| _str+='00:00:00.0'
?};
_str


\write_att
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Zapisuje zalaczniki do pliku zapytania do RODO Utility
::   WE: _a - uchwyt do pliku otwarty do pisania
::       _b - tag list zalaczników (ass:ArrayAttachments)
::       _c - tag zalacznika
::       _d - wskazanie na odpowiedz (RO_REQR)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RO_REQZ.index('RO_REQR'); RO_REQZ.prefix(_d);
{? RO_REQZ.first()
|| fwrite(_a,'<'+_b+'>');
   {!
   |? _filename:=RO_REQZ.bl_info('FILE','NAME');
      _fnb:=_filename+'.b64';
      {? RO_REQZ.FILE
      || exec('base64','ro_ws',RO_REQZ.FILE,_fnb)
      ?};
      _f:=fopen(_fnb,'r',1);
      {? _f
      || fwrite(_a,
            '<'+_c+'>'+
            '<ass:Name>'+_filename+'</ass:Name>'+
            '<ass:Description>'+exec('toXml','ro_ws',RO_REQZ.DESC)+'</ass:Description>'+
            '<ass:Data>'
         );
         {!
         |? _line:=fread(_f);
            {? _line<>'\n'
            || fwrite(_a,_line); 1
            ?}
         !};
         fclose(_f);
         ferase(_fnb);
         fwrite(_a,
            '</ass:Data>'+
            {? RO_REQZ.TECH='N' & _b*'Array'>0 || '<ass:DocumentType>DLA_PODMIOTU</ass:DocumentType>' || '' ?}+
            '</'+_c+'>'
         )
      ?};
      RO_REQZ.next()
   !};
   fwrite(_a,'</'+_b+'>')
?}


\write_param
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Zapisuje parametry do pliku zapytania do RODO Utility
::   WE: _a - uchwyt do pliku otwarty do pisania
::       _b - wskazanie na nagłówek zapytania (RO_REQN)
::       _c - wskazanie na cel (RO_REQC)
::       _d - tag listy parametrów
::       _e - tag parametru
::----------------------------------------------------------------------------------------------------------------------
RO_REQP.index('KEY'); RO_REQP.prefix(_b,_c);
{? RO_REQP.first()
|| fwrite(_a,'<'+_d+'>');
   {!
   |? fwrite(_a,
         '<'+_e+'>'+
         '<ass:Name>'+RO_REQP.RO_REQI().NAME+'</ass:Name>'+
         '<ass:Value>'+exec('toXml','ro_ws',RO_REQP.VAL)+'</ass:Value>'+
         '</'+_e+'>'
      );
      RO_REQP.next()
   !};
   fwrite(_a,'</'+_d+'>')
?}


\ru_par_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Po redagowaniu parametru określającego współpracę z RODO Utility.
::   WE: [_a] [STRING] - Aktualna (zmieniona) wartość parametru (T/N) [domyślnie:N].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:={? var_pres('_a')=type_of('') & (_a='T' | _a='N') || _a || 'N' ?};

{? _par='T' & ~exec('is_fun_rodo','ro_ws')
:: Próba włączenia współpracy z RODO Utility bez wymaganych runtime-ów.
|| return(0)
?};

exec('init_slo','ro_req',1);

1


\is_fun_rodo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Czy dostępna funkcja do obsługi WS RODO Utility
::   WE: [_a] - z komunikatem? [1]-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
{? var_press('_a')<=0 || _a:=1 ?};
on_error(3);
no_msg(1);
_http:=inet_get(XINFO.AIP_URL);
_err:=in_error();
no_msg(0);
on_error();
&_http;
{? _err & _a
|| echo('Brak funkcji inet_get().');
   FUN.info('Brak funkcji do komunikacji z RODO Utility.\nWymagana zmiana wersji MacroBase.');
   echo()
?};
_err=0


\set_ssl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Ustawia scieżkę z certyfikatami do połaczenia z RODO Utility na linuxie
::   WE: _a - wskazanie na obiekt HTTP
::----------------------------------------------------------------------------------------------------------------------
{? sys_name(1)='U_LINUX'
|| _pem:='ssl_abs.pem';
   _a.set_cert(pth_dir(_pem)+'/'+_pem)
?}


\toXml
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Konwertuje napis do postaci dozwolonej w XML
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a || _a || return('') ?};
{? _a*'&' & _a*'&amp;'=0 & _a*'&gt;'=0 & _a*'&lt;'=0 & _a*'&apos;'=0 & _a*'&quot;'=0
   | _a*'\''
   | _a*'\"'
   | _a*'<'
   | _a*'>'
|| _a:=STR.gsub(_a,'&','&amp;');
   _a:=STR.gsub(_a,'>','&gt;');
   _a:=STR.gsub(_a,'<','&lt;');
   _a:=STR.gsub(_a,'\'','&apos;');
   _a:=STR.gsub(_a,'\"','&quot;')
?};
_a


\is_ws_config
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Czy wypełniono konfigurację na potrzeby komunikacji z RODO Utility
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'AIP_URL');
{? XINFO.AIP_URL=''
|| FUN.info('Nie wypełniono adresu usługi sieciowej RODO Utility.'@);
   return(0)
?};
1


\ws_proc1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Wykonuje obsługę zapytania typu ręcznego
::   WE: _a - Typ żądania
::----------------------------------------------------------------------------------------------------------------------
_ref:=RO_REQN.ref();
_typ:=RO_REQN.RO_REQT;
VAR_DEL.delete('RoTypNaz');
RO_REQT.cntx_psh();
RoTypNaz:=RO_REQN.RO_REQT().NAME;
RO_REQT.cntx_pop();
RO_REQN.cntx_psh();
RO_REQN.prefix();
RO_REQN.RO_REQT:=_a;
RO_REQN.put();
exec('process','ro_req',RO_REQN.ref());
RO_REQN.prefix();
{? RO_REQN.seek(_ref)
|| RO_REQN.RO_REQT:=_typ;
   RO_REQN.prefix();
   RO_REQN.put()
?};
VAR_DEL.delete('RoTypNaz');
RO_REQN.cntx_pop();
RO_REQR.cntx_psh();
RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
{? RO_REQR.first()
|| {!
   |? {? RO_REQR.RES_DESC=''
      || RO_REQR.RES_CODE:=2;
         RO_REQR.RES_DESC:=exec('desc_ro_req','ro_req',RO_REQR.RES_CODE);
         RO_REQR.put()
      ?};
      RO_REQR.next()
   !}
?};
RO_REQR.cntx_pop()

:Sign Version 2.0 jowisz:1028 2019/06/07 16:00:01 a05e4354a663d82ffef56c4289ce55258876f5d4f5d6bd1488181d81b7a5c32e4e355f24aa6ba79ef8d3f5345adef2f4757716497058d23dce9f5c78f9696d8d4c06345e39683693c5fd4664daa3bbcf0c84ade36cff599c145dbbb1e4975d95f6c1dc4c8824ff8cd76ef699ce4bcbf4a52b92622b31b590fea685d96e3062d8
