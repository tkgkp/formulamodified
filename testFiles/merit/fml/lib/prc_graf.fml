:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzezone
::======================================================================================================================
:: Nazwa pliku: prc_graf.fml
:: Utworzony: 11.10.2017
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Formuły do obsługi planowania - dziedzina PRC
::======================================================================================================================

\date4id
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funckja wykorzystywana do budowania id eventu z przekazanej daty
::   WE: _a [DATE]
::   WY:    [STRING]
::  OLD: \date4id/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
gsub(_a$2,'.','_')


\czy_nieob_lt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Zwraca informacje czy pracownik ma nieobecnosci na podany dzien i czy nieobecnosc jest rozliczona na lista plac
::   WE:  _a - [REFERENCE] - P.ref, wskazanie na pracownika
::        _b - [DATE]      - data, data badania
::   WY: 0 - brak nieobecnosci
::       1 - jest nieobecnosc lecz nie jest rozlicznona
::       2 - jest nieobecnosc i jest rozlicznoa na liscie plac
::  OLD: \czy_nieob_lt/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')<>type_of(null) || return(0) || _a ?};
 _data:={? var_pres('_b')<>type_of(date) || return(0) || _b ?};
_ret_val:=0;

N.index('NIEOBECN');
N.prefix('N',_p_ref);
{? N.find_le(_data) & N.DO>=_data
|| _ret_val:=1;
   {? N.LT<>'' || _ret_val:=2 ?}
?};
_ret_val


\wyk_D_rozl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Sprawdza czy wykonanie na podaną datę ma zapisy z D i jest rozliczone w poprzednim dniu
::   WE: _a [REFERENCE] - wskazanie na pracownika
::       _b [DATE]      - data badania
::   WY: 0/1
::  OLD: \wyk_D_rozl/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_p_ref:={? var_pres('_a')=type_of(null()) || _a || return(_result) ?};
 _data:={? var_pres('_b')=type_of(date()) || _b || return(_result) ?};

KAL_BUFF.cntx_psh();
KAL_BUFF.index('PROKRDT');
KAL_BUFF.prefix('Z',_p_ref,null());
{? KAL_BUFF.find_key(_data) & KAL_BUFF.BL='T'
|| _result:=exec('getPlanStat4Pr','grafik',_p_ref,(_data-1))='X'
?};
KAL_BUFF.cntx_pop();
_result


\put_RS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Uzupełnia tabelę RS - ważna jest kolejność uzupełniania tabeli!!!
::   WE: _a [obj] - obiekt z parametrami
::            _a.data_od   [DATE]      - Data badania do
::            _a.data_do   [DATE]      - Data badania do
::            _a.pob       [STRING]    - pobierana warstwa
::            _a.okr_ref   [REFERENCE] - wskazanie na okres rozliczeniowy
::            _a.source    [STRING]    - zrodlo wywolania
::            _a.szef_ref  [REFERENCE] - wskazanie na szefa
::            _a.RS        [TABLE]     - tabela RS
::            _a.P         [TABLE]     - tabela z pracownikami podwładnymi
::            _a.korekty   [STRING]    - T(domyślnie)/N - czy pobierać dane bez uwzględnienia korekt planowania
::                                       (dotyczy tylko warstwy planowania)
::  OLD: \put_RS/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_kNieob:=exec('nieo_typ_tab','prc_graf');

:: --- informacje niezależne od pobieranej warstwy ---
{? _param.warstwa='W'
|| exec('wykonanie','prc_graf',_param)
?};
:: nieobecności
exec('nieo_put','prc_graf',_param,_kNieob);
:: nieobecności ad-hoc
exec('nieo_ah','prc_graf',_param,_kNieob);
:: wnioski o odbiór
exec('wodb_czas','prc_graf',_param);
:: odbiory - data nadgodzin
exec('wodb_data','prc_graf',_param);
:: urlopy rodzicielskie i macierzyńskie - praca
exec('urlMacRodz','prc_graf',_param);
:: opieka na dziecko do lat 14 (art. 188)
exec('url188','prc_graf',_param,_kNieob);
:: plany i wnioski urlopowe
exec('urlWnPl','prc_graf',_param,_kNieob);
:: niepłatne przerwy
exec('przerwy','prc_graf',_param);
:: niepłatne przerwy - przypisanie do grup
exec('przerwy_grupy','prc_graf',_param);


:: --- informacje zależne od pobieranej warstwy ---
{? _param.warstwa='P'
||
:: wnioski o czas wolny
   exec('r_odn_tab','prc_graf',_param);
:: dodanie informacji o ruchomym czasie pracy
   exec('ruchomy','prc_graf',_param);
:: dodanie informacji o pracy zdalnej
   exec('zdalna','prc_graf',_param);
:: sprawdzenie zamknietych miesiecy
   exec('statusM_Plan','prc_graf',_param);
:: wycofaj korekty planowania
   exec('bez_korekt','prc_graf',_param)
|? _param.warstwa='G'
||
:: wnioski o czas wolny
   exec('r_odn_tab','prc_graf',_param);
:: dodanie informacji o ruchomym czasie pracy
   exec('ruchomy','prc_graf',_param);
:: dodanie informacji o pracy zdalnej
   exec('zdalna','prc_graf',_param);
:: dodanie statusów rozliczenia miesięcy
   exec('statusM','prc_graf',_param);
:: delegacje
   exec('delegacje','prc_graf',_param);
:: szkolenia
   exec('szkolenia','prc_graf',_param);
:: wnioski o pracę w nadgodzinach
   exec('r_nadg','prc_graf',_param)
|? _param.warstwa='W'
||
:: wnioski o czas wolny
   exec('r_odn_tab','prc_graf',_param)
?};

:: oddelegowania
exec('oddelegowania','prc_graf',_param);
:: usuwamy dni po dacie zwolnienia
exec('del_zwol','prc_graf',_param);
:: pracownicy z grupy PR_NIEDZ (praca w niedzielę - wyłączenia z ustawy o zakazie handlu)
exec('pr_niedz','prc_graf',_param);
:: planowanie czasu pracu na obiekty
{? exec('get_par','#parametr',353,2)='T'
|| exec('makeRS4PlanOb','prc_graf',_param);
   exec('p_pob','prc_graf',_param)
?};
:: udostępniamy całą dziedzinę RS-a
_param.RS.prefix()


\statusM
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Funkcja uzupełniająca RSa o status miesiaca do rozliczenia
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \statusM/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;

:: wyszukanie statusy miesięcy w zakresie pobieranych dat
_sql:=''+"select
            R, M, S, DZ
          from
            A_OKRM
          where
            (to_date(to_string(A_OKRM.R) || '-' || to_string(A_OKRM.M) || '-1')>=to_date(:_a)) and
            (to_date(to_string(A_OKRM.R) || '-' || to_string(A_OKRM.M) || '-1')<=to_date(:_b))
          order by 1,2";

_tab:=sql(_sql,date(_od~1,_od~2,1),date(_do~1,_do~2,1));

:: wyszukanie pracowników przeniesionych do rozliczenia - status X
_tabX:=exec('tabX','prc_graf',_param);

:: wyszukanie wykonań w zakresie pobieranych dat
_sql:=''+"select
            KAL_BUFF.P, KAL_BUFF.DATA
          from
            KAL_BUFF
          where
            (KAL_BUFF.GPW='Z' or KAL_BUFF.GPW='W') and
            KAL_BUFF.DATA>=to_date(:_a) and
            KAL_BUFF.DATA<=to_date(:_b)
          order by 1,2";

_tabWyk:=sql(_sql,_od,_do);

:: wypełnienie RS-a statusami
_rok:=0;
_msc:=0;
_m_stat:='';
_m_dz:=date(0,0,0);
_RS.cntx_psh();
_ndx:=_RS.ndx_tmp(,1,'DATA',,);
_RS.index(_ndx);
_RS.prefix();
{? _RS.first()
|| {!
   |? {? _RS.DATA~1<>_rok | _RS.DATA~2<>_msc
      || _rok:=_RS.DATA~1;
         _msc:=_RS.DATA~2;
         _tab.prefix(_rok,_msc);
         {? _tab.first()
         ||  _m_stat:=_tab.S;
             _m_dz:=_tab.DZ
         ?};
         {? _m_stat='Z'
         || _tab.cntx_psh();
            _rok_n:=_rok;
            _msc_n:=_msc+1;
            {? _msc_n>12 || _rok_n+=1; _msc_n:=1 ?};
            _tab.prefix(_rok_n,_msc_n);
            {? _tab.first() & _tab.S='Z'
            || _m_dz:=date(_rok,_msc,0)
            ?};
            _tab.cntx_pop()
         ?}
      ?};
      _RS.MSC_STAT:={? _m_stat='Z'
                    || {? _m_dz=date(0,0,0)
                       || _m_stat
                       || {? _RS.DATA<=_m_dz || _m_stat || 'O' ?}
                       ?}
                    || _m_stat
                    ?};
::    dodanie informacji o przeniesieniu pracownika do rozliczenia w miesiącu
      {? _RS.MSC_STAT<>'Z'
      || _tabX.prefix(_RS.P_REF,_rok,_msc);
         {? _tabX.first()
         ||  _RS.MSC_STAT:='Z'
         ?}
      ?};
::    dodanie informacji o zatwierdzonych wykonaniach
      _tabWyk.prefix(_RS.P_REF,_RS.DATA);
      {? _tabWyk.first() | _RS.MSC_STAT='Z'
      || _RS.STATUS:='Z'
      ?};
      _RS.put();
      _RS.next()
   !}
?};
_RS.cntx_pop();
_RS.ndx_drop(_ndx)


\statusM_Plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Funkcja zwracajaca status dla planowanego miesiaca dla pracownika w okresie (dla A_OKRP_M)
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \statusM_Plan/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('A_OKRP_M')<100 || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;

_sql:=''+"select
            A_OKRP.P, ROK, MSC, STATUS
          from
            A_OKRP_M join
            A_OKRP using(A_OKRP_M.A_OKRP,A_OKRP.REFERENCE) join
            A_OKR using(A_OKRP.OKR,A_OKR.REFERENCE) join
            :_a using(A_OKRP.P,:_a.P)
          where
            A_OKR.REFERENCE=:_b
          order by 1,2,3";

_sql_w:=''+"select
            KAL_BUFF.P, KAL_BUFF.DATA
          from
            KAL_BUFF
          where
            KAL_BUFF.GPW=':_c' and
            KAL_BUFF.DATA>=to_date(:_a) and
            KAL_BUFF.DATA<=to_date(:_b)
          order by 1,2";

:: wyszukanie statusow miesiecy dla pracownikow w okresie rozliczceniowym
_tab:=sql(_sql,_param.P,_param.okr_ref);

:: wyszukanie niezatwierdzonych wykonań w zakresie pobieranych dat
_tabW:=sql(_sql_w,_od,_do,'W');

:: wyszukanie zatwierdzonych wykonań w zakresie pobieranych dat
_tabZ:=sql(_sql_w,_od,_do,'Z');

_rok:=0;
_msc:=0;
_m_stat:='';
_p_ref:=null();
_last_p:='';
P.cntx_psh();
P.prefix();
_RS.cntx_psh();
_ndx:=_RS.ndx_tmp('',1,'P_REF',,0, 'DATA',,0);
_RS.index(_ndx);
_RS.prefix();
{? _RS.first()
|| {!
   |? {? _RS.DATA~1<>_rok | _RS.DATA~2<>_msc | _RS.P_REF<>_last_p
      || _rok:=_RS.DATA~1;
         _msc:=_RS.DATA~2;
         _last_p:=_RS.P_REF;
         _m_stat:='';
         _tab.prefix(_RS.P_REF,_rok,_msc);
         {? _tab.first()
         ||  _m_stat:={? _tab.STATUS='Z' | _tab.STATUS='X' || 'Z' || _tab.STATUS ?}
         ?}
      ?};
::    określenie dla dnia z korektą czy istnieje wykonanie w tym dniu (tylko dla planowania)
      {? -_param.source='p' & _m_stat='K'
      || _tabZ.prefix(_RS.P_REF,_RS.DATA);
         {? _tabZ.first()
         || _tabW.prefix(_RS.P_REF,_RS.DATA);
            {? ~_tabW.first()
            || _RS.WEWY:='T'
            ?};
            {? $_p_ref<>_RS.P_REF
            || P.seek(BIT.sqlint(_RS.P_REF),);
               _p_ref:=P.ref()
            ?};
::          określenie statusu blokady kwalifikacji
            {? exec('isBlokada','prc_rozlicz',_p_ref,_RS.DATA)>0
            || _RS.WEWY:='B';
               _RS.put()
            ?}
         ?}
      ?};
      _RS.PLANNED:=_m_stat;
      _RS.put();
      _RS.next()
   !}
?};
_RS.cntx_pop();
_RS.ndx_drop(_ndx);
P.cntx_pop()


\bez_korekt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Wycofuje korekty planowania z pobranych danych (formuła wykorzystywana w eksporcie planów do excela na portalu)
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \bez_korekt/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_P:=_param.P;

{? (_param.korekty='N') & _P.first()
|| {!
   |? {? P.seek(_P.P,)
      || _p_ref:=P.ref();
         {? var_pres('_tab')>100 || obj_del(_tab) ?};
         _wersja:=1;
         _all:='T';
         {? exec('korZeroExist','kal_korn',_p_ref,_param.okr_ref)
         || _wersja:=0;
            _all:='N'
         ?};
         _tab:=exec('getKor4Prac','kal_korn',_p_ref,_param.okr_ref,_all,_wersja);
         _lastData:=date(0,0,0);
         {? _tab.first()
         || {!
            |? {? _lastData<>_tab.DATA
               || _lastData:=_tab.DATA;
                  _param.RS.prefix($_p_ref,_tab.DATA);
                  {? _param.RS.first()
                  || _param.RS.DATAW:=_tab.DATAW;
                     _param.RS.CZAS_OD:=_tab.POCZATEK;
                     _param.RS.CZAS_DO:=_tab.KONIEC;
                     _param.RS.CZAS:=_tab.CZAS;
                     _param.RS.TYP_DNIA:=_tab.TYP;
                     _param.RS.TYPWS:=_tab.TYPWS;
                     _param.RS.ROZL:=_tab.RODZAJ;
                     _param.RS.OPIS:=_tab.OPIS;
                     _param.RS.put()
                  ?}
               ?};
               _tab.next()
            !}
         ?}
      ?};
      _P.next()
   !}
?}


\ruchomy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Wyszukuje informacje o ruchomym czasie pracy dla pracownika w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \ruchomy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('A_RWN')<100 || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;

_sqlWN:=''+"select distinct A_RWN.P,A_RWN.OD,A_RWN.DO,A_RWN.WP,A_RWN.A_RWN,A_RWN.REFERENCE as REF "+
           "from A_RWN join :_a using (A_RWN.P,:_a.P) "+
           "where A_RWN.OD<=to_date(:_c) and A_RWN.DO>=to_date(:_b) and A_RWN.WP=':_d'";

_sqlWP:=''+"select * from A_RWP where A_RWP.A_RWN=':_a'";

_nadpisz:="
   _RS:=_a;
   _tabWPI:=_b;
   {? (_RS.TYP_DNIA='R') & (_RS.CZAS_OD<>_tabWPI.GOD)
   || P.cntx_psh();
      P.prefix();
      {? P.seek(BIT.sqlint(_RS.P_REF),)
      || A_OKRP.cntx_psh();
         A_OKRP.use('x_okrpi');
         A_OKRP.index('A_OKPP');
         A_OKRP.prefix(BIT.sqlint(_RS.OR_REF),P.ref());
         {? A_OKRP.first()
         || _open:=A_OKRP.S_PLAN<>'Z';
            _msc_st:=exec('getStatusM_Plan','okres',A_OKRP.ref(),_RS.DATA~1,_RS.DATA~2);
            _open:={? _msc_st='' || _open || _msc_st<>'Z' ?};
            {?  _open
            || _RS.CZAS_OD:=_tabWPI.GOD;
               _czas_do:=_tabWPI.GOD+_RS.CZAS;
               {? _czas_do>=time(24,0,0)
               || _czas_do-=time(24,0,0);
                  _RS.DATAW:=_RS.DATA+1
               ?};
               _RS.CZAS_DO:=_czas_do;
::             nadpisujemy KAL_BUFFa
               KAL_BUFF.cntx_psh();
               KAL_BUFF.index('PRACDATA');
               KAL_BUFF.prefix(P.ref(),_RS.DATA);
               {? KAL_BUFF.first()
               || {!
                  |? {? KAL_BUFF.GPW='P' & KAL_BUFF.TYP='R'
                     || KAL_BUFF.POCZATEK:=_RS.CZAS_OD;
                        KAL_BUFF.KONIEC:=_RS.CZAS_DO;
                        KAL_BUFF.CZAS:=_RS.CZAS;
                        KAL_BUFF.put(1)
                     ?};
                     KAL_BUFF.next()
                  !}
               ?};
               KAL_BUFF.cntx_pop()
            ?}
         ?};
         A_OKRP.cntx_pop()
      ?};
      P.cntx_pop()
   ?}
";

: wyszukanie wniosków indywidualnych
_tabWNI:=sql(_sqlWN,_param.P,_od,_do,'T');
{? _tabWNI.first()
|| {!
   |? {? var_pres('_tabWPI')>100 || obj_del(_tabWPI) ?};
      _tabWPI:=sql(_sqlWP,_tabWNI.REF);
      _ndx:=_tabWPI.ndx_tmp(,1,'ND',,);
      _tabWPI.index(_ndx);
      _chk_od:={? _tabWNI.OD>_od || _tabWNI.OD || _od ?};
      _chk_do:={? _tabWNI.DO<_do || _tabWNI.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _RS.prefix(_tabWNI.P,_data);
         {? _RS.first()
         || _RS.RCZP:='T';
            _RS.RCZP_P:='T';
            _RS.RCZP_DET:='N';
            _tabWPI.prefix(_data~4);
            {? _tabWPI.first()
            || _RS.RCZP_GOD:=$_tabWPI.GOD;
               _RS.RCZP_GDO:=$_tabWPI.GDO;
               _RS.RCZP_DET:='T';
               _RS.RCZP_W:=_tabWPI.W;
::             nadpisujemy rozpoczecie dnia i zakonczenie zgodnie z ruchomym czasem pracy jeżeli miesiąc jest otwarty
               {? _param.warstwa='P' || _nadpisz(_RS,_tabWPI) ?}
            ?};
            _RS.put()
         ?}
      !};
      _tabWPI.ndx_drop(_ndx);
      _tabWNI.next()
   !}
?};
: wyszukanie wniosków grupowych
_tabWNG:=sql(_sqlWN,_param.P,_od,_do,'N');
{? _tabWNG.first()
|| {!
   |? {? var_pres('_tabWPG')>100 || obj_del(_tabWPG) ?};
      _ref:=null();
      A_RWN.cntx_psh();
      A_RWN.index('A_RWN');
      A_RWN.prefix();
      {? A_RWN.seek(_tabWNG.A_RWN,)
      || _ref:=A_RWN.ref()
      ?};
      A_RWN.cntx_pop();
      _tabWPG:=sql(_sqlWP,$_ref);
      _ndx:=_tabWPG.ndx_tmp(,1,'ND',,);
      _tabWPG.index(_ndx);
      _chk_od:={? _tabWNG.OD>_od || _tabWNG.OD || _od ?};
      _chk_do:={? _tabWNG.DO<_do || _tabWNG.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _RS.prefix(_tabWNG.P,_data);
         {? _RS.first() & (_RS.RCZP<>'T')
         || _RS.RCZP:='T';
            _RS.RCZP_P:='N';
            _RS.RCZP_DET:='N';
            _tabWPG.prefix(_data~4);
            {? _tabWPG.first()
            || _RS.RCZP_GOD:=$_tabWPG.GOD;
               _RS.RCZP_GDO:=$_tabWPG.GDO;
               _RS.RCZP_DET:='T';
               _RS.RCZP_W:=_tabWPG.W;
::             nadpisujemy rozpoczecie dnia i zakonczenie zgodnie z ruchomym czasem pracy jeżeli miesiąc jest otwarty
               {? _param.warstwa='P' || _nadpisz(_RS,_tabWPG) ?}
            ?};
            _RS.put()
         ?}
      !};
      _tabWPG.ndx_drop(_ndx);
      _tabWNG.next()
   !}
?}


\delegacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Uzupełnia RS-a informacjami o delegacjach i planach delegacji dla pracowników w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \delegacje/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;
_P:=_param.P;

P.cntx_psh();
P.prefix();
{? _P.first()
|| {!
   |? {? P.seek(_P.P,)
      || _p_ref:=P.ref();
::       wyszukanie pozycji delegacji lub planu delegacji
         {? var_pres('_tabDele')>100 || obj_del(_tabDele) ?};
         _tabDele:=exec('deleg_find','prc_graf',_p_ref,_od,_do);

         {? _tabDele.first()
         || {!
            |? _RS.prefix(_P.P,_tabDele.DATA);
               {? _RS.first()
               || _RS.DELEG:=_tabDele.TYP;
                  _RS.put()
               ?};
               _tabDele.next()
            !}
         ?};
         _P.next()
      ?}
   !}
?};
P.cntx_pop()


\deleg_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja pobierająca informacje o delegacjach pracownika w podanym zakresie dat
::   WE: _a - [REFERENCE] - wskazanie na pracownika
::       _b - [DATE]      - data od
::       _c - [DATE]      - data do
::   WY:      [TABLE]     - Tabela z informacjami na poszczegolne dni
::  OLD: \deleg_find/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
   _od:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
   _do:={? var_pres('_c')=type_of(date) || _c || return(0) ?};
_tab:=tab_tmp(1,'DATA','DATE','Data delegacji'
               ,'TYP','STRING[1]','D-delegacja zaakceptowana; P-delegacja niezaakceptowana');

P.cntx_psh();
P.clear();
{? P.seek(_p_ref)
|| _osoba:=P.OSOBA;
   ROK_F.cntx_psh();
   ROK_F.index('ROKPOCZ');
   ROK_F.prefix();
   _sql:=''+"select
               ROK_F.KOD, ROK_F.POCZ_ROK, ROK_F.KON_ROK
             from
               ROK_F
             where
               ROK_F.FIRMA=:_a and ROK_F.POCZ_ROK<=to_date(:_c) and ROK_F.KON_ROK>=to_date(:_b)";
    _TAB:=sql(_sql,REF.FIRMA,_od,_do);

   {? _TAB.size()
   || TYPOBIEG.cntx_psh();
      TYPOBIEG.index('UNIK');
      TYPOBIEG.prefix('Obieg delegacji',);
      _typ_ob:=null();
      {? TYPOBIEG.first()
      || {? _TAB.first()
         || {!
            |? _rok_edok:=($(_TAB.POCZ_ROK~1)+2);
               EDOKOS.cntx_psh();
               EDOKOS.use('skid_y'+_rok_edok);
               EDOKOS.index('SZUK12');
               EDOKUM.cntx_psh();
               EDOKUM.use('skid_v'+_rok_edok);
               EDOKUM.index('DELEGOWA');
               EDOKUM.prefix(TYPOBIEG.ref(),_osoba);
               {? EDOKUM.first()
               || {!
                  |? {? EDOKUM.DATA_OD<=_do & EDOKUM.DATA_DO>=_od
                     || _start:={? EDOKUM.DATA_OD<_od || _od || EDOKUM.DATA_OD ?};
                          _end:={? EDOKUM.DATA_DO>_do || _do || EDOKUM.DATA_DO ?};
                        {! _ind:=#_start..#_end
                        |! _add:={? _tab.find_key(#_ind) || 0 || 1 ?};
                           _tab.blank(1);
                           _tab.DATA:=#_ind;
                           EDOKOS.prefix(EDOKUM.ref(),'A','T');
                           _tab.TYP:={? EDOKOS.first() || 'D' || 'P' ?};
                           {? _add || _tab.add() || _tab.put() ?}
                        !}
                     ?};
                     EDOKUM.next()
                  !}
               ?};
               EDOKUM.cntx_pop();
               EDOKOS.cntx_pop();
               _TAB.next()
            !}
         ?}
      ?};
      TYPOBIEG.cntx_pop()
   ?};
   ROK_F.cntx_pop()
?};
P.cntx_pop();
_tab


\szkolenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Uzupełnia RS-a informacjami o szkoleniach i planach szkoleń dla pracowników w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \szkolenia/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;
_P:=_param.P;

P.cntx_psh();
P.prefix();
{? _P.first()
|| {!
   |? {? P.seek(_P.P,)
      || _p_ref:=P.ref();
::       wyszukanie pozycji szkoleń
         {? var_pres('_tabSzko')>100 || obj_del(_tabSzko) ?};
         _tabSzko:=exec('szkol_find','prc_graf',_p_ref,_od,_do);

         {? _tabSzko.first()
         || {!
            |? _RS.prefix(_P.P,_tabSzko.DATA);
               {? _RS.first()
               || _RS.SZKOL:=_tabSzko.TYP;
                  _RS.put()
               ?};
               _tabSzko.next()
            !}
         ?};
         _P.next()
      ?}
   !}
?};
P.cntx_pop()


\szkol_find
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja pobierająca informacje o szkoleniach pracownika w podanym zakresie dat
::   WE: _a - [REFERENCE] - wskazanie na pracownika
::       _b - [DATE]      - data od
::       _c - [DATE]      - data do
::   WY:      [TABLE]     - Tabela z informacjami na poszczegolne dni
::  OLD: \szkol_find/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
   _od:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
   _do:={? var_pres('_c')=type_of(date) || _c || return(0) ?};
_tab:=tab_tmp(1,'DATA','DATE','Data szkolenia'
               ,'TYP','STRING[1]','S-szkolenie ; P-plan szkolenia');

_rok:=_od~1;

_sql:=' select
            SZK_PRAC.P,SZK_PRAC.OBECNY, SZK_OPIS.OD, SZK_OPIS.DO
        from
            SZK_PRAC join SZK_OPIS
        where
            SZK_PRAC.P=:_a and SZK_OPIS.OD<=to_date(:_c) and SZK_OPIS.DO>=to_date(:_b)';

P.cntx_psh();
P.clear();
{? P.seek(_p_ref)
|| _tabSzkol:=sql(_sql,_p_ref,_od,_do);
   {? _tabSzkol.first()
   || {!
      |? {? _tabSzkol.OD<=_do & _tabSzkol.DO>=_od
         || _start:={? _tabSzkol.OD<_od || _od || _tabSzkol.OD ?};
              _end:={? _tabSzkol.DO>_do || _do || _tabSzkol.DO ?};
            {! _ind:=#_start..#_end
            |! _add:={? _tab.find_key(#_ind) || 0 || 1 ?};
               _tab.blank(1);
               _tab.DATA:=#_ind;
               {? _tabSzkol.OBECNY='T'
               || _tab.TYP:='S'
               || _tab.TYP:='P'
               ?};
               {? _add || _tab.add() || _tab.put() ?}
            !}
         ?};
         _tabSzkol.next()
      !}
   ?}
?};
P.cntx_pop();
_tab


\wykonanie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
::  MOD: MicKoc [22.26]
:: OPIS: Wypełnia RSa informacjami o zatwierdzonym wykonaniu
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \wykonanie/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_RS:=_param.RS;

_sql:=''+"select *
          from
            KAL_BUFF join
            :_a using(KAL_BUFF.P,:_a.P)
          where
            KAL_BUFF.GPW='Z' and
            KAL_BUFF.DATA>=to_date(:_b) and
            KAL_BUFF.DATA<=to_date(:_c)
          order by KAL_BUFF.P, KAL_BUFF.DATA
            ";

_tab:=sql(_sql,_param.P,_param.data_od,_param.data_do);

:: wyszukanie pracowników przeniesionych do rozliczenia - status X
_tabX:=exec('tabX','prc_graf',_param);

_przerwy:=exec('isEnabled','prc_przerwy');

_p_ref:=null();
_p_ref_s:='';
P.cntx_psh();
P.prefix();
A_SCPP.cntx_psh();
A_SCPP.use('x_scpi');
A_SCPP.index('POD');
KAL_BUFF.cntx_psh();
KAL_BUFF.index('PRZNODT');
R_OPCZYT.cntx_psh();
R_OPCZYT.index('R_OPCZYT');
R_OPCZYT.prefix();

{? _tab.first()
|| {!
   |? {? _p_ref_s<>_tab.P
      || {? P.seek(BIT.sqlint(_tab.P),)
         || _p_ref:=P.ref(); _p_ref_s:=$_p_ref;
            A_SCPP.prefix(_p_ref)
         ?}
      ?};
      _dzien:=_tab.DATA;
::    dodaj informację o zatwierdzonym wykonaniu tylko gdy nie istnieje zapis w buforze wykonania
      _RS.prefix(_tab.P,_dzien);
      {? ~_RS.first()
      || _RS.blank(1);
         _RS.P:=_RS.P_REF:=_p_ref_s;
         _RS.PGW:='wykonanie';
         _RS.ID:='w_' + _tab.P + '_' + exec('date4id','prc_graf',_dzien);
::       sprawdz status dla wykonania - czy mozna modyfikować po stronie portalu
         _RS.STATUS:=exec('get_msc_status','grafik',_dzien);

::       dodanie informacji o odbiorach
         _odb:=exec('spr_odb','grafik',_p_ref,_dzien);
         {? _odb.jestOdb
         || _RS.ODB_ST:='O';
            _RS.ODB_DATA:=_odb.data
         ?};
         obj_del(_odb);

::       określenie okresu rozliczeniowego dla wykonania
         _czyOkr:='N';
         _kalNorm:=0;
         _wy:=0;
         KAL_BUFF.prefix(_p_ref,'P','T',_dzien);
         {? KAL_BUFF.first()
         || _RS.OR_REF:=$KAL_BUFF.A_OKR;
            _czyOkr:='T';
            _kalNorm:=KAL_BUFF.GR;
            _wy:=KAL_BUFF.WY
         ?};
         _RS.CZY_OKR:=_czyOkr;
         _RS.KAL_NORM:=form(_kalNorm,,,' .');
         _RS.WY:=form(_wy,,,' .');
::       obsluga spoznien na przelomie dnia
         _RS.ROZL:=_tab.RODZAJ;
         _RS.DATA:=_tab.DATA;
         _RS.CZAS_OD:=_tab.POCZATEK;
         _RS.CZAS_DO:=_tab.KONIEC;
         _RS.CZAS:=_tab.CZAS;

         _RS.DATAW:=_tab.DATAW;
         _RS.TYP_DNIA:='R';

         _RS.SCP_REF:={? A_SCPP.find_le(_dzien) || $A_SCPP.A_SCP || '' ?};
         _RS.CZYTNIK:={? (type_of(ref_tab(_tab.OPIS))=118)
                      || {? R_OPCZYT.seek(_tab.OPIS) || R_OPCZYT.O || exec('nieznany_czytnik','prc_wewy') ?}
                      || _tab.OPIS
                      ?};
::       przerwy niepłatne
         {? _przerwy & (_tab.P_CZAS>*0)
         || _RS.P_DATA:=$_tab.P_DATA;
            _RS.P_START:=_tab.P_START$3;
            _RS.P_CZAS:=_tab.P_CZAS$3
         ?};

         _RS.prefix();
         _RS.add()
      ?};
::    sprawdzenie czy nie ma przerw w pracy w trakcie kafelka wykonania (wyjścia normalne i służbowe)
      {? _tab.STATUS='P'
      || _wewy:=exec('get_wewy','prc_wewy',_tab.DATA,_p_ref);
         {? _wewy.first()
         || _PRZ:=exec('get_wewy_przerwy','prc_wewy',_p_ref,_wewy.DWE,_wewy.GWE,_wewy.DWY,_wewy.GWY);
            {? _PRZ.first()
            || {!
               |? _prz_str:='%1;%2;%3;%4;%5;%6@'[$_PRZ.D_OD,$_PRZ.G_OD,$_PRZ.D_DO,$_PRZ.G_DO,_PRZ.TYP,_PRZ.ZM];
                  _RS.WYK_PRZ+=_prz_str;
                  _PRZ.next()
               !}
            ?};
            &_PRZ
         ?};
         _RS.STATUS:='P';
         _RS.put();
         &_wewy
      ?};
::    określenie statusu blokady kwalifikacji
      {? _RS.STATUS<>'Z'
      || {? exec('isBlokada','prc_rozlicz',_p_ref,_dzien)>0
         || _RS.STATUS:='B';
            _RS.put()
         ||
::          dodanie informacji o przeniesieniu pracownika do rozliczenia w miesiącu poprzednim
            _tabX.prefix(_RS.P_REF,_dzien~1,_dzien~2);
            {? _tabX.first()
            ||  _RS.STATUS:='Z';
                _RS.put()
            |? _tab.BL='T'
::             dla zapisów z D w dniu poprzednim (informacja jest odpisana na polu BL)
::             sprawdzamy czy poprzedni dzień nie jest przypadkiem w _tabX lub czy miesiąc nie jest zamknięty
            || _prevDay:=_dzien-1;
               _tabX.prefix(_RS.P_REF,(_prevDay)~1,(_prevDay)~2);
               {? (_tabX.first() | (exec('get_msc_status','grafik',_prevDay)='Z')) &
                  (~exec('usun_wewy','prc_wewy',_p_ref,_prevDay~1,_prevDay~2,5,_prevDay))
               || _RS.STATUS:='Z';
                  _RS.put()
               ?}
            ?}
         ?}
      ?};
      _tab.next()
   !}
?};
R_OPCZYT.cntx_pop();
KAL_BUFF.cntx_pop();
A_SCPP.cntx_pop;
P.cntx_pop();
:: przywrócenie pełnej dziedziny
_RS.prefix();
~~


\tabX
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Wyszukanie pracowników przeniesionych do rozliczenia - status X
::   WE: _a - obiekt z parametrami
::   WY:
::  OLD: \tabX/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_tabX:=tab_tmp(3 ,'REF','STRING[16]',,'ROK','INTEGER',,'MSC','INTEGER',,'STATUS','STRING[1]',);

  _param:={? var_pres('_a')=117                         || _a             || return(_tabX) ?};
  _tab_P:={? var_pres('P',_param)=type_of(P)            || _param.P       || return(_tabX) ?};
_okr_ref:={? var_pres('okr_ref',_param)=type_of(null()) || _param.okr_ref || return(_tabX) ?};

_sql:=''+"select
            A_OKRP.P, ROK, MSC, STATUS
          from
            A_OKRP_M join
            A_OKRP using(A_OKRP_M.A_OKRP,A_OKRP.REFERENCE) join
            A_OKR using(A_OKRP.OKR,A_OKR.REFERENCE) join
            :_a using(A_OKRP.P,:_a.P)
          where
            A_OKR.REFERENCE=:_b and A_OKRP_M.STATUS='X'
          order by 1,2,3";

sql(_sql,_tab_P,_okr_ref)


\get_r_odn_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Zliczenie czasu wolnego dla wniosków o udzielenie czasu wolnego na podany dzień.
::   WE: _a - [REFERENCE] P.ref
::       _b - [DATE] Data
::       [_c] - [REFERENCE] R_ODN.ref - zliczanie tylko dla wskazanego wniosku w tym dniu
::       [_d] - [STRING] Co zliczamy
::       [_e] - [TABLE] Zliczanie tylko wniosków pokrywajacych sie z rej we/wy
::       [_f] - [STRING] Co zwracamy
::   WY: Zwracany jest czas odebranych godzin w milisekundach
::  OLD: \get_r_odn_czas/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')<>type_of(null()) || return(0) || _a ?};
_dzien:={? var_pres('_b')<>type_of(#0) || return(0) || _b ?};
_w_ref:={? var_pres('_c')<>type_of(null()) || null() || _c ?};
_co:={? var_pres('_d')<>type_of('') || 'G' || _d ?};
_wewy:=
{? var_pres('_e')<>type_of(SYSLOG)
|| tab_tmp(1,
      'P','INTEGER','Reference',
      'DWE','DATE','Data wejścia',
      'GWE','TIME','Godzina wejścia',
      'DWY','DATE','Data wyjścia',
      'GWY','TIME','Godzina wyjścia',
      'TYP','STRING[20]','Pochodzenie danych'
   )
|| _e
?};
_zwrot:={? var_pres('_f')<>type_of('') || 'G' || _f ?};

_czas:=0;
_wnioski:='';

R_ODN.cntx_psh();
R_ODN.index('PRAC');
R_ODN.clear();
R_ODN.prefix(_p_ref,_dzien);
{? R_ODN.first()
|| {!
   |?
:: Sprawdzenie status akceptacji - nie są pobierane odrzucone
      {? R_ODN.A='T' & (_w_ref=null() | _w_ref=R_ODN.ref())
      || _godz:=time(0,0,0);
         {? _co='G'
         || {? _wewy.first()
            || _od:={? R_ODN.GOD>_wewy.GWE || R_ODN.GOD || _wewy.GWE ?};
               _g_wy:=_wewy.GWY+{? _wewy.DWY>_wewy.DWE || time(24,0,0) || time(0,0,0)?};
               _do:={? R_ODN.GDO<_g_wy || R_ODN.GDO || _g_wy ?};
               _godz+=_do-_od;
               {? *_godz<0 || _godz:=time(0,0,0) ?}
            || _godz+=R_ODN.G;
               _wnioski+=$R_ODN.DW+','+$R_ODN.GOD+','+$R_ODN.GDO+'@'
            ?}
         |? _co='GO'
         || R_ODP.cntx_psh();
            R_ODP.index('NAG');
            R_ODP.prefix(R_ODN.ref());
            {? R_ODP.size()
            || {? R_ODP.first()
               || {!
                  |? _godz+=R_ODP.GO;
                     R_ODP.next()
                  !}
               ?}
            ?};
            R_ODP.cntx_pop()
         ?};
         _czas+=(*_godz)*60*1000
      ?};
      R_ODN.next()
   !}
?};
R_ODN.cntx_pop();
{? _zwrot='W'
|| _wnioski
|| _czas
?}


\oddelegowania
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Uzupełnia RS-a informacjami o oddelegowaniach dla pracowników w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \oddelegowania/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

:: dla grafików nie pobieraj informacji o oddelgowaniach w warstwie planowania
{? -_param.source='g' & _param.warstwa='P' || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;
_P:=_param.P;
_is_wydz:=(var_pres('WYDZ',P_ODDEL)>0);
_os_ref:=null();

P.cntx_psh();
P.prefix();
{? P.seek(_param.szef_ref)
|| _os_ref:=P.OSOBA
?};
P.cntx_pop();
_tabWydz:=exec('tabWydz','prc_oddel',_param.szef_ref);
:: dodanie wszystkich wydziałów kierownika jako osoby
exec('addWydz4Osoba','prc_oddel',_os_ref,_tabWydz,_od,_do);

_kodOdde:=exec('getKod4Plan','prc_oddel');
:: wyszukanie oddelegowań
P.cntx_psh();
P.prefix();
{? _P.first()
|| {!
   |? {? P.seek(_P.P,)
      || _p_ref:=P.ref();
         {? var_pres('_tabOdde')>100 || obj_del(_tabOdde) ?};
         {? _P.CZY_POD='O'
         || _tabOdde:=exec('find','prc_oddel',_kodOdde,_param.szef_ref,_p_ref,'TO',_od,_do,,1,_tabWydz)
         || _tabOdde:=exec('find','prc_oddel',_kodOdde,_param.szef_ref,_p_ref,'FROM',_od,_do,,1,_tabWydz)
         ?};

         {? var_pres('_tabOdde')>100 & _tabOdde.first()
         || {!
            |? _RS.prefix(_tabOdde.P,_tabOdde.DATA);
               {? _RS.first()
               || _RS.ODDEL:='T';
                  _RS.ODDELOWN:={? _P.CZY_POD='O' || 'N' || 'T' ?};
                  _RS.ODDELTO:=_tabOdde.P_TO;
                  {? _is_wydz
                  || _RS.ODDELWYD:=_tabOdde.WYDZ;
::                   jeżeli mamy delegowanie na wydział, to należy określić czy znajduje on się na liście wydziałów
::                   w których możemy redagować oddelegowania
                     {? +_tabOdde.WYDZ
                     || _tabWydz.blank(1);
                        _tabWydz.WYDZIAL:=_tabOdde.WYDZ;
                        _RS.ODDELOWN:={? (_tabOdde.P_FROM<>$_param.szef_ref) & _tabWydz.find_rec() || 'N' || 'T' ?}
                     ?}
                  ?};
                  _RS.put()
               ?};
               _tabOdde.next()
            !}
         ?};
         _P.next()
      ?}
   !}
?};
P.cntx_pop()


\del_zwol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Usuwa z RSa dni po zwolnieniu pracownika
::   WE: _a [DATE]      - data od
::       _b [DATE]      - data do
::       _c [TABLE]     - tabela RS
::       _d [TABLE]     - tabela z pracownikami podwładnymi
::  OLD: \del_zwol/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;
_P:=_param.P;

:: określenie czy usuwamy dane spoza okresu zatrudnienia
:: usuwamy dla warstwy grafiku i wykonania a dla warstwy planowania
:: usuwamy tylko jeżeli pobieramy dane do excela dla planu z korektami
_czy_del:=_param.warstwa<>'P' | (_param.korekty='T' & _param.excel='T');

_sql:=''+"select distinct P.REFERENCE as P_REF, P.DZ
          from
            P join
            :_a using(P.REFERENCE,:_a.P)
          where
            P.DZ is not null and
            P.DZ<=to_date(:_b)
          order by 1
            ";

_tab:=sql(_sql,_P,_do);

{? _czy_del & _tab.first()
|| _RS.cntx_psh();
   _ndx:=_RS.ndx_tmp(,1,'P_REF',,,'DATA',,);
   _RS.index(_ndx);
   {!
   |? _RS.prefix(_tab.P_REF);
      {? _RS.first()
      || {!
         |? {? _RS.DATA>_tab.DZ
            || _RS.del()
            || _RS.next()
            ?}
         !}
      ?};
      _tab.next()
   !};
   _RS.cntx_pop();
   _RS.ndx_drop(_ndx)
?}


\nieo_typ_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Zwraca typ rubryki
::   WE:  _a - [INTEGER] - nr rubryki
::   WY: tabela z przekodowanymi symbolami nieobecności
::  OLD: \nieo_typ_tab/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------

_tab:=tab_tmp(1,'RN','INTEGER','','SYMBOL','STRING[2]',);
R.cntx_psh();
R.index('RUBKLKOD');
R.prefix('N');
{? R.first()
|| {!
   |? _tab.blank(1);
      _tab.RN:=R.RN;
      _tab.SYMBOL:=exec('nieo_typ','grafik',R.RN);
      _tab.add();
      R.next()
   !};
:: dodajemy jeszcze rubryki 3 i 15
   _tab.blank(1);
   _tab.RN:=3;
   _tab.SYMBOL:=exec('nieo_typ','grafik',3);
   _tab.add();
   _tab.blank(1);
   _tab.RN:=15;
   _tab.SYMBOL:=exec('nieo_typ','grafik',15);
   _tab.add()
?};
R.cntx_pop();
_tab


\nieo_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30 emisja]
:: OPIS: Uzupełnia RS-a zapisami z nieobecności
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::       _b[TABLE] - tabela z kodami nieobecności
::   WY:
::  OLD: \nieo_put/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_kNieob:=_b;

:: pobieram z RS-a tylko rekordy z wpisaną nieobecnością
_sql:=''+"select P_REF, DATA from :_a where :_a.NH!=''";
_tabN:=sql(_sql,_param.RS);

N.cntx_psh();
H.cntx_psh();
H_ZM.cntx_psh();
R.cntx_psh();
{? _tabN.first()
|| {!
   |? _param.RS.prefix(_tabN.P_REF,_tabN.DATA);
      {? _param.RS.first()
      || _kod:=0;
         {? _param.RS.NH*'_hist'
         || H.prefix();
            {? H.seek(BIT.sqlint(_param.RS.NH),)
            || _param.RS.N_NAZWA:=H.KZ().R
            ?}
         || N.prefix();
            {? N.seek(BIT.sqlint(_param.RS.NH),)
            || _param.RS.N_NAZWA:=N.NB().RT;
               _param.RS.N_LT:=N.LT;
               _param.RS.N_CZ:={? var_pres('PARTDAY',N)>0 || N.PARTDAY || 'N' ?};
               {? _param.RS.N_CZ='T'
               || _param.RS.N_G+=N.NG*60*60*1000
               ?}
            ?}
         ?};
         _kNieob.prefix(#_param.RS.N_KOD);
         {?  _kNieob.first()
         || _param.RS.N_TYP:=_kNieob.SYMBOL
         || _param.RS.N_TYP:='NU'
         ?};
         _param.RS.put()
      ?};
      _tabN.next()
   !}
?};
R.cntx_pop();
H_ZM.cntx_pop();
H.cntx_pop();
N.cntx_pop();
~~


\url188
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Wyszukuje urlopy Art 188 (kod 13) w zakresie podanych dat
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \url188/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_kNieob:=_b;
_z_date:=date(0,0,0);
_od:=_param.data_od;
_do:=_param.data_do;
_kody:=exec('getKodyArt188','prc_graf');
_ndx:=_kody.ndx_tmp(,1,'DATA',,1);
_kody.index(_ndx);

_sql:=''+ "select distinct N.P as P_REF, N.OD, N.DO, N.NG, R.RN as KOD"+
      {? var_pres('PARTDAY',N)>0 || ", N.PARTDAY" || "" ?}+
       " from N join R join :_c using (N.P,:_c.P)
         where N.KOR='N' and R.RN=:_d and N.OD<=to_date(:_b) and N.DO>=to_date(:_a)";

_sql_od:=_od;
_sql_do:=_do;

:: analizujemy od końca cofając się w datach dla kodów rubryk przypisanych do atrybutów
{? _kody.first()
|| _tabKOD:=tab_tmp(2,'KOD','INTEGER','Kod rubryki','OD','DATE','Data od');
   {!
   |? {? (_kody.DATA<>_z_date) & (_kody.DATA>=_od) & (_kody.DATA<=_do)
      || _sql_od:=_kody.DATA
      ?};
::    wyszukanie w tabeli pomocniczej, czy już nie było zapytania w zakresie dat _sql_od<->_sql_do
      _tabKOD.prefix(_kody.KOD);
      _dalej:=1;
      {? _tabKOD.first()
      || {? _sql_od<_tabKOD.OD
         || _tabKOD.OD:=_sql_od;
            _tabKOD.put(1)
         || _dalej:=0
         ?}
      || _tabKOD.KOD:=_kody.KOD;
         _tabKOD.OD:=_sql_od;
         _tabKOD.add(1)
      ?};

      {? _dalej
      || {? var_pres('_tabN')>0 || obj_del(_tabN) ?};
         _tabN:=sql(_sql,_sql_od,_sql_do,_param.P,_kody.KOD);

         {? _tabN.first()
         || {!
            |? _chk_od:={? _tabN.OD>_od || _tabN.OD || _od ?};
               _chk_do:={? _tabN.DO<_do || _tabN.DO || _do ?};
               {! _ind:=#_chk_od..#_chk_do
               |! _data:=#_ind;
                  {? _data>=_sql_od & _data<=_sql_do
                  || _param.RS.prefix(_tabN.P_REF,_data);
                     {? _param.RS.first()
                     || _param.RS.N_188_CZ:={? var_pres('PARTDAY',N)>0 || _tabN.PARTDAY || 'N' ?};
                        _param.RS.N_188:='T';
                        _param.RS.N_188_N:=exec('nieo_nazwa','grafik',_kody.KOD);
                        {? _param.RS.N_188_CZ='T'
                        || _param.RS.N_188_G+=_tabN.NG*60*60*1000
                        ?};
                        _kNieob.prefix(_kody.KOD);
                        {?  _kNieob.first()
                        || _param.RS.N_188TYP:=_kNieob.SYMBOL
                        ?};
                        _param.RS.put()
                     ?}
                  ?}
               !};
               _tabN.next()
            !}
         ?}
      ?};
      _sql_od:=_od;
      {? (_kody.DATA<>_z_date) & (_kody.DATA>=_od) & (_kody.DATA<=_do)
      || _sql_do:=_kody.DATA-1
      ?};
      _kody.next()
   !}
?};
_kody.ndx_drop(_ndx)


\getKodyArt188
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Funkcja przygotowujaca tebele kodow nieobecnosci na podany zakres dat. Wykorzystana jest w celu optymalizacji
::   WY: tabela z kodami na poszczegolne dni
::  OLD: \getKodyArt188/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('select RA_USE.DATA, R.RN as KOD from RA_USE join RA_DEF join R where RA_DEF.RODZAJ=\'S\' '+
             'and RA_DEF.SYMBOL=:_a and RA_USE.STAN=\'T\'',1162)


\urlWnPl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wyszukuje pozycje planu urlopowego dla pracownikow w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::       _b [TABLE] - tabela z kodami nieobacności
::  OLD: \urlWnPl/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_kNieob:=_b;

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;

_plan:=sql('
   select distinct URL_PLAN.P, URL_POZ.OD, URL_POZ.DO, 11 as KOD, \'P\' as N_WP
   from URL_PLAN join URL_POZ join :_c using (URL_PLAN.P,:_c.P)
   where URL_POZ.OD<=to_date(:_b) and URL_POZ.DO>=to_date(:_a) and URL_PLAN.ST=\'A\' and URL_PLAN.AZ=\'T\'',
   _od,_do,_param.P);

_part:={? var_pres('PARTDAY',NWU)>0 || ',NWU.PARTDAY, NWU.G ' || '' ?};
_sql:=''+"
   select distinct NWU.P, NWU.OD, NWU.DO"+_part+", R.RN as KOD, 'W' as N_WP
   from NWU join :_c using (NWU.P,:_c.P) join R
   where NWU.OD<=to_date(:_b) and NWU.DO>=to_date(:_a) and NWU.AZ='T'
";
_wniosek:=sql(_sql,_od,_do,_param.P);

{? _plan.first()
|| {!
   |? _chk_od:={? _plan.OD>_od || _plan.OD || _od ?};
      _chk_do:={? _plan.DO<_do || _plan.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _RS.prefix(_plan.P,_data);
         {? _RS.first()
         ||
::          jezeli jest zarejestrowana nieobecnosc ad-hoc, to dopisujemy tylko informacje o n_wp
            {? +form(_RS.NH)=0 & ((_RS.N_AH<>'T') | (_RS.N_AH='T') & (_RS.N_KOD<>'0')) & (_RS.N_188<>'T')
            || _RS.N_KOD:=$_plan.KOD;
               {? _kNieob.prefix(_plan.KOD); _kNieob.first()
               || _RS.N_TYP:=_kNieob.SYMBOL
               || _RS.N_TYP:='NU'
               ?};
               _RS.N_NAZWA:=__RUB.RT[_plan.KOD];
               _RS.N_WP:=_plan.N_WP;
               _RS.put()
            ?}
         ?}
      !};
      _plan.next()
   !}
?};

:: nadpisujemy plan informacjami z wniosków
{? _wniosek.first()
|| {!
   |? _chk_od:={? _wniosek.OD>_od || _wniosek.OD || _od ?};
      _chk_do:={? _wniosek.DO<_do || _wniosek.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _RS.prefix(_wniosek.P,_data);
         {? _RS.first()
         ||
::          jezeli jest zarejestrowana nieobecnosc ad-hoc, to dopisujemy tylko informacje o n_wp
            {? +form(_RS.NH)=0 &((_RS.N_AH<>'T') | (_RS.N_AH='T') & (_RS.N_KOD<>'0')) & (_RS.N_188<>'T')
            || _RS.N_KOD:=$_wniosek.KOD;
               {? _kNieob.prefix(_wniosek.KOD); _kNieob.first()
               || _RS.N_TYP:=_kNieob.SYMBOL
               || _RS.N_TYP:='NU'
               ?};
               {? var_pres('PARTDAY',_wniosek)>0
               || _RS.N_CZ:=_wniosek.PARTDAY;
                  {? _RS.N_CZ='T'
                  || _RS.N_G+=_wniosek.G*60*60*1000
                  ?}
               ?};
               _RS.N_NAZWA:=__RUB.RT[_wniosek.KOD];
               _RS.N_WP:=_wniosek.N_WP;
               _RS.put()
            ?}
         ?}
      !};
      _wniosek.next()
   !}
?}


\urlMacRodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Wyszukuje urlopy mocierzynskie i rodzicielskie praca (kody 27 i 33) w zakresie podanych dat
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \urlMacRodz/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_z_date:=date(0,0,0);
_od:=_param.data_od;
_do:=_param.data_do;
_kMacRod:=exec('getKodyMacRodz','prc_graf');
_ndx:=_kMacRod.ndx_tmp(,1,'CO',,,'DATA',,1);
_kMacRod.index(_ndx);

_sql:=''+ "select distinct N.P as P_REF, N.OD, N.DO, R.RN as KOD from N join R join :_c using (N.P,:_c.P)
   where N.KOR='N' and R.RN=:_d and N.OD<=to_date(:_b) and N.DO>=to_date(:_a)";
_sql_od:=_od;
_sql_do:=_do;


{! _co:=1..2
|! _kMacRod.prefix({? _co=1 || 'M' || 'R' ?});
   {? _kMacRod.first()
   || {!
      |? {? (_kMacRod.DATA<>_z_date) & (_kMacRod.DATA>=_od) & (_kMacRod.DATA<=_do)
         || _sql_od:=_kMacRod.DATA
         ?};
         {? var_pres('_tabN')>0 || obj_del(_tabN) ?};
         _tabN:=sql(_sql,_sql_od,_sql_do,_param.P,_kMacRod.KOD);
         {? _tabN.first()
         || {!
            |? _chk_od:={? _tabN.OD>_od || _tabN.OD || _od ?};
               _chk_do:={? _tabN.DO<_do || _tabN.DO || _do ?};
               {! _ind:=#_chk_od..#_chk_do
               |! _data:=#_ind;
                  {? _data>=_sql_od & _data<=_sql_do
                  || _param.RS.prefix(_tabN.P_REF,_data);
                     {? _param.RS.first()
                     || _param.RS.N_PRACA:='T';
                        _param.RS.N_MR:=exec('nieo_nazwa','grafik',_kMacRod.KOD);
                        _param.RS.put()
                     ?}
                  ?}
               !};
               _tabN.next()
            !}
         ?};
         _sql_od:=_od;
         {? (_kMacRod.DATA<>_z_date) & (_kMacRod.DATA>=_od) & (_kMacRod.DATA<=_do)
         || _sql_do:=_kMacRod.DATA-1
         ?};
         _kMacRod.next()
      !}
   ?}
!};
_kMacRod.ndx_drop(_ndx)


\getKodyMacRodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Funkcja przygotowujaca tebele kodow nieobecnosci na podany zakres dat. Wykorzystana jest w celu optymalizacji
::   WY: tabela z kodami na poszczegolne dni
::  OLD: \getKodyMacRodz/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_tabRubM:=sql('select RA_USE.DATA, \'M\' as CO, R.RN as KOD from RA_USE join RA_DEF join R where RA_DEF.RODZAJ=\'S\' '+
             'and RA_DEF.SYMBOL=:_a and RA_USE.STAN=\'T\'',11522);
_tabRubR:=sql('select RA_USE.DATA, \'R\' as CO, R.RN as KOD from RA_USE join RA_DEF join R where RA_DEF.RODZAJ=\'S\' '+
             'and RA_DEF.SYMBOL=:_a and RA_USE.STAN=\'T\'',11542);
sql('select * from :_a union select * from :_b',_tabRubM,_tabRubR)


\wodb_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Zliczenie czasu odbioru dla wnioskow o odbior na podany dzien
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \wodb_czas/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('R_WO')<100 || return(0) ?};

_sql:=''+"select R_WO.PO, R_WO.P, R_WO.DO as DATA, SUM(CAST(R_WYK.GO as INTEGER_TYPE)) as GO "+
   "from R_WYK join R_WO join :_a using (R_WO.P,:_a.P) "+
   "where (R_WO.A='W' or R_WO.A='Z') and R_WYK.DO between to_date(:_b) and to_date(:_c) "+
   "group by R_WO.PO, R_WO.P, R_WO.DO "+
   "order by 1,2";
_tabWO:=sql(_sql,_param.P,_param.data_od,_param.data_do);

:: dodanie informacji o odbiorach
{? _tabWO.first()
|| {!
   |? _param.RS.prefix(_tabWO.P,_tabWO.DATA);
      {? _param.RS.first()
      || _param.RS.ODB_CZAS:=$(_tabWO.GO*60*1000);
         _param.RS.ODB_PK:=_tabWO.PO;
         _param.RS.put()
      ?};
      _tabWO.next()
   !}
?}


\wodb_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Sprawdza czy na podany dzień istnieje wniosek o odbior z typem W/S i jeżeli tak to zwraca datę nadgodzin
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \wodb_data/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('R_WO')<100 || return(0) ?};

_z_date:=date(0,0,0);

_sql:=''+"select R_WO.P, R_WO.DO as DATA, R_WYK.DN from R_WYK join R_WO join :_a using (R_WO.P,:_a.P) "+
   "where R_WO.A_OKR=:_b and "+
   "(R_WO.A='W' or R_WO.A='Z') and (R_WO.W='W' or R_WO.W='S') and "+
   "R_WYK.DO between to_date(:_c) and to_date(:_d)";
_tabWOD:=sql(_sql,_param.P,_param.okr_ref,_param.data_od,_param.data_do);

:: dodanie informacji o odbiorach - data nadgodzin
{? _tabWOD.first()
|| {!
   |? {? _tabWOD.DN<>_z_date
      || _param.RS.prefix(_tabWOD.P,_tabWOD.DATA);
         {? _param.RS.first()
         || _d_nad:=_tabWOD.DN;
            _param.RS.cntx_psh();
            _param.RS.prefix(_tabWOD.P,_d_nad);
            _czas:=time(0,0,0);
            {? _param.RS.first()
            || _czas:=_param.RS.CZAS
            ?};
            _param.RS.cntx_pop();
            _param.RS.ODB_DATA:='' + exec('date4id','prc_graf',_d_nad);
            _param.RS.ODB_NADG:=$(_czas);
            _param.RS.put()
         ?}
      ?};
      _tabWOD.next()
   !}
?}


\nieo_ah
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30]
:: OPIS: Wyszukuje nieobecnosc ad-hoc dla pracownika na wskazana date
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::       _b [TABLE] - tabela z kodami nieobacności
::  OLD: \nieo_ah/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_kNieob:=_b;

_sql:=''+"select N_AH.P, N_AH.DATA, R.RN as KOD from N_AH join R join :_a using(N_AH.P,:_a.P) "+
   "where N_AH.DATA between to_date(:_b) and to_date(:_c)";
_tabAH:=sql(_sql,_param.P,_param.data_od,_param.data_do);


:: dodanie nieobecności ad-hoc
{? _tabAH.first()
|| {!
   |? _param.RS.prefix(_tabAH.P,_tabAH.DATA);
      {? _param.RS.first()
      || {? +form(_param.RS.NH)=0 & (_param.RS.N_188<>'T')
         || _kod:=_tabAH.KOD;
            _param.RS.N_AH:='T';
            _param.RS.N_KOD:=$_kod;
            {? _kNieob.prefix(_kod); _kNieob.first()
            || _param.RS.N_TYP:=_kNieob.SYMBOL
            || _param.RS.N_TYP:='NU'
            ?};
            _param.RS.N_NAZWA:=__RUB.RT[_kod];
            _param.RS.put()
         ?}
      ?};
      _tabAH.next()
   !}
?};
_tabAH


\r_odn_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.30a]
:: OPIS: Pobranie informacji o czasie wolnym dla wnioskow o udzielenie czasu wolnego w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \r_odn_tab/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('R_ODN')<100 || return(0) ?};

_RS:=_param.RS;

_sql:=''+"select R_ODN.P, R_ODN.DW, R_ODN.GOD, R_ODN.GDO "+
   "from R_ODN  join :_a using (R_ODN.P,:_a.P) "+
   "where R_ODN.A='T' and R_ODN.DW between to_date(:_b) and to_date(:_c) ";

_tabWol:=sql(_sql,_param.P,_param.data_od,_param.data_do);

:: dodanie informacji o wnioskach o czas wolny
{? _tabWol.first()
|| {!
   |? _RS.prefix(_tabWol.P,_tabWol.DW);
      {? _RS.first()
      || {? form(_RS.R_ODN_G)=''
         || _RS.R_ODN_G:=$_tabWol.DW+','+$_tabWol.GOD+','+$_tabWol.GDO+'@'
         || _RS.R_ODN_G+=$_tabWol.DW+','+$_tabWol.GOD+','+$_tabWol.GDO+'@'
         ?};
         _RS.put()
      ?};
      _tabWol.next()
   !}
?};
_tabWol


\ustaw_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Ustawia status w brudnopisie dla podanego dnia
::   WE:  _a [REFERENCE] - wskazanie na pracownika
::        _b [DATE]      - data
::        _c [STRING]    - status
::        _d [REFERENCE] - wskzanie na okres rozliczeniowy
::   WY: 0 lub 1
::  OLD: \ustaw_status/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
  _p_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
  _dzien:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
 _status:={? var_pres('_c')=type_of('')   || _c || return(0) ?};
_okr_ref:={? var_pres('_d')=type_of(null) || _d || return(0) ?};
_ret_val:=0;

_rok:=_dzien~1;
KAL_DEF.cntx_psh();
P.cntx_psh();
P.prefix();
{? P.seek(_p_ref)
||
:: zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};

   KAL_BUFF.cntx_psh();
   KAL_BUFF.index('PROKRDT');
   KAL_BUFF.prefix('G',_p_ref,_okr_ref,_dzien);
   {? KAL_BUFF.first()
   || KAL_BUFF.STATUS:=_status;
      _ret_val:=KAL_BUFF.put(1)
   ?};
   KAL_BUFF.cntx_pop();

   {? _mydo || end() ?}
?};
P.cntx_pop();
KAL_DEF.cntx_pop();
_ret_val


\get_wodb_czas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Zliczenie czasu odbioru dla wnioskow o odbior na podany dzien
::   WE: _a  [REFERENCE] - P.ref
::       _b  [REFERENCE] - A_OKR.ref
::       _c  [DATE]      - data
::      [_d] [DATE]      - jeżeli podana to zwraca wynik w postaci tabeli
::   WY: zwracana jest czas odebranych godzin w milisekundach lub tabela
::  OLD: \get_wodb_czas/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
   _p_ref:={? var_pres('_a')<>type_of(null) || return(0)   || _a ?};
 _okr_ref:={? var_pres('_b')<>type_of(null) || return(0)   || _b ?};
   _dzien:={? var_pres('_c')<>type_of(date) || return(0)   || _c ?};
_dzien_do:={? var_pres('_d')<>type_of(date) || date(0,0,0) || _d ?};

{? _dzien_do<>date(0,0,0)
|| _sql:='select R_WO.P, R_WO.DO as DATA, SUM(CAST(R_WYK.GO as INTEGER_TYPE)) as GO '+
         'from R_WYK join R_WO where R_WYK.P=:_a and '+
         '(R_WO.A=\'W\' or R_WO.A=\'Z\') and R_WYK.DO between to_date(:_b) and to_date(:_c) '+
         'group by R_WO.P, R_WO.DO';
   sql(_sql,_p_ref,_dzien,_dzien_do)
|| _czas:=0;
   _godz_wyk:=time(0,0,0);
   _ndx:=R_WO.ndx_tmp(,1,'P',,,'DO',,);
   R_WO.cntx_psh();
   R_WO.index(_ndx);
   R_WO.clear();
   R_WO.prefix(_p_ref,_dzien);
   {? R_WO.first()
   || {!
      |? {? R_WO.A = 'W' | R_WO.A = 'Z'
::       sprawdz status akceptacji - nie pobieraj odrzuconych
         || R_WYK.cntx_psh();
            R_WYK.index('R_WYKWO');
            R_WYK.prefix(R_WO.ref());
            {? R_WYK.size()
            || _godz_wyk:=time(0,0,0);
               {? R_WYK.first() || {! |? _godz_wyk+=R_WYK.GO; R_WYK.next()!} ?};
               _czas+=(*_godz_wyk)*60*1000
            ?};
            R_WYK.cntx_pop()
         ?};
         R_WO.next()
      !}
   ?};
   R_WO.ndx_drop(_ndx); &_ndx;
   R_WO.cntx_pop();
   _czas
?}


\get_wodb_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.10]
:: OPIS: Sprawdza czy na podany dzień istnieje wniosek o odbior z typem W/S i jeżeli tak to zwraca datę nadgodzin
::   WE: _a  [REFERENCE] - P.ref
::       _b  [REFERENCE] - A_OKR.ref
::       _c  [DATE]      - data badania
::      [_d] [DATE]      - jeżeli podana to zwraca wynik w postaci tabeli
::   WY: zwracana jest data nadgodzin powiązanych z odbiorem
::  OLD: \get_wodb_data/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
   _p_ref:={? var_pres('_a')<>type_of(null) || return(0)   || _a ?};
 _okr_ref:={? var_pres('_b')<>type_of(null) || return(0)   || _b ?};
   _dzien:={? var_pres('_c')<>type_of(date) || return(0)   || _c ?};
_dzien_do:={? var_pres('_d')<>type_of(date) || date(0,0,0) || _d ?};
{? _dzien_do<>date(0,0,0)
|| _sql:='select R_WO.P, R_WO.DO as DATA, R_WYK.DN from R_WYK join R_WO where R_WYK.P=:_a and R_WO.A_OKR=:_b and '+
         '(R_WO.A=\'W\' or R_WO.A=\'Z\') and (R_WO.W=\'W\' or R_WO.W=\'S\') and '+
         'R_WYK.DO between to_date(:_c) and to_date(:_d)';
   sql(_sql,_p_ref,_okr_ref,_dzien,_dzien_do)
||
   _data:=date(0,0,0);
   _dalej:=1;
   R_WO.cntx_psh();
   R_WO.index('PORDO');
   R_WO.clear();
   R_WO.prefix(_p_ref,_okr_ref,_dzien);
   {? R_WO.first()
   || {!
      |? {? R_WO.A = 'W' | R_WO.A = 'Z'
::    sprawdz status akceptacji - nie pobieraj odrzuconych
         || {? R_WO.W = 'W' | R_WO.W = 'S'
            || _dalej:=0;
               R_WYK.cntx_psh();
               R_WYK.index('R_WYKWO');
               R_WYK.prefix(R_WO.ref());
               {? R_WYK.first()
               || _data:=R_WYK.DN
               ?};
               R_WYK.cntx_pop()
            ?}
         ?};
         _dalej & R_WO.next()
      !}
   ?};
   R_WO.cntx_pop();
   _data
?}


\pr_niedz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Dodaje informacje o dozwolonej pracy w niedzielę. Uwzględniany jest parametr 320.
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_par320:=exec('get_par','#parametr',320,2)='T';
{? ~_par320 || return(0) ?};

_P:=_param.P;
_od:=_param.data_od;
_do:=_param.data_do;
_slo_kod:=exec('kod','ext_slo','GRUPPRAC','PR_NIEDZ');
_z_date:=date(0,0,0);

_sql:=''+"
   select
      GRUPPRAC.P, GRUPPRAC.OD, GRUPPRAC.DO
   from
      GRUPPRAC
      join :_a using (GRUPPRAC.P,:_a.P)
   where
      GRUPPRAC.GR=:_b and
      GRUPPRAC.OD<=to_date(:_d) and
      (GRUPPRAC.DO>=to_date(:_c) or GRUPPRAC.DO IS NULL)
";

_tab:=sql(_sql,_P,_slo_kod,_od,_do);

{? _tab.first()
|| {!
   |? _chk_od:={? _tab.OD>_od || _tab.OD || _od ?};
      _chk_do:={? _tab.DO<_do & _tab.DO<>_z_date || _tab.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _param.RS.prefix(_tab.P,_data);
         {? _param.RS.first()
         || _param.RS.DPWN_G:=1;
            _param.RS.put()
         ?}
      !};
      _tab.next()
   !}
?}


\makeRS4PlanOb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.41]
:: OPIS: Jezeli wskazany jest obiekt do planowania to usuwamy z RSa dni niezaplanowane na tym obiekcie
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_RS:=_param.RS;
_warstwa:=_param.warstwa;
_plob_h:=_param.plob_h;

:: jezeli mamy pokazac wszystko to nic nie robimy
{? _plob_h=null() || return(1) ?};

_ref:=exec('getSourceRef','plob',_plob_h);

_p_ref:=null();
_RS.prefix();
{? _RS.first()
|| {!
   |? {? $_p_ref<>_RS.P_REF
      || _p_ref:=exec('FindAndGet','#table',P,_RS.P_REF,,,null())
      ?};
      {? _p_ref & exec('isPracaNaOb','plob',_p_ref,_plob_h,_warstwa,_RS.DATA,_RS.DATA,_ref)
      || _RS.next()
      || _del:=_RS.del(,1);_del=2
      ?}
   !}
?}


\p_pob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [18.42]
:: OPIS: Pobranie informacji o podziale pracy na obiekty w poszczególnych dniach
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_RS:=_param.RS;


_sql:='select distinct PLOB_P.P, PLOB_P.DATA_DP, PLOB_P.PLOB_H, PLOB_P.PLOB_L, PLOB_P.DATA_OD, PLOB_P.DATA_DO, ';
_sql+='PLOB_P.GODZ_OD, PLOB_P.GODZ_DO '+
   "from PLOB_P  join :_a using (PLOB_P.P,:_a.P) "+
   "where PLOB_P.GPW=\':_d\' and
         ((PLOB_P.DATA_OD between to_date(:_b) and to_date(:_c)) or
          (PLOB_P.DATA_DO between to_date(:_b) and to_date(:_c))
         ) ";

_tabPob:=sql(_sql,_param.P,_param.data_od,_param.data_do,_param.warstwa);

:: wstawienie do kontrolki tabeli z podziałami dla odpowiedniej warstwy
_ctrl_id:=exec('ctrl_id','prc_dane');
web_ctrl_set_table(_ctrl_id,,'tabPOB_'+_param.warstwa,_tabPob);
return(~~)


\r_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [19.42]
:: OPIS: Zliczenie czasu dla wnioskow o pracę w godzinach nadliczbowych na podany dzien
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};
{? var_pres('R_NADG')<100 || return(0) ?};

_sql:=''+"select R_NADG.P, R_NADG.DATA, R_NADG.CZAS, R_NADG.CZY_POCZ, R_NADG.RODZAJ "+
   "from R_NADG join :_a using (R_NADG.P,:_a.P) "+
   "where R_NADG.DATA between to_date(:_b) and to_date(:_c) "+
   "order by 1,2";
_tabNAD:=sql(_sql,_param.P,_param.data_od,_param.data_do);

:: dodanie informacji o nadgodzinach
{? _tabNAD.first()
|| {!
   |? _param.RS.prefix(_tabNAD.P,_tabNAD.DATA);
      {? _param.RS.first()
      || _param.RS.NAD_CZAS:=$(*_tabNAD.CZAS*60*1000);
         _param.RS.NAD_POCZ:=_tabNAD.CZY_POCZ+exec('czy_pocz_opis','prc_nadg',_tabNAD.CZY_POCZ);
         _param.RS.NAD_RODZ:=_tabNAD.RODZAJ;
         _param.RS.put()
      ?};
      _tabNAD.next()
   !}
?}


\zdalna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [21.37]
:: OPIS: Wypełnia RSa informacjami o pracy zdalnej
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \wykonanie/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_RS:=_param.RS;

_sql:=''+"select PPSFN.P, PPSFN.OD, PPSFN.DO
          from
            PPSFN join
            :_a using(PPSFN.P,:_a.P)
          where
            (PPSFN.OD <= to_date(:_c)) and
            (PPSFN.DO >= to_date(:_b))
          order by PPSFN.P, PPSFN.OD
            ";

_tab:=sql(_sql,_param.P,_param.data_od,_param.data_do);

{? _tab.first()
|| {!
   |? {! _ind:=#_tab.OD .. #_tab.DO
      |! _data:=#_ind;
         _RS.prefix(_tab.P,_data);
         {? _RS.first()
         || _RS.ZDALNA:='T';
            _RS.put()
         ?}
      !};
      _tab.next()
   !}
?};

{? exec('is_pzd02','ppsf')
||
:: praca zdalna stała
   _sql:=''+"select
               PPSF_H.P, PPSF_H.OD, PPSF_H.DO,
               PPSFROZD.WYBDNI,
               PPSFROZD.D1,
               PPSFROZD.D2,
               PPSFROZD.D3,
               PPSFROZD.D4,
               PPSFROZD.D5,
               PPSFROZD.D6,
               PPSFROZD.D7
             from
               PPSF_H join
               :_a using(PPSF_H.P,:_a.P) join
               PPSFROZD using(PPSF_H.PPSFROZD, PPSFROZD.REFERENCE)
             where
               (PPSF_H.AKT='T') and
               (PPSF_H.OD <= to_date(:_c)) and
               (PPSF_H.DO >= to_date(:_b) or PPSF_H.DO is null)
             order by PPSF_H.P, PPSF_H.OD
               ";
   &_tab;
   _tab:=sql(_sql,_param.P,_param.data_od,_param.data_do);

   {? _tab.first()
   || {!
      |? {? _tab.DO=#0
         || _tab.DO:=_param.data_do;
            _tab.put()
         ?};
         {! _ind:=#_tab.OD .. #_tab.DO
         |! _data:=#_ind;
            _RS.prefix(_tab.P,_data);
            {? _RS.first() & _RS.ZDALNA<>'T'
            || {? _tab.WYBDNI='N' | (_tab.WYBDNI='T' & ($('_a.D%1=_b'[$(_data~4)]))(_tab,'T'))
               || _RS.ZDALNA:='T';
                  _RS.ZDALNAWD:=_tab.WYBDNI;
                  _RS.put()
               ?}
            ?}
         !};
         _tab.next()
      !}
   ?};

:: zarejestrowane start/stop dla pracy zdalnej
   _sql:=''+"select /*+MASK_FILTER(R_POR_WW,'r_ph????')*/ distinct
               R_POR_WW.P, R_POR_WW.DZ
             from
               R_POR_WW join
               :_a using(R_POR_WW.P,:_a.P)
             where
               R_POR_WW.DZ >= to_date(:_b) and
               R_POR_WW.DZ <= to_date(:_c)
             order by R_POR_WW.P, R_POR_WW.DZ
               ";
   &_tab;
   _tab:=sql(_sql,_param.P,_param.data_od,_param.data_do);

   {? _tab.first()
   || {!
      |? _RS.prefix(_tab.P,_tab.DZ);
         {? _RS.first() & _RS.ZDALNA<>'T'
         || _RS.ZDALNA:='T';
            _RS.put()
         ?};
         _tab.next()
      !}
   ?}
?};

:: przywrócenie pełnej dziedziny
_RS.prefix();
~~


\przerwy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51_24]
::  MOD: MicKoc [22.26]
:: OPIS: Uzupełnia RS-a informacjami o niepłatnych przerwach oraz zmianach dla pracowników w zakresie podanych dat
::   WE: _a [OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \przerwy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('isEnabled','prc_przerwy') || return(0) ?};
_param:={? var_pres('_a')=117 || _a || return(0) ?};

_od:=_param.data_od;
_do:=_param.data_do;
_RS:=_param.RS;
_P:=_param.P;
_warstwa:=_param.warstwa;
_sql:=''+"select KAL_BUFF.P, KAL_BUFF.DATA, KAL_BUFF.P_DATA, KAL_BUFF.P_START, KAL_BUFF.P_CZAS, KAL_BUFF.ZMIANA
          from
            KAL_BUFF join
            :_a using(KAL_BUFF.P,:_a.P)
          where
            KAL_BUFF.GPW=':_d' and
            KAL_BUFF.DATA>=to_date(:_b) and
            KAL_BUFF.DATA<=to_date(:_c) and
            (KAL_BUFF.P_DATA IS NOT NULL or KAL_BUFF.ZMIANA IS NOT NULL)
            and
            KAL_BUFF.A_OKR=:_e
          order by KAL_BUFF.P, KAL_BUFF.DATA
            ";

_tab:=sql(_sql,_P,_od,_do,_warstwa,_param.okr_ref);

{? _tab.first()
|| {!
   |? _RS.prefix(_tab.P,_tab.DATA);
      {? _RS.first()
      || {? _tab.P_CZAS<>*0
         || _RS.P_DATA:=$_tab.P_DATA;
            _RS.P_START:=_tab.P_START$3;
            _RS.P_CZAS:=_tab.P_CZAS$3
         ?};
         _RS.ZMIANA:=_tab.ZMIANA;
         _RS.put()
      ?};
      _tab.next()
   !}
?}


\przerwy_grupy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51_24]
::  MOD: MicKoc [22.26]
:: OPIS: Dodaje informacje o przypisanej grupie związanej z niepłatną przerwą.
::   WE: _a[OBJ]   - obiekt z parametrami okreslonymi w put_RS
::  OLD: \przerwy_grupy/graf_kal.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('isEnabled','prc_przerwy') || return(0) ?};
_param:={? var_pres('_a')=117 || _a || return(0) ?};
_P:=_param.P;
_od:=_param.data_od;
_do:=_param.data_do;
_tab:=exec('przerwy','grupprac',_P,_od,_do);

{? var_pres('_tab')>0 & _tab.first()
|| {!
   |? _chk_od:={? _tab.OD>_od || _tab.OD || _od ?};
      _chk_do:={? _tab.DO<_do & _tab.DO<>#0 || _tab.DO || _do ?};
      {! _ind:=#_chk_od..#_chk_do
      |! _data:=#_ind;
         _param.RS.prefix(_tab.P,_data);
         {? _param.RS.first()
         || _param.RS.P_GRUPA:=_tab.GR;
            _param.RS.put()
         ?}
      !};
      _tab.next()
   !}
?}

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:28 5b13ed568ddc9c413c9a164fa691bdb8f3e2bf24834e91288b4bb60e64a07f0415f8745f10913565029fd29c849dad01c06759ea8a562b5e3d786d7247c00bce0d73360946d4b5b1e973017f3f6651a41e798d24f35cb6567c84266f1abe033c4a4b75977baff5f9bf1d523e0aa8fe848ea9a999ae7d76ab181675964ef1bcd5
