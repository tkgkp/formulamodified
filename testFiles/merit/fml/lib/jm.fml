:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: jm.fml [17.00]
:: Utworzony: 16.03.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: obsługa jednostek miar, dokładności, przeliczników itp. (tabele JM, MJM...)
::======================================================================================================================


\jaka_dok_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2004]
:: OPIS: Jaka dokładność na materiale
::   WE: _a - M.ref()
::  OLD: \jaka_dok/magazyn1.fml
::----------------------------------------------------------------------------------------------------------------------
M.cntx_psh();
M.prefix();
_wyn:={? M.seek(_a) || M.DOKL || 0 ?};
M.cntx_pop();
_wyn


\jaka_dok_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zwraca dokladność przeliczenia jednostek
::   WE: _a - materiał lub null()
::       _b - z jednostki
::       _c - na jednostkę
::   WY: zwraca dokladność (-1 nie znaleziono dokładności)
::  OLD: \jaka_dok/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b<>_c
|| _wyn:=exec('przeldok','jm',_a,_b,_c);
   {? _wyn=-1 || _buf:=exec('przeldok','jm',_a,_c,_b); {? _buf<>-1 || _wyn:=_buf ?} ?};
   {? _wyn=-1 & _a<>null() || _wyn:=exec('jaka_dok_mjm','jm',null(),_b,_c) ?}
|| {? _a<>null()
   || _wyn:=exec('jaka_dok_m','jm',_a)
   || _wyn:=-1
   ?}
?};
_wyn


\przeldok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: szuka dokladności dla danej jednostki miary
::   WE: _a - materiał lub null()
::       _b - z jednostki
::       _c - na jednostkę
::   WY: zwraca dokładność
::----------------------------------------------------------------------------------------------------------------------
_wyn:=-1; BEER.MDOKL:=5;
MJM.cntx_psh();
MJM.index('JM');
MJM.prefix(_a,_b);
{? MJM.first()
|| _ok:=1;
   {!
   |? {? MJM.JP=_c
      || _ok:=0; _wyn:=MJM.DOKL; BEER.MDOKL:=MJM.MDOKL
      || _buf:=exec('przeldok','jm',_a,MJM.JP,_c);
         {? _buf<>-1 || _ok:=0; _wyn:=_buf ?}
      ?};
      _ok & MJM.next()
   !}
|| _wyn:=-1; BEER.MDOKL:=5
?};
MJM.cntx_pop();
_wyn


\prz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zwraca współczynnik przeliczenia jednostek
::   WE: _a - ref materiału
::       _b - pierwsza jednostka
::       _c - druga jednostka
::   WY: współczynnik przeliczenia
::  OLD: \prz/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? _b<>_c
|| _wyn:=exec('przel','jm',_a,_b,_c);
   {? ~_wyn || _buf:=exec('przel','jm',_a,_c,_b); {? _buf || _wyn:=1/_buf ?} ?};
   {? ~_wyn & _a<>null || _wyn:=exec('prz','jm',null,_b,_c) ?}
|| _wyn:=1
?};
_wyn


\przel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: zwraca przelicznik wg jednostek
::   WE: _a - materiał lub null
::       _b - z jednostki
::       _c - na jednostke
::   WY: przelicznik
::  OLD: \przel/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
MJM.cntx_psh();
MJM.index('JM');
MJM.prefix(_a,_b);
{? MJM.first()
|| _ok:=1;
   {!
   |? {? MJM.JP=_c
      || _ok:=0; _wyn:=MJM.PRZ
      || _buf:=exec('przel','jm',_a,MJM.JP,_c);
         {? _buf || _ok:=0; _wyn:=(MJM.PRZ*_buf) ?}
      ?};
      _ok & MJM.next()
   !}
?};
MJM.cntx_pop();
_wyn


\rek_jm2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: akcja rekord dla jednostek dodatkowych
::  OLD: \rek_jm2/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? (-~(6+menu_txt()))<>'szukaj'
||
:: precyzja częsci ułamkowej wg indeksu materiałowego
   _form_dokl:="exec('FindAndGet','#table',M,_a,,\"M.DOKL\",ST.DOKL)";
   {? BEER.TAB<>'JM' & BEER.TAB<>''
   || _jm2:=JM.ref;
      M.cntx_psh;
      JM.cntx_psh;
      {? BEER.TAB='TMAT' | BEER.TAB='TCHMAT'
      ||
         {| ($BEER.TAB)()
         |!
            {? GRKTM='G'
            || _mat:=TGDFLT().PT;
               _jm:=TGDFLT().PT().J;
               _kjm:=TGDFLT().PT().J().KOD
            |? GRKTM='K'
            || _mat:=PT;
               _jm:=PT().J;
               _kjm:=PT().J().KOD
            || _mat:=null();
               _jm:=null();
               _kjm:=''
            ?}
         |};
         BEER.PRZ:=exec('prz','jm',_mat,_jm2,_jm);
         BEER.KJM:=_kjm;
         JM.fld_opt('WERF','col_name="= Ilość [%1]"'[BEER.KJM],BEER,'IL2');
         BEER.IL2:=BEER.PRZ $ _form_dokl(_mat)
      |? BEER.TAB='ZMAT'
      || {|($BEER.TAB)()
         |! _mat:=KTM;
            _jm:=KTM().J;
            _kjm:=KTM().J().KOD
         |};
         BEER.PRZ:=exec('prz','jm',_mat,_jm2,_jm);
         BEER.KJM:=_kjm;
         JM.fld_opt('WERF','col_name="= Ilość [%1]"'[BEER.KJM],BEER,'IL2');
         BEER.IL2:=BEER.PRZ $ _form_dokl(_mat)
      || _jmz:={? BEER.TAB='ZD_POZ' || ZD_POZ.ZD_NAG().JMZ
               |? BEER.TAB='FAP' || FAP.FAKS().JMZ
               || 0
               ?};
         _mat:=($(BEER.TAB+'.M'))();
         _jm:=($(BEER.TAB+'.M().J'))();
         BEER.KJM:=($(BEER.TAB+'.M().J().KOD'))();
         JM.fld_opt('WERF','col_name="= Ilość [%1]"'[BEER.KJM],BEER,'IL2');
         _ile:={? BEER.TAB='DK' & (BEER.MMJM+1)='1'
               || ($(BEER.TAB+'.IL'))()
               |? BEER.TAB='ZK_P'
               || ($(BEER.TAB+'.ILZ'))()
               |? BEER.TAB='FAP' & FAP.FAKS().WHERE='G' & FAP.FAKS().T().KOR='N'
               || ($(BEER.TAB+'.IL'))()
               |? _jmz
               || ($(BEER.TAB+'.IL'))()
               || ($(BEER.TAB+'.IL2'))()
               ?};
         {? _jmz
         || {? _jm=_jm2
            || BEER.PRZ:=1
            || _t2:={? BEER.TAB='ZD_POZ' || ZD_POZ.T2
                    |? BEER.TAB='FAP' || FAP.T2
                    || 'N'
                    ?};
               {? _t2='R'
               || _ws2:={? BEER.TAB='ZD_POZ' || ZD_POZ.WS2
                        |? BEER.TAB='FAP' || FAP.WS2
                        || 0
                        ?};
                  {? _ws2 || BEER.PRZ:=1/_ws2 ?}
               || BEER.PRZ:=exec('prz','jm',_mat,_jm2,_jm)
               ?}
            ?}
         || BEER.PRZ:={? (BEER.TAB='DK' & DK.N().TYP().DS='T') | BEER.TAB='ZK_P'
                      || exec('prz','jm',_mat,_jm,_jm2)
                      || exec('prz','jm',_mat,_jm2,_jm)
                      ?}
         ?};
         BEER.IL2:={? BEER.PRZ=0
                   || 0
                   |? BEER.PRZ=1
                   || _ile
                   || _ile*BEER.PRZ $ _form_dokl(_mat)
                   ?}
      ?};
      JM.cntx_pop;
      M.cntx_pop
   ?}
?};
~~


\beer_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Wartość początkowa dla pola M - BEER.MJM
::  OLD: \beer_mjm/przelicz.fml
::  TAG: <JM><BL><PRZELICZ>
::----------------------------------------------------------------------------------------------------------------------
BEER.MJM


\pr_mjmjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja MJM.JM
::  OLD: \pr_mjmjm/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? BEER.MJM<>null || MJM.JP:=BEER.MJM().J ?};
{? MJM.JMG='T' || _res:=exec('FindAndGet','#table',M,MJM.M,,"(count()-1)<=1",1) ?};
_res


\po_mjmjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji pola MJM.JM
::   WY: 0-jeśli pusta dziedzina
::  OLD: \po_mjmjm/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? BEER.MJM<>null & BEER.MJM().J=MJM.JM
|| FUN.info({? MJM.M().RODZ='T'
            || 'Podaj jednostkę różną od jednostki przypisanej do materiału.'@
            || 'Podaj jednostkę różną od jednostki przypisanej do usługi.'@
            ?})
|? BEER.MJM<>null & (1+menu_txt)<>'P' & (_prz:=exec('prz','jm',MJM.M,MJM.JM,MJM.M().J); _prz<>1 & _prz<>0)
|| FUN.info('Jednostka już przeliczana (wynika między innymi ze standardowych przeliczników miar).\n'
            'Mianowicie %1 %2 to: 1 %3.'@[form(_prz),BEER.MJM().J().KOD,MJM.JM().KOD])
|| _wyn:=1
?};
_wyn


\bl_jp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: Wartość początkowa pola MJM.JP
::  OLD: \bl_jp/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.MJM().J


\pr_mjmjp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja MJM.JP
::   WY: 0-jeśli pusta dziedzina lub jeden rekord to nie do edycji 1-w innych przypadkach
::  OLD: \pr_mjmjp/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? BEER.MJM<>null
|| 0
|| 1
?}


\po_mjmjp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji MJM.JP
::   WY: 1-jest ciagłość 0-brak
::  OLD: \po_mjmjp/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? BEER.MJM<>null
|| {? exec('prz','jm',MJM.M,MJM.JP,MJM.M().J)=0
   || FUN.info('Brak ciągłości przeliczenia jednostek'@);
      0
   || 1
   ?}
|| 1
?}


\bl_mdokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: Wartość początkowa pola sposobu przybliżenia - Formuła przybliżeń
::  TAG: <JM><BL><PRZELICZ>
::  OLD: \bl_mdokl/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.SDOKL:='ABSUP';
5


\rek_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: akcja rekord dla tabeli MJM
::  OLD: \rek_mjm/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? MJM.M<>null || BEER.JMK:=MJM.M().J().KOD ?};
{? ~(var_pres('__mdokl')>100) || exec('initmdok','jm') ?};
BEER.SDOKL:='';
__mdokl.prefix();
{? __mdokl.first() || {! |? {? __mdokl.NUM=MJM.MDOKL || BEER.SDOKL:=__mdokl.KOD; 0 || __mdokl.next() ?} !} ?};
MJM.win_edit('RED%1'[{? MJM.JMG='T' || '2' || '' ?}]);
MJM.actions_grayed('MAT',{? MJM.DOM | MJM.M().J2<>null() || 'M' || '' ?});
0


\initmdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: inicjuje i wypełnia tabelkę sposobów przybliżeń
::  OLD: \initmdok/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__mdokl')>0 || obj_del(__mdokl) ?};
__mdokl:=tab_tmp(2,'KOD','STRING[10]','Kod'
         ,'KO2','STRING[10]','Kod'
         ,'NUM','INTEGER','Numer'
         ,'OPI','STRING[150]','Opis');

__mdokl.NUM:=0; __mdokl.KOD:=__mdokl.KO2:='BANKERS'; __mdokl.OPI:='połówka do parzystej';
__mdokl.add(1);

__mdokl.NUM:=1; __mdokl.KOD:=__mdokl.KO2:='FLOOR'; __mdokl.OPI:='zawsze w dół';
__mdokl.add(1);

__mdokl.NUM:=2; __mdokl.KOD:=__mdokl.KO2:='CEIL'; __mdokl.OPI:='zawsze w górę';
__mdokl.add(1);

__mdokl.NUM:=3; __mdokl.KOD:=__mdokl.KO2:='CHOP'; __mdokl.OPI:='dla ujemnych w górę, dla dodatnich w dół';
__mdokl.add(1);

__mdokl.NUM:=4; __mdokl.KOD:=__mdokl.KO2:='DOWN'; __mdokl.OPI:='połówka w dół';
__mdokl.add(1);

__mdokl.NUM:=5; __mdokl.KOD:=__mdokl.KO2:='ABSUP'; __mdokl.OPI:='[domyślna] połówka dla ujemnych w dół, '
                                                                'dla dodatnich w górę';
__mdokl.add(1);

__mdokl.NUM:=6; __mdokl.KOD:=__mdokl.KO2:='ABSDOWN'; __mdokl.OPI:='połówka dla ujemnych w górę, dla dodatnich w dół';
__mdokl.add(1);

__mdokl.NUM:=7; __mdokl.KOD:=__mdokl.KO2:='UP'; __mdokl.OPI:='połówka w górę';
__mdokl.add(1);

_win_sel:=__mdokl.mk_sel('Sposoby przybliżeń'@,'P',,'sposobyprzybl');
__mdokl.win_fld(_win_sel,,'KOD',,,10,,1,'Kod'@);
__mdokl.win_fld(_win_sel,,'OPI',,,60,,1,'Opis'@);
__mdokl.win_fld(_win_sel,,'NUM',,,5,,1,'Numer'@);
__mdokl.win_act(_win_sel,0,'Formuła','&Wybierz'@@,,'Wybór bieżącego zapisu',"sel_exit()",,1,,,,'W');
__mdokl.win_act(_win_sel,0,'Szukaj',,,,,,0);
__mdokl.win_act(_win_sel,0,'Kolejność',,,,,,0);
__mdokl.win_sel(_win_sel);
1


\po_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: kontrola pól po dodaniu rekordu w jednostkach
::       UWAGA - formuła wołana również podczas importu rekordów
::   WE: [_a] - 0(domyślnie)-standardowa obsługa 1-wynik jest komunikatem
::       [_b] - 'add' / 'put' - dołączenie lub poprawa rekordu
::   WY: akronim niewypełnionego pola
::  OLD: \po_mjm/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=0 ?} || _a:=0 ?};
{? _>=2 || {? type_of(_b)<>2 || _b:='' ?} || _b:='' ?};

{? _b='' & (1+menu_txt)='D'
||
   _b:='add'
?};

_wyn:='';
{? MJM.JM=null
|| _txt:='Niewypełniona jednostka.'@;
   {? ~_a || FUN.info(_txt);_wyn:='JM' || _wyn:=_txt ?}
|? MJM.JM=MJM.JP
|| _txt:='Przeliczane jednostki miary muszą być różne.'@;
   {? ~_a || FUN.info(_txt); _wyn:='JP' || _wyn:=_txt ?}
|? MJM.JP=null
|| _txt:='Niewypełniona jednostka do przeliczeń.'@;
   {? ~_a || FUN.info(_txt); _wyn:='JP' || _wyn:=_txt ?}
|? MJM.PRZ<=0
|| _txt:='Błędnie wypełniony przelicznik jednostek.\nPrzelicznik musi być większy od zera.'@;
   {? ~_a || FUN.info(_txt); _wyn:='PRZ' || _wyn:=_txt ?}
|? MJM.DOKL<0
|| _txt:='Błędnie wypełniona dokładność przelicznika jednostek.\nDokładność musi być większa lub równa zero.'@;
   {? ~_a || FUN.info(_txt); _wyn:='DOKL' || _wyn:=_txt ?}
|? MJM.M<>null & ~exec('sprczyjm','jm',MJM.M,MJM.JM,MJM.JP)
|| _txt:={? MJM.M().R='T'
         || 'Brak przelicznika do jednostki materiału.'@
         || 'Brak przelicznika do jednostki usługi.'@
         ?};
   {? ~_a || FUN.info(_txt); _wyn:='PRZ' || _wyn:=_txt ?}
|? ~exec('spr_jest','jm',MJM.M,MJM.JM,MJM.JP,{? _a | _b='add' || null || MJM.ref ?})
|| _txt:='Wprowadzono już podany przelicznik.'@;
   {? ~_a || FUN.info(_txt); _wyn:='JM' || _wyn:=_txt ?}
|| _wyn:=''
?};
:: Kontrola wymiarów i wagi paczki
{? _wyn=''
|| {? MJM.TR_L>0
   || {? MJM.TR_W<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_W'
      |? MJM.TR_H<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_H'
      ?}
   |? MJM.TR_W>0
   || {? MJM.TR_L<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_L'
      |? MJM.TR_H<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_H'
      ?}
   |? MJM.TR_H>0
   || {? MJM.TR_L<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_L'
      |? MJM.TR_W<=0 || FUN.info('Nieprawidłowe wymiary paczki.\nNależy podać wszystkie albo żadnego.'@); _wyn:='TR_W'
      ?}
   ?}
?};
{? _wyn=''
|| {? MJM.TR_L<0  || FUN.info('Wymiar nie może być liczbą ujemną.'@); _wyn:='TR_L'
   |? MJM.TR_W<0  || FUN.info('Wymiar nie może być liczbą ujemną.'@); _wyn:='TR_W'
   |? MJM.TR_H<0  || FUN.info('Wymiar nie może być liczbą ujemną.'@); _wyn:='TR_H'
   |? MJM.TR_KG<0 || FUN.info('Waga nie może być liczbą ujemną.'@); _wyn:='TR_KG'
   ?}
?};
:: aktualizacja znacznika domylności opakowania
{? _wyn='' & MJM.TR_D
|| _ref:={? _b='add' || null() || MJM.ref() ?};
   MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(MJM.M);
   {? MJM.first()
   || {!
      |? {? MJM.TR_D & MJM.ref<>_ref
         || MJM.TR_D:=0;
            MJM.put(1)
         ?};
         MJM.next()
      !}
   ?};
   MJM.cntx_pop()
?};
_wyn


\pr_sdokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcją pola BEER.SDOKL
::  OLD: \pr_sdokl/przelicz.fml
::  TAG: <JM><MBUILDER><BE>
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('__mdokl')>100) || exec('initmdok','jm') ?};
1


\po_sdokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji pola BEER.SDOKL
::  OLD: \po_sdokl/przelicz.fml
::  TAG: <JM><MBUILDER><AE>
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('__mdokl')>100) || exec('initmdok','jm') ?};
__mdokl.clear();
__mdokl.prefix(BEER.SDOKL);
{? BEER.SDOKL<>'' & __mdokl.find_key(BEER.SDOKL)
|| MJM.MDOKL:=__mdokl.NUM;
   BEER.SDOKL:=__mdokl.KOD
|| exec('f3_sdokl','jm')
?}


\f3_sdokl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: tabelka sposobów przyblizeń do wyboru
::  OLD: \f3_sdokl/przelicz.fml
::  TAG: <JM><MBUILDER><F3>
::----------------------------------------------------------------------------------------------------------------------
{? ~(var_pres('__mdokl')>100) || exec('initmdok','jm') ?};
__mdokl.clear();
__mdokl.find_key(BEER.SDOKL);
{? __mdokl.select(,1)
|| MJM.MDOKL:=__mdokl.NUM;
   BEER.SDOKL:=__mdokl.KOD
?}


\spr_jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdzenie czy wprowadzono już dany przelicznik
::   WE: _a - ref materiału
::       _b - ref JM
::       _c - ref JP
::       _d - ref MJM lub null=dla dołączania
::   WY: 1-jest OK 0-nie jest
::  OLD: \spr_jest/przelicz.fml
::  TAG: <JM>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
MJM.cntx_psh();
MJM.index('JM');
MJM.prefix(_a,_b,_c);
{? MJM.first() || {! |? _wyn:=~(_d=null() | (_d<>MJM.ref())); _wyn & MJM.next() !} ?};
{? _wyn
|| MJM.index('JM');
   MJM.prefix(_a,_c,_b);
   {? MJM.first() || {! |? _wyn:=~(_d=null() | (_d<>MJM.ref())); _wyn & MJM.next() !} ?}
?};
MJM.cntx_pop();
_wyn


\sprczyjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy istnieje przelicznik do wyjściowej jednostki
::   WY: 1-istnieje, 0-nie istnieje
::  OLD: \sprczyjm/przelicz.fml
::  TAG: <JM>
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0; _mat:=MJM.M;

_jm:=MJM.JM; _jp:=MJM.JP; _jj:=MJM.M().J;
{? _jm<>_jj & _jp<>_jj
|| MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix();
   _wyn:=MJM.find_key(_mat,_jj);
   {? ~_wyn || MJM.index('JP'); MJM.prefix(); _wyn:=MJM.find_key(_mat,_jj) ?};
   MJM.cntx_pop()
|| _wyn:=1
?};
_wyn


\przelicz_m
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: przeliczniki jednostek miary dla danego indeksu materiałowego
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::  OLD: \m_jedn/jm.fml
::  TAG: <JM>
::----------------------------------------------------------------------------------------------------------------------
{? _>=1 || {? type_of(_a)<>1 || _a:=1 ?} || _a:=1 ?};

{? HELP.REFMAT<>null || M.seek(HELP.REFMAT) ?};
JM.f_clear();
JM.win_dict('SLO');
BEER.MJM:=M.ref();
BEER.JMK:=M.J().KOD;
MJM.index('JM');
MJM.prefix(BEER.MJM);
MJM.win_sel('MAT');
MJM.hdr_sel();
MJM.hdr_sel(' dla: '+M.KTM);
_enable:={? M.RODZ='U' || 'enable=0' || 'enable=1' ?};
MJM.efld_opt('RED',_enable,,'TR_L');
MJM.efld_opt('RED',_enable,,'TR_W');
MJM.efld_opt('RED',_enable,,'TR_H');
MJM.efld_opt('RED',_enable,,'TR_D');
MJM.efld_opt('RED',_enable,,'TR_KG');
MJM.win_edit('RED');

{? _a || MJM.select() ?};
''


\del_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy można usunąć rekord
::   WY: 1-można usunąć, 0-nie można usunąć
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1; _mat:=MJM.M;
_jm:=MJM.JM; _jp:=MJM.JP; _jj:=MJM.M().J; _ref:=MJM.ref();
MJM.cntx_psh();
MJM.index('JM');
MJM.prefix(_mat);
_wyn:=MJM.size()=1;
{? ~_wyn
|| MJM.index('JM'); MJM.prefix(_mat,_jj); _wyn:=MJM.size();
   {? MJM.first() || {! |? {? MJM.ref()=_ref || _wyn-=1 ?}; MJM.next() !} ?}
?};
{? ~_wyn
|| MJM.index('JP'); MJM.prefix(_mat,_jj); _wyn:=MJM.size();
   {? MJM.first() || {! |? {? MJM.ref()=_ref || _wyn-=1 ?}; MJM.next() !} ?}
?};
MJM.cntx_pop();
{? MJM.JMG='T' & MJM.JM<>null() || _wyn:=exec('FindAndGet','#table',M,MJM.M,,"(count()-1)<1",1) ?};
{? ~_wyn
|| FUN.info('Niemożliwe usunięcie przelicznika.\n'@+
            {? MJM.JMG='T'
            || 'Przelicznik wykorzystywany jako druga jednostka ewidencyjna.\n\n'
               'Należy usunąć przypisanie drugiej jednostki ewidencyjnej dla materiału.'@
            |? MJM.M().RODZ='T'
            || 'Usunięcie spowodowałoby brak przelicznika do jednostki materiału.'@
            || 'Usunięcie spowodowałoby brak przelicznika do jednostki usługi.'@
            ?})
?};
_wyn


\pwinfprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy pole ma wartość różną od zera = wówczas podświetla
::  OLD: \pwinfprz/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? BEER.PRZ
|| ''
|| '128:128:128'
?}


\ustapdkprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: ustawia zmienna BEER.DMJM
::   WE: [_a] - ref indeksu materiałowego
::       [_b] - ref jednostki miary
::  OLD: \ustapdkprz/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? _=0
|| BEER.JMZ:=exec('get','#params',400999,2)='T';
   BEER.DMJM:='NN0';
   BEER.TAB:='ZD_POZ';
   _kod:=exec('get','#params',400000,2);
   {? _kod*'ZD'
   || {? 'RA'*(_rodz:=exec('get','#params',400301,2)) || BEER.DMJM:='T'+_rodz+'0' ?}
   ?}
|? _a<>null
|| BEER.JMZ:=exec('get','#params',400999,2)='T';
   JM.win_dict('WERF');
   JM.f_clear();
   JM.index('KOD');
   JM.prefix();
   JM.f_set('KOD,NAZ',,,);
   {? (1+(1-BEER.DMJM))='A' & JM.f_first()
   || {!
      |? {? exec('prz','jm',_a,_b,JM.ref())<>0
         || JM.f_next()
         || JM.f_del()
         ?}
      !}
   ?};
   _ile:=JM.f_size();
   {? ~_ile  || BEER.DMJM:='N'+(1-BEER.DMJM)
   |? _ile=1 || JM.f_first(); PD_K.J2:=JM.ref(); PD_K.WS2:=exec('prz','jm',_a,_b,JM.ref())
   |? PD_K.J2=null & exec('FindInSet','#table','MJM','JM',PD_K.M().J,PD_K.M)<>null
   || PD_K.J2:=exec('FindInSet','#table','MJM','JM',PD_K.M().J,PD_K.M,"MJM.JP",,,PD_K.M().J);
      PD_K.WS2:=exec('prz','jm',PD_K.M,PD_K.J2,PD_K.M().J)
   |? PD_K.J2=null & exec('FindInSet','#table','MJM','JP',PD_K.M().J,PD_K.M)<>null
   || PD_K.J2:=exec('FindInSet','#table','MJM','JP',PD_K.M().J,PD_K.M,"MJM.JM",,,PD_K.M().J);
      PD_K.WS2:=exec('prz','jm',PD_K.M,PD_K.J2,PD_K.M().J)
   ?}
?}


\przyjdod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: wtpelnia tabelke z danymi odnosnie jednostki dodatkowej
::   WE: _a - jednostka dodatkowa ref SQL
::       _b - wspolczynnik
::       _c - ilosc wg jednostki dodatkowej
::  OLD: \przyjdod/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
{? do_state()=1 & var_pres('__djod')>100
|| __djod.clear; {? __djod.first() || {! |? __djod.del !} ?}
|| VAR_DEL.delete('__djod');
   __djod:=tab_tmp(1,'J2','STRING[20]',''
            ,'WS2','REAL',''
            ,'IL2','REAL','')
?};
__djod.clear;
__djod.blank;
__djod.J2:=_a;
__djod.WS2:=_b;
__djod.IL2:=_c;
__djod.add(1)


\ustdokil
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: ustala precyzje do wyswietlania ilosci w jednostce dodatkowej
::   WE: _a - typ miejsca
::       _b - dla _a=S informacja o polu ktore nas interesuje
::   WY: dokladnosc
::  OLD: \ustdokil/przelicz.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? _a='M'
|| _wyn:=exec('jaka_dok_mjm','jm',DK.M,DK.J2,DK.M().J);
   {? _wyn<0 || _wyn:={? DK.J2().DOKL>=0 || DK.J2().DOKL || DK.M().DOKL ?}  ?}
|? _a='Z'
|| _wyn:=exec('jaka_dok_mjm','jm',ZK_P.M,ZK_P.J2,ZK_P.M().J);
   {? _wyn<0 || _wyn:={? ZK_P.J2().DOKL>=0 || ZK_P.J2().DOKL || ZK_P.M().DOKL ?} ?}
|? _a='F'
|| _wyn:=exec('jaka_dok_mjm','jm',FAP.M,FAP.J2,FAP.JM);
   {? _wyn<0 || _wyn:={? FAP.J2().DOKL>=0 || FAP.J2().DOKL || FAP.M().DOKL ?} ?}
|? _a='S'
|| FAKS.cntx_psh;
   {? _b='IL' & FAP.M().J2<>null()
   || {? FAP.JM=FAP.M().J
      || _wyn:=FAP.M().DOKL_S
      || _wyn:=exec('jaka_dok_mjm','jm',FAP.M,FAP.J2,FAP.JM)
      ?}
   |? _b='IL' & (FAP.FAKS().WHERE='G' | 'GAR'*FAP.T2 & FAP.FAKS().WHERE='M') & FAP.J2<>FAP.JM
   || _wyn:=exec('jaka_dok_mjm','jm',FAP.M,FAP.J2,FAP.JM)
   |? _b='IL' & FAP.M().J=FAP.JM
   || _wyn:=FAP.M().DOKL
   || _wyn:={? _b='IL' & (';LP'*FAP.FAKS().WHERE)>1
            || exec('jaka_dok_mjm','jm',FAP.M,FAP.J2,FAP.JM)
            || exec('jaka_dok_mjm','jm',FAP.M,FAP.J2,FAP.M().J)
            ?}
   ?};
   FAKS.cntx_pop;
   {? _wyn<0 || _wyn:={? FAP.J2().DOKL>=0 || FAP.J2().DOKL || FAP.M().DOKL ?} ?}
|? _a='D'
|| _wyn:=exec('jaka_dok_mjm','jm',ZD_POZ.M,ZD_POZ.J2,ZD_POZ.M().J);
   {? _wyn<0 || _wyn:={? ZD_POZ.J2().DOKL>=0 || ZD_POZ.J2().DOKL || ZD_POZ.M().DOKL ?} ?}
|? _a='P'
|| _wyn:=exec('jaka_dok_mjm','jm',PAL_POZ.M,PAL_POZ.J2,PAL_POZ.M().J);
   {? _wyn<0 || _wyn:={? PAL_POZ.J2().DOKL>=0 || PAL_POZ.J2().DOKL || PAL_POZ.M().DOKL ?} ?}
|? _a='K'
|| _wyn:=exec('jaka_dok_mjm','jm',PD_K.M,PD_K.J2,PD_K.M().J);
   {? _wyn<0 || _wyn:={? PD_K.J2().DOKL>=0 || PD_K.J2().DOKL || PD_K.M().DOKL ?} ?}
?};
_wyn


\zaokr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2009]
:: OPIS: Zaokrągla podaną w parametrze wartość wg ustawień materiału
::   WE: _a - wartość do zaokrąglenia
::       _b - M.ref()
::       [_c] - sposób działania, gdy ilość niepodzielna:
::            0 - (domyślnie) ceil
::            1 - floor
::  OLD: \zaokr/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
_dokl:=exec('jaka_dok_m','jm',_b);
{? var_pres('_c')=type_of(0) || _floor:=_c || _floor:=0 ?};
{? _dokl=0
|| {? _floor || _res:=floor(_a) || _res:=exec('ceil','#math',_a) ?}
|| _res:=_ilosc:=(_a)$_dokl
?};
_res


\chk_jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [18.42]
:: OPIS: walidacja wypełnienia rekordu - jednostki miary
::       UWAGA - formuła wołana również podczas importu rekordów
::   WE: _a - 'add' / 'put' - dołączenie lub poprawa rekordu
::   WY: '' - poprawnie wypełnione, lub akronim błędnie wypełnionego pola
::  TAG: <JM><CHK>
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record(JM,,'KOD');
{? _result=''
|| _kod:=JM.KOD; _ref:=JM.ref();
   JM.cntx_psh();
   JM.index('KOD'); JM.prefix(_kod,_kod);
   {? JM.first()
   || {!
      |?
         {? JM.ref()<>_ref | _a='add'
         || FUN.info('Istnieje już jednostka miary o kodzie %1.'@[_kod]);
            _result:='KOD'
         ?};
         _result='' & JM.next()
      !}
   ?};
   JM.cntx_pop()
?};
{? _result='' & JM.DOKL>10
|| FUN.info('Dokładność nie może być większa od 10.'@);
   _result:='DOKL'
?};
{? _result=''
|| {? _a='put' & BEER.JMDOKL=-1 & JM.DOKL=0
   || {? FUN.ask('Przed zmianą nie była ustawiona dokładność dla jednostki miary.\n'
                 'Czy chcesz zatwierdzić dokładność 0 dla jednostki: %1.'@[JM.KOD])
      || ''
      || _result:='DOKL'
      ?}
   |? JM.DOKL<0 & ~(BEER.JMDOKL=-1 & BEER.JMDOKL=JM.DOKL)
   || FUN.info('Dokładność musi być liczbą większą lub równą zero.'@);
      _result:='DOKL'
   ?}
?};
_result


\par_m3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: jednostka m3
::   WY: JM.ref()
::  OLD: \par_m3/um.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=null;
_fo:=exec('get','#params',100170,2);
JM.index('KOD');
JM.prefix(_fo,_fo);
{? JM.first() || _wyn:=JM.ref() ?};
_wyn


\jm_kpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009+]
:: OPIS: jednostka miary dla kart przekazania odpadow
::  OLD: \jm_kpo/um_kpo.fml
::----------------------------------------------------------------------------------------------------------------------
_jm_kpo:=exec('get','#params',100171,2);
{? +_jm_kpo<=6
|| UMO.JM_KPO:='['+_jm_kpo+']'
|| UMO.JM_KPO:=_jm_kpo
?};
''


\pr_mjmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola MJMG
::----------------------------------------------------------------------------------------------------------------------
1


\po_mjmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola MJMG
::----------------------------------------------------------------------------------------------------------------------
1


\pr_mjsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola MJSP
::----------------------------------------------------------------------------------------------------------------------
MJM.JMG='T'


\pr_fwsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją formuły współczynnika dla drugiej jednostki
::----------------------------------------------------------------------------------------------------------------------
{? MJM.JMG='T' || exec('formulaWspJM','wzorce') || 0 ?}


\pr_f2il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją formuły przeliczenia jednostki postawowej
::----------------------------------------------------------------------------------------------------------------------
{? MJM.JMG='T' & MJM.IL2IL='I' || exec('formulaWspJM','wzorce') || 0 ?}


\pr_il2il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola IL2IL
::----------------------------------------------------------------------------------------------------------------------
MJM.JMG='T'


\po_il2il
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola IL2IL
::----------------------------------------------------------------------------------------------------------------------
exec('set_efld_opt','jm');
1


\pr_ord
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed redakcją pola ORD
::----------------------------------------------------------------------------------------------------------------------
MJM.JMG='T'


\act_mjm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: aktualizuje dane w przelicznikach na podstawie drugiej jednostki ewidencyjnej
::   WE: _a - ref M
::       _b - jednostka miary
::       _c - współczynnik przeliczenia
::       _d - poprzednia jednostka ewidencyjna
::----------------------------------------------------------------------------------------------------------------------
MJM.cntx_psh();
_refdom:=null();
_tryb:=0;
{? _d<>null() & _b<>_d
|| MJM.index('JM');
   MJM.prefix(_a,_d);
   {? MJM.first()
   || MJM.JMG:='N';
      MJM.put(1);
      _tryb+=1
   ?}
?};
MJM.index('JM');
MJM.prefix(_a,_b);
{? MJM.first()
|| MJM.JMG:='T';
   MJM.PRZ:=_c;
   {? MJM.put(1) || _refdom:=MJM.ref() ?};
   _tryb+=2
|? _b<>null()
|| MJM.blank();
   MJM.M:=_a;
   MJM.JM:=_b;
   MJM.JP:=MJM.M().J;
   MJM.PRZ:=_c;
   MJM.DOKL:=3;
   MJM.JMG:='T';
   {? MJM.add(1) || _refdom:=MJM.ref() ?};
   _tryb+=2
?};
{? _tryb>0 || exec('dom_jm','jm',_refdom) ?};
MJM.cntx_pop()


\pr_mjm_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed dołączeniem przelicznika
::----------------------------------------------------------------------------------------------------------------------
MJM.JMG:='N';
MJM.win_edit('RED');
_em:={? BEER.MJM().J2<>null() | BEER.MJM().RODZ='U' || 'enable=0' || 'enable=1' ?};
MJM.efld_opt('RED',_em,,'MOB');
MJM.efld_opt('RED',_em,,'MOD');
1


\po_mjm_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: po dołączeniu przelicznika
::----------------------------------------------------------------------------------------------------------------------
_mod:=MJM.MOD;
_ref:=MJM.ref();
{? _mod='T'
|| MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(BEER.MJM);
   {? MJM.first() & MJM.find_tab('first','MOD',,'=','T')
   || {!
      |? {? MJM.ref<>_ref
         || MJM.MOD:='N';
            MJM.put(1)
         ?};
         MJM.find_tab('next','MOD',,'=','T')
      !}
   ?};
   MJM.cntx_pop()
?};
1


\pr_mjm_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed modyfikacją przelicznika
::----------------------------------------------------------------------------------------------------------------------
{? MJM.JMG='T' || MJM.win_edit('RED2') || MJM.win_edit('RED') ?};
exec('set_efld_opt','jm');
1


\po_mjm_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: po modyfikacji przelicznika
::----------------------------------------------------------------------------------------------------------------------
_mod:=MJM.MOD;
_ref:=MJM.ref();
{? MJM.JMG='T'
|| exec('FindAndGet','#table',M,MJM.M,,"J2:=MJM.JM;WS2:=MJM.PRZ;put(1)",1)
|? MJM.M().J2=MJM.JM
|| exec('FindAndGet','#table',M,MJM.M,,"J2:=null();WS2:=0;put(1)",1)
?};
{? _mod='T'
|| MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(BEER.MJM);
   {? MJM.first() & MJM.find_tab('first','MOD',,'=','T')
   || {!
      |? {? MJM.ref<>_ref
         || MJM.MOD:='N';
            MJM.put(1)
         ?};
         MJM.find_tab('next','MOD',,'=','T')
      !}
   ?};
   MJM.cntx_pop()
?};
1


\pr_jmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed modyfikacją przelicznika
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
{? MJM.JMG='T' || _res:=exec('FindAndGet','#table',M,MJM.M,,"(count()-1)<=1",1) ?};
_res


\po_jmg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: po modyfikacji przelicznika
::----------------------------------------------------------------------------------------------------------------------
exec('set_efld_opt','jm');
1


\pr_jsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przed modyfikacją przelicznika
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? MJM.JMG='T' || _res:=exec('FindAndGet','#table',M,MJM.M,,"(count()-1)<=1",1) ?};
_res


\po_jsp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: po modyfikacji przelicznika
::----------------------------------------------------------------------------------------------------------------------
1


\oblJMG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: uniwersalna formuła do obliczenia ilości
::   WE: _a - tabela
::       _b - aktualne pole
::       [_c] - 1-przychód 0-rozchód -1-bez znaczenia
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')=type_of(SYSLOG) || _a || return(0) ?};
_fld:={? var_pres('_b')=type_of('') || _b || return(0) ?};
_rodz:={? var_pres('_c')=type_of(0) || _c || -1 ?};

{? (';WS2;IL2;IL;ILR;ILZ;'*(_fld+';'))>1
|| _kor:=_tab=FAP & FAP.FAKS().T().KOR='T';
   _jmz:=_tab=FAP & _tab.FAKS().JMZ;
   {| _tab
   |! _dokl_s:=exec('jaka_dok_mjm','jm',M,J2,M().J);
      _dokl_m:=exec('jaka_dok_m','jm',M);
      {? _dokl_s<0 || _dokl_s:=_dokl_m ?};
      {? _fld='IL' & ~_rodz
      || _war:=exec('oblF2IL','jm',M);
         IL:=IL $ _dokl_m;
         _il2:={? WS2=0 || 0 || IL/WS2 ?}$ (_dokl_s+1);
         roundmet(BEER.MDOKL);
         {? IL2=0 | (_il2<>IL2 & (_kor | _jmz | FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@)))
         || IL2:=_il2
         ?};
         roundmet(5);
         WS2:={? IL2>0 & IL>0 || IL/IL2 || 0 ?}
      |? _fld='ILZ' & ~_rodz
      || ILZ:=ILZ $ _dokl_m;
         _il2:={? WS2=0 || 0 || ILZ/WS2 ?}$ (_dokl_s+1);
         roundmet(BEER.MDOKL);
         {? IL2=0 | (_il2<>IL2 & (_kor | _jmz | FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@)))
         || IL2:=_il2
         ?};
         roundmet(5);
         WS2:={? IL2>0 & ILZ>0 || ILZ/IL2 || 0 ?}
      |? _fld='ILR' & ~_rodz
      || ILR:=ILR $ _dokl_m;
         _il2:={? WS2=0 || 0 || ILR/WS2 ?}$ (_dokl_s+1);
         roundmet(BEER.MDOKL);
         {? IL2=0 | (_il2<>IL2 & FUN.ask('Przeliczyć ilość w drugiej jednostce ewidencyjnej?'@))
         || IL2:=_il2
         ?};
         roundmet(5);
         WS2:={? IL2>0 & ILR>0 || ILR/IL2 || 0 ?}
      |? _fld='IL' | _fld='WS2'
      || _war:=exec('oblF2IL','jm',M);
         roundmet(BEER.MDOKL);
         _il2:={? WS2>0 || {? _jmz || IL*WS2 ||IL/WS2 ?} || 0 ?}$_dokl_s;
         _ws2:={? IL2>0 || IL/IL2 || 0 ?}$_dokl_s;
         {? IL2>0 & (_war=-2 | (_war>0 & _war=IL))
         || 0
         |? IL2=0
          | _ws2<>WS2
          | (_il2<>IL2 & FUN.ask('Czy zmienić ilość w %1?'@[M().J2().KOD]))
         || IL2:=_il2
         ?}
      |? _fld='IL2'
      || _war:=exec('oblF2IL','jm',M);
         IL2:=IL2 $ _dokl_s;
         roundmet(BEER.MDOKL);
         {? _war=-1
         || {? ~_rodz
            || _il:=IL2*{? WS2=0 || 1 || WS2 ?}$ _dokl_m;
               roundmet(5);
               {? IL=0 | (_il<>IL & FUN.ask('Przeliczyć ilość w jednostce podstawowej?'@))
               || IL:=_il
               ?};
               WS2:={? IL2>0 & IL>0 || IL/IL2 || 0 ?}
            || roundmet(5);
               _il:={? WS2>0 || IL2*WS2 || 0 ?}$_dokl_m;
               {? IL=0
                | (_il<>IL & FUN.ask('Czy zmienić ilość w %1?'@[M().J().KOD]))
               || IL:=_il
               ?}
            ?}
         |? _war>0
         || IL:=_war;
            WS2:={? IL2>0 & IL>0 || IL/IL2 || 0 ?}$_dokl_s
         |? _war=-2
         || WS2:={? IL2>0 & IL>0 || IL/IL2 || 0 ?}$_dokl_s
         ?}
      ?}
   |}
?};
~~


\set_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: wygaszenie zapalenie pól dal MJM
::----------------------------------------------------------------------------------------------------------------------
_en:={? MJM.JMG='N' || 'enable=0' || 'enable=1' ?};
_em:={? MJM.M().J2<>null() | MJM.M().RODZ='U' || 'enable=0' || 'enable=1' ?};
MJM.efld_opt('RED2',_en,,'JSP');
MJM.efld_opt('RED2',_en,,'FWSP');
MJM.efld_opt('RED2',_en,,'IL2IL');
MJM.efld_opt('RED2',{? MJM.IL2IL='I' || _en || 'enable=0' ?},,'F2IL');
MJM.efld_opt('RED2',_en,,'ORD');
MJM.efld_opt('RED',_em,,'MOB');
MJM.efld_opt('RED',_em,,'MOD');
~~


\ordIL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: ustala kolejność wprowadzania
::   WE: _a - wskazanie na M
::       _b - 1-przychód, 0-rozchód
::   WY: ustawia znacznik kolejności 0-odwrócona 1-normalna
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_j2:=exec('FindAndGet','#table',M,_a,,"J2",null());
{? _j2<>null()
|| _ord:=exec('FindInSet','#table','MJM','JM',_j2,_a,"@.MJM.ORD",'N');
   {? _ord='P' & _b=1 || _res:=0
   |? _ord='R' & _b=0 || _res:=0
   |? _ord='A'        || _res:=0
   ?}
?};
_res


\oblWSP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: zwraca współczynnik przeliczenia dla jednostki ewidencyjnej
::   WE: _a - wskazanie na M
::   WY: współczynnik
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_j2:=exec('FindAndGet','#table',M,_a,,"J2",null());
{? _j2<>null()
|| MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(_a,_j2);
   {? MJM.first()
   || _res:=MJM.PRZ;
      {? MJM.FWSP<>null()
      || _war:=($MJM.FWSP().FORMULA)();
         {? var_pres('_war')=type_of(0) & _war>0 || _res:=_war ?}
      ?}
   ?};
   MJM.cntx_pop()
?};
_res


\oblF2IL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: przeliczenie jednostki podstawowej
::   WE: _a - wskazanie na M
::   WY: -2-nie przeliczaj -1-standardowe przeliczenie, jakaś wartość większa od zera wartość pola IL
::----------------------------------------------------------------------------------------------------------------------
_res:=-1;
_j2:=exec('FindAndGet','#table',M,_a,,"J2",null());
{? _j2<>null()
|| MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(_a,_j2);
   {? MJM.first()
   || _res:=MJM.PRZ;
      {? MJM.IL2IL='T'
      || _res:=-1
      |? MJM.IL2IL='N'
      || _res:=-2
      |? MJM.IL2IL='I' & MJM.F2IL<>null()
      || _war:=($MJM.F2IL().FORMULA)();
         {? var_pres('_war')=type_of(0) & _war>0 || _res:=_war ?}
      ?}
   ?};
   MJM.cntx_pop()
?};
_res


\dom_jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: ustawia znacznik domyślny dla przelicznika
::   WE: [_a] - wskazanie na pozycje do ustawienia jednostki domyślnej
::----------------------------------------------------------------------------------------------------------------------
 _ustaw:=0;
_refdom:={? var_pres('_a')=type_of(null()) || _ustaw:=1; _a || null() ?};

{? ~_ustaw & MJM.DOM
|| FUN.info('To domyślny przelicznik dla indeksu %1.\nNie ma co zmieniać.'@[MJM.M().KTM])
|? _ustaw | FUN.ask('Czy ustawić przelicznik jako domyślny dla indeksu %1?'@[MJM.M().KTM])
|| _mat:=MJM.M;
   _ref:={? _ustaw || _refdom || MJM.ref() ?};
   MJM.cntx_psh();
   MJM.index('JM');
   MJM.prefix(_mat);
   {? MJM.first()
   || {!
      |? MJM.DOM:={? MJM.ref()=_ref || 1 || 0 ?};
         MJM.put(1);
         MJM.next()
      !}
   ?};
   MJM.cntx_pop();
   MJM.get()
?};
~~


\czyJS
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.14]
:: OPIS: sprawdza, która jednostka jest jednostką sprzedaży
::   WE: _a - materiał
::       [_b] - jednostka miary sprzedaży domyślnie null
::   WY: 1-standardowa obsługa 0-jednostka podstawowa
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_js:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_j2:=exec('FindAndGet','#table',M,_a,,"J2",null());
{? _js<>null() & exec('FindAndGet','#table',M,_a,,"J",null())=_js
|| _res:=0
|? _j2<>null()
|| _res:=exec('FindInSet','#table','MJM','JM',_j2,_a,"@.MJM.JSP='T'",,,0)
?};
_res


\pr_pop_jm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: przed Popraw dla standardowej jednostki miary
::----------------------------------------------------------------------------------------------------------------------
BEER.JMDOKL:=JM.DOKL;
{? JM.DOKL=-1 || JM.DOKL:=0 ?};
1


\jmwym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: nadanie domyślnej jednostki miary dla wymiarów szerokość, długość, wysokość, grubość
::----------------------------------------------------------------------------------------------------------------------
_jm:=JM.ref();
_kod:=JM.KOD;
JM.cntx_psh();
_mb:=exec('FindInSet','#table','JM','KOD','mb',,,1,,null());
{? _mb=null()
|| FUN.info('Brak w kartotece jednostek miary [mb].\nNiemożliwe ustawienie jednostki miary dla wymiarów.'@)
|| _oki:=_kod='mb'
       | exec('FindInSet','#table','MJM','JM',_mb,null(),,,_jm,null())<>null()
       | exec('FindInSet','#table','MJM','JP',_mb,null(),,,_jm,null())<>null();
   {? ~_oki
   || FUN.info('Brak w kartotece przeliczników przeliczenia jednostki [%1] na [mb].'
               '\nNiemożliwe ustawienie jednostki miary dla wymiarów.'@[_kod])
   |? FUN.ask('Czy ustawić jednostkę [%1] jako jednostkę dla wymiarów w kartotece materiałowej.'@[_kod])
   || JM.prefix();
      {? JM.first()
      || {!
         |? JM.JMWYM:=JM.ref()=_jm;
            JM.put(1);
            JM.next()
         !}
      ?}
   ?}
?};
JM.cntx_pop();
~~


\ustawJMwym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [22.26]
:: OPIS: ustawia domyślną jednostkę miary
::----------------------------------------------------------------------------------------------------------------------
VAR.JMWYM:='mb';
VAR.JMPRZ:=1;
VAR.JMDOKL:=3;
_jm:=null();
_kod:='';
_mb:=exec('FindInSet','#table','JM','KOD','mb',,,1,,null());
JM.cntx_psh();
JM.index('KOD');
JM.prefix();
{? JM.first() & JM.find_tab('first','JMWYM',,'=',1) || _jm:=JM.ref(); _kod:=JM.KOD ?};
JM.cntx_pop();
{? _kod<>''
|| VAR.JMWYM:=_kod;
   VAR.JMPRZ:={? _kod='mb'
              || 1
              |? (_prz:=exec('FindInSet','#table','MJM','JM',_mb,null(),"@.MJM.PRZ",,_jm,0); _prz>0)
              || _prz
              |? (_prz:=exec('FindInSet','#table','MJM','JP',_mb,null(),"@.MJM.PRZ",,_jm,0); _prz>0)
              || 1/_prz
              || 1
              ?};
   {? VAR.JMWYM<>'' & (_dokl:=exec('FindInSet','#table','JM','KOD',VAR.JMWYM,,"@.JM.DOKL",1,,-1); _dokl>=0)
   || VAR.JMDOKL:=_dokl
   ?}
?};
~~

:Sign Version 2.0 jowisz:1045 2023/09/20 09:33:55 5f14a777f9b1e5f46cb1feefa405d159b0cd99929b65956f4b64ac592711208217127a2b848c7838e27066f2b5bcaaf91d1bfdeb261fa43c8a3b58fd8a890fbb7b203fd11243a40da45f2aeb8b2deeef9c7f934387e0a081fa1554bca8eae4fef4381edc8c2d95a9bbd9e9785578b1b8d1ce9dae11fe67121b1914eb9318de77
