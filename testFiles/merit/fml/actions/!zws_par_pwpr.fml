:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_pwpr.fml
:: Utworzony: 15.09.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności ZWS_PAR_PWPR - Wybór współpracownika.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wybór współpracownika - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP
::# permissions=F_ZATR,UD_SKL

:: Parametr wejściowy ON_ESC określa sposób działania akcji wyboru współpracownika przy braku wyboru.
:: Parametr może przyjmować wartości:
::    DONE     - Czynność zostanie zakończona, a parametry wyjściowe przyjmą wartości puste [DOMYŚLNIE].
::    KEEP     - Czynność zostanie odłożona na listę zadań aby użytkownik mógł do niej wrócić. Oznacza to, że czynności
::               nie da się zakończyć bez wyboru współpracownika.
::    CANCEL   - Jeśli czynność jest pierwszą w procesie to po zakończeniu formuły głównej instancja czynności zostanie
::               usunięta. Jeśli czynność jest kolejną w procesie to otrzyma status oczekująca i pozostanie na liście
::               zadań - czyli tak jak dla KEEP.
::    ERROR    - Czynność jest kończona a proces zatrzymywany z ustawioną flagą błędu.
::# kind=WE, symbol=ON_ESC, type=STRING, name=Sposób działania przy rezygnacji (DONE*/KEEP/CANCEL/ERROR), required=N, fml_val="exec('on_esc','#bi_stat',{? _a=~~ || 'DONE' || _a ?})"
::
:: Parametr wejściowy DOMAIN określa kod dziedziny, dla której będą określane uprawnienia do jednostek organizacyjnych.
::# kind=WE, symbol=DOMAIN, type=STRING, name=Kod dziedziny produktowej, required=T, fml_val="exec('wybierz','#b_domain',_a).SYMBOL"

:: Parametr wejściowy UD_SCH pozwala wskazać symbol schematu (typu PODZORG), zgodnie z którym będą prezentowane
:: jednostki organizacyjne. Jeżeli parametr nie zostanie przekazany (ustawiony), to wybrany zostanie schemat domyślny
:: lub (jeżeli domyślny nie został określony) pierwszy (w kolejności alfabetycznej).
::# kind=WE, symbol=UD_SCH, type=STRING, name=Akronim schematu, required=N, fml_val="exec('ud_sch_wybierz','schemat',,_a).SYMBOL"
::
:: Parametr wejściowy UD_SKL pozwala wskazać jednostkę organizacyjną, do której będzie ograniczony widok struktury.
:: Domyślnie przyjęta będzie jednostka ustawiona w parametrach sesji.
::# kind=WE, symbol=UD_SKL, type=STRING, name=Jednostka organizacyjna, required=N, fml_val="exec('ud_skl_wybierz','schemat',,,1,_a)"
::
:: Parametr wejściowy F_ZATR określa, formy współpracy dostępne w czynności. Parametr zawiera listę kodów oddzielonych
:: przecinkami. Możliwe jest użycie kodów specjalnych, których znaczenie jest następujące:
::    '*T'  - wszystkie docelowe formy współpracy;
::    '*N'  - wszystkie tymczasowe formy;
::    '*'   - wszystkie formy współpracy.
:: Domyślnie przyjmuje wartość ustawioną w parametrach sesji, przy czym "wszystkie" oznacza '*T'.
::# kind=WE, symbol=F_ZATR, type=STRING, name=Dostępne formy współpracy, required=N, fml_val="exec('wybierz','f_zatr',_a,1,'**')"
::
:: Parametr wejściowy VIEW określa status dostępnych w czynności współpracowników:
::    'T' - Zatrudnieni / aktywni
::    'N' - Zwolnieni / archiwalni
::    'W' - Wszyscy
:: Domyślnie przyjmuje wartość ustawioną w parametrach sesji.
::# kind=WE, symbol=VIEW, type=STRING, name=Status prezentowanych współpracowników, required=N, fml_val="exec('view_val','pracownik',_a)"
::
:: Parametr wejściowy SQL_FROM umożliwia zbudowanie dodatkowych relacji na potrzeby dodatkowego warunku
:: (patrz SQL_WHERE).
:: Domyślnie przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_FROM, type=STRING, name=Dodatkowe relacje filtra, required=N
::
:: Parametr wejściowy SQL_WHERE umożliwia dodatkowe ograniczenie listy współpracowników. Warunek może odwoływać się
:: do tabeli pracowników (poprzez alias "P" np. "P".ID>1000) oraz
:: do tabeli osób (poprzez alias "1OSOBA" np. "1OSOBA".PLEC='K').
:: Odwołania do innych tabel wymagają odpowiedniego użycia parametru SQL_FROM.
:: Domyślnie SQL_WHERE przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_WHERE, type=STRING, name=Dodatkowy warunek filtra, required=N
::
:: Parametr wejściowy FML_TEST umożliwia dodatkową weryfikację poprawności wyboru współpracownika. Jest treścią
:: formuły w formacie napisu. Jeżeli formuła zwróci wartość 0 to wybór TEGO współpracownika nie będzie możliwy.
:: Domyślnie przyjmuje wartość '1'.
::# kind=WE, symbol=FML_TEST, type=STRING, name=Formuła weryfikująca wybór, required=N
::
:: Parametr wejściowy HDR_SEL określa tytuł okna wertowania, w którym będą prezentowani współpracownicy do wyboru.
:: Domyślnie przyjmuje wartość 'Współpracownicy'.
::# kind=WE, symbol=HDR_SEL, type=STRING, name=Tytuł okna wertowania, required=N
::
:: Parametr wejściowy WIELU określa, czy możliwy jest wybór wielu pracowników.
::# kind=WE, symbol=WIELU, type=NUMBER, name=Wybór wielu pracowników: [0*/1], required=N, fml_val="_ret:=exec('edit_boolean','#edit',{? type_of(_a)=type_of(0) & _a || 'T' || 'N' ?},'Wielu pracowników?'); {? _ret='T' || 1 |? _ret='N' || 0 || _a ?}"
::
:: Parametr wejściowy POMIN_KOLUMNY określa, które pola mają zostać pominięte podczas definiowania okna wertowania
:: wyboru pracownika.
::# kind=WE, symbol=POMIN_KOLUMNY, type=STRING, name=Pola ukrywane w oknie wertowania, required=N, fml_val="exec('pomin_kolumny','!zws_par_pwpr',{? _a=~~ || '' || _a ?})"
::
:: Parametr wejściowy P_FLD_ATTR określa, czy do okna wertowania będzie można dodawać kolumny z tabeli P.
::# kind=WE, symbol=P_FLD_ATTR, type=STRING, name=Dodawanie kolumn z tabeli P w oknie wertowania: [T/N*], required=N, fml_val="exec('edit_boolean','#edit',{? _a=~~ || 'N' || _a ?},'Dodawanie kolumn z tabeli P')"
::
:: Parametr wejściowy OSOBA_FLD_ATTR określa, czy do okna wertowania będzie można dodawać kolumny z tabeli OSOBA.
:: Parametr ma znaczenie tylko jeżeli P_FLD_ATTR='T'.
::# kind=WE, symbol=OSOBA_FLD_ATTR, type=STRING, name=Dodawanie kolumn z tabeli OSOBA w oknie wertowania: [T/N*], required=N, fml_val="exec('edit_boolean','#edit',{? _a=~~ || 'N' || _a ?},'Dodawanie kolumn z tabeli OSOBA')"
::
:: Parametr wejściowy WYSWIETL określa, czy w oknie wertowania będzie dostępn akcja "Wyświetl"  (prezentująca okno
:: redagowania). Parametr ma znaczenie, jeżeli żadna kolumna nie jest ukryta (POMIN_KOLUMNY='') a do okna wertowania
:: będzie można dodawać kolumny zarówno z tabeli P (P_FLD_ATTR='T') jak i tabeli OSOBA (OSOBA_FLD_ATTR='T').
::# kind=WE, symbol=WYSWIETL, type=STRING, name=Dostępna akcja "Wyświetl" [T/N*], required=N, fml_val="exec('edit_boolean','#edit',{? _a=~~ || 'N' || _a ?},'Dostępna akcja \'Wyświetl\'')"
::
:: Parametr wejściowy XFILTER określa, czy w oknie wertowania będzie dostępny rozszerzony filtr.
::# kind=WE, symbol=XFILTER, type=NUMBER, name=Dostępność rozszerzonego filtra: [0/1*], required=N, fml_val="_ret:=exec('edit_boolean','#edit',{? type_of(_a)=type_of(0) & _a || 'T' || 'N' ?},'Dostępny rozszerzony filtr'); {? _ret='T' || 1 |? _ret='N' || 0 || _a ?}"

::# kind=WY, symbol=P, type=_P, name=Wskazanie pracownika, required=N
::# kind=WY, symbol=OSOBA, type=_OSOBA, name=Wskazanie osoby, required=N
::# kind=WY, symbol=F_ZATR_REF, type=_F_ZATR, name=Wskazanie formy współpracy, required=N
::# kind=WY, symbol=F_ZATR_KOD, type=STRING, name=Kod formy współpracy, required=N

_par:=params_get();
_mp:=_par.mp;

exec('__F_ZATR','object');
exec('__RUB','object');

{? _mp.pathProc() | _mp.pathTodo()
|| _in:=_par.in;
   {? _in.WIELU=~~
   || _in.WIELU:=0
   ?};
   {? _in.XFILTER=~~
   || _in.XFILTER:=1
   ?};
   _out:=_par.out;

:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
   _mp.save(exec('kind_out','#b_port'),'LOOP','N');

:: Ustalenie / odzyskanie klucza grupującego.
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

   {? ~_mp.loop()
::    Pierwszy obrót pętli - przygotujmy dane.
::    Usuwamy wszystkie dotychczasowe klucze, które mogły zostać zapamiętane przy poprzednim uruchomieniu czynności
::    (zakończonej _mp.keep()).
   || _mp.grpkeyDelAll();

      _args:=exec('wybierz_args','pracownik');
::     Weryfikacja poprawności argumentów wywołania
      {? (_err:=exec('wybierz_check_in','pracownik',_in,_args))<>''
      || _mp.error(_err);
         FUN.emsg(_err);
         return()
      ?};

::    Wybór współpracownika(-ów).
      _wyb:=exec('wybierz','pracownik',_args);
      {? _wyb.STATUS='' & _wyb.P.first()
      || {!
         |? _mp.grpkeyAdd(_wyb.P.UID);
            _wyb.P.next()
         !}

::       Wybór nie zakończył się sukcesem - co mówi parametr ON_ESC?
      || {? _in.ON_ESC='KEEP'
         || _mp.keep()

         |? _in.ON_ESC='CANCEL'
         || _mp.cancel()

         |? _in.ON_ESC='ERROR'
         || _mp.error('ON_ESC=ERROR')

         || _mp.save(,_out);
            _mp.done()
         ?};
         return()
      ?}

::   |? _in.GRPKEY=~~
::    Już wiemy, że nie jest to pierwszy obrót pętli, a okazuje się, że parametr wejściowy GRPKEY nie został przekazany.
::   || _mp.error('Nieprawidłowa budowa procesu.');
::      return()
   ?};

:: Jeżeli coś było nie tak (z parametrami wejściowymi, z wyborem), to zostało obsłużone powyżej.
:: Tutaj jesteśmy już na etapie obsługi pętli.

   P.cntx_psh();
   P.prefix();
   do();
   _uidref:=_mp.grpkeyGet();
   {? _uidref<>~~
   || {? P.seek(_uidref)
      || _out.P:=P.ref();
         _out.OSOBA:=P.OSOBA;
         _out.F_ZATR_REF:=P.F_ZATR;
         _out.F_ZATR_KOD:=exec('dest','f_zatr',P.F_ZATR,'KOD');
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};
   _mp.done();
   end();
   P.cntx_pop()
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wybór współpracownika - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Wybierz współpracownika'@@


\pomin_kolumny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła pozwala wskazać pola (akronimy), które będą pominięte podczas budowania okna wertowania.
::       Formuła wykorzystywana jako argument atrybutu 'fml_val' parametru czynności.
::   WE: [_a] [STRING] - Aktualna lista akronimów pól ukrywanych w oknie wertowania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:={? var_pres('_a')=type_of('') || form(_a) || '' ?};

_TAB:=tab_tmp(1,
   'LP','INTEGER','Lp.'@,
   'TAB','STRING[8]','Akronim tabeli',
   'FLD','STRING[8]','Akronim pola',
   'NAME','STRING[60]','Kolumna'@,
   'HELP','STRING[60]','Podpowiedź',
   'STATE','STRING[1]','Pomijać'@
);
_ndx:=obj_new('LP','FLD');
_ndx.LP:=_TAB.index('?');
_ndx.FLD:=_TAB.ndx_tmp(,,'FLD',,);

_add:=
   "  _TAB:=_a;
      _tab:=_b;
      _fld:=_c;

      _lp:=_TAB.size()+1;
      _TAB.blank();
      _TAB.LP:=_lp;
      _TAB.TAB:=_tab;
      _TAB.FLD:=_fld;
      _TAB.NAME:=MS.name(_tab,_fld);
      _TAB.HELP:=MS.comment(_tab,_fld);
      _TAB.STATE:='N';
      _TAB.add()
   ";

_add(_TAB,'P','T');
_add(_TAB,'P','IP');
_add(_TAB,'OSOBA','PESEL');
_add(_TAB,'P','F_ZATR');
_add(_TAB,'P','WYDZIAL');
_add(_TAB,'P','CP');
_add(_TAB,'P','ST');
_add(_TAB,'P','ZA');

{? _in<>''
|| _kol:=spli_str(','+_in+',',',');
   _TAB.index(_ndx.FLD);
   {! _lp:=1 .. obj_len(_kol)
   |! _fld:=form(_kol[_lp]);
      {? _fld<>'' & _TAB.find_key(_fld)
      || _TAB.STATE:='T';
         _TAB.put()
      ?}
   !};
   _TAB.index(_ndx.LP)
?};

_dh:=_TAB.size()+2;
{? _dh<5
|| _dh:=5
|? _dh>30
|| _dh:=30
?};
_ws:=_TAB.mk_sel('Pola ukrywane w oknie wertowania'@,,,,,,_dh,,'U');
_TAB.win_fld(_ws,,'NAME',,,,,,,,'Kolumna'@);
_TAB.win_fld(_ws,,'STATE',,,-3,,,,,'Pomijać [T/N]'@,2,,"'T'","'N'");
_TAB.win_act(_ws,,'Formuła','Akceptuj'@@,,'Akceptuje wybór'@,"sel_exit()",,,,,,'A');
_TAB.win_act(_ws,,'Formuła','&Pomiń'@@,,'Pomija bieżącą kolumnę przy budowaniu okna wertowania'@,
   "_TAB:=cur_tab(1,1); _TAB.STATE:='T'; _TAB.put()",,,1,,,'P');
_TAB.win_act(_ws,,'Formuła','P&okaż'@@,,'Pokazuje bieżącą kolumnę'@,
   "_TAB:=cur_tab(1,1); _TAB.STATE:='N'; _TAB.put()",,,1,,,'O');
_TAB.win_act(_ws,,'Szukaj');
_TAB.win_act(_ws,,'Kolejność');
_TAB.win_act(_ws,,'Rekord',,,,
   "  _TAB:=cur_tab(1,1);
      _we:=_TAB.win_sel('?');
      {? _TAB.sel_size()
      || _ag:='';
         _da:=':'
      |? _TAB.STATE='T'
      || _ag:='P'; _da:='O'
      || _ag:='O'; _da:='P'
      ?};
      _TAB.actions_grayed(_we,_ag);
      _TAB.actions(_we,,_da,1);
      echo(_TAB.HELP)
   ");
_TAB.win_btn(_ws,'text='+'&Pomiń'@,'menu:P');
_TAB.win_btn(_ws,'text='+'P&okaż'@,'menu:O');
_TAB.win_btn(_ws,'text='+'Akceptuj'@+',icon=xwin16.png:13,panel=bottom','menu:A');
_TAB.win_sel(_ws);
_TAB.win_edit(_TAB.mk_edit(,1));
{? _TAB.select()
|| _TAB.index(_ndx.LP);
   _ret:=',';
   {? _TAB.first()
   || {!
      |? {? _TAB.STATE='T'
         || _ret+=_TAB.FLD+','
         ?};
         _TAB.next()
      !}
   ?};
   {? _ret=','
   || ''
   || _ret
   ?}
|| _in
?}

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 095c3de212bc78c16c7ec2bc117df7d6d7687370d568e28fb587f744b1c9497aec407a98bd09c6cf70eed7ef311465e3c5d0d3e4a924d45a1d5756366fd6e2affa1ba56afcfdde77ce2b8b5944ade70496f8046800a1b0105ab36fef6dcfed9a578aaffaa49c0cc0e782175d4a95d115f7142af974873800b4f67d6f3f5620a2
