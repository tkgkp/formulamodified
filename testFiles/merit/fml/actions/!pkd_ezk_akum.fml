:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_akum.fml
:: Utworzony: 21.09.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_AKUM - Kończące się umowy.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: DG [22.26]
:: OPIS: Kończące się umowy - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP,SERVICE
::# permissions=F_ZATR,UD_SKL
::
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::
:: Czynność zbiera informacje o umowach o pracę kończących się w okresie określonym parametrami wejściowymi OD i DO.
:: Dla czynności serwisowej wymagana jest co najmniej data OD.
:: Jeżeli data DO ma wartość 0/0/0, to uwzględnione będą wszystkie umowy, kończące się po dacie OD.
::# kind=WE, symbol=OD, type=DATE, name=Data początkowa badanego okresu, required=N
::# kind=WE, symbol=DO, type=DATE, name=Data końcowa badanego okresu, required=N
::
:: Parametr wejściowy UD_SCH pozwala wskazać symbol schematu (typu PODZORG), który posłuży do ustalenia jednostki
:: organizacyjnej, przekazanej parametrem UD_SKL. Jeżeli parametr nie zostanie przekazany (ustawiony), to wybrany
:: zostanie schemat domyślny lub (jeżeli domyślny nie został określony) pierwszy (w kolejności alfabetycznej).
::# kind=WE, symbol=UD_SCH, type=STRING, name=Schemat organizacyjny, required=N, fml_val="exec('ud_sch_wybierz','schemat',,_a).SYMBOL"
::
:: Parametr wejściowy UD_SKL pozwala wskazać jednostkę organizacyjną, do której będzie ograniczony zakres przetwarzania.
:: Domyślnie przetwarzane będą wszystkie jednostki organizacyjne.
::# kind=WE, symbol=UD_SKL, type=STRING, name=Jednostka organizacyjna, required=N, fml_val="exec('ud_skl_wybierz','schemat',,,1,_a)"
::
:: Parametr wejściowy SQL_FROM umożliwia zbudowanie dodatkowych relacji na potrzeby dodatkowego warunku
:: (patrz SQL_WHERE).
:: Domyślnie przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_FROM, type=STRING, name=Dodatkowe relacje filtra, required=N
::
:: Parametr wejściowy SQL_WHERE umożliwia dodatkowe ograniczenie listy współpracowników. Warunek może odwoływać się
:: do tabeli pracowników (poprzez alias "P" np. "P".ID>1000) oraz
:: do tabeli osób (poprzez alias "1OSOBA" np. "1OSOBA".PLEC='K').
:: Odwołania do innych tabel wymagają odpowiedniego użycia parametru SQL_FROM.
:: Domyślnie SQL_WHERE przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_WHERE, type=STRING, name=Dodatkowy warunek filtra, required=N
::
:: Parametr wejściowy FML_TEST umożliwia dodatkową weryfikację wyboru współpracownika do przetwarzania. Jest treścią
:: formuły w formacie napisu. Jeżeli formuła zwróci wartość 0 to dany współpracownik nie będzie przetwarzany.
:: Formuła jest wykonywana przy ustawionych buforach tabel: H, P, OSOBA.
:: Domyślnie przyjmuje wartość '1'.
::# kind=WE, symbol=FML_TEST, type=STRING, name=Dodatkowy warunek wyboru, required=N
::
:: Parametr wejściowy ODB umożliwia określenie odbiorców wygenerowanych wiadomości. Należy wybrać jedną grupę
:: odbiorców (P-przełożeni, K-dział kadr). Domyślnie przyjmuje wartość K (dział kadr).
::# kind=WE, symbol=ODB, type=STRING, name=Odbiorcy wiadomości, required=N
::
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
::
:: Wynik działania czynności. Parametr szczególnie istotny w przypadku uruchomienia czynności usługowej.
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności (OK,BŁĄD)", required=N
::
::# kind=WY, symbol=OD, type=DATE, name=Data początkowa badanego okresu, required=N
::# kind=WY, symbol=DO, type=DATE, name=Data końcowa badanego okresu, required=N
::
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=RCV, type=MEMO, name=Lista odbiorców, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::
:: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_service:=_mp.isService();

{? _mp.pathProc() | _mp.pathTodo() | _mp.pathArea()
||
:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
   _mp.save(exec('kind_out','#b_port'),'LOOP','N');

:: Ustalenie / odzyskanie klucza grupującego.
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

   {? ~_mp.loop()
::    Pierwszy obrót pętli - przygotujmy dane.
::    Usuwamy wszystkie dotychczasowe klucze, które mogły zostać zapamiętane przy poprzednim uruchomieniu czynności
::    (zakończonej _mp.keep()).
   || _mp.grpkeyDelAll();

::    Sprawdzenie parametrów wejściowych:
      {? (_result:=exec('check_in','!pkd_ezk_akum'))=''
      || _out.RESULT:='OK';
         {? ~exec('prepare','!pkd_ezk_akum',_in,_mp)
::       Jeśli nie znaleziono pracowników spełniających kryteria, zakończ czynność:
         || _out.RCV:=_out.BODYH:=_out.SUB:='';
            _mp.save(,_out);
            _mp.done();
            return()
         ?}
      || {? ~_service
         || FUN.emsg(_result);
            _mp.cancel()
         || _mp.error(_result)
         ?};
         _out.RESULT:='BŁĄD';
         return()
      ?}
   ?};
:: Jeżeli coś było nie tak (z parametrami wejściowymi, z wyborem), to zostało obsłużone powyżej.
:: Tutaj jesteśmy już na etapie obsługi pętli.

   do();
:: Podczytanie kluczowych wartości z GRPKEY:
   _grpPars:=json_par(_mp.grpkeyGet());
   _grpPars.OD:=#_grpPars.OD;
   _grpPars.DO:=#_grpPars.DO;
   _mail:=_grpPars.MAIL;

   {? _mail<>~~
   || _ret:=exec('run','!pkd_ezk_akum',_grpPars,_mail);
      _out.RCV:=_ret.RCV;
      _out.BODYH:=_ret.BODYH;
      _out.SUB:=_ret.SUB;
      _mp.save(,_out);

      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};

   _mp.done();
   end()
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Kończące się umowy - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_d0:=date(0,0,0);
:: warunek na dopisanie jednostki organizacyjnej
_addUdSklInfo:=_in.UD_SKL<>~~ & _in.UD_SKL<>'';
:: warunek na dopisanie [*]
_addInfo:=(_in.SQL_FROM<>~~ & _in.SQL_FROM<>'') | (_in.SQL_WHERE<>~~ & _in.SQL_WHERE<>'')
   | (_in.FML_TEST<>~~ & _in.FML_TEST<>'');

{? _in.OD<>~~ & _in.OD<>_d0
|| {? _in.DO=_d0 | _in.DO=~~
   || {? _addUdSklInfo
      || {? _addInfo
         || 'Umowy o pracę kończące się %1 i później %2 [*]'@@[_in.OD$1,_in.UD_SKL]
         || 'Umowy o pracę kończące się %1 i później %2'@@[_in.OD$1,_in.UD_SKL]
         ?}
      || {? _addInfo
         || 'Umowy o pracę kończące się %1 i później [*]'@@[_in.OD$1]
         || 'Umowy o pracę kończące się %1 i później'@@[_in.OD$1]
         ?}
      ?}
   |? _in.OD=_in.DO
   || {? _addUdSklInfo
      || {? _addInfo
         || 'Umowy o pracę kończące się %1 %2 [*]'@@[_in.OD$1,_in.UD_SKL]
         || 'Umowy o pracę kończące się %1 %2'@@[_in.OD$1,_in.UD_SKL]
         ?}
      || {? _addInfo
         || 'Umowy o pracę kończące się %1 [*]'@@[_in.OD$1]
         || 'Umowy o pracę kończące się %1'@@[_in.OD$1]
         ?}
      ?}
   || {? _addUdSklInfo
      || {? _addInfo
         || 'Umowy o pracę kończące się w okresie od %1 do %2 %3 [*]'@@
               [_in.OD$1,_in.DO$1,_in.UD_SKL]
         || 'Umowy o pracę kończące się w okresie od %1 do %2 %3'@@
               [_in.OD$1,_in.DO$1,_in.UD_SKL]
         ?}
      || {? _addInfo
         || 'Umowy o pracę kończące się w okresie od %1 do %2 [*]'@@[_in.OD$1,_in.DO$1]
         || 'Umowy o pracę kończące się w okresie od %1 do %2'@@[_in.OD$1,_in.DO$1]
         ?}
      ?}
   ?}
|| 'Umowy o pracę kończące się'@@
?}


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdzająca poprawność parametrów pobieranych od użytkownika
::       (w przypadku czynności nie będącej serwisową).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_PAR:=cur_tab(1,1);

{? (_chk:=__CHK.record(_PAR,,'OD'))<>''
|| return(_chk)
?};

{? _PAR.DO<>date(0,0,0) & _PAR.DO<_PAR.OD
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(_PAR,'DO'),MS.name(_PAR,'OD')]);
   return('DO')
?};

''


\check_in
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Weryfikacja poprawności parametrów wejściowych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_service:=_mp.isService();

_d0:=date(0,0,0);

:: Unifikacja typów parametrów wejściowych.
{? _in.OD=~~
|| _in.OD:=_d0
?};
{? _in.DO=~~
|| _in.DO:=_d0
?};
{? _in.UD_SCH=~~ | _in.UD_SCH=''
|| _in.UD_SCH:=exec('domyslny','schemat','PODZORG',1).SYMBOL
?};
{? _in.UD_SKL=~~
|| _in.UD_SKL:=''
?};
{? _in.SQL_FROM=~~
|| _in.SQL_FROM:=''
?};
{? _in.SQL_WHERE=~~
|| _in.SQL_WHERE:=''
?};
{? _in.FML_TEST=~~
|| _in.FML_TEST:=''
?};
{? _in.ODB=~~
|| _in.ODB:='K'
?};

{? _service
:: Czynność uruchomiona w trybie serwisowym. Nieprawidłowe parametry wejściowe uniemożliwiają uruchomienie czynności.
|| {? _in.OD=_d0
   || return('Nieprawidłowa wartość parametru wejściowego %1.' ['OD'])
   ?};
   {? _in.DO<>_d0 & _in.DO<_in.OD
   || return('Parametr wejściowy %1 [%2] mniejszy niż parametr wejściowy %3 [%4].' ['DO',$_in.DO,'OD',$_in.OD])
   ?}

:: Czynność nie uruchomiona w trybie serwisowym. Nieprawidłowe parametry wejściowe mogą zostać skorygowane.
|? _in.OD=_d0 | (_in.DO<>_d0 & _in.DO<_in.OD)
|| _PAR:=tab_tmp(,
      'OD','DATE','Data początkowa'@,
      'DO','DATE','Data końcowa'@,
      'UD_SCH','STRING[8]','Schemat',
      'UD_SKL','STRING[16]','Jednostka organizacyjna'
   );

   _PAR.fld_fml('UD_SCH','F3',"exec('ud_sch_wybierz','schemat','PODZORG',fld()).SYMBOL");
   _PAR.fld_fml('UD_SCH','BEFORE_EDIT',"cur_tab(1,1).UD_SKL=''");
   _PAR.fld_fml('UD_SCH','AFTER_EDIT',
      "  _fld:=fld();
         cur_tab(1,1).efld_opt(cur_win(1,1),'enable=%1' [$(_fld<>'')],,'UD_SKL');
         _fld='' | exec('szukaj_ud_sch','schemat','PODZORG',_fld)<>null()
      "
   );
   _PAR.fld_fml('UD_SKL','F3',"exec('ud_def_symbol_f3','schemat','PODZORG',cur_tab(1,1).UD_SCH,'PKD',2)");
   _PAR.fld_fml('UD_SKL','BEFORE_EDIT',"cur_tab(1,1).UD_SCH<>''");
   _PAR.fld_fml('UD_SKL','AFTER_EDIT',"fld()='' | exec('ud_skl_symbol_ae','schemat','PODZORG','PKD',2)<>null()");

   _we:=_PAR.mk_edit('Kończące się umowy o pracę');
   _PAR.win_esep(_we,'Badany okres');
   _PAR.win_efld(_we,,'OD',,,,,,,,'Data początkowa badanego okresu'@);
   _PAR.win_efld(_we,,'DO',,,,,,,,'Data końcowa badanego okresu'@);
   _PAR.win_esep(_we,'Struktura');
   _PAR.win_efld(_we,,'UD_SCH',,,16,,,,,'Schemat'@,,'F3_button=1');
   _PAR.win_efld(_we,,'UD_SKL',,,16,,,,,'Symbol jednostki organizacyjnej'@,,'F3_button=1');
   exec('ok_esc','#window',_PAR,_we);
   _PAR.win_edit(_we);

   _PAR.efld_opt(_we,'mark=1',,'OD');

   _PAR.blank();
   _PAR.DO:=_in.DO;
   _PAR.UD_SCH:=_in.UD_SCH;
   _PAR.UD_SKL:=_in.UD_SKL;

   {? _PAR.edit("exec('valid','!pkd_ezk_akum')")
   || _in.OD:=_PAR.OD;
      _in.DO:=_PAR.DO;
      _in.UD_SCH:=_PAR.UD_SCH;
      _in.UD_SKL:=_PAR.UD_SKL
   || return('Rezygnacja z redagowania parametrów.')
   ?}

?};

''


\prepare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Pierwsze uruchomienie czynności (pierwszy obrót pętli) - przygotowanie danych
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [OBJ] - objekt menedżera procesów (mp)
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_mp:=_b;
_service:=_mp.isService();
_mode:=_in.ODB;
_result:=1;

:: Pobranie listy emaili specjalistów ds. kadr lub przełożonych (w zależności od _mode)
_contract:=exec('get_data','!pkd_ezk_akum',_in,_mp,'E');

_par:=obj_new('MAIL','OD','DO','UD_SKL','UD_SCH','SQL_FROM','SQL_WHERE','FML_TEST','ODB');
{? _contract.COUNT & _contract.DATA.first()
|| {!
   |? _par.MAIL:=_contract.DATA.EMAIL;
      _par.OD:=#_in.OD;
      _par.DO:=#_in.DO;
      _par.UD_SKL:=_in.UD_SKL;
      _par.UD_SCH:=_in.UD_SCH;
      _par.SQL_FROM:=_in.SQL_FROM;
      _par.SQL_WHERE:=_in.SQL_WHERE;
      _par.FML_TEST:=_in.FML_TEST;
      _par.ODB:=_in.ODB;
      _mp.grpkeyAdd(json_obj(_par));
      _contract.DATA.next()
   !}

:: Jeśli nie znaleziono danych to trzeba zakończyć działanie czynności:
|| _result:=0
?};
obj_del(_par);

:: Informacja o przygotowniu danych
{? ~_service
|| FUN.info(
      'Kończące się umowy o pracę'@+'\n\n'+
      'Analiza danych zakończona.'@+'\n'+
      'Liczba zapisów spełniających kryteria: %1.'@ [$_contract.COUNT]
   )
?};

_result


\get_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Pobranie danych z systemu
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [OBJ] - objekt menedżera procesów (mp)
::       [_c] [STRING] - rodzaj zwracanej wartości (U - Umowy pracowników/E - Email przełożonych, domyślnie U)
::   WY: _result - tabela z danymi zawierającymi (U - umowy pracowników, E - emaile przełożonych)
::----------------------------------------------------------------------------------------------------------------------
_resultType:={? var_pres('_c')=type_of('') & 'UE'*_c || _c || 'U' ?};
_in:=_a;
_mp:=_b;
_service:=_mp.isService();
_mode:=_in.ODB;

_result:=obj_new('DATA','COUNT');
_result.COUNT:=0;

{? _resultType='U'
|| _result.DATA:=tab_tmp(3,
      'EMAIL','STRING['+$MS.fld_len(USERS,'EMAIL')+']','Email'@,
      'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']','Nazwisko',
      'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']','Imię',
      'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']','PESEL',
      'T','STRING['+$MS.fld_len(P,'T')+']','Nr teczki',
      'OD','DATE','Data od umowy',
      'DO','DATE','Data do umowy',
      'O','STRING['+$MS.fld_len(RU,'O')+']','Rodzaj umowy',
      'ST','STRING['+$MS.fld_len(STN,'ST')+']','Stanowisko',
      'WYDZIAL','STRING['+$MS.fld_len(UD_SKL,'SYMBOL')+']','Jednostka organizacyjna'
   );
   _addDATA:="
      _TAB:=_a;_OSOBA:=_b;_P:=_c;_H:=_d;_email:=_e;
      _TAB.EMAIL:=_email;
      _TAB.NAZWISKO:=_OSOBA.NAZWISKO;
      _TAB.PIERWSZE:=_OSOBA.PIERWSZE;
      _TAB.PESEL:=_OSOBA.PESEL;
      _TAB.T:=_P.T;
      _TAB.OD:=_H.UMOWA().OD;
      _TAB.DO:=_H.DO;
      _TAB.O:=_H.RU().O;
      _TAB.ST:=_H.ST().ST;
      _TAB.WYDZIAL:=_H.WYDZIAL().SYMBOL;
      _TAB.add()
   "
|| _result.DATA:=tab_tmp(,
      'EMAIL','STRING['+$MS.fld_len(USERS,'EMAIL')+']','Email'@
   )
?};

:: Dla specjalistów ds. kadr wystarczy zebrać emaile użytkowników posiadających uprawnienia do czynności
{? _mode='K'
|| {? _resultType='E'
   || _addr:=spli_str(exec('emls_w_perm','personel_alerty',_mp.buf_act.UID),';');
      {! _ii:=1..obj_len(_addr)
      |! _result.DATA.EMAIL:=_addr[_ii];
         _result.DATA.add()
      !}
   ?}
?};

P.cntx_psh();
P.clear();

_ud_sch:=exec('szukaj_ud_sch','schemat','PODZORG',_in.UD_SCH);
_ud_def:=
   {? _in.UD_SKL=''
   || exec('ud_def_firma','schemat','PODZORG')
   || exec('szukaj_ud_def','schemat',_ud_sch,exec('szukaj_ud_skl','schemat','PODZORG',_in.UD_SKL))
   ?};

{? _service
|| P.f_set(
::    SORT
      'OSOBA(NAZWISKO),OSOBA(PIERWSZE),OSOBA(PESEL)',
::     FROM
      'left join F_ZATR using("P".F_ZATR,F_ZATR.REFERENCE)'+
      {? _in.SQL_FROM<> '' || ' '+_in.SQL_FROM || '' ?},
::    WHERE
      'P.FIRMA=\''+$exec('ref_firma','ustawienia')+'\''+
      ' and F_ZATR.KOD=\'P\''+
      {? _in.UD_SKL<>''
      || ' and P.WYDZIAL in '
            '('
               'select UD_DEF.UD_SKL '
               'from UD_DEF '
               'where UD_DEF.UD_SCH=\''+$_ud_sch+'\' and UD_DEF.SCIEZKA like \''+_ud_def.SCIEZKA+'%\''
            ')'
      || ''
      ?}+
      {? _in.SQL_WHERE<>'' || ' and ('+_in.SQL_WHERE+')' || '' ?}
   )
|| exec('filtruj_p','schemat','PKD',_ud_def.REF,'P','','W',_in.SQL_FROM,_in.SQL_WHERE)
?};

{? P.f_first()
|| _war:=$(
      {? _in.DO=date(0,0,0)
      || '_a<=H.DO'
      || '_a<=H.DO & H.DO<=_b'
      ?}+
      {? _in.FML_TEST=''
      || ''
      || ' & ('+_in.FML_TEST+')'
      ?}
   );
   OSOBA.cntx_psh();
   OSOBA.prefix();
   RU.cntx_psh();
   RU.prefix();
   STN.cntx_psh();
   STN.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();
   H_UM.cntx_psh();
   H_UM.use('h_um');
   H_UM.prefix();
   H.cntx_psh();
   H.use('_hist');
   H.index('_HISTKOD');
   USERS.cntx_psh();
   USERS.index('OSOBA');
   {!
   |? H.prefix(P.ref(),'Z',);
      P.OSOBA();
      {? H.last() & H.RU().K<>'C' & _war(_in.OD,_in.DO)
      || _result.COUNT+=1;
::       Przetwarzamoe danych dla kadr (dotychczasowe stosowane rozwiązanie)
         {? _mode='K'
         || {? _resultType='U'
            || _addDATA(_result.DATA,OSOBA,P,H,'')
            ?}

::       Przetwarzanie danych dla przełożonych (rozwiązanie wykorzystywane dla asystenta)
         |? _mode='P'
         || _superiors:=exec('show_kier','stanprac',P.ref,,,,,,1);
            {? _superiors.first()
            || {!
               |? _level:=_superiors.L;
                  USERS.prefix(_superiors.OSOBA);
                  {? USERS.first()
                  || {? USERS.EMAIL<>''
                     || {? _resultType='U'
                        || _addDATA(_result.DATA,OSOBA,P,H,USERS.EMAIL)
                        || {? ~_result.DATA.find_key(USERS.EMAIL)
                           || _result.DATA.EMAIL:=USERS.EMAIL;
                              _result.DATA.add()
                           ?}
                        ?}
                     ?}
                  ?};
                  _superiors.next() & _superiors.L=_level
               !}
            ?};
            obj_del(_superiors)
         ?}
      ?};
      P.f_next()
   !};
   USERS.cntx_pop();
   H.cntx_pop();
   H_UM.cntx_pop();
   UD_SKL.cntx_pop();
   STN.cntx_pop();
   RU.cntx_pop();
   OSOBA.cntx_pop()
?};

P.cntx_pop();

_result


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: DG [22.26]
:: OPIS: Formuła odpowiedzialna za przygotownie danych do wysyłanego powiadomienia.
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [STRING] - obiekt zawierający email
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
params_set(_par:=params_get());
_mp:=_par.mp;
:_in:=_par.in;
:_out:=_par.out;

:: Pobranie listy pracowników z kończącymi się umowami
_TAB:=exec('get_data','!pkd_ezk_akum',_in,_mp).DATA;

_ret:=obj_new('RCV','BODYH','SUB');
_ret.RCV:=_ret.BODYH:=_ret.SUB:='';

:: Przypisanie przychodzącego adresu e-mail:
_ret.RCV:=_b;
{? _ret.RCV='' || return(_ret) ?};
_ret.SUB:='Kończące się umowy o pracę'@;

_TAB.prefix({? _in.ODB='P' || _ret.RCV || '' ?});
{? _TAB.first()
|| _th:="'<th [[STYLE_TABLE_TH]]>'+_a+'</th>'";
   _td:="'<td [[STYLE_TABLE_TD]]>'+_a+'</td>'";

   _ret.BODYH:=
      '<h3>'+
      {? _in.DO=date(0,0,0)
      || 'Pracownicy, którym umowy o pracę kończą się po %1 r.'@ [_in.OD$6]
      |? _in.OD=_in.DO
      || 'Pracownicy, którym umowy o pracę kończą się %1 r.'@ [_in.OD$6]
      || 'Pracownicy, którym umowy o pracę kończą się w okresie od %1 r. do %2 r.'@ [_in.OD$6,_in.DO$6]
      ?}+
      '</h3>\n'

      '<table [[STYLE_TABLE]]>\n'
      '<tr [[STYLE_TABLE_TR]]>'+
         _th('Lp.'@)+
         _th('Nazwisko'@)+
         _th('Imię'@)+
         _th('PESEL'@)+
         _th('Nr teczki'@)+
         _th('Data od'@)+
         _th('Data do'@)+
         _th('Rodzaj umowy'@)+
         _th('Stanowisko'@)+
         _th('Jednostka organizacyjna'@)+
      '</tr>\n';

   _lp:=0;
   {!
   |? _lp+=1;
      _ret.BODYH+=
         '<tr [[STYLE_TABLE_TR]]>'+
            _td($_lp)+
            _td(_TAB.NAZWISKO)+
            _td(_TAB.PIERWSZE)+
            _td(_TAB.PESEL)+
            _td(_TAB.T)+
            _td(_TAB.OD$1)+
            _td(_TAB.DO$1)+
            _td(_TAB.O)+
            _td(_TAB.ST)+
            _td(_TAB.WYDZIAL)+
         '</tr>\n';
      _TAB.next()
   !};

   _ret.BODYH+=
      '</table>\n'
      '<p>'+'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'@+'</p>'

?};

_ret


:Sign Version 2.0 jowisz:1045 2023/12/15 08:06:55 20a4b62455e8c70feda57a51634d83ac8b1cc1631c0dd8d39746f22e636979b129437b7e666489d66e98dc8eaf1f810722c6f857f6a22ee72603f569ac2b81014732e7428940143fe27b3b55920744ab02555440de807469de117200645dbd1f0b1a95780dbbad77769cc67bbac52b220ed55e844100ad3b31e6e10fa2ca7a15
