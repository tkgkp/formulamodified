:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !hbn_prz_dppk.fml
:: Utworzony: 25.09.2019
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności HBN_PRZ_DPPK - Utw. przelewu dla wpłat PPK
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Utw. przelewu dla wpłat PPK - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE, symbol=RU,     type=NUMBER, name=Rok ubezpieczeniowy, required=T, keyref=T
::# kind=WE, symbol=MU,     type=NUMBER, name=Miesiąc ubezpieczeniowy, required=T, keyref=T
::
::# kind=WEW, symbol=P_ZLEC, type=DATE,   name=Data zlecenia, required=N
::# kind=WEW, symbol=P_DATA, type=DATE,   name=Data przelewu, required=N
::
::# kind=WEW, symbol=DONE, type=NUMBER, name=Koniec działania, required=N
::
::# kind=WY, symbol=PB, type=_PB, name=Wskazanie polecenia przelewu, required=N

::# permissions=F_ZATR,UD_SKL,HRB,HRP,FJKS

_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_result:='';
{? _in.RU<1900 | _in.MU<1 | _in.MU>12
|| _result:=exec('error','!hbn_prz_dppk')

|| _id:='_%1/%2/%3'[$_in.RU,$_in.MU,'PPK'];
   _mp.keyRef(_id,0,0);
   {? exec('init','!hbn_prz_dppk')
   || _value:=0;
      {? _mp.isMicro() | _ib.DONE=1
      || _value:=exec('send','!hbn_prz_dppk')
      ?};
      {? type_of(_value)=type_of(0)
      || {? _mp.isMicro()
         || _mp.cancel()
         |? _ib.DONE
         || _mp.done()
         || _mp.keep()
         ?}
      |? type_of(_value)=type_of('')
      || _result:=_value
      ?}
   || {? _mp.isMicro()
      || _mp.cancel()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_data:=date(_in.RU,_in.MU,0);
{? _data<>date(0,0,0)
|| 'Przelew do instytucji finansowej za %1'@@[_data$8]
|| 'Przelew do instytucji finansowej'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Zwraca treść komunikatu błędu.
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Utworzenie przelewu do instytucji finansowej niemożliwe.'@


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Przywróć zapamiętane wartości parametrów raportu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('no_limit','schemat','PPL')
|| return(0)
?};

_par:=params_get();
params_set(_par);
_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

: sprawdzenie, czy w miesiącu ubezpieczeniowym istnieją otwarte listy płac rozliczające wynagrodzenie
_O:=sql(
   'select count(*) as TEST '
   'from O '
   'join F_ZATR using (O.F_ZATR,F_ZATR.REFERENCE) '
   'where O.FIRMA=:_a and O.Z=\'N\' and O.RU=:_b and O.MU=:_c and F_ZATR.KOD in (\'P\',\'Z\')',
   exec('ref_firma','ustawienia'),_in.RU,_in.MU
);
{? type_of(_O)=type_of(SYSLOG) & _O.first() & _O.TEST>0
|| {? ~FUN.ask(
         'Znaleziono otwarte listy płac za %1.\n'
         'Czy kontynuować działanie?'@
         [date(_in.RU,_in.MU,1)$8]
      )
   || return(0)
   ?}
?};

{? ~exec('rachunki_banki','rachunki',exec('desc','!hbn_prz_dppk'))
|| return(0)
?};

exec('czytaj','#stalesys',date(_in.RU,_in.MU,0),KST);
exec('czytaj','#stalesys',,KST_PAR);

_tmp:=tab_tmp(1,
   'P_ZLEC','DATE','Data zlecenia'@,
   'P_DATA','DATE','Data przelewu'@
);

_wnd:=_tmp.mk_edit('Przelew wpłat',0);
_tmp.win_esep(_wnd,'Dane podstawowe');
_tmp.win_efld(_wnd,,'P_ZLEC',,,10);
_tmp.win_efld(_wnd,,'P_DATA',,,10);
_tmp.efld_opt(_wnd,'mark=1',,'P_ZLEC');
_tmp.efld_opt(_wnd,'mark=1',,'P_DATA');
_btn:=_tmp.win_ebtn(_wnd,'text=%1'['Zakończ przelew'@],"
   params_get().int.DONE:=1; 'key:F2'
");
_tmp.btn_eopt(_wnd,_btn,
    'state=%1'[{? _mp.isMicro() || 'grayed' || 'normal' ?}]+',tooltip='+exec('help_red_zakoncz','#window','H'));
_btn:=_tmp.win_ebtn(_wnd,'text=%1'['Zapi&sz'@],"
   params_get().int.DONE:=0; 'key:F2'
");
_tmp.btn_eopt(_wnd,_btn,'tooltip='+exec('help_red_ok','#window','Z'));
_btnan:=_tmp.win_ebtn(_wnd,'text=%1'['Anuluj'@],"'key:Esc'");
_tmp.btn_eopt(_wnd,_btnan,'tooltip='+exec('help_red_esc','#window','A'));
_tmp.win_edit(_wnd);

_data:=date();

{? type_of(_ib.P_ZLEC)=type_of(_tmp.P_ZLEC)
|| _tmp.P_ZLEC:=_ib.P_ZLEC
|| _tmp.P_ZLEC:=_data
?};
{? type_of(_ib.P_DATA)=type_of(_tmp.P_DATA)
|| _tmp.P_DATA:=_ib.P_DATA
|| _tmp.P_DATA:=_data
?};

_ib.DONE:=0;

{? ~_tmp.edit("__CHK.record(cur_tab(),,'P_ZLEC','P_DATA')")
|| return(0)
?};

_ib.P_ZLEC:=_tmp.P_ZLEC;
_ib.P_DATA:=_tmp.P_DATA;

_mp.save(_ib,_rv);
1


\send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.42]
:: OPIS: Przelew do instytucji finansowej.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_kw:=0;
_dt:=date(_in.RU,_in.MU,0);
_mc:=_dt$8;

:: ustal umowę właściwą na koniec miesiąca
{? (_umo:=exec('init','ppk_umo',_dt))=null
|| FUN.info('Brak umowy o prowadzenie PPK.\nNie można utworzyć przelwu.'@);
   _rv.PB:=null;
   _mp.save(,_rv);
   return()
?};
:: lista osób, dla których pobrano kwoty
_OSOBA:=tab_tmp(1,'REF','INTEGER','Osoba');
:: pobierz kwotę do przelewu z raportów
_mask:=$exec('ref_firma','ustawienia')+1;
PPK_RAP.cntx_psh();
PPK_RAP.use('ppk_rap'+_mask);
PPK_RAP.prefix();
PPK_RAP.f_clear();
PPK_RAP.f_set(,
   'join PPK_RTP using (PPK_RAP.PPK_RTP,PPK_RTP.REFERENCE) '
   'join PPK_RPL using (PPK_RTP.PPK_RPL,PPK_RPL.REFERENCE)',
   'PPK_RPL.PPK_UMO=:_a and PPK_RPL.R=:_b and PPK_RPL.M=:_c and PPK_RAP.PPK_XEL=:_d',
   _umo,_in.RU,_in.MU,exec('szukaj','ppk_xel','SKLADKA')
);
{? PPK_RAP.f_first()
|| PPK_RTP.cntx_psh();
   PPK_RDA.cntx_psh();
   PPK_RDA.use('ppk_rda'+_mask);
   PPK_RDA.index('MAIN');
   _pod_ucz:=exec('szukaj','ppk_xel','UCZ_WAR_POD');
   _dod_ucz:=exec('szukaj','ppk_xel','UCZ_WAR_DOD');
   _pod_fir:=exec('szukaj','ppk_xel','FIR_WAR_POD');
   _dod_fir:=exec('szukaj','ppk_xel','FIR_WAR_DOD');
   _loop:=1;
   {!
   |? _loop
   |! _test:=0;
      PPK_RDA.prefix(PPK_RAP.PPK_RTP().PPK_RPL,PPK_RAP.PPK_RDA);
      {? PPK_RDA.find_key(_pod_ucz) || _kw+=#PPK_RDA.WARTOSC; _test:=1 ?};
      {? PPK_RDA.find_key(_dod_ucz) || _kw+=#PPK_RDA.WARTOSC; _test:=1 ?};
      {? PPK_RDA.find_key(_pod_fir) || _kw+=#PPK_RDA.WARTOSC; _test:=1 ?};
      {? PPK_RDA.find_key(_dod_fir) || _kw+=#PPK_RDA.WARTOSC; _test:=1 ?};
      {? _test & ~_OSOBA.find_key(#PPK_RAP.OSOBA)
      || _OSOBA.REF:=#PPK_RAP.OSOBA;
         _OSOBA.add()
      ?};
      _loop:=PPK_RAP.f_next()
   !};
   PPK_RDA.cntx_pop();
   PPK_RTP.cntx_pop()
?};
PPK_RAP.f_clear();
PPK_RAP.cntx_pop();

{? _kw<=0
|| FUN.info(
      'Brak kwoty do wykazania na przelewie\n'
      '(zerowe kwoty na raporcie lub brak raportu: Wpłaty uczestnika i zatrudniającego, do instytucji finansowej).'@
   )
?};

_kid:='PPK %1'[_mc];
_pb:=exec('get_pb_by_id','hbn',_kid);
{? _pb.ACTION='none'
:  przelew zablokowany
|| exec('cant_gen','hbn');
   _rv.PB:=null;
   _mp.save(,_rv)

|| PB.cntx_psh();
   PB.use('pbxxxx');
   PB.index('PBKO');
   PB.prefix();
   {? _pb.ACTION='put'
   || PB.seek(_pb.REF)
   || PB.blank()
   ?};
   exec('ustaw_pb','rachunki','F');
   PB.NR:=0;                     'numer w paczce';
   PB.NBD:=SKID_RBK.BANK;        'bank i numer rachunku dłużnika';
   PB.RD:=gsub(ROZNE.KONBAN,' ','');

:: dane wierzyciela
   KST_PPK.cntx_psh();
   PPK_UMO.cntx_psh();
   PPK_UZA.cntx_psh();
   ADRES.cntx_psh();
   KST_PPK.PPK_UMO:=_umo;
   KST_PPK.PPK_UMO().PPK_UZA().ADRES();
   PB.W:=ADRES.NAZWA;            'nazwa wierzyciela';
   PB.NBW:=ADRES.BANK;           'bank wierzyciela';
   'numer rachunku wierzyciela';
   PB.RW:=gsub(ADRES.KONTO,' ','');
   PB.KP:=ADRES.KOD_POCZ;        'kod pocztowy';
   PB.M:=ADRES.MIASTO;           'miasto';
   PB.UL:=ADRES.ULICA;           'ulica';
   ADRES.cntx_pop();
   PPK_UZA.cntx_pop();
   PPK_UMO.cntx_pop();
   KST_PPK.cntx_pop();
   {? PB.NBW=null | PB.RW=''
   || FUN.emsg(
         'Utworzenie danych do przelewu wpłat PPK nie jest możliwe.\n'
         'Brak informacji "%1".'[MS.name(PB,{? PB.NBW=null || 'NBW' || 'RW' ?})]
      );
      PB.cntx_pop();
      obj_del(_OSOBA);
      return()
   ?};

   PB.DZ:=_ib.P_ZLEC;            'data zlecenia';
   PB.DP:=_ib.P_DATA;            'data przelewu';
   _tytWt:=Plugin.run('PPK_PRZ_PB_TYT',_dt~1,_dt~2,_kw);
   PB.TYT:={? +_tytWt || _tytWt || 'Wpłaty na PPK za %1'[_mc] ?};
   PB.KW:=_kw;                   'kwota';
   PB.KD:='PPL: PPK';            'Kod HB';
   PB.PR:='N';                   'Przekazany?';
   PB.KID:=_kid;
   PB.WAL:=KST_PAR.NAROD;
   PB.RODZ:='K';
   _rv.PB:=null;
   {? _pb.ACTION='put'
   || {? PB.KW<>0
      || {? PB.put()
         || _rv.PB:=PB.ref()
         ?}
      || PB.del()
      ?}
   || {? PB.KW<>0 & PB.add()
      || _rv.PB:=PB.ref()
      ?}
   ?};
   {? _rv.PB<>null
   || PPK_POD.cntx_psh();
      PPK_POD.prefix();
::    uwzględniaj tylko przychody:
::    - z bieżącej firmy,
::    - za raportowany rok i miesiąc
::    - podlegające opodatkowaniu
::    - nierozliczone jeszcze na listach płac lub nie przekazane
      PPK_POD.f_set(,
         'join P using (PPK_POD.P,P.REFERENCE)',
         'P.FIRMA=:_a and PPK_POD.WYL_R=:_b and PPK_POD.WYL_M=:_c and '
         'PPK_POD.POD_LICZ=\'T\' and (PPK_POD.POD_O is null or PPK_POD.PRZ_WYK<>\'T\')',
         exec('ref_firma','ustawienia'),_in.RU,_in.MU
      );
      _loop:=PPK_POD.f_first();
      {!
      |? _loop
      |! {? _OSOBA.find_key(#PPK_POD.OSOBA)
::          przychód od wpłat osoby uwzględnionej w przelewie
         || _mod:=0;
            {? PPK_POD.PRZ_WYK<>'T'
::             nieprzekazane wpłaty
            || PPK_POD.PRZ_WYK:='T';
               _mod+=1
            ?};
            {? PPK_POD.POD_LT='' & PPK_POD.PRZ_DATA<>PB.DP
::             różne daty jeszcze nierozliczonego przelewu
            || PPK_POD.PRZ_DATA:=PB.DP;
               _mod+=1
            ?};
            {? _mod<>0
::             aktualizuj
            || PPK_POD.put()
            ?}
         ?};
         _loop:=PPK_POD.f_next()
      !};
      PPK_POD.f_clear();
      PPK_POD.cntx_pop();
      FUN.info('Przygotowano dane do przelewu wpłat na PPK za %1.\nKwota przelewu: %2'@[_mc,$PB.KW])
   || FUN.emsg('Przygotowanie danych do przelewu wpłat na PPK za %1 nie powiodło się.'@[_mc])
   ?};
   _mp.save(,_rv);
   PB.cntx_pop()
?};
obj_del(_OSOBA);
1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:37 d0f991c535e2f4c200a657f20c34738d99cdac1d71389a909c9fe79158844a2bd75ee7d1f4244570042120a2b8a8cf9c49b33333610474279fd185c3a9650189397bb8095d96ff82e203626cece177ee4a823923089abbe99e64e17fdc8301cd378d1ac2c679239079f274ed3f20b86494a49ae2e01bead9e74b748d5f0e9e1a
