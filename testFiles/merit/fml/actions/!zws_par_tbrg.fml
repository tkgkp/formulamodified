:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_tbrg.fml
:: Utworzony: 10.10.2016
:: Autor: TS
::======================================================================================================================
:: Zawartosc: Formuły czynności ZWS_PAR_TBRG - Zasoby produkcyjne
::            Obsługa tabel: ZLBR, ZLBS
::            Formuły użyte w innych czynnościach i bibliotekach znajdują się w pliku zasoby.fml
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności parametryzacyjnej (nieprocesowej) - brygady
::  OLD: \zlbr_sel/zl_akord.fml
::  TAG: <CZYNNOŚĆ><LISTA>
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL

exec('__KAL','object');

ST.WYD:=__PARSES.getVal('WydzialProd').REF_UD_SKL;

Cntx.psh(ZLBR,ZLBS,R_WZCZ);

P.clear();
P.f_clear();
_grp:=exec('zlbr_win_grp','zasoby');
ZLBR.win_sel(_grp);
ZLBR.select();
P.f_clear();
VAR_DEL.delete('__wer');
Cntx.pop(ZLBR,ZLBS,R_WZCZ);
~~


\kalczesc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Formula przed redakcja/wyswietlaniem pola kalendarz dla brygady
::   WY: 0 / 1
::  OLD: \kalczesc/zl_akor1.fml
::----------------------------------------------------------------------------------------------------------------------
ZLBR.KAL().CZESC<>'T'


\por_zlgb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [2006]
:: OPIS: Kontrola poprawnosci kalendarzy po redakcji pola kalendarz na naglowku brygady.
::   WY: 0 / 1
::  OLD: \por_zlgb/zl_akor1.fml
::----------------------------------------------------------------------------------------------------------------------
{? menu_txt()='Popraw'
|| _tab:=sql('
      select
         ZLBR.KOD
      from ZLBR join ZLBS using(ZLBR.REFERENCE, ZLBS.BR) join P using(ZLBS.P, P.REFERENCE)
      where ZLBR.REFERENCE='':_a'' and P.KAL<>'':_b''',$ZLBR.ref(),$fld());
   {? _tab.first()
   || FUN.ask('Do brygady przypisani są pracownicy z innym kalendarzem.\nCzy kontynuować?'@)
   || 1
   ?}
|| 1
?}


\menu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Obsluga akcji menu okienek tabel ZLBR, ZLBS
::   WE: _a - 1 przed akcja, 0 - po akcji
::       _b - 1 dla grupy rekordów, [0] - pojedynczy rekord
::  OLD: \menu/skid_prr.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
_akc:=-menu_txt();
_grp:={? var_pres('_b')=type_of(0) || _b || 0 ?};

{? _tab=ZLBR
:  =============================
:  B R Y G A D Y   R O B O C Z E
:  =============================
|| P.f_clear();
   {? _akc='dołącz'
   || {? _a
      || _tab.blank();
         _tab.edit("exec('chk_rec','!zws_par_tbrg',ZLBR,null())")
      || {? _tab.add(0)
         || exec('zlb_dost','zasoby')
         || FUN.emsg('Dołączenie zapisu nie powiodło się.'@)
         ?}
      ?}

   |? _akc='popraw'
   || {? _a
      || _tab.get();
         _tab.edit("exec('chk_rec','!zws_par_tbrg',ZLBR)")
      || {? _tab.put(1)
         || exec('zlb_dost','zasoby')
         || FUN.emsg('Poprawienie zapisu nie powiodło się.'@)
         ?}
      ?}

   |? _akc='usuń'
   || {? _a
      || PROJZAS.cntx_psh();
         PROJZAS.index('ZLBR');
         PROJZAS.prefix(_tab.ref());
         {? PROJZAS.first()
         || FUN.info('Brygada jest zasobem i nie można jej usunąć.'@);
            _wy:=0
         |? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
         || _wy:=FUN.ask('Czy na pewno usunąć bieżący zapis?'@);
            exec('blk_unlock','#table','ZLBR',ZLBR.ref())
         || _wy:=0
         ?};
         PROJZAS.cntx_pop();
         _wy
      || _zlbs:=ZLBS.names();
         do();
         ZLBS.cntx_psh();
         {? _zlbs.first()
         || {!
            |? ZLBS.use(_zlbs.NAME);
               ZLBS.index('BODIP');
               ZLBS.prefix(_tab.ref());
               {? ZLBS.first()
               || {! |? ZLBS.del() !}
               ?};
               _zlbs.next()
            !}
         ?};
         ZLBS.cntx_pop();
         exec('usun_all','kaledit',_tab);
         PROJDOST.cntx_psh();
         PROJDOST.index('ZRODLOZ');
         PROJDOST.prefix($_tab.ref(),$_tab.ref());
         {? PROJDOST.first()
         || {! |? PROJDOST.del() !}
         ?};
         PROJDOST.cntx_pop();
         {? ~_tab.del(1,1)
         || undo()
         ?};
         end()
      ?}

   |? _akc='kopiuj'
   || ZLBR.DYNAMIC:='N';
      {? _a
      || __ZLBS:=tab_tmp(,'P','INTEGER',);
         {? _tab.edit("exec('chk_rec','!zws_par_tbrg',ZLBR,null)")
         || ZLBS.cntx_psh();
            ZLBS.index('BPOD');
            ZLBS.prefix(ZLBR.ref());
            {? ZLBS.first
            || {!
               |? {? ~__ZLBS.find_key(ZLBS.P)
                  || __ZLBS.P:=ZLBS.P;
                     __ZLBS.add()
                  ?};
                  ZLBS.next()
               !}
            ?};
            ZLBS.cntx_pop();
            1
         || obj_del(__ZLBS);
            &__ZLBS;
            0
         ?}
      || {? ZLBR.add(1)
         || {? __ZLBS.first()
            || P.cntx_psh();
               P.clear();
               ZLBS.cntx_psh();
               ZLBS.clear();
               ZLBS.blank(1);
               ZLBS.BR:=ZLBR.ref();
               {!
               |? {? P.seek(__ZLBS.P,) &
                     (ZLBR.DO=date(0,0,0) | P.DZA<=ZLBR.DO) &
                     (P.DZ=date(0,0,0) | ZLBR.OD<=P.DZ)
                  || ZLBS.P:=P.ref();
                     ZLBS.OD:=
                        {? P.DZA<ZLBR.OD
                        || ZLBR.OD
                        || P.DZA
                        ?};
                     ZLBS.DO:=
                        {? P.DZ=date(0,0,0) | ZLBR.DO<P.DZ
                        || ZLBR.DO
                        || P.DZ
                        ?};
                     ZLBS.add(1)
                  || _msg:='Okres zatrudnienia pracownika %1 (%2) '
                           'nie pozwala na przypisanie go do brygady w okresie %3.'@
                           [P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE,$P.DZA+' ÷ '+$P.DZ,$ZLBR.OD+' ÷ '+$ZLBR.DO];
                     FUN.emsg(_msg)
                  ?};
                  __ZLBS.next()
               !};
               ZLBS.cntx_pop();
               P.cntx_pop()
            ?}
         || FUN.emsg('Dołączenie zapisu nie powiodło się.'@)
         ?};
         obj_del(__ZLBS);
         &__ZLBS
      ?}
   |? _akc='legenda'
   || {? _a
      || exec('legenda','color','$FLD_NV#01#01$%1'['Nieaktywna brygada'@])
      ?}
   ?}

|? _tab=ZLBS
:  =========================
:  S K L A D   B R Y G A D Y
:  =========================
||
   {? _akc='dołącz'
   || {? _a
      || _tab.blank;
         _tab.OD:=_tab.BR().OD;
         _tab.DO:=_tab.BR().DO;
         _tab.edit("exec('chk_rec','!zws_par_tbrg',ZLBS,null)")
      || _tab.add()
      ?}
   |? _akc='dołącz grupę'
   || {? _a
      || _tab.blank;
         _tab.OD:=_tab.BR().OD;
         _tab.DO:=_tab.BR().DO;
         _tab.win_edit('RED_ADD');
         {? ~_tab.edit("
::             Tutaj sprawdzam tylko pola związane z zakresem dat (dane pracownika będą sprawdzane później)
               _result:='';
               _tab:=ZLBS;
               _zd:=date(0,0,0);
               _od:=_tab.BR().OD;
               _do:=_tab.BR().DO;
               {? _od<>_zd & _tab.OD<_od
               || FUN.emsg('Data \"Od dnia\" nie może być wcześniejsza od daty %1.'@[_od$4]);
                  _result:='OD'
               |? _do<>_zd & _do<_tab.DO
               || FUN.emsg('Data \"Do dnia\" nie może być późniejsza od daty %1.'@[_do$4]);
                  _result:='DO'
               |? _tab.OD<>_zd & _tab.DO<>_zd & _tab.DO<_tab.OD
               || FUN.emsg('Data \"Od dnia\" nie może być późniejsza od daty \"Do dnia\".'@);
                  _result:='OD'
               ?};
               _result
            ")
         || _tab.win_edit('RED_PRJ');
            0
         || 1
         ?}
      ||
::       Wyświetlenie listy pracowników
         _p8771:=exec('get','#params',8771,2,OPERATOR.USER);

         _view:=1+_p8771;
         _jorg:=_p8771+1;
         KOMM.init(250,,'Rejestracja składu brygady');
         _ret:=exec('wybierz_pracownika','tte',1,_view,_jorg);
         _od:=_tab.OD;
         _do:=_tab.DO;
         {? _ret.STATUS=''
         || {? _ret.P.first()
            || {!
               |?
                  _res:=exec('FindAndGet','#table',P,_ret.P.UID,,"ref()",null());
                  {? _res<>null()
                  || _tab.P:=_res;
                     _tab.OD:=_od;
                     _tab.DO:=_do;
                     {? exec('chk_rec','!zws_par_tbrg',ZLBS,null,1)=''
                     || _tab.add()
                     ?}
                  || KOMM.add('Nie odnaleziono pracownika o UID: %1'@[_ret.P.UID])
                  ?};
                  _ret.P.next()
               !}
             ?}
         || FUN.emsg(_ret.STATUS)
         ?};
         _tab.win_edit('RED_PRJ');
         KOMM.select()
      ?}
   |? _akc='popraw'
   || {? _a
      || _tab.get();
         _tab.edit("exec('chk_rec','!zws_par_tbrg',ZLBS)")
      || _tab.put()
      ?}

   |? _akc='usuń'
   || {? _grp>0
      || {? _a
         || {? FUN.ask('Czy na pewno usunąć wybrane zapisy?'@)
            || VAR.GRUPA:='T'
            ?}
         || VAR.GRUPA:='N'
         ?}
      || {? _a
         || VAR.GRUPA='T' | FUN.ask('Czy na pewno usunąć bieżący zapis?'@)
         || _tab.del()
         ?}
      ?}
   ?}
?}


\chk_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Sprawdza poprawność danych
::   WE: _a - alias do edytowanej tabeli
::       _b - wskazanie na edytowany rekord
::       [_c] -  Wyjście komunikatów [0] - FUN, 1 - KOMM (wymagany wcześniej utworzony obiekt KOMM)
::               Parametr obsłużony  wyłącznie dla tabeli ZLBS
::   WY: wlaściwa dla poprawnego działania akcji rekord po
::  OLD: \chk_rec/skid_prr.fml
::----------------------------------------------------------------------------------------------------------------------
_b:={? var_pres('_b')<>type_of(null) || _a.ref() || _b ?};
_komm:={? var_pres('_c')=type_of(0) || _c || 0 ?};

{? _a=ZLBR
:: wypełnienie wymaganych pól
|| {? (_result:=__CHK.record(ZLBR,,'KOD','NAZ','KAL','P'))<>''
   || {? _result='P' || _result:='P_NAZ' ?};
      return(_result)
   ?};
:: unikalność kluczy
   {? __CHK.index(ZLBR,#_b)<>''
   || return(0)
   ?};
:: poprawność danych
   _zd:=date(0,0,0);
   {? _a.OD<>_zd & _a.DO<>_zd & _a.DO<_a.OD
   || FUN.emsg('Data "Od dnia" nie może być późniejsza od daty "Do dnia".'@);
      return('OD')
   ?};
:: spójność
   _test:=1;
   {? _b & (_a.OD<>_zd | _a.DO<>_zd)
   || ZLBS.cntx_psh();
      ZLBS.index('BODIP');
      ZLBS.prefix(_b);
      {? ZLBS.first()
      || {!
         |? _test:=
               {? _a.OD<>_zd & _a.DO<>_zd
               || _a.OD<=ZLBS.OD & ZLBS.DO<=_a.DO
               |? _a.OD<>_zd
               || _a.OD<=ZLBS.OD
               |? _a.DO<>_zd
               || ZLBS.DO<>_zd & ZLBS.DO<=_a.DO
               ?};
            ZLBS.next() & _test
         !}
      ?};
      ZLBS.cntx_pop()
   ?};
   {? ~_test
   || FUN.emsg('Daty nieodpowiednie ze względu na skład brygady.'@)
   ?};
   _test

|? _a=ZLBS
:: wypełnienie wymaganych pól
|| {? _komm>0
   || {? __CHK.record(ZLBS,1,'P')<>''
      || KOMM.add('Pole \"Pracownik\" musi być uzupełnione.\nNależy uzupełnić brakujące informacje.'@);
         return('P_NAZ')
      ?}
   || {? __CHK.record(ZLBS,,'P')<>''
      || return('P_NAZ')
      ?}
   ?};
   _a.P();
:: unikalność kluczy
   {? _komm>0
   || {? __CHK.index(ZLBS,#_b,1)<>''
      || KOMM.add('Pracownik: %1 %2, data rozpoczęcia pracy: %3 - taki zapis już istnieje.'@
                  [P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,_a.OD$4]);
         return('P_NAZ')
      ?}
   || {? __CHK.index(ZLBS,#_b)<>''
      || return('P_NAZ')
      ?}
   ?};
:: poprawność danych
   _zd:=date(0,0,0);
   _od:=_a.BR().OD;
   _do:=_a.BR().DO;
   {? _od<>_zd & _a.OD<_od
   || _txt:='Data "Od dnia" nie może być wcześniejsza od daty %1.'@[_od$4];
      {? _komm>0
      || KOMM.add(_txt)
      || FUN.emsg(_txt)
      ?};
      return('OD')
   |? _do<>_zd & _do<_a.DO
   || _txt:='Data "Do dnia" nie może być późniejsza od daty %1.'@[_do$4];
      {? _komm>0
      || KOMM.add(_txt)
      || FUN.emsg(_txt)
      ?};
      return('DO')
   |? _a.OD<>_zd & _a.DO<>_zd & _a.DO<_a.OD
   || _txt:='Data "Od dnia" nie może być późniejsza od daty "Do dnia".'@;
      {? _komm>0
      || KOMM.add(_txt)
      || FUN.emsg(_txt)
      ?};
      return('OD')
   ?};
   {? (_od<>_zd & P.DZ<>_zd & P.DZ<_od) |
      (_do<>_zd & _do<P.DZA)
   || _txt:='Okres zatrudnienia pracownika %1 %2 (%3) nie pozwala na przypisanie go do brygady w okresie %4.'@
            [P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,$P.DZA+' ÷ '+$P.DZ,$ZLBR.OD+' ÷ '+$ZLBR.DO];
      {? _komm>0
      || KOMM.add(_txt)
      || FUN.emsg(_txt)
      ?};
      return('P_NAZ')
   ?};
   {? _a.OD<>_zd & _a.OD<P.DZA || _a.OD:=P.DZA ?};
   {? _a.DO<>_zd & P.DZ<>_zd & P.DZ<_a.DO || _a.DO:=P.DZ ?};
:: spójność
   _test:=1;
   _od:=_a.OD;
   _do:=_a.DO;
   _a.cntx_psh();
   _a.index('BPOD');
   _a.prefix(_a.BR,_a.P);
   {? _a.first()
   || {!
      |? {? _a.ref()<>_b
         || _test:=
               {? _od=_zd & _do=_zd || 0
               |? _a.OD=_zd & _a.DO=_zd || 0
               |? _od=_zd   || _do<_a.OD
               |? _do=_zd   || _a.DO<_od
               |? _a.OD=_zd || _a.DO<_od
               |? _a.DO=_zd || _do<_a.OD
               || _do<_a.OD | _a.DO<_od
               ?}
         ?};
         _a.next() & _test
      !}
   ?};
   _a.cntx_pop();
   {? ~_test
   || {? _komm>0
      || KOMM.add('Podano niespójne okresy przynależności do brygady dla pracownika %1 %2.'@
                  [P.OSOBA().NAZWISKO,OSOBA.PIERWSZE])
      || FUN.emsg('Podano niespójne okresy przynależności do brygady.'@)
      ?};
      _test:='OD'
   || _test:=''
   ?};
   _test
?}


\prn_zbr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: drukowanie z poziomu składu brygad
::  OLD: \prn_zbr/drukujp.fml
::----------------------------------------------------------------------------------------------------------------------
:rep_exec('tte_drkzbr*',,1);
exec('rep_exec','#b_report','ZWS_PAR_TBRG','tte_drkzbr*',,1);
1


\zlbr_ref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Zwraca ZLBR.ref()
::  OLD: \zlbr_ref/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
ZLBR.ref()


\zlb_aref
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [2009]
:: OPIS: Po odswiezeniu zawartosci okienka brygad - odrysowanie okienka skladu brygady
::  OLD: \zlb_aref/skid_prr.fml
::----------------------------------------------------------------------------------------------------------------------
ZLBS.index('BODIP');
ZLBS.prefix(ZLBR.ref());
grp_disp(ZLBS,'WER_PRJ');
grp_disp(R_WZCZ,'ZAS');
~~


\akt_bryg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Aktywacja / dezaktywacja brygady
::  OLD: \akt_bryg/ekioski.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZLBR.get()
|| {? exec('blk_lock','#table','ZLBR',ZLBR.ref(),,,'Brygada \'%1\' jest redagowana'@[ZLBR.KOD])
   || {? ZLBR.AKT='N'
      || ZLBR.DO:=date(0,0,0);
         ZLBR.AKT:='T'
      || ZLBR.DO:=date()-1;
         {? ZLBR.DO<ZLBR.OD
         || ZLBR.DO:=ZLBR.OD
         ?};
         ZLBR.AKT:='N'
      ?};
      ZLBR.put();
      {? VEK.TERM='T' || grp_disp(ZLBR,eSelect.wer_zlbr,0,1) ?};
      exec('blk_unlock','#table','ZLBR',ZLBR.ref())
   ?}
?}


\zlbr_record_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.14]
:: OPIS: Przed rekord w oknie ZLBR.WER_PRJ
::   WE: _a - parametr funkcji przed rekord
::   WY: kolor
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| {? ZLBR.AKT='T' || ZLBR.actions_grayed(cur_win(1,1),'A') || ZLBR.actions_grayed(cur_win(1,1),'Y') ?}
?};
{? ZLBR.AKT='N'
|| exec('findfnv','#color')
|| ''
?}


\zlbr_trig_pa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.42]
:: OPIS: Trigger tabeli ZLBR (po put)
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
exec('plres_update','po_plan',$ZLBR.ref())

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 267622fc3bdef5eb553ba08eb9596d00658799d8fff17ef65598d74a1072a51f1c5ff8d423e848247417f93c7106458ee8578b2c43776dbd92aad61fcc1515108618791b5dcf42342024ec61d1d60ae18ae547fc3035133c63767f817a37ce23a9862ca022049155591baa2ceed137d36e268091f70a47c8a917be1e1c01fdc3
