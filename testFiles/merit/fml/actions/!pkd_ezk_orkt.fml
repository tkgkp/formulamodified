:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_orkt.fml
:: Utworzony: 11.04.2023
:: Autor: MicKoc
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_ORKT - Rej. kontroli trzeźwości
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Rejestracja kontroli trzeźwości - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::
::# kind=WE, symbol=OSOBA, type=_OSOBA, name=Wskazanie na osobę, required=T, keyref=T
::
_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.OSOBA);
_do:=_mp.akcja();
_result:='';

{? _id=''
|| _result:=exec('error','!pkd_ezk_orkt')

|? _mp.isMicro()
|| {? _do='START'
   || _mp.keyRef(_id);
      _mp.keep()
   |? _do='STOP'
   || _mp.delRef(_id);
      _mp.cancel()
   |? _do<>''
   || _result:='Czynność '+_mp.buf_act.UID+' nie obsługuje akcji '+_do+'.'
   ?}

|| _mp.save(_ib,_rv);
   {? _do='ZAKOŃCZ'
   || _mp.done()
   |? _mp.pathTodo()
   || _value:=exec('select','!pkd_ezk_orkt',_in.OSOBA);
      {? type_of(_value)=type_of(0)
      || {? _value<>0
         || _mp.done()
         || _mp.keep()
         ?}
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Rejestracja kontroli trzeźwości - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','osoba',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj kontrolę trzeźwości: %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Zarejestruj kontrolę trzeźwości: %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Zarejestruj kontrolę trzeźwości: %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Zarejestruj kontrolę trzeźwości'@@
?}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Obsługa czynności wykonywanej z listy zadań.
::   WE: _a - wskazanie pracownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err_msg:=exec('error','!pkd_ezk_orkt');

{? var_pres('_a')<>type_of(null) | _a=null
|| return(_err_msg)
?};

Cntx.psh(OSOBA,KOT_TEST,KOT_URZA,SLO_KOD,KOT_JM,KART_DOD,KART_DEF);

OSOBA.prefix();
{? ~OSOBA.seek(_a)
|| Cntx.pop(OSOBA,KOT_TEST,KOT_URZA,SLO_KOD,KOT_JM,KART_DOD,KART_DEF);
   return(_err_msg)
?};

: przeglądanie danych
KOT_URZA.win_sel('WER');
SLO_KOD.win_sel('WER');
KOT_JM.win_sel('WER');
_symbol:='WYR_KAR';

{? __WND.EDIT.get(KART_DOD,_symbol)=''
|| exec('kart_def','kart_dod',_symbol);
   _we:=exec('mk_edit','kart_dod');
   __WND.EDIT.put(KART_DOD,_symbol,_we)
?};

: pokaż dane
KOT_TEST.index('OSOBA');
KOT_TEST.prefix(exec('ref_firma','#firma'),_a);
KOT_TEST.win_sel('WERI');
KOT_TEST.win_edit('RED');
KOT_TEST.win_patt('WZO');
_result:=KOT_TEST.select();

: porządki
Cntx.pop(OSOBA,KOT_TEST,KOT_URZA,SLO_KOD,KOT_JM,KART_DOD,KART_DEF);

_result


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabeli KOT_TEST z doklejonym oknem redagowania tabeli P);
::       - w ramach obszaru roboczego (okno wertowania tabeli KOT_TEST jako składowa okna grupowego tabeli UD_DEF).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=KOT_TEST
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Zwraca treść komunikatu błędu
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie kontroli trzeźwości niemożliwe.\nNie znaleziono osoby.'


\kot_test_wynik_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Po redagowaniu pola WYNIK oraz TEST
::   WE: [_a] [REAL] - Wartość wyniku (domyślnie to fld())
::   WY:
::  OLD: \kot_test_wynik_ae/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:={? var_pres('_a')=type_of(0) || _a || fld() ?};
{? var_pres('_fld')=type_of(0) & _fld<0
|| FUN.error('Wartość pomiaru musi być większa lub równa 0'@);
   return(0)
?};
:: odmowa badania
{? KOT_TEST.ODMOWA='T'
|| KOT_TEST.WYNIK:=0;
   KOT_TEST.TEST:=''
?};
exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
1


\kot_test_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Dołącz przed tabeli KOT_TEST
::   WE:
::   WY:
::  OLD: \kot_test_ba/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT_TEST.win_edit('RED');
KOT_TEST.hdr_edit();
KOT_TEST.hdr_edit(' - %1 %2'[OSOBA.NAZWISKO, OSOBA.PIERWSZE]);
KOT_TEST.fld_fml('WYNIK','BEFORE_EDIT',"0");
KOT_TEST.fld_fml('TEST','BEFORE_EDIT',"''");
KOT_TEST.efld_opt(KOT_TEST.win_edit('?'),'editable=grayed,mark=0',,'WYNIK');
KOT_TEST.efld_opt(KOT_TEST.win_edit('?'),'editable=grayed,mark=0',,'TEST');
KOT_TEST.efld_opt(KOT_TEST.win_edit('?'),'mark=1',,'KOT_URZA','NAZ');
KOT_TEST.WYNIK:=0;
KOT_TEST.TEST:='';
1


\kot_test_bada_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Po edycji pola BADA tabeli KOT_TEST
::  OLD: \kot_test_bada_ae/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
:: domyślnie ustawiamy pole "Urządzenie" jako edytowalne i wymagane
KOT_TEST.efld_opt('RED','editable=1,mark=1',,'KOT_URZA');
exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST);
exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
1


\kot_test_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Popraw przed tabeli KOT_TEST
::   WE:
::   WY:
::  OLD: \kot_test_bp/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
exec('kot_test_bada_ae','!pkd_ezk_orkt');
1


\kot_test_cofnij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wycofanie zmiany terminu przechowywania informacji o badaniu
::  OLD: \kot_test_cofnij/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy na pewno chcesz usunąć zmianę terminu przechowywania danych?'@)
|| KOT_TEST.CZY_PD:='N';
   KOT_TEST.PD_DATA:=exec('data_plus_rok','kontrola_trzezwosci',KOT_TEST.DATA);
   {? KOT_TEST.put()
   || KOT_TEST.memo_set('','PD_OPIS');
      KOT_TEST.memo_put(,'PD_OPIS')
   ?}
?}


\kot_test_kot_urza_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Po edycji pola KOT_URZA
::  OLD: \kot_test_kot_urza_ae/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
{? KOT_TEST.KOT_URZA
|| KOT_TEST.KOT_JM:=KOT_TEST.KOT_URZA().KOT_JM;
   KOT_TEST.KOT_RODZ:=KOT_TEST.KOT_JM().KOT_RODZ;
:: jeżeli zmieniło się urządzenie to czyścimy wynik
   {? KOT.KOT_URZA<>KOT_TEST.KOT_URZA
   || KOT_TEST.WYNIK:=0;
      KOT_TEST.TEST:='';
      {? KOT_TEST.WYNIK_D<>#0 &
         FUN.ask('%1\n%2'[
            'Wykryto zmianę urządzenia dla zarejestrowanego wyniku badania.'@,
            'Czy chcesz wprowadzić nową datę i godzinę rejestracji wyniku badania?'@]
         )
      || KOT_TEST.WYNIK_D:=#0;
         KOT_TEST.WYNIK_G:=*0
      ?}
   ?};
   {? ~(-menu_txt='generuj')
   || exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
      exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST)

   ?}
|| {? 'OB'*KOT_TEST.BADA
   || KOT_TEST.KOT_JM:=KOT_TEST.KOT_RODZ:=null();
      KOT_TEST.WYNIK:=0;
      KOT_TEST.TEST:='';
      exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
      exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST)
   ?}
?};
1


\kot_test_kot_urza_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Przed edycją pola KOT_URZA
::  OLD: \kot_test_kot_urza_be/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT.KOT_URZA:=KOT_TEST.KOT_URZA;
KOT_URZA.clear();
KOT_URZA.win_dict(exec('kot_urza_cfg','kontrola_trzezwosci').grp);
1


\kot_test_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Legenda tabeli KOT_TEST
::  OLD: \kot_test_legenda/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color',
   '#KOT_TEST#',
   'KOT_TEST#01#01',
   'KOT_TEST#01#02',
   'KOT_TEST#02#01',
   'KOT_TEST#02#02',
   'KOT_TEST#03#01'
)


\kot_test_odmowa_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Po edycji pola KOT_TEST.ODMOWA
::   WE:
::   WY:
::  OLD: \kot_test_odmowa_ae/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
{? KOT_TEST.ODMOWA='T'
|| KOT_TEST.KOTLIMIT:=null();
   KOT_TEST.WYNIK:=0;
   KOT_TEST.TEST:=''
?};
exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST);
1


\kot_test_pd_ktp_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wartość początkowa pola PD_KTO
::  OLD: \kot_test_pd_ktp_bl/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
{? KOT_TEST.CZY_PD='T' || OPERATOR.USER().DANE || '' ?}


\kot_test_przedluz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Zmiana terminu przechowywania informacji o badaniu
::  OLD: \kot_test_przedluz/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT_TEST.cntx_psh();
KOT_TEST.win_edit('RED_PD');
KOT_TEST.memo_get(,'PD_OPIS');
KOT_TEST.PD_KTO:=OPERATOR.USER().DANE;
_fv:="
   _ret:=exec('kot_test_ra','!pkd_ezk_orkt');
   {? ~+|_ret
   || _ret:=__CHK.record(KOT_TEST,,'PD_DATA','PD_KTO','PD_OPIS')
   ?};
   _ret
";

{? KOT_TEST.edit(_fv)
|| KOT_TEST.CZY_PD:='T';
   {? KOT_TEST.put()
   || KOT_TEST.memo_put(,'PD_OPIS')
   ?}
?};
KOT_TEST.cntx_pop()


\kot_test_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Rekord po tabeli KOT_TEST
::  OLD: \kot_test_ra/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=
   {? -menu_txt='zmień termin'
   || 0
   |? KOT_TEST.ODMOWA='T'
   || __CHK.table(KOT_TEST,-menu_txt()='popraw' | -menu_txt()='wynik',,'RODZAJ','DATA','MIEJSCE')
   || __CHK.table(KOT_TEST,-menu_txt()='popraw' | -menu_txt()='wynik',,'RODZAJ','DATA','MIEJSCE','KOT_URZA')
   ?};
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

:: czyścimy godzinę jeżeli została wykasowana data
{? KOT_TEST.WYNIK_D=#0 || KOT_TEST.WYNIK_G:=*0 ?};

{? KOT_TEST.GODZ<*0 | KOT_TEST.GODZ>time(24,0,0)
|| FUN.error('Godzina badania musi zawierać się w zakresie od %1 do %2.'@[time(0,0,0)$3,time(24,0,0)$3]);
   return('GODZ')
?};
{? KOT_TEST.WYNIK_G<*0 | KOT_TEST.WYNIK_G>time(24,0,0)
|| FUN.error('Godzina rejestracji wyniku badania musi zawierać się w zakresie od %1 do %2.'@
             [time(0,0,0)$3,time(24,0,0)$3]);
   return('WYNIK_G')
?};
{? menu_pth()+1='G' & (KOT_TEST.DATA<date() | (KOT_TEST.DATA=date() & KOT_TEST.GODZ<time()))
|| {? ~FUN.ask('Minął już termin badania. Czy chcesz wprowadzić dane?'@)
   || return('DATA')
   ?}
?};
_jm_typ:=KOT_TEST.KOT_URZA().KOT_JM().TYP;
{? (_jm_typ='T' & KOT_TEST.WYNIK>0 | _jm_typ='N' & KOT_TEST.TEST<>'') & KOT_TEST.WYNIK_D=#0
|| return(__CHK.table(KOT_TEST,-menu_txt()='popraw' | -menu_txt()='wynik',,'WYNIK_D'))
?};
{? ~exec('kot_test_wynik_ae','!pkd_ezk_orkt',KOT_TEST.WYNIK)
|| return({? _jm_typ='N' || 'TEST' || 'WYNIK' ?})
|| ''
?};
KOTLIMIT.cntx_psh();

_oczekiwany:='T';
{? _jm_typ='T'
|| KOTLIMIT.index('WYNIK');
   KOTLIMIT.prefix(KOT_TEST.KOT_JM().JM().KOD,);
   {? KOTLIMIT.find_le(KOT_TEST.WYNIK)
   || _oczekiwany:=KOTLIMIT.OK
   ?}
|| KOTLIMIT.index('TEST');
   KOTLIMIT.prefix(KOT_TEST.KOT_JM().JM().KOD,);
   {? KOTLIMIT.find_key(KOT_TEST.TEST,)
   || _oczekiwany:=KOTLIMIT.OK
   ?}
?};
KOTLIMIT.cntx_pop();

:: obsługa nagany dostępna jeżeli włączony parametr 338
:: Kadry i płace: Kontrola trzeźwości - obsługa nagany przy rejestracji wyników niekorzystnych dla współpracownika?
_obs_nag:=PAR_SKID.get(338)='T';
{? _obs_nag
|| _nagana:=KOT_TEST.KART_DOD;
   {? _oczekiwany='N' & ~_nagana
   || {? FUN.ask('%1\n%2'['Wynik niekorzystny dla pracownika.'@,'Czy wprowadzić naganę?'@])
      || KOT_TEST.KART_DOD:=exec('dodaj_nagane','kontrola_trzezwosci')
      ?}
   |? _oczekiwany='N' & _nagana
   || {? FUN.ask('Czy zaktualizować zapisaną naganę?'@)
      || exec('popraw_nagane','kontrola_trzezwosci',_nagana)
      ?}
   |? _nagana
   || {? FUN.ask('Wynik korzystny dla pracownika.\nUsunąć naganę?'@)
      || KOT_TEST.KART_DOD:=null();
         KOT_TEST.put();
         {? ~exec('usun_nagane','kontrola_trzezwosci',_nagana)
         || KOT_TEST.KART_DOD:=_nagana;
            KOT_TEST.put()
         ?}
      ?}
   ?}
?};
''


\kot_test_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Rekord przed tabeli KOT_TEST
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \kot_test_rb/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST);
_ret:='';

_dopuszczony:=exec('czy_dopuszczony','kontrola_trzezwosci',KOT_TEST.KOTLIMIT,KOT_TEST.KOT_JM().JM);
{? KOT_TEST.CZY_PD='T'
|| _ret:=Color.fnd_kol('KOT_TEST#01#01')
|? KOT_TEST.ODMOWA='T'
|| _ret:=Color.fnd_kol('KOT_TEST#01#02')
|? _dopuszczony=0
|| _ret:=Color.fnd_kol('KOT_TEST#02#01')
?};
{? _a
|| {? KOT_TEST.WYNIK_D<>#0
   || KOT_TEST.efld_opt('RED','mark=1',,'KOT_URZA')
   || KOT_TEST.efld_opt('RED','mark=0',,'KOT_URZA')
   ?};
   _akcja:='';
   {? KOT_TEST.CZY_PD='T'
   || KOT_TEST.win_edit('RED_PD')
   || _akcja+='C';
      KOT_TEST.win_edit('RED')
   ?};
   {? KOT_TEST.WYNIK_D=#0
   || _akcja+='T'
   ?};

   _par:=params_get();
   {? var_pres('_par')>100 &
      var_pres('cfg',_par)>100 &
      var_pres('done',_par.cfg)>100 &
      var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
   || _hid:=_par.cfg.done.noempty+':'+_par.cfg.done.empty
   || _hid:=''
   ?};
   _hid:=_akcja+_hid;
   KOT_TEST.actions_grayed('WER',_hid);
   KOT_TEST.actions_grayed('WER_ALL',_hid);

   KOT_TEST.hdr_edit();
   KOT_TEST.hdr_edit(' - %1 %2'[KOT_TEST.OSOBA().NAZWISKO, OSOBA.PIERWSZE])
?};
_ret


\kot_test_wynik_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Akcja wprowadzania wyniku badań
::   WE:
::   WY:
::  OLD: \kot_test_wynik_a/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT_TEST.cntx_psh();
KOT_TEST.win_edit('RED_WYN');
KOT_TEST.hdr_edit();
KOT_TEST.hdr_edit(' - %1 %2'[KOT_TEST.OSOBA().NAZWISKO, OSOBA.PIERWSZE]);
exec('ustaw_zmienne','kontrola_trzezwosci',KOT_TEST);
{? KOT_TEST.edit("
      exec('kot_test_wynik_ae','!pkd_ezk_orkt',KOT_TEST.WYNIK)
      &
      exec('kot_test_ra','!pkd_ezk_orkt')=''
   ")
|| {? KOT_TEST.put()
   || KOT_TEST.memo_put(,'NOTATKA')
   ?}
?};
KOT_TEST.cntx_pop()


\kot_test_wynik_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Akcja przed wprowadzania wyniku badań
::   WE:
::   WY:
::  OLD: \kot_test_wynik_b/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT_TEST.memo_get(,'NOTATKA');
KOT_TEST.memo_get(,'PD_OPIS');
1


\kot_test_zalaczniki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Załączniki do badania pracownika
::  OLD: \kot_test_zalaczniki/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------

_edit:=exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_ORKT');
exec('show_zalacz','zalacz','OSOBA','KOT_TEST',_edit)


\kot_test_del_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Usuń przed tabeli KOT_TEST
::  OLD: \kot_test_del_b/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? KOT_TEST.sel_size()=0
|| _jest_nagana:=KOT_TEST.KART_DOD<>null();

   ZALACZ.cntx_psh();
   ZALACZ.index('NAG');
   ZALACZ.prefix(KOT_TEST.uidref(),);
   _jest_zal:=ZALACZ.first();
   ZALACZ.cntx_pop();

   _txt:='Usunięcie badania usunie również powiązane z nim';
   {? _jest_nagana || _txt+=' nagany'?};
   {? _jest_zal
   || {? _jest_nagana || _txt+=' oraz' ?};
      _txt+=' załączniki'
   ?};
   _txt+='.';
   {? _jest_nagana | _jest_zal || FUN.info(_txt) ?}
?};
_ret


\kot_test_del_grp_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
::  MOD: MicKoc [22.26]
:: OPIS: Grupa przed usuń
::   WE:
::   WY:
::  OLD: \kot_test_del_grp_b/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('%1\n%2'[
   'Usunięcie zaznaczonych badań usunie również powiązane z nimi nagany oraz załączniki.'@,
   'Czy chcesz kontynuować?'@]
)


\_kot_test_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wyzwalacz dołącz przed tabeli KOT_TEST
::  OLD: \_kot_test_addb/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
:: na potrzeby transferu X2MW zawsze wypełniamy pole FIRMA
KOT_TEST.FIRMA:=exec('ref_firma','#firma');
1


\_kot_test_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wyzwalacz popraw przed tabeli KOT_TEST
::  OLD: \_kot_test_putb/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
exec('wyzwalacze','kontrola_trzezwosci',KOT_TEST);
:: na potrzeby transferu X2MW zawsze wypełniamy pole FIRMA
KOT_TEST.FIRMA:=exec('ref_firma','#firma');
1


\_kot_test_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Wyzwalacz przed usunięciem rekordu tabeli KOT_TEST
::   WE:
::   WY: 0/1
::  OLD: \_kot_test_delb/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
:: Usunięcie informacji o powiązanych załącznikach
exec('del_ndx','#table',ZALACZ,'NAG',KOT_TEST.uidref()) &
{? KOT_TEST.KART_DOD
|| _ref:=KOT_TEST.KART_DOD;
   KOT_TEST.KART_DOD:=null;
   KOT_TEST.put(1);
   exec('usun_nagane','kontrola_trzezwosci',_ref)
|| 1
?}


\kot_test_teraz_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [12.51]
:: OPIS: Formuła dla przycisku "Teraz" w oknie redagowania tabeli KOT_TEST - ustawia bieżącą datę i godzinę rejestracji
::       wyniku badania
::   WE:
::   WY:
::  OLD: \kot_test_teraz_btn/kontrola_trzezwosci.fml
::----------------------------------------------------------------------------------------------------------------------
KOT_TEST.WYNIK_D:=date();
KOT_TEST.WYNIK_G:=time();
win_disp();
''

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:24 0acb328f5cdb4af7c8b6717254c19421129393037c2771a8b55de6a21b9c74495606a078d0eb353896d0b9417d6fee9906f53e1aff4daa5174457c094a25ad815c1a2923d7ed8cf4367dc40e14e57884849644303cb9f551bac544bd7c2157d7ec5144c59edc396e0321fff3a38efdd6f73f9181d23da2d681e0b9e060075f05
