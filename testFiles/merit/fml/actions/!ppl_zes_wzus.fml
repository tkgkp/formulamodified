:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_zes_wzus.fml
:: Utworzony: 19.04.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Formuły czynności PPL_ZES_WZUS — Generowanie raportów ZUS.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Generowanie raportów ZUS - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE, symbol=RU,      type=NUMBER, name=Rok ubezpieczeniowy, required=T, keyref=T
::# kind=WE, symbol=MU,      type=NUMBER, name=Miesiąc ubezpieczeniowy, required=T, keyref=T
::# kind=WE, symbol=T,       type=STRING, name=Typ raportu, required=T, keyref=T, fml_val="exec('wyb_rap_rozl','rap_zus')"
::# kind=WE, symbol=F_ZATR,  type=STRING, name=Kod formy współpracy, required=T, fml_val="exec('wybierz','f_zatr',_a)"
::
::# kind=WEW, symbol=FOLDER, type=STRING, name=Folder lokalny, required=N, keyref=N
::# kind=WEW, symbol=PLIK,   type=STRING, name=Nazwa pliku, required=N, keyref=N
::# kind=WEW, symbol=TERMIN, type=NUMBER, name=Termin przesyłania, required=N, keyref=N
::# kind=WEW, symbol=SYMBOL, type=STRING, name=Symbol raportu, required=N, keyref=N
::# kind=WEW, symbol=DATA,   type=DATE,   name=Data wypełnienia, required=N, keyref=N
::# kind=WEW, symbol=GIODO,  type=STRING, name=Przekazanie danych osobowych, required=N, keyref=N
::
::# kind=WY,  symbol=RU,      type=NUMBER, name=Rok, required=T
::# kind=WY,  symbol=MU,      type=NUMBER, name=Miesiąc, required=T
::# kind=WY,  symbol=SYMBOL,  type=STRING, name=Symbol raportu, required=T
::# kind=WY,  symbol=KW_U_SP, type=NUMBER, name=Kwota do wpłaty na ubezpieczenia społeczne, required=N
::# kind=WY,  symbol=KW_U_ZD, type=NUMBER, name=Kwota do wpłaty na ubezpieczenie zdrowotne, required=N
::# kind=WY,  symbol=KW_FPFG, type=NUMBER, name=Kwota do wpłaty na FP i FGŚP, required=N
::# kind=WY,  symbol=KW_FEP,  type=NUMBER, name=Kwota do wpłaty na FEP, required=N
::
::# permissions=F_ZATR,UD_SKL

_par:=params_get();
params_set(_par);
O.cntx_psh();

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_in.T:=~-_in.T;

_rv.KW_U_SP:=0;
_rv.KW_U_ZD:=0;
_rv.KW_FPFG:=0;
_rv.KW_FEP:=0;

exec('__F_ZATR','object');
_f_p:=__F_ZATR.P;
_f_o:=__F_ZATR.O;
__F_ZATR.mod(_in.F_ZATR);

{? (_result:=exec('check','!ppl_zes_wzus',_in.RU,_in.MU,_in.T))<>''
|| _mp.error(_result);
   FUN.emsg(_result);
   O.cntx_pop();
   exec('wybierz','lista_plac',O.ref());
   return()
?};

_lista:=exec('lista','!ppl_zes_wzus',_in.RU,_in.MU);
_uid:=exec('rap_rozl_uid','rap_zus',_in.RU,_in.MU,_in.T);
_mp.keyRef(_uid);

exec('rap_zus_init','!ppl_zes_wzus');
exec('dod_zxx','lista_plac',_lista);

_ok:=1;

_inTerm:=exec('interm','#system');
:: przygotowanie katalogu tymczasowego po stronie serwera dla pracy w inTerm
_file:='';
{? _inTerm
|| _tmp_dir:=fmk_tmp_dir(0);
   {? type_of(_tmp_dir)<>type_of(~~)
   || _pth:=_tmp_dir.get_path();
      _file:='';
      _sep:=exec('sep','#file',2);
      _file:=_pth+_sep
   || FUN.emsg('Nie udało się utworzenie katalogu tymczasowego po stronie serwera.'@);
      _ok:=0
   ?}
?};

{? _ok
|| {? _in.T='DRA'
   || {? exec('zus_dra_dialog','!ppl_zes_wzus')
      || exec('zus_dra_generuj','!ppl_zes_wzus',_lista,_file)
      || _ok:=0
      ?}

   |? _in.T='RCA'
   || {? exec('zus_rca_dialog','!ppl_zes_wzus')
      || exec('zus_rca_generuj','!ppl_zes_wzus',_lista,_file)
      || _ok:=0
      ?}

   |? _in.T='RSA'
   || {? exec('zus_rsa_dialog','!ppl_zes_wzus')
      || exec('zus_rsa_generuj','!ppl_zes_wzus',_lista,_file)
      || _ok:=0
      ?}

   |? _in.T='RZA'
   || {? exec('zus_rza_dialog','!ppl_zes_wzus')
      || exec('zus_rza_generuj','!ppl_zes_wzus',_lista,_file)
      || _ok:=0
      ?}

   |? _in.T='RPA'
   || {? exec('zus_rpa_dialog','!ppl_zes_wzus')
      || exec('zus_rpa_generuj','!ppl_zes_wzus',_lista,_file)
      || _ok:=0
      ?}

   |? _in.T='RIA'
   || {? exec('zus_ria_dialog','!ppl_zes_wzus',_file)
      || exec('zus_ria_generuj','!ppl_zes_wzus',_lista)
      || _ok:=0
      ?}

   || _mp.error()
   ?}
?};
{? _ok
|| exec('rap_zus_save','!ppl_zes_wzus',_inTerm)
|| _mp.keep()
?};

__F_ZATR.mod(_f_p,'P');
__F_ZATR.mod(_f_o,'O');

O.cntx_pop();
exec('wybierz','lista_plac',O.ref());

{? _mp.isMicro()
|| _mp.cancel()
?};
~~


\check
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy raport rozliczeniowy może być wykonany
::   WE: _a [INTEGER] - rok
::       _b [INTEGER] - miesiąc
::       _c [STRING] - typ raportu
::   WY: treść komunikatu w przypadku wykrycia błędu, lub tekst pusty
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('no_limit','schemat','PPL')
|| return('Brak praw dostępu do wszystkich jednostek organizacyjnych.'@)

|? _a<1900 | _a>9999
|| return('Błędny numer roku (%1).'@[$_a])

|? _b<1 | _b>12
|| return('Błędny numer miesiąca (%1).'@[$_b])

|? exec('lista','!ppl_zes_wzus',_a,_b)=null
|| return('Brak listy płac typu %1 za %2.'@['SUM',date(_a,_b,0)$8])

|? exec('otwarte_ubezp','lista_plac',_a,_b)
|| return('W miesiącu %1 rozliczenia z ZUS występują otwarte listy płac.'@[date(_a,_b,0)$8])
?};

{? ~exec('lista_rap_rozl','rap_zus').find_key(_c,)
|| return('Błędny typ raportu ZUS (%1).'@[_c])
?};

''


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Generowanie raportów ZUS - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
{? exec('check','!ppl_zes_wzus',_in.RU,_in.MU,_in.T)<>''
|| return('Generowanie raportów ZUS'@@)
?};

'Generowanie raportu ZUS-%1 za %2'@@[~-_in.T,date(_in.RU,_in.MU,0)$8]


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Treść komunikatu o błędzie
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Generowanie raportów ZUS niemożliwe'@


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Zakończ - przejdź do następnego etapu procesu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();

_par.mp.done();

'key:F2'


\keep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Ok - podtrzymaj czynność na liście zadań.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

_mp:=_par.mp;
_mp.keep();

'key:F2'


\lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyszukuje listę typu SUM w podanym miesiącu
::   WE: _a [INTEGER] - rok
::       _b [INTEGER] - miesiąc
::   WY: wskazanie listy płac lub null jeśli w miesiącu nie występuje lista typu SUM
::----------------------------------------------------------------------------------------------------------------------
_ref:=null;
O.cntx_psh();
O.index('LISTYUBZ');
O.prefix(exec('ref_firma','ustawienia'));
{? O.find_key(_a,_b,'SUM')
|| _ref:=O.ref()
?};
O.cntx_pop();
_ref


\rap_zus_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywróć zapamiętane wartości parametrów raportu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_in:=_par.in;
_ib:=_par.int;

: niezbędne ze względu na wyliczenia składników
exec('dekl','lista_plac');

ZUS.blank(1);

{? type_of(_ib.FOLDER)=type_of(ZUS.FOLDER)
|| ZUS.FOLDER:=_ib.FOLDER
|| ZUS.FOLDER:=exec('get','#profile',,OPERATOR.USER().KOD,'lokalny katalog raportów ZUS')
?};
{? type_of(_ib.PLIK)=type_of(ZUS.PLIK)
|| ZUS.PLIK:=_ib.PLIK
?};
{? type_of(_ib.SYMBOL)=type_of(ZUS.SYMBOL)
|| ZUS.SYMBOL:=_ib.SYMBOL
?};
{? type_of(_ib.DATA)=type_of(ZUS.DATA)
|| ZUS.DATA:=_ib.DATA
?};
{? type_of(_ib.TERMIN)=type_of(ZUS.TERMIN)
|| ZUS.TERMIN:=_ib.TERMIN
?};
{? type_of(_ib.GIODO)=type_of(ZUS.GIODO)
|| ZUS.GIODO:=_ib.GIODO
?};

ZUS.RAPORT:='ZUS '+(~-_in.T);

{? ZUS.PLIK=''
|| ZUS.PLIK:=-_in.T
?};

{? ZUS.SYMBOL=''
|| {? (',dra,rca,rsa,rza,rpa,'*(','+-_in.T+','))
   || _id:='';
      KORN.cntx_psh();
      KORN.index(KORN.ndx_tmp(,1,'RU',,,'MU',,,'P','FIRMA',));
      KORN.prefix(_in.RU,_in.MU,exec('ref_firma','ustawienia'));
      KOR.cntx_psh;
      KOR.index('KOR_PNR');
      {? KORN.first
      || {!
         |? {? 1-KORN.LT-3<>($_in.RU+2)+('0'+$_in.MU+2)
            || KOR.prefix(KORN.ref);
               {? KOR.first || _id:='02' ?}
            ?};
            _id='' & KORN.next()
         !}
      ?};
      KOR.cntx_pop();
      KORN.ndx_drop();
      KORN.cntx_pop();
      {? _id=''
      || _id:='01'
      ?};
      ZUS.SYMBOL:=_id+form(_in.MU,-2)+$_in.RU
   ?}
?};

{? ZUS.DATA=date(0,0,0)
|| ZUS.DATA:=date(_in.RU,_in.MU,0)
?};
~~


\rap_zus_save
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zapamiętuje informacje podane przez użytkownika na potrzeby ponownego uruchomienia czynności.
::   WE: [_a] - 0(domyślnie)/1 - czy pominąć zapis ścieżki do katalogu w pliku konfiguracyjnym
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;

_ib.FOLDER:=ZUS.FOLDER;
_ib.PLIK:=ZUS.PLIK;
_ib.SYMBOL:=ZUS.SYMBOL;
_ib.DATA:=ZUS.DATA;
_ib.TERMIN:=ZUS.TERMIN;
_ib.GIODO:=ZUS.GIODO;

{? ~(var_pres('_a')=type_of(0) & _a=1)
|| exec('set','#profile',,OPERATOR.USER().KOD,'lokalny katalog raportów ZUS',_ib.FOLDER)
?};

_rv.RU:=_in.RU;
_rv.MU:=_in.MU;
_rv.SYMBOL:=ZUS.SYMBOL;

_par.mp.save(_ib,_rv);
~~


\rap_zus_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
:: ~OST: INFEXISTS
::----------------------------------------------------------------------------------------------------------------------
_inTerm:=exec('interm','#system');
_chk:=
   {? _inTerm
   || {? ZUS.RAPORT='ZUS RIA'
      || __CHK.record(ZUS,,'PLIK','DATA')
      || __CHK.record(ZUS,,'PLIK','SYMBOL','DATA')
      ?}
   || {? ZUS.RAPORT='ZUS RIA'
      || __CHK.record(ZUS,,'FOLDER','PLIK','DATA')
      || __CHK.record(ZUS,,'FOLDER','PLIK','SYMBOL','DATA')
      ?}
   ?};
{? _chk<>''
|| return(_chk)
?};

{? ~_inTerm
|| {? fexists('@'+ZUS.FOLDER)<>2
   || FUN.emsg('Folder o podanej nazwie nie istnieje.'@);
      return('FOLDER')
   ?}
?};

1


\zus_folder_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po edycji pola zawierającego nazwę lokalnego katalogu raportów.
::   WE:
::   WY:
:: ~OST: INFEXISTS
::----------------------------------------------------------------------------------------------------------------------
{? form(fld)<>'' & fexists('@'+fld)<>2
|| FUN.emsg('Folder o podanej nazwie nie istnieje.'@);
   return(0)
?};
1


\zus_plik_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po edycji pola zawierającego nazwę pliku z raportem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------


\setup_buttons
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala właściwości przycisków "Zakończ", "OK", "Anuluj" zależnie od kontekstu wywołania.
::       Zakłada się, że przyciski są identyfikowane odpowiednio przez "DONE", "OK", "ANULUJ"
::   WE: _a - alias zmiennej / tabeli
::       _b - akronim okienka redakcji
::       _c - tryb działania: 1 - mikroczynność, 0 - proces
::      [_d]- identyfikator "Zakończ" (domyślnie: "DONE")
::      [_e]- identyfikator "Ok" (domyślnie: "OK")
::      [_f]- identyfikator "Anuluj" (domyślnie: "ANULUJ")
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_done:={? var_pres('_d')=type_of('') || _d || 'DONE' ?};
_ok:={? var_pres('_e')=type_of('') || _e || 'OK' ?};
_anuluj:={? var_pres('_f')=type_of('') || _f || 'ANULUJ' ?};
exec('setup_buttons','#window',_a,_b,_c,_done,_ok,_anuluj)


\zus_dra_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS DRA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_inTerm:=exec('interm','#system');

_we:=ZUS.mk_edit('Raport ZUS DRA'@,0,'#zusdra',27,7);
ZUS.win_esep(_we,'Parametry działania'@);
{? ~_inTerm
|| ZUS.win_efld(_we,ZUS,'FOLDER',,,55,0,0,,0,'Lokalny folder raportów ZUS'@);
   _fbtn1:=ZUS.fld_ebtn(_we,'text=%1,icon="xwin16.png:90"'[''],"exec('zus_folder_f3','rap_zus')");
   ZUS.btn_eopt(_we,_fbtn1,'tooltip=%1'['Wybór folderu'@]);
   ZUS.efld_opt(_we,'mark=1',ZUS,'FOLDER')
?};
ZUS.win_efld(_we,ZUS,'PLIK',,,60,0,0,,0,'Plik zawierający raport (bez rozszerzenia)'@);
ZUS.efld_opt(_we,'mark=1',ZUS,'PLIK');
{? date(_par.in.RU,_par.in.MU,1)<date(2022,1,1)
|| ZUS.win_efld(_we,ZUS,'TERMIN',,,59,5,0,,0,
      'Termin przysyłania raportu'@,'radio-buttons','left_label=1',
      'do 5 dnia następnego miesiąca'@,"1",
      'do 10 dnia następnego miesiąca'@,"2",
      'do 15 dnia następnego miesiąca'@,"3",
      'do 15 dnia następnego miesiąca (wspólnicy spółek)'@,"4",
      'deklaracja składana za sędziów, prokuratorów, żołnierzy'@,"5"
      )
|| ZUS.win_efld(_we,ZUS,'TERMIN',,,59,5,0,,0,
      '1-dla jednostek budżetowych i samorządowych zakładów budżetowych \n'
      '3-dla płatników składek posiadających osobowość prawną \n'
      '5-lub funkcjonariuszy, za których jest obowiązek opłacania składek na ubezpieczenia społeczne \n'
      '6-dla pozostałych płatników składek'@,
      'radio-buttons','left_label=1',
      '1 - do 5. dnia następnego miesiąca za miesiąc poprzedni'@,"1",
      '3 - do 15. dnia następnego miesiąca'@,"3",
      '5 - deklaracja składana za sędziów, prokuratorów, żołnierzy'@,"5",
      '6 - do 20. dnia następnego miesiąca – dla pozostałych płatn.'@,"6"
      )
?};
ZUS.win_efld(_we,ZUS,'SYMBOL',,,10,0,0,,0,'Identyfikator raportu'@);
ZUS.efld_opt(_we,'mark=1',ZUS,'SYMBOL');
ZUS.win_efld(_we,ZUS,'DATA',,,10,0,0,,0,'Data wypełnienia'@);
ZUS.efld_opt(_we,'mark=1',ZUS,'DATA');
_btn1:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'[exec('text_red_zakoncz','#window','PKD_A')],
   "params_exec('done','!ppl_zes_wzus')");
ZUS.btn_eopt(_we,_btn1,'tooltip=%1'['Zakończenie wykonywania bieżącej czynności'@]);
_btn2:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'[exec('text_red_ok','#window')],
   "params_exec('keep','!ppl_zes_wzus')");
ZUS.btn_eopt(_we,_btn2,'tooltip=%1'['Zatwierdzenie okienka'@]);
_btn3:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'['Anuluj'@],'key:Esc');
ZUS.btn_eopt(_we,_btn3,'tooltip=%1'['Zamknięcie okna'@]);

exec('setup_buttons','!ppl_zes_wzus',ZUS,_we,_par.mp.isMicro(),_btn1,_btn2,_btn3);

ZUS.win_edit(_we);
ZUS.edit("exec('rap_zus_ae','!ppl_zes_wzus')")


\zus_dra_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy deklarację ZUS DRA - raport rozliczeniowy
::   WE: _a [_O] - wskazanie listy płac
::       [_b] [STRING] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::   WY:
::  OLD: \generuj/rap_dra.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};
O.clear();
{? O.seek(_a)
||
:  parametry raportu
   _zdate:=date(0,0,0);
   _start:=date(O.RU,O.MU,1);
   _stop:=date(O.RU,O.MU,0);

:  wylicz składki finansowane przez budżet państwa
   exec('wyl_wych','rap_zus');

:  utwórz bufor raportu
   _DRA:=obj_new(58);
   {! _ii:=1..obj_len(_DRA)
   |! _DRA[_ii]:=0
   !};
   _NO_PRZL:=obj_new(7);
   {! _ii:=1..obj_len(_NO_PRZL)
   |! _NO_PRZL[_ii]:=0
   !};
   _ub_tmp:=tab_tmp(1,
      'REF','INTEGER','Ubezpieczony'@,
      'WYM','REAL','Wymiar zatrudnienia'@
   );
   _ub_fep:=tab_tmp(1,
      'REF','INTEGER','Ubezpieczony'@
   );

   _oddo:=exec('buf_oddo','rap_zus');
:  karta ubezpieczeniowa - składki od wynagrodzeń osób
:  zatrudnionych na podstawie umowy o pracę.
   P.cntx_psh();
   P.index('PRACOSOB');
   H.cntx_psh();
   H.index('_HISTKOD');

   KU.cntx_psh();
   KU.clear();
   KU.f_set(,,'KU.FIRMA=:_a and KU.R=:_b and KU.M=:_c',exec('ref_firma','ustawienia'),O.RU,O.MU);
   _loop:=KU.f_first();
   {!
   |? _loop
   |! KU.OSOBA();
      _stop_os:=
         {? (_data:=exec('ustal_dz','rap_zus',O.RU,O.MU))=_zdate
         || date(O.RU,O.MU,0)
         || _data
         ?};
      {? _stop_os>=date(O.RU,O.MU,1)
      || _ub_tmp.REF:=#KU.OSOBA;
         _ub_tmp.WYM:={? _start<=date(2007,12,31) || exec('wym_zat','rap_zus',KU.OSOBA,_stop,2,_oddo) ?};
         _ub_tmp.add()
      ?};
      {? KU.S29>0
      || _ub_fep.REF:=#KU.OSOBA;
         _ub_fep.add()
      ?};
:     Składki na ubezpieczenia
:     ubezpieczony      płatnik           budżet państwa
:     emerytalne
      _DRA[4]+=KU.S2;   _DRA[7]+=KU.S4;   _DRA[10]+=KU.S8+KU.S26;
:     rentowe
      _DRA[5]+=KU.S3;   _DRA[8]+=KU.S5;   _DRA[11]+=KU.S9+KU.S27;
:     chorobowe
      _DRA[22]+=KU.S11;
:     wypadkowe
      _DRA[26]+=KU.S12;
:     zdrowotne
      _DRA[46]+=KU.S14;
:     zdrowotne urlop wych.
      _DRA[48]+=KU.S22;
:     FP i FGŚP
      _DRA[52]+=KU.S17;
      _DRA[53]+=KU.S18;
:     FEP
      _DRA[57]+=KU.S29;
      _loop:=KU.f_next()
   !};
   KU.f_clear();
   KU.cntx_pop();

:  uwzglednij korekty skladek
   {? (_KOR:=sql_exec('!sql_dra_kor',exec('zus_rca_kor','rap_zus',O.RU,O.MU))).first()
   || {!
      |? {? _KOR.RN=765 || _DRA[ 4]+=_KOR.SKL; _NO_PRZL[1]+=_KOR.SKL
         |? _KOR.RN=766 || _DRA[ 5]+=_KOR.SKL; _NO_PRZL[2]+=_KOR.SKL
         |? _KOR.RN=767 || _DRA[22]+=_KOR.SKL; _NO_PRZL[3]+=_KOR.SKL
         |? _KOR.RN=792 || _DRA[46]+=_KOR.SKL; _NO_PRZL[4]+=_KOR.SKL
         |? _KOR.RN=958 || _DRA[ 7]+=_KOR.SKL; _NO_PRZL[5]+=_KOR.SKL
         |? _KOR.RN=959 || _DRA[ 8]+=_KOR.SKL; _NO_PRZL[6]+=_KOR.SKL
         |? _KOR.RN=960 || _DRA[26]+=_KOR.SKL; _NO_PRZL[7]+=_KOR.SKL
         ?};
         _KOR.next()
      !}
   ?};
   obj_del(_KOR);

:  aktualizacja listy ubezpieczonych o osoby zatrudnione,
:  które nie mają naliczonego wynagrodzenia - jednak są
:  ubezpieczone - zgodność z raportem RCA
   P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P);
   {? P.first()
   || {!
      |? {? P.DZA<=_stop & (P.DZ=_zdate | _start<=P.DZ) & ~_ub_tmp.find_key(#P.OSOBA) &
::       Dodatkowo sprawdzenie czy przez cały miesiąc nie był oddelegowany bez zus:
           ~exec('okr_odd_bzus','oddelegowanie',P.ref(),_start,_stop)
         || _data:={? P.DZ=_zdate || _stop
                   |? _stop<P.DZ || _stop
                   || P.DZ
                   ?};
            _ub_tmp.REF:=#P.OSOBA;
            _ub_tmp.WYM:={? _start>date(2007,12,31)
                         || 0
                         || P.cntx_psh();
                            _wym:=exec('wym_zat','rap_zus',P.OSOBA,_data,2,_oddo);
                            P.cntx_pop();
                            _wym
                         ?};
            _ub_tmp.add()
         ?};
         P.next()
      !}
   ?};

   H.cntx_pop();
   P.cntx_pop();

   obj_del(_oddo);
   &_oddo;

:  Aktualizacja listy ubezpieczonych o zleceniobiorcow,
:  bez wzgledu na to czy maja naliczone wynagrodzenie czy nie.
   S_ZUS.cntx_psh();
   ZC_INFO.cntx_psh();
   ZC_INFO.index('ZLECFDW');
   ZC_INFO.prefix(exec('ref_firma','ustawienia'));
   {? ZC_INFO.last()
   || {!
      |? {? ZC_INFO.DW>=_start
         || {? ZC_INFO.DU<=_stop &
               (ZC_INFO.ZUS='T' | ZC_INFO.FC='T' | ZC_INFO.FW='T' | ZC_INFO.FP='T' | ZC_INFO.FG='T' | ZC_INFO.KC='T') &
               2+ZC_INFO.TTUB().KOD<>'01' &
               ~_ub_tmp.find_key(#ZC_INFO.OSOBA)
            || _ub_tmp.REF:=#ZC_INFO.OSOBA;
               _ub_tmp.WYM:=0;
               _ub_tmp.add()
            ?};
            ZC_INFO.prev()
         ?}
      !}
   ?};
   ZC_INFO.cntx_pop();
   S_ZUS.cntx_pop();

:  raportowanie składek od wynagrodzeń wypłaconych na
:  podstawie rachunków wystawionych do umów-zleceń
   RH.cntx_psh();
   RH.index('DOK');
   RH.prefix(exec('ref_firma','ustawienia'),O.RU,O.MU);
   LS.cntx_psh();
   O.cntx_psh();
   _zlicz:="
      _kw:=0;
      LS.prefix(RH.ref(),_a);
      {? LS.first()
      || {!
         |? _kw+=LS.KW$2;
            LS.next()
         !}
      ?};
      _kw";
   {? RH.first
   || {!
      |? RH.ZLE();
         LS.use(RH.O().LT);
         LS.index('ZLEC');
         {? ~_ub_fep.find_key(#ZC.OSOBA) & RH.FEP='T'
         || _ub_fep.REF:=#ZC.OSOBA;
            _ub_fep.add()
         ?};

:        Składki na ubezpieczenia
:        ubezpieczony          płatnik               budżet
:        emerytalne
         _DRA[4]+=_zlicz(765); _DRA[7]+=_zlicz(958); _DRA[10]+=_zlicz(971);
:        rentowe
         _DRA[5]+=_zlicz(766); _DRA[8]+=_zlicz(959); _DRA[11]+=_zlicz(972);
:        chorobowe
         _DRA[22]+=_zlicz(767);
:        wypadkowe
         _DRA[26]+=_zlicz(960);
:        zdrowotne
         _DRA[46]+=_zlicz(792);
:        FP i FGŚP
         _DRA[52]+=_zlicz(982);
         _DRA[53]+=_zlicz(983);
:        FEP
         _DRA[57]+=_zlicz(962);
         RH.next()
      !}
   ?};
   LS.cntx_pop();
   O.cntx_pop();
   RH.cntx_pop();

:: Uwzglednienie korekt ZUS
   _licz:="
      _kw:=0;
      KOR_Z.prefix(KORN_Z.ref(),__RUB.ref(_a));
      {? KOR_Z.first()
      || _kw+=KOR_Z.KW
      ?};
      _kw
   ";
   KOR_Z.index('KORN_Z');
   KORN_Z.cntx_psh();
   KORN_Z.clear();
   KORN_Z.f_set(
      'RU,MU',
      'join ZC using (KORN_Z.ZC,ZC.REFERENCE) join P using (ZC.P,P.REFERENCE)',
      'P.FIRMA=:_a and KORN_Z.RU=:_b and KORN_Z.MU=:_c',
      exec('ref_firma','ustawienia'),O.RU,O.MU
   );
   {? KORN_Z.f_first()
   || {!
      |?
:           Składki na ubezpieczenia
:           ubezpieczony         płatnik              budżet państwa
:           emerytalne
         _DRA[4]+=_licz(765); _DRA[7]+=_licz(958); _DRA[10]+=_licz(971);
:           rentowe
         _DRA[5]+=_licz(766); _DRA[8]+=_licz(959); _DRA[11]+=_licz(972);
:           chorobowe
         _DRA[22]+=_licz(767);
:           wypadkowe
         _DRA[26]+=_licz(960);
:           zdrowotne
         _DRA[46]+=_licz(792);
:           FP i FGŚP
         _DRA[52]+=_licz(982);
         _DRA[53]+=_licz(983);
         KORN_Z.f_next()
      !}
   ?};
   KORN_Z.f_clear();
   KORN_Z.cntx_pop();

:  informacje o wypłaconych świadczeniach
   O.cntx_psh();
   O.index('LISTYPLU');
   O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.RU,O.MU);
   _do0404:=(date(O.RU,O.MU,0)<=date(2004,4,0));

:  zasilki z umow zlecen
   tab_nb:=sql_exec('!sql_dra_niez',_start,_stop,exec('ref_firma','ustawienia'));
   tab_nb.index(tab_nb.ndx_tmp(,1,'RN',,));
:  wyplacone swiadczenia z umow zlecen
   {? tab_nb.first()
   || {!
      |? {? __RUB.sys_attr(tab_nb.RN,12231,date(O.R,O.M,0)) & tab_nb.RN<>513 & tab_nb.SW<>'322' & tab_nb.SW<>'324'
:           finansowane z ubezpieczenia chorobowego
         || _DRA[38]+=tab_nb.KW
:           finansowane z ubezpieczenia wypadkowego
         || _DRA[40]+=tab_nb.KW
         ?};
         tab_nb.next()
      !}
   ?};
   obj_del(tab_nb);
   &tab_nb;

:  listy plac
   _listy:='';
   {? O.first()
   || N.index('NIEOLIST');
      _sum:="
         _sum:=0;
         {! _arg:=1.._
         |! {? R.find_key(_[_arg])
            || LS.prefix(exec('ref_firma','ustawienia'),R.ref());
               {? LS.first()
               || {!
                  |? _sum+=LS.KW;
                     LS.next()
                  !}
               ?}
            ?}
         !};
         _sum";
      R.index('RUBKOD');
      R.prefix();
      {!
      |? FUNKCJE.OTWOLIST();
         _listy+='\''+VAR.NAZWALIS+'\',';
         LS.index('NAZWRUBR');
:        wypłacone świadczenia
:        finansowane z ubezpieczenia chorobowego
         _DRA[38]+=_sum(510,511,514,515,516,517,523,524,529,530,531,533,537);
         _DRA[38]+=_sum(711,712,713,714,717);
         {? _start<date(2016,3,1)
         || _DRA[38]+=_sum(7018,7071)
         ?};
:        finansowane z ubezpieczenia wypadkowego
         _DRA[40]+=_sum(512,513);
         _DRA[40]+=_sum(716);
:           uwzglednienie nieobecnosci korygowanych oraz wycofanych
         N.prefix(exec('ref_firma','ustawienia'),'T',VAR.NAZWALIS);
         {? N.first()
         || {!
            |? {? __RUB.sys_attr(N.NB,12231,date(O.R,O.M,0)) & N.KDSW().KOD<>'322'
               || _DRA[38]-=N.WART
               |? __RUB.sys_attr(N.NB,12232,date(O.R,O.M,0))
               || _DRA[40]-=N.WART
               ?};
               {? N.RODZAJ='R' & __RUB.sys_attr(N.NB,12,N.OD)
               || _n_ref:=#N.ref();
                  N.cntx_psh();
                  N.index('NIEOTREE');
                  N.prefix(_n_ref);
                  _jest_l:=0;
                  {? N.first()
                  || {!
                     |? {? N.LT<>''
                        || {? __RUB.sys_attr(N.NB,12231,date(O.R,O.M,0)) & N.KDSW().KOD<>'322'
                           || _DRA[38]+=N.WART
                           |? __RUB.sys_attr(N.NB,12232,date(O.R,O.M,0))
                           || _DRA[40]+=N.WART
                           ?};
                           _jest_l:=1
                        ?};
                        N.next()
                     !}
                  ?};
                  N.cntx_pop();
                  {? ~_jest_l
                  || {? __RUB.sys_attr(N.NB,12231,date(O.R,O.M,0)) & N.KDSW().KOD<>'322'
                     || _DRA[38]+=N.WART
                     |? __RUB.sys_attr(N.NB,12232,date(O.R,O.M,0))
                     || _DRA[40]+=N.WART
                     ?}
                  ?}
               ?};
               N.next()
            !}
         ?};
         N.prefix(exec('ref_firma','ustawienia'),'N',VAR.NAZWALIS);
         {? N.first()
         || {!
            |? {? N.RODZAJ='K'
               || N.cntx_psh();
                  N.prefix();
                  {? N.seek(N.N_KOR,) & __RUB.sys_attr(N.NB,12,N.OD)
                  || N.cntx_pop();
                     {? __RUB.sys_attr(N.NB,12231,date(O.R,O.M,0)) & N.KDSW().KOD<>'322'
                     || _DRA[38]-=N.WART
                     |? __RUB.sys_attr(N.NB,12232,date(O.R,O.M,0))
                     || _DRA[40]-=N.WART
                     ?}
                  || N.cntx_pop()
                  ?}
               ?};
               N.next()
            !}
         ?};
:        finansowane z budżetu państwa
         {? _do0404
         || _DRA[41]+=_sum(520,521)
         ?};
         _DRA[41]+=_sum(535,536,539,540,542,543,544);
:        zależnie od okresu, poprzednio zasiłek porodowy finansowany był z
:        ubezpieczenia chorobowego a obecnie dodatek porodowy finansowany
:        jest z budżetu państwa
         _DRA[{? _do0404 || 38 || 41 ?}]+=_sum(541);
         {? _start>=date(2016,3,1)
         || _DRA[41]+=_sum(7018,7071)
         ?};
         O.next()
      !}
   ?};
   &_do0404;
   O.cntx_pop();
   FUNKCJE.OTWOLIST();

:  świadczenia rehabilitacyjne wypłacone z ubezpieczenia wypadkowego
:  ("korekta" wartości odczytanych z lista płac - _DRA[38] i _DRA[40])
   _swr:=sql(
      'select sum(N.STD*(N.NK-N.DN-N.OP*0.25)) KW '
      'from   N join R join S_ZUS using (N.KDSW,S_ZUS.REFERENCE) '
      'where  N.FIRMA=:_c and R.RN=:_b and N.KOR=\'N\' and S_ZUS.KOD=\'322\' and N.LT in (:_a)',
      _listy-1,__RUB.sys_rub(12223,date(O.R,O.M,0)).RN,exec('ref_firma','ustawienia')
   );
   {? _swr.first()
   || _DRA[38]-=_swr.KW$2;
      _DRA[40]+=_swr.KW$2
   ?};
   obj_del(_swr);
   _swr:=sql(
      'select LSW.KW '
      'from   LSW join R join S_ZUS using (LSW.KDSW,S_ZUS.REFERENCE) join P using (LSW.P,P.REFERENCE) '
      'where  P.FIRMA=:_b and S_ZUS.KOD=\'324\' and LSW.LT in (:_a)',
      _listy-1,exec('ref_firma','ustawienia')
   );
   {? _swr.first()
   || _DRA[38]-=_swr.KW$2;
      _DRA[40]+=_swr.KW$2
   ?};
   obj_del(_swr);


:  ubezpieczenia emerytalne i rentowe
   _DRA[6] :=_DRA[4] +_DRA[5];
   _DRA[9] :=_DRA[7] +_DRA[8];
   _DRA[12]:=_DRA[10]+_DRA[11];

   _DRA[1] :=_DRA[4] +_DRA[7] +_DRA[10];
   _DRA[2] :=_DRA[5] +_DRA[8] +_DRA[11];
   _DRA[3] :=_DRA[1] +_DRA[2];

:  ubezpieczenia chorobowe i wypadkowe
   _DRA[19]:=_DRA[22]+_DRA[25]+_DRA[28];
   _DRA[20]:=_DRA[23]+_DRA[26]+_DRA[29];
   _DRA[21]:=_DRA[19]+_DRA[20];
   _DRA[24]:=_DRA[22]+_DRA[23];
   _DRA[27]:=_DRA[25]+_DRA[26];

:  kwota do przekazania
   _DRA[37]:=_DRA[6]+_DRA[9]+_DRA[24]+_DRA[27];

:  kwota wypłacownych świadczeń
   _DRA[42]:=_DRA[38]+_DRA[39]+_DRA[40]+_DRA[41];

:  ubezpieczenie zdrowotne
   _DRA[49]:=_DRA[45]+_DRA[46];
   _DRA[50]:={? _start<=date(2003,3,1) || (_DRA[46]/1000)$2 ?};
   _DRA[51]:=_DRA[49]-_DRA[50];

:  na FP i FGŚP
   _DRA[54]:=_DRA[52]+_DRA[53];

:  rozliczenie w części IX
:  kwota do zwrotu przez ZUS
   _DRA[43]:=-(_DRA[37]+_DRA[51]+_DRA[54]+_DRA[57]-_DRA[42]);
:  kwota do zapłaty przez płatnika
   _DRA[44]:=-_DRA[43];
   {? _DRA[43]<0 || _DRA[43]:=0 ?};
   {? _DRA[44]<0 || _DRA[44]:=0 ?};


:  liczba ubezpieczonych i pracowników w przeliczeniu na wymiar czasu pracy
   _nfo:=sql('select count(REF) LU, sum(WYM) WY from :_a',_ub_tmp);
   _DRA[58]:=_nfo.LU;
   obj_del(_nfo);

:  liczba pracownikow oraz stanowisk FEP
   _tab:=sql(
      'select distinct H.ST '
      'from H join H_ZM join P '
      'where P.FIRMA=:_c and H.SP=\'T\' and H_ZM.KZ=\'Z\' and H.OD<=to_date(:_b) and '
      '(H.DO is null or to_date(:_a)<=H.DO)',
      _start,_stop,exec('ref_firma','ustawienia')
   );
   _DRA[55]:=_ub_fep.size;
   _DRA[56]:=_tab.size;
   &_ub_fep;

   {? _out:=exec('otworz','rap_zus','ZUS DRA')
   || exec('zus_dra_zapisz','!ppl_zes_wzus',_DRA,_out,_NO_PRZL);
      fclose(_out);
      {? _inTerm
      || _pth:=exec('nazwa_pliku','rap_zus');
         _name:=ZUS.PLIK+'.xml';
         dlg_save(_pth,0,_name)
      ?};
      exec('info','rap_zus',3,'ZUS DRA')
   ?};

   obj_del(_DRA)
?}


\zus_dra_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzenie zapisu podstawowego
::   WE: _a - tablica _DRA
::       _b - plik zapisu
::       _c - tablica z danymi o korektach
::  OLD: \zapisz/rap_dra.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=ZUS.DATA;
_dataxml:=form(_data~1,-4,0,'9')+'-'+form(_data~2,-2)+'-'+form(_data~3,-2);

_form:="form((_a$2)*100,-_b,,'99')";

:: Zapis wiersza do pliku z konwersja kodowania
_to_file:=exec('to_file','rap_zus');
:: Konwersja znakow zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartosci liczbowych do wymaganego formatu XML
_rate:=exec('rate','rap_zus');

:: Naglowek dokumentu
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSDRA id_dokumentu="1">');

:: I. Dane organizacyjne (termin przesylania deklaracji/identyfikator deklaracji - elementy identyfikatora NN MMRRRR)
_to_file(_b,'<I>');
_to_file(_b,'  <p1>'+$ZUS.TERMIN+'</p1>');
_to_file(_b,'  <p2><p1>'+(2+ZUS.SYMBOL)+'</p1>'+
                  '<p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>'+
              '</p2>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne platnika skladek
exec('xml_dane_platn','rap_zus',_b,'II');

:: III. Inne informacje';
_to_file(_b,'<III>');
:: Liczba ubezpieczonych
_to_file(_b,'  <p1>'+$_a[58]+'</p1>');
:: stopa procentowa skladek na ubezp. wypadkowe
_to_file(_b,'  <p3>'+(_ab:=_form(KST.PRFW$2,4); (($(#(_ab-2)))+'.'+(_ab+2)) )+'</p3>');
_to_file(_b,'</III>');

:: IV. Zestawienie naleznych skladek na ubezpieczenia spoleczne oraz zrodel finansowania
_to_file(_b,'<IV>');
_to_file(_b,'  <p1>'+ _rate(_a[1]) +'</p1>');        'suma skladek na ub. emerytalne';
_to_file(_b,'  <p2>'+ _rate(_a[2]) +'</p2>');        'suma skladek na ub. rentowe';
_to_file(_b,'  <p3>'+ _rate(_a[3]) +'</p3>');        'Suma kwot skladek na ubezpieczenia emerytalne i rentowe';
_to_file(_b,'  <p4>'+ _rate(_a[4]) +'</p4>');        'Kwota skladek na ubezpieczenie emerytalne - finansowana przez ubezpieczonych';
_to_file(_b,'  <p5>'+ _rate(_a[5]) +'</p5>');        'Kwota skladek na ubezpieczenia rentowe- finansowana przez ubezpieczonych';
_to_file(_b,'  <p6>'+ _rate(_a[6]) +'</p6>');        'Suma kwot skladek na ubezpieczenia emerytalne i rentowe finansowana przez ubezpieczonych';
_to_file(_b,'  <p7>'+ _rate(_a[7]) +'</p7>');        'Kwota skladek na ubezpieczenie emerytalne - finansowana przez platnika';
_to_file(_b,'  <p8>'+ _rate(_a[8]) +'</p8>');        'Kwota skladek na ubezpieczenia rentowe- finansowana przez platnikae';
_to_file(_b,'  <p9>'+ _rate(_a[9]) +'</p9>');        'Suma kwot skladek na ubezpieczenia emerytalne i rentowe finansowana przez platnika';
_to_file(_b,'  <p10>'+_rate(_a[10])+'</p10>');       'Kwota skladek na ubezpieczenie emerytalne - finansowana przez budzet panstwa';
_to_file(_b,'  <p11>'+_rate(_a[11])+'</p11>');       'Kwota skladek na ubezpieczenia rentowe - finansowana przez budzet panstwa';
_to_file(_b,'  <p12>'+_rate(_a[12])+'</p12>');       'Suma kwot skladek na ubezpieczenia emerytalne i rentowe finansowana przez budzet panstwa';
_to_file(_b,'  <p13>'+_rate(_a[13])+'</p13>');       'Kwota skladek na ubezpieczenie emerytalne - finansowana przez PFRON';
_to_file(_b,'  <p14>'+_rate(_a[14])+'</p14>');       'Kwota skladek na ubezpieczenia rentowe- finansowana przez PFRON';
_to_file(_b,'  <p15>'+_rate(_a[15])+'</p15>');       'Suma kwot skladek na ubezpieczenia emerytalne i rentowe finansowana przez PFRON';
_to_file(_b,'  <p16>'+_rate(_a[16])+'</p16>');       'Kwota skladek na ubezpieczenie emerytalne - finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p17>'+_rate(_a[17])+'</p17>');       'Kwota skladek na ubezpieczenia rentowe- finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p18>'+_rate(_a[18])+'</p18>');       'Suma kwot skladek na ubezpieczenia emerytalne i rentowe finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p19>'+_rate(_a[19])+'</p19>');       'Suma skladek - kwota skladek na ubezpieczenie chorobowe';
_to_file(_b,'  <p20>'+_rate(_a[20])+'</p20>');       'Suma skladek - kwota skladek na ubezpieczenie wypadkowe';
_to_file(_b,'  <p21>'+_rate(_a[21])+'</p21>');       'Suma kwot skladek na ubezpieczenia chorobowe i wypadkowe';
_to_file(_b,'  <p22>'+_rate(_a[22])+'</p22>');       'Kwota skladek na ubezpieczenie chorobowe finansowana przez ubezpieczonych';
_to_file(_b,'  <p23>'+_rate(_a[23])+'</p23>');       'Kwota skladek na ubezpieczenie wypadkowe finansowana przez ubezpieczonych';
_to_file(_b,'  <p24>'+_rate(_a[24])+'</p24>');       'Suma kwot na ubezpieczenia chorobowe i wypadkowe finansowane przez ubezpieczonych';
::Modyfikacje Platnik 9.01
_to_file(_b,'  <p25>'+_rate(_a[25])+'</p25>');       'Kwota skladek na ubezpieczenie chorobowe finansowana przez platnika';
_to_file(_b,'  <p26>'+_rate(_a[26])+'</p26>');       'Kwota skladek na ubezpieczenie wypadkowe finansowana przez platnika';
_to_file(_b,'  <p27>'+_rate(_a[27])+'</p27>');       'Suma kwot na ubezpieczenia chorobowe i wypadkowe finansowane przez platnika';
_to_file(_b,'  <p28>'+_rate(_a[28])+'</p28>');       'Kwota skladek na ubezpieczenie chorobowe - finansowana przez budzet panstwa';
_to_file(_b,'  <p29>'+_rate(_a[29])+'</p29>');       'Kwota skladek na ubezpieczenia wypadkowe - finansowana przez budzet panstwa';
_to_file(_b,'  <p30>'+_rate(_a[30])+'</p30>');       'Suma kwot skladek na ubezpieczenia chorobowe i wypadkowe finansowana przez budzet panstwa';
_to_file(_b,'  <p31>'+_rate(_a[31])+'</p31>');       'Kwota skladek na ubezpieczenie chorobowe finansowana przez PFRON';
_to_file(_b,'  <p32>'+_rate(_a[32])+'</p32>');       'Kwota skladek na ubezpieczenie wypadkowe finansowana przez PFRON';
_to_file(_b,'  <p33>'+_rate(_a[33])+'</p33>');       'Suma kwot na ubezpieczenia chorobowe i wypadkowe finansowane przez PFRON';
_to_file(_b,'  <p34>'+_rate(_a[34])+'</p34>');       'Kwota skladek na ubezpieczenie chorobowe finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p35>'+_rate(_a[35])+'</p35>');       'Kwota skladek na ubezpieczenie wypadkowe finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p36>'+_rate(_a[36])+'</p36>');       'Suma kwot na ubezpieczenia chorobowe i wypadkowe finansowane przez Fundusz Koscielny';
_to_file(_b,'  <p37>'+_rate(_a[37])+'</p37>');       'Kwota skladek na ubezpieczenia spoleczne, ktore powinien przekazac platnik';
_to_file(_b,'</IV>');

:: V. Zestawienie wyplaconych swiadczen podlegajacych rozliczeniu w ciezar skladek na ubezpieczenia spoleczne
_to_file(_b,'<V>');
_to_file(_b,'  <p1>'+_rate(_a[38])+'</p1>');         'Kwota wyplaconych swiadczen z ub. chorobowego';
_to_file(_b,'  <p2>'+_rate(_a[39])+'</p2>');         'Kwota wynagrodzenia naleznego platnikowi od wyplaconych swiadczen z ubezpieczenia chorobowego';
_to_file(_b,'  <p3>'+_rate(_a[40])+'</p3>');         'Kwota wyplaconych swiadczen z ubezpieczenia wypadkowego';
_to_file(_b,'  <p4>'+_rate(_a[41])+'</p4>');         'Kwota wyplaconych swiadczen finansowanych z budzetu panstwa';
_to_file(_b,'  <p5>'+_rate(_a[42])+'</p5>');         'Laczna kwota do potracenia';
_to_file(_b,'</V>');

:: VI. Zestawienie naleznych skladek na ubezpieczenie zdrowotne
_to_file(_b,'<VI>');
_to_file(_b,'  <p1>'+_rate(_a[45])+'</p1>');         'Kwota naleznych skladek do przekazania przez platnika';
_to_file(_b,'  <p2>'+_rate(_a[46])+'</p2>');         'Kwota naleznych skladek finansowana przez ubezpieczonych';
_to_file(_b,'  <p3>'+_rate(_a[47])+'</p3>');         'Kwota naleznych skladek finansowana przez Fundusz Koscielny';
_to_file(_b,'  <p4>'+_rate(_a[48])+'</p4>');         'Kwota naleznych skladek zdrowotnych BP';
_to_file(_b,'  <p5>'+_rate(_a[49])+'</p5>');         'Kwota naleznych skladek do przekazania przez platnika p.01+p.02';
_to_file(_b,'  <p6>'+_rate(_a[50])+'</p6>');         'Kwota naleznego wynagrodzenia dla platnika';
_to_file(_b,'  <p7>'+_rate(_a[51])+'</p7>');         'Kwota do zaplaty';
_to_file(_b,'</VI>');

:: VII. Zestawienie naleznych skladek na FP i FGSP
_to_file(_b,'<VII>');
_to_file(_b,'  <p1>'+_rate(_a[52])+'</p1>');         'Kwota naleznych skladek na Fundusz Pracy';
_to_file(_b,'  <p2>'+_rate(_a[53])+'</p2>');         'Kwota naleznych skladek na Fundusz Gwarancyjny';
_to_file(_b,'  <p3>'+_rate(_a[54])+'</p3>');         'Kwota do zaplaty';
_to_file(_b,'</VII>');

:: VIII. Zestawienie naleznych skladek na Fundusz Emerytur Pomostowych
_to_file(_b,'<VIII>');
_to_file(_b,'  <p1>'+$(_a[55]$0)+'</p1>');           'Liczba pracownikow, za ktorych jest oplacana skladka na Fundusz Emerytur pomostowych';
_to_file(_b,'  <p2>'+$(_a[56]$0)+'</p2>');           'Liczba stanowisk pracy w szczegolnych warunkach lub o szczegolnym charakterze';
_to_file(_b,'  <p3>'+_rate(_a[57])+'</p3>');         'Suma naleznych skladek na Fundusz Emerytur Pomostowych';
_to_file(_b,'</VIII>');

:: Zestawienie należnych składek do zwrotu/zapłaty
_to_file(_b,'<IX>');
_to_file(_b,'  <p1>'+_rate(_a[43])+'</p1>');         'Kwota do zwrotu przez ZUS';
_to_file(_b,'  <p2>'+_rate(_a[44])+'</p2>');         'Kwota do zaplaty';
_to_file(_b,'</IX>');

:: X. Deklaracja dochodu (wypelniaja osoby, ktore oplacaja skladki wylacznie za siebie)
_to_file(_b,'<X>');
_to_file(_b,'</X>');

:: XI. Forma opodatkowania obowiązująca w danym miesiącu oraz przychód i dochód z działalności gospodarczej
::     dla celów wyliczenia składki miesięcznej na ubezpieczenie zdrowotne
_to_file(_b,'<XI>');
_to_file(_b,'</XI>');

:: XII. Roczne rozliczenie składki na ubezpieczenie zdrowotne w przypadku stosowania opodatkowania w formie ryczałtu od
::      przychodów ewidencjonowanych
_to_file(_b,'<XII>');
_to_file(_b,'</XII>');

:: XIII. Oswiadczenie platnika skladek
_to_file(_b,'<XIII>');
_to_file(_b,'  <p1>'+_dataxml+'</p1>');                              'Data wypelnienia';
_to_file(_b,'</XIII>');

:: Stopka i zakonczenie dokumentu
_to_file(_b,'</ZUSDRA>');
_to_file(_b,'</KEDU>');


_par:=params_get();
_out:=_par.out;
_out.KW_U_SP:=_a[44]-(_c[1]+_c[2]+_c[3]+_c[4]+_c[5]+_c[6]+_c[7]);
_out.KW_U_ZD:=_out.KW_FPFG:=_out.KW_FEP:=0;
~~


\norm_nie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Normalizacja nieobecności wg kodu oraz daty od-do.
::   WE: _a - tabela nieobecnosci
::       _b - grupujaca tabela kodow nieobecnosci
::   WY:
::  OLD: \norm_nie/rap_rsa.fml
::----------------------------------------------------------------------------------------------------------------------
_od:=_a.OD;
_do:=_a.DO;
_mc:=_a.DO~2;
_ref:=_a.ref;
{? _a.next
|| {!
   |? {? _a.OD<=(_do+1) & _a.OD~2=_mc
      || _do:=_a.DO;
         _kw:=_a.KW;
         _dk:=_a.DK;
         _a.del;
         _a.seek(_ref);
         {? _a.DO<_do || _a.DO:=_do ?};
         _a.KW+=_kw;
         _a.DK+=_dk;
         _a.put;
         _b.N-=1;
         _b.put
      || _od:=_a.OD;
         _do:=_a.DO;
         _mc:=_a.DO~2;
         _ref:=_a.ref
      ?};
      _a.next
   !}
?}


\zus_rxa_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Okno do edycji parametrów raportu do ZUS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_inTerm:=exec('interm','#system');

_we:=ZUS.mk_edit('',0,'#zusrxa',36,10);
ZUS.win_esep(_we,'Parametry działania'@);
{? ~_inTerm
|| ZUS.win_efld(_we,ZUS,'FOLDER',,,48,0,0,,0,'Lokalny folder raportów ZUS'@);
   _fbtn1:=ZUS.fld_ebtn(_we,'text=%1,icon="xwin16.png:90"'[''],"exec('zus_folder_f3','rap_zus')");
   ZUS.btn_eopt(_we,_fbtn1,'tooltip=%1'['Wybór folderu'@]);
   ZUS.efld_opt(_we,'mark=1',ZUS,'FOLDER')
?};
ZUS.win_efld(_we,ZUS,'PLIK',,,53,0,0,,0,'Plik zawierający raport (bez rozszerzenia)'@);
ZUS.efld_opt(_we,'mark=1',ZUS,'PLIK');
{? -ZUS.RAPORT*'rca' & PAR_SKID.get(292)='N'
|| ZUS.RODZAJ:={? date(_par.in.RU,_par.in.MU,1)<date(2022,1,1) || 0 || 1 ?};
   ZUS.win_efld(_we,ZUS,'RODZAJ',,,,,,'Raport w wersji po 2022.1.1'@,,'Raport w wersji po 2022.1.1'@,'check-box',
      'left_label=1,check_label="%1"'['Przygotowanie raportu w wersji po 2022.1.1'@],"1","0")
?};
ZUS.win_efld(_we,ZUS,'SYMBOL',,,14,0,0,,0,'Identyfikator raportu'@);
ZUS.efld_opt(_we,'mark=%1,enable=%1'[$(~(-ZUS.RAPORT*'ria'))],ZUS,'SYMBOL');
ZUS.win_efld(_we,ZUS,'DATA',,,11,0,0,,0,'Data wypełnienia'@);
ZUS.efld_opt(_we,'mark=1',ZUS,'DATA');
ZUS.win_efld(_we,ZUS,'GIODO',,,3,0,0,,0,'Przekazanie danych osobowych zostanie odnotowane'@,
   'check-box','left_label=1,check_label="%1"'['Przekazanie danych osobowych zostanie odnotowane'@],"'T'","'N'");
_btn1:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'[exec('text_red_zakoncz','#window','PKD_A')],
   "params_exec('done','!ppl_zes_wzus')");
ZUS.btn_eopt(_we,_btn1,'tooltip=%1'['Zakończenie wykonywania bieżącej czynności'@]);
_btn2:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'[exec('text_red_ok','#window')],
   "params_exec('keep','!ppl_zes_wzus')");
ZUS.btn_eopt(_we,_btn2,'tooltip=%1'['Zatwierdzenie okienka'@]);
_btn3:=ZUS.win_ebtn(_we,'text=%1,panel=bottom,align=end,edit=1'['Anuluj'@],'key:Esc');
ZUS.btn_eopt(_we,_btn3,'tooltip=%1'['Zamknięcie okna'@]);

exec('setup_buttons','!ppl_zes_wzus',ZUS,_we,_par.mp.isMicro(),_btn1,_btn2,_btn3);

ZUS.win_edit(_we);
ZUS.hdr_edit('Raport %1'@[ZUS.RAPORT]);
ZUS.edit("exec('rap_zus_ae','!ppl_zes_wzus')")


\zus_rca_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS RCA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

exec('zus_rxa_dialog','!ppl_zes_wzus')


\zus_rca_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy deklarację ZUSRCA - raport imienny
::   WE: _a [_O] - wskazanie listy płac
::       [_b] [STRING] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::  OLD: \generuj/rap_rca.fml
::----------------------------------------------------------------------------------------------------------------------
_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};
O.clear();
{? O.seek(_a)
||
:: Parametry raportu
   _zdate:=date(0,0,0);
   _start:=date(O.RU,O.MU,1);
   _stop:=date(O.RU,O.MU,0);
:: Wyliczenie składek finansowanych przez budżet państwa
   exec('wyl_wych','rap_zus');
:: Utworzenie bufora raportu - istotna kolejność pierwszych 11 pol
   _RCA:=tab_tmp(2,
      'OSOBA' ,'INTEGER'   ,'Dane osobowe',
      'TTUB'  ,'STRING[6]' ,'Tytuł ubezpieczenia',
      'TPID'  ,'STRING[1]' ,'Typ identyfikatora',
      'NRID'  ,'STRING[11]','Identyfikator',
      'BLWN'  ,'STRING[1]' ,'Blokada składek',
      'WYMZ'  ,'STRING[6]' ,'Wymiar czasu pracy',
::
      'LZR'   ,'INTEGER'   ,'Liczba zas.rodz.',
      'KZR'   ,'REAL'      ,'Kwota zas.rodz.',
      'KZW'   ,'REAL'      ,'Kwota zas.wych.',
      'LZP'   ,'INTEGER'   ,'Liczba zas.piel.',
      'KZP'   ,'REAL'      ,'Kwota zas.piel.',
:: Podstawy
      'POD_ER','REAL'      ,'Podstawa emeryt.-rent.',
      'POD_CH','REAL'      ,'Podstawa chorobowa',
      'POD_WY','REAL'      ,'Podstawa wypadkowa',
      'POD_KC','REAL'      ,'Podstawa KC',
:: Składki finansowane przez [P]racownika (ubezpieczonego)
      'FEP'   ,'REAL'      ,'P-Fund. emerytalny',
      'FRP'   ,'REAL'      ,'P-Fund. rentowy',
      'FCP'   ,'REAL'      ,'P-Fund. chorobowy',
      'KCP'   ,'REAL'      ,'P-Kasa chorych',
:: Składki finansowane przez [Z]akład pracy (płatnika)
      'FEZ'   ,'REAL'      ,'Z-Fund. emerytalny',
      'FRZ'   ,'REAL'      ,'Z-Fund. rentowy',
      'FWZ'   ,'REAL'      ,'Z-Fund. wypadkowy',
      'PPE'   ,'REAL'      ,'Z-Program emerytalny',
      'PPK'   ,'REAL'      ,'Z-Plan kapitałowy',
:: Składki finansowane przez [B]udżet Państwa
      'KCB'   ,'REAL'      ,'B-Kasa chorych',
      'FEB'   ,'REAL'      ,'B-Fund. emerytalny',
      'FRB'   ,'REAL'      ,'B-Fund. rentowy'
   );

:: Ustalenie miesiąca od którego zmieniany jest sposóbprzekazywania informacji o PPK
:: _PPK_d - data pobrana z parametrów systemu. Od miesąca wskazanego podaną datą działają inne zasady pobierania danych
:: dla składki PPK po tej dacie wcześniejszze zapisy są usuwane i naliczane ponownie
   _PPK_d:=_zdate;
   {? var_pres('PPK_POD')>0
   || _param:=exec('get_par','#parametr',269);
      {? type_of(_param)=type_of('')
      || {? +_param=10 & #(4+_param)>0 & #(2+(5-_param))>0
         || _PPK_d:=date(#(4+_param),#(2+(5-_param)),1)
         ?}
      ?}
   ?};
   __F_ZATR.mod('P');
:: Zapamiętanie kontekstów analizowanych tabel
   OSOBA.cntx_psh();
   OSOBA.clear();
   P.cntx_psh;
   P.index('PRACOSOB');
   H.cntx_psh;
   H.index('_HISTKOD');
   RD.cntx_psh;
   RD.index('_RODZINA');
   RH.cntx_psh();
   _jest_rh:=
      "  RH.index('RACHUNKC');
         RH.prefix(_a,_b,_c);
         _jest:=0;
         {? RH.first()
         || {!
            |? _jest+={? RH.DRA>=_d & RH.DRA<=_e || 1 || 0 ?};
               RH.next()
            !}
         ?};
         _jest
      ";
:: Podstawowa iteracja po karcie ubezpieczeniowej
:: - raportowanie dla osob zatrudnionych na podstawie umowy o pracę.
:: Brak zapisu w karcie stanowi kryterium "wykluczenia" osoby z raportu.
   KU.cntx_psh();
   KU.clear();
   KU.f_set(,,'KU.FIRMA=:_a and KU.R=:_b and KU.M=:_c',exec('ref_firma','ustawienia'),O.RU,O.MU);
   {? KU.f_first()
   || {!
      |? _RCA.blank();
         _RCA.OSOBA:=#KU.OSOBA;
         echo('Ubezpieczony: %1'@[KU.OSOBA().NAZWISKO]);
         _stop:={? (_data:=exec('ustal_dz','rap_zus',O.RU,O.MU))=_zdate
                || date(O.RU,O.MU,0)
                || _data
                ?};
         _RCA.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref(),_stop);
::       Pobranie kwoty wypłaconych zasiłkow rodzinnych, wychowawczych i pielęgnacyjnych
::       (przed wejściem w życie Ustawy o świadczeniach rodzinnych).
         {? _start<date(2006,9,1)
         || _RCA.KZR+=FUNKCJE.LU(539,540,0);
            _RCA.KZW+={? date(2004,4,0)<date(O.RU,O.MU,1)
                      || FUNKCJE.LU(541,544,0)
                      || FUNKCJE.LU(520,521,0)
                      ?};
            _RCA.KZP+=FUNKCJE.LU(535,536,0)
         ?};
::       Określenie liczby wypłaconych zasiłkow rodzinnych i pielęgnacyjnych
         {? _RCA.KZR | _RCA.KZP
         || RD.prefix(OSOBA.ref());
            O.cntx_psh();
            O.index('LISTYPLU');
            O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.RU,O.MU);
            {? O.first()
            || LS.cntx_psh();
               {!
               |? LS.use(-O.LT);
                  LS.index('OSOBAKOD');
                  LS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
                  {? RD.first()
                  || {!
                     |? {? _RCA.KZR & RD.KW>0
                        || {? LS.find_key(539) | LS.find_key(540)
                           || _od:=date(O.R,O.M,1);
                              _do:=date(O.R,O.M,0);
                              _RCA.LZR+=exec('rd_zas','osoba','R',_od,_do)
                           ?}
                        ?};
                        {? _RCA.KZP & RD.ZP='T'
                        || {? LS.find_key(535) | LS.find_key(536)
                           || _od:=date(O.R,O.M,1);
                              _do:=date(O.R,O.M,0);
                              _RCA.LZP+=exec('rd_zas','osoba','P',_od,_do)
                           ?}
                        ?};
                        RD.next()
                     !}
                  ?};
                  O.next()
               !};
               LS.cntx_pop()
            ?};
            O.cntx_pop()
         ?};
::       Rozpoczęcie wypełniania raportu - przypadek "standardowy" - brak urlopów
         {? exec('zn_ttub','pracownik',,_stop)
         || exec('ustaw_pi','rap_zus',_RCA);
            {? _stop<date(O.RU,O.MU,1)
            || _RCA.TTUB:='3000'+(_RCA.TTUB+2)
            ?}
         || exec('info','rap_zus',1,'ZUS RCA')
         ?};
::       Wypełniane tylko w przypadku, gdy osoba jest ubezpieczona społecznie, chorobowo i wypadkowo
::       lub opłaca składkę na ubezpieczenie zdrowotne
         {? KU.S1 | KU.S10 | KU.S13 |
::          zmiana od 2004.05.01 - dodatki do zasiłku rodzinnego
::          raportowane albo razem z wychowawczym albo z tytułem
::          podstawowym - nie raportować z macierzyńskim
            {? date(2004,5,1)<=date(O.RU,O.MU,1)
            || _RCA.KZP | ((_RCA.KZW | _RCA.KZR) & ~KU.S21 & ~KU.S25)
            ?}
         || _RCA.POD_ER:=KU.S1;
            _RCA.POD_CH:=KU.S10;
            _RCA.POD_WY:=KU.S10;
            _RCA.POD_KC:=KU.S13;
            _RCA.FEP:=KU.S2;
            _RCA.FRP:=KU.S3;
            _RCA.FCP:=KU.S11;
            _RCA.KCP:=KU.S14;
            _RCA.FEZ:=KU.S4;
            _RCA.FRZ:=KU.S5;
            _RCA.FWZ:=KU.S12;
            _RCA.PPE:=KU.S19;
            {? _PPK_d=_zdate | (_PPK_d>_zdate & _PPK_d>date(O.RU,O.MU,1))
            || _RCA.PPK:=(KU.S31+KU.S32)
            ?};
            _RCA.add();
            {! _i:=7.._RCA.fld_num()
            |! ($('_a.'+_RCA.fld_acr(_i)+':=0'))(_RCA)
            !}
         ?};
::       Raport dla osoby przebywającej na urlopie macierzyńskim
         {? KU.S7
         || {? exec('zn_ttub','pracownik',,_stop,'m')
            || exec('ustaw_pi','rap_zus',_RCA,'TTUB','BLWN')
            || {? exec('zn_ttub','pracownik',,_stop,)
               || _RCA.TTUB:='1240'+P_INFO.PREM().KOD+P_INFO.STNP().KOD;
                  {? P_INFO.BLOKADA<=date(O.RU,O.MU,0)
                  || _RCA.BLWN:=P_INFO.BLWN().KOD
                  ?}
               || exec('info','rap_zus',1,'ZUS RCA')
               ?}
            ?};
            _RCA.POD_ER:=KU.S7;
            _RCA.FEB:=KU.S8;
            _RCA.FRB:=KU.S9;
            _rca_kzw:=0;
            {? KU.S25 | KU.S21
            || _rca_kzw:=_RCA.KZW;
               _RCA.KZW:=0
            ?};
            _RCA.add();
            {! _i:=7.._RCA.fld_num()
            |! ($('_a.'+_RCA.fld_acr(_i)+':=0'))(_RCA)
            !};
            _RCA.KZW:=&_rca_kzw
         ?};
::       Raport dla osoby przebywającej na urlopie wychowawczym
         {? KU.S25+KU.S21
         || {? exec('zn_ttub','pracownik',,_stop,'w')
            || exec('ustaw_pi','rap_zus',_RCA,'TTUB','BLWN')
            || exec('info','rap_zus',1,'ZUS RCA')
            ?};
            _RCA.POD_ER:=KU.S25;
            _RCA.POD_KC:=KU.S21;
            _RCA.KCB:=KU.S22;
            _RCA.FEB:=KU.S26;
            _RCA.FRB:=KU.S27;
            _od:={? _RCA.POD_ER | _RCA.POD_KC || _RCA.add(); 7 || 12 ?};
            {! _i:=_od.._RCA.fld_num()
            |! ($('_a.'+_RCA.fld_acr(_i)+':=0'))(_RCA)
            !}
         ?};
::       Zapis, jeśli osoba pobiera zasiłki rodzinne lub pielęgnacyjne a nie została jeszcze uwzględniona na raporcie
         {? _RCA.KZR | _RCA.KZP
         || {? exec('zn_ttub','pracownik',,_stop)
            || exec('ustaw_pi','rap_zus',_RCA)
            || exec('info','rap_zus',1,'ZUS RCA')
            ?};
            _RCA.add()
         ?};
         KU.f_next()
      !}
   ?};
   KU.f_clear();
   KU.cntx_pop();
   RD.cntx_pop();

  _stop:=date(O.RU,O.MU,0);

:: Przypadki szczególne
:: - istnieją informacje o zablokowaniu naliczania składek na ubezpieczenia społeczne, których do tej pory nie zgłoszono
   P_INFO.cntx_psh();
   P_INFO.index(_pi:=P_INFO.ndx_tmp('Od dnia',0,'FIRMA',,,'BLOKADA',,0,'OSOBA',,0,'OD',,1));
   P_INFO.prefix(exec('ref_firma','ustawienia'));
   {? P_INFO.find_ge(_start)
   || {!
      |? {? P_INFO.BLOKADA~1=O.RU & P_INFO.BLOKADA~2<=O.MU
         || {? P_INFO.OD<=_stop & ~_RCA.find_key(#P_INFO.OSOBA)
            || echo('Ubezpieczony: %1'@[P_INFO.OSOBA().NAZWISKO]);
               _RCA.blank();
               _RCA.OSOBA:=#P_INFO.OSOBA;
               exec('ustaw_pi','rap_zus',_RCA);
               _RCA.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref(),_stop);
               _RCA.add()
            ?};
            P_INFO.next()
         ?}
      !}
   ?};
   P_INFO.ndx_drop(&_pi);
   P_INFO.cntx_pop();

:: Przypadki szczególne
:: - dla pracowników fizycznych może istnieć konieczność wygenerowania zerowego raportu
::   ze względu na jeszcze nierozliczone urlopy macierzyńskie
   N.cntx_psh();
   N.index(_nb:=N.ndx_tmp('Nieobecność',0,'P','FIRMA',,'KOR',,,'NB','RN',0,'OD',,0));
   _tab:=__RUB.sys_rub(115);
   {? _tab.first()
   || {!
      |? N.prefix(exec('ref_firma','ustawienia'),'N',_tab.RN);
         {? N.find_ge(_start)
         || {!
            |? {? N.OD<=_stop
               || N.P();
                  {? $P.F_ZATR=__F_ZATR.REF & ~_RCA.find_key(#N.P().OSOBA,'1240')
                  || echo('Ubezpieczony: %1'@[P.OSOBA().NAZWISKO]);
                     {? exec('zn_ttub','pracownik',,_stop,'m')
                     || _RCA.blank();
                        _RCA.OSOBA:=#P.OSOBA;
                        exec('ustaw_pi','rap_zus',_RCA);
                        _RCA.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref(),_stop);
                        _RCA.add()
                     || exec('info','rap_zus',1,'ZUS RCA')
                     ?}
                  ?};
                  N.next()
               ?}
            !}
         ?};
         _tab.next()
      !}
   ?};
   obj_del(_tab);
   &_tab;
   N.ndx_drop(&_nb);
   N.cntx_pop();
: Tabela wyrownan dla zasilku macierzynskiego podczas wychowawczego, gdy nie sa jeszcze nierozliczone zasilki
  {? var_pres('_WYR')>100 || obj_del(_WYR) ?};
  _WYR:=sql(
      'select   P.OSOBA, LSW.OD, LSW.DO, S_ZUS.KOD '
      'from     LSW join P join S_ZUS using (LSW.KDSW,S_ZUS.REFERENCE) '
      'where    P.FIRMA=:_d and LSW.Z=\'H\' and to_date(:_c)<=LSW.OD and LSW.OD<=to_date(:_b) and LSW.DO>=to_date(:_a) '
      'order by P.OSOBA, S_ZUS.KOD, LSW.OD',
      _start,_stop,date(2003,10,1),exec('ref_firma','ustawienia')
   );
   {? _WYR.first()
   || {!
      |? {? OSOBA.seek(_WYR.OSOBA)
         || {? ~_RCA.find_key(#OSOBA.ref(),'1240')
            || echo('Ubezpieczony: %1'@[OSOBA.NAZWISKO]);
               {? exec('zn_ttub','pracownik',,_stop,'m')
               || _RCA.blank();
                  _RCA.OSOBA:=#OSOBA.ref();
                  exec('ustaw_pi','rap_zus',_RCA);
                  _RCA.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref(),_stop);
                  _RCA.add()
               || exec('info','rap_zus',1,'ZUS RCA')
               ?}
            ?}
         ?};
         _WYR.next()
      !}
   ?};
   {? var_pres('_WYR')>100 || obj_del(_WYR); &_WYR ?};

:: Przypadki szczególne
:: - pracownik został zatrudniony, ale jeszcze brak kwot do wykazania
::   - utworzenie "zerowego" raportu rozliczeniowego
   P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P);
   __F_ZATR.mod('P','O');
   {? P.first
   || _listy:='';
      O.cntx_psh();
      O.clear();
      O.f_set(
         'LT',,
         'O.FIRMA=:_a and O.RU=:_b and O.MU=:_c and O.F_ZATR=\':_d\'',
         exec('ref_firma','ustawienia'),O.RU,O.MU,__F_ZATR.REF
      );
      _loop:=O.f_first();
      {!
      |? _loop
      |! _listy+='\''+~O.LT+'\',';
         _loop:=O.f_next()
      !};
      O.f_clear();
      O.cntx_pop();
      _nie_zas:=','+__RUB.sys_sql(122,date(O.RU,O.MU,0))+',';
      _NIE:=sql_exec('!sql_rsa_nieo',
          _start,
          _stop,
          &_listy-1,
          __RUB.sys_sql(19421,date(O.RU,O.MU,0)),
          __RUB.sys_sql(19422,date(O.RU,O.MU,0)),
          exec('ref_firma','ustawienia'));
      {? _NIE.first()
      || {!
         |? {? _nie_zas*(','+$_NIE.RN+',')
            || _NIE.next()
            || _NIE.del()
            ?}
         !}
      ?};
      _NIE.index(_NIE.ndx_tmp('Kod',,'OSOBA',,0,'RN',,0));
      _POW:=sql('select OSOBA, RN, count(*) as N from :_a group by OSOBA, RN having count(*)>=2',_NIE);
      {? _POW.first
      || {!
         |? _NIE.prefix(_POW.OSOBA,_POW.RN);
            {? _NIE.first || exec('norm_nie','!ppl_zes_wzus',_NIE,_POW) ?};
            _POW.next
         !}
      ?};
      _NIE.clear;
      _NIE.index(_NIE.ndx_tmp('Data',,'IP',,0,'OD',,0));

      _Nieob:="
         _start:=_a; _stop:=_b;
         {? P.DZ<>#0 & P.DZ<_stop || _stop:=P.DZ ?};
         {? P.DZA>_start || _start:=P.DZA ?};
         {? _start<=_stop
         || _Nieob:=exec('godz_bow_newzasad','lista_licz',_start,_stop,2);
            (_stop-_start+1)>_Nieob
         ?}";

      {!
::       Zatrudniony w sprawdzanym okresie oraz sprawdzenie czy przez cały miesiąc nie był oddelegowany bez zus:
      |? {? P.DZA<=_stop & (P.DZ=_zdate | _start<=P.DZ) & ~exec('okr_odd_bzus','oddelegowanie',P.ref(),_start,_stop)
         || _data:={? P.DZ=_zdate || _stop
                   |? _stop<P.DZ || _stop
                   || P.DZ
                   ?};
            {? exec('zn_ttub','pracownik',P.OSOBA,_data)
            || _z_test:=0;
               {? ~_RCA.find_key(#P.OSOBA,P_INFO.TTUB().KOD) & ~_RCA.find_key(#P.OSOBA,'1240')
               || _z_test:=1;
                  _NIE.prefix(P.IP);
:  caly miesiac jest na wychowawczym
                  {? ~_Nieob(_start,_stop)
                  || _z_test:=0
: rozliczenie nieobecnosci z biezacego okresu
                  |? _NIE.find_le(date(_start~1,_start~2,0)) & _NIE.OD>=date(_start~1,_start~2,1)
                  || _z_test:=0
                  ?}
               ?};
               {? &_z_test
               || echo('Ubezpieczony: '+P.OSOBA().NAZWISKO);
                  _RCA.blank;
                  _RCA.OSOBA:=#P.OSOBA;
                  exec('ustaw_pi','rap_zus',_RCA);
                  _RCA.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref,_stop);
                  P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P);
                  _RCA.add
               ?}
            || P.OSOBA().NAZWISKO;
               exec('info','rap_zus',1,'ZUS RCA')
            ?}
         ?};
         P.next
      !};
      obj_del(_NIE);
      obj_del(_POW)
   ?};

:: Uwzglednienie korekt skladek
   _KOR:=exec('zus_rca_kor','rap_zus',O.RU,O.MU);
   _KOR.index(_KOR.ndx_tmp('Osoba',,'OSOBA',,0,'RN',,0));
   {? _KOR.first
   || {? (_LISTA:=sql('select OSOBA from :_a group by OSOBA',_KOR)).first
      || {!
         |? {? OSOBA.seek(_LISTA.OSOBA)
            || _RCA.blank;
               _RCA.OSOBA:=#OSOBA.ref;
               _stop:={? (_data:=exec('ustal_dz','rap_zus',O.RU,O.MU))=_zdate
                      || date(O.RU,O.MU,0)
                      || _data
                      ?};
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_RCA);
                  {? _stop<date(O.RU,O.MU,1)
                  || _RCA.TTUB:='3000'+(_RCA.TTUB+2)
                  ?}
               || exec('info','rap_zus',1,'ZUS RCA')
               ?};
               _ref:=null;
               _RCA.cntx_psh;
               {? _RCA.find_key(_RCA.OSOBA,_RCA.TTUB)
               || _ref:=_RCA.ref
               ?};
               _RCA.cntx_pop;
               {? _ref || _RCA.seek(_ref) ?};
               _KOR.prefix(_LISTA.OSOBA);
               _KOR.first;
               _pod_er:=_pod_ch:=_pod_wy:=0;
               {!
               |? {? _KOR.RN=765
                  || _RCA.FEP+=_KOR.SKL;
                     {? ~_pod_er || _pod_er:=_KOR.POD ?}
                  |? _KOR.RN=766
                  || _RCA.FRP+=_KOR.SKL;
                     {? ~_pod_er || _pod_er:=_KOR.POD ?}
                  |? _KOR.RN=767
                  || _RCA.FCP+=_KOR.SKL;
                     {? ~_pod_ch || _pod_ch:=_KOR.POD ?}
                  |? _KOR.RN=958
                  || _RCA.FEZ+=_KOR.SKL;
                     {? ~_pod_er || _pod_er:=_KOR.POD ?}
                  |? _KOR.RN=959
                  || _RCA.FRZ+=_KOR.SKL;
                     {? ~_pod_er || _pod_er:=_KOR.POD ?}
                  |? _KOR.RN=960
                  || _RCA.FWZ+=_KOR.SKL;
                     {? ~_pod_wy || _pod_wy:=_KOR.POD ?}
                  |? _KOR.RN=792
                  || _RCA.POD_KC+=_KOR.POD;
                     _RCA.KCP+=_KOR.SKL
                  ?};
                  _KOR.next
               !};
               _RCA.POD_ER+=_pod_er;
               _RCA.POD_CH+=_pod_ch;
               _RCA.POD_WY+=_pod_wy;

               {? _ref || _RCA.put || _RCA.add ?}
            ?};
            _LISTA.next
         !}
      ?};
      obj_del(_LISTA)
   ?};
   obj_del(_KOR);

:: Iteracja po wszystkich rachunkach wystawionych w miesiacu ubezpieczeniowym.
:: Raport uwzglednia tylko te rachunki dla umow, dla ktorych odprowadzane sa skladki na ub.spoleczne.
   _stop:=date(O.RU,O.MU,0);
   _listy:=('l'+($O.RU+2)+('0'+$O.MU+2));
   __F_ZATR.mod('Z');
   _ZLE_POM:=sql_exec('!sql_rca_zle',O.RU,O.MU,_start,_stop,__F_ZATR.REF,_listy,exec('ref_firma','ustawienia'));
   ZC_INFO.index('ZLECDW');
   __F_ZATR.mod('P');
   {? _ZLE_POM.first()
   || {!
      |? {? _ZLE_POM.INFODW<_start
         || {? OSOBA.seek(BIT.sqlint(_ZLE_POM.OSOBA),OSOBA.name)
            || _ttub:=exec('rhttub','lista_plac',OSOBA.ref(),_ZLE_POM.RHDWY,_ZLE_POM.TTUB,_ZLE_POM.INFODW);
               {? _ZLE_POM.TTUB<>_ttub
               || _ZLE_POM.TTUB:=_ttub;
                  _ZLE_POM.put()
               ?}
            ?}
         ?};
         _ZLE_POM.next()
      !}
   ?};
   _ZLE:=sql_exec('!sql_rca_zles',_ZLE_POM);
   obj_del(_ZLE_POM);
   &_ZLE_POM;
   __F_ZATR.mod('Z');
   _ZLE.index(_ZLE.ndx_tmp('Ubezpieczony',0,'OSOBA',,0,'TTUB',,0));
   _ZLE_POM:=sql_exec('!sql_rza_zle',O.RU,O.MU,_start,_stop,__F_ZATR.REF,_listy,exec('ref_firma','ustawienia'));
   __F_ZATR.mod('P','O');
   {? _ZLE_POM.first
   || {!
      |? {? _ZLE_POM.ZCDW<_start
         || {? OSOBA.seek(BIT.sqlint(_ZLE_POM.OSOBA),OSOBA.name())
            || ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
::             nie ma juz nastepnej umowy
               {? ZC_INFO.last()
               || {? var_pres('_tab_inf')>100 || obj_del(_tab_inf) ?};
                  _t_size:=_ZLE_POM.RHDWY-_ZLE_POM.INFODW;
                  _tab_inf:=obj_new(_t_size);
                  {! _ind:=1.._t_size |! _tab_inf[_ind]:=0 !};

                  _info_od:=date(9999,1,1);
                  _info_do:=#0;
                  _ok:=0;
                  {!
                  |? {? (ZC_INFO.ZUS+ZC_INFO.FC+ZC_INFO.FW+ZC_INFO.FP+ZC_INFO.FG)*'T'
                     || {? (date(ZC_INFO.DU~1,ZC_INFO.DU~2,0)<=date(_ZLE_POM.ZCDW~1,_ZLE_POM.ZCDW~2,0) |
                           _jest_rh(ZC_INFO.ZC,_start~1,_start~2,ZC_INFO.DU,ZC_INFO.DW))
                        || _ok:=1;
                           {? ZC_INFO.DU<=_ZLE_POM.INFODW+1 || _info_od:=_ZLE_POM.INFODW+1
                           |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                           ?};
                           {? ZC_INFO.DW>=_ZLE_POM.RHDWY || _info_do:=_ZLE_POM.RHDWY
                           |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                           ?}
                        ?}
                     |? ZC_INFO.KC*'T'
                     || _ok:=1;
                        {? ZC_INFO.DU<=_ZLE_POM.INFODW+1 || _info_od:=_ZLE_POM.INFODW+1
                        |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                        ?};
                        {? ZC_INFO.DW>=_ZLE_POM.RHDWY || _info_do:=_ZLE_POM.RHDWY
                        |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                        ?}
                     ?};
                     ZC_INFO.prev() & ZC_INFO.DW>=_start
                  !};
                  {? _ok || {! _ind:=_info_od-_ZLE_POM.INFODW.._info_do-_ZLE_POM.INFODW |! _tab_inf[_ind]:=1 !} ?};

                  _zap_zlec:=1;
                  {! _ind:=1.._t_size |? _zap_zlec:=_tab_inf[_ind] !};
                  {? ~_zap_zlec || _ZLE_POM.TTUB:='3000'; _ZLE_POM.put() ?}
               ?}
            ?}
         ?};
         _ZLE_POM.next()
      !}
   ?};
   {? var_pres('_zap_zlec')>0 || &_zap_zlec ?};
   _RZZ:=sql_exec('!sql_rza_zles',_ZLE_POM);
   obj_del(_ZLE_POM);
   &_ZLE_POM;
   {? _RZZ.first
   || {!
      |? {? _ZLE.find_key(_RZZ.OSOBA,_RZZ.TTUB)
         || _ZLE.POD_KC+=_RZZ.POD_KC;
            _ZLE.KC+=_RZZ.KC;
            _ZLE.put
         ?};
         _RZZ.next
      !}
   ?};
   obj_del(_RZZ);
   &_RZZ;
   _licz:=
      "  _kw:=0;
         KOR_Z.prefix(KORN_Z.ref(),__RUB.ref(_a));
         {? KOR_Z.first() || _kw+=KOR_Z.KW ?};
         _kw
      ";
   KOR_Z.index('KORN_Z');
   {? _ZLE.first
   || {!
      |? _do_add:=0;
         {? OSOBA.seek(_ZLE.OSOBA)
         || {? ~_RCA.find_key(#OSOBA.ref,_ZLE.TTUB)
            || echo('Ubezpieczony: '+OSOBA.NAZWISKO);
               _RCA.blank;
               _RCA.OSOBA:=#OSOBA.ref;
               _RCA.TTUB:=_ZLE.TTUB+_ZLE.PREM+_ZLE.STNP;
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_RCA,'TPID','BLWN')
               || exec('info','rap_zus',1,'ZUS RCA')
               ?};
               _RCA.WYMZ:=6*' ';
               _do_add:=1
            ?};
::          Uwzglednienie korekt
            KORN_Z.cntx_psh();
            KORN_Z.clear();
            KORN_Z.f_set(
               'RU,MU,ZC(OSOBA)',
               'join ZC using (KORN_Z.ZC,ZC.REFERENCE) join P using (ZC.P,P.REFERENCE)',
               'P.FIRMA=:_a and KORN_Z.RU=:_b and KORN_Z.MU=:_c and ZC.OSOBA=:_d',
               exec('ref_firma','ustawienia'),O.RU,O.MU,OSOBA.ref()
            );
            {? KORN_Z.f_first()
            || {!
               |? {? KORN_Z.ZC_INFO().TTUB().KOD+ZC_INFO.PREM().KOD+ZC_INFO.STNP().KOD=_RCA.TTUB
                  || _RCA.POD_ER+=_licz(753);
                     _RCA.POD_CH+=_licz(754);
                     _RCA.POD_WY+=_licz(754);
                     _RCA.POD_KC+=_licz(791);
                     _RCA.FEP+=_licz(765);
                     _RCA.FRP+=_licz(766);
                     _RCA.FCP+=_licz(767);
                     _RCA.KCP+=_licz(792);
                     _RCA.FEZ+=_licz(958);
                     _RCA.FRZ+=_licz(959);
                     _RCA.FWZ+=_licz(960)
                  ?};
                  KORN_Z.f_next
               !}
            ?};
            KORN_Z.f_clear();
            KORN_Z.cntx_pop();

            _RCA.POD_ER+=_ZLE.POD_ER;
            _RCA.POD_CH+=_ZLE.POD_CHOR;
            _RCA.POD_WY+=_ZLE.POD_CW;
            _RCA.POD_KC+=_ZLE.POD_KC;
            _RCA.FEP+=_ZLE.FEP;
            _RCA.FRP+=_ZLE.FRP;
            _RCA.FCP+=_ZLE.FC;
            _RCA.KCP+=_ZLE.KC;
            _RCA.FEZ+=_ZLE.FEZ;
            _RCA.FRZ+=_ZLE.FRZ;
            _RCA.FWZ+=_ZLE.FW;
            {? _PPK_d=_zdate | (_PPK_d>_zdate & _PPK_d>date(O.RU,O.MU,1))
            || _RCA.PPK+=_ZLE.PPK
            ?};

            {? _do_add
            || _RCA.add
            || _RCA.put
            ?}
         ?};
         _ZLE.next
      !}
   ?};
   _ZLE.erase;
: urlop macierzynski dla zleceniobiorcy
   RH.index('DOK');
   RH.prefix(exec('ref_firma','ustawienia'),O.RU,O.MU);
   {? RH.first
   || {!
      |? {? -RH.ZAS='t'
         ||
            _kw_S7:=exec('licza_rhs','lista_licz',56121);
            _kw_S8:=exec('licza_rhs','lista_licz',571311);
            _kw_S9:=exec('licza_rhs','lista_licz',571312);
            {? _kw_S7
            || _ZLE.blank;
               echo('Ubezpieczony: '+RH.ZLE().OSOBA().NAZWISKO);
               _ZLE.OSOBA:=$OSOBA.ref;
               {? exec('zn_ttub','pracownik',,_stop,'m')
               || _ZLE.TTUB:='1240'+P_INFO.PREM().KOD+P_INFO.STNP().KOD
               ?};
               _ZLE.POD_ER:=_kw_S7;
               _ZLE.FEP:=_kw_S8;
               _ZLE.FRP:=_kw_S9;
               _ZLE.add
            ?}
         ?};
         RH.next
      !}
   ?};
   {? _ZLE.first
   || _zle:=sql_exec('!sql_rca_zles',_ZLE);
      obj_del(_ZLE);
      &_ZLE;
      {? _zle.first
      || {!
         |? _do_add:=0;
            {? OSOBA.seek(_zle.OSOBA)
            || _RCA.prefix(#OSOBA.ref());
               {? _RCA.first
               || {!
                  |?
                     {? 4+_RCA.TTUB<>'1240'
                     || {? _RCA.POD_ER+_RCA.POD_CH+_RCA.POD_WY+_RCA.POD_KC+_RCA.FEP+_RCA.FRP+_RCA.FCP+
                           _RCA.KCP+_RCA.FEZ+_RCA.FRZ+_RCA.FWZ=0
                        || _RCA.del
                        || _RCA.next()
                        ?}
                     || _RCA.next()
                     ?}
                  !}
               ?};
               _RCA.prefix();
               {? ~_RCA.find_key(#OSOBA.ref,_zle.TTUB)
               || echo('Ubezpieczony: '+OSOBA.NAZWISKO);
                  _RCA.blank;
                  _RCA.OSOBA:=#OSOBA.ref;

                  {? exec('zn_ttub','pracownik',,_stop,'m')
                  || exec('ustaw_pi','rap_zus',_RCA,'TTUB','BLWN','TPID')
                  || {? exec('zn_ttub','pracownik',,_stop,)
                     || _RCA.TTUB:='1240'+P_INFO.PREM().KOD+P_INFO.STNP().KOD;
                        {? P_INFO.BLOKADA<=date(O.RU,O.MU,0)
                        || _RCA.BLWN:=P_INFO.BLWN().KOD
                        ?}
                     || exec('info','rap_zus',1,'ZUS RCA')
                     ?}
                  ?};
                  _RCA.WYMZ:=6*' ';
                  _do_add:=1
               ?};
               _RCA.POD_ER+=_zle.POD_ER;
               _RCA.FEB+=_zle.FEP;
               _RCA.FRB+=_zle.FRP;

               {? _do_add
               || _RCA.add
               || _RCA.put
               ?}
            ?};
            _zle.next
         !}
      ?}
   ?};
: Dodanie zapisu zerowego dla urlopu macierzynskiego w zleceniach w sytuacji niewyplacenia zadnego rachunku
: w okresie urlopu macierzynskiego zarejestrowanym w danych ubezpieczeniowych zakladamy ze jest umowa zlecenie
: w innym przypadku nie ma zapisow w tabeli ZC_N i nie bedzie raportu zerowego
  _stop:=date(O.RU,O.MU,0);
  {? var_pres('_tabmac')>100 || obj_del(_tabmac) ?};
  _tabmac:=sql(
      'select distinct OS_N.OSOBA '
      'from   ZC_N join R using (ZC_N.R, R.REFERENCE) join OS_N using (ZC_N.OS_N, OS_N.REFERENCE) '
      'where  OS_N.FIRMA=:_d and ZC_N.WYR=\'N\' and ZC_N.OD<=to_date(:_b) and to_date(:_a)<=ZC_N.DO and '
      'ZC_N.RH is null and R.RN in (:_c) ',
      _start,_stop,__RUB.sys_sql(115),exec('ref_firma','ustawienia')
  );
  {? _tabmac.first
  || {!
     |? {? OSOBA.seek(_tabmac.OSOBA)
        || _RCA.prefix(#OSOBA.ref());
           {? _RCA.first
           || {!
              |? {? 4+_RCA.TTUB<>'1240' & (2+_RCA.TTUB<>'01')
                 || {? _RCA.POD_ER+_RCA.POD_CH+_RCA.POD_WY+_RCA.POD_KC+_RCA.FEP+_RCA.FRP+_RCA.FCP+
                       _RCA.KCP+_RCA.FEZ+_RCA.FRZ+_RCA.FWZ=0
                    || _RCA.del
                    || _RCA.next()
                    ?}
                 || _RCA.next()
                 ?}
              !}
           ?};
           _RCA.prefix();
           {? exec('zn_ttub','pracownik',,_stop,'m')
           || {? ~_RCA.find_key(#OSOBA.ref(),'1240')
              || _RCA.blank;
                 _RCA.OSOBA:=#OSOBA.ref();
                 exec('ustaw_pi','rap_zus',_RCA,'TTUB','BLWN','TPID');
                 _RCA.WYMZ:=6*' ';
                 _RCA.add()
              ?}
           || exec('info','rap_zus',1,'ZUS RCA')
           ?}
        ?};
        _tabmac.next()
     !}
  ?};
  {? var_pres('_tabmac')>100 || obj_del(_tabmac); &_tabmac ?};

:: Wpłaty na PPK są wyliczane i raportowane w ujęciu dla osoby z pominięciem tytułu ubezpieczenia
:: Dla osoby raportowanej z kilkoma tytułami należy "rozdzielić" kwotę zwrotu między raporty RCA
   {? O.RU>=2019
   || {?  var_pres('PPK_POD')>0 & _PPK_d>_zdate & _PPK_d<=date(O.RU,O.MU,1)
      || _RCA.prefix;

         _TAB_PPK:=sql('
            select PPK_POD.P, PPK_POD.OSOBA, PPK_POD.WYL_O, PPK_POD.WYL_RH, PPK_POD.WYL_KW, O.RU, O.MU,
               PPK_POD.PRZ_DATA,  \'      \' as TTUB, \' \' as TPID, \' \' as BLWN, 0 as OK,
               \'      \' as WYMZ,\'           \' as NRID
            from PPK_POD join O using(PPK_POD.WYL_O,O.REFERENCE)
            where EXTRACT(YEAR FROM PPK_POD.PRZ_DATA)=:_a and EXTRACT(MONTH FROM PPK_POD.PRZ_DATA)=:_b
            order by PPK_POD.OSOBA, PPK_POD.P',
            O.RU,O.MU
         );
         {? _TAB_PPK.first
         || __F_ZATR.mod('P');
            {!
            |?  _stop:=date(O.RU,O.MU,0);
               {? _TAB_PPK.WYL_KW & OSOBA.seek(_TAB_PPK.OSOBA) &
                  ~exec('okr_odd_bzus_osoba','oddelegowanie',OSOBA.ref(),_start,_stop)
               || RH.prefix();
                  {? _TAB_PPK.WYL_O<>'' & _TAB_PPK.WYL_RH=''
                  || {? date(_TAB_PPK.RU,_TAB_PPK.MU,1)>=_PPK_d
                     || _stop:=
                           {? (_data:=exec('ustal_dz','rap_zus',O.RU,O.MU))=_zdate
                           || date(O.RU,O.MU,0)
                           || _data
                           ?};

                        _TAB_PPK.WYMZ:=exec('wym_zat','rap_zus',OSOBA.ref,_stop);
                        {? exec('zn_ttub','pracownik',,_stop)
                        || exec('ustaw_pi','rap_zus',_TAB_PPK);
                           {? _stop<date(O.RU,O.MU,1)
                           || _TAB_PPK.TTUB:='3000'+(_TAB_PPK.TTUB+2)
                           ?};
                           _TAB_PPK.OK:=1
                        || exec('info','rap_zus',1,'ZUS RCA')
                        ?}
                     ?}
                  |? _TAB_PPK.WYL_RH<>'' & RH.seek(_TAB_PPK.WYL_RH) & date(RH.R,RH.M,1)>=_PPK_d
                  || _INFODW:=RH.ZC_INFO().DW;
                     _TAB_PPK.TTUB:=RH.ZC_INFO().TTUB().KOD;
                     _ttub_2:=ZC_INFO.PREM().KOD+ZC_INFO.STNP().KOD;
                     {? exec('zn_ttub','pracownik',,_TAB_PPK.PRZ_DATA)
                     || exec('ustaw_pi','rap_zus',_TAB_PPK,'TPID','BLWN')
                     || exec('info','rap_zus',1,'ZUS RCA')
                     ?};

                     _ZCDW:={? ZC_INFO.DW<_start || ZC_INFO.DW || _start ?};
                     {? _INFODW<_start
                     || _ttub:=exec('rhttub','lista_plac',OSOBA.ref(),_TAB_PPK.PRZ_DATA,_TAB_PPK.TTUB,_INFODW);
                        {? _TAB_PPK.TTUB<>_ttub
                        || _TAB_PPK.TTUB:=_ttub
                        ?}
                     ?};
                     {? |_TAB_PPK.TTUB<>''
                     || _TAB_PPK.OK:=1
                     ?};

                     {? _ZCDW<_start & _TAB_PPK.OK & (2+_TAB_PPK.TTUB<>'01')
                     || ZC_INFO.index('ZLECDW');
                        ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);

::             nie ma juz nastepnej umowy
                        {? ZC_INFO.last
                        || {? var_pres('_tab_inf')>100 || obj_del(_tab_inf) ?};

                           _t_size:=_TAB_PPK.PRZ_DATA-_INFODW;
                           _tab_inf:=obj_new(_t_size);
                           {! _ind:=1.._t_size |! _tab_inf[_ind]:=0 !};

                           _info_od:=date(9999,1,1);
                           _info_do:=#0;
                           _ok:=0;
                           {!
                           |? {? (ZC_INFO.ZUS+ZC_INFO.FC+ZC_INFO.FW+ZC_INFO.FP+ZC_INFO.FG)*'T'
                              || {? (date(ZC_INFO.DU~1,ZC_INFO.DU~2,0)<=date(_ZCDW~1,_ZCDW~2,0) |
                                    _jest_rh(ZC_INFO.ZC,_start~1,_start~2,ZC_INFO.DU,ZC_INFO.DW))
                                 || _ok:=1;
                                    {? ZC_INFO.DU<=_INFODW+1 || _info_od:=_INFODW+1
                                    |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                                    ?};
                                    {? ZC_INFO.DW>=_TAB_PPK.PRZ_DATA || _info_do:=_TAB_PPK.PRZ_DATA
                                    |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                                    ?}
                                 ?}
                              |? ZC_INFO.KC*'T'
                              || _ok:=1;
                                 {? ZC_INFO.DU<=_INFODW+1 || _info_od:=_INFODW+1
                                 |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                                 ?};
                                 {? ZC_INFO.DW>=_TAB_PPK.PRZ_DATA || _info_do:=_TAB_PPK.PRZ_DATA
                                 |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                                 ?}
                              ?};
                              ZC_INFO.prev() & ZC_INFO.DW>=_start
                           !};
                           {? _ok || {! _ind:=_info_od-_INFODW.._info_do-_INFODW |! _tab_inf[_ind]:=1 !} ?};

                           _zap_zlec:=1;
                           {! _ind:=1.._t_size |? _zap_zlec:=_tab_inf[_ind] !};
                           {? ~_zap_zlec || _TAB_PPK.TTUB:='3000'; _TAB_PPK.put ?}
                        ?}
                     ?};
                     _TAB_PPK.TTUB:=(4+_TAB_PPK.TTUB)+_ttub_2
                  ?};
                  {? _TAB_PPK.OK
                  || _TAB_PPK.put();
                     {? _RCA.find_key(#OSOBA.ref,_TAB_PPK.TTUB)
                     || _RCA.PPK+=_TAB_PPK.WYL_KW;
                        _RCA.put
                     || _RCA.blank(1);
                        _RCA.WYMZ:=_TAB_PPK.WYMZ;
                        _RCA.OSOBA:=#OSOBA.ref();
                        _RCA.TTUB:=_TAB_PPK.TTUB;
                        _RCA.BLWN:=_TAB_PPK.BLWN;
                        _RCA.NRID:=_TAB_PPK.NRID;
                        _RCA.TPID:=_TAB_PPK.TPID;
                        _RCA.PPK:=_TAB_PPK.WYL_KW;
                        _RCA.add()
                     ?}
                  ?}
               ?};
               _TAB_PPK.next()
            !}
         ?};
         _PPK_ndx:='O_MU_T'
      || _PPK_ndx:=''
      ?};
      _stop:=date(O.RU,O.MU,0);
      _kol:='PPK';
::    lista osób ze składkami PPK do wykazania
      _OSOBA:=sql(
         'select :_a.OSOBA as REF '+
         'from :_a '+
         'group by :_a.OSOBA',
         _RCA
      );
      {? _OSOBA.first()<>0
::       są wpłaty na PPK
      || _RCA.cntx_psh();
::       Do odczytu kwot ewentualnych zwrotów/wyrównań wykrzystane zostaną formuły
::       pobierające dane podczas generowania raportów dla instytucji finansowej.
::       przygotuj i ustaw parametry formuł
         _par:=exec('gen_par','ppk_rpl');
         _par.R:=O.RU;
         _par.M:=O.MU;
         _par.DATA:=_stop;
         {!
         |? {? OSOBA.seek(_OSOBA.REF,)
            || _par.OSOBA:=OSOBA.ref();
::             ustal łączną kwotę zwrotu pracodawcy
               _zwr:=exec('g100_zw','ppk_rpl',_par,'Z','P',,,_PPK_ndx);
               _kwz:=(_zwr.FIR_POD+_zwr.FIR_DOD);
               obj_del(_zwr);
::             pobierz kwoty wprowadzonych korekt
               _zwr:=exec('g100_zw','ppk_rpl',_par,'R','*',,,_PPK_ndx);
               _kwz+=(_zwr.FIR_POD+_zwr.FIR_DOD);
               obj_del(_zwr);
::             kwoty wycofania wpłat mają znak ujemny
               _zwr:=exec('g100_zw','ppk_rpl',_par,'W','*',,,_PPK_ndx);
               _kwz+=(_zwr.FIR_POD+_zwr.FIR_DOD);
               obj_del(_zwr);
::             Zależnie od typu kwoty są rejestrowane ze znakiem '-' lub do wyliczeń pobierane
::             jako dodatnie lub ujemne zależnie od TYTUL. _kwz dla korekt/zwrotów jest ujemne.
               {? _kwz<>0
::                jest zwrot/wyrównanie
               || _RCA.prefix(_OSOBA.REF);
                  _loop:=_RCA.first();
                  {!
                  |? _loop
                  |! _ppk:=($('_a.'+_kol))(_RCA);
::                   koryguj wpłaty o kwotę zwrotu, ale
::                   nie dopuszczaj do wykazania kwot ujemnych
                     {? _kwz>0
::                      zwiększenie wpłat nawet, gdy brak wyliczonych
                     || ($('_a.'+_kol+'+=_b; _a.put()'))(_RCA,_kwz);
                        _kwz:=0

                     |? _ppk<>0 & _kwz<>0
::                      uwzględnij korekty/zwroty
                     || {? _kwz<0 & _ppk<=-_kwz
::                         rozliczenie na minus
                        || _kwz+=_ppk;
::                         wyzeruj kwotę wpłat
                           ($('_a.'+_kol+':=0; _a.put()'))(_RCA)

                        |? _kwz<>0
::                         pozostała "resztka" wyrównania na minus
                        || ($('_a.'+_kol+'+=_b; _a.put()'))(_RCA,_kwz);
                           _kwz:=0
                        ?}
                     ?};
                     _loop:=(_kwz<>0 &_RCA.next())
                  !}
               ?}
            ?};
            _OSOBA.next()
         !};
         _RCA.cntx_pop()
      ?};
      obj_del(_OSOBA)
   ?};

   __F_ZATR.mod('P');
   H.cntx_pop;
   P.cntx_pop;
   RH.cntx_pop();

:: Połączenie z RZA po 2022.1.1
   {? PAR_SKID.get(292)='T' | ZUS.RODZAJ
   || _RZA:=exec('zus_rza_generuj','!ppl_zes_wzus',O.ref(),1);
      {? var_pres('_RZA')=type_of(SYSLOG) & _RZA.first()
      || {! |?
            _RCA.blank();
            _RCA.OSOBA:=_RZA.OSOBA;
            _RCA.TTUB:=_RZA.TTUB;
            _RCA.TPID:=_RZA.TPID;
            _RCA.NRID:=_RZA.NRID;
            _RCA.POD_KC:=_RZA.POD_KC;
            _RCA.KCP:=_RZA.KCP;
            _RCA.KCB:=_RZA.KCB;
            _RCA.add();
            _RZA.next()
         !};
         obj_del(_RZA)
      ?}
   ?};

   {? _RCA.first
   || {? _out:=exec('otworz','rap_zus','ZUS RCA')
      || progress(,'Zapis danych do pliku ZUS RCA',FUN.TYT,1);
         exec('zus_rca_zapisz','!ppl_zes_wzus',_RCA,_out);
         fclose(_out);
         prgs_clr();
         {? _inTerm
         || _pth:=exec('nazwa_pliku','rap_zus');
            _name:=ZUS.PLIK+'.xml';
            dlg_save(_pth,0,_name)
         ?};
         exec('info','rap_zus',3,'ZUS RCA')
      ?}
   || exec('info','rap_zus',2,'ZUS RCA')
   ?};
   OSOBA.cntx_pop();
   obj_del(_RCA);
   echo()
?}


\zus_rca_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Zapis kompletnego raportu RCA w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt pliku do zapisu
:: UWAGA! Funkcja nie wertyfikuje poprawnosci argumentow jak i struktury bufora
::  OLD: \zapisz/rap_rca.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=ZUS.DATA;
_dataxml:=form(_data~1,-4,0,'9')+'-'+form(_data~2,-2)+'-'+form(_data~3,-2);

:: Tabelka do prezentacji pominietych z powodu przekroczenia dopuszczalnych wartosci
_outpass:=tab_tmp(3,'NAZ','STRING[30]','Nazwisko',
                    'IM','STRING[20]','Imię',
                    'IDENT','STRING[8]','Rodzaj ident.',
                    'PESEL','STRING[20]','PESEL/Paszport',
                    'POWOD','SYS_MEMO','Powód');
_wins:=_outpass.mk_sel('Lista pominiętych osób','P',,'201206110635',,,,,'U',,,,,'html_maximized');
_outpass.win_sel(_wins);
_outpass.win_fld(_wins,,'NAZ');
_outpass.win_fld(_wins,,'IM');
_outpass.win_fld(_wins,,'IDENT');
_outpass.win_fld(_wins,,'PESEL');
_outpass.win_fld(_wins,,'POWOD',,,60);
_wine:=_outpass.mk_edit('Osoba pominięta',,'201403201406');
_outpass.win_edit(_wine);
_outpass.win_efld(_wine,,'NAZ');
_outpass.win_efld(_wine,,'IM');
_outpass.win_efld(_wine,,'IDENT');
_outpass.win_efld(_wine,,'PESEL');
_outpass.win_efld(_wine,,'POWOD',,,90,-4);

:: Zapis wiersza do pliku z konwersja kodowania
_to_file:=exec('to_file','rap_zus');
:: Konwersja znakow zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartosci liczbowych do wymaganego formatu XML
_rate:=exec('rate','rap_zus');

:: Naglowek dokumentu
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSRCA id_dokumentu="1">');

:: I. Dane organizacyjne - identyfikator raportu - Elementy Identyfikatora NN MMRRRR
_to_file(_b,'<I>');
_to_file(_b,'  <p1>');
_to_file(_b,'      <p1>'+(2+ZUS.SYMBOL)+'</p1>');
_to_file(_b,'      <p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>');
_to_file(_b,'  </p1>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne platnika skladek
exec('xml_dane_platn','rap_zus',_b,'II');
_pozblok:=0;
:: III. Dane dotyczace osoby ubezpieczonej (blok moze sie powtarzac, blok zwiera podbloki)
{!
|? {? OSOBA.seek(_a.OSOBA,'osoba')
    & +OSOBA.NAZWISKO & +OSOBA.PIERWSZE
   ||
      _outpass.blank();
      _outpass.NAZ:=OSOBA.NAZWISKO;
      _outpass.IM:=OSOBA.PIERWSZE;
      _outpass.PESEL:=
         {? +(|OSOBA.PESEL) || _outpass.IDENT:='PESEL'; OSOBA.PESEL
         |? +(|OSOBA.PASZPORT) || _outpass.IDENT:='Paszport'; OSOBA.PASZPORT
         || _outpass.IDENT:='b/d'; ''
         ?};

      {? _a.TPID=''
      || _outpass.memo_set('Brak "Typu identyfikatora".\nPopraw dane i spróbuj ponownie.','POWOD');
         {? _outpass.add(1) || _outpass.memo_put(,'POWOD') ?}

      |? _a.NRID=''
      || _outpass.memo_set('Brak "Identyfikatora" typu "'+_a.TPID+'".\nPopraw dane i spróbuj ponownie.','POWOD');
         {? _outpass.add(1) || _outpass.memo_put(,'POWOD') ?}

      |?  _a.POD_ER>999999.99 | _a.POD_CH>999999.99 | _a.POD_WY>999999.99 | _a.POD_KC>999999.99
      || _outpass.memo_set(
            'Wartości podstaw wymiarów przekraczają wartości akceptowalne\n'+
            'przez Program Płatnika przy imporcie z programu zewnętrznego.\n'+
            'Raport RCA należy ręcznie wprowadzić bezpośrednio w Programie Płatnika.','POWOD');
         {? _outpass.add(1) || _outpass.memo_put(,'POWOD') ?}

      || {? ZUS.GIODO='T'
         || exec('rap_zus','giodo',ZUS.DATA,'RCA')
         ?};
         _pozblok+=1;
         _to_file(_b,'<III id_bloku="'+$_pozblok+'">');
::       III.A. Dane identyfikacyjne osoby ubezpieczonej
         _to_file(_b,'   <A>');
            exec('xml_2dane_ubezp','rap_zus',_a,_b,3);
         _to_file(_b,'   </A>');

::       III.B. Zestawienie naleznych skladek na ubezpieczenia spoleczne
         _to_file(_b,'   <B>');
::       Kod tytulu ubezpieczenia
         _to_file(_b,'      <p1>');
            exec('xml_KodTytUbezp','rap_zus',_a,_b,3);
         _to_file(_b,'      </p1>');
::       Informacja o przekroczeniu rocznej podstawy wymiaru skladek
         {? _a.BLWN<>''
         || _to_file(_b,'      <p2>'+form(_a.BLWN)+'</p2>')
         ?};
::       Wymiara czasu pracy (licznik/mianownik)
         {? +(|_a.WYMZ)>0
         || _to_file(_b,'      <p3>');
            _to_file(_b,'         <p1>'+form(3+_a.WYMZ)+'</p1>');
            _to_file(_b,'         <p2>'+form(3-_a.WYMZ)+'</p2>');
            _to_file(_b,'      </p3>')
         ?};

::       Podstawa wymiaru skladki na ubezpieczenia emerytalne i rentowe
         _to_file(_b,'      <p4>'+_rate(_a.POD_ER)+'</p4>');
::       Podstawa wymiaru skladki na ubezpieczenia chorobowe
         _to_file(_b,'      <p5>'+_rate(_a.POD_CH)+'</p5>');
::       Podstawa wymiaru skladki na ubezpieczenia wypadkowe
         _to_file(_b,'      <p6>'+_rate(_a.POD_WY)+'</p6>');

::       Kwota skladki na ubezpieczenie emerytalne finansowana przez ubezpieczonego
         _to_file(_b,'      <p7>'+_rate(_a.FEP)+'</p7>');
::       Kwota skladki na ubezpieczenie rentowe finansowana przez ubezpieczonego
         _to_file(_b,'      <p8>'+_rate(_a.FRP)+'</p8>');
::       Kwota skladki na ubezpieczenie chorobowe finansowane przez ubezpieczonego
         _to_file(_b,'      <p9>'+_rate(_a.FCP)+'</p9>');
::       Kwota skladki na ubezpieczenie wypadkowe finansowane przez ubezpieczonego
         _to_file(_b,'      <p10>'+_rate(0)+'</p10>');

::       Kwota skladki na ubezpieczenie emerytalne finansowana przez platnika
         _to_file(_b,'      <p11>'+_rate(_a.FEZ)+'</p11>');
::       Kwota skladki na ubezpieczenie rentowe finansowana przez platnika
         _to_file(_b,'      <p12>'+_rate(_a.FRZ)+'</p12>');
::       Kwota skladki na ubezpieczenie chorobowe finansowana przez platnika
         _to_file(_b,'      <p13>'+_rate(0)+'</p13>');
::       Kwota skladki na ubezpieczenie wypadkowe finansowana przez platnika
         _to_file(_b,'      <p14>'+_rate(_a.FWZ)+'</p14>');

::       Kwota skladki na ubezpieczenie emerytalne finansowana przez budzet panstwa
         _to_file(_b,'      <p15>'+_rate(_a.FEB)+'</p15>');
::       Kwota skladki na ubezpieczenie rentowe finansowana przez budzet panstwa
         _to_file(_b,'      <p16>'+_rate(_a.FRB)+'</p16>');
::       Kwota skladki na ubezpieczenie chorobowe finansowana przez budzet panstwa
         _to_file(_b,'      <p17>'+_rate(0)+'</p17>');
::       Kwota skladki na ubezpieczenie wypadkowe finansowana przez budzet panstwa
         _to_file(_b,'      <p18>'+_rate(0)+'</p18>');

::       Kwota skladki na ubezpieczenie emerytalne finansowana przez PFRON
         _to_file(_b,'      <p19>'+_rate(0)+'</p19>');
::       Kwota skladki na ubezpieczenie rentowe finansowana przez PFRON
         _to_file(_b,'      <p20>'+_rate(0)+'</p20>');
::       Kwota skladki na ubezpieczenie chorobowe finansowana przez PFRON
         _to_file(_b,'      <p21>'+_rate(0)+'</p21>');
::       Kwota skladki na ubezpieczenie wypadkowe finansowana przez PFRON
         _to_file(_b,'      <p22>'+_rate(0)+'</p22>');

::       Kwota skladki na ubezpieczenie emerytalne finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p23>'+_rate(0)+'</p23>');
::       Kwota skladki na ubezpieczenie rentowe finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p24>'+_rate(0)+'</p24>');
::       Kwota skladki na ubezpieczenie chorobowe finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p25>'+_rate(0)+'</p25>');
::       Kwota skladki na ubezpieczenie wypadkowe finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p26>'+_rate(0)+'</p26>');

::       Kwota obnizenia podstawy wymiaru skladek na ubezpieczenia spoleczne z tytulu oplacania skladki
::       w ramach pracowniczego programu emerytalnego
         {? _a.PPE>0 || _to_file(_b,'      <p27>'+_rate(_a.PPE)+'</p27>') ?};

::       Kwota obniżenia podstawy wymiaru składek na ubezpieczenia społeczne z tytułu opłacania składki w ramach
::       pracowniczego planu kapitałowego.
         {? _a.PPK>0 || _to_file(_b,'      <p28>'+_rate(_a.PPK)+'</p28>') ?};

::       Laczna kwota skladek
         _to_file(_b,'      <p29>'+_rate(_a.FEP+_a.FRP+_a.FCP+_a.FEZ+_a.FRZ+_a.FWZ+_a.FEB+_a.FRB)+'</p29>');
         _to_file(_b,'   </B>');

::       III.C. Zestawienie naleznych skladek na ubezpieczenie zdrowotne
         _to_file(_b,'   <C>');
::       Podstawa wymiaru skladki na ubezpieczenie zdrowotne
         _to_file(_b,'      <p1>'+_rate(_a.POD_KC)+'</p1>');
::       Kwota naleznej skladki finansowana przez platnika
         _to_file(_b,'      <p2>'+_rate(0)+'</p2>');
::       Kwota naleznej skladki finansowana z budzetu panstwa bezposrednio do ZUS
         _to_file(_b,'      <p3>'+_rate(_a.KCB)+'</p3>');
::       Kwota naleznej skladki finansowana przez ubezpieczonego
         _to_file(_b,'      <p4>'+_rate(_a.KCP)+'</p4>');
::       Kwota naleznej skladki finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p5>'+_rate(0)+'</p5>');
         _to_file(_b,'   </C>');


::       III.D. Zestawienie wyplaconych swiadczen finansowanych z budzetu panstwa
         _to_file(_b,'   <D>');
::       Kwota wyplaconego zasilku rodzinnego
         {? _a.KZR || _to_file(_b,'      <p1>'+_rate(_a.KZR)+'</p1>') ?};
::       Kwota wyplaconego zasilku wychowawczego
         {? _a.KZW || _to_file(_b,'      <p2>'+_rate(_a.KZW)+'</p2>') ?};
::       Kwota wyplaconego zasilku pielegnacyjnego
         {? _a.KZP || _to_file(_b,'      <p3>'+_rate(_a.KZP)+'</p3>') ?};
::       Laczna kwota wyplaconych zasilkow (rodzinnego, wychowawczego, pielegnacyjnego
         _to_file(_b,'      <p4>'+_rate(_a.KZR+_a.KZW+_a.KZP)+'</p4>');
         _to_file(_b,'   </D>');

::       III.E. Forma opodatkowania obowiązująca w danym miesiącu oraz przychód i dochód z działalności gospodarczej
::              dla celów wyliczenia składki miesięcznej na ubezpieczenie zdrowotne
         _to_file(_b,'   <E>');
         _to_file(_b,'   </E>');

::       III.F. Roczne rozliczenie składki na ubezpieczenie zdrowotne w przypadku stosowania opodatkowania w formie
::              ryczałtu od przychodów ewidencjonowanych
         _to_file(_b,'   <F>');
         _to_file(_b,'   </F>');

         _to_file(_b,'</III>')
      ?}
   ?};
   _a.next
!};

:: IV. Oswiadczenie platnika skladek
_to_file(_b,'<IV>');
_to_file(_b,'   <p1>'+_dataxml+'</p1>');
_to_file(_b,'</IV>');

:: Stopka i zakonczenie dokumentu
_to_file(_b,'</ZUSRCA>');
_to_file(_b,'</KEDU>');

:: Lista osob pominietych z powodu przekroczenia maksymalnych wartosci mozliwych do zaimportowania w programie PLATNIK
{? _outpass.first
|| _errInfo:='Znaleziono osoby, dla których przygotowanie ZUS RCA nie było możliwe'@+'\n'+
             '(powód został podany przy każdej osobie).'@;
   {? ~exec('interm','#system')
   || _errInfo+='\n\n'+'Listę zaleca się wydrukować wykorzystując mechanizm autoraportów.'@
   ?};
   FUN.info(_errInfo);
   {!
   |? _outpass.select;
      FUN.ask('Zaleca się wydrukowanie niniejszej listy.'@+'\n'+
              'Po zakończeniu działania funkcji lista zostanie porzucona.'@+'\n'+
              'Czy powrócić do listy?'@)
   !}
?};
1


\zus_rsa_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS RSA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

exec('zus_rxa_dialog','!ppl_zes_wzus')


\zus_rsa_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy deklarację ZUSRSA - raport imienny o wypłaconych świadczeniach
::   WE: _a [_O] - wskazanie listy płac.
::       [_b] [STRING] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::   WY:
::  OLD: \generuj/rap_rsa.fml
::----------------------------------------------------------------------------------------------------------------------
_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};
{? O.seek(_a)
||
:  parametry raportu
   _firma:=exec('ref_firma','ustawienia');
   _zdate:=date(0,0,0);
   _start:=date(O.RU,O.MU,1);
   _stop:=date(O.RU,O.MU,0);
   _kod_ods:=',711,712,713,714,716,717,';
   _spr_3000:=
      "  P.cntx_psh();
         P.index('PRACOSOB');
         _wyn:=(_date:=exec('ustal_dz','rap_zus',O.RU,O.MU))<>date(0,0,0) & _date<date(O.RU,O.MU,1);
         P.cntx_pop();
         _wyn
      ";
:  wylicz składki finansowane przez budżet państwa
   exec('wyl_wych','rap_zus');
:  utwórz bufor raportu
   _RSA:=tab_tmp(2,
     'OSOBA' ,'INTEGER'   ,'Dane osobowe',
     'TTUB'  ,'STRING[6]' ,'Tytuł ubezpieczenia',
     'TPID'  ,'STRING[1]' ,'Typ identyfikatora',
     'NRID'  ,'STRING[11]','Identyfikator',
     'KDSW'  ,'STRING[3]' ,'Kod świadczenia',
     'OD'    ,'DATE'      ,'Od dnia',
     'DO'    ,'DATE'      ,'Do dnia',
     'LICZ'  ,'INTEGER'   ,'Liczba dni/wypłat',
     'KDCH'  ,'STRING[2]' ,'Kod choroby',
     'KW'    ,'REAL'      ,'Kwota'
    );

:  bufor do odczytu składników list płac
:  (wypłaconych świadczeń i zasiłków)
   _LKW:=tab_tmp(2,
     'OS'    ,'STRING[16]','Osoba',
     'RN'    ,'INTEGER'   ,'Rubryka',
     'KW'    ,'REAL'      ,'Kwota'
    );

:  zapis składników list do bufora
   _listy:='\''+VAR.NAZWALIS+'\',';
   O.cntx_psh();
   O.index('LISTYPLU');
   O.prefix(_firma,__F_ZATR.O,O.RU,O.MU);
   _do0404:=(date(O.RU,O.MU,0)<=date(2004,4,0));
   {? O.first()
   || R.index('RUBKOD');
      R.prefix();
:     procedura dodająca do bufora informacje o składniku: numer rekordu w ta-
:     beli osób, numer rubryki, kwota. do procedury jako pierwszy argument mu-
:     si być przekazany "uchwyt" bufora, kolejne argumenty to kody składników

      ins:="
         {! _arg:=2.._
         |! {? R.find_key(_[_arg])
            || LS.prefix(exec('ref_firma','ustawienia'),R.ref());
               {? LS.first()
               || {!
                  |? _a.OS:=$LS.P().OSOBA;
                     _a.RN:=_[_arg];
                     _a.KW:=LS.KW;
                     _a.add();
                     LS.next()
                  !}
               ?}
            ?}
         !}
      ";
      {!
      |? FUNKCJE.OTWOLIST();
:           przeglądanie listy płac w kolejności umożliwiającej pominięcie
:           odwołania do pracownika - ograniczenie dziedziny do składników
:           o rządanym kodzie drastycznie przyśpiesza działanie raportu
         LS.index('NAZWRUBR');
         LS.prefix(_firma);
         {? LS.first()
         ||
:           przeglądaj jedynie listy zawierające
:           jakiekolwiek składniki - optymalizacja
            echo('Odczyt listy '+VAR.NAZWALIS);
:           _listy - zestaw nazw list do późniejszego
:           wykorzystania w zapytaniu do tabeli N
            _listy+='\''+VAR.NAZWALIS+'\',';
:           pobierz informacje o zasiłkach
            ($('ins(_a,'+__RUB.sys_sql(411)+','+__RUB.sys_sql(412)+')'))(_LKW);
            ins(_LKW,510,511,516,517);
            ins(_LKW,512,513,523,524,529,530);
            ins(_LKW,531,533,534,537);
            {? _do0404 || ins(_LKW,541) ?}
         ?};
         O.next()
      !};
      &ins
   ?};
   echo();
   &_do0404;
   O.cntx_pop();
   FUNKCJE.OTWOLIST();
   _listy:=_listy-1;

:  "normalizacja" zapisów w buforze - zamiana kodów określających takie same
:  świadczenia: wyrównanie świadczenia -> świadczenie, choroba 100% -> choroba
:  począwszy od dnia 2003.10.01 wyrównania wypłaconych świadczeń muszą być ra-
:  portowane jako oddzielne pozycje - normalizacja tylko dla poprzednich mies.
   {? _LKW.first() & _stop<date(2003,10,1)
   || {!
      |? _LKW.RN:={? _LKW.RN=467 || 465
            |? _LKW.RN=469 || 468
            |? _LKW.RN=511 || 510
            |? _LKW.RN=517 || 516
            |? _LKW.RN=513 || 512
            |? _LKW.RN=524 || 523
            |? _LKW.RN=530 || 529
            |? _LKW.RN=537 || 531
            ?};
         {? _LKW.RN || _LKW.put() ?};
         _LKW.next()
      !}
   || {!
      |? {? _LKW.RN=517 || _LKW.RN:=511; _LKW.put() ?};
         _LKW.next()
      !}
   ?};
:  zsumowanie kwot według "refa" osoby i kodu składnika
   _ZAS:=sql('select OS, RN, sum(KW) KW from :_a group by OS, RN',_LKW);
   _ZAS.index(_ZAS.ndx_tmp('Osoba',0,'OS',,0,'RN',,0));
:  bufor zawierający kwoty składników list płac nie jest już
:  potrzebny jego rolę przejmuje tabela z podsumowaniami
   obj_del(_LKW);

   P.cntx_psh();
   P.index('PRACOIP');
   P.prefix(_firma,__F_ZATR.P);
:  okresy do raportowania - nieobecności
   echo('Trwa analiza danych z kartoteki "nieobecności"...');

: odjecie wartosci ewentualnych korekt
   N.cntx_psh();
   N.index('NIEOTREE');
   _NBKOR:=tab_tmp(2,
      'OSOBA','STRING[16]','Dane osobowe',
      'IP','INTEGER','IP',
      'RN','INTEGER','RN',
      'DK','INTEGER','DK',
      'SW','STRING[9]','SW',
      'CH','STRING[9]','CH',
      'OD','DATE','Od dnia',
      'DO','DATE','Do dnia',
      'KW','REAL','Kwota'
   );
:  tabela nierozliczonych korekt
   _NBKOK:=tab_tmp(2,
      'OSOBA','STRING[16]','Dane osobowe',
      'IP','INTEGER','IP',
      'RN','INTEGER','RN',
      'DK','INTEGER','DK',
      'SW','STRING[9]','SW',
      'CH','STRING[9]','CH',
      'OD','DATE','Od dnia',
      'DO','DATE','Do dnia',
      'KW','REAL','Kwota'
   );
   {? (_NBK:=sql_exec('!sql_rsa_nkor',
           _start,
           _stop,
           _listy,
         __RUB.sys_sql(19421,date(O.R,O.M,0)),
         __RUB.sys_sql(19422,date(O.R,O.M,0)),
         _firma)).first()
   || {!
      |? N.prefix(BIT.sqlint(_NBK.REF));
         _licz_n:=0;
         {? N.first()
         || {!
            |? {? N.LT<>''
               || _licz_n:=1;
                  {? __RUB.sys_attr(N.NB,12,N.OD)
                  || _NBKOR.OSOBA:=_NBK.OSOBA;
                     _NBKOR.IP:=_NBK.IP;
                     _NBKOR.RN:=N.NB().RN;
                     _NBKOR.OD:=N.OD;
                     _NBKOR.DO:=N.DO;
                     _NBKOR.DK:=N.DK;
                     _NBKOR.SW:=N.KDSW().KOD;
                     _NBKOR.CH:=N.KDCH().KOD;
                     _NBKOR.KW:=N.WART;
                     _NBKOR.add()
                  ?}
               ?};
               N.next()
            !}
         || _licz_n:=1
         ?};
         {? _licz_n
         || _NBK.next()
         ||
:           dodaj korekty jeszcze nierozliczone jako zwykle nieobecnosci
            _NBKOK.blank(1);
            _NBKOK.OSOBA:=_NBK.OSOBA;
            _NBKOK.IP:=_NBK.IP;
            _NBKOK.RN:=_NBK.RN;
            _NBKOK.OD:=_NBK.OD;
            _NBKOK.DO:=_NBK.DO;
            _NBKOK.DK:=_NBK.DK;
            _NBKOK.SW:=_NBK.SW;
            _NBKOK.CH:=_NBK.CH;
            _NBKOK.KW:=_NBK.KW;
            _NBKOK.add();
            _NBK.del()
         ?}
      !};
      &_licz_n;
      {? _NBK.first()
      || N.prefix();
         {!
         |? {? N.seek(_NBK.REF) & N.RODZAJ='K'
            || {? N.seek(N.N_KOR,) & (~__RUB.sys_attr(N.NB,14,N.OD) | __RUB.sys_attr(N.NB,14350,N.OD))
               || _NBKOR.OSOBA:=_NBK.OSOBA;
                  _NBKOR.IP:=_NBK.IP;
                  _NBKOR.RN:=_NBK.RN;
                  _NBKOR.OD:=_NBK.OD;
                  _NBKOR.DO:=_NBK.DO;
                  _NBKOR.DK:=_NBK.DK;
                  _NBKOR.SW:=_NBK.SW;
                  _NBKOR.CH:=_NBK.CH;
                  _NBKOR.KW:=_NBK.KW;
                  _NBKOR.add()
               ?}
            ?};
            _NBK.next()
         !}
      ?};

:     utwórz bufor zawierający informacje o wystąpieniu dla danej
:     osoby więcej niż jednej nieobecności tego samego rodzaju
      {? _NBK.first()
      || {!
         |? _kod:=
               {? __RUB.sys_attr(_NBK.RN,12212,date(O.R,O.M,0)) || __RUB.sys_val(12212,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,12211,date(O.R,O.M,0)) || __RUB.sys_val(12211,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,1211,date(O.R,O.M,0))  || __RUB.sys_val(1211,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,1222,date(O.R,O.M,0))  || __RUB.sys_val(1222,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,1212,date(O.R,O.M,0))  || __RUB.sys_val(1212,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,12213,date(O.R,O.M,0)) || __RUB.sys_val(12213,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,1227,date(O.R,O.M,0))  || __RUB.sys_val(1227,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NBK.RN,1225,date(O.R,O.M,0))  || __RUB.sys_val(1225,date(O.R,O.M,0))
               ?};
            {? _kod & OSOBA.seek(_NBK.OSOBA) & _ZAS.find_key(_NBK.OSOBA,_kod)
            || _ZAS.KW-=_NBK.KW;
               {? ~_ZAS.KW
               || _ZAS.del()
               || _ZAS.put()
               ?}
            ?};
            _NBK.next()
         !}
      ?};
::    normalizacja korekt
      _NDUPK:=sql(
         'select OSOBA, RN, count(*) as N '
         'from :_a '
         'group by OSOBA, RN '
         'having count(*)>=2',
         _NBK
      );
      _NBK.index(_NBK.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0,'OD',,0));
      _NDUPK.index(_NDUPK.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0));
      {? _NDUPK.first()
      || {!
         |? _NBK.prefix(_NDUPK.OSOBA,_NDUPK.RN);
            {? _NBK.first()
            || exec('norm_nie','!ppl_zes_wzus',_NBK,_NDUPK)
            ?};
            _NDUPK.next()
         !};
         _NBK.clear()
      ?};
      &_NDUPK
   ?};
   N.cntx_pop();

:  Wyrownania dla macierzyńskiego podczas wychowawczego
   _WYR:=sql(
      'select   P.OSOBA, LSW.OD, LSW.DO, S_ZUS.KOD '
      'from     LSW join P join S_ZUS using (LSW.KDSW,S_ZUS.REFERENCE) '
      'where    P.FIRMA=:_d and LSW.Z=\'H\' and to_date(:_c)<=LSW.OD and LSW.OD<=to_date(:_b) and LSW.DO>=to_date(:_a) '
      'order by P.OSOBA, S_ZUS.KOD, LSW.OD',
      _start,_stop,date(2003,10,1),_firma
   );
   {? _WYR.first()
   || _cmp:=obj_new(5);
      _cmp[5]:="
         _a[1]:=_b.ref;
         _a[2]:=_b.OSOBA;
         _a[3]:=_b.OD;
         _a[4]:=_b.DO
      ";
      _cmp[5](_cmp,_WYR);
      {!
      |? _WYR.next()
      |! {?_cmp[2]<>_WYR.OSOBA | _cmp[4]+1<_WYR.OD
         || _cmp[5](_cmp,_WYR)
         || {? _cmp[4]~2<>_WYR.OD~2
            || _cmp[5](_cmp,_WYR)
            || {? _cmp[4]<_WYR.DO
               || _cmp[4]:=_WYR.DO
               ?};
               _WYR.del();
               _WYR.seek(_cmp[1]);
               _WYR.DO:=_cmp[4];
               _WYR.put()
            ?}
         ?}
      !};
      _WYR.first();
      {!
      |? {? _WYR.OD~1<>_WYR.DO~1 | _WYR.OD~2<>_WYR.DO~2
         || _cmp[1]:=_WYR.ref();
            _cmp[4]:=date(_WYR.OD~1,_WYR.OD~2,0);
            _cmp[3]:=_cmp[4]+1;
            _WYR.DO:=_cmp[4];
            {? _WYR.add() & _WYR.seek(_cmp[1])
            || _WYR.OD:=_cmp[3];
               _WYR.put()
            || _WYR.next()
            ?}
         || _WYR.next()
         ?}
      !};
      obj_del(_cmp)
   ?};

   _NB:=sql_exec('!sql_rsa_niek',
      _start,
      _stop,
      _listy,
      __RUB.sys_sql(19421,date(O.R,O.M,0)),
      __RUB.sys_sql(19422,date(O.R,O.M,0)),
      _firma
   );
   {? _NB.first() | _NBKOR.first() | _NBK.first() | _NBKOK.first()
   || {? _NBKOR.first()
      || {!
         |? _NB.OSOBA:=_NBKOR.OSOBA;
            _NB.IP:=_NBKOR.IP;
            _NB.RN:=_NBKOR.RN;
            _NB.OD:=_NBKOR.OD;
            _NB.DO:=_NBKOR.DO;
            _NB.DK:=_NBKOR.DK;
            _NB.SW:=_NBKOR.SW;
            _NB.CH:=_NBKOR.CH;
            _NB.KW:=_NBKOR.KW;
            _NB.add();
            _kod:={? __RUB.sys_attr(_NBKOR.RN,12212,date(O.R,O.M,0)) || __RUB.sys_val(12212,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,12211,date(O.R,O.M,0)) || __RUB.sys_val(12211,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,1211,date(O.R,O.M,0))  || __RUB.sys_val(1211,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,1222,date(O.R,O.M,0))  || __RUB.sys_val(1222,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,1212,date(O.R,O.M,0))  || __RUB.sys_val(1212,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,12213,date(O.R,O.M,0)) || __RUB.sys_val(12213,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,1227,date(O.R,O.M,0))  || __RUB.sys_val(1227,date(O.R,O.M,0))
                  |? __RUB.sys_attr(_NBKOR.RN,1225,date(O.R,O.M,0))  || __RUB.sys_val(1225,date(O.R,O.M,0))
                  ?};
            {? _kod & OSOBA.seek(_NBKOR.OSOBA) & _ZAS.find_key(_NBKOR.OSOBA,_kod)
            || _ZAS.KW+=_NBKOR.KW;
               _ZAS.put()
            ?};
            _NBKOR.next()
         !}
      ?};
:     dodaj korekty jeszcze nierozliczone jako zwykle nieobecnosci
      {? _NBKOK.first()
      || {!
         |? _NB.OSOBA:=_NBKOK.OSOBA;
            _NB.IP:=_NBKOK.IP;
            _NB.RN:=_NBKOK.RN;
            _NB.OD:=_NBKOK.OD;
            _NB.DO:=_NBKOK.DO;
            _NB.DK:=_NBKOK.DK;
            _NB.SW:=_NBKOK.SW;
            _NB.CH:=_NBKOK.CH;
            _NB.KW:=_NBKOK.KW;
            _NB.add();
            _NBKOK.next()
         !}
      ?};

:     utwórz bufor zawierający informacje o wystąpieniu dla danej
:     osoby więcej niż jednej nieobecności tego samego rodzaju
      {? _NB.first()
      || {!
         |? {? {? __RUB.sys_attr(_NB.RN,122111,date(O.R,O.M,0)) || _NB.RN:=__RUB.sys_rub(122112,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,122113,date(O.R,O.M,0)) || _NB.RN:=__RUB.sys_rub(122112,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,122114,date(O.R,O.M,0)) || _NB.RN:=__RUB.sys_rub(122112,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,1211,date(O.R,O.M,0))   || _NB.RN:=__RUB.sys_rub(12112,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,1222,date(O.R,O.M,0))   || _NB.RN:=__RUB.sys_rub(12221,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,12272,date(O.R,O.M,0))  || _NB.RN:=__RUB.sys_rub(122721,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,12274,date(O.R,O.M,0))  || _NB.RN:=__RUB.sys_rub(122741,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,1225,date(O.R,O.M,0))   || _NB.RN:=__RUB.sys_rub(12251,date(O.R,O.M,0)).RN
               |? __RUB.sys_attr(_NB.RN,12212,date(O.R,O.M,0))  || _NB.RN:=__RUB.sys_rub(122121,date(O.R,O.M,0)).RN
               ?}
            || _NB.put()
            ?};
            _NB.next()
         !}
      ?};

      _NDUP:=sql(
         'select   OSOBA, RN, count(*) as N '
         'from     :_a '
         'group by OSOBA, RN '
         'having   count(*)>=2',
         _NB
      );
      _NB.index(_NB.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0,'OD',,0));
      _NDUP.index(_NDUP.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0));
      {? _NDUP.first()
      || {!
         |? _NB.prefix(_NDUP.OSOBA,_NDUP.RN);
            {? _NB.first()
            || exec('norm_nie','!ppl_zes_wzus',_NB,_NDUP)
            ?};
            _NDUP.next()
         !};
         {!
         |? {? _NDUP.N
            || _NDUP.prev()
            || _NDUP.del()
            ?}
         !};
         _NB.clear()
      ?};
      _NB.first();

      {? _NBK.first()
      ||
::       usuniecie korekt jesli istnieja normalne zapisy dla danej osoby
         {? _NB.first()
         || {!
            |? _NBK.prefix(_NB.OSOBA);
               {? _NBK.first()
               || {!
                  |? _NBK.del()
                  !}
               ?};
               _NB.next()
            !};
            _NBK.clear()
         ?};
::       dodanie zerowych zapisow korekt jezeli nie ma w danym miesiacu zwyklych zapisow
         {? _NBK.first()
         || {!
            |? {? _NBK.RODZAJ<>'K'
               || _NB.OSOBA:=_NBK.OSOBA;
                  _NB.IP:=_NBK.IP;
                  _NB.RN:=_NBK.RN;
                  _NB.OD:=_NBK.OD;
                  _NB.DO:=_NBK.DO;
                  _NB.DK:=0;
                  _NB.SW:=_NBK.SW;
                  _NB.CH:=_NBK.CH;
                  _NB.KW:=0;
                  _NB.KOR:=1;
                  _NB.add()
               ?};
               _NBK.next()
            !}
         ?};
         _NB.first()
      ?};

:     twórz pozycje raportu
      {!
      |? {? OSOBA.seek(_NB.OSOBA)
         || echo('Pracownik: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
:           ustal kod świadczenia dla danej nieobecności
            _kod:=
               {? __RUB.sys_attr(_NB.RN,12212,date(O.R,O.M,0)) || __RUB.sys_val(12212,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,12211,date(O.R,O.M,0)) || __RUB.sys_val(12211,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,1211,date(O.R,O.M,0))  || __RUB.sys_val(1211,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,1222,date(O.R,O.M,0))  || __RUB.sys_val(1222,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,1212,date(O.R,O.M,0))  || __RUB.sys_val(1212,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,12213,date(O.R,O.M,0)) || __RUB.sys_val(12213,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,1227,date(O.R,O.M,0))  || __RUB.sys_val(1227,date(O.R,O.M,0))
               |? __RUB.sys_attr(_NB.RN,1225,date(O.R,O.M,0))  || __RUB.sys_val(1225,date(O.R,O.M,0))
               ?};
            _RSA.blank();
            _RSA.OSOBA:=#OSOBA.ref();
            {? exec('zn_ttub','pracownik',,_stop)
            || exec('ustaw_pi','rap_zus',_RSA,'TPID','TTUB');
               {? _spr_3000()
               || _RSA.TTUB:='3000'+(_RSA.TTUB+2)
               ?}
            || exec('info','rap_zus',1,'ZUS RSA')
            ?};
:           począwszy od dnia 2003.10.01 obowiązuje
:           raportowanie tzw. "krótkiej" choroby (155)
            {? _dk:=(_NB.DK>=1 & date(2003,10,1)<=_NB.OD)
            || _RSA.KDSW:='155';
               _RSA.OD:=_NB.OD;
               _RSA.DO:=_NB.OD;
               _RSA.LICZ:=1;
               _RSA.KDCH:=_NB.CH;
               {? _NB.OD<_NB.DO
               || _RSA.add()
               ?}
            ?};
            _ok:=1;
            {? _RSA.KDSW<>'155' | _RSA.KDSW='155' & _NB.OD<_NB.DO
            || _RSA.KDSW:=_NB.SW;
               _RSA.OD:=_NB.OD+&_dk;
               _RSA.DO:=_NB.DO;
               {? _NB.KOR
               || _RSA.LICZ:=0
               || {? _RSA.KDSW='321' | _RSA.KDSW='322'
                  || _RSA.LICZ:=1
                  |? _NB.SW='121' | _NB.SW='122'
:                    Uwzglednienie macierzynskiego w trakcie wychowawczego
                  || _mac_od:=_mac_do:=#0;
                     _WYR.prefix(_NB.OSOBA,'311');
                     {? _WYR.first()
                     || _mac_od:=_WYR.OD;
                        _mac_do:=_WYR.DO
                     ?};
                     {? _mac_od<>#0
                     || {? _mac_od<=_RSA.DO & _mac_do>=_RSA.OD
                        || {? _mac_od>_RSA.OD
                           || _RSA.DO:=_mac_od-1
                           |? _mac_do<_RSA.DO
                           || _RSA.OD:=_mac_do+1
                           || _ok:=0;
::                            sprawdzenie czy mamy podstawy skladek od zasilku macierzynskiego w ZUS RCA
::                            jesli nie to raport zerowy RSA tworzony gdy nie ma danych w polu KU.S7 lub brak karty
                              KU.index('KARTAUB');
                              KU.prefix(_firma,OSOBA.ref,_start~1,_start~2);
                              {? KU.first()
                              || {? ~KU.S7
                                 || _ok:=1
                                 ?}
                              || _ok:=1
                              ?};
                              {? _ok
                              || _RSA.KDSW:='311';
                                 _RSA.OD:=_mac_od;
                                 _RSA.DO:=_mac_do
                              ?}
                           ?}
                        ?}
                     ?};
                     _RSA.LICZ:=_RSA.DO-_RSA.OD+1
                  || _RSA.LICZ:=_RSA.DO-_RSA.OD+1
                  ?}
               ?};
               _RSA.KDCH:=_NB.CH;
               _RSA.KW:=_NB.KW$2;

:              ustal wysokość świadczenia związanego z nieobecnością
:              ─────────────────────────────────────────────────────
:              wyszukaj łączną kwotę wypłaconych świadczeń
               {? _kod & _ZAS.find_key(_NB.OSOBA,_kod)
               ||
:                 Uwaga! może zaistnieć konieczność "rozłożenia"
:                 kwoty świadczenia pomiędzy kilka nieobecności
                  {? _NDUP.find_key(_NB.OSOBA,_NB.RN)
:                    wiele nieobecności - koryguj kwotę w buforze
:                    składników listy o wyliczoną kwotę świadczenia
:                    oraz licznik wystąpień "zgodnych" nieobecności
                  || {? _ZAS.KW<_RSA.KW
                     || _RSA.KW:=_ZAS.KW
                     ?};
                     {? _ZAS.KW-=_RSA.KW
                     || _ZAS.put()
                     || _ZAS.del()
                     ?};
                     {? _NDUP.N>2
                     || _NDUP.N-=1;
                        _NDUP.put()
                     || _NDUP.del()
                     ?}
:                    pojedyńcza nieobecność - zastąp wyliczoną kwotę
:                    świadczenia wartością przechowywaną w buforze
                  |? _kod=523
                  || {? _ZAS.KW<_RSA.KW
                     || _RSA.KW:=_ZAS.KW
                     ?};
                     {? _ZAS.KW-=_RSA.KW
                     || _ZAS.put()
                     || _ZAS.del()
                     ?}
                  || _RSA.KW:=_ZAS.KW;
                     _ZAS.del()
                  ?}
               ?}
            ?};
            {? _ok
            || _RSA.add()
            ?}
         ?};
         _NB.next()
      !};
      echo();
      obj_del(_NDUP)
   ?};
   obj_del(_NB);
   obj_del(_NBKOR);
   obj_del(_NBKOK);
   obj_del(_WYR);
   &_NBKOR;
   &_NBKOK;

:  okresy do raportowania - nieobecności zleceniobiorcow
   echo('Trwa analiza danych z kartoteki "nieobecności zleceniobiorców"...');
   {? (_NB:=sql_exec('!sql_rsa_niez',_start,_stop,_firma)).first()
   ||
:     utwórz bufor zawierający informacje o wystąpieniu dla danej
:     osoby więcej niż jednej nieobecności tego samego rodzaju
      {!
      |? {? {? __RUB.sys_attr(_NB.RN,122111,date(O.R,O.M,0)) || _NB.RN:=__RUB.sys_rub(122112,date(O.R,O.M,0)).RN
            |? __RUB.sys_attr(_NB.RN,1222,date(O.R,O.M,0))   || _NB.RN:=__RUB.sys_rub(12221,date(O.R,O.M,0)).RN
            |? __RUB.sys_attr(_NB.RN,12272,date(O.R,O.M,0))  || _NB.RN:=__RUB.sys_rub(122721,date(O.R,O.M,0)).RN
            |? __RUB.sys_attr(_NB.RN,12274,date(O.R,O.M,0))  || _NB.RN:=__RUB.sys_rub(122741,date(O.R,O.M,0)).RN
            ?}
         || _NB.put()
         ?};
         _NB.next()
      !};

      _NDUP:=sql(
         'select   OSOBA, RN, TTUB, PREM, STNP, count(*) as N '
         'from     :_a '
         'group by OSOBA, RN, TTUB, PREM, STNP '
         'having   count(*)>=2',
         _NB
      );
      _NB.index(_NB.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0,'TTUB',,0,'PREM',,0,'STNP',,0,'OD',,0));
      _NDUP.index(_NDUP.ndx_tmp('Osoba',0,'OSOBA',,0,'RN',,0));
      {? _NDUP.first()
      || {!
         |? _NB.prefix(_NDUP.OSOBA, _NDUP.RN, _NDUP.TTUB, _NDUP.PREM, _NDUP.STNP );
            {? _NB.first() || exec('norm_nie','!ppl_zes_wzus',_NB,_NDUP) ?};
            _NDUP.next()
         !};
         {! |? {? _NDUP.N || _NDUP.prev() || _NDUP.del() ?} !};
         _NB.clear()
      ?};
      _NB.first();
:    twórz pozycje raportu
      ZC_INFO.index('ZLECDW');
      {!
      |? {? OSOBA.seek(_NB.OSOBA)
         || echo('Osoba: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
            _RSA.blank();
            _RSA.OSOBA:=#OSOBA.ref();
            _RSA.TTUB:=_NB.TTUB+_NB.PREM+_NB.STNP;
            {? exec('zn_ttub','pracownik',,_stop)
            || exec('ustaw_pi','rap_zus',_RSA,'TPID');
               ZC_INFO.prefix(_firma,OSOBA.ref());
::             nie ma juz nastepnej umowy
               _zap_zlec:=1;
               {? ZC_INFO.last()
               || {!
                  |? {? ZC_INFO.DW>_NB.ZCDW & ZC_INFO.DW>=_start & ZC_INFO.DU<=_stop
                        &
                        ((ZC_INFO.ZUS+ZC_INFO.FC+ZC_INFO.FW+ZC_INFO.FP+ZC_INFO.FG)*'T')
                     || _zap_zlec:=0
                     ?};
                     ZC_INFO.prev() & _zap_zlec & ZC_INFO.DW>=_start
                  !};
                  {? _zap_zlec || _RSA.TTUB:='3000'+(_RSA.TTUB+2) ?}
               ?}
            || exec('info','rap_zus',1,'ZUS RSA')
            ?};

            _RSA.KDSW:=_NB.SW;
            _RSA.OD  :=_NB.OD;
            _RSA.DO  :=_NB.DO;
            {? _RSA.KDSW='321' | _RSA.KDSW='322'
            || _RSA.LICZ:=1
            || _RSA.LICZ:=_RSA.DO-_RSA.OD+1
            ?};
            _RSA.KDCH:=_NB.CH;
            _RSA.KW  :=_NB.KW$2;
            _RSA.add()
         ?};
         _NB.next()
      !};
      echo;
      obj_del(_NDUP)
   ?};
   obj_del(_NB);

:  wyrównania wypłaconych świadczeń
:  dotyczy okresu po dniu 2003.10.01
   {? date(2003,10,1)<=_start &
      (_WYR:=sql(
         'select  P.OSOBA OSOBA, R.RN RN, LSW.OD OD, LSW.DO DO, S_ZUS.KOD KOD, LSW.LT LT, LSW.KW as KW,'
         '        0 as MAC '
         'from    LSW join P join R join S_ZUS using (LSW.KDSW,S_ZUS.REFERENCE) '
         'where   LSW.Z<>\'H\' and P.FIRMA=:_d and R.RN in (:_a) and LSW.LT in (:_b) and '
         '        to_date(:_c)<=LSW.OD '
         'order by OSOBA, KOD, OD '
         'union all '
         'select  P.OSOBA OSOBA, R.RN RN, LSW.OD OD, LSW.DO DO, S_ZUS.KOD KOD, LSW.LT LT, LSW.KW as KW, 0 as MAC '
         'from    LSW join P join R join S_ZUS using (LSW.KDSW,S_ZUS.REFERENCE) '
         'where   LSW.Z=\'H\' and P.FIRMA=:_d and R.RN in (:_a) and LSW.LT in (:_b) and to_date(:_c)<=LSW.OD '
         'order by OSOBA, KOD, OD',
         1-(exec('wyr_zas','lista_wyr')+(1-_kod_ods-1)),
         _listy,
         date(2003,10,1),
         _firma
      )).first()
   || {!
      |? {? _WYR.RN=517
         || _WYR.RN:=511;
            _WYR.put()
         ?};
         _WYR.next()
      !};
      {| _WYR |!
         first;
         _cmp:=obj_new(7);
         _cmp[7]:="_a[1]:=_b.ref(); _a[2]:=_b.OSOBA;
                   _a[3]:=_b.OD;  _a[4]:=_b.DO;
                   _a[5]:=_b.KOD; _a[6]:=_b.KW";
         _cmp[7](_cmp,_WYR);
         {! |? next
            |! {? {? _kod_ods*(','+$_cmp[5]+',') | _kod_ods*(','+$RN+',')
                  || 1
                  || _cmp[2]<>OSOBA |
                     _cmp[5]<>KOD |
                     _cmp[4]+1<OD
                  ?}
                  || _cmp[7](_cmp,_WYR)
                  || {? _cmp[4]~2<>OD~2
                     || _cmp[7](_cmp,_WYR)
                     || _cmp[6]+=KW;
                        {? _cmp[4]<DO ||
                           _cmp[4]:=DO
                        ?};
                        del;
                        seek(_cmp[1]);
                        DO:=_cmp[4];
                        KW:=_cmp[6];
                        put
                     ?}
         ?}    !};
         first;
         {!
         |? {? -(LT+3)<>'otk' & (OD~1<>DO~1 | OD~2<>DO~2)
            || _cmp[1]:=ref;
               _cmp[4]:=date(OD~1,OD~2,0);
               _cmp[3]:=_cmp[4]+1;
               _cmp[6]:=(KW*((_cmp[4]-OD+1)/(DO-OD+1)))$2;
               DO:=_cmp[4];
               KW:=_cmp[6];
               {? add & seek(_cmp[1])
               || OD:=_cmp[3];
                  KW-=_cmp[6];
                  put
               || next
               ?}
            || next
            ?}
         !};
         obj_del(_cmp);
         &_cmp
      |};
:     twórz pozycje raportu
      {!
      |? {? OSOBA.seek(_WYR.OSOBA)
         || {? ~(_WYR.KOD='329' & _WYR.KW=0)
            || echo('Pracownik: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
               _RSA.blank();
               _RSA.OSOBA:=#OSOBA.ref();
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_RSA,'TPID','TTUB');
                  {? _kod_ods*(','+$_WYR.RN+',')
                  || _RSA.TTUB:='5000'+(_RSA.TTUB+2)
                  || {? _WYR.MAC
                     || _RSA.TTUB:='1240'+(_RSA.TTUB+2)
                     || {? _spr_3000() || _RSA.TTUB:='3000'+(_RSA.TTUB+2) ?}
                     ?}
                  ?}
               || exec('info','rap_zus',1,'ZUS RSA')
               ?};
               _RSA.KDSW:=_WYR.KOD;
               _RSA.OD:=_WYR.OD;
               _RSA.DO:=_WYR.DO;
::             dla wyrównań świadczeń rehab. wykazujemy liczbę (zwykle 1)
               _RSA.LICZ:={? _RSA.KDSW<>'323' & _RSA.KDSW<>'324' || _RSA.DO-_RSA.OD+1 || 1 ?};
               _RSA.KDCH:='';
               _RSA.KW:=_WYR.KW$2;

               {? _ZAS.find_key(_WYR.OSOBA,_WYR.RN)
               || _ZAS.KW:={? _WYR.KW<_ZAS.KW || _ZAS.KW-_WYR.KW ?};
                  {? _ZAS.KW || _ZAS.put() || _ZAS.del() ?}
               ?};
               _RSA.add()
            ?}
         ?};
         _WYR.del()
      !};
      echo()
   ?};
   {? var_pres('_WYR')=type_of(SYSLOG) || obj_del(_WYR); &_WYR ?};
:  wyrównania wypłaconych świadczeń - zleceniobiorcy
   {? date(2003,10,1)<=_start
      &
      (_WYR:=sql(
         'select OS_N.OSOBA, R.RN, ZC_N.OD, ZC_N.DO, KSW.KOD KSW, ZC_N.KW,TTUB.KOD TTUB, PREM.KOD PREM, STNP.KOD STNP '
         'from   ZC_N join RH using (ZC_N.RH, RH.REFERENCE) join OS_N using (ZC_N.OS_N, OS_N.REFERENCE) join '
         '       ZC using (RH.ZLE, ZC.REFERENCE) join R using (ZC_N.R, R.REFERENCE) join '
         '       S_ZUS KSW using (ZC_N.KDSW, KSW.REFERENCE) join S_ZUS TTUB using (ZC.TTUB,TTUB.REFERENCE) join '
         '       S_ZUS PREM using (ZC.PREM,PREM.REFERENCE) join S_ZUS STNP using (ZC.STNP,STNP.REFERENCE) '
         'where  OS_N.FIRMA=:_c and ZC_N.WYR=\'T\' and RH.DWY<=to_date(:_b) and to_date(:_a)<=RH.DWY '
         'order by 1, 5, 3',
         _start,_stop,_firma
      )).first()
   || {| _WYR |!
         _cmp:=obj_new(10);
         _cmp[7]:="_a[1]:=_b.ref(); _a[2]:=_b.OSOBA;
                   _a[3]:=_b.OD;  _a[4]:=_b.DO;
                   _a[5]:=_b.KSW; _a[6]:=_b.KW;
                   _a[8]:=_b.TTUB; _a[9]:=_b.PREM; _a[10]:=_b.STNP";
         _cmp[7](_cmp,_WYR);
         {! |? next
            |! {? _cmp[2]<>OSOBA |
                  _cmp[5]<>KSW |
                  _cmp[5]<>TTUB |
                  _cmp[5]<>PREM |
                  _cmp[5]<>STNP |
                  _cmp[4]+1<OD
                  || _cmp[7](_cmp,_WYR)
                  || {? _cmp[4]~2<>OD~2
                     || _cmp[7](_cmp,_WYR)
                     || _cmp[6]+=KW;
                        {? _cmp[4]<DO ||
                           _cmp[4]:=DO
                        ?};
                        del;
                        seek(_cmp[1]);
                        DO:=_cmp[4];
                        KW:=_cmp[6];
                        put
                     ?}
         ?}    !};
         first;
         {!
         |? {? (OD~1<>DO~1 | OD~2<>DO~2)
            || _cmp[1]:=ref;
               _cmp[4]:=date(OD~1,OD~2,0);
               _cmp[3]:=_cmp[4]+1;
               _cmp[6]:=(KW*((_cmp[4]-OD+1)/(DO-OD+1)))$2;
               DO:=_cmp[4];
               KW:=_cmp[6];
               {? add & seek(_cmp[1])
               || OD:=_cmp[3];
                  KW-=_cmp[6];
                  put
               || next
               ?}
            || next
            ?}
         !};
         obj_del(_cmp);
         &_cmp
      |};
:     twórz pozycje raportu
      {!
      |? {? OSOBA.seek(_WYR.OSOBA)
         || echo('Zleceniobiorca: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
            _RSA.blank();
            _RSA.OSOBA:=#OSOBA.ref();
            _RSA.TTUB:=_WYR.TTUB+_WYR.PREM+_WYR.STNP;
            {? exec('zn_ttub','pracownik',,_stop)
            || exec('ustaw_pi','rap_zus',_RSA,'TPID')
            || exec('info','rap_zus',1,'ZUS RSA')
            ?};
            _RSA.KDSW:=_WYR.KSW;
            _RSA.OD:=_WYR.OD;
            _RSA.DO:=_WYR.DO;
:           dla wyrównań świadczeń rehab. wykazujemy liczbę (zwykle 1)
            _RSA.LICZ:={? _RSA.KDSW<>'323' || _RSA.DO-_RSA.OD+1 || 1 ?};
            _RSA.KDCH:='';
            _RSA.KW:=_WYR.KW$2;
            _RSA.add()
         ?};
         _WYR.del()
      !};
      echo()
   ?};
   {? var_pres('_WYR')=type_of(SYSLOG) || obj_del(_WYR); &_WYR ?};
:  raporty o wypłaconych zasiłkach
   {? _ZAS.first()
   || RD.cntx_psh();
      RD.index('_RODZINA');
      {!
      |? {? OSOBA.seek(_ZAS.OS)
         || echo('Pracownik: '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
            _RSA.blank();
            _RSA.OSOBA:=#OSOBA.ref();
            {? exec('zn_ttub','pracownik',,_stop)
            || exec('ustaw_pi','rap_zus',_RSA,'TPID','TTUB');
               {? _spr_3000() || _RSA.TTUB:='3000'+(_RSA.TTUB+2) ?}
            || exec('info','rap_zus',1,'ZUS RSA')
            ?};
:           świadczenia rehabilitacyjne
            {? _ZAS.RN=531
            || _RSA.KDSW:='321';
               _RSA.LICZ:=1;
               _RSA.KW:=_ZAS.KW
:              zasiłek porodowy
            |? _ZAS.RN=541
            || _RSA.KDSW:='211';
               _RSA.OD:=_start;
               _RSA.LICZ:=1;
               _RSA.KW:=_ZAS.KW
:              zasiłek wyrównawczy
            |? _ZAS.RN=533
            || _RSA.KDSW:='212';
               _RSA.LICZ:=1;
               _RSA.KW:=_ZAS.KW
:              zasiłek pogrzebowy
            |? _ZAS.RN=534
            || _RSA.KDSW:='213';
               _RSA.LICZ:=1;
               _RSA.KW:=_ZAS.KW
            || _RSA.KW:=_ZAS.KW
            ?};
            _RSA.add()
         ?};
         _ZAS.next()
      !};
      RD.cntx_pop()
   ?};
   obj_del(_ZAS);
:  raporty o przerwach w opłacaniu składek
   echo('Okresy nieskładkowe...');
   {? (_NSKL:=sql(
         'select P.IP, :_a.OD, :_a.DO '
         'from   :_a, P '
         'where  :_a.OSOBA=P.OSOBA and P.F_ZATR=\':_c\' and P.FIRMA=:_d and (P.DZ is null or to_date(:_b)<=P.DZ)',
         sql(
            'select P_NSKL.OSOBA OSOBA, P_NSKL.OD, P_NSKL.DO from P_NSKL '
            'where P_NSKL.FIRMA=:_d and ((P_NSKL.OD<=to_date(:_c) and to_date(:_b)<=P_NSKL.DO) or P_NSKL.LS in (:_a))',
            _listy,_start,_stop,_firma
         ),_start,__F_ZATR.REF,_firma
      )).first()
   || {!
      |? {? P.find_key(_NSKL.IP)
         || echo('Ubezpieczony: '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
            {? ~_RSA.find_key(#OSOBA.ref(),'12')
            || _RSA.blank();
               _RSA.OSOBA:=#OSOBA.ref();
               {? exec('zn_ttub','pracownik',,_stop,'w')
               || exec('ustaw_pi','rap_zus',_RSA,'TPID','TTUB');
                  {? _spr_3000() || _RSA.TTUB:='3000'+(_RSA.TTUB+2) ?}
               || exec('info','rap_zus',1,'ZUS RSA')
               ?};
               _RSA.KDSW:='350';
               _RSA.OD:={? _NSKL.OD<_start || _start || _NSKL.OD ?};
               _RSA.DO:={? _stop<_NSKL.DO || _stop || _NSKL.DO ?};
               _RSA.LICZ:=_RSA.DO-_RSA.OD+1;
               {? _RSA.LICZ<0 | _RSA.LICZ>99
               || exec('info','rap_zus',4,'ZUS RSA');
                  _RSA.OD:=_RSA.DO:=date(0,0,0);
                  _RSA.LICZ:=0
               ?};
               _RSA.add()
            ?}
         ?};
         _NSKL.next()
      !}
   ?};
   echo();
   obj_del(_NSKL); &_NSKL;
:  informacje o przekroczeniu podstawy wymiaru składek
:  z dniem 2003.10.01 z listy zostaje wykreślony kod "140"
:  płatnik nie przekazuje raportu o zaprzestaniu naliczania
:  składek na fundusz emerytalny i rentowy
   echo('Blokada nalicznia składek...');

   {? _stop<=date(2003,9,0)
      &
      (_BLOK:=sql(
         'select IP from :_a, P '
         'where  :_a.OSOBA=P.OSOBA and P.FIRMA=:_c and (P.DZ is null or to_date(:_b)<=P.DZ)',
         sql(
            'select P_INFO.OSOBA OSOBA from P_INFO '
            'where  P_INFO.FIRMA=:_c and to_date(:_a)<=P_INFO.BLOKADA and P_INFO.BLOKADA<=to_date(:_b)',
            date(_start~1,1,1),_stop,_firma
         ),_start,_firma
      )).first()
   || _er:=_cw:=0;
      _RSA.cntx_psh();
      _RSA.index(_RSA.ndx_tmp('Świadczenie',0,'OSOBA',,0,'KDSW',,0));
      {!
      |? {? P.find_key(_BLOK.IP)
         || echo('Ubezpieczony: '+P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE);
            {? ~_RSA.find_key(#OSOBA.ref(),'140')
            || _RSA.blank();
               _RSA.OSOBA:=#OSOBA.ref;
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_RSA,'TPID','TTUB');
                  {? _spr_3000() || _RSA.TTUB:='3000'+(_RSA.TTUB+2) ?}
               || exec('info','rap_zus',1,'ZUS RSA')
               ?};
               _RSA.KDSW:='140';
               _RSA.OD:=_start;
               _RSA.DO:=_stop;
               {? (_er:=FUNKCJE.LU_SYS(56111)) & (_cw:=FUNKCJE.LU_SYS(5621))
               || _RSA.OD+=int((_stop-_start+1)*_er/_cw)
               ?};
               _RSA.add()
            ?}
         ?};
         _BLOK.next()
      !};
      &_er; &_cw;
      _RSA.cntx_pop()
   ?};
   echo();
   {? var_pres('_BLOK')=type_of(SYSLOG) || obj_del(_BLOK) ?};
   P.cntx_pop();

   {? _RSA.first()
   || {? _out:=exec('otworz','rap_zus','ZUS RSA')
      || exec('zus_rsa_zapisz','!ppl_zes_wzus',_RSA,_out);
         fclose(_out);
         {? _inTerm
         || _pth:=exec('nazwa_pliku','rap_zus');
            _name:=ZUS.PLIK+'.xml';
            dlg_save(_pth,0,_name)
         ?};
         exec('info','rap_zus',3,'ZUS RSA')
      ?}
   || exec('info','rap_zus',2,'ZUS RSA')
   ?};

   obj_del(_RSA)
?}


\zus_rsa_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Zapis kompletnego raportu RSA w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt pliku do zapisu
::
:: UWAGA! Funkcja nie weryfikuje poprawnosci argumentow jak i struktury bufora
::  OLD: \zapisz/rap_rsa.fml
::----------------------------------------------------------------------------------------------------------------------
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml(ZUS.DATA);

:: Zapis wiersza do pliku z konwersja kodowania
_to_file:=exec('to_file','rap_zus');
:: Konwersja znakow zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartosci liczbowych do wymaganego formatu XML
_rate:=exec('rate','rap_zus');

:: Naglowek dokumentu
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSRSA id_dokumentu="1">');

:: I. Dane organizacyjne
_to_file(_b,'<I>');
_to_file(_b,'   <p1>');
_to_file(_b,'      <p1>'+(2+ZUS.SYMBOL)+'</p1>');
_to_file(_b,'      <p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>');
_to_file(_b,'   </p1>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne platnika skladek
exec('xml_dane_platn','rap_zus',_b,'II');

:: III. Dane dotyczace osoby ubezpieczonej (blok moze sie powtarzac, blok zawiera podbloki)
_pozblok:=0;
{!
|? {? OSOBA.seek(_a.OSOBA,'osoba')
   || {? ZUS.GIODO='T'
      || exec('rap_zus','giodo',ZUS.DATA,'RSA')
      ?};
      _pozblok+=1;
      _to_file(_b,'<III id_bloku="'+$_pozblok+'">');
      _to_file(_b,'   <A>');
         exec('xml_2dane_ubezp','rap_zus',_a,_b,2);
      _to_file(_b,'   </A>');
      _to_file(_b,'   <B>');
::    Kod tytulu ubezpieczenia
      _to_file(_b,'      <p1>');
      exec('xml_KodTytUbezp','rap_zus',_a,_b,3);
      _to_file(_b,'      </p1>');
      _to_file(_b,'      <p2>'+(('000'+form(_a.KDSW))+3)+'</p2>');
      {? _a.OD~1>0 || _to_file(_b,'      <p3>'+_cdxml(_a.OD)+'</p3>') ?};
      {? _a.DO~1>0 || _to_file(_b,'      <p4>'+_cdxml(_a.DO)+'</p4>') ?};
      {? _a.LICZ>0 & _a.LICZ<999
      || {?  _a.KW
         || _to_file(_b,'      <p5>'+STR.gsub(form(_a.LICZ),'.','')+'</p5>');
            _to_file(_b,'      <p6>'+_rate(_a.KW$2)+'</p6>')
::         |? _a.KW=0 & (1+_a.KDSW)<>'1'
::         || _to_file(_b,'      <p5>'+STR.gsub(form(0),'.','')+'</p5>');
::            _to_file(_b,'      <p6>'+_rate(0)+'</p6>')
         ?}
      || _to_file(_b,'      <p5>'+STR.gsub(form(0),'.','')+'</p5>');
         _to_file(_b,'      <p6>'+_rate(0)+'</p6>')
      ?};
      _to_file(_b,'   </B>');
      _to_file(_b,'</III>')
   ?};
   _a.next
!};

:: XI. Oswiadczenie platnika skladek
_to_file(_b,'<XI>');
_to_file(_b,'   <p1>'+_dataxml+'</p1>');
_to_file(_b,'</XI>');
_to_file(_b,'</ZUSRSA>');
_to_file(_b,'</KEDU>');
1


\zus_rza_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS RZA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

exec('zus_rxa_dialog','!ppl_zes_wzus')


\zus_rza_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Tworzy deklarację ZUSRZA - raport imienny
::   WE: _a [_O] - wskazanie listy płac.
::       [_b] [STRING] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::   WY:
::  OLD: \generuj/rap_rza.fml
::----------------------------------------------------------------------------------------------------------------------
_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};
_czyRCA:=var_pres('_b')=type_of(0) & _b;
O.clear();
{? O.seek(_a)
|| OSOBA.cntx_psh();
   OSOBA.clear();

   ZC_INFO.index('ZLECDW');
:  parametry raportu
   _zdate:=date(0,0,0);
   _start:=date(O.RU,O.MU,1);
   _stop:=date(O.RU,O.MU,0);
:  wylicz składki finansowane przez budżet państwa
   exec('wyl_wych','rap_zus');
:  utwórz bufor raportu
   _RZA:=tab_tmp(2,
      'OSOBA','INTEGER','Dane osobowe',
      'TTUB','STRING[6]','Tytuł ubezpieczenia',
      'TPID','STRING[1]','Typ identyfikatora',
      'NRID','STRING[11]','Identyfikator',
      'POD_KC','REAL','Podstawa KC',
:: Skladki finansowane przez [P]racownika (ubezpieczonego)
      'KCP','REAL','P-Kasa chorych',
:: Skladki finansowane przez [B]udzet Panstwa
      'KCB','REAL','B-Kasa chorych'
   );
:  iteracja po wszystkich rachunkach wystawionych w miesiącu
:  ubezpieczeniowym. raport uwzględnia tylko te rachunki dla
:  umów, dla których odprowadzane są składki na ub.zdrowotne
   RH.index('RACHUNKC');
   _jest_rh:=
      "  RH.prefix(_a,_b,_c);
         _jest:=0;
         {? RH.first()
         || {!
            |? _jest+={? RH.DRA>=_d & RH.DRA<=_e || 1 || 0 ?};
               RH.next()
            !}
         ?};
         _jest
     ";
   _listy:=('l'+($O.RU+2)+('0'+$O.MU+2));
   __F_ZATR.mod('Z','O');
   _ZLE_POM:=sql_exec('!sql_rza_zle',O.RU,O.MU,_start,_stop,__F_ZATR.REF,_listy,exec('ref_firma','ustawienia'));
   __F_ZATR.mod('P','O');
   {? _ZLE_POM.first()
   || {!
      |?
         {? _ZLE_POM.ZCDW<_start
         || {? OSOBA.seek(BIT.sqlint(_ZLE_POM.OSOBA),OSOBA.name())
            || ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
:              nie ma juz nastepnej umowy
               {? ZC_INFO.last()
               || {? var_pres('_tab_inf')>100 || obj_del(_tab_inf) ?};
                  _t_size:=_ZLE_POM.RHDWY-_ZLE_POM.INFODW;
                  _tab_inf:=obj_new(_t_size);
                  {! _ind:=1.._t_size |! _tab_inf[_ind]:=0 !};
                  _info_od:=date(9999,1,1);
                  _info_do:=#0;
                  _ok:=0;
                  {!
                  |? {? (ZC_INFO.ZUS+ZC_INFO.FC+ZC_INFO.FW+ZC_INFO.FP+ZC_INFO.FG)*'T'
                     || {? (date(ZC_INFO.DU~1,ZC_INFO.DU~2,0)<=date(_ZLE_POM.ZCDW~1,_ZLE_POM.ZCDW~2,0) |
                           _jest_rh(ZC_INFO.ZC,_start~1,_start~2,ZC_INFO.DU,ZC_INFO.DW))
                        || _ok:=1;
                           {? ZC_INFO.DU<=_ZLE_POM.INFODW+1 || _info_od:=_ZLE_POM.INFODW+1
                           |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                           ?};
                           {? ZC_INFO.DW>=_ZLE_POM.RHDWY || _info_do:=_ZLE_POM.RHDWY
                           |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                           ?}
                        ?}
                     |? ZC_INFO.KC*'T'
                     || _ok:=1;
                        {? ZC_INFO.DU<=_ZLE_POM.INFODW+1 || _info_od:=_ZLE_POM.INFODW+1
                        |? ZC_INFO.DU<_info_od || _info_od:=ZC_INFO.DU
                        ?};
                        {? ZC_INFO.DW>=_ZLE_POM.RHDWY || _info_do:=_ZLE_POM.RHDWY
                        |? ZC_INFO.DW>_info_do || _info_do:=ZC_INFO.DW
                        ?}
                     ?};
                     ZC_INFO.prev() & ZC_INFO.DW>=_start
                  !};
                  {? _ok || {! _ind:=_info_od-_ZLE_POM.INFODW.._info_do-_ZLE_POM.INFODW |! _tab_inf[_ind]:=1 !} ?};
                  _zap_zlec:=1;
                  {! _ind:=1.._t_size |? _zap_zlec:=_tab_inf[_ind] !};
                  {? ~_zap_zlec || _ZLE_POM.TTUB:='3000'; _ZLE_POM.put() ?}
               ?}
            ?}
         ?};
         _ZLE_POM.next()
      !}
   ?};
   _RZZ:=sql_exec('!sql_rza_zles',_ZLE_POM);
   _RZZ.index(_RZZ.ndx_tmp('Ubezpieczony',0,'OSOBA',,0,'TTUB',,0));
   obj_del(_ZLE_POM);
   &_ZLE_POM;
   _listy:=('l'+($O.RU+2)+('0'+$O.MU+2));
   __F_ZATR.mod('Z','O');
   _ZLE_POM:=sql_exec('!sql_rca_zle',O.RU,O.MU,_start,_stop,__F_ZATR.REF,_listy,exec('ref_firma','ustawienia'));
   __F_ZATR.mod('P','O');
   {? _ZLE_POM.first()
   || {!
      |? {? _ZLE_POM.ZCDW<_start
         || {? OSOBA.seek(BIT.sqlint(_ZLE_POM.OSOBA),OSOBA.name())
            || _ttub:=exec('rhttub','lista_plac',OSOBA.ref(),_ZLE_POM.RHDWY,_ZLE_POM.TTUB,_ZLE_POM.INFODW);
               {? _ZLE_POM.TTUB<>_ttub
               || _ZLE_POM.TTUB:=_ttub;
                  _ZLE_POM.put()
               ?}
            ?}
         ?};
         _ZLE_POM.next()
      !}
   ?};
   _ZLE:=sql_exec('!sql_rca_zles',_ZLE_POM);

   {? _ZLE.first()
   || {!
      |? {? _RZZ.find_key(_ZLE.OSOBA,_ZLE.TTUB) || _RZZ.del() ?};
         _ZLE.next()
      !}
   ?};
   obj_del(_ZLE);
   &_ZLE; obj_del(_ZLE_POM);
   &_ZLE_POM;
   _licz:=
      "  _kw:=0;
         KOR_Z.prefix(KORN_Z.ref(),__RUB.ref(_a));
         {? KOR_Z.first() || _kw+=KOR_Z.KW ?};
         _kw
      ";
   KOR_Z.index('KORN_Z');
   {? _RZZ.first()
   || {!
      |? {? OSOBA.seek(_RZZ.OSOBA)
         ||
:              "grupuj" informacje według tytułu ubezpieczenia
            {? _RZA.find_key(#OSOBA.ref(),_RZZ.TTUB)
            || _do_add:=0
            || _RZA.blank();
               _RZA.OSOBA:=#OSOBA.ref();
               echo('Ubezpieczony: '+OSOBA.NAZWISKO);
               {? exec('zn_ttub','pracownik',,_stop)
               || exec('ustaw_pi','rap_zus',_RZA,'TPID');
                  _RZA.TTUB:=_RZZ.TTUB+_RZZ.PREM+_RZZ.STNP
               || exec('info','rap_zus',1,'ZUS RZA')
               ?};
               _do_add:=1
            ?};
::          Uwzglednienie korekt
            KORN_Z.cntx_psh();
            KORN_Z.clear();
            KORN_Z.f_set(
               'RU,MU,ZC(OSOBA)',
               'join ZC using (KORN_Z.ZC,ZC.REFERENCE) join P using (ZC.P,P.REFERENCE)',
               'P.FIRMA=:_a and KORN_Z.RU=:_b and KORN_Z.MU=:_c and ZC.OSOBA=:_d',
               exec('ref_firma','ustawienia'),O.RU,O.MU,OSOBA.ref()
               );
            {? KORN_Z.f_first()
            || {!
               |? {? KORN_Z.ZC_INFO().TTUB().KOD+ZC_INFO.PREM().KOD+ZC_INFO.STNP().KOD=_RZA.TTUB
                  || _RZA.POD_KC+=_licz(791);
                     _RZA.KCP+=_licz(792)
                  ?};
                  KORN_Z.f_next()
               !}
            ?};
            KORN_Z.f_clear();
            KORN_Z.cntx_pop();
            _RZA.POD_KC+=_RZZ.POD_KC;
            _RZA.KCP+=_RZZ.KC;
            {? _do_add
            || _RZA.add()
            || _RZA.put()
            ?}
         ?};
         _RZZ.next()
      !}
   ?};
   obj_del(_RZZ);
   &_RZZ;
   echo();

:  raport o składkach na ubezpieczenie zdrowotne od osób przebywających
:  na urlopie wychowawczym, dla których nie są opłacane składki na ubez-
:  pieczenia społeczne
   _NSKL:=sql(
      'select IP '
      'from   :_a, P '
      'where  :_a.OSOBA = P.OSOBA and P.F_ZATR=\':_c\' and P.FIRMA=:_d and (P.DZ is null or to_date(:_b)<=P.DZ)',
      sql(
         'select OSOBA from KU '
         'where  KU.FIRMA=:_a and KU.R=:_b and KU.M=:_c and KU.S21<>0 and KU.S25=0',
         exec('ref_firma','ustawienia'),O.RU,O.MU
      ),
      _stop,
      __F_ZATR.REF,
      exec('ref_firma','ustawienia')
   );
   {? _NSKL.first()
   || _ons:=obj_new(5);
      P.cntx_psh();
      P.index('PRACOIP');
      P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P);
      {!
      |? {? P.find_key(_NSKL.IP) ||
            {! _n:=1..obj_len(_ons) |! _ons[_n]:=0 !};
            exec('uzd_nskl_kartprac','pracownik','w',_ons);
            {? _ons[3]
            || _RZA.blank();
               _RZA.OSOBA:=#P.OSOBA;
               echo('Ubezpieczony: '+P.OSOBA().NAZWISKO);
               {? exec('zn_ttub','pracownik',,_stop,'w')
               || exec('ustaw_pi','rap_zus',_RZA,'TTUB','TPID')
               || exec('info','rap_zus',1,'ZUS RZA')
               ?};
               _RZA.POD_KC:=_ons[4];
               _RZA.KCB:=_ons[5];
               _RZA.add()
            ?}
         ?};
         _NSKL.next()
      !};
      echo();
      obj_del(_ons);
      P.cntx_pop()
   ?};
   obj_del(_NSKL);

   {? ~_czyRCA
   || {? _RZA.first()
      || {? _out:=exec('otworz','rap_zus','ZUS RZA')
         || exec('zus_rza_zapisz','!ppl_zes_wzus',_RZA,_out);
            fclose(_out);
            {? _inTerm
            || _pth:=exec('nazwa_pliku','rap_zus');
               _name:=ZUS.PLIK+'.xml';
               dlg_save(_pth,0,_name)
            ?};
            exec('info','rap_zus',3,'ZUS RZA')
         ?}
      || exec('info','rap_zus',2,'ZUS RZA')
      ?};
      obj_del(_RZA)
   ?};

   OSOBA.cntx_pop()
|| _czyRCA:=0
?};
{? _czyRCA & _RZA.first() || return(&_RZA) ?}


\zus_rza_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPA
:: OPIS: Zapis kompletnego raportu RZA w formacie XML
::   WE: _a - identyfikator bufora raportu
::       _b - uchwyt pliku do zapisu
::
:: UWAGA! Funkcja nie weryfikuje poprawnosci argumentow jak i struktury bufora
::  OLD: \zapisz/rap_rza.fml
::----------------------------------------------------------------------------------------------------------------------
_data:=ZUS.DATA;
_dataxml:=form(_data~1,-4,0,'9')+'-'+form(_data~2,-2)+'-'+form(_data~3,-2);

:: Zapis wiersza do pliku z konwersja kodowania
_to_file:=exec('to_file','rap_zus');
:: Konwersja znakow zastrzezonych w XML
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartosci liczbowych do wymaganego formatu XML
_rate:=exec('rate','rap_zus');

:: Tabelka do prezentacji pominietych z powodu przekroczenia dopuszczalnych wartosci
_outpass:=tab_tmp(3,'NAZ','STRING[30]','Nazwisko',
                    'IM','STRING[20]','Imię',
                    'IDENT','STRING[8]','Rodzaj ident.',
                    'PESEL','STRING[20]','PESEL/Paszport');
_wins:=_outpass.mk_sel('Lista pominiętych osób',,,'201206110636');
_outpass.win_sel(_wins);
_outpass.win_fld(_wins,,'NAZ');
_outpass.win_fld(_wins,,'IM');
_outpass.win_fld(_wins,,'IDENT');
_outpass.win_fld(_wins,,'PESEL');

:: Naglowek dokumentu
exec('xml_head_kedu53','rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSRZA id_dokumentu="1">');
_pozblok:=0;
:: I. Dane organizacyjne - identyfikator raportu - Elementy Identyfikatora NN MMRRRR
_to_file(_b,'<I>');
_to_file(_b,'   <p1>');
_to_file(_b,'      <p1>'+(2+ZUS.SYMBOL)+'</p1>');
_to_file(_b,'      <p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>');
_to_file(_b,'   </p1>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne platnika skladek
exec('xml_dane_platn','rap_zus',_b,'II');

:: III. Dane dotyczace osoby ubezpieczonej (blok moze sie powtarzac, blok zawiera podbloki)
{!
|?
   {? OSOBA.seek(_a.OSOBA,'osoba')
    & +OSOBA.NAZWISKO & +OSOBA.PIERWSZE & +_a.TPID & +_a.NRID
   || {? _a.POD_KC>999999.99 | _a.KCP>99999.99 | _a.KCB>99999.99
      || _outpass.NAZ:=OSOBA.NAZWISKO;
         _outpass.IM:=OSOBA.PIERWSZE;
         _outpass.PESEL:={? +(|OSOBA.PESEL)
                         || _outpass.IDENT:='PESEL';
                            OSOBA.PESEL
                         |? +(|OSOBA.PASZPORT)
                         || _outpass.IDENT:='Paszport';
                            OSOBA.PASZPORT
                         || _outpass.IDENT:='b/d'; ''
                         ?};
         _outpass.add(1)
      || {? ZUS.GIODO='T'
         || exec('rap_zus','giodo',ZUS.DATA,'RZA')
         ?};
         _pozblok+=1;
         _to_file(_b,'<III id_bloku="'+$_pozblok+'">');
::       III.A. Dane identyfikacyjne osoby ubezpieczonej
         _to_file(_b,'   <A>');
            exec('xml_2dane_ubezp','rap_zus',_a,_b,2);
         _to_file(_b,'   </A>');

::       III.B. Nalezna skladka na ubezpieczenie zdrowotne
         _to_file(_b,'   <B>');
::       Kod tytulu ubezpieczenia
         _to_file(_b,'      <p1>');
            exec('xml_KodTytUbezp','rap_zus',_a,_b,3);
         _to_file(_b,'      </p1>');
::       Podstawa wymiaru skladki
         _to_file(_b,'      <p2>'+_rate(_a.POD_KC)+'</p2>');
::       Kwota naleznej skladki finansowana przez platnika
         _to_file(_b,'      <p3>'+_rate(0)+'</p3>');
::       Kwota naleznej skladki finansowana z budzetu panstwa bezposrednio do ZUS
         _to_file(_b,'      <p4>'+_rate(_a.KCB)+'</p4>');
::       Kwota naleznej skladki finansowana przez ubezpieczonego
         _to_file(_b,'      <p5>'+_rate(_a.KCP)+'</p5>');
::       Kwota naleznej skladki finansowana przez Fundusz Koscielny
         _to_file(_b,'      <p6>'+_rate(0)+'</p6>');
         _to_file(_b,'   </B>');
         _to_file(_b,'</III>')
      ?}
   ?};
   _a.next
!};

:: Oswiadczenie platnika skladek (data wypelnienia)
_to_file(_b,'<VIII>');
_to_file(_b,'   <p1>'+_dataxml+'</p1>');
_to_file(_b,'</VIII>');

:: Stopka i zakonczenie dokumentu
_to_file(_b,'</ZUSRZA>');
_to_file(_b,'</KEDU>');

:: Lista osob pominietych z powodu przekroczenia maksymalnych wartosci mozliwych do zaimportowania w programie PLATNIK
{? _outpass.first
|| FUN.info('Znaleziono osoby, u których wartości podstaw wymiarów\n'+
            'przekraczają wartości akceptowalne przez Program Płatnika\n'+
            'przy imporcie z programu zewnętrznego.\n'+
            'Dla tych osób, raport RZA należy ręcznie wprowadzić\n'+
            'bezpośrednio w Programie Płatnika.\n\n'+
            'Listę zaleca się wydrukować wykorzystując mechanizm autoraportów.');
   {!
   |? _outpass.select;
      FUN.ask('Zaleca się wydrukowanie niniejszej listy.\n'+
              'Po zakończeniu działania funkcji lista zostanie porzucona.\n'+
              'Czy powrócić do listy?')
   !}
?};
1


\zus_rpa_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS RPA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

exec('zus_rxa_dialog','!ppl_zes_wzus')


\zus_rpa_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Deklaraca ZUS RPA - Imienny raport miesięczny o przychodach ubezpieczonego/okresach pracy nauczycielskiej.
::   WE: _a [_O] - wskazanie listy płac.
::       [_b] [STRING] - ścieżka do katalogu tymczasowego na serwerze (inTerm)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};
O.clear();
{? O.seek(_a)
|| _RPA:=exec('tabela_rpa','rap_zus');

   _od:=date(O.RU,O.MU,1);
   _do:=date(O.RU,O.MU,0);

:: Zebranie danych z list płac, w których data wypłaty jest przesunięta na kolejny miesiąc.
   exec('RPA_dane','rap_zus',_RPA,_od,_do);

   {? _RPA.first()
   || {? _out:=exec('otworz','rap_zus','ZUS RPA')
      || exec('zus_rpa_zapisz','!ppl_zes_wzus',_RPA,_out);
         fclose(_out);
         {? _inTerm
         || _pth:=exec('nazwa_pliku','rap_zus');
            _name:=ZUS.PLIK+'.xml';
            dlg_save(_pth,0,_name)
         ?};
         exec('info','rap_zus',3,'ZUS RPA')
      ?}
   || exec('info','rap_zus',2,'ZUS RPA')
   ?}
?};
~~


\zus_rpa_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Zapis kompletnego raportu RPA w formacie XML
::   WE: _a [TABLE] - Tabela z danymi do raportu ZUS RPA.
::       _b - Uchwyt pliku do zapisu.
::   WY:
:: UWAGA! Funkcja nie weryfikuje poprawności argumentów jak i struktury bufora.
::----------------------------------------------------------------------------------------------------------------------
_data:=ZUS.DATA;
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml(_data);

:: Tabela z informacją o pominiętych osobach
_OUT:=tab_tmp(3,
   'NAZWISKO','STRING[30]','Nazwisko',
   'PIERWSZE','STRING[20]','Imię',
   'ID','STRING[8]','Rodzaj identyfikatora',
   'PESEL','STRING[20]','PESEL/Paszport',
   'POWOD','SYS_MEMO','Powód'
);
_wer:=_OUT.mk_sel('Lista pominiętych osób'@,,,'rpalista2pomin',,,,,'U',,,,,'maximized');
_OUT.win_sel(_wer);
_OUT.win_fld(_wer,,'NAZWISKO');
_OUT.win_fld(_wer,,'PIERWSZE');
_OUT.win_fld(_wer,,'ID');
_OUT.win_fld(_wer,,'PESEL');
_OUT.win_fld(_wer,,'POWOD',,,60);
_red:=_OUT.mk_edit('Osoba pominięta'@,,'rpaosoba2pomin');
_OUT.win_edit(_red);
_OUT.win_efld(_red,,'NAZWISKO');
_OUT.win_efld(_red,,'PIERWSZE');
_OUT.win_efld(_red,,'ID');
_OUT.win_efld(_red,,'PESEL');
_OUT.win_efld(_red,,'POWOD',,,90,-4);

:: Zapis wiersza do pliku z konwersją kodowania
_to_file:=exec('to_file','rap_zus');
:: Konwersja znaków zastrzeżonych w XML
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartości liczbowych do wymaganego formatu XML
_rate:=exec('rate','rap_zus');

:: Nagłowek dokumentu
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSRPA id_dokumentu="1">');

:: I. Dane organizacyjne - identyfikator raportu - Elementy Identyfikatora NN MMRRRR
_to_file(_b,'<I>');
_to_file(_b,'  <p1>');
_to_file(_b,'     <p1>'+(2+ZUS.SYMBOL)+'</p1>');
_to_file(_b,'     <p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>');
_to_file(_b,'  </p1>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne płatnika składek
exec('xml_dane_platn','rap_zus',_b,'II');
_pozblok:=0;

:: III. Dane dotyczace osoby ubezpieczonej.
_OSOBA:=sql('select distinct :_a.OSOBA, :_a.TTUB, :_a.TPID, :_a.NRID from :_a',_a);

{? 2+ZUS.SYMBOL<>'01'
|| _tab_zero:=exec('ZUS_RAP_tab','rap_zus',_OSOBA,date(O.RU,O.MU,1))
?};

progress(,'Trwa przygotowanie raportu.'@,'ZUS RPA',1);
{? _OSOBA.first()
|| {!
   |? {? OSOBA.seek(_OSOBA.OSOBA,) & +OSOBA.NAZWISKO & +OSOBA.PIERWSZE
      || _OUT.blank();
         _OUT.NAZWISKO:=OSOBA.NAZWISKO;
         _OUT.PIERWSZE:=OSOBA.PIERWSZE;
         _OUT.PESEL:=
            {? +(|OSOBA.PESEL)
            || _OUT.ID:='PESEL';
               OSOBA.PESEL
            |? +(|OSOBA.PASZPORT)
            || _OUT.ID:='Paszport';
               OSOBA.PASZPORT
            || _OUT.ID:='b/d';
               ''
            ?};

         {? _OSOBA.TPID=''
         || _OUT.memo_set('Brak "Typu identyfikatora".\nPopraw dane i spróbuj ponownie.','POWOD');
            {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
         |? |_OSOBA.NRID=''
         || _OUT.memo_set('Brak "Identyfikatora" typu "'+_OSOBA.TPID+'".\nPopraw dane i spróbuj ponownie.','POWOD');
            {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
         |? |_OSOBA.TTUB=''
         || _OUT.memo_set('Brak "Tytułu ubezpieczenia".\nPopraw dane i spróbuj ponownie.','POWOD');
            {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
         || {? ZUS.GIODO='T'
            || exec('rap_zus','giodo',ZUS.DATA,'RPA')
            ?};

:: dodanie informacji o wykonanym raporcie dla ubezpieczonego o ile nie istnieje
            exec('ZUS_RAP_add','rap_zus', OSOBA.ref(),'RPA',date(O.RU,O.MU,1),_OSOBA.TTUB,_OSOBA.TPID,_OSOBA.NRID);

:: III.A. Dane identyfikacyjne osoby ubezpieczonej
            _pozblok:=exec('blokIIIA','rap_zus',_OSOBA,_b,_pozblok,_to_file);

:: III.B. Kwota przychodu wypłaconego w danym miesiącu, ale należnego za inny rok kalendarzowy, który stanowił podstawę
::          wymiaru składek na ubezpieczenia emerytalne i rentowe
            exec('pozycje2RPA','rap_zus',_a,_b,_OSOBA.OSOBA,_OSOBA.TTUB,'E','B',_to_file);

:: III.C. Kwota przychodu wypłaconego w danym miesiącu, ale należnego za inny rok kalendarzowy, który stanowił podstawę
::          wymiaru składek na ubezpieczenia wypadkowe
            exec('pozycje2RPA','rap_zus',_a,_b,_OSOBA.OSOBA,_OSOBA.TTUB,'W','C',_to_file);

:: III.D. Kwota przychodu wypłaconego w danym miesiącu, obok wynagrodzenia za czas niezdolności do pracy, zasiłku
::          chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, który w okresie pobierania tego
::          wynagrodzenia lub zasiłku nie stanowił podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe.
            _a.prefix(_OSOBA.OSOBA,_OSOBA.TTUB,'I');
            _kw:=0;
            {? _a.first()
            || {!
               |? {? _a.RNAL=_a.RWYP
                  || _kw+=_a.KW
                  ?};
                  _a.next()
               !}
            ?};
            {? _kw
            || _to_file(_b,'   <D>');
               _to_file(_b,'      <p1>'+form(_kw,,2,'9.')+'</p1>');
               _to_file(_b,'   </D>')
            ?};

:: III.E. Kwota przychodu wypłaconego w danym miesiącu, obok wynagrodzenia za czas niezdolności do pracy, zasiłku
::          chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, który w okresie pobierania tego
::          wynagrodzenia lub zasiłku nie stanowił podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe
::          i który jest należny za inny rok kalendarzowy
            exec('pozycje2RPA','rap_zus',_a,_b,_OSOBA.OSOBA,_OSOBA.TTUB,'I','E',_to_file);
:: III.F. Okresy wykonywania pracy nauczycielskiej
            exec('pozycje2RPA','rap_zus',_a,_b,_OSOBA.OSOBA,_OSOBA.TTUB,'N','F',_to_file,_cdxml,_pozblok);
            _to_file(_b,'</III>')
         ?}
      ?};
      _OSOBA.next()
   !}
?};

:: Uzupełnienie raportu o ubezpieczonych z korektami zerowymi.
{? 2+ZUS.SYMBOL<>'01' & _tab_zero.first()
|| _tab:='   ';
   {!
   |? {?  OSOBA.seek(_tab_zero.OSOBA,)
      ||
:: III.A. Dane identyfikacyjne osoby ubezpieczonej
         _pozblok:=exec('blokIIIA','rap_zus',_tab_zero,_b,_pozblok,_to_file);

:: III.B. Kwota przychodu wypłaconego w danym miesiącu, ale należnego za inny rok kalendarzowy, który stanowił podstawę
::          wymiaru składek na ubezpieczenia emerytalne i rentowe.

         _to_file(_b,_tab+'<B>');
         _to_file(_b,2*_tab+'<p2>0.00</p2>');
         _to_file(_b,_tab+'</B>');


:: III.C. Kwota przychodu wypłaconego w danym miesiącu, ale należnego za inny rok kalendarzowy, który stanowił podstawę
::          wymiaru składek na ubezpieczenia wypadkowe.
         _to_file(_b,_tab+'<C>');
         _to_file(_b,2*_tab+'<p2>0.00</p2>');
         _to_file(_b,_tab+'</C>');

:: III.D. Kwota przychodu wypłaconego w danym miesiącu, obok wynagrodzenia za czas niezdolności do pracy, zasiłku
::          chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, który w okresie pobierania tego
::          wynagrodzenia lub zasiłku nie stanowił podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe
         _to_file(_b,_tab+'<D>');
         _to_file(_b,2*_tab+'<p1>0.00</p1>');
         _to_file(_b,_tab+'</D>');

:: III.E. Kwota przychodu wypłaconego w danym miesiącu, obok wynagrodzenia za czas niezdolności do pracy, zasiłku
::          chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, który w okresie pobierania tego
::          wynagrodzenia lub zasiłku nie stanowił podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe
::          i który jest należny za inny rok kalendarzowy
         _to_file(_b,_tab+'<E>');
         _to_file(_b,2*_tab+'<p2>0.00</p2>');
         _to_file(_b,_tab+'</E>');

:: III.F. Okresy wykonywania pracy nauczycielskiej

         _to_file(_b,'</III>')
      ?};
      _tab_zero.next()
   !}
?};

:: IV. Oświadczenie płatnika składek
_to_file(_b,'<IV>');
_to_file(_b,'<p1>'+_dataxml+'</p1>');
_to_file(_b,'</IV>');

:: Stopka i zakończenie dokumentu
_to_file(_b,'</ZUSRPA>');
_to_file(_b,'</KEDU>');

prgs_clr();

:: Lista osób pominiętych z powodu błędów w danych
{? _OUT.first()
|| FUN.info('%1\n%2'
      [  'Znaleziono osoby, dla których przygotowanie ZUS RPA nie było możliwe.'@,
         'Listę zaleca się wydrukować wykorzystując mechanizm autoraportów.'@
      ]
   );
   {!
   |? _OUT.select();
      FUN.ask('%1\n%2\n%3'
         [  'Zaleca się wydrukowanie niniejszej listy.'@,
            'Po zakończeniu działania funkcji lista zostanie porzucona.'@,
            'Czy powrócić do listy?'@
         ]
      )
   !}
?};
~~


\zus_ria_dialog
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Wyświetla dialog z parametrami raportu ZUS RIA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);

exec('zus_rxa_dialog','!ppl_zes_wzus')


\zus_ria_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Deklaraca ZUS RIA - raport informacyjny.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_od:=date(1999,1,1);
_do:=date(2018,12,0);
_inTerm:={? var_press('_b')=type_of('') & _b<>'' || ZUS.FOLDER:=_b; 1 || 0 ?};

:: Tabela tymczasowa do zapisania pozycji raportu ZUS RIA.
_RIA:=tab_tmp(5,
   'OSOBA','STRING[16]','Dane osobowe',
   'RODZ','STRING[1]','Rodzaj kwoty do wykazania',
   'RWYP','INTEGER','Rok zdarzenia',
   'RNAL','INTEGER','Rok należny',
   'OD','DATE','Data początkowa okresu',
   'ZGL','STRING[1]','Zgłoszenie/korekta',
   'TPID','STRING[1]','Typ identyfikatora',
   'NRID','STRING[20]','Identyfikator',
   'DO','DATE','Data końcowa okresu',
   'USPKOD','STRING[8]','Kod wygaśnięcia lub rozwiązania współpracy',
   'USPPPRAK','STRING[8]','Kod podstawy prawnej',
   'USPPPRAT','STRING[72]','Podstawa prawna',
   'USPSTR','STRING[1]','Strona inicjująca',
   'KW','REAL','Kwota',
   'RWYL','INTEGER','Wymiar licznik',
   'RWYM','INTEGER','Wymiar mianownik',
   'SZSPEC','STRING[1]','Praca w szkolnictwie specjalnym',
   'STATPP','STRING[1]','Status podmiotu prywatnego',
   'STALA','STRING[1]','Praca wykonywana stale i w pełnym wymiarze',
   'PWSZCZ','STRING[9]','Praca w warunkach szczególnych',
   'PCSZCZ','STRING[9]','Praca w szczególnym charakterze',
   'DEPUTAT','STRING[1]','Podczas pracy na kolei przysługiwał deputat',
   'KOLEJ','STRING[1]','Praca na kolei na stanowiskach nie obiętych wykazami',
   'TTUB','STRING[6]','Tytuł ubezpieczenia'
);

:: Lista osób zakwalifikowanych do raportu.
_OSOBA:=exec('RIA_lista_osob','rap_zus',_od,_do);

:: Wyświetlenie osób zakwalifikowanych do raportu i przygotowanie danych.
{? _OSOBA.first() & exec('RIA_select','rap_zus',_OSOBA,_RIA,_od,_do)
|| {? _out:=exec('otworz','rap_zus','ZUS RIA')
   || exec('zus_ria_zapisz','!ppl_zes_wzus',_OSOBA,_RIA,_out);
      fclose(_out);
      {? _inTerm
      || _pth:=exec('nazwa_pliku','rap_zus');
         _name:=ZUS.PLIK+'.xml';
         dlg_save(_pth,0,_name)
      ?};
      exec('info','rap_zus',3,'ZUS RIA')
   ?}
|| exec('info','rap_zus',2,'ZUS RIA')
?};
~~


\zus_ria_zapisz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.02]
:: OPIS: Zapis kompletnego raportu RIA w formacie XML
::   WE: _a [TABLE] - Tabela z osobami, dla których należy wykonać raport ZUS RIA.
::       _b [TABLE] - Tabela z danymi do raportu ZUS RIA.
::       _c - Uchwyt pliku do zapisu.
::   WY:
:: UWAGA! Funkcja nie weryfikuje poprawności argumentów jak i struktury bufora.
::----------------------------------------------------------------------------------------------------------------------
_data:=ZUS.DATA;
_cdxml:="form(_a~1,-4,0,'9')+'-'+form(_a~2,-2)+'-'+form(_a~3,-2)";
_dataxml:=_cdxml(_data);

return();
:: Tabela z informacją o pominiętych osobach.
_OUT:=tab_tmp(3,
   'NAZWISKO','STRING[30]','Nazwisko',
   'PIERWSZE','STRING[20]','Imię',
   'ID','STRING[8]','Rodzaj identyfikatora',
   'PESEL','STRING[20]','PESEL/Paszport',
   'POWOD','SYS_MEMO','Powód'
);
_wer:=_OUT.mk_sel('Lista pominiętych osób'@,,,'rialista2pomin',,,,,'U',,,,,'maximized');
_OUT.win_sel(_wer);
_OUT.win_fld(_wer,,'NAZWISKO');
_OUT.win_fld(_wer,,'PIERWSZE');
_OUT.win_fld(_wer,,'ID');
_OUT.win_fld(_wer,,'PESEL');
_OUT.win_fld(_wer,,'POWOD',,,60);
_red:=_OUT.mk_edit('Osoba pominięta'@,,'riaosoba2pomin');
_OUT.win_edit(_red);
_OUT.win_efld(_red,,'NAZWISKO');
_OUT.win_efld(_red,,'PIERWSZE');
_OUT.win_efld(_red,,'ID');
_OUT.win_efld(_red,,'PESEL');
_OUT.win_efld(_red,,'POWOD',,,90,-4);

:: Zapis wiersza do pliku z konwersją kodowania.
_to_file:=exec('to_file','rap_zus');
:: Konwersja znaków zastrzeżonych w XML.
_cxml:=exec('cxml','rap_zus');
:: Dostosowanie wartości liczbowych do wymaganego formatu XML.
_rate:=exec('rate','rap_zus');

:: Nagłowek dokumentu.
exec(exec('xml_head_kedu_a','rap_zus'),'rap_zus',_b,_dataxml);
_to_file(_b,'<ZUSRIA id_dokumentu="1">');

:: I. Dane organizacyjne
_to_file(_b,'<I>');
_to_file(_b,'  <p1>');
_to_file(_b,'     <p1>'+(2+ZUS.SYMBOL)+'</p1>');
_to_file(_b,'     <p2>'+(ZUS.SYMBOL+4+'-'+(2+(2-ZUS.SYMBOL)))+'</p2>');
_to_file(_b,'  </p1>');
_to_file(_b,'</I>');

:: II. Dane identyfikacyjne płatnika składek
exec('xml_dane_platn','rap_zus',_b,'II');
_pozblok:=0;

_OSOBA:=sql('select distinct :_a.OSOBA, :_a.TPID, :_a.NRID, :_a.TTUB from :_a',_a);
_OSOBA.first();
{!
|? {? OSOBA.seek(_OSOBA.OSOBA,) & +OSOBA.NAZWISKO & +OSOBA.PIERWSZE
   || _OUT.blank();
      _OUT.NAZWISKO:=OSOBA.NAZWISKO;
      _OUT.PIERWSZE:=OSOBA.PIERWSZE;
      _OUT.PESEL:=
         {? +(|OSOBA.PESEL)
         || _OUT.ID:='PESEL';
            OSOBA.PESEL
         |? +(|OSOBA.PASZPORT)
         || _OUT.ID:='Paszport';
            OSOBA.PASZPORT
         || _OUT.ID:='b/d';
            ''
         ?};

      {? _OSOBA.TPID=''
      || _OUT.memo_set('Brak "Typu identyfikatora".\nPopraw dane i spróbuj ponownie.','POWOD');
         {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
      |? |_OSOBA.NRID=''
      || _OUT.memo_set('Brak "Identyfikatora" typu "'+_OSOBA.TPID+'".\nPopraw dane i spróbuj ponownie.','POWOD');
         {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
      |? |_OSOBA.TTUB=''
      || _OUT.memo_set('Brak "Tytułu ubezpieczenia".\nPopraw dane i spróbuj ponownie.','POWOD');
         {? _OUT.add(1) || _OUT.memo_put(,'POWOD') ?}
      || {? ZUS.GIODO='T'
         || exec('rap_zus','giodo',ZUS.DATA,'RIA')
         ?};
::         _pozblok+=1;
::         _to_file(_b,'<III id_bloku="'+$_pozblok+'">');

:: III. Dane identyfikacyjne osoby ubezpieczonej
         _to_file(_b,'  <III>');
         exec('xml_2dane_ubezp','rap_zus',_a,_b,2);
         _to_file(_b,'      <p5>');
         exec('xml_KodTytUbezp','rap_zus',_OSOBA.TTUB,_b,3);
         _to_file(_b,'      </p5>');
         _to_file(_b,'  </III>');

:: IV. Rozwiązanie/wygaśnięcie ostatniego stosunku pracy/stosunku służbowego.

:: V. Kwota przychodu należniego za inny rok kalendarzowy niż rok, w którym został wypłacony, a stanowił podstawę
::    składek na ubezpieczenie emertytalne i rentowe.
         _to_file(_b,'   <V>');
         exec('RIA_pozycje','rap_zus',_a,_b,_OSOBA.OSOBA,'E');
         _to_file(_b,'   </V>');

:: VI. Kwota przychodu należniego za inny rok kalendarzowy niż rok, w którym został wypłacony, a stanowił podstawę
::    składek na ubezpieczenie wypadkowe
         _to_file(_b,'   <VI>');
         exec('RIA_pozycje','rap_zus',_a,_b,_OSOBA.OSOBA,'W');
         _to_file(_b,'   </VI>');

:: VII. Kwota przychodu za lata kalendarzowe, wypłąconego obok wynagrodzenia za czas niezdolności do pracy, zasiłku
::    chorobowego, macierzyńskiego, opiekuńczego, świadczenia rehabilitacyjnego, który w okresie pobierania tego
::    wynagrodzenia lub zasiłku nie stanowił podstawy wymiaru składek na ubezpieczenia emerytalne i rentowe.
         _to_file(_b,'   <VII>');
         _a.prefix(_OSOBA.OSOBA,'I');
         _kw:=0;
         {? _a.first()
         || {!
            |? _kw+=_a.KW;
               _a.next()
            !}
         ?};
         _to_file(_b,'      <p1>%1</p1>'[form(_kw,,2,'9.')]);
         _to_file(_b,'   </VII>')

:: VIII. Okresy wykonywania pracy nauczycielskiej w placówkach, o których mowa w art.2 pkt 1 ustawy z dnia 22 maja 2009r
::    o nauczycielskich świadczeniach kompensacyjnych (Dz.U. z 2018r. poz. 128).

:: IX. Okresy wykonywania pracy nauczycielskiej w placówkach, o których mowa w art. 1 ustawy z dnia 26 stycznia 1982r.
::    Karta nauczyciela (Dz.U. z2018r. poz. 968 z późn.zm.)

:: X. Okresy wykonywania pracy w szczególnych warunkach lub wszczególnym charakterze, o której mowa w art.32 ustawy
::    z dnia 17 grudnia 1998r.o emeryturach i rentach z funduszu ubezpieczeń społecznych (Dz.U. z 2018r. poz.1270)

:: XI. Okresy wykonywania pracy w szczególnych warunkach lub wszczególnym charakterze, o której mowa w art.3 ust. 1 i 3
::    ustawy z dnia 19 grudnia 2008r. o emeryturach pomostowych (Dz.U. z 2017r. poz 664 z późn.zm.)



::         _to_file(_b,'</III>')
      ?}
   ?};
   _OSOBA.next()
!};

:: XII. Oświadczenie płatnika składek
_to_file(_b,'<XII>');
_to_file(_b,'<p1>'+_dataxml+'</p1>');
_to_file(_b,'</XII>');

:: Stopka i zakończenie dokumentu
_to_file(_b,'</ZUSRIA>');
_to_file(_b,'</KEDU>');

:: Lista osób pominiętych z powodu błędów w danych
{? _OUT.first()
|| FUN.info('%1\n%2'
      [  'Znaleziono osoby, dla których przygotowanie ZUS RIA nie było możliwe.'@,
         'Listę zaleca się wydrukować wykorzystując mechanizm autoraportów.'@
      ]
   );
   {!
   |? _OUT.select();
      FUN.ask('%1\n%2\n%3'
         [  'Zaleca się wydrukowanie niniejszej listy.'@,
            'Po zakończeniu działania funkcji lista zostanie porzucona.'@,
            'Czy powrócić do listy?'@
         ]
      )
   !}
?};
~~

:Sign Version 2.0 jowisz:1045 2023/09/06 12:16:04 1c1aaa42201216d3d74275c87b382218442dbda54c18b0b70302a2aa83ffa32f71be475e66c63845e434562ba3d209bf105302af17bcab03fd6cac1a6c398b83bd02872e1228db611a03ac065680ae537a5de1bf8306d97b3609b2b77379d80fb8e8eb8e1c580a0c0b26f1f5281625209fd66f1895ef5a55bd2244acd539745a
