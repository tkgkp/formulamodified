:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_zlc_rnie.fml
:: Utworzony: 22.04.2016
:: Autor: DAROKR
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_ZLC_RNIE - Rejestracja nieobecności.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Rejestracja nieobecności zleceniobiorcy - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# kind=WE,   symbol=OSOBA,     type=_OSOBA,   name=Wskazanie osoby,   required=T, keyref=T

_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_akcja:=_mp.akcja();

_result:='';

_uidref:=exec('ref2uid','#table',_in.OSOBA);
{? _uidref=''
|| _result:=exec('error','!ppl_zlc_rnie')

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   || _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select','!ppl_zlc_rnie',_in.OSOBA);
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};

:{? _akcja<>'START'
:|| exec('os_adres_cfg','osoba','BLANK')
:?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Rejestracja nieobecności zleceniobiorcy - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','osoba',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj nieobecność zleceniobiorcy: %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Zarejestruj nieobecność zleceniobiorcy: %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Zarejestruj nieobecność zleceniobiorcy: %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Zarejestruj nieobecność zleceniobiorcy'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie nieobecności zleceniobiorcy niemożliwe.\nNie znaleziono osoby.'


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań
::   WE: _a - Wskazanie osoby.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
OSOBA.cntx_psh();
OSOBA.prefix();
{? type_of(_a)=type_of(null()) & _a<>null() & OSOBA.seek(_a)
|| __F_ZATR.push();
   __F_ZATR.mod('Z');
   OS_N.cntx_psh();
   OS_N.index('OND');
   OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
   OS_N.win_sel('WERZ');
   OS_N.win_edit('RED');
   _fld:=exec('n_params','nieobecnosc');
   params_set('fld',_fld);
   _ret:=OS_N.select();
   OS_N.cntx_pop();
   __F_ZATR.pop()
|| _ret:=exec('error','!ppl_zlc_rnie')
?};
OSOBA.cntx_pop();
_ret


\os_n_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli OS_N z doklejonym oknem redagowania tabeli OSOBA);
::          - w ramach obszaru roboczego (okno wertowania tabeli OS_N jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=OS_N
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\pr_red_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Po redagowaniu pola N.NB.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? var_pres('_par')>100 & var_pres('fld',_par) & var_pres('NB',_par.fld)=type_of(null)
|| _par.fld.NB:=OS_N.R
?};
1


\po_red_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Po redakcji pola R tabeli OS_N
::  OLD: \po_red_r/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? OS_N.R
|| _rub:=OS_N.R().RN;
   OS_N.KDSW:=exec('kod_swd','nieobecnosc',_rub);
   OS_N.PROC:=exec('procent','nieobecnosc',_rub,OS_N);
   _wal:=
      "  {? OS_N.WAL='T'
         || OS_N.WAL:='N'; OS_N.WSP:=100; exec('akt_npod','!ppl_zlc_rnie')
         ?}
      ";
   {? ~exec('czy_zasilek','os_nieob',OS_N.R().RN,OS_N.OD)
   || OS_N.ROZ:='N';
      _wal()
   |? ~__RUB.sys_attr(R.RN,1222,OS_N.OD)
   || _wal()
   || OS_N.WAL:='T'
   ?};
   {? __RUB.sys_attr(_rub,19001,OS_N.OD)
   || _par:=params_get();
      {? var_pres('_par')>100 & var_pres('fld',_par) & var_pres('NB',_par.fld)=type_of(null)
      || {? _par.fld.NB=null & OS_N.R<>null
         || OS_N.UW:='T'
         ?}
      ?}
   ?};
   1
|| __CHK.err_empty('Składnik'@);

   0

?}


\akt_npod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
::       RWR [12.30]
:: OPIS: Aktualizacja wartosci rozliczenia nieobecnosci podstawy, stawki dziennej oraz wybranych pol informacyjnych
::       tabeli TZ_EDIT
::   WE: _a - aktualizacja BEZ zapisu buforow na dysk
::          0 - zapisy są wykonywane [domyslnie]
:           1 - zapisy NIE sa wykonywane
::       _b - aktualizacja odpowiednich pol zmiennej TZ_EDIT?
::          0 - wartosci pol NIE sa zmienianie [domyslnie]
::          1 - wartosci pol sa zmienianie (nie jest zapamietywany i odtwarzany kontekst)
::   WY: ~~
::  OLD: \akt_npod/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_put:=~{? var_pres('_a')=type_of(0) || _a=1 || 0 ?};
_cntx:={? var_pres('_b')=type_of(0) || _b=1 || 0 ?};
:
OS_N.POD:=OS_N.STD:=0;
{? ~_cntx || TZ_EDIT.cntx_psh() ?};
TZ_EDIT.SET:=TZ_EDIT.LMCE:=TZ_EDIT.PMWE:=TZ_EDIT.WALKW:=TZ_EDIT.PROC:=TZ_EDIT.WART:=0;
TZ.cntx_psh();
TZ.use('tabz'+form(OS_N.OD~1,-4,0,'9.'));
TZ.index('ZASTAO');
TZ.prefix('O',OS_N.ref());
_dn:=TZ.first();
{!
|? _dn
|! {? TZ.W<>'N'
   || TZ_EDIT.SET+=TZ.KW;
      TZ_EDIT.LMCE+=1
   ?};
   _dn:=TZ.next()
!};
&_dn;
TZ.cntx_pop();
:
{? TZ_EDIT.LMCE>0
|| TZ_EDIT.PMWE:=TZ_EDIT.SET/TZ_EDIT.LMCE$2;
   TZ_EDIT.WALKW:={? TZ_EDIT.WAL='T' || TZ_EDIT.PMWE*TZ_EDIT.WSP/100$2 || TZ_EDIT.PMWE ?};
   OS_N.POD:=TZ_EDIT.WALKW;
   TZ_EDIT.PROC:=OS_N.PROC;
   OS_N.STD:=OS_N.POD*TZ_EDIT.PROC/100/30$2;
   TZ_EDIT.WART:=OS_N.STD*OS_N.NK$2
?};
{? ~_cntx || TZ_EDIT.cntx_pop() ?};
{? _put
|| OS_N.put();
   exec('wyl_zas','!ppl_zlc_rnie')
?};
~~


\OS_N_19
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Funkcja sprawdza czy dana nieobecmość jest wypłacanym zasiłkiem
::  OLD: \OS_N_19/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czy_zasilek','os_nieob',OS_N.R().RN,OS_N.OD)


\spr_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie wprowadzonego wskaźnika waloryzacji
::  OLD: \spr_wal/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? type_of(fld)=1 & OS_N.WAL<>'T'
|| return(0)
|? type_of(fld)=2 & (OS_N.WAL<>'T' | OS_N.ROZ='N')
|| OS_N.WAL:='N';
   OS_N.WSP:=100;
   {?  1+menu_txt='P' || exec('akt_npod','!ppl_zlc_rnie') ?};
   return(1)
?};
_wsp:=OS_N.WSP;
{? type_of(fld)=1
|| _mc:=OS_N.OD~2;
   _rok:=OS_N.OD~1;
   {? _mc<=3
   || _kwartal:=1
   |? _mc>3 & _mc<=6
   || _kwartal:=2
   |? _mc>6 & _mc<=9
   || _kwartal:=3
   || _kwartal:=4
   ?};
   WSP_WAL.index('WSP_WAL');
   WSP_WAL.prefix;
   {? WSP_WAL.find_key(_rok,_kwartal)
   || _wsp:=WSP_WAL.WSP$2
   || FUN.emsg(
         'Brak współczynnika waloryzacji świadczenia rehabilitacyjnego\n w roku: %1 kwartał: %2.\n'
         'Uzupełnij odpowiednie informacje.'@[$_rok,$_kwartal]
      )
   ?}
?};
OS_N.WSP:={? _wsp<100 || 100 || _wsp ?};
1


\chk_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie prawidłowego wypełnienia pól OD, DO oraz przeliczenie dni kalendarzowych dla pola DK.
::       Formuła wykorzystywana na rzecz tabel: OS_N i ZC_N.
::  OLD: \chk_do/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(1,1);

__KAL.set_cal('standard');
{? _TAB.OD<>date(0,0,0) & _TAB.DO<>date(0,0,0)
|| _fld:=params_get().fld;
   {? _TAB.OD<>_fld.OD | _TAB.DO<>_fld.DO
   || {? _TAB.DO>=_TAB.OD
      || _TAB.NK:=_TAB.DO-_TAB.OD+1;
         _TAB.NR:=__KAL.w_days(_TAB.OD,_TAB.DO);
         _TAB.NG:=__KAL.w_hours(_TAB.OD,_TAB.DO);
         1
      || exec('alert','overlap')
      ?}
   ?}
|| 1
?};
1


\spr_chor_wyl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie czy kod swiadczenia jest zwiazany z wyplata zasilku z funduszu
::       wypadkowego i czy jest wyliczona podstawa
::   WY:
::  OLD: \spr_chor_wyl/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? 1+(-menu_txt)='p' & exec('czy_wypadkowe','!ppl_zlc_rnie')
|| TZ.use('tabz'+$(OS_N.OD~1));
   TZ.index('ZASTAO');
   TZ.prefix('O',OS_N.ref);
   _wyn:=TZ.first
?};
{? _wyn
|| FUN.emsg(
      'Nie można zmienić kodu świadczenia wypłacanego z Funduszu Wypadkowego,\n'
      'gdyż istnieje wyliczona podstawa.\nW celu dokonania poprawy kodu świadczenia\n'
      'należy wyzerować wyliczenia podstaw.'@
   )
?};
~_wyn


\czy_wypadkowe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie czy kod swiadczenia jest zwiazany z wyplata zasilku z funduszu
::       wypadkowego
::   WY: 0 - nie jest, >0 jest
::  OLD: \czy_wypadkowe/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
',214,216,314,318,322,324,'*(','+OS_N.KDSW().KOD+',')


\przed_red_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Przed redakcja pola WAL tabeli OS_N
::  OLD: \przed_red_wal/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
OS_N.ROZ='T' & __RUB.sys_attr(OS_N.R().RN,1222,OS_N.OD)


\_OS_N_28
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: przed wyswietlenie pola WSP tabeli OS_N
::  OLD: \_OS_N_28/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
OS_N.WAL='T'


\waloryzuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Przeliczenie waloryzowanej podstawy
::  OLD: \waloryzuj/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? OS_N.WAL='T'
|| {? fld()<100
   || fld(100); FUN.emsg('Wprowadzona wartość waloryzacji nie może być mniejsza od 100.'@);
      0
   || {? OS_N.POD || exec('akt_npod','!ppl_zlc_rnie') ?};
      1
   ?}
?}


\ustaw_grant
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie uprawnien do zleceniobiorcy
::       (wymagane sa uprawnienia do wszystkich wystapien osoby w kartotece zleceniobiorcow)
::       funkcja wolana miedzy innymi w definicji jako OS_N_02 + sprawdzenie blokady
::   WY: 1 - sa uprawnienia; 0 brak uprawnien
::  OLD: \ustaw_grant/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
exec('grant','os_nieob') &
{? 1+menu_txt='P' | 1+menu_txt='U' | 6+-menu_txt='wylicz'
|| ~exec('blokada','zlec_rh')
|| 1
?}


\ustaw_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Aktualizacja tabeli realizacji nieobecnosci ZC_N wzgledem istniejacych zlecen
::       funkcja wolana z OS_N_04
::  OLD: \ustaw_zc/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
::exec('ndos_prz','projekty');
{? OS_N.ROZ='N'
|| exec('usun_zc_n','os_nieob');
   return()
?};
{? ~exec('grant','os_nieob') | exec('blokada','zlec_rh') || return() ?};
{? var_pres('_tab_zn')>100 || obj_del(_tab_zn) ?};
: sql znajduje zlecenia w czasie trwania ktorych wystepuje biezaca nieobecnosc
_sql:=
   'select ZC.NU, ZC_INFO.DU, ZC_INFO.DW, \'N\' OK, ZC.REFERENCE REF, ZC_INFO.FC, S_ZUS.KOD '
   'from ZC join ZC_INFO join S_ZUS using (ZC_INFO.TTUB, S_ZUS.REFERENCE) '
   'where ZC_INFO.DU<=to_date(:_b) and ZC_INFO.DW >=to_date(:_a) and ZC.OSOBA=:_c and '
   'S_ZUS.KOD not like \'01%\' ';
_sql+={? __RUB.sys_attr(OS_N.R,12232,OS_N.OD) & (OS_N.KDSW().KOD='322' | OS_N.KDSW().KOD='314')
      || ''
      || 'and ZC_INFO.FC=\'T\' '
      ?};
_sql+='and ZC_INFO.FIRMA=:_d ';
_sql+='order by 2';
_tab_zn:=sql(_sql,OS_N.OD,OS_N.DO,OSOBA.ref,exec('ref_firma','ustawienia'));
{? _tab_zn.first
|| ZC_N.cntx_psh();
   ZC_INFO.cntx_psh();
   ZC_INFO.clear();
   _win:=_tab_zn.mk_sel('Wybór umów rozliczających nieobecność'@,,,'wyb_u_n');
   _tab_zn.win_sel(_win);
   _tab_zn.win_fld(_win,,'NU',,,,,0,'Numer umowy-zlecenia'@);
   _tab_zn.win_fld(_win,,'DU',,,,,0,'Data rozpoczęcia'@);
   _tab_zn.win_fld(_win,,'DW',,,,,0,'Data zakończenia'@);
   _tab_zn.win_fld(_win,,'KOD',,,,,0,'Kod ZUS'@);
   _tab_zn.win_fld(_win,,'FC',,,-10,,0,'Fundusz Chorobowy'@);
   _tab_zn.win_fld(_win,,'OK',,,,,0,'Wybór'@);
   _tab_zn.win_act(_win,0,'Formuła','Zmiana wyboru'@@,,,,
      "_tab_zn:=cur_tab(1,1);{? _tab_zn.OK='N' || _tab_zn.OK:='T' || _tab_zn.OK:='N' ?}; _tab_zn.put",1);
   _tab_zn.win_act(_win,0,'Rekord',,,,"cur_tab(1,1).OK='T'",,1);
   _tab_zn.select;
:     dla wybranych rekordow nastepuje zapis do tabeli realizacji ZC_N
   exec('usun_zc_n','os_nieob');
   exec('wpis_zc','!ppl_zlc_rnie',_tab_zn);
   {? OS_N.OP>0 || exec('potr_25','os_nieob') ?};
:     jesli wolamy dla OS_N to pojawi sie realizacja
   {? cur_tab(1,1).name<>'zlec_n' || exec('realizacja','!ppl_zlc_rnie',1) ?};
   ZC_N.cntx_pop();
   ZC_INFO.cntx_pop()
|| FUN.emsg('Brak umów, które mogą zrealizować rozliczenie nieobecności.'@)
?};
~~


\wpis_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Funkcja dokonuje zapisu rozliczenia dla nieobecnosci,
::       funkcja wolana podczas atualizacji rozliczenia lub podczas dodawania nowej nieobecnosci.
::  OLD: \wpis_zc/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a.first
|| _od:=_odp:=OS_N.OD;
   _do:=_dop:=OS_N.DO;
   _end:=1;
   {!
   |? {? _a.OK='T' & ZC.seek(_a.REF)
      ||
:        dla wybranych rekordow nalezy zapisac rozliczenie ale tylko taka czesc, ktora moze byc rozliczona
:        na danym zleceniu
         {? _od>=_a.DU & _od<=_a.DW
         || {? _a.DW<_do || _dop:=_a.DW; _od:=_dop+1 || _dop:=_do; _end:=0 ?};
            _ok:=1
         |? _do>=_a.DU & _od<=_a.DW
         || {? _do>_a.DW || _dop:=_a.DW; _odp:=_od:=_a.DU || _odp:=_od:=_a.DU; _dop:=_do; _end:=0 ?};
            _ok:=1
         || _ok:=0
         ?};
         {? _ok
         || exec('zapis_zc','os_nieob',_odp,_dop);
            _odp:=_od
         ?}
      ?};
      _a.next & _end
   !}
?}


\realizacja
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Realizacja nieobecnosci dla zleceniobiorcy, praca z tabela ZC_N
::       funkcja wolana miedzy innymi w menu.fml
::   WE: _a jesli integer - wolane z funkcji \ustaw_zc
::  OLD: \realizacja/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? OS_N.ROZ='N'
|| FUN.emsg('Akcja niedostępna.'@);
   return()
?};
_a:=var_pres('_a')=type_of(0);
ZC_N.win_sel('WER');
ZC_N.index('ZC_D');
ZC_N.prefix(OS_N.ref);
ZC_N.first();
{? _a
|| ZC_N.select(,,,'AL:A')
|| ZC_N.select()
?}


\usun_os_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Usuwanie rekordu tabeli os_n (po pytaniu usuniecie wszystkiego co do tabeli przypisano)
::  OLD: \usun_os_n/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć bieżący zapis wraz z informacjami powiązanymi?'@)
||
:: !!! exec('ndos_prz','projekty');
   _nwu:=exec('polacz','wnioski_urlopowe',null,OS_N.ref);
   _NieoKod:=OS_N.R; _NieoRok:=OS_N.OD~1;
   {? ~OS_N.del(,1)
   ||  NWU.prefix;
       {? NWU.seek(_nwu) || exec('polacz','wnioski_urlopowe',OS_N.ref) ?}
   ?};
   {? KST_PAR.URLOP & (_NieoKod=KST_PAR.URLOP | _NieoKod=KST_PAR.URL_CHOR)
   || exec('akt_dane_kurl','!ppl_zlc_rnie',_NieoRok,1);
      exec('akt_dane_kurl','!ppl_zlc_rnie',_NieoRok+1,1)
   ?}
?}


\akt_dane_kurl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Funkcja aktualizuje karte urlopowa w przypadku wprowwadzania nieobecnosci urlopwej.
::       Wywolywana w przypadku dodawania/usuwania takiej niebocnosci w tabeli OS_N przy zapisach w tabeli N
::   WE:  _a  [NUMBER] - Rok nieobecnosci do aktualizacji karty urlopowej
::       [_b] [NUMBER] - Tryb wsadowy (brak komunikatów)):
::                      0 - Nie [domyślnie].
::                      1 - Tak.
::  OLD: \akt_dane_kurl/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>1
|| FUN.emsg('Nieprawidłowy argument wywołania!\nFunkcja: %1'@ ['akt_dane_kurl']);
   0
|| _batch:=var_pres('_b')=type_of(0) & _b;
   KART_URL.cntx_psh();
   KART_URL.index('PRAC_ROK');
   KART_URL.prefix(P.ref);
   {? exec('kart_url_dostepna','kart_url',_a,_batch)
   || {? {? KART_URL.find_key(_a)
         || 1
         |? KART_URL.find_ge(_a)
         || _a:=KART_URL.ROK
         ?}
      || exec('oblicz_karturl','!ppl_zlc_rnie',_a);
         KART_URL.put
      ?}
   ?};
   KART_URL.cntx_pop()
?}


\oblicz_karturl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Funkcja zlicza wykorzystanie urlopu wypoczynkowego i na zadanie w podanym roku na podstawie tabeli N
::       oraz ustawia wartosc pol Wykorzystanie w dniach i godzinach karty urlopwej.
::       Funkcja zaklada odpowiednie ustawienie bufora tabeli KART_URL.
::   WE: _a - Rok nieobecnosci do wyliczen
::  OLD: \oblicz_karturl/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_lim_wyk:=obj_new(2);
_lim_wyk[1]:=_lim_wyk[2]:=0;
{? var_pres('_a')=type_of(1) & _a
|| exec('sumuj_wykorzurl','!ppl_zlc_rnie',_lim_wyk,_a)
?};
KART_URL.URL_WYK:=_lim_wyk[1]$2;
KART_URL.URL_WYKG:=_lim_wyk[2];
exec('kart_url_aktualizuj','kart_url');
1


\sumuj_wykorzurl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Funkcja zlicza wykorzystanie urlopu wypoczynkowego i na zadanie w podanym roku na podstawie tabeli N
::   WE: _a - tablica 2 elementowa: 1-element to wykorzystane dni, 2-element to wykorzystane godziny
::       _b - Rok nieobecnosci do wyliczen
::   WY: tablica 2 elementowa z wyliczonymi pozycjami
::  OLD: \sumuj_wykorzurl/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<100 || return(0) ?};
_lim_wyk:=_a;
_rok:=_b;

_norma:=exec('norma','godziny',_b);
_fnorma:=
   {? P.KAL
   || {? P.KAL().CZESC='T'
      || "exec('norma','godziny',_a)"
      || {? KAL_NAZW.NORMA
         || $form(KAL_NAZW.NORMA,,,'0.')
         || "8"
         ?}
      ?}
   || "exec('norma','godziny',_a)"
   ?};
N.cntx_psh;
N.index('NIPRACNB');
: urlop wypoczynkowy
N.prefix('N',P.ref,KST_PAR.URLOP().RN);
{? N.find_ge(date(_rok,1,1))
|| {!
   |? {? N.OD~1<=_rok
      || _lim_wyk[1]+=N.NG/_fnorma(N.OD);
         _lim_wyk[2]+=N.NG
      ?};
      N.next & N.OD~1<=_rok
   !}
?};
: urlop na zadanie
N.prefix('N',P.ref,KST_PAR.URL_CHOR().RN);
{? N.find_ge(date(_rok,1,1))
|| {!
   |? {? N.OD~1<=_rok
      || _lim_wyk[1]+=N.NG/_fnorma(N.OD);
         _lim_wyk[2]+=N.NG
      ?};
      N.next & N.OD~1<=_rok
   !}
?};
N.cntx_pop;
_lim_wyk


\wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Formuly wyliczajace podstawe zasilku chorobowego
::  OLD: \wynchor/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? OS_N.ROZ='N'
|| FUN.emsg('Akcja niedostępna.\nNie zaznaczono opcji "Czy rozliczać?".'@);
   return()
?};
__KAL.set_cal('standard');
:ustawienie tabeli rozliczenia nieobecnosci i sprawdzenie czy istnieja zapisy
_ustaw_tz:="TZ.use('tabz'+$(OS_N.OD~1)); TZ.index('ZASTAO'); TZ.prefix('O',OS_N.ref);
   {? TZ.first
   || {? FUN.ask(
            'Istnieją wprowadzone wartości w tabeli rozliczenia nieobecności.\n'
            'Czy nadpisywać wartości danymi wyliczonymi automatycznie?'@
         )
      || 1
      || exec('rozliczenie','!ppl_zlc_rnie'); 0
      ?}
   || 1
   ?}";

{? cur_tab(1,1).name='zlec_n'
||
:  wyliczenie dokonywane z poziomu realizacji nieobecnosci
   OS_N.cntx_psh;
   OS_N.index('OND');
   OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);
   ZC_N.OS_N();
   {? ~exec('czy_zasilek','os_nieob',OS_N.R,OS_N.OD) & _ustaw_tz()
   || OS_N.cntx_pop();
      return()
   ?};
   ZC_N.cntx_psh();  RH.cntx_psh(); ZC_INFO.cntx_psh(); LS.cntx_psh()
|| {? ~exec('czy_zasilek','os_nieob',OS_N.R,OS_N.OD)
   || FUN.emsg('Akcja niedostępna.\nNieobecność nie jest zasiłkiem.'@);
      return()
   ?};
   {? ~_ustaw_tz() || return() ?}
?};

_data_zas:=OS_N.OD;
_podstawa:=0;

: ustawienie i usuniecie istniejacych zapisow, tabeli rozliczen
_usun_tz:="TZ.use('tabz'+$(OS_N.OD~1));
   TZ.index('ZASTAO');
   TZ.prefix('O',OS_N.ref);
   {? TZ.first || {! |? TZ.del !} ?}";

: znalezienie nieobecnosci poprzedzajacej, w okresie krotszym od 3 miesiecy
_wypadkowe:=exec('czy_wypadkowe','!ppl_zlc_rnie');
OS_N.cntx_psh();
OS_N.index('OND');
OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);
_Nref:=OS_N.ref();
{? OS_N.prev()
|| {!
   |? _ret:=
         {? exec('czy_zasilek','os_nieob',OS_N.R,OS_N.OD)
            & {? _wypadkowe || exec('czy_wypadkowe','!ppl_zlc_rnie') || 1 ?}
            & {? exec('sprawdz_2022','os_nieob',_Nref)
              || ((_data_zas~1)*12+(_data_zas~2))-((OS_N.DO~1)*12+(OS_N.DO~2)+1)<3
              || ((_data_zas~1)*12+(_data_zas~2))-((OS_N.DO~1)*12+(OS_N.DO~2)+1)<1
              ?}
         || _podstawa:=OS_N.POD;
            _ref_kopia:=OS_N.ref();
            _rok_kopia:=OS_N.OD~1;
            0
         || OS_N.prev()
         ?};
      _ret
   !}
?};
OS_N.cntx_pop();

: jesli jest podstawa to nastapi przepisanie rozliczen
: w przeciwnym razie nalezy rozliczenia wyliczyc
{? _podstawa
   || _usun_tz();
      exec('kopia_tz','!ppl_zlc_rnie',_ref_kopia,OS_N.ref,_rok_kopia,OS_N.OD~1)
   |? _wypadkowe
:     jesli z fund wypadkowego i nie ma przepisania - nie wyliczaj
   || FUN.emsg(
         'System nie wylicza automatycznie podstaw dla zasiłku\nwypłacanego z Funduszu Wypadkowego.\n'
         'Proszę wprowadzić wartości ręcznie.'@
      )
:     powolanie 2 wymiarowej tablicy do zapisania danych o rozliczeniu
   || _usun_tz();
      _tz:=obj_new(6); {! _ind:=1..6 |! _tz[_ind]:=obj_new(12) !};
     {! _ind:=1..12 |! _tz[6][_ind]:=0 !};
:     tablica dwuargumentowa [i][j] opis:
:     [i]:  1 - data miesiaca od
:           2 - data miesiaca do
:           3 - ilość dni kalendarzowych w miesiącu
:           4 - ilość dni chorobowych (roboczych)
:           5 - kwalifikacja T/N
:           6 - sprawdzenie przerwania petli
:     [j]:  - liczba miesiecy wstecz
:     ustawienie daty poczatkowej(ciaglosc nieobecnosci)
      _data_pocz:=exec('spr_ciag','!ppl_zlc_rnie');
      _data_p12:=date(_data_pocz~1,_data_pocz~2-12,1);
      _data_k12:=date(_data_pocz~1,_data_pocz~2-1,0);
:     petla glowna po rozliczonych zleceniach
:     miesiąc podstawy chorobowej wyznaczany wg daty okreslonej parametrem 243
      _rd_const:="";
      _get_val:="0";
      _f_init:="0";
      _mod:=PAR_SKID.get(243);
      {? _mod='' | _mod='W'
      || _rd_const:="exec('czytaj','#stalesys',RH.DWY,KST,'PRFE','PRFC','PRFRP','WSODBR')";
         _get_val:="FUNKCJE.Z_SYS(_a)";
         _f_init:="
            RH.prefix();
            RH.f_set(
               'DWY',
               'join ZC using(RH.ZLE,ZC.REFERENCE)',
               'RH.FIRMA=:_a and ZC.OSOBA=:_b and RH.R=:_c and RH.M=:_d',
               exec('ref_firma','ustawienia'),OSOBA.ref(),_a~1,_a~2
            );
            RH.f_first()
         "
      || _rd_const:="exec('czytaj','#stalesys',RH.DRA,KST,'PRFE','PRFC','PRFRP','WSODBR')";
         _get_val:="
            _sys:=__RUB.sys_sql(_a);
            {? _sys='' | RH.O=null
            || return(0)
            ?};
            LS.use(-RH.O().LT);
            LS.index('ZLEC');
            _val:=0;
            _arr:=spli_str(_sys,',');
            _len:=obj_len(_arr);
            {! _ii:=1.._len
            |! LS.prefix(RH.ref(),#_arr[_ii]);
               _loop:=LS.first();
               {!
               |? _loop
               |! _val+=LS.KW$2;
                  _loop:=LS.next()
               !}
            !};
            _val
         ";
         _f_init:="
            RH.prefix();
            RH.f_set(
               'DRA',
               'join ZC using(RH.ZLE,ZC.REFERENCE)',
               'RH.FIRMA=:_a and ZC.OSOBA=:_b and to_date(:_c)<=RH.DRA and RH.DRA<=to_date(:_d)',
               exec('ref_firma','ustawienia'),OSOBA.ref(),_a,_b
            );
            RH.f_first()
         "
      ?};
      ZC_INFO.index('ZLECDAT');
      LS.cntx_psh();
      O.cntx_psh();
      _pobrany:=1;
      _mc_pocz:=0;
::    ustalenie daty początku ubezpieczenia chorobowego
      _ub_pocz:=date(0,0,0);
      ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
      {? ZC_INFO.first()
      || {!
         |? {? _ub_pocz=date(0,0,0) & ZC_INFO.DU<=_data_k12 & ZC_INFO.DW>=_data_p12 &
               2+ZC_INFO.TTUB().KOD<>'01' & ZC_INFO.FC='T'
            || _ub_pocz:=date(ZC_INFO.DU~1,ZC_INFO.DU~2,1)
            ?};
            ZC_INFO.next() & _ub_pocz=date(0,0,0)
         !}
      ?};
      {! _ind:=1..12 |?
         _od:=date(_data_pocz~1,_data_pocz~2-_ind,1);
         _do:=date(_data_pocz~1,_data_pocz~2-_ind,0);
         _tz[1][_ind]:=_do; _tz[2][_ind]:=0; _tz[3][_ind]:=0; _tz[4][_ind]:=0; _tz[5][_ind]:='N';

:        sprawdzenie czy istnieje zlecenie zawierajace sie w czasie badanego miesiaca
         ZC_INFO.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);
         _tz[6][_ind]:=0;
         _t_pom:=obj_new(_do-_od+1);  {! _pom:=1..(_do-_od+1) |! _t_pom[_pom]:=0 !};
::       ustalenie m-ca początku ubezpieczenia chorobowego
         _mc_pocz:=0;
         {? _ub_pocz<>date(0,0,0) & _ub_pocz=_od || _mc_pocz:=1 ?};
         {? ZC_INFO.first
         || {!
            |? {? ZC_INFO.DU<=_do & ZC_INFO.DW>=_od & 2+ZC_INFO.TTUB().KOD<>'01' & ZC_INFO.FC='T'
               || _tz[6][_ind]:=1;
                  {! _pom:={? ZC_INFO.DU<=_od || _od || ZC_INFO.DU ?}~3..{? ZC_INFO.DW>=_do || _do || ZC_INFO.DW ?}~3
                  |! {? ~_mc_pocz
                     || {? __KAL.w_days(date(_od~1,_od~2,_pom),date(_od~1,_od~2,_pom)) || _t_pom[_pom]:=1 ?}
                     || _t_pom[_pom]:=1
                     ?}
                  !}
               ?};
               ZC_INFO.next
            !};
::          weryfikacja trwania umowy przez caly miesiac roboczy
            {? _tz[6][_ind]
            || {! _pom:=1..(_do-_od+1) |! _tz[3][_ind]+=_t_pom[_pom] !};
               {? ~_mc_pocz
               || {? _tz[3][_ind]<__KAL.w_days(_od,_do)
                  || {? _data_k12=_do
                     ||
::                      dla miesiaca poprzedniego niepelnego pobieramy ale wychodzimy z obliczen
                        _pobrany:=0
                     || _tz[6][_ind]:=0
                     ?}
                  ?}
               || {? _tz[3][_ind]<_do-_od+1
                  || _tz[6][_ind]:=0
::                   dla pierwszego miesiąca przy braku ubezpieczenia przez cały miesiąc kalendarzowy
::                   taki miesiąc nie jest pobierany do podstawy
                  ?}
               ?};
::             jezeli przepracowal caly miesiac roboczy to go pobieramy
::             dla miesiaca poprzedniego niepelnego pobieramy lub dla pierwszego m-ca cały m-c kalendarzowy
               {? _tz[6][_ind]
               ||
::                sprawdzenie ilosci dni nieobecnosci
                  _tab:=sql('
                     select
                        CASE WHEN OS_N.OD<to_date(:_b) THEN to_date(:_b) ELSE OS_N.OD END OD,
                        CASE WHEN OS_N.DO>to_date(:_c) THEN to_date(:_c) ELSE OS_N.DO END DO
                     from OS_N
                     where OS_N.FIRMA=:_d and OS_N.OSOBA=:_a and OS_N.OD<=to_date(:_c) and OS_N.DO>=to_date(:_b)',
                     OSOBA.ref(),_od,_do,exec('ref_firma','ustawienia'));
                  _d_rob:=0;
                  {? _tab.first
                  || {!
                     |? _d_rob+=__KAL.w_days(_tab.OD,_tab.DO); _tab.next
                     !}
                  ?};
                  _tz[4][_ind]:=_d_rob; obj_del(_tab);
                  {? _tz[3][_ind]/2>=_tz[4][_ind] || _tz[5][_ind]:='T' ?};
                  1
               ?}
            ?}
         ?};
         obj_del(_t_pom);
:        wyliczenie wartosci z rachunkow
         {? _tz[6][_ind]
         || _loop:=_f_init(_od,_do);
            _Kwota:=0;
            {!
            |? _loop
            |!
:              sprawdzenie czy zlecenie zawiera sie w czasie 12 miesiecy obejmujacy okres naliczenia
               {? RH.ZC_INFO().DU<=_data_k12 & ZC_INFO.DW>=_data_p12 & 2+ZC_INFO.TTUB().KOD<>'01' & ZC_INFO.FC='T'
               ||
                  _Kwota:=_get_val(563);
                  _kw_emer:=_get_val(5611);

:                 odbruttowienie
                  _rd_const();
                  {? _kw_emer$2>=_Kwota$2
                  || _Kwota:=(_Kwota-(_Kwota*KST.WSODBR/100))$2
                  || _sr_proc:={? _Kwota$2
                               || ((KST.PRFE/2+KST.PRFRP)*(_kw_emer$2)/(_Kwota$2))$2
                               ?}+KST.PRFC;
                     _Kwota:=(_Kwota-(_Kwota*_sr_proc*0.01))$2
                  ?};
                  _tz[2][_ind]+=_Kwota
               ?};
               _loop:=RH.f_next()
            !}
         ?};
         _tz[6][_ind] & _pobrany
      !};
      RH.f_clear();
      LS.cntx_pop();
      O.cntx_pop();
:     sprawdzenie czy jest choc jeden miesiac zakwalifikowany
      _ok:=0; {! _ind:=1..12 |? _tz[6][_ind] |! {? _tz[5][_ind]='T' || _ok:=1 ?} !};
      {! _ind:=1..12 |? _tz[6][_ind] |!
:        jesli zaden miesiac nie jest zakwalifikowany z powodu nieobecnosci
:        wszystkie beda pobrane
         {? _ok & _tz[5][_ind]='N' || _tz[2][_ind]:=0 ?};
:        zapis do TZ
         exec('zapisz_tz','!ppl_zlc_rnie',_tz[1][_ind],_tz[2][_ind],_tz[3][_ind],
            _tz[3][_ind]-_tz[4][_ind],_tz[5][_ind])
      !};
      obj_del(_tz)
?};
: wyswietlenie okienka edycji TZ w celu weryfikacji oraz ewentualnej recznej korekty
exec('rozliczenie','!ppl_zlc_rnie',0); exec('stalesys','#stalesys');
{? cur_tab(1,1).name='zlec_n' || ZC_N.cntx_pop; OS_N.cntx_pop; RH.cntx_pop; ZC_INFO.cntx_pop; LS.cntx_pop ?}


\rozliczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
::       RWR [12.30]
:: OPIS: Wyswietlenie rozliczenia dla nieobecnosci, funkcja wolana z menu.fml.
::   WE: _a - czy aktualizowac dane dotyczace nieobecnosci (podstawa, stawka dzienna, realizacja, ...) przed
::            wyswietleniem okna BEZ zapisu?
::            1 - zapis NIE jest wykonywany
::            0 - zapis jest wykonywany [domyslnie]
::   WY: ~~
::  OLD: \rozliczenie/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_bezput:={? var_pres('_a')=type_of(0) || _a ?};

{? OS_N.ROZ='N' || FUN.emsg('Akcja niedostępna.'@); return() ?};
{? ~exec('grant','os_nieob') || return() ?};
{? exec('czy_zasilek','os_nieob',OS_N.R().RN,OS_N.OD)
|| EDIT_VAR.RODZ_TZ:='O';
   TZ_EDIT.blank();
:  Zmienne uzywane w okienku wertowania WERCO tabeli TZ.
   TZ_EDIT.OS_N:=OS_N.ref();
   TZ_EDIT.R:=OS_N.R;
   TZ_EDIT.WAL:=OS_N.WAL;
   TZ_EDIT.WSP:=OS_N.WSP;
   exec('akt_npod','!ppl_zlc_rnie',_bezput,1);

   TZ.cntx_psh();
   TZ.use('tabz'+form(OS_N.OD~1,-4,0,'9.'));
   TZ.index('ZASTAO');
   TZ.prefix('O',OS_N.ref());
   TZ.win_sel('WERCO');
   TZ.win_edit('REDZ');
   _ha:={? exec('blokada','zlec_rh',1) || 'dup:d' || '' ?};
   TZ.select(,,,_ha);
   TZ.cntx_pop()
?};
~~


\kopia_tz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Przeniesienie zapisu rozliczenia nieobecnosci miedzy dwoma nieobecnosciami
::   WE: _a - ref tabeli OS_N kopiowanej
::       _b - ref tabeli OS_N wypelnianej
::       _c - rok OS_N.OD~1 kopiowanej
::       _d - rok OS_N.OD~1 wypelnianej
::  OLD: \kopia_tz/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) || return() ?};
{? var_pres('_b')<>type_of(null) || return() ?};
{? var_pres('_c')<>type_of(0) || return() ?};
{? var_pres('_d')<>type_of(0) || return() ?};
TZ.use('tabz'+$(_d));
TZ.index('ZASTAO');
{? _c<>_d
|| TZ.use('tabz'+$(_c));
   TZ.index('ZASTAO')
?};
TZ.prefix('O',_a);
{? TZ.first
|| {!
   |? {? _c<>_d
      || TZ.use('tabz'+$(_d));
         TZ.OS_N:=_b;
         TZ.add;
         TZ.use('tabz'+$(_c))
      || _ref:=TZ.ref;
         TZ.prefix();
         TZ.OS_N:=_b;
         TZ.add;
         TZ.prefix('O',_a);
         TZ.seek(_ref)
      ?};
      TZ.next
   !}
?}


\spr_ciag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Sprawdzenie ciaglosci dla nieobecnosci
::  OLD: \spr_ciag/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
OS_N.cntx_psh();
OS_N.index('OND');
OS_N.prefix(exec('ref_firma','ustawienia'),OSOBA.ref);
_n_od:=OS_N.OD;
_Nref:=OS_N.ref();
{!
|? {? OS_N.prev()
   || {? exec('czy_zasilek','os_nieob',OS_N.R,OS_N.OD)
         & {? exec('sprawdz_2022','os_nieob',_Nref)
           || ((_n_od~1)*12+(_n_od~2))-((OS_N.DO~1)*12+(OS_N.DO~2)+1)<3
           || ((_n_od~1)*12+(_n_od~2))-((OS_N.DO~1)*12+(OS_N.DO~2)+1)<1
           ?}
      || _n_od:=OS_N.OD; 1
      ?}
   ?}
!};
OS_N.cntx_pop();
_n_od


\zapisz_tz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
::       RWR [12.30]
:: OPIS: Zapisanie miesiecznych podstaw do tabeli TZ. Wymagane jest ustawienie odpowiedniego bufora dla OS_N.
::   WE: _a - data miesiaca
::       _b - kwota
::       _c - norma
::       _d - przepracowal
::       _e - kwalifikacja T/N
::   WY: 1 - rekord zostal dolaczony
::       0 - rekord nie zostal dolaczony
::  OLD: \zapisz_tz/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date()) || return() ?};
{? var_pres('_b')<>type_of(0) || return() ?};
{? var_pres('_c')<>type_of(0) || return() ?};
{? var_pres('_d')<>type_of(0) || return() ?};
{? var_pres('_e')<>type_of('') || return() ?};
TZ.blank(1);
TZ.R:='O';
TZ.N:=null();
TZ.M:=_a;
TZ.OS_N:=OS_N.ref();
TZ.KW:=_b;
TZ.NO:=_c;
TZ.PR:=_d;
TZ.W:=_e;
TZ.STATUS:='A';
TZ.add(1)


\wyl_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Wyliczenie wartosci zasilkow na podstawie stawki dziennej
::  OLD: \wyl_zas/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
ZC_N.index('ZC_D');
ZC_N.prefix(OS_N.ref);
{? ZC_N.first()
|| {!
   |? {? ZC_N.WYR<>'T' & ~ZC_N.RH
      || ZC_N.KW:=OS_N.STD*(ZC_N.NK-ZC_N.OP*0.25)$2;
         ZC_N.put()
      ?};
      ZC_N.next()
   !}
?}


\po_red_nieob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Funkcja wykorzystywana do zweryfikowania poprawnosci danych redagowanych w
::       tabeli nieobecności zleceniobiorcow. Wykorzystywana przez funkcje odpowiedzialne za
::       dolaczanie i poprawianie nieobecności.
::   WY: 1 gdy dane są poprawne lub akronim pola zawierającego nieprawidlowe dane.
::  OLD: \po_red_nieob/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(OS_N,,'R','OD','DO');
{? _wyn='' & exec('czy_zasilek','os_nieob',OS_N.R().RN,OS_N.OD)
|| _wyn:=__CHK.record(OS_N,,'PROC')
?};

{? _wyn=''
|| {? OS_N.R().RN=4 & OS_N.OD~1=2022
   || _txt:='Nieobecność "%1" nie powinna być użyta po %2 roku\n'
         'jeśli nie jest to kontynuacja okresu zasiłkowego z 2021 roku.\n'
         'Możesz zmienić na nieobecność o kodzie %3 "%4".'@[R.RT,date(2022,1,1)$6,'30',__RUB.RT[30]];
      {? FUN.choice(_txt,,'Zmień kod',,,,'Bez zmian')
      || OS_N.R:=__RUB.ref(30);
         OS_N.PROC:=exec('procent','nieobecnosc',30,OS_N);
         win_disp();
         _wyn:='R'
      ?}
   |? OS_N.R().RN=4 & OS_N.OD~1>2022
   || _txt:='Nieobecność "%1" nie może być użyta po %2 roku.\n'
         'Wybierz nieobecność o kodzie %3 "%4".'@[R.RT,date(2022,1,1)$6,'30',__RUB.RT[30]];
      FUN.emsg(_txt);
      OS_N.R:=__RUB.ref(30);
      OS_N.PROC:=exec('procent','nieobecnosc',30,OS_N);
      win_disp();
      _wyn:='R'
   ?}
?};

:: 23.25_ZUS01 - rezygnacja z podpowiedzi dla atrybutu 14319 (komunikat o niewypełnieniu pola)
{? _wyn='' & __RUB.sys_attr(OS_N.R,12274) & ~OS_N.KDSW
|| {? ~FUN.ask('Nie wypełniono kodu świadczenia. Czy kontynuować?')
   || _wyn:='KDSW'
   ?}
?};

{? _wyn=''
|| {? OS_N.OD>OS_N.DO
   || exec('alert','overlap');
      'OD'
   || {? 1+menu_txt='P'
      || _ref:=OS_N.ref()
      || _ref:=null()
      ?};
      _wyn:=exec('check','overlap',_ref,OS_N,,,,,,'OND',exec('ref_firma','ustawienia'),OSOBA.ref());
      {? type_of(_wyn)=type_of('') & _wyn=''
      || {? _ref & (~exec('czy_zasilek','os_nieob',OS_N.R().RN,OS_N.OD) | OS_N.ROZ='N')
         || OS_N.ROZ:='N';
            exec('usun_zc_n','os_nieob');
            TZ.use('tabz'+$(OS_N.OD~1));
            TZ.index('ZASTAO');
            TZ.prefix('O',OS_N.ref);
            {? TZ.first()
            || {! |? TZ.del() !}
            ?};
            OS_N.POD:=OS_N.STD:=0
         ?};
         {? OS_N.ROZ='N' & OS_N.WAL='T'
         || OS_N.WAL:='N';
            OS_N.WSP:=100
         ?};
         {? _ref & OS_N.ROZ='T'
         || OS_N.STD:=OS_N.POD*OS_N.PROC/100/30$2
         ?};
         1
      || _wyn
      ?}
   ?}
|| _wyn
?}


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.10]
:: OPIS: Legenda dla nieobecnosci.
::  OLD: \legenda/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','OS_N#01#')


\trig_b_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Formula na trigger przed akcji del tabeli OS_N. Usuwa specjalne zapisy w tabeli N.
::   WE:
::   WY:
::  OLD: \trig_b_del/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',N,'NIEOBOSO',OS_N.ref()) &
exec('del_ndx','#table',ZC_N,'ZC_N',OS_N.ref()) &
exec('del_tmp','#table',TZ,'OS_N',OS_N.ref())


\trig_a_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Formula na trigger po akcji put tabeli OS_N. Modyfikuje specjalne zapisy w tabeli N.
::   WE:
::   WY:
::  OLD: \trig_a_put/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
{? ~exec('del_ndx','#table',N,'NIEOBOSO',OS_N.ref())
|| undo();
   return()
?};
exec('trig_a_add','!ppl_zlc_rnie');
~~


\trig_a_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Formula na trigger po akcji add tabeli OS_N. Dodaje specjalne zapisy w tabeli N.
::   WE:
::   WY:
::  OLD: \trig_a_add/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
exec('__KAL','object');
N.cntx_psh();
N.clear();
__KAL.no_err(1);
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),'Z',OS_N.OSOBA);
{? P.first()
|| {!
   |? __KAL.set_cal({? P.KAL || P.KAL || 'standard' ?},OS_N.OD~1);
      N.blank(1);
      N.KOR:='N';
      N.NB:=OS_N.R;
      N.OD:=OS_N.OD;
      N.DO:=OS_N.DO;
      N.DD:=OS_N.DD;
      N.UW:=OS_N.UW;
      N.NK:=OS_N.NK;
      N.NR:=OS_N.NR;
      N.NG:=OS_N.NG;
      N.NT:=OS_N.NT;
      N.POD:=OS_N.POD;
      N.STD:=OS_N.STD;
      N.ST:=OS_N.ST;
      N.PROC:=OS_N.PROC;
      N.KDCH:=OS_N.KDCH;
      N.KDSW:=OS_N.KDSW;
      N.OS_N:=OS_N.ref;
      N.P:=P.ref;
      N.NRG_AUTO:='T';
      N.PARTDAY:='N';
      N.KOMENT:=OS_N.KOMENT;
      {? N.add(1)
      || {? N.OD~1<>N.DO~1 | N.OD~2<>N.DO~2
         ||
            _aorg:=0;
            _od:=N.OD;
            _do:=N.DO;
            N.cntx_psh;
            N.index('NIEOBECN');
            N.prefix('N',P.ref);
            {? N.find_key(_od)
            || {!
               |? {? date(N.OD~1,N.OD~2,1)<date(N.DO~1,N.DO~2,1)
                  || _ndo:=N.DO;
                     N.DO:=date(N.OD~1,N.OD~2,0);
                     {? N.DO>=N.OD
                     || N.NK:=N.DO-N.OD+1;
                        N.NR:=__KAL.w_days(N.OD,N.DO);
                        N.NG:=exec('nominal','godziny',N.OD,N.DO,,,1);
                        1
                     ?};
                     N.put;
                     N.OD:=N.DO+1;
                     N.DO:=_ndo;
                     N.DK:=0;
                     {? N.DO>=N.OD
                     || N.NK:=N.DO-N.OD+1;
                        N.NR:=__KAL.w_days(N.OD,N.DO);
                        N.NG:=exec('nominal','godziny',N.OD,N.DO,,,1);
                        1
                     ?};
                     N.add
                  || N.next & N.DO<=_do
                  ?}
               !}
            ?};
            N.cntx_pop
         ?};
         exec('nieo_dod','!ppl_zlc_rnie')
      ?};
      P.next
   !}
?};
P.cntx_pop();
N.cntx_pop();
__KAL.no_err(0);
~~


\nieo_dod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [12.30]
:: OPIS: Funkcja przy dodawaniu nieobecnosci OS_N wywolywana w triggerze dodajacym zapis do tabeli N
::  OLD: \nieo_dod/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? KST_PAR.URLOP & (N.NB=KST_PAR.URLOP | N.NB=KST_PAR.URL_CHOR)
|| {? exec('kart_url_find','kart_url',N.OD~1)
   || exec('akt_dane_kurl','!ppl_zlc_rnie',N.OD~1,1);
      exec('akt_dane_kurl','!ppl_zlc_rnie',(N.OD~1)+1,1)
   || exec('akt_dane_kurl','!ppl_zlc_rnie',N.OD~1,1)
   ?}
?}


\os_n_32
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Wartosc poczatkowa ZC_N.OS_N
::  OLD: \os_n_32/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
OS_N.ref()


\ZC_N_PROC
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Formula po redakcji pola procent w tabeli ZC_N
::   WE:
::   WY:
::  OLD: \ZC_N_PROC/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZC_N.PROC<=0 | ZC_N.PROC>100
|| FUN.emsg('Wartość procentowa musi być większa od 0 i nie większa od 100.'@);
   0
|| ZC_N.KW:=(ZC_N.OS_N().POD*ZC_N.PROC/100/30)$2*ZC_N.NK;
   1
?}


\tz_dolacz_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsluga akcji "Dolacz - po" - aktualizacja pol zmiennej TZ_EDIT oraz tabel: N i NW. Tylko dla chorob osob
::       (nie pracownikow) - urlopy nie sa edytowalne.
::   WE:
::   WY: ~~
::  OLD: \dolacz_po/rozl_tz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('akt_npod','!ppl_zlc_rnie',0,1)


\tz_popraw_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsluga akcji "Popraw - po" - aktualizacja pol zmiennej TZ_EDIT oraz tabel: N i NW. Tylko dla chorob osob
::       (nie pracownikow) - urlopy nie sa edytowalne.
::   WE:
::   WY: ~~
::  OLD: \popraw_po/rozl_tz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('akt_npod','!ppl_zlc_rnie',0,1)


\tz_usun_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsluga akcji "Usun - po" - aktualizacja pol zmiennej TZ_EDIT oraz tabel: N i NW. Tylko dla chorob osob (nie
::       pracownikow) - urlopy nie sa edytowalne. Jezeli rekordy sa usuwane w akcji grupowej, to aktualizacja jest
::       wykonywana tylko po usunieciu ostatniego rekordu.
::   WE:
::   WY: ~~
::  OLD: \usun_po/rozl_tz.fml
::----------------------------------------------------------------------------------------------------------------------
{? TZ.sel_size()<=1 || exec('akt_npod','!ppl_zlc_rnie',0,1) ?}


\os_n_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.22]
:: OPIS: Wyzwalacz po usunięciu wiersza w OS_N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nezla_status','nieobecnosc',OS_N);
~~


\os_n_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Przed akcją dołącz nieobecności zleceniobiorcy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.DT:=0;

_fld:=exec('n_params','nieobecnosc');
params_set('fld',_fld);


exec('ustaw_grant','!ppl_zlc_rnie')


\os_n_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.22]
:: OPIS: Przed akcją popraw nieobecności zleceniobiorcy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_org:=exec('n_params','nieobecnosc');
_fld:=exec('n_params','nieobecnosc');
params_set('fld',_fld);

_org.NB:=OS_N.R;
_org.OD:=OS_N.OD;
_org.DO:=OS_N.DO;
_org.UW:=OS_N.UW;

EDIT_VAR.DT:={? OS_N.UW='D' || OS_N.NK || OS_N.NT ?};

exec('ustaw_grant','!ppl_zlc_rnie')

:Sign Version 2.0 jowisz:1045 2023/08/03 10:20:44 91fe15d66e229bc5549ead910423ebb3ad6b7094ac256dba58bac06c81cde7672a6d4947d4e88bd5d1100d1c07a01c1b3fa60c0996b6709d003b01c30ed989dcc0b65c6fa2b8d6844e88bc7209bc11b4c3358187ffa438969158585bff9a00cbf156593c3d7a5bf8518ce5b13bedbae5f481ee8bbd40b5d30f4a1f39667b160b
