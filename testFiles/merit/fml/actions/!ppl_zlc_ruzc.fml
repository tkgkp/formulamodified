:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_zlc_ruzc.fml
:: Utworzony: 09.05.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: PPL_ZLC_RUZC - Rej. umów cywilnoprawnych.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rej. umów cywilnoprawnych - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::# properties=LOOP
::
:: Parametr wejściowy ON_ESC określa sposób działania przy braku "wyboru" zlecenia.
:: Parametr może przyjmować wartości:
::    DONE     - Czynność zostanie zakończona, a parametry wyjściowe przyjmą wartości puste.
::    KEEP     - Czynność zostanie odłożona na listę zadań aby użytkownik mógł do niej wrócić. Oznacza to, że czynności
::               nie da się zakończyć bez wyboru współpracownika [DOMYŚLNIE].
::    CANCEL   - Jeśli czynność jest pierwszą w procesie to po zakończeniu formuły głównej instancja czynności zostanie
::               usunięta. Jeśli czynność jest kolejną w procesie to otrzyma status oczekująca i pozostanie na liście
::               zadań - czyli tak jak dla KEEP.
::    ERROR    - Czynność jest kończona a proces zatrzymywany z ustawioną flagą błędu.
::# kind=WE, symbol=ON_ESC, type=STRING, name=Sposób działania przy rezygnacji, required=T, ^
::#          fml_val="exec('on_esc','#bi_stat',{? _a=~~ || 'KEEP' || _a ?})"
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
::
::# kind=WEW, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
::
::# kind=WY, symbol=ZC, type=_ZC, name=Wskazanie umowy cywilnoprawnej, required=T
::# kind=WY, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_akcja:=_mp.akcja();
_context:=_par.context;

_result:='';
_done:=0;
_uidref:=exec('ref2uid','#table',_in.P);

:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

{? _uidref=''
|| _result:=exec('error','!ppl_zlc_ruzc')

|? _mp.loop()
:: Kolejny obrót pętli - odzyskajmy klucz grupujący (z parametrów wejściowych).
:: Obsługa klucza wg. "starej" metody (GRP_KEY) i "nowej" (GRPKEY).
|| _out.GRP_KEY:=_out.GRPKEY:=_mp.grpkey(_in.GRP_KEY,_in.GRPKEY);
   _mp.save(,_out);
   _done:=1

|| {? ~_mp.isMicro()
::    Zabawa z obsługą pętli nie ma sensu dla mikroczynności.
::    Ustalenie lub odzyskanie klucza grupującego (z parametrów wyjściowych).
::    Obsługa klucza wg. "starej" metody (GRP_KEY) i "nowej" (GRPKEY).
   || _out.GRP_KEY:=_out.GRPKEY:=_mp.grpkey(_out.GRP_KEY,_out.GRPKEY);
      _mp.save(,_out)
   ?};

   {? _mp.pathTodo()
::    Czynność uruchomiona z listy zadań ("zerowe" uruchomienie pętli).
   || _ret:=params_exec('select','!ppl_zlc_ruzc',_uidref);
      {? type_of(_ret)=type_of('')
      || _result:=_ret
      |? _ret
      || _done:=1
      || _mp.keep()
      ?}

::    Obsługa akcji - wywołania wyłącznie z obszaru roboczego.  --------------------------------------------------------

   |? _akcja='WYBIERZ'
   || {? ~_mp.isMicro()
      || ZC.cntx_psh();
         ZC.prefix();
         {? ZC.seek(_context.ZC)
         || _mp.grpkeyAdd(ZC.uidref())
         || exec('error','!ppl_zlc_ruzc','ZC')
         ?};
         ZC.cntx_pop()
      ?}

   |? _akcja='POMIŃ'
   || {? ~_mp.isMicro()
      || ZC.cntx_psh();
         ZC.prefix();
         {? ZC.seek(_context.ZC)
         || _mp.grpkeyDel(ZC.uidref())
         || exec('error','!ppl_zlc_ruzc','ZC')
         ?};
         ZC.cntx_pop()
      ?}

   |? _akcja='DOŁĄCZ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('zc_dolacz','!ppl_zlc_ruzc',_uidref);
      {? +_ret=48
      || _context.ZC:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='POPRAW'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('zc_popraw','!ppl_zlc_ruzc',_uidref,_context.ZC);
      {? +_ret=48
      || _context.ZC:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='USUŃ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('zc_usun','!ppl_zlc_ruzc',_uidref,_context.ZC);
      {? +_ret=48
      || _context.ZC:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyDel(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='ZAKOŃCZ'
   || _done:=1

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

?};

{? _done
|| ZC.cntx_psh();
   ZC.prefix();
   do();
   _grpkey:=_mp.grpkeyGet();
   {? _grpkey<>~~
   || {? ZC.seek(_grpkey)
      || _out.ZC:=ZC.ref();
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?};
      _mp.done()
   ?};
   end();
   ZC.cntx_pop();

   {? _grpkey=~~ & ~_mp.loop()
::    Nie ma umowy do "wypchnięcia" i jesteśmy w obsłudze "Zakończ" w "pierwszym" obrocie pętli - niech zadziała ON_ESC.
   || {? _in.ON_ESC='DONE'
      || _mp.done()

      |? _in.ON_ESC='KEEP'
      || FUN.info(
            'Żadna umowa nie została wybrana lub dołączona.\n'
            'Czynność pozostanie na liście zadań do wykonania.'@
         );
         _mp.keep()

      |? _in.ON_ESC='CANCEL'
      || _mp.cancel()

      |? _in.ON_ESC='ERROR'
      || _mp.error('ON_ESC=ERROR')
      ?}

   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR[17.00]
:: OPIS: Rej. umów cywilnoprawnych - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj umowy cywilnoprawne: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj umowy cywilnoprawne: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj umowy cywilnoprawne: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj umowy cywilnoprawne'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE: [_a] [STRING] - Kod komunikatu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || _a || '' ?};

'Rejestrowanie umowy cywilnoprawnej niemożliwe.'@+'\n'+
{? _kod='P'
|| 'Nie znaleziono pracownika.'@
|? _kod='ZC'
|| 'Nie znaleziono umowy cywilnoprawnej.'@
|? _kod='ZC_put'
|| 'Nie znaleziono umowy cywilnoprawnej do poprawienia.'@
|?  _kod='ZC_del'
|| 'Nie znaleziono umowy cywilnoprawnej do usunięcia.'@
|| 'Wystąpił nieprzewidziany błąd.'@
?}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| F_ZATR.cntx_psh();
   {? P.F_ZATR().KOD='Z'
   || __F_ZATR.push();
      __F_ZATR.mod('Z');
      RU.cntx_psh();
      RU.prefix();
      OSOBA.cntx_psh();
      P.OSOBA();
      ZC.cntx_psh();
      ZC.index('ZLECPRAC');
      ZC.prefix(P.ref());
      ZC.win_sel('WER_Z');
      ZC.win_edit('RED');
      ZC.win_patt('WZO');
      params_set(params_get());
      exec('zc_icon','zlec_rh');
      _ret:=ZC.select();
      ZC.cntx_pop();
      OSOBA.cntx_pop();
      RU.cntx_pop();
      __F_ZATR.pop()
   || _ret:='Współpracownik nie jest zleceniobiorcą.'@
   ?};
   F_ZATR.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_ruzc')
?};
P.cntx_pop();
_ret


\zc_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZC.
::   WE:
::   WY:
::  OLD: \uz_dzien_put/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.NU:=form(ZC.NU);
ZC.R:=ZC.DZ~1;
ZC.M:=ZC.DZ~2;

{? ZC.TYP<>'G'
|| exec('blank','#field',ZC,,'GODZ')
?};
{? ZC.TYP<>'D'
|| exec('blank','#field',ZC,,'DNI')
?};
{? ZC.TYP<>'M' | ZC.CZYWAL='T'
|| exec('blank','#field',ZC,,'OZ')
?};
{? ZC.CZYWAL='N'
|| exec('blank','#field',ZC,,'ZWAL','WAL')
?};
{? ZC.OZ='N'
|| exec('blank','#field',ZC,,'DZIEN')
?};
{? ZC.ZUS='N'
|| exec('blank','#field',ZC,,'WN_ZUS')
?};
{? ZC.FC='N'
|| exec('blank','#field',ZC,,'WN_FC')
?};
1


\zc_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_modb','!ppl_zlc_ruzc')


\zc_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_modb','!ppl_zlc_ruzc')


\zc_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli ZC.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
:: Ze względu na sposób powiązania na portalu umowy cywilnoprawnej i jej rachunków, po zmianie numeru umowy należy
:: ponownie wysłac rachunki. Trzeba je zatem "zmodyfikować" - odświeżyć datę ostatniej zmiany.
{? ZC.NU<>bfld('NU') & exec('lic','#b_domain','POR')
|| RH.cntx_psh();
   RH.trig_off('*','*');
   RH.index('RACHO');
   RH.prefix(ZC.ref());
   {? RH.first()
   || {!
      |? RH.put(,1);
         RH.next()
      !}
   ?};
   RH.trig_on('*','*');
   RH.cntx_pop()
?};
~~


\zc_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err:=0;
RH.cntx_psh();
RH.index('RACHUNKI');
RH.prefix(ZC.ref());
{? RH.first()
|| O.cntx_psh();
   {!
   |? {? RH.BL<>'T' & RH.DOK='' & RH.O().Z<>'T'
      || RH.del()
      ?}
   !};
   O.cntx_pop();
   _err:=RH.first()
?};
RH.cntx_pop();
{? _err
|| return(0)
?};

exec('del_tmp','#table',OV_UPR,'ZC',ZC.ref()) &
exec('del_ndx','#table',OS_VIEW,'ZCREF',ZC.ref()) &
exec('del_ndx','#table',ZC_N,'ZC_R',ZC.ref()) &
exec('del_ndx','#table',KORN_Z,'ZLEC',ZC.ref()) &
exec('del_ndx','#table',ZC_INFO,'ZC',ZC.ref()) &
exec('del_ndx','#table',ZALACZ,'NAG',ZC.uidref()) &
exec('del_tmp','#table',ZUS_RAP,'ZC',ZC.ref())


\rh_first
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdza czy dla wskazanej umowy istnieje choć jeden rachunek. Funkcja ma charakter wewnętrzny - nie
::       jest sprawdzana poprawność parametru wywołania.
::   WE: _a [REFERENCE] - Wskazanie na umowę cywilnoprawną.
::   WY: 0 - Do umowy nie wystawiono jeszcze żadnego rachunku.
::       1 - Do umowy wystawiony został co najmniej jeden rachunek.
::----------------------------------------------------------------------------------------------------------------------
RH.cntx_psh();
RH.index('RACHUNKI');
RH.prefix(_a);
_jest:=RH.first();
RH.cntx_pop();
_jest


\zc_redagowalne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wykonywana przed redagowaniem określonych pól umowy cywilnoprawnej - blokuje dostęp, jeżeli wystawiony
::       jest choć jeden rachunek.
::   WE:
::   WY:
::  OLD: \mod_zcdu/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:={? VAR.P
      || UZZ.ZR=0
      || 1
      ?};
{? _ret & cur_tfld()=ZC & cur_afld='DU'
|| __USTAW_DU:=fld
?};
_ret


\zc_ustaw_rc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Po redagowaniu pól ZC.DU i ZC.KU - ustalenie wartości znacznika "Podatek zryczałtowany".
::       Formuła wywoływana również "Po redagowaniu" ZC.RU.
::   WE:
::   WY:
::  OLD: \pod_rycz/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ',7,8,'*(','+ZC.RU().K+',')
|| ZC.RC:='T'
?};
1


\zc_blokuj_zmiane_daty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Sprawdzenie czy można skrócić czas umowy, która realizuje wypłacone zasiłki.
::       Procedura umożliwia również usunięcie zapisów niezrealizowanych wpisów tabeli ZC_N dla danej umowy
::       wykraczające poza nową datę do zlecenia.
::   WE:
::   WY: 0 - Zmiana daty est możliwa.
::       1 - Zmiana daty zablokowana.
::  OLD: \spr_zas_umowa/os_nieob.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=_next:=0;
ZC_N.index('ZC_Z');
ZC_N.prefix(ZC.ref());
{? ZC_N.last()
|| {!
   |? {? ZC.DW<ZC_N.DO
      || {? ZC_N.RH
         || _wyn:=1
         || _next:=1
         ?}
      ?};
      ~_wyn & ZC_N.prev()
   !};
   {? ~_wyn
   || {? _next
      || {? FUN.ask(
               'Znaleziono przypisane realizacje zasiłków do redagowanego zlecenia.\n'
               'Okres realizacji wybiega poza nową datę końca zlecenia.\n'
               'Czy usunąć realizacje zasiłków wykraczającą poza nową datę końca zlecenia?'@
            )
         || ZC_N.first();
            {!
            |? {? ZC_N.DO>ZC.DW
               || ZC_N.del()
               || ZC_N.next()
               ?}
            !}
         || _wyn:=1
         ?}
      ?}
   ?}
?};
_wyn


\zc_osoba_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Wartość początkowa pola ZC.OSOBA.
::  OLD: \_PRZ_OS/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
P.OSOBA


\zc_oddzial_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Wartość początkowa pola ZC.ODDZIAL.
::  OLD: \_PRZ_OD/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
P.ODDZIAL


\zc_oddzial_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Przed redagowaniem pola ZC.ODDZIAL.
::   WE:
::   WY:
::  OLD: \zc_odd/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zc_redagowalne','!ppl_zlc_ruzc')


\zc_wydzial_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Wartość początkowa pola ZC.WYDZIAL.
::  OLD: \_PRZ_WY/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
P.WYDZIAL


\zc_ru_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Po redagowaniu pola ZC.RU - ustawia wartość zmiennej UZ.PKU (koszty uzyskania).
::   WE:
::   WY:
::  OLD: \ustaw_ku/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~ZC.PPD
|| ZC.PPD:=ZC.RU().PPD
?};
exec('zc_ustaw_rc','!ppl_zlc_ruzc');
exec('uz_pku_set','zlec_rh');
1


\zc_du_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.DU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__USTAW_DU')=type_of(date)
|| {? __USTAW_DU~1<> fld~1
   || exec('nr_umowy','!ppl_zlc_ruzc',1)
   ?};
   &__USTAW_DU
?};
exec('zc_ustaw_rc','!ppl_zlc_ruzc')


\uz_dw_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed redagowaniem pola UZ.DW.
::  OLD: \VP_1_ZC/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
UZ.DO:=ZC.DW;
1


\uz_pku_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola UZ.PKU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.RC<>'T'


\zc_dw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2008]
:: OPIS: Po redagowaniu pola ZC.DW.
::  OLD: \po_red_zc_dw/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? menu_txt()='popraw' & ZC.DW<UZ.DO & exec('zc_blokuj_zmiane_daty','!ppl_zlc_ruzc')
|| FUN.emsg(
      'Istnieją skojarzone lub rozliczone zasiłki obejmujące okres po nowej dacie końca umowy.\n'
      'Data końca umowy nie może być wcześniejsza niż przed akcją "Popraw".'@
   );
   ZC.DW:=UZ.DO;
   0
|| 1
?}


\zc_ku_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.KU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_ustaw_rc','!ppl_zlc_ruzc')


\zc_rc_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola ZC.RC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
~(',7,8,'*(','+ZC.RU().K+',')) & exec('zc_redagowalne','!ppl_zlc_ruzc')


\zc_rc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.RC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('uz_pku_set','zlec_rh');
exec('zc_efld_opt','zlec_rh')


\zc_zus_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.ZUS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh')


\zc_fc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.FC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh')


\zc_stnp_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: Wartość początkowa pola ZC.STNP. Dodatkowo formuła ustawia wartości pól ZC.TTUB i ZC.PREM.
::   WE:
::   WY:
::  OLD: \zus_nfo/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('zn_ttub','pracownik')
|| ZC.TTUB:=P_INFO.TTUB;
   ZC.PREM:=P_INFO.PREM;
   P_INFO.STNP
?}


\zc_typ_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.TYP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh')


\zc_godz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola ZC.GODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='G'


\zc_godz_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed redagowaniem pola ZC.GODZ.
::  OLD: \_ZC_TYP/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='G'


\zc_dni_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [18.1X]
:: OPIS: Przed wyświetleniem pola ZC.DNI.
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='D'


\zc_dni_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [18.1X]
:: OPIS: Przed redagowaniem pola ZC.DNI.
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='D'


\zc_czywal_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.CZYWAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh')


\zc_zwal_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Przed wyświetleniem pola ZC.ZWAL.
::   WY: 1 - Redagowanie dopuszczalne.
::       0 - Redagowanie niemożliwe.
::  OLD: \ae_zwal/waluty.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\zc_zwal_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola ZC.ZWAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\zc_wal_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Przed redagowaniem pola ZC.WAL.
::   WY: 1 - Redagowanie dopuszczalne.
::       0 - Redagowanie niemożliwe.
::  OLD: \ae_wal/waluty.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\zc_wal_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola ZC.WAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\zc_kt_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.30]
:: OPIS: Wartość początkowa pola ZC.KT.
::   WE:
::   WY:
::  OLD: \uz_kt_bl/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
KT.cntx_psh();
KT.index('F_ZATR');
KT.prefix(exec('ref_firma','ustawienia'),exec('dest','f_zatr','Z'));
_wyn:=null();
_refP:=null();
{? KT.first()
|| {!
   |? {? _refP=null() || _refP:=KT.ref() ?};
      {? KT.ZC='T'
      || _wyn:=KT.ref();
         0
      || KT.next()
      ?}
   !}
?};
{? _wyn=null()
||
:: nie znaleziono listy z umów zleceń a parametr 258 ustawiony na N - brak wyplat na listach plac
:: nalezy zalozyc liste bo pole ZC.KT jest nieredagowalne przy parametrze 258 ustawionym na N
   _add:="
      {? KT.find_key(_a)
      || return(0)
      ?};
      KT.blank();
      KT.T:=_a;
      KT.N:=_b;
      KT.K:=_c;
      KT.F:=_d;
      KT.L:=_e;
      KT.KA:=_f;
      KT.F_ZATR:=_g;
      KT.ZC:=_h;
      KT.add()
   ";
   _f_zatr:=__F_ZATR.find('Z');
   _kal_nazw:=exec('standard_ref','kalendarz');
   {? ~_add('ZLC','umowy cywilnoprawne','exec(\'czy_zlec\',\'lista_plac\')','R','*',_kal_nazw,_f_zatr,'T')
   || {! _i:=0..9
      |? _typ:='ZL'+form(_i);
         {? _add(_typ,'umowy cywilnoprawne','exec(\'czy_zlec\',\'lista_plac\')','R','*',_kal_nazw,_f_zatr,'T')
         || _wyn:=KT.ref()
         ?};
         _wyn=null()
      !}
   ?}
?};
KT.cntx_pop();
{? _wyn=null & _refP<>null || _wyn:=_refP ?};
_wyn


\zc_oz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola ZC.OZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='M' & ZC.CZYWAL='N'


\zc_oz_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola ZC.OZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.TYP='M' & ZC.CZYWAL='N'


\zc_oz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC.OZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_efld_opt','zlec_rh')


\uz_dwr_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.10]
:: OPIS: Wartość początkowa pola UZ.DWR.
::   WE:
::   WY:
::  OLD: \uz_dzien/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('uz_dwr_set','zlec_rh')


\uz_dwr_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.30]
:: OPIS: Przed wyświetleniem pola UZ.DWR.
::   WE:
::   WY:
::  OLD: \uz_b_dn/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.OZ='T'


\zc_dzien_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.30]
:: OPIS: Przed wyświetleniem pola ZC.DZIEN.
::   WE:
::   WY:
::  OLD: \uz_d_w/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.OZ='T' & UZ.DWR=1


\zc_dzien_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pola ZC.DZIEN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.OZ='T' & UZ.DWR=1


\zc_dzien_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.30]
:: OPIS: Po redagowaniu pola ZC.DZIEN.
::   WE:
::   WY:
::  OLD: \uz_ae_d/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()>30
|| fld(30)
?};
1


\uz_dwr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [12.30]
:: OPIS: Po redagowaniu pola UZ.DWR.
::   WE:
::   WY:
::  OLD: \uz_a_dzien/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? UZ.DWR=0
|| ZC.DZIEN:=0
|? UZ.DWR=1
|| {? ZC.DZIEN<1
   || ZC.DZIEN:=1
   ?}
|| ZC.DZIEN:=UZ.DWR
?};
exec('zc_efld_opt','zlec_rh')


\zc_act_wybierz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Wybierz - grupa przed" w oknach wertowania tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy na pewno chcesz wybrać zaznaczone wiersze?'@)


\zc_act_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Wybierz - przed" w oknach wertowania tabeli ZC.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli ZC z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli ZC jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _mp.grpkeyAdd(ZC.uidref())

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='WYBIERZ';
   _args.CONTEXT.ZC:=ZC.uidref();
   _args.GRUPA:={? ZC.sel_size() || 'T' || 'N' ?};
   exec('mp_run','#b__box',_args)
?};
~~


\zc_act_pomin_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Pomiń - grupa przed" w oknach wertowania tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy na pewno chcesz pominąć zaznaczone wiersze?'@)


\zc_act_pomin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Pomiń - przed" w oknach wertowania tabeli ZC.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli ZC z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli ZC jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _mp.grpkeyDel(ZC.uidref())

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='POMIŃ';
   _args.CONTEXT.ZC:=ZC.uidref();
   _args.GRUPA:={? ZC.sel_size() || 'T' || 'N' ?};
   exec('mp_run','#b__box',_args)
?};
~~


\zc_act_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli ZC.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli ZC z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli ZC jako składowa okna grupowego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('zc_dolacz','!ppl_zlc_ruzc',P.uidref());
   {? +_ret=48
   || _mp.grpkeyAdd(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='DOŁĄCZ';
   _args.CONTEXT.ZC:='';
   exec('mp_run','#b__box',_args);
   {? type_of(_args.CONTEXT.ZC)=type_of('') & +_args.CONTEXT.ZC=48
   || ZC.seek(_args.CONTEXT.ZC)
   ?}

?};
~~


\zc_act_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Popraw - przed" w oknach wertowania tabeli ZC.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli ZC z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli ZC jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('zc_popraw','!ppl_zlc_ruzc',P.uidref(),ZC.uidref());
   {? +_ret=48
   || _mp.grpkeyAdd(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='POPRAW';
   _args.CONTEXT.ZC:=ZC.uidref();
   exec('mp_run','#b__box',_args)
?};
~~


\zc_act_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Usuń - przed" w oknach wertowania tabeli ZC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('zc_usun','!ppl_zlc_ruzc',P.uidref(),ZC.uidref());
   {? +_ret=48
   || _mp.grpkeyDel(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='USUŃ';
   _args.CONTEXT.ZC:=ZC.uidref();
   exec('mp_run','#b__box',_args)
?};
~~


\zc_act_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli ZC z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli ZC jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ZC
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| sel_exit()

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| params_set(params_get());
   _args:=exec('ppl_zlc_ruzc_args','zlec_rh');
   _args.AKCJA:='ZAKOŃCZ';
   exec('mp_run','#b__box',_args);
   win_activate('rh_wer')
?}


\zc_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe dołączanie rekordu do tabeli ZC.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::   WY: Komunikat o błędzie lub uidref dołączonego rekordu lub ''.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| ZC.cntx_psh();
   ZC.prefix();
   ZC.blank();
   ZC.memo_set(,'TRESC');
   UZ.PKU:=0;
   exec('zc_efld_opt','zlec_rh','*',ZC,'RED');
   VAR.P:=0;
   EDIT_VAR.ZC_WYD_B:='';
   ZC.win_edit('RED');
   {? ZC.edit("exec('zc_ae','!ppl_zlc_ruzc')")
   || do();
      ZC.add();
      ZC.memo_put(,'TRESC');
      ZC_INFO.clear();
      exec('zc_info_add','zlec_rh');
      {? end()
      || _ret:=ZC.uidref()
      ?};
      exec('spr_nb_braki','os_nieob')
   ?};
   ZC.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_ruzc','P')
?};
P.cntx_pop();

_ret


\zc_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe poprawianie rekordu tabeli ZC.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::       _b [STRING] - Wskazanie (uidref) umowy cywilnoprawnej.
::   WY: Komunikat o błędzie lub uidref poprawionego rekordu lub ''.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| ZC.cntx_psh();
   ZC.prefix();
   ZC.win_edit('RED');
   {? var_pres('_b')=type_of('') & +_b=48 & ZC.seek(_b) & ZC.P=P.ref()
   || UD_SKL.cntx_psh();
      UD_SKL.prefix();
      exec('zc_efld_opt','zlec_rh','*',ZC,'RED');
      VAR.P:=1;
      EDIT_VAR.ZC_WYD_B:=ZC.WYDZIAL().SYMBOL;
      ZC.memo_get(,'TRESC');
      {? ZC.edit("exec('zc_ae','!ppl_zlc_ruzc')")
      || do();
         ZC.put();
         ZC.memo_put(,'TRESC');
         ZC_INFO.index('ZC');
         ZC_INFO.prefix(ZC.ref());
         {? ZC_INFO.first()
         || exec('zc_info_add','zlec_rh',1);
            ZC_INFO.put(1)
         || exec('zc_info_add','zlec_rh')
         ?};
         exec('zc_info_dw_mod','zlec_rh');
         {? end()
         || _ret:=ZC.uidref()
         ?};
         exec('spr_nb_braki','os_nieob')
      ?};
      UD_SKL.cntx_pop()
   || _ret:=exec('error','!ppl_zlc_ruzc','ZC_put')
   ?};
   ZC.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_ruzc','P')
?};
P.cntx_pop();

_ret


\zc_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Właściwe usunięcie rekordu z tabeli ZC.
::   WE:  _a [STRING] - Wskazanie (uidref) pracownika.
::        _b [STRING] - Wskazanie (uidref) usuwanej umowy cywilnoprawnej.
::   WY: Komunikat o błędzie lub uidref usuniętego rekordu lub ''.
::  OLD: \del_um/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| ZC.cntx_psh();
   ZC.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & ZC.seek(_b) & ZC.P=P.ref()
   || _blok:=0;
      _ksie:=0;
      _zamk:=0;

      RH.cntx_psh();
      RH.index('RACHUNKI');
      RH.prefix(ZC.ref());
      {? RH.first()
      || O.cntx_psh();
         {!
         |? _blok+=(RH.BL='T');
            _ksie+=(RH.DOK<>'');
            _zamk+=(RH.O().Z='T');
            RH.next()
         !};
         O.cntx_pop()
      ?};
      RH.cntx_pop();

      {? _blok || _ret+='Istnieją zablokowane rachunki.'@+'\n' ?};
      {? _ksie || _ret+='Istnieją zaksięgowane rachunki.'@+'\n' ?};
      {? _zamk || _ret+='Istnieją rachunki rozliczone na zamkniętych listach płac.'@+'\n' ?};

      {? _ret=''
      || {? exec('del_ask','#table')
         || {? ZC.del(,1)
            || {? PAR_SKID.get(253)='T'
               || exec('akt_data_do','!ppl_zlc_ruzc')
               ?};
               _ret:=_b
            ?}
         ?}
      ?}

   || _ret:=exec('error','!ppl_zlc_ruzc','ZC_del')
   ?};
   ZC.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_ruzc','P')
?};
P.cntx_pop();

_ret


\zc_zalaczniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Załączniki".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('show_zalacz','zalacz','P','ZC',exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RUZC'))


\zc_zasilki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zasiłki".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zas_zc','os_nieob')


\zc_drukuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Drukuj".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_drukuj','zlec_rh')


\zc_ubezpieczenia_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Ubezpieczenia".
::   WE:
::   WY:
::  OLS: \ZC_ubezp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC_INFO.cntx_psh();
ZC_INFO.index('ZC');
ZC_INFO.prefix(ZC.ref());
ZC_INFO.first();
ZC_INFO.win_sel('WER');
ZC_INFO.win_edit('RED');
ZC_INFO.win_patt('WZO');
ZC_INFO.select();
ZC_INFO.cntx_pop();
~~


\zc_zadania_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zadania"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',ZC.uidref())


\zc_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Legenda".
::   WE:
::   WY:
::  OLD: \leg_zc/menu.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? var_pres('_par')>100 &
   var_pres('cfg',_par)>100 &
   var_pres('done',_par.cfg)>100 &
   var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
|| _ag:=_par.cfg.done.noempty+':'+_par.cfg.done.empty
|| _ag:=''
?};
{? _ag='' | _ag=':'
|| exec('legenda','color','#ZC#01','$$Umowa uwzględniona w czynności','ZC#01')
|| exec('legenda','color','#ZC#01','ZC#01')
?}


\zc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Obsługa akcji "Rekord - po" - weryfikuje poprawność danych w tabeli umów cywilnoprawnych.
::  OLD: \spr_zc/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(ZC,,'NU','DZ','DU','DZB','DW','RU','KU'))<>''
|| return(_chk)

|? __CHK.record(ZC,,'WYDZIAL')<>''
|| return('ZC_WYD')

|? ZC.DU<ZC.DZ
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(ZC,'DU'),MS.name(ZC,'DZ')]);
   return('DU')

|? ZC.DW<ZC.DU
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(ZC,'DW'),MS.name(ZC,'DU')]);
   return('DW')

|? ZC.DU<=date(1900,1,1)
|| FUN.info('Nieprawidłowa data początku obowiązywania umowy.'@);
   return('DU')

|? ZC.DW<=date(1900,1,1)
|| FUN.info('Nieprawidłowa data końca obowiązywania umowy.'@);
   return('DW')
?};

{? ZC.TYP='G' & ZC.GODZ<0
|| return(__CHK.err_fld(ZC,'GODZ',1,'Wartość nie może być ujemna.'@))
?};

{? ZC.TYP='D' & ZC.DNI<0
|| return(__CHK.err_fld(ZC,'DNI',1,'Wartość nie może być ujemna.'@))
?};

{? ZC.CZYWAL='T'
|| {? (_chk:=__CHK.record(ZC,,'ZWAL','WAL'))<>''
   || return(_chk)

   |? ZC.WAL=KST_PAR.NAROD
   || FUN.emsg('Waluta musi być różna od waluty narodowej (%1).'@ [KST_PAR.NAROD().KOD]);
      return('WAL')
   ?}
?};

{? (_chk:=__CHK.record(ZC,,'ODDZIAL','KT'))<>''
|| return(_chk)

|? ZC.OZ='T' & ~(ZC.TYP='M' & ZC.CZYWAL='N')
|| return(__CHK.err_fld(ZC,'OZ',1))
?};

{? ZC.TYP='M' & ZC.CZYWAL='N' & ZC.OZ='T' & UZ.DWR=1 & (_chk:=__CHK.record(ZC,,'DZIEN'))<>''
|| return(_chk)

|? ZC.PPD<0
|| return(__CHK.err_fld(ZC,'PPD',1,'Wartość nie może być ujemna.'@))

?};

{? (_chk:=__CHK.record(ZC,,'TTUB','PREM','STNP'))<>''
|| return(_chk)
?};

{? ZC.RU().K='2' | ZC.RU().K='6'
|| {? (_chk:=__CHK.record2(ZC,'TRESC','Treść umowy'))<>''
   || return(_chk)
   || {? +ZC.memo_txt(0,0,'TRESC')>150 &
         FUN.ask('W związku z wymogami ZUS, pole "Przedmiot umowy" jest wykorzystywane do wygenerowania raportu '
                 'ZUS RUD.\nW wersji XML raportu uwzględnianych jest maksymalnie 150 znaków.'@+
                 '\nCzy chcesz powrócić do edycji?'@)
      || return('TRESC')
      ?}
   ?}
?};

{? PAR_SKID.get(253)='T'
|| exec('akt_data_do','!ppl_zlc_ruzc')
?};

''


\zc_info_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli ZC_INFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ZC_INFO.ZC=null()
|| return(0)
?};

P.cntx_psh();
ZC.cntx_psh();
ZC_INFO.FIRMA:=ZC_INFO.ZC().P().FIRMA;
ZC.cntx_pop();
P.cntx_pop();

{? ZC_INFO.ZUS='N'
|| exec('blank','#field',ZC_INFO,,'WN_ZUS')
?};
{? ZC_INFO.FC='N'
|| exec('blank','#field',ZC_INFO,,'WN_FC')
?};
1


\zc_info_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli ZC_INFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_info_modb','!ppl_zlc_ruzc')


\zc_info_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli ZC_INFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_info_modb','!ppl_zlc_ruzc')


\zc_info_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ZC_INFO.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ZC_INFO)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='ZUS'
|| _TAB.efld_opt(_we,'enable=%1' [$(ZC_INFO.ZUS='T')],ZC_INFO,'WN_ZUS')
?};

{? _fld='' | _fld='FC'
|| _TAB.efld_opt(_we,'enable=%1' [$(ZC_INFO.FC='T')],ZC_INFO,'WN_FC')
?};

1


\zc_info_zus_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC_INFO.ZUS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_info_efld_opt','!ppl_zlc_ruzc')


\zc_info_fc_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZC_INFO.FC.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_info_efld_opt','!ppl_zlc_ruzc')


\zc_info_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" w oknach wertowania tabeli ZC_INFO.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zc_info_efld_opt','!ppl_zlc_ruzc','*',ZC_INFO,'RED');
ZC_INFO.display()


\zc_info_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.40]
:: OPIS: Rekord przed tabeli ZC_INFO.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::  OLD: \zc_info_b_rec/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZC_INFO.DU=ZC.DU
|| ZC_INFO.actions('WER','uP',,1)
|| ZC_INFO.actions('WER',,':',1)
?};
~~


\zc_info_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.40]
:: OPIS: Rekord po dla ZC_INFO.
::   WE:
::   WY:
::  OLD: \zc_info_spr/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(ZC_INFO,,'DU','DW','TTUB','PREM','STNP'))<>''
|| return(_chk)
?};

{? ZC_INFO.DU<=ZC.DU | ZC_INFO.DU>ZC.DW
|| return(__CHK.err_fld(ZC_INFO,'DU',1,'Data wykracza poza okres umowy (%1 - %2).'@ [$ZC.DU,$ZC.DW]))

?};

ZC_INFO.DW:=ZC.DW;
1


\zc_info_sprawdz_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wyświetla komunikat jeśli są rachunki, których wypłata zawiera się w redagowanych danych ubezpieczeniowych
::       i jednocześnia są przypisane do innego zapisu niz pasujący.
::   WE: _a [DATE] - Data od okresu danych ubezpieczeniowych.
::       _b [DATE] - Data do okresu danych ubezpieczeniowych.
::   WY:
::  OLD: \spr_rh_zc_info/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
RH.cntx_psh();
RH.index('RACHUNKI');
RH.prefix(ZC.ref());
_jest:=0;
{? RH.first()
|| {!
   |? {? RH.DWY>=_a & RH.DWY<=_b & RH.BL<>'T'
      || _jest:=1
      ?};
      RH.next()
   !}
?};
{? _jest
|| FUN.emsg(
      'Istnieją niezablokowane rachunki z datą wypłaty z okresu danych ubezpieczeniowych,\n'
      'które są przypisane do innego zapisu danych ubezpieczeniowych.'@
   )
?};
RH.cntx_pop();
~~


\zc_info_menu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.40]
:: OPIS: Przed/po akcji menu okienka WER tabeli ZC_INFO.
::   WE: _a - 1 przed akcja, 0 - po akcji
::  OLD: \zc_info_menu/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_spr_rh:="
   RH.cntx_psh();
   RH.index('ZC_INFO');
   RH.prefix(ZC_INFO.ref);
   {? RH.first()
   || {? _a
      || FUN.emsg(
            'Istnieją rachunki rozliczone na podstawie ustawionych danych w tym wierszu.\n'
            'Modyfikacja nie jest możliwa.'@
         )
      ?};
      _wyn:=0
   || _wyn:=1
   ?};
   RH.cntx_pop();
   _wyn";

_act:=-menu_txt();

{? _act='dołącz'
|| {? _a
   || ZC_INFO.last();
      VAR.P:=0;
      1
   || exec('zc_info_add','zlec_rh',1);
      exec('zc_info_efld_opt','!ppl_zlc_ruzc','*',ZC_INFO,'RED');
      {? ZC_INFO.edit("exec('zc_info_ae','!ppl_zlc_ruzc')")
      || {? ZC_INFO.add()
         || exec('zc_info_dw_mod','zlec_rh');
            exec('zc_info_sprawdz_rh','!ppl_zlc_ruzc',ZC_INFO.DU,ZC_INFO.DW);
            exec('spr_nb_braki','os_nieob')
         ?}
      ?}
   ?}

|? _act='popraw'
|| {? _a
   || VAR.P:=1;
      1
   || _full_edit:=_spr_rh(0);
      exec('zc_info_efld_opt','!ppl_zlc_ruzc','*',ZC_INFO,'RED');
      {? ~_full_edit
      || _buf:=exec('save_fml_type','#field',ZC_INFO,'BEFORE_EDIT');
         exec('set_fml_type','#field',ZC_INFO,'BEFORE_EDIT',"0");
         ZC_INFO.fld_fml('DU','BEFORE_EDIT',"*");
         ZC_INFO.efld_opt('RED','mark=0',ZC_INFO,'TTUB');
         ZC_INFO.efld_opt('RED','mark=0',ZC_INFO,'PREM');
         ZC_INFO.efld_opt('RED','mark=0',ZC_INFO,'STNP')
      ?};
      {? ZC_INFO.edit("exec('zc_info_ae','!ppl_zlc_ruzc')")
      || {? ZC_INFO.put()
         || exec('zc_info_dw_mod','zlec_rh');
            exec('zc_info_sprawdz_rh','!ppl_zlc_ruzc',ZC_INFO.DU,ZC_INFO.DW);
            exec('spr_nb_braki','os_nieob')
         ?}
      ?};
      {? ~_full_edit
      || ZC_INFO.efld_opt('RED','mark=1',ZC_INFO,'TTUB');
         ZC_INFO.efld_opt('RED','mark=1',ZC_INFO,'PREM');
         ZC_INFO.efld_opt('RED','mark=1',ZC_INFO,'STNP');
         exec('restore_fml_type','#field',ZC_INFO,'BEFORE_EDIT',_buf)
      ?}
   ?}

|? _act='usuń'
|| {? _a
   || _spr_rh(1)
   || exec('zc_info_dw_mod','zlec_rh');
      exec('spr_nb_braki','os_nieob')
   ?}
?}


\akt_data_do
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO [17.00]
:: OPIS: PR/WRT/XP/12.41/1508/0001 - jeżeli parametr 253 ='T'
::       po potwierdzeniu komunikatu przez użytkownika nastąpi aktualizacja daty do w miejscu pracy zleceniobiorcy
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
ZC.cntx_psh();
ZC.index('ZLECPRAC');
ZC.prefix(P.ref());
{? H.last() & H_UM.last() & ZC.first()
|| _do:=#0;
   {!
   |? {? _do<ZC.DW || _do:=ZC.DW ?};
      ZC.next()
   !};
   ZC.cntx_pop();
   {? _do<ZC.DW || _do:=ZC.DW ?};
   {? H.DO<>_do & _do<>#0
   || {? FUN.ask(
            'Umowy z funduszu bezoosobowego zawarte są do dnia: %1\n'
            'Aktualny zapis w kartotece miejsc pracy dotyczy okresu: od %2 do %3\n'
            'Czy zakończyć zapis z miejsc pracy datą końca umowy zlecenia?\n'@
            [$_do,$H_UM.OD,$H_UM.DO]
         )
      || H.DO:=H_UM.DO:=_do;
         H_UM.put();
         H.put()
      ?}
   ?}
|| ZC.cntx_pop()
?};
H.cntx_pop();
H_UM.cntx_pop()


\ZC_KK
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: wartosc pocztakowa pola ZC.KK
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kk_hist','pracownik',P.ref(),date)


\nr_umowy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Wartość początkowa pola numer umowy w tabeli ZC
::   WE: _a = 1 po zmianie roku zawartego w dacie rozpoczenia umowy [opcjonalnie]
::----------------------------------------------------------------------------------------------------------------------
_akt:={? var_pres('_a')=type_of(0) || _a ?};
_auto:=exec('auto','!ppl_zlc_ruzc');
{? _auto<>'1' & _auto<>'2' & _auto<>'I'
|| return()
?};
{? _akt & ~FUN.ask(
              'Zmieniony został rok rozpoczęcia umowy cywilnoprawnej.\n'
              'Czy nadać nowy numer umowy?'@
           )
|| return()
?};
_fm:=exec('get_form','!ppl_zlc_ruzc');
{? _auto='1'
|| _nr:=exec('NR_ZC_1','%personel',ZC.P,_akt);
    ZC.NU:=_nr
|? _auto='2'
|| _nr:=exec('NR_ZC_2','%personel',ZC.P);
    ZC.NU:=_nr
|? _auto='I'
|| ($_fm)()
|| ''
?}


\auto
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: pobranie wartosci parametru automatycznej numeracji umow zlecen
::   WY: Staus parametru automatycznej numeracji umow zlecen
::       1 - wlaczony
::       0 - wylaczony
::----------------------------------------------------------------------------------------------------------------------
(exec('czytaj','#stalesys',,KST,'NR_ZC_AU'));
_auto:=KST.NR_ZC_AU;
_auto


\get_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: pobranie formatu numeracji umow zlecen ze stalych systemu
::   WY: format numeracji w postaci napisu, w przypadku braku ustawienia formatu, wynikiem bedzie format
::       NNNN/RRRR, gdzie NNNN oznacza kolejny numer, RRRR oznacza rok
::----------------------------------------------------------------------------------------------------------------------
(exec('czytaj','#stalesys',,KST,'NR_ZC_FM'));
_format:={? KST.NR_ZC_FM='' || '1' || KST.NR_ZC_FM ?};
_format


\zc_dzb_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Po redakcji Wartość daty końca zobowiązania umowy zlecenia.
::  OLD: \ae_zc_d_zb/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZC.DZB<ZC.DU
|| FUN.emsg('Data zobowiązania jest wcześniejsza od daty rozpoczęcia umowy.'@);
   0
|| 1
?}


\zc_dzb_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wartość daty końca umowy zlecenia.
::  OLD: \zc_dw/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZC.DZB<ZC.DW
|| ZC.DZB:=ZC.DW
?};
1

:Sign Version 2.0 jowisz:1045 2023/06/16 12:39:51 cc6ca6e15d9ebcba4bd7bff76d5dd2fc43e938c19df39de3afee40f9ee9a5ec08da80eb931f9dcf5a7e9a3e4c4b25c98fe09d540a26df9837f090378c56a674fe037e2e2384e31ed8914720605f5eb73b47d33ecf75b1c0b228148b82bcc0e3229c03984c010bea14067a3b9cf757757f5c0a58d9fc93887fd74cdd9f81c14b1
