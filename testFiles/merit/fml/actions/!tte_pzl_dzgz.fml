:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dzgz.fml
:: Utworzony: 09.06.2016
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DZGZ - Zlecenie na podstawie surowca technologii zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Główna formuła czynności tworzenia zlecenie na podstawie surowca zlecenia (TTE_PZL_DZGZ)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

:: WŁAŚCIWOŚCI CZYNNOŚCI
::# properties=SERVICE
::# permissions=ODDZ
::# parses=exec('parses','!tte_pzl_dzgz')

:: PARAMETRY WE:
::# kind=WE, symbol=TMAT, type=_TMAT, name=Surowiec technologii zlecenia, required=N, keyref=T
{? var_pres('TMAT',_in)<>type_of(~~) & var_pres('TMAT',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['TMAT','TTE_PZL_DZGZ'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
|? _in.TMAT=~~
|| _in.TMAT:=null()
?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności (OK, gdy zlecenie zostało poprawnie wygenerowane)", required=N
{? var_pres('RESULT',_out)<>type_of(~~) & var_pres('RESULT',_out)<>type_of('') || return() ?};

_dialog:=~_mp.isService() & ~_mp.isAutoRun();

{? _in.TMAT
||
   _dalej:=1;

:: Jeżeli nie jest półfabrykatem albo ma powiązany limit,
::                                to czynność zostaje zakończona z wynikiem 'BŁĄD' (w serwisie) lub pozostaje na ToDo
:: Jeżeli jest półfabrykatem, ale wg wartości parametru nie należy generować,
::                                  to czynność zostaje zakończona z wynikiem 'OK' (w serwisie) lub pozostaje na ToDo
:: Jeżeli już jest zlecenie, to czynność zostaje zawsze zakończona wynikiem 'OK',
   exec('tktl_cntx_psh','tech_common');
   _msk:=(8+ref_name(_in.TMAT))+3;
   exec('tktl_use','tech_common',_msk);
   TMAT.prefix();
   {? TMAT.seek(_in.TMAT)
   ||
      _in_zl:=exec('FindAndGet','#table',TMAT,TMAT.ref(),,"NRK().ZL",null());
      _in_rodzaj:=exec('top_rodzaj','zl_link',_in_zl);
      {? _in_zl=null()
      || _msg:='Błąd konfiguracji procesu — parametr %1 nie dotyczy technologii zlecenia.'@@['TMAT'];
         {? _dialog || FUN.emsg(_msg) ?};
         _mp.error(_msg);
         _dalej:=0

      |? _in_rodzaj<>'Z'
      || _msg:='Błąd konfiguracji procesu — parametr %1 nie dotyczy zlecenia w strukturze zlecenia złożonego.'@@['TMAT'];
         {? _dialog || FUN.emsg(_msg) ?};
         _mp.error(_msg);
         _dalej:=0

      || {? _mp.isService() | _mp.pathTodo()
         || exec('stop_tpar','tech_param');
            tpar:=obj_new(@.CLASS.TPAr);
            tpar.TABLE:=TPAR;
            tpar.INDEX:='NN';
            tpar.PREFIX:=TMAT.NRK;
::            tpar.KTM:=ZL.KTM;
            tpar.loadp()
         ?};
         {? TMAT.EXIST<>'' & TMAT.EXIST<>'1'
         || _exist:=tpar.calc(TMAT.EXIST)
         || _exist:=1
         ?};
         {? (TMAT.RKTL<>'' | TMAT.DFLT_KTL='T') & TMAT.LIMIT='T' & TMAT.MAG<>'T'
         || exec('openmask','zl_common',ZL.ref());

            {? TMAT.MAG<>'P'
            ||
::             Dla podzleceń raportowanych na magazyn nie sprawdzamy czy są limity
               ZLIM.index('RTMAT');
               ZLIM.prefix($TMAT.ref());
               {? ZLIM.first()
               || {? _mp.isService()
                  || _out.RESULT:='BŁĄD';
                     _mp.save(,_out);
                     _mp.done()
                  || {? _dialog || FUN.info('Do surowca wygenerowano zapotrzebowania — nie można utworzyć podzlecenia.'@) ?}
                  ?};
                  _dalej:=0
               ?}
            ?};
            {? _dalej>0
            || ZL.cntx_psh();
               ZL.index('TMAT_SRC');
               ZL.prefix(ZL.UNRZL,TMAT.ref());
               {? ZL.first()
               || _out.ZL:=ZL.ref();
                  _out.RESULT:='OK';
                  _mp.save(,_out);
                  {? _dialog || FUN.info('Zlecenie półfabrykatowe już istnieje.'@) ?};
                  _mp.done();
                  _dalej:=0
               |? _exist=0
               || {? _dialog
                  || {? ~FUN.ask('Wartości parametrów wykluczają generowanie zlecenia.\nCzy mimo to utworzyć zlecenie?'@)
                     || _dalej:=0
                     ?}
                  || _out.RESULT:='OK';
                     _mp.save(,_out);
                     _mp.done();
                     _dalej:=0
                  ?}
               ?};
               ZL.cntx_pop()
            ?}

         || {? _mp.isService()
            || _out.RESULT:='BŁĄD';
               _mp.save(,_out);
               _mp.done()
            || {? _dialog || FUN.info('Surowiec nie jest półfabrykatem — nie można utworzyć podzlecenia.'@) ?}
            ?};
            _dalej:=0
         ?}
      ?};
      exec('tktl_cntx_pop','tech_common')
   ?};

:: Generowanie
   {? _dalej
   || KOMM.init(,,'Generowanie zlecenia'@);
      _zl:=exec('generate','!tte_pzl_dzgz',_in.TMAT,{? _dialog || 'T' || 'N' ?});
      {? _dialog || KOMM.select() ?};
      {? _zl<>null()
      || _out.ZL:=_zl;
         _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()
      |? _mp.isService()
      || _out.RESULT:='BŁĄD';
         _mp.save(,_out);
         _mp.done()
      ?}
   ?}

|? _mp.pathProc()
|| ZL.cntx_psh();
   ZL.clear();
   _join:='join ZTP';
   _where:=
      'ZL.STAN=''O'' and '
      'ZTP.WP=''P'' and '
      'ZTP.TECH=''T'' and '
      'ZL.RODZAJ=''P'' and '
      'ZL.NRNZL<>0';
   ZL.f_set('SYM',_join,_where);
   exec('icons_slo_sl','zl_head');
   ZL.win_sel('SLO_SL');
   ZL.actions('SLO_SL','XY','W');
   {? ZL.select()
   || _env:=exec('env','zl_view');
      _env.ZL:=ZL.ref();
      params_set('env',_env);
      exec('tktl_cntx_psh','tech_common');
      exec('tktl_use','tech_common',(8+ZL.RTKTL)+3);
      {? ZL.RTKTL<>'' & TKTL.seek(ZL.RTKTL)
      || VAR.A_TPKTL:=TKTL.TYP;
         VAR.GRUPA:='N';
         _used:=0;
::       Wyświetlane zawsze wszystkie (bez prefixu)
         {? 1
::            TKTL.TYP().SUR='K'
         || exec('tmat_main','tech_mater',TKTL.ref(),null(),1,1,_used,0)
         || exec('menu_start','tech_head');
            exec('tree','tech_oper',4,~_used);
            exec('menu_stop','tech_head')
         ?}
      ?};
      exec('tktl_cntx_pop','tech_common')
   ?};
   ZL.f_clear();
   ZL.cntx_pop()

|| _msg:='Błąd konfiguracji procesu — parametr %1 musi być podany.'@@['TMAT'];
   {? _dialog || FUN.emsg(_msg) ?};
   _mp.error(_msg)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności tworzenia zlecenie na podstawie surowca zlecenia (TTE_PZL_DZGZ)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
{? type_of(_keyRefs)=type_of('')
|| _zl:=exec('FindAndGet','#table',TMAT,_keyRefs[1],,"NRK().ZL",null());
   _tmat:=exec('record','#to_string',_keyRefs[1]);
   _desc:='Utwórz podzlecenie na podstawie surowca %1 zlecenia %2'@@[_tmat,exec('record','#to_string',_zl)]
|| _desc:='Utwórz podzlecenie na podstawie surowca zlecenia'@@
?};
_desc


\action_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Modyfikacje -> Utwórz zlecenie' w oknie tabeli TMAT
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_DZGZ';
_args.UIDREF:=TMAT.uidref();
_args.AKCJA:='GENERUJ';
_args.PROC_START:='T';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'TMAT',TMAT.ref());

exec('mp_run','#b__box',_args);

:: Reinicjowanie zmiennej tpar
exec('start_tpar','tech_param',_env.BUF_ZL.KTM,_env.TKTL_ZL);
~~


\generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Generuje podzlecenie dla podanego surowca technologii zlecenia
::   WE: _a - TMAT.ref()
::       _b - _dialog (T/N)
::   WY: ZL.ref() / null()
::----------------------------------------------------------------------------------------------------------------------
_tmat:=_a;
_dialog:=_b;

_new_order:=null();
_grp_key:='';

exec('tktl_cntx_psh','tech_common');
_msk:=(8+ref_name(_tmat))+3;
exec('tktl_use','tech_common',_msk);

TMAT.prefix();
{? TMAT.seek(_tmat)
|| _new_order:=exec('gen_zl4tmat','zl_gen',TMAT.NRK().ZL,TMAT.ref(),_dialog,_grp_key)
?};

exec('tktl_cntx_pop','tech_common');

_new_order


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=0;

{? _mp.isService()
|| _zl:=exec('FindAndGet','#table',TMAT,_in.TMAT,,"NRK().ZL",null());
   _oddz:=exec('FindAndGet','#table',ZL,_zl,,"ODDZ",'');
   {? _oddz<>''
   || _result:=1;
      __PARSES.setVal('OddzialLogProd',_oddz);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=date()~1;
      _args.AM:=date()~2;
      __PARSES.setVal('OkresRok',_args)
   ?}
|| _result:=1
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 8fb29153509d24dd8daedea588e9d2971b2ad5b457034af00f2ad77cab1626556c0b60058ae0dc5570093678a503bdf3fcecc3de255d500beb3199da229776dfb7595cd5d5b20cc1c9d4f36e398194b82d41f007ee36804d52cd68c626e6302520ede4ea300efee16d7146a71b424125715a1125fffe262a1023141dff702b53
