:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_rek_drek.fml
:: Utworzony: 19.02.2021
:: Autor: TMW
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_REK_DREK - Rejestracja reklamacji klientów
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Formuła główna czynności TRE_REK_DREK - Rejestracja reklamacji klientów
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;
_auto:=_mp.isAutoRun();
_proc:=_mp.pathProc();
_todo:=_mp.pathTodo();

_autoEND:=_auto & (_proc | _todo);
_res:=null();
::# permissions=ODDZ

:: PARAMETRY WE:
::# kind=WE, symbol=REK_N, type=_REK_N, name=Reklamacja klienta, required=N, keyref=T
{? var_pres('REK_N',_in)<>type_of(~~) & var_pres('REK_N',_in)<>type_of(null()) || return() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=REK_N, type=_REK_N, name=Reklamacja klienta, required=N
{? var_pres('REK_N',_out)<>type_of(~~) & var_pres('REK_N',_out)<>type_of(null()) || return() ?};

:: Wyzwalacz, który po dodaniu nagłówka reklamacji:
:: - add/put: dodaje/aktualizuje rekord kluczowy utworzonej reklamacji
::   del: usuwa rekord kluczowy utworzonej reklamacji
:: - add/put: zapisuje parametr wyjściowy REK_N - wskazanie na utworzoną reklamację
::   del: zapisuje parametr wyjściowy REK_N - null()
:: - aktualizuje opis na ToDo
_mp.trigRef('REK_N',1,1,1,exec('kind_out','#b_port'),'REK_N');

BEER.SZ:='S';
_can_continue:=0;
_rek_n:=null();
{? _action='DOŁĄCZ' | _action='KOPIUJ' | _action='POPRAW' | _action='ZAKOŃCZ' | _action='USUŃ' | _proc | _autoEND
|| _can_continue:=1
|| _clean_result:=params_exec('clean','!tre_rek_drek');
   _can_continue:=_clean_result.RESULT;
   _rek_n:=_clean_result.REK_N
?};

{? _can_continue>0 & _rek_n=null() & _mp.akcja()<>'' & _context<>~~ & var_pres('REK_N',_context)>0
|| _rek_n:=_context.REK_N
|? _can_continue>0 & _autoEND
|| _rek_n:=_in.REK_N
?};

{? _can_continue>0
|| REK_N.cntx_psh();
   REK_N.index('DP');
   REK_N.prefix('S');

:: Odtwarzamy kontekst rekordu REK_N, jeżeli podany (rekord kluczowy albo kontekst)
   {? _rek_n<>null()
   || _find:=REK_N.seek(_rek_n)
   || _find:=0
   ?};

:: Numeracja zgłoszeń
   POM.TAB:='REK_N';
   POM.TYPDOK:='REK';

:: Akcja 'Dołącz' z obszaru roboczego
:: Uruchomienie ze startu procesów
:: Uruchomienie z listy zadań (bez przekazanego parametru wejściowego)
   {? (_action='DOŁĄCZ' | _proc | _todo & _rek_n=null())
   || _czy_num:=exec('nr_pola','numery');
      REK_N.blank();
      REK_N.SZ:='S';
      _opis:='';
      Plugin.run('REK_N_EDIT_001','add','blank');
      exec('rek_n_set_zmienne','reklamacje',0);
      exec('rek_n_win_edit_set','reklamacje');
      params_set('context',_context,'mp',_mp);
      {? _czy_num & REK_N.add()
      || _ref:=#REK_N.ref();
         {? exec('blk_lock','#table','REK_N',REK_N.name(),_ref)
         || REK_N.memo_set(_opis,'OPIS');
            Plugin.run('REK_N_EDIT_001','add','edit');
            {? REK_N.edit("exec('chk_rek_n','reklamacje')")
            || {? REK_N.NR=0
               || exec('fak_numer','numery','',0);
                  exec('znak','numery','REK_N')
               ?};
               {? REK_N.put(1)
               || {? REK_N.memo_put(,'OPIS')
                  || _res:=_out.REK_N:=REK_N.ref();
                     _mp.save(,_out);
                     {? REK_N.STAT_REJ='Z' || _mp.done() ?}
                  ?}
               ?}
            || oldnumer:=1;
               numer:=REK_N.NR;
               exec('nr_old','numery');
               REK_N.del();
               _mp.cancel()
            ?}
         ?};
         exec('blk_unlock','#table','REK_N',REK_N.name(),_ref)
      ?}

:: Akcja 'Zakończ' z obszaru roboczego
   |? _action='ZAKOŃCZ' | (_autoEND & _rek_n<>null())
   || {? exec('blk_lock','#table','REK_N',REK_N.ref(),,,'Reklamacja jest redagowana'@)
      || {? _autoEND | FUN.ask('Czy zakończyć rejestrację reklamacji %1?'@[REK_N.SYM])
         || REK_N.STAT_REJ:='Z';
            REK_N.ST:=exec('status_zarejestrowano','reklamacje');
            {? REK_N.put()
            || exec('desc_update','#b__box',REK_N.uidref());
               _out.REK_N:=REK_N.ref();
               _mp.save(,_out);
               _mp.done()
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REK_N',REK_N.ref())

:: Akcja 'Popraw' z obszaru roboczego
:: Uruchomienie z listy zadań (z przekazanym parametrem wejściowym)
   |? (_action='POPRAW' | _todo)
   || {? exec('blk_lock','#table','REK_N',REK_N.ref(),,,'Reklamacja jest redagowana'@)
      || exec('rek_n_set_zmienne','reklamacje',1);
         exec('rek_n_win_edit_set','reklamacje');
         REK_N.memo_get(,'OPIS',);
         _fap:=REK_N.FAK_POZ;
         _zrp:=REK_N.ZAM_ZRP;
         REKVAR.ILR:=REK_N.IL;
         params_set('context',_context,'mp',_mp);
         Plugin.run('REK_N_EDIT_001','put','edit');
         {? REK_N.edit("exec('chk_rek_n','reklamacje')")
         || {? REK_N.put()
            ||
::             korekta ilość na powiązanych dokumentach
               {? REK_N.IL<>REKVAR.ILR
               || REKVAR.ILR-=REK_N.IL;
                  {? _fap<>'' || exec('FindAndGet','#table',FAP,_fap,,"IL_RK-=REKVAR.ILR;put(1)",0) ?};
                  {? _zrp<>'' || exec('FindAndGet','#table',ref_tab(_zrp),_zrp,,"IL_RK-=REKVAR.ILR;put(1)",0) ?}
               ?};
               {? REK_N.memo_put(,'OPIS')
               || exec('desc_update','#b__box',REK_N.uidref());
                  _out.REK_N:=REK_N.ref();
                  _mp.save(,_out);
                  {? REK_N.STAT_REJ='Z' || _mp.done() ?}
               ?}
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REK_N',REK_N.ref())

:: Akcja 'Usuń' z obszaru roboczego
   |? _action='USUŃ'
   || _ref:=REK_N.ref();
      _rep:=REK_N.ref();
      _fap:=REK_N.FAK_POZ;
      _zrp:=REK_N.ZAM_ZRP;
      REKVAR.ILR:=REK_N.IL;
      REK_N.cntx_psh(); REK_N.prev(); _rep:=REK_N.ref(); REK_N.cntx_pop();
      {? exec('blk_lock','#table','REK_N',REK_N.name(),_ref,,'Reklamacja jest redagowana'@)
      || {? FUN.ask('Czy usunąć reklamację?'@)
         ||
::          Dodatkowe zabezpieczenie, jaby podczas czekania na odpowiedź, ktoś usunął rekord
            {? REK_N.seek(_ref)
            || do();
               {? exec('deleRekD','reklamacje',REK_N.ref())
               || oldnumer:=1;
                  numer:=REK_N.NR;
                  exec('nr_old','numery');
                  {? REK_N.del(,1)>0
                  || _res:=_rep;
                     {? _fap<>'' || exec('FindAndGet','#table',FAP,_fap,,"IL_RK-=REKVAR.ILR;put(1)",0) ?};
                     {? _zrp<>'' || exec('FindAndGet','#table',ref_tab(_zrp),_zrp,,"IL_RK-=REKVAR.ILR;put(1)",0) ?};
                     _mp.cancel()
                  ?}
               || undo()
               ?};
               end()
            || FUN.info('Reklamacja została już usunięta.'@);
               _mp.cancel()
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REK_N',REK_N.name(),_ref)

:: Tutaj nie powinno dojść, więc błąd
   || _msg:='Nieobsłużony kontekst wywołania czynności %1.'@@['TRE_REK_DREK'];
      FUN.emsg(_msg);
      _mp.error(_msg)
   ?};

   REK_N.cntx_pop();
   {? _res<>null() || {? REK_N.f_active() || REK_N.f_seek(_res) || REK_N.seek(_res) ?} ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Opis dla czynności rejestrowania reklamacji klienta (TRE_REK_DREK)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

_desc:='Zarejestruj reklamację klienta'@@;

:: jest rekord kluczowy to ustawiam odpowiedniego REK_N
{? var_pres('[1]',_keyRefs)=type_of('')
|| {? ref_tab(_keyRefs[1])=REK_N
   || _tmp:=exec('FindAndGet','#table',REK_N,_keyRefs[1],,"SYM",'');
      _desc:={? _tmp<>'' || 'Zakończ rejestrację reklamacji klienta: %1'@@[_tmp] || '' ?}
   ?}
?};
_desc


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [21.14]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=1;
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby w zależności od stanu rekordu zrobi done
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

_can_continue:=1;
_obj:=obj_new('RESULT','REK_N');
_obj.RESULT:=0;
_obj.REK_N:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? (5+ref_name(_kref))=(5+REK_N.name())
         || _obj.REK_N:=exec('FindAndGet','#table',REK_N,_kref,,,null());

            {? _obj.REK_N=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego z reklamacją, więc robię error
               _can_continue:=0;
               exec('rek_n_deleted_in_proc','reklamacje',_mp)
            ||
::             Sprawdzenie statusu rejestracji reklamacji, jeżeli różny od 'new', to popychanie
               _stat_new:='N';
               _stat_rej:=exec('FindAndGet','#table',REK_N,_obj.REK_N,,"STAT_REJ",_stat_new);
               {? _stat_rej<>_stat_new
               || _can_continue:=0;
                  {? _mp.isService()=0 & _mp.CLEANER=0
                  || FUN.info('Reklamacja została już zakończona.'@)
                  ?};
                  _out.REK_N:=_obj.REK_N;
                  _mp.save(,_out);
                  _mp.done()
               ?}
            ?}
         ?}
      ||
::       Nie znaleziono rekordu kluczowego powiązanego z reklamacją, więc nic nie robię
::         _can_continue:=0;
::         exec('rek_n_deleted_in_proc','reklamacje',_mp);
         ~~
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy REM_ZGL
   {? _obj.REK_N=null() & var_pres('REK_N',_in)=type_of(null())
   || _obj.REK_N:=_in.REK_N
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:54 3f0583ff67a531a320a51a5a7ed250361c9d5e88a877f3eb90d96d602ca00c327eee7d4dd37037cbc1e3034014ebcc3ddbbda436da0957ff52a572a50f3248c5e5778d5735225a2b69db150a7d22c4591fe4065b639f58ad9db88c1fb405f301afec58391dd509df73eb3992033d2186277607c253eac8022806e04ef9aa440d
