:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_ordi.fml
:: Utworzony: 24.02.2020
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły czynności PKD_EZK_ORDI - Rej. dodatkowych informacji.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Rej. dodatkowych informacji - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP
::# permissions=F_ZATR,UD_SKL
::
::# access=exec('run_cond_p','pkd')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=SLO_KOD, type=_SLO_KOD, name=Wskazanie typu informacji,  required=T, keyref=T, ^
::#          fml_val="exec('slo_kod_fml_val','ext_slo','P_DODINF',_a)", ^
::#          fml_exp="exec('slo_kod_fml_exp','ext_slo',_a)"
::
::# kind=WY, symbol=P_DODINF, type=_P_DODINF, name=Wskazanie informacji dodatkowej, required=N
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_akcja:=_mp.akcja();
_context:=_par.context;

_result:='';
_done:=0;

_p_uid:=exec('ref2uid','#table',_in.P);
_slo_uid:=exec('ref2uid','#table',_in.SLO_KOD);

{? _p_uid=''
|| _result:=exec('error','!pkd_ezk_ordi','P')

|? _slo_uid=''
|| _result:=exec('error','!pkd_ezk_ordi','SLO_KOD')

|? _mp.loop()
:: Kolejny obrót pętli - odzyskajmy klucz grupujący.
:: Właściwie moglibyśmy odwołać się wyłącznie do _in.GRPKEY. Ale dla zgodności zastosujemy zapis standardowy.
|| _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);
:: Nie zapisujemy parametrów wyjściowych, bo zrobimy to przy obsłudze _done=1.
   _done:=1


|| {? ~_mp.isMicro()
::    Zabawa z obsługą pętli nie ma sensu dla mikroczynności.
::    Ustalenie klucza grupującego.
::    Właściwie moglibyśmy odwołać się wyłącznie do _out.GRPKEY. Ale dla zgodności zastosujemy zapis standardowy.
   || _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);
      _mp.save(,_out)
   ?};

   {? _mp.pathTodo()
   || _ret:=params_exec('select','!pkd_ezk_ordi',_p_uid,_slo_uid);
      {? type_of(_ret)=type_of('')
      || _result:=_ret
      |? _ret
      || _done:=1
      || _mp.keep()
      ?}

::    Obsługa akcji - wywołania wyłącznie z obszaru roboczego.  --------------------------------------------------------

   |? _akcja='DOŁĄCZ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('p_dodinf_dolacz','!pkd_ezk_ordi',_p_uid,_slo_uid);
      {? +_ret=48
      || _context.P_DODINF:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='POPRAW'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('p_dodinf_popraw','!pkd_ezk_ordi',_p_uid,_slo_uid,_context.P_DODINF);
      {? +_ret=48
      || _context.P_DODINF:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='USUŃ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('p_dodinf_usun','!pkd_ezk_ordi',_p_uid,_slo_uid,_context.P_DODINF,_mp.isGroup());
      {? +_ret=48
      || _context.P_DODINF:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyDel(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='ZAKOŃCZ'
   || _done:=1

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}
?};

{? _done
|| P_DODINF.cntx_psh();
   P_DODINF.prefix();
   do();
   _grpkey:=_mp.grpkeyGet();
   {? _grpkey<>~~
   || {? P_DODINF.seek(_grpkey)
      || _out.P_DODINF:=P_DODINF.ref();
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};
   _mp.done();
   end();
   P_DODINF.cntx_pop()
?};

{? _result<>''
:: Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Rej. dodatkowych informacji - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_tab:=exec('desc','pracownik',_mp);
_sloKod:='';

SLO_KOD.cntx_psh();
SLO_KOD.prefix();
{? type_of(_in.SLO_KOD)=type_of(null()) & _in.SLO_KOD<>null() & SLO_KOD.seek(_in.SLO_KOD)
|| _mp.keyRef(SLO_KOD.uidref(),0,0);
   _sloKod:=SLO_KOD.KOD
?};
SLO_KOD.cntx_pop();

{? _tab.ZAW_DANE='T'
|| {? +_sloKod
   || {? _tab.OBCY='T'
      || 'Zarejestruj informacje dodatkowe (%1): %2 %3: Paszport - %4, Numer teczki - %5, Identyfikator - %6'@@
            [_sloKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
      |? +_tab.PESEL
      || 'Zarejestruj informacje dodatkowe (%1): %2 %3: PESEL - %4, Numer teczki - %5, Identyfikator - %6'@@
            [_sloKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
      || 'Zarejestruj informacje dodatkowe (%1): %2 %3: Data urodzenia - %4, Numer teczki - %5, Identyfikator - %6'@@
            [_sloKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
      ?}
   || {? _tab.OBCY='T'
      || 'Zarejestruj informacje dodatkowe: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
      |? +_tab.PESEL
      || 'Zarejestruj informacje dodatkowe: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
      || 'Zarejestruj informacje dodatkowe: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
      ?}
   ?}
|| 'Zarejestruj informacje dodatkowe'@@
?}


\setPorts
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła ustawia (dodatkowe) wymagane parametry wejściowe dla czynności uruchamianej z obszaru roboczego.
::   WE: _a [OBJECT] - Obiekt z parametrami zgodny z exec('mp_run_a','#b__box').
::   WY: 1 - Parametr został ustawiony poprawnie.
::       0 - Parametru nie udało się ustawić.
::      -1 - Błędny argument wywołania.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(obj_new('obj'))
|| exec('portsInSet','#b__box',_a.PORTS_IN,_a.ACT_UID,'SLO_KOD',SLO_KOD.ref())
|| -1
?}


\p_dodinf_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli P_DODINF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_dodinf_chk','!pkd_ezk_ordi',0)


\p_dodinf_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli P_DODINF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('p_dodinf_chk','!pkd_ezk_ordi',1)


\p_dodinf_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli P_DODINF.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;

P.cntx_psh();
P.prefix();
SLO_RODZ.cntx_psh();
SLO_RODZ.prefix();
_ret:=__CHK.validate(P_DODINF,
   $("_a.table(_b,"+$_put+",,'P','RODZ','OD','TRESC')"),
   "  {? P_DODINF.OD<P.DZA
      || FUN.info('""%1"" nie może być wcześniejsza niż %2.'@ [MS.name(P_DODINF,'OD'),P_DODINF.P().DZA$2] );
         P_DODINF.OD:=P.DZA;
         'OD'
      || ''
      ?}
   ",
   "  _d0:=date(0,0,0);
      {? P_DODINF.DO<>_d0 & P_DODINF.OD>P_DODINF.DO
      || FUN.emsg('""%1"" nie może byc wcześniejsza niż ""%2"".'@ [ MS.name(P_DODINF,'DO'),MS.name(P_DODINF,'OD')]);
         'DO'
      || ''
      ?}
   ",
   $("{? P_DODINF.RODZ().UNIKALNY='T'
      || _put:="+$_put+";
         SLO_KOD.cntx_psh();
         SLO_KOD.prefix();
         SLO_RODZ.cntx_psh();
         SLO_RODZ.prefix();
         _ret:=exec('check','overlap',{? _put || P_DODINF.ref() || null() ?},_b,,,2,,,'PTR',
            P.ref(),P_DODINF.RODZ().SLO_KOD().ref(),P_DODINF.RODZ().KOD
         );
         SLO_RODZ.cntx_pop();
         SLO_KOD.cntx_pop();
         {? _ret=''
         || ''
         || FUN.info(_ret);
            'OD'
         ?}
      || ''
      ?}
   ")
);
P.cntx_pop();
SLO_RODZ.cntx_pop();
_ret


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Słownik komunikatów o błędach.
::   WE: [_a] [STRING] - Kod komunikatu.
::   WY: Treść komunikatu o błędzie.
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || _a || '' ?};

'Rejestrowanie informacji dodatkowych niemożliwe.'@+'\n'+
{? _kod='P'
|| 'Nie znaleziono pracownika.'@
|? _kod='SLO_KOD'
|| 'Nie znaleziono typu informacji.'@
|? _kod='P_DODINF_put'
|| 'Nie znaleziono dodatkowej informacji do poprawienia.'@
|? _kod='P_DODINF_del'
|| 'Nie znaleziono dodatkowej informacji do usunięcia.'@
|| 'Wystąpił nieprzewidziany błąd.'@
?}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa czynności wywołanej z listy zadań.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::       _b [STRING] - Wskazanie (uidref) typu informacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| {? var_pres('_b')=type_of('') & +_b=48 & SLO_KOD.seek(_b)
   || params_set(params_get());
      P_DODINF.cntx_psh();
      P_DODINF.index('PTR');
      P_DODINF.prefix(P.ref(),SLO_KOD.ref());
      P_DODINF.win_sel(exec('wnd','!pkd_ezk_ordi'));
      P_DODINF.win_edit('RED');
      P_DODINF.win_patt('RED');
      _ret:=P_DODINF.select();
      P_DODINF.cntx_pop()
   || _ret:=exec('error','!pkd_ezk_ordi','SLO_KOD')
   ?}
|| _ret:=exec('error','!pkd_ezk_ordi','P')
?};
P.cntx_pop();
_ret


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Przygotowanie grupowego okna wertowania z dodatkowymi informacjami.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';

_czyZ:=exec('dest','f_zatr',P.F_ZATR,'KOD')='Z';
_before:=
   {? _czyZ
   || "mb_exec('GRP_EDISP_P_INFO_Z')"
   || "mb_exec('GRP_EDISP_P_INFO_P')"
   ?};

_wnd:=P_DODINF.grp_make('Dodatkowe informacje'@,_before,'pdodinf_weri',,,,,_mode);
P_DODINF.grp_edit(_wnd,P,{? _czyZ || 'INFO_Z' || 'INFO_P' ?},,,,,,_mode);
P_DODINF.grp_splt(_wnd,,'horizontal','pdodinf');
P_DODINF.grp_sel(_wnd,,'WER',,,,,,,,,,_mode,,1);

_wnd


\_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Formuła zwraca argumenty wymagane do uruchomienia czynności.
::   WE:
::   WY: Obiekt z parametrami zgodny z exec('mp_run_a','#b__box') z uzupełnionymi wybranymi polami.
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='PKD_EZK_ORDI';
_args.UIDREF:=obj_new(2);
_args.UIDREF[1]:=P.uidref();
_args.UIDREF[2]:=SLO_KOD.uidref();
_args.CONTEXT:=obj_new('P_DODINF');
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'P',P.ref());
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'SLO_KOD',SLO_KOD.ref());
_args


\p_dodinf_act_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli P_DODINF.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli P_DODINF z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli P_DODINF jako składowa okna grupowego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=P_DODINF
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   {!
   |? _ret:=exec('p_dodinf_dolacz','!pkd_ezk_ordi',P.uidref(),SLO_KOD.uidref());
      {? +_ret=48
      || _mp.grpkeyAdd(_ret);
         1
      |? _ret<>''
      || FUN.emsg(_ret);
         0
      ?}
   !}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('_args','!pkd_ezk_ordi');
   _args.AKCJA:='DOŁĄCZ';
   {!
   |? _args.CONTEXT.P_DODINF:='';
      exec('mp_run','#b__box',_args);
      {? type_of(_args.CONTEXT.P_DODINF)=type_of('') & +_args.CONTEXT.P_DODINF=48
      || _loop:=P_DODINF.seek(_args.CONTEXT.P_DODINF);
         win_disp();
         _loop
      ?}
   !}
?};
~~


\p_dodinf_act_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Popraw - przed" w oknach wertowania tabeli P_DODINF.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli P_DODINF z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli P_DODINF jako składowa okna grupowego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=P_DODINF
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('p_dodinf_popraw','!pkd_ezk_ordi',P.uidref(),SLO_KOD.uidref(),P_DODINF.uidref());
   {? +_ret=48
   || _mp.grpkeyAdd(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('_args','!pkd_ezk_ordi');
   _args.AKCJA:='POPRAW';
   _args.CONTEXT.P_DODINF:=P_DODINF.uidref();
   exec('mp_run','#b__box',_args)
?};
~~


\p_dodinf_act_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Usuń - grupa przed" w oknach wertowania tabeli P_DODINF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ask','#table')


\p_dodinf_act_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Usuń - przed" w oknach wertowania tabeli P_DODINF.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli P_DODINF z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli P_DODINF jako składowa okna grupowego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=P_DODINF
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('p_dodinf_usun','!pkd_ezk_ordi',P.uidref(),SLO_KOD.uidref(),P_DODINF.uidref());
   {? +_ret=48
   || _mp.grpkeyDel(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('_args','!pkd_ezk_ordi');
   _args.AKCJA:='USUŃ';
   _args.CONTEXT.P_DODINF:=P_DODINF.uidref();
   _args.GRUPA:={? P_DODINF.sel_size() || 'T' || 'N' ?};
   exec('mp_run','#b__box',_args)
?};
~~


\p_dodinf_act_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Zakończ" w oknach wertowania tabeli P_DODINF.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli P_DODINF z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli P_DODINF jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=P_DODINF
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| sel_exit()

:: Jeżeli wywołanie z obszaru, to zawsze procesowo. Dobrze jest skorzystać z maszynki obszarowej - odświeży odpowiednie
:: okna. Wymaga to jednak (w tym wypadku) \setPorts.
|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\p_dodinf_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe dołączanie rekordu do tabeli P_DODINF.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::       _b [STRING] - Wskazanie (uidref) typu informacji.
::   WY: Komunikat o błędzie lub uidref dołączonego rekordu lub ''.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| SLO_TYP.cntx_psh();
   SLO_TYP.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & SLO_KOD.seek(_b)
   || SLO_RODZ.cntx_psh();
      SLO_RODZ.prefix();
      SLO_RODZ.win_dict('SLO');
      P_DODINF.cntx_psh();
      P_DODINF.prefix();
      P_DODINF.win_edit('RED');
      P_DODINF.blank();
      P_DODINF.memo_set(,'NOTATKA');
      {? P_DODINF.edit("exec('p_dodinf_chk','!pkd_ezk_ordi',0)") & P_DODINF.add() & P_DODINF.memo_put(,'NOTATKA')
      || _ret:=P_DODINF.uidref()
      ?};
      SLO_RODZ.cntx_pop();
      P_DODINF.cntx_pop()
   || _ret:=exec('error','!pkd_ezk_ordi','SLO_KOD')
   ?};
   SLO_KOD.cntx_pop();
   SLO_TYP.cntx_pop()
|| _ret:=exec('error','!pkd_ezk_ordi','P')
?};
P.cntx_pop();

_ret


\p_dodinf_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe poprawienie rekordu do tabeli P_DODINF.
::   WE: _a [STRING] - Wskazanie (uidref) pracownika.
::       _b [STRING] - Wskazanie (uidref) typu informacji.
::       _c [STRING] - Wskazanie (uidref) poprawianego rekordu informacji dodatkowych.
::   WY: Komunikat o błędzie lub uidref poprawionego rekordu lub ''.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| SLO_TYP.cntx_psh();
   SLO_TYP.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & SLO_KOD.seek(_b)
   || SLO_RODZ.cntx_psh();
      SLO_RODZ.prefix();
      SLO_RODZ.win_dict('SLO');
      P_DODINF.cntx_psh();
      P_DODINF.prefix();
      P_DODINF.win_edit('RED');
      {? var_pres('_c')=type_of('') & +_c=48 & P_DODINF.seek(_c) &
         P_DODINF.P=P.ref() & P_DODINF.RODZ().SLO_KOD=SLO_KOD.ref()
      || P_DODINF.memo_get(,'NOTATKA');
         {? P_DODINF.edit("exec('p_dodinf_chk','!pkd_ezk_ordi',1)") & P_DODINF.put() & P_DODINF.memo_put(,'NOTATKA')
         || _ret:=P_DODINF.uidref()
         ?}
      || _ret:=exec('error','!pkd_ezk_ordi','P_DODINF_put')
      ?};
      P_DODINF.cntx_pop();
      SLO_RODZ.cntx_pop()
   || _ret:=exec('error','!pkd_ezk_ordi','SLO_KOD')
   ?};
   SLO_KOD.cntx_pop();
   SLO_TYP.cntx_pop()
|| _ret:=exec('error','!pkd_ezk_ordi','P')
?};
P.cntx_pop();

_ret


\p_dodinf_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe usunięcie rekordu do tabeli P_DODINF.
::   WE:  _a  [STRING] - Wskazanie (uidref) pracownika.
::        _b  [STRING] - Wskazanie (uidref) typu informacji.
::        _c  [STRING] - Wskazanie (uidref) usuwanego rekordu informacji dodatkowych.
::       [_d] [NUMBER]   - Pomijać pytanie o usunięcie [0*/1].
::   WY: Komunikat o błędzie lub uidref usuniętego rekordu lub ''.
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

P.cntx_psh();
P.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & P.seek(_a)
|| SLO_TYP.cntx_psh();
   SLO_TYP.prefix();
   SLO_KOD.cntx_psh();
   SLO_KOD.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & SLO_KOD.seek(_b)
   || SLO_RODZ.cntx_psh();
      SLO_RODZ.prefix();
      P_DODINF.cntx_psh();
      P_DODINF.prefix();
      {? var_pres('_c')=type_of('') & +_c=48 & P_DODINF.seek(_c) &
         P_DODINF.P=P.ref() & P_DODINF.RODZ().SLO_KOD=SLO_KOD.ref()
      || {? (var_pres('_d')=type_of(0) & _d) | exec('del_ask','#table')
         || {? P_DODINF.del(1,1)
            || _ret:=_c
            ?}
         ?}
      || _ret:=exec('error','!pkd_ezk_ordi','P_DODINF_del')
      ?};
      P_DODINF.cntx_pop();
      SLO_RODZ.cntx_pop()
   || _ret:=exec('error','!pkd_ezk_ordi','SLO_KOD')
   ?};
   SLO_KOD.cntx_pop();
   SLO_TYP.cntx_pop()
|| _ret:=exec('error','!pkd_ezk_ordi','P')
?};
P.cntx_pop();

_ret


\p_dodinf_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Po redakcji rekordu tabeli P_DODINF. Weryfikacja poprawnosci.
::   WE:
::   WY: Akronim pola: niewypelnionego lub do poprawy.
::----------------------------------------------------------------------------------------------------------------------
exec('p_dodinf_chk','!pkd_ezk_ordi',-menu_txt()='popraw')

:Sign Version 2.0 jowisz:1045 2021/09/17 15:16:59 0a12a8983e3d95f10d74342d44b3049b27a0cbf869220856a6445f25b60d2257c78370e3ef065028ab7365bd3f8c2fdae81c911d979a58b585106868b18222865745ab5b386d2ff283129613c4b8020926350a46b5f8f506074b47108ddc5aac9e7a5b9fb1b0e79ffa87f0568bdf209cc4dfdea6307fe0b016d25e493a805d76
