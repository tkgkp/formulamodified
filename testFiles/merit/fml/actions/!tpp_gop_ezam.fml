:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tpp_gop_ezam.fml
:: Utworzony: 24.04.2023
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Formuły czynności TPP_GOP_EZAM - Zamknięcie grupy operacji
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła główna czynności zamknięcia grupy operacji (TPP_GOP_EZAM)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

_uid:='TPP_GOP_EZAM';

::# properties=SERVICE
::# parses=exec('parses','!tpp_gop_ezam')
::# permissions=ODDZ

:: PARAMETRY WE:
::# kind=WE, symbol=GROP, type=_GROP, name=Wskazanie na grupę operacji, required=N, keyref=T
{? var_pres('GROP',_in)<>type_of(~~) & var_pres('GROP',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2'@@['GROP',_uid];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('GROP',_in)=type_of(~~) || _in.GROP:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=GROP, type=_GROP, name=Wskazanie na grupę operacji, required=N
{? var_pres('GROP',_out)<>type_of(~~) & var_pres('GROP',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności (OK, BŁĄD)", required=N

_result:=0;
_can_continue:=1;

GROP.cntx_psh(); GROP.clear();

_clean_result:=params_exec('clean','!tpp_gop_ezam');
_can_continue:=_clean_result.RESULT;
_grop:=_clean_result.GROP;

{? _can_continue>0
||
:: Jeśli nadal null to patrzę czy grupa przekazana kontekstem
   {? _grop=null() & type_of(_context)>100 & var_pres('GROP',_context)=type_of(null())
   || _grop:=_context.GROP
   ?}
?};

{? _can_continue>0 & _grop<>null()
|| _can_continue:=GROP.seek(_grop)
|| _can_continue:=0
?};
{? _can_continue>0
||
   _mp.keyRef(GROP.uidref());

   _ask:=1;
   _komm:=1;
   {? _mp.isAutoRun()
   || _ask:=0
   |? _mp.isService()
   || _ask:=0;
      _komm:=0
   ?};
   {? _mp.isGroup()
   || _ask:=0;
      _komm:=0
   ?};

:: WSTĘPNA WALIDACJA
:: Sprawdzenie czy została już zamknięta
   {? GROP.STATUS='Z'
   || _can_continue:=0;
      {? _komm || KOMM.init(250,,'Zamknięcie grupy operacji'@) ?};
      exec('komm_add','zl_common','Grupa jest już zamknięta.'@,1,,,1);
      {? _komm || KOMM.select() ?};
      _mp.save(exec('kind_out','#b_port'),'GROP',GROP.ref());
      {? _mp.isService()
      || _mp.save(exec('kind_out','#b_port'),'GROP',GROP.ref());
         _mp.save(exec('kind_out','#b_port'),'RESULT','OK');
         _mp.done()
      || _mp.done()
      ?}
   ?}
?};

{? _can_continue>0
||
:: Faktyczne zamknięcie: automatycznie (serwisowo) z procesu
   {? _mp.isService()
   || _result:=exec('grop_close','!tpp_gop_ezam',GROP.ref(),0,1,_mp.isGroup())
:: Faktyczne zamknięcie: automatycznie z procesu
:: - w przypadku niezgodności wyświetla raport w KOMM i zostaje na TODO
   |? _mp.isAutoRun()
   || _result:=exec('grop_close','!tpp_gop_ezam',GROP.ref(),0,1,_mp.isGroup())
:: Faktyczne zamknięcie: przycisk w oknie TODO, funkcja w oknie selekcji grup
:: - w przypadku niezgodności wyświetla pełny raport, można zdecydowac o zamknięciu
   |? _mp.akcja()='ZAMKNIJ' | _mp.pathProc()>0
   || _result:=exec('grop_close','!tpp_gop_ezam',GROP.ref(),~_mp.isGroup(),~_mp.isGroup(),_mp.isGroup())

:: Obsługa z TODO - wyświetlam okno umożliwiające podglądy różnych rzeczy dot. grupy
:: Faktyczne zamknięcie dopiero po uruchomieniu funkcji 'Zamknij' w tym oknie
   |? _mp.pathTodo()
   ||
      {? _can_continue>0
      || _win:=exec('grop_display_red_full','zl_grop',1);
         GROP.win_edit(_win);
         _mp.keep();
         GROP.display();
         ~~
      ?}
   ?};

   {? _result>0 | _mp.isMicro()
   || _mp.save(exec('kind_out','#b_port'),'GROP',GROP.ref());
      {? _mp.isService()
      || _mp.save(exec('kind_out','#b_port'),'RESULT','OK');
         _mp.done()
      || _mp.done()
      ?}
   |? _mp.isService()
   || _mp.save(exec('kind_out','#b_port'),'GROP',GROP.ref());
      _mp.save(exec('kind_out','#b_port'),'RESULT','BŁĄD');
      _mp.done()
   ?}
?};
GROP.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Opis dla czynności zamknięcia zlecenia (TPP_GOP_EZAM)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiedni GROP
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',GROP,_keyRefs[1],,"KOD",'');
   _desc:={? _tmp<>'' || 'Zamknij grupę operacji %1'@@[_tmp] || '' ?}
|| _desc:='Zamknij grupę operacji'@@
?};
_desc


\action_close
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja Zamknij dla grup operacji
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TPP_GOP_EZAM';
_args.UIDREF:=GROP.uidref();
_args.AKCJA:='ZAMKNIJ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('GROP'); _args.CONTEXT.GROP:=GROP.ref();
{? GROP.sel_size()>0
|| _args.GRUPA:='T'
?};
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'GROP',GROP.ref());

exec('mp_run','#b__box',_args);

~~


\action_close_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja grupa przed 'Zamknij' w oknach wertowania
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Czy zamknąć wybrane grupy operacji?'@)
|| _result:=1;
   KOMM.init(200,,'Zamknięcie grup operacji'@,'')
?};
sel_nchk();
_result


\action_close_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Akcja grupa po 'Zamknij' w oknach wertowania
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
GROP.f_rfresh();
~~


\grop_close
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Zamyka grupę operacji
::   WE: [_a] - GROP.ref() - ref grupy lub bieżące zlecenie
::       [_b] - INTEGER - 0/[1] - czy wyświetlać pytania
::       [_c] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::       [_d] - INTEGER - [0]/1 - czy uruchomienie dla grupy rekordów
::   WY: 0/1
::  OLD: \grop_close/gr_oper.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(GROP.ref()) || _ref:=_a || _ref:=null() ?};
{? var_pres('_b')=type_of(0) || _ask:=_b || _ask:=1 ?};
{? var_pres('_c')=type_of(0) || _komm:=_c || _komm:=1 ?};
{? var_pres('_d')=type_of(0) || _isgroup:=_d || _isgroup:=0 ?};

_result:=0;
_can_continue:=1;

GROP.cntx_psh();
{? _ref<>null()
|| GROP.prefix();
   {? GROP.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? _komm>0
   || KOMM.init(250,,'Zamknięcie grupy operacji'@)
   ?};

   {? GROP.STATUS='O'
   || _del_plan:=exec('get','#params',500391)='T';
::    Kontrola zamknięcia grupy
      _kontr:=exec('kontr_zamk','zl_common',{? _ask || 'R' || 'A' ?},0,1);
      {? _kontr=2
      || _ok:=1
      |? _kontr=1
      || {? _ask>0
         || {? GROP.PLAN_PX<>'N' | GROP.PLAN_PO='T'
            || _msg:='Grupa operacji zaplanowana, czy na pewno zamknąć?'@;
               {? _del_plan
               || _msg:='Grupa operacji zaplanowana, czy na pewno zamknąć?\n'
                        'Podczas zamykania grupy zostanie ona usunięta ze wszystkich planów produkcji.'@
               ?};
               _ok:=FUN.ask(_msg)
            || _ok:=FUN.ask('Czy zamknąć grupę operacji?'@)
            ?}
         || _ok:=1
         ?}
      || _ok:=0
      ?};

      {? _ok>0
      || _can_continue:=0;

         _ref:=GROP.ref();
         {? ~_isgroup & GROP.f_active()>0
         || GROP.cntx_psh(); {? GROP.f_prev() || _prev:=GROP.ref() || _prev:=null() ?}; GROP.cntx_pop();
            GROP.cntx_psh(); {? GROP.f_next() || _next:=GROP.ref() || _next:=null() ?}; GROP.cntx_pop()
         ?};

         GROP.cntx_psh();
         GROP.clear();

         GROP.STATUS:='Z';
         {? GROP.put()
         || _can_continue:=1
         ?};

         {? _can_continue>0
         || GROPS.cntx_psh();
            GROPS.index('GROP');
            GROPS.prefix(GROP.ref());
            {? GROPS.first()
            || {!
               |?
::                Put robiony w celu aktualizacji PROD_REJ
                  GROPS.put(,1);
                  GROPS.next()
               !}
            ?};
            GROPS.cntx_pop()
         ?};

::       Usuwanie rezerwacji
         {? _can_continue>0
         ||
::         exec('usurez','zamsiw_limit',ZL.ref(),null(),1);
            exec('ZlecZK_Ns2Arch','!tpp_gop_dred',GROP.ref());
::         exec('zl_delete_rez','zl_common',ZL.ref());
            ~~
         ?};

::       Oznaczenie surowców w zamkniętej grupie operacji - usunięcie z planu dostaw
         {? _can_continue>0
         || ZLIM.cntx_psh();
            ZLIM.index('GROPNM');
            ZLIM.prefix(GROP.ref());
            {? ZLIM.first()
            || {!
               |? {? ZLIM.LIMIT='T' & ZLIM.AKC='N' | ZLIM.LIMIT='N'
                  || ZLIM.AKC:='Z';
                     ZLIM.put()
                  ?};
                  ZLIM.next()
               !}
            ?};
            ZLIM.cntx_pop()
         ?};

::       Aktualizacja obiektu do planu
         {? _can_continue>0 & exec('get','#params',500390)='T'
         || exec('grop2obj','px_obj')
         ?};

::       Usuwanie grupy z planu
         {? _del_plan>0 & _can_continue>0
         || exec('delete_plan','px_grop',,1,1);
            ~~
         ?};

         {? _can_continue>0
         || _result:=1
         ?};

         GROP.cntx_pop();
         {? ~_isgroup & GROP.f_active()>0
         || GROP.f_rfresh();
            {? ~GROP.f_seek(_ref) || {? ~GROP.f_seek(_prev) || GROP.f_seek(_next) ?} ?}
         ?}
      ?}
   || _result:=1;
      exec('komm_add','zl_common','Grupa jest już zamknięta.'@,1,,,1)
::      FUN.info('Grupa operacji jest zamknięta'@)
   ?};
   {? _komm>0 & _result>0
   || KOMM.select()
   ?}
?};
GROP.cntx_pop();
_result


\grop_open
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Otwiera grupę operacji
::----------------------------------------------------------------------------------------------------------------------
{? GROP.STATUS='O'
|| {? VAR.GRUPA='T'
   || exec('komm_add','zl_common','Grupa jest już otwarta.'@,1,,,1)
   || FUN.info('Grupa operacji jest otwarta.'@)
   ?}
|| {? VAR.GRUPA='T' | FUN.ask('Czy przywrócić grupę operacji do otwartych?'@)
   || _planned:=0;
      _can_continue:=0;

      _ref:=GROP.ref();
      {? VAR.GRUPA<>'T'
      || GROP.cntx_psh(); {? GROP.f_prev() || _prev:=GROP.ref() || _prev:=null() ?}; GROP.cntx_pop();
         GROP.cntx_psh(); {? GROP.f_next() || _next:=GROP.ref() || _next:=null() ?}; GROP.cntx_pop()
      ?};

      GROP.cntx_psh();
      GROP.clear();

      GROP.STATUS:='O';
      {? GROP.put()
      || _can_continue:=1
      ?};

      {? _can_continue>0
      || GROPS.cntx_psh();
         GROPS.index('GROP');
         GROPS.prefix(GROP.ref());
         {? GROPS.first()
         || {!
            |? {? GROPS.PLAN='T' || _planned:=1 ?};
               GROPS.put(,1);
               GROPS.next()
            !}
         ?};
         GROPS.cntx_pop()
      ?};

::    Przywracanie zamówień wewnętrznych z archiwum
      {? _can_continue>0
      || ZLIM.cntx_psh();
         ZLIM.index('GROPNM');
         ZLIM.prefix(GROP.ref(),'T');
         {? ZLIM.first()
         ||
            exec('RestZK_fArch','!tpp_gop_dred',GROP.ref());
            {? GROP.STATUS='O' || exec('ZK_N_4_ZL_aKC','zamsiw_nag',null(),'T',GROP.ref()) ?};
            VAR.A_GROP:=GROP.ref();
            _rezerw:=exec('get','#params',500008,2)='T';
            {? _rezerw
            || {!
               |? {? ZLIM.SO='S' & ZLIM.KOR=0 & ZLIM.AKC='T'
                  || ZLIM.cntx_psh();
                     ZLIM.index('GROPKM');
                     ZLIM.prefix(ZLIM.GROP,ZLIM.LIMIT,ZLIM.NR);
                     _kor:=0;
                     {? ZLIM.first() || {! |? _kor+=ZLIM.LIL; ZLIM.next() !} ?};
                     ZLIM.cntx_pop();
                     VAR.ZLIM_KOR:=ZLIM.LIL+_kor;
                     exec('rezerwuj','zamsiw_limit',-1)
                  ?};
                  ZLIM.next()
               !}
            ?}
         ?};
         ZLIM.cntx_pop()
      ?};

::    Oznaczenie surowców w otwartej grupie operacji - przywrócenie do planu dostaw
      {? _can_continue>0
      || ZLIM.cntx_psh();
         ZLIM.index('GROPNM');
         ZLIM.prefix(GROP.ref());
         {? ZLIM.first()
         || {!
            |? {? ZLIM.LIMIT='T' & ZLIM.AKC='Z' | ZLIM.LIMIT='N'
               || ZLIM.AKC:='N';
                  ZLIM.put()
               ?};
               ZLIM.next()
            !}
         ?};
         ZLIM.cntx_pop()
      ?};

::    Aktualizacja obiektu do planu
      {? exec('get','#params',500390)='T'
      || exec('grop2obj','px_obj')
      ?};

      {? _planned=0
      || {? VAR.GRUPA='T'
         || exec('komm_add','zl_common','Grupa operacji wymaga ponownego zaplanowania.'@,1,,,1)
         || FUN.info('Grupa operacji wymaga ponownego zaplanowania.'@)
         ?}
      ?};

      GROP.cntx_pop();
      {? VAR.GRUPA<>'T'
      || GROP.f_rfresh();
         {? ~GROP.f_seek(_ref) || {? ~GROP.f_seek(_prev) || GROP.f_seek(_next) ?} ?}
      ?}
   ?}
?};
~~


\grop_open_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Otwiera grupę operacji - akcja grupa przed
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Czy przywrócić wybrane grupy operacji do otwartych?'@)
|| _result:=1;
   VAR.GRUPA:='T';
   KOMM.init(200,,'Otwarcie grup operacji'@,'')
?};
sel_nchk();
_result


\grop_open_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Otwiera grupę operacji - akcja grupa po
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
GROP.f_rfresh();
VAR.GRUPA:='N';
~~


\kontr_zamk_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kontrola zamknięcia grupy - akcja dla pojedynczego rekordu
::----------------------------------------------------------------------------------------------------------------------
exec('kontr_zamk','zl_common',{? GROP.sel_size()=0 || 'S' || 'A' ?},GROP.sel_size()=0,1)


\kontr_zamk_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kontrola zamknięcia grupy - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Zamknięcie grup operacji'@,'');
1


\kontr_zamk_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kontrola zamknięcia grupy - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

_can_continue:=1;
_obj:=obj_new('RESULT','GROP');
_obj.RESULT:=0;
_obj.GROP:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1.. obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=GROP.name()
         || _obj.GROP:=exec('FindAndGet','#table',GROP,_kref,,,null());

            {? _obj.GROP=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego z grupą, więc robię error
               _can_continue:=0;
               exec('grop_deleted_in_proc','zl_common',_mp)
            ||
::             Sprawdzenie stan grupy, jeżeli jest już zamknięte, to done()
               _komm:=1;
               {? _mp.isGroup() | _mp.CLEANER
               || _komm:=0
               ?};
               {? exec('FindAndGet','#table',GROP,_obj.GROP,,"STATUS='Z'",0)
               || _can_continue:=0;
                  {? _komm || KOMM.init(250,,'Zamknięcie grupy operacji'@) ?};
                  {? _mp.CLEANER=0 || exec('komm_add','zl_common','Grupa jest już zamknięta.'@,1,,,1) ?};
                  {? _komm || KOMM.select() ?};
                  _mp.save(exec('kind_out','#b_port'),'GROP',_obj.GROP);
                  _mp.done()
               ?}
            ?}
         ?}
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy GROP
   {? _obj.GROP=null() & var_pres('GROP',_in)=type_of(null())
   || _obj.GROP:=_in.GROP
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;

_result:=0;

{? _mp.isService()
|| {? var_pres('GROP',_in)=type_of(null()) & _in.GROP
   || _oddz:=exec('FindAndGet','#table',GROP,_in.GROP,,"ODDZ",'');
      {? _oddz<>''
      || _result:=1;
         __PARSES.setVal('OddzialLogProd',_oddz);
         _args:=__PARSES.args('OkresRok');
         _args.OBSZAR:='LMG';
         _args.AR:=date()~1;
         _args.AM:=date()~2;
         __PARSES.setVal('OkresRok',_args)
      ?}
   ?};
   {? _result=0
   || _msg:='Błędna konfiguracja procesu — brak parametru wejściowego %1 czynności %2.'@@['GROP','TPP_GOP_EZAM'];
      _mp.error(_msg)
   ?}
|| _result:=1
?};

_result


\view_control
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Kontrola zamknięcia grupy operacji (do uniwersalnego okna nagłówka grupy na liście zadań)
::----------------------------------------------------------------------------------------------------------------------
_result:='';
VAR.A_GROP:=GROP.ref();
exec('kontr_zamk','zl_common','S',1,1);
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 d27a734935416799d8820e7098d76d654fd4b75bd452706fcfccd2679516a6bf35b3f35a1fcd4710894f91487f7f6ce40a9df7bd67baaec85b4f59bffd6d426448a3f43fb193642044a76b908cffc221156838c7f304a048b979d15bfe6adc1235494c25077b4f11cb0089dde23479637ae6f3cd64a4dcda716ddecf6804a097
