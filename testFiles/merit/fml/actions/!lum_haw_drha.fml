:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_haw_drha.fml
:: Utworzony: 05.02.2019
:: Autor: [WH]
::======================================================================================================================
:: Zawartość: Formuły czynności LUM_HAW_DRHA
::            Rejestracja harmonogramu umów
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [19.22]
:: OPIS: Czynność LUM_HAW_DRHA - formuła główna
::   WE: _a - [obj_new] - parametry wejsciowe czynności
::       _b - [obj_new] - parametry wewnętrzne czynności
::       _c - [obj_new] - parametry wyjściowe czynności
::       _d - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ
::# kind=WY,   symbol=HN,  type=_HN,  name=Harmonogram umów,     required=N
{? var_pres('HN',_out)<>type_of(~~) & var_pres('HN',_out)<>type_of(null()) || return() ?};

_can_continue:=1;

:: Wyzwalacz, który po dodaniu nagłowka harmonogramu:
:: - add/put: dodaje/aktualizuje rekord kluczowy nagłówka utworzonego harmonogramu
::   del: usuwa rekord kluczowy nagłówka utworzonego harmonogramu
:: - add/put: zapisuje parametr wyjściowy HN - wskazanie na nagłówek utworzonego harmonogramu
::   del: zapisuje parametr wyjściowy HN - null()
:: - aktualizuje opis na ToDo
_mp.trigRef('HN',1,1,1,exec('kind_out','#b_port'),'HN');

_hn:=null();
{? type_of(_context)>100 & var_pres('HN',_context)>0
|| _hn:=_context.HN
?};

HN.cntx_psh();
HN.prefix();
{? _mp.akcja()='DOŁĄCZ' | _hn=null()
||
:: Dołączanie z obszaru roboczego lub start procesu
   menu_txt(,'Dołącz');
   _can_continue:=exec('hn_add_action','umowy_harm');
   {? _mp.isMicro()
   || _mp.cancel()
   || {? _can_continue>0
      || _mp.done()
      || _mp.cancel()
      ?}
   ?};
   {? _can_continue>0
   || {? type_of(_context)>100 & var_pres('HN',_context)>0
      || _context.HN:=HN.ref()
      ?};
      {? type_of(_context)>100 & var_pres('OK',_context)>0
      || _context.OK:=1
      ?}
   ?};
   ~~
||
:: Każda inna akcja
   {? HN.seek(_hn)
   ||
      _what:=exec('HN','#to_string');
::    Jeżeli HN jest podany na wejściu albo zachowany w keyRef - poprawianie, usuwanie, kończenie
      {? _mp.pathTodo()
      || _can_continue:=exec('hn_edit_action','umowy_harm');
         {? _mp.isMicro()
         || _mp.cancel()
         || _mp.done()
         ?}
      |? _mp.akcja()='POPRAW'
      || menu_txt(,'Popraw');
         _can_continue:=exec('hn_edit_action','umowy_harm');
         {? _mp.isMicro()
         || _mp.cancel()
         || _mp.done()
         ?}

      |? _mp.akcja()='USUŃ'
      || {? exec('hn_delete_action','umowy_harm')
         || _context.OK:=1;
            _mp.cancel()
         ?}
      ?}
   ?}
?};
HN.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='Zarejestruj harmonogram umów cyklicznych'@@;
_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Dołącz'
::----------------------------------------------------------------------------------------------------------------------

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='LUM_HAW_DRHA';
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('HN','OK','env_harm');
_args.CONTEXT.OK:=0;
_args.CONTEXT.HN:=null();
_args.CONTEXT.env_harm:=params_get().env_harm;
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('mp_run','#b__box',_args);

{? _args.CONTEXT.HN<>null()
|| {? params_get().env_harm.ZAKRES='N'
   || FUN.info('Dodany harmonogram trafił do harmonogramów aktywnych. Aby go zobaczyć należy zmienić zakres wyświetlanych harmonogramów.'@)
   ?};
   HN.seek(_args.CONTEXT.HN)
?};
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Popraw'
::----------------------------------------------------------------------------------------------------------------------
_what:=exec('HN','#to_string');
{? exec('blk_lock','#table','HN',HN.ref(),,,'Harmonogram %1 jest redagowany'@[_what])
||
   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='LUM_HAW_DRHA';
   _args.UIDREF:=HN.uidref();
   _args.AKCJA:='POPRAW';
   _args.CONTEXT:=obj_new('HN','OK','env_harm');
   _args.CONTEXT.OK:=0;
   _args.CONTEXT.HN:=HN.ref();
   _args.CONTEXT.env_harm:=params_get().env_harm;

   exec('mp_run','#b__box',_args);
   exec('blk_unlock','#table','HN',HN.ref())
?};
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Usuń'
::----------------------------------------------------------------------------------------------------------------------
_hn:=HN.ref();
_what:=exec('HN','#to_string');
_locked:=exec('blk_lock','#table','HN',_hn,,1,
   {? VAR.GRUPA='T' || '' || 'Harmonogram %1 jest redagowany'@[_what] ?}
);
{? _locked
|| HN.cntx_psh();
   {? HN.prev()
   || _prev_hn:=HN.ref()
   || _prev_hn:=null()
   ?};
   HN.cntx_pop();

   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='LUM_HAW_DRHA';
   _args.UIDREF:=HN.uidref();
   _args.AKCJA:='USUŃ';
   _args.GRUPA:=VAR.GRUPA;
   _args.CONTEXT:=obj_new('HN','OK','env_harm');
   _args.CONTEXT.OK:=0;
   _args.CONTEXT.HN:=HN.ref();
   _args.CONTEXT.env_harm:=params_get().env_harm;

   exec('mp_run','#b__box',_args);

   {? _args.CONTEXT.OK
   || HN.seek(_prev_hn)
   ?};
   exec('blk_unlock','#table','HN',_hn)

|| {? VAR.GRUPA='T'
   || KOMM.add('Nie można usunąć harmonogramu %1 — jest redagowany.'@[_what])
   ?}
?};
~~


\action_delete_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Usuń' (przed grupą rekordów)
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_ilosc:=HN.sel_size();

_ask:=FUN.ask(
      'Ilość zaznaczonych harmonogramów: %1.'@[$_ilosc]+'\n\n'+
      'Czy usuwać je wszystkie?'@);
{? _ask>0
||
   sel_nchk();
   VAR.GRUPA:='T';
   KOMM.init(255,,'Usuwanie harmonogramów umów'@);
   _result:=1
?};
_result


\action_delete_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Usuń' (po grupie rekordów)
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
~~

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:15 6fb17589b0c736897a037963861bea28c24869ded2c2c6f2d503e8a63dc86b2439124ffe0f60eeeb7e08cbf2586a034874ca1956628a67a603d82f08b2f014dd2500aef59e9e337abc2e3631ac6c01f05442b4548a2a2824cc89d0bb30220b92593b975c7e682960e2ba6cfb3f848da75f93fe348b14cc1d71b91a7c85cedf7e
