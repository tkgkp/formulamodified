:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_awku.fml
:: Utworzony: 07.12.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_AWKU - Akt. danych pracowniczych.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akt. danych pracowniczych - główna formuła czynności.
::   WE:
::   WY:
::  OLD: \akt_zatr/kali.fml
::----------------------------------------------------------------------------------------------------------------------
::# properties=SERVICE
::
:: Czynność zdefiniowana z brakiem wymaganych uprawnień do jednostek organizacyjnych i form współpracy.
:: Uprawnienia wymagałyby zbędnych ze względu na naturę czynności zabiegów parametryzacyjnych. Szczególnie w przypadku
:: jednostek powstawałoby ryzyko braku aktualizacji danych pracowników zatrudnionych w nowo utworzonych jednostkach.
:: Przetwarzane są dane wszystkich pracowników we wszystkich jednostkach.
::
:: Sposób obsługi potencjalnych błędów wynikających z zablokowania rekordów.
:: Obsługiwane wertości:
:: IGNORE - (domyślnie) ignoruje wystąpienie błędu i kończy czynność (wywołanie metody done menadżera procesów)
:: REPORT - kończy działanie zgłaszając błąd (wywołanie metody error menadżera procesów)
:: LOOP - w przypadku natrafienia na blokady, ponawia próbę aktualizacji
::
::# kind=WE, symbol=ON_ERROR, type=STRING, name=Sposób obsługi błędów, required=N, ^
::#   fml_val="exec('on_error','!pkd_ezk_awku',_a)"
::# kind=WE, symbol=CHK_DAYS, type=NUMBER, name=Liczba dni wstecz (aktualizacja), required=N, ^
::#   fml_val="exec('chk_days','!pkd_ezk_awku',_a)"
::
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik działania (OK,BŁĄD)", required=N
::# kind=WY, symbol=ERROR, type=NUMBER, name="Kod błędu (0/kod)", required=N

_par:=params_get();
params_set(_par);
_mp:=_par.mp;
_in:=_par.in;
_rv:=_par.out;
_rv.RESULT:='OK';
_rv.ERROR:=0;
_ok:=1;

_vpChkD:=var_pres('CHK_DAYS',_in);
{? _vpChkD=type_of(~~)
|| {? _mp.isService()
   || _in.CHK_DAYS:=7
:: Okienko redagowania pozwalające wprowadzić datę od której należy przeprowadzić aktualizację:
   || _ok:=exec('par_edit','!pkd_ezk_awku',_in)
   ?}
|? _vpChkD<>type_of(0)
|| _ok:=_rv.ERROR:=-1
?};

{? _ok=1
|| exec('run','!pkd_ezk_awku')
:: Wybrano "Anuluj" w okienku redakcji parametrów:
|? _ok=0
|| _mp.cancel();
   return()
?};

{? _rv.ERROR<>0
|| _rv.RESULT:='BŁĄD'
?};

_mp.save(,_rv);
{? _rv.ERROR<>0
|| {? _in.ON_ERROR='REPORT'
   || _mp.error();
      return()
   ?}
?};
_mp.done();
~~


\on_error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(,'KOD','STRING[8]','Sposób obsługi błędu'@);

_wnd:=_TAB.mk_edit('Czynność %1'@['PKD_EZK_AWKU'],0,'#pkd_ezk_awku');
_TAB.win_esep(_wnd,'Parametr %1'@['ON_ERROR']);
_TAB.win_efld(_wnd,,'KOD',,,,,,,,,'radio-buttons',,
   'Zakończ działanie w normalnym trybie'@,"'IGNORE'",
   'Zgłoś błąd dla menadżera procesów'@,"'REPORT'",
   'Ponawiaj próbę aktualizacji'@, "'LOOP'"
);
exec('ok_esc','#window',_TAB,_wnd);
_TAB.win_edit(_wnd);

_ini:='';
_TAB.KOD:=
   {? var_pres('_a')<>type_of('') | _a=''
   || 'IGNORE'
   || _ini:=_a;
      _a
   ?};

{? _TAB.edit()
|| _TAB.KOD
|| _ini
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akt. danych pracowniczych - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Aktualizacja danych pracowniczych'@@


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła przetwarzająca dane.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_rv:=_par.out;

H_UM.cntx_psh();
H.cntx_psh();
exec('otworz_h_um','pracownik','h_um');
H.use('_hist');

_dt:=date()-_in.CHK_DAYS;
_tmp1:=sql(
   'select P_KK.P as REF, 0 as H, 1 as P_KK '
   'from P_KK join P using(P_KK.P,P.REFERENCE) '
   'where P.FIRMA=:_a and P_KK.OD>=to_date(:_b) and P_KK.OD<=to_date(:_c) '
   'order by REF',
   exec('ref_firma','ustawienia'),_dt,date()
);
exec('collect','!pkd_ezk_awku','HISTDOKZ',"H.DO<=date()",_tmp1,_dt);
exec('collect','!pkd_ezk_awku','HISTODKZ',"H.OD<=date()",_tmp1,_dt);
H.cntx_pop();
H_UM.cntx_pop();
exec('otworz_h_um','pracownik');

:: dodajemy pozostałych pracowników sychnronizowanych z HR Portal
{? exec('lic','#b_domain','POR')
|| _tmp:=sql(
      '(select P.REFERENCE as REF, 0 as H, 0 as P_KK '
      'from P  '
      'where P.FIRMA=:_a and P.PORTAL=\'T\' ) '
      'union '
      '(select REF, H, P_KK from :_b order by REF)',
      exec('ref_firma','ustawienia'),_tmp1
   )
|| _tmp:=_tmp1
?};


_cnt:=0;
_size:=_tmp.size();
_loop:=_tmp.first();
{? _loop=0 & ~_mp.isService()
|| FUN.info('Dane w kartotece pracowników nie wymagają aktualizacji.'@);
   return()
?};

_nm:=no_msg(1);
lock_time(3);

P.cntx_psh();
P.clear();
{!
|? _loop
|! {? P.seek(_tmp.REF)
   || {? P.r_lock(1,1,1)
      || {? ~_mp.isService()
         || progress(
               int(100*(_cnt+=1)/_size),
               'Trwa aktualizacja danych w kartotece pracowników...'@,
               FUN.TYT
            )
         ?};
         _arg:={? _tmp.H || ',H' || '' ?}+{? _tmp.P_KK || ',P_KK' || '' ?}+',';
         exec('pracownik_aktualizuj','pracownik',_arg);
         _loop:=_tmp.next();
         P.r_unlock()
      |? _in.ON_ERROR<>'LOOP'
      || _rv.ERROR:=errno();
         _loop:=0
      ?}
   || _en:=errno();
      {? _in.ON_ERROR<>'LOOP'
      || _rv.ERROR:=_en;
         _loop:=0
      || {? _en<>323
         || _loop:=_tmp.next()
         ?}
      ?}
   ?}
!};
P.cntx_pop();

obj_del(_tmp);
lock_time(-1);
no_msg(_nm);
prgs_clr();

{? ~_mp.isService()
|| {? _rv.ERROR=0
   || FUN.info('Zakończono aktualizację danych w kartotece pracowników.'@)
   || FUN.emsg('Nie udało się zaktualizować wszystkich danych w kartotece pracowników.'@)
   ?}
?}


\collect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zbiera informacje o pracwonikach, których dane mogą wymagać aktualizacji.
::   WE: _a [STRING] - akronim indeksu dla tabeli H
::       _b [FORMULA] - formuła warunku uwzględnienia zapisu
::       _c [TABLE] - alias tabeli zawierającej wskazania pracowników
::       _d [DATE] - data początkowa badania okresu zmian
::   WY:
::----------------------------------------------------------------------------------------------------------------------
H.index(_a);
H.prefix(exec('ref_firma','ustawienia'));
{? H.find_ge(_d) & _b()
|| {!
   |? {? _c.find_key($H.P)
      || {? ~_c.H
         || _c.H:=1;
            _c.put()
         ?}
      || _c.blank();
         _c.REF:=$H.P;
         _c.H:=1;
         _c.add()
      ?};
      H.next() & _b()
   !}
?}


\par_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Okienko redagowania pozwalające wprowadzić brakujące parametry czynności.
::   WE: _a [OBJ] - parametry wejsciowe czynności (_par.in)
::   WY: _ok [NUMBER] - wynik funkcji edit()
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_ok:=0;
_dzis:=date();

_PAR:=tab_tmp(1,'OD','DATE','Aktualizować dane od'@);
_we:=_PAR.mk_edit('Zakres aktualizacji'@,0,'#pkd_ezk_awku1');
_PAR.win_efld(_we,,'OD',,,,,,,,'Data, od której będą zbierane dane do aktualizacji'@);
_PAR.blank();
_PAR.OD:=_dzis-7;
exec('ok_esc','#window',_PAR,_we);
_PAR.win_edit(_we);
params_set('err','Data nie może być większa od dzisiejszej.'@);
_ok:=_PAR.edit(
   "_PAR:=cur_tab(1,1);
    _chk:=__CHK.record(_PAR,,'OD');
    {? ~+_chk & _PAR.OD>date()
    || FUN.emsg(params_get().err);
       _chk:='OD'
    ?};
    _chk
   ");
_in.CHK_DAYS:=_dzis-_PAR.OD;

_ok


\chk_days
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Okno redakcji parametru czynności CHK_DAYS - Liczba dni wstecz (aktualizacja)
::   WE: _a [NUMBER] - poprzednia wartość
::   WY:    [NUMBER] - nowa wartość parametru
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(,'DNI','INTEGER','Liczba dni wstecz'@);

_wnd:=_TAB.mk_edit('Czynność %1'@['PKD_EZK_AWKU'],0,'#pkd_ezk_awku2');
_TAB.win_esep(_wnd,'Parametr %1'@['CHK_DAYS']);
_TAB.win_efld(_wnd,,'DNI',,,,,,,,'Liczba dni wstecz, od kiedy będą zbierane dane do aktualizacji'@);
exec('ok_esc','#window',_TAB,_wnd);
_TAB.win_edit(_wnd);

_TAB.DNI:=7;
_ini:=~~;
{? var_pres('_a')=type_of(0) & _a>0
|| _TAB.DNI:=_ini:=_a
?};

params_set('err','Wartość nie może być ujemna.'@);
{? _TAB.edit("{? cur_tab(1,1).DNI<0 || FUN.emsg(params_get().err); 'DNI' || '' ?}")
|| _TAB.DNI
|| _ini
?}

:Sign Version 2.0 jowisz:1045 2021/01/22 13:20:05 0dbe556f31755022f291593d7f23c4721806c12fda1380cbf95a326ee996dd4f996c1875b70e215bb9ffdc62b8d040fa14fb62f5f2f1921359d9ce3466066c65e501f4225b515bb1d38035b4e0838ae678e175a90abb032092fd731be8ed5b56ec49aaa1876cbae6fc8a5f582129c8f49b7e643805439e27e010dd0eb6f72b19
