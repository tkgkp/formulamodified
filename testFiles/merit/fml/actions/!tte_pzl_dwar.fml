:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dwar.fml
:: Utworzony: 24.06.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DWAR - Rejestracja zlecenia warsztatowego
::            Uwaga: większość kodu jest wspólna z czynnościami:
::                   - TTE_PZL_DZLE
::                   - TTE_PZL_DZLP
::                   - TTE_PZL_DZLN
::            w przypadku zmian modyfikować wszystkie pliki
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności rejestracji zlecenia warsztatowego (TTE_PZL_DWAR)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ,LMG

:: PARAMETRY WE:
::# kind=WE, symbol=ZTP, type=_ZTP, name=Typ zlecenia, required=N, fml_val="exec('ztp_select','zl_head','W')", fml_exp="exec('ztp_export','zl_head',_a)"
{? var_pres('ZTP',_in)<>type_of(~~) & var_pres('ZTP',_in)<>type_of(null()) || return() ?};
{? var_pres('ZTP',_in)=type_of(~~) || _in.ZTP:=null() ?};
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null()) || return() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=TECH, type=STRING, name=Redagowanie technologii zlecenia, required=N
{? var_pres('TECH',_out)<>type_of('') || _out.TECH:='N' ?};

_clean_result:=params_exec('clean','!tte_pzl_dwar',_mp,_in);
{? ~_clean_result.RESULT
|| return()
?};

:: Sprawdzenie typu zlecenia
{? _in.ZTP
|| {? exec('FindAndGet','#table',ZTP,_in.ZTP,,"1+TYP",'')='~'
   || _msg:='Niezgodność wywołania czynności.\nPrzekazany typ nie może być zastrzeżony.';
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   |? exec('FindAndGet','#table',ZTP,_in.ZTP,,"WP",'')<>'W'
   || _msg:='Niezgodność wywołania czynności.\nPrzekazany typ musi dotyczyć zleceń warsztatowych.';
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   ?}
?};

:: Sprawdzenie zlecenia i ustawienie parametru wyjściowego
{? var_pres('ZL',_in)=type_of(null())
|| {? _in.ZL
   || {? exec('FindAndGet','#table',ZL,_in.ZL,,"RODZAJ",'')<>'P'
      || _msg:='Niezgodność wywołania czynności.\nPrzekazane zlecenie musi być zleceniem prostym.';
         FUN.emsg(_msg);
         _mp.error(_msg);
         return()
      || _mp.save(exec('kind_out','#b_port'),'ZL',_in.ZL)
      ?}
   || _msg:='Niezgodność wywołania czynności.\nPrzekazany parametr ZL nie może mieć wartości null().';
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   ?}
?};

_mp.trigRef('ZL',1,1,1,exec('kind_out','#b_port'),'ZL');

_keyRefs:=_mp.getRefs();
{? var_pres('[1]',_keyRefs)
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_keyRefs[1])
   || _zl:=ZL.ref();
      _zl_uid:=ZL.uidref()
   || _zl:=null();
      _zl_uid:=''
   ?};
   ZL.cntx_pop()
|? _mp.akcja()='KOPIUJ' | _mp.akcja()='POPRAW' | _mp.akcja()='USUŃ' | _mp.akcja()='ZAKOŃCZ'
|| _zl:=_context.ZL;
   _zl_uid:=exec('FindAndGet','#table',ZL,_context.ZL,,"uidref()",'')
|| _zl:=null();
   _zl_uid:=''
?};

:: Wywołanie z listy ToDo, jest odpowiedni KeyRef, więc kontynuacja redagowania nagłówka
{? _mp.pathTodo() & _zl<>null()
|| {? exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='T'
   || FUN.info('Zakończono rejestrację nagłówka zlecenia.'@);
      _mp.save('OUT','TECH',_out.TECH);
      _mp.done()
   || _ok:=exec('zl_popraw','zl_head',_zl,1);
      {? _mp.isMicro()
      || _mp.cancel()
      |? _ok
      || {? exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='T'
         || _mp.save('OUT','TECH',_out.TECH);
            _mp.done()
         ?}
      ?}
   ?}

:: Poprawianie zlecenia (obszar roboczy - zlecenie przekazane kontekstem)
|? _mp.akcja()='POPRAW'
|| _ok:=exec('zl_popraw','zl_head',_zl,exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='N');
   {? _mp.isMicro()
   || _mp.cancel()
   |? _ok
   || {? exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='T'
      || _mp.save('OUT','TECH',_out.TECH);
         _mp.done()
      ?}
   ?}

:: Wywołanie z panelu czynności - nowy proces, więc nowe zlecenie
:: Wywołanie z listy ToDo, nie ma KeyRef, więc nowe zlecenia
:: Dołączanie nowego zlecenia (obszar roboczy)
|? _mp.pathProc() | _mp.pathTodo() | _mp.akcja()='DOŁĄCZ'
|| _zl:=exec('zl_dolacz','zl_head','W',_in.ZTP);
   {? _mp.isMicro()
   || _mp.cancel()
   |? _zl<>null()
   || {? exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='T'
      || _mp.save('OUT','TECH',_out.TECH);
         _mp.done()
      ?}
   || _mp.cancel()
   ?}

:: Usuwanie zlecenia (obszar roboczy - zlecenie przekazane kontekstem)
|? _mp.akcja()='USUŃ'
|| _context.RESULT:=exec('zl_usun','zl_head',_zl,_mp.isGroup());
   {? _context.RESULT
   || _mp.cancel()
   ?}

:: Kopiowanie na nowe zlecenie (obszar roboczy - źródłowe zlecenie przekazane kontekstem)
|? _mp.akcja()='KOPIUJ'
|| {? _in.ZTP<>null() & _in.ZTP<>exec('FindAndGet','#table',ZL,_zl,,"TYP",null())
   || FUN.info('Nie można uruchomić procesu — niezgodność typu zlecenia.'@);
      _mp.cancel()
   || _zl:=exec('zl_kopiuj','zl_head',_zl);
      {? _mp.isMicro()
      || _mp.cancel()
      |? _zl<>null()
      || {? exec('FindAndGet','#table',ZL,_zl,,"STAT_N",'N')='T'
         || _mp.save('OUT','TECH',_out.TECH);
            _mp.done()
         ?}
      || _mp.cancel()
      ?}
   ?}

:: Zakończenie redagowania nagłówka (obszar roboczy - zlecenie przekazane kontekstem)
|? _mp.akcja()='ZAKOŃCZ'
|| ZL.cntx_psh();
   ZL.clear();
   {? ZL.seek(_zl)
   || {? {? _mp.isGroup()
         || 1
         || FUN.ask('Czy zakończyć rejestrację nagłówka zlecenia?'@)
         ?}
      || ZL.STAT_N:='T';
         {? ZL.put()
         || {? _mp.isGroup() || KOMM.add('Zakończono rejestrację nagłówka zlecenia %1.'@[ZL.SYM]) ?};
            _mp.save('OUT','TECH',_out.TECH);
            _mp.done()
         ?}
      ?}
   || _mp.cancel()
   ?};
   ZL.cntx_pop()

:: Tutaj nie powinno dojść, więc błąd
|| _mp.error('Nieobsłużony kontekst wywołania czynności.')
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności rejestracji nagłowka zlecenia warsztatowego (TTE_PZL_DWAR)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiednie ZL
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Zredaguj zlecenie warsztatowe %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"'Zredaguj zlecenie warsztatowe %1'[SYM]",'')
|| _desc:='Zredaguj nowe zlecenie warsztatowe'@@
?};
_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja nagłówka zlecenia warsztatowego - akcja Dołącz -> Proste
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_DWAR';
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';

exec('mp_run','#b__box',_args);
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR')

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:21 362928a31cd710c4e926b3079b0ece0b6e2d9696139f657122ee39dd0479029a98bd89effb35795f8fb64122e6ded1a0684ee843a0f673b1e3841c242b185bb32b819427e52943e8802573715ccf81c71ebc43c496332278da003b2c53f3bb3cea184024531fb297ae318365eaad4ab3cf3cb9c122992eda48a817694c64f113
