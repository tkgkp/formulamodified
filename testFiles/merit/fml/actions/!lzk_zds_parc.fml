:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lzk_zds_parc.fml
:: Utworzony: 02.11.2018
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły czynności LZK_ZDS_PARC - Archiwizacja potwierdzenia zamówień dostaw
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.02]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ,LZK
::# kind=WE, symbol=ZDP_NAG,  type=_ZDP_NAG, name=Potwierdzenie zamówień dostaw,      required=N,    keyref=T
::# kind=WE, symbol=DNI,      type=NUMBER,   name=Ilość dni wstecz do archiwizacji,   required=N
::# kind=WE, symbol=ODDZIAL,  type=STRING,   name=Kod oddziału do archiwizacji,       required=N,    fml_val="exec('oddzial','!lzk_zds_darc')"
::# kind=WE, symbol=MAXZAM,   type=NUMBER,   name=Maksymalna liczba do archiwizacji,  required=N
::# kind=WY, symbol=ZDP_NAG,  type=_ZDP_NAG, name=Potwierdzenie zamówień dostaw,      required=N,    keyref=T
::# kind=WY, symbol=IL_SERV,  type=NUMBER,   name=Ilość zarchiwizowanych potwierdzeń, required=N,    keyref=N
::# properties=SERVICE

_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

{? var_pres('DNI',_in)<>type_of(0) | _in.DNI<0
|| _in.DNI:=-1;
   _mp.save('IN')
?};
{? var_pres('MAXZAM',_in)<>type_of(0) | _in.MAXZAM<=0
|| _in.MAXZAM:=-1;
   _mp.save('IN')
?};
_typ_oddzial:=var_pres('ODDZIAL',_in)<>type_of('');
{? _typ_oddzial | (+_in.ODDZIAL)>1 | ~exec('isLetter','#string',_in.ODDZIAL,1)
|| _in.ODDZIAL:={? _typ_oddzial || '' || '!' ?};
   _mp.save('IN')
?};
_max:=_in.MAXZAM;

exec('init_zds','lzk');

:: WSTĘPNE WALIDACJE
_clean_result:=params_exec('clean','!lzk_zds_parc',_mp,_in);
_can_continue:=_clean_result.RESULT;
{? _can_continue=0
|| return()
?};

_akcja:=_mp.akcja();
_auto:=_akcja<>'Archiwizuj' & _mp.isAutoRun();
_service:=_mp.isService();
_grupa:=_mp.isGroup();

{? _service & (_in.DNI<0 | _in.ODDZIAL='!')
|| _mp.error('Nieprawidłowe parametry dla czynności serwisowej.')
|? ~_service & ~(var_pres('ZDP_NAG',_in)=type_of(null()) & _in.ZDP_NAG)
|| _mp.error('Brak wymaganego parametru ZDP_NAG.')
|| ZDP_NAG.cntx_psh();
   ZDP_NAG.prefix();
   _ok:=1;
   {? ~_service
   || ZDP_NAG.use(ref_name(_in.ZDP_NAG));
      ZDP_NAG.prefix();
      {? ~ZDP_NAG.seek(_in.ZDP_NAG)
      || _ok:=0;
         _mp.error('Nie znaleziono potwierdzenia zamówień dostaw.')
      ?}
   ?};

   {? _ok
   || _mp.trigRef('ZDP_NAG',,1,,exec('kind_out','#b_port'),'ZDP_NAG');
      params_set('mp',_mp,'in',_in,'out',_out);
      {? _akcja='Archiwizuj' | _auto | _service
      || exec('archiwizuj','!lzk_zds_parc',{? _service || 2 || _auto ?},_in.DNI,_in.ODDZIAL,_grupa,_max)
      |? _mp.pathTodo() | _mp.pathArea() & _akcja=''
      || _win_red:=exec('zdptw_win_edit','zamdst_ptw','RED');
         _ff:="params_exec('zdptw_pozycje_todo','!lzk_zds_parc')";
         ZDP_NAG.win_ebtn(_win_red,'text=&Pozycje,btn_label_align=center,panel=bottom,align=begin,display=1',_ff);
         _ff:="params_exec('zdptw_archiwum_todo','!lzk_zds_parc'); 'key:Esc'";
         ZDP_NAG.win_ebtn(_win_red,'text=Arc&hiwizuj,btn_label_align=center,panel=bottom,align=end,display=1',_ff);
         _ff:="'key:Esc'";
         ZDP_NAG.win_ebtn(_win_red,'text=&Anuluj,btn_label_align=center,panel=bottom,align=end,display=1',_ff);
         ZDP_NAG.win_edit(_win_red);
         ZDP_NAG.display()
      || _mp.error('Nieobsługiwana ścieżka.')
      ?}
   ?};
   ZDP_NAG.cntx_pop()
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('ZDP_NAG',_in)<>type_of(~~) & _in.ZDP_NAG
|| 'Zarchiwizuj potwierdzenie zamówień dostaw: %1'@@[exec('record','#to_string',_in.ZDP_NAG)]
|| ''
?}


\zdptw_archiwizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zamówienie dostaw - Archiwizuj
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_tab:=ZDP_NAG.sel_aget();
ZDP_NAG.sel_adel();

{? _tab.size()
|| _ok:=FUN.ask('Ilość potwierdzeń zamówień dostaw do archiwizacji: %1.\n'
                'Operacja może być czasochłonna.\n\nCzy kontynuować?'@[$_tab.size()])
|| _ok:=2
?};

{? _ok=2
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LZK_ZDS_PARC';
   _params.UIDREF:=ZDP_NAG.uidref();
   _params.AKCJA:='Archiwizuj';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZDP_NAG',ZDP_NAG.ref());
   exec('mp_run','#b__box',_params)
|? _ok=1
|| exec('ini_kom','#message','Archiwizacja potwierdzeń zamówień dostaw'@);
   KOMM.init(250,,'Archiwizacja potwierdzeń zamówień dostaw - menadżer procesów');
   ZDP_NAG.cntx_psh();
   _tab.clear();
   {? _tab.first()
   || {!
      |? {? (ZDP_NAG.clear(); ZDP_NAG.seek(_tab.REF,))
         || _params:=exec('mp_run_a','#b__box');
            _params.ACT_UID:='LZK_ZDS_PARC';
            _params.UIDREF:=ZDP_NAG.uidref();
            _params.AKCJA:='Archiwizuj';
            _params.GRUPA:='T';
            _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
            exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZDP_NAG',ZDP_NAG.ref());
            exec('mp_run','#b__box',_params);
            obj_del(_params)
         ?};
         _tab.next()
      !}
   ?};
   ZDP_NAG.cntx_pop();
   exec('end_kom','#message');
   KOMM.select()
?};
obj_del(_tab)


\zdptw_archiwum_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.02]
:: OPIS: Archiwizacja potwierdzenia dostaw - Archiwizuj z todo
::   WE: params_get()   - ustawiane w exec('main','!lzk_zds_parc')
::----------------------------------------------------------------------------------------------------------------------
params_exec('archiwizuj','!lzk_zds_parc');
''


\zdptw_pozycje_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.02]
:: OPIS: Potwierdzenie zamówień dostaw - Pozycje z todo
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
exec('zdp_poz','zamdst_ptw',0);
''


\archiwizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.02]
:: OPIS: Potwierdzenie zamówień dostaw - Archiwizacja potwierdzeń zamówień dostaw
::   WE: [_a] - 1-automatycznie 0-nie(domyślnie) 2-serwisowa
::       [_b] - ilość dni wstecz
::       [_c] - oddzial lub pusty string
::       [_d] - czy grupa rekordów
::       [_e] - maksymalna liczba zamówień do pojedynczej archiwizacji
::       params_get()
::  OLD: \zd_arch/zd.fml
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(1) || _a || 0 ?};
_dni:={? var_pres('_b')=type_of(1) || _b || 0 ?};
_oddzial:={? var_pres('_c')=type_of('') || _c || '' ?};
_grupa:={? var_pres('_d')=type_of(0) || _d || 0 ?};
_maxzam:={? var_pres('_f')=type_of(0) & _auto=2 || _f || -1 ?};

_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

_result:=0;

{? _auto=2
||
:: czynność serwisowa
   exec('openzd_psh','open_tab');
   _oddz:=ST.ODDZ;
   _today:=date();
   ODDZ.cntx_psh();
   ODDZ.index('KOD2');
   {? _oddzial<>'' || ODDZ.prefix(_oddzial,) || ODDZ.prefix() ?};
   {? ODDZ.first()
   || {!
      |? ST.ODDZ:=ODDZ.KOD;
         exec('openzd','open_tab',ODDZ.KOD+'__');
         ZDP_NAG.cntx_psh();
         ZDP_NAG.index('SYM');
         ZDP_NAG.prefix();
         {? ZDP_NAG.first()
         || {!
            |? _ref:=ZDP_NAG.ref();
               _oki:=ZDP_NAG.next();
               ZDP_NAG.cntx_psh();
               ZDP_NAG.clear();
               {? (#_ref)>0 & ZDP_NAG.r_lock(1,1,1,#_ref,ref_name(_ref)) & (ZDP_NAG.seek(_ref);ZDP_NAG.r_unlock();1)
                 & {? _dni>=0 || ZDP_NAG.D_WYS<=(_today-_dni) || 1 ?}
               || _old:=ZDP_NAG.uidref();
                  _result+=(_new:=exec('zdp_arch','!lzk_zds_parc'))<>'';
                  exec('uidref_update','#b__box',_old,exec('FindAndGet','#table',ZDP_NAG,_new,,"uidref()",''));
                  {? _new<>''
                  ||
::                   Uruchamian cleanera - czyszcze pozostałe po zamówieniu zadania na TODO
                     exec('clean_record','#b__box',exec('FindAndGet','#table',ZDP_NAG,_new,,"uidref()",''),0)
                  ?}
               ?};
               ZDP_NAG.cntx_pop();
               _oki & (_maxzam<=0 | _result<_maxzam)
            !}
         ?};
         ZDP_NAG.cntx_pop();
         ODDZ.next()
      !}
   ?};
   ODDZ.cntx_pop();
   exec('openzd_pop','open_tab');
   ST.ODDZ:=_oddz;
   _out.ZDP_NAG:=null();
   _out.IL_SERV:=_result;
   _mp.save(,_out);
   _mp.done()
|? _auto | _grupa | FUN.ask('Zarchiwizować potwierdzenie zamówień dostaw %1?'@[ZDP_NAG.SYM])
|| _old:=ZDP_NAG.uidref();
   _new:=exec('zdp_arch','!lzk_zds_parc',_grupa);
   ZDP_NAG.cntx_psh();
   {? _new<>''
   || _result:=1;
      exec('uidref_update','#b__box',_old,exec('FindAndGet','#table',ZDP_NAG,_new,,"uidref()",''));
::    Uruchamian cleanera - czyszcze pozostałe po zamówieniu zadania na TODO
      exec('clean_record','#b__box',exec('FindAndGet','#table',ZDP_NAG,_new,,"uidref()",''),0);
      _out.ZDP_NAG:=exec('FindAndGet','#table',ZD_NAG,_new,,,null())
   ?};
   _out.IL_SERV:=_result;
   _mp.save(,_out);
   ZDP_NAG.cntx_pop();
   _mp.done()
?};
_result


\zdp_arch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: archiwizacja potwierdzen zamowien dostaw
::   WY: ref sql-owy zamówienia lub pusty string
::  OLD: \zdp_arch/zd.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
{? var_pres('__il_zzam')=1 || __il_zzam+=1 ?};
_do_state:=do_state();
ZD_NAG.cntx_psh();
ZD_POZ.cntx_psh();
ZD_RN.cntx_psh();
ZD_RP.cntx_psh();
ZDP_NAG.cntx_psh();
ZDP_POZ.cntx_psh();
{? (ZDP_NAG.name()+3)=(ST.ODDZ+'__')
||
   {? 1
   ||
      _ref:=ZDP_NAG.ref;
      ZDP_NAG.cntx_psh();
      ZDP_NAG.clear();
      {? _do_state=0 || do() ?};
      _result:=exec('one_zdpn','!lzk_zds_parc',ZDP_NAG.ref());
      {? var_pres('__il_pzam')=1 || __il_pzam+=1 ?};
      {? _do_state=0 || end() ?};
      ZDP_NAG.cntx_pop()
   ?}
||
   {? 1
   ||
      ZDP_NAG.cntx_psh();
      {? _do_state=0 || do() ?};
      _result:=exec('one_zdpn','!lzk_zds_parc',ZDP_NAG.ref());
      {? var_pres('__il_pzam')=1 || __il_pzam+=1 ?};
      {? _do_state=0 || end() ?};
      ZDP_NAG.cntx_pop()
   ?}
?};
ZDP_POZ.cntx_pop();
ZDP_NAG.cntx_pop();
ZD_RP.cntx_pop();
ZD_RN.cntx_pop();
ZD_POZ.cntx_pop();
ZD_NAG.cntx_pop();
POMOC.KH:=null;
_result


\one_zdpn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: przeniesienie jednego potwierdzenia zamowenia dostaw
::   WE:  _a - ZDP_NAG.ref()
::   WY: ref SQL nowego potwierdzenia
::  OLD: \one_zdpn/zd.fml
::----------------------------------------------------------------------------------------------------------------------
_result:='';
OKR.cntx_psh();
OKR.index('MC');
OKR.prefix(REF.FIRMA,1);

_mask_bie:=5-ZDP_NAG.name();
{? 6-ZDP_NAG.name()='__'
|| _mask_kop:=ST.ODDZ+(2-$(ZDP_NAG.DR~1))
|| _mask_kop:=ST.ODDZ+'__'
?};

_zdp_nag:=obj_new(ZDP_NAG.fld_num());
_zdp_poz:=obj_new(ZDP_POZ.fld_num());

_ref_old:=_a;
_ref_new:=null;
_zdnuio:=_zdnuin:='';

:: kopiowanie naglowka
ZDP_NAG.clear();
{? ZDP_NAG.seek(_a)
|| _zdnuio:=ZDP_NAG.uidref();
   {! _licz:=1..ZDP_NAG.fld_num() |! _zdp_nag[_licz]:=ZDP_NAG[_licz] !}
|| undo()
?};

:: utworzenie nowego naglowka
exec('openzd','open_tab',_mask_kop);
ZDP_NAG.clear();
ZDP_NAG.blank();
{! _licz:=1..ZDP_NAG.fld_num() |! {? type_of(ZDP_NAG[_licz])<>0 || ZDP_NAG[_licz]:=_zdp_nag[_licz] ?} !};
{? ZDP_NAG.add()
|| _ref_new:=ZDP_NAG.ref();
   _zdnuin:=ZDP_NAG.uidref();
   _result:=$ZDP_NAG.ref()
|| undo()
?};

:: odtworzenie powiazan ZD_RN.ZDP_NAG
_odt_rn:="
   ZD_RN.index('ZDP_NAG');
   ZD_RN.prefix(_a,_a);
   {? ZD_RN.first()
   ||
      {!
      |?
         ZD_RN.cntx_psh();
         ZD_RN.clear();
         ZD_RN.ZDP_NAG:=_b;
         ZD_RN.put();
         ZD_RN.cntx_pop();
         ZD_RN.first()
      !}
   ?};
   ''
";
:: szuka w biezacej masce
ZD_RN.use('zdhin'+ST.ODDZ+'__');
_odt_rn($_ref_old,$_ref_new);
:: przeszukuje w archiwum
{? OKR.first()
||
   {!
   |?
      ZD_RN.use('zdhin'+ST.ODDZ+($OKR.ROK+2));
      _odt_rn($_ref_old,$_ref_new);
      OKR.next()
   !}
?};

:: kopiowanie pozycji
exec('openzd','open_tab',_mask_bie);
:: formula do odtworzenia powiazan ZD_RP.ZDP_POZ
_odt_rp:="
   ZD_RP.index('ZDP_POZ');
   ZD_RP.prefix(_a,_a);
   {? ZD_RP.first()
   ||
      {!
      |?
         ZD_RP.cntx_psh();
         ZD_RP.clear();
         ZD_RP.ZDP_POZ:=_b;
         ZD_RP.put();
         ZD_RP.cntx_pop();
         ZD_RP.first()
      !}
   ?};
   ''
";
_poz_old:=_poz_new:=null;
ZDP_POZ.index('ZDP_NAG');
ZDP_POZ.prefix(_ref_old);
{? ZDP_POZ.first()
||
   {!
   |?
      _poz_old:=ZDP_POZ.ref();
      _zd_uio:=ZDP_POZ.uidref();
      {! _licz:=1..ZDP_POZ.fld_num() |! _zdp_poz[_licz]:=ZDP_POZ[_licz] !};

      ZDP_POZ.cntx_psh();
      exec('openzd','open_tab',_mask_kop);
      ZDP_POZ.clear();
      {! _licz:=1..ZDP_POZ.fld_num() |! ZDP_POZ[_licz]:=_zdp_poz[_licz] !};
      ZDP_POZ.ZDP_NAG:=_ref_new;
      ZDP_POZ.add();
      ZD_POZ.cntx_psh();
      _mref:=_mgref:=null;
      ZD_POZ.use(form(8+ZDP_POZ.ZD_POZ));
      ZD_POZ.prefix();
      {? ZD_POZ.seek(ZDP_POZ.ZD_POZ) || _mref:=ZD_POZ.M; _mgref:=ZD_POZ.MG ?};
      ZD_POZ.cntx_pop();
      {? ZDP_POZ.name()+2='__' || exec('obl_stan','magazyn_stan',_mref,1,_mgref) ?};
      _poz_new:=ZDP_POZ.ref();
      _zd_uin:=ZDP_POZ.uidref();
      ZDP_POZ.cntx_pop();

::    aktualizacja wpisów dla dyspozycji transportowych
      exec('updateUID','transport_wspolne',_zdnuio,_zd_uio,_zdnuin,_zd_uin);

::    odtworzenie powiazan ZD_RP.ZDP_POZ
::    w biezacej masce
      ZD_RP.use('zdhip'+ST.ODDZ+'__');
      _odt_rp($_poz_old,$_poz_new);
::    w archiwum
      {? OKR.first()
      ||
         {!
         |?
            ZD_RP.use('zdhip'+ST.ODDZ+($OKR.ROK+2));
            _odt_rp($_poz_old,$_poz_new);
            OKR.next()
         !}
      ?};

      ZDP_POZ.next()
   !}
?};

:: odtwarzanie powiazan dokumentow
exec('refsql_update','dokum',$_ref_old,$_ref_new);

:: usuniecie starych potwierdzen
exec('openzd','open_tab',_mask_bie);
ZDP_NAG.clear();
{? ZDP_NAG.seek(_a)
||
:: pozycje
   ZDP_POZ.index('ZDP_NAG');
   ZDP_POZ.prefix(_ref_old);
   {? ZDP_POZ.first()
   ||
      {!
      |?
         ZD_POZ.cntx_psh();
         _mref:=_mgref:=null;
         ZD_POZ.use(form(8+ZDP_POZ.ZD_POZ));
         ZD_POZ.prefix();
         {? ZD_POZ.seek(ZDP_POZ.ZD_POZ) || _mref:=ZD_POZ.M; _mgref:=ZD_POZ.MG ?};
         ZD_POZ.cntx_pop();
         _del:=ZDP_POZ.del();
         {? ZDP_POZ.name()+2='__' || exec('obl_stan','magazyn_stan',_mref,1,_mgref) ?};
         _del
      !}
   ?};
   {? do_state()<2 & ~Plugin.run('BEFORE_DELTAB_001',ZDP_NAG.ref()) & do_state() || undo() ?};
:: naglowek
   ZDP_NAG.del();

:: przywrocenie masek
   {? _mask_bie<>ST.ODDZ+'__'
   ||
      exec('open','open_tab',ST.ODDZ,2-$(ST.AR));
      ZDP_NAG.clear()
   ?}
||
   undo()
?};

OKR.cntx_pop();
_result


\zdptw_przywroc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zamówienie dostaw - Archiwizuj
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_tab:=ZDP_NAG.sel_aget();
ZDP_NAG.sel_adel();

{? _tab.size()
|| _ok:=FUN.ask('Ilość potwierdzeń zamówień dostaw do przeniesienia z archiwum: %1.\n'
                'Operacja może być czasochłonna.\n\nCzy kontynuować?'@[$_tab.size()])
|| _ok:=2
?};
{? _ok=2 & FUN.ask('Czy przywrócić potwierdzenie zamówień dostaw %1?'@[ZDP_NAG.SYM])
|| exec('zdp_arch','!lzk_zds_parc')
|? _ok=1
|| exec('ini_kom','#message','Przywrócenie zamówień');
   ZDP_NAG.cntx_psh();
   _tab.clear();
   {? _tab.first()
   || {!
      |? {? (ZDP_NAG.clear(); ZDP_NAG.seek(_tab.REF,))
         || exec('zdp_arch','!lzk_zds_parc',1)
         ?};
         _tab.next()
      !}
   ?};
   ZDP_NAG.cntx_pop();
   exec('end_kom','#message')
?};
obj_del(_tab)


\oddzial
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.02]
:: OPIS: Formuła na wartość parametru ODDZIAL
::   WY: ODDZ.KOD
::----------------------------------------------------------------------------------------------------------------------
_wyn:=~~;
ODDZ.cntx_psh();
ODDZ.index('KOD');
ODDZ.prefix();
ODDZ.win_sel('SEL');
{? ODDZ.select() || _wyn:=ODDZ.KOD ?};
ODDZ.cntx_pop();
_wyn


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.14]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zd_clean','zamdst_nag',_mp,_in)

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:40 8fadd663e02027dfce31533a34deaa183c0a791636e9f8488f5ab55da8a6e623c7b44af3363684388d9c9d8e65cdfaa0959d0da078f5c09997e1287cd4fe98b3e0898a95a5d07ce790a5ee979102a05dba7b6a54bd0cafc5480a0d6d0a57931e3bcdb996070117a842bef62065c079ada03fb2e374467a23b51969b94eef8e17
