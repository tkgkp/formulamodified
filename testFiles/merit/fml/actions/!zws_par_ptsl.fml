:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_ptsl.fml
:: Utworzony: 18.02.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły czynności ZWS_PAR_PTSL - Typy słowników.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Obsługa uniwersalnego słownika słowników - główna formuła czynności.
::   WE:
::   WY:
::  OLD: \red_typ/ext_slo.fml
::----------------------------------------------------------------------------------------------------------------------
: Utwórz mapę symbolu słownika na tabelę, okno i numer zakładki
_mapa:=exec('utworz_mape','!zws_par_ptsl');

:: Obsługa przerw - powołanie zmiennych, wypełnianie w grupprac_gruprodz
params_set('slo_kod',obj_new('SLO_KOD','WS','PARENT'));

: Utwórz okienko zarządzania słownikami i ich zawartością
_panel:=exec('utworz_widok','!zws_par_ptsl',_mapa);

: Powołaj struktury wykorzystywane przez słownik GRUPPRAC.
_grupprac:=exec('grupprac_init','!zws_par_ptsl');

: Przekazanie parametrów do wszystkich wywoływanych formuł.
params_set(
   'cfg',_mapa,
   'grupprac',_grupprac,
   'slo_kod',params_get(1).slo_kod
);

: Uzupełnienie danych
exec('utworz_dane','!zws_par_ptsl','UMPRAC','UMZLEC','CHARPRAC');
exec('utworz_dane','!zws_par_ptsl',
   'FORMNA','JEZOB','STZNAJ','OKRDOK','KASACH','FUNDEM','ODDZUS','URZSKA','ROZWUM','RP7DANE','STPWOJ',
   'KRAJ','WOJEW','POWIAT','GMINA','MIASTO','NOTKA','SZKOLA','SZK_TYP','ISOPISZ','ISOPISP','KOMORNIK','WIERZ','ZAL'
);
exec('utworz_dane','!zws_par_ptsl',
   'PRZEDZAK','MIEJSCPR','TYPPOZ','PROFTYP','ZA_FORM','ZA_INSTR','ZA_INSTS','ZA_ZESTS','ZA_ZESTA','SZB_OROD','SZB_PROD',
   'SZK_RODZ','SZK_STAN','SZK_MKS','SZK_STYP','SZK_PLAN','SZK_GRP','ZGL_TYP','WER_WYN','ZZ_OSOBA','STN_TYP',
   'STP_FUNK','TR_KOD','TYP_ZAP'
);
exec('utworz_dane','!zws_par_ptsl',
   'LOKAL','SKUTEK','TYP_FORM','MOB_TYP','POD_REAL','ZP_DET','ZP_OKR','RP_OFE_S','RP_OFE_R','RP_OEST','RP_OSET',
   'RP_PROC','RP_PRET','TYTULZ','DZIEDZIN','AKTNAUK','GRUPPRAC','P_DODINF','P_ODDEL','LISTAT','RZNIP','BADLEKT'
);
exec('utworz_dane','!zws_par_ptsl','PROJWSK1','PROJWSK2','PROJWSK3','PROJWSK4','PROJWSK5',
   'ZAOM','AktOsobB','AktOsobC','DokP6p1','TYPBLOBF','H_STAT'
);

exec('utworz_dane','!zws_par_ptsl','KOTLIMIT','KOT_RODZ','NWOPO');

SLO_TYP.win_sel(_panel);
SLO_TYP.select();

~~


\utworz_dane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wypełnia słownik typów.
::   WE:  _a  [STRING] - symbol typu słownika
::       [_b] [STRING] - symbol typu słownika
::       [_c] [STRING] - symbol typu słownika
::       [_d] [STRING] - symbol typu słownika
::       [_z] [STRING] - symbol typu słownika
::----------------------------------------------------------------------------------------------------------------------
{! _arg:=1.._ |! exec('slo_typ','ext_slo',_[_arg]) !}


\utworz_widok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Buduje okno grupowe do przeglądania typów słowników i ich zawartości
::   WE: _a [TABLE] - alias do tabeli zawierającej mapę widoków
::   WY: akronim utworzonego okna
::----------------------------------------------------------------------------------------------------------------------
: Budowa okienka wertowania
_nr:=0;
_tabn:='Zawartość słownika'@;
_mode:='maximized_with_title';

: Formuły obsługująca akcje, domyślnie wywoływane z bieżącego pliku.
_fml0:='"params_set(params_get()); '+
       'exec(\'"+_a+"\',\'"+{? var_pres(\'_b\')=type_of(\'\') || _b || \'!zws_par_ptsl\' ?}+"\')"';
: Formuła, do której system przekazuje parametr _a.
_fml1:='"params_set(params_get()); '+
       'exec(\'"+_a+"\',\'"+{? var_pres(\'_b\')=type_of(\'\') || _b || \'!zws_par_ptsl\' ?}+"\',_a"+'+
       '{? var_pres(\'_c\')=type_of(\'\') || ",\'"+_c+"\'" || "" ?}+")"';

: Panel zarządzania typami słowników
_wnd:=SLO_TYP.grp_make('Słowniki'@,
:  po wyświetleniu
   "  SLO_TYP.cntx_psh();
      SLO_TYP.index('SYMBOL');
      SLO_TYP.prefix();
      SLO_TYP.f_set('SYMBOL',,'""SLO_TYP"".""SYMBOL"" not in (select KART_DEF.SYMBOL from KART_DEF order by 1)');
      SLO_TYP.actions('WER','W',,1);

      SLO_NAZ.cntx_psh();
      SLO_NAZ.index('NAZWA');

      SLO_RODZ.cntx_psh();
      SLO_RODZ.index('LP');
      SLO_RODZ.dnd_sel('WER',,'records.SLO_RODZ',""exec('slo_rodz_dnd','!zws_par_ptsl')"");

      ADRES.cntx_psh();
      ADRES.index('ADRES');

      RU.cntx_psh();
      RU.index('K');

      ZAL_KOM.cntx_psh();
      ZAL_KOM.index('TYP');

      CP.cntx_psh();
      CP.clear();
      CP.index('CHARPRAW');

      GRUPPRAC.cntx_psh();
      GRUPPRAC.prefix();
      GRUPPRAC.win_edit('RED');

      GRUPRODZ.cntx_psh();
      GRUPRODZ.index('RODZAJ');

      1
   ",
:  identyfikator
   'zws_par_ptsl',
:  położenie
   0,0,
:  zamknięcie
   "  GRUPRODZ.cntx_pop();
      GRUPPRAC.cntx_pop();
      CP.cntx_pop();
      ZAL_KOM.cntx_pop();
      RU.cntx_pop();
      ADRES.cntx_pop();

      SLO_RODZ.dnd_sel('WER',,'records.SLO_RODZ',"""");
      SLO_RODZ.cntx_pop();
      SLO_NAZ.cntx_pop();
      SLO_TYP.f_clear();
      SLO_TYP.cntx_pop();
      1
   "
);

: Nawigator po typach słowników
SLO_TYP.grp_sel(_wnd,,'WER',,
:  po odświeżeniu
   $($_fml0)('slo_typ_ar'),
:  położenie i wysokość
   ,,,
:  przed obsługą
   "",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
SLO_TYP.grp_splt(_wnd,,'vertical','zakładki',',33%');

: ----------------------------------------------------------------------------------------------------------------------
: Zakładka domyślna, dla większości przypadków (dlatego jest jako pierwsza).
: Dla tej zakładki jako symbol słownika wskazujemy <domyślna>.
_nr+=1;
SLO_TYP.grp_sel(_wnd,SLO_NAZ,'ADM',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_naz_bs'),
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_NAZ,'ADM',1,_nr,'<domyślna>');

: ----------------------------------------------------------------------------------------------------------------------
: Załączniki (oparte o SLO_NAZ).
_nr+=1;
SLO_TYP.grp_sel(_wnd,SLO_NAZ,'ADMS',_tabn,
:  po odświeżeniu
   "  params_set(params_get());
      grp_disp(ZAL_KOM,'WER')
   ",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_naz_bs'),
:  po obsłudze
   "  params_set(params_get());
      grp_disp(ZAL_KOM,'WER')
   ",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
SLO_TYP.tab_splt(_wnd,,'horizontal','zal_kom',25);
SLO_TYP.grp_sel(_wnd,ZAL_KOM,'WER',,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "{? ~_a || ZAL_KOM.prefix(SLO_NAZ.ref()) || ZAL_KOM.win_edit('RED') ?}",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
:: !!! Brakuje okienka z rolami. To już nie będą (chyba) I_ROLE ale nie wiadomo co to będzie.
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_NAZ,'ADMS',1,_nr,'ZAL');

: ----------------------------------------------------------------------------------------------------------------------
: SLO_KOD - standardowe zastosowanie.
_nr+=1;
SLO_TYP.grp_sel(_wnd,SLO_KOD,'ADM',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_kod_bs'),
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_KOD,'ADM',1,_nr,
   'LISTAT','TYPPOZ','PROFTYP','SZK_GRP','SZK_RODZ','SZK_STYP','SZK_STAN',
   'ZA_FORM','ZA_ZESTA','ZA_ZESTS','TYP_FORM','STN_TYP','MOB_TYP','AKTNAUK','P_ODDEL','RZNIP','BADLEKT','OKR_UZAS',
   'RODZPRAC'
);
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_KOD,'ADM',1,_nr,
   'ZGL_TYP','WER_WYN','TYP_ZAP','POD_REAL','OBYWATEL','ZAOM','AktOsobB','AktOsobC','DokP6p1','TYPBLOBF','JEZRTL',
   'P_STAT','H_STAT','PPSFT','MET_REZ','WN_PODAT','ZERD_OKN','RODZ_PL'
);
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_KOD,'ADM',1,_nr,
   'KOTLIMIT','KOT_RODZ','KOT_URZA','NWOPO'
);

: ----------------------------------------------------------------------------------------------------------------------
: Grupy pracowników (oparte o SLO_KOD).
_nr+=1;
params_exec('grupprac_gruprodz','!zws_par_ptsl');
SLO_TYP.grp_sel(_wnd,params_get().slo_kod.SLO_KOD,params_get().slo_kod.WS,_tabn,
:  po odświeżeniu
   "  params_set(_par:=params_get());
      SLO_KOD.prefix();
      SLO_KOD.seek(_par.slo_kod.SLO_KOD.SLOREF,);
      {? SLO_KOD.KOD='PRZERWY'
      || GRUPPRAC.actions_grayed('WERG','DPU:d')
      || GRUPPRAC.actions_grayed('WERG')
      ?};
      grp_disp(GRUPPRAC,'WERG')
   ",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_kod_bs'),
:  po obsłudze
   "  params_set(_par:=params_get());
      SLO_KOD.prefix();
      SLO_KOD.seek(_par.slo_kod.SLO_KOD.SLOREF,);
      grp_disp(GRUPPRAC,'WERG')
   ",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
SLO_TYP.tab_splt(_wnd,,'horizontal','grupprac',10);
SLO_TYP.grp_sel(_wnd,GRUPPRAC,'WERG',,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('grupprac_bs'),
:  po obsłudze
   ,
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,'params_get().slo_kod.SLO_KOD',params_get().slo_kod.WS,1,_nr,'GRUPPRAC');

: ----------------------------------------------------------------------------------------------------------------------
: Dodatkowe informacje (oparte o SLO_KOD).
_nr+=1;
SLO_TYP.grp_sel(_wnd,SLO_KOD,'ADM',_tabn,
:  po odświeżeniu
   "  params_set(params_get());
      grp_disp(SLO_RODZ,'WER')
   ",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_kod_bs'),
:  po obsłudze
   "  params_set(params_get());
      grp_disp(SLO_RODZ,'WER')
   ",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
SLO_TYP.tab_splt(_wnd,,'horizontal','slo_rodz',10);
SLO_TYP.grp_sel(_wnd,SLO_RODZ,'WER',,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   $($_fml1)('slo_rodz_bs'),
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,SLO_KOD,'ADM',1,_nr,'P_DODINF');

: ----------------------------------------------------------------------------------------------------------------------
: Adresy instytucji
_nr+=1;
SLO_TYP.grp_sel(_wnd,ADRES,'ADM',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "ADRES.prefix(SLO_TYP.ref)",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,ADRES,'ADM',1,_nr,
   'KOMORNIK','WIERZ','KASACH','FUNDEM','ODDZUS','URZSKA','SZKOLA','PPK_IF'
);

: Certyfikatorzy uprawnień zawodowych
_taddr:=sql('select distinct SLO_TYP.SYMBOL from UPR_ZAWK join SLO_TYP');
{? _taddr.first()
|| {!
   |? exec('utworz_wpis','!zws_par_ptsl',_a,ADRES,'ADM',1,_nr,_taddr.SYMBOL);
      _taddr.next()
   !}
?};

: ----------------------------------------------------------------------------------------------------------------------
: Rodzaje umów o pracę
_nr+=1;
SLO_TYP.grp_sel(_wnd,RU,'ADM_PRAC',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "RU.prefix(SLO_TYP.ref)",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,RU,'ADM_PRAC',1,_nr,'UMPRAC');

: ----------------------------------------------------------------------------------------------------------------------
: Rodzaje umów cywilnoprawnych
_nr+=1;
SLO_TYP.grp_sel(_wnd,RU,'ADM_ZLEC',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "RU.prefix(SLO_TYP.ref)",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,RU,'ADM_ZLEC',1,_nr,'UMZLEC');

: ----------------------------------------------------------------------------------------------------------------------
: Charakter pracy
_nr+=1;
SLO_TYP.grp_sel(_wnd,CP,'WER',_tabn,
:  po odświeżeniu
   "",
:  położenie i wysokość
   ,,,
:  przed obsługą
   "",
:  po obsłudze
   "",
:  utrwalenie, aktywacja, wypełnienie
   ,,_mode
);
exec('utworz_wpis','!zws_par_ptsl',_a,CP,'WER',0,_nr,'CHARPRAC');


_wnd


\utworz_mape
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Tworzy "mapę" dla kodu słownika. Dla każdego kodu ustalany jest akronim tabeli i okienka wertowania oraz numer
::       zakładki, w której został umieszczony widok.
::   WE:
::   WY: alias do tabeli tymczasowej zawierającej mapę
::----------------------------------------------------------------------------------------------------------------------
tab_tmp(1,
:  Symbol typu słownika
   'SYMBOL','STRING[8]',,
:  Pełny akronim tabeli
   'TABELA','STRING[30]',,
:  Akronim okna wertowania
   'WIDOK','STRING[8]',,
:  Zmiana tytułu okienka
   'TYTUL','INTEGER',,
:  Numer zakładki
   'NUMER','INTEGER',
)


\utworz_wpis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła pomocnicza. Dodaje do mapy wpis zależnie od symbolu słownika.
::   WE:  _a  [TABLE]   - alias do tabeli zawierającej mapę widoków
::        _b  [TABLE]   - alias do tabeli słownika
::        _c  [STRING]  - akronim okienka wertowania
::        _d  [STRING]  - zmiana tytułu okienka
::        _e  [INTEGER] - numer zakładki widoku
::       [_f] [STRING]  - symbol typu słownika
::       [_g] [STRING]  - symbol typu słownika
::       [_h] [STRING]  - symbol typu słownika
::       [_i] [STRING]  - symbol typu słownika
::       [_z] [STRING]  - symbol typu słownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_a.blank();
_a.TABELA:={? +|(!_b) || !_b || _b ?};
_a.WIDOK:=_c;
_a.TYTUL:=_d;
_a.NUMER:=_e;
{! _arg:=6.._
|! _a.SYMBOL:=_[_arg];
   _a.add()
!}


\slo_typ_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Dołącz - po" w oknach wertowania tabeli SLO_TYP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SLO_TYP.f_active()
|| SLO_TYP.f_add()
?}


\slo_typ_spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Weryfikuje poprawność informacji opisujących typ słownika.
::   WY: wartość zwracana przez metodę table obiektu __CHK
::  OLD: \spr_typ/ext_slo.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(SLO_TYP,,'SYMBOL','OPIS'))<>''
|| return(_chk)
?};

_mkod:=MS.fld_len(SLO_KOD,'KOD');
{? SLO_TYP.DL_KOD<0 | _mkod<SLO_TYP.DL_KOD
|| return(__CHK.err_fld(SLO_TYP,'DL_KOD',1,'Dozwolone wartości z przedziału %1-%2.'@ ['0',$_mkod]))
?};

_mnazwa:=MS.fld_len(SLO_NAZ,'NAZWA');
{? SLO_TYP.DL_NAZ<0 | _mnazwa<SLO_TYP.DL_NAZ
|| return(__CHK.err_fld(SLO_TYP,'DL_NAZ',1,'Dozwolone wartości z przedziału %1-%2.'@ ['0',$_mnazwa]))
?};

__CHK.index(SLO_TYP,-menu_txt()='popraw')=''


\slo_typ_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po odświeżeniu okienka WER tabeli SLO_TYP. Funkcja ma za zadanie pokazanie odpowiedniej zakładki (ukrycie
::       pozostałych) i odświeżenie odpowiedniego okienka (na tej zakładce).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_cfg:=_par.cfg;

tab_hide(,1,'zakładki');
{? _cfg.find_key(SLO_TYP.SYMBOL,) | _cfg.find_key('<domyślna>',)
|| EDIT_VAR.SLO_TYP:=SLO_TYP.SYMBOL;
   tab_show(_cfg.NUMER,'zakładki');
   _tab:=($_cfg.TABELA)();
   {? _cfg.TYTUL
:     Zmiana tytułu dostępna jest tylko dla "bieżącego" okna.
   || _tab.cntx_psh();
      _tab.win_sel(_cfg.WIDOK);
      _tab.hdr_sel();
      _tab.hdr_sel(SLO_TYP.OPIS);
      _tab.cntx_pop()
   ?};
:
   grp_disp(_tab,_cfg.WIDOK)
?}


\slo_naz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu rekordu tabeli SLO_NAZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('slo_naz_chk','ext_slo',(-menu_txt()='popraw'))


\slo_naz_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka WER tabeli SLO_NAZ.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| SLO_NAZ.prefix(SLO_TYP.ref())
|| SLO_NAZ.win_edit('RED')
?}


\slo_kod_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyzwalacza przed usunięciem rekordu tabeli SLO_KOD.
::   WE:
::   WY: 1 - Właściwa akcja może zostać wykonana.
::       0 - Usunięcie rekordu nie jest możliwe.
::----------------------------------------------------------------------------------------------------------------------
SLO_TYP.cntx_psh();
_typ:=SLO_KOD.SLO_TYP().SYMBOL;
SLO_TYP.cntx_pop();
{? _typ='GRUPPRAC'
|| exec('del_ndx','#table',GRUPPRAC,'GRPOD',SLO_KOD.ref())
|? _typ='P_DODINF'
|| exec('del_ndx','#table',SLO_RODZ,'KOD',SLO_KOD.ref())
|| 1
?}


\slo_kod_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed akcją Popraw - blokada modyfikacji zapisu systemowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SLO_KOD.SYSTEM='T'
|| FUN.info('Zapis systemowy. Modyfikacja nie jest możliwa.'@);
   0
|| 1
?}


\slo_kod_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed akcją Usuń - blokada usunięcia zapisu systemowego.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SLO_KOD.SYSTEM='T'
|| FUN.info('Zapis systemowy. Usunięcie nie jest możliwa.'@);
   return(0)
?};

SLO_TYP.cntx_psh();
_typ:=SLO_KOD.SLO_TYP().SYMBOL;
SLO_TYP.cntx_pop();

{? '|GRUPPRAC|P_DODINF|'*('|%1|' [_typ])
|| {? {? SLO_KOD.count() || exec('del_conf','#table') || exec('del_ask','#table') ?} || SLO_KOD.del() ?};
   0

|? _typ='TYP_FORM'
|| FM.cntx_psh();
   FM.index('TP');
   FM.prefix(SLO_KOD.KOD,);
   _uzywany:=FM.first();
   FM.cntx_pop();
   {? _uzywany
   || FUN.info('Zestaw posiada formuły.\nUsunięcie niemożliwe.'@);
      0
   || 1
   ?}

|| 1
?}


\slo_kod_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach wertowania tabeli SLO_KOD.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _ws:=cur_win(1,1);
   {? SLO_TYP.SYMBOL='ZAOM' | SLO_TYP.SYMBOL='WN_PODAT'
::    Zapisy w słowniku ZAOM (Miejsca użycia załączników) oraz  WN_PODAT (Wnioski - zwolniony podatek)
::    mogą być tworzone wyłącznie formułowo - wyłączamy wszystkie akcje okienka wertowania.
   || SLO_KOD.actions(_ws,'dpu:d',,1)

::    Jeżeli to nie jest słownik ZAOM, to najpierw włączamy wszystkie akcje okienka wertowania.
   || SLO_KOD.actions(_ws,':',,1);
::    Dla zapisów systemowych wyszarzamy akcje "Popraw" i "Usuń".
      SLO_KOD.actions_grayed(_ws,{? SLO_KOD.SYSTEM='T' || 'pu' || ':' ?})
   ?}
?};
0


\slo_kod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu rekordu tabeli SLO_KOD.
::   WE:
::   WY:
::  OLD: \spr_kod/ext_slo.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(SLO_KOD,,'KOD','NAZWA'))<>''
|| return(_chk)
?};
SLO_KOD.SLO_TYP();
{? SLO_TYP.DL_KOD>0 & SLO_TYP.DL_KOD<+SLO_KOD.KOD
|| return(__CHK.err_fld(SLO_KOD,'KOD',1,
      'Maksymalna liczba znaków w polu (%1) została przekroczona (%2).'@ [$SLO_TYP.DL_KOD,$(+SLO_KOD.KOD)]))
|? SLO_TYP.DL_NAZ>0 & SLO_TYP.DL_NAZ<+SLO_KOD.NAZWA
|| return(__CHK.err_fld(SLO_KOD,'NAZWA',1,
      'Maksymalna liczba znaków w polu (%1) została przekroczona (%2).'@ [$SLO_TYP.DL_NAZ,$(+SLO_KOD.NAZWA)]))
?};
__CHK.index(SLO_KOD,-menu_txt()='popraw',,'KOD','NAZWA')=''


\slo_kod_ax
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [20.42]
:: OPIS: Po modyfikacji zawartości tabeli SLO_KOD w okienkach wertowania.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('tab_fmod_ax','#table',SLO_KOD);
~~


\slo_kod_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Przed obsługą okienka ADM tabeli SLO_KOD.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| SLO_KOD.prefix(SLO_TYP.ref());
   cur_tab(1,1).first()
|| SLO_KOD.win_edit('RED')
?}


\slo_rodz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('slo_rodz_chk','!zws_par_ptsl',0)
:: Sprawdzenie wypełnienia wymaganych pól powiodło się - zajmijmy się polem LP. Zakładamy, że jego wartość jest
:: poprawna. Należy jedynie zrobić dla niego miejsce.
|| exec('add_before','#order',SLO_RODZ,'LP','LP',SLO_RODZ.LP,SLO_RODZ.SLO_KOD)
?}


\slo_rodz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('slo_rodz_chk','!zws_par_ptsl',1)


\slo_rodz_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli SLO_RODZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
{? (SLO_RODZ.NAZWA<>bfld('NAZWA') | SLO_RODZ.LP<>bfld('LP')) & exec('lic','#b_domain','POR')
|| P_DODINF.cntx_psh();
   P_DODINF.trig_off('*','*');
   P_DODINF.index('S1');
   P_DODINF.prefix(SLO_RODZ.ref());
   {? P_DODINF.first()
   || {!
      |? P_DODINF.put(,1);
         P_DODINF.next()
      !}
   ?};
   P_DODINF.trig_on('*','*');
   P_DODINF.cntx_pop()
?};
~~


\slo_rodz_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SLO_RODZ.SYSTEM='T'
|| undo('Zapis systemowy - usunięcie niemożliwe.'@);
   0
|| 1
?}


\slo_rodz_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli SLO_RODZ.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};
exec('del_after','#order',SLO_RODZ,'LP','LP',bfld('LP'),bfld('SLO_KOD'));
~~


\slo_rodz_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli SLO_RODZ.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw.
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
__CHK.validate(SLO_RODZ,
   $("_a.table(_b,"+$_put+",,'SLO_KOD','LP','KOD','NAZWA','UNIKALNY','SYSTEM')"),
   $("SLO_KOD.cntx_psh();
      SLO_KOD.prefix();
      _kod:=SLO_RODZ.SLO_KOD().KOD;
      SLO_KOD.cntx_pop();
      {? _kod='KONTAKT' & +SLO_RODZ.NAZWA>20
      || _a.err_fld(_b,'NAZWA',1,'"+
            'Dla typu KONTAKT nazwa rodzaju może mieć co najwyżej 20 znaków długości.'@+"'
         );
         SLO_RODZ.NAZWA:=20+SLO_RODZ.NAZWA;
         'NAZWA'
      || ''
      ?}
   "),
   "_a.in_set(_b,'UNIKALNY',,'T','N')",
   "_a.in_set(_b,'SYSTEM',,'T','N')"
)


\slo_rodz_slo_kod_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wartość początkowa pola SLO_RODZ.SLO_KOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_KOD.ref()


\slo_rodz_kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Przed redagowaniem pola SLO_RODZ.KOD.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
~(-menu_txt()='popraw' & SLO_RODZ.SYSTEM='T')


\slo_rodz_akcje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Funkcja dla bieżącego rekordu tabeli SLO_RODZ określa dostępność akcji w oknie wertowania.
::   WE:
::   WY: Tablica z elementami nazwanymi.
::----------------------------------------------------------------------------------------------------------------------
_akcje:=obj_new('wyzej','nizej','usun');
{! _lp:=1 .. obj_len(_akcje)
:: Wstępnie - wszystkie akcje są niedostępne.
|! _akcje[_lp]:=0
!};

{? SLO_RODZ.get()
|| _akcje.usun:=SLO_RODZ.SYSTEM='N';
   SLO_RODZ.cntx_psh();
   SLO_RODZ.index('LP');
   SLO_RODZ.prefix(SLO_RODZ.SLO_KOD);
   _lp:=SLO_RODZ.LP;
   _akcje.wyzej:=SLO_RODZ.find_key(_lp-1);
   _akcje.nizej:=SLO_RODZ.find_key(_lp+1);
   SLO_RODZ.cntx_pop()
?};

_akcje


\slo_rodz_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli SLO_RODZ.
::       Dołączany rekord zostanie umieszczony PRZED bieżącym, musi zatem otrzymać jego numer.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dolacz','#order','LP','before',,"exec('slo_rodz_chk','!zws_par_ptsl',0)")


\slo_rodz_dolaczza_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Dołącz za - przed" w oknach wertowania tabeli SLO_RODZ.
::       Dołączany rekord zostanie umieszczony PO bieżącym, musi zatem otrzymać numer o 1 większy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('dolacz','#order','LP','after',,"exec('slo_rodz_chk','!zws_par_ptsl',0)")


\slo_rodz_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Popraw - przed" w oknach wertowania tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? SLO_RODZ.edit("exec('slo_rodz_chk','!zws_par_ptsl',1)")
|| SLO_RODZ.put()
?}


\slo_rodz_usun_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Usuń - grupa przed" w oknach wertowania tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
1


\slo_rodz_wyzej_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Przesuń wyżej" w oknach tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('slo_rodz_akcje','!zws_par_ptsl').wyzej
|| exec('przesun','#order','LP','W',,1)
|| melody()
?}


\slo_rodz_nizej_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Przesuń niżej" w oknach tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('slo_rodz_akcje','!zws_par_ptsl').nizej
|| exec('przesun','#order','LP','N',,1)
|| melody()
?}


\slo_rodz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa akcji "Rekord - przed" w oknie WER tabeli SLO_RODZ.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _akcje:=exec('slo_rodz_akcje','!zws_par_ptsl');
   _ha:='';
   {? ~_akcje.wyzej | ~_akcje.nizej
   || _ha+='E('+{? ~_akcje.wyzej || 'W' || '' ?}+{? ~_akcje.nizej || 'N' || '' ?}+')'
   ?};
   {? ~_akcje.usun
   || _ha+='U'
   ?};
   SLO_RODZ.actions_grayed('WER',_ha)
?};
0


\slo_rodz_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Obsługa drag&drop w oknach tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: Numery przenoszonych rekordów (REF, CRC, POS).
_SRC:=dnd_info('dropped_records');
{? type_of(_SRC)=type_of(~~)
|| return(0)
?};

:: Złączenie do rekordu, nad którym upuszczono przenoszone rekordy
:: lub null() dla upuszczenia poza wierszami z rekordami.
_dest:=dnd_info('dest_record');

:: Maska, z której pochodzą przenoszone rekordy.
_name:=dnd_info('table_name');

{? _name=SLO_RODZ.name() & FUN.ask('Zmiana kolejności elementów.'@+'\n'+'Kontynuować?'@)
:: Zmiana kolejności grup.
|| SLO_RODZ.cntx_psh();
   SLO_RODZ.index('LP');
   SLO_RODZ.prefix(SLO_RODZ.SLO_KOD);
   do();
   {? SLO_RODZ.last() & (_dest=null() | _dest=SLO_RODZ.ref())
::    Upuszczane rekordy (poza wierszami lub nad ostatnim) znajdą się na końcu.
   || _min:=_lp:=SLO_RODZ.LP+1;
      _loop:=_SRC.first();
      {!
      |? _loop
      |! {? SLO_RODZ.seek(_SRC.REF,)
         || {? _min>SLO_RODZ.LP
            || _min:=SLO_RODZ.LP
            ?};
            SLO_RODZ.LP:=_lp;
            _lp+=SLO_RODZ.put()
         ?};
         _loop:=_SRC.next()
      !};
      exec('del_after','#order',SLO_RODZ,'LP','LP',_min,SLO_RODZ.SLO_KOD)

::    Sprawdzamy, czy upuszczenie miało miejsce na zaznaczone rekordy (i doszłoby do zapętlenia).
   |? _SRC.cntx_psh();
      _SRC.index(_SRC.ndx_tmp(,,'REF',,));
      _loop:=_SRC.find_key(_dest);
      _SRC.cntx_pop();
      _loop
   || melody()

   || _min:=~~;
      {? _SRC.first()
      || {!
         |? {? SLO_RODZ.seek(_SRC.REF)
            || {? _min=~~ | _min>SLO_RODZ.LP
               || _min:=SLO_RODZ.LP
               ?};
               _SRC.next()
            ?}
         !}
      ?};
      _lp:={? SLO_RODZ.seek(_dest) || SLO_RODZ.LP || ~~ ?};

      {? _min=~~ | _lp=~~
::       Coś poszło nie tak ...
      || undo();
         melody()

      ||
::       Jeżeli choć jeden z upuszczonych rekordów ma LP mniejsze niż LP rekordu _dest, to rekordy należy dodawać
::       PO _dest, w przeciwnym razie PRZED _dest. Innymi słowy: upuszczony rekord uzyska numer rekordu źródłowego
::       lub o 1 większy.
         _start:=_lp+(_min<_lp);
::       Przygotowanie miejsca na upuszczone rekordy.
         {? SLO_RODZ.last()
         || _size:=_SRC.size();
            {!
            |? {? SLO_RODZ.LP>=_start
               || SLO_RODZ.LP+=_size;
                  SLO_RODZ.put();
                  SLO_RODZ.prev()
               ?}
            !}
         ?};
::       Właściwe przenoszenie rekordów.
         {? _SRC.first()
         || {!
            |? {? SLO_RODZ.seek(_SRC.REF,)
               || SLO_RODZ.LP:=_start;
                  _start+=SLO_RODZ.put()
               ?};
               _SRC.next()
            !}
         ?};
::       I przenumerowanie - usunięcie wolnych miejsc po przeniesionych rekordach.
         exec('del_after','#order',SLO_RODZ,'LP','LP',_min,SLO_RODZ.SLO_KOD)

      ?}
   ?};
   {? ~end()
   || melody()
   ?};
   SLO_RODZ.cntx_pop()
?};
~~


\slo_rodz_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed obsługą okienka WER tabeli SLO_RODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a
|| SLO_RODZ.prefix(SLO_KOD.ref())
|| SLO_RODZ.win_edit('RED')
?}


\grupprac_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła przygotowujące tabelę tymczasową i odpowiednie okienka redagowania dla grupowego dołączania pracowników
::       do grupy lub zmiany dat.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_grupprac:=obj_new('TAB','WE1','WE2','ERR');

_grupprac.TAB:=tab_tmp(1,
   'ZOD','INTEGER','"%1" - zmieniać?'@ [MS.name(GRUPPRAC,'OD')],
   'OD','DATE',MS.name(GRUPPRAC,'OD'),
   'ZDO','INTEGER','"%1" - zmieniać?'@ [MS.name(GRUPPRAC,'DO')],
   'DO','DATE',MS.name(GRUPPRAC,'DO')
);

_grupprac.TAB.fld_fml('ZOD','AFTER_EDIT',
   "_tab:=cur_tab(); _tab.efld_opt(_tab.win_edit('?'),'enable='+$_tab.ZOD,,'OD')");
_grupprac.TAB.fld_fml('OD','BEFORE_EDIT',"cur_tab().ZOD");
_grupprac.TAB.fld_fml('ZDO','AFTER_EDIT',
   "_tab:=cur_tab(); _tab.efld_opt(_tab.win_edit('?'),'enable='+$_tab.ZDO,,'DO')");
_grupprac.TAB.fld_fml('DO','BEFORE_EDIT',"cur_tab().ZDO");

_grupprac.WE1:=_grupprac.TAB.mk_edit('Parametry'@,,'#grp1popraw');
_grupprac.TAB.win_esep(_grupprac.WE1,'Dane podstawowe');
_grupprac.TAB.win_efld(_grupprac.WE1,,'ZOD',,,,,,,,
   'Czy w zaznaczonych wierszach zmienić wartość pola "%1"?'@ [MS.name(GRUPPRAC,'OD')],'check-box',,"1","0");
_grupprac.TAB.win_efld(_grupprac.WE1,,'OD',,,,,,,,'Nowa wartość pola "Data od"');
::_grupprac.TAB.win_efld(_grupprac.WE1,AH,'H',,,,,1);
_grupprac.TAB.win_efld(_grupprac.WE1,,'ZDO',,,,,,,,
   'Czy w zaznaczonych wierszach zmienić wartość pola "%1"?'@ [MS.name(GRUPPRAC,'DO')],'check-box',,"1","0");
_grupprac.TAB.win_efld(_grupprac.WE1,,'DO',,,,,,,,'Nowa wartość pola "Data do"');
exec('ok_esc','#window',_grupprac.TAB,_grupprac.WE1,,,,,,,exec('text_red_ok','#window'));

_grupprac.WE2:=_grupprac.TAB.mk_edit('Parametry',,'#grp2popraw');
_grupprac.TAB.win_efld(_grupprac.WE2,,'OD',,,,,,,,MS.comment(GRUPPRAC,'OD'));
_grupprac.TAB.win_efld(_grupprac.WE2,,'DO',,,,,,,,MS.comment(GRUPPRAC,'DO'));
exec('ok_esc','#window',_grupprac.TAB,_grupprac.WE2,,,,,,,exec('text_red_ok','#window'));
_grupprac.TAB.efld_opt(_grupprac.WE2,'mark=1',,'OD');

_grupprac


\grupprac_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji Dołącz dla tabeli GRUPPRAC.
::   WE:
::   WY:
::  OLD: \act/grupprac.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
params_set(_par);
_grupprac:=_par.grupprac;

_grupprac.ERR:=0;
_grupprac.TAB.blank();
_grupprac.TAB.OD:=date(,,1);

_grupprac.TAB.ZOD:=_grupprac.TAB.ZDO:=1;
_grupprac.TAB.win_edit(_grupprac.WE2);
{? _grupprac.TAB.edit(
      "  _tab:=cur_tab();
         _chk:=__CHK.record(_tab,,'OD');
         {? _chk<>'' || return(_chk) ?};
         {? _tab.DO<>date(0,0,0) & _tab.DO<_tab.OD
         || FUN.info('\"%1\" nie może byc wcześniejsza niż \"%2\".'@ ['Data do'@,'Data od'@]);
            'DO'
         || ''
         ?}
      "
   )
|| _var:=VAR_DEL.new(,"obj_new(@.CLASS.JCQ)");
   _KOMM:=($_var)();
   _KOMM.init(255);
   _args:=exec('wybierz_args','pracownik');
   _args.DOMAIN:='PKD';
   _ret:=exec('wybierz','pracownik',_args);
   {? _ret.STATUS='' & _ret.P.first()
   || {!
      |? {? P.seek(_ret.P.SQL)
         || GRUPPRAC.blank(1);
            GRUPPRAC.GR:=SLO_KOD.ref();
            GRUPPRAC.OD:=_grupprac.TAB.OD;
            GRUPPRAC.DO:=_grupprac.TAB.DO;
            GRUPPRAC.P:=P.ref();
            _txt:=exec('ae','grupprac',2);
            {? _txt=''
            || GRUPPRAC.add()
            || _grupprac.ERR+=1;
               _KOMM.add(gsub(_txt,'\n',' '))
            ?}
         ?};
         _ret.P.next()
      !}
   ?};

   GRUPPRAC.f_rfresh();
   {? _grupprac.ERR
   || _KOMM.select('Nie dołączono do grupy: %1 - %2'@[GRUPPRAC.GR().KOD,SLO_KOD.NAZWA],'Współpracownicy'@)
   ?};
   obj_del(_KOMM); &_KOMM
?};
0


\grupprac_pbg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Popraw - przed" dla tabeli GRUPPRAC.
::   WE:
::   WY:
::  OLD: \act/grupprac.fml
::----------------------------------------------------------------------------------------------------------------------
_grupprac:=params_get().grupprac;

_grupprac.ERR:=0;
_grupprac.TAB.blank();
_grupprac.TAB.efld_opt(_grupprac.WE1,'enable=0',,'OD');
_grupprac.TAB.efld_opt(_grupprac.WE1,'enable=0',,'DO');
_grupprac.TAB.win_edit(_grupprac.WE1);
_grupprac.TAB.edit("
   _tab:=cur_tab();
   {? _tab.ZOD=0 & _tab.ZDO=0
   || FUN.info('Co najmniej jedno z pól powinno być zaznaczone.'@);
      0
   |? _tab.ZOD & _tab.OD<>date(0,0,0)
   || __CHK.record(_tab,,'OD')
   || ''
   ?}")


\grupprac_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli GRUPPRAC.
::   WE:
::   WY:
::  OLD: \act/grupprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? GRUPPRAC.sel_size()=0
:  ObsŁuga pojedynczego rekordu.
|| {? GRUPPRAC.edit("exec('ae','grupprac')")
   || GRUPPRAC.put()
   ?}

|| _grupprac:=params_get().grupprac;
   {? _grupprac.TAB.ZOD || GRUPPRAC.OD:=_grupprac.TAB.OD ?};
   {? _grupprac.TAB.ZDO || GRUPPRAC.DO:=_grupprac.TAB.DO ?};
   {? exec('ae','grupprac',0)=''
   || GRUPPRAC.put()
   || _grupprac.ERR+=1
   ?}
?}


\grupprac_pa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - po" dla tabeli GRUPPRAC.
::   WE:
::   WY:
::  OLD: \act/grupprac.fml
::----------------------------------------------------------------------------------------------------------------------
0


\grupprac_pag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji grupowej "Popraw - po" dla tabeli GRUPPRAC.
::   WE:
::   WY:
::  OLD: \act/grupprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? params_get().grupprac.ERR
|| FUN.info('Nie we wszystkich zapisach udało się zmienić daty.'@)
?}


\grupprac_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
::  MOD: MicKoc [22.26]
:: OPIS: Przed obsługą okienka WERG tabeli GRUPPRAC.
::   WE: _a [INTEGER] - Moment (przyczyna) wywołania:
::                      0 - Okienko odświeżane na skutek wywołania grp_disp().
::                      1 - Okienko zostało aktywowane.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? GRUPPRAC.sel_size()
|| GRUPPRAC.sel_adel()
?};
GRUPPRAC.f_set(
   'OSOBA(NAZWISKO), OSOBA(PIERWSZE), P(T), OD, DO',
   'join P using(GRUPPRAC.P,P.REFERENCE) join OSOBA using(P.OSOBA, OSOBA.REFERENCE)',
   'GR=\':_a\' and P.FIRMA=:_b',
   params_get().slo_kod.SLO_KOD.SLOREF,
   exec('ref_firma','ustawienia')
)


\zal_kom_typ_zal_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wartość początkowa pola ZAL_KOM.TYP_ZAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SLO_NAZ.ref()


\zal_kom_czw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola ZAL_KOM.CZW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_enable:=~exec('lic','#b_domain','POR') & ZAL_KOM.CZW='J';
ZAL_KOM.efld_opt('RED','enable=%1' [$_enable],,'CZR')


\zal_kom_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - przed" w okienku WER tabeli ZAL_KOM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_enable:=~exec('lic','#b_domain','POR') & ZAL_KOM.CZW='J';
ZAL_KOM.efld_opt('RED','enable=%1' [$_enable],,'CZR');
0


\zal_kom_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu rekordu tabeli ZAL_KOM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_afld:='TEXT';
{? form(ZAL_KOM.memo_txt(,0,_afld))=''
|| __CHK.err_empty('Treść komunikatu');
   _afld
|| ''
?}


\ru_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła wykorzystywana w akcjach okienko przed okien tabeli RU
::   WE: _a [STRING] - akronim okienka redakcji
::----------------------------------------------------------------------------------------------------------------------
RU.win_edit(_a);
1


\ru_prac_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na okienko przed okienek ADM_PRAC i UMPRAC tabeli RU
::----------------------------------------------------------------------------------------------------------------------
exec('ru_bw','!zws_par_ptsl','PRAC');
exec('slo_x_x_ob','ext_slo',RU,'O','TYP')


\ru_zlec_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła na okienko przed okienek ADM_ZLEC i UMZLEC tabeli RU
::----------------------------------------------------------------------------------------------------------------------
exec('ru_bw','!zws_par_ptsl','ZLEC');
exec('slo_x_x_ob','ext_slo',RU,'O','TYP')


\ru_spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formula na rekord po tabeli RU
::  OLD: \__ru/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(RU,-menu_txt()='popraw',,'K','O');
{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
?};

{? RU.RKU<>'P' || RU.PKU:=0 ?};
{? RU.PKU<0 | RU.PKU>100
|| __CHK.err_fld(RU,'PKU',1,'Dozwolone wartości z przedziału %1-%2.'@ ['0','100'])

|? RU.PPD<0 | RU.PPD>100
|| __CHK.err_fld(RU,'PPD',1,'Dozwolone wartości z przedziału %1-%2.'@ ['0','100'])

|| ''
?}


\cp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu rekordu tabeli CP.
::   WE:
::   WY:
::  OLD: \rek_po_cp/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(CP,-menu_txt()='popraw',,'R','S','O');
{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
|| CP.CP:=CP.R+'/'+CP.S;
   1
?}


\slo_naz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Obsługa akcji "Rekord - przed" w oknach wertowania tabeli SLO_NAZ.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _ws:=cur_win(1,1);
:: Najpierw włączamy wszystkie akcje okienka wertowania.
   SLO_NAZ.actions(_ws,':',,1);
:: Dla zapisów systemowych wyszarzamy akcje "Popraw" i "Usuń".
   SLO_NAZ.actions_grayed(_ws,{? SLO_NAZ.SYSTEM='T' || 'pu' || ':' ?})

?};
0


\slo_kod_x_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem okien SLO, SLO2 i WER tabeli SLO_KOD.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('slo_x_x_ob','ext_slo',SLO_KOD)


\slo_naz_x_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem okien SLO i WER tabeli SLO_NAZ.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('slo_x_x_ob','ext_slo',SLO_NAZ)


\ru_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli RU. Wykorzystywana zarówno przez
::       jTerma jak i webTerma.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr istotny dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(RU)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='RKU'
|| _set(_TAB,_we,_grp_ident,'enable=%1' [$(RU.RKU='P')],RU,'PKU')
?};

1


\ru_rku_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła po redagowaniu wykorzystywana dla pola RKU tabeli RU
::----------------------------------------------------------------------------------------------------------------------
exec('ru_efld_opt','!zws_par_ptsl');
1


\ru_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła dla akcji "Dołącz - przed" w okienkach ADM_ZLEC,UMZLEC tabeli RU
::----------------------------------------------------------------------------------------------------------------------
:: Przypisanie domyślnej wartości dla określenia wymagalności pól
RU.RKU:='P';
exec('ru_efld_opt','!zws_par_ptsl','*',RU,'ZLEC');

1


\ru_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Formuła dla akcji "Popraw - przed" w okienku UMZLEC tabeli RU
::----------------------------------------------------------------------------------------------------------------------
exec('ru_efld_opt','!zws_par_ptsl','*',RU,'ZLEC');

1


\ru_pku_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Przed wyświetleniem pola RU.PKU
::----------------------------------------------------------------------------------------------------------------------
RU.RKU='P'


\ru_zlec_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.37]
:: OPIS: Obsługa akcji "Wyświetl - przed" tabeli RU.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ru_efld_opt','!zws_par_ptsl','*',RU,'ZLEC');
RU.display()


\grupprac_gruprodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [22.26]
:: OPIS: Okno i interfejs obsługi grupowania grup dla przerwy niepłatnej
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_SLO_KOD:=tab_tmp(3,
:  Pola prezentowane
   'PARENT','TREE_REF','Rodzic',
   'KOD','STRING[8]','Kod',
   'NAZWA','STRING[150]','Nazwa',
   'SYSTEM','STRING[20]','Sys?',
:  Pola techniczne
   'SLOREF','STRING[16]','$SLO_KOD.ref()'
);
_we:=_SLO_KOD.mk_edit('Pozycja słownika'@,0,'#grpgredit');
_SLO_KOD.win_edit(_we);
_SLO_KOD.win_patt(_we);
_SLO_KOD.win_esep(_we,'Dane podstawowe'@);
_SLO_KOD.win_efld(_we,,'KOD',,,70,,,'Kod'@,,'Unikalny symbol / kod'@);
_SLO_KOD.efld_opt(_we,'mark=1',,'KOD');
_SLO_KOD.win_efld(_we,,'NAZWA',,,70,,,'Nazwa'@,,'Krótki opis'@);
_SLO_KOD.efld_opt(_we,'mark=1',,'NAZWA');
exec('ok_esc','#window',_SLO_KOD,_we,,,,,,,,exec('text_red_ok','#window'));
_ws:=_SLO_KOD.mk_sel('','P',,'#grpgrselect',,,,1);
_SLO_KOD.win_fld(_ws,,'KOD',,,12,,,'Kod'@,,'Unikalny symbol / kod'@);
_SLO_KOD.win_fld(_ws,,'NAZWA',,,70,,,'Nazwa'@,,'Krótki opis'@);
_SLO_KOD.win_fld(_ws,,'SYSTEM',,,-5,,1,'Systemowa'@,,'Znacznik blokady'@,2,,"'T'","'N'","''");

_for_b:="
   _slo_kod:=params_get().slo_kod;
   {? _slo_kod.SLO_KOD.SYSTEM='T'
   || _slo_kod.SLO_KOD.actions_grayed(_slo_kod.WS,'UP')
   |? _slo_kod.SLO_KOD.PARENT
   || _slo_kod.SLO_KOD.actions_grayed(_slo_kod.WS,'D')
   || _slo_kod.SLO_KOD.actions_grayed(_slo_kod.WS)
   ?}
";
_for_a:="
   _slo_kod:=params_get().slo_kod.SLO_KOD;
   SLO_KOD.blank();
   SLO_KOD.KOD:=_slo_kod.KOD;
   SLO_KOD.NAZWA:=_slo_kod.NAZWA;
   exec('slo_kod_ae','!zws_par_ptsl')
";
_SLO_KOD.win_act(_ws,1,'Rekord',,,,,_for_a);
_SLO_KOD.win_act(_ws,,'Rekord',,,,_for_b,_for_a);

_for_b:="
   _slo_kod:=params_get().slo_kod;
   _slo_kod.PARENT:={? _slo_kod.SLO_KOD.KOD='PRZERWY' || _slo_kod.SLO_KOD.ref() || 0 ?};
   1
";
_for_a:="
   {? SLO_KOD.add()
   || _slo_kod:=params_get().slo_kod;
      _slo_kod.SLO_KOD.SYSTEM:=SLO_KOD.SYSTEM;
      _slo_kod.SLO_KOD.SLOREF:=$SLO_KOD.ref();
      _slo_kod.SLO_KOD.PARENT:=_slo_kod.PARENT;
      _slo_kod.PARENT:=0;
      {? _slo_kod.SLO_KOD.put() & _slo_kod.SLO_KOD.PARENT
      || SLO_KOD.cntx_psh();
         _ref:=exec('kod_ref','ext_slo','GRUPPRAC','PRZERWY','Grupy niepłatnych przerw w pracy');
         SLO_KOD.cntx_pop();
         exec('add2rodz','grupprac',_ref,SLO_KOD.ref())
      ?}
   ?}
";
_SLO_KOD.win_act(_ws,1,'Dołącz',,,,,_for_a);
_SLO_KOD.win_act(_ws,,'Dołącz',,,,_for_b,_for_a);
_for_b:="{? SLO_KOD.SYSTEM='T' || FUN.info('Grupa systemowa. Zmiany niemożliwe.'@); 0 || 1 ?}";
_for_a:="
   _slo_kod:=params_get().slo_kod.SLO_KOD;
   SLO_KOD.KOD:=_slo_kod.KOD;
   SLO_KOD.NAZWA:=_slo_kod.NAZWA;
   {? ~SLO_KOD.put()
   || SLO_KOD.get();
      _slo_kod.KOD:=SLO_KOD.KOD;
      _slo_kod.NAZWA:=SLO_KOD.NAZWA;
      _slo_kod.put()
   ?}
";
_SLO_KOD.win_act(_ws,,'Popraw',,,,_for_b,_for_a);
_for_b:="
   _odp:=0;
   {? SLO_KOD.SYSTEM='T'
   || FUN.info('Grupa systemowa. Zmiany niemożliwe.'@)
   || GRUPPRAC.cntx_psh();
      GRUPPRAC.index('GRPOD');
      GRUPPRAC.prefix(SLO_KOD.ref());
      {? GRUPPRAC.first()
      || FUN.info('Grupa nie jest pusta. Usunięcie niemożliwe.'@)
      || _odp:=1
      ?};
      GRUPPRAC.cntx_pop();
      {? _odp
      || R_PRZER.cntx_psh();
         R_PRZER.index('GRUPOD');
         R_PRZER.prefix(SLO_KOD.ref());
         {? R_PRZER.size()
         || FUN.info('Grupa wykorzystana w definicji \"Pracy zmianowej\". Usunięcie niemożliwe.'@);
            _odp:=0
         || _odp:=1
         ?};
         R_PRZER.cntx_pop()
      ?}
   ?};
   _odp
";
_for_a:="
::    zalozenie transakcji
   _mydo:=do_state()=0;
   {? _mydo || do() ?};
   GRUPRODZ.cntx_psh();
   GRUPRODZ.index('GR');
   GRUPRODZ.prefix(SLO_KOD.ref());
   GRUPRODZ.first() & GRUPRODZ.del();
   GRUPRODZ.cntx_pop();
   SLO_KOD.del();
   {? _mydo || end() ?}
";
_SLO_KOD.win_act(_ws,,'Usuń',,,,_for_b,_for_a);
_for:="
   _slo_kod:=params_get().slo_kod.SLO_KOD;
   _rf:=_slo_kod.ref();
   _st:=_slo_kod.first();
   {!
   |? _st:=_slo_kod.tr_state();
      _slo_kod.next() & _st
   !};
   _slo_kod.first();
   _slo_kod.tr_set({? _st || 0 || 1 ?},cur_win(1,1));
   {? ~_st || _slo_kod.seek(_rf) ?}
";
_SLO_KOD.win_act(_ws,,'Formuła','Zwiń/rozwiń'@,,,,_for,,,,,,,'target=window');
_SLO_KOD.win_act(_ws,,'Szukaj');

_SLO_KOD.win_btn(_ws,'text=%1,panel=right,align=begin'['Dołącz'@],'menu:D');
_SLO_KOD.win_btn(_ws,'text=%1,panel=right,align=begin'['Popraw'@],'menu:P');
_SLO_KOD.win_btn(_ws,'text=%1,panel=right,align=begin'['Usuń'@],'menu:U');

_par.slo_kod.SLO_KOD:=_SLO_KOD;
_par.slo_kod.WS:=_ws;
_par.slo_kod.PARENT:=0;
_parent:=0;
_rodzaj:=null();
GRUPRODZ.cntx_psh();
GRUPRODZ.index('RODZAJ');
:: dodajemy wszystkie "pogrupowane" grupy pracowników
{? GRUPRODZ.first()
|| SLO_KOD.cntx_psh();
   {!
   |? {? _rodzaj<>GRUPRODZ.RODZ
      || _rodzaj:=GRUPRODZ.RODZ;
         GRUPRODZ.RODZ();
         _SLO_KOD.PARENT:=0;
         _SLO_KOD.KOD:=SLO_KOD.KOD;
         _SLO_KOD.NAZWA:=SLO_KOD.NAZWA;
         _SLO_KOD.SYSTEM:=SLO_KOD.SYSTEM;
         _SLO_KOD.SLOREF:=$SLO_KOD.ref();
         {? _SLO_KOD.add()
         || _parent:=_SLO_KOD.ref()
         ?}
      ?};
      GRUPRODZ.GR();
      _SLO_KOD.PARENT:=_parent;
      _SLO_KOD.KOD:=SLO_KOD.KOD;
      _SLO_KOD.NAZWA:=SLO_KOD.NAZWA;
      _SLO_KOD.SYSTEM:=SLO_KOD.SYSTEM;
      _SLO_KOD.SLOREF:=$SLO_KOD.ref();
      _SLO_KOD.add();
      GRUPRODZ.next()
   !};
   SLO_KOD.cntx_pop()
?};
GRUPRODZ.cntx_pop();

:: dodajemy pozostałe grupy na poziomie 0
_gr:=exec('slo_typ','ext_slo','GRUPPRAC');
SLO_KOD.index('KOD');
SLO_KOD.prefix(_gr);
{? SLO_KOD.first()
|| {!
   |? {? ~_SLO_KOD.find_tab(,'SLOREF',,'=',$SLO_KOD.ref())
      || _SLO_KOD.PARENT:=0;
         _SLO_KOD.KOD:=SLO_KOD.KOD;
         _SLO_KOD.NAZWA:=SLO_KOD.NAZWA;
         _SLO_KOD.SYSTEM:=SLO_KOD.SYSTEM;
         _SLO_KOD.SLOREF:=$SLO_KOD.ref();
         _SLO_KOD.add()
      ?};
      SLO_KOD.next()
   !}
?}


\ru_bgrru
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Przed akcją "rodzaje płaTników" tabeli RU
::   WE:
::   WY:
::  OLD: \ru_bgrru/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_redakcja:=exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_PTSL');
exec('grupy_umow','rodzaje_platnikow',_redakcja)


\ru_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli RU.
::   WE:
::   WY: 0/1 - wiersz może/nie może być usunięty
::  OLD: \ru_delb/kali.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',OS_GRRU,'RU',RU.ref())


:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:24 e346897cf5e454ceeb4c3c94e8d2fd849ef9066ec0efbfd20f08d464d9a62e9ad809993c140b6c4d009d2e29c2e13e06e2c7cc38daf740bf6d9ba04e60d128f33e93c27d65f9209caa52bb157734de19ffff665aa56052a1d644de37175425fe953c500f7ef7e5b0a269c1ac49c7d640dba2c7fceeb232225ae1e06bfcf49673
