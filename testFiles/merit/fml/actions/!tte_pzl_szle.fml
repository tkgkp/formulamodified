:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_szle.fml
:: Utworzony: 21.11.2017
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_SZLE - Podział zlecenia prostego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Formuła główna czynności podziału zlecenia prostego (TTE_PZL_SZLE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;
_uid:='TTE_PZL_SZLE';

::# permissions=ODDZ

::# properties=LOOP

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null()) || return() ?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=ZL_SPLIT, type=_ZL, name=Dzielone zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};

:: Ustawiam wartość domyślną argumentu LOOP żeby brama się nie zawiesiła
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

_zl:=null();

_clean_result:=params_exec('clean','!tte_pzl_szle',_mp,_in);
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;

:: Sprawdzenie zlecenia
{? _zl
|| {? exec('FindAndGet','#table',ZL,_zl,,"RODZAJ",'')<>'P'
   || _msg:='Niezgodność wywołania czynności %1.\nPrzekazane zlecenie musi być zleceniem prostym.'@@[_uid];
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   |? exec('FindAndGet','#table',ZL,_zl,,"TREE_TYP",'')='F'
   || _msg:='Niezgodność wywołania czynności %1.\nPrzekazane zlecenie nie może być zleceniem półfabrykatowym.'@@[_uid];
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   |? exec('FindAndGet','#table',ZL,_zl,,"TYP().WP",'')<>'P'
   || _msg:='Niezgodność wywołania czynności %1.\nPrzekazane zlecenie musi być zleceniem produkcyjnym.'@@[_uid];
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   |? exec('FindAndGet','#table',ZL,_zl,,"STAN",'')='Z'
   || _msg:='Niezgodność wywołania czynności %1.\nPrzekazane zlecenie nie może być zamknięte.'@@[_uid];
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   || _mp.save(exec('kind_out','#b_port'),'ZL',_zl)
   ?};

:: Ustawienie parametru wyjściowego ZL_SPLIT
   {? _mp.loop()=0 || _mp.save(exec('kind_out','#b_port'),'ZL_SPLIT',_zl) ?}

|? ~_mp.pathProc() & _in.GRPKEY=''
|| _msg:='Niezgodność wywołania czynności %1.\nNie przekazano parametru %2 albo %3.'@@[_uid,'ZL','GRPKEY'];
   FUN.emsg(_msg);
   _mp.error(_msg);
   return()
?};

_key:=_out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

_done:=0;

{? _mp.pathProc()
|| ZL.cntx_psh();
   ZL.clear();
   _join:='join ZTP';
   _where:=
      'ZL.STAN<>''Z'' and '
      'ZTP.WP=''P'' and '
      'ZL.TREE_TYP=''P''';
   ZL.f_set('SYM',_join,_where);
   exec('icons_slo_sl','zl_head');
   ZL.win_sel('SLO_SL');
   ZL.actions('SLO_SL','XY','W');
   {? ZL.select()
   || exec('action_split','!tte_pzl_szle')
   ?};
   ZL.f_clear();
   ZL.cntx_pop()

|? _mp.loop()>0 | _mp.akcja()='PODZIEL' | _mp.pathTodo()
||
   ZL.cntx_psh();
   ZL.prefix();
   {? _mp.loop()=0 & ZL.seek(_zl)
   || exec('openmask','zl_common',_zl);
      ZLEC.win_edit('ZL_SPLIT');
      VAR.A_T:=ZL.KTM;
      ZLEC.ZTP:=ZL.TYP;
      ZL.KTM().J();
      ZLEC.L_ZL:=0;
      ZLEC.IL_1ZL:=0;
      ZLEC.IL_ALL:=0;
      _valid:="
         {? ZLEC.IL_ALL>=ZL.IL
         || FUN.info('Ilość ogółem do podziału powinna być mniejsza niż ilość na dzielonym zleceniu.'@);
            'L_ZL'
         |? ZLEC.L_ZL<=0
         || FUN.info('Liczba tworzonych zleceń powinna być większa niż zero.'@);
            'L_ZL'
         |? ZLEC.IL_1ZL<=0
         || FUN.info('Ilość na jednym zleceniu powinna być większa niż zero.'@);
            'IL_1ZL'
         |? ZL.cntx_psh();(_fld:=Plugin.run('ZL_SPLIT_VALID_001'));ZL.cntx_pop();_fld<>''
         || _fld
         || 1
         ?}
      ";
      {? ZLEC.edit(_valid)
      ||
::       Zapamiętać ilość wyjściową oraz powiązania z zamówieniami źródłowymi
         _zlzam:=tab_tmp(,
            'SRC','STRING[1]','',
            'PL_DATA','DATE','',
            'PL_TIME','TIME','',
            'ZAMPOZ','STRING[16]','',
            'ILZL','REAL',''
         );
         _zlzm_ndx_dt:=_zlzam.index('?');
         _zlzm_ndx_zp:=_zlzam.ndx_tmp(,,'SRC',,,'ZAMPOZ',,);

         ZLZAM.index('SRC');
         ZLZAM.prefix(ZL.ref());
         {? ZLZAM.first()
         || {!
            |? _zlzam.SRC:=ZLZAM.SRC;
               _zlzam.PL_DATA:=ZLZAM.PL_DATA;
               _zlzam.PL_TIME:=ZLZAM.PL_TIME;
               _zlzam.ZAMPOZ:=ZLZAM.ZAMPOZ;
               _zlzam.ILZL:=ZLZAM.ILZL;
               _zlzam.add();
               ZLZAM.next()
            !}
         ?};

::       Zmniejszenie ilości na dzielonym zleceniu
         _buffer:=exec('buffer','zl_head'); _buffer.bl_void();
         _buffer.IL:=ZL.IL-(ZLEC.L_ZL*ZLEC.IL_1ZL);
         _ok:=exec('zl_popraw','zl_head',ZL.ref(),0,,0,_buffer,,1);
         {? _ok>0
         || KOMM.init(,,'Podział zlecenia %1'@[ZL.SYM],'');
::          Usuwane pozycje, które pozostały na dzielonym zleceniu
            ZLZAM.index('SRC');
            ZLZAM.prefix(ZL.ref());
            {? ZLZAM.first()
            || {!
               |? _zlzam.index(_zlzm_ndx_zp);
                  _zlzam.prefix(ZLZAM.SRC,ZLZAM.ZAMPOZ);
                  {? _zlzam.first()
                  || _zlzam.ILZL-=ZLZAM.ILZL;
                     {? _zlzam.ILZL<=0 || _zlzam.del() || _zlzam.put() ?}
                  ?};
                  ZLZAM.next()
               !}
            ?};

            {! _it:=1..ZLEC.L_ZL
            |! _buffer.IL:=ZLEC.IL_1ZL;
               _buffer.IL0:=ZL.IL0;
               _buffer.OPIS:='Podział: '+ZL.SYM+' ('+ZL.OPIS+')';
               _zl:=exec('kopiuj','zl_head',ZL.ref(),0,_buffer);
               {? _zl<>null()
               ||
                  _il_zl:=_buffer.IL;
::                Najpierw przetwarzane są pozycje z zamówień
                  _zlzam.prefix('Z');
                  {? _zlzam.first()
                  || {!
                     |? _il:=exec('min','#math',_il_zl,_zlzam.ILZL);
                        _il_zl-=_il;
                        {? _il>0 || exec('add_zleczam','zl_gen',_zl,_il,_zlzam.ZAMPOZ) ?};
                        _zlzam.ILZL-=_il;
                        {? _zlzam.ILZL<=0 || _zlzam.del() || _zlzam.put(); _zlzam.next() ?}
                     !}
                  ?};
::                Potem przetwarzane są pozycje z planu dostaw
                  _zlzam.prefix('D');
                  {? _zlzam.first()
                  || {!
                     |? _il:=exec('min','#math',_il_zl,_zlzam.ILZL);
                        _il_zl-=_il;
                        {? _il>0 || exec('add_zleczam','zl_gen',_zl,_il,_zlzam.ZAMPOZ) ?};
                        _zlzam.ILZL-=_il;
                        {? _zlzam.ILZL<=0 || _zlzam.del() || _zlzam.put(); _zlzam.next() ?}
                     !}
                  ?};
::                Potem przetwarzane są pozycje dołączone ręcznie
                  _zlzam.prefix('R');
                  {? _zlzam.first()
                  || {!
                     |? _il:=exec('min','#math',_il_zl,_zlzam.ILZL);
                        _il_zl-=_il;
                        {? _il>0 || exec('add_zleczam','zl_gen',_zl,_il,_zlzam.ZAMPOZ) ?};
                        _zlzam.ILZL-=_il;
                        {? _zlzam.ILZL<=0 || _zlzam.del() || _zlzam.put(); _zlzam.next() ?}
                     !}
                  ?};
                  _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_zl,,"uidref()",''))
               ?}
            !};
            KOMM.select()
         ?}
      ?}
   ?};
   ZL.cntx_pop();

   _zl_uidref:=_mp.grpkeyGet();
   {? type_of(_zl_uidref)=type_of('')
   ||
      _done:=1;

::    Wypycham pierwsze zlecenie na wyjście
      ZL.cntx_psh();
      ZL.prefix();
      {? ZL.seek(_zl_uidref)
      || do();
         _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
         _mp.save(exec('kind_out','#b_port'),'GRPKEY',_key);
         _mp.grpkeyDel();
         end();

::       Jeżeli są jeszcze jakieś zlecenia to kontynuuję pętlę
         _zl_uidref:=_mp.grpkeyGet();
         {? type_of(_zl_uidref)=type_of('')
         || _mp.loop_continue()
         ?}
      ?};
      ZL.cntx_pop()
   ?};

   {? _done>0 || _mp.done() ?}

:: Tutaj nie powinno dojść, więc błąd
|| _mp.error('Nieobsłużony kontekst wywołania czynności %1.'@@[_uid])
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Opis dla czynności podziału zlecenia prostego (TTE_PZL_SWLE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiednie ZL
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Podziel zlecenie produkcyjne proste %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"'Podziel zlecenie produkcyjne proste %1'[SYM]",'')

:: nie ma nic...
|| _desc:='Podziel zlecenie produkcyjne proste'@@
?};
_desc


\action_split
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Akcja 'Podziel' dostępna z menu obszaru roboczego zleceń
::----------------------------------------------------------------------------------------------------------------------
{? exec('zl_lock','zl_common',,'N')
||
   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='TTE_PZL_SZLE';
   _args.UIDREF:=ZL.uidref();
   _args.AKCJA:='PODZIEL';
   _args.PROC_START:='T';
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

   exec('mp_run','#b__box',_args);

   exec('zl_unlock','zl_common',,'N')
?};
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:41 77eb98cd058456c69a3f731dc0156da48e16ea2b71f2b9e40bdc64b55213b4e60c7f6e0b486dc5f96c2434442ddfc68fda88c055afe8ef6ce4447d855e95e34d8276656f6d97a49e454291f23c7a973335db78b564f3099395525b9d3a8ac0ecf765e16b05a013a2b55d039f53ef93b429c65f90c8fe50525a07300fc7d3c7a3
