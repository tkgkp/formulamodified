:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_fast.fml
:: Utworzony: 04.05.2015
:: Autor: AMK
::======================================================================================================================
:: Zawartość: Formuły czynności ZWS_PAR_FAST - Rejestracja schematów dekretujących
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Rejestracja schematów dekretujących - główna formuła czynności ZWS_PAR_FAST.
::----------------------------------------------------------------------------------------------------------------------
::# properties=GRP_FIRM
1


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Formuła na opis czynności na liście ToDo
::----------------------------------------------------------------------------------------------------------------------
1


\av_ppop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula na akcje przed Popraw okna AV.AUTO
::  OLD: \av_ppop/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? AV.A='T'
|| FUN.info('Schemat VAT jest zaakceptowany.\nPoprawianie niemożliwe.'@); 0
|| 1
?}


\av_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.10]
:: OPIS: Usuwanie schematu VAT
::  OLD: \av_usu/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_grp:=AV.sel_size();
DOK_REJ.index('NAZ'); DOK_REJ.prefix();
{? AV.A='T'
|| {? ~_grp || FUN.info('Schemat VAT jest zaakceptowany.\nUsunięcie niemożliwe.'@) ?};
   _ok:=0
?};
{? _ok & DOK_REJ.first()
|| {! |?
      {? DOK_REJ.AV=AV.ref()
      || {? ~_grp
         || FUN.info('Schemat VAT wykorzystany w definicji'
                     '\nprzynajmniej jednego rodzaju dokumentu w rejestrze źródłowym.'
                     '\nUsunięcie niemożliwe.'@)
         ?};
         _ok:=0
      ?};
      _ok & DOK_REJ.next()
   !}
?};
{? _ok & (_grp | FUN.ask('Usunąć schemat VAT?'@))
|| DEK.index('DEK'); DEK.prefix(AV.ref());
   do();
   {? DEK.first
   || {! |?
          exec('wyr_us','!zws_par_fast','DEK');
          DEK.del()
      !}
   ?};
   {? AV.del(,1) & var_pres('usunieto')>0 || usunieto+=1 ?};
   end()
?}


\bg_av_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Grupa przed - usuwanie schematów VAT
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Usunąć zaznaczone schematy VAT?'@)
|| zazn:=AV.sel_size(); usunieto:=0; 1
|| 0
?}


\ag_av_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Grupa po - usuwanie schematów VAT
::----------------------------------------------------------------------------------------------------------------------
FUN.info(form('Zaznaczonych schematów: '@,25)+$zazn+'\n'+
         form('usuniętych schematów: '@,25)+$usunieto);
VAR_DEL.delete('zazn','usunieto')


\wyr_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.10]
:: OPIS: Usuwanie wyroznikow dla formuly w schemacie dekretacji
::   WE: _a - akronim tabeli
::  OLD: \wyr_us/auto.fml
::----------------------------------------------------------------------------------------------------------------------
KA.TAB:=_a;
SKID_WYR.index('SKID_WYR');
SKID_WYR.prefix(REF.FIRMA,KA.TAB,($(KA.TAB+'.name()'))(),exec('bl_wref','wyrozniki'));
{? SKID_WYR.first() || {! |? SKID_WYR.del !} ?}


\akcsch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: formula wykonywana w okienku wertowania tabeli AV, akceptuje (anuluje akceptacje)
::       automat dekretujacy VAT
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \akcsch/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:=AV.sel_size(); _dalej:=1;
{? _a=1 & AV.A='T'
|| _dalej:=0;
   {? ~_grp
   || FUN.info('Schemat VAT jest zaakceptowany.'@)
   || bledy_s+=1
   ?}
|? _a=2 & AV.A<>'T'
|| _dalej:=0;
   {? ~_grp
   || FUN.info('Schemat VAT nie jest zaakceptowany.'@)
   || bledy_s+=1
   ?}
?};
{? _a=1 & _dalej
|| DEK.cntx_psh(); DEK.index('DEK'); DEK.prefix(AV.ref());
   {? ~DEK.first()
   || _dalej:=0;
      {? ~_grp
      || FUN.info('Schemat VAT nie posiada pozycji.'@)
      || bledy_s+=1
      ?}
   || {!
      |? _ok:=exec('chk_exec','#file',DEK.KONTO);
         {? ~_ok.OK
         || {? ~_grp
            || FUN.info('Błędna formuła na konto pozycji %1.\nBrak formuły: %2 w pliku %3.'@[$DEK.LP,_ok.FORMULA,_ok.FILE])
            || bledy_s+=1
            ?};
            _dalej:=0
         ?};
         &_ok;
         _dalej & DEK.next()
      !}
   ?};
   DEK.cntx_pop()
?};
{? _dalej &
   (_grp | {? _a=2
              ||  FUN.ask('Wycofać akceptację schematu?'@)
              ||  FUN.ask('Zaakceptować schemat?'@)
             ?} )
|| _ok:=1;
   {? AV.A='T'
   || AV.A:='N';
      AV.ZAA:='';
      AV.DAKC:=date(0,0,0)
   |? AV.A='N'
   || {? PAR_SKID.get(80)='N'
      || DEK.cntx_psh(); DEK.index('DEK'); DEK.prefix(AV.ref());
         {? DEK.first()
         || {! |? {? DEK.RODZK().KOD='PKontrol' || _ok:=0 ?}; _ok & DEK.next() !}
         ?};
         {? _ok=0  & ~_grp
         || FUN.info('Schemat VAT zawiera pozycję "%1",\n'
                     'która jest stosowana tylko jeśli dostępny jest controlling kosztów. \n'
                     'Akceptacja niemożliwa.'@[DEK.RODZK().TR])
         ?};
         DEK.cntx_pop()
      ?};
      {? _ok
      || AV.A:='T';
         AV.ZAA:=app_info('app_user');
         AV.DAKC:=date()
      || bledy_s+=1
      ?}
   ?};
   {? _ok || AV.put() ?}
?}


\bg_akcav
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula przed akcja grupowa Akceptuj/Anuluj okna wertowania AV.AUTO
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \bg_akcav/auto.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
ssize_s:=AV.sel_size(); bledy_s:=0;
1


\ag_akcav
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula po na akcje grupowa Akceptuj/Anuluj okna wertowania AV.AUTO
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \ag_akcav/auto.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczonych: '+$ssize_s+'. '+'\n'+{? _a=1 || 'Zaakceptowano: ' || 'Wycofano akceptację: ' ?}+' '+
         $(ssize_s-bledy_s)+'.');
&ssize_s; &bledy_s


\kolor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Ustawia kolor akceptacji dla tabeli AV i AUTOKSIE
::  OLD: \kolor/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1,1)=AUTOKSIE
|| ZMIENNE.RODZSCH:={? AUTOKSIE.TYP='N'
                    || 'Dokument'
                    |? AUTOKSIE.TYP='P'
                    || 'Pozycje'+{? AUTOKSIE.WYR='T' || ' z wyróżnikami' || '' ?}
                    |? AUTOKSIE.TYP='D'
                    || 'Pozycje < podziały'
                    |? AUTOKSIE.TYP='K'
                    || 'Podziały < pozycje'
                    |? AUTOKSIE.TYP='L'
                    || 'Dekretacje delegacji'
                    || ''
                    ?}
?};
_okno:={? ROZNE.WYW='K' || 'WERC' || 'WER' ?};
{? cur_tab(1,1).A='T'
|| {? cur_tab(1,1)=AV
   || {? AV.sel_size()
      || AV.actions_grayed('AUTO')
      || AV.actions_grayed('AUTO','ApU')
      ?}
   || {? AUTOKSIE.sel_size()
      || AUTOKSIE.actions_grayed(_okno)
      || AUTOKSIE.actions_grayed(_okno,'ApU')
      ?}
   ?};
   'AV#01#00'
|| {? cur_tab(1,1)=AV
   || {? AV.sel_size()
      || AV.actions_grayed('AUTO')
      || AV.actions_grayed('AUTO','C')
      ?}
   || {? AUTOKSIE.sel_size()
      || AUTOKSIE.actions_grayed(_okno)
      || AUTOKSIE.actions_grayed(_okno,'C')
      ?}
   ?};
   ''
?}


\av_rekpo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula na Rekord Po okna wertowania AV.AUTO
::  OLD: \av_rekpo/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('chk_av','rejestry',-menu_txt(,)='popraw')


\fbpowsch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.40]
:: OPIS: Wyswietla okno powiazan schematów VAT
::  OLD: \fbpowsch/auto.fml
::----------------------------------------------------------------------------------------------------------------------
TT_POW:=tab_tmp(4,'ROK','STRING[20]','Rok',
                  'ODD','STRING[8]','Jednostka księgowa',
                  'REJ','STRING[71]','Rejestr',
                  'DOK','STRING[60]','Nazwa dokumentu');
_wsel:=TT_POW.mk_sel('Powiązania schematu VAT '@,'P',,'tt_pow_wer',,,,,'U');
TT_POW.win_fld(_wsel,,'ROK');
TT_POW.win_fld(_wsel,,'ODD');
TT_POW.win_fld(_wsel,,'REJ');
TT_POW.win_fld(_wsel,,'DOK');
TT_POW.win_act(_wsel,,'Kolejność');
TT_POW.win_sel(_wsel);
TT_POW.hdr_sel(AV.KOD);
_vav:=AV.ref();
REJ.cntx_psh(); DOK_REJ.cntx_psh(); AV.cntx_psh();
DOK_REJ.index('NAZ'); DOK_REJ.prefix();
{? DOK_REJ.first()
|| {! |?
      {? DOK_REJ.AV=_vav
      || TT_POW.ROK:=DOK_REJ.REJ().ROK().NAZ;
         TT_POW.ODD:=DOK_REJ.REJ().ODD().OD;
         TT_POW.REJ:=DOK_REJ.REJ().KOD+' - '+DOK_REJ.REJ().NAZ;
         TT_POW.DOK:=DOK_REJ.NAZ;
         TT_POW.add()
      ?};
      DOK_REJ.next()
   !}
?};
TT_POW.select();
REJ.cntx_pop(); DOK_REJ.cntx_pop(); AV.cntx_pop();
obj_del(TT_POW)


\kopiasch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Funkcja do kopiowania schematow automatycznej dekretacji dokumentow VAT
::  OLD: \kopiasch/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:=AV.sel_size()>0;
{? ~_grp || AV.win_edit('RED_K') ?};
_karef:=null;
_aref:=AV.ref();
_rref:=AV.ROK_F;
{? {? _grp
   || _wy:=1;
      AV.cntx_psh(); AV.index('AV');
      _kod:=AV.KOD;
      {? AV.prefix(); AV.find_key(REJESTR.ROK,AV.KOD) & AV.KOD=_kod
      || bledy_s+=1; _wy:=0
      ?};
      AV.cntx_pop();
      _wy
   || AV.edit("_wy:=__CHK.record(AV,,'ROK_F','KOD','OP');
               {? ~+_wy
               || AV.cntx_psh();
                  AV.index('AV');
                  _kod:=AV.KOD;
                  {? AV.prefix(); AV.find_key(AV.ROK_F,AV.KOD) & AV.KOD=_kod
                  || FUN.info('Istnieje schemat o kodzie: %1 w roku %2.'@[_kod,AV.ROK_F().NAZ]); _wy:='KOD'
                  ?};
                  AV.cntx_pop()
               ?};
               _wy")
   ?}
|| _pow:=1;
   AV.cntx_psh();
   do();
   AV.A:='N';
   AV.ZAA:='';
   AV.DAKC:=date(0,0,0);
   {? _grp || AV.ROK_F:=REJESTR.ROK ?};
   AV.prefix();
   {? AV.add()
   || _karef:=AV.ref();
      DEK.index('DEK');
      DEK.prefix(_aref);
      {? DEK.first()
      || {!
         |? _dref:=DEK.ref;
            DEK.AV:=_karef;
            DEK.cntx_psh();
            DEK.prefix();
            {? DEK.add()
            || exec('kop_wyr','rejestry','DEK',#_dref,#DEK.ref())
            || _karef:=null; _pow:=0; undo()
            ?};
            DEK.cntx_pop();
            DEK.next()
         !}
      ?}
   ?};
   end();
   AV.cntx_pop();
   {? ~_pow
   || {? ~_grp
      || FUN.info('Kopiowanie schematu VAT nie powiodło się.'@)
      ?};
      bledy_s+=1
   ?}
?};
{? ~_grp
|| AV.win_edit('RED');
   AV.seek({? _karef<>null || _karef || _aref ?})
?};
ROK_F.seek(_rref);
1


\bg_kopav
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula przed akcja grupowa Kopia okna wertowania AV.AUTO
::  OLD: \bg_kopav/auto.fml
::----------------------------------------------------------------------------------------------------------------------
okno:=REJESTR.win_edit('?');
ROK_F.cntx_psh(); ROK_F.win_dict('WER');
{? REJESTR.win_edit('ROK'); REJESTR.edit("{? ~REJESTR.ROK || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}")
|| sel_nchk();
   ssize_s:=AV.sel_size(); bledy_s:=0; 1
|| REJESTR.win_edit(okno); &okno;
   ROK_F.cntx_pop();
   0
?}


\ag_kopav
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula po na akcje grupowa Kopia okna wertowania AV.AUTO
::  OLD: \ag_kopav/auto.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczonych: %1.\nSkopiowano: %2.'@[$ssize_s,$(ssize_s-bledy_s)]);
REJESTR.win_edit(okno);
ROK_F.cntx_pop();
&ssize_s; &bledy_s; &okno


\bc_avf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula przed na akcję Kopiuj do innej firmy okna wertowania AV.AUTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\kop_avf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula po akcji Kopiuj do innej firmy okna wertowania AV.AUTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_grp:=AV.sel_size()>0;
{? ~_grp
||
  __F_ref:='S';
  UNPAR.PFIR:=null();
  UNPAR.PFIR_BE:='__be_F:=UNPAR.PFIR;1';
  UNPAR.PFIR_AE:='__F_ref:=\'S\'; {? __be_F<>UNPAR.PFIR || UNPAR.PRF2:=null ?}; 1';
  UNPAR.PRF2:=null();
  UNPAR.PRF2_BE:='UNPAR.PFIR<>null';
  UNPAR.PRF2_AE:='';
  okno:=REJESTR.win_edit('?');
  ROK_F.cntx_psh();
  ROK_F.win_dict('WER');
  REJESTR.win_edit('AV2F');
  {? REJESTR.edit(" {? ~UNPAR.PFIR || FUN.info('Nie wybrano firmy.'@); 0 || {? ~UNPAR.PRF2 || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}  ?}")
  || ssize_s:=AV.sel_size(); bledy_s:=0; 1
  || REJESTR.win_edit(okno); &okno
  ?};
  ROK_F.cntx_pop()
?};
_karef:=null;
_aref:=AV.ref();
_rref:=AV.ROK_F;
{? {? _grp
   || _wy:=1;
      AV.cntx_psh(); AV.index('AV');
      _kod:=AV.KOD;
      {? AV.prefix(); AV.find_key(UNPAR.PRF2,AV.KOD) & AV.KOD=_kod
      || bledy_s+=1; _wy:=0
      ?};
      AV.cntx_pop();
      _wy
   || AV.edit("_wy:=__CHK.record(AV,,'ROK_F','KOD','OP');
               {? ~+_wy
               || AV.cntx_psh();
                  AV.index('AV');
                  _kod:=AV.KOD;
                  {? AV.prefix(); AV.find_key(UNPAR.PRF2,AV.KOD) & AV.KOD=_kod
                  || FUN.info('Istnieje schemat o kodzie: %1 w roku %2.'@[_kod,UNPAR.PRF2().NAZ]); _wy:='KOD'
                  ?};
                  AV.cntx_pop()
               ?};
               _wy")
   ?}
||
   _pow:=1;
   AV.cntx_psh();
   do();
   AV.A:='N';
   AV.ZAA:='';
   AV.DAKC:=date(0,0,0);
   AV.ROK_F:=UNPAR.PRF2;
   AV.prefix();
   {? AV.add()
   || _karef:=AV.ref();
      DEK.index('DEK');
      DEK.prefix(_aref);
      {? DEK.first()
      || {!
         |? _dref:=DEK.ref;
            DEK.AV:=_karef;
            DEK.cntx_psh();
            DEK.prefix();
            {? DEK.add()
            ||_dekref:=DEK.ref();
              SKID_WYR.index('SKID_WYR');
              SKID_WYR.prefix(REF.FIRMA,'DEK',DEK.name(),#_dref);
              {? SKID_WYR.first()
              || {!
                 |?
                   SKID_WYR.cntx_psh();
                   SKID_WYR.prefix(UNPAR.PFIR,'DEK',DEK.name(),#_dekref);
                   SKID_WYR.REF:=#_dekref;
                   SKID_WYR.FIRMA:=UNPAR.PFIR;
                   SKID_WYR.add();
                   SKID_WYR.cntx_pop();
                   SKID_WYR.next()
                 !}
              ?}
            || _karef:=null; _pow:=0; undo()
            ?};
            DEK.cntx_pop();
            DEK.next()
         !}
      ?}
   ?};
   end();
   AV.cntx_pop();
   {? ~_pow
   || {? ~_grp
      || FUN.info('Kopiowanie schematu VAT nie powiodło się.'@)
      ?};
      bledy_s+=1
   ?}
?};
{? ~_grp
|| AV.win_edit('RED');
   AV.seek({? _karef<>null || _karef || _aref ?})
?};
ROK_F.seek(_rref);
1


\bg_kop_avf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula przed akcja grupowa Kopiuj do innej firmy okna wertowania AV.AUTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
__F_ref:='S';
UNPAR.PFIR:=null();
UNPAR.PFIR_BE:='__be_F:=UNPAR.PFIR;1';
UNPAR.PFIR_AE:='__F_ref:=\'S\'; {? __be_F<>UNPAR.PFIR || UNPAR.PRF2:=null ?}; 1';
UNPAR.PRF2:=null();
UNPAR.PRF2_BE:='UNPAR.PFIR<>null';
UNPAR.PRF2_AE:='';
ROK_F.win_dict('WER');
okno:=REJESTR.win_edit('?');
ROK_F.cntx_psh(); ROK_F.win_dict('WER');
REJESTR.win_edit('AV2F');
{? REJESTR.edit(" {? ~UNPAR.PFIR || FUN.info('Nie wybrano firmy.'@); 0 || {? ~UNPAR.PRF2 || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}  ?}")
|| ssize_s:=AV.sel_size(); bledy_s:=0; 1
|| REJESTR.win_edit(okno); &okno;
   ROK_F.cntx_pop();
   0
?}


\ag_kop_avf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula po akcja grupowa Kopiuj do innej firmy okna wertowania AV.AUTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczonych: %1.\nSkopiowano: %2.'@[$ssize_s,$(ssize_s-bledy_s)]);
REJESTR.win_edit(okno);
ROK_F.cntx_pop();
&ssize_s; &bledy_s; &okno


\vat_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formuła na akcją 'Drukuj' okienka 'WER' tabeli AV
::  OLD: \vat_wyd/automat.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','ZWS_PAR_FAST','fks_autodek',,,,,,,,'W')


\dek_dol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Dolaczenie nowej pozycji schematu VAT - DEK.AUTO
::   WE: _a - 0 Dolacz Po
::            1 Dolacz Po na strzalke w dol
::  OLD: \dek_dol/dok_zrd.fml
::----------------------------------------------------------------------------------------------------------------------
{? _ & {? _a || FUN.ask('Czy dodać nowy wiersz?'@) || 1?}
|| DEK.cntx_psh;
   _nr:=DEK.LP+_a;
   {?~DEK.first()||_nr:=1?};
   DEK.cntx_pop;
   DEK.blank();
   DEK.LP:=_nr;
   {? DEK.edit("exec('chk_dek','rejestry')")
   || DEK.cntx_psh();
      {? DEK.last()
      || {! |? {? DEK.LP>=_nr || DEK.LP+=1; DEK.put; DEK.prev() ?} !}
      ?};
      DEK.cntx_pop();
      DEK.add()
   ?}
?};
0


\usun_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Po usunięciu pozycji schematu VAT
::       Funkcja wywoływana po Usun pozycji schematu VAT (DEK)
::  OLD: \usun_dek/dok_zrd.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:={? DEK.sel_size() || 1 || FUN.ask('Usunąć pozycję schematu VAT?'@) ?};
{? _ok
|| {? DEK.next()
   || DEK.prev();
      exec('wyr_us','!zws_par_fast','DEK');
      DEK.del();
      _a:=DEK.ref;
      {! |? DEK.LP-=1; DEK.put(); DEK.next() !};
      DEK.seek(_a)
   || exec('wyr_us','!zws_par_fast','DEK');
      DEK.del()
   ?}
?};
1


\bgd_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Przed akcja grupowa usun tabeli DEK
::  OLD: \bgd_dek/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('bg_del','dok_fks',4,'Czy usunąć zaznaczone pozycje\nschematu VAT?'@)


\agd_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Po akcji grupowej usun tabeli DEK
::  OLD: \agd_dek/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ag_del','dok_fks',4,'pozycje schematu VAT'@)


\dkopdek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Kopiuje biezacy rekord tabeli DEK do nowej pozycji o LP wskazanej w okienku
::  OLD: \dkopdek/auto.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.win_edit('KFORMDEK');
ROZNE.PAR1:=1;
ROZNE.PAR2:=DEK.LP+1;
{? ROZNE.edit("{? ROZNE.PAR2<=0
               || FUN.info('Należy podać wartość dodatnią.'@); 'LP'
               || {? ROZNE.PAR2>(DEK.size+1)
                  || FUN.info('Należy podać wartość mniejszą lub równą %1.'@[$(DEK.size()+1)]); 'LP'
                  || 1
                  ?}
               ?}")
|| {? ROZNE.PAR2<=(DEK.size()+1)
   || do();
      DEK.cntx_psh();
      {? DEK.index('DEK');
         DEK.prefix(DEK.AV);
         DEK.find_key(ROZNE.PAR2)
      || DEK.last();
         {!
         |? DEK.LP:=DEK.LP+=1;
            {? ~DEK.put() || undo() ?};
            DEK.prev() & DEK.LP>=ROZNE.PAR2
         !}
      ?};
      DEK.cntx_pop();
      DEK.LP:=ROZNE.PAR2;
      _rdek:=DEK.ref();
      {? ~DEK.add()
      || undo()
      || {? ROZNE.PAR1 & (SKID_WYR.index('SKID_WYR');
                          SKID_WYR.prefix(REF.FIRMA,'DEK',DEK.name(),#_rdek);
                          SKID_WYR.first())
         || {!
            |? SKID_WYR.cntx_psh();
               SKID_WYR.REF:=#DEK.ref();
               SKID_WYR.prefix(REF.FIRMA);
               SKID_WYR.add();
               SKID_WYR.cntx_pop();
               SKID_WYR.next()
            !}
         ?}
      ?};
      {? ~end()
      || FUN.info('Kopiowanie nie udało się.'@)
      ?}
   ?}
?};
1


\ae_dekop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.50]
:: OPIS: Po redag. Optymalizacja w DEK.
::  OLD: \ae_dekop/dok_zrd3.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK.OPTYM='N' || DEK.PR:='N' ?}; 1


\ae_dekpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.50]
:: OPIS: Po redag. Platnosci ratalnej w DEK.
::  OLD: \ae_dekpr/dok_zrd3.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK.PR='T' || DEK.OPTYM:='T' ?}; 1


\vat_adek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Wartosc poczatkowa pola DEK.AV
::  OLD: \vat_adek/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
AV.ref()


\bl_aktyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2010]
:: OPIS: Formula na wartosc poczatkowa pola AUTOKSIE.TYP
::  OLD: \bl_aktyp/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.WYW


\be_autyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [2008]
:: OPIS: Przed redakcja pola AUTOKSIE.TYP
::  OLD: \be_autyp/skid_dob.fml
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{?  -menu_txt(,)<>'dołącz'
|| FORM.cntx_psh();
   FORM.index('AUTOKSIE');
   FORM.prefix(AUTOKSIE.ref());
   _zwrot:=~FORM.first();
   FORM.cntx_pop();
   {? _zwrot
   || ETYPYFIR.cntx_psh(); ETYPYFIR.prefix();
      {? ETYPYFIR.first()
      || {! |?
            _zwrot:=(ETYPYFIR.AUTOKSIE<>AUTOKSIE.ref());
            _zwrot & ETYPYFIR.next()
         !}
      ?};
      ETYPYFIR.cntx_pop()
   ?}
?};
_zwrot


\ae_autyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.30]
:: OPIS: Po redakcji AUTOKSIE.TYP
::  OLD: \ae_autyp/skid_rok.fml
::----------------------------------------------------------------------------------------------------------------------
_enabled:=AUTOKSIE.TYP='P';
AUTOKSIE.efld_opt('RED','enable='+$_enabled,AUTOKSIE,'WYR');
{? ~_enabled || AUTOKSIE.WYR:='N' ?};
1


\aut_ppop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula przed na akcje Popraw okna AUTOKSIE.WER
::  OLD: \aut_ppop/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? AUTOKSIE.A='T'
|| FUN.info('Schemat dokumentów jest zaakceptowany.\nPoprawianie niemożliwe.'@); 0
|| 1
?}


\auto_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Usuwanie schematów dokumentów
::  OLD: \auto_us/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_grp:=AUTOKSIE.sel_size();
{? AUTOKSIE.A='T'
|| {? ~_grp || FUN.info('Schemat dokumentów jest zaakceptowany.\nUsunięcie niemożliwe.'@) ?};
   _ok:=0
?};
{? _ok & (P_AUTOKS.index('AUTOKSIE'); P_AUTOKS.prefix(AUTOKSIE.ref()); P_AUTOKS.first())
|| {? ~_grp
   || FUN.info('Schemat dokumentów jest wykorzystany w co najmniej jednym rejestrze źródłowym.\nUsunięcie niemożliwe.'@)
   ?};
   _ok:=0
?};
{? _ok
|| FORM.index('AUTOKSIE'); FORM.prefix(AUTOKSIE.ref);
   {? FORM.first()
   || {? _grp | FUN.ask('Istnieją pozycje schematu. Usunąć?'@)
      || do();
         {! |?  exec('wyr_us','!zws_par_fast','FORM'); FORM.del() !};
         {? ~FORM.first()
         || {? AUTOKSIE.del(,1) & var_pres('usunieto')>0 || usunieto+=1 ?};
            end()
         || undo(); end(); FUN.info('Usunięcie formuł nie powiodło się.'@)
         ?}
      ?};0
  || {? _grp | FUN.ask('Usunąć schemat?'@)
     || {? AUTOKSIE.del(,1) & var_pres('usunieto')>0 || usunieto+=1 ?}
     ?}
  ?}
?}


\bg_auto_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Grupa przed - usuwanie schematów dokumentów
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Usunąć zaznaczone schematy dokumentów?'@)
|| zazn:=AUTOKSIE.sel_size(); usunieto:=0; 1
|| 0
?}


\ag_auto_us
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Grupa po - usuwanie schematów dokumentów
::----------------------------------------------------------------------------------------------------------------------
FUN.info(form('Zaznaczonych schematów: '@,25)+$zazn+'\n'+
         form('usuniętych schematów: '@,25)+$usunieto);
VAR_DEL.delete('zazn','usunieto')


\auto_for
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Treść schematu dokumentów
::  OLD: \auto_for/auto.fml
::----------------------------------------------------------------------------------------------------------------------
FORM.index('AUTOKSIE');
FORM.prefix(AUTOKSIE.ref);
exec('spr_f_nr','dok_fks');
POMOC.DBF:='POZ';
FORM.first;
{? PAR_SKID.get(35)='T' || FORM.win_sel('WER1') || FORM.win_sel('WER') ?};
FORM.hdr_sel();
FORM.hdr_sel(' %1'@[AUTOKSIE.NAZ]);
{? AUTOKSIE.A='T' | AUTOKSIE.ROK_F().PLAN_GR='T' || FORM.actions(FORM.win_sel('?'),'dUpKF:d') ?};
FORM.fld_opt(FORM.win_sel('?'),'col_name="%1"'[PAR_WYDR.SPAR1],ROZNE,'NAZ1');
FORM.fld_opt(FORM.win_sel('?'),'col_name="%1"'[PAR_WYDR.SPAR2],ROZNE,'NAZ2');
FORM.fld_opt(FORM.win_sel('?'),'col_name="%1"'[PAR_WYDR.SPAR3],ROZNE,'NAZ3');
FORM.fld_opt(FORM.win_sel('?'),'col_name="%1"'[PAR_WYDR.SPAR4],ROZNE,'NAZ4');
FORM.select();
FORM.actions(FORM.win_sel('?'));
FORM.prefix();
1


\akcaut
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formuła wykonywana w okienku wertowania tabeli AUTOKSIE, akceptuje (anuluje akceptacje) schematu dokumentów
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \akcaut/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:=AUTOKSIE.sel_size(); _dalej:=1;
{? _a=1 & AUTOKSIE.A='T'
|| _dalej:=0;
   {? ~_grp || FUN.info('Schemat dokumentów jest zaakceptowany.'@) ?};
   {? _grp || bledy_s+=1 ?}
|? _a=2 & AUTOKSIE.A<>'T'
|| _dalej:=0;
   {? ~_grp || FUN.info('Schemat dokumentów nie jest zaakceptowany.'@) ?};
   {? _grp || bledy_s+=1 ?}
?};
{? _dalej & _a=1
|| _ok:=exec('chk_exec','#file',AUTOKSIE.FORMPOCZ);
   {? ~_ok.OK
   || {? ~_grp
      || FUN.info('Błędna formuła poczatkowa.\nNie znaleziono formuły: %1 w pliku %2.'@[_ok.FORMULA,_ok.FILE])
      || bledy_s+=1
      ?};
      _dalej:=0
   ?};
   &_ok;
   {? _dalej
   || FORM.cntx_psh();
      FORM.index('AUTOKSIE'); FORM.prefix(AUTOKSIE.ref());
      {? FORM.first()
      || {!
         |? _fml:=FORM.memo_txt(,1,'FML');
            _ok:=exec('chk_exec','#file',_fml);
            {? ~_ok.OK
            || {? ~_grp
               || FUN.info('Błędna formuła pozycji %1.\nNie znaleziono formuły: %2 w pliku %3.'@[$FORM.POZ,_ok.FORMULA,_ok.FILE])
               || bledy_s+=1
               ?};
               _dalej:=0
            ?};
            &_ok;
            _dalej & FORM.next()
         !}
      ?};
      FORM.cntx_pop()
   ?}
?};
{? _dalej &
   (_grp |  {? _a=2 || FUN.ask('Wycofać akceptację schematu?'@) || FUN.ask('Zaakceptować schemat?'@) ?} )
|| {? AUTOKSIE.A='T'
   || AUTOKSIE.A:='N';
      AUTOKSIE.ZAA:='';
      AUTOKSIE.DAKC:=date(0,0,0);
      AUTOKSIE.put()
   |? AUTOKSIE.A<>'T'
   || AUTOKSIE.A:='T';
      AUTOKSIE.ZAA:=app_info('app_user');
      AUTOKSIE.DAKC:=date();
      AUTOKSIE.put()
   ?}
?}


\bg_akcau
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula przed akcja grupowa Akceptuj/Anuluj okna wertowania AUTOKSIE.WER
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \bg_akcau/auto.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
ssize_s:=AUTOKSIE.sel_size(); bledy_s:=0;
1


\ag_akcau
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula po na akcje grupowa Akceptuj/Anuluj okna wertowania AUTOKSIE.WER
::   WE: _a - 1 - akceptacja schematu
::            2 - wycofanie akceptacji
::  OLD: \ag_akcau/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
||  FUN.info('Zaznaczonych: %1\nZaakceptowano: %2.'@[$ssize_s,$(ssize_s-bledy_s)])
||  FUN.info('Zaznaczonych: %1\nWycofano akceptację: %2.'@[$ssize_s,$(ssize_s-bledy_s)])
?};
&ssize_s; &bledy_s


\aut_wyd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [7.41]
:: OPIS: Formula na akcje 'Wydruk' okienka 'WER' tabeli AUTOKSIE
::  OLD: \aut_wyd/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','ZWS_PAR_FAST','fks_autofor',,,,,,,,'W')


\auto_pow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [7.53]
:: OPIS: Wyswietla powiazania formul autom. rejestr.
::  OLD: \auto_pow/auto.fml
::----------------------------------------------------------------------------------------------------------------------
REJ.cntx_psh();
DOK_REJ.cntx_psh();
AUTOKSIE.cntx_psh();
P_AUTOKS.cntx_psh();
VAR_DEL.delete('POWIAZAN');
POWIAZAN:=tab_tmp(2,'ODD','STRING[8]','Jednostka księgowa'@,
                    'MIEJSCE','STRING[75]','Miejsce'@
                  );
P_AUTOKS.index('AUTOKSIE'); P_AUTOKS.prefix(AUTOKSIE.ref);
{? P_AUTOKS.first
|| {! |?
      {? P_AUTOKS.REJ<>null
      || POWIAZAN.ODD:=P_AUTOKS.REJ().ODD().OD;
         POWIAZAN.MIEJSCE:='Rejestr: '+P_AUTOKS.REJ().KOD
      || POWIAZAN.ODD:=P_AUTOKS.DOK_REJ().REJ().ODD().OD;
         POWIAZAN.MIEJSCE:='Rejestr: '+P_AUTOKS.DOK_REJ().REJ().KOD+
                           ' rodzaj dokumentu: '+P_AUTOKS.DOK_REJ().NAZ
      ?};
      POWIAZAN.add();
      P_AUTOKS.next
   !}
?};
ETYPY.cntx_psh();
ETYPY.index('UNIK'); ETYPY.prefix(AUTOKSIE.ROK_F);
ETYPYFIR.cntx_psh();
ETYPYFIR.index('UNIK');
{? ETYPY.first()
|| {!
   |? ETYPYFIR.prefix(ETYPY.ref(),REF.FIRMA,AUTOKSIE.ROK_F);
      {? ETYPYFIR.first()
      || {!
         |? {? ETYPYFIR.AUTOKSIE=AUTOKSIE.ref()
            || POWIAZAN.ODD:=ETYPYFIR.ODD().OD;
               POWIAZAN.MIEJSCE:={? ETYPY.TYPOBIEG().NAZWA='Obieg faktur'
                                 || 'Typ faktury w obiegu: '
                                 || 'Typ wniosku: '
                                 ?}+ETYPY.NAZWA;
               POWIAZAN.add()
            ?};
            ETYPYFIR.next()
         !}
      ?};
      ETYPY.next()
   !}
?};
ETYPY.cntx_pop();
ETYPYFIR.cntx_pop();
_ile:=POWIAZAN.size(); {? _ile>30 || _ile:=30 ?};
_wer:=POWIAZAN.mk_sel('Powiązania schematu dokumentów'@,'P',,'powiazan_wer',,,_ile,,'U');
POWIAZAN.win_fld(_wer,,'ODD');
POWIAZAN.win_fld(_wer,,'MIEJSCE');
POWIAZAN.win_sel(_wer);
POWIAZAN.win_act(_wer,,'Kolejność');
POWIAZAN.select();
REJ.cntx_pop();
DOK_REJ.cntx_pop();
AUTOKSIE.cntx_pop();
P_AUTOKS.cntx_pop();
VAR_DEL.delete('POWIAZAN')


\kopia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: J.Socha
:: OPIS: Kopiowanie schematu dokumentów
::  OLD: \kopia/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:=AUTOKSIE.sel_size()>0;
_okno:=AUTOKSIE.win_edit('?');
{? ~_grp || AUTOKSIE.win_edit('RED_K') ?};
ROK_F.win_sel('WER');
ROK_F.win_dict('WER');
_karef:=null;
_aref:=AUTOKSIE.ref();
_rref:=AUTOKSIE.ROK_F;
_krref:=null;
_nazwa:=AUTOKSIE.NAZ;
{? {? _grp
   || AUTOKSIE.cntx_psh();
      AUTOKSIE.index('NAZ');
      _wy:=1;
      {? AUTOKSIE.prefix(); AUTOKSIE.find_key(REJESTR.ROK,AUTOKSIE.NAZ) & AUTOKSIE.NAZ=_nazwa
      || bledy_s+=1; _wy:=0
      ?};
      AUTOKSIE.cntx_pop();
      _wy
   || AUTOKSIE.edit("_wy:=__CHK.record(AUTOKSIE,,'ROK_F','NAZ','OP');
                     _nazwa:=AUTOKSIE.NAZ;
                     {? ~+_wy
                     || AUTOKSIE.cntx_psh();
                        AUTOKSIE.index('NAZ');
                        {? AUTOKSIE.prefix(); AUTOKSIE.find_key(AUTOKSIE.ROK_F,AUTOKSIE.NAZ) & AUTOKSIE.NAZ=_nazwa
                        || FUN.info('Istnieje formuła o nazwie: '+_nazwa+' w roku '+AUTOKSIE.ROK_F().NAZ+'.');
                           _wy:='NAZ'
                        ?};
                        AUTOKSIE.cntx_pop()
                     ?}; _wy")
   ?}
|| _pow:=1;
   AUTOKSIE.cntx_psh();
   do();
   {? _grp || AUTOKSIE.ROK_F:=REJESTR.ROK ?};
   AUTOKSIE.A:='N';
   AUTOKSIE.ZAA:='';
   AUTOKSIE.DAKC:=date(0,0,0);
   AUTOKSIE.prefix();
   {? AUTOKSIE.add()
   || _karef:=AUTOKSIE.ref();
      _krref:=AUTOKSIE.ROK_F;
      FORM.index('AUTOKSIE');
      FORM.prefix(_aref);
      {? FORM.first
      || {!
         |? _fref:=FORM.ref();
            FORM.cntx_psh();
            FORM.memo_get(,'FML');
            FORM.AUTOKSIE:=_karef;
            FORM.prefix();
            {? FORM.add()
            || FORM.memo_put(,'FML');
               exec('kop_wyr','rejestry','FORM',#_fref,#FORM.ref())
            || _pow:=0; undo()
            ?};
            FORM.cntx_pop();
            FORM.next()
         !}
      ?}
   ?};
   end();
   AUTOKSIE.cntx_pop();
   {? ~_pow
   || _karef:=null;
      {? _grp
      || bledy_s+=1
      || FUN.info('Kopiowanie formuł schematów dokumentów nie powiodło się.'@)
      ?}
   ?}
?};
{? ~_grp
|| AUTOKSIE.seek({? _karef<>null & _krref=_rref || _karef || _aref ?});
   AUTOKSIE.win_edit(_okno)
?};
ROK_F.seek(_rref);
1


\bg_kopau
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula przed akcja grupowa Kopia okna wertowania AUTOKSIE.WER
::  OLD: \bg_kopau/auto.fml
::----------------------------------------------------------------------------------------------------------------------
okno:=REJESTR.win_edit('?');
ROK_F.cntx_psh(); ROK_F.win_dict('WER');
{? REJESTR.win_edit('ROK'); REJESTR.edit("{? ~REJESTR.ROK || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}")
|| sel_nchk();
   ssize_s:=AUTOKSIE.sel_size(); bledy_s:=0; 1
|| REJESTR.win_edit(okno); &okno;
   ROK_F.cntx_pop();
   0
?}


\ag_kopau
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula po na akcje grupowa Kopia okna wertowania AUTOKSIE.WER
::  OLD: \ag_kopau/auto.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczono: %1.\nSkopiowano: %2.'@[$ssize_s,$(ssize_s-bledy_s)]);
REJESTR.win_edit(okno);
ROK_F.cntx_pop();
&ssize_s; &bledy_s; &okno


\bc_autof
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula przed  akcja Kopiuj do firmy okna wertowania AUTOKSIE.WER
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
1


\kop_autf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula po akcji Kopiuj do innej firmy okna AUTOKSIE.WER i WERC
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
_ok:=1;
_grp:=AUTOKSIE.sel_size()>0;
{? ~_grp
||
  __F_ref:='S';
  UNPAR.PFIR:=null();
  UNPAR.PFIR_BE:='__be_F:=UNPAR.PFIR;1';
  UNPAR.PFIR_AE:='__F_ref:=\'S\'; {? __be_F<>UNPAR.PFIR || UNPAR.PRF2:=null ?}; 1';
  UNPAR.PRF2:=null();
  UNPAR.PRF2_BE:='UNPAR.PFIR<>null';
  UNPAR.PRF2_AE:='';
  okno:=REJESTR.win_edit('?');
  ROK_F.cntx_psh();
  ROK_F.win_dict('WER');
  REJESTR.win_edit('AV2F');
  {? REJESTR.edit(" {? ~UNPAR.PFIR || FUN.info('Nie wybrano firmy.'@); 0 || {? ~UNPAR.PRF2 || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}  ?}")
  || ssize_s:=AUTOKSIE.sel_size(); bledy_s:=0; 1
  || REJESTR.win_edit(okno); &okno;_ok:=0;
     0
  ?};
  ROK_F.cntx_pop()
?};
_okno:=AUTOKSIE.win_edit('?');
{? ~_grp & _ok || AUTOKSIE.win_edit('RED_KF') ?};
ROK_F.win_sel('WER');
ROK_F.win_dict('WER');
_karef:=null;
_aref:=AUTOKSIE.ref();
_rref:=AUTOKSIE.ROK_F;
_krref:=null;
_nazwa:=AUTOKSIE.NAZ;
{? _ok &
   {? _grp
   || AUTOKSIE.cntx_psh();
      AUTOKSIE.index('NAZ');
      _wy:=1;
      {? AUTOKSIE.prefix(); AUTOKSIE.find_key(UNPAR.PRF2,AUTOKSIE.NAZ) & AUTOKSIE.NAZ=_nazwa
      || bledy_s+=1; _wy:=0
      ?};
      AUTOKSIE.cntx_pop();
      _wy
   || AUTOKSIE.edit("_wy:=__CHK.record(AUTOKSIE,,'ROK_F','NAZ','OP');
                     _nazwa:=AUTOKSIE.NAZ;
                     {? ~+_wy
                     || AUTOKSIE.cntx_psh();
                        AUTOKSIE.index('NAZ');
                        {? AUTOKSIE.prefix(); AUTOKSIE.find_key(UNPAR.PRF2,AUTOKSIE.NAZ) & AUTOKSIE.NAZ=_nazwa
                        || FUN.info('Istnieje formuła o nazwie: '+_nazwa+'\n w firmie: '+ UNPAR.PFIR().OPIS+'\n w roku: '+UNPAR.PRF2().NAZ+'.');
                           _wy:='NAZ'
                        ?};
                        AUTOKSIE.cntx_pop()
                     ?}; _wy")
   ?}
|| _pow:=1;
   AUTOKSIE.cntx_psh();
   do();
   AUTOKSIE.A:='N';
   AUTOKSIE.ZAA:='';
   AUTOKSIE.DAKC:=date(0,0,0);
   AUTOKSIE.ROK_F:=UNPAR.PRF2;

   AUTOKSIE.prefix();
   {? AUTOKSIE.add()
   || _karef:=AUTOKSIE.ref();
      _krref:=AUTOKSIE.ROK_F;
      FORM.index('AUTOKSIE');
      FORM.prefix(_aref);
      {? FORM.first
      || {!
         |? _fref:=FORM.ref();
            FORM.cntx_psh();
            FORM.memo_get(,'FML');
            FORM.AUTOKSIE:=_karef;
            FORM.prefix();
            {? FORM.add()
            || FORM.memo_put(,'FML');
               _foref:=FORM.ref();
               SKID_WYR.index('SKID_WYR');
               SKID_WYR.prefix(REF.FIRMA,'FORM',FORM.name(),#_fref);
               {? SKID_WYR.first()
               || {!
                  |?
                    SKID_WYR.cntx_psh();
                    SKID_WYR.prefix(UNPAR.PFIR,'FORM',FORM.name(),#_foref);
                    SKID_WYR.REF:=#_foref;
                    SKID_WYR.FIRMA:=UNPAR.PFIR;
                    SKID_WYR.add();
                    SKID_WYR.cntx_pop();
                    SKID_WYR.next()
                  !}
               ?}
            || _pow:=0; undo()
            ?};
            FORM.cntx_pop();
            FORM.next()
         !}
      ?}
   ?};
   end();
   AUTOKSIE.cntx_pop();
   {? ~_pow
   || _karef:=null;
      {? _grp
      || bledy_s+=1
      || FUN.info('Kopiowanie formuł schematów dokumentów nie powiodło się.'@)
      ?}
   ?}
?};
{? ~_grp
|| AUTOKSIE.seek({? _karef<>null & _krref=_rref || _karef || _aref ?});
   AUTOKSIE.win_edit(_okno)
?};
ROK_F.seek(_rref);
FIRMA.cntx_pop();
1


\bg_autof
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS:Formula przed akcja grupowa Kopiuj do firmy okna wertowania AUTOKSIE.WER i WERC
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FIRMA.cntx_psh();
__F_ref:='S';
UNPAR.PFIR:=null();
UNPAR.PFIR_BE:='__be_F:=UNPAR.PFIR;1';
UNPAR.PFIR_AE:='__F_ref:=\'S\'; {? __be_F<>UNPAR.PFIR || UNPAR.PRF2:=null ?}; 1';
UNPAR.PRF2:=null();
UNPAR.PRF2_BE:='UNPAR.PFIR<>null';
UNPAR.PRF2_AE:='';
okno:=REJESTR.win_edit('?');
ROK_F.cntx_psh();
ROK_F.win_dict('WER');
REJESTR.win_edit('AV2F');
{? REJESTR.edit(" {? ~UNPAR.PFIR || FUN.info('Nie wybrano firmy.'@); 0 || {? ~UNPAR.PRF2 || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}  ?}")
|| ssize_s:=AUTOKSIE.sel_size(); bledy_s:=0; 1
|| REJESTR.win_edit(okno); &okno;
   ROK_F.cntx_pop();
   FIRMA.cntx_pop();
   0
?}


\ag_autof
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Pawelm [17.00]
:: OPIS: Formula po  akcja grupowa Kopiuj do firmy okna wertowania AUTOKSIE.WER
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczonych: %1.\nSkopiowano: %2.'@[$ssize_s,$(ssize_s-bledy_s)]);
REJESTR.win_edit(okno);
ROK_F.cntx_pop();
FIRMA.cntx_pop();
&ssize_s; &bledy_s; &okno


\raautoks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Rekord po tabeli AUTOKSIE
::  OLD: \raautoks/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('chk_autoksie','rejestry',-menu_txt(,)='popraw')


\bl_autok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: formula na wartosc poczatkowa pola FORM.AUTOKSIE
::  OLD: \bl_autok/auto.fml
::----------------------------------------------------------------------------------------------------------------------
AUTOKSIE.ref()


\tab_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Wartosc poczatkowa pola FORM.KARTOTEK
::  OLD: \tab_form/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? AUTOKSIE.TYP='P'
|| 'AN'
|| ''
?}


\ind_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Wartosc poczatkowa pola FORM.INDEKS
::  OLD: \ind_form/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? AUTOKSIE.TYP='P'
|| 'SYM'
|| ''
?}


\pdol_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: Dołącz przed dla FORM
::   WE: _a=0 - wywolanie z funkcji Dolacz dla pustej dziedziny
::       _a=1 - wywolanie z funkcji Dolacz dla niepustej dziedziny
::       _a=2 - wywolanie z funkcji Dolacz na strzalke
::  OLD: \pdol_f/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~AUTOKSIE.r_lock(1,1)
|| FUN.info('Formuła jest redagowana przez innego użytkownika.'@); 0
|| _t:=AUTOKSIE.TYP;
   _w:='RED'+{? 'DKOL'*_t>0 || _t || '' ?}+{? AUTOKSIE.WYR='T' || 'W' || '' ?};
   FORM.win_edit(_w);
   KONTO.K1:=KONTO.K1_BE:=KONTO.K1_AE:=''; KONTO.K1_RODZ:=2; KONTO.K1_WYM:=1; KONTO.K1_SYNT:=0;
   UNPAR.P10:=UNPAR.P11:=UNPAR.P12:='';
   UD_POM.PBUD:='';
   POMOC.J:={? _a=1
            || FORM.POZ
            || FORM.size+1
            ?};
   {? _a<>2 | FUN.ask('Dodać nowy wiersz?'@)
   || UD_POM.SKID_MB:=null;
      _aref:=FORM.ref();
      FORM.blank();
      _tymlp:=FORM.size+1;
      {? _a=1
      || FORM.POZ:=FORM.size()+1
      || FORM.POZ:=POMOC.J
      ?};
      FORM.memo_set(,'FML');
      _poz:=FORM.POZ;
      {? _a=1 & FORM.POZ>1 || FORM.POZ:=POMOC.J ?};
      {? AUTOKSIE.WYR='T'
      || exec('set_form_fld','!zws_par_fast',1)
      ?};
      {? FORM.edit(" exec('chk_form','rejestry')",,
                     {? AUTOKSIE.TYP='P' & FORM.KARTOTEK<>'' & FORM.INDEKS<>''
                     || 'MASKA'
                     || ''
                     ?})
      || FORM.POZ:=_poz;
         {? FORM.add()
         || FORM.memo_put(,'FML');
            {? _a=1
            || FORM.cntx_psh();
               {? FORM.index('AUTOKSIE');
                  FORM.prefix(AUTOKSIE.ref());
                  FORM.find_key(POMOC.J)
               || _ref:=FORM.ref();
                  do();
                  FORM.last();
                  _wy:=1;
                  {!
                  |? _wy
                  |! {? FORM.POZ=POMOC.J || _wy:=0 ?};
                     FORM.POZ+=1; {? ~FORM.put() || _wy:=0; undo() ?};
                     {? _wy || FORM.prev() ?}
                  !};
                  end()
               ?};
               FORM.cntx_pop();
               FORM.POZ:=POMOC.J;
               FORM.put()
            ?}
         ?}
      || {? _aref<>null || FORM.seek(_aref) ?}
      ?};
      {? AUTOKSIE.WYR='T'
      || exec('set_form_fld','!zws_par_fast',0)
      ?}
   ?};
   AUTOKSIE.r_unlock()
?};
0


\us_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [?????]
:: OPIS: formula usun rekord w tabeli FORM
::  OLD: \us_form/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:={? FORM.sel_size() || 1 || FUN.ask('Usunąć formułę ?'@) ?};
{? _ok
|| FORM.cntx_psh();
   FORM.index('AUTOKSIE');
   FORM.prefix(AUTOKSIE.ref);
   do();
   FORM.cntx_psh();
   _ref:={? FORM.prev() || FORM.ref() || null ?};
   FORM.cntx_pop();
   {? FORM.next()
   || _a:=FORM.ref();
      FORM.prev();
      exec('wyr_us','!zws_par_fast','FORM');
      FORM.del();
      {? ~FORM.seek(_a) || undo() ?};
      {! |?
         FORM.POZ-=1;
         {? ~FORM.put || undo() ?};
         FORM.next()
      !}
   || exec('wyr_us','!zws_par_fast','FORM');
      FORM.del()
   ?};
   end();
   {? FORM.sel_size() || gr_ok+=1 ?};
   FORM.cntx_pop();
   {? _ref<>null || FORM.seek(_ref) ?}
?};
1


\bgd_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Przed akcja grupowa usun tabeli FORM
::  OLD: \bgd_form/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('bg_del','dok_fks', 4, 'Usunąć zaznaczone formuły?'@)


\agd_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Po akcji grupowej usun tabeli FORM
::  OLD: \agd_form/auto.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ag_del','dok_fks',4,'formuł'@)


\dkopform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Kopiuje biezacy rekord tabeli FORM do nowej pozycji o LP wskazanej w okienku
::  OLD: \dkopform/auto.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.win_edit('KFORMDEK');
ROZNE.PAR1:=1;
ROZNE.PAR2:=FORM.POZ+1;
{? ROZNE.edit("{? ROZNE.PAR2<=0
               || FUN.info('Należy podać wartość większą od zera.'@); 'PAR2'
               || {? ROZNE.PAR2>(FORM.size+1)
                  || FUN.info('Należy podać wartość mniejszą lub równą %1.'@[$(FORM.size()+1)]); 'PAR2'
                  || 1
                  ?}
               ?}")
|| do();
   FORM.cntx_psh();
   {? FORM.index('AUTOKSIE'); FORM.prefix(FORM.AUTOKSIE); FORM.find_key(ROZNE.PAR2)
   || FORM.last();
      {!
      |? FORM.POZ:=FORM.POZ+=1;
         {? ~FORM.put() || undo() ?};
         FORM.prev() & FORM.POZ>=ROZNE.PAR2
      !}
   ?};
   FORM.cntx_pop();
   FORM.memo_get(,'FML');
   FORM.POZ:=ROZNE.PAR2;
   _rform:=FORM.ref();
   {? ~FORM.add()
   || undo()
   || FORM.memo_put(,'FML');
      {? ROZNE.PAR1 & (SKID_WYR.index('SKID_WYR');
                       SKID_WYR.prefix(REF.FIRMA,'FORM',FORM.name(),#_rform);
                       SKID_WYR.first())
      || {!
         |? SKID_WYR.cntx_psh();
            SKID_WYR.REF:=#FORM.ref();
            SKID_WYR.prefix(REF.FIRMA);
            SKID_WYR.add();
            SKID_WYR.cntx_pop();
            SKID_WYR.next()
         !}
      ?}
   ?};
   {? ~end()
   || FUN.info('Operacja kopiowania nie powiodła się.'@)
   ?}
?};
1


\for_mem
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [2006]
:: OPIS: Formula popraw Formule - w okienkach wertowania tabeli FORM
::  OLD: \for_mem/auto.fml
::----------------------------------------------------------------------------------------------------------------------
FORM.memo_get(,'FML');
{? FORM.memo_edi(,'FML') || FORM.memo_put(,'FML') ?}


\rbform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Rekord przed tabeli FORM
::  OLD: \rbform/auto.fml
::----------------------------------------------------------------------------------------------------------------------
_t:=AUTOKSIE.TYP;
_w:='RED'+{? 'DKOL'*_t>0 || _t || '' ?}+{? AUTOKSIE.WYR='T' || 'W' || '' ?};
{? AUTOKSIE.WYR='T'
|| exec('set_slu_wyr','!zws_par_fast');
   exec('form_fld_enabled','!zws_par_fast')
?};
FORM.win_edit(_w);
UD_POM.PBUD:=FORM.PBUD().SYMBOL;
{? _t='K' || KONTO.K1:=FORM.MASKA ?};
UD_TYP.index('SYMBOL'); UD_SKL.index('SYMBOL');
UNPAR.P10:=UNPAR.P11:=UNPAR.P12:=UNPAR.P38:=UNPAR.P39:='';
{? FORM.SKID_MB<>null
|| UD_POM.SKID_MB:=FORM.SKID_MB;
   exec('enable_form','!zws_par_fast');

   SKID_MBP.cntx_psh();
   SKID_MBP.index('LP');
   SKID_MBP.prefix(FORM.SKID_MB);
   _typ:=obj_new(5);
   {! _i:=1..5
   |! {? SKID_MBP.find_key(_i)
      || _typ[_i]:=SKID_MBP.UD_SCH().UD_TYP().SYMBOL
      || _typ[_i]:=''
      ?}
   !};
   SKID_MBP.cntx_pop();
   {? +_typ[2] & +FORM.JORG_S
   || UD_TYP.prefix(_typ[2],_typ[2]);
      {? UD_TYP.first()
      || UD_SKL.prefix(UD_TYP.ref(),FORM.JORG_S,FORM.JORG_S);
         {? UD_SKL.first() || UNPAR.P10:=UD_SKL.OPIS ?}
      ?}
   ?};
   {? +_typ[3] & +FORM.OKOSZ_S
   || UD_TYP.prefix(_typ[3],_typ[3]);
      {? UD_TYP.first()
      || UD_SKL.prefix(UD_TYP.ref(),FORM.OKOSZ_S,FORM.OKOSZ_S);
         {? UD_SKL.first() || UNPAR.P11:=UD_SKL.OPIS ?}
      ?}
   ?};
   {? +_typ[1] & +FORM.PBUD_S
   || UD_TYP.prefix(_typ[1],_typ[1]);
      {? UD_TYP.first()
      || UD_SKL.prefix(UD_TYP.ref(),FORM.PBUD_S,FORM.PBUD_S);
         {? UD_SKL.first() || UNPAR.P12:=UD_SKL.OPIS ?}
      ?}
   ?};
   {? +_typ[4] & +FORM.WYM4_S
   || UD_TYP.prefix(_typ[4],_typ[4]);
      {? UD_TYP.first()
      || UD_SKL.prefix(UD_TYP.ref(),FORM.WYM4_S,FORM.WYM4_S);
         {? UD_SKL.first() || UNPAR.P38:=UD_SKL.OPIS ?}
      ?}
   ?};
   {? +_typ[5] & +FORM.WYM5_S
   || UD_TYP.prefix(_typ[5],_typ[5]);
      {? UD_TYP.first()
      || UD_SKL.prefix(UD_TYP.ref(),FORM.WYM5_S,FORM.WYM5_S);
         {? UD_SKL.first() || UNPAR.P39:=UD_SKL.OPIS ?}
     ?}
   ?}
|| UD_POM.SKID_MB:=null
?};
{? _t='N' | _t='P' & AUTOKSIE.WYR<>'T'
|| FORM.fld_opt('WER1', 'col_name=Maska konta', ROZNE, 'NAZ1');
   FORM.fld_opt('WER1', 'col_name=Formuła', ROZNE, 'NAZ2');
   FORM.fld_opt('WER1', 'col_name=Konto Wn', ROZNE, 'NAZ3');
   FORM.fld_opt('WER1', 'col_name=Konto Ma', ROZNE, 'NAZ4');
   ROZNE.NAZ1:=FORM.MASKA;
   on_error(2);
   _fml:=FORM.memo_txt(0,1,'FML');
   ROZNE.NAZ2:=STR.gsub(_fml,'\n',' ');
   on_error(0);
   ROZNE.NAZ3:=FORM.KWN;
   ROZNE.NAZ4:=FORM.KMA
|? _t='D'
|| FORM.fld_opt('WER1', 'col_name=Pozycja budżetowa', ROZNE, 'NAZ1');
   FORM.fld_opt('WER1', 'col_name=Formuła', ROZNE, 'NAZ2');
   FORM.fld_opt('WER1', 'col_name=Konto Wn', ROZNE, 'NAZ3');
   FORM.fld_opt('WER1', 'col_name=Konto Ma', ROZNE, 'NAZ4');
   ROZNE.NAZ1:=UD_POM.PBUD;
   on_error(2);
   _fml:=FORM.memo_txt(0,1,'FML');
   ROZNE.NAZ2:=STR.gsub(_fml,'\n',' ');
   on_error(0);
   ROZNE.NAZ3:=FORM.KWN;
   ROZNE.NAZ4:=FORM.KMA
|? _t='K' | _t='O'
|| {? _t='K'
   || FORM.fld_opt('WER1', 'col_name=Maska konta', ROZNE, 'NAZ1')
   || FORM.fld_opt('WER1', 'col_name=Model', ROZNE, 'NAZ1')
   ?};
   FORM.fld_opt('WER1', 'col_name=Pozycja budżetowa', ROZNE, 'NAZ2');
   FORM.fld_opt('WER1', 'col_name=Wymiar 2', ROZNE, 'NAZ3');
   FORM.fld_opt('WER1', 'col_name=Wymiar 3', ROZNE, 'NAZ4');

   ROZNE.NAZ1:={? _t='K' || FORM.MASKA || FORM.SKID_MB().KOD ?};
   ROZNE.NAZ2:={? +FORM.PBUD_S || FORM.PBUD_S || FORM.PBUD_F ?};
   ROZNE.NAZ3:={? +FORM.JORG_S || FORM.JORG_S || FORM.JORG_F ?};
   ROZNE.NAZ4:={? +FORM.OKOSZ_S || FORM.OKOSZ_S || FORM.OKOSZ_F ?}
|? _t='L'
|| ROZNE.NAZ1:=FORM.RKWOTDEL().KOD;
   ROZNE.NAZ2:=FORM.ETYPWYD().NAZWA;
   ROZNE.NAZ3:=FORM.KWN;
   ROZNE.NAZ4:=FORM.KMA
|? _t='P' & AUTOKSIE.WYR='T'
|| FORM.fld_opt('WER1', 'col_name=Maska konta', ROZNE, 'NAZ1');
   FORM.fld_opt('WER1', 'col_name=Procent', ROZNE, 'NAZ2');
   FORM.fld_opt('WER1', 'col_name=Wyróżnik 1', ROZNE, 'NAZ3');
   FORM.fld_opt('WER1', 'col_name=Wyróżnik 2', ROZNE, 'NAZ4');
   ROZNE.NAZ1:=FORM.MASKA;
   ROZNE.NAZ2:=form(FORM.PROCENT,,2,' .');
   ROZNE.NAZ3:={? FORM.SW1='S' || FORM.W1().KOD || FORM.FW1 ?};
   ROZNE.NAZ4:={? FORM.SW2='S' || FORM.W2().KOD || FORM.FW2 ?}
?}; 0


\beform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [2006]
:: OPIS: Przed akcja Popraw w okienku wertowania WER1 tabeli FORM
::  OLD: \beform/auto.fml
::----------------------------------------------------------------------------------------------------------------------
{? AUTOKSIE.TYP='D'
|| UD_POM.PBUD:=FORM.PBUD().SYMBOL
?};
1


\a_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Wartosc poczatkowa P_AUTOKS.REJ
::  OLD: \a_rej/dok_zrd4.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.A_REJ


\a_dok_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Wartosc poczatkowa P_AUTOKS.DOK_REJ
::  OLD: \a_dok_r/dok_zrd4.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.A_DOK_R


\bcarej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [8.60]
:: OPIS: Przed akcja kopiuj, tab P_AUTOKS, okno WER
::  OLD: \bcarej/rejestr.fml
::----------------------------------------------------------------------------------------------------------------------
_fun:="_typ:=P_AUTOKS.AUTOKSIE().TYP;
       _naz:=P_AUTOKS.AUTOKSIE().NAZ;
       _dr:=P_AUTOKS.DOK_REJ;
       P_AUTOKS.cntx_psh();
       ROK_F.index('NAZWA');
       _ok:=0;
       {? ROK_F.prefix(REF.FIRMA,TMP_REJ.ROK); ROK_F.first() & ROK_F.NAZ=TMP_REJ.ROK
       || P_AUTOKS.index('AUTO_REJ');
          REJ.seek(TMP_REJ.REJ,'rejestry');
          P_AUTOKS.prefix(REJ.ref(),ROK_F.ref(),_typ,_dr);
          _is:=0;
          {? P_AUTOKS.first()
          || {!|? {? P_AUTOKS.AUTOKSIE().NAZ=_naz || _is:=1 ?};~_is & P_AUTOKS.next()!}
          ?};
          _ok:=~_is
       ?};
       P_AUTOKS.cntx_pop();
       {? _ok
       || P_AUTOKS.cntx_psh();
          P_AUTOKS.prefix();
          P_AUTOKS.REJ:=REJ.ref();
          P_AUTOKS.AUTOKSIE:=exec('FindInSet','#table','AUTOKSIE','NAZ',_naz,ROK_F.ref(),,,,null());
          P_AUTOKS.add();
          P_AUTOKS.cntx_pop()
       ?};_ok";
{? P_AUTOKS.sel_size
|| _l:=exec('f_tmprej','dok_fks',_fun);
   FUN.info('Skopiowano schemat dokumentów do rejestrów: %1 z %2.'@[$_l,$TMP_REJ.size()])
|| {? exec('c_tmprej','dok_fks') & TMP_REJ.first() ||
      _l:=exec('f_tmprej','dok_fks',_fun);
      FUN.info('Skopiowano schemat dokumentów do rejestrów: %1 z %2.'@[$_l,$TMP_REJ.size()])
   ?};
   exec('d_tmprej','dok_fks')
?}


\autofor1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Akcja Formula - Formuly okien SLO, WER, WER2 tabeli P_AUTOKS
::  OLD: \autofor1/auto.fml
::----------------------------------------------------------------------------------------------------------------------
P_AUTOKS.AUTOKSIE();
exec('auto_for','!zws_par_fast')


\aut_wyb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2008]
:: OPIS: Akcja TEN, okienko SLO tabeli P_AUTOKS
::  OLD: \aut_wyb/auto.fml
::----------------------------------------------------------------------------------------------------------------------
wyb:=1;
P_AUTOKS.AUTOKSIE();
sel_exit()


\bcforrej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [8.60]
:: OPIS: Przed akcja kopiuj, tab FOR_AKC, okno WER
::  OLD: \bcforrej/rejestr.fml
::----------------------------------------------------------------------------------------------------------------------
_fun:="_naz:=FOR_AKC.NAZ;
   FOR_AKC.cntx_psh();
   FOR_AKC.index('NAZ'); REJ.seek(TMP_REJ.REJ,'rejestry'); FOR_AKC.prefix(REJ.ref());
   _ok:=~FOR_AKC.find_key(_naz,_naz);
   FOR_AKC.cntx_pop();
   {? _ok
   || FOR_AKC.cntx_psh();
      FOR_AKC.prefix();
      FOR_AKC.REJ:=REJ.ref();
      FOR_AKC.add();
      FOR_AKC.cntx_pop()
   ?};_ok";
{? FOR_AKC.sel_size
|| _l:=exec('f_tmprej','dok_fks',_fun);
   FUN.info('Skopiowano formułę kontrolną do rejestrów: %1 z %2'@[$_l,$TMP_REJ.size()])
|| {? exec('c_tmprej','dok_fks') & TMP_REJ.first()
   || _l:=exec('f_tmprej','dok_fks',_fun);
      FUN.info('Skopiowano formułę kontrolną do rejestrów: %1 z %2'@[$_l,$TMP_REJ.size()])
   ?};
   exec('d_tmprej','dok_fks')
?}


\forkondr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Akcja Formula - Wydruk okna WER tabeli FOR_AKC
::  OLD: \forkondr/dok_zrd4.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','ZWS_PAR_FAST','fks_for_kont',,,,,,,,'W')


\form_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Formula po akcji 'Schematy dokumentów' okien wertowania tabeli REJ
::  OLD: \form_rej/skid_rok.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.A_REJ:=REJ.ref; ROZNE.A_DOK_R:=null;ROZNE.WYW:='';
P_AUTOKS.index('AUTO_REJ');
P_AUTOKS.prefix(REJ.ref);
P_AUTOKS.win_sel('WER');
P_AUTOKS.select()


\sel_fkt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [8.10]
:: OPIS: Selekcja tabeli FOR_AKC
::  OLD: \sel_fkt/spr_dok.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='G';
FORMULA.win_edit('FORMULY'); FORMULA.win_dict('FORMULY');
FOR_AKC.index('NAZ');
FOR_AKC.prefix(REJ.ref);
FOR_AKC.select()


\sa_dok_r
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MM [2006]
:: OPIS: Wyświetla schematy dokumentów dla wskazanego dokumentu w rejestrze
::  OLD: \sa_dok_r/rejestr.fml
::----------------------------------------------------------------------------------------------------------------------
ROZNE.A_REJ:=null; ROZNE.A_DOK_R:=DOK_REJ.ref;
P_AUTOKS.index('AUTO_REJ');
ROZNE.WYW:='P';
P_AUTOKS.prefix(null,SSTALE.AR,'P',DOK_REJ.ref);
P_AUTOKS.win_sel('WER2'); P_AUTOKS.select()


\ae_p_autoks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Rekord po tabela P_AUTOKS
::----------------------------------------------------------------------------------------------------------------------
{? ~P_AUTOKS.AUTOKSIE
|| FUN.info('Nie wybrano schematu dokumentów.'@); 0
|| __CHK.index(P_AUTOKS,-menu_txt(,)='popraw')=''
?}


\bl_dek_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na wartosc poczatkowa pola DEK_NAG.RODZ
::   WY: string z rodzajem dekretu
::  OLD: \bl_dek_rodz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? (+TREE_DEK.RODZ)=2 || TREE_DEK.RODZ || '' ?}


\bl_dek_nag_rok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na wartosc poczatkowa pola DEK_NAG.ROK
::   WY: wskazanie na rok obowiazywania schematu
::  OLD: \bl_dek_nag_rok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
SSTALE.AR


\be_dek_f_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.F_DATA
::   WY: 1 - mozna redagowac pole, 0 - zablokowana redakcja pola
::  OLD: \be_dek_f_data/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.DEK_ZDAT='F'


\f3_dek_s_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 dla pola DEK_NAG.SDATA
::   WY: zwraca wybrany rodzaj daty
::  OLD: \f3_dek_s_data/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
_wyb:=FUN.choice('Stałe daty:'@,,'P - Początek okresu'@, 'K - Koniec okresu'@);
{? _wyb
|| {? _wyb=1
   || _rr:='P'
   |? _wyb=2
   || _rr:='K'
   ?};
   DEK_NAG.S_DATA:=_rr
?};
_rr


\ae_dek_s_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji pola DEK_NAG.SDATA
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
:: OLD: \ae_dek_s_data/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LM' | | DEK_NAG.RODZ='LX'
|| 1
|| {? DEK_NAG.S_DATA='P'
   || ZMIENNE.DEK_SDAT:='Początek miesiąca';
      1
   |? DEK_NAG.S_DATA='K'
   || ZMIENNE.DEK_SDAT:='Koniec miesiąca';
      1
   |? DEK_NAG.S_DATA<>''
   || FUN.info('Należy wybrać P - początek okresu, K - koniec okresu.'@);
      DEK_NAG.S_DATA:='';
      ZMIENNE.DEK_SDAT:='';
      0
   || 1
   ?}
?}


\bd_dek_s_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem pola DEK_NAG.S_DATA
::  OLD: \bd_dek_s_data/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ='SV' | DEK_NAG.RODZ='LP'
|| 0
|| 1
?}


\be_dek_s_data
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.S_DATA
::   WY: 1 - mozna redagowac pole, 0 - zablokowana redakcja pola
::  OLD: \be_dek_s_data/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ='SV' | DEK_NAG.RODZ='LP'
|| 0
|? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LM' | DEK_NAG.RODZ='LX'
|| 1
|| ZMIENNE.DEK_ZDAT='S'
?}


\be_dek_rvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed redakcja pola DEK_NAG.RVAT
::  OLD: \be_dek_rvat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
RVAT.win_dict('WER3');
ZMIENNE.DEK_ZRV='S'


\wz_dk_gr_vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na wzorzec pola DEK_NAG.GR_VAT, ustawia odpowiedni slownik dla pola
::  OLD: \wz_dk_gr_vat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
SLU.index('NAZ'); SLU.prefix();
{? SLU.find_key('~GRUPY PODATKOWE') || SLU.NAZ || '' ?}


\be_dek_gr_vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.GR_VAT
::   WY: 1 - mozna redagowac pole, 0 - w p.p.
::  OLD: \be_dek_gr_vat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.DEK_ZGRV='S'


\be_dek_f_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.F_REJ (formula na rejestr ksiegowy), formula ustawia
::       typ wyniku widzianych formul na F3. Mozliwa redakcja pola w zaleznosci od ustawionego DEK_NAG.SREJ
::   WY: 1 - mozna redagowac pole, 0 - w p.p.
::  OLD: \be_dek_f_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='S';
DEK_NAG.SREJ='F'


\be_dek_f_dok_rj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.F_DOK_RJ (formula na rodzaj dokumentu w rejestrze), formula ustawia
::       typ wyniku widzianych formul na F3. Mozliwa redakcja pola w zaleznosci od ustawionego pola DEK_NAG.SDREJ
::   WY: 1 - mozna redagowac pole, 0 - w p.p.
::  OLD: \be_dek_f_dok_rj/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='S';
DEK_NAG.SDREJ='F'


\be_dek_f_rvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.F_RVAT
::   WY: 0 - zabokowana redakcja pola, w p.p. - mozliwa redakcja pola
::  OLD: \be_dek_f_rvat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_ZRV='F'
|| ZMIENNE.RODZAJ:=FL.TYP_WYN:='S'; 'S'
|| 0
?}


\be_dek_f_gr_vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_NAG.F_GR_VAT
::   WY: 0 - zabokowana redakcja pola, w p.p. - mozliwa redakcja pola
::  OLD: \be_dek_f_gr_vat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_ZGRV='F'
|| ZMIENNE.RODZAJ:=FL.TYP_WYN:='S'; 'S'
|| 0
?}


\be_f_khs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: przed redkacja slownik kontrahenta
::  OLD: \be_f_khs/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='S';'S'


\ae_dek_sdrej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej DEK_NAG.SDREJ ustawia zmienna ZMIENNE.DEK_SDOK
::  OLD: \ae_dek_sdrej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SDREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| DEK_NAG.F_DOK_RJ:=null()
|? DEK_NAG.SDREJ='S'
|| ZMIENNE.DEK_SDOK:='<- F3 ->';
   DEK_NAG.F_DOK_RJ:=null()
|| ZMIENNE.DEK_RDOK:=null();
   ZMIENNE.DEK_SDOK:=''
?}


\spr_ile_oddz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula sprawdza liczbe jedn. ksiegowych
::   WY: 1 - jezeli jest jedena jedn., 0 - w p.p.
::  OLD: \spr_ile_oddz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ODD.cntx_psh();
ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
_ile:=ODD.size();
ODD.cntx_pop();
_ile=1


\ae_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji pola DEK_NAG.SREJ
::  OLD: \ae_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| DEK_NAG.F_REJ:=null()
|? DEK_NAG.SREJ='S'
|| ZMIENNE.DEK_SREJ:='<- F3 ->';
   DEK_NAG.F_REJ:=null()
|| ZMIENNE.DEK_RREJ:=null;
   ZMIENNE.DEK_SREJ:=''
?}


\bl_dek_nag_vpst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula na wartosc poczatkowa pola DEK_NAG.VPOZ_STD
::  OLD: \bl_dek_nag_vpst/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? TREE_DEK.RODZ='LP' | TREE_DEK.RODZ='LK' | TREE_DEK.RODZ='LX' || 'R' || 'P' ?}


\bd_dek_nag_vpst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula przed wyswietleniem pola DEK_NAG.VPOZ_STD
::  OLD: \bd_dek_nag_vpst/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.RODZ<>'LP' & DEK_NAG.RODZ<>'LK' & DEK_NAG.RODZ<>'LX'


\be_dek_nag_vpst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula przed redakcja pola DEK_NAG.VPOZ_STD
::  OLD: \be_dek_nag_vpst/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.RODZ<>'LP' & DEK_NAG.RODZ<>'LK' & DEK_NAG.RODZ<>'LX'


\ba_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed dolacz nowego naglowka schematu dekretacji
::  OLD: \ba_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='D';
ZMIENNE.blank();
ZMIENNE.DEK_EDIT:='D';
DEK_NAG.blank()


\aa_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji dolacz nowego naglowka schematu dekretacji
::   WY: 1 - prawidlowo zredagowano naglowek scheatu dekretacji, 0 - w p.p.
::  OLD: \aa_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(null);
{? DEK_NAG.edit("exec('chk_dek_nag','!zws_par_fast')") || {? DEK_NAG.add() || exec('zapisz_stale','!zws_par_fast',DEK_NAG.ref) ?} ?};
ZMIENNE.DEK_EDIT:=''


\chk_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula sprawdza wymagane pola w tabeli DEK_NAG
::   WY: akronim pola ktore musi byc wypelnione, '' - w p.p.
::  OLD: \chk_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
exec('chk_dek_nag','dok_fks_aut_dok',-menu_txt()='popraw')


\zapisz_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula zapisuje ustawione stale z tabeli tymczasowej do tabeli DEK_STAL oraz kasuje tabele tymczasowa
::   WE: _a - ref tabeli DEG_NAG
::  OLD: \zapisz_stale/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TD_STAL')>100 & TD_STAL.first() & _a<>null
|| ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
   REJ.prefix();
   DOK_REJ.prefix();
   DEK_STAL.prefix();
   {! |?
      DEK_STAL.blank(1);
      DEK_STAL.DEK_NAG:=_a;
      {? TD_STAL.ODD_REF<>'' & ODD.seek(BB.sqlint(TD_STAL.ODD_REF),form(8+TD_STAL.ODD_REF))
      || DEK_STAL.ODD:=ODD.ref()
      ?};
      {? TD_STAL.REJ_REF<>'' & REJ.seek(BB.sqlint(TD_STAL.REJ_REF),form(8+TD_STAL.REJ_REF))
      || DEK_STAL.REJ:=REJ.ref()
      ?};
      {? TD_STAL.DOK_REF<>'' & DOK_REJ.seek(BB.sqlint(TD_STAL.DOK_REF),form(8+TD_STAL.DOK_REF))
      || DEK_STAL.DOK_REJ:=DOK_REJ.ref()
      ?};
      DEK_STAL.add();
      TD_STAL.next()
   !};
   {? TD_STAL.first() || {!|? TD_STAL.del() !} ?}
|? exec('spr_ile_oddz','!zws_par_fast') & _a<>null
|| ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
   {? ZMIENNE.DEK_RREJ<>null & ODD.first()
   || DEK_STAL.prefix();
      DEK_STAL.blank();
      DEK_STAL.DEK_NAG:=_a;
      DEK_STAL.ODD:=ODD.ref();
      DEK_STAL.REJ:=ZMIENNE.DEK_RREJ;
      DEK_STAL.DOK_REJ:=ZMIENNE.DEK_RDOK;
      DEK_STAL.add()
   ?}
?}


\be_win_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed poprawa rekordu w tabeli DEK_NAG
::  OLD: \be_win_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.blank();
ZMIENNE.DEK_EDIT:='P';
{? DEK_NAG.F_RVAT<>null || ZMIENNE.DEK_ZRV:='F' || ZMIENNE.DEK_ZRV:='S' ?};
{? DEK_NAG.F_GR_VAT<>null || ZMIENNE.DEK_ZGRV:='F' || ZMIENNE.DEK_ZGRV:='S' ?};
{? exec('spr_ile_oddz','!zws_par_fast')
|| DEK_STAL.cntx_psh(); DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(DEK_NAG.ref());
   {? DEK_STAL.first()
   || {? DEK_NAG.SREJ='S'
      || ZMIENNE.DEK_RREJ:=DEK_STAL.REJ;
         ZMIENNE.DEK_SREJ:=DEK_STAL.REJ().KOD
      ?};
      {? DEK_NAG.SDREJ='S'
      || ZMIENNE.DEK_RDOK:=DEK_STAL.DOK_REJ;
         ZMIENNE.DEK_SDOK:=DEK_STAL.DOK_REJ().NAZ
      ?}
   ?};
   DEK_STAL.cntx_pop()
?};
{? TREE_DEK.SYSTEM='KAS'
|| {? TREE_DEK.RODZ='SN'
   || DEK_NAG.win_edit('DEK_NAG3')
   || DEK_NAG.win_edit('DEK_NAG6')
   ?}
|? TREE_DEK.SYSTEM='FST'
|| {? TREE_DEK.RODZ='EF' | TREE_DEK.RODZ='EP' | TREE_DEK.RODZ='ED'
   || DEK_NAG.win_edit('DEK_NAG1')
   |? TREE_DEK.RODZ='EW'
   || DEK_NAG.win_edit('DEK_NAG4')
   || DEK_NAG.win_edit('DEK_NAG3')
   ?}
|? TREE_DEK.SYSTEM='PPL'
|| DEK_NAG.win_edit('DEK_NAG2')
|? (1+TREE_DEK.SYSTEM)='L'
|| {? TREE_DEK.RODZ='LM'
   || DEK_NAG.win_edit('DEK_NAG7')
   |? TREE_DEK.RODZ='LZ' | TREE_DEK.RODZ='LX'
   || DEK_NAG.win_edit('DEK_NAG5')
   || DEK_NAG.win_edit('DEK_NAG8')
   ?}
?};
1


\ae_win_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula uruchamiana po akcji popraw na naglowku schematu dekretacji. Formula sprawdza czy sie nie zmienily
::       wartosci w polach rejestr i rodzaj dokumentu w przypadku gdy jest tylko jeden oddzial (redakcja stalych
::       na naglowku)
::   WY:
::  OLD: \ae_win_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? (DEK_NAG.SREJ='S' | DEK_NAG.SDREJ='S') & exec('spr_ile_oddz','!zws_par_fast')
|| DEK_STAL.cntx_psh(); DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(DEK_NAG.ref());
   {? DEK_STAL.first()
   || _put:=0;
      {? ZMIENNE.DEK_RREJ<>DEK_STAL.REJ || DEK_STAL.REJ:=ZMIENNE.DEK_RREJ; _put:=1 ?};
      {? ZMIENNE.DEK_RDOK<>DEK_STAL.DOK_REJ || DEK_STAL.DOK_REJ:=ZMIENNE.DEK_RDOK; _put:=1 ?};
      {? _put || DEK_STAL.put() ?}
   || {? ZMIENNE.DEK_RREJ<>null
      || ODD.cntx_psh(); ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
         {? ODD.first()
         || DEK_STAL.blank();
            DEK_STAL.ODD:=ODD.ref();
            DEK_STAL.REJ:=ZMIENNE.DEK_RREJ;
            DEK_STAL.DOK_REJ:=ZMIENNE.DEK_RDOK;
            DEK_STAL.add()
         ?};
         ODD.cntx_pop()
      ?}
   ?};
   DEK_STAL.cntx_pop()
?};
ZMIENNE.DEK_EDIT:=''


\bdel_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed akcja usun na naglowku schematu dekretacji. Pytanie czy usunac rekord.
::   WY: 1 - mozna usunac rekord, 0 - w p.p.
::  OLD: \bdel_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy usunąć bieżący wiersz?'@)


\a_kopia_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula kopiuje wybrany schemat dekretacji
::  OLD: \a_kopia_dek/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_grp:=var_pres('ssize_s')>0;
_okno:=DEK_NAG.win_edit('?');
{? ~_grp || DEK_NAG.win_edit('DEK_KOPI') ?};
ROK_F.win_sel('WER');
_knref:=null;
_nref:=DEK_NAG.ref();
_rref:=DEK_NAG.ROK;
_krref:=null;
{? exec('spr_ile_oddz','!zws_par_fast')
|| DEK_STAL.cntx_psh(); DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(DEK_NAG.ref());
   {? DEK_STAL.first()
   || {? DEK_NAG.SREJ='S'
      || ZMIENNE.DEK_RREJ:=DEK_STAL.REJ;
         ZMIENNE.DEK_SREJ:=DEK_STAL.REJ().KOD
      ?};
      {? DEK_NAG.SDREJ='S'
      || ZMIENNE.DEK_RDOK:=DEK_STAL.DOK_REJ;
         ZMIENNE.DEK_SDOK:=DEK_STAL.DOK_REJ().NAZ
      ?}
   ?};
   DEK_STAL.cntx_pop()
?};
{? {? _grp
   || 1
   || DEK_NAG.edit("exec('chk_dek_kopia','!zws_par_fast')")
   ?}
|| _pow:=1;
   DEK_NAG.cntx_psh();
   {? _grp || DEK_NAG.ROK:=REJESTR.ROK ?};
   DEK_NAG.NAZ:=exec('dek_nag_naz','dok_fks_aut_dok');
   do();
   DEK_NAG.prefix();
   {? DEK_NAG.add()
   || _knref:=DEK_NAG.ref();
      _krref:=DEK_NAG.ROK;
      {? _grp
      || exec('kopiuj_stale','fks_auto',_nref,_knref,_krref)
      || exec('zapisz_stale','!zws_par_fast',DEK_NAG.ref)
      ?};
      DEK_POZ.index('DEK_POZ');
      DEK_POZ.prefix(_nref);
      {? DEK_POZ.first
      || {!
         |? _pref:=DEK_POZ.ref();
            DEK_POZ.cntx_psh();
            DEK_POZ.DEK_NAG:=_knref;
            DEK_POZ.prefix();
            {? DEK_POZ.add()
            || exec('kop_wyr','rejestry','DEK_POZ',#_pref,#DEK_POZ.ref())
            || _pow:=0; undo()
            ?};
            DEK_POZ.cntx_pop();
            DEK_POZ.next()
         !}
      ?}
   ?};
   end();
   DEK_NAG.cntx_pop();
   {? ~_pow
   || _knref:=null;
      {? _grp
      || bledy_s+=1
      || FUN.info('Kopiowanie schemtu dekretacji nie powiodło się.'@)
      ?}
   ?}
?};
{? ~_grp
|| DEK_NAG.seek({? _knref<>null & _krref=_rref || _knref || _nref ?});
   DEK_NAG.win_edit(_okno)
?};
ROK_F.seek(_rref);
1


\chk_dek_kopia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [11.21]
:: OPIS: Formula sprawdza czy wlasiwie wypelniono dane podczas kopiowania schematu
::  OLD: \chk_dek_kopia/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
{? ~DEK_NAG.ROK || FUN.info('Nie wybrano roku.'@); _rr:='ROK' ?};
{? _rr='' & DEK_NAG.RODZ<>'SV'
|| {? DEK_NAG.SREJ='S'
   || {? exec('spr_ile_oddz','!zws_par_fast')
      || {? ZMIENNE.DEK_SREJ='' | ZMIENNE.DEK_RREJ=null()
         || FUN.info('Niewypełnione pole stały rejestr księgowy.'@);
            _rr:='DEK_SREJ'
         ?}
      || {? ~(var_pres('TD_STAL')>100 & TD_STAL.first())
         || FUN.info('Niewypełnione pole stały rejestr księgowy.'@);
            _rr:='DEK_SREJ'
         ?}
      ?}
   |? DEK_NAG.SREJ='F'
   || {? DEK_NAG.F_REJ=null
      || FUN.info('Niewypełnione pole formuła na rejestr księgowy.'@);
         _rr:='F_REJ'
      ?}
   ?};
   {? _rr<>''
   || return(_rr)
   |? DEK_NAG.SREJ='F' & DEK_NAG.SDREJ='S'
   || FUN.info('Nie można wprowadzić stałego rodzaju dokumentu dla rejestru wyznaczanego formułą.'@);
      _rr:='SDREJ'
   |? DEK_NAG.SDREJ='S'
   || {? exec('spr_ile_oddz','!zws_par_fast')
      || {? ZMIENNE.DEK_SDOK='' | ZMIENNE.DEK_RDOK=null()
         || FUN.info('Niewypełnione pole stały rodzaj dokumentu.'@);
            _rr:='DEK_SDOK'
         ?}
      || {? ~(var_pres('TD_STAL')>100 & TD_STAL.first() & TD_STAL.DOK_REF<>'')
         || FUN.info('Niewypełnione pole stały rodzaj dokumentu.'@);
            _rr:='DEK_SDOK'
         ?}
      ?}
   |? DEK_NAG.SDREJ='F'
   || {? DEK_NAG.F_DOK_RJ=null
      || FUN.info('Niewypełnione pole formuła na rodzaj dokumentu.'@);
         _rr:='F_DOK_RJ'
      ?}
   ?}
?};
{? _rr='' & DEK_NAG.SREJ='S'
|| {? exec('spr_ile_oddz','!zws_par_fast')
   || {? ZMIENNE.DEK_RREJ().ROK<>DEK_NAG.ROK
      || FUN.info('Brak integralności rejestru: '+REJ.KOD+' (Jedn. księgowa: '+REJ.ODD().OD+')'
                  +' z podanym rokiem: '+DEK_NAG.ROK().NAZ
                  +'\nWskazany rejestr pochodzi z innego roku.');
         _rr:='DEK_SREJ'
      |? DEK_NAG.SDREJ='S' & ZMIENNE.DEK_RDOK().REJ().ROK<>DEK_NAG.ROK
      || FUN.info('Brak integralności rodzaju dokumentu : '+DOK_REJ.NAZ+' (Jedn. księgowa: '+REJ.ODD().OD+')'
                  +' z podanym rokiem: '+DEK_NAG.ROK().NAZ
                  +'\nWskazany rodzaj dokumentu pochodzi z innego roku.');
         _rr:='DEK_SDOK'
      ?}
   || {? var_pres('TD_STAL')>100 & TD_STAL.first()
      || REJ.cntx_psh();
         REJ.prefix();
         DOK_REJ.cntx_psh();
         DOK_REJ.prefix();
         {!|?
            {? TD_STAL.REJ_REF<>'' & REJ.seek(BB.sqlint(TD_STAL.REJ_REF),form(8+TD_STAL.REJ_REF))
            || {? REJ.ROK<>DEK_NAG.ROK
               || FUN.info('Brak integralności rejestru: '+REJ.KOD+' (Jedn. księgowa: '+REJ.ODD().OD+')'
                  +' z podanym rokiem: '+DEK_NAG.ROK().NAZ
                  +'\nWskazany rejestr pochodzi z innego roku.');
                  _rr:='DEK_SREJ'
               ?}
            |? DEK_NAG.SDREJ='S' & TD_STAL.DOK_REF<>'' & DOK_REJ.seek(BB.sqlint(TD_STAL.DOK_REF),form(8+TD_STAL.DOK_REF))
            || {? DOK_REJ.REJ().ROK<>DEK_NAG.ROK
               || FUN.info('Brak integralności rodzaju dokumentu : '+DOK_REJ.NAZ
                  +' (Jedn. księgowa: '+REJ.ODD().OD+')'
                  +' z podanym rokiem: '+DEK_NAG.ROK().NAZ
                  +'\nWskazany rodzaj dokumentu pochodzi z innego roku.');
                  _rr:='DEK_SDOK'
               ?}
            ?};
            _rr='' & TD_STAL.next()
         !};
         REJ.cntx_pop();
         DOK_REJ.cntx_pop()
      ?}
   ?}
?};
_rr


\bg_kopia_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed akcja grupowa kopiA w okienku wertowania DEK_NAG (schematow dekretacji)
::   WY: 1 - prawidlowo ustawiono parametry kopiowania, 0 - w p.p.
::  OLD: \bg_kopia_dek/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
okno:=REJESTR.win_edit('?');
ROK_F.cntx_psh(); ROK_F.win_dict('WER');
REJESTR.win_edit('ROK');
{? REJESTR.edit("{? ~REJESTR.ROK || FUN.info('Nie wybrano roku.'@); 0 || 1 ?}")
|| sel_nchk();
   ssize_s:=DEK_NAG.sel_size(); bledy_s:=0; 1
|| REJESTR.win_edit(okno); &okno;
   ROK_F.cntx_pop();
   0
?}


\ag_kopia_dek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji grupowej kopiA w okienku wertowania DEK_NAG (schematow dekretacji)
::  OLD: \ag_kopia_dek/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.info('Zaznaczonych: '+$ssize_s+'. '+'\nSkopiowano: '+$(ssize_s-bledy_s)+'.');
REJESTR.win_edit(okno);
ROK_F.cntx_pop();
&ssize_s; &bledy_s; &okno


\bd_win_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula ustawia odpowiednie okienka redagowania dla tabeli DEK_NAG
::  OLD: \bd_win_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? TREE_DEK.SYSTEM='KAS'
|| {? TREE_DEK.RODZ='SN'
   || DEK_NAG.win_edit('DEK_NAG3')
   || DEK_NAG.win_edit('DEK_NAG6')
   ?}
|? TREE_DEK.SYSTEM='FST'
|| {? TREE_DEK.RODZ='EF' | TREE_DEK.RODZ='EP' | TREE_DEK.RODZ='ED'
   || DEK_NAG.win_edit('DEK_NAG1')
   |? TREE_DEK.RODZ='EW'
   || DEK_NAG.win_edit('DEK_NAG4')
   || DEK_NAG.win_edit('DEK_NAG3')
   ?}
|? TREE_DEK.SYSTEM='PPL'
|| DEK_NAG.win_edit('DEK_NAG2')
|? (1+TREE_DEK.SYSTEM)='L'
|| {? TREE_DEK.RODZ='LM'
   || DEK_NAG.win_edit('DEK_NAG7')
   |? TREE_DEK.RODZ='LZ' | TREE_DEK.RODZ='LX'
   || DEK_NAG.win_edit('DEK_NAG5')
   || DEK_NAG.win_edit('DEK_NAG8')
   ?}
?};
ZMIENNE.blank();
{? DEK_NAG.F_RVAT<>null || ZMIENNE.DEK_ZRV:='F' || ZMIENNE.DEK_ZRV:='S' ?};
{? DEK_NAG.F_GR_VAT<>null || ZMIENNE.DEK_ZGRV:='F' || ZMIENNE.DEK_ZGRV:='S' ?};
{? exec('spr_ile_oddz','!zws_par_fast')
|| DEK_STAL.cntx_psh(); DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(DEK_NAG.ref());
   {? DEK_STAL.first()
   || {? DEK_NAG.SREJ='S'
      || ZMIENNE.DEK_RREJ:=DEK_STAL.REJ;
         ZMIENNE.DEK_SREJ:=DEK_STAL.REJ().KOD
      ?};
      {? DEK_NAG.SDREJ='S'
      || ZMIENNE.DEK_RDOK:=DEK_STAL.DOK_REJ;
         ZMIENNE.DEK_SDOK:=DEK_STAL.DOK_REJ().NAZ
      ?}
   ?};
   DEK_STAL.cntx_pop()
?};
DEK_NAG.display()


\bl_dek_nag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na wartosc poczatkowa pola zlaczeniowego tab. DEK_POZ pole DEK_NAG
::       oraz wartosc poczatkowa tab. DEK_STAL pole DEK_NAG
::   WY: wskazanie na naglowek schematu dekretacji
::  OLD: \bl_dek_nag/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.ref()


\prdekgrp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja grupy podatkowej na pozycji dekretu
::  OLD: \prdekgrp/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.VPOZ_STD='R' || DISP.GRD='N' ?}


\prdekfgr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: przed redakcja DISP.F_GR
::  OLD: \prdekfgr/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.VPOZ_STD='R' || DISP.GRD='T' ?}


\be_f_vat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: Formula przed redakcja pola DEK_POZ.F_VAT
::  OLD: \be_f_vat/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.VPOZ_STD='R'


\bedekp_rvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula przed redakcja pola DEK_POZ.RVAT
::  OLD: \bedekp_rvat/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.VPOZ_STD='R' || DISP.RVATD='N' ?}


\bedekp_f_rvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula przed redakcja pola DEK_POZ.F_RVAT
::  OLD: \bedekp_f_rvat/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.VPOZ_STD='R' || DISP.RVATD='T' ?}


\ba_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed akcja dolacz w pozycjach schematu dektretacji. Formula ustawia odpowiednie okienko edycji.
::   WE: [_a] - na koniec? 1-tak [0]-nie
::  OLD: \ba_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.get()
|| {? var_press('_a')<=0 || _a:=0 ?};
   {? DEK_NAG.RODZ='EF' | DEK_NAG.RODZ='EP' | DEK_NAG.RODZ='ED' | DEK_NAG.RODZ='KU' | ~-DEK_NAG.RODZ='KL'
      | DEK_NAG.RODZ='SN'
   || DEK_POZ.win_edit('RED2');
      DEKRET.win_edit('DEKRET')
   |? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LP' | DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='LX'
   || DEK_POZ.win_edit('RED3');
      DEKRET.win_edit('DEKRET2');
      DISP.RVATD:='B';
      DISP.GRD:='B'
   |? DEK_NAG.RODZ='SV'
   || DEK_POZ.win_edit('RED1');
      DEKRET.win_edit('DEKRET2')
   || DEK_POZ.win_edit('RED1');
      DEKRET.win_edit('DEKRET')
   ?};
   DEK_POZ.fld_fml('ZAL','BEFORE_EDIT',"DEK_NAG.RODZ<>'LP' | DEK_NAG.RODZ<>'LK' | DEK_NAG.RODZ<>'LX'");
   DEK_POZ.fld_fml('ZAL','BEFORE_DISPLAY',"DEK_NAG.RODZ<>'LP' | DEK_NAG.RODZ<>'LK' | DEK_NAG.RODZ<>'LX'");
   DEK_POZ.cntx_psh();
   _lp:={? DEK_POZ.get() || DEK_POZ.LP+_a || 1 ?};
   DEK_POZ.cntx_pop();
   DEK_POZ.blank();
   DEK_POZ.LP:=_lp;
   {? DEK_POZ.edit()
   || _dpoz:=DEK_POZ.ref();
      do();
      exec('dek_poz_num','!zws_par_fast',DEK_POZ.LP);
      {? DEK_POZ.add() || _dpoz:=DEK_POZ.ref() ?};
      end();
      DEK_POZ.seek(_dpoz)
   ?};
   ~_a
|| FUN.info('Brak wprowadzonego nagłówka schematu dekretacji.'@);
   0
?}


\aa_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji dolocz na pozycji schematu dekretacji
::  OLD: \aa_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_POZ.fld_fml('ZAL','BEFORE_EDIT',"*");
DEK_POZ.fld_fml('ZAL','BEFORE_DISPLAY',"*");
1


\bp_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed akcja popraw na pozycji schematu dekretacji. Formula ustawia odpowiednie okienko edycji
::  OLD: \bp_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ='EF' | DEK_NAG.RODZ='EP' | DEK_NAG.RODZ='ED' | DEK_NAG.RODZ='KU' | ~-DEK_NAG.RODZ='KL'
   | DEK_NAG.RODZ='SN'
|| DEK_POZ.win_edit('RED2');
   DEKRET.win_edit('DEKRET')
|? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' |  DEK_NAG.RODZ='LP' |  DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='LX'
|| DEK_POZ.win_edit('RED3');
   DEKRET.win_edit('DEKRET2');
   exec('prpekdek','!zws_par_fast')
|? DEK_NAG.RODZ='SV'
|| DEK_POZ.win_edit('RED1');
   DEKRET.win_edit('DEKRET2')
|| DEK_POZ.win_edit('RED1');
   DEKRET.win_edit('DEKRET')
?};
DEK_POZ.fld_fml('ZAL','BEFORE_EDIT',"DEK_NAG.RODZ<>'LP' | DEK_NAG.RODZ<>'LK' | DEK_NAG.RODZ<>'LX'");
DEK_POZ.fld_fml('ZAL','BEFORE_DISPLAY',"DEK_NAG.RODZ<>'LP' | DEK_NAG.RODZ<>'LK' | DEK_NAG.RODZ<>'LX'");
1


\ap_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji popraw na pozycji schematu dekretacji
::  OLD: \ap_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_POZ.fld_fml('ZAL','BEFORE_EDIT',"*");
DEK_POZ.fld_fml('ZAL','BEFORE_DISPLAY',"*");
1


\prpekdek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: ustala wartosc DISP.GRD
::  OLD: \prpekdek/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
DISP.GRD:={? DEK_POZ.GR<>null || 'N'
          |? DEK_POZ.F_GR<>null || 'T'
          || 'B'
          ?};
DISP.RVATD:={? DEK_POZ.RVAT<>null || 'N'
            |? DEK_POZ.F_RVAT<>null || 'T'
            || 'B'
            ?};
1


\b_del_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula przed akcja usun pozycji schematu dekretacji
::  OLD: \b_del_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Usunąć bieżący wiersz?'@)


\a_del_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula po akcji usun pozycji schematu dekretacji
::  OLD: \a_del_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_WYR.index('SKID_WYR');
SKID_WYR.prefix(REF.FIRMA,'DEK_POZ',DEK_POZ.name(),#DEK_POZ.ref);
{? SKID_WYR.first() || {!|? SKID_WYR.del() !} ?};
DEK_POZ.cntx_psh();
DEK_POZ.index('LP'); DEK_POZ.prefix(DEK_NAG.ref());
_next:={? DEK_POZ.next() || DEK_POZ.ref() ?};
DEK_POZ.cntx_pop();
do();
{? DEK_POZ.del(,1) & _next
|| DEK_POZ.cntx_psh();
   DEK_POZ.index('LP'); DEK_POZ.prefix(DEK_NAG.ref());
   {? DEK_POZ.seek(_next)
   || {!
      |? DEK_POZ.LP-=1;
         DEK_POZ.put();
         DEK_POZ.next()
      !}
   ?};
   DEK_POZ.cntx_pop()
?};
end()


\kopia_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula dubluje biezaca pozycje schematu dekretacji, funkcja moze byc pomocna gdy sie
::       definiuje schematy gdzie pozycje roznia sie jedynie wyroznikiem ew. innymi parametrami
::  OLD: \kopia_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_pref:=DEK_POZ.ref();
DEK_POZ.LP+=1;
do();
exec('dek_poz_num','!zws_par_fast',DEK_POZ.LP);
{? DEK_POZ.add()
|| exec('kop_wyr','rejestry','DEK_POZ',#_pref,#DEK_POZ.ref(),1)
?};
end()


\bd_win_dek_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietl w okienkach werowania tabeli DEK_POZ. Formula ustawia odpowiedeni okienka przed
::       wyswietleniem
::  OLD: \bd_win_dek_poz/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ='EF' | DEK_NAG.RODZ='EP' | DEK_NAG.RODZ='ED' | DEK_NAG.RODZ='KU' | ~-DEK_NAG.RODZ='KL' | DEK_NAG.RODZ='SN'
|| DEK_POZ.win_edit('RED2');
   DEKRET.win_edit('DEKRET')
|? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LP' | DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='LX'
|| DEK_POZ.win_edit('RED3');
   DEKRET.win_edit('DEKRET2');
   exec('prpekdek','!zws_par_fast')
|? DEK_NAG.RODZ='SV'
|| DEK_POZ.win_edit('RED1');
   DEKRET.win_edit('DEKRET2')
|| DEK_POZ.win_edit('RED1');
   DEKRET.win_edit('DEKRET')
?};
DEK_POZ.display()


\br_dk_poz_wer3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [$12.30]
:: OPIS: Formula przed wywietleniem rekodu w okienku wertowania WER3 tabeli DEK_POZ
:----------------------------------------------------------------------------------------------------------------------
exec('bd_dp_ident','wyrozniki');
0


\ae_dek_stal_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji pola DEK_STAL.ODD. Formula sprawdza poprawnosc wupelnienia pola DEK_STAL.ODD.
::   WY: 1 - prawidlowo zredagowano pole, 0 - w p.p.
::  OLD: \ae_dek_stal_odd/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()<>null
|| UNPAR.PODD:=fld()
|| FUN.info('Nie wybrano jednostki księgowej.'@); 0
?}


\ae_dek_stal_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji pola DEK_STAL.REJ. Formula sprawdza poprawnosc wypelnienia pola.
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
::  OLD: \ae_dek_stal_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()<>null
|| {? DEK_STAL.DOK_REJ<>null & DEK_STAL.DOK_REJ().REJ<>DEK_STAL.REJ || DEK_STAL.DOK_REJ:=null() ?}; 1
|| FUN.info('Nie wybrano rejestru.'@); 0
?}


\be_dek_st_drej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja pola DEK_STAL.DOK_REJ. Formula sprawdza poprawnosc wupelnienia pola DEK_STAL.REJ
::       i w zaleznosci od konfiguracji parametrow umozliwia redakcje pola DEK_STAL.DOK_REJ
::   WY: 1 - mozna redagowac pole, 0 - w p.p.
::  OLD: \be_dek_st_drej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_STAL.REJ<>null
|| {? DEK_STAL.DOK_REJ<>null & DEK_STAL.DOK_REJ().REJ<>DEK_STAL.REJ || DEK_STAL.DOK_REJ:=null() ?};
   DEK_STAL.REJ();
   1
|| 0
?}


\ae_dek_st_drej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redagowaniu pola DEK_STAL.DOK_REJ
::  OLD: \ae_dek_st_drej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
1


\aa_dek_stal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula dolacza nowa stala do schematu dekretacji
::   WY: 1 - prawidlowo dodano stala 0 - w p.p.
::  OLD: \aa_dek_stal/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:=0;
{? DEK_NAG.get()
|| _pomoc:=POMOC.AKC;
   POMOC.AKC:='P';
   DEK_STAL.blank();
   {? DEK_STAL.edit("exec('chk_dek_stal','dok_fks_aut_dok')") || _rr:=DEK_STAL.add() ?};
   POMOC.AKC:=_pomoc
|| FUN.info('Brak wprowadzonego nagłówka schematu dekretacji.'@)
?};
_rr


\ap_dek_stal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula dolacza nowa stala do schematu dekretacji
::   WY: 1 - prawidlowo dodano stala 0 - w p.p.
::  OLD: \ap_dek_stal/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:=0;
_pomoc:=POMOC.AKC;
POMOC.AKC:='P';
{? DEK_STAL.edit("exec('chk_dek_stal','dok_fks_aut_dok')") || _rr:=DEK_STAL.put() ?};
POMOC.AKC:=_pomoc;
_rr


\bu_dek_stal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed usunieciem stalej z definicji schematu dekretacji
::  OLD: \bu_dek_stal/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_STAL.DEK_NAG().SREJ='S' | DEK_STAL.DEK_NAG().SDREJ='S'
|| {? DEK_STAL.size()=1
   || FUN.info('Ustawiono w nagłówku stały rejestr lub stały rodzaj dokumentu.'
               '\nW tabeli stałych musi występować co najmniej jedna stała.'@);
      0
   || 1
   ?}
|| 1
?}


\rek_po_dek_stal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula rekord po w okienku wertowania DEK_STAL tabeli DEK_STAL
::   WY: akronim pola ktore nie jest wypelnione
::  OLD: \rek_po_dek_stal/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(DEK_STAL,,'ODD','REJ','DOK_REJ')


\ae_dekret_ktxt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji pola DEKRET.KONTOTXT. Formula wypelnia na podstawie pola KONTOTXT pole ID
::  OLD: \ae_dekret_ktxt/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEKRET.ID=''
|| DEKRET.ID:=DEKRET.KONTOTXT
|| 1
?}


\be_wrkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: przed redakcja WARLOG.KOD - sprawdza czy zmienna nie zostala juz uzyta w tab. FORMULA
::   WY: 0/1
::  OLD: \be_wrkod/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
FORMULA.index('FORMULA4'); FORMULA.prefix();
{? (1+menu_txt())<>'D' & WARLOG.KOD<>'' & FORMULA.first()
|| {!
   |? {? exec('formwarl','dok_fks_aut_dok',FORMULA.FORMULA,WARLOG.KOD)
      || {? (1+menu_txt())='U'
         || FUN.info('Zmienna została użyta w formule księgowej.\nUsunięcie niemożliwe.'@)
         || FUN.info('Zmienna została użyta w formule księgowej.\nEdycja pola Kod niemożliwa.'@)
         ?};
         _wyn:=0
      ?};
      _wyn & FORMULA.next()
   !}
?};
_wyn


\ae_wrkod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: po redakcji WARLOG.KOD - sprawdza czy zmienna nie zostala juz uzyta
::   WY: 0/1
::  OLD: \ae_wrkod/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
_ref:={? (1+menu_txt())='P' || WARLOG.ref() || null ?};
_kod:=WARLOG.KOD;
:: sprawdzenie czy wystepuja inne znaki niz A..Z, 0..1, _
_ile:=(+_kod);
_zly:='';
{! _i:=1.._ile
|! _char:=(_i-1)-_kod-(_ile-_i);
   {? ~( (65<=%(_char) & %(_char)<=90) | (48<=%(_char) & %(_char)<=57) | %(_char)=95 )
   || _zly:=_char
   ?}
!};
{? _zly=''
|| WARLOG.cntx_psh();
   WARLOG.index('KKOD');
   WARLOG.prefix(1+EKSG.RODZ,_kod,_kod);
   {? WARLOG.first() & WARLOG.ref()<>_ref
   || FUN.info('Podany kod jest już wykorzystany.'@);
      _wyn:=0
   ?};
   WARLOG.cntx_pop()
|| FUN.info('Podany kod zawiera nie dozwolony znak: %1'@[_zly]);
   _wyn:=0
?};
_wyn


\pr_dvksg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2006]
:: OPIS: przed redakcja pola VAT - WARLOG.DV
::  OLD: \pr_dvksg/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
WARLOG.TD='R'


\ae_dvksg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji pola WARLOG.DV. Formula odpowienio ustawia pole WARLOG.RKW na 'D' jezeli odznaczymy pole
::       DV (dotyczy VAT). Pole RKW (rodzaj kwoty) jest pole szczegolowym jezeli zazanaczymy DV (dotyczy VAT)
::  OLD: \ae_dvksg/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? WARLOG.DV='N' || WARLOG.RKW:='D' ?};
1


\prrkwksg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2006]
:: OPIS: przed redakcja pola typu wartosci WARLOG.RKW
::  OLD: \prrkwksg/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
WARLOG.DV='T'


\ae_warlog_td
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: po edycji pola WARLOG.TD
::   WY: czy mozlwe zakonczenie redakcji pola
::  OLD: \ae_warlog_td/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? WARLOG.TD<>'R'
|| WARLOG.DV:='N';
   WARLOG.RKW:='D'
?};
win_disp;
1


\war_recb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: akcja na rekord przed WARLOG
::       sprawdza czy liczba rekordow nie przekroczyla 256
::       poniewaz pozniej na podstawie WARLOG budowana jest tabela tymczasowa, ktora ma tyle pol ile rekordow WARLOG
::  OLD: \war_recb/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? WARLOG.size()>255
|| WARLOG.actions('WER','d',,1)
|| WARLOG.actions('WER','',,1)
?}


\bd_zm_dek_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem pola wypelnia odpowiednio zmienna wartoscia odpowiadajaca
::       zlaczeniu sql z pola DEK_NAG.TYP
::  OLD: \bd_zm_dek_typ/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ<>''
|| {? ~-DEK_NAG.RODZ='KL' & DEK_NAG.TYP*'kryteria'
   || KT.cntx_psh;
      KT.prefix();
      {? KT.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=KT.T;
         ZMIENNE.DEK_T_TR:=KT.N
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      KT.cntx_pop
   |? DEK_NAG.RODZ='KU' & DEK_NAG.TYP*'rodzum'
   || RU.cntx_psh;
      RU.prefix();
      {? RU.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=RU.K+' - '+RU.O;
         ZMIENNE.DEK_T_TR:=''
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      RU.cntx_pop
   |? DEK_NAG.RODZ='SV' & DEK_NAG.TYP*'koperpoz'
   || POZOPER.cntx_psh;
      POZOPER.prefix();
      {? POZOPER.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=form(POZOPER.OPER().KOD,8)+form(POZOPER.KOD);
         ZMIENNE.DEK_T_TR:=form(POZOPER.OPER().NAZWA)+'/'+form(POZOPER.NAZWA)
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      POZOPER.cntx_pop
   |? DEK_NAG.RODZ='EW' & DEK_NAG.TYP*'srdt'
   || SRDT.cntx_psh();
      SRDT.use('srdt'+'r'+REF.FIRMA().SYMBOL);
      SRDT.prefix();
      {? SRDT.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=SRDT.TYP;
         ZMIENNE.DEK_T_TR:=SRDT.NAZWA
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      SRDT.cntx_pop()
   |? DEK_NAG.RODZ='LM' & DEK_NAG.TYP*'typydok'
   || TYPYDOK.cntx_psh;
      TYPYDOK.prefix();
      {? TYPYDOK.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=TYPYDOK.T;
         ZMIENNE.DEK_T_TR:=TYPYDOK.NAZ
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      TYPYDOK.cntx_pop
   |? (DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LP' | DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='LX') &
      DEK_NAG.TYP*'typydsp'
   || TYPYSP.cntx_psh;
      TYPYSP.prefix();
      {? TYPYSP.seek(BB.sqlint(DEK_NAG.TYP),form(8+DEK_NAG.TYP))
      || ZMIENNE.DEK_TYP:=TYPYSP.T;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ
      || ZMIENNE.DEK_TYP:=ZMIENNE.DEK_T_TR:=''
      ?};
      TYPYSP.cntx_pop
   |? ~-DEK_NAG.RODZ='KL' | DEK_NAG.RODZ='KU' | DEK_NAG.RODZ='SV' | DEK_NAG.RODZ='EW' | DEK_NAG.RODZ='LM'
      | DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LP' | DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='LX'
   || ZMIENNE.DEK_TYP:='';
      ZMIENNE.DEK_T_TR:=''
   || ZMIENNE.DEK_TYP:='Nie dotyczy';
      ZMIENNE.DEK_T_TR:='Nie dotyczy'
   ?}
?};
1


\be_zm_dek_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja zmiennej ZMIENNE.DEK_TYP
::  OLD: \be_zm_dek_typ/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
1


\f3_zm_dek_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 zmiennej ZMIENNE.DEK_TYP. Formula wyswietla odpowiednia tabele slownikowa do wyboru
::       wlasciwego typu (zaleznego od systemu).
::   WY: zwraca wybrany rekord
::  OLD: \f3_zm_dek_typ/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:='';
{? DEK_NAG.RODZ<>''
|| {? ~-DEK_NAG.RODZ='KL'
   || KT.cntx_psh();
      KT.win_sel('TYP');
      KT.index('KRYTERIA');
      KT.prefix(exec('ref_firma','ustawienia'));
      {? KT.select()
      || DEK_NAG.TYP:=$KT.ref;
         ZMIENNE.DEK_TYP:=KT.T;
         ZMIENNE.DEK_T_TR:=KT.N;
         _rr:=KT.T
      ?};
      KT.cntx_pop()
   |? DEK_NAG.RODZ='KU'
   || RU.cntx_psh;
      SLO_TYP.cntx_psh;
      SLO_TYP.index('SYMBOL');
      SLO_TYP.prefix();
      {? SLO_TYP.find_key('UMZLEC','UMZLEC')
      || RU.index('K');
         RU.prefix(SLO_TYP.ref);
         {? RU.select()
         || DEK_NAG.TYP:=$RU.ref;
            ZMIENNE.DEK_TYP:=RU.K+' - '+RU.O;
            ZMIENNE.DEK_T_TR:='';
            _rr:=RU.K+' - '+RU.O
         ?}
      ?};
      SLO_TYP.cntx_pop;
      RU.cntx_pop
   |? DEK_NAG.RODZ='SV'
   || POZOPER.index('KSIEG');
      POZOPER.prefix();
      {? POZOPER.first()
      || _oper:=form(8+fld); _tran:=(8-fld());
         POZOPER.find_key(_oper,_tran)
      ?};
      POZOPER.win_sel('WER2');
      POZOPER.win_edit('RED2');
      {? POZOPER.select(,1)
      || DEK_NAG.TYP:=$POZOPER.ref;
         ZMIENNE.DEK_TYP:=form(POZOPER.OPER().KOD,8)+form(POZOPER.KOD);
         ZMIENNE.DEK_T_TR:=form(POZOPER.OPER().NAZWA)+'/'+form(POZOPER.NAZWA);
         _rr:=form(POZOPER.OPER().KOD,8)+form(POZOPER.KOD)
      ?}
   |? DEK_NAG.RODZ='EW'
   || SRDT.cntx_psh();
      SRDT.use('srdt'+'r'+REF.FIRMA().SYMBOL);
      SRDT.index('SRDT');
      SRDT.prefix('W');
      {? exec('westrf3','!zws_par_fast')
      || DEK_NAG.TYP:=$SRDT.ref;
         ZMIENNE.DEK_T_TR:=SRDT.NAZWA;
         _rr:=SRDT.TYP
      ?};
      SRDT.cntx_pop()
   |? DEK_NAG.RODZ='LM'
   || TYPYDOK.cntx_psh;
      TYPYDOK.win_sel('WYST');
      TYPYDOK.index('TYP');
      TYPYDOK.prefix();
      {? TYPYDOK.select()
      || DEK_NAG.TYP:=$TYPYDOK.ref;
         ZMIENNE.DEK_T_TR:=TYPYDOK.NAZ;
         _rr:=TYPYDOK.T
      ?};
      TYPYDOK.cntx_pop
   |? DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ'
   || TYPYSP.cntx_psh;
      TYPYSP.index('SPRZAK');
      {? DEK_NAG.RODZ='LS' || TYPYSP.prefix('N') || TYPYSP.prefix('T') ?};
      {? TYPYSP.select()
      || DEK_NAG.TYP:=$TYPYSP.ref;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         _rr:=TYPYSP.T
      ?};
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LP'
   || TYPYSP.cntx_psh;
      {? PAR_SKID.get(496)='T'
      || _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'PAR',,,'DRPAR',,);
         TYPYSP.index(_ndx);
         TYPYSP.f_clear();
         TYPYSP.f_set(,,'TYPYSP.ZAK=\'N\' and (TYPYSP.PAR=\'T\' or TYPYSP.DRPAR=\'T\')')
      || _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'PAR',,,'T',,);
          TYPYSP.index(_ndx);
          TYPYSP.prefix('N','T')
      ?};
      {? TYPYSP.select()
      || DEK_NAG.TYP:=$TYPYSP.ref;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         _rr:=TYPYSP.T
      ?};
      TYPYSP.ndx_drop(_ndx);
      {?  TYPYSP.f_active() || TYPYSP.f_clear() ?};
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LK'
   || TYPYSP.cntx_psh;
      _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'KOR',,,'T',,);
      TYPYSP.index(_ndx);
      TYPYSP.prefix('N','Z');
      {? TYPYSP.select()
      || DEK_NAG.TYP:=$TYPYSP.ref;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         _rr:=TYPYSP.T
      ?};
      TYPYSP.ndx_drop(_ndx);
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LX'
   || TYPYSP.cntx_psh;
      _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'KOR',,,'T',,);
      TYPYSP.index(_ndx);
      TYPYSP.prefix('T','Z');
      {? TYPYSP.select()
      || DEK_NAG.TYP:=$TYPYSP.ref;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         _rr:=TYPYSP.T
      ?};
      TYPYSP.ndx_drop(_ndx);
      TYPYSP.cntx_pop()
   ?}
?};
_rr


\ae_zm_dek_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNE.DEK_TYP. Formula sprawdza czy prawidlowo wypelniono pole,
::       szuka odpowiedniego rekordu na podstawie wprowadzonego stringu i wypelnia pole DEK_NAG.TYP
::       (typ w naglowku schematu dekretacji - sqlowy ref)
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
::  OLD: \ae_zm_dek_typ/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
_rr:=1;
{? DEK_NAG.RODZ<>''
|| {? ~-DEK_NAG.RODZ='KL'
   || KT.cntx_psh;
      KT.index('KRYTERIA');
      KT.prefix(exec('ref_firma','ustawienia'));
      {? ZMIENNE.DEK_TYP<>''
      || {? KT.find_key(ZMIENNE.DEK_TYP)
         || DEK_NAG.TYP:=$KT.ref;
            ZMIENNE.DEK_TYP:=KT.T;
            ZMIENNE.DEK_T_TR:=KT.N;
            _rr:=1
         || FUN.info('Nie znaleziono typu listy płac o podanym kodzie.'
                     '\nWybierz typ listy płac z słownika klawisz F3.'@);
            DEK_NAG.TYP:='';
            ZMIENNE.DEK_TYP:='';
            ZMIENNE.DEK_T_TR:='';
            _rr:=0
         ?}
      || DEK_NAG.TYP:='';
         _rr:=1
      ?};
      KT.cntx_pop
   |? DEK_NAG.RODZ='KU'
   || RU.cntx_psh;
      {? ZMIENNE.DEK_TYP<>''
      || SLO_TYP.cntx_psh;
         SLO_TYP.index('SYMBOL');
         SLO_TYP.prefix();
         {? SLO_TYP.find_key('UMZLEC','UMZLEC')
         || RU.index('K');
            RU.prefix(SLO_TYP.ref);
            {? RU.find_key(1+ZMIENNE.DEK_TYP,1+ZMIENNE.DEK_TYP)
            || DEK_NAG.TYP:=$RU.ref;
               ZMIENNE.DEK_TYP:=RU.K+' - '+RU.O;
               ZMIENNE.DEK_T_TR:='';
               _rr:=1
            || FUN.info('Nie znaleziono typu umowy o podanym kodzie.'
                        '\nWybierz typ umowy z słownika klawisz F3.'@);
               DEK_NAG.TYP:='';
               ZMIENNE.DEK_TYP:='';
               ZMIENNE.DEK_T_TR:='';
               _rr:=0
            ?}
         || FUN.info('Nie znaleziono słownika typów umów.'@);
            DEK_NAG.TYP:='';
            ZMIENNE.DEK_TYP:='';
            ZMIENNE.DEK_T_TR:='';
            _rr:=0
         ?};
         SLO_TYP.cntx_pop
      || DEK_NAG.TYP:='';
         _rr:=1
      ?};
      RU.cntx_pop
   |? DEK_NAG.RODZ='SV'
   || POZOPER.cntx_psh(); POZOPER.index('KSIEG'); POZOPER.prefix();
      {? ZMIENNE.DEK_TYP<>''
      || _oper:=form(8+ZMIENNE.DEK_TYP); _tran:=(8-ZMIENNE.DEK_TYP);
         {? POZOPER.find_key(_oper,_tran)
         || {? POZOPER.VAT='T'
            || ZMIENNE.DEK_TYP:=form(POZOPER.OPER().KOD,8)+form(POZOPER.KOD);
               ZMIENNE.DEK_T_TR:=form(POZOPER.OPER().NAZWA)+'/'+form(POZOPER.NAZWA);
               DEK_NAG.TYP:=$POZOPER.ref;
               _rr:=1
            || FUN.info('Wybrano typ transakcji bez dokumentów VAT.'
                        '\nWybierz inny typ transakcji z słownika klawisz F3.'@);
               _rr:=0
            ?}
         || FUN.info('Nie znaleziono typu transakcji o podanym kodzie.'
                     '\nWybierz typ transakcji z słownika klawisz F3.'@);
            DEK_NAG.TYP:='';
            ZMIENNE.DEK_TYP:='';
            ZMIENNE.DEK_T_TR:='';
            _rr:=0
         ?}
      || DEK_NAG.TYP:='';
         FUN.info('Niewypełnione pole.'
                  '\nWybierz typ transakcji z słownika klawisz F3.'@);
         _rr:=0
      ?};
      POZOPER.cntx_pop()
   |? DEK_NAG.RODZ='EW' & ZMIENNE.DEK_TYP<>''
   || SRDT.cntx_psh();
      SRDT.use('srdt'+'r'+REF.FIRMA().SYMBOL);
      SRDT.index('TYP');
      SRDT.prefix();
      {? SRDT.find_key(ZMIENNE.DEK_TYP,)
      || DEK_NAG.TYP:=$SRDT.ref();
         ZMIENNE.DEK_TYP:=SRDT.TYP;
         ZMIENNE.DEK_T_TR:=SRDT.NAZWA;
         _rr:=1
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      SRDT.cntx_pop()
   |? DEK_NAG.RODZ='LM' & ZMIENNE.DEK_TYP<>''
   || TYPYDOK.cntx_psh;
      TYPYDOK.index('TYP');
      TYPYDOK.prefix();
      {? TYPYDOK.find_key(ZMIENNE.DEK_TYP)
      || ZMIENNE.DEK_TYP:=TYPYDOK.T;
         ZMIENNE.DEK_T_TR:=TYPYDOK.NAZ;
         DEK_NAG.TYP:=$TYPYDOK.ref;
         _rr:=1
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      TYPYDOK.cntx_pop
   |? (DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LZ') & ZMIENNE.DEK_TYP<>''
   || TYPYSP.cntx_psh;
      TYPYSP.index('SPRZAK');
      {? DEK_NAG.RODZ='LS' || TYPYSP.prefix('N') || TYPYSP.prefix('T') ?};
      {? TYPYSP.find_key(ZMIENNE.DEK_TYP)
      || {? TYPYSP.KOR='Z'
         || FUN.info('Nie można wybrać typu korekty zbiorczej.\n'
                     'Definiowanie dekretacji dla korekt zbiorczych w odrębnej gałęzi.'@);
            DEK_NAG.TYP:='';
            _rr:=0
         |? TYPYSP.PAR='T' & exec('find_typ_par','!zws_par_fast','LP')
         || {? ~FUN.ask('Typu: %1 użyto w schemacie dekretacji paragonów zbiorczych.\n'
                        'Czy użyć tego samego typu w definicji dekretacji sprzedaży?'@[TYPYSP.T])
            || DEK_NAG.TYP:='';
               _rr:=0
            ?}
         || ZMIENNE.DEK_TYP:=TYPYSP.T;
            ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
            DEK_NAG.TYP:=$TYPYSP.ref;
            _rr:=1
         ?}
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LP' & ZMIENNE.DEK_TYP<>''
   || TYPYSP.cntx_psh;
      {? PAR_SKID.get(496)='T'
      || _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'T',,);
         TYPYSP.index(_ndx);
         TYPYSP.prefix('N')
      || _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'PAR',,,'T',,);
         TYPYSP.index(_ndx);
         TYPYSP.prefix('N','T')
      ?};
      {? TYPYSP.find_key(ZMIENNE.DEK_TYP)
      || {? exec('find_typ_par','!zws_par_fast','LS')
         || {? ~FUN.ask('Typu: %1 użyto w schemacie dekretacji sprzedaży.\n'
                        'Czy użyć tego samego typu w definicji dekretacji paragonów zbiorczo?'@[TYPYSP.T])
            || DEK_NAG.TYP:='';
               _rr:=0
            ?}
         || ZMIENNE.DEK_TYP:=TYPYSP.T;
            ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
            DEK_NAG.TYP:=$TYPYSP.ref;
            _rr:=1
         ?}
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      TYPYSP.ndx_drop(_ndx);
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LK' & ZMIENNE.DEK_TYP<>''
   || TYPYSP.cntx_psh;
      _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'KOR',,,'T',,);
      TYPYSP.index(_ndx);
      TYPYSP.prefix('N','Z');
      {? TYPYSP.find_key(ZMIENNE.DEK_TYP)
      || ZMIENNE.DEK_TYP:=TYPYSP.T;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         DEK_NAG.TYP:=$TYPYSP.ref;
         _rr:=1
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      TYPYSP.ndx_drop(_ndx);
      TYPYSP.cntx_pop
   |? DEK_NAG.RODZ='LX' & ZMIENNE.DEK_TYP<>''
   || TYPYSP.cntx_psh;
      _ndx:=TYPYSP.ndx_tmp(,1,'ZAK',,,'KOR',,,'T',,);
      TYPYSP.index(_ndx);
      TYPYSP.prefix('T','Z');
      {? TYPYSP.find_key(ZMIENNE.DEK_TYP)
      || ZMIENNE.DEK_TYP:=TYPYSP.T;
         ZMIENNE.DEK_T_TR:=TYPYSP.NAZ;
         DEK_NAG.TYP:=$TYPYSP.ref;
         _rr:=1
      || FUN.info('Nie znaleziono typu dokumentu o podanym kodzie.'@);
         DEK_NAG.TYP:='';
         _rr:=0
      ?};
      TYPYSP.ndx_drop(_ndx);
      TYPYSP.cntx_pop()
   ?};
   {? DEK_NAG.NAZ=''
   || DEK_NAG.NAZ:=exec('dek_nag_naz','dok_fks_aut_dok','',0)
   ?}
?};
_rr


\find_typ_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Formula sprawdza czy nie zdefiniowanego typu w galezi dla paragonow zbiorczy/sprzedazy
::   WE: _a - rodzaj sprawdzanej dekretacji LS/LP
::   WY: 1 - jest zdefiniowany typ w rodzaju dekretacji _a, 0 - w p.p.
::  OLD: \find_typ_par/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.cntx_psh();
DEK_NAG.index('DEK_NAG');
DEK_NAG.prefix(DEK_NAG.ROK,DEK_NAG.SYSTEM,_a,$TYPYSP.ref());
{? DEK_NAG.first() || _rr:=1 || _rr:=0 ?};
DEK_NAG.cntx_pop();
_rr


\westrf3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.10]
:: OPIS: Funkcja F3 dla pola Typ dokumentu podczas redakcji DEK_NAG typ ksiegowania - dokumenty wartosciowe
::  OLD: \westrf3/ksg_es.fml
::----------------------------------------------------------------------------------------------------------------------
_win:=SRDT.mk_sel('Typy dokumentów wartościowych'@,'T',0,'wyb_tpd');
SRDT.win_fld(_win,,'TYP');
SRDT.win_fld(_win,,'NAZWA');
SRDT.win_fld(_win,,'P',,,,,,'+-?'@);
SRDT.win_act(_win,0,'Formuła','Wybierz'@@,,,,"sel_exit()",1,,,,'W');
SRDT.win_act(_win,0,'Szukaj');
SRDT.win_act(_win,0,'Kolejność',);
SRDT.win_sel(_win);
SRDT.win_edit();
SRDT.select()


\bd_dek_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem zmiennej ZMIENNE.DEK_REJ w oknie wertowania schematow dekretacji
::       S: stala F: Formula (tresc)
::  OLD: \bd_dek_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SREJ='S' & exec('spr_ile_oddz','!zws_par_fast') & ODD.first()
|| ZMIENNE.DEK_REJ:='S: '+exec('FindInSet','#table','DEK_STAL','DEK_STAL',ODD.ref(),DEK_NAG.ref(),"DEK_STAL.REJ().KOD")
|? DEK_NAG.SREJ='S'
|| ZMIENNE.DEK_REJ:='S: <Lista>'
|| ZMIENNE.DEK_REJ:='F: '+DEK_NAG.F_REJ().FORMULA
?};
{? DEK_NAG.SDREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| ZMIENNE.DEK_DOK:='S: '+exec('FindInSet','#table','DEK_STAL','DEK_STAL',ODD.ref,DEK_NAG.ref(),"DEK_STAL.DOK_REJ().NAZ")
|? DEK_NAG.SDREJ='S'
|| ZMIENNE.DEK_DOK:='S: <Lista>'
|| ZMIENNE.DEK_DOK:='F: '+DEK_NAG.F_DOK_RJ().FORMULA
?};
DEK_NAG.SREJ<>''


\bd_dek_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietlniem zmienne ZMIENNE.DEK_DOK
::   WY: 0 - nie wyswietlac wartosci zmiennej, 1 - wyswietlac wartosc zmiennej
::  OLD: \bd_dek_dok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.SDREJ<>''


\bd_dek_rvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem zmiennej ZMIENNE.DEK_RVAT w oknie wertowania schematow dekretacji
::       S: stala F: Formula (tresc)
::  OLD: \bd_dek_rvat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RVAT<>null
|| ZMIENNE.DEK_RVAT:='S: '+DEK_NAG.RVAT().NAZ
|? DEK_NAG.F_RVAT<>null
|| ZMIENNE.DEK_RVAT:='F: '+DEK_NAG.F_RVAT().FORMULA
|| 0
?}


\bd_dek_gvat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem zmiennej ZMIENNE.DEK_RVAT w oknie wertowania schematow dekretacji
::       S: stala F: Formula (tresc)
::  OLD: \bd_dek_gvat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.GR_VAT<>null
|| ZMIENNE.DEK_GVAT:='S: '+DEK_NAG.GR_VAT().KOD
|? DEK_NAG.F_GR_VAT<>null
|| ZMIENNE.DEK_GVAT:='F: '+DEK_NAG.F_GR_VAT().FORMULA
|| 0
?}


\bd_zm_dek_zrv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem zmiennej ZMIENNE.DEK_ZRV, ustawia odpowiednio zmienna na podstawie pol tab. DEK_NAG
::  OLD: \bd_zm_dek_zrv/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
1


\ae_zm_dek_zrv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji zmiennej ZMIENNE.DEK_ZRV (znacznik w okienku redagowania naglowka schematu dekretacji
::       rejstr VAT staly/formula
::  OLD: \ae_zm_dek_zrv/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_ZRV='S' & DEK_NAG.F_RVAT<>null
|| DEK_NAG.F_RVAT:=null
|? ZMIENNE.DEK_ZRV='F' & DEK_NAG.RVAT<>null
|| DEK_NAG.RVAT:=null
?};
1


\ae_zm_dek_zgrv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Po redakcji zmiennej ZMIENNE.DEK_ZGRV (znacznik w okienku redagowania naglowka schematu dekretacji
::       grupa VAT staly/formula
::  OLD: \ae_zm_dek_zgrv/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_ZGRV='S' & DEK_NAG.F_GR_VAT<>null
|| DEK_NAG.F_GR_VAT:=null
|? ZMIENNE.DEK_ZGRV='F' & DEK_NAG.GR_VAT<>null
|| DEK_NAG.GR_VAT:=null
?};
1


\bd_zm_dek_zgrv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem zmiennej ZMIENNE.DEK_ZGRV, ustawia odpowiednio zmienna na podstawie pol tab. DEK_NAG
::  OLD: \bd_zm_dek_zgrv/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
1


\wz_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na wzorzec pol ZMIENNE.DEK_SREJ, ZMIENNE.DEK_SDOK
::  OLD: \wz_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SREJ='S' & ~exec('spr_ile_oddz','!zws_par_fast') || '<- \\F\\3 ->#' || '' ?}


\bd_zm_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem zmiennej ZMIENNA.DEK_SREJ
::  OLD: \bd_zm_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| 1
|? DEK_NAG.SREJ='S'
|| ZMIENNE.DEK_SREJ:='<- F3 ->'
|| ZMIENNE.DEK_SREJ:=''
?}


\be_zm_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja zmiennej ZMIENNA.DEK_SREJ
::   WY: 1 - mozliwa redakcja pola, 0 - w p.p.
::  OLD: \be_zm_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
DEK_NAG.SREJ='S'


\f3_zm_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 dla zmiennych ZMIENNE.DEK_SREJ, ZMIENNE.DEK_SDOK. Jezeli w systemie jest tylko 1
::       jedn. ksiegoa to formula wyswietla w zaleznoci od pola REJESTRY lub dokumenty w rejestrze. Jezeli jest wiecej
::       jedn. ksiegowych to wyswiela okienko do ustawienia stalych dla kazdej jedn. ksiegowej
::  OLD: \f3_zm_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ODD.cntx_psh();
ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
{? ODD.first() & ODD.size=1
|| {? cur_afld='DEK_SREJ'
   || REJ.cntx_psh();
      REJ.win_sel('SLO');
      REJ.actions('SLO','');
      REJ.index('KOD');
      REJ.prefix(ROK_F.ref(),ODD.ref);
      REJ.first();
      REJ.hdr_sel();
      REJ.hdr_sel(':%1 rok: %2'@[REJ.ODD().OD,REJ.ROK().NAZ]);
      REJ.find_key(ZMIENNE.DEK_SREJ,ZMIENNE.DEK_SREJ);
      {? REJ.select(,1) || ZMIENNE.DEK_SREJ:=REJ.KOD; ZMIENNE.DEK_RREJ:=REJ.ref ?};
      REJ.cntx_pop()
    |? cur_afld='DEK_SDOK'
    || DOK_REJ.cntx_psh();
       DOK_REJ.win_sel('SLO_TEN');
       DOK_REJ.actions('SLO_TEN','');
       DOK_REJ.index('NAZ');
       DOK_REJ.prefix(ZMIENNE.DEK_RREJ);
       DOK_REJ.hdr_sel();
       DOK_REJ.hdr_sel(': %1'@[ZMIENNE.DEK_RREJ().KOD]);
       DOK_REJ.find_key(ZMIENNE.DEK_SDOK);
       {? DOK_REJ.select(,1) || ZMIENNE.DEK_SDOK:=DOK_REJ.NAZ; ZMIENNE.DEK_RDOK:=DOK_REJ.ref ?};
       DOK_REJ.cntx_pop()
    ?}
|| {? (-(1+menu_txt()))='d' | (-(1+menu_txt()))='k'
   || {? ~(var_pres('TD_STAL')>100)
      || exec('init_tmp_stale','!zws_par_fast')
      ?};
      TD_STAL.select()
   || _pomoc:=POMOC.AKC;
      POMOC.AKC:='P';
      DEK_STAL.index('DEK_STAL');
      DEK_STAL.prefix(DEK_NAG.ref);
      DEK_STAL.select();
      POMOC.AKC:=_pomoc
   ?}
?};
ODD.cntx_pop();
fld()


\ae_zm_dek_srej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNA.DEK_SREJ
::  OLD: \ae_zm_dek_srej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| {? ZMIENNE.DEK_SREJ<>''
   || ODD.cntx_psh();
      ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
      {? ODD.size=1 & ODD.first
      || REJ.cntx_psh();
         REJ.index('KOD');
         REJ.prefix(ROK_F.ref(),ODD.ref);
         {? REJ.find_key(ZMIENNE.DEK_SREJ)
         || ZMIENNE.DEK_SREJ:=REJ.KOD; ZMIENNE.DEK_RREJ:=REJ.ref;
            {? ZMIENNE.DEK_RDOK<>null & ZMIENNE.DEK_RREJ<>ZMIENNE.DEK_RDOK().REJ
            || ZMIENNE.DEK_RDOK:=null();
               ZMIENNE.DEK_SDOK:=''
            ?}
         || FUN.info('Nie znaleziono rejestru o symbolu: %1'@[ZMIENNE.DEK_SREJ]);
            ZMIENNE.DEK_RREJ:=null;
            ZMIENNE.DEK_SREJ:='';
            {? DEK_NAG.SDREJ='S' & ZMIENNE.DEK_SDOK<>''
            || ZMIENNE.DEK_RDOK:=null();
               ZMIENNE.DEK_SDOK:=''
            ?}
         ?};
         REJ.cntx_pop()
      || ZMIENNE.DEK_RREJ:=null;
         ZMIENNE.DEK_SREJ:='<- F3 ->'
      ?};
      ODD.cntx_pop();
      1
   || 1
   ?}
|? DEK_NAG.SREJ='S'
|| ZMIENNE.DEK_SREJ:='<- F3 ->'
|| ZMIENNE.DEK_SREJ:=''
?}


\init_tmp_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula tworzy tabele tymczasowa do ustawiania stalych podczas dolaczania nowego schematu dekretacji
:: OLD: \init_tmp_stale/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
TD_STAL:=tab_tmp(4,'ODD_KOD','STRING[8]','Jedn. księgowa'@,
                   'ODD_REF','STRING[16]','Jedn. ks. ref'@,
                   'REJ_KOD','STRING[8]','Rejestr'@,
                   'REJ_REF','STRING[16]','Rejestr ref'@,
                   'DOK_REJ','STRING[60]','Rodzaj dokumentu'@,
                   'DOK_REF','STRING[16]','Rodz. dok. ref'@);
_win_acr:=TD_STAL.mk_sel('Stałe dla jednostek księgowych'@,,0);
TD_STAL.win_sel(_win_acr);
TD_STAL.win_fld(_win_acr,,'ODD_KOD');
TD_STAL.win_fld(_win_acr,,'REJ_KOD');
TD_STAL.win_fld(_win_acr,,'DOK_REJ');
TD_STAL.win_act(_win_acr,1,'Formuła','Dołącz'@@,,,"exec('ba_tmp_stale','!zws_par_fast')","exec('aa_tmp_stale','!zws_par_fast')",1,,,,'D');
TD_STAL.win_act(_win_acr,0,'Formuła','Dołącz'@@,,,"exec('ba_tmp_stale','!zws_par_fast')","exec('aa_tmp_stale','!zws_par_fast')",1,,,,'D');
TD_STAL.win_act(_win_acr,0,'Formuła','Popraw'@@,,,,"exec('ap_tmp_stale','!zws_par_fast')",,,,,'P');
TD_STAL.win_act(_win_acr,0,'Usuń',,,,,,);
TD_STAL.win_act(_win_acr,,'Szukaj');
TD_STAL.win_act(_win_acr,,'Kolejność');

_ed_acr:=TD_STAL.mk_edit('Stałe dla jednostki księgowej'@,0);
TD_STAL.win_edit(_ed_acr);
TD_STAL.win_efld(_ed_acr,ZMIENNE,'DEK_JKS',,,8,,,'Jednostka księgowa'@,,,,'F3_button=1');
TD_STAL.efld_opt(_ed_acr,'mark=1',ZMIENNE,'DEK_JKS');
TD_STAL.win_efld(_ed_acr,ZMIENNE,'DEKE_REJ',,,8,,,'Rejestr'@,,,,'F3_button=1');
TD_STAL.efld_opt(_ed_acr,'mark=1',ZMIENNE,'DEKE_REJ');
TD_STAL.win_efld(_ed_acr,ZMIENNE,'DEKE_DOK',,,60,,,'Rodzaj dokumentu'@,,,,'F3_button=1');
_btnok:=TD_STAL.win_ebtn(_ed_acr,'text=%1, btn_label_align=center, panel=bottom, align=end'['&OK'@],"'key:F2'");
_btnan:=TD_STAL.win_ebtn(_ed_acr,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Anuluj'@],'key:Esc');
TD_STAL.btn_eopt(_ed_acr,_btnok,'tooltip='+exec('help_red_ok','#window','P'));
TD_STAL.btn_eopt(_ed_acr,_btnan,'tooltip='+exec('help_red_esc','#window','A'))


\ba_tmp_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula dolacza do tabeli tymczasowej stale dla schematu dekretacji
::  OLD: \ba_tmp_stale/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
TD_STAL.blank()


\aa_tmp_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji dolacz do tab. tymczasowej stalych dla jedn. ksiegowych
::   WY: 1 - prawidlowo wypelniono stale dla jednostki ksiegowej, 0 - w p.p.
::  OLD: \aa_tmp_stale/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? TD_STAL.edit("exec('chk_td_stal','!zws_par_fast',0)") || TD_STAL.add ?}


\ap_tmp_stale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po akcji dolacz do tab. tymczasowej stalych dla jedn. ksiegowych
::   WY: 1 - prawidlowo wypelniono stale dla jednostki ksiegowej, 0 - w p.p.
::  OLD: \ap_tmp_stale/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? TD_STAL.edit("exec('chk_td_stal','!zws_par_fast',1)") || TD_STAL.put ?}


\chk_td_stal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula sprawdza poprawnosc wypelnienia rekordu z stalymi
::   WY: akronim pola ktroe jest nieprawidlowo wypelnione, w p.p. ''
::  OLD: \chk_td_stal/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
TD_STAL.cntx_psh();
{? _a || _ref:=TD_STAL.ref() || _ref:=null() ?};
_rr:='';
{? ZMIENNE.DEK_JKS=''
|| FUN.info('Nie wypełniono pola: Jedn. księgowa.'@); _rr:='DEK_JKS'
|? ZMIENNE.DEKE_REJ=''
|| FUN.info('Nie wypełniono pola: Rejestr.'@); _rr:='DEKE_REJ'
|| TD_STAL.prefix(TD_STAL.ODD_KOD,TD_STAL.ODD_REF);
   {? TD_STAL.first()
   || {! |?
         {? TD_STAL.ref<>_ref
         || FUN.info('Wypełnino już stałe dla jedn. księgowej: %1.'@[ZMIENNE.DEK_JKS]); _rr:='DEK_JKS'
         ?};
         _rr='' & TD_STAL.next()
      !}
   ?}
?};
TD_STAL.cntx_pop();
_rr


\bd_zm_dek_sdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Przed wyswietleniem pola ZMIENNE.DEK_SDOK
::  OLD: \bd_zm_dek_sdok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SDREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| 1
|? DEK_NAG.SDREJ='S'
|| ZMIENNE.DEK_SDOK:='<- F3 ->'
|| ZMIENNE.DEK_SDOK:=''
?}


\be_zm_dek_sdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja zmiennej ZMIENNE.DEK_SDOK
::   WY: 1 - mozliwa redakcja pola, 0 - w p.p.
::  OLD: \be_zm_dek_sdok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SDREJ='S'
|| {? exec('spr_ile_oddz','!zws_par_fast')
   || {? ZMIENNE.DEK_RREJ=null
      || ZMIENNE.DEK_SDOK:=''; ZMIENNE.DEK_RDOK:=null
      ?}
   ?}
?};
1


\ae_zm_dek_sdok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNE.DEK_SDOK
::  OLD: \ae_zm_dek_sdok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.SDREJ='S' & exec('spr_ile_oddz','!zws_par_fast')
|| {? ZMIENNE.DEK_SDOK<>'' & ZMIENNE.DEK_RREJ<>null
   || ODD.cntx_psh();
      ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
      {? ODD.size=1 & ODD.first
      || DOK_REJ.cntx_psh();
         DOK_REJ.index('NAZ');
         DOK_REJ.prefix(ZMIENNE.DEK_RREJ);
         {? DOK_REJ.find_key(ZMIENNE.DEK_SDOK)
         || ZMIENNE.DEK_SDOK:=DOK_REJ.NAZ; ZMIENNE.DEK_RDOK:=DOK_REJ.ref
         || FUN.info('Nie znaleziono rodzaju dokumentu o podanej nazwie: %1'@[ZMIENNE.DEK_SDOK]);
            ZMIENNE.DEK_SDOK:=''; ZMIENNE.DEK_RDOK:=null
         ?};
         DOK_REJ.cntx_pop()
      || ZMIENNE.DEK_RDOK:=null;
         ZMIENNE.DEK_SDOK:='<- F3 ->'
      ?};
      ODD.cntx_pop();
      1
   |? ZMIENNE.DEK_RREJ=null
   || ZMIENNE.DEK_SDOK:=''; ZMIENNE.DEK_RDOK:=null;
      FUN.info('Nie wypełniono stałego rejestru.'@);
      1
   || 1
   ?}
|? DEK_NAG.SDREJ='S'
|| ZMIENNE.DEK_SDOK:='<- F3 ->'
|| ZMIENNE.DEK_SDOK:=''
?}


\bd_zm_dek_opis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem zmiennej ZMIENNE.DEK_OPIS, aktualizuje pole ZMIENNE.DEK_OPIS
::  OLD: \bd_zm_dek_opis/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.RODZ<>''
|| {? ~-DEK_NAG.RODZ='KL' || ZMIENNE.DEK_OPIS:='Typ listy płac'
   |? DEK_NAG.RODZ='KU' || ZMIENNE.DEK_OPIS:='Typ umowy'
   |? DEK_NAG.RODZ='SV' || ZMIENNE.DEK_OPIS:='Transakcja kasowa'
   |? DEK_NAG.RODZ='LM' | DEK_NAG.RODZ='LS' | DEK_NAG.RODZ='LP' | DEK_NAG.RODZ='LX' |
      DEK_NAG.RODZ='LZ' | DEK_NAG.RODZ='LK' | DEK_NAG.RODZ='EW'
   || ZMIENNE.DEK_OPIS:='Typ dokumentu'
   || ZMIENNE.DEK_OPIS:=''
   ?}
|| ZMIENNE.DEK_OPIS:=''
?}


\bd_dek_zdat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: znacznik uzty w okienku redakcyjny dotyczy stalej daty
::  OLD: \bd_dek_zdat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.S_DATA<>'' || ZMIENNE.DEK_ZDAT:='S'
|? DEK_NAG.F_DATA<>null || ZMIENNE.DEK_ZDAT:='F'
|| 1
?}


\ae_dek_zdat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji pola ZMIENNE.DEK_ZDAT. Formula kasowuje informacje a pol jezel zmienil sie stan znacznika
::  OLD: \ae_dek_zdat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_ZDAT='S' || DEK_NAG.F_DATA:=null
|? ZMIENNE.DEK_ZDAT='F' || DEK_NAG.S_DATA:=''; ZMIENNE.DEK_SDAT:=''
?};
1


\bd_dek_jks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula pzzed wyswietleniem zmiennej ZMIENNE.DEK_JKS, aktualizuje jej wartosc
::  OLD: \bd_dek_jks/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.DEK_JKS:=TD_STAL.ODD_KOD


\be_dek_jks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redagowaniem zmiennej ZMIENNE.DEK_JKS
::  OLD: \be_dek_jks/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ODD.win_sel('WYB');
ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
1


\f3_dek_jks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 zmiennej ZMIENNE.DEK_JKS
::  OLD: \f3_dek_jks/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ODD.select() || ODD.OD || '' ?}


\ae_dek_jks
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNE.DEK_JKS
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
::  OLD: \ae_dek_jks/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ODD.index('ODDZIALY'); ODD.prefix(REF.FIRMA);
{? ZMIENNE.DEK_JKS<>''
|| {? ODD.find_key(ZMIENNE.DEK_JKS)
   || TD_STAL.ODD_KOD:=ODD.OD;
      TD_STAL.ODD_REF:=$ODD.ref;
      ZMIENNE.DEK_RODD:=ODD.ref
   || FUN.info('Brak jednostki księgowej o podanym kodzie w słowniku.'@);
      0
   ?}
|| FUN.info('Proszę wypełnić pole aby przejść do dalszej części definiowania stałych.'@);
   0
?}


\bd_deke_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem zmiennej ZMIENNE.DEKE_REJ
::  OLD: \bd_deke_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.DEKE_REJ:=TD_STAL.REJ_KOD


\be_deke_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcją pola zmiennej ZMIENNE.DEKE_REJ. W zaleznosci czy wypelniono wskazanie na jedn. ksiegowej
::       formula umozliwia redagowanie pola.
::   WY: 1 - mozna redagowac pole, 0 - w p.p.
::  OLD: \be_deke_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_RODD<>null
|| REJ.win_sel('WYB');
   REJ.index('KOD');
   REJ.prefix(ROK_F.ref(),ZMIENNE.DEK_RODD);
   1
|| 0
?}


\f3_deke_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 w polu zmiennej ZMIENNE.DEKE_REJ, wyswietla slownik rejestrow ksiegowych
::   WY: kod wybranego rejestru, '' - w p.p.
::  OLD: \f3_deke_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? REJ.select() || REJ.KOD || '' ?}


\ae_deke_rej
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNE.DEKE_REJ. Formula sprawdza czy prawidlowo wypelniono pole,
::        szuka odpowiedniego rekordu na podstawie wprowadzonego stringu i wypelnia pola w tab. TD_STAL
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
::  OLD: \ae_deke_rej/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEKE_REJ<>''
|| {? REJ.find_key(ZMIENNE.DEKE_REJ)
   || TD_STAL.REJ_KOD:=REJ.KOD;
      TD_STAL.REJ_REF:=$REJ.ref;
      ZMIENNE.DEK_RREJ:=REJ.ref
   || FUN.info('Brak rejestru księgowego o podanym kodzie w słowniku.'@); 0
   ?}
|| TD_STAL.REJ_KOD:='';
   TD_STAL.REJ_REF:='';
   ZMIENNE.DEK_RREJ:=null;
   1
?}


\be_deke_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed redakcja zmiennej ZMIENNE.DEKE_DOK, sprawdza czy jest wypelniony rejestr i wpuszcza do pola
::       w p.p. blokuje redakcje pola
::   WY: 1 - mozliwa redakcja pola, 0 - w p.p.
::  OLD: \be_deke_dok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEK_RREJ<>null
|| DOK_REJ.win_sel('SLO_TEN');
   DOK_REJ.index('NAZ');
   DOK_REJ.prefix(ZMIENNE.DEK_RREJ);
   1
|| 0
?}


\f3_deke_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula na klawisz F3 zmiennej ZMIENNE.DEKE_DOK, wyswietla rodzaje dokumentow
::  OLD: \f3_deke_dok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DOK_REJ.select() || DOK_REJ.NAZ || '' ?}


\ae_deke_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula po redakcji zmiennej ZMIENNE.DEKE_DOK. Formula sprawdza czy prawidlowo wypelniono pole,
::        szuka odpowiedniego rekordu na podstawie wprowadzonego stringu i wypelnia pola w tab. TD_STAL
::   WY: 1 - prawidlowo wypelniono pole, 0 - w p.p.
::  OLD: \ae_deke_dok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZMIENNE.DEKE_DOK<>''
|| {? DOK_REJ.find_key(ZMIENNE.DEKE_DOK)
   || TD_STAL.DOK_REJ:=DOK_REJ.NAZ;
      TD_STAL.DOK_REF:=$DOK_REJ.ref;
      ZMIENNE.DEK_RDOK:=DOK_REJ.ref
   || FUN.emsg('Brak rodzaju dokumentu w rejestrze księgowym o podanej nazwie.'@);
      0
   ?}
|| TD_STAL.DOK_REJ:='';
   TD_STAL.DOK_REF:='';
   ZMIENNE.DEK_RDOK:=null;
   1
?}


\bd_deke_dok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem zmiennej ZMIENNE.DEKE_DOK, ustawia wartosc tej zmiennej
::  OLD: \bd_deke_dok/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.DEKE_DOK:=TD_STAL.DOK_REJ


\bd_dek_sdat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Formula przed wyswietleniem zmiennej ZMIENNE.DEK_SDAT, formula ustawia odpowiednio wartosc w zaleznosci OD
::       ustawionego parametru w polu DEK_NAG.S_DATA
::  OLD: \bd_dek_sdat/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.S_DATA='P' || ZMIENNE.DEK_SDAT:='Początek miesiąca'
|? DEK_NAG.S_DATA='K' || ZMIENNE.DEK_SDAT:='Koniec miesiąca'
|| ZMIENNE.DEK_SDAT:=''
?}


\bl_dek_nag_system
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Wartość początkowa pola DEK_NAG.SYSTEM
::----------------------------------------------------------------------------------------------------------------------
TREE_DEK.SYSTEM


\zm_dla_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Zmienne dla formuł - select
::----------------------------------------------------------------------------------------------------------------------
WARLOG.cntx_psh(); WARLOG.win_sel('WER');
WARLOG.index('KKOD'); WARLOG.prefix((1+TREE_DEK.RODZ));
WARLOG.select();
WARLOG.cntx_pop()


\st_dla_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Schematry dziedzinowe - stałe - select
::----------------------------------------------------------------------------------------------------------------------
DEK_STAL.cntx_psh(); DEK_STAL.index('DEK_STAL'); DEK_STAL.prefix(DEK_NAG.ref());
DEK_STAL.win_sel('DEK_STAL');
DEK_STAL.select();
DEK_STAL.cntx_pop()


\bl_warlog_rodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2011]
:: OPIS: Wartosc poczatkowa pola WARLOG.RODZ - rodzaj dekretacji
::  OLD: \bl_warlog_rodz/ksg.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TREE_DEK')>100 || 1+TREE_DEK.RODZ || '' ?}


\be_form_mb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2008]
:: OPIS: Formula przed redakcja pola FORM.SKID_MB.
::  OLD: \be_form_mb/skid_mb.fml
::----------------------------------------------------------------------------------------------------------------------
UD_POM.SKID_MBN:=FORM.SKID_MB;
exec('enable_form','!zws_par_fast');
1


\ae_form_mb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2008]
:: OPIS: Formula po redakcja pola FORM.SKID_MB
::  OLD: \ae_form_mb/skid_mb.fml
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? FORM.SKID_MB=null
|| FUN.info('Nie wybrano modelu.'@); _zwrot:=0
|? fld()<>UD_POM.SKID_MBN
|| {? ~exec('defmodel','control',fld())
   || FUN.info('Nie zdefiniowano wymiarów dla wybranego modelu.'
              '\nZdefiniuj prawidłowo model lub wybierz inny model.'@);
      _zwrot:=0
   || UNPAR.P10:=''; FORM.JORG_S:=''; FORM.JORG_F:='';
      UNPAR.P11:=''; FORM.OKOSZ_S:=''; FORM.OKOSZ_F:='';
      UNPAR.P12:=''; FORM.PBUD_S:=''; FORM.PBUD_F:='';
      UNPAR.P38:=''; FORM.WYM4_S:=''; FORM.WYM4_F:='';
      UNPAR.P39:=''; FORM.WYM5_S:=''; FORM.WYM5_F:=''
   ?}
?};
UD_POM.SKID_MB:=fld();
exec('enable_form','!zws_par_fast');
exec('form_pbud','control');
win_disp(); _zwrot


\bexdform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [2008]
:: OPIS: Formula przed redagowaniem pol automatow z elementami wymiarow
::       zawierjacych formuly na wyliczanie skladowych wymiaru modelu dla
::       controllingu
::   WY: 1 - mozna redagowac pole
::       0 - w p.p.
::  OLD: \bexdform/skid_mb.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_MBP.cntx_psh();
SKID_MBP.index('LP');
SKID_MBP.prefix(FORM.SKID_MB);
{? cur_afld()='JORG_SF' & SKID_MBP.find_key(2) || _rr:=1
|? cur_afld()='OKOSZ_SF' & SKID_MBP.find_key(3) || _rr:=1
|? cur_afld()='PBUD_SF' & SKID_MBP.find_key(1) || _rr:=1
|? cur_afld()='WYM4_SF' & SKID_MBP.find_key(4) || _rr:=1
|? cur_afld()='WYM5_SF' & SKID_MBP.find_key(5) || _rr:=1
|| _rr:=0
?};
SKID_MBP.cntx_pop();
_rr


\be_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed redakcją pól tabeli FORM
::----------------------------------------------------------------------------------------------------------------------
_nr:=exec('field2dim','control');
{? _nr
|| {? exec('be_dim','control',FORM.SKID_MB,_nr)
   || _pole:=cur_afld();
      {? _pole+2='SF'
      || 1
      || _pole+1=($('FORM.'+(_pole-1)+'SF'))()
      ?}
   ?}
?}


\f3_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Klawisz F3 dla pól tabeli FORM
::----------------------------------------------------------------------------------------------------------------------
_nr:=exec('field2dim','control');
exec('f3_dim','control',FORM.SKID_MB,_nr)


\ae_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Po redakcji pól tabeli FORM
::----------------------------------------------------------------------------------------------------------------------
{? fld()='' || return(1) ?};
_nr:=exec('field2dim','control');
_ref:=exec('ae_dim','control',FORM.SKID_MB,_nr);
{? _ref
|| {? cur_afld()+1='S'
   || UD_SKL.cntx_psh();
      UD_SKL.prefix();
      {? UD_SKL.seek(_ref)
      || ($('UNPAR.P'+$exec('form_nr_opisu','!zws_par_fast',_nr)))():=UD_SKL.OPIS
      ?};
      UD_SKL.cntx_pop()
   ?};
   1
?}


\aexdform
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMA [2006]
:: OPIS: Po redakcji pol JORG_SF, OKOSZ_SF, PBUD_SF, WYM4_SF, WYM5_SF tabeli FORM
::  OLD: \aexdform/skid_xd.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='JORG_SF' || {? fld()='S' || FORM.JORG_F:='' || FORM.JORG_S:=UNPAR.P10:='' ?}
|? cur_afld()='OKOSZ_SF' || {? fld()='S' || FORM.OKOSZ_F:='' || FORM.OKOSZ_S:=UNPAR.P11:='' ?}
|? cur_afld()='PBUD_SF' || {? fld()='S' || FORM.PBUD_F:='' || FORM.PBUD_S:=UNPAR.P12:='' ?}
|? cur_afld()='WYM4_SF' || {? fld()='S' || FORM.WYM4_F:='' || FORM.WYM4_S:=UNPAR.P38:='' ?}
|? cur_afld()='WYM5_SF' || {? fld()='S' || FORM.WYM5_F:='' || FORM.WYM5_S:=UNPAR.P39:='' ?}
?};
exec('enable_form','!zws_par_fast');
1


\form_nr_opisu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Numer pola z opisem na podstawie wymiaru
::   WE: _a - nr wymiaru
::----------------------------------------------------------------------------------------------------------------------
{? _a=1 || 12
|? _a=2 || 10
|? _a=3 || 11
|? _a=4 || 38
|? _a=5 || 39
?}


\enable_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Ustawia dostępność pól tabeli FORM
::----------------------------------------------------------------------------------------------------------------------
_mod:=FORM.SKID_MB<>null;
_max:=0;
{? _mod
|| SKID_MBP.cntx_psh();
   SKID_MBP.index('LP');
   SKID_MBP.prefix(FORM.SKID_MB);
   {? SKID_MBP.last()
   || _max:=SKID_MBP.LP
   ?};
   SKID_MBP.cntx_pop()
?};
{! _nr:=1..5
|! _pole:=exec('dim2field','control',_nr);
   _nr_op:=exec('form_nr_opisu','!zws_par_fast',_nr);
   _ok:=_mod & _nr<=_max;
   FORM.efld_opt('REDK','enable='+$_ok,UD_POM,'NAZ_WYM'+$_nr);
   FORM.efld_opt('REDK','enable='+$_ok,FORM,_pole+'_SF');
   FORM.efld_opt('REDK','enable='+$(_ok & ($('FORM.'+_pole+'_SF'))()='S' ),FORM,_pole+'_S');
   FORM.efld_opt('REDK','mark='+$(_ok & ($('FORM.'+_pole+'_SF'))()='S' ),FORM,_pole+'_S');
   FORM.efld_opt('REDK','enable='+$(_ok & ($('FORM.'+_pole+'_SF'))()='S' ),UNPAR,'P'+$_nr_op);
   FORM.efld_opt('REDK','enable='+$(_ok & ($('FORM.'+_pole+'_SF'))()='F' ),FORM,_pole+'_F');
   FORM.efld_opt('REDK','mark='+$(_ok & ($('FORM.'+_pole+'_SF'))()='F' ),FORM,_pole+'_F')
!}


\fk_automat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Formuly automatycznej rejestracji
::  OLD: \fk_automat/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.K1:='';
ROZNE.WYW:='K';
SKID_MBN.cntx_psh(); SKID_MBN.win_dict('SLO');
AUTOKSIE.cntx_psh(); FORM.cntx_psh();
AUTOKSIE.win_edit('RED2'); AUTOKSIE.win_patt('SZUK');
FORM.win_sel({? PAR_SKID.get(35)='T' || 'WER1' || 'WER' ?});
AUTOKSIE.actions('WERC','WF','d:d',1);
exec('set_fml','#field',UD_POM,'PBUD',
   "UD_POM.PBUD:=FORM.PBUD().SYMBOL;~~",
   "1",
   "exec('f3_dim','control',FORM.SKID_MB,1)",
   "
      _ref:=exec('ae_dim','control',FORM.SKID_MB,1);
      {? _ref
      || FORM.PBUD:=_ref;
         fld(FORM.PBUD().SYMBOL);
         1
      ?}
   "
);
rok_ref:=null;
okn_akr:=ROK_F.mk_sel('Lata bilansowe'@,,,'rok_fweraut');
ROK_F.win_fld(okn_akr,,'NAZ',,,10,,,'Rok'@);
ROK_F.win_fld(okn_akr,POMOC,'K1',,,3,,,,1);
ROK_F.win_act(okn_akr,0,'Szukaj');
ROK_F.win_act(okn_akr,0,'Formuła','Legenda'@@,,'Opis znaczenia kolorów wierszy'@,,
              "exec('legenda','color','$Zamknięty rok bilansowy'@,'ROK_F#KS')",,,,,'L');
ROK_F.win_fml(okn_akr,POMOC,'K1',,'ICON_BEFORE',"{? ROK_F.PLAN_GR='T' || 'xwin16.png:182' || '' ?}");
ROK_F.win_act(okn_akr,0,'Rekord',,,,"{? ROK_F.ZAM='T' || exec('findtmp','#color') || '' ?} ");
{? REF.S_FIRMA=REF.GRUPA
|| _fo:=FIRMA.mk_sel('Firmy'@,,,'firmy_sel_slo');
   FIRMA.win_fld(_fo,,'SYMBOL');
   FIRMA.win_fld(_fo,,'OPIS',,,10);
   _grp:=FIRMA.grp_make('Definiowanie formuł automatycznej rejestracji'@,,'kon_form_gar');
   FIRMA.grp_sel(_grp,,_fo,,"
      ROK_F.index('ROKPOCZ');
      ROK_F.prefix(FIRMA.ref());
      grp_disp(ROK_F,okn_akr,1,1)
   ",,,10,,,,,'maximized_with_title');
   FIRMA.grp_splt(_grp,,'horizontal','panel1');
   FIRMA.grp_sel(_grp,ROK_F,okn_akr,,"
      exec('usr_rok_f','!zws_par_fast')
   ",,,,,,,,'maximized_with_title');
   FIRMA.grp_splt(_grp,,'vertical','panel2');
   FIRMA.grp_sel(_grp,AUTOKSIE,'WERC','Tworzenie podziałów'@,"exec('ust_form','!zws_par_fast')",,,15,"exec('zakres_aut','!zws_par_fast','K'); 1",,,,'maximized_with_title');
   FIRMA.tab_splt(_grp,,'horizontal','dol1');
   FIRMA.grp_sel(_grp,FORM,FORM.win_sel('?'),,"exec('ust_form','!zws_par_fast')",,,,,,,,'maximized_with_title');
   FIRMA.grp_sel(_grp,AUTOKSIE,'WER','Dekretowanie podziałów'@,"exec('ust_form','!zws_par_fast')",,,15,"exec('zakres_aut','!zws_par_fast','D'); 1",,,,'maximized_with_title');
   FIRMA.tab_splt(_grp,,'horizontal','dol2');
   FIRMA.grp_sel(_grp,FORM,FORM.win_sel('?'),,"exec('ust_form','!zws_par_fast')",,,,,,,,'maximized_with_title');
   FIRMA.win_sel(_grp);
   FIRMA.select()
|| _grp:=ROK_F.grp_make('Definiowanie formuł automatycznej rejestracji'@,,'kon_form_ar');
   ROK_F.grp_sel(_grp,,okn_akr,,"
            exec('usr_rok_f','!zws_par_fast')
   ",0,0,,"
      ROK_F.index('NAZWA'); ROK_F.prefix(REF.FIRMA); {? rok_ref=null || ROK_F.seek(SSTALE.AR) ?}; rok_ref:=ROK_F.ref()
   ",,,,'maximized_with_title');
   ROK_F.grp_splt(_grp,,'vertical','panel1',',20%');
   ROK_F.grp_sel(_grp,AUTOKSIE,'WERC','Tworzenie podziałów'@,"exec('ust_form','!zws_par_fast')",,,15,"exec('zakres_aut','!zws_par_fast','K'); 1",,,,'maximized_with_title');
   ROK_F.tab_splt(_grp,,'horizontal','dol1');
   ROK_F.grp_sel(_grp,FORM,FORM.win_sel('?'),,"exec('ust_form','!zws_par_fast')",,,,,,,,'maximized_with_title');
   ROK_F.grp_sel(_grp,AUTOKSIE,'WER','Dekretowanie podziałów'@,"exec('ust_form','!zws_par_fast')",,,15,"exec('zakres_aut','!zws_par_fast','D'); 1",,,,'maximized_with_title');
   ROK_F.tab_splt(_grp,,'horizontal','dol2');
   ROK_F.grp_sel(_grp,FORM,FORM.win_sel('?'),,"exec('ust_form','!zws_par_fast')",,,,,,,,'maximized_with_title');
      _sel:=ROK_F.win_sel('?');
   ROK_F.win_sel(_grp);
   {? REF.S_FIRMA=REF.GRUPA || ROK_F.hdr_sel('; Firma: %1'@[REF.FIRMA().SYMBOL]) ?};
   ROK_F.select();
   ROK_F.win_sel(_sel)
?};
AUTOKSIE.cntx_pop(); FORM.cntx_pop();
VAR_DEL.delete('okn_akr','rok_ref');
SKID_MBN.cntx_pop()


\usr_rok_f
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.10]
:: OPIS: Ustawia dziedzine dla automatow na podstawie roku
::  OLD: \usr_rok_f/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
rok_ref:=ROZNE.ROKKON:=ROK_F.ref();
{? ROK_F.PLAN_GR='T'
|| AUTOKSIE.actions('WERC','dpUAKF:d',,1);
   AUTOKSIE.actions('WER','dpUAKF:d',,1)
|| AUTOKSIE.actions('WERC','FW',,1);
   AUTOKSIE.actions('WER','WF',,1)
?};
{? ROZNE.WYW='K'
|| grp_disp(AUTOKSIE,'WERC',1,1)
|| grp_disp(AUTOKSIE,'WER',1,1)
?}


\ust_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Pozycje formul automatycznej rejestracji
::  OLD: \ust_form/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
FORM.hdr_sel(); FORM.index('AUTOKSIE');
{? AUTOKSIE.get()
|| FORM.prefix(AUTOKSIE.ref());
   {? ~FORM.get() || FORM.first() ?};
   FORM.hdr_sel(' - %1'@[AUTOKSIE.NAZ])
|| FORM.prefix(null)
?};
FORM.actions(FORM.win_sel('?'),{? ~AUTOKSIE.get() | AUTOKSIE.A='T' | AUTOKSIE.ROK_F().PLAN_GR='T'
                               || {? AUTOKSIE.TYP<>'K' || '' || 'W' ?}+'dUpKFv:d'
                               || {? AUTOKSIE.TYP<>'K' || '' || 'FW' ?}
                               ?},'d:d',1);
grp_disp(FORM,FORM.win_sel('?'))


\zakres_aut
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2011]
:: OPIS: Formuly automatycznej rejestracji - zakres
::   WE: _a - 'D' - dekretowanie podzialow
::            'K' - tworzenie podzialow z dekretow
::  OLD: \zakres_aut/skid_ktr.fml
::----------------------------------------------------------------------------------------------------------------------
AUTOKSIE.index('TYP'); AUTOKSIE.prefix(rok_ref,_a); ROZNE.WYW:=_a


\set_form_fld
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia pola okna redagowania pozycji schematów dokumentów
::   WE: _a - 1-ustawia, 0-przywraca
::----------------------------------------------------------------------------------------------------------------------
{? _a=1
|| KA.AKCJA:=0;
   exec('form_fld_enabled','!zws_par_fast');
   FORM.fld_fml('MASKA','PATTERN',"exec('wz_konto','edkonto','FORM','MASKA')");
   FORM.fld_fml('MASKA','BEFORE_EDIT',"
      VAR_DEL.delete('FormMask');
      FormMask:=FORM.MASKA;
      exec('be_konto','edkonto','FORM','MASKA');
      1
   ");
   FORM.fld_fml('MASKA','F3',"
      exec('f3_konto','edkonto','FORM','MASKA');
      1
   ");
   FORM.fld_fml('MASKA','AFTER_EDIT',"
      exec('set_slu_wyr','!zws_par_fast');
      exec('form_fld_enabled','!zws_par_fast');
      {? SSTALE.AR().SYNT+FORM.MASKA<>ROK_F.SYNT+FormMask
      || FORM.PROCENT:=0;
         exec('be_form_proc','!zws_par_fast')
      ?};
      {? exec('ae_konto','edkonto',_a,'FORM','MASKA',1,2,1)
      || VAR_DEL.delete('FormMask');
         1
      ?}
   ");
   {! _i:=1..6
   |! FORM.fld_fml('SW'+$_i,'AFTER_EDIT',"
         _nr:=#(cur_afld()+1);
         exec('form_fld_enabled1','!zws_par_fast',_nr);
         _typ:=($('FORM.SW'+$_nr))();
         {? _typ='S'
         || ($('FORM.FW'+$_nr+':=\'\'\'\''))()
         || ($('FORM.W'+$_nr+':=null'))()
         ?};
         1
      ");
      FORM.fld_fml('W'+$_i,'BEFORE_EDIT',"
         _nr:=#(cur_afld()+1);
         {? var_press('SluWyr')>0
         || SLU.prefix(); SLU.seek(SluWyr[_nr].SLU)
         ?};
         1
      ")
   !}
|| FORM.fld_fml('MASKA','AFTER_EDIT',"*")

?};
~~


\set_slu_wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawienie zmiennej ze słownikami wyróżników
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('SluWyr');
KA.AKCJA:=0;
_ile:=+FORM.MASKA;
{? _ile>=SSTALE.AR().SYNT
|| _synt:=ROK_F.SYNT+FORM.MASKA;
   KS.cntx_psh();
   KS.index('SYM'); KS.prefix(ROK_F.ref(),_synt,);
   {? KS.first()
   || KS_W.index('LP'); KS_W.prefix(KS.ref());
      {? KS_W.first()
      || SluWyr:=obj_new(KS_W.size());
         {!
         |? ($('KA.S'+$KS_W.LP+':=_a'))(KS_W.SLU().SLU().NAZ);
            SluWyr[KS_W.LP]:=obj_new('SLU','WYM');
            SluWyr[KS_W.LP].SLU:=KS_W.SLU().SLU;
            SluWyr[KS_W.LP].WYM:=KS_W.WYM='T';
            KS_W.next()
         !};
         KA.AKCJA:=KS_W.LP
      ?}
   ?};
   KS.cntx_pop()
?};
~~


\form_fld_enabled
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia pola okna redagowania pozycji schematów dokumentów
::----------------------------------------------------------------------------------------------------------------------
{! _i:=1..6
|! exec('form_fld_enabled1','!zws_par_fast',_i)
!}


\form_fld_enabled1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Ustawia pole z wyróznikiem okna redagowania pozycji schematów dokumentów
::   WE: _a - nr wyróżnika (1-6)
::----------------------------------------------------------------------------------------------------------------------
_enabled:=_a<=KA.AKCJA;
FORM.efld_opt('REDW','enable='+$_enabled,KA,'S'+$_a);
FORM.efld_opt('REDW','enable='+$_enabled,FORM,'SW'+$_a);
{? _enabled
|| _typ:=($('FORM.SW'+$_a))();
   {? _typ='' || _typ:='S' ?}
?};
FORM.efld_opt('REDW','enable='+$(_enabled & _typ='S'),FORM,'W'+$_a);
FORM.efld_opt('REDW','enable='+$(_enabled & _typ='F'),FORM,'FW'+$_a);
FORM.efld_opt('REDW','mark='+$(_enabled & _typ='S' & SluWyr[_a].WYM),FORM,'W'+$_a);
FORM.efld_opt('REDW','mark='+$(_enabled & _typ='F' & SluWyr[_a].WYM),FORM,'FW'+$_a)


\be_form_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Wartość początkowa pola FORM.PROCENT
::----------------------------------------------------------------------------------------------------------------------
{? AUTOKSIE.TYP='P' & AUTOKSIE.WYR='T'
|| {? +FORM.MASKA>=SSTALE.AR().SYNT & FORM.PROCENT=0
   || _proc:=100;
      _synt:=ROK_F.SYNT+FORM.MASKA;
      FORM.cntx_psh();
      FORM.index('AUTOKSIE');
      FORM.prefix(AUTOKSIE.ref());
      {? FORM.first()
      || {!
         |? {? _synt=ROK_F.SYNT+FORM.MASKA
            || _proc-=FORM.PROCENT
            ?};
            FORM.next()
         !}
      ?};
      FORM.cntx_pop();
      FORM.PROCENT:=_proc
   ?}
?};
1


\be_autoksie_wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.42]
:: OPIS: Przed redakcją AUTOKSIE.WYR
::----------------------------------------------------------------------------------------------------------------------
-menu_txt()='dołącz' & AUTOKSIE.TYP='P'


\dek_poz_num
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Przenumerowanie DEK_POZ
::   WE: _a - od numeru do góry
::----------------------------------------------------------------------------------------------------------------------
_lp:=_a;
DEK_POZ.cntx_psh();
DEK_POZ.index('LP'); DEK_POZ.prefix(DEK_NAG.ref());
{? DEK_POZ.last()
|| {!
   |? {? DEK_POZ.LP>=_lp
      || DEK_POZ.LP+=1;
         DEK_POZ.put();
         DEK_POZ.prev()
      ?}
   !}
?};
DEK_POZ.cntx_pop();
1


\ae_dn_tgtu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Po redkacji pola DEK_NAG.T_GTU
::  OLD: \ae_dn_tgtu/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
{? DEK_NAG.T_GTU='P'
|| DEK_NAG.F_GTU:=null
?};
1


\be_dn_gtu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Przed redakcją DEK_NAG.F_GTU
::  OLD: \be_dn_gtu/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='S';
DEK_NAG.T_GTU='F'


\be_dn_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.51]
:: OPIS: Przed redakcją DEK_NAG.F_PROC
::  OLD: \be_dn_proc/skid_dek.fml
::----------------------------------------------------------------------------------------------------------------------
ZMIENNE.RODZAJ:=FL.TYP_WYN:='S';
1


\be_f_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IFZ [21.37]
:: OPIS: Przed wyświetleniem FOR_AKC.AKCJA
::----------------------------------------------------------------------------------------------------------------------
POMOC.AKCJA:={? FOR_AKC.AKCJA='wycofywanie' || 0 || 1 ?};''


\bd_pomoc_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [21.37]
:: OPIS: Przed wyświetleniem POMOC.AKCJA
::----------------------------------------------------------------------------------------------------------------------
{? ~('pd'*(1+-menu_txt)) || exec('be_f_akc','!zws_par_fast') ?}; ''


:Sign Version 2.0 jowisz:1045 2024/01/18 18:05:34 6bf5605948a292c42a7b2013baac4948e99953e091b3bc163fcd406ae6c4544f6cabc8ef9b8119640ce73df1eeda2ad735b1c868f89c3536bde8b84737666433845a6702083e92cfe8f0199174e6796807eb4074e3a43e2ca2adac558314acd25e5727af35f38644669706ef815a7c755a5e4882382009a1cd6e512c9a0bbf36
