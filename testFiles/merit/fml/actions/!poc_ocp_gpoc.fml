:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !poc_ocp_gpoc.fml
:: Utworzony: 06.09.2017
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności POC_OCP_GPOC - Przetwarzanie sesji ocen.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przetwarzanie sesji ocen - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP,SERVICE
::
::# kind=WE, symbol=ZO_PROC, type=_ZO_PROC, name=Wskazanie sesji ocen, required=T, keyref=T
::# kind=WE, symbol=TYP, type=STRING, name=Typ wyniku (Formularz/Oceniany/ocEniający), required=T, keyref=T, fml_val="exec('typ','!poc_ocp_gpoc',_a)"
::
:: Lista parametrów obsługujących TYP=Formularz  -----------------------------------------------------------------------
:: Parametry wejściowe: Z i ZZ_TYP_KOD umożliwiają filtrowanie zwracanych formularzy ocen.
::# kind=WE, symbol=Z, type=STRING, name=Tylko zatwierdzone formularze (T/N), required=N, fml_val="exec('edit_boolean','#edit',_a,'Tylko zatwierdzone formularze')"
::# kind=WE, symbol=ZZ_TYP_KOD, type=STRING, name=Lista typów ocen (akceptowalnych lub odrzucanych), required=N, fml_val="exec('wybierz','!poc_ocp_gpoc',_a)"
::
::# kind=WY, symbol=ZO_FORM, type=_ZO_FORM, name=Wskazanie formularza oceny, required=T
::
:: Lista parametrów obsługujących TYP=Oceniany lub TYP=ocEniający  -----------------------------------------------------
::# kind=WE, symbol=KOMPLET, type=STRING, name=Tylko kompletne oceny (T/N), required=N, fml_val="exec('edit_boolean','#edit',_a,'Tylko kompletne oceny')"
::
::# kind=WY, symbol=ZO_OSOBA, type=_ZO_OSOBA, name=Wskazanie uczestnika sesji ocen, required=T
::
_par:=params_get();
_mp:=_par.mp;

{? _mp.pathProc() | _mp.pathTodo()
|| _keyRefs:=_mp.getRefs();
   {? var_pres('[1]',_keyRefs)<=0
   || _mp.error('Nieprawidłowy parametr wejściowy.');
      return()
   ?};

   _in:=_par.in;
   _out:=_par.out;

   _dialog:=~(_mp.isService() | _mp.isAutoRun());

   _tString:=type_of('');

   _typ:={? var_pres('TYP',_in)=_tString & ',F,O,E,'*',%1,' [_in.TYP] || _in.TYP || 'F' ?};

   _war:='';
   {? _typ='F'
::    Wynikiem maja być Formularze.
   || _tRet:='ZO_FORM';
      _rodzaj:='E';
::    Obsługa parametru Z.
      {? var_pres('Z',_in)=_tString & ',T,N,'*',%1,' [_in.Z]
      || _war+='ZO_FORM.Z=\'%1\' & ' [_in.Z]
      ?};
::    Obsługa parametru ZZ_TYP_KOD.
      {? _in.ZZ_TYP_KOD<>~~ & _in.ZZ_TYP_KOD<>''
      || _tryb:=obj_new('val','def');
         _tryb.val:=1;
         _tryb.def:=exec('tryb','!poc_ocp_gpoc');
         _lista:=_in.ZZ_TYP_KOD;
         _poz:=_lista*':';
         {? _poz
         || _tc:=(_poz-1)+_lista;
            {! _lp:=1 .. 2
            |! {? _tc=_tryb.def[_lp].name
               || _tryb.val:=_lp;
                  _lista:=_poz-_lista
               ?}
            !}
         ?};
         _war+='(\',%1,\'*ZO_FORM.ZZ_TYP().KOD%[2]0) & ' [_lista,{? _tryb.val=1 || '>' || '=' ?}]
      ?}

::    Wynikiem ma być Oceniany lub ocEniający.
   || _tRet:='ZO_OSOBA';
      _rodzaj:=_typ;
      {? var_pres('KOMPLET',_in)=_tString & ',T,N,'*',%1,' [_in.KOMPLET]
      || _war+='ZO_OSOBA.KOMPLET=\'%1\' & ' [_in.KOMPLET]
      ?}
   ?};
   _war:={? _war='' || '1' || _war-3 ?};

:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
   _mp.save(exec('kind_out','#b_port'),'LOOP','N');

:: Ustalenie / odzyskanie klucza grupującego.
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

   {? ~_mp.loop()
::    Pierwszy obrót pętli - przygotujmy dane.
::    Usuwamy wszystkie dotychczasowe klucze, które mogły zostać zapamiętane przy poprzednim uruchomieniu czynności
::    (zakończonej _mp.keep()).
   || _mp.grpkeyDelAll();
      _err:='';
      _ile:=0;
      ZO_PROC.cntx_psh();
      ZO_PROC.prefix();
      {? ZO_PROC.seek(_in.ZO_PROC)
      || ZO_OSOBA.cntx_psh();
         ZO_OSOBA.index('ZO_OSOBA');
         ZO_OSOBA.prefix(_rodzaj,ZO_PROC.ref());
         {? ZO_OSOBA.first()
         || {? _typ='F'
            || ZO_FORM.cntx_psh();
               ZO_FORM.index('KOGO');
               ZZ_TYP.cntx_psh();
               {!
               |? ZO_FORM.prefix(ZO_OSOBA.ref());
                  {? ZO_FORM.first()
                  || {!
                     |? {? ($_war)()
                        || _ile+=_mp.grpkeyAdd(ZO_FORM.uidref())
                        ?};
                        ZO_FORM.next()
                     !}
                  ?};
                  ZO_OSOBA.next()
               !};
               ZZ_TYP.cntx_pop();
               ZO_FORM.cntx_pop()
            || {!
               |? {? ($_war)()
                  || _ile+=_mp.grpkeyAdd(ZO_OSOBA.uidref())
                  ?};
                  ZO_OSOBA.next()
               !}
            ?}
         ?};
         ZO_OSOBA.cntx_pop()
      || _err:='Nieprawidłowa wartość parametru wejściowego.'
      ?};
      ZO_PROC.cntx_pop();
      {? _err<>''
      || _mp.error(_err);
         return()

      |? _dialog
      || _INFO:=tab_tmp(1,
            'AKCJA','STRING[32]','Akcja'@,
            'TYP','STRING[16]','Typ wyniku'@,
            'ILE','INTEGER','Liczba odpowiedzi'@
         );
         _INFO.blank();
         _INFO.TYP:=
            {? _typ='F'
            || 'Formularze'@
            |? _typ='E'
            || 'Oceniający'@
            |? _typ='O'
            || 'Oceniani'@
            || '<BŁĄD>'@
            ?};
         _INFO.ILE:=_ile;
         _we:=_INFO.mk_edit(_mp.buf_act.NAME);
         _INFO.win_esep(_we,'Status'@@);
         _INFO.win_efld(_we,,'TYP',,,16,);
         _INFO.win_efld(_we,,'ILE',,,16,);
         exec('zakoncz','#window',_INFO,_we,1,"cur_tab(1,1).AKCJA:='Zakończ'; 'key:F2'",1);
         exec('ok_esc','#window',_INFO,_we,1,,,0,1);
         _INFO.win_edit(_we);
         _INFO.display();
         {? _INFO.AKCJA<>'Zakończ'
         || _mp.keep();
            return()
         ?}
      ?}
   ?};

   _uidref:=_mp.grpkeyGet();
   {? _uidref=~~
::    Brak elementów do "wypchnięcia".
   || _mp.done()

::    Są pozycje do przetworzenia. Operacje usunięcia elementu z kolejki i ustawienia parametrów wyjściowych wykonajmy
::    w transakcji.
   || do();
      {? _mp.grpkeyDel()
      || _ref:=exec('FindAndGet','#table',_tRet,_uidref,,,null());
::       Parametr wyjściowy musi być typu _ZO_FORM lub ZO_OSOBA - stąd (powyżej) "konwersja" uidref -> ref.
::       Zapamiętanie parametru wyjściowego ZO_FORM lub ZO_OSOBA.
         _mp.save(exec('kind_out','#b_port'),_tRet,_ref);
         {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?};
      _mp.done();
      end()
   ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przetwarzanie sesji ocen - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_keyRefs:=_mp.getRefs();
_ref:={? var_pres('[1]',_keyRefs) || _keyRefs[1] || _in.ZO_PROC ?};
_tab:=exec('desc_tab','phr_dane');
ZO_PROG.cntx_psh();
ZO_PROG.prefix();
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_ref)
|| _tab.ZAW_DANE:='T';
   _tab.NAZWA:=ZO_PROC.ZO_PROG().NAZWA;
   _tab.RODZAJ:=ZO_PROC.ZO_PROG().RODZAJ;
   _tab.OKRES_OD:=$ZO_PROC.OKRES_OD
?};
ZO_PROC.cntx_pop();
ZO_PROG.cntx_pop();

{? _tab.ZAW_DANE='T'
|| {? _in.TYP='F'
   || 'Przetwarzaj formularze ocen z programu "%1" (%2) w sesji od %3.'@@[_tab.NAZWA,_tab.RODZAJ,_tab.OKRES_OD]
   |? _in.TYP='O'
   || 'Przetwarzaj ocenianych z programu "%1" (%2) w sesji od %3.'@@[_tab.NAZWA,_tab.RODZAJ,_tab.OKRES_OD]
   |? _in.TYP='E'
   || 'Przetwarzaj oceniających z programu "%1" (%2) w sesji od %3.'@@[_tab.NAZWA,_tab.RODZAJ,_tab.OKRES_OD]
   || 'W ramach programu "%1" (%2) przetwarzaj sesję od %3.'@@[_tab.NAZWA,_tab.RODZAJ,_tab.OKRES_OD]
   ?}
|| 'Przetwarzaj sesję ocen'@@
?}


\typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła pozwala wybrać typ oczekiwanego wyniku działania czynności.
::   WE: [_a] [STRING] - Aktualny typ wyniku.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:={? var_pres('_a')=type_of('') & (_a='O' | _a='E') || _a || 'F' ?};
_default:={? _in='O' || 2 |? _in='E' || 3 || 1 ?};
_ret:=FUN.choice('Wybierz typ wyniku:'@,_default,'&Formularz'@,'&Oceniany'@,'Oc&eniający'@);
{? _ret=1
|| _in:='F'
|? _ret=2
|| _in:='O'
|? _ret=3
|| _in:='E'
?};
_in


\tryb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła zwraca tablicę z nazwami trybu listy kodów.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tryb:=obj_new('include','exclude');

:: Opis elementów:
::    name  - Wyznacznik trybu doklejany na początku listy.
::    title - Tekst doklejany do tytułu okna (@).
::    code  - Nazwa akcji w menu (@@).
::    tag   - Znak wyboru akcji z menu.
::    help  - Podpowiedź do akcji (@).
::    color - Kod miejsca użycia koloru.
::    leg   - Opis do legendy (@);

_tryb.include:=obj_new('name','title','code','tag','help','color','leg');
_tryb.include.name:='Wybierz';
_tryb.include.title:='(tryb: wyboru)'@;
_tryb.include.code:='&Wybierz'@@;
_tryb.include.tag:='W';
_tryb.include.help:='Lista definiuje elementy wybrane'@;
_tryb.include.color:='__TMP#Standardowy#'@;
_tryb.include.leg:='Elementy wybrane'@;

_tryb.exclude:=obj_new('name','title','code','tag','help','color','leg');
_tryb.exclude.name:='Wyklucz';
_tryb.exclude.title:='(tryb: wykluczenia)'@;
_tryb.exclude.code:='Wy&klucz'@@;
_tryb.exclude.tag:='K';
_tryb.exclude.help:='Lista definiuje elementy odrzucane'@;
_tryb.exclude.color:='__TMP#Krytyczny#'@;
_tryb.exclude.leg:='Elementy odrzucane'@;

_tryb


\wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła pozwala wskazać kody typów ocen i oceniających dostępne w danej czynności.
::       Formuła wykorzystywana jako argument atrybutu 'fml_val' parametru czynności.
::   WE: [_a] [STRING] - Aktualna lista kodów [domyślnie: ''].
::                       Lista jest poprzedzona trybem (patrz funkcja \tryb powyżej) i dwukropkiem.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:={? var_pres('_a')=type_of('') || form(_a) || '' ?};

_tryb:=obj_new('def','val');
_tryb.def:=exec('tryb','!poc_ocp_gpoc');
_tryb.val:=1;
_out:='';

_TAB:=sql(
   'select ZZ_TYP.KOD, ZZ_TYP.NAZWA, 0 as STAN  '
   'from ZZ_TYP '
   'where ZZ_TYP.TYP=\'O\' '
   'order by ZZ_TYP.KOD'
);

_ext:=obj_new('checked');
:: Aktualizacja stanu na podstawie parametru wywołania.
_ext.checked:=0;
{? _in<>''
|| _poz:=_in*':';
   {? _poz
   || _tc:=(_poz-1)+_in;
      {! _lp:=1 .. 2
      |! {? _tc=_tryb.def[_lp].name
         || _tryb.val:=_lp;
            _in:=_poz-_in
         ?}
      !}
   ?};
   _ina:=spli_str(_in,',');
   {! _lp:=1 .. obj_len(_ina)
   |! {? _ina[_lp]<>'' & _TAB.find_key(_ina[_lp],)
      || _out+='%1,' [_TAB.KOD];
         _TAB.STAN:=1;
         _ext.checked+=_TAB.put()
      ?}
   !};
   {? _out<>''
   || _out:=_tryb.def[_tryb.val].name+':'+(_out-1)
   ?}
?};

_dh:=_TAB.size()+1;
{? _dh<5
|| _dh:=5
|? _dh>30
|| _dh:=30
?};

_ws:=_TAB.mk_sel('Typy ocen'@,,,,,,_dh,,'U');
_TAB.win_fld(_ws,,'KOD',,,,,,'Kod'@,,'Typ oceny i oceniającego - kod'@);
_TAB.win_fld(_ws,,'NAZWA',,,,,,'Nazwa'@,,'Typ oceny i oceniającego - Nazwa'@);
_TAB.win_fld(_ws,,'STAN',,,-3,,,'Stan'@,,''@,2,,"1","0");
_TAB.win_act(_ws,,'Formuła','Akceptuj'@@,,'Akceptacja wyboru'@,"sel_exit()",,,,,,'A');
_TAB.win_act(_ws,,'Menu','Tryb'@@,,'Zmiana sposobu interpretacji listy kodów'@,,,,,,,'T');
{! _lp:=1 .. 2
|! _TAB.win_act(_ws,,'Formuła',_tryb.def[_lp].code,'Tryb',_tryb.def[_lp].help,
      "  _par:=params_get();
         _tryb:=_par.tryb;
         _tryb.val:=3-_tryb.val;
        _TAB:=_par.TAB;
        _ws:=_par.ws;
        _TAB.hdr_sel();
        _TAB.hdr_sel(' %1' [_tryb.def[_tryb.val].title])
      ",,,,,,
      _tryb.def[_lp].tag
   )
!};
_TAB.win_act(_ws,,'Formuła','Uwzględnij'@@,,'Dodaje bieżący kod do wybranych'@,
   "  _par:=params_get();
      _TAB:=_par.TAB;
      {? ~_TAB.STAN
      || _TAB.STAN:=1;
         _par.ext.checked+=_TAB.put()
      ?}
   ",,,1,,,'U'
);
_TAB.win_act(_ws,,'Formuła','Pomiń'@@,,'Usuwa bieżący kod z wybranych'@,
   "  _par:=params_get();
      _TAB:=_par.TAB;
      {? _TAB.STAN
      || _TAB.STAN:=0;
         _par.ext.checked-=_TAB.put()
      ?}
   ",,,1,,,'P'
);
_TAB.win_act(_ws,,'Szukaj');
_TAB.win_act(_ws,,'Kolejność');
_TAB.win_act(_ws,,'Formuła','Legenda'@@,,,
   "  _tryb:=params_get().tryb;
      exec('legenda','color',
         '$%1$%2' [_tryb.def[1].color,_tryb.def[1].leg],
         '$%1$%2' [_tryb.def[2].color,_tryb.def[2].leg]
      )
   ",,,,,,
   'L',,'target=window'
);
_TAB.win_act(_ws,,'Rekord',,,,
   "  _par:=params_get();
      _TAB:=_par.TAB;
      {? _a
      || _TAB.btn_opt(_par.btnAkceptuj,'state=%1' [{? _par.ext.checked || 'normal' || 'grayed' ?} ]);
         _ws:=_par.ws;
         {? _TAB.sel_size()
         || _ag:='T';
            _da:=':'
         || {? _TAB.STAN
            || _ag:='U';
               _da:='P'
            || _ag:='P';
               _da:='U'
            ?};
            _ag+='T(%1)' [_par.tryb.def[_par.tryb.val].tag]
         ?};
         _TAB.actions_grayed(_ws,_ag);
         _TAB.actions(_ws,,_da,1)
      ?};
      {? _TAB.STAN=1
      || Color.fnd_kol(_par.tryb.def[_par.tryb.val].color)
      ?}
   "
);
_id:=_TAB.win_btn(_ws,'text=%1' ['Tryb'@],'Menu');
{! _lp:=1 .. 2
|! _TAB.btn_menu(_ws,_id,'menu:T%1' [_tryb.def[_lp].tag])
!};
_TAB.win_btn(_ws,'text=%1' ['Uwzględnij'@],'menu:U');
_TAB.win_btn(_ws,'text=%1' ['Pomiń'@],'menu:P');
_btnAkceptuj:=_TAB.win_btn(_ws,'text=%1,icon=%2,panel=bottom,align=end' ['Akceptuj'@,exec('ok','#icon')],'menu:A');
_TAB.win_btn(_ws,'text=%1,icon=%2,panel=bottom,align=end' ['Anuluj'@,exec('anuluj','#icon')],'key:Esc');
_TAB.win_sel(_ws);
_TAB.win_edit(_TAB.mk_edit(,1));
params_set(
   'TAB',_TAB,
   'ws',_ws,
   'btnAkceptuj',_btnAkceptuj,
   'tryb',_tryb,
   'ext',_ext
);
_TAB.hdr_sel(' %1' [_tryb.def[_tryb.val].title]);
{? _TAB.select() & _TAB.first()
|| _out:='';
   {!
   |? {? _TAB.STAN
      || _out+='%1,' [_TAB.KOD]
      ?};
      _TAB.next()
   !};
   {? _out<>''
   || _out:=_tryb.def[_tryb.val].name+':'+(_out-1)
   ?}
?};

_out

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:52 de094d093c4c2965354ba2407ae156919167c35609fc0729adabd2db368ec1077b755c00f789f8f38ded940e3a788d997623984bf423498fe58ff4830d4a3fd7bf383cab035c99970d63897e5c7eec194bc2c7dc229d8f2afb9ba900d6e0d05a6a89194f6f534ffc2e22a7038a4f4fc5b7c3f4846dce2d6be73bd4c031e23f68
