:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_aprp.fml
:: Utworzony: 15.01.2020
:: Autor: IS
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_APRP - Pow. pracowników o przekroczeniu pr. pod.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pow. pracowników o przekroczeniu pr. pod. - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP,SERVICE
::# permissions=F_ZATR,UD_SKL
::
:: Czynność zbiera informacje o pracownikach, którzy w danym miesiącu przekroczyli próg podatkowy.
:: W zależności od daty parametru 266 - Personel: Data zmiany sposobu naliczania w systemie progów podatkowych.
:: jest sprawdzane pojawienie się wartości w atrybucie 9033 - Dochód II próg podatkowy
:: lub zmiana w atrybucie 91 - Procent podatku w miesiącu podanym, bądź między miesiącem podanym a poprzednim,
:: ale bez zmian w samym poprzednim
::
:: W przypadku nie podania ROK i MSC przyjmą wartość bieżącego roku i miesiąca.
::# kind=WE, symbol=ROK, type=NUMBER, name=Badany rok, required=N
::# kind=WE, symbol=MSC, type=NUMBER, name=Badany miesiąc, required=N
::
:: Parametr wejściowy UD_SCH pozwala wskazać symbol schematu (typu PODZORG), który posłuży do ustalenia jednostki
:: organizacyjnej, przekazanej parametrem UD_SKL. Jeżeli parametr nie zostanie przekazany (ustawiony), to wybrany
:: zostanie schemat domyślny lub (jeżeli domyślny nie został określony) pierwszy (w kolejności alfabetycznej).
::# kind=WE, symbol=UD_SCH, type=STRING, name=Schemat organizacyjny, required=N, ^
::#    fml_val="exec('ud_sch_wybierz','schemat',,_a).SYMBOL"
::
:: Parametr wejściowy UD_SKL pozwala wskazać jednostkę organizacyjną, do której będzie ograniczony zakres przetwarzania.
:: Domyślnie przetwarzane będą wszystkie jednostki organizacyjne.
::# kind=WE, symbol=UD_SKL, type=STRING, name=Jednostka organizacyjna, required=N, ^
::#    fml_val="exec('ud_skl_wybierz','schemat',,,1,_a)"
::
:: Parametr wejściowy SQL_FROM umożliwia zbudowanie dodatkowych relacji na potrzeby dodatkowego warunku
:: (patrz SQL_WHERE).
:: Domyślnie przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_FROM, type=STRING, name=Dodatkowe relacje filtra, required=N
::
:: Parametr wejściowy SQL_WHERE umożliwia dodatkowe ograniczenie listy współpracowników. Warunek może odwoływać się
:: do tabeli pracowników (poprzez alias "P" np. "P".ID>1000) oraz
:: do tabeli osób (poprzez alias "1OSOBA" np. "1OSOBA".PLEC='K').
:: Odwołania do innych tabel wymagają odpowiedniego użycia parametru SQL_FROM.
:: Domyślnie SQL_WHERE przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_WHERE, type=STRING, name=Dodatkowy warunek filtra, required=N
::
:: Parametr wejściowy FML_TEST umożliwia dodatkową weryfikację wyboru współpracownika do przetwarzania. Jest treścią
:: formuły w formacie napisu. Jeżeli formuła zwróci wartość 0 to dany współpracownik nie będzie przetwarzany.
:: Formuła jest wykonywana przy ustawionych buforach tabel: P, OSOBA.
:: Domyślnie przyjmuje wartość '1'.
::# kind=WE, symbol=FML_TEST, type=STRING, name=Dodatkowy warunek wyboru, required=N
::
::----------------------------------------------------------------------------------------------------------------------
:: Parametry wyjściowe przyjmują wartości puste jeżeli znaleziony pracownik przekroczył próg podatkowy
:: w badanym okresie, ale nie udało się znaleźć właściwego dla niego adresu e-mail w tabelach USERS i OS_ADRES.
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=RCV, type=MEMO, name=Lista odbiorców, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_service:=_mp.isService();

{? _mp.pathProc() | _mp.pathTodo()
:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
|| _mp.save(exec('kind_out','#b_port'),'LOOP','N');

:: Ustalenie / odzyskanie klucza grupującego.
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

   {? ~_mp.loop()
::    Pierwszy obrót pętli - przygotujmy dane.
::    Usuwamy wszystkie dotychczasowe klucze, które mogły zostać zapamiętane przy poprzednim uruchomieniu czynności
::    (zakończonej _mp.keep()).
   || _mp.grpkeyDelAll();
      _winT:='Pow. pracowników o przekroczeniu pr. pod.'@;

::    Sprawdzenie parametrów wejściowych:
      {? (_result:=exec('input_chk_prp','personel_alerty',_service,_in,_winT))=''
      || {? ~exec('first_run','!pkd_ezk_aprp',_in,_mp,_winT)
::       Jeśli nie znaleziono pracowników spełniających kryteria, zakończ czynność:
         || _out.RCV:=_out.BODYH:=_out.SUB:='';
            _mp.save(,_out);
            _mp.done();
            return()
         ?}
      || {? ~_service
         || FUN.emsg(_result);
            _mp.cancel()
         || _mp.error(_result)
         ?};
         return()
      ?}
   ?};

:: Jeżeli coś było nie tak (z parametrami wejściowymi, z wyborem), to zostało obsłużone powyżej.
:: Tutaj jesteśmy już na etapie obsługi pętli.

   P.cntx_psh();
   P.prefix();
   do();
:: Podczytanie kluczowych wartości z GRPKEY:
   _grpPars:=json_par(_mp.grpkeyGet());
   _in.ROK:=_grpPars.ROK;
   _in.MSC:=_grpPars.MSC;

   {? _grpPars.UIDREF<>~~
::    Przechodzę po pracownikach odłożonych w GRPKEY:
   || {? P.seek(_grpPars.UIDREF)
      || _ret:=exec('run','!pkd_ezk_aprp',_in,_grpPars.MAIL);
::       Jeżeli RCV jest ciągiem pustym, to znaczy, że nie znaleziono adresu e-mail dla pracownika. Należy to sprawdzić
::       w procesie. W takim przypadku również BODYH i SUB będą ciągami pustymi.
         _out.RCV:=_ret.RCV;
         _out.BODYH:=_ret.BODYH;
         _out.SUB:=_ret.SUB;
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};
   _mp.done();
   end();
   P.cntx_pop()
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pow. pracowników o przekroczeniu pr. pod. - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Powiadomienie pracowników o przekroczeniu progu podatkowego'@@


\first_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pierwsze uruchomienie czynności (pierwszy obrót pętli)
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [OBJ] - objekt menedżera procesów (mp)
::       _c [STRING] - tytuł okienka
::   WY: 0/1 - Czy znaleziono pracowników z blokadą składek?
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_mp:=_b;
_winT:=_c;
_service:=_mp.isService();

P.cntx_psh();
:: Założenie odpowiednich filtrów na tabelę P wg. tego co podano w _in:
exec('fltr_p_ud_sql','personel_alerty',_service,_in);
:: Wygenerowanie tabeli z uidref pracowników z przekroczeniem progu podatkowego w badanym okresie:
_TAB:=exec('pr_pod_p','personel_alerty',_in.ROK,_in.MSC,_in.FML_TEST,'T');
P.f_clear();
P.cntx_pop();

:: Jeśli nie znaleziono takich pracowników zwróć 0:
{? ~_TAB.size()
|| {? ~_service
   || FUN.info(
      _winT+'\n\n'+
      'Analiza danych zakończona.'@+'\n'+
      'Nie znaleziono zapisów spełniających kryteria.'@)
   ?};
   return(0)
?};

:: Przepisanie ROK i MSC oraz tabeli uidref pracowników z blokadą do GRPKEY:
{? _TAB.first()
|| _bMail:=0;
   {!
   |? _par:=obj_new('UIDREF','ROK','MSC','MAIL');
::    Struktura tablicy nazwanej przekazywanej w formie JSON do GRPKEY:
::       * UIDREF [STRING] - P.uidref(), wskazanie na pracownika
::       * ROK    [NUMBER] - _in.ROK, badany rok
::       * MSC    [NUMBER] - _in.MSC, badany miesiąc
::       * MAIL   [STRING] - adres e-mail pracownika
      _par.UIDREF:=_TAB.UID;
      _par.ROK:=_in.ROK;
      _par.MSC:=_in.MSC;
      _par.MAIL:=_TAB.MAIL;
      {? _TAB.MAIL='' || _bMail+=1 ?};
      _mp.grpkeyAdd(json_obj(_par));
      obj_del(_par);
      _TAB.next()
   !}
?};
:: Informacja o przygotowniu danych
{? ~_service
|| FUN.info(
      _winT+'\n\n'+
      'Analiza danych zakończona.'@+'\n'+
      'Liczba zapisów spełniających kryteria: %1.'@ [$_TAB.size()]+'\n'+
      'Liczba pracowników bez adresu e-mail: %1.'@ [$_bMail]
   )
?};
1


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła odpowiedzialna za przygotownie danych do wysyłanego powiadomienia. Formuła zakłada, że jest ustawiony
::       bufor na konkretnym rekordzie tabeli P. Formuła zwraca tablicę nazwaną z elementami potrzebnymi do wysłania
::       powiadomienia.
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [STRING] - e-mail pracownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_ret:=obj_new('RCV','BODYH','SUB');
_ret.RCV:=_ret.BODYH:=_ret.SUB:='';

:: Przypisanie przychodzącego adresu e-mail:
_ret.RCV:=_b;

:: Jeśli nie ma adresu e-mail, to dalsze wypełnianie nie ma sensu:
{? _ret.RCV<>''
|| _td:="'<td'+{? var_pres('_b')=type_of('') || ' class=\"'+_b+'\"' || '' ?}+'>'+_a+'</td>'";
   _ret.SUB:='Powiadomienie o przekroczeniu progu podatkowego'@;
   OSOBA.cntx_psh();
   OSOBA.clear();
   P.OSOBA();
   _kobieta:=(OSOBA.PLEC='K');

   _ret.BODYH:=
      '<center><h4>'+
         _ret.SUB+
      '</h4></center>\n'

      '\n'
      'Informuję, że w miesiącu ' +date(_in.ROK,_in.MSC,1)$8 +' roku przekroczył' +{? _kobieta || 'a Pani' || ' Pan' ?}+
      ' obowiązujący próg podatkowy i przechodzi '+{? _kobieta || 'Pani' || 'Pan' ?}+' na wyższą stawkę opodatkowania '
      'zarobków.'
      '\n<br>';

   _ret.BODYH+=
      '\n'
      '<p>'+'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'@+'</p>';

   OSOBA.cntx_pop()
?};

_ret

:Sign Version 2.0 jowisz:1048 2021/04/09 15:19:39 892fb5fa7598d9362aca7dfe8a4352e149f8e8877464aa14c2f46813d1109e7fc724b756eec944acf6f6befba93cc785561e5b5bbb774a7cb5b0dda6788ec100a9667d86671732df0baf1c1095a8fa2f5dd277d759442098fcd8aa3b24c27d14be73f4e465305bd3fbacbb7d9f8c09f28cb0487d1a582f55147b1b2eaba15b17
