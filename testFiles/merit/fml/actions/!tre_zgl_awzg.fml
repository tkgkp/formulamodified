:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_zgl_awzg.fml
:: Utworzony: 05.03.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_ZGL_AWZG - Weryfikacja zgłoszenia rem.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła główna czynności TRE_ZGL_AWZG - Weryfikacja zgłoszenia rem.
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;

::# permissions=ODDZ
::# properties=SERVICE
::# access=exec('access','!tre_zgl_awzg')

::# condition=Odrzucenie zgłoszenia, act_uid=TRE_ZGL_AEZG, auto=N, formula=_a.RESULT='ODRZUCENIE'
::# condition=Potwierdzenie zgłoszenia, act_uid=TRE_ZGL_RZGL, auto=N, formula=_a.RESULT='POTWIERDZENIE'

::# kind=WE, symbol=REM_ZGL, type=_REM_ZGL, name=Zgłoszenie remontowe, required=T, keyref=T
{? var_pres('REM_ZGL',_in)<>type_of(~~) & var_pres('REM_ZGL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['REM_ZGL','TRE_ZGL_AWZG'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('REM_ZGL',_in)=type_of(~~) || _in.REM_ZGL:=null() ?};

::# kind=WY, symbol=RESULT, type=STRING, name=Wynik weryfikacji, required=N
{? var_pres('RESULT',_out)<>type_of(~~) & var_pres('RESULT',_out)<>type_of('') || return() ?};

_result:=0;

_clean_result:=params_exec('clean','!tre_zgl_awzg');
_can_continue:=_clean_result.RESULT;
_rem_zgl:=_clean_result.REM_ZGL;

REM_ZGL.cntx_psh();
REM_ZGL.prefix();

{? _can_continue>0 & _rem_zgl<>null()
|| _can_continue:=REM_ZGL.seek(_rem_zgl)
|| _can_continue:=0
?};

{? _can_continue>0
||
   _mp.keyRef(REM_ZGL.uidref());

   _ask:=1;
   _komm:=1;
   {? _mp.isAutoRun() | _mp.isService()
   || _ask:=0;
      _komm:=0
   ?};
   {? _mp.isGroup()
   || _ask:=0;
      _komm:=0
   ?};

:: Środowisko zgłoszeń
   _env_rem_zgl:=
      {? var_pres('_context')>100 & var_pres('ENV_REM_ZGL',_context)>100
      || _context.ENV_REM_ZGL
      || exec('env','remonty_zgloszenia',0)
      ?};
   params_set('env_rem_zgl',_env_rem_zgl);

   {? _mp.akcja()='PLANUJ'
   || {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
      || _result:=exec('plan_action','remonty_plan',REM_ZGL.ref());
         exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())
      ?}
   ||
::    Obsługa w obszarze roboczym albo z listy zadań
      {? _ask>0
      || {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
         || {? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
            || REM_ZGL.win_edit('REDW');
               REM_ZGL.hdr_edit('Zgłoszenie remontowe — weryfikacja'@);
               REM_ZGL.memo_get(,'OPIS');
               REM_ZGL.memo_get(,'WOPIS');

::             Jeżeli zgłoszenie przyszło z portalu HR od opiekuna to podpowiadam datę realizacji
               {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
                  & exec('FindAndGet','#table',EDOKUM,REM_ZGL.REDOKUM,,
                  " _res:='';
                     EDOK_ATR.cntx_psh();
                     EDOK_ATR.use('edokat'+(ref_name(ref())+2));
                     _res:=exec('atr_get','portal_walidacja','OsobaRealizujaca','WAR');
                     EDOK_ATR.cntx_pop();
                     _res<>''
                  ",0)
               || _dt_pua:=REM_ZGL.DT_PUA;
                  _tm_pua:=REM_ZGL.TM_PUA;
                  EDOKUM.cntx_psh();
                  {? EDOKUM.seek(REM_ZGL.REDOKUM,ref_name(REM_ZGL.REDOKUM))
                  || EDOK_ATR.cntx_psh();
                     EDOK_ATR.use('edokat'+(ref_name(REM_ZGL.REDOKUM)+2));
                     _dt:=exec('atr_get','portal_walidacja','PlanowanaDataRealizacji','WAR');
                     _date:=exec('str2date','#convert',_dt);
                     {? _date<>date(0,0,0)
                     || _dt_pua:=_date;
                        _tm_pua:=time(0,0,0)
                     ?};
                     EDOK_ATR.cntx_pop()
                  ?};
                  EDOKUM.cntx_pop();
                  REM_ZGL.DT_PUA:=_dt_pua;
                  REM_ZGL.TM_PUA:=_tm_pua
               || _tm_stamp_pua:=Plugin.run('REM_ZGL_F_PUA_001',REM_ZGL.ref());
                  {? _tm_stamp_pua>0
                  || _tm_stamp_wa:=exec('create','#tm_stamp',REM_ZGL.DT_WA,REM_ZGL.TM_WA);
                     {? _tm_stamp_pua>=_tm_stamp_wa
                     || _date:=exec('tm_stamp2date','#tm_stamp',_tm_stamp_pua);
                        _time:=exec('tm_stamp2time','#tm_stamp',_tm_stamp_pua);
                        REM_ZGL.DT_PUA:=_date;
                        REM_ZGL.TM_PUA:=_time
                     ?}
                  ?}
               ?};
               exec('plan_load','remonty_plan');
               exec('rem_zgl_efld_opt','remonty_zgloszenia','REDW');

               {? REM_ZGL.REM_ZAS<>null()
               || {? REM_ZGL.DT_PST=date(0,0,0)
                  || REM_ZGL.DT_PST:=date();
                     REM_ZGL.TM_PST:=time()
                  ?};
                  {? REM_ZGL.DUR_TIME=time(0,0,0)
                  || REM_ZGL.DUR_TIME:=exec('min2time','#convert',exec('get','#params',500331,type_of(0)))
                  ?}
               ?};
               REM_CZYT.win_sel('WER');
               {? REM_ZGL.edit("exec('chk_rem_zgl_verify','remonty_zgloszenia')")
               || REM_ZGL.STAT_REJ:=exec('status_verified','remonty_zgloszenia');
                  REM_ZGL.DT_ZAT:=date();
                  REM_ZGL.TM_ZAT:=time();
                  REM_ZGL.USR_ZAT:=OPERATOR.USER;
                  REM_ZGL.DURATION:=exec('time2min','#convert',REM_ZGL.DUR_TIME);
                  {? REM_ZGL.put()
                  || _can_continue:=REM_ZGL.memo_put(,'WOPIS');
                     {? _can_continue>0
                     || _can_continue:=exec('desc_update','#b__box',REM_ZGL.uidref())
                     ?};
                     _zas_in_plan:=0;
                     {? _can_continue>0
                     || REM_PLAN.cntx_psh();
                        REM_PLAN.index('REM_ZGL');
                        REM_PLAN.prefix(REM_ZGL.ref());
                        {? REM_PLAN.first()
                        || _zas_in_plan:=1
                        ?};
                        REM_PLAN.cntx_pop()
                     ?};

                     {? _zas_in_plan>0 & _can_continue>0
                     || {? REM_ZGL.WERYFIK='T'
                        || _can_continue:=exec('generator_start','remonty_plan')
                        ?}
                     ?};
::                   Przypisanie czynności z szablonu
                     {? REM_ZGL.WERYFIK='T' & REM_ZGL.REM_CZYT<>null()
                     ||
::                      Sprawdzam czy wcześniej nie przypisano już czynności (np przy powtórnej weryfikacji)
                        REM_CZYU.cntx_psh();
                        REM_CZYU.index('REM_ZGL');
                        REM_CZYU.prefix(REM_ZGL.ref());
                        {? ~REM_CZYU.first()
                        || _can_continue:=exec('rem_czyu_add_templ_auto','zasoby',REM_ZGL.ref(),REM_ZGL.REM_CZYT().KOD)
                        ?};
                        REM_CZYU.cntx_pop()
                     ?};
                     {? _can_continue>0
                     || _result:=1
                     ?}
                  ?}
               ?}
            || FUN.info('Zgłoszenie o statusie \'%1\' nie może zostać zweryfikowane.'@[REM_ZGL.STAT_REJ])
            ?}
         ?};
         exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

::    Obsługa automatyczna albo dla grupy rekordów (weryfikacja bez pytania - zawsze potwierdzone)
      ||
::       Jeżeli zgłoszenie przyszło z portalu HR od opiekuna to od razu weryfikuję,
::       jak od pracownika to zostawiam na todo
         {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
            & exec('FindAndGet','#table',EDOKUM,REM_ZGL.REDOKUM,,
            " _res:='';
               EDOK_ATR.cntx_psh();
               EDOK_ATR.use('edokat'+(ref_name(ref())+2));
               _res:=exec('atr_get','portal_walidacja','OsobaRealizujaca','WAR');
               EDOK_ATR.cntx_pop();
               _res=''
            ",0)
         || {? _mp.isService()
            || _result:=0
            || _mp.keep()
            ?}
         ||
            {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref())
            || REM_ZGL.STAT_REJ:=exec('status_verified','remonty_zgloszenia');
               REM_ZGL.WERYFIK:='T';
               {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia')
               || REM_ZGL.DT_ZAT:=REM_ZGL.DT_WA;
                  REM_ZGL.TM_ZAT:=REM_ZGL.TM_WA;
                  REM_ZGL.USR_ZAT:=REM_ZGL.USR_WA;
                  EDOKUM.cntx_psh();
                  EDOKUM.clear();
                  _dt_pua:=date();
                  _tm_pua:=time();
                  {? EDOKUM.seek(REM_ZGL.REDOKUM,ref_name(REM_ZGL.REDOKUM))
                  || EDOK_ATR.cntx_psh();
                     EDOK_ATR.use('edokat'+(ref_name(REM_ZGL.REDOKUM)+2));
                     _dt:=exec('atr_get','portal_walidacja','PlanowanaDataRealizacji','WAR');
                     _date:=exec('str2date','#convert',_dt);
                     {? _date<>date(0,0,0)
                     || _dt_pua:=_date;
                        _tm_pua:=time(0,0,0)
                     ?};
                     EDOK_ATR.cntx_pop()
                  ?};
                  EDOKUM.cntx_pop();
                  REM_ZGL.DT_PUA:=_dt_pua;
                  REM_ZGL.TM_PUA:=_tm_pua

               || REM_ZGL.DT_ZAT:=date();
                  REM_ZGL.TM_ZAT:=time();
                  REM_ZGL.USR_ZAT:=OPERATOR.USER;
                  REM_ZGL.DT_PUA:=date();
                  REM_ZGL.TM_PUA:=time();

                  _tm_stamp_pua:=Plugin.run('REM_ZGL_F_PUA_001',REM_ZGL.ref());
                  {? _tm_stamp_pua>0
                  || _tm_stamp_wa:=exec('create','#tm_stamp',REM_ZGL.DT_WA,REM_ZGL.TM_WA);
                     {? _tm_stamp_pua>=_tm_stamp_wa
                     || _date:=exec('tm_stamp2date','#tm_stamp',_tm_stamp_pua);
                        _time:=exec('tm_stamp2time','#tm_stamp',_tm_stamp_pua);
                        REM_ZGL.DT_PUA:=_date;
                        REM_ZGL.TM_PUA:=_time
                     ?}
                  ?}
               ?};
               REM_ZGL.memo_set('Zgłoszenie zostało automatycznie zweryfikowane i potwierdzone','WOPIS');
               {? REM_ZGL.put()
               || {? REM_ZGL.memo_put(,'WOPIS')
                  || exec('desc_update','#b__box',REM_ZGL.uidref());
                     _result:=1
                  ?};
::                Przypisanie czynności z szablonu
                  {? REM_ZGL.WERYFIK='T' & REM_ZGL.REM_CZYT<>null()
                  ||
::                   Sprawdzam czy wcześniej nie przypisano już czynności (np przy powtórnej weryfikacji)
                     REM_CZYU.cntx_psh();
                     REM_CZYU.index('REM_ZGL');
                     REM_CZYU.prefix(REM_ZGL.ref());
                     {? ~REM_CZYU.first()
                     || _can_continue:=exec('rem_czyu_add_templ_auto','zasoby',REM_ZGL.ref(),REM_ZGL.REM_CZYT().KOD)
                     ?};
                     REM_CZYU.cntx_pop()
                  ?}
               ?}
            ?};
            exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())
         ?}
      ?}
   ?};

   {? _result>0 | _mp.isMicro()
   || _out.RESULT:={? REM_ZGL.WERYFIK='T' || 'POTWIERDZENIE' || 'ODRZUCENIE' ?};
::    Jeżeli zgłoszenia z portalu to zmiana statusu na edokumie
      {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia')
         & REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
      || exec('edokum_update','remonty_zgloszenia',REM_ZGL.ref())
      ?};
      _mp.save(,_out);
      _mp.done()
   || {? _mp.isService()
      || _out.RESULT:='BŁĄD';
         _mp.save(,_out);
         _mp.done()
      ?}
   ?}
?};

REM_ZGL.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Opis dla czynności weryfikacji zgłoszenia remontowego (TRE_ZGL_AWZG)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiedniego REM_ZGL
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,"REM_ZGL.SYM",'');
   _desc:={? _tmp<>'' || 'Zweryfikuj zgłoszenie remontowe: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,
::      "'Zweryfikuj zgłoszenie remontowe: %1'[REM_ZGL.SYM]",'')
|| _desc:='Zweryfikuj nowe zgłoszenie remontowe'@@
?};
_desc


\access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Formuła ograniczajaca uprawnienia do czynności
::       Sprawdza czy dany użytkownik jest opiekunem zasobu
::       startowego danego obiektu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;

{? var_pres('REM_ZGL',_in)=type_of(~~) || _in.REM_ZGL:=null() ?};

_rem_zgl:=null();
{? _in.REM_ZGL<>null()
|| _rem_zgl:=_in.REM_ZGL
?};

_result:=0;
{? _rem_zgl<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.cntx_psh();
   REM_ZGL.prefix();
   {? REM_ZGL.seek(_rem_zgl)
   || {? REM_ZGL.REM_ZAS<>null()
      || REM_ZGL.REM_ZAS();
         _result:=exec('chk_opiekun','zasoby',_user,)
      ||
::       Jeżeli zgłoszenie nie ma zasobu to zawsze zwracamy 1 żeby tu się nie powiesiło
         _result:=1
      ?}
   ?};
   REM_ZGL.cntx_pop();
   REM_ZAS.cntx_pop()
:: Jeżeli nie ma parametru to zawsze zwracamy 1 żeby się tu nie powiesiło
|| _result:=1
?};
_result


\action_verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Weryfikuj' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;

{? REM_ZGL.REM_ZAS<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.REM_ZAS();
   _can_continue:=exec('chk_opiekun','zasoby',OPERATOR.USER);
   {? _can_continue=0
   || _what:=exec('REM_ZAS','#to_string');
      _choice:=FUN.choice(
         'Zasób: %1 posiada opiekunów. Tylko oni mogą weryfikować zgłoszenia remontowe dotyczące tego zasobu.'@[_what],,
         'Opiekunowie'@
      );
      {? _choice>0
      || exec('rem_kato_select','zasoby',REM_ZAS.KAT)
      ?}
   ?};
   REM_ZAS.cntx_pop()
?};
{? _can_continue>0
||
   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='TRE_ZGL_AWZG';
   _args.UIDREF:=REM_ZGL.uidref();
   _args.AKCJA:='WERYFIKUJ';
   _args.PROC_START:='N';
   _args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
      _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
      _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

   exec('mp_run','#b__box',_args);

   {? params_get().env_rem_zgl.FILTER='W' & REM_ZGL.get() & REM_ZGL.STAT_REJ<>exec('status_ended','remonty_zgloszenia')
   || REM_ZGL.f_del()
   ?}
?};
~~


\action_plan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [20.14]
:: OPIS: Akcja 'Planuj' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;

{? REM_ZGL.REM_ZAS<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.REM_ZAS();
   _can_continue:=exec('chk_opiekun','zasoby',OPERATOR.USER);
   {? _can_continue=0
   || _what:=exec('REM_ZAS','#to_string');
      _choice:=FUN.choice(
         'Zasób: %1 posiada opiekunów. Tylko oni mogą planować zgłoszenia remontowe dotyczące tego zasobu.'@[_what],,
         'Opiekunowie'@
      );
      {? _choice>0
      || exec('rem_kato_select','zasoby',REM_ZAS.KAT)
      ?}
   ?};
   REM_ZAS.cntx_pop()
?};
{? _can_continue>0
||
   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='TRE_ZGL_AWZG';
   _args.UIDREF:=REM_ZGL.uidref();
   _args.AKCJA:='PLANUJ';
   _args.PROC_START:='N';
   _args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
      _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
      _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

   exec('mp_run','#b__box',_args);

   {? params_get().env_rem_zgl.FILTER='W' & REM_ZGL.get() & REM_ZGL.STAT_REJ<>exec('status_ended','remonty_zgloszenia')
   || REM_ZGL.f_del()
   ?}
?};
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

_can_continue:=1;
_obj:=obj_new('RESULT','REM_ZGL');
_obj.RESULT:=0;
_obj.REM_ZGL:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=REM_ZGL.name()
         || _obj.REM_ZGL:=exec('FindAndGet','#table',REM_ZGL,_kref,,,null());

            {? _obj.REM_ZGL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc robię error
               _can_continue:=0;
               exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp)
            ||
               {? _mp.akcja()<>'PLANUJ'
               ||
::                Sprawdzenie statusu rejestracji zgłoszenia, jeżeli równy 'verified' albo 'closed', to popychanie
                  _stat_verified:=exec('status_verified','remonty_zgloszenia');
                  _stat_closed:=exec('status_closed','remonty_zgloszenia');
                  _stat_rej:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"STAT_REJ",_stat_verified);
                  {? _stat_rej=_stat_verified | _stat_rej=_stat_closed
                  || _can_continue:=0;
                     FUN.info('Weryfikacja zgłoszenia remontowego została już zakończona.'@);
                     _out.RESULT:={? REM_ZGL.WERYFIK='T' || 'POTWIERDZENIE' || 'ODRZUCENIE' ?};
                     _mp.save(,_out);
                     _mp.done()
                  ?}
               ?}
            ?}
         ?}
      ||
::       Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc robię error
         _can_continue:=0;
         exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp)
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy REM_ZGL
   {? _obj.REM_ZGL=null() & var_pres('REM_ZGL',_in)=type_of(null())
   || _obj.REM_ZGL:=_in.REM_ZGL
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj


:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 4fe2b1f10118e1e11f14d7c36260448de33573372bed021483044e0e86ea2d67d12c282236f5413fc31cacf861977c9ca5f549dc73c72af6d450bb8166ef77ce2d13055c76a42bb630f6eae9b1b5944bdaaf03b733eb96733ad7b1761d3d9665088d2b80687c64866c9f7ea385830060cf698963c75fe15cd0cfd39680088fe0
