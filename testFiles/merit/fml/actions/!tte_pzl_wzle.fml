:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_wzle.fml
:: Utworzony: 18.04.2017
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_WZLE - Wybór zlecenia / zleceń
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Formuła główna czynności wyboru zlecenia / zleceń (TTE_PZL_WZLE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;

::# permissions=ODDZ

::# properties=SERVICE,LOOP

:: PARAMETRY WE:
::# kind=WE, symbol=WP, type=STRING, name=Warsztatowe/produkcyjne, required=N, fml_val="exec('wp_select','zl_head')"
{? var_pres('WP',_in)<>type_of(~~) & var_pres('WP',_in)<>type_of('') || return() ?};
{? var_pres('WP',_in)=type_of(~~) || _in.WP:='' ?};
::# kind=WE, symbol=STAN, type=STRING, name=Stan zlecenia, required=N, fml_val="exec('stan_select','zl_head')"
{? var_pres('STAN',_in)<>type_of(~~) & var_pres('STAN',_in)<>type_of('') || return() ?};
{? var_pres('STAN',_in)=type_of(~~) || _in.STAN:='' ?};
::# kind=WE, symbol=ZTP, type=_ZTP, name=Typ zlecenia, required=N, fml_val="exec('ztp_select','zl_head','',0)", fml_exp="exec('ztp_export','zl_head',_a)"
{? var_pres('ZTP',_in)<>type_of(~~) & var_pres('ZTP',_in)<>type_of(null()) || return() ?};
{? var_pres('ZTP',_in)=type_of(~~) || _in.ZTP:=null() ?};
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null()) || return() ?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};
::# kind=WE, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
{? var_pres('GRP_KEY',_in)<>type_of(~~) & var_pres('GRP_KEY',_in)<>type_of('') || return() ?};
{? var_pres('GRP_KEY',_in)=type_of(~~) || _in.GRP_KEY:='' ?};
::# kind=WE, symbol=WIELE, type=STRING, name=Wybór wielu zleceń, required=N, keyref=N, fml_val="exec('edit_boolean','#edit',,'Czy umożliwić wybór wielu zleceń?'@)"
{? var_pres('WIELE',_in)<>type_of(~~) & var_pres('WIELE',_in)<>type_of('') || return() ?};
{? var_pres('WIELE',_in)=type_of(~~) || _in.WIELE:='' ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N
{? var_pres('GRP_KEY',_out)<>type_of(~~) & var_pres('GRP_KEY',_out)<>type_of('') || return() ?};

_wiele:={? (1+(~-_in.WIELE))='T' || 'T' || 'N' ?};

:: Ustawiam wartość domyślną argumentu LOOP żeby brama się nie zawiesiła
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

_clean_result:=params_exec('clean','!tte_pzl_wzle',_mp,_in);
{? ~_clean_result.RESULT
|| return()
?};

:: Sprawdzenie zakresu (warsztatowe/produkcyjne)
{? _in.WP='' & _in.GRP_KEY='' & _in.GRPKEY='' & ~_in.ZL
|| _msg:=
      'Niezgodność wywołania czynności.\n'
      'Zlecenie, zakres (warsztatowe/produkcyjne) albo klucz grupujący musi być podany.'@@;
   FUN.emsg(_msg);
   _mp.error(_msg);
   return()
?};

{? _in.WP<>'' & _in.ZL
|| _msg:=
      'Niezgodność wywołania czynności.\n'
      'Zlecenie i zakres (warsztatowe/produkcyjne) nie mogą być jednocześnie podane.'@@;
   FUN.emsg(_msg);
   _mp.error(_msg);
   return()
?};

:: Sprawdzenie zlecenia
{? _in.ZL
|| {? exec('FindAndGet','#table',ZL,_in.ZL,,"RODZAJ",'')='P'
   || _msg:=
         'Niezgodność wywołania czynności.\n'
         'Przekazane zlecenie musi być zleceniem złożonym z półfabrykatami albo niezależnym.'@@;
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   ?}
?};

:: Sprawdzenie typu zlecenia
{? _in.ZTP
|| {? exec('FindAndGet','#table',ZTP,_in.ZTP,,"1+TYP",'')='~'
   || _msg:='Niezgodność wywołania czynności.\nPrzekazany typ nie może być zastrzeżony.'@@;
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   |? _in.ZL & _in.ZTP<>exec('FindAndGet','#table',ZL,_in.ZL,,"TYP",null())
   || _msg:='Niezgodność wywołania czynności.\nPrzekazany typ musi być zgodny w typem przekazanego zlecenia.'@@;
      FUN.emsg(_msg);
      _mp.error(_msg);
      return()
   ?}
?};

_dialog:=_mp.isAutoRun()=0 & _mp.isService()=0;

_key:=_out.GRP_KEY:=_out.GRPKEY:=_mp.grpkey(_out.GRPKEY,{? _in.GRP_KEY<>'' || _in.GRP_KEY || _in.GRPKEY ?});

_gen:=0;

{? _mp.loop()=0
||
   {? _key<>''
   ||
::    Rozpoczynam generowanie
      ZL.cntx_psh();
      ZL.clear();

      {? _in.WP<>''
      || _join:='join ZTP';
         _where:=
            'ZTP.WP='':_a'' and '+
            {? _in.STAN<>'' || 'ZL.STAN='':_b'' and ' || '' ?}+
            {? _in.ZTP<>null() || 'ZL.TYP=:_c and ' || '' ?}+
            '1=1';
         ZL.f_set('SYM',_join,_where,_in.WP,_in.STAN,_in.ZTP)
      || _join:='join ZTP';
         _where:='ZL.NRNZL=:_a';
         ZL.f_set('SYM',_join,_where,exec('FindAndGet','#table',ZL,_in.ZL,,"UNRZL",0))
      ?};

      {? _dialog
      || exec('icons_slo_sl','zl_head');
         ZL.win_sel('SLO_SL');
         ZL.actions('SLO_SL',{? _wiele='T' || 'WX' || 'WY' ?},{? _wiele='T' || 'Y' || 'X' ?});
         _ref_table:=exec('ref_table','#table');
         params_set('ref_table',_ref_table);
         {? ZL.select()
         || _gen:=1;
            _tab:=_ref_table.tab;
            _tab.index(_ref_table.ndxLp);
            {? _tab.first()
            || {!
               |? _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_tab.SQL,,"uidref()",''));
                  _tab.next()
               !}
            ?}
         ?}

      || {? ZL.f_first()
         || _gen:=1;
            {!
            |? _mp.grpkeyAdd(ZL.uidref());
               ZL.f_next()
            !}
         ?}
      ?};

      ZL.f_clear();
      ZL.cntx_pop()
   ?}
|| _gen:=1
?};

{? _key<>''
||
   _zl_uidref:=_mp.grpkeyGet();
   {? type_of(_zl_uidref)=type_of('')
   ||
::    Wypycham pierwsze zlecenie na wyjście
      ZL.cntx_psh();
      ZL.prefix();
      {? ZL.seek(_zl_uidref)
      || do();
         _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
         _mp.save(exec('kind_out','#b_port'),'GRP_KEY',_key);
         _mp.save(exec('kind_out','#b_port'),'GRPKEY',_key);
         _mp.grpkeyDel();
         end();

::       Jeżeli są jeszcze jakieś zlecenia to kontynuuję pętlę
         _zl_uidref:=_mp.grpkeyGet();
         {? type_of(_zl_uidref)=type_of('')
         || _mp.loop_continue()
         ?}
      ?};
      ZL.cntx_pop()
   ?};

   {? _gen>0 || _mp.done() ?}

|| _mp.error('Brak wymaganego parametru %1 lub %2.'@@['GRP_KEY','GRPKEY'])
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.28]
:: OPIS: Opis dla czynności wyboru zlecenia / zleceń (TTE_PZL_DWLE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='Wybierz zlecenie'@@;

_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest parametr wejściowy ZL, to opis dla zlecenia
{? var_pres('ZL',_in)>0
|| _tmp:=exec('FindAndGet','#table',ZL,_in.ZL,,"SYM",'');
   _desc:={? _tmp<>'' || 'Wybierz podzlecenia zlecenia %1'@@[_tmp] || _desc ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_in.ZL,,"'Wybierz podzlecenia zlecenia %1'[SYM]",_desc)

:: nie ma ZL, a jest rekord kluczowy to ustawiam odpowiednie ZL
|? var_pres('[1]',_keyRefs)>0
|| _tmp:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Wybierz podzlecenia zlecenia %1'@@[_tmp] || _desc ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"'Wybierz podzlecenia zlecenia %1'[SYM]",_desc)

:: jest parametr WP, to opis ogólny (i nie będzie uszczegóławiany)
|? var_pres('WP',_in)>0
|| {? _in.WP='W'
   || _desc:='Wybierz zlecenie warsztatowe'@@
   |? _in.WP='P'
   || _desc:='Wybierz zlecenie produkcyjne'@@
   ?}

?};

_desc


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR')

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:21 af7b1fa674df7e17a84472a4cd23c71fd3700aef1cbb72fab9fe4d03b0ff1dbf073168e0ad7786846b33674f4827040fe51a0926dc9f249de171c9e9ee3ada15b9deced61f32d5b528434b52f15eb3d644d8148c8ce95291b2619e9813f1a8358ccd97b4051ae4fd5565249068cb41233dc841a901fab062db6f6f5ae408680f
