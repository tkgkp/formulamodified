:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dprz.fml
:: Utworzony: 17.09.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DPRZ - Rejestracja przewodnika zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności rejestracji przewodnika zlecenia (TTE_PZL_DPRZ)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ
::# properties=SERVICE
::# parses=exec('parses','!tte_pzl_dprz')

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null()) || return() ?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};
::# kind=WE, symbol=ZGH, type=_ZGH, name=Wskazanie na przewodnik zlecenia, required=N, keyref=T
{? var_pres('ZGH',_in)<>type_of(~~) & var_pres('ZGH',_in)<>type_of(null()) || return() ?};
{? var_pres('ZGH',_in)=type_of(~~) || _in.ZGH:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZGH, type=_ZGH, name=Wskazanie na przewodnik zlecenia, required=N
{? var_pres('ZGH',_out)<>type_of(~~) & var_pres('ZGH',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik działania (OK, BŁĄD)", required=N

:: Wyzwalacz, który po dodaniu nagłowka przewodnika:
:: - add/put: dodaje/aktualizuje rekord kluczowy nagłówka utworzonego przewodnika
::   del: usuwa rekord kluczowy nagłówka utworzonego przewodnika
:: - add/put: usuwa rekord kluczowy zlecenia
::   del: przywraca rekord kluczowy zlecenia
:: - add/put: zapisuje parametr wyjściowy ZGH - wskazanie na nagłówek utworzonego przewodnika
::   del: zapisuje parametr wyjściowy ZGH - null()
:: - aktualizuje opis na ToDo
_mp.trigRef('ZGH',1,1,1,exec('kind_out','#b_port'),'ZGH',exec('FindAndGet','#table',ZL,_in.ZL,,"uidref()",''));

{? _in.ZGH<>null() & _in.ZL<>null() & exec('FindAndGet','#table','ZGH',_in.ZGH,,"ZLEC",null())<>_in.ZL
|| _msg:='Niezgodność wywołania czynności.\n';
   _msg+='Zlecenie przewodnika przekazanego parametrem \'ZGH\' jest inne niż przekazane parametrem \'ZL\'.';
   {? ~_mp.isService()
   || FUN.emsg(_msg)
   ?};
   _mp.error(_msg);
   return()
?};

{? _in.ZGH || _out.ZGH:=_in.ZGH; _mp.save(,_out) ?};

ZL.cntx_psh(); ZGH.cntx_psh();
ZL.prefix(); ZGH.prefix();

_keyRefs:=_mp.getRefs();

_clean_result:=params_exec('clean','!tte_pzl_dprz',_mp,_in);
_can_continue:=_clean_result.RESULT;
_zgh:=_clean_result.ZGH;

:: jeżeli jest ZGH a nie ma ZL, to ustawiam ZL na podstawie ZGH
{? _in.ZL=null() & _zgh<>null() || _in.ZL:=exec('FindAndGet','#table',ZGH,_zgh,,"ZLEC",null()) ?};

{? _can_continue
||
:: WSTĘPNE WALIDACJE
   {? _mp.isService() & _in.ZL=null()
   || _msg:='Błędna konfiguracja procesu — nie przekazano zlecenia.'@;
      _mp.error(_msg);
      _can_continue:=0
   |? _mp.isService() & _zgh=null()
   || _msg:='Błędna konfiguracja procesu — nie przekazano przewodnika zlecenia.'@;
      _mp.error(_msg);
      _can_continue:=0
   ?};

   {? _can_continue & ZL.seek(_in.ZL)
   ||
      {? ZL.STAN='Z'
      || {? ~_mp.isService()
         || FUN.info('Zlecenie %1 jest zamknięte — czynność rejestrowania przewodnika zostaje zakończona.'@[ZL.SYM])
         ?};
         _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()

      |? ZL.TYP().WP='P' & ZL.TYP().TECH='T' & ZL.STAT_T='N'
      || _msg:='';
         {? _zgh=null()
         || _msg+='Nie można uruchomić czynności.\n'
         || _msg+='Nie można uruchomić czynności dla przewodnika %1.\n'@[exec('FindAndGet','#table',ZGH,_zgh,,"NRPRZ",'')]
         ?};
         _msg+='Rejestrowanie technologii zlecenia %1 nie zostało zakończone.'@[ZL.SYM];
         {? _mp.isService()
         || _out.RESULT:='BŁĄD';
            _mp.save(,_out);
            _mp.done()
         || {? _mp.isGroup()
            || KOMM.add(gsub(_msg,'\n',' '))
            || FUN.info(_msg)
            ?};
            _mp.cancel()
         ?}

      || VAR.A_ZLEC:=ZL.ref();

::       Dołączanie z obszaru roboczego
         {? _mp.akcja()='DOŁĄCZ'
         || _main_podzlec:=exec('main_podzlec','zl_link',ZL.ref());
            {? exec('zl_ile_part','zl_partie',_main_podzlec)>0
            || _main_sym:=exec('FindAndGet','#table',ZL,_main_podzlec,,"SYM",'');
               FUN.info('Zlecenie %1 posiada już partie — nie można dodawać ręcznie przewodników do zlecenia, należy je wygenerować.'@[_main_sym]);
               _mp.cancel()
            ||

::            Sprawdzam czy ktoś nie redaguje partii w danym momencie
               _can_continue:=1;
               _partie_locked:=0;
               {? exec('material_party','material',ZL.KTM)>0
               || {? exec('zl_lock','zl_common',ZL.ref(),'R')>0
                  || _partie_locked:=1
                  || _can_continue:=0;
                     _mp.cancel()
                  ?}
               ?};

               {? _can_continue>0
               ||
                  _ile:=exec('ile','zl_guide',ZL.ref(),ZL.IL);

                  {? ZL.TYP().WP='W' | _ile>0
                  || _env_guide:=exec('env_guide','zl_guide');
                     _env_guide.WP:=ZL.TYP().WP;
                     params_set('env_guide',_env_guide);
                     _zgh:=exec('zgh_dolacz','!tte_pzl_dprz');
                     {? _mp.isMicro()
                     || _mp.cancel()
                     |? exec('FindAndGet','#table',ZGH,_zgh,,"STAT_REJ",'N')='T'
                     || _out.RESULT:='OK';
                        _mp.save(,_out);
                        _mp.done()
                     ?}
                  || FUN.emsg('Ilość na przewodnikach nie może być większa niż na zleceniu.'@);

                     {? _mp.isMicro()
                     || _mp.cancel()
                     || _out.RESULT:='OK';
                        _mp.save(,_out);
                        _mp.done()
                     ?}
                  ?};
                  _context.ZGH:=_zgh
               ?};
               {? _partie_locked>0
               || exec('zl_unlock','zl_common',ZL.ref(),'R')
               ?}
            ?}
::       Jeżeli przewodnik jest podany na wejściu albo zachowany w keyRef - poprawianie, usuwanie, kończenie
         |? _zgh<>null() & ZGH.seek(_zgh)
         ||
            {? _mp.isAutoRun() | _mp.isService()
            || {? exec('blk_lock','#table','ZGH',_zgh)
               ||
::                Sprawdzenie, czy przewodnik posiada pozycje
                  ZGP.cntx_psh();
                  ZGP.index('PNRPP');
                  ZGP.prefix(ZGH.ref());
                  _size:=ZGP.size();
                  ZGP.cntx_pop();
                  {? _size>0
                  || ZGH.STAT_REJ:='T';
                     {? ZGH.put()
                     || _out.RESULT:='OK';
                        _mp.save(,_out);
                        _mp.done()
                     ?}
                  || _mp.keep()
                  ?};
                  exec('blk_unlock','#table','ZGH',_zgh)
               ?}

            |? _mp.pathTodo()
            || {? exec('blk_lock','#table','ZGH',_zgh,,,
                     'Przewodnik %1 jest redagowany'@[exec('FindAndGet','#table','ZGH',_zgh,,"NRPRZ",'')]
                  )
               || menu_txt(,'Popraw');
                  _env_guide:=exec('env_guide','zl_guide');
                  params_set('env_guide',_env_guide);
                  exec('zgh_popraw','!tte_pzl_dprz');
                  {? _mp.isMicro()
                  || _mp.cancel()
                  |? ZGH.STAT_REJ='T'
                  || _out.RESULT:='OK';
                     _mp.save(,_out);
                     _mp.done()
                  ?};
                  exec('blk_unlock','#table','ZGH',_zgh)
               ?}

            |? _mp.akcja()='POPRAW'
            || _env_guide:=exec('env_guide','zl_guide');
               params_set('env_guide',_env_guide);
               exec('zgh_popraw','!tte_pzl_dprz');
               {? _mp.isMicro()
               || _mp.cancel()
               |? ZGH.STAT_REJ='T'
               || _out.RESULT:='OK';
                  _mp.save(,_out);
                  _mp.done()
               ?}

            |? _mp.akcja()='USUŃ'
            || {? exec('przp_us','zl_guide')
               || _context.OK:=1;
                  _mp.cancel()
               ?}

            |? _mp.akcja()='ZAKOŃCZ'
            || _ok:=exec('spr_pdok','magdok_prod','ZGP','NNN',ZGH.ref(),'przewodnika %1'[ZGH.NRPRZ],1,0,0);
               {? _ok
               || _ok:=exec('valid_str','!tte_pzl_dprz',_zgh)
               ?};
               {? _ok
               || ZGP.cntx_psh();
                  ZGP.index('PNRPP');
                  ZGP.prefix(ZGH.ref());
                  _size:=ZGP.size();
                  ZGP.cntx_pop();
                  {? _size=0
                  || _msg:='Nie można zakończyć rejestracji przewodnika %1 — brak pozycji.'@[ZGH.NRPRZ];
                     {? _mp.isGroup()
                     || KOMM.add(_msg)
                     || FUN.info(_msg)
                     ?};
                     _ok:=0
                  || {? {? _mp.isGroup()
                        || 1
                        || FUN.ask('Czy zakończyć rejestrację przewodnika %1?'@[ZGH.NRPRZ])
                        ?}
                     || ZGH.STAT_REJ:='T';
                        {? ZGH.put()
                        || _out.RESULT:='OK';
                           _mp.save(,_out);
                           _mp.done()
                        || _ok:=0
                        ?}
                     || _ok:=0
                     ?}
                  ?}
               ?};
               _context.OK:=_ok

            ?}

::       Jeżeli znane jest tylko zlecenie, to umożliwiamy dołączenie nowego przewodnika z ToDo
         || {? _mp.pathTodo()
            ||
               _main_podzlec:=exec('main_podzlec','zl_link',ZL.ref());
               {? exec('zl_ile_part','zl_partie',_main_podzlec)>0
               || _main_sym:=exec('FindAndGet','#table',ZL,_main_podzlec,,"SYM",'');
                  FUN.info('Zlecenie %1 posiada już partie — nie można dodawać ręcznie przewodników do zlecenia, należy je wygenerować.'@[_main_sym]);
                  _out.RESULT:='OK';
                  _mp.save(,_out);
                  _mp.done()
               ||
::               Sprawdzam czy ktoś nie redaguje partii w danym momencie
                  _can_continue:=1;
                  _partie_locked:=0;
                  {? exec('material_party','material',ZL.KTM)>0
                  || {? exec('zl_lock','zl_common',ZL.ref(),'R')>0
                     || _partie_locked:=1
                     || _can_continue:=0;
                        _mp.cancel()
                     ?}
                  ?};

                  {? _can_continue>0
                  ||
                     _ile:=exec('ile','zl_guide',ZL.ref(),ZL.IL);

                     {? ZL.TYP().WP='W' | _ile>0
                     || menu_txt(,'Dołącz');
                        _env_guide:=exec('env_guide','zl_guide');
                        params_set('env_guide',_env_guide);
                        _zgh:=exec('zgh_dolacz','!tte_pzl_dprz');
                        {? exec('FindAndGet','#table',ZGH,_zgh,,"STAT_REJ",'N')='T'
                        || _out.RESULT:='OK';
                           _mp.save(,_out);
                           _mp.done()
                        ?}
                     || FUN.emsg('Ilość na przewodnikach nie może być większa niż na zleceniu.'@);
                        _out.RESULT:='OK';
                        _mp.save(,_out);
                        _mp.done()
                     ?}
                  ?};
                  {? _partie_locked>0
                  || exec('zl_unlock','zl_common',ZL.ref(),'R')
                  ?}
               ?}
            ?}
         ?}
      ?}

:: Dołączanie z obszaru roboczego - zlecenie przekazane kontekstem
   || {?  _can_continue
      || {? var_pres('_context')>100 & var_pres('ZL',_context) & type_of(_context.ZL)=type_of(null())
            & ZL.seek(_context.ZL)
         || {? ZL.TYP().WP='P' & ZL.TYP().TECH='T' & ZL.STAT_T='N'
            || _msg:='Nie można uruchomić czynności.\nRejestrowanie technologii zlecenia %1 nie zostało zakończone.'@
                     [ZL.SYM];
               FUN.info(_msg);
               _mp.cancel()

            || VAR.A_ZLEC:=ZL.ref();
               {? _mp.akcja()='DOŁĄCZ'
               || _zgh:=exec('zgh_dolacz','!tte_pzl_dprz');
                  {? _mp.isMicro()
                  || _mp.cancel()
                  || {? exec('FindAndGet','#table',ZGH,_zgh,,"STAT_REJ",'N')='T'
                     || _out.RESULT:='OK';
                        _mp.save(,_out);
                        _mp.done()
                     ?}
                  ?};
                  _context.ZGH:=_zgh

               ?}
            ?}

         || FUN.info('Niezgodność wywołania czynności. Nie ustalono parametrów ZL lub ZGH.\n'
                     'Czynność zostanie zakończona.'@);
            _out.RESULT:='BŁĄD';
            _mp.save(,_out);
            _mp.done()
         ?}
      ?}
   ?}
?};

ZL.cntx_pop(); ZGH.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności rejestracji przewodnika zlecenia (TTE_PZL_DPRZ)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest rekord kluczowy ZGH, to ustawiam odpowiednie ZGH
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=ZGH.name()
|| _tmp:=exec('FindAndGet','#table',ZGH,_keyRefs[1],,"NRPRZ",'');
   _desc:={? _tmp<>'' || 'Zakończ rejestrację przewodnika %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZGH,_keyRefs[1],,"'Zakończ rejestrację przewodnika %1'[NRPRZ]",'')

:: jest rekord kluczowy ZL, to ustawiam odpowiednie ZL
|? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=ZL.name()
|| _tmp:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przewodnik do zlecenia %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"'Zarejestruj przewodnik do zlecenia %1'[SYM]",'')

:: jest parametr wejściowy ZGH
|? var_pres('ZGH',_in)>0
|| _tmp:=exec('FindAndGet','#table',ZGH,_in.ZGH,,"NRPRZ",'');
   _desc:={? _tmp<>'' || 'Zakończ rejestrację przewodnika %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZGH,_in.ZGH,,"'Zakończ rejestrację przewodnika %1'[NRPRZ]",'')

:: jest parametr wejściowy ZL
|? var_pres('ZL',_in)>0
|| _tmp:=exec('FindAndGet','#table',ZL,_in.ZL,,"SYM",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przewodnik do zlecenia %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_in.ZL,,"'Zarejestruj przewodnik do zlecenia %1'[SYM]",'')

?};
_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Dołącz'
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_DPRZ';
_args.UIDREF:=exec('FindAndGet','#table',ZL,_env.ZL,,"uidref()",'');
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('ZL','ZGH'); _args.CONTEXT.ZL:=_env.ZL; _args.CONTEXT.ZGH:=null();
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_env.ZL);

exec('mp_run','#b__box',_args);

{? _args.CONTEXT.ZGH<>null() || ZGH.seek(_args.CONTEXT.ZGH) ?};
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Popraw'
::----------------------------------------------------------------------------------------------------------------------
{? exec('blk_lock','#table','ZGH',ZGH.ref(),,,'Przewodnik %1 jest redagowany'@[exec('record','#to_string',ZGH.ref())])
||
   {? ZGH.STAT_REJ='T'
   || {? FUN.ask('Zakończono rejestrowanie przewodnika.\n\nCzy na pewno poprawić przewodnik %1?'@[ZGH.NRPRZ])
      || _env_guide:=exec('env_guide','zl_guide');
         params_set('env_guide',_env_guide);
         exec('zgh_popraw','!tte_pzl_dprz')
      ?}

   || _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TTE_PZL_DPRZ';
      _args.UIDREF:=ZGH.uidref();
      _args.AKCJA:='POPRAW';
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZGH.ZLEC);
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGH.ref());

      exec('mp_run','#b__box',_args)
   ?};
   exec('blk_unlock','#table','ZGH',ZGH.ref())
?};
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Usuń'
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
_zgh:=ZGH.ref();
_locked:=exec('blk_lock','#table','ZGH',_zgh,,1,
   {? VAR.GRUPA='T' || '' || 'Przewodnik %1 jest redagowany'@[ZGH.NRPRZ] ?}
);
{? _locked
|| ZGH.cntx_psh();
   {? ZGH.prev() || _prev_zgh:=ZGH.ref() || _prev_zgh:=null() ?};
   ZGH.cntx_pop();

   ZL.cntx_psh();
   ZL.prefix();
   {? ZL.seek(ZGH.ZLEC)
   ||
      {? VAR.GRUPA='T' & ZL.STAN='Z'
      || KOMM.add('Nie można usunąć przewodnika %1 — zlecenie zamknięte.'@[ZGH.NRPRZ])

      |? VAR.GRUPA='T' & (ZL.TYP().WP='W' | ZL.TYP().TECH='N') & ZL.STAT_N='N'
      || KOMM.add('Nie można usunąć przewodnika %1 — nie zakończono rejestrowania nagłówka zlecenia.'@[ZGH.NRPRZ])

      |? VAR.GRUPA='T' & (ZL.STAT_N='N' | ZL.STAT_T='N') & ZL.TYP().TECH='T'
      || KOMM.add('Nie można usunąć przewodnika %1 — nie zakończono rejestrowania technologii zlecenia.'@[ZGH.NRPRZ])

      |? VAR.GRUPA='T' & ZGH.STAN='T'
      || KOMM.add('Nie usunięto oddanego przewodnika %1.'@[ZGH.NRPRZ])

::      |? ZGH.STAT_REJ='T' & VAR.GRUPA='T'
::      || KOMM.add('Nie usunięto przewodnika %1 — zakończono rejestrowanie.'@[ZGH.NRPRZ])

      |? ZGH.STAT_REJ='T'
      || {? exec('przp_us','zl_guide')
         || ZGH.seek(_prev_zgh);
            _env.ZLIM_reload:=1
         ?}

      || _args:=exec('mp_run_a','#b__box');
         _args.ACT_UID:='TTE_PZL_DPRZ';
         _args.UIDREF:=ZGH.uidref();
         _args.AKCJA:='USUŃ';
         _args.GRUPA:=VAR.GRUPA;
         _args.CONTEXT:=obj_new('OK'); _args.CONTEXT.OK:=0;
         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZGH.ZLEC);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGH.ref());

         exec('mp_run','#b__box',_args);

         {? _args.CONTEXT.OK
         || ZGH.seek(_prev_zgh);
            _env.ZLIM_reload:=1
         ?}
      ?}
   ?};
   ZL.cntx_pop();
   exec('blk_unlock','#table','ZGH',_zgh)

|| {? VAR.GRUPA='T'
   || KOMM.add('Nie można usunąć przewodnika %1 — jest redagowany.'@[ZGH.NRPRZ])
   ?}
?};
~~


\action_delete_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Rejestracja przewodnika - akcja 'Usuń' (przed grupą rekordów)
::  OLD: \zgh_usun_gpr/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_ilosc:=ZGH.sel_size();
_ilosc_oddane:=0;
_ilosc_zakonczone:=0;
_tab:=ZGH.sel_aget();
ZGH.cntx_psh();
ZGH.prefix();
{? _tab.first()
|| {!
   |? {? ZGH.seek(_tab.REF,)
      || {? ZGH.STAN='T' || _ilosc_oddane+=1
         |? ZGH.STAT_REJ='T' || _ilosc_zakonczone+=1
         ?}
      ?};
      _tab.next()
   !}
?};
ZGH.cntx_pop();

{? ZL.STAN='Z'
|| FUN.info('Nie można usunąć przewodników — zlecenie zamknięte.'@);
   0

|? (ZL.TYP().WP='W' | ZL.TYP().TECH='N') & ZL.STAT_N='N'
|| FUN.info('Nie można usunąć przewodników — nie zakończono rejestrowania nagłówka zlecenia.'@);
   0

|? (ZL.STAT_N='N' | ZL.STAT_T='N') & ZL.TYP().TECH='T'
|| FUN.info('Nie można usunąć przewodników — nie zakończono rejestrowania technologii zlecenia.'@);
   0

|? _ilosc_oddane>=_ilosc
|| FUN.info('Nie można usunąć przewodników — wszyskie zaznaczone przewodniki są oddane.'@);
   0

|? _choice:=FUN.choice(
      'Ilość zaznaczonych przewodników: %1.'@[$_ilosc]+'\n\n'+
      'Ilość nie oddanych, ale zakończonych przewodników: %1.'@[$_ilosc_zakonczone]+'\n'+
      'Ilość oddanych przewodników: %1 (nie zostaną usunięte).'@[$_ilosc_oddane]+'\n'+
      '\n'+
      'Czy usuwać?'@,,'Wszystkie nie oddane'@,'Tylko nie zakończone'@
   );
   _choice>0
|| ZGH.cntx_psh();
   ZGH.prefix();
   {? _tab.first()
   || {!
      |? {? ZGH.seek(_tab.REF,)
         || {? ZGH.STAN='T' || ZGH.sel_del()
            |? ZGH.STAT_REJ='T' || {? _choice=2 || ZGH.sel_del() ?}
            ?}
         ?};
         _tab.next()
      !}
   ?};
   ZGH.cntx_pop();

   sel_nchk();
   VAR.GRUPA:='T';
   KOMM.init(255,,'Usuwanie przewodników zlecenia'@);
   1
|| 0
?}


\action_delete_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: Rejestracja przewodnika - akcja 'Usuń' (po grupie rekordów)
::  OLD: \zgh_usun_gpo/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
~~


\action_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ' (w oknie wertowania ZGH)
::----------------------------------------------------------------------------------------------------------------------
exec('action_end_common','!tte_pzl_dprz');
~~


\action_end_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ' (w oknie wertowania ZGH) przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_ilosc:=ZGH.sel_size();
{? FUN.ask('Ilość zaznaczonych przewodników: %1.\n\nCzy zakończyć rejestrowanie?'@[$_ilosc])
|| VAR.GRUPA:='T';
   KOMM.init(255,,'Rejestrowanie przewodników zlecenia'@);
   1
|| 0
?}


\action_end_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ' (w oknie wertowania ZGH) po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
VAR.GRUPA:='N';
KOMM.select();
~~


\action_end_all
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ'
::       (w oknie wertowania ZL - dotyczy wszystkich niezakończonych przewodników zlecenia)
::----------------------------------------------------------------------------------------------------------------------
ZGH.cntx_psh();
{? ZL.RODZAJ='P'
|| ZGH.index('ZLNR');
   ZGH.prefix(ZL.ref())
|| ZGH.index('UID_VIEW');
   ZGH.prefix(ZL.uidref())
?};
{? ZGH.size()>0
|| {? FUN.ask('Czy zakończyć rejestrowanie wszystkich przewodników zlecenia %1?'@[ZL.SYM])
   || VAR.GRUPA:='T';
      KOMM.init(255,,'Rejestrowanie przewodników zlecenia'@);
      {? ZGH.first()
      || {!
         |? exec('action_end_common','!tte_pzl_dprz');
            ZGH.next()
         !}
      ?};
      VAR.GRUPA:='N';
      KOMM.select()
   ?}
|| FUN.info('Brak przewodników do zlecenia %1.'@[ZL.SYM])
?};
ZGH.cntx_pop();
~~


\action_end_button
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ' (przycisk w oknie radagowania)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

:: >> Popraw
{? menu_txt()='Popraw'
|| _ok:=exec('end','!tte_pzl_dprz');
   {? _ok
   || 'key:Esc'
   ||
::    Tu nie może zwracać pola do którego wrócić bo pola często zmieniają swoją redagowalnosć
::    w różnych przypadkach i będzie waliło błędem, że powrót do nieredagowalnego pola
      ''
   ?}

:: >> Dołącz
|| {? {? params_get().env_guide.zapisane || 1 || ZGH.add() ?}
   || {? exec('end','!tte_pzl_dprz')
      || params_get().env_guide.zapisane:=1;
         'key:Esc'
      || {? params_get().env_guide.zapisane
         || ''
         || ZGH.cntx_psh();
            ZGH.del();
            ZGH.cntx_pop();
            ''
         ?}
      ?}
   || ''
   ?}
?}


\end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja zakończ z przycisku w oknie radagowania
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_ok:=exec('spr_pdok','magdok_prod','ZGP','NNN',ZGH.ref(),'przewodnika %1'@[ZGH.NRPRZ],1,0,0);
{? _ok
|| _ok:=exec('porec_zgh','zl_guide')=''
?};
{? _ok
|| _ok:=exec('valid_str','!tte_pzl_dprz',ZGH.ref())
?};
{? _ok
|| ZGP.cntx_psh();
   ZGP.index('PNRPP');
   ZGP.prefix(ZGH.ref());
   _size:=ZGP.size();
   ZGP.cntx_pop();
   {? _size=0
   || _msg:='Nie można zakończyć rejestracji przewodnika %1 — brak pozycji.'@[ZGH.NRPRZ];
      FUN.info(_msg);
      _ok:=0
   || {? FUN.ask('Czy zakończyć rejestrację przewodnika %1?'@[ZGH.NRPRZ])
      || ZGH.STAT_REJ:='T';
         {? ~ZGH.put()
         || _ok:=0
         ?}
      || _ok:=0
      ?}
   ?}
?};
_ok


\action_end_common
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Rejestracja przewodnika - akcja 'Zakończ' (wspólna obsługa)
::----------------------------------------------------------------------------------------------------------------------
_locked:=exec('blk_lock','#table','ZGH',ZGH.ref(),,1,
   {? VAR.GRUPA='T' || '' || 'Przewodnik %1 jest redagowany'@[ZGH.NRPRZ] ?}
);
{? _locked
||
   ZL.cntx_psh();
   ZL.prefix();
   {? ZL.seek(ZGH.ZLEC)
   ||
      {? VAR.GRUPA='T' & ZL.STAN='Z'
      || KOMM.add('Nie można zakończyć rejestracji przewodnika %1 — zlecenie zamknięte.'@[ZGH.NRPRZ])

      |? VAR.GRUPA='T' & (ZL.TYP().WP='W' | ZL.TYP().TECH='N') & ZL.STAT_N='N'
      || KOMM.add('Nie można zakończyć rejestracji przewodnika %1 — nie zakończono rejestrowania nagłówka zlecenia.'@[ZGH.NRPRZ])

      |? VAR.GRUPA='T' & (ZL.STAT_N='N' | ZL.STAT_T='N' & ZL.TYP().TECH='T')
      || KOMM.add('Nie można zakończyć rejestracji przewodnika %1 — nie zakończono rejestrowania technologii zlecenia.'@[ZGH.NRPRZ])

      || _args:=exec('mp_run_a','#b__box');
         _args.ACT_UID:='TTE_PZL_DPRZ';
         _args.UIDREF:=ZGH.uidref();
         _args.AKCJA:='ZAKOŃCZ';
         _args.GRUPA:=VAR.GRUPA;
         _args.CONTEXT:=obj_new('OK'); _args.CONTEXT.OK:=0;
         _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZGH.ZLEC);
         exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZGH',ZGH.ref());

         exec('mp_run','#b__box',_args);

         exec('blk_unlock','#table','ZGH',ZGH.ref());
         _args.CONTEXT.OK
      ?}
   ?};
   ZL.cntx_pop()

|| {? VAR.GRUPA='T'
   || KOMM.add('Nie można zakończyć rejestracji przewodnika %1 — jest redagowany.'@[ZGH.NRPRZ])
   ?};
   0
?}


::======================================================================================================================
:: Obsługa tabeli ZGH - akcje, pola
::======================================================================================================================


\zgh_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dołączenie nagłówka przewodnika
::   WY: ZGH.ref() / null()
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_zgh:=exec('zghx_pdol','!tte_pzl_dprz');
{? _zgh<>null()
|| VAR.A_NRPRZ:=_zgh
?};
_zgh


\zghx_pdol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2009]
:: OPIS: Obsługa na akcję 'Dołącz'. Wywoływana jako: Formuła --- przed
::   WY: ZGH.ref() / null()
::  OLD: \zghx_pdol/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_guide:=params_get().env_guide;

_zgh:=null();
_wp:=ZL.TYP().WP;

ZGH.cntx_psh();
ZGH.prefix();
ZGH.blank();
ZGH.UID:=exec('uid','#blank');
ZGH.UID_VIEW:=exec('FindAndGet','#table',ZL,exec('top_level','zl_link',ZL.ref()),,"uidref()",'');
ZGH.GKTL:=exec('gktl_from_zl','zl_common',ZGH.ZLEC);
ZGH.win_edit('RED'+_wp);
_przed:=exec('przeddol','zl_guide');
{? _przed
|| ZGH.ILNPRZ:=_env_guide.ilosc;
   exec('zgh_btn_eopt','!tte_pzl_dprz');
   {? ZGH.edit("params_exec('porec_zgh','zl_guide')")
   || {? {? _env_guide.zapisane || ZGH.put() || ZGH.add() ?}
      || _zgh:=ZGH.ref()
      ?}
   || {? _env_guide.zapisane || _zgh:=ZGH.ref() ?}
   ?}
?};
ZGH.cntx_pop();
_zgh


\zgh_btn_eopt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Ustawia opcje przycisków okna redagowania nagłówka przewodnika
::----------------------------------------------------------------------------------------------------------------------
{?
::menu_txt()='Dołącz' |
   ZGH.STAT_REJ='T'
|| ZGH.btn_eopt('REDP','DALEJ','state=grayed');
   ZGH.btn_eopt('REDW','DALEJ','state=grayed')
|| ZGH.btn_eopt('REDP','DALEJ','state=normal');
   ZGH.btn_eopt('REDW','DALEJ','state=normal')
?};
{?
::menu_txt()='Dołącz'
   0
|| ZGH.btn_eopt('REDP','POZYCJE','state=grayed');
   ZGH.btn_eopt('REDW','POZYCJE','state=grayed')
|| ZGH.btn_eopt('REDP','POZYCJE','state=normal');
   ZGH.btn_eopt('REDW','POZYCJE','state=normal')
?};
~~


\zgh_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'OK' w oknie redagowania nagłówka zlecenia
::----------------------------------------------------------------------------------------------------------------------
'key:F2'


\zgh_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Poprawienie nagłówka przewodnika
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_res:=0;
_wp:=exec('FindAndGet','#table',ZL,ZGH.ZLEC,,"TYP().WP",'W');
ZGH.win_edit('RED'+_wp);
{? exec('ppopr_zgh','!tte_pzl_dprz')
|| exec('prepzch','zl_guide');
   exec('zgh_btn_eopt','!tte_pzl_dprz');
   {? ZGH.edit("params_exec('porec_zgh','zl_guide')") & ZGH.put()
   || _res:=1;
      exec('popopr_zgh','!tte_pzl_dprz')
   ?}
?};
_res


\ppopr_zgh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Przed 'popraw' nagłówka przewodnika
::  OLD: \ppopr_zgh/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_guide:=params_get().env_guide;

ZL.cntx_psh();

_komm:=0;
{? _komm=0 & exec('zgh_utilization','po_plan',1,ZGH.ref())>0
|| FUN.info('Nie można modyfikować przewodnika zaplanowanego w planie operacyjnym.'@);
   _komm:=1;
   _env_guide.zgp_actions:='DUP:D'
?};
{? _komm=0 & exec('zgh_utilization','px_plan',ZGH.ref())=1
|| FUN.info('Nie można modyfikować przewodnika do zlecenia zaplanowanego w planie strategicznym.'@);
   _komm:=1;
   _env_guide.zgp_actions:='DUP:D'
?};
{? ZGH.STAN='N'
|| _env_guide.ilosc:=ZGH.ILNPRZ;
   _res:=1
|| FUN.info('Nie można modyfikować już oddanego przewodnika.'@);
   _res:=0
?};

ZL.cntx_pop();
_res


\popopr_zgh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Po 'popraw' nagłówka przewodnika
::  OLD: \popopr_zgh/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_guide:=params_get().env_guide;

:: Wpis do dziennika dla zakończonego przewodnika
{? ZGH.STAT_REJ='T' & ZGH.ILNPRZ<>0 & _env_guide.ilosc<>ZGH.ILNPRZ
|| exec('add_mod_pos','zl_common','mr','Mod.il.na przewodn.' +form(ZGH.NRPRZ)+' z: '+form(_env_guide.ilosc)+ ' na ' +form(ZGH.ILNPRZ))
?};

:: Modyfikacje wszystkich pozycji przewodników
{? ZGH.ILNPRZ<>0 & _env_guide.ilosc<>ZGH.ILNPRZ
|| exec('mod_poz','zl_guide',ZGH.ILNPRZ/_env_guide.ilosc,ZGH.ILNPRZ)
?};

exec('akt_zgp_plany','zl_guide',ZGH.ref());
~~


\bl_zgh_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2011]
:: OPIS: Wartość początkowa dla ZGH.ZLEC
::  OLD: \bl_zgh_zl/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? -(6+menu_txt)='szukaj' & cur_tab()=ZLGD
|| ZLGD.ZL
|| ZL.ref()
?}


\ilnprzpw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2009]
:: OPIS: Obsługa przed wyświetleniem pola ZGH.ILNPRZ
::  OLD: \ilnprzpw/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? (ZGH.win_sel('?')='SEL' & ZL.RODZAJ<>'P' & ZL.NRNZL=0) | ZL.TYP().WP='W'
|| exec('findfnrd','color')
|| 1
?}


\ilnprzpr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2009]
:: OPIS: Obsługa przed redagowaniem pola ZGH.ILNPRZ
::  OLD: \ilnprzpr/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? params_get().env_guide.zapisane || menu_txt(,'Popraw') ?};

VAR.REAL:=ZGH.ILNPRZ;
::~(var_pres('zghn') > 0 & zghn.NRPRZ=ZGH.NRPRZ);
_result:=1;

ZL.cntx_psh();
{? ZGH.ZLEC().TYP().WP='W'
|| _result:=0
|? ZL.STAN<>'N'
|| _result:=0
?};
ZL.cntx_pop();

{? _result>0 & -~menu_txt()='popraw'
||
:: Na podstawie przewodnika zostały utworzone przewodniki potomne
   {? _result>0 & exec('zgh_inherited','zl_guide',ZGH.ref())>0
   || _result:=0
   ?};

:: Przewodnik utworzony na podstawie innego przewodnika
   {? _result>0 & ZGH.UID_SRC<>''
   || ZGH.cntx_psh();
      ZGH.index('UID');
      ZGH.prefix(ZGH.UID_SRC);
      {? ZGH.first()
      || _result:=0
      ?};
      ZGH.cntx_pop()
   ?};

:: Przewodnik w planie operacyjnym
   {? _result>0 & exec('zgh_utilization','po_plan',1,ZGH.ref())>0
   || _result:=0
   ?};

:: Przewodnik w planie strategicznym
   {? _result>0 & exec('zgh_utilization','px_plan',ZGH.ref())>0
   || _result:=0
   ?};

:: Kontrola zapotrzebowań
   {? _result>0 & exec('zgh_zlim_nact','zl_guide',ZGH.ref())>0
   || _result:=0
   ?}
?};

_result


\porilprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2011]
:: OPIS: Po redakcji pola ilość na nagłówku przewodnika
::  OLD: \porilprz/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? params_get().env_guide.zapisane || menu_txt(,'Popraw') ?};

_ile:=exec('ile','zl_guide',ZL.ref(),ZL.IL);
_seria:=exec('seria_koop','zl_guide',_ile);
roundmet(2);
_dokl:=exec('jaka_dok_m','jm',ZL.KTM);
_ilenprz:=fld();

_ilosc:=0;
ZGH.cntx_psh();
ZGH.get();
_inherited:=0;
{? menu_txt()='Popraw'
|| _razem:=-ZGH.ILNPRZ;
   _inherited:=exec('zgh_inherited','zl_guide')
|| _razem:=0
?};
ZGH.index('ZLNR');
ZGH.prefix(ZL.ref());
{? ZGH.first()
|| {!
   |? _ilosc+=1;
      _razem+=ZGH.ILNPRZ;
      ZGH.next()
   !}
?};
ZGH.cntx_pop();
:: Tyle bedzie w sumie na przewodnikach gdyby zatwierdzic ten rekord
_razem+=fld();

{? fld()<=0
|| FUN.info('Wpisz ilość większą od zera.'@);
   _res:=0
|? _razem>ZL.IL
|| FUN.emsg('Łączna ilość na przewodnikach (%1) nie może być większa niż na zleceniu (%2).'@[$_razem,$ZL.IL]);
   _res:=0
|? _ile=0
|| _res:=1
|? fld()>_ile+VAR.REAL
|| FUN.info('Ilość nie może być większa niż %1.'@[$(_ile+VAR.REAL)]);
   fld():=_ile;
   _res:=0
|? _seria<>0 & fld()<>_seria
|| {? FUN.ask(
         'Przewodnik zawiera operacje zewnętrzne.\n'
         'Czas realizacji takich operacji (ilość dni) został zdefiniowany dla serii: %1 %2\n\n'
         'Wygenerowanie przewodnika dla innej serii może wymagać poprawienia pozycji przewodnika.\n\n'
         'Czy kontynuować?'@[form(_seria),ZL.KTM().J().KOD]
      )
   || _res:=1
   || _res:=0
   ?}
|? menu_txt()<>'Popraw' & 0=(pow(10,ZL.TYP().ILE_PRZ)-1-_ilosc)
|| FUN.info('Maksymalna liczba przewodników to: %1.'@[form(pow(10,ZL.TYP().ILE_PRZ)-1-_ilosc)]);
   _res:=0
|| _res:=1
?};
{? _res>0 & _inherited>0 & ZGH.ILNPRZ<>VAR.REAL
|| FUN.info('Na podstawie przewodnika: %1 wygenerowano przewodniki na innych podzleceniach.\n'
            'Poprawianie ilości niedozwolone.'@[ZGH.NRPRZ]
   );
   _res:=0
?};
{? _res>0 & menu_txt()='Popraw' & ZGH.UID_SRC<>'' & ZGH.ILNPRZ<>VAR.REAL
|| ZGH.cntx_psh();
   ZGH.index('UID');
   ZGH.prefix(ZGH.UID_SRC);
   {? ZGH.first()
   || FUN.info('Przewodnik utworzono na podstawie przewodnika: %1. Poprawianie ilości niedozwolone.'@[ZGH.NRPRZ]);
      _res:=0
   ?};
   ZGH.cntx_pop()
?};
_res


\zgh_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pól w tabeli ZGH: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK
::   WY: 0 / 1 / kolor
::  OLD: \zgh_fld_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD'
||
   {? ZGH.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGH.STARTD<date()
   || exec('flddisp','color','ZGH#STARTD#01')
   || 1
   ?}
|? cur_afld()='STARTT'
||
   {? ZGH.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGH.STARTD<date() | ZGH.STARTD=date() & ZGH.STARTT<time())
   || exec('flddisp','color','ZGH#STARTT#01')
   || 1
   ?}
|? cur_afld()='ENDD'
||
   {? ZGH.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGH.ENDD<date()
   || exec('flddisp','color','ZGH#ENDD#01')
   || 1
   ?}
|? cur_afld()='ENDT'
||
   {? ZGH.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGH.ENDD<date() | ZGH.ENDD=date() & ZGH.ENDT<time())
   || exec('flddisp','color','ZGH#ENDT#01')
   || 1
   ?}
||
   1
?}


\zgh_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed redakcja pol w tabeli ZGH: STARTD, STARTT, ENDD, ENDT, FIX_NORM
::   WY: 0 / 1
::  OLD: \zgh_fld_be/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('zgh_utilization','po_plan',1,ZGH.ref())>0
||
:: Jeżeli w planie operacyjnym, to nieredagowalne
   0
|? exec('zgh_utilization','px_plan',ZGH.ref())=1
||
:: Jeżeli w planie strategicznym, to nieredagowalne
   0
||
   {? cur_afld()='STARTT'
   || ZGH.STARTD<>date(0,0,0)
   |? cur_afld()='ENDT'
   || ZGH.ENDD<>date(0,0,0)
   |? cur_afld()='FIX_NORM'
   || {? ZGP.TOPER<>null() || 0 || 1 ?}
   || 1
   ?}
?}


\zgh_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redakcji pól w tabeli ZGH: STARTD, STARTT, ENDD, ENDT, FIX_NORM
::   WY: 0 / 1
::  OLD: \zgh_fld_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD' & fld()=date(0,0,0)
|| ZGH.STARTT:=time(0,0,0)
|? cur_afld()='ENDD' & fld()=date(0,0,0)
|| ZGH.ENDT:=time(0,0,0)
?};

{? cur_afld()='STARTT' | cur_afld()='ENDT'
|| exec('valid_time','#field',fld())
|| 1
?}


\zgh_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyświetlania pól w tabeli ZGH: STARTD, STARTT, ENDD, ENDT, ILNPRZ
::   WY: STRING
::  OLD: \zgh_fld_fd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? (cur_afld()='STARTD' | cur_afld()='ENDD') & fld()=date(0,0,0)    || _format:='empty=1'
|? cur_afld()='STARTT' & ZGH.STARTD=date(0,0,0) & fld()=time(0,0,0) || _format:='empty=1'
|? cur_afld()='ENDT' & ZGH.ENDD=date(0,0,0) & fld()=time(0,0,0)     || _format:='empty=1'
|? ZGH.ZLEC();
   cur_afld()='ILNPRZ' &
   (ZL.TYP().WP='W' | ZL.RODZAJ='N' & ZL.NRNZL=0)                   || _format:='empty=1'
                                                                    || _format:='empty=0'
?};

{? cur_afld()='ILNPRZ'
|| _format+=',out_prec='+{? (2+cur_kwin())='e_' || $ZGH.ZLEC().KTM().DOKL || $ST.DOKL_P ?}
?};

_format


\zgh_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format redagowania pól w tabeli ZGH: STARTD, STARTT, ENDD, ENDT, ILNPRZ
::   WY: STRING
::  OLD: \zgh_fld_fe/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='ILNPRZ'
|| 'in_prec='+$ZGH.ZLEC().KTM().DOKL
|| ''
?}


\renumber
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Renumeracja przewodników
::       Kontekst wywołania - aktualna dziedzina tabeli ZGH
::  OLD: \renumber/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
ZGH.cntx_psh();
_size:=0;
{? ZGH.first()
|| {!
   |? _zlgd:=exec('zlgd_zgh','zl_guide',$ZGH.ref());
      _size+=_zlgd.size();
      obj_del(_zlgd);
      ZGH.next()
   !}
?};

{? _size>0
|| FUN.info('Nie można przenumerować przewodników, ponieważ są już częściowo zarejestrowane.'@)
|| {? FUN.ask('Czy na pewno przenumerować przewodniki?'@)
   || _lp:=1;
      {? ZGH.first()
      || {!
         |? ZGH.NRPRZ:=VAR.A_ZLEC().SYM+ZL.TYP().SEP_PRZ+form(_lp,-ZL.TYP().ILE_PRZ,,'99');
            _lp+=1;
            ZGH.put();
            ZGH.next()
         !}
      ?}
   ?}
?};

ZGH.cntx_pop();
~~


\zgh_trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Trigger przed 'add' dla tabeli ZGH
::----------------------------------------------------------------------------------------------------------------------
ZGH.DT:=date();
1


\zgh_trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Trigger po 'put' ustawia ZGP.STATUS
::  OLD: \ZGH/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
exec('update_zgp','zl_guide','put',ZGH);
~~


\zgh_poz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Selekcja pozycji z poziomu okna redagowania nagłówka przewodnika
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_res:=exec('porec_zgh','zl_guide');

{? _res=''
|| {? menu_txt()='Popraw'
   || {? ZGH.put()
      || exec('popopr_zgh','!tte_pzl_dprz');
         params_get().env_guide.ilosc:=ZGH.ILNPRZ;
         exec('przh_poz','zl_guide',0)
      ?}
   || {? {? params_get().env_guide.zapisane || ZGH.put() || ZGH.add() ?}
      || {? params_get().env_guide.zapisane || exec('popopr_zgh','!tte_pzl_dprz') ?};
         menu_txt(,'Popraw');
         params_get().env_guide.zapisane:=1;
         params_get().env_guide.ilosc:=ZGH.ILNPRZ;
         exec('przh_poz','zl_guide',0)
      ?}
   ?}
|| _res:='edit:'+_res
?};
_res


\przh_back
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
:: OPIS: Zwrot przewodnika (oznaczenie, że został oddany)
::  OLD: \przh_back/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
_zmien:=0;
ZL.cntx_psh();
{? ZL.seek(ZGH.ZLEC)
||
   {? ZL.RODZAJ='P'
   || _zmien:=1
   |? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
:: odnalezienie przewodników potomnych
   ||
:: jak nie oddany, to oddaj całą rodzinę
      {? FUN.ask('Czy oddać przewodnik %1 (realizacja została już zakończona)?'@[ZGH.NRPRZ])
      || ZGH.STAN:='T';
         ZGH.put();
         ZGH.cntx_psh();
         ZGH.clear();
         _tab:=sql('SELECT DISTINCT nrzlp FROM Zgp WHERE Zgp.nrprz = :_a',ZGH.ref());
         {? _tab.first()
         || {!
            |? _zz:=BIT.sqlint(_tab.NRZLP);
               ZGH.seek(_zz,);
               ZGH.STAN:='T';
               ZGH.put();
               _tab.next()
            !}
         ?};
         FUN.info('Zmieniono stan wszystkich przewodników podrzędnych.'@);
         ZGH.cntx_pop()
      ?}
   ?};
   {? _zmien
   || {? FUN.ask('Czy oddać przewodnik %1 (realizacja została już zakończona)?'@[ZGH.NRPRZ])
      || ZGH.STAN:='T';
         ZGH.put()
      ?}
   ?}
?};
ZL.cntx_pop();
~~


\przh_return
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przywrócenie przewodnika
::----------------------------------------------------------------------------------------------------------------------
_zmien:=0;
ZL.cntx_psh();
{? ZL.seek(ZGH.ZLEC)
||
   {? ZL.RODZAJ='P'
   || {? ZGH.ILGEN>0
:: czy nie raportowano produkcji
      || _zmien:=FUN.ask(
            'Dla przewodnika %1 zostały już wygenerowane raporty produkcji.\n'
            'Czy umożliwić zmianę zatwierdzenia?'@[ZGH.NRPRZ])
      || _zmien:=1
      ?}
   |? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
   ||
::    jak oddany, to odtwierdzić mogę zawsze
      _zmien:=1
   ?};

   {? _zmien
   || {? FUN.ask('Czy przywrócić przewodnik %1 do realizacji?'@[ZGH.NRPRZ])
      || {? ZL.RODZAJ<>'P'
         || FUN.info('Stan przewodników podrzędnych należy zmienić osobno.'@)
         ?};
         ZGH.STAN:='N';
         {? ZGH.put()
         || exec('recover_sta_zgh','zl_guide',ZGH.ref())
         ?}
      ?}
   ?}
?};
ZL.cntx_pop();
~~


::======================================================================================================================
:: Obsługa tabeli ZGP - pola
::======================================================================================================================


\ifnzoper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Przed redagowaniem pól w tabeli ZGP: PFAZ, OPIS, BRYG, PLNH, PO
::   WY: 0 / 1
::  OLD: \ifnzoper/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_cur_afld:=cur_afld();
{? _cur_afld='OPIS' | _cur_afld='BRYG'
|| 1
|| ZGP.TOPER=null()
?}
& exec('predr_st','!tte_pzl_dprz')


\ifozoper
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2010]
:: OPIS: Przed redagowaniem pól w tabeli ZGP: NTIME
::   WY: 0 / 1
::  OLD: \ifozoper/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_cur_afld:=cur_afld();
{? _cur_afld='NTIME'
|| 1
|| ZGP.TOPER=null()
?}
& exec('predr_st','!tte_pzl_dprz') | ZGP.WEW='N'


\predr_st
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Przed redakcją pól na pozycji przewodnika - c.d.
::       Wołane z exec('ifnzoper','zl_guide'), exec('ifozoper','zl_guide')
::   WY: 0 / 1
::  OLD: \predr_st/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.NRZLP().ZLEC().STAN='O'
|| {? -menu_txt()<>'popraw' | exec('spr_akord','zl_guide')=1 | exec('get','#params',500631,2)='N'
   || _red:=1
   || _red:=0
   ?}
|| _red:=1
?};

{? -menu_txt()='popraw' & _red & cur_afld()='BRYG'
|| _tpz_ref:=exec('tpz_ref','zl_guide',ZGP.ref());
   _red:=exec('spr_kap','zl_guide') & exec('spr_kap','zl_guide',_tpz_ref) &
         exec('spr_akord','zl_guide') & exec('spr_akord','zl_guide',_tpz_ref)
?};

{? _red
||
   {? ZGP.GRUPA<>null()
   || exec('twrkplc_filter_grp','zasoby')
   || exec('twrkplc_filter_wye','zasoby')
   ?};
   1
|| 0
?}


\placaxjm
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Przed redagowaniem pola ZGP.PLNX
::  OLD: \placaxjm/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.TOPER=null()
|| ZGP.PLNX:=ZGP.NTIME*ZGP.PLNH
|| 0
?}


\ae_ntimg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2009]
:: OPIS: Po redakcji pola norma czasowa.
::  OLD: \ae_ntimg/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()>=0
|| ZGP.PLNX:=ZGP.NTIME*ZGP.PLNH;
   exec('zgp_efld_opt','zl_guide');
   1
|| FUN.emsg({? ZGP.WEW='N'
            || 'Norma czasowa musi być dodatnia.'@
            || 'Norma czasowa musi być nieujemna.'@
            ?}
   );
   0
?}


\ae_mtimg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pola czas maszynowy
::----------------------------------------------------------------------------------------------------------------------
{? fld()>=0
|| exec('zgp_efld_opt','zl_guide');
   1
|| FUN.emsg('Czas maszynowy musi być nieujemny.'@);
   0
?}


\ae_pfaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: po redakcji pola ZGP.PFAZ
::  OLD: \ae_pfaz/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.PFAZ<>null & VAR.A_PFAZ<>ZGP.PFAZ & VAR.A_WYD<>ZGP.PFAZ().WYD & ZGP.PFAZ().WYD<>null
|| ZGP.GRUPA:=null();
   ZGP.PLACE:=null()
?};
VAR.A_PFAZ:=fld();
VAR.A_WYD:=VAR.A_PFAZ().WYD;
1


\zgp_place_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redakcji pola ZGP.PLACE
::  OLD: \zgp_place_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.TOPER<>null()
|| {? -menu_txt()='popraw' & ~exec('zgp_utilization','po_ogr',1,ZGP.ref())
   ||
      {? ZGP.PLACE<>null() & ZGP.PL_GRP<>ZGP.PLACE().PL_GRP
      || {? ZGP.PLACE().PL_GRP='T'
         || {? FUN.ask(
                  'Stanowisko z możliwością planowania grupowego.\n'
                  'Czy zmienić w definicji operacji?'@
               )
            || ZGP.PL_GRP:='T'
            ?}
         || {? FUN.ask(
                  'Stanowisko bez możliwości planowania grupowego.\n'
                  'Czy zmienić w definicji operacji?'@
               )
            || ZGP.PL_GRP:='N'
            ?}
         ?}
      || ZGP.PL_GRP:=ZGP.PLACE().PL_GRP
      ?}
   ?}
?};
1


\zgp_nrzlp_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Przed wyświetleniem pola ZGP.NRZLP
::  OLD: \zgp_nrzlp_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? 5+cur_nfld()='Ilość' & ZGP.NRZLP().ZLEC().TYP().WP='W'
|| exec('findfnv','#color')
|? cur_nfld()='Zapotrzebowanie dla' & ZK_P.ZLIM=null()
|| exec('findfnv','#color')
|| ''
?}


\zgp_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyswietleniem pol w tabeli ZGP: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK, ILOSC
::   WY: 0 / 1 / kolor
::  OLD: \zgp_fld_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD'
||
   {? ZGP.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGP.STARTD<date()
   || exec('flddisp','color','ZGP#STARTD#01')
   || 1
   ?}
|? cur_afld()='STARTT'
||
   {? ZGP.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGP.STARTD<date() | ZGP.STARTD=date() & ZGP.STARTT<time())
   || exec('flddisp','color','ZGP#STARTT#01')
   || 1
   ?}
|? cur_afld()='ENDD'
||
   {? ZGP.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGP.ENDD<date()
   || exec('flddisp','color','ZGP#ENDD#01')
   || 1
   ?}
|? cur_afld()='ENDT'
||
   {? ZGP.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGP.ENDD<date() | ZGP.ENDD=date() & ZGP.ENDT<time())
   || exec('flddisp','color','ZGP#ENDT#01')
   || 1
   ?}
|? cur_afld()='STARTDK'
||
   {? ZGP.STARTDK=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGP.STARTDK<date()
   || exec('flddisp','color','ZGP#STARTD#01')
   || 1
   ?}
|? cur_afld()='STARTTK'
||
   {? ZGP.STARTDK=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGP.STARTDK<date() | ZGP.STARTDK=date() & ZGP.STARTTK<time())
   || exec('flddisp','color','ZGP#STARTT#01')
   || 1
   ?}
|? cur_afld()='ENDDK'
||
   {? ZGP.ENDDK=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & ZGP.ENDDK<date()
   || exec('flddisp','color','ZGP#ENDD#01')
   || 1
   ?}
|? cur_afld()='ENDTK'
||
   {? ZGP.ENDDK=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (ZGP.ENDDK<date() | ZGP.ENDDK=date() & ZGP.ENDTK<time())
   || exec('flddisp','color','ZGP#ENDT#01')
   || 1
   ?}
|? cur_afld()='ILOSC'
||
   1
||
   1
?}


\zgp_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed redakcją pól w tabeli ZGP: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK
::   WY: 0 / 1
::  OLD: \zgp_fld_be/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTDK' | cur_afld()='STARTTK' | cur_afld()='ENDDK' | cur_afld()='ENDTK'
||
:: Dla granic czasowych kooperacji nie sprawdzamy zależnosci w planach
   _ok:=1
|? exec('zgp_utilization','po_plan',1,ZGP.ref())
||
:: Jeżeli w planie operacyjnym, to nieredagowalne
   _ok:=0
|? exec('zgp_utilization','px_plan',ZGP.ref())=1
||
:: Jeżeli w planie strategicznym, to nieredagowalne
   _ok:=0
||
   _ok:=1
?};

{? _ok
||
   {? cur_afld()='STARTT'
   || ZGP.STARTD<>date(0,0,0)
   |? cur_afld()='ENDT'
   || ZGP.ENDD<>date(0,0,0)
   |? cur_afld()='STARTTK'
   || ZGP.STARTDK<>date(0,0,0)
   |? cur_afld()='ENDTK'
   || ZGP.ENDDK<>date(0,0,0)
   || 1
   ?}
|| 0
?}


\zgp_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redakcji pol w tabeli ZGP: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK, ILOSC
::   WY: 0 / 1
::  OLD: \zgp_fld_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
VAR1.STARTD:=ZGP.STARTD;
VAR1.STARTT:=ZGP.STARTT;
VAR1.ENDD:=ZGP.ENDD;
VAR1.ENDT:=ZGP.ENDT;

{? cur_afld()='STARTD' & fld()=date(0,0,0)
|| ZGP.STARTT:=time(0,0,0)
|? cur_afld()='ENDD' & fld()=date(0,0,0)
|| ZGP.ENDT:=time(0,0,0)
?};

{? cur_afld()='STARTDK'
|| {? ZGP.STARTDK<>date(0,0,0) & ZGP.ENDDK=date(0,0,0)
   || ZGP.ENDDK:=ZGP.STARTDK+ZGP.DAYS_K
   ?};
   {? ZGP.win_edit('?')='PLAN_OUT' || params_exec('zgpo_efld_opt','zl_guide') ?};
   1
|? cur_afld()='ENDDK'
|| {? ZGP.ENDDK<>date(0,0,0) & ZGP.STARTDK=date(0,0,0)
   || ZGP.STARTDK:=ZGP.ENDDK-ZGP.DAYS_K
   ?};
   {? ZGP.win_edit('?')='PLAN_OUT' || params_exec('zgpo_efld_opt','zl_guide') ?};
   1
|? cur_afld()='STARTT' | cur_afld()='ENDT' | cur_afld()='STARTTK' | cur_afld()='ENDTK'
|| exec('valid_time','#field',fld())
|| 1
?}


\zgp_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyświetlania pól w tabeli ZGP: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK
::   WY: STRING
::  OLD: \zgp_fld_fd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? (cur_afld()='STARTD' | cur_afld()='ENDD' |
    cur_afld()='STARTDK' | cur_afld()='ENDDK') & fld()=date(0,0,0)    || 'empty=1'
|? cur_afld()='STARTT' & ZGP.STARTD=date(0,0,0) & fld()=time(0,0,0)   || 'empty=1'
|? cur_afld()='ENDT' & ZGP.ENDD=date(0,0,0) & fld()=time(0,0,0)       || 'empty=1'
|? cur_afld()='STARTTK' & ZGP.STARTDK=date(0,0,0) & fld()=time(0,0,0) || 'empty=1'
|? cur_afld()='ENDTK' & ZGP.ENDDK=date(0,0,0) & fld()=time(0,0,0)     || 'empty=1'
|? cur_afld()='ILOSC'
                                                                      || ZGP.NRZLP().ZLEC();
                                                                         {? (ZL.TYP().WP='W' | ZL.RODZAJ='N' & ZL.NRNZL=0)
                                                                         || _format:='empty=1'
                                                                         || _format:='empty=0'
                                                                         ?};
                                                                         _format+',out_prec='+$ZL.KTM().DOKL
                                                                      || 'empty=0'
?}


\zgp_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format redagowania pól w tabeli ZGP: STARTD, STARTT, ENDD, ENDT, STARTDK, STARTTK, ENDDK, ENDTK
::   WY: STRING
::  OLD: \zgp_fld_fe/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
''


\zgp_dok_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Przed wyświetleniem pola ZGP.DOK
::  OLD: \zgp_dok_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR.A_ZLEC().TYP().WP='P'
|| _res:=''
|| _res:=exec('findfnrd','color')
?};
_res


\preddok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Przed redakcją pola ZGP.DOK
::   WY: 0 / 1
::  OLD: \preddok/polap.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.A_ZLEC().TYP().WP='P'


\zgp_nko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Po redakcji pola ZGP.NKO
::  OLD: \zgp_nko/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()<0
|| FUN.info('Norma czasowa musi być dodatnia.'@);
   0
|| {? fld()>ZGP.NTIME |
      fld()>ZGP.MTIME
   || FUN.info('Czas nakładkowania nie może być większy niż norma czasowa i czas maszynowy.'@);
      0
   || 1
   ?}
?}


\zgp_pxkont_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wartość początkowa pola ZGP.PX_KONT
::  OLD: \zgp_pxkont_bl/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.WEW='N'
|| exec('get_px_kont4ver','px_kont',exec('get_mainversion','px_ver'),exec('get','#params',500360,2,null()))
|| null()
?}


\zgp_pxkont_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pola ZGP.PX_KONT
::  OLD: \zgp_pxkont_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
1


\zgp_pxkont_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed redakcją pola ZGP.PX_KONT
::  OLD: \zgp_pxkont_be/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
PX_KONT.fld_fml('A','BLANK',"'T'");
PX_KONT.fld_fml('PX_VER','BLANK',"exec('get_mainversion','px_ver')");
PX_KONT.fld_fml('KIND','BLANK',"'R'");
1


\zgp_pxkont_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redagowaniu pola ZGP.PX_KONT
::  OLD: \zgp_pxkont_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
PX_KONT.fld_fml('A','BLANK',"*");
PX_KONT.fld_fml('PX_VER','BLANK',"*");
PX_KONT.fld_fml('KIND','BLANK',"*");
{? ZGP.win_edit('?')='PLAN_OUT' || params_exec('zgpo_efld_opt','zl_guide') ?};
exec('kooperacyjny','px_kont',fld())


\zgp_status_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Wartość początkowa pola ZGP.STATUS
::  OLD: \zgp_status_bl/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
Cntx.psh(ZL,ZGH);
{? ZGP.NRPRZ().ZLEC().STAN='O'
|| _status:=exec('status_pending','zl_guide')
|| _status:=exec('status_new','zl_guide')
?};
Cntx.pop(ZL,ZGH);
_status


\zgp_plgrp_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pola ZGP.PL_GRP
::  OLD: \zgp_plgrp_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.TOPER=null()
|| 0
|| 1
?}


\zgp_plgrp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed redagowaniem pola ZGP.PL_GRP
::  OLD: \zgp_plgrp_be/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.TOPER=null()
|| 0
|| {? -menu_txt()='popraw'
   || {? exec('zgp_utilization','po_ogr',1,ZGP.ref()) || 0 || 1 ?}
   || 1
   ?}
?}


\zgp_grupa_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pola ZGP.GRUPA
::----------------------------------------------------------------------------------------------------------------------
exec('twrkzbr_filter_wye','zasoby');
1


\zgp_grupa_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po redakcji pola ZGP.GRUPA
::  OLD: \zgp_grupa_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
{? ZGP.PLACE<>null() & ZGP.GRUPA<>null()
|| TWRKZPO.index('GRUPA');
   TWRKZPO.prefix(ZGP.GRUPA);
   {? TWRKZPO.first()
   || {!
      |? _res+=(TWRKZPO.ELEMENT=ZGP.PLACE);
         TWRKZPO.next()
      !}
   ?}
|| _res:=1
?};

{? _res=0
|| {? FUN.ask('Stanowisko nie należy do wskazanego gniazda, czy usunąć stanowisko z pozycji przewodnika?'@)
   || ZGP.PLACE:=null();
      1
   || 0
   ?}
|| 1
?}


\zgp_srw_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [12.41]
:: OPIS: przed edycją sposobu rejestracji wykonania na pozycji przewodnika
::  OLD: \zgp_srw_be/zl_koop.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.TYP().WP<>'W'


\zgp_srw_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [12.41]
:: OPIS: przed wyświetl dla sposobu rejestracji wykonania na pozycji przewodnika
::  OLD: \zgp_srw_bd/zl_koop.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.TYP().WP<>'W'


\zgp_srw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.41]
:: OPIS: Po redagowaniu pola ZGP.SRW
::  OLD: \zgp_srw_ae/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
::{? ZGP.SRW='M'
::|| ZGP.DOK:=null()
::?};
::exec('zgp_efld_opt','zl_guide');
::win_disp();
~~


\zgp_status_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pola ZGP.STATUS, VAR1.ZGP_STAT
::  OLD: \zgp_status_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='ZGP_STAT'
|| {? VAR1.TPZ='T' || 1 || 0 ?}
|| 1
?}


\zgp_status_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyświetlania pola ZGP.STATUS, VAR1.ZGP_STAT
::  OLD: \zgp_status_fd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
'empty=1'


\zgp_docrej_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Przed redakcją pola ZGP.DOC_REJ
::----------------------------------------------------------------------------------------------------------------------
_env_guide:=params_get().env_guide;
_env_guide.DOC_REJ:=ZGP.DOC_REJ;
1


\zgp_docrej_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Po redakcji pola ZGP.DOC_REJ
::----------------------------------------------------------------------------------------------------------------------
_env_guide:=params_get().env_guide;
{? _env_guide.WP='W'
|| {? ZGP.DOC_REJ='T' || {? _env_guide.DOC_REJ='P' || ZGP.DOC_REJ:='Z' || ZGP.DOC_REJ:='P' ?} ?}
?};
1


\varg_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pól VAR.G_STARTD, VAR.G_STARTT, VAR.G_ENDD, VAR.G_ENDT
::  OLD: \varg_fld_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='G_STARTD'
||
   {? VAR.G_STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & VAR.G_STARTD<date()
   || exec('flddisp','color','ZGP#STARTD#01')
   || 1
   ?}
|? cur_afld()='G_STARTT'
||
   {? VAR.G_STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (VAR.G_STARTD<date() | VAR.G_STARTD=date() & VAR.G_STARTT<time())
   || exec('flddisp','color','ZGP#STARTT#01')
   || 1
   ?}
|? cur_afld()='G_ENDD'
||
   {? VAR.G_ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & VAR.G_ENDD<date()
   || exec('flddisp','color','ZGP#ENDD#01')
   || 1
   ?}
|? cur_afld()='G_ENDT'
||
   {? VAR.G_ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (VAR.G_ENDD<date() | VAR.G_ENDD=date() & VAR.G_ENDT<time())
   || exec('flddisp','color','ZGP#ENDT#01')
   || 1
   ?}
||
   1
?}


\varg_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyświetlenia pól VAR.G_STARTD, VAR.G_STARTT, VAR.G_ENDD, VAR.G_ENDT
::  OLD: \varg_fld_fd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='G_STARTD' | cur_afld()='G_ENDD'
|| {? fld()=date(0,0,0) || 'empty=1' || 'empty=0' ?}
|? cur_afld()='G_STARTT' | cur_afld()='G_ENDT'
|| {? VAR.G_ENDD=date(0,0,0) & fld()=time(0,0,0) || 'empty=1' || 'empty=0' ?}
|| ''
?}


\var1_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Przed wyświetleniem pól w zmiennej VAR1: STARTD, STARTT, ENDD, ENDT
::   WY: 0 / 1 / kolor
::  OLD: \var1_fld_bd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD'
||
   {? VAR1.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & VAR1.STARTD<date()
   || exec('flddisp','color','ZGP#STARTD#01')
   || 1
   ?}
|? cur_afld()='STARTT'
||
   {? VAR1.STARTD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (VAR1.STARTD<date() | VAR1.STARTD=date() & VAR1.STARTT<time())
   || exec('flddisp','color','ZGP#STARTT#01')
   || 1
   ?}
|? cur_afld()='ENDD'
||
   {? VAR1.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & VAR1.ENDD<date()
   || exec('flddisp','color','ZGP#ENDD#01')
   || 1
   ?}
|? cur_afld()='ENDT'
||
   {? VAR1.ENDD=date(0,0,0)
   || 1
   |? ZGH.STAN<>'T' & (VAR1.ENDD<date() | VAR1.ENDD=date() & VAR1.ENDT<time())
   || exec('flddisp','color','ZGP#ENDT#01')
   || 1
   ?}
||
   1
?}


\var1_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed redakcją pól w zmiennej VAR1: STARTD, STARTT, ENDD, ENDT
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? exec('zgh_utilization','po_plan',1,ZGH.ref())>0
||
:: Jeżeli w planie operacyjnym, to nieredagowalne
   0
|? exec('zgh_utilization','px_plan',ZGH.ref())=1
||
:: Jeżeli w planie strategicznym, to nieredagowalne
   0
||
   {? cur_afld()='STARTT'
   || VAR1.STARTD<>date(0,0,0)
   |? cur_afld()='ENDT'
   || VAR1.ENDD<>date(0,0,0)
   || 1
   ?}
?}


\var1_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Po redakcji pól w zmiennej VAR1: STARTD, STARTT, ENDD, ENDT
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
{? cur_afld()='STARTD' & fld()=date(0,0,0)
|| VAR1.STARTT:=time(0,0,0)
|? cur_afld()='ENDD' & fld()=date(0,0,0)
|| VAR1.ENDT:=time(0,0,0)
?};

{? cur_afld()='STARTT' | cur_afld()='ENDT'
|| exec('valid_time','#field',fld())
|| 1
?}


\var1_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Format wyświetlania pól w zmiennej VAR1: STARTD, STARTT, ENDD, ENDT
::   WY: STRING
::  OLD: \var1_fld_fd/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? (cur_afld()='STARTD' | cur_afld()='ENDD') & fld()=date(0,0,0)       || 'empty=1'
|? cur_afld()='STARTT' & VAR1.STARTD=date(0,0,0) & fld()=time(0,0,0)   || 'empty=1'
|? cur_afld()='ENDT' & VAR1.ENDD=date(0,0,0) & fld()=time(0,0,0)       || 'empty=1'
                                                                       || 'empty=0'
?}


\var1_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Format redagowania pól w zmiennej VAR1: STARTD, STARTT, ENDD, ENDT
::   WY: STRING
::----------------------------------------------------------------------------------------------------------------------
''


\zmien_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Funkcja umożliwiająca zmianę statusu operacji
::  OLD: \zmien_status/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR1.TPZ='T'
|| _tpz:=FUN.choice('Czy zmienić status dla operacji:'@,'ASK','Tpz'@,'Głównej'@)
|| _tpz:=2
?};
:: _tpz = 0 - anuluj
:: _tpz = 1 - dla operacji TPZ
:: _tpz = 2 - dla operacji glownej

{? _tpz=0 || return() ?};

ZGP.cntx_psh();

{? _tpz=1
|| ZGP.index('TPZ');
   ZGP.prefix('T',ZGP.UID);
   {? ~ZGP.first() || ZGP.cntx_pop(); return() ?}
?};

_tab:=tab_tmp(1
   ,'OPIS','STRING[40]','Opis'
   ,'STATUS','STRING[1]','Status'
);
_tab.fld_fml('STATUS','DISPLAY_FORMAT',"'empty=1'");

_tab.STATUS:=exec('status_new','zl_guide');     _tab.OPIS:='1. '+'nowa operacja'@;          _tab.add();
_tab.STATUS:=exec('status_pending','zl_guide'); _tab.OPIS:='2. '+'operacja wykonywana'@;    _tab.add();
_tab.STATUS:=exec('status_waiting','zl_guide'); _tab.OPIS:='3. '+'operacja oczekująca'@;    _tab.add();
_tab.STATUS:=exec('status_end','zl_guide');     _tab.OPIS:='4. '+'operacja zakończona'@;    _tab.add();

_wer:=_tab.mk_sel({? _tpz=1 || 'Wybierz status operacji Tpz'@ || 'Wybierz status operacji głównej'@ ?},,1,'#wybierzstatus');
_tab.win_act(_wer,,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
_tab.win_fml(_wer,,'STATUS',,'ICON_BEFORE',"exec('icon_status','zl_guide',cur_tab(1,1).STATUS)",2);
_tab.win_sel(_wer);

{? _tab.select()
|| ZGP.STATUS:=_tab.STATUS;
   ZGP.put()
?};

ZGP.cntx_pop();
~~


\zgp_trig_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wspólna część formuł trigerów "przed" dla tabeli ZGP
::  OLD: \ZGP/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
:: Ostemplowanie ref-em SQL operacji
{? ZGP.TOPER<>null() || ZGP.RTOPER:=$ZGP.TOPER ?};
:: Wyliczenie tm_stamp-ów na podstawie planowanych dat i godzin
ZGP.TMSTART:=exec('create','#tm_stamp',ZGP.STARTD,ZGP.STARTT);
ZGP.TMEND:=exec('create','#tm_stamp',ZGP.ENDD,ZGP.ENDT);
ZGP.TMSTARTK:=exec('create','#tm_stamp',ZGP.STARTDK,ZGP.STARTTK);
ZGP.TMENDK:=exec('create','#tm_stamp',ZGP.ENDDK,ZGP.ENDTK);
1


\zgp_trig_put_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Triger przed put dla tebeli ZGP
::  OLD: \ZGP/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
exec('zgp_trig_b','!tte_pzl_dprz')


\zgp_trig_add_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Triger przed add dla tabeli ZGP
::  OLD: \ZGP/trigger.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.UID:=exec('uid','#blank');
exec('zgp_trig_b','!tte_pzl_dprz')


\zgp_trig_put_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Triger po put dla tabeli ZGP
::   WE: _a - parametr systemowy
::----------------------------------------------------------------------------------------------------------------------
{? _a & bfld('PROBKLAS')<>ZGP.PROBKLAS
||
:: Zgłoszenie problemu blokującego replikowane jest od razu na ZGH
   {? ZGP.PROBKLAS=exec('prob_class_blocking','zl_wkj')
   || exec('FindAndGet','#table',ZGH,ZGP.NRPRZ,,"PROBLEM:='T';put()",~~)
:: Określenie, czy na przewodniku jest pozycja z problemem blokującym
   || _bloking:=0;
      _zgh:=ZGP.NRPRZ;
      ZGP.cntx_psh();
      ZGP.index('NRPRZ');
      ZGP.prefix(_zgh);
      {? ZGP.first()
      || {!
         |? {? ZGP.PROBKLAS=exec('prob_class_blocking','zl_wkj') || _bloking:=1 ?};
            ZGP.next() & ~_bloking
         !}
      ?};
      ZGP.cntx_pop();
      {? _bloking
      || exec('FindAndGet','#table',ZGH,ZGP.NRPRZ,,"PROBLEM:='T';put()",~~)
      || exec('FindAndGet','#table',ZGH,ZGP.NRPRZ,,"PROBLEM:='N';put()",~~)
      ?}
   ?}
?};
~~


::======================================================================================================================
:: Obsługa tabeli NASZGP - pola, akcje, budowa struktury następników
::======================================================================================================================


\be_nast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Przed redakcją pola NASZGP.SCIEZKA
::  OLD: \be_nast/tex_ope1.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.SCIEZKA:=NASZGP.SCIEZKA


\nastlist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.70]
:: OPIS: Lista możliwych następników.
::   WY: scieżka wybranej operacji
::  OLD: \nastlist/tex_oper.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh(); ZL.cntx_psh();
_zl:=VAR.A_ZGP().ZL;
exec('utw_nast','zl_guide',_zl);
__NAST.prefix();
{? __NAST.select()
|| exec('add_nast','zl_guide',__NAST.UIN,__NAST.SCIEZKA,_zl,_zl);
   _res:=__NAST.SCIEZKA
|| {? menu_txt()='Popraw'
   || _res:=NASZGP.SCIEZKA
   || _res:=''
   ?}
?};
exec('er_nast','!tte_pzl_dprz');
ZGP.cntx_pop(); ZL.cntx_pop();
_res


\ponast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.70]
:: OPIS: Po redakcji scieżki dla następnika. Należy sprawdzić czy rekord znajduje się
::       na liście  nastepników, jeżeli tak to ustalamy wartości pozostałych pól
::       tabeli następników.
::   WY: 0/1
::  OLD: \ponast/tex_oper.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh(); ZL.cntx_psh();
_zl:=VAR.A_ZGP().ZL;

_sciezka:=fld();
{? _sciezka='' || FUN.info('Proszę wypełnić pole.'@); ZGP.cntx_pop(); ZL.cntx_pop(); return(0) ?};
{? _sciezka=VAR.SCIEZKA || ZGP.cntx_pop(); ZL.cntx_pop(); return(1) ?};

_ok:=1;
_nast:=null();
exec('utw_nast','zl_guide',_zl);
_ndx:=__NAST.ndx_tmp(,1,'SCIEZKA',,);
__NAST.index(_ndx);
__NAST.prefix(_sciezka,);
{? ~__NAST.first()
|| _ok:=0;
   FUN.emsg('Operacja o tym numerze (%1) nie może być następnikiem bieżącej operacji (%2)'
            ' lub brak operacji o takim numerze.\n\nSprawdź dostępność operacji <F3>.'@[_sciezka,$VAR.A_ZGP().NRP]
   )
|| {? exec('chkil','!tte_pzl_dprz',VAR.A_ZGP,__NAST.UIN)
   || _nast:=exec('FindAndGet','#table',ZGP,__NAST.UIN);
      NASZGP.KTL:=_zl;
      NASZGP.OPER:=VAR.A_ZGP;
      NASZGP.NRNAST:=_nast;
      NASZGP.SCIEZKA:=__NAST.SCIEZKA;
      NASZGP.ZLNAST:=_zl
   || _ok:=0
   ?}
?};
__NAST.ndx_drop(_ndx);
exec('er_nast','!tte_pzl_dprz');
ZGP.cntx_pop(); ZL.cntx_pop();
_ok


\er_nast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.70]
:: OPIS: Usuwa tabelę następników
::  OLD: \er_nast/tex_oper.fml
::----------------------------------------------------------------------------------------------------------------------
obj_del(__NAST);
&__WER;
~~


\pred_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.70]
:: OPIS: Rekord przed dla tabeli następników NASZGP
::  OLD: \pred_sel/tex_oper.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
ZGP.prefix();
{? ZGP.seek(NASZGP.NRNAST)
|| VAR.STRING2:=ZGP.OPIS;
   ZGH.cntx_psh();
   VAR.STRING3:=ZGP.NRZLP().NRPRZ;
   ZGH.cntx_pop()
?};
ZGP.cntx_pop();
~~


\prep_sel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.70]
:: OPIS: Rekord przed dla tabeli następników NASZGP
::  OLD: \prep_sel/tex_oper.fml
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh();
ZGP.prefix();
{? ZGP.seek(NASZGP.OPER)
|| VAR.STRING2:=ZGP.OPIS;
   ZGH.cntx_psh();
   VAR.STRING3:=ZGP.NRZLP().NRPRZ;
   ZGH.cntx_pop();
   VAR.STRING:=form(ZGP.NRP)
?};
ZGP.cntx_pop();
~~


\be_nastop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2008]
:: OPIS: Przed dołączeniem następnika operacji
::  OLD: \be_nastop/tex_ope1.fml
::----------------------------------------------------------------------------------------------------------------------
VAR.STRING2:=VAR.STRING3:='';
1


\zgp_prednast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Przed poprawieniem następnika operacji
::----------------------------------------------------------------------------------------------------------------------
{? NASZGP.KTL<>NASZGP.ZLNAST
|| FUN.info('Nie można modyfikować następnika przypisanego do innego zlecenia.'@);
   0
|| 1
?}


\zgp_arednast
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Po dołączeniu/poprawieniu następnika operacji
::  OLD: \zgp_arednast/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_oper:=NASZGP.OPER().NRZLP;
_nast:=NASZGP.NRNAST().NRZLP;
_zgp:=NASZGP.OPER;
exec('recover_sta_zgh','zl_guide',_oper);
{? _oper<>_nast || exec('recover_sta_zgh','zl_guide',_nast) ?};
exec('pl_next_update','po_plan',_zgp);
~~


\naszgp_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009]
:: OPIS: Usunięcie następnika operacji w przewodniku
::  OLD: \naszgp_usu/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć bieżący wiersz?'@)
|| _oper:=NASZGP.OPER().NRZLP;
   _nast:=NASZGP.NRNAST().NRZLP;
   _zgp:=NASZGP.OPER;
   _zl:=NASZGP.KTL;
   _zl_nast:=NASZGP.ZLNAST;
   NASZGP.del();
   exec('recover_sta_zgh','zl_guide',_oper);
   exec('plnext_del2zgp','po_plan',_zgp);
   {? _oper<>_nast || exec('recover_sta_zgh','zl_guide',_nast) ?};
   {? _zl<>_zl_nast
   || _zl_top:=exec('top_level','zl_link',_zl);
      _interzlec:=exec('interzlec','zl_guide',_zl_top);
      {? _interzlec.first()
      || exec('FindAndGet','#table',ZL,_zl_top,,"INTERZL:='T'; put()")
      || exec('FindAndGet','#table',ZL,_zl_top,,"INTERZL:='N'; put()")
      ?}
   ?}
?}


\next_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [2006]
:: OPIS: Wyświetla możliwe następniki z innego zlecenia
::       Kontekst wywołania - rekord tabeli ZGP
::   WY: wynik działania ZL.select
::  OLD: \next_zl/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
ZL.cntx_psh();
ZGH.cntx_psh();
ZGP.cntx_psh();
__ZL:=tab_tmp(2,
   'REFZL','INTEGER','ZL.ref()',
   'REFZGP','INTEGER','ZGP.ref()',
   'NR','STRING[5]','Ścieżka',
   'PRZEW','STRING[25]','Przewodnik',
   'NAZ','STRING[50]','Nazwa',
   'WEW','STRING[1]','Wewnętrzna',
   'SYM','STRING[15]','Symbol zlecenia');
__ZL.fld_attr('REFZL',2);
__ZL.fld_attr('REFZGP',2);

VAR.A_ZGP();

_level:=ZGP.ZL().LEVEL;
_nrnzl:=ZGP.ZL().NRNZL;

_can_continue:=1;

:: gdy zlecenie na wyrób, nie można dodawać następników
{? exec('is_main_podzlec','zl_link',ZGP.ZL)
|| FUN.info('Brak możliwości wybrania następników z innego zlecenia.'@);
   _can_continue:=0
:: gdy zlecenie na 1. poziomie, to zlecenia z tego samego poziomu
|? _level=1
|| exec('add_zl','!tte_pzl_dprz',_nrnzl,1,ZGP.ZL)
:: gdy jakieś inne zlecenie podrzędne to wybieramy dla zleceń z poziomu wyżej
|| exec('add_zl','!tte_pzl_dprz',_nrnzl,_level-1,ZGP.ZL)
?};

exec('er_ezl','!tte_pzl_dprz',ZGP.ZL);

{? _can_continue>0
|| __ZL.prefix();
   {? __ZL.first()
   || _wer:=__ZL.mk_sel('Dostępne przewodniki zlecenia'@,,0);
      __ZL.win_fld(_wer,,'SYM',,,15,,,'Zlecenie'@,,,,1);
      __ZL.win_fld(_wer,,'PRZEW',,,20,,,'Przewodnik'@,,,,1);
      __ZL.win_fld(_wer,,'NR',,,5,,,'Operacja'@);
      __ZL.win_fld(_wer,,'NAZ',,,60,,,'Opis'@);
      __ZL.win_fld(_wer,,'WEW',,,2,,,'W'@);
      __ZL.win_act(_wer,0,'Formuła','Wybierz'@@,,,"sel_exit()",,1);
      __ZL.win_sel(_wer);
      {? __ZL.select()
      || ZL.clear();
         {? ZL.seek(__ZL.REFZL,'zlec_akt')
         || exec('add_nast','zl_guide',__ZL.REFZGP,__ZL.NR,ZGP.ZL,ZL.ref())
         ?};
         _can_continue:=NASZGP.add(1);
         {? _can_continue>0
         || _zl_top:=exec('top_level','zl_link',NASZGP.KTL);
            _interzlec:=exec('interzlec','zl_guide',_zl_top);
            {? _interzlec.first()
            || exec('FindAndGet','#table',ZL,_zl_top,,"INTERZL:='T'; put()")
            || exec('FindAndGet','#table',ZL,_zl_top,,"INTERZL:='N'; put()")
            ?};
::          Aktualizacja PL_NEXtów
            exec('pl_next_update','po_plan',NASZGP.OPER)
         ?};
         __ZL.del()
      ?}
   || FUN.info('Brak możliwości wybrania następników z innego zlecenia.'@)
   ?}
?};

obj_del(__ZL);

ZGP.cntx_pop();
ZL.cntx_pop();
ZGH.cntx_pop();
~~


\add_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [2006]
:: OPIS: Dodaje rekordy do tabeli zlecenia
::   WE: _a - ZL.UNRZL - zlecenie nadrzędne, którego przewodniki zleceń podrzędnych są analizowane
::       _b - poziom zagłębienia
::       _c - ZL.ref() - zlecenie do wyłączenia z analizy (znaczenie ma tylko dla level=1)
::  OLD: \add_zl/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
NASZGP.cntx_psh(); ZL.cntx_psh(); ZGH.cntx_psh(); ZGP.cntx_psh();
ZL.index('NRNZL');
:: Podzlecenia z poziomu...
ZL.prefix(_a,_b);
{? ZL.first()
|| {!
   |?
::    Oprócz bieżącego zlecenia... (znaczenie ma tylko dla level=1)
      {? ZL.ref()<>_c
      || ZGH.index('ZLNR');
         ZGH.prefix(ZL.ref());
         {? ZGH.first()
         || {!
            |? ZGP.index('PNRPP');
               ZGP.prefix(ZGH.ref());
               {? ZGP.last()
               || {!
                  |? {? ZGP.TPZ='N'
                     ||
::                      Szukamy pozycji bez poprzedników w ramach "swojego" przewodnika
                        NASZGP.index('UNROP');
                        NASZGP.prefix(ZL.ref(),ZGP.ref(),ZL.ref());
                        {? ~NASZGP.first()
                        || __ZL.SYM:=ZL.SYM;
                           __ZL.NR:=$ZGP.NRP;
                           __ZL.PRZEW:=ZGH.NRPRZ;
                           __ZL.NAZ:=ZGP.OPIS;
                           __ZL.WEW:=ZGP.WEW;
                           __ZL.REFZGP:=#ZGP.ref();
                           __ZL.REFZL:=#ZL.ref();
                           __ZL.clear();
                           __ZL.add()
                        ?}
                     ?};
                     ZGP.prev()
                  !}
               ?};
               ZGH.next()
            !}
         ?}
      ?};
      ZL.next()
   !}
?};
NASZGP.cntx_pop(); ZL.cntx_pop(); ZGH.cntx_pop(); ZGP.cntx_pop();
~~


\er_ezl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [2006]
:: OPIS: Usuwa niepotrzebne zlecenia z listy następników
::   WE: _a - ZL.ref()
::  OLD: \er_ezl/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
NASZGP.cntx_psh();
NASZGP.index('OPER');
NASZGP.prefix(_a);
{? NASZGP.first()
|| {!
   |? __ZL.prefix(#NASZGP.ZLNAST,#NASZGP.NRNAST);
      {? __ZL.first()
      || __ZL.del()
      ?};
      NASZGP.next()
   !}
?};
NASZGP.cntx_pop();
~~


\valid_str
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.30]
:: OPIS: Sprawdza poprawność struktury przewodnika zlecenia
::       - operacje planowane grupowo nie mogą wystąpić bezpośrednio po sobie
::   WE: _a - ZGH.ref()
::   WY: 0 / 1
::  OLD: \valid_str/zl_guid1.fml
::----------------------------------------------------------------------------------------------------------------------
_zgh:=_a;

Cntx.psh(ZGP,NASZGP);

ZGP.index('PNRPP');
ZGP.prefix(_zgh,'N');
{? ZGP.first()
|| {!
   |? NASZGP.index('OPNAST');
      NASZGP.prefix(_zgh);
      {? NASZGP.first()
      || {!
         |? ZGP.cntx_psh();
            {? NASZGP.OPER().PL_GRP='T' & NASZGP.NRNAST().PL_GRP='T'
            || FUN.emsg(
                  'Operacje %1 oraz %2 przewodnika %3 nie mogą być obie operacjami grupowanymi.\n\n'
                  'Należy usunąć jedną z operacji, zmienić znacznik planowania grupowego,\n'
                  'wstawić dodatkową operację między nimi albo zmienić kolejność operacji.'@
                  [$NASZGP.OPER().NRP,$NASZGP.NRNAST().NRP,NASZGP.OPER().NRZLP().NRPRZ]
               );
               ZGP.cntx_pop();
               Cntx.pop(ZGP,NASZGP);
               return(0)
            ?};
            ZGP.cntx_pop();
            NASZGP.next()
         !}
      ?};
      ZGP.next()
   !}
?};

Cntx.pop(ZGP,NASZGP);
1


\naszgp_trigger_add_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Triger wpisujący zawartość pól: NASZGP.ZGH_OPER, NASZGP.ZGH_NAST
::----------------------------------------------------------------------------------------------------------------------
ZGP.cntx_psh(); ZGH.cntx_psh();
_zgh_oper:=NASZGP.OPER().NRZLP().NRPRZ;
_zgh_nast:=NASZGP.NRNAST().NRZLP().NRPRZ;
ZGP.cntx_pop(); ZGH.cntx_pop();
NASZGP.ZGH_OPER:=_zgh_oper;
NASZGP.ZGH_NAST:=_zgh_nast;
1


::======================================================================================================================
:: Różne techniczne
::======================================================================================================================


\chkil
::----------------------------------------------------------------------------------------------------------------------
:: OPIS: Sprawdza zarejestrowaną ilość do przewodników, jeżeli jest ustawiona kontrola
::   WE: _a - ZGP.ref() - operacja
::       _b - #ZGP.ref() - następnik operacji
::   WY: 0 / 1
::  OLD: \chkil/zl_guid.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=1;
{? exec('get','#params',500631,2)='T'
|| ZGP.cntx_psh();
   _il1:=exec('FindAndGet','#table',ZGP,_a,,"IL",0);
   ZGP.clear();
   {? ZGP.seek(_b,'zguidep')
   || _il2:=ZGP.IL
   ?};
   ZGP.cntx_pop();
   _wynik:=_il1>=_il2;
   {? _wynik=0
   || FUN.info('Błędne ustawienie kolejności operacji. Naruszenie zasad kontroli ilości.'@)
   ?}
?};
_wynik


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.14]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR',1)


\bl_zgh_ktm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wartość początkowa dla ZGH.KTM
::----------------------------------------------------------------------------------------------------------------------
_res:=null();
{? ZGH.ZLEC<>null()
|| _res:=ZGH.ZLEC().KTM
?};
_res


\bl_zgh_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Wartość początkowa dla ZGH.KH
::----------------------------------------------------------------------------------------------------------------------
_res:=null();
{? ZGH.ZLEC<>null()
|| _res:=ZGH.ZLEC().KH
?};
_res


\zgp_kontrah_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Po redagowaniu pola ZGP.KONTRAH
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.win_edit('?')='PLAN_OUT' || params_exec('zgpo_efld_opt','zl_guide') ?};
1


\zgp_days_k_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Po redagowaniu pola ZGP.KONTRAH
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.win_edit('?')='PLAN_OUT' || params_exec('zgpo_efld_opt','zl_guide') ?};
exec('itsPositive','#field')


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła ustalająca PARSES
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
params_exec('zl_parses','zl_common')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 7716c6e0c998d469dbf7135daabb1d7ccfd3e40a053d8ef621cd93c13235926c339323c8ed32c9127ae4d92fa05006a2e5c4985482279611bf0a9aa54653461a9e5558f925c083226fd5ff0fe6c0e6368f3347b0fc6ee111249142427c37bcef90b6e7cf033208341da0c412002289968f1569b5e55b9bf044184a7845a44c16
