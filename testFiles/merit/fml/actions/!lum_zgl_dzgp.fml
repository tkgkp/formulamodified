:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_zgl_dzgp.fml
:: Utworzony: 10.05.2019
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Podstawienie dla zgłoszenia jednorazowego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# properties=SERVICE
::# permissions=ODDZ
::# parses=exec('parses','!lum_zgl_dzgp')
::# kind=WE,   symbol=ZLP,     type=_ZLP,    name=Zgłoszenie jednorazowe,  required=T, keyref=T
::# kind=WY,   symbol=ZLP,     type=_ZLP,    name=Zgłoszenie jednorazowe,  required=N
_mp:=params_get().mp;
_in:=params_get().in;

_akcja:=_mp.akcja();

_auto:=_mp.isAutoRun();
_service:=_mp.isService();
_data:=date(0,0,0);

{? ~(var_pres('ZLP',_in)=type_of(null()) & _in.ZLP)
|| _mp.error('Brak wymaganego parametru ZLP.')
|? exec('FindAndGet','#table',ZLP,_in.ZLP,,"SP<>'T'",0)
|| _mp.error('Czynność niedostępna dla danego zgłoszenia (bez obsługi podstawień).')
||
   ZLE.cntx_psh();
   ZLP.cntx_psh();
   _x:=ref_name(_in.ZLP)+5;
   exec('zle_open','open_tab',1+_x,2+(_x+4),_x+2);
   ZLP.prefix();
   {? ~ZLP.seek(_in.ZLP)
   ||
      _mp.error('Nie znaleziono zgłoszenia jednorazowego.'@)
   ||
      _continue:=1;
      {? _service || _data:=exec('zlp2DATA_REAL','transport_wspolne',ZLP.uidref(),'P') ?};
      _Tr_nzl:=exec('get_tr_nzl','transport_zlec',ZLP.uidref());
      _Tr_nzl.cntx_psh();
      _Tr_nzl.prefix('R');
      {? _Tr_nzl.first()
            &
         exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
            TR_NZL.STATUS<>exec('tr_nzl_status_zrealizowane','transport_zlec')
         ",0)
      ||
         _dp:=ZLP.DP;
         ZLP.DP:=date(0,0,0);
         {? ZLP.put()
         ||
            _Tr_nzl.prefix('Z');
            _loop:=_Tr_nzl.first();
            {!
            |? _loop
            |!
               exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
                  _do_planowania:=exec('tr_nzl_status_do_planowania','transport_zlec');
                  {? TR_NZL.STATUS=_do_planowania
                  ||
                     TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
                     {? TR_NZL.STATUS<>_do_planowania
                     ||
                        TR_NZL.PLAN:=
                           {? TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
                           || 'T'
                           || 'N'
                           ?};
                        TR_NZL.put()
                     ?}
                  ?}
               ");
               _loop:=_Tr_nzl.next()
            !};
            {? _dp=date(0,0,0)
            ||
               FUN.info('Nie zrealizowano transportu.\nFunkcja niedostępna.'@)
            ||
               FUN.info('Nie zrealizowano transportu.\nWycofano podstawienie.'@)
            ?};
            _continue:=0
         ?}
      ?};
      _Tr_nzl.cntx_pop();
      {? _continue & ZLP.DP<>date(0,0,0)
      || ZLP.RODZ:='Z';
         exec('stanPlan','umowy_zlecenia');
         {? ZLP.put(1)
         || _Tr_nzl.prefix('Z');
            _loop:=_Tr_nzl.first();
            {!
            |? _loop
            |!
               exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
                  _oczekujace:=exec('tr_nzl_status_oczekujace','transport_zlec');
                  {? TR_NZL.STATUS=_oczekujace
                  ||
                     TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
                     {? TR_NZL.STATUS<>_oczekujace
                     ||
                        TR_NZL.PLAN:=
                           {? TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
                           || 'T'
                           || 'N'
                           ?};
                        TR_NZL.put()
                     ?}
                  ?}
               ");
               _loop:=_Tr_nzl.next()
            !};
            _mp.save(exec('kind_out','#b_port'),'ZLP',ZLP.ref());
            _mp.done()
         ?}
      |? _continue
            &
         (_service | _mp.pathTodo() | _mp.pathArea() & _akcja='Podstaw')
      || ZLP.ZLE();
         ZLEC.MIA:=ZLE.POS().UL().MIA;
         ZLEC.UL:=ZLE.POS().UL;
         exec('zle_win_edit_set','!lum_zgl_dzgp');
         _win_red:=ZLE.win_edit('?');
         _cntx:=obj_new('PODSTAW');
         {? _service & _data<>date(0,0,0)
         || ZLP.DP:=_data;
            ZLP.RODZ:='Z';
            _cntx.PODSTAW:=2
         || _cntx.PODSTAW:=0;
            params_set('cntx',_cntx);
            exec('jm_kpo','jm');
            ZLE.edit("_res:=exec('zlp_podstaw','!lum_zgl_dzgp',2);
                      {? _res='done'
                      || params_get().cntx.PODSTAW:=2;
                         ''
                      || _res
                      ?}")
         ?};
         {? _cntx.PODSTAW
         || ZLP.RODZ:='Z';
            exec('stanPlan','umowy_zlecenia');
            {? ZLP.put()
            ||
               _Tr_nzl.prefix('Z');
               _loop:=_Tr_nzl.first();
               {!
               |? _loop
               |!
                  exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
                     _oczekujace:=exec('tr_nzl_status_oczekujace','transport_zlec');
                     {? TR_NZL.STATUS=_oczekujace
                     ||
                        TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
                        {? TR_NZL.STATUS<>_oczekujace
                        ||
                           TR_NZL.PLAN:=
                              {? TR_NZL.STATUS=exec('tr_nzl_status_do_planowania','transport_zlec')
                              || 'T'
                              || 'N'
                              ?};
                           TR_NZL.put()
                        ?}
                     ?}
                  ");
                  _loop:=_Tr_nzl.next()
               !};
               _mp.save(exec('kind_out','#b_port'),'ZLP',ZLP.ref());
               _mp.done()
            ?}
         ?};
::       Usunięcie definicji tymczasowych okien
         ZLE.win_edit(''); ZLE.win_edel(_win_red)
      ?}
   ?};
   ZLP.cntx_pop();
   ZLE.cntx_pop()
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('ZLP',_in)=type_of(null()) & _in.ZLP
|| 'Obsługa podstawienia dla zgłoszenia: %1'@@[exec('record','#to_string',_in.ZLP)]
|| ''
?}


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;

{? var_pres('ZLP',_in)=type_of(null()) & _in.ZLP
||
   ZLP.cntx_psh();
   ZLP.use(ref_name(_in.ZLP));
   ZLP.cntx_psh();
   ZLP.prefix();
   {? ZLP.seek(_in.ZLP) & ZLP.ZLE
   ||
      ZLE.cntx_psh();
      ZLE.use(ref_name(ZLP.ZLE));
      __PARSES.setVal('OddzialLogProd',ZLP.ZLE().ODDZ);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LSP';
      _args.AR:=ZLE.AR;
      _args.AM:=ZLE.AM;
      __PARSES.setVal('OkresRok',_args);
      ZLE.cntx_pop()
   ?};
   ZLP.cntx_pop();
   ZLP.cntx_pop()
?};

1


\zlp_podstaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Realizacja
::   WE: _a - automatycznie 0/1/2-odpowiednik zera bez pytania
::       params_get()   - ustawiane w exec('main','!lum_zgl_dzgp')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:='';

_zgl:=exec('record','#to_string',ZLP.ref());
_txt:='';
_put:=0;
_dpw:={? ZLP.WYMIANA2<>''
      || exec('FindInSet','#table','ZLP','WYMIANA',ZLP.WYMIANA2,'W',"@.ZLP.DP",1,,date(0,0,0))
      || date(0,0,0)
      ?};

{? ZLP.DP=date(0,0,0)
|| _txt:='Nie podano daty podstawienia.'@;
   _result:='DP'
|? _dpw<>date(0,0,0) & ZLP.DP<_dpw
|| _txt:='Dla wymiany data podstawienia nowego zgłoszenia nie może być większa od %1.'@[$_dpw];
   _result:='DP'
|? ZLP.SR='Z'
|| _txt:='Zgłoszenie jest już zrealizowane.'@;
   _result:='done'
|? ZLP.STAT_REJ='N'
|| _txt:='Nie zakończono jeszcze rejestracji zgłoszenia.'@;
   _result:=_txt
|? ZLP.PORT='T'
|| _txt:='Zgłoszenie internetowe. Należy je przyjąć do realizacji.'@;
   _result:=_txt
|? exec('zlp_czy_anulowane','umowy_zlecenia')
|| _txt:='Zgłoszenie jest anulowane.'@;
   _result:='done'
|? _a=2 | FUN.ask('Podstawienie dla zgłoszenia:\n%1?\n'
                  'Dzień podstawienia: %2.'@[exec('record','#to_string',ZLP.ref()),$ZLP.DP])
|| _txt:='';
   _put:=1;
   _result:='done'
?};

{? {? _a=2 || _result<>'done' || 1 ?} & _txt<>''
||
   _txt:=_txt+{? _put || '' || 'Podstawienie niemożliwe.\n'@ ?};
   FUN.info(_txt)
?};

_result


\zlp_podstaw_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Podstaw w oknie redakcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('zlp_podstaw','!lum_zgl_dzgp',0);
{? _res='done'
|| params_get().cntx.PODSTAW:=1;
   'key:F2'
|? _res<>''
|| 'edit:'+_res
|| ''
?}


\podstaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Podstaw w oknie wertowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZLP.cntx_psh();

_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_ZGL_DZGP';
_params.UIDREF:=ZLP.uidref();
_params.AKCJA:='Podstaw';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZLP',ZLP.ref());
UMO.RODZZLP:='P';

exec('mp_run','#b__box',_params);
UMO.RODZZLP:='';
ZLP.cntx_pop();
~~


\zle_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Ustawia okno redakcji tabeli ZLE, wymagane pola, okna słowników
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_red:=exec('zle_win_edit','umowy_zlecenia','REDZ');
_ff:="params_exec('zlp_podstaw_red','!lum_zgl_dzgp')";
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Podstaw'@],_ff);
_ff:='key:Esc';
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
ZLE.win_edit(_win_red);
exec('zle_set_efld_opt','umowy_zlecenia',_win_red,'P');
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 374e65aa4c9ff14313b998b25d78c468742753b40dce21f0760481a93d9c280bf9c16ed67993dfad780bea73e8e8451e2b724ea1934853470fb2e805368a2991d737452407eae148578c6d8b9b3cc2a423a474b34f45ab320ea1d485c35ebbb47e17d03d369a6dc9f506e1625da7c9d7586a426af9548b7b6d8301fa9ae2ff14
