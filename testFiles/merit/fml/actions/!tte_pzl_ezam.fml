:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_ezam.fml
:: Utworzony: 26.10.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_EZAM - Zamknięcie zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności zamknięcia zlecenia (TTE_PZL_EZAM)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

_uid:='TTE_PZL_EZAM';

::# properties=SERVICE
::# parses=exec('parses','!tte_pzl_ezam')
::# permissions=ODDZ

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2'@@['ZL',_uid];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności (OK, BŁĄD)", required=N

_result:=0;
_can_continue:=1;

ZL.cntx_psh(); ZL.clear();

_clean_result:=params_exec('clean','!tte_pzl_ezam');
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;

{? _can_continue>0
||
:: Jeśli nadal null to patrzę czy zlecenie przekazane kontekstem
   {? _zl=null() & type_of(_context)>100 & var_pres('ZL',_context)=type_of(null())
   || _zl:=_context.ZL
   ?}
?};

{? _can_continue>0 & ~_mp.isService()
||
:: Jeśli nadal null to pytam
   {? _zl=null()
   || ZL.cntx_psh();
      ZL.index('NIEZAM');
      ZL.prefix('Z','T',0);
      _zl:=exec('select_slo','zl_head');
      ZL.cntx_pop();
      ~~
   ?}
?};

{? _can_continue>0 & _zl<>null()
|| _can_continue:=ZL.seek(_zl)
|| _can_continue:=0
?};
{? _can_continue>0
||
   _mp.keyRef(ZL.uidref());

   _ask:=1;
   _komm:=1;
   {? _mp.isAutoRun()
   || _ask:=0
   |? _mp.isService()
   || _ask:=0;
      _komm:=0
   ?};
   {? _mp.isGroup()
   || _ask:=0;
      _komm:=0
   ?};

:: WSTĘPNA WALIDACJA
:: Sprawdzane zakończenie rejestrowania nagłówka
   {? ZL.STAT_N='N'
   || _can_continue:=0;
      {? _komm || KOMM.init(250,,'Zamknięcie zlecenia'@) ?};
      exec('komm_add','zl_common','Nie zakończono rejestracji nagłówka zlecenia.'@);
      {? _komm || KOMM.select() ?};
      {? _mp.isService()
      || _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
         _mp.save(exec('kind_out','#b_port'),'RESULT','BŁĄD');
         _mp.done()
      || _mp.cancel()
      ?}
   ?};
:: Sprawdzenie czy zostało już zamknięte
   {? ZL.STAN='Z'
   || _can_continue:=0;
      {? _komm || KOMM.init(250,,'Zamknięcie zlecenia'@) ?};
      exec('komm_add','zl_common','Zlecenie jest już zamknięte.'@,1);
      {? _komm || KOMM.select() ?};
      _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
      {? _mp.isService()
      || _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
         _mp.save(exec('kind_out','#b_port'),'RESULT','OK');
         _mp.done()
      || _mp.done()
      ?}
   ?}
?};

{? _can_continue>0
||
:: Faktyczne zamknięcie: automatycznie z procesu
   {? _mp.isService()
   || _result:=exec('zl_zamknij','!tte_pzl_ezam',ZL.ref(),0,1,0,_mp.isGroup())
:: Faktyczne zamknięcie: automatycznie z procesu
:: - w przypadku niezgodności wyświetla raport w KOMM i zostaje na TODO
   |? _mp.isAutoRun()
   || _result:=exec('zl_zamknij','!tte_pzl_ezam',ZL.ref(),0,1,0,_mp.isGroup())
:: Faktyczne zamknięcie: przycisk w oknie TODO, funkcja w oknie selekcji zleceń
:: - w przypadku niezgodności wyświetla pełny raport, można zdecydowac o zamknięciu
   |? _mp.akcja()='ZAMKNIJ' | _mp.pathProc()>0
   || _result:=exec('zl_zamknij','!tte_pzl_ezam',ZL.ref(),~_mp.isGroup(),~_mp.isGroup(),0,_mp.isGroup())

:: Obsługa z TODO - wyświetlam okno umożliwiające podglądy różnych rzeczy ze zlecenia
:: Faktyczne zamknięcie dopiero po uruchomieniu funkcji 'Zamknij' w tym oknie
   |? _mp.pathTodo()
   ||
      {? _can_continue>0
      ||
         DK_C.cntx_psh();
         _btn1:=exec('obj_ntab_set','#array',,
            'txt','text=%1,align=begin,display=1'['K&ontrola'@],
            'fml',"exec('view_control','!tte_pzl_ezam')"
         );
         _btn2:=exec('obj_ntab_set','#array',,
            'txt','text=%1,align=end,display=1'['Zamknij'@],
            'fml',"exec('action_close','!tte_pzl_ezam')"
         );
         _win:=exec('zl_display_red_full','zl_head','Zamknięcie zlecenia %1'@[ZL.SYM],,_btn1,_btn2,1,1,1);
         ZL.win_edit(_win);
         exec('ustaw_pola','zl_head');
         exec('procent','zl_head');
         _mp.keep();
         ZL.display();
         DK_C.cntx_pop();
         ~~
      ?}
   ?};

   {? _result>0 | _mp.isMicro()
   || _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
      {? _mp.isService()
      || _mp.save(exec('kind_out','#b_port'),'RESULT','OK');
         _mp.done()
      || _mp.done()
      ?}
   |? _mp.isService()
   || _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
      _mp.save(exec('kind_out','#b_port'),'RESULT','BŁĄD');
      _mp.done()
   ?}
?};
ZL.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności zamknięcia zlecenia (TTE_PZL_EZAM)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiednie ZL
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Zamknij zlecenie %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"'Zamknij zlecenie %1'[SYM]",'')
|| _desc:='Zamknij zlecenie'@@
?};
_desc


\action_close
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja zamknięcia zlecenia z przycisku, menu
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_EZAM';
_args.UIDREF:=ZL.uidref();
_args.AKCJA:='ZAMKNIJ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('ZL'); _args.CONTEXT.ZL:=ZL.ref();
{? ZL.sel_size()>0
|| _args.GRUPA:='T'
?};
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

exec('mp_run','#b__box',_args);

_params:=params_get();
{? var_pres('_params')>100 & var_pres('env',_params)>100
|| _env:=params_get().env;
   _env.TECH_reload:=1
?};

'key:Esc'


\action_close_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja grupa przed 'Zamknij' w oknach wertowania
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? (_choice:=FUN.choice('Zaznaczono: %1 zleceń. Czy zamknąć wybrane zlecenia i usunąć powiązane z nimi zadania?'@[$ZL.sel_size()]
                        ,,'Tylko zamknij'@,'Zamknij i usuń zadania'@))
|| _result:=1;
   {? _choice=2
   || ZLEC.CLEANER:='T'
   || ZLEC.CLEANER:='N'
   ?};
:: Dla zlecenia nadrzędnego usuwane są z zaznaczenia wszystkie zlecenia podrzędne
   ZL.cntx_psh();
   _tab:=ZL.sel_aget();
   {? _tab.first()
   || {!
      |? ZL.prefix();
         {? ZL.seek(_tab.REF) & (ZL.RODZAJ='Z' | ZL.RODZAJ='N')
         || ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || {!
               |? ZL.sel_del();
                  ZL.next()
               !}
            ?}
         ?};
         _tab.next()
      !}
   ?};
   ZL.cntx_pop();
   KOMM.init(200,,'Zamknięcie zleceń'@,'')
?};
sel_nchk();
_result


\action_close_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja grupa po 'Zamknij' w oknach wertowania
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\view_control
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kontrola zamknięcia zlecenia (do uniwersalnego okna nagłówka zlecenia na liście zadań)
::----------------------------------------------------------------------------------------------------------------------
_result:='';
VAR.A_ZLEC:=ZL.ref();
exec('kontr_zamk','zl_common','S',1);
_result


\zl_zamknij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Obsługa zamknięcia zlecenia.
::   WE: [_a] - ZL.ref() - ref zlecenia lub bieżące zlecenie
::       [_b] - INTEGER - 0/[1] - czy wyświetlać pytania
::       [_c] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::       [_d] - INTEGER - [0]/1 - czy uruchomienie rekurencyjne
::       [_e] - INTEGER -  [0]/1 - czy uruchomienie dla grupy rekordów
::   WY: 0 / 1
::  OLD: \zzlec2end/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(ZL.ref()) || _ref:=_a || _ref:=null() ?};
{? var_pres('_b')=type_of(0) || _ask:=_b || _ask:=1 ?};
{? var_pres('_c')=type_of(0) || _komm:=_c || _komm:=1 ?};
{? var_pres('_d')=type_of(0) || _rec:=_d || _rec:=d ?};
{? var_pres('_e')=type_of(0) || _isgroup:=_e || _isgroup:=0 ?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh();
{? _ref<>null()
|| ZL.prefix();
   {? ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   _zl_top:=exec('top_level','zl_link',ZL.ref());
   _nad:=exec('FindAndGet','#table',ZL,_zl_top,,"RODZAJ",'');

   {? _komm>0
   || KOMM.init(250,,'Zamknięcie zlecenia'@)
   ?};

   _subzlec:=exec('subzlec_exist','zl_link',ZL.ref());
   _px_tex:=exec('get_tex_zl','px_tex',ZL.ref());
   _tex_locked:=1;
   _tex_obj:=~~;
   {? _px_tex<>null()
   || _tex_obj:=exec('lock','px_tex',_px_tex,_isgroup);
      _tex_locked:=_tex_obj.LOCKED
   ?};

   _ok:=1;

   {? _can_continue>0
   ||
::    Sprawdzana możliwość zablokowania zlecenia w każdym zakresie
      {? exec('zl_lock','zl_common',,'N') &
         exec('zl_lock','zl_common',,'T') &
         exec('zl_lock','zl_common',,'P') &
         exec('zl_lock','zl_common',,'L') &
         exec('zl_lock','zl_common',,'I') &
         exec('zl_lock','zl_common',,'R') &
         _tex_locked>0
      ||
         _chk:=1;

::       Sprawdzane zakończenie rejestrowania nagłówka
         {? ZL.STAT_N='N'
         || _can_continue:=0;
            exec('komm_add','zl_common','Nie zakończono rejestracji nagłówka zlecenia.'@)
         ?};

::       Sprawdzenie czy zostało już zamknięte
         {? ZL.STAN='Z'
         || _can_continue:=0;
            exec('komm_add','zl_common','Zlecenie jest już zamknięte.'@,1);
            _result:=1
         ?};

         {? _can_continue>0
         ||
::          Kontrola zlecenia
            _kontr:=exec('kontr_zamk','zl_common',{? _ask || 'R' || 'A' ?},0);
            _choice:=0;
            {? _kontr=2
            || _ok:=1;_choice:=1
            |? _kontr=1
            || {? _ask>0
               || {? _subzlec>0
                  || _ok:={? (_choice:=FUN.choice('Czy zamknąć zlecenie %1 i jego podzlecenia oraz usunąć powiązane z nimi zadania?'@[ZL.SYM]
                                                 ,,'Tylko zamknij'@,'Zamknij i usuń zadania'@)) || 1 || -1 ?}
                  || _ok:={? (_choice:=FUN.choice('Czy zamknąć zlecenie %1 oraz usunąć powiązane z nim zadania?'@[ZL.SYM]
                                                 ,,'Tylko zamknij'@,'Zamknij i usuń zadania'@)) || 1 || -1 ?}
                  ?}
               || _ok:=1
               ?}
            || _ok:=0
            ?};

            {? _ok>0
            ||
::             Czy uruchamiać cleanera dla zlecenia
               {? _choice=2
               || ZLEC.CLEANER:='T'
               |? _choice=1
               || ZLEC.CLEANER:='N'
               |? _choice=0 & ZLEC.CLEANER=''
               || ZLEC.CLEANER:='N'
               ?};
               {? _rec=0
               ||
::                Obowiązkowa kontrola rozliczenia partii jeżeli zlecenie partiowane
::                lub którekolwiek z podzleceń partiowane
                  {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
                  ||
                     _part_chk:=0;
                     ZL.cntx_psh();
                     ZL.index('NRNZL');
                     ZL.prefix(ZL.UNRZL);
                     {? ZL.first()
                     || {!
                        |? {? ZL.STAN='O' & exec('zlec_party','zl_common',ZL.ref)>0
                           || _part_chk:=1
                           ?};
                           ZL.next()
                        !}
                     ?};
                     ZL.cntx_pop();
                     {? _part_chk>0
                     || exec('creator_gr_load','magdok_partie',,ZL.ref())
                     ?}
                  ||
                     {? exec('zlec_party','zl_common',ZL.ref)>0
                     || _top_rodzaj:=exec('top_rodzaj','zl_link',ZL.ref());
                        {? _top_rodzaj='N'
                        ||
::                         Dla zleceń niezależnych podzlecenia rozliczane osobno
                           _top_level:=ZL.ref()
                        ||
::                         Dla zleceń złożonych podzlecenia rozliczane w ramach całego zlecenia złożonego
                           _top_level:=exec('top_level','zl_link',ZL.ref())
                        ?};
                        exec('creator_gr_load','magdok_partie',,_top_level)
                     ?}
                  ?};

                  _args:=exec('creator_args','magdok_partie');
                  _args.MODE:='ZL';
                  _args.KOM_AGR:=2;
                  {? var_pres('CR_ENV')>100
                  ||
::                   Jesli nie było żadnych powiązań partii z rozchodami i zwrotami to umożliwiam siłową akceptację
                     {? CR_ENV.TAB_ZPAR.size()=0 & CR_ENV.TAB_ZPAZ.size()=0
                     || _args.FORCE:=1
                     ?}
                  ?};
                  {? _ask>0
                  || _args.SHOW:=1;
                     _args.KOM_AKC:=_komm;
                     _args.CHK_MODE:=2
                  || _args.SHOW:=2;
                     _args.KOM_AKC:=_komm;
                     _args.CHK_MODE:=2
                  ?};
                  _ok:=exec('creator_gr_show','magdok_partie',_args)
               ?};
               ~~
            ?};

            {? _subzlec>0 & _ok>0
            ||
::             Zamknięcie podzleceń
               ZL.cntx_psh();
               ZL.index('NRNZL');
               ZL.prefix(ZL.UNRZL);
               {? ZL.first()
               || {!
                  |?
::                   !!! REKURENCJA !!!
                     {? exec('zl_zamknij','!tte_pzl_ezam',ZL.ref(),0,0,1,_isgroup)=0
                     || _ok:=0
                     || {? ZLEC.CLEANER='T' || exec('clean_record','#b__box',ZL.uidref(),0) ?}
                     ?};
                     ZL.next()
                  !}
               ?};
               ZL.cntx_pop()
            ?};

::          Zamykane jest bieżące zlecenie
            {? _ok>0 || _result:=exec('poj2end','!tte_pzl_ezam') ?};
            {? _result & ZLEC.CLEANER='T' || exec('clean_record','#b__box',ZL.uidref(),0) ?}

         ?}
      ||
::       Nie udało się zablokować zlecenia
         exec('komm_add','zl_common','Nie udało się zablokować zlecenia'@)
      ?};
      exec('zl_unlock','zl_common',,'N');
      exec('zl_unlock','zl_common',,'T');
      exec('zl_unlock','zl_common',,'P');
      exec('zl_unlock','zl_common',,'L');
      exec('zl_unlock','zl_common',,'I');
      exec('zl_unlock','zl_common',,'R');
      {? _px_tex<>null()
      || exec('unlock','px_tex',_tex_obj)
      ?}
   ?};

   {? _komm>0 & _ok>=0
   || KOMM.select()
   ?}
?};
ZL.cntx_pop();
_result


\kontr_zamk_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kontrola zamknięcia zlecenia - akcja dla pojedynczego rekordu
::----------------------------------------------------------------------------------------------------------------------
exec('kontr_zamk','zl_common',{? ZL.sel_size()=0 || 'S' || 'A' ?},ZL.sel_size()=0)


\kontr_zamk_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kontrola zamknięcia zlecenia - przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Zamknięcie zleceń'@,'');
1


\kontr_zamk_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Kontrola zamknięcia zlecenia - po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\poj2end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MLAK [2011]
:: OPIS: Obsługa zamknięcia zlecenia.
::       Kontekst wywołania - rekord ZL
::   WY: 1 - udało się, 0 - nie udało się zamknąć zlecenia
::  OLD: \poj2end/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;

do();

ZL.cntx_psh();
_var:=VAR.A_ZLEC;
VAR.A_ZLEC:=ZL.ref();
_stan_zl:=ZL.STAN;

ZL.clear();
ZL.STAN:='Z';
ZL.NSTAN:=ZL.STAN+'_';
ZL.PSTAN:=_stan_zl;
ZL.HIDDEN:='N';
ZL.CLOSED:=OPERATOR.USER;
ZL.DO:=date();

_ok:=exec('add_zwar_pos','zl_common','oz',0);

{? _ok>0 || exec('ust_znac','zl_head') ?};

{? _ok>0 || _ok:=ZL.put() ?};

{? _ok>0 & ZL.SCEAN<>'' || exec('aktdeazl','magazyn_mob',ZL.SCEAN,ZL.KTM,ZL.STAN) ?};

VAR.A_ZLEC:=_var;
:: Aktualizacja obiektu planowanego dotyczącego zlecenia
{? _ok>0
|| _ok:=exec('zl2obj','px_obj');
   {? _ok=0 || exec('komm_add','zl_common','Nie udało się zaktualizować obiektu planistycznego zlecenia.'@,2) ?}
?};

ZL.cntx_pop();
ZL.get();

:: Usuwanie rezerwacji
{? _ok>0
|| {? ZL.PSTAN='O' || exec('obl_prod','magazyn_stan',ZL.KTM,ZL.MG,2) ?};
   exec('usurez','zamsiw_limit',ZL.ref(),null(),1);
   exec('ZlecZK_Ns2Arch','!tte_pzl_ezam',ZL.ref());
   exec('zl_delete_rez','zl_common',ZL.ref())
?};
_can_continue:=1;

_can_del:=1;
{? ZL.HWYK>0 & exec('get','#params',500621)<>'Z'
||
:: Zlecenie ma wykonania i synchronizacja wykonań plan->zlecenie, nie można usuwać
:: bo znikną ZLGD i analiza zlecenia da koszt robocizny 0
   _can_del:=0
?};
_mainver:=exec('get_mainversion','px_ver');

:: Usuwanie zlecenia z planu
{? ZL.TYP().PL_DEL='T'
||
   {? _can_del>0
   ||
::    1. Plan strategiczny
      _px_obj:=exec('get_zl_object','px_obj',ZL.ref());
      {? _px_obj<>null()
      ||
         PX_CONN.cntx_psh();
         PX_CONN.index('VER');
         PX_CONN.prefix(_mainver,_px_obj);
         _ref_table:=exec('ref_table','#table');
         {? PX_CONN.first()
         || {!
            |? _ref_table.add(PX_CONN.PX_GRP);
               PX_CONN.next()
            !}
         ?};
         _tab:=_ref_table.tab;
         _px:=0;
         {? _tab.first()
         || _px:=1;
            {!
            |? _next:=0;
               _ref_nxt:=null();
               _tab.cntx_psh();
               {? _tab.next()
               || _ref_nxt:=_tab.ref()
               ?};
               _tab.cntx_pop();

               _can_continue:=exec('clean_from_plan','px_grp',_tab.SQL,1,1,1,0);

               {? _ref_nxt<>null()
               || _next:=_tab.seek(_ref_nxt)
               ?};
               _next>0 & _can_continue>0
            !}
         ?};
         {? _can_continue>0
         || {? _tab.first()
            || {!
               |? _can_continue:=exec('delete','px_grp',_tab.SQL);
                  _tab.next() & _can_continue>0
               !}
            ?}
         ?};
         {? _px>0
         || {? _can_continue>0
            || exec('add_zwar_pos','zl_common','pl',0,'Podczas zamykania usunięto automatycznie zlecenie z planu strateg.'@)
            || exec('komm_add','zl_common','Nie udało się usunąć zlecenia z planu strategicznego.'@,2,1)
            ?}
         ?};
         exec('il_plan_refresh','px_obj',_px_obj);
         exec('planend_refresh','px_obj',_px_obj);
         PX_CONN.cntx_pop()
      ?};

::    2. Plan operacyjny
      PL_PART.cntx_psh();
      PL_PART.index('ZL');
      PL_PART.prefix(ZL.ref());
      {? PL_PART.first()
      || _can_continue:=exec('del_zlec','po_plan',$ZL.ref(),1);
         {? _can_continue>0
         || exec('add_zwar_pos','zl_common','pl',0,'Podczas zamykania usunięto automatycznie zlecenie z planu oper.'@)
         || exec('komm_add','zl_common','Nie udało się usunąć zlecenia z planu operacyjnego.'@,2,1)
         ?}
      ?};
      PL_PART.cntx_pop()
   || exec('komm_add','zl_common','Nie udało się usunięcie z planu podczas zamykania zlecenia ze względu na parametr: %1.'@['500621'],2,1)
   ?};

:: Po usunięciu zlecenia z planu jeżeli zlecenie jest członkiem grupy operacji wzbudzam też usuwanie
:: z planu grup operacji
   {? _can_continue>0 & exec('is_grop_member_planned','zl_grop')
   || _can_continue:=exec('delete_grop_plan_when_close','zl_grop')
   ?};
   ~~
?};

:: Usuwanie opóźnień z planu strategicznego - jeżeli jakieś były
:: robimy to bezwarunkowo, bo te opóźnienia zostaną do usranej śmierci i będą zaśmiecały plan
{? _can_del>0
|| _px_obj:=exec('get_zl_object','px_obj',ZL.ref());
   {? _px_obj<>null()
   || PX_POZ.cntx_psh();
      PX_POZ.index('STATUS3');
      PX_CONN.cntx_psh();
      PX_CONN.index('VER');
      PX_CONN.prefix(_mainver,_px_obj);
      {? var_pres('_ref_table')>100
      || obj_del(_ref_table)
      ?};
      _ref_table:=exec('ref_table','#table');
      {? PX_CONN.first()
      || {!
         |? _ref_table.add(PX_CONN.PX_GRP);
            PX_CONN.next()
         !}
      ?};
      {? var_pres('_tab')>100
      || obj_del(_tab)
      ?};
      _tab:=_ref_table.tab;
      _px:=0;
      {? _tab.first()
      ||
         {!
         |? _next:=0;
            _ref_nxt:=null();
            _tab.cntx_psh();
            {? _tab.next()
            || _ref_nxt:=_tab.ref()
            ?};
            _tab.cntx_pop();

            _px_grp:=exec('FindAndGet','#table',PX_GRP,_tab.SQL,,,null);
            {? _px_grp<>null()
            || PX_POZ.prefix(_px_grp,exec('status_delay','px_poz'),);

               {? PX_POZ.first()
               || _px:=1;
                  {!
                  |? _next:=0;
                     _ref_nxt:=null();
                     PX_POZ.cntx_psh();
                     {? PX_POZ.next()
                     || _ref_nxt:=PX_POZ.ref()
                     ?};
                     PX_POZ.cntx_pop();

                     _can_continue:=exec('status_set','px_poz',PX_POZ.ref(),exec('status_normal','px_poz'));
                     {? _can_continue>0
                     || _can_continue:=exec('status_update','px_poz',PX_POZ.ref(),,0)
                     ?};

                     {? _ref_nxt<>null()
                     || _next:=PX_POZ.seek(_ref_nxt)
                     ?};
                     _next>0 & _can_continue>0
                  !};
                  {? _can_continue>0
                  || _can_continue:=exec('status_rebuild','px_grp',PX_GRP.ref())
                  ?}
               ?}
            ?};

            {? _ref_nxt<>null()
            || _next:=_tab.seek(_ref_nxt)
            ?};
            _next>0 & _can_continue>0
         !}
      ?};

      {? _px>0
      || {? _can_continue>0
         || exec('add_zwar_pos','zl_common','pl',0,'Podczas zamykania usunięto opóźnienia z planu strateg.'@)
         || exec('komm_add','zl_common','Nie udało się usunąć opóźnień z planu strategicznego.'@,2,1)
         ?}
      ?};
      PX_POZ.cntx_pop();
      PX_CONN.cntx_pop();
      ~~
   ?}
?};

:: Oznaczenie surowców w zamkniętym zleceniu - usunięcie z planu dostaw
{? _ok>0
|| ZLIM.cntx_psh();
   ZLIM.index('ZN');
   ZLIM.prefix(ZL.ref());
   {? ZLIM.first()
   || {!
      |? {? ZLIM.LIMIT='T' & ZLIM.AKC='N' | ZLIM.LIMIT='N'
         || ZLIM.AKC:='Z';
            ZLIM.put()
         ?};
         ZLIM.next()
      !}
   ?};
   ZLIM.cntx_pop()
?};

:: Archiwizacja technologii zlecenia
{? _ok & ZL.TKTL<>null()
||
   _args:=exec('args_copy','tech_arch');
   _args.TKTL_SRC:=ZL.TKTL;
   _args.DELETE:=1;
   _args.TRANS:=1;
   _args.DIR:='ARCHIWUM';
   _args.COPY_ACT:=0;
   _args.MASK_SRC:=ref_name(ZL.TKTL)+3;
:: Maska docelowa archiwum jest maską typu _14 gdzie 14 to rok zamknięcia zlecenia
   _args.MASK_DST:='_'+(($(date()~1))+2);
   {? exec('tktl_copy','tech_arch',_args)>0
   || ~~
   || _ok:=0;
      exec('komm_add','zl_common','Nie udało się przesunąć technologii zlecenia do archiwum.'@,2)
   ?}
?};

:: Usuwanie rozpisek rozliczeń surowców nielimitowanych wygenerowanych przy rejestracji wykonania
:: oraz powiązanych z nimi rezerwacji
{? _ok
|| exec('del4ZLGD','zl_limit',2)
?};

{? _ok=0 || undo() ?};
end();

_ok


\pod2end
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PRIVATE
::  UTW: WH [12.41]
:: OPIS: Zamyka biezace podzlecenie i wszystkie podzlecenia nalezace do niego
::   WY: INTEGER - ilosc zamknietych podzlen
::  OLD: \pod2end/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;

_nrp:=ZL.UNRZL;
ZL.cntx_psh();
ZL.index('NRPZL');
ZL.prefix(_nrp);
{? ZL.first()
|| {!
   |?
      {? ZL.STAN='O' | ZL.STAN='N'
      || exec('poj2end','!tte_pzl_ezam');
         _result+=1;
::       !!! REKURENCJA !!!
         _result+=exec('pod2end','!tte_pzl_ezam')
      ?};
      ZL.next()
   !}
?};
ZL.cntx_pop();
_result


\ZlecZK_Ns2Arch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jerry [2011]
:: OPIS: Przenosi zamówienia wewnętrzne zlecenia do archiwum
::   WE: _a - ZL.ref()
::   WY: 0/1 (1-ok)
::  OLD: \ZlecZK_Ns2Arch/zl_lim01.fml
::----------------------------------------------------------------------------------------------------------------------
_zlec:={? _>0 & type_of(_a)=type_of(ZL.ref()) || _a || null() ?};
_result:=0;
ZK_N.cntx_psh();
ZL.cntx_psh();
ZL.clear();
{? _zlec<>null() & ZL.seek(_zlec)
|| _mask:=ZK_N.name+3;
   {? _mask+2<>'__'
   || exec('openz','open_tab',ST.ODDZ+'__')
   ?};
   ZK_N.index('ZLALW');
   ZK_N.prefix(ZL.ref(),'A','T');
   {? ZK_N.first()
   || {!
      |? exec('zam_arch','zamsiw_wspolne',0);
         ZK_N.next()
      !}
   ?};
   {? _mask+2<>'__'
   || exec('openz','open_tab',_mask)
   ?}
?};
ZK_N.cntx_pop();
ZL.cntx_pop();
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

_can_continue:=1;
_obj:=obj_new('RESULT','ZL');
_obj.RESULT:=0;
_obj.ZL:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1.. obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=ZL.name()
         || _obj.ZL:=exec('FindAndGet','#table',ZL,_kref,,,null());

            {? _obj.ZL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego ze zleceniem, więc robię error
               _can_continue:=0;
               exec('zl_deleted_in_proc','zl_common',_mp)
            ||
::             Sprawdzenie stanu zlecenia, jeżeli jest już zamknięte, to done()
               _komm:=1;
               {? _mp.isGroup() | _mp.CLEANER
               || _komm:=0
               ?};
               {? exec('FindAndGet','#table',ZL,_obj.ZL,,"STAN='Z'",0)
               || _can_continue:=0;
                  {? _komm || KOMM.init(250,,'Zamknięcie zlecenia'@) ?};
                  {? _mp.CLEANER=0 || exec('komm_add','zl_common','Zlecenie jest już zamknięte.'@,1) ?};
                  {? _komm || KOMM.select() ?};
                  _mp.save(exec('kind_out','#b_port'),'ZL',_obj.ZL);
                  _mp.done()
               ?}
            ?}
         ?}
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy ZL
   {? _obj.ZL=null() & var_pres('ZL',_in)=type_of(null())
   || _obj.ZL:=_in.ZL
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj


\action_cost_close
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Zamknięcie kosztowe zlecenia
::----------------------------------------------------------------------------------------------------------------------
_group:=0;
{? ZL.sel_size()>0
|| _group:=1
?};
exec('zl_cost_closeopen','!tte_pzl_ezam',1,ZL.ref(),_group);
~~


\action_cost_close_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Zamknięcie kosztowe zlecenia (przed grupą rekordów)
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczono: %1 zleceń. Czy zamknąć je wszystkie kosztowo?'@[$ZL.sel_size()])
|| _result:=1;
   KOMM.init(200,,'Zamknięcie kosztowe zleceń'@,'')
?};
sel_nchk();
_result


\action_cost_close_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Zamknięcie kosztowe zlecenia (po grupie rekordów)
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\action_cost_open
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Otwarcie kosztowe zlecenia
::----------------------------------------------------------------------------------------------------------------------
_group:=0;
{? ZL.sel_size()>0
|| _group:=1
?};
exec('zl_cost_closeopen','!tte_pzl_ezam',0,ZL.ref(),_group);
~~


\action_cost_open_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Otwarcie kosztowe zlecenia (przed grupą rekordów)
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczono: %1 zleceń. Czy otworzyć je wszystkie kosztowo?'@[$ZL.sel_size()])
|| _result:=1;
   KOMM.init(200,,'Otwarcie kosztowe zleceń'@,'')
?};
sel_nchk();
_result


\action_cost_open_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Otwarcie kosztowe zlecenia (po grupie rekordów)
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\zl_cost_closeopen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Zamknięcie/otwarcie kosztowe zlecenia
::   WE: _a - 1-zamknięcie zlecenia, 0-otwarcie zlecenia
::       _b - ZL.ref()
::       _c - akcja dla grupy rekordów
::----------------------------------------------------------------------------------------------------------------------
_close:=_a;
_zl:=_b;
_group:=_c;

ZL.cntx_psh();
ZL.prefix();
{? ZL.seek(_zl)
|| {? _group
   || {? ZL.STAN='N'
      || KOMM.add(
            'Zlecenie %1 w przygotowaniu.'@[ZL.SYM]+' '+
            {? _close || 'Nie można zamknąć kosztowo.'@ || 'Nie można otworzyć kosztowo.'@ ?}
         )
      |? ZL.STAN='O'
      || KOMM.add(
            'Zlecenie %1 otwarte.'@[ZL.SYM]+' '+
            {? _close || 'Nie można zamknąć kosztowo.'@ || 'Nie można otworzyć kosztowo.'@ ?}
         )
      || ZL.STAT_K:={? _close || 'T' || 'N' ?};
         ZL.put()
      ?}
   || _ask:={? _close || 'Czy zamknąć kosztowo zlecenie?'@ || 'Czy otworzyć kosztowo zlecenie?'@ ?};
      {? FUN.ask(_ask)
      || ZL.STAT_K:={? _close || 'T' || 'N' ?};
         ZL.put()
      ?}
   ?}
?};
ZL.cntx_pop();
~~


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;

_result:=0;

{? _mp.isService()
|| {? var_pres('ZL',_in)=type_of(null()) & _in.ZL
   || _oddz:=exec('FindAndGet','#table',ZL,_in.ZL,,"ODDZ",'');
      {? _oddz<>''
      || _result:=1;
         __PARSES.setVal('OddzialLogProd',_oddz);
         _args:=__PARSES.args('OkresRok');
         _args.OBSZAR:='LMG';
         _args.AR:=date()~1;
         _args.AM:=date()~2;
         __PARSES.setVal('OkresRok',_args)
      ?}
   ?};
   {? _result=0
   || _msg:='Błędna konfiguracja procesu — brak parametru wejściowego %1 czynności %2.'@@['ZL','TTE_PZL_EZAM'];
      _mp.error(_msg)
   ?}
|| _result:=1
?};

_result

:Sign Version 2.0 jowisz:1045 2024/02/13 09:21:40 e10f5cb9e078189b34187046f0e1d945ad49e94b3b7a1af650ee1a8bb6fdbd667798de816e7a3bb0298c7a20fe58e14ab0dc298064430209c649cc0d0c4914fbfb42459d1b0471ff550e82fac9074e5e5dce85699e40b0c0912ea9dbc60708bbca33d76332fc6e2578111a26da6536abcc3b3977373accb2d9db4707c4aa9f86
