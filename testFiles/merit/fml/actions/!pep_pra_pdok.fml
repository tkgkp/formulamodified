:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pep_pra_pdok.fml
:: Utworzony: 09.06.2021
:: Autor: MicKoc [21.37]
::======================================================================================================================
:: Zawartość: Formuły czynności PEP_PRA_PDOK - Przygotowanie dokumentów.
::======================================================================================================================

\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Przygotowanie dokumentów - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
:: Czynność wymaga podania parametru P lub OSOBA. Jeżeli podane zostaną obydwa, to parametr OSOBA jest ignorowany.
::
::
:: IN
::
:: Parametr wejściowy P wskazuje współpracownika, którego dotyczą dokumenty.
::# kind=WE, symbol=P, type=_P, name=Wskazanie współpracownika, required=N, keyref=T
::
:: Parametr wejściowy OSOBA wskazuje osobę, której dotyczą dokumenty.
::# kind=WE, symbol=OSOBA, type=_OSOBA, name=Wskazanie osoby, required=N, keyref=T
::
:: Parametr wejściowy TMPBLOB wskazuje na rekod z załącznikiem. Wykorzystany w trybie grupowego wprowadzania
:: załączników.
::# kind=WE, symbol=TMPBLOB, type=_TMPBLOB, name=Wskazanie na załączniki, required=N, keyref=T
::
:: Parametr wejściowy SLO_NAZ nazwa typu dokumentu załącznika.
::# kind=WE, symbol=SLO_NAZ, type=STRING, name=Nazwa typu załącznika zestawu dokumentów, informacja o zestawie, required=N, keyref=N
::
:: Parametr wejściowy SLO_NAZ_REF wskazuje na typ dokumentu załącznika.
::# kind=WE, symbol=SLO_NAZ_REF, type=_SLO_NAZ, name=Wskazanie na typ załącznika, informacja o zestawie, required=N, keyref=T
::
:: Parametr wejściowy TITLE definiuje tytuł okna z załącznikami [domyślnie: Załączniki]. Parametr może posłużyć do
:: uszczegółowienia czynności (np. "Aneks do umowy").
::# kind=WE, symbol=TITLE, type=STRING, name=Tytuł okienka, required=N, keyref=N
::
:: Parametr wejściowy BP_ZEST wskazuje zestaw dokumentów, wg którego przygotowany będzie obieg.
::# kind=WE, symbol=BP_ZEST, type=_BP_ZEST, name=Wskazanie na zestaw dokumentów, required=N, keyref=N
::
:: Parametr wejściowy CZY_PODPIS informuje, czy ma nastąpić automatyczne podpisywanie dokumentów w zestawie.
::# kind=WE, symbol=CZY_PODPIS, type=STRING, name=Czy automatycznie podpisywać dokumenty w zestawie? [T/N*], required=N, keyref=N, fml_val="exec('edit_boolean','#edit',{? _a=~~ || 'N' || _a ?}, 'Podpisywać?')"
::
:: INT
::
:: Parametr wewnętrzny BP_ZEST wskazuje zestaw dokumentów, wg którego przygotowany będzie obieg.
::# kind=WEW, symbol=BP_ZEST, type=_BP_ZEST, name=Wskazanie na zestaw dokumentów, required=N, keyref=N
::
:: Parametr wewnętrzny SLO_NAZ_REF wskazuje typ załącznika.
::# kind=WEW, symbol=SLO_NAZ_REF, type=_SLO_NAZ, name=Wskazanie na typ załącznika, required=N, keyref=N
::
:: Parametr wewnętrzny BLOB wskazuje na wprowadzane załączniki.
::# kind=WEW, symbol=BLOB, type=BLOB, name=Wprowadzane załączniki, required=N, keyref=N
::
:: Parametr wewnętrzny TITLE definiuje tytuł okna z załącznikami [domyślnie: Załączniki]. Parametr może posłużyć do
:: uszczegółowienia czynności (np. "Aneks do umowy").
::# kind=WEW, symbol=TITLE, type=STRING, name=Tytuł okienka, required=N, keyref=N
::
:: Parametr wewnętrzny UID_REC wskazuje dokument z załącznikiem (H_UM, H, ZC, STN itp).
::# kind=WEW, symbol=UID_REC, type=STRING, name=Wskazanie na dokument z załącznikiem, required=N, keyref=N
::
:: OUT
::
:: Parametr wyjściowy BLOB wskazuje na wprowadzone załączniki.
::# kind=WY, symbol=BLOB, type=BLOB, name=Wprowadzone załączniki, required=N, keyref=N
::
:: Parametr wyjściowy P wskazuje współpracownika, którego dotyczą dokumenty.
::# kind=WY, symbol=P, type=_P, name=Wskazanie współpracownika, required=N, keyref=N
::
:: Parametr wyjściowy OSOBA wskazuje osobę, której dotyczą dokumenty.
::# kind=WY, symbol=OSOBA, type=_OSOBA, name=Wskazanie osoby, required=N, keyref=N
::
:: Parametr wyjściowy EDOKUM wskazuje na dokument w obiegu.
::# kind=WY, symbol=EDOKUM, type=_EDOKUM, name=Wskazanie na dokument w obiegu, required=N, keyref=N
::
:: Parametr wyjściowy UID_REC wskazuje dokument z załącznikiem (H_UM, H, ZC, STN itp).
::# kind=WY, symbol=UID_REC, type=STRING, name=Wskazanie na dokument z załącznikiem, required=N, keyref=N
::
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;
_akcja:=_mp.akcja();

_default:="{? ($('_a.'+_b))(_a)=~~ || ($('_a.'+_b+':=_b'))(_a,_c) ?}";
:: Określenie wartości domyślnych
_default(_in,'P',null());
_default(_in,'OSOBA',null());
_default(_in,'TMPBLOB',null());
_default(_in,'TITLE','Załączniki'@);
_default(_in,'SLO_NAZ','');
_default(_in,'SLO_NAZ_REF',null());
_default(_in,'BP_ZEST',null());
_default(_in,'CZY_PODPIS','');
_default(_int,'SLO_NAZ_REF',null());
_default(_int,'BLOB',null());
_default(_int,'BP_ZEST',null());
_default(_int,'UID_REC','');
_default(_out,'BLOB',null());
_default(_out,'P',null());
_default(_out,'OSOBA',null());
_default(_out,'EDOKUM',null());
_default(_out,'UID_REC','');

{? _in.P=null() & _in.OSOBA=null()
|| _mp.error('Jeden z parametrów wejściowych (P lub OSOBA) musi być podany.');
   return()

|? exec('cli_functions','#system')<=0
|| FUN.info(exec('indevice_nacc_msg','#system'));
   _mp.keep();
   return()
?};

:: Ustawienie argumentów
_arg:=exec('arg','!pep_pra_pdok');
_arg.P:=_in.P;
_arg.OSOBA:=_in.OSOBA;
_arg.TITLE:=_in.TITLE;
_arg.SLO_NAZ:=_in.SLO_NAZ;
{? _akcja='GRP' || _int.BP_ZEST:=_in.BP_ZEST ?};
_blob:={? _int.BLOB<>null() || _int.BLOB || null() ?};
_BLOB:=_mp.bl_get(_blob);
{? _BLOB.first()
|| {!
   |? {? var_pres('_op')>0 || &_op ?};
      _op:=spli_str(_BLOB.memo_txt(,1,'DESC'),%255);
      _arg.BUF.blank();
      _arg.BUF.BLOB:=_BLOB.BLOB;
      _arg.BUF.SLO_NAZ:={? var_pres('[1]',_op)=type_of('') || _op[1] || '' ?};
      _arg.BUF.W:={? var_pres('[2]',_op)=type_of('') || _op[2] || '' ?};
      _arg.BUF.add();
      _BLOB.next()
   !}
?};

{? _akcja='GRP' | _akcja='ZAŚW'
|| TMPBLOB.clear();
   Cntx.psh(BP_ZEST,BP_DEF,SLO_NAZ);
   Cntx.clr(BP_ZEST,BP_DEF,SLO_NAZ);
   BP_DEF.index('TYP');
   {? _in.TMPBLOB & TMPBLOB.seek(_in.TMPBLOB) & BP_ZEST.seek(_in.BP_ZEST,)
   || _mp.keyRef(TMPBLOB.uidref(),1,1);
      TMPBLOB.index('LOGIN');
      TMPBLOB.prefix(TMPBLOB.LOGIN);
      BP_DEF.prefix(BP_ZEST.ref());
      {? TMPBLOB.first()
      || {!
         |? {? BP_DEF.find_key(TMPBLOB.OPIS,)
            || _arg.BUF.blank();
               _arg.BUF.SLO_NAZ:=BP_DEF.SLO_NAZ().NAZWA;
               _arg.BUF.W:=BP_DEF.W;
               _arg.BUF.BLOB:=TMPBLOB.PDF;
               _arg.BUF.add()
            ?};
            TMPBLOB.next()
         !}
      ?}
   ?};
   Cntx.pop(BP_ZEST,BP_DEF,SLO_NAZ);
   {? var_pres('UIDREF',_mp.context)=type_of('') & +|_mp.context.UIDREF=48
   || _arg.UID_REC:=_mp.context.UIDREF
   ?};
   _ret:=2
?};
{? _akcja<>'GRP'
|| _ret:=params_exec('select','!pep_pra_pdok',_arg);
   {? _int.BP_ZEST<>null() & exec('czy_podpis','paperless',_int.BP_ZEST)=0 || _in.CZY_PODPIS:='N' ?};
   {? _mp.isBiNew() || _mp.keyRef('_'+hash($SYSLOG.tm_stamp(),'md5'),1,1) ?}
?};

:: _ret: 0-Esc / 1-OK / 2-Zakończ
:: _ret<0 - błędy
{? _arg.SLO_NAZ_REF & SLO_NAZ.seek(_arg.SLO_NAZ_REF,)
|| {? _mp.isBiNew() || _mp.keyRef(SLO_NAZ.uidref(),1,1) ?}
?};
_BUF:={? _ret=0 || _BLOB || _arg.BUF ?};
_port:={? _ret<2 || exec('kind_internal','#b_port') || exec('kind_out','#b_port') ?};
{? _BUF.first()
|| {!
   |? {? _BUF=_BLOB
      || _mp.bl_add('BLOB',_port,_BUF.BLOB,_BUF.memo_txt(,1,'DESC'))
      || _mp.bl_add('BLOB',_port,_BUF.BLOB,_BUF.SLO_NAZ+(%255)+_BUF.W)
      ?};
      _BUF.next()
   !}
?};
_int.TITLE:=_arg.TITLE;
{? type_of(_int.UID_REC)=type_of('') & +|_int.UID_REC<>48
|| _int.UID_REC:=_arg.UID_REC
?};

{? _ret<0
|| _err:=exec('error','!pep_pra_pdok',_ret,_arg.SLO_NAZ);
   _mp.error(_err);
   FUN.emsg(_err)
|? _ret=0 & _mp.isBiNew()
|| _mp.cancel()
|? _ret<2
|| _mp.save(_int);
   _mp.keep()

||
:: uruchomienie wniosku
   _out.P:=_in.P;
   _out.OSOBA:=_in.OSOBA;
   _out.UID_REC:=_int.UID_REC;
   _mp.save(_int,_out);
   _params:=exec('mp_run_a','portal_paperless');
   _params.P:=_in.P;
   BP_ZEST.cntx_psh();
   BP_ZEST.clear();
   _params.TYPE_NAME:='Paperless HR';
   {? BP_ZEST.seek(_int.BP_ZEST)
   || _params.TYPE_NAME:=exec('dane_wniosek','paperless',BP_ZEST.B_PROC,BP_ZEST.VER);
      {? _params.TYPE_NAME*';'
      || _params.TYPE_NAME:=spli_str(_params.TYPE_NAME,';')[1]
      ?};
      _params.PROCESS_SYMBOL:=BP_ZEST.B_PROC;
      _params.PROCESS_VERSION:=BP_ZEST.VER
   ?};
   BP_ZEST.cntx_pop();
   {? var_pres('_BLOB')>100 || obj_del(_BLOB) ?};
   {? var_pres('_BLOB')>0 || &_BLOB ?};
   _ask_text:={? _akcja='ZAŚW' || 'Czy podpisać załączniki?'@ || 'Czy podpisać wymagane załączniki?'@ ?};
   _BLOB:=
      {? _akcja<>'GRP'
         & exec('czy_podpis','paperless',_int.BP_ZEST)
         & (_in.CZY_PODPIS='T' | (_in.CZY_PODPIS='' & FUN.ask(_ask_text)))
      || exec('podpisz','paperless',_mp.bl_get(_out.BLOB),_int.BP_ZEST,_akcja='ZAŚW')
      || _mp.bl_get(_out.BLOB)
      ?};
   {? _BLOB.first()
   || {!
      |? {? _BLOB.BLOB
         || {? var_pres('_op')>0 || &_op ?};
            _op:=spli_str(_BLOB.memo_txt(,1,'DESC'),%255);
            _params.add(_op[1],_BLOB.BLOB,$_BLOB.BLOB)
         ?};
         _BLOB.next()
      !}
   ?};
   exec('mp_run','portal_paperless',_params);
   {? var_pres('EDOKUM',_params)>0
   || _out.EDOKUM:=exec('FindAndGet','#table',EDOKUM,_params.EDOKUM);
      exec('add_uid','paperless',_params.EDOKUM,_out.UID_REC)
   ?};
   _int.BLOB:=_out.BLOB;
   _mp.save(_int,_out);
   {? _params.errMsg=''
   || _mp.done()
   || {? _akcja<>'GRP'
      || _inst_code:=exec('FindAndGet','#table',BI_PROC,_mp.bi_proc,,"CODE",'');
         _proc_desc:=exec('FindAndGet','#table',B_PROC,_mp.b_proc,,
                     "form(SYMBOL)+': '+form(NAME)+'('+VER+')'",'');
         FUN.emsg(_params.errMsg+'\n\n'+'Instancja [%1] procesu "%2" została zawieszona.'@[_inst_code,_proc_desc])
      ?};
      _mp.error(_params.errMsg)
   ?}
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Przygotowanie dokumentów - formuła opisu czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_int:=_mp.load(exec('kind_internal','#b_port'));
_in:=_mp.load(exec('kind_in','#b_port'));

_default:="{? ($('_a.'+_b))(_a)=~~ || ($('_a.'+_b+':=_b'))(_a,_c) ?}";
:: Określenie wartości domyślnych
_default(_in,'P',null());
_default(_in,'OSOBA',null());
_default(_int,'TITLE','Załączniki'@@);
{? var_pres('P',_in)=type_of(null()) & _in.P<>null()
|| _tab:=exec('desc','pracownik',_mp);
   _ret:='P'
|? var_pres('OSOBA',_in)=type_of(null()) & _in.OSOBA<>null()
|| _tab:=exec('desc','osoba',_mp);
   _ret:='O'
|| return('Przygotuj dokumenty "%1"'@@[_int.TITLE])
?};

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || {? _ret='P'
      || 'Przygotuj dokumenty "%1": %2 %3: Paszport - %4, Numer teczki - %5, Identyfikator - %6'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
      || 'Przygotuj dokumenty "%1": %2 %3: Paszport - %4'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
      ?}
   |? +_tab.PESEL
   || {? _ret='P'
      || 'Przygotuj dokumenty "%1": %2 %3: PESEL - %4, Numer teczki - %5, Identyfikator - %6'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
      || 'Przygotuj dokumenty "%1": %2 %3: PESEL - %4'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
      ?}
   || {? _ret='P'
      || 'Przygotuj dokumenty "%1": %2 %3: Data urodzenia - %4, Numer teczki - %5, Identyfikator - %6'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
      || 'Przygotuj dokumenty "%1": %2 %3: Data urodzenia - %4'@@
         [_int.TITLE,_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
      ?}
   ?}
|| 'Przygotuj dokumenty "%1"'@@[_int.TITLE]
?}


\arg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła przygotowuje tablicę z elementami nazwanymi, będącą parametrem formuły \select.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_BUF:=tab_tmp(1,
   'IDADD','IDADD','Systemowy identfikator rekordu'@,
   'BLOB','BLOBRAW','Załącznik'@,
   'SLO_NAZ','STRING['+$MS.fld_len(SLO_NAZ,'NAZWA')+']','Typ załącznika'@,
   'OPIS','STRING[255]','Opis'@,
   'W','STRING[1]','Wymagany'@
);

exec('obj_ntab_set','#array',,
   'P',null(),
   'OSOBA',null(),
   'TITLE','',
   'BUF',_BUF,
   'OPIS',null(),
   'SLO_NAZ_REF',null(),
   'BP_ZEST',null(),
   'SLO_NAZ','',
   'AKCJA','',
   'MIEJSCE','',
   'UID_REC',''
)


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Główna formuła obsługi.
::       Uwaga: poprawność argumentów nie jest weryfikowana.
::   WE: _a [ARRAY] - Tablica z elementami nazwanymi, będącymi parametrami działania (patrz \arg).
::   WY: Sposób wyjścia z okna:
::          0 - Esc;
::          1 - OK;
::          2 - Zakończ.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_int:=_par.int;
_arg:=_a;
_ret:=0;
_cntx:=0;
OSOBA.cntx_psh();
OSOBA.prefix();
{? _arg.P<>null()
|| Cntx.psh(P,STN,SLO_NAZ,BP_ZEST);
   Cntx.clr(P,STN,SLO_NAZ,BP_ZEST);
   _cntx:=1;
   _ok:=P.seek(_arg.P) & P.OSOBA().get()
|| _ok:=OSOBA.seek(_arg.OSOBA)
?};
{? _int.BP_ZEST=null()
|| _val:=
      {? +|_arg.SLO_NAZ
      || exec('wybor_zestawu','paperless',exec('P','#to_string'),_arg.SLO_NAZ)
      || exec('wybor_zestawu','paperless',exec('P','#to_string'))
      ?};
   _zest:={? _val.RET=1 || _val.BP_ZEST || null() ?};
   _arg.SLO_NAZ:=_val.ERR;
   _ret:=_val.RET;
   _first:=1
|| _zest:=_int.BP_ZEST;
   _first:=0
?};
_ok*=_zest<>null();
{? _ok
|| _int.BP_ZEST:=_zest;
   {? BP_ZEST.seek(_zest)
   || _arg.SLO_NAZ:=BP_ZEST.SLO_NAZ().NAZWA;
      _arg.SLO_NAZ_REF:=SLO_NAZ.ref()
   || _arg.SLO_NAZ:='';
      _arg.SLO_NAZ_REF:=null();
      _arg.TITLE:='Załączniki'@
   ?};
   _int.SLO_NAZ_REF:=_arg.SLO_NAZ_REF;
   _cfg:=params_exec('wnd','!pep_pra_pdok',_arg,_zest,_first);
   _arg.BUF.win_sel(_cfg.grp);
   params_set('arg',_arg,'cfg',_cfg,'par',_par);
   _arg.BUF.fld_attr(,2);
   {? _arg.BUF.select()
   || _ret:=_cfg.tryb
   || _ret:=0
   ?}
?};

{? _cntx
|| Cntx.pop(P,STN,SLO_NAZ,BP_ZEST)
?};
OSOBA.cntx_pop();

_ret


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła buduje interfejs czynności.
::       Uwaga: poprawność argumentów nie jest weryfikowana.
::   WE: _a [ARRAY] - Tablica z elementami nazwanymi, będącymi parametrami działania (patrz \arg).
::       _b [REFERENCE] - Wskazanie na BP_ZEST zestaw załączników
::   WY: Akronim utworzonego okna grupowego.
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_arg:=_a;
_zest:=_b;
_int:=_par.int;

:: Kontrolka
_ctr_id:='pep_pra_pdok';
_ctr_win:=_arg.BUF.mk_ctr(,'#pep_pra_pdok',,,,,'maximized');
_arg.BUF.win_cctr(_ctr_win,_ctr_id,'@filelistpanel','dnd');

_arg.BUF.win_cfml(_ctr_win,_ctr_id,'CONTROL_INIT',"params_exec('control_init','!pep_pra_pdok')");
_arg.BUF.win_cfml(_ctr_win,_ctr_id,'CONTROL_DISPLAY',"params_exec('control_display','!pep_pra_pdok')");
_arg.BUF.win_cfml(_ctr_win,_ctr_id,'CONTROL_CALLBACK',"params_exec('control_callback','!pep_pra_pdok')");


:: Okno przycisków
_wb:=_arg.BUF.mk_edit(,,'#pep_pra_pdokwb');
exec('zakoncz','#window',_arg.BUF,_wb,1,"params_get().cfg.tryb:=2; sel_exit(); ''",1);
exec('ok_esc','#window',_arg.BUF,_wb,1,
   "params_get().cfg.tryb:=1; sel_exit(); ''",
   "params_get().cfg.tryb:=0; 'key:Esc'",1,1,,
   exec('text_red_ok','#window')
);

:: Budowa okna grupowego
_mode:='maximized';
_grp:=_arg.BUF.grp_make(_arg.TITLE,,'#zal_grp',,,
   "params_exec('ae','!pep_pra_pdok',_a)",,'html_maximized'
);
{? _arg.P<>null()
|| _arg.BUF.grp_edit(_grp,P,'INFO_'+{? P.F_ZATR().KOD='Z' || 'Z' || 'P' ?},,,,,,_mode)
|| _arg.BUF.grp_edit(_grp,OSOBA,'INFO',,,,,,_mode)
?};
_arg.BUF.grp_splt(_grp,,'horizontal','ctr');
_arg.BUF.grp_ctr(_grp,,_ctr_win,,,,,,,,,,,'maximized');
:: pozycja dla inTerm wybrana doświadczalnie dla skalowania 125%
_arg.BUF.grp_splt(_grp,,'horizontal','wb','30,90%');
_arg.BUF.grp_edit(_grp,,_wb,,,,,,'maximized');

{? ~_arg.BUF.size()
|| BP_DEF.index('TYP');
   BP_DEF.prefix(_zest);
   {? BP_DEF.first()
   || _nazwaZestawu:=BP_DEF.BP_ZEST().SLO_NAZ().NAZWA;
      _obj:=obj_new(BP_DEF.size());
      _context:=
         {? var_pres('context',_par)>0 & var_pres('UIDREF',_par.context)=type_of('')
         || _par.context.UIDREF
         || ~~
         ?};
      _licz:=0;
      {!
      |? _nazwaDefinicji:=BP_DEF.SLO_NAZ().NAZWA;
         _arg.BUF.blank(1);
         _arg.BUF.SLO_NAZ:=_nazwaDefinicji;
         _arg.BUF.W:=BP_DEF.W;
         _arg.BUF.add();
         _obj[_licz+=1]:=exec('obj_ntab_set','#array',,'SLO_NAZ','','PODPIS','','W','');
         {? +|BP_DEF.FORM
         || _obj[_licz].SLO_NAZ:='';
            _blb:=($(BP_DEF.FORM))(_arg.P,_nazwaZestawu,_nazwaDefinicji,_context,{? BP_DEF.PODPIS='T' || 'T' || 'N' ?});
            {? +|_blb.BLOB
            || _arg.BUF.BLOB:={? SYSBLOB.seek(_blb.BLOB,) || SYSBLOB.ref() || null() ?};
               _arg.BUF.put()
            ?}
         || _obj[_licz].SLO_NAZ:=_arg.BUF.SLO_NAZ
         ?};
         _obj[_licz].PODPIS:={? BP_DEF.PODPIS='T' || 'T' || 'N' ?};
         _obj[_licz].W:=BP_DEF.W;
         BP_DEF.next()
      !};
      _zal:=exec('form4zest','paperless',_nazwaZestawu,_obj,,_arg.P,_context,1);
      {? _zal.first()
      || {? var_pres('_context')=type_of('') & +|_context=48
         || _arg.UID_REC:=_context
         || _arg.UID_REC:=_zal.UID_REC
         ?};
         {!
         |? {? _arg.BUF.find_tab('first','SLO_NAZ',,'=',_zal.SLO_NAZ)
            || _arg.BUF.BLOB:={? SYSBLOB.seek(_zal.REF_BLB,) || SYSBLOB.ref() || null() ?};
               _arg.BUF.OPIS:=_zal.OPIS;
               _arg.BUF.put()
            ?};
            _zal.next()
         !}
      ?}
   ?}
?};

exec('obj_ntab_set','#array',,
   'ctr_id',_ctr_id,
   'grp',_grp,
   'tryb',-1
)


\ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła wykonywana przy próbie opuszczenia okna.
::   WE: _a [STRING] - Sposób zamknięcia okna grupowego.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a<>'sel_exit'
:: Szczególnej obsługi wymagają przyciski: Zakończ i OK. Oba są związane z sel_exit().
|| return(1)
?};

params_set(_par:=params_get());
_arg:=_par.arg;
_cfg:=_par.cfg;

{? _cfg.tryb=1
:: Przycisk OK - możemy jeszcze nie weryfikować.
|| 1

|? ~exec('test_wymagan','!pep_pra_pdok',_arg)
|| FUN.emsg('Brak wymaganych załączników.'@);
   0
|? ~_arg.BUF.first()
|| FUN.emsg('Co najmniej jeden załącznik powinien być dodany.'@);
   0
|? _arg.BUF.first()
|| _czyJest:=0;
   {!
   |? _czyJest+=_arg.BUF.BLOB<>null();
      _arg.BUF.next()
   !};
   {? ~_czyJest
   || FUN.emsg('Co najmniej jeden załącznik powinien być dodany.'@);
      0
   || 1
   ?}
|| 1
?}


\tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła tworzy tabelę tymczasową do komunikacji z kontrolką. Jeżeli przekazany jest parametr z tabelą
::   WE: [_a] [TABLE] - Uchwyt tabeli z polem o akronimie BLOB typu BLOBRAW, na podstawie której wypełniona zostanie
::                      zwracana tabela.
::   WY: Tabela do komunikacji z kontrolką.
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(1,
   'SLO_NAZ','STRING['+$MS.fld_len(SLO_NAZ,'NAZWA')+']','Typ załącznika',
   'W','STRING[1]','Wymagany',
   'NAME','STRING[64]','Plik',
   'SIZE','INTEGER','Rozmiar',
   'CRT_DATE','DATE','Data utworzenia',
   'CRT_TIME','TIME','Czas utworzenia',
   'MOD_DATE','DATE','Data modyfikacji',
   'MOD_TIME','TIME','Czas modyfikacji',
   'INT_DATA','INTEGER','Identyfikator rekordu',
   'STR_DATA','STRING[48]','Identyfikator rekordu'
);
{? var_pres('_a')=type_of(_TAB)
|| _BUF:=_a;
   {? _BUF.first()
   || {!
      |? _TAB.blank();
         {? _BUF.BLOB
         || _TAB.NAME:=_BUF.bl_info('BLOB','NAME');
            _TAB.SIZE:=_BUF.bl_info('BLOB','SIZE');
            _TAB.CRT_DATE:=_BUF.bl_info('BLOB','CREAT_DATE');
            _TAB.CRT_TIME:=_BUF.bl_info('BLOB','CREAT_TIME');
            _TAB.MOD_DATE:=_BUF.bl_info('BLOB','MODIFY_DATE');
            _TAB.MOD_TIME:=_BUF.bl_info('BLOB','MODIFY_TIME')
         || _TAB.NAME:='<wybierz>'
         ?};
         _TAB.STR_DATA:=_BUF.uidref();
         _TAB.INT_DATA:=#_BUF.ref();
         _TAB.SLO_NAZ:=_BUF.SLO_NAZ;
         _TAB.W:=_BUF.W;
         _TAB.add();
         _BUF.next()
      !}
   ?}
?};

_TAB


\control_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła wykonywana po pojawieniu się kontrolki.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_arg:=_par.arg;
_cfg:=_par.cfg;

ctr_set(,_cfg.ctr_id,'setColumns','SLO_NAZ,W,NAME,SIZE,#TYPE,CRT_DATE,CRT_TIME,MOD_DATE,MOD_TIME');
ctr_set(,_cfg.ctr_id,'setColumnWidth','SLO_NAZ',30);
ctr_set(,_cfg.ctr_id,'setColumnWidth','W',10);
ctr_set(,_cfg.ctr_id,'setColumnWidth','NAME',40);
ctr_set(,_cfg.ctr_id,'setColumnWidth','SIZE',10);
ctr_set(,_cfg.ctr_id,'setColumnWidth','#TYPE',20);
ctr_set(,_cfg.ctr_id,'setColumnWidth','CRT_DATE',12);
ctr_set(,_cfg.ctr_id,'setColumnWidth','CRT_TIME',12);
ctr_set(,_cfg.ctr_id,'setColumnWidth','MOD_DATE',12);
ctr_set(,_cfg.ctr_id,'setColumnWidth','MOD_TIME',12);

params_exec('control_display','!pep_pra_pdok');

ctr_set(,_cfg.ctr_id,'removeAllActions');
ctr_set(,_cfg.ctr_id,'addToolbarAction','refresh','','xwin16.png:48','Odświeżenie widoku'@,0,0);
ctr_set(,_cfg.ctr_id,'addToolbarSeparator');
ctr_set(,_cfg.ctr_id,'addAction','put','&Popraw'@,'','Poprawianie załącznika'@,1,0);
ctr_set(,_cfg.ctr_id,'addAction','del','&Usuń'@,'','Usunięcie załącznika'@,2,0);
ctr_set(,_cfg.ctr_id,'addAction','open','&Otwórz'@,'','Otworzenie załącznika'@,1,1);
ctr_set(,_cfg.ctr_id,'addAction','save','&Zapisz'@,'','Zapisanie załącznika'@,2,0);
ctr_set(,_cfg.ctr_id,'addAction','drukuj','U&twórz dokument'@,'','Tworzenie dokumentu załącznika'@,1,0);
ctr_set(,_cfg.ctr_id,'setDndEnabled' ,1);
ctr_call(,_cfg.ctr_id,'setView','table');
ctr_call(,_cfg.ctr_id,'initToolbar');

~~


\control_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła wykonywana w momencie odświeżania okna z kontrolką.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_arg:=_par.arg;
_cfg:=_par.cfg;

ctr_tab('files_data',,_cfg.ctr_id,,exec('tab','!pep_pra_pdok',_arg.BUF));
ctr_call(,_cfg.ctr_id,'updateItems','files_data');
~~


\control_callback
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Formuła obsługuje akcje wywołane z kontrolki.
::   WE:
::   WY:
:: ~OST: INBLPUT, INBLGET, INFILECHOOSER, INFEXISTS
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_arg:=_par.arg;
_cfg:=_par.cfg;

_action:=ctr_info('action_id');

:: Obsługa akcji, które nie są związane z plikami.
{? _action='refresh'
|| exec('control_init','!pep_pra_pdok');
   win_disp();
   return()
?};

:: Obsługa akcji, które moga być wykonywane na pliku/plikach kontrolki.
_TIN:=ctr_call(,_cfg.ctr_id,'getCurrActionItems');
{? ~_TIN.first()
|| return()
?};

:: Akcje dla wiele plików, usuwanie
{? _action='del'
|| {? _TIN.size()>1
   || _txt:='Czy usunąć zaznaczone załączniki?'@
   || {? _arg.BUF.seek(_TIN.STR_DATA) & _arg.BUF.W<>'T'
      || _txt:='Czy usunąć zaznaczony załącznik?'@
      || FUN.info('Załącznik wymagany, usunięcie niemożliwe.'@); return()
      ?}
   ?};
   {? FUN.ask(_txt)
   || _refresh:=0;
      _info:=0;
      {!
      |? {? _arg.BUF.seek(_TIN.STR_DATA) & _arg.BUF.W<>'T'
         || _refresh+=_arg.BUF.del(,1)
         ?};
         _info+=_arg.BUF.W='T';
         _TIN.next()
      !};
      {? _refresh
      || {? ~_arg.BUF.first()
::          Być może trzeba dodać akcję "Dołącz".
         || exec('control_init','!pep_pra_pdok')
         ?};
         {? _info
         || FUN.info('Nie usunięto wymaganych załączników.'@)
         ?};
         win_disp()
      ?}
   ?};
   return()

:: Akcje dla wiele plików, drag and drop (nie działa, czemu?)
|? _action='dnd'
|| _DND:=ctr_call(,_cfg.ctr_id,'getDroppedFiles');
   {? _DND.first() & _arg.BUF.seek(_TIN.STR_DATA)
   || _sep:=exec('sep','#file');
      _fp:=_DND.DIR+_sep+_DND.FILENAME;
      {? -exec('split_file_name','#file',_DND.FILENAME).ext='pdf'
      || echo(_fp+' ...');
         _arg.BUF.put();
         _arg.BUF.bl_put('BLOB','@'+_fp);
         echo();
         win_disp()
      ?}
   ?};
   return()

:: Akcje dla wiele plików, zapisz
|? _action='save'
|| {? _TIN.size()=1 & _arg.BUF.seek(_TIN.STR_DATA) & ~_arg.BUF.BLOB
   || FUN.info('Brak pliku załącznika.'@); return()
   ?};
   _info:=_zapis:=0;
   {? exec('interm','#system')
   || {? _TIN.size()>1
      || _esc:=_ovr:=0;
         _tmp_dir:=fmk_tmp_dir(0);
         {? type_of(_tmp_dir)<>type_of(~~)
         || _pth:=_tmp_dir.get_path();
            {!
            |? {? _arg.BUF.seek(_TIN.STR_DATA) & _arg.BUF.BLOB
               || errno();
                 _name:=_arg.BUF.bl_info('BLOB','NAME');
                 _file:=_pth+exec('sep','#file',2)+_name;
                 _arg.BUF.bl_get('BLOB',_file,0)
               ?};
            _TIN.next()
            !}
         ?};
         _tmp_dir2:=fmk_tmp_dir(0);
         {? type_of(_tmp_dir2)<>type_of(~~)
         || _pth2:=_tmp_dir2.get_path();
            _name:='Załączniki'@+'_'+$SYSLOG.tm_stamp()+'.zip';
            _arch:=_pth2+exec('sep','#file',2)+_name;
            _can_continue:=fpack_add(_arch,_pth);
            {? _can_continue>0
            || dlg_save(_arch,0,_name)
            ?}
          ?}
      || exec('bl_save','#blob',_arg.BUF,'BLOB')
      ?}
   || _dir:=exec('filechooser','#file','Wybór katalogu'@,0,,,,'DIRECTORIES_ONLY');
      {? _dir<>''
      || _sep:=exec('sep','#file');
         _ovr:=0;
         _esc:=0;
         {!
         |? {? _arg.BUF.seek(_TIN.STR_DATA) & _arg.BUF.BLOB
            || errno();
               _fn:=_arg.BUF.bl_info('BLOB','NAME');
               _again:=1;
               {!
               |? _again
               |! _again:=0;
                  _fp:=_dir+_sep+_fn;
                  {? _ovr<>2
                  || {? fexists('@'+_fp,0)
                     || _txt:='Plik %1 już istnieje. Nadpisać?'@ [_fp];
                        {? _TIN.size()>1
                        || _ret:=FUN.choice(_txt,,'Nadpisz'@,'Nadpisz &wszystkie'@,'Zmień nazwę'@,'Pomiń'@,'Anuluj'@)
                        || _ret:=FUN.choice(_txt,,'Nadpisz'@,'Zmień nazwę'@,,,'Anuluj'@);
                           {? _ret=2
                           || _ret:=3
                           ?}
                        ?};
                        {? _ret=0
::                      Anuluj
                        || _esc:=1
                        |? _ret=1 | _ret=2
::                      Nadpisz lub Nadpisz wszystkie
                        || _ovr:=_ret
                        |? _ret=3
::                      Zmień nazwę
                        || _fnn:=exec('edit_string','#edit',_fn,'Nazwa pliku'@,
                              "__CHK.record2(cur_tab(1,1),'VAL','Nazwa pliku'@)"
                           );
                           {? type_of(_fnn)=type_of('')
                           || _fn:=_fnn
                           ?};
                           _again:=1
                        |? _ret=4
::                      Pomiń
                        || _ovr:=0
                        ?}
                     || _ovr:=1
                     ?}
                  ?}
               !};
               {? _ovr
               || _nm:=no_msg(1);
                  {? ~_arg.BUF.bl_get('BLOB','@'+_fp,0) | errno()
                  || FUN.info('Zapisanie pliku %1 na dysku użytkownika nie powiodło się.'@ [_fp])
                  || _zapis+=1
                  ?};
                  no_msg(_nm);
                  {? _ovr<>2
                  || _ovr:=0
                  ?}
               ?}
            ?};
            _info+=_arg.BUF.BLOB=null();
            ~_esc & _TIN.next()
         !};
         {? _info
         || FUN.info('Brak plików załączników, nie zapisano: %1 z %2.'@[$_info,$(_zapis+_info)])
         ?}
      ?};
      win_disp()
   ?};
   return()
?};

:: Akcje dla jednego pliku
{? ~_arg.BUF.seek(_TIN.STR_DATA)
|| FUN.info('Zaznaczony załącznik został usunięty przez innego użytkownika.'@);
   win_disp()

:: Akcje dla jednego pliku, popraw
|? _action='put'
|| {? exec('interm','#system')
   || _refresh:=0;
      _tmp_dir:=fmk_tmp_dir(0);
      {? type_of(_tmp_dir)<>type_of(~~)
      || {? _arg.BUF.seek(_TIN.STR_DATA)
         || _pth:=_tmp_dir.get_path();
            _file:=dlg_upload(_pth,,'.pdf',0);
            {? _file<>''
            || _arg.BUF.put();
               _arg.BUF.bl_put('BLOB',_pth+exec('sep','#file',2)+_file);
               _refresh:=1
            ?}
         ?};
         {? _refresh
         || win_disp()
         ?}
      ?}
   || _ret:=exec('filechooser','#file',,0,'pdf','pliki.pdf',0,,0);
      _refresh:=0;
      {? _arg.BUF.seek(_TIN.STR_DATA)
      || {? type_of(_ret)=type_of('') & _ret<>'' & fexists('@'+_ret,0)
         || _arg.BUF.put();
            _arg.BUF.bl_put('BLOB','@'+_ret);
            _refresh:=1
         |? type_of(_ret)=type_of(_arg.BUF) & _ret.first()
         || _sep:=exec('sep','#file');
            {!
            |? _fp:=_ret.DIR+_sep+_ret.FILENAME;
               echo(_fp+' ...');
               _arg.BUF.put();
               _arg.BUF.bl_put('BLOB','@'+_fp);
               _ret.next();0
            !};
            echo();
            _refresh:=1
         ?}
      ?};
      {? _refresh
      || win_disp()
      ?};
      return()
   ?}
:: Akcje dla jednego pliku, Utwórz dokument
|? _action='drukuj'
|| {? _arg.BUF.seek(_TIN.STR_DATA)
   || {? ~_arg.BUF.BLOB
      || _miejsce:=exec('miejsce2','paperless',_arg.BUF.SLO_NAZ);
         {? ',um,an,zc,'*(','+_miejsce+',')
         || _uid:=
               {? var_pres('context',_par.par)>100 & +|_par.par.context.UIDREF=48
               || _par.par.context.UIDREF
               |? +|_arg.UID_REC=48
               || _arg.UID_REC
               || ''
               ?};
            {? +|_uid
            || VAR_DEL.delete('_TAB');
               _TAB:=ref_tab(_uid);
               _TAB.cntx_psh();
               _TAB.prefix();
               {? _TAB.seek(_uid,)
               || {? exec('lic','#b_domain','PEP')
                  || _for:="_par:=params_get();
                     {? var_pres('_par')>100
                        & var_pres('PEP',_par)>0
                        & obj_ntab(_par.PEP)
                        & var_pres('active',_par.PEP)>0
                     || _par.PEP.active:=1
                     ?};
                     sel_exit()";
                     _icon:='|document-list-wheel,0:0:0';
                     _obj:=exec('obj_ntab_set','#array',,'N','Paperless &HR'@,'W','H','F',_for,'I',_icon,'R','PEP')
                  || _obj:=~~;
                     _for:=''
                  ?};

                  {? _miejsce='an'
                  || _pos:=exec('h_mod_pos','pracownik',_TAB.ref(),_TAB.UMOWA);
                     {? _pos=0 | _pos=1
                     || _txt:=
                           'Wydruk aneksu do umowy o pracę możliwy jest tylko dla zapisu zmieniającego jej warunki.'@;
                        FUN.info(_txt)
                     || _tab:=tab_tmp(,'H','STRING[16]','Przebieg');
                        _tab.H:=$_TAB.ref();
                        _tab.add();
                        params_set('H',_tab,'ZAL','1','DALEJ','','par',_par,'paperless',0);
                        exec('rep_exec','#b_report','PKD_ZES_ORZA','pkd_zaswaneksdoumowy',,0,,,,,_obj,_for)
                     ?}
                  |? _miejsce='um'
                  || _tab:=tab_tmp(,'UM','STRING[16]','Umowa o pracę','PPSF_H','STRING[16]','Praca zdalna');
                     _tab.UM:=$_TAB.ref();
                     {? exec('is_pzd01','ppsf')
                     || Cntx.psh(PPSF_H,PPSF_ADR);
                        Cntx.clr(PPSF_H,PPSF_ADR);
                        _ppsfObj:=obj_new('jest','pobierz','PPSF_H');
                        exec('wybor_do_druku_umowy','ppsf',_ppsfObj);
                        _ppsfObj.pobierz();
                        _tab.PPSF_H:=_ppsfObj.PPSF_H;
                        Cntx.pop(PPSF_H,PPSF_ADR)
                     ?};
                     _tab.add();
                     params_set('UM',_tab,'ZAL','1','DALEJ','','par',_par);
                     rep_exec('pkd_zaswumowaoprace')
                  |? _miejsce='zc'
                  || _ru:=','+ZC.RU().K+',';
                     {? ',1,'*_ru
                     || params_set('DRUK','uz','ZAL','1','par',_par);
                        exec('rep_exec','#b_report','PPL_ZLC_WUCP','ppl_uz_umzc',,0,,,,,_obj,_for)
                     |? ',2,6,'*_ru
                     || params_set('DRUK','ud','ZAL','1','par',_par);
                        exec('rep_exec','#b_report','PPL_ZLC_WUCP','ppl_uz_umdz',,0,,,,,_obj,_for)
                     || _todo:=FUN.choice(
                           'Proszę określić, który z szablonów raportu ma zostać\nwykorzystany do wydrukowania '
                              'umowy "%1".'@ [ZC.RU().O],
                           3,'umowa - Zlecenie'@,'umowa o Dzieło'@);
                        {? _todo=1
                        || params_set('DRUK','uz','ZAL','1','par',_par);
                           exec('rep_exec','#b_report','PPL_ZLC_WUCP','ppl_uz_umzc',,0,,,,,_obj,_for)
                        |? _todo=2
                        || params_set('DRUK','ud','ZAL','1','par',_par);
                           exec('rep_exec','#b_report','PPL_ZLC_WUCP','ppl_uz_umdz',,0,,,,,_obj,_for)
                        ?}
                     ?}
                  ?}
               ?};
               _TAB.cntx_pop();
               params_set(params_get());
               win_disp()
            ?}
         || FUN.info('Wybrany typ załącznika "%1" nie jest tworzony automatycznie.'@[_arg.BUF.SLO_NAZ])
         ?}
      || FUN.info('Dla wskazanego typu załącznika "%1" dokument już istnieje.'@[_arg.BUF.SLO_NAZ])
      ?}
   || FUN.error('Brak danych.'@)
   ?}

:: Akcje dla jednego pliku, otwórz
|? _action='open'
|| {? _arg.BUF.BLOB
   || exec('bl_view','#blob',_arg.BUF,'BLOB')
   || FUN.info('Brak pliku załącznika.'@)
   ?}

?};
~~


\test_wymagan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Sprawdzenie wymagań, czy dołączono wszystkie wymagane załączniki
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_ret:=1;
_arg:=_par.arg;
_BUF:=_arg.BUF;
_zest:=_par.par.int.BP_ZEST;
BP_DEF.index('UNIQ');
BP_DEF.prefix(_zest);
{? BP_DEF.first()
|| {!
   |? {? BP_DEF.W='T'
      || _ret*=(_BUF.find_tab('first','SLO_NAZ',,'=',BP_DEF.SLO_NAZ().NAZWA) & _BUF.BLOB)
      ?};
      _ret & BP_DEF.next()
   !}
?};
_ret


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [21.37]
:: OPIS: Obsługa błędów
::   WE: _a [INTEGER] - kod błędu
::       _b [STRING] - informacja o zestawie
::   WY: Informacja o błędzie
::----------------------------------------------------------------------------------------------------------------------
{? _a=-1
|| 'Brak definicji zestawu dokumentów dla "%1".'@[_b]
|? _a=-2
|| 'Zestaw dokumentów "%1" używa nieaktualnego procesu.'@[_b]
|| 'Błąd ogólny.'@
?}

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:25 7fa2eefa8cd0eb75b71e3bea5c0fb7be28f167b89b8d4307969af14976f190edff98f112f185736b2a6eef32b84f15d585dba7e16704fd2d8216a2c7b850a1e81516b86e0cc1739d80ef38306a53d241e13e8faece248ce01683ea51f8a5a443532982a62867a3648ae7c0ac05acc2de1593a97457ca5238e170e8e2435914d0
