:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !kas_dok_erap.fml
:: Utworzony: 31.05.2016
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Zamknięcie raportu kasowego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ,KAS
::# parses=exec('parses','!kas_dok_erap')
::# kind=WE,   symbol=RAPORT,    type=_RAPORT,  name=Raport kasowy, required=T,  keyref=T
::# kind=WY,   symbol=RAPORT,    type=_RAPORT,  name=Raport kasowy, required=T
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

exec('init','kas');

:: Uruchomiona akcja
_akcja:=_mp.akcja();

:: Uruchomiona automatycznie
_auto:=_akcja<>'Zamknij' & _mp.isAutoRun();

{? ~(var_pres('RAPORT',_in)=type_of(null()) & _in.RAPORT)
|| _mp.error('Brak wymaganego parametru RAPORT.')
|| RAPORT.cntx_psh();
   RAPORT.prefix();
   {? ~RAPORT.seek(_in.RAPORT)
   || _mp.error('Nie znaleziono raportu kasowego.')
   || {? (_mp.pathArea() & _akcja='Zamknij') | _auto | _mp.pathTodo()
      || {? exec('rap_code','kasa_raport',RAPORT.STATUS)>1
         || _out.RAPORT:=RAPORT.ref();
            _mp.save(,_out);
            _mp.done()
         || exec('o_rapzam','!kas_dok_erap',_auto);
            RAPORT.get();
            {? RAPORT.STATUS='zamknięty'
            || _out.RAPORT:=RAPORT.ref();
               _mp.save(,_out);
               _mp.done()
            ?}
         ?}
      || _mp.error('Nieobsługiwana ścieżka.')
      ?}
   ?};
   RAPORT.cntx_pop()
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('RAPORT',_in)<>type_of(~~) & _in.RAPORT
|| 'Zamknij raport kasowy: %1'@@[exec('record','#to_string',_in.RAPORT)]
|| ''
?}


\zamknij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zamknięcie raportu kasowego
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='KAS_DOK_ERAP';
_params.UIDREF:=RAPORT.uidref();
_params.AKCJA:='Zamknij';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);

exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RAPORT',RAPORT.ref());
exec('mp_run','#b__box',_params)


\o_rapzam
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zamknięcie raportu kasowego
::   WE: [_a] - 1-wywołane automatycznie 0-nie
::  OLD: \o_rapzam/okna.fml
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};

_selsize:=RAPORT.sel_size();
_s:=0;
{? exec('chk_sal','kasa_raport',_selsize)
|| {? (_a:=exec('dost_dok','kasa_dokument',0))=1
   || RAPORT.cntx_psh();
      DOKUMENT.index('RAPORT'); DOKUMENT.prefix(RAPORT.ref());
      POZDOK.index('DOKUMENT');
      VPD.index('VPD'); _b:=1; _pyt:=0; _lp:=1;
      {? PAR_SKID.get(90)='T' & DOKUMENT.first()
      || {? _selsize=0
         || ZAM_RAP:=tab_tmp(1,'LP','INTEGER','Lp',
                               'NR_DOK','INTEGER','Nr dok.',
                               'POZ_OP','STRING[8]','Poz. dok.',
                               'FAK','STRING[20]','Faktura',
                               'BRU_POZ','REAL','Br. z poz. dok.',
                               'BRU_VAT','REAL','Br. z poz. VAT'
                            );
            _wer:=ZAM_RAP.mk_sel('Wykryte niezgodności'@,,,'zam_rap_blad');
            ZAM_RAP.win_fld(_wer,,'LP',,,4,,,'Lp.'@);
            ZAM_RAP.win_fld(_wer,,'NR_DOK',,,4,,,'Nr dokumentu'@);
            ZAM_RAP.win_fld(_wer,,'POZ_OP',,,8,,,'Pozycja'@);
            ZAM_RAP.win_fld(_wer,,'FAK',,,20,,,'Faktura'@);
            ZAM_RAP.win_fld(_wer,,'BRU_POZ',,,15,2,,'Brutto z pozycji'@);
            ZAM_RAP.win_fld(_wer,,'BRU_VAT',,,15,2,,'Brutto wg VAT'@);
            ZAM_RAP.win_sel(_wer)
         ?};
         {! |?
            POZDOK.prefix(DOKUMENT.ref());
            {? POZDOK.first()
            || {! |?
                 {? -POZDOK.POZOPER().VAT='t'
                 || _sum_vat:=0;
                    VPD.prefix(POZDOK.ref());
                    {? VPD.first() || {! |? _sum_vat+=VPD.BRUTTO; VPD.next() !} ?};
                    {? _sum_vat$2<>POZDOK.KW_PLN$2
                    || _b:=0;
                       {? _selsize=0
                       || ZAM_RAP.LP:=_lp; _lp+=1;
                          ZAM_RAP.NR_DOK:=DOKUMENT.LP;
                          ZAM_RAP.POZ_OP:=POZDOK.POZOPER().KOD;
                          ZAM_RAP.FAK:=POZDOK.MF_FIKS;
                          ZAM_RAP.BRU_POZ:=POZDOK.KW_PLN$2;
                          ZAM_RAP.BRU_VAT:=_sum_vat$2;
                          ZAM_RAP.add()
                       ?}
                    ?}
                 ?};
                 POZDOK.next()
               !}
            ?};
            DOKUMENT.next()
         !};
         {? _selsize=0 | ~_auto
         || {? ~_b
            || _pyt:=FUN.ask('Raportu nie można zamknąć.'
                         '\n\nPrzynajmniej w jednym przypadku'
                         '\nsuma pozycji VAT nie jest zgodna z kwotą'
                         '\nw pozycji dokumentu.'
                         '\nPokazać szczegóły?'@)
            ?};
            {? _pyt || ZAM_RAP.select() ?};
            obj_del(ZAM_RAP)
         ?}
      ?};
      {? _b
      || _b:=(exec('sta_prev','kasa_raport')>=2);
         {? ~_b
         || {? _selsize=0 | ~_auto || FUN.info('Raport poprzedni nie jest zamknięty.'@) ?}
         || _b:=exec('chk_kol','kasa_dokument');
            {? ~_b & (_selsize=0 | ~_auto)
            || _b:=FUN.choice('Raport zawiera luki w numeracji dokumentów.\nCzy zamknąć mimo to?'@,2,
                              'Nie'@,'Tak'@,'Przenumerować i zamknąć'@);
               {? _b || _b-=1 ?};
               {? _b=2
               || _b:=exec('gen_lp','kasa_dokument');
                  {? ~_b || FUN.info('Powstały błędy podczas przenumerowania dokumentów.'@) ?}
               ?}
            ?};
            {? _b & DOKUMENT.first()
            || _kpkw:=1;
               {! |? _kpkw:=DOKUMENT.DOK_NUM;  _kpkw & DOKUMENT.next() !};
               _b:={? _kpkw=0
                   || {? _selsize=0 | ~_auto
                      || FUN.ask('\nNie wystawiono wszystkich dokumentów KP/KW/INN.'
                                 '\nCzy zamknąć raport %1?'@[$RAPORT.NUM_RAP])
                      || 0
                      ?}
                   || {? _selsize=0 | ~_auto || FUN.ask('\nCzy zamknąć raport %1?'@[$RAPORT.NUM_RAP]) || 1 ?}
                   ?}
            |? _b
            || _b:={? _selsize=0 | ~_auto
                   || FUN.ask('\nRaport nie zawiera dokumentów.\nCzy zamknąć mimo to?'@)
                   || 0
                   ?}
            ?};
            {? _b || _s:=exec('bo_przen','kasa_wspolne') ?}
         ?}
      ?}
   || {? _selsize=0 | ~_auto
      || FUN.info({? _a=2
                  || 'Raportu nie można zamknąć.\nStatus raportu musi być: >>%1<<.'@[exec('rap_stat','kasa_raport',0)]
                  |? _a=0
                  || 'Raportu nie można zamknąć.\nJest on obsługiwany przez innego operatora.'@
                  || 'Raportu nie można zamknąć.'@
                  ?})
      ?}
   ?};
   {? _a=1
   || RAPORT.cntx_pop();
      {? _s
      || RAPORT.DATA_ZAM:=date(); RAPORT.put();
         {? var_pres('licz_gr')>0 || licz_gr+=1 ?};
         exec('rap_set','!kas_dok_erap',2)
      ?};
      RAPORT.r_unlock()
   ?}
?}


\ma5_sta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: zmiana statusu raportu
::  OLD: \ma5_sta/kasa.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:="{? RAPORT.get(); _status:=exec('rap_code','kasa_raport',RAPORT.STATUS); _status<>2 & _status<>3
      || {? RAPORT.sel_size()=0
         || FUN.info('Status raportu jest: >>%1<<.\nNie można zmienić tego statusu.'@[RAPORT.STATUS])
         ?}; 0
      || 1
      ?}";
{? _ok()
|| {? RAPORT.sel_size | (FUN.ask('Na pewno zmienić status raportu?'@) & _ok())
   || {? RAPORT.STATUS=exec('rap_stat','kasa_raport',2)
      || exec('rap_stch','!kas_dok_erap',0)
      |? RAPORT.STATUS=exec('rap_stat','kasa_raport',3)
      || exec('rap_stch','!kas_dok_erap',2)
      ?}
   ?}
?}


\rap_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: zmiana statusu raportu
::   WE: _a - status
::  OLD: \rap_set/rap_pola.fml
::----------------------------------------------------------------------------------------------------------------------
RAPORT.STATUS:=exec('rap_stat','kasa_raport',_a);
RAPORT.ZMIENIAL:=OPERATOR.USER;
RAPORT.put


\rap_stch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2011]
:: OPIS: zmienia status raportu na parametr formuły
::   WE: _a - status
::  OLD: \rap_stch/rap_pola.fml
::----------------------------------------------------------------------------------------------------------------------
_size:=RAPORT.sel_size();
{? RAPORT.get() & RAPORT.r_lock(1,1)
|| RAPORT.STATUS:=exec('rap_stat','kasa_raport',_a);
   RAPORT.put(); RAPORT.r_unlock();
   {? var_pres('licz_gr')>0 || licz_gr+=1 ?};
   {? _size=0 || FUN.info('Status raportu zmieniono na %1.'@[RAPORT.STATUS]) ?}
|| {? _size=0 || FUN.info('Raport zablokowany - operacja nie powiodła się.'@) ?}
?}


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [18.02]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;

_result:=1;

{? var_pres('RAPORT',_in)=type_of(null()) & _in.RAPORT
|| _result:=0;
   _stKasowe_kod:=#(3+(8+$_in.RAPORT+5));
   {? _stKasowe_kod
   || __PARSES.setVal('StKasowe',_stKasowe_kod);
      _result:=1
   ?}
?};

_result

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:13 000d55484e1f2bb3bb387da4577a3d79f60fed292c076a3a3559f8fa077480903cefcefca854c4fa129b23aec55d0e011c3a5ca1399185ea97495b87a6789ed636362b292701790b8bbc0cd4aff0a8f3879787050adf50e5263565c633084dc3fb911a00f2e30790019ed737900846ca146ece8238483caa4b89731597dee7b6
