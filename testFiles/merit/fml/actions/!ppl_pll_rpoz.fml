:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_pll_rpoz.fml
:: Utworzony: 14.01.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_PLL_RPOZ - Rejestracja pożyczek
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja pożyczek - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::
exec('dekl','lista_plac');

_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.P);
_do:=_mp.akcja();
_result:='';

{? _id=''
|| _result:=exec('error','!ppl_pll_rpoz')

|? _mp.isMicro()
|| {? _do='START'
   || _mp.keyRef(_id);
      _mp.keep()
   |? _do='STOP'
   || _mp.delRef(_id);
      _mp.cancel()
   |? _do<>''
   || _result:='Czynność '+_mp.buf_act.UID+' nie obsługuje akcji '+_do+'.'@
   ?}

|| _mp.save(_ib,_rv);
   {? _do='ZAKOŃCZ'
   || _mp.done()
   |? _mp.pathTodo()
   || _value:=exec('select','!ppl_pll_rpoz',_in.P);
      {? type_of(_value)=type_of(0)
      || {? _value<>0
         || _mp.done()
         || _mp.keep()
         ?}
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja pożyczek - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj pożyczki: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj pożyczki: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj pożyczki: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj pożyczki'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu.
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie pożyczek niemożliwe.\nNie znaleziono pracownika.'


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa czynności wykonywanej z listy zadań.
::   WE: _a [_P] - wskazanie pracownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err_msg:=exec('error','!ppl_pll_rpoz');

{? var_pres('_a')<>type_of(null) | _a=null
|| return(_err_msg)
?};

P.cntx_psh();
P.prefix();
{? ~P.seek(_a)
|| P.cntx_pop();
   return(_err_msg)
?};

SEEK.OSOBA:=P.OSOBA;
SEEK.OSOBA();

_result:=0;
K.cntx_psh();
K.index('KREDYTY');
K.prefix(P.ref());
K.index('KREDYTYX');
K.prefix(P.ref());
K.win_edit('RED');
K.win_patt('RED');
K.win_sel('WER_P');

: czy zakończona?
_result:=K.select();

K.cntx_pop();
P.cntx_pop();
_result


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabel K z doklejonym oknem redagowania tabeli P);
::       - w ramach obszaru roboczego (okno wertowania tabeli K jako składowa okna grupowego tabeli UD_DEF).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=K
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\k_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed dołączeniem rekordu tabeli K.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('k_modb','!ppl_pll_rpoz',0)


\k_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed dołączeniem rekordu tabeli K.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('k_modb','!ppl_pll_rpoz',1)


\k_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed zapisem rekordu tabeli K.
::   WE:
::   WY:
::  OLD: \KRE_akt/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.KP>=0
|| K.KS:=0;
   K.PR:=0
|| K.KS:=K.KP
?};
{? _a
|| KRE_HIS.cntx_psh();
   _loop:=exec('kre_his_jest','!ppl_pll_rpoz',K.ref());
   {!
   |? _loop
   |! K.KS+=KRE_HIS.KWOTA;
      _loop:=KRE_HIS.next()
   !};
   KRE_HIS.cntx_pop();
   K.MR:=exec('liczba_rat','!ppl_pll_rpoz')
?};
1


\k_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz przed usunięciem wiersza tabeli K. Usuwa rozliczenie pożyczki.
::   WE:
::   WY: Wynik usuwania powiązanych zapisu (1 w przypadku ich braku)
::----------------------------------------------------------------------------------------------------------------------
: informacja dla wyzwalaczy "usuń" tabeli KRE_HIS
exec('add','#bulk',KRE_HIS,'del',$K.ref());

_ret:=exec('del_ndx','#table',KRE_HIS,'KRE_HIS',K.ref());

: usuń semafor
exec('del','#bulk',KRE_HIS,'del',$K.ref());

_ret


\k_po_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pola K.PO
::   WE:
::   WY: 1 - pole może być opuszczone, 0 - wartość pola nie jest poprawna
::  OLD: \lck_KPO/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
1


\k_du_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Po redakcji pola DU tabeli K.
::  OLD: \K_DU/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.DR<K.DU
|| K.DR:=K.DU
?};
1


\k_dr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Po redakcji pola DR tabeli K.
::  OLD: \K_DU/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.DR<K.DU
|| K.DR:=K.DU
?};
1


\k_kp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pola KP tabeli K.
::   WE:
::   WY:
::  OLD: \KKPpor/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.KP<0
|| K.KS:=K.KP;
   {? K.KR>0
   || K.MR:=ceil(fabs(K.KP/K.KR)$2)
   |? K.MR>0
   || K.KR:=fabs(K.KP/K.MR)$2
   ?}

|? K.KP>=0
|| K.KS:=0;
   K.MR:=0
?};
1


\k_kr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pola KR tabeli K.
::   WE:
::   WY:
::  OLD: \KKRpor/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.KR<0
|| FUN.emsg('Wartość "Rata / składka" nie może być ujemna.'@);
   0

|? K.KP<0 & K.KR>0
|| {? _a
   || K.MR:=exec('liczba_rat','!ppl_pll_rpoz')
   || K.MR:=ceil(fabs(K.KP/K.KR)$2)
   ?};
   1

|? K.KP<0 & K.KR=0
|| 1

|? K.KP>=0 & K.KR>=0
|| K.MR:=0;
   1
?}


\k_mr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pola MR tabeli K
::   WE:
::   WY:
::  OLD: \KMRpor/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.MR<0
|| FUN.emsg('Pole "Ilość rat" nie może być ujemna.'@);
   0

|? K.KP<0 & K.MR>0
|| _kr:=fabs(K.KP/K.MR)$2;
   _mr:=-1;
   {? K.KR>0
   || _mr:=ceil(fabs(K.KP/K.KR)$2)
   ?};
   {? K.MR<>_mr
   || K.KR:=_kr
   ?};
   1

|? K.KP>=0
|| K.MR:=0
?};
1


\liczba_rat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::  OLD: \IleRat/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
_splata:=0;
KRE_HIS.cntx_psh;
{? exec('kre_his_jest','!ppl_pll_rpoz',K.ref()) & K.KP<0
|| {!
   |? {? KRE_HIS.OPIS<>'KP'
      || _ret+=1
      ?};
      _splata+=KRE_HIS.KWOTA;
      KRE_HIS.next()
   !}
?};
KRE_HIS.cntx_pop();

_ret+={? K.KR || ceil(fabs((K.KP+_splata)/K.KR)$2) || 0 ?}


\k_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS:
::  OLD: \K_dodpr/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
K.blank();
exec('k_edit_b','!ppl_pll_rpoz',0);
exec('k_fld_opt','!ppl_pll_rpoz')


\k_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS:
::  OLD: \K_poppr/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
exec('k_edit_b','!ppl_pll_rpoz',1);
exec('k_fld_opt','!ppl_pll_rpoz')


\k_edit_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed edycją rekordu tabeli K.
::   WE: _a [INTEGER] - tryb edycji:
::          0 - dołączanie
::          1 - poprawianie
::   WY:
::----------------------------------------------------------------------------------------------------------------------
K.win_edit('RED');

_state:=1;
{? _a
|| _state:=~exec('kre_his_jest','!ppl_pll_rpoz',K.ref());
   {? _state & exec('lic','#b_domain','POR')
   || K.cntx_psh();
      _sync_id:={? K.KP<0 & K.KS<=0 || 'PORTAL_K_P_ID' || 'PORTAL_K_W_ID' ?};
      _state:=~exec('get_id','#sync_id',_sync_id,K.uidref(),,1).first();
      K.cntx_pop()
   ?}
?};

exec('k_fld_be','!ppl_pll_rpoz',_state,'PO','DU','DR','KP','KS','PR','MR');
exec('k_fld_ae','!ppl_pll_rpoz',_a,'PO','DU','DR','MR','KP','KR');
exec('k_fld_be','!ppl_pll_rpoz',0,'KS');
~~


\k_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _ndx:=2.._
|! K.fld_fml(_[_ndx],'BEFORE_EDIT',$$_a)
!}


\k_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS:
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _ndx:=2.._
|! K.fld_fml(_[_ndx],'AFTER_EDIT',$(
      'exec(\'k_fld_opt\',\'!ppl_pll_rpoz\',\''+_[_ndx]+'\');'+
      'exec(\'k_'+-_[_ndx]+'_ae\',\'!ppl_pll_rpoz\','+$_a+')'
   ))
!}


\k_fld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustawia opcje pól.
::   WE: _a [TABLE] - alias tabeli, jeśli pominięty, to przyjęty będzie K
::       _b [STRING] - akronim pola, jeśli pominięty, to przyjęty będzie '*'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:={? var_pres('_a')<>type_of(SYSLOG) || K || _a ?};
_fld:={? var_pres('_b')<>type_of('') || '*' || _b ?};
_wnd:=_tab.win_edit('?');

{? (_fld='*' | _fld='KP')
|| _tab.efld_opt(_wnd,'enable='+$(K.KP<0),_tab,'PR');
   _tab.efld_opt(_wnd,'enable='+$(K.KP<0 & K.KR>0),_tab,'MR');
   _tab.efld_opt(_wnd,'mark='+$(K.KP<0 & K.KS<0),_tab,'MR')
?}


\k_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed usunięciem pożyczki.
::   WE:
::   WY:
::  OLD: \K_usprz/war_tech.fml
::  OLD: \KREusprz/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
_test:=1;
KRE_HIS.cntx_psh();
{? exec('kre_his_jest','!ppl_pll_rpoz',K.ref())
|| _test:=FUN.ask(
      'Pożyczka "%1" udzielona dnia %2 jest rozliczana.\n'
      'Czy na pewno usunąć pożyczkę wraz z informacjami o rozliczeniu?'@
      [K.PO().RT,K.DU$6]
   )
?};
KRE_HIS.cntx_pop();
_test


\k_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza poprawność rekordu tabeli K.
::   WE:
::   WY:
::  OLD: \KRErekpo/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
_popraw:=-menu_txt()='popraw';

{? (_chk:=__CHK.record(K,,'PO','DU','DR'))<>''
|| return(_chk)

|? K.DU>K.DR
|| FUN.emsg('Data rozpoczęcia wpłat nie może być wcześniejsza od daty decyzji.'@);
   'DR'
|? K.KP<0 & fabs(K.KP)<K.KR
|| FUN.emsg('Kwota raty nie może być większa od kwoty początkowej.'@);
   'KR'
|? K.KP<0 & K.KS<0 & K.KR>0 & __CHK.record(K,,'MR')<>''
|| 'MR'
|? K.P().DZ<>#0 & K.P().DZ<K.DU
|| {? FUN.ask('%1\n%2'
         ['Data wydania decyzji o przyznaniu kredytu jest późniejsza niż data zakończenia współpracy.'@,
          'Czy kontynuować?'@]
      )
   || 1
   || 'DU'
   ?}
|? K.P().DZ<>#0 & K.P().DZ<K.DR
|| {? FUN.ask('%1\n%2'
         ['Data rozpoczęcia spłaty kredytu jest późniejsza niż data zakończenia współpracy.'@,'Czy kontynuować?'@]
      )
   || 1
   || 'DR'
   ?}
|| _ok:=1;
   _ref:={? _popraw || K.ref() || null() ?};
   _msg:='';
   K.cntx_psh();
   K.index('PRACPOZ');
   K.prefix(P.ref(),K.PO);
   {? K.first()
   || {!
      |? {? (K.KP<0 & K.KS<0) & K.ref()<>_ref
         || _msg+='Kredyt "%1" udzielony dnia %2 nie został jeszcze spłacony.'@[K.PO().RT,K.DU$6]+'\n'
         |? (K.KP>=0 & K.KR>0) & K.ref()<>_ref
         || FUN.emsg(
               'Wkład "%1" gromadzony od dnia %2 jest ciągle uwzględniany w rozliczaniach.\n'
               'Rejestracja nowego wkładu nie jest możliwa.'@
               [K.PO().RT,K.DU$6]
            );
            _ok:=0
         ?};
         _ok & K.next()
      !}
   ?};
   K.cntx_pop();
   {? _msg<>''
   || FUN.ask(_msg+'\n'+'Czy akceptujesz wprowadzone dane?'@)
   |? _ok
   || ''
   |? _popraw
   || 'KR'
   || 'PO'
   ?}
?}


\k_rozliczenie_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Historia pożyczki.
::  OLD: \_kre_his/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
exec('kre_his_jest','!ppl_pll_rpoz',K.ref());
KRE_HIS.win_sel('WER');
KRE_HIS.hdr_sel();
KRE_HIS.hdr_sel(': '+K.PO().RT);

KRE_HIS.select()


\kre_his_jest
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy dla wskazanego kredytu jest rozliczenie. Pozostawia ograniczoną dziedzinę rozliczenia.
::   WE: _a [_K] - wskazanie kredytu
::   WY: czy jest rozliczenie:
::       0 - nie
::       1 - tak
::----------------------------------------------------------------------------------------------------------------------
KRE_HIS.index('KRE_HIS');
KRE_HIS.prefix(_a);
KRE_HIS.first()


\kre_his_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz po dołączeniu rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KRE_akt/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

KRE_HIS.KREDYT();
K.put();
~~


\kre_his_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz po modyfikacji rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KRE_akt/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

KRE_HIS.KREDYT();
K.put();
~~


\kre_his_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz po  usunięciu rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KRE_akt/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? ~exec('get','#bulk',KRE_HIS,'del',$bfld('KREDYT'))
|| K.cntx_psh();
   K.prefix();
   {? K.seek(bfld('KREDYT'))
   || K.put()
   ?};
   K.cntx_pop()
?};
~~


\kre_his_kredyt_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Wartość początkowa pola KRE_HIS.KREDYT.
::  OLD: \kref/kali.fml
::----------------------------------------------------------------------------------------------------------------------
K.ref()


\kre_his_data_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola KRE_HIS.DATA.
::   WE:
::   WY:
::  OLD: \KHDTwp/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? date()<K.DR || K.DR || date() ?}


\kre_his_kwota_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola KRE_HIS.KWOTA.
::   WE:
::   WY:
::  OLD: \KHKWwp/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.KS<0 || fabs(K.KS) || K.KR ?}


\kre_his_opis_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola KRE_HIS.OPIS.
::   WE:
::   WY:
::  OLD: \KHOPwp/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
'KP'


\kre_his_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed dołączeniem rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KHdodprz/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? K.KP<0 & K.KS=0
|| FUN.info('Dołączenie zapisu nie jest możliwe, ponieważ kredyt został spłacony.'@);
   0
|| 1
?}


\kre_his_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed poprawieniem rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KHpopprz/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_lista','!ppl_pll_rpoz')
|| FUN.ask(
      'Bieżącego zapisu nie powinno się zmieniać, ponieważ kwota została przepisana z listy płac.\n'
      'Czy mimo to rozpocząć edycję?'@
   )
|| 1
?}


\kre_his_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed usunięciem rozliczenia kredytu.
::   WE:
::   WY:
::  OLD: \KHusuprz/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_lista','!ppl_pll_rpoz')
|| FUN.ask(
      'Bieżącego zapisu nie powinno się usuwać, ponieważ kwota została przepisana z listy płac.\n'
      'Czy mimo to kontynuować usuwanie danych?'@
   )
|| 1
?}


\czy_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza, czy opis z historii spłaty kredytu odpowiada istniejącej liście płac.
::   WE:
::   WY: 1 - opis jest znakiem istniejącej listy płac
::       0 - wpp
::----------------------------------------------------------------------------------------------------------------------
_test:=0;
O.cntx_psh();
O.index('LISTYPZN');
O.prefix(exec('ref_firma','ustawienia'));
_test:=O.find_key(-KRE_HIS.OPIS);
O.cntx_pop();
_test


\kre_his_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji danych w tabeli KRE_HIS.
::   WE:
::   WY:
::  OLD: \KHrekpo/kredyt.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(KRE_HIS,-menu_txt='popraw','DATA','KWOTA','OPIS');

{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
?};

{? KRE_HIS.DATA<K.DR
|| FUN.emsg('Data nie może być wcześniejsza od %1.'@[$K.DR]);
   'DATA'

|| _RS:=sql(
      'select sum(KRE_HIS.KWOTA) as SUMA from KRE_HIS where KRE_HIS.KREDYT=:_a'+
      {? -menu_txt()='popraw' || ' and KRE_HIS.REFERENCE<>:_b' || '' ?},
      KRE_HIS.KREDYT,
      KRE_HIS.ref()
   );
   {? K.KP<0 & K.KP+_RS.SUMA+KRE_HIS.KWOTA>0
   || FUN.emsg('Kwota nie może być większa od %1.'@[$fabs(K.KP+_RS.SUMA)]);
      'KWOTA'
   |? K.KP>=0 & K.KP+_RS.SUMA+KRE_HIS.KWOTA<0
   || FUN.emsg('Kwota nie może być mniejsza od %1.'@[$fabs(K.KP+_RS.SUMA)]);
      'KWOTA'
   || 1
   ?}
?}

:Sign Version 2.0 jowisz:1045 2024/01/23 15:48:18 dea362fcf052e74888888c5c08891b06e386486859d76f2dd6bbe6ac86e8bc463d297581a4c815b55f1ac305b7139b9c50e411cc9728a2b1b232046066901d23ade15830dfc4de46988a90ed0141095900307470daf03c2fbd4c231faf58c00f2670ab3149235ea0d0c8ef7405f28b9bd8e3ac034e6a893986fe57f08b5c7006
