:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_umo_eane.fml
:: Utworzony: 15.02.2019
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły czynności LUM_UMO_EANE
::            Aneksowanie umowy cyklicznej
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Czynność LUM_UMO_EANE - formuła główna
::   WE: _a - [obj_new] - parametry wejsciowe czynności
::       _b - [obj_new] - parametry wewnętrzne czynności
::       _c - [obj_new] - parametry wyjściowe czynności
::       _d - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ
::# kind=WE,   symbol=UM,  type=_UM,  name=Umowa cykliczna,     required=N, keyref=T
::# kind=WE,   symbol=STU, type=_STU, name=Status umowy,        required=N, keyref=N, fml_val="exec('wyb_stu','!lum_umo_eane')"
::# kind=WY,   symbol=UM,  type=_UM,  name=Umowa cykliczna,     required=N
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

exec('init','lum');

_akcja:=_mp.akcja();
_auto:=_akcja<>'Aneksuj' & (_mp.isAutoRun() | _mp.isService());
_proc:=_mp.pathProc();
_ToDo:=_mp.pathTodo();
_cancel:=0;
_autoakc:=exec('autoAkc','#b__box',_mp,100080,'LUM_UMO_EAUM');

{? ~(var_pres('UM',_in)=type_of(null()) & _in.UM) & ~(var_pres('UM',_out)=type_of(null()) & _out.UM)
|| _refum:=exec('selUmowy','umowy',1);
   {? _refum<>null()
   || _in.UM:=_refum;
      _mp.save(,_in)
   || _cancel:=1
   ?}
?};

_mp.trigRef('UM',,0,,exec('kind_out','#b_port'),'UM');

_ref_um:={? var_pres('UM',_out)=type_of(null()) & _out.UM || _out.UM || _in.UM ?};

{? _cancel
|| _mp.cancel()
|? ~(var_pres('UM',_in)=type_of(null()) & _in.UM) & ~(var_pres('UM',_out)=type_of(null()) & _out.UM)
|| _mp.error('Brak wymaganego parametru UM.')
|| _setinit:=0;
   {? var_pres('__xan_gen')<=0 || _setinit:=1; exec('init_set_aneks','umowy_aneks') ?};
   exec('zle_psh','open_tab');
   UM.cntx_psh();
   UM.prefix();
   {? ~UM.seek(_ref_um)
   || _mp.error('Nie znaleziono umowy.'@)
   || {? _r_lock:=exec('r_lock_one','#table',UM,UM.ref())
      || params_set('out',_out,'mp',_mp,'akcja',_akcja);
         {? _akcja='Zakończ_wer'
         || exec('zakoncz','umowy',_autoakc);
            {? UM.STAT_REJ<>'N' || _mp.done() ?}
         |? (_akcja='Aneksuj' |  _proc) & var_pres('__xan_gen')>0
         ||
:: dolacza nowy aneks
:: dziedzina dla UM musi pozostac niezmieniona!
            _pyt:=exec('get','#params',100176,2);
            _wyn:=null();
            UMAN.index('POZ');
            UMAN.prefix(UM.ref());
            UMAN.seek(__x_xan.UMD,UMAN.name());
            {? UM.seek(UM.ref())
            || _wyn:=exec('an_new','umowy_aneks',,,,_pyt='T')
            ?};
            {? _wyn<>null & (UM.prefix(); UM.seek(_wyn))
            || _out.UM:=_wyn;
               _mp.save(,_out);
               {? ~_proc
               || __xan_gen()
               || BPMN.END:=-1;
                  exec('up_sel','umowy');
                  {? BPMN.END=1
                  || exec('zakoncz','umowy',_autoakc);
                     {? UM.STAT_REJ<>'N' || _mp.done() ?}
                  ?}
               ?}
            || _mp.cancel()
            ?}
         |? _akcja='Popraw' & var_pres('__xan_gen')>0
         || {? UM.STU().A<>'T'
            || {? __x_xan.UMAN=0
               || __um("exec('um_pop','umowy')")
               || FUN.info('Edycja nagłówka umowy możliwa jedynie dla ostatniego aneksu.'@)
               ?}
            || __uman_um("exec('an_edit','umowy_aneks')")
            ?}
         |? _ToDo
            | _mp.pathArea() & _akcja=''
         || _var_umpop:=exec('var_umpop','umowy');
            _var_umpop.KH:=UM.KH;
            _var_umpop.KH_ODB:=UM.KH_ODB;
            _var_umpop.HAN:=UM.HAN;
            _var_umpop.DP:=UM.DP;
            _var_umpop.DPO:=UM.DPO;
            _var_umpop.OD:=UM.OD;
            _var_umpop.DO:=UM.DO;
            _var_umpop.TYP_HR:=UM.TYP_HR;
            _var_umpop.FAS:=UM.FAS;
            _var_umpop.CB:=UM.CB;
            _var_umpop.NRT:=UM.NRT;
            _var_umpop.PO_FIRST:=0;

            params_set('context',params_get(),'var_umpop',_var_umpop);

            _win_red:=exec('um_win_edit','umowy');
            _ff:="params_exec('um_pozycje_red','umowy')";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin,display=1'['&Pozycje'@],_ff);
            _ff:="params_exec('um_zakoncz_red','umowy'); 'key:Esc'";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Zakończ'@],_ff);
            _ff:="'key:Esc'";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
            UM.win_edit(_win_red);
            exec('set_efld_opt','umowy',_win_red);
            UM.display();
            {? UM.STAT_REJ<>'N' || _mp.done() ?};
::          Usunięcie definicji tymczasowych okien
            UM.win_edit(''); UM.win_edel(_win_red)
         || _mp.error('Nieobsługiwana ścieżka.')
         ?};
         exec('r_unlock_one','#table',UM,UM.ref(),_r_lock)
      || exec('who_rlock_um','umowy')
      ?}
   ?};
   UM.cntx_pop();
   exec('zle_pop','open_tab');
   {? _setinit || exec('done_set_aneks','umowy_aneks') ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_out:=_mp.load(exec('kind_out','#b_port'));

{? var_pres('UM',_in)<>type_of(~~) & _in.UM
|| 'Aneksuj umowę cykliczną: %1'@@[exec('record','#to_string',_in.UM)]
|? var_pres('UM',_out)<>type_of(~~) & _out.UM
|| 'Aneksuj umowę cykliczną: %1'@@[exec('record','#to_string',_out.UM)]
|| 'Aneksuj umowę cykliczną'@@
?}


\permissions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła na uprawnienia dla czynności
::   WE: params_get().in - parametry wejściowe czynności
::           params_get().user - użytkownik dla którego sprawdzane są uprawnienia
::           params_get().mp - Menedżer Procesów
::   WY: 0 - użytkownik nie ma uprawnień do czynności
::       1 - użytkownik ma uprawnienia do czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;
_wyn:=1;
_wyn


\umowa_aneksuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Akceptacja umowy cyklicznej
::  OLD: \um_stat/um.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_UMO_EANE';
_params.UIDREF:=UM.uidref();
_params.AKCJA:='Aneksuj';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
exec('mp_run','#b__box',_params);
~~


\aneksuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Akceptacja umowy
::   WE: [_a] - 1-automatycznie 0-nie(domyślnie)
::       [_b] - status umowy
::   WE: params_get()   - ustawiane w exec('main','!lum_umo_eaum')
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(1) || _a || 0 ?};
_stu:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_mp:=params_get().mp;
_in:=params_get().in;

_stu:={?  var_pres('STU',_in)=type_of(null()) & _in.STU || _in.STU || null() ?};

_result:=0;

{? ~(UM.STU().A='T' & UM.A='N' & UM.AN>0)
|| FUN.info('Umowa cykliczna nie jest aktywna lub nie spełnia warunków aneksownia.\nAneksowanie niemożliwe.'@);
   _mp.error('Umowa cykliczna nie jest aktywna lub nie spełnia warunków aneksownia. Aneksowanie niemożliwe.');
   _result:=1
|? UM.STU().RODZ='E'
|| {? ~_auto || FUN.info('Umowa cykliczna ma status aneksowanej.'@) ?};
   _result:=1;
   _mp.done()
|? UM.STAT_REJ='N'
|| FUN.info('Nie zakończono jeszcze rejestracji umowy cyklicznej.\nAneksowanie niemożliwe.'@);
   _mp.error('Nie zakończono jeszcze rejestracji umowy cyklicznej. Aneksowanie niemożliwe.');
   _result:=1
|? _auto | FUN.ask('Przesunąć umowę cykliczną %1 do aneksowanych?'@[UM.SYM])
|| {? exec('um_do_an','!lum_umo_eane',_stu)
   || UM.get();
      UM.STAT_REJ:='T';
      {? UM.put()
      || _result:=1;
         _mp.done()
      ?}
   ?}
?};

_result


\um_aneksuj_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Akceptuj z todo
::   WE: params_get()   - ustawiane w exec('main','!lum_umo_eane')
::----------------------------------------------------------------------------------------------------------------------
params_exec('aneksuj','!lum_umo_eane')


\wyb_stu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Wybór statusu
::----------------------------------------------------------------------------------------------------------------------
exec('stu_wyb','params',null(),"STU.RODZ='E'",-1)


\um_do_an
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: przesuwa do aneksowanych jeżeli umowa jest aktywna i nie ma wystawionych faktur
::   WE: [_a] - status umowy
::   WY: 1-powiodło się 0-nie
::  OLD: \um_do_an/um2.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
UM.cntx_psh();

_kst_sta:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || exec('kst_ste','umowy_wspolne') ?};
{? UM.r_lock(1,1,1)
||
   UM.r_unlock();
   {? UM.STU().A='T' & UM.A='N' & UM.AN>0 & _kst_sta<>null
   || echo('Sprawdzam zgłoszenia ... proszę czekać'@);
      _um:=UM.ref();
      UM.cntx_psh();
      _od:=exec('um_sp_dt','umowy_aneks',_um);
      UM.cntx_pop();
      {? _od=date(0,0,0) || _od:=UM.OD ?};

      _do:=exec('d_hgen_do','umowy_wspolne',UM.ODDZ);

      echo('Sprawdzam zgłoszenia ... proszę czekać'@);
      {? exec('um_sp_us','umowy_aneks',_um,_od,_do,1,1,0);n_fakt=1
      ||
         echo('Usuwam zgłoszenia .... proszę czekać');
         {? exec('usu_mmm','umowy_wspolne',_um,_od,_do,1,0,0)
         ||
            UM.clear();
            UM.seek(_um);
            UM.STU:=_kst_sta;
            {? UM.put() || _res:=1 ?};

            ZMIENNE.STAUM_MM:=1;
            echo('Odtwarzam zgłoszenia ... proszę czekać'@);
            exec('um_gen','umowy_zlecenia',_um,_od,_do,0);
            ZMIENNE.STAUM_MM:=0
         ?}
      ?}
   ||
      FUN.info('Aneksowanie umowy niemożliwe.'@)
   ?}
||
   {? FUN.ask('Umowę %1 obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@[UM.SYM])
   || UM.r_lock(1,,1)
   ?}
?};
echo();
UM.cntx_pop();
UM.get();
_res


:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 a47aa43ee4a3884ece40ee04ff413a8029fd034199c8529a5339f0594e85c8efc9b09e4d04adcdaae921e0e922ab6fd73f9db31de0898537b5ebb972849e9870714f221e3bc22f4d99a3a0050cbe45db826b93038b6793685743836907ccf030e43491c5a3183c6ee181d04a1001acd039d41a943326c935cea9a25fb42fa90a
