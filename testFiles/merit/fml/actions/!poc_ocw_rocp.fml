:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !poc_ocw_rocp.fml
:: Utworzony: 28.09.2017
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły czynności POC_OCW_ROCP - Rejestracja oceny.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Rejestracja oceny - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# access=exec('access','!poc_ocw_rocp')
::
::# kind=WE, symbol=ZO_FORM, type=_ZO_FORM, name=Formularz oceny cząstkowej, required=T, keyref=T
::
::# kind=WY, symbol=ZO_FORM, type=_ZO_FORM, name=Formularz oceny uzgodnionej, required=N
::# kind=WY, symbol=KOMPLET, type=STRING, name=Ocena kompletna (T/N), required=N
::
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_context:=_par.context;
_akcja:=_mp.akcja();

{? _akcja='webTermProcCancel'
|| return(~~)
?};

{? _mp.isMicro()
|| _mp.done()
|? _akcja='OCENA'
|| _mp.keep()
|? _akcja='ZAKOŃCZ'
|| _pars:=exec('get_pars_out','!poc_ocw_rocp',_in.ZO_FORM);
   _out.ZO_FORM:=_pars.ZO_FORM;
   _out.KOMPLET:=_pars.KOMPLET;
   _mp.save(,_out);
   _mp.done()
?};
~~


\web_main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Rejestracja oceny (webTerm) - główna formuła czynności.
::   WE:  _a  [STRING]    - Miejsce wywołania (Proc, Todo, Area).
::       [_b] [REFERENCE] - Wskazanie na instancję procesu (dla Proc i Todo).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='Area' | _a='Proc' | _a='Todo')
|| _path:=_a
|| return()
?};

{? _path='Area'
:: Uruchomienie z obszaru roboczego. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
|| _web_params:=web_params_get(1);

   {? ref_tab(_web_params.B_PREL)=BI_PREL
::    Kontynuacja czynności.
   || _bi_prel:=exec('FindAndGet','#table',BI_PREL,_web_params.B_PREL);
      _b_ele:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL().B_ELE",null());

      _kind_in:=exec('kind_in','#b_port');
      _in:=exec('getPorts','#b_port',_b_ele,_kind_in,_bi_prel);
      exec('fillPorts','#bi_port',_bi_prel,_kind_in,_in)

::    Mikroczynność lub start procesu.
   || _bi_prel:=null();
      _b_prel:=exec('FindAndGet','#table',B_PREL,_web_params.B_PREL);
      _b_ele:=exec('FindAndGet','#table',B_PREL,_b_prel,,"B_ELE",null());
      _in:=exec('get_act_proc_params','#b__box',_web_params.ACT_UID,_b_prel,_web_params.PORTS_IN)

   ?};

   _args:=exec('obj_ntab_set','#array',,
      'ZO_FORM',$_in.ZO_FORM,
      'path',_path,
      'web_run',
         "  {? ~exec('env_wt','poc')
            || FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
            || _wp:=web_params_get();
               exec('web_run','#b__box',_wp.B_PREL,_wp.AKCJA,_wp.PORTS_IN,'web_Area')
            ?}
         "
   );

   {? _web_params.AKCJA='OCENA'
   || exec('akcja_ocena','!poc_ocw_rocp',_args)
   |? _web_params.AKCJA='ZAKOŃCZ'
   || exec('akcja_zakoncz','!poc_ocw_rocp',_args)
   ?};

   ~~

|? _path='Todo'
:: Uruchomienie z listy zadań (czynność w procesie, wywołana z parametrem - wskazaniem formularza).  - - - - - - - - - -
|| {? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=BI_PREL
   || _bi_prel:=_b
   || return()
   ?};

   {? exec('env_wt','poc',0)
::    Startujemy z listy zadań - konieczne jest ustawienie środowiska.
   || _b_ele:=exec('FindAndGet','#table',BI_PREL,_bi_prel,,"B_PREL().B_ELE",null());

      _kind_in:=exec('kind_in','#b_port');
      _in:=exec('getPorts','#b_port',_b_ele,_kind_in,_bi_prel);
      exec('fillPorts','#bi_port',_bi_prel,_kind_in,_in);

      _args:=exec('obj_ntab_set','#array',,
         'ZO_FORM',$_in.ZO_FORM,
         'path',_path,
::       Tutaj web_run jest napisem (""+''+"") a nie formułą. Napisem, w którym metakod '[AKCJA]' w odpowiednim momencie
::       jest zamieniany na 'OCENA' lub 'ZAKOŃCZ'.
         'web_run',
            "  {? ~exec('env_wt','poc')
               || FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
               || exec('web_run','#b__box','"+$_bi_prel+"','[AKCJA]',,'web_Todo')
               ?}
            "
      );
      exec('todo','!poc_ocw_rocp',_args)
   ?}

|? _path='Proc'
:: Uruchomienie z pulpitu (czynność startowa).   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:: Czynność wymaga parametru wejściowego - nie może być czynnością startową.
|| ~~
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Rejestracja oceny (webTerm) - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_tab:=exec('init_desc_tab','pracownik');
_zzTypKod:='';
_zoProcPlanDo:='';

{? (app_info('web_tabid')='' | exec('env_wt','poc',1)) & type_of(_in.ZO_FORM)=type_of(null()) & _in.ZO_FORM<>null()
|| _env:=exec('zo_form_about','!poc_ocw_rocp',$_in.ZO_FORM);
   {? _env.ZO_TEST
   || _zzTypKod:=_env.ZZ_TYP_KOD;
      ZO_PROC.cntx_psh();
      ZO_PROC.prefix();
      {? ZO_PROC.seek(_env.ZO_PROC) & ZO_PROC.PLAN_DO<>date(0,0,0)
      || _zoProcPlanDo:=$ZO_PROC.PLAN_DO
      ?};
      ZO_PROC.cntx_pop();
      OSOBA.cntx_psh();
      OSOBA.prefix();
      P.cntx_psh();
      P.prefix();
      {? P.seek(_env.P,,1)
      || _tab.ZAW_DANE:='T';
         _tab.NAZWISKO:=P.OSOBA().NAZWISKO;
         _tab.PIERWSZE:=OSOBA.PIERWSZE;
         _tab.OBCY:=OSOBA.OBCY;
         _tab.PASZPORT:=OSOBA.PASZPORT;
         _tab.PESEL:=OSOBA.PESEL;
         _tab.UR_DATA:=$OSOBA.UR_DATA;
         _tab.T:=P.T;
         _tab.IP:=$P.IP
      ?};
      P.cntx_pop();
      OSOBA.cntx_pop()
   ?}
?};

{? +_zzTypKod
|| {? +_zoProcPlanDo
   || {? _tab.ZAW_DANE='T'
      || {? _tab.OBCY='T'
         || 'Zarejestruj ocenę (%1) do dnia %2 dla: %3 %4: Paszport - %5, Numer teczki - %6, Identyfikator - %7'@@
               [_zzTypKod,_zoProcPlanDo,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
         |? +_tab.PESEL
         || 'Zarejestruj ocenę (%1) do dnia %2 dla: %3 %4: PESEL - %5, Numer teczki - %6, Identyfikator - %7'@@
               [_zzTypKod,_zoProcPlanDo,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
         || 'Zarejestruj ocenę (%1) do dnia %2 dla: %3 %4: Data urodzenia - %5, Numer teczki - %6, Identyfikator - %7'@@
               [_zzTypKod,_zoProcPlanDo,_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
         ?}
      || 'Zarejestruj ocenę (%1) do dnia %2'@@[_zzTypKod,_zoProcPlanDo]
      ?}
   || {? _tab.ZAW_DANE
      || {? _tab.OBCY='T'
         || 'Zarejestruj ocenę (%1) dla: %2 %3: Paszport - %4, Numer teczki - %5, Identyfikator - %6'@@
               [_zzTypKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
         |? +_tab.PESEL
         || 'Zarejestruj ocenę (%1) dla: %2 %3: PESEL - %4, Numer teczki - %5, Identyfikator - %6'@@
               [_zzTypKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
         || 'Zarejestruj ocenę (%1) dla: %2 %3: Data urodzenia - %4, Numer teczki - %5, Identyfikator - %6'@@
               [_zzTypKod,_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
         ?}
      || 'Zarejestruj ocenę (%1)'@@[_zzTypKod]
      ?}
   ?}
|| 'Zarejestruj ocenę'@@
?}


\access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła uprawnień, decyduje o tym, czy dany użytkownik może uruchomić bieżącą instancję czynności.
::   WE:
::   WY: 0 - Użytkownik nie ma uprawnień do wykonania bieżącej instancji czynności.
::       1 - Użytkownik ma uprawnienia do wykonania bieżącej instancji czynności.
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());

_mp:=_par.mp;
_in:=_par.in;
:: Użytkownik weryfikowany (być może zastępujący).
_user:=_par.user;
:: Użytkownik zastępowany lub ~~.
_user_r:=_par.user_r;

_ret:=0;

_usr:={? _user_r=~~ || _user || _user_r ?};
_osoba:=exec('FindAndGet','#table',USERS,_usr,,"OSOBA",null());
{? _osoba=null()
|| return(_ret)
?};

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? var_pres('ZO_FORM',_in)=type_of(null()) & _in.ZO_FORM<>null() & ZO_FORM.seek(_in.ZO_FORM)
|| ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();
   _link:=ZO_FORM.ZZ_KTO().ZZ_LINK;
   ZZ_OSOBA.cntx_pop();

   P.use('pracowni');
   P.cntx_psh();
   P.index('ZZ_DOK');
   P.prefix(ref_name(_link),_link);
   _ret:=P.first() & P.OSOBA=_osoba;
   P.cntx_pop()

:: Jeżeli jest jakiś problem z parametrem wejściowym (np. rekord formularza został usunięty), to
:: na uruchomienie czynności pozwólmy każdemu. Tylko w ten sposób możemy sprawić, aby czynność zwinęła się.
|| _ret:=1
?};
ZO_FORM.cntx_pop();

_ret


::======================================================================================================================
:: Formuły główne - wywołujące obsługę poszczególnych elementów oceny pracownika oraz wspólne (biblioteczne),
::======================================================================================================================


\akcja_ocena
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Właściwa obsługa akcji "Ocena".
::   WE: _a [ARRAY] - Tablica z parametrami.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_env:=exec('zo_form_about','!poc_ocw_rocp',_args.ZO_FORM);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_menu:='web_popup(1,\'%1 %2 (%3 - %4)\'' [_env.NAZWISKO,_env.PIERWSZE,_env.ZZ_TYP_KOD,_env.ZZ_TYP_NAZWA];
_deo:=exec('dostepne_elementy_oceny','!poc_ocw_rocp',_args.ZO_FORM,$P.ref(),$_env.P);
_nazwa:=obj_ntab_names(_deo);
{! _lp:=1 .. obj_len(_nazwa)
|! {? _deo[_lp].dostep
   || _menu+=
         ',\n\'%1\''
         ',\'%1\'' [_deo[_lp].nazwa]+
::       Przed wywołaniem właściwej formuły obsługi pozycji menu ustawiane jest środowisko. Dodatkowo, jeżeli jesteśmy
::       w obsłudze obszaru, to podczytywany jest rekord tabeli WT_ZOS.
         ',"'
         'web_params_set(web_params_get()); '
         '{? exec(\'env_wt\',\'poc\') '+
          {? _args.path='Area' || '& WT_ZOS.web_cntx_load(1)>0 ' || '' ?}+
         '|| exec(\'eloc_%1\',\'!poc_ocw_rocp\',\'%2\',\'%3\',\\"%4\\") '
         '?}'
         '"'
         [_nazwa[_lp],_args.ZO_FORM,_args.path,$_args.web_run]
   ?}
!};
_menu+='\n)';

($_menu)();

~~


\akcja_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [18.02]
:: OPIS: Właściwa obsługa akcji "Zakończ".
::   WE: _a [ARRAY] - Tablica z parametrami.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_args.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_kto_dok:=P.ZZ_DOK;
_kto:=P.ref();

_kogo:=_env.P;
_kogo_dok:=_env.P_ZZ_DOK;

_tab:=tab_tmp(,
   'NR','INTEGER','NR',
   'INFO','INTEGER','INFO',
   'NAZ','STRING[50]','Nazwa elementy'
);

{? _args.path='Area'
|| WT_ZOS.web_cntx_save(1)
|? _args.path='Todo'
:: Przy obsłudze z listy zadań, trafiliśmy tutaj z okienku tymczasowego web_define. Tak więc
:: najpierw trzeba odtworzyć bufor tabeli BI_TODO, aby móc go ponownie zapamiętać do wykorzystania
:: wewnątrz web_ask().
|| BI_TODO.web_cntx_load(1);
   BI_TODO.web_cntx_save(1)
?};

ZO_FORM.cntx_psh();
ZO_TEST.prefix();
P.prefix();
ZO_FORM.prefix();
{? ZO_FORM.seek(_args.ZO_FORM)
|| {? exec('ocena_akc','phr_dane',ZO_FORM.ref(),_tab,$_kto,$_env.ZO_TEST)=''
   || _closing:=0;
      _TEST:=sql('select * from ZO_FORM where ZO_FORM.Z=\'N\' and ZO_FORM.ZO_TEST=\':_a\'',$_env.ZO_TEST);
      {? _TEST.size()=1
      || _closing:=1
      ?};
      web_params_set(
         exec('obj_ntab_set','#array',web_params_get(1),
               'ZO_FORM',_args.ZO_FORM,
               'path',_args.path,
               'web_run',_args.web_run,
               'closing',_closing
              )
         );
      _zamknij:="
         _args:=web_params_get();
         {? _a & exec('env_wt','poc')
         || ZO_FORM.cntx_psh();
            ZO_FORM.prefix();
            {? ZO_FORM.seek(_args.ZO_FORM)
            || ZO_FORM.DATA:=date();
               ZO_FORM.Z:='T';
               ZO_FORM.put();
               {? _args.path='Area' & WT_ZOS.web_cntx_load(1)>0
               || {? ZO_FORM.ZZ_TYP().KOD='OU' | _args.closing
                  || WT_ZOS.KOMPLET:='T'
                  ?};
                  WT_ZOS.EDYTUJ:='N';
                  WT_ZOS.put();
                  WT_ZOS.web_refresh('GWER','zos')
               |? _args.path='Todo' & BI_TODO.web_cntx_load(1)>0
               || web_def_close();
                  BI_TODO.web_refresh(web_top_win(1))
               ?};
               _args.web_run()
            ?};
            ZO_FORM.cntx_pop()
          ?}
         ";
         web_ask(_zamknij,
            'Czy na pewno zamknąć formularz oceny?\n'
            'Dalsza możliwość edycji formularza zostanie zablokowana.'@,
             FUN.TYT
         )
   || _txt:='';
      {? _tab.first()
      || {!
         |? _txt+='\n %1. %2' [$_tab.NR,_tab.NAZ];
            _tab.next()
         !}
      ?};
      FUN.info('Proszę uzupełnić brakujące elementy:'@+_txt)
   ?}
?};
ZO_FORM.cntx_pop();
~~


\zo_form_about
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła zwraca przydatne informacje na podstawie formularza.
::       Zakłada się, że środowisko zostału już ustalone przed wywołaniem bieżącej formuły (w szczególności otwarta jest
::       prawidłowa maska tabeli P).
::   WE: _a [STRING] - SQL-ref formularza.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};

:: Uwaga: pamiętajmy o ograniczonej liczbie parametrów formuły!
_ret:=exec('obj_ntab_set','#array',,
:: Wskazanie oceny całkowitej
   'ZO_TEST',null(),
:: Oceniany
   'ZZ_OSOBA',null(),
   'P',null(),
   'P_ZZ_DOK',null(),
   'OSOBA',null(),
   'NAZWISKO','',
   'PIERWSZE','',
:: Rola oceniającego
   'ZZ_TYP_KOD','',
   'ZZ_TYP_NAZWA','',
:: Program i sesja
   'ZO_PROG',null(),
   'ZO_PROC',null()
);

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_zo_form)
|| _ret.ZO_TEST:=ZO_FORM.ZO_TEST;
   ZO_PROG.cntx_psh();
   ZO_PROG.prefix();
   ZO_PROC.cntx_psh();
   ZO_PROC.prefix();
   ZZ_OSOBA.cntx_psh();
   ZZ_OSOBA.prefix();
   ZO_OSOBA.cntx_psh();
   ZO_OSOBA.prefix();
   ZO_OSTYP.cntx_psh();
   ZO_OSTYP.prefix();
   ZZ_TYP.cntx_psh();
   ZZ_TYP.prefix();


   ZO_FORM.ZZ_KOGO();
   _ret.ZZ_OSOBA:=ZZ_OSOBA.ref();
   _ret.NAZWISKO:=ZZ_OSOBA.NAZWISKO;
   _ret.PIERWSZE:=ZZ_OSOBA.PIERWSZE;
   P.cntx_psh();
   P.index('ZZ_DOK');
   P.prefix(ref_name(ZZ_OSOBA.ZZ_LINK),ZZ_OSOBA.ZZ_LINK);
   {? P.first()
   || _ret.P:=P.ref();
      _ret.P_ZZ_DOK:=P.ZZ_DOK;
      _ret.OSOBA:=P.OSOBA
   ?};
   P.cntx_pop();

   ZO_FORM.ZO_OSTYP();
   _ret.ZZ_TYP_KOD:=ZO_OSTYP.ZZ_TYP().KOD;
   _ret.ZZ_TYP_NAZWA:=ZO_OSTYP.ZZ_TYP().NAZWA;
   _ret.ZO_PROG:=ZO_OSTYP.ZO_OSOBA().ZO_PROC().ZO_PROG;
   _ret.ZO_PROC:=ZO_PROC.ref();

   ZZ_TYP.cntx_pop();
   ZO_OSTYP.cntx_pop();
   ZO_OSOBA.cntx_pop();
   ZZ_OSOBA.cntx_pop();
   ZO_PROC.cntx_pop();
   ZO_PROG.cntx_pop();

   ~~
?};
ZO_FORM.cntx_pop();

_ret


\dostepne_elementy_oceny
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła zwraca tablicę elementów nazwanych z flagami dostępności elementów oceny dla bieżącego (zalogowanego)
::       użytkownika.
::       Uwaga: kolejność elementów determinuje kolejność pozycji w menu, a nazwy elementów - nazwy wywoływanych formuł.
::   WE: _a [STRING] - Wskazanie (SQL-ref) formularza (ZO_FORM).
::       _b [STRING] - Wskazanie (SQL-ref) pracownika oceniającego (P).
::       _c [STRING] - Wskazanie (SQL-ref) pracownika ocenianego (P).
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_zo_form:={? var_pres('_a')=type_of('') & +_a=16 & ref_num(_a) & ref_tab(_a)=ZO_FORM || _a || '' ?};
_kto:={? var_pres('_b')=type_of('') & +_b=16 & ref_num(_b) & ref_tab(_b)=P || _b || '' ?};
_kogo:={? var_pres('_c')=type_of('') & +_c=16 & ref_num(_c) & ref_tab(_c)=P || _c || '' ?};

_upr:=(_kto=_kogo | exec('isManager','phr_dane',_kto,_kogo));
_pozostale:=exec('perm_element','!poc_ocw_rocp',_zo_form);
_komentarze:=exec('perm_komentarze','!poc_ocw_rocp',_zo_form);

_deo:=exec('obj_ntab_set','#array',,
   'kompetencje',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'cele',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'kariera',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'mobilnosc',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'rozwoj',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'pozostale',exec('obj_ntab_set','#array',,'nazwa','Pozostałe elementy oceny'@,'dostep',_pozostale),
   'komentarze',exec('obj_ntab_set','#array',,'nazwa','','dostep',_komentarze),
   'statystyki',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'kwalifikacje',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'szkolenia',exec('obj_ntab_set','#array',,'nazwa','','dostep',0),
   'dokumenty',exec('obj_ntab_set','#array',,'nazwa','Dokumenty'@,'dostep',_upr)
);

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
{? _PERM.first()
|| _fn:="_a.dostep:=1; _a.nazwa+={? _a.nazwa='' || '' || ' / ' ?}+_b.NAZWA";
   {!
   |? {? _PERM.VIEW='T' | _PERM.EDIT='T'
      || {? _PERM.SYSTEM='N'
         || _deo.pozostale.dostep:=1
         || _kod:=_PERM.KOD;
            {? _kod='OK'
            || _fn(_deo.kompetencje,_PERM)
            |? _kod='CW' | _kod='CN'
            || _fn(_deo.cele,_PERM)
            |? _kod='RK'
            || _fn(_deo.kariera,_PERM)
            |? _kod='MB'
            || _fn(_deo.mobilnosc,_PERM)
            |? _kod='PS'
            || _fn(_deo.rozwoj,_PERM)
            |? _kod='OPK' | _kod='OPP' | _kod='POO'
            || _fn(_deo.komentarze,_PERM)
            |? _kod='WP' | _kod='ST'
            || _fn(_deo.statystyki,_PERM)
            |? _kod='KD'
            || _fn(_deo.kwalifikacje,_PERM)
            |? _kod='SZ'
            || {? _upr
               || _fn(_deo.szkolenia,_PERM)
               ?}
            ?}
         ?}
      ?};
      _PERM.next()
   !}
?};

_deo


\todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa czynności z listy zadań.
::   WE: _a [ARRAY] - Tablica z parametrami.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_env:=exec('zo_form_about','!poc_ocw_rocp',_args.ZO_FORM);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

:: Zapamiętujemy aktualny stan tabeli BI_TODO (zwłaszcza, że jest maskowalna), aby móc go odtworzyć / odświeżyć podczas
:: ewentualnej akcji Zakończ.
BI_TODO.web_cntx_save(1);

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ZO_FORM',_args.ZO_FORM,
      'path',_args.path,
      'web_run',_args.web_run
   )
);

_szer:=50;
_def:=web_define();

ZO_PROG.cntx_psh();
ZO_PROG.prefix();
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_env.ZO_PROC) & ZO_PROC.ZO_PROG().get()
|| web_def_sep(_def,'Program'@);
   web_def_fld(_def,'ZO_PROG',ZO_PROG.NAZWA,'Nazwa'@,'Nazwa programu'@,_szer,,,'editable=0');
   web_def_sep(_def,'Sesja'@);
   web_def_fld(_def,'ZO_PROC_OD1',ZO_PROC.OKRES_OD,'Od dnia (okres)'@,
      'Początek okresu podlegającego ocenie'@,,,,'editable=0');
   web_def_fld(_def,'ZO_PROC_DO1',ZO_PROC.OKRES_DO,'Do dnia (okres)'@,
      'Koniec okresu podlegającego ocenie'@,,,,'editable=0');
   web_def_fld(_def,'ZO_PROC_OD2',ZO_PROC.PLAN_OD,'Od dnia (wykonanie)'@,
      'Początek zaplanowanego okresu przeprowadzenia ocen'@,,,,'editable=0');
   web_def_fld(_def,'ZO_PROC_DO2',ZO_PROC.PLAN_DO,'Do dnia (wykonanie)'@,
      'Koniec zaplanowanego okresu przeprowadzenia ocen'@,,,,'editable=0')
?};
ZO_PROC.cntx_pop();
ZO_PROG.cntx_pop();


web_def_sep(_def,'Osoba oceniana'@);
web_def_fld(_def,'NAZWISKO',_env.NAZWISKO,'Nazwisko'@,'Aktualne nazwisko'@,_szer,,,'editable=0');
web_def_fld(_def,'PIERWSZE',_env.PIERWSZE,'Imię'@,'Pierwsze imię'@,_szer,,,'editable=0');

P.cntx_psh();
P.prefix();
{? P.seek(_env.P)
|| UD_SKL.cntx_psh();
   UD_SKL.prefix();
   P.WYDZIAL();
   web_def_fld(_def,'JOS',UD_SKL.SYMBOL,'Jednostka organizaycjna - symbol'@,
      'Symbol jednostki organizacyjnej'@,_szer,,,'editable=0');
   web_def_fld(_def,'JON',UD_SKL.OPIS,'Jednostka organizaycjna - nazwa'@,
      'Nazwa jednostki organizacyjnej'@,_szer,,,'editable=0');
   UD_SKL.cntx_pop();

   STN.cntx_psh();
   STN.prefix();
   web_def_fld(_def,'STN',P.ST().ST,'Stanowisko'@,'Nazwa stanowiska'@,_szer,,,'editable=0');
   STN.cntx_pop()
?};
P.cntx_pop();

web_def_btn(_def,'OCENA','text=%1' ['Ocena'@]);
web_def_btn(_def,'ZAKOŃCZ','text=%1,icon=%2' ['Zakończ'@,exec('zakoncz','#icon')]);
web_def_btn(_def,'ZAMKNIJ','text=%1,icon=%2' ['Zamknij'@,exec('anuluj','#icon')]);
web_def_edit(_def,
   "  {? _a='ZAMKNIJ'
      || web_def_close()
      |? exec('env_wt','poc')
      || web_params_set(_par:=web_params_get());
         _args:=exec('obj_ntab_set','#array',,
            'ZO_FORM',_par.ZO_FORM,
            'path',_par.path,
::          W web_run podmieniamy metakod [AKCJA] na faktycznie wykonywaną akcję, a napis konwertujemy do formuły.
            'web_run',$gsub(_par.web_run,'[AKCJA]',_a)
         );
         {? _a='OCENA'
         || exec('akcja_ocena','!poc_ocw_rocp',_args)
         |? _a='ZAKOŃCZ'
         || exec('akcja_zakoncz','!poc_ocw_rocp',_args)
         ?}

      ?}
   ",'Zarejestruj ocenę (%1 - %2)'@ [_env.ZZ_TYP_KOD,_env.ZZ_TYP_NAZWA]);
~~


\get_pars_out
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła zwraca parametry wyjściowe dla czynności.
::   WE: _a - wskazanie na formularz oceny (ZO_FORM).
::   WY: Obiekt z parametrami wyjściowymi czynności.
::----------------------------------------------------------------------------------------------------------------------
_pars:=obj_new('ZO_FORM','KOMPLET');
_pars.KOMPLET:='N';
_pars.ZO_FORM:=null();

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_a)
|| _tab:=sql('
      select
         ZZ_TYP.KOD as KOD,
         ZO_FORM.REFERENCE as REF
      from
         ZO_FORM join
         ZZ_TYP using(ZO_FORM.ZZ_TYP,ZZ_TYP.REFERENCE)
      where ZO_FORM.ZO_TEST=\':_a\' and ZO_FORM.Z=\'N\'',
         $ZO_FORM.ZO_TEST
   );
   {? ~_tab.first()
   || _pars.KOMPLET:='T'
   ?};
   {? _tab.size()=1 & _tab.first() & _tab.KOD='OU'
   || _pars.ZO_FORM:=exec('FindAndGet','#table',ZO_FORM,_tab.REF,,,null())
   ?}
?};
ZO_FORM.cntx_pop();
_pars


\perm_komentarze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła sprawdza uprawnienia do elementów znajdujących się w zakładce 'Komentarze'.
::       Odpowiada na pytanie czy osoba oceniająca ma widzieć zakładkę w menu wyboru.
::   WE: _a - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_PERM:=exec('get_form_perm','phr_dane',_a);
_ret:=0;
{? _PERM.find_key('OPK',) | _PERM.find_key('OPP',) | _PERM.find_key('POO',)
|| {? _PERM.VIEW='T'
   || _ret:=1
   ?}
?};
_ret


\perm_element
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła sprawdza uprawnienia do elementów znajdujących się w zakładce 'Pozostałe elementy oceny'.
::       Odpowiada na pytanie czy osoba oceniająca ma widzieć zakładkę w menu wyboru.
::   WE: _a - wskazanie na formularz oceny.
::----------------------------------------------------------------------------------------------------------------------
_PERM:=exec('get_form_perm','phr_dane',_a);
_ret:=0;
_zz_link:=null();
ZO_FORM.cntx_psh();
ZO_FORM.prefix();
ZF_WYK.cntx_psh();
ZF_WYK.index('UNIQUE');
ZO_ASP.cntx_psh();
ZO_ASP.index('NAZWA');
{? ZO_FORM.seek(_a)
|| _testdok:=ZO_FORM.ZO_TEST().ZZ_DOK;
   ZF_WYK.prefix(ref_name(_testdok),_testdok);
   {? ZF_WYK.first()
   || _zz_link:=ZF_WYK.ZZ_LINK
   ?}
?};
ZO_ASP.prefix(ref_name(_zz_link),_zz_link);
{? _PERM.first()
|| {!
   |? {? ZO_ASP.find_key('T','T',_PERM.NAZWA) & _PERM.SYSTEM='N' & _PERM.VIEW='T'
      || _ret:=1;
         ZO_ASP.cntx_pop();
         ZF_WYK.cntx_pop();
         ZO_FORM.cntx_pop();
         return(_ret)
      ?};
      _PERM.next()
   !}
?};
ZO_ASP.cntx_pop();
ZF_WYK.cntx_pop();
ZO_FORM.cntx_pop();
_ret


::======================================================================================================================


\eloc_kompetencje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [17.42]
:: OPIS: Obsługa elementu oceny - "Oceny kompetencji".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
_edit:=_view:=0;
{? _PERM.find_key('OK',)
||  _edit:=_PERM.EDIT='T';
    _view:=_PERM.VIEW='T'
?};
{? ~_edit & ~_view
|| FUN.info('Brak uprawnień do pozycji formularza oceny.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(1),
      'ZO_FORM',_zo_form,
      'web_run',_web_run,
      'KTO',P.ref(),
      'KOGO',_env.P,
      'ZO_TEST',_env.ZO_TEST
       )
);


ZO_KOMP.web_win_init('WT_ZKOMP',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
ZO_KOMP.web_select('WT_ZKOMP',,,,$("ZO_KOMP.web_close(); "+_web_run));
~~


\eloc_cele
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Cele".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::       Cele są prezentowane poprzez rekordy dedykowanej tabeli WT_ZCEL, w trzech zakładkach.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

{? _info:=exec('zo_proc_get_info','!poc_ocw_rocp',_env.ZO_PROG,_env.ZO_PROC);
   _info.status<>''
|| FUN.emsg(
      'Odnalezienie programu [%1] i/lub sesji [%2] ocen nie powiodło się.\n%3'@
      [$_env.ZO_PROG,$_env.ZO_PROC,_info.status]
   );
   return()
?};

:: Ewentualne czyszczenie danych.
exec('wt_zcel_clean','poc',3);

WT_ZCEL.cntx_psh();
WT_ZCEL.index('KOD');
WT_ZCEL.prefix(app_info('web_tcid'),app_info('web_sesid'),app_info('web_tabid'),);

:: Teraz aktualizacja danych ...
:: UWAGA: logika określająca przynależność danego celu do konkretnej zakładki realizowana jest również podczas akcji
::        dołączania nowego rekordu. Ewentualne zmiany muszą być nanoszone w obu miejscach.
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
ZO_CEL.cntx_psh();
ZO_CEL.index('ZO_PROG');
ZO_CEL.prefix(_env.ZO_PROG,_env.ZZ_OSOBA);
_loop:=ZO_CEL.first();
{!
|? _loop
|! {? ZO_CEL.ZO_PROC=null() & (_info.cur.OD<=ZO_CEL.OKRES_DO & ZO_CEL.OKRES_DO<=_info.cur.DO)
   || ZO_CEL.ZO_PROC:=_env.ZO_PROC;
      ZO_CEL.put()
   ?};
:: Powyżej: przywiązanie celów do bieżącej sesji, której mogło nie być w momencie ich definiowania
:: Poniżej wypełnianie tabeli do prezentacji.
   WT_ZCEL.blank();
   WT_ZCEL.KOD:=exec('wt_zcel_get_kod','!poc_ocw_rocp',_info,);
   WT_ZCEL.ZO_CEL:=ZO_CEL.ref();
   {? WT_ZCEL.add()
   || _fh:=ZO_CEL.ZZ_DOK().memo_get('r','NOTA');
      {? _fh.is_open()
      || WT_ZCEL.memo_put(_fh,'NOTA');
         _fh.fclose()
      ?};
      obj_del(_fh)
   ?};

   _loop:=ZO_CEL.next()
!};
ZO_CEL.cntx_pop();
ZZ_DOK.cntx_pop();

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ZO_FORM',_zo_form,
      'path',_path
   )
);

:: Właściwe wertowanie danych.
_ws:='GWER';
WT_ZCEL.web_win_init(_ws,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
WT_ZCEL.web_select(_ws,,,,$("WT_ZCEL.web_close(); exec('wt_zcel_clean','poc',3); "+_web_run));
WT_ZCEL.cntx_pop();
~~


\eloc_kariera
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Rozwój kariery".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
_edit:=_view:=0;
{? _PERM.find_key('RK',)
||  _edit:=_PERM.EDIT='T';
    _view:=_PERM.VIEW='T'
?};
{? ~_edit & ~_view
|| FUN.info('Brak uprawnień do pozycji formularza oceny.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ZO_SK_WEBWER_AR',"exec('zo_sk_webwer_ar','!poc_ocw_rocp')",
      'ZZ_GOTW_WEBWER_AR',
         {? _edit
         || "  _ag:={? ZZ_GOTW.get() & ZZ_GOTW.POZIOM<>'T' || ':' || 'Z' ?};
               web_top_tab().web_win_opt(web_top_win(0,0),web_top_ident(0),'grayed='+_ag)
            "
         || "web_top_tab().web_win_opt(web_top_win(0,0),web_top_ident(0),'grayed=Z')"
         ?},
      'ZO_FORM',_zo_form,
      'path',_path
   )
);

ZO_SK.cntx_psh();
ZO_SK.index('TREE');
ZO_SK.prefix(_env.ZO_TEST);
:: Uzupełnienie gotowości (na wszelki wypadek).
{? ZO_SK.first()
|| {!
   |? exec('new_gotw','phr_dane',ZO_SK.ZZ_DOK);
      ZO_SK.next()
   !}
|| ZO_SK.blank();
   ZO_SK.KOGO:=_env.ZZ_OSOBA;
   ZO_SK.KTO_Z:=exec('czy_osoba','phr_dane',P,1);
   ZO_SK.ZO_TEST:=_env.ZO_TEST;
   ZO_SK.add()
?};
_ws:='WEBGWER';
ZO_SK.web_win_init(_ws,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
{? _edit
|| _ag:={? ZO_SK.first() & ZO_SK.STN || '' || 'D(P)PU' ?}
:: Jeżeli ocena nie jest przeznaczona do modyfikacji, wyszarzamy akcje modyfikujące zapisy.
|| _ag:='DPU'
?};
ZO_SK.web_win_init(_ws,'ZO_SK','grayed='+_ag);
ZO_SK.web_select(_ws,,,,$("ZO_SK.web_close(); "+_web_run));
ZO_SK.cntx_pop();

~~


\eloc_mobilnosc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Mobilność".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
_edit:=_view:=0;
{? _PERM.find_key('MB',)
||  _edit:=_PERM.EDIT='T';
    _view:=_PERM.VIEW='T'
?};
{? ~_edit & ~_view
|| FUN.info('Brak uprawnień do pozycji formularza oceny.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ZO_MOB_WEBWER_AR',"exec('zo_mob_webwer_ar','!poc_ocw_rocp')",
      'ZZ_GOTW_WEBWER_AR',
         {? _edit
         || "  _ag:={? ZZ_GOTW.get() & ZZ_GOTW.POZIOM<>'T' || ':' || 'Z' ?};
               web_top_tab().web_win_opt(web_top_win(0,0),web_top_ident(0),'grayed='+_ag)
            "
         || "web_top_tab().web_win_opt(web_top_win(0,0),web_top_ident(0),'grayed=Z')"
         ?},
      'ZO_FORM',_zo_form,
      'path',_path
   )
);

ZO_MOB.cntx_psh();
ZO_MOB.index('OCENAMOB');
ZO_MOB.prefix(_env.ZO_TEST);
:: Uzupełnienie gotowości (na wszelki wypadek).
{? ZO_MOB.first()
|| {!
   |? exec('new_gotw','phr_dane',ZO_MOB.ZZ_DOK);
      ZO_MOB.next()
   !}
?};
_ws:='WEBGWER';
ZO_MOB.web_win_init(_ws,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
{? ~_edit
:: Jeżeli ocena nie jest przeznaczona do edycji, wyszarzamy akcje modyfikujące zapisy.
|| ZO_MOB.web_win_init(_ws,'ZO_MOB','grayed=DPU:D')
?};
ZO_MOB.web_select(_ws,,,,$("ZO_MOB.web_close(); "+_web_run));
ZO_MOB.cntx_pop();
~~


\eloc_rozwoj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Obszary rozwojowe".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
_edit:=_view:=0;
{? _PERM.find_key('PS',)
||  _edit:=_PERM.EDIT='T';
    _view:=_PERM.VIEW='T'
?};
{? ~_edit & ~_view
|| FUN.info('Brak uprawnień do pozycji formularza oceny.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
::    Po odświeżeniu okna WEBWER tabeli SZK_ZAP - wyszarzanie przycisków.
      'SZK_ZAP_WEBWER_AR',
         {? _edit
         || "exec('szk_zap_webwer_ar','!poc_ocw_rocp')"
::          Jeżeli brak edycji, to gasimy absolutnie wszystkie akcje.
         || "SZK_ZAP.web_win_opt(web_top_win(),web_top_ident(),'grayed=DPUAO:D')"
         ?},
::    Pracownik, którego dotyczy zapotrzebowanie - formułą zwracająca SQL-ref'a.
      'SZK_ZAP_P',$('\''+$_env.P+'\''),
::    Typ zgłoszenia: S - zgłoszenie przełożonego.
      'SZK_ZAP_ZGL_TYP','S',
::    Podstawa realizacji: O - ocena pracownicza.
      'SZK_ZAP_POD_REAL','O',
::    Ocena - formuła zwracająca SQL-ref'a.
      'SZK_ZAP_ZO_TEST',$('\''+$_env.ZO_TEST+'\''),
::    Dziedzina konta kosztowego (formuła).
      'BPMN_KK_DOM',$('\''+BPMN.KK_DOM+'\''),
      'ZO_FORM',_zo_form,
      'path',_path
   )
);

SZK_ZAP.cntx_psh();
SZK_ZAP.index('PT');
SZK_ZAP.prefix(P.ref());
_ws:='WEBGZAP';
SZK_ZAP.web_win_init(_ws,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
SZK_ZAP.web_select(_ws,,,,$("{? exec('env_wt','poc') || SZK_ZAP.web_close(); "+_web_run+" ?}"));
SZK_ZAP.cntx_pop();
~~


\eloc_pozostale
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [17.42]
:: OPIS: Obsługa elementu oceny - "Pozostałe elementy oceny".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(1),
      'ZO_FORM',_zo_form,
      'web_run',_web_run,
      'KTO',P.ref(),
      'KOGO',_env.P,
      'ZO_TEST',_env.ZO_TEST
       )
);

ZO_DOD.web_win_init('WT_ZDOD',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
ZO_DOD.web_select('WT_ZDOD',,,,$("ZO_DOD.web_close(); "+_web_run));
~~


\eloc_komentarze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [17.42]
:: OPIS: Obsługa elementu oceny - "Komentarze".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(1),
      'ZO_FORM',_zo_form,
      'web_run',_web_run,
      'KTO',P.ref(),
      'KOGO',_env.P,
      'ZO_TEST',_env.ZO_TEST
       )
);

ZO_FORM.web_win_init('WT_ZFORM',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
ZO_FORM.web_select('WT_ZFORM',,,,$("ZO_FORM.web_close(); "+_web_run));
~~


\eloc_statystyki
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.42]
:: OPIS: Obsługa elementu oceny - "Statystyki".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_zo_form)
|| _kod:=ZO_FORM.ZZ_TYP().KOD;
   _komplet:=ZO_FORM.ZO_TEST().KOMPLET='T'
||
:: nie powinno mieć miejsca
   _kod:=''
?};
ZO_FORM.cntx_pop();

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
exec('wt_stat_clean','poc',1);
WT_STAT.index('KEY');
WT_STAT.cntx_psh();

_komp:=sql('
   select distinct
      ZZ_TYP.KOD,
      ZZ_KOMP.NAZWA,
      ZZ_KOMP.REFERENCE as REF,
      ZZ_KOMP.ZZ_KOMP as KOMP,
      ZO_OCENA.REFERENCE as OCENA,
      ZO_OCENA.AE
   from
      ZO_OCENA join
      ZZ_KOMP join
      ZZ_TYP
   where ZO_OCENA.ZO_TEST=\':_a\'
   order by 1,2',
   $_env.ZO_TEST
);

_stat:=sql('
   select
      ZZ_TYP.KOD as KOD,
      ZZ_KOMP.NAZWA as NAZWA,
      ZZ_OSOBA.REFERENCE as REF,
      ZZ_OSOBA.NAZWISKO as  SNAME,
      ZZ_OSOBA.PIERWSZE as FNAME,
      ZZ_TYP.NAZWA as TYP,
      ZO_KOMP.REFERENCE as ZO_KOMP,
      ZO_KOMP.POZIOM as POZIOM,
      ZO_KOMP.OCENA as OCENA,
      ZO_FORM.Z as Z
   from
      ZO_KOMP join
      ZO_FORM using(ZO_KOMP.ZO_FORM,ZO_FORM.REFERENCE) join
      ZZ_TYP using(ZO_FORM.ZZ_TYP,ZZ_TYP.REFERENCE) join
      ZO_TEST using(ZO_FORM.ZO_TEST,ZO_TEST.REFERENCE) join
      ZZ_OSOBA using(ZO_FORM.ZZ_KTO,ZZ_OSOBA.REFERENCE) join
      ZZ_KOMP using(ZO_KOMP.ZZ_KOMP,ZZ_KOMP.REFERENCE)
   where
      ZO_TEST.REFERENCE=\':_a\'
   order by
      1,2',
   $_env.ZO_TEST
);

_test:=sql('select * from :_a where Z=\'N\' and KOD<>\'OU\'',_stat);
_ou:={? _stat.find_key('OU',) || 1 || 0 ?};
_kompd:=sql('select distinct NAZWA, REF, KOMP from :_a',_komp);

_setid:='zo_ocena';
WT_STAT.prefix(_tcid,_sesid,_tabid, _setid,);
{? _stat.first()
|| {!
   |? {? (_ou & _kod<>'OU' & _kod<>'PS') | (_ou & _kod='PS' & ~_komplet)
      || {? _stat.KOD=_kod
         || exec('wt_stat_add','!poc_ocw_rocp',
               _setid,_stat.NAZWA,_stat.TYP,_stat.SNAME,_stat.FNAME,$_stat.POZIOM,$_stat.OCENA,_stat.ZO_KOMP
            )
         ?}
      |? (_ou & _kod='OU') | (_ou & _kod='PS' & _komplet)
      || exec('wt_stat_add','!poc_ocw_rocp',
               _setid,_stat.NAZWA,_stat.TYP,_stat.SNAME,_stat.FNAME,$_stat.POZIOM,$_stat.OCENA,_stat.ZO_KOMP
            )
      |? ~_ou & _kod<>'PB'
      || {? _stat.KOD=_kod
         || exec('wt_stat_add','!poc_ocw_rocp',
               _setid,_stat.NAZWA,_stat.TYP,_stat.SNAME,_stat.FNAME,$_stat.POZIOM,$_stat.OCENA,_stat.ZO_KOMP
            )
         ?}
      |? ~_ou & _kod='PB' | (~_ou & _kod='PS' & _komplet)
      || exec('wt_stat_add','!poc_ocw_rocp',
               _setid,_stat.NAZWA,_stat.TYP,_stat.SNAME,_stat.FNAME,$_stat.POZIOM,$_stat.OCENA,_stat.ZO_KOMP
            )
      ?};
      _stat.next()
   !}
?};

_setid:='zo_komp';
WT_STAT.prefix(_tcid,_sesid,_tabid, _setid,);
ZZ_KOMP.cntx_psh();
ZZ_KOMP.prefix();
_loop:=_kompd.first();
_nazwa:='';
_ref:=null();
_tree:=null();
{!
|? _loop
|! {? ZZ_KOMP.seek(_kompd.REF,)
   || {? _tree<>ZZ_KOMP.ZZ_KOMP
      || _tree:=ZZ_KOMP.ZZ_KOMP;
         {? ZZ_KOMP.seek(_tree,)
         || WT_STAT.blank();
            WT_STAT.SETID:=_setid;
            WT_STAT.NAME:=ZZ_KOMP.NAZWA;
            WT_STAT.ID:='PARENT';
            WT_STAT.TYPE:=$ZZ_KOMP.ref();
            WT_STAT.KEY:=_kompd.REF;
            WT_STAT.PS:=0;
            WT_STAT.PB:=0;
            WT_STAT.REST:=0;
            WT_STAT.add()
         ?}
      ?}
   ?};
   _loop:=_kompd.next()
!};

ZO_OCENA.cntx_psh();
ZO_OCENA.index('UNIQUE');
_loop:=WT_STAT.first();
{!
|? _loop
|! _ref:=exec('FindAndGet','#table',ZZ_KOMP,WT_STAT.TYPE,,,null());
   ZO_OCENA.prefix(_env.ZO_TEST,_ref);
   {? ZO_OCENA.first()
   || WT_STAT.OUP:=ZO_OCENA.AE;
      WT_STAT.put()
   ?};
   _loop:=WT_STAT.next()
!};

_loop:=_kompd.first();
{!
|? _loop
|! _name:='';
   WT_STAT.blank();
   WT_STAT.SETID:=_setid;
   WT_STAT.NAME:=_kompd.NAZWA;
   WT_STAT.KEY:=_kompd.REF;
   ZZ_KOMP.prefix();
   _ref:=exec('FindAndGet','#table',ZZ_KOMP,_kompd.KOMP,,,null());
   {? ZZ_KOMP.seek(_ref,)
   || _name:=ZZ_KOMP.NAZWA
   ?};
   {? _name<>''
   || _parent:=sql('select WT_STAT.REFERENCE as REF from WT_STAT where WT_STAT.NAME=\':_a\'',_name);
      _upper:=exec('FindAndGet','#table',WT_STAT,_parent.REF,,,null());
      {? _upper<>null()
      || WT_STAT.PARENT:=_upper
      ?};
      &_parent
   ?};
   WT_STAT.PS:={? _komp.find_key('PS',WT_STAT.NAME,) || _komp.AE ?};
   WT_STAT.PB:={? _komp.find_key('PB',WT_STAT.NAME,) || _komp.AE ?};
   _rest:=sql(
      'select NAZWA, KOD, AE from :_a where NAZWA=\':_b\' and not KOD=\':_c\' and not KOD=\':_d\' and not KOD=\':_e\'',
   _komp,WT_STAT.NAME,'PS','PB','OU');
   _count:=sql('select sum(AE) as SUMA, count(AE) as LICZBA from :_a', _rest);
   WT_STAT.REST:={? _count.LICZBA>1 || _count.SUMA/_count.LICZBA || _count.SUMA ?};
   _ref:=exec('FindAndGet','#table',ZZ_KOMP,WT_STAT.KEY,,,null());
   ZO_OCENA.prefix(_env.ZO_TEST,_ref);
   {? ZO_OCENA.first()
   || WT_STAT.OUP:=ZO_OCENA.AE
   ?};
   &_rest;
   &_count;
   WT_STAT.add();
   _loop:=_kompd.next()
!};
ZZ_KOMP.cntx_pop();
ZO_OCENA.cntx_pop();

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ZO_TEST',_env.ZO_TEST,
      'ZO_FORM',_zo_form
   )
);

WT_STAT.web_win_init('STAT_GRP',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
{? _ou
|| {? _kod<>'OU'
   || WT_STAT.web_win_init('STAT_GRP','STAT_P','tab_visible=0')
   ?}
|? ~_ou
|| {? _kod<>'PB'
   || WT_STAT.web_win_init('STAT_GRP','STAT_P','tab_visible=0')
   ?}
?};
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_STAT.web_select('STAT_GRP',,,,$("WT_STAT.web_close(); "+_web_run));
WT_STAT.cntx_pop();
~~


\eloc_kwalifikacje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Kwalifikacje dodatkowe".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_PERM:=exec('get_form_perm','phr_dane',_zo_form);
_edit:=_view:=0;
{? _PERM.find_key('KD',)
||  _edit:=_PERM.EDIT='T';
    _view:=_PERM.VIEW='T'
?};
{? ~_edit & ~_view
|| FUN.info('Brak uprawnień do pozycji formularza oceny.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ESC_FORM',_web_run
   )
);

_fml:=
   {? _edit
   || ""
   || "KART_DOD.web_win_init(_a,,'grayed=DPUA:D')"
   ?};
exec('select','kart_dod',_env.OSOBA,'DOD_KWAL','POC_OCW_ROCP',,'R',_fml,$("web_top_close(); "+_web_run));
~~


\eloc_szkolenia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa elementu oceny - "Szkolenia".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'ESC_FORM',_web_run
   )
);

:: wejscie do szkolen: uprawnienia nie sa sprawdzane
SZK_PRAC.cntx_psh();
SZK_PRAC.index('PRAC_SZK');
SZK_PRAC.prefix(_env.P);
SZK_PRAC.web_win_init('WT_OSZK',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
SZK_PRAC.web_select('WT_OSZK',,,,$("SZK_PRAC.web_close(); "+_web_run));
SZK_PRAC.cntx_pop();
~~


\eloc_dokumenty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ??? [17.42]
:: OPIS: Obsługa elementu oceny - "Dokumenty".
::       Środowisko zostało ustalone przez formułę wywołującą.
::       Jeżeli wywołanie nastąpiło z obszaru roboczego, to podczytany został również rekord tabeli WT_ZOS.
::   WE: _a [STRING] - SQL-ref formularza.
::       _b [STRING] - Kontekst wywołania (Area/Todo).
::       _c [RULE]   - Formuła obsługi procesowości.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & +_a=16 & ref_tab(_a)=ZO_FORM
|| _zo_form:=_a
|| return()
?};
{? var_pres('_b')=type_of('') & (_b='Area' | _b='Todo')
|| _path:=_b
|| return()
?};
{? var_pres('_c')=type_of("")
|| _web_run:=_c
|| return()
?};

_env:=exec('zo_form_about','!poc_ocw_rocp',_zo_form);
{? ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_dok:=sql('
   select
      ZO_PROG.NAZWA as PROGRAM,
      ZO_PROC.OKRES_OD as PROC_OD,
      ZO_PROC.OKRES_DO as PROC_DO,
      ZZ_DOK.DATA as DATA,
      ZZ_DOKZ.ISD as ISD,
      ZZ_DOKZ.REFERENCE as ZZ_DOKZ,
      ZO_TEST.REFERENCE as ZO_TEST
   from
      ZO_TEST join
      ZO_OSOBA using(ZO_TEST.ZO_OSOBA,ZO_OSOBA.REFERENCE) join
      ZO_PROC using(ZO_OSOBA.ZO_PROC,ZO_PROC.REFERENCE) join
      ZO_PROG using(ZO_PROC.ZO_PROG,ZO_PROG.REFERENCE) join
      ZZ_OSOBA using(ZO_TEST.ZZ_OSOBA,ZZ_OSOBA.REFERENCE) join
      ZZ_DOK using (ZO_TEST.ZZ_DOK,ZZ_DOK.REFERENCE) join
      ZZ_DOKZ using (ZZ_DOKZ.ZZ_LINK,ZZ_DOK.REFERENCE)
   where
      ZZ_OSOBA.REFERENCE=\':_a\' and ZZ_DOKZ.ISD=\'OCPRAC-1\'
   order by
      1, 2, 3',
   $_env.ZZ_OSOBA
);


_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
_setid:='DOKUMENTY';

exec('clean','wt_tree',3,_setid);
WT_TREE.cntx_psh();
WT_TREE.index('KEY');
WT_TREE.prefix(_tcid,_sesid,_tabid,_setid,);

WT_TREE.blank();
WT_TREE.SETID:=_setid;
WT_TREE.NAME:='Arkusze ocen'@;
WT_TREE.KEY:='OCPRAC-1';
WT_TREE.ID:='NAG';
WT_TREE.add();

_ref:=WT_TREE.ref();

{? _dok.first()
|| {!
   |? WT_TREE.blank();
      WT_TREE.SETID:=_setid;
      WT_TREE.PARENT:=_ref;
      WT_TREE.NAME:='Program: '@+_dok.PROGRAM+' (sesja: '@+$_dok.PROC_OD+'-'+$_dok.PROC_DO+')';
      WT_TREE.KEY:=_dok.ZO_TEST;
      WT_TREE.ID:=_dok.ZZ_DOKZ;
      WT_TREE.add();
      _dok.next()
   !}
?};


:: na początku zakładam, ze element 'Ocena kompetencji' nie istnieje na formularzu; jeśli jednak istnieje - to dociągamy
:: opisy kompetencji
_oc_komp:=0;
ZO_TEST.cntx_psh();
ZO_TEST.prefix();
{? ZO_TEST.seek(_env.ZO_TEST)
|| _oc_komp:=exec('form_komp','phr_dane',ZO_TEST.ZZ_DOK)
?};
ZO_TEST.cntx_pop();

{? _oc_komp
|| WT_TREE.blank();
   WT_TREE.SETID:=_setid;
   WT_TREE.NAME:='Opis kompetencji'@;
   WT_TREE.KEY:='OPIS';
   WT_TREE.ID:='NAG';
   WT_TREE.add();

   _ref:=WT_TREE.ref();

   _komp:=sql('
      select distinct
         ZZ_KOMP.NAZWA as NAZWA,
         ZZ_DOKZ.REFERENCE as ZZ_DOKZ,
         ZO_TEST.REFERENCE as ZO_TEST
      from
         ZO_KOMP join
         ZO_FORM using(ZO_KOMP.ZO_FORM,ZO_FORM.REFERENCE) join
         ZO_TEST using(ZO_FORM.ZO_TEST,ZO_TEST.REFERENCE) join
         ZZ_KOMP using(ZO_KOMP.ZZ_KOMP,ZZ_KOMP.REFERENCE) join
         ZZ_DOK using(ZZ_KOMP.ZZ_DOK,ZZ_DOK.REFERENCE) join
         ZZ_DOKZ using(ZZ_DOKZ.ZZ_LINK,ZZ_DOK.REFERENCE)
      where
         ZO_TEST.REFERENCE=\':_a\'
      order by
         1',
      $_env.ZO_TEST
   );

   {? _komp.first()
   || {!
      |? WT_TREE.blank();
         WT_TREE.SETID:=_setid;
         WT_TREE.PARENT:=_ref;
         WT_TREE.NAME:=_komp.NAZWA;
         WT_TREE.KEY:=_komp.ZO_TEST;
         WT_TREE.ID:=_komp.ZZ_DOKZ;
         WT_TREE.add();
         _komp.next()
      !}
   ?}
?};

web_params_set('zo_form',_zo_form);

WT_TREE.web_win_init('DOK',,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_TREE.web_select('DOK');
WT_TREE.cntx_pop();
~~

::======================================================================================================================
:: Formuły pomocnicze do obsługi poszczególnych elementów oceny pracownika.
::======================================================================================================================

::======================================================================================================================
:: Kompetencje
::======================================================================================================================


\zo_komp_ctrl_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Inicjalizacja kontrolki - ocena kompetencji.
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_init('',,'MCL.controls.formularzZKL')


\zo_komp_odswiez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła po odświeżeniu okna WT_ZKOMP dla tabeli ZA_FORM.
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

_kto:=$_par.KTO;
_zo_test:=$_par.ZO_TEST;
_kogo:=$_par.KOGO;
_zo_form:=$_par.ZO_FORM;
: wczytanie definicji formularza
exec('zo_komp_def','!poc_ocw_rocp',_kogo,_zo_test,_kto,_zo_form);
exec('wt_opis_add','!poc_ocw_rocp');
: wywołanie metody tworzącej formularz
web_ctrl_call('FORM_CTRL',,'createFormularzZKL')


\zo_komp_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [17.42]
:: OPIS: Przekazanie definicji ocen kompetencji do kontrolki wywoływanej pod webterm-em.
::   WE: _a - wskazanie na oceniajacego
::       _b - wskazanie na ocene calkowita
::----------------------------------------------------------------------------------------------------------------------
:: przekazanie tablic z definicją zakładki oceny kompetencji
_tab:=exec('ocena_komp_list','phr_dane',_a,_b,_c,_d);
web_ctrl_set_table('FORM_CTRL',,'defFormZKLNag',exec('ocena_komp_nag','phr_dane',_d));
web_ctrl_set_table('FORM_CTRL',,'defFormZKLSpis',exec('ocena_komp_spis','phr_dane',_tab));
web_ctrl_set_table('FORM_CTRL',,'defFormZKLRadio',exec('ocena_komp_radio','phr_dane',_tab));
exec('ocena_komp_about','phr_dane',_tab);
exec('ocena_komp_answer','phr_dane',_tab);
~~


::======================================================================================================================
:: Cele
::======================================================================================================================


\wt_zcel_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('wt_zcel_modb','!poc_ocw_rocp')


\wt_zcel_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('wt_zcel_modb','!poc_ocw_rocp')


\wt_zcel_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? WT_ZCEL.ZO_CEL
|| ZO_CEL.cntx_psh();
   ZO_CEL.prefix();
   WT_ZCEL.ZO_CEL();
   WT_ZCEL.CRC:=ZO_CEL.crc();
   WT_ZCEL.WYMOG:=ZO_CEL.WYMOG;
   WT_ZCEL.ROZWOJ:=ZO_CEL.ROZWOJ;
   WT_ZCEL.Z:=
      {? ZO_CEL.Z='T'
      || 'Zrealizowany'@
      |? ZO_CEL.Z='N'
      || 'Niezrealizowany'@
      || 'Niezweryfikowany'@
      ?};
   ZO_CEL.cntx_pop();
   1
?}


\zo_proc_get_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła zwraca wybrane informacje o wskazanej i następnej sesji.
::   WE: _a [REFERENCE] - Wskazanie programu.
::       _b [REFERENCE] - Wskazanie sesji.
::   WY: Tablica elementów nazwanych.
::----------------------------------------------------------------------------------------------------------------------
_new:="obj_new('ref','OD','DO')";
_info:=obj_new('status','cur','next');
_info.status:='Wystąpił nieoczekiwany błąd.';
_info.cur:=_new();
_info.next:=_new();
{! _lp:=2 .. 3
|! _info[_lp].ref:=null();
   _info[_lp].OD:=_info[_lp].DO:=date(0,0,0)
!};

{? var_pres('_a')=type_of(null()) & _a<>null() & ref_tab(_a)=ZO_PROG
|| _zo_prog:=_a
|| _info.status:='Nieprawidłowy typ parametru %1.'@ ['_a'];
   return(_info)
?};

{? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=ZO_PROC
|| _zo_proc:=_b
|| _info.status:='Nieprawidłowy typ parametru %1.'@ ['_b'];
   return(_info)
?};

ZO_PROC.cntx_psh();
ZO_PROC.index('OKRES_OD');
ZO_PROC.prefix(_zo_prog);
{? ZO_PROC.seek(_zo_proc)
|| _info.status:='';
   _info.cur.ref:=ZO_PROC.ref();
   _info.cur.OD:=ZO_PROC.OKRES_OD;
   _info.cur.DO:=ZO_PROC.OKRES_DO;
   {? ZO_PROC.next()
   || _info.next.ref:=ZO_PROC.ref();
      _info.next.OD:=ZO_PROC.OKRES_OD;
      _info.next.DO:=ZO_PROC.OKRES_DO
   ?}
?};
ZO_PROC.cntx_pop();

_info


\wt_zcel_get_kod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła wskazuje zakładkę, w której będzie prezentowany rekord.
::   WE:  _a  [ARRAY]     - Tablica elementów nazwanych (patrz: \zo_proc_get_info).
::       [_b] [REFERENCE] - Wskazanie sesji, dla której określana będzie zakładka [domyślnie: ZO_CEL.ZO_PROC].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100 & obj_ntab(_a)
|| _info:=_a
|| return('')
?};
_zo_proc:={? var_pres('_b')=type_of(null()) & _b<>null() & ref_tab(_b)=ZO_PROC || _b || ZO_CEL.ZO_PROC ?};

{? _zo_proc=_info.cur.ref
|| 'W'
|? ZO_CEL.PROC=$_info.cur.ref
|| 'R'
|| 'A'
?}


\wt_zcel_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła odpowiada za aktualizacje odpowiednich zakładek w oknie GWER tabeli WT_ZCEL.
::   WE: [_a] [STRING] - Kod zakładki do odświeżenia.
::       [_b] [STRING] - Kod zakładki do odświeżenia.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod1:={? var_pres('_a')=type_of('') || _a || WT_ZCEL.KOD ?};
_kod2:={? var_pres('_b')=type_of('') || _b || '' ?};

_ws:='GWER';

:: Zakładkę "Wszystkie" odświeżamy zawsze - każdy rekord jest tam prezentowany.
WT_ZCEL.web_refresh(_ws,'AC');
:: Dodatkowo odświeżamy zakładkę, z której pochodzi rekord.
{? _kod1<>'' & _kod1<>'A'
|| WT_ZCEL.web_refresh(_ws,_kod1+'C')
?};
{? _kod2<>'' & _kod2<>_kod1 & _kod2<>'A'
|| WT_ZCEL.web_refresh(_ws,_kod2+'C')
?};
~~


\wt_zcel_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa przycisków okna RED tabeli WT_ZCEL - formuła po redagowaniu rekordu.
::   WE:  _a  [STRING] - Identyfikator przycisku.
::       [_b] [NUMBER] - Czy popraw? [1/0*]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a='ANULUJ'
|| web_top_close(0);
   return()
?};

_put:=var_pres('_b')=type_of(0) & _b;

:: Zakładamy, że jest źle - zmienimy wartość flagi, wtedy, gdy upewnimy się, że jest dobrze.
_err:=1;

{? ~(exec('env_wt','poc') & (~_put | WT_ZCEL.web_cntx_load(1)>0))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? _par:=web_params_get();
   ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|? _info:=exec('zo_proc_get_info','!poc_ocw_rocp',_env.ZO_PROG,_env.ZO_PROC);
   _info.status<>''
|| FUN.emsg(
      'Odnalezienie programu [%1] i/lub sesji [%2] ocen nie powiodło się.\n%3'@
      [$_env.ZO_PROG,$_env.ZO_PROC,_info.status]
   )
|| _err:=0
?};

{? _err
|| web_top_close(0);
   return()
?};

{? ~_put
:: Dla akcji "Dołącz" uzupełniamy pola, które nie są redagowalne, zakładając wstępnie, że cel będzie dotyczył bieżącej
:: sesji (co zostanie zweryfikowane po walidacji rekordu).
|| ZO_CEL.KOGO:=_env.ZZ_OSOBA;
   ZO_CEL.KTO_Z:=exec('czy_osoba','phr_dane',P,1);
   ZO_CEL.ZO_PROG:=_env.ZO_PROG;
   ZO_CEL.ZO_PROC:=_env.ZO_PROC;
   ZO_CEL.PROC:=$_env.ZO_PROC
?};

_chk:=exec('zo_cel_chk','phr_zo_tab',_put);
{? type_of(_chk)=type_of('') & _chk<>''
:: Niewypełnione pole - odświeżamy okno redagowania i wskazujemy pole, od którego rozpocznie się redagowanie.
:: Zakładamy przy tym, że pole pochodzi z tabeli ZO_CEL.
|| ZO_CEL.web_update(,,,_chk);
   return()
|? type_of(_chk)=type_of(0) & ~_chk
:: Brak unikalności - komunikat został wyświetlony.
|| return()

|? ZO_CEL.OKRES_DO<_info.cur.OD
|| ZO_CEL.web_update(,,,'OKRES_DO');
   FUN.emsg(
      'Data końca realizacji celu ["%1" - %2]\n'
      'nie może być wcześniejsza niż\n'
      'data początku bieżącej sesji [%3].'@
      [MS.name(ZO_CEL,'OKRES_DO'),$ZO_CEL.OKRES_DO,$_info.cur.OD]
   );
   return()
?};

:: W tym miejscu rekord jest poprawny (zweryfikowany).

_ident:=1+web_top_ident(1);

do();
:: Aktualizacja zapisów pierwotnych.
{? _put
|| {? ZO_CEL.ZO_PROC<>_env.ZO_PROC & _info.cur.OD<=ZO_CEL.OKRES_DO & ZO_CEL.OKRES_DO<=_info.cur.DO
::    W przypadku "popraw", jeżeli tylko wprowadzone daty celu dotyczą bieżącej sesji, to cel przywiązywanej jest
::    do bieżącej sesji (nawet jak był wcześniej przywiązany do innej sesji). Proszę zwrócić uwagę na różnicę
::    w podejściu: przy uruchamianiu widoku, bieżącą sesją były stemplowane co najwyżej cele bez sesji.
   || ZO_CEL.ZO_PROC:=_env.ZO_PROC
   ?};
   ZO_CEL.put()
|| ZO_CEL.add()
?};
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
ZO_CEL.ZZ_DOK();
ZZ_DOK.memo_put(,'NOTA');
ZZ_DOK.cntx_pop();

:: Aktualizacja rekordu widoku.
_kodB:='';
_kodA:=exec('wt_zcel_get_kod','!poc_ocw_rocp',_info);

WT_ZCEL.prefix();
{? _put
|| _kodB:=WT_ZCEL.KOD;
   {? _kodB<>_kodA
   || WT_ZCEL.KOD:=_kodA
   ?};
   WT_ZCEL.put()
|| _kodB:=_ident;
   WT_ZCEL.blank();
   WT_ZCEL.KOD:=_kodA;
   WT_ZCEL.ZO_CEL:=ZO_CEL.ref();
   WT_ZCEL.add()
?};
_fh:=ZZ_DOK.memo_get('r','NOTA');
{? _fh.is_open()
|| WT_ZCEL.memo_put(_fh,'NOTA');
   _fh.fclose()
?};
obj_del(_fh);
{? end()
|| exec('wt_zcel_refresh','!poc_ocw_rocp',_kodA,_kodB);
   {? _ident<>'A' & _kodB<>_kodA
   || FUN.info('Cel został zapisany.\nJest prezentowany w zakładce "%1"'@
         [  {? _kodA='W'
            || 'Do weryfikacji'@
            || 'Wyznaczone'@
            ?}
         ]
      )
   ?};
   web_top_close(0)
|| FUN.emsg('Zapisanie wprowadzonych zmian nie powiodło się.\nSpróbuj ponownie.'@)
?}


\wt_zcel_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz" w oknie WER tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie powiodło się.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

ZO_CEL.cntx_psh();
ZO_CEL.prefix();
ZO_CEL.blank();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
ZZ_DOK.blank();
ZZ_DOK.memo_set(,'NOTA');
_we:='WEBRED';
ZO_CEL.web_ewin_init(_we,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
exec('zo_cel_efld_opt','phr_widok','*',ZO_CEL,_we);
ZO_CEL.web_efld_init(_we,,'editable=1',ZO_CEL,'ROZWOJ');
:: Weryfikacja możliwa jest wyłącznie z dedykowanej akcji. Dla "Dołącz" ukrywamy pola.
ZO_CEL.web_efld_init(_we,,'enable=0',ZO_CEL,'Z');
ZO_CEL.web_efld_init(_we,,'enable=0',ZO_CEL,'S');
ZO_CEL.web_edit(_we,'zo_cel_webred',,,"exec('wt_zcel_red','!poc_ocw_rocp',_a,0)");
ZZ_DOK.cntx_pop();
ZO_CEL.cntx_pop();
~~


\wt_zcel_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw" w oknie WER tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie powiodło się.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

WT_ZCEL.web_cntx_save(1);

ZO_CEL.cntx_psh();
ZO_CEL.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
WT_ZCEL.ZO_CEL().ZZ_DOK().memo_get(,'NOTA');
_we:='WEBRED';
ZO_CEL.web_ewin_init(_we,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
exec('zo_cel_efld_opt','phr_widok','*',ZO_CEL,_we);
:: Weryfikacja możliwa jest wyłącznie z dedykowanej akcji. Dla "Popraw" wyszarzamy pola.
ZO_CEL.web_efld_init(_we,,'editable=grayed',ZO_CEL,'Z');
ZO_CEL.web_efld_init(_we,,'editable=grayed',ZO_CEL,'S');
ZO_CEL.web_edit(_we,'zo_cel_webred',,,"exec('wt_zcel_red','!poc_ocw_rocp',_a,1)");
ZZ_DOK.cntx_pop();
ZO_CEL.cntx_pop();

~~


\wt_zcel_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Usuń" w oknie WER tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

WT_ZCEL.web_cntx_save(1);
web_ask(
   "  {? ~_a
      || return()
      ?};
      {? exec('env_wt','poc') & WT_ZCEL.web_cntx_load(1)>0
      || do();
         _kod:=WT_ZCEL.KOD;
         ZO_CEL.cntx_psh();
         ZO_CEL.prefix();
         WT_ZCEL.ZO_CEL();
         {? WT_ZCEL.del(1,1)
         || ZO_CEL.del(1,1)
         ?};
         ZO_CEL.cntx_pop();
         {? end()
         || exec('wt_zcel_refresh','!poc_ocw_rocp',_kod)
         || FUN.emsg('Usunięcie bieżącego zapisu nie powiodło się.'@)
         ?}
      ?}
   ",
   'Czy usunąć bieżący wiersz?'@,
   FUN.TYT
);
~~


\wt_zcel_weryfikuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Weryfikuj" w oknie WEB tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie powiodło się.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

:: Jeżeli cel jest niezweryfikowany i rozwojowy, to przed weryfikacją celu sprawdźmy czy zweryfikowane są wszystkie
:: związane z nim kompetencje. Wstępnie załóżmy, że tak.
_ok:=1;
ZO_CEL.cntx_psh();
ZO_CEL.prefix();
{? WT_ZCEL.ZO_CEL().Z<>'T' & WT_ZCEL.ROZWOJ='T'
|| ZO_CELK.cntx_psh();
   ZO_CELK.index('UNIQUE');
   ZO_CELK.prefix(WT_ZCEL.ZO_CEL);
   {? ZO_CELK.first()
   || {!
      |? {? ZO_CELK.Z='X'
         || _ok:=0
         || ZO_CELK.next()
         ?}
      !}
   ?};
   ZO_CELK.cntx_pop()
?};
ZO_CEL.cntx_pop();
{? ~_ok
|| FUN.emsg('Przed weryfikacją celu należy zweryfikować wszystkie związane z nim kompetencje.'@);
   return()
?};

WT_ZCEL.web_cntx_save(1);

ZO_CEL.cntx_psh();
ZO_CEL.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
WT_ZCEL.ZO_CEL().ZZ_DOK().memo_get(,'NOTA');
:: Uzupełniamy dane związane z weryfikacją: osobę weryfikującą i datę weryfikacji.
ZO_CEL.KTO_W:=exec('czy_osoba','phr_dane',P,1);
ZO_CEL.DATA_W:=date();
{? ZO_CEL.Z<>'T'
:: Jeżeli cel nie był już zweryfikowany, to wstępnie zaznaczmy, że nie został zrealizowany.
|| ZO_CEL.Z:='N'
?};
_we:='WEBRED';
ZO_CEL.web_ewin_init(_we,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
:: Weryfikacja wymaga specjalnej obsługi i dostępu do ściśle określonych pól ...
:: ... najpierw wszystko blokujemy ...
ZO_CEL.web_efld_init(_we,,'mark=0,editable=0',ZO_CEL);
ZO_CEL.web_efld_init(_we,,'editable=0',ZZ_DOK,'NOTA');
:: ... a potem udostępniamy, tylko to co jest potrzebne.
ZO_CEL.web_efld_init(_we,,'editable=1',ZO_CEL,'Z');
ZO_CEL.web_efld_init(_we,,'editable=1',ZO_CEL,'S');
ZO_CEL.web_edit(_we,'zo_cel_webred',,,"exec('wt_zcel_red','!poc_ocw_rocp',_a,1)");
ZZ_DOK.cntx_pop();
ZO_CEL.cntx_pop();

~~


\wt_zcel_szczegoly
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Obsługa akcji "Szczegóły" w oknie WEB tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

ZO_CEL.cntx_psh();
ZO_CEL.prefix();
ZZ_DOK.cntx_psh();
ZZ_DOK.prefix();
WT_ZCEL.ZO_CEL().ZZ_DOK().memo_get(,'NOTA');
{? WT_ZCEL.CRC<>ZO_CEL.crc()
|| WT_ZCEL.put()
?};
_we:='WEBRED';
ZO_CEL.web_ewin_init(_we,,'title=: %1' [_env.NAZWISKO+' '+_env.PIERWSZE]);
exec('zo_cel_efld_opt','phr_widok','*',ZO_CEL,_we);
ZO_CEL.web_display(_we);
ZZ_DOK.cntx_pop();
ZO_CEL.cntx_pop();

~~


\wt_zcel_wer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po odświeżeniu okna WER tabeli WT_ZCEL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|| _ok:=1
?};

{? _ok
|| _ag1:=_ag0:='';

   _PERM:=exec('get_form_perm','phr_dane',_par.ZO_FORM);

   {? ~(_PERM.find_key('CN',) & _PERM.EDIT='T')
::    Zakładanie nowych celów
   || _ag1+='DPU';
      _ag0+='D'
   ?};
   {? ~(_PERM.find_key('CW',) & _PERM.EDIT='T')
::    Weryfikacja celów
   || _ag1+='W'
   ?};

   {? _ag1*'P'=0 & WT_ZCEL.get()
   || ZO_CEL.cntx_psh();
      ZO_CEL.prefix();
      {? WT_ZCEL.ZO_CEL().Z<>'X'
::       Jeżeli cel został zweryfikowany (pozytywnie lub negatywnie) to nie poprawiamy go.
      || _ag1+='P'
      ?};
      ZO_CEL.cntx_pop()
   ?}

|| _ag1:='DPUW';
   _ag0:='D'
?};

WT_ZCEL.web_win_opt(web_top_win(),web_top_ident(),'grayed=%1:%2'[_ag1,_ag0]);

~~


\wt_zcel_gwer_wt_zcel_wer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Przed obsługa okna WER tabeli WT_ZCEL w ramach okna grupowego GWER tabeli WT_ZCEL. Formuła wspólna dla
::       wszystkich trzech zakładek - ustala środowisko pracy.
::   WE: [_a] [STRING] - Kod obsługiwanej zakładki:
::                         W - Do weryfikacji;
::                         R - Wyznaczone;
:                          A - Wszystkie [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') & (_a='W' | _a='R' | _a='A') || _a || 'A' ?};

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
{? _kod='A'
|| WT_ZCEL.index('OD');
   WT_ZCEL.prefix(_tcid,_sesid,_tabid,)
|| WT_ZCEL.index('KOD');
   WT_ZCEL.prefix(_tcid,_sesid,_tabid,_kod,)
?};

~~


\wt_zcel_gwer_zo_celk_webwer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed obsługa okna WEBWER tabeli ZO_CELK w ramach okna grupowego GWER tabeli WT_ZCEL. Okna z kompetencjami
::       muszą być również trzy (ograniczenie technologii). Formuła wspólna dla wszystkich trzech okien - ustala
::       środowisko pracy.
::   WE: [_a] [STRING] - Kod obsługiwanej zakładki:
::                         W - Do weryfikacji;
::                         R - Wyznaczone;
:                          A - Wszystkie [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') & (_a='W' | _a='R' | _a='A') || _a || 'A' ?};
_ref:=web_win_ref(_kod+'C');
_zo_cel:=null();
{? _ref<>~~
|| WT_ZCEL.cntx_psh();
   WT_ZCEL.prefix();
   {? WT_ZCEL.seek(_ref) & WT_ZCEL.ROZWOJ='T'
   || _zo_cel:=WT_ZCEL.ZO_CEL
   ?};
   WT_ZCEL.cntx_pop()
?};
ZO_CELK.index('NAZWA');
ZO_CELK.prefix(_zo_cel);
~~


\zo_celk_refresh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła odpowiada za aktualizacje wszystkich zakładek w oknie GWER tabeli ZO_CELK.
::       Każda kompetencja prezentowana jest w dwóch zakładkach (oknach). Jeżeli zmieniamy zawartość okna, to należy
::       odświeżyć nie tylko bieżące ale i "to drugie". Żeby nie bawić się w odgadywanie, które jeszcze powinno być
::       odświeżone, to odświeżamy wszystkie trzy (jedno niepotrzebnie).
::   WE: [_a] [NUMBER] - Pozycja okna na stosie [0*/1/2].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_depth:={? var_pres('_a')=type_of(0) & 0<=_a & _a<=2 || _a || 0 ?};

_TAB:=web_top_tab(_depth,0);
_grp:=web_top_win(_depth,0);
_TAB.web_refresh(_grp,'WK');
_TAB.web_refresh(_grp,'RK');
_TAB.web_refresh(_grp,'AK');
~~


\zo_celk_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Po odświeżeniu okna WEBWER tabeli ZO_CELK. Formuła ukrywa akcje "Dołącz" jeżeli cel nie jest rozwojowy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|| _ok:=1
?};

:: Ponieważ okno to występuje w oknie grupowym trzy razy - sprawdźmy w jakim kontekście pracujemy.
_id:=web_top_ident();

:: Wstępnie zablokujmy wzystkie akcje.
_ag1:='DUZN';
_ag0:='D';

{? _ok
|| _ref:=web_win_ref((1+_id)+'C');
   {? _ref<>~~
   || WT_ZCEL.cntx_psh();
      WT_ZCEL.prefix();
      ZO_CEL.cntx_psh();
      ZO_CEL.prefix();
      {? WT_ZCEL.seek(_ref) & WT_ZCEL.ROZWOJ='T' & WT_ZCEL.ZO_CEL().Z='X'
::       Rekord istnieje, cel jest rozwojowy i jeszcze nie zweryfikowany - zmiany są możliwe.
      || _ag1:=_ag0:='';
         _PERM:=exec('get_form_perm','phr_dane',_par.ZO_FORM);
         {? ~(_PERM.find_key('CN',) & _PERM.EDIT='T')
::          Brak możliwości zakładanie nowych celów.
         || _ag1+='DU';
            _ag0+='D'
         ?};
         {? ~(_PERM.find_key('CW',) & _PERM.EDIT='T')
::          Brak możliwości weryfikacji celów.
         || _ag1+='ZN'
         || {? ZO_CELK.get()
            || {? ZO_CELK.Z='T'
               || _ag1+='Z'
               |? ZO_CELK.Z='N'
               || _ag1+='N'
               ?}
            || _ag1+='ZN'
            ?}
         ?}

      ?};
      ZO_CEL.cntx_pop();
      WT_ZCEL.cntx_pop()
   ?}
?};

WT_ZCEL.web_win_opt(web_top_win(),_id,'grayed=%1:%2' [_ag1,_ag0]);

~~


\zo_celk_webwer_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz - po" w oknie WEBWER tabeli ZO_CELK - dodanie kompetencji dla celu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_zo_proc:=null();
_dt:=date(0,0,0);
ZO_PROC.cntx_psh();
ZO_PROC.prefix();
{? ZO_PROC.seek(_env.ZO_PROC)
|| _zo_proc:=ZO_PROC.ref();
   _dt:=ZO_PROC.OKRES_DO
?};
ZO_PROC.cntx_pop();

{? _zo_proc=null()
|| FUN.emsg('Nieprawidłowa wartość wskazania na tabelę %1 [%2].'@ ['ZO_PROC',_env.ZO_PROC]);
   return()
?};

_zz_hist:=exec('init_hist','phr_dane',_dt);

:: Ponieważ okno to występuje w oknie grupowym trzy razy - sprawdźmy w jakim kontekście pracujemy.
_ok:=0;
_kod:=1+web_top_ident();
_ref:=web_win_ref(_kod+'C');

ZO_CEL.cntx_psh();
ZO_CEL.prefix();
WT_ZCEL.cntx_psh();
WT_ZCEL.prefix();
{? WT_ZCEL.seek(_ref) & WT_ZCEL.ZO_CEL().get()
|| _ok:=1;
   ZO_CEL.web_cntx_save(1)
?};
WT_ZCEL.cntx_pop();
ZO_CEL.cntx_pop();
{? ~_ok
|| return()
?};

web_params_set(
   exec('obj_ntab_set','#array',_par,
      'ZZ_KOMP_WEBWYX_WYBIERZ_A',
         "  web_top_close(0);
            {? exec('exist','#record',ZZ_KOMP) & ZO_CEL.web_cntx_load(1)>0
            || ZO_CELK.cntx_psh();
               ZO_CELK.index('UNIQUE');
               ZO_CELK.prefix(ZO_CEL.ref(),ZZ_KOMP.ref());
               {? ~ZO_CELK.first()
               || ZO_CELK.blank();
                  ZO_CELK.ZO_CEL:=ZO_CEL.ref();
                  ZO_CELK.ZZ_KOMP:=ZZ_KOMP.ref();
                  ZO_CELK.add();
                  exec('zo_celk_refresh','!poc_ocw_rocp',1)
               ?};
               ZO_CELK.cntx_pop()
            ?};
            ~~
         ",
      'ZZ_KOMP_WEBWYX_WYBIERZ_BG',
         "  web_top_close(0);
            {? ZO_CEL.web_cntx_load(1)>0
            || _ZZ_KOMP:=web_sel_aget();
               ZZ_KOMP.cntx_psh();
               ZZ_KOMP.prefix();
               ZO_CELK.cntx_psh();
               ZO_CELK.index('UNIQUE');
               ZO_CELK.prefix(ZO_CEL.ref());
               ZO_CELK.blank();
               _ref:=null();
               _km:=ZO_CELK.ndx_gkey();
               _kt:='';
               _loop:=_ZZ_KOMP.first();
               {!
               |? _loop
               |! {? ZZ_KOMP.seek(_ZZ_KOMP.REF) & ~ZO_CELK.find_key(ZZ_KOMP.ref())
                  || ZO_CELK.blank();
                     ZO_CELK.ZO_CEL:=ZO_CEL.ref();
                     ZO_CELK.ZZ_KOMP:=ZZ_KOMP.ref();
                     {? ZO_CELK.add()
                     || _kt:=ZO_CELK.ndx_gkey();
                        {? ndx_ckey(_km,_kt)=-1
                        || _km:=_kt;
                           _ref:=ZO_CELK.ref()
                        ?}
                     ?}
                  ?};
                  _loop:=_ZZ_KOMP.next()
               !};
               {? _ref
               || ZO_CELK.seek(_ref)
               ?};
               exec('zo_celk_refresh','!poc_ocw_rocp',1);
               ZO_CELK.cntx_pop();
               ZZ_KOMP.cntx_pop()
            ?};
            0
         "
   )
);

ZZ_KOMP.cntx_psh();
ZZ_KOMP.index('ZZ_HIST');
ZZ_KOMP.prefix(_zz_hist);
ZZ_KOMP.web_select('WEBWYBX');
ZZ_KOMP.cntx_pop();
~~


\zo_celk_webwer_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji standardowej "Usuń - po" w oknie WEBWER tabeli ZO_CELK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('zo_celk_refresh','!poc_ocw_rocp',0)


\zo_celk_webwer_realizacja_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Zrealizowana" w oknie WEBWER tabeli ZO_CELK.
::   WE: _a [STRING] - Znacznik realizacji kompetencji [T/N].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='T' | _a='N')
|| _znacznik:=_a
|| return()
?};

{? exec('exist','#record') & ZO_CELK.Z<>_znacznik
|| ZO_CELK.Z:=_znacznik;
   ZO_CELK.put();
   exec('zo_celk_refresh','!poc_ocw_rocp',0)
?}


::======================================================================================================================
:: Ścieżki kariery
::======================================================================================================================


\zo_sk_stn_web_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Przed wyświetleniem pola POLA_GRP.TXT_1 symulującego nazwę stanowiska w oknie WEBWER tabeli ZOS_SK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:='';
{? ZO_SK.get()
|| {? ZO_SK.STN
   || STN.cntx_psh();
      STN.prefix();
      POLA_GRP.TXT_1:=ZO_SK.STN().ST;
      STN.cntx_pop()
   || POLA_GRP.TXT_1:='(Brak stanowiska)'@
   ?}
?};
~~


\zo_sk_webwer_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz" w oknie WEBWER tabeli ZO_SK. Dodaje nowe stanowisko do ścieżki kariery.
::   WE: [_a] [STRING] - Typ dodawanego rekordu:
::                         'R' - równoerzędny [domyślnie];
::                         'P' - podrzędny.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') & (_a='R' | _a='P') || _a || 'R' ?};

_par:=web_params_get();
{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_STN:=sql(
   'select '
      'STN.ST, STN.REFERENCE as REF '
   'from '
      'STN '
   'where STN.Z=\'T\' and '
      'STN.REFERENCE not in (select ZO_SK.STN from ZO_SK where ZO_SK.STN is not null and ZO_SK.ZO_TEST=:_a)',
   _env.ZO_TEST
);

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
_setid:='STN4ZO_SK';

:: Ponieważ webTerm nie pozwala na korzystanie z filtrów, odpowiednie stanowiska zaprezentujemy przy pomocy tabeli
:: WT_TREE. Zaczniemy od wyczyszczenie jej zawartości - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,_setid);
WT_TREE.cntx_psh();
WT_TREE.index('KEY');
WT_TREE.prefix(_tcid,_sesid,_tabid,_setid,0);
{? _STN.first()
|| {!
   |? WT_TREE.blank();
      WT_TREE.SETID:=_setid;
      WT_TREE.NAME:=_STN.ST;
      WT_TREE.ID:=_STN.REF;
      WT_TREE.add();
      _STN.next()
   !}
?};

web_params_set(
   exec('obj_ntab_set','#array',_par,
      'WT_TREE_WYB1F_WYBIERZ_A',
      $("exec('zo_sk_webwer_dolacz_a1','!poc_ocw_rocp','"+${? ZO_SK.get() || ZO_SK.ref() || null() ?}+"','"+_typ+"')")
   )
);

_ws:='WYB1F';
WT_TREE.web_win_init(_ws,,'title=%1' ['Stanowiska'@]);
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_TREE.web_select(_ws,,,,$('WT_TREE.web_close(); exec(\'clean\',\'wt_tree\',3,\''+_setid+'\')'));
WT_TREE.cntx_pop();

~~


\zo_sk_webwer_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła pomocnicza dla akcji "Dołącz" w oknie WEBWER tabeli ZO_SK - właściwe dodanie wybranego stanowiska do
::       ścieżki kariery.
::   WE: _a [STRING] - SQL-ref rekordu z poziomu którego wykonywana jest akcja.
::       _b [STRING] - Typ dodawanego rekordu (R/P).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\zo_sk_webwer_dolacz_a1/!poc_ocw_rocp.fml';

web_params_set(_par:=web_params_get());

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak lub nieprawidłowa wartość parametru %1.'@ ['BASE']);
   return()
|? var_pres('_b')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak lub nieprawidłowa wartość parametru %1.'@ ['TYPE']);
   return()
|? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? (_stn:=exec('FindAndGet','#table',STN,WT_TREE.ID,,,null()))=null()
|| FUN.emsg('Odnalezienie stanowiska nie powiodło się.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

ZO_SK.cntx_psh();
ZO_SK.index('TREE');
ZO_SK.prefix(_env.ZO_TEST);
{? _a<>'' & ZO_SK.seek(_a)
|| _add:=ZO_SK.STN;
   _parent:={? _b='R' || ZO_SK.ZO_SK || #ZO_SK.ref() ?}
|| _add:=1;
   _parent:=0
?};
{? _add
|| ZO_SK.blank();
   ZO_SK.KOGO:=_env.ZZ_OSOBA;
   ZO_SK.KTO_Z:=exec('czy_osoba','phr_dane',P,1);
   ZO_SK.ZO_TEST:=_env.ZO_TEST;
   ZO_SK.STN:=_stn;
   ZO_SK.ZO_SK:=_parent;
   ZO_SK.add()
:: Gotowość jest uzupełniana przez wyzwalacz.
|| ZO_SK.STN:=_stn;
   ZO_SK.put()
?};
ZO_SK.web_refresh(web_top_win(1),web_top_ident(1));
ZO_SK.cntx_pop();

WT_TREE.web_close();
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,WT_TREE.SETID);

~~


\zo_sk_webwer_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw" w oknie WEBWER tabeli ZO_SK. Pozwala zmienić stanowisko w ścieżce kariery.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

ZO_SK.web_cntx_save(1);

_STN:=sql(
   'select '
      'STN.ST, STN.REFERENCE as REF '
   'from '
      'STN '
   'where STN.Z=\'T\' and '
      'STN.REFERENCE not in '
         '(select ZO_SK.STN from ZO_SK where ZO_SK.STN is not null and ZO_SK.ZO_TEST=:_a and ZO_SK.STN<>:_b)',
   _env.ZO_TEST,ZO_SK.STN
);

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
_setid:='STN4ZO_SK';

:: Ponieważ webTerm nie pozwala na korzystanie z filtrów, odpowiednie stanowiska zaprezentujemy przy pomocy tabeli
:: WT_TREE. Zaczniemy od wyczyszczenie jej zawartości - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,_setid);
WT_TREE.cntx_psh();
WT_TREE.index('KEY');
WT_TREE.prefix(_tcid,_sesid,_tabid,_setid,0);
{? _STN.first()
|| {!
   |? WT_TREE.blank();
      WT_TREE.SETID:=_setid;
      WT_TREE.NAME:=_STN.ST;
      WT_TREE.ID:=_STN.REF;
      WT_TREE.add();
      _STN.next()
   !}
?};

web_params_set(
   exec('obj_ntab_set','#array',_par,
      'WT_TREE_WYB1F_WYBIERZ_A',"exec('zo_sk_webwer_popraw_a1','!poc_ocw_rocp')"
   )
);
WT_TREE.find_key(ZO_SK.STN().ST) | WT_TREE.first();
_ws:='WYB1F';
WT_TREE.web_win_init(_ws,,'title=%1' ['Stanowiska'@]);
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_TREE.web_select(_ws,,1,,$('WT_TREE.web_close(); exec(\'clean\',\'wt_tree\',3,\''+_setid+'\')'));
WT_TREE.cntx_pop();

~~


\zo_sk_webwer_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła pomocnicza dla akcji "Popraw" w oknie WEBWER tabeli ZO_SK - właściwa zmiana stanowiska w ścieżce
::       kariery.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~(exec('env_wt','poc') & ZO_SK.web_cntx_load(1)>0)
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? (_stn:=exec('FindAndGet','#table',STN,WT_TREE.ID,,,null()))=null()
|| FUN.emsg('Odnalezienie stanowiska nie powiodło się.'@);
   return()
?};

{? ZO_SK.STN<>_stn
|| ZO_SK.STN:=_stn;
   ZO_SK.put();
   ZO_SK.web_refresh(web_top_win(1),web_top_ident(1))
?};

WT_TREE.web_close();
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,WT_TREE.SETID);

~~


\zo_sk_webwer_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Usuń" w oknie WEBWER tabeli ZO_SK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());

{? ~(exec('env_wt','poc') & exec('exist','#record',ZO_SK))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

:: Sprawdźmy, czy są stanowiska podrzędne.
ZO_SK.cntx_psh();
ZO_SK.index('TREE');
ZO_SK.prefix(ZO_SK.ZO_TEST,#ZO_SK.ref());
_txt:=
   {? ZO_SK.first()
   || 'Czy usunąć bieżący wiersz wraz z informacjami powiązanymi?'@
   || 'Czy usunąć bieżący wiersz?'@
   ?};
ZO_SK.cntx_pop();

ZO_SK.web_cntx_save(1);
web_ask(
   "  {? ~_a
      || return()
      ?};
      {? exec('env_wt','poc') & ZO_SK.web_cntx_load(1)>0
      || do();
         {? exec('del_tree_branch','#tree',ZO_SK,'ZO_SK',,#ZO_SK.ref())
         || _kogo:=ZO_SK.KOGO;
            _zo_test:=ZO_SK.ZO_TEST;
            {? ZO_SK.del(1,1)=1
::             Jeżeli usunięty rekord był ostatni w dziedzinie, to należy dodać "pustaka".
::             Samo usunięcie ma za zadanie "wyczyścić" rekordy powiązane.
            || ZO_SK.blank();
               ZO_SK.KOGO:=_kogo;
               ZO_SK.KTO_Z:=exec('czy_osoba','phr_dane',P,1);
               ZO_SK.ZO_TEST:=_zo_test;
               ZO_SK.add()
            ?}
         || undo()
         ?};
         {? end()
         || ZO_SK.web_refresh(web_top_win(),web_top_ident())
         || FUN.emsg('Usunięcie nie powiodło się.'@)
         ?}
      ?}
   ",
   _txt,
   FUN.TYT
);

~~


\zo_sk_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Po odświeżeniu" dla okna WEBWER tabeli ZO_SK. Formuła wywoływana dynamicznie (poprzez zmienną
::       web_params_get().ZO_SK_WEBWER_AR). Odpowiada za ukrywanie przycisków w oknach zależnych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|| _ok:=1
?};

_grp:=web_top_win();

:: Wstępnie zablokujmy akcje w oknach zależnych.
_ag_gotw:='Z';
_ag_dok:='P';

{? _ok & ZO_SK.get()
|| _PERM:=exec('get_form_perm','phr_dane',_par.ZO_FORM);
   {? _PERM.find_key('RK',) & _PERM.EDIT='T'
   || _ag_gotw:=':';
      _ag_dok:='';
      _ag:={? ZO_SK.get() & ZO_SK.STN || '' || 'D(P)UP' ?}
   || _ag:='D(RP)UP'
   ?}
?};

ZO_SK.web_win_opt(_grp,'ZO_SK','grayed='+_ag);
ZO_SK.web_win_opt(_grp,'ZZ_GOTW','grayed='+_ag_gotw);
ZO_SK.web_ewin_opt(_grp,'ZZ_DOK','grayed='+_ag_dok);
ZO_SK.web_btn_eopt(_grp,'ZZ_DOK','POPRAW','state=%1' [{? _ag_dok*'P' || 'grayed' || 'normal' ?}]);
~~


\zo_sk_webgwer_zz_gotw_webwer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Przed obsługą" okna WEBWER tabeli ZZ_GOTW w ramach okna grupowego WEBGWER tabeli ZO_SK - ustala środowisko
::       pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=web_win_ref('ZO_SK');
ZZ_GOTW.index('LINKOP');
ZO_SK.prefix();
{? ZO_SK.seek(_ref)
|| ZZ_GOTW.prefix(ZO_SK.NP_DOK,ZO_SK.ZZ_DOK)
|| ZZ_GOTW.prefix('',null())
?};
ZZ_GOTW.first();
~~


\zo_sk_webgwer_zz_dok_webredd_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Przed obsługą" okna WEBREDD tabeli ZZ_DOK w ramach okna grupowego WEBGWER tabeli ZO_SK - ustala środowisko
::       pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
_ref:=web_win_ref('ZO_SK');
ZO_SK.prefix();
ZZ_DOK.prefix();
{? ZO_SK.seek(_ref) & ZO_SK.ZZ_DOK().get()
|| ZZ_DOK.memo_get(,'NOTA')
|| ZZ_DOK.memo_set(,'NOTA')
?};
~~


::======================================================================================================================
:: Mobilność
::======================================================================================================================


\zo_mob_webwer_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Dołącz" w oknie WEBWER tabeli ZO_MOB. Dodaje nowy typ mobilności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();

{? ~(exec('env_wt','poc'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
|? ZO_TEST.cntx_psh();
   ZO_TEST.prefix();
   {? ZO_TEST.seek(_env.ZO_TEST)
   || _zo_test:=ZO_TEST.ref();
      _test_dok:=ZO_TEST.ZZ_DOK
   || _zo_test:=_test_dok:=null()
   ?};
   ZO_TEST.cntx_pop();
   _zo_test=null() | _test_dok=null()
|| FUN.emsg('Nieprawidłowa wartość wskazania na tabelę %1 [%2].'@ ['ZO_TEST',_env.ZO_TEST]);
   return()
?};

:: Na wszelki wypadek uzupełnijmy dostępną mobilność.
exec('new_mobw','phr_dane',_test_dok);

_MOB:=sql(
   'select '
      'ZZ_MOBW.OPIS, ZZ_MOBW.REFERENCE as REF '
   'from '
      'ZZ_MOBW '
   'where '
      'ZZ_MOBW.ZZ_LINK=:_a and '
      'ZZ_MOBW.REFERENCE not in (select ZO_MOB.ZZ_MOBW from ZO_MOB where ZO_MOB.ZO_TEST=:_b)',
   _test_dok,_zo_test
);

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
_setid:='MOBW4ZO_TEST';

:: Ponieważ webTerm nie pozwala na korzystanie z filtrów, odpowiednią mobilność zaprezentujemy przy pomocy tabeli
:: WT_TREE. Zaczniemy od wyczyszczenie jej zawartości - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,_setid);
WT_TREE.cntx_psh();
WT_TREE.index('KEY');
WT_TREE.prefix(_tcid,_sesid,_tabid,_setid,0);
{? _MOB.first()
|| {!
   |? WT_TREE.blank();
      WT_TREE.SETID:=_setid;
      WT_TREE.NAME:=_MOB.OPIS;
      WT_TREE.ID:=_MOB.REF;
      WT_TREE.add();
      _MOB.next()
   !}
?};

web_params_set(
   exec('obj_ntab_set','#array',web_params_get(),
      'WT_TREE_WYB1F_WYBIERZ_A',
      $("exec('zo_mob_webwer_dolacz_a1','!poc_ocw_rocp','"+${? ZO_MOB.get() || ZO_MOB.ref() || null() ?}+"')")
   )
);

_ws:='WYB1F';
WT_TREE.web_win_init(_ws,,'title=%1' ['Mobilność'@]);
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_TREE.web_select(_ws,,,,$('WT_TREE.web_close(); exec(\'clean\',\'wt_tree\',3,\''+_setid+'\')'));
WT_TREE.cntx_pop();

~~


\zo_mob_webwer_dolacz_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła pomocnicza dla akcji "Dołącz" w oknie WEBWER tabeli ZO_MOB - właściwe dodanie wybranej mobilności.
::   WE: _a [STRING] - SQL-ref rekordu nadrzędnego (w szczególności '').
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_fml:='\\zo_mob_webwer_dolacz_a1/!poc_ocw_rocp.fml';

web_params_set(_par:=web_params_get());

{? var_pres('_a')<>type_of('')
|| FUN.emsg(_fml+'\n'+'Brak lub nieprawidłowa wartość parametru %1.'@ ['PARENT']);
   return()
|? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
|? (_mobw:=exec('FindAndGet','#table',ZZ_MOBW,WT_TREE.ID,,,null()))=null()
|| FUN.emsg('Odnalezienie mobilności nie powiodło się.'@);
   return()
?};

ZO_MOB.cntx_psh();
ZO_MOB.index('OCENAMOB');
ZO_MOB.prefix();
ZO_MOB.blank();
ZO_MOB.KOGO:=_env.ZZ_OSOBA;
ZO_MOB.KTO_Z:=exec('czy_osoba','phr_dane',P,1);
ZO_MOB.ZO_TEST:=_env.ZO_TEST;
ZO_MOB.ZZ_MOBW:=_mobw;
{? ZO_MOB.add()
:: Gotowość jest uzupełniana przez wyzwalacz.
|| ZO_MOB.web_refresh(web_top_win(1),web_top_ident(1))
?};
ZO_MOB.cntx_pop();

WT_TREE.web_close();
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,WT_TREE.SETID);

~~


\zo_mob_webwer_popraw_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Popraw" w oknie WEBWER tabeli ZO_MOB. Pozwala zmienić typ mobilności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
|? ZO_TEST.cntx_psh();
   ZO_TEST.prefix();
   {? ZO_TEST.seek(_env.ZO_TEST)
   || _zo_test:=ZO_TEST.ref();
      _test_dok:=ZO_TEST.ZZ_DOK
   || _zo_test:=_test_dok:=null()
   ?};
   ZO_TEST.cntx_pop();
   _zo_test=null() | _test_dok=null()
|| FUN.emsg('Nieprawidłowa wartość wskazania na tabelę %1 [%2].'@ ['ZO_TEST',_env.ZO_TEST]);
   return()
?};

ZO_MOB.web_cntx_save(1);

_MOB:=sql(
   'select '
      'ZZ_MOBW.OPIS, ZZ_MOBW.REFERENCE as REF '
   'from '
      'ZZ_MOBW '
   'where '
      'ZZ_MOBW.ZZ_LINK=:_a and '
      'ZZ_MOBW.REFERENCE not in '
         '(select ZO_MOB.ZZ_MOBW from ZO_MOB where ZO_MOB.ZO_TEST=:_b and ZZ_MOBW.REFERENCE<>:_c)',
   _test_dok,_zo_test,ZO_MOB.ZZ_MOBW
);

_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
_setid:='MOBW4ZO_TEST';

:: Ponieważ webTerm nie pozwala na korzystanie z filtrów, odpowiednią mobilność zaprezentujemy przy pomocy tabeli
:: WT_TREE. Zaczniemy od wyczyszczenie jej zawartości - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,_setid);
WT_TREE.cntx_psh();
WT_TREE.index('KEY');
WT_TREE.prefix(_tcid,_sesid,_tabid,_setid,0);
{? _MOB.first()
|| {!
   |? WT_TREE.blank();
      WT_TREE.SETID:=_setid;
      WT_TREE.NAME:=_MOB.OPIS;
      WT_TREE.ID:=_MOB.REF;
      WT_TREE.add();
      _MOB.next()
   !}
?};

web_params_set(
   exec('obj_ntab_set','#array',_par,
      'WT_TREE_WYB1F_WYBIERZ_A',"exec('zo_mob_webwer_popraw_a1','!poc_ocw_rocp')"
   )
);

WT_TREE.find_key(ZO_MOB.ZZ_MOBW().OPIS) | WT_TREE.first();
_ws:='WYB1F';
WT_TREE.web_win_init(_ws,,'title=%1' ['Mobilność'@]);
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
WT_TREE.web_select(_ws,,1,,$('WT_TREE.web_close(); exec(\'clean\',\'wt_tree\',3,\''+_setid+'\')'));
WT_TREE.cntx_pop();

~~


\zo_mob_webwer_popraw_a1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Formuła pomocnicza dla akcji "Popraw" w oknie WEBWER tabeli ZO_MOB - właściwa zmiana mobilności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~(exec('env_wt','poc') & ZO_MOB.web_cntx_load(1)>0)
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
|? (_mobw:=exec('FindAndGet','#table',ZZ_MOBW,WT_TREE.ID,,,null()))=null()
|| FUN.emsg('Odnalezienie mobilności nie powiodło się.'@);
   return()
?};

{? ZO_MOB.ZZ_MOBW<>_mobw
|| ZO_MOB.ZZ_MOBW:=_mobw;
   ZO_MOB.put();
   ZO_MOB.web_refresh(web_top_win(1),web_top_ident(1))
?};

WT_TREE.web_close();
:: Przy zamykaniu okna posprzątajmy w tabeli WT_TREE - koniecznie ze wskazaniem identyfikatora zestawu danych!
exec('clean','wt_tree',3,WT_TREE.SETID);

~~


\zo_mob_webwer_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: Obsługa akcji "Usuń - przed" w oknie WEBWER tabeli ZO_MOB
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(web_params_get());

{? ~(exec('env_wt','poc') & exec('exist','#record'))
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

ZO_MOB.web_cntx_save(1);
web_ask(
   "  {? ~_a
      || return()
      ?};
      {? ~(exec('env_wt','poc') & ZO_MOB.web_cntx_load(1)>0)
      || FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
      |? ZO_MOB.del(1,1)=0
      || FUN.emsg('Usunięcie nie powiodło się.'@)
      || ZO_MOB.web_refresh(web_top_win(),web_top_ident())
      ?}
   ",
   'Czy usunąć bieżący wiersz?'@,
   FUN.TYT
);

~~


\zo_mob_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Po odświeżeniu" dla okna WEBWER tabeli ZO_MOB. Formuła wywoływana dynamicznie (poprzez zmienną
::       web_params_get().ZO_MOB_WEBWER_AR). Odpowiada za ukrywanie przycisków w oknach zależnych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|| _ok:=1
?};

:: Wstępnie zablokujmy akcje w oknach zależnych.
_ag_gotw:='Z';
_ag_dok:='P';

{? _ok & ZO_MOB.get()
|| _PERM:=exec('get_form_perm','phr_dane',_par.ZO_FORM);
   {? _PERM.find_key('MB',) & _PERM.EDIT='T'
   || _ag_gotw:=':';
      _ag_dok:=''
   ?}
?};

_grp:=web_top_win();
ZO_MOB.web_win_opt(_grp,'ZZ_GOTW','grayed='+_ag_gotw);
ZO_MOB.web_ewin_opt(_grp,'ZZ_DOK','grayed='+_ag_dok);
ZO_MOB.web_btn_eopt(_grp,'ZZ_DOK','POPRAW','state=%1' [{? _ag_dok*'P' || 'grayed' || 'normal' ?}]);
~~


\zo_mob_webgwer_zz_gotw_wer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Przed obsługą" okna WEBWER tabeli ZZ_GOTW w ramach okna grupowego WEBGWER tabeli ZO_MOB - ustala środowisko
::       pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=web_win_ref('ZO_MOB');
ZZ_GOTW.index('LINKOP');
ZO_MOB.prefix();
{? ZO_MOB.seek(_ref)
|| ZZ_GOTW.prefix(ZO_MOB.NP_DOK,ZO_MOB.ZZ_DOK)
|| ZZ_GOTW.prefix('',null())
?};
ZZ_GOTW.first();
~~


\zo_mob_webgwer_zz_dok_redd_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Przed obsługą" okna WEBREDD tabeli ZZ_DOK w ramach okna grupowego WEBGWER tabeli ZO_MOB - ustala środowisko
::       pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
_ref:=web_win_ref('ZO_MOB');
ZO_SK.prefix();
ZZ_DOK.prefix();
{? ZO_MOB.seek(_ref) & ZO_MOB.ZZ_DOK().get()
|| ZZ_DOK.memo_get(,'NOTA')
|| ZZ_DOK.memo_set(,'NOTA')
?};
~~


::======================================================================================================================
:: Obszary rozwojowe
::======================================================================================================================


\szk_zap_webgzap_szk_zap_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Przed obsługą" obydwu okien WEBWER tabeli SZK_ZAP w ramach okna grupowego WEBGZAP.
::   WE: [_a] [STRING] - Kod obsługiwanej zakładki:
::                         O - Związane z oceną;
::                         A - Wszystkie [domyślnie].
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') & (_a='O' | _a='A') || _a || 'A' ?};

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie powiodło się.'@);
   return()
|? _par:=web_params_get();
   ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@);
   return()
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@);
   return()
?};

_ndx:='PT';
_ref:=null();

{? _kod='A'
|| _ndx:='PT';
   _ref:=_env.P

|| _ndx:='OCENADAT';
   _ref:=_env.ZO_TEST
?};

SZK_ZAP.index(_ndx);
SZK_ZAP.prefix(_ref);
SZK_ZAP.first();
~~


\szk_zap_webwer_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.02]
:: OPIS: "Po odświeżeniu" okna WEBWER tabeli SZK_ZAP. Formuła wywoływana dynamicznie (poprzez zmienną
::       web_params_get().SZK_ZAP_WEBWER_AR). Odpowiada za ukrywanie przycisków.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
_par:=web_params_get();

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@)
|? ~(obj_ntab(_par) & var_pres('ZO_FORM',_par)=type_of('') & ref_num(_par.ZO_FORM) & ref_tab(_par.ZO_FORM)=ZO_FORM)
|| FUN.emsg('Ustalenie formularza nie powiodło się.'@)
|? _env:=exec('zo_form_about','!poc_ocw_rocp',_par.ZO_FORM);
   ~_env.ZO_TEST
|| FUN.emsg('Odnalezienie formularza nie powiodło się.'@)
|| _ok:=1
?};

:: Wstępnie blokujemy wszystko.
_ag1:='DPUAO';
_ag0:='D';

{? _ok
|| _PERM:=exec('get_form_perm','phr_dane',_par.ZO_FORM);
   {? _PERM.find_key('PS',) & _PERM.EDIT='T'
   || {? SZK_ZAP.get()
::       Mamy uprawnienia do edycji i mamy bieżący rekord - wstępnie udostępnijmy wszystkie akcje.
      || _ag1:=_ag0:='';

         {? SZK_ZAP.ZO_TEST=null() | SZK_ZAP.SZK_PRAC<>null() |
            (SZK_ZAP.ZGL_KTO<>P.ref() & _env.ZZ_TYP_KOD<>'PB' & _env.ZZ_TYP_KOD<>'OU')
::          Jeżeli zapotrzebowanie nie jest związane z oceną lub
::          zapotrzebowanie zostało juz "skonsumowane" (odbyło się związane z nim szkolenie) lub
::          nie jesteśmy zgłaszającym i nie jest to ocena ani przełożonego  ani uzgodniona
::          to nie możemy go ani modyfikować ani weryfikować.
         || _ag1+='PUAO'

::          Jeżeli powyższe warunki nie zachodzą, to mamy prawo do modyfikacji, a weryfikacje rozpatrzmy poniżej.
::          Zaczniemy od ustalenia przełożenych pracownika, którego dotyczy zapotrzebowanie.
         |? _NAD:=exec('prac_nad','stanprac',SZK_ZAP.P);
            (P.ref()=_env.P & _NAD.first()) | _NAD.P_SQL<>$P.ref()
::          Jeżeli przeglądamy własne zapotrzebowania i mamy przełożonego lub
::          nie jesteśmy przełożonym pracownika, którego dotyczy zapotrzebowanie
::          to nie możemy weryfikować tego zapotrzebowania.
         || _ag1+='AO'
         || SLO_KOD.cntx_psh();
            _wer_wyn:=SZK_ZAP.WER_WYN().KOD;
            SLO_KOD.cntx_pop();
            {? _wer_wyn='Z'
            || _ag1+='A'
            |? _wer_wyn='O'
            || _ag1+='O'
            ?}
         ?}

::       Jeżeli dziedzina jest pusta (a tak zinterpretujmy brak możliwości wczytania bieżącego rekordu), i mamy
::       uprawnienia do edycji (co zostało sprawdzone wcześniej), to wycofajmy się z ustawień wstępnych (blokady
::       wszystkich akcji) i pozwólmy na "Dołącz".
      || _ag0:=''

      ?}
   ?}
?};

web_top_tab(0,0).web_win_opt(web_top_win(0,0),web_top_ident(0),'grayed=%1:%2' [_ag1,_ag0]);
~~


::======================================================================================================================
:: Pozostałe elementy oceny
::======================================================================================================================


\zo_dod_ctrl_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Inicjalizacja kontrolki - ocena kompetencji.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_init('',,'MCL.controls.formularzZKL')


\zo_dod_odswiez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła po odświeżeniu okna WT_ZDOD dla tabeli ZA_FORM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
web_params_set(_par:=web_params_get());

{? ~exec('env_wt','poc')
|| FUN.emsg('Ustalenie środowiska pracy nie było możliwe.'@);
   return()
?};

_kto:=$_par.KTO;
_kogo:=$_par.KOGO;
_zo_test:=$_par.ZO_TEST;
_zo_form:=_par.ZO_FORM;
: wczytanie definicji formularza
exec('zo_dod_def','!poc_ocw_rocp',_kto,_kogo,_zo_test,_zo_form);
exec('wt_opis_add','!poc_ocw_rocp');
: wywołanie metody tworzącej formularz
web_ctrl_call('FORM_CTRL',,'createFormularzZKL')


\zo_dod_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Przekazanie definicji ankiety do kontrolki wywoływanej pod webterm-em.
::   WE: _a - wskazanie na oceniajacego
::       _b - wskazanie na ocenianego
::       _c - wskazanie na ocene calkowita
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: przekazanie tablic z definicją zakładki oceny kompetencji
web_ctrl_set_table('FORM_CTRL',,'defFormZKLNag',exec('ocena_dod_nag','phr_dane',_a,_b,_c,_d));
web_ctrl_set_table('FORM_CTRL',,'defFormZKLSpis',exec('ocena_dod_spis','phr_dane',_a,_b,_c,_d));
web_ctrl_set_table('FORM_CTRL',,'defFormZKLRadio',exec('ocena_dod_radio','phr_dane',_a,_b,_c,_d));
exec('ocena_dod_about','phr_dane',_a,_b,_c,_d);
exec('ocena_dod_answer','phr_dane',_a,_b,_c,_d);
~~


::======================================================================================================================
:: Komentarze
::======================================================================================================================


\zo_form_ctrl_init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Inicjalizacja kontrolki - komentarze.
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_init('',,'MCL.controls.formularzZKL')


\zo_form_odswiez
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła po odświeżeniu okna WT_ZFORM dla tabeli ZO_FORM.
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();
{? ~exec('env_wt','poc')
|| return()
?};

_kto:=$_par.KTO;
_kogo:=$_par.KOGO;
_zo_test:=$_par.ZO_TEST;
_zo_form:=_par.ZO_FORM;
: wczytanie definicji formularza
exec('zo_form_def','!poc_ocw_rocp',_zo_test,_kto,_kogo,_zo_form);
exec('wt_opis_add','!poc_ocw_rocp');
: wywołanie metody tworzącej formularz
web_ctrl_call('FORM_CTRL',,'createFormularzZKL')


\zo_form_def
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Przekazanie definicji ankiety do kontrolki wywoływanej pod webterm-em.
::   WE: _c - wskazanie na ocene calkowita
::       _b - wskazanie na oceniajacego
::       _c - wskazanie na ocenianego
::----------------------------------------------------------------------------------------------------------------------
:: przekazanie tablic z definicją zakładki komentarze
web_ctrl_set_table('FORM_CTRL',,'defFormZKLNag',exec('ocena_form_nag','phr_dane',_a,_b,_c,_d));
web_ctrl_set_table('FORM_CTRL',,'defFormZKLSpis',exec('ocena_form_spis','phr_dane',_a,_b,_c,_d));
exec('ocena_form_answer','phr_dane',_a,_b,_c,_d);
~~


::======================================================================================================================
:: Statystyki
::======================================================================================================================


\wt_stat_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła na 'Rekord - przed' dla okna wertowania STAT tabeli WT_TREE (Statystki)
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};

WT_STAT.cntx_psh();
{? WT_STAT.get()
|| {? WT_STAT.ID<>'PARENT'
   || ZO_KOMP.cntx_psh();
      ZO_KOMP.prefix();
      {? ZO_KOMP.seek(WT_STAT.ID)
      || {? ZO_KOMP.ZO_FORM().Z='N'
         || ZZ_POM.EDYCJA:='T'
         || ZZ_POM.EDYCJA:='N'
         ?}
      ?};
      ZO_KOMP.cntx_pop()
   || ZZ_POM.EDYCJA:='N'
   ?}
?};
WT_STAT.cntx_pop()


\wt_stat_grp_zo_notao_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.42]
:: OPIS: Po odświeżeniu
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};

_ref:=web_win_ref('ZO_OCNEA_tree');
{?_ref=~~ || _ref:=null() ?};
_nota:=null();

ZO_NOTA.cntx_psh();
ZO_NOTA.index('TYP');
WT_STAT.cntx_psh();
WT_STAT.prefix();
{? WT_STAT.seek(_ref)
|| {? WT_STAT.ID<>'PARENT'
   || ZO_KOMP.cntx_psh();
      ZO_KOMP.prefix();
      {? ZO_KOMP.seek(WT_STAT.ID)
      || ZO_NOTA.prefix(ZO_KOMP.ref(),'OO');
         {? ZO_NOTA.first()
         || _nota:=ZO_NOTA.ref()
         ?}
      ?};
      ZO_KOMP.cntx_pop()
   ?}
?};
WT_STAT.cntx_pop();
ZO_NOTA.cntx_pop();

ZO_NOTAO.index('UNIQUE');
ZO_NOTAO.prefix(_nota);
{? ZO_NOTAO.first()
|| ZO_NOTAO.memo_get(,'OPIS')
|| ZO_NOTAO.memo_set(,'OPIS')
?};
~~


\wt_stat_grp_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Przed obsługą okna STAT_P i STAT tabeli WT_STAT (okno grupowe STAT_GRP).
::----------------------------------------------------------------------------------------------------------------------
_kod:=_a;
_tcid:=app_info('web_tcid');
_sesid:=app_info('web_sesid');
_tabid:=app_info('web_tabid');
WT_STAT.index('KEY');
{? _kod='A'
|| _setid:='zo_ocena'
|? _kod='B'
|| _setid:='zo_komp'
?};
WT_STAT.prefix(_tcid,_sesid,_tabid, _setid,);
~~

::======================================================================================================================
:: Kwalifikacje dodatkowe
::======================================================================================================================


::======================================================================================================================
:: Szkolenia
::======================================================================================================================


\szk_prac_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła na 'Rekord - przed' dla okna wertowania WT_OSZK (Szkolenia pracownika)
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
{? SZK_PRAC.get()
|| SZK_PRAC.SZKOL().TEMAT();
   SZK_PRAC.SZKOL().ORG()
?};
~~


::======================================================================================================================
:: Dokumenty
::======================================================================================================================


\wt_tree_dok_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła na "Rekord - przed" dla okna wertowania DOK tabeli WT_TREE.
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
ZZ_DOKZ.cntx_psh();
ZZ_DOKZ.prefix();
{? WT_TREE.get()
|| {? WT_TREE.ID='NAG'
   || ZZ_POM.DOK:=null();
      ZZ_POM.DAT_UTW:=''
|| {? ZZ_DOKZ.seek(WT_TREE.ID)
      || ZZ_POM.DOK:=ZZ_DOKZ.PLIK;
         ZZ_POM.DAT_UTW:=$ZZ_DOKZ.ZZ_DOK().DATA
      ?}
   ?}
?};
ZZ_DOKZ.cntx_pop()


\gen_dok_pap
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Generuje formularz oceny do wyełnienia ręcznego(warunek: musi istnieć przynajmniej jeden otwarty formularz).
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('env_wt','poc')
|| return()
?};
ZO_TEST.cntx_psh();
ZO_OSOBA.cntx_psh();
ZZ_OSOBA.cntx_psh();

web_params_set(_par:=web_params_get());
_env:=exec('zo_form_about','!poc_ocw_rocp',_par.zo_form);
_gen:="
   {? _a=1
   || {? ~exec('env_wt','poc')
      || return()
      ?};
      _par:=web_params_get();
      _form:=_par.zo_form;
      ZO_FORM.cntx_psh();
      ZO_FORM.prefix();
      {? ZO_FORM.seek(_form)
      || ZO_FORM.ZO_TEST();
         ZZ_POM.DOKZ_LNK:=ZO_TEST.ZZ_DOK;
         exec('report','phr_kreatory',ZO_FORM,'poc_ocprac2','ocena_r.pdf',
              'Dokument oceny okresowej pracownika',
               1,'OCPRAC-2'
         )
      ?};
      ZO_FORM.cntx_pop()
   ?}
";
web_ask(_gen,'Czy utworzyć formularz oceny do wypełnienia dla pracownika '@+_env.NAZWISKO+' '+_env.PIERWSZE+'?');

ZZ_OSOBA.cntx_pop();
ZO_OSOBA.cntx_pop();
ZO_TEST.cntx_pop();
~~


\wt_tree_dok_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.02]
:: OPIS: Formuła po odświeżeniu okna DOK tabeli WT_TREE (status przycisku 'Generuj formularz oceny').
::----------------------------------------------------------------------------------------------------------------------
_par:=web_params_get();
_form:=_par.zo_form;
ZO_FORM.cntx_psh();
ZO_FORM.prefix();
{? ZO_FORM.seek(_form)
|| ZO_FORM.ZO_TEST();
   {? ZO_TEST.KOMPLET='T'
   || _ag:='G';
      WT_TREE.web_win_opt(web_top_win(),web_top_ident(),'grayed='+_ag)
   || WT_TREE.web_win_opt(web_top_win(),web_top_ident(),'grayed='+'')
   ?}
?};
ZO_FORM.cntx_pop();
~~


\wt_stat_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RO [18.42]
:: OPIS: Dodanie kompetencji i oceny do pierwszej zakładki ze statystykami.
::   WE: _a - setid (zestaw danych)
::       _b - nazwa kompetencji
::       _c - typ oceniającego
::       _d - nazwisko oceniającego
::       _e - imię oceniającego
::       _f - ocena oczekiwana
::       _g - ocena uzyskana
::       _h - możliwość edycja [T/N]
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
WT_STAT.blank();
WT_STAT.SETID:=_a;
WT_STAT.NAME:=_b;
WT_STAT.OSOBA:=_d+' '+_e;
WT_STAT.ZZ_TYP:=_c;
WT_STAT.KEY:=_c;
WT_STAT.OO:=_f;
WT_STAT.OU:=_g;
WT_STAT.ID:=_h;
WT_STAT.add()



\wt_opis_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PH [19.42_15]
:: OPIS: Dodanie obiektu z tekstami labeli z FormularzZKL.js
::----------------------------------------------------------------------------------------------------------------------
web_ctrl_set_obj('FORM_CTRL',,'des','expand','Pokaż opis'@,'collapse','Ukryj opis'@,
 'expandToolText','Pokaż opis kompetencji'@, 'collapseToolText','Ukryj opis kompetencji'@,
  'closeBtn', 'Zamknij'@, 'desRate', 'Ocena opisowa'@, 'ptRate', 'Ocena punktowa'@)

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:18 11c2e551b9037ea8d13a318ff34d5fcefc681526a0ac87c2d58a3b6f8f91ecead190acd3d84f279bdeb3b49d89a0aa3a1fc0b1cd2eaf00b853ca1274341214fc1cfb700b767d5f4cfce9ffd2defb7753299dc99a77b1e6fd075fbd76eec33c1001bc6dddb2fc26d0361e418826700ca5242dd316ea12ddf4cf73317c04393590
