:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ltr_zle_dzle.fml
:: Utworzony: 23.07.2019
:: Autor: MarKus
::======================================================================================================================
:: Zawartość: Formuły czynności LTR_ZLE_DZLE - Rejestracja dyspozycji transportu
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Formuła główna czynności LTR_ZLE_DZLE
::   WE: _a - [obj_new] - parametry wejsciowe czynności
::       _b - [obj_new] - parametry wewnętrzne czynności
::       _c - [obj_new] - parametry wyjściowe czynności
::       _d - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=TR_RODZ
::# kind=WE,   symbol=TR_NZL,  type=_TR_NZL,  name=Dyspozycja transportowa,         required=N, keyref=T
::# kind=WE,   symbol=RODZ,    type=NUMBER,   name=Rodzaj dyspozycji,               required=N, fml_val="exec('rodzaj_dyspozycji','!ltr_zle_dzle')"
::# kind=WE,   symbol=ZK_N,    type=_ZK_N,    name=Zamówienie sprz./wewn.,          required=N
::# kind=WE,   symbol=ZD_NAG,  type=_ZD_NAG,  name=Zamówienie dostaw,               required=N
::# kind=WE,   symbol=ND,      type=_ND,      name=Dokument magazynowy,             required=N
::# kind=WE,   symbol=ZDP_NAG, type=_ZDP_NAG, name=Potwierdzenie zamówienia dostaw, required=N
::# kind=WE,   symbol=TR_MAG,  type=STRING,   name=Dyspozycja w magzzynie,          required=N
::# kind=WE,   symbol=REK_N,   type=_REK_N,   name=Reklamacja,                      required=N
::# kind=WE,   symbol=ZGP,     type=_ZGP,     name=Pozycja przewodnika,             required=N
::# kind=WY,   symbol=TR_NZL,  type=_TR_NZL,  name=Dyspozycja transportowa,         required=N

_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

:: Uruchomiona akcja
_akcja:=_mp.akcja();
_auto:=_akcja<>'Akceptuj' & (_mp.isAutoRun() | _mp.isService());
_areaDysp:=_mp.pathArea('LTR_ZLE');
_area:=_areaDysp | _mp.pathArea('LTR_MAG') | _mp.pathArea('LMG_MAG')
     | _mp.pathArea('LSP_ZKN') | _mp.pathArea('LZK_ZDS') | _mp.pathArea('LMG_ZAM')
     | _mp.pathArea('TRE_REK') | _mp.pathArea('TRE_RDO') | _mp.pathArea('TTE_KOO');
_proc:=_mp.pathProc();
_todo:=_mp.pathTodo() | (_mp.pathArea() & ~_area);

:: Sprawdzenie parametrów pracy dla czynności startowej
::{? _mp.pathProc()
::|| {? ST.AR=0 || FUN.info('Ustaw parametry pracy.'@); _wyn:=0; return() ?}
::?};
_dok:=null();
{? var_pres('ZK_N',_in)=type_of(null())    || _dok:=_in.ZK_N
|? var_pres('ZD_NAG',_in)=type_of(null())  || _dok:=_in.ZD_NAG
|? var_pres('ND',_in)=type_of(null())      || _dok:=_in.ND
|? var_pres('ZDP_NAG',_in)=type_of(null()) || _dok:=_in.ZDP_NAG
|? var_pres('REK_N',_in)=type_of(null())   || _dok:=_in.REK_N
|? var_pres('ZGP',_in)=type_of(null())     || _dok:=_in.ZGP
|| _dok:=null()
?};

_uidmag:={? var_pres('TR_MAG',_in)=type_of('') || _in.TR_MAG || '' ?};

{? var_pres('TR_NZL',_in)=type_of(null()) & _in.TR_NZL<>null() & _out.TR_NZL=~~
|| _out.TR_NZL:=_in.TR_NZL;
   _mp.save(,_out)
?};
_refTR_NZL:={? _areaDysp || TR_NZL.ref() || _out.TR_NZL ?};

exec('init','ltr');

:: Ustawienie kontekstu wg instancji elementu w procesie
{? _mp.pathTodo()
|| {? var_pres('TR_NZL',_out)=type_of(null()) & _out.TR_NZL
   || 1
   |? ~_mp.isMicro()
   || _akcja:='START_TODO'
   || _mp.error('Brak parametru wyjściowego TR_NZL.')
   ?}
?};

:: Sprawdzenie uprawnień
params_set('in',_in,'user',OPERATOR.USER,'mp',_mp);
{? exec('permissions','!ltr_zle_dzle')=0
|| _mp.error('Brak uprawnień do uruchomienia czynności.'@);
   return()
?};

_mp.trigRef('TR_NZL',,1,,exec('kind_out','#b_port'),'TR_NZL');
_rodz_zlec:={? var_pres('RODZ',_in)=type_of(0) || _in.RODZ || 0 ?};
::_count_split:={? var_pres('ILE',_in)=type_of(0) || _in.ILE || 1 ?};

_ask_del:={? TR_NZL.SPLIT<>'' || 1 || 0 ?};

{? _auto & var_pres('TR_NZL',_out)=type_of(null()) & _out.TR_NZL<>null()
 & exec('FindInSet','#table','TR_ZL','POZ',_out.TR_NZL)<>null()
||
   TR_NZL.cntx_psh();
   TR_NZL.use(ref_name(_out.TR_NZL));
   TR_NZL.cntx_psh();
   TR_NZL.prefix();
   {? TR_NZL.seek(_out.TR_NZL)
   ||
      {? exec('tr_nzl_akc','transport_zlec',1) || _mp.done() ?}
   ?};
   TR_NZL.cntx_pop();
   TR_NZL.cntx_pop()

|? _akcja='Dołącz'
   | _proc
   | (_akcja='' & _area)
   | _akcja='START_TODO'
||
::    Parametr 'akcja' wykorzystywany w formułach przycisków 'Pozycje', 'Zakończ'
      params_set('out',_out,'mp',_mp,'akcja',_akcja);
      exec('tr_nzl_add','transport_zlec',_dok);

::    Podczytanie parametrów wyjściowych
      _outa:=_mp.load(exec('kind_out','#b_port'));
      {? var_pres('TR_NZL',_outa)<>type_of(~~) & _outa.TR_NZL
::       Dodano dokument
      ||
::       Ustawienie się na dodanym dokumencie w widoku obszaru
         {? _area || TR_NZL.seek(_outa.TR_NZL) ?}
::       Wycofanie czynności bo nie dodano dokumentu
      || _mp.cancel()
      ?}

|? _akcja='Popraw'
   | _todo
|| {? var_pres('_refTR_NZL')=type_of(null())
:: Uruchomione w procesie
   || TR_NZL.cntx_psh();
      TR_NZL.prefix();
      {? TR_NZL.seek(_refTR_NZL)
      || {? ~_todo | TR_NZL.STAT_REJ='N'
         || params_set('out',_out,'mp',_mp,'akcja',_akcja);
            exec('tr_nzl_pop','transport_zlec');
            _mp.descTodo()
         || FUN.info('Dyspozycja transportowa już jest zakończona.'@);
            _mp.done()
         ?}
      ?};
      TR_NZL.cntx_pop()
   |? _todo
:: Uruchomione zadanie z listy todo i brak _out.FAKS wtedy zadanie wycofujemy
   || _mp.cancel()
   |? _mp.isMicro()
:: Uruchomione poza procesem
   ||
      params_set('out',_out,'mp',_mp,'akcja',_akcja);
      exec('tr_nzl_pop','transport_zlec')
   ?}

|? _akcja='Kopiuj'
   | _todo
||
   {? var_pres('TR_NZL',_out)=type_of(null())
:: Uruchomione w procesie
   ||
      _tr_copy:=null();
      TR_NZL.cntx_psh();
      TR_NZL.prefix();
      {? TR_NZL.seek(_out.TR_NZL)
      ||
         _prev_uidref:=TR_NZL.uidref();
         exec('tr_nzl_kop','transport_zlec',_rodz_zlec,,{? _rodz_zlec=0 || 1 || 0 ?});

::       Podczytanie parametrów wyjściowych
         _outa:=_mp.load(exec('kind_out','#b_port'));
         {? var_pres('TR_NZL',_outa)<>type_of(~~) & _outa.TR_NZL
::       Dodano dokument
         ||
::       Ustawienie się na dodanym dokumencie w widoku obszaru
            {? _area || _tr_copy:=_outa.TR_NZL ?}
::       Wycofanie czynności bo nie dodano dokumentu
         || _mp.cancel()
         ?};

         _mp.delRef(_prev_uidref)
      ?};
      TR_NZL.cntx_pop();
      {? _area & _tr_copy || TR_NZL.seek(_tr_copy) ?}
   |? _todo
:: Uruchomione zadanie z listy todo i brak _out.FAKS wtedy zadanie wycofujemy
   || _mp.cancel()
   |? _mp.isMicro()
:: Uruchomione poza procesem
   ||
      _prev_uidref:=null();
      TR_NZL.prefix();
      {? TR_NZL.seek(_out.TR_NZL)
      ||
         _prev_uidref:=TR_NZL.uidref()
      ?};
      params_set('out',_out,'mp',_mp,'akcja',_akcja);
      exec('tr_nzl_kop','transport_zlec',_rodz_zlec,,1);
      _mp.delRef(_prev_uidref)
   ?}

|? _akcja='Podziel'
   | _todo
||
   {? var_pres('TR_NZL',_out)=type_of(null())
:: Uruchomione w procesie
   ||
      TR_NZL.cntx_psh();
      TR_NZL.prefix();
      {? TR_NZL.seek(_out.TR_NZL)
      ||
         _prev_uidref:=TR_NZL.uidref();
         exec('tr_nzl_split','transport_zlec',,_uidmag);

::       Podczytanie parametrów wyjściowych
         _outa:=_mp.load(exec('kind_out','#b_port'));
         {? var_pres('TR_NZL',_outa)<>type_of(~~) & _outa.TR_NZL
::       Dodano dokument
         ||
::       Ustawienie się na dodanym dokumencie w widoku obszaru
            {? _area || TR_NZL.seek(_outa.TR_NZL) ?}
::       Wycofanie czynności bo nie dodano dokumentu
         || _mp.cancel()
         ?};

         _mp.delRef(_prev_uidref)
      ?};
      TR_NZL.cntx_pop()
   |? _todo
:: Uruchomione zadanie z listy todo i brak _out.FAKS wtedy zadanie wycofujemy
   || _mp.cancel()
   |? _mp.isMicro()
:: Uruchomione poza procesem
   ||
      _prev_uidref:=null();
      TR_NZL.prefix();
      {? TR_NZL.seek(_out.TR_NZL)
      ||
         _prev_uidref:=TR_NZL.uidref()
      ?};
      params_set('out',_out,'mp',_mp,'akcja',_akcja);
      exec('tr_nzl_split','transport_zlec',,_uidmag);
      _mp.delRef(_prev_uidref)
   ?}

|? _akcja='Zakończ_wer' & _area
|| {? exec('tr_nzl_akc','transport_zlec') || _mp.done() ?}

|? _akcja='Usuń'
||
   {? var_pres('_refTR_NZL')=type_of(null())
:: Uruchomione w procesie
   || _tr_nzl:=null();
      TR_NZL.cntx_psh();
      {? ~_area || TR_NZL.prefix() ?};
      {? TR_NZL.seek(_refTR_NZL)
      ||
         exec('tr_nzl_usu','transport_zlec', _ask_del);

         {? ~TR_NZL.seek(_refTR_NZL)
::       Wycofuję instancję jeśli nie znaleziono dokumentu
         || _mp.cancel()
         ?};
         _tr_nzl:=TR_NZL.ref()
      ?};
      TR_NZL.cntx_pop();
::    Ustawienie się na kolejnym dokumencie w widoku obszaru
      {? _area || {? _tr_nzl || TR_NZL.seek(_tr_nzl) ?} ?}
   |? _mp.isMicro()
:: Uruchomione poza procesem
   ||
      exec('tr_nzl_usu','transport_zlec', _ask_del);

      _mp.done()
   ?}
||
   _mp.error('Nieobsługiwana ścieżka.'@)
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Opis czynności LTR_ZLE_DZLE
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_out:=_mp.load(exec('kind_out','#b_port'));

{? type_of(_out)>type_of(~~) & var_pres('TR_NZL',_out)>type_of(~~)
|| 'Zakończ rejestrację dyspozycji transportowego: %1'@@[exec('record','#to_string',_out.TR_NZL)]
||
   _in:=_mp.load(exec('kind_in','#b_port'));
   {? type_of(_in)>type_of(~~) & var_pres('TR_NZL',_in)>type_of(~~)
   || 'Zakończ rejestrację dyspozycji transportowej: %1'@@[exec('record','#to_string',_in.TR_NZL)]
   || 'Zarejestruj dyspozycje transportową'@@
   ?}
?}


\permissions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Formuła na uprawnienia dla czynności
::   WE: params_get().in - parametry wejściowe czynności
::           params_get().user - użytkownik dla którego sprawdzane są uprawnienia
::           params_get().mp - Menedżer Procesów
::   WY: 0 - użytkownik nie ma uprawnień do czynności
::       1 - użytkownik ma uprawnienia do czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;
_wyn:=1;
_wyn


\dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Funkcja tworząca nową dyspozycję transportową
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
exec('mp_run','#b__box',_params);
~~


\popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Funkcja poprawiająca dyspozycję transportową
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Popraw';
_params.UIDREF:=TR_NZL.uidref();
exec('mp_run','#b__box',_params);
~~


\usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Funkcja usuwająca dyspozycje transportowe
::----------------------------------------------------------------------------------------------------------------------
:: Pytanie czy przepisać ilości z usuwanej dyspozycji do powiązanej z nią dyspozycji
{? ~exec('ctrl_tr_nzlC','transport_paczki',TR_NZL.ref())
|| FUN.info('Chociaż jedna z wygenerowanych przesyłek ma nadany numer.\n'
            'Niemożliwe usunięcie dyspozycji transportowej.'@)
|? exec('usun_split','transport_zlec')
||
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LTR_ZLE_DZLE';
   _params.AKCJA:='Usuń';
   _params.UIDREF:=TR_NZL.uidref();
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
   exec('mp_run','#b__box',_params)
?};
~~


\usun_split_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Sprawdzanie czy można usunąć dyspozycje transportowe które zostało wcześniej podzielone
::----------------------------------------------------------------------------------------------------------------------
sel_exit()


\zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Funkcja zakańczająca dyspozycje transportowe
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Zakończ_wer';
_params.UIDREF:=TR_NZL.uidref();
exec('mp_run','#b__box',_params);
~~


\kopia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Skopiowanie danej dyspozycji transportowej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Kopiuj';
::_params.UIDREF:=TR_NZL.uidref();
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
exec('mp_run','#b__box',_params);
~~


\kopia_reverse
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Skopiowanie danej dyspozycji transportowej
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Kopiuj';
::_params.UIDREF:=TR_NZL.uidref();
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'RODZ',1);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
exec('mp_run','#b__box',_params);
~~


\split
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [Markus] [19.42]
:: OPIS: Dzielenie dyspozycji transportowej
::   WE: [_a] - tryb podziału: 0(domyślny) 1-wydzielenie z realizacji do ponownego planowania
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of(0) || _a || 0 ?};

TR_NZL.cntx_psh();
TR_ZL.cntx_psh();
_uidmag:='';
{? TR_NZL.WHERE='TR_NZL'
|| _uidmag:=TR_NZL.uidref();
   TR_NZL.prefix();
   {? TR_NZL.seek(TR_NZL.DOK_REF) || _ok:=1 ?}
|| _ok:=1
?};
{? _ok
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LTR_ZLE_DZLE';
   _params.AKCJA:='Podziel';
   _params.PROC_START:='T';
::_params.UIDREF:=TR_NZL.uidref();
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_NZL',TR_NZL.ref());
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'TR_MAG',_uidmag);
   exec('mp_run','#b__box',_params)
|| FUN.info('Nie znaleziono dyspozycji transportu, z której powstała dyspozycja w magazynie.'@)
?};
TR_NZL.cntx_pop();
TR_ZL.cntx_pop();
~~


\tr_zl_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: dołącz dla pozycji dyspozycji transportowej
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? exec('tr_nzl_lock','transport_zlec')
||
   {? (';ZK_N;ZD_NAG;ND;ZDP_NAG;REK_N;ZGP;'*TR_NZL.WHERE)>1
   || _refnzl:=TR_NZL.ref();
      _Tab:=exec('where2TAB','transport_wspolne',TR_NZL.WHERE,1);
      _Tad:=exec('where2TAB','transport_wspolne',TR_NZL.WHERE);
      _typgen:={? TR_NZL.WHERE='ZD_NAG'  || 'D'
               |? TR_NZL.WHERE='ZDP_NAG' || 'P'
               |? TR_NZL.WHERE='ZK_N'    || exec('FindAndGet','#table',ZK_N,TR_NZL.DOK_REF,,"T().R",'')
               |? TR_NZL.WHERE='ND'      || exec('FindAndGet','#table',ND,TR_NZL.DOK_REF,,
                                             "'M'+{? TYP().Z='T' || 'Z' || 'W' ?}+TYP().P",'')
               |? TR_NZL.WHERE='REK_N'   || 'R'+exec('FindAndGet','#table',REK_N,TR_NZL.DOK_REF,,"SZ",'')
               |? TR_NZL.WHERE='ZGP'     || 'O'
               || ''
               ?};
      _doksql:={? _Tad<>TR_NZL
               || $exec('FindAndGet','#table',_Tad,TR_NZL.DOK_REF,,,null())
               || ''
               ?};
      _zalgen:={? _typgen='O'
               || TR_NZL.RODZ
               || ''
               ?};
      TR_NZL.get();
      TR_NZL.cntx_psh();
      TR_ZL.cntx_psh();
      {? exec('dysp_gen','transport_zlec',TR_NZL.KH,_doksql,_typgen,,_zalgen)
      || {? __dsp_tab.first()
         ||
            {!
            |? _uidref:=exec('FindAndGet','#table',_Tab,__dsp_tab.ZAMP_REF,,"uidref()",'');
               _uiddok:=exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"uidref()",'');
               _symdok:={? TR_NZL.WHERE<>'ZGP'
                        || exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"SYM",'')
                        || exec('FindAndGet','#table',_Tad,__dsp_tab.ZAMN_REF,,"NRZLP().NRPRZ",'')
                        ?};
               _mod:=0;
               {? __dsp_tab.IL_DO>0 & _uidref<>''
               ||
::                szuka tozsamej pozycji zamowienia i dopisuje ilosc
                  TR_ZL.index('POZREF');
                  TR_ZL.prefix(_refnzl,_uidref,);
                  {? TR_ZL.first()
                  || TR_ZL.IL+=__dsp_tab.IL_DO;
                     exec('poz_przelicz','transport_zlec');
                     _mod:=1;
                     _oki:=TR_ZL.put(1)
                  || TR_ZL.prefix();
                     TR_ZL.blank();
                     TR_ZL.TR_NZL:=_refnzl; TR_ZL.TR_NZL().SYM;
                     TR_ZL.POZ:=exec('BL_TR_ZLPOZ','transport_zlec');
                     TR_ZL.M:=exec('FindAndGet','#table',M,__dsp_tab.M_REF,,"ref()",null());
                     TR_ZL.MG:=exec('FindAndGet','#table',MG,__dsp_tab.MG_REF,,"ref()",null());
                     TR_ZL.IL:=__dsp_tab.IL_DO;
                     TR_ZL.JM:=TR_ZL.M().J;
                     TR_ZL.POZ_REF:=_uidref;
                     TR_ZL.DOK_REF:=_uiddok;
                     TR_ZL.DOK_SYM:=_symdok;
                     TR_ZL.SZER:=TR_ZL.M().SZER*VAR.JMPRZ$3;
                     TR_ZL.DLUG:=TR_ZL.M().DLUG*VAR.JMPRZ$3;
                     TR_ZL.WYSO:=TR_ZL.M().WYS*VAR.JMPRZ$3;
                     exec('poz_przelicz','transport_zlec');
                     _oki:=TR_ZL.add(1)
                  ?};
                  {? _oki
                  || {? TR_NZL.WHERE='REK_N'
                     || {? _mod || exec('delaRekD','reklamacje',TR_ZL.uidref()) ?};
                        exec('autoRekD','reklamacje',exec('FindAndGet','#table',REK_N,TR_ZL.DOK_REF,,,null())
                                                    ,TR_ZL.TR_NZL().uidref()
                                                    ,TR_ZL.uidref()
                                                    ,TR_ZL.IL,'Wystawienie dyspozycji transportu')
                     ?};
                     exec('sum_poz','transport_zlec',_refnzl);
                     exec('ktm2tr_nzl','transport_zlec',_refnzl);
                     _Buf:=exec('where2TAB','transport_wspolne',TR_ZL.TR_NZL().WHERE,1);
                     _zal:={? TR_ZL.TR_NZL().WHERE='ZGP' || TR_NZL.RODZ || '' ?};
                     {? _Buf<>TR_ZL & TR_ZL.POZ_REF<>''
                     || exec('aktIL_TRAN','transport_wspolne',_Buf,TR_ZL.POZ_REF,_zal)
                     ?};
                     obj_del(_Buf)
                  ?}
               ?};
               __dsp_tab.next()
            !}
         ?}
      ?};
      TR_NZL.cntx_pop();
      TR_ZL.cntx_pop()
   || TR_ZL.blank();
      TR_ZL.win_edit('RED');
      POMOC.RODZTR:=TR_ZL.TR_NZL().TR_RODZ;
      {? POMOC.RODZT='' || POMOC.RODZ:=POMOC.RODZT:='T' ?};
      _act:=M.actions('NL_WER','WE');
      _actU:=M.actions('NL_WERU','WE');
      TR_ZL.memo_set('','POZ_OPIS');

:: blokada edycji pól
      exec('pozycja_edit_field','transport_zlec');

      {? TR_ZL.edit("exec('chk_tr_zl','!ltr_zle_dzle')")
      || _wyn:=TR_ZL.add();
         TR_ZL.memo_put(,'POZ_OPIS');
         {? _wyn || exec('ktm2tr_nzl','transport_zlec',TR_ZL.TR_NZL) ?}
      ?};
      M.actions('NL_WER',_act);
      M.actions('NL_WERU',_actU)
   ?};
   POMOC.RODZTR:=null()
?};
_wyn


\tr_zl_mod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: popraw dla pozycji dyspozycji transportowej
::   WE: [_a] - 1-tryb automatyczny bez pytań, 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};
exec('tr_zl_mod','transport_wspolne',_auto);
~~


\tr_zl_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: usuń dla pozycji dyspozycji transportowej
::   WE: [_a] - 1-tryb automatyczny bez pytań, 0(domyślnie)-nie
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};
exec('tr_zl_del','transport_wspolne',_auto);
~~


\chk_tr_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: kontrola poprawności danych dla TR_ZL
::----------------------------------------------------------------------------------------------------------------------
_wyn:='';
_wyn:=__CHK.record(TR_ZL,,'M','IL');
{? _wyn=''
||
   {? TR_ZL.IL<=0    || FUN.info('Ilość przewożona musi być większa od zera.'@); _wyn:='IL' ?};
   {? TR_ZL.SZER<0   || FUN.info('Szerokość nie może być ujemna.'@); _wyn:='SZER' ?};
   {? TR_ZL.DLUG<0   || FUN.info('Długość nie może być ujemna.'@); _wyn:='DLUG' ?};
   {? TR_ZL.WYSO<0   || FUN.info('Wysokość nie może być ujemna.'@); _wyn:='WYSO' ?}
?};
{? _wyn='' & (';ZK_N;ZD_NAG;ZDP_NAG;ND;REK_N;'*TR_ZL.TR_NZL().WHERE)>1
|| _bufil:=exec('FindAndGet','#table',TR_ZL,TR_ZL.ref(),,"IL",TR_ZL.IL);
:: kontrola ilości względem tego co jest aktualnie na dokumencie
   _Tab:=exec('where2TAB','transport_wspolne',TR_ZL.TR_NZL().WHERE,1);
   {? _Tab<>TR_ZL & TR_ZL.POZ_REF<>''
   || _poz_ref:={? _Tab=ZDP_POZ || exec('FindAndGet','#table',_Tab,TR_ZL.POZ_REF,,"ZD_POZ",'') || TR_ZL.POZ_REF ?};
      {? _Tab=ZK_P | _Tab=ZD_POZ | _Tab=ZDP_POZ
      || _buf:=exec('ileTR_ZL','transport_wspolne',_poz_ref,,1);
         _ilz:=_buf[1];
         obj_del(_buf)
      || _ilz:=0
      ?};
      _ilp:={? _Tab=ZK_P    || exec('FindAndGet','#table',_Tab,_poz_ref,,"ILP",TR_ZL.IL)-_ilz
            |? _Tab=ZD_POZ  || exec('FindAndGet','#table',_Tab,_poz_ref,,"IL_POZ",TR_ZL.IL)-_ilz
            |? _Tab=DK      || exec('FindAndGet','#table',_Tab,_poz_ref,,"IL-IL_ZT",TR_ZL.IL)-_ilz
            |? _Tab=ZDP_POZ || exec('FindAndGet','#table',ZD_POZ,_poz_ref,,"IL_POZ",TR_ZL.IL)-_ilz
            |? _Tab=REK_N   || exec('FindAndGet','#table',_Tab,_poz_ref,,"IL-IL_ZT",TR_ZL.IL)-_ilz
            || 0
            ?}+_bufil;
      {? _ilp<0 || _ilp:=0 ?};
      {? _ilp<TR_ZL.IL
      || FUN.info('Zbyt duża ilość do dyspozycji transportu.'
          '\nAktualnie maksymalna ilość do zadysponowania: %1.'@[$_ilp]);
         _wyn:='IL'
      ?}
   ?}
?};
_wyn


\tr_nzl_pozycje_wer
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Dyspozycja transportu - Pozycje - okno wertowania
::----------------------------------------------------------------------------------------------------------------------
BPMN.END:=0;
params_exec('zlec_poz','transport_zlec');
~~


\wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.42]
:: OPIS: Dyspozycja transportu - wycofaj
::----------------------------------------------------------------------------------------------------------------------
_sel:=TR_NZL.sel_aget();
TR_NZL.sel_adel();
{? ~_sel.first() || _sel.REF:=#TR_NZL.ref(); _sel.add() ?};
TR_NZL.cntx_psh();
_dyspmg:=0;
_dysptr:=0;
{? _sel.first()
|| {!
   |? {? (TR_NZL.prefix(); TR_NZL.seek(_sel.REF,))
      || {? TR_NZL.WHERE='TR_NZL'
         || _dyspmg+=1
         || _dysptr+=1
         ?}
      ?};
      (~_dyspmg | ~_dysptr) & _sel.next()
   !}
?};
{? _sel.first() & FUN.ask({? _sel.size()>1
                          || {? ~_dyspmg
                             || 'Wycofać zakończenie redakcji dla zaznaczonych dyspozycji transportowych?'@
                             |? ~_dysptr
                             || 'Zmienić stan dla zaznaczonych dyspozycji w magazynie?'@
                             || 'Wycofać zakończenie redakcji dla zaznaczonych dyspozycji transportowych\n'
                                'oraz zmienić stan dyspozycji w magazynie?'@
                             ?}
                          || {? _dysptr
                             || 'Wycofać zakończenie redakcji dyspozycji transportowej %1?'@[TR_NZL.SYM]
                             || 'Zmienić stan dyspozycji w magazynie %1?'@[TR_NZL.SYM]
                             ?}
                          ?})
|| {!
   |? {? (TR_NZL.prefix(); TR_NZL.seek(_sel.REF,))
       & {? (_rek:=exec('dokWITHrek','reklamacje',TR_NZL.uidref()); _rek<>'' & TR_NZL.WHERE<>'REK_N')
         || 0
         |? TR_NZL.TR_NAG=null()
         || TR_NZL.STAT_REJ='Z'
         |? TR_NZL.WHERE='TR_NZL' & (';CB'*(1+TR_NZL.STMG))>1
         || 1
         || 0
         ?}
      ||
         exec('log_nag','transport_wspolne',TR_NZL.uidref(),'wyc');
         {? TR_NZL.TR_NAG=null()
         || TR_NZL.STAT_REJ:='N';
            TR_NZL.PLAN:='N';
            TR_NZL.STATUS:=exec('tr_nzl_status','transport_zlec');
            {? TR_NZL.WHERE='TR_NZL' || exec('status_MG','transport_wspolne') ?};
            TR_NZL.put(1)
         |? TR_NZL.WHERE='TR_NZL' & (';CB'*(1+TR_NZL.STMG))>1
         || {? ~exec('ctrl_poz','transport',TR_NZL.ref())
            || {? TR_NZL.TR_NAG().STAT_REJ='Z'
               || TR_NZL.MGDSP:='T'
               || TR_NZL.MGDSP:='N'
               ?}
            || TR_NZL.MGDSP:='R'
            ?};
            TR_NZL.REAL:='N';
            TR_NZL.DR:=date(0,0,0);
            TR_NZL.GR:=time(0,0,0);
            exec('status_MG','transport_wspolne');
            {? TR_NZL.put(1) || exec('aktDYSPzam','transport_zlec',TR_NZL.DOK_REF) ?}
         ?}
      ?};
      _sel.next()
   !}
?};
TR_NZL.cntx_pop();
obj_del(_sel);
~~


\tr_nzl_status_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [19.42]
:: OPIS: wartość początkowa TR_NZL.STATUS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('tr_nzl_status_nowe','transport_zlec')


\rodzaj_dyspozycji
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Markus [19.42]
:: OPIS: Rodzaj dyspozycji
::----------------------------------------------------------------------------------------------------------------------
_choice:=FUN.choice('Odwrócić rodzaj dyspozycji?'@,,'Nie'@,'Tak'@);
{? _choice=1
|| 0
|| 1
?}



\dolacz_ZK_N
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Dołaczenie dyspozycji na podstawie zamówienia sprzedaży, wewnętrznego
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZK_N',ZK_N.ref());
exec('mp_run','#b__box',_params);
~~


\dolacz_ZD_NAG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Dołaczenie dyspozycji na podstawie zamówienia dostaw
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZD_NAG',ZD_NAG.ref());
exec('mp_run','#b__box',_params);
~~


\dolacz_ND
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Dołaczenie dyspozycji na podstawie zamówienia dostaw
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ND',ND.ref());
exec('mp_run','#b__box',_params);
~~


\dolacz_ZDP_NAG
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Dołaczenie dyspozycji na podstawie potwierdzenia zamówienia dostaw
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZDP_NAG',ZDP_NAG.ref());
exec('mp_run','#b__box',_params);
~~


\tr_nzl_anuluj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: Dyspozycja transportu - anuluj
::   WE: [_a] - 1-tryb automatyczny (powiązane) 0-nie (domyślny tryb)
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};

TR_NZL.cntx_psh();
_dyspmg:=TR_NZL.WHERE='TR_NZL';
_dyspzam:=(';ZK_N;ZD_NAG;ZDP_NAG;'*TR_NZL.WHERE)>1;
_dostate:=do_state();
{? _auto | FUN.ask({? ~_dyspmg
                   || 'Anulować dyspozycję transportową %1?'
                      '\n\nUwaga. Powiązane dyspozycje w magazynie zostaną również anulowane.'@[TR_NZL.SYM]
                   || 'Anulować dyspozycję w magazynie %1?'@[TR_NZL.SYM]
                   ?})
|| {? ~_dostate || do() ?};
   exec('log_nag','transport_wspolne',TR_NZL.uidref(),'anu');
   TR_NZL.prefix();
   TR_NZL.STAT_REJ:='A';
   TR_NZL.PLAN:='N';
   TR_NZL.STATUS:='anulowane';
   TR_NZL.REAL:='N';
   TR_NZL.DR:=date();
   TR_NZL.GR:=time();
   {? _dyspmg || exec('status_MG','transport_wspolne') ?};
   _ok:=TR_NZL.put(1);
   {? _ok & ~_auto
   ||
::    zmiana ilości transpotowanych
      {? _dyspzam || {? ~exec('aktuIL_ZT','!ltr_zle_dzle',TR_NZL.ref()) || undo() ?} ?};
      {? _dyspzam & TR_NZL.GRP<>''
      ||
::       anulacja powiązanych dyspozycji w magazynie
         _grp:=TR_NZL.GRP;
         TR_NZL.cntx_psh();
         TR_NZL.index('GRP');
         TR_NZL.prefix(_grp);
         {? TR_NZL.first()
         || {!
            |? {? TR_NZL.WHERE='TR_NZL' || exec('tr_nzl_anuluj','!ltr_zle_dzle',1) ?};
               TR_NZL.next()
            !}
         ?};
         TR_NZL.cntx_pop()

      |? _dyspmg
      ||
::       aktualizacja statusu dyspozycji transportowej
         exec('aktDYSPzam','transport_zlec',TR_NZL.DOK_REF)
      ?}
   |? ~_ok
   || undo()
   ?};
   {? ~_dostate || end() ?}
?};
TR_NZL.cntx_pop();
~~


\aktuIL_ZT
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [20.14]
:: OPIS: aktualizuje pole IL_ZT
::   WE: [_a] - TR_NZL.ref()
::   WY: 1-ok 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
TR_ZL.cntx_psh();
TR_ZL.index('POZ');
TR_ZL.prefix(_a);
{? TR_ZL.first() & (';ZK_N;ZD_NAG;ZDP_NAG;REK_N;ZGP;'*TR_ZL.TR_NZL().WHERE)>1
|| VAR_DEL.delete('__ilzt');
   {!
   |? {? TR_ZL.POZ_REF<>''
      || __ilzt:=TR_ZL.IL;
         _res:=exec('FindAndGet','#table',ref_tab(TR_ZL.POZ_REF),TR_ZL.POZ_REF,,"IL_ZT-=__ilzt;put(1)",1)
      ?};
      _res & TR_ZL.next()
   !};
   VAR_DEL.delete('__ilzt')
?};
TR_ZL.cntx_pop();
_res


\dolacz_rek_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [21.37]
:: OPIS: Dołaczenie dyspozycji na podstawie reklamacji
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LTR_ZLE_DZLE';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'REK_N',REK_N.ref());
exec('mp_run','#b__box',_params);
~~


\dolacz_ZGP
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Dołaczenie dyspozycji na podstawie pozycji przewodnika
::----------------------------------------------------------------------------------------------------------------------
{? ZGP.WEW='N' & ZGP.TPZ='N' & ZGP.ZL().STAN<>'Z' & ZGP.KONTRAH<>null() & ZGP.NRPRZ().STAN='N'
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LTR_ZLE_DZLE';
   _params.AKCJA:='Dołącz';
   _params.PROC_START:='T';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZGP',ZGP.ref());
   exec('mp_run','#b__box',_params)
|| FUN.info('Pozycja przewodnika nie spełnia kryteriów dyspozycji transportowej.'@)
?};
~~

:Sign Version 2.0 jowisz:1045 2024/01/25 10:22:22 65c8ed632b9573a2c0de594beea37412aa574723e097dcd2b6278b1b81a6edb61f1f9a0c42bc36f51cbe74bc9b6d337a4b7d2ff0990012e7793d5eacfea4865112c7d37047c7007ee44afe732ce1dfa2359617c8364a717e44266cca6e7d2dfbf47e13e827dac24652931da305959569a285a9e4bc4410757a347e6b0d1349e1
