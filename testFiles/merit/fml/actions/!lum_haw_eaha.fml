:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_haw_eaha.fml
:: Utworzony: 19.02.2019
:: Autor: [WH]
::======================================================================================================================
:: Zawartość: Formuły czynności LUM_HAW_EAHA
::            Akceptacja harmonogramu umów
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [WH] [19.22]
:: OPIS: Czynność LUM_HAW_EAHA - formuła główna
::   WE: _a - [obj_new] - parametry wejsciowe czynności
::       _b - [obj_new] - parametry wewnętrzne czynności
::       _c - [obj_new] - parametry wyjściowe czynności
::       _d - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get);
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ
::# parses=exec('parses','!lum_haw_eaha')
::# access=exec('access','!lum_haw_eaha')

::# kind=WE,   symbol=HN,  type=_HN,  name=Harmonogram umów,     required=T, keyref=T
{? var_pres('HN',_in)<>type_of(~~) & var_pres('HN',_in)<>type_of(null()) || return() ?};
{? var_pres('HN',_in)=type_of(~~) || _in.HN:=null() ?};

_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy HN, to ustawiam odpowiednie HN
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=HN.name()
|| _kref:=_keyRefs[1];
   _hn:=exec('FindAndGet','#table',HN,_kref,,,null())
:: jest parametr wejściowy HN
|? var_pres('HN',_in)=type_of(null())
|| _hn:=exec('FindAndGet','#table',HN,_in.HN,,"ref()",null())
|| _hn:=null()
?};

_can_continue:=1;

_dialog:=1;
{? _mp.isAutoRun() | _mp.isService()
|| _dialog:=0
?};
{? _mp.isGroup()
|| _dialog:=2
?};

exec('__KAL','object');

HN.cntx_psh();
HN.prefix();
_what:='';
{? _can_continue>0 & HN.seek(_hn)
|| _what:=exec('HN','#to_string')
|| _can_continue:=0
?};
{? _can_continue=0
||
   _msg:='Nie znaleziono harmonogramu umów. Prawdopodobnie został usunięty.'@;
   {? _mp.isService()=0
   || FUN.emsg(_msg)
   ?};
   _mp.error(_msg)
?};

:: Sekcja kontroli
{? _can_continue>0
||
   {? HN.STAT_REJ='T'
   || _msg:='Harmonogram umów: %1 został już wcześniej zaakceptowany'@[_what];
      {? _dialog=1
      || FUN.info(_msg)
      |? _dialog=2
      || exec('komm_add','umowy_harm',_msg)
      ?};
      _can_continue:=0
::   |? HN.STAT_REJ='N'
::   || _msg:='Nie zakończono jeszcze harmonogramu: %1.\nAkceptacja niemożliwa.'@[_what];
::      {? _dialog=1
::      || FUN.info(_msg)
::      |? _dialog=2
::      || exec('komm_add','umowy_harm',_msg)
::      ?};
::      _mp.error(_msg);
::      _can_continue:=0;
::      ~~
   ?}
?};

:: Sekcja dialogu
{? _can_continue>0 & _dialog=1
||
   {? _mp.pathTodo()
   ||
      _win_red:=exec('hn_win_edit','umowy_harm');

      _ff:="params_exec('select_single','umowy_harm',,,,0);''";
      HN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin,display=1'['&Podgląd harmonogramu'@],_ff);
      _ff:="params_exec('accept_core','!lum_haw_eaha'); 'key:Esc'";
      HN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['A&kceptuj'@],_ff);
      _ff:="'key:Esc'";
      HN.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
      HN.win_edit(_win_red);
      HN.display();
::    Usunięcie definicji tymczasowych okien
      HN.win_edit('');
      HN.win_edel(_win_red)
   || _can_continue:=exec('accept_core','!lum_haw_eaha',1)
   ?}
?};
:: Sekcja automatyczna
{? _dialog=0 | _dialog=2
|| _can_continue:=exec('accept_core','!lum_haw_eaha',0)
?};

:: Sekcja zakańczania czynności
{? _can_continue>0 & HN.STAT_REJ='T'
|| _mp.done()
?};
HN.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));
{? var_pres('HN',_in)=type_of(~~) || _in.HN:=null() ?};
_hn:=null();
:: jest rekord kluczowy HN, to ustawiam odpowiednie HN
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=HN.name()
|| _kref:=_keyRefs[1];
   _hn:=exec('FindAndGet','#table',HN,_kref,,,null())
?};

{? _hn=null() & _in.HN<>null()
|| _hn:=_in.HN
?};

{? _hn<>null()
|| HN.cntx_psh(); HN.prefix();
   {? HN.seek(_hn)
   || _what:=exec('HN','#to_string');
      _desc:='Zaakceptuj harmonogram umów: %1'@@[_what]
   ?};
   HN.cntx_pop()
?};
{? _desc=''
|| _desc:='Zaakceptuj harmonogram umów'@@
?};
_desc


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
{? var_pres('HN',_in)=type_of(~~) || _in.HN:=null() ?};

_hn:=null();
{? _in.HN<>null()
|| _hn:=_in.HN
?};
_result:=0;

{? _hn<>null()
|| HN.cntx_psh();
   HN.prefix();
   {? HN.seek(_hn)
   || __PARSES.setVal('OddzialLogProd',HN.ODDZ);
      _result:=1
   ?};
   HN.cntx_pop()
:: Nic nie ustawiamy, ale zwracamy 1, w formule przy braku parametrów wejściowych zostanie zgłoszony błąd
|| _result:=1
?};
_result


\access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Formuła ograniczajaca uprawnienia do czynności LUM_HAR_DPHA
::       Sprawdza czy dany użytkownik może redagować harmonogram w danym oddziale
::       startowego danego obiektu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;

{? var_pres('HN',_in)=type_of(~~) || _in.HN:=null() ?};

_hn:=null();
{? _in.HN<>null()
|| _hn:=_in.HN
?};

_result:=0;
{? _hn<>null()
|| HN.cntx_psh();
   HN.prefix();
   {? HN.seek(_hn)
   || _refo:={? HN.ODDZ<>'' || exec('FindInSet','#table','ODDZ','KOD2',HN.ODDZ,HN.ODDZ) || null() ?};
      {? _refo<>null()
      ||
         _result:=exec('usr_upr','b_perm','ODDZ',_refo,_user)
      ||
::       Brak oddziału
         _result:=1
      ?}
   ?};
   HN.cntx_pop()
:: Jeżeli nie ma parametru to zawsze zwracamy 1 żeby się tu nie powiesiło
|| _result:=1
?};
_result


\action_accept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Akceptacja harmonogramu - akcja 'Akceptuj'
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_harm;

_hn:=HN.ref();
_what:=exec('HN','#to_string');
_locked:=exec('blk_lock','#table','HN',_hn,,1,{? VAR.GRUPA='T' || '' || 'Harmonogram %1 jest redagowany'@[_what] ?});
{? _locked
|| _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='LUM_HAW_EAHA';
   _args.UIDREF:=HN.uidref();
   _args.AKCJA:='AKCEPTUJ';
   _args.GRUPA:=VAR.GRUPA;
   _args.CONTEXT:=obj_new('HN','OK','env_harm');
   _args.CONTEXT.OK:=0;
   _args.CONTEXT.HN:=HN.ref();
   _args.CONTEXT.env_harm:=_env;
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'HN',HN.ref());
   exec('mp_run','#b__box',_args);
   exec('blk_unlock','#table','HN',_hn)

|| {? VAR.GRUPA='T'
   || KOMM.add('Nie można akceptować harmonogramu %1 — jest redagowany.'@[_what])
   ?}
?};
~~


\action_accept_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Akceptacja harmonogramu - akcja 'Akceptuj' (przed grupą rekordów)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_harm;

_result:=0;
_ilosc:=HN.sel_size();

_ask:=FUN.ask(
      'Ilość zaznaczonych harmonogramów: %1.'@[$_ilosc]+'\n\n'+
      'Czy akceptować je wszystkie?'@);
{? _ask>0
||
   sel_nchk();
   VAR.GRUPA:='T';
   KOMM.init(255,,'Akceptacja harmonogramów umów'@);
   _result:=1
?};
_result


\action_accept_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Rejestracja harmonogramu - akcja 'Generuj' (po grupie rekordów)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_harm;

VAR.GRUPA:='N';
KOMM.select();
~~


\accept_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.22]
:: OPIS: Akceptacja harmonogramu - jądro operujące na rekordzie, wywoływane z przycisku
::   WE: [_a] - INTEGER 0/[1] - sposób wyświetlania dialogów
::   WY: 0 - porażka
::       1 - sukces
::----------------------------------------------------------------------------------------------------------------------
_dialog:=1;
{? var_pres('_a')=type_of(0)
|| _dialog:=_a
?};
_mp:=params_get().mp;

_result:=0;
_can_continue:=1;

_what:=exec('HN','#to_string');
_hn:=HN.ref();
_locked:=exec('blk_lock','#table','HN',_hn,,1,{? VAR.GRUPA='T' || '' || 'Harmonogram %1 jest redagowany'@[_what] ?});
{? _locked
||
   {? _dialog=1
   || _can_continue:=FUN.ask('Zaakceptować harmonogram umów: %1?'@[_what])
   ?};

   {? _can_continue>0
   || HN.STAT_REJ:='T';
      _can_continue:=HN.put()
   ?};
   {? _can_continue>0
   || _result:=1
   ?};
   exec('blk_unlock','#table','HN',_hn)
|| {? VAR.GRUPA='T'
   || KOMM.add('Nie można akceptować harmonogramu %1 — jest redagowany.'@[_what])
   ?}
?};
HN.get();
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:40 0eb89a3298c5009ccf4075f15f2ff8a63510fa1b9fd91cdabc91dac9029baf07422406ac63bf53c7598ac3247817ee82461606443cc8259f8e9afa22a94272a0c795497aaa17848ba2f34e9c59b6b5fa061fd463555d9d1d18c6b9e61a5caedb8e6c477b2c3d85d7fd397f809aa831eee02c60e2071676692dd862e61545d4e5
