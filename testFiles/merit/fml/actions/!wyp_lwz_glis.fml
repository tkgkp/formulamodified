:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !wyp_lwz_glis.fml
:: Utworzony: 17.10.2017
:: Autor: GZ
:: Systemy:
::======================================================================================================================
:: Zawartość:
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Formuła główna czynności generowania list zapotrzebowania (WYP_LWZ_GLIS)
::       Listy generowane sa tylko dla pracowników, do których user ma uprawnienia z uwzglednieniem ustawien obszaru
::       jesli ZZAOP.PGRUPY, to program bedzie generowal tylko dla pracownikow z tej grupy
::       jesli podano ZZAOP.MGR, to tylko towary z tego asortymentu
::       każda lista zapotrzebowania jest w oddzielnej transakcji
::       lista pozostaje tylko wtedy, gdy jego dane sa formalnie poprawne
::       brani sa pod uwage tylko pracownicy, do ktorych user ma uprawnienia
::       pracownik musi miec w podanym dniu ZZAOP.DATAW zapotrzebowanie
::
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ,F_ZATR,UD_SKL
::# properties=LOOP,SERVICE
::# parses=exec('parses','!wyp_lwz_glis')

::# kind=WE, symbol=PGRUPY,   type=_PGRUPY,  name=Grupa pracowników,             required=N, fml_val="exec('pgrupy_select','normatyw')"
::# kind=WE, symbol=MGR,      type=_MGR,     name=Grupa materiałowa lub usługowa,required=N, fml_val="exec('mgr_select','material')"
::# kind=WE, symbol=DATA,     type=DATE,     name=Data,                          required=N
::# kind=WY, symbol=ODZAM,    type=_ODZAM,   name=Lista zapotrzebowania,         required=N
::# kind=WY, symbol=RESULT,   type=STRING,   name=Wynik działania,               required=N

_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;
_result:=0;

_mp.trigRef('ODZAM',,1,,exec('kind_out','#b_port'),'ODZAM',,,1);

::_mp.save(exec('kind_out','#b_port'),'RESULT','OK');

ZZAOP.blank();
_zzaop:=obj_new('EDIT_PGRUPY'
                  ,'EDIT_MGR'
                  ,'EDIT_DATAW'
);
_zzaop.EDIT_MGR:=1;
_zzaop.EDIT_PGRUPY:=1;
_zzaop.EDIT_DATAW:=1;

_mgr:=null();
{? type_of(_in.MGR)>0
|| _mgr:=exec('FindAndGet','#table',MGR,_in.MGR,,,null())
?};
{? _mgr<>null()
|| _zzaop.EDIT_MGR:=0;
   ZZAOP.MGR:=_mgr
?};
_pgrupy:=null();
{? type_of(_in.PGRUPY)>0
|| _pgrupy:=exec('FindAndGet','#table',PGRUPY,_in.PGRUPY,,,null())
?};
{? _pgrupy<>null()
|| _zzaop.EDIT_PGRUPY:=0;
   ZZAOP.PGRUPA:=_pgrupy
?};
_data:=date(0,0,0);
{? var_pres('DATA',_in)=type_of(date())
|| _data:=_in.DATA;
   _zzaop.EDIT_DATAW:=0;
   ZZAOP.DATA_W:=_data;
   {? _data<date()
   || _can_continue:=0;
      _msg:='Data wydania nie może byc wcześniejsza niż data bieżąca.'@;
      {? _mp.isGroup()
      || KOMM.add(_msg,2,,1)
      || FUN.emsg(_msg)
      ?};
      _mp.error(_msg)
   ?}
|| ZZAOP.DATA_W:=exec('zzaopdwp','wyp_zaopatrz')
?};

params_set('zzaop',_zzaop);

_mp.save(exec('kind_out','#b_port'),'RESULT','BŁĄD');

:: Uruchomienie automatyczne lub serwisowe
{? _mp.isAutoRun() | _mp.isService()
||
   _odzam:=params_exec('odz_generuj','!wyp_lwz_glis');
   {? _odzam<>null()
   || _result:=1;
      _mp.save(exec('kind_out','#b_port'),'ODZAM',_odzam);
      _mp.done()
   || _mp.cancel()
   ?}
:: Nowy zapis ze startu procesu albo akcja GENERUJ
|? _mp.pathTodo() | _mp.pathProc() | _mp.akcja()='GENERUJ'
|| KOMM.init(,,'Dołączenie listy zapotrzebowania wyposażenia'@);
   _odzam:=params_exec('odz_generuj','!wyp_lwz_glis');
   {? _odzam<>null()
   || _result:=1;
      _mp.save(exec('kind_out','#b_port'),'ODZAM',_odzam);
      _mp.done()
   || _mp.cancel()
   ?}

:: Kontynuacja z poziomu listy zadań albo akcja POPRAW
|? _mp.akcja()='POPRAW'
||
   _odzam:=_context.ODZAM;
   {? _result:=exec('odz_popraw','!wyp_lwz_glis',_odzam)
   || {? _result
      || _mp.save(exec('kind_out','#b_port'),'ODZAM',_odzam);
         _mp.done()
      ?}
   ?}
?};
{? _result>0
|| _mp.save(exec('kind_out','#b_port'),'RESULT','OK')
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Opis dla czynności generowania list zapotrzebowania (WYP_LWZ_GLIS)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_desc:='Wygeneruj listę zapotrzebowania'@@;
_desc


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=0;

{? _mp.isService()
|| _mag_fo:=exec('get','#params',700530);
   {? _mag_fo<>''
   || MG.cntx_psh();
      MG.index('MAGAZYNY');
      MG.prefix(_mag_fo,_mag_fo,);
      {? MG.first()
      || __PARSES.setVal('Magazyn',MG.ref);
         __PARSES.setVal('OddzialLogProd',KARO.MG().ODDZ)
      ?};
      MG.cntx_pop()
   ?};
   _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=date()~1;
   _args.AM:=date()~2;
   __PARSES.setVal('OkresRok',_args);
   _result:=1
|| _result:=1
?};
_result


\action_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Akcja 'Generuj' w oknie wertowania poleceń, uruchamia czynność
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='WYP_LWZ_GLIS';
_args.AKCJA:='GENERUJ';
_args.PROC_START:='T';
::_args.CONTEXT:=obj_new('RESULT');
::_args.CONTEXT.RESULT:=0;
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('mp_run','#b__box',_args)


\action_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Akcja 'Generuj' w oknie wertowania poleceń, uruchamia czynność
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='WYP_LWZ_GLIS';
_args.AKCJA:='POPRAW';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('ODZAM');
_args.CONTEXT.ODZAM:=ODZAM.ref();
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('mp_run','#b__box',_args)


\odz_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Generacja nowej listy zapotrzebowania
::  OLD: \odz_generuj/zaopatrz.fml
::   WE: [_a] 1: domyslnie - z dialogami
::            0: bez dialogów (na potrzeby service)
::----------------------------------------------------------------------------------------------------------------------
::sprawdzenie formuly numeracji
{? var_pres('_a')<>type_of(0)
|| _a:=1
?};
_mp:=params_get().mp;
_odzam:=null();
_numeracja:=exec('get','#params',700503);

{? _numeracja=''
|| FUN.error('Brak zdefiniowanej grupy numeracji dla list w parametrach programu.'@);
   return()
?};
::_TAB:=sql('select NR from ODZAM where STAN in (\'N\',\'T\')');
::_ok:={? _TAB.size()
::     || FUN.ask('Nie wszystkie dotychczasowe listy zostały zamknięte. '+
::                'Funkcja generacji nowej listy nie sprawdza zawartości poprzednich, '+
::                'dlatego na generowanej mogą pojawić się pozycje, które '+
::                'uwzględniono na którejś z istniejcych. Czy kontynuować?')
::     || 1
::     ?};
::obj_del(_TAB);
_ok:=1;
{? _ok
||
:: pobranie danych niezbednych do prawidlowego wygenerowania listy
   PGRUPY.cntx_psh();
   MGR.cntx_psh();
   MGR.clear(); MGR.index('KOD'); MGR.win_sel('WER'); MGR.actions('WER','dpu:d');
   PGRUPY.win_sel('WER'); PGRUPY.win_sel('WER'); PGRUPY.actions('WER','dupW:d');
   ZZAOP.win_edit('RED');
   {? _mp.isService() | ZZAOP.edit()
   ||
      exec('cr_tab','!wyp_lwz_glis');
::    utworzenie wstepnego wykazu zapotrzebowania dla wszystkich pracownikow na dzien ZZAOP.DATA_W
      {? params_exec('mk_list','!wyp_lwz_glis')
      ||
::       utworzenie wynikowych tabel tymczasowych, z ukladem danych zblizonym do rzeczywistego
::       pozwoli to je ostatecznie sprawdzic oraz pozniej skrocic zapis w transakcji
         exec('cr_tab2','!wyp_lwz_glis');
         {? params_exec('prepare','!wyp_lwz_glis')
         ||
::         usuniecie niepotrzebnej tabeli
            exec('droptab','!wyp_lwz_glis');
::         dane tymczasowe gotowe do zapisu wykonanie zapisow rzeczywistych
            _odzam:=params_exec('zapis','!wyp_lwz_glis')
         ?};
         exec('droptab2','!wyp_lwz_glis')
      || {? ~_mp.isService()
         || FUN.info(
            'Bark pracowników, dla których wystąpi zapotrzebowanie w podanym dniu.\n'
            'Przyczyną może być brak uprawnień do pracowników'@)
         ?}
      ?};
      exec('droptab','!wyp_lwz_glis')
   ?};
   PGRUPY.actions(PGRUPY.win_sel('?'));
   PGRUPY.cntx_pop();
   MGR.cntx_pop()
?};
_odzam


\cr_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Utworzenie zespolu tabel tymczasowych pomocniczych do obliczen zapotrzebowania
::  OLD: \cr_tab/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('droptab','!wyp_lwz_glis');
__TMP_ZOD:=tab_tmp(2,'REF_TG','INTEGER','TG_REF',
                     'REF_P','INTEGER','P_REF',
                     'REF_OS','INTEGER','OSOBA_REF',
                     'KOD','STRING[50]','Kod'@,
                     'NAZ','STRING[100]','Nazwa'@,
                     'NAZWIM','STRING[40]','Nazwisko imiona'@,
                     'INFO','STRING[20]','Pracownik'@,
                     'ILWYN','REAL','Ilość'@,
                     'OK','INTEGER','Pozycja OK'@,
                     'ROZMWAR','STRING[80]','Parametr'@
                  );
__ndx_zod:=__TMP_ZOD.ndx_tmp(,,'REF_OS',,,'KOD',,,'NAZ',,);
__TMP_BW:=tab_tmp(2,'REF_P','INTEGER','P_REF',
                     'REF_W','INTEGER','WYMIAR_REF',
                     'NAZWIM','STRING[40]','Nazwisko imiona'@,
                     'WYMIAR','STRING[20]','Parametr'@
                  )


\mk_list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Okreslenie zapotrzebowania dla wszystkich pracownikow zatrudnionych i zebranie w tabelach tymczasowych
::    WY: 1 - dane gotowe, 0 - dane zdyskwalifikowane
::  OLD: \mk_list/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
::Faza 1 - dla kazdego pracownika zatrudnionego i niewykluczonego okresla potrzeby na zadany ZZAOP.DATA_W dzien.
::Faza 2 - pobiera wymagania z danych pracownikow i sprawdza czy sa wszystkie dane; sporzadza liste brakow.
::Faza 3 - przeprowadza dialog z uzytkownikiem, jezeli wystapily braki w danych rozmiarowych pracownikow.
_ok:=0;
::liczba sprawdzanych pol TAT w M_ATR
_maxatrs:=10;
_mp:=params_get().mp;
_service:=_mp.isService();
P.cntx_psh(); P.clear();
OSNODZ.cntx_psh();
M_ATR.cntx_psh(); M_ATR.clear();
::ograniczenie listy wg uprawnien usera i wybranego obszaru
::{? _pracownik<>null()
::|| P.f_set('T',,'"P"."REFERENCE"=:_a',_pracownik)
{? _service
|| P.f_set('T','join F_ZATR','"F_ZATR"."DOCELOWA"=\'T\'')
|| exec('filtruj_p','wyp')
?};
{? P.f_first()
||
   _licz:=0;
   {!
   |?
      _licz+=1;
      {? ~_service
      || progress(100*_licz/P.f_size(),'Czytanie normatywów pracowników.'@,'Przygotowanie danych do generowania'@)
      ?};
::    czy pracownik jest zatrudniony
::    czy osoba/pracownik nie jest wykluczony
::    jesli wyszczegolniono grupe pracownikow, czy osoba nalezy do tej grupy
      {? ((P.DZ=date(0,0,0)) | (P.DZ>=date()))
         & (exec('czyjest_osnodz','wyp_zaopatrz',P.ref())=0)
::!!!wlaczyc jak beda paczki         & {? ZZAOP.UWZNOPAK || ~PWAITPK.find_key(P.IP) || 1 ?}
         &((~ZZAOP.PGRUPA) | (ZZAOP.PGRUPA=exec('ref_gp','normatyw',P.ref())))
      ||
::       f a z a   1:
::      okreslenie przypuszczalnego zapotrzebowania pracownika w zadanym dniu
         exec('zapotrz','wyp_zaopatrz',ZZAOP.DATA_W,P.ref());
         {? __TMPZAP.first()
         ||
::          istnieja pozycje zapotrzebowania dla tego pracownika zapis do TMP
            {!
            |?
::              jesli wyszczegolniono asortyment pakowania, czy towar nalezy do tego asortymentu
               {? (~ZZAOP.MGR) | exec('czywaso','wyp_zaopatrz',__TMPZAP.REF,ZZAOP.MGR)
               ||
                  __TMP_ZOD.blank();
                  __TMP_ZOD.OK:=1;
                  __TMP_ZOD.REF_TG:=__TMPZAP.REF;
                  __TMP_ZOD.REF_P:=#P.ref();
                  __TMP_ZOD.REF_OS:=#P.OSOBA;
                  __TMP_ZOD.KOD:=__TMPZAP.KOD;
                  __TMP_ZOD.NAZ:=__TMPZAP.NAZ;
                  __TMP_ZOD.NAZWIM:=exec('osoba_npd','wyp',P.OSOBA);
                  __TMP_ZOD.INFO:=exec('set_p_info','wyp',P.ref());
                  __TMP_ZOD.ILWYN:=__TMPZAP.ILWYN;
                  __TMP_ZOD.add()
               ?};
               __TMPZAP.next()
            !}
         ?};
         exec('drop_tzap','wyp_zaopatrz')
      ?};
      P.f_next()
   !};
   prgs_clr();
   P.clear();
   {? __TMP_ZOD.first()
   ||
::    f a z a   2:
::    pobranie danych rozmiarowych, w tym kontrola, czy sa wszystkie jesli nie to zaznaczenie rekordow OK=0
::    brakujace rozmiary zapisywane sa w dodatkowej tabeli tymczasowej TMP_BW
      _licz:=0;
      MGRP.cntx_psh(); MGRP.clear();
      {!
      |?
         _licz+=1; progress(100*_licz/__TMP_ZOD.size(),'Pobieranie parametrów.'@,'Przygotowanie danych do generowania'@);
::       redundancja - zawsze powinien byc MGRP i P
         {? MGRP.seek(__TMP_ZOD.REF_TG,) & P.seek(__TMP_ZOD.REF_P,)
         ||
::          odzszukanie odpowiedniego
            {? M_ATR.seek(MGRP.M_ATR)
            ||
::             do towaru dopisana jest lista rozmiarow do analizy brane sa tylko aktywne (WYMIAR.ACTIVE=1)
               {! _ii:=1.._maxatrs
               |!
                  _ref:=($('M_ATR.SL_'+form(_ii,-2,,'99')))();
                  {? (_ref<>null()) & TAT.seek(_ref)
                  ||
                     _war:=exec('get_var4osatr','wyp_zaopatrz',P.OSOBA,TAT.ref());
                     {? _war<>''
                     ||
::                         dopisanie danych wymiarowych
                        __TMP_ZOD.ROZMWAR+=_war+'; '
                     ||
::                       brak wymiaru a powinien byc
::                       rejestruj brak parametru w __TMP_BW
                        {? TAT.WYMCZ='T' & ~__TMP_BW.find_key(#P.ref(),#TAT.ref())
                        ||
                           __TMP_BW.blank();
                           __TMP_BW.REF_P:=#P.ref();
                           __TMP_BW.REF_W:=#TAT.ref();
                           __TMP_BW.NAZWIM:=__TMP_ZOD.NAZWIM;
                           __TMP_BW.WYMIAR:=TAT.NA;
                           __TMP_BW.add();
                           __TMP_ZOD.OK:=0
                        ?}
                     ?}
                  ?}
               !}
            ?}
         ?};
         __TMP_ZOD.put();
         __TMP_ZOD.next()
      !};
      prgs_clr();
      MGRP.cntx_pop();
::    f a z a   3:
::    dialog z uzytkownikiem i ewentualne potwierdzenie kontynuacji
      _ok:=1;
      {? __TMP_BW.first() & ~_service
      ||
::        zasygnalizowanie brakow w danych wymagan
         KOMM.init(,,'Ostrzeżenia z generacji list zapotrzebowania'@);
         KOMM.sect_beg('Występują braki w atrybutach pracowników, '
                       'które uniemozliwiają dodania ich zapotrzebowania do listy:'@);
         {!
         |?
            KOMM.add('Pracownik: %1 ma nieuzupełnioną wartość atrybutu: %2'@[__TMP_BW.NAZWIM,__TMP_BW.WYMIAR],3);
            __TMP_BW.next()
         !};
         KOMM.sect_end();
::         FUN.info('Występują braki w atrybutach pracowników. Zostaną one teraz pokazane.'
::                  '\nBędzie można wykonać wydruk.'
::                  '\nBraki te uniemożliwiają wykonanie pełnej listy wyposażenia do zamówienia.'@);
::         _ind:=__TMP_BW.ndx_tmp(,,'NAZWIM',,,'WYMIAR',,);
::         __TMP_BW.index(_ind);
::         _okno:=__TMP_BW.mk_sel('Brakujące wymagania osób:'@);
::         __TMP_BW.win_fld(_okno,,'NAZWIM',,,40,,1);
::         __TMP_BW.win_fld(_okno,,'WYMIAR',,,20,,1);
::         __TMP_BW.win_act(_okno,0,'Formuła','Wydruk'@@,,,,"rep_exec('wyp_zobrwym')",1);
::         __TMP_BW.win_sel(_okno);
::         __TMP_BW.select();
::         __TMP_BW.ndx_drop(_ind);
         KOMM.sect_beg('Pozycje, które nie zostaną dodane z powodu braku atrybutów:'@);
::         FUN.info('Zostanie pokazana lista pozycji pominiętych z powodu braków w atrybutach pracowników.'
::                  '\nMożna ją wydrukować.'@);
         _ind:=__TMP_ZOD.ndx_tmp(,,'OK',,,'KOD',,,'NAZWIM',,,'INFO',,);
         __TMP_ZOD.index(_ind); __TMP_ZOD.prefix(0);
         {? __TMP_ZOD.first()
         || {!
            |?
               KOMM.add('Pracownik: %1 %3, Wyposażenie: %2, Ilość: %4'@
                        [__TMP_ZOD.NAZWIM,__TMP_ZOD.KOD,__TMP_ZOD.INFO,$__TMP_ZOD.ILWYN],3);
               __TMP_ZOD.next()
            !}
         ?};
         KOMM.sect_end();

         OSNODZ.index('OS_VIEW');
         OSNODZ.prefix(null());
         {? OSNODZ.first()
         || KOMM.sect_beg('Pracownicy pomijani podczas generowania list:'@);
            {!
            |? KOMM.add('Pracownik: %1 %2 %3'@
                        [OSNODZ.P().OSOBA().NAZWISKO,OSNODZ.P().OSOBA().PIERWSZE,
                        exec('set_p_info','wyp',OSNODZ.P)],2);
               OSNODZ.next()
            !};
            KOMM.sect_end()
         ?};
         OSNODZ.index('OSOBA');
         OSNODZ.prefix(null());
         {? OSNODZ.first()
         || KOMM.sect_beg('Osoby pomijane podczas generowania list:'@);
            {!
            |? KOMM.add('%1 %2'[OSNODZ.OSOBA().NAZWISKO,OSNODZ.OSOBA().PIERWSZE],2);
               OSNODZ.next()
            !};
            KOMM.sect_end()
         ?};
::         _okno1:=__TMP_ZOD.mk_sel('Pozycje będą pominięte na liście'@);
::         __TMP_ZOD.win_fld(_okno1,,'KOD',,,20,,1);
::         __TMP_ZOD.win_fld(_okno1,,'NAZWIM',,,30,,1);
::         __TMP_ZOD.win_fld(_okno1,,'INFO',,,30,,1);
::         __TMP_ZOD.win_fld(_okno1,,'ILWYN',,,10,4,1);
::         __TMP_ZOD.win_act(_okno1,0,'Formuła','Wydruk'@@,,,,"rep_exec('wyp_zobadpos')",1);
::         __TMP_ZOD.win_sel(_okno1);
::         __TMP_ZOD.select();
::         __TMP_ZOD.clear();
::         __TMP_ZOD.ndx_drop(_ind);
::         _ok:=FUN.ask('Czy mimo tych braków wykonać listę?'@)
         KOMM.select('Ostrzeżenia podczas generowania listy zapotrzebowania'@)
      ?}
   || {? ~_service
      || FUN.info('Nie ma zapotrzebowania na podany dzień. Lista nie zostanie utworzona.'@)
      ?}
   ?}
?};
::usuniecie tabeli ktora juz nie bedzie potrzebna
exec('drop_bw','!wyp_lwz_glis');
M_ATR.cntx_pop();
P.cntx_pop();
OSNODZ.cntx_pop();
_ok


\droptab2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabel tymczasowych zapotrzebowania
::  OLD: \droptab2/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__TMP_ZPOZ') > 0 || obj_del(__TMP_ZPOZ) ?};
{? var_pres('__TMP_POZP') > 0 || obj_del(__TMP_POZP) ?};
{? var_pres('__TMP_ROZL') > 0 || obj_del(__TMP_ROZL) ?};
~~


\cr_tab2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Utworzenie drugiego zespolu tabel tymczasowych
::       tabela pozycji listy - TMP_ZPOZ
::       tabela wykazu dla jakich pracownikow, w jakich ilosciach zamowiono dla danej pozycji listy - TMP_POZP
::       tabela wykazu parametrow dla kazdej pozycji
::       tabele przechowuja obraz danych przygotowanych do zapisu w tabelach rzeczywistych
::       wykonywane sa w celu skrocenia dzialania transakcji
::  OLD: \cr_tab2/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('droptab2','!wyp_lwz_glis');
__TMP_ZPOZ:=tab_tmp(2,'REF_TG','INTEGER','TG_REF',
                     'ROZMWAR','STRING[80]','Parametry'@
                     );
__TMP_POZP:=tab_tmp(2,'REF_POZ','INTEGER','TMP_ZPOZ_REF',
                     'REF_P','INTEGER','P_REF',
                     'REF_W01','INTEGER','#WYMIAR.ref()',
                     'REF_W02','INTEGER','#WYMIAR.ref()',
                     'REF_W03','INTEGER','#WYMIAR.ref()',
                     'REF_W04','INTEGER','#WYMIAR.ref()',
                     'REF_W05','INTEGER','#WYMIAR.ref()',
                     'REF_W06','INTEGER','#WYMIAR.ref()',
                     'REF_W07','INTEGER','#WYMIAR.ref()',
                     'REF_W08','INTEGER','#WYMIAR.ref()',
                     'REF_W09','INTEGER','#WYMIAR.ref()',
                     'REF_W10','INTEGER','#WYMIAR.ref()',
                     'WAR01','STRING[25]','Wartość'@,
                     'WAR02','STRING[25]','Wartość'@,
                     'WAR03','STRING[25]','Wartość'@,
                     'WAR04','STRING[25]','Wartość'@,
                     'WAR05','STRING[25]','Wartość'@,
                     'WAR06','STRING[25]','Wartość'@,
                     'WAR07','STRING[25]','Wartość'@,
                     'WAR08','STRING[25]','Wartość'@,
                     'WAR09','STRING[25]','Wartość'@,
                     'WAR10','STRING[25]','Wartość'@,
                     'POZ','INTEGER','Pozycja'@,
                     'ILWYN','REAL','Ilość'@
                     );
__TMP_ROZL:=tab_tmp(2,'REF_POZ','INTEGER','TMP_ZPOZ_REF',
                     'REF_W','INTEGER','#WYMIAR.ref()',
                     'WAR','STRING[20]','Wartość'@,
                     'POZ','INTEGER','Pozycja'@
                     );
~~


\prepare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przygotowanie danych w tabelach tymczasowych do szybkiego zapisu
::   WY: 1 - mozna kontynuowac, 0 - nie mozna
::  OLD: \prepare/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
_maxatrs:=10;
_ind:=__TMP_ZOD.ndx_tmp(,,'OK',,,'REF_TG',,,'REF_P',,,'INFO',,);
__TMP_ZOD.index(_ind);
__TMP_ZOD.prefix(1);
_ok:=0;
_mp:=params_get().mp;
_service:=_mp.isService();
{? __TMP_ZOD.first()
||
   M_ATR.cntx_psh(); M_ATR.clear();
   ROZMP.index('OSOBA');
   MGRP.clear(); TAT.clear(); P.clear();
   _ii:=__TMP_ZOD.size();
   _iii:=0;
   __TMP_ZPOZ.cntx_psh();
::  utworzenie indeksu umożliwiajacego szybka i bezbledna identyfikacje wlasciwego rekordu
   _indp:=__TMP_ZPOZ.ndx_tmp(,,'REF_TG',,,'ROZMWAR',,);
   __TMP_ZPOZ.index(_indp);
   {!
   |?
      {? ~_service
      || progress(_iii/_ii,'Przygotowanie danch do zapisu'@,'Przygotowanie danych do generowania'@)
      ?};
      _nowy:=0;
::    odnalezienie lub dopisanie pozycji
      {? ~__TMP_ZPOZ.find_key(__TMP_ZOD.REF_TG,__TMP_ZOD.ROZMWAR,)
      ||
         __TMP_ZPOZ.blank();
         __TMP_ZPOZ.REF_TG:=__TMP_ZOD.REF_TG;
         __TMP_ZPOZ.ROZMWAR:=__TMP_ZOD.ROZMWAR;
         __TMP_ZPOZ.add();
         _nowy:=1
      ?};
::        tworzenie listy parametrow tego rodzaju wyposazenia
      MGRP.clear();
      {? MGRP.seek(__TMP_ZPOZ.REF_TG,)
      ||
         _nr:=1;__TMP_ROZL.clear();
::    dopisanie pracownika i ilosci do pozycji
         __TMP_POZP.clear();
         __TMP_POZP.REF_POZ:=#__TMP_ZPOZ.ref();
         __TMP_POZP.REF_P:=__TMP_ZOD.REF_P;
         __TMP_POZP.ILWYN:=__TMP_ZOD.ILWYN;
         M_ATR.clear();
         {? M_ATR.seek(MGRP.M_ATR)
         ||
            {! _ii:=1.._maxatrs
            |!
               _ref:=($('M_ATR.SL_'+form(_ii,-2,,'99')))();
               {? (_ref<>null()) & TAT.seek(_ref)
               || ($('__TMP_POZP.REF_W'+form(_ii,-2,,'99')))():=#TAT.ref();
                  {? P.seek(__TMP_POZP.REF_P,) & TAT.seek(($('__TMP_POZP.REF_W'+form(_ii,-2,,'99')))(),TAT.name())
                  || ROZMP.prefix(P.OSOBA);
                     {? ROZMP.find_key(TAT.ref())
                     || ($('__TMP_POZP.WAR'+form(_ii,-2,,'99')))():=ROZMP.WAR
                     ?}
                  ?}
::    stara tabela do usunięcia
::                  __TMP_ROZL.blank();
::                  __TMP_ROZL.REF_POZ:=#__TMP_ZPOZ.ref();
::                  __TMP_ROZL.REF_W:=#TAT.ref();
::                  __TMP_ROZL.WAR:='';
::                  __TMP_ROZL.POZ:=_nr;
::                  __TMP_ROZL.add()
               ?}
            !}
         ?};
         __TMP_POZP.POZ:=_nr;
         __TMP_POZP.add();
         _nr+=1
      ?};

::    w przypadku gdy nowy element __TMP_ZPOZ to pobranie wartosci jego wymiarow od
::    pierwszego napotkanego pracownika
::      {? _nowy
::      ||
::         __TMP_ROZL.prefix(__TMP_POZP.REF_POZ);
::         P.seek(__TMP_POZP.REF_P,);
::         ROZMP.prefix(P.OSOBA);
::         {? __TMP_ROZL.first()
::         ||
::            {!
::            |?
::               TAT.seek(__TMP_ROZL.REF_W,);
::               {? ROZMP.find_key(TAT.ref())
::               ||
::                  __TMP_ROZL.WAR:=ROZMP.WAR;
::                  __TMP_ROZL.put()
::               ?};
::               __TMP_ROZL.next()
::            !}
::         ?}
::      ?};
      _iii+=1;
      __TMP_ZOD.next()
   !};
   prgs_clr();
   __TMP_ZPOZ.ndx_drop(_indp);
   __TMP_ZPOZ.cntx_pop();
   M_ATR.cntx_pop();
::   _ok:=FUN.ask('Dane gotowe do tworzenia listy. Czy kontynuować?'@)
   _ok:=1
|| {? ~_service
   || FUN.error('Brak pozycji umożliwiających utworzenie listy.'@)
   ?}
?};
__TMP_ZOD.clear();
__TMP_ZOD.ndx_drop(_ind);
_ok


\drop_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabeli zapotrzebowania
::  OLD: \drop_bw/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__TMP_BW')>0 || obj_del(__TMP_BW) ?};
~~


\droptab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usuniecie tabel tymczasowych zapotrzebowania
::  OLD: \droptab/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__TMP_ZOD')>0
|| {? var_pres('__ndx_zod')>0
   || __TMP_ZOD.ndx_drop(__ndx_zod);
      &__ndx_zod
   ?};
   obj_del(__TMP_ZOD)
?};

exec('drop_bw','!wyp_lwz_glis')


\zapis
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Zapisanie informacji z wczesniej przygotowanych tabel
::  OLD: \zapis/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
::utworzenie calego drzewa informacji zwiazanego z lista, w transakcji, na podstawie danych z tabel tymczasowych
::redundantne zabezpieczenie musi byc
_mp:=params_get().mp;
_odzam:=null;
{? __TMP_ZPOZ.first()
||
   P.cntx_psh(); P.clear();
   MGRP.cntx_psh(); MGRP.clear();
   ODZAM.clear();
   ODZAM.blank();
   ODZAM.AR:=ST.AR;
   POM.TAB:='ODZAM';
   exec('add_grnr','numery','LZP');
   POM.TYPDOK:=exec('get','#params',700503);
   ODZAM.DATA_W:=ZZAOP.DATA_W;
   ODZAM.MGR:=ZZAOP.MGR;
   ODZAM.PGRUPA:=ZZAOP.PGRUPA;
   {? _mp.isService()
   || _mag_fo:=exec('get','#params',700530);
      {? _mag_fo<>''
      || MG.cntx_psh();
         MG.index('MAGAZYNY');
         MG.prefix(_mag_fo,_mag_fo,);
         {? MG.first()
         || ODZAM.MG:=MG.ref
         ?};
         MG.cntx_pop()
      || ODZAM.MG:=ST.MAG
      ?}
   || ODZAM.MG:=ST.MAG
   ?};
   ODZAM.CZYGEN:='T';
::   ODZAMPP.clear();
::   {? INFO.POLWOSN=''
::  || INFO.POLWOSN:='LZP';
::      exec('add_grnr','numery','LZP')
::   ?};
::   POM.TYPDOK:=INFO.ODZAMSN;
::   POM.TAB:='ODZAM';
::   ODZAM.SYM:='~'+$ODZAM.tm_stamp();

:: utworzenie nowego naglowka
:: czasowe wylaczenie korzystania z wolnych numerow
::   NRDOK.cntx_psh();
::   NRDOK.index('NRDOK'); NRDOK.prefix(POM.TYPDOK,'');
::   {? NRDOK.first()
::   ||
::      _oldwoln:=NRDOK.WOL_NR;
::      {?  NRDOK.WOL_NR='T' || NRDOK.WOL_NR:='N'; NRDOK.put() ?}
::   ?};
::   NRDOK.cntx_pop();
   {? _ok:=ODZAM.add()
   ||
      _odzam:=ODZAM.ref();
      {? exec('blk_lock','#table','ODZAM',_odzam)
      || ODZAM.NR:=0;
         ODZAM.NR:=exec('numer_new','numery','PACZKA');
         exec('znak','numery','ODZAM',1);
::      exec('wol_nr','numery','ODZAM');
         exec('deactivate','!wyp_lwz_glis');
         ODZAM.STAN:='T';
         ODZAM.put();
         M_ATR.clear();
         ODZAMPT.clear();
::   petla tworzaca nowe pozycje
:: >>>>>>>>>>>>>>>>>>>>>>>>>>
         do();
         {!
         |?
            __TMP_POZP.prefix(#__TMP_ZPOZ.ref());
            {? __TMP_POZP.first()
            ||
               {!
               |?
                  {? P.seek(__TMP_POZP.REF_P,)
                  ||
                     ODZAMPT.blank();
::       podstawienie towaru
                     MGRP.seek(__TMP_ZPOZ.REF_TG,);
                     ODZAMPT.MGRP:=MGRP.ref();
                     ODZAMPT.M:=exec('FindAndGet','#table',M,MGRP.M,M.name,"ref()",null);
                     ODZAMPT.ROZMIAR:=__TMP_ZPOZ.ROZMWAR;
                     ODZAMPT.CZYGEN:='T';
                     ODZAMPT.P:=P.ref();
                     ODZAMPT.IL:=__TMP_POZP.ILWYN;
                     _m_atr:=MGRP.M_ATR;
                     _dkc:=exec('m_atr_sprdod','mat_atr',__TMP_POZP.WAR01,__TMP_POZP.WAR02,__TMP_POZP.WAR03,
                                                         __TMP_POZP.WAR04,__TMP_POZP.WAR05,__TMP_POZP.WAR06,
                                                         __TMP_POZP.WAR07,__TMP_POZP.WAR08,__TMP_POZP.WAR09,
                                                         __TMP_POZP.WAR10,_m_atr);
                     ODZAMPT.DK_C:=_dkc;
                     ODZAMPT.RDKC:=$_dkc;
                     _ok:=ODZAMPT.add()
::                  ODZAMPP.blank();
::                  ODZAMPP.ODZAMPT:=ODZAMPT.ref();
::                  ODZAMPP.CZYGEN:='T';
::                  _ok:=ODZAMPP.add()
                  ?};
                  __TMP_POZP.next() & _ok
               !}
            ?};

::         {? _ok
::         ||
::            __TMP_ROZL.prefix(#__TMP_ZPOZ.ref());
::            {? __TMP_ROZL.first()
::            ||
::               ROZMLT.clear();
::               {!
::               |?
::                  {? TAT.seek(__TMP_ROZL.REF_W,) ||
::                     ROZMLT.blank();
::                     ROZMLT.ODZAMPT:=ODZAMPT.ref();
::                     ROZMLT.TAT:=TAT.ref();
::                     ROZMLT.WAR:=__TMP_ROZL.WAR;
::                     _ok:=ROZMLT.add()
::                  ?};
::                  __TMP_ROZL.next() & _ok
::               !};
::               exec('odswrozm','wyp_zaopatrz')
::            ?}
::         ?};
            __TMP_ZPOZ.next() & _ok
         !};
         {? ~_ok || undo() ?};
         end()
      ?};
      exec('blk_unlock','#table','ODZAM',_odzam)
:: <<<<<<<<<<<<<<<<<<<<<<<<<<
   ?};
:: ewentualne przywrocenie wykorzystania wolnych numerow
::   NRDOK.cntx_psh();
::   NRDOK.index('NRDOK'); NRDOK.prefix(POM.TYPDOK,'');
::   {? NRDOK.first()
::   ||
::      {?  NRDOK.WOL_NR<>_oldwoln || NRDOK.WOL_NR:=_oldwoln; NRDOK.put() ?}
::   ?};
::   NRDOK.cntx_pop();
   MGRP.cntx_pop();
   P.cntx_pop()
?};
_odzam


\czy_akc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Czy ODZAM aktywna
::  OLD: \czy_akc/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
:: ODZAM.STAN<>'N'
0


\odzp_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed popraw ODZAM
::  OLD: \odzp_bp/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('czy_akc','!wyp_lwz_glis')
|| 1
|| FUN.emsg('Lista jest zaakceptowana. Modyfikacje nie są doswolone.'@);
   0
?}


\odz_usun_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Grupa przed usun ODZAM
::  OLD: \odz_usun_gb/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Usunąć zaznaczone listy zapotrzebowania?'@)
||
   exec('ini_kom','#message','Akceptacja pozycji w kartotece');
   1
|| 0
?}


\odz_usun_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Grupa pro usun ODZAM
::  OLD: \odz_usun_ga/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
exec('end_kom','#message');
~~


\odz_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Usun ODZAM
::  OLD: \odz_usun/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
_odp:=0;
_ok:=1;
{? ODZAM.sel_size() | FUN.ask('Usunąć listę?'@)
||
   {? exec('czy_akc','!wyp_lwz_glis')
   || {? ODZAM.sel_size()
      || exec('add_kom','#message','Lista %1 jest zaakceptowana. Usunięcie zabronione.'@[ODZAM.SYM],4)
      || FUN.ask('Nie można usunąc zaakceptowanej listy.'@)
      ?}
   || _odzam:=ODZAM.ref();
      {? exec('blk_lock','#table','ODZAM',_odzam)
::      {? ODZAM.r_lock(1) & ODZAMPT.r_lock(1,,1)
      ||
::       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
         do();
         ODZAMPT.cntx_psh(); ODZAMPT.index('LTNR'); ODZAMPT.prefix(ODZAM.ref());
         {? ODZAMPT.first()
         || {!
            |? {? ODZAMPT.count()=0
               || ODZAMPT.del()
               || _ok:=0
               ?}
            !}
         ?};
         ODZAMPT.cntx_pop();
         POM.TAB:='ODZAM';
         POM.TYPDOK:=exec('get','#params',700503);
         oldnumer:=1;
         numer:=ODZAM.NR;
         exec('nr_old','numery');
         _active:=(ODZAM.STAN='T');
         _sym:=ODZAM.SYM;
         {? _ok
         || _odp:=ODZAM.del(,1)
         ?};
         {? _active
         || ODZAM.cntx_psh();
            ODZAM.index('SYM');
            {? ODZAM.last()
            || ODZAM.STAN:='T';
               ODZAM.put()
            ?};
            ODZAM.cntx_pop()
         ?};
         end();
         {? _odp>0
         || {? ODZAM.sel_size() || exec('add_kom','#message','Listę %1 usunięto.'@[_sym],1) ?}
         || {? ODZAM.sel_size()
            || exec('add_kom','#message','Lista %1'
               ' nie została usunięta. Jest wykorzystywana przez inne elementy systemu.'@[ODZAM.SYM],4)
            || FUN.emsg('Nie można usunąć listy z powodu wykorzystywania w innych elementach systemu.'@)
            ?}
         ?}
      ||
         {? ODZAM.sel_size()
         || exec('add_kom','#message','Lista %1'
                 ' jest zablokowana przez innego użytkownika. Usunięcie niemożliwe.'@[ODZAM.SYM],4)
         || FUN.emsg('Nie można usunąć listy z powodu blokowania przez innego użytkownika.'@)
         ?}
      ?};
      exec('blk_unlock','#table','ODZAM',_odzam)
   ?}
?}


\odzam_ra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord po ODZAM
::  OLD: \odzam_ra/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(ODZAM,,'NR','SYM','DATA','DATA_W')


\odz_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Popraw dla ODZAM
::   WE:
::   WY: 1/0
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? exec('odzp_bp','!wyp_lwz_glis')
|| {? exec('blk_lock','#table','ODZAM',ODZAM.ref(),,,'Lista zapotrzebowania jest redagowana')
   ||
      ODZAM.win_edit('RED');
      {? ODZAM.edit("exec('odzam_ra','!wyp_lwz_glis')")
      || ODZAM.put();
         _result:=1
      ?}
   ?};
   exec('blk_unlock','#table','ODZAM',ODZAM.ref())
?};
_result


\odzpt_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed dolacz ODZAMPT
::     wyzerowanie ewentualnego istniejacego refa rekordu
::   WY: 1/0
::  OLD: \odzpt_bd/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('odzpt_nz','wyp_zaopatrz')
|| ZZAOP.ODZAMPT:=null();
   1
||
   0
?}


\odzpt_bp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Przed popraw ODZAMPT
::   WY: 1/0.
::  OLD: \odzpt_bp/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('odzpt_nz','wyp_zaopatrz') || ZZAOP.ODZAMPT:=ODZAMPT.ref(); 1 || 0 ?}


\odzptugb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: przed usunieceim grupy rekordow ODZPT
::   WY: 1/0
::  OLD: \odzptugb/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
sel_nchk();
exec('odzpt_nz','wyp_zaopatrz') & FUN.ask('Usunąć zaznaczone pozycje?'@)


\odzpt_ua
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: usuniecie zlaczen do elementu towarowego listy i usuniecie tego elementu
::  OLD: \odzpt_ua/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
:usuwa pozycje listy wraz z listami zwi†zanymi
:zaklada sie, ze ineksy list maja na pierwszym miejscu zlaczenie do ODZAMPT

:_a - pomin dialogi

:odpowiedz - czy dziedzina nie jest pusta po usunieciu wiersza

{? _<1 || _a:=0 ?};
{? _a | ODZAMPT.sel_size() | FUN.ask('Czy usunąć pozycję?'@)
||
:: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   do();
:: petla usuwania wymiarow pozycji
   ROZMLT.prefix(ODZAMPT.ref());
   {! |? {? ROZMLT.first() || ROZMLT.del() || 0 ?} !};
   _odp:=ODZAMPT.del();
   end();
:: <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
   _odp
|| 0
?}


\deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [18.02]
:: OPIS: Dezaktywuje aktywne listy zapotrzebowania
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ODZAM.cntx_psh();
ODZAM.index('SSYM');
ODZAM.prefix('T');
{? ODZAM.first()
|| {!
   |? ODZAM.cntx_psh();
      ODZAM.prefix();
      ODZAM.STAN:='N';
      ODZAM.put();
      ODZAM.cntx_pop();
      ODZAM.first()
   !}
?};
ODZAM.cntx_pop()


\odzpttra
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WW [12.10]
:: OPIS: Rekord po ODZAMPT
::   WY: std
::  OLD: \odzpttra/zaopatrz.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(ODZAMPT,,'M')

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:54 92c3da5c349b4e59f868a3245655c1f8d56efad25a01231d5d449471d40499b6f6ddc6c3ea7798e94cb0aea0acb945cc0afc138924a617b2a5d329cd0d017a855d7a12e5da8843aa48477f8cf249266e39da58693c3c10d3115bbf43b291400bde4a70f4b7b2f2136ecf6e710dcff94c54b9b1cb07a4cda558580c0eb23040d6
