:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_rpza.fml
:: Utworzony: 18.05.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_RPZA - Rej. przebiegu zatrudnienia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestrowanie przebiegu zatrudnienia - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::
_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.P);
_do:=_mp.akcja();
_result:='';

{? _id=''
|| _result:=exec('error','!pkd_ezk_rpza')

|? _mp.isMicro()
|| {? _do='VIEW'
   || _mp.keyRef(_id);
      exec('select','!pkd_ezk_rpza',_in.P,_mp);
      _mp.delRef(_id);
      _mp.cancel()
   |? _do='START'
   || _mp.keyRef(_id);
      _mp.keep()
   |? _do='STOP'
   || _mp.delRef(_id);
      _mp.cancel()
   |? _do<>''
   || _result:='Czynność '+_mp.buf_act.UID+' nie obsługuje akcji '+_do+'.'
   ?}

|| _mp.save(_ib,_rv);
   {? _do='ZAKOŃCZ'
   || _mp.done()
   |? _mp.pathTodo()
   || _value:=exec('select','!pkd_ezk_rpza',_in.P,_mp);
      {? type_of(_value)=type_of(0)
      || {? _value<>0
         || _mp.done()
         || _mp.keep()
         ?}
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestrowanie przebiegu zatrudnienia - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj przebieg zatrudnienia: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj przebieg zatrudnienia: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj przebieg zatrudnienia: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj przebieg zatrudnienia'@@
?}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa czynności wykonywanej z listy zadań.
::   WE: _a - wskazanie pracownika
::       _a - wskazanie menadżera procesów
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err_msg:=exec('error','!pkd_ezk_rpza');

{? var_pres('_a')<>type_of(null) | _a=null
|| return(_err_msg)
?};

P.cntx_psh();
P.prefix();
{? ~P.seek(_a)
|| P.cntx_pop();
   return(_err_msg)
?};

: ustaw ikonki w kolumnach
exec('pkd_conf_h_um_icon','pkd');

: ustal osobę
OSOBA.cntx_psh();
P.OSOBA();

: ewentualna synchronizacja brudnopisu
exec('compare','!pkd_ezk_rpza',P.ref());

{? _b.isMicro()
|| H.actions_grayed('WER_PD','Z:Z');
   H.actions_grayed('WER_PR','Z:Z')
?};

H_UM.cntx_psh();
H_UM.win_edit('POP_P');
H_UM.win_sel({? PAR_SKID.get(180)='N' || 'GRP_PR' || 'GRP_PD' ?});
_result:=H_UM.select();

H.actions_grayed('WER_PD');
H.actions_grayed('WER_PR');

: porządki
H_UM.cntx_pop();
OSOBA.cntx_pop();
P.cntx_pop();

: wynik
_result


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabel H i H_UM z doklejonym oknem redagowania tabeli P);
::       - w ramach obszaru roboczego (okno wertowania tabeli H i H_UM jako składowa okna grupowego tabeli UD_DEF).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=cur_tab(0,0);
{? _TAB=H | _TAB=H_UM
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie przebiegu zatrudnienia niemożliwe.\nNie znaleziono pracownika.'


\h_um_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu. Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli H_UM.
::   WE:
::   WY:
::  OLD: \del_rou/umowy.fml
::  OLD: \h_um_modb/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
H_UM.NUMER:=form(H_UM.NUMER);

: Porządki - zerowanie pól, które są "niedostępne".
{? H_UM.DO=date(0,0,0)
|| exec('blank','#field',H_UM,,'USPKOD','USPPPRAK','USPPPRAT','USPSTR','LT','EKW','EKW_NSP')
?};

RU.cntx_psh();
{? ~(H_UM.RU().K='B' & date(2016,2,22)<=H_UM.OD)
|| H_UM.WYM_UZAS:='N'
?};
{? exec('upgrade2226_nru01','wnioski_urlopowe')
|| {? H_UM.RU().K<>'A'
   || H_UM.PRZ_USPR:='N';
      H_UM.ZAM_ZAW:='N'
   ?};
   {? H_UM.ZAM_ZAW='N'
   || H_UM.ZAM_OKR:=''
   ?}
?};
RU.cntx_pop();

{? H_UM.WYM_UZAS='N'
|| exec('blank','#field',H_UM,,'OKR_UZAS','UZASDN')
?};

S_ZUS.cntx_psh();
{? H_UM.USPPPRAK().KOD<>'550'
|| H_UM.USPPPRAT:=''
?};
S_ZUS.cntx_pop();

1


\h_um_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed dołączeniem" rekordu tabeli H_UM.
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.H_UM='T'
|| return(1)
?};

exec('h_um_modb','!pkd_ezk_rpza');

{? H_UM.name()='h_u_'
|| H_UM.IDMOD:='DH';
   H_UM.IDLNK:=''

|? H_UM.name()='h_um' | H_UM.IDLNK<>''
|| H_UM.IDMOD:='__'
?};

1


\h_um_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed poprawieniem" rekordu tabeli H_UM.
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.H_UM='T'
|| return(1)
?};

exec('h_um_modb','!pkd_ezk_rpza');

{? H_UM.name()='h_u_'
|| _org:=exec('H_UM','buffer');
   _tmp:=exec('H_UM','buffer');
   _tmp.get();
   H_UM.cntx_psh();
:  Pobranie uidref podczyta rekord. Aby tego uniknąć - robimy to w ramach cntx_psh/cntx_pop.
   _uidref:=H_UM.uidref();
   exec('otworz_h_um','pracownik','h_um');
   H_UM.prefix();
   {? _jest:=H_UM.seek(_tmp.IDLNK)
   || _org.get(1)
   ?};
   H_UM.cntx_pop();
   exec('otworz_h_um','pracownik');
   {? _jest
   || {? ~exec('compare','#table',_org,_tmp,1,'Ref','IDADD','IDPUT','IDMOD','IDLNK') |
         ~exec('compare','zalacz',_uidref,H_UM.IDLNK)
      || {? (1+H_UM.IDMOD)<>'D'
         || H_UM.IDMOD:='P'+(H_UM.IDMOD+1)
         ?}
      || H_UM.IDMOD:='_'+(H_UM.IDMOD+1)
      ?}
   ?}

|? H_UM.name()='h_um'
|| H_UM.IDMOD:='__'
?};

1


\h_um_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "po poprawieniu" rekordu tabeli H_UM.
::   WE: _a - wynik operacji usuwania przekazywany przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
: zakończ jeśli wystąpił błąd
{? ~_a | do_state()<>1
|| return()
?};

{? TRIG_OFF.H_UM='T'
|| return()
?};

_P_org:=bfld('P');
{? H_UM.P<>_P_org
:: wstępnie zabezpiecz przed zamianą wskazania
|| undo(exec('err_ref_change','pracownik'));
   return()
?};

{? H_UM.name()='h_um'
|| {? H_UM.USPPPRAK<>bfld('USPPPRAK')
:     Zadbaj o anomalię USPPPRAK w tabeli P.
:     Zakładamy, że ewentualna zmiana H_UM.DO wiąże się ze zmiana H.DO i z wyzwalacza h_puta nastąpi aktualizacja
:     danych pracownika. Jeżeli więc zmieniła się H_UM.DO, to nie ma potrzeby z tego powodu aktualizować danych
:     pracownika.
   || exec('pracownik_aktualizuj','pracownik')
   ?};
:  Jeżeli zmieniła się choć jedna data umowy, to musiała się też zmienić data w przebiegu.
:  Aktualizacja karty urlopowej zostanie wykonana w wyzwalaczu dla tabeli H.
:  Ale zmiana H_UM.EKW wymaga aktualizacji karty w tym miejscu.
   {? do_state()<>1 || return() ?};
   {? H_UM.EKW<>bfld('EKW') | H_UM.EKW_NSP<>bfld('EKW_NSP')
::    Jeżeli transakcja zostałaby zerwana to uruchomienie formuły \aktualizuj/kart_url.fml doprowadziłoby do błędów.
   || exec('aktualizuj','kart_url',H_UM.P)
   ?};
:  Aktualizacja brudnopisu
   {? do_state()<>1 || return() ?};
   exec('h_um_synch_inne','pracownik')
?};

{? H_UM.P<>_P_org
:: zabezpiecz przed zamianą w wykonanych formułach
|| undo(exec('err_ref_change','pracownik'));
   return()
?};
~~


\h_um_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed usunięciem" rekordu tabeli H_UM.
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.H_UM='T'
|| return(1)
?};

: informacja dla wyzwalaczy "usuń" tabeli H
exec('add','#bulk',H,'del',$H_UM.ref());

H.cntx_psh();
H.use(exec('h_name','pracownik',H_UM.ref()));
_ret:=exec('del_ndx','#table',H,'HISTUM',H_UM.ref());
H.cntx_pop();

: usuń semafor
exec('del','#bulk',H,'del',$H_UM.ref());

_mask:=H_UM.name();
{? _ret
|| H_UM_EKW.cntx_psh();
   H_UM_EKW.use(_mask+'_ekw');
   _ret:=exec('del_ndx','#table',H_UM_EKW,'UNIQUE',H_UM.ref());
   H_UM_EKW.cntx_pop()
?};
{? _ret
|| H_UM_ESK.cntx_psh();
   H_UM_ESK.use(_mask+'_esk');
   _ret:=exec('del_ndx','#table',H_UM_ESK,'UNIQUE',H_UM.ref());
   H_UM_ESK.cntx_pop()
?};

_ret &
exec('del_ndx','#table',ZALACZ,'NAG',H_UM.uidref())


\h_um_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "po usunięciu" rekordu tabeli H_UM.
::   WE: _a - wynik operacji usuwania przekazywany przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? TRIG_OFF.H_UM='T'
|| return()
?};

{? exec('get','#bulk',H_UM,'del',$bfld('P'))
|| return()
?};

{? H_UM.name()='h_um'
|| P.cntx_psh();
   P.prefix();
   {? P.seek(bfld('P'))
   || exec('pracownik_aktualizuj','pracownik');
:  Usuwanie umowy pociąga za sobą usuwanie przebiegów. Ale odbywa się ono bez dodatkowych (zbędnych w tym momencie)
:  akcji (dzięki mechanizmowi semaforów z #bulk.fml). Z tego powodu aktualizacja karty urlopowej odbyć się musi na tym
:  poziomie - po usunięciu umowy.
      {? do_state()=1
::       Jeżeli transakcja zostałaby zerwana to uruchomienie formuły \aktualizuj/kart_url.fml doprowadziłoby do błędów.
      || exec('aktualizuj','kart_url',bfld('P'))
      ?}
   ?};
   P.cntx_pop();
   {? P.ref()
   || P.get()
   ?}
?};
~~


\h_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli H.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: Porządki - zerowanie pól, które są "niedostępne".
{? H.RWY=1
|| exec('blank','#field',H,,'CZY_NADG','DOP_ST')
?};
{? H.CZY_NADG='N'
|| exec('blank','#field',H,,'DOP_NADG')
?};

{? H.ODDEL<>'T'
|| exec('h_odde_blank','oddelegowanie',1);
   H.S4:=0
?};
{? H.ODDEL='T' & H.S1=0
|| exec('blank','#field',H,,'S2','S3')
?};
{? H.S1=0
|| exec('blank','#field',H,,'CZYWAL')
?};
{? H.S2=0
|| exec('blank','#field',H,,'S2T','S2P','CZYWAL2','KADOD')
?};
{? H.S3=0
|| exec('blank','#field',H,,'S3T','S3P','CZYWAL3')
?};
{? H.S4=0
|| exec('blank','#field',H,,'CZYWAL4')
?};
{? H.CZYWAL='N' & H.CZYWAL2='N' & H.CZYWAL3='N' & H.CZYWAL4='N'
|| exec('blank','#field',H,,'WAL','ZWAL')
?};

{? H.PAT<>'K' & H.PAT<>'P'
|| exec('blank','#field',H,,'PAW')
?};

1


\h_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed dołączeniem" rekordu tabeli H.
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.H='T'
|| return(1)
?};

exec('h_modb','!pkd_ezk_rpza');

{? H.name()='_his_'
|| H.IDMOD:='DU';
   H.IDLNK:=''

|? H.name()='_hist' | H.IDLNK<>''
|| H.IDMOD:='__'
?};

1


\h_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "po dołączeniu" rekordu tabeli H.
::   WE: _a - wartość przekazywana przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? TRIG_OFF.H='T'
|| return()
?};

{? H.name()='_his_'
|| H_UM.cntx_psh();
   exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
   H_UM.clear();
   H.UMOWA();
   {? (H_UM.IDMOD+1)<>'H'
   || H_UM.IDMOD:=(1+H_UM.IDMOD)+'H';
      H_UM.put()
   ?};
   H_UM.cntx_pop();
   exec('otworz_h_um','pracownik')

|? H.name()='_hist'
|| exec('pracownik_aktualizuj','pracownik');
   {? do_state()=1
::    Jeżeli transakcja zostałaby zerwana to uruchomienie formuły \aktualizuj/kart_url.fml doprowadziłoby do błędów.
   || exec('aktualizuj','kart_url',H.P);
      exec('akt_buff','prc_plan','add',H);
      {? exec('lic','#b_domain','POR')
      || exec('update4H','pkalsync','add');
         exec('chr_workinghours_update','portal_slowniki',H.WYL,H.WYM)
      ?}
   ?}
?};
~~


\h_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed poprawieniem" rekordu tabeli H.
::----------------------------------------------------------------------------------------------------------------------
{? TRIG_OFF.H='T'
|| return(1)
?};

exec('h_modb','!pkd_ezk_rpza');

{? H.name()='_his_'
|| _org:=exec('H','buffer');
   _tmp:=exec('H','buffer');
   _tmp.get(1);
   H.cntx_psh();
:  Pobranie uidref podczyta rekord. Aby tego uniknąć - robimy to w ramach cntx_psh/cntx_pop.
   _uidref:=H.uidref();
   H.use('_hist');
   H.prefix();
   {? ~H.seek(_tmp.IDLNK)
   || H.cntx_pop();
      return(1)
   ?};
   _org.get(1);
   H.cntx_pop();

   _oddelegowanie:=
      {? (1+H.IDMOD)<>'D'
      || (PAR_SKID.get(261)='T'  & H.ODDEL='T' & exec('zmianyodelegowania','oddelegowanie',H.ref(),H.IDLNK))
      || 0
      ?};
   {? ~exec('compare','#table',_org,_tmp,1,'Ref','IDADD','IDPUT','IDMOD','IDLNK','UMOWA')
      |
      ~exec('compare','zalacz',_uidref,H.IDLNK)
      |
      _oddelegowanie
   || {? (1+H.IDMOD)<>'D'
      || H.IDMOD:='P'+{? _tmp.OD<>_org.OD | _tmp.DO<>_org.DO || 'U' || '_' ?}
      ?}
   || H.IDMOD:='__'
   ?}

|? H.name()='_hist'
|| H.IDMOD:='__'
?};

1


\h_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "po poprawieniu" rekordu tabeli H.
::   WE: _a - wartość przekazywana przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? TRIG_OFF.H='T'
|| return()
?};

_P_org:=bfld('P');
{? H.P<>_P_org
:: wstępnie zabezpiecz przed zamianą wskazania
|| undo(exec('err_ref_change','pracownik'));
   return()
?};

{? H.name()='_his_' & (H.IDMOD+1)<>(bfld('IDMOD')+1)
|| _same:=($H.UMOWA=$H_UM.ref());
   H_UM.cntx_psh();
   exec('otworz_h_um','pracownik',exec('h_um_name','pracownik'));
   H_UM.clear();
   H.UMOWA();
   {? (H.IDMOD+1)='U'
   || {? (H_UM.IDMOD+1)<>'H'
      || H_UM.IDMOD:=(1+H_UM.IDMOD)+'H';
         H_UM.put()
      ?}
   |? (H.IDMOD+1)='_' & (H_UM.IDMOD+1)='H'
   || _mod:=0;
      H.cntx_psh();
      H.index('HISTUM');
      H.prefix(H.UMOWA);
      _loop:=H.first();
      {!
      |? _loop & ~_mod
      |! {? (H.IDMOD+1)='U'
         || _mod:=1
         ?};
         _loop:=H.next()
      !};
      H.cntx_pop();
      {? _mod=0
      || H_UM.IDMOD:=(1+H_UM.IDMOD)+'_';
         H_UM.put()
      ?}
   ?};
   H_UM.cntx_pop();
   exec('otworz_h_um','pracownik');
   {? _same
   || H.UMOWA()
   ?}

|? H.name()='_hist'
|| {? ~exec('get','#bulk',H,'IDLNK',$H.ref())
   || P.cntx_psh();
      H.P();
      exec('pracownik_aktualizuj','pracownik');
      {? do_state()=1
::       Jeżeli transakcja zostałaby zerwana to uruchomienie formuły \aktualizuj/kart_url.fml doprowadziłoby do błędów.
::       Aktualizacja karty urlopowej tylko w wybranych przypadkach.
      || {? (H.OD<>bfld('OD') | H.DO<>bfld('DO') | H.WY<>bfld('WY') | H.ST<>bfld('ST'))
         || exec('aktualizuj','kart_url',H.P)
         ?};
         exec('akt_buff','prc_plan','put',H);
         {? exec('lic','#b_domain','POR')
         || exec('update4H','pkalsync','put');
::          Jeżeli nawet pola H.WYL i H.WYM nie zmieniły swoich wartości, to pielęgnujmy słownik wymiarów etatów.
            exec('chr_workinghours_update','portal_slowniki',H.WYL,H.WYM)
         ?}
      ?};
      P.cntx_pop()
   ?}
?};
:: Usunięcie oddelegowań po odznaczeniu H.ODDEL:
{? H.ODDEL='N' & H.ODDEL<>bfld('ODDEL')
|| H_ODDE.cntx_psh();
   H_ODDE.use('h_odde'+(H.name()+1));
   exec('del_ndx','#table',H_ODDE,'HOD',H.ref());
   H_ODDE.cntx_pop()
?};

{? H.P<>_P_org
:: zabezpiecz przed zamianą w wykonanych formułach
|| undo(exec('err_ref_change','pracownik'));
   return()
?};
~~


\h_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed usunięciem" rekordu tabeli H.
::----------------------------------------------------------------------------------------------------------------------
H_ODDE.cntx_psh();
H_ODDE.use('h_odde'+(H.name()+1));
_ok:=
   exec('del_ndx','#table',ZALACZ,'NAG',H.uidref()) &
   exec('del_ndx','#table',H_ODDE,'HOD',H.ref()) &
   exec('set_null','#table',KAL_BUFF,'H',H.ref());
H_ODDE.cntx_pop();
{? ~_ok
|| return(0)
?};

{? exec('get','#bulk',H,'del',$H.UMOWA)
|| return(1)
?};

{? H.name()='_his_' & H.UMOWA().IDMOD='__'
|| H.cntx_psh();
   H.index('HISTUM');
   H.prefix(H.UMOWA);
   {? H.size()>1 & H.UMOWA<>null
   || H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',ref_name(H.UMOWA));
      H_UM.clear();
      H.UMOWA();
      H_UM.IDMOD:=(1+H_UM.IDMOD)+'H';
      H_UM.put();
      H_UM.cntx_pop();
      exec('otworz_h_um','pracownik')
   ?};
   H.cntx_pop()
?};
{? H.name()='_hist'
|| exec('akt_buff','prc_plan','del',H);
   exec('update4H','pkalsync','del')
?};

1


\h_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "po usunięciu" rekordu tabeli H.
::   WE: _a - wartość przekazywana przez narzędzia
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? exec('get','#bulk',H,'del',$bfld('UMOWA'))
|| return()
?};

{? H.name()='_his_'
|| _mod:=0;
   H.cntx_psh();
   H.index('HISTUM');
   H.prefix(bfld('UMOWA'));
   _loop:=H.first();
   {!
   |? _loop & ~_mod
   |! {? (H.IDMOD+1)='U'
      || _mod:=1
      ?};
      _loop:=H.next()
   !};
   H.cntx_pop();
   {? _mod=0
   || H_UM.IDMOD:=(1+H_UM.IDMOD)+'_';
      H_UM.put()
   ?}

|? H.name()='_hist'
|| P.cntx_psh();
   P.prefix();
   {? P.seek(bfld('P'))
   || exec('pracownik_aktualizuj','pracownik');
      {? do_state()=1
::       Jeżeli transakcja zostałaby zerwana to uruchomienie formuły \aktualizuj/kart_url.fml doprowadziłoby do błędów.
      || exec('aktualizuj','kart_url',bfld('P'))
      ?}
   ?};
   P.cntx_pop();
   {? P.ref()
   || P.get()
   ?}
?};
~~


\grp_p_bf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okienek tabeli H_UM. Widok docelowy i bezpośredni.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_psh();
exec('otworz_h_um','pracownik','h_um');
H_UM.index('OD');
H_UM.prefix(P.ref());

H.cntx_psh();
H.use('_hist');
H.index('HISTUM');

H_ODDE.cntx_psh();
H_ODDE.use('h_oddet');
~~


\grp_p_bfd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okienka GRP_PD tabeli H_UM. Widok docelowy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('grp_p_bf','!pkd_ezk_rpza');
grp_edisp(P,'INFO_P');
~~


\grp_p_bfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okienka GRP_PR tabeli H_UM. Widok bezpośredni.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('grp_p_bf','!pkd_ezk_rpza');
grp_edisp(P,'INFO_P');
~~


\grp_p_bft
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wypełnieniem okienka GRP_PT tabeli H_UM. Widok tymczasowy.
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_psh();
exec('otworz_h_um','pracownik','h_u_');
_p236:=PAR_SKID.get(236)='T';
_ind:={? _p236 || 'ODX' || 'OD' ?};
H_UM.index(_ind);
H_UM.prefix(P.ref());
{? H_UM.size()=0
|| exec('h_um_pull','pracownik',P.ref())
?};

H.cntx_psh();
H.use('_his_');
_ind:={? _p236 || 'HISTUMX' || 'HISTUM' ?};
H.index(_ind);

H_ODDE.cntx_psh();
H_ODDE.use('h_odde_');

grp_edisp(P,'INFO_P');
~~


\grp_p_oc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przy zamykaniu okienek GRP_PD, GRP_PR i GRP_PT tabeli H_UM. Widok docelowy, bezpośredni i tymczasowy.
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_pop();
H.cntx_pop();
H_ODDE.cntx_pop();
exec('otworz_h_um','pracownik');
1


\grp_p_h_um_ard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PD tabeli H_UM w okienku GRP_PD tabeli H_UM. Widok docelowy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: odśwież widok przebiegu
grp_disp(H,'WER_PD',1,1);
~~


\grp_p_h_um_arr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PR tabeli H_UM w okienku GRP_PR tabeli H_UM. Widok bezpośredni.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: odśwież widok przebiegu
grp_disp(H,'WER_PR',1,1);

: zablokuj akcje
: Dołącz, jeśli ostatnia umowa nie została zakończona
: Usuń, jeśli zawarto tylko jedną umowę
H_UM.actions_grayed('WER_PR',exec('pkd_conf_h_um_act','pkd'))


\grp_p_h_um_art
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PT tabeli H_UM w okienku GRP_PT tabeli H_UM. Widok tymczasowy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: odśwież widok przebiegu
grp_disp(H,'WER_PT',1,1);

: zablokuj akcje
: Dołącz, jeśli ostatnia umowa nie została zakończona
: Usuń, jeśli zawarto tylko jedną umowę
: Akceptuj i Wycofaj, jeśli brak zmian
_act:=exec('pkd_conf_h_um_act','pkd');

{? (1+H_UM.IDMOD)<>'P'
|| _act+='R'
?};

{? H_UM.IDMOD='__'
|| _act+='AW'
?};

:: Dezaktywacja akcji wycofaj jeśli dla umowy jest więcej niż jeden aneks niezaakceptowany.
{? ~(_act*'W') & sql('select * from H where H.UMOWA=:_a and H.IDMOD<>\'__\'',H_UM.ref()).size()>1
|| _act+='W'
?};

H_UM.actions_grayed('WER_PT',_act)


\grp_p_h_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienek tabeli H w oknach grupowych tabeli H_UM.
::   WE: _a [STRING] - Akronim okna tabeli H_UM, którego zawartość wyznacza dziedzinę tabeli H.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? grp_empty(H_UM,_a)
|| return('#disable')
?};
H.prefix(H_UM.ref())


\grp_p_h_bsd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka WER_PD tabeli H w okienku GRP_PD tabeli H_UM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('grp_p_h_bs','!pkd_ezk_rpza','WER_PD')


\grp_p_h_bsr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka WER_PR tabeli H w okienku GRP_PR tabeli H_UM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('grp_p_h_bs','!pkd_ezk_rpza','WER_PR')


\grp_p_h_bst
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed obsługą okienka WER_PT tabeli H w okienku GRP_PT tabeli H_UM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('grp_p_h_bs','!pkd_ezk_rpza','WER_PT')


\grp_p_h_ard
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PD tabeli H w okienku GRP_PD tabeli H_UM
::----------------------------------------------------------------------------------------------------------------------
grp_disp(H_UM,'WER_PD',0,1);
grp_edisp(P,'INFO_P')


\grp_p_h_arr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PR tabeli H w okienku GRP_PR tabeli H_UM
::----------------------------------------------------------------------------------------------------------------------
H.actions_grayed('WER_PR',exec('pkd_conf_h_act','pkd'));

grp_disp(H_UM,'WER_PR',0,1);
grp_edisp(P,'INFO_P')


\grp_p_h_art
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po odświeżeniu okienka WER_PT tabeli H w okienku GRP_PT tabeli H_UM
::----------------------------------------------------------------------------------------------------------------------
: dostępność akcji przebiegu zatrudnienia
_act:=exec('pkd_conf_h_act','pkd');
{? (1+H.IDMOD)<>'P'
|| _act+='R'
?};
{? (1+H.IDMOD)='_' | (H.UMOWA().IDMOD+1)='H'
|| _act+='AW'
?};
:: Dezaktywacja akcji "Oddelegowanie"
{? PAR_SKID.get(261)='T'
|| _oddelegowania:=exec('czy_jest_H_ODDE','oddelegowanie');
   {? ~(H.ODDEL='T' | _oddelegowania)
   || _act+='O'
   ?};
   {? H.ODDEL='T' & ~_oddelegowania
   || _act+='W'
   ?}
|| H.actions('WER_PT','O')
?};
H.actions_grayed('WER_PT',_act);

: dostępność akcji umowy współpracy
_act:=exec('pkd_conf_h_um_act','pkd');
{? (1+H_UM.IDMOD)<>'P'
|| _act+='R'
?};

{? H_UM.IDMOD='__'
|| _act+='AW'
?};
:: Dezaktywacja akcji wycofaj jeśli dla umowy jest więcej niż jeden aneks niezaakceptowany.
{? ~(_act*'W') & sql('select * from H where H.UMOWA=:_a and H.IDMOD<>\'__\'',H_UM.ref()).size()>1
|| _act+='W'
?};

H_UM.actions_grayed('WER_PT',_act);

grp_disp(H_UM,'WER_PT',0,1);
grp_edisp(P,'INFO_P')


\h_um_info_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wyświetl pola UM_INFO zmiennej POLA_GRP. Ustawia opis i kolor czcionki zależnie od istniejących
::       modyfikacji umów o pracę.
::   WY: kolor czcionki
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.UM_INFO:='';

_epilog:="
   H_UM.cntx_pop();
   H.cntx_pop();
   exec('otworz_h_um','pracownik')
";

: sprawdź, czy są zmienione umowy
H_UM.cntx_psh();
exec('otworz_h_um','pracownik','h_u_');
H_UM.index('OD');
H_UM.prefix(P.ref());
H.cntx_psh();
H.use(exec('h_name','pracownik'));
_loop:=H_UM.first();
{!
|? _loop
|! {? (1+H_UM.IDMOD)='P' | (H_UM.IDMOD+1)='H'
   || _epilog();
      POLA_GRP.UM_INFO:='Znaleziono zmienione umowy o pracę.';
      return(Color.fnd_kol('H_UM#01#02'))
   |? (1+H_UM.IDMOD)='D'
   || _epilog();
      POLA_GRP.UM_INFO:='Znaleziono nową, niezaakceptowaną umowę o pracę.';
      return(Color.fnd_kol('H_UM#01#03'))
   || H.index('HISTUM');
      H.prefix(H_UM.ref());
      H.blank(1);
      H.UMOWA:=H_UM.ref();
      H.IDMOD:='P';
      _jest:=H.find_rec();
      {? _jest
      || _epilog();
         POLA_GRP.UM_INFO:='Znaleziono zmienione przebiegi umowy o pracę.';
         return(Color.fnd_kol('H_UM#01#02'))
      ?}
   ?};
   _loop:=H_UM.next()
!};
_epilog();

POLA_GRP.UM_INFO:='Wersja docelowa kartoteki umów jest zgodna z jej wersją roboczą.';
Color.fnd_kol('H_UM#01#01')


\h_um_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Redagowanie przebiegu współpracy w tymczasowej tabeli
::UWAGA: Przełączenie na robocze maski tabel H_UM i H
::----------------------------------------------------------------------------------------------------------------------
H_UM.cntx_psh();
H_UM.win_sel('GRP_PT');
H_UM.select();
H_UM.cntx_pop();
~~


\h_um_h_params
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy tablicę wewnętrznych parametrów edycji umów i przebiegów.
::   WY: wskazanie tablicy nazwanej
::----------------------------------------------------------------------------------------------------------------------
_buf:=obj_new('AUTO','BUTTON','BTN_REPL','OD','DO');
_buf.AUTO:=0;
_buf.BUTTON:='';
_buf.OD:=_buf.DO:=date(0,0,0);
_buf


\h_um_mk_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy okienko redakcji umowy współpracy.
::   WE: [_a] [NUMBER] - Zastosowanie okna:
::          0 - Okno do redagowania [domyślnie];
::          1 - Okno do wyświetlania.
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_display:=var_pres('_a')=type_of(0) & _a;
_svc:=params_get().svc;

exec('__WND','#object');

_acr:={? _display || 'DISP_P' || 'RED_P' ?};
: użyj istniejące okienko
{? (_wnd:=__WND.EDIT.get(H_UM,_acr))<>''
|| {? _display
   || return(_wnd)
   || H_UM.win_edit('DOD_P');
      H_UM.win_edel(_wnd)
   ?}
?};

: złóż okno z okienek składowych
_wnd:=H_UM.mk_edit('Umowa o pracę'@,,,,,'html_maximized');

:: Dodanie zakładki dla przebiegu zatrudnienia jeżeli są aktywne oddelegowania
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
H_UM.win_etab(_wnd,'Przebieg zatrudnienia'@);
H_UM.win_ewin(_wnd,H_UM,'DOD_P');
H_UM.win_ecol(_wnd,'100%');
{? _display
|| H_UM.win_ewin(_wnd,H,'DOD_PD')
|| H_UM.win_ewin(_wnd,H,'DOD_PE')
?};

H_UM.win_etab(_wnd,'Przebieg zatrudnienia c.d.'@);
H_UM.win_ewin(_wnd,H,'WYN_P');
H_UM.win_ecol(_wnd,'100%');
H_UM.win_ewin(_wnd,H,'EXT_P');

:: Okno  z polami do aktywowania informacji o oddelegowaniu
{? _oddelegowanie
|| H_UM.win_ewin(_wnd,H,'ODD_P')
?};
:: Zakładka oddelegowania z oknem do edycji oddelegowania
{? _oddelegowanie
|| H_UM.win_etab(_wnd,'Oddelegowania do pracy za granicą'@);
   H_UM.win_ewin(_wnd,H_ODDE,'RED')
?};

: przycisk "Zastępstwo"
{? _display
|| _svc.BTN_REPL:=H_UM.win_ebtn(_wnd,'text=%1,align=begin,display=1'['Zastępstwo'@],
   "params_exec('zastepstwo','pracownik',1); ''"
   )
|| _svc.BTN_REPL:=H_UM.win_ebtn(_wnd,'text=%1,align=begin,display=1'['Zastępstwo'@],
   "params_exec('zastepstwo','pracownik'); ''"
   )
?};
: listwa przycisków (standard)
{? ~_display & PAR_SKID.get(180)='T'
|| _svc.BUTTON:=H_UM.win_ebtn(_wnd,
      'text='+exec('text_red_zakoncz','#window','PKD_A')+',panel=bottom,align=begin',
      "params_get().svc.AUTO:=1; 'key:F2'"
   );
   H_UM.btn_opt(_svc.BUTTON,'state='+{? (1-H_UM.IDMOD)='H' || 'grayed' || 'normal' ?})
?};
exec('ok_esc','#window',H_UM,_wnd,,,,,,,exec('text_red_ok','#window'));

: zapamiętaj dla przyszłego użycia
__WND.EDIT.put(H_UM,_acr,_wnd);

_wnd


\h_um_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formuła dodająca umowę o pracę.
::  OLD: \add_hum/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=H_UM.ref();

H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
{? H_UM.last() & H_UM.DO=date(0,0,0)
|| FUN.info('Nie można dołączyć nowej umowy przed rozwiązaniem poprzedniej.'@);
   H_UM.cntx_pop();
   return()
?};

_rollback:="undo(); end(); H_UM.cntx_pop(); H.cntx_pop()";

_data:=H_UM.DO+1;

H_UM.blank();
H_UM.memo_set(,'UZASDN');
H_UM.OD:=H_UM.P_OD:=_data;

:: czy podpowiadamy wartośći pól na podstawie ostatniego przebiegu zatrudnienia:
_podpow:=PAR_SKID.get(263)='T';

H.cntx_psh();
H.index('_HISTDAT');
H.prefix(P.ref());
:: inicjalizacja zmiennych na warości do przeniesienia z ostatniego przebiegu zatrudnienia:
_miejsce:='';
{? _podpow
|| _poprz:=exec('h_poprz_obj','!pkd_ezk_rpza')
?};

{? H.last()
|| _miejsce:=H.MIEJSCE;
   {? _podpow
   || _poprz.write()
   ?}
?};

H.blank();
H.UMOWA:=null();
H.MIEJSCE:=_miejsce;
{? _podpow
|| H.PODPIS:=_data;
   _poprz.read()
?};
H.OS_ADRES:=exec('szukaj','osoba',,_data);
{? _podpow
|| obj_del(_poprz)
|| H.memo_set(,'INNE')
?};

_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);
: przygotuj kontekst edycji
_buf:=exec('h_um_edit_begin','!pkd_ezk_rpza',0);
:: Ustawienie wartości z oddelegowania do pracy za granicą.
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
{? _oddelegowanie
|| _edit:=H_UM.win_edit('?');
   exec('h_odde_edit_begin','oddelegowanie',0,H_UM,_edit)
?};
_test:=
   '_test:=exec(\'h_um_ae\',\'!pkd_ezk_rpza\',0);'+
   {? _oddelegowanie
   || '{? H.ODDEL=\'T\' & var_pres(\'_test\')=type_of(0) || _test:=exec(\'h_odde_ae\',\'oddelegowanie\',,\'H_UM\',1)?};'
   || ''
   ?}+
   '_test';
: edycja
{? H_UM.edit($_test)
|| do();
   {? ~(H_UM.add(1) & H_UM.memo_put(,'UZASDN'))
   || _rollback();
      return()
   ?};
   _ref:=H_UM.ref();
   H.UMOWA:=H_UM.ref();
   H.KZ:=exec('h_kz_bl','pracownik');
   {? ~(H.add(1) & H.memo_put(,'INNE')) | (_oddelegowanie & ~exec('h_odde_add','wspolpraca',1))
   || _rollback();
      return()
   ?};
   {? _svc.AUTO
   || {? ~exec('h_um_merge','pracownik')
      || _rollback();
         return()
      ?}
   ?};
   end()
?};

:: informacja o zależnościach służbowych
exec('p_zas_zs_def','pracownik',H_UM.P_ZAS);

: porządki
exec('h_um_edit_end','!pkd_ezk_rpza',_buf);
:: Koniec pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie')
?};
H_UM.cntx_pop();
H.cntx_pop();

H_UM.seek(_ref);
~~


\h_um_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formula modyfikująca umowę o pracę.
::  OLD: \popraw/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
_rollback:="undo(); end(); H_UM.cntx_pop(); H.cntx_pop()";

_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);
H_UM.get();
H_UM.memo_get(,'UZASDN');
_p_zas:=H_UM.P_ZAS;
H.cntx_psh();
H.index('HISTUM');
H.prefix(H_UM.ref());
H.first();

: przygotuj kontekst edycji
_buf:=exec('h_um_edit_begin','!pkd_ezk_rpza',1);
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');

{? exec('get','#parametr',180)='T'
|| _svc.OD:=H_UM.OD;
   _svc.DO:=H_UM.DO;
   _fml:=
      "  H_UM.btn_opt(params_get().svc.BUTTON,
            'state='+
               {? params_get().svc.OD<>H_UM.OD | params_get().svc.DO<>H_UM.DO | (1-H_UM.IDMOD)='H'
               || 'grayed'
               || 'normal'
               ?}
         )
      ";
   H_UM.fld_fml('OD','AFTER_EDIT',_fml);
   H_UM.fld_fml('DO','AFTER_EDIT',_fml)
?};

_grayOddel:=0;
{? _oddelegowanie & H.first()
|| _edit:=H_UM.win_edit('?');
   exec('h_odde_edit_begin','oddelegowanie',1,H_UM,_edit);
:: Wyłączenie z redagowania pól dot. oddelegowań jeśli dla umowy istnieje więcej przebiegów
:: lub dla jedynego przebiegu istnieje więcej niż jedno oddelegowanie:
   _grayOddel:=(H.size()>1 | ~exec('h_oddel_editable','oddelegowanie',1));
   {? _grayOddel
   || H_UM.efld_opt(_edit,'enable=0,editable=grayed',H_ODDE);
      H_UM.efld_opt(_edit,'editable=grayed',H,'ODDEL');
      H_UM.efld_opt(_edit,'editable=grayed',H,'KODDEL')
   ?}
?};
_test:=
   '_test:=exec(\'h_um_ae\',\'!pkd_ezk_rpza\',1);'+
   {? _oddelegowanie & ~_grayOddel
   || '{? var_pres(\'_test\')=type_of(0) '
      '|| {? H.ODDEL=\'T\' '
      '   || _test:=exec(\'h_odde_ae\',\'oddelegowanie\',0,\'H_UM\',1) '
      '   || _test:=exec(\'h_odde_n_chk\',\'oddelegowanie\',1) '
      '   ?}'
      '?};'
   || ''
   ?}+
   '_test';
: edycja
{? H.first() & H.memo_get(,'INNE') &
   H_UM.edit($_test)

:  ze względu na porównanie z wersją docelową należy treść notatki zapisać w pierwszej kolejności
|| do();
   {? H_UM.memo_put(,'UZASDN') & H_UM.put() & H.memo_put(,'INNE') & H.put()
   || _ok:=1;
::    Obsługa zaznaczenia na istniejącej umowie (z jednym przebiegiem) znacznika oddelegowanie, lub poprawiania takiego
::    jedynego oddelegowania w umowie:
      {? ~_grayOddel & H.ODDEL='T'
      || {? H_ODDE.H
         || _ok:=H_ODDE.put();
            {? _ok
            || _txt:=exec('aktualizacja_h2hodde','oddelegowanie');
               {? +_txt
               || FUN.emsg(_txt)
               ?}
            ?}
         || H_ODDE.H:=H.ref();
            _ok:=H_ODDE.add();
            {? _ok
            || exec('h_odde_wer_ad','oddelegowanie')
            ?}
         ?}
      ?};
      {? ~_ok
      || undo('Błąd redakcji oddelegowania.'@)
      ?};

      H.cntx_psh();
      H.index('HISTUM');
      H.prefix(H_UM.ref());
      {? H.first()
      || {? H.OD<>H_UM.OD
         || H.OD:=H_UM.OD;
            H.put()
         ?};
::       Poprawienie oddelegowania po porpawieniu pierwszego przebiegu:
         _oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
         {? _oddelegowanie & H.ODDEL='T'
         || H_ODDE.cntx_psh();
            H_ODDE.use('h_odde'+(H.name()+1));
            exec('zmiany_h2hodde','oddelegowanie','next');
            H_ODDE.cntx_pop()
         ?}
      ?};
      {? H.last()
      || {? H.DO<>H_UM.DO
         || H.DO:=H_UM.DO;
            H.put()
         ?};
::       Poprawienie oddelegowania po porpawieniu ostatniego przebiegu:
         _oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
         {? _oddelegowanie & H.ODDEL='T'
         || H_ODDE.cntx_psh();
            H_ODDE.use('h_odde'+(H.name()+1));
            exec('zmiany_h2hodde','oddelegowanie','prev');
            H_ODDE.cntx_pop()
         ?}
      ?};
      {? H.first()
      || {!
         |? {? H.RU<>H_UM.RU
            || H.RU:=H_UM.RU;
               H.put()
            ?};
            H.next()
         !}
      ?};
      H.cntx_pop();
      {? _svc.AUTO & H.get()
      || {? ~exec('h_um_merge','pracownik') | ~exec('h_merge_one','pracownik')
         || undo()
         ?}
      ?}
   ?};
   end()
?};

{? H_UM.P_ZAS<>null & H_UM.P_ZAS<>_p_zas
:: informacja o zależnościach służbowych
|| exec('p_zas_zs_def','pracownik',H_UM.P_ZAS)
?};

: porządki
exec('h_um_edit_end','!pkd_ezk_rpza',_buf);
:: Koniec pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie')
?};
H.cntx_pop();
H.get();

~~


\h_um_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Sprawdza poprawność wypełnienia danych nowej umowy.
::   WE:  _a  [NUMBER] - tryb modyfikacji zapisu: 0 - dodawanie, 1 - poprawianie
::       [_b] [NUMBER] - tryb wsadowy (bez komunikatów): 0 - nie [domyślnie], 1 - tak
::  OLD: \spr_hum/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź poprawność umowy o pracę i angażu
exec('h_um_p_ae','pracownik',_a,var_pres('_b')=type_of(0) & _b)


\h_um_edit_begin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed edycją rekordu w tabeli H_UM. Ustawia okienko, blokuje/udostępnia pola, ustala "gwiazdkowanie".
::   WE: _a [NUMBER] - tryb modyfikacji rekordu
::          0 - dołączanie
::          1 - poprawiania
::   WY: wskazanie na tablicę kontekstu dla formuły h_edit_end
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_cntx:=obj_new('OSOBA','P','H','H_UM');

_cntx.OSOBA:=exec('save_fml_all','#field',OSOBA);
_cntx.P:=exec('save_fml_all','#field',P);
_cntx.H:=exec('save_fml_all','#field',H);
_cntx.H_UM:=exec('save_fml_all','#field',H_UM);

: przygotuj okienko redakcji
_wnd:=exec('h_um_mk_edit','!pkd_ezk_rpza');
H_UM.win_edit(_wnd);

: okno słownika adresów osoby
OS_ADRES.win_dict('SLO');

: zmiany w gwiazdkowaniu
H_UM.efld_opt(_wnd,'mark=0',P,'IP');
H_UM.efld_opt(_wnd,'mark=0',P,'T');

: dostępność pól
exec('set_fml_type','#field',OSOBA,'BEFORE_EDIT',"0");
exec('set_fml_type','#field',P,'BEFORE_EDIT',"0");
exec('h_efld_opt','pracownik','*',H_UM,_wnd);
{? _a
|| exec('h_um_bp_fld','pracownik',1);
:  ustal dostępność pól do edycji zależnie od pozycji bieżącej umowy o pracę
   exec('h_um_bp_fld','pracownik',0,exec('h_um_mod_pos','pracownik',H_UM.ref(),H_UM.P))
|| H_UM.fld_fml('OD','BEFORE_EDIT',"0")
?};

exec('os_adres_cfg','osoba','BLANK','OSOBA');

_cntx


\h_um_edit_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywraca ustawienia interfejsu.
::   WE: _a - wskazanie na tablicę kontekstu
::----------------------------------------------------------------------------------------------------------------------
: przywróć zapamiętane ustawienia formuł pól
exec('restore_fml_all','#field',OSOBA,_a.OSOBA);
exec('restore_fml_all','#field',P,_a.P);
exec('restore_fml_all','#field',H,_a.H);
exec('restore_fml_all','#field',H_UM,_a.H_UM);

exec('os_adres_cfg','osoba','BLANK','');
~~


\h_um_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formula usuwająca umowę o pracę.
::  OLD: \del_hum/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('del_conf','#table',H_UM)
|| return()
?};

:: Sprawdzenie czy zostały wypełnione informacje o oddelegowaniu do pracy za granicą.
:: Jeżeli tak to usunięcie nie jest możliwe.
{? PAR_SKID.get(261)='T'
|| {? ~exec('h_um_can_del','oddelegowanie',H_UM.ref())
   ||  FUN.emsg('%1\n%2'
         [  'Informacje o oddelegowaniu do pracy za granicą były modyfikowane lub rozliczone na liście płac.'@,
            'Usunięcie umowy o pracę możliwe po usunięciu oddelegowań.'@
         ]
      );
      return()
   ?}
?};

{? H_UM.name()<>'h_um'
|| _uid:=H_UM.IDLNK;
   do();
   {? H_UM.del(,1)
   || {? _uid<>''
      || H_UM.cntx_psh();
         exec('otworz_h_um','pracownik','h_um');
         H_UM.prefix();
         {? H_UM.seek(_uid)
         || {? ~H_UM.del(,1)
            || undo()
            ?}
         || undo()
         ?};
         H_UM.cntx_pop();
         exec('otworz_h_um','pracownik')
      ?}
   || undo()
   ?};
   end()

|| H_UM.del(,1)
?};
~~


\h_um_wer_pt_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rekord przed okienka "poczekalni" umów o pracę (okienko WER_PT tabeli H_UM)
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? (1+H_UM.IDMOD)='D' || Color.fnd_kol('H_UM_H#01#02')
|? (H_UM.IDMOD+1)='H' || Color.fnd_kol('H_UM_H#01#01')
|? (1+H_UM.IDMOD)='P' || Color.fnd_kol('H_UM_H#01#01')
?}


\h_um_wer_pt_lb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla legendę dla "poczekalni" umów o pracę (okienko WER_PT tabeli H_UM)
::  OLD: \leg_hum/menu.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','H_UM_H#01')


\h_um_merge_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zatwierdza bieżącą modyfikację umów współpracy.
::----------------------------------------------------------------------------------------------------------------------
exec('h_um_merge','pracownik')


\h_um_cancel_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wycofuje bieżącą modyfikację umów współpracy.
::----------------------------------------------------------------------------------------------------------------------
exec('h_um_cancel','pracownik')


\h_um_d_eb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetlenie informacji o rozwiązaniu umowy.
::----------------------------------------------------------------------------------------------------------------------
exec('h_um_eb','!pkd_ezk_rpza',0)


\h_um_t_eb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa informacji o rozwiązaniu umowy
::----------------------------------------------------------------------------------------------------------------------
exec('h_um_eb','!pkd_ezk_rpza',1)


\h_um_eb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa informacji o rozwiązaniu umowy.
::   WE: _a [NUMBER ]- tryb obsługi
::          0 - wyświetlenie
::          1 - edycja
::----------------------------------------------------------------------------------------------------------------------
_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);

_P180:=PAR_SKID.get(180)='T';

exec('__WND','#object');

_acr:='RU_P';
{? (_wnd:=__WND.EDIT.get(H_UM,_acr))=''
|| _wnd:=H_UM.mk_edit('Rozwiązanie umowy');
   H_UM.win_ewin(_wnd,H_UM,'RU_P');
   {? _P180
   || H_UM.win_ebtn(_wnd,
         'text='+exec('text_red_zakoncz','#window','PKD_A')+',panel=bottom,align=begin',
         "params_get().svc.AUTO:=1; 'key:F2'"
      )
   ?};
   H_UM.win_ebtn(_wnd,'text='+exec('text_red_ok','#window')+',panel=bottom,align=end',"'key:F2'");
   H_UM.win_ebtn(_wnd,'text='+'&Anuluj'@+',panel=bottom,align=end',"'key:Esc'");

:  zapamiętaj dla przyszłego użycia
   __WND.EDIT.put(H_UM,_acr,_wnd)
?};

_val:=(H_UM.EKW_LICZ='N');
H_UM.efld_opt(_wnd,'enable=%1' [$_val],H_UM,'EKW');
H_UM.efld_opt(_wnd,'enable=%1' [$_val],H_UM,'EKW_NSP');

H_UM.cntx_psh();
H_UM.win_edit(_wnd);
{? _a
|| {? _P180
:     Praca z włączoną wersją roboczą.
:     Jeżeli chcemy redagować dane związane z rozwiązaniem umowy, to pewnie będziemy je chcieli zapisać. Pamiętajmy, że
:     w trakcie akceptacji wykonywane są formuły sprawdzające poprawność danych. Może się wówczas okazać, że z uwagi na
:     zupełnie inne pola (np. pozycja w organizacji, adres, ...) akceptacja nie uda się, a komunikat o tym będzie
:     lakoniczny (Przeniesienie ... nie powiodło się). Chcąc uniknąć takiej sytuacji - sprawdźmy dane przed
:     redagowaniem, wykorzystując formuły obsługujące akcje "Rekord - po". Pamiętajmy jednak, że te formuły sprawdzają
:     dane z bufora tabeli. Zadbajmy więc o prawidłowe ich wypełnienie (w szczególności: należy podczytać pola
:     typu SYS_MEMO).
   || _ok:=0;
      H.cntx_psh();
      H.index('HISTUM');
      H.prefix(H_UM.ref());
      {? H.first()
      || H_UM.memo_get(,'UZASDN');
         _chk:=exec('h_um_ae','!pkd_ezk_rpza',1,1);
         _ok:=~((type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & ~_chk));
         {? ~_ok
         || FUN.info(
               'Dane umowy nie są kompletne.\n%1'
               'Korzystając z akcji "Popraw" należy uzupełnić brakujące informacje.'@
               [{? type_of(_chk)=type_of('') || _chk+'\n' || '' ?}]
            )
         ?}
      ?};
      H.cntx_pop()
   || _ok:=1
   ?};

   _efld_opt:=$("H_UM.efld_opt('"+_wnd+"','enable=%1' [$(H_UM.USPPPRAK().KOD='550')],H_UM,'USPPPRAT')");
   _efld_opt();
   _usppprak_ae:=H_UM.fld_fml('USPPPRAK','AFTER_EDIT',_efld_opt);

   S_ZUS.cntx_psh();
   S_ZUS.prefix();
   {? _ok & H_UM.edit()
   || do();
      {? H_UM.EKW_LICZ='T'
      || H_UM.EKW:=0;
         H_UM.EKW_NSP:=0
      ?};
      H_UM.put();
      {? _svc.AUTO
      || {? ~exec('h_um_merge','pracownik')
         || undo()
         ?}
      ?};
      end()
   ?};
   S_ZUS.cntx_pop();

   H_UM.fld_fml('USPPPRAK','AFTER_EDIT',_usppprak_ae)

|| H_UM.display()
?};
H_UM.cntx_pop();
H_UM.get()


\h_um_drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KFI [2008]
:: OPIS: Uruchamia wydruk umowy współpracy z menu okienka.
::  OLD: \wydrumpr/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,'UM','STRING[16]','Umowa o pracę','PPSF_H','STRING[16]','Praca zdalna');
_tab.UM:=$H_UM.ref();
{? exec('is_pzd01','ppsf')
|| Cntx.psh(PPSF_H,PPSF_ADR);
   Cntx.clr(PPSF_H,PPSF_ADR);
   _ppsfObj:=obj_new('jest','pobierz','PPSF_H');
   exec('wybor_do_druku_umowy','ppsf',_ppsfObj);
   _ppsfObj.pobierz();
   _tab.PPSF_H:=_ppsfObj.PPSF_H;
   Cntx.pop(PPSF_H,PPSF_ADR)
?};
_tab.add();
params_set('UM',_tab,'ZAL','1','DALEJ','');
rep_exec('pkd_zaswumowaoprace')


\h_um_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Załączniki" w oknach tabeli H_UM.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tmp_on:=(PAR_SKID.get(180)='T');
_edit:={? _tmp_on || H_UM.name()='h_u_' || 1 ?} & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_RPZA');
exec('show_zalacz','zalacz','P','H_UM',_edit);
{? _edit & _tmp_on
|| _cmp:=exec('compare','zalacz',H_UM.uidref(),H_UM.IDLNK);
   {? (_cmp & (1+H_UM.IDMOD)<>'_') | (~_cmp & (1+H_UM.IDMOD)='_')
:     Jeżeli (załączniki bz i rekord zmienione) lub (załączniki zmienione i rekord bz),
:     to wymuszenie wykonania wyzwalacza, który ustali status rekordu.
   || H_UM.put()
   ?}
?}


\h_um_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla szczegółowe dane o umowie współpracy.
::----------------------------------------------------------------------------------------------------------------------
_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);

H.cntx_psh();
H.index('HISTUM');
H.prefix(H_UM.ref());
{? H.first() & H.memo_get(,'INNE')
|| _red:=H_UM.win_edit('?');
   H_UM.win_edit(_wnd:=exec('h_um_mk_edit','!pkd_ezk_rpza',1));
   exec('h_efld_opt','pracownik','*',H_UM,_wnd);
   H_UM.display();
   H_UM.win_edit(_red)
?};
H.cntx_pop()


\h_mk_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzy okienko redakcji przebiegu zatrudnienia.
::   WE: [_a] [NUMBER] - Zastosowanie okna:
::          0 - Okno do redagowania [domyślnie];
::          1 - Okno do wyświetlania.
::   WY: akronim okienka
::----------------------------------------------------------------------------------------------------------------------
_display:=var_pres('_a')=type_of(0) & _a;

exec('__WND','#object');

_acr:={? _display || 'DISP_P' || 'RED_P' ?};
: użyj istniejące okienko
{? (_wnd:=__WND.EDIT.get(H,_acr))<>''
|| {? _display || return(_wnd) || H.win_edel(_wnd) ?}
?};

: złóż okno z okienek składowych
_wnd:=H.mk_edit('Przebieg zatrudnienia'@,,,,,'html_maximized');
:: Dodanie zakładki dla przebiegu zatrudnienia jeżeli są aktywne oddelegowania
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
{? _oddelegowanie
|| H.win_etab(_wnd,'Przebieg zatrudnienia'@)
?};

H.win_ewin(_wnd,H,'POP_P');
{? _display
|| H.win_ewin(_wnd,H,'DOD_PD')
|| H.win_ewin(_wnd,H,'DOD_PE')
?};

:: Okno  z polami do aktywowania informacji o oddelegowaniu
{? _oddelegowanie
|| H.win_ewin(_wnd,H,'ODD_P')
?};
H.win_ecol(_wnd,'100%');
H.win_ewin(_wnd,H,'WYN_P');
H.win_ecol(_wnd,'100%');
H.win_ewin(_wnd,H,'EXT_P');

:: Zakładka oddelegowania z oknem do edycji oddelegowania
{? _oddelegowanie
|| H.win_etab(_wnd,'Oddelegowania do pracy za granicą'@);
   H.win_ewin(_wnd,H_ODDE,'RED')
?};

: listwa przycisków (standard)
{? ~_display & PAR_SKID.get(180)='T'
|| params_get().svc.BUTTON:=H.win_ebtn(_wnd,
      'text='+exec('text_red_zakoncz','#window','PKD_A')+',panel=bottom,align=begin',
      "params_get().svc.AUTO:=1; 'key:F2'"
   );
   H.btn_opt(params_get().svc.BUTTON,'state='+{? (1-H.IDMOD)='U' || 'grayed' || 'normal' ?})
?};
exec('ok_esc','#window',H,_wnd,,,,,,,exec('text_red_ok','#window'));

: zapamiętaj dla przyszłego użycia
__WND.EDIT.put(H,_acr,_wnd);

_wnd


\h_edit_begin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed edycją rekordu w tabeli H. Ustawia okienko, blokuje/udostępnia pola, ustala "gwiazdkowanie".
::   WE: _a [NUMBER] - tryb modyfikacji rekordu
::          0 - dołączanie
::          1 - poprawiania
::   WY: wskazanie na tablicę kontekstu dla formuły h_edit_end
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_cntx:=obj_new('P','H','H_UM');

_cntx.P:=exec('save_fml_all','#field',P);
_cntx.H:=exec('save_fml_all','#field',H);
_cntx.H_UM:=exec('save_fml_all','#field',H_UM);

: przygotuj okienko redakcji
_wnd:=exec('h_mk_edit','!pkd_ezk_rpza');
H.win_edit(_wnd);

: okno słownika adresów osoby
OS_ADRES.win_dict('SLO');

: zmiany w gwiazdkowaniu
H.efld_opt(_wnd,'mark=0',P,'IP');
H.efld_opt(_wnd,'mark=0',P,'T');

: dostępność pól
exec('set_fml_type','#field',OSOBA,'BEFORE_EDIT',"0");
exec('set_fml_type','#field',P,'BEFORE_EDIT',"0");
exec('h_efld_opt','pracownik','*',H,_wnd);

exec('os_adres_cfg','osoba','BLANK','OSOBA');

_cntx


\h_edit_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywraca ustawienia interfejsu.
::   WE: _a - wskazanie na tablicę kontekstu
::----------------------------------------------------------------------------------------------------------------------
: przywróć zapamiętane ustawienia formuł pól
exec('restore_fml_all','#field',P,_a.P);
exec('restore_fml_all','#field',H,_a.H);
exec('restore_fml_all','#field',H_UM,_a.H_UM);

exec('os_adres_cfg','osoba','BLANK','');
~~


\h_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła dodająca przebieg zatrudnienia.
::       - Dodawany przebieg traktowany jest jako ostatni.
::       - Data rozpoczęcia przebiegu nie może być wcześniejsza od daty ostatniego, istniejącego.
::       - Jeśli umowa została zakończona, to data zakończenia przebiegu jest zablokowana do edycji.
::  OLD: \add_h/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_ref:=H.ref();

:: czy podpowiadamy wartośći pól na podstawie ostatniego przebiegu zatrudnienia:
_podpow:=PAR_SKID.get(263)='T';
: wartości do przeniesienia z ostatniego przebiegu
_pmp:=_inne:=_miejsce:='';
_sp:='N';
_adres:=null;
{? _podpow
|| _poprz:=exec('h_poprz_obj','!pkd_ezk_rpza')
?};

H.cntx_psh();
H.index('HISTUM');
H.prefix(H_UM.ref());
{? H.last()
|| _pmp:=H.PMP;
   _miejsce:=H.MIEJSCE;
   _inne:=H.memo_txt(,1,'INNE');
   _sp:=H.SP;
   _adres:=H.OS_ADRES;
   {? _podpow
   || _poprz.write()
   ?}
?};

H.blank();
H.DO:=H.UMOWA().DO;
H.PMP:=_pmp;
H.MIEJSCE:=_miejsce;
H.memo_set(_inne,'INNE');
H.SP:=_sp;
H.OS_ADRES:=_adres;
{? _podpow
|| _poprz.read()
?};

_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);

: przygotuj kontekst edycji
_buf:=exec('h_edit_begin','!pkd_ezk_rpza',0);
:: Ustawienie wartości z oddelegowania do pracy za granicą.
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
{? _oddelegowanie
|| _txt:='';
   _edit:=H.win_edit('?');
   exec('h_odde_edit_begin','oddelegowanie',0,H,_edit)
?};

: dostępność pól
_pos:=exec('h_mod_pos','pracownik',H.ref(),H.UMOWA);
H.fld_fml('OD','BEFORE_EDIT',"1");
H.fld_fml('DO','BEFORE_EDIT',"0");

{? _podpow
:: Ustawienie daty zawarcia na datę rozpoczęcia:
||
H.fld_fml('OD','AFTER_EDIT',"{? H.PODPIS=date(0,0,0) ||  H.PODPIS:=H.OD || 1 ?}");
obj_del(_poprz)
?};

: edycja
_ok:=0;
errno();
_test:=
   '_test:=exec(\'h_ae\',\'pracownik\',0);'+
   {? _oddelegowanie
   || '{? H.ODDEL=\'T\' & var_pres(\'_test\')=type_of(0) || _test:=exec(\'h_odde_ae\',\'oddelegowanie\',,,1) ?};'
   || ''
   ?}+
   '_test';
{? H.edit($_test)
|| _msg:=no_msg(1);
   do();

   {? H.add(1) & H.memo_put(,'INNE')
::    Dodanie oddelegowania i "podzielenie" przebiegu jeśli trzeba:
   || _ok:=exec('h_odde_add','wspolpraca',1);
      {? _ok & _svc.AUTO
      || _ok:=exec('h_um_merge','pracownik')
      ?}
   ?};
   {? ~_ok
   || undo()
   ?};
   end();
   no_msg(_msg);
   {? (_errno:=errno())<>0
   || FUN.error('Wystąpił błąd podczas próby zapisu danych. (Kod błędu: %1)'@ [$_errno])
   ?}
?};

: porządki
exec('h_edit_end','!pkd_ezk_rpza',_buf);
:: Koniec pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie',_txt)
?};
H.cntx_pop();

H.seek(_ref);
~~


\h_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła poprawiająca przebieg zatrudnienia.
::  OLD: \mod_h/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('KOMM');
exec('KOMM','#object');

H.cntx_psh();
H_UM.cntx_psh();
H_UM.index('OD');
H.index('HISTUM');
H.prefix(H_UM.ref());
_svc:=exec('h_um_h_params','!pkd_ezk_rpza');
params_set('svc',_svc);

: przygotuj kontekst edycji
_buf:=exec('h_edit_begin','!pkd_ezk_rpza',1);
:: Ustawienie wartości z oddelegowania do pracy za granicą.
_oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
{? _oddelegowanie
|| _edit:=H.win_edit('?');
   exec('h_odde_edit_begin','oddelegowanie',1,H,_edit);
   _h_oddel_ed:=1;
   H.efld_opt(_edit,
      'editable=%1,enable=%2'[{? _h_oddel_ed || '1' || 'grayed' ?},$(_h_oddel_ed)],,'ODDEL'
   );
   H.efld_opt(_edit,'editable=%1'[{? exec('h_koddel_editable','oddelegowanie') || '1' || 'grayed' ?}],,'KODDEL');
:: Wyłączenie z redagowania pól dot. oddelegowań jeśli dla danego przebiegu istnieje więcej niż jedno oddelegowanie:
   {? ~exec('h_oddel_editable','oddelegowanie',1)
   || H.efld_opt(_edit,'enable=0,editable=grayed',H_ODDE)
   ?};
   H_ODDE.fld_fml('O_OD','BEFORE_EDIT',"*");
   _zm_h:=obj_new('OD','DO');
   _zm_h.OD:=H.OD;
   _zm_h.DO:=H.DO;
   _old:=exec('H_ODDE','buffer');
   _old.get();
   _txt:=''
?};

: dostępność pól
_pos:=exec('h_mod_pos','pracownik',H.ref(),H.UMOWA);
_mod_od:="0";
_mod_do:="0";
{? _pos=1
|| _mod_do:="1"
|? _pos=2
|| _mod_od:="1";
   _mod_do:="1"
|? _pos=3
|| _mod_od:="1"
?};

:: Dostępność pól przy włączonych oddelegowaniach do pracy za granicą i braku uprawnień.
{? H.ODDEL='T' & ~exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD')
|| _mod_od:=_mod_do:="0"
?};

H.fld_fml('OD','BEFORE_EDIT',_mod_od);
H.fld_fml('DO','BEFORE_EDIT',_mod_do);

{? exec('get','#parametr',180)='T'
|| _svc.OD:=H.OD;
   _svc.DO:=H.DO;
   _fml:=
      "  H.btn_opt(params_get().svc.BUTTON,
         'state='+{? params_get().svc.OD<>H.OD | params_get().svc.DO<>H.DO | (1-H.IDMOD)='U' || 'grayed' || 'normal' ?}
         )
      ";
   H.fld_fml('OD','AFTER_EDIT',_fml);
   H.fld_fml('DO','AFTER_EDIT',_fml)
?};

: edycja
_ok:=0;
errno();
H.memo_get(,'INNE');
_test:=
   '_test:=exec(\'h_ae\',\'pracownik\',1);'+
   {? _oddelegowanie
   || '{? var_pres(\'_test\')=type_of(0) '
      '|| {? H.ODDEL=\'T\' '
      '   || _test:=exec(\'h_odde_ae\',\'oddelegowanie\',0) '
      '   || _test:=exec(\'h_odde_n_chk\',\'oddelegowanie\',1) '
      '   ?}'
      '?};'
   || ''
   ?}+
   '_test';
{? H.edit($_test)
|| do();

:  ze względu na porównanie z wersją docelową należy
:  treść notatki zapisać w pierwszej kolejności
   {? H.memo_put(,'INNE') & H.put(1)
   || _ok:=1;
      _ref:=H.ref();

:: Dodanie oddelegowania do pracy za granicą z pozycjami
      _add_h:=0;
      {? _oddelegowanie
      || {? H.ODDEL='T'
         || {? H_ODDE.size()<=1 & (H.DO=date(0,0,0) | H_ODDE.O_DO<H.DO)
            || _add_h:=1;
               _h_do:=H.DO;
               _h_od:=H_ODDE.O_DO+1;
               H.DO:=H_ODDE.O_DO
            ?};
            {? H_ODDE.H
            || _ok:=H_ODDE.put(1);
               {? _ok & exec('spr_h2hodde','oddelegowanie',_zm_h,_old)
               || _txt:=exec('aktualizacja_h2hodde','oddelegowanie');
                  H.put(1)
               ?}
            || H_ODDE.H:=_ref;
               _ok:=H_ODDE.add();
               {? _ok
               || exec('h_odde_wer_ad','oddelegowanie')
               ?}
            ?}
         ?}
      ?};

      _do:=H.OD-1;
      _od:=H.DO+1;
      {? _ok & H.prev()
      || H.DO:=_do;
         {? ~H.put()
         || _ok:=0
         || {? _oddelegowanie
            || _ok:=exec('zmiany_h2hodde','oddelegowanie','prev')
            ?}
         ?}
      ?};
      {? _ok & H.seek(_ref)
      || {? H.next()
         || H.OD:=_od;
            {? ~H.put()
            || _ok:=0
            || {? _oddelegowanie
               || _ok:=exec('zmiany_h2hodde','oddelegowanie','next')
               ?}
            ?}
         |? _add_h
::          Stoimy na bieżącym przebiegu:
         || H.OD:=_h_od;
            H.DO:=_h_do;
            H.ODDEL:='N';
            _ok:=H.add(1)
         ?}
      ?};
      {? _ok & _svc.AUTO & H.seek(_ref)
      || _ok:=exec('h_merge_one','pracownik')
      ?}
   ?};
   {? ~_ok
   || undo()
   ?};
   end();
   {? (_errno:=errno())<>0
   || FUN.error('Wystąpił błąd podczas próby zapisu danych. (Kod błędu: %1)'@ [$_errno])
   || _ok:=1
   ?}
?};

: porządki
exec('h_edit_end','!pkd_ezk_rpza',_buf);
:: Koniec pracy z oddelegowaniem do pracy za granicą.
{? _oddelegowanie
|| exec('h_odde_edit_end','oddelegowanie',_txt);
   obj_del(_zm_h)
?};
H_UM.cntx_pop();
H.cntx_pop();
H.get();

{? KOMM.is_inited() & KOMM.get_size()>0
|| KOMM.select('Komunikaty dotyczące zmian w przebiegu zatrudnienia'@,,,,,0);
   VAR_DEL.delete('KOMM');
   exec('KOMM','#object')
?};
~~


\h_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła usuwająca przebieg zatrudnienia
::  OLD: \del_h/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~exec('del_conf','#table',H)
|| return()
?};

:: Sprawdzenie czy zostały wypełnione informacje o oddelegowaniu do pracy za granicą i czy można je usunąć.
{? PAR_SKID.get(261)='T'
|| {? H.ODDEL='T' & ~exec('h_can_del','oddelegowanie',H.ref())
   ||  FUN.emsg('%1\n%2'
         [  'Informacje o oddelegowaniu do pracy za granicą były modyfikowane lub rozliczone na liście płac.'@,
            'Usunięcie aneksu do umowy możliwe po usunięciu oddelegowań.'@
         ]
      );
      return()
   ?}
?};

{? H.name()<>'_hist' & PAR_SKID.get(180)='T'
|| do();
   _link:=H.IDLNK;
   _h_um:=H.UMOWA;
   _many:=0;
   H.cntx_psh();
   H.index('_HISTDAT');
   H.prefix(H.P);
   {? H.prev() & 1+H.IDMOD='D'
   || _many:=1
   ?};
   H.cntx_pop();
   {? H.del(,1)
   || _ok:=1;
      {? _link<>''
      || H.cntx_psh();
         H.use('_hist');
         H.clear();
         H_ODDE.cntx_psh();
         H_ODDE.use('h_oddet');
         _ok:=(H.seek(_link) & H.del(,1));
         H_ODDE.cntx_pop();
         H.cntx_pop()
      ?};
      {? ~_ok
      || undo();
         end();
         return()
      ?};
      exec('norm_h_oddo','pracownik');
      {? ~_many
      || {? ~exec('h_um_merge','pracownik',H.UMOWA)
         || undo()
         ?}
      ?}
   || undo()
   ?};
   end()

|| {? H.del()
   || exec('norm_h_oddo','pracownik')
   ?}
?};
exec('test_ciaglosci_oddelegowan','oddelegowanie')


\h_ib
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Załączniki" w oknach tabeli H.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tmp_on:=(PAR_SKID.get(180)='T');
_edit:={? _tmp_on || H.name()='_his_' || 1 ?} & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_RPZA');
exec('show_zalacz','zalacz','P','H',_edit);
{? _edit & _tmp_on
|| _cmp:=exec('compare','zalacz',H.uidref(),H.IDLNK);
   {? (_cmp & (1+H.IDMOD)<>'_') | (~_cmp & (1+H.IDMOD)='_')
:     Jeżeli (załączniki bz i rekord zmienione) lub (załączniki zmienione i rekord bz),
:     to wymuszenie wykonania wyzwalacza, który ustali status rekordu.
   || H.put()
   ?}
?}


\h_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla szczegółowe dane o przebiegu zatrudnienia.
::  OLD: \disp_h/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
_red:=H.win_edit('?');
H.win_edit(_wnd:=exec('h_mk_edit','!pkd_ezk_rpza',1));
exec('h_efld_opt','pracownik','*',H,_wnd);
H.memo_get(,'INNE');

:: Wyświetlenie informacji o odelegowaniu do pracy za granicą
Cntx.psh(P,H_ODDE,OSOBA);
H_ODDE.use('h_odde'+(H.name()+1));
H_ODDE.index('HOD');
H_ODDE.prefix(H.ref());
exec('acces2fld_h_odde','oddelegowanie',H,_wnd,H_ODDE.first());
VAR_EDIT.NAZWISKO:=H_ODDE.P_ZAST().OSOBA().NAZWISKO;
VAR_EDIT.PIERWSZE:=OSOBA.PIERWSZE;

H.display();
Cntx.pop(P,H_ODDE,OSOBA);
P.seek(REF.P,);
H.win_edit(_red)


\h_wer_pt_rb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rekord przed okienka "poczekalni" przebiegów (okienko WER_PT tabeli H)
::   WE: _a [NUMBER] - Rekord bieżący? [0 - nie / 1 - tak]
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? (1+H.IDMOD)='P' || Color.fnd_kol('H_UM_H#01#01')
|? (1+H.IDMOD)='D' || Color.fnd_kol('H_UM_H#01#02')
?}


\h_wer_pt_lb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyświetla legendę dla "poczekalni" przebiegów (okienko WER_PT tabeli H)
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','H_UM_H#01')


\h_merge_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zatwierdza bieżącą modyfikację przebiegu zatrudnienia.
::----------------------------------------------------------------------------------------------------------------------
exec('h_merge_one','pracownik')


\h_cancel_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wycofuje bieżącą modyfikację przebiegu zatrudnienia.
::----------------------------------------------------------------------------------------------------------------------
exec('h_cancel_one','pracownik')


\compare
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Porównuje "brudnopis" z zapisami docelowymi.
::   WY: 1 - zgodność, 0 - wykryto różnice
::----------------------------------------------------------------------------------------------------------------------
_u_tmp:=exec('H_UM','buffer');
_u_org:=exec('H_UM','buffer');

_h_tmp:=exec('H','buffer');
_h_org:=exec('H','buffer');

_dif:=0;
H.cntx_psh();
H.use('_his_');
H.index('HISTUM');
H_UM.cntx_psh();
exec('otworz_h_um','pracownik','h_u_');
H_UM.index('OD');
H_UM.prefix(P.ref());
_loop:=H_UM.first();
{!
|? _loop
|! _del:=0;
   {? (1+H_UM.IDMOD)<>'D'
   || _u_tmp.get();
      _mod:=0;
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik','h_um');
      H_UM.prefix();
      {? H_UM.seek(_u_tmp.IDLNK)
      || _u_org.get();
         {? ~exec('compare','#table',_u_org,_u_tmp,1,'Ref','IDADD','IDPUT','IDMOD','IDLNK')
         || _dif+=1;
            _mod:=1
         ?}
      || _del:=1
      ?};
      H_UM.cntx_pop();
      exec('otworz_h_um','pracownik');
      {? _mod<>0
      || H_UM.IDMOD:='P'+(H_UM.IDMOD+1);
         H_UM.put()
      || {? (1+H_UM.IDMOD)='P'
         || H_UM.IDMOD:='_'+(H_UM.IDMOD+1);
            H_UM.put()
         ?}
      ?}
   ?};
   _loop:={? _del || H_UM.del(,1) || H_UM.next() ?}
!};
H_UM.cntx_pop();
H.cntx_pop();
exec('otworz_h_um','pracownik');

_dif<>0


\diff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła wyświetla różnice w wartościach pól dla wskazanych rekordów.
::   WE: _a - Wskazanie rekordu docelowego.
::       _b - Wskazanie rekordu tymczasowego.
::       _c - Lista (oddzielona przecinkami) akronimów pól, które nie będą porównywane.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: !!! Czy _a/_b są poprawnym uidref-em?
{? ~(var_pres('_a')=type_of('') & +_a=48 & var_pres('_b')=type_of('') & +_b=48)
|| FUN.error('Niepoprawne parametry wywołania.'@);
   return()
?};
_skip:={? var_pres('_c')=type_of('') || ','+_c+',' || '' ?};

: Pola  ----------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(2,
   'LP','INTEGER','Lp.',
   'AKRONIM','STRING[8]','Akronim',
   'NAZWA','STRING[60]','Nazwa',
   'VP','INTEGER','Typ',
   'WS1','STRING[255]','Obecna',
   'WS2','STRING[255]','Planowana',
   'WM1','SYS_MEMO','Obecna',
   'WM2','SYS_MEMO','Planowana',
   'EQ','INTEGER','Brak różnic'
);

_WARTOSC:=exec('diff_tab','!pkd_ezk_rpza',_a,_b,_skip,_TAB);

_WARTOSC.f_set('LP',,'EQ=0');
_WARTOSC.f_first();

_wsw:=_WARTOSC.mk_sel('Pola'@,'N',,'#diffws',,,10,,'U');
_WARTOSC.win_fld(_wsw,,'NAZWA',,,25,,,'Nazwa'@,,'Nazwa zmienionego pola'@);
_WARTOSC.win_fld(_wsw,,'WS1',,,35,,,'Wartość obecna'@,,'Wartość obecna pola'@);
_WARTOSC.win_fld(_wsw,,'WS2',,,35,,,'Wartość planowana'@,,'Wartość planowana pola'@);
_WARTOSC.win_act(_wsw,,'Szukaj');
_WARTOSC.win_act(_wsw,,'Wyświetl',,,,
   "  _par:=params_get();
      _WARTOSC:=_par.WARTOSC;
      {? _WARTOSC.VP=-1
      || return()
      ?};
      _WARTOSC.win_edit({? _WARTOSC.VP=36 || _par.wew2 || _par.wew1 ?});
      _WARTOSC.display()
   ");

_szer:=80;

_wew1:=_WARTOSC.mk_edit('Zmieniona wartość'@,,'#diffwe1');
_WARTOSC.win_esep(_wew1,'Pole'@);
_WARTOSC.win_efld(_wew1,,'AKRONIM',,,_szer,,,,,'Akronim zmienionego pola'@);
_WARTOSC.win_efld(_wew1,,'NAZWA',,,_szer,,,,,'Nazwa zmienionego pola'@);
_WARTOSC.win_esep(_wew1,'Wartość'@);
_WARTOSC.win_efld(_wew1,,'WS1',,,_szer,,,,,'Wartość obecna pola'@);
_WARTOSC.win_efld(_wew1,,'WS2',,,_szer,,,,,'Wartość planowana pola'@);

_wew2:=_WARTOSC.mk_edit('Zmieniona wartość'@,,'#diffwe1');
_WARTOSC.win_esep(_wew2,'Pole'@);
_WARTOSC.win_efld(_wew2,,'AKRONIM',,,_szer,,,,,'Akronim zmienionego pola'@);
_WARTOSC.win_efld(_wew2,,'NAZWA',,,_szer,,,,,'Nazwa zmienionego pola'@);
_WARTOSC.win_esep(_wew2,'Wartość'@);
_WARTOSC.win_efld(_wew2,,'WM1',,,_szer,-4,,,,'Wartość obecna pola'@);
_WARTOSC.win_efld(_wew2,,'WM2',,,_szer,-4,,,,'Wartość planowana pola'@);

: Załączniki  ----------------------------------------------------------------------------------------------------------
_ret:=exec('compare','zalacz',_a,_b,1);
_ZALACZ:=_ret.TAB;
_ZALACZ.f_set('ZAL_NAME',,'STK<>3');
_ZALACZ.f_first();

_wsz:=_ZALACZ.mk_sel('Załączniki'@,'T',,'#ezk_com_zal',,,3,,'U');
_ZALACZ.win_fld(_wsz,,'ZAL_NAME',,,16,,,'Nazwa pliku'@,,'Nazwa pliku'@);
_ZALACZ.win_fld(_wsz,,'MOD_DATE',,,-10,,,'Data modyfikacji'@,,'Data modyfikacji pliku'@);
_ZALACZ.win_fld(_wsz,,'MOD_TIME',,,-8,,,'Czas modyfikacji'@,,'Czas modyfikacji pliku'@);
_ZALACZ.win_fld(_wsz,,'SIZE',,,10,,,'Rozmiar'@,,'Rozmiar pliku'@);
_ZALACZ.win_fld(_wsz,,'TYP_ZALO',,,40,,,'Typ załącznika'@,,'Typ załącznika'@);
_ZALACZ.win_fld(_wsz,,'STO',,,10,,,'Status'@,,'Status pliku'@);
_ZALACZ.win_act(_wsz,,'Formuła','Otwórz'@@,,'Otworzenie załącznika'@,
   "  _ZALACZ:=params_get().ZALACZ;
      _ref:=($('_a.Z'+$_ZALACZ.STK))(_ZALACZ);
      ZALACZ.cntx_psh();
      ZALACZ.prefix();
      {? ZALACZ.seek(_ref)
      || exec('bl_view','#blob',ZALACZ,'ZAL')
      ?};
      ZALACZ.cntx_pop()
   ",,,,,,'O');
_ZALACZ.win_btn(_wsz,'text='+'Otwórz'@+',btn_label_align=center,panel=right,align=begin','menu:O');
_ZALACZ.win_act(_wsz,,'Szukaj');
_ZALACZ.win_act(_wsz,,'Kolejność');

_szer:=80;

_wez:=_ZALACZ.mk_edit('Załącznik'@,,'#diffze');
_ZALACZ.win_esep(_wez,'Plik'@);
_ZALACZ.win_efld(_wez,,'ZAL_NAME',,,_szer,,,'Nazwa'@,,'Nazwa pliku'@);
_ZALACZ.win_efld(_wez,,'MOD_DATE',,,10,,,'Data modyfikacji'@,,'Data modyfikacji pliku'@);
_ZALACZ.win_efld(_wez,,'MOD_TIME',,,12,,,'Czas modyfikacji'@,,'Czas modyfikacji pliku'@);
_ZALACZ.win_efld(_wez,,'SIZE',,,12,,,'Rozmiar'@,,'Rozmiar pliku'@);
_ZALACZ.win_esep(_wez,'Załącznik'@);
_ZALACZ.win_efld(_wez,,'DATA',,,12,,,'Data'@,,'Data załącznika'@);
_ZALACZ.win_efld(_wez,,'TYP_ZALO',,,_szer,,,'Typ'@,,'Typ załącznika'@);
_ZALACZ.win_efld(_wez,,'LOK',,,_szer,,,'Opis'@,,'Opis ząłacznika'@);
_ZALACZ.win_esep(_wez,'Dostępność na portalu'@);
_ZALACZ.win_efld(_wez,,'WWWE',,,,,,'Dostępny dla pracownika'@,,'Czy załącznik dostępny na portalu'@,'check-box',,
   "'T'","'N'");
_ZALACZ.win_efld(_wez,,'WWWS',,,,,,'Dostępny dla przełożonego'@,,'Czy załącznik dostępny na portalu'@,'check-box',,
   "'T'","'N'");
_ZALACZ.win_edit(_wez);

:: Okno z oddelegowaniami ----------------------------------------------------------------------------------------------
{? ref_name(_b)='_his_' & H.ODDEL='T'
|| H.cntx_psh();
   {? H.seek(_b,,1)
   || H_ODDE.cntx_psh();
      H_ODDE.use('h_odde_');
      H_ODDE.index('HOD');
      H_ODDE.prefix(H.ref());
      _size:=H_ODDE.size();

      {? _size
      || _tab:=obj_new(_size);
         _wso:=obj_new(_size);
         _tyt:=obj_new(_size);

         {? H_ODDE.first()
         || _ii:=0;
:: Przygotowanie tabel i okien do każdego oddelegowania wprowadzonego dla przebiegu zatrudnienia.
            {!
            |? _ii+=1;
               {? var_pres('_TAB')>100 || &_TAB ?};
               _TAB:=tab_tmp(2,
                  'LP','INTEGER','Lp.',
                  'AKRONIM','STRING[8]','Akronim',
                  'NAZWA','STRING[60]','Nazwa',
                  'VP','INTEGER','Typ',
                  'WS1','STRING[255]','Obecna',
                  'WS2','STRING[255]','Planowana',
                  'WM1','SYS_MEMO','Obecna',
                  'WM2','SYS_MEMO','Planowana',
                  'EQ','INTEGER','Brak różnic'
               );

               {? +H_ODDE.IDLINK
               || _tab[_ii]:=exec('diff_tab','!pkd_ezk_rpza',H_ODDE.IDLINK,H_ODDE.uidref(),
                     ',H,IDADD,IDPUT,IDLINK,',_TAB)
               || _TAB.LP:=1;
                  _TAB.NAZWA:='Oddelegowanie';
                  _TAB.WS1:='Przygotowane';
                  _TAB.WS2:='';
                  _TAB.EQ:=0;
                  _TAB.add();
                  _tab[_ii]:=_TAB
               ?};
               _tab[_ii].f_set('LP',,'EQ=0');
               _tab[_ii].f_first();

               _wso[_ii]:=_tab[_ii].mk_sel('Oddelegowania'@,'N',,'#ezk_odd_'+$_ii,,,8,,'U');
               _tab[_ii].win_fld(_wso[_ii],,'NAZWA',,,25,,,'Nazwa'@,,'Nazwa zmienionego pola'@);
               _tab[_ii].win_fld(_wso[_ii],,'WS1',,,35,,,'Wartość obecna'@,,'Wartość obecna pola'@);
               _tab[_ii].win_fld(_wso[_ii],,'WS2',,,35,,,'Wartość planowana'@,,'Wartość planowana pola'@);
               _tyt[_ii]:=H_ODDE.KRAJ().NAZ+' od '+H_ODDE.O_OD$1;
               H_ODDE.next()
            !}
         ?}
      ?};
      H_ODDE.cntx_pop()
   ?};
   H.cntx_pop()
?};

: Okno grupowe  --------------------------------------------------------------------------------------------------------
_mode:='maximized_with_title';
_grp:=_WARTOSC.grp_make('Różnice'@,
   "  _par:=params_get();
      grp_disp(_par.ZALACZ,_par.wsz);
      {? var_pres('tab',_par)>100
      || {! _ii:=1 .. obj_len(_par.tab)
         |! grp_disp(_par.tab[_ii],_par.wso[_ii])
         !}
      ?}
   ",'#diffgrp',,,,,'normal');
_WARTOSC.grp_sel(_grp,_WARTOSC,_wsw,,,,,18,,,,,_mode);
_WARTOSC.grp_splt(_grp,,'horizontal','zalacz');
_WARTOSC.grp_sel(_grp,_ZALACZ,_wsz,,,,,5,,,,,_mode);
:: Okno z zakładkami do wyświetlenia różnic w oddelegowaniach
{? var_pres('_tab')>100
|| _WARTOSC.grp_splt(_grp,,'horizontal','oddelegowania');
   {! _ii:=1 .. _size
   |! _WARTOSC.grp_sel(_grp,_tab[_ii],_wso[_ii],_tyt[_ii],,,,5,,,,,_mode)
   !}
?};

_WARTOSC.win_sel(_grp);

{? var_pres('_tab')>100
|| params_set('WARTOSC',_WARTOSC,'wew1',_wew1,'wew2',_wew2,'ZALACZ',_ZALACZ,'wsz',_wsz,'tab',_tab,'wso',_wso)
|| params_set('WARTOSC',_WARTOSC,'wew1',_wew1,'wew2',_wew2,'ZALACZ',_ZALACZ,'wsz',_wsz)
?};

_WARTOSC.select();
~~


\diff_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [18.42]
:: OPIS: Funkcja do porównania wartości w podanych tabelach pomiędzy wersja tymczasową i docelową.
::   WE: _a - Wskazanie rekordu docelowego.
::       _b - Wskazanie rekordu tymczasowego.
::       _c - Lista (oddzielona przecinkami) akronimów pól, które nie będą porównywane.
::       _d - Tabela, do której zapisywane są dane z porównania.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_WARTOSC:=_d;

{! _lpr:=1 .. 2
|! _ref:=_[_lpr];
   _TAB:=ref_tab(_ref);
   _name:=ref_name(_ref);

   _TAB.cntx_psh();
   {? _TAB.name()<>_name
   || _TAB.use(_name)
   ?};
   _TAB.prefix();
   {? _TAB.seek(_ref)
   || {! _lpf:=1 .. _TAB.fld_num()
      |! _acr:=_TAB.fld_acr(_lpf);
         {? _c*(','+_acr+',')=0
         || {? _WARTOSC.find_key(_lpf,_acr)
            || _WARTOSC.memo_get(,'WM1',0);
               _WARTOSC.memo_get(,'WM2',0);
               _new:=0
            || _WARTOSC.blank();
               _WARTOSC.memo_set(,'WM1');
               _WARTOSC.memo_set(,'WM2');
               _WARTOSC.LP:=_lpf;
               _WARTOSC.AKRONIM:=_acr;
               _WARTOSC.NAZWA:=_TAB.fld_name(_lpf);
               _WARTOSC.VP:=var_pres(_acr,_TAB);
               _new:=1
            ?};
            _val:=($('_a.'+_acr))(_TAB);
            _sval:=
               {? _WARTOSC.VP=26
               || exec('record','#to_string',_val)
               |? _WARTOSC.VP=36
               || _WARTOSC.memo_set(_TAB.memo_get('r',_acr,0),'WM'+$_lpr);
                  gsub(_TAB.memo_txt(,1,_acr),'\n',' ')
               |? type_of(_val)=type_of('')
               || _val
               || $_val
               ?};
            ($('_a.WS'+$_lpr+':=_b'))(_WARTOSC,_sval);
            {? _new
            || _WARTOSC.add()
            || {? _WARTOSC.VP=36
               || _hash:=obj_new(2);
                  {! _lpm:=1 .. 2
                  |! _hash[_lpm]:=~~;
                     _fh:=_WARTOSC.memo_get('r','WM'+$_lpm,1);
                     {? _fh.is_open()
                     || _hash[_lpm]:=hash(_fh,'sha1');
                        _fh.fclose()
                     ?};
                     obj_del(_fh);
                     &_fh
                  !};
                  _WARTOSC.EQ:=_hash[1]=_hash[2];
                  obj_del(_hash)
               || _WARTOSC.EQ:=_WARTOSC.WS1=_WARTOSC.WS2
               ?};
               _WARTOSC.put()
            ?};
            {? _WARTOSC.VP=36
            || _WARTOSC.memo_put(,'WM'+$_lpr)
            ?}
         ?}
      !}
   ?};
   _TAB.cntx_pop();
   obj_del(_TAB);
   ~~
!};
_WARTOSC


\h_um_diff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Różnice" dla tabeli H_UM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('diff','!pkd_ezk_rpza',H_UM.IDLNK,H_UM.uidref(),'P,IDADD,IDPUT,IDLNK,IDMOD')


\h_diff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Różnice" dla tabeli H.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('diff','!pkd_ezk_rpza',H.IDLNK,H.uidref(),'P,UMOWA,IDADD,IDPUT,IDLNK,IDMOD')


\h_poprz_obj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Tworzy obiekt do przechowywania poprzednich wartości H (na potrzeby podpowiadania podpowiadania)
::   WE:
::   WY: _poprz [OBJ] - tablica elementów nazwanych
::----------------------------------------------------------------------------------------------------------------------
_poprz:=obj_new('write','read','S1','RWYL','RWYM','RWY','INNE','MAC','WYL','WYM','WY','KA','KADOD','CZYWAL','CZYWAL2',
                'CZYWAL3','S2','S3','S2T','S2P','S3T','S3P','WAL','ZWAL','DOP_NADG','DOP_ST','CZY_NADG','PAT','PAW',
                'S4','CZYWAL4');
_poprz.S1:=_poprz.S2:=_poprz.S3:=_poprz.DOP_NADG:=_poprz.DOP_ST:=_poprz.PAW:=_poprz.S4:=0;
_poprz.RWYL:=_poprz.RWYM:=_poprz.WYL:=_poprz.WYM:=1;
_poprz.RWY:=_poprz.WY:=1.0;
_poprz.INNE:=_poprz.KA:=_poprz.KADOD:=_poprz.S2T:=_poprz.S3T:='';
_poprz.MAC:=_poprz.CZYWAL:=_poprz.CZYWAL2:=_poprz.CZYWAL3:=_poprz.CZY_NADG:=_poprz.PAT:=_poprz.CZYWAL4:='N';
_poprz.S2P:=_poprz.S3P:=_poprz.WAL:=_poprz.ZWAL:=null();
_poprz.write:=
   ".S1:=H.S1;
    .RWYL:=H.RWYL;
    .RWYM:=H.RWYM;
    .RWY:=H.RWY;
    .INNE:=H.memo_txt(,1,'INNE');
    .MAC:=H.MAC;
    .WYL:=H.WYL;
    .WYM:=H.WYM;
    .WY:=H.WY;
    .KA:=H.KA;
    .KADOD:=H.KADOD;
    .CZYWAL:=H.CZYWAL;
    .CZYWAL2:=H.CZYWAL2;
    .CZYWAL3:=H.CZYWAL3;
    .S2:=H.S2;
    .S3:=H.S3;
    .S2T:=H.S2T;
    .S2P:=H.S2P;
    .S3T:=H.S3T;
    .S3P:=H.S3P;
    .WAL:=H.WAL;
    .ZWAL:=H.ZWAL;
    .DOP_NADG:=H.DOP_NADG;
    .DOP_ST:=H.DOP_ST;
    .CZY_NADG:=H.CZY_NADG;
    .PAT:=H.PAT;
    .PAW:=H.PAW;
    .S4:=H.S4;
    .CZYWAL4:=H.CZYWAL4
   ";
_poprz.read:=
   "H.S1:=.S1;
    H.RWYL:=.RWYL;
    H.RWYM:=.RWYM;
    H.RWY:=.RWY;
    H.memo_set(.INNE,'INNE');
    H.MAC:=.MAC;
    H.WYL:=.WYL;
    H.WYM:=.WYM;
    H.WY:=.WY;
    H.KA:=.KA;
    H.KADOD:=.KADOD;
    H.CZYWAL:=.CZYWAL;
    H.CZYWAL2:=.CZYWAL2;
    H.CZYWAL3:=.CZYWAL3;
    H.S2:=.S2;
    H.S3:=.S3;
    H.S2T:=.S2T;
    H.S2P:=.S2P;
    H.S3T:=.S3T;
    H.S3P:=.S3P;
    H.WAL:=.WAL;
    H.ZWAL:=.ZWAL;
    H.DOP_NADG:=.DOP_NADG;
    H.DOP_ST:=.DOP_ST;
    H.CZY_NADG:=.CZY_NADG;
    H.PAT:=.PAT;
    H.PAW:=.PAW;
    H.S4:=.S4;
    H.CZYWAL4:=.CZYWAL4
   ";

_poprz

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:25 21f548315d11d067bdd4323192e269d93796982340215685222b05e056292d845ad83f025b08b8f0fae5c663f4e8ee262d62dc03d1e9d612e0ca0e2b1fb46ab151c8b095459f92ec25c2421e1767ca81297ffe87b7745b55323441d9427d5b1b16c07935d5f9baf0b39bd03b0a4855ca42950caa99a079e21765540707a93643
