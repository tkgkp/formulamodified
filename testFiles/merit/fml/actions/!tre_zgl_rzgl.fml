:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_zgl_rzgl.fml
:: Utworzony: 19.03.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_ZGL_RZGL - Realizacja zgłoszenia rem.
::            Uwaga: rewizja 32786 zawiera formuły: \action_send, \aktualizuj, \podz_godz, \error
::                   będące prototypem funkcji przesłania danych robocizny do płac
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła główna czynności TRE_ZGL_RZGL - Realizacja zgłoszenia rem.
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;

params_set(params_get());

::# permissions=ODDZ,F_ZATR,UD_SKL
::# access=exec('access','!tre_zgl_rzgl')

::# kind=WE, symbol=REM_ZGL, type=_REM_ZGL, name=Zgłoszenie remontowe, required=T, keyref=T
{? var_pres('REM_ZGL',_in)<>type_of(~~) & var_pres('REM_ZGL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['REM_ZGL','TRE_ZGL_RZGL'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('REM_ZGL',_in)=type_of(~~) || _in.REM_ZGL:=null() ?};

_result:=0;
_clean_result:=params_exec('clean','!tre_zgl_rzgl');
_can_continue:=_clean_result.RESULT;
_rem_zgl:=_clean_result.REM_ZGL;

REM_ZGL.cntx_psh();
REM_ZGL.prefix();

{? _can_continue>0 & _rem_zgl<>null()
|| _can_continue:=REM_ZGL.seek(_rem_zgl)
|| _can_continue:=0
?};

{? _can_continue>0
||
::   {? _mp.akcja()='ZAKOŃCZ'
::   || {? FUN.ask('Czy zakończyć realizację zgłoszenia remontowego %1?'@[REM_ZGL.SYM])
::      || REM_ZGL.STAT_REJ:=exec('status_completed','remonty_zgloszenia');
::         {? REM_ZGL.put()
::         || _mp.done()
::         ?}
::      ?}

   {? _mp.akcja()='REALIZUJ' | _mp.pathTodo()
   ||
::    W przypadku uruchomienia z obszaru roboczego wydział i okres przejmowany jest z bieżącego kontekstu pracy
      {? _mp.pathArea()
      || _args:=__PARSES.args('OkresRok');
         _args.OBSZAR:='LMG';
         _args.AR:=_context.AR;
         _args.AM:=_context.AM;
         __PARSES.setVal('OkresRok',_args);
         __PARSES.setVal('WydzialProd',_context.WYD)
::    W przypadku uruchomienia z listy zadań wydział i okres przejmowany jest z parametrów sesji
      |? _mp.pathTodo()
      || ~~
      ?};
      REM_ZGL.USR_REA:=OPERATOR.USER;
      REM_ZGL.DT_REA:=date();
      REM_ZGL.TM_REA:=time();
      REM_ZGL.win_edit('RED_REA');
      REM_ZGL.hdr_edit('Zgłoszenie remontowe — realizacja'@);
      REM_ZGL.memo_get(,'ROPIS',0);
      REM_ZGL.memo_get(,'OPIS');
      {? REM_ZGL.edit("exec('verify','!tre_zgl_rzgl')")
      || {? REM_ZGL.put()
         || REM_ZGL.memo_put(,'ROPIS')
         ?}
      ?};
      {? REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
      ||
::       Oznaczam wykonanie dla planu operacyjnego
         exec('set_wyk','po_event',REM_ZGL.uidref(),'T');
::    Jeżeli zgłoszenia z portalu to zmiana statusu na edokumie
      {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia')
         & REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
      || exec('edokum_update','remonty_zgloszenia',REM_ZGL.ref())
      ?};
         _mp.done()
      ?};
      ~~
::      exec('select','!tre_zgl_rzgl',REM_ZGL.ref())
   ?}
?};
REM_ZGL.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Opis dla czynności realizacji zgłoszenia remontowego (TRE_ZGL_RZGL)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiedniego REM_ZGL
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,"REM_ZGL.SYM",'');
   _desc:={? _tmp<>'' || 'Zrealizuj zgłoszenie remontowe: %1'@@[_tmp] || '' ?};
::|| _desc:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,
::      "'Zrealizuj zgłoszenie remontowe: %1'[REM_ZGL.SYM]",'');
:: Ustawianie deadline
   exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,"
      _mp:=_b;
      {? REM_ZGL.DT_PUA<>date(0,0,0)
      || _mp.set_deadline(REM_ZGL.DT_PUA,REM_ZGL.TM_PUA)
      || _mp.set_deadline(REM_ZGL.DT_PST,REM_ZGL.TM_PST)
      ?}
   ",0,_mp);
   ~~
|| _desc:='Zrealizuj nowe zgłoszenie remontowe'@@
?};
_desc


\access
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Formuła ograniczajaca uprawnienia do czynności
::       Sprawdza czy dany użytkownik jest opiekunem zasobu
::       startowego danego obiektu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;

{? var_pres('REM_ZGL',_in)=type_of(~~) || _in.REM_ZGL:=null() ?};

_rem_zgl:=null();
{? _in.REM_ZGL<>null()
|| _rem_zgl:=_in.REM_ZGL
?};

_result:=0;
{? _rem_zgl<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.cntx_psh();
   REM_ZGL.prefix();
   {? REM_ZGL.seek(_rem_zgl)
   || _default:=1;
::    Zmienna _default - czy iść ścieżka domyślną, nieportalową (sprawdzać wg opiekunów)
::    Jak zgłoszenie z portalu to przypisuje zadanie osobie wskazanej do realizacji(o ile została podana)
      {? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
         & (_prac:=exec('FindAndGet','#table',EDOKUM,REM_ZGL.REDOKUM,,
                  " _res:='';
                     EDOK_ATR.cntx_psh();
                     EDOK_ATR.use('edokat'+(ref_name(ref())+2));
                     _res:=exec('atr_get','portal_walidacja','OsobaRealizujaca','WAR');
                     EDOK_ATR.cntx_pop();
                     _res
                  ",''))<>''
      ||
::       Sprawdzam czy podany w dokumencie pracownik jest aktualnie przetwarzanym użytkownikiem
         _default:=0;
         _ref:=exec('get_id_erp','portal_core','PORTAL_P_ID',#_prac);
         P.cntx_psh();
         P.clear();
         {? P.seek(_ref,ref_name(_ref))
         || USERS.cntx_psh();
            USERS.clear();
            USERS.index('OSOBA');
            USERS.prefix(P.OSOBA);
            {? USERS.first
            || _result:=USERS.ref=_user
            ?};
            USERS.cntx_pop()
         ?};
         P.cntx_pop()
::    Jak zgłoszenie z portalu i nie przypisany konkretny realizujący to sprawdzam czy użytkownik znajduje się na liście
::    przypisanych osób realizujących (jeżeli wypełniona tabela WAOR)
      |? REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia') & REM_ZGL.REDOKUM<>''
      || _katg:=REM_ZGL.REM_KATG;
         _typ:=exec('FindAndGet','#table',EDOKUM,REM_ZGL.REDOKUM,,"TYP",null());
         WAOR.cntx_psh();
         WAOR.index('TYP_KAT');
         WAOR.prefix(_typ,_katg);
         {? WAOR.first()
         || _default:=0;
            _result:=WAOR.find_tab(,'USERS',,'=',_user)
         ?};
         WAOR.cntx_pop()
      ?};
::    Jak zgłoszenie nie pochodzi z portalu lub nie wypełniona tabela WAOR to sprawdzam opiekunów
      {? _default>0
      || {? REM_ZGL.REM_ZAS<>null()
         || REM_ZGL.REM_ZAS();
            _result:=exec('chk_opiekun','zasoby',_user,)
         ||
::       Jeżeli zgłoszenie nie ma zasobu to zawsze zwracamy 1 żeby tu się nie powiesiło
            _result:=1
         ?}
      ?}
   ?};
   REM_ZGL.cntx_pop();
   REM_ZAS.cntx_pop()
:: Jeżeli nie ma parametru to zawsze zwracamy 1 żeby się tu nie powiesiło
|| _result:=1
?};
_result


\action_complete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Realizuj' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;

{? REM_ZGL.REM_ZAS<>null()
|| REM_ZAS.cntx_psh();
   REM_ZGL.REM_ZAS();
:: Jeżeli zgłoszenie z portalu to pomijam sprawdzanie czy operator jest opiekunem
   _can_continue:=(REM_ZGL.SOURCE=exec('source_portal','remonty_zgloszenia')) |
                   exec('chk_opiekun','zasoby',OPERATOR.USER);
   {? _can_continue=0
   || _what:=exec('REM_ZAS','#to_string');
      _choice:=FUN.emsg(
         'Zasób: %1 posiada opiekunów. Tylko oni mogą realizować zgłoszenia remontowe dotyczące tego zasobu.'@[_what],,
         'Opiekunowie'@
      );
      {? _choice>0
      || exec('rem_kato_select','zasoby',REM_ZAS.KAT)
      ?}
   ?};
   REM_ZAS.cntx_pop()
?};

{? _can_continue>0
||
   {? REM_ZGL.STAT_REJ=exec('status_verified','remonty_zgloszenia')
   || _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TRE_ZGL_RZGL';
      _args.UIDREF:=REM_ZGL.uidref();
      _args.AKCJA:='REALIZUJ';
      _args.PROC_START:='N';
      _args.CONTEXT:=obj_new('REM_ZGL','WYD','AR','AM');
         _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
         _args.CONTEXT.WYD:=ST.WYD;
         _args.CONTEXT.AR:=ST.AR;
         _args.CONTEXT.AM:=ST.AM;

      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

      exec('mp_run','#b__box',_args);

      {? params_get().env_rem_zgl.FILTER='R'
         & REM_ZGL.get() & REM_ZGL.STAT_REJ<>exec('status_verified','remonty_zgloszenia')
      || REM_ZGL.f_del()
      ?}

:: Gdy stan inny niż 'Zweryfikowane' komunikat
   || FUN.emsg(
         'Tylko zgłoszenia o statusie: \'%1\' mogą być realizowane.'@[exec('status_verified','remonty_zgloszenia',1)]
      )
   ?}
?};
~~


\action_complete_view
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Akcja 'Podgląd realizacji' w zgłoszeniach remontowych
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
exec('select_real','remonty_zgloszenia',REM_ZGL.ref());
~~


\action_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Zakończ' w oknie realizacji zgłoszenia remontowego
::----------------------------------------------------------------------------------------------------------------------
REM_ZGL.STAT_REJ:=exec('status_completed','remonty_zgloszenia');
'key:F2'


::======================================================================================================================
:: REM_GRG - Rozliczenie zgłoszeń remontowych - rejestracja godzin pracowników
::======================================================================================================================


\rem_grg_fld_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wartość początkowa pól w tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_result:=~~;
{? _afld='R'
|| _result:=null();
   R.cntx_psh();
   R.index('RUBKOD');
:: Ustalić numer i wartość domyślną parametru
::   R.prefix(exec('get','#params',500603,1));
   R.prefix(54);
   {? R.first() || _result:=R.ref() ?};
   R.cntx_pop()
?};
_result


\rem_grg_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed redakcją pól w tabeli REM_RGR
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_result:=1;
{? _afld='R'
|| _result:=1
?};
_result


\rem_grg_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed wyświetleniem pól w tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_result:=1;
{? _afld='R'
|| _result:=1
?};
_result


\rem_grg_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Format wyświetlania pól w tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_format:='';
{? _afld='IL'
|| _format:='out_prec=4'
?};
_format


\rem_grg_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Format redagowania pól w tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_format:='';
{? _afld='IL'
|| _format:='in_prec=4'
?};
_format


\rem_grg_action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz' w oknie REM_GRG
::   WE: [_a] - czy tryb automatyczny (bez wyświetlania okna redakcji)
::       [_b] - gdy _a=1: P.ref() - pracownik, dla któego rejestrowana są godziny
::       [_c] - gdy _a=1: REAL - ilość do zarejestowania
::       [_d] - gdy _a=1: REM_CZYU.ref() - rejestrowana czynnośc
::----------------------------------------------------------------------------------------------------------------------
_is_auto:={? var_pres('_a')=type_of(0) || _a || 0 ?};
{? _is_auto>0
|| _pracownik:={? var_pres('_b')=type_of(null()) || _b || null() ?}
|| _pracownik:=exec('p_select','tre')
?};
{? _pracownik<>null()
|| _ok:=1;
   _ilosc:={? var_pres('_c')=type_of(0) || _c || 0 ?};
   _czynn:={? var_pres('_d')=type_of(null()) || _d || null() ?};
   REM_GRG.win_edit('RED');
   REM_GRG.blank();
::   VAR.REM_CZYU:='';
   REM_GRG.REM_CZYU:=_czynn;
   REM_GRG.REM_CZYU();
   REM_GRG.memo_set('','UWAGI');
::   VAR.REM_OPIS:='';
   REM_GRG.REM_ZGL:=REM_ZGL.ref();
   REM_GRG.AR:=ST.AR;
   REM_GRG.AM:=ST.AM;
   REM_GRG.DT:=date();
   REM_GRG.P:=_pracownik;
   REM_GRG.P();
   REM_GRG.IL:=_ilosc;
   {? _is_auto>0
   || _valid:=exec('chk_rem_grg','!tre_zgl_rzgl',0,1);
      _ok:=_valid=''
   ?};
   {? (_is_auto>0 & _ok>0 ) | (_is_auto=0 & REM_GRG.edit("exec('chk_rem_grg','!tre_zgl_rzgl',0)"))
   ||
      {? REM_GRG.add()
      || {? REM_GRG.REM_CZYU<>null() & REM_GRG.REM_CZYU().WYK<>'T'
            & FUN.ask('Czy oznaczyć wybraną czynność (%1) jako wykonaną?'@[REM_CZYU.REM_CZYN().KOD])
         ||
::          Uzupełniam dane na czynności
            REM_CZYU.cntx_psh();
            REM_CZYU.index('REM_CZYN');
            REM_CZYU.prefix();
            {? REM_CZYU.seek(REM_GRG.REM_CZYU)
            || REM_CZYU.WYK:='T';
               REM_CZYU.DW:=REM_GRG.DT;
               {? VEK.TERM='T' || REM_CZYU.GW:=time() ?};
               REM_CZYU.P:=REM_GRG.P;
               REM_CZYU.USER:=OPERATOR.USER;
::            REM_CZYU.OPIS:=VAR.REM_OPIS;
               REM_CZYU.put()
            ?};
            REM_CZYU.cntx_pop()
         ?};
         {? VEK.TERM='T'
         || FUN.info('Pomyślnie zarejestrowano wykonanie do czynności %1.'@[REM_CZYU.REM_CZYN().KOD])
         ?}
      ?};
      REM_GRG.memo_put(,'UWAGI')
   ?}
?};
~~


\rem_grg_action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Popraw' w oknie REM_GRG
::----------------------------------------------------------------------------------------------------------------------
REM_GRG.win_edit('RED');
REM_GRG.P();
REM_GRG.REM_CZYU();
:: zapisuje stary ref REM_CZYU
_ref:=REM_GRG.REM_CZYU;
REM_GRG.memo_get('','UWAGI');
{? REM_GRG.edit("exec('chk_rem_grg','!tre_zgl_rzgl',1)")
||
   {? REM_GRG.put() & REM_GRG.REM_CZYU<>_ref & REM_GRG.REM_CZYU<>null() & REM_GRG.REM_CZYU().WYK<>'T'
      & FUN.ask('Czy oznaczyć wybraną czynność (%1) jako wykonaną?'@[REM_CZYU.REM_CZYN().KOD])
   ||
::    Uzupełniam dane na czynności
      REM_CZYU.cntx_psh();
      REM_CZYU.index('REM_CZYN');
      REM_CZYU.prefix();
      {? REM_CZYU.seek(REM_GRG.REM_CZYU)
      || REM_CZYU.WYK:='T';
         REM_CZYU.DW:=REM_GRG.DT;
         REM_CZYU.P:=REM_GRG.P;
         REM_CZYU.USER:=exec('osoba2user','users',REM_CZYU.P().OSOBA,1);
::         REM_CZYU.OPIS:=VAR.REM_OPIS;
         REM_CZYU.put
      ?};
      REM_CZYU.cntx_pop()
   ?};
   REM_GRG.memo_put(,'UWAGI')
?};
~~


\rem_grg_action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Usuń' w oknie REM_GRG
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć wskazany zapis?'@)
|| _ref:=REM_GRG.REM_CZYU;
   REM_GRG.del();
:: Pytanie o wycofanie powiązanej czynności
   {? _ref<>null()
   || {? REM_CZYU.seek(_ref) & REM_CZYU.WYK='T'
      || {? FUN.ask('Realizacja powiązana z wykonaniem czynności %1. Czy wycofać wykonanie tej czynności?'@[REM_CZYU.REM_CZYN().KOD])
         || REM_CZYU.WYK:='N';
            REM_CZYU.DW:=date(0,0,0);
            REM_CZYU.GW:=time(0,0,0);
            REM_CZYU.P:=null();
            REM_CZYU.USER:=null();
            REM_CZYU.put()
         ?}
      ?}
   ?}

?};
~~


\rem_grg_record_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed rekord dla tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
REM_GRG.P();
~~


\rem_grg_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wyświetl dla tabeli REM_GRG
::----------------------------------------------------------------------------------------------------------------------
REM_GRG.win_edit('RED');
REM_GRG.display();
~~


\chk_rem_grg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_GRG (rozliczenie godzin) - wołana z poziomu okna oraz funkcji importujących
::       (jeśli będzie eksport/import, to przenieść do LIB)
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
{? _chk=''
|| _chk:=__CHK.record(REM_GRG,,'DT','R')
?};
{? _chk=''
|| {? exec('itsPositive','#field',1,,REM_GRG.IL)=0
   || _chk:='IL'
   ?}
?};
_chk


::======================================================================================================================
:: REM_GRM - Rozliczenie zgłoszeń remontowych - pobrania materiałów
::======================================================================================================================


\rem_grm_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Format wyświetlania pól w tabeli REM_GRM
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_format:='';
{? _afld='IL'
|| _format:='out_prec='+$ST.DOKL
?};
_format


\rem_grm_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Format redagowania pól w tabeli REM_GRM
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_format:='';
{? _afld='IL'
|| _format:='in_prec='+{? (2+cur_kwin())='e_' & REM_GRM.M<>null() || $M.DOKL || $ST.DOKL ?}
?};
_format


\rem_grm_action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz' w oknie REM_GRM
::----------------------------------------------------------------------------------------------------------------------
M.f_clear();
REM_GRM.win_edit('RED');
REM_GRM.blank();
REM_GRM.REM_ZGL:=REM_ZGL.ref();
REM_GRM.AR:=ST.AR;
REM_GRM.AM:=ST.AM;
_mg:=ST.MAG;
exec('filtr_mg','!tre_zgl_rzgl');
{? REM_GRM.edit("exec('chk_rem_grm','!tre_zgl_rzgl',0)")
|| REM_GRM.add()
?};
ST.MAG:=_mg;
{? MG.f_active() || MG.f_clear() ?};
~~


\rem_grm_action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Popraw' w oknie REM_GRM
::----------------------------------------------------------------------------------------------------------------------
REM_GRM.win_edit('RED');
exec('filtr_mg','!tre_zgl_rzgl');
{? REM_GRM.edit("exec('chk_rem_grm','!tre_zgl_rzgl',1)")
|| REM_GRM.put()
?};
{? MG.f_active() || MG.f_clear() ?};
~~


\rem_grm_action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Usuń' w oknie REM_GRM
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć wskazany zapis?'@)
|| REM_GRM.del()
?};
~~


\rem_grm_record_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed rekord dla tabeli REM_GRM
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('params_get()')<0
|| REM_GRM.actions_grayed('WER','DPUGISK:D')
?};
~~


\rem_grm_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wyświetl dla tabeli REM_GRM
::----------------------------------------------------------------------------------------------------------------------
REM_GRM.win_edit('RED');
REM_GRM.display();
~~


\chk_rem_grm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_GRM (rozliczenie materiałów) - wołana z poziomu okna oraz funkcji importujących
::       (jeśli będzie eksport/import, to przenieść do LIB)
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
{? _chk=''
|| _chk:=__CHK.record(REM_GRM,,'DT','M')
?};
{? _chk=''
|| {? exec('itsPositive','#field',1,,REM_GRM.IL)=0
   || _chk:='IL'
   ?}
?};
_chk


::======================================================================================================================


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

_can_continue:=1;
_obj:=obj_new('RESULT','REM_ZGL');
_obj.RESULT:=0;
_obj.REM_ZGL:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=REM_ZGL.name()
         || _obj.REM_ZGL:=exec('FindAndGet','#table',REM_ZGL,_kref,,,null());

            {? _obj.REM_ZGL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc robię error
               _can_continue:=0;
               exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp)
            ||
::             Sprawdzenie statusu rejestracji zgłoszenia, jeżeli równy 'completed' lub 'closed', to popychanie
               _stat_completed:=exec('status_completed','remonty_zgloszenia');
               _stat_closed:=exec('status_closed','remonty_zgloszenia');
               _stat_rej:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"STAT_REJ",_stat_completed);
               {? _stat_rej=_stat_completed
               || _can_continue:=0;
                  FUN.info('Realizacja zgłoszenia remontowego została już zakończona.'@);
                  _mp.done()
               |? _stat_rej=_stat_closed
               || _can_continue:=0;
                  FUN.info('Zgłoszenie remontowe zostało już zamknięte.'@);
                  _mp.done()
               ?}
            ?}
         ?}
      ||
::       Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc robię error
         _can_continue:=0;
         exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp)
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy REM_ZGL
   {? _obj.REM_ZGL=null() & var_pres('REM_ZGL',_in)=type_of(null())
   || _obj.REM_ZGL:=_in.REM_ZGL
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj


\select_all_grg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Selekcja wszystkich godzin - wersja tymczasowa do pokazania funkcji przesyłu danych do płac
::----------------------------------------------------------------------------------------------------------------------
REM_GRG.cntx_psh();
REM_GRG.index('OKR');
REM_GRG.prefix();
REM_GRG.win_sel('WER_ALL');
REM_GRG.select();
REM_GRG.cntx_pop();
~~


\verify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [19.42]
:: OPIS: Weryfikacja okienka RED_REA
::   WY: STRING - pole do ktorego wrócić
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='';
_result:=__CHK.record(REM_ZGL,,'DT_REA');

{? _result=''
|| _memo:=REM_ZGL.memo_txt(,0,'ROPIS');
   {? _memo=''
   || _msg:='Należy uzupełnić opis realizacji.'@;
      FUN.emsg(_msg);
      _result:='ROPIS'
   ?}
?};
{? _result='' & REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia')
|| _res_plug:=Plugin.run('REM_ZGL_VALID_F_001');
   {? _res_plug<=0
   || _result:='ROPIS';
      ~~
   ?}
?};
{? _result='' & REM_ZGL.STAT_REJ=exec('status_completed','remonty_zgloszenia') & exec('get','#params',700713,2)='T'
|| {? exec('gen_nd','!tre_zgl_rzgl',1)<>0 || _result:='ROPIS' ?}
?};
:: Sprawdza czy wszystkie czynności zostały wykonane
{? _result=''
|| REM_CZYU.cntx_psh();
   REM_CZYU.index('REM_ZGL');
   REM_CZYU.prefix(REM_ZGL.ref(),'N');
   {? REM_CZYU.first()
   || {? ~(FUN.ask('Zgłoszenie posiada czynności, które nie zostały oznaczone jako wykonane. Czy mimo to zakończyć realizację?'@))
      || _result:='ROPIS'
      ?}
   ?};
   REM_CZYU.cntx_pop()
?};

{? _result<>''
|| REM_ZGL.STAT_REJ:=exec('status_verified','remonty_zgloszenia')
?};
_result


\gen_nd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Generowanie dokumentu magazynowego na podstawie materiałów do realizacji
::   WE: _a - 0/1 dla wszystkich rekordów z nagłówka
::----------------------------------------------------------------------------------------------------------------------
_typy_dok:=exec('get','#params',700712,2);
_zakoncz:={? var_pres('_a')=type_of(1) & _a=1 || 1 || 0?};
{? _typy_dok='' || FUN.info('Brak wypełnionego parametru 700712.'@); return({? _zakoncz || -1 || 0 ?}) ?};
TYPYDOK.cntx_psh();
TYPYDOK.index('TYP');
TYPYDOK.prefix(_typy_dok,);
TYPYDOK.first();
_typy_dok_ref:=TYPYDOK.ref();
_typy_dok_zew:=TYPYDOK.Z;
TYPYDOK.cntx_pop();
{? _typy_dok_zew='T' & REM_ZGL.KH=null()
|| FUN.info('Dla dokumentu zewnętrznego\nwymagane jest wypełnienie kontrahenta na zgłoszeniu.'@);
   return({? _zakoncz || -1 || 0 ?})
?};

{? ~exec('chk_role','#b__box',OPERATOR.USER,'LMG_MAG_DWYD')
|| FUN.info('Brak uprawnień do tworzenia dokumentów magazynowych.'@); return({? _zakoncz || -1 || 0 ?})
?};
exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);

::przygotowanie tymczasowej tabeli _rem_grm
_sel:=REM_GRM.sel_aget();
{? _zakoncz | _sel.size()
||
   _sql:=
   'select REM_GRM.REFERENCE as REF, REM_GRM.M, REM_GRM.IL, REM_GRM.MG, REM_ZGL.KH
   from REM_GRM join REM_ZGL using(REM_GRM.REM_ZGL,REM_ZGL.REFERENCE) where 0=1 order by REM_GRM.MG';
   _rem_grm:=sql(_sql)
?};
REM_ZGL.cntx_psh();
{? _zakoncz & REM_GRM.first()
|| {!|?
      {? REM_GRM.ND='N' & REM_GRM.MG<>null()
      || _rem_grm.REF:=$REM_GRM.ref();
         _rem_grm.M:=$REM_GRM.M;
         _rem_grm.IL:=REM_GRM.IL;
         _rem_grm.MG:=$REM_GRM.MG;
         _rem_grm.KH:=$REM_GRM.REM_ZGL().KH;
         _rem_grm.add()
      ?};
      REM_GRM.next()
   !}
?};

REM_GRM.cntx_psh();
REM_GRM.prefix();
KH.cntx_psh();
KH.prefix();
M.cntx_psh();
ND.cntx_psh();
ND.use('nagdo'+ST.ODDZ+(($(date()~1))+2));
DK.cntx_psh();
DK.use('dokma'+ST.ODDZ+(($(date()~1))+2));
MG.cntx_psh();
MG.prefix();
_ok:=1;
do();
:: ścieżka dla pojedyńczego materiału
{? ~_sel.size() &  REM_GRM.MG<>null() & ~_zakoncz
||
::generowanie nagłówka
   _nd:=exec('gen_nagl','zamsiw_rea',date(),_typy_dok_ref,REM_GRM.MG,REM_ZGL.KH);
   ND.prefix();
   {? ~_nd | ~ND.seek(_nd)
   || exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
      exec('add_kom','#message','Nie udało się wygenerować nagłówka dokumentu magazynowego.'@,2);
      undo();
      _ok:=0
   || exec('add_kom','#message','Dodano dokument magazynowy o symbolu %1.'@[ND.SYM],2)
   ?};
   {? _ok
   ||
::przypisanie dostawy
      exec('sc_tymczas','magazyn_stan',REM_GRM.MG,REM_GRM.M,'T');
      _rdk:=0;
      _ndk:='';
      __sc.cntx_psh();
      __sc.prefix();
      {? __sc.first()
      ||
         {!|?
            {? __sc.S>=REM_GRM.IL & (__sc.WAL='' | __sc.WAL=ND.WAL().KOD)
            || _rdk:=__sc.RDK;
               _ndk:=__sc.NDK
            ?};
            __sc.next() & _rdk=0 & _ndk=''
         !}
      ?};
      __sc.cntx_pop();
      {? ~_rdk
      ||  exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
          exec('add_kom','#message','Nie udało się przypisać dostawy dla materiału %1.'[REM_GRM.M().KTM],2);
          undo();
          _ok:=0
      ||
::generowanie pozycji
         _dk:=exec('gen_pozy','zamsiw_rea',_nd, REM_GRM.M,1, REM_GRM.IL,_rdk,_ndk,0,0,0,null(),0,REM_GRM.M().VAT);
         DK.prefix();
         {? _dk & DK.seek(_dk)
         ||
            DK.REM_GRM:=REM_GRM.ref();
            DK.put();
            REM_GRM.ND:='T';
            REM_GRM.UIDREFDK:=DK.uidref();
            REM_GRM.put();
            exec('add_kom','#message','Dodano pozycję dokumentu magazynowego o indeksie %1 - %2.'@[DK.M().KTM,DK.M().N],2)
         || exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
            exec('add_kom','#message','Problem z wygenerowaniem pozycji dla materiału %1.'[REM_GRM.M().KTM],2);
            undo();
            _ok:=0
         ?}
      ?};
      {? _ok || exec('dk_sum','magdok_wspolne',ND.ref,,1) ?}
   ?}
|? _sel.size() | _rem_grm.size()
||
:: ścieżka dla akcji grupowej oraz dla zakańczania realizacji zgłoszenia
   {? _sel.first()
   || {!|?
         {? REM_GRM.seek(_sel.REF) & REM_GRM.ND='N' & REM_GRM.MG<>null()
         || _rem_grm.REF:=$REM_GRM.ref();
            _rem_grm.M:=$REM_GRM.M;
            _rem_grm.IL:=REM_GRM.IL;
            _rem_grm.MG:=$REM_GRM.MG;
            _rem_grm.KH:=$REM_GRM.REM_ZGL().KH;
            _rem_grm.add()
         ?};
         _sel.next()
      !}
   ?};
   _mg:='';
   {? _rem_grm.first()
   ||
      {!|?
         {? _ok
         ||
            {? _rem_grm.MG<>_mg
            ||
               {? ~MG.seek(_rem_grm.MG)
               || exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
                  exec('add_kom','#message','Problem z odnalezieniem magazynu.'@,2);
                  undo();
                  _ok:=0
               ?};
               {? _ok
               ||
                  _kh:={? KH.seek(_rem_grm.KH) || KH.ref() || null() ?};
::generowanie nagłówka
                  _nd:=exec('gen_nagl','zamsiw_rea',date(),_typy_dok_ref,MG.ref(),_kh);
                  _mg:=$MG.ref();
                  {? ~_nd | ~ND.seek(_nd)
                  || exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
                     exec('add_kom','#message','Nie udało się wygenerować nagłówka dokumentu magazynowego.'@,2);
                     undo();
                     _ok:=0
                  || exec('add_kom','#message','Dodano dokument magazynowy o symbolu %1.'@[ND.SYM],2)
                  ?}
               ?}
            ?};
            {? ~M.seek(_rem_grm.M) & _ok
            || exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
               exec('add_kom','#message','Problem z odnalezieniem magazynu.'@,2);
               undo()
            ?};
            {? _ok
            ||
::przypisanie dostawy
               exec('sc_tymczas','magazyn_stan',MG.ref(),M.ref(),'T');
               _rdk:=0;
               _ndk:='';
               __sc.cntx_psh();
               __sc.prefix();
               {? __sc.first()
               ||
                  {!|?
                     {? __sc.S>=REM_GRM.IL & (__sc.WAL='' | __sc.WAL=ND.WAL().KOD)
                     || _rdk:=__sc.RDK;
                        _ndk:=__sc.NDK
                     ?};
                     __sc.next() & _rdk=0 & _ndk=''
                  !}
               ?};
               __sc.cntx_pop();
               {? ~_rdk
               ||  exec('ini_kom','#message','Informacje o wygenerowanych dokumentach magazynowych.'@);
                   exec('add_kom','#message','Nie udało się przypisać dostawy dla materiału %1.'[REM_GRM.M().KTM],2);
                   undo();
                   _ok:=0
               ||
::generowanie pozycji
                  _dk:=exec('gen_pozy','zamsiw_rea',_nd, M.ref(),1, _rem_grm.IL,_rdk,_ndk,0,0,0,null(),0,M.VAT);
                  DK.prefix();
                  {? _dk & DK.seek(_dk)
                  ||
                     REM_GRM.seek(_rem_grm.REF);
                     DK.REM_GRM:=REM_GRM.ref();
                     DK.put();
                     REM_GRM.ND:='T';
                     REM_GRM.UIDREFDK:=DK.uidref();
                     REM_GRM.put();
                     exec('add_kom','#message',
                        'Dodano pozycję dokumentu magazynowego o indeksie %1 - %2.'@[DK.M().KTM,DK.M().N],2
                     )
                  ?}
               ?};
               {? _ok || exec('dk_sum','magdok_wspolne',ND.ref,,1) ?}
            ?}
         ?};
         _rem_grm.next() & _ok
      !}
   || exec('add_kom','#message','Brak pozycji do generowania.'@,2)
   ?}
?};
end();
REM_GRM.cntx_pop();
REM_ZGL.cntx_pop();
KH.cntx_pop();
M.cntx_pop();
ND.cntx_pop();
DK.cntx_pop();
MG.cntx_pop();
REM_GRM.sel_adel();
exec('end_kom','#message');
{? _zakoncz & ~_ok || -1 || 0 ?}


\idz_do_dk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [23.25]
:: OPIS: Idź do pozycji dokumentu magazynowego
:: ~OST: INFORK
::----------------------------------------------------------------------------------------------------------------------
_uidref:=REM_GRM.UIDREFDK;

{? _uidref='' || FUN.info('Nie znaleziono pozycji dokumentu.'@); return() ?};
{? exec('interm','#system')
|| _params:=exec('obj_ntab_set','#array',,'LINK',_uidref);
   _link_interm:=link_uri(_params);
   cli_open_link(_link_interm)
||
   _domain:='LMG';
   _color:=exec('FindInSet','#table','B_DOMAIN','SYMBOL',_domain,,"B_DOMAIN.COLOR",1,,'');
   mb_fork(,'START_PROCES'
      ,'color='+exec('color_conv','#convert',_color)
      ,'LINK',_uidref)
?};
~~


\filtr_mg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: ustawia filtr na magazyny
::----------------------------------------------------------------------------------------------------------------------
MG.f_clear();
MG.clear();
:: sprawdzam czy uprawnienia ogolne czy uzytkownika
USERS_UP.cntx_psh();
USERS_UP.index('MG');
USERS_UP.prefix(OPERATOR.USER,'MG',ST.ODDZ_KOD);
_upr_us:=USERS_UP.first();
USERS_UP.cntx_pop();
{? _upr_us
|| MG.f_set('SYM,NAZ','join USERS_UP','USERS_UP.USERS=:_a and USERS_UP.AKR=\'MG\' and \"MG\".ODDZ=\':_b\' and \"MG\".PAL=\'N\' ',OPERATOR.USER,ST.ODDZ)
|| USERS_UP.cntx_psh();
   MG.f_set('SYM,NAZ','','',OPERATOR.USER,ST.ODDZ);
   {? MG.f_first()
   || {!
      |?
         USERS_UP.index('MG');
         USERS_UP.prefix(null,'MG',ST.ODDZ_KOD,MG.ref());
         {? USERS_UP.first()
         || MG.f_next()
         || MG.f_del()
         ?}
      !}
   ?};
   USERS_UP.cntx_pop()
?};
~~


\rem_grm_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [23.25]
:: OPIS: REM_GRM przed edycją
::----------------------------------------------------------------------------------------------------------------------
ST.MAG:=REM_GRM.MG;
1

:Sign Version 2.0 jowisz:1045 2023/08/17 16:30:23 c31f592c990fad193f915b7a2fec7017ce2af81cccd1e19c332d5c19e71985e92ab629a3c856822d207b4b9408659e6847f517c930960015c14c44e33d47084aed33d5d0cf6370f5c1bb07eec4edcffb2836b49c476f245c4c8a899e25d53006270f77380e612cdfa8c56c03c71bcb4ae38fa2000ebd2dd476c4bb836d94ec27
