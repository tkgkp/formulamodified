:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !hbn_prz_dlkr.fml
:: Utworzony: 14.06.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności HBN_PRZ_DLKR - Utw. przelewu komorniczego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewu komorniczego - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL,HRB,HRP,FJKS
::# properties=LOOP
::
::
::# kind=WE, symbol=O, type=_O, name=Lista płac, required=N, keyref=T
::# kind=WE, symbol=ZAKRES, type=STRING, name=Zakres przetwarzania list płac (B*/P/W), required=N, keyref=N, ^
::#          fml_val="exec('zakres_val','!hbn_prz_dlkr',{? _a=~~ || 'B' || _a ?})"
::
::# kind=WE, symbol=R, type=NUMBER, name=Rok, required=N, keyref=N, ^
::#          fml_val="exec('edit_number','#edit',{? _a=~~ || date()~1 || _a ?},'Rok',0,1900)"
::# kind=WE, symbol=M, type=NUMBER, name=Miesiąc, required=N, keyref=N, ^
::#          fml_val="exec('edit_number','#edit',{? _a=~~ || date()~2 || _a ?},'Miesiąc',0,1,12)"
::# kind=WE, symbol=ZRODLO, type=STRING, name=Źródło potrącenia (P/Z/X*), required=N, keyref=N, ^
::#          fml_val="exec('zrodlo_val','!hbn_prz_dlkr',{? _a=~~ || 'X' || _a ?})"
::
::
::# kind=WEW, symbol=P_ZLEC, type=DATE, name=Data zlecenia, required=N, keyref=N
::# kind=WEW, symbol=P_DATA, type=DATE, name=Data przelewu, required=N, keyref=N
::# kind=WEW, symbol=GIODO, type=STRING, name=Przekazanie danych osobowych, required=N, keyref=N
::
::
::# kind=WY, symbol=PB, type=_PB, name=Wskazanie polecenia przelewu, required=N
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;

_micro:=_mp.isMicro();

{? ~_micro
:: Jeżeli czynność w procesie, to:
::    - Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
::    - Ustalenie / odzyskanie klucza grupującego.
|| _out.LOOP:='N';
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);
   _out.PB:=null();
   _mp.save(,_out)
?};

_result:='';

:: Pierwszy obrót pętli.
:: Jeżeli czynność jest uruchomiona z obszaru roboczego (mikroczynność), to metoda loop() również zwróci 0.
{? ~_mp.loop()
|| {? ~exec('valid','!hbn_prz_dlkr',_in)
   || _result:=exec('error','!hbn_prz_dlkr')
   |? {? _in.O=null()
      || _mp.keyRef('_'+$date(_in.R,_in.M,0)+_in.ZRODLO,0,0)
      ?};
      _ret:=exec('init','!hbn_prz_dlkr',_micro,_in,_int,params_exec('title','!hbn_prz_dlkr'));
      _ret.AKCJA='ESC'
   || _result:='#ESC#'
   |? _ret.AKCJA='OK' & ~_micro
   || _int.P_ZLEC:=_ret.P_ZLEC;
      _int.P_DATA:=_ret.P_DATA;
      _int.GIODO:=_ret.GIODO;
      _mp.save(_int);
      _result:='#ESC#'
   || _TAB:=exec('loop','!hbn_prz_dlkr',_ret);
      {? _micro
      || _mp.done()
      || _mp.grpkeyDelAll();
         {? _TAB.first()
         || {!
            |? _mp.grpkeyAdd(_TAB.UIDREF);
               _TAB.next()
            !}
         ?}
      ?}
   ?}
?};

{? _result='' & ~_micro
|| PB.cntx_psh();
   PB.use('pbxxxx');
   PB.prefix();
   do();
   _uidref:=_mp.grpkeyGet();
   {? _uidref<>~~
   || _name:=ref_name(_uidref);
      {? PB.name()<>_name
      || PB.use(_name);
         PB.prefix()
      ?};
      {? PB.seek(_uidref)
      || _mp.save(exec('kind_out','#b_port'),'PB',PB.ref())
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};
   _mp.done();
   end();
   PB.cntx_pop()
?};

{? _result='#ESC#'
|| {? _micro
   || _mp.cancel()
   || _mp.keep()
   ?}
|? _result<>''
|| _mp.error(_result);
   FUN.emsg(_result)
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewu komorniczego - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
{? ~exec('valid','!hbn_prz_dlkr',_in)
|| 'Utworzenie przelewów komorniczych'@@

|? _in.O=null()
|| _zrodlo:=
      {? _in.ZRODLO='P'
      || 'tylko listy płac'
      |? _in.ZRODLO='Z'
      || 'tylko rachunki'
      || 'listy płac i rachunki'
      ?};
   'Utworzenie przelewów komorniczych za %1 (%2)'@@[date(_in.R,_in.M,0)$8,_zrodlo]

|| _zakres:=
      {? _in.ZAKRES='B'
      || 'tylko bieżąca'
      |? _in.ZAKRES='P'
      || 'tylko poprzednie'
      || 'bieżąca i poprzednie'
      ?};
   'Utworzenie przelewów komorniczych z listy %1 (%2)'@@[exec('record','#to_string',_in.O),_zakres]

?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu.
::   WE:
::   WY: Treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Utworzenie przelewów komorniczych niemożliwe.'@


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła standaryzująca parametry wejściowe i sprawdzająca ich wartości.
::   WE: _a [ARRAY] - Tablica parametrów wejściowych.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;

{? _in.O=~~
|| _in.O:=null()
|| O.cntx_psh();
   O.prefix();
   {? O.seek(_in.O)
   || _par259:=PAR_SKID.get(259)='T';
      {? _in.R=~~
      || {? _par259 || _in.R:=O.RP || _in.R:=O.R ?}
      ?};
      {? _in.M=~~
      || {? _par259 || _in.M:=O.MP || _in.M:=O.M ?}
      ?}
   ?};
   O.cntx_pop()
?};
{? _in.R>1900 & _in.M>=1 & _in.M<=12
|| {? _in.O=null()
   || {? _in.ZRODLO=~~ | (_in.ZRODLO<>'P' & _in.ZRODLO<>'Z')
      || _in.ZRODLO:='X'
      ?}
   || {? _in.ZAKRES=~~ | (_in.ZAKRES<>'P' & _in.ZAKRES<>'W')
      || _in.ZAKRES:='B'
      ?}
   ?};
   1
?}


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wczytująca parametry tworzonych przelewów.
::   WE: _a [NUMBER] - Obsługa poza procesem (mikroczynność): 1/0.
::       _b [ARRAY]  - Tablica z parametrami: R, M, O.
::       _c [ARRAY]  - Tablica z parametrami: P_ZLEC, P_DATA, GIODO.
::       _d [STRING] - Tytuł doklejany do okna wyboru rachunku bankowego.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_micro:=_a;
_in:=_b;
_int:=_c;
_title:=_d;

_data:=date(_in.R,_in.M,0);
_ret:=exec('obj_ntab_set','#array',,
:: Kopia parametrów wejściowych
   'O',_in.O,
   'ZAKRES',_in.ZAKRES,
   'R',_in.R,
   'M',_in.M,
   'ZRODLO',_in.ZRODLO,
:: Rozwinięcie parametrów wejściowych
   'OT',null(),
   'ODK',date(0,0,0),
:: Parametry pobierane od użytkownika
   'SKID_RBK',null(),
   'P_ZLEC',{? _int.P_ZLEC=~~ || _data || _int.P_ZLEC ?},
   'P_DATA',{? _int.P_DATA=~~ || _data || _int.P_DATA ?},
   'GIODO',{? _int.GIODO=~~ || 'N' || _int.GIODO ?},
:: Parametr techniczny
   'AKCJA',''
);

{? _ret.O<>null()
|| O.cntx_psh();
   O.prefix();
   {? O.seek(_ret.O)
   || _ret.OT:=O.T;
      {? PAR_SKID.get(259)='T'
      || _ret.ODK:=date(O.RP,O.MP,1)
      || _ret.ODK:=date(O.R,O.M,1)
      ?}
   ?};
   O.cntx_pop()
?};

exec('RB','object');
exec('czytaj','#stalesys',,KST,KST_PAR);

SKID_RBK.cntx_psh();
SKID_RBK.prefix();
{? exec('rachunki_banki','rachunki',_title)
|| _ret.SKID_RBK:=SKID_RBK.ref();

   exec('setup_buttons','#window',ZMIENNE,'PRZ_KOM',_micro,'DONE','OK','ANULUJ');
   ZMIENNE.ZLEC:=_ret.P_ZLEC;
   ZMIENNE.PRZE:=_ret.P_DATA;
   ZMIENNE.GIODO:=_ret.GIODO;
   ZMIENNE.win_edit('PRZ_KOM');
   params_set('ret',_ret);
   {? ZMIENNE.edit("__CHK.record(ZMIENNE,,'ZLEC','PRZE')")
   || _ret.P_ZLEC:=ZMIENNE.ZLEC;
      _ret.P_DATA:=ZMIENNE.PRZE;
      _ret.GIODO:=ZMIENNE.GIODO;
      {? _ret.AKCJA=''
      || _ret.AKCJA:='OK'
      ?}
   || _ret.AKCJA:='ESC'
   ?}
|| _ret.AKCJA:='ESC'
?};
SKID_RBK.cntx_pop();

_ret


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Zakończ - przejdź do następnego etapu procesu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_par.ret.AKCJA:='DONE';
'key:F2'


\keep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Zapisz - podtrzymaj czynność na liście zadań.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
'key:F2'


\loop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Tworzenie polecenia przelewu komorniczego.
::   WE: _a [ARRAY] - Tablica z parametrami (patrz \init).
::   WY: Tablica tymczasowa z identyfiaktorami dodanych rekordów.
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;

_TAB:=tab_tmp(1,
   'LP','IDADD','Lp.',
   'UIDREF','STRING[48]','Identyfikator rekordu'
);
_total:=0;

exec('czytaj','#stalesys',,KST,KST_PAR);

SKID_RBK.cntx_psh();
SKID_RBK.prefix();
{? SKID_RBK.seek(_par.SKID_RBK)
|| OSOBA.cntx_psh();
   OSOBA.index('OSOBA');
   OSOBA.prefix();
   {? OSOBA.first()
   || O.cntx_psh();
      O.prefix();
      KT.cntx_psh();
      KT.prefix();
      RH.cntx_psh();
      RH.prefix();
      ADRES.cntx_psh();
      ADRES.prefix();
      B.cntx_psh();
      B.prefix();
      PB.cntx_psh();
      PB.use('pbxxxx');
      PB.index('PBKO');
      KOM_SP.cntx_psh();
      KOM_SP.index('KOM_PR');
      KOM_OS.cntx_psh();
      KOM_OS.index('KOM_OS');
      KOM_RP.cntx_psh();
      KOM_RP.prefix();
      _TMP:=tab_tmp(3,
         'ID','STRING[30]','Identyfikator potrącenia',
         'TYP','STRING[1]','Typ',
         'DK','DATE','Data',
         'KW','REAL','Kwota'
      );
      _mdbs:=exec('tab_names','#table',PB);
      {!
      |? KOM_OS.prefix(exec('ref_firma','ustawienia'),OSOBA.ref());
         {? KOM_OS.first()
         || {!
            |? {? KOM_OS.PRZ<>'N' & KOM_OS.PRZ<>''
               || _TMP.erase();
                  KOM_SP.prefix(KOM_OS.ref(),_par.R,_par.M);

::                Zbieranie informacji.
                  _loop:=KOM_SP.first();
                  {!
                  |? _loop
                  |! {? KOM_SP.O<>null()
                     || KOM_SP.O();
                        _typ:='P';
                        _ids:=$KOM_SP.O+8
                     |? KOM_SP.RH<>null()
                     || KOM_SP.RH();
                        _typ:='Z';
                        _ids:=$KOM_SP.RH+8
                     || _typ:='';
                        _ids:=''
                     ?};
                     {? KOM_SP.KW<>0 &
                        {? _par.O=null()
::                         Mamy: R, M, ZRODLO.
::                         R i M są już sprawdzone poprzez odpowiedni prefiks. Wystarczy sprawdzić ZRODLO.
                        || _par.ZRODLO='X' | _par.ZRODLO=_typ

::                         Mamy: O, ZAKRES.
::                         Przede wszystkim sprawdźmy, czy potrącenie jest z listy płac (a nie z rachunku).
                        |? _typ='P'
                        || (_par.ZAKRES='B' & _par.O=KOM_SP.O) |
                           (_par.ZAKRES='P' & _par.OT=KOM_SP.O().T & date(KOM_SP.O().R,KOM_SP.O().M,1)<_par.ODK) |
                           (_par.ZAKRES='W' & _par.OT=KOM_SP.O().T & date(KOM_SP.O().R,KOM_SP.O().M,1)<=_par.ODK)
                        ?}
                     || _dk:=date(KOM_SP.R,KOM_SP.M,0);
::                      Długość identyfikatora: 3+8+1+8+1+6=27 (max 30)
                        _id:='KOM'+($KOM_OS.ref()+8)+_typ+_ids+'|'+(6+_dk$0);
                        {? ~(_put:=_TMP.find_key(_id,_typ,_dk))
                        || _TMP.blank();
                           _TMP.ID:=_id;
                           _TMP.TYP:=_typ;
                           _TMP.DK:=_dk
                        ?};
                        _TMP.KW+=KOM_SP.KW;
                        {? _put
                        || _TMP.put()
                        || _TMP.add()
                        ?}
                     ?};
                     _loop:=KOM_SP.next()
                  !};

::                Właściwe tworzenie przelewów.
                  _loop:=_TMP.first();
                  {!
                  |? _loop
                  |! PB.prefix();
                     _pb:=exec('get_pb_by_id','hbn',_TMP.ID,_mdbs);
                     {? _pb.ACTION<>'none'
                     || {? _pb.ACTION='put'
                        || PB.seek(_pb.REF)
                        || PB.blank()
                        ?};
                        exec('ustaw_pb','rachunki',_TMP.TYP);
                        PB.NR:=0;                     'numer w paczce';
                        PB.NBD:=SKID_RBK.BANK;        'bank dłużnika';
                        PB.RD:=SKID_RBK.N;            'numer rachunku dłużnika';
                        {? KOM_OS.PRZ='W'
                        || KOM_OS.WIE()
                        || KOM_OS.KOM()
                        ?};
                        PB.W:=ADRES.NAZWA;            'nazwa wierzyciela';
                        PB.NBW:=ADRES.BANK;           'bank wierzyciela';
                        {? PB.NBW
                        || PB.KRAJ_BAN:=PB.NBW().KODISO;
                           PB.SWIFT:=PB.NBW().SWIFT
                        ?};
                        'numer rachunku wierzyciela';
                        PB.RW:=gsub(ADRES.KONTO,' ','');
                        PB.KP:=ADRES.KOD_POCZ;
                        PB.M:=ADRES.MIASTO;
                        PB.UL:=ADRES.ULICA+' '+ADRES.DOM+{? +ADRES.LOKAL || ' m.'+ADRES.LOKAL || '' ?};
                        PB.DZ:=_par.P_ZLEC;          'data zlecenia';
                        PB.DP:=_par.P_DATA;          'data przelewu';
                        PB.TYT:=
                           OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE+' PESEL '+OSOBA.PESEL+'  '+
                           {? +KOM_OS.SYG || 'Syg. spr. egz.: '+KOM_OS.SYG+'  ' || '' ?}+
                           KOM_OS.KOM_RP().N+' za miesiąc '+_TMP.DK$8;
                        PB.KW:=_TMP.KW;             'kwota';
                        PB.KD:='PPL: Komornik';
                        PB.PR:='N';                   'Przekazany?';
                        PB.KID:=_TMP.ID;
                        PB.WAL:=KST_PAR.NAROD;
                        PB.RODZ:='K';
                        PB.OSOBA:=OSOBA.ref();
                        {? (_pb.ACTION='put' & PB.put()) | (_pb.ACTION='add' & PB.add())
                        || _TAB.blank();
                           _TAB.UIDREF:=PB.uidref();
                           _TAB.add();
                           _total+=PB.KW;
                           {? _par.GIODO='T'
                           || exec('przelew','giodo',_par.P_DATA)
                           ?}
                        ?}
                     ?};
                     obj_del(_pb);
                     _loop:=_TMP.next()
                  !}
               ?};
               KOM_OS.next()
            !}
         ?};
         OSOBA.next()
      !};
      KOM_RP.cntx_pop();
      KOM_OS.cntx_pop();
      KOM_SP.cntx_pop();
      PB.cntx_pop();
      B.cntx_pop();
      ADRES.cntx_pop();
      RH.cntx_pop();
      KT.cntx_pop();
      O.cntx_pop()
   ?};
   OSOBA.cntx_pop()
?};
SKID_RBK.cntx_pop();

_size:=_TAB.size();
{? _size>0
|| FUN.info('Utworzonych przelewów: %1.\nKwota: %2.'@ [$_size,form(_total,,2)])
|| FUN.info('Żaden przelew nie został utworzony.'@)
?};

_TAB


\zakres_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wpomagająca ustalanie wartości parametru wejściowego ZAKRES.
::   WE: _a [STRING] - Aktualna wartość parametru.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='B' | _a='P' | _a='W')
|| _in:=_a
|| return()
?};

_rt:=obj_new(3);
_rv:=obj_new(3);

_rt[1]:='Bieżąca'@;
_rv[1]:='B';
_rt[2]:='Poprzednie'@;
_rv[2]:='P';
_rt[3]:='Wszystkie'@;
_rv[3]:='W';

exec('edit_radiobutton','#edit',_in,'Zakres przetwarzania list płac'@,_rt,_rv)


\zrodlo_val
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [18.22]
:: OPIS: Formuła wpomagająca ustalanie wartości parametru wejściowego ZRODLO.
::   WE: _a [STRING] - Aktualna wartość parametru.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='P' | _a='Z' | _a='X')
|| _in:=_a
|| return()
?};

_rt:=obj_new(3);
_rv:=obj_new(3);

_rt[1]:='Listy płac'@;
_rv[1]:='P';
_rt[2]:='Rachunki umów cywilnoprawnych'@;
_rv[2]:='Z';
_rt[3]:='Dowolne'@;
_rv[3]:='X';

exec('edit_radiobutton','#edit',_in,'Źródło potrącenia'@,_rt,_rv)


\title
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Utw. przelewu komorniczego - formuła tytułu okienka.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
{? ~exec('valid','!hbn_prz_dlkr',_in)
|| 'Utworzenie przelewów komorniczych'@

|? _in.O=null()
|| _zrodlo:=
      {? _in.ZRODLO='P'
      || 'tylko listy płac'
      |? _in.ZRODLO='Z'
      || 'tylko rachunki'
      || 'listy płac i rachunki'
      ?};
   'Utworzenie przelewów komorniczych za %1 (%2)'@[date(_in.R,_in.M,0)$8,_zrodlo]

|| _zakres:=
      {? _in.ZAKRES='B'
      || 'tylko bieżąca'
      |? _in.ZAKRES='P'
      || 'tylko poprzednie'
      || 'bieżąca i poprzednie'
      ?};
   'Utworzenie przelewów komorniczych z listy %1 (%2)'@[exec('record','#to_string',_in.O),_zakres]

?}

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:49 adfa681dd2e8182b7d59e6cb9a9065d58ff8ec2a6e3bc5ee9dabbc65e787d7710c7cfc453e574f414d56a4c69a0ad0d2abab2435c7bb074180e654acd9f4a359766013342a541edaf1dbf3f4238a5abd38a90bb0c330ea3f2d99a74d8f9bf7bb58fd34d11039a5c10460d7fc8dd26e43a730ca8c8f2f50125868ff18de04d878
