:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dgpa.fml
:: Utworzony: 30.11.2015
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły do obsługi czynności TTE_PZL_DGPA - Rejestracja partii zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła główna czynności rejestracji partii zlecenia (TTE_PZL_DGPA)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ
::# properties=SERVICE
::# parses=exec('parses','!tte_pzl_dgpa')

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=T, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'ZL\' dla czynności TTE_PZL_DGPA';
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};

::# kind=WE, symbol=ZGH, type=_ZGH, name=Wskazanie na przewodnik zlecenia, required=N, keyref=T
{? var_pres('ZGH',_in)<>type_of(~~) & var_pres('ZGH',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'ZGH\' dla czynności TTE_PZL_DGPA';
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
{? var_pres('ZGH',_in)=type_of(~~) || _in.ZGH:=null() ?};

::# kind=WY, symbol=RESULT, type=STRING, name="Wynik działania (OK, BŁĄD)", required=N

_result:=~~;
_can_continue:=1;

ZL.cntx_psh(); ZGH.cntx_psh();
ZL.prefix(); ZGH.prefix();

_zl:=null();
_zgh:=null();

_clean_result:=exec('clean','!tte_pzl_dgpa',_mp,_in);
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;
_zgh:=_clean_result.ZGH;

:: WSTĘPNE WALIDACJE
{? _can_continue>0 & _mp.isService() & _zl=null()
|| _msg:='Błędna konfiguracja procesu — nie przekazano zlecenia.'@;
   _mp.error(_msg);
   _can_continue:=0
|? _can_continue>0 & _zgh<>null() & _mp.akcja()='WERTUJ_ZL'
||
:: Jeżeli proces przewiduje że partie rejestrujemy od strony przewodników, do blokujemy uruchamianie
:: od strony zlecenia
   _msg:='Rejestracja partii dla zlecenia: '+exec('record','#to_string',_zl)+' możliwa tylko od strony przewodników tego zlecenia.';
   {? _mp.isGroup()
   || KOMM.add(_msg,2,,1)
   || FUN.info(_msg)
   ?};
   _can_continue:=0
?};

{? _can_continue>0 & _zl<>null()
|| _can_continue:=ZL.seek(_zl)
?};
{? _can_continue>0 & _zgh<>null()
|| _can_continue:=ZGH.seek(_zgh)
?};

{? _can_continue>0
||
   _top_level:=exec('top_level','zl_link',ZL.ref());
   _top_rodzaj:=exec('FindAndGet','#table',ZL,_top_level,,"RODZAJ",'');
   _main_podzlec:=exec('main_podzlec','zl_link',ZL.ref());

   {? _zgh<>null()
   || _mp.keyRef(ZGH.uidref())
   |? _zl<>null()
   || _mp.keyRef(ZL.uidref())
   ?};
   {? ZL.TYP().WP='W'
   || _msg:='Nie można uruchomić czynności dla zlecenia: %1. Rejestracja partii dla zlecenia warsztatowego jest niedozwolona.'@@[ZL.SYM];
      {? ~_mp.isService()
      || {? _mp.isGroup()
         || KOMM.add(_msg,2,,1)
         || FUN.info(_msg)
         ?}
      ?};
      _result:=0;
      _mp.error(_msg)
   |? ZL.RODZAJ='N'
   || _msg:='Nie można uruchomić czynności dla zlecenia: %1. Rejestracja partii dla zlecenia niezależnego jest niedozwolona.'@@[ZL.SYM];
      {? ~_mp.isService()
      || {? _mp.isGroup()
         || KOMM.add(_msg,2,,1)
         || FUN.info(_msg)
         ?}
      ?};
      _result:=0;
      _mp.error(_msg)

::   |? _top_rodzaj='Z' & _top_level=ZL.ref()
::   || _msg:='Nie można uruchomić czynności dla zlecenia: %1. Rejestracja partii dla zlecenia nadrzędnego jest niedozwolona.'@@[ZL.SYM];
::      {? _mp.isGroup()
::      || KOMM.add(_msg,2,,1)
::      || FUN.info(_msg)
::      ?};
::      _result:=0;
::      _mp.error(_msg)
   |? exec('material_party','material',ZL.KTM)=0
   || {? _mp.isAutoRun() | _mp.isService()
      || _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()
      ||
         _msg:='Nie można uruchomić czynności dla zlecenia: %1. Produkt zlecenia jest niepartiowany.'@@[ZL.SYM];
         {? _mp.isGroup()
         || KOMM.add(_msg,2,,1)
         || FUN.info(_msg)
         ?};
         _result:=1;
         _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()
      ?}
   |? _top_rodzaj='Z' & ZL.ref()<>_top_level & ZL.ref()<>_main_podzlec & ZL.RP<>'T'
   ||
      {? _mp.isAutoRun() | _mp.isService()
      || _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()
      ||
         _msg:='Nie można uruchomić czynności dla podzlecenia: %1. Czynność należy uruchamiać tylko dla podzlecenia montażowego lub nadrzędnego.'@@[ZL.SYM];
         {? _mp.isGroup()
         || KOMM.add(_msg,2,,1)
         || FUN.info(_msg)
         ?};
         _result:=1;
         _out.RESULT:='OK';
         _mp.save(,_out);
         _mp.done()
      ?}
   ||
::    Właściwe działanie

      VAR.A_ZLEC:=ZL.ref();
      _ask:=1;
      {? _mp.isAutoRun() | _mp.isService()
      || _ask:=0
      ?};
      {? _mp.akcja()='ZAKOŃCZ'
      ||
::       Akcja Zakończ
         {? _zgh<>null()
         ||
            {? FUN.ask('Zakończyć rejestrację partii dla przewodnika: %1?'@[ZGH.NRPRZ])
            || _out.RESULT:='OK';
               _mp.save(,_out);
               _mp.done();
               sel_exit()
            ?}
         ||
            {? FUN.ask('Zakończyć rejestrację partii dla zlecenia: %1?'@[ZL.SYM])
            || _out.RESULT:='OK';
               _mp.save(,_out);
               _mp.done();
               sel_exit()
            ?}
         ?}
      |? _ask>0 & (_mp.akcja()='WERTUJ_ZL' | (_zgh=null() & _mp.pathTodo()))
      ||
::       Wyświetlanie od strony zlecenia
::         _mp.keep();

         _locked:=1;
         {? _mp.pathTodo()
         || _locked:=exec('zl_lock','zl_common',ZL.ref(),'R')
         ?};

         _result:=exec('select_zl','zl_partie',ZL.ref(),,_locked,~_mp.isMicro());
         {? _mp.isMicro() & _result=0
         || _mp.cancel()
         ?};
         {? _mp.pathTodo() & _locked>0
         || exec('zl_unlock','zl_common',ZL.ref(),'R')
         ?}
      |? _ask>0 & (_mp.akcja()='WERTUJ_ZGH' | (_zgh<>null()&_mp.pathTodo()))
      ||
::       Wyświetlanie od strony przewodnika
::         _mp.keep();
         _locked:=1;
         {? _mp.pathTodo()
         || _locked:=exec('zl_lock','zl_common',_main_podzlec,'R')
         ?};

         _result:=exec('select_zgh','zl_partie',_zgh,,_locked,~_mp.isMicro());
         {? _mp.isMicro() & _result=0
         || _mp.cancel()
         ?};
         {? _mp.pathTodo() & _locked>0
         || exec('zl_unlock','zl_common',_main_podzlec,'R')
         ?}
      ||
::       Ścieżka generowania jednej partii
         _ilzl:=ZL.IL;
         _ilpart:=exec('zl_ile_part','zl_partie',ZL.ref());
         _to_part:=_ilzl-_ilpart;

         {? _to_part>0 & _zgh<>null()
         || _ilzgh:=ZGH.ILNPRZ;
            _ilparted:=exec('zgh_ile_part','zl_partie',ZGH.ref());
            _to_part:=_ilzgh-_ilparted
         ?};
         {? _to_part>0
         ||
::          Generuję partię tylko jeśli coś zostało do rozpartiowania
            {? exec('generuj','zl_partie',ZL.ref(),_zgh,{? _mp.isService() || -1 || _mp.isGroup() ?},0)>0
            || _out.RESULT:='OK';
               _mp.save(,_out);
               _mp.done()
            ?}
         || _out.RESULT:='OK';
            _mp.save(,_out);
            _mp.done()
         ?}
      ?}
   ?}
?};
ZL.cntx_pop(); ZGH.cntx_pop();
_result


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Opis dla czynności rejestracji przewodnika zlecenia (TTE_PZL_DPZG)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

_zl:=null();
_zgh:=null();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];
      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=ZL.name()
         || _zl:=exec('FindAndGet','#table',ZL,_kref,,,null())
         |? ref_name(_kref)=ZGH.name()
         || _zgh:=exec('FindAndGet','#table',ZGH,_kref,,,null())
         ?}
      ?}
   !}
?};

:: jest parametr wejściowy ZL
{? _zl=null() & var_pres('ZL',_in)=type_of(null())
|| _zl:=_in.ZL
?};
:: jest parametr wejściowy ZGH
{? _zgh=null() & var_pres('ZGH',_in)=type_of(null())
|| _zgh:=exec('FindAndGet','#table',ZGH,_in.ZGH,,"ref()",null())
?};

{? _zgh<>null()
|| _sym:=exec('FindAndGet','#table',ZGH,_zgh,,"NRPRZ",'');
   _desc:='Zarejestruj partie do przewodnika: %1'@@[_sym]
|? _zl<>null()
|| _sym:=exec('FindAndGet','#table',ZL,_zl,,"SYM",'');
   _desc:='Zarejestruj partie do zlecenia: %1'@@[_sym]
|| _desc:='Czynność rejestracji partii - błąd konfiguracji procesu (brak przekazanych argumentów)'@@
?};
_desc


\action_args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Argumenty dla funkcji action_bridge
::   WY: obj_new()
::  TAG: <PUBLIC>
::----------------------------------------------------------------------------------------------------------------------
_args:=obj_new(
   'AKCJA'
   ,'GROUP'
   ,'ZPARN'
   ,'ZGH'
   ,'ZL'
   ,'ALWAYS_DONE'
   ,'GEN_RESULT'
);
_args.AKCJA:='';
_args.GROUP:=0;
_args.ZPARN:=null();
_args.ZGH:=null();
_args.ZL:=null();
_args.ALWAYS_DONE:=0;
_args.GEN_RESULT:=0;
_args


\action_brigde
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Uruchamiator czynności - odpala czynność i przekazuje jej odpowiednie argumenty
::   WE: _args - argumenty funkcji - wynik działania exec('action_args','!tte_pzl_dgpa')
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=_a;

_zl:=_args.ZL;
{? _zl=null() & _args.ZGH<>null()
|| _zl:=exec('FindAndGet','#table',ZGH,_args.ZGH,,"ZLEC",null())
?};
{? _zl=null() & _args.ZPARN<>null()
|| _zl:=exec('FindAndGet','#table',ZPARN,_args.ZPARN,,"ZL",null());
   _zgh:=exec('FindAndGet','#table',ZPARN,_args.ZPARN,,"ZGH",null());
   {? _zgh<>null()
   || _args.ZGH:=_zgh
   ?}
?};
_main_podzlec:=exec('main_podzlec','zl_link',_zl);
_locked:=1;
{? _args.AKCJA*'WERTUJ'>0
|| _locked:=exec('zl_lock','zl_common',_main_podzlec,'R')
?};

{? _locked>0
||
:: Sprawdzam czy mam uprawnienia
   {? exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DGPA')>0
   ||
      {? _args.AKCJA='GENERUJ'
      ||
::       Akcja Generuj
         _can_continue:=1;
         {? exec('FindAndGet','#table',ZL,_args.ZL,,"STAN='Z'",0)
         || _can_continue:=0;
            _msg:='Generowanie partii dla zlecenia zamkniętego jest niedozwolone.'@;
            {? _args.GROUP
            || KOMM.add(_msg,2,,1)
            || FUN.info(_msg)
            ?}
         ?};
         {? _can_continue>0
         || _args.GEN_RESULT:=exec('generuj','zl_partie',_zl,_args.ZGH,_args.GROUP)
         ?}

      || _args_mp:=exec('mp_run_a','#b__box');
         _args_mp.AKCJA:=_args.AKCJA;
         _args_mp.ACT_UID:='TTE_PZL_DGPA';
         {? _args.ZGH<>null()
         || _args_mp.UIDREF:=exec('FindAndGet','#table',ZGH,_args.ZGH,,"uidref()",null())
         |? _zl<>null()
         || _args_mp.UIDREF:=exec('FindAndGet','#table',ZL,_zl,,"uidref()",null())
         ?};
         _args_mp.PROC_START:='T';
         _args_mp.CONTEXT:=obj_new('ZPARN'
                                    ,'ALWAYS_DONE'
                                    ,'GEN_RESULT'
                                    );
         _args_mp.CONTEXT.ZPARN:=_args.ZPARN;
         _args_mp.CONTEXT.ALWAYS_DONE:=_args.ALWAYS_DONE;
         _args_mp.CONTEXT.GEN_RESULT:=0;
         {? _args.GROUP>0
         || _args_mp.GRUPA:='T'
         ?};
         _args_mp.PORTS_IN:=exec('portsIn','#b__box',_args_mp.ACT_UID);

         exec('portsInSet','#b__box',_args_mp.PORTS_IN,_args_mp.ACT_UID,'ZL',_zl);
         exec('portsInSet','#b__box',_args_mp.PORTS_IN,_args_mp.ACT_UID,'ZGH',_args.ZGH);
         exec('mp_run','#b__box',_args_mp);
         _args.GEN_RESULT:=_args_mp.CONTEXT.GEN_RESULT
      ?}
   ||
::    Brak uprawnień - jeśli akcja Wertowania to pokazuje okno do podglądu
      {? _args.AKCJA*'WERTUJ'>0
      ||
         {? _args.ZGH<>null()
         || exec('select_zgh','zl_partie',_args.ZGH,,0)
         |? _args.ZL<>null()
         || exec('select_zl','zl_partie',_args.ZL,1,0)
         ?}
      ?}
   ?};
   {? _args.AKCJA*'WERTUJ'>0
   || exec('zl_unlock','zl_common',_main_podzlec,'R')
   ?}
||
   {? _args.AKCJA*'WERTUJ'>0
   ||
::    Nie udało się zablokować, znaczy że ktoś redaguje. Nie uruchamiam czynności tylko pokazuję okno
::    do podglądu
      {? _args.ZGH<>null()
      || exec('select_zgh','zl_partie',_args.ZGH,,0)
      |? _args.ZL<>null()
      || exec('select_zl','zl_partie',_args.ZL,1,0)
      ?}
   ?}
?};
~~


\action_end_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Zakończ' w oknach z partiami zlecenia
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='ZAKOŃCZ';
_args.ZL:=ZL.ref();

exec('action_brigde','!tte_pzl_dgpa',_args);
~~


\action_end_zgh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Zakończ' w oknach z partiami przewodnika
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='ZAKOŃCZ';
_args.ZGH:=ZGH.ref();

exec('action_brigde','!tte_pzl_dgpa',_args);
~~


\delete_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.30]
:: OPIS: Akcja usuń w oknie wertowania tabeli ZPARN
::  OLD: \delete_action/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_group:=0;
{? ZPARN.sel_size()>0
|| _group:=1
?};

_can_continue:=1;

_choice:=1;
:: zapytanie czy na pewno
{? _group=0
|| _choice:=FUN.ask('Czy usunąć partię: %1?'@[ZPARN.SYM])
?};

{? _group=0
|| KOMM.init(200,,'Usuwanie partii produktu zlecenia'@,'')
?};

_sect:=exec('ZL','#to_string',ZPARN.ZL);

:: Sprawdzam czy zlecenie jest w planie operacyjnym - jesli tak to blokuje usuwanie partii, bo
:: nie bedzie mozna ich dogenerowac
ZL.cntx_psh();
_il_plan:=exec('zlec_planned','po_plan',$ZPARN.ZL);
{? _il_plan>0
|| _can_continue:=0;
   _msg:='Zlecenie: %1 znajduje się w Planie operacyjnym — usuwanie partii niedozwolone.'@[ZPARN.ZL().SYM];
   {? _group=0
   || FUN.emsg(_msg)
   || {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
      KOMM.add(_msg,'xwin16.png:3');
      KOMM.sect_end()
   ?}
?};
ZL.cntx_pop();

{? _choice=1 &_can_continue>0
|| ZPARN.cntx_psh();
   ZPARN.index('IDSRC');
   ZPARN.prefix(ZPARN.IDADD);
   {? ZPARN.first()
   || _can_continue:=0;
      _msg:='Partia: %1 została podzielona — usuwanie partii niedozwolone (najpierw należy usunąć partie potomne).'@
            [ZPARN.SYM];
      {? _group=0
      || FUN.emsg(_msg)
      || {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
         KOMM.add(_msg,'xwin16.png:3');
         KOMM.sect_end()
      ?}
   ?};
   ZPARN.cntx_pop()
?};

{? _choice=1 & _can_continue>0
|| {? exec('chk_depend','zl_partie',ZPARN.ref,-1,1)=0
   || _can_continue:=0;
      _msg:='Partia: %1 powiązana z zarejestrowaną robocizną lub rozchodami surowców — usuwanie partii niedozwolone.'@[ZPARN.SYM];
      {? _group=0
      || FUN.emsg(_msg)
      || {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
         KOMM.add(_msg,'xwin16.png:3');
         KOMM.sect_end()
      ?}
   ?}
?};

{? _choice=1 & _can_continue>0
|| exec('delete','zl_partie',ZPARN.ref(),1)
?};

:: jesli akcja nie byla grupowa to pokazuje okno z komunikatami
{? _group=0
|| KOMM.select(,,,,,0)
?};
~~


\delete_act_gr1
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.30]
:: OPIS: Akcja usuń grupa przed w oknie wertowania tabeli ZPARN
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \delete_act_gr1/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=0;
{? FUN.ask('Zaznaczono: %1 partii. Czy usunąć je wszystkie?'@[$ZPARN.sel_size()])
|| _ok:=1;
   KOMM.init(200,,'Usuwanie partii produktu zlecenia'@,'')
?};
_ok


\delete_act_gr2
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.30]
:: OPIS: Akcja usuń grupa po w oknie wertowania tabeli ZPARN
::  OLD: \delete_act_gr2/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
KOMM.select(,,,,,0);
~~


\gen_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Akcja 'Generuj' partie w oknie wertowania tabeli ZPARN
::   WE: _a - ZL.ref()
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MBUILDER>
::  OLD: \gen_action/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_zl_wej:=_a;

_result:=0;
_can_continue:=1;

:: Jesli przekazane zlecenie jest naglowkiem zlecenia zlozonego, to zamieniam ten naglowek
:: na podzlecenie montazowe tego zlecenia zlozonego
_zl:=exec('party_first','zl_link',_zl_wej);

ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl)
|| _args:=exec('action_args','!tte_pzl_dgpa');
   _args.AKCJA:='GENERUJ';
   _args.ZL:=ZL.ref();

:: Jeżeli nastąpiła podmiana zlecenia, to daję znać mikroczynności żeby się zakończyła
   {? _zl<>_zl_wej
   || _args.ALWAYS_DONE:=1
   ?};

   exec('action_brigde','!tte_pzl_dgpa',_args);

   {? _args.GEN_RESULT=2
   || _zl:=exec('party_first','zl_link',_zl_wej);
::    Partie zostały wygenerowane do innego zlecenia, zakładam nowy prefiks na tabelę ZPARN
::    żeby mi się pokazały wygenerowane partie
      {? ZPARN.index('?')*'ZL'>0
      || ZPARN.prefix(_zl)
      ?}
   ?}
?};
ZL.cntx_pop();
_result


\gen_action_zgh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.30]
:: OPIS: Akcja 'Generuj' partie w oknie wertowania tabeli ZPARN dla przewodnika
::   WY: 0 - porazka
::       1 - sukces
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_can_continue:=1;

_zl:=ZGH.ZLEC;
:: Jesli przekazane zlecenie jest naglowkiem zlecenia zlozonego, to zamieniam ten naglowek
:: na podzlecenie montazowe tego zlecenia zlozonego
_zl:=exec('main_podzlec','zl_link',_zl);

ZL.cntx_psh(); ZL.clear();
{? ZL.seek(_zl)
|| _args:=exec('action_args','!tte_pzl_dgpa');
   _args.AKCJA:='GENERUJ';
   _args.ZGH:=ZGH.ref();
   exec('action_brigde','!tte_pzl_dgpa',_args)
?};
ZL.cntx_pop();
_result


\split
::----------------------------------------------------------------------------------------------------------------------
:: DOST: PUBLIC
::  UTW: WH [12.30]
:: OPIS: Dzieli partie na kawalki o podanej ilosci
::   WE: _a - ZPARN.ref()
::       _b - REAL - ilosc na kawalku
::   WY: 0 - porazka
::       1 - sukces
::  OLD: \split/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
_zparn:=_a;
_chunk:=_b;

_result:=0;
_can_continue:=0;

ZPARN.cntx_psh(); ZPARN.clear();
{? ZPARN.seek(_zparn)
||
:: Ilosc oryginalna
   _org:=ZPARN.IL;

:: Normalizacja ilosci
   _chunk:=exec('max','#math',0,_chunk);
   _chunk:=exec('min','#math',_org,_chunk);

   {? _chunk>0
   ||
      _args:=exec('buffer','zl_partie');

::    Oryginalnej partii zapodaje nowa ilosc
      _args.get();
      _args.IL:=_chunk;

::    Podzielone partie nie sa automatyczne, zeby nie zostaly usuniete przypadkowo podczas
::    usuwania przewodnika
      _args.AUTO:='N';

      _args.set();
      _can_continue:=ZPARN.put();
::    Pobieram ponownie ilosc z rekordu bo mogla zostac zaookraglona
      _args.get();

      _chunk:=_args.IL;

      _src_sym:=ZPARN.SYM;
      _src_id:=ZPARN.IDADD;

::    Reszte ilosci dziele w petli i tworze nowe partie
      {? _can_continue>0
      ||
         _ilosc:=_org-_chunk;
         {? _ilosc>0
         ||
            {!
            |?
               {? _ilosc<_chunk
               || _chunk:=_ilosc
               ?};
               _args.IL:=_chunk;
               _args.OPIS:='Utworzona w wyniku podzielenia partii: '+_src_sym;
               _args.IDSRC:=_src_id;

               _can_continue:=exec('add','zl_partie',_args);
               _ilosc-=_args.IL;

               _ilosc>0 & _can_continue>0
            !}
         ?}
      ?}
   ?}
?};
{? _can_continue>0
|| _result:=1
?};
ZPARN.cntx_pop();
_result


\split_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: WH [12.30]
:: OPIS: Akcja podziel w oknie wertowania tabeli ZPARN
::       Kontekst pracy - rekord ZPARN
::  OLD: \split_action/zparn.fml
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzam czy partia powiązana z przewodnikiem z operacją planowaną grupowo
_can_continue:=exec('chk_plgrp','zl_partie',ZPARN.ref());

:: Sprawdzam czy partia czy ma powiązania, rozliczenia
{? _can_continue>0
|| _can_continue:=exec('chk_depend','zl_partie',ZPARN.ref())
?};

{? _can_continue>0
||
:: Podczytanie jednostki miary
   ZPARN.ZL().KTM().J();
   ZLEC.IL_PART:=ZLEC.IL_PART1:=ZLEC.IL_PARTP:=ZPARN.IL;
   ZLEC.SPL_TYPE:=1;

:: Gdy są powiązania z dostawami surowca i partia ma być dzielona po rejestracji operacji (par. 500771) to pozwalam na
:: podział partii tylko wg trybu "Pozostałość + nowa partia"
   _mode_change:=1;
   {? exec('get','#params',500771,2)='T' & exec('chk_depend','zl_partie',ZPARN.ref) &  exec('chk_zpars','zl_partie',ZPARN.ref)=0
   || _mode_change:=0
   ?};

   {? _mode_change=0
   ||  ZLEC.SPL_TYPE:=2
   ?};

   _env_part:=obj_new('result'); _env_part.result:=0;
   params_set('env_part',_env_part);

   _first_win:=SYSLOG.mk_edit(,,'first_win');
   _formula:="'key:F2'";
   ZLEC.win_edit('PART_SP');
   exec('zlec_efld_opt','zl_partie',_mode_change);

   ZLEC.KTM_PART:=ZPARN.KTM;
:: Jeżeli zlecenia na wiele produktów to ustawiam filtr na dostępne materiały
   {? exec('zl_czy_wyr','zl_wyr',ZPARN.ZL)>0
   || exec('ktm_f_set','zl_partie')
   ?};
   _env_part.result:=ZLEC.edit();

   {? _env_part.result>0
   || {? ZLEC.SPL_TYPE=1
      || exec('split','!tte_pzl_dgpa',ZPARN.ref(),ZLEC.IL_PART)
      |? ZLEC.SPL_TYPE=2
      || exec('split','zl_partie',ZPARN.ref(),ZLEC.IL_PART,0,ZLEC.KTM_PART)
      ?}
   ?};
   {? M.f_active() || M.f_clear() ?}

::|| _msg:='Nie można podzielić partii: %1\nPartia posiada powiązania w systemie'@[ZPARN.SYM];
::   FUN.emsg(_msg)
?};
~~


\select_zl_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Partie' od strony zlecenia
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='WERTUJ_ZL';
_args.ZL:=ZL.ref();

_atrmjs:=ATR.MJS;
ATR.MJS:='ZPARN';
exec('action_brigde','!tte_pzl_dgpa',_args);
ATR.MJS:=_atrmjs;
~~


\select_zgh_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Partie' od strony przewodnika
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('action_args','!tte_pzl_dgpa');
_args.AKCJA:='WERTUJ_ZGH';
_args.ZGH:=ZGH.ref();

exec('action_brigde','!tte_pzl_dgpa',_args);
~~


\zlec_ewindow_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: 'Okienko przed' dla okien redakcyjnych zmiennej ZLEC (do obsługi kreatora podziału partii)
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_part:=params_get().env_part;

:: Wyłączony kreator
::_fld_start:={? cur_win(1,1)='PART_SP0' || 'SPL_TYPE' || 'IL_PART' ?};
::
::{? edit_start(,_fld_start)
::|| {? cur_win(1,1)='PART_SP0'
::   || {? ZLEC.SPL_TYPE=1
::      || _numer:=3
::      || _numer:=4
::      ?};
::      tab_sel(1);
::      tab_hide();
::      tab_show(_numer);
::      tab_hide(1)
::   || {? exec('split_valid','!tte_pzl_dgpa')
::      || _env_part.result:=1;
::         sel_exit()
::      || {? ZLEC.SPL_TYPE=1
::         || _numer:=3
::         || _numer:=4
::         ?};
::         tab_sel(1);
::         tab_hide();
::         tab_show(_numer);
::         tab_hide(1)
::      ?}
::   ?}
::|| sel_exit()
::?}

_fld_start:={? ZLEC.SPL_TYPE=1 || 'IL_PART1' || 'IL_PARTP' ?};
{? edit_start(,_fld_start)
|| {? exec('split_valid','!tte_pzl_dgpa')
   || _env_part.result:=1;
      sel_exit()
   || tab_sel(1);
      tab_hide();
      tab_show(2);
      tab_hide(1)
   ?}
|| sel_exit()
?}


\split_valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Walidacja podziału partii
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
{? ZLEC.SPL_TYPE=1
|| {? ZLEC.IL_PART<=0
   || FUN.emsg('Ilość cząstkowa musi być wieksza od zera.'@);
      _result:=0
   |? ZLEC.IL_PART>ZPARN.IL
   || FUN.emsg('Ilość cząstkowa nie może być większa od ilości partii.'@);
      _result:=0
   |? ZLEC.IL_PART=ZPARN.IL
   || FUN.emsg('Ilość cząstkowa nie może być równa ilości na partii.'@);
      _result:=0
   ?}
|? ZLEC.SPL_TYPE=2
|| {? ZLEC.IL_PART<=0
   || FUN.emsg('Ilość pozostała musi być większa od zera.'@);
      _result:=0
   |? ZLEC.IL_PART>ZPARN.IL
   || FUN.emsg('Ilość pozostała nie może być większa od ilości partii.'@);
      _result:=0
   |? ZLEC.IL_PART=ZPARN.IL
   || FUN.emsg('Ilość pozostała nie może być równa ilości na partii.'@);
      _result:=0
   |? ZLEC.KTM_PART=null()
   || FUN.emsg('Produkt partii musi zostać określony.'@);
      _result:=0
   ?}
?};
_result


\zparn_rkprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.02]
:: OPIS: Rekord przed w oknie wertowania ZPARN
::   WE: [_a] - 1 oznacza wywołanie w kontekście rekordu ZGP
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) & _a=1 || VAR1.IL:=exec('zgp_il_part','zl_wyk',ZPARN.ref(),ZGP.ref()) ?};
_no_et:={? ~exec('isDEFetyk','magazyn_mobi','ZPARN') || 'T' || '' ?};
ZPARN.actions_grayed('WER_ZL',_no_et);

VAR1.ILWYK:=exec('get_ilosc_rp','zl_partie',ZPARN.ref());
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR',1)


\mod_action
::----------------------------------------------------------------------------------------------------------------------
:: DOST: MBUILDER
::  UTW: [rr] [22.26]
:: OPIS: Akcja popraw w oknie wertowania tabeli ZPARN
::----------------------------------------------------------------------------------------------------------------------
_can_continue:=1;

_choice:=1;
_select:=ZPARN.sel_size()<>0;

:: Sprawdzam czy zlecenie jest w planie operacyjnym - jesli tak to blokuje usuwanie partii, bo
:: nie bedzie mozna ich dogenerowac
ZL.cntx_psh();
_il_plan:=exec('zlec_planned','po_plan',$ZPARN.ZL);
{? ~_select & _il_plan>0
|| _can_continue:=0;
   _msg:='Zlecenie: %1 znajduje się w Planie operacyjnym — modyfikacja partii niedozwolona.'@[ZPARN.ZL().SYM];
   FUN.emsg(_msg)
?};
ZL.cntx_pop();

{? ~_select & _choice=1 & _can_continue>0
|| {? exec('chk_depend','zl_partie',ZPARN.ref,-1,1)=0
   || _can_continue:=0;
      _msg:='Partia: %1 powiązana z zarejestrowaną robocizną lub rozchodami surowców — modyfikacja partii niedozwolona.'@[ZPARN.SYM];
      FUN.emsg(_msg)
   ?}
?};

{? _choice=1 & _can_continue>0
|| ZPARN.cntx_psh();
   _sel:=ZPARN.sel_aget();
   ZPARN.sel_adel();
   {? _sel.size(); _sel.first() || ZPARN.prefix(); ZPARN.seek(_sel.REF,) ?};
   _flag:=ATR.FLAG;
   _edfl:=ATR.FLAG_ED;
   _atrmjs:=ATR.MJS;
   ATR.MJS:='ZPARN';
   ATR.M_ATR:=ZPARN.KTM().M_ATR;
   ATR.UZUP:=exec('wz_uzup','mat_atr',ATR.M_ATR);
   ATR.FLAG_ED:={? (1+ZPARN.ZL().MG().TYP)='D' || 2 || 0 ?};
   ATR.FLAG:={? ATR.FLAG_ED & ZPARN.KTM().M_ATR<>null() || 2 || 0 ?};
   {? ZPARN.DK_C<>null() & ZPARN.DK_C().M_ATR<>null()
   || {! _i:=1..10 |! ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.DK_C().WAR'+form(_i,-2,,'99')))() !}
   || {! _i:=1..10 |! {? ZPARN.ZL().KTM().M_ATR=ZPARN.KTM().M_ATR & ZPARN.ZL().DK_C<>null()
                      || ($('ATR.WAR'+form(_i,-2,,'99')))():=($('ZPARN.ZL().DK_C().WAR'+form(_i,-2,,'99')))()
                      || ($('ATR.WAR'+form(_i,-2,,'99')))():=''
                      ?}
      !}
   ?};
   ZPARN.DK_C().SYM;
   ZPARN.KTM().M_ATR().SYM;
   ZPARN.win_edit('REDM');
   ZPARN.efld_opt('REDM','editable=0',,'SYM');
   {? ZPARN.edit("__CHK.record(ZPARN,,'KTM')")
   || _sel.clear();
      {? _sel.first()
      || {? (1+ZPARN.ZL().MG().TYP)='D' & ATR.FLAG_ED & ATR.FLAG<>1 || exec('akcepatr','mat_atr',0,1) ?};
         {? ZPARN.DK_C=ZPARN.ZL().DK_C || ZPARN.DK_C:=null() ?};
         ZPARN.put(1);
         _opis:=ZPARN.OPIS;
         _dk_c:=ZPARN.DK_C;
         _tw:=ZPARN.TW;
         {!
         |? {? ZPARN.prefix(); ZPARN.seek(_sel.REF,)
             & ~(exec('zlec_planned','po_plan',$ZPARN.ZL)>0)
             & exec('chk_depend','zl_partie',ZPARN.ref,-1,1)<>0
            || ZPARN.OPIS:=_opis;
               ZPARN.TW:=_tw;
               ZPARN.DK_C:=_dk_c;
               ZPARN.put(1)
            ?};
            _sel.next()
         !}
      || {? (1+ZPARN.ZL().MG().TYP)='D' & ATR.FLAG_ED & ATR.FLAG<>1 || exec('akcepatr','mat_atr',0,1) ?};
         {? ZPARN.DK_C=ZPARN.ZL().DK_C || ZPARN.DK_C:=null() ?};
         ZPARN.put(1)
      ?}
   ?};
   ZPARN.efld_opt('REDM','editable=1',,'SYM');
   ZPARN.cntx_pop();
   obj_del(_sel);
   ATR.MJS:=_atrmjs;
   ATR.FLAG_ED:=_edfl;
   ATR.FLAG:=_flag
?};
~~


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła ustalająca PARSES
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
params_exec('zl_parses','zl_common')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:37 409b56b56f9b456247aec855246f6b135a2c56e31c565e959a140b3b2bc29973fd64b8572fa67f6be2a013e12b64e4559dd330bb74e0f92642ff18111c62243b8f4d4923bbae6b4929dfd702432c1b636f2bfcf70bed4fc31989596cb4fa5c4f908f67ff6d14bdf34f8413251525903c75098dc6ceecedf9cd83ddc19dc7afb5
