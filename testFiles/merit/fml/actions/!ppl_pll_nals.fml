:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_pll_nals.fml
:: Utworzony: 30.12.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_PLL_NALS - Naliczenie listy płac
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Naliczenie listy płac - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE, symbol=O, type=_O, name=Wskazanie listy płac, required=T, keyref=T
::
::# permissions=F_ZATR,UD_SKL

_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.O);
_do:=_mp.akcja();
SEEK.O:=_in.O;
SEEK.O();
_result:='';

{? _id='' | O.Z='T'
|| _result:=exec('error','!ppl_pll_nals')

|| _mp.save(_ib,_rv);
   {? _mp.pathTodo()
   || _value:=exec('select','!ppl_pll_nals',_in.O);
      {? type_of(_value)=type_of(0)
      || {? _value<>0
         || _mp.done()
         || _mp.keep()
         ?}
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Naliczenie listy płac - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_desc:='Naliczenie listy płac'@;
_lt:='';

SEEK.O:=_in.O;
{? SEEK.O<>null
|| _lt+=~SEEK.O().LT
?};

{? +_lt
|| 'Naliczenie listy płac %1'@@[_lt]
|| 'Naliczenie listy płac'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu.
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Naliczenie listy płac niemożliwe.'@


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Naliczenie składników wynagrodzenia.
::   WE: _a [_O] - wskazanie nagłówka listy płac
::   WY:
::----------------------------------------------------------------------------------------------------------------------
SEEK.O:=_a;
SEEK.O();

exec('wybierz','lista_plac',O.ref(),1);

exec('filtruj_p','schemat',
   'PPL',
   exec('szukaj_ud_def','schemat',exec('domyslny','schemat',O.WYDZIAL().UD_TYP),O.WYDZIAL).REF,
   O.F_ZATR().KOD,,
   '*'
);

_REP:=tab_tmp(,
   'CNT','INTEGER','Liczba obliczonych pozycji na liście płac',
   'ADD','INTEGER','Pracownicy dodani do rozliczenia',
   'ERR','INTEGER','Liczba pominiętych pracowników',
   'T_MIN','TIME','Minimalny czas obliczeń',
   'T_MAX','TIME','Maksymalny czas obliczeń',
   'T_SUM','TIME','Całkowity czas naliczania'
);

_t0:=time();
_rl:=PAR_SKID.get(191);
{? _rl='N'
|| RAPLS.ustaw()
?};
_loop:=P.f_first();
_size:=P.f_size();
_cnt:=0;
{!
|? _loop
|! _test:=0;
   progress(int((_cnt/_size)*100),'Naliczenie listy płac'@,FUN.TYT);
   {? ~exec('o_p_jest','ppl',O.ref(),P.ref())
   || _crit:=(FUNKCJE.TESTKRYT(0) & exec('czy_mod','lista_plac',P.ref(),O.ref()).oblicz<>0);
      {? _crit & exec('o_p_add','ppl',O.ref(),P.ref(),{? _crit || 'T' || 'N' ?},0)
      || _REP.ADD+=1;
         _test:=1
      ?}
   || _test:=(exec('czy_mod','lista_plac',P.ref(),O.ref()).oblicz<>0)
   ?};
   {? _test
   || _REP.CNT+=1;
      _ts:=time();
      FUNKCJE.OBLICZ();
      _tc:=time()-_ts;
      {? _REP.T_MAX<_tc
      || _REP.T_MAX:=_tc
      ?};
      {? _tc<_REP.T_MIN | _REP.T_MIN=time(0,0,0)
      || _REP.T_MAX:=_tc
      ?}
   ?};
   _cnt+=1;
   _loop:=P.f_next()
!};
_REP.T_SUM:=time-_t0;

prgs_clr();

{? _rl='N'
|| RAPLS.raport();
   RAPLS.ustaw(0)
?};

_act:=obj_new('done');
params_set('act',_act);
_act.done:=0;

FUNKCJE.buff.show_log();

_wnd:=_REP.mk_edit('Statystyka',0,'#rep_nals');
_REP.win_esep(_wnd,'Lista płac %1 %2'@[O.T().T,date(O.R,O.M,0)$8]);
_REP.win_efld(_wnd,,'CNT',,,10);
_REP.win_efld(_wnd,,'ADD',,,10);
: _REP.win_efld(_wnd,,'ERR',,,10);
: _REP.win_efld(_wnd,,'T_MIN',,,10);
: _REP.win_efld(_wnd,,'T_MAX',,,10);
_REP.win_efld(_wnd,,'T_SUM',,,10);
_bid:=_REP.win_ebtn(_wnd,'text=%1,display=1'[exec('text_red_zakoncz','#window','PKD_A')],
   "params_get().act.done:=1;'key:Esc'"
);
_REP.btn_opt(_bid,'tooltip='+exec('help_act_zakoncz','#window'));
_bid:=_REP.win_ebtn(_wnd,'text=%1,display=1'['&Anuluj'@],
   "params_get().act.done:=0;'key:Esc'"
);
_REP.btn_opt(_bid,'tooltip='+exec('help_act_esc','#window'));
_REP.win_edit(_wnd);
_REP.display();

_act.done


\define_umowy_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Formuła odpowiedzialna za zdefiniowanie obiektów służących do przechowania informacji o umowach zleceniach,
::       które wliczane są do wynagrodzenia za chorobę.
::   WE:
::   WY:
::  OLD: \define/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
exec('dekl_trace','lista_plac');

{? var_pres('SARRAY',@.CLASS)<=0
|| exec('dekl_sarray','#array')
?};

{? var_pres('UM_ZLEC',@.CLASS)<=0
|| obj_decl('UM_ZLEC',

   obj_fld('Data',''),
   obj_fld('Mc',''),

   obj_meth('__init',"
      {? var_pres('_b')=type_of(date(0,0,0))
         || _a.Data:=_b
         || _a.Data:=date(0,0,0)
      ?};
      {? var_pres('_c')>100 ||
         _s:=obj_len(_c);
         _a.Mc:=obj_new(_s);
         {! _i:=1.._s
         |! _a.Mc[_i]:=obj_new('PODST','Trace');
            _a.Mc[_i].PODST:=_c[_i].PODST;
            _a.Mc[_i].Trace:=obj_new(@.CLASS.Trace,_c[_i].Trace)
         !}
      ?}"))
?};

{? var_pres('__ZLECENIA',@.CLASS)<=0 ||
   obj_decl('__ZLECENIA',

   obj_fld('Array',~~),

   obj_fld('Compare',"
      {? _a.Data<_b.Data || -1
      |? _a.Data=_b.Data || 0
      || 1
      ?}"),

   obj_fld('Change',"
      _a.Data==_b.Data;
      {! _i:=1..obj_len(_a.Mc)
      |! _a.Mc[_i].PODST==_b.Mc[_i].PODST;
         _oTa:=_a.Mc[_i].Trace;
         _oTb:=_b.Mc[_i].Trace;
         obj_del(_a.Mc[_i].Trace);
         obj_del(_b.Mc[_i].Trace);
         _a.Mc[_i].Trace:=_oTb;
         _b.Mc[_i].Trace:=_oTa;
         obj_del(_oTb); &_oTb;
         obj_del(_oTa); &_oTa;
         ~~
      !}"),

   obj_meth('__init',"_a.Create()"),

   obj_meth('Empty',"
      {? var_pres('Array',.) ||
         {! _n:=1...Size() |!
            .Array[_n].Clear()
      !} ?}"),

   obj_meth('Delete',"
      {? var_pres('Array',.) ||
         obj_del(.Array);
         Array:=~~
      ?}"),

   obj_meth('Create',"
      .Array:=obj_new(1);
      {! _n:=1..obj_len(.Array) |!
         .Array[_n]:=obj_new(@.CLASS.SARRAY,.Compare,.Change)
      !}"),

   obj_meth('Add',".Array[1].Add(obj_new(@.CLASS.UM_ZLEC,_a,_b))"),

   obj_meth('GetDat',".Array[1].Array[_a].Data"),

   obj_meth('GetMc',"
      _odp:=obj_new('PODST','Trace');
      _odp.PODST:=.Array[1].Array[_a].Mc[_b].PODST;
      _odp.Trace:=obj_new(@.CLASS.Trace,.Array[1].Array[_a].Mc[_b].Trace);
      _odp"),

   obj_meth('Size',"obj_len(.Array)"))
?}


\ekwiwalent_godz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KF [2008]
:: OPIS: Formula sprawdzająca, czy należy obliczyć ekwiwalent z rozwiązanej umowy. Zwraca liczbę godzin ekwiwalentu
::       wpisanego na rozwiązanej umowie
::   WY: liczba godzin ekwiwalentu
::  OLD: \ekwiwal/umowy.fml
::----------------------------------------------------------------------------------------------------------------------
_ekw:=0;
_ekw_nsp:=0;
_z_karty:=0;
_put:=0;
_p180:=(PAR_SKID.get(180)='T');
H_UM.cntx_psh();
H_UM.index('OD');
H_UM.prefix(P.ref());
{? H_UM.last()
|| {!
   |? _z_karty:=0;
      _put:=0;
::  Sprawdzamy synchronizację brudnopisu
      {? _p180
      || _unsynch:=0;
         {? H_UM.IDMOD<>'__'
         || _unsynch:=1
         || _ref_b:=H_UM.IDLNK;
            H_UM.cntx_psh();
            {? H_UM.seek(_ref_b,'h_u_',1) & H_UM.IDMOD<>'__' & H_UM.DO~2=O.M
            || _unsynch:=1
            ?};
            H_UM.cntx_pop()
         ?};
         {? _unsynch
         || OSOBA.cntx_psh();
            RAPLS.msg(
            P.T,
            P.OSOBA().NAZWISKO,
            OSOBA.PIERWSZE,
            'Znaleziono zmienioną umowę o pracę: %1.'[H_UM.NUMER],
            'Ekwiwalent nie został wyliczony. Należy zweryfikować wyliczenie.'
            );
            OSOBA.cntx_pop();
            H_UM.cntx_pop();
            return(0)
         ?}
      ?};
      {? H_UM.LT=VAR.NAZWALIS | (H_UM.LT='' & (H_UM.DO~2<=O.M & H_UM.DO~1=O.R | H_UM.DO~1<O.R))
::    Jeśli przy znaczniku EKW_LICZ='T' jest już wpisany ekwiwalent to nie bierz ponownie z karty urlopowej bo w tej
::    karcie jest już wyzerowana liczba godzin.
      || {? H_UM.EKW_LICZ='T' & H_UM.EKW=0 & H_UM.EKW_NSP=0
         || _z_karty:=1
::       Niezależnie od znacznika jeśli jest już liczba godzin to pobierz ją z umowy
         |? H_UM.EKW<>0 | H_UM.EKW_NSP<>0
         || _ekw+=H_UM.EKW;
            _ekw_nsp+=H_UM.EKW_NSP;
            {? H_UM.LT=''
            || _put:=1
            ?}
         ?}
      ?};
      {? _z_karty
      || KART_URL.cntx_psh();
         KART_URL.index('PRAC_ROK');
         KART_URL.prefix(P.ref(),H_UM.DO~1);
         {? KART_URL.first()
         || _ekw+=KART_URL.URL_POZG;
            _ekw_nsp+=KART_URL.NSP_POZG
         ?};
         KART_URL.cntx_pop()
      ?};
      {? _put | _z_karty
      || H_UM.LT:=VAR.NAZWALIS;
         {? _z_karty
         || H_UM.EKW:=_ekw;
            H_UM.EKW_NSP:=_ekw_nsp
         ?};
         H_UM.put()
      ?};

      H_UM.prev()
   !}
?};
H_UM.cntx_pop();
_ekw+=_ekw_nsp;
_ekw


\nominal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Zwraca wartości nominalne płacy zasadniczej/stawki godzinowej, dodatku funcyjnego/dodatku brygadzistowskiego.
::       Wartości określane są z przebiegu zatrudnienia na ostatni dzień miesiąca listy płac.
::   WE:
::   WY:
::  OLD: \nominal/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_dt:=date(O.R,O.M,0);
_RetVal:=0;
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_dt)
|| _hsx:=exec('hsx','lista_licz',_dt);
   _kw1:=_hsx.S1;
   _kw2:=_hsx.S2;
   _kw3:=_hsx.S3;
   _cp:=-(1+H.CP().S);
   _RetVal:=
      {? _cp='f' || _s1:=91; _s2:=93; _kw3
      |? _cp='u' || _s1:=90; _s2:=92; _kw3
      || _s1:=_s2:=0
      ?};
   {? _s1 & _s2
   || FUNKCJE.LK(_s1,,_kw1);
      FUNKCJE.LK(_s2,,_kw2)
   ?}
?};
H.cntx_pop();
FUNKCJE.LK(7158,,,1);
_RetVal


\rozlicz_skl_okr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: Przeliczanie premii okresowych. Formuła rozpisuje wszystkie premie okresowe wprowadzone dla pracownika zgodne
::       z parametryzacją premii okresowych.
::  OLD: \rozlicz/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_POKR.cntx_psh();
PAR_POKR.index('PAR_POKR');
PAR_POKR.prefix(exec('ref_firma','ustawienia'));
FUNKCJE.LK(7210,,,1);
{? PAR_POKR.first()
|| {!
   |? FUNKCJE.LK(PAR_POKR.R().RN,,,1) ;
      {? PAR_POKR.R_N<>null
      || FUNKCJE.LK(PAR_POKR.R_N().RN,,,1)
      ?};
      PAR_POKR.next()
    !}
?};
PAR_POKR.cntx_pop();

_d_lt:=date(O.R,O.M,1);

PREM_OKR.cntx_psh();
PREM_OKR.index('PREM_OKR');
PREM_OKR.prefix(P.ref());
{? PREM_OKR.first()
|| {!
   |? {? PREM_OKR.LT='' & PREM_OKR.O_OD<=date(O.R,O.M,0)
      || PREM_OKR.LT:=VAR.NAZWALIS;
         PREM_OKR.TT:='R';
         PREM_OKR.put()
      |? PREM_OKR.LT=VAR.NAZWALIS & PREM_OKR.TT<>'R'
      || PREM_OKR.TT:='R';
         PREM_OKR.put()
      ?};
      PREM_OKR.next()
   !};
   PREM_OKR.first();
   _ok:=0;
   {!
   |? {? PREM_OKR.LT=VAR.NAZWALIS
      || _ok+=1;
         _put:=0;
         _fm:={? PREM_OKR.SKP().CZY_FM='T' & PAR_POKR.FM<>'' || PAR_POKR.FM || '' ?};
         {? PREM_OKR.LT='' | PREM_OKR.TT='Z'
         || PREM_OKR.LT:=VAR.NAZWALIS;
            PREM_OKR.TT:='R';
            _put:=1
         ?};
         {? +_fm
         || PREM_OKR.KW_W:=($_fm)();
            {? PREM_OKR.KW_W=0
            || PREM_OKR.B_WYP:='T'
            ?};
            _put:=1
         |? PREM_OKR.KW_N & ~PREM_OKR.KW_W & PREM_OKR.B_WYP<>'T'
         || PREM_OKR.KW_W:=PREM_OKR.KW_N;
            _put:=1
         ?};
         {? _put
         || PREM_OKR.put()
         ?};
         FUNKCJE.LK(PAR_POKR.R().RN,,PREM_OKR.KW_W+FUNKCJE.L(PAR_POKR.R().RN));
         {? PAR_POKR.CZY_PKN='T' & PAR_POKR.R_N<>null & PREM_OKR.B_WYP<>'T'
         || FUNKCJE.LK(PAR_POKR.R_N().RN,,PREM_OKR.KW_N+FUNKCJE.L(PAR_POKR.R_N().RN))
         ?}
      ?};
      PREM_OKR.next()
   !};
   {? _ok || FUNKCJE.LK(7210,,_ok) ?}
?};
PREM_OKR.cntx_pop()


\zasadnicza
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Formuła oblicza płacę zasadniczą z uwzględnieniem nieobecności.
::   WE:
::   WY:
::  OLD: \zasad/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
: formułki pomocnicze: fill_tb, fill_tb1, set_cal
: wypełnienie tablicy roboczej
fill_tb:="
   {? var_pres('_f')<>type_of(null)
   || _f:=null
   ?};
   _exit:=0;
   {? finish>0
   || {! _i:=1..finish
      |? ~_exit
      |! {? miesiac[_i]=_b & ref[_i]=_c & ref_N[_i]=_f & __RUB.sys_attr(nieokod[_i],15,date(O.R,O.M,0))
         || _exit:=1;
            {? __RUB.sys_attr(nieokod[_i],151,date(O.R,O.M,0))
            || dnik[_i]+=_d
            || dnir[_i]+=_e;
               dnikr[_i]+=_d
            ?}
         ?}
      !}
   ?};
   _exit
";
: wypełnienie tablicy roboczej
fill_tb1:="
   miesiac[finish]:=_a;
   nieokod[finish]:=kod_nie;
   {? __RUB.sys_attr(kod_nie,151,date(O.R,O.M,0))
   || dnik[finish]:=_c;
      dnir[finish]:=0;
      dnikr[finish]:=0
   || dnir[finish]:=_b;
      dnik[finish]:=0;
      dnikr[finish]:=_c
   ?};
   stawka1[finish]:=sta[1];
   stawka2[finish]:=sta[2];
   stawka3[finish]:=sta[3];
   stawka4[finish]:=sta[4];
   ref[finish]:=href;
   ref_N[finish]:=_d;
   godz_nom[finish]:=_e
";
: ustawienie kalendarza pracownika
set_cal:="
   {? P.KAL<>null
   || __KAL.set_cal(P.KAL,_a);
      jest_cal:=1
   ?}
";
: powołanie tablic roboczych
make_tb:="
  {? var_pres('miesiac')>100  || obj_del(miesiac) ?};  miesiac:=obj_new(rozmiar);
  {? var_pres('nieokod')>100  || obj_del(nieokod) ?};  nieokod:=obj_new(rozmiar);
  {? var_pres('dnir')>100     || obj_del(dnir) ?};     dnir:=obj_new(rozmiar);
  {? var_pres('dnik')>100     || obj_del(dnik) ?};     dnik:=obj_new(rozmiar);
  {? var_pres('dnikr')>100    || obj_del(dnikr) ?};    dnikr:=obj_new(rozmiar);
  {? var_pres('stawka1')>100  || obj_del(stawka1) ?};  stawka1:=obj_new(rozmiar);
  {? var_pres('stawka2')>100  || obj_del(stawka2) ?};  stawka2:=obj_new(rozmiar);
  {? var_pres('stawka3')>100  || obj_del(stawka3) ?};  stawka3:=obj_new(rozmiar);
  {? var_pres('stawka4')>100  || obj_del(stawka4) ?};  stawka4:=obj_new(rozmiar);
  {? var_pres('ref')>100      || obj_del(ref) ?};      ref:=obj_new(rozmiar);
  {? var_pres('ref_N')>100    || obj_del(ref_N) ?};    ref_N:=obj_new(rozmiar);
  {? var_pres('godz_nom')>100 || obj_del(godz_nom) ?}; godz_nom:=obj_new(rozmiar);
  dekltab:=1
";
: zmienna ZUS - usunięcie korekt
exec('usun_kor','korekty_zus',1);

: nieobecności rozliczane kalendarzowo
:04,05,06,07,08,09,10,16,17,18,19,20,23
kodkal:=151;
: w dniach roboczych
:01,02,03,14,15,21
kodrob:=152;

href:=dekltab:=finish:=exit:=kod_nie:=jest_cal:=OZ_KODDEL:=OZ_ODDEL:=0;
: zmienna okreslająca rozmiar tablicy roboczej
rozmiar:=60;

: początek miesiąca
_data1:=date(O.R,O.M,1);
: koniec miesiąca
_data2:=date(O.R,O.M,0);
::ustawienie kalendarza pracownika w poprawka ER/WRT/XP/12.51/2212/0028
::Pracownik z indywidualnym kalendarzem przy braku ustawienia kalendarza pracownika możliwe złe
::wyliczenia płacy zasadniczej w funkcji newzasad.fml\zasad _mcrob:=exec(,'licz_go',_data1,_data2,1)
set_cal(_data1~1);
: godziny robocze
_mcrob:=exec('nominal','godziny',_data1,_data2,1);

: tablica przechowująca aktualne wynagrodzenie
{? var_pres('AktuWyn')<100
|| AktuWyn:=obj_new(4)
?};
: tablica przechowująca sumę potrąceń
{? var_pres('SumaPot')<100
|| SumaPot:=obj_new(4)
?};
: tablica pomocnicza
{? var_pres('sta')<100
|| sta:=obj_new(4)
?};
: tablica pomocnicza
{? var_pres('sta_pom')<100
|| sta_pom:=obj_new(4)
?};
{! _i:=1..4
|! AktuWyn[_i]:=SumaPot[_i]:=sta[_i]:=sta_pom[_i]:=0
!};

ust_dwyn:="
   {? N.OD>_a & _c=date(0,0,0)
   || dzie_wyn:=_a
   |? _c<>date(0,0,0) & N.OD<>_c+1
   || dzie_wyn:=N.OD-1
   |? N.DO+1=_b
   || dzie_wyn:=_b
   |? dzie_wyn=_b & N.DO=_b
   || dzie_wyn:=#0
   ?}
";

AktuMC:=$_data1-3;
H_ODDE.cntx_psh();
H_ODDE.use('h_oddet');
H_ODDE.index('HOD');

N.cntx_psh;
N.index('NIEOLSOD');
N.prefix('N',P.ref(),VAR.NAZWALIS);

H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');

:: Dla pracowników rozliczanych z godzin za pomocą Harmonogramów
:: kalendarz zamieniamy na standardowy
{? _data1<P.DZA & P.DZA<=_data2 & (__KAL.grafik(_data2)='T' | __KAL.p_kin(_data2)='T')
|| __KAL.set_cal('standard',_data1~1)
?};
{? P.DZ<_data2 & P.DZ>=_data1 & (__KAL.grafik(_data1)='T' | __KAL.p_kin(_data1)='T')
|| __KAL.set_cal('standard',_data1~1)
?};
{? _mcrob=0
|| _zero_g:=1;
   RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
        'Brak danych odnośnie zaplanowanych godzin roboczych dla pracownika w miesiącu: '@+_data1$8+'.',
        'Należy upewnić się czy dane w kalendarzu pracownika są prawidłowe.'@,
        'Przyjęto kalendarz nominalny "standard".'@);
   __KAL.set_cal('standard',_data1~1);
   _mcrob:=exec('nominal','godziny',_data1,_data2,1)
|| _zero_g:=0
?};

{? H.last()
|| {? H.find_le(_data1)
   || {!
      |? {? H.KODDEL='T'
         || OZ_KODDEL:=1
         ?};
         {? H.ODDEL='T'
         || OZ_ODDEL:=1
         ?};
         H.next() & H.OD<=_data2
      !}
   ?}
?};

{? H.last()
|| exec('mc_placa_newzasad','lista_licz',_data1,_data2,_mcrob);
   AktuWyn[1]+=sta_pom[1];
   AktuWyn[2]+=sta_pom[2];
   AktuWyn[3]+=sta_pom[3];
   AktuWyn[4]+=sta_pom[4]
|| RAPLS.msg(
      P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Brak danych w przebiegu zatrudnienia.'@
   );
   exit:=1
?};
{? ~_zero_g || set_cal(_data1~1) ?};
{? var_pres('pom')>100 || obj_del(pom) ?};
dzie_wyn:=pom:=date(0,0,0);

{? N.first() & ~exit
||
:  Ewentualne rozbicie nieobecności dla zmiany wymiaru podczas jej trwania oraz zmiany dodatków
   exec('zm_umo','!ppl_pll_nals',0,1);
   exec('zm_umo','!ppl_pll_nals',0);
   N.first();
   make_tb();
   _filln:="
      N.NR:=__KAL.w_days(N.OD,N.DO);
      N.NK:=N.DO-N.OD+1
   ";
   {!
   |? _stop:=0;
      {? P.DZ<>date(0,0,0)
      || {? P.DZ<N.DO
         || N.DO:=P.DZ;
            _filln();
            {? N.DO<N.OD
            || _stop:=1
            ?}
         ?}
      ?};
      {? N.DO<P.DZA
      || _stop:=1
      || {? N.OD<P.DZA
         || N.OD:=P.DZA;
            _filln()
         ?};
         {? N.DO<N.OD
         || _stop:=1
         ?}
      ?};
      kod_nie:=N.NB().RN;
      {? __RUB.sys_attr(kod_nie,15,N.OD) & ~_stop & ~exit
      || _nie_od:=N.OD;
         _nie_do:=N.DO;
         _mc_kon:=date(N.OD~1,N.OD~2,0);
::       Przy braku kalendarza w bieżącym miesiącu a mamy nieobecności
::       z poprzednich miesięcy trzeba ustawić odpowiedni kalendarz pracownika
::       ponieważ mamy ustalony __KAL.set_cal('standard',_data1~1) i ustawiona zmienna _zero_g=1
         {? _zero_g=1 & _nie_do<_data1 || set_cal(_data1~1) ?};
         {? H.last()
         || H.find_le(N.OD);
            _hsx:=exec('hsx','lista_licz',N.OD,N.OD);
            sta[1]:=_hsx.S1;
            sta[2]:=_hsx.S2;
            sta[3]:=_hsx.S3;
            sta[4]:=_hsx.S4;
            obj_del(_hsx);
            &_hsx;
            href:=H.ref();
            N.POTR1:=N.POTR2:=N.POTR3:=N.POTR4:=0;
            N.put();
            {? _mc_kon<_nie_do
            || {!
               |? _mc_kon<_nie_do
               |! N.OD:=_nie_od;
                  N.DO:=_mc_kon;
                  _nie_od:=_mc_kon+1;
:                 w buforze znajdują się rozpisane nieobecności
                  {? ~__RUB.sys_attr(N.NB,1318,N.OD)
                  || ust_dwyn(_data1,_data2,pom)
                  ?};
                  exec('zprzesz','!ppl_pll_nals',N.OD,N.DO,,N.ref());
                  _mc_kon:=date(_nie_od~1,_nie_od~2,0);
                  {? _mc_kon>=_nie_do
                  || _mc_kon:=_nie_do;
                     exec('zprzesz','!ppl_pll_nals',_nie_od,_nie_do,,N.ref());
                     _mc_kon:=date(9999,1,1)
                  ?}
               !}
            || {? ~__RUB.sys_attr(N.NB,1318,N.OD)
               || ust_dwyn(_data1,_data2,pom)
               ?};
               exec('zprzesz','!ppl_pll_nals',N.OD,N.DO,,N.ref())
            ?}
         ?};
         pom:=N.DO;
::       Mamy ustawiony kalendarz pracownika ale _zero_g=1 czyli trzeba przywrócić
::       nominalny kalendarz "standard"
         {? _zero_g=1 & _nie_do<_data1 || __KAL.set_cal('standard',_data1~1) ?}
      ?};
      N.next() & ~exit
   !}
?};

: sumowanie nieobecności z przebiegu zatrudnienia
{? ~exit
|| exec('nieohist','!ppl_pll_nals')
?};
{? finish & ~exit
|| _Mcstring:='';
   _liczmc:=0;
   {! _i:=1..finish
   |! {? (_Mcstring*miesiac[_i])=0
      || _Mcstring+=miesiac[_i];
         _liczmc+=1
      ?}
   !};
   {? _liczmc>0
   || {? var_pres('wm')>100
      || obj_del(wm)
      ?};
      wm:=obj_new(4);
      {? var_pres('potracen')>100
      || obj_del(potracen)
      ?};
      potracen:=obj_new(4);
      {! _i:=1.._liczmc
      |! {! _s:=1..4
         |! wm[_s]:=potracen[_s]:=sta_pom[_s]:=0
         !};
         _mc:=((_i-1)*7)-(_i*7+_Mcstring);
:        wyciagniecie daty z napisu
         _data1:=date(#(4+_mc),#(_mc+2),1);
         _data2:=date(#(4+_mc),#(_mc+2),0);
:        dni kalendarzowe
         _mckal:=(_data2-_data1)+1;
         _mckal-=exec('dnpzazw','nieobecnosc',_data1,_data2,'dk');
         _mcrob:=exec('nominal','godziny',_data1,_data2,1);
         {? _mc=AktuMC
            || wm[1]+=AktuWyn[1];
               wm[2]+=AktuWyn[2];
               wm[3]+=AktuWyn[3];
               wm[4]+=AktuWyn[4]
            || H.last();
               exec('mc_placa_newzasad','lista_licz',_data1,_data2,_mcrob);
               wm[1]+=sta_pom[1];
               wm[2]+=sta_pom[2];
               wm[3]+=sta_pom[3];
               wm[4]+=sta_pom[4]
         ?};
         _dnikal:=_dnirob:=_dnikalrob:=0;
         {! _z:=1..finish
         |! {? miesiac[_z]=_mc
            || _dnikal+=dnik[_z];
               _dnirob+=dnir[_z];
               _dnikalrob+=dnikr[_z]
            ?}
         !};
         H.cntx_psh();
         H.index('_HISTKOD');
         H.prefix(P.ref,'Z');
         _PAR_240:=PAR_SKID.get(240)='T';
         _wsk_proc:=1;
         {! _z:=1..finish
         |! _n_potr:={? ref_N[_z] || N.seek(ref_N[_z]) ?};
            {? _n_potr & __RUB.sys_attr(N.NB,1318,N.OD)
            || _wsk_proc:=__RUB.sys_val(1318,N.OD)
            || _wsk_proc:=1
            ?};
            {? __RUB.sys_attr(nieokod[_z],kodkal,date(O.R,O.M,0)) & miesiac[_z]=_mc
            || 'potrącenia kalendarzowe';
               {? H.find_le(_data2)
               || {? -(1+H.CP().S)<>'f'
                  || {? _PAR_240
                     || _kw:=(stawka1[_z]/30$2)*dnik[_z]
                     || _kw:=(stawka1[_z]/30)*dnik[_z]
                     ?};
                     potracen[1]+=_kw;
                     {? _n_potr
                     || N.POTR1+=_kw
                     ?}
                  ?};
                  {? -(1+H.CP().S)<>'f'
                  || {? _PAR_240
                     || _kw:=(stawka4[_z]/30$2)*dnik[_z]
                     || _kw:=(stawka4[_z]/30)*dnik[_z]
                     ?};
                     potracen[4]+=_kw;
                     {? _n_potr
                     || N.POTR4+=_kw
                     ?}
                  ?}
               ?};

               {? _PAR_240
               || _kw:=(stawka2[_z]/30$2)*dnik[_z]
               || _kw:=(stawka2[_z]/30)*dnik[_z]
               ?};
               potracen[2]+=_kw;
               {? _n_potr
               || N.POTR2+=_kw
               ?};

               {? _PAR_240
               || _kw:=(stawka3[_z]/30$2)*dnik[_z]
               || _kw:=(stawka3[_z]/30)*dnik[_z]
               ?};
               potracen[3]+=_kw;
               {? _n_potr
               || N.POTR3+=_kw
               ?};
::             specyficzna sytuacja - rozliczamy luty w innym miesiącu, gdzie luty w całosci jest nieobecnością
::             oraz częsciowo rozliczony w innym miesiacy
               {? _n_potr & N.DO~2=2 &
                  date(N.OD~1,N.OD~2,1)<>date(O.R,O.M,1) &
                  N.DO=date(N.DO~1,N.DO~2,0) & N.OD>date(N.OD~1,N.OD~2,1)
               || {? exec('korekta_luty','!ppl_pll_nals')
                  || ile_dni:=date(N.OD~1,N.OD~2,0)-date(N.OD~1,N.OD~2,1)+1;
                     ile_dni:=30-ile_dni;
                     {? -(1+H.CP().S)<>'f'
                     || {? _PAR_240
                        || _kw:=(stawka1[_z]/30$2)*ile_dni
                        || _kw:=(stawka1[_z]/30)*ile_dni
                        ?};
                        potracen[1]+=_kw;
                        N.POTR1+=_kw;

                        {? _PAR_240
                        || _kw:=(stawka4[_z]/30$2)*ile_dni
                        || _kw:=(stawka4[_z]/30)*ile_dni
                        ?};
                        potracen[4]+=_kw;
                        N.POTR4+=_kw
                     ?};
                     {? _PAR_240
                     || _kw:=(stawka2[_z]/30$2)*ile_dni
                     || _kw:=(stawka2[_z]/30)*ile_dni
                     ?};
                     potracen[2]+=_kw;
                     N.POTR2+=_kw;
                     {? _PAR_240
                     || _kw:=(stawka3[_z]/30$2)*ile_dni
                     || _kw:=(stawka3[_z]/30)*ile_dni
                     ?};
                     potracen[3]+=_kw;
                     N.POTR3+=_kw;
                     &ile_dni
                  ?}
               ?};
               {? _n_potr
               || N.put()
               ?}
            |? miesiac[_z]=_mc & godz_nom[_z]
            || 'potracenia robocze';
               {? H.find_le(_data2)
               || {? -(1+H.CP().S)<>'f'
                  || {? _PAR_240
                     || _kw:=(stawka1[_z]/godz_nom[_z]*_wsk_proc$2)*dnir[_z]
                     || _kw:=(stawka1[_z]/godz_nom[_z]*_wsk_proc)*dnir[_z]
                     ?};
                     potracen[1]+=_kw;
                     {? _n_potr
                     || N.POTR1+=_kw
                     ?};

                     {? _PAR_240
                     || _kw:=(stawka4[_z]/godz_nom[_z]*_wsk_proc$2)*dnir[_z]
                     || _kw:=(stawka4[_z]/godz_nom[_z]*_wsk_proc)*dnir[_z]
                     ?};
                     potracen[4]+=_kw;
                     {? _n_potr
                     || N.POTR4+=_kw
                     ?}
                  ?}
               ?};
               {? _PAR_240
               || _kw:=(stawka2[_z]/godz_nom[_z]*_wsk_proc$2)*dnir[_z]
               || _kw:=(stawka2[_z]/godz_nom[_z]*_wsk_proc)*dnir[_z]
               ?};
               potracen[2]+=_kw;
               {? _n_potr
               || N.POTR2+=_kw
               ?};
               {? _PAR_240
               || _kw:=(stawka3[_z]/godz_nom[_z]*_wsk_proc$2)*dnir[_z]
               || _kw:=(stawka3[_z]/godz_nom[_z]*_wsk_proc)*dnir[_z]
               ?};
               potracen[3]+=_kw;
               {? _n_potr
               || N.POTR3+=_kw;
                  N.put()
               ?}
            ?}
         !};
         H.cntx_pop();

        {? var_pres('_tab_pr')>100 || obj_del(_tab_pr) ?};
         _tab_pr:=exec('dane_pracownika','pracownik',,_data1,_data2,1);
         _DG:=sql('select sum(DG) DG from :_a',_tab_pr).DG;
         _d_listy:=date(O.R,O.M,1);
         {? _tab_pr.first
         || {!
            |? {? _d_listy<date(#('20'+(2+(1-_tab_pr.N_LT))),#(2+(3-_tab_pr.N_LT)),1)
               || _tab_pr.del(,1)=2
               || _tab_pr.next
               ?}
            !}
         ?};
:: ER/WRT/XP/23.25/2312/0024 - ER/WRT/XP/22.26/2311/0033 - Siła wyższa w jedynym dniu zatrudnienia w mcu
:: nie jest wyliczana płaca zasadnicza
         _NG_SW:=sql('select sum(NG) NG from :_a where NB in (:_b)',_tab_pr,__RUB.sys_sql(1318)).NG;
         _NK_SW:=sql('select sum(NK) NK from :_a where NB in (:_b)',_tab_pr,__RUB.sys_sql(1318)).NK;
:: ER/WRT/XP/23.25/2311/0087 - ER/WRT/XP/22.26/2311/0035 - Błędne naliczenie potrącenia za nieobecność -
:: miesiąc 31 dni i ustawiony atrybut 153
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2304/0016
         {? var_pres('_tab_nie')>100 || obj_del(_tab_nie) ?};
         _tab_nie:=sql('select sum(NG) NG, sum(NK) NK from :_a where NB in (:_b)',_tab_pr,__RUB.sys_sql(15));
         _NG:=_tab_nie.NG;
         _NK:=_tab_nie.NK;
         _r_153:=__RUB.sys_sql(153);
         {? +_r_153
         || {? var_pres('_tab_NR')>100 || obj_del(_tab_NR) ?};
            _tab_NR:=sql('select sum(NR) NR, sum(NG) NG from :_a where NB in (:_b)',_tab_pr,_r_153);
            _NR_DEL:=_tab_NR.NR;
            _NG_DEL:=_tab_NR.NG;
:: ER/WRT/XP/23.25/2311/0087 - ER/WRT/XP/22.26/2311/0035 - Błędne naliczenie potrącenia za nieobecność -
:: miesiąc 31 dni i ustawiony atrybut 153
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2304/0016
:: Jeżeli nieobecność trwa cały mc kalendarzowy to nie ma pensji i zerowane są _NG_DEL, _NR_DEL
            {? _mckal=_NK || _NG_DEL:=_NR_DEL:=0 ?};
            obj_del(_tab_NR); &_tab_NR
         || _NG_DEL:=_NR_DEL:=0
         ?};
         _NG-=(_NG_DEL+_NG_SW);
         {? var_pres('potr')>100
         || obj_del(potr)
         ?};
         potr:=obj_new(4);
         {! _z:=1..4
         |! potr[_z]:=0
         !};
         {? var_pres('wyn_dzie')>100 || obj_del(wyn_dzie) ?};
         wyn_dzie:=obj_new(4);
         {! _z:=1..4 |! wyn_dzie[_z]:=0 !};
         {! _s:=1..4
         |! {? (_dnikal+_dnikalrob-_NK_SW)=30 & _mckal=31 & dzie_wyn<>date(0,0,0)
            || {? potracen[_s]$2<>wm[_s]
               || exec('potr_ustaw','!ppl_pll_nals',_s,_data1,potracen[_s]-wm[_s]);
                  potracen[_s]:=wm[_s]
               ?};
               _wsk_proc:=1;
               {? _s=1
               || exec('wyn_dzienne','!ppl_pll_nals',dzie_wyn,_mcrob);
                  {? sql('select NG from :_a where NB in (:_b) and D = :_c',_tab_pr,__RUB.sys_sql(1318),dzie_wyn~3).NG
                  || _wsk_proc:=__RUB.sys_val(1318,dzie_wyn)
                  ?}
               ?};
               potracen[_s]-=(wyn_dzie[_s]*_wsk_proc);
               exec('potr_ustaw','!ppl_pll_nals',_s,_data1,wyn_dzie[_s])
            |? _mc<>AktuMC
            || _wsk_proc:=1;
               {? _s=1
               || _dzie_wyn:=exec('potr_pop_mc','!ppl_pll_nals',_data1,_data2,_mcrob);
                  {? _dzie_wyn<>date(0,0,0)
                  || exec('wyn_dzienne','!ppl_pll_nals',_dzie_wyn,_mcrob);
                     {? sql('select NG from :_a where NB in (:_b) and D = :_c',
                           _tab_pr,__RUB.sys_sql(1318),_dzie_wyn~3).NG
                     || _wsk_proc:=0
                     ?}
                  ?};
                  &_dzie_wyn
               ?};
               potracen[_s]-=(wyn_dzie[_s]*_wsk_proc);
               exec('potr_ustaw','!ppl_pll_nals',_s,_data1,wyn_dzie[_s]);
               _po_mc:=wm[_s]-potr[_s];
               {? _po_mc<0
               || _po_mc:=0
               ?};
               {? potracen[_s]$2>_po_mc | _DG<=_NG
               || exec('potr_ustaw','!ppl_pll_nals',_s,_data1,potracen[_s]-_po_mc);
                  potracen[_s]:=_po_mc
               ?};
               &_po_mc

            |? _dnikal=_mckal | _dnikal=30 | (_dnikal+_dnikalrob-_NK_SW=_mckal) | _DG<=_NG
            || exec('potr_ustaw','!ppl_pll_nals',_s,_data1,potracen[_s]-wm[_s]);
               potracen[_s]:=wm[_s]
            |? _dnirob-_NG_DEL-_NG_SW=_mcrob
            || exec('potr_ustaw','!ppl_pll_nals',_s,_data1,potracen[_s]-wm[_s]);
               potracen[_s]:=wm[_s]
            |? potracen[_s]$2>wm[_s]
            || exec('potr_ustaw','!ppl_pll_nals',_s,_data1,potracen[_s]-wm[_s]);
               potracen[_s]:=wm[_s]
            ?};
            {? potracen[_s]$2<>0
            || exec('kor_zap_kor_zus','lista_licz',_data1,potracen[_s]$2)
            ?}
         !};
         obj_del(potr);
         &potr;
         {! _s:=1..4
         |! SumaPot[_s]+=potracen[_s]
         !}
      !};
      obj_del(wm); &wm;
      obj_del(potracen); &potracen;
      obj_del(wyn_dzie); &wyn_dzie;
      &_dnirob;
      &_dnikal
   ?}
?};
{? dekltab
|| obj_del(miesiac);  &miesiac;
   obj_del(nieokod);  &nieokod;
   obj_del(dnir);     &dnir;
   obj_del(dnik);     &dnik;
   obj_del(dnikr);    &dnikr;
   obj_del(stawka1);  &stawka1;
   obj_del(stawka2);  &stawka2;
   obj_del(stawka3);  &stawka3;
   obj_del(stawka4);  &stawka4;
   obj_del(ref);      &ref;
   obj_del(ref_N);    &ref_N;
   obj_del(godz_nom); &godz_nom
?};
_z:=0;
{! _ind:=4..14
|! DoList.c[_ind]:=0
!};
{? N.first()
|| {? var_pres('ref_kor')>100
   || obj_del(ref_kor)
   ?};
   ref_kor:=obj_new(N.size());
   _s:=0;
   _jest_kor:=0;
   {!
   |? _s+=1;
      ref_kor[_s]:={? N.N_KOR || _jest_kor:=1; N.N_KOR ?};
      N.next()
   !};
   {? _jest_kor
   || {! _s:=1..obj_len(ref_kor)
      |! {! _ind:=1..obj_len(ref_kor)
         |! {? _ind<>_s & ref_kor[_s]=ref_kor[_ind]
            || ref_kor[_ind]:=0
            ?}
         !}
      !}
   ?};
   {? ~_jest_kor
   || obj_del(ref_kor);
      &ref_kor
   ?};
   &_jest_kor
?};

:: Informacja o wykonanym potrąceniu dla nieobecności, które nie mają wprowadzonej nominalnej liczby godzin
{? N.first
|| _zero_NG:=0;
   {!
   |? {? N.NG=0 & N.POTR1+N.POTR2+N.POTR3+N.POTR4
      || _zero_NG+=1
      ?};
      N.next
   !};
   {? _zero_NG & PAR_SKID.get(298)='N'
   || _sc:={? _zero_NG=1 || 'ć' || 'ci' ?};
      RAPLS.msg(
         P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
         'Znaleziono nieobecnoś'+_sc+' z wyliczonym potrąceniem oraz wartością zerową'@,
         'w przypisanej liczbie nominalnych godzin roboczych przypadających w czasie nieobecności.'@,
         'Należy zweryfikować poprawność danych oraz wyliczeń.'@
      )
   ?}
?};

: nieobecności wycofane
N.index('NIEOBWYC');
N.prefix('T',P.ref(),'W',O.ref());
{? N.first()
|| _wref_kor:=obj_new(N.size());
   _s:=1;
   {!
   |? _wref_kor[_s]:=#N.ref();
      _s+=1;
      N.next()
   !}
?};

N.clear();
{? {? var_pres('ref_kor')>100
   || _korekta:=ref_kor;
      1
   |? var_pres('_wref_kor')>100
   || _korekta:=_wref_kor;
      1
   || 0
   ?}
|| {!
   |? {! _s:=1..obj_len(_korekta)
      |! {? N.seek(_korekta[_s],)
         || DoList.c[4]+=N.POTR1; DoList.c[5]+=N.POTR2; DoList.c[6]+=N.POTR3; DoList.c[10]+=N.POTR4;
            {? N.POTR1+N.POTR2+N.POTR3+N.POTR4>0
            || exec('kor_zap_kor_zus','lista_licz',N.OD,-(N.POTR1+N.POTR2+N.POTR3+N.POTR4))
            ?};
            {? __RUB.sys_attr(N.NB,121,N.OD)
            || DoList.c[8]-=N.WART;
:              wprowadzenie zapisu korekt KCH dla wynagrodzenia chorobowego
               exec('kor_kch_nieo','!ppl_pll_nals',N.ref,N.WART,N.OD~1,N.OD~2,N.STD)
            |? __RUB.sys_attr(N.NB,122,N.OD)
            || {? __RUB.sys_attr(N.NB,1227,N.OD)
               || DoList.c[11]-=N.WART
               || DoList.c[9]-=N.WART
               ?}
            |? __RUB.sys_attr(N.NB,113,N.OD) | __RUB.sys_attr(N.NB,1312,N.OD)
            || DoList.c[7]-=N.WART
            |? __RUB.sys_attr(N.NB,1314,N.OD)
            || DoList.c[12]-=N.WART
            |? __RUB.sys_attr(N.NB,1318,N.OD)
            || DoList.c[13]-=N.WART
            |? __RUB.sys_attr(N.NB,1171,N.OD)
            || DoList.c[14]-=N.WART
            ?}
         ?}
      !};
      {? var_pres('_wref_kor')>100 & var_pres('ref_kor')>100
      || &_korekta;
         _korekta:=_wref_kor;
         &_wref_kor;
         &ref_kor;
         1
      ?}
   !}
?};

{? var_pres('ref_kor')>100
|| &ref_kor
?};
{! _s:=1..3
|! {? exit
   || DoList.c[_s]:=0
   || DoList.c[_s]:=AktuWyn[_s]-SumaPot[_s]$2;
      _z+=AktuWyn[_s]-SumaPot[_s]$2
   ?}
!};
:: Oddelegowania zagraniczne dla umy
{? O.F<>'F'
|| {? exit | ~OZ_ODDEL
   || FUNKCJE.LK(7158,,,1)
   || _oddelegowanie:=AktuWyn[4]-SumaPot[4]$2;
      {? OZ_KODDEL
      || _oddelegowanie:=exec('h_odde_prop','oddelegowanie',_oddelegowanie,,date(O.R,O.M,1),date(O.R,O.M,0),4)
      ?};
      FUNKCJE.LK(7158,,_oddelegowanie);
      _z+=_oddelegowanie$2
   ?}
?};
obj_del(AktuWyn); &AktuWyn;
obj_del(SumaPot); &SumaPot;
obj_del(sta);     &sta;
obj_del(sta_pom); &sta_pom;
N.cntx_pop();
H.cntx_pop();
H_ODDE.cntx_pop();
&dzie_wyn; &ust_dwyn; &pom;
&kodkal; &kodrob; &href; &kod_nie;
&finish; &rozmiar; &exit;
&fill_tb; &fill_tb1;
&set_cal; &jest_cal; &OZ_KODDEL; &OZ_ODDEL;
&AktuMC; &make_tb; &dekltab;
_z


\potr_newzasad
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Wysokość potrącenia za wskazany okres. Założenia:
::       - dotyczy bieżącego pracownika;
::       - wybrano wcześniej kalendarz;
::       - daty (parametry _a i _b) dotyczą tego samego miesiąca.
::   WE: _a - Początkowa data okresu.
::       _b - Końcowa data badanego okresu.
::       _c - Typ potrącenia
::          'dr' - dni robocze [domyślnie]
::             lub
::          liczba - liczba godzin roboczych nieobecności
::   WY:
::  OLD: \potr/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_odp:=obj_new('S1','S2','S3','S4');
{! _lp:=1..4
|! _odp[_lp]:=0
!};

{? var_pres('_a')=type_of(date()) & _a<>#0 || _ood:=_a || return(_odp) ?};
{? var_pres('_b')=type_of(date()) & _b<>#0 || _odo:=_b || return(_odp) ?};
{? 6+_ood$0<>6+_odo$0 || return(_odp) ?};
{? var_pres('_c')=type_of(0) || _typ:='gr' || _typ:='dr' ?};

{? _ood>_odo || _ood==_odo ?};

{? P.DZA<=_odo & (P.DZ=#0 | _ood<=P.DZ)
|| {? _ood<P.DZA || _ood:=P.DZA ?};
   {? P.DZ<>#0 & P.DZ<_odo || _odo:=P.DZ ?};

   _zaokr:=PAR_SKID.get(240)='T';

   _dpm:=date(_ood~1,_ood~2,1);
   _dkm:=date(_ood~1,_ood~2,0);
   _fnb:={? _typ='gr' || "__KAL.w_hours(_a,_b)" || "__KAL.w_days(_a,_b)" ?};
   KAL_NAZW.cntx_psh();
   KAL_ROK.cntx_psh();
   KAL_DEF.cntx_psh();
   KAL_OPIS.cntx_psh();
   R_WZCZ.cntx_psh();
   R_WZCZ.index('R_WZCZ');
   R_WZCZ.prefix(P.name(),P.ref());

   H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(_ood)
   || {!
      |? {? H.OD<=_odo & (H.DO=#0 | _ood<=H.DO)
         || _dp:={? H.OD<_ood || _ood || H.OD ?};
            _dk:={? H.DO=#0 | _odo<H.DO || _odo || H.DO ?};
            _hsx:=exec('hsx','lista_licz',_dk);
            {? _typ='gr'
            || __KAL.set_cal({? R_WZCZ.find_le(_dk) || R_WZCZ.KAL().NAZWA || 'standard' ?},_dk~1);
               _nom:=__KAL.w_hours(_dpm,_dkm)*H.RWY;
               exec('kal_prac','personel',_dp~1);
               {? _odo>_dk & __KAL.w_hours(_dp,_dk)>=_c
               || _nb:=_c;
                  _c:=0
               |? _odo>_dk & __KAL.w_hours(_dp,_dk)<_c
               || _nb:=__KAL.w_hours(_dp,_dk);
                  _c-=__KAL.w_hours(_dp,_dk)
               || _nb:=_c
               ?}
            || _nom:=_fnb(_dpm,_dkm);
               _nb:=_fnb(_dp,_dk)
            ?};
            {? _nom
            || {! _lp:=1 .. 4
               |! _odp[_lp]+={? _zaokr || (_hsx[_lp]/_nom$2)*_nb || (_hsx[_lp]/_nom)*_nb ?}
               !}
            ?};
            obj_del(_hsx);
            H.next()
         ?}
      !}
   ?};
   H.cntx_pop();
   R_WZCZ.cntx_pop();
   KAL_OPIS.cntx_pop();
   KAL_DEF.cntx_pop();
   KAL_ROK.cntx_pop();
   KAL_NAZW.cntx_pop();

   {! _lp:=1 .. 4 |! _odp[_lp]:=_odp[_lp]$2 !}
?};

_odp


\korekta_luty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2010]
:: OPIS: Sprawdzenie przypadku nieobecności lutowej rozbitej na dwóch listach
::   WY: 1 - konieczna korekta potrącenia
::       0 - bez dodatkowej obsługi
::  OLD: \kor_luty/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
_ok:=_zmiana:=0;
_lista:=N.LT;
{!
|? _od:=N.OD;
   {? N.prev() & N.DO=_od-1 & N.DO~2=_od~2 & (__RUB.sys_attr(N.NB,151,N.OD) | __RUB.sys_attr(N.NB,152,N.OD))
   || {? N.LT<>_lista
      || _zmiana:=1
      ?};
      {? N.LT=''
      || 0
      || {? N.OD~3=1
         || _ok:=1;
            0
         || 1
         ?}
      ?}
   || 0
   ?}
!};
N.cntx_pop();

_zmiana & _ok


\potr_ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Korekta potrąceń w nieobecnościach w sytuacjach specjalnych
::   WE: _a - rodzaj potrącenia od 1 do 3
::       _b - data z badanego okresu nieobecności
::       _c - rożnica do pomniejszenia
::  OLD: \ustaw_potr/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) | var_pres('_b')<>type_of(date)
|| return()
?};
{? _a=1
|| H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(date(_b~1,_b~2,0)) &  -(1+H.CP().S)='f'
   || return()
   ?}
?};

_roznica:=_c;
_next:=1;
{? _a & _roznica & N.last()
|| {!
   |? {? N.OD~1=_b~1 & N.OD~2=_b~2 & __RUB.sys_attr(N.NB,15,N.OD) & ($('N.POTR'+$_a))()>=_roznica &
         ({? __RUB.sys_attr(N.NB,152,N.OD) || N.NG>0 & ~__RUB.sys_attr(N.NB,1314,N.OD) || 1 ?})
      || ($('N.POTR'+$_a+'-='+form(_roznica,,,'9.')))();
         _next:=0;
         N.put()
      ?};
      _next & N.prev()
   !}
?}


\potr_pop_mc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2008]
:: OPIS: Wylicza potracenie z poprzednich miesiecy na podstawie nieobecnosci rozliczonych innymi
::       listami niż biezaca
::   WE: _a[DATE] - poczatek miesiaca
::       _b[DATE] - koniec miesiaca
::       _c[REAL] - godziny robocze w miesiacu
::   WY: dzien, za ktory nalezy policzyc dodatkowe wynagrodzenie lub data zerowa w pozostalych
::       przypadkach
::  OLD: \pop_mc/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_dzie_wyn:=_pom:=date(0,0,0);
_dni_kal:=0;
_mc_pocz:=_a;
_mc_konie:=_b;
_mc_rob:=_c;
_mc_kal:=30;
H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
{? N.find_le(_mc_konie)
|| {!
   |? {? (N.OD<=_mc_konie & N.DO>=_mc_pocz) & __RUB.sys_attr(N.NB,15,N.OD) & ~__RUB.sys_attr(N.NB,1318,N.OD)
      || {? __RUB.sys_attr(N.NB,151,N.OD)
         || _dni_kal+=N.NK
         ?};
         {? N.DO+1=_mc_konie
         || _dzie_wyn:=_mc_konie
         |? _pom<>date(0,0,0) & N.DO<>_pom-1
         || _dzie_wyn:=N.DO+1
         |? N.OD>_mc_pocz & _pom=date(0,0,0)
         || _dzie_wyn:=_mc_pocz
         ?}
      ?};
      {? (N.OD<=_mc_konie & N.DO>=_mc_pocz) & N.LT<>'' & N.LT<>VAR.NAZWALIS & __RUB.sys_attr(N.NB,15,N.OD) &
            ~__RUB.sys_attr(N.NB,1318,N.OD)
      || {? N.OD>_mc_pocz
         || _od:=N.OD
         || _od:=_mc_pocz
         ?};
         {? N.DO>_mc_konie
         || _do:=_mc_konie
         || _do:=N.DO
         ?};
         {? _do>=_od
         || H.find_le(_od);
            href:=H.ref();
            _hsx:=exec('hsx','lista_licz',_od,_od);
            sta[1]:=_hsx.S1;
            sta[2]:=_hsx.S2;
            sta[3]:=_hsx.S3;
            sta[4]:=_hsx.S4;
            obj_del(_hsx); &_hsx;
            potr[1]+=N.POTR1;
            potr[2]+=N.POTR2;
            potr[3]+=N.POTR3;
            potr[4]+=N.POTR4
         ?}
      ?};
      _pom:=N.OD;
      N.prev() & N.DO>=_mc_pocz
   !}
?};
N.cntx_pop();
H.cntx_pop();
{? _dzie_wyn<>date(0,0,0)
|| {? _dni_kal=30 & (_b-_a+1)=31
   || _dzie_wyn
   || date(0,0,0)
   ?}
|| date(0,0,0)
?}


\wyn_dzienne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2010]
:: OPIS: Wylicza wynagrodzenia na dany dzień
::   WE: _a[DATE] - badany dzień
::       _b[REAL] - liczba godzin w miesiącu
::   WY: wynagrodzenie policzone na dany dzień
::  OLD: \wyn_dzienne/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(date)
|| RAPLS.msg(
      P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
      'Błędny typ argumentu wywołania formuły.'@
   );
   return(0)
?};
{? _a=date(0,0,0)
|| return(0)
?};
_god_rob:=__KAL.w_hours(_a,_a);
{? (P.DZA<=_a & (P.DZ>=_a | P.DZ=date(0,0,0))) & _god_rob
|| H.cntx_psh();
   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   H.find_le(_a);

   {? exec('czy_zmiana_wym','!ppl_pll_nals',_a)
   || _nomgodz:=__KAL.w_days(date(_a~1,_a~2,1),date(_a~1,_a~2,0))*exec('norma','godziny',_a)*H.WY$2
   || _nomgodz:=_b
   ?};

   _god_rob*={? P.KIN='T' || 1 || H.WY ?};
   _hsx:=exec('hsx','lista_licz',_a);
   sta[1]:=_hsx.S1;
   sta[2]:=_hsx.S2;
   sta[3]:=_hsx.S3;
   obj_del(_hsx); &_hsx;
   _pom:=(sta[1]/_nomgodz$2)*_god_rob;
   wyn_dzie[1]:=_pom;
   _pom:=(sta[2]/_nomgodz$2)*_god_rob;
   wyn_dzie[2]:=_pom;
   _pom:=(sta[3]/_nomgodz$2)*_god_rob;
   wyn_dzie[3]:=_pom;
   H.cntx_pop()
?}


\zprzesz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA
:: OPIS: Wypelnienie tablic potr[] oraz sta[]
::   WE: _a - poczatek nieobecnosci
::       _b - koniec nieobecnosci
::       _c - godziny robocze w miesiacu
::       [_d] - N.ref
::       [_e] - 'R' - godziny roboczze, 'K' - dni kalendarzowe
::       [_f] - 1 zliczenie wartosci potracen zapisanych w tabeli N
::  OLD: \zprzesz/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<>type_of(null)
|| _d:=null
?};
_dni_kal:=_god_rob:=0;
_wym:="{? P.KIN='T' || 1 || H.WY ?}";
_wym1:="
   _wym:=1;
   R_WZCZ.cntx_psh();
   R_WZCZ.index('R_WZWND');
   R_WZCZ.prefix(P.name(),P.ref(),'N','N');
   {? R_WZCZ.find_le(_a)
   || _wym:=
         {? R_WZCZ.KIN='T' | R_WZCZ.GRAFIK='T'
         || 1
         || H.WY
         ?}
   ?};
   R_WZCZ.cntx_pop();
   _wym
";

{? _b>H.DO & H.DO<>date(0,0,0)
|| _e_pom:=1;
   {!
   |? (_b>=H.OD | H.DO=date(0,0,0)) & _e_pom
   |! _pom:=
         {? H.DO<>date(0,0,0)
         || {? _b>H.DO || H.DO || _b ?}
         || _b
         ?};
      _dni_kal:=(_pom-_a)+1;
      {? _d<>null & (_<>6 | _=6 & _f)
      || {? N.OD=_a & _pom=N.DO
         || _god_rob:=N.NG
         || _god_rob:=__KAL.w_hours(_pom,_a)*_wym()$2
         ?}
      || _god_rob:=__KAL.w_hours(_pom,_a)*_wym()$2
      ?};
      _godz_nom:=__KAL.w_hours(_a,_b,1)*_wym1(_b)$2+
         exec('nomgodzr_newzasad','lista_licz',date(_a~1,_a~2,1),date(_a~1,_a~2,0),_a,_b,H.WY);
      {? _=6
      || {? _f & N.POTR1+N.POTR2+N.POTR3+N.POTR4>0
         || potr[1]+=N.POTR1;
            potr[2]+=N.POTR2;
            potr[3]+=N.POTR3;
            potr[4]+=N.POTR4
         || {? PAR_SKID.get(240)='T'
            || potr[1]+=(sta[1]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[2]+=(sta[2]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[3]+=(sta[3]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[4]+=(sta[4]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?}

            || potr[1]+=(sta[1]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[2]+=(sta[2]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[3]+=(sta[3]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
               potr[4]+=(sta[4]/_c)*{? _e='K' || _dni_kal || _god_rob ?}
            ?}
         ?}
      || {? ~fill_tb(kod_nie,$_a-3,href,_dni_kal,_god_rob,_d)
         || finish+=1;
            {? finish<=rozmiar
            || fill_tb1($_a-3,_god_rob,_dni_kal,_d,_godz_nom)
            || RAPLS.msg(
                  P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                  'Przekroczony rozmiar tablicy roboczej.'@,
                  'Wyliczenia nie mogą być zrealizowane.'@
               );
               _e_pom:=0;
               exit:=1;
               finish-=1
            ?}
         ?}
      ?};
      _a:=_pom+1;
      {? _a>H.DO & H.DO<>date(0,0,0)
      || {? H.next()
         || _hsx:=exec('hsx','lista_licz',_a,_a);
            sta[1]:=_hsx.S1;
            sta[2]:=_hsx.S2;
            sta[3]:=_hsx.S3;
            sta[4]:=_hsx.S4;
            obj_del(_hsx); &_hsx;
            href:=H.ref();
            _e_pom:=1
         || _e_pom:=0
         ?}
      || _e_pom:=0
      ?}
   !}
|| _pom:=
      {? H.DO<>date(0,0,0)
      || {? _b>H.DO || H.DO || _b ?}
      || _b
      ?};
   _dni_kal:=(_pom-_a)+1;
   {? _d<>null & (_<>6 | _=6 & _f)
   || {? N.OD=_a & _pom=N.DO
      || _god_rob:=N.NG
      || _god_rob:=__KAL.w_hours(_pom,_a)*_wym()$2
      ?}
   || _god_rob:=__KAL.w_hours(_pom,_a)*_wym()$2
   ?};
   _godz_nom:=__KAL.w_hours(_a,_b,1)*_wym1(_b)$2+
      exec('nomgodzr_newzasad','lista_licz',date(_a~1,_a~2,1),date(_a~1,_a~2,0),_a,_b,H.WY);
   {? _=6
   || {? _f & N.POTR1+N.POTR2+N.POTR3>0
      || potr[1]+=N.POTR1;
         potr[2]+=N.POTR2;
         potr[3]+=N.POTR3;
         potr[4]+=N.POTR4
      || {? PAR_SKID.get(240)='T'
         || potr[1]+=(sta[1]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[2]+=(sta[2]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[3]+=(sta[3]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[4]+=(sta[4]/_c$2)*{? _e='K' || _dni_kal || _god_rob ?}
         || potr[1]+=(sta[1]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[2]+=(sta[2]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[3]+=(sta[3]/_c)*{? _e='K' || _dni_kal || _god_rob ?};
            potr[4]+=(sta[4]/_c)*{? _e='K' || _dni_kal || _god_rob ?}
         ?}
      ?}
   || {? ~fill_tb(kod_nie,$_a-3,href,_dni_kal,_god_rob,_d)
      || finish+=1;
         {? finish<=rozmiar
         || fill_tb1($_a-3,_god_rob,_dni_kal,_d,_godz_nom)
         || RAPLS.msg(
               P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
               'Przekroczony rozmiar tablicy roboczej.'@,
               'Wyliczenia nie mogą być zrealizowane.'@
            );
            exit:=1;
            finish-=1
         ?}
      ?}
   ?}
?}


\czy_zmiana_wym
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [11.22]
:: OPIS: Sprawdzenie czy była zmiana wymiaru zatrudnienia w podanym roku i miesiącu dla bieżącego pracownika.
::   WE: date - data z rokiem i miesiącem badania
::   WY: INTEGER - 1 - byla zmiana; 0 - brak zmiany
::  OLD: \czy_zm_wym/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czy_zmiana_wym','pracownik',_a)


\kor_kch_nieo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2011]
:: OPIS: Wyliczenie wartości korekty kasy chorych dla wycofanych nieobecności
::   WE:  _a - ref nieobecności
::        _b - wartość nieobecności
::        _c - rok
::        _d - miesiąc
::        _e - stawka dzienna
::  OLD: \kch_kor_nieo/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
_lista:='L'+FUNKCJE.ZNLISTY();

{? ~N.seek(_a)
|| return
?};

:: wyliczenie dla nieobecności korygujących, które dotyczą wynagrodzenia chorobowego
:: wartość liczona po stawce nieobecności wycofanej i po ilości dni kalendarzowych korekty
_wart_kor:=0;
N.cntx_psh();
N.index('NIEOTREE');
N.prefix(#_a);
{? N.first()
|| {!
   |? {? __RUB.sys_attr(N.NB,121,N.OD)
      || _wart_kor+=_e*(N.NK-N.DN-N.DK-N.OP*0.25)
      ?};
      N.next()
   !};
   _wart_kor:=_wart_kor$2
?};
N.cntx_pop();

_prkc:=exec('ust_nk','lista_licz',date(_c,_d,0),'PRKC');
:: pomniejszenie korekty kasy chorych o ewentualna wartosc z nieobecnosci korygujacej
:: tego samego typu
_wart_kor:=_b-_wart_kor;
_skladka:=(_wart_kor*_prkc*0.01)$2;

{? _skladka<=0
|| return
?};

:: Pobranie wartosci z innych korekt skladek z miesiaca
_suma_kor:=exec('kora_prac','korekty_zus',574110,2,_d,_c,N.LT);

:: pobranie wartości rzeczywistych składek z listy rozliczającej wycofaną nieobecność
LS.cntx_psh();
_skl_lista:=0;
LS.use(-N.LT);
LS.index('PRACNRRU');
LS.prefix(P.ref(),792);
{? LS.first() || {! |? _skl_lista+=LS.KW$2; LS.next() !} ?};
LS.cntx_pop();
:: Jeżeli nie ma wystarczającej składki - korygujemy wyliczenia
{? _suma_kor>=_skl_lista & _suma_kor
|| return
|? _skladka+_suma_kor>_skl_lista
|| _skladka:=_skl_lista-_suma_kor
?};

KORN.index('KOR_NAPN');
KORN.prefix(P.ref(),_a);
KOR.index('KOR_PRN');

_ok:=1;
:: usunięcie istniejącej korekty
{? KORN.first()
|| {!
   |? KOR.prefix(KORN.ref());
      {? KOR.first()
      || {!
         |? KOR.del()
         !}
      ?};
      KORN.del()
   !}
?};
:: wprowadzenie zapisu do korekt z jednym rekordem w pozycji, dotyczacym skladki na KCH
{? _ok
|| KORN.blank();
   KORN.LT:=_lista;
   KORN.ROK:=_c;
   KORN.MC:=_d;
   KORN.N:=_a;
   KORN.KN:='T';
   O.cntx_psh();
   O.index('LISTYPZN');
   O.prefix(exec('ref_firma','ustawienia'));
   {? O.find_key(-N.LT)
   || KORN.RU:=O.RU;
      KORN.MU:=O.MU
   || KORN.RU:=KORN.ROK;
      KORN.MU:=KORN.MC
   ?};
   O.cntx_pop();
   {? KORN.add()
   || KOR.prefix(KORN.ref(),__RUB.sys_kod(574110));
      _jest_kor:=KOR.first();
      {? ~_jest_kor
      || KOR.blank()
      ?};
      KOR.RU:=__RUB.ref(__RUB.sys_kod(574110));
      KOR.POD:=-_wart_kor$2;
      KOR.POTR:=-_wart_kor$2;
      KOR.SKL:=-_skladka;
      {? ~_jest_kor
      || KOR.add()
      || KOR.put()
      ?}
   ?};
   KORN.blank();
   KORN.LT:=_lista;
   KORN.ROK:=O.R;
   KORN.MC:=O.M;
   KORN.N:=_a;
   KORN.KN:='T';
   KORN.RU:=O.RU;
   KORN.MU:=O.MU;
   {? KORN.add()
   || KOR.prefix(KORN.ref(),__RUB.sys_kod(574110));
      _jest_kor:=KOR.first();
      {? ~_jest_kor
      || KOR.blank()
      ?};
      KOR.RU:=__RUB.ref(__RUB.sys_kod(574110));
      KOR.POD:=_wart_kor$2;
      KOR.SKL:=_skladka;
      {? ~_jest_kor
      || KOR.add()
      || KOR.put()
      ?}
   ?}
?};
1


\kor_licz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.60]
:: OPIS: wyliczenie skladki przekazanej przez argument z uwzglednieniem korekt
::   WE: _a -  nr rubryki
::   WY: wyliczona skladka
::  OLD: \kor_licz/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
: skladka dla biezacej listy
_sbiez:=0;
: korekty skladek za poprzednie miesiace
_spop:=0;
KORN.cntx_psh;
KOR.index('KOR_PRN');
KORN.index('KOR_NAPZ');
KORN.prefix('N',P.ref,'L'+FUNKCJE.ZNLISTY());
{? KORN.first
   || {! |?
         _f:=KORN.ROK=O.R & KORN.MC=O.M;
          KOR.prefix(KORN.ref,_a);
         {? KOR.first & _a
            || {! |? {? _f || _sbiez+=KOR.SKL || _spop+=KOR.SKL ?}; KOR.next !}
         ?};
         KORN.next
      !};
:      zaktualizowanie zapisow dla biezacej listy
      _sbiez:=_sbiez$2; _spop:=_spop$2;
      KORN.prefix('N',P.ref,'L'+FUNKCJE.ZNLISTY(),O.R,O.M);
      {? _wyn:=KORN.first
      || {! |? {? KORN.KN<>'T' || _wyn:=1; 0 || _wyn:=KORN.next ?} !}
      ?};
      {? _wyn
         || KOR.prefix(KORN.ref,_a);
            {? KOR.first
               || {? __RUB.sys_attr(_a,5711) | __RUB.sys_attr(_a,5712)
                     || _podstawa:=FUNKCJE.L_SYS(56111)
                  |? __RUB.sys_attr(_a,57411)
                     || _podstawa:=FUNKCJE.L_SYS(56411)
                     || _podstawa:=FUNKCJE.L_SYS(5621)
                  ?};
                  KOR.POD:=KOR.POD-_podstawa; KOR.SKL:=KOR.SKL-(_sbiez+_spop);
                  KOR.put
            ?};
            {? _a=__RUB.sys_kod(571110)
              || _rubryka:=__RUB.sys_kod(571210);
                 KOR.prefix(KORN.ref,_rubryka);
                 {? KOR.first
                    || _podstawa:=FUNKCJE.L_SYS(56111);
                       KOR.POD:=KOR.POD-_podstawa; KOR.SKL:=KOR.SKL-(_sbiez+_spop);
                       KOR.put
                 ?}
           ?}
      ?}
?};
KORN.cntx_pop;
(_sbiez+_spop)$2


\nieohist
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Pozostawiona ze względów historycznych.
::   WE:
::   WY:
::  OLD: \nieohist/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~dekltab
|| make_tb()
?};
DoList.d[1]:=date(O.R,O.M,1);
DoList.d[2]:=date(O.R,O.M,0);
: w przebiegu nie ma już nieobecności
~~


\zm_umo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: sprawdzenie czy w ramach nieobecnosci nastapila zmiana w skladnikach wynagrodzenia zapisanych
::       w przebiegu zatrudnienia bufor dla nieobecnosci musi byc ustalony
::   WE: _a - kod nieobecności
::       _b - jeśli 1 - podział nieobecności ze względu na zmianę wymiaru etatu
::   WY:
::  OLD: \zm_umo/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
_b:={? var_pres('_b')=type_of(0) || _b ?};

{? N.first
||
:  Ewentualne rozbicie nieobecności dla zmiany wymiaru podczas jej trwania
   {? _b
   || {!
      |? N.cntx_psh();
         N.index('NIEOBECN');
         N.prefix('N',P.ref());
         _od:=_N_OD:=N.OD;
         N.cntx_pop();
         {? ~N.POD & date(_od~1,_od~2,1)=date(_N_OD~1,_N_OD~2,1) & (__RUB.sys_attr(N.NB,129,N.OD) | N.NB().RN=_a)
         || {? var_pres('MAC',H)>0 & (__RUB.sys_attr(N.NB,122722) | __RUB.sys_attr(N.NB,122742))
            || _RWY:="H.RWY"
            || _RWY:="H.WY"
            ?};
            {? H.find_le(N.OD)
            || _exit:=0;
               _wymiar:=_RWY();
               {!
               |? {? H.DO>=N.DO | H.DO=date(0,0,0)
                  || _exit:=1
                  |? H.next()
                  || {? _wymiar<>_RWY()
                     ||
:                       podział nieobecności
                        _ndo:=N.DO;
                        N.DO:=H.OD-1;
                        exec('n_czas','nieobecnosc');
                        _ref:=N.ref();
                        N.put();
                        _chp:=exec('nw_find_chp','nieobecnosc',N.ref());
                        N.OD:=H.OD;
                        N.DO:=_ndo;
                        exec('n_czas','nieobecnosc');
                        N.add();
                        exec('zap_nw_wynchor','lista_licz',N.ref(),_chp)
                     ?}
                  || _exit:=1
                  ?};
                  _wymiar:=_RWY();
                  ~_exit
               !}
            ?}
         ?};
         N.next()
      !}
   || {!
      |? {? (__RUB.sys_attr(N.NB,129,N.OD) | N.NB().RN=_a) & ~N.POD
         || {? H.find_le(N.OD)
            || _exit:=0;
               _d_fun:=H.S2;
               _d_sta:=H.S3;
               {!
               |? {? H.DO>=N.DO | H.DO=date(0,0,0)
                  || _exit:=1
                  |? H.next()
                  || {? H.S2<>_d_fun | H.S3<>_d_sta
                     ||
:                       podział nieobecności
                        _ndo:=N.DO;
                        N.DO:=H.OD-1;
                        exec('n_czas','nieobecnosc');
                        _ref:=N.ref();
                        N.put();
                        _chp:=exec('nw_find_chp','nieobecnosc',N.ref());
                        N.OD:=H.OD;
                        N.DO:=_ndo;
                        exec('n_czas','nieobecnosc');
                        N.add();
                        exec('zap_nw_wynchor','lista_licz',N.ref(),_chp)
                     ?}
                  || _exit:=1
                  ?};
                  _d_fun:=H.S2;
                  _d_sta:=H.S3;
                  ~_exit
               !}
            ?}
         ?};
         N.next()
      !}
   ?}
?};
H.cntx_pop();
1


\plf_nadg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Rozliczenie godzin
::   WE: _a - 'f' - pracownicy rozliczani na podstawie stawki godzinowej
::          - 'u' - pracownicy rozliczani na podstawie stawki miesiecznej
::  OLD: \plf_nadg/plf_nadg.fml
::----------------------------------------------------------------------------------------------------------------------
:: Usuniecie skladnikow  z bufora listy
{? _a='f'
|| FUNKCJE.LK(100,,,1);
:: Oddelegowania zagraniczne
   FUNKCJE.LK(7158,,,1)
?};

_tab_rub:=__RUB.sys_rub(101111,date(O.R,O.M,0));
{? _tab_rub.first()
|| {!
   |? FUNKCJE.LK(_tab_rub.RN,,,1);
      _tab_rub.next()
   !}
:: jeżeli brak atrybutu
|| _fun_LK:="{! _ind:=_a.._b |! FUNKCJE.LK(_ind,,,1) !}";
   FUNKCJE.LK(48,,,1);
   _fun_LK(54,58);
      _fun_LK(63,69);
   _fun_LK(120,123);
   _fun_LK(125,126);
   FUNKCJE.LK(7001,,,1);
   FUNKCJE.LK(7006,,,1);
   _fun_LK(7008,7011);
   _fun_LK(7015,7016);
   _fun_LK(7026,7029);
   _fun_LK(7035,7038);
   _fun_LK(7040,7041);
   _fun_LK(7050,7059);
   _fun_LK(7224,7225);
:: praca zdalna
   _zdal_rub:=__RUB.sys_rub(816,date(O.R,O.M,1));
   {? _zdal_rub.first()
   || {!
      |? FUNKCJE.LK(_zdal_rub.RN,,,1);
         _zdal_rub.next()
      !}
   ?}
?};
_rub_zm:=__RUB.sys_rub(101112,date(O.R,O.M,0)).first;

A_OKRP.cntx_psh;
A_OKRP.index('A_OKRDP');
A_OKRP.prefix(P.ref);

G.cntx_psh();
G.use('godz'+$O.R);
G.index('MSCDKW');
G.prefix(P.ref,O.M,'G');
H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
H_ODDE.cntx_psh();
H_ODDE.index('HOD');
R_GODZ.cntx_psh();
R_GODZ.use('rzg_'+$O.R);
exec('usu_roz','roz_godz');

:: Usunięcie premii okresowych automatycznych dla przekroczeń średniotygodniowych.
exec('usu_prem_auto_godz','skladniki_okresowe');

:: dodanie bufora dla premii okresowych zwiazanych z przekroczeniami sredniotygodniowymi
_tab_okr:=exec('prem_buff','!ppl_pll_nals');
{? G.first() & H.last()
|| _mc_gd:='';
   _zm_wym:=_norma:=0;
   VAR_DEL.delete('sta_pom');
   sta_pom:=obj_new(4);
   {!
   |? {? |G.LT=''
      || G.LT:=VAR.NAZWALIS;
         G.put ()
      ?};
      {? G.LT=VAR.NAZWALIS
      || _okrr:=O.R;
         _okrm:=O.M;
         _okr:=0;
         _okr_od:=#0;
         _okr_do:=#0;
         {? A_OKRP.find_le(G.D) & G.D<=A_OKRP.DO
         || _okrr:=A_OKRP.DO~1;
            _okrm:=A_OKRP.DO~2;
            _okr_od:=A_OKRP.OD;
            _okr_do:=A_OKRP.DO;
            _okr:=1
         ?};
         {? _mc_gd<>6+G.D$0
         || _mc_gd:=6+G.D$0;
            exec('kal_list','personel');
            _norma:=exec('norma_zmiana','godziny',date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0));
            {? _norma
            || _godz:=exec('nominal','godziny',date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0),1,1,,1)
            || _godz:=exec('nominal','godziny',date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0),1,,,1)
            ?};
            _wym:=exec('ust_wym','pracownik',date(_okrr,_okrm,0));
            {? _norma
            || _godz_ro:=exec('nominal','godziny',date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0),1,1,,1)
            || _godz_ro:=__KAL.w_hours(date(_okrr,_okrm,1),date(_okrr,_okrm,0))*_wym
            ?};
            {? _godz_ro>0 & H.find_le(date(_okrr,_okrm,0))
            || _hsx:=exec('hsx','lista_licz',date(_okrr,_okrm,0));
               _OS1:=_hsx.S1;
               _OS2:=_hsx.S2;
               _OS3:=_hsx.S3;
               obj_del(_hsx);
               &_hsx
            || _OS1:=_OS2:=_OS3:=0
            ?};
            exec('kal_prac','personel',G.D~1);
            {? _godz=0 | _godz_ro=0
            || RAPLS.msg(
                  P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                  'Brak informacji o kalendarzu listy płac.'@,
                  exec('retry_msg','lista_licz')
                )
            || _zm_wym:=exec('czy_zmiana_wym','!ppl_pll_nals',G.D);
               {? _zm_wym
               || {! _ind:=1.. obj_len(sta_pom)
                  |! sta_pom[_ind]:=0
                  !};
                  exec('mc_placa_newzasad','lista_licz',date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0),_godz,1);
                  H.index('_HISTKOD');
                  H.prefix(P.ref(),'Z')
               ?}
            ?}
         ?};
         {? _godz>0 & H.find_le(G.D)
         || _kod:=G.K().RN;
            H_ODDE.prefix(H.ref());
            {? H_ODDE.find_le(G.D) & H_ODDE.O_DO>=G.D
            || _kraj:=H_ODDE.KRAJ
            || _kraj:=null()
            ?};
            _hsx:=exec('hsx','lista_licz',G.D);
            _S1:=_hsx.S1;
            _S2:=_hsx.S2;
            _S3:=_hsx.S3;
            _S4:=_hsx.S4;
            obj_del(_hsx);
            &_hsx;
::          ewentualne godziny akordowe wprowadzone w Kadry i place
            {? _kod=7010
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val)
            ?};

::          Placa zasadnicza dla pracownikow rozliczanych godzinowo
::          Wraz z wynagrodzeniem za dopelnienie do wymiaru pracy w swieta i wolne
            {? (_kod=48 | _kod=54 | _kod=63 | _kod=65 | _kod=67)
            || {? O.KRAJE<>_kraj & (O.KRAJE<>null() | O.B_ODD='T')
::                lista niezgodna z krajem oddelegowania lub lista bez kraju pomijająca oddelegowania
               || G.LT:='';
                  G.put()
               || _sum:=G.G+FUNKCJE.LK(_kod,G.KK);
                  FUNKCJE.LK(_kod,G.KK,_sum);
                  {? _a='f'
                  || {? _S4 & _kod=54 & (_kraj=O.KRAJE | (O.KRAJE=null() & O.B_ODD='N'))
::                   oddelegowania zagraniczne
                     || _Sx:=_S4;
                        _ZasRub:=7158
::                   zwykła zasadnicza
                     || _Sx:=_S1;
                        _ZasRub:=100
                     ?};
                     _val:=_Sx*G.G$2;
                     G.WAR:=_val;
                     G.put(1);
::                   zapisujemy rozliczenie
                     exec('wyplata','roz_godz','W',_val,_ZasRub);
                     _val+=FUNKCJE.LK(_ZasRub,G.KK);
::                   dodajemy reczne wyrownania
                     _val+=exec('dod_w','roz_godz',_ZasRub);
                     FUNKCJE.LK(_ZasRub,G.KK,_val)
                  ?}
               ?}
            ?};
::          Zmiana wyliczenia nominalnej placy zasadniczej dla wyliczenia nadgodzin
::          w sytuacji zmiany wymiaru zatrudnienia.
            {? _zm_wym & (( _rub_zm & __RUB.sys_attr(_kod,101112,date(O.R,O.M,0))) |
                  (~_rub_zm & ( _kod=55 | _kod=56 | _kod=64 | _kod=68 | _kod=69 | _kod=58 | _kod=66 |
                  _kod=7008 | _kod=7009  | _kod=7015 | _kod=7016)))
            || _S1:=sta_pom[1];
               _S2:=sta_pom[2];
               _S3:=sta_pom[3]
            ?};
::          Godziny nadliczbowe 50% i 100%
            {? _kod=55 | _kod=56 | _kod=7008 | _kod=7009  | _kod=7015 | _kod=7016
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _a='f'
               || {? _kod=7015 | _kod=7016 || _val:=0 || _val:=_S1*G.G$2+(_S2+_S3)/_godz$2*G.G$2 ?};
                  _val1:=_S1*G.G$2
               |? _a='u'
               || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                  _val1:=(_S1/_godz)$2*G.G$2
               ?};
               {?_val
               ||
::                Wyliczenie stawki minimalnej dla jednej godziny
                  _minimum:=exec('minkraj_komornik','lista_licz',G.D,,1,G.D)$2;
::                Wyrownanie do minimalnego zatrudnienia
                  _minimum:=_minimum*G.G$2;
                  {? _val<_minimum
                  || _val:=_minimum
                  ?}
               ?};
               _val1:=
                  {? _kod=55 | _kod=7008  | _kod=7015
                  || 0.5
                  || 1
                  ?}*_val1$2;
               {? _kod=7008 | _kod=7009
               || _val:=_val*0.6$2;
                  _val1:=_val1*0.6$2
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val
               || exec('wyplata','roz_godz','W',_val,120)
               ?};
               {? _val1
               || exec('wyplata','roz_godz','D',_val1,121)
               ?};
               _val1+=exec('dod_w','roz_godz',121);

               _val1+=FUNKCJE.LK(121,G.KK);
               FUNKCJE.LK(121,G.KK,_val1);

               _val+=FUNKCJE.LK(120,G.KK);
               FUNKCJE.LK(120,G.KK,_val)
            ?};

::          Liczba godzin dop. do etatu
            {? _kod=64 | _kod=68 | _kod=69
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               exec('kal_prac','personel',G.D~1);
               {? _a='f'
                  || _val:=_S1*G.G$2+(_S2+_S3)/_godz$2*G.G$2;
                     _val1:=_S1*G.G$2
                  |? _a='u'
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                     _val1:=(_S1/_godz)$2*G.G$2
                  ?};
                  _val1:=
                     {? _kod=69 || 1
                     |? _kod=68 || 0.5
                     |? _kod=64 & __KAL.h_days(G.D,G.D) || 1
                     || 0
                     ?}*_val1$2;
                  G.WAR:=_val+_val1;
                  G.put(1);

                  {? _val
                  || exec('wyplata','roz_godz','W',_val,125)
                  ?};
                  {? _val1
                  || exec('wyplata','roz_godz','D',_val1,126)
                  ?};
                  _val1+=exec('dod_w','roz_godz',126);

                  _val1+=FUNKCJE.LK(126,G.KK);
                  FUNKCJE.LK(126,G.KK,_val1);
                  _val+=exec('dod_w','roz_godz',125);
                  _val+=FUNKCJE.LK(125,G.KK);
                  FUNKCJE.LK(125,G.KK,_val)
            ?};

::          Godziny nocne
            {? _kod=57
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _nk:=exec('ust_nk','lista_licz',G.D,'NK');
               _pdgn:=20;
               _pr_noc:=exec('ust_nk','lista_licz',G.D,'PDGN');
               {? _pr_noc & _pr_noc>_pdgn
               || _pdgn:=_pr_noc
               ?};
               _pdgn:=_pdgn/100;

::             ustawienie kalendarza z listy plac
               exec('kal_list','personel');
               _godz_nr:=__KAL.w_hours(date(G.D~1,G.D~2,1),date(G.D~1,G.D~2,0));
               exec('kal_prac','personel',G.D~1);

               _val:=((_nk/_godz_nr)$2*_pdgn$2)*G.G$2;
               G.WAR:=_val;
               G.put(1);

               exec('wyplata','roz_godz','W',_val,122);
               _val+=exec('dod_w','roz_godz',122);

               _val+=FUNKCJE.LK(122,G.KK);
               FUNKCJE.LK(122,G.KK,_val)
            ?};

::: sprawdzenie daty od ktorej zostaje zmieniony sposob realizacji dodatku za przekroczenia sredniotygodniowe
            _66_ok:=G.D>=exec('ustal_date_sred','godziny');

::          Godziny w dni wolne
::          Dla zapisow z kwalifikacji godzin dwa skladniki wynagrodzenie 65 oraz dodatek 66

            {? _kod=66 | _kod=58
::  okres jednomiesieczny - skladniki wchodzace do wyliczenia dodatku za urlop
:: wynagrodzenie i dodatek
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _a='f'
               || {? _kod=58
                  || _val:=_S1*G.G$2+(_S2+_S3)/_godz$2*G.G$2;
                     _val1:=G.G*_S1$2
                  || {? _okr
                     || _val1:=G.G*_OS1$2
                     || _val1:=G.G*_S1$2
                     ?}
                  ?}
               || {? _kod=58
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                     _val1:=(_S1/_godz)$2*G.G$2
                  || {? _okr
                     || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                        _val1:=(_OS1/_godz_ro)$2*G.G$2
                     || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                        _val1:=(_S1/_godz)$2*G.G$2
                     ?}
                  ?}
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,123) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,123) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',123);
               _val+=FUNKCJE.LK(123,G.KK);
               FUNKCJE.LK(123,G.KK,_val)
: dodatek
            |? _kod=7027
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _okr
               || {? _a='f'
                  || _val:=G.G*_OS1$2
                  || _val:=(_OS1/_godz_ro)$2*G.G$2
                  ?}
               || {? _a='f'
                  || _val:=G.G*_S1$2
                  || _val:=(_S1/_godz)$2*G.G$2
                  ?}
               ?};
               G.WAR:=_val;
               G.put(1);

                exec('wyplata','roz_godz','D',_val,7054);
               _val+=exec('dod_w','roz_godz',7054);
               _val+=FUNKCJE.LK(7054,G.KK);
               FUNKCJE.LK(7054,G.KK,_val)
: dodatek i wynagrodzenie
            |? _kod=7036
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _okr
               || {? _a='f'
                  || _val1:=G.G*_OS1$2
                  || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                     _val1:=(_OS1/_godz_ro)$2*G.G$2
                  ?}
               || {? _a='f'
                  || _val1:=G.G*_S1$2
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                     _val1:=(_S1/_godz)$2*G.G$2
                  ?}
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,7040) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,7040) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',7040);
               _val+=FUNKCJE.LK(7040,G.KK);
               FUNKCJE.LK(7040,G.KK,_val)
:: wynagrodzenie i dodatek
            |? _kod=7028
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _okr
               || {? _a='f'
                  || _val1:=G.G*_OS1$2
                  || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                     _val1:=(_OS1/_godz_ro)$2*G.G$2
                  ?}
               || {? _a='f'
                  || _val1:=G.G*_S1$2
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2;
                     _val1:=(_S1/_godz)$2*G.G$2
                  ?}
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,7050) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,7050) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',7050);
               _val+=FUNKCJE.LK(7050,G.KK);
               FUNKCJE.LK(7050,G.KK,_val)
: wynagrodzenie
            |? _kod=7037
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='u'
               || {? _okr
                  || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2
                  ?};
                  {? _val
                  ||
::                   Wyliczenie stawki minimalnej dla jednej godziny
                     _minimum:=exec('minkraj_komornik','lista_licz',G.D,,1,G.D)$2;
::                   Wyrownanie do minimalnego zatrudnienia
                     _minimum:=_minimum*G.G$2;
                     {? _val<_minimum || _val:=_minimum ?}
                  ?};
                  G.WAR:=_val;
                  G.put(1);

                  exec('wyplata','roz_godz','W',_val,7052);
                  _val+=exec('dod_w','roz_godz',7052);
                  _val+=FUNKCJE.LK(7052,G.KK);
                  FUNKCJE.LK(7052,G.KK,_val)
               ?}
            |? _kod=7056
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='u'
               || {? _okr
                  || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2
                  || _val:=((_S1+_S2+_S3)/_godz)$2*G.G$2
                  ?};
                  G.WAR:=_val;
                  G.put(1);

                  exec('wyplata','roz_godz','W',_val,7058);
                  _val+=exec('dod_w','roz_godz',7058);
                  _val+=FUNKCJE.LK(7058,G.KK);
                  FUNKCJE.LK(7058,G.KK,_val)
               ?}
::  okres wielomiesięczny składniki nie wchodzące do wyliczenia dodatku za urlop // wprowadzenie do premii okresowych
:: wynagrodzenie i dodatek
            |? _kod=7011 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _a='f'
               || _val1:=G.G*_OS1$2
               || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                  _val1:=(_OS1/_godz_ro)$2*G.G$2
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,7006) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,7006) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',7006);
               {? _66_ok
               || _tab_okr.REF:=#P.ref();
                  _tab_okr.R:=7006;
                  _tab_okr.KWN:=_val;
                  _tab_okr.KWB:=_val;
                  _tab_okr.KWI:=_val;
                  _tab_okr.DP:=O.D;
                  _tab_okr.OD:=_okr_od;
                  _tab_okr.DO:=_okr_do;
                  _tab_okr.BZ:='N';
                  _tab_okr.add()
               ?};
               _val+=FUNKCJE.LK(7006,G.KK);
               FUNKCJE.LK(7006,G.KK,_val)

:: dodatek
            |? _kod=7026 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='f'
               || _val:=G.G*_OS1$2
               || _val:=(_OS1/_godz_ro)$2*G.G$2
               ?};
               G.WAR:=_val;
               G.put(1);

               exec('wyplata','roz_godz','D',_val,7055);
               _val+=exec('dod_w','roz_godz',7055);
               {? _66_ok
               || _tab_okr.REF:=#P.ref();
                  _tab_okr.R:=7055;
                  _tab_okr.KWN:=_val;
                  _tab_okr.KWB:=_val;
                  _tab_okr.KWI:=_val;
                  _tab_okr.DP:=O.D;
                  _tab_okr.OD:=_okr_od;
                  _tab_okr.DO:=_okr_do;
                  _tab_okr.BZ:='N';
                  _tab_okr.add()
               ?};
               _val+=FUNKCJE.LK(7055,G.KK);
               FUNKCJE.LK(7055,G.KK,_val)

:: wynagrodzenie
            |? _kod=7038 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='u'
               || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                  G.WAR:=_val;
                  G.put(1);

                  exec('wyplata','roz_godz','W',_val,7053);
                  _val+=exec('dod_w','roz_godz',7053);
                  {? _66_ok
                  || _tab_okr.REF:=#P.ref();
                     _tab_okr.R:=7053;
                     _tab_okr.KWN:=_val;
                     _tab_okr.KWB:=_val;
                     _tab_okr.KWI:=_val;
                     _tab_okr.DP:=O.D;
                     _tab_okr.OD:=_okr_od;
                     _tab_okr.DO:=_okr_do;
                     _tab_okr.BZ:='N';
                     _tab_okr.add()
                  ?};
                  _val+=FUNKCJE.LK(7053,G.KK);
                  FUNKCJE.LK(7053,G.KK,_val)
               ?}
            |? _kod=7057 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='u'
               || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
               G.WAR:=_val;
               G.put(1);

               exec('wyplata','roz_godz','W',_val,7059);
               _val+=exec('dod_w','roz_godz',7059);
                  {? _66_ok
                  || _tab_okr.REF:=#P.ref();
                        _tab_okr.R:=7059;
                     _tab_okr.KWN:=_val;
                     _tab_okr.KWB:=_val;
                     _tab_okr.KWI:=_val;
                     _tab_okr.DP:=O.D;
                     _tab_okr.OD:=_okr_od;
                     _tab_okr.DO:=_okr_do;
                     _tab_okr.BZ:='N';
                     _tab_okr.add()
                  ?};
                  _val+=FUNKCJE.LK(7059,G.KK);
                  FUNKCJE.LK(7059,G.KK,_val)
               ?}
:: wynagrodzenie i dodatek
            |? _kod=7035 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _a='f'
               || _val1:=G.G*_OS1$2
               || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                  _val1:=(_OS1/_godz_ro)$2*G.G$2
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,7041) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,7041) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',7041);

               {? _66_ok
               || _tab_okr.REF:=#P.ref();
                  _tab_okr.R:=7041;
                  _tab_okr.KWN:=_val;
                  _tab_okr.KWB:=_val;
                  _tab_okr.KWI:=_val;
                  _tab_okr.DP:=O.D;
                  _tab_okr.OD:=_okr_od;
                  _tab_okr.DO:=_okr_do;
                  _tab_okr.BZ:='N';
                  _tab_okr.add()
               ?};
               _val+=FUNKCJE.LK(7041,G.KK);
               FUNKCJE.LK(7041,G.KK,_val)

:: wynagrodzenie i dodatek
            |? _kod=7029 & _okr
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               _val:=_val1:=0;
               {? _a='f'
               || _val1:=G.G*_OS1$2
               || _val:=((_OS1+_OS2+_OS3)/_godz_ro)$2*G.G$2;
                  _val1:=(_OS1/_godz_ro)$2*G.G$2
               ?};
               G.WAR:=_val+_val1;
               G.put(1);

               {? _val  || exec('wyplata','roz_godz','W',_val,7051) ?};
               {? _val1  || exec('wyplata','roz_godz','D',_val1,7051) ?};
               _val+=_val1;
               _val+=exec('dod_w','roz_godz',7051);
               {? _66_ok
               || _tab_okr.REF:=#P.ref();
                  _tab_okr.R:=7051;
                  _tab_okr.KWN:=_val;
                  _tab_okr.KWB:=_val;
                  _tab_okr.KWI:=_val;
                  _tab_okr.DP:=O.D;
                  _tab_okr.OD:=_okr_od;
                  _tab_okr.DO:=_okr_do;
                  _tab_okr.BZ:='N';
                  _tab_okr.add()
               ?};
               _val+=FUNKCJE.LK(7051,G.KK);
               FUNKCJE.LK(7051,G.KK,_val)

            ?};

::          Liczba godzin uprawniajacych do korzystania z praw autorskich.
::          Podstawa jest wylacznie stawka zasadnicza.
            {? _kod=7001
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val);
               {? _a='f'
               || _val:=_S1*G.G$2
               |? _a='u'
               || _val:=_S1/_godz$2*G.G$2
               ?};
               exec('wyplata','roz_godz','W',_val,7002)
            ?};

::          ewentualne godziny pracy poza siedzibą
            {? __RUB.sys_attr(_kod,816,G.D)
            || _val:=G.G+FUNKCJE.LK(_kod,G.KK);
               FUNKCJE.LK(_kod,G.KK,_val)
            ?};

            params_set('a',_a,'S1',_S1,'S2',_S2,'S3',_S3,'kod',_kod,'OS1',_OS1,'OS2',_OS2,'OS3',_OS3,'okr_do',_okr_do,
               'godz_ro',_godz_ro,'godz',_godz,'tab_okr',_tab_okr,'ok_66',_66_ok,'okr',_okr,'okr_od',_okr_od);
::          Wtyczka do obsługi niestandardowego wyliczenia godzin
            Plugin.run('PPL_PLL_NALS_ROZGODZ')
         ?}
      ?};
      G.next()
   !};
   VAR_DEL.delete('sta_pom')
?};
exec('wpr_prem_sredt','skladniki_okresowe',_tab_okr);

:: Dodanie wartości pracy zdalnej stałej
{? exec('is_pzd01','ppsf')
|| exec('ppsf_rozlicz','ppsf')
?};

H_ODDE.cntx_pop();
H.cntx_pop();
A_OKRP.cntx_pop;
G.cntx_pop();
R_GODZ.cntx_pop();

1


\prem_buff
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Utworzenie buforu dla premii wynikajacych z przekroczen sredniotygodniowych
::   WE:
::   WY:
::  OLD: \prem_buff/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__TTP')>100 || obj_del(__TTP) ?};
__TTP:=tab_tmp(1,'REF','INTEGER','REF','R','INTEGER','R',
     'PRN_N','INTEGER','PRN_N','PRN_T','STRING[20]','PRN_T',
     'DP','DATE','PR_T','OD','DATE','OD','DO','DATE','DO',
     'KWN','REAL','KWN','KWB','REAL','KWB','KWI','REAL','KWI','BZ','STRING[1]','BZ',
     'OPIS','STRING[30]','OPIS');
__TTP


\wpr_prem_sredt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Wprowadzenie zapisu premii dla przekroczen sredniotygodniowych.
::       Procedura przeniesiona do pliku: skladniki_okresowe.fml.
::   WE:
::   WY:
::  OLD: \wpr_prem_sredt/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
exec('wpr_prem_sredt','skladniki_okresowe',_a)


\proj_praclicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [2013]
:: OPIS: Procedura zbiera informacje o projektach, w ktorych uczestniczy biezacy pracownik i wylicza wartosc premii:
::       - projektowej;
::       - za kierowanie projektem.
::       Uwaga: poprawnosc parametrow NIE jest weryfikowana.
::       Uwaga: Procedura korzysta z numerow rubryk!
::   WE: _a - Indywidualna stawka.
::       _b - Sposob prezentacji komunikatow o bledach:
::          0 - Bez komunikatow [domyslnie].
::          1 - Komunikaty podczas naliczania listy plac (RAPLS) - wymagana jest prawidlowa zawartosc tabeli P i brak
::              ograniczen (prefiksow) dla tabeli OSOBA. Zawartosc bufora tabeli OSOBA moze ulec zmianie.
::          2 - Komunikaty poza naliczaniem listy plac (FUN).
::   WY: ~~
::  OLD: \praclicz/godzproj.fml
::----------------------------------------------------------------------------------------------------------------------
_stawka:={? var_pres('_a')=type_of(0) || _a ?};
_verb:={? var_pres('_b')=type_of(0) || _b ?};

FUNKCJE.LK(175,,,1);
FUNKCJE.LK(177,,,1);

{? ~exec('chk_skid_mb','godziny',_verb)
|| return()
?};

_godziny:=exec('proj_pracgodz','!ppl_pll_nals',_verb);

_gkk:=tab_tmp(2,
   'KKSYM','STRING[35]','Symbol konta kosztowego',
   'KKREF','INTEGER','#KK.ref()',
   'G','REAL','Liczba godzin'
);

PROJEKTY.cntx_psh();
PROJEKTY.prefix();

PROJZASP.cntx_psh();
PROJZASP.index('ZAS_PROJ');
PROJZASP.prefix();

PROJZAS.cntx_psh();
PROJZAS.index('P');
PROJZAS.prefix();

PROJPRE.cntx_psh();
PROJPRE.index('PROJ');
PROJPRE.prefix();

{? PROJZAS.find_key(P.ref())
|| _d0:=date(0,0,0);
   _dp:=date(O.R,O.M,1);
   _dk:=date(O.R,O.M,0);
   _tabr:=__RUB.sys_rub(10012,_dk);
   PROJZASP.prefix(PROJZAS.ref());
   _dn:=PROJZASP.first();
   {!
   |? _dn
   |! {? PROJZASP.PROJEKTY().RDATA_OD<=_dk & _dp<=PROJZASP.PROJEKTY().RDATA_DO
      || _gkk.erase();
:        Liczymy sume wszystkich godzin na projekcie (do ewentualnej weryfikacji limitu), zbierajac jednoczesnie
:        informacje w podziale na konta kosztowe (tylko w ramach analizowanego projektu). Grupowanie wg kont ma
:        zminimalizowac roznice w zaokragleniach.
         _godziny.TAB.index(_godziny.NDX.PRK);
         _lg:=0;
         _dg:=_tabr.first();
         {!
         |? _dg
         |! _godziny.TAB.prefix(PROJEKTY.SYM_PROJ,_tabr.RN);
            {? _godziny.TAB.first()
            || {!
               |? _lg+=_godziny.TAB.G;
                  {? _gkk.find_key(_godziny.TAB.KKSYM,_godziny.TAB.KKREF)
                  || _nowy:=0
                  || _nowy:=1;
                     _gkk.blank();
                     _gkk.KKREF:=_godziny.TAB.KKREF;
                     _gkk.KKSYM:=_godziny.TAB.KKSYM
                  ?};
                  _gkk.G+=_godziny.TAB.G;
                  {? _nowy
                  || _gkk.add()
                  || _gkk.put()
                  ?};
                  _godziny.TAB.next()
               !}
            ?};
            _dg:=_tabr.next()
         !};

:        Premia Projektowa = procent z projektu * indywidualna stawka * liczba godzin.
         {? _stawka>0 & _lg>0
         || PROJPRE.prefix(PROJEKTY.ref());
            _prprpr:={? PROJPRE.find_le(_dk) || PROJPRE.PREMIA ?};
            {? _prprpr>0 & _gkk.first()
            || {!
               |? FUNKCJE.LK(175,_gkk.KKREF,_prprpr*_stawka*_gkk.G/100$2);
                  _gkk.next()
               !}
            ?}
         ?};

:        Premia za prowadzenie projektu.
         {? PROJZASP.KIER='T' &
            PROJZASP.KP_OD<=_dk & (PROJZASP.KP_DO=_d0 | _dp<=PROJZASP.KP_DO) &
            PROJZASP.LIM_GODZ<=_lg
         || _kw:={? PROJZASP.DOD_FM<>'' || ($PROJZASP.DOD_FM)(_lg) || PROJZASP.DOD ?}$2;
            {? _kw>0
            || FUNKCJE.LK(177,{? PROJEKTY.KK=null() || ~~ || PROJEKTY.KK ?},_kw)
            ?}
         ?}
      ?};
      _dn:=PROJZASP.next()
   !}
?};

PROJPRE.cntx_pop();
PROJZAS.cntx_pop();
PROJZASP.cntx_pop();
PROJEKTY.cntx_pop();
~~


\proj_pracgodz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [2013]
:: OPIS: Procedura wewnetrzna (wywolywana z \praclicz), dla biezacego pracownika zbiera informacje dotyczace godzin
::       przepracowanych w biezacym miesiacu, w podziale na projekty.
::       Uwaga: poprawnosc parametrow NIE jest weryfikowana.
::   WE: _a - Sposob prezentacji komunikatow o bledach:
::          0 - Bez komunikatow [domyslnie].
::          1 - Komunikaty podczas naliczania listy plac (RAPLS) - wymagana jest prawidlowa zawartosc tabeli P i brak
::              ograniczen (prefiksow) dla tabeli OSOBA. Zawartosc bufora tabeli OSOBA moze ulec zmianie.
::          2 - Komunikaty poza naliczaniem listy plac (FUN).
::   WY: Tablica z tabela tymczasowa i indeksami.
::  OLD: \pracgodz/godzproj.fml
::----------------------------------------------------------------------------------------------------------------------
_verb:=_a;

_godziny:=obj_new('TAB','NDX');
_godziny.TAB:=tab_tmp(4,
   'PROJEKT','STRING[16]','Symbol projektu',
   'KKSYM','STRING[35]','Symbol konta kosztowego',
   'KKREF','INTEGER','#KK.ref()',
   'RN','INTEGER','Nr rubryki',
   'G','REAL','Liczba godzin'
);
_godziny.NDX:=obj_new('PKR','PRK');
_godziny.NDX.PKR:=_godziny.TAB.index('?');
_godziny.NDX.PRK:=_godziny.TAB.ndx_tmp(,,'PROJEKT',,,'RN',,,'KKSYM',,,'KKREF',,);

_sr4:=form(O.R,-4,0,'9.');
_sr2:=_sr4+2;
_sm2:=form(O.M,-2,0,'9.');

R.cntx_psh();
R.prefix();

CON_KG.cntx_psh();
CON_KG.use('cog'+_sr2+_sm2);
CON_KG.index('CON_GRD');
CON_KG.prefix();

G.cntx_psh();
G.use('godz'+_sr4);
G.index('MSCDKW');
G.prefix(P.ref(),O.M,'G');

KK.cntx_psh();
KK.prefix();

_dg:=G.first();
{!
|? _dg
|! {? |G.LT=''
   || G.LT:=~-O.LT;
      G.put()
   ?};
   {? CON_KG.find_key(G.ref())
   || _zadanie:=exec('wymiar','!ppl_pll_nals',,,'VAL',_verb);
      _projekt:={? _zadanie='' || '' || exec('proj_zad2proj','!ppl_pll_nals',_zadanie,_verb).SYMBOL ?}
   || _projekt:=_zadanie:=''
   ?};
   {? _godziny.TAB.find_key(_projekt,G.KK().SYM,G.KK,G.K().RN)
   || _nowy:=0
   || _nowy:=1;
      _godziny.TAB.blank();
      _godziny.TAB.PROJEKT:=_projekt;
      _godziny.TAB.KKSYM:=G.KK().SYM;
      _godziny.TAB.KKREF:=G.KK;
      _godziny.TAB.RN:=R.RN
   ?};
   _godziny.TAB.G+=G.G;
   {? _nowy
   || _godziny.TAB.add()
   || _godziny.TAB.put()
   ?};
   _dg:=G.next()
!};
&_dg;

KK.cntx_pop();
G.cntx_pop();
CON_KG.cntx_pop();
R.cntx_pop();

_godziny


\proj_zad2proj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [2013]
:: OPIS: Procedura odnajduje symbol projektu na podstawie symbolu zadania, z wykorzystaniem zaleznosci wynikajacych z
::       modelu controllingowego.
::   WE: _a - Symbol zadania.
::       _b - Sposob prezentacji komunikatow o bledach:
::          0 - Bez komunikatow [domyslnie].
::          1 - Komunikaty podczas naliczania listy plac (RAPLS) - wymagana jest prawidlowa zawartosc tabeli P i brak
::              ograniczen (prefiksow) dla tabeli OSOBA. Zawartosc bufora tabeli OSOBA moze ulec zmianie.
::          2 - Komunikaty poza naliczaniem listy plac (FUN).
::   WY: Tablica z nazwanymi elementami:
::       jest     -  Czy udalo sie odnalezc projekt? [1/0].
::       SYMBOL   - Symbol zadania.
::       OPIS     - Opis zadania.
::       REF      - Wskazanie na zadanie (UD_SKL.ref()).
::  OLD: \zad2proj/godzproj.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _zadanie:=_a
|| return('')
?};
_verb:={? var_pres('_b')=type_of(0) || _b ?};

_odp:=obj_new('jest','SYMBOL','OPIS','REF');
_odp.jest:=0;
_odp.SYMBOL:=_odp.OPIS:='';
_odp.REF:=null();

{? exec('chk_skid_mb','godziny',_verb)
|| SKID_MBN.cntx_psh();
   SKID_MBN.prefix();
   UD_SKL.cntx_psh();
   UD_SKL.prefix();
   _txt:='';
   {? _sklref:=exec('szukaj_ud_skl','schemat',KST_PAR.SKID_MB().KOD,_zadanie);
      _sklref=null()
   || _txt:='Nie znaleziono zadania %1.'@[_zadanie]
   |? _schref:=exec('wymiar','!ppl_pll_nals',,,'SCHREF',_verb);
      _schref=null()
:     Komunikat o bledzie obsluzony w \wymiar/godzproj
   || ~~
   |? UD_SKL.seek(exec('szukaj_ud_def_root','schemat',_schref,_sklref,'UD_SKL'))
   || _odp.jest:=1;
      _odp.SYMBOL:=UD_SKL.SYMBOL;
      _odp.OPIS:=UD_SKL.OPIS;
      _odp.REF:=UD_SKL.ref()
   ?};
   {? _txt<>''
   || {? _verb=1 || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,_txt)
      |? _verb=2 || FUN.error(_txt)
      ?}
   ?};
   UD_SKL.cntx_pop();
   SKID_MBN.cntx_pop()
?};
_odp


\wymiar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [2013]
:: OPIS: Procedura odpowiedzialna za znalezienie w modelu controllingowym wymiaru zwiazanego ze slownikiem projektow.
::   WE: _a - Wskazanie na model controllingowy [domyslnie: KST_PAR.SKID_MB].
::       _b - Uchwyt tabeli, ktorej struktura jest przeszukiwana [domyslnie: CON_KG].
::       _c - Rodzaj oczekiwanego wyniku:
::          'FLD'    - akronim \ pola w tabeli _b zwiazanego
::          'VAL'    - wartosc / (z wymiarem) ze slownikiem projektow.
::          'SCHREF' - Wskazanie na schemat (typu PROJ_REM).
::          'SCHSYM' - Symbol schematu (typu PROJ_REM).
::       _d - Sposob prezentacji komunikatow o bledach:
::          0 - Bez komunikatow [domyslnie].
::          1 - Komunikaty podczas naliczania listy plac (RAPLS) - wymagana jest prawidlowa zawartosc tabeli P i brak
::              ograniczen (prefiksow) dla tabeli OSOBA. Zawartosc bufora tabeli OSOBA moze ulec zmianie.
::          2 - Komunikaty poza naliczaniem listy plac (FUN).
::   WY: Lancuch znakowy zgodny z parametrem wywolania lub ''.
::  OLD: \wymiar/godzproj.fml
::----------------------------------------------------------------------------------------------------------------------
_model:={? var_pres('_a')=type_of(null()) & ref_name(_a)=SKID_MBN.name() || _a || KST_PAR.SKID_MB ?};
_tab:={? var_pres('_b')=type_of(SYSLOG) || _b || CON_KG ?};
_rwyn:={? var_pres('_c')=type_of('') & (_c='FLD' | _c='VAL' | _c='SCHREF' | _c='SCHSYM') || _c || 'FLD' ?};
_verb:={? var_pres('_d')=type_of(0) || _d ?};

{? ~exec('chk_skid_mb','godziny',_verb) || return('') ?};

_odp:='';
_txt:='';
_poziom:=0;
_sch:=obj_new('REF','SYM');
_sch.REF:=null();
_sch.SYM:='';

{? UD_SCH.cntx_psh(); UD_SCH.prefix();
   UD_TYP.cntx_psh(); UD_TYP.prefix();
   SKID_MBP.cntx_psh(); SKID_MBP.index('LP'); SKID_MBP.prefix(_model);
   _dn:=SKID_MBP.first();
   {!
   |? _dn & _poziom=0
   |! {? SKID_MBP.UD_SCH().UD_TYP().SYMBOL='PROJ_REM'
      || _sch.REF:=SKID_MBP.UD_SCH;
         _sch.SYM:=SKID_MBP.UD_SCH().SYMBOL;
         _poziom:=SKID_MBP.LP;
         _dn:=0
      || _dn:=SKID_MBP.next()
      ?}
   !};
   &_dn;
   SKID_MBP.cntx_pop();
   UD_TYP.cntx_pop();
   UD_SCH.cntx_pop();
   _poziom=0
|| _txt:='W domyślnym modelu dla controllingu brak poziomu związanego z projektami.'@

|? _rwyn='SCHREF'
|| _odp:=_sch.REF

|? _rwyn='SCHSYM'
|| _odp:=_sch.SYM

|? _lp:=0;
   {! _nrp:=1 .. _tab.fld_num()
   |? _odp=''
   |! {? _tab.fld_join(_nrp)='UD_SKL'
      || _lp+=1;
         {? _lp=_poziom || _odp:=_tab.fld_acr(_nrp) ?}
      ?}
   !};
   &_nrp;
   &_lp;
   _odp=''
|| _txt:='Błąd wewnętrzny (zmieniona struktura tabeli CON_KG).'@

|? _rwyn='VAL'
|| UD_SKL.cntx_psh(); UD_SKL.prefix();
   _odp:=($('_a.'+_odp+'().SYMBOL'))(_tab);
   UD_SKL.cntx_pop()
?};

{? _txt<>''
|| {? _verb=1 || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,_txt)
   |? _verb=2 || FUN.error(_txt)
   ?}
?};

_odp


\urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wynagrodzenie za urlop, podstawa prawna Rozp. Min. Pracy z 16 grudnia 2003.
::   WE: [_a] INTEGER = 1 - Wyliczenie dla zwolnienia ze świadczenia pracy.
::                      2 - Wyliczenie dla dopełnienia do wymiaru - wigilia.
::   WY:
::  OLD: \urlop/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
: wynagrodzenie za urlop, podstawa prawna Rozp. Min. Pracy z 16 grudnia 2003
: zwolnienie ze świadczenia pracy
_zwoln:={? var_pres('_a')=type_of(0) || _a ?};

__KORZ:=0;
Finish:=0;
_Suma_NP:=_Suma:=Suma_MD:=Suma_OK:=_Suma_SW:=_licz_mc:=_akord:=0;
_kolejny:=0;
_ile_mc:={? exec('Nalezy','grupprac','UR_EK_12',P.ref(),date(O.R,O.M,0)) || 12 || 3 ?};
exec('dekl_tab_urlop','!ppl_pll_nals');
_przeszer:=date(O.R,O.M,0);
_cal:=P.KAL;

A_OKRP.cntx_psh;
A_OKRP.index('A_OKRDP');
H.cntx_psh();
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
N.index('NIEOBECL');
N.prefix('N',P.ref(),VAR.NAZWALIS);
pom[20]:=exec('ust_nk','lista_licz',date(O.R,O.M,0),'NK');

pom[3]:=(P.DZA~1)*12+P.DZA~2;
_Stop:=s_pom:=(O.R*12+O.M)-pom[3];
{? _Stop>126 || _Stop:=s_pom:=126 ?};

{? N.first()
|| _d_min:=date(N.OD~1,(N.OD~2)-3,0);
:: Zmiana na rubryki z odpowiendim atrybutem
   _tab_r_godz_kal:=__RUB.sys_rub(1011211,date(O.R,O.M,0)).first();
   _tab_r_godz:=__RUB.sys_rub(1011212,date(O.R,O.M,0)).first();
   _tab_wyn_godz:=__RUB.sys_rub(1011221,date(O.R,O.M,0)).first();

:: Nie minęły 3 miesiące od wydania orzeczenia o niepełnosprawności
:: Uwzględnienie zmiany kalendarza SPIS: ER/WRT/XP/12.51/1912/0036
   P_INFO.cntx_psh();
   P_INFO.index('OD');
   P_INFO.prefix(exec('firma','ustawienia'),P.OSOBA);
   {? P_INFO.find_le(N.OD)
   || {? P_INFO.STNP_OD<>date(0,0,0) & P_INFO.STNP_OD>_d_min & P_INFO.STNP_OD<N.OD
      || R_WZCZ.cntx_psh;
         R_WZCZ.index('R_WZWND');
         R_WZCZ.prefix(P.name,P.ref,'N','N');
         {? R_WZCZ.first()
         || {? R_WZCZ.find_le(N.OD)
            || _cal:=R_WZCZ.KAL
            ?}
         ?};
         R_WZCZ.cntx_pop()
      ?}
   ?};
   P_INFO.cntx_pop();
   exec('define_wynchor','lista_licz');
   _nsize:=N.size();
   {? var_pres('__PN')<=0
   || __PN:=obj_new(@.CLASS.PNIEO,_nsize)
   || __PN.Delete();
      __PN.Create(_nsize)
   ?};
   &_nsize;
   {!
   |? _kod_nie:=N.NB().RN; _licz_mc:=_czy_licz:=0;
      _IF_SW:=__RUB.sys_attr(_kod_nie,1318,N.OD);
      {? (_zwoln=1 & __RUB.sys_attr(_kod_nie,135,N.OD)) | (_zwoln=2 & __RUB.sys_attr(_kod_nie,1313,N.OD)) | ( ~_zwoln &
         (_kod_nie=KST_PAR.URLOP().RN | _kod_nie=KST_PAR.URL_CHOR().RN | __RUB.sys_attr(_kod_nie,116,N.OD) |
         __RUB.sys_attr(_kod_nie,1113,N.OD) | _IF_SW |
         (__RUB.sys_attr(_kod_nie,131,N.OD) & ~__RUB.sys_attr(_kod_nie,135,N.OD) & ~__RUB.sys_attr(_kod_nie,1313,N.OD) &
         ~__RUB.sys_attr(_kod_nie,1314,N.OD)) ))
      || _Wyp:=(_kod_nie=KST_PAR.URLOP().RN | _kod_nie=KST_PAR.URL_CHOR().RN | __RUB.sys_attr(_kod_nie,135,N.OD)
            | __RUB.sys_attr(_kod_nie,1313,N.OD) | __RUB.sys_attr(_kod_nie,1113,N.OD));
         _Wartosc:=_DniRob:=_Zasad:=_akord:=0;
         Wskaznik:=WskSkl:=null; Podstawa:=0;
:        ustalenie ostatniego przeszeregowania wzgledem daty OD nieobecnosci
         H.index('_HISTKOD');
         H.prefix(P.ref(),'Z');
         _przeszer:=pom[2]:=date(N.OD~1,N.OD~2,0);
         _WY:=P.WY;
         {? H.last()
         || {!
            |? {? H.OD>pom[2]
               || H.prev()
               ?}
            !};
            _hsx:=exec('hsx','lista_licz',pom[2]);
            pom[5].S1:=_hsx.S1;
            pom[5].S2:=_hsx.S2;
            pom[5].S3:=_hsx.S3;
            obj_del(_hsx);
            &_hsx;
            pom[6]:=H.OD;
            pom[15]:=H.ref();
            pom[18]:=H.CP().S;
            _WY:=H.WY;
            {!
            |? _hsx:=exec('hsx','lista_licz',pom[2]);
               _again:=
                  {? pom[5].S1=_hsx.S1 & pom[5].S2=_hsx.S2 & pom[5].S3=_hsx.S3
                  || pom[6]:=H.OD;
                     _WY:=H.WY;
                     H.prev()
                  ?};
               obj_del(_hsx);
               &_hsx;
               _again
            !};
            _przeszer:=pom[6]
         ?};

         {? _Wyp
         || _Start:=exec('start','!ppl_pll_nals');
            _Od:=date(O.R,O.M-_Start,1);
            pom[12]:=N.OD;
            pom[13]:=N.ref();
            _czy_licz:=0;
            N.cntx_psh();
            N.index('NIEOBECN');
            N.prefix('N',P.ref());
            {? N.prev()
            || {? ( N.NB().RN=KST_PAR.URLOP().RN | N.NB().RN=KST_PAR.URL_CHOR().RN)
                  & N.DO = (pom[12]-1) & N.DO~2<>pom[12]~2
                  & date(_przeszer~1,_przeszer~2,1)=date(pom[12]~1,pom[12]~2,1)
               || _czy_licz:=1;
                  _Start:=exec('start','!ppl_pll_nals');
                  _pom:=O.R*12+O.M-_Start;
                  _Data:=_od:=date(_pom%12,_pom%*12,1);
                  _Od:=date(O.R,O.M-_Start,1);
                  exec('zap_nw_wynchor','lista_licz',pom[13],pom[13]);
:                 ustalenie ostatniego przeszeregowania wzgledem daty OD nieobecnosci rozpoczecia urlopu
                  H.index('_HISTKOD');
                  H.prefix(P.ref(),'Z');
                  _przeszer:=pom[2]:=date(N.OD~1,N.OD~2,0);
                  _WY:=P.WY;
                  {? H.last()
                  || {!
                     |? {? H.OD>pom[2]
                        || H.prev()
                        ?}
                     !};
                     _hsx:=exec('hsx','lista_licz',pom[2]);
                     pom[5].S1:=_hsx.S1;
                     pom[5].S2:=_hsx.S2;
                     pom[5].S3:=_hsx.S3;
                     obj_del(_hsx);
                     &_hsx;
                     pom[6]:=H.OD;
                     pom[15]:=H.ref();
                     pom[18]:=H.CP().S;
                     _WY:=H.WY;
                     {!
                     |? _hsx:=exec('hsx','lista_licz',pom[2]);
                        _again:=
                           {? pom[5].S1=_hsx.S1 & pom[5].S2=_hsx.S2 & pom[5].S3=_hsx.S3
                           || pom[6]:=H.OD;
                              _WY:=H.WY;
                              H.prev()
                           ?};
                        obj_del(_hsx);
                        &_hsx;
                        _again
                     !};
                     _przeszer:=pom[6]
                  ?}
               ?}
            ?};
            N.cntx_pop();
            &Data_nie;
            {? ~_czy_licz
            || _czy_licz:=~__PN.Find(_kod_nie,_Od)
            ?}
         || N.cntx_psh();
            _ref:=exec('nw_find_chp','nieobecnosc',N.ref);
            {? _ref
            || N.seek(_ref)
            ?};
            _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2);
            N.cntx_pop();
            _Od:=date(O.R,O.M-_Start,1);
            _czy_licz:=~__PN.Find(_kod_nie,_Od)
         ?};

         _blokada:=exec('blokada_oblicz','nieobecnosc');
         {? _czy_licz & ~_blokada
         || {! _i:=1..8
            |! godz[_i]:=0
            !};
            {? ~_Wyp
            || _Stop:=_Start
            || _Stop:=s_pom;
               {? _Start<=0
               || _Start:=1
               ?};
               _Stop+=_Start-1;
               {? O.R*12+O.M-_Stop<(P.DZA~1)*12+(P.DZA~2)
               || _Stop:=s_pom
               ?}
            ?};
            {? _Stop>s_pom || _Stop:=s_pom ?};
            pom[14]:=0;
            Finish+=1;
            __PN.NewMc(Finish,{? _Stop<_ile_mc || {? _Stop<=0 || 1 || _Stop ?} || _ile_mc ?});
            _oTrace:=obj_new(@.CLASS.Trace);
:           dla nieobecnosci urlopowych w przypadku ponownego OBLICZ usuwany skladniki SK_CHO
            _kolejny:=1;
            SK_CHO.cntx_psh();
            _maska:='s_ch'+form(N.OD~1,-4,0,'9.');
            {? SK_CHO.name()<>_maska
            || SK_CHO.use(_maska)
            ?};
            SK_CHO.index('SK_CHO');
            SK_CHO.prefix(N.ref());
            {? SK_CHO.first()
            || {!
               |? SK_CHO.del()
               !}
            ?};
            &_maska;
            SK_CHO.cntx_pop();
:           Obsluga sytuacji wyjatkowej:
:           JEZELI
:           - rozliczamy urlop wypoczynkowy lub na zadanie (a nie MD czy okolicznosciowy),
:           - wyplata wynagrodzenia nastepuje z przesunieciem
:             (co moze miec miejsce tylko przy urlopie wypoczynkowym),
:           - przesuniecie eliminuje jedyny miesiac z danymi
:             (_Start>_Stop )
:           TO mimo przesuniecia wezmy pod uwage miesiac, ktory w normalnych warunkach by wypadl.
            {? _Wyp & _Start>_Stop
            || _Start:=_Stop
            ?};

:           Sytuacja szczegolna, nowozatrudniony pracownik w pierwszym miesiacu pracy dostaje wynagrodzenie z
:           przesunieciem wyplaty do nastepnego miesiaca. W drugim miesiacu zatrudnienia wystepuje urlop rozliczony
:           rowniez z przesunieciem wyplaty do nastepnego miesiaca. Nie mozna ustalic wyplaconego wynagrodzenia pomimo
:           ze urlop wystapil w kolejnym miesiacu zatrudnienia. W takim przypadku system ma za zadanie wybrac
:           najblizsze wynagrodzenie. Takim wynagrodzeniem jest w tym przypadku lista z miesiaca zatrudnienia
:           wyplacona w miesiacu urlopu.
            _bez_wyp:=0;
            {? _Wyp & _Start-_Stop+1=1
            || {? ~FUNKCJE.LP(500,,_Start,_Start,1,,1)
               || {? FUNKCJE.L(500,,_Start,_Start)
                  || _bez_wyp:=1
                  || _Start:=_Stop:=0
                  ?}
               ?}
            ?};

            {! _i:=_Start.._Stop
            |? _oTrace.erase();
               _Nieob:=_Praca:=_Kwota:=_odbior:=0;
               _pom:=O.R*12+O.M-_i;
               _Data:=date(_pom%12,_pom%*12,1);
:              początek i koniec miesiaca
               _od:=date(_pom%12,_pom%*12,1);
               _do:=date(_pom%12,_pom%*12,0);

               _wyplata:=0;
               O.cntx_psh();
               LS.cntx_psh();
               O_P.cntx_psh();
:: Dla urlopu okolicznościowego pobieramy zawsze za miesiąc rozliczenia a nie wypłaty
               {? __RUB.sys_attr(_kod_nie,116,N.OD) | __RUB.sys_attr(_kod_nie,1318,N.OD)
               || O_P.index('P_RMK'); _bez_wyp:=1
               || O_P.index('P_RMP')
               ?};
               O_P.prefix('T',P.ref(),_Data~1,_Data~2);
               _first:=1;
               _lpod:=0;
               {? _i & O_P.first()
               || {!
                  |? LS.use(O_P.O().LT);
                     LS.index('PRACNRRU');
                     LS.prefix(P.ref());
                     {? LS.find_key(500)
                     || {? LS.find_key(90) | LS.find_key(91)
                        || _lpod:=1;
                           {? _first
                           || _od:=date(O.R, O.M,1);
                              _do:=date(O.R,O.M,0)
                           ?};
                           _first:=0;
                           {? _od>(_pom:=date(O.R,O.M,1))
                           || _od:=_pom
                           ?};
                           {? _do<(_pom:=date(O.R,O.M,0))
                           || _do:=_pom
                           ?}
                        ?};
                        _wyplata:=1
                     ?};
                     O_P.next()
                  !}
               |? _i=0
               || _wyplata:=1;
                  _lpod:=1
               ?};
               O_P.cntx_pop();
               LS.cntx_pop();
               O.cntx_pop();
               &_pom;

:              nominalna liczba godzin roboczych
               {? _wyplata | _bez_wyp
               || {? _cal
                  || __KAL.set_cal(_cal,_od~1)
                  || __KAL.set_cal('standard',_od~1)
                  ?};
                  pom[16]:=exec('nominal','godziny',_od,_do);
                  _odbior:=(*exec('godz_odb','!ppl_pll_nals',P.ref,_od,_do,'WS')/60)$2
               || pom[16]:=0;
                  pom[14]:=1
               ?};
               &_wyplata;

               {? pom[16]=0 & pom[14]=0
               || RAPLS.msg(
                     P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                     'Brak informacji o kalendarzu pracownika.'@,
                     exec('retry_msg','lista_licz')
                  );
                  pom[14]:=1
               ?};
               {? N.OD~1>2003
               || 'nominalna liczba dni roboczych';
                  _Norma:=pom[16];
                  _Nieob:=exec('licz_nie_urlop','!ppl_pll_nals',_od,_do,1)
               || 'nominalna liczba dni roboczych';
                  _Norma:=__KAL.w_days(_od,_do);
                  _Nieob:=exec('licz_nie_urlop','!ppl_pll_nals',_od,_do)
               ?};
               H.index('_HISTKOD');
               H.prefix(P.ref(),'Z');
               pom[19]:=
                  {? H.find_le(_do)
                  || pom[19]:=H.CP().S
                  || pom[18]
                  ?};

               _G54:=0;
               A_OKRP.prefix(P.ref);
               {? -(1+pom[19])='u' & A_OKRP.find_le(_do) & _do<=A_OKRP.DO
               || {? _i=0
                  || _G54:=FUNKCJE.L(54)+FUNKCJE.LP(54,,0,,1)
                  |? _bez_wyp
                  || _G54:=FUNKCJE.L(54,,_i)
                  || _G54:=FUNKCJE.LP(54,,_i,,1,,1)
                  ?}
               ?};
               {? -(1+pom[19])='u' & _G54=0
               || _Praca:=_Norma-_Nieob-_odbior;
                  _Praca+=_Godz_nad:=
                     {? _i=0
                     || {? _tab_r_godz_kal
                        || FUNKCJE.L_SYS(1011211)+FUNKCJE.LP_SYS(1011211,,,1)
                        || FUNKCJE.L(55,56)+FUNKCJE.L(58)+FUNKCJE.L(64)+FUNKCJE.L(68,69)+FUNKCJE.L(7008,7009)+
                           FUNKCJE.LP(55,56,0,,1)+FUNKCJE.LP(58,,0,,1)+FUNKCJE.LP(64,,0,,1)+
                           FUNKCJE.LP(68,69,0,,1)+FUNKCJE.LP(7008,7009,0,,1)
                        ?}
                     |? _bez_wyp
                     || {? _tab_r_godz_kal
                        || FUNKCJE.L_SYS(1011211,_i)
                        || FUNKCJE.L(55,56,_i)+FUNKCJE.L(58,,_i)+FUNKCJE.L(64,,_i)+
                           FUNKCJE.L(68,69,_i)+FUNKCJE.L(7008,7009,_i)
                        ?}
                     || {? _tab_r_godz_kal
                        || FUNKCJE.LP_SYS(1011211,_i,,1,,,1)
                        || FUNKCJE.LP(55,56,_i,,1,,1)+FUNKCJE.LP(58,,_i,,1,,1)+FUNKCJE.LP(64,,_i,,1,,1)+
                           FUNKCJE.LP(68,69,_i,,1,,1)+FUNKCJE.LP(7008,7009,_i,,1,,1)
                        ?}
                     ?}
               || _Praca:=_Godz_nad:=
                     {? _i=0
                     || {? _tab_r_godz
                        || FUNKCJE.L_SYS(1011212)+FUNKCJE.LP_SYS(1011212,,,1)
                        || FUNKCJE.L(48)+FUNKCJE.L(54,56)+FUNKCJE.L(58)+FUNKCJE.L(63,65)+FUNKCJE.L(67)+
                           FUNKCJE.L(68,69)+FUNKCJE.L(7008,7010)+
                           FUNKCJE.LP(48,,0,,1)+FUNKCJE.LP(54,56,0,,1)+FUNKCJE.LP(58,,0,,1)+FUNKCJE.LP(63,65,0,,1)+
                           FUNKCJE.LP(67,,0,,1)+FUNKCJE.LP(68,69,0,,1)+FUNKCJE.LP(7008,7010,0,,1)
                        ?}
                     |? _bez_wyp
                     || {? _tab_r_godz
                        || FUNKCJE.L_SYS(1011212,_i)
                        || FUNKCJE.L(48,,_i)+FUNKCJE.L(54,56,_i)+FUNKCJE.L(58,,_i)+FUNKCJE.L(63,65,_i)+
                           FUNKCJE.L(67,,_i)+FUNKCJE.L(68,69,_i)+FUNKCJE.L(7008,7010,_i)
                        ?}
                     || {? _tab_r_godz
                        || FUNKCJE.LP_SYS(1011212,_i,,1,,,1)
                        || FUNKCJE.LP(48,,_i,,1,,1)+FUNKCJE.LP(54,56,_i,,1,,1)+FUNKCJE.LP(58,,_i,,1,,1)+
                           FUNKCJE.LP(63,65,_i,,1,,1)+FUNKCJE.LP(67,69,_i,,1,,1)+FUNKCJE.LP(7008,7010,_i,,1,,1)
                        ?}
                     ?};
                  {? _Praca=0
                  || _Praca:=_Norma-_Nieob-_odbior
                  ?}
               ?};

               {? _Nieob<_Norma & pom[16]>0
                  || {? _lpod
                     || _DniRob+=_Praca
                     ?};
:                    ustalenie najnizszej krajowej
                     godz[3]:=
                        {? _i=0
                        || FUNKCJE.L(57)+FUNKCJE.LP(57,,0,,1)
                        |? _bez_wyp
                        || FUNKCJE.L(57,,_i)
                        || FUNKCJE.LP(57,,_i,,1,,1)
                        ?};
                     {? godz[3]
                     || exec('kal_list','personel');
                        _tab:=exec('tab_godz','lista_licz',_Data,1,_i=0 | _bez_wyp);
                        _tab.prefix();
                        _przelicz:=0;
                        {? _tab.first()
                        || {!
                           |? {? pom[20]<>exec('ust_nk','lista_licz',date(_tab.ROK,_tab.MC,0),'NK')
                              || _przelicz:=1;
                                 0
                              || _tab.next()
                              ?}
                           !}
                        ?};
                        exec('kal_prac','personel',O.R);
                        {? _przelicz
                        || {? _tab.first()
                           || _pdgn:=20;
                              _pr_noc:=exec('ust_nk','lista_licz',_do,'PDGN');
                              {? _pr_noc & _pr_noc>_pdgn
                              || _pdgn:=_pr_noc
                              ?};
                              _pdgn:=_pdgn/100;
                              {!
                              |? _lg:=_tab.GODZ;
                                 _st:=(pom[20]/_tab.NOM)$2*_pdgn$2;
                                 _val:=_lg*_st$2;
                                 _opis:=form(_lg,,,'9.')+'*'+form(_st,,,'9.');
                                 _opis+='('+form(_tab.OPIS)+')';
                                 _oTrace.add(122,,_val,'PRZELICZ','E',,,&_opis);
                                 _Wartosc+=_val;
                                 _Kwota+=_val;
                                 _tab.next()
                              !}
                           ?}
                        || _val:=
                              {? _i=0
                              || FUNKCJE.L(122,,,,_oTrace)+FUNKCJE.LP(122,,0,,1,_oTrace)
                              |? _bez_wyp
                              || FUNKCJE.L(122,,_i,,_oTrace)
                              || FUNKCJE.LP(122,,_i,,1,_oTrace,1)
                              ?};
                           _Wartosc+=_val;
                           _Kwota+=_val
                        ?};
                        &_przelicz;
                        &_tab
                     ?};

:: Sprawdzenie czy były nadgodziny z poprzednich miesięcy wystąpienia naliczone w miesiącu badanym.
:: Jeżeli były takie godziny to weryfikacja przeszeregowania będzie odnosiła się do miesiąca wystąpienia nadgodzin.
                     _od_nadg:=_od;
                     {? _Godz_nad
                     || _tab_G:=exec('rozliczone_godziny','godziny',_od~1,_od~2,82,8211);

                        {? _tab_G.first
                        || _od_nadg:=_tab_G.D
                        ?};
                        &_tab_G
                     ?};

                     {? _przeszer>P.DZA & _przeszer>=_od_nadg & date(_przeszer~1,_przeszer~2,1)<=date(N.OD~1,N.OD~2,1)
                     || _tab:=exec('tab_godz','lista_licz',_Data,,_i=0 | _bez_wyp,_WY);
                        _tab.prefix();
                        _st1:=_st2:=_lg:=0;
                        {? _tab.first()
                        || {!
                           |? {? -(1+pom[18])='f'
                              || _st1:=pom[5].S1;
                                 _st2:=_st1+((pom[5].S2+pom[5].S3)/_tab.NOM$2);

                                 {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11
                                 || _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                                    _st_min:=_minimum;
                                    _minimum:=_minimum*_tab.GODZ$2;
                                    _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    _logst:=form(_st2,,,'9.');
                                    {? _tab.RODZ=10 | _tab.RODZ=11
                                    || _val:=_val*0.6$2;
                                       {? _val<_minimum*0.6$2
                                       || _val:=_minimum*0.6$2;
                                          _logst:=form(&_st_min,,,'9.')+'*0.6'
                                       ?}
                                    || {? _val<_minimum
                                       || _val:=_minimum;
                                          _logst:=form(&_st_min,,,'9.')
                                       ?}
                                    ?};
                                    _opis:=form(_lg,,,'9.')+'*'+&_logst+'('+form(_tab.OPIS)+')';
                                    _oTrace.add(120,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=1 | _tab.RODZ=10 | _tab.RODZ=17
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*0.5*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*0.5*'+form(_st1,,,'9.');
                                    {? _tab.RODZ=10
                                    || _val:=_val*0.6$2;
                                       _opis+='*0.6'
                                    ?};
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(121,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=2 | _tab.RODZ=11 | _tab.RODZ=18
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    {? _tab.RODZ=11
                                    || _val:=_val*0.6$2;
                                       _opis+='*0.6'
                                    ?};
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(121,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=4
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _val+=_lg*_st2$2;
                                    _opis+='+'+form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(123,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=6
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(123,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=5 | _tab.RODZ=7 | _tab.RODZ=8
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(125,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=5 & _tab.TYP='S'
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=7
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*0.5*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*0.5*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=8
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,form(_lg,,,'9.')+'*'+form(_st1,,,'9.'));
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=12
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=14
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7040,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=15
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7050,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?}
                              || _st1:=pom[5].S1/_tab.NOM$2;
                                 _st2:=(pom[5].S1+pom[5].S2+pom[5].S3)/_tab.NOM$2;

                                 {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11 | _tab.RODZ=18 |
                                    _tab.RODZ=17
                                 || _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                                    _st_min:=_minimum;
                                    _minimum:=_minimum*_tab.GODZ$2;
                                    _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    _logst:=form(_st2,,,'9.');
                                    {? _tab.RODZ=10 | _tab.RODZ=11
                                    || _val:=_val*0.6$2;
                                       {? _val<_minimum*0.6$2
                                       || _val:=_minimum*0.6$2;
                                          _logst:=form(&_st_min,,,'9.')+'*0.6'
                                       ?}
                                    || {? _val<_minimum
                                       || _val:=_minimum;
                                          _logst:=form(&_st_min,,,'9.')
                                       ?}
                                    ?};
                                    _logst+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(120,,_val,'PRZELICZ','E',,,form(_lg,,,'9.')+'*'+&_logst);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=1 | _tab.RODZ=10 | _tab.RODZ=17
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*0.5*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*0.5*'+form(_st1,,,'9.');
                                    {? _tab.RODZ=10
                                    || _val:=_val*0.6$2;
                                       _opis+='*0.6'
                                    ?};
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(121,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=2 | _tab.RODZ=11 | _tab.RODZ=18
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    {? _tab.RODZ=11
                                    || _val:=_val*0.6$2;
                                       _opis+='*0.6'
                                    ?};
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(121,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=4 | _tab.RODZ=6
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _val+=_lg*_st2$2;
                                    _opis+='+'+form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(123,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=5 & _tab.TYP='S'
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=5 | _tab.RODZ=7 | _tab.RODZ=8
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(125,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=7
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*0.5*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*0.5*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=8
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(126,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=12
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7054,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=13
                                 || _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                                    _st_min:=_minimum;
                                    _minimum:=_minimum*_tab.GODZ$2;
                                    _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    {? _val<_minimum
                                    || _val:=_minimum;
                                       _opis:=form(_lg,,,'9.')+'*'+form(&_st_min,,,'9.')
                                    || _opis:=form(_lg,,,'9.')+'*'+form(_st2,,,'9.')
                                    ?};
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7052,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=14
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _val+=_lg*_st2$2;
                                    _opis+='+'+form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7040,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=15
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st1$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st1,,,'9.');
                                    _val+=_lg*_st2$2;
                                    _opis+='+'+form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7050,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?};

                                 {? _tab.RODZ=16
                                 || _lg:=_tab.GODZ;
                                    _val:=_lg*_st2$2;
                                    _opis:=form(_lg,,,'9.')+'*'+form(_st2,,,'9.');
                                    _opis+='('+form(_tab.OPIS)+')';
                                    _oTrace.add(7058,,_val,'PRZELICZ','E',,,&_opis);
                                    _Wartosc+=_val;
                                    _Kwota+=_val
                                 ?}
                              ?};
::                            Wtyczka umożliwiajaca przeliczenie wynagrodzenia za godziny niestandardowe
                              params_set('pom',pom,'Data',_Data,'i',_i,'bez_wyp',_bez_wyp,'oTrace',_oTrace,
                                 'WY',_WY,'przeszer',_przeszer,'tab',_tab);
                              _val:=Plugin.run('PPL_PLL_NALS_URLOP');
                              _Wartosc+=_val;
                              _Kwota+=_val;
                              _tab.next()
                           !}
                        ?};
                        &_tab;
                        {? -(1+pom[18])='f'
                        || _lg:=
                              {? _i=0
                              || {? _tab_r_godz
                                 || FUNKCJE.L_SYS(1011213)+FUNKCJE.LP_SYS(1011213,,,1)
                                 || FUNKCJE.L(48)+FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(67)+FUNKCJE.L(65)+
                                    FUNKCJE.LP(48,,0,,1)+FUNKCJE.LP(54,,0,,1)+FUNKCJE.LP(63,,0,,1)+FUNKCJE.LP(67,,0,,1)+
                                    FUNKCJE.LP(65,,0,,1)
                                 ?}
                              |? _bez_wyp
                              || {? _tab_r_godz
                                 || FUNKCJE.L_SYS(1011213,_i)
                                 || FUNKCJE.L(48,,_i)+FUNKCJE.L(54,,_i)+FUNKCJE.L(63,,_i)+FUNKCJE.L(67,,_i)+
                                    FUNKCJE.L(65,,_i)
                                 ?}
                              || {? _tab_r_godz
                                 || FUNKCJE.LP_SYS(1011213,_i,,1,,,1)
                                 || FUNKCJE.LP(48,,_i,,1,,1)+FUNKCJE.LP(54,,_i,,1,,1)+FUNKCJE.LP(63,,_i,,1,,1)+
                                    FUNKCJE.LP(67,,_i,,1,,1)+FUNKCJE.LP(65,,_i,,1,,1)
                                 ?}
                              ?};
                           _st:=
                              {? H.prefix(); H.seek(pom[15])
                              || {? H.CZYWAL='T'
                                 || exec('waluta','lista_licz',1,,,H.S1)
                                 || H.S1
                                 ?}
                              ?};
                           _val:=_lg*_st$2;
                           _oTrace.add(100,,_val,'PRZELICZ','E',,,form(_lg,,,'9.')+'*'+form(_st,,,'9.'));
                           _Zasad+=_val;
                           _Kwota+=_val;
                           _akord+=
                              {? _i=0
                              || FUNKCJE.L(111)+FUNKCJE.LP(111,,0,,1)
                              |? _bez_wyp
                              || FUNKCJE.L(111,,_i)
                              || FUNKCJE.LP(111,,_i,,1,,1)
                              ?};
                           &_st
                        ?};
                        &_st2;
                        &_st1;
                        &_lg;
                        H.cntx_psh();
                        H.index('_HISTKOD');
                        H.prefix(P.ref(),'Z');
                        {? H.find_le(_do)
                        || _hsx:=exec('hsx','lista_licz',_do);
                           _s1:=_hsx.S1;
                           _s2:=_hsx.S2;
                           _s3:=_hsx.S3;
                           obj_del(_hsx);
                           &_hsx;
::                         sprawdzenie zmiany stawki godzinowej dla FIZ w trakcie miesiąca
                           {? -(1+pom[18])='f'
                           || {? H.prev() & H.DO<>date(0,0,0) & H.DO>=_od & H.DO<_do
                              || {? var_pres('_hsx')>100 || obj_del(_hsx) ?};
                                 _hsx:=exec('hsx','lista_licz',_od);
                                 _s1p:=_hsx.S1;
                                 _s2p:=_hsx.S2;
                                 _s3p:=_hsx.S3;
                                 obj_del(_hsx);
                                 &_hsx;
                                 {? _s1p<>_s1 | _s2p<>_s2 | _s3p<>_s3
                                 || _s1:=_s1p;
                                    _s2:=_s2p;
                                    _s3:=_s3p
                                 ?};
                                 &_s1p;
                                 &_s2p;
                                 &_s3p
                              ?}
                           ?}
                        || _s1:=_s2:=_s3:=0
                        ?};
                        H.cntx_pop();
                        {? -(1+pom[18])='u' & -(1+pom[19])='f'
                        || _val:=LICZ.Wylicz(_i,'.URL',,_oTrace,_s1,pom[5].S1/_Norma$2,_s2,pom[5].S2,_s3,pom[5].S3,1);
                           RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                              'Przeliczenie bieżącego miesięcznego wynagrodzenia w miesiącu stawki godzinowej.',
                              'Skontroluj wyliczenia (podstawa urlopu) miesiąc: '+date(_od~1,_od~2,1)$8+'.')
                        |? -(1+pom[18])='f' & -(1+pom[19])='u'
                        || _val:=LICZ.Wylicz(_i,'.URL',,_oTrace,_s1/_Norma$2,pom[5].S1,_s2,pom[5].S2,_s3,pom[5].S3,1);
                           RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                              'Przeliczenie bieżącej stawki godzinowej w miesiącu stałego wynagrodzenia.',
                              'Skontroluj wyliczenia (podstawa urlopu) miesiąc: '+date(_od~1,_od~2,1)$8+'.')
                        || _val:=LICZ.Wylicz(_i,'.URL',,_oTrace,_s1,pom[5].S1,_s2,pom[5].S2,_s3,pom[5].S3,1,_bez_wyp)
                        ?};
                        {? _i=0
                        || _val+=LICZ.Wylicz(,'.URL',,_oTrace,_s1,pom[5].S1,_s2,pom[5].S2,_s3,pom[5].S3,1)
                        ?};
                        &_s3;
                        &_s2;
                        &_s1;
                        _Wartosc+=_val;
                        _Kwota+=_val
                     || _val:=
                           {? _i=0 & _bez_wyp
                           || {? _tab_wyn_godz
                              || FUNKCJE.L_SYS(1011221,,,_oTrace)+FUNKCJE.L_SYS(1011221,0,,_oTrace)
                              || FUNKCJE.L(120,121,,,_oTrace)+FUNKCJE.L(120,121,0,,_oTrace)+
                                 FUNKCJE.L(123,,,,_oTrace)+FUNKCJE.L(123,,0,,_oTrace)+
                                 FUNKCJE.L(125,126,,,_oTrace)+FUNKCJE.L(125,126,0,,_oTrace)+
                                 FUNKCJE.L(7040,7040,,,_oTrace)+FUNKCJE.L(7040,7040,0,,_oTrace)+
                                 FUNKCJE.L(7050,7050,,,_oTrace)+FUNKCJE.L(7050,7050,0,,_oTrace)+
                                 FUNKCJE.L(7052,7052,,,_oTrace)+FUNKCJE.L(7052,7052,0,,_oTrace)+
                                 FUNKCJE.L(7054,7054,,,_oTrace)+FUNKCJE.L(7054,7054,0,,_oTrace)+
                                 FUNKCJE.L(7058,7058,,,_oTrace)+FUNKCJE.L(7058,7058,0,,_oTrace)
                              ?}+
                              LICZ.Wylicz(,'.URL',,_oTrace,,,,,,,1,_bez_wyp)
                           |? _i=0
                           || {? _tab_wyn_godz
                              || FUNKCJE.L_SYS(1011221,,,_oTrace)+FUNKCJE.LP_SYS(1011221,0,,1,_oTrace)
                              || FUNKCJE.L(120,121,,,_oTrace)+FUNKCJE.LP(120,121,0,,1,_oTrace)+
                                 FUNKCJE.L(123,,,,_oTrace)+FUNKCJE.LP(123,,0,,1,_oTrace)+
                                 FUNKCJE.L(125,126,,,_oTrace)+FUNKCJE.LP(125,126,0,,1,_oTrace)+
                                 FUNKCJE.L(7040,7040,,,_oTrace)+FUNKCJE.LP(7040,7040,0,,1,_oTrace)+
                                 FUNKCJE.L(7050,7050,,,_oTrace)+FUNKCJE.LP(7050,7050,0,,1,_oTrace)+
                                 FUNKCJE.L(7052,7052,,,_oTrace)+FUNKCJE.LP(7052,7052,0,,1,_oTrace)+
                                 FUNKCJE.L(7054,7054,,,_oTrace)+FUNKCJE.LP(7054,7054,0,,1,_oTrace)+
                                 FUNKCJE.L(7058,7058,,,_oTrace)+FUNKCJE.LP(7058,7058,0,,1,_oTrace)
                              ?}+
                              LICZ.Wylicz(,'.URL',,_oTrace,,,,,,,1,_bez_wyp)
                           |? _bez_wyp
                           || {? _tab_wyn_godz
                              || FUNKCJE.L_SYS(1011221,_i,,_oTrace)
                              || FUNKCJE.L(120,121,_i,,_oTrace)+
                                 FUNKCJE.L(123,,_i,,_oTrace)+
                                 FUNKCJE.L(125,126,_i,,_oTrace)+
                                 FUNKCJE.L(7040,7040,_i,,_oTrace)+
                                 FUNKCJE.L(7050,7050,_i,,_oTrace)+
                                 FUNKCJE.L(7052,7052,_i,,_oTrace)+
                                 FUNKCJE.L(7054,7054,_i,,_oTrace)+
                                 FUNKCJE.L(7058,7058,_i,,_oTrace)
                              ?}
                           || {? _tab_wyn_godz
                              || FUNKCJE.LP_SYS(1011221,_i,,1,_oTrace,,1)
                              || FUNKCJE.LP(120,121,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(123,,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(125,126,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(7040,7040,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(7050,7050,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(7052,7052,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(7054,7054,_i,,1,_oTrace,1)+
                                 FUNKCJE.LP(7058,7058,_i,,1,_oTrace,1)
                              ?}
                           ?}+LICZ.Wylicz(_i,'.URL',,_oTrace,,,,,,,1,_bez_wyp);
                        _Wartosc+=_val;
                        _Kwota+=_val;
                        {? -(1+pom[19])='f'
                        || _val:=
                              {? _i=0
                              || FUNKCJE.L(100,,,,_oTrace)+FUNKCJE.LP(100,,0,,1,_oTrace)
                              |? _bez_wyp
                              || FUNKCJE.L(100,,_i,,_oTrace)
                              || FUNKCJE.LP(100,,_i,,1,_oTrace,1)
                              ?};
                           _Zasad+=_val;
                           _Kwota+=_val;
                           _akord+=
                              {? _i=0
                              || FUNKCJE.L(111)+FUNKCJE.LP(111,,0,,1)
                              |? _bez_wyp
                              || FUNKCJE.L(111,,_i)
                              |? FUNKCJE.L(111,,_i)
                              || FUNKCJE.LP(111,,_i,,1,,1)
                              ?}
                        ?}
                     ?};
:                    zapisanie do tablicy
                     {? ~_licz_mc & ~_lpod & _Kwota
                     || _lpod:=1;
                        _DniRob+=_Praca
                     ?};
                     {? _lpod | _Kwota
                     || _licz_mc+=1;
                        __PN.PutMc(Finish,_licz_mc,_Kwota,
                           {? _lpod || _Norma ?},
                           {? _lpod || _Praca ?},
                           0,'T',_Data,'A',_oTrace
                        )
                     ?}
               ?};
               _licz_mc<_ile_mc
            !};
            obj_del(_oTrace);
            &_oTrace;
            __PN.Zapisz(Finish);
            {? _DniRob>0
            || _Std:=(_Wartosc+_Zasad)/_DniRob$2
            || _Std:=0
            ?};
            {? (_Zasad>0 | _akord>0) & _DniRob>0
            || 1
            |? -(1+pom[18])='f'
            || {? N.OD~1>2003
               || {? N.NG>0
                  || _Zasad:=FUNKCJE.L(91);
                     _Std+=_Zasad
                  ?}
               || {? N.NR>0
                  || _Zasad:=(FUNKCJE.L(91)*N.NG)/N.NR$2;
                     _Std+=_Zasad
                  ?}
               ?}
            ?};
            nbp:=exec('nw_find_chp','nieobecnosc',N.ref);
            nbp:={? nbp || nbp || N.ref ?};
            __PN.Put(Finish,N.NB().RN,N.OD,_Od,date(0,0,0),_Std,nbp);
            exec('zap_tab','lista_licz',nbp);
            &nbp;
            {? N.OD~1>2003
            || {? __RUB.sys_attr(_kod_nie,1161,N.OD)
               || Suma_OK+=(N.WART:=_Std*N.NG)
               |? __RUB.sys_attr(_kod_nie,1162,N.OD)
               || Suma_MD+=(N.WART:=_Std*N.NG)
               |? __RUB.sys_attr(_kod_nie,1311,N.OD)
               || _Suma_NP+=(N.WART:=_Std*N.NG)
               |? _IF_SW
               || _Suma_SW+=(N.WART:=_Std*N.NG*N.PROC/100$2)
               || _Suma+=(N.WART:=_Std*N.NG)
               ?}
            || _Suma+=(N.WART:=_Std*N.NR)
            ?};
            {? ~_IF_SW
            || N.POTR1:=N.POTR2:=N.POTR3:=N.POTR4:=0
            ?};
            N.put()
         |? _czy_licz & N.WART
         || {? __RUB.sys_attr(_kod_nie,1161,N.OD)
            || Suma_OK+=N.WART
            |? __RUB.sys_attr(_kod_nie,1162,N.OD)
            || Suma_MD+=N.WART
            |? __RUB.sys_attr(_kod_nie,1311,N.OD)
            || _Suma_NP+=N.WART
            |? _IF_SW
            || _Suma_SW+=N.WART
            || _Suma+=N.WART
            ?}
         || {? _blokada
            || _Std:=0
            || _Std:=__PN.Pod(Finish);
:           Dla nieobecnosci urlopowych w przypadku ponownego OBLICZ usuwany skladniki SK_CHO
               {? _kolejny=1
               || SK_CHO.cntx_psh();
                  _maska:='s_ch'+form(N.OD~1,-4,0,'9.');
                  {? SK_CHO.name()<>_maska || SK_CHO.use(_maska) ?};
                  SK_CHO.index('SK_CHO');
                  SK_CHO.prefix(N.ref());
                  {? SK_CHO.first() || {! |? SK_CHO.del() !} ?};
                  &_maska;
                  SK_CHO.cntx_pop()
               ?};
               _wskaznik:=__PN.Wsk(Finish);
               exec('zap_tab','lista_licz',_wskaznik,1);
               exec('sk_cho_zapisz','skladniki_okresowe',_wskaznik);
               &_wskaznik
            ?};

            {? N.OD~1>2003
            || {? __RUB.sys_attr(_kod_nie,1161,N.OD)
               || Suma_OK+=(N.WART:=_Std*N.NG)
               |? __RUB.sys_attr(_kod_nie,1162,N.OD)
               || Suma_MD+=(N.WART:=_Std*N.NG)
               |? __RUB.sys_attr(_kod_nie,1311,N.OD)
               || _Suma_NP+=(N.WART:=_Std*N.NG)
               |? _IF_SW
               || _Suma_SW+=(N.WART:=_Std*N.NG*N.PROC/100$2)
               || _Suma+=(N.WART:=_Std*N.NG)
               ?}
            || _Suma+=(N.WART:=_Std*N.NR)
            ?};
            {? ~_IF_SW
            || N.POTR1:=N.POTR2:=N.POTR3:=N.POTR4:=0
            ?};
            N.put()
         ?};
         VAR_DEL.delete('Data_nie','Wskaznik','Podstawa','WskSkl')
      ?};
      N.next()
   !};
   __PN.Delete()
?};
A_OKRP.cntx_pop();
H.cntx_pop();
N.cntx_pop();

obj_del(godz);
obj_del(pom);

&__KORZ;
&Finish;
&s_pom;
&_licz_mc;
&_przeszer;
: poprawka do ER/WRT/XP/12.41/1707/0043 - wykonanie warunkowe
{? ~_zwoln
|| FUNKCJE.LK_SYS(424,,Suma_OK$2);
   FUNKCJE.LK_SYS(425,,Suma_MD$2);
   FUNKCJE.LK_SYS(426,,_Suma_NP$2);
   FUNKCJE.LK_SYS(4551,,_Suma_SW$2)
?};
&Suma_OK;
&Suma_MD;
_Suma$2


\godz_odb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Godziny odebrane
::   WE: _a - P.ref
::       _b - data od
::       _c - data do
::       _d - String z lista szukanych typow 'WSPF'
::   WY: [time] - Liczba odebranych godzin w okresie od - do
::  OLD: \godz_odb/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_p_ref:={? var_pres('_a')<>type_of(null) || return(*0) || _a ?};
_od:={? var_pres('_b')<>type_of(date) || return(*0) || _b ?};
_do:={? var_pres('_c')<>type_of(date) || return(*0) || _c ?};
_lista:={? var_pres('_d')<>type_of('') || return(*0) || _d ?};

_sql:=
   'select * from R_WO '
   'where R_WO.P=\''+$_p_ref+'\' '
   'and R_WO.DO>=to_date(:_a) and R_WO.DO<=to_date(:_b) '
   'and R_WO.W in (';
{! _ind:=1..(+_lista)
|! _sql+='\''+((_ind+_lista)+1)+'\''+{? _ind<+_lista|| ',' || ')' ?}
!};
_tab:=sql(_sql,_od,_do);

_godz:=*0;
{? _tab.first()
|| {!
   |? _godz+=_tab.G;
      _tab.next()
   !}
?};
_godz


\licz_nie_urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenie dni nieobecnosci
::   WE: _a - data początku
::       _b - data końca
::       _c - rodzaj dni
::          0 lub brak parametru - dni robocze
::          1 godziny robocze
::          2 dni kalendarzowe
::   WY:
::  OLD: \licz_nie/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(0)
|| _c:=0
?};
_plg_n:=Plugin.run('PPL_PLL_NALS_NB');
_mc_pocz:=_a;
_mc_konie:=_b;
_dni_nie:=0;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
{? N.last()
|| {!
   |? {? (N.OD<=_mc_konie & N.DO>=_mc_pocz)
         & (~__RUB.sys_attr(N.NB,122722,date(O.R,O.M,0)) & ~__RUB.sys_attr(N.NB,122742,date(O.R,O.M,0)))
         & ~(_plg_n*(','+$N.NB().RN+','))
      || {? N.OD>_mc_pocz
         || _od:=N.OD
         || _od:=_mc_pocz
         ?};
         {? N.DO>_mc_konie
         || _do:=_mc_konie
         || _do:=N.DO
         ?};
         {? _do>=_od
         || {? _od=N.OD & _do=N.DO
            || _dni_nie+=
                  {? _c=2
                  || N.NK
                  |? _c
                  || N.NG
                  || N.NR
                  ?}
            || _dni_nie+=
                  {? _c
                  || {? _c=2
                     || (_do-_od)+1
                     || {? H.find_le(_od)
                        || __KAL.w_hours(_od,_do)*{? P.KIN='T' || 1 || H.WY ?}$2
                        || __KAL.w_hours(_od,_do)*{? P.KIN='T' || 1 || P.WY ?}$2
                        ?}
                     ?}
                  || __KAL.w_days(_od,_do)
                  ?}
            ?}
         ?}
      ?};
      N.prev() & N.DO>=_mc_pocz
   !}
?};
N.cntx_pop();
_dni_nie


\dekl_tab_urlop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
::       RWR [12.30]
:: OPIS: Procedura tworzaca zmienne pomocnicze.
::   WE:
::   WY:
::  OLD: \dekl_tab/urlop.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('godz')<100
|| godz:=obj_new(8)
?};

{? var_pres('pom')<100
|| pom:=obj_new(20);
   pom[5]:=obj_new('S1','S2','S3')
?}


\start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Ustalenie miesiąca początkowego obliczeń.
::   WE:
::   WY:
::  OLD: \start/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('__KORZ')<=0
|| __KORZ:=0
?};
{? var_pres('_a')=1
|| _a:=1
|| _a:=0
?};
:: Parametr z wywolania, gdy mamy policzona podstawa
_b:={? var_pres('_b')=1 || _b ?};
{? var_pres('_c')>100 || _covid:=_c; _is_cov:=_covid.T; _is_mac:=_covid.MAC
|| _is_mac:=_is_cov:=0 ?};

: ustalenie gornego zakresu
_od:=N.OD;
_do:=N.DO;
N.cntx_psh();
N.index('NIEOBECN');
{? _is_cov
|| _od_cia:=_covid.N
|| _od_cia:=exec('data_ciaglosci','nieobecnosc',N.NB().RN)
?};
N.cntx_pop();
_przep:=N.PRZELICZ<>'T';
Wskaznik:=N.ref();
WskSkl:=N.ref();
N.cntx_psh();
{? _chp:=exec('nw_find_chp','nieobecnosc',N.ref())
|| {? __RUB.sys_attr(N.NB,12) & ~__RUB.sys_attr(N.NB,1227) & exec('ustal_h_wym','lista_licz','MAC',N.OD)
   || _chp:=exec('zn_chp_bez_mac','!ppl_pll_nals',N.ref())
   ?};
:  sprawdzenie czy jest ciaglosc dla niebecnosci zasilkowej i ustalenie podstawy w oparciu
:  o okres dla poprzedniej nieobecnosci
   _q:=N.NB().RN;
   {? _chp=N.ref & N.OD>=__STALE.D_ZAS & __RUB.sys_attr(_q,123,N.OD)
   || N.cntx_psh();
      N.index('NIEOBECN');
      {? N.prev() & N.DO+1=_od & __RUB.sys_attr(N.NB,121,N.OD)
      || {? _is_cov
         || _od:=_covid.N
         || _od:=exec('data_ciaglosci','nieobecnosc')
         ?}
      ?};
      N.cntx_pop
      ||
         Wskaznik:={? _chp || _chp || N.ref() ?};
         N.clear();
         {? N.seek(_chp)
         || _od:=N.OD;
            {? _is_cov
            || _do:=N.DO
            ?};
            {? _a
            || N.cntx_pop();
               N.cntx_psh();
               {? exec('pop_n','!ppl_pll_nals',{? _is_cov || _covid.N_REF || N.ref ?}) & ~__KORZ
               || exec('ust_h','!ppl_pll_nals',0,_do,_is_mac);
                  _ust_pod:=Zmiana:=0;
::                MK poprawka[EXC]
                  exec('ust_sko','!ppl_pll_nals',0);
                  _ust_sko:=0;
                  {! _i:=1..3
                  |! _ust_pod+=sta_bnie[_i]>=sta_pnie[_i]
                  !};
                  {? _ust_pod<>3
                  || Zmiana:=1
                  ?};
::                MK poprawka[EXC]
                  {? var_pres('sta_sko')=117
                  || {! _i:=1..obj_len(sta_sko)
                     |! _ust_sko+=sta_sko[_i]=sta_skn[_i]
                     !};
                     _ust_sko:=_ust_sko=obj_len(sta_sko)
                  || _ust_sko:=1
                  ?};
                  {? _b
                  || {? _ust_pod=3 & _przep  & _ust_sko
                     || Wskaznik:=N.ref();
                        WskSkl:=N.ref()
                     ?}
                  || Podstawa:=
                        {? _ust_pod=3 & _przep  & _ust_sko
                        || Wskaznik:=N.ref();
                           WskSkl:=N.ref();
                           N.POD
                        ?}
                  ?};
                  {? N.OD<=__STALE.D_TRYB & __STALE.ZM_POD
                  || Podstawa:=0
                  ?};
                  {? Podstawa & {? _b || (_ust_pod=3 & _przep & _ust_sko) || 1 ?}
                  || N.cntx_pop();
                     N.cntx_psh();
                     {? (N.OD>=__STALE.D_TRYB | N.OD<__STALE.D_TRYB & N.DO>=__STALE.D_TRYB) & __STALE.ZM_POD
                     || {? exec('pop_n','!ppl_pll_nals',{? _is_cov || _covid.N_REF || N.ref ?})
                        || Wskaznik:=N.ref();
                           WskSkl:=N.ref();
                           {? N.OD<__STALE.D_TRYB & __STALE.ZM_POD
                           || Podstawa:=0
                           ?}
                        || Podstawa:=0
                        ?}
                     ?}
                  ?};
                  _kwmin:={? ~_b & Podstawa>0 || exec('nieob_wyr','!ppl_pll_nals') ?};
                  {? _kwmin
                  || Podstawa-=_kwmin;
                     {? Podstawa<0
                     || Podstawa:=0
                     ?}
                  ?}
               ?}
            || Podstawa:=N.POD
            ?}
         ?}
      ?}
   || N.index('NIEOBECN');
      N.cntx_psh();
      _q:=N.NB().RN;
      _pop:=0;
      {? N.OD>=__STALE.D_ZAS & __RUB.sys_attr(_q,123,N.OD)
      || _od:=N.OD;
         {? N.prev & N.DO+1=_od & __RUB.sys_attr(N.NB,121,N.OD)
         || {? _is_cov
            || _od:=_covid.N
            || exec('data_ciaglosci','nieobecnosc')
            ?};
            _pop:=1
         ?}
      ?};
      N.cntx_pop();
      {? {? ~_pop
         || _ref:=exec('n_find_chp','nieobecnosc',N.NB().RN,N.OD);
            _ref<>null
         ?}
      || {? _chp:=exec('nw_find_chp','nieobecnosc',_ref)
         || Wskaznik:={? _chp || _chp || N.ref ?};
            N.clear;
            {? N.seek(_chp)
            || {? _a
               || exec('ust_h','!ppl_pll_nals',0,_do,_is_mac);
                  _ust_pod:=Zmiana:=0;
::                MK poprawka[EXC]
                  exec('ust_sko','!ppl_pll_nals',0);
                  _ust_sko:=0;
                  {! _i:=1..3
                  |! _ust_pod+=(sta_bnie[_i]>=sta_pnie[_i] )
                  !};
                  {? _ust_pod<>3
                  || Zmiana:=1
                  ?};
::                MK poprawka[EXC]
                  {? var_pres('sta_sko')=117
                  || {! _i:=1..obj_len(sta_sko)
                     |! _ust_sko+=(sta_sko[_i]=sta_skn[_i])
                     !};
                     _ust_sko:=(_ust_sko=obj_len(sta_sko))
                  || _ust_sko:=1
                  ?};
                  Podstawa:={? ~_pop || {? _ust_pod=3 & _ust_sko || N.POD ?} ?};
                  {? Podstawa>0
                  || _kwmin:=exec('nieob_wyr','!ppl_pll_nals')
                  || _kwmin:=0
                  ?};
:                 '<- MK poprawka[EXC]
                  {? _kwmin
                  || Podstawa-=_kwmin;
                     {? Podstawa<0
                     || Podstawa:=0
                     ?}
                  ?}
               || Podstawa:={? ~_pop || N.POD ?}
            ?};
            _od:=N.OD
         ?}
      ?}
   ?}
?};

N.cntx_pop();

_zakres:=0;
Data_nie:=_od;
_od:=date(_od~1,_od~2-1,1);
_mc:=date(O.R,O.M,1);
_zakres:=(_mc~1*12+_mc~2)-(_od~1*12+_od~2);

{? _zakres<1
|| _zakres:=1
?};
_zakres


\stop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: ustalenie dolnego zakresu przekazanym argumentem powinien byc gorny zakres
::   WE: _c - tablica obsługująca tarczę antykryzysową
::   WY:
::  OLD: \stop/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')>100
|| _covid:=_c;
   _is_cov:=_covid.T;
   _is_mac:=_covid.MAC
|| _is_mac:=_is_cov:=0
?};
_T_mac:="
   {? _a
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || H.prev()
         ?}
      !}
   || 1
   ?}";
_MAC:="0";
{? __RUB.sys_attr(N.NB,122722) | __RUB.sys_attr(N.NB,122742)
|| _RWY:="H.RWY"
|| _RWY:="H.WY"; _MAC:="H.MAC='T'"
?};
_h_mac2nb:=exec('ustal_h_wym','lista_licz','MAC',N.OD);

N.cntx_psh();
N.index('NIEOBECN');
{? _is_cov
|| _d_cia:=_covid.N
|| _d_cia:=exec('data_ciaglosci','nieobecnosc',N.NB().RN)
?};
N.cntx_pop();

_d_pom:=_d_cia;
_mc:=date(O.R,O.M,1);
_przes:=(_mc~1*12+_mc~2)-(_d_pom~1*12+_d_pom~2);
_mc_pom:=_d_pom~2-(_a-_przes+(_b-1));
{? _mc_pom>=13 || _mc_pom:=12 ?};
_d_pom_0:=date(_d_pom~1,_mc_pom,1);
_zakres:=0;
_data_od:=date(0,0,0);
_data_zat:=P.DZA;
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.last()
|| {? _is_cov
   || H.find_le(_covid.H) & H.prev()
   || {? _is_mac & H.find_le(_d_cia)
      || _T_mac(_is_mac)
      ?};
      {!
      |? {? H.OD>_d_pom
         || H.prev()
         ?}
      !}
   ?};

   _wymiar:=_RWY(); _exit:=0; _mac:=_MAC();
   _powrotZmac:=H.MAC;
   {! |?
      {? H.OD <= _d_pom_0
         || _exit:=1
      |? H.prev()
      || _T_mac(_is_mac);
         {? (~_h_mac2nb & _MAC() & (H.MAC<>_powrotZmac & _powrotZmac='T'))
         || H.prev()
         || {? _RWY() <> _wymiar | _MAC() <> _mac
            || _exit:=1;
               _data_od:=H.DO+1
            ?}
         ?}
      || _exit:=1
      ?};
      _wymiar:=_RWY();
      _mac:=_MAC();
      ~_exit
   !}
?};
H.cntx_pop();
_l_mc:=date(O.R,O.M,1);
_l_mc:=(_l_mc~1*12+_l_mc~2);
Data_zm:=_data_od;
{? Data_zm<>date(0,0,0) & Data_zm>Data_nie
|| {? _d_cia<>N.OD
   || Data_nie:=_d_cia
::    sytuacja gdy zmieniony wymiar zatrudnienia i nalezy pobrac podstawe z ewentualnie
::    znalezionej nieobecnosci z przeliczona wg nowego wymiaru podstawa
   || N.cntx_psh();
      _n_biez:=N.OD;
      {? Data_zm<=N.OD
      || {? _is_cov & N.seek(_covid.N_REF)
         || Data_nie:=_covid.N
         || {? exec('pop_n','!ppl_pll_nals',N.ref())<>null
            || N.cntx_psh();
               N.index('NIEOBECN');
               N.prefix('N',P.ref());
               _d_cia_1:=exec('data_ciaglosci','nieobecnosc',N.NB().RN);
               N.cntx_pop();
               {? _d_cia_1<Data_zm & date(_d_cia_1~1,_d_cia_1~2,1)<>date(Data_zm~1,Data_zm~2,1)
               || Data_nie:=_n_biez
               || N.index('NIEOBECN');
                  N.prefix('N',P.ref());
                  _oddd:=exec('data_ciaglosci','nieobecnosc',N.NB().RN,Data_zm);
                  {? Data_zm<=_oddd
                  || Data_nie:=_oddd
                  || Data_nie:=_d_cia
                  ?}
               ?}
            ?}
         ?}
      ?};
      N.cntx_pop()
   ?}
?};
: Dla zmiany wymiaru zatrudnienia w miesiacu nieobecnosci rozliczamy z miesiaca zmiany
{? Data_zm<>date(0,0,0) & date(Data_zm~1,Data_zm~2,1)=date(N.OD~1,N.OD~2,1) & Data_zm<=N.OD
|| {? _d_cia<>N.OD
   || Data_nie:=_d_cia
   || Data_nie:=N.OD
   ?}
?};
{? _data_od<>date(0,0,0) & _data_od>_d_pom_0 & _data_od<=Data_nie
|| _g_mc:=_data_od~1*12+_data_od~2;
   {? _data_od~3<>1
   || _zakres:=(_l_mc-_g_mc)-1
   || _zakres:=(_l_mc-_g_mc)
   ?}
|? _data_zat>_d_pom_0
|| _g_mc:=_data_zat~1*12+_data_zat~2;
   {? _data_zat<=exec('ust_pie_wynchor','lista_licz',_data_zat)
   || _zakres:=(_l_mc-_g_mc)
   || _zakres:=(_l_mc-_g_mc)-1
   ?}
|| _zakres:=_a+(_b-1);
   _d_pom_0:=date(O.R,O.M-_zakres,1);
   {? _data_zat>_d_pom_0
   || _g_mc:=_data_zat~1*12+_data_zat~2;
      {? _data_zat<=exec('ust_pie_wynchor','lista_licz',_data_zat)
      || _zakres:=(_l_mc-_g_mc)
      || _zakres:=(_l_mc-_g_mc)-1
      ?}
   ?}
?};

{? _zakres<0
|| _zakres:=0
?};
_zakres


\zn_chp_bez_mac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Znajduje nieobecnosc pierwotna z pominieciem macierzynskiego
::   WE:
::   WY:
::  OLD: \zn_chp_bez_mac/nieowal.fml
::----------------------------------------------------------------------------------------------------------------------
_chp:=null;
_mac:=exec('ustal_h_wym','lista_licz','MAC',N.OD);
_od:=N.OD;
N.cntx_psh();
NW.cntx_psh();
NW.index('CHW');
NW.prefix(_a);
{? NW.first()
|| NW.index('CHP');
   NW.prefix(NW.CHP);
   {? NW.find_le(_od)
   || {!
      |? {? _od=NW.CHW().OD
         || NW.prev()
         |? ~__RUB.sys_attr(NW.CHW().NB,1227)
         || {? _mac<>exec('ustal_h_wym','lista_licz','MAC',N.OD)
            || NW.prev()
            || _chp:=NW.CHW; 0
            ?}
         || NW.prev()
         ?}
      !}
   ?}
?};
NW.cntx_pop();
N.cntx_pop();
_chp


\pop_n
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2009]
:: OPIS: Funkcja ustala nieobecnosc poprzednia w stosunku do aktualnej nieobecnosci na podstawie
::       schematu rozliczenia
::   WE: _a - ref nieobecnosci
::       [_b] - bez czyszczenia dziedziny
::  OLD: \pop_n/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_b:=var_pres('_b')=type_of(1) & _b;
_chp:=null;
{? _a<>null
|| _mac:=exec('ustal_h_wym','lista_licz','MAC',N.OD);
   N.cntx_psh();
   NW.cntx_psh();
   NW.index('CHW');
   NW.prefix(_a);
   {? NW.first()
   || _ref:=NW.ref();
      NW.index('CHP');
      NW.prefix(NW.CHP);
      {? NW.seek(_ref)
      || {? (__RUB.sys_attr(NW.CHW().NB,122722) | __RUB.sys_attr(NW.CHW().NB,122742))
         || _od:=NW.CHW().OD;
            {? NW.prev()
            || {!
               |? {? _od<=NW.CHW().OD
                  || NW.prev()
                  || {? NW.CHW().DO<_od & __RUB.sys_attr(NW.CHW().NB,1227)
                     || _chp:=NW.CHW;
                        0
                     || NW.prev()
                     ?}
                  ?}
               !}
             ?}
         || {? ~__RUB.sys_attr(NW.CHW().NB,1227)
         || _od:=NW.CHW().OD;
               {? NW.prev()
               || {!
                  |? {? _od<=NW.CHW().OD
                     || NW.prev()
                     || {? ~(__RUB.sys_attr(NW.CHW().NB,122722) | __RUB.sys_attr(NW.CHW().NB,122742))
                        || _chp:=NW.CHW;
                           0
                        || NW.prev()
                        ?}
                     ?}
                  !}
               ?}
            || _od:=NW.CHW().OD;
               {? NW.prev()
               || {!
                  |? {? _od<=NW.CHW().OD
                     || NW.prev
                     || {? __RUB.sys_attr(NW.CHW().NB,1227) | _mac=exec('ustal_h_wym','lista_licz','MAC',N.OD)
                        || _chp:=NW.CHW;
                           0
                        || NW.prev()
                        ?}
                     ?}
                  !}
               ?}
            ?}
         ?}
      ?}
   ?};
   NW.cntx_pop();
   N.cntx_pop()
?};
{? _chp
|| {? ~_b
   || N.clear
   ?};
   N.seek(_chp)
?}


\nieob_wyr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Funkcja sprawdza czy wyliczono wyrownanie podstawy nieobecnosci do kwoty minimalnego
::       wynagrodzenia pole NW.KWMIN
::   WY: Wyliczona kwota NW.KWMIN jezeli bylo lub 0
::  OLD: \nieob_wyr/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
NW.cntx_psh();
NW.index('CHW');
NW.prefix(N.ref());
_kwmin:={? NW.first || NW.KWMIN$2 ?};
NW.cntx_pop;
_kwmin


\ust_h
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Uzupełnienie informacji o występowaniu poszczególnych elementów wynagrodzenia.
::   WE: _a - rodzaj tablicy 1 - dla biezacej nieobecnosci, rozne od 1 dla pierwotnej
::       _b - data końcowa bieżącej nieobecności (wymagane gdy _a<>1)
::       _c - czy macierzyńki w tarczy Covid
::   WY:
::  OLD: \ust_h/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a<>1 || _do:={? var_pres('_b')=type_of(#0) || _b || date() ?} ?};
_c:={? var_pres('_c')=type_of(0) || _c ?};
_T_mac:="
   {? _a
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || H.prev()
         ?}
      !}
   || 1
   ?}";
H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(N.DO)
|| _T_mac(_c);
   {? _a=1
   || {! _ii:=1..3
      |! sta_mc[_ii]:=sta_bnie[_ii]:=($('H.S'+$_ii))()>0
      !}
   || {! _ii:=1..3
      |! sta_pnie[_ii]:=($('H.S'+$_ii))()>0
      !};
      {? (sta_pnie[2] & sta_bnie[2]) | (sta_pnie[3] & sta_bnie[3])
      || H.clear();
         {? H.f_active() || H.f_clear() ?};
         {? _c
         || H.f_set(
               'OD',
               'join H_ZM using (H.KZ,H_ZM.REFERENCE) left join H_STAT '
               'join SLO_KOD using (H_STAT.SLO_KOD,SLO_KOD.REFERENCE)',
               'H.P=:_a and H_ZM.KZ=\'Z\' and H.OD>=to_date(:_b) and H.OD<=to_date(:_c)
               and SLO_KOD.KOD<>\'T_ZM_WYM\' and SLO_KOD.KOD<>\'T_ZM_WAR\'',
               N.P,N.OD,_do
            )
         || H.f_set(
               'OD',
               'join H_ZM using (H.KZ,H_ZM.REFERENCE)',
               'H.P=:_a and H_ZM.KZ=\'Z\' and H.OD>=to_date(:_b) and H.OD<=to_date(:_c)',
               N.P,N.OD,_do
            )
         ?};
         {? H.f_first()
         || {!
            |? {! _ii:=2..3
               |! {? sta_bnie[_ii] || sta_mc[_ii]:=sta_bnie[_ii]:=($('H.S'+$_ii))()>0 ?}
               !};
               H.f_next()
            !}
         ?};
         {? H.f_active() || H.f_clear() ?}
      ?}
   ?}
?};
H.cntx_pop();
1


\ust_sko
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [12.41]
:: OPIS: Ustalenie czy nastąpiła zmiana parametryzacji premii okresowych
::   WE: _a=1 dla biezacej, rozne od 1 dla pierwotnej
::  OLD: \ust_sko/skl_okr.fml
::----------------------------------------------------------------------------------------------------------------------
PAR_POKR.cntx_psh();
PREM_OKR.cntx_psh();
PAR_POKR.index('PAR_POKR');
PAR_POKR.prefix(exec('ref_firma','ustawienia'));
PREM_OKR.index('PREM_OKR');
{? var_pres('PREM_EXC')=type_of(SYSLOG)
|| PREM_EXC.cntx_psh();
   PREM_EXC.index('PREM_EXC')
?};
_pr:=0;
{? PAR_POKR.first()
|| _zd:=date(0,0,0);
   {!
   |?
:     jezeli nie ma zapisow w PREM_EXC to pobieraj zawsze,
:     jezeli sa sprawdz daty obowiazywania
      _pex:=1;
      {? var_pres('PREM_EXC')=type_of(SYSLOG)
      || PREM_EXC.prefix(P.ref(),PAR_POKR.ref());
         {? PREM_EXC.first()
         || _pex:=0;
            {!
            |? {? PREM_EXC.OD<=N.OD & (PREM_EXC.DO>=N.OD | PREM_EXC.DO=date(0,0,0))
               || _pex:=1
               ?};
               ~_pex & PREM_EXC.next()
            !}
         ?}
      ?};
::    tylko dla pracowników z wypłaconą kiedykolwiek premią danego rodzaju
      PREM_OKR.prefix(P.ref(),'R',PAR_POKR.ref());
      {? PREM_OKR.first()
      || _par:=(
            PAR_POKR.RZ='T' &
            (PAR_POKR.WZ_OD<=N.OD | PAR_POKR.WZ_OD=_zd) &
            (PAR_POKR.WZ_DO>=N.OD | PAR_POKR.WZ_DO=_zd)
         )
      || _par:=0
      ?};
      {? _a
      || sta_sko[_pr+=1]:=_par*_pex
      || sta_skn[_pr+=1]:=_par*_pex
      ?};
      PAR_POKR.next()
   !}
?};
{? var_pres('PREM_EXC')=type_of(SYSLOG)
|| PREM_EXC.cntx_pop()
?};
PREM_OKR.cntx_pop();
PAR_POKR.cntx_pop();
1


\ekwiwalent
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wywołanie formuły na ekwiwalent z pliku lista_plac.fml
::   WE: [_a] - typ wywołania ( puste lub 'E' - ekwiwalent; 'N' - nieobecność np. urlop rehabilitacyjny;
::                'P' - sama podstawa np. do nagrody jubileuszowej)
::       [_b] - ref nieobecności dla _a='N'
::       [_c] - data badania dla _a<>'E'
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _typ:='E' || _typ:=_a ?};
{? var_pres('_b')<>type_of(null) || _N_ref:=null || _N_ref:=_b ?};
{? var_pres('_c')<>type_of(date()) || _data_badania:=date() || _data_badania:=_c ?};
exec('ekwiwalent_ppl','lista_licz',_typ,_N_ref,_data_badania)


\wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Główna formuła wyliczająca wynagrodzenie chorobowe.
::   WE: _a - deskryptor rodzaju nieobecnosci
::       _b: 'u' - umyslowi lub 'f' - fizyczni
::       _c - liczba miesiecy, jesli pominieta to brana z przebiegu zatrudnienia
::       _d - parametr decydujacy czy rozliczenia maja byc w ramach korekty, jesli liczba to naliczenie w ramach korekt
::   WY:
::  OLD: \wynchor/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
:: UWAGA: formuła korzysta z numerow rubryk!
{? var_pres('_d')=type_of(0)
|| __KORZ:=1
|| __KORZ:=0
?};

: zapamietanie kontekstow tabel
N.cntx_psh();
H.cntx_psh();
KZ.cntx_psh();

_dekltab:=0;
_ret_val:=0;
:: MK poprawka[EXC]
deklsko:=0;
_cov_d:=#0;
::sprawdzenie czy rubryka 499 jest wliczana do podstawy zasiłku chorobowego w definicji rubryk
::do odjęcia tej kwoty z obiektu LICZ dla pracowników godzinowych w przypadku uzupełnienia płacy zasadniczej
_min_cho:=0;
_rcho:=obj_new('rub438','rub436','rub442','rub443','rub7134');
R.cntx_psh();
R.index('RUBKOD');
R.prefix();
:: 499 - Wyr. do minim.wynag.
{? R.find_key(499) || _min_cho:=R.CHO='T' ?};
:: ER/WRT/XP/22.26/2311/0015 - Klient w parametryzacji składnika 438 do zasiłku chorobowego wyłączył ten składnik a
:: obliczenia podstawy w wynchor.fml zawsze zliczają kwotę w mc wystąpienia
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2310/0054
:: 438 - Średnia urlopowa
{? R.find_key(438) || _rcho.rub438:=R.CHO='N' || _rcho.rub438:=0 ?};
:: 436 - Wynagr. za urlop
{? R.find_key(436) || _rcho.rub436:=R.CHO='N' || _rcho.rub436:=0 ?};
:: 442 - Wyn. urlop okolicz.
{? R.find_key(442) || _rcho.rub442:=R.CHO='N' || _rcho.rub442:=0 ?};
:: 443 - Wyn. opieka Art. 188
{? R.find_key(443) || _rcho.rub443:=R.CHO='N' || _rcho.rub443:=0 ?};
:: 7134 - Wynagr. rehabil.
{? R.find_key(7134) || _rcho.rub7134:=R.CHO='N' || _rcho.rub7134:=0 ?};
R.cntx_pop();
'ustawienie indeksow, ograniczenie dziedziny tabel';
N.index('NIEOBECN');
N.prefix('N',P.ref());
{? ~__KORZ
|| N.index('NIEOLSOD');
   N.prefix('N',P.ref(),VAR.NAZWALIS)
?};
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');

KZ.index('_KARTAZA');
KZ.prefix(P.ref());

{? var_pres('MAC',H)>0 & (__RUB.sys_attr(N.NB,122722) | __RUB.sys_attr(N.NB,122742))
|| _RWY:="H.RWY"
|| _RWY:="H.WY"
?};
_F_B_S:=
   "_wyn:='';
   _dodatki:=__RUB.sys_rub(34,_a);
   _nominal:=__RUB.sys_rub(454,_a);
   {? _dodatki.first()
   || {!
      |? {? _nominal.find_key(_dodatki.RN)
         || _dodatki.next()
         || _dodatki.del(,1)=2
         ?}
      !}
   ?};
   {? _dodatki.first()
   || {? _dodatki.find_key(__RUB.sys_rub(45411,_a).RN)
      || _wyn+='F'
      ?};
      {? _dodatki.find_key(__RUB.sys_rub(45412,_a).RN)
      || _wyn+='B'
      ?};
      {? _dodatki.find_key(__RUB.sys_rub(45421,_a).RN)
      || _wyn+='S'
      ?}
   ?};
   _wyn";

_T_mac:="
   {? _a
   || {!
      |? {? (exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') | exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'))
         || H.prev()
         || 0
         ?}
      !}
   || 1
   ?}";

: nowa funkcjonalnosc skladniki okresowe
exec('define_skl_okr','lista_licz');

Finish:=0; 'zmienna okreslajaca zapelnienie tablicy';
{? {? ~__KORZ || N.first(); _n_size:=N.size() || N.seek(__TMP.REF_N,); _n_size:=1 ?}
|| exec('define_wynchor','lista_licz');
   {? var_pres('__PN')<=0
   || __PN:=obj_new(@.CLASS.PNIEO,_n_size)
   || __PN.Delete();
      __PN.Create(_n_size)
   ?};

:: Tabela do przechowania wartości naliczeń dla urlopów z przesunięciem rozliczenia
   _tab_urlop:=tab_tmp(3,'ROK','INTEGER',,'MC','INTEGER',,'ATTR','INTEGER',,'WART','REAL',,'PROC','REAL',);

   {!
   |? _q:=N.NB().RN;
      _bl_obl:=0;
      {? O.D~1-N.OD~1>9
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Rozliczana nieobecność jest zbyt odległa dla tej listy płac.\n'
            'Prawdopodobnie wprowadzono błędny okres nieobecności.',
            'Nieobecność %1 - %2'@[$N.OD,$N.DO]
         );
         _licz_n:=0
      || _licz_n:=1;
         {? ~__KORZ
         || _bl_obl:=exec('blokada_oblicz','nieobecnosc');
            {? ~_bl_obl & N.POD
            || exec('tz_usun','nieobecnosc',1);
               exec('sk_cho_aktualizuj_np_tz','skladniki_okresowe');
               N.POD:=N.POZ:=N.STD:=0;
               N.put()
            ?}
         || _bl_obl:=1
         ?}
      ?};
      {? _licz_n & (__RUB.sys_attr(_q,129,N.OD) | _q=_a) &
         {? exec('test_par','parametr',242,'T')
         || ~__RUB.sys_attr(_q,122,N.OD)
         || 1
         ?}
      ||
::       weryfikacja przepisania podstawy dla tarczy COVID
         N.cntx_psh();
         N.index('NIEOBECN');
         {? var_pres('_covid')>0 || &_covid ?};
         _covid:=exec('ver_covid','lista_licz');

         {? __RUB.sys_attr(N.NB,129,N.OD)
         || {? _covid.T
            || _od:=_covid.N
            || _od:=exec('data_ciaglosci','nieobecnosc',1)
            ?}
         || _od:=#0
         ?};
         N.cntx_pop();
         {? _covid.PRZELICZ='T' & N.PRZELICZ='N'
         || N.PRZELICZ:=_covid.PRZELICZ;
            N.put(1)
         ?};
         _zm_wym:=
            _od<>#0 & date(_od~1,_od~2,1)=date(N.OD~1,N.OD~2,1) & ~_covid.T &
            exec('ustal_h_wym','lista_licz','RWY',N.OD,_covid.MAC)<>exec('ustal_h_wym','lista_licz','RWY',N.OD-1,_covid.MAC);

:        ustalenie zakresu miesiecy
         exec('dekl_sta_wynchor','lista_licz',,,_covid.MAC);
:        MK poprawka[EXC]
         deklsko:=exec('dekl_sko_skl_okr','lista_licz');
         _c:=12;

         Podstawa:=0;
         Wskaznik:=null;
         Zmiana:=0;
         WskSkl:=null;
:        sprawdzenie, czy nieobecnosc zostala juz rozliczona ';
         exec('ust_h','!ppl_pll_nals',1);
:        MK poprawka[EXC]
         exec('ust_sko','!ppl_pll_nals',1);
         {?  _zm_wym
         || _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2);
            _Stop:=0;
            {? _bl_obl
            || Podstawa:=N.POD;
               Wskaznik:=N.ref
            ?}
         || {? {? ~__KORZ
               || N.POD>0
               ?}
            || Podstawa:=N.POD;
               _chp:=exec('nw_find_chp','nieobecnosc',N.ref());
               Wskaznik:={? _chp || _chp || N.ref() ?};
               &_chp;
               kwmin:=exec('nieob_wyr','!ppl_pll_nals');
               {? kwmin
               || Podstawa-=kwmin;
                  {? Podstawa<0
                  || Podstawa:=0
                  ?}
               ?};
               &kwmin;
               Data_nie:=date(0,0,0);
               _Start:=exec('start','!ppl_pll_nals',1,1,_covid);
               {? Podstawa=0
               || Data_zm:=date(0,0,0);
                  _Stop:=exec('stop','!ppl_pll_nals',_Start,_c,_covid);
                  {? (Data_nie<>N.OD & (Data_zm~1*12+Data_zm~2<=Data_nie~1*12+Data_nie~2))
                  || 'podstawa zostaje przepisana'
                  || Podstawa:=0;
                     Wskaznik:=null;
                     _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2)+1
                  ?}
               ?}
            || 'ustalenie miesiaca startowego';
               Data_nie:=date(0,0,0);
               _Start:=exec('start','!ppl_pll_nals',1,,_covid);
               Data_zm:=date(0,0,0);
               _Stop:=exec('stop','!ppl_pll_nals',_Start,_c,_covid);

               {? Data_nie<>N.OD & ((Data_zm~1*12+Data_zm~2<=Data_nie~1*12+Data_nie~2) | Data_zm>N.OD)
               || 'podstawa zostaje przepisana';
                  {? N.PRZELICZ='T' & _Stop<_Start
                  || Zmiana:=1;
                     N.cntx_psh;
                     N.index('NIEOBECN');
                     N.prefix('N',P.ref);
                     {!
                     |? _nref:=N.ref;
                        {? exec('pop_n','!ppl_pll_nals',N.ref,1)
                        || _ciag:=exec('data_ciaglosci','nieobecnosc',1);
                           {? N.OD<>_ciag
                           || N.prefix('N',P.ref);
                              {? N.find_key(_ciag)
                              || {? N.OD<=Data_zm || N.seek(_nref);0 || N.OD>Data_zm ?}
                              || N.seek(_nref);0
                              ?}
                           || {? N.OD<=Data_zm || N.seek(_nref);0 || N.OD>Data_zm ?}
                           ?}
                        ?}
                     !};
                     {? Data_zm>#0
                     || {? date(N.OD~1,N.OD~2,1)>date(Data_zm~1,Data_zm~2,1)
                        || _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2)+1
                        |? date(N.OD~1,N.OD~2,1)=date(Data_zm~1,Data_zm~2,1)
                        || _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2)
                        ?}
                     || _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2)+1
                     ?};
                     N.cntx_pop()
                  ?}
               || Podstawa:=0;
                  Wskaznik:=null;
                  _Start:=(O.R*12+O.M)-((N.OD~1)*12+N.OD~2)+1
               ?}
            ?}
         ?};
         {? Podstawa=0
         || _Suma:=0;
:           sprawdzenie czy nie ma nieobecnośsci o tych samych atrybutach
            _od:=date(O.R,O.M-_Stop,1);
            _do:=date(O.R,O.M-_Start,0);
            _stale:='';
            {! _i:=1..3
            |! _stale+=$sta_bnie[_i]+','
            !};
:           MK poprawka[EXC]
            {? var_pres('sta_sko')=117
            || {! _i:=1..obj_len(sta_sko)
               |! _stale+=$sta_sko[_i]+','
               !}
            ?};
:           przypadek gdy _Stop>_Start i jest nieobecnosc pierwtona ktora ma podstawe z m-ca biezacego
            {? Zmiana & _Start & _Start>_Stop & Data_nie<>N.OD
            || _x_1:=obj_new(2);
               _x_1[1]:=_Start;
               _x_1[2]:=_Stop;
               exec('u_st_op_wynchor','!ppl_pll_nals',_x_1,N.ref);
               _Start:=_x_1[1];
               _Stop:=_x_1[2];
               &_x_1
            ?};

            {? ~__PN.Find(_q,_od,_do,&_stale) | _covid.MAC  | _covid.T  |  N.PRZELICZ='T'
            || _spr_fin:=Finish;
               {? _Stop>=_Start & _Stop
               || Finish+=1;
:                 powolanie tablic odzwierciedlajacych rozliczane miesiace';
                  _dekltab:=exec('dekl_tab_wynchor','lista_licz',_Stop);

                  _licznik:=_Stop-_Start+1;

                  'Powołanie tablicy przechowującej informację o rozliczeniu';
                  __PN.NewMc(Finish,_licznik);

::                ER/WRT/XP/12.51/2207/0009 - Wynagrodzenie chorobowe (Pakiet mobilności)
::                Zaniechanie naliczania premii jeśli w miesiącu zachorowania był pracownikiem zagranicznym
::                (zgodnie z odpowiedzią ZUS)
                  _chorOd:=exec('data_ciaglosci','nieobecnosc',1);
                  _pakMob:=(exec('wartosci_listy','lista_licz',90108,_chorOd~1,_chorOd~2)
                            +exec('wartosci_listy','lista_licz',90107,_chorOd~1,_chorOd~2))>0;
::                Choroba w miesiącu naliczania listy - diet 7074 może jeszcze nie być naliczonych, sprawdzamy
::                oddelegowania:
                  {? ~_pakMob & _chorOd~1=O.R & _chorOd~2=O.M
                  || _pakMob:=exec('osoba_odd_okr','oddelegowanie',P.OSOBA,date(_chorOd~1,_chorOd~2,1),
                                   date(_chorOd~1,_chorOd~2,0))
                  ?};
                  {? ~_pakMob
::                Zgodnie z pkt 329. i 328. premie okresowe nie biorą udziału w wyliczeniu
::                wynagrodzenia za chorobę jako składnik okresowy (wchodzą jako podstawa ch.-wyp.)
                  ||
:                    wyliczenie skladnikow okresowych oraz wyplacanych z przesunieciem
                     exec('wyl_prok_skl_okr','lista_licz',N.OD,_Start,,_Stop)
                  ?};
:                 wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia
                  exec('wyl_zas','roz_godz',N.OD,_Start,_Stop);
                  _cov_d:=#0;
:                 glowna petla
                  {! _i:=_Start.._Stop
                  |! _Nieob:=_Praca:=_Kwota:=0;
                     _tab_urlop.erase();
                     _oTrace:=obj_new(@.CLASS.Trace);
:                    ustawienie kalendarza
                     {? _i=_Start
                     || {? P.KAL().NAZWA<>''
                        || __KAL.set_cal(P.KAL().NAZWA,O.R)
                        ?}
                     ?};

:                    ustawienie bufora dla tabeli H
                     H.index('_HISTKOD');
                     H.prefix(P.ref,'Z');
                     H.last();
                     {!
                     |? {? H.OD>date(O.R,O.M-_i,0)
                        || H.prev()
                        ?}
                     !};
                     _T_mac(_covid.MAC);
                     typ_ch:=-(1+H.CP().S);
                     zm_ch:=0;
                     {!
                     |? {? H.DO>=date(O.R,O.M-_i,1) | H.DO=date(0,0,0)
                        || zm_ch+=-(1+H.CP().S)<>typ_ch;
                           _T_mac(_covid.MAC);
                           H.prev()
                        ?}
                     !};
                     H.last();
                     {!
                     |? {? H.OD>date(O.R,O.M-_i,0)
                        || H.prev()
                        ?}
                     !};
                     _T_mac(_covid.MAC);
:                    ustalenie charakteru pracy w badanym okresie
:                    jesli jest zmiana charakteru w trakcie miesiaca inny wpis do _typ
                     _typ:={? zm_ch || 'zm. char. prac.' || -(1+H.CP().S) ?};
                     &typ_ch;
                     &zm_ch;

                     _cov_k:=0;
                     {? _covid.MAC
                     || H.cntx_psh();
                        H.index('_HISTKOD');
                        H.prefix(P.ref,'Z');
                        {? H.find_le(date(O.R,O.M-_i,0))
                        || {!
                           |? {? H.DO>=date(O.R,O.M-_i,1) | H.DO=date(0,0,0)
                              || _cov_k:=(exec('h_stat_get','pracownik',H.ref(),'T_ZM_WYM') |
                                 exec('h_stat_get','pracownik',H.ref(),'T_ZM_WAR'));
                                 ~_cov_k & H.prev()
                              ?}
                           !}
                        ?};
                        H.cntx_pop()
                     ?};

                     _od:=_Data:=date(O.R,O.M-_i,1); _do:=date(O.R,O.M-_i,0);
:                    pobranie ilosci godzin akordowych
                     {? _typ<>'u' || _g_akord:=exec('zlicz_G_z_MC','lista_licz',P.ref,7010,_od,_do) ?};

                     _Norma:=__KAL.w_days(_od,_do);
                     _Godz:=__KAL.w_hours(_od,_do);
                     {? _Norma=0
                     || RAPLS.msg(
                           P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                           'Nie odnaleziono kalendarza za miesiąc %1.'@[_od$8],
                           'Miesiąc zostanie pominięty w wyliczeniach.'@
                        )
                     ?};

:                    wyliczenie placy zasadniczej i dotatkow z przebiegu zatrudnienia
                     {! _j:=1..obj_len(sta_pom)
                     |! sta_pom[_j]:=potr[_j]:=0
                     !};
                     {? _Norma>0
                     || {? Zmiana & _typ='u'
                        || exec('mc_placa_newzasad','lista_licz',_od,_do,_Godz,1,,1)
                        || exec('mc_placa_newzasad','lista_licz',_od,_do,_Godz,,,1)
                        ?}
                     ?};

:                    wyliczenie nieobecnosci z tabeli N
                     H.cntx_psh();
:                    'ustalane w licz_nie
                     url_dni:=url_godz:=nn_dni:=nn_godz:=0;
                     _licznik-=1;
                     _Nieob+={? _Norma>0
                             || exec('licz_nie_wynchor','lista_licz',_od,_do,_Norma,,
                                 ~(__RUB.sys_attr(_q,122722) | __RUB.sys_attr(_q,122742)),_covid.MAC)
                             ?};
:: sprawdzenie czy dodatki z umowy o pracę mogą być użyte w aktualnie obliczanym miesiącu rozliczenia nieobecności
                     H.index('_HISTKOD');
                     H.prefix(P.ref(),'Z');
                     {? H.find_le(_do)
                     || _T_mac(_covid.MAC);
                        {! _ii:=2..3
                        |! {? sta_mc[_ii] & ($('H.S'+$_ii+'=0'))()
                           || sta_mc[_ii]:=0
                           ?}
                        !}
                     ?};
                     H.cntx_pop();
                     {? Zmiana || _Nieob+=exec('dnpzazw','nieobecnosc',_od,_do,'dr') ?};
                     _Praca:=_Norma-_Nieob;
                     {? _Praca<0
                     || _Praca:=0
                     ?};

                     _year:=_od~1;
                     _month:=_od~2;
                     _lt:='L'+(form(_year,-4,0,'9.')+2)+form(_month,-2,0,'9.')+'???';

                     {! _j:=2..3
                     |! {? ~sta_bnie[_j] | ~sta_mc[_j]
                        || sta_pom[_j]:=potr[_j]:=0
                        ?}
                     !};
::                   dodanie obiektu _T_N z danymi o potrąceniu z nieobecności przestojowej w miesiącu badanym
                     {? var_pres('_T_N')>100 || obj_del(_T_N) ?};
                     _tab_T_N:=obj_new(2);
::   przestój
                     _tab_T_N[1]:=1314;
                     _tab_T_N[2]:=1318;
                     _T_N:=exec('potr_mc_lista','nieobecnosc',_tab_T_N,_od~1,_od~2);
                     obj_del(_tab_T_N); &_tab_T_N;
                     {? _T_N.POTR2 | _T_N.POTR3
                     || _f_b_s:=_F_B_S(_od);
                        {? _T_N.POTR3 & ~(_f_b_s*'S') || _T_N.POTR3-=_T_N.POTR13 ?}
                     || _f_b_s:=''
                     ?};

:                    Ustawienie wspolczynnika odbruttowienia w stalych systemu
                     exec('czytaj','#stalesys',date(O.R,O.M-_i+1,0),KST,'PRFRP','WSODBR');
                     _rent:=KST.PRFRP; _odbr_nm:=KST.WSODBR;
                     exec('czytaj','#stalesys',date(_year,_month,0),KST,'PRFRP','WSODBR');

::                   Jeśli w miesiącu zachorowania lub w danym miesiącu nie ma diet licz normalnie:
                     {? ~_pakMob | (FUNKCJE.L_SYS(90108,_i)=0 & FUNKCJE.L_SYS(90107,_i)=0)
                     || {? _typ='u'
                        || 'Pracownicy umyslowi';
                           {? _T_N.POTR2 & ~(_f_b_s*'F') || _T_N.POTR2:=0 ?};
                           _Kwota+=_oTrace.add(90,,(sta_pom[1]-potr[1]-_T_N.POTR1)$2,'UMOWA');
                           {? sta_pom[4]
                           || _Kwota+=_oTrace.add(7158,,(sta_pom[4]-potr[4]-_T_N.POTR4)$2,'UMOWA')
                           ?};
                           _Kwota+=_oTrace.add(92,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                           _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA')
                        || 'Pracownicy fizyczni';
                           {? _T_N.POTR2 & ~(_f_b_s*'B') || _T_N.POTR2-=_T_N.POTR12 ?};
                           _Kwota+=_oTrace.add(93,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                           _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA')
                        ?};
:                       w funkcji zn_roznice_wynchor zostal odlozony kontext tabel O i LS
                        {? _odbr_nm<>KST.WSODBR & exec('zn_roznice_wynchor','!ppl_pll_nals',_year,_month)
                        || _Kwota:=exec('wyl_chol_wynchor','!ppl_pll_nals',
                                 _year,_month,_odbr_nm,_Kwota,_typ,_Praca,_Norma,_Godz,_rent,_oTrace);
                           O.cntx_pop();
                           LS.cntx_pop()
                        || {? _odbr_nm<>KST.WSODBR
                           || O.cntx_pop;
                              LS.cntx_pop
                           ?};
:: ER/WRT/XP/23.25/2311/0078 - ER/WRT/XP/22.26/2311/0015 - Klient w parametryzacji składnika 438 do zasiłku chorobowego
:: wyłączył ten składnik a obliczenia podstawy w wynchor.fml zawsze zliczają kwotę w mc wystąpienia
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2310/0054
                           _kw_wyp:=0;
                           {? _typ='u'
                           || {? _rcho.rub438
                              || _kw_wyp+=0
                              || _kw_wyp+=exec('n_wartosc','nieobecnosc',_od~1,_od~2,111,_tab_urlop)$2
                              ?}
                           || {? _rcho.rub436
                              || _kw_wyp+=0
                              || _kw_wyp+=exec('n_wartosc','nieobecnosc',_od~1,_od~2,111,_tab_urlop)$2
                              ?}
                           ?};
                           {? _rcho.rub442
                           || _kw_wyp+=0
                           || _kw_wyp+=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1161,_tab_urlop)$2
                           ?};
                           {? _rcho.rub443
                           || _kw_wyp+=0
                           || _kw_wyp+=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1162,_tab_urlop)$2
                           ?};
                           {? _rcho.rub7134
                           || _kw_wyp+=0
                           || _kw_wyp+=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1171,_tab_urlop)$2
                           ?};
                           _kw_czy_uzup:=0;
                           {? _typ='u'
                           || _Kwota+=LICZ.Wylicz(_i,'.CHO',,_oTrace,_Praca,_Norma,nn_dni)
                           |? _typ='zm. char. prac.'
                           || _kw_url:=0;
::                            kwota minmalnego wynagrodzenia rubryka 499 podlega uzupełnieniu odliczamy
::                            z obiektu LICZ tą kwotę
                              _wyr_min:=0;
                              {? _Praca>0 & _Praca<>_Norma-nn_dni & LICZ.RUB_CHO.first()
                              || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
                                 {? _urlopwy.first()
                                 || _oTrace.minus();
                                    {!
                                    |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                          ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                                          & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,424)
                                          & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,425)
                                          & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,427)
                                       || _kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_i,,_oTrace)
                                       ?};
                                       _urlopwy.next()
                                    !};
                                    _oTrace.plus()
                                 ?};
                                 obj_del(_urlopwy); &_urlopwy;
                                 _kw65:=exec('kw_atr','lista_licz',_year,_month,8213,'W');
                                 {? _min_cho
                                 || _oTrace.minus();
                                    _wyr_min+=FUNKCJE.L(499,,_i,,_oTrace);
                                    _oTrace.plus()
                                 ?};
                                 _kw_czy_uzup:=1;
                                 _Kwota+=_oTrace.add(__RUB.sys_kod(4511),'Wyn.zas.uzup.',
                                    (FUNKCJE.L_SYS(451,_i)+FUNKCJE.L_SYS(452,_i)+_kw_url+_kw_wyp+_wyr_min-_kw65)/
                                    _Praca*(_Norma-nn_dni)$2,
                                    _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni);
                                 {? _kw65
                                 || _Kwota+=_oTrace.add(0,'Wyn. śr. tygod.',&_kw65,_lt,'E')
                                 ?}
                              || _Kwota+=FUNKCJE.L_SYS(451,_i,,_oTrace)+FUNKCJE.L_SYS(452,_i,,_oTrace)
                              ?};
                              _Kwota+=LICZ.Wylicz(_i,'.CHO',,_oTrace,_Praca,_Norma,nn_dni)-_kw_url-_wyr_min;
                              &_kw_url;
                              &_wyr_min
                           || _kw_url:=0;
::                            kwota minmalnego wynagrodzenia rubryka 499 podlega uzupełnieniu odliczamy
::                            obiektu LICZ tą kwotę
                              _wyr_min:=0;
                              {? _Praca>0 & _Praca=url_dni & ~_Nieob
                              || _Kwota+=_oTrace.add(__RUB.sys_kod(4511),'Wyn.zas.godz.',
                                    sta_pom[1]*(_Godz-url_godz-nn_godz-_g_akord)$2,
                                    _lt,'E',,,'Godz.:'+$(_Godz-url_godz-nn_godz-_g_akord)+'|Stawka:'+$sta_pom[1])
                              |? _Praca>0 & _Praca<>_Norma-nn_dni & LICZ.RUB_CHO.first()
                              || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
                                 {? _urlopwy.first()
                                 || _oTrace.minus();
                                    {!
                                    |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                          ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                                          & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,424) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,425)
                                          & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,427)
                                       || _kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_i,,_oTrace)
                                       ?};
                                       _urlopwy.next()
                                    !};
                                    _oTrace.plus()
                                 ?};
                                 obj_del(_urlopwy); &_urlopwy;
                                 _kw65:=exec('kw_atr','lista_licz',_year,_month,8213,'W');
                                 {? _min_cho
                                 || _oTrace.minus();
                                    _wyr_min+=FUNKCJE.L(499,,_i,,_oTrace);
                                    _oTrace.plus()
                                 ?};
                                 _kw_czy_uzup:=1;
                                 _Kwota+=_oTrace.add(__RUB.sys_kod(4511),'Wyn.zas.uzup.',
                                    (FUNKCJE.L_SYS(451,_i)+FUNKCJE.L_SYS(452,_i)+_kw_url+_kw_wyp+_wyr_min-_kw65)/
                                    _Praca*(_Norma-nn_dni)$2,
                                    _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni);
                                 {? _kw65
                                 || _Kwota+=_oTrace.add(0,'Wyn. śr. tygod.',&_kw65,_lt,'E')
                                 ?}
                              || _Kwota+=FUNKCJE.L_SYS(451,_i,,_oTrace)+FUNKCJE.L_SYS(452,_i,,_oTrace)
                              ?};
                              _Kwota+=LICZ.Wylicz(_i,'.CHO',,_oTrace,_Praca,_Norma,nn_dni)-_kw_url-_wyr_min;
                              &_kw_url;
                              &_wyr_min
                           ?};
:                          odbruttowienie
                           blokada:=exec('czy_blokada_wynchor','lista_licz',_year,_month);
                           pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_od~1,_od~2);
                           {? pod_e_r<0 || pod_e_r:=FUNKCJE.L_SYS(511,_i)$2 ?};
                           pod_ch_w:=FUNKCJE.L_SYS(531,_i)$2;
                           _proc:=
                              {? pod_e_r=pod_ch_w & _year>=1999 & ~blokada
                              || KST.WSODBR
                              |? _year>=1999
                              || {? pod_ch_w || (KST.PRFE/2+KST.PRFRP)*pod_e_r/pod_ch_w ?}+KST.PRFC
                              ?}$2;
                           _Kwota_url:=0;
                           _tab_urlop.prefix;
                           {? _tab_urlop.first() & ~_kw_czy_uzup
                           || {!
                              |? {? date(_tab_urlop.ROK,_tab_urlop.MC,0)<>date(_year,_month,0)
                                 || exec('czytaj','#stalesys',date(_tab_urlop.ROK,_tab_urlop.MC,0),KST,
                                       'PRFE','PRFRP','WSODBR','PRFC');
                                    _blokada:=exec('czy_blokada_wynchor','lista_licz',_tab_urlop.ROK,_tab_urlop.MC);
                                    _pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_tab_urlop.ROK,_tab_urlop.MC);
                                    {? _pod_e_r<0
                                    || _pod_e_r:=exec('wartosci_listy','lista_licz',511,_tab_urlop.ROK,_tab_urlop.MC)$2
                                    ?};
                                    _pod_ch_w:=exec('wartosci_listy','lista_licz',531,_tab_urlop.ROK,_tab_urlop.MC)$2;
                                    _proc_url:=
                                       {? _pod_e_r=_pod_ch_w & _year>=1999 & ~_blokada
                                       || KST.WSODBR
                                       |? _year>=1999
                                       || {? _pod_ch_w || (KST.PRFE/2+KST.PRFRP)*_pod_e_r/_pod_ch_w ?}+KST.PRFC
                                       ?}$2;
                                    _tab_urlop.PROC:=_proc_url;
                                    _tab_urlop.put(1)
                                 ?};
                                 {? _tab_urlop.ATTR=111
                                 || {? _typ='u'
                                    || _oTrace.add(438,'Średnia urlopowa',_tab_urlop.WART,'URLOP','E',,_tab_urlop.PROC)
                                    || _oTrace.add(436,'Wynagr. za urlop',_tab_urlop.WART,'URLOP','E',,_tab_urlop.PROC)
                                    ?}
                                 |? _tab_urlop.ATTR=1161
                                 || _oTrace.add(442,'Wyn. urlop okolicz.',_tab_urlop.WART,'URLOP','E',,_tab_urlop.PROC)
                                 |? _tab_urlop.ATTR=1162
                                 || _oTrace.add(443,'Wyn. opieka Art. 188',_tab_urlop.WART,'URLOP','E',,_tab_urlop.PROC)
                                 |? _tab_urlop.ATTR=1171
                                 || _oTrace.add(7134,'Wynagr. rehabil.',_tab_urlop.WART,'URLOP','E',,_tab_urlop.PROC)
                                 ?};
                                 _tab_urlop.next()
                              !};
                              {? var_pres('_tab_urlop_gr')>100 || obj_del(_tab_urlop_gr) ?};
                              _tab_urlop_gr:=sql('select PROC, sum(WART) WART from :_a group by PROC',_tab_urlop);
                              {? _tab_urlop_gr.first()
                              || {!
                                 |? {? _tab_urlop_gr.PROC=0 | _tab_urlop_gr.PROC=_proc
                                    || _Kwota+=_tab_urlop_gr.WART
                                    || _netto:=(_tab_urlop_gr.WART-(_tab_urlop_gr.WART*_tab_urlop_gr.PROC/100))$2;
                                       _Kwota_url+=_netto
                                    ?};
                                    _tab_urlop_gr.next()
                                 !}
                              ?};
                              exec('czytaj','#stalesys',date(_year,_month,0),KST,'PRFE','PRFRP','WSODBR','PRFC');
                              _tab_urlop.erase()
                           ?};
                           'odbruttowienie';
                           {? _proc>0
                           || _netto:=(_Kwota-(_Kwota*_proc/100))$2;
                              _oTrace.add(0,'Wsp.odbrut.',_proc,_lt,'%');
                              _Kwota:=&_netto
                           ?};
                           _Kwota+=_Kwota_url;
                           &_proc;
                           &blokada;
                           &pod_e_r;
                           &pod_ch_w
                        ?};
:                       dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
:                       skladniki SA zapisywane w SK_CHO, rejestracja z wykorzystaniem oTrace jest zbedna
                        _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(_year,_month,1),#N.ref)

::                   Jeśli są diety (pakiet mobilności) zgodnie z pkt. 323 w "Komentarz do ustawy z dnia
::                   25 czerwca 1999 r. o świadczeniach pieniężnych z ubezpieczenia społecznego w razie
::                   choroby i macierzyństwa - wybrane zagadnienia" (Załącznik ZUS Nr 994800/0200/13/2022
::                   z 01/04/2022)
                     || exec('del__SK_CHO','lista_licz',#N.ref(),date(_year,_month,1),'G');

                        _Kwota:=_oTrace.add(__RUB.sys_kod(531),'Podst. Chor.Wyp.',
                              FUNKCJE.L_SYS(531,_i)$2,_lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni);
::                      odbruttowienie
                        blokada:=exec('czy_blokada_wynchor','lista_licz',_year,_month);
                        pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_od~1,_od~2);
                        {? pod_e_r<0 || pod_e_r:=FUNKCJE.L_SYS(511,_i)$2 ?};
                        pod_ch_w:=FUNKCJE.L_SYS(531,_i)$2;
                        _proc:=
                           {? pod_e_r=pod_ch_w & _year>=1999 & ~blokada
                           || KST.WSODBR
                           |? _year>=1999
                           || {? pod_ch_w || (KST.PRFE/2+KST.PRFRP)*pod_e_r/pod_ch_w ?}+KST.PRFC
                           ?}$2;
                        'odbruttowienie';
                        {? _proc>0
                        || _netto:=(_Kwota-(_Kwota*_proc/100))$2;
                           _oTrace.add(0,'Wsp.odbrut.',_proc,_lt,'%');
                           _Kwota:=&_netto
                        ?};
                        &_proc;
                        &blokada;
                        &pod_e_r;
                        &pod_ch_w
                     ?};
                     &_odbr_nm;
                     &_rent;
                     &_typ;
:                    kwalifikacja miesiaca
                     {? _Norma>0  & ~_cov_k
                     || {? _Praca/_Norma>=0.5 |
                           (Zmiana &
                           (_od=date(P.DZA~1,P.DZA~2,1) |
                           Data_zm<>date(0,0,0) & _od=date(Data_zm~1,Data_zm~2,1) & _Start=_Stop) |
                           (_Start=_Stop & N.PRZELICZ='T' & exec('test_przelicz','lista_licz',date(_year,_month,1))))
                        || 'zakwalifikowany';
                           _Status:='T'
                        || 'pominiety';
                           _Status:='N';
                           _Kwota:=0;
                           exec('del__SK_CHO','skladniki_okresowe',#N.ref(),date(_year,_month,1),'G')
                        ?}
                     || 'pominiety';
                        _Status:='N';
                        _Kwota:=0;
                        exec('del__SK_CHO','skladniki_okresowe',#N.ref(),date(_year,_month,1),'G');
                        {? _cov_k & _cov_d=#0 & date(_year,_month,1)<_covid.H
                        || _cov_d:=date(_year,_month,1)
                        ?}
                     ?};

                     {? _Status='N'
                     || _oTrace.erase()
                     ?};
                     _Suma+=_Kwota;
                     __PN.PutMc(Finish,_i-_Start+1,_Kwota,_Norma,_Praca,nn_dni,_Status,_Data,'A',_oTrace);
                     obj_del(_oTrace)
                  !}
               ?};
:: Dla wyliczeń z jednego miesiąca również dla oddelegowanych(i kierowców)liczymy po staremu
:: Dz.U.2021.1133 Art. 37. - [Niezdolność do pracy przed upływem pełnego miesiąca] - Świadczenia pieniężne z
:: ubezpieczenia społecznego w razie choroby i macierzyństwa.

:              --------------------------------
:              podstawa z miesiąca nieobecności
               {? _Suma=0
               || {? P.KAL().NAZWA<>''
                  || __KAL.set_cal(P.KAL().NAZWA,O.R)
                  ?};
                  _dekltab:=exec('dekl_tab_wynchor','lista_licz',1);
                  _oTrace:=obj_new(@.CLASS.Trace);
                  N.cntx_psh();
                  N.index('NIEOBECN');
                  {? _covid.T
                  || _d_cia:=_covid.N
                  || _d_cia:=exec('data_ciaglosci','nieobecnosc',N.NB().RN)
                  ?};
                  N.cntx_pop();
                  {? _cov_d>#0
                  || _od:=_cov_d;
                     _do:=date(_cov_d~1,_cov_d~2,0);
                     _offset:=O.R*12+O.M-(_do~1*12+_do~2);
                     _Data:=_od
                  || _offset:=O.R*12+O.M-(_d_cia~1*12+_d_cia~2);
                     _Data:=_od:=date(O.R,O.M-_offset,1);
                     _do:=date(O.R,O.M-_offset,0)
                  ?};
:                 ustawienia bufora tabeli H
                  H.find_le(_do);
                  _T_mac(_covid.MAC);
                  _typ:=-(1+H.CP().S);
                  _Godz:=__KAL.w_hours(_od,_do);
                  _Norma:=__KAL.w_days(_od,_do);
                  url_dni:=url_godz:=nn_dni:=nn_godz:=0;  'ustalane w licz_nie';
:                 Wyliczenie nieobecnosci z przebiegu zatrudnienia
                  {! _j:=1..obj_len(potr)
                  |! potr[_j]:=0
                  !};
                  _Nieob:=exec('licz_nie_wynchor','lista_licz',
                        _od,_do,_Norma,,~(__RUB.sys_attr(_q,122722) | __RUB.sys_attr(_q,122742))
                     )+exec('dnpzazw','nieobecnosc',_od,_do,'dr');

                  _Praca:=_Norma-_Nieob;
                  {? _Praca<0
                  || _Praca:=0
                  ?};
                  {? _offset<=0
                  || _offset:=~~
                  ?};
                  {? _offset>0
                  || {! _j:=1..obj_len(sta_pom)
                     |! sta_pom[_j]:=0
                     !};
                     _Kwota:=0;
                     H.find_le(_do);
                     _T_mac(_covid.MAC);
                     wym_zatr:=_RWY();
                     {? _covid.MAC
                     || _T_mac(_covid.MAC);
                        {? _cov_d>#0
                        || _od:=_cov_d;
                           _do:=date(_cov_d~1,_cov_d~2,0)
                        ?};
                        _hsx:=exec('hsx','lista_licz',_do,_od);
                        sta_pom[1]:=_hsx.S1;
                        sta_pom[2]:=_hsx.S2;
                        sta_pom[3]:=_hsx.S3;
                        sta_pom[4]:=_hsx.S4;
                        obj_del(_hsx);
                        &_hsx
                     || {? H.prev & H.DO>=_od & _RWY()<>wym_zatr
                        || H.next();
                           _hsx:=exec('hsx','lista_licz',_do,_od);
                           sta_pom[1]:=_hsx.S1;
                           sta_pom[2]:=_hsx.S2;
                           sta_pom[3]:=_hsx.S3;
                           sta_pom[4]:=_hsx.S4;
                           obj_del(_hsx);
                           &_hsx
                        || H.find_le(_do);
                           exec('mc_placa_newzasad','lista_licz',_od,_do,__KAL.w_hours(_od,_do),1)
                        ?}
                     ?};
                     &wym_zatr;
                     {! _j:=2..3
                     |! {? ~sta_bnie[_j]
                        || sta_pom[_j]:=potr[_j]:=0
                        ?}
                     !};
                     _year:=_od~1;
                     _month:=_od~2;
                     _lt:='L'+(form(_year,-4,0,'9.')+2)+form(_month,-2,0,'9.')+'???';
::                   dodanie obiektu _T_N z danymi o potrąceniu z nieobecności przestojowej w miesiącu badanym
                     _tab_T_N:=obj_new(2);
                     _tab_T_N[1]:=1314;
                     _tab_T_N[2]:=1318;
                     {? var_pres('_T_N')>100 || obj_del(_T_N) ?};
                     _T_N:=exec('potr_mc_lista','nieobecnosc',_tab_T_N,_od~1,_od~2);
                     obj_del(_tab_T_N); &_tab_T_N;
                     {? _T_N.POTR2 | _T_N.POTR3
                     || _f_b_s:=_F_B_S(_od);
                        {? _T_N.POTR3 & ~(_f_b_s*'S') || _T_N.POTR3-=_T_N.POTR13 ?}
                     || _f_b_s:=''
                     ?};
                     {? _typ='u'
                     || 'Pracownicy umyslowi';
                        {? _T_N.POTR2 & ~(_f_b_s*'F') || _T_N.POTR2-=_T_N.POTR12 ?};
                        _Kwota+=_oTrace.add(90,,(sta_pom[1]-potr[1]-_T_N.POTR1)$2,'UMOWA');
                        {? sta_pom[4]
                        || _Kwota+=_oTrace.add(7158,,(sta_pom[4]-potr[4]-_T_N.POTR4)$2,'UMOWA')
                        ?};
                        _Kwota+=_oTrace.add(92,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                        _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA')
                     || 'Pracownicy fizyczni';
                        {? _T_N.POTR2 & ~(_f_b_s*'B') || _T_N.POTR2-=_T_N.POTR12 ?};
                        _Kwota+=_oTrace.add(93,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                        _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA')
                     ?};
:                    Ustawienie wspolczynnika odbruttowienia w stalych systemu
                     exec('czytaj','#stalesys',date(O.R,O.M-_offset+1,0),KST,'PRFRP','WSODBR');
                     rent:=KST.PRFRP;
                     odbr_nm:=KST.WSODBR;
                     exec('czytaj','#stalesys',date(_year,_month,0),KST,'PRFRP','WSODBR');
:                    w funkcji zn_roznice_wynchor zostal odlozony kontext tabel O i LS
:: ER/WRT/XP/23.25/2311/0078 - ER/WRT/XP/22.26/2311/0015 - Klient w parametryzacji składnika 438 do zasiłku chorobowego
:: wyłączył ten składnik a obliczenia podstawy w wynchor.fml zawsze zliczają kwotę w mc wystąpienia
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2310/0054
                     {? _typ='u'
                     || {? _rcho.rub438
                        || _kw_wyp:=0
                        || _kw_wyp:=exec('n_wartosc','nieobecnosc',_year,_month,111)$2
                        ?}
                     || {? _rcho.rub436
                        || _kw_wyp:=0
                        || _kw_wyp:=exec('n_wartosc','nieobecnosc',_year,_month,111)$2
                        ?}
                     ?};
                     {? _rcho.rub442
                     || _kw_okol:=0
                     || _kw_okol:=exec('n_wartosc','nieobecnosc',_year,_month,1161)$2
                     ?};
                     {? _rcho.rub443
                     || _kw_188:=0
                     || _kw_188:=exec('n_wartosc','nieobecnosc',_year,_month,1162)$2
                     ?};
                     {? _rcho.rub7134
                     || _kw_rehab:=0
                     || _kw_rehab:=exec('n_wartosc','nieobecnosc',_year,_month,1171)$2
                     ?};
                     {? odbr_nm<>KST.WSODBR & exec('zn_roznice_wynchor','!ppl_pll_nals',_year,_month)
                     || _oTrace.erase();
                        _Kwota:=exec('wyl_chol_wynchor','!ppl_pll_nals',
                           _year,_month,odbr_nm,_Kwota,_typ,_Praca,_Norma,_Godz,rent,_oTrace
                        );
                        {? _kw_wyp
                        || _Kwota+=_oTrace.add(438,'Średnia urlopowa',_kw_wyp,'URLOP','E')
                        ?};
                        {? _kw_okol
                        || _Kwota+=_oTrace.add(442,'Wyn. urlop okolicz.',_kw_okol,'URLOP','E')
                        ?};
                        {? _kw_188
                        || _Kwota+=_oTrace.add(443,'Wyn. opieka Art. 188',_kw_188,'URLOP','E')
                        ?};
                        {? _kw_rehab
                        || _Kwota+=_oTrace.add(7134,'Wynagr. rehabil.',_kw_rehab,'URLOP','E')
                        ?};
                        O.cntx_pop();
                        LS.cntx_pop()
                     || {? odbr_nm<>KST.WSODBR
                        || O.cntx_pop();
                           LS.cntx_pop()
                        ?};
                        {? _typ='u'
                        || _Kwota+=LICZ.Wylicz(_offset,'.CHO',,_oTrace,_Praca,_Norma,nn_dni);
                           {? _kw_wyp
                           || _Kwota+=_oTrace.add(438,'Średnia urlopowa',_kw_wyp,'URLOP','E')
                           ?};
                           {? _kw_okol
                           || _Kwota+=_oTrace.add(442,'Wyn. urlop okolicz.',_kw_okol,'URLOP','E')
                           ?};
                           {? _kw_188
                           || _Kwota+=_oTrace.add(443,'Wyn. opieka Art. 188',_kw_188,'URLOP','E')
                           ?};
                           {? _kw_rehab
                           || _Kwota+=_oTrace.add(7134,'Wynagr. rehabil.',_kw_rehab,'URLOP','E')
                           ?}
                        |? _Praca=0
                        || RAPLS.msg(
                              P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                              'Brak danych do naliczenia podstawy chorobowej.'@,
                              'Należy skontrolować wyliczenia za %1.'@[date(_od~1,_od~2,1)$8]
                           );
                           _Kwota:=0;
                           _oTrace.erase()
                        || _kw_url:=0;
::                            kwota minmalnego wynagrodzenia rubryka 499 podlega uzupełnieniu odliczamy
::                            z obiektu LICZ tą kwotę
                           _wyr_min:=0;
                           {? _Praca<>_Norma-nn_dni & LICZ.RUB_CHO.first()
                           || _urlopwy:=__RUB.sys_rub(42,date(_year,_month,0));
                              {? _urlopwy.first()
                              || _oTrace.minus();
                                 {!
                                 |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                       ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                                       & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,424) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,425)
                                       & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,427)
                                    || _kw_url+=FUNKCJE.L(LICZ.RUB_CHO.RN,,_offset,,_oTrace)
                                    ?};
                                    _urlopwy.next()
                                 !};
                                 _oTrace.plus()
                              ?};
                              obj_del(_urlopwy);
                              &_urlopwy;
                              _kw65:=exec('kw_atr','lista_licz',_year,_month,8213,'W');
                              {? _min_cho
                              || _oTrace.minus();
                                 _wyr_min+=FUNKCJE.L(499,,_offset,,_oTrace);
                                 _oTrace.plus()
                              ?};
                              _Kwota+=
                                 _oTrace.add(__RUB.sys_kod(4511),'Wyn.zas.uzup.',
                                 (FUNKCJE.L_SYS(451,_offset)+FUNKCJE.L_SYS(452,_offset)+_kw_url+_kw_wyp+_wyr_min
                                 -_kw65+_kw_okol+_kw_188+_kw_rehab)/_Praca*(_Norma-nn_dni)$2,
                                 _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni
                              );
                              {? _kw65
                              || _Kwota+=_oTrace.add(0,'Wyn. śr. tygod.',&_kw65,_lt,'E')
                              ?}
                           || _Kwota+=FUNKCJE.L_SYS(451,_offset,,_oTrace)+FUNKCJE.L_SYS(452,_offset,,_oTrace);
                              {? _kw_wyp
                              || _Kwota+=_oTrace.add(436,'Wynagr. za urlop',_kw_wyp,'URLOP','E')
                              ?};
                              {? _kw_okol
                              || _Kwota+=_oTrace.add(442,'Wyn. urlop okolicz.',_kw_okol,'URLOP','E')
                              ?};
                              {? _kw_188
                              || _Kwota+=_oTrace.add(443,'Wyn. opieka Art. 188',_kw_188,'URLOP','E')
                              ?};
                              {? _kw_rehab
                              || _Kwota+=_oTrace.add(7134,'Wynagr. rehabil.',_kw_rehab,'URLOP','E')
                              ?}
                           ?};
                           _Kwota+=LICZ.Wylicz(_offset,'.CHO',,_oTrace,_Praca,_Norma,nn_dni)-_kw_url-_wyr_min;
                           &_kw_url;
                           &_wyr_min
                        ?};
:                       odbruttowienie
                        blokada:=exec('czy_blokada_wynchor','lista_licz',_year,_month);
                        pod_e_r:=exec('kor_prac_zus','korekty_zus',P.ref,_od~1,_od~2);
                        {? pod_e_r<0 || pod_e_r:=FUNKCJE.L_SYS(511,_offset)$2 ?};
                        pod_ch_w:=FUNKCJE.L_SYS(531,_offset)$2;
                        _proc:=
                           {? pod_e_r=pod_ch_w & _year>=1999 & ~blokada
                           || KST.WSODBR
                           |? _year>=1999
                           || {? pod_ch_w
                              || (KST.PRFE/2+KST.PRFRP)*pod_e_r/pod_ch_w
                              ?}+KST.PRFC
                           ?}$2;
                        {? _proc>0
                        || _netto:=(_Kwota-(_Kwota*_proc/100))$2;
                           _oTrace.add(0,'Wsp.odbrut.',_proc,_lt,'%');
                           _Kwota:=&_netto
                        ?};
                        &_proc;
                        &blokada;
                        &pod_e_r;
                        &pod_ch_w
                     ?};
                     &_kw_wyp; &_kw_okol; &_kw_188; &_kw_rehab;
:                    wyliczenie skladnikow okresowych oraz wyplacanych z przesunieciem dla biezacego miesiaca
                     exec('wyl_prok_skl_okr','lista_licz',N.OD,0);
:                    wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia dla biezacego miesiaca
                     exec('wyl_zas','roz_godz',N.OD,_offset,_offset);
:                    dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
                     _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(_year,_month,1),#N.ref());
                     &odbr_nm;
                     &rent
                  || H.cntx_psh();
                     {! _j:=1..obj_len(sta_pom)
                     |! sta_pom[_j]:=0
                     !};
                     H.find_le(_do);
                     wym_zatr:=_RWY();
                     {? _covid.MAC
                     || _T_mac(_covid.MAC);
                        {? _cov_d>#0
                        || _od:=_cov_d;
                           _do:=date(_cov_d~1,_cov_d~2,0)
                        ?};
                        _hsx:=exec('hsx','lista_licz',_do,_od);
                           sta_pom[1]:=_hsx.S1;
                           sta_pom[2]:=_hsx.S2;
                           sta_pom[3]:=_hsx.S3;
                           sta_pom[4]:=_hsx.S4;
                           obj_del(_hsx);
                           &_hsx
                     || {? H.prev & H.DO>=_od & _RWY()<>wym_zatr
                        || H.next;
                           _hsx:=exec('hsx','lista_licz',_do,_od);
                           sta_pom[1]:=_hsx.S1;
                           sta_pom[2]:=_hsx.S2;
                           sta_pom[3]:=_hsx.S3;
                           sta_pom[4]:=_hsx.S4;
                           obj_del(_hsx);
                           &_hsx
                        || H.find_le(_do);
                           exec('mc_placa_newzasad','lista_licz',_od,_do,__KAL.w_hours(_od,_do),1)
                        ?}
                     ?};
                     &wym_zatr;
                     H.cntx_pop();
                     _Kwota:=0;
                     _lt:=VAR.NAZWALIS;
:: ER/WRT/XP/23.25/2311/0078 - ER/WRT/XP/22.26/2311/0015 - Klient w parametryzacji składnika 438 do zasiłku chorobowego
:: wyłączył ten składnik a obliczenia podstawy w wynchor.fml zawsze zliczają kwotę w mc wystąpienia
:: Kopia błędu spisowego: ER/WRT/XP/12.51/2310/0054
                     {? _typ='u'
                     || {? _rcho.rub438
                        || _kw_wyp:=0
                        || _kw_wyp:=exec('n_wartosc','nieobecnosc',_od~1,_od~2,111)$2
                        ?}
                     || {? _rcho.rub436
                        || _kw_wyp:=0
                        || _kw_wyp:=exec('n_wartosc','nieobecnosc',_od~1,_od~2,111)$2
                        ?}
                     ?};
                     {? _rcho.rub442
                     || _kw_okol:=0
                     || _kw_okol:=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1161)$2
                     ?};
                     {? _rcho.rub443
                     || _kw_188:=0
                     || _kw_188:=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1162)$2
                     ?};
                     {? _rcho.rub7134
                     || _kw_rehab:=0
                     || _kw_rehab:=exec('n_wartosc','nieobecnosc',_od~1,_od~2,1171)$2
                     ?};
::                   dodanie obiektu _T_N z danymi o potrąceniu z nieobecności przestojowej w miesiącu badanym
                     _tab_T_N:=obj_new(2);
                     _tab_T_N[1]:=1314;
                     _tab_T_N[2]:=1318;
                     {? var_pres('_T_N')>100 || obj_del(_T_N) ?};
                     _T_N:=exec('potr_mc_lista','nieobecnosc',_tab_T_N,_od~1,_od~2);
                     obj_del(_tab_T_N); &_tab_T_N;
                     {? _T_N.POTR2 | _T_N.POTR3
                     || _f_b_s:=_F_B_S(_od);
                        {? _T_N.POTR3 & ~(_f_b_s*'S') || _T_N.POTR3-=_T_N.POTR13 ?}
                     || _f_b_s:=''
                     ?};
                     {? _typ='u'
                     || {? _T_N.POTR2 & ~(_f_b_s*'F') || _T_N.POTR2-=_T_N.POTR12 ?};
                        _Kwota+=_oTrace.add(90,,(sta_pom[1]-potr[1]-_T_N.POTR1)$2,'UMOWA');
                        {? sta_pom[4]
                        || _Kwota+=_oTrace.add(7158,,(sta_pom[4]-potr[4]-_T_N.POTR4)$2,'UMOWA')
                        ?};
                        _Kwota+=_oTrace.add(92,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                        _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA');
                        _Kwota+=LICZ.Wylicz(,'.CHOL',,_oTrace,_Praca,_Norma,nn_dni);
                        _Kwota+=LICZ.Wylicz(0,'.CHOL',,_oTrace,_Praca,_Norma,nn_dni);
:: ER/WRT/XP/12.51/2303/0013 Brak wliczania akordu do uzupełnienia podstawy chorobowej z miesiąca nieobecności
:: kwota rubryki 111 Akord jako atrybut 452 nie jest już w metoda '.CHOL'
                        _Kwota+=FUNKCJE.L_SYS(452,,,_oTrace)+FUNKCJE.L_SYS(452,0,,_oTrace);
                        {? _kw_wyp
                        || _Kwota+=_oTrace.add(438,'Średnia urlopowa',_kw_wyp,'URLOP','E')
                        ?};
                        {? _kw_okol
                        || _Kwota+=_oTrace.add(442,'Wyn. urlop okolicz.',_kw_okol,'URLOP','E')
                        ?};
                        {? _kw_188
                        || _Kwota+=_oTrace.add(443,'Wyn. opieka Art. 188',_kw_188,'URLOP','E')
                        ?};
                        {? _kw_rehab
                        || _Kwota+=_oTrace.add(7134,'Wynagr. rehabil.',_kw_rehab,'URLOP','E')
                        ?}
                     |? _Praca=0
                     || RAPLS.msg(
                           P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                           'Brak danych do naliczenia podstawy chorobowej.'@,
                           'Należy skontrolować wyliczenia za %1.'@[date(_od~1,_od~2,1)$8]
                        );
                        _Kwota:=0;
                        _oTrace.erase()
                     || {? _T_N.POTR2 & ~(_f_b_s*'B') || _T_N.POTR2-=_T_N.POTR12 ?};
                        _Kwota+=_oTrace.add(93,,(sta_pom[2]-potr[2]-_T_N.POTR2)$2,'UMOWA');
                        _Kwota+=_oTrace.add(94,,(sta_pom[3]-potr[3]-_T_N.POTR3)$2,'UMOWA');
                        _urlop_b:=0;
::                         kwota minmalnego wynagrodzenia rubryka 499 podlega uzupełnieniu odliczamy
::                         z obiektu LICZ tą kwotę
                        _wyr_min:=0;
                        {? _Praca<>_Norma-nn_dni
                        || _urlopwy:=__RUB.sys_rub(42,date(O.R,O.M,0));
                           {? _urlopwy.first()
                           || _oTrace.minus();
                              {!
                              |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                    ~__RUB.sys_attr(LICZ.RUB_CHO.RN,4211) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                                    & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,424) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,425)
                                    & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,427)
                                 || _urlop_b+=FUNKCJE.L(LICZ.RUB_CHO.RN,,,,_oTrace)+
                                       FUNKCJE.L(LICZ.RUB_CHO.RN,,0,,_oTrace)
                                 ?};
                                 _urlopwy.next()
                              !};
                              _oTrace.plus()
                           ?};
                           obj_del(_urlopwy); &_urlopwy;
                           _kw65:=exec('kw_atr','lista_licz',_od~1,_od~2,8213,'W');
                           {? _min_cho
                           || _oTrace.minus();
                              _wyr_min+=FUNKCJE.L(499,,,,_oTrace)+FUNKCJE.L(499,,0,,_oTrace);
                              _oTrace.plus()
                           ?};
                           _Kwota+=
                              _oTrace.add(__RUB.sys_kod(4511),'Wyn.zas.uzup.',
                              (FUNKCJE.L_SYS(451)+FUNKCJE.L_SYS(452)+_urlop_b+_kw_wyp+_wyr_min-_kw65
                              +_kw_okol+_kw_188+_kw_rehab)/_Praca*(_Norma-nn_dni)$2,
                              _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni);
                           {? _kw65
                           || _Kwota+=_oTrace.add(0,'Wyn. śr. tygod.',&_kw65,_lt,'E')
                           ?};
:: ER/WRT/XP/12.51/2303/0013 Brak wliczania akordu do uzupełnienia podstawy chorobowej z miesiąca nieobecności
:: kwota rubryki 111 Akord jako atrybut 452 nie jest już w metoda '.CHOL'
                           _Kwota+=FUNKCJE.L_SYS(452,0,,_oTrace)
                        || _Kwota+=FUNKCJE.L_SYS(451,,,_oTrace)+FUNKCJE.L_SYS(451,0,,_oTrace);
:: ER/WRT/XP/12.51/2303/0013 Brak wliczania akordu do uzupełnienia podstawy chorobowej z miesiąca nieobecności
:: kwota rubryki 111 Akord jako atrybut 452 nie jest już w metoda '.CHOL'
                           _Kwota+=FUNKCJE.L_SYS(452,,,_oTrace)+FUNKCJE.L_SYS(452,0,,_oTrace);
                           {? _kw_wyp
                           || _Kwota+=_oTrace.add(436,'Wynagr. za urlop',_kw_wyp,'URLOP','E')
                           ?};
                           {? _kw_okol
                           || _Kwota+=_oTrace.add(442,'Wyn. urlop okolicz.',_kw_okol,'URLOP','E')
                           ?};
                           {? _kw_188
                           || _Kwota+=_oTrace.add(443,'Wyn. opieka Art. 188',_kw_188,'URLOP','E')
                           ?};
                           {? _kw_rehab
                           || _Kwota+=_oTrace.add(7134,'Wynagr. rehabil.',_kw_rehab,'URLOP','E')
                           ?}
                        ?};
                        _Kwota+=
                           LICZ.Wylicz(,'.CHOL',,_oTrace,_Praca,_Norma,nn_dni)+
                           LICZ.Wylicz(0,'.CHOL',,_oTrace,_Praca,_Norma,nn_dni)-_urlop_b-_wyr_min;
                        &_urlop_b;
                        &_wyr_min
                     ?};
                     &_kw_wyp; &_kw_okol; &_kw_188; &_kw_rehab;
                     {? O.R>=1999
                     || _suma_pod:=0;
                        P_INFO.cntx_psh();
                        P_INFO.index('OD');
                        P_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
                        _blokada:=0;
                        {? P_INFO.find_le(date(O.RU,O.MU,0))
                        || {? P_INFO.ROK_WSK=O.RU
                           || _suma_pod+=P_INFO.KW_WSK
                           ?};
                           {? (P_INFO.BLOKADA~1)=O.RU & P_INFO.BLOKADA<date(O.RU,O.MU,0)
                           || _blokada:=1
                           ?}
                        ?};
                        P_INFO.cntx_pop();
                        {? ~_blokada
:                          Sumowanie podstaw emerytalno-rentowych z poprzednich miesiecy
                        || KU.cntx_psh();
                           KU.index('KARTAUB');
                           KU.prefix(P.FIRMA,P.OSOBA,O.RU);
                           {? KU.first()
                           || {!
                              |? {? KU.M<O.MU
                                 || _suma_pod+=KU.S1;
                                    KU.next()
                                 ?}
                              !}
                           ?};
                           KU.cntx_pop();
:                          z pozostalych list biezacego miesiaca
                           _suma_pod+=FUNKCJE.LU_SYS(511,0)
                        ?};
:                       Ustawienie wspolczynnika odbruttowienia w stalych systemu
                        exec('czytaj','#stalesys',date(O.RU,O.MU,0),KST,'WSODBR');
:                       Jezeli pracownik ma blokade lub przekroczyl prog pobierania skladek
:                       na ubezpieczenie emerytalno-rentowe, to odbruttawiamy wylacznie Funduszem
:                       Chorobowym.
:                       W kazdym innym przypadku istnieje prawdopodobienstwo przekroczenia progu biezaca
:                       lista. Podczas liczenia wynagrodzenia chorobowego (465) nie znamy jeszcze
:                       wszystkich skladnikow wchodzacych do podstawy emerytalno-rentowej. A suma tych
:                       skladnikow moze wlasnie doprowadzic do przekroczenia progu.
                        _proc:=
                           {? _blokada | _suma_pod>=KST.SK
                           || KST.PRFC
                           || RAPLS.msg(
                                 P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                                 'Podstawa zasiłku/wynagrodzenia za chorobę '+
                                 'liczona z miesiąca nieobecności.\n'+
                                 'Sprawdź współczynnik odbruttowienia (przyjęto '+$KST.WSODBR+'%)!');
                                 KST.WSODBR
                           ?};
                           {? _proc>0
                           || _netto:=(_Kwota-(_Kwota*_proc/100))$2;
                              _oTrace.add(0,'Wsp.odbrut.',_proc,_lt,'%');
                              _Kwota:=&_netto
                           ?};
                           &_proc;
                           &_blokada;
                           &_suma_pod
                     ?};
                     &_lt;
:                    wyliczenie skladnikow okresowych oraz wyplacanych z przesunieciem dla biezacego miesiaca
                     exec('wyl_prok_skl_okr','lista_licz',N.OD,0);
:                    wyliczenie wartosci za nadgodziny z uwzglednieniem daty zaistnienia dla biezacego miesiaca
                     exec('wyl_zas','roz_godz',N.OD,0,0);
:                    dodanie skladnikow miesiecznych z przesunieciem daty wyplaty;
                     _Kwota+=exec('dod_do_pd_skl_okr','lista_licz',1,date(O.R,O.M,1),#N.ref)
                  ?};
                  &_offset;
                  &_typ;
                  {? Finish<_n_size & _spr_fin=Finish
                  || Finish+=1
                  ?};
                  __PN.DelMc(Finish);
                  __PN.NewMc(Finish,1);
                  _Praca:=_Norma-_Nieob;
                  {? _Praca<0
                  || _Praca:=0
                  ?};
                  _Status:='P';
                  __PN.PutMc(Finish,1,_Kwota,_Norma,_Praca,nn_dni,_Status,_Data,'A',_oTrace);
                  obj_del(_oTrace)
               ?};
:              zapisanie premii okresowych do tabeli skladnikow chorobowych;
               {? ~__KORZ
               || exec('sk_cho_zapisz','skladniki_okresowe')
               ?};
:              zapisanie wyliczonej podstawy
               {? ~__KORZ  & N.RODZAJ='K'
               || {? exec('zap_nieo','!ppl_pll_nals',,,_c,_a)
                  || _ret_val+=exec('wyr_kor_nie_wynchor','lista_licz',1)
                  || exec('wyr_kor_nie_wynchor','lista_licz',1)
                  ?}
               || _ret_val+=exec('zap_nieo','!ppl_pll_nals',,,_c,_a)
               ?}
            ||
:              podstawa wyliczona przy innej nieobecnosci
:              zapisanie premii okresowych do tabeli skladnikow chorobowych
               {? ~__KORZ
               || exec('sk_cho_zapisz','skladniki_okresowe')
               ?};
               {? ~__KORZ  & N.RODZAJ='K'
               || {? exec('zap_nieo','!ppl_pll_nals',Wskaznik,Podstawa,_c,_a)
                  || _ret_val+=exec('wyr_kor_nie_wynchor','lista_licz',1)
                  || exec('wyr_kor_nie_wynchor','lista_licz',1)
                  ?}
               || _ret_val+=exec('zap_nieo','!ppl_pll_nals',Wskaznik,Podstawa,_c,_a)
               ?}

            ?}
         ||
:           podstawa wyliczona przy innej nieobecnosci
:           zapisanie premii okresowych do tabeli skladnikow chorobowych
            {? ~__KORZ
            || exec('sk_cho_zapisz','skladniki_okresowe',WskSkl)
            ?};
            {? ~__KORZ  & N.RODZAJ='K'
            || {? exec('zap_nieo','!ppl_pll_nals',Wskaznik,Podstawa,_c,_a)
               || _ret_val+=exec('wyr_kor_nie_wynchor','lista_licz',1)
               || exec('wyr_kor_nie_wynchor','lista_licz',1)
               ?}
            || _ret_val+=exec('zap_nieo','!ppl_pll_nals',Wskaznik,Podstawa,_c,_a)
            ?}
         ?}
      ?};
      {? ~__KORZ
      || N.next()
      ?}
   !};
   __PN.Delete();
   {? var_pres('_tab_urlop_gr')>100 || obj_del(_tab_urlop_gr) ?};
   {? var_pres('_tab_urlop')>100 || obj_del(_tab_urlop) ?}
?};
exec('dla_listy','stalesys');
{? _dekltab
|| 'usuniecie tablic';
   obj_del(sta_pom);
   obj_del(potr)
?};
:: usuniecie tablic
VAR_DEL.delete('sta_bnie','sta_pnie','sta_mc');
:: MK poprawka[EXC]
{? deklsko
|| 'usuniecie tablic premii okresowych';
   obj_del(sta_sko);
   obj_del(sta_skn)
?};
'przywrocenie kontekstu tabel';
N.cntx_pop();
H.cntx_pop();
KZ.cntx_pop();
'usuniecie zmiennych globalnych';
VAR_DEL.delete('Podstawa','Wskaznik','Finish','deklsko','Data_nie','Data_zm','url_dni','nn_dni','nn_godz',
   'Zmiana','__KORZ','url_godz','WskSkl');
exec('end_prem_skl_okr','lista_licz');
_ret_val


\u_st_op_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [12.30]
:: OPIS: formula sluzaca do aktualizacji zmiennnych _Start i _Stop z formuly wynchor
::   WE: _a tablica z danymi _Start i _Stop
::       _b ref nieobecnosci
::   WY:
::  OLD: \u_st_op/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
NW.cntx_psh();
N.cntx_psh();
TZ.cntx_psh();
_od:=date(0,0,0);
_do:=date(0,0,0);
_chp:=null;
{? Data_zm<>date(0,0,0)
|| 'jeśli jest Data_zm to szukamy nieobecności pierwotnej, ala po tej zmianie';
   N.cntx_psh;
   N.index('NIEOBECN');
   {? N.seek(_b)
   || {!
      |? _nref:=N.ref;
         exec('pop_n','!ppl_pll_nals',N.ref) &
         {? N.OD<=Data_zm || N.seek(_nref);0 || N.OD>Data_zm ?}
      !};
      {? N.OD>Data_zm
      || _chp:=N.ref
      ?}
   ?};
   N.cntx_pop()
?};
{? _chp=null || _chp:=exec('nw_find_chp','nieobecnosc',_b) ?};
N.prefix();
{? N.seek(_chp) & N.ref<>_b
|| _data:=N.OD;
   _mask:='tabz'+$(_data~1);
   {? TZ.name()<>_mask
   || TZ.use(_mask)
   ?};
   TZ.index('ZASTAB');
   TZ.prefix('E',N.ref());
   {? TZ.first || _od:=TZ.M ?};
   {? TZ.last || _do:=TZ.M ?};
   {? _od<=_do
   || _a[1]:=(O.R*12+O.M)-((_od~1)*12+_od~2);
      _a[2]:=(O.R*12+O.M)-((_do~1)*12+_do~2)
   ?}
?};
TZ.cntx_pop();
N.cntx_pop();
NW.cntx_pop();
1


\zap_nieo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: zapisanie informacji o rozliczeniu nieob.
::   WE: _a - wskaznik
::       _b - podstawa
::       _c - liczba analizowanych miesięcy, parametr przekazany do formuły set_zc
::       _d - kod nieobecnosci
::   WY:
::  OLD: \zap_nieo/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
_wsk:={? var_pres('_a')=7 || _a || N.ref() ?};
exec('zap_nw_wynchor','lista_licz',N.ref(),_wsk);
_q:=N.NB().RN;
_nod:=N.OD;
_od:=date(N.OD~1,N.OD~2,1);
_do:=date(N.OD~1,N.OD~2,0);
_sk_poz:="
   SK_CHO.cntx_psh(); SK_CHO.use('s_ch'+$N.ROK); SK_CHO.index('SK_CHL');
   SK_CHO.prefix(N.ref,'M',200); _wyn:=SK_CHO.first; SK_CHO.cntx_pop(); _wyn";

_war:="__RUB.sys_attr(_b,129,N.OD)";

_prem_okr:=exec('dod_do_pd_skl_okr','lista_licz',0,,#N.ref());

{? var_pres('_a')=0 & var_pres('_b')=0
|| 'nieobecność pierwotna';
   __PN.Zapisz(Finish,NW.CHW,1);
   _c:=obj_len(__PN.Array[Finish].Mc);
   status:=obj_new(_c);
   {! _i:=1.._c
   |! status[_c-_i+1]:=
         {? type_of(__PN.Array[Finish].Mc[_i].Status)=2
         || __PN.Array[Finish].Mc[_i].Status
         || ' '
         ?}
   !};
   {? _war(_d,_q)
   || _wynik:=exec('set_zc','!ppl_pll_nals',N.OD,N.DO,__PN.Od(Finish),__PN.Do(Finish),__PN.Pod(Finish),_c,_prem_okr)
   ?};
   N.cntx_psh();
   N.clear();
   {? __KORZ
   || N.get();
      _val:=N.STD*(N.NK-N.DN-N.DK-N.OP*0.25);
      _wynik:=_wynik-_val
   ?};
   NW.cntx_psh();
   NW.index('CHP');
   NW.prefix(N.ref());
   {? NW.first()
   || {!
      |? {? __KORZ
         || exec('n_aktualizuj_podstawy','nieobecnosc',1)
         || exec('n_aktualizuj_podstawy','nieobecnosc',,,1)
         ?};
         NW.next()
      !}
   ?};
   NW.cntx_pop();
   N.cntx_pop();
   obj_del(status)
|| {? N.POZ>0 | _sk_poz()
   || 'umowy zlecenia zostały rozliczone';
      _val:=N.WART;
      N.POD:=_b;
      _b+=N.POZ;
      _ndo:=N.DO;
      N.cntx_psh();
      N.index('NIEOBECN');
      N.prefix('N',P.ref());
      {? __RUB.sys_attr(N.NB,129,N.OD)
      || _ciag_od:=exec('data_ciaglosci','nieobecnosc',1)
      || _ciag_od:=date(0,0,0)
      ?};
      {? _ciag_od<>date(0,0,0) & _ciag_od<>_nod
      || {? N.find_key(_ciag_od) || _ndo:=N.DO ?}
      ?};
      N.cntx_pop();
      _kwmin:=exec('wylicz_kwmin','!ppl_pll_nals',N.ref,_ndo,_b,N.DO);
      _b+=_kwmin;
      N.POD+=_kwmin;
      N.STD:=(N.PROC/100*_b/30)$2;
      {? _war(_d,_q)
      || _wynik:=N.STD*(N.NK-N.DN-N.DK-N.OP*0.25);
         N.WART:=_wynik
      ?};
      {? ~__KORZ
      || N.put()
      || _wynik:=_val-_wynik
      ?}
   || NW.index('CHW');
      NW.prefix(_a);
      {? NW.first()
      || N.cntx_psh();
         _data:=NW.CHW().OD;
         N.cntx_pop();
         TZ.use('tabz'+$(_data~1));
         TZ.index('ZASTAB');
         TZ.prefix('E',NW.CHW);
         _size:=TZ.size();
         {? _size>0
         || status:=obj_new(_size)
         || _size:=1;
            status:=obj_new(1);
            status[1]:=' '
         ?};
         _od:=N.OD;
         _do:=N.DO;
         _pod:=N.POD;
         {? TZ.first() & ~__KORZ
         || {? ~_pod
            || Finish+=1;
               __PN.NewMc(Finish,_size)
            ?};
            _od:=date(TZ.M~1,TZ.M~2,1);
            _i:=0;
            {!
            |? _i+=1;
               status[_i]:=TZ.W;
               _do:=date(TZ.M~1,TZ.M~2,0);
               {? ~_pod
               || __PN.PutMc(Finish,_i,TZ.KW,TZ.NO,TZ.PR,TZ.NN,TZ.W,TZ.M,TZ.STATUS)
               ?};
               TZ.next()
            !};
            {? ~_pod
            || __PN.Zapisz(Finish,N.ref(),1);
               __PN.DelMc(Finish);
               Finish-=1
            ?}
         ?};
         {? _war(_d,_q) & _size
         || _val:=N.WART;
            _wynik:=exec('set_zc','!ppl_pll_nals',N.OD,N.DO,_od,_do,_b,_size);
            {? __KORZ
            || _wynik:=_val-_wynik
            ?}
         ?};
         obj_del(status)
      || N.POD:=_b;
         _b+=N.POZ;
         _ndo:=N.DO;
         _val:=N.WART;
         N.cntx_psh();
         N.index('NIEOBECN');
         N.prefix('N',P.ref());
         {? __RUB.sys_attr(N.NB,129,N.OD)
         || _ciag_od:=exec('data_ciaglosci','nieobecnosc',1)
         || _ciag_od:=date(0,0,0)
         ?};
         {? _ciag_od<>date(0,0,0) & _ciag_od<>_nod
         || {? N.find_key(_ciag_od) || _ndo:=N.DO ?}
         ?};
         N.cntx_pop();
         _kwmin:=exec('wylicz_kwmin','!ppl_pll_nals',N.ref(),_ndo,_b,N.DO);
         _b+=_kwmin;
         N.POD+=_kwmin;
         N.STD:=(N.PROC/100*_b/30)$2;
         {? _war(_d,_q)
         || _wynik:=N.STD*(N.NK-N.DN-N.DK-N.OP*0.25);
            N.WART:=_wynik
         ?};
         {? ~__KORZ
         || N.put()
         || _wynik:=_val-_wynik
         ?}
      ?}
   ?}
?};
{? {? _d=5  || __RUB.sys_attr(_q,1227,N.OD)
   |? _d=6  || __RUB.sys_attr(_q,1225,N.OD)
   |? _d=7  || __RUB.sys_attr(_q,12211,N.OD)
   |? _d=9  || __RUB.sys_attr(_q,1211,N.OD)
   |? _d=19 || __RUB.sys_attr(_q,1222,N.OD)
   |? _d=4  || __RUB.sys_attr(_q,12212,N.OD)
   || _d=_q
   ?}
|| _wynik
?}


\wylicz_kwmin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Funkcja wylicza wyrownanie podstawy nieobecnosci do kwoty minimalnego
::       wynagrodzenia pole NW.KWMIN
::   WE: _a - ref nieobecnosci
::       _b - data konca nieobecnosci
::       _c - kwota podstawy nieobecnosci N.POD + N.POZ jezeli wywolane ze zlecen
::       _d - data konca biezacej nieobecnosci do ustalenia kwoty minmalnego wynagrodzenia
::   WY: Wyliczona kwota NW.KWMIN jezeli bylo lub 0
::  OLD: \wylicz_kwmin/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<>type_of(date) || _d:=_b ?};
_kwmin:=0;
NW.cntx_psh();
NW.index('CHW');
NW.prefix(_a);
{? NW.first()
|| _kwmin:=NW.KWMIN:=exec('wyr_minwyn_wynchor','lista_licz',_b,_c,_d);
   {? ~__KORZ
   || NW.put()
   ?}
?};
NW.cntx_pop();
_kwmin


\set_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Główna funkcja odpowiedzialna za ustalenie umów, z których wynagrodzenie wliczane jest do wynagrodzenia za
::       chorobę
::   WE: _a - zmienna zawierająca początek nieobecności
::       _b - zmienna zawierająca koniec nieobecności
::       _c - zmienna zawierająca początek okresu wyliczeniowego
::       _d - zmienna zawierająca koniec okresu wyliczeniowego
::       _e - podstawa wyliczona z wynagrodzenia ze stosunku pracy
::       _f - liczba analizowanych miesięcy
::       _g - premie okresowe
::   WY:
::  OLD: \set_zc/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
_c:=date(_c~1,_c~2,1);
LMc:=_f;
_nod:=N.OD;
_ndo:=N.DO;
_okr_od:=_c;
_okr_do:=_d;
_q:=N.NB().RN;
_val:=0;
{? var_pres('_g')=type_of(0)
|| _e+=_g
?};
_e:=(_e*exec('chw_wal_nieowal','!ppl_pll_nals',N.ref,_e))$2;

exec('define_umowy_zc','!ppl_pll_nals');

{? var_pres('__ZLECENIA')<=0
|| __ZLECENIA:=obj_new(@.CLASS.__ZLECENIA)
?};
__ZLECENIA.Empty();

_k:=0;
{? ~__KORZ
|| ZC_INFO.index('ZLECDW');
   ZC_INFO.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
   {? ZC_INFO.last()
   || _od:=_a;
      _do:=_b;
      _ind:=_jest_um:=0;
      _ref_z:=null();
      _tab_z:=tab_tmp(1,
         'T','INTEGER','Pobrany',
         'OD','DATE','Data OD',
         'REF','INTEGER','Ref'
      );
      _tab_ndx:=_tab_z.ndx_tmp(,,'REF',,);
      {!
      |? {? ZC_INFO.FC='T' & ZC_INFO.DU<=_okr_do & ZC_INFO.DW>=_okr_od
         || _jest_um:=1;
            _ind+=1;
            _tab_z.OD:=ZC_INFO.DU;
            _tab_z.REF:=#ZC_INFO.ref();
            _tab_z.T:=_ind;
            _tab_z.add(1);
            {? exec('licz_zc','!ppl_pll_nals',_okr_od,_okr_do)
            || __ZLECENIA.Add(ZC_INFO.DW,mc);
               _k:=1
            ?}
         ?}; ZC_INFO.prev() & ZC_INFO.DW>=_okr_od
      !};
      {? _jest_um & _tab_z.first()
      || {!
         |? {? ZC_INFO.seek(_tab_z.REF,)
            || _tab_z.cntx_psh();
               _tab_z.index(_tab_ndx);
               _ref_z:=_tab_z.ref();
               {!
               |? ZC_INFO.prev() & ZC_INFO.DW>=_okr_od
               |! {? ~_tab_z.find_key(#ZC_INFO.ref())
                  || {? ZC_INFO.FC='T' &
                        ((ZC_INFO.DW<_tab_z.OD & __KAL.w_days(ZC_INFO.DW+1,_tab_z.OD)<=1) | ZC_INFO.DW>=_tab_z.OD)
                     || _ind+=1;
                        _tab_z.OD:=ZC_INFO.DU;
                        _tab_z.REF:=#ZC_INFO.ref();
                        _tab_z.T:=_ind;
                        _tab_z.add(1);
                        {? exec('licz_zc','!ppl_pll_nals',_okr_od,_okr_do)
                        || __ZLECENIA.Add(ZC_INFO.DW,mc);
                           _k:=1
                        ?};
                        _tab_z.seek(_ref_z)
                     ?}
                  || _tab_z.seek(_ref_z)
                  ?}
               !};
               _tab_z.cntx_pop()
             ?};
             _tab_z.next()
         !}
      ?};
      &_ind;
      &_tab_z;
      &_tab_ndx;
      &_ref_z
   ?};
   {? _e>0 & _k=0
   || N.cntx_psh();
      N.index('NIEOBECN');
      N.prefix('N',P.ref());
      {? __RUB.sys_attr(N.NB,129,N.OD)
      || _ciag_od:=exec('data_ciaglosci','nieobecnosc',1)
      || _ciag_od:=date(0,0,0)
      ?};
      {? _ciag_od<>date(0,0,0) & _ciag_od<>_nod
      || {? N.find_key(_ciag_od) || _ndo:=N.DO ?}
      ?};
      N.cntx_pop();
      _e+=exec('wylicz_kwmin','!ppl_pll_nals',N.ref(),_ndo,_e,N.DO)
   ?};
   N.POD:=_e;
   exec('n_stawka','nieobecnosc',_q,_e)
|| {? _e>0
   || N.cntx_psh();
      N.index('NIEOBECN');
      N.prefix('N',P.ref());
      {? __RUB.sys_attr(N.NB,129,N.OD)
      || _ciag_od:=exec('data_ciaglosci','nieobecnosc',1)
      || _ciag_od:=date(0,0,0)
      ?};
      {? _ciag_od<>date(0,0,0) & _ciag_od<>_nod
      || {? N.find_key(_ciag_od) || _ndo:=N.DO ?}
      ?};
      N.cntx_pop();
      _e+=exec('wylicz_kwmin','!ppl_pll_nals',N.ref(),_ndo,_e,N.DO)
   ?};
   exec('zap_std_umowy_zc','!ppl_pll_nals',_e)
?};

_s:=N.STD*(N.NK-N.DN-N.DK-N.OP*0.25);
N.WART:=_s;
{? ~__KORZ
|| N.put()
?};

_p:=1;
{? _k
|| _l:=__ZLECENIA.Array[1].Size();
   exec('clear_mc','!ppl_pll_nals');
   exec('zap_mc','!ppl_pll_nals',_p,_l);
   exec('zap_nw_umowy_zc','!ppl_pll_nals',0,1,N.ref());
   exec('zap_std_umowy_zc','!ppl_pll_nals',_e);
   exec('zap_trace_umowy_zc','!ppl_pll_nals',_p,_l,N.ref(),_okr_od);
   exec('n_dnop_akt','nieobecnosc',1,_nod,_ndo);
   _s:=exec('licz_wyn_umowy_zc','!ppl_pll_nals',_nod,_ndo)
?};
&LMc;
{? var_pres('mc')>100
|| obj_del(mc);
   &mc
?};
_s


\zn_roznice_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Sprawdzenie list z roznymi miesiacami kosztowym i ubezpieczeniowym
::       dla pracownika - odlozenie kontekstu tabel O i LS
::   WE: _a - rok - _year
::       _b - miesiac - _month
::  OLD: \zn_roznice/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
O.cntx_psh();
LS.cntx_psh();
O.index('LISTYPLA');
O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,_a,_b);
{? O.first()
|| {!
   |? {? FUNKCJE.CZY_POD()
      || {? O.M<>O.MU
         || LS.use(O.LT);
            LS.index('PRACNRRU');
            LS.prefix();
            {? LS.find_key(P.ref())
            || _wyn:=1
            ?}
         ?}
      ?};
      ~_wyn & O.next()
   !}
?};
_wyn


\wyl_chol_wynchor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK
:: OPIS: Wyliczenie kwot z list plac oraz odbruttowienie zgodne z O.MU
::       Uwaga - kontekst odlozony w procedurze "zn_roznice"
::       UWAGA: Procedura korzysta z numerow rubryk!
::   WE: _a - rok - _year
::       _b - miesiac - _month
::       _c - wsp odbruttowienia nastepnego miesiaca
::       _d - _Kwota (z przebiegu zatrudnienia)
::       _e - rodzaj zatrudnienia - _typ
::       _f - _Praca
::       _g - _Norma
::       _h - _Godz
::       _i - procent skladki rentowej nastepnego miesiaca
::       _j - obiekt klasy Trace
::  OLD: \wyl_chol/wynchor.fml
::----------------------------------------------------------------------------------------------------------------------
_Kwota_p:=_Kwota_w:=_zn_nom:=_s_p_chw:=_s_p_er:=0;
_Kwota:=_d; _Praca:=_f; _Norma:=_g; _Godz:=_h; _typ:=_e; _odbr:=_c; _rent:=_i;
_oTrace:=_j;

:Wszystko co do tej pory bylo w _oTrace - zapamietujemy w nowym obiekcie,
_oTK:=obj_new(@.CLASS.Trace,_oTrace);
:rekordy ze starego usuwamy.
_oTrace.erase();

_ls:="
   _Kwota_p:=0;
   LS.prefix(P.ref(),_a);
   {? LS.first()
   || {!
      |? _Kwota_p+={? _>1 || _b.add(_a,,LS.KW,~LS.name(),'E') || LS.KW ?};
         LS.next()
      !}
   ?};
   _Kwota_p";
_lsa:="
   _Kwota_p:=0;
   _tab:=__RUB.sys_rub(_a);
   {? _tab.first()
   || {!
      |? LS.prefix(P.ref(),_tab.RN);
         {? LS.first()
         || {!
            |? _Kwota_p+={? _>1 || _b.add(_tab.RN,,LS.KW,~LS.name(),'E') || LS.KW ?};
               LS.next()
            !}
         ?};
         _tab.next()
      !}
   ?};
   _Kwota_p";


LICZ.RUB_CHO.prefix();
: wykonuj dla wszystkich list miesiaca - rozliczenie kosztowe
O.index('LISTYPLA');
O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,_a,_b);
{? O.first()
|| {!
   |? {? FUNKCJE.CZY_POD()
      || {? O.LT+3<>'sum'
         || _blokada:=exec('czy_blokada_wynchor','lista_licz',O.RU,O.MU);
            LS.use(O.LT); LS.index('PRACNRRU'); LS.prefix();
            _lt:=~LS.name();
            {? LS.find_key(P.ref())
            || _Kwota_p:=0;
               {? _typ='u'
               || {? LICZ.RUB_CHO.first()
                  || {! |? _Kwota_p+=_ls(LICZ.RUB_CHO.RN,_oTrace); LICZ.RUB_CHO.next() !}
                  ?};
:              jesli jest nominal dodajemy kwoty z przebiegu zatrudnienia
                  {? ~_zn_nom & (_ls(90)+_ls(100)) || _Kwota_p+=_Kwota; _oTrace.add(_oTK); _zn_nom:=1 ?}
               |? _typ='zm. char. prac.'
               || {? ~_zn_nom & (_ls(93)+_ls(94)+_ls(90)+_ls(100)+_ls(102)+_ls(110))
                  || _Kwota_p+=_Kwota; _oTrace.add(_oTK); _zn_nom:=1
                  ?};
                  _kw_url:=0;
                  {? _Praca>0 & _Praca<>_Norma-nn_dni & LICZ.RUB_CHO.first()
                  || _urlopwy:=__RUB.sys_rub(42,date(O.R,O.M,0));
                     {? _urlopwy.first()
                     || _oTrace.minus();
                        {!
                        |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                 ~__RUB.sys_attr(LICZ.RUB_CHO.RN,421) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                           || _kw_url+=_ls(LICZ.RUB_CHO.RN,_oTrace)
                           ?};
                           _urlopwy.next()
                        !};
                        _oTrace.plus()
                     ?};
                     obj_del(_urlopwy); &_urlopwy;
                     _Kwota_p+=_oTrace.add(100,'Wyn.zas.uzup.',
                        (_ls(100)+_ls(111)+_lsa(453)+_kw_url)/_Praca*(_Norma-nn_dni)$2,
                        _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni)
                  || _Kwota_p+=_ls(100,_oTrace)+_ls(111,_oTrace)+_lsa(453,_oTrace)
                  ?};
                  {? LICZ.RUB_CHO.first()
                  || {! |? _Kwota_p+=_ls(LICZ.RUB_CHO.RN,_oTrace); LICZ.RUB_CHO.next() !}
                  ?};
                  _Kwota_p-=_kw_url;
                  &_kw_url
:           pracownicy rozliczani godzinowo
               || {? ~_zn_nom & (_ls(93)+_ls(94)+_ls(102)+_ls(110))
                  || _Kwota_p+=_Kwota;
                     _oTrace.add(_oTK);
                     _zn_nom:=1
                  ?};
                  _kw_url:=0;
                  {? _Praca>0 & _Praca=url_dni
                  || _Kwota+=_oTrace.add(100,'Wyn.zas.godz.',
                        sta_pom[1]*(_Godz-url_godz-nn_godz)$2,
                        _lt,'E',,,'Godz.:'+$(_Godz-url_godz-nn_godz)+'|Stawka:'+$sta_pom[1])
                  |? _Praca>0 & _Praca<>_Norma-nn_dni
                  || _urlopwy:=__RUB.sys_rub(42,date(O.R,O.M,0));
                     {? _urlopwy.first()
                     || _oTrace.minus();
                        {!
                        |? {? LICZ.RUB_CHO.find_key(_urlopwy.RN) &
                                 ~__RUB.sys_attr(LICZ.RUB_CHO.RN,421) & ~__RUB.sys_attr(LICZ.RUB_CHO.RN,422)
                           || _kw_url+=_ls(LICZ.RUB_CHO.RN,_oTrace)
                           ?};
                           _urlopwy.next()
                        !};
                        _oTrace.plus()
                     ?};
                     obj_del(_urlopwy); &_urlopwy;
                     _Kwota_p+=_oTrace.add(100,'Wyn.zas.uzup.',
                        (_ls(100)+_ls(111)+_lsa(453)+_kw_url)/_Praca*(_Norma-nn_dni)$2,
                        _lt,'E',,,'Norma:'+$_Norma+'|Praca:'+$_Praca+'|NN:'+$nn_dni)
                  || _Kwota_p+=_ls(100,_oTrace)+_ls(111,_oTrace)+_lsa(453,_oTrace)
                  ?};
                  {? LICZ.RUB_CHO.first()
                  || {!
                     |? _Kwota_p+=_ls(LICZ.RUB_CHO.RN,_oTrace);
                        LICZ.RUB_CHO.next()
                     !}
                  ?};
                  _Kwota_p-=_kw_url;
                  &_kw_url
               ?};
               _s_p_er+=_pod_er:=_lsa(56111);
               _s_p_chw+=_pod_chw:=_lsa(5621);
               _proc:=
                  {? O.M<>O.MU
                  || {? _pod_er$2=_pod_chw$2 & ~_blokada
                     || _odbr
                     || {? _pod_chw$2 || (KST.PRFE/2+_rent)*(_pod_er$2)/(_pod_chw$2) ?}+KST.PRFC
                     ?}
                  || {? _pod_er$2=_pod_chw$2 & ~_blokada
                     || KST.WSODBR
                     || {? _pod_chw$2 || (KST.PRFE/2+KST.PRFRP)*(_pod_er$2)/(_pod_chw$2) ?}+KST.PRFC
                     ?}
                  ?};
               _oTrace.add(0,'Wsp.odbrut.',_proc,_lt,'%');
               _Kwota_w+=(_Kwota_p-(_Kwota_p*_proc/100))
            ?}
         ?}
      ?};
      O.next()
   !};
:  jesli nie udalo sie znalezc nominalu odbruttowienie kwot z przebiegu zatrudnienia
:  odbywa sie wg miesiaca kosztowego
   {? ~_zn_nom
   || _blokada:=exec('czy_blokada_wynchor','lista_licz',_a,_b);
      _proc:=
         {? _s_p_er$2=_s_p_chw$2 & ~_blokada
         || KST.WSODBR
         || {? _pod_chw$2 || (KST.PRFE/2+KST.PRFRP)*(_pod_er$2)/(_pod_chw$2) ?}+KST.PRFC
         ?};
      _oTK.add(0,'Wsp.odbrut.',_proc,~LS.name(),'%');
      _oTrace.add(_oTK);
      _Kwota_w+=(_Kwota-(_Kwota*_proc/100))
   ?};
   _Kwota:=_Kwota_w$2
|| _oTrace.add(0,'Wsp.odbrut.',KST.WSODBR,~LS.name(),'%');
   _Kwota:=(_Kwota-(_Kwota*KST.WSODBR/100))$2
?};
_Kwota


\chw_wal_nieowal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2008]
:: OPIS: Funkcja wyszukuje wspolczynnik waloryzacji NW.WSP dla podanego refa tabeli N
::   WE: _a - ref tabeli nieobecnosci N
::       _b - wyliczona podstawa do sprawdzenia waloryzacji
::   WY: wartosc pola NW.WSP podzielona przez 100, jesli ta wartosc jest mniejsza niz 1
::       - zwracane jest 1
::  OLD: \chw_wal/nieowal.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null) || return(1) ?};
{? var_pres('_b')<>type_of(0) || return(1) ?};
_wal:=1;
NW.cntx_psh;
NW.index('CHW');
NW.prefix(_a);
{? NW.first & NW.WAL='T' ||
   _NEPod:=_MEKwal:=0;
   TZ.cntx_psh;
   TZ.use('tabz'+form(NW.CHW().OD~1,-4,0,'99'));
   TZ.index('ZASTAB');
   TZ.prefix('E',NW.CHW);
   {? TZ.first ||
      {! |? {? TZ.W<>'N' ||
               _NEPod+=TZ.KW;
               _MEKwal+=1
            ?};
            TZ.next
      !}
   ?};
   TZ.cntx_pop;
   {? _MEKwal ||
      _podstawa:=(_NEPod/_MEKwal)$2;
      _podstawa+=exec('dod_do_pd_skl_okr','lista_licz',0,,#Wskaznik,1);
      {? _b=_podstawa | __KORZ
      || _wal:=NW.WSP/100
      ?}
   ?}
?};
NW.cntx_pop;
{? _wal<1 || 1 || _wal ?}


\licz_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
::       RWR [12.30]
:: OPIS: Funkcja odpowiedzialna za ustalenie rachunkow, ktorych rozliczenie nastapilo w okresie przyjetym do rozliczenia
::       nieobecnosci.
::   WE: _a - data poczatkowa
::       _b - data koncowa
::   WY: suma podstaw
::  OLD: \licz_zc/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
exec('clear_mc','!ppl_pll_nals');
_val:=0;
:     miesiąc podstawy chorobowej wyznaczany wg daty okreslonej parametrem 243
_mod:={? PAR_SKID.get(243)='' || 'W' || PAR_SKID.get(243) ?};
RH.cntx_psh;
RH.index('ZC_INFO');
RH.prefix(ZC_INFO.ref);
{? RH.find_ge(_a)
|| {!
   |? {? {? _mod='W' || RH.DWY>=_a & RH.DWY<=_b || RH.DRA>=_a & RH.DRA<=_b ?}
      ||
:        indeks elementu w tablicy mc
         _i:={? _mod='W' || (RH.DWY~1*12+RH.DWY~2) || (RH.DRA~1*12+RH.DRA~2) ?}-(_a~1*12+_a~2)+1;
         {? _i<=obj_len(status) ||
            {? status[_i]='T' | status[_i]='P' ||
               _oTrace:=obj_new(@.CLASS.Trace);
               _pod:=LICZRHS.Wylicz(,'.CHOL',,_oTrace);
               _oTrace.minus();
               _pod-=FUNKCJE.Z_SYS(5711,,,,_oTrace)+FUNKCJE.Z_SYS(572,,,,_oTrace);
               _oTrace.plus();
               mc[_i].PODST+=_pod;
               mc[_i].Trace.add(_oTrace);
               obj_del(_oTrace);
               &_oTrace;
               _val+=_pod
            ?}
         ?}
      ?};
      RH.next
   !}
?};
RH.cntx_pop;
_val


\clear_mc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
::       RWR [12.30]
:: OPIS: Funkcja odpowiedzialna za powolanie i wyzerowanie tablicy mc.
::   WE:
::   WY:
::  OLD: \clear_mc/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('mc')<100 || mc:=obj_new(LMc) ?};
{! _nrm:=1..obj_len(mc)
|! {? var_pres('['+$_nrm+']',mc)<100
   || mc[_nrm]:=obj_new('PODST','Trace');
      mc[_nrm].Trace:=obj_new(@.CLASS.Trace)
   || mc[_nrm].Trace.erase()
   ?};
   mc[_nrm].PODST:=0
!}


\zap_mc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
::       RWR [12.30]
:: OPIS: Funkcja odpowiedzialna za wypeLnienie tablicy mc na podstawie danych zawartych w obiekcie __ZLECEANIA. Dane
::       dotyczA wypLat z umowy zlecenia przypadajacych w okresie, z ktorego wyliczono wynagrodzenie za chorobe.
::   WE: _a - indeks w obiekcie __ZLECENIA identyfikujący kolejne umowy zapisane w obiekcie
::       _b - liczba umow zapisanych w obiekcie
::   WY:
::  OLD: \zap_mc/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
{! _nru:=_a.._b
|! {! _nrm:=1..obj_len(mc)
   |! _mc:=__ZLECENIA.GetMc(_nru,_nrm);
      mc[_nrm].PODST+=_mc.PODST;
      mc[_nrm].Trace.add(_mc.Trace);
      obj_del(_mc)
   !}
!}


\zap_nw_umowy_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Funkcja dodaje gdy _a=1 rekord do NW oraz przepisuje zapisy w tabeli TZ z umowy o prace E
::       oraz gdy _a=0 wykonuje przepisanie tabeli TZ i kasuje zapisy w TZ ze zlecen
::   WE: _a - integer 1 lub 0 czy zapisywac rekord w NW
::       _b - flaga: 1 zapisy dotyczą wynagrodzenia ze stosunku pracy
::            2 zapisy dotycza wynagrodzenia z umow zlecen
::            0 przepisanie rozliczen z TZ do nowego zapisu w NW
::       _c - _c - ref nieobecnosci
::  OLD: \zap_nw/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
_ref_pop:=_c;
{? _a ||
   NW.index('CHW');
   NW.prefix(_c);
   {? NW.first ||
      NW.CHW:=N.ref;
      NW.KWMIN:=0;
      NW.cntx_psh();
      NW.clear;
      NW.add;
      NW.cntx_pop
   ?};
   _c:=N.ref
?};
{? _b ||
   NW.index('CHW');
   NW.prefix(_c);
   {? NW.first ||
      N.cntx_psh;
      _s:=obj_len(mc);
      _data:=NW.CHW().OD;
      N.cntx_pop;
      TZ.use('tabz'+$(_data~1));
      TZ.index('ZASTAB');
      TZ.prefix('Z',NW.CHW);
      {? TZ.first || {! |? TZ.del !} ?};
      TZ.prefix('E',@.NW.CHW);
      {? TZ.first ||
         {! _i:=1 |?
            _val:={? _i<=_s || mc[_i].PODST ?};
            TZ.cntx_psh();
            TZ.N:=N.ref;
            TZ.KW:=_val;
            TZ.R:='Z';
            TZ.N:=_c;
            TZ.clear;
            {? ~__KORZ || TZ.add ?};
            TZ.cntx_pop;
            TZ.next
         !}
      ?}
   ?}
|| NW.cntx_psh;
   NW.index('CHW');
   NW.prefix(_ref_pop);
   {? NW.first
   || N.cntx_psh;
      _datapop:=NW.CHW().OD;
      N.cntx_pop;
      NW.prefix(_c);
      {? NW.first
      || N.cntx_psh;
         _datanew:=NW.CHW().OD;
         N.cntx_pop;
         TZ.use('tabz'+$(_datapop~1));
         TZ.prefix('E',_ref_pop);
         {? TZ.first
         || {!
            |? TZ.cntx_psh;
               TZ.use('tabz'+$(_datanew~1));
               TZ.N:=_c;
               TZ.OS_N:=null;
               TZ.clear;
               {? ~__KORZ || TZ.add(1) ?};
               TZ.cntx_pop;
               TZ.next
            !}
         ?}
      ?}
   ?};
   NW.cntx_pop
?}


\zap_std_umowy_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ???
::       RWR [12.30]
:: OPIS: Funkcja dokonuje wyliczenia wynagrodzenia dla poszczegolnych nieobecnosci.
::   WE: _a - podstawa wyliczona z wynagrodzenia ze stosunku pracy.
::   WY:
::  OLD: \zap_std/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=0;
_q:=N.NB().RN;
_s:=0;
{? ~__KORZ
|| {! _i:=1..obj_len(mc) |! _val+=mc[_i].PODST; {? status[_i]='T' | status[_i]='P' || _s+=1 ?}  !};
   {? _s>0 || _val:=_val/_s$2 ?}
|| _val:=N.POZ
?};
N.POD:=_a;
::Poprawka SPIS ER/WRT/XP/12.51/2211/0013 Brak waloryzacji podstawy chorobowej z umowy zlecenia
_val:=(_val*exec('chw_wal_zc','nieobecnosc',N.ref(),_val))$2;
_podst:=N.POZ:=_val;
_podst+=_a;
_kwmin:=exec('wylicz_kwmin','!ppl_pll_nals',N.ref(),N.DO,_podst);
N.POD+=_kwmin;
_podst+=_kwmin;
exec('n_stawka','nieobecnosc',_q,_podst,{? ~__KORZ || 1 ?})


\licz_wyn_umowy_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Funkcja dokonuje wyliczenia wynagrodzenia dla poszczególnych nieobecności.
::   WE: _a - początek nieobecności
::       _b - koniec nieobecności
::   WY:
::  OLD: \licz_wyn/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=0;
N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
{? N.find_key(_a)
|| {!
   |? {? N.DO<=_b
      || _val+=N.STD*(N.NK-N.DN-N.DK-N.OP*0.25);
         1
      ?} & N.next()
   !}
?};
N.cntx_pop();
_val


\zap_trace_umowy_zc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Formula zapisuje skladowe wynagrodzenia chorobowego, wyliczone na podstawie umow-zlecen.
::   WE: _a - "numer" od umowy w obiekcie __ZLECENIA
::       _b - "numer" do umowy w obiekcie __ZLECENIA
::       _c - N.ref()
::       _d - data poczatkowa
::   WY: ~~
::  OLD: \zap_trace/umowy_zc.fml
::----------------------------------------------------------------------------------------------------------------------
_umod:=_a;
_umdo:=_b;
_nref:=_c;
_sstart:=_d;
:
{! _um:=_umod.._umdo
|! _dt:=_sstart;
   {! _nrm:=1..obj_len(mc)
   |! __ZLECENIA.GetMc(_um,_nrm).Trace.save(_nref,_dt);
      _dt:=date(_dt~1,_dt~2,0)+1
   !}
!};
~~


\wyr_minkraj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2006]
:: OPIS: Funkcja wylicza wyrownanie do najnizszej krajowej dla pracownika w danym miesiacu
::   WE: _a - kwota brutto
::   WY: wyliczona kwota wyrownania do najnizszej krajowej dla rubryki 499
::  OLD: \wyr_minkraj/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return(0) ?}; {? _a<=0 || return(0) ?};
_brutto:=_a;
:: odjecie skladników, które nie wchodzą do ustalania wyrównania
_nieob:=FUNKCJE.L_SYS(4011)+FUNKCJE.L(151,154)+FUNKCJE.L_SYS(41);
_ekw:=FUNKCJE.L(440);
_staz:=FUNKCJE.L_SYS(40211);
:: Korekta płacy zasadniczej
_kor_plus:=FUNKCJE.L_SYS(4512);
:: Korekta dodatek funkcyjny/brygadzistowski i Korekta dodatek stały
_kor_plus+=FUNKCJE.L_SYS(4543);
:: Kor. wyn. za urlop
_kor_minus:=FUNKCJE.L_SYS(423);
::Kor. przestój
_kor_minus+=FUNKCJE.L_SYS(4532);
:: Kor. siła wyższa
_kor_minus+=FUNKCJE.L_SYS(4552);
_brutto:=_brutto-(_nieob+_ekw+_staz+_kor_plus)-_kor_minus;
{? _brutto<0 || return(0) ?};
_data1:=date(O.R,O.M,1);
_data2:=date(O.R,O.M,0);
_wyrown:=0;
:: Pobranie danych z innych list miesiąca
_dodlist:=FUNKCJE.L(100,498,0)+FUNKCJE.L_SYS(48,0);
:: odjecie skladników, które nie wchodzą do ustalania wyrównania z innych list miesiąca
_nieob:=FUNKCJE.L_SYS(4011,0)+FUNKCJE.L(151,154,0)+FUNKCJE.L_SYS(41,0);
_ekw:=FUNKCJE.L(440,,0);
_staz:=FUNKCJE.L_SYS(40211,0);
:: Korekta płacy zasadniczej
_kor_plus:=FUNKCJE.L_SYS(4512,0);
:: Korekta dodatek funkcyjny/brygadzistowski i Korekta dodatek stały
_kor_plus+=FUNKCJE.L_SYS(4543,0);
:: Kor. wyn. za urlop
_kor_minus:=FUNKCJE.L_SYS(423,0);
::Kor. przestój
_kor_minus+=FUNKCJE.L_SYS(4532,0);
:: Kor. siła wyższa
_kor_minus+=FUNKCJE.L_SYS(4552,0);
_dodlist-=(_nieob+_ekw+_staz+_kor_plus)-_kor_minus;

H.cntx_psh;
H.index('_HISTKOD');
H.prefix(P.ref,'Z');
{? H.find_le(_data2)
|| {? H.DO=date(0,0,0) | H.DO>=_data1
   || {? _brutto+_dodlist>=KST.NK*H.WY$2
      || H.cntx_pop;
         return(0)
      ?};
      __KAL.set_cal(P.KAL,_data1~1);
      _cp:=-(1+H.CP().S);
      _minus:=exec('dnpzazw','nieobecnosc',_data1,_data2,'gr');
      _kal_naz:=__KAL.nazwa;
      _kal_rok:=__KAL.rok;
:: Ustawienie kalendarza listy / standard
      {? @.O.T().KA().NAZWA<>''
      || __KAL.set_cal(@.O.T().KA().NAZWA)
      || __KAL.set_cal('standard')
      ?};
:: Wyliczenie godzin nominalnych dla pełnego wymiaru zatrudnienia z uwzględnieniem obniżonej normy dobowej
      _norma:=exec('norma_zmiana','godziny',_data1,_data2);
      _godznom:=exec('nominal','godziny',_data1,_data2,1,_norma,,,1)$2;
      {? ~_godznom ||
         RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Brak informacji o kalendarzu pracownika.'@,
            exec('retry_msg','lista_licz')
         );
         H.cntx_pop;
         __KAL.set_cal(_kal_naz,_kal_rok);
         return(0)
      ?};

:: ustalenie % minimalnego wynagrodzenia w zaleznosci od stazu pracy
      {? exec('czy_rok','staz',_data2)
      || _proc:=1
      || _buf:=exec('oblicz','staz',1,,_data2~1,,_data2);
         _dzien:=_buf.daty[1]~3;
         _mc:=_buf.daty[1]~2;
         _rok:=_buf.daty[1]~1+1;
         _td:=0;
         _datast:=date(_rok,_mc,{? _dzien>(_td:=date(_rok,_mc,0)~3) || _td || _dzien ?});
         _proc:={? _data2>=_datast || 1 || 0.8 ?};
         &_dzien;
         &_mc;
         &_rok;
         &_datast;
         &_td
      ?};
      _stawkamin:=_proc*KST.NK$2;
      _stawkamin:=_stawkamin/_godznom;
:: Powrót do kalendarza pracownika
      __KAL.set_cal(_kal_naz,_kal_rok);
      _godz:=exec('nominal','godziny',_data1,_data2,1,_norma)$2;
      _chor:=0;
      _chorKal:=0;
      {? var_pres('_rub')>100
      || obj_del(_rub)
      ?};
      _rub:=__RUB.sys_rub(129,_data2);
      {? _rub.first
      || {!
         |? _chor+=FUNKCJE.NG(_rub.RN);
            _chorKal+=FUNKCJE.NK(_rub.RN);
            _rub.next
         !}
      ?};
      _url:=0;
      {? _cp='f'
      || N.cntx_psh();
         N.index('NIEOBECL');
         N.prefix('N',P.ref(),~O.LT);
::       ER/WRT/XP/23.25/2311/0075 - ER/WRT/XP/22.26/2311/0030 - ER/WRT/XP/12.51/2310/0009:
::       Zawyżone wyrównanie do minimalnego wynagrodzenia: Nieob. siła wyższa, pracownik godzinowy
         {? N.first()
         || {!
            |? {? N.ROK=O.R & N.MC=O.M & (__RUB.sys_attr(N.NB,113,N.OD) | __RUB.sys_attr(N.NB,131,N.OD)) &
                  ~__RUB.sys_attr(N.NB,1318,N.OD)
               || _url+=N.NG$2
               ?};
               N.next()
            !}
         ?};
         N.cntx_pop();
         _praca:=FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(48)+FUNKCJE.L(7010);
         _brutto-=FUNKCJE.L_SYS(455)
      || _Nieob:=0;
         N.cntx_psh();
         N.index('NIEOBECL');
         N.prefix('N',P.ref,~O.LT);
         {? N.first
         || _dane_d:=#0;
            {!
            |? {? __RUB.sys_attr(N.NB,15,N.OD) & ~__RUB.sys_attr(N.NB,137,N.OD)
               || {? N.OD<date(O.R,O.M,1)
                  || _brutto+=N.POTR1+N.POTR2+N.POTR3
                  || _N_brutt:=N.POTR1+N.POTR2+N.POTR3;
                     {? _dane_d<>date(N.OD~1,N.OD~2,1)
                     || _dane_d:=date(N.OD~1,N.OD~2,1);
                        {? var_pres('_tab')>100 || obj_del(_tab) ?};
                        _tab:=exec('dane_pracownika','pracownik',,date(N.OD~1,N.OD~2,1),date(N.OD~1,N.OD~2,0))
                     ?};
                     _NK:=sql('select sum(NK) NK from :_a where NB in (:_b) and NB not in (:_c)',
                         _tab,__RUB.sys_sql(15),__RUB.sys_sql(137)).NK;
                     _DK:=_tab.size;
                     {? _NK=_DK | (__RUB.sys_attr(N.NB,152,N.OD) & ~__RUB.sys_attr(N.NB,137,N.OD))
                     || _Nieob+=N.NG
                     || _NG:=sql('select sum(NG) NG from :_a where NB in (:_b) and NB not in (:_c)',
                            _tab,__RUB.sys_sql(15),__RUB.sys_sql(137)).NG;
                        _DG:=sql('select sum(DG) DG from :_a ',_tab).DG;
                        {? _NK=30
                        || {? _NG<_DG & N.NG
                           || {? _N_brutt<(KST.NK*H.WY*_proc)/_DG*N.NG$2
                              || _N_brutt:=(KST.NK*H.WY*_proc)/_DG*N.NG$2
                              ?}
                           || {? _N_brutt<(KST.NK*H.WY*_proc)/30*N.NK$2
                              || _N_brutt:=(KST.NK*H.WY*_proc)/30*N.NK$2
                              ?}
                           ?}
                        |? O.M=2
                        || {? ~N.NG
                           || {? _N_brutt<(KST.NK*H.WY*_proc)/30*N.NK$2
                              || _N_brutt:=(KST.NK*H.WY*_proc)/30*N.NK$2
                              ?}
                           || {? _N_brutt<(KST.NK*H.WY*_proc)/_DG*N.NG$2
                              || _N_brutt:=(KST.NK*H.WY*_proc)/_DG*N.NG$2
                              ?}
                           ?}
                        |? _N_brutt<(KST.NK*H.WY*_proc)/30*N.NK$2
                        || _N_brutt:=(KST.NK*H.WY*_proc)/30*N.NK$2
                        ?};
                        _brutto+=_N_brutt
                     ?}
                  ?}
               ?};
               N.next()
            !}
         ?};
         N.cntx_pop();
         _praca:=_godz-_Nieob-_minus
      ?};
      {? _praca+_url>0
      || _stawka:=(_brutto+_dodlist)/(_praca+_url);
         {? _cp='f' & (_chor>0 | _chorKal>0) & (_godz-_chor-_minus=_praca)
         || _potr:=0;
            N.cntx_psh();
            N.index('NIEOLSOD');
            N.prefix('N',P.ref,5+VAR.NAZWALIS);
            {? N.first
            || {!
               |? _potr+=N.POTR2+N.POTR3;
                  N.next
               !}
            ?};
            N.cntx_pop();
            _stawnom:=(_brutto+_dodlist)/(_praca+_url)+_potr/(_praca+_url+_chor);
            {? (_stawkamin-_stawnom)$2<=0
            || H.cntx_pop;
               return(0)
            || H.cntx_pop;
               return((_stawkamin-_stawnom)*(_praca+_url)$2)
            ?}
         ?};
         _wyrown:={? (_stawkamin-_stawka)$2>0 || (_stawkamin-_stawka)*(_praca+_url)$2 ?}
      ?}
   ?}
|| H.cntx_pop;
   return(0)
?};
H.cntx_pop;

_wyrown


\rd_zas_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Funkcja zwraca łączną kwotę zasiłków rodzinnych lub pielęgnacyjnych, które powinny być wypłacone danej osobie.
::       UWAGA: zmienić nazwę funkcj na rd_zas_kw
::   WE: _a - 'R' zasiłek rodzinny;
::            'P' zasiłek pielęgnacyjny.
::   WY:
::  OLD: \RD_zas/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR.JESTLIST & var_pres('_a')=type_of('') & _a<>'' & 'RP'*_a
|| _skl:={? _a='R' ||  539 ||  535 ?};
   _zas:=0;
   RD.index('_RODZINA');
   RD.prefix(P.OSOBA);
:  wylicz kwotę należnego zasiłku
   {? RD.first()
   || {!
      |? {? {? _a='R' || RD.KW || RD.ZP='T' ?}
         || {? exec('rd_zas','osoba',_a,date(O.R,O.M,1),date(O.R,O.M,0))
            || _zas+={? _a='R' || RD.KW || KST.Z4 ?}
            ?}
         ?};
         RD.next()
      !}
   ?};
:  sprawdź, czy zasiłki nie zostały
:  już wypłacone na innej liście płac
   {? _zas ||
      _pref:=P.ref;
      _lista:=O.ref;
      O.cntx_psh;
      O.index('LISTYPLA');
      O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,O.R,O.M);
      {? O.first()
      || {!
         |? {? FUNKCJE.CZY_POD()
            || FUNKCJE.OTWOLIST();
               LS.index('OSOBAKOD');
               LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_skl);
               {? LS.first()
               || {!
                  |? {? _lista<>O.ref | LS.P<>_pref
                     || _zas-=LS.KW
                     ?};
                     LS.next()
                  !};
                  {? _zas<0
                  || _zas:=0
                  ?}
               ?}
            ?};
            O.next()
         !}
      ?};
      O.cntx_pop();
      FUNKCJE.OTWOLIST()
   ?};
   _zas
?}


\nadplata_kor_zus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2006]
:: OPIS: Wyliczenie kwoty z korekt dla pracownika na biezacej liscie
::   WE: _a - 'S' lub 'P' oznacza skladke lub podstawe (wymagany)
::            jesli nie podany to domyslnie 'S' - skladka
::            jesli 'R' skladki tylko jesli ten sam rok podatkowy
::     : _b - ... numery skladnika w korektach tabeli KOR
::   WY: Wyliczona kwota nadplaty skladek emerytalno-rentowej rozliczona
::       na biezacej liscie plac
::  OLD: \nadplata/kor_zus.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of('') || _a:='S' ?};
_nadplata:=0;
KORN.cntx_psh;
KORN.index('KOR_NAGK');
KORN.prefix('L'+FUNKCJE.ZNLISTY(),P.ref,'T');
{? KORN.first
|| KOR.cntx_psh;
   KOR.index('KOR_PRN');
   {! _arg:=2.._
   |! {? type_of(_[_arg])=type_of(0) & _[_arg]>0
      || KORN.first;
         {!
         |? {? _a<>'R' | (_a='R' & KORN.RU=O.RU)
            || KOR.prefix(KORN.ref,_[_arg]);
               {? KOR.first
               || {!
                  |? _nadplata+={? _a='S' | _a='R' || fabs(KOR.SKL) || fabs(KOR.POD) ?};
                     KOR.next
                  !}
               ?}
            ?};
            KORN.next
         !}
      ?}
   !};
   KOR.cntx_pop
?};
KORN.cntx_pop;
_nadplata$2


\kwota_isplac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Okresla kwote swiadczenia, ktora ma byc uwzgledniona na liscie plac. Zaklada sie, ze: lista plac jest okreslona
::       pracownik jest okreslony. Dane pobierane sa wylacznie z tabel modulu swiadczen bez uwzglednienia zawartosci
::       list plac.
::   WE: _a.._? - kolejno podawane kody składnikow
::   WY: kwota swiadczenia
::  OLD: \kwota/isplac.fml
::----------------------------------------------------------------------------------------------------------------------
: sumowanie dla wszystkich przekazanych kodów składników list płac
: nieprawidłowe wywołania - brak argumentów
{? ~_ || return(0) ?};
: czy są jakiekolwiek świadczenia dla osoby
: nie wykonuj wtedy całej dość kosztownej reszty
IS_WYPL.cntx_psh;
IS_WYPL.index('RUBRYKA');
IS_WYPL.prefix(P.OSOBA);
{? ~IS_WYPL.first
|| IS_WYPL.cntx_pop;
   return(0)
?};

_kwota:=0;
_od:=date(O.R,O.M,1);
_do:=date(O.R,O.M,0);
_msc:=5+VAR.NAZWALIS;
_zab_lt:=exec('nie_lista_isplac','lista_licz');

_ref_p:=P.ref();
P.cntx_psh();
P.index('PRACOSOB');
P.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,P.OSOBA);
{? P.first() & P.size()>1
|| {? +O.T().K || _kryt_l:=O.T().K || _kryt_l:='1' ?};
   _ok:=1;
   {!
   |? {? ($_kryt_l)() & P.DZA<=_do & (P.DZ=date(0,0,0) | _od<=P.DZ)
      || _ref_p:=P.ref(); _ok:=0
      ?};
      P.next() & _ok
   !}
?};
P.cntx_pop();

IS_DEF.cntx_psh;
IS_DEF.index('RN');

{! _arg:=1.._
|! {? type_of(_[_arg])=type_of(0) & _[_arg]>0
:     swiadczenia wystepujace na listach plac okreslonym kodem
:     UWAGA - moze ich przypadac kilka na jeden skladnik listy
   || IS_WYPL.prefix(P.OSOBA,__RUB.ref(_[_arg]));
      {? IS_WYPL.first
      || {!
         |? {? _od<=IS_WYPL.DO & IS_WYPL.OD<=_do & _ref_p=P.ref()
            || {? IS_WYPL.LT=''
               || {? IS_WYPL.IS_DEF().OSOBA='T'
                  || IS_WYPL.LT:=VAR.NAZWALIS
                  || IS_WYPL.LT:=_zab_lt
                  ?};
                  IS_WYPL.put;
                  IS_WYPL.first
               |? IS_WYPL.MIES='T'
               || IS_ROZL.index('LISTA');
                  IS_ROZL.prefix(IS_WYPL.ref);
                  _loop:=IS_ROZL.first;
                  {!
                  |? _loop & IS_ROZL.P=null
                  |! _kw:=IS_ROZL.KW;
                     _ref:=IS_ROZL.ref;
                     {? IS_ROZL.LT=VAR.NAZWALIS
                     || {? IS_ROZL.find_key(P.ref,VAR.NAZWALIS)
                        || IS_ROZL.KW+=_kw;
                           IS_ROZL.put;
                           {? IS_ROZL.seek(_ref)
                           || IS_ROZL.del
                           ?}
                        || IS_ROZL.P:=P.ref;
                           IS_ROZL.put
                        ?};
                        _loop:=IS_ROZL.first
                     || _loop:=IS_ROZL.next
                     ?}
                  !};
                  IS_ROZL.prefix(IS_WYPL.ref,P.ref);
                  {? IS_ROZL.first
                  || {!
                     |? {? IS_ROZL.LT=''
                        || IS_ROZL.LT:=VAR.NAZWALIS;
                           IS_ROZL.D:=_do;
                           _kw:=IS_ROZL.KW;
                           IS_ROZL.cntx_psh;
                           IS_ROZL.index('DATA');
                           IS_ROZL.prefix(IS_WYPL.ref,_do,VAR.NAZWALIS);
                           {? IS_ROZL.find_key(P.ref)
                           || IS_ROZL.KW+=_kw;
                              IS_ROZL.put;
                              IS_ROZL.cntx_pop;
                              IS_ROZL.del
                           || IS_ROZL.cntx_pop;
                              IS_ROZL.put
                           ?};
                           IS_ROZL.first
                        ?}
                     !}
                  ?};
                  IS_WYPL.next
               ?}
            || IS_WYPL.next
            ?}
         !}
      ?};

      _loop:=IS_WYPL.first;
      {!
      |? _loop
      |! {? _od<=IS_WYPL.DO & IS_WYPL.OD<=_do & _ref_p=P.ref()
         ||
:           lista zgodna z okresem wyplat
            {? IS_WYPL.IS_DEF().OSOBA='T'
:              swiadczenie dla osoby
            || {? IS_ROZL.index('LISTA');
                  IS_ROZL.prefix(IS_WYPL.ref,P.ref);
                  IS_ROZL.find_key(VAR.NAZWALIS)
               ||
:                 rozliczenie na biezacej liscie
                  _kwota+=IS_ROZL.KW

               |? IS_ROZL.index('DATA');
                  IS_ROZL.prefix(IS_WYPL.ref,_do);
                  (IS_WYPL.LT=VAR.NAZWALIS | IS_WYPL.LT=_zab_lt) &
                  ~IS_ROZL.find_key(_msc)
               ||
:                 brak rozliczenia w miesiacu
                  IS_ROZL.index('LISTA');
                  _ref:=P.ref;
                  P.cntx_psh;
                  P.index('PRACOSOW');
                  P.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
                  _loop:=P.first;
                  _jest:=0;
                  {!
                  |? _loop & ~_jest
                  |! IS_ROZL.prefix(IS_WYPL.ref,P.ref);
                     {? P.ref<>_ref & IS_ROZL.find_key(_msc)
                     || _jest:=1
                     ?};
                     _loop:=P.next
                  !};
                  P.cntx_pop;
                  {? ~_jest
                  || IS_ROZL.prefix;
                     IS_ROZL.blank;
                     IS_ROZL.D:=_do;
                     IS_ROZL.P:=P.ref;
                     IS_ROZL.LT:=VAR.NAZWALIS;
                     {? IS_ROZL.add
                     || _kwota+=IS_ROZL.KW
                     ?}
                  ?}
               ?}

            ||
:              swiadczenia dla pracownika
               IS_ROZL.index('LISTA');
               IS_ROZL.prefix(IS_WYPL.ref,P.ref);
               {? IS_ROZL.find_key(VAR.NAZWALIS)
:                 jest wyplata dla listy, ale moze ich byc kilka
               || IS_ROZL.prefix(IS_WYPL.ref,P.ref,VAR.NAZWALIS);
                  _loop:=IS_ROZL.first;
                  {!
                  |? _loop
                  |! _kwota+=IS_ROZL.KW;
                     _loop:=IS_ROZL.next
                  !}
               |? (IS_WYPL.LT=VAR.NAZWALIS | IS_WYPL.LT=_zab_lt) &
                  ~IS_ROZL.find_key(_msc)
:                 brak wyplaty w miesiacu
:                 dopisz rozliczenie
               || IS_ROZL.blank;
                  IS_ROZL.D:=_do;
                  IS_ROZL.P:=P.ref;
                  IS_ROZL.add;
                  _kwota+=IS_ROZL.KW
               ?}
            ?}
         ?};
         _loop:=IS_WYPL.next
      !}
   ?}
!};

IS_WYPL.cntx_pop;
IS_DEF.cntx_pop;

_kwota


\licz_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [12.30]
:: OPIS: Formuła do rozliczenia delegacji na liście płac
::   WE: _a - kod rubryki
::   WY: _val - obliczona kwota
::  OLD: \licz/licz_del.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=0;
TYPOBIEG.cntx_psh();
TYPOBIEG.index('UNIK');
TYPOBIEG.prefix('Obieg delegacji','Obieg delegacji');
{? TYPOBIEG.first()
|| SLO.cntx_psh();
   WAL.cntx_psh();
   EDOKUM.cntx_psh();
   EDOKUMD.cntx_psh();
   EDOK_ZAL.cntx_psh();
   SKL_PLD.cntx_psh();
   SKL_PLD.index('RUB2');
   SKL_PLD.prefix(_a);
   {? SKL_PLD.first()
   || {!
      |? _rkwot_kod:=SKL_PLD.RKWOT().KOD;
         _refsql:=$P.ref();
         {! _ii:=0..1
         |! {? exec('szuk_okr','okresy',date(O.R-_ii,O.M,1))
            || _r:=($(ROZNE.UT_OKROD().ROK().POCZ_ROK~1))+2;
               EDOKUM.use('skid_v'+_r);
               EDOKUMD.use('bdiety'+_r);
               EDOKUMP.use('skidpu'+_r);
               EDOK_ZAL.use('edokzl'+_r);
               EDOKUM.index(EDOKUM.ndx_tmp(,1,'REFPRAC',,,'TYPOBIEG',,,'TYP','CZY_PLAN',,'GPL',,,'DATA_OD',,));
               EDOKUM.prefix(_refsql,TYPOBIEG.ref(),1,1);
               {? EDOKUM.first()
               || {!
                  |? {? (EDOKUM.REFLISTA='' | EDOKUM.REFLISTA=$O.ref()) &
                        EDOKUM.DATA_OD<=date(O.R,O.M,0) & EDOKUM.ZAM<>'T'
                     || EDOKUMD.index('DELEG');
                        EDOKUMD.prefix(EDOKUM.ref());
:: Dla rozliczenia delegacji walutowej przyjęto kurs z dnia roboczego poprzedzającego datę kursu z nagłówka listy płac
                        {? EDOKUMD.first()
                        || {? EDOKUMD.WAL().SYM<>'PLN'
                           || {? O.DKURS=#0
                              || FUN.emsg(
                                    'Lista %1: brak daty kursu waluty, potrzebnego do rozliczenie delegacji.'@[~O.LT]+
                                    '\n'+
                                    'Proszę uzupełnić brakującą informację i powtórzyć obliczenia.'@
                                 );
                                 _kurs:=0
                              || _kurs:=exec('waluta_kurs','!ppl_pll_nals',
                                    exec('dzienRob','kalendarz',O.DKURS-1,1,1,0,-1),
                                    EDOKUMD.WAL().SYM
                                 )
                              ?}
                           || _kurs:=1
                           ?};
                           {!
                           |? {? _rkwot_kod='DIE'
                              || _val+=(_kurs*EDOKUMD.KWOTA_W)$2
                              |? _rkwot_kod='RYN'
                              || _val+=(_kurs*EDOKUMD.RYCZ_NOC)$2
                              |? _rkwot_kod='RYK'
                              || _val+=(_kurs*EDOKUMD.RYCZ_DOJ)$2
                              |? _rkwot_kod='PLO'
                              || _val+=(_kurs*EDOKUMD.KWOTA_L)$2
                              ?};
                              EDOKUMD.next()
                           !}
                        ?};
                        {? _rkwot_kod='WAP'
                        || EDOKUMP.index('CHRONO');
                           EDOKUMP.prefix(EDOKUM.ref());
                           {? EDOKUMP.first()
                           || {!
                              |? _val+=EDOKUMP.WARTOSC$2;
                                 EDOKUMP.next()
                              !}
                           ?}
                        ?};
                        EDOK_ZAL.index('ROZLICZ');
                        EDOK_ZAL.prefix(EDOKUM.ref(),'W',1);
                        {? EDOK_ZAL.first()
                        || {!
                           |? {? _rkwot_kod='WDB' | _rkwot_kod='WDN'
                              || _val+=exec('edok_zal_pln','obiegi')
                              ?};
                              EDOK_ZAL.next()
                           !}
                        ?};
                        EDOKUM.REFLISTA:=$O.ref();
                        EDOKUM.put()
                     ?};
                     EDOKUM.next()
                  !}
               ?};
               EDOKUM.ndx_drop()
            ?}
         !};
         SKL_PLD.next()
      !}
   ?};
   SKL_PLD.cntx_pop();
   EDOKUM.cntx_pop();
   EDOKUMD.cntx_pop();
   EDOK_ZAL.cntx_pop();
   WAL.cntx_pop();
   SLO.cntx_pop()
?};
TYPOBIEG.cntx_pop();
_val


\zalicz_wplata_komornik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Rozliczenie zaliczki na liscie plac
::   WY: Wartosc zaliczki
::  OLD: \zalicz_wplata/komornik.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;

_firma:=O.FIRMA;

ZALICZ.index('ZALPRACO');
ZALICZ.prefix(_firma,OSOBA.ref(),P.ref(),O.ref());

{? ZALICZ.first()
|| {!
   |? {? ZALICZ.A='T'
      || _wynik+=ZALICZ.KW;
         ZALICZ.next()
      ?}
   !}
?};

ZALICZ.prefix(_firma,OSOBA.ref(),null());
{? ZALICZ.first()
|| _tab:=tab_tmp(1,'REF','INTEGER',);
   {!
   |? {? ZALICZ.R=O.R & ZALICZ.M=O.M & ZALICZ.A='T'
      || _wynik+=ZALICZ.KW;
         _tab.REF:=#ZALICZ.ref();
         _tab.add()
      ?};
      ZALICZ.next()
   !};
   {? _tab.first()
   || ZALICZ.clear();
      {!
      |? {? ZALICZ.seek(_tab.REF,)
         || ZALICZ.P:=P.ref();
            ZALICZ.O:=O.ref();
            ZALICZ.LT:=~O.LT;
            ZALICZ.put()
         ?};
         _tab.next()
      !}
   ?}
?};
_wynik


\podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenia dotyczące podstawy składek (umowy o pracę).
::   WE:
::   WY:
::  OLD: \podst_sk/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
exec('skl_zlec_podst_sk','zlec_rh');
DoList.p[11]:=DoList.p[12]:=0;

:: Jeżeli nie ma nic na liście do wyliczenia zwracane jest 0
_podstPar:=exec('podstawa_par','oddelegowanie',,100713);
_podstPar.OBIEKT:=1;
_podstPar.BEZ_DIET:=0;
_podstawaSk:=exec('podstawa_sk','oddelegowanie','.ZUS',753,,_podstPar);
obj_del(_podstPar);
_pod_zus:=_podstawaSk.podstawa;
_diety:=_podstawaSk.diety;
_zwrotyDoDol:=_podstawaSk.zwrotyDoDol;
obj_del(_podstawaSk);
{? _pod_zus=0
|| {? ~(_zwrotyDoDol<>0 & FUNKCJE.LU_SYS(56111)<>0)
   || return(0)
   ?}
?};

_suma_pod:=exec('spr_blok_podst_sk','lista_licz',P.OSOBA);
{? type_of(_suma_pod)=type_of('') & _suma_pod='T'
|| return(0)
?};

:: Pomniejszenie/powiększenia pakiet mobilności i oddelegowania:
:: 261 - Personel: ewidencja i rozliczanie oddelegowania do pracy za granicą
{? PAR_SKID.get(261)='T'
:: 901111: Kwota zwrotów powiększająca podst. emeryt. i rent.
|| _zwrotyKierDoliczone:=FUNKCJE.LU_SYS(901111)+DoList.k[32];
:: 56111: Podstawa Emerytalno-Rentowa
   _sumaPodst:=FUNKCJE.LU_SYS(56111)+DoList.k[1]-_zwrotyKierDoliczone;
:: Pomniejszenie podstawy o diety (do wysokości przeciętnego):
   {? _pod_zus>0 & _diety & (_sumaPodst+_pod_zus)>KST.PRGWYN
   || {? (_sumaPodst+_pod_zus-_diety)<KST.PRGWYN
      || _podstawaNew:=KST.PRGWYN-_sumaPodst;
         _diety:=_pod_zus-_podstawaNew;
         _pod_zus:=_podstawaNew
      || _pod_zus-=_diety
      ?};
::    9016 Kwota diet pomniejszająca podstawę emeryt. i rent. --> 7191 OZ: Pom. p. em.i re.
      FUNKCJE.LK_SYS(9016,,_diety)
   || _diety:=0;
      FUNKCJE.LK_SYS(9016,,0)
   ?};

:: Powiększenie podstawy o zwroty kierowcy (jeśli podstawa mniejsza niż prognozowane przeciętne):
:: 9016 Kwota diet pomniejszająca podstawę emeryt. i rent. --> 7191 OZ: Pom. p. em.i re.
   _dieOdli:=FUNKCJE.LU_SYS(9016)+DoList.k[25];
   _par601:=exec('get_par','#parametr',601,,1);
:: 601 - Personel: Pakiet mobilności - sposób obliczania podstawy do porównania z przeciętnym wynagrodzeniem.
::    D - w pierwszej kolejności pomniejszaj o diety
::    G - liczenie od globalnej kwoty przychodu
   _porownanie:=
      {? _par601='D'
      || _sumaPodst+_pod_zus
      || _sumaPodst+_dieOdli+_pod_zus+_diety
      ?};
   {? _porownanie<=KST.PRGWYN
   || FUNKCJE.LK_SYS(901111,,_zwrotyDoDol);
      _pod_zus+=_zwrotyDoDol
::    Były poprzednio jakieś zwroty doliczone do podstawy, a podstawa w ujęciu miesiące jest już większa niż przeciętne
::    należy teraz je odjąć te doliczniea od podstawy na obecnej liście:
   |? _zwrotyKierDoliczone>0
   || FUNKCJE.LK_SYS(901111,,_zwrotyKierDoliczone*(-1));
      _pod_zus-=_zwrotyKierDoliczone
   || FUNKCJE.LK_SYS(901111,,0)
   ?}
?};

: ┌──────────────────────────────────────────────────┐
: │                   UWAGA!                         │
: │ W celu przyspieszenia wyliczeń, w formule        │
: │ rachunki wyliczane są również  kwoty zwolnionego │
: │ dochodu i zaniechanego podatku z RH. Wynik w     │
: │ w DoList.p[11] i DoList.p[12]                    │
: └──────────────────────────────────────────────────┘
_kw_wsk:=0;
{? type_of(_suma_pod)=type_of(0)
|| _kw_wsk:=_suma_pod;
   _suma_pod+=exec('rachunki_podst_sk','lista_licz',P.OSOBA,O.RU,O.MU)
?};

:  odjecie wartosci korekty
{? _pod_zus<0 & (FUNKCJE.L(100,102)+FUNKCJE.L(105,107)+FUNKCJE.L(110))<0
|| _suma_pod+=exec('kor_zus_podst_sk','!ppl_pll_nals');
   _pod_zus+=exec('bl_przek','!ppl_pll_nals')
?};

{? O.RU<>O.RP | O.MU<>O.MP | type_of(_suma_pod)<>type_of(0)
|| exec('rachunki_podst_sk','lista_licz',P.OSOBA,O.RP,O.MP)
?};

:'*** sprawdzenie podstawy ***';
{? type_of(_suma_pod)=type_of(0) & -KST_PAR.AUT_BLOK='t'
|| {? (_limit:=KST.SK)>0
   || _suma_pod+=exec('kart_zus_podst_sk','lista_licz',O.RU,O.MU);
      _suma_pod+=FUNKCJE.LU_SYS(56111,0)+FUNKCJE.LU_SYS(56121,0)+FUNKCJE.L_SYS(56121)+FUNKCJE.LU_SYS(56131,0);
::    Do wyliczenia podstawy nie uwzględniamy ewentualnej korekty zasiłku macierzyńskiego
      _suma_pod-=FUNKCJE.L_SYS(56122);

: W przypadku przesuniecia miesiecy rozliczeniowego i ubezpieczeniowego listy nalezy sprawdzic czy w miesiacy kosztowym
: listy nie ma niezamknietych list z tym samym miesiacem kosztowym i ubezpieczeniowym
: jesli takie listy wystepuja nalezy podstawy dodac do obliczen
      {? O.MU<>O.M
      || _ref:=O.ref();
         O.cntx_psh();
         LS.cntx_psh();
         O.index('LISTYPLA');
         O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.P,O.R,O.M);
         {? O.first()
         || _licz_ls:="
               LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA,_a);
               _wyn:=0;
               {? LS.first()
               || {!
                  |? _wyn+=LS.KW;
                     LS.next()
                  !}
               ?};
               _wyn
            ";
            {!
            |? {? FUNKCJE.CZY_POD()
               || {? O.ref()<>_ref & O.Z<>'T' & O.MU=O.M
                  || LS.use(O.LT);
                     LS.index('OSOBAKOD');
                     LS.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
                     {? LS.first()
                     || _suma_pod+=_licz_ls(753);
                        _suma_pod+=_licz_ls(970);
                        _suma_pod+=_licz_ls(973)
                     ?}
                  ?}
               ?};
               O.next()
            !}
         ?};
         O.cntx_pop();
         LS.cntx_pop()
      ?};

      {? _suma_pod+{? _pod_zus<0 || _pod_zus ?}>=_limit
      || _pod_zus:=0;
         _auto_bl:=1
      || _auto_bl:={? _suma_pod+_pod_zus>=_limit || _pod_zus:=_limit-_suma_pod; 1 ?}
      ?};
      {? _auto_bl || exec('zablokuj_podst_sk','lista_licz',P.OSOBA,,_kw_wsk) ?}
   || RAPLS.msg('','','','Brak informacji "Maksymalny wymiar składek" w stałych systemu.'@)
   ?}
?};

_pod_zus$2


\skl_zlec_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenia dotyczące podstawy składek (umowy cywilnoprawne).
::UWAGA: Formuła przeniesiona do zlec_rh.fml
::   WE:
::   WY:
::  OLD: \skl_zlec/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
exec('skl_zlec_podst_sk','zlec_rh')


\kor_zus_podst_sk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.10]
:: OPIS: Zliczenie korygowanej placy zasadniczej dla miesiecy w ktorych nie ma naliczonej podstawy ER.
::   WE:
::   WY:
::  OLD: \kor_zus/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
KORN.index('KOR_NAGK');
KORN.prefix(~O.LT,P.ref,'N',null);
KOR.index('KOR_PRN');
KU.index('KARTAUB');
KU.prefix(P.FIRMA,P.OSOBA);
N.index('NIEOBECL');
N.prefix('N',P.ref,~O.LT);
_wyn:=0;
{? KORN.first()
|| {!
   |? {? N.first()
      || {!
         |? {? N.OD<date(O.R,O.M,1) & KU.find_key(N.OD~1,N.OD~2) & KU.S1=0 & KORN.ROK=N.ROK & KORN.MC=N.MC
            || _wyn+=N.POTR1+N.POTR2+N.POTR3
            ?};
            N.next
         !}
      ?};
      KORN.next
   !}
?};
_wyn


\oblicz_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wyliczenia dotyczące podatku dochodowego.
::   WE:
::   WY:
::  OLD: \oblicz/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
DoList.d[1]:=DoList.d[2]:=DoList.d[3]:=0;
DoList.p[1]:=DoList.p[2]:=DoList.p[3]:=0;
DoList.p[4]:=DoList.p[5]:=DoList.p[6]:=0;
DoList.p[7]:=DoList.p[8]:=DoList.p[16]:=DoList.p[17]:=DoList.p[19]:=0;

_new:=FUNKCJE.PL_NEW & O.RP=2022;

: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku
exec('wyk_ul_podatek','lista_licz',O.RP,O.MP,P.OSOBA);

_LT_doch:=0;
{? FUNKCJE.PODATEK
|| _LT_doch+=FUNKCJE.LP_SYS(9032)+FUNKCJE.LP_SYS(9033);
   DoList.p[8]+=_LT_doch;
:: Jeżeli miesiąc z przekroczeniem progu oraz bieżąca lista nie jest ostatnią obliczoną dla osoby związanej z bieżącym
:: pracownikiem, to zasygnalizujmy konsekwencje nieprawidłowej kolejności obliczeń.
   {? (FUNKCJE.L_SYS(9033)+FUNKCJE.LP_SYS(9033))>0 & (FUNKCJE.L_SYS(9032)+FUNKCJE.LP_SYS(9032))>0
       & exec('last_ls4p','!ppl_pll_nals',P.ref(),O.ref())=0
   || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
         'Nieprawidłowa kolejność obliczeń.\n'
         'Na bieżącej liście płac istnieją naliczenia (związane z innym etatem pracownika),\n'
         'w których uwzględniane były składniki bieżącego etatu.\n'
         'Należy zweryfikować naliczenia dla wszystkich etatów pracownika.'@
      )
   ?}
?};

: DoList.p[11] i DoList.p[12] wyliczone w podst_sk jako suma zwolnionego
: dochodu i zaniechanego podatku z umów zleceń
DoList.p[6]+=DoList.p[11];  DoList.p[7]+=DoList.p[12];
_ulga_1_prog:={? DoList.p[19]>0 || DoList.p[19] ?};
: *** dochód do obliczenia procentu zaliczki ***
{? DoList.p[8]>0
|| DoList.d[1]:=
      {? DoList.p[8]-DoList.p[4]-DoList.p[16]-_ulga_1_prog>=0
      || DoList.p[8]-DoList.p[4]-DoList.p[16]-_ulga_1_prog
      || 0
      ?}
|| DoList.d[1]:=DoList.p[8]
?};
_KU:=FUNKCJE.L_SYS(93);
: *** dochód do obliczenia zaliczki ***
DoList.d[3]:=(FUNKCJE.L_SYS(92)-_KU-FUNKCJE.L_SYS(9011)-FUNKCJE.L_SYS(9012)-FUNKCJE.L_SYS(9013)-
   FUNKCJE.L_SYS(9052))$2;

: *** dochód zwolniony ***
DoList.d[2]:={? DoList.p[4]=0 || 0
             |? (DoList.p[4]-DoList.p[6])>=DoList.d[3] || DoList.d[3]
             |? (DoList.p[4]-DoList.p[6])>0 || DoList.p[4]-DoList.p[6]
             || 0
             ?}$2;

:: Wyliczenie ulgi pierwszy próg
_ulga_1_prog:=_przychod:=_skl_e_r_c_w:=_przychod_KU:=0;
{? O.RP>2022
|| exec('rozlicz_del_pozycja','lista_licz',O.RP,O.MP,O.ref(),,'UZ_POD');
   {? DoList.p[19]>0
   || _dochod_wolny:=DoList.d[3]-DoList.d[2];
      _przychod_KU:=FUNKCJE.L(7200);
      _przychod:=_przychod_KU-_KU-FUNKCJE.L_SYS(9022);

      {? _dochod_wolny>0 & _przychod>0
      || {? DoList.p[19]>=_przychod
         || _ulga_1_prog:=_przychod
         || _ulga_1_prog:=DoList.p[19]
         ?};
         _skl_e_r_c_w:=FUNKCJE.L(765,767)-FUNKCJE.L_SYS(9026);
:: Wyliczenie składek ZUS przypadających na podstawę zwolnionego podatku
         _skl_e_r_c_w:=((_ulga_1_prog+_KU)/_przychod_KU*_skl_e_r_c_w)$2;
         {? _skl_e_r_c_w>0
         || FUNKCJE.LK_SYS(90813,,_skl_e_r_c_w)
         ?};
:: odpisanie wartości ulgi
         FUNKCJE.LK_SYS(90811,,_ulga_1_prog);
         exec('rozlicz_add','lista_licz','UZ_POD')

      ?}
   || FUNKCJE.LK_SYS(90811,,,1);
      FUNKCJE.LK_SYS(90813,,,1)
   ?}
|| FUNKCJE.LK_SYS(90811,,,1);
   FUNKCJE.LK_SYS(90813,,,1);
   DoList.p[19]:=0
?};

_odl_2:=FUNKCJE.LP_SYS(98)+FUNKCJE.LP_SYS(9052)+FUNKCJE.LP_SYS(90811);

_dochod_2:=(FUNKCJE.LP_SYS(9032)+FUNKCJE.LP_SYS(9033)-FUNKCJE.LP_SYS(9011)-FUNKCJE.LP_SYS(9012)-FUNKCJE.LP_SYS(9013))$2;

_p:=_p0:=0;
TP.index('TABPODAT');
TP.prefix(O.RP);
{? TP.first()
|| _p0:={? _new || 12 || TP.PR ?}
?};

{? P_IPOD.PROC>0 & (DoList.d[3]+FUNKCJE.L_SYS(9022))>0
|| _p:=P_IPOD.PROC
|| DoList.d[1]+=P_IPOD.PRZYCH
?};

_zw_prog:=_zw_proc:=_zw_pr2:=0;
{? FUNKCJE.PODATEK & ~_p
||
:: dla wyliczenia wg zasad opodatkowania z 2020roku
   {? DoList.d[3]+FUNKCJE.L_SYS(9022)>0
   || {? TP.first()
      ||
:: DoList.d[1] jest dochód łącznie z listami z bieżącego miesiąca które są pobrane do wyliczeń
         _p:={? TP.find_le(DoList.d[1]-_LT_doch) || {? _new & TP.PR=17 || 12 || TP.PR ?} || _p0 ?};
:: Weryfikacja obniżenia progu
         _bez_op:=1;
         {? P_IPOD.OP='T'
         || _p:=_p0;
            _bez_op:=0
         ?};
         {? _bez_op
         || TP.cntx_psh();
:: Następuje sprawdzenie czy jest kolejny próg podatkowy
            {? TP.next()
            ||
:: Sprawdzenie czy wartości z bieżącego miesiąca przekraczają kolejny próg
               {? DoList.d[1]-(_LT_doch)>=TP.K1
:: Jeżeli suma narastająca od początku roku z listami bieżącymi oraz zwolniony przychód przekracza próg
:: wtedy cały bieżący dochód jest w kolejnym progu
               || _zw_prog:=DoList.d[3]
               |? DoList.d[1]+DoList.d[3]>TP.K1
:: Jeżeli suma narastająca ze zwolnionym dochodem oraz bieżącym przekraczają próg
:: wtedy wartość dochodu z wyższym progiem jest różnicą tej sumy i wartości progu
               || _zw_prog:=DoList.d[1]+DoList.d[3]-TP.K1
               ?};
               {? _zw_prog
:: Jeżeli jest wartość w drugim progu to zapamiętaj procent
               || _zw_proc:=TP.PR
               ?}
            || _zw_pr2:=DoList.d[1]=TP.K1
            ?};
            TP.cntx_pop()
         ?}
      || RAPLS.msg('','','','Brak tabeli podatkowej za rok: %1.'@[$O.RP],
            'Należy uzupełnić dane w tabeli podatkowej i ponownie przeliczyć listę płac.'@)
      ?}
   ?}
|| {? ~_p & DoList.d[3]+FUNKCJE.L_SYS(9022)>0
   || TP.index('TABPODAT');
      TP.prefix(O.RP);
      {? TP.first()
      || _p:={? TP.find_le(DoList.d[1]) || {? _new & TP.PR=17 || 12 || TP.PR ?} || _p0 ?};
         {? P_IPOD.OP='T' & _p>_p0
         || TP.prev();
            _p:={? _new & TP.PR=17 || 12 || TP.PR ?}
         ?};
:: 17 procent podatku od października do grudnia 2019.
         {? O.RP=2019 & (_p=18 | _p=17)
         || {? date(O.RP,O.MP,1)>=date(2019,10,1)
            || _p:=17
            || _p:=18
            ?}
         ?}
      || RAPLS.msg('','','','Brak tabeli podatkowej w wybranym roku.');
         _p:=
            {? FUNKCJE.PL_NEW
            || 12
            |? date(O.RP,O.MP,1)>=date(2019,10,1)
            || 17
            |? O.RP>2008
            || 18
            || 19
            ?}
      ?}
   ?}
?};

_ulga_p2:=FUNKCJE.LP_SYS(94);
_ulga_dp2:=FUNKCJE.LP_SYS(9082);
_zw_doch_suma:=DoList.d[2];
{? _zw_proc
|| _prog_1:=_prog_2:=0;
:: Jeżeli wystapiło zwiększenie progu
   {? ~_zw_doch_suma
   || {? (DoList.d[3]>_zw_prog)
:: Jeśli Na bieżącej liście jest też pierwszy próg
      || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2;
:: Naliczamy wartość zaliczki dla pierwszego progu w całym miesiącu podatkowym
         DoList.p[1]:=_prog_1$0*_p*0.01;
:: Do drugiego progu wchodzi cała kwota z przekroczenia
         _prog_2:=_zw_prog;
:: Naliczenie całej zaliczki na podatek w miesiącu
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_ulga_p2;
         DoList.p[1]-=FUNKCJE.LP_SYS(95);
:: Pozostaje zaliczka dla bieżącej listy płac
         DoList.p[1]:=DoList.p[1]$2;
:: Jeżeli dochód z innych list jest ujemny należy go uwzględnić przy naliczeniu wartości dla pierwszego progu
         {? _LT_doch<0
         || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2
         || _prog_1:=(DoList.d[3]-_zw_prog)$2
         ?}
:: Jeśli Na bieżącej liście jest tylko drugi próg
      || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2;
:: Naliczamy wartość zaliczki dla pierwszego progu w całym miesiącu podatkowym
         DoList.p[1]:=_prog_1$0*_p*0.01;
         _prog_2:=_zw_prog;
:: Naliczenie całej zaliczki na podatek w miesiącu
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_ulga_p2;
         DoList.p[1]-=FUNKCJE.LP_SYS(95);
         DoList.p[1]:=DoList.p[1]$2;
:: Zerowanie wartości dla pierwszego progu dla bieżącej listy
         _prog_1:=0;
:: Wartością drugiego progu jest dochód z bieżącej listy
         _prog_2:=DoList.d[3];
:: W tej sytuacji procent podatku z wyższego progu jest wprowadzony w podstawowy składnik listy płac
         _p:=_zw_proc
      ?}
   || {? (DoList.d[3]+_LT_doch-_zw_doch_suma-_zw_prog>=0)
:: Jeśli pierwszy próg jest na tyle duży że może obsłużyć cały dochód zwolniony
      || _prog_1:=(DoList.d[3]+_LT_doch-_zw_doch_suma-_zw_prog);
         DoList.p[1]:=(_prog_1)$0*_p*0.01;
         _prog_2:=_zw_prog;
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_ulga_p2;
         DoList.p[1]-=FUNKCJE.LP_SYS(95);
         DoList.p[1]:=DoList.p[1]$2;
         {? _zw_prog>=DoList.d[3]
         || _prog_1:=0;
            {? _zw_doch_suma<=_LT_doch
            || _prog_2:=DoList.d[3]
            || _prog_2:=DoList.d[3]-(_zw_doch_suma-_LT_doch)
            ?}
         || {? _zw_doch_suma<=_LT_doch
            || _prog_1:=DoList.d[3]-_zw_prog;
               _prog_2:=_zw_prog
            || _ku_tmp:=(_zw_doch_suma-_LT_doch);
               _prog_1:=DoList.d[3]-_ku_tmp;
               _prog_2:=_zw_prog-_zw_doch_suma-_ku_tmp
            ?}
         ?}
:: Jeżeli jest jakakolwiek wartość w pierwszym progu należy pobrać  dochód zwolniony do tej wysokości
      || _prog_1:=0;
         _ku_tmp:=_zw_doch_suma-(DoList.d[3]+_LT_doch-_zw_prog);
         _prog_2:=(_zw_prog-_ku_tmp);
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_ulga_p2;
         DoList.p[1]-=FUNKCJE.LP_SYS(95);
         DoList.p[1]:=DoList.p[1]$2;
         {? _zw_prog>=DoList.d[3]
         || {? _zw_doch_suma<=_LT_doch
            || _prog_2:=DoList.d[3]
            || _prog_2:=DoList.d[3]-(_zw_doch_suma-_LT_doch)
            ?}
         || {? _zw_doch_suma<=_LT_doch
            || _prog_2:=_zw_prog
            || _ku_tmp:=(_zw_doch_suma-_LT_doch);
               {? DoList.d[3]-_ku_tmp>=_zw_prog
               || _prog_2:=_zw_prog
               || _prog_2:=DoList.d[3]-_ku_tmp
               ?}
            ?}
         ?}
      ?}
   ?};
:: Zapisywanie bądź ewentualne zerowanie wartości wykazywanych dla progów podatkowych
   {? _p<_zw_proc
   || FUNKCJE.LK_SYS(9031,,_zw_proc);
      FUNKCJE.LK_SYS(91,,_p)
   || FUNKCJE.LK_SYS(9031,,,1);
      FUNKCJE.LK_SYS(91,,_zw_proc)
   ?};
   {? _prog_1>0 || FUNKCJE.LK_SYS(9032,,_prog_1$2) || FUNKCJE.LK_SYS(9032,,,1) ?};
   {? _prog_2>0 || FUNKCJE.LK_SYS(9033,,_prog_2$2) || FUNKCJE.LK_SYS(9033,,,1) ?}
||
:: Jeżeli jest zwolniony przychód - należy sprawdzić czy zostało coś do opodatkowania
   {? _ulga_1_prog>0
   || DoList.p[1]:=0;
     {? _przychod>_ulga_1_prog
     ||
:: Odjęcie składek ZUS przypadających na podstawę zwolnionego podatku
        _ulga_1_prog-=_skl_e_r_c_w;
        DoList.d[3]:=DoList.d[3]-_ulga_1_prog;
        {? DoList.d[3]<0
        || DoList.d[3]:=0
        ?}
     || DoList.d[3]:=0
     ?}
   ?};
:: Jeżeli w naliczanym miesiącu nie było przekroczenia progu postepujemy wg zwykłych zasad zakładamy że
:: zaliczka na podatek na wszystkich listach została naliczona tym samym procentem podstawy
   {? FUNKCJE.PODATEK
   ||
:: Zapisywanie bądź ewentualne zerowanie wartości wykazywanych dla progów podatkowych
      {? _p>_p0
      || FUNKCJE.LK_SYS(9032,,,1);
         {? DoList.d[3]-_zw_doch_suma>0
         || FUNKCJE.LK_SYS(9033,,DoList.d[3]-_zw_doch_suma)
         || FUNKCJE.LK_SYS(9033,,,1)
         ?}
      || FUNKCJE.LK_SYS(9033,,,1);
         {? DoList.d[3]-_zw_doch_suma>0
         || FUNKCJE.LK_SYS(9032,,DoList.d[3]-_zw_doch_suma)
         || FUNKCJE.LK_SYS(9032,,,1)
         ?}
      ?};
:: Jeżeli jest tylko jedna wartość procentowa nie ma potrzeby odpisywania wartości w dodatkowym składniku płacowym
      FUNKCJE.LK_SYS(9031,,,1)
   ?};
   FUNKCJE.LK_SYS(91,,_p);
   DoList.p[1]:=0;
   {? _ulga_1_prog>0 & DoList.d[3]>0
   || DoList.p[1]:=(((DoList.d[3]+FUNKCJE.LP_SYS(9032)$0)*_p*0.01)-_ulga_p2)$2;
      DoList.p[1]-=FUNKCJE.LP_SYS(95)
   || DoList.p[1]:=((((DoList.d[3]+_dochod_2-_zw_doch_suma-_odl_2)$0)*_p*0.01)-_ulga_p2)$2;
      DoList.p[1]-=FUNKCJE.LP_SYS(95)
   ?}
?};

{? DoList.p[1]<0 || DoList.p[1]:=0 ?};
_ulga_pod:=_ulga_d_pod:=0;
{? DoList.p[1]
|| _param:=exec('wartosc','lista_par','BEZ_ULGI');
   {? O.RP>2022
   || {? (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?}) & exec('czy_prac','osoba',P.OSOBA,O.D)<>null()
      || {? ~DoList.p[19]
         || {? 'Z,N'*P_IPOD.UP
            || _ulga_pod+=exec('ulga_podatkowa_KST','lista_licz',P_IPOD.PU,O.D)
            ?}
         ?};
:: DoList.k[31] - UP - umowy zlecenia
         {? _ulga_pod>0
         || _ulga_pod-=(_ulga_p2+DoList.k[31]);
            {? _ulga_pod<0 | O.T().T='OTK' || _ulga_pod:=0 ?};
            {? _ulga_pod<DoList.p[1]
            || DoList.p[1]-=_ulga_pod
            || _ulga_pod:=DoList.p[1];
               DoList.p[1]:=0
            ?}
         ?};
         {? DoList.p[1]
         || {? 'Z,D'*P_IPOD.UP & exec('oblicz_wsprozl','lista_licz')>1
            || _ulga_d_pod:=KST.UL
            ?};
            {? _ulga_d_pod>0
            || _ulga_d_pod-=_ulga_dp2;
               {? _ulga_d_pod<0 | O.T().T='OTK' || _ulga_d_pod:=0 ?};
               {? _ulga_d_pod<DoList.p[1]
               || DoList.p[1]-=_ulga_d_pod
               || _ulga_d_pod:=DoList.p[1];
                  DoList.p[1]:=0
               ?};
               _ulga_pod+=_ulga_d_pod
            ?}
         ?}
      ?}
   || {?(O.RP>2021 | exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA))
      || _ulga_pod:=
            {? DoList.p[1]>0 & P_IPOD.UP<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
            || {? P_IPOD.UP='Z'
               || exec('oblicz_wsprozl','lista_licz')
               || 1
               ?}*KST.UL
            ?};
         _ulga_pod-=_ulga_p2;
         {? _ulga_pod<0 | O.T().T='OTK' || _ulga_pod:=0 ?};
         {? DoList.p[1]
         || {? _ulga_pod<DoList.p[1]
            || DoList.p[1]-=_ulga_pod
            || _ulga_pod:=DoList.p[1]; DoList.p[1]:=0
            ?}
         ?}
      || _ulga_pod:=0
      ?}
   ?}
?};
FUNKCJE.LK_SYS(94,,_ulga_pod);
FUNKCJE.LK_SYS(9082,,_ulga_d_pod);

DoList.d[5]:=
   {? _zw_doch_suma>0
   || {? FUNKCJE.PODATEK & _zw_proc
      || (_prog_1*_p*0.01)+(_prog_2*_zw_proc*0.01)-_ulga_pod
      || ((DoList.d[3]$0)*_p*0.01)-_ulga_pod
      ?}
   ?}$2;

{? DoList.d[5]<0 || DoList.d[5]:=0 ?};

DoList.p[5]-=DoList.p[7];
DoList.p[2]:={? DoList.p[5]<=0 || DoList.p[1]
             |? DoList.p[1]>DoList.p[5] || DoList.p[1]-DoList.p[5]
             || 0
             ?}$2;
DoList.p[3]:=(DoList.p[1]-DoList.p[2])$2;

{? FUNKCJE.L_SYS(92)=0 || DoList.p[1]:=0 ?};
DoList.p[1]$2


\rozl_rok_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Podatek - rozliczenie roku. Formula dla biezacego pracownika, na biezacej liscie rozlicza podatek wykazany na
::       PIT-40, a zapamietany w rekordzie tabeli PIT-12.
::       Podatek jest rozliczany w marcu. Na wniosek podatnika moze to byc kwiecien.
::       Jezeli pracownik zostal zwolniony w styczniu lub lutym, podatek powinien zostac rozliczony "ostatnia" lista.
::       Podstawa prawna:
::          Ustawa z dnia 26 lipca 1991 r. o podatku dochodowym od osob fizycznych (Dz.U. 1991 Nr 80 poz. 350)
::          Art. 37 ust. 4
::   WE:
::   WY: Tablica z elementami nazwanymi:
::          ROZLLT   - kwota podatku rozliczona na biezacej liscie.
::          ROZLGOT  - nadwyzka podatku, do zwrotu.
::  OLD: \rozl_rok/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_odp:=obj_new('ROZLLT','ROZLGOT');
_odp.ROZLLT:=_odp.ROZLGOT:=0;

:: Od roku 2018-go (po zmianie przepisów) rozliczenie roczne nie jest realizowane.
:: Podatek jest rozliczany w marcu. Na wniosek podatnika moze to byc kwiecien.
:: Jezeli pracownik zostal zwolniony w styczniu lub lutym, podatek powinien zostac rozliczony "ostatnia" lista.
{? O.RP>2017 | O.MP>4 || return(_odp) ?};

_d0:=date(0,0,0);

{? P.DZ=_d0 & O.MP<3 || return(_odp) ?};

_zwol:=P.DZ<>_d0 & P.DZ~1=O.R & P.DZ~2=O.M;

_pit12:=exec('pit12_get','osoba',P.OSOBA,O.RP-1);

{? _pit12.JEST<2 | _pit12.STATUS='W' |
   (_pit12.STATUS='R' & (_pit12.P<>P.ref() | _pit12.LT<>VAR.NAZWALIS)) |
   (~_zwol & ((_pit12.PODATEK<0 & O.MP<>3) | (_pit12.PODATEK>=0 & _pit12.MC<>O.MP)))
:: Podatek rozliczony na 0 traktowany jest jako niedoplata, zgodnie z logika wymagana przy e-Deklaracjach.
|| return(_odp)
?};

_rozllt:=_rozlgot:=0;
{? _pit12.PODATEK<0
:: Nadplata. Pokrywa zaliczke z biezacego miesiaca. Ewentualna nadwyzka jest wyplacana w "gotowce".
|| _zal:=FUNKCJE.L_SYS(961);
   {? _zal+_pit12.PODATEK<0
::    Nadplata przewyzsza zaliczke - nadwyzka w "gotowce".
   || _rozllt:=-_zal;
      _rozlgot:=_pit12.PODATEK-_rozllt
::    Nadplata jedynie obniza zaliczke
   || _rozllt:=_pit12.PODATEK
   ?}

|? _pit12.PODATEK>0
:: Niedoplata. Pobierana jest jednorazowo.
|| _rozllt:=_pit12.PODATEK
?};

_ret:=exec('pit12_set','osoba',P.OSOBA,O.RP-1,'R',P.ref(),VAR.NAZWALIS,_rozllt,_rozlgot);
{? _ret=''
|| _odp.ROZLLT:=_rozllt;
   _odp.ROZLGOT:=_rozlgot
|| RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,'Roczne rozliczenie podatku.\n'+_ret)
?};

_odp


\licz_ppa_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.41]
:: OPIS: Formula oblicza przychod z praw autorskich.
::   WE: _a - Typ stawki pracownika:
::             'f' - pracownik ze stawka godzinowa;
::             'u' - pracownik ze stawka miesieczna.
::   WY: Przychod z praw autorskich
::  OLD: \licz_ppa/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='f' | _a='u') || _typ:=_a || return(0) ?};
{? exec('wn_podat_exist','lista_licz',P.OSOBA,'KU_50%',O.D,'W','UM_PRAC') || return(0) ?};

_przych:=LICZ.Wylicz(,'.POD');
: Nie ma przychodu "calkowitego" - nie ma obliczen przychodu "autorskiego".
{? _przych<=0 || return(0) ?};

_kw:=0;
_dp:=date(O.R,O.M,1);
_dk:=date(O.R,O.M,0);

H.cntx_psh();
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_dk) & (H.DO=date(0,0,0) | _dp<=H.DO | O.RP>2022)
|| _pat:=H.PAT;
   _paw:=H.PAW
|| _pat:='N'
?};
H.cntx_pop();
{? _pat='N' || return(0) ?};

{? _pat='K'
|| _kw:=_paw;

   _zaokr:=PAR_SKID.get(240)='T';

   _mcgr:=exec('nominal','godziny',_dp,_dk,1);
:  Potracenia z tytulu nieobecnosci rozliczanych kalendarzowo.
   _dnk:=FUNKCJE.NK_SYS(151);
   {? _dnk
   || {? _dnk>=30 | _dnk>=_dk~3
      || _kw:=0
      || _kw-=_dnk*{? _zaokr || _paw/30$2 || _paw/30 ?}$2;
         {? _kw<0 || _kw:=0 ?}
      ?};
      {? _kw=0 & _dk~3=31
:        A moze przypadek szczegolny, w miesiacu 31d
      || _gnr:=FUNKCJE.NG_SYS(151);
         {? _mcgr & _gnr<_mcgr
         || _kw:=(_mcgr-_gnr)*{? _zaokr || _paw/_mcgr$2 || _paw/_mcgr ?}$2
         ?}
      ?}
   ?};
:  Potracenia z tytulu nieobecnosci rozliczanych roboczo:
:  - nieobecnosci i urlopy;
   _gnr:=FUNKCJE.NG_SYS(152)+FUNKCJE.NG_SYS(113);
:  - dni przed zatrudnieniem/po zwolnieniu oraz "nieobecnosci" (BOW) z przebiegu.
   _gnr+=exec('dnpzazw','nieobecnosc',_dp,_dk,'gr');
   {? _gnr
   || {? _mcgr
      || _kw-=_gnr*{? _zaokr || _paw/_mcgr$2 || _paw/_mcgr ?}$2;
         {? _kw<0 || _kw:=0 ?}
      ?}
   ?}

|? _pat='G' & FUNKCJE.L(7001)
:  Sa godziny na liscie - wartosc jest obliczona w rozliczeniu godzin (patrz plf_nadg.fml\plf_nadg).
|| G.cntx_psh();
   G.use('godz'+$O.R);
   G.index('CONTROL');
   G.prefix(P.ref(),O.M,'G',VAR.NAZWALIS,7001);
   {? G.first()
   || R_GODZ.cntx_psh();
      R_GODZ.use('rzg_'+$O.R);
      R_GODZ.index('R_GODZ');
      {!
      |? R_GODZ.prefix(G.ref(),'W',VAR.NAZWALIS,__RUB.ref(7002));
         {? R_GODZ.first() || {! |? _kw+=R_GODZ.KW; R_GODZ.next() !} ?};
         G.next()
      !};
      R_GODZ.cntx_pop()
   ?};
   G.cntx_pop()

|? _pat='P'
|| _kw:=FUNKCJE.L_SYS(9044);
   {? _typ='u'
   || _gnr:=FUNKCJE.NG_SYS(136);
      {? _gnr
      || N.cntx_psh();
         N.index('NIEOBECL');
         N.prefix('N',P.ref(),VAR.NAZWALIS,);
         {? N.first()
         || {!
            |? {? __RUB.sys_attr(N.NB,136)
               || _odp:=exec('potr_newzasad','!ppl_pll_nals',N.OD,N.DO,N.NG);
                  _kw-=_odp.S1;
                  obj_del(_odp)
               ?};
               N.next()
            !}
         ?};
         N.cntx_pop()
      ?}
   ?};
   _kw:=_kw*_paw/100$2
?};

_wynik:=
   {? _kw>0
   || {? _kw<=_przych
      || _kw
      || RAPLS.msg(
            P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
            'Kwota przychodu z tytułu praw autorskich (%1)\n'
            'została ograniczona do wysokości kwoty przychodu (%2).'@
            [form(_kw,,2,' .'),form(_przych,,2,' .')]
         );
         _przych
      ?}
   ?};
:: zwolnienie PA: Pzychod dla U26
_POZ_ALL:=FUNKCJE.LP_SYS(9022);
_POZ_ONE:=FUNKCJE.L_SYS(9022);
_POZ_ASK:=_POZ_ALL+_POZ_ONE>0;
{? _POZ_ASK
|| exec('przych_KU50_U26','lista_licz',_wynik)
|| _wynik
?}


\godz_zlak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2008]
:: OPIS: Zwraca sume godzin akordowych z tabeli G dla wybranej listy plac.
::       W przypadku, gdy znak listy jest pusty, zapisy uzupoełniane sa o znak
::       aktualnej listy plac
::  OLD: \godz/zlak.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=0;
G.cntx_psh();
G.use('godz'+$O.R);
G.index('MSCDKW');
G.prefix(P.ref(),O.M,'A');
{? G.first()
|| {!
   |? {? |G.LT=''
      || G.LT:=VAR.NAZWALIS;
         G.put()
      ?};
      {? G.LT=VAR.NAZWALIS
      || _val+=G.G
      ?};
      G.next()
   !}
?};
G.cntx_pop();
_val


\akord_zlak
::----------------------------------------------------------------------------------------------------------------------
::  UTW: ATA [2008]
:: OPIS: Zwraca sume wartosci kwot akordu z tabeli G dla wybranej listy plac.
::       W przypadku, gdy znak listy jest pusty, zapisy uzupoelniane sa o znak
::       aktualnej listy plac
::  OLD: \akord/zlak.fml
::----------------------------------------------------------------------------------------------------------------------
_val:=0;
G.cntx_psh();
G.use('godz'+$O.R);
G.index('MSCDKW');
G.prefix(P.ref(),O.M,'A');
{? G.first()
|| {!
   |? {? |G.LT=''
      || G.LT:=VAR.NAZWALIS;
         G.put()
      ?};
      {? G.LT=VAR.NAZWALIS
      || _val+=G.WAR
      ?};
      G.next
   !}
?};
G.cntx_pop();
_val


\chkDsTyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BK [12.41]
:: OPIS: Funkcja wywolywana podczas obliczenia listy płac - sprawdza rodzaj dyscypliny pracy
::       kontekst P oraz O musi być wcześniej ustawiony
::   WE: _a - numer rubryki nieobecności
::   WY: wykorzystany limit nieobecności w:
::       'G' - w godzinach roboczych
::       'R' - w dniach roboczych (domyślnie - jeżeli nie znajdzie zapisu w dyscyplinie pracy)
::       'K' - w danich kalendarzowych
::  OLD: \chkDsTyp/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(0) || return('R') ?};
DS.cntx_psh();
DS.index('DYSCYPLI');
DS.prefix(P.ref,O.R);
_ret:='R';
{? DS.find_key(__RUB.ref(_a))
|| _ret:=DS.NR
?};
DS.cntx_pop();
_ret


\waluta_kurs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKG [12.41]
:: OPIS: Formuła ustalająca kurs waluty dla rozliczenia delegacji
::   WE: _a - data kursu waluty
::       _b - waluta
::   WY: kurs waluty
::  OLD: \kurs/licz_del.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of('') | +_b<>3
|| FUN.emsg(
      'Lista %1 - brak oznaczenia waluty.'@[~O.LT]+'\n'+
      'Proszę uzupełnić brakującą informację w module delegacje i powtórzyć obliczenia.'@
   );
   return(0)
?};
SLO.cntx_psh();
SLO.index('SL');
SLO.prefix(KST_PAR.SLWAL,_b);
_waluta:={? SLO.first() || SLO.ref() || null() ?};
SLO.cntx_pop();
exec('czytaj','#stalesys',_a,XINFO,'BDEKRDEL','KURSTYPD');
{? XINFO.BDEKRDEL
|| exec('waluta_kurs','lista_licz',
      XINFO.BDEKRDEL,
      _a,
      _waluta,
      {? XINFO.KURSTYPD='K' || 1 |? XINFO.KURSTYPD='S' || 2 || 0 ?}
   )
|| FUN.emsg(
      'W parametrach obsługi delegacji nie zdefiniowano banku do dekretacji delegacji.'@+'\n'+
      'Proszę uzupełnić brakującą informację i powtórzyć obliczenia.'@
   ); 0
?}


\nagroda_jubileuszowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.42]
:: OPIS: Obliczenie kwoty nagrody jubileuszowej.
::   WE:
::   WY: _kwota - kwota nagrody jubileuszowej
::----------------------------------------------------------------------------------------------------------------------
_kwota:=0;
_ref:=P.ref();

:: Ustalenie czy uwzględniać pracownika do nagrody jubileuszowej.
GRUPPRAC.cntx_psh();
GRUPPRAC.index('PGROD');
GRUPPRAC.prefix(_ref,'NAG_JUB');
{? GRUPPRAC.first()
|| PAR_NJUB.cntx_psh();
   PAR_NJUB.index('PAR_NJUB');
   PAR_NJUB.prefix();
   {? PAR_NJUB.first()
   || _d0:=date(0,0,0);
      _dtw:=O.D;

:: Obliczenie stażu pracownika do nagrody jubileuszowej.
      _staz:=exec('oblicz','staz',1,,_dtw~1,,_dtw);
      _dts:=_dtw-_staz.dni[2];

:: Ustalenie czy nagroda jubileuszowa przysługuje do wypłaty.
      {? (PAR_NJUB.find_key(_staz.lat[2]) & ~_staz.msc[2])
         &
         (P.DZA<=_dts & (P.DZ=_d0 | P.DZ>=_dts))
         &
         (GRUPPRAC.find_le(_dts) & (GRUPPRAC.DO=_d0 | GRUPPRAC.DO>=_dts))
         &
         ~FUNKCJE.L(152,,0,1)
      || H.cntx_psh();
         H.index('_HISTKOD');
         H.prefix(_ref,'Z');
         {? (H.find_le(_dts) & (H.DO=_d0 | H.DO>=_dts))
         || _wyn_dts:=exec('hsx','lista_licz',_dts,_dts);
            _href:=H.ref();
            {? (H.find_le(_dtw) & (H.DO=_d0 | H.DO>=_dtw)) & H.ref()<>_href
            || _wyn_dtw:=exec('hsx','lista_licz',_dtw,_dtw)
            ?};

            {? var_pres('_wyn_dtw')>100
               &
               (_wyn_dtw[1]+_wyn_dtw[2]+_wyn_dtw[3]>_wyn_dts[1]+_wyn_dts[2]+_wyn_dts[3])
            || _wynagrodzenie:=exec('ekwiwalent_ppl','lista_licz','P',,_dtw)
            || _wynagrodzenie:=exec('ekwiwalent_ppl','lista_licz','P',,_dts)
            ?};
            _kwota:=_wynagrodzenie*PAR_NJUB.PROC/100$2
         ?};
         H.cntx_pop()
      ?}
   ?};
   PAR_NJUB.cntx_pop()
?};
GRUPPRAC.cntx_pop();

_kwota


\podstawa_nagrodajubileuszowa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [19.42]
:: OPIS: Obliczenie podstawy do nagrody jubileuszowej.
::   WE: _a [DATE] - data do obliczenia podstawy.
::   WY: Kwota podstawy nagrody jublileuszowej
::----------------------------------------------------------------------------------------------------------------------
_w:=0;
_dt:=_a;
_ile_mc:={? exec('Nalezy','grupprac','UR_EK_12',P.ref(),_dt) || 12 || 3 ?};
_i:=_l:=_w:=_d:=_z:=_k:=0;
_wsklnom:=0;
VAR_DEL.delete('d');
d:=obj_new(6);
{! _i:=1..6
|! d[_i]:=0
!};

N.cntx_psh();
N.index('NIEOBECL');
N.prefix('N',P.ref(),VAR.NAZWALIS);
_z:=(P.DZA~1)*12+P.DZA~2;
_k:=(O.R*12+O.M)-_z;

: ustalenie miesiąca początkowego
_l:=1;
_list_d:=date(O.R,O.M,1);
_l_pom:=0;
{? _dt<_list_d
|| _l_pom:=_l:=(_list_d~1*12+_list_d~2)-(_dt~1*12+_dt~2)+1;
   _l_pom-=1
?};
{? _l_pom>126
|| _l_pom:=_l:=126
?};
{? _k>126
|| _k:=126
?};

_stawka:=0;
_przeszer:=_dt;
_WY:=P.WY;
{? H.last()
|| {!
   |? {? H.OD>_przeszer
      || H.prev()
      ?}
   !};
   _umowa:=exec('hsx','lista_licz',_przeszer);
   _od:=H.OD;
   _wy:=H.WY;
   {!
   |? _hsx:=exec('hsx','lista_licz',_przeszer);
      _again:=
         {? _umowa.S1=_hsx.S1 & _umowa.S2=_hsx.S2 & _umowa.S3=_hsx.S3
         || _od:=H.OD;
            _wy:=H.WY;
            H.prev()
         ?};
      obj_del(_hsx);
      &_hsx;
      _again
   !};
   _przeszer:=_od;
   _WY:=_wy
|| _umowa:=obj_new('S1','S2','S3');
   _umowa.S1:=_umowa.S2:=_umowa.S3:=0
?};

{? H.find_le(date(O.R,O.M-_l_pom,0))
|| _wymiar:=H.WY;
   _c_p:=H.CP().S
|| _wymiar:=P.WY;
   _c_p:=P.CP().S
?};

_licznik:=0;

_nk:=exec('ust_nk','lista_licz',date(O.R,O.M,0),'NK');
_godz:=obj_new(8);

:: Sytuacja zatrudnienia i zwolnienia pracownika w tym samym miesiacu, lista z przesunieciem podatkowym
_bez_wyp:=0;
{? _l-_k=0
|| {? ~FUNKCJE.LP(100,,_l,_l,1,,1)
   || {? FUNKCJE.L(100,,_l,_l)
      || _bez_wyp:=1
      || _l:=_k:=0
      ?}
   ?}
?};

{! _i:=_l.._k
|? _d:=0;
   _Data:=date(O.R,O.M-_i,1);
:  start i stop
   d[1]:=date(O.R,O.M-_i,1);
   d[2]:=date(O.R,O.M-_i,0);
:  Sprawdzenie czy byla wyplata za miesiac obliczany
   _wyplata:=0;
   O.cntx_psh();
   LS.cntx_psh();
   O.index('LISTYPLP');
   O.prefix(exec('ref_firma','ustawienia'),P.F_ZATR().KOD,_Data~1,_Data~2);
   _first:=1;
   _lpod:=0;
   {? _i & O.first()
   || {!
      |? LS.use(O.LT);
         LS.index('PRACNRRU');
         LS.prefix(P.ref());
         {? LS.find_key(500)
         || {? LS.find_key(90) | LS.find_key(91)
            || _lpod:=1;
               {? _first
               || d[1]:=date(O.R, O.M, 1);
                  d[2]:=date(O.R,O.M, 0)
               ?};
               _first:=0;
               {? d[1]>(_pom:=date(O.R,O.M,1))
               || d[1]:=_pom
               ?};
               {? d[2]<(_pom:=date(O.R, O.M, 0))
               || d[2]:=_pom
               ?}
            ?};
            _wyplata:=1
         ?};
         O.next()
      !}
   |? _i=0
   || _wyplata:=1;
      _lpod:=1
   ?};
   LS.cntx_pop();
   O.cntx_pop();

   H.index('_HISTKOD');
   H.prefix(P.ref(),'Z');
   {? H.find_le(d[2])
   || _c_p_i:=H.CP().S
   || _c_p_i:=_c_p
   ?};

   {? _wyplata | _bez_wyp
   || exec('kal_prac','personel',d[1]~1);
      VAR_DEL.delete('dni');
      dni:=obj_new(3);
:     dni[1][_i] - nominał w godzinach
:     dni[2][_i] - nieobecność w godzinach
:     dni[3][_i] - zarejestrowany czas
      {! _lp1:=1 .. obj_len(dni)
      |! dni[_lp1]:=obj_new((d[2]-d[1]+1));
         {! _lp2:=1 .. d[2]-d[1]+1
         |! dni[_lp1][_lp2]:=0
         !}
      !};
      {! _lp2:=1 .. d[2]-d[1]+1
      |! dni[1][_lp2]:=exec('nominal','godziny',d[1]-1+_lp2,d[1]-1+_lp2,,,1)
      !};
      exec('licz_nt_urlop','lista_licz',d[1],d[2],1,dni[2]);
      exec('licz_gt_urlop','lista_licz',d[1],d[2],1,dni[3]);
:     ┌─────────────────────────────────────────────────┐
:     │             dni przepracowane                   │
:     └─────────────────────────────────────────────────┘
      d[3]:=0;
      {! _lp2:=1 .. d[2]-d[1]+1
      |! d[3]+=(dni[1][_lp2]-dni[2][_lp2]>0 | dni[3][_lp2]>0);
         d[6]+=dni[3][_lp2]>0 & ~__KAL.w_days(date(d[1]~1,d[1]~2,_lp2),date(d[1]~1,d[1]~2,_lp2))
      !};
:     ┌─────────────────────────────────────────────────┐
:     │            sumowanie nieobecnosci               │
:     └─────────────────────────────────────────────────┘
      _d:=0;
      {! _lp2:=1 .. (d[2]-d[1]+1)
      |! _d+=(dni[1][_lp2]<=dni[2][_lp2] & dni[2][_lp2]>0 & dni[3][_lp2]=0)
      !};
      _d+=exec('dnpzazw','nieobecnosc',d[1],d[2],'dr')
   || d[3]:=0
   ?};

   _podst:=0;
   _sklnom:=0;

   _godz[3]:=
      {? _i=0
      || FUNKCJE.L(57)
      |? _bez_wyp
      || FUNKCJE.L(57,,_i)
      || FUNKCJE.LP(57,,_i,,1,,1)
      ?};
   {? _godz[3]
   || {? _nk<>exec('ust_nk','lista_licz',d[2],'NK')
      || exec('kal_list','personel');
         _tab:=exec('tab_godz','lista_licz',_Data,1,_i=0 | _bez_wyp);
         _tab.prefix();
         {? _tab.first()
         || _pdgn:=20;
            _pr_noc:=exec('ust_nk','lista_licz',d[2],'PDGN');
            {? _pr_noc & _pr_noc>_pdgn
            || _pdgn:=_pr_noc
            ?};
            _pdgn:=_pdgn/100;
            {!
            |? _st:=(_nk/_tab.NOM)$2*_pdgn$2;
               _val:=_tab.GODZ*_st$2;
               _podst+=_val;
               _tab.next()
            !}
         ?};
         exec('kal_prac','personel',O.R);
         &_tab
      || _podst+=
            {? _i=0
            || FUNKCJE.L(122)
            |? _bez_wyp
            || FUNKCJE.L(122,,_i)
            || FUNKCJE.LP(122,,_i,,1,,1)
            ?}
      ?}
   ?};

   {? var_pres('_ekw_nom')>100 || obj_del(_ekw_nom) ?};
   _ekw_nom:=__RUB.sys_rub(432,d[2]);

   {? _przeszer>P.DZA & _przeszer>=d[1] & date(_przeszer~1,_przeszer~2,1)<=date(O.R,O.M,1)
   || _tab:=exec('tab_godz','lista_licz',_Data,,_i=0 | _bez_wyp,_WY);
      _tab.prefix();
      {? _tab.first()
      || {!
         |? {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p)) | (-(1+_c_p)='f')
            || _val:=0;
               _st1:=FUNKCJE.L(91);
               _st2:=FUNKCJE.L(92,94);
               {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11
               || _val+=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2;
                  _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                  _minimum:=_minimum*_tab.GODZ$2;
                  {? _tab.RODZ=10 | _tab.RODZ=11
                  || _val:=_val*0.6$2;
                     {? _val<_minimum*0.6$2
                     || _val:=_minimum*0.6$2
                     ?}
                  || {? _val<_minimum
                     || _val:=_minimum
                     ?}
                  ?}
               ?};
               {? _tab.RODZ=5 | _tab.RODZ=7 | _tab.RODZ=8
               || _val+=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=1 | _tab.RODZ=7
               || _val+=(_tab.GODZ*0.5)*_st1$2
               ?};
               {? _tab.RODZ=10
               || _val+=(_tab.GODZ*0.5)*_st1*0.6$2
               ?};
               {? _tab.RODZ=2 | _tab.RODZ=6 | _tab.RODZ=8
               || _val+=_tab.GODZ*_st1$2
               ?};
               {? _tab.RODZ=11
               || _val+=_tab.GODZ*_st1*0.6$2
               ?};
               {? _tab.RODZ=4
               || _val+=_tab.GODZ*(_st1+(_st2/_tab.NOM$2))$2+
                     _tab.GODZ*_st1$2
               ?};
               _podst+=_val
            || _val:=0;
               _st1:=FUNKCJE.L(90); _st2:=FUNKCJE.L(92,94);
               {? _tab.RODZ=1 | _tab.RODZ=2 | _tab.RODZ=10 | _tab.RODZ=11
               || _val+=(_tab.GODZ*((_st2+_st1)/_tab.NOM$2))$2;
                  _minimum:=exec('minkraj_komornik','lista_licz',date(_tab.ROK,_tab.MC,1),,1)$2;
                  _minimum:=_minimum*_tab.GODZ$2;
                  {? _tab.RODZ=10 | _tab.RODZ=11
                  || _val:=_val*0.6$2;
                     {? _val<_minimum*0.6$2 || _val:=_minimum*0.6$2 ?}
                  || {? _val<_minimum || _val:=_minimum ?}
                  ?}
               ?};
               {? _tab.RODZ=5 | _tab.RODZ=6 | _tab.RODZ=7 | _tab.RODZ=8
               || _val+=(_tab.GODZ*((_st2+_st1)/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=1 | _tab.RODZ=7
               || _val+=((_tab.GODZ*0.5)*(_st1/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=10
               || _val+=((_tab.GODZ*0.5)*(_st1/_tab.NOM$2)*0.6)$2
               ?};
               {? _tab.RODZ=2 | _tab.RODZ=6 | _tab.RODZ=8
               || _val+=(_tab.GODZ*(_st1/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=11
               || _val+=(_tab.GODZ*(_st1/_tab.NOM$2)*0.6)$2
               ?};
               {? _tab.RODZ=4
               || _val+=_tab.GODZ*((_st2+_st1)/_tab.NOM$2)$2+
                  (_tab.GODZ*(_st1/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=13 | _tab.RODZ=16
               || _val+=_tab.GODZ*((_st2+_st1)/_tab.NOM$2)$2
               ?};
               {? _tab.RODZ=12
               || _val+=(_tab.GODZ*(_st1/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=14
               || _val+=(_tab.GODZ*(_st1/_tab.NOM$2))$2
               ?};
               {? _tab.RODZ=15
               || _val+=(_tab.GODZ*(_st1/_tab.NOM$2))$2
               ?};

               _podst+=_val
            ?};
            _tab.next
         !}
      ?};
      &_tab;

      {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p)) | (-(1+_c_p)='f')
      || {? -(1+_c_p_i)='f' & (-(1+_c_p_i)=-(1+_c_p))
         || _lg:=
               {? _i=0
               || FUNKCJE.L(54)+FUNKCJE.L(63)+FUNKCJE.L(67)+FUNKCJE.L(48)
               |? _bez_wyp
               || FUNKCJE.L(48,,_i)+FUNKCJE.L(54,,_i)+FUNKCJE.L(63,,_i)+FUNKCJE.L(67,,_i)
               || FUNKCJE.LP(54,,_i,,1,,1)+FUNKCJE.LP(63,,_i,,1,,1)+FUNKCJE.LP(67,,_i,,1,,1)+FUNKCJE.LP(48,,_i,,1,,1)
               ?}
         || _Norma:=exec('nominal','godziny',d[1],d[2],,,1); _Nieob:=0;
            {? _Norma=0
            || RAPLS.msg(
                  P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
                  'Brak informacji o kalendarzu pracownika.'@,
                  exec('retry_msg','lista_licz')
               )
            ?};
            {? _Norma>0
            || _Nieob+=exec('licz_nie_wynchor','lista_licz',d[1],d[2],_Norma,,1)
            ?};
            _lg:=_Norma-_Nieob; {? _lg<0 || _lg:=0 ?}
         ?};
         _podst+=_lg*_umowa.S1$2
      ?};
      {? H.find_le(d[2])
      || _hsx:=exec('hsx','lista_licz',d[2]);
         _s1:=_hsx.S1;
         _s2:=_hsx.S2;
         _s3:=_hsx.S3;
         obj_del(_hsx);
         &_hsx
      || _s1:=_s2:=_s3:=0
      ?};
      {? _ekw_nom.first()
      || R.cntx_psh();
         R.prefix();
         {!
         |? {? R.seek(_ekw_nom.R) & R.EKW='T'
            || {? _i=0
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN)
               ?};
               {? _bez_wyp
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,_i)
               || _sklnom+=FUNKCJE.LP(_ekw_nom.RN,,_i,,1,,1)
               ?}
            ?};
            _ekw_nom.next()
         !};
         R.cntx_pop()
      ?};
      _podst+=LICZ.Wylicz(_i,'.EKW',,,_s1,_umowa.S1,_s2,_umowa.S2,_s3,_umowa.S3,1,_bez_wyp);
      {? _i=0
      || _podst+=LICZ.Wylicz(,'.EKW',,,_s1,_umowa.S1,_s2,_umowa.S2,_s3,_umowa.S3,1)
      ?};
      _podst-=_sklnom
   || _podst+=
         {? _i=0
         || FUNKCJE.L(120,121)+FUNKCJE.L(123)+FUNKCJE.L(125,126)+
            FUNKCJE.L(7040,7040)+FUNKCJE.L(7050,7050)+FUNKCJE.L(7052,7052)+FUNKCJE.L(7054,7054)+FUNKCJE.L(7058,7058)
         |? _bez_wyp
         || FUNKCJE.L(120,121,_i)+FUNKCJE.L(123,,_i)+FUNKCJE.L(125,126,_i)+
            FUNKCJE.L(7040,7040,_i)+FUNKCJE.L(7050,7050,_i)+FUNKCJE.L(7052,7052,_i)+FUNKCJE.L(7054,7054,_i)+
            FUNKCJE.L(7058,7058,_i)
         || FUNKCJE.LP(120,121,_i,,1,,1)+FUNKCJE.LP(123,,_i,,1,,1)+FUNKCJE.LP(125,126,_i,,1,,1)+
            FUNKCJE.LP(7040,7040,_i,,1,,1)+FUNKCJE.LP(7050,7050,_i,,1,,1)+FUNKCJE.LP(7052,7052,_i,,1,,1)+
            FUNKCJE.LP(7054,7054,_i,,1,,1)+FUNKCJE.LP(7058,7058,_i,,1,,1)
         ?};
      {? -(1+_c_p_i)='f'
      || _podst+=
            {? _i=0
            || FUNKCJE.L(100)
            |? _bez_wyp
            || FUNKCJE.L(100,,_i)
            || FUNKCJE.LP(100,,_i,,1,,1)
            ?}
      ?};
      _podst+=LICZ.Wylicz(_i,'.EKW',,,,,,,,,1,_bez_wyp);
      {? _ekw_nom.first()
      || R.cntx_psh();
         R.prefix();
         {!
         |? {? R.seek(_ekw_nom.R) & R.EKW='T'
            || {? _i=0
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN)
               ?};
               {? _bez_wyp
               || _sklnom+=FUNKCJE.L(_ekw_nom.RN,,_i)
               || _sklnom+=FUNKCJE.LP(_ekw_nom.RN,,_i,,1,,1)
               ?}
            ?};
            _ekw_nom.next()
         !};
         R.cntx_pop()
      ?};
      {? _i=0
      || _podst+=LICZ.Wylicz(,'.EKW',,,,,,,,,1)
      ?};
      _podst-=_sklnom
   ?};

   {? d[3]>0
   || {? ~_licznik & ~_lpod & (_podst+_sklnom) || _lpod:=1 ?};
      {? _lpod
      || d[4]+=d[3];
         d[5]+=_d
      ?};
      _w+=_podst;
      _wsklnom+=_sklnom;
      {? _lpod | _podst+_sklnom
      || _licznik+=1
      ?}
   ?};
   _licznik<_ile_mc
!};
_l:=_licznik;
{? _l>0
|| _d:=d[4]+d[5]-d[6];
  {? d[4]>0
  || {? d[5]
     || _w:=_w/d[4]*_d$2
     ?};
     _w/=_l
  || _w:=0
  ?};
  _wsklnom/=_l
?};
_w+=
   {? 1+_c_p='F'
   || {? _w=0
      || {? P.DZ<>date(0,0,0) & P.DZ<_list_d
         || __KAL.w_hours(date(P.DZ~1,P.DZ~2,1),date(P.DZ~1,P.DZ~2,0))
         || __KAL.w_hours(date(_list_d~1,_list_d~2,0),_list_d)
         ?}*
         {? P.KIN='T' || 1 || _wymiar ?}*
         FUNKCJE.L(91)
      ?}+FUNKCJE.L(92,94)
   || FUNKCJE.L(90,94)
   ?};
_w+=_wsklnom;

N.cntx_pop();
VAR_DEL.delete('d','dni');

_w


\przestoj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Zadaniem procedury jest wyliczenie wynagrodzenia za przestój.
::   WE:
::   WY:
::  OLD: \przestoj/newzasad.fml
::----------------------------------------------------------------------------------------------------------------------
_PRZEST:=__RUB.sys_rub(1314,O.D).RN;
{? ~_PRZEST || return(0) ?};
_param:=exec('get_par','#parametr',271);
{? type_of(_param)<>type_of('') || _param:='N' ?};
_wynik:=_wart:=0;
N.cntx_psh();
H.cntx_psh();
N.index('NIEOBECL');
N.prefix('N',P.ref(),~O.LT,_PRZEST);
{? N.first()
|| _D_F:=_D_B:=_D_S:=0;
   _dodatki:=__RUB.sys_rub(34,O.D);
   _nominal:=__RUB.sys_rub(454,O.D);
   {? _dodatki.first()
   || {!
      |? {? _nominal.find_key(_dodatki.RN)
         || _dodatki.next()
         || _dodatki.del(,1)=2
         ?}
      !}
   ?};
   {? _dodatki.first()
   || {? _dodatki.find_key(__RUB.sys_rub(45411,O.D).RN)
      || _D_F:=1
      ?};
      {? _dodatki.find_key(__RUB.sys_rub(45412,O.D).RN)
      || _D_B:=1
      ?};
      {? _dodatki.find_key(__RUB.sys_rub(45421,O.D).RN)
      || _D_S:=1
      ?}
  ?};
   exec('define_wynchor','lista_licz');
   __KORZ:=0;
   _nsize:=N.size();
   {? var_pres('__PN')<=0
   || __PN:=obj_new(@.CLASS.PNIEO,_nsize)
   || __PN.Delete();
      __PN.Create(_nsize)
   ?};
   Finish:=1;
   &_nsize;
   _oTrace:=obj_new(@.CLASS.Trace);
   {!
   |? {? ~exec('blokada_oblicz','nieobecnosc')
      || SK_CHO.cntx_psh();
         _maska:='s_ch'+form(N.OD~1,-4,0,'9.');
         {? SK_CHO.name()<>_maska || SK_CHO.use(_maska) ?};
         SK_CHO.index('SK_CHO');
         SK_CHO.prefix(N.ref());
         {? SK_CHO.first() || {! |? SK_CHO.del() !} ?};
         &_maska;
         SK_CHO.cntx_pop();
         __PN.NewMc(1,1);
         H.index('_HISTKOD');
         H.prefix(P.ref(),'Z');
         {? H.find_le(N.DO)
         || _wart:=_wart_F:=_wart_B:=_wart_S:=0;
            _oTrace.erase();
            {? _D_S
            || _wart_S:=N.POTR3$2;
               _oTrace.add(110,,_wart_S,'PRZELICZ','E',,,'Dod. stały')
            ?};
            {? 1+(-H.CP().S)='u'
            || _wart:=N.POTR1$2;
               _oTrace.add(100,,_wart,'PRZELICZ','E',,,'Wyn. zasadnicze');
               {? _D_F
               || _wart_F:=N.POTR2$2;
                  _oTrace.add(101,,_wart_F,'PRZELICZ','E',,,'Dod. funkcyjny')
               ?}
            || exec('kal_prac','personel',N.OD~1);
               {? N.PARTDAY='T'
               || _hsx:=exec('hsx','lista_licz',N.OD);
                  _wart:=(_hsx.S1*N.NG)$2;
                  _oTrace.add(100,,_wart,'PRZELICZ','E',,,form(N.NG,,,'9.')+'*'+form(_hsx.S1,,,'9.'));
                  obj_del(_hsx);
                  &_hsx;
                  {? _D_B
                  || _wart_B:=N.POTR2$2;
                     _oTrace.add(102,,_wart_B,'PRZELICZ','E',,,'Dod. brygadzistowski')
                  ?}
               || {! _ind:=N.OD~3..N.DO~3
                  |! _data:=date(N.OD~1,N.OD~2,_ind);
                     _S1:=0;
                     {? H.find_le(_data)
                     || _hsx:=exec('hsx','lista_licz',_data);
                        _godz:=__KAL.w_hours(_data,_data);
                        _wart+=_hsx.S1*_godz;
                        _S1:=_hsx.S1;
                        obj_del(_hsx);
                        &_hsx
                     ?}
                  !};
                  _oTrace.add(100,,_wart$2,'PRZELICZ','E',,,form(N.NG,,,'9.')+'*'+form(_S1,,,'9.'));
                 {? _D_B
                 || _wart_B:=N.POTR2$2;
                    _oTrace.add(102,,_wart_B,'PRZELICZ','E',,,'Dod. brygadzistowski')
                 ?}
               ?}
            ?};

            _nbp:=N.ref();
            _wart:=(_wart+_wart_F+_wart_S+_wart_B)$2;
            {? N.PROC
            || _wart*=N.PROC*0.01
            ?};

            _wyr_min:=0;
            {? _param='T'
            || _nk:=exec('ust_nk','lista_licz',N.OD,'NK');
               {? _wart<_nk
               || _wyr_min:=exec('wyr_minwyn','lista_licz',_wart,N.NG,N.OD,_nk);
                  _oTrace.add(499,,_wyr_min,'PRZELICZ','E',,,'Wyr. min. wynagrodzenia')
               ?}
            ?};

            _wart+=_wyr_min;
            __PN.PutMc(Finish,1,_wart,N.NG,N.NG,0,'T',N.OD,'A',_oTrace);
            __PN.Zapisz(1);
            __PN.Put(Finish,N.NB().RN,N.OD,N.OD,date(0,0,0),_wart,_nbp);

            exec('zap_tab','lista_licz',_nbp);
            _wynik+=_wart;
            N.WART:=_wart;
            N.put()
         ?}
      || _wynik+=N.WART
      ?};
      N.next()
   !};
   obj_del(_oTrace);
   &_oTrace;
   __PN.Delete();
   &__KORZ;
   &Finish
?};
N.cntx_pop();
H.cntx_pop();
_wynik$2


\bl_przek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MicKoc [12.51]
:: OPIS: Wyrównanie jeśli przekroczenie w przełomie roku nieobecności
::   WY: Kwota
::  OLD: \bl_przek/podst_sk.fml
::----------------------------------------------------------------------------------------------------------------------
N.cntx_psh();
N.index('NIEOBECL');
N.prefix('N',P.ref,~O.LT,);
_wyn:=_potr:=_ku:=0;
{? N.first()
|| Cntx.psh(P_INFO,KU);
   P_INFO.index('OD');
   P_INFO.prefix(exec('firma','ustawienia'),P.OSOBA);
   KU.index('KARTAUB');
   KU.prefix(exec('firma','ustawienia'),P.OSOBA);
   {!
   |? {? N.ROK<O.R & KU.find_key(N.ROK,N.MC) & KU.S1<>KU.S10
      || {? P_INFO.find_le(N.OD) | P_INFO.find_ge(N.OD)
         || {? P_INFO.BLOKADA~1=N.ROK & P_INFO.BLOKADA~2<=N.MC
            || _potr+=N.POTR1+N.POTR2+N.POTR3+N.POTR4;
               _ku:=KU.S10-KU.S1
            ?}
         ?}
      ?};
      N.next()
   !};
   Cntx.pop(P_INFO,KU)
?};
N.cntx_pop();
_wyn:={? _potr>_ku || _ku || _potr ?};
_wyn$2


\wynagr_url_rehabil
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie wynagrodzenia za urlop rehabilitacyjny wprowadzony w nieobecnościach.
::   WE:
::   WY: wyliczone wynagrodzenie
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? FUNKCJE.L_SYS(1171)
|| _u_rehab:=__RUB.sys_kod(1171);
   N.index('NIEOBECL');
   N.prefix('N',P.ref,~O.LT,);
   {? N.first()
   || {!
      |? {? N.NB().RN=_u_rehab
         || N.cntx_psh();
            _wyn+=exec('ekwiwalent_ppl','lista_licz','N',N.ref,N.OD);
            N.cntx_pop()
         ?};
         N.next()
      !}
   ?}
?};
_wyn


\last_ls4p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Formuła obsługująca specyficzny przypadek - naliczenia listy płac dla wieloetatowca. Wykorzystywana przy
::       kontroli kolejności obliczeń, istotnej ze względów podatkowych. Sprawdza czy dla osoby powiązanej z etatem (_a)
::       wskazana lista płac (_b) była ostatnią z naliczanych.
::       Ze względów optymalizacyjnych poprawność parametrów nie jest weryfikowana.
::   WE: _a [REFERENCE] - Wskazanie pracownika (P.ref()).
::       _b [REFERENCE] - Wskazanie listy płac (O.ref()).
::   WY: Wskazana lista jest ostatnią z naliczanych (lub jeszcze nie była naliczana): 1/0.
::----------------------------------------------------------------------------------------------------------------------
_pref:=_a;
_oref:=_b;

_slo_kod:=exec('kod','ext_slo','P_STAT','LIST_MOD');

_ok:=1;
P_STAT.cntx_psh();
P_STAT.index('TECH');
P_STAT.prefix();
{? P_STAT.find_key(P.ref(),_slo_kod,O.ref())
:: Testy mają sens, jeżeli pracownik był już policzony na bieżącej liście.
|| _ref:=P_STAT.ref();
   P_STAT.f_set('O,P(OSOBA),SLO_KOD,DATA,GODZ',
      ,'"P_STAT".O=:_a and "2P".OSOBA=:_b and "P_STAT".SLO_KOD=:_c'
      ,_oref
      ,P.OSOBA
      ,_slo_kod
   );
   _ok:=P_STAT.f_last() & P_STAT.ref()=_ref;
   P_STAT.f_clear()
?};
P_STAT.cntx_pop();
_ok


\oblicz_OLD_podatek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.51]
:: OPIS: Wyliczenie podatku wg metody z 31.12.2020r.
::   WE:
::   WY:
::  OLD: \oblicz_OLD/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
{? O.RP<2022 | FUNKCJE.PL_NEW
:: Zerowanie na na ponownie naliczanych listach naliczonych przed wgraniem aktualizacji (ER/WRT/XP/12.51/2207/0004)
|| {? FUNKCJE.PL_NEW
   || FUNKCJE.LK_SYS(9072,,,1);
      FUNKCJE.LK_SYS(9075,,,1);
      FUNKCJE.LK_SYS(9076,,,1)
   ?};

   return(0)
?};

{? var_pres('Do_List')>100 || obj_del(Do_List) ?};
Do_List:=obj_new('d1','d2','d3','d5','p1','p2','p3','p4','p5','p6','p7','p8','p14','p15','p16','p17','p18');
{! _ind:=1..obj_len(Do_List)
|! Do_List[_ind]:=0
!};

: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku

Do_List.d1:=DoList.d[1];Do_List.d2:=DoList.d[2];Do_List.d3:=DoList.d[3];
DoList.d[1]:=DoList.d[2]:=DoList.d[3]:=0;
Do_List.p1:=DoList.p[1];Do_List.p2:=DoList.p[2];Do_List.p3:=DoList.p[3];
DoList.p[1]:=DoList.p[2]:=DoList.p[3]:=0;
Do_List.p4:=DoList.p[4];Do_List.p5:=DoList.p[5];Do_List.p6:=DoList.p[6];
DoList.p[4]:=DoList.p[5]:=DoList.p[6]:=0;
Do_List.p7:=DoList.p[7];Do_List.p8:=DoList.p[8];Do_List.p16:=DoList.p[16];Do_List.p17:=DoList.p[17];
DoList.p[7]:=DoList.p[8]:=DoList.p[16]:=DoList.p[17]:=0;

: wyliczenie wykorzystanych ulg i dochodu narastająco od początku roku
exec('wyk_ul_podatek','lista_licz',O.RP,O.MP,P.OSOBA,,2);
_ku_lp:=_ku_l:=0;
{? FUNKCJE.LP_SYS(92,,,1)>0 & exec('spr_kor_pod','lista_licz',O.RP,O.MP)
|| _ku_old:=FUNKCJE.LP_SYS(9071);
   _ku_norm:=FUNKCJE.LP_SYS(93);
   {? _ku_norm>_ku_old
   || _ku_l:=FUNKCJE.L_SYS(93);
      _ku_lp:=_ku_norm
   || _ku_l:=FUNKCJE.L_SYS(9071);
      _ku_lp:=_ku_old
   ?}
|| _ku_l:=FUNKCJE.L_SYS(9071);
   _ku_lp:=FUNKCJE.LP_SYS(9071)
?};

_ZK_doch:=_LT_doch:=0;
{? FUNKCJE.PODATEK
|| _LT_doch+=FUNKCJE.LP_SYS(92);
   _ZK_doch+=FUNKCJE.LP_SYS(9022);
   _LT_doch-=_ku_lp;
   _ZK_doch-=FUNKCJE.LP_SYS(9026);
   DoList.p[8]+=_LT_doch;
:: Jeżeli miesiąc z przekroczeniem progu oraz bieżąca lista nie jest ostatnią obliczoną dla osoby związanej z bieżącym
:: pracownikiem, to zasygnalizujmy konsekwencje nieprawidłowej kolejności obliczeń.
   {? (FUNKCJE.L_SYS(9075)+FUNKCJE.LP_SYS(9075))>0 & (FUNKCJE.L_SYS(9076)+FUNKCJE.LP_SYS(9076))>0
       & exec('last_ls4p','!ppl_pll_nals',P.ref(),O.ref())=0
   || RAPLS.msg(P.T,P.OSOBA().NAZWISKO,OSOBA.PIERWSZE,
         'Nieprawidłowa kolejność obliczeń.\n'
         'Na bieżącej liście płac istnieją naliczenia (związane z innym etatem pracownika),\n'
         'w których uwzględniane były składniki bieżącego etatu.\n'
         'Należy zweryfikować naliczenia dla wszystkich etatów pracownika.'
      )
   ?}
?};

: DoList.p[11] i DoList.p[12] wyliczone w podst_sk jako suma zwolnionego
: dochodu i zaniechanego podatku z umów zleceń
DoList.p[6]+=DoList.p[11];  DoList.p[7]+=DoList.p[12];

: *** dochód do obliczenia procentu zaliczki ***
{? DoList.p[8]>0
|| DoList.d[1]:={? DoList.p[8]-DoList.p[4]>=0 || DoList.p[8]-DoList.p[4] || 0 ?}
|| DoList.d[1]:=DoList.p[8]
?};

: *** dochód do obliczenia zaliczki ***
:DoList.d[3]:=(FUNKCJE.L_SYS(92)-FUNKCJE.L_SYS(93))$2;
DoList.d[3]:=(FUNKCJE.L_SYS(92)-_ku_l-FUNKCJE.L_SYS(9011)-FUNKCJE.L_SYS(9012)-FUNKCJE.L_SYS(9013))$2;


: *** dochód zwolniony ***
DoList.d[2]:={? DoList.p[4]=0 || 0
             |? (DoList.p[4]-DoList.p[6])>=DoList.d[3] || DoList.d[3]
             |? (DoList.p[4]-DoList.p[6])>0 || DoList.p[4]-DoList.p[6]
             || 0
             ?}$2;
_odl_2:=FUNKCJE.LP_SYS(98);

:_dochod_2:=(FUNKCJE.LP_SYS(92)-FUNKCJE.LP_SYS(93))$2;
_dochod_2:=(FUNKCJE.LP_SYS(92)-_ku_lp-FUNKCJE.LP_SYS(9011)-FUNKCJE.LP_SYS(9012)-FUNKCJE.LP_SYS(9013))$2;

_p:=_p0:=0;

TP.index('TABPODAT');
_ROK:=2021;
TP.index('TABPODAT');
TP.prefix(_ROK);
{? TP.first()
|| _p0:=TP.PR
|| TP.prefix();
   TP.blank();
   TP.R:=2021;
   TP.K1:=0;
   TP.PR:=17;
   TP.add();
   TP.K1:=85528;
   TP.PR:=32;
   TP.add();
   _p0:=17
?};

{? P_IPOD.PROC>0 & (DoList.d[3]+FUNKCJE.L_SYS(9022))>0
|| _p:=P_IPOD.PROC
|| DoList.d[1]+=P_IPOD.PRZYCH
?};
_zw_prog:=_zw_proc:=_zw_pr2:=0;
{? FUNKCJE.PODATEK & ~_p
||
:: dla wyliczenia wg zasad opodatkowania z 2020roku
   {? DoList.d[3]+FUNKCJE.L_SYS(9022)>0
   || {? TP.first()
      ||
:: DoList.d[1] jest dochód łącznie z listami z bieżącego miesiąca które są pobrane do wyliczeń
         _p:={? TP.find_le(DoList.d[1]-_LT_doch) || TP.PR || _p0 ?};
:: Weryfikacja obniżenia progu
         _bez_op:=1;
         {? P_IPOD.OP='T'
         || _p:=_p0;
            _bez_op:=0
         ?};
         {? _bez_op
         || TP.cntx_psh();
:: Następuje sprawdzenie czy jest kolejny próg podatkowy
            {? TP.next()
            ||
:: Sprawdzenie czy wartości z bieżącego miesiąca przekraczają kolejny próg
               {? DoList.d[1]-(_LT_doch+_ZK_doch)>=TP.K1
:: Jeżeli suma narastająca od początku roku z listami bieżącymi oraz zwolniony przychód przekracza próg
:: wtedy cały bieżący dochód jest w kolejnym progu
               || _zw_prog:=DoList.d[3]
               |? DoList.d[1]+DoList.d[3]>TP.K1
:: Jeżeli suma narastająca ze zwolnionym dochodem oraz bieżącym przekraczają próg
:: wtedy wartość dochodu z wyższym progiem jest różnicą tej sumy i wartości progu
               || _zw_prog:=DoList.d[1]+DoList.d[3]-TP.K1
               ?};
               {? _zw_prog
:: Jeżeli jest wartość w drugim progu to zapamiętaj procent
               || _zw_proc:=TP.PR
               ?}
            || _zw_pr2:=DoList.d[1]=TP.K1
            ?};
            TP.cntx_pop()
         ?}
      ?}
   ?}
|| {? ~_p & DoList.d[3]+FUNKCJE.L_SYS(9022)>0
   || TP.index('TABPODAT');
      TP.prefix(_ROK);
      {? TP.first()
      || _p:={? TP.find_le(DoList.d[1]) || TP.PR || _p0 ?};
         {? P_IPOD.OP='T' & _p>_p0
         || TP.prev();
            _p:=TP.PR
         ?}
            || _p:=17
      ?}
   ?}
?};

_ulga_p2:=FUNKCJE.LP_SYS(9072,,,1);
_UP:=FUNKCJE.LP_SYS(9072);
_ZP:=FUNKCJE.LP_SYS(9079);
{? _zw_proc
|| _prog_1:=_prog_2:=0;
:: Jeżeli wystapiło zwiększenie progu
   {? ~DoList.d[2]
   || {? (DoList.d[3]>_zw_prog)
:: Jeśli Na bieżącej liście jest też pierwszy próg
      || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2;
:: Naliczamy wartość zaliczki dla pierwszego progu w całym miesiącu podatkowym
         DoList.p[1]:=_prog_1$0*_p*0.01;
:: Do drugiego progu wchodzi cała kwota z przekroczenia
         _prog_2:=_zw_prog;
:: Naliczenie całej zaliczki na podatek w miesiącu
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_UP;
         DoList.p[1]-=_ZP;
:: Pozostaje zaliczka dla bieżącej listy płac
         DoList.p[1]:=DoList.p[1]$2;
:: Jeżeli dochód z innych list jest ujemny należy go uwzględnić przy naliczeniu wartości dla pierwszego progu
         {? _LT_doch<0
         || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2
         || _prog_1:=(DoList.d[3]-_zw_prog)$2
         ?}
:: Jeśli Na bieżącej liście jest tylko drugi próg
      || _prog_1:=(DoList.d[3]+_LT_doch-_zw_prog)$2;
:: Naliczamy wartość zaliczki dla pierwszego progu w całym miesiącu podatkowym
         DoList.p[1]:=_prog_1$0*_p*0.01;
         _prog_2:=_zw_prog;
:: Naliczenie całej zaliczki na podatek w miesiącu
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_UP;
         DoList.p[1]-=_ZP;
         DoList.p[1]:=DoList.p[1]$2;
:: Zerowanie wartości dla pierwszego progu dla bieżącej listy
         _prog_1:=0;
:: Wartością drugiego progu jest dochód z bieżącej listy
         _prog_2:=DoList.d[3];
:: W tej sytuacji procent podatku z wyższego progu jest wprowadzony w podstawowy składnik listy płac
         _p:=_zw_proc
      ?}
   || {? (DoList.d[3]+_LT_doch-DoList.d[2]-_zw_prog>=0)
:: Jeśli pierwszy próg jest na tyle duży że może obsłużyć cały dochód zwolniony
      || _prog_1:=(DoList.d[3]+_LT_doch-DoList.d[2]-_zw_prog);
         DoList.p[1]:=(_prog_1)$0*_p*0.01;
         _prog_2:=_zw_prog;
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_UP;
         DoList.p[1]-=_ZP;
         DoList.p[1]:=DoList.p[1]$2;
         {? _zw_prog>=DoList.d[3]
         || _prog_1:=0;
            {? DoList.d[2]<=_LT_doch
            || _prog_2:=DoList.d[3]
            || _prog_2:=DoList.d[3]-(DoList.d[2]-_LT_doch)
            ?}
         || {? DoList.d[2]<=_LT_doch
            || _prog_1:=DoList.d[3]-_zw_prog;
               _prog_2:=_zw_prog
            || _ku_tmp:=(DoList.d[2]-_LT_doch);
               _prog_1:=DoList.d[3]-_ku_tmp;
               _prog_2:=_zw_prog-DoList.d[2]-_ku_tmp
            ?}
         ?}
:: Jeżeli jest jakakolwiek wartość w pierwszym progu należy pobrać  dochód zwolniony do tej wysokości
      || _prog_1:=0;
         _ku_tmp:=DoList.d[2]-(DoList.d[3]+_LT_doch-_zw_prog);
         _prog_2:=(_zw_prog-_ku_tmp);
         DoList.p[1]:=DoList.p[1]+(_prog_2$0*_zw_proc*0.01)-_UP;
         DoList.p[1]-=_ZP;
         DoList.p[1]:=DoList.p[1]$2;
         {? _zw_prog>=DoList.d[3]
         || {? DoList.d[2]<=_LT_doch
            || _prog_2:=DoList.d[3]
            || _prog_2:=DoList.d[3]-(DoList.d[2]-_LT_doch)
            ?}
         || {? DoList.d[2]<=_LT_doch
            || _prog_2:=_zw_prog
            || _ku_tmp:=(DoList.d[2]-_LT_doch);
               {? DoList.d[3]-_ku_tmp>=_zw_prog
               || _prog_2:=_zw_prog
               || _prog_2:=DoList.d[3]-_ku_tmp
               ?}
            ?}
         ?}
      ?}
   ?};
:: Zapisywanie bądź ewentualne zerowanie wartości wykazywanych dla progów podatkowych
   {? _prog_1>0 || FUNKCJE.LK_SYS(9075,,_prog_1$2) || FUNKCJE.LK_SYS(9075,,,1) ?};
   {? _prog_2>0 || FUNKCJE.LK_SYS(9076,,_prog_2$2) || FUNKCJE.LK_SYS(9076,,,1) ?}
||
:: Jeżeli w naliczanym miesiącu nie było przekroczenia progu postepujemy wg zwykłych zasad zakładamy że
:: zaliczka na podatek na wszystkich listach została naliczona tym samym procentem podstawy
   {? FUNKCJE.PODATEK & ~FUNKCJE.PL_NEW
   ||
:: Zapisywanie bądź ewentualne zerowanie wartości wykazywanych dla progów podatkowych
      {? _p>_p0
      || FUNKCJE.LK_SYS(9075,,,1);
         {? DoList.d[3]>0 || FUNKCJE.LK_SYS(9076,,DoList.d[3]$2) || FUNKCJE.LK_SYS(9076,,,1) ?}
      || FUNKCJE.LK_SYS(9076,,,1);
         {? DoList.d[3]>0 || FUNKCJE.LK_SYS(9075,,DoList.d[3]$2) || FUNKCJE.LK_SYS(9075,,,1) ?}
      ?}
   ?};
   DoList.p[1]:=((((DoList.d[3]+_dochod_2-DoList.d[2]-_odl_2)$0)*_p*0.01)-_UP)$2;
   DoList.p[1]-=_ZP
?};

{? DoList.p[1]<0 || DoList.p[1]:=0 ?};

{? DoList.p[1] & exec('czy_ulga_podatkowa','lista_licz',O.RP,O.MP,P.OSOBA,2)
|| _param:=exec('wartosc','lista_par','BEZ_ULGI');
   _ulga_pod:=
      {? DoList.p[1]>0 & P_IPOD.UP<>'B' & (_param=~~ | {? var_pres('_param')=type_of('') || _param='N' ?})
      || {? P_IPOD.UP='Z'
         || exec('oblicz_wsprozl','lista_licz')
         || 1
         ?}*43.76
      ?};
   _ulga_pod-=_ulga_p2;
   {? _ulga_pod<0 | O.T().T='OTK' || _ulga_pod:=0 ?};
   {? DoList.p[1]
   || {? _ulga_pod<DoList.p[1]
      || DoList.p[1]-=_ulga_pod
      || _ulga_pod:=DoList.p[1]; DoList.p[1]:=0
      ?}
   ?}
|| _ulga_pod:=0
?};
_wynik:=DoList.p[1]$2;

DoList.d[1]:=Do_List.d1;DoList.d[2]:=Do_List.d2;DoList.d[3]:=Do_List.d3;
DoList.p[1]:=Do_List.p1;DoList.p[2]:=Do_List.p2;DoList.p[3]:=Do_List.p3;
DoList.p[4]:=Do_List.p4;DoList.p[5]:=Do_List.p5;DoList.p[6]:=Do_List.p6;
DoList.p[7]:=Do_List.p7;DoList.p[8]:=Do_List.p8;DoList.p[16]:=Do_List.p16;DoList.p[17]:=Do_List.p17;

{? FUNKCJE.L_SYS(92)=0
|| _wynik:=0;
   FUNKCJE.LK_SYS(9072,,0)
|? ~FUNKCJE.PL_NEW
|| FUNKCJE.LK_SYS(9072,,_ulga_pod)
?};
_wynik


\zaliczka_podatek_doch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [21.37]
:: OPIS: Wyliczenie zaliczki na podatek oraz nadmiaru i różnicy ujemnej.
::   WE:
::   WY:
::  OLD: \zal_pod_doch/podatek4.fml
::----------------------------------------------------------------------------------------------------------------------
_wynik:=0;
{? O.RP>2021 & var_pres('__ZW_PRZ')>100 & __ZW_PRZ.JEST_PL  & __ZW_PRZ.KOD<>'' || __ZW_PRZ.add() ?};
{? FUNKCJE.PL_NEW & O.RP=2022 & FUNKCJE.L_SYS(9073)+FUNKCJE.L_SYS(9074)
|| FUNKCJE.LK_SYS(9073,,0);
   FUNKCJE.LK_SYS(9074,,0);
   FUNKCJE.LK_SYS(9077,,0);
   FUNKCJE.LK_SYS(9078,,0);
   FUNKCJE.LK_SYS(90701,,0);
   FUNKCJE.LK_SYS(90702,,0)
?};
{? O.RP<2022 | FUNKCJE.PL_NEW
|| _kw:=FUNKCJE.L(790);
   {? _kw>0
   ||  _kw+=FUNKCJE.LP(790);
      {? FUNKCJE.PL_NEW
      || _kw-=(FUNKCJE.L(795)+FUNKCJE.LP(795)+FUNKCJE.LP(797))
      || _kw-=(FUNKCJE.L(793,795)+FUNKCJE.LP(793,795)+FUNKCJE.LP(797))
      ?};
      _kw:=
         {? _kw<0
         || {? DoList.p[1]<=_kw || _kw
            |? DoList.p[5] || 0
            || DoList.p[1]
            ?}
         || _kw
         ?}
   || _kw:=0
   ?};
   _wynik:=_kw$(O.RP<2006)
|| {? FUNKCJE.L(780)<=0
   || FUNKCJE.LK_SYS(9073,,0);
      FUNKCJE.LK_SYS(9074,,0);
      FUNKCJE.LK_SYS(9077,,0);
      FUNKCJE.LK_SYS(9078,,0);
      FUNKCJE.LK_SYS(90701,,0);
      FUNKCJE.LK_SYS(90702,,0);
      {? var_pres('P_NPOD',@)>0
      || exec('p_npod_del','lista_licz','P',P.ref,O.ref)
      ?};
      return(0)
   ?};
:: naliczenie zaliczki wg zasad na dzień 31.12.2022r.
   _limit:=FUNKCJE.L_SYS(92)+FUNKCJE.L_SYS(5711)+FUNKCJE.L_SYS(5721)-FUNKCJE.L_SYS(9026);
   _limit+=FUNKCJE.LP_SYS(92)+FUNKCJE.LP_SYS(5711)+FUNKCJE.LP_SYS(5721)-FUNKCJE.LP_SYS(9026);
   _test:=exec('test_OLD','lista_licz',O.D);

   _pod_nom:=FUNKCJE.L_SYS(9079);
   _kw:=_pod_nom;
   _kw+=FUNKCJE.LP_SYS(9079);
   _kw-=(FUNKCJE.L_SYS(9067)+FUNKCJE.L(794,795)+FUNKCJE.LP_SYS(9067)+FUNKCJE.LP(794,795));
   _all_old:=_kw$0;
   _kw-=FUNKCJE.LP_SYS(9073);
{? _kw>0
   || _kw:=
         {? _kw<0
         || {? _pod_nom<=_kw
            || _kw
            || _pod_nom
            ?}
         || _kw
         ?}
   || _kw:=0
   ?};
   _pod_old:=_kw$0;
   FUNKCJE.LK_SYS(9073,,_pod_old);

:: naliczenie zaliczki wg nowych zasad
   _kw:=FUNKCJE.L(790);
   _kw+=FUNKCJE.LP(790);
   _kw-=(FUNKCJE.L(794,795)+FUNKCJE.LP(794,795));
   _all_new:=_kw$0;
   _kw-=FUNKCJE.LP_SYS(9074);
   {? _kw>0
   || _kw:=
         {? _kw<0
         || {? DoList.p[1]<=_kw || _kw
            |? DoList.p[5] || 0
            || DoList.p[1]
            ?}
         || _kw
         ?}
   || _kw:=0
   ?};
   _pod_new:=_kw$0;
   FUNKCJE.LK_SYS(9074,,_pod_new);
{? var_pres('P_NPOD',@)<=0
   || FUN.emsg('Brak tabeli: P_NPOD (Nadwyżki zaliczki na podatek).'
         '\nWyliczenia zaliczki na podatek mogą być błędne.'
         '\nNależy skontaktować się z przedstawicielem dostawcy oprogramowania.');
      _wynik:={? _all_new<_all_old || _all_new-FUNKCJE.LP(797) || _all_old-FUNKCJE.LP(797) ?}
   || _zapis:=exec('p_npod_del','lista_licz','P',P.ref,O.ref);
      _wynik:=0;
      {? ~_test
      || _wynik:=_all_new-FUNKCJE.LP(797);
         FUNKCJE.LK_SYS(9077,,0);
         FUNKCJE.LK_SYS(9078,,0)
      |? _limit>KST.PZ_LP | _all_old=_all_new
      || _nadwyzka:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','N',,1);
         {? _nadwyzka
         || FUNKCJE.LK_SYS(9077,,-_nadwyzka);
           {? _zapis
           || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'N',-_nadwyzka)
           ?}
         || FUNKCJE.LK_SYS(9077,,0)
         ?};
         _roznica:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','R',,1);
         {? _roznica
         || FUNKCJE.LK_SYS(9078,,-_roznica);
           {? _zapis
           || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'R',-_roznica)
           ?}
         || FUNKCJE.LK_SYS(9078,,0)
         ?};
          _wynik:=_all_new-FUNKCJE.LP(797)

      |? _all_old>_all_new
      || _nadwyzka:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','N',,1);
         {? _nadwyzka
         || FUNKCJE.LK_SYS(9077,,-_nadwyzka);
            {? _zapis
            || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'N',-_nadwyzka)
            ?}
         || FUNKCJE.LK_SYS(9077,,0)
         ?};
         _roznica:=exec('wylicz_bilans','lista_licz',O.RP,O.MP,O.D,O.N,'P',_all_old-_all_new);
         _rozni_msc:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','R',,1);
         _roznica-=_rozni_msc;
         {? _roznica
         || FUNKCJE.LK_SYS(9078,,_roznica);
            {? _zapis
            || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'R',_roznica)
            ?}
         || FUNKCJE.LK_SYS(9078,,0)
         ?};
         _wynik:=_all_new-(FUNKCJE.LP(797)-_rozni_msc)+_roznica

      || _roznica:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','R',,1);
         {? _roznica
         || FUNKCJE.LK_SYS(9078,,-_roznica);
           {? _zapis
           || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'R',-_roznica)
           ?}
         || FUNKCJE.LK_SYS(9078,,0)
         ?};
         _nadwyzka:=exec('wylicz_npod','lista_licz',O.RP,O.MP,O.D,O.N,'P','N',,1);
         _nadwyzka:=_all_new-_all_old-_nadwyzka;
         FUNKCJE.LK_SYS(9077,,_nadwyzka);
         _wynik:=_all_old-FUNKCJE.LP(797);
         {? _zapis
         || exec('p_npod_add','lista_licz',P.ref,P.OSOBA,O.ref,null,'P',O.RP,O.MP,'N',_nadwyzka)
         ?}
      ?};
      _old:=FUNKCJE.L_SYS(9073)+FUNKCJE.LP_SYS(9073);
      _new:=FUNKCJE.L_SYS(9074)+FUNKCJE.LP_SYS(9074);
      FUNKCJE.LK_SYS(90701,,_old);
      FUNKCJE.LK_SYS(90702,,_new)
   ?}
?};
_wynik


\placa_zasadnicza
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Formuła płacowa dla składnika 100 - Płaca zasadnicza
::   WE: [_a][STRING] - typ formuły [domyślnie 'U']
::   WY: kwota składnika
::----------------------------------------------------------------------------------------------------------------------
_typ:={? var_pres('_a')=type_of('') || _a || 'U' ?};
_ret:=0;
{? -_typ='u'
|| exec('rozlicz_skl_okr','!ppl_pll_nals');
   exec('zasadnicza','!ppl_pll_nals');
   _ret:=DoList.c[1]
|? -_typ='f'
|| exec('zasadnicza','!ppl_pll_nals');
   exec('rozlicz_skl_okr','!ppl_pll_nals');
   exec('plf_nadg','!ppl_pll_nals','f');
   _ret:=~~
?};
{? O.KRAJE<>null()
|| _ret:=0
?};
_ret

:Sign Version 2.0 jowisz:1045 2023/12/12 11:14:40 598d3469619138f7449633af0ac24a3e3ab834f8cfe9f291b19cd704c926960a4c004d28cd701cf23fdf865772be64172d3c8d9f1a7517eafa34a31a0c351135760bb800694ecfec7d050f13de3fa5e6da68c95baa2a4c1ce65e99e790a61e3a624ad8c98fa223c82650f90da50f43380e0d0cd4547aacaf85b7adca59aa7fa6
