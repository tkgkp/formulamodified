:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_ornn.fml
:: Utworzony: 13.11.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_ORNN - Rejestracja nieobecności.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rejestracja nieobecności - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::# parses=exec('parses_o','ppl',params_get().in.O)
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=O, type=_O, name=Wskazanie listy płac, required=N, keyref=T
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_akcja:=_mp.akcja();

_result:='';

_uidref:=exec('ref2uid','#table',_in.P);
{? _uidref=''
|| _result:=exec('error','!pkd_ezk_ornn')

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   || _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select','!pkd_ezk_ornn',_in.P,_in.O);
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rejestracja nieobecności - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj nieobecności: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj nieobecności: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj nieobecności: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj nieobecności'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie nieobecności niemożliwe.\nNie znaleziono pracownika.'


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań.
::   WE: _a [REFERENCE] - Wskazanie pracownika.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
{? type_of(_a)=type_of(null()) & _a<>null() & P.seek(_a)
|| OSOBA.cntx_psh();
   P.OSOBA();
   VAR.O();
   N.cntx_psh();
   N.index('NIEOBECX');
   N.prefix('N',P.ref());
   N.win_sel('WER_P');
   exec('n_nb_icon','nieobecnosc','WER');
   exec('n_nb_icon','nieobecnosc','WYCOFANE');
   N.win_edit('RED');
   _ret:=N.select();
   N.cntx_pop();
   OSOBA.cntx_pop()
|| _ret:=exec('error','!pkd_ezk_ornn')
?};
P.cntx_pop();
_ret


\n_okres_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Po redagowaniu pól: N.OD, N.DO, N.NK.
::   WE:
::   WY: 1
::  OLD: \N_ODDO/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=params_get().fld;
_TAB:=cur_tab(1,1);

_nb:="null";
{? _TAB=N    || _nb:="N.NB"
|? _TAB=OS_N || _nb:="OS_N.R"
|| return()
?};

_ca:=cur_afld();

_d0:=date(0,0,0);


_TAB.NK:=EDIT_VAR.DT*{? _TAB.UW='T' || 7 || 1 ?};
_TAB.NT:={? _TAB.UW='T' || EDIT_VAR.DT ?};

{? _ca='OD'
|| {? _TAB.OD<>_d0 & _TAB.OD<>_fld.OD & __RUB.sys_attr(_nb(),129,_TAB.OD)
   || _TAB.PROC:=exec('procent','nieobecnosc',_nb())
   ?}

|? _ca='DT' | _ca='UW'
|| {? _TAB.NK<0
   || _TAB.NK:=0
   |? _TAB.NK>365 & ~FUN.ask('Czy na pewno chcesz wprowadzić nieobecność trwającą %1 dni?'@ [$_TAB.NK])
   || _TAB.NK:=0
   |? _TAB.OD<>_d0 & (_TAB.NK<>_fld.NK | _TAB.DO=_d0 | _TAB.DO<=_TAB.OD | _TAB.UW<>_fld.UW)
::    Ostatni warunek może wystąpić gdy przesuwamy początek nieobecności.
   || {? _ca='DT' | (_ca='UW' & _TAB.OD=_fld.OD & _TAB.UW<>_fld.UW)
      || _TAB.DO:=_TAB.OD+{? _TAB.NK || _TAB.NK-1 ?}
      ?}
   ?}
?};

{? _TAB.OD<>_d0 & _TAB.DO<>_d0 &
   (_TAB.OD<>_fld.OD | _TAB.DO<>_fld.DO | _TAB.NK=0 | _TAB.NK<>_TAB.DO-_TAB.OD+1 | _TAB.NK<>_fld.NK)
|| exec('n_czas','nieobecnosc',,_TAB)
?};

{? _TAB=N
|| {? _TAB.OD<>_TAB.DO
   || _TAB.PARTDAY:='N'
   ?};
   exec('n_efld_opt','nieobecnosc')
?};

1


\edit_var_por_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [2010]
:: OPIS: Przed wyświetleniem pola EDIT_VAR.POR.
::   WE:
::   WY:
::  OLD: \var_ev_poz/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.POR:=N.POD+N.POZ;
1


\n_bo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Obsługa akcji "Okienko - przed" dla tabeli N.
::  OLD: \N_WND/kartprac.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('ustawkal','pracownik');
exec('n_bd','nieobecnosc')


\n_ao
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Okienko - po" dla tabeli N. Przywrócenie standardowego formatu wyświetlania używanych pól.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{! _lp:=1 .. 3
|! POLA_GRP.fld_fml('REAL_'+$_lp,'DISPLAY_FORMAT',"*")
!};
POLA_GRP.fld_fml('TXT_1','DISPLAY_FORMAT',"*")


\n_podziel_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Podział nieobecności".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('n_rozpisz','nieobecnosc',1)


\n_schemat_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Schemat rozliczenia".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('nw_select','nieobecnosc',1)


\n_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Legenda" w oknach tabeli N.
::   WE:
::   WY:
::  OLD: \leg_n/menu.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','N#NIEO#','NIEO#01')


\n_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla tabeli N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('n_efld_opt','nieobecnosc','*',N,'RED');
N.display()


\n_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabeli N z doklejonym oknem redagowania tabeli P);
::       - w ramach obszaru roboczego (okno wertowania tabeli N jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=N
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\zmienne_lt_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Przed wyświetleniem pola ZMIENNE.LT - ustalenie znaku listy, wycofującej nieobecność.
::  OLD: \ust_zn_listy/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();
ZMIENNE.LT:=~-N.O().LT;
O.cntx_pop();
1


\o_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Formuła pozwala na wybór otwartej listy, na której będzie wycofywana nieobecność.
::   WE:
::   WY: Ref listy lub null
::  OLD: \lista_wycofane/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{!
|? {? var_pres('_ret')>100
   || obj_del(_ret)
   ?};
   O.cntx_psh();
   _ret:=exec('select','lista_plac',BPMN.SYM_DOM,N.P().F_ZATR().KOD,'N',,'R');
   O.cntx_pop();
   {? _ret.OK
   || {? date(_ret.R,_ret.M,0)<N.OD
      || FUN.emsg('Wybrana lista nie może być za okres wcześniejszy niż wycofywana nieobecność.'@);
         1
      |? _ret.LT=N.LT
      || FUN.emsg(
            'Rozliczenie wycofywanej nieobecność nie może odbywać się na liście,\n'
            'na której nieobecność była zrealizowana.'@
         );
         1
      ?}
   || FUN.ask('Czy na pewno rezygnujesz z wskazania listy?'@)=0
   ?}
!};
_ret.REF


\n_wycofaj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Wycofaj (bieżącą nieobecność)".
::   WE:
:    WY:
::  OLD: \wyb_wycofane/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~N.size()
|| FUN.emsg('Brak zapisu w tabeli nieobecności.'@+'\n'+'Wycofanie niemożliwe.'@);
   return(0)

|? ~(+N.LT)
|| FUN.emsg('Nieobecność nie jest rozliczona listą płac.'@+'\n'+'Wycofanie niemożliwe.'@);
   return(0)

|? N.RODZAJ<>'Z'
|| FUN.emsg('Akcja dostępna jedynie dla rodzaju \'Z\' (zwykła nieobecność).'@);
   return(0)
?};

{? __RUB.sys_attr(N.NB,15) & ((N.POTR1+N.POTR2+N.POTR3+N.POTR4)$4=0)
|| FUN.emsg('Wycofywana nieobecność nie ma wyliczonych potrąceń z płacy zasadniczej, dodatków.'@+'\n'+
       'Proszę zweryfikować wyliczenia płacy zasadniczej, dodatków w miesiącu wycofania na liście płac.'@)
?};

{? ~FUN.ask('Akcja spowoduje wycofanie bieżącej nieobecności.'@+'\n'+'Czy na pewno chcesz kontynuować?'@)
|| return(0)
?};

{? ~FUN.choice('Proszę wybrać listę płac na której\nma zostać skorygowana wycofywana nieobecność.'@,1,'&Dalej'@)
|| return(0)
?};

{? (_lista:=exec('o_wybierz','!pkd_ezk_ornn'))=null()
|| return(0)
?};

_txt:=
   'System wykrył rozliczoną nieobecność, dla której nieobecnością\n'
   'pierwotną w schemacie rozliczenia jest nieobecność wycofywana.\n'@;

N.cntx_psh();
N.prefix();
NW.cntx_psh();
_nref:=N.ref();

: Najpierw sprawdzimy, czy nieobecność wycofywana nie jest nieobecnością pierwotną innej nieobecności.
_wtorna:=0;
NW.index('CHP');
NW.prefix(_nref);
{? NW.first()
|| {!
   |? _wtorna+=NW.CHP<>NW.CHW;
      ~_wtorna & NW.next()
   !}
?};

{? ~_wtorna | FUN.ask(_txt+'Czy na pewno kontynuować operację wycofania nieobecności?'@)
|| do();
:  Zmiany w nieobecności.
   N.O:=_lista;
   N.KOR:='T';
   N.RODZAJ:='W';
   N.put();
:  Ewentualna zmiana nieobecności pierwotnej (na samą siebie).
   NW.index('CHW');
   NW.prefix(_nref);
   {? NW.first() & NW.CHP<>_nref
   || NW.CHP:=_nref;
      NW.put()
   ?};
:  Ewentualna podmiana nieobecności pierwotnych na innych nieobecnościach, dla których do tej pory nieobecnością
:  pierwotna była nieobecność wycofywana.
   {? _wtorna
   || NW.index('CHP');
      NW.prefix(_nref);
      {? NW.first() & NW.next()
      || _NPierw:=NW.CHW;
         {!
         |? NW.clear();
            NW.CHP:=_NPierw;
            NW.put();
            NW.prefix(_nref);
            NW.first() & NW.next()
         !}
      ?}
   ?};
   {? ~end()
   || FUN.emsg('Wycofanie nieobecności nie powiodło się.'@)
   |? _wtorna
   || FUN.info(_txt+'Należy sprawdzić schemat rozliczenia nieobecności późniejszych od wycofywanej.'@)
   ?}
?};
NW.cntx_pop();
N.prefix();
{? N.seek(_nref)
|| exec('kart_url_update_add_n','kart_url');
   FUNKCJE.OBLICZDS(N.OD~1);
   exec('ekw_info','nieobecnosc',N.NB,N.DO)
?};
N.cntx_pop();
exec('n_wycofane_b','!pkd_ezk_ornn',1);
1


\n_wycofane_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Wycofane" (z menu Wycofane).
::   WE:
::   WY:
::  OLD: \wer_wycofane/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();
_ref:=N.ref();
N.cntx_psh();
N.index('NIEOBWYC');
N.prefix('T',P.ref(),'W');
N.first();
N.win_sel('WYCOFANE');
N.hdr_sel();
N.hdr_sel(' '+OSOBA.NAZWISKO+' '+OSOBA.PIERWSZE);
N.select();
N.cntx_pop();
O.cntx_pop();
N.seek(_ref) | N.first()


\n_popraw_b_wycofane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Popraw" w oknie WYCOFANE tabeli N (nieobecności wycofane).
::   WE:
::   WY:
::  OLD: \popr_wycofane/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{? N.O().Z='T'
|| FUN.emsg('Lista płac na której rozliczono wycofaną nieobecność jest zamknięta.'@+'\n'+'Poprawianie niemożliwe.'@);
   return(0)
?};

{? ~FUN.ask('Akcja popraw dotyczy zmiany listy na której będzie wycofana nieobecność.'@+'\n'+'Kontynuować?'@)
|| return(0)
?};

{? (_lista:=exec('o_wybierz','!pkd_ezk_ornn'))=null()
|| return(0)
?};

N.O:=_lista;
N.put()


\n_przywroc_b_wycofane
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Przywróć" w oknie WYCOFANE tabeli N (nieobecności wycofane) - wycofanie nieobecności,
::       (akcja "Usuń" wycofaną nieobecność).
::   WE:
::   WY:
::  OLD: \usun_wycofane/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~FUN.ask('Akcja przywraca wycofaną nieobecność.'@+'\n'+'Kontynuować?'@)
|| return(0)
?};

KOMM.init();

_ret:=exec('n','overlap',N.ref(),1);
{? (type_of(_ret)=type_of(0) & ~_ret) | (type_of(_ret)=type_of('') & _ret<>'')
|| FUN.emsg(
      'Istnieje zarejestrowana absencja w czasie trwania wycofanej nieobecności.'@+'\n'+
      'Przywrócenie wycofanej nieobecności niemożliwe.'@
   );
   return(0)
?};

{? N.O().Z='T'
|| FUN.emsg(
      'Lista płac na której rozliczono wycofaną nieobecność jest zamknięta.'@+'\n'+
      'Przywrócenie wycofanej nieobecności niemożliwe.'@
   );
   return(0)
?};

N.cntx_psh();
N.prefix();
N.O:=null();
N.KOR:='N';
N.RODZAJ:='Z';
N.put();
_nref:=N.ref();
exec('nw_aktualizuj','nieobecnosc');

: Wyliczenie karty urlopowej i dyscypliny.
N.prefix();
{? N.seek(_nref)
|| exec('kart_url_update_add_n','kart_url');
   FUNKCJE.OBLICZDS(N.OD~1);
   exec('ekw_info','nieobecnosc',N.NB,N.DO)
?};

N.cntx_pop();

KOMM.select('Przywróć');
1


\n_schemat_b_inne
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Schemat rozliczenia" w oknach związanych z nieobecnościami wycofanymi i korektami nieobecności.
::   WE:
::   WY:
::  OLD: \wysw_rozl/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{? N.KOR='T'
|| NW.actions('WER','ADPUO:D')
?};
N.cntx_psh();
N.index('NIEOBECN');
N.prefix(N.KOR,P.ref());
exec('nw_select','nieobecnosc',1);
N.cntx_pop();
{? N.KOR='T'
|| NW.actions('WER','')
?};
1


\n_params_k
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Funkcja tworzy tablicę z elementami nazwanymi wykorzystywaną podczas dołączania, poprawiania i usuwania
::       korekt nieobecności. Tablica zastępuje dotychczasowe zmienne globalne.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_nkor:=obj_new('nref','RN','RT','OD','DO','PROC','Kw_Pot');
_nkor.nref:=N.ref();
_nkor.RN:=N.NB().RN;
_nkor.RT:=N.NB().RT;
_nkor.OD:=N.OD;
_nkor.DO:=N.DO;
_nkor.PROC:=N.PROC;
{? __RUB.sys_attr(N.NB,15) & ((N.POTR1+N.POTR2+N.POTR3+N.POTR4)$4=0)
|| _nkor.Kw_Pot:=1
|| _nkor.Kw_Pot:=0
?};
_nkor


\n_korekta_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Korekta" w podstawowym oknie wertowania tabeli N.
::       Dla nieobecności skorygowanej pokazuje istniejące korekty.
::       Dla nieobecności nieskorygowanej pozwala utworzyć korektę.
::   WE:
::   WY:
::  OLD: \korekta/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
{? (__RUB.sys_attr(N.NB,124,N.OD) | __RUB.sys_attr(N.NB,132,N.OD)) & N.RODZAJ<>'K'
|| FUN.emsg('Wybrana akcja nie dotyczy bieżącej nieobecności.'@+'\n'+
      'W celu wycofania rozliczonej nieobecności tego typu'@+'\n'+
      'należy uruchomić akcję: Inne akcje->Wycofaj.'@);
   return(0)
?};

{? exec('blk_lock','#table','N',N.ref,,1,'Nieobecność jest redagowana'@)=0
|| return(1)
?};

{? N.N_KOR
:  Dla nieobecności istnieje już korekta - pokażmy ją.
|| _ref:=null();
   N.cntx_psh();
   N.index('NIEOTREE');
   N.prefix();
   {? N.seek(N.N_KOR,)
   || _nkor:=exec('n_params_k','!pkd_ezk_ornn');
      params_set('nkor',_nkor);
      N.win_sel('KOR');
      N.select();
      N.index('NIEOTREE');
      N.prefix(#_nkor.nref);
      {? N.first()
:        Jeżeli jest korekta (po wyjściu z okna wertowania) - zapamiętujemy jej REF-a.
      || _ref:=N.ref()
:        Korekty nie ma (po wyjściu z okna wertowania) - przywracamy status nieobecności korygowanej.
      || N.prefix();
         {? N.seek(_nkor.nref)
         || _ref:=N.ref();
            N.KOR:='N';
            N.RODZAJ:='Z';
            N.put()
         ?}
      ?};
      exec('nw_aktualizuj','nieobecnosc',N.ref(),1);

:     Wyliczenie karty urlopowej i dyscypliny.
      N.prefix();
      {? N.seek(_nkor.nref)
      || exec('kart_url_update_add_n','kart_url');
         FUNKCJE.OBLICZDS(N.OD~1)
      ?}
   || FUN.emsg('Brak korygowanej nieobecności.'@+'\n'+'Proszę się skontaktować z serwisem.'@)
   ?};
   N.cntx_pop();
   N.seek(_ref) | N.first()

:  Nieobecność nie była korygowana - pozwólmy utworzyć korektę.  -------------------------------------------------------
|| {? ~(+N.LT)
   || FUN.emsg('Nieobecność nie jest rozliczona listą płac.'@+'\n'+'Korekta niemożliwa.'@);
      return(0)
   |? ~FUN.ask(
         'Wybrana akcja umożliwia wprowadzenie korekty dla bieżącej nieobecności.\n'
         'Nieobecność ta zostanie zaznaczona jako "Korygowana".\n'
         'W związku z tym, przestanie być widoczna w okienku nieobecności.\n'
         'Należy wprowadzić korektę do wybranej nieobecności.\n'@+
         'Czy na pewno kontynuować tę operację?'@
      )
   || return(0)
   ?};

   N.cntx_psh();
   N.index('NIEOTREE');
   N.prefix();
   _ref:=N.ref();
   _nkor:=exec('n_params_k','!pkd_ezk_ornn');
   params_set('nkor',_nkor);

   _nw_chp:=null();
   NW.cntx_psh();

:  Najpierw sprawdzimy, czy nieobecność korygowana nie jest nieobecnością pierwotną innej nieobecności.
   _wtorna:=0;
   NW.index('CHP');
   NW.prefix(_nkor.nref);
   {? NW.first()
   || {!
      |? _wtorna+=NW.CHP<>NW.CHW;
         ~_wtorna & NW.next()
      !}
   ?};

   _ok:=1;
   {? ~_wtorna |
      (_ok:=FUN.ask(
         'System wykrył rozliczoną nieobecność, dla której nieobecnością\n'
         'pierwotną w schemacie rozliczenia jest nieobecność korygowana.\n'
         'Należy sprawdzić schemat rozliczenia nieobecności późniejszych od korygowanej.\n'@+
         'Czy na pewno kontynuować operację korygowania nieobecności?'@)
      )
   || do();
:     Ewentualna zmiana nieobecności pierwotnej (na samą siebie).
      NW.index('CHW');
      NW.prefix();
      {? NW.find_key(_nkor.nref)
      || _nw_chp:=NW.CHP;
         {? NW.CHP<>_nkor.nref
         || NW.CHP:=_nkor.nref;
            NW.put()
         ?}
      ?};
:     Ewentualna podmiana nieobecności pierwotnych na innych nieobecnościach, dla których do tej pory nieobecnością
:     pierwotna była nieobecność wycofywana.
      {? _wtorna
      || NW.cntx_psh();
         NW.index('CHP');
         NW.prefix(_nkor.nref);
         {? NW.first() & NW.next()
         || _NPierw:=NW.CHW;
            {!
            |? NW.clear();
               NW.CHP:=_NPierw;
               NW.put();
               NW.prefix(_nkor.nref);
               NW.first() & NW.next()
            !}
         ?};
         NW.cntx_pop();
         exec('nw_aktualizuj','nieobecnosc',,1)
      ?};
      {? ~end()
      || FUN.emsg('Utworzenie korekty nieobecności nie powiodło się.'@)
      ?}
   ?};
   NW.cntx_pop();

   {? _ok
   ||
:     Zmiany w nieobecności.
      N.KOR:='T';
      N.RODZAJ:='X';
      N.put();

      N.prefix(#_nkor.nref);
      N.win_sel('KOR');
      N.hdr_sel('');
      N.hdr_sel(': '+$_nkor.RN+' "'+_nkor.RT+'" Od: '+$_nkor.OD+' Do: '+$_nkor.DO);
      N.select();
      N.index('NIEOTREE');
      N.prefix(#_nkor.nref);
      {? N.first()
      || _ref:=N.ref();
:        Przywrócenie właściwego rodzaju
         N.prefix();
         {? N.seek(_nkor.nref)
         || {? N.RODZAJ='X'
            || N.RODZAJ:='R';
               N.put()
            ?}
         ?}

:        Zrezygnowano z wprowadzania korekty - przywróć pierwotną dla korygowanej.
      || NW.cntx_psh();
         NW.index('CHW');
         NW.prefix();
         {? NW.find_key(_nkor.nref) & _nw_chp
         || NW.CHP:=_nw_chp;
            NW.put()
         ?};
         NW.cntx_pop();

         N.prefix();
         {? N.seek(_nkor.nref)
         || _ref:=N.ref();
            N.KOR:='N';
            N.RODZAJ:='Z';
            N.put()
         ?};
         exec('nw_aktualizuj','nieobecnosc',,1)
      ?};

:     Wyliczenie karty urlopowej i dyscypliny.
      N.prefix();
      {? N.seek(_nkor.nref)
      || exec('kart_url_update_add_n','kart_url');
         FUNKCJE.OBLICZDS(N.OD~1)
      ?}
   ?};

   N.cntx_pop();
   N.seek(_ref) | N.first()
?};
exec('blk_unlock','#table','N',N.ref);
1


\n_kor_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za wypełnienie okna grupowego KOR tabeli N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
grp_disp(N,'KORB')


\n_kor_n_kora_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Przed obsługą" okna KORA tabeli N w ramach okna grupowego KOR tabeli N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
N.index('NIEOTREE');
N.prefix(#params_get().nkor.nref);
N.first()


\n_kor_n_korb_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Przed obsługą" okna KORB tabeli N w ramach okna grupowego KOR tabeli N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
N.index('NIEOBECN');
N.prefix('T',P.ref(),params_get().nkor.OD);
{? ~N.first()
|| FUN.error('Nie znaleziono nieobecności korygowanej.'@)
?};
1


\n_ao_kora
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Okienko - po" w oknie KORA tabeli N (dla niepustej dziedziny).
::       Sprawdzenie czy cały okres nieobecności został skorygowany.
::   WE:
::   WY: 1 - Dane poprawne (okno można opuścić).
::       0 - Dane nie są poprawne (okna nie można opuścić).
::  OLD: \kor_okno_po/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
:Akcja dla niepustej dziedziny - jakiś rekord jest.
_ref:=N.ref();
{? N.first()
|| _nkor:=params_get().nkor;

   _dt:=_nkor.OD;
   _zmiana:=0;

   {? N.OD<_nkor.OD
   || FUN.emsg('Wprowadzone korekty nie mogą rozpoczynać się przed korygowaną nieobecnością.'@);
      N.seek(_ref);
      return(0)
   |? N.OD>_nkor.OD
   || _zmiana+=1
   ?};

   _lt:=N.LT;
   {!
   |? _zmiana+=N.NB().RN<>_nkor.RN | N.OD<>_dt | N.PROC<>_nkor.PROC;
      {? N.LT<>_lt
      || FUN.emsg('Symbol listy płac dla wszystkich wprowadzonych korekt musi być identyczny lub niewypełniony.'@);
         N.seek(_ref);
         return(0)
      ?};
      _dt:=N.DO+1;
      N.next()
   !};

   {? N.DO>_nkor.DO
   || FUN.emsg('Wprowadzone korekty nie mogą kończyć się po korygowanej nieobecności.'@);
      N.seek(_ref);
      return(0)
   |? N.DO<_nkor.DO
   || _zmiana+=1
   ?};

   {? ~_zmiana
   || FUN.emsg(
         'Brak różnic pomiędzy nieobecnością korygowaną a korektą.'@+'\n'+
         'Korekta musi zostać poprawiona lub usunięta.'@
      );
      N.seek(_ref);
      return(0)
   ?};
   {? _nkor.Kw_Pot & (+N.LT=0)
   || FUN.emsg('Korygowana nieobecność nie ma wyliczonych potrąceń z płacy zasadniczej, dodatków.'@+'\n'+
          'Proszę zweryfikować wyliczenia płacy zasadniczej, dodatków w miesiącu rozliczenia korekty na liście płac.'@)
   ?}
?};
1


\n_dolacz_b_kora
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Dołącz" w oknie KORA tabeli N.
::  OLD: \dodaj_kor/nieobecn.fml
::----------------------------------------------------------------------------------------------------------------------
_nkor:=params_get().nkor;

_fld:=exec('n_params','nieobecnosc');
params_set('fld',_fld);

N.cntx_psh();
N.index('NIEOBECN');
N.prefix('N',P.ref());
N.blank();
N.OD:=_nkor.OD;
N.N_KOR:=_nkor.nref;
N.RODZAJ:='K';
EDIT_VAR.POR:=0;
{!
|? {? N.edit("exec('n_ae','nieobecnosc',0)")
   || {? N.add()
      ||
:: !!!
::         exec('ndos_p','projekty');
         exec('p_info_update_add','osoba');
         N.cntx_psh();
         _zm_rok:=N.DO~1;
         exec('n_rozpisz','nieobecnosc',0,0,1);
         N.cntx_pop();
         N.get();
         _zm_rok-=N.DO~1;
         exec('kart_url_update_add_n','kart_url',_zm_rok);
         FUNKCJE.OBLICZDS(N.OD~1);
         exec('n_limity','nieobecnosc',N.OD~1,N.NB);
         {? &_zm_rok
         || FUNKCJE.OBLICZDS(N.OD~1+1);
            exec('n_limity','nieobecnosc',N.OD~1+1,N.NB)
         ?};
         {? exec('n_rozliczalna','nieobecnosc')
         || exec('nw_aktualizuj','nieobecnosc',,1);
            exec('nw_select','nieobecnosc')
         ?};
         exec('ekw_info','nieobecnosc',N.NB,N.DO,N.NR,_nkor.nref);
::       Zaktualizowanie rodzaju nieobecności korygowanej, jeśli pierwsza korekta
         N.cntx_psh();
         N.clear();
         {? N.seek(_nkor.nref)
         || {? N.RODZAJ='X'
            || N.RODZAJ:='R'; N.put()
            ?}
         ?};
         N.cntx_pop();
         0
      || 1
      ?}
   ?}
!};
N.cntx_pop();
1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 2422ef6ce93aa4ad728cb074e7034552e872a9f6c716ab850b4cfb85365352873a43e71c33a4cb86f53f3229ad8af6e248e17125fc58020db0e90f30a1ffaf318335088242c92f19d46157e95e6b94bc9f4a802fec7c5d0a92183942c729549104e44bf3ef4ab2e0edb3723bdfa475b9e4228e09007abfe82b029dab48ceebe6
