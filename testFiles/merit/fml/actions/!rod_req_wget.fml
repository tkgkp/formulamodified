:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !rod_req_wget.fml
:: Utworzony: 20.04.2018
:: Autor: MB
::======================================================================================================================
:: Zawartość: Formuły czynności ROD_REQ_WGET - Pobieranie i obsługa żądań z Rodo Utility
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Pobieranie i obsługa żądań z Rodo Utility - formuła główna czynności.
::  OLD: \alert/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
::# properties=SERVICE
:: PARAMETRY WY:
::# kind=WY, symbol=OK, type=STRING, name=Czy pobieranie i przetwarzanie zakończone sukcesem [T/N], required=T
::# kind=WY, symbol=SUB, type=STRING, name=Temat wiadomości o błędzie, required=T
::# kind=WY, symbol=BODYT, type=MEMO, name=Treść wiadomości o błędzie, required=T

_args:=params_get();
_in:=_args.in;
_out:=_args.out;
_mp:=_args.mp;

_ok:=1;
_info:='';

{? exec('is_aip','rodo')
|| VAR_DEL.delete('WsLog');
   WsLog:=exec('log','ro_ws');

:: Pobieranie żądań z RODO Utility
   _ok:=exec('ws_get','!rod_req_wget');

:: Przygotowanie odpowiedzi na żądania
   _ok:=exec('ws_proc','!rod_req_wget') & _ok;

:: Przesłanie odpowiedzi do RODO Utility
   _ok:=exec('ws_send','!rod_req_wget') & _ok;

:: Przesłanie zgód na przetwarzanie danych osobowych
   _ok:=exec('ws_perm','!rod_req_wget') & _ok;

   _info:={? _ok || 'OK.' |? WsLog.err<>'' || 'Powstał błąd podczas komunikacji z RODO Utility:\n'+WsLog.err || '' ?};
   WsLog.close();
   VAR_DEL.delete('WsLog')
|| _ok:=1;
   _info:='Współpraca z RODO Utility jest wyłączona (parametr 500).'
?};
_out.OK:={? _ok || 'T' || 'N' ?};
_out.SUB:={? _ok
          || 'Komunikacja z RODO Utility przeprowadzona poprawnie'
          || 'Powstał błąd podczas komunikacji z RODO Utility'
          ?};
_out.BODYT:=_info;
_mp.save(,_out);
_mp.done()


\ws_get
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Pobieranie żądań z RODO Utility
::  OLD: \ws_get/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
exec('czytaj','#stalesys',,XINFO,'AIP_SYS');
_pyt:=exec('koperta','ro_ws',
   '<ass:GetRequests>'+
   '<ass:RequestParams>'+
   '<ass:SystemIdentifier>'+XINFO.AIP_SYS+'</ass:SystemIdentifier>'+
   '</ass:RequestParams>'+
   '</ass:GetRequests>'
);
_fnout:='ws_rodo_get.xml';
_fout:=fopen(_fnout,'bw',1,,1);
{? _fout.is_open()
|| _res:=exec('send','ro_ws',_pyt,_fout);
   _fout.fclose()
|| _res:=-1
?};
{? _res<>200
|| WsLog.log('GetRequest, HTTP: '+$_res);
   _ret:=0
?};
{? _ret
|| _file:=fopen(_fnout,'ur',1,,1);
   {? _file.is_open()
   || VAR_DEL.delete('__obj');
      __obj:=obj_new(12);
      __obj[1]:=0;
      __obj[2]:='';
      __obj[3]:=1;
      __obj[4]:=0;
      __obj[5]:='';
      __obj[6]:=0;
      __obj[7]:='';
      __obj[8]:=-1;
      __obj[9]:=$RO_REQN.tm_stamp();
      __obj[10]:=0;
      __obj[11]:=1;
      __obj[12]:=0;
      RO_REQT.index('KEY'); RO_REQT.prefix();
      RO_REQN.index('AIP_ID'); RO_REQN.prefix();
      RO_REQP.index('KEY'); RO_REQP.prefix();
      RO_REQR.index('RO_REQN'); RO_REQR.prefix();
      RO_REQC.index('CODE'); RO_REQC.prefix();
      x_parse(_file,,,"
         {? __obj[1]=0
         || {? _a='GetRequestsResponse'
            || __obj[1]:=1
            ?}
         |? __obj[1]=1
         || {? _a='Request'
            || __obj[1]:=2;
               __obj[10]:=0;
               __obj[6]:=-1;
               RO_REQN.blank(1);
               RO_REQN.STATUS:='';
               RO_REQN.USER:=OPERATOR.USER().KOD
            ?}
         |? __obj[1]=2
         || {? _a='ArrayParams' | _a='ArrayPurposes'
            || {? __obj[10]=0
               || __obj[10]:=1;
                  RO_REQN.TM_STAMP:=__obj[9];
                  {? RO_REQN.RO_REQT<>null
                  || {? __obj[6]=1
                     || RO_REQN.add()
                     |? __obj[6]=2
                     || RO_REQN.STATUS:='';
                        RO_REQN.put();
                        exec('resclear','ro_req',RO_REQN.ref())
                     ?}
                  || __obj[6]:=0
                  ?}
               ?}
            |? _a='Param' & __obj[1]<>4 & __obj[6]>0
            || __obj[1]:=3;
               RO_REQP.blank(1);
               __obj[7]:=''
            |? _a='Purpose' & __obj[6]>0
            || __obj[1]:=4;
               RO_REQR.blank(1);
               RO_REQR.RES_CODE:=-1
            ?}
         |? __obj[1]=4 & __obj[12]
         || {? _a='Attachment'
            || VAR_DEL.delete('Zal');
               Zal:=obj_new('name','desc','file');
               Zal.file:=0
            |? _a='Data' & var_press('Zal')>0
            || Zal.file:=fopen('ro_att.b64','Uw',1)
            ?}
         ?};
         {? __obj[1]
         || __obj[2]:=''
         ?};
         1
      ","
         {? __obj[1]=1
         || {? _a='Status'
            || __obj[3]:=#__obj[2]
            |? _a='ErrorCode'
            || __obj[4]:=__obj[2]
            |? _a='ErrorMessage'
            || __obj[5]:=__obj[2]
            ?}
         |? __obj[1]=2
         || {? _a='RegistrationDate'
            || _date:=__obj[2];
               RO_REQN.DATA_REJ:=date(#(4+_date),#(2+(5-_date)),#(2+(8-_date)));
               RO_REQN.TIME:=time(#(2+(11-_date)),#(2+(14-_date)),#(2+(17-_date)))
            |? _a='RequestTypeName'
            || _type:=__obj[2];
               RO_REQN.RO_REQT:={? RO_REQT.find_key(_type,) || RO_REQT.ref() || null ?};
               _key:=RO_REQN.RO_REQT().KEY;
               __obj[12]:=_key='PERSONAL_DATA_REMOVE_RET' | _key='PERSONAL_DATA_REMOVE'
            |? _a='RequestDate'
            || _date:=__obj[2];
               RO_REQN.DATE:=date(#(4+_date),#(2+(5-_date)),#(2+(8-_date)))
            |? _a='RequestRegId'
            || RO_REQN.AIP_ID:=__obj[2]
            |? _a='TimeStamp' & __obj[6]=-1
            || _ts:=__obj[2];
               _date:=RO_REQN.DATE;
               _date_r:=RO_REQN.DATA_REJ;
               _time:=RO_REQN.TIME;
               _type:=RO_REQN.RO_REQT;
               RO_REQN.AIP_TS:=_ts;
               __obj[6]:={? RO_REQN.find_key(RO_REQN.AIP_ID,)
                         || {? RO_REQN.AIP_TS=_ts
                            || _re:=0;
                               RO_REQN.TM_STAMP:=__obj[9];
                               {? -RO_REQN.STATUS='s'
                               || RO_REQN.STATUS:='';
                                  exec('ro_reqn_del','ro_req',RO_REQN.ref(),0);
                                  _re:=2
                               ?};
                               RO_REQN.put();
                               _re
                            || RO_REQN.DATE:=_date;
                               RO_REQN.DATA_REJ:=_date_r;
                               RO_REQN.TIME:=_time;
                               RO_REQN.RO_REQT:=_type;
                               RO_REQN.AIP_TS:=_ts;
                               2
                            ?}
                         || 1
                         ?};
               __obj[11]:=__obj[6]
            |? _a='Request'
            || {? __obj[6]>0
               || RO_REQN.get();
                  RO_REQN.STATUS:='N';
                  RO_REQN.put()
               ?};
               __obj[1]:=__obj[11]:=1
            ?}
         |? __obj[1]=3 & __obj[6]>0
         || {? _a='Name'
            || RO_REQP.RO_REQI:=exec('find_ro_reqi','ro_req',__obj[2])
            |? _a='Value'
            || RO_REQP.VAL:=__obj[2]
            |? _a='NewValue'
            || __obj[7]:=__obj[2]
            |? _a='Param'
            || {? __obj[6]>0
               || RO_REQP.RO_REQN:=RO_REQN.ref();
                  {? RO_REQP.RO_REQI & RO_REQP.add()
                  || {? __obj[7]<>''
                     || RO_REQP.memo_set(__obj[7],'NEW_VAL');
                        RO_REQP.memo_put()
                     ?}
                  ?}
               ?};
               __obj[1]:=2
            ?}
         |? __obj[1]=4 & __obj[6]>0
         || {? _a='ProcPurposeName'
            || _code:=__obj[2];
               {? RO_REQC.find_key(_code,) | exec('purpose_add','ro_req',_code,'*'+_code+'* - dodany automatycznie')
               || RO_REQR.RO_REQC:=RO_REQC.ref()
               ?}
            |? _a='ResponseReceived'
            || RO_REQR.RECEIVED:=#__obj[2];
               __obj[11]:=0
            |? _a='TimeStamp'
            || __obj[11]:=1;
               {? __obj[6]>0
               || {? RO_REQR.RO_REQC
                  || _rec:=RO_REQR.RECEIVED;
                     RO_REQR.RO_REQN:=RO_REQN.ref();
                     RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQR.RO_REQN, RO_REQR.RO_REQC);
                     {? RO_REQR.first()
                     || RO_REQR.RECEIVED:=_rec;
                        RO_REQR.put()
                     || RO_REQR.add()
                     ?}
                  ?}
               ?}
            |? _a='Purpose'
            || __obj[1]:=2
            |? var_press('Zal')>0
            || {? _a='Name'
               || Zal.name:=__obj[2]
               |? _a='Description'
               || Zal.desc:=__obj[2]
               |? _a='Data' & Zal.file
               || fclose(Zal.file);
                  Zal.file:=0;
                  exec('base64','ro_ws','ro_att.b64',Zal.name,1);
                  _file:=fopen(Zal.name,'ur',1);
                  {? _file
                  || exec('add_ro_reqz','ro_req',RO_REQR.ref(),_file,Zal.name,Zal.desc);
                     fclose(_file)
                  ?};
                  ferase('ro_att.b64',1);
                  ferase(Zal.name,1);
                  VAR_DEL.delete('Zal')
               ?}
            ?}
         ?};
         1
      ","
         {? __obj[1] & __obj[11]
         || {? var_press('Zal')>0 & Zal.file
            || fwrite(Zal.file,_a)
            || __obj[2]+=_a
            ?}
         ?};
         1
      "
      );
      _file.fclose();
      RO_REQN.for_each("
         {? RO_REQN.TM_STAMP<>__obj[9] & RO_REQN.STATUS='N'
         || exec('ro_reqn_del','ro_req',RO_REQN.ref())
         ?}
      ");
      VAR_DEL.delete('__obj')
   ?}
?};
_ret


\ws_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Wykonywanie zapytań z RODO Utility
::  OLD: \ws_proc/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? exec('is_aip','rodo')
||
:: Obsługa automatyczna żądań
   _sql:=sql(
      'select RO_REQN.REFERENCE as REF, RO_REQT.KEY '+
      'from RO_REQN join RO_REQT '+
      'where RO_REQT.SUPPORT=\'T\' and RO_REQN.STATUS=\'N\''
   );
   RO_REQN.index('SUPPORT'); RO_REQN.prefix();
   RO_REQR.index('RO_REQN');
   {? _sql.first()
   || _data:=date();
      {!
      |? {? RO_REQN.seek(BIT.sqlint(_sql.REF),)
         || {? _sql.KEY<>'PERSONAL_DATA_REMOVE_RET' | RO_REQN.DATE<=_data
            || RO_REQN.cntx_psh();
               exec('process','ro_req',RO_REQN.ref());
               RO_REQN.cntx_pop();
               RO_REQR.cntx_psh();
               RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
               {? RO_REQR.first()
               || {!
                  |? {? RO_REQR.RES_DESC=''
                     || RO_REQR.RES_CODE:=2;
                        RO_REQR.RES_DESC:=exec('desc_ro_req','ro_req',RO_REQR.RES_CODE);
                        RO_REQR.put()
                     ?};
                     RO_REQR.next()
                  !}
               ?};
               RO_REQR.cntx_pop();
               RO_REQN.cntx_psh();
               RO_REQN.prefix();
               RO_REQN.STATUS:='T';
               RO_REQN.DATA_EXE:=date();
               RO_REQN.TIME_EXE:=time();
               RO_REQN.USER_EXE:=OPERATOR.USER().KOD;
               RO_REQN.put();
               RO_REQN.cntx_pop()
            ?}
         ?};
         _sql.next()
      !}
   ?};

:: Obsługa ręczna (pobiera jedynie zakres)
   RO_REQN.index('SUPPORT'); RO_REQN.prefix('N','N');
   RO_REQR.index('RO_REQN');
   {? RO_REQN.first()
   || _typ_info:=exec('find_ro_reqt','ro_req','PERSONAL_DATA_INFO');
      {!
      |? _jest:=0;
         RO_REQR.cntx_psh();
         RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
         {? RO_REQR.first()
         || {!
            |? _jest:=RO_REQR.RES_CODE<>-1;
               _jest=0 & RO_REQR.next()
            !}
         ?};
         RO_REQR.cntx_pop();
         {? _jest=0
         || exec('ws_proc1','ro_ws',_typ_info)
         ?};
         RO_REQN.next()
      !}
   ?}
?};
_ret


\ws_send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Odpowiadanie na zapytania z RODO Utility
::  OLD: \ws_send/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
_max:=15;
_ret:=1;
{!
|? RO_REQN.index('STATUS'); RO_REQN.prefix('T');
   {? RO_REQN.first()
   || _fnin:='ws_rodo_postres.xml';
      _file:=fopen(_fnin,'uw',1,,1);
      {? _file.is_open()
      || exec('czytaj','#stalesys',,XINFO,'AIP_SYS');
         fwrite(_file,'<?xml version="1.0" encoding="utf-8"?>');
         fwrite(_file,exec('koperta2','ro_ws',0));
         fwrite(_file,
            '<ass:PostResponses>'+
            '<ass:ResponseParams>'+
            '<ass:SystemIdentifier>'+XINFO.AIP_SYS+'</ass:SystemIdentifier>'+
            '<ass:ArrayResponseElement>'
         );
         _ile:=0;
         {!
         |? RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
            _size:=RO_REQR.size();
            {? _ile+_size<=_max
            || exec('ws_send2','!rod_req_wget',_file);
               _ile+=_size;
               RO_REQN.next()
            ?}
         !};
         fwrite(_file,
            '</ass:ArrayResponseElement>'+
            '</ass:ResponseParams>'+
            '</ass:PostResponses>'
         );
         fwrite(_file,exec('koperta2','ro_ws',1));
         _file.fclose();
         {? _ile

         || _fin:=fopen(_fnin,'br',1,,1);
            {? _fin.is_open()
            || _fnout:='ws_rodo_getres.xml';
               _fout:=fopen(_fnout,'bw',1,,1);
               {? _fout.is_open()
               || _res:=exec('send','ro_ws',_fin,_fout);
                  _fout.fclose()
               || _res:=-1;
                  WsLog.log('Błąd zapisu do pliku: '+_fnout)
               ?};
               &_fout;
               _fin.fclose()
            || _res:=-1
            ?};
            &_fin;
            {? _res=200
            || _file2:=fopen(_fnout,'ur',1,,1);
               {? _file2.is_open()
               || _ret:=exec('ws_send3','!rod_req_wget',_file2);
                  _file2.fclose()
               || _ret:=0;
                  WsLog.log('Błąd odczytu z pliku: '+_fnout)
               ?};
               &_file2
            || WsLog.log('PostResponse, HTTP: '+$_res);
               _ret:=0
            ?}


         ?}
      || _ret:=0;
         WsLog.log('Błąd zapisu do pliku: '+_fnin)
      ?};
      &_file;
      _ret
   ?}
!};
_ret


\ws_send2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Odpowiadanie na bieżące zapytania z RODO Utility
::   WE: _a - uchwyt do pliku z odpowiedzią dla bieżącego zapytania
::  OLD: \ws_send2/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref());
{? RO_REQR.first()
|| {!
   |? fwrite(_a,
         '<ass:ResponseElement>'+
         '<ass:RequestRegId>'+RO_REQN.AIP_ID+'</ass:RequestRegId>'+
         '<ass:ResponseDesc>'+RO_REQR.RES_DESC+'</ass:ResponseDesc>'+
         '<ass:ResponseCode>'+$RO_REQR.RES_CODE+'</ass:ResponseCode>'+
         '<ass:ProcPurposeName>'+RO_REQR.RO_REQC().CODE+'</ass:ProcPurposeName>'
      );
      {? RO_REQN.RO_REQT().KEY<>'PERSONAL_DATA_REMOVE_RET'
      || exec('write_att','ro_ws',_a,'ass:ArrayAttachments','ass:Attachment',RO_REQR.ref())
      ?};
      exec('write_param','ro_ws',_a,RO_REQN.ref(),RO_REQR.RO_REQC,'ass:ArrayParams','ass:Param');
      fwrite(_a,'</ass:ResponseElement>');
      RO_REQR.next()
   !};
   1
?}


\ws_send3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.22]
:: OPIS: Pobranie odpowiedzi po wysłaniu informacji o przetworzonych danych
::   WE: _a - uchwyt z plikiem z odpowiedzią
::  OLD: \ws_send3/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__obj');
__obj:=obj_new(5);
__obj[1]:=0;
__obj[4]:='';
RO_REQN.index('AIP_ID'); RO_REQN.prefix();
x_parse(_a,,,"
   {? __obj[1]=0
   || {? _a='PostResponsesResponse'
      || __obj[1]:=1
      ?}
   |? __obj[1]=1
   || {? _a='PostResponse'
      || __obj[1]:=2
      ?}
   ?};
   {? __obj[1]
   || __obj[2]:=''
   ?};
   1
","
   {? __obj[1]=1
   || {? _a='Status'
      || __obj[3]:=#__obj[2]
      |? _a='ErrorCode'
      || __obj[4]:=__obj[2]
      |? _a='ErrorMessage'
      || __obj[5]:=__obj[2]
      ?}
   |? __obj[1]=2
   || {? _a='PostResponse'
      || __obj[1]:=1
      |? _a='RequestRegId'
      || _id:=__obj[2];
         {? RO_REQN.find_key(_id,) & RO_REQN.STATUS<>'S'
         || {? exec('save_served','rodo')
            || RO_REQN.cntx_psh();
               RO_REQN.prefix();
               RO_REQN.STATUS:='S';
               RO_REQN.DATA_RES:=date();
               RO_REQN.TIME_RES:=time();
               RO_REQN.put();
               RO_REQN.cntx_pop()
            || exec('ro_reqn_del','ro_req',RO_REQN.ref())
            ?}
         ?}
      ?}
   ?};
   1
","
   {? __obj[1]
   || __obj[2]+=_a
   ?};
   1
"
);
_status:=__obj[3];
{? _status=0 | __obj[4]<>''
|| WsLog.log('PostResponse\r\nCODE: '+__obj[4]+', MESSAGE: '+__obj[5])
?};
VAR_DEL.delete('__obj');
_status


\ws_perm
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Wysłanie informacji o zgodach na przetwarzanie danych osbowych
::  OLD: \ws_prem/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
_ok:=1;
_sql:=sql(
   'select RO_REQN.REFERENCE as REF '+
   'from RO_REQN join RO_REQT '+
   'where RO_REQT.SUPPORT=\'P\' and RO_REQN.STATUS=\'P\''
);
{? _sql.first()
|| RO_REQN.cntx_psh();
   RO_REQN.prefix();
   {!
   |? {? RO_REQN.seek(BIT.sqlint(_sql.REF),)
      || RO_PERM.index('AGREE_D');
         RO_PERM.prefix(RO_REQN.ref());
         {? RO_PERM.first()
         || _ok:=exec('ws_perm_upd','!rod_req_wget',1)
         || _ok:=exec('ws_perm_upd','!rod_req_wget',0)
         ?}
      ?};
      _ok & _sql.next()
   !};
   RO_REQN.cntx_pop()
?};
_ok


\ws_perm_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Wysłanie informacji o jednej zgodzie na przetwarzanie danych osbowych
::   WE: _a - typ operacji: 1-dodanie/modyfikacja 0-usunięcie zgody
::  OLD: \ws_perm_upd/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
_fnin:='ws_rodo_agrpost.xml';
_file:=fopen(_fnin,'uw',1,,1);
{? _file.is_open()
|| exec('czytaj','#stalesys',,XINFO,'AIP_SYS');
   fwrite(_file,'<?xml version="1.0" encoding="utf-8"?>');
   fwrite(_file,exec('koperta2','ro_ws',0));
   {? _a=0
   || _type:='DeleteAgreements';
      fwrite(_file,
         '<ass:DeleteAgreements>'+
         '<ass:ArrayAgreementsToDelete>'+
         '<ass:SystemIdentifier>'+XINFO.AIP_SYS+'</ass:SystemIdentifier>'+
         '<ass:Agreements>'+
         '<ass:Agreement>'
      )
   |? RO_REQN.AIP_ID=''
   || _type:='PostAgreements';
      fwrite(_file,
         '<ass:PostAgreements>'+
         '<ass:ArrayAgreementsData>'+
         '<ass:SystemIdentifier>'+XINFO.AIP_SYS+'</ass:SystemIdentifier>'+
         '<ass:Agreements>'+
         '<ass:Agreement>'
      )
   || _type:='ModifyAgreement';
      fwrite(_file,
         '<ass:ModifyAgreement>'+
         '<ass:ModifyAgreementData>'+
         '<ass:SystemIdentifier>'+XINFO.AIP_SYS+'</ass:SystemIdentifier>'+
         '<ass:ModifiedAgreement>'
      )
   ?};
   {? _a=0
   || fwrite(_file,
         '<ass:ExternalIdentifier>'+$RO_REQN.ref()+'</ass:ExternalIdentifier>'
      )
   || fwrite(_file,
         '<ass:AgreeDate>'+exec('toDateTime','ro_ws',RO_PERM.AGREE_D)+'</ass:AgreeDate>'+
         {? RO_PERM.FINISH_D<>date(0,0,0)
         || '<ass:FinishDate>'+exec('toDateTime','ro_ws',RO_PERM.FINISH_D)+'</ass:FinishDate>'
         || ''
         ?}+
         {? RO_PERM.F_REASON<>''
         || '<ass:FinishReason>'+RO_PERM.F_REASON+'</ass:FinishReason>'
         || ''
         ?}+
         {? RO_PERM.RO_PERD
         || '<ass:AgreementDesc>'+RO_PERM.RO_PERD().DESC+'</ass:AgreementDesc>'
         || ''
         ?}+
         '<ass:AgreementState>ACTIVE</ass:AgreementState>'+
         '<ass:ProcPurposeName>'+RO_PERM.RO_REQC().CODE+'</ass:ProcPurposeName>'+
         '<ass:ExternalIdentifier>'+$RO_REQN.ref()+'</ass:ExternalIdentifier>'
      );
      {? RO_REQN.AIP_ID=''
      || exec('write_param','ro_ws',_file,RO_PERM.RO_REQN,RO_PERM.RO_REQC,'ass:Params','ass:Param');
         RO_REQR.index('RO_REQN'); RO_REQR.prefix(RO_REQN.ref(),RO_PERM.RO_REQC);
         {? RO_REQR.first()
         || exec('write_att','ro_ws',_file,'ass:Attachments','ass:Attachment',RO_REQR.ref())
         ?}
      ?}
   ?};
   {? _a=0
   || fwrite(_file,
         '</ass:Agreement>'+
         '</ass:Agreements>'+
         '</ass:ArrayAgreementsToDelete>'+
         '</ass:DeleteAgreements>'
      )
   |? RO_REQN.AIP_ID=''
   || fwrite(_file,
         '</ass:Agreement>'+
         '</ass:Agreements>'+
         '</ass:ArrayAgreementsData>'+
         '</ass:PostAgreements>'
      )
   || fwrite(_file,
         '</ass:ModifiedAgreement>'+
         '</ass:ModifyAgreementData>'+
         '</ass:ModifyAgreement>'
      )
   ?};
   fwrite(_file,exec('koperta2','ro_ws',1));
   _file.fclose();
   &_file;

   _fin:=fopen(_fnin,'br',1,,1);
   {? _fin.is_open()
   || _fnout:='ws_rodo_agrres.xml';
      _fout:=fopen(_fnout,'bw',1,,1);
      {? _fout.is_open()
      || _res:=exec('send','ro_ws',_fin,_fout);
         _fout.fclose()
      || _res:=-1;
         WsLog.log('Błąd zapisu do pliku: '+_fnout)
      ?};
      _fin.fclose()
   || _res:=-1
   ?};
   {? _res=200
   || _file:=fopen(_fnout,'ur',1,,1);
      {? _file.is_open()
      || _ret:=exec('ws_perm2','!rod_req_wget',_file,_type);
         _file.fclose()
      || _ret:=0;
         WsLog.log('Błąd odczytu z pliku: '+_fnout)
      ?}
   || WsLog.log(_type+', HTTP: '+$_res);
      _ret:=0
   ?}
|| _ret:=0;
   WsLog.log('Błąd zapisu do pliku: '+_fnin)
?};
_ret


\ws_perm2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.52]
:: OPIS: Odczytanie odpowiedzi na wysłanie zgody na przetwarzanie danych osobowych
::   WE: _a - uchwyt do pliku z odpowiedzią
::       _b - typ komunikatu
::  OLD: \ws_perm2/ro_ws.fml
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__obj');
__obj:=obj_new(7);
__obj[1]:=1;
__obj[4]:='';
__obj[7]:=_b;
RO_REQN.cntx_psh();
RO_REQN.index('AIP_ID'); RO_REQN.prefix();
x_parse(_a,,,"
   {? __obj[1]
   || __obj[2]:=''
   ?};
   1
","
   {? __obj[1]=1
   || {? _a='Status'
      || __obj[3]:=#__obj[2]
      |? _a='ErrorCode'
      || __obj[4]:=__obj[2]
      |? _a='ErrorMessage'
      || __obj[5]:=__obj[2]
      |? _a='AgreementId'
      || __obj[6]:=__obj[2]
      |? _a='ExternalIdentifier'
      || _ref:=__obj[2];
         {? 7+_ref='ro_reqn' & RO_REQN.seek(BIT.sqlint(_ref),)
         || {? __obj[7]='DeleteAgreements'
            || exec('ro_reqn_del','ro_req',RO_REQN.ref())
            || RO_REQN.AIP_ID:=__obj[6];
               RO_REQN.STATUS:='S';
               RO_REQN.DATA_RES:=date();
               RO_REQN.TIME_RES:=time();
               RO_REQN.put()
            ?}
         ?}
      ?}
   ?};
   1
","
   {? __obj[1]
   || __obj[2]+=_a
   ?};
   1
"
);
_status:=__obj[3];
{? _status & RO_REQN.STATUS<>'S' & _b='ModifyAgreement'
|| RO_REQN.STATUS:='S';
   RO_REQN.DATA_RES:=date();
   RO_REQN.TIME_RES:=time();
   RO_REQN.put()
?};
RO_REQN.cntx_pop();
{? _status=0 | __obj[4]<>''
|| WsLog.log(_b+'\r\nCODE: '+__obj[4]+', MESSAGE: '+__obj[5])
?};
VAR_DEL.delete('__obj');
_status

:Sign Version 2.0 jowisz:1028 2019/10/14 09:20:07 385c222a153677ef11bd3ea4c90299aeeb33fabd08ec3d2e813461de78dce0c6e1305ac47f3202d6c58b5705b558e15b8efa51f6127722eb3faf41146de5f000a6ca2630d64a92b108b73d1cc751af4600bf49d2d4fcdf474f33847b59198ceffc32b98957b7022e7f3e39439ba573fe3a547109869bf08791050c6cd14c870f
