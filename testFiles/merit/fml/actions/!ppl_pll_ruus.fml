:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_pll_ruus.fml
:: Utworzony: 15.02.2016
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_PLL_RUUS - Rejestracja ulg z US
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Rejestracja ulg z US - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::# parses=exec('parses','!ppl_pll_ruus')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=O, type=_O, name=Wskazanie listy płac, required=N
::
::# kind=WY, symbol=P, type=_P, name=Wskazanie pracownika, required=N
::
_par:=params_get();
params_set(_par);
_mp:=_par.mp;
_in:=_par.in;
_akcja:=_mp.akcja();

_result:='';

_uidref:=exec('ref2uid','#table',_in.P);
{? _uidref=''
|| _result:=exec('error','!ppl_pll_ruus')

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   || _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select','!ppl_pll_ruus');
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Rejestracja ulg z US - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj ulgi z US: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj ulgi z US: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj ulgi z US: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj ulgi z US'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie ulg z US niemożliwe.\nNie znaleziono pracownika.'


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła ustalająca wartości parametrów sesji.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;

{? var_pres('O',_in)=type_of(null()) & _in.O<>null()
|| _args:=__PARSES.args('ListaPłac');
   _args.REF:=_in.O;
   __PARSES.setVal('ListaPłac',_args)
?};

1


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań.
::   WE: _a [REFERENCE] - Wskazanie pracownika.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_par:=params_get();
_in:=_par.in;

:: podczytanie wartości z parametrów wejściowych
_p_ref:={? var_pres('P',_in)=type_of(null()) || _in.P || null() ?};
_o_ref:={? var_pres('O',_in)=type_of(null()) || _in.O || __PARSES.getVal('ListaPłac').REF ?};

P.cntx_psh();
P.prefix();
{? _p_ref<>null() & P.seek(_p_ref)
|| {? _o_ref<>null()
   || exec('wybierz','lista_plac',_o_ref)
   ?};
   OSOBA.cntx_psh();
   P.OSOBA();
   ULGI_POD.cntx_psh();
   ULGI_POD.index('ULGIUS');
   ULGI_POD.prefix(P.OSOBA);
   ULGI_POD.win_sel('WER_P');
   ULGI_POD.win_edit('RED');
   _result:=ULGI_POD.select(,1);
   ULGI_POD.cntx_pop();
   OSOBA.cntx_pop()
|| _result:=exec('error','!ppl_pll_ruus')
?};
P.cntx_pop();
_result


\ulgi_pod_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed dołączeniem rekordu ULGI_POD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: wymagane wyczyszczenie zmiennej przed blankiem
ZMIENNE.RODZAJ='';
ULGI_POD.blank(1);
exec('ulgi_pod_efld_opt','!ppl_pll_ruus','*',ULGI_POD,'RED');
1


\ulgi_pod_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed poprawieniem rekordu ULGI_POD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ulgi_pod_efld_opt','!ppl_pll_ruus','*',ULGI_POD,'RED');
1


\ulgi_pod_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabeli ULGI_POD z doklejonym oknem redagowania tabeli P);
::       - w ramach obszaru roboczego (okno wertowania tabeli ULGI_POD jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=ULGI_POD
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\ulgi_pod_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Usuń" przed.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('sum_up','!ppl_pll_ruus');

_text:='';
{? _tab.first()
|| _listy:='';
   {!
   |? _listy+={? +_listy || ', ' || '\n' ?}+_tab.LT;
      _tab.next()
   !};
   _text:='Ulgi z roku %1 są rozliczone na listach płac: %2.'@[$POLA_GRP.INT_1,_listy];
   _text+='\n\n'
?};

{? FUN.ask(_text+'Czy usunąć bieżący wiersz?'@)
|| {? ULGI_POD.del(,1)
   || {? ULGI_POD.size()=0
      || POLA_GRP.INT_1:=0;
         POLA_GRP.REAL_1:=0;
         POLA_GRP.REAL_2:=0
      || exec('sum_up','!ppl_pll_ruus')
      ?};
      {? _tab.first()
      || FUN.info('Należy skorygować listy płac: %1.'@[_listy])
      ?}
   ?}
?}


\ulgi_pod_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Po odświeżeniu" okna WER tabeli ULGI_POD w grupie. Ustawia akcje i przyciski.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
{? var_pres('_par')>100 &
   var_pres('cfg',_par)>100 &
   var_pres('done',_par.cfg)>100 &
   var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
|| _ag+=_par.cfg.done.noempty+':'+_par.cfg.done.empty
?};
~~


\ulgi_pod_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Przed wyświetleniem rekordu tabeli ULGI_POD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: zsumowanie wykorzystania ulg
POLA_GRP.INT_1:=ULGI_POD.R;
exec('sum_up','!ppl_pll_ruus');
~~


\sum_up
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Na podstawie list plac wylicza wykorzystane w danym roku ulgi podatkowe.
::   WE:
::   WY: [object] - objekt z informfacjami o listach płac na których rozlilczone sa ulgi ze wskazanego roku
::  OLD: \sum_up/kali.fml
::----------------------------------------------------------------------------------------------------------------------
echo('Odczyt informacji o wykorzystaniu ulg...'@);
_result:=tab_tmp(,
   'LT','STRING[8]','Symbol listy'
);
_rok:=POLA_GRP.INT_1;
POLA_GRP.REAL_1:=POLA_GRP.REAL_2:=0;

_zlicz:="
   _sum:=0;
   _a.prefix(exec('ref_firma','ustawienia'),_b,_c);
   {? _a.first || {! |? _sum+=_a.KW$2; _a.next !} ?};
   _sum
";

O.cntx_psh();
O_P.cntx_psh();
O_P.index('OS_RMP');
O_P.prefix(exec('ref_firma','ustawienia'),'T',OSOBA.ref(),_rok);
{? O_P.first()
|| LS.cntx_psh();
   {!
   |? O_P.O();
      {? FUNKCJE.CZY_POD()
      || LS.use(O.LT);
         LS.index('OSOBAKOD');
         _kwota_800:=_zlicz(LS,OSOBA.ref(),800);
         POLA_GRP.REAL_1+=_kwota_800;
         _kwota_795:=_zlicz(LS,OSOBA.ref(),795);
         POLA_GRP.REAL_2+=_kwota_795;
         {? _kwota_795 | _kwota_800
         || _result.LT:=(~-O.LT);
            _result.add(1)
         ?}
      ?};
      O_P.next()
   !};
   LS.cntx_pop()
?};
O_P.cntx_pop();
O.cntx_pop();
echo();
_result


\ulgi_pod_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS
:: OPIS: Weryfikuje poprawnosc wprowadzanych informacji o ulgach podatkowych.
::   WY: 1 jesli dane zostaly uznane za poprawne lub akronim pola, ktore nie zawiera poprawnych danych
::  OLD: \spr_up/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=__CHK.record(ULGI_POD,,'R','D');

{? _result<>''
|| _result
|? ULGI_POD.R<0
|| FUN.emsg('Błędny rok podatkowy.'@);
   _result:='R'
|? ULGI_POD.R<>(ULGI_POD.D~1)
|| FUN.emsg('Data przyznania ulgi jest niezgodna z podanym rokiem.'@);
   _result:='D'
|? (ULGI_POD.KWD*ULGI_POD.KWP)<>0
|| FUN.emsg('Można zarejstrować ulgę albo od kwoty dochodu, albo od kwoty podatku.'@);
   _result:='KWD'
|? ULGI_POD.KWD<=0 & ULGI_POD.KWP<=0
|| FUN.emsg('Należy podać kwotę dochodu lub kwotę podatku.'@);
   _result:='KWD'
|| _result:=1
?};

_result


\ulgi_pod_kwd_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po redagowaniu pola 'KWD' tabeli ULGI_POD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ulgi_pod_efld_opt','!ppl_pll_ruus')


\ulgi_pod_kwp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po redagowaniu pola 'KWP' tabeli ULGI_POD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('ulgi_pod_efld_opt','!ppl_pll_ruus')


\ulgi_pod_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli ULGI_POD.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(ULGI_POD)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='KWD'
|| _tab.efld_opt(_we,'enable='+$(ULGI_POD.KWD=0),ULGI_POD,'KWP')
?};

{? _fld='' | _fld='KWP'
|| _tab.efld_opt(_we,'enable='+$(ULGI_POD.KWP=0),ULGI_POD,'KWD')
?};

1

:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:19 c894ed0fa21305280519c0110a59e63ff27a03a7e4e6ecd3b16b2d78b49158693a459fa47934109793841c660206cbfacb267f198732c380bcedf6fb7299ed07847c9b1b549b772510f3b9be8968d792fa5c49484a024d8358eae6292e5d41a33623470f08410ede615ee0ec28894b0cf581213cddf831d0c42428f6e363fe1a
