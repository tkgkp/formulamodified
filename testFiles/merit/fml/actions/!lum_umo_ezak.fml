:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_umo_ezak.fml
:: Utworzony: 15.02.2019
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Formuły czynności LUM_UMO_EZAK
::            Zakończenie umowy cyklicznej
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Czynność LUM_UMO_EZAK - formuła główna
::   WE: _a - [obj_new] - parametry wejsciowe czynności
::       _b - [obj_new] - parametry wewnętrzne czynności
::       _c - [obj_new] - parametry wyjściowe czynności
::       _d - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ
::# kind=WE,   symbol=UM,  type=_UM,  name=Umowa cykliczna,     required=N, keyref=T
::# kind=WE,   symbol=STU, type=_STU, name=Status umowy,        required=N, keyref=N, fml_val="exec('wyb_stu','!lum_umo_ezak')"
::# kind=WY,   symbol=UM,  type=_UM,  name=Umowa cykliczna,     required=N
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

exec('init','lum');

_akcja:=_mp.akcja();
_auto:=_akcja<>'Zakończenie' & (_mp.isAutoRun() | _mp.isService());
_proc:=_mp.pathProc();
_ToDo:=_mp.pathTodo();
_cancel:=0;

{? ~(var_pres('UM',_in)=type_of(null()) & _in.UM)
|| _refum:=exec('selUmowy','umowy',2);
   {? _refum<>null()
   || _in.UM:=_refum;
      _mp.save(,_in)
   || _cancel:=1
   ?}
?};
{? _cancel
|| _mp.cancel()
|? ~(var_pres('UM',_in)=type_of(null()) & _in.UM)
|| _mp.error('Brak wymaganego parametru UM.')
|| exec('zle_psh','open_tab');
   UM.cntx_psh();
   UM.prefix();
   {? ~UM.seek(_in.UM)
   || _mp.error('Nie znaleziono umowy.'@)
   || {? _r_lock:=exec('r_lock_one','#table',UM,UM.ref())
      || _var_umpop:=exec('var_umpop','umowy');
         _var_umpop.KH:=UM.KH;
         _var_umpop.KH_ODB:=UM.KH_ODB;
         _var_umpop.HAN:=UM.HAN;
         _var_umpop.DP:=UM.DP;
         _var_umpop.DPO:=UM.DPO;
         _var_umpop.OD:=UM.OD;
         _var_umpop.DO:=UM.DO;
         _var_umpop.TYP_HR:=UM.TYP_HR;
         _var_umpop.FAS:=UM.FAS;
         _var_umpop.CB:=UM.CB;
         _var_umpop.NRT:=UM.NRT;
         _var_umpop.PO_FIRST:=0;

         params_set('context',params_get(),'var_umpop',_var_umpop);

         {? _akcja='Zakończenie' | _auto | _proc
         || exec('zakonczenie','!lum_umo_ezak',_auto)
         |? _ToDo
            | _mp.pathArea() & _akcja=''
         || _win_red:=exec('um_win_edit','umowy');
            _ff:="params_exec('um_pozycje_red','umowy')";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=begin,display=1'['&Pozycje'@],_ff);
            _ff:="params_exec('um_zakonczenie_todo','!lum_umo_ezak'); 'key:Esc'";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['Zakoń&czenie'@],_ff);
            _ff:="'key:Esc'";
            UM.win_ebtn(_win_red,'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
            UM.win_edit(_win_red);
            exec('set_efld_opt','umowy',_win_red);
            UM.display();
::          Usunięcie definicji tymczasowych okien
            UM.win_edit(''); UM.win_edel(_win_red)
         || _mp.error('Nieobsługiwana ścieżka.')
         ?};
         exec('r_unlock_one','#table',UM,UM.ref(),_r_lock)
      || exec('who_rlock_um','umowy')

      ?}
   ?};
   UM.cntx_pop();
   exec('zle_pop','open_tab')
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('UM',_in)<>type_of(~~) & _in.UM
|| 'Zakończenie umowy cyklicznej: %1'@@[exec('record','#to_string',_in.UM)]
|| 'Zakończenie umowy cyklicznej'@@
?}


\permissions
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła na uprawnienia dla czynności
::   WE: params_get().in - parametry wejściowe czynności
::           params_get().user - użytkownik dla którego sprawdzane są uprawnienia
::           params_get().mp - Menedżer Procesów
::   WY: 0 - użytkownik nie ma uprawnień do czynności
::       1 - użytkownik ma uprawnienia do czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;
_wyn:=1;
_wyn


\umowa_zakonczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zakończenie umowy cyklicznej
::  OLD: \um_stat/um.fml
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='LUM_UMO_EZAK';
_params.UIDREF:=UM.uidref();
_params.AKCJA:='Zakończenie';
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'UM',UM.ref());
exec('mp_run','#b__box',_params);
~~


\um_stat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009]
:: OPIS: zmiana statusu umowy
::   WE: _a-1-zakończenie umowy
::       [_b] - status umowy
::   WY: 1-powiodło się 0-nie
::  OLD: \um_stat/um.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_stu:={? var_pres('_b')=type_of(null()) || _b || null() ?};

UM.cntx_psh();
{? UM.r_lock(1,1,1)
||
   _ok:=1;
   UMO.HNK:='';
   UP.index('UM');
   UP.prefix(UM.ref());
   {? ~UP.first()
   ||
      FUN.info('Umowa nie posiada pozycji.\nZmiana statusu niemożliwa.'@);
      _ok:=0
   ?};

   {? _ok=1 & UM.STU().RODZ='' & UM.STU().A='N'
   ||
      FUN.info('Aby uaktywnić umowę należy usunąć ostatnią zmianę dla umowy.'@);
      _ok:=0
   ?};

   STU.win_sel('SLO');
   STU.index('RODZ');
   STU.prefix();
   STU.f_clear();
   STU.f_set('KOD',,'STU.A=\'N\' and STU.RODZ=\'\'');
   {? _stu<>null() & STU.f_seek(_stu)
   || _stu_ref:=STU.ref()
   |? STU.f_size()=1 & STU.f_first()
   || _stu_ref:=STU.ref()
   || _stu_ref:=null()
   ?};
   STU.win_sel('SEL');
   {? _ok=1 & (_stu_ref<>null() | STU.select())
   || _stu_ref:=STU.ref();
      VAR_DEL.delete('__stu_gz');
      __stu_gz:=STU.GZ;
::    przed nowym statusem
      _stu_f:=STU.F;
      {? UM.STU<>_stu_ref
      || {? ($_stu_f)(0)
         || _fp:=($UM.STU().FP)(0);
            {? type_of(_fp)=type_of(0) & _fp<>0
            || UM.cntx_psh();
               {? _fp>0
               || UM.prefix();
                  UM.STU:=_stu_ref;
                  {? UM.STU().RODZ='' & UM.STU().A='N' & UM.DO=date(0,0,0)
                  ||
::                zmiana statusu na zakonczona
                     UMAN.index('POZ');
                     UMAN.prefix(UM.ref());
                     {? UMAN.last() & UMAN.D<>date(0,0,0)
                     ||
                        UM.DO:=UMAN.D;
                        UM.put();
                        UM.cntx_psh();
                        exec('um_odt_b','umowy_zlecenia',UMAN.BIE().DPO);
                        UM.cntx_pop()
                     ?}
                  ?};
                  UM.STU:=_stu_ref;
                  {? UM.put(1) || _res:=1 ?}
               || UM.prefix();
                  UM.STU:=_stu_ref;
                  {? UM.put(1) || _res:=1 ?}
               ?};
               UM.cntx_pop()
            ?}
         ?}
      || FUN.info('Nie można zmienić na ten sam status.'@)
      ?};
      VAR_DEL.delete('__stu_gz')
   ?};
   STU.f_clear();
   UM.r_unlock()
|| {? FUN.ask('Dokument obsługuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@) & UM.r_lock(1,,1)
   || UM.r_unlock()
   ?}
?};
UM.cntx_pop();
_res


\zakonczenie
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Zakończenie umowy
::   WE: [_a] - 1-automatycznie 0-nie(domyślnie)
::       [_b] - status umowy
::   WE: params_get()   - ustawiane w exec('main','!lum_umo_ezak')
::----------------------------------------------------------------------------------------------------------------------
_auto:={? var_pres('_a')=type_of(1) || _a || 0 ?};
_stu:={? var_pres('_b')=type_of(null()) || _b || null() ?};
_mp:=params_get().context.mp;
_in:=params_get().context.in;

_stu:={?  var_pres('STU',_in)=type_of(null()) & _in.STU || _in.STU || null() ?};

_result:=0;

{? UM.STAT_REJ='N'
|| FUN.info('Nie zakończono jeszcze rejestracji umowy cyklicznej.\nZakończenie umowy niemożliwa.'@);
   _mp.error('Nie zakończono jeszcze rejestracji umowy cyklicznej. Zakończenie umowy niemożliwa.');
   _result:=1
|? UM.STAT_REJ='Z' & ~UM.AN
|| FUN.info('Nie zaakceptowano jeszcze umowy cyklicznej.\nZakończenie umowy niemożliwa.'@);
   _mp.error('Nie zaakceptowano jeszcze umowy cyklicznej. Zakończenie umowy niemożliwa.');
   _result:=1
|? UM.STU().RODZ<>'E'
|| FUN.info('Zakończyć można tylko aneksowaną umowę cykliczną.\nZakończenie umowy niemożliwa.'@);
   _mp.error('Zakończyć można tylko aneksowaną umowę cykliczną. Zakończenie umowy niemożliwa.');
   _result:=1
|? _auto | FUN.ask('Zakończyć umowę cykliczną %1?'@[UM.SYM])
|| {? exec('um_stat','!lum_umo_ezak',1,_stu)
   || UM.get();
      UM.STAT_REJ:='X';
      UM.put(1);
      _result:=1;
      _mp.done()
   ?}
?};

_result


\um_zakonczenie_todo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Umowa cykliczna - Akceptuj z todo
::   WE: params_get()   - ustawiane w exec('main','!lum_umo_ezak')
::----------------------------------------------------------------------------------------------------------------------
params_exec('zakonczenie','!lum_umo_ezak')


\wyb_stu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Wybór statusu
::----------------------------------------------------------------------------------------------------------------------
exec('stu_wyb','params',null(),"STU.RODZ='' & STU.A='N'",-1)

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 9a30c3c865ffbfc7eb8253a8f0fed8297a20db1509b2525475c732111a35865c1fdf5f8289d28be860be52ab47fc6f5faf29a51534ebe91b389facabe51694e31b01dd6912d438962b96b2ba7aaf200828f08331d5f42d49c2d23ec487978e9d0dd8a2d62e2f04ca9cefdc4a2b5873ef1d9c334cb3c90f7baf5542fe8c7f64a3
