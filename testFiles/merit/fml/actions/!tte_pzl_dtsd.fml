:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dtsd.fml
:: Utworzony: 09.06.2016
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DTSD - Dołączenie surowca zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Główna formuła czynności dołączenia surowca zlecenia (TTE_PZL_DTSD)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['ZL','TTE_PZL_DTSD'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
|? _in.ZL=~~
|| _in.ZL:=null()
?};

:: PARAMETRY WY:
::# kind=WY, symbol=TMAT, type=_TMAT, name=Surowiec technologii zlecenia, required=N
{? var_pres('TMAT',_out)<>type_of(~~) & var_pres('TMAT',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=GEN_ZL, type=STRING, name="Czy można generować zlecenie półfabrykatowe (T, N)", required=N
{? var_pres('GEN_ZL',_out)<>type_of(~~) & var_pres('GEN_ZL',_out)<>type_of('') || return() ?};
::# kind=WY, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};

_clean_result:=params_exec('clean','!tte_pzl_dtsd',_mp,_in);
{? ~_clean_result.RESULT
|| return()
?};

{? _in.ZL
|| {? var_pres('_context')>100 & var_pres('env_mater',_context)>100
   || params_set('env_mater',_context.env_mater)
   || params_set('env_mater',exec('env_mater','tech_mater'))
   ?};

   {? _mp.akcja()='DOŁĄCZ_ZL'
   || _tktl:=exec('FindAndGet','#table',TKTL,exec('FindAndGet','#table',ZL,_in.ZL,,"RTKTL",''),,"ref()",null());
      _ktm:=exec('FindAndGet','#table',ZL,_in.ZL,,"ZL.KTM",null);
      exec('tktl_cntx_psh','tech_common');
      exec('tktl_use','tech_common');
      exec('start_tpar','tech_param',_ktm,_tktl);
      VAR.A_OP:=null();
      TMAT.index('NNL');
      TMAT.prefix(_tktl);
      VAR.A_KTL:=_tktl;
      _tmat:=exec('add','!tte_pzl_dtsd');
      {? _tmat<>null()
      || _out.TMAT:=_tmat;
         _out.GEN_ZL:={? exec('tmat4zl','tech_mater',_tmat) || 'T' || 'N' ?};
         _out.ZL:=_in.ZL;
         _mp.save(,_out);
         _mp.done()
      ?};
      exec('tktl_cntx_pop','tech_common')

   |? _mp.akcja()='DOŁĄCZ'
   || _tmat:=exec('add','!tte_pzl_dtsd');
      {? _tmat<>null()
      || _out.TMAT:=_tmat;
         _out.GEN_ZL:={? exec('tmat4zl','tech_mater',_tmat) || 'T' || 'N' ?};
         _out.ZL:=_in.ZL;
         _mp.save(,_out);
         _mp.done()
      ?}

   || _msg:='Błąd konfiguracji procesu — nieobsługiwany kontekst wywołania czynności.'@@;
      FUN.emsg(_msg);
      _mp.error(_msg)
   ?}

|? _mp.pathProc()
|| ZL.cntx_psh();
   ZL.clear();
   _join:='join ZTP';
   _where:=
      'ZL.STAN=''O'' and '
      'ZTP.WP=''P'' and '
      'ZTP.TECH=''T'' and '
      'ZL.RODZAJ=''P''';
   ZL.f_set('SYM',_join,_where);
   exec('icons_slo_sl','zl_head');
   ZL.win_sel('SLO_SL');
   ZL.actions('SLO_SL','XY','W');
   {? ZL.select()
   || _env:=exec('env','zl_view');
      _env.ZL:=ZL.ref();
      params_set('env',_env);
      exec('tktl_cntx_psh','tech_common');
      exec('tktl_use','tech_common',(8+ZL.RTKTL)+3);
      {? ZL.RTKTL<>'' & TKTL.seek(ZL.RTKTL)
      || VAR.A_TPKTL:=TKTL.TYP;
         VAR.GRUPA:='N';
         _used:=0;
::       Wyświetlane zawsze wszystkie (bez prefixu)
         {? 1
::            TKTL.TYP().SUR='K'
         || exec('tmat_main','tech_mater',TKTL.ref(),null(),1,1,_used,0)
         || exec('menu_start','tech_head');
            exec('tree','tech_oper',4,~_used);
            exec('menu_stop','tech_head')
         ?}
      ?};
      exec('tktl_cntx_pop','tech_common')
   ?};
   ZL.f_clear();
   ZL.cntx_pop()

|| _msg:='Błąd konfiguracji procesu — parametr %1 musi być podany.'@@['ZL'];
   FUN.emsg(_msg);
   _mp.error(_msg)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności dołączenia surowca zlecenia (TTE_PZL_DTSD)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));
_sym:='';
_ile:=0;
:: jest rekord kluczowy ZL, to ustawiam odpowiednie ZL
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=ZL.name()
|| _sym:=exec('FindAndGet','#table',ZL,_keyRefs[1],,"SYM",'')
:: jest parametr wejściowy ZL
|? var_pres('ZL',_in)>0
|| _sym:=exec('FindAndGet','#table',ZL,_in.ZL,,"SYM",'')
?};
{? _sym<>''
|| _desc:='Dołącz surowiec do technologii zlecenia %1'@@[_sym]
|| _desc:='Dołącz surowiec do technologii zlecenia'@@
?};
_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Modyfikacje -> Dołącz' w oknie tabeli TMAT (surowce technologii zlecenia)
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;

{? exec('chkAddSur','!tte_pzl_dtsd',_env.ZL) & exec('chk_napraw_or_split','zl_common',_env.ZL)=0
|| _env_mater:=params_get().env_mater;

   _args:=exec('mp_run_a','#b__box');
   _args.ACT_UID:='TTE_PZL_DTSD';
   _args.UIDREF:=exec('FindAndGet','#table',ZL,_env.ZL,,"uidref()",'');
   _args.AKCJA:='DOŁĄCZ';
   _args.PROC_START:='T';
   _args.CONTEXT:=obj_new('env_mater'); _args.CONTEXT.env_mater:=_env_mater;
   _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

   exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_env.ZL);

   exec('mp_run','#b__box',_args);

:: Reinicjowanie zmiennej tpar
   exec('start_tpar','tech_param',_env.BUF_ZL.KTM,_env.TKTL_ZL);
   ~~
?};
~~


\action_add_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Funkcje -> Dołącz surowiec' w oknie tabeli ZL
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env;

{? exec('chkAddSur','!tte_pzl_dtsd',_env.ZL) & exec('chk_napraw_or_split','zl_common',_env.ZL)=0
|| _env_mater:=params_get().env_mater;

   _tktl:=exec('FindAndGet','#table',TKTL,exec('FindAndGet','#table',ZL,_env.ZL,,"RTKTL",''),,"ref()",null());

   {? _tktl<>null()
   || TKTL.cntx_psh();
      TKTL.prefix();
      {? TKTL.seek(_tktl)
      ||
::       Zawsze ta ścieżka
         {? 1
::            TKTL.TYP().SUR='K'
         || _args:=exec('mp_run_a','#b__box');
            _args.ACT_UID:='TTE_PZL_DTSD';
            _args.UIDREF:=exec('FindAndGet','#table',ZL,_env.ZL,,"uidref()",'');
            _args.AKCJA:='DOŁĄCZ_ZL';
            _args.PROC_START:='T';
            _args.CONTEXT:=obj_new('env_mater'); _args.CONTEXT.env_mater:=_env_mater;
            _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',_env.ZL);

            exec('mp_run','#b__box',_args)

         || _used:=0;
            exec('menu_start','tech_head');
            exec('tree','tech_oper',4,~_used);
            exec('menu_stop','tech_head')

         ?};
         _env.ZLIM_reload:=1;
         win_disp()
      ?};
      TKTL.cntx_pop()
   ?}
?};
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Modyfikacje -> Usuń' w oknie tabeli TMAT
::----------------------------------------------------------------------------------------------------------------------
params_exec('usuntmat','tech_mater');
~~


\add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Dodaje surowiec do technologii zlecenia
::       Kontekst wywołania: dziedzina tabeli TMAT
::   WY: TMAT.ref() / null()
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

_result:=null();

_zl:=exec('FindAndGet','#table',TKTL,VAR.A_KTL,,"ZL",null());

{? exec('zl_lock','zl_common',#_zl,'T')
|| {? exec('TMATWERD','tech_mater')
   || TMAT.blank();
      {? TMAT.edit("params_exec('tchm_edt','tech_mater',TMAT)")
      || {? TMAT.add()
         || exec('tmattpar','tech_mater');
            _result:=TMAT.ref()
         ?}
      ?}
   ?};
   exec('zl_unlock','zl_common',#_zl,'T')
?};

_result


\chkAddSur
::----------------------------------------------------------------------------------------------------------------------
::  UTW: SZP [12.46]
:: OPIS: Sprawdzenie czy można dodać surowiec do technologii zlecenia - kontekst pracy VAR.A_ZLEC
::  OLD: \chkAddSur/zlec6.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? VAR.A_ZLEC().RODZAJ<>'P'
|| FUN.info('Funkcja dostępna tylko dla zleceń prostych.'@);
   _ret:=0
|? VAR.A_ZLEC().STAN='Z'
|| FUN.info('Funkcja niedostępna dla zleceń zamkniętych.'@);
   _ret:=0
|? VAR.A_OP().PZ='Z'
|| FUN.info('Funkcja niedostępna dla operacji złożonych.'@);
   _ret:=0
|? (VAR.A_ZLEC().STAN='N') & VAR.A_ZLEC().STAT_T='N'
::    & (ZMASK.THEAD='1') & (ZMASK.USED='0')
|| _ret:=1
|? (VAR.A_ZLEC().STAN='O' | VAR.A_ZLEC().STAN='N') & VAR.A_ZLEC().STAT_T='T'
::    & ZMASK.THEAD='0' & ZMASK.USED='0'
|| _ret:=1
|| FUN.info('Funkcja dostępna wyłącznie dla zleceń posiadających własną technologię, '
            'ze statusem \"nowe\" bez zatwierdzeń technologii.'@
   );
   _ret:=0
?};

_ret


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:37 028eb8e078a9fbecbc30f687589663f2856d18e9d81fa555f5724e048b5fa5d3654417f1e3f03369058fe3d69a7bae524b1a6644287a95a3dc831cfc32f08dd2b80a27f3a67b7f8995f34da1a18fb8f005b6cae9db0efced8890098f4810f172d45811f963eaf76fe528310b66083d4aeaacb167085684b2dfecc8bd5c0cb335
