:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_ckl_dckl.fml
:: Utworzony: 13.06.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_CKL_DCKL - Definicje zdarzeń cyklicznych
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Formuła główna czynności TRE_CKL_DCKL
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ
~~


\action_define
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Definiowanie zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_rem_cykl:=params_get().env_rem_cykl;
_env_rem_cykl.PATTERN:=0;

REM_CYKL.cntx_psh();

REM_CYKL.index('REM_ZAS');
REM_CYKL.prefix(REM_ZAS.ref());

REM_CYKL.win_sel('WER');
REM_CYKL.hdr_sel(' '+'dla zasobu %1'@[REM_ZAS.SYMBOL]);

_actions:='';
{? REM_ZAS.AKT='N'
|| _actions:='DPUAHNGÓYR:D'
?};
REM_CYKL.select(,,,_actions);

REM_CYKL.cntx_pop();
~~


\action_define_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Definiowanie zdarzeń cyklicznych wzorcowych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env_rem_cykl:=params_get().env_rem_cykl;
_env_rem_cykl.PATTERN:=1;

REM_CYKL.cntx_psh();

REM_CYKL.index('REM_ZAS');
REM_CYKL.prefix(null());

REM_CYKL.win_sel('WERW');
REM_CYKL.select();

REM_CYKL.cntx_pop();
~~


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Dołącz' w oknie definicji zdarzeń cyklicznych/wzorcowych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_rem_cykl;

REM_CYKL.win_edit({? _env.PATTERN || 'REDW' || 'RED' ?});
exec('set_red_opt','!tre_ckl_dckl');
REM_CYKL.blank();
REM_CYKL.memo_set('','OPIS');
REM_CYKL.REM_ZAS:={? _env.PATTERN || null() || REM_ZAS.ref() ?};
{? REM_CYKL.edit("exec('valid','!tre_ckl_dckl')")
|| {? REM_CYKL.add() || REM_CYKL.memo_put(,'OPIS') ?}
?};
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Popraw' w oknie definicji zdarzeń cyklicznych/wzorcowych
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_rem_cykl;

REM_CYKL.memo_get(,'OPIS',);
{? REM_CYKL.PATTERN<>''
|| FUN.info('Zdarzenie cykliczne wygenerowane według wzorca — nie można modyfikować.'@)
|| REM_CYKL.win_edit({? _env.PATTERN || 'REDW' || 'RED' ?});
   exec('set_red_opt','!tre_ckl_dckl');
   {? REM_CYKL.edit("exec('valid','!tre_ckl_dckl')")
   || {? REM_CYKL.put() || REM_CYKL.memo_put(,'OPIS') ?}
   ?}
?};
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Usuń' w oknie definicji zdarzeń cyklicznych/wzorcowych
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_cykl;

_can_continue:=1;

{? _can_continue>0
|| REM_ZGL.cntx_psh();
   REM_ZGL.index('REM_CYKL');
   REM_ZGL.prefix(REM_CYKL.ref());
   _can_continue:=~REM_ZGL.first();
   REM_ZGL.cntx_pop();
   {? _can_continue=0
   || FUN.info('Nie można usunąć definicji zdarzenia cyklicznego, do którego zostały wygenerowane zgłoszenia.'@)
   ?}
?};

{? _can_continue>0
|| REM_CYKL.cntx_psh();
   REM_CYKL.index('PATTERN');
   REM_CYKL.prefix(REM_CYKL.IDADD);
   _can_continue:=~REM_CYKL.first();
   REM_CYKL.cntx_pop();
   {? _can_continue=0
   || FUN.info('Nie można usunąć definicji zdarzenia wzorcowego, do którego zostały wygenerowane zdarzenia cykliczne.'@)
   ?}
?};

{? _can_continue>0 &
   FUN.ask(
      {? _env.PATTERN || 'Czy usunąć wskazane zdarzenie wzrocowe?'@ || 'Czy usunąć wskazane zdarzenie cykliczne?'@ ?}
   )
|| do();
   REM_HARM.cntx_psh();
   REM_HARM.index('REM_CYKH');
   REM_HARM.prefix(REM_CYKL.ref());
   {? REM_HARM.first()
   || {!
      |? REM_HARM.del()
      !}
   ?};
   REM_HARM.cntx_pop();
   REM_CYKL.del();
   end()
?};
~~


\activate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Aktywuj' w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_cykl;

_can_continue:=1;
_fun_msg:='';
_grp:=REM_CYKL.sel_size()>0;

{? REM_CYKL.TRIG_PRZ='T' & REM_CYKL.TRYBP='N'
|| _can_continue:=0;
   {? _env.PATTERN
   || _msg:='Nie można zaakceptować definicji zdarzenia wzorcowego — nie skonfigurowano przebiegów.'@
   || _msg:='Nie można zaakceptować definicji zdarzenia cyklicznego — nie skonfigurowano przebiegów.'@
   ?};
   {? _grp || KOMM.add(_msg) || _fun_msg+='\n'+_msg ?}
?};
{? REM_CYKL.TRIG_HAR='T' & REM_CYKL.TRYB='N'
|| _can_continue:=0;
   {? _env.PATTERN
   || _msg:='Nie można zaakceptować definicji zdarzenia wzorcowego — nie skonfigurowano harmonogramu.'@
   || _msg:='Nie można zaakceptować definicji zdarzenia cyklicznego — nie skonfigurowano harmonogramu.'@
   ?};
   {? _grp || KOMM.add(_msg) || _fun_msg+='\n'+_msg ?}
?};
{? _can_continue>0
|| REM_CYKL.ACT:='T';
   REM_CYKL.put()
|| {? ~_grp
   || FUN.info(_fun_msg)
   ?}
?};
~~


\activate_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Aktywuj' (po) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
~~


\activate_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Aktywuj' (przed grupą rekordów) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_cykl;
KOMM.init(,,{? _env.PATTERN || 'Aktywacja zdarzeń wzorcowych'@ || 'Aktywacja zdarzeń cyklicznych'@ ?});
1


\activate_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Aktywuj' (po grupie rekordów) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\deactivate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Dezaktywuj' w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
REM_CYKL.ACT:='N';
REM_CYKL.put();
~~


\deactivate_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Dezaktywuj' (po) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
~~


\deactivate_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Dezaktywuj' (przed grupą rekordów) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
KOMM.init(,,'Dezaktywacja zdarzeń cyklicznych'@);
1


\deactivate_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Dezaktywuj' (po grupie rekordów) w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Waliduje rekord REM_CYKL
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.record(REM_CYKL,,'REM_KATG','NAZ');
{? _chk=''
|| {? (REM_CYKL.TRIGGER+1)='T' & REM_CYKL.REM_ZAS().PRZ_MODE='N'
   || FUN.info(
         'Nie można zdefiniować zdarzenia zależnego od przebiegu dla zasobu,\n'
         'do którego nie są rejestrowane przebiegi.'@
      );
      REM_CYKL.TRIGGER:='TN';
      _chk:='TRIGGER'
   ?}
?};
_chk


\window_harm_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Formuła 'Okienko przed' w oknach redagowania umieszczonych w oknie grupowym harmonogramu
::       - włączenie redagowania
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_args:=params_get().args;

_edit_field:=
   {? _args.step=1
   || 'TRYB'
   || 'DT'
   ?};
{? edit_start("params_exec('valid_harmonogram','!tre_ckl_dckl')",_edit_field)
|| {? _args.prev
   || _args.step-=1
   || _args.step+=1
   ?};
   _args.prev:=0;
   {? _args.step=1
   || _tab:=2
   |? _args.step=2
   || _tab:='RDTM'*REM_CYKL.TRYB+2
   || _tab:=1;
      sel_exit()
   ?};
   tab_sel(1);
   tab_hide(,0);
   tab_show(_tab);
   tab_hide(1);
   1
|| _args.escape:=1;
   sel_exit()
?}


\window_prz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Formuła 'Okienko przed' w oknach redagowania umieszczonych w oknie grupowym przebiegów
::       - włączenie redagowania
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_args:=params_get().args;

_edit_field:=
   {? _args.step=1
   || 'TRYBP'
   || 'PRZ'
   ?};
{? edit_start("params_exec('valid_przebieg','!tre_ckl_dckl')",_edit_field)
|| {? _args.prev
   || _args.step-=1
   || _args.step+=1
   ?};
   _args.prev:=0;
   {? _args.step=1
   || _tab:=2
   |? _args.step=2
   || _tab:='CR'*REM_CYKL.TRYBP+2
   || _tab:=1;
      sel_exit()
   ?};
   tab_sel(1);
   tab_hide(,0);
   tab_show(_tab);
   tab_hide(1);
   1
|| _args.escape:=1;
   sel_exit()
?}


\btn_prev
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przycisk 'Wstecz' w kreatorze
::----------------------------------------------------------------------------------------------------------------------
params_get().args.prev:=1;
'key:F2'


\btn_next
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przycisk 'Dalej' w kreatorze
::----------------------------------------------------------------------------------------------------------------------
'key:F2'


\btn_ok
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przycisk 'OK' w kreatorze
::----------------------------------------------------------------------------------------------------------------------
'key:F2'


\btn_escape
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przycisk 'Anuluj' w kreatorze
::----------------------------------------------------------------------------------------------------------------------
params_get().args.escape:=1;
'key:Esc'


\display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Wyświetla własności zdarzenia cyklicznego
::       Kontekst wywołania - ustawiony rekord REM_CYKL
::   WE: [_a] - dostępna zakładka danych podstawowych
::       [_b] - dostępna zakładka harmonogramu
::       [_c] - dostępna zakładka przebiegów
::       [_d] - tekst doklejony do tytułu okna
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')<>type_of(0) || _a:=1 ?};
{? var_pres('_b')<>type_of(0) || _b:=1 ?};
{? var_pres('_c')<>type_of(0) || _c:=1 ?};
{? var_pres('_d')<>type_of('') || _d:='' ?};
exec('rem_cykl_display','remonty_cykliczne',_a,_b,_c,_d);
~~


\creator_harmonogram_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Uruchamia kreatora własności harmonogramu zdarzenia cyklicznego
::       Kontekst wywołania - ustawiony rekord REM_CYKL
::----------------------------------------------------------------------------------------------------------------------
{? REM_CYKL.PATTERN<>''
|| params_set(params_get());
   exec('display','!tre_ckl_dckl',0,1,0,' — '+'PODGLĄD'@)
|| _args:=obj_new(
      'escape','prev','step','fld_tryb','fld_m','fld_t','fld_d','fld_vt','fld_vm','fld_interval','fld_duration'
   );
   _args.escape:=0;
   _args.prev:=0;
   {? REM_CYKL.TRYB='N' || _args.step:=1 || _args.step:=2 ?};
   _args.fld_m:='';
   _args.fld_d:='';
   params_set('args',_args);

   exec('set_red_opt','!tre_ckl_dckl');
   exec('dtm_load','remonty_cykliczne');
   exec('desc_m_load','remonty_cykliczne');
   exec('desc_t_load','remonty_cykliczne');
   exec('desc_d_load','remonty_cykliczne');
   _before:="
      _args:=params_get().args;
      {? _args.step=1
      || _tab:=2
      |? _args.step=2
      || _tab:='RDTM'*REM_CYKL.TRYB+2
      || _tab:=1
      ?};
      tab_hide(,0);
      tab_show(_tab);
      tab_hide(1);
      ~~
   ";
   _first_win:=REM_CYKL.mk_edit(,,'nop');
   REM_CYKL.win_ebtn(_first_win,'text=%1'['OK'@],"'key:F2'");

   _grp:=REM_CYKL.grp_make('Własności zdarzenia cyklicznego'@,_before,'bpropgepx',,,,,'normal');
:: 1
   REM_CYKL.grp_edit(_grp,,_first_win,'(0)');
:: 2
   REM_CYKL.grp_edit(_grp,,'RED1','(1)');
:: 3
   REM_CYKL.grp_edit(_grp,,'RED2R','(2)');
:: 4
   REM_CYKL.grp_edit(_grp,,'RED2D','(2)');
:: 5
   REM_CYKL.grp_edit(_grp,,'RED2T','(2)');
:: 6
   REM_CYKL.grp_edit(_grp,,'RED2M','(2)');
   REM_CYKL.win_sel(_grp);
   {? REM_CYKL.select() & ~_args.escape
   ||
::    Usuwanie i generowanie zapisów harmonogramu
      {? REM_CYKL.put()
      || {? REM_CYKL.TRIGGER='TT'
         || exec('update_h_plus_p','remonty_cykliczne',REM_CYKL.ref())
         || exec('update_harmonogram','remonty_cykliczne',REM_CYKL.ref())
         ?}
      ?}
   ?}
?};
~~


\set_red_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Ustawia opcje pól: DTE w oknach redagowania
::----------------------------------------------------------------------------------------------------------------------
exec('rem_cykl_set_red_opt','remonty_cykliczne');
~~


\valid_harmonogram
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Walidacja przy redagowaniu REM_CYKL - harmonogram zdarzenia cyklicznego
::----------------------------------------------------------------------------------------------------------------------
_step:=params_get().args.step;
_prev:=params_get().args.prev;

_result:='';

:: 2. krok, nawigacja do przodu
{? _step=2 & _prev=0
|| _tm:=exec('create','#tm_stamp',REM_CYKL.DT,time(0,0,0));
:: termin mniejszy niż graniczny (ze względu na datę)
   {? REM_CYKL.DT>exec('boundary_date','#b_timer')
   || FUN.info('Termin uruchomienia powinien być wcześniejszy niż %1.'@[$exec('boundary_date','#b_timer')]);
      _result:='DT'
   |? REM_CYKL.TRYB='R'
   ||
::    tylko raz - ustawmy przyszłą datę
      {? _tm<=REM_CYKL.tm_stamp()
      || FUN.info('Termin uruchomienia powinien być późniejszy niż bieżący.'@);
         _result:='DT'
      ?}
   |? REM_CYKL.TRYB='D'
   ||
::    codziennie
      {? REM_CYKL.REPLY<=0
      || FUN.info('Liczba powinna być większa od zera.'@);
         _result:='REPLY'
      ?}
   |? REM_CYKL.TRYB='T'
   ||
::    cotygodniowo - musi być przynajmniej jeden dzień w tygodniu
      {? REM_CYKL.T*'T'=0
      || FUN.info('Co najmniej jeden dzień w tygodniu powinien być zaznaczony.'@);
         _result:='T'
      |? REM_CYKL.REPLY<=0
      || FUN.info('Liczba powinna być większa od zera.'@);
         _result:='REPLY'
      ?}
   |? REM_CYKL.TRYB='M'
   ||
::    comiesięcznie - musi być przynajmniej jeden miesiąc
      {? REM_CYKL.M*'T'=0
      || FUN.info('Co najmniej jeden miesiąc powinien być zaznaczony.'@);
         _result:='M'
      |? REM_CYKL.D*'T'=0
      || FUN.info('Co najmniej jeden dzień w miesiącu powinien być zaznaczony.'@);
         _result:='D'
      ?}
   ?}
?};

:: 2. krok, nawigacja do przodu (c.d. - wspólne pola)
{? _result='' & _step=2 & _prev=0
|| _tme:=exec('create','#tm_stamp',REM_CYKL.DTE,time(0,0,0));
   {? REM_CYKL.EXPIRES='T' & REM_CYKL.DTE>exec('boundary_date','#b_timer')
   || FUN.info('Termin wygaśnięcia powinien być wcześniejszy niż %1.'@[$exec('boundary_date','#b_timer')]);
      _result:='DTE'
   |? REM_CYKL.EXPIRES='T' & _tme<>0 & _tme<REM_CYKL.tm_stamp()
   || FUN.info('Termin wygaśnięcia powinien być późniejszy niż bieżący.'@);
      _result:='DTE'
   |? REM_CYKL.EXPIRES='T' & _tme<>0 & _tme<exec('create','#tm_stamp',REM_CYKL.DT,time(0,0,0))
   || FUN.info('Termin wygaśnięcia powinien być późniejszy niż termin uruchomienia.'@);
      _result:='DTE'
   ?}
?};

_result


\valid_przebieg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Walidacja przy redagowaniu REM_CYKL - przebiegi zdarzenia cyklicznego
::----------------------------------------------------------------------------------------------------------------------
_step:=params_get().args.step;
_prev:=params_get().args.prev;

_chk:='';

:: 2. krok, nawigacja do przodu
{? _step=2 & _prev=0
|| {? _chk='' || _chk:={? exec('itsPositive','#field',1,,REM_CYKL.PRZ) || '' || 'PRZ' ?} ?};
   {? _chk='' & REM_CYKL.TRYBP='C'
   || {? REM_CYKL.PRZE<>0 & REM_CYKL.PRZE<=REM_CYKL.PRZ
      || FUN.info('Należy podać przebieg końcowy większy od początkowego.'@);
         _chk:='PRZE'
      ?}
   ?};
   {? _chk='' || _chk:={? exec('itsPositive','#field',0,,REM_CYKL.PRZB_INF) || '' || 'PRZB_INF' ?} ?};
   {? _chk='' || _chk:={? exec('itsPositive','#field',0,,REM_CYKL.PRZB_GEN) || '' || 'PRZB_GEN' ?} ?}
?};
_chk


\rem_cykl_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Po redakcji pól tabeli REM_CYKL: EXPIRES, TRYBP
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='EXPIRES' | _afld='TRYBP' | _afld='TRIGGER'
|| exec('set_red_opt','!tre_ckl_dckl')
?};
1


\creator_przebieg_start
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Uruchamia kreatora własności przebiegu zdarzenia cyklicznego
::       Kontekst wywołania - ustawiony rekord REM_CYKL
::----------------------------------------------------------------------------------------------------------------------
{? REM_CYKL.PATTERN<>''
|| params_set(params_get());
   exec('display','!tre_ckl_dckl',0,0,1,' — '+'PODGLĄD'@)
|| _args:=obj_new('escape','prev','step');
   _args.escape:=0;
   _args.prev:=0;
   {? REM_CYKL.TRYBP='N' || _args.step:=1 || _args.step:=2 ?};
   params_set('args',_args);

   exec('set_red_opt','!tre_ckl_dckl');
   _before:="
      _args:=params_get().args;
      {? _args.step=1
      || _tab:=2
      |? _args.step=2
      || _tab:='CR'*REM_CYKL.TRYBP+2
      || _tab:=1
      ?};
      tab_hide(,0);
      tab_show(_tab);
      tab_hide(1);
      ~~
   ";
   _first_win:=REM_CYKL.mk_edit(,,'nop');
   REM_CYKL.win_ebtn(_first_win,'text=%1'['OK'@],"'key:F2'");

   _grp:=REM_CYKL.grp_make('Własności zdarzenia cyklicznego'@,_before,'bpropgepy',,,,,'normal');
:: 1
   REM_CYKL.grp_edit(_grp,,_first_win,'(0)');
:: 2
   REM_CYKL.grp_edit(_grp,,'PRZ1','(1)');
:: 3
   REM_CYKL.grp_edit(_grp,,'PRZ2C','(2)');
:: 4
   REM_CYKL.grp_edit(_grp,,'PRZ2R','(2)');
   REM_CYKL.win_sel(_grp);
   {? REM_CYKL.select() & ~_args.escape
   ||
::    Usuwanie i generowanie zapisów harmonogramu
      {? REM_CYKL.put()
      || {? REM_CYKL.TRIGGER='TT'
         || exec('update_h_plus_p','remonty_cykliczne',REM_CYKL.ref())
         || exec('update_przebiegi','remonty_cykliczne',REM_CYKL.ref())
         ?}
      ?}
   ?}
?};
~~


\record_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'przed rekord' w oknie selekcji zdarzeń cyklicznych
::   WE: _a - parametr systemowy
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| _grayed:=':';
   {? REM_CYKL.TRIG_HAR<>'T'
   || _grayed:='H'+_grayed
   ?};
   {? REM_CYKL.TRIG_PRZ<>'T'
   || _grayed:='R'+_grayed
   ?};
   {? REM_CYKL.ACT='T'
   || _grayed:='A'+_grayed
   |? REM_CYKL.ACT='N'
   || _grayed:='Y'+_grayed
   ?};
   REM_CYKL.actions_grayed(cur_win(1,1),_grayed)
?};
~~


\rem_cykl_trig_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Trigger 'przed' dla tabeli REM_CYKL
::----------------------------------------------------------------------------------------------------------------------
REM_CYKL.TRIG_HAR:=1+REM_CYKL.TRIGGER;
REM_CYKL.TRIG_PRZ:=REM_CYKL.TRIGGER+1;
REM_CYKL.SERV_INF:=1+REM_CYKL.SERVICE;
REM_CYKL.SERV_GEN:=REM_CYKL.SERVICE+1;
{? REM_CYKL.TRIGGER='TT' || REM_CYKL.OP_PLAN:='P' ?};
1


\rem_cykl_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przed redagowaniem pól tabeli REM_CYKL
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_result:=1;
{? _afld='ACT'
|| _result:=0
?};
_result


\action_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Generuj definicje wg wzorca'
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_cykl;
{? REM_ZAS.sel_size()=0
|| _env.PATT_REF:=exec('select_pattern','!tre_ckl_dckl')
?};
:: Kopiowanie wzorca na zdarzenie cykliczne
{? _env.PATT_REF<>null()
|| REM_CYKL.cntx_psh();
   REM_CYKL.index('PATTERN');
   REM_CYKL.prefix();
:: Znajdź wzorzec
   {? REM_CYKL.seek(_env.PATT_REF)
   || _buffer:=exec('REM_CYKL','buffer1');
      _buffer.get(1);
      _buffer.IDADD:=~~;
      _buffer.REM_ZAS:=~~;
      _buffer.PATTERN:=~~;
::    Sprawdź, czy już jest zdarzenie wg wzorca
      REM_CYKL.prefix(REM_CYKL.IDADD,REM_ZAS.ref());
      {? REM_CYKL.first()
      || _buffer.set();
         {? REM_CYKL.put() & REM_CYKL.memo_put(,'OPIS')
         || {? REM_CYKL.TRIGGER='TT'
            || exec('update_h_plus_p','remonty_cykliczne',REM_CYKL.ref())
            || {? REM_CYKL.TRIG_HAR='T'
               || exec('update_harmonogram','remonty_cykliczne',REM_CYKL.ref())
               |? REM_CYKL.TRIG_PRZ='T'
               || exec('update_przebiegi','remonty_cykliczne',REM_CYKL.ref())
               ?}
            ?};
            _msg:='Zaktualizowano zdarzenie cykliczne \'%1\' dla zasobu \'%2\'.'@[_buffer.NAZ,REM_ZAS.SYMBOL];
            {? REM_ZAS.sel_size()=0
            || FUN.info(_msg)
            || KOMM.add(_msg)
            ?}
         ?}
      || _buffer.set();
         REM_CYKL.REM_ZAS:=REM_ZAS.ref();
         REM_CYKL.PATTERN:=REM_CYKL.IDADD;
         {? REM_CYKL.add() & REM_CYKL.memo_put(,'OPIS')
         || {? REM_CYKL.TRIGGER='TT'
            || exec('update_h_plus_p','remonty_cykliczne',REM_CYKL.ref())
            || {? REM_CYKL.TRIG_HAR='T'
               || exec('update_harmonogram','remonty_cykliczne',REM_CYKL.ref())
               |? REM_CYKL.TRIG_PRZ='T'
               || exec('update_przebiegi','remonty_cykliczne',REM_CYKL.ref())
               ?}
            ?};
            _msg:='Dodano zdarzenie cykliczne \'%1\' dla zasobu \'%2\'.'@[_buffer.NAZ,REM_ZAS.SYMBOL];
            {? REM_ZAS.sel_size()=0
            || FUN.info(_msg)
            || KOMM.add(_msg)
            ?}
         ?}
      ?}
   ?};
   REM_CYKL.cntx_pop()
?};
~~


\select_pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Wybór wzorca zdarzenia cyklicznego
::----------------------------------------------------------------------------------------------------------------------
_result:=null();
REM_CYKL.cntx_psh(); REM_ZAS.cntx_psh();
REM_CYKL.index('REM_ZAS');
REM_CYKL.prefix(null(),'T');
REM_CYKL.win_sel('WYBW');
{? REM_CYKL.select() || _result:=REM_CYKL.ref() ?};
REM_CYKL.cntx_pop(); REM_ZAS.cntx_pop();
_result


\select_event4pattern
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Selekcja zdarzeń cyklicznych wygenerowanych z danego wzorca
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_env:=params_get().env_rem_cykl;
_env.PATTERN:=0;

REM_CYKL.cntx_psh(); REM_ZAS.cntx_psh();
REM_CYKL.index('PATTERN');
REM_CYKL.prefix(REM_CYKL.IDADD);
REM_CYKL.win_sel('WERP');
REM_CYKL.select();
REM_CYKL.cntx_pop(); REM_ZAS.cntx_pop();

_env.PATTERN:=1;
~~


\action_generate_group_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Generuj definicje wg wzorca' przed grupą rekordów
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_rem_cykl;
KOMM.init(,,'Generowanie zdarzeń cyklicznych'@);
_env.PATT_REF:=exec('select_pattern','!tre_ckl_dckl');
_env.PATT_REF<>null()


\action_generate_group_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Akcja 'Generuj definicje wg wzorca' po grupie rekordów
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Legenda w oknie definicji zdarzeń cyklicznych
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','REM_CYKL#01');
~~


\action_search
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.42]
:: OPIS: Przed akcją 'Szukaj' w oknach wertowania definicji zdarzeń cyklicznych/wzorcowych
::----------------------------------------------------------------------------------------------------------------------
_env_rem_cykl:=params_get().env_rem_cykl;

REM_CYKL.win_patt({? _env_rem_cykl.PATTERN || 'SZUKW' || 'SZUK' ?});
~~

:Sign Version 2.0 jowisz:1028 2019/10/14 09:20:07 70e56580dcaec83c593b3de6648c7f409a284021160b69be456e3d65cd7ef244c0b7672d4d1fe925cda7de1fdf7277776e5d692ca73e96f12643eb472de912f65866e07dfd78862f7b7408422c6c0771b2aebc02f4f711b2aa2296a6ff8f8ae3a5ab94bd482e3000cb6f0fa8abe38a15c9396c3f7a5270cf411f986620ba6d94
