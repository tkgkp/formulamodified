:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_dos_prsw.fml
:: Utworzony: 19.05.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_DOS_PRSW - Rejestracja świadectw pracy
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja świadectw pracy - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::
::# kind=WE, symbol=OSOBA, type=_OSOBA, name=Wskazanie osoby, required=T, keyref=T

_par:=params_get();
params_set(_par);

_in:=_par.in;
_ib:=_par.int;
_rv:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.OSOBA);
_do:=_mp.akcja();
_result:='';

{? _id=''
|| _result:=exec('error','!pkd_dos_prsw')

|? _mp.isMicro()
|| {? _do='START'
   || _mp.keyRef(_id);
      _mp.keep()

   |? _do='STOP'
   || exec('post_edit','!pkd_dos_prsw',_in.OSOBA);
      _mp.delRef(_id);
      _mp.cancel()

   |? _do<>''
   || _result:='Czynność %1 nie obsługuje akcji "%2".'@[_mp.buf_act.UID,_do]
   ?}

|| _mp.save(_ib,_rv);
   {? _do='ZAKOŃCZ'
   || _mp.done()
   |? _mp.pathTodo()
   || _value:=exec('select','!pkd_dos_prsw',_in.OSOBA);
      {? type_of(_value)=type_of(0)
      || {? _value<>0
         || _mp.done()
         || _mp.keep()
         ?};
         exec('post_edit','!pkd_dos_prsw',_in.OSOBA)
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja świadectw pracy - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','osoba',params_get().mp);

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj świadectwa pracy: %1 %2: Paszport - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT]
   |? +_tab.PESEL
   || 'Zarejestruj świadectwa pracy: %1 %2: PESEL - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL]
   || 'Zarejestruj świadectwa pracy: %1 %2: Data urodzenia - %3'@@[_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA]
   ?}
|| 'Zarejestruj świadectwa pracy'@@
?}


\staz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Kontrola poprawności danych.
::   WE: _a - tryb modyfikacji: 0 - dodawanie, 1 - poprawianie
::   WY: zgodna ze specyfikacją dla akcji "rekord po"
::  OLD: \spr_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
: sprawdź wypełnienie i unikalność
_chk:=__CHK.table(STAZ,_a,,'F','DR');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & ~_chk)
:  porażka podstawowego testu
|| return(_chk)
?};

{? STAZ.WUG_R<>0 & (_chk:=__CHK.record(STAZ,,'WU_R'))<>''
|| return(_chk)
|? STAZ.WUZG_R<>0 & (_chk:=__CHK.record(STAZ,,'WUZ_R'))<>''
|| return(_chk)
|? STAZ.WUNSPG_R<>0 & (_chk:=__CHK.record(STAZ,,'WUNSP_R'))<>''
|| return(_chk)
|? STAZ.WUG<>0 & (_chk:=__CHK.record(STAZ,,'WU'))<>''
|| return(_chk)
|? STAZ.WUZG<>0 & (_chk:=__CHK.record(STAZ,,'WUZ'))<>''
|| return(_chk)
|? STAZ.WUNSPG<>0 & (_chk:=__CHK.record(STAZ,,'WUNSP'))<>''
|| return(_chk)
?};

: dodatkowe testy poprawności
{? STAZ.DZ<>date(0,0,0) & STAZ.DZ<STAZ.DR
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(STAZ,'DZ'),MS.name(STAZ,'DR')]);
   return('DZ')
?};

{? STAZ.WU_R<STAZ.WUZ_R & ~FUN.ask(
      'Ilość wykorzystanych dni urlopu "na żądanie" jest większa niż ilość dni urlopu wypoczynkowego.\n'
      'Czy wprowadzić podane informacje?'@
   )
|| return('WUZ_R')
?};

{? STAZ.WUG_R<STAZ.WUZG_R & ~FUN.ask(
      'Ilość wykorzystanych godzin urlopu "na żądanie" jest większa niż ilość godzin urlopu wypoczynkowego.\n'
      'Czy wprowadzić podane informacje?'@
   )
|| return('WUZG_R')
?};

{? STAZ.WU<STAZ.WUZ & ~FUN.ask(
      'Ilość wykorzystanych dni urlopu "na żądanie" jest większa niż ilość dni urlopu wypoczynkowego.\n'
      'Czy wprowadzić podane informacje?'@
   )
|| return('WUZ')
?};

{? STAZ.WUG<STAZ.WUZG & ~FUN.ask(
      'Ilość wykorzystanych godzin urlopu "na żądanie" jest większa niż ilość godzin urlopu wypoczynkowego.\n'
      'Czy wprowadzić podane informacje?'@
   )
|| return('WUZG')
?};

{? STAZ.UP='N' & STAZ.CI='N' & FUN.ask(
      'Okres zatrudnienia został zdefioniowany jako pomijany w stażu pracy.\n'
      'Może to prowadzić do wyliczenia skróconego stażu pracy, zmniejszenia\n'
      'wymiaru należnego pracownikowi urlopu wypoczynkowego, etc.\n'
      'Czy włączyć opcję "Ogólny staż pracy"?'@
   )
|| STAZ.CI:='T'
?};

{? STAZ.UP='T' & STAZ.DU='N' & ~FUN.ask(
      'Okres pobierania zasiłku dla bezrobotnych lub okres stażu finansowany\n'
      'ze środków Funduszu Pracy (pole "Urząd pracy") jest wliczany\n'
      'do okresu zatrudnienia, od którego zależy ustalenie wymiaru\n'
      'urlopu wypoczynkowego (pole "Urlop wypoczynkowy").\n'
      'Czy pozostawić wyłączoną opcję "Urlop wypoczynkowy"?'@
   )
|| STAZ.DU:='T'
?};

{? STAZ.UP='T' & STAZ.CI='T' & FUN.ask(
      'Okres pobierania zasiłku dla bezrobotnych lub okres stażu finansowany ze środków\n'
      'Funduszu Pracy (pole "Urząd pracy") jest wliczany do okresu zatrudnienia,\n'
      'od którego zależy ogólny staż pracy tylko dla niektórych zawodów.\n'
      'Czy zmienić wartość tego pola?'@
   )
|| STAZ.CI:='N'
?};

{? STAZ.WMD_R>0 & STAZ.WMDG_R>0
|| FUN.emsg('W polach "Wykorzystana opieka (art. 188)" należy podać liczbę dni albo liczbę godzin.'@);
   return('WMD_R')
?};

{? STAZ.WMD>0 & STAZ.WMDG>0
|| FUN.emsg('W polach "Wykorzystana opieka (art. 188)" należy podać liczbę dni albo liczbę godzin.'@);
   return('WMD')
?};

{? exec('is_pzd02','ppsf')
|| {? STAZ.WUSW>0 & STAZ.WUSWG>0
   || FUN.emsg('W polu "Wykorzystany urlop od siły wyższej" należy podać albo liczbę wykorzystanych dni,\n'
            'albo liczbę wykorzystanych godzin.'@);
      return('WUSW')
   |? STAZ.WUSW_R>0 & STAZ.WUSWG_R>0
   || FUN.emsg('W polu "Wykorzystany urlop od siły wyższej" należy podać albo liczbę wykorzystanych dni,\n'
            'albo liczbę wykorzystanych godzin.'@);
      return('WUSW_R')
   ?}
?};

''


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa czynności wykonywanej z listy zadań.
::   WE: _a - wskazanie osoby
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_err_msg:=exec('error','!pkd_dos_prsw');

{? var_pres('_a')<>type_of(null()) | _a=null()
|| return(_err_msg)
?};

OSOBA.cntx_psh();
OSOBA.prefix();
{? ~OSOBA.seek(_a)
|| OSOBA.cntx_pop();
   return(_err_msg)
?};

STAZ.cntx_psh();
STAZ.index('_STAZE');
STAZ.prefix(exec('ref_firma','ustawienia'),_a);
STAZ.win_sel(exec('wnd','!pkd_dos_prsw'));
STAZ.win_edit('RED');
_result:=STAZ.select();
STAZ.cntx_pop();
OSOBA.cntx_pop();

exec('post_edit','!pkd_dos_prsw',_a);

_result


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przygotowanie okna wertowania świadectw pracy.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mode:='maximized';

_wnd:=STAZ.grp_make('Świadectwa pracy'@,"mb_exec('GRP_EDISP_OSOBA_INFO')",'staz_weri',,,,,_mode);
STAZ.grp_edit(_wnd,OSOBA,'INFO',,,,,,_mode);
STAZ.grp_splt(_wnd,,'horizontal','staz');
STAZ.grp_sel(_wnd,,'WER',,,,,,,,,,_mode,,1);

STAZ.win_fml('WER',,'F',,'ICON_BEFORE',"exec('x_zalacz_icon','zalacz')");

_wnd


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabeli STAZ z doklejonym oknem redagowania tabeli OSOBA);
::       - w ramach obszaru roboczego (okno wertowania tabeli STAZ jako składowa okien grupowych).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=STAZ
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Rejestracja świadectw pracy niemożliwe.\nNie znaleziono osoby.'@


\post_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po wykonaniu czynności.
::   WE: _a [REFERENCE] - Wskazanie osoby, dla której była wykonywana czynność.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? EDIT_VAR.AKT_URL=''
|| return()
?};
exec('aktualizuj','kart_url',_a);
EDIT_VAR.AKT_URL:='';
~~


\staz_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "dołącz przed" tabeli STAZ
::----------------------------------------------------------------------------------------------------------------------
exec('staz_modb','!pkd_dos_prsw')


\staz_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw przed" tabeli STAZ
::----------------------------------------------------------------------------------------------------------------------
exec('staz_modb','!pkd_dos_prsw')


\staz_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "przed zapisem" tabeli STAZ
::----------------------------------------------------------------------------------------------------------------------
{? STAZ.UP='T'
|| STAZ.STN:=null();
   STAZ.USPKOD:=null();
   STAZ.USPPPRAK:=null();
   STAZ.USPSTR:=null()
|? STAZ.DZ=date(0,0,0)
|| STAZ.USPKOD:=null();
   STAZ.USPPPRAK:=null();
   STAZ.USPSTR:=null()
?};

{? STAZ.PRACA_R<>'T'
|| STAZ.WU:=STAZ.WU_R;
   STAZ.WUG:=STAZ.WUG_R;
   STAZ.WUZ:=STAZ.WUZ_R;
   STAZ.WUZG:=STAZ.WUZG_R;
   STAZ.WC:=STAZ.WC_R;
   STAZ.WMD:=STAZ.WMD_R;
   STAZ.WMDG:=STAZ.WMDG_R;
   STAZ.WUNSP:=STAZ.WUNSP_R;
   STAZ.WUNSPG:=STAZ.WUNSPG_R;
   {? exec('is_pzd02','ppsf')
   || STAZ.WUSW:=STAZ.WUSW_R;
      STAZ.WUSWG:=STAZ.WUSWG_R;
      STAZ.WUOP:=STAZ.WUOP_R;
      STAZ.WPZ:=STAZ.WPZ_R
   ?}
?};

S_ZUS.cntx_psh();
{? STAZ.USPPPRAK().KOD<>'550'
|| STAZ.USPPPRAT:=''
?};
S_ZUS.cntx_pop();

1


\staz_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "usuń przed" tabeli STAZ
::  OLD: \mod_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',STAZ_H,'OZ',STAZ.ref()) &
exec('del_ndx','#table',ZALACZ,'NAG',STAZ.uidref())


\staz_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli STAZ.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr obowiązkowy wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(STAZ)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);
:: _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],tabela,pole,join);

{? _fld='' | _fld='UP' | _fld='DZ'
|| _val:=STAZ.UP='N';
   _set(_TAB,_we,_grp_ident,'enable=%1' [$_val],_TAB,'STN');
   _sval:=$(_val & STAZ.DZ<>date(0,0,0));
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'USPKOD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'USPPPRAK');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'USPPPRAT');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'USPSTR')
?};

{? _fld='' | _fld='USPPPRAK'
|| S_ZUS.cntx_psh();
   _sval:=$(STAZ.USPPPRAK().KOD='550');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'USPPPRAT');
   S_ZUS.cntx_pop()
?};

{? _fld='' | _fld='PRACA_R'
|| _sval:=$(STAZ.PRACA_R='T');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WU');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUG');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUZ');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUZG');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WC');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WMD');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WMDG');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUNSP');
   _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUNSPG');
   {? exec('is_pzd02','ppsf')
   || _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUSW');
      _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUSWG');
      _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WUOP');
      _set(_TAB,_we,_grp_ident,'enable=%1' [_sval],_TAB,'WPZ')
   ?}
?};

1


\staz_dz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Po redagowaniu pola STAZ.DZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_efld_opt','!pkd_dos_prsw')


\staz_up_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Po redagowaniu pola STAZ.UP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_efld_opt','!pkd_dos_prsw')


\staz_usppprak_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Po redagowaniu pola STAZ.USPPPRAK.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_efld_opt','!pkd_dos_prsw')


\staz_lmd_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GS [12.41]
:: OPIS: Blokowanie wyświetlania zawartości pól PRY, PRM, PRD, PSY, PSM i PSD tabeli STAZ
::   WY: 0/1 zależnie od tego, czy zawartość pól powinna być ukryta lub widoczna
::  OLD: \pokaz_prs/staze.fml
::----------------------------------------------------------------------------------------------------------------------
~(STAZ.DZ=date(0,0,0) | date()<STAZ.DZ)


\staz_dolacz_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dedykowane "dołącz" okienka tabeli STAZ.
::  OLD: \mod_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
_zm:=null();
H_ZM.cntx_psh();
H_ZM.index('ZMIANY');
H_ZM.prefix();
{? H_ZM.find_key('Z')
|| _zm:=H_ZM.ref()
?};
H_ZM.cntx_pop();

{? _zm=null()
|| FUN.emsg('Brak informacji w słowniku opisującej zmianę w zatrudnieniu.'@);
   return()
?};

STAZ.fld_fml('DR','BEFORE_EDIT',"1");
STAZ.fld_fml('DZ','BEFORE_EDIT',"1");

STAZ.blank();
exec('staz_efld_opt','!pkd_dos_prsw','*',STAZ,STAZ.win_edit('?'));
{? STAZ.edit("exec('staz_ae','!pkd_dos_prsw',0)") & STAZ.add()
|| EDIT_VAR.AKT_URL:=!STAZ;
   STAZ_H.blank();
   STAZ_H.OD:=STAZ.DR;
   STAZ_H.DO:=STAZ.DZ;
   STAZ_H.ZM:=_zm;
   {? STAZ_H.add()
   || exec('akt_hist','staz')
   ?};
   exec('limity_pz','staz')
?};

STAZ.fld_fml('DR','BEFORE_EDIT',"*");
STAZ.fld_fml('DZ','BEFORE_EDIT',"*");
~~


\staz_popraw_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dedykowane "popraw" okienka tabeli STAZ.
::  OLD: \mod_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
_prosty:=0;
STAZ_H.cntx_psh();
STAZ_H.index('OZ');
STAZ_H.prefix(STAZ.ref());
_prosty:=(STAZ_H.size()=1);

STAZ.fld_fml('DR','BEFORE_EDIT',$($_prosty));
STAZ.fld_fml('DZ','BEFORE_EDIT',$($_prosty));

STAZ.get();
_od:=STAZ.DR;
_do:=STAZ.DZ;
_up:=STAZ.UP;
_ci:=STAZ.CI;
_du:=STAZ.DU;
_na:=STAZ.NA;
_wu:=STAZ.WU;
_wg:=STAZ.WUG;
_nauk:=STAZ.STN().URL_NAUK;
_wpz:={? exec('is_pzd02','ppsf') || STAZ.WPZ || 0 ?};
exec('staz_efld_opt','!pkd_dos_prsw','*',STAZ,STAZ.win_edit('?'));
{? STAZ.edit("exec('staz_ae','!pkd_dos_prsw',1)") & STAZ.put()
|| {? STAZ_H.first()
   || STAZ_H.OD:=STAZ.DR;
      STAZ_H.DO:=STAZ.DZ;
      {? STAZ_H.put()
      || exec('akt_hist','staz')
      ?}
   ?};
   {? _od<>STAZ.DR | _do<>STAZ.DZ | _up<>STAZ.UP |
      _ci<>STAZ.CI | _du<>STAZ.DU | _na<>STAZ.NA |
      _wu<>STAZ.WU | _wg<>STAZ.WUG | _nauk<>STAZ.STN().URL_NAUK
   || EDIT_VAR.AKT_URL:=!STAZ
   ?};
   exec('limity_pz','staz',1,_wpz)
?};

STAZ_H.cntx_pop();

STAZ.fld_fml('DR','BEFORE_EDIT',"*");
STAZ.fld_fml('DZ','BEFORE_EDIT',"*");
~~


\staz_usun_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja po usunięciu rekordu.
::  OLD: \mod_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.AKT_URL:=!STAZ


\staz_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.02]
:: OPIS: Przed akcją "Wyświetl" tabeli STAZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_efld_opt','!pkd_dos_prsw','*',STAZ,STAZ.win_edit('?'));
STAZ.display()


\staz_historia_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja "Historia" okienka tabeli STAZ.
::  OLD: \mod_oz/staze.fml
::  OLD: \wyswietl/staze.fml
::----------------------------------------------------------------------------------------------------------------------
H_ZM.cntx_psh();
H_ZM.win_dict('SLO');

STAZ_H.cntx_psh();
STAZ_H.index('OZ');
STAZ_H.prefix(STAZ.ref());
STAZ_H.win_sel('WER');
STAZ_H.win_edit('RED');
STAZ_H.select();
STAZ_H.cntx_pop();

H_ZM.cntx_pop();
~~


\staz_staz_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja "Historia" okienka tabeli STAZ.
::  OLD: \mod_oz/staze.fml
::----------------------------------------------------------------------------------------------------------------------
exec('oblicz','staz',,0)


\staz_h_oz_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wartość początkowa pola OZ tabeli STAZ_H
::  OLD: \__OZ/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
STAZ.ref()


\staz_h_dolacz_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dedykowane "dołącz" okienka tabeli STAZ_H.
::  OLD: \mod_hist/staze.fml
::----------------------------------------------------------------------------------------------------------------------
STAZ_H.blank();
exec('staz_h_efld_opt','!pkd_dos_prsw','*',STAZ_H,STAZ_H.win_edit('?'));
{? STAZ_H.edit("exec('staz_h_ae','!pkd_dos_prsw',0)") & STAZ_H.add()
|| exec('akt_hist','staz');
   EDIT_VAR.AKT_URL:=!STAZ
?}


\staz_h_popraw_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dedykowane "popraw" okienka tabeli STAZ_H.
::  OLD: \mod_hist/staze.fml
::----------------------------------------------------------------------------------------------------------------------
: czy poprawiany jest jedyny przebieg zatrudnienia?
: jeśli tak, to należy uniemożliwić zmianę kodu
STAZ_H.get();
{? STAZ_H.ZM().KZ='Z'
|| STAZ_H.cntx_psh();
   STAZ_H.index('ZM');
   STAZ_H.prefix(STAZ_H.OZ,'Z');
   {? STAZ_H.size()=1
   || STAZ_H.fld_fml('ZM','BEFORE_EDIT',"0")
   ?};
   STAZ_H.cntx_pop()
?};

_od:=STAZ_H.OD;
_do:=STAZ_H.DO;
_kz:=STAZ_H.ZM().KZ;
exec('staz_h_efld_opt','!pkd_dos_prsw','*',STAZ_H,STAZ_H.win_edit('?'));
{? STAZ_H.edit("exec('staz_h_ae','!pkd_dos_prsw',1)") & STAZ_H.put()
|| {? _od<>STAZ_H.OD | _do<>STAZ_H.DO | _kz<>STAZ_H.ZM().KZ
   || exec('akt_hist','staz');
      EDIT_VAR.AKT_URL:=!STAZ
   ?}
?};

STAZ_H.fld_fml('ZM','BEFORE_EDIT',"*");
~~


\staz_h_usun_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Usuń przed" okienka tabeli STAZ_H.
::  OLD: \mod_hist/staze.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=1;
{? STAZ_H.ZM().KZ='Z'
|| STAZ_H.cntx_psh();
   STAZ_H.index('ZM');
   _ref:=STAZ_H.ref();
   STAZ_H.prefix(STAZ.ref(),'Z');
   {? STAZ_H.size()=1
   || FUN.info('Usunięcie jedynej informacji o przebiegu zatrudnienia nie jest możliwe.'@);
      _ret:=0
   ?};
   {? _ret & (STAZ_H.ref()<>_ref | STAZ_H.next() | STAZ_H.prev())
   || _min:=_minZ:=STAZ_H.OD;
      _max:=_maxZ:=STAZ_H.DO;
      _d0:=date(0,0,0);
::    Sprawdzam czy po usunięciu będzie pokrycie przez przebiegi "Z" przebiegów innych typów.
      STAZ_H.prefix(STAZ.ref());
      {? STAZ_H.first()
      || {!
         |? {? STAZ_H.ZM().KZ<>'Z'
            || {? STAZ_H.OD<_min
               || _min:=STAZ_H.OD
               ?};
               {? STAZ_H.DO>_max
               || _max:=STAZ_H.DO
               ?}
            |? _ref<>STAZ_H.ref()
            || {? STAZ_H.OD<_minZ
               || _minZ:=STAZ_H.OD
               ?};
               {? STAZ_H.DO=_d0 | STAZ_H.DO>_maxZ
               || _maxZ:=STAZ_H.DO
               ?}
            ?};

            STAZ_H.next()
         !}
      ?};
      {? _min<_minZ | (_maxZ<>_d0 & _max>_maxZ)
      || FUN.info('Podczas przebiegu występują inne informacje dotyczące zatrudnienia. Usunięcie nie jest możliwe.'@);
         _ret:=0
      ?}
   ?};
   STAZ_H.cntx_pop()
?};
_ret


\staz_h_usun_aa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: "Usuń po" okienka tabeli STAZ_H.
::  OLD: \mod_hist/staze.fml
::----------------------------------------------------------------------------------------------------------------------
exec('akt_hist','staz');
EDIT_VAR.AKT_URL:=!STAZ


\staz_h_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Kontrola poprawności danych.
::   WE: _a - tryb modyfikacji: 0 - dodawanie, 1 - poprawianie
::   WY: zgodna ze specyfikacją dla akcji "rekord po"
::  OLD: \spr_hist/staze.fml
::  OLD: \ozh/overlap.fml
::----------------------------------------------------------------------------------------------------------------------
_popraw:=_a;
H_ZM.cntx_psh();
_kz:=STAZ_H.ZM().KZ;
H_ZM.cntx_pop();
: sprawdź wypełnienie i unikalność
_chk:=__CHK.table(STAZ_H,_popraw,,'ZM','OD','RWYL','RWYM');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & ~_chk)
:  porażka podstawowego testu
|| return(_chk)

|? _kz<>'Z' & __CHK.record(STAZ_H,,'DO')<>''
|| return('DO')
?};

_zdate:=date(0,0,0);

: dodatkowe testy poprawności
{? STAZ_H.DO<>_zdate & STAZ_H.DO<STAZ_H.OD
|| FUN.emsg('Data zakończenia nie może być wcześniejsza od daty rozpoczęcia.'@);
   return('OD')
?};

:: przekroczenie zakresu wymiaru zatrudnienia:
{? _kz='Z' & (STAZ_H.RWY<=0.0 | STAZ_H.RWY>1.0)
|| FUN.emsg('Wymiar zatrudnienia nie może %1.'@
            [{? STAZ_H.RWY>0 || 'przekraczać jednego etatu'@ || 'być niedodatni'@ ?}]);
   return('RWY')
?};

STAZ_H.OZ();
{? _kz<>'Z'
|| {? STAZ_H.OD<STAZ.DR | (STAZ.DZ<>_zdate & STAZ.DZ<STAZ_H.OD)
   || FUN.emsg('Data rozpoczęcia musi zawierać się w okresie zatrudnienia.'@);
      return('OD')

   |? STAZ_H.DO<STAZ.DR | (STAZ.DZ<>_zdate & STAZ.DZ<STAZ_H.DO)
   || FUN.emsg('Data zakończenia musi zawierać się w okresie zatrudnienia.'@);
      return('DO')
   ?}
|| _err:=_msg:='';
   _od:=STAZ_H.OD;
   _do:=STAZ_H.DO;
   _ref:={? _popraw || STAZ_H.ref() || null() ?};
   STAZ_H.cntx_psh();
   STAZ_H.index('ZM');
   STAZ_H.prefix(STAZ.ref(),'Z');
:: Sprawdzam czy jest następny przebieg i jest odstęp:
   {? _do<>_zdate & STAZ_H.find_ge(_do) & (~_popraw | _ref<>STAZ_H.ref()) & STAZ_H.OD>_do+1
   || _msg:='%1 (%2 - %3).\n%4.'['Kolejny zapis historii zatrudnienia jest rozłączny z wprowadzanym'@, $STAZ_H.OD,
         $STAZ_H.DO,  'Zapisy rodzaju "przeszeregowanie" muszą następować po sobie.'@];
      _err:='DO'
   ?};
:: Sprawdzam czy jest poprzedni przebieg i jest odstęp:
   {? ~+_err & STAZ_H.find_le(_od) & (~_popraw | _ref<>STAZ_H.ref() | STAZ_H.prev()) & STAZ_H.DO<>_od-1
::    Znalazłem poprzedni, nie jest to ten, który właśnie poprawiam i ma datę do niestyczną z moją od...
   ||  _msg:='%1 %2 (%3 - %4).\n%5.'['Poprzedni zapis historii zatrudnienia'@,
         {? STAZ_H.DO<_od-1 || 'jest rozłączny z wprowadzanym'@ || 'trwa w trakcie wprowadzanego'@ ?}, $STAZ_H.OD,
         $STAZ_H.DO, 'Zapisy rodzaju "przeszeregowanie" muszą następować po sobie.'@];
       _err:='OD'
   ?};
:: Sprawdzam czy przebiegi "Z" pokrywają inne istniejące:
   {? ~+_err & _popraw
   || STAZ_H.prefix(STAZ.ref());
      _min:=_minZ:=_od;
      _max:=_maxZ:=_do;
      {? STAZ_H.first()
      || {!
         |? {? STAZ_H.ZM().KZ<>'Z'
            || {? STAZ_H.OD<_min
               || _min:=STAZ_H.OD
               ?};
               {? STAZ_H.DO>_max
               || _max:=STAZ_H.DO
               ?}
            |? _ref<>STAZ_H.ref()
            || {? STAZ_H.OD<_minZ
               || _minZ:=STAZ_H.OD
               ?};
               {? STAZ_H.DO=_zdate | STAZ_H.DO>_maxZ
               || _maxZ:=STAZ_H.DO
               ?}
            ?};

            STAZ_H.next()
         !}
      ?};
      {? _min<_minZ | (_maxZ<>_zdate & _max>_maxZ)
      || _msg:='%1 (%2 - %3).'
            ['Wpisy w historii zatrudnienia rodzaju "przeszeregowanie" nie pokrywają wszystkich wpisów innych typów'@,
             $_min, $_max];
         _err:='OD'
      ?}
   ?};
   STAZ_H.cntx_pop();
   {? +_err
   || exec('alert','overlap',_msg);
      return(_err)
   ?}
?};

exec('check','overlap',{? _popraw || STAZ_H.ref() || null() ?},STAZ_H,,,,
   {? _kz='Z' || "STAZ_H.ZM().KZ='Z'" || "STAZ_H.ZM().KZ<>'Z'" ?},,'OZ',STAZ.ref())


\staz_zalaczniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Załączniki - przed" w oknach tabeli STAZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('show_zalacz','zalacz','OSOBA','STAZ',exec('chk_role','#b__box',OPERATOR.USER,'PKD_DOS_PRSW'))


\staz_praca_r_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Po redagowaniu pola STAZ.PRACA_R
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_efld_opt','!pkd_dos_prsw');
_pzd02:=exec('is_pzd02','ppsf');
{? STAZ.PRACA_R='T' &
   ~(STAZ.WU+STAZ.WUG+STAZ.WUZ+STAZ.WUZG+STAZ.WC+STAZ.WMD+STAZ.WMDG+STAZ.WUNSP+STAZ.WUNSPG) &
   (~_pzd02 | ~(STAZ.WUSW+STAZ.WUSWG+STAZ.WUOP+STAZ.WPZ))
|| STAZ.WU:=STAZ.WU_R;
   STAZ.WUG:=STAZ.WUG_R;
   STAZ.WUZ:=STAZ.WUZ_R;
   STAZ.WUZG:=STAZ.WUZG_R;
   STAZ.WC:=STAZ.WC_R;
   STAZ.WMD:=STAZ.WMD_R;
   STAZ.WMDG:=STAZ.WMDG_R;
   STAZ.WUNSP:=STAZ.WUNSP_R;
   STAZ.WUNSPG:=STAZ.WUNSPG_R;
   {? _pzd02
   || STAZ.WUSW:=STAZ.WUSW_R;
      STAZ.WUSWG:=STAZ.WUSWG_R;
      STAZ.WUOP:=STAZ.WUOP_R;
      STAZ.WPZ:=STAZ.WPZ_R
   ?}
?};

1


\staz_h_rwyx_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Formuła wspólna po redagowaniu wymiaru zatrudnienia w tabeli STAZ_H
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ret:=(fld()>=1 & fld()<=9999);
{? _ret
|| {? STAZ_H.RWYM
   || STAZ_H.RWY:=(STAZ_H.RWYL/STAZ_H.RWYM)$3
   ?}
|| FUN.emsg('Dozwolone wartości z przedziału 1-9999.'@)
?};
_ret


\staz_h_rwyl_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Po redagowaniu pola STAZ_H.RWYL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_h_rwyx_ae','!pkd_dos_prsw')


\staz_h_rwym_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Po redagowaniu pola STAZ_H.RWYM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_h_rwyx_ae','!pkd_dos_prsw')


\staz_h_rwy_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Po redagowaniu pola STAZ_H.RWY
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? fld()>0
|| _licznik:=STAZ_H.RWY*1000;
   _mianown:=1000;
   _nwd:=exec('nwd','#math',_licznik,_mianown);
   _liczNew:=_licznik/_nwd;
   _mianNew:=_mianown/_nwd;
:: Rozwiązanie problemu z zaokrąglaniem do 3 miejsc po przecinku. Jeśli wpisany ułamek zwykły jest mniejszy niż
:: wyliczony, ale jego postać zmiennoprzecinkowa zaokrąglona do 3 miejsc po przecinku jest taka sama jak wyliczony
:: wymiar to nie zamieniamy postaci ułamkowej.
   {? ((STAZ_H.RWYL/STAZ_H.RWYM)$3<>STAZ_H.RWY) | (_liczNew<STAZ_H.RWYL & _mianNew<STAZ_H.RWYM)
   || STAZ_H.RWYL:=_liczNew;
      STAZ_H.RWYM:=_mianNew
   ?}
?};
1


\staz_h_zm_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Po redagowaniu pola STAZ_H.ZM
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_h_efld_opt','!pkd_dos_prsw')


\staz_h_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli STAZ_H.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Identyfikator okna w grupie (parametr obowiązkowy wyłącznie dla webTerma).
::       [_e] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_webTerm:=app_info('web_sesid')<>'';

_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(STAZ)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:={? _webTerm || web_top_tab() || cur_tab(1,1) ?}
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:={? _webTerm || web_top_win() || cur_win(1,1) ?}
|| return(0)
?};
_grp_ident:={? var_pres('_d')=type_of('') || _d || '' ?};
{? var_pres('_e')=type_of('')
|| _fld:=_e
|? _tryb='1'
|| _fld:={? _webTerm || web_top_fld_acr() || cur_afld() ?}
|| _fld:=''
?};

_set:=exec('efld_opt','#window',_webTerm,_we,_grp_ident);

{? _fld='' | _fld='ZM'
|| H_ZM.cntx_psh();
   _val:=STAZ_H.ZM().KZ='Z';
   H_ZM.cntx_pop();
   _set(_TAB,_we,_grp_ident,'enable=%1' [$_val],_TAB,'RWYL');
   _set(_TAB,_we,_grp_ident,'enable=%1' [$_val],_TAB,'RWYM');
   _set(_TAB,_we,_grp_ident,'enable=%1' [$_val],_TAB,'RWY')
?};

1


\staz_h_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [23.25]
:: OPIS: Przed akcją "Wyświetl" tabeli STAZ_H
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('staz_h_efld_opt','!pkd_dos_prsw','*',STAZ_H,STAZ_H.win_edit('?'));
STAZ_H.display()

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:24 e419af974cd208e8df581ab395958edc74f4a1215aeaad249d2424dcb88204693a2c1f7de861a5b9466111df06667e617637b2b02c7e42de3bb1b87fc01539dc5fa2a8d6b4eba24ddb22ab02dfc6652169d502c147bd05370cd2b69948a323404fd1068e2338b303312e55b7badb9468a7beba9aa59581f7ed56168d3a8e4bee
