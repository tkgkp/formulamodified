:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lum_zgl_dzgz.fml
:: Utworzony: 10.05.2019
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Wykonanie dla zgłoszenia jednorazowego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# properties=SERVICE
::# permissions=ODDZ
::# parses=exec('parses','!lum_zgl_dzgz')
::# kind=WE,   symbol=ZLP,     type=_ZLP,  name=Zgłoszenie jednorazowe,  required=T, keyref=T
::# kind=WY,   symbol=ZLP,     type=_ZLP,  name=Zgłoszenie jednorazowe,  required=N
_mp:=params_get().mp;
_in:=params_get().in;
_context:=params_get().context;

{? var_pres('_context')>100 & var_pres('DW',_context)=type_of(date()) || _dw:=_context.DW || _dw:=date(0,0,0) ?};

_akcja:=_mp.akcja();

_auto:=_mp.isAutoRun();
_service:=_mp.isService();
_data:=date(0,0,0);

{? ~(var_pres('ZLP',_in)=type_of(null()) & _in.ZLP)
||
   _mp.error('Brak wymaganego parametru ZLP.')
||
   ZLE.cntx_psh();
   ZLP.cntx_psh();
   _x:=ref_name(_in.ZLP)+5;
   exec('zle_open','open_tab',1+_x,2+(_x+4),_x+2);
   ZLP.prefix();
   {? ~ZLP.seek(_in.ZLP)
   ||
      _mp.error('Nie znaleziono zgłoszenia jednorazowego.'@)
   ||
      _continue:=1;
      {? _dw<>date(0,0,0)  || _data:=_dw
      |? _service          || _data:=exec('zlp2DATA_REAL','transport_wspolne',ZLP.uidref(),'Z')
      ?};
      _Tr_nzl:=exec('get_tr_nzl','transport_zlec',ZLP.uidref());
      _Tr_nzl.cntx_psh();
      _Tr_nzl.prefix('Z');
      {? _Tr_nzl.first()
            &
         exec('FindAndGet','#table',TR_NZL,_Tr_nzl.REF,,"
            TR_NZL.STATUS<>exec('tr_nzl_status_zrealizowane','transport_zlec')
         ",0)
      ||
         _dw:=ZLP.DW;
         ZLP.DW:=date(0,0,0);
         {? ZLP.put()
         ||
            {? _dw=date(0,0,0)
            ||
               {? ~_service || FUN.info('Nie zrealizowano transportu.\nFunkcja niedostępna.'@) ?}
            ||
               {? ~_service || FUN.info('Nie zrealizowano transportu.\nWycofano wykonanie.'@) ?}
            ?};
            _continue:=0
         ?}
      ?};
      _Tr_nzl.cntx_pop();
      {? _continue & ZLP.DW<>date(0,0,0)
      || _mp.save(exec('kind_out','#b_port'),'ZLP',ZLP.ref());
         _mp.done()
      |? _continue
            &
         (_service | _mp.pathTodo() | _mp.pathArea() & _akcja='Wykonaj')
      || ZLP.ZLE();
         ZLEC.MIA:=ZLE.POS().UL().MIA;
         ZLEC.UL:=ZLE.POS().UL;
         exec('zle_win_edit_set','!lum_zgl_dzgz','REDZ','Z');
         _win_red:=ZLE.win_edit('?');
         _cntx:=obj_new('WYKONAJ');
         {? _service & _data<>date(0,0,0)
         || ZLP.DW:=_data;
            _cntx.WYKONAJ:=2
         || _cntx.WYKONAJ:=0;
            params_set('cntx',_cntx);
            exec('jm_kpo','jm');
            ZLE.edit("_res:=exec('zlp_wykonaj','!lum_zgl_dzgz',2);
                      {? _res='done'
                      || params_get().cntx.WYKONAJ:=2;
                         ''
                      || _res
                      ?}")
         ?};
         {? _cntx.WYKONAJ
         || exec('stanPlan','umowy_zlecenia');
            {? ZLP.put()
            || _mp.save(exec('kind_out','#b_port'),'ZLP',ZLP.ref());
               _mp.done()
            ?}
         ?};
::       Usunięcie definicji tymczasowych okien
         ZLE.win_edit(''); ZLE.win_edel(_win_red)
      ?}
   ?};
   ZLP.cntx_pop();
   ZLE.cntx_pop()
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('ZLP',_in)=type_of(null()) & _in.ZLP
|| 'Obsługa wykonania dla zgłoszenia: %1'@@[exec('record','#to_string',_in.ZLP)]
|| ''
?}


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;

{? var_pres('ZLP',_in)=type_of(null()) & _in.ZLP
||
   ZLP.cntx_psh();
   ZLP.use(ref_name(_in.ZLP));
   ZLP.cntx_psh();
   ZLP.prefix();
   {? ZLP.seek(_in.ZLP) & ZLP.ZLE
   ||
      ZLE.cntx_psh();
      ZLE.use(ref_name(ZLP.ZLE));
      __PARSES.setVal('OddzialLogProd',ZLP.ZLE().ODDZ);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LSP';
      _args.AR:=ZLE.AR;
      _args.AM:=ZLE.AM;
      __PARSES.setVal('OkresRok',_args);
      ZLE.cntx_pop()
   ?};
   ZLP.cntx_pop();
   ZLP.cntx_pop()
?};

1


\zlp_wykonaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Realizacja
::   WE: _a - automatycznie 0/1/2-odpowiednik zera bez pytania
::       params_get()   - ustawiane w exec('main','!lum_zgl_dzgz')
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:='';

_zgl:=exec('record','#to_string',ZLP.ref());
_txt:='';
_put:=0;

{? ZLP.DW=date(0,0,0)
|| _txt:='Nie podano daty wykonania.'@;
   _result:='DW'
|? ZLP.DW<ZLP.DP
|| _txt:='Data wykonania nie może być wcześniejsza od daty podstawienia.'@;
   _result:='DW'
|? ZLP.SR='Z'
|| _txt:='Zgłoszenie jest już zrealizowane.'@;
   _result:='done'
|? ZLP.STAT_REJ='N'
|| _txt:='Nie zakończono jeszcze rejestracji zgłoszenia.'@;
   _result:=_txt
|? ZLP.PORT='T'
|| _txt:='Zgłoszenie internetowe. Należy je przyjąć do realizacji.'@;
   _result:=_txt
|? exec('zlp_czy_anulowane','umowy_zlecenia')
|| _txt:='Zgłoszenie jest anulowane.'@;
   _result:='done'
|? _a=2 | FUN.ask('Zrealizować wykonanie dla zgłoszenia:\n%1?\n'
                  'Dzień wykonania: %2.'@[exec('record','#to_string',ZLP.ref()),$ZLP.DW])
|| _txt:='';
   _put:=1;
   _result:='done'
?};

{? {? _a=2 || _result<>'done' || 1 ?} & _txt<>''
||
   _txt:=_txt+{? _put || '' || '\nRealizacja wykonania niemożliwa.'@ ?};
   FUN.info(_txt)
?};

_result


\zlp_wykonaj_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Wykonaj w oknie redakcji
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_res:=exec('zlp_wykonaj','!lum_zgl_dzgz',0);
{? _res='done'
|| params_get().cntx.WYKONAJ:=1;
   'key:F2'
|? _res<>''
|| 'edit:'+_res
|| ''
?}


\zabierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Zgłoszenie jednorazowe - Wykonaj w oknie wertowania
::   WE: [_a] - ZLP.DW
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: kontroluje czy są powiązane dyspozycje transportu i czy zostały usunięte
_a:={? var_pres('_a')=type_of(date()) || _a || date(0,0,0) ?};
_pow:=exec('ctrlDELdysp','transport_wspolne');

{? _pow<=0
|| {? ~_pow || FUN.info('Istnieją niezrealizowane dyspozycje transportu.\nOperacja niemożliwa.'@) ?}
|| ZLP.cntx_psh();
   _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LUM_ZGL_DZGZ';
   _params.UIDREF:=ZLP.uidref();
   _params.AKCJA:='Wykonaj';
   _params.CONTEXT:=obj_new('DW');
   _params.CONTEXT.DW:=_a;
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'ZLP',ZLP.ref());
   UMO.RODZZLP:='Z';

   exec('mp_run','#b__box',_params);
   UMO.RODZZLP:='';
   ZLP.cntx_pop()
?};
~~


\zle_win_edit_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [19.22]
:: OPIS: Ustawia okno redakcji tabeli ZLE, wymagane pola, okna słowników
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_win_red:=exec('zle_win_edit','umowy_zlecenia','REDZ');
_ff:="params_exec('zlp_wykonaj_red','!lum_zgl_dzgz')";
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Wykonaj'@],_ff);
_ff:='key:Esc';
ZLE.win_ebtn(_win_red,
   'text=%1,btn_label_align=center,panel=bottom,align=end,display=1'['&Anuluj'@],_ff);
ZLE.win_edit(_win_red);
exec('zle_set_efld_opt','umowy_zlecenia',_win_red,'Z');
~~

:Sign Version 2.0 jowisz:1045 2023/11/30 12:42:33 a04549d9a6190f3ea10dbbb14fbd45005487169a6e7eec261397bc4d8dc7dc9bdeb3cc2dec938c1b9f72ce95b95768f337144acff5090cd203efa8db67aeff69d9fb836cfc943698940d0a32d80d9106441060568c518cbff3284e516f96e6009958bd02a95bda7b4cbbb1ac60f80cc274a49547d8350c0dfc17b895ebe183c3
