:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_zes_erur.fml
:: Utworzony: 16.05.2016
:: Autor: areKc
::======================================================================================================================
:: Zawartość: Formuły czynności PPL_ZES_ERUR - Obliczenie i wydruk rezerw urlopowych
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: areKc [17.00]
:: OPIS: Obliczenie i wydruk rezerw urlopowych - główna formuła czynności.
::   WY:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL

{? ~exec('no_limit','schemat','PPL')
|| return()
?};

: utwórz okienko główne czynności
_wnd:=RURL_N.grp_make('Rezerwy urlopowe'@,
:  przy otwarciu okna
   "  RURL_P.cntx_psh();
      RURL_P.index('OSOBA');
      RURL_P.win_edit('RED');
      1
   ",
   '#rurl_n',,,
:  przy zamknięciu okna
   "  RURL_P.cntx_pop();
      1
   ",,'html_maximized'
);
: lista wyliczonych rezerw urlopowych według miesięcy - najstarsze najniżej
RURL_N.grp_sel(_wnd,,'WER',,"grp_disp(RURL_P,'WER')",,,,,,,,'maximized');
: podziel okno
_split:={? exec('interm','#system') || 'horizontal' || 'vertical' ?};
RURL_N.grp_splt(_wnd,,_split,'right',',33%');
: szczegóły wyliczonej rezerwy urlopowej
RURL_N.grp_sel(_wnd,RURL_P,'WER',,,,,,
:  przed obsługą
   "  _aid:='';
      _ref:=RURL_N.ref();
      {? grp_empty(RURL_N,'WER')
      || _aid:='D:D';
         _ref:=null
      ?};
      RURL_P.actions_grayed('WER',_aid);
      {? _a=1
      || return()
      ?};
      _key:=RURL_P.index('?');
      RURL_P.prefix(_ref);
      RURL_P.index('T');
      RURL_P.prefix(_ref);
      RURL_P.index('OSOBA');
      RURL_P.prefix(_ref);
      RURL_P.index('WYDZIAL');
      RURL_P.prefix(_ref);
      RURL_P.index(_key)
   ",
   ,,,'maximized'
);
:: udostępnij dane
RURL_N.cntx_psh();
RURL_N.index('RURL_N');
RURL_N.prefix(exec('ref_firma','#firma'));
RURL_N.win_sel(_wnd);
RURL_N.win_edit('RED');
RURL_N.select();
RURL_N.cntx_pop();
~~


\rurl_n_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

RURL_N.R:=RURL_N.DATA~1;
RURL_N.M:=RURL_N.DATA~2;
RURL_N.D:=RURL_N.DATA~3;

__CHK.validate(RURL_N,
   $("_a.table(_b,"+$_mode+",,'DATA','METODA')"),
   "  {? _b.DATA<=date(0,0,0)
      || _a.err_fld(_b,'DATA',1,'Podano błędną datę.'@)
      || 1
      ?}
   ",
   "  {? _b.METODA=null()
      || _a.err_fld(_b,'METODA',1,'Należy wybrać metodę wyliczania ekwiwalentu.'@)
      || 1
      ?}
   "
)


\rurl_n_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Formuła dla wyzwalaczy przed zapisem wiersza tabeli RURL_N.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
RURL_N.EKW:=exec('ust_nk','lista_licz',RURL_N.DATA,'EKW');
1


\rurl_n_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "dołącz przed" tabeli RURL_N.
::   WE:
::   WY: wynik testu poprawności
::----------------------------------------------------------------------------------------------------------------------
{? exec('rurl_n_chk','!ppl_zes_erur',0)
|| exec('rurl_n_modb','!ppl_zes_erur')
?}


\rurl_n_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "popraw przed" tabeli RURL_N.
::   WE:
::   WY: wynik testu poprawności
::----------------------------------------------------------------------------------------------------------------------
{? exec('rurl_n_chk','!ppl_zes_erur',1)
|| exec('rurl_n_modb','!ppl_zes_erur')
?}


\rurl_n_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "usuń przed" tabeli RURL_N.
::   WE:
::   WY: 1 jeśli wiersz może być usunięty, 0 wpp
::----------------------------------------------------------------------------------------------------------------------
exec('add','#bulk',RURL_N,'group',$RURL_N.ref());
_del:=exec('del_ndx','#table',RURL_P,'RURL_P',RURL_N.ref());
exec('add','#bulk',RURL_N,'group',$RURL_N.ref());
_del


\rurl_p_chk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Sprawdza wypełnienie wymaganych pól. Wykorzystywana w wyzwalaczach przed dołącz i popraw.
::   WE: _a [INTEGER] - Tryb modyfikacji danych
::          0 - dołączanie (domyślnie)
::          1 - poprawianie
::----------------------------------------------------------------------------------------------------------------------
_mode:={? var_pres('_a')=type_of(0) || _a<>0 ?};

__CHK.validate(RURL_P,$("_a.table(_b,"+$_mode+",,'RURL_N','P')"))


\rurl_p_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Formuła dla wyzwalaczy przed zapisem wiersza tabeli RURL_P.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
RURL_P.OSOBA:=RURL_P.P().OSOBA;

H.cntx_psh();
H.index('_HISTKOD');
H.prefix(RURL_P.P,'Z');
{? H.find_le(RURL_N.DATA)
|| RURL_P.WYDZIAL:=H.WYDZIAL;
   RURL_P.ST:=H.ST;
   RURL_P.CP:=H.CP;
   RURL_P.WY:=H.WY
?};
H.cntx_pop();

P_KK.cntx_psh();
P_KK.index('OD');
P_KK.prefix(RURL_P.P);
{? P_KK.find_le(RURL_N.DATA)
|| RURL_P.KK:=P_KK.KK
?};
P_KK.cntx_pop();

1


\rurl_p_moda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Formuła dla wyzwalaczy po zapisie wiersza tabeli RURL_P.
::   WE: _a _RURL_N - wskazanie nagłówka
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? exec('get','#bulk',RURL_N,'group',$_a)
|| return()
?};

_sum:=sql(
   'select sum(KWOTA) as KWOTA, sum(NARZUTY) as NARZUTY, sum(KW_PRAC) as KW_PRAC '
   'from RURL_P '
   'where RURL_P.RURL_N=:_a',
   _a
);

RURL_N.cntx_psh();
RURL_N.prefix();
{? RURL_N.seek(_a)
|| RURL_N.KWOTA:=_sum.KWOTA;
   RURL_N.NARZUTY:=_sum.NARZUTY;
   RURL_N.KW_PRAC:=_sum.KW_PRAC;
   RURL_N.put()
?};
RURL_N.cntx_pop();
~~


\rurl_p_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "dołącz przed" tabeli RURL_P.
::   WE:
::   WY: wynik testu poprawności
::----------------------------------------------------------------------------------------------------------------------
{? exec('rurl_p_chk','!ppl_zes_erur',0)
|| exec('rurl_p_modb','!ppl_zes_erur')
?}


\rurl_p_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "dołącz po" tabeli RURL_P.
::   WE: zgodne ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1 || return() ?};

exec('rurl_p_moda','!ppl_zes_erur',RURL_P.RURL_N);
~~


\rurl_p_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "dołącz przed" tabeli RURL_P.
::   WE:
::   WY: wynik testu poprawności
::----------------------------------------------------------------------------------------------------------------------
{? exec('rurl_p_chk','!ppl_zes_erur',1)
|| exec('rurl_p_modb','!ppl_zes_erur')
?}


\rurl_p_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "dołącz po" tabeli RURL_P.
::   WE: zgodne ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1 || return() ?};

exec('rurl_p_moda','!ppl_zes_erur',RURL_P.RURL_N);
~~


\rurl_p_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Wyzwalacz "usuń po" tabeli RURL_P.
::   WE: zgodne ze specyfikacją narzędzi
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? _a=0 | do_state()<>1 || return() ?};

exec('rurl_p_moda','!ppl_zes_erur',bfld('RURL_N'));
~~


\rurl_n_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "dołącz po" okienek tabeli RURL_N.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
~~


\rurl_n_oblicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz przed" okienek tabeli RURL_N.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_data:=RURL_N.DATA;
{? RURL_P.size()>0
|| FUN.ask('Czy na pewno ponownie przeliczyć rezerwę urlopową na dzień %1?'@[_data$6])
|| FUN.ask('Czy na pewno wyliczyć rezerwę urlopową na dzień %1?'@[_data$6])
?}

\rurl_n_oblicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz po" okienek tabeli RURL_N.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? exec('metoda','!ppl_zes_erur',RURL_N.DATA,RURL_N.METODA().KOD)
|| exec('add','#bulk',RURL_N,'group',$RURL_N.ref());

   RURL_P.cntx_psh();
   RURL_P.index('RURL_P');
   RURL_P.prefix();
   P.cntx_psh();
   P.index('PRACONAZ');
   P.prefix(exec('ref_firma','#firma'),'P');
   _loop:=P.first();
   _size:=P.size();
   {! _cnt:=0
   |? _loop
   |! {? (P.DZ>=RURL_N.DATA | P.DZ=#0) & P.DZA<=RURL_N.DATA
      || progress(int(_cnt/_size*100),'Proszę czekać...'@,'Rezerwy urlopowe'@);
         _val:=exec('oblicz','!ppl_zes_erur',P.ref(),RURL_N.DATA,RURL_N.EKW,RURL_N.CZY_LICZ,RURL_N.METODA().KOD);
         {? RURL_P.find_key(RURL_N.ref(),P.ref())
         || {? _val.KWOTA<>0
            || exec('ustaw','!ppl_zes_erur',_val);
               RURL_P.put()
            || RURL_P.del()
            ?}
         |? _val.KWOTA<>0
         || RURL_P.blank(1);
            RURL_P.RURL_N:=RURL_N.ref();
            RURL_P.P:=P.ref();
            exec('ustaw','!ppl_zes_erur',_val);
            RURL_P.add()
         ?};
         obj_del(_val)
      ?};
      _loop:=P.next()
   !};
   prgs_clr();
   P.cntx_pop();
   RURL_P.cntx_pop();
   RURL_P.first();

   exec('del','#bulk',RURL_N,'group',$RURL_N.ref());
   exec('rurl_p_moda','!ppl_zes_erur',RURL_N.ref())
?};

~~


\rurl_n_drukuj_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "drukuj po" okienek tabeli RURL_N.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
rep_exec('ppl_rezerwyurlopowe');
~~


\rurl_n_rekord_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Rekord po okienek tabeli RURL_N.
::   WE:
::   WY: wynik testu poprawności danych
::----------------------------------------------------------------------------------------------------------------------
exec('rurl_n_chk','!ppl_zes_erur',-menu_txt()='popraw')


\rurl_p_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "dołącz przed" okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? exec('metoda','!ppl_zes_erur',RURL_N.DATA,RURL_N.METODA().KOD)
|| _args:=exec('wybierz_args','pracownik');
   _args.DOMAIN:='PPL';
   _args.F_ZATR:='P';
   _args.UD_SCH:=exec('domyslny','schemat','PODZORG');
   _args.VIEW:='W';
   _args.SQL_WHERE:=
      'P.REFERENCE not in ('
      '  select RURL_P.P '
      '  from RURL_P '
      '  where RURL_P.RURL_N=\'%1\' '
      '  order by RURL_P.P'
      ')'[$RURL_N.ref()];
   _P:=exec('wybierz','pracownik',_args).P;

   RURL_P.cntx_psh();
   RURL_P.index('RURL_P');
   P.cntx_psh();
   P.prefix();
   _loop:=_P.first();
   _size:=_P.size();
   {! _cnt:=0
   |? _loop
   |! {? P.seek(_P.SQL)
      || progress(int(_cnt/_size*100),'Proszę czekać...'@,'Rezerwy urlopowe'@);
         {? (P.DZ>=RURL_N.DATA | P.DZ=#0) & P.DZA<=RURL_N.DATA
         || _val:=exec('oblicz','!ppl_zes_erur',P.ref(),RURL_N.DATA,RURL_N.EKW,RURL_N.CZY_LICZ,RURL_N.METODA().KOD);
            {? _val.BLAD=''
            || RURL_P.blank(1);
               RURL_P.RURL_N:=RURL_N.ref();
               RURL_P.P:=P.ref();
               exec('ustaw','!ppl_zes_erur',_val);
               {? RURL_P.KWOTA<>0
               || RURL_P.add()
               || {? _size=1
                  || FUN.info('Nie dodano zapisu ze względu na wyliczoną zerową kwotę rezerwy.'@)
                  ?}
               ?}
            || {? _size=1
               || FUN.emsg(_val.BLAD)
               ?}
            ?};
            obj_del(_val)
         || {? _size=1
            || {? RURL_N.DATA<date()
               || FUN.info('Pracownik nie był zatrudniony w dniu %1.'@[RURL_N.DATA$6])
               || FUN.info('Pracownik nie jest zatrudniony w dniu %1.'@[RURL_N.DATA$6])
               ?}
            ?}
         ?}
      ?};
      _loop:=_P.next()
   !};
   prgs_clr();
   P.cntx_pop();
   RURL_P.cntx_pop();
   RURL_P.first();

   exec('del','#bulk',RURL_N,'group',$RURL_N.ref());
   exec('rurl_p_moda','!ppl_zes_erur',RURL_N.ref())
?};
~~


\rurl_p_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "dołącz po" okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('rurl_p_xxx_a','!ppl_zes_erur')


\rurl_p_oblicz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz przed" okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? RURL_P.sel_size()=0
|| FUN.ask('Czy na pewno przeliczyć wybraną rezerwę urlopową?'@)
|| return(1)
?}


\rurl_p_oblicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz po" okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? exec('metoda','!ppl_zes_erur',RURL_P.RURL_N().DATA,RURL_P.RURL_N().METODA().KOD)
|| _val:=exec('oblicz','!ppl_zes_erur',RURL_P.P,RURL_P.RURL_N().DATA,RURL_P.RURL_N().EKW,RURL_P.RURL_N().CZY_LICZ,
               RURL_P.RURL_N().METODA().KOD);
   exec('ustaw','!ppl_zes_erur',_val);
   {? RURL_P.KWOTA<>0
   || RURL_P.put()
   || RURL_P.del()
   ?};

   {? RURL_P.sel_size()<>0
   || return()
   ?};

   exec('rurl_p_xxx_a','!ppl_zes_erur')
?};
~~


\rurl_p_oblicz_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz przed" dla grupy rekordów okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy na pewno przeliczyć wybrane rezerwy urlopowe?'@)


\rurl_p_oblicz_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "oblicz po" dla grupy rekordów okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('rurl_p_xxx_a','!ppl_zes_erur')


\rurl_p_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "usun po" okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('rurl_p_xxx_a','!ppl_zes_erur')


\rurl_p_xxx_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Akcja "po" dla okienek tabeli RURL_P.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
grp_disp(RURL_N,'WER');
~~


\oblicz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DAROKR [2006]
:: OPIS: Funkcja wyliczająca kwotę rezerwy urlopowej dla pracownika.
::       _a _P - wskazanie pracownika
::       _b DATE - data wyliczenia rezerwy
::       _c REAL - współczynnik do wyliczenia ekwiwalentu
::       _d STRING - czy wyliczać narzuty
::       [_e] INTEGER - metoda obliczania rezerwy
::  OLD: \rezerwa_url/kart_url.fml
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
P.cntx_psh();
REF.P:=_a;
REF.P().OSOBA();
_data:=_b;
_wsp_ekw:=_c;
_czy_narzuty:=_d;
_metoda:=_e;

: wartość zwracana
_ret:=obj_new('LIM_ZAL','LIM_AKT','URL_DOD','DATA_DOD','URL_SUM','URL_WYK','KWOTA','BLAD','URL_POZ','URL_POZG',
              'NARZUTY','KW_PRAC','POD_REZ');
_len:=obj_len(_ret);
{! _ii:=1.._len
|! _ret[_ii]:=0
!};
_ret.DATA_DOD:=date(0,0,0);
_ret.BLAD:='';

_epilog:="
   KART_URL.cntx_pop();
   P.cntx_pop();
   ~~
";

: wartości graniczne
_rok:=_data~1;
_zakres:=_data~2;
: początek roku
_beg:=date(_rok,1,1);
: ograniczenie z dołu
_start:={? _beg<P.DZA || P.DZA || _beg ?};
: koniec roku
_end:=date(_rok,12,0);
: ograniczenie z góry
_stop:={? P.DZ=#0 || _end || P.DZ ?};
{? _end<_stop
|| _stop:=_end
?};

KART_URL.cntx_psh();
KART_URL.index('PRAC_ROK');
KART_URL.prefix(P.ref());
{? ~KART_URL.find_key(_rok)
|| _ret.BLAD:='Nie znaleziono karty urlopowej pracownika.'@;
   _epilog();
   return(_ret)
?};

_ret.LIM_ZAL:=KART_URL.LIM_ZAL+KART_URL.NSP_ZAL;
_wym_url:=KART_URL.LIM_AKT+KART_URL.URL_NSP;
{? (_wym_url+KART_URL.LIM_ZAL+KART_URL.NSP_ZAL+KART_URL.URL_DOD)=0
|| _epilog();
   return(_ret)
?};

_nowy:=(2004<=P.DZA~1);
STAZ.index('_STAZE');
STAZ.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
{? STAZ.first()
|| _do_staz:=0;
   {!
   |? {? ~_do_staz & STAZ.DU='T'
      || _nowy:=_nowy & 2004<=STAZ.DR~1;
         _do_staz:=1
      ?};
      ~_do_staz & STAZ.next()
   !};
   &_do_staz
?};
{? _nowy
|| _P_ref:=P.ref();
   _P_jest:=0;
   P.cntx_psh();
   H.index('_HISTOSD');
   H.prefix(exec('ref_firma','ustawienia'),P.OSOBA);
   {? H.first()
   || {!
      |? {? H.P().F_ZATR().KOD<>'P'
         || _P_jest:=0
         || {? H.P<>_P_ref
            || _nowy:=_nowy & 2004<=H.OD~1
            ?};
            _P_jest:=1
         ?};
         ~_P_jest & H.next()
      !}
   ?};
   P.cntx_pop();
   &_P_ref;
   &_P_jest
?};

_test:=((2004<=_rok) & (_rok=@.P.NAB_URL~1));

{? _nowy & _test
|| _start:=P.NAB_URL;
   _stop:=date(_rok,12,0);
   {? P.DZ~1=_rok
   || _dnab:=P.NAB_URL;
      _dz:=P.DZ;
      _stop:={? _dz=date(_dz~1,_dz~2,0)
             || _dz
             |? _dnab=date(_dnab~1,_dnab~2,0)
             || {? _dz<>date(_dz~1,_dz~2,0)
                || date(_dz~1,_dz~2,1)-1
                || _dz
                ?}
             || {? date(_dz~1,_dz~2,0)~3<_dnab~3
                || date(_dz~1,_dz~2,0)
                || _dnab:=date(_dz~1,_dz~2,_dnab~3);
                   {? _dz<_dnab
                   || date(_dz~1,_dz~2,1)-1
                   || _dz
                   ?}
                ?}
             ?};
      &_dnab;
      &_dz;
      {? _stop<_start
      || _stop:=date(_start~1,_stop~2,0)
      ?}
   ?}
?};

_wym:=exec('wymiar_urlopu_wypoczynkowego','kart_url',_start,_stop,2,P.DZA);
::dodanie urlopu uzupełniającego do liczenia wymiaru urlopu
_ret.DATA_DOD:=KART_URL.DATA_DOD;
{? _ret.DATA_DOD<>#0 & (_ret.DATA_DOD>=_start & _ret.DATA_DOD<=_data)
|| _ret.URL_DOD:=KART_URL.URL_DOD;
   _wym_url+=_ret.URL_DOD
?};

_sum_wsp:=_lk:=0;
{! _ii:=1..12 |! _sum_wsp+=_wym[_ii] !};
{! _ii:=1.._zakres |! _lk+=_wym[_ii] !};
{? _sum_wsp>0
|| _ret.LIM_AKT:=(_wym_url*(_lk/_sum_wsp))$2;
   {? _ret.LIM_AKT<>0
   || _ret.LIM_AKT:=
         {? _nowy & _test & KART_URL.PIERWSZY='T'
         || _ret.LIM_AKT$2
         || ceil(_ret.LIM_AKT)
         ?}
   ?}
?};

&_sum_wsp;
&_wym_url;
&_lk;

_nowy:=(2004<=_rok);
fnorma:=
   {? P.KAL
   || {? P.KAL().CZESC='T'
      || "exec('norma','godziny',_a)"
      || {? KAL_NAZW.NORMA || $form(KAL_NAZW.NORMA,,,'0.') || "8" ?}
      ?}
   || "8"
   ?};

: urlop wypoczynkowy
N.index('NIPRACNB');
N.prefix('N',P.ref(),KST_PAR.URLOP().RN);
{? N.find_ge(date(_rok,1,1))
|| {!
   |? {? N.OD<=_data
      || _ret.URL_WYK+={? _nowy || N.NG/fnorma(N.OD) || N.NR ?}
      ?};
      N.next() & N.OD<=_data
   !}
?};

: urlop dodatkowy i oddelegowanie
_rn:=__RUB.sys_kod(1113,,1);
_rodddod:=spli_str('%1%2'[__RUB.sys_sql(1114),{? _rn<>0 || ',%1'[$_rn] || '' ?}],',');
{! _ii:=1..obj_len(_rodddod)
|! N.index('NIPRACNB');
   N.prefix('N',P.ref(),#_rodddod[_ii]);
   {? N.find_ge(date(_rok,1,1))
   || {!
      |? {? N.OD<=_data
         || _ret.URL_WYK+={? _nowy || N.NG/fnorma(N.OD) || N.NR ?}
         ?};
         N.next() & N.OD<=_data
      !}
   ?}
!};
obj_del(_rodddod);

: urlop na żądanie
N.index('NIPRACNB');
N.prefix('N',P.ref(),KST_PAR.URL_CHOR().RN);
{? N.find_ge(date(_rok,1,1))
|| {!
   |? {? N.OD<=_data
      || _ret.URL_WYK+={? _nowy || N.NG/fnorma(N.OD) || N.NR ?}
      ?};
      N.next() & N.OD<=_data
    !}
?};
_ret.URL_WYK:=_ret.URL_WYK$2;

_wyn_zas:=0;
_dodatki:=0;
_cp:='';
_wym_zat:=P.WY;
H.index('_HISTKOD');
H.prefix(P.ref(),'Z');
{? H.find_le(_data)
|| _cp:=H.CP().S;
   _hsx:=exec('hsx','lista_licz',_data);
   _wyn_zas:=_hsx.S1;
   _dodatki:=_hsx.S2+_hsx.S3;
   obj_del(_hsx);
   &_hsx;
   _wym_zat:=H.WY
?};
{? 1+_cp='F'
|| _wyn_zas:=_wyn_zas*exec('nominal','godziny',date(_rok,_zakres,1),date(_rok,_zakres,0),1)$2
?};

_biezacy:=_ret.LIM_ZAL+_ret.LIM_AKT;

: sprawdzenie zależności wykorzystanego urlopu z limitem daje rezerwę
_podstawa:=
   {? _biezacy>=_ret.URL_WYK
   || _biezacy-_ret.URL_WYK
   ?};
{? _podstawa<0
|| _podstawa:=0
?};
_ekw:=0;
{? _podstawa>0
|| {? P.DZ<>#0 & P.DZ~1=_rok & P.DZ~2=_zakres
   || H_UM.cntx_psh();
      H_UM.index('OD');
      H_UM.prefix(P.ref());
      {? H_UM.last()
      || {? (H_UM.EKW>0 | H_UM.EKW_NSP>0) & H_UM.LT<>''
         || O.cntx_psh();
            O.index('LISTYPZN');
            O.prefix(exec('ref_firma','ustawienia'));
            {? O.find_key(-H_UM.LT)
            || {? O.R=_rok & O.M=_zakres & date(O.R,O.M,1)=date(O.RP,O.MP,1)
               || _ekw+=H_UM.EKW/fnorma(P.DZ)$2;
                  _ekw+=H_UM.EKW_NSP/fnorma(P.DZ)$2;
                  _ret.URL_WYK+=_ekw
               || _ekw+=0
               ?}
            ?};
            O.cntx_pop()
         ?}
      ?};
      H_UM.cntx_pop()
   ?}
?};
&fnorma;
VAR_DEL.delete('__nieob');

: urlop całkowity
_ret.URL_SUM:=_ret.LIM_ZAL+_ret.LIM_AKT;

_podstawa-=_ekw;
{? _podstawa<0
|| _podstawa:=0
?};

: urlop pozostały dni i godziny
_ret.URL_POZ:=_podstawa;
_fnorma:=exec('norma_fml','godziny');
_norma:=_fnorma(_data);
{? _norma>0
|| _ret.URL_POZG:=_ret.URL_POZ*_norma
?};

{? (_wsp:=_wsp_ekw*_wym_zat)>0
|| {? _metoda='REZ_SKL'
   || _ret.POD_REZ:=((_wyn_zas+_dodatki)/_wsp)$2;
      _ret.KWOTA:=(_ret.POD_REZ*_ret.URL_POZ)$2
   |? _metoda='REZ_EKW'
   || _podstawa_ekw:=exec('ekwiwalent_ppl','lista_licz','P',,_data);
      _ret.POD_REZ:=(((_podstawa_ekw/_wsp)$2)/_norma)$2;
      {? _norma>0
      || _ret.KWOTA:=(_ret.POD_REZ*_ret.URL_POZG)$2
      ?}
   ?}
?};

{? _ret.KWOTA<>0 & _czy_narzuty='T'
|| _narzuty:=exec('narzuty_firmy','lista_licz',P.OSOBA,_data);
   _ret.NARZUTY:=((_ret.KWOTA*_narzuty)/100)$2;
   _ret.KW_PRAC:=_ret.KWOTA+_ret.NARZUTY
?};

_epilog();
_ret


\ustaw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [19.02]
:: OPIS: Ustawia wyliczone wartości rezerwy na podsatwie wyniku formuły oblicz.
::   WE: _a [OBJECT] - wskazanie tablicy nazwanej
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
: mapa argumentów
_val:=_a;

RURL_P.LIM_ZAL:=_val.LIM_ZAL;
RURL_P.LIM_AKT:=_val.LIM_AKT;
RURL_P.URL_DOD:=_val.URL_DOD;
RURL_P.DATA_DOD:=_val.DATA_DOD;
RURL_P.URL_SUM:=_val.URL_SUM;
RURL_P.URL_WYK:=_val.URL_WYK;
RURL_P.KWOTA:=_val.KWOTA;
RURL_P.URL_POZ:=_val.URL_POZ;
RURL_P.URL_POZG:=_val.URL_POZG;
RURL_P.NARZUTY:=_val.NARZUTY;
RURL_P.KW_PRAC:=_val.KW_PRAC;
RURL_P.POD_REZ:=_val.POD_REZ;
~~


\metoda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.37]
:: OPIS: Sprawdzenie metody na wyliczenie podstawy rezerwy
::   WE: _a DATE   - data wyliczenia rezerwy
::       _b STRING - kod metody wyliczania rezerwy
::   WY: INTEGER
::----------------------------------------------------------------------------------------------------------------------
_data:=_a;
_metoda:=_b;
{? _metoda='REZ_EKW'
|| SEEK.O:=__PARSES.getVal('ListaPłac').REF;
   {? SEEK.O=null()
   || FUN.info('Nie można obliczyć rezerwy urlopowej wybraną metodą, '
               'bez wskazania listy płac w parametrach pracy.'@);
      return(0)
   ?};
   SEEK.O();
   {? ~(O.LT*'sum') | ~(O.M=_data~2) | ~(O.LT*($(_data~1)+2))
   || FUN.info('W celu wyliczenia rezerwy urlopowej należy wybrać listę płac typu SUM na %1.'@[form(_data,,8)]);
      return(0)
   ?}
|? _metoda<>'REZ_SKL' & _metoda<>'REZ_EKW'
|| FUN.info('Wybrana metoda nie jest systemowa. Wyliczenia rezerwy nie zostanie wykonane.'@);
   return(0)
?};
1


\rurl_n_wyswietl_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.37]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla tabeli RURL_N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RURL_N.win_edit('WZO');
RURL_N.display()


\rurl_n_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.37]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli RURL_N.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RURL_N.win_edit('RED')

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:53 b8ac01a1d8ce759ef54a802af7bca8bf983b473b3e1e4322e7663fe3b5c4acdd4f6a614d718e77f4bc0a6bbe956dd5e1aabe6d7a9974c1c61ed5531295b06bd65422b2fc85fb1f878d54220826884bd761af3548c09d7e6b8d231dbdd17f121e11a395a52a6bb90f68b739d1e5274aac63d6178d457480a19341c375903b7d97
