:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_kkhr.fml
:: Utworzony: 16.02.2015
:: Autor: AWI
::======================================================================================================================
:: Zawartość: Kartoteka kontrahentów
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=STATUS, type=STRING,   name=Kontrahent,  required=N, fml_val="exec('status','!zws_par_kkhr')"
::# kind=WY,   symbol=KH,     type=_KH,      name=Kontrahent,  required=N
::# properties=GRP_FIRM
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

_dialog:={? _mp.isService() || 0 || 1 ?};
exec('init','!zws_par_kkhr');

_akcja:=_mp.akcja();

{? _mp.isMicro()
:: Obsługa Dołącz, Popraw, Usuń poza procesem
||
   {? _akcja='Dołącz' || exec('kh_add','!zws_par_kkhr',_dialog)
   |? _akcja='Dołącz_potencjalny' || exec('kh_add','!zws_par_kkhr',_dialog,1)
   |? _akcja='Popraw' || exec('kh_put','!zws_par_kkhr',_dialog)
   |? _akcja='Usuń' || exec('usun_kh','!zws_par_kkhr',_dialog)
   |? _akcja='Zmień_status' || exec('kh_p_zmien','!zws_par_kkhr',_dialog)
   ?}
:: Obsługa Dołącz w procesie
|| _krefs:=_mp.getRefs();
   {? var_pres('[1]',_krefs)=type_of(~~)
:: Standrdowa obsługa - kontrahent będzie dodawany
   || obj_del(_krefs);
      _mp.trigRef('KH');
      {? _akcja='Dołącz_potencjalny'
            |
         var_pres('STATUS',_in)=type_of('') & _in.STATUS=exec('kh_popis_1','kontrahent')
      ||
         exec('kh_add','!zws_par_kkhr',_dialog,1)
      ||
         exec('kh_add','!zws_par_kkhr',_dialog)
      ?};
      _krefs:=_mp.getRefs();
      {? var_pres('[1]',_krefs)<>type_of(~~)
::    Jest rekord kluczowy tzn., że w exec('kh_add','!zws_par_kkhr') dodano kontrahenta
      || KH.cntx_psh();
         KH.prefix();
         {? KH.seek(_krefs[1])
         || _out.KH:=KH.ref();
            _mp.save(,_out)
         ?};
         KH.cntx_pop();
         _mp.done()
      ?}
:: Obsługa niestandardowa - kontrahent już jest a czynność nie została zakończona z niewyjaśnionych przyczyn
   || KH.cntx_psh();
      KH.prefix();
      {? KH.seek(_krefs[1])
      || {? exec('kh_put','!zws_par_kkhr') || _mp.done() ?}
      || FUN.info('Nie znaleziono kontrahenta.\nZadanie zostanie zakończone.'@);
         _mp.done()
      ?};
      KH.cntx_pop()
   ?}
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_krefs:=_mp.getRefs();

{? var_pres('[1]',_krefs)<>type_of(~~)
|| KH.cntx_psh();
   KH.prefix();
   {? KH.seek(_krefs[1])
   || 'Zredaguj kontrahenta: %1 - %2'@@[KH.KOD,KH.NAZ]
   || 'Nie znaleziono kontrahenta'@@
   ?};
   KH.cntx_pop()
|| 'Dodaj kontrahenta'@@
?}


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Init
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'DWD','UWD','SLP')


\kh_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kontrahent - dołącz
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KKHR';
_params.AKCJA:='Dołącz';
_params.PROC_START:='T';

exec('mp_run','#b__box',_params)


\kh_dolacz_poten
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kontrahent - dołącz - ptencjalny
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KKHR';
_params.AKCJA:='Dołącz_potencjalny';
_params.PROC_START:='T';

exec('mp_run','#b__box',_params)


\kh_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kontrahent - popraw
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KKHR';
_params.AKCJA:='Popraw';

exec('mp_run','#b__box',_params)


\kh_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Kontrahent - usuń
::       Obsługa w formule main
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KKHR';
_params.AKCJA:='Usuń';

exec('mp_run','#b__box',_params)


\kh_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2006]
:: OPIS: dodawanie kontrahenta
::   WE: [_a] - INTEGER - 0/[1] - czy pokazywać dialogi wymagające interakcji użytkownika
::       [_b] - 1/2 - KH.P
::  OLD: \kh_add/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(1) || _a || 1 ?};
_kh_p:={? var_pres('_b')=type_of(1) || _b || 2 ?};
{? _dialog || KH.blank() || _wsenv:=exec('wsenv','#mwapi') ?};
exec('kh_dod_ety_kol','kontrahent');
SLUAPPL.cntx_psh(); SLU.cntx_psh();
{? KH.KOD='' || KH.KOD:=exec('blank_kh_kod','kontrahent') ?};
KH.P:=_kh_p;
KH.POPIS:=exec('kh_popis','kontrahent',KH.P);
{? _dialog=0 & KH.SKR='' || KH.SKR:=KH.KOD ?};
KH.memo_set(,'OPIS');
KH.memo_set(,'POWIAD');
KH.memo_set(,'POWTEAMS');
KH.memo_set(,'POWNTC');
KH.win_edit('RED');
DISP.GRKHKLIM:=null();
SKID.GR_LIM:=null();
_ok:=1;
slo_pop:=0; ref_slo:=null; zm_kh:=0;
exec('nip2tmp','kontrahent');
KH_DOD.blank();
OSOBA.cntx_psh();
OSOBA.win_dict('WER1');
OSOBA.actions('WER1','W');

_ref:=null();
_fld:=obj_new('EFAKTURA','BDO'); _fld.EFAKTURA:=''; _fld.BDO:=''; params_set('fld',_fld);
{? var_pres('TMPCHKNIP')>0
|| TMPCHKNIP.erase()
|| TMPCHKNIP:=tab_tmp(1,'NIP','STRING[20]',,'TYPE','STRING[1]',,'ACTIVE','INTEGER',)
?};
KH.cntx_psh();
{!
|? {? _dialog
   || exec('set_required_fields','!zws_par_kkhr');
      exec('set_disabled_fields','kontrahent')
   ?};
   exec('kh_cre','kontrahent');
:: W trybie bez dialogów próbujemy dodać to, co jest aktualnie w buforze.
   _valid:={? _dialog
           || KH.edit("zm_kh:=0; params_exec('kon_po','!zws_par_kkhr')")
           || zm_kh:=0;
              _res:=exec('kon_po','!zws_par_kkhr',,,,1);
              {? (type_of(_res)=type_of(1) & _res=1)
              |  (type_of(_res)=type_of('') & _res='')
              || 1
              || _wsenv.add_error('Błąd wypełnienia pola: %1.'@[_res]);
                 0
              ?}
           ?};
   {? _valid
   || _undo:=0; _errno:=0;
      do();
      KH.prefix();
      _add:=KH.add(1);
      {? _add
      || _ref:=KH.ref();
         KH.memo_put(,'OPIS');
         KH.memo_put(,'POWIAD');
         KH.memo_put(,'POWTEAMS');
         KH.memo_put(,'POWNTC');
         SKID_RBK.index('TRN'); SKID_RBK.prefix('KH',#KH.ref());
         {? SKID_RBK.first() || {! |? SKID_RBK.del() !} ?};
         SKID_RBK.prefix(REF.FIRMA().SYMBOL+'KH2',#KH.ref());
         {? SKID_RBK.first() || {! |? SKID_RBK.del() !} ?};
         KH_DOD.prefix();
         KH_DOD.FIRMA:=REF.FIRMA;
         {? ~_dialog || KH_DOD.NASZ_KOD:=KH.NASZ_KOD ?};
         KH_DOD.KH:=KH.ref();
         KH_DOD.add();
         exec('kh_dod_upd','!zws_par_kkhr',KH.ref());
         {? KODSLU.NIP_UE<>'' || exec('add_nip_ue','mwa_kh') ?}
      ?};
      exec('tmp2nip','!zws_par_kkhr');
      {? var_pres('TMPCHKNIP')>0 & TMPCHKNIP.first() & KH.NIP=TMPCHKNIP.NIP
      || exec('add_chk_vat','kontrahent',KH.NIP,'K',KH.ref(),TMPCHKNIP.ACTIVE,1);
         TMPCHKNIP.del()
      ?};
      _add:=_add & do_state();
      end();
      {? _errno<>0 & ~_undo
      || FUN.emsg(
            'Nie udała się modyfikacja danych partnera Businesslink.'@+'\n'+
            'Należy skontaktować się z administratorem systemu (błąd %1).'@[$_errno]
         )
      ?};
      {? _add=1
      || {? ~_dialog || _wsenv.IDADD:=KH.IDADD ?};
         exec('dol','giodo','kh',KH.ref(),date());
         {? KH.f_active || KH.f_rfresh ?};
         _ok:=1
      || {? ~_dialog || _wsenv.add_error('Błąd dodania kontrahenta.'@) ?};
         _ok:=0
      ?}
   || _ok:=1
   ?};
   ~_ok
!};
KH.cntx_pop();
OSOBA.cntx_pop();
{? _ref || KH.seek(_ref) ?};
VAR_DEL.delete('TYM_NIP','slo_pop','ref_slo','zm_kh','TMPCHKNIP');
SLUAPPL.cntx_pop();  SLU.cntx_pop();
clr_edit();
''


\kh_put
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: edycja kontrahenta
::   WE: [_a] - INTEGER - 0/[1] - czy pokazywać dialogi wymagające interakcji użytkownika
::  OLD: \kh_put/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(1) || _a || 1 ?};
{? ~_dialog || _wsenv:=exec('wsenv','#mwapi') ?};
exec('kh_dod_ety_kol','kontrahent');
_wyn:=0;
KH.win_edit('RED');
_kod:=KH.KOD; _naz:=KH.NAZ; __KH_MOD:=1;
slo_pop:=0; ref_slo:=null; zm_kh:=0;
exec('nip2tmp','kontrahent',1);
fiz_kh:=KH.FIZYCZNY;
{? var_pres('BUFGIO')>100 || obj_del(BUFGIO) ?};
BUFGIO:=obj_new(@.CLASS.BUFFER,'KH'); BUFGIO.save();
KH.memo_get(,'OPIS');
KH.memo_get(,'POWIAD');
KH.memo_get(,'POWTEAMS');
KH.memo_get(,'POWNTC');
SLU.cntx_psh(); SLO.cntx_psh();
OSOBA.cntx_psh();
OSOBA.win_dict('WER1');
OSOBA.actions('WER1','W');

_get:={? _dialog || KH.get() || 1 ?};
{? _get & KH.r_lock(1,1,1)
||
   _fld:=obj_new('EFAKTURA','BDO'); _fld.EFAKTURA:=''; _fld.BDO:=KH.NRREJDBO; params_set('fld',_fld);
   {!
   |?
      _put:=1;
      exec('kh_mod','kontrahent');
      _dod:=exec('kh_dod_ini','kontrahent');
      {? _dod || _efaktura:=KH_DOD.EFAKTURA || _efaktura:='N' ?};
      _snip:=KH.SNIP; _naz_p:=KH.NAZ_P; _skr:=KH.SKR;
      {? _dialog
      || exec('set_required_fields','!zws_par_kkhr');
         exec('set_disabled_fields','kontrahent')
      ?};
      _abs_ofe:=KH.STR_OFE;
      _valid:={? _dialog
              || _dod & KH.edit("params_exec('kon_po','!zws_par_kkhr',0,$'','p')")
              || {? KODSLU.NIP_UE='' || exec('pw_nipue','!zws_par_kkhr') ?};
                 _res:=exec('kon_po','!zws_par_kkhr',0,$'','p',1);
                 {? type_of(_res)=type_of(1) & _res=1 & _dod
                 || 1
                 || _wsenv.add_error('Błąd wypełnienia pola: %1.'@[_res]);
                    0
                 ?}
              ?};
      {? _valid
      || _undo:=0; _errno:=0;
         do();
         KH.cntx_psh(); KH.prefix();
         {? KH.put(1)
         || KH.memo_put(,'OPIS');
            KH.memo_put(,'POWIAD');
            KH.memo_put(,'POWTEAMS');
            KH.memo_put(,'POWNTC');
            {? ~_dialog || KH_DOD.NASZ_KOD:=KH.NASZ_KOD ?};
            KH_DOD.put();

::          Ponowne pobranie ID z bazy BDO, o ile nastąpiła zmiana numeru
            {? exec('is_active','bdo_fun')
            || {? _fld.BDO<>KH.NRREJDBO
               || exec('KH_put_id','bdo_fun',KH.ref(),1,1)
               ?}
            ?};
            {? exec('pop_slo','slo_slu','KH')
            || {? KODSLU.NIP_UE<>'' || exec('add_nip_ue','mwa_kh') ?};
               exec('tmp2nip','!zws_par_kkhr');
::             Po aktualizacji NIP-ów mógł się zmienić domyślny NIP UE, podczytanie bufora po ewentualnej modyfikacji
               KH.get()
            || undo()
            ?};
            exec('kho_update','!zws_par_kkhr',KH.ref());

::       Dezaktywacja/aktywacja ofert indywidualnych na Connectorze
            {? KH.ABSTORE<>'' & (_abs_ofe<>KH.STR_OFE)
            ||
               {? KH.STR_OFE='PMAG_PIND_BKLI' | KH.STR_OFE='PMAG_OIND_BKLI' | KH.STR_OFE=''
               ||
                  {? ~exec('po_act','abstore', KH.ref(), 1)
                  || FUN.info('Nie udało się aktywować ofert indywidualnych.'@); undo()
                  ?}
               |? KH.STR_OFE='BMAG_BIND_OKLI' | KH.STR_OFE='BMAG_BIND_PKLI'
               ||
                  {? ~exec('po_act','abstore', KH.ref(), 0)
                  || FUN.info('Nie udało się dezaktywować ofert indywidualnych'@); undo()
                  ?}
               ?}
            ?}
          ?};
         _put:=do_state();
         end();
         {? _errno<>0 & ~_undo
         || FUN.emsg(
               'Nie udała się modyfikacja danych partnera Businesslink.'@+'\n'+
               'Należy skontaktować się z administratorem systemu (błąd %1).'@[$_errno]
            )
         ?};
         {? _put=1
         || RS.TAB:='KH';
            exec('giokhbe','giodo');
            do();
            KH.cntx_psh(); KH.prefix();
            KH.put();
            exec('giokhae','giodo');
            KH.cntx_pop();
            end()
         || _put:=0
         ?};
         KH.cntx_pop();
         {? _put & KH.f_active || KH.f_rfresh ?}
      ?};
      _put=0
   !};
   KH.r_unlock();
   _wyn:=_put
||
   {? _dialog & FUN.ask('Kontrahenta edytuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@)
   || KH.r_lock(1,,1);
      KH.r_unlock()
   |? ~_dialog
   || FUN.emsg('Kontrahenta edytuje inny użytkownik.'@)
   ?}
?};
OSOBA.cntx_pop();
SLU.cntx_pop(); SLO.cntx_pop();
VAR_DEL.delete('TYM_NIP','slo_pop','ref_slo','zm_kh','BUFGIO','__KH_MOD');
clr_edit();
_wyn


\usun_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [8.60]
:: OPIS: Usuwa rekord z tabeli KH; sprawdza czy usuniecie jest mozliwe
::       tzn. czy nie jest uzyty w SLO i uruchamia wlasciwa formule usuwajaca
::   WE: [_a] - INTEGER - 0/[1] - czy pokazywać dialogi wymagające interakcji użytkownika
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_a')=type_of(1) || _a || 1 ?};
{? ~_dialog || _wsenv:=exec('wsenv','#mwapi') ?};
{? ~exec('czy_usun','!zws_par_kkhr','KH') || return('') ?};

{? KH.LOTUSUID<>''
|| _txt:='Kontrahent powiązany z systemami na platformie Lotus Notes Domino.'@+
         '\n'+'Usunięcie kontrahenta niemożliwe.'@;
   {? _dialog
   || FUN.info(_txt)
   || _wsenv.add_error(STR.gsub(_txt,'\n',' '))
   ?};
   return('')
?};

{? KH.r_lock(1,1,1)
||
   {? _dialog & FUN.ask('Czy na pewno usunąć kontrahenta %1?'@[KH.SKR])
    | ~_dialog
   ||
      KH.r_unlock();
      do();

::    rachunki bankowe
      exec('usunsrbk','!zws_par_kkhr');

::    giodo
      GIODO.index('GIODKH');
      GIODO.prefix(KH.ref());
      {? GIODO.first() || {! |? GIODO.del() !} ?};

::    nipy
      NIPY.index('SNIP');
      NIPY.prefix(KH.ref());
      {? NIPY.first() || {! |? NIPY.del() !} ?};

::    usunięcie danych zależnych od firmy
      KH_DOD.index('KH');
      KH_DOD.prefix(KH.ref());
      _loop:=KH_DOD.first();
      {!
      |? _loop
      |! _loop:=KH_DOD.del()
      !};

      _msg:=0;
      {? KH.count()=0
      ||
         exec('del_att','dok_fks',$KH.ref());
         _msg:=KH.del(1,1)
      || undo()
      ?};

      end();
      {? _msg=0
      || _txt:='Usunięcie kontrahenta %1 niemożliwe.\nKontrahent wykorzystywany w systemie.'@[KH.SKR];
         {? _dialog
         || FUN.info(_txt)
         || _wsenv.add_error(STR.gsub(_txt,'\n',' '))
         ?}
      || {? ~_dialog || _wsenv.add_info('Kontrahent usunięty.'@) ?}
      ?}
   ?}
||
   {? _dialog & FUN.ask('Kontrahenta edytuje inny użytkownik.\nCzy chcesz zobaczyć kto?'@)
   || KH.r_lock(1,,1)
   |? ~_dialog
   || FUN.emsg('Kontrahenta edytuje inny użytkownik.'@)
   ?}
?};
''


\kon_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Formuła sprawdzająca wypełnienie pól tabeli KH
::   WE: _a  - czy uruchamiać formułe unikatd... - np dla dołącz [0]/1
::             0 lub _a nie zadeklarowane - uruchamiać
::             1 - nie uruchamiać
::       _b  - zmienna do której przypisywany jest wynik funkcji
::       _c  - operacja [p]opraw lub [d]ołącz
::      [_d] - [0]/1 - przechowuj komunikaty w envie web serwisu
::   WY: 1 - ok; string - akronim pola od którego należy kontynuować edycje
::  OLD: \kon_po/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
::return(1);
_wyn:=1;
{? var_pres('_a')<>type_of(1) || _a:=0 ?};
{? var_pres('_b')<>type_of("") || _b:="" ?};
{? var_pres('_c')<>type_of('') || _c:={? _a=0 || 'd' || 'p' ?} ?};
{? var_pres('_d')<>type_of(1) || _d:=0 ?};
{? _d=1
|| _wsenv:=exec('wsenv','#mwapi')
?};
_txt:='';

_par25:=exec('get_par','#parametr',25);

:: rezygnacja z rejestracji danych dla rolnika ryczałtowego.
_a116_2_3:=0;

{? (_wyn:=
      {? KH.KOD=''   || 'KOD'
      |? KH.TYP=''   || 'TYP'
      |? KH.SKR=''   || 'SKR'
      |? KH.NAZ_P='' || 'NAZ_P'
      |? KH.NAZ=''   || 'NAZ'
      |? (KH.TYP='P' | (KH.TYP='R' & KH.PESEL='')) & KH.NIP='' || 'NIP'
      || ''
      ?})<>''
|| _nazwa:="
      _c:=~~;
      {! _b:=1..KH.fld_num()
      |? _c=~~
      |! {? KH.fld_acr(_b)=_a ||
         _c:=KH.fld_name(_b)
         ?}
      !}; {? type_of(_c)=type_of(~~) || '' || _c ?}";
   _txt:='Niewypełnione pole: '+_nazwa(_wyn)+'.';
   {? _b=""
   || FUN.info(_txt)
   || _b()[1]:=_wyn;
      _b()[2]:=STR.gsub(_txt,'\n',' ')
   ?}
|| _wyn:='';
   {? ~exec('czy_slrr','!zws_par_kkhr') || _wyn:='TYP' ?};
   {? _wyn=''
   || {? 'PURI'*KH.TYP=0
      || _txt:='Należy podać poprawny typ kontrahenta: P, U, R, I.'@;
         _wyn:='TYP';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? KH.TYP='P' & KH.NIP=''
      || _txt:='Kontrahent jest płatnikiem podatku VAT.\nPodaj NIP kontrahenta.'@;
         _wyn:='NIP';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? KH.TYP='P' & KH.PESEL<>''
      || _txt:='Kontrahent jest płatnikiem podatku VAT.\nNie można podać numeru PESEL.'@;
         _wyn:='TYP';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? KH.TYP='U' & KODSLU.NIP_UE=''
      || _txt:='Kontrahent jest płatnikiem podatku VAT UE.\nPodaj NIP kontrahenta w UE.'@;
         _wyn:='NIP_UE';
         {? _b=""
         || FUN.info(_txt);
            exec('czy_nue','!zws_par_kkhr')
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? KH.TYP='R' & {? KH.NIP='' || KH.PESEL='' || 0 ?}
      || _txt:='Kontrahent jest rolnikiem ryczałtowym.\nPodaj NIP lub PESEL kontrahenta.'@;
         _wyn:='NIP';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? _a116_2_3 & KH.TYP='R' & KH.NDT=null
      || _txt:='Kontrahent jest rolnikiem ryczałtowym.\nPodaj Nazwę dowodu tożsamości.'@;
         _wyn:='NDT';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? _a116_2_3 & KH.TYP='R' & KH.SN_DT=''
      || _txt:='Kontrahent jest rolnikiem ryczałtowym.\nPodaj Serię i numer DT.'@;
         _wyn:='SN_DT';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? _a116_2_3 & KH.TYP='R' & KH.WP=null
      || _txt:='Kontrahent jest rolnikiem ryczałtowym.\nPodaj Urząd wydający dowód tożsamości.'@;
         _wyn:='WP';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? _a116_2_3 & KH.TYP='R' & KH.DATA_WDT=date(0,0,0)
      || _txt:='Kontrahent jest rolnikiem ryczałtowym.\nPodaj Datę wydania DT.'@;
         _wyn:='DATA_WDT';
         {? _b=""
         || FUN.info(_txt)
         || _b()[1]:=_wyn;
            _b()[2]:=STR.gsub(_txt,'\n',' ')
         ?}
      |? KH.DREA<0
      || _txt:='Liczba dni na realizację zamówienia nie może być ujemna.'@;
         FUN.info(_txt);
         _wyn:='DREA'
      |? KH.KHCHKNIP<0
      || _txt:='Liczba dni co ile będzie sprawdzana aktywność podatnika VAT nie może być ujemna.'@;
         FUN.info(_txt);
         _wyn:='KHCHKNIP'
      ?};
      {? _wyn='' & KH.TYP<>'U' &  KODSLU.NIP_UE<>'' & _b=""
      || {? FUN.ask('Kontrahent nie jest płatnikiem podatku VAT UE.\n'
                    'Czy usunąć symbole VAT w UE?'@)
         || TYM_NIP.prefix(); {? TYM_NIP.first() || {! |? TYM_NIP.del() !} ?}
         ?}
      ?};
      {? _wyn='' & KH.WIELKOSC=''
      || FUN.emsg('Wprowadź wielkość przedsiębiorstwa.\nListę obsługiwanych wartości '
               'można wyświetlić klawiszem F3.'@);
         _wyn:='WIELKOSC'
      ?}
   ?};
:: dane dodatkowe
   {? _wyn=''
   || _wyn:=exec('kh_dod_validate','kontrahent',_d)
   ?};
   {? _wyn=''
   || {? _par25='T' & KH.SNIP<>''
      ||
         _ref:={? _a | _c='p' || KH.ref || null ?};
         _snip:=KH.SNIP;
         {? _c='p' || _bufnip:=BUFGIO.get('SNIP') || _bufnip:='' ?};
         KH.cntx_psh;
         KH.index('SNIP');
         {! _ii:=1..2
         |!
            KH.prefix(_ii,KH.SNIP);
            {? _wyn='' & KH.first
            ||
               {!
               |?
                  {? KH.SNIP=_snip & (_ref=null | (_ref<>KH.ref & (_bufnip='' | _bufnip<>_snip)))
                  ||
                     _txt:='W kartotece istnieje już kontrahent '+KH.KOD+' z NIP '+KH.NIP+'.\n'+
                     {? _c='p' || 'Poprawienie' || 'Dodanie' ?}+' kontrahenta nie powiodło się.';
                     _wyn:='NIP';
                     {? _b=""
                     || FUN.info(_txt)
                     || _b()[1]:=_wyn;
                        _b()[2]:=STR.gsub(_txt,'\n',' ')
                     ?}
                  ?};
                  _wyn='' & KH.next
               !}
            ?}
         !};
         KH.cntx_pop
      ?}
   ?};

   {? _wyn=''
   || _wyn:=exec('chk_kh_abstore_core','abstore_fun')
   ?};

   {? _wyn=''
   || _wyn:=exec('chk_kh_grvat','kontrahent')
   ?};

   {? _wyn=''
   ||
      {? ((  ~_a & (_wyn:=exec('unikatd','!zws_par_kkhr',KH.KOD,{? -(1+menu_txt())='p' | _c='p' || KH.ref() || null ?})))  | _a)
      || {? ~exec('uniqskr','!zws_par_kkhr',_c='p',KH.SKR,,,_b,_d)
         || _wyn:='SKR'
         || VAR_DEL.delete('__khchck');
            {? -(1+menu_txt())='d' | _c='d' || _v:=0  || _v:=1  ?};
            {? (var_pres('zm_kh')>0 & zm_kh=1) || _v:=1 ?};
            {? ~exec('uniqnazp','!zws_par_kkhr',_v,KH.NAZ_P,KH.MIASTO,,,KH.UL,_b,KH.DOM,KH.LOKAL,KH.NAZ)
            || _wyn:='NAZ_P'
            || {? var_pres('__khchck')<=0 &
                  ~exec('uniqnaz','!zws_par_kkhr',_v,KH.NAZ,KH.MIASTO,,,KH.UL,_b,KH.DOM,KH.LOKAL)
               || _wyn:='NAZ'
               |? var_pres('__khchck')<=0 & _b=""
               || _wyn1:=exec('uniqnaz_ostrzezenie','!zws_par_kkhr',_v,KH.NAZ_P,KH.NAZ,KH.MIASTO,KH.UL);
                  {? _wyn1<>''
                  || _wyn:=_wyn1
                  ?}
               ?}
            ?};
            VAR_DEL.delete('__khchck')
         ?}
      |? ~_wyn
      ||
         {? ~_d & FUN.ask('Wprowadzono już kontrahenta o podanym kodzie.\nPrzypisać nowy kod dla kontrahenta?'@)
         || KH.KOD:=Plugin.run('KONTRAH_T_KH_001');
            {? KH.KOD=''
            || KH.KOD:=exec('blank_kh_default','kontrahent')
            ?};
            _wyn:='KOD'
::          Przy uruchomieniu z web serwisu uznajemy, że kod nigdy nie jest podmieniany
         |? _d
         || KH.KOD:=exec('blank_kh_default','kontrahent');
            _txt:='Wprowadzono już kontrahenta o podanym kodzie.'@;
            _wyn:='KOD'
         ?}
      ||
         1
      ?}
   ?};

   {? _c='p'
   || KH.cntx_psh(); _tab_id:=exec('get_id','#sync_id','BDO_KH_ID',KH.uidref()); KH.cntx_pop();
      {? ~_d & ((var_pres('_wyn')=type_of('') & _wyn='') | (var_pres('_wyn')=type_of(0) & _wyn)) &
         params_get().fld.BDO<>KH.NRREJDBO & type_of(_tab_id)>100 & _tab_id.first()
      || {? ~FUN.ask(
               'Kontrahent miał już pobrany identyfikator w systemie BDO.\n'
               'Czy zmienić numer rejestrowy BDO i pobrać ponownie identyfikator w systemie BDO?'@
            )
         || _wyn:=0
         ?}
      ?}
   ?};

   {? ~_d & ((var_pres('_wyn')=type_of('') & _wyn='') | (var_pres('_wyn')=type_of(0) & _wyn))
   || exec('kh_teryt_sprawdz','!zws_par_kkhr')
   ?}
?};
{? _d & _txt<>'' || _wsenv.add_error(STR.gsub(_txt,'\n',' ')) ?};
_wyn


\czy_slrr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdza czy ustalono w stałych systemu słownik związany z dowodami tożsamości
::  OLD: \czy_slrr/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
:: rezygnacja z rejestracji danych dla rolnika ryczałtowego.
_a116_2_3:=0;

{? _a116_2_3 & KH.TYP='R'
|| {? XINFO.DWD=null() | XINFO.UWD=null()
   || FUN.info(
         'Nie ustalono słowników związanych z dowodami tożsamości w słownikach systemu.\n'
         'Kontrahent typu "Rolnik ryczałtowy" nie może być wprowadzony.\n'@
      ); 0
   || 1
   ?}
|| 1
?}


\unikatd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DPU [2008]
:: OPIS: sprawdzenie unikalności KH w tabeli źródłowej
::   WE: _a = kod kontrahenta, _b = null dla dołacz, KH.ref() dla popraw
::   WY: 1 = kod unikalny można dodać/zapisać, 0 - duplikat
::  OLD: \unikatd/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wy:=1;
KH.cntx_psh();
KH.index('KOD');
{! _ii:=1..2
|!
   KH.prefix(_ii);
   {? _wy
   ||
      _wy:={? KH.find_key(_a) & KH.KOD=_a
           || _b<>null & _b=KH.ref()
           || 1
           ?}
   ?}
!};
KH.cntx_pop();
_wy


\uniqskr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Sprawdzenie unikalności skrótu kontrahenta
::   WE: [_a] 0 - dołączanie, 1 - poprawianiego
::       [_b] - wartość pola
::       [_c] - parametr czy wywołana funkcja w transakcji
::       [_d] - parametr druga linia komunikatu
::       [_e] - zmienna na komentarz
::       [_f] - [0]/1 - przechowuj komunikaty w envie web serwisu
::  OLD: \uniqskr/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_c')<>type_of(1) || _c:=0 ?};
{? var_pres('_d')<>type_of('') || _d:='' ?};
{? var_pres('_e')<>type_of("") || _e:="" ?};
{? var_pres('_f')<>type_of(1) || _f:=0 ?};

{? _f=1
|| _wsenv:=exec('wsenv','#mwapi')
?};

_vref:=KH.ref();
_v:=1;
_txt:='';
KH.cntx_psh();
KH.index('SKR');
{! _ii:=1..2
|!
   {? _v
   ||
      KH.prefix(_ii);
      {? KH.find_key(_b) & ((_a=0 & KH.SKR=_b)
         | (_a=1 & KH.SKR=_b & KH.ref()<>_vref))
      || {? _c || undo() ?};
         _txt:='Kontrahent o takim skrócie istnieje.\n'@+_d;
         {? _e=""
         || FUN.info(_txt)
         || _e()[1]:=KH.SKR;
            _e()[2]:=STR.gsub(_txt,'\n',' ')
         ?};
         _v:=0
      ?}
   ?}
!};
KH.cntx_pop();
{? _f & _txt<>'' || _wsenv.add_error(STR.gsub(_txt,'\n',' ')) ?};
_v


\uniqnazp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [8.10]
:: OPIS: Formuła sprawdza unikalność miasta i nazwy pełnej kontrahenta
::   WE: _a: 0 - dołaczanie, 1 - poprawianie (dla MF - nie istotny)
::       _b: wartość pola NAZ_P
::       _c: wartość pola MIASTO
::       _d: opcjonalny parametr czy wywołana funkcja w transakcji
::       _e: opcjonalny parametr druga linia komunikatu
::       _f: wartość pola UL
::       _g: opcjonalny zmienna na komentarz
::       _h: wartość pola DOM
::       _i: wartość pola LOKAL
::   WY: 0 - isnieje kontr. o takiej samej nazwie pełnej w tym samym mieście
::       1 - wpp
::  OLD: \uniqnazp/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<>type_of(1) || _d:=0 ?};
{? var_pres('_e')<>type_of('') || _e:='' ?};
{? var_pres('_f')<>type_of('') || _f:='' ?};
{? var_pres('_g')<>type_of("") || _g:="" ?};
{? var_pres('_h')<>type_of('') || _h:='' ?};
{? var_pres('_i')<>type_of('') || _i:='' ?};

_vref:=KH.ref();
_v:=1;
KH.cntx_psh();
KH.index('NAZ_P');
{! _ii:=1..2
|!
   {? _v
   ||
      KH.prefix(_ii);
      {? KH.find_key(_b,_c,_f,_h,_i) & ((_a=0 & KH.NAZ_P=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i)
         | (_a=1 & KH.NAZ_P=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i & KH.ref()<>_vref))
      ||  KH.cntx_psh();
          {? KH.find_key(_j,_c,_f,_h,_i) & ((_a=0 & KH.NAZ=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i)
             | (_a=1 & KH.NAZ=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i & KH.ref()<>_vref))
          || _txtadd:=' i skróconej'@
          || _txtadd:=''
          ?};
          KH.cntx_pop();
          _txt:='Kontrahent o takiej nazwie pełnej'+_txtadd+' w tym mieście pod tym adresem już istnieje.\n'@+_e;
         {? _g=""
         || {? ~FUN.ask(_txt+'\nCzy na pewno zapisać dane?'@)
            || {? _d || undo() ?}; _v:=0
            || _v:=1; __khchck:=1
            ?}
         || _g()[1]:='NAZ_P';
            _g()[2]:=STR.gsub(_txt,'\n',' ');
            {? _d || undo() ?};
            _v:=0
         ?}
      ?}
   ?}
!};
KH.cntx_pop();
_v


\uniqnaz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [8.10]
:: OPIS: Formuła sprawdza unikalność miasta i nazwy skróconej kontrahenta
::   WE: _a: 0 - dołaczanie, 1 - poprawianie (dla MF nie istotny)
::       _b: wartość pola NAZ
::       _c: wartość pola MIASTO
::       _d: opcjonalny parametr czy wywołana funkcja w transakcji
::       _e: opcjonalny parametr druga linia komunikatu
::       _f: wartość pola UL
::       _g: opcjonalny zmienna na komentarz
::       _h: wartość pola DOM
::       _i: wartość pola LOKAL
::   WY: 0 - isnieje kontr. o takiej samej nazwie skróconej w tym samym mieście
::       1 - wpp
::  OLD: \uniqnaz/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_d')<>type_of(1) || _d:=0 ?};
{? var_pres('_e')<>type_of('') || _e:='' ?};
{? var_pres('_f')<>type_of('') || _f:='' ?};
{? var_pres('_g')<>type_of("") || _g:="" ?};
{? var_pres('_h')<>type_of('') || _h:='' ?};
{? var_pres('_i')<>type_of('') || _i:='' ?};

_vref:=KH.ref();
_v:=1;
KH.cntx_psh();
KH.index('NAZ');
{! _ii:=1..2
|!
   {? _v
   ||
      KH.prefix(_ii);
      {? KH.find_key(_b,_c,_f,_h,_i) & ((_a=0 & KH.NAZ=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i)
         | (_a=1 & KH.NAZ=_b & KH.MIASTO=_c & KH.UL=_f & KH.DOM=_h & KH.LOKAL=_i & KH.ref()<>_vref))
      || _txt:='Kontrahent o takiej nazwie skróconej w tym mieście pod tym adresem już istnieje.\n'@+_e;
         {? _g=""
         || {? ~FUN.ask(_txt+'\nCzy na pewno zapisać dane?'@)
            || {? _d || undo() ?}; _v:=0
            || _v:=1; __khchck:=1
            ?}
         || _g()[1]:='NAZ';
            _g()[2]:=STR.gsub(_txt,'\n',' ');
            {? _d || undo() ?};
            _v:=0
         ?}
      ?}
   ?}
!};
KH.cntx_pop();
_v


\uniqnaz_ostrzezenie
:----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [23.25]
:: OPIS: Formuła sprawdza unikalność nazwy, miasta i ulicy kontrahenta, przy jej braku pyta o potwierdzenie
::   WE: _a: 0 - dołaczanie, 1 - poprawianie (dla MF - nie istotny)
::       _b: wartość pola NAZ_P
::       _c: wartość pola NAZ
::       _d: wartość pola MIASTO
::       _e: wartość pola UL
::   WY: 'NAZ' lub 'NAZ_P' - rezygnacja z zapisu
::       '' - zapis
::  OLD: \uniqnazp/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_e')<>type_of('') || _e:='' ?};

_vref:=KH.ref();
_v:='';
_v1:=1;
_v2:=1;
KH.cntx_psh();
KH.index('NAZ_P');
{! _ii:=1..2
|! {? _v1
   || KH.prefix(_ii);
      {? KH.find_key(_b,_d,_e) & ((_a=0 & KH.NAZ_P=_b & KH.MIASTO=_d & KH.UL=_e)
         | (_a=1 & KH.NAZ_P=_b & KH.MIASTO=_d & KH.UL=_e & KH.ref()<>_vref))
      || _v1:=0
      ?}
   ?}
!};
KH.index('NAZ');
{! _ii:=1..2
|! {? _v2
   || KH.prefix(_ii);
      {? KH.find_key(_c,_d,_e) & ((_a=0 & KH.NAZ=_c & KH.MIASTO=_d & KH.UL=_e)
         | (_a=1 & KH.NAZ=_c & KH.MIASTO=_d & KH.UL=_e & KH.ref()<>_vref))
      || _v2:=0
      ?}
   ?}
!};
KH.cntx_pop();
{? ~_v1 | ~_v2
|| {? ~_v1 & _v2
   || _txt:='Kontrahent o takiej nazwie pełnej w tym mieście i na takiej ulicy istnieje.\n'@
   |? _v1 & ~_v2
   || _txt:='Kontrahent o takiej nazwie skróconej w tym mieście i na takiej ulicy istnieje.\n'@
   || _txt:='Kontrahent o takiej nazwie pełnej i skróconej w tym mieście i na takiej ulicy istnieje.\n'@
   ?};
   _txt+='Czy na pewno zapisać dane?'@;
   {? ~FUN.ask(_txt)
   || {? _v1
      || _v:='NAZ'
      || _v:='NAZ_P'
      ?}
   ?}
?};
_v



\tmp2nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Przepisanie do tabeli NIPY (dla KH) zawartości tabeli TYM_NIP
::  OLD: \tmp2nip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
NIPY.index('SNIP'); NIPY.prefix(KH.ref());
{? NIPY.first() || {!|? NIPY.del() !} ?};
TYM_NIP.prefix();
{? TYM_NIP.first()
|| SLO.cntx_psh(); SLU.cntx_psh();
   SLU.index('NAZ'); SLU.prefix('~KRAJE UE');
   {? SLU.first() & SLU.NAZ='~KRAJE UE'
   || SLO.index('SL'); SLO.prefix(SLU.ref());
      {! |?
         NIPY.blank();
         {? var_pres('ref_nip')<=0 || NIPY.KH:=KH.ref ?};
         NIPY.KRAJ:={? SLO.find_key(TYM_NIP.KRAJ) || SLO.ref || null ?};
         NIPY.NIP:=TYM_NIP.NIP;
         NIPY.SNIP:=NIPY.KRAJ().KOD+exec('niptostr','#string',NIPY.NIP);
         NIPY.DEFAULT:=TYM_NIP.DEFAULT;
         NIPY.add();
         TYM_NIP.del()
   !}
   ?};
   SLO.cntx_pop(); SLU.cntx_pop()
?}


\pr_snip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK  [8.10]
:: OPIS: Formula po redakcji pól NIP i PESEL w tabeli KH
::       Szuka kontrahentow z takim samym NIPem lub poczatkowymi znakami NIPu
::  OLD: \pr_snip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? -(6+menu_txt())<>'szukaj'
|| {? var_pres('slo_pop')<=0 || slo_pop:=1 ?};
   {? var_pres('ref_slo')<=0 || ref_slo:=null() ?};
   {? var_pres('zm_kh')<=0 || zm_kh:=0 ?};
   ref_kh:=null();
   {? cur_afld()='NIP' & KH.NIP<>''
   || _snip:=exec('niptostr','#string',KH.NIP);
      {? 2+_snip='PL' || _snip:=2-_snip ?};
      {? KH.TYP='I' | exec('nip_ok','#id',KH.NIP)
      || KH.SNIP:=_snip
      || _zwrot:=0
      ?};
      {? _zwrot
      || _zwrot:=exec('is_kh_nip','!zws_par_kkhr',KH.NIP)
      ?}
   || {? KH.NIP=''
      || {? KH.PESEL<>''
         || KH.SNIP:='';
            _zwrot:=exec('pesel_ok_kh','#id',KH.PESEL);
            KH.SNIP:=KH.PESEL
         || KH.SNIP:=''
         ?}
      ?}
   ?};
   &ref_kh
?};
{? _zwrot || exec('set_required_fields','!zws_par_kkhr') ?};
_zwrot


\is_kh_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [20.14]
:: OPIS: Czy istnieje kontrahent z podanym NIP-em
::   WE: _a - NIP
::       _b - Istnieje możliwość wczytania kontrahenta: 1-tak 0-nie
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
_ref:=KH.ref(); zwrot:=0;
_kh_nip:=_a;
_wczytaj:=var_pres('_b')<=0 | _b;
_snip:=exec('niptostr','#string',_kh_nip);
TMPKH:=tab_tmp(3
   ,'KOD','STRING[8]','Kod'@
   ,'SKR','STRING[20]','Skrót'@
   ,'NAZ_P','STRING[45]','Nazwa'@
   ,'CZY_SLO','STRING[1]','Znacznik'@);
KH.cntx_psh();
KH.index('SNIP');
{! _ii:=1..2
|!
   KH.prefix(_ii,_snip); _dl_nip:=+_snip;
   {? KH.first()
   ||
      {!
      |?
         {? -menu_txt='dołącz' | _ref<>KH.ref()
         || TMPKH.KOD:=KH.KOD;
            TMPKH.SKR:=KH.SKR;
            TMPKH.NAZ_P:=KH.NAZ_P;
            TMPKH.CZY_SLO:={? var_pres('slo_pop')>0 & slo_pop
                           || exec('mark_kh','!zws_par_kkhr')
                           || 'N'
                           ?};
            TMPKH.add()
         ?};
         KH.next()
      !}
   ?}
!};
{? TMPKH.first()
||
   _wer:=TMPKH.mk_sel('Kontrahenci z takim samym symbolem NIP'@,,,'tmpkh_wer');
   TMPKH.win_fld(_wer,,'KOD');
   TMPKH.win_fld(_wer,,'SKR');
   TMPKH.win_fld(_wer,,'NAZ_P');
   {? _wczytaj
   || TMPKH.win_act(_wer,,'Formuła','&Wczytaj'@@,,,,"exec('wczyt_kh','!zws_par_kkhr')",1,,,,'W')
   ?};
   TMPKH.win_act(_wer,,'Formuła','&Powrót do edycji'@@,,,,"zwrot:=0; sel_exit; 1",,,,,'P');
   TMPKH.win_act(_wer,,'Formuła','&Kontynuacja'@@,,,,"zwrot:=1; sel_exit; 1",,,,,'K');
   TMPKH.win_act(_wer,,'Rekord',,,,"{? TMPKH.CZY_SLO='T' || exec('findtmp','#color') ?}");
   TMPKH.win_act(_wer,,'Wyświetl',,,,"exec('disp_kh','!zws_par_kkhr')");
   TMPKH.win_sel(_wer);
   _zwrot:=ask('Istnieje w systemie co najmniej jeden kontrahent\n'@+
               {? _dl_nip<10
               || 'z początkowymi znakami symbolu NIP: '@
               || 'z symbolem NIP: '@
               ?}+'\n'+_kh_nip,'Uwaga!'@,0,'Powrót do edycji'@,
               'Kontynuacja'@,'Pokaż &\szczegóły'@);
   {? _zwrot=2
   || {? ~TMPKH.select() || _zwrot:=0 || _zwrot:=zwrot ?}
   ?}
?};
obj_del(TMPKH);
KH.cntx_pop();
{? zwrot=2 || KH.seek(ref_kh) ?};
&zwrot;
_zwrot


\wczyt_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.10]
:: OPIS: Wczytuje kontrahenta do bufora
::  OLD: \wczyt_kh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? slo_pop & TMPKH.CZY_SLO='N'
|| FUN.info('Dany kontrahent nie jest wykorzystywany\n w bieżącym słowniku użytkownika.'@)
|| KH.index('KOD'); KH.prefix();
   {? KH.find_key(2,TMPKH.KOD) || ref_kh:=KH.ref() ?};
   SLO.cntx_psh();
   SLO.index('SL'); SLO.prefix(SLU.ref());
   {? SLO.find_key(TMPKH.KOD) || ref_slo:=SLO.ref() ?};
   SLO.cntx_pop();
   zwrot:=2; zm_kh:=1; sel_exit()
?}


\disp_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.10]
:: OPIS: Znajduje dla biezacego rekordu tabeli TMPKH kontrahenta i wyswietla go
::  OLD: \disp_kh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.cntx_psh();
KH.win_edit('RED');
KH.index('KOD'); KH.prefix();
{? KH.find_key(2,TMPKH.KOD) || exec('kh_dod_ini','kontrahent'); KH.display() ?};
KH.cntx_pop()


\mark_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.10]
:: OPIS: Sprawdza, czy rekord wykorzystywany jest w biezacym slowniku uzytkownika
::  OLD: \mark_kh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh(); SLO.index('SL'); SLO.prefix();
_zwrot:=SLO.find_key(SLU.ref(),TMPKH.KOD);
SLO.cntx_pop();
{? _zwrot || 'T' || 'N' ?}


\ae_splkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: po redakcji pola platnosc
::  OLD: \ae_splkh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KODSLU.LDNIPLA:={? KH.PLATNOSC<>null
                || #exec('get_par','slo_slu',KH.PLATNOSC,2)
                || 0
                ?};
1


\pokhgrkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: po dodaniu grupy kontrahentow
::  OLD: \pokhgrkh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
DISP.GRKHKLIM:=KH.GRKH;
SKID.GR_LIM:=KH.GRKH().KLIM;
1


\ae_email
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: sprawdzanie poprawnosci maila po edycji pola
::   WY: 1/0
::  OLD: \ae_email/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? fld()<>''
|| _wyn:=exec('mail_ok','#email',fld);
   {? ~_wyn || FUN.info('Nieprawidłowy adres e-mail.'@) ?}
?};
_wyn


\bl_typk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: Wart. pocz. pola KH.TYP
::  OLD: \bl_typk/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{?  app_info('web_sesid')<>''
|| ''
|| SLU.cntx_psh();
   {? SLUAPPL.SLU().NAZ='DOSTAWCY RR'
   || _a:='R'
   || _a:='P'
   ?};
   SLU.cntx_pop();
   _a
?}


\be_kh_pesel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BZ [12.30]
:: OPIS: Przed redakcja pola KH.PESEL
::  OLD: \be_kh_pesel/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.TYP='R' | KH.TYP='I' | (-(6+menu_txt))='szukaj'


\jakislnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: po redakcji pola numer dowodu tozsamosci
::  OLD: \jakislnd/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.TYP='R' & exec('jaki_dwd','!zws_par_kkhr')


\jaki_dwd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: ustalenie slownika nazw dowodow tozsamosci
::   WY: czy mozna redagowac pole
::  OLD: \jaki_dwd/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? XINFO.DWD<> 0
|| XINFO.DWD();
   SLO.win_dict('ONE'); SLO.win_sel('ONE');
   SLO.win_edit('RED');
   _wyn:=1
|| FUN.info('Nie ustalono słownika nazw dowodów tożsamości w parametrach pracy programu.'@)
?};
_wyn


\rolnik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: przed redakcja pol dotyczacych rolnika ryczaltowego KH.SN_DT, KH.DATA_WDT
::  OLD: \rolnik/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.TYP='R' | (-(6+menu_txt))='szukaj'


\jaki_slow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2010]
:: OPIS: Przed redagowaniem KH.WP
::  OLD: \jaki_slow/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.TYP='R' & exec('jakislow','!zws_par_kkhr')


\jakislow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: ustalenie slownika organow wydajacych dowody tozsamosci
::   WY: czy mozna redagowac pole
::  OLD: \jakislow/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
{? XINFO.UWD<> 0
|| XINFO.UWD();
   SLO.win_dict('ONE'); SLO.win_sel('ONE');
   SLO.win_edit('RED');
   _wyn:=1
|| FUN.info('Nie ustalono słownika organów wydających dowody tożsamości w parametrach pracy programu.'@)
?};
_wyn


\ae_naz_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.10]
:: OPIS: Formula po redakcji pola KH.NAZ_P
::  OLD: \ae_naz_p/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? |KH.NAZ='' & -(6+menu_txt())<>'szukaj' || KH.NAZ:=60+KH.NAZ_P ?}; 1


\bvkhfiz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [MB] [2008]
:: OPIS: Przed wyświetl pola KH.FIZYCZNY
::  OLD: \bvkhfiz/skid_gio.fml
::----------------------------------------------------------------------------------------------------------------------
DPOZ.WPR_R:=fld();
1


\bekhsour
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK[8.70]
:: OPIS: Formula przed redakcja pola KH.REJ_INFO
::  OLD: \bekhsour/skid_gio.fml
::----------------------------------------------------------------------------------------------------------------------
KH.FIZYCZNY=1 | (-(6+menu_txt))='szukaj'


\kh_wd_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: klawisz F3 KH.WD
::  OLD: \kh_wd_f3/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','intrastat','002',KH.WD)


\kh_wd_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: po redakcji KH.WD
::   WY: 1 - spelnione warunki, 0 - wpp
::  OLD: \kh_wd_po/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

:: sprawdzenie czy wartosc istnieje w slowniku 002
{? KH.WD<>'' & exec('find_sl','intrastat','002',KH.WD)=null || _return:=0 ?};

{? _return=0
|| FUN.info('Niedozwolona wartość pola Warunki dostawy.'@)
?};

_return


\kh_rtranspo_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: klawisz F3 KH.RTRANSPO
::  OLD: \kh_rtranspo_f3/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
exec('slownik','intrastat','005',KH.RTRANSPO)


\kh_rtranspo_po
::----------------------------------------------------------------------------------------------------------------------
::  UTW: awi [2008]
:: OPIS: po redakcji KH.RTRANSPO
::   WY: 1 - spelnione warunki, 0 - wpp
::  OLD: \kh_rtranspo_po/ist01.fml
::----------------------------------------------------------------------------------------------------------------------
_return:=1;

:: sprawdzenie czy wartosc istnieje w slowniku 005
{? KH.RTRANSPO<>'' & exec('find_sl','intrastat','005',KH.RTRANSPO)=null || _return:=0 ?};

{? _return=0
|| FUN.info('Niedozwolona wartość pola Rodzaj transportu.'@)
?};

_return


\kh_podw_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2010]
:: OPIS: Na wartosc poczatkowa dla pola KH.PODWYKON
::  OLD: \kh_podw_bl/skid_prj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('str_n_','#blank')


\khbepodw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [2009]
:: OPIS: Przed redakcja pola KH.PODWYKON
::  OLD: \khbepodw/skid_prj.fml
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? -menu_txt='popraw'
|| PROJSZU.cntx_psh();
   PROJSZU.index('DISP'); PROJSZU.prefix(null,KH.ref());
   _zwrot:=~PROJSZU.first();
   PROJSZU.cntx_pop();
   {? _zwrot
   || PROJRMS.cntx_psh();
      PROJRMS.index('PODWYKON'); PROJRMS.prefix(KH.ref());
      _zwrot:=~PROJRMS.first();
      PROJRMS.cntx_pop()
   ?}
?};
_zwrot


\bedkatkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [2009]
:: OPIS: Przed redakcja pola KH.PROJKZAS
::  OLD: \bedkatkh/skid_prj.fml
::----------------------------------------------------------------------------------------------------------------------
PROJ_ZM.TYPKATZA:='K';
PROJKZAS.win_dict('WER_KH'); PROJKZAS.win_edit(); PROJKZAS.win_patt();
1


\kh_kolor_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [2010]
:: OPIS: Przed wyswietl pola tabeli KH.KOLOR
::   WY: String koloru
::  OLD: \kh_kolor_bd/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=KH.KOLOR+','+KH.KOLOR;
_wyn


\kh_kolor_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [2010]
:: OPIS: Formula na F3 pola KH.KOLOR
::  OLD: \kh_kolor_f3/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_q:=exec('edit_color','#edit',KH.KOLOR);
{? _q<>''
|| KH.KOLOR:=_q
?};
~~


\kh_kapital_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Po redakcji KH.KAPITAL
::----------------------------------------------------------------------------------------------------------------------
fld(fld()$0); 1


\pw_typkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [2010]
:: OPIS: Formula przed wyswietl. dla KODSLU.TYP
::  OLD: \pw_typkh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH.TYP='R' || KODSLU.TYP:='Rolnik ryczałtowy'
|? KH.TYP='P' || KODSLU.TYP:='Płatnik podatku VAT na ter. kraju'
|? KH.TYP='U' || KODSLU.TYP:='Płatnik podatku VAT UE'
|? KH.TYP='I' || KODSLU.TYP:='Inny'
              || KODSLU.TYP:=''
?};
1


\f3_typkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [2010]
:: OPIS: Formula klawisz F3 dla KODSLU.TYP
::  OLD: \f3_typkh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('POPEXP','#object');
_x:=POPEXP.select('Płatnik podatku VAT na ter. kraju',
                  'Płatnik podatku VAT UE',
                  'Rolnik ryczałtowy',
                  'Inny');
{? _x<>''
|| {? _x='Płatnik podatku VAT UE' || KH.TYP:='U' || KH.TYP:=_x ?};
   exec('pw_typkh','!zws_par_kkhr');
   KODSLU.TYP
?}


\po_typkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL [2010]
:: OPIS: Po redakcji dla KODSLU.TYP
::   WE: _a - formula, ktora moze byc dodatkowo wykonana po redakcji pola
::       _b - wartość zwracanego wyniku
::   WY: 1/0
::  OLD: \po_typkh/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_b')<>type_of(0) || _b:=1 ?};
_umowy:=cur_tab()=FPACZ;
{? _umowy
||
:: ścieżka dla UMOWY
   {? cur_tab.name<>'kontr' & KODSLU.TYP='' || return(1) ?}
?};
_wyn:=
   {? KODSLU.TYP<>''
   || {? {? ~exec('ust_typ','!zws_par_kkhr','Płatnik podatku VAT na ter. kraju')
         || {? ~exec('ust_typ','!zws_par_kkhr','Płatnik podatku VAT UE')
            || {? ~exec('ust_typ','!zws_par_kkhr','Rolnik ryczałtowy')
               || exec('ust_typ','!zws_par_kkhr','Inny')
               || 1
               ?}
            || 1
            ?}
         || 1
         ?}
      || {? KH.TYP<>'R'
         || KH.SN_DT:='';  KH.NDT:=KH.WP:=null; KH.DATA_WDT:=date(0,0,0);
            {? KH.TYP<>'I' || KH.PESEL:='' ?}
         ?};
         {? _>0 & _a<>'' || ($_a)(); _b || 1 ?}
      || FUN.info('Wybierz właściwą zawartość ze słownika.'@);
         0
      ?}
   || {? (6+(-menu_txt))='szukaj' || KH.TYP:=''; 1 || 0 ?}
   ?};
{? _wyn & ~_umowy || exec('set_required_fields','!zws_par_kkhr') ?};
_wyn


\ust_typ
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Ustala wartość pola KODSLU.TYP
::   WE: _a - typ podatnika
::  OLD: \ust_typ/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? KODSLU.TYP=(+KODSLU.TYP)+_a
|| {? _a='Płatnik podatku VAT UE' || KH.TYP='U' || KH.TYP:=1+_a ?};
   KODSLU.TYP:=_a;1
|| 0
?}


\wz_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Formula na wzorzec KODSLU.NIP_UE
::  OLD: \wz_nip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? TYM_NIP.size()>1 || '<- \\F\\3 ->#' || '' ?}


\pw_nipue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Formula na wyswietl dla pola KODSLU.NIP_UE podczas redakcji KH
::  OLD: \pw_nipue/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('TYM_NIP')>0
|| TYM_NIP.prefix();
   {? TYM_NIP.first()
   || {? TYM_NIP.next()
      || KODSLU.NIP_UE:='<- F3 ->'
      || KODSLU.NIP_UE:=TYM_NIP.KRAJ+' '+TYM_NIP.NIP
      ?}
   || KODSLU.NIP_UE:=''
   ?}
|| NIPY.cntx_psh();
   NIPY.index('SNIP');
   NIPY.prefix(KH.ref());
   {? NIPY.first()
   || {? NIPY.next()
      || KODSLU.NIP_UE:='<- F3 ->'
      || SLO.cntx_psh();
         KODSLU.NIP_UE:=NIPY.KRAJ().KOD+' '+NIPY.NIP;
         SLO.cntx_pop()
      ?}
   || KODSLU.NIP_UE:=''
   ?};
   NIPY.cntx_pop()
?}


\czy_nue
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Formuła przed red. dla pola KODSLU.NIP_UE
::  OLD: \czy_nue/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
NIPY.index('SNIP');
NIPY.prefix(KH.ref);
win_disp();
1


\red_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Wprowadzanie NIP-ow UE do tabeli tymczasowej z poziomu redakcji KH
::  OLD: \red_nip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.cntx_psh();
SLU.index('NAZ');
SLU.prefix('~KRAJE UE');
{? SLU.first()
|| SLO.index('SL');
   SLO.prefix(SLU.ref());
   {? SLO.first()
   || _kwer:=SLO.mk_sel('~KRAJE UE'@,,,'kraje_wer',,,,,'U');
      SLO.win_fld(_kwer,,'KOD',,,8,,,'Kod'@);
      SLO.win_fld(_kwer,,'TR',,,40,,,'Treść'@);
      SLO.win_act(_kwer,,'Formuła','&Wybierz'@@,,,,"sel_exit",1,,,,'W');
      SLO.win_act(_kwer,,'Szukaj');
      SLO.win_sel(_kwer)
   ?};
   _wer:=TYM_NIP.mk_sel('Symbole NIP'@,'P',,'tym_nip_wer',,,,,'U');
   TYM_NIP.win_fld(_wer,,'KRAJ');
   TYM_NIP.win_fld(_wer,,'NIP');
   TYM_NIP.win_fld(_wer,,'DEFAULT',,,,,,,,,2,,"'T'","'N'");
   TYM_NIP.win_act(_wer,1,'Formuła','&Dołącz'@@,,,"exec('dol_tnip','!zws_par_kkhr')",,1,,,,'D');
   TYM_NIP.win_act(_wer,,'Formuła','&Dołącz'@@,,,"exec('dol_tnip','!zws_par_kkhr')",,1,,,,'D');
   TYM_NIP.win_act(_wer,,'Formuła','&Popraw'@@,,,"exec('pop_tnip','!zws_par_kkhr')",,,,,,'P');
   TYM_NIP.win_act(_wer,,'Usuń',,,,"exec('nipy_del_b','nipyue')");
   TYM_NIP.win_act(_wer,,'Formuła','D&omyślny'@@,,,"exec('set_default','nipyue')",,,,,,'O');
   TYM_NIP.win_act(_wer,,'Formuła','Sp&rawdź NIP UE'@@,,,"exec('chk_nipue','nipyue',TYM_NIP.KRAJ+TYM_NIP.NIP)",,,,,,'R');
   TYM_NIP.win_act(_wer,,'Szukaj');
   TYM_NIP.win_act(_wer,,'Kolejność');
   TYM_NIP.win_sel(_wer);
   _ttmpred:=TYM_NIP.mk_edit('Symbol NIP w UE'@,,'tym_nip_red');
   TYM_NIP.win_esep(_ttmpred,'NIP UE'@);
   TYM_NIP.win_efld(_ttmpred,,'KRAJ',,,3,,1);
   TYM_NIP.win_efld(_ttmpred,,'NIP');
   TYM_NIP.win_edit(_ttmpred);
   TYM_NIP.win_ebtn(_ttmpred,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Zapisz'@],"'key:F2'");
   TYM_NIP.win_ebtn(_ttmpred,'text=%1, btn_label_align=center, panel=bottom, align=end'['&Anuluj'@],"'key:Esc'");
   TYM_NIP.select()
?};
SLO.cntx_pop();
TYM_NIP.KRAJ+' '+TYM_NIP.NIP


\dol_tnip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Akcja Dolacz - dla okienka wertowania tabeli TYM_NIP
::  OLD: \dol_tnip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SLO.find_key('PL');
{? SLO.select(,1)
|| TYM_NIP.blank();
   TYM_NIP.KRAJ:=SLO.KOD;
   {? TYM_NIP.edit("exec('chk_unip','!zws_par_kkhr',null)") || TYM_NIP.add()  ?}
?}


\pop_tnip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Akcja Popraw - dla okienka wertowania tabeli TYM_NIP
::  OLD: \pop_tnip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
:: Jeżeli kontrahent ma nawiązaną relację, to nie można modyfikować domyślnego NIP UE
{? ~(TYM_NIP.DEFAULT='T' & KH.TYP='U' & exec('kh_rel','!zws_par_kkhr',KH.ref(),1))
|| SLO.find_key(TYM_NIP.KRAJ);
   {? SLO.select(,1)
   || TYM_NIP.KRAJ:=SLO.KOD;
      {? TYM_NIP.edit("exec('chk_unip','!zws_par_kkhr',TYM_NIP.ref())") || TYM_NIP.put() ?}
   ?}
?}


\chk_unip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Sprawdzanie poprawnosci wypelnienia rekordu TYM_NIP
::  OLD: \chk_unip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_p:=chk_rec();
{? _p=''
|| TYM_NIP.cntx_psh();
   TYM_NIP.prefix();
   _kraj:=TYM_NIP.KRAJ;
   {? TYM_NIP.find_key(TYM_NIP.KRAJ) & TYM_NIP.ref<>_a
   || FUN.info('Dla kontrahenta wprowadzono już symbol NIP w UE\nz oznaczeniem kraju %1.'@[_kraj]); _p:='NIP'
   ?};
   TYM_NIP.cntx_pop()
?};
_p


\po_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RL  [8.40]
:: OPIS: Formula po red. dla pola KODSLU.NIP_UE
::  OLD: \po_nip/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? |fld='' | fld='<- F3 ->' | TYM_NIP.find_key(2+fld,3-fld)
|| 1
|| _a:=ask('Brak pozycji w słowniku.'@,'UWAGA'@,0,'Powtórzenie'@,'wyświetlenie Słownika'@,'Rezygnacja'@);
   {? _a=0 || 0
   |? _a=1 || exec('red_nip','!zws_par_kkhr')
   || fld(TYM_NIP.KRAJ+' '+TYM_NIP.NIP)
   ?}
?}


\pw_kldni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Przed wyswietleniem KODSLU.LDNIPLA
::  OLD: \pw_kldni/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KODSLU.LDNIPLA:={? KH.PLATNOSC<>null
                || #exec('get_par','slo_slu',KH.PLATNOSC,2)
                || 0
                ?};
1


\pr_kldni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: Przed redakcja liczba dni platnosci
::  OLD: \pr_kldni/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
1


\po_kldni
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2010]
:: OPIS: Po redakcji liczba dni platnosci
::  OLD: \po_kldni/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
1


\skid_khosob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: Formula na wyswietl dla pola SKID.KH_OSOB
::   WY: kolor wyszarzenia dla pola
::  OLD: \skid_khosob/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.KH_OSOB:=null;
{? var_pres('dspadkor')>0 | -(6+menu_txt)<>'dołącz'
||
   KH_OSOB.cntx_psh;
   KH_OSOB.index('DOMYSLNA'); KH_OSOB.prefix(KH.ref(),'T');
   {? KH_OSOB.first
   || SKID.KH_OSOB:=KH_OSOB.ref
   || KH_OSOB.index('KH'); KH_OSOB.prefix(KH.ref());
      {? KH_OSOB.first
      || SKID.KH_OSOB:=KH_OSOB.ref
      ?}
   ?};
   KH_OSOB.cntx_pop
?};
exec('findfnrd','color')


\kh_kor
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMK] [8.60]
:: OPIS: Formula na wyswietl dla pola SKID.AD_KOR
::   WY: kolor wyszarzenia dla pola
::  OLD: \kh_kor/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('dspadkor')>0 | -(6+menu_txt)<>'dołącz'
|| OS_ADRES.cntx_psh();
   OS_ADRES.index('RODZAJ1'); OS_ADRES.prefix(KH.ref(),'H');
   SKID.AD_KOR:={? OS_ADRES.last()
                || OS_ADRES.ref()
                || null
                ?};
   OS_ADRES.cntx_pop()
|| SKID.AD_KOR:=null
?};
exec('findfnrd','color')


\czy_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: BL [8.60]
:: OPIS: Sprawdza czy rekord zostal uzyty w SLOWNIKACH UZYTKOWNIKA;
::       Wywoluje wlasciwa formule sprawdzajaca ('czy_slo','skid_lb0') i na podstawie jej wyniku umozliwia usuniecie
::       rekordu badz komunikuje o "uzyciu go" w tabeli SLO
::   WE: _a - akronim tabeli z ktorej usuwany jest rekord
::   WY: =1 - rekord uzyty w SLO
::       =0 - wpp.
::  OLD: \czy_usun/skid_lb0.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('czy_slo','slo_slu',_a)
|| FUN.info('Rekord wykorzystywany w słownikach użytkownika.'@); 0
|| 1
?}


\usunsrbk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [8.60]
:: OPIS: Usuwa rekordy z tabeli SKID_RBK dla kontrahenta ustawionego w buforze
::  OLD: \usunsrbk/skid_lb0.fml
::----------------------------------------------------------------------------------------------------------------------
SKID_RBK.index('TRN');
SKID_RBK.prefix('KH',#KH.ref());
{? SKID_RBK.first()
|| {! |? {? SKID_RBK.count()=0
         || SKID_RBK.del(1)
         || undo(); 0
         ?}
   !}
?};
{? ~SKID_RBK.first() & FIRMA.first()
|| _wyn:=1;
   {! |?
         SKID_RBK.prefix(FIRMA.SYMBOL+'KH2',#KH.ref());
         {? SKID_RBK.first()
         || {! |? {? SKID_RBK.count()=0
                  || SKID_RBK.del(1)
                  || undo();0
                  ?}
            !};
            _wyn:=~SKID_RBK.first()
         ?};
         _wyn & FIRMA.next()
   !}
?}


\be_delgk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: przed Usun dla grupy kontrahentow
::  OLD: \be_delgk/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? GRKH.count()>0
|| FUN.info('Grupa wykorzystywana w powiązanych strukturach.\nUsunięcie niemożliwe.'@);0
|| 1
?}


\grkh_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Rekord po GRKH
::  OLD: \grkh_rec/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_res:=__CHK.record(GRKH,,'KOD','NAZ');
{? _res='' & (1+menu_txt())='P' & exec('FindAndGet','#table',GRKH,GRKH.ref(),,"KLIM",null())<>null() & GRKH.KLIM=null()
||
:: kontrola, czy aby nie usunięto kontroli limitu, a kontrahenci mają ustalone limity
   KH_DOD.cntx_psh();
   KH_DOD.index('GRKH');
   KH_DOD.prefix(GRKH.ref());
   _res:={? KH_DOD.first() & KH_DOD.find_tab('first','LK',,'>',0,'KLIM',,'=',null())
         || FUN.info('Kontrola limitu dla grupy wykorzystywana w kartotece kontrahentów.\n'
                     'Należy ją wprowadzić');
            'KLIM'
         || ''
         ?};
   KH_DOD.cntx_pop()
?};
_res


\chk_obs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: formula po redakcji obszarow sprzedazy
::  OLD: \chk_obs/defin.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(OBS,,'KOD')


\clr_skid_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Po redakcji pol tabeli KLIM: NR, NAZ, ZAM_W, ZAM_A, ZAM_R, DOK_W, DOK_A, DOK_D
::       Czysci (:='') pola zmiennej SKID: PAR1, PAR2 i PAR3 (MG)
::  OLD: \clr_skid_par/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.PAR1:=SKID.PAR2:=SKID.PAR3:='';
1


\po_tk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS:  Funkcja po polu o akronimie _a w tabeli KLIM, ktora sprawdza pole
::        i uzupelnia pole przeciwne o akronimie _b
::   WE: _a - akronim pola tabeli KLIM do sprwadzenia
::       _b - akronim pola tabeli KLIM
::  OLD: \po_tk/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
SKID.PAR1:=SKID.PAR2:=SKID.PAR3:='';
{? exec('t_or_n','#field')
|| _c:=$('KLIM.'+_a);_c:=_c();
  _b:='KLIM.'+_b;
  {? _c='T' || _d:=$(_b+':='+'\'N\'') || _d:=$(_b+':='+'\'T\'') ?};
  _d();
  1
?}


\zob_klim_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Przed redakcja i wyswietleniem pol tabeli KLIM: ZOB_SAL i ZOB_PRZ (MG)
::  OLD: \zob_klim_be/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
exec('get','#params',100134,2)='N'


\dol_klim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Dolaczenie tabeli kontroli limitow kredyt. - funkcja Dolacz
::  OLD: \dol_klim/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
KLIM.blank();
KLIM.NR:=exec('bl_knr','!zws_par_kkhr');
{? KLIM.edit("exec('chk_klim','!zws_par_kkhr')",0)
|| KLIM.add()
?};
1


\bl_knr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Funkcja wskazujaca nastepny numer tabeli kontroli limitow
::  OLD: \bl_knr/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
KLIM.cntx_psh();
KLIM.index('NR');
_nr:={? KLIM.last() || KLIM.NR+1 || 1 ?};
KLIM.cntx_pop();
_nr


\chk_klim
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Sprawdzenie wypelnienia pol w tabeli KLIM - funkcja po Record
::  OLD: \chk_klim/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=__CHK.record(KLIM,,'NR','NAZ','ZAM_W','ZAM_A','ZAM_R','DOK_W','DOK_A','DOK_D','NAL_SAL');
{? _wyn=''
|| __CHK.record(KLIM,,'NAL_PRZ','DOK_SUM','ZAM_SUM','KOM_PRZ','KOM_ZAW','KOM_PYT','KOM_BL')
?};
{? _wyn=''
||
   _cur_nr:=KLIM.NR;
   {? -(1+menu_txt)='d' || _cur_ref:=null || _cur_ref:=KLIM.ref() ?};
   KLIM.cntx_psh();
   KLIM.index('NR');
   KLIM.prefix(_cur_nr);
   {? KLIM.first() & _cur_ref<>KLIM.ref()
   || FUN.info('Istnieje już tabela limitów o numerze %1.'@[$_cur_nr]);
      _wyn:='NR'
   ?};
   KLIM.cntx_pop()
?};
_wyn


\klim_usu
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: usuwanie limitu kredytowego
::  OLD: \klim_usu/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
{? KLIM.count()=0
|| {? FUN.ask('Usunąć bieżący wiersz?'@)
   || KLIM.del()
   ?}
|| FUN.info('Rekord powiązany. Usunięcie niemożliwe.'@)
?};
''


\bd_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: Przed wyswietleniem pol zmiennej SKID: PAR1, PAR2 i PAR3 (MG)
::   WE: _a - numer parametru (posrednio akronim pola zmiennej SKID)
::   WY: _wyn 0-wyszarzenie(bez zaznaczenia) 1-zgodnie z definicją(wyszarzenie z zaznaczeniem)
::  OLD: \bd_par/lim_kred.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? _a=43
|| SKID.PAR1:='*'
|? _a=134
|| SKID.PAR2:=exec('get','#params',100134,2);
   {? SKID.PAR2='T' || _wyn:=0 ?}
|? _a=29
|| _par:=exec('get_par','#parametr',_a);
   SKID.PAR3:={? _par<>~~ || _par || 'N' ?};
   {? SKID.PAR3='N' || _wyn:=0 ?}
?};
_wyn


\kh_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: akcja rekord dla tabeli KH
::   WE: _a - [0/1] ostatni odrysowany rekord
::   WY: kolor rekordu
::  OLD: \kh_rek/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a
|| exec('kh_dod_ini','kontrahent',,0);
   exec('kh_grvat_szuk','kontrahent');
   _grayed:=':';
:: Akcja 'Zmień status' tylko dla potencjalnego
   {? KH.win_sel('?')<>'M4_DEF' & KH.win_sel('?')<>'WER_KOOP' & KH.P=2
   || _grayed:='Z'+_grayed
   ?};
:: Akcje zależne od tego, czy kontrahent jest 'potencjalny'
   {? KH.sel_size()=0 & KH.P=1
   || _grayed:='N(Ł(SNPOWD)T(W)Z)'+_grayed
   ?};
:: Akcje zależne od stanu w usłudze Businesslink
   {? KH_DOD.BL_STAT<>'' || _grayed:='N(Ł(N))'+_grayed || _grayed:='N(Ł(U))'+_grayed ?};
   {? KH.sel_size()=0
      &~((KH.BL_STAT=exec('tenant_state_awaiting','businesslink3')
      | KH.BL_STAT=exec('tenant_state_active','businesslink3'))
      & KH_DOD.BL_STAT=exec('relation_state_awaiting','businesslink3')
      )
   || _grayed:='N(Ł(P))'+_grayed
   ?};
::Akcje zależne od włączenia podpowiedzi dla kontrahenta
   {? KH.sel_size()=0 & KH.TAGGER='T'
   || _grayed:='N(F(P(W)))'+_grayed
   |? KH.sel_size()=0 & KH.TAGGER='N'
   || _grayed:='N(F(P(PYUO)))'+_grayed
   ?};
   KH.actions_grayed(cur_win(1,1),_grayed)
?};
_txt:='';
{? KHVZ.KONTAKTY='T'
|| {? REF.WFIRM
   || {? VAR.WYB_FIRM<>'Y'
      || _txt:=' [%1]'['Kontakty z wszystkich firm'@]
      || _txt:=' [%1]'['Kontakty z firmy: %1'@[VAR.FIRMA().SYMBOL]]
      ?}
   ?}
?};
{? _txt<>''
|| KH.hdr_sel(); KH.hdr_sel(_txt)
?};
Color.rekprzed('KH#01')


\get_from_gus
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Przycisk: Pobierz dane z GUS okna RED
::  OLD: \get_from_gus/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
::exec('gus_reader_decl','nipyue');
::{? var_press('gusReaderSID')>0 || GusReader.setSID(gusReaderSID) ?};
ROZNE.win_edit('NRNLR');
{? KH.NIP<>''
|| ROZNE.NRNLR:={? 2+KH.SNIP='PL' || 2-KH.SNIP || KH.SNIP ?}
|| {? KH.REG<>''
   || ROZNE.NRNLR:=KH.REG
   || ROZNE.NRNLR:=''
   ?}
?};
{? +KH.NIP>14 ||
   FUN.info('Długość numeru NIP kontrahenta nie jest obsługiwana przez GUS.'@)
||
   ROZNE.fld_fml('NRNLR','AFTER_EDIT',"exec('is_kh_nip','!zws_par_kkhr',ROZNE.NRNLR,0)");
   _edit:=ROZNE.edit();
   ROZNE.fld_fml('NRNLR','AFTER_EDIT',"*");
   {? _edit
   || _nip:=ROZNE.NRNLR;
      {! |? _nip*'-'<>0
      |! _nip1:=((_nip*'-')-1)+_nip;
         _nip2:=_nip+(+_nip-(_nip*'-'));
         _nip:=_nip1+_nip2
      !};
      ROZNE.NRNLR:=_nip;
      {? (+ROZNE.NRNLR<>9 & +ROZNE.NRNLR<>10 & +ROZNE.NRNLR<>14)
      || FUN.info('Niepoprawny numer NIP lub REGON.'@);
         return('')
      ?};
      {! _i:=1 // 1 .. +ROZNE.NRNLR
      |! _ascii:=%((_i-1)-ROZNE.NRNLR);
         {? _ascii<48 | _ascii>57
         || FUN.info('Niepoprawny numer NIP lub REGON.'@);
            return('')
         ?}
      !};
      _kh:=exec('danePobierzPelnyRaport','gus_ws');
      {? var_press('nazwa') & fexists(nazwa,1)
      || ferase(nazwa,1);
         &nazwa
      ?};
      {? _kh=~~
      || FUN.info('Brak kontrahenta o takim numerze NIP lub REGON.'@);
         return('')
      ?};
      {? 3+_kh<>'ESC'
      || {? _kh<>''
         || _ok:=0; _pyt:=1;
            _lista:=spli_str(_kh,'\n');
            {? obj_len(_lista)>1
            || _nr:=exec('gus_lista','!zws_par_kkhr',_lista);
               {? _nr
               || _ok:=1;
                  _kh:=_lista[_nr];
                  _pyt:=0
               ?}
            || _ok:=1
            ?};
            {? _ok
            || exec('get_from_gus2','nipyue',_kh,_pyt,0)
            ?}
         || KH.FIZYCZNY:=1
         ?}
      ?}
   ?}
?};
''


\set_required_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Zaznacza wymagalne pola w kartotece kontrahenta
::----------------------------------------------------------------------------------------------------------------------
_typ:=KH.TYP;
_win_red:=KH.win_edit('?');

:: Reset
KH.efld_opt(_win_red,'mark=0',,'NIP');
KH.efld_opt(_win_red,'mark=0',KODSLU,'NIP_UE');
KH.efld_opt(_win_red,'mark=0',,'PESEL');
KH.efld_opt(_win_red,'mark=0',,'REG');
KH.efld_opt(_win_red,'mark=0',,'KRAJ');
KH.efld_opt(_win_red,'mark=0',,'MIASTO');
KH.efld_opt(_win_red,'mark=0',,'UL');
KH.efld_opt(_win_red,'mark=0',,'KPOCZ');
KH.efld_opt(_win_red,'mark=0',,'POCZ');
KH.efld_opt(_win_red,'mark=0',,'TEL');
KH.efld_opt(_win_red,'mark=0',,'EM');
KH.efld_opt(_win_red,'mark=0',KH,'GV_OD');

:: Ustawienie
{? _typ='P'
|| KH.efld_opt(_win_red,'mark=1',,'NIP')
|? _typ='U'
|| KH.efld_opt(_win_red,'mark=1',KODSLU,'NIP_UE')
|? _typ='R'
|| {? KH.PESEL='' || KH.efld_opt(_win_red,'mark=1',,'NIP') ?};
   {? KH.NIP=''   || KH.efld_opt(_win_red,'mark=1',,'PESEL') ?}
?};
exec('po_lkkh_dod','kontrahent');
::Znaczniki dla Abstore
{? KH.ABSTORE<>''
||
   KH.efld_opt(_win_red,'mark=1',,'NIP');
   KH.efld_opt(_win_red,'mark=1',,'REG');
   KH.efld_opt(_win_red,'mark=1',,'KRAJ');
   KH.efld_opt(_win_red,'mark=1',,'MIASTO');
   KH.efld_opt(_win_red,'mark=1',,'UL');
   KH.efld_opt(_win_red,'mark=1',,'KPOCZ');
   KH.efld_opt(_win_red,'mark=1',,'POCZ');
   KH.efld_opt(_win_red,'mark=1',,'TEL');
   KH.efld_opt(_win_red,'mark=1',,'EM')
?};
:: grupa VAT
{? KH.GRVAT='T'
|| KH.efld_opt(_win_red,'mark=1',KH,'GV_OD')
?}


\bd_kraje
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: przed wyświetleniem OS_ADRES.KRAJ
::  OLD: \bd_kraje/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(1)=KH
|| exec('findfnrd','color')
|| ''
?}


\prdelhan
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [12.10]
:: OPIS: sprawdza wykorzystanie ;) ... danego handlowca
::  OLD: \prdelhan/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? HAN.count()
|| FUN.info('Handlowiec powiązany z innymi danymi (kontrahent, dokumenty).\nUsunięcie niemozliwe.'@);
   0
|| 1
?}


\chk_han
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: Rekord po tabeli HAN
::  OLD: \chk_han/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(HAN,,'KOD','NAZ')


\beerkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: BEER.KH
::  OLD: \beerkh/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
BEER.KH


\ae_odnip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: po redakcji nip w odbiorcach kontrahenta
::   WY: 1
::  OLD: \ae_odnip/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
KH_ODB.SNIP:=exec('niptostr','#string',KH_ODB.NIP); 1


\kh_obs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2010]
:: OPIS: KH.OBS
::  OLD: \kh_obs/kontr.fml
::----------------------------------------------------------------------------------------------------------------------
KH.OBS


\kho_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2009]
:: OPIS: dodanie odbiorcy kontrahenta
::  OLD: \kho_add/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT<>'T'
|| KH_ODB.btn_eopt('RED','MIASTO','state=grayed');
   KH_ODB.btn_eopt('RED','UL','state=grayed')
|| KH_ODB.btn_eopt('RED','MIASTO','state=normal');
   KH_ODB.btn_eopt('RED','UL','state=normal')
?};
KH_ODB.win_edit('RED');
KH_ODB.blank();
_kod:=Plugin.run('KONTRAH_T_ODB_001');
{? type_of(_kod)=type_of('') & _kod<>''
 & exec('FindInSet','#table','KH_ODB','KH_ODB',_kod,BEER.KH,,1,,null())=null()
|| KH_ODB.KOD:=_kod
?};
_valid:="
   _chk:='';
   {? _chk='' || _chk:=__CHK.record(KH_ODB,,'KOD','SKR','NAZ') ?};
   {? _chk='' || {? __CHK.index(KH_ODB,0)<>'' || _chk:='KOD' ?} ?};
   {? _chk='' & ~KH_ODB.KH_LNK
   || _chk:=exec('kh_odb_teryt_sprawdz','!zws_par_kkhr')
   ?};
   {? _chk='' & KH_ODB.MAIN='T' & ~exec('odb_main','abstore_fun')
   || FUN.info('Istnieje już główny odbiorca dla tego kontrahenta.'@);_chk:='MAIN'
   ?};
   {? _chk='' || _chk:=exec('chk_kh_odb_abstore_core','abstore_fun') ?};
   _chk
";
_ok:=KH_ODB.edit(_valid);
{? _ok
|| do();
   {? KH_ODB.add()
   || {? KH_ODB.NRMPDBDO<>'' & exec('is_active','bdo_fun')
      || exec('KH_ODB_put_id','bdo_fun',KH_ODB.ref(),1,1)
      ?}
   ?};
   end();
   exec('kh_odb_f_set','kontrahent')
?};
~~


\kho_add_z_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Dodaje odbiorcę z kontrahenta z zachowaniem powiązania do kontrahenta
::   WE:
::   WY:
::  OLD: \kho_add_z_kh/firma.fml
::----------------------------------------------------------------------------------------------------------------------
exec('kh_o_kop','kontrahent',0,1)


\kho_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2009]
:: OPIS: modyfikacja odbiorcy kontrahenta
::  OLD: \kho_pop/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_ODB.count()
|| _msg:='Odbiorca jest powiązany z dokumentami.'@
|| _msg:=''
?};
{? KH_ODB.KH_LNK<>null()
|| _kh_lnk_gv:=exec('kh_grvat_szuk','kontrahent',KH_ODB.KH_LNK,1);
   {? _kh_lnk_gv<>null() & _kh_lnk_gv<>KH_ODB.KH
   || {? _msg<>''
      || _msg+='\n'
      ?};
      _msg+='Odbiorca jest członkiem grupy VAT %1.'@[exec('FindAndGet','#table',KH,_kh_lnk_gv,,"KH.NAZ",'')]
   ?}
?};
{? _msg<>''
|| FUN.info(_msg)
?};
{? ~KH_ODB.KH_LNK
|| {? XINFO.TER_AKT<>'T'
   || KH_ODB.btn_eopt('RED','MIASTO','state=grayed');
      KH_ODB.btn_eopt('RED','UL','state=grayed')
   || KH_ODB.btn_eopt('RED','MIASTO','state=normal');
      KH_ODB.btn_eopt('RED','UL','state=normal')
   ?}
?};
_red:=exec('kho_win_edit','!zws_par_kkhr',1);
KH_ODB.win_edit(_red);
_valid:="
   _chk:='';
   {? _chk='' || _chk:=__CHK.record(KH_ODB,,'KOD','SKR','NAZ') ?};
   {? _chk='' || {? __CHK.index(KH_ODB,1)<>'' || _chk:='KOD' ?} ?};
   {? _chk='' & ~KH_ODB.KH_LNK
   || _chk:=exec('kh_odb_teryt_sprawdz','!zws_par_kkhr')
   ?};
   {? _chk='' & KH_ODB.MAIN='T' & ~exec('odb_main','abstore_fun')
   || FUN.info('Istnieje już główny odbiorca dla tego kontrahenta.'@);_chk:='MAIN'
   ?};
   {? _chk='' & KH_ODB.CGVAT='T' & KH_ODB.KH_LNK().TYP<>'I'
   || {? ~FUN.ask(
            'Nastąpi zmiana typu kontrahenta %1 na \"Inny\".\n'
            'Czy kontynuować?'@[exec('FindAndGet','#table',KH,KH_ODB.KH_LNK,,\"KH.NAZ\",'')]
         )
      || _chk:='CGVAT'
      ?}
   ?};
   {? _chk='' || _chk:=exec('chk_kh_odb_abstore_core','abstore_fun') ?};
   KH_ODB.cntx_psh(); _tab_id:=exec('get_id','#sync_id','BDO_KH_ODB_ID',KH_ODB.uidref()); KH_ODB.cntx_pop();
   {? _chk='' & params_get().mpd<>KH_ODB.NRMPDBDO & type_of(_tab_id)>100 & _tab_id.first()
   || {? ~FUN.ask(
            'Odbiorca kontrahenta miał już pobrany identyfikator w systemie BDO.\n'
            'Czy zmienić numer MPD i pobrać ponownie identyfikator w systemie BDO?'@
         )
      || _chk:='NRMPDBDO'
      ?}
   ?};
   _chk
";
_mpd:=KH_ODB.NRMPDBDO;
params_set('mpd',_mpd);
_ok:=KH_ODB.edit(_valid);
{? _ok
|| do();
   {? KH_ODB.put()
   || {? _mpd<>KH_ODB.NRMPDBDO & exec('is_active','bdo_fun')
      || exec('KH_ODB_put_id','bdo_fun',KH_ODB.ref(),1,1)
      ?};
      {? KH_ODB.CGVAT='T' & KH_ODB.KH_LNK().TYP<>'I'
      || KH.cntx_psh();
         KH.prefix();
         {? KH.seek(KH_ODB.KH_LNK)
         || KH.TYP:='I';
            KH.put()
         ?};
         KH.cntx_pop()
      ?}
   ?};
   end()
?};
~~


\kho_wyswietl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.41]
:: OPIS: Przed wyswietl tabeli KH_ODB
::  OLD: \kho_wyswietl/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_ODB.win_sel('?')<>'SEL_NAD'
|| _red:=exec('kho_win_edit','!zws_par_kkhr',0);
   KH_ODB.win_edit(_red)
?};
KH_ODB.display()


\kho_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.00]
:: OPIS: Aktualizuje dane odbiorcy powiązanego z kontrahentem _a
::   WE: _a - KH.ref() - powiązany kontrahent
::   WY:
::  OLD: \kho_update/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;

{? _kh
||
   KH.cntx_psh();
   KH.prefix();
   {? KH.seek(_kh)
   ||
      KH_ODB.cntx_psh();
      KH_ODB.index('KH_LNK');
      KH_ODB.prefix(_kh);
      _loop:=KH_ODB.first();
      {!
      |? _loop
      |!
         KH_ODB.NAZ:=KH.NAZ_P;
         KH_ODB.KRAJ:=KH.KRAJ;
         KH_ODB.MIASTO:=KH.MIASTO;
         KH_ODB.KRAJISO:=KH.KRAJISO;
         KH_ODB.UL:=KH.UL;
         KH_ODB.DOM:=KH.DOM;
         KH_ODB.LOKAL:=KH.LOKAL;
         KH_ODB.POCZ:=KH.POCZ;
         KH_ODB.KPOCZ:=KH.KPOCZ;
         KH_ODB.NRD:=KH.SN_DT;
         KH_ODB.U:=KH.U;
         KH_ODB.GLN:=KH.GLN;
         KH_ODB.EM:=KH.EM;
         KH_ODB.OBS:=KH.OBS;
         KH_ODB.NIP:=KH.NIP;
         KH_ODB.SNIP:=KH.SNIP;
         {? exec('upgrade2325_jst01','zbl')
         || KH_ODB.ID_WEW:=KH.ID_WEW
         ?};
         _loop:=KH_ODB.put() & KH_ODB.next()
      !};
      KH_ODB.cntx_pop()
   ?};
   KH.cntx_pop()
?}


\delkhodb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [2008]
:: OPIS: sprawdza czy odbiorcy sa powiazani
::   WY: 1-wypelnione 0-niewypelnione
::  OLD: \delkhodb/faktury0.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_ODB.count()
|| FUN.info('Odbiorca jest powiązany z dokumentami.\nUsunięcie niemożliwe.'@);
   0
|| 1
?}


\odb_spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: rekord po dla tabeli odbiorcow
::  OLD: \odb_spr/firma.fml
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(KH_ODB,,'KOD','NAZ')


\slo_pop_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Akcja 'Popraw' z poziomu okienek wertowania tabeli SLO
::  OLD: \slo_pop/wspol
::  TAG: <SLOSLU>
::----------------------------------------------------------------------------------------------------------------------
{? exec('test_slo','slo_slu')=0
|| FUN.info('Poprawienie pozycji słownika niemożliwe w bieżącej firmie.'@);
   return(0)
?};
SLO.SLU();
RS.cntx_psh(); RS.index('RS'); RS.prefix();
{? RS.find_key(SLU.WZ,) & RS.TAB='KH'
|| _sp:={? var_pres('slo_pop')>0 || _slo_pop:=slo_pop; 1 || 0 ?};
   _rs:={? var_pres('ref_slo')>0 || _ref_slo:=ref_slo; 1 || 0 ?};
   _slokh:=''; slo_pop:=1; ref_slo:=null; exec('slu_okn','slo_slu');
   _i:=RS.ref();
   zm_kh:=__KH_MOD:=0;
   KH.prefix(2);
   exec('nip2tmp','kontrahent',1,1);
   {? var_pres('BUFGIO')>5 || obj_del(BUFGIO) ?};
   BUFGIO:=obj_new(@.CLASS.BUFFER,'KH'); BUFGIO.save();
   {? (_r_szuk:=exec('wz_szuk','slo_slu'))
   || fiz_kh:=KH.FIZYCZNY;
      _slokh:='kh';
      KH.win_edit('RED');
      _g:=$(RS.TAB+'.put()');
      exec('cn_psh','slo_slu');
      {? exec('kh_popraw','!zws_par_kkhr')
      || exec('cn_pop','slo_slu');
         {? var_pres('ref_slo')>0 & ref_slo<>null || SLO.seek(ref_slo) ?}; _h:=1;
         do();
         _k:=SLO.KOD; _t:=SLO.TR; _msg:='';
         {? _g()
         || {? _r_szuk<>-1 & ~RS.seek(_i)
            || undo();
               _msg:='Nie znaleziono rekordu tabeli RS.'
            || _msg:=exec('akt_slo','slo_slu',_k,_t)
            ?}
         ?};
         end();
         {? _msg<>'' || FUN.info(_msg) ?}
      || exec('cn_pop','slo_slu'); {? ref_slo<>null || SLO.seek(ref_slo) ?}
      ?}
   ?};
   VAR_DEL.delete('fiz_kh','zm_kh','TYM_NIP','BUFGIO'); __KH_MOD:=1;
   {? _sp || slo_pop:=_slo_pop || VAR_DEL.delete('slo_pop') ?};
   {? _rs || ref_slo:=_ref_slo || VAR_DEL.delete('ref_slo') ?}
|| FUN.info('Akcja dostępna wyłącznie dla słowników o wzorcu Kontrahent.'@)
?};
exec('tab_f_rfresh','slo_filtr',SLO);
RS.cntx_pop();
1


\khbranzeslo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: branże kontrahenta
::  OLD: \khbranzeslo/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
RS.index('RS');
RS.prefix();
{? RS.find_key(SLO.SLU().WZ)
|| {? RS.TAB='KH'
   || KH.cntx_psh();
      KH.index('KOD');
      KH.prefix(2,SLO.KOD);
      {? KH.first() & KH.KOD=SLO.KOD
      || BRANZE.win_dict('WER');
         KHBRANZE.index('KHBRANZE');
         KHBRANZE.prefix(KH.ref());
         KHBRANZE.win_sel('WER');
         {? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHR')
         || KHBRANZE.select()
         || KHBRANZE.select(,,,'DPU:D')
         ?}
      ?};
      KH.cntx_pop()
   || FUN.info('Funkcja dotyczy wyłącznie słowników kontrahentów.'@)
   ?}
?}


\khbranze_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: rekord po KHBRANZE
::  OLD: \khbranze_rec/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=chk_rec('BRANZE');
{? _wyn=''
|| _menut:=-menu_txt();
   {? _menut='dołącz' || KHBRANZE.KH:=KH.ref() ?};
   KHBRANZE.cntx_psh(); BRANZE.cntx_psh();
   KHBRANZE.index('KHBRANZE'); KHBRANZE.prefix(KHBRANZE.KH,KHBRANZE.BRANZE().NAZ,);
   {? _menut='dołącz'
   || {? KHBRANZE.first()
      || FUN.info('Branża %1 już jest w słowniku.'@[KHBRANZE.BRANZE().NAZ]);
         _wyn:='BRANZE'
      ?}
   |? _menut='popraw'
   || _ref:=KHBRANZE.ref();
      _loop:=KHBRANZE.first();
      {! |? _loop
      |!
         {? KHBRANZE.ref()<>_ref
         || FUN.info('Branża %1 już jest w słowniku.'@[KHBRANZE.BRANZE().NAZ]);
            _wyn:='BRANZE'
         ?};
         _loop:=_wyn='' & KHBRANZE.next()
      !}
   ?};
   KHBRANZE.cntx_pop(); BRANZE.cntx_pop();
   1
?};
_wyn


\slo_kh_att
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [2009]
:: OPIS: Wyswietla zalaczniki dla kontrahenta z poziomu slownika uzytkownika
::  OLD: \slo_kh_att/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.cntx_psh(); KH.index('KOD'); KH.prefix(2);
{? KH.find_key(SLO.KOD) & KH.KOD=SLO.KOD
|| exec('dokzal','dokum_zal',,KH.ref())
|| FUN.info('Nie znaleziono kontrahenta o kodzie: %1.'@[SLO.KOD])
?};
KH.cntx_pop()


\kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Arkadiusz Wielgus [2010]
:: OPIS: KH.ref
::  OLD: \kh/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
KH.ref()


\kh_osob_rek
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: przed rekord KH_OSOB
::  OLD: \kh_osob_rek/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rekprzed','color','KH_OSOB#01')


\osob_spr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2008]
:: OPIS: walidacja dla tabeli odbiorców
::  OLD: \osob_spr/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSOB.BL='T'
|| _wyn:=__CHK.record(KH_OSOB,,'NAZWISKO','IMIE','EMAIL')
|| _wyn:=__CHK.record(KH_OSOB,,'NAZWISKO')
?};
{? _wyn='' & KHVZ.KHVP='kh_osob'
|| _wyn:=__CHK.record(KH_OSOB,,'KH')
?};
{? _wyn='' & KH_OSOB.D='T'
|| _ref:={? -(1+menu_txt)='p' || KH_OSOB.ref() || null() ?};
   KH_OSOB.cntx_psh();
   KH_OSOB.index('DOMYSLNA'); KH_OSOB.prefix(KH.ref,'T');
   {? KH_OSOB.first() & (_ref=null() | _ref<>null() & _ref<>KH_OSOB.ref())
   || {? FUN.ask('Istnieje już domyślna osoba kontaktowa.\nCzy chcesz ją zmienić?'@)
      || KH_OSOB.prefix();
         KH_OSOB.D:='N';
         KH_OSOB.put()
      || _wyn:='D'
      ?}
   ?};
   KH_OSOB.cntx_pop()
?};
{? _wyn=''
||
   _wyn:=exec('chk_kh_osob_abstore_core','abstore_fun')
?};
_wyn


\kh_osob_kol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: kolory KH_OSOB
::  OLD: \kh_osob_kol/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSOB.ARCH='T'
|| 'KH_OSOB#01#02'
|? KH_OSOB.D='T'
|| 'KH_OSOB#01#01'
|| ''
 ?}


\kh_osob_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: przed szukaj KH_OSOB
::  OLD: \kh_osob_szuk/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH_OSOB.win_edit('SZUK'); 1


\kh_osob_leg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [2011]
:: OPIS: legenda KH_OSOB
::  OLD: \kh_osob_leg/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','KH_OSOB#01')


\kh_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2006]
:: OPIS: osoby kontaktowe
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::  OLD: \kh_osob/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};
exec('khvz_kh','kontrahent');
KH_OSOB.index('KH');
KH_OSOB.prefix(KHVZ.KH);
{? _a=1
|| _ok:=1;
   {? cur_tab()=SLO
   || RS.index('RS'); RS.prefix(SLU.WZ,);
      {? RS.first() & RS.TAB='KH'
      || KH.index('KOD'); KH.prefix(2,SLO.KOD,);
         {? KH.first()
         || KHVZ.KH:=KH.ref()
         || _ok:=0
         ?}
      ?}
   ?};
   {? _ok
   || _upr_kkhr:=exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHR');
      KH_OSTYP.index('NAME');
      KH_OSTYP.prefix();
      {? ~KH_OSTYP.first()
      || exec('init_kh_ostyp','!zws_par_kkhr')
      ?};
      KH_OSOB.win_sel('WER');
      KH_OSOB.hdr_sel();
      KH_OSOB.hdr_sel(' — '+KHVZ.KH().KOD+' — '+KH.SKR);
      {? _upr_kkhr
      ||
         KH_OSOB.actions_grayed('WER','')
      ||
         KH_OSOB.actions_grayed('WER','DPU:D')
      ?};
      KH_OSOB.select()
   || FUN.info('Nie znaleziono kontrahenta.'@)
   ?}
?}


\ae_kh_osobr_rol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Po redakcji pola KH_OSOBR.ROLA
::   WE: [_a] D-dołącz, 'P'-popraw, ''-wg menu_pth
::  OLD: \ae_kh_osobr_rol/skid_obg.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _tr:=_a
|| _tr:=menu_pth()+1
?};
_wy:=1;
{? KH_OSOBR.ROLA=''
|| FUN.emsg('Pole z nazwą funkcji nie może być puste.'@);
   _wy:=0
||{? _tr='P' || _ref:=KH_OSOBR.ref() || _ref:=null() ?};
   _rola:=KH_OSOBR.ROLA;
   KH_OSOBR.cntx_psh();
   KH_OSOBR.index('ROLA');
   KH_OSOBR.prefix(_rola,);
   {? KH_OSOBR.first() & KH_OSOBR.ref()<>_ref
   || FUN.emsg('Podana nazwa roli już występuje w systemie.'@);
      _wy:=0
   ?};
   KH_OSOBR.cntx_pop()
?};
_wy


\bd_kh_osobr_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.10]
:: OPIS: Przed usunieciem rekordu z tabeli KH_OSOBR - slownik funkcji osob kontaktowych
::  OLD: \bd_kh_osobr_del/skid_obg.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSOBR.count()>0
|| FUN.emsg('Funkcja jest używana w systemie i nie można jej usunąć.'@);
   0
|| 1
?}


\kh_adr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK  [8.50]
:: OPIS: Wyswietla adresy do korespondencji dla kontrahenta
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::       [_c] - =1-prefix wg KH.ref =0-prefix wg -1
::  OLD: \kh_adr/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};
{? var_pres('_b')<>type_of(1) || _b:=1 ?};
KH.cntx_psh();
{? _b & cur_tab(1,1)=SLO || KH.index('KOD'); KH.prefix(2); KH.find_key(SLO.KOD) ?};
adres_kh:='kh';
OS_ADRES.index('RODZAJ1'); OS_ADRES.prefix({? _b || KH.ref() || -1 ?},'H');
OS_ADRES.win_edit('REDKH'); OS_ADRES.win_patt('REDKH');
OS_ADRES.win_sel('WERKH');
exec('os_adres_cfg','osoba','BLANK','KH');
{? _a=1
|| {? exec('chk_role','#b__box',OPERATOR.USER,'ZWS_PAR_KKHR') || OS_ADRES.select() || OS_ADRES.select(,,,'DPU:D') ?};
   OS_ADRES.win_sel('WER');
   OS_ADRES.win_edit('RED'); OS_ADRES.win_patt('SZUK');
   VAR_DEL.delete('adres_kh')
?};
KH.cntx_pop()


\bl_khmsc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: blank() KH_MSC.KH dla miejsc dostawy
::  OLD: \bl_khmsc/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? -(1+menu_txt())<>'s' || KH_MSC.win_dict('WER'); KH_MSC_Z.KH || KH_MSC.win_dict('SEL'); null() ?}


\be_d_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: przed Dolacz miejsca dostawy, jesli Szukaj funkcja dolacz niedostepna
::  OLD: \be_d_msc/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? 1+(menu_pth()+3)='S'
|| FUN.info('Funkcja niedostępna.'@);
   0
|| {? XINFO.TER_AKT<>'T'
   || KH_MSC.btn_eopt('RED','MIASTO','state=grayed');
      KH_MSC.btn_eopt('RED','UL','state=grayed')
   || KH_MSC.btn_eopt('RED','MIASTO','state=normal');
      KH_MSC.btn_eopt('RED','UL','state=normal')
   ?};
   1
?}


\ae_d_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: po Dolacz miejsca dostawy
::  OLD: \ae_d_msc/firma.fml
::----------------------------------------------------------------------------------------------------------------------
{? KH_MSC.f_active() || KH_MSC.f_rfresh() ?}


\be_p_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przed Popraw miejsca dostawy
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT<>'T'
|| KH_MSC.btn_eopt('RED','MIASTO','state=grayed');
   KH_MSC.btn_eopt('RED','UL','state=grayed')
|| KH_MSC.btn_eopt('RED','MIASTO','state=normal');
   KH_MSC.btn_eopt('RED','UL','state=normal')
?};
1


\chk_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2008]
:: OPIS: rekord po dla tab. KH_MSC
::  OLD: \chk_msc/firma.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=__CHK.record(KH_MSC,,'NAZ');
{? _ret=''
|| exec('kh_msc_teryt_sprawdz','!zws_par_kkhr')
?};
_ret


\ar_kh_ostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Rekord po okna WER tabeli KH_OSTYP
::   WE: [_a] D-dołącz, 'P'-popraw, ''-wg menu_pth
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _tr:=_a
|| _tr:=menu_pth()+1
?};
_ret:=__CHK.record(KH_OSTYP,,'NAME');
{? _ret=''
|| _ref:=KH_OSTYP.ref();
   KH_OSTYP.cntx_psh();
   KH_OSTYP.index('NAME'); KH_OSTYP.prefix(KH_OSTYP.NAME,);
   {? KH_OSTYP.first() & (_tr<>'P' | KH_OSTYP.ref()<>_ref)
   || FUN.info('Istnieje typ o nazwie: %1.'@[KH_OSTYP.NAME]);
      _ret:='NAME'
   ?};
   KH_OSTYP.cntx_pop()
?};
_ret


\bm_kh_ostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed popraw okna WER tabeli KH_OSTYP
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSTYP.SYS='T'
|| FUN.info('Nie można poprawiać typu systemowego.'@); 0
|| 1
?}


\bd_kh_ostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed usun okna WER tabeli KH_OSTYP
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSTYP.SYS='T'
|| FUN.info('Nie można usunąć typu systemowego.'@); 0
|? KH_OSTYP.count()>0
|| FUN.info('Typ wykorzystywany w danych.\nUsunięcie niemożliwe.'@); 0
|| 1
?}


\dnd_khoskon
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Drag and drop - formuła po upuszczeniu KH_OSTYP w tabeli KH_OSKON
::----------------------------------------------------------------------------------------------------------------------
{? KH_OSOB.get()
|| _tab:=dnd_info('dropped_records');
   KH_OSKON.cntx_psh();
   KH_OSKON.index('FULL'); KH_OSKON.prefix(KHVZ.KH);
   KH_OSTYP.cntx_psh();
   KH_OSTYP.index('NAME'); KH_OSTYP.prefix();
   {? _tab.first()
   || {!
      |? {? ~KH_OSKON.find_key(KH_OSOB.ref(),_tab.REF) & KH_OSTYP.seek(_tab.REF,)
         || KH_OSKON.blank(1);
            KH_OSKON.KH:=KHVZ.KH;
            KH_OSKON.KH_OSOB:=KH_OSOB.ref();
            KH_OSKON.KH_OSTYP:=KH_OSTYP.ref();
            KH_OSKON.add()
         ?};
         _tab.next()
      !}
   ?};
   KH_OSKON.cntx_pop();
   KH_OSTYP.cntx_pop();
   grp_disp(KH_OSKON,'WER')
?}


\dnd_khostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Drag and drop - formuła po upuszczeniu KH_OSKON w tabeli KH_OSTYP
::----------------------------------------------------------------------------------------------------------------------
_tab:=dnd_info('dropped_records');
KH_OSKON.cntx_psh();
KH_OSKON.prefix();
{? _tab.first()
|| {!
   |? {? KH_OSKON.seek(_tab.REF,)
      || KH_OSKON.del()
      ?};
      _tab.next()
   !}
?};
KH_OSKON.cntx_pop();
grp_disp(KH_OSKON,'WER')


\init_kh_ostyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Dodaje systemowe typy osób kontaktowych kontrahenta
::----------------------------------------------------------------------------------------------------------------------
KH_OSTYP.cntx_psh();
KH_OSTYP.prefix();
_add:="
   KH_OSTYP.blank(1);
   KH_OSTYP.SYS:='T';
   KH_OSTYP.NAME:=_a;
   KH_OSTYP.add(1)
";
_add('Windykacja');
_add('Kompensaty');
KH_OSTYP.cntx_pop()


\bd_kh_osob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.00]
:: OPIS: Przed usuń okien tabeli KH_OSOB
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Czy usunąć osobę kontaktową?'@)
|| _undo:=0; _errno:=0; _uzyw:=0;
   do();
   KH_OSOBO.index('OSOBA');
   KH_OSOBO.prefix(KH_OSOB.ref());
   {? KH_OSOBO.first() || {! |? KH_OSOBO.del() !} ?};
   KH_OSKON.index('FULL');
   KH_OSKON.prefix(KH_OSOB.KH,KH_OSOB.ref());
   {? KH_OSKON.first() || {! |? KH_OSKON.del() !} ?};
   {? KH_OSOB.count()>0
   || _uzyw:=1
   || KH_OSOB.del()
   ?};
   end();
   {? _uzyw
   || FUN.emsg(
         'Usunięcie osoby kontaktowej %1 %2 kontrahenta %3 niemożliwe.\n'
         'Osoba kontaktowa wykorzystywana w systemie.'@[KH_OSOB.IMIE,KH_OSOB.NAZWISKO,KH_OSOB.KH().SKR]
      )
   ?}
?}


\kh_m_sv
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: stawki VAT dla materiałów kontrahenta
::   WE: [_a] - 0 bez okienka 1 (domyslnie) z okienkiem
::  OLD: \kh_m_sv/defin.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(1) || _a:=1 ?};

exec('khvz_kh','kontrahent');
POMOC.KH:=KHVZ.KH;
M_KH_SV.index('KH');
M_KH_SV.prefix('N',KHVZ.KH);
M_KH_SV.win_sel('WER_KH');
{? _a=1
||
   ZM.SV_KH:=null;
   M_KH_SV.cntx_psh();
   M_KH_SV.index('KH');
   M_KH_SV.prefix('T',KHVZ.KH);
   {? M_KH_SV.first()
   ||
      ZM.SV_KH:=M_KH_SV.SV
   ?};
   {? ZM.SV_KH=null() || M_KH_SV.actions_grayed('WER_KH','O:O') || M_KH_SV.actions_grayed('WER_KH','') ?};
   M_KH_SV.cntx_pop();
   M_KH_SV.select()
?};
''


\mkhv_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: dolacz indeksy
::  OLD: \mkhv_add/defin.fml
::----------------------------------------------------------------------------------------------------------------------
POMOC.RODZ:='T';
M.win_sel('WER_SEL');
{? var_pres('__tab')>100 || obj_del(__tab) ?};
M.index('ARODZ');
M.prefix('T',POMOC.RODZ);
{? M.select()
||
   {? var_pres('__tab')<100
   ||
      M_KH_SV.blank();
      M_KH_SV.M:=M.ref();
      M_KH_SV.cntx_psh;
      _sv:=exec('m_vat','material',M.ref,null,,ST.AR,ST.AM);
      M_KH_SV.cntx_pop;
      M_KH_SV.SV:=_sv;
      M_KH_SV.add(1)
   ||
      M_KH_SV.sel_adel();
      {? __tab.first()
      ||
         {!
         |?
            M.clear();
            {? M.seek(__tab.REF,)
            ||
               M_KH_SV.blank();
               M_KH_SV.M:=M.ref();
               M_KH_SV.cntx_psh;
               _sv:=exec('m_vat','material',M.ref,null,,ST.AR,ST.AM);
               M_KH_SV.cntx_pop;
               M_KH_SV.SV:=_sv;
               {? M_KH_SV.add(1)
               || sel_add()
               ?}
            ?};
            __tab.next()
         !}
      ?}
   ?}
?};
''


\mkhv_pop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: popraw stawke VAT dla tabeli M_KH_SV
::  OLD: \mkhv_pop/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? M_KH_SV.sel_size()=0 || _wyn:=exec('mkhv_par','!zws_par_kkhr') ?};
{? DISP.SV<>null
||
   M_KH_SV.SV:=DISP.SV;
   M_KH_SV.put(1)
?};
_wyn


\mkhv_domyslna
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.42]
:: OPIS: ustawia stawkę VAT dla tabeli M_KH_SV - domyślną bez uzupełnienia indeksu materiałowego
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
{? M_KH_SV.sel_size()=0 || _wyn:=exec('mkhv_par','!zws_par_kkhr') ?};
{? DISP.SV<>null
||
   M_KH_SV.cntx_psh();
   M_KH_SV.index('KH');
   M_KH_SV.prefix('T',KHVZ.KH);
   {? M_KH_SV.first()
   ||
      M_KH_SV.SV:=DISP.SV;
      {? M_KH_SV.put(1)
      || ZM.SV_KH:=DISP.SV;
         M_KH_SV.actions_grayed('WER_KH','')
      ?}
   ||
      M_KH_SV.blank();
      M_KH_SV.KH:=KHVZ.KH;
      M_KH_SV.SV_KH:='T';
      M_KH_SV.SV:=DISP.SV;
      M_KH_SV.M:=null;
      {? M_KH_SV.add()
      || ZM.SV_KH:=DISP.SV;
         M_KH_SV.actions_grayed('WER_KH','')
      ?}
   ?};
   M_KH_SV.cntx_pop()
?};
_wyn


\mkhv_dom_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [17.42]
:: OPIS: usuwa domyślną stawkę VAT dla tabeli M_KH_SV - domyślną bez uzupełnienia indeksu materiałowego
::----------------------------------------------------------------------------------------------------------------------
_wyn:=1;
M_KH_SV.cntx_psh();
M_KH_SV.index('KH');
M_KH_SV.prefix('T',KHVZ.KH);
{? M_KH_SV.first()
||
   {? FUN.ask('Czy usunąć domyślną stawkę VAT dla kontrahenta?'@)
   ||
      M_KH_SV.del();
      ZM.SV_KH:=null;
      M_KH_SV.actions_grayed('WER_KH','O:O')
   ?}
?};
M_KH_SV.cntx_pop();
_wyn


\mkhv_par
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: parametry dla popraw
::  OLD: \mkhv_par/defin.fml
::----------------------------------------------------------------------------------------------------------------------
_wyn:=0;
DISP.SV:=null;

{? INFO.KRAJ<>null
||
   SLU.index('NAZ');
   SLO.index('SL');
   SLU.prefix();
   {? SLU.find_key('~STAWKI VAT '+INFO.KRAJ().KOD)
   ||
      SLO.prefix(SLU.ref());
      SLO.win_sel('ONE_SEL');
      {? SLO.select()
      ||
         DISP.SV:=SLO.ref();
         _wyn:=1
      ?}
   ||
      FUN.info('Brak słownika: ~STAWKI VAT %1.'@[INFO.KRAJ().KOD])
   ?}
||
   FUN.info('Niewypełniony kraj w stałych systemu.\nNie można określić słownika dla Stawek VAT.'@)
?};
_wyn


\mkhvgpop
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MZ [2009]
:: OPIS: przed grupowym popraw dla tabeli M_KH_SV
::  OLD: \mkhvgpop/defin.fml
::----------------------------------------------------------------------------------------------------------------------
exec('mkhv_par','!zws_par_kkhr')


\khbranze
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: branze kontrahenta
::  OLD: \khbranze/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
BRANZE.win_dict('WER');
KHBRANZE.index('KHBRANZE');
KHBRANZE.prefix(KH.ref());
KHBRANZE.win_sel('WER');
KHBRANZE.select()


\branze_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: usuwanie branz
::  OLD: \branze_del/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
{? BRANZE.count()
|| FUN.info('Pozycja wykorzystana.\nUsunięcie niedostępne.'@)
|| 1
?}


\branze_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [12.30]
:: OPIS: rekord po BRANZE
::----------------------------------------------------------------------------------------------------------------------
_wyn:=exec('chk_rec','#valid');

_menut:=-menu_txt();

{? _wyn=''
||
   BRANZE.cntx_psh();
   BRANZE.index('NAZ'); BRANZE.prefix(BRANZE.NAZ,);
   {? _menut='dołącz'
   ||
      {? BRANZE.first()
      || FUN.info('Branża %1 już jest w słowniku.'@[BRANZE.NAZ]);
         _wyn:='NAZ'
      ?}
   |? _menut='popraw'
   ||
      _ref:=BRANZE.ref();
      _loop:=BRANZE.first();
      {!
      |? _loop
      |!
         {? BRANZE.ref()<>_ref
         || FUN.info('Branża %1 już jest w słowniku.'@[BRANZE.NAZ]);
            _wyn:='NAZ'
         ?};
         _loop:=_wyn='' & BRANZE.next()
      !}
   ?};
   BRANZE.cntx_pop()
?};

_wyn


\kh_szuk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: Mario [2009+]
:: OPIS: ustawienie okienka
::  OLD: \kh_szuk/tr_kh.fml
::----------------------------------------------------------------------------------------------------------------------
KH.win_edit('SZUK'); 1


\gus_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Wyswietla liste kontrahentow zwroconych przez GUS
::   WE: _a - tablica
::  OLD: \gus_lista/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(3,
   'NIP','STRING[10]','NIP',
   'REGON','STRING[13]','Regon',
   'NAME','STRING[100]','Nazwa',
   'DATA','STRING[10]','Data',
   'NR','INTEGER',
);
{! _i:=1..obj_len(_a)
|! _kh:=spli_str(_a[_i],'<>');
   _tab.NIP:=_kh[1];
   _tab.REGON:=_kh[2];
   _tab.NAME:=_kh[3];
   _tab.DATA:=_kh[12];
   _tab.NR:=_i;
   &_kh;
   _tab.add()
!};
_win:=_tab.mk_sel('Znalezieni kontrahenci w GUS'@,'P',,'gussel',,,,,'U');
_tab.win_fld(_win,,'NIP');
_tab.win_fld(_win,,'REGON');
_tab.win_fld(_win,,'NAME');
_tab.win_fld(_win,,'DATA',,,,,,'Data skreślenia z REGON'@);
_tab.win_act(_win,,'Formuła','&Wybierz'@@,,,"
   {? cur_tab().DATA='' | exec('gus_kh_del','!zws_par_kkhr',cur_tab().DATA)
   || sel_exit()
   ?}
",,1);
_tab.win_sel(_win);
{? _tab.select()
|| _tab.NR
?}


\gus_kh_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [12.41]
:: OPIS: Pytanie z komunikat o wykresleniu kontrahenta z bazy REGON GUS-u
::   WE: _a - data wykreslenia (napis)
::  OLD: \gus_kh_del/skid_kh.fml
::----------------------------------------------------------------------------------------------------------------------
FUN.ask(
   'Kontrahent zakończył działalność\ndnia '@+_a+'.\n'+
   'Czy uzupełnić dane z bazy GUS?'@
)


\kh_chk_nip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [17.28]
:: OPIS: Akcja sprawdzająca NIP lub NIPy-UE kontrahenta
::----------------------------------------------------------------------------------------------------------------------
{? var_press('khChkNip')>0
|| KHCHKNIP.cntx_psh();
   _ref:={? KHCHKNIP.first() || KHCHKNIP.ref() || null ?};
   {? khChkNip='K'
   || exec('chk_kh_in_vat','fks_vat',KH.ref(),KH.NIP)
   || exec('nip2tmp','kontrahent',1);
      exec('chk_nipue_kh','kontrahent')
   ?};
   _ref2:={? KHCHKNIP.first() || KHCHKNIP.ref() || null ?};
   KHCHKNIP.cntx_pop();
   {? _ref<>_ref2 || KHCHKNIP.first() ?}
?}


\bv_khchknip
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MB [18.42]
:: OPIS: Przed wyświetl okna WER_K tabeli KHCHKNIP
::----------------------------------------------------------------------------------------------------------------------
{? KHCHKNIP.SCREEN
|| KHCHKNIP.win_edit('REDS')
|| KHCHKNIP.win_edit('RED')
?};
KHCHKNIP.display()


\odb_rekb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [17.28]
:: OPIS: Rekord przed KH_ODB
::   WE: _a - 1-ostatnio odrysowany rekord, 0-wpp
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a
||
:: obsługa wyszarzania menu dla Abstore
   exec('kh_odb_abstore_visibility','abstore_fun');
   1
::   _gact:={? KH_ODB.KH_LNK || 'P' || '' ?};
::   KH_ODB.actions_grayed('WER',_gact)
?}


\khDod_efaktura_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Przed redakcją pola KH_DOD.EFAKTURA
::----------------------------------------------------------------------------------------------------------------------
params_get().fld.EFAKTURA:=fld();
{? KH_DOD.EFAKTURA='U'
   | KH_DOD.BL_STAT=exec('relation_state_active','businesslink3')
|| 0
|| 1
?}


\khDod_efaktura_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Po redakcji pola KH_DOD.EFAKTURA
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
{? fld()='B' | fld()='U'
|| fld():=params_get().fld.EFAKTURA
?};
exec('set_disabled_fields','kontrahent');
_result


\khOsob_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Dołączenie osoby kontaktowej
::----------------------------------------------------------------------------------------------------------------------
{? KHVZ.KHVP='kh_osob'
|| KH_OSOB.win_edit('RED1')
|| KH_OSOB.win_edit('RED')
?};
KH_OSOB.blank();
{? KHVZ.KHVP='kh_osob'
|| KH_OSOB.KH:=null()
|? KHVZ.KHVP='dokum' & DOKUM.KH<>null() & DOKUM.KH<>KH_OSOB.KH
|| KH_OSOB.KH:=DOKUM.KH
?};
exec('khOsob_set_disabled_fields','!zws_par_kkhr');
exec('khOsob_set_required_fields','!zws_par_kkhr');
{? KH_OSOB.edit("exec('osob_spr','!zws_par_kkhr')")
|| KH_OSOB.add()
?};
{? KH_OSOB.f_active() || KH_OSOB.f_rfresh() ?};
~~


\khOsob_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Poprawienie osoby kontaktowej
::----------------------------------------------------------------------------------------------------------------------
{? KHVZ.KHVP='kh_osob'
|| KH_OSOB.win_edit('RED1')
|| KH_OSOB.win_edit('RED')
?};
exec('khOsob_set_disabled_fields','!zws_par_kkhr');
exec('khOsob_set_required_fields','!zws_par_kkhr');
_nazwisko:=KH_OSOB.NAZWISKO;
_imie:=KH_OSOB.IMIE;
_email:=KH_OSOB.EMAIL;
{? KH_OSOB.edit("exec('osob_spr','!zws_par_kkhr')")
|| KH_OSOB.put()
?};
~~


\khOsob_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Wyświetlenie osoby kontaktowej
::----------------------------------------------------------------------------------------------------------------------
{? KHVZ.KHVP='kh_osob'
|| KH_OSOB.win_edit('RED1')
|| KH_OSOB.win_edit('RED')
?};
exec('khOsob_set_disabled_fields','!zws_par_kkhr');
KH_OSOB.display();
~~


\khOsob_set_disabled_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Zaznacza wyłączone pola w kartotece osób kontaktowych kontrahenta i danych dodatkowych
::----------------------------------------------------------------------------------------------------------------------
_win_red:=KH_OSOB.win_edit('?');

KH_OSOB.efld_opt(_win_red,'enable='+$(KH_OSOB.ARCH='T'),KH_OSOB,'ARCH_DT');
KH_OSOB.efld_opt(_win_red,'enable='+$(KH_OSOB.ARCH='T'),KH_OSOB,'ARCH_POW');

~~


\khOsob_set_required_fields
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Zaznacza wymagane pola w kartotece osób kontaktowych kontrahenta i danych dodatkowych
::----------------------------------------------------------------------------------------------------------------------
_win_red:=KH_OSOB.win_edit('?');

KH_OSOB.efld_opt(_win_red,'mark=1',KH_OSOB,'NAZWISKO');
KH_OSOB.efld_opt(_win_red,'mark='+$(KH_OSOB.BL='T'|KH_OSOB.ABSTORE<>''),KH_OSOB,'IMIE');
KH_OSOB.efld_opt(_win_red,'mark='+$(KH_OSOB.BL='T'|KH_OSOB.ABSTORE<>''),KH_OSOB,'EMAIL');
KH_OSOB.efld_opt(_win_red,'mark='+$(KH_OSOB.ABSTORE<>''),KH_OSOB,'TEL');
~~


\khOsob_bl_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Po redakcji pola KH_OSOB.BL
::----------------------------------------------------------------------------------------------------------------------
exec('khOsob_set_disabled_fields','!zws_par_kkhr');
exec('khOsob_set_required_fields','!zws_par_kkhr');
1


\khOsob_arch_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Po redakcji pola KH_OSOB.ARCH
::----------------------------------------------------------------------------------------------------------------------
_win_red:=KH_OSOB.win_edit('?');
KH_OSOB.efld_opt(_win_red,'enable='+$(KH_OSOB.ARCH='T'),KH_OSOB,'ARCH_DT');
KH_OSOB.efld_opt(_win_red,'enable='+$(KH_OSOB.ARCH='T'),KH_OSOB,'ARCH_POW');
1


\kh_kod_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.22]
:: OPIS: Przed redakcją pola KH.KOD
::----------------------------------------------------------------------------------------------------------------------
{? KH.BL_ID<>0
|| _edit:=0
|| _edit:=exec('czy_kod','slo_slu','KH.KOD')
?};
_edit


\kh_osoba_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [18.42]
:: OPIS: Pred redakcją pola KH.OSOBA lub KH.SZEF
::----------------------------------------------------------------------------------------------------------------------
exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PPDO') | exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PRDO')


\kh_miasto_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH.MIASTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_msc_wybierz','teryt','KH','MIASTO')
?}


\kh_ul_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH.UL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_uli_wybierz','teryt','KH','UL','MIASTO')
?}


\kh_odb_miasto_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH_ODB.MIASTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_msc_wybierz','teryt','KH_ODB','MIASTO')
?}


\kh_odb_ul_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH_ODB.UL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_uli_wybierz','teryt','KH_ODB','UL','MIASTO')
?}


\kh_msc_miasto_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH_MSC.MIASTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_msc_wybierz','teryt','KH_MSC','MIASTO')
?}


\kh_msc_ul_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola KH_MSC.UL
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_uli_wybierz','teryt','KH_MSC','UL','MIASTO',,,,1)
?}


\os_adres_wojewodz_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola OS_ADRES.WOJEWODZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_woj_wybierz','teryt','OS_ADRES','WOJEWODZ')
?}


\os_adres_powiat_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola OS_ADRES.POWIAT
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_pow_wybierz','teryt','OS_ADRES','POWIAT','WOJEWODZ')
?}


\os_adres_gmina_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola OS_ADRES.GMINA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_gmi_wybierz','teryt','OS_ADRES','GMINA','POWIAT','WOJEWODZ')
?}


\os_adres_miasto_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola OS_ADRES.MIASTO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_msc_wybierz','teryt','OS_ADRES','MIASTO','GMINA','POWIAT','WOJEWODZ')
?}


\os_adres_ulica_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: przycisk pola OS_ADRES.ULICA
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T'
|| exec('ter_uli_wybierz','teryt','OS_ADRES','ULICA','MIASTO','GMINA','POWIAT','WOJEWODZ')
?}


\be_os_adres
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
::   WE: [_a] - akronim okna redagowania, domyslnie REDKH
:: OPIS: przed Dołącz / Popraw adresu OS_ADRES
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _okn:=_a
|| _okn:='REDKH'
?};
{? XINFO.TER_AKT<>'T'
|| OS_ADRES.btn_eopt(_okn,'WOJEWODZ','state=grayed');
   OS_ADRES.btn_eopt(_okn,'POWIAT','state=grayed');
   OS_ADRES.btn_eopt(_okn,'GMINA','state=grayed');
   OS_ADRES.btn_eopt(_okn,'MIASTO','state=grayed');
   OS_ADRES.btn_eopt(_okn,'ULICA','state=grayed')
|| OS_ADRES.btn_eopt(_okn,'WOJEWODZ','state=normal');
   OS_ADRES.btn_eopt(_okn,'POWIAT','state=normal');
   OS_ADRES.btn_eopt(_okn,'GMINA','state=normal');
   OS_ADRES.btn_eopt(_okn,'MIASTO','state=normal');
   OS_ADRES.btn_eopt(_okn,'ULICA','state=normal')
?};
1


\kh_zmien_status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Kontrahent - zmień status
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='ZWS_PAR_KKHR';
_params.AKCJA:='Zmień_status';

exec('mp_run','#b__box',_params)


\kh_p_zmien
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: zmienia status kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KH.P=2
||
   FUN.info('Kontrahent ma status \'%1\'.\nZmiana statusu niedostępna.'@[exec('kh_popis','kontrahent',KH.P)])

|? KH.P=1
||
   _p1:=exec('kh_popis_1','kontrahent');
   _p2:=exec('kh_popis_2','kontrahent');
   {? FUN.ask('Czy zmienić status kontrahenta z \'%1\' na \'%2\'?'@[_p1,_p2])
   ||
      KH.P:=2;
      KH.POPIS:=exec('kh_popis','kontrahent',KH.P);
      KH.put()
   ?}
||
   FUN.info('Nieobsługiwany przypadek.'@)
?}


\status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AWI [20.14]
:: OPIS: Formuła na wartość parametru STATUS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::_value:=cur_tab(1,1).VALUE;
_p1:=exec('kh_popis_1','kontrahent');
_p2:=exec('kh_popis_2','kontrahent');
_choice:=FUN.choice('Wybierz status kontrahenta.'@,,_p1,_p2);
{? _choice=1 || _p1
|? _choice=2 || _p2
|| ~~
?}


\kh_osob_slo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.14]
:: OPIS: Formuła przed wyświetleniem dla KH_OSOB.SLO_RODZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_okn:=KH_OSOB.win_edit('?');
exec('czytaj','#stalesys',,XINFO,'SLOKRODZ');
{? XINFO.SLOKRODZ=null()
||
   KH_OSOB.efld_opt(_okn,'enable=0',,'SLO_RODZ')
||
   KH_OSOB.efld_opt(_okn,'enable=1',,'SLO_RODZ');
   SLU.seek(XINFO.SLOKRODZ,ref_name(XINFO.SLOKRODZ))
?};
1


\kh_osob_slo_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [20.14]
:: OPIS: Formuła przed redagowaniem dla KH_OSOB.SLO_RODZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO,'SLOKRODZ');
{? XINFO.SLOKRODZ<>null()
||
   SLU.seek(XINFO.SLOKRODZ,ref_name(XINFO.SLOKRODZ))
?}


\chk_kh_wstyp_core
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Walidacja rekordu tabeli KH_WSTYP
::       - wołana z poziomu okna oraz funkcji importujących
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
{? _<1 | type_of(_a)<>1 | (_a<>0 & _a<>1)
|| _a:=0
?};
_ref:={? _a=1 || KH_WSTYP.ref() || null ?};

_chk:=__CHK.record(KH_WSTYP,,'NAME');

{? _chk=''
|| _ref:=KH_WSTYP.ref();
   KH_WSTYP.cntx_psh();
   KH_WSTYP.index('NAME');
   KH_WSTYP.prefix(KH_WSTYP.NAME,);
   {? KH_WSTYP.first() & (_ref=null() | KH_WSTYP.ref()<>_ref)
   || FUN.info('Istnieje typ o nazwie: %1.'@[KH_WSTYP.NAME]);
      _chk:='NAME'
   ?};
   KH_WSTYP.cntx_pop()
?};

_chk


\kh_wstyp_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Rekord po okna WER tabeli KH_WSTYP
::----------------------------------------------------------------------------------------------------------------------
exec('chk_kh_wstyp_core','!zws_par_kkhr',(-menu_txt()='popraw'))


\kh_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie zgodności z TERYT danych adresowych kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('kh_zagr','kontrahent')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.TAB:='KH';
   _par.ULI_P:='UL';
   _par.MSC_P:='MIASTO';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   _wyn.WYNIK
?}


\kh_odb_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie zgodności z TERYT danych adresowych odbiorcy kontrahenta
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('kh_odb_zagr','kontrahent')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.TAB:='KH_ODB';
   _par.ULI_P:='UL';
   _par.MSC_P:='MIASTO';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   {? ~_wyn.WYNIK
   || _chk:=_wyn.POLE
   ?}
?};
_chk


\kh_msc_teryt_sprawdz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: sprawdzanie zgodności z TERYT danych adresowych miejsca kontrahenta
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? XINFO.TER_AKT='T' & XINFO.TER_KNT='T' & ~exec('kh_msc_zagr','kontrahent')
|| _par:=exec('ter_sprawdz_a','teryt');
   _par.TAB:='KH_MSC';
   _par.ULI_P:='UL';
   _par.MSC_P:='MIASTO';
   _wyn:=exec('ter_sprawdz','teryt',_par);
   _wyn.WYNIK
?}


\kh_arch_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [20.14]
:: OPIS: Po redakcji pola KH.ARCH
::----------------------------------------------------------------------------------------------------------------------
exec('set_disabled_fields','kontrahent');
1


\kh_osobo_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Dołączenie odbiorców dla osoby kontaktowej
::----------------------------------------------------------------------------------------------------------------------
_selected:=tab_tmp(1,'REF','INTEGER','ref');
params_set('selected',_selected);

KH_ODB.cntx_psh();
KH_ODB.index('KH_ODB');
KH_ODB.prefix(BEER.KH);
_wer:=KH_ODB.mk_sel('Odbiorcy kontrahenta'@,,,'odbkh',,,20,,'U');
KH_ODB.win_fld(_wer,,'KOD');
KH_ODB.win_fld(_wer,,'SKR');
KH_ODB.win_fld(_wer,,'NAZ',,,30);
_formula:="
   _selected:=params_get().selected;
   _selected.REF:=#KH_ODB.ref();
   _selected.add();
   sel_exit()
";
KH_ODB.win_act(_wer,,'Formuła','Wybierz'@@,,,_formula,,1,1,,,'W');
KH_ODB.win_sel(_wer);
{? KH_ODB.select()
|| {? _selected.first()
   || {!
      |? KH_OSOBO.KH:=BEER.KH;
         KH_OSOBO.ODB:=exec('FindAndGet','#table',KH_ODB,_selected.REF,,"ref()",null());
         KH_OSOBO.OSOBA:=KH_OSOB.ref();
         KH_OSOBO.add();
         _selected.next()
      !}
   ?}
?};
KH_ODB.cntx_pop();
~~


\kh_osoba_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [20.42]
:: OPIS: Po redakcji pola KH.OSOBA
::       Szuka kontrahentów, którzy powiązani są już z daną osobą
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=1;
{? -(6+menu_txt)<>'szukaj'
|| {? var_pres('slo_pop')<=0 || slo_pop:=1 ?};
   {? var_pres('ref_slo')<=0 || ref_slo:=null ?};
   {? var_pres('zm_kh')<=0 || zm_kh:=0 ?};
   ref_kh:=null;
   {? cur_afld='OSOBA' & KH.OSOBA<>null
   ||
      {? _zwrot
      || _ref:=KH.ref(); zwrot:=0;
         _kh_nazwisko:=KH.OSOBA().NAZWISKO; _kh_imie:=KH.OSOBA().PIERWSZE; _kh_pesel:=KH.OSOBA().PESEL;
         TMPKH:=tab_tmp(3
            ,'KOD','STRING[8]','Kod'@
            ,'SKR','STRING[20]','Skrót'@
            ,'NAZ_P','STRING[45]','Nazwa'@
            ,'CZY_SLO','STRING[1]','Znacznik'@);
         KH.cntx_psh();
         KH.index('OSOBA');
         KH.prefix(KH.OSOBA);
         {? KH.first()
         ||
            {!
            |?
               {? -menu_txt='dołącz' | _ref<>KH.ref()
               || TMPKH.KOD:=KH.KOD;
                  TMPKH.SKR:=KH.SKR;
                  TMPKH.NAZ_P:=KH.NAZ_P;
                  TMPKH.CZY_SLO:={? var_pres('slo_pop')>0 & slo_pop
                                 || exec('mark_kh','!zws_par_kkhr')
                                 || 'N'
                                 ?};
                  TMPKH.add()
               ?};
               KH.next()
            !}
         ?};
         {? TMPKH.first()
         ||
            _wer:=TMPKH.mk_sel('Kontrahenci z przypisaną taką samą osobą'@,,,'tmpkh_wer',,,,,'U');
            TMPKH.win_fld(_wer,,'KOD');
            TMPKH.win_fld(_wer,,'SKR');
            TMPKH.win_fld(_wer,,'NAZ_P');
            TMPKH.win_act(_wer,,'Formuła','&Wczytaj'@@,,,,"exec('wczyt_kh','!zws_par_kkhr')",1,,,,'W');
            TMPKH.win_act(_wer,,'Formuła','&Powrót do edycji'@@,,,,"zwrot:=0; sel_exit; 1",,,,,'P');
            TMPKH.win_act(_wer,,'Formuła','&Kontynuacja'@@,,,,"zwrot:=1; sel_exit; 1",,,,,'K');
            TMPKH.win_act(_wer,,'Rekord',,,,"{? TMPKH.CZY_SLO='T' || exec('findtmp','#color') ?}");
            TMPKH.win_act(_wer,,'Wyświetl',,,,"exec('disp_kh','!zws_par_kkhr')");
            TMPKH.win_sel(_wer);
            _zwrot:=ask('Istnieje w systemie co najmniej jeden kontrahent\n'@+
                        'powiązany z następującą osobą: \n\n'@+
                        'Nazwisko: '@+_kh_nazwisko+'\n'+
                        'Imię: '@+_kh_imie+'\n'+
                        'PESEL: '@+_kh_pesel
                        ,'Uwaga!'@,0,'Powrót do edycji'@,
                        'Kontynuacja'@,'Pokaż &\szczegóły'@);
            {? _zwrot=2
            || {? ~TMPKH.select() || _zwrot:=0 || _zwrot:=zwrot ?}
            ?}
         ?};
         obj_del(TMPKH);
         KH.cntx_pop();
         {? zwrot=2 || KH.seek(ref_kh) ?};
         &zwrot
      ?}
   ?};
   &ref_kh
?};
{? _zwrot || exec('set_required_fields','!zws_par_kkhr') ?};
_zwrot


\act_rec_kh_msc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [PD] [20.42]
:: OPIS: wyszarzenie akcji dla okienka miejsca dostaw
::----------------------------------------------------------------------------------------------------------------------
_act:='';
KH_MSC.cntx_psh();
TR_ZEWN.cntx_psh();
KH_MSC.blank();
_courier:=KH_MSC.TR_ZEWN().COURIER;
KH_MSC.cntx_pop();
TR_ZEWN.cntx_pop();

_act+={? _courier<>'' & 'dhl,paczkomaty'*_courier || '' || 'M' ?};
_act+={? _courier<>'' & 'dpd'*_courier || '' || 'L' ?};
KH_MSC.actions_grayed('WER',_act+':'+_act);
''


\popup_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Formuła popup do zmiany wielkości przedsiębiorstwa kontrahenta
::   WE: _a - zmienna, do przypisania wartości
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__zm_pop');
__zm_pop:=_a;
_test:=popup(0,'Wybierz wielkość przedsiębiorstwa',
       'mikro', '', "($__zm_pop)():='mikro'",
       'mały','',"($__zm_pop)():='mały'",
       'średni','',"($__zm_pop)():='średni'",
       'duży','',"($__zm_pop)():='duży'",
       'publiczny','',"($__zm_pop)():='publiczny'",
       'leczniczy','',"($__zm_pop)():='leczniczy'",
       'nieustalony','',"($__zm_pop)():='nieustalony'");
VAR_DEL.delete('__zm_pop')


\f3_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Formuła na f3 w polu na wielkość kontrahenta
::   WY: KH.WIELKOSC
::----------------------------------------------------------------------------------------------------------------------
exec('popup_kh_size','!zws_par_kkhr','KH.WIELKOSC')


\set_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Ustawianie wielkości przedsiębiorstwa za pomocą akcji z menu
::----------------------------------------------------------------------------------------------------------------------
_put:=0;
{? KH.sel_size()
|| {? var_pres('__kh_size') & __kh_size<>''
   || KH.WIELKOSC:=__kh_size;
      _put:=1
   ?}
|| _tmp:=KH.WIELKOSC;
   exec('popup_kh_size','!zws_par_kkhr','KH.WIELKOSC');
   {? _tmp<>KH.WIELKOSC
   || _put:=1
   ?}
?};
{? _put || KH.put() ?}


\bg_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Formuła przed dla grupowej zmiany wielkości firmy
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__kh_size');
__kh_size:='';
exec('popup_kh_size','!zws_par_kkhr','__kh_size')


\ag_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Formuła po dla grupowej zmiany wielkości firmy
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__kh_size')


\ae_kh_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [20.14]
:: OPIS: Formuła po redagowaniu dla pola wielkość przedsiębiorstwa
::----------------------------------------------------------------------------------------------------------------------
{? fld()=''
|| _wy:=1
|? ~(fld()='mikro' | fld()='mały' | fld()='średni' | fld()='duży' |
     fld()='publiczny' | fld()='leczniczy' | fld()='nieustalony')
|| FUN.emsg('Wprowadzono nieznany rodzaj wielkości przedsiębiorstwa.\nListę obsługiwanych wartości '
            'można wyświetlić klawiszem F3.'@);
   _wy:=0
|| _wy:=1
?};
_wy


\kho_win_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [21.37]
:: OPIS: Okienko redakcyjne kartoteki KH_ODB
::   WE: _a - okienko redakcyjne: redakcja (1), podgląd (0)
::----------------------------------------------------------------------------------------------------------------------
_edit:=_a;

{? KH_ODB.KH_LNK
||
   _red:=KH_ODB.mk_edit('Odbiorca kontrahenta'@,,'kho'+$_edit+$(KH_ODB.KH_LNK=null()));
   {? _edit=0
   || KH_ODB.win_etab(_red,'Dane ogólne'@)
   ?};
   KH_ODB.win_ewin(_red,,'RED_KH');
   {? _edit=0
   || KH_ODB.win_etab(_red,'Dane uzupełniające'@);
      KH_ODB.win_esep(_red,'E-faktura'@);
      KH_ODB.win_efld(_red,KH_DOD,'EFAKTURA',,,,,1,'Zgoda na e-fakturę'@,,,'radio-buttons',
         ,'Brak zgody lub odbiór z innego źródła'@,"'N'"
         ,'Otrzymywanie dokumentów e-mailem'@,"'T'"
         ,'Otrzymywanie dokumentów w usłudze Busiensslink'@,"'U'"
         ,'Wymiana dokumentów w usłudze Businesslink'@,"'B'"
      );
::      KH_ODB.win_efld(_red,,'FV_BL',,,,,,,1,,'check-box',
::         'check_label="%1"'['Odbiorca dokumentów sprzedaży wysłanych przez Businesslink'@],"'T'","'N'"
::      );
      ~~
   ?};
   {? _edit=0
   || KH_ODB.win_esep(_red,'Businesslink'@);
      KH_ODB.win_efld(_red,KH_DOD,'KH','BL_STAT',,,40);
      KH_ODB.win_efld(_red,KH_DOD,'BL_STAT',,,43,,1);
      KH_ODB.win_efld(_red,KH_DOD,'BL_DATE',,,,,1);
      KH_ODB.win_efld(_red,KH_DOD,'BL_INCL',,,,,1,'Załączniki'@,,,'check-box',
         'check_label="%1"'['Wiadomości o dokumentach będą zawierać załączniki'@],"'T'","'N'"
      )
   ?};

   _kol:=exec('fir_ety_kol','color');
   KH_ODB.efld_opt(_red,'label_color='+_kol,KH_DOD,'EFAKTURA');
   KH_ODB.efld_opt(_red,'label_color='+_kol,KH_DOD,'BL_INCL');
   KH_ODB.efld_opt(_red,'label_color='+_kol,KH_DOD,'BL_STAT');
   KH_ODB.efld_opt(_red,'label_color='+_kol,KH_DOD,'BL_DATE');

   exec('kh_dod_ini','kontrahent',KH_ODB.KH_LNK,1);

   {? exec('is_active','businesslink3') & KH_DOD.EFAKTURA='B'
   || KH_ODB.efld_opt(_red,'enable=1',KH_DOD,'BL_INCL');
      KH_ODB.efld_opt(_red,'enable=1',KH_DOD,'BL_DATE')
   || KH_ODB.efld_opt(_red,'enable=0',KH_DOD,'BL_INCL');
      KH_ODB.efld_opt(_red,'enable=0',KH_DOD,'BL_DATE')
   ?};

   {? KH_ODB.KH_LNK<>null()
   || _kh_lnk_gv:=exec('kh_grvat_szuk','kontrahent',KH_ODB.KH_LNK,1);
      {? KH_ODB.KH().GRVAT='T'
      || {? _kh_lnk_gv<>null() & _kh_lnk_gv<>KH_ODB.KH
         || KH_ODB.efld_opt(_red,'enable=0',,'CGVAT')
         || KH_ODB.efld_opt(_red,'enable=1',,'CGVAT')
         ?}
      || KH_ODB.efld_opt(_red,'enable=0',,'CGVAT')
      ?};
      {? _kh_lnk_gv<>null() & _kh_lnk_gv<>KH_ODB.KH
      || KH_ODB.efld_opt(_red,'enable=0',,'JST')
      || KH_ODB.efld_opt(_red,'enable=1',,'JST')
      ?}
   ?};

   exec('kh_odb_mark','kontrahent',_red);

   exec('khodb_set_editable','kontrahent',_red);

   exec('ok_esc','#window',KH_ODB,_red)

|| exec('kh_odb_mark','kontrahent','RED');
   _red:='RED'
?};

_red


\bd_kh_wstyp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MW [22.26]
:: OPIS: Przed usun okna WER tabeli KH_WSTYP
::----------------------------------------------------------------------------------------------------------------------
{? KH_WSTYP.count()>0
|| FUN.info('Typ wykorzystywany w danych.\nUsunięcie niemożliwe.'@); 0
|| 1
?}


\kh_dod_upd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PD [22.26]
:: OPIS: Aktualizacja tabeli KH_DOD
::----------------------------------------------------------------------------------------------------------------------
_kh:={? var_press('_a')=7 || _a || null() ?};
{? _kh
||
   FIRMA.cntx_psh();
   FIRMA.prefix();
   KH_DOD.cntx_psh();
   KH_DOD.index('KH_DOD');
   {? FIRMA.first()
   ||
      {!|?
         KH_DOD.prefix(FIRMA.ref(), _kh);
         {? ~KH_DOD.first()
         ||
            KH_DOD.blank();
            KH_DOD.prefix();
            KH_DOD.FIRMA:=FIRMA.ref();
            KH_DOD.KH:=_kh;
            KH_DOD.add()
         ?};
         FIRMA.next()
      !}
   ?};
   FIRMA.cntx_pop();
   KH_DOD.cntx_pop()
|? FUN.ask('Czy uzupełnić dane kontrahenta wg firmy?'@)
||
   KH_DOD.index('KH_DOD');
   KH.cntx_psh();
   KH.prefix();
   {? KH.first()
   ||
      {!|?
         KH_DOD.prefix(FIRMA.ref(), KH.ref());
         {? ~KH_DOD.first()
         ||
            KH_DOD.blank();
            KH_DOD.prefix();
            KH_DOD.FIRMA:=FIRMA.ref();
            KH_DOD.KH:=KH.ref();
            KH_DOD.add()
         ?};
         KH.next()
      !}
   ?};
   KH.cntx_pop()
?}


\kh_rel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Sprawdza, czy kontrahent ma zbudowaną pełną relację w conajmniej jednej firmie
::   WE: _a - KH.ref()
::       [_b] - czy wyśietlać dialogi 0/[1]
::   WY: 1-jeśli kontrahent ma zbudowaną relację / 0
::----------------------------------------------------------------------------------------------------------------------
_kh:=_a;
{? var_pres('_b')=type_of(0) || _dialog:=_b || _dialog:=1 ?};

_result:=0;

KH_DOD.cntx_psh();
KH_DOD.index('KH');
KH_DOD.prefix(_kh);
{? KH_DOD.first()
|| {!
   |? {? KH_DOD.EFAKTURA='B' || _result:=1 ?};
      KH_DOD.next()
   !}
?};

{? _dialog & _result
|| _choice:=FUN.choice(
      'Kontrahent ma zbudowaną pełną relację w Businesslink w conajmniej jednej firmie.\n\n'
      'Przed modyfikacją NIP należy odpiąć relację we wszystkich firmach.'@,,'Szczegóły'@,,,,'OK'@
   );
   {? _choice=1
   || _wer:=KH_DOD.mk_sel('Firmy powiązane z kontrahentem'@,'P',,'khdodfirm',,,,,'U');
      KH_DOD.win_fld(_wer,,'FIRMA','SYMBOL');
      KH_DOD.win_fld(_wer,,'BL_STAT');
      KH_DOD.win_sel(_wer);
      KH_DOD.select()
   ?}
?};
KH_DOD.cntx_pop();

_result


\kh_nip_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Przed redagowaniem pola KH.NIP
::----------------------------------------------------------------------------------------------------------------------
_red:=exec('czy_kod','slo_slu','KH.NIP');
{? _red & (-menu_txt())='popraw'
|| _red:=~exec('kh_rel','!zws_par_kkhr',KH.ref(),1)
?};
_red


\kho_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [22.26]
:: OPIS: Po redagowaniu pól KH_ODB
::----------------------------------------------------------------------------------------------------------------------
{? KH_ODB.EM='' & KH_ODB.FV_EM='T'
|| FUN.info('Nie można zaznaczyć opcji — brak adresu e-mail.'@);
   KH_ODB.FV_EM:='N'
?};
1

:Sign Version 2.0 jowisz:1045 2024/01/29 14:27:16 287c158361f11bb8acbc0c6b2e12ca69442814cf655dab9ea65d30d9b3aa7250ffed6099bb1be3c5d69eae84a9fd0d32723b8de03e44d02a0cc3ef383edc0bd65be18c4d361c069361689fea7bcff2b80be8c3b222b8581dcd159343d1c9e5eddd18d390a06c02b348eccb831331a7a0cf4f94f9fd9e1c4f0909eb4a90edb0e2
