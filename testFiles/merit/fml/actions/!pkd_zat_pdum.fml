:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_zat_pdum.fml
:: Utworzony: 26.03.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_ZAT_PDUM - Przygotowanie umowy zatrudnienia.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przygotowanie umowy zatrudnienia - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd','H_UM','H_UM.P().get()')
::
::# kind=WE, symbol=H_UM, type=_H_UM, name=Wskazanie umowy o pracę, required=T, keyref=T
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;

{? type_of(_in.H_UM)<>type_of(null) | _in.H_UM=null
|| FUN.info('Nie można przygotować umowy o pracę.\nBrak wskazania umowy.'@);
   _mp.error('Brak wskazania umowy.');
   return()
?};

H_UM.cntx_psh();
exec('otworz_h_um','pracownik',ref_name(_in.H_UM));
H_UM.prefix();
{? H_UM.seek(_in.H_UM)
|| P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   {? H_UM.P<>null() & H_UM.P().OSOBA<>null() & H_UM.P().OSOBA().get()
   || _mp.keyRef(P.uidref());
      _mp.keyRef(OSOBA.uidref());
      H.cntx_psh();
      H.use('_his'+{? H_UM.name()='h_um' || 't' || '_' ?});
      H.index('HISTUM');
      H.prefix(H_UM.ref());
      {? H.first()
      || _micro:=_mp.isMicro();
         _akcja:=_mp.akcja();
::       Ze względu na konieczność wypełnienia pola H_UM.PRZYG, obsługa czynności jest taka sama, niezależnie od
::       sposobu uruchomienia (obszar, lista zadań).
::       Jedyną różnicą jest sposób kończenia działania czynności - dla mikroczynności jest to anulowanie.
         _bufOSOBA:=exec('save_fml_type','#field',OSOBA,'BEFORE_EDIT');
         exec('set_fml_type','#field',OSOBA,'BEFORE_EDIT',"0");
         _bufP:=exec('save_fml_type','#field',P,'BEFORE_EDIT');
         exec('set_fml_type','#field',P,'BEFORE_EDIT',"0");
         _bufH_UM:=exec('save_fml_type','#field',H_UM,'BEFORE_EDIT');
         exec('set_fml_type','#field',H_UM,'BEFORE_EDIT',"0");
         H.fld_fml('PRZYG','BEFORE_EDIT',"1");
         _bufH:=exec('save_fml_type','#field',H,'BEFORE_EDIT');
         exec('set_fml_type','#field',H,'BEFORE_EDIT',"0");
         _bufEV:=exec('save_fml_type','#field',EDIT_VAR,'BEFORE_EDIT');
         exec('set_fml_type','#field',EDIT_VAR,'BEFORE_EDIT',"0");

         H.fld_fml('PRZYG','BEFORE_EDIT',"1");
         H.fld_fml('PODPIS','BEFORE_EDIT',"1");
         H.fld_fml('PRZEDST','BEFORE_EDIT',"1");
         H_UM.memo_get(,'UZASDN');

         _wnd:=exec('wnd','!pkd_zat_pdum');
         {? _micro
         || P.btn_opt(_wnd.btnZ,'state=grayed,tooltip=');
            P.btn_opt(_wnd.btnO,'tooltip='+exec('help_red_ok','#window','Z'));
            P.btn_opt(_wnd.btnE,'tooltip='+exec('help_red_esc','#window','A'))
         || P.btn_opt(_wnd.btnZ,'state=normal,tooltip='+exec('help_red_zakoncz','#window','PKD_A'));
            P.btn_opt(_wnd.btnO,'tooltip='+exec('help_red_ok','#window','Z'));
            P.btn_opt(_wnd.btnE,'tooltip='+exec('help_red_esc','#window','A'))
         ?};
         P.win_edit(_wnd.wnd);
         _cfg:=obj_new('AKCJA','PRZYG','PODPIS','PRZEDST','F_ZATR','TDUP');
         _cfg.AKCJA:='';
         _cfg.PRZYG:=H.PRZYG;
         _cfg.PODPIS:=H.PODPIS;
         _cfg.PRZEDST:=H.PRZEDST;
         _cfg.F_ZATR:=P.F_ZATR().KOD;
         _cfg.TDUP:=1;
         params_set('cfg',_cfg);
:: Ustawienie wartości z oddelegowania do pracy za granicą.
         _oddelegowanie:=PAR_SKID.get(261)='T' & exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_OROD');
         _edit:=P.win_edit('?');
         {? _oddelegowanie
         || exec('h_odde_edit_begin','oddelegowanie',1,P,_edit,0);
            P.efld_opt(_edit,
               'editable=%1,enable=%2'[{? exec('h_oddel_editable','oddelegowanie') || '1' || 'grayed' ?},
               $(H.ODDEL='T' | #H.DO>0)],H,'ODDEL'
            );
            P.efld_opt(_edit,
               'editable=%1'
                  [  {? exec('h_koddel_editable','oddelegowanie') & exec('h_oddel_editable','oddelegowanie')
                     || '1'
                     || 'grayed'
                     ?}
                  ],H,'KODDEL'
            );
            _txt:=''
         || exec('acces2fld_h_odde','oddelegowanie',P,_edit,0,,0,1)
         ?};
         {? P.edit(
               "  params_set(params_get());
                  _chk:=exec('check','wspolpraca',1);
                  {? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & _chk=0)
                  || params_get().cfg.AKCJA:=''
                  || _chk:=exec('valid','!pkd_zat_pdum');
                     {? _chk<>''
                     || params_get().cfg.AKCJA:=''
                     || 1
                     ?}
                  ?};
                  _chk
               "
            )
         || {? _cfg.PRZYG<>H.PRZYG | _cfg.PODPIS<>H.PODPIS | _cfg.PRZEDST<>H.PRZEDST
            || H.put()
            ?};
            {? _micro
            || _mp.cancel()
            |? _cfg.AKCJA='ZAKOŃCZ'
            || _mp.done()
            || _mp.keep()
            ?}
         |? _micro
         || _mp.cancel()
         || _mp.keep()
         ?};

:: Koniec pracy z oddelegowaniem do pracy za granicą.
         {? _oddelegowanie
         || exec('h_odde_edit_end','oddelegowanie',_txt)
         ?};
         exec('restore_fml_type','#field',EDIT_VAR,'BEFORE_EDIT',_bufEV);
         exec('restore_fml_type','#field',H,'BEFORE_EDIT',_bufH);
         exec('restore_fml_type','#field',H_UM,'BEFORE_EDIT',_bufH_UM);
         exec('restore_fml_type','#field',P,'BEFORE_EDIT',_bufP);
         exec('restore_fml_type','#field',OSOBA,'BEFORE_EDIT',_bufOSOBA)
      ?};
      H.cntx_pop()
   ?};
   OSOBA.cntx_pop();
   P.cntx_pop()
|| FUN.info('Nie można przygotować umowy o pracę.\nNie znaleziono umowy.'@);
   _mp.error('Nie znaleziono umowy.')
?};
H_UM.cntx_pop();
exec('otworz_h_um','pracownik');
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przygotowanie umowy zatrudnienia - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_tab:=exec('init_desc_tab','pracownik');

H_UM.cntx_psh();
exec('otworz_h_um','pracownik',ref_name(_in.H_UM));
H_UM.prefix();
{? H_UM.seek(_in.H_UM)
|| P.cntx_psh();
   P.prefix();
   OSOBA.cntx_psh();
   OSOBA.prefix();
   {? H_UM.P<>null() & H_UM.P().OSOBA<>null()
   || H_UM.P().OSOBA();
      _mp.keyRef(P.uidref(),0,0);
      _mp.keyRef(OSOBA.uidref(),0,0);
      H.cntx_psh();
      H.use('_his'+{? H_UM.name()='h_um' || 't' || '_' ?});
      H.index('HISTUM');
      H.prefix(H_UM.ref());
      {? H.first()
      || STN.cntx_psh();
         STN.prefix();
         UD_SKL.cntx_psh();
         UD_SKL.prefix();
         _tab.ZAW_DANE:='T';
         _tab.NAZWISKO:=OSOBA.NAZWISKO;
         _tab.PIERWSZE:=OSOBA.PIERWSZE;
         _tab.OBCY:=OSOBA.OBCY;
         _tab.PASZPORT:=OSOBA.PASZPORT;
         _tab.PESEL:=OSOBA.PESEL;
         _tab.UR_DATA:=$OSOBA.UR_DATA;
         _tab.STN:=H.ST().ST;
         _tab.UD_SKL:=H.WYDZIAL().SYMBOL;
         UD_SKL.cntx_pop();
         STN.cntx_pop()
      ?};
      H.cntx_pop()
   ?};
   OSOBA.cntx_pop();
   P.cntx_pop()
?};
H_UM.cntx_pop();
exec('otworz_h_um','pracownik');

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Wydrukuj umowę o pracę: %1 %2: Paszport - %3 (%4/%5)'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.STN,_tab.UD_SKL]
   |? +_tab.PESEL
   || 'Wydrukuj umowę o pracę: %1 %2: PESEL - %3 (%4/%5)'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.STN,_tab.UD_SKL]
   || 'Wydrukuj umowę o pracę: %1 %2: Data urodzenia - %3 (%4/%5)'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.STN,_tab.UD_SKL]
   ?}
|| 'Wydrukuj umowę o pracę'@@
?}


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przygotowanie okna redagowania danych nowego angażu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_wnd:=exec('wnd','wspolpraca','P','Wydruk umowy o pracę'@);
exec('h_efld_opt','pracownik','*',P,_wnd);

: Zmiany w gwiazdkowaniu
P.efld_opt(_wnd,'mark=0');
P.efld_opt(_wnd,'mark=1',H,'PRZYG');
P.efld_opt(_wnd,'mark=1',H,'PODPIS');
P.efld_opt(_wnd,'mark=1',H,'PRZEDST');

: Akcje
_btnD:=P.win_ebtn(_wnd,'text=&'+'Drukuj'@+',btn_label_align=center,panel=bottom,align=begin',
   "  params_set(params_get());
      _chk:=exec('check','wspolpraca',1);
      {? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & _chk=0)
      || ''
      || _chk:=exec('valid','!pkd_zat_pdum');
         {? _chk=''
         || {? PAR_SKID.get(261)='T' & H.ODDEL='T'
            || exec('test_ciaglosci_oddelegowan','oddelegowanie','H_UM',0)
            ?};
            _cfg:=params_get().cfg;
            {? _cfg.PRZYG<>H.PRZYG | _cfg.PODPIS<>H.PODPIS | _cfg.PRZEDST<>H.PRZEDST
            || _cfg.PRZYG:=H.PRZYG;
               H.put()
            ?};
            exec('drukuj','!pkd_zat_pdum');
            ''
         || 'edit:'+_chk
         ?}
      ?}
   "
);
P.btn_opt(_btnD,'default=1');

_cfg:=',btn_label_align=center,panel=bottom,align=end';

_btnZ:=P.win_ebtn(_wnd,'text='+exec('text_red_zakoncz','#window','PKD_A')+_cfg,
   "params_get().cfg.AKCJA:='ZAKOŃCZ'; 'key:F2'");
_btnO:=P.win_ebtn(_wnd,'text='+exec('text_red_ok','#window','Z')+_cfg,"params_get().cfg.AKCJA:=''; 'key:F2'");
_btnE:=P.win_ebtn(_wnd,'text='+'&Anuluj'@+''+_cfg,"'key:Esc'");

_ret:=obj_new('wnd','btnZ','btnO','btnE');
_ret.wnd:=_wnd;
_ret.btnZ:=_btnZ;
_ret.btnO:=_btnO;
_ret.btnE:=_btnE;
_ret


\drukuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Właściwe wywołanie drukowania umowy o pracę.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(,'UM','STRING[16]','Umowa o pracę','PPSF_H','STRING[16]','Praca zdalna');
_tab.UM:=$H_UM.ref();
{? exec('is_pzd01','ppsf')
|| Cntx.psh(PPSF_H,PPSF_ADR);
   Cntx.clr(PPSF_H,PPSF_ADR);
   _ppsfObj:=obj_new('jest','pobierz','PPSF_H');
   exec('wybor_do_druku_umowy','ppsf',_ppsfObj);
   _ppsfObj.pobierz();
   _tab.PPSF_H:=_ppsfObj.PPSF_H;
   Cntx.pop(PPSF_H,PPSF_ADR)
?};
_tab.add();
params_set('UM',_tab,'ZAL','1','DALEJ','');


rep_exec('pkd_zaswumowaoprace')


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła weryfikująca poprawność wprowadzonych danych (daty przygotowania).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=exec('h_p_daty_ae','pracownik',1))<>''
|| return(_chk)
?};
__CHK.record(H,,'PRZEDST')

:Sign Version 2.0 jowisz:1045 2023/07/21 13:25:24 7c9d0fa01f4a2cbe63729ff1c25a47c1b1a01b94db1f22c3c072ade338f04bcf96355a6420a76ab8840fb0646f354d63a06041d8425fde944b53388fa1d068f943b2fe801f5c40690995cbdd2c49715e868afa4af406918272211f0ffa480000516b92d025ea36f8307bcfabe709820d3f656fedddc1d9324543f42b4dab62f0
