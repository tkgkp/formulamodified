:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !lmo_pal_apal.fml
:: Utworzony: 27.09.2022
:: Autor: [rr]
::======================================================================================================================
:: Zawartość: Czynność LMO_PAL_APAL - Archiwizacja palet
::======================================================================================================================

\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [23.25]
:: OPIS: Formuła główna czynności
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ,LMG
::# kind=WE, symbol=PAL,     type=_PAL,  name=Paleta,               required=T,    keyref=T
::# kind=WY, symbol=PAL,     type=_PAL,  name=Paleta,               required=N,    keyref=T

_mp:=params_get().mp;
_in:=params_get().in;
_out:=params_get().out;

exec('init','lmg');

_akcja:=_mp.akcja();
_auto:=_akcja<>'Archiwizuj' & _akcja<>'Przywróć' & _mp.isAutoRun();
_grupa:=_mp.isGroup();

{? ~(var_pres('PAL',_in)=type_of(null()) & _in.PAL)
|| _mp.error('Brak wymaganego parametru PAL.')
|| PAL.cntx_psh();
   PAL.prefix();

   {? PAL.seek(_in.PAL)
   || _palkod:=PAL.KODK;
      _mp.trigRef('PAL',,0,,exec('kind_out','#b_port'),'PAL');
      {? _akcja='Archiwizuj' | _auto
      ||  params_set('mp',_mp,'in',_in,'out',_out);
          {? exec('archiwizuj','!lmo_pal_apal',_in.PAL)
          || {? _grupa
             || exec('add_kom','#message','Przeniesiono paletę: %1 do archiwum.'@[_palkod]
                 ,1,'Archiwizacja palet'@,__lp+=1)
             ?};
             _mp.done()
          || {? _grupa
             || exec('add_kom','#message','Nie udało się przenieść palety: %1 do archiwum.'@[_palkod]
                 ,2,'Archiwizacja palet'@,__lp+=1)
             ?}
          ?}
      |? _akcja='Przywróć'
      ||  params_set('mp',_mp,'in',_in,'out',_out);
          {? exec('archiwizuj','!lmo_pal_apal',_in.PAL,0)
          || {? _grupa
             || exec('add_kom','#message','Przeniesiono paletę: %1 z archiwum.'@[_palkod]
                 ,1,'Przywrócenie palet'@,__lp+=1)
             ?};
             _mp.done()
          || {? _grupa
             || exec('add_kom','#message','Nie udało się przenieść palety: %1 z archiwum.'@[_palkod]
                 ,2,'Przywrócenie palet'@,__lp+=1)
             ?}
          ?}
      || _mp.error('Nieobsługiwana ścieżka.')
      ?}
   ?};
   PAL.cntx_pop()
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Formuła TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));

{? var_pres('PAL',_in)<>type_of(~~) & _in.PAL
|| 'Zarchiwizuj paletę: %1'@@[exec('record','#to_string',_in.PAL)]
|| ''
?}


\mask
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Zwraca maskę archwium
::   WE: _a - Wskazanie na paletę PAL.ref()
::   WY: maska archiwum PAL i PAL_POZ-a
::----------------------------------------------------------------------------------------------------------------------
_res:=obj_new('M_PAL','M_POZ');
_res.M_PAL:=PAL.name();
_res.M_POZ:=PAL_POZ.name();
_tryb:=1;

_bufsize:=obj_new(3);
:: wielkość buforu tabeli PAL
_bufsize[1]:=exec('tab_buffer_size','#table',PAL);
:: wielkość buforu tabeli PAL_POZ
_bufsize[2]:=exec('tab_buffer_size','#table',PAL_POZ);
:: liczba rekordów do zapisu w tabeli PAL_POZ
_bufsize[3]:=0;

{? var_pres('_a')=type_of(null()) & _a<>null()
|| _tryb:=ref_name(_a)='palety';
   {? _tryb
   || _name:=exec('FindAndGet','#table',PAL,_a,,"name()",'');
      _rok:=exec('FindAndGet','#table',PAL,_a,,"{? AKT='N' || form(AR-2000,-2,0,'99') || 'yp' ?}",'');
      {? _name<>'' & _rok<>''
      || _res.M_PAL:=_name;
         _res.M_POZ:='palet%1'[_rok];
         _bufsize[3]:=exec('FindAndGet','#table',PAL,_a,,
                       "PAL_POZ.cntx_psh();
                        {? AKT='N'
                        || PAL_POZ.use('palet%1'[form(AR-2000,-2,0,'99')])
                        || PAL_POZ.use('paletyp')
                        ?};
                        PAL_POZ.index('PAL');
                        PAL_POZ.prefix(ref());
                        _size:=PAL_POZ.size();
                        PAL_POZ.cntx_pop();
                        _size",0)
      ?}
   || _bufsize[3]:=exec('FindAndGet','#table',PAL,_a,,
                       "_msk:=PAL.name()+1;
                        PAL_POZ.cntx_psh();
                        {? AKT='N'
                        || PAL_POZ.use('pale%1%2'[_msk,form(AR-2000,-2,0,'99')])
                        || PAL_POZ.use('paletyp')
                        ?};
                        PAL_POZ.index('PAL');
                        PAL_POZ.prefix(ref());
                        _size:=PAL_POZ.size();
                        PAL_POZ.cntx_pop();
                        _size",0)
   ?}
?};

{? _tryb=1
||
:: dostępne literki dla maski
   _char:='';
   {! _ii:=48..57  |! _char+=%_ii !};
   {! _ii:=97..122 |! _char+=%_ii !};
   _char:=gsub(_char,'t',''); _char:=gsub(_char,'y','');

   _max:='';
   _msk:=PAL.names();
   {? _msk.first()
   || {!
      |? _ch:=_msk.NAME+1;
         {? _ch<>'_' & _ch<>'y' & (%_ch)>(%_max) || _max:=_ch ?};
         _msk.next()
      !}
   ?};
   _wsk:={? _max='' || 0 || _char*_max ?};
   {? ~_wsk
   || _ch:='0'
   || _ch:=1+(_wsk-_char)
   ?}
|| _ch:='y';
   _max:='y'
?};

:: sprawdzenie czy zapisy zmieszczą się w starej masce
{? _max<>''
||
:: Korzystam z obliczeń [WH] zastosowanych dla archiwizacji procesów
   _filesize:=28*1024*1024*1024;
:: póki co 30 mln
   _rec_max:=30000000;
:: Dopełniamy maski do 60% - 40% zostaje wolnego na poczet przyszłych transferów i rozrostu tabel
   _free_proc:=40;

   _m_pal:='%1%2'[(5+_res.M_PAL),_max];
   _m_poz:='%1%2%3'[4+_res.M_POZ,{? _max<>'y' || _max || 't' ?},_res.M_POZ+2];

   _form:="_tab:=_a;
           _left:=0;
           _tab.cntx_psh();
           _tab.use(_b);
           _tab.prefix();
           _size:=_tab.size();
           _max_recs:=floor(_c/_f);
           _max_recs:=exec('min','#math',_max_recs,_d);
           _left:=_max_recs-_size;
           _left:=exec('max','#math',0,_left);
           _left:=_left-(_max_recs*_e/100);
           _left:=floor(_left);
           _left:=exec('max','#math',0,_left);
           _tab.cntx_pop();
           _left";
   {? _form(PAL,_m_pal,_filesize,_rec_max,_free_proc,_bufsize[1])>=1
   || {? _form(PAL_POZ,_m_poz,_filesize,_rec_max,_free_proc,_bufsize[2])>=_bufsize[3]
      || _ch:=_max
      ?}
   ?}
?};

obj_del(_bufsize);
_res.M_PAL:='%1%2'[(5+_res.M_PAL),_ch];
_res.M_POZ:='%1%2%3'[4+_res.M_POZ,{? _ch<>'y' || _ch || 't' ?},_res.M_POZ+2];
_res


\archiwizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Właściwa funkcja przenosząca paletę do archiwum
::   WE: _a - Wskazanie na paletę PAL.ref()
::       [_b] - 1(domyślnie)-archiwizacja palet, 0-przywrócenie palet
::   WY: 1-udało się 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=0;
_pal:={? var_pres('_a')=type_of(null()) & _a<>null() || _a || null() ?};
_tryb:={? var_pres('_b')=type_of(0) || _b || 1 ?};

PAL.cntx_psh();
PAL_POZ.cntx_psh();
{? _pal<>null()
|| _old:=ref_name(_pal);
   _poz:={? (_old+1)='y' || 't' || (_old+1) ?};
   PAL.use(_old);
   PAL.prefix();
   {? PAL.seek(_pal)
   || {? PAL.AKT='T'
      || PAL.cntx_psh();
         exec('aktdepal','magdok_palety',0,-1,0,1);
         PAL.cntx_pop();
         PAL.get()
      ?};
      _msk:=exec('mask','!lmo_pal_apal',PAL.ref(),_tryb);
      {? _msk.M_PAL<>PAL.name() & PAL.AKT='N'
      || _oki:=0;
         _olduid:=PAL.IDADD;
         _oldref:=PAL.ref();
         _oldsql:=$PAL.ref();
         _newuid:='';
         _newref:=null();
         PAL.get();
         do();
         PAL.cntx_psh();
         PAL.use(_msk.M_PAL);
         PAL.prefix();
         {? PAL.add(1)
         || _oki:=1;
            _newuid:=PAL.IDADD;
            _newref:=PAL.ref();
            _newsql:=$PAL.ref()
         || undo()
         ?};
         PAL.cntx_pop();
         {? _oki
         || {? PAL.AKT='N'
            || PAL_POZ.use('pale%1%2'[_poz,form(PAL.AR-2000,-2,0,'99')])
            || PAL_POZ.use('pale%1yp'[_poz])
            ?};
            PAL_POZ.index('PAL');
            PAL_POZ.prefix(PAL.ref());
            {? PAL_POZ.first()
            || {!
               |? PAL.cntx_psh();
                  PAL_POZ.cntx_psh();
                  PAL.use(_msk.M_PAL);
                  PAL_POZ.use(_msk.M_POZ);
                  PAL_POZ.prefix();
                  PAL_POZ.PAL:=_newref;
                  exec('uzupIDkod','magdok_palety',PAL_POZ);
                  {? ~PAL_POZ.add(1)
                  || _oki:=0;
                     undo()
                  ?};
                  PAL.cntx_pop();
                  PAL_POZ.cntx_pop();
                  _oki & PAL_POZ.del()
               !}
            ?}
         ?};
         {? var_pres('__archakt')>0 & __archakt
         || PAL.cntx_psh();
            PAL.use(_msk.M_PAL);
            PAL.prefix();
            {? PAL.seek(_newref)
            || exec('aktdepal','magdok_palety',1,-1,0,1)
            || undo()
            ?};
            PAL.cntx_pop()
         ?};
::       przepięcie nowych wskazań na paletę w powiązanych tabelach
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',DK_L,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',DK_LI,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',EANP,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',INY,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',PAL_ZAM,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',SL,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepUID','!lmo_pal_apal',TR_ZLM,_olduid,_newuid) ?};
         {? _oki || _oki:=exec('przepRSQL','!lmo_pal_apal',_oldsql,_newsql) ?};
::       poprzepinane i zarchiwizowane
         {? ~_oki
         || undo()
         || {? ~PAL.count() & PAL.del(,1)>0 || _res:=1 || undo() ?}
         ?};
         end()
      ?};
      obj_del(_msk)
   ?}
?};
PAL.cntx_pop();
PAL_POZ.cntx_pop();
_res


\przepUID
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Przepięcie informacji o wpisach dotyczących palety w tabelach
::   WE: _a - tabela
::       _b - stary UID ref
::       _c - nowy UID ref
::   WY: 1-udało się 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_tab:={? var_pres('_a')=type_of(FIRMA) || _a || _res:=0; return(0) ?};

_pal:=null();
_tab.cntx_psh();
PAL.cntx_psh();
{? exec('FindAndGet','#table',PAL,_c,,"name()",'')='palety'
|| PAL.use('palety');
   PAL.prefix();
   _pal:=exec('FindAndGet','#table',PAL,_c,,,null())
?};
_msk:=_tab.names();
_msk.clear();
{? _msk.first()
|| {!
   |? _tab.use(_msk.NAME);
      {? var_pres('PAL',_tab)>0
      || _tab.index('IDPAL');
         _tab.prefix(_b);
         {? _tab.first()
         || {!
            |? _ref:=_tab.ref(); _ok:=_tab.next();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_ref)
               || _tab.PAL:=_pal;
                  _tab.IDPAL:=_c;
                  _res:=_tab.put(1)
               ?};
               _tab.cntx_pop();
               _res & _ok
            !}
         ?}
      ?};
      {? var_pres('PALDO',_tab)>0
      || _tab.index('IDPALD');
         _tab.prefix(_b);
         {? _tab.first()
         || {!
            |? _ref:=_tab.ref(); _ok:=_tab.next();
               _tab.cntx_psh();
               _tab.prefix();
               {? _tab.seek(_ref)
               || _tab.PALDO:=_pal;
                  _tab.IDPALD:=_c;
                  _res:=_tab.put(1)
               ?};
               _tab.cntx_pop();
               _res & _ok
            !}
         ?}
      ?};
      _msk.next()
   !}
?};
_tab.cntx_pop();
PAL.cntx_pop();
_res


\przepRSQL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Przepięcie informacji o PAL_POZ.RSQL
::   WE: _a - stary SQL
::       _b - nowy SQL
::   WY: 1-udało się 0-nie
::----------------------------------------------------------------------------------------------------------------------
_res:=1;
_old:={? var_pres('_a')=type_of('') & (+_a)=16 || _a || _res:=0; return(0) ?};
_new:={? var_pres('_b')=type_of('') & (+_b)=16 || _b || _res:=0; return(0) ?};

PAL.cntx_psh();
PAL_POZ.cntx_psh();
_msk:=PAL_POZ.names();
_msk.clear();
{? _msk.first()
|| {!
   |? _ch:=1+(4-_msk.NAME);
      {? _ch<>'_'
      || {? _ch='t' || PAL.use('palety') || PAL.use('palet%1'[_ch]) ?};
         PAL_POZ.use(_msk.NAME);
         PAL_POZ.index('RSQL');
         PAL_POZ.prefix(_old,);
         {? PAL_POZ.first()
         || {!
            |? _ref:=PAL_POZ.ref(); _ok:=PAL_POZ.next();
               PAL_POZ.cntx_psh();
               PAL_POZ.prefix();
               {? PAL_POZ.seek(_ref)
               || PAL_POZ.RSQL:=_new;
                  _res:=PAL_POZ.put(1)
               ?};
               PAL_POZ.cntx_pop();
               _res & _ok
            !}
         ?}
      ?};
      _msk.next()
   !}
?};
PAL.cntx_pop();
PAL_POZ.cntx_pop();
_res


\PAL_archiwizuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wywołanie akcji przenoszenia do archiwum
::----------------------------------------------------------------------------------------------------------------------
_tab:=PAL.sel_aget();
PAL.sel_adel();

{? _tab.size()
|| _ok:=FUN.ask('Ilość palet do archiwizacji: %1.\n'
                'Operacja może być czasochłonna.\n\nCzy kontynuować?'@[$_tab.size()])
|| _ok:=2
?};
{? _ok=2
|| {? exec('ctrlARCHIV','magdok_palety')
   || _params:=exec('mp_run_a','#b__box');
      _params.ACT_UID:='LMO_PAL_APAL';
      _params.UIDREF:=PAL.uidref();
      _params.AKCJA:='Archiwizuj';
      _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
      exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'PAL',PAL.ref());

      exec('mp_run','#b__box',_params)
   || FUN.info('Paleta %1 jest aktywna (stany magazynowe, dokumenty).\n\n'
               'Aktualnie przeniesienie do archiwum niemożliwe.'@[PAL.KODK])
   ?}
|? _ok=1
|| exec('ini_kom','#message','Archiwizacja palet'@);
   KOMM.init(250,,'Archiwizacja palet - menedżer procesów');
   PAL.cntx_psh();
   _tab.clear();
   {? _tab.first()
   || {!
      |? {? (PAL.clear(); PAL.seek(_tab.REF,))
         || {? exec('ctrlARCHIV','magdok_palety')
            || _params:=exec('mp_run_a','#b__box');
               _params.ACT_UID:='LMO_PAL_APAL';
               _params.UIDREF:=PAL.uidref();
               _params.GRUPA:='T';
               _params.AKCJA:='Archiwizuj';
               _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
               exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'PAL',PAL.ref());

               exec('mp_run','#b__box',_params);
               obj_del(_params)
            || exec('add_kom','#message'
                 ,'Palety %1 niezarchiwizowano - jest aktywna (stany magazynowe, dokumenty).'@[PAL.KODK]
                 ,2,'Archiwizacja palet'@,__lp+=1)
            ?}
         ?};
         _tab.next()
      !}
   ?};
   PAL.cntx_pop();
   exec('end_kom','#message');
   KOMM.select()
?};
obj_del(_tab)


\PAL_przywroc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [rr] [17.00]
:: OPIS: Wywołanie akcji przenoszenia z archiwum
::----------------------------------------------------------------------------------------------------------------------
_tab:=PAL.sel_aget();
PAL.sel_adel();

VAR_DEL.delete('__archakt');
__archakt:=0;
{? _tab.size()
|| _ok:=FUN.choice('Ilość palet do przeniesienia z archiwum: %1.\n'
                   'Operacja może być czasochłonna.\n\nCzy przywrócić palety jako:'@[$_tab.size()]
                  ,,'Aktywne'@,'Nieaktywne'@);
   {? _ok=2 || _ok:=1 |? _ok=1 || __archakt:=1 ?}
|| _ok:=FUN.choice('Czy przywrócić daną paletę jako:'@,,'Aktywną'@,'Nieaktywną'@);
   {? _ok=1 || __archakt:=1; _ok:=2 ?}
?};
{? _ok=2
|| _params:=exec('mp_run_a','#b__box');
   _params.ACT_UID:='LMO_PAL_APAL';
   _params.UIDREF:=PAL.uidref();
   _params.AKCJA:='Przywróć';
   _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
   exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'PAL',PAL.ref());

   exec('mp_run','#b__box',_params)
|? _ok=1
|| exec('ini_kom','#message','Przywrócenie palet'@);
   KOMM.init(250,,'Przywrócenie z archiwum palet - menedżer procesów');
   PAL.cntx_psh();
   _tab.clear();
   {? _tab.first()
   || {!
      |? {? (PAL.clear(); PAL.seek(_tab.REF,))
         || _params:=exec('mp_run_a','#b__box');
            _params.ACT_UID:='LMO_PAL_APAL';
            _params.UIDREF:=PAL.uidref();
            _params.GRUPA:='T';
            _params.AKCJA:='Przywróć';
            _params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
            exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'PAL',PAL.ref());

            exec('mp_run','#b__box',_params);
            obj_del(_params)
         ?};
         _tab.next()
      !}
   ?};
   PAL.cntx_pop();
   exec('end_kom','#message');
   KOMM.select()
?};
obj_del(_tab);
VAR_DEL.delete('__archakt');
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:37 88e6d59ced7135d70e472b93769522f1aeb26525e88d76e260fa9281e0c4a35fb5fc556ed2198202d503d9405084b6f48a884c394c55769c814cfa72d1235b7688766ba844c9f8b42c9a011aa789e4b9c4a8512aaa83bd034274882e780b1b7f01c04bb5cf0af15e4e505f1e1aafff945fc48290fb0757bd740d77b9b50c23c5
