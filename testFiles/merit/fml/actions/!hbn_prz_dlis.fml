:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !hbn_prz_dlis.fml
:: Utworzony: 06.06.2016
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności HBN_PRZ_DLIS - Utw. przelewów do listy płac
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewów do listy płac - główna formuła czynności.
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE, symbol=O, type=_O, name=Wskazanie listy płac, required=T, keyref=T
::
::# kind=WEW, symbol=P_ZLEC,  type=DATE,   name=Data zlecenia, required=N, keyref=N
::# kind=WEW, symbol=P_DATA,  type=DATE,   name=Data przelewu, required=N, keyref=N
::# kind=WEW, symbol=P_TYTUL, type=STRING, name=Tytuł przelewu, required=N, keyref=N
::# kind=WEW, symbol=P_PROC,  type=NUMBER, name=Procent wypłaty do przekazania, required=N, keyref=N
::# kind=WEW, symbol=P_WYPL,  type=NUMBER, name=Procent wypłaty już wypłacony, required=N, keyref=N
::# kind=WEW, symbol=P_GIODO, type=STRING, name=Przekazanie danych osobowych, required=N, keyref=N
::
::# kind=WY, symbol=O,   type=_O,     name=Wskazanie listy płac, required=N, keyref=N
::# kind=WY, symbol=SID, type=STRING, name=Sufiks identyfikatora przelewów, required=N, keyref=N
::
::# permissions=F_ZATR,UD_SKL,HRB,HRP,FJKS

_par:=params_get();
params_set(_par);

_mp:=_par.mp;
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;

_id:=exec('ref2uid','#table',_in.O);
_result:='';

{? _id=''
|| _result:=exec('error','!hbn_prz_dlis')

|| _mp.keyRef(_id,0,0);
   _cntx:=exec('init','!hbn_prz_dlis',_in,_int,_out,params_exec('title','!hbn_prz_dlis'));
:  działania zależnie od decyzji podjętych w init
   {? _cntx.AKCJA='ESC'
   || {? _mp.isMicro()
      || _mp.cancel()
      || _mp.keep()
      ?}

   |? _cntx.AKCJA='OK' & ~_mp.isMicro()
   || _int.P_ZLEC:=_cntx.P_ZLEC;
      _int.P_DATA:=_cntx.P_DATA;
      _int.P_TYTUL:=_cntx.P_TYTUL;
      _int.P_PROC:=_cntx.P_PROC;
      _int.P_WYPL:=_cntx.P_WYPL;
      _int.P_GIODO:=_cntx.P_GIODO;
      _mp.save(_int)

   || _value:=exec('send','!hbn_prz_dlis',_cntx);
      {? type_of(_value)=type_of(0)
      || _mp.save(,_out);
         {? _mp.isMicro()
         || _mp.cancel()
         || _mp.done()
         ?}
      || _result:=_value
      ?}
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Utw. przelewów do listy płac - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_desc:='Przelewy z listy płac'@@;

SEEK.O:=_in.O;
{? SEEK.O<>null
|| _desc:='Przelewy z listy płac %1'@@[(~-SEEK.O().LT)]
?};

_desc


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu.
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Utworzenie przelewów z listy płac niemożliwe.'@


\init
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywróć zapamiętane wartości parametrów raportu.
::   WE: _a [ARRAY] - tablica parametrów wejściowych czynności
::       _b [ARRAY] - tablica parametrów wewnętrznych czynności
::       _c [ARRAY] - tablica parametrów wyjściowych czynności
::       _d [STRING] - tytuł okienka wyboru rachunków
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_int:=_b;
_out:=_c;
_tytul:=_d;

SEEK.O:=_in.O;
SEEK.O();

_data:=date(O.R,O.M,0);

{? O.D<>date(0,0,0) || _przelew_data:=O.D || _przelew_data:=_data ?};

_out.O:=_in.O;
_out.SID:=(8+$_data)+O.T().T;

exec('czytaj','#stalesys',_data,KST_PAR);

exec('__F_ZATR','object');
exec('wybierz','lista_plac',O.ref());

_skid_rbk:=null;
: Wskaż rachunek, z którego realizowany będzie przelew
{? exec('rachunki_banki','rachunki',_tytul)
|| _skid_rbk:=SKID_RBK.ref()
?};

: Ustal parametry przelewów
{? type_of(_int.P_ZLEC)=type_of(PAR_WYDR.P_ZLEC)
|| PAR_WYDR.P_ZLEC:=_int.P_ZLEC
|| PAR_WYDR.P_ZLEC:=_przelew_data
?};
{? type_of(_int.P_DATA)=type_of(PAR_WYDR.P_DATA)
|| PAR_WYDR.P_DATA:=_int.P_DATA
|| PAR_WYDR.P_DATA:=_przelew_data
?};
{? type_of(_int.P_TYTUL)=type_of(PAR_WYDR.P_TYTUL)
|| PAR_WYDR.P_TYTUL:=_int.P_TYTUL
|| PAR_WYDR.P_TYTUL:='Płace za '+_data$8
?};
{? type_of(_int.P_PROC)=type_of(PAR_WYDR.P_PROC)
|| PAR_WYDR.P_PROC:=_int.P_PROC
|| PAR_WYDR.P_PROC:=100
?};
{? type_of(_int.P_WYPL)=type_of(PAR_WYDR.P_WYPL)
|| PAR_WYDR.P_WYPL:=_int.P_WYPL
|| PAR_WYDR.P_WYPL:=0
?};
{? type_of(_int.P_GIODO)=type_of(PAR_WYDR.P_GIODO)
|| PAR_WYDR.P_GIODO:=_int.P_GIODO
|| PAR_WYDR.P_GIODO:='N'
?};

_cntx:=exec('obj_ntab_set','#array',,
:  Zapisz kopie parametrów czynności
   'O',_in.O,
   'P_ZLEC',PAR_WYDR.P_ZLEC,
   'P_DATA',PAR_WYDR.P_DATA,
   'P_TYTUL',PAR_WYDR.P_TYTUL,
   'P_PROC',PAR_WYDR.P_PROC,
   'P_WYPL',PAR_WYDR.P_WYPL,
   'P_NOWE',PAR_WYDR.P_NOWE,
   'P_GIODO',PAR_WYDR.P_GIODO,
   'SKID_RBK',_skid_rbk,
   'AKCJA','OK'
);
params_set('cntx',_cntx);

_fmls:=exec('save_fml_all','#field',PAR_WYDR);
_fset:="
   _state:=0;
   {? PAR_WYDR.P_PROC>100 || PAR_WYDR.P_PROC:=100
   |? PAR_WYDR.P_PROC<0 || PAR_WYDR.P_PROC:=0
   ?};
   {? PAR_WYDR.P_WYPL>100 || PAR_WYDR.P_WYPL:=100
   |? PAR_WYDR.P_WYPL<0 || PAR_WYDR.P_WYPL:=0
   ?};
   {? PAR_WYDR.P_PROC=100 & PAR_WYDR.P_WYPL=0
   || PAR_WYDR.P_NOWE:='N'
   || _state:=1
   ?};
   PAR_WYDR.efld_opt(PAR_WYDR.win_edit('?'),'enable=%1'[$_state],,'P_NOWE')
";
PAR_WYDR.fld_fml('P_PROC','AFTER_EDIT',_fset);
PAR_WYDR.fld_fml('P_WYPL','AFTER_EDIT',_fset);

PAR_WYDR.win_edit('P_DLIS');
PAR_WYDR.hdr_edit('Przelewy z listy płac %1'@[~-O.LT]);
PAR_WYDR.btn_eopt('P_DLIS','DONE','state=%1'[{? params_get().mp.isMicro() || 'grayed' || 'normal' ?}]);
_fset();
{? _skid_rbk<>null & PAR_WYDR.edit("
      {? (_chk:=__CHK.record(PAR_WYDR,,'P_ZLEC','P_DATA','P_TYTUL'))<>''
      || return(_chk)
      ?};
      {? PAR_WYDR.P_PROC>0 & PAR_WYDR.P_WYPL>0
      || FUN.emsg(
            'Jeżeli podano \"Procent wypłaty już wypłacony\",\n'
            'to \"procent wypłaty do przekazania\" jest zbędny.'@
         );
         'P_PROC'
      |? PAR_WYDR.P_PROC<0 | 100<PAR_WYDR.P_PROC
      || FUN.emsg(
            'Nieprawidłowy \"procent wypłaty do przekazania\".\n'
            'Oczekiwana wartość z przedziału od 0 do 100.'@
         );
         'P_PROC'
      |? PAR_WYDR.P_WYPL<0 | 100<=PAR_WYDR.P_WYPL
      || FUN.emsg(
            'Nieprawidłowy \"procent wypłaty już wypłacony\".\n'
            'Oczekiwana wartość z przedziału od 0 do 100.'@
         );
         'P_WYPL'
      || ''
      ?}
   ")
|| _cntx.P_ZLEC:=PAR_WYDR.P_ZLEC;
   _cntx.P_DATA:=PAR_WYDR.P_DATA;
   _cntx.P_TYTUL:=PAR_WYDR.P_TYTUL;
   _cntx.P_PROC:=PAR_WYDR.P_PROC;
   _cntx.P_WYPL:=PAR_WYDR.P_WYPL;
   _cntx.P_NOWE:=PAR_WYDR.P_NOWE;
   _cntx.P_GIODO:=PAR_WYDR.P_GIODO
|| _cntx.AKCJA:='ESC'
?};

exec('restore_fml_all','#field',PAR_WYDR,_fmls);

_cntx


\done
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Zakończ - przejdź do następnego etapu procesu.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().cntx.AKCJA:='DONE';
'key:F2'


\keep
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa akcji Ok - podtrzymaj czynność na liście zadań.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_get().cntx.AKCJA:='OK';
'key:F2'


\send
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przelew z listy płac.
::   WE: _a [ARRAY] - wskazanie tablicy parametrów
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=_a;

PB.cntx_psh();
PB.use('pbxxxx');
PB.clear();
PKO.cntx_psh();
SKID_RBK.cntx_psh();

_epilog:="
   PB.cntx_pop();
   PKO.cntx_pop();
   SKID_RBK.cntx_pop();
   ~~
";

SKID_RBK.prefix();
{? ~SKID_RBK.seek(_par.SKID_RBK)
|| _epilog();
   return('Ustalenie rachunku nie powiodło się.'@)
?};

SEEK.O:=_par.O;
SEEK.O();

: przeglądaj tylko dostępnych współpracowników
exec('filtruj_p','schemat',
   'PPL',
   exec('szukaj_ud_def','schemat',exec('domyslny','schemat','PODZORG'),O.WYDZIAL).REF,
   O.F_ZATR().KOD,,
   'W',,
:  odrzuć pracowników nieuwzględnianych na wskazanej liście płac
   'P.REFERENCE in (select O_P.P from O_P where O_P.O=\''+$_par.O+'\' order by 1)'
);

_LOG:=tab_tmp(,
   'VALID','INTEGER','Poprawny',
   'REF','STRING[16]','Wskazanie'
);
_mdbs:=exec('tab_names','#table',PB);
_loop:=P.f_first();
{!
|? _loop
|! PKO.index('_PKO');
   PKO.prefix(P.OSOBA);
   _loop:=PKO.first();
   {!
   |? _loop
   |! _kwota:=FUNKCJE.L(PKO.R().RN);
      {? PAR_WYDR.P_WYPL>0
      || _kwota:=_kwota-(0.01*_kwota*PAR_WYDR.P_WYPL)$2
      |? PAR_WYDR.P_PROC>0
      || _kwota:=(0.01*_kwota*PAR_WYDR.P_PROC)$2
      ?};
      {? _kwota
      || _kid:='%1/%2/%3'[exec('kbFromO','hbn'),$#P.ref(),$PKO.R().RN];
         _pb:=exec('get_pb_by_id','hbn',_kid,_mdbs);
         {? _par.P_NOWE='T'
         || {? _pb.REF<>null
            || _LOG.VALID:=-1;
               {? type_of(_pb.ALL)>100
               || {! _ni:=1..obj_len(_pb.ALL)
                  |! _LOG.REF:=$_pb.ALL[_ni];
                     _LOG.add()
                  !}
               ?};
               _LOG.add()
            ?};
            _pb.ACTION:='add'
         ?};
         {? _pb.ACTION='none'
:           przelew zablokowany
         || _LOG.VALID:=-1;
            {? type_of(_pb.ALL)>100
            || {! _ni:=1..obj_len(_pb.ALL)
               |! _LOG.REF:=$_pb.ALL[_ni];
                  _LOG.add()
               !}
            ?};
            _LOG.add()

         || {? _pb.ACTION='put'
            || PB.seek(_pb.REF)
            || PB.blank()
            ?};
            exec('ustaw_pb','rachunki','P');
            PB.NR:=0;                     'numer w paczce';
            PB.NBD:=SKID_RBK.BANK;        'bank dłużnika';
            PB.RD:=SKID_RBK.N;            'numer rachunku dłużnika';
                                          'nazwa wierzyciela';
            PB.W:=P.OSOBA().NAZWISKO+' '+OSOBA.PIERWSZE+' '+OSOBA.DRUGIE;
            PB.NBW:=PKO.BA;               'bank wierzyciela';
            {? PB.NBW
            || PB.KRAJ_BAN:=PB.NBW().KODISO;
               PB.SWIFT:=PB.NBW().SWIFT
            ?};
            'numer rachunku wierzyciela';
            PB.RW:=STR.gsub(PKO.N,' ','');

            {? {? ~exec('szukaj','osoba','C')
               || exec('szukaj','osoba','S')
               || 1
               ?}
            || PB.KP:=OS_ADRES.KOD;
               PB.M:=OS_ADRES.MIASTO;
               PB.UL:=exec('ulica','osoba')
            || PB.KP:=PB.M:=PB.UL:=''
            ?};

            PB.DZ:=PAR_WYDR.P_ZLEC;       'data zlecenia';
            PB.DP:=PAR_WYDR.P_DATA;       'data przelewu';
            PB.TYT:=PAR_WYDR.P_TYTUL;
            PB.KW:=_kwota;                'kwota';
            PB.KD:='PPL: Płace';
            PB.PR:='N';                   'Przekazany ?';
            PB.KID:=_kid;
            PB.WAL:=KST_PAR.NAROD;
            PB.RODZ:='K';
            PB.OSOBA:=OSOBA.ref();
            {? {? _pb.ACTION='add'
               || PB.add()
               || PB.put()
               ?}
            || _LOG.VALID:=1;
               _LOG.REF:=$PB.ref();
               _LOG.add()
            ?};
            {? PAR_WYDR.P_GIODO='T'
            || exec('przelew','giodo',PAR_WYDR.P_DATA)
            ?}
         ?};
         obj_del(_pb)
      ?};
      _loop:=PKO.next()
   !};
   _loop:=P.f_next()
!};
P.f_clear();

exec('list','!hbn_prz_dlis',_LOG);

_epilog();
1


\list
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przelew z listy płac.
::   WE: _a [TABLE] - alias tabeli zawierającej informacje o utworzonych/zaktualizowanych/zablokowanych przelewach
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_LOG:=_a;
_LOG.prefix();
{? _LOG.size()=0
|| FUN.info('Nie utworzono żadnego polecenia przelewu wynagrodzenia.'@);
   return()
?};

: zachowaj dla obsługi okien
params_set('LOG',_LOG);

_mode:='maximized';
_grp:=PB.grp_make('Przelewy z listy płac'@,
   "  PB.cntx_psh();
      PB.f_clear();
      PB.clear();
      PB.win_edit('PB_EDI1');
      1
   ",
   'hbn_prz_dlis',,,
   "  PB.cntx_pop();
      PB.sel_adel();
      PB.f_clear();
      1
   "
);

_wnd:=PB.mk_sel(,'P',0,'#hbn_win_dlis',,,,,'U');
PB.win_fld(_wnd,,'W',,,25);
PB.win_fld(_wnd,,'NBW','NB',,40);
PB.win_fld(_wnd,,'RW',,,30);
PB.win_fld(_wnd,,'KW',,,15,2);

_LOG.prefix(-1);
{? _LOG.size()=0
||
:  brak błędów - okienko uproszczone
   PB.grp_sel(_grp,,_wnd,,,,,,
      "  PB.f_set(,,
            'PB.REFERENCE in (select :_a.REF from :_a where :_a.VALID=:_b)',
            params_get().LOG,
            1
         )
      ",,,,
      _mode
   )
||
:  wystąpiły błędy - okienko rozszerzone
   _TAB:=sql('select distinct reference_name(:_a.REF) as MASK from :_a where :_a.VALID=-1',_LOG);
   _loop:=_TAB.first();
   {!
   |? _loop
   |! _title:='Istniejące przelewy (%1)'@[{? _TAB.MASK='pbxxxx' || 'bieżące' || 2-_TAB.MASK ?}];
      PB.grp_sel(_grp,,_wnd,_title,,,,,
         $('PB.use(\''+_TAB.MASK+'\');'
           'PB.clear();'
           'PB.f_set(,,'
           '   \'PB.REFERENCE in (select :_a.REF from :_a where :_a.VALID=:_b)\','
           '   params_get().LOG,'
           '   -1'
           ')'
         ),,,,
         _mode
      );
      _loop:=_TAB.next()
   !};
   PB.grp_sel(_grp,,_wnd,'Przelewy utworzone/zaktualizowane'@,,,,,
      "  PB.use('pbxxxx');
         PB.clear();
         PB.f_set(,,
            'PB.REFERENCE in (select :_a.REF from :_a where :_a.VALID=:_b)',
            params_get().LOG,
            1
         )
      ",,,,
      _mode
   )
?};
PB.win_act(_wnd,,'Formuła','Zakończ'@@,,,"sel_exit()",,,,,,'Z',0,'target=window');
PB.win_act(_wnd,1,'Formuła','Zakończ'@@,,,"sel_exit()",,,,,,'Z',0,'target=window');

PB.cntx_psh();
PB.use('pbxxxx');
PB.win_sel(_grp);
PB.select();
PB.cntx_pop();

: porządki
PB.win_del(_grp);
PB.win_del(_wnd);
~~


\title
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [22.26]
:: OPIS: Utw. przelewów do listy płac - formuła tytułu okienka.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().mp.load(exec('kind_in','#b_port'));
_title:='Przelewy z listy płac'@;

SEEK.O:=_in.O;
{? SEEK.O<>null
|| _title:='Przelewy z listy płac %1'@[(~-SEEK.O().LT)]
?};

_title

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:49 2c7fbca0af3d4e455699beae6a17fa407a7ca544de54fa9b448140dd54fefab81ea038f6a53b64d2e13fd257097015865c451e2202bec9a34b1bf76d40a0b31aeec00d4833d7d81a1edbfc924410e8d339df4bb3091fae4b29904433b38afa01ebdbbcd91b6280fde41800304648844fbeedbb01af9127e4c67d23c515682395
