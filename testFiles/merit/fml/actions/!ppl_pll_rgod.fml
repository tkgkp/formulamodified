:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_pll_rgod.fml
:: Utworzony: 01.02.2016
:: Autor: TMR
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_PLL_RGOD - Rejestracja godzin pracy
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Rejestracja godzin pracy - główna formuła czynności.
::   WE: P [REFERENCE] - Wskazanie na pracownika
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::# parses=exec('parses','!ppl_pll_rgod')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=O, type=_O, name=Wskazanie na listę płac, required=N
::# kind=WE, symbol=R, type=NUMBER, name=Rok, required=N
::# kind=WE, symbol=M, type=NUMBER, name=Miesiąc, required=N
::
::# kind=WEW, symbol=O, type=_O, name=Wskazanie na listę płac, required=N
::# kind=WEW, symbol=R, type=NUMBER, name=Rok, required=N
::# kind=WEW, symbol=M, type=NUMBER, name=Miesiąc, required=N
::
::# kind=WY, symbol=P, type=_P, name=Wskazanie pracownika, required=N
::# kind=WY, symbol=R, type=NUMBER, name=Rok, required=N
::# kind=WY, symbol=M, type=NUMBER, name=Miesiąc, required=N
::
exec('CON','object');

_par:=params_get();
params_set(_par);
_mp:=_par.mp;
_in:=_par.in;
_int:=_par.int;
_out:=_par.out;
_akcja:=_mp.akcja();
exec('ustaw_okno','godziny','PPL_PLL_RGOD');

_result:='';

_uidref:=exec('ref2uid','#table',_in.P);
{? _uidref=''
|| _result:=exec('error','!ppl_pll_rgod')

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _int.O:=VAR.O;
      _int.R:=VAR.O().R;
      _int.M:=VAR.O().M;
      _mp.save(_int);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   ||
      _out.P:=_in.P;
      _out.R:=_int.R;
      _out.M:=_int.M;
      _mp.save(,_out);
      _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select','!ppl_pll_rgod');
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _out.P:=_in.P;
         _out.R:=_int.R;
         _out.M:=_int.M;
         _mp.save(,_out);
         _mp.done();
         _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła ustalająca wartości parametrów sesji.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;

{? var_pres('O',_in)=type_of(null()) & _in.O<>null()
|| _args:=__PARSES.args('ListaPłac');
   _args.REF:=_in.O;
   __PARSES.setVal('ListaPłac',_args)
?};

1


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Formuła opisu zadania.
::   WE:
::   WY: opis czynności na liście zadań
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_int:=_mp.load(exec('kind_internal','#b_port'));
_rok:={? var_pres('R',_int)=type_of(0) || _int.R || 0 ?};
_msc:={? var_pres('M',_int)=type_of(0) || _int.M || 0 ?};
_addInfo:=0;

{? _rok<>0 & _msc<>0 || _addInfo:=1 ?};

_tab:=exec('desc','pracownik',_mp);
{? _tab.ZAW_DANE='T'
|| {? _addInfo
   || {? _tab.OBCY='T'
      || 'Zarejestruj godziny pracy (miesiąc %1/%2): %3 %4: Paszport - %5, Numer teczki - %6, Identyfikator - %7'@@
            [$_rok,(('0'+($_msc))+2),_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
      |? +_tab.PESEL
      || 'Zarejestruj godziny pracy (miesiąc %1/%2): %3 %4: PESEL - %5, Numer teczki - %6, Identyfikator - %7'@@
            [$_rok,(('0'+($_msc))+2),_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
      || 'Zarejestruj godziny pracy (miesiąc %1/%2): %3 %4: Data urodzenia - %5, Numer teczki - %6, Identyfikator - %7'@@
            [$_rok,(('0'+($_msc))+2),_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
      ?}
   || {? _tab.OBCY='T'
      || 'Zarejestruj godziny pracy: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
      |? +_tab.PESEL
      || 'Zarejestruj godziny pracy: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
      || 'Zarejestruj godziny pracy: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
            [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
      ?}
   ?}
|| 'Zarejestruj godziny pracy'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Zwraca treść komunikatu błędu
::   WE: [_a] [STRING] - dodatkowy tekst błędu
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
_result:='Zarejestrowanie godzin pracy nie jest możliwe.';
_text:={? var_pres('_a')=type_of('') || _a || '' ?};
_result+='\n'+_text;
_result


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań.
::   WE: _a [REFERENCE] - Wskazanie pracownika.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::  OLD: \godziny/godziny.fml
::  OLD: \selgodz/godziny.fml
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
_par:=params_get();
_in:=_par.in;
_int:=_par.int;
_mp:=_par.mp;

:: podczytanie wartości z parametrów wewnętrznych
_o_ref:={? var_pres('O',_int)=type_of(null()) || _int.O    || null() ?};
  _rok:={? var_pres('R',_int)=type_of(0)      || _int.R    || 0      ?};
  _msc:={? var_pres('M',_int)=type_of(0)      || _int.M    || 0      ?};

:: podczytanie wartości z parametrów wejściowych, jeżeli czynność nie zachowała parametrów wewnętrznych
_p_ref:={? var_pres('P',_in)=type_of(null()) || _in.P || null() ?};
_o_ref:={? var_pres('O',_in)=type_of(null()) || _in.O || null() ?};

{? _rok=0
|| _rok:={? var_pres('R',_in)=type_of(0) || _in.R || 0 ?}
?};
{? _msc=0
|| _msc:={? var_pres('M',_in)=type_of(0) || _in.M || 0 ?}
?};
_rodzaj:='G';

P.cntx_psh();
P.prefix();
{? _p_ref<>null() & P.seek(_p_ref)
|| F_ZATR.cntx_psh();
   __F_ZATR.push();
   __F_ZATR.mod(P.F_ZATR().KOD);
   OSOBA.cntx_psh();
   P.OSOBA();
   G.cntx_psh();
   R_GODZ.cntx_psh();
   CON_KG.cntx_psh();

:: jeżeli jest wybrana lista płac to ustaw odpowiednio rok i miesiąc
   {? _o_ref<>null()
   || exec('wybierz','lista_plac',_o_ref);
      _rok:=O.R;
      _msc:=O.M
   ?};

   {? _rok=0 | _msc=0
   || _rok_msc:=exec('wybierz_rok_miesiac','daty');
      _rok:=_rok_msc.R;
      _msc:=_rok_msc.M
   ?};

   {? _rok<>0 & _msc<>0
   ||
:: zapisanie parametrów wewnętrznych
      _int.O:=_o_ref;
      _int.R:=_rok;
      _int.M:=_msc;
      _mp.save(_int);

:: otwarcie masek z dla wybranego roku i miesiąca
      {? exec('ustaw_maski','godziny',_rok,_msc)
      ||
         ZMIENNE.RODZAJ:='';
         EDIT_VAR.KOD_DOK:=_rodzaj;
         UD_POM.SKID_MB:=KST_PAR.SKID_MB;

         G.index('MSCDKW');
         G.prefix(P.ref(),_msc,_rodzaj);
         G.win_sel('WER_P');

         params_set(_par);
         _result:=G.select()
      || _result:=exec('error','!ppl_pll_rgod','Błąd otwarcia maski tabeli godzin.')
      ?}
   || _result:=exec('error','!ppl_pll_rgod','Brak wskazanego roku lub miesiąca.')
   ?};
   CON_KG.cntx_pop();
   R_GODZ.cntx_pop();
   G.cntx_pop();
   OSOBA.cntx_pop();
   __F_ZATR.pop();
   F_ZATR.cntx_pop()

|| _result:=exec('error','!ppl_pll_rgod','Nie znaleziono pracownika.')
?};
P.cntx_pop();
_result


\g_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli G.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
G.FIRMA:=G.P().FIRMA;
P.cntx_pop();
1


\g_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz przed dołączeniem wiersza rabeli G.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('g_modb','!ppl_pll_rgod');
1


\g_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz przed poprawieniem wiersza rabeli G.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('g_modb','!ppl_pll_rgod');
1


\g_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::       - po wywołaniu z listy zadań (okno wertowania tabeli G);
::       - w ramach obszaru roboczego (okno wertowania tabeli G jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=G
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\g_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Obsługa akcji "Po odświeżeniu" okna WER tabeli KORN w grupie. Ustawia akcje i przyciski.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ag:={? exec('is_g_lt_writable','!ppl_pll_rgod',G.ref(),0) || '' || 'PU' ?};
_par:=params_get();
{? var_pres('_par')>100 &
   var_pres('cfg',_par)>100 &
   var_pres('done',_par.cfg)>100 &
   var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
|| _ag+=_par.cfg.done.noempty+':'+_par.cfg.done.empty
?};
G.actions_grayed('WER',_ag);
~~


\is_g_lt_writable
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Sprawdza czy lista przypisana do godzin ma status otwarty
::   WE: _a - [REFERENCE]  - wskazanie na G
::       _b - [INTEGER]    - czy wyświetlać komunikat?
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(null) || _a || return(0) ?};
_msg:={? var_pres('_b')=type_of(0)    || _b || 1         ?};

_result:=1;

G.cntx_psh();
G.prefix();
{? G.seek(_ref)
|| _result:=exec('o_writable','lista_plac',G.LT,0)
?};
G.cntx_pop();

{? _msg & _result=0
|| FUN.info('Lista płac jest zamknięta.\nModyfikacja godzin nie jest możliwa.'@)
?};

_result


\ustaw_oborg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2006]
:: OPIS: Po redakcji pola G.D.
::       Podpowiedz dla pol wymiarow
::  OLD: \ustaw_oborg/kontrol.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? fld()<P.DZA
|| FUN.info('Data dla godzin nie może być wcześniejsza\nod daty: %1 - zatrudnienia pracownika.'@[$P.DZA]);
   return(0)
?};
exec('g_efld_opt','godziny',,,G.win_edit('?'),'D');
{? KST.PROJZAKR='Nie dotyczy' & G.PROJEKTY || G.KK:=G.PROJEKTY:=null() ?};
{? cur_tab(1,1).name()='godz????'
|| {? G.win_edit('?')='REDC'
   || CON.ustaw(KST_PAR.SKID_MB);
      exec('ustaw_conkg','godziny',P.ref(),fld(),KST_PAR.SKID_MB);
      win_disp()
   ?}
|| CON.ustaw(UD_POM.SKID_MB);
   exec('ustaw_conkg','godziny',P.ref(),fld(),UD_POM.SKID_MB);
   win_disp()
?};
1


\g_lt_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GZ [2010]
:: OPIS: Przed edycja symbolu listy plac
::  OLD: \spr_lt/kart_pla.fml
::----------------------------------------------------------------------------------------------------------------------
fld<>'< ---- >'


\skl_okr_g_kw_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [2011]
:: OPIS: Przed wyswietleniem pola G_KW w zmiennej SKL_OKR
::  OLD: \prz_rzg/roz_godz.fml
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_akcja:={? var_pres('_par')>0 & var_pres('akcja',_par)>0 || _par.akcja || '' ?};

_kw:=0;
R_GODZ.cntx_psh();
R_GODZ.index('R_GODZ');
R_GODZ.prefix(G.ref());
{? _akcja<>'dołącz' & R_GODZ.first()
|| {!
   |? _kw+=R_GODZ.KW;
      R_GODZ.next()
   !}
?};
R_GODZ.cntx_pop();
SKL_OKR.G_KW:=_kw;
1


\r_godz_kw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Po redagowaniu dla pola Kwota
::----------------------------------------------------------------------------------------------------------------------
__CHK.record(R_GODZ,,'KW')=''


\r_godz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TMR [17.00]
:: OPIS: Rekord po dla tabeli R_GODZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_result:=1;
_jest:=0;
_ref:=null();
{? 1+menu_txt='P'
|| _ref:=R_GODZ.ref()
?};

{? R_GODZ.G().RH
|| R_GODZ.LT:=R_GODZ.G().LT
?};

R_GODZ.cntx_psh();
R_GODZ.index('R_GODZ');
R_GODZ.prefix(R_GODZ.G,R_GODZ.R,R_GODZ.LT,R_GODZ.RN);
{? R_GODZ.first()
|| {!
   |? _jest:=(R_GODZ.ref()<>_ref);
      ~_jest & R_GODZ.next()
   !}
?};
R_GODZ.cntx_pop();

{? _jest
|| FUN.emsg('Istnieje już zapis rozliczenia z rodzajem "%1" oraz wskazaną listą płac'@[R_GODZ.R]);
   _result:=0
?};
_result

:Sign Version 2.0 jowisz:1048 2021/04/09 15:19:40 d5004b67ab65109ca8a3c8fa4e57cae4ddc6f69527c695a6cb12d8787c95d7cd71056f3e0ccf3f466f73f6b4cf1aee37f222ae5818bd0b9d2e466b1e13f3fc21b6cad92cafab94c3033a9ae1337345366611c30d3d996817ab903bd4f8a5a9f23d65443d619bb2e389673d560b4538c76fafaab77f3dac11fe671a09995587ba
