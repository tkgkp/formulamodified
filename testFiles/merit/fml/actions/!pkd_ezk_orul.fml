:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_orul.fml
:: Utworzony: 24.02.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_ORUL - Rej. umów lojalnościowych.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rej. umów lojalnościowych - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_akcja:=_mp.akcja();

_result:='';

_uidref:=exec('ref2uid','#table',_in.P);
{? _uidref=''
|| _result:=exec('error','!pkd_ezk_orul')

|? _mp.isMicro()
|| {? _akcja='START'
::    Wejście do okienka w ramach obszaru roboczego - uruchomienie procesu i pozostawienie go na liście zadań.
   || _mp.keyRef(_uidref);
      _mp.keep()

   |? _akcja='STOP'
::    Wyjście z okienka w ramach obszaru roboczego - anulowanie procesu.
   || _mp.delRef(_uidref);
      _mp.cancel()

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}

|| {? _akcja='ZAKOŃCZ'
   || _mp.done()

   |? _mp.pathTodo()
   || _value:=exec('select','!pkd_ezk_orul',_in.P);
      {? type_of(_value)=type_of('')
      || _result:=_value
      |? _value
      || _mp.done()
      || _mp.keep()
      ?}
   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rej. umów lojalnościowych - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj umowy lojalnościowe: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zarejestruj umowy lojalnościowe: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zarejestruj umowy lojalnościowe: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zarejestruj umowy lojalnościowe'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Rejestrowanie umów lojalnościowych niemożliwe.\nNie znaleziono pracownika.'


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań
::   WE: _a - Wskazanie pracownika.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::  OLD: \wern/umloj.fml - Zmiana obsługi.
::  OLD: \ulnar/umloj.fml - Zmiana obsługi.
::  OLD: \ulpbs/umloj.fml - Zmiana obsługi.
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
P.prefix();
{? type_of(_a)=type_of(null()) & _a<>null() & P.seek(_a)
|| OSOBA.cntx_psh();
   P.OSOBA();
   UMLOJN.cntx_psh();
   UMLOJN.index('DTU');
   UMLOJN.prefix(P.ref());
   UMLOJN.win_sel({? exec('dest','f_zatr',P.F_ZATR,'KOD')='Z' || 'WER_Z' || 'WER_P' ?});
   UMLOJN.win_edit('RED');
   UMLOJN.win_fml('WER',,'DTU',,'ICON_BEFORE',"exec('x_zalacz_icon','zalacz')");
   _ret:=UMLOJN.select();
   UMLOJN.cntx_pop();
   OSOBA.cntx_pop()
|| _ret:=exec('error','!pkd_ezk_orul')
?};
P.cntx_pop();
_ret


\umlojn_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli UMLOJN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('umlojn_modb','!pkd_ezk_orul',1);


:: Aktualizacja kwoty spłaty.
:: Chirurgiczna aktualizacja w wyzwalaczach UMLOJP byłaby bardziej elegancka, ale mniej podatna na błędy.
:: Przeliczanie przy każdym Popraw (wywoływanym również z wspomnianych wyzwalaczy) nie pozwoli na rozsynchronizowanie
:: sumatora (ręczne zmiany UMLOJN.POZOST).
   _splata:=0;
   UMLOJP.cntx_psh();
   UMLOJP.index('DT');
   UMLOJP.prefix(UMLOJN.ref());
   {? UMLOJP.first()
   || {!
      |? _splata+=UMLOJP.KW;
         UMLOJP.next()
      !}
   ?};
   UMLOJP.cntx_pop();
   UMLOJN.SPLATA:=_splata;
   UMLOJN.POZOST:=UMLOJN.KW-UMLOJN.SPLATA;
   {? UMLOJN.POZOST<0
   || undo(
         'Umowa lojalnościowa: spłata większa niż zadłużenie.\n%1\n%2 | %3 | %4 | %5'@
         [exec('record','#to_string',UMLOJN.P),$UMLOJN.ref(),UMLOJN.NU,UMLOJN.DTU$1,UMLOJN.DTP$1]
      );
      0
   || 1
   ?}


\umlojn_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli UMLOJN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','#table',ZALACZ,'NAG',UMLOJN.uidref())


\umlojn_x_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Przed redagowaniem wybranych pól tabeli UMLOJN.
::   WE:
::   WY:
::  OLD: \uln_nu_be/umloj.fml
::  OLD: \uln_dtu_be/umloj.fml
::  OLD: \uln_dtp_be/umloj.fml
::  OLD: \uln_okres_be/umloj.fml
::  OLD: \uln_kw_be/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('umlojn_stan','lista_licz')=''


\umlojn_kw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Po redagowaniu pola UMLOJN.KW .
::   WE:
::   WY:
::  OLD: \uln_kw_ae/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
UMLOJN.POZOST:=UMLOJN.KW;
1


\umlojn_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli UMLOJN.
::   WE:
::   WY:
::  OLD: \uln_pb/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
_stan:=exec('umlojn_stan','lista_licz');
{? _stan='Z'
|| FUN.info('Umowa zakończona.\nMożliwa jedynie zmiana opisu.'@)
|? _stan<>''
|| FUN.info('Umowa w trakcie realizacji.\nMożliwa jedynie zmiana opisu.'@)
?};
:: Ustawianie właściwości pól (w zależności od typu umowy):
exec('umlojn_efld_opt','!pkd_ezk_orul','*',UMLOJN,'RED');
1


\umlojn_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsługa akcji "Usuń - przed" dla tabeli UMLOJN.
::   WE:
::   WY:
::  OLD: \uln_ub/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMLOJN.TYP='Z'
|| return(1)
:: Zachowanie dotychczasowego działania dla umów lojalnościowych:
|| _stan:=exec('umlojn_stan','lista_licz');
   {? _stan=''
   || return(1)
   |? _stan='Z'
   || FUN.emsg('Umowa zakończona.\nUsunięcie niemożliwe.'@);
      return(0)
   || FUN.emsg('Umowa w trakcie realizacji.\nUsunięcie niemożliwe.'@);
      return(0)
   ?}
?}


\umlojn_rozliczenie_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rozliczenie - przed" dla tabeli UMLOJN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UMLOJP.cntx_psh();
UMLOJP.index('RODZAJ');
UMLOJP.prefix(UMLOJN.ref());
UMLOJP.index('DT');
UMLOJP.prefix(UMLOJN.ref());
UMLOJP.win_edit('RED');
UMLOJP.win_sel('WER');
UMLOJP.select();
UMLOJP.cntx_pop();
~~


\umlojn_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli UMLOJN z doklejonym oknem redagowania tabeli P);
::          - w ramach obszaru roboczego (okno wertowania tabeli UMLOJN jako składowa okna grupowego tabeli P).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=UMLOJN
|| sel_exit()

|| params_set(params_get());
   exec('pkd_run','pkd','ZAKOŃCZ')
?}


\umlojn_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli UMLOJN.
::   WE:
::   WY:
::  OLD: \ulnae/umloj.fml
::  OLD: \uln_okres_ae/umloj.fml
::  OLD: \uln_kw_ae/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
{? UMLOJN.TYP='Z'
|| exec('umlojn_modb','!pkd_ezk_orul',-menu_txt()='popraw')
:: Zachowanie dotychczasowego działania dla umów lojalnościowych:
|| {? (_chk:=__CHK.record(UMLOJN,,'DTU','NU','DTP','OKRES','KW'))<>''
   || return(_chk)
   |? UMLOJN.OKRES<0
   || return(__CHK.err_fld(UMLOJN,'OKRES',1,'Wartość nie może być ujemna.'@))
   |? UMLOJN.KW<0
   || return(__CHK.err_fld(UMLOJN,'KW',1,'Wartość nie może być ujemna.'@))
   |? UMLOJN.DTU<P.DZA
   || FUN.emsg('"%1" nie może być wcześniejsza niż data zatrudnienia pracownika (%2).'@ [MS.name(UMLOJN,'DTU'),P.DZA$1]);
      UMLOJN.DTU:=P.DZA;
      return('DTU')
   |? UMLOJN.DTU>UMLOJN.DTP
   || FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(UMLOJN,'DTP'),MS.name(UMLOJN,'DTU')]);
      return('DTP')
   ?};

   {? P.DZ<>date(0,0,0)
   || _zo:=UMLOJN.DTP~1*12+UMLOJN.DTP~2+UMLOJN.OKRES-1;
      _dz:=date(_zo%12,_zo%*12,1);
      {? P.DZ<_dz &
         FUN.ask(
            'Miesiąc zakończenia umowy lojalnościowej (%1)\n'
            'wypada po dacie zakończenia umowy o pracę (%2).\n'
            'Czy akceptujesz warunki umowy lojalnościowej?'@ [_dz$8,P.DZ$1])=0
      || return('OKRES')
      ?}
   ?};
: Z uwagi na sposób wyliczania i zaokrąglania raty całkowita wartość nie może być mniejsza niż liczba
: miesięcy spłaty.
   {? UMLOJN.KW<UMLOJN.OKRES
   || FUN.emsg(
         'Kwota miesięcznego zobowiązania nie może być mniejsza niż 1 PLN.\nZwiększ "%1" lub zmniejsz "%2".'@
         [MS.name(UMLOJN,'KW'),MS.name(UMLOJN,'OKRES')]
      );
      return('OKRES')
   ?};
   return('')
?}


\umlojp_moda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po modyfikacji rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - po" i "Popraw - po" dla tabeli UMLOJP.
::   WE: _a [REFERENCE] - Wskazanie rekordu tabeli UMLOJN.
::   WY: ~~
::  OLD: \ulp_db/umloj.fml - Zmiana sposobu obsługi.
::  OLD: \ulp_pb/umloj.fml - Zmiana sposobu obsługi.
::  OLD: \ulp_ub/umloj.fml - Zmiana sposobu obsługi.
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')<>type_of(null()) | ref_tab(_a)<>UMLOJN
|| undo();
   return()
?};
UMLOJN.cntx_psh();
UMLOJN.clear();
{? UMLOJN.seek(_a)
|| UMLOJN.put()
?};
UMLOJN.cntx_pop();
UMLOJN.get();
~~


\umlojp_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli UMLOJP.
::   WE: _a [INTEGER] - Wynik operacji usuwania, przekazywany przez narzędzia.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

exec('umlojp_moda','!pkd_ezk_orul',UMLOJP.UMLOJN);
~~


\umlojp_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli UMLOJP.
::   WE: _a [INTEGER] - Wynik operacji usuwania, przekazywany przez narzędzia.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? UMLOJP.UMLOJN<>bfld('UMLOJN')
|| exec('umlojp_moda','!pkd_ezk_orul',bfld('UMLOJN'))
?};
exec('umlojp_moda','!pkd_ezk_orul',UMLOJP.UMLOJN);
~~


\umlojp_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli UMLOJP.
::   WE: _a [INTEGER] - Wynik operacji usuwania, przekazywany przez narzędzia.
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

exec('umlojp_moda','!pkd_ezk_orul',bfld('UMLOJN'));
~~


\umlojp_umlojn_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Wartość początkowa pola UMLOJP.UMLOJN.
::   WE:
::   WY:
::  OLD: \ulp_umlojn_bl/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
UMLOJN.ref()


\umlojp_kw_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Wartość początkowa pola UMLOJP.KW.
::   WE:
::   WY:
::  OLD: \ulp_kw_bl/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
exec('umlojn_rata','lista_licz')


\umlojp_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsługa akcji "Rekord - przed" dla tabeli UMLOJP.
::   WE:
::   WY: 0
::  OLD: \ulpbd/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
_stan:=exec('umlojn_stan','lista_licz');
_ga:={? _stan='Z' || 'D' || '' ?}+{? UMLOJP.RODZAJ='A' || 'P' || '' ?};
UMLOJP.actions_grayed('WER',_ga);
0


\umlojp_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Usuń - przed" dla tabeli UMLOJP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_stan:=exec('umlojn_stan','lista_licz');
_txt:='';
{? _stan='Z'
|| _txt+='Umowa jest już całkowicie spłacona.\n'@
?};
{? UMLOJP.RODZAJ='A'
|| _txt+='Bieżący zapis powstał automatycznie.\n'@
?};
{? FUN.ask(_txt+'Czy usunąć bieżący wiersz?'@)
|| UMLOJP.del()
?}


\umlojp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [12.30]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli UMLOJP.
::   WE:
::   WY:
::  OLD: \ulpae/umloj.fml
::----------------------------------------------------------------------------------------------------------------------
_put:=-menu_txt()='popraw';

_chk:=__CHK.table(UMLOJP,_put,,'DT','KW');
{? type_of(_chk)<>type_of(0) | ~_chk
|| return(_chk)
?};

{? UMLOJP.DT<UMLOJN.DTP
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(UMLOJP,'DT'),MS.name(UMLOJN,'DTP')]);
   return('DT')
?};
{? UMLOJP.KW<=0
|| return(__CHK.err_fld(UMLOJP,'KW',1,'Dozwolone wartości nieujemne.'@))
?};

_kwb:=0;
{? _put
|| UMLOJP.cntx_psh();
   {? UMLOJP.get()
   || _kwb:=UMLOJP.KW
   ?};
   UMLOJP.cntx_pop()
?};

{? UMLOJN.POZOST+_kwb<UMLOJP.KW
|| UMLOJP.KW:=UMLOJN.POZOST+_kwb;
   return(__CHK.err_fld(UMLOJP,'KW',1,'Spłata przekracza zadłużenie'@))
?};
''


\umlojn_zalaczniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [19.42]
:: OPIS: Obsługa akcji "Załączniki - przed" w oknach tabeli UMLOJN.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('show_zalacz','zalacz','P','UMLOJN',exec('chk_role','#b__box',OPERATOR.USER,'PKD_EZK_ORUL'))


\umlojn_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła na "Rekord przed" tabeli UMLOJN
::   WE: _a [NUMBER] - 0/1, czy rekord, dla którego wywołana jest formuła, jest ostatnim odrysowywanym?
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
POLA_GRP.TXT_1:={? UMLOJN.TYP='L'
                || 'Umowa lojalnościowa'
                |? UMLOJN.TYP='Z'
                || 'Umowa o zakazie konkurencji'
                || ''
                ?};
{? _a
|| _par:=params_get();
   {? var_pres('_par')>100 &
      var_pres('cfg',_par)>100 &
      var_pres('done',_par.cfg)>100 &
      var_pres('noempty',_par.cfg.done)=type_of('') & var_pres('empty',_par.cfg.done)=type_of('')
   || _hid:=_par.cfg.done.noempty+':'+_par.cfg.done.empty
   || _hid:=''
   ?};
   _hid:={? UMLOJN.TYP='Z' || 'R' || '' ?}+_hid;

   UMLOJN.actions_grayed('WER',_hid)
?};

0


\umlojn_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Wyzwalacz "Dołącz przed" tabeli UMLOJN
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('umlojn_modb','!pkd_ezk_orul',0)


\umlojn_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Sprawdza wypełnienie wymaganych pól w tabeli UMLOJN.
::       Wykorzystywana w wyzwalaczach "Dołącz - przed" i "Popraw - przed" oraz akcji "Rekord - po".
::   WE: [_a] [NUMBER] - Specyfikacja testu:
::             0 - Dołącz [domyślnie];
::             1 - Popraw
::----------------------------------------------------------------------------------------------------------------------
_put:=var_pres('_a')=type_of(0) & _a;
{? UMLOJN.TYP='Z'
|| exec('blank','#field',UMLOJN,1,'DTP');
   exec('blank','#field',UMLOJN,1,'KW');
   exec('blank','#field',UMLOJN,1,'POZOST');
   exec('blank','#field',UMLOJN,1,'OKRES');
   __CHK.validate(UMLOJN,
   $("_a.table(_b,"+$_put+",,'NU','DTU')"),
   "1")
:: Zachowanie dotychczasowego działania dla umów lojalnościowych:
|| exec('blank','#field',UMLOJN,,'PO');
   return(1)
?}


\umlojn_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Obsługa akcji "Dołącz"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
UMLOJN.blank();
:: Ustawianie właściwości pól (w zależności od typu umowy):
exec('umlojn_efld_opt','!pkd_ezk_orul','*',UMLOJN,'RED')


\umlojn_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli UMLOJN. Formuła wywoływana jest
::       w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::       Formuła na podstawie: \p_info_efld_opt/!pkd_dos_prdu.fml
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(UMLOJN)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='TYP'
|| _val:=(UMLOJN.TYP='Z');
   _TAB.efld_opt(_we,'enable=%1'[$_val],UMLOJN,'PO');
   _TAB.efld_opt(_we,'enable=%1,mark=%1'[$(~_val)],UMLOJN,'DTP');
   _TAB.efld_opt(_we,'enable=%1,mark=%1'[$(~_val)],UMLOJN,'OKRES');
   _TAB.efld_opt(_we,'enable=%1,mark=%1'[$(~_val)],UMLOJN,'KW');
   _TAB.efld_opt(_we,'enable=%1'[$(~_val)],UMLOJN,'POZOST');
   _TAB.efld_opt(_we,'enable=%1'[$_val],UMLOJN,'DTZ')
?};

1


\umlojn_typ_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Po redagowaniu pola "typ".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('umlojn_efld_opt','!pkd_ezk_orul')


:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:17 210f216f7bbfccf5db54965c55b96c3f9f6ad41a92a114a1f8c72d5d5f5b3dc515f47b4f02932da46c7674a0ec9ebc9a5e43f54d62139c9e06485e1d97f6d8f986361a3529133cf509566c62b3d03e41c987560d3a21160c6250315f4ceeff48c72113c6924a2906a939264bd2cbc779dbca8ed4a7e9e54bafc7575a8eba1a9e
