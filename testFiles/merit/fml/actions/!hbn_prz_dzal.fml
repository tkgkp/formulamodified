:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !hbn_prz_dzal.fml
:: Utworzony: 16.06.2016
:: Autor: PJ
::======================================================================================================================
:: Zawartość: Formuły czynności HBN_PRZ_DZAL - Utw. przelewu do zaliczki
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Utw. przelewu do zaliczki - główna formuła czynności HBN_PRZ_DZAL.
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE,   symbol=EZAL,  type=_EZAL,  name=Wskazanie na zaliczkę,  required=T, keyref=T
::# kind=WY,   symbol=PB,   type=_PB,   name=Wskazanie na przelew elektroniczny,  required=T
::# kind=WY,   symbol=KW,   type=NUMBER,   name=Kwota przelewu,  required=N
::# kind=WY,   symbol=WAL,  type=STRING,   name=Waluta przelewu,  required=N
::# permissions=FJKS,HRB,HRP
::# parses=exec('parses_dok','dok_fks')
::# access=exec('uprawnienia','!hbn_prz_dzal')
_par:=params_get();
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_akcja:=-_mp.akcja();

exec('init','obg');
_pb:=null;

{? _mp.pathTodo()
|| {? var_pres('EZAL',_in) & type_of(_in.EZAL)=type_of(null) & _in.EZAL<>null
   || PB.use('pbxxxx'); PB.index('PB'); PB.prefix(); PBHIST.use('phxxxx');
      PB_OP.use('popxxxx'); PB_OP.index('SYM'); PB_OP.prefix();
      EZAL.cntx_psh(); EZAL.prefix(REF.FIRMA);
      {? EZAL.seek(_in.EZAL) & EZAL.ZAM='N' & EZAL.N<>''
      || exec('pre_przelewy','zaliczki');
         _user:=tm_form(OPTMP.tm_stamp())+24; OPTMP.use('optmp__');
         OPTMP.index('ZNACZ'); OPTMP.prefix(_user);
         exec('optmp_from_ezal','zaliczki',_user);
         {? OPTMP.first()
         || WYDRUKIN.win_edit('PBGNZAL1');
            exec('odd_filtr','fst');
            WYDRUKI.WAL:=EZAL.WAL;
            WYDRUKIN.DATA:=OPTMP.DATA;
            ROZRACH.OPIS2:=OPTMP.TYT;
            {? WYDRUKIN.edit("{? OPTMP.ROZL>0
                              || {? OPTMP.ODD=null
                                 || FUN.emsg('Nie podano jednostki księgowej.'@);
                                    'ODD'
                                 || UNPAR.PODD:=OPTMP.ODD;
                                    exec('spr_pb_par','zaliczki')
                                 ?}
                              || FUN.emsg('Nie podano kwoty do rozliczenia.'@);
                                 'ROZL'
                              ?}")
            || OPTMP.DATA:=WYDRUKIN.DATA;
               OPTMP.put();
               _pb:=exec('generuj','!hbn_prz_dzal')
            ?}
         ?};
         {? _pb
         || _out.PB:=_pb;
            {? var_pres('PB',_out) & var_pres('PB',_out)=type_of(null()) & _out.PB<>null()
            || PB.cntx_psh();
               PB.use('pbxxxx'); PB.prefix();
               {? PB.seek(_out.PB, PB.name())
               || _out.KW:=PB.KW;
                  _out.WAL:={? PB.WAL().KOD<>'PLN' || PB.WAL().KOD || '' ?}
               || _out.KW:=0; _out.WAL:=''
               ?};
               PB.cntx_pop()
            || _out.KW:=0; _out.WAL:=''
            ?};
            _mp.save(,_out);
            _mp.done();
            FUN.info('Wygenerowano przelew dla zaliczki %1.'@[OPTMP.SYM])
         || _mp.cancel();
            {? ~KOMM.empty() || KOMM.select() ?}
         ?};
         {? OPTMP.first() || OPTMP.del() ?}
      ?};
      EZAL.cntx_pop()
   ?}
|? _mp.pathArea()
|| {? var_pres('EZAL',_in) & type_of(_in.EZAL)=type_of(null) & _in.EZAL<>null
   || EZAL.prefix();
      {? EZAL.seek(_in.EZAL)
      || OPTMP.cntx_psh();
         {? OPTMP.find_tab('sys_index','KOMPWN',,'=',#EZAL.ref(),'SYM',,'=',EZAL.SYM)
         || _pb:=exec('generuj','!hbn_prz_dzal');
            {? _pb
            || __genpzl+=1;
               _out.PB:=_pb;
               _mp.save(,_out);
               _mp.done()
            || _mp.cancel()
            ?}
         ?};
         OPTMP.cntx_pop()
      ?}
   ?}
?}


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła na opis czynności na liście ToDo
::----------------------------------------------------------------------------------------------------------------------
_desc:='';
_mp:=params_get().mp;
_we:=_mp.load(exec('kind_in','#b_port'));
EZAL.cntx_psh();
{? var_pres('EZAL',_we)=type_of(null()) & _we.EZAL & EZAL.seek(_we.EZAL,ref_name(_we.EZAL),1)
|| _desc:='Wygeneruj przelew dla zaliczki: %1'@@ [exec('record','#to_string',_we.EZAL)]
|| _desc:='Wygeneruj przelew dla zaliczki'@@
?};
EZAL.cntx_pop();
_desc


\uprawnienia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła na uprawnienia do danych dla czynności
::   WE: params_get().in - parametry wejściowe czynności
::           params_get().user - użytkownik dla którego sprawdzane są uprawnienia
::           params_get().mp - Menadżer Procesów
::   WY: 0 - użytkownik nie ma uprawnień do danych dla czynności
::       1 - użytkownik ma uprawnienia do danych czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_user:=params_get().user;
_mp:=params_get().mp;

_result:=0;
USERS.cntx_psh();
USERS.clear();
{? USERS.seek(_user)
|| {? exec('usr_hrb_any','b_perm',USERS.ref()) & exec('usr_hrp_any','b_perm',USERS.ref())
   || _result:=1
   ?}
?};
USERS.cntx_pop();
_result


\generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Generowanie przelewu z zaliczki
::----------------------------------------------------------------------------------------------------------------------
_pbref:=null;
{? OPTMP.ODD
|| PB.blank();
   PB.KD:='FKS: Zaliczki';
   _ref1:=RB.getrrban(RACHBANK.KB_1R,REF.INFO,0);
   SKID_RBK.cntx_psh(); SKID_RBK.prefix();
   {? _ref1 & SKID_RBK.seek(_ref1)
   || PB.RD:=SKID_RBK.N;
      PB.NBD:=SKID_RBK.BANK
   || _ref1:=null
   ?};
   SKID_RBK.cntx_pop();
   PB.DP:={? PAR_WYDR.PAR2 || OPTMP.DATA || WYDRUKIN.DATA ?};
   PB.USER_GEN:=exec('usr_zar','dok_fks');
   PB.DZ:=date();
   PB.TYT:=ROZRACH.OPIS2+' '+OPTMP.SYM;
   PB.KW:=OPTMP.ROZL;
   PB.WAL:=WYDRUKI.WAL;
   {? PB.WAL=FINFO.NAROD
   || PB.RODZ:='K'
   || PB.RODZ:='W';
      PB.RODZZAGR:=ROZNE.RODZZAGR;
      PB.KOD_STAT:=ROZNE.KOD_STAT;
      PB.TRYB_POS:=ROZNE.TRYB_POS;
      PB.OPISZ:=PAR_WYDR.SLPAR2
   ?};
   PB.ODD:=OPTMP.ODD;
   {? EZAL.seek(OPTMP.KOMPWN,)
   || PB.SYM:=EZAL.SYM;
      PB.AN:='';
      PB.W:=EZAL.ZAL_DLA().PIERWSZE+' '+OSOBA.NAZWISKO;
      _ref:=RB.getrrban(EZAL.N,REF.FIRMA().SYMBOL+'OSOBA',#OSOBA.ref());
      SKID_RBK.cntx_psh(); SKID_RBK.prefix();
      {? _ref & SKID_RBK.seek(_ref)
      || PB.RW:=SKID_RBK.N;
         PB.NBW:=SKID_RBK.BANK;
         PB.KRAJ_BAN:=PB.NBW().KODISO
      ?};
      SKID_RBK.cntx_pop();
      OS_ADRES.index('RODZAJ'); OS_ADRES.prefix(OSOBA.ref(),'S');
      {? OS_ADRES.find_le(PB.DP)
      || PB.KP:=OS_ADRES.KOD;
         PB.M:=OS_ADRES.MIASTO;
         PB.UL:=OS_ADRES.ULICA
      ?};
      PB.ZT:='N';
      do();
         {? PB.add()
         || PB_OP.blank();
            PB_OP.PB:=PB.ref();
            PB_OP.ODD:=PB.ODD;
            PB_OP.AN:=PB.AN;
            PB_OP.SYM:=EZAL.SYM;
            PB_OP.K:=OPTMP.ROZL;
            PB_OP.DP:=PB.DP;
            PB_OP.TYT:=PB.TYT;
            {? PB_OP.add()
            || _pbref:=PB.ref();
               EZALPOZ.EZAL:=EZAL.ref();
               EZALPOZ.POCH:=$PB_OP.ref();
               EZALPOZ.PRZYCHOD:=0;
               EZALPOZ.ROZCHOD:=PB_OP.K;
               EZALPOZ.DATE_ZAP:=date();
               EZALPOZ.TIME_ZAP:=time();
               EZALPOZ.ZAL_POCH:='Przelew oczekujący';
               EZALPOZ.cntx_psh(); EZALPOZ.prefix();
               {? EZALPOZ.add()
               || PB_OP.ZRODLO:=$EZALPOZ.ref();
                  PB_OP.put();
                  EZAL.ROZCHOD+=PB_OP.K; EZAL.put()
               ?};
               EZALPOZ.cntx_pop();
               {? WYDRUKIN.REJPRZEK
               || exec('przel','giodo','osoba',OSOBA.ref(),_ref1,WYDRUKIN.DATPRZEK)
               ?}
            ?}
         || KOMM.add('%1 - błąd podczas dodawania przelewu.'@[OPTMP.SYM])
         ?};
      end()
   ?}
|| KOMM.add('%1 - brak wskazania jednostki księgowej.'@[OPTMP.SYM])
?};
_pbref


\t_przel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Warunek dla bramy rozdzielającej - czy zaliczka płatna przelewem
:    WE: _a - wskazanie na zaliczkę - EZAL.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
EZAL.cntx_psh();
EZAL.prefix();
{? EZAL.seek(_a,EZAL.name()) || _wy:=EZAL.PRZELEW='T' ?};
EZAL.cntx_pop();
_wy


\n_przel
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Warunek dla bramy rozdzielającej - czy zaliczka płatna w kasie
:    WE: _a - wskazanie na zaliczkę - EZAL.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
EZAL.cntx_psh();
EZAL.prefix();
{? EZAL.seek(_a,EZAL.name()) || _wy:=EZAL.PRZELEW='N' ?};
EZAL.cntx_pop();
_wy


\t_zatw_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Warunek dla bramy rozdzielającej - czy przelew został automatycznie zatwierdzony?
:    WE: _a - wskazanie na przelew - EZAL.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
PB.cntx_psh();
PB.prefix();
{? PB.seek(_a,ref_name(_a)) || _wy:=PB.ZT='T' ?};
PB.cntx_pop();
_wy


\n_zatw_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Warunek dla bramy rozdzielającej - czy przelew wymaga zatwierdzenia?
:    WE: _a - wskazanie na przelew - EZAL.ref()
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_wy:=0;
PB.cntx_psh();
PB.prefix();
{? PB.seek(_a,ref_name(_a)) || _wy:=PB.ZT='N' ?};
PB.cntx_pop();
_wy


\display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AFI [19.22]
:: OPIS: Podglad dokumentu obiegu z listy zadań
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;
_in:=_mp.load(exec('kind_in','#b_port'));
exec('init','obg');
_pb:=null;

{? var_pres('EZAL',_in) & type_of(_in.EZAL)=type_of(null) & _in.EZAL<>null
|| PB.use('pbxxxx'); PB.index('PB'); PB.prefix(); PBHIST.use('phxxxx');
   PB_OP.use('popxxxx'); PB_OP.index('SYM'); PB_OP.prefix();
   EZAL.cntx_psh(); EZAL.prefix(REF.FIRMA);
   {? EZAL.seek(_in.EZAL) & EZAL.ZAM='N' & EZAL.N<>''
   || exec('pre_przelewy','zaliczki');
      _user:=tm_form(OPTMP.tm_stamp())+24; OPTMP.use('optmp__');
      OPTMP.index('ZNACZ'); OPTMP.prefix(_user);
      exec('optmp_from_ezal','zaliczki',_user);
      {? OPTMP.first()
      || WYDRUKIN.win_edit('PBGNZAL1');
         exec('odd_filtr','fst');
         WYDRUKI.WAL:=EZAL.WAL;
         WYDRUKIN.DATA:=OPTMP.DATA;
         ROZRACH.OPIS2:=OPTMP.TYT;
         WYDRUKIN.display()
      ?};
      _mp.cancel();
      {? OPTMP.first() || OPTMP.del() ?}
   ?};
   EZAL.cntx_pop()
?}


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JK [23.25]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego lub dokument jest zaakceptowany
::       zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
_wy:=_mp.load(exec('kind_out','#b_port'));
_keyRefs:=_mp.getRefs();
{? obj_len(_keyRefs)>0
|| {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];
      {? type_of(_kref)>0
      || {? ref_name(_kref)*'pb'>0
         || _record:=exec('FindAndGet','#table',PB,_kref,,,null());
            {? _record=null()
            || _mp.done()
            ?}
         ?}
      ?}
   !}
?};
1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:39 b5eac03dbdcc357284082aee55ee06dd9c99e51ff52d6dccceaace7f500a8f3a91cba89e005928acdb814de6648ea7d0fa030a8429484a43f53472100a9ea1db85af2d4603dbf0ed500ba1adb9ccd670530657125649b0b0ad5dbfd821100ecfd725f7139cda7448714fd307489dcc4eadd7455879532bc9bb69b8fde0c65198
