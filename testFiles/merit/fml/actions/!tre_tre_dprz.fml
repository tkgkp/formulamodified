:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_tre_dprz.fml
:: Utworzony: 18.03.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_TRE_DPRZ - Rejestracja przebiegu rem.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła główna czynności TRE_TRE_DPRZ - Rejestracja przebiegu rem.
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;

::# parses=exec('parses','!tre_tre_dprz')
::# permissions=ODDZ
::# properties=SERVICE

:: PARAMETRY WE:
::# kind=WE, symbol=REM_ZAS, type=_REM_ZAS, name=Zasób remontowy, required=N, keyref=T
{? var_pres('REM_ZAS',_in)<>type_of(~~) & var_pres('REM_ZAS',_in)<>type_of(null()) || return() ?};
::# kind=WE, symbol=REM_ZGL, type=_REM_ZGL, name=Zgłoszenie remontowe, required=N, keyref=T
{? var_pres('REM_ZGL',_in)<>type_of(~~) & var_pres('REM_ZGL',_in)<>type_of(null()) || return() ?};
::# kind=WE, symbol=PRZ, type=NUMBER, name=Wartość przebiegu, required=N, keyref=N, ^
::#          fml_val="exec('edit_number','#edit',,'Wartość przebiegu'@,5,0,,\"exec('itsPositive','#field',1,,cur_tab(1,1).VAL)\")"
{? var_pres('PRZ',_in)<>type_of(~~) & var_pres('PRZ',_in)<>type_of(0) || return() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=REM_ZASP, type=_REM_ZASP, name=Przebieg remontowy, required=N
{? var_pres('REM_ZASP',_out)<>type_of(~~) & var_pres('REM_ZASP',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=PRZ, type=NUMBER, name=Wartość przebiegu, required=N
{? var_pres('PRZ',_in)<>type_of(~~) & var_pres('PRZ',_in)<>type_of(0) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności w trybie serwisowym (OK/BŁĄD)", required=N
{? var_pres('RESULT',_out)<>type_of(~~) & var_pres('RESULT',_out)<>type_of('') || return() ?};

_can_continue:=0;

_rem_zasp:=null();
_dialog:=~_mp.isAutoRun() & ~_mp.isService();
{? (_action='DOŁĄCZ' | _action='DOŁĄCZ_EKIOSK' | _mp.pathTodo() | _mp.isAutoRun() | _mp.isService())
|| _rem_zasp:=null();
   _can_continue:=1
|? _mp.akcja()<>''
|| _rem_zasp:=_context.REM_ZASP;
   _can_continue:=1
|? _mp.pathProc()
|| _msg:='Czynność %1 nie może być uruchamiana ze startu procesów.'@['TRE_TRE_DPRZ'];
   FUN.emsg(_msg);
   _mp.cancel()
?};

{? _can_continue>0
|| REM_ZASP.cntx_psh(); REM_ZAS.cntx_psh(); REM_ZGL.cntx_psh();
   REM_ZASP.prefix(); REM_ZAS.prefix(); REM_ZGL.prefix();

:: Odtwarzamy kontekst rekordu REM_ZASP, jeżeli podany
   {? _rem_zasp<>null()
   || _find:=REM_ZASP.seek(_rem_zasp)
   || _find:=0
   ?};

   _in_rem_zas:=
      {? _in.REM_ZAS<>~~ & _in.REM_ZAS<>null()
      || _in.REM_ZAS
      |? _in.REM_ZGL<>~~ & _in.REM_ZGL<>null()
      || exec('FindAndGet','#table',REM_ZGL,_in.REM_ZGL,,"REM_ZAS",null())
      || null()
      ?};

   _in_rem_zgl:=
      {? _in.REM_ZGL<>~~ & _in.REM_ZGL<>null()
      || _in.REM_ZGL
      || null()
      ?};
   _jest_prz:=var_pres('PRZ',_in)>0 | (var_pres('_context')>100 & var_pres('PRZ',_context)>0);
   {? _mp.akcja()='DOŁĄCZ' | _mp.akcja()='DOŁĄCZ_EKIOSK' | _mp.pathTodo() | _mp.isAutoRun() | _mp.isService()
   || _prz:=
         {? var_pres('_context')>100 & var_pres('PRZ',_context)=type_of(0)
         || _context.PRZ
         |? _in.PRZ=~~
         || 0
         || _in.PRZ
         ?};
::    Warunki wyłączające
      {? (_mp.isService()) & (_in_rem_zas=null() | _jest_prz=0)
      || _msg:='Błędna konfiguracja procesu — Parametr %1 oraz %2 musi być podany.'@@['REM_ZAS','PRZ'];
         {? _dialog>0
         || FUN.emsg(_msg)
         ?};
         _mp.error(_msg)
      |? _in_rem_zas=null()
      || {? _dialog>0
         || FUN.info(
               'Bez podania zasobu rejestracja przebiegów nie jest dostępna.'@
               +'\n'+'Czynność zostaje zakończona.'@
            )
         ?};
         _out.REM_ZASP:=null();
         _out.PRZ:=0;
         _mp.save(,_out);
         _mp.done()
      |? _mp.akcja()='DOŁĄCZ_EKIOSK' & (_in_rem_zas=null() | _in_rem_zgl=null() | _jest_prz=0)
      || _msg:='Błędna konfiguracja procesu — Parametr %1, %2 oraz %3 musi być podany.'@@['REM_ZGL','REM_ZAS','PRZ'];
         FUN.emsg(_msg);
         _mp.cancel()
      || _mode:=exec('FindAndGet','#table',REM_ZAS,_in_rem_zas,,"PRZ_MODE",'N');
         {? _mode='N'
         || {? _dialog>0
            || FUN.info(
                  'Dla zasobu %1 rejestracja przebiegów nie jest dostępna.'@
                  [exec('FindAndGet','#table',REM_ZAS,_in_rem_zas,,"SYMBOL",'')]
                  +'\n'+'Czynność zostaje zakończona.'@
               )
            ?};
            _out.REM_ZASP:=null();
            _out.PRZ:=0;
            _mp.save(,_out);
            _mp.done()
         ||
::          Automatycznie/serwisowo z podanym przebiegiem - idzie całkiem bezobsługowo
::          lub rejestracja przebiegu z poziomu ekiosku - automatycznie z dialogami
            {? _mp.isService() | _action='DOŁĄCZ_EKIOSK' | (_mp.isAutoRun() & _jest_prz>0)
            || REM_ZASP.blank();
               REM_ZASP.REM_ZAS:=_in_rem_zas;
               REM_ZASP.REM_ZGL:=_in_rem_zgl;
               REM_ZASP.MODE:=_mode;
               REM_ZASP.JM:=REM_ZASP.REM_ZAS().PRZ_JM;
               REM_ZASP.PRZ:=_prz;
               _valid:=exec('chk_rem_zasp','!tre_tre_dprz',0,_dialog);
               {? _valid=''
               || {? REM_ZASP.add()
                  || exec('rem_zas_prz_akt','!tre_tre_dprz',_in_rem_zas);
                     {? _action='DOŁĄCZ_EKIOSK'
                     || FUN.info('Pomyślnie zarejestrowano przebieg do zasobu %1.'@[REM_ZASP.REM_ZAS().SYMBOL])
                     ?};
                     {? _mp.akcja()<>'' || _context.REM_ZASP:=REM_ZASP.ref() ?};
                     _out.REM_ZASP:=REM_ZASP.ref();
                     _out.PRZ:=REM_ZASP.PRZ;
                     _out.RESULT:='OK';
                     _mp.save(,_out);
                     _mp.done()
                  ?}
               || {? _mp.isService()
                  || _out.RESULT:='BŁĄD';
                     _mp.save(,_out);
                     _mp.done()
                  ?}
               ?}
            || REM_ZASP.win_edit('RED'+_mode);
               exec('efld_opt','!tre_tre_dprz');
               REM_ZASP.blank();
               REM_ZASP.REM_ZAS:=_in_rem_zas;
               REM_ZASP.REM_ZGL:=_in_rem_zgl;
               REM_ZASP.MODE:=_mode;
               REM_ZASP.JM:=REM_ZASP.REM_ZAS().PRZ_JM;
               REM_ZASP.PRZ:=_prz;
               {? REM_ZASP.edit("exec('chk_rem_zasp','!tre_tre_dprz',0)")
               || {? REM_ZASP.add()
                  || exec('rem_zas_prz_akt','!tre_tre_dprz',_in_rem_zas);
                     {? _mp.akcja()<>'' || _context.REM_ZASP:=REM_ZASP.ref() ?};
                     _out.REM_ZASP:=REM_ZASP.ref();
                     _out.PRZ:=REM_ZASP.PRZ;
                     _mp.save(,_out);
                     _mp.done()
                  ?}
               ?}
            ?}
         ?}
      ?};
      ~~

   |? _mp.akcja()='POPRAW' & _find
   || {? var_pres('REM_ZGL',_in)=type_of(null()) & _in.REM_ZGL<>null() & REM_ZASP.REM_ZGL<>_in.REM_ZGL
      || FUN.info('Poprawiać można tylko przebiegi do bieżącego zgłoszenia.'@)
      || REM_ZASP.win_edit('RED'+REM_ZASP.MODE);
         exec('efld_opt','!tre_tre_dprz');
         {? REM_ZASP.edit("exec('chk_rem_zasp','!tre_tre_dprz',1)")
         || {? REM_ZASP.put()
            || exec('rem_zas_prz_akt','!tre_tre_dprz',REM_ZASP.REM_ZAS);
               _out.REM_ZASP:=REM_ZASP.ref();
               _out.PRZ:=REM_ZASP.PRZ;
               _mp.save(,_out);
               _mp.done()
            ?}
         ?}
      ?};
      ~~

   |? _mp.akcja()='USUŃ' & _find
   || {? var_pres('REM_ZGL',_in)=type_of(null()) & _in.REM_ZGL<>null() & REM_ZASP.REM_ZGL<>_in.REM_ZGL
      || FUN.info('Poprawiać można tylko przebiegi do bieżącego zgłoszenia.'@)
      || {? FUN.ask('Czy usunąć bieżący zapis?'@)
         || _rem_zas:=REM_ZASP.REM_ZAS;
            {? REM_ZASP.del(,1)
            || exec('rem_zas_prz_akt','!tre_tre_dprz',_rem_zas);
               _context.REM_ZASP:=REM_ZASP.ref();
               _out.REM_ZASP:=null();
               _out.PRZ:=0;
               _mp.save(,_out);
               _mp.cancel()
            ?}
         ?}
      ?};
      ~~

:: Tutaj nie powinno dojść, więc błąd
   || _msg:='Nieobsłużony kontekst wywołania czynności %1.'@@['TRE_TRE_DPRZ'];
      FUN.emsg(_msg);
      _mp.error(_msg);
      ~~
   ?};

   REM_ZASP.cntx_pop(); REM_ZAS.cntx_pop(); REM_ZGL.cntx_pop()
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Opis dla czynności rejestrowania przebiegu remontowego (TRE_TRE_DPRZ)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='Zarejestruj przebieg'@@;
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest rekord kluczowy to ustawiam odpowiedniego REM_ZGL
{? var_pres('[1]',_keyRefs)>0 & ref_tab(_keyRefs[1])=REM_ZGL
|| _tmp:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,"REM_ZGL.SYM",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg do zgłoszenia: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[1],,"'Zarejestruj przebieg do zgłoszenia: %1'@@[REM_ZGL.SYM]",'')
|? var_pres('[2]',_keyRefs)>0 & ref_tab(_keyRefs[2])=REM_ZGL
|| _tmp:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[2],,"REM_ZGL.SYM",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg do zgłoszenia: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZGL,_keyRefs[2],,"'Zarejestruj przebieg do zgłoszenia: %1'@@[REM_ZGL.SYM]",'')

:: jest rekord kluczowy to ustawiam odpowiedniego REM_ZAS
|? var_pres('[1]',_keyRefs)>0 & ref_tab(_keyRefs[1])=REM_ZAS
|| _tmp:=exec('FindAndGet','#table',REM_ZAS,_keyRefs[1],,"SYMBOL",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg dla zasobu: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZAS,_keyRefs[1],,"'Zarejestruj przebieg dla zasobu: %1'@@[SYMBOL]",'')
|? var_pres('[2]',_keyRefs)>0 & ref_tab(_keyRefs[2])=REM_ZAS
|| _tmp:=exec('FindAndGet','#table',REM_ZAS,_keyRefs[2],,"SYMBOL",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg dla zasobu: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZAS,_keyRefs[2],,"'Zarejestruj przebieg dla zasobu: %1'@@[SYMBOL]",'')

:: jest parametr wejściowy to ustawiam odpowiedniego REM_ZGL
|? var_pres('REM_ZGL',_in)>0 & _in.REM_ZGL<>null()
|| _tmp:=exec('FindAndGet','#table',REM_ZGL,_in.REM_ZGL,,"REM_ZGL.SYM",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg do zgłoszenia: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZGL,_in.REM_ZGL,,"'Zarejestruj przebieg do zgłoszenia: %1'@@[REM_ZGL.SYM]",'')

:: jest parametr wejściowy to ustawiam odpowiedniego REM_ZAS
|? var_pres('REM_ZAS',_in)>0 & _in.REM_ZAS<>null()
|| _tmp:=exec('FindAndGet','#table',REM_ZAS,_in.REM_ZAS,,"SYMBOL",'');
   _desc:={? _tmp<>'' || 'Zarejestruj przebieg dla zasobu: %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',REM_ZAS,_in.REM_ZAS,,"'Zarejestruj przebieg dla zasobu: %1'@@[SYMBOL]",'')
?};
_desc


\action_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Przebiegi' dla zasobu
::   WE: _a - REM_ZAS.ref()
::       [_b] - REM_ZGL.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=_a;
_rem_zgl:={? var_pres('_b')=type_of(null()) || _b || null() ?};

params_set('REM_ZGL',_rem_zgl);

REM_ZAS.cntx_psh();
REM_ZAS.prefix();
{? REM_ZAS.seek(_rem_zas)
|| {? REM_ZAS.PRZ_MODE='N'
   || FUN.info('Dla zasobu %1 rejestracja przebiegów nie jest dostępna.'@[REM_ZAS.SYMBOL])
   |? REM_ZAS.PRZ_JM=null()
   || FUN.info('Należy ustawić jednostkę miary do rejestracji przebiegów dla zasobu %1.'@[REM_ZAS.SYMBOL])
   ||
      _actions:='';
      _akt:=exec('FindAndGet','#table',REM_ZAS,_rem_zas,,"AKT",'T');
      {? _akt='N'
      || _actions:='DPU:D'
      ?};
      REM_ZASP.cntx_psh();
      REM_ZASP.index('ZASDT');
      REM_ZASP.prefix(REM_ZAS.ref());
      REM_ZASP.win_sel('WER');
      exec('rem_zasp_win_fml','zasoby');
      REM_ZASP.select(,,,_actions);
      REM_ZASP.cntx_pop()
   ?}
?};
REM_ZAS.cntx_pop();
~~


\legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Legenda w oknie przebiegów
::----------------------------------------------------------------------------------------------------------------------
_params:=params_get();
{? var_pres('_params')>100 & var_pres('REM_ZGL',_params)=type_of(null()) & _params.REM_ZGL<>null()
|| exec('legenda','color','REM_ZASP#01')
|| exec('legenda','color','#REM_ZASP#01')
?};
~~


\record_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed rekord w oknie przebiegów (kolorowanie)
::----------------------------------------------------------------------------------------------------------------------
params_exec('rekprzed','color','REM_ZASP#01')


\rkprz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Faktyczna akcja przed rekord - wołana z mechanizmu kolorowania
::----------------------------------------------------------------------------------------------------------------------
_params:=params_get();
{? var_pres('_params')>100 & var_pres('REM_ZGL',_params)=type_of(null()) &
   _params.REM_ZGL<>null() & REM_ZASP.REM_ZGL=_params.REM_ZGL
|| 'REM_ZASP#01#01'
|| ''
?}


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz' w oknie przebiegów
::----------------------------------------------------------------------------------------------------------------------
_params:=params_get();
{? var_pres('_params')>100 & var_pres('REM_ZGL',_params)=type_of(null()) & _params.REM_ZGL<>null()
|| _rem_zgl:=_params.REM_ZGL
|| _rem_zgl:=null()
?};

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_TRE_DPRZ';
{? _rem_zgl<>null()
|| _args.UIDREF:=exec('FindAndGet','#table',REM_ZGL,_rem_zgl,,"uidref()",'')
?};
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('REM_ZASP'); _args.CONTEXT.REM_ZASP:=null();

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZAS',REM_ZAS.ref());
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',_rem_zgl);

exec('mp_run','#b__box',_args);

REM_ZASP.seek(_args.CONTEXT.REM_ZASP);
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Popraw' w oknie przebiegów
::----------------------------------------------------------------------------------------------------------------------
_params:=params_get();
{? var_pres('_params')>100 & var_pres('REM_ZGL',_params)=type_of(null()) & _params.REM_ZGL<>null()
|| _rem_zgl:=_params.REM_ZGL
|| _rem_zgl:=null()
?};

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_TRE_DPRZ';
::_args.UIDREF:=REM_ZAS.uidref();
_args.AKCJA:='POPRAW';
_args.PROC_START:='N';
_args.CONTEXT:=obj_new('REM_ZASP'); _args.CONTEXT.REM_ZASP:=REM_ZASP.ref();

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZAS',REM_ZAS.ref());
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',_rem_zgl);

exec('mp_run','#b__box',_args);
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Usuń' w oknie przebiegów
::----------------------------------------------------------------------------------------------------------------------
_params:=params_get();
{? var_pres('_params')>100 & var_pres('REM_ZGL')=type_of(null()) & _params.REM_ZGL<>null()
|| _rem_zgl:=_params.REM_ZGL
|| _rem_zgl:=null()
?};

_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_TRE_DPRZ';
::_args.UIDREF:=REM_ZAS.uidref();
_args.AKCJA:='USUŃ';
_args.PROC_START:='N';
_args.CONTEXT:=obj_new('REM_ZASP'); _args.CONTEXT.REM_ZASP:=REM_ZASP.ref();

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZAS',REM_ZAS.ref());
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',_rem_zgl);

exec('mp_run','#b__box',_args);

REM_ZASP.seek(_args.CONTEXT.REM_ZASP);
~~


\action_update
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Aktualizuj' w oknie przebiegów
::       Aktualizuje przebiegi pojazdu na podstawie zarejestrowanych kart drogowych albo delegacji,
::       dla innych zasobów na razie nic
::----------------------------------------------------------------------------------------------------------------------
_test_msg:='\n\n'+'UWAGA: FUNKCJA DOŚWIADCZALNA - NIE TESTOWAĆ.'@;

{? REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_pojazdy','zasoby')
|| _choice:=FUN.choice(
      'Wybierz sposób aktualizacji przebiegów'@
      +_test_msg,,
      'Karty drogowe'@,'Delegacje'@
   );
   {? _choice=1
   || {? FUN.ask(
            'Czy aktualizować przebiegi zasobu %1 na podstawie kart drogowych w okresie %2/%3?\n\n'
            'Uwaga: przebiegi w tym okresie zostaną usunięte i wyznaczone ponownie.'@
            [REM_ZAS.SYMBOL,$ST.AM,$ST.AR]
            +_test_msg
         )
      || REM_ZASP.cntx_psh();
::       Kasowanie zapisów dla zasobu w okresie ST.AR,ST.AM
         REM_ZASP.index('ZASOKR');
         REM_ZASP.prefix(REM_ZAS.ref(),ST.AR,ST.AM);
         {? REM_ZASP.first()
         || {!
            |? REM_ZASP.del()
            !}
         ?};
::       Odtwarzanie zapisów dla zasobu w okresie ST.AR,ST.AM z kart zaakceptowanych
::       Przenoszone są zapisy 1:1 - karta:przebieg
         REM_ZASP.index('ZASDT');
         SAMK.cntx_psh();
         SAMK.index('SAMOKR');
         SAMK.prefix(REM_ZAS.POJAZDY,ST.AR,ST.AM);
         {? SAMK.first()
         || {!
            |? {? SAMK.STATUS='T'
               || REM_ZASP.blank();
                  REM_ZASP.MODE:=REM_ZAS.PRZ_MODE;
                  REM_ZASP.JM:=REM_ZAS.PRZ_JM;
                  REM_ZASP.DT:=SAMK.D;
                  REM_ZASP.PRZ:={? REM_ZASP.MODE='C' || SAMK.SK || SAMK.PRZ ?};
                  REM_ZASP.add()
               ?};
               SAMK.next()
            !}
         ?};
         SAMK.cntx_pop();
         REM_ZASP.cntx_pop()
      ?}
   |? _choice=2
   || {? FUN.ask(
            'Czy aktualizować przebiegi zasobu %1 na podstawie delegacji w okresie %2/%3?\n\n'
            'Uwaga: przebiegi w tym okresie zostaną usunięte i wyznaczone ponownie.'@
            [REM_ZAS.SYMBOL,$ST.AM,$ST.AR]
            +_test_msg
         )
      || _tab:=sql('select * from @EDOKUMP where EDOKUMP.SAMREF=:_a',REM_ZAS.POJAZDY);
         exec('select','#table',_tab);
         {? _tab.first()
         || {!
            |? REM_ZASP.blank();
               REM_ZASP.MODE:=REM_ZAS.PRZ_MODE;
               REM_ZASP.JM:=REM_ZAS.PRZ_JM;
               REM_ZASP.DT:=_tab.DATA_WYJ;
               REM_ZASP.PRZ:=_tab.LICZ_KM;
               REM_ZASP.add();
               _tab.next()
            !}
         ?}
      ?}
   ?}
|| FUN.info(
      'Funkcja aktualizacji przebiegów dostępna jest tylko dla pojazdów.'@
      +_test_msg
   )
?};
~~


\action_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Wyświetl' w oknie przebiegów
::----------------------------------------------------------------------------------------------------------------------
REM_ZASP.win_edit('RED'+REM_ZASP.MODE);
exec('efld_opt','!tre_tre_dprz');
REM_ZASP.display();
~~


\rem_zasp_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Wartość początkowa pól w tabeli REM_ZASP
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='REM_ZAS'
|| REM_ZAS.ref()
|| ~~
?}


\rem_zasp_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='PRZ'
|| 'out_prec='+$REM_ZASP.REM_ZAS().PRZ_DOKL
|| ''
?}


\rem_zasp_fld_fe
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS:
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='PRZ'
|| 'in_prec='+$REM_ZASP.REM_ZAS().PRZ_DOKL
|| ''
?}


\chk_rem_zasp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_ZASP (przebieg remontowy)
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::       [_b] - czy wyświetlać dialogi: 0 - nie, [1] - tak
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_dialog:={? var_pres('_b')=type_of(0) || _b || 1 ?};
_p700710:=exec('get','#params',700710);
_p700711:=exec('get','#params',700711);

_chk:='';
{? _chk=''
|| {? _p700710='T'
   || _chk:=__CHK.record(REM_ZASP,{? _dialog || ~~ || 0 ?},'DT')
   || _chk:=__CHK.record(REM_ZASP,{? _dialog || ~~ || 0 ?},'DT','PRZ')
   ?}
?};
{? _chk='' & _p700710='N'
|| {? exec('itsPositive','#field',1,{? _dialog || 'T' || 'N' ?},REM_ZASP.PRZ)=0
   || _chk:='PRZ'
   ?}
?};
{? _chk=''
|| {? __CHK.index(REM_ZASP,_a,{? _dialog || ~~ || 0 ?})<>''
   || _chk:='DT'
   ?}
?};
:: Tylko w przypadku dołączania przebiegu całkowitego sprawdzenie, czy przebieg nie jest mniejszy od poprzedniego
{? _chk='' & _a=0 & REM_ZASP.REM_ZAS().PRZ_MODE='C' & _p700711='N'
|| _prz:=REM_ZASP.PRZ;
   _ts:=exec('create','#tm_stamp',REM_ZASP.DT,REM_ZASP.TM);
   REM_ZASP.cntx_psh();
   REM_ZASP.index('ZASTS');
   REM_ZASP.prefix(REM_ZASP.REM_ZAS);
   {? REM_ZASP.find_le(_ts)
   || {? _prz<=REM_ZASP.PRZ
      || {? _dialog
         || FUN.info('Przebieg nie może mieć wartości mniejszej niż poprzednia (%1).'@[$REM_ZASP.PRZ])
         ?};
         _chk:='PRZ'
      ?}
   ?};
   REM_ZASP.cntx_pop();
   ~~
?};
{? _chk=''
|| {? date(REM_ZASP.DT~1,REM_ZASP.DT~2,1)<>date(ST.AR,ST.AM,1)
   || {? _dialog
      || FUN.info('Data przebiegu musi być zgodna z wybranym okresem %1/%2.'@[$ST.AM,$ST.AR])
      ?};
      _chk:='DT'
   ?}
?};
_chk


\efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Ustawia opcje pól w oknie redakcyjnym przebiegów remontowych
::----------------------------------------------------------------------------------------------------------------------
_p700710:=exec('get','#params',700710);
REM_ZASP.efld_opt('RED','editable=grayed',,'MODE');
REM_ZASP.efld_opt('REDC','mark='+{? _p700710='N' || '1' || '0' ?},,'PRZ');
REM_ZASP.efld_opt('REDP','mark='+{? _p700710='N' || '1' || '0' ?},,'PRZ');
~~


\rem_zas_prz_akt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Funkcja aktualizuje przebieg na zasobie remontowym
::   WE: _a - REM_ZAS.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=_a;

REM_ZAS.cntx_psh(); REM_ZASP.cntx_psh();
REM_ZAS.prefix();
{? REM_ZAS.seek(_rem_zas)
|| _mode:=REM_ZAS.PRZ_MODE;
:: Przebiegi całkowite - pobierany jest ostatni rekord wg sposobu rejestracji, wpp 0
   {? _mode='C'
   || REM_ZASP.index('ZASDT');
      REM_ZASP.prefix(_rem_zas);
      {? REM_ZASP.last() & REM_ZASP.MODE='C'
      || REM_ZAS.PRZ:=REM_ZASP.PRZ; REM_ZAS.put()
      || REM_ZAS.PRZ:=0; REM_ZAS.put()
      ?}
:: Przebiegi przyrostowo - pobierana jest suma wg sposobu rejestracji
   |? _mode='P'
   || _prz:=0;
      _can_continue:=1;
      REM_ZASP.index('ZASDT');
      REM_ZASP.prefix(_rem_zas);
      {? REM_ZASP.last()
      || {!
         |? {? REM_ZASP.MODE='P'
            || _prz+=REM_ZASP.PRZ
            || _prz+=REM_ZASP.PRZ;
               _can_continue:=0
            ?};
            _can_continue>0 & REM_ZASP.prev()
         !}
      ?};
      REM_ZAS.PRZ:=_prz;
      REM_ZAS.put()
   ?}
?};
REM_ZAS.cntx_pop(); REM_ZASP.cntx_pop();
~~


\rem_zasp_trig_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Trigger 'przed add' i 'przed put' dla tabeli REM_ZASP
::----------------------------------------------------------------------------------------------------------------------
REM_ZASP.TS:=exec('create','#tm_stamp',REM_ZASP.DT,REM_ZASP.TM);
1


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=0;

{? _mp.isService()
|| _in_rem_zas:=
      {? var_pres('REM_ZAS',_in)=type_of(null()) & _in.REM_ZAS
      || _in.REM_ZAS
      |? var_pres('REM_ZGL',_in)=type_of(null()) & _in.REM_ZGL
      || exec('FindAndGet','#table',REM_ZGL,_in.REM_ZGL,,"REM_ZAS",null())
      || null()
      ?};
   {? _in_rem_zas<>null()
   || _oddz:=exec('FindAndGet','#table',REM_ZAS,_in_rem_zas,,"ODDZ",'');
      {? _oddz<>''
      || _result:=1;
         __PARSES.setVal('OddzialLogProd',_oddz);
         _args:=__PARSES.args('OkresRok');
         _args.OBSZAR:='LMG';
         _args.AR:=date()~1;
         _args.AM:=date()~2;
         __PARSES.setVal('OkresRok',_args)
      ?}
   ?}
|| _result:=1
?};
_result

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:40 35418be857ab2e54350df0c70a2d81e7daf2731e39d50312a27a28288ed9c20c46129f25063bbb1087347ed6dc8170eb69c8834f6ffb31bcb09c888aa6d5f1aaf10a077671d3f561c06dc0d02b0888ae914b4277f63a4e7155639af8c1eafdf506688e0dbf471c99fdfc57fcbef29170bb545058b0bac5a8ae757d30a013a9ef
