:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !por_bip_awdg.fml
:: Utworzony: 24.02.2020
:: Autor: IS
::======================================================================================================================
:: Zawartość: Obsługa czynności POR_BIP_AWDG - Pow. ucz.o nadch. wydarzeniach
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pow. ucz.o nadch. wydarzeniach - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP,SERVICE
::# permissions=F_ZATR,UD_SKL
::
:: Czynność "Powiadomienia uczestników o nadchodzących wydarzeniach" zbiera informacje o wydarzeniach dla
:: uczestnika, których data rozpoczęcia pomniejszona o termin przypomnienia mailowego jest większa od daty OD
:: i mniejsza od daty DO.
::
:: Parametr OD określa datę od której należy kwalifikować wydarzenia (na podstawie pomniejszonej o termin przypomnienia
:: daty rozpoczęcia wydarzenia) do wysłania powiadomień. Domyślnie przyjmuje wartość date().
::# kind=WE, symbol=OD, type=DATE, name=Data początkowa badanego okresu, required=N
::
:: Parametr DO określa datę do której należy kwalifikować wydarzenia (na podstawie pomniejszonej o termin przypomnienia
:: daty rozpoczęcia wydarzenia) do wysłania powiadomień. Domyślnie przyjmuje wartość date().
::# kind=WE, symbol=DO, type=DATE, name=Data końcowa badanego okresu, required=N
::
:: Parametr wejściowy UD_SCH pozwala wskazać symbol schematu (typu PODZORG), który posłuży do ustalenia jednostki
:: organizacyjnej, przekazanej parametrem UD_SKL. Jeżeli parametr nie zostanie przekazany (ustawiony), to wybrany
:: zostanie schemat domyślny lub (jeżeli domyślny nie został określony) pierwszy (w kolejności alfabetycznej).
::# kind=WE, symbol=UD_SCH, type=STRING, name=Schemat organizacyjny, required=N, ^
::#    fml_val="exec('ud_sch_wybierz','schemat',,_a).SYMBOL"
::
:: Parametr wejściowy UD_SKL pozwala wskazać jednostkę organizacyjną, do której będzie ograniczony zakres przetwarzania.
:: Domyślnie przetwarzane będą wszystkie jednostki organizacyjne.
::# kind=WE, symbol=UD_SKL, type=STRING, name=Jednostka organizacyjna, required=N, ^
::#    fml_val="exec('ud_skl_wybierz','schemat',,,1,_a)"
::
:: Parametr wejściowy SQL_FROM umożliwia zbudowanie dodatkowych relacji na potrzeby dodatkowego warunku
:: (patrz SQL_WHERE).
:: Domyślnie przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_FROM, type=STRING, name=Dodatkowe relacje filtra, required=N
::
:: Parametr wejściowy SQL_WHERE umożliwia dodatkowe ograniczenie listy współpracowników. Warunek może odwoływać się
:: do tabeli pracowników (poprzez alias "P" np. "P".ID>1000) oraz
:: do tabeli osób (poprzez alias "1OSOBA" np. "1OSOBA".PLEC='K').
:: Odwołania do innych tabel wymagają odpowiedniego użycia parametru SQL_FROM.
:: Domyślnie SQL_WHERE przyjmuje wartość pustą.
::# kind=WE, symbol=SQL_WHERE, type=STRING, name=Dodatkowy warunek filtra, required=N
::
:: Parametr wejściowy FML_TEST umożliwia dodatkową weryfikację wyboru współpracownika do przetwarzania. Jest treścią
:: formuły w formacie napisu. Jeżeli formuła zwróci wartość 0 to dany współpracownik nie będzie przetwarzany.
:: Formuła jest wykonywana przy ustawionych buforach tabel: P, OSOBA.
:: Domyślnie przyjmuje wartość '1'.
::# kind=WE, symbol=FML_TEST, type=STRING, name=Dodatkowy warunek wyboru, required=N
::
::----------------------------------------------------------------------------------------------------------------------
:: Parametry wyjściowe przyjmują wartości puste jeżeli znaleziony pracownik ma wydarzenia o których należy poinformować,
:: ale nie udało się znaleźć właściwego dla niego adresu e-mail w tabelach USERS i OS_ADRES.
::# kind=WY, symbol=SUB, type=STRING, name=Temat, required=N
::# kind=WY, symbol=RCV, type=MEMO, name=Lista odbiorców, required=N
::# kind=WY, symbol=BODYH, type=MEMO, name=Treść w formacie HTML, required=N
::# kind=WY, symbol=BLOB, type=BLOB, name=Załączniki, required=N
::
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_service:=_mp.isService();

{? _mp.pathProc() | _mp.pathTodo()
:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
|| _mp.save(exec('kind_out','#b_port'),'LOOP','N');

:: Ustalenie / odzyskanie klucza grupującego.
   _out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

   {? ~_mp.loop()
::    Pierwszy obrót pętli - przygotujmy dane.
::    Usuwamy wszystkie dotychczasowe klucze, które mogły zostać zapamiętane przy poprzednim uruchomieniu czynności
::    (zakończonej _mp.keep()).
   || _mp.grpkeyDelAll();
      _winT:='Pow. ucz.o nadch. wydarzeniach'@;
::    Przypisanie domyślnej wartości dacie OD i DO jeśli te nie mają wartości:
      {? var_pres('OD',_in)<>21 | _in.OD=date(0,0,0)
      || _in.OD:=date()
      ?};
      {? var_pres('DO',_in)<>21 | _in.DO=date(0,0,0)
      || _in.DO:=date()
      ?};

::    Sprawdzenie parametrów wejściowych:
      {? (_result:=exec('input_chk_get','personel_alerty',_service,_in,_winT,,1,1))=''
      || {? ~exec('first_run','!por_bip_awdg',_in,_mp,_winT)
::       Jeśli nie znaleziono pracowników spełniających kryteria, zakończ czynność:
         || _out.RCV:=_out.BODYH:=_out.SUB:='';
            _out.BLOB:=null();
            _mp.save(,_out);
            _mp.done();
            {? ~_service
            || FUN.info('Brak pracowników spełniających kryteria.'@)
            ?};
            return()
         ?}
      || {? ~_service
         || FUN.emsg(_result);
            _mp.cancel()
         || _mp.error(_result)
         ?};
         return()
      ?}
   ?};

:: Jeżeli coś było nie tak (z parametrami wejściowymi, z wyborem), to zostało obsłużone powyżej.
:: Tutaj jesteśmy już na etapie obsługi pętli.

   P.cntx_psh();
   P.prefix();
   BIPNAG.cntx_psh();
   BIPNAG.prefix();
   do();
:: Podczytanie kluczowych wartości z GRPKEY:
   _grpPars:=json_par(_mp.grpkeyGet());
   _in.OD:=#_grpPars.OD;
   _in.DO:=#_grpPars.DO;

   {? _grpPars.P<>~~ & _grpPars.W<>~~
::    Przechodzę po pracownikach odłożonych w GRPKEY:
   || {? P.seek(_grpPars.P) & (_grpPars.Z | BIPNAG.seek(_grpPars.W))
      || _ret:=exec('run','!por_bip_awdg',_in,_grpPars.Z,_grpPars.M,_mp);
::       Jeżeli RCV jest ciągiem pustym, to znaczy, że nie znaleziono adresu e-mail dla pracownika. Należy to sprawdzić
::       w procesie. W takim przypadku również BODYH i SUB będą ciągami pustymi.
         _out.RCV:=_ret.RCV;
         _out.BODYH:=_ret.BODYH;
         _out.SUB:=_ret.SUB;
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?}
   ?};
   _mp.done();
   end();
   BIPNAG.cntx_pop();
   P.cntx_pop()
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pow. ucz.o nadch. wydarzeniach - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Powiadomienia uczestników o nadchodzących wydarzeniach'@@


\first_run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Pierwsze uruchomienie czynności (pierwszy obrót pętli)
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [OBJ] - obiekt menedżera procesów (mp)
::       _c [STRING] - tytuł okienka
::   WY: 0/1 - Czy znaleziono pracowników do których należy wysłać powiadomienia?
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_mp:=_b;
_winT:=_c;
_service:=_mp.isService();

P.cntx_psh();
:: Założenie odpowiednich filtrów na tabelę P wg. tego co podano w _in:
_fZatr:=spli_str('K,P,R,T,Z',',');
exec('fltr_p_ud_sql','personel_alerty',_service,_in,_fZatr);
obj_del(_fZatr);
:: Wygenerowanie tabeli z uidref pracowników, których należy poinformować o wydarzeniach:
_TAB:=exec('bip_wdg_p','portal_alerty',_in.OD,_in.DO,_in.FML_TEST,'T','T');
P.f_clear();
P.cntx_pop();

:: Jeśli nie znaleziono takich pracowników zwróć 0:
{? ~_TAB.size()
|| return(0)
?};

:: Przepisanie dat OD, DO oraz tabeli uidref pracowników z blokadą do GRPKEY:
{? _TAB.first()
|| _bMail:=0;
   {!
   |? _par:=obj_new('P','W','OD','DO','Z','M');
::    Struktura tablicy nazwanej przekazywanej w formie JSON do GRPKEY:
::       * P   [STRING] - P.uidref(), wskazanie na pracownika
::       * W   [STRING] - BIPNAG.uidref(), wskazanie na nagłówek wydarzenia
::       * OD  [NUMBER] - _in.OD, data początkowa badanego okresu
::       * DO  [NUMBER] - _in.DO, data końcowa badanego okresu
::       * Z   [NUMBER] - 0/1, Czy powiadomienie zbiorcze (o więcej niż jednym wydarzeniu)?
::       * M   [STRING] - adres e-mail pracownika
::    Daty zapisywane w postaci numerycznej, tak aby po odczytaniu przekształcić z powrotem na typ DATE.
::    Możliwa do zapisania długość to 255 znaków. Obecna długość ciągu JSON to 252 znaków (do poniedziałku,
::    28 listopada 2738 roku).
      _par.P:=_TAB.PUID;
      _par.W:=_TAB.WUID;
      _par.OD:=#_in.OD;
      _par.DO:=#_in.DO;
      _par.Z:=_TAB.ZBIOR;
      _par.M:=_TAB.MAIL;
      {? _TAB.MAIL='' || _bMail+=1 ?};
      _mp.grpkeyAdd(json_obj(_par));
      obj_del(_par);
      _TAB.next()
   !}
?};
:: Informacja o przygotowaniu danych
{? ~_service
|| FUN.info(
      _winT+'\n\n'+
      'Analiza danych zakończona.'@+'\n'+
      'Liczba zapisów spełniających kryteria: %1.'@ [$_TAB.size()]+'\n'+
      'Liczba pracowników bez adresu e-mail: %1.'@ [$_bMail]
   )
?};
1


\run
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [20.14]
:: OPIS: Formuła odpowiedzialna za przygotowanie danych do wysyłanego powiadomienia. Formuła zakłada, że jest ustawiony
::       bufor na konkretnych rekordach tabel P i BIPNAG.
::       Formuła zwraca tablicę nazwaną z elementami potrzebnymi do wysłania powiadomienia.
::   WE: _a [OBJ] - parametry wejściowe czynności (in)
::       _b [NUMEBR] - 0/1, Czy zestawienie zbiorcze?
::       _c [STRING] - e-mail pracownika
::       _d [OBJ] - obiekt menedżera procesów (mp)
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_in:=_a;
_ret:=obj_new('RCV','BODYH','SUB','BLOB');
_ret.RCV:=_ret.BODYH:=_ret.SUB:='';
_ret.BLOB:=null();
_parZb:=_b;
_mp:=_d;

:: Przypisanie przychodzącego adresu e-mail:
_ret.RCV:=_c;

:: Jeśli nie ma adresu e-mail, to dalsze wypełnianie nie ma sensu:
{? _ret.RCV<>''
|| _th:="'<th [[STYLE_TABLE_TH]]>%1</th>'[_a]";
   _td:="'<td [[STYLE_TABLE_TD]]>%1</td>'[_a]";
   _ret.SUB:={? _parZb
             || 'Powiadomienie o nadchodzących wydarzeniach'@
             || 'Powiadomienie o nadchodzącym wydarzeniu'@
             ?};

:: Zestawienie zbiorcze, wyszukanie wydarzeń pracownika należy wykonać po tej stronie:
   {? _parZb
   || BIPODB.cntx_psh();
      BIPODB.index('KPOD');
      BIPKAT.cntx_psh();
      BIPODB.prefix(exec('ref_firma','ustawienia'),'WDRZ',P.ref());
      {? BIPODB.find_ge(_in.OD)
      || _ret.BODYH+=
            '<table [[STYLE_TABLE]]>\n'
            '<tr [[STYLE_TABLE_TR]]>'+
               _th('Tytuł'@)+
               _th('Organizator'@)+
               _th('Lokalizacja'@)+
               _th('Data rozpoczęcia'@)+
               _th('Godzina rozpoczęcia'@)+
               _th('Data zakończenia'@)+
               _th('Godzina zakończenia'@)+
               _th('Opis'@)+
               _th('Kontakt'@)+
            '</tr>\n';

::       Idę po rekordach BIPODB:
         {!
         |? _dtPow:=BIPODB.DT1-BIPODB.BIPKAT().POW_MAIL;
::          Jeśli data kiedy należy powiadomić mieści się w zadanym zakresie, to dodaję takiego pracownika
::          do zwracanej tabeli:
            {? _dtPow>=_in.OD & _dtPow<=_in.DO
            || BIPNAG.cntx_psh();
               BIPNAG.index('ZZ_DOK');
               BIPNAG.prefix(BIPODB.NP_DOK,BIPODB.ZZ_LINK);
               {? BIPNAG.first() & BIPNAG.AKT='T'
               || P.cntx_psh();
                  P.prefix();
                  OSOBA.cntx_psh();
                  OSOBA.prefix();
                  _ret.BODYH+=
                     '<tr [[STYLE_TABLE_TR]]>'+
                        _td(BIPNAG.TYTUL)+
                        _td('%1 %2'[BIPNAG.AUTOR().OSOBA().PIERWSZE,OSOBA.NAZWISKO])+
                        _td({? +form(BIPNAG.MIEJSCE) || BIPNAG.MIEJSCE || '-------' ?})+
                        _td($BIPNAG.DT1)+
                        _td($BIPNAG.GD1)+
                        _td($BIPNAG.DT2)+
                        _td($BIPNAG.GD2)+
                        _td(BIPNAG.memo_txt(0,1,'OPIS'))+
                        _td(BIPNAG.memo_txt(0,1,'KONTAKT'))+
                     '</tr>\n';
                  OSOBA.cntx_pop();
                  P.cntx_pop();
::                Pobranie załączników powiązanych z rekordem BIPNAG:
                  ZZ_DOKZ.cntx_psh();
                  ZZ_DOKZ.index('CZAS');
                  ZZ_DOKZ.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK);
                  {? ZZ_DOKZ.first()
                  || _port:=exec('kind_out','#b_port');
                     {!
                     |? _mp.bl_add('BLOB',_port,ZZ_DOKZ.PLIK);

                        ZZ_DOKZ.next()
                     !}
                  ?};
                  ZZ_DOKZ.cntx_pop()
               ?};
               BIPNAG.cntx_pop();

::             Oznaczam w tabli BIPODB, że powiadomienie e-mail zostało wysłane:
               BIPODB.POW_MAIL:='T';
               BIPODB.DT_MAIL:=date();
               BIPODB.GD_MAIL:=time();
               BIPODB.put()
            ?};

            BIPODB.next()
         !};

         _ret.BODYH+=
            '</table><br><br>'
      ?};
      BIPKAT.cntx_pop();
      BIPODB.cntx_pop()
:: Nie jest to zbiorcze zestawienie:
   || _ret.BODYH+=
         '<table [[STYLE_TABLE]]>\n'
         '<tr [[STYLE_TABLE_TR]]>'+
            _th('Tytuł'@)+
            _th('Organizator'@)+
            _th('Lokalizacja'@)+
            _th('Data rozpoczęcia'@)+
            _th('Godzina rozpoczęcia'@)+
            _th('Data zakończenia'@)+
            _th('Godzina zakończenia'@)+
         '</tr>\n';

::    Oznaczam w tabli BIPODB, że powiadomienie e-mail zostało wysłane:
      BIPODB.cntx_psh();
      BIPODB.index('LINK');
      BIPODB.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK,P.ref());
      {? BIPODB.first()
      || BIPODB.POW_MAIL:='T';
         BIPODB.DT_MAIL:=date();
         BIPODB.GD_MAIL:=time();
         BIPODB.put()
      ?};
      BIPODB.cntx_pop();

::    Pobranie załączników powiązanych z rekordem BIPNAG:
      ZZ_DOKZ.cntx_psh();
      ZZ_DOKZ.index('CZAS');
      ZZ_DOKZ.prefix(BIPNAG.NP_DOK,BIPNAG.ZZ_DOK);
      {? ZZ_DOKZ.first()
      || _port:=exec('kind_out','#b_port');
         {!
         |? _mp.bl_add('BLOB',_port,ZZ_DOKZ.PLIK);

            ZZ_DOKZ.next()
         !}
      ?};
      ZZ_DOKZ.cntx_pop();

      P.cntx_psh();
      P.prefix();
      OSOBA.cntx_psh();
      OSOBA.prefix();
      _ret.BODYH+=
         '<tr [[STYLE_TABLE_TR]]>'+
            _td(BIPNAG.TYTUL)+
            _td('%1 %2'[BIPNAG.AUTOR().OSOBA().PIERWSZE,OSOBA.NAZWISKO])+
            _td({? +form(BIPNAG.MIEJSCE) || BIPNAG.MIEJSCE || '-------' ?})+
            _td($BIPNAG.DT1)+
            _td($BIPNAG.GD1)+
            _td($BIPNAG.DT2)+
            _td($BIPNAG.GD2)+
         '</tr>\n';
      OSOBA.cntx_pop();
      P.cntx_pop();

      _opis:=BIPNAG.memo_txt(0,1,'OPIS');
      _kontakt:=BIPNAG.memo_txt(0,1,'KONTAKT');
      _ret.BODYH+=
         '</table>\n';
      {? +form(_opis)
      || _ret.BODYH+=
            '<p><b>'+
               'Opis wydarzenia:'@+
            '</b></p>'
            '<p>'+
               _opis+
            '</p><br>'
      ?};
      {? +form(_kontakt)
      || _ret.BODYH+=
            '<p><b>'+
               'Kontakt w razie pytań:'@+
            '</b></p>'
            '<p>'+
               _kontakt+
            '</p><br><br>'
      ?}
   ?};

   _ret.BODYH+=
      '<p>'+'Ta wiadomość została wygenerowana automatycznie - prosimy na nią nie odpowiadać.'@+'</p>'
?};

_ret

:Sign Version 2.0 jowisz:1045 2021/09/17 15:16:59 9253e330f2239ae31e4a4247357950cd97493b5010468054f0019ba88496ac08b96cbbf48201ff9d60defd4a67f9eebff2e2422b6a75b27fa8a5ea63704941d897eb2cf1fd3390a0e14c80eb74358e38a7f565e91912d8064967ef7b2fb0a4d146d6bf0628abef9ee18af3a036e026fa31d96cf02bde096c81d71856a2eabdfe
