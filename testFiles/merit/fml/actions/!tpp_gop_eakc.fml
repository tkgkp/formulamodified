:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tpp_gop_eakc.fml
:: Utworzony: 22.09.2022
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły czynności TPP_GOP_EAKC - Akceptacja grupy operacji
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Główna formuła czynności akceptacji grupy operacji (TPP_GOP_EAKC)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

::# permissions=ODDZ
::# kind=WE, symbol=GROP, type=_GROP,name=Grupa operacji, required=N, keyref=T
{? var_pres('GROP',_in)<>type_of(~~) & var_pres('GROP',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['GROP','TPP_GOP_EAKC'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
::# kind=WY, symbol=GROP, type=_GROP,name=Grupa operacji, required=N
{? var_pres('GROP',_out)<>type_of(~~) & var_pres('GROP',_out)<>type_of(GROP.ref()) || return() ?};

_result:=0;
_can_continue:=1;

_clean_result:=exec('clean','!tpp_gop_eakc',_mp,_in);
_can_continue:=_clean_result.RESULT;
_grop:=_clean_result.GROP;

_dialog:=1;
{? _mp.isAutoRun()
|| _dialog:=0
?};
{? _mp.isService()
|| _dialog:=3
?};
{? _mp.isGroup()
|| _dialog:=2
?};
_out.GROP:=_grop;

GROP.cntx_psh(); GROP.prefix();
{? GROP.seek(_grop)
|| {? GROP.STATUS='Z'
   || _can_continue:=0;
      _msg:='Grupa operacji \'%1\' jest zamknięta.'@[GROP.KOD];
      {? _dialog=1
      || FUN.emsg(_msg)
      |? _dialog=2
      || KOMM.add(_msg,2,,1)
      |? _dialog=3
      || _komm_args:=exec('add_komm_a','px_komm');
         _komm_args.PX_VER:=_ver;
         _komm_args.TYP:=exec('type_error','px_komm');
         _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
         _komm_args.MESSAGE:=_msg;
         exec('add_komm','px_komm',_komm_args);
         ~~
      ?};
      _mp.error(_msg)
   ?};

   GROPP.cntx_psh();
   {? GROP.AKC='T'
   || _can_continue:=0;
      _msg:='Grupa operacji \'%1\' jest już zaakceptowana.'@[GROP.KOD];
      {? _dialog=1
      || FUN.emsg(_msg)
      |? _dialog=2
      || KOMM.add(_msg,2,,1)
      |? _dialog=3
      || _komm_args:=exec('add_komm_a','px_komm');
         _komm_args.PX_VER:=_ver;
         _komm_args.TYP:=exec('type_error','px_komm');
         _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
         _komm_args.MESSAGE:=_msg;
         exec('add_komm','px_komm',_komm_args);
         ~~
      ?};
      _mp.save(,_out);
      _mp.done()
   ?};
   {? _can_continue>0
   || {? GROP.IL=0
      || _can_continue:=0;
         _msg:='Grupa operacji \'%1\' nie ma podanej ilości uruchomień.'@[GROP.KOD];
         {? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2,,1)
         |? _dialog=3
         || _komm_args:=exec('add_komm_a','px_komm');
            _komm_args.PX_VER:=_ver;
            _komm_args.TYP:=exec('type_error','px_komm');
            _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
            _komm_args.MESSAGE:=_msg;
            exec('add_komm','px_komm',_komm_args);
            ~~
         ?};
         _mp.error(_msg)
      ?}
   ?};
   {? _can_continue>0
   ||
      {? exec('chkCzasGrOps','!tpp_gop_dred',0)=0
      || _can_continue:=0;
         _msg:='Grupa operacji \'%1\' — nie wszystkie zasoby mają wypełniony czas.'@[GROP.KOD];
         {? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2,,1)
         |? _dialog=3
         || _komm_args:=exec('add_komm_a','px_komm');
            _komm_args.PX_VER:=_ver;
            _komm_args.TYP:=exec('type_error','px_komm');
            _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
            _komm_args.MESSAGE:=_msg;
            exec('add_komm','px_komm',_komm_args);
            ~~
         ?};
         _mp.error(_msg)
      ?}
   ?};
   _ok_stan:=1;
   _msg_stan:='\n\nUWAGA. Do grupy przypisane są zlecenia, które nie są otwarte (są w trakcie przygotowania).'@;
   GROPP.index('GROP');
   GROPP.prefix(GROP.ref());
   {? _can_continue>0
   || {? GROPP.first()
      || _ok:=1;
         {!
         |? _ok:=GROPP.IL<>0;
::          Kontrola stanu zleceń
            {? exec('FindAndGet','#table',ZL,GROPP.ZL,,"ZL.STAN<>'O'",0)
            || _ok_stan:=0;
               {? _dialog=2
               || _msg:='Grupa operacji \'%1\' — zlecenie %2 nie jest otwarte (jest w trakcie przygotowania).'@
                     [GROP.KOD,exec('FindAndGet','#table',ZL,GROPP.ZL,,"ZL.SYM",'')];
                  KOMM.add(_msg,2,,1)
               ?}
            ?};
            _ok & GROPP.next()
         !};
         {? _ok=0
         || _can_continue:=0;
            _msg:='Grupa operacji \'%1\' — nie wszystkie pozycje mają wypełnioną ilość.'@[GROP.KOD];
            {? _dialog=1
            || FUN.emsg(_msg)
            |? _dialog=2
            || KOMM.add(_msg,2,,1)
            |? _dialog=3
            || _komm_args:=exec('add_komm_a','px_komm');
               _komm_args.PX_VER:=_ver;
               _komm_args.TYP:=exec('type_error','px_komm');
               _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
               _komm_args.MESSAGE:=_msg;
               exec('add_komm','px_komm',_komm_args);
               ~~
            ?};
            _mp.error(_msg)
         ?}
      || _can_continue:=0;
         _msg:='Grupa operacji \'%1\' nie ma pozycji.'@[GROP.KOD];
         {? _dialog=1
         || FUN.emsg(_msg)
         |? _dialog=2
         || KOMM.add(_msg,2,,1)
         |? _dialog=3
         || _komm_args:=exec('add_komm_a','px_komm');
            _komm_args.PX_VER:=_ver;
            _komm_args.TYP:=exec('type_error','px_komm');
            _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
            _komm_args.MESSAGE:=_msg;
            exec('add_komm','px_komm',_komm_args);
            ~~
         ?};
         _mp.error(_msg)
      ?}
   ?};
   exec('openmask','zl_common',null(),GROP.ref());
   ZLIM.index('GROPNM');
   ZLIM.prefix(GROP.ref(),'T');
   _force_akc:=0;
   {? _can_continue>0
   || {? ZLIM.first()
      || _ok:=1;
         {!
         |? _ok:=ZLIM.AKC='T';
            _ok & ZLIM.next()
         !};
         {? _ok=0
         || _can_continue:=0;
            _msg:='Grupa operacji \'%1\' — nie wszystkie limity są zaakceptowane.'@[GROP.KOD];
            {? _dialog=1
            || _msg+='\n\nCzy zaakceptować grupę operacji wraz z limitami?'@;
               {? _ok_stan=0
               || _msg+=_msg_stan
               ?};
               _force_akc:=FUN.ask(_msg)
            |? _dialog=2
            || KOMM.add(_msg,2,,1)
            |? _dialog=3
            || _komm_args:=exec('add_komm_a','px_komm');
               _komm_args.PX_VER:=_ver;
               _komm_args.TYP:=exec('type_error','px_komm');
               _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
               _komm_args.MESSAGE:=_msg;
               exec('add_komm','px_komm',_komm_args);
               ~~
            ?};
            _mp.error(_msg)
         ?}
      ?};
      {? _force_akc>0
      || _can_continue:=1;
         {? ZLIM.first()
         || _ok:=1;
::          Powtórzenie pętli - bezdialogowa akceptacja limitów
            {? ~KOMM.is_inited()
            || KOMM.init(250,,'Akceptacja limitów grupy'@)
            ?};
            {!
            |?
               {? ZLIM.AKC<>'T' & ZLIM.LIMIT='T'
               || _ok:=exec('ZLIM_akc','zl_limit',2);
                  {? _ok=0
                  || _can_continue:=0
                  ?}
               ?};
               _ok & ZLIM.next()
            !};
            KOMM.select()
         ?}
      ?}
   ?};

   {? _can_continue>0
   ||
      {? _dialog=1
      || GROPS.cntx_psh();
         GROPS.index('DEFAULT');
         GROPS.prefix(GROP.ref(),'T');
         {? GROPS.first()
         || {? _dialog=1
            || _msg:='Czy zaakceptować grupę operacji?'@;
               {? _ok_stan=0
               ||  _msg+=_msg_stan
               ?};
               _can_continue:=_force_akc>0 | FUN.ask(_msg)
            ?}
         || _dlg:=_dialog=1;
            _msg_prefix:='Czy zaakceptować grupę operacji'@;
            _msg_suffix:='';
            {? _ok_stan=0
            || _msg_suffix:=_msg_stan
            ?};
            _can_continue:=exec('grops_default_first','!tpp_gop_dred',,_dlg,_msg_prefix,_msg_suffix)
         ?};
         GROPS.cntx_pop();
         ~~
      ?};

      {? _can_continue>0
      ||
         exec('dir_update','zl_grop');
         exec('termin_update','zl_grop');

         {? exec('get','#params',500390,type_of(''))='T'
         || exec('grop2obj','px_obj')
         ?};

         do();
         GROP.AKC:='T';
         _can_continue:=GROP.put();
         {? _can_continue>0
         || GROPS.cntx_psh();
            GROPS.index('GROP');
            GROPS.prefix(GROP.ref());
            {? GROPS.first()
            || {!
               |?
                  GROPS.AKC:='T';
                  _can_continue:=GROPS.put();
                  GROPS.next() & _can_continue>0
               !}
            ?};
            GROPS.cntx_pop()
         ?};
         {? _can_continue<=0
         || undo()
         ?};
         end();

::       Zatwierdzenie zamówień wewnętrznych
         {? _can_continue>0
         || exec('ZK_N_4_ZL_aKC','zamsiw_nag',null(),'T',GROP.ref())
         ?};

         {? _can_continue>0
         ||  _mp.save(,_out);
            _mp.done()
         ?}
      ?}
   ?};
   GROPP.cntx_pop()
|| _msg:='Nie przekazano grupy operacji do czynności: %1'@['TPP_GOP_EAKC'];
   {? _dialog=1
   || FUN.emsg(_msg)
   |? _dialog=2
   || KOMM.add(_msg,2,,1)
   |? _dialog=3
   || _komm_args:=exec('add_komm_a','px_komm');
      _komm_args.PX_VER:=_ver;
      _komm_args.TYP:=exec('type_error','px_komm');
      _komm_args.SRC_KIND:=exec('src_act_obj','px_komm');
      _komm_args.MESSAGE:=_msg;
      exec('add_komm','px_komm',_komm_args);
      ~~
   ?};
   _mp.error(_msg)
?};
GROP.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Opis dla czynności akceptacji grupy operacji (TPP_GOP_EAKC)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));
_grop:=null();
_sym_grop:='';

:: jest rekord kluczowy GROP, to ustawiam odpowiednie GROP
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=GROP.name()
|| _grop:=exec('FindAndGet','#table',GROP,_keyRefs[1],,,null())
:: jest parametr wejściowy GROP
|? var_pres('GROP',_in)>0
|| _grop:=exec('FindAndGet','#table',GROP,_in.GROP,,,null())
?};
{? _grop<>null()
|| _sym_grop:=exec('record','#to_string',_grop)
?};

{? _sym_grop<>''
|| _desc:='Zaakceptuj grupę operacji: %1'@@[_sym_grop]
?};
_desc


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [23.25]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};

_can_continue:=1;
_obj:=obj_new('RESULT','GROP');
_obj.RESULT:=0;
_obj.GROP:=null();

_keyRefs:=_mp.getRefs();
_has_key:=0;
{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      || _has_key:=1;
         {? ref_name(_kref)=GROP.name()
         || _obj.GROP:=exec('FindAndGet','#table',GROP,_kref,,,null());

            {? _obj.GROP=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego z grupą operacji, więc robię error
               _can_continue:=0;
               exec('grop_deleted_in_proc','zl_grop',_mp)
            |? ~_mp.isMicro() & exec('FindAndGet','#table',GROP,_obj.GROP,,"GROP.STATUS",'')='Z'
            ||
::             Grupa została zamknięta, więc robie error
               _can_continue:=0;
               exec('grop_deleted_in_proc','zl_grop',_mp,,0)
            ?}
         ?}
      ?}
   !}
?};
{? _has_key=0
|| {? var_pres('GROP',_in)=0
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
:: jest parametr wejściowy GROP
   {? _obj.GROP=null() & var_pres('GROP',_in)=type_of(null())
   || _obj.GROP:=_in.GROP
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};
_obj

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 8ebaccf6181b7e83b1b544a439eff6bef1dedb22081ff1fa00f974de42c22e5689880782b5971f81649cca528e4a41a1ddb75d4136b13e2a8a2ec941bb66065be8d65e70478513e5e1048a67074ec411dd18b974ba256cf2a3fc9e763684b5ad675cb12e498d9fe1d2d075db5db696ef9602d760f8b476b04906ccbe3981d1b0
