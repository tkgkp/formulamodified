:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dzwe.fml
:: Utworzony: 12.11.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DZWE - Generowanie zlecenia na podstawie pozycji zamówienia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności generowania zleceń na podstawie pozycji zamówienia (TTE_PZL_DZWE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

:: WŁAŚCIWOŚCI CZYNNOŚCI
::# permissions=ODDZ,LMG
::# parses=exec('parses','!tte_pzl_dzwe')
::# properties=SERVICE,LOOP
::# condition=Jest zlecenie, act_uid=, auto=N, formula=_a.ZL<>~~ & _a.ZL<>null()

:: PARAMETRY WE:
::# kind=WE, symbol=ZTP, type=_ZTP, name=Typ zlecenia, required=N, fml_val="exec('ztp_select','zl_head','P')", fml_exp="exec('ztp_export','zl_head',_a)"
{? var_pres('ZTP',_in)<>type_of(~~) & var_pres('ZTP',_in)<>type_of(null()) || return() ?};
{? var_pres('ZTP',_in)=type_of(~~) || _in.ZTP:=null() ?};
::# kind=WE, symbol=ZK_N, type=_ZK_N, name=Zamówienie źródłowe, required=N, keyref=T
{? var_pres('ZK_N',_in)<>type_of(~~) & var_pres('ZK_N',_in)<>type_of(null()) || return() ?};
{? var_pres('ZK_N',_in)=type_of(~~) || _in.ZK_N:=null() ?};
::# kind=WE, symbol=ZK_P, type=_ZK_P, name=Źródłowa pozycja zamówienia, required=N
{? var_pres('ZK_P',_in)<>type_of(~~) & var_pres('ZK_P',_in)<>type_of(null()) || return() ?};
{? var_pres('ZK_P',_in)=type_of(~~) || _in.ZK_P:=null() ?};
::# kind=WE, symbol=ZLOZONE, type=STRING, name=Podpowiedź znacznika dla procesu z półfabrykatami, required=N, fml_val="exec('complex_select','!tte_pzl_dzwe')"
{? var_pres('ZLOZONE',_in)<>type_of(~~) & var_pres('ZLOZONE',_in)<>type_of('') || return() ?};
{? var_pres('ZLOZONE',_in)=type_of(~~) || _in.ZLOZONE:='P' ?};
::# kind=WE, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
{? var_pres('GRP_KEY',_in)<>type_of(~~) & var_pres('GRP_KEY',_in)<>type_of('') || return() ?};
{? var_pres('GRP_KEY',_in)=type_of(~~) || _in.GRP_KEY:='' ?};

:: Parametry WEW:
::# kind=WEW, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
{? var_pres('GRP_KEY',_int)<>type_of(~~) & var_pres('GRP_KEY',_int)<>type_of('') || return() ?};
{? var_pres('GRP_KEY',_int)=type_of(~~) || _int.GRP_KEY:='' ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=ZL_MERGE, type=_ZL, name=Powiązane zlecenie, required=N
{? var_pres('ZL_MERGE',_out)<>type_of(~~) & var_pres('ZL_MERGE',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=KATEGORIA, type=STRING, name=Kategoria zlecenia, required=N
{? var_pres('KATEGORIA',_out)<>type_of(~~) & var_pres('KATEGORIA',_out)<>type_of('') || return() ?};
::# kind=WY, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N
{? var_pres('GRP_KEY',_out)<>type_of(~~) & var_pres('GRP_KEY',_out)<>type_of('') || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name="Wynik czynności (OK, gdy zlecenie zostało poprawnie wygenerowane)", required=N
{? var_pres('RESULT',_out)<>type_of(~~) & var_pres('RESULT',_out)<>type_of('') || return() ?};

:: Ustawiam wartość domyślną argumentu LOOP żeby brama się nie zawiesiła
_out.LOOP:='N';

ZL.cntx_psh(); ZL.clear();
ZK_N.cntx_psh(); ZK_N.clear();
ZK_P.cntx_psh(); ZK_P.clear();
ZLZAM.cntx_psh();

:: Czy pytania na ekran
_dialog:={? _mp.isService() | (_mp.isAutoRun() & _in.ZK_P) || 0 || 1 ?};
_can_continue:=1;

{? _in.ZK_N | _in.ZK_P | _in.GRP_KEY<>'' | _int.GRP_KEY<>''
||
   _proj_zkp:=null();
   _proj_nad:=null();
   {? _in.ZK_P
   || _proj_zkp:=exec('FindAndGet','#table','ZK_P',_in.ZK_P,,"PROJEKTY",null())
   ?};
   {? _mp.akcja()='GENERUJ_PODZLECENIE' & _context.ZL_NAD<>null()
   || _proj_nad:=exec('FindAndGet','#table',ZL,_context.ZL_NAD,,"PROJEKTY",null())
   ?};
:: Sprawdzam, czy kategoria oraz typ zlecenia zostały określone w procesie, jeżeli nie to wyświetlam okno
:: z parametrami  generowania
:: ZLEC.CHK1 - czy wyświetlano już okno redakcyjne z parametrami
:: ZLEC.CHK2 - wybrana wartość kategorii zlecenia w oknie redakcyjnym z parametrami (proste/zlozone)
   _show_params:=0;
   {? _in.ZTP=null()
   || {? _mp.isService() | (_mp.isAutoRun() & _in.ZK_P)
      || _can_continue:=0
      || {? ZLEC.ZTP<>null()
         || _in.ZTP:=ZLEC.ZTP
         || {? _mp.isGroup()
            || _show_params:=1
            ?}
         ?}
      ?}
   ?};
   {? ~_mp.isService() & ~_mp.isAutoRun() & _mp.isGroup() & _in.ZLOZONE='P'
   || {? ZLEC.CHK2<>''
      ||
::       Jak wybrano złożone to ustawiam wartość P, aby ustalać kategorię zlecenia na podstawie technologii
::       (wartość brana z _context)
         _in.ZLOZONE:={? ZLEC.CHK2='T' || 'P' || 'N' ?}
      || _show_params:=1
      ?}
   ?};
   {?  ~_mp.isService() & ~_mp.isAutoRun() & _show_params>0
   || {? ZLEC.CHK1<>'T'
      ||
::       Wyświetlam okno z parametrami generowania (jeżeli typ nie zotał podany lub dla parametru ZLOZONE
::       wybrano opcję z pytaniem przy generowaniu)
         _env_gen:=exec('env_gen','zl_gen');
         _env_gen.edit_ZTP:={? _in.ZTP<>null() || 0 || 1 ?};
         _env_gen.edit_COMPLEX:={? _in.ZLOZONE<>'P' || 0 || 1 ?};
         ZLEC.ZTP:=_in.ZTP;
         ZLEC.TKTL:=null();
         ZLEC.COMPLEX:={? _in.ZLOZONE<>'P' || _in.ZLOZONE || 'N' ?};

         ZTP.f_clear();
         _typy:=exec('typy_zlecen','zl_head','P');
         ZTP.f_set('TYP',,'ZTP.REFERENCE in (select :_a.REF from :_a)',_typy);
         obj_del(_typy);
         ZTP.win_dict('SLO');
         params_set('env_gen',_env_gen);
         ZLEC.win_edit('ZL_GEN_P');
         ZLEC.CHK1:='T';
         {? ZLEC.edit("__CHK.record(ZLEC,,'ZTP')")
         || {? _env_gen.edit_ZTP>0
            || _in.ZTP:=ZLEC.ZTP
            ?};
            {? _env_gen.edit_COMPLEX>0
            || ZLEC.CHK2:=ZLEC.COMPLEX;
               _in.ZLOZONE:={? ZLEC.CHK2='T' || 'P' || 'N' ?}
            ?}
         || _can_continue:=-1
         ?}
      ||
::       Okno z parametrami było już wcześniej wyświetlane i zrezygnowano z redakcji
         _can_continue:=-1
      ?}
   ?};
:: warunki wyłączające...
   {? _can_continue=-1
   || _mp.cancel()
   |? _mp.akcja()='GENERUJ_PODZLECENIE'
      & _in.ZTP<>null()
      & _in.ZTP<>exec('FindAndGet','#table',ZL,_context.ZL_NAD,,"TYP",null())
   || _msg:=
         'Niezgodność wywołania czynności.\n'
         'Typ zlecenia nadrzędnego musi być zgodny z typem zlecenia przekazanym w procesie.'@@;
      {? ~_mp.isService() || FUN.emsg(_msg) ?};
      _mp.error(_msg)
   |? _proj_nad<>null() & _proj_zkp<>null() & _proj_nad<>_proj_zkp
   ||
      _msg:='Nie można uruchomić czynności.\nProjekt na zleceniu nadrzędnym i zamówieniu sprzedaży musi być taki sam.'@;
      _result:=0;
      {? _mp.isService()
      || _mp.error(_msg)
      || FUN.emsg(_msg);
         _mp.cancel()
      ?}

   |? (_mp.isService() & (_in.ZTP=null() | _in.ZK_P=null())) | (_mp.isAutoRun() & _in.ZK_P<>null() & _in.ZTP=null())
   || _msg:='Błędna konfiguracja procesu — Parametr %1 oraz %2 musi być podany.'@@['ZK_P','ZTP'];
      {? _mp.isAutoRun()
      || FUN.emsg(_msg)
      ?};
      _mp.error(_msg)

   || _key:=_in.GRP_KEY;

::    Zmienne:
::    - czy wystawiać zlecenie na wyjście
      _wystaw:=1;
::    - czy zrobić done() jak brak zleceń na wyjściu
      _zakoncz:=1;

      {? _mp.loop()=0 | 7+_mp.akcja()='GENERUJ'
      ||
::       Sprawdzam czy istnieje już zapamiętany klucz grupujący (np nastąpił powrót do tej instancji czynności na skutek
::       jakiejś awarii i instancja nr 1 jest uruchomiona ponownie)
         {? _int.GRP_KEY<>''
         || _key:=_int.GRP_KEY
         || _key:=exec('uid','#blank')
         ?};

         {? _key<>''
         ||
::          Zapisuję identyfikator jako parametr wewnętrzny
            _int.GRP_KEY:=_key;
            _mp.save(_int);

::          Rozpoczynam generowanie
            _grp_key_on:=_key+'1';

::          z widoku zleceń - akcja: Dołącz->Zlecenie na podstawie->Pozycji zamówień | Generuj
::          z widoku pozycji zamówienia: Funkcje->Zlecenia
::          w kontekście rekordu ZK_P - akcja dla pojedynczego rekordu
            {? _mp.akcja()='GENERUJ'
            || _args_zl:=exec('zkp2args','zl_gen');
               _args_zl.ZTP:=_in.ZTP;
               _args_zl.COMPLEX:=_in.ZLOZONE;
               _args_zl.MERGE:=1;
               _args_zl.GRP_KEY:=_grp_key_on;
               params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl);
               _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0);
               {? _args_zl.ZL_MERGE<>null()
               || _out.ZL_MERGE:=_args_zl.ZL_MERGE;
                  _out.KATEGORIA:=exec('FindAndGet','#table',ZL,_args_zl.ZL_MERGE,,"RODZAJ",'P');
                  _mp.save(,_out);
                  _zakoncz:=1
               || _zakoncz:=_wystaw
               ?}

::          z widoku zleceń - akcja: Dołącz->Podzlecenie na podstawie->Pozycji zamówień | Generuj
            |? _mp.akcja()='GENERUJ_PODZLECENIE'
            || _args_zl:=exec('zkp2args','zl_gen');
               _args_zl.ZTP:=exec('FindAndGet','#table',ZL,_context.ZL_NAD,,"TYP",null());
               _args_zl.ZL_NAD:=_context.ZL_NAD;
               _args_zl.COMPLEX:='N';
               _args_zl.MERGE:=0;
               _args_zl.GRP_KEY:=_grp_key_on;
               params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl);
               _zakoncz:=1;
               _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0)

::          z widoku zleceń - akcja: Dołącz->Zlecenie na podstawie->Pozycji zamówień | Generuj
::          z widoku pozycji zamówienia: Funkcje->Zlecenia
::          w kontekście rekordu ZK_P - akcja dla pojedynczego rekordu w akcji grupowej
            |? _mp.akcja()='GENERUJ_W_GRUPIE'
            || _args_zl:=exec('zkp2args','zl_gen');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.ZL_NAD:=_context.ZL_NAD;
               _args_zl.COMPLEX:={? _in.ZLOZONE<>'P' || _in.ZLOZONE || _context.ZLOZONE ?};
               _args_zl.MERGE:=0;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
               _args_zl.GRP_KEY:=_grp_key_on;
               _args_zl.OPIS:=_context.OPIS;
               {? var_pres('DK_C',_context)>0 || _args_zl.DK_C:=_context.DK_C ?};
               {? var_pres('KTM',_context)>0
               || M.cntx_psh();
                  M.prefix();
                  {? M.seek(_context.KTM)
                  || _args_zl.M:=$M.ref();
                     _args_zl.KTM:=M.KTM;
                     _args_zl.M_ATR:=M.M_ATR
                  ?};
                  M.cntx_pop()
               ?};
               {? _context.MERGE_SIZE>1
               || _args_zl.UWAGI:='';
                  {? var_pres('OPIS_DOD',_args_zl)>100 || obj_del(_args_zl.OPIS_DOD) ?};
                  _args_zl.OPIS_DOD:='';
                  _args_zl.MG:=null()
               ?};
               params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl);
               _context.ZL:={? _args_zl.RESULT.tab.first()
                            || exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"ref()",null())
                            || null()
                            ?};
               _zakoncz:=1;
               _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0)

::          z widoku zleceń - akcja: Dołącz->Zlecenie na podstawie->Pozycji zamówień | Generuj
::          (przypadek, gdy kolejne pozycje zamówień dołączane są do wygenerowanego zlecenia)
            |? _mp.akcja()='POWIĄŻ_W_GRUPIE'
            || _args_zl:=exec('zkp2args','zl_gen');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.MERGE:=1;
               _args_zl.ZL_MERGE:=_context.ZL;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
               params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl);
               _zakoncz:=1;
               {? _args_zl.ZL_MERGE<>null()
               || _out.ZL_MERGE:=_args_zl.ZL_MERGE;
                  _out.KATEGORIA:=exec('FindAndGet','#table',ZL,_args_zl.ZL_MERGE,,"RODZAJ",'P');
                  _mp.save(,_out)
               ?}

::          z proces dla zamówienia lub z widoku nagłówka zamówienia: Funkcje->Zlecenia
::          w kontekście rekordu ZK_N - akcja dla pojedynczego rekordu
            |? _mp.akcja()='GENERUJ_ZKN'
            || _args_zl:=exec('zkp2args','zl_gen');
               _args_zl.ZTP:=_in.ZTP;
               _args_zl.COMPLEX:=_in.ZLOZONE;
               _args_zl.MERGE:=1;
               _args_zl.GRP_KEY:=_grp_key_on;
               params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl);
::             Jak z obszaru roboczego to kończę, jak z listy ToDo to zostawiam, paczka zostanie wysłana później
               {? _mp.pathArea()
               || _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0);
                  {? _args_zl.ZL_MERGE<>null()
                  || _out.ZL_MERGE:=_args_zl.ZL_MERGE;
                     _out.KATEGORIA:=exec('FindAndGet','#table',ZL,_args_zl.ZL_MERGE,,"RODZAJ",'P');
                     _mp.save(,_out);
                     _zakoncz:=1
                  || _zakoncz:=_wystaw
                  ?}
               || _zakoncz:=0;
                  _wystaw:=0
               ?}

::          z procesu, gdy podany _in.ZK_P
            |? (_mp.pathProc() | _mp.pathTodo() | _mp.isService() | _mp.isAutoRun()) & _in.ZK_P
            || ZK_P.prefix();
               {? ZK_P.seek(_in.ZK_P)
               || _args_zl:=exec('zkp2args','zl_gen');
                  _args_zl.DIALOG:=_dialog;
                  _args_zl.ZTP:=_in.ZTP;
                  _args_zl.COMPLEX:=_in.ZLOZONE;
                  _args_zl.MERGE:=0;
                  _args_zl.GRP_KEY:=_grp_key_on;
                  {? _mp.isService() | _mp.isAutoRun()
                  ||
::                   Ustalenie karty technologicznej
                     M.cntx_psh();
                     M.clear();
                     {? exec('enabled','zl_uslugi')
                     || M.index('MATKTM');
                        M.prefix(_args_zl.KTM,)
                     || M.index('RODZ');
                        M.prefix('T',_args_zl.KTM,)
                     ?};
                     {? M.first()
                     || _args_zl.TKTL:=exec('wyb_ktl','zl_gen',0);
                        {? _args_zl.TKTL=null()
                        || _can_continue:=0;
                           {? _mp.isService()
                           || _msg:='Nie można uruchomić czynności.\n'
                                    'Materiał %1 nie ma przypisanej domyślnej technologii.'@[M.KTM];
                              _mp.error(_msg)
                           || _msg:='Materiał %1 nie ma przypisanej domyślnej technologii.'@[M.KTM];
                              FUN.emsg(_msg);
                              _mp.cancel()
                           ?}
                        ?}
                     ?};
                     M.cntx_pop()
                  ?};
                  {? _can_continue>0
                  || params_exec('auto_zkp','!tte_pzl_dzwe',_args_zl)
                  ?}
               ?};
               _zakoncz:=1;
               _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0);
               {? _mp.pathTodo() || _zakoncz:=_wystaw ?}

::          z procesu albo z ToDo albo automatycznie, gdy podany _in.ZK_N
            |? (_mp.pathProc() | _mp.pathTodo() | _mp.isAutoRun()) & _in.ZK_N & ~_mp.isService()
            || _mp.keep();
               _zakoncz:=exec('zlisty','!tte_pzl_dzwe',3,,_in.ZK_N);
               _wystaw:=(exec('zl_grp_key_size','!tte_pzl_dzwe',_key)>0)

            || _zakoncz:=0;
               _wystaw:=0
            ?}
         ?}
      ?};
      {? _can_continue>0
      || {? _key<>''
         ||
::          Generacja - wypycham pierwsze zlecenie na wyjście
            {? _wystaw>0
            || _grp_key_on:=_key+'1';
               _grp_key_off:=_key+'0';

               ZL.cntx_psh();
               ZL.index('GRP_KEY');
               ZL.prefix(_grp_key_on);
               {? ZL.first()
               || ZL.cntx_psh();
                  ZL.prefix();
                  ZL.GRP_KEY:=_grp_key_off;
                  do();
                  _can_continue:=ZL.put();
                  end();
                  _out.ZL:=ZL.ref();
                  _out.KATEGORIA:=ZL.RODZAJ;
                  _out.GRP_KEY:=_key;
                  _out.RESULT:='OK';
                  ZL.cntx_pop();
                  {? ZL.first()
                  ||
::                   Jeżeli są jeszcze jakieś zlecenia to kontynuuję pętlę
                     _out.LOOP:='T'
                  ?};
                  _mp.save(,_out);
                  _mp.done()
               || _mp.save(,_out);
                  {? _zakoncz || _mp.done() ?}
               ?};
               ZL.cntx_pop()

::          Zakończenie (nie powstało żadne zlecenie) - wypycham nullowe zlecenie na wyjście
            |? _zakoncz>0
            || {? _mp.isMicro() | _mp.isAutoRun()
               || _mp.cancel()
               || _out.RESULT:='BŁĄD';
                  _out.ZL:=null();
                  _mp.save(,_out);
                  _mp.done()
               ?}
            |? _mp.isService()
            || _out.RESULT:='BŁĄD';
               _out.ZL:=null();
               _mp.save(,_out);
               _mp.done()
            ?}
         || _mp.error('Brak oczekiwanego parametru %1.'@@['GRP_KEY'])
         ?}
      ?}
   ?}

|? _mp.pathProc()
|| exec('zlisty','!tte_pzl_dzwe')

|| _mp.error('Parametr %1, %2 albo %3 musi być podany.'@@['ZK_N','ZK_P','GRP_KEY'])
?};

ZLZAM.cntx_pop();
ZK_P.cntx_pop();
ZK_N.cntx_pop();
ZL.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności generowania zleceń na podstawie pozycji zamówienia (TTE_PZL_DZWE)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest rekord kluczowy to ustawiam odpowiednie ZK_N
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',ZK_N,_keyRefs[1],,"SYM",'');
   _desc:={? _tmp<>'' || 'Generuj zlecenia produkcyjne na podstawie zamówienia %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZK_N,_keyRefs[1],,"'Generuj zlecenia produkcyjne na podstawie zamówienia %1'[SYM]",'')

:: jest parametr wejściowy ZK_N to ustawiam odpowiednio
|? var_pres('ZK_N',_in)
|| _tmp:=exec('FindAndGet','#table',ZK_N,_in.ZK_N,,"SYM",'');
   _desc:={? _tmp<>'' || 'Generuj zlecenia do pozycji zamówienia %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZK_N,_in.ZK_N,,"'Generuj zlecenia do pozycji zamówienia %1'[SYM]",'')

:: jest parametr wejściowy ZK_P to ustawiam odpowiednio
|? var_pres('ZK_P',_in)
|| _tmp:=exec('FindAndGet','#table',ZK_P,_in.ZK_P,,
      "ZK_N.cntx_psh();ZK_N.use(ref_name(N));_str:=$POZ+'. zamówienia '+N().SYM;ZK_N.cntx_pop();_str",'');
   _desc:={? _tmp<>'' || 'Generuj zlecenia do pozycji %1 '@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZK_P,_in.ZK_P,,"'Generuj zlecenia do pozycji zamówienia '",'')

|| _desc:='Generuj nowe zlecenie produkcyjne'@@
?};
_desc


\action_zmp_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Generuj' w oknie listy do wytworzenia (z poziomu widoku zleceń)
::       Kontekst wywołania: rekord "__ZMP"
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().env_zlisty.TAB;
_zlnad:=VAR.A_ZLNAD;
ZK_P.cntx_psh();
ZK_P.prefix();
{? ZK_P.seek(_tab.REF)
|| {? VAR.GRUPA='T'
   || _args:=exec('zkp2args','zl_gen');
      params_exec('dodaj_zampoz','zl_gen',_args)

   || ZK_N.cntx_psh();
      ZK_N.prefix();
      {? ZK_N.seek(ZK_P.N)
      || {? ZK_N.r_lock(1,1,1)
         || ZLEC.ZTP:=null();
            _args:=exec('mp_run_a','#b__box');
            _args.ACT_UID:='TTE_PZL_DZWE';
            _args.UIDREF:=ZK_N.uidref();
            _args.AKCJA:='GENERUJ';
            _args.PROC_START:='T';
            _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_P',ZK_P.ref());
            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_N',ZK_N.ref());

            exec('mp_run','#b__box',_args);

            params_exec('zmp_reload','zl_gen')

         || FUN.info('Nie można generować zlecenia — zamówienie %1 redagowane przez innego użytkownika.'@[ZK_N.SYM])
         ?};
         ZK_N.r_unlock()
      ?};
      ZK_N.cntx_pop()
   ?}
?};
ZK_P.cntx_pop();
VAR.A_ZLNAD:=_zlnad;
~~


\action_zmpz_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Generuj' w oknie listy do wytworzenia (z poziomu widoku zleceń, gdy dotyczy zlecenia złożonego)
::       Kontekst wywołania: rekord "__ZMP"
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().env_zlisty.TAB;
_zlnad:=VAR.A_ZLNAD;
ZK_P.cntx_psh();
ZK_P.prefix();
{? ZK_P.seek(_tab.REF)
|| {? VAR.GRUPA='T'
   || _args:=exec('zkp2args','zl_gen');
      params_exec('dodaj_zampoz','zl_gen',_args)

   || ZLEC.ZTP:=null();
      _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TTE_PZL_DZWE';
      _args.UIDREF:=ZK_P.N().uidref();
      _args.AKCJA:='GENERUJ_PODZLECENIE';
      _args.PROC_START:='T';
      _args.CONTEXT:=obj_new('ZL_NAD'); _args.CONTEXT.ZL_NAD:=VAR.A_ZLNAD;
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_P',ZK_P.ref());
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_N',ZK_P.N);

      exec('mp_run','#b__box',_args);

      params_exec('zmp_reload','zl_gen')
   ?}
?};
ZK_P.cntx_pop();
VAR.A_ZLNAD:=_zlnad;
~~


\action_zkn_generate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akcja 'Generuj' w oknie listy do wytworzenia (z poziomu listy ToDo dla zamówienia, albo z poziomu zamówienia)
::       Kontekst wywołania: rekord "__ZMP"
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().env_zlisty.TAB;
_zlnad:=VAR.A_ZLNAD;
ZL.f_clear();
ZAKR.ZTP_WP:='';

ZK_P.cntx_psh(); ZK_N.cntx_psh();
ZK_P.prefix(); ZK_N.prefix();
{? ZK_P.seek(_tab.REF)
|| {? VAR.GRUPA='T'
   || _args:=exec('zkp2args','zl_gen');
      params_exec('dodaj_zampoz','zl_gen',_args)

   || {? ZK_N.seek(ZK_P.N)
      || exec('init_blk','zamsiw_nag');
         {? exec('zam_lock','zamsiw_nag') & exec('add_blk','zamsiw_nag',ZK_P.N)
         || ZLEC.ZTP:=null();
            _args:=exec('mp_run_a','#b__box');
            _args.ACT_UID:='TTE_PZL_DZWE';
            _args.UIDREF:=ZK_P.N().uidref();
            _args.AKCJA:='GENERUJ_ZKN';
            _args.PROC_START:='T';
            _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_P',ZK_P.ref());
            exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZK_N',ZK_P.N);

            exec('mp_run','#b__box',_args);

            exec('del_blk','zamsiw_nag',ZK_P.N);

            params_exec('zmp_reload','zl_gen')
         ?};
         exec('done_blk','zamsiw_nag')
      ?}
   ?}
?};
ZK_P.cntx_pop(); ZK_N.cntx_pop();
VAR.A_ZLNAD:=_zlnad;
~~


\zl_grp_key_size
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Sprawdza ile zleceń zawiera się w kluczu grupującym
::   WE: _a - klucz grupujący
::----------------------------------------------------------------------------------------------------------------------
_grp_key:=_a;
_size:=0;
ZL.cntx_psh();
ZL.index('GRP_KEY');
ZL.prefix(_grp_key);
_size:=ZL.size();
ZL.cntx_pop();
_size


\zlisty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [DRO]
:: OPIS: Generowanie zleceń z pozycji zamówień/zamówienia
::   WE: [_a] - tryb pracy: 1 - (domyślnie) lista zleceń, 2 - podzlecenie zlecenia złożonego, 3 - zamówienie
::       [_b] - ZL.ref() - zlecenie nadrzędne (wymagane dla trybu 2)
::       [_c] - ZK_N.ref() - zamówienie (wymagane dla trybu 3)
::   WY: wynik "__ZMP.select()" - obecnie _tab.select()
::  OLD: \zlisty/zlecenia.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0) || _tryb:=_a || _tryb:=1 ?};
{? var_pres('_b')=type_of(null()) || _zl_nad:=_b || _zl_nad:=null() ?};
{? var_pres('_c')=type_of(null()) || _zk_n:=_c || _zk_n:=null() ?};

{? _tryb=2 & _zl_nad=null()
|| FUN.error('Zlecenie nadrzędne musi być podane (%1).'@['zlisty/!tte_pzl_dzwe.fml']);
   return()
?};
{? _tryb=3 & _zk_n=null()
|| FUN.error('Zamówienie musi być podane (%1).'@['zlisty/!tte_pzl_dzwe.fml']);
   return()
?};

_result:=0;

{? ~exec('sprdt','zl_head') || return(_result) ?};

{? _tryb=2
|| VAR.A_ZLNAD:=_zl_nad
|| VAR.A_ZLNAD:=null()
?};

set_help(exec('set_help','#help','TTE_PZL_DZWE'));

ZL.cntx_psh(); ZGH.cntx_psh(); ZGP.cntx_psh(); ZLIM.cntx_psh();
exec('tktl_cntx_psh','tech_common');
_exit:="
   ZL.cntx_pop(); ZGH.cntx_pop(); ZGP.cntx_pop(); ZLIM.cntx_pop();
   exec('tktl_cntx_pop','tech_common');
   ~~
";

_zam:=exec('get','#params',500213,2)+exec('get','#params',500215,2);
{? _zam=''
|| FUN.info(
      'Brak wskazanych typów zamówień w parametrach systemu.\n'
      'Należy uzupełnić parametr aplikacyjny %1 lub %2.'@['500213','500215']
   )
|| _zam:=gsub(_zam,' ',',');
   _msk:=ST.ODDZ+'__';
   exec('openz','open_tab',_msk);
   _tab:=sql('
      select
         ZK_P.REFERENCE as REF,
         ZK_P.POZ,
         M.KTM as KOD,
         M.N as NAZ,
         M.REFERENCE as M_REF,
         ZK_P.ILRB as IL_REZ,
         ZK_P.ILZ as IL_ZAM,
         ZK_P.ILP as IL_POZ,
         (ZK_P.ILP-ZK_P.ILRB) as IL_WYTW,
         sum(ZLZAM.ILZL) as IL_ZL,
         ZK_N.SYM,
         ZK_P.DT as DTR,
         ZK_P.PL_DATA as PL_DATA,
         ZK_P.PL_TIME as PL_TIME,
         ZK_N.KH as KH,
         KH.KOD as KH_K,
         KH.SKR as KH_S,
         KH.NAZ as KH_N,
         KH.REFERENCE as KH_REF,
         HAN.KOD as HAN_K,
         HAN.NAZ as HAN_N,
         PROJEKTY.SYM as PROJEKT,
         MG.SYM as MG,
         M.REFERENCE as T,
         JM.KOD as JM,
         DK_C.M_ATR as ATR,
         DK_C.REFERENCE as DK_C,
         SPACE(20) as WAR01,
         SPACE(20) as WAR02,
         SPACE(20) as WAR03,
         SPACE(20) as WAR04,
         SPACE(20) as WAR05,
         SPACE(20) as WAR06,
         SPACE(20) as WAR07,
         SPACE(20) as WAR08,
         SPACE(20) as WAR09,
         SPACE(20) as WAR10,
         SPACE(1) as POTW_T,
         SPACE(1) as PLAN_OP,
         SPACE(1) as PLAN_ST,
::       Rodzaj zamówienia
         TYPYZAM.R as ZAM_R,
::       Limit źródłowy pozycji zamówienia
         ZK_P.ZLIM as ZLIM,
::       Zlecenie źródłowe
         SPACE(20) as ZL,
::       Znacznik, czy zlecenie źródłowe powstało jako kopia albo na skutek podziału innego zlecenia
         SPACE(1) as ZL_COPY,
::       Przewodnik źródłowy
         SPACE(30) as ZGH,
::       Pozycja przewodnika źródłowego
         0 as ZGP
      from ZK_P
         join M using(ZK_P.M,M.REFERENCE)
         join ZK_N using(ZK_P.N,ZK_N.REFERENCE)
         left join HAN using(ZK_N.HAN,HAN.REFERENCE)
         join TYPYZAM using(ZK_N.T,TYPYZAM.REFERENCE)
         join JM using(M.J,JM.REFERENCE)
         left join KH using(ZK_N.KH,KH.REFERENCE)
         left join ZLZAM using(ZK_P.REFERENCE,ZLZAM.ZAMPOZ)
         left join DK_C using(ZK_P.DK_C,DK_C.REFERENCE)
         left join PROJEKTY using(ZK_P.PROJEKTY,PROJEKTY.REFERENCE)
         left join MG using(ZK_P.MG,MG.REFERENCE)
      where '+{? _zk_n=null() | _tryb<>3 || '' || 'ZK_N.REFERENCE=:_b and ' ?}+
            {? exec('enabled','zl_uslugi')
            || '(M.R=\'W\' or M.R=\'P\' or M.RODZ=\'U\')'
            || '(M.R=\'W\' or M.R=\'P\')'
            ?}
            +' and ZK_N.AKC=\'T\' and ZK_N.A=\'A\' and ZK_P.TOP=1 and ZK_N.STAN<>\'ZRE\'
            and '':_a'' LIKE ''%''||TYPYZAM.T||''%''
      group by ZK_P.REFERENCE, ZK_P.POZ, M.KTM, M.N, ZK_P.ILZ, ZK_P.ILP, ZK_P.ILRB, ZK_N.SYM, ZK_P.PL_DATA, ZK_P.PL_TIME,
            ZK_P.DT, ZK_N.KH, KH.KOD, KH.SKR, KH.NAZ, KH.REFERENCE, HAN.KOD, HAN.NAZ, PROJEKTY.SYM,
            M.REFERENCE, JM.KOD, DK_C.M_ATR, DK_C.REFERENCE, TYPYZAM.R, ZK_P.ZLIM, MG.SYM
      order by KOD, PL_DATA, PL_TIME',_zam,_zk_n
   );

:: Wyjście awaryjne
   {? type_of(_tab)=type_of(~~)
   || exec('err_sql','#sql');
      _exit();
      return()
   ?};

   _korlim:=exec('get','#params',500221,2);
   {? exec('enabled','zl_uslugi')
   || exec('mat_grp_f3','zl_uslugi',0,'W')
   || exec('slo_m_ok','material','T',0,,'W');
      exec('filter','material','WP')
   ?};
:: Ustalenie wartości dodatkowych pól
   {? _tab.first()
   || {!
      |? ZLZAM.index('ZMZL');
         ZLZAM.prefix(_tab.REF);
         {? ZLZAM.first()
         || {!
            |? REZ.index('ZLZAM');
               REZ.prefix(ZLZAM.ref(),'B');
               {? REZ.first()
               || {!
                  |? _tab.IL_REZ-=REZ.ILR;
                     _tab.IL_WYTW+=REZ.ILR;
                     REZ.next()
                  !}
               ?};
               ZLZAM.next()
            !}
         ?};

::       Ustawianie wartości atrybutów
         {? _tab.DK_C<>''
         ||
            {? var_pres('_buffer')>100
            || obj_del(_buffer)
            ?};
            DK_C.cntx_psh();
            DK_C.use(8+_tab.DK_C);
            DK_C.clear();
            {? DK_C.seek(_tab.DK_C)
            || _buffer:=exec('buffer','mat_atr');
               _buffer.get_dkc();
               _buffer.set_tab(_tab)
            ?};
            DK_C.cntx_pop()
         ?};

::       Ustawianie danych źródłowych: zlecenie, przewodnik, pozycja (dla zamówień wewnętrznych limitowych)
         {? _tab.ZAM_R='W' & _tab.ZLIM<>''
         || _args:=obj_new('ZL','ZL_COPY','ZGH','ZGP');
            exec('FindAndGet','#table',ZLIM,_tab.ZLIM,,"
                  _args:=_b;
                  _args.ZL:=ZGP().ZL().SYM;
                  _args.ZL_COPY:={? ZL.IDSRC='' || 'N' || 'T' ?};
                  _args.ZGH:=ZGP().NRZLP().NRPRZ;
                  _args.ZGP:=ZGP().NRP;
                  ~~
               ",,_args
            );
            _tab.ZL:=_args.ZL;
            _tab.ZL_COPY:=_args.ZL_COPY;
            _tab.ZGH:=_args.ZGH;
            _tab.ZGP:=_args.ZGP;
            obj_del(_args)
         || _tab.ZL:='';
            _tab.ZL_COPY:='N';
            _tab.ZGH:='';
            _tab.ZGP:=0
         ?};

::       Zmniejszenie ilości do wytworzenia o korekty limitów
         {? _korlim='N' & _tab.ZAM_R='W' & _tab.ZLIM<>''
         || ZLIM.use(ref_name(_tab.ZLIM));
            ZLIM.prefix();
            {? ZLIM.seek(_tab.ZLIM)
            || ZLIM.index('ZKK');
               ZLIM.prefix(ZLIM.ZLEC,ZLIM.LIMIT,ZLIM.NR);
               {? ZLIM.first()
               || {!
                  |? {? ZLIM.AKC='T'
                     || _tab.IL_WYTW-=ZLIM.LIL
                     ?};
                     ZLIM.next()
                  !}
               ?}
            ?}
         ?};

::       Ustawianie znacznika planowania operacyjnego
         {? exec('zam_planned','po_plan',_tab.REF)>0
         || _tab.PLAN_OP:='T'
         || _tab.PLAN_OP:='N'
         ?};

::       Ustawianie znacznika planowania strategicznego
         {? exec('zkp_pxed_sql','px_tie',_tab.REF)>0
         || _tab.PLAN_ST:='T'
         || _tab.PLAN_ST:='N'
         ?};

::       Ustawianie znacznika dostępności technologii
         _potw:=exec('potw_t','!tte_pzl_dzwe',_tab.M_REF);
         {? _potw=1
         || _tab.POTW_T:='T'
         |? _potw=0
         || _tab.POTW_T:='P'
         || _tab.POTW_T:='N'
         ?};

::         _tab.IL_ZL-=_ujil;
         _tab.put();
         {? _tab.IL_ZL>=_tab.IL_WYTW
         || _tab.del()
         || _tab.next()
         ?}
      !}
   ?};

   _tab.fld_attr('REF',2);
   _tab.fld_attr('T',2);
   _tab.fld_attr('KH',2);

:: Okno
   _wer:=_tab.mk_sel(
      {? _zk_n=null()
      || 'Pozycje zamówień do wytworzenia'
      || 'Pozycje zamówienia %1 do wytworzenia'[exec('record','#to_string',_zk_n)]
      ?},
      'P',,'#zlisty'+$(_zk_n=null()),1,2,,,'U',,,,,'html_maximized'
   );

:: Pola
   _tab.win_fld(_wer,,'KOD',,,20,,,'Kod produktu'@,,'Indeks materiałowy'@);
   _tab.win_fld(_wer,,'NAZ',,,25,,,'Nazwa produktu'@,,'Nazwa materiału'@);
   _tab.win_fld(_wer,,'IL_ZAM',,,12,ST.DOKL_P,,'Zamówione'@,,'Zamówiona ilość'@);
   _tab.win_fld(_wer,,'IL_POZ',,,12,ST.DOKL_P,,'Do realizacji'@,,'Ilość do realizacji'@);
   _tab.win_fld(_wer,,'IL_REZ',,,12,ST.DOKL_P,,'Rezerwacje'@,,'Ilość zarezerwowana'@);
   _tab.win_fld(_wer,,'IL_WYTW',,,12,ST.DOKL_P,,'Do wytworzenia'@,,'Ilość do wytworzenia'@);
   _tab.win_fld(_wer,,'IL_ZL',,,12,ST.DOKL_P,,'Zlecone'@,,'Ilość zlecona'@);
   _tab.win_fld(_wer,,'JM',,,6,,,'jm'@,,'Jednostka miary'@);
   {? _zk_n=null() || _tab.win_fld(_wer,,'SYM',,,,,,'Zamówienie'@,,'Symbol zamówienia'@) ?};
   _tab.win_fld(_wer,,'POZ',,,4,,,'Poz.'@,,'Numer pozycji na zamówieniu'@);
   _tab.win_fld(_wer,,'PL_DATA',,,-10,,,'Termin realizacji'@,,'Planowany termin realizacji'@);
   _tab.win_fld(_wer,,'PLAN_ST',,,-6,,,'Plan strategiczny'@,,'Czy zamówienie znajduje się w planie strategicznym? (T/N)'@,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'PLAN_OP',,,-6,,,'Plan operacyjny'@,,'Czy zamówienie znajduje się w planie operacyjnym? (T/N)'@,2,,"\'T\'","\'N\'");
   _tab.win_fld(_wer,,'POTW_T',,,-6,,,'Technologia'@,,'Czy technologia jest dostępna?(T-tak, N-brak, P-niezatwierdzona lub archiwalna)'@,2,,"\'T\'","\'N\'","\'P\'");

:: Akcje
   {? _tryb=1
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zmp_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   |? _tryb=2
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zmpz_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   |? _tryb=3
   || _tab.win_act(_wer,0,'Formuła','Generuj'@@,,'Nowe zlecenie'@,
         "_args_zl:=params_exec('action_zkn_generate','!tte_pzl_dzwe')",,1,
         1,"params_exec('action_generate_bg','!tte_pzl_dzwe')","params_exec('action_generate_ag','!tte_pzl_dzwe')",'G'
      );
      task_attach('TTE_PZL_DZWE')
   ?};
   {? _zk_n<>null()
   || _formula:="
         _zk_n:=params_get().env_zlisty.ZK_N;
         ZK_N.cntx_psh();
         ZK_N.prefix();
         {? ZK_N.seek(_zk_n)
         || exec('init_blk','zamsiw_nag');
            {? exec('zam_lock','zamsiw_nag')
            || sel_exit()
            ?};
            exec('done_blk','zamsiw_nag')
         ?};
         ZK_N.cntx_pop();
         ~~
      ";
      _tab.win_act(_wer,0,'Formuła','Zakończ'@@,,,_formula,,,,,,'Z');
      _tab.win_act(_wer,1,'Formuła','Zakończ'@@,,,_formula,,1,,,,'Z')
   ?};
   _tab.win_act(_wer,0,'Formuła','Lista zle&ceń'@@,,'Lista zleceń wygenerowanych do pozycji zamówienia'@,
      "params_exec('zl_do_zmp','!tte_pzl_dzwe')",,,,,,'C');
   _tab.win_act(_wer,0,'Formuła','Su&ma'@@,,'Podsumowanie ilości z zaznaczonych pozycji'@,
      "params_exec('zmp_sum','!tte_pzl_dzwe')",,,1,
      "params_exec('zmp_sum_bg','!tte_pzl_dzwe')","params_exec('zmp_sum_ag','!tte_pzl_dzwe')",'M');
   _tab.win_act(_wer,,'Menu','Fu&nkcje'@@,,'Funkcje dodatkowe'@,,,,,,,'N');
   _tab.win_act(_wer,,'Formuła','Analiza'@@,'#N','Analiza dostępności materiału w czasie'@,
      "params_exec('zmp_analiza_b','!tte_pzl_dzwe')","params_exec('zmp_analiza_a','!tte_pzl_dzwe')",,1,
      "params_exec('zmp_analiza_bg','!tte_pzl_dzwe')","params_exec('zmp_analiza_ag','!tte_pzl_dzwe')",'A');
   _tab.win_act(_wer,0,'Szukaj');
   _tab.win_act(_wer,0,'Kolejność');
   _tab.win_act(_wer,0,'Formuła','Legenda'@@,,,"exec('legenda','color','ZAMPOZ#01')",,,,,,'L');
   _tab.win_act(_wer,,'Rekord',,,,"Color.rekprzed('ZAMPOZ#01#01')");
   _formula:="
      ZK_P.cntx_psh();
      ZK_P.clear();
      {? ZK_P.seek(cur_tab(1,1).REF)
      || exec('wys_pozy','zamsiw_poz',1)
      ?};
      ZK_P.cntx_pop();
      ~~
   ";
   _tab.win_act(_wer,,'Wyświetl',,,,_formula);

:: Przyciski
   {? _zk_n<>null() || _tab.win_btn(_wer,'text=%1,panel=bottom,align=end'['Zakończ'@],'menu:Z') ?};

   _formula:="
      {? cur_tab(1,1).ATR<>''
      || 'xwin16.png:50'
      || exec('pusta','#icon')
      ?}
   ";
   _tab.win_fml(_wer,,'POZ',,'ICON_BEFORE',_formula);

   _tab.win_sel(_wer);

   _filter:=exec('get','#params',500220,2);
   {? _tab.f_set(,,'IL_ZAM<>IL_ZL'+{? _filter<>'' || ' and '+_filter || '' ?})
   ||
::    Otwieram bieżącą maskę technologii
      exec('tktl_use','tech_common');

::    Środowisko generatora z pozycji zamówień
      _env_zlisty:=exec('env_zlisty','zl_gen',0,_tab,_zk_n);

      params_set('env_zlisty',_env_zlisty);
      {? _tab.select()
      || _result:=1
      |? _tryb=3 & _tab.size()=0
      || _result:=1
      ?};
      {? _tryb=3
      ||
::       Odświeżenie okna (danych) ze zleceniami zamówienia
         exec('zk_n_zl_rfr','!tte_pzl_dzwe',cur_tab(1,1))
      ?}
   ?}
?};

_exit();

_result


\auto_zkp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [12.41]
:: OPIS: Akcja generowania jednego lub wielu zleceń na podstawie pozycji zamówienia
::       Funkcja najbardziej ogólna, umożliwia wygenerowanie zlecenia na podstawie planu
::   WE: _args - argumenty dla funkcji generujacej, wynik dzialania exec('auto_args','zl_gen')
::  OLD: \auto_zkp/zl.fml
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('auto_args','zl_gen')
?};
_mp:=params_get().mp;
_in:=params_get().in;

_result:=0;
_can_continue:=1;
:: Czy wyświetlać pytania
_dialog:={? _mp.isService() | (_mp.isAutoRun() & _in.ZK_P) || 0 || 1 ?};

ZLZAM.cntx_psh();
ZL.cntx_psh();
ZK_P.cntx_psh();
ZK_P.use(form(8+_args.SRC_REF));
ZK_P.clear();

{? ZK_P.seek(_args.SRC_REF)
||
   _what:=_args.SYMBOL+' poz.'+$_args.POZ;
:: Blokuję pozycję zamówienia na czas generowania zlecenia
   _ses_id:=exec('blk_lock','#table','ZK_P',ZK_P.ref(),,2);
   {? _ses_id=ZK_P.ses_id()
   || _locked:=1
   || _locked:=0;
      _msg:='Pozycja zamówienia: %1 jest redagowana przez użytkownika \'%2\' na terminalu \'%3\'.'@
            [_what,ZK_P.ses_info(_ses_id,'log_name'),ZK_P.ses_info(_ses_id,'log_tty')];
      {? ~_mp.isService()
      || FUN.info(_msg)
      ?}
   ?};

   {? _locked>0
   ||
::    Sprawdzenie produktu w zleceniach nadrzędnych
      {? _can_continue>0 & _args.ZL_NAD<>null()
      || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,"$KTM=_b.M",0,_args)
         || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
            {? _args.GRUPA>0
            || KOMM.add(_msg,4)
            || FUN.info(_msg)
            ?};
            _can_continue:=0
         || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,
                  "exec('chk_ktm','zl_head',TREE,exec('FindAndGet','#table',M,_b.M))>0",0,_args
               )
            || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
               {? _args.GRUPA>0
               || KOMM.add(_msg,4)
               || FUN.info(_msg)
               ?};

               _can_continue:=0
            ?}
         ?}
      ?};

::    Sprawdzenie terminu realizacji
      {? _can_continue>0
      || {? _args.DIALOG>0
         || {? _args.PL_DATA<date()
            || {? ~FUN.ask('Generowanie zlecenia\n\n'
                     'Termin realizacji dla %1 jest wcześniejszy, niż data powołania zlecenia.\n'
                     'Czy wygenerować zlecenie (konieczna będzie korekta daty na zleceniu)?'@[_what],
                  )
               || _can_continue:=0
               ?}
            ?}
         || {? _args.PL_DATA<date()
            || _can_continue:=0;
               _msg:='Termin realizacji dla %1 jest wcześniejszy, niż data powołania zlecenia.'@[_what];
               {? _args.GRUPA>0
               || KOMM.add(_msg,4)
               || FUN.info(_msg)
               ?}
            ?}
         ?}
      ?};

::    Sprawdzam czy na zamówieniu była podana partia i jeśli tak to blokuję tworzenie zlecenia
      {? _can_continue>0 & _args.DK_C<>''
      || DK_C.cntx_psh();
         DK_C.use(form(8+_args.DK_C));
         DK_C.clear();
         {? DK_C.seek(_args.DK_C)
         || _buf_zam:=exec('buffer','mat_atr');
            _buf_zam.get_dkc();
            {? _buf_zam.has_part()>0
            || _can_continue:=0;
               _msg:='Pozycja zamówienia: %1 posiada atrybut typu \'Partia\'. '
                     'Tworzenie zlecenia na jej podstawie niedozwolone.'@[_what];
               {? _args.GRUPA>0
               || KOMM.add(_msg,2)
               || FUN.emsg(_msg)
               ?}
            ?}
         ?};
         DK_C.cntx_pop()
      ?};

      {? _can_continue>0
      || ZK_P.clear();
         {? ZK_P.seek(_args.SRC_REF)
         || _refp:=ZK_P.ref();
            _refn:=ZK_N.ref();
            {? exec('sprdt','zl_head')
            ||
::             Sprawdzamy czy zamówienie zostało zaplanowane w planie opercyjnym, jeśli tak to łączymy zlecenie z planem
               _planzas:=exec('zam_planned','po_plan',_args.SRC_REF);

               {? _planzas>0 & _args.IL_WYTW>0
               ||
                  {? _planzas<=_args.IL_WYTW
                  ||
::                   PLAN OPERACYJNY
                     _msg:='Pozycja zamówienia: %1 została zaplanowana w planie operacyjnym w ilości: %2 %3.\n\n'
                           'Aby utworzyć zlecenie najpierw należy je usunąć z planu'@[_what,$_planzas,_args.JM_SYM];
                     {? _args.DIALOG>0
                     || _ask:=FUN.choice(_msg,,'Usuń plan'@)
                     || FUN.info(_msg);
                        _ask:=0
                     ?};
                     {? _ask=1
                     || {? exec('del_zam','po_plan',_args.SRC_REF)>0
                        || exec('auto_zl_core','zl_gen',_args)
                        ?}
                     |? _ask=2
                     ||
::                      Ta ścieżka jest już martwa ponieważ brakuje czynności przekształcającej
::                      plan operacyjny zamówienia w plan zlecenia. Jeżeli taka czynność by była
::                      to można by zbudować proces który odzwierciedlał starą funkcjonalność czyli:
::                      1. Wygenerowanie zlecenia
::                      2. Wygenerowanie technologii zlecenia i zatwierdzenie jej
::                      3. Wygenerowanie przewodników zlecenia na podstawie planu operacyjnego
::                      4. Przepięcie planu operacyjnego na zlecenie (nowa czynność)

::                      Jeśli typ zlecenia nie wskazany to pokazuje okno z wyborem
                        {? _args.ZTP=null()
                        || _args.ZTP:=exec('sel_tpzl','zl_gen')
                        ?};

                        {? _args.ZTP<>null()
                        ||
::                         1. Dodajemy zlecenie
                           KOMM.init(,,'Generowanie zlecenia'@,'');
::                         szukam technologii wg której powstał plan zamówienia
                           _tech:=exec('zam_tech','po_plan',_args.SRC_REF);
                           exec('add_ref','zl_gen');
                           __REF.ZAMPOZ:=_args.SRC_REF;
                           __REF.T:=BIT.sqlint(_args.M);
                           __REF.IL:=_args.IL_WYTW;
                           __REF.ILZL:=_args.IL_ZL;
                           __REF.SYM:=_args.SYMBOL;
                           __REF.add();

                           {? var_pres('_args_gen')>100
                           || obj_del(_args_gen)
                           ?};
                           _args_gen:=exec('gen_zlec_a','zl_gen');
                           _args_gen.KTM:=_args.KTM;
                           _args_gen.DTR:=_args.DTR;
                           _args_gen.ILOSC:=_args.IL_WYTW;
                           _args_gen.KH:=_args.KH_REF;
                           _args_gen.TKTL:=_tech;
                           _args_gen.PL_DATA:=_args.PL_DATA;
                           _args_gen.PL_TIME:=_args.PL_TIME;
                           _args_gen.PL_DIR:=_args.PL_DIR;
                           _args_gen.PL_FORCE:=_args.PL_FORCE;
                           _args_gen.DK_C:=_args.DK_C;
                           _args_gen.ZTP:=_args.ZTP;
                           _args_gen.ZL_NAD:=_args.ZL_NAD;
                           _args_gen.COMPLEX:=_args.COMPLEX;
                           _args_gen.PROJEKTY:=_args.PROJEKTY;
                           _args_gen.OPIS:=_args.OPIS+' (na podstawie planu operacyjnego)';
                           _args_gen.UWAGI:=_args.UWAGI;
                           _args_gen.OPIS_DOD:=_args.OPIS_DOD;

                           _zl:=exec('gen_zlec','zl_gen',_args_gen);

                           exec('aktznzkp','zamsiw_poz',_refp,1);
                           exec('aktznzkn','zamsiw_nag',_refn,1);

                           {? _zl<>null()
                           || _ok:=1;
::                            Dodaje utworzone zlecenie do tabeli wynikowej
                              _args.RESULT.add(_zl)
                           || _ok:=0
                           ?}
                        ?}
                     ?}
                  ||
::                   Na zamówieniu zostało mniej do realizacji niż pierwotnie było zaplanowane w planie operacyjnym
::                   więc pytam czy usunąć plan
                     _msg0:='';
                     _msg1:='Pozycja zamówienia: '+_what;
                     _msg2:='została zaplanowana w planie operacyjnym w ilości większej niż pozostało do realizacji na zamówieniu.';
                     _msg3:='Zaleca się usunięcie tej pozycji z planu operacyjnego i utworzenie zlecenia nie powiązanego z planem.';
                     _msg4:='Aby zlecenie to pojawiło się w planie operacyjnym należy je ręcznie zaplanować.';
                     _msg_glued:=exec('form','#string','L',_msg1
                                                         ,_msg2
                                                         ,_msg0
                                                         ,_msg3
                                                         ,_msg4);
                     {? _args.DIALOG>0
                     || _ask:=FUN.choice(_msg_glued,,'Usuń plan zamówienia'@)
                     || FUN.info(_msg_glued);
                        _ask:=0
                     ?};
                     {? _ask=1
                     || {? exec('del_zam','po_plan',_args.SRC_REF)>0
                        || exec('auto_zl_core','zl_gen',_args)
                        ?}
                     ?}
                  ?}
               || exec('auto_zl_core','zl_gen',_args)
               ?}
            ?}
         ||
            {? _args.GRUPA>0
            || KOMM.add('Wskazana pozycja zamówienia została już usunięta.'@,14)
            || FUN.emsg('Wskazana pozycja zamówienia została już usunięta.\n'
                        'Proszę ponownie uruchomić funkcję.'@)
            ?}
         ?}
      ?};
::    Odblokowuje ZK_P
      exec('blk_unlock','#table','ZK_P',ZK_P.ref())
   ?}
?};
ZK_P.cntx_pop();
ZLZAM.cntx_pop();
ZL.cntx_pop();
~~


\action_generate_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Przed grupowym generowaniem zleceń z pozycji zamówień
::       Kontekst wywołania: tabela "__ZMP"
::   WY: 0 / 1
::  OLD: \genprzl/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_result:=exec('zl_gen_bg','zl_gen',0);
_result


\action_generate_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MKO [8.60]
:: OPIS: Po grupowym generowaniu zleceń z pozycji zamówień
::  OLD: \genpozl/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('zl_gen_ag','zl_gen',0);
~~


\potw_t
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Ustawia flage dla ikony POTW_T (potwierdzenie dostepnosci technologii)
::       na liscie pozycji zamowien do wytworzenia
::   WE: _a - $M.ref()
::   WY: -1 / 0 / 1
::  OLD: \potw_t/zlec3.fml
::----------------------------------------------------------------------------------------------------------------------
exec('is_tech','tech_common',BIT.sqlint(_a),1)


\zmpsum_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Dodaje zapis do "__ZMPSUM" na podstawie biezacego "__ZMP"
::   WE: _a - tabela "__ZMP"
::  OLD: \zmpsum_add/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_env_zlisty:=params_get().env_zlisty;
_tab:=_env_zlisty.TAB;
_tabsum:=_env_zlisty.TABSUM;

_tabsum.prefix(_tabsum.JM);
{? _tabsum.first()
|| _tabsum.IL_ZAM+=_tab.IL_ZAM;
   _tabsum.IL_POZ+=_tab.IL_POZ;
   _tabsum.IL_WYTW+=_tab.IL_WYTW;
   _tabsum.IL_ZL+=_tab.IL_ZL;
   _tabsum.put()
|| _tabsum.JM:=_tab.JM;
   _tabsum.IL_ZAM:=_tab.IL_ZAM;
   _tabsum.IL_POZ:=_tab.IL_POZ;
   _tabsum.IL_WYTW:=_tab.IL_WYTW;
   _tabsum.IL_ZL:=_tab.IL_ZL;
   _tabsum.add()
?};
~~


\zmp_sum
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Suma ilosci w oknie "__ZMP"
::  OLD: \zmp_sum/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().env_zlisty.TAB;
_tabsum:=params_get().env_zlisty.TABSUM;

{? _tab.sel_size()=0
|| _tabsum.erase();
   params_exec('zmpsum_add','!tte_pzl_dzwe');
   _tabsum.select()
|| params_exec('zmpsum_add','!tte_pzl_dzwe')
?};
~~


\zmp_sum_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Suma ilości w oknie "__ZMP" - przed grupa
::  OLD: \zmp_sum_bg/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_tabsum:=params_get().env_zlisty.TABSUM;
_tabsum.erase();
1


\zmp_sum_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [12.10]
:: OPIS: Suma ilości w oknie "__ZMP" - po grupie
::  OLD: \zmp_sum_ag/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_tabsum:=params_get().env_zlisty.TABSUM;
_tabsum.select();
~~


\zl_do_zmp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2009+]
:: OPIS: lista zleceń do wybranej pozycji zamówienia
::       wolane z okna "__ZMP"
::  OLD: \zl_do_zmp/zlec5.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=params_get().env_zlisty.TAB;

ZL.cntx_psh();

ZLZAM.index('ZMZL');
ZLZAM.prefix(_tab.REF);
_il:=_ilwyk:=0;
{? ZLZAM.first()
|| {!
   |? _il+=ZLZAM.ILZL;
      _ilwyk+=ZLZAM.ZL().ILWYK;
      ZLZAM.next()
   !}
?};

_wer:=ZLZAM.mk_sel('Zlecenia do pozycji zamówienia'@,'P',,'zlzampoz',20,10,10,,'U');
ZLZAM.win_fld(_wer,VAR,'TYMCZAS',,,10,,,'Stan'@);
ZLZAM.win_fld(_wer,VAR,'STRING',,,15,,,'Symbol'@);
ZLZAM.win_fld(_wer,VAR,'STRING2',,,37,,,'Opis'@);
ZLZAM.win_fld(_wer,VAR,'DATE',,,-10,,,'Termin realizacji'@);
ZLZAM.win_fld(_wer,,'ZL','STAN',,-2,,,'Stan'@);
ZLZAM.win_fld(_wer,,'ILZL',,,10,2,,'Zlecono'@);
ZLZAM.win_fld(_wer,,'ZL','ILWYK',,-15,2,,'Wykonano (rejestracja)'@);
ZLZAM.win_fld(_wer,,'ZL','ILDOK',,-15,2,,'Wykonano (dokumenty)'@);
ZLZAM.win_act(_wer,,'Rekord',,,,"{? ZLZAM.ZL=null()
                                 || VAR.TYMCZAS:='<>';
                                    VAR.STRING:='<>';
                                    VAR.STRING2:='<>';
                                    VAR.DATE:=date(0,0,0)
                                 || VAR.TYMCZAS:='Zlecono'@;
                                    VAR.STRING:=ZLZAM.ZL().SYM;
                                    VAR.STRING2:=ZLZAM.ZL().OPIS;
                                    VAR.DATE:=ZL.DTR
                                 ?}",,0);
ZLZAM.win_act(_wer,,'Kolejność');
ZLZAM.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','#ZL#03','#ZL#05')",,,,,,'L');
ZLZAM.win_act(_wer,,'Wyświetl',,,,"exec('zl_display','zl_head');~~");
_fi:="exec('icon_stan','zl_head')";
ZLZAM.win_fml(_wer,,'ZL','STAN','ICON_BEFORE',_fi);
ZLZAM.win_sel(_wer);
ZLZAM.first();
ZLZAM.select();

ZL.cntx_pop();
~~


\zampoz_rec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2006]
:: OPIS: 'Przed rekord' pozycji listy do wytworzenia (kolorowanie zaległych)
::   WY: Schemat kolorowania
::  OLD: \zampoz_rec/zlec3.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);
{? _tab.IL_ZAM<=_tab.IL_ZL
|| 'ZAMPOZ#01#02'
|? _tab.PL_DATA<date()
|| 'ZAMPOZ#01#01'
|? _tab.IL_ZL<>0 & _tab.IL_ZAM>_tab.IL_ZL
|| 'ZAMPOZ#01#03'
|| ''
?}


\zk_n_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [2008]
:: OPIS: lista zleceń do wszystkich pozycji zamówienia
::       wołane z okna ZK_N.WER
::  OLD: \zk_n_zl/produkt.fml
::----------------------------------------------------------------------------------------------------------------------
:: Sprawdzam czy typ zamówienia jest na liście typów z których można powoływać zlecenia
{? exec('chk_type','zl_gen')=0
|| return()
?};

ZL.cntx_psh();
VAR_DEL.delete('__ZLZAM');
_tab:=exec('zk_n_zl_tab','!tte_pzl_dzwe');
_tab.fld_attr(,2);

_wer:=_tab.mk_sel('Zlecenia do pozycji zamówienia'@,'P',,'zlzamnag',20,10,10,,'U',,,,,'html_maximized');
_tab.win_fld(_wer,,'KTM',,,20,,,'Indeks'@);
_tab.win_fld(_wer,VAR,'TYMCZAS',,,10,,,'Stan'@);
_tab.win_fld(_wer,VAR,'STRING',,,15,,,'Symbol'@);
_tab.win_fld(_wer,VAR,'STRING2',,,37,,,'Opis'@);
_tab.win_fld(_wer,VAR,'DATE',,,-10,,,'Termin realizacji'@);
_tab.win_fld(_wer,ZL,'STAN',,,-2,,,'Stan'@,,'Stan zlecenia: N-w przygotowaniu, Otwarte, Zamknięte'@);
_tab.win_fld(_wer,VAR1,'STAT_PL',,,-2,,,'Plan'@,,'Status planowania zlecenia'@);
_tab.win_fld(_wer,,'ILZL',,,10,ST.DOKL_P,,'Zlecono'@);
_tab.win_fld(_wer,ZL,'ILWYK',,,-15,2,,'Wykonano (rejestracja)'@);
_tab.win_fld(_wer,ZL,'ILDOK',,,-15,2,,'Wykonano (dokumenty)'@);

_tab.win_act(_wer,0,'Formuła','Generuj'@@,,,"exec('zlisty','!tte_pzl_dzwe',3,,ZK_N.ref)",,1,,,,'G');
task_attach('TTE_PZL_DZWE');
_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Generuj'@],'menu:G');
_tab.win_act(_wer,1,'Formuła','Generuj'@@,,,"exec('zlisty','!tte_pzl_dzwe',3,,ZK_N.ref)",,1,,,,'G');
task_attach('TTE_PZL_DZWE');
_tab.win_act(_wer,,'Formuła','Limit&y'@@,,,"exec('kart_lim','zl_limit',1,ZL.ref())",,,,,,'Y');
task_attach('TTE_PZL_DLIM');
_tab.win_act(_wer,,'Formuła','Nielimito&wane'@@,,,"exec('sur_nlim','zl_limit',1,ZL.ref(),,,1)",,,,,,'W');
task_attach('TTE_PZL_DLIM');
_formula:="
   _tab:=tab_tmp(1,'REF','INTEGER','#Zl.ref()');
   _tab.REF:=BIT.sqlint(cur_tab(1,1).REF);
   _tab.add();
   exec('zl_simulation_core','px_logix',_tab);
   ~~
";
_formula_bg:="
   _sel:=cur_tab(1,1).sel_aget();
   _tab:=tab_tmp(1,'REF','INTEGER','#ZL.ref()');
   {? _sel.first()
   || {!
      |? _tab.REF:=BIT.sqlint(exec('FindAndGet','#table',cur_tab(1,1),_sel.REF,,\"REF\",''));
         _tab.add();
         _sel.next()
      !}
   ?};
   exec('zl_simulation_core','px_logix',_tab);
   cur_tab(1,1).sel_adel();
   0
";
_tab.win_act(_wer,,'Formuła','Symuluj &zlecenie'@@,,,_formula,,,1,_formula_bg,,'Z');
_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['Symuluj &zlecenie'@],'menu:Z');
task_attach('TPP_PPS_PPLA');
task_attach('TPP_PPS_DPLA');
_tab.win_act(_wer,,'Menu','P&odgląd planu'@,,,,,,,,,'O');
_btn:=_tab.win_btn(_wer,'text=%1,panel=right,align=begin'['P&odgląd planu'@],'Menu');
_formula_bg:="
   _sel:=cur_tab(1,1).sel_aget();
   _tab:=tab_tmp(1,'REF','INTEGER','#ZL.ref()');
   {? _sel.first()
   || {!
      |? _tab.REF:=BIT.sqlint(exec('FindAndGet','#table',cur_tab(1,1),_sel.REF,,\"REF\",''));
         _tab.add();
         _sel.next()
      !}
   ?};
   exec('select_any_core','px_plan',,ZL,_tab);
   cur_tab(1,1).sel_adel();
   0
";
_tab.win_act(_wer,,'Formuła','Plan strategiczny'@@,'#O',,"exec('select_zl','px_plan')",,,1,_formula_bg,,'P');
_tab.btn_menu(_wer,_btn,'menu:OP');
task_attach('TPP_PPS_PPLA');
task_attach('TPP_PPS_DPLA');
_formula:="
   exec('zl_utilization','po_plan',0,ZL.ref())
";
_tab.win_act(_wer,,'Formuła','Plan &operacyjny'@@,'#O',,_formula,,,,,,'O');
_tab.btn_menu(_wer,_btn,'menu:OO');
task_attach('TPP_PPO_PPPL');
task_attach('TPP_PPO_DPPL');
_tab.win_act(_wer,,'Formuła','Zadan&ia'@@,,,"exec('todo_select','#b__box',ZL.uidref())",,,,,,'I');
_tab.win_act(_wer,,'Kolejność');
_tab.win_act(_wer,,'Formuła','Legenda'@@,,,"exec('legenda','color','#ZL#02','#ZL#03','#ZL#05')",,,,,,'L');
_tab.win_act(_wer,,'Wyświetl',,,,"
   _tab:=cur_tab(1,1);
   {? _tab.REF<>''
   || exec('zl_display','zl_head')
   ?};
   ~~
");
_tab.win_act(_wer,,'Rekord',,,,"
   _tab:=cur_tab(1,1);
   {? _tab.REF=''
   || VAR.TYMCZAS:='<>';
      VAR.A_ZLEC:=null();
      VAR.STRING:='<>';
      VAR.STRING2:='<>';
      VAR.DATE:=date(0,0,0);
      ZL.blank(1)
   || VAR.TYMCZAS:='Zlecono';
      ZL.prefix();
      {? ZL.seek(_tab.REF)
      || VAR.A_ZLEC:=ZL.ref();
         VAR.STRING:=ZL.SYM;
         VAR.STRING2:=ZL.OPIS;
         VAR.DATE:=ZL.DTR;
         {? _a
         || _grayed:=':';
            {? ZL.PLAN_PO='N'
            || _grayed:='O(O)'+_grayed
            ?};
            {? ZL.PLAN_PX='N'
            || {? _tab.sel_size()=0 || _grayed:='O(P)'+_grayed ?}
            || {? _tab.sel_size()=0 || _grayed:='Z'+_grayed ?}
            ?};
            {? ZK_N.AKC<>'T'
            || _grayed:='G'+_grayed
            ?};
            _tab.actions_grayed(cur_win(1,1),_grayed)
         ?}
      || VAR.TYMCZAS:='<>';
         VAR.A_ZLEC:=null();
         VAR.STRING:='<>';
         VAR.STRING2:='<>';
         VAR.DATE:=date(0,0,0);
         ZL.blank(1)
      ?}
   ?};
   ~~
",,0);

_fo:="
   _tab:=cur_tab(1,1);
   _grayed:=':';
   {? ZK_N.AKC<>'T'
   || _grayed:='G'+_grayed+'G'
   ?};
   _tab.actions_grayed(cur_win(1,1),_grayed)
";
_tab.win_act(_wer,1,'Okienko',,,,_fo);

_fi:="
   _res:=exec('icon_stan','zl_head');
   _res
";
_tab.win_fml(_wer,ZL,'STAN',,'ICON_BEFORE',_fi);
_fi:="params_exec('icon_stat_pl','zl_head')";
_tab.win_fml(_wer,VAR1,'STAT_PL',,'ICON_BEFORE',_fi);
_fi:="exec('icon_ktm','zl_head')";
_tab.win_fml(_wer,,'KTM',,'ICON_BEFORE',_fi);
_tab.win_sel(_wer);
_tab.select();
ZL.cntx_pop();
~~


\complex_select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Redagowanie parametru wejsciowego ZLOZONE dla czynności TTE_PZL_DZWE
::----------------------------------------------------------------------------------------------------------------------
_choice:=FUN.choice('Określ zachowanie czynności, gdy technologia produktu zawiera półfabrykaty:'@,,
   'Generować zlecenie &złożone'@,'Generować zlecenie &proste'@,'Decyzja podczas generowania'@);
{? _choice=1 || 'T'
|? _choice=2 || 'N'
|? _choice=3 || 'P'
|| ~~
?}


\zl_to_merge
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.42]
:: OPIS: Obsługa przycisku 'Powiąż' w oknie ZLEC.ZL_GEN:
::       Wybór zlecenia, którego ilość będzie zwiększana zamiast generowania nowego zlecenia z pozycji zamówienia
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? exec('zam_planned','po_plan',$ZLEC.ZK_P)>0
|| FUN.info('Pozycja jest zaplanowana w Planie operacyjnym.'@+'\n'+
            'Powiązanie z innym zleceniem w takim przypadku niedozwolone.'@
   );
   return('')
?};

{? exec('zkp_pxed','px_tie',ZLEC.ZK_P)>0
|| FUN.info('Pozycja jest zaplanowana w Planie strategicznym.'@+'\n'+
            'Powiązanie z innym zleceniem w takim przypadku niedozwolone.'@
   );
   return('')
?};

_date:=exec('FindAndGet','#table',ZK_P,ZLEC.ZK_P,,"PL_DATA",date(0,0,0));
_projekt:=exec('FindAndGet','#table',ZK_P,ZLEC.ZK_P,,"PROJEKTY",null());
_zl:=exec('zl_to_merge','zl_gen',
   VAR.A_T,ZLEC.DK_C,_date,ZLEC.ZTP,ZLEC.KH,ZLEC.TKTL,_projekt,ZLEC.COMPLEX,ZLEC.ZL_MERGE
);
{? _zl.selected
|| ZLEC.ZL_MERGE:=_zl.ZL;
   {? _zl.ZL<>null()
   || ZLEC.ZTP:=ZLEC.ZL_MERGE().TYP;
      ZLEC.TKTL:=ZLEC.ZL_MERGE().KTL;
      ZLEC.RED_KTL:=ZLEC.TKTL().NRK;
      ZLEC.RED_WER:=ZLEC.TKTL().WER
   ?}
?};
''


\zl_unmerge
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.02]
:: OPIS: Obsługa przycisku 'Uzuń powiązanie' w oknie ZLEC.ZL_GEN:
::----------------------------------------------------------------------------------------------------------------------
_env_gen:=params_get().env_gen;
_env_gen.edit_ZTP:=1;
_env_gen.edit_TKTL:=1;
_env_gen.edit_COMPLEX:=1;
ZLEC.ZL_MERGE:=null();
ZLEC.btn_eopt('ZL_GEN','UNMERGE','state=grayed');
''


\zmp_analiza_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed' dla tabeli _env_zlisty.TAB
::----------------------------------------------------------------------------------------------------------------------
_tab:=cur_tab(1,1);

{? exec('is_pdbuf','plan_dostaw')
||
   {? _tab.sel_size()=0
   || exec('env_create','plan_dostaw')
   ?};

   ZK_P.cntx_psh();
   ZK_P.prefix();
   {? ZK_P.seek(_tab.REF)
   || {? ZK_P.M().RODZ='T'
      || _args:=exec('pda_a','plan_dostaw');
         _args.M:=ZK_P.M;
         _args.TM_STAMP:=SYSLOG.tm_stamp();
         _args.DK:={? ZK_P.N().DT>ZK_P.DT || ZK_N.DT+1 || ZK_P.DT+1 ?};
         _args.TK:=time(0,0,0);
         _args.IL:=ZK_P.ILP;
         _args.DW:=ZK_P.PL_DATA;
         _args.TW:=ZK_P.PL_TIME;
         _args.DISP:=0;
         _args.skip_add($ZK_P.ref());
         REZ.index('ZK_P');
         REZ.prefix(ZK_P.ref());
         {? REZ.first()
         || {!
            |? _args.skip_add($REZ.ref());
               REZ.next()
            !}
         ?};
         _res:=exec('pda','plan_dostaw',_args);

         _argse:=exec('an_add_a','plan_dostaw');
         _argse.M:=_args.M;
         _argse.IL:=_args.IL;
         _argse.DW:=_args.DW;
         _argse.TW:=_args.TW;
         _argse.DOSTEPNY:=_res.DOSTEPNY;
         _argse.IL_DOST:=_res.IL_DOST;
         _argse.DM:=_res.NA_KIEDY;
         _argse.skip_add($ZK_P.ref());
         REZ.index('ZK_P');
         REZ.prefix(ZK_P.ref());
         {? REZ.first()
         || {!
            |? _argse.skip_add($REZ.ref());
               REZ.next()
            !}
         ?};
         exec('an_add','plan_dostaw',_argse)
      ?}
   ?};
   ZK_P.cntx_pop();

   {? _tab.sel_size()=0
   || exec('an_select','plan_dostaw');
      exec('env_delete','plan_dostaw')
   ?}
?};
~~


\zmp_analiza_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po' dla tabeli _env_zlisty.TAB
::----------------------------------------------------------------------------------------------------------------------
~~


\zmp_analiza_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'przed grupą' dla tabeli _env_zlisty.TAB
::----------------------------------------------------------------------------------------------------------------------
{? exec('is_pdbuf','plan_dostaw')
|| exec('env_create','plan_dostaw')
|| 0
?}


\zmp_analiza_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.14]
:: OPIS: Analiza dostępności materiałów w czasie - akcja 'po grupie' dla tabeli _env_zlisty.TAB
::----------------------------------------------------------------------------------------------------------------------
exec('an_select','plan_dostaw');
exec('env_delete','plan_dostaw')


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [21.37]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=0;

{? _mp.isService()
|| {? var_pres('ZK_P',_in)=type_of(null()) & _in.ZK_P
   || _zk_n:=exec('FindAndGet','#table',ZK_P,_in.ZK_P,,"N",null());
      _oddz:=exec('FindAndGet','#table',ZK_N,_zk_n,,"ODDZ",'');
      _mag:=exec('FindAndGet','#table',ZK_P,_in.ZK_P,,"MG",null());
      {? _oddz<>'' & _mag
      || _result:=1;
         __PARSES.setVal('OddzialLogProd',_oddz);
         __PARSES.setVal('Magazyn',_mag);
         _args:=__PARSES.args('OkresRok');
         _args.OBSZAR:='LMG';
         _args.AR:=date()~1;
         _args.AM:=date()~2;
         __PARSES.setVal('OkresRok',_args)
      ?}
   ?}
|| _result:=1
?};
_result


\zk_n_zl_tab
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Zwraca tabelę z listą zleceń do wszystkich pozycji zamówienia
::   WY: Utworzona tabela
::----------------------------------------------------------------------------------------------------------------------
_tab:=sql('
   select
      ZL.REFERENCE as REF,
      M.KTM,
      ZL.SYM,
      ZL.OPIS,
      ZL.DTR,
      ZL.STAN,
      ZL.IL,
      ZLZAM.ILZL,
      ZL.ILWYK,
      ZLZAM.POZPLAN
   from ZLZAM
    left join ZL
     join ZK_P using(ZLZAM.ZAMPOZ, ZK_P.REFERENCE)
      join M using(ZK_P.M,M.REFERENCE)
       join ZK_N using(ZK_P.N,ZK_N.REFERENCE)
   where ZK_N.REFERENCE=:_a
   order by M.KTM
',ZK_N.ref());
_tab


\zk_n_zl_rfr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Odświeża zawartość tabeli z listą zleceń do wszystkich pozycji zamówienia
::   WE: _a - uchwyt do tabeli, której zawartość należy odświeżyć
::----------------------------------------------------------------------------------------------------------------------
_tab:=_a;
{? var_pres('_tab')>100
|| _tab_new:=exec('zk_n_zl_tab','!tte_pzl_dzwe');
:: Sprawdzenie zgodności tabel
   {? exec('compare_fld','#table',_tab,_tab_new)
   || exec('tab2tab','#table',_tab_new,_tab,0,1)
   ?}
?};
~~

:Sign Version 2.0 jowisz:1045 2023/10/25 11:20:40 c2ec04c81d637c8ba10772981d45eed5a161c4f25d592056442966c9bf3c043432b0ffd9375911e814757b326172140d832886dfb225229d37b442c6895d9a2871e1aed0ee02d0a3ac788f72ec349f4ce92fb8bc2dd9cc5844d51071ff85292cea1859bf06b9cc0a99c50f52b334261a170fc03bdaea73296b6b8df0ff43a0f7
