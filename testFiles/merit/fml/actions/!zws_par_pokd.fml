:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_par_pokd.fml
:: Utworzony: 19.05.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Formuły czynności ZWS_PAR_POKD - Definicja kartotek dodatkowych.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Definicja kartotek dodatkowych - główna formuła czynności.
::   WE:
::   WY:
::  OLD: \konfig/kart_dod.fml
::----------------------------------------------------------------------------------------------------------------------
KART_DEF.cntx_psh();
KART_DEF.index('SYMBOL');
KART_DEF.prefix();
KART_DEF.win_sel('WER');
KART_DEF.win_edit('RED');
KART_DEF.select();
KART_DEF.cntx_pop();
~~


\kart_def_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli KART_DEF. Formuła wywoływana jest
::       w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(KART_DEF)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

{? _fld='' | _fld='WER'
|| _wer:=KART_DEF.WER;

   _sval:=$(_wer<>'KTOD');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'DOW');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'DO');
   _tab.efld_opt(_we,'mark='+_sval,KART_DEF,'DO');

   _sval:=$(_wer<>'ODDO');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'KTW');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'KT');
   _tab.efld_opt(_we,'mark='+_sval,KART_DEF,'KT');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'F3')
?};

{? _fld='' | _fld='CZYWART'
|| _sval:=$(KART_DEF.CZYWART='_');

   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'WARTOSCW');
   _tab.efld_opt(_we,'enable='+_sval,KART_DEF,'WARTOSC');
   _tab.efld_opt(_we,'mark='+_sval,KART_DEF,'WARTOSC')
?};

1


\kart_def_wer_val_oddo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pola KART_DEF.WER.
::   WE:
::   WY:
::  OLD: \string_ODDO/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
'ODDO'


\kart_def_wer_val_ktod
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pola KART_DEF.WER.
::   WE:
::   WY:
::  OLD: \string_KTOD/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
'KTOD'


\kart_def_wer_val_kart
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pola KART_DEF.WER.
::   WE:
::   WY:
::  OLD: \kart/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
'KART'


\kart_def_wer_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: pkoso [2010]
:: OPIS: Wartość początkowa pola KART_DEF.WER.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_wer_val_kart','!zws_par_pokd')


\kart_def_wer_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola KART_DEF.WER.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_efld_opt','!zws_par_pokd')


\kart_def_czywart_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola KART_DEF.CZYWART.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_efld_opt','!zws_par_pokd')


\kart_def_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KART_DEF.blank();
exec('kart_def_efld_opt','!zws_par_pokd','*',KART_DEF,'RED')


\kart_def_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_efld_opt','!zws_par_pokd','*',KART_DEF,'RED')


\kart_def_zadania_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zadania - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',KART_DEF.uidref())


\kart_def_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_efld_opt','!zws_par_pokd','*',KART_DEF,'RED');
KART_DEF.display()


\kart_def_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli KART_DEF.
::   WE:
::   WY:
::  OLD: \spr_def/kart_dod.fml
::----------------------------------------------------------------------------------------------------------------------
_popraw:=(-menu_txt()='popraw');

_chk:=__CHK.table(KART_DEF,_popraw,,'SYMBOL','NAZWA','OPIS');

{? type_of(_chk)=type_of('') & _chk<>''
:  WypeŁnienie wymaganych pól
|| return(_chk)
|? type_of(_chk)=type_of(0) & ~_chk
:  Unikalność danych
|| return('SYMBOL')
?};

_chk:='';

: Jeżeli Popraw, to czy zmienił się symbol?
{? _popraw
|| KART_DEF.cntx_psh();
   _przed:={? KART_DEF.get() || KART_DEF.SYMBOL || '' ?};
   KART_DEF.cntx_pop()
?};

: Sprawdzenie ewentualnego konfliktu z SLO_TYP
{? ~_popraw | _przed<>KART_DEF.SYMBOL
|| SLO_TYP.cntx_psh();
   _dubelek:=0;
   {? ~_dubelek
   || SLO_TYP.index('SYMBOL');
      SLO_TYP.prefix();
      _dubelek:=SLO_TYP.find_key(KART_DEF.SYMBOL,)
   ?};
   {? ~_dubelek
   || SLO_TYP.index('OPIS');
      SLO_TYP.prefix();
      _dubelek:=SLO_TYP.find_key(KART_DEF.NAZWA,)
   ?};
   {? _dubelek &
      FUN.ask(
         'W systemie zdefiniowany jest już słownik:\n%1 - %2\n'
         'Czy na pewno chcesz zdefiniować kartotekę dodatkową o symbolu "%3"?'@
         [SLO_TYP.SYMBOL,SLO_TYP.OPIS,KART_DEF.SYMBOL]
      )=0
   || _chk:='SYMBOL'
   ?};
   SLO_TYP.cntx_pop();
   {? _chk<>'' || return(_chk) ?}
?};

: Wypełnienie pól wymaganych warunkowo
{? KART_DEF.WER='KART'
|| _chk:=__CHK.record(KART_DEF,,'OD','DO','KT');
   _f3:=1
|? KART_DEF.WER='KTOD'
|| _chk:=__CHK.record(KART_DEF,,'OD','KT');
   _f3:=1
|? KART_DEF.WER='ODDO'
|| _chk:=__CHK.record(KART_DEF,,'OD','DO');
   _f3:=0
?};

{? _chk='' & KART_DEF.CZYWART='_'
|| _chk:=__CHK.record(KART_DEF,,'WARTOSC')
?};

{? _chk='' & _f3
|| _kat:=exec('kat','kart_dod',0);
   {? _kat.STATUS<>''
   || FUN.emsg('Pole notatnikowe "Kategoria"\n'+_kat.STATUS);
      _chk:='F3'
   ?}
?};

: Sprzątanie
{? _chk=''
|| _wer:=KART_DEF.WER;
   {? _wer='KTOD'
   || KART_DEF.DOW:=0;
      KART_DEF.DO:=''
   |? _wer='ODDO'
   || KART_DEF.KTW:=0;
      KART_DEF.KT:='';
      KART_DEF.memo_set('','F3')
   ?}
?};

_chk


\kart_def_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu. Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli
::       KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: Porządki - zerowanie pól, które są "niedostępne".
_wer:=KART_DEF.WER;
{? _wer='KTOD'
|| exec('blank','#field',KART_DEF,1,'DOW','DO')
|? _wer='ODDO'
|| exec('blank','#field',KART_DEF,1,'KTW','KT','F3')
?};

{? KART_DEF.CZYWART<>'_'
|| exec('blank','#field',KART_DEF,1,'WARTOSCW','WARTOSC')
?};
1


\kart_def_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_modb','!zws_par_pokd')


\kart_def_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('kart_def_modb','!zws_par_pokd')


\kart_def_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli KART_DEF.
::   WE: _a - Wynik wykonania właściwego KART_DEF.put().
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

{? bfld('WER')='ODDO'
:: Jeżeli okno nie obsługiwało kategori, to nie ma potrzeby robienia czegokolwiek ze słownikiem (nie było go).
|| return()
?};

_bsymbol:=bfld('SYMBOL');

{? KART_DEF.WER='ODDO'
:: Jeżeli kartoteka już nie obsługuje kategorii to należy usunąć pozycje słownika.
|| exec('slo_typ_kod_del','!zws_par_pokd',_bsymbol)

|? _bsymbol<>KART_DEF.SYMBOL | bfld('NAZWA')<>KART_DEF.NAZWA
:: Jeżeli zmienił się symbol lub nazwa, to trzeba zaaktualizować symbol/nazwę słownika.
|| SLO_TYP.cntx_psh();
   SLO_TYP.index('SYMBOL');
   SLO_TYP.prefix();
   {? SLO_TYP.find_key(_bsymbol,)
   || _put:=0;
      {? SLO_TYP.SYMBOL<>KART_DEF.SYMBOL
      || SLO_TYP.SYMBOL:=KART_DEF.SYMBOL;
         _put+=1
      ?};
      {? SLO_TYP.OPIS<>KART_DEF.NAZWA
      || SLO_TYP.OPIS:=KART_DEF.NAZWA;
         _put+=1
      ?};
      {? _put
      || SLO_TYP.put()
      ?}
   ?};
   SLO_TYP.cntx_pop()
?};

~~


\kart_def_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli KART_DEF.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KART_DEF.WER<>'ODDO'
:: Jeżeli usuwana kartoteka obsługiwała kategorie, to należy usunąć pozycje słownika.
|| exec('slo_typ_kod_del','!zws_par_pokd',KART_DEF.SYMBOL)
?};
1


\kart_def_memo_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Wyzwalacz "memo_put - po" dla tabeli KART_DEF.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::       _b [STRING]  - Akronim zapisywanego pola.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1
|| return()
?};

:: Nie ma znaczenia co jest w buforze, bo bufor może nie zostać zapisany. Ważne więc co jest na dysku.
:: Jeżeli bufor KART_DEF zostanie zapisany, to ewentualne zmiany zostaną obsłużone przez wyzwalacz "Popraw - po".
_def:=obj_new('ok','WER','SYMBOL','NAZWA');
KART_DEF.cntx_psh();
{? _def.ok:=KART_DEF.get()
|| _def.WER:=KART_DEF.WER;
   _def.SYMBOL:=KART_DEF.SYMBOL;
   _def.NAZWA:=KART_DEF.NAZWA
?};
KART_DEF.cntx_pop();
{? ~_def.ok
|| undo('Odczyt definicji kartoteki dodatkowej %1 nie powiódł się.'@ [KART_DEF.SYMBOL]);
   return()
?};

{? _b='F3'
|| {? _def.WER='ODDO'
::    Jeżeli kartoteka nie obsługuje kategorii, zmiany w pozycjach słownika są zbęddne.
   || return()
   ?};

   _kat:=exec('kat','kart_dod',1,'PT');
   {? _kat.STATUS<>''
   || undo(_kat.STATUS);
      return()
   ?};

   SLO_TYP.cntx_psh();
   SLO_TYP.index('SYMBOL');
   SLO_TYP.prefix(_def.SYMBOL,);
   SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');

   _ref:=null();
:: Synchronizacja słownika - Etap I.
   {? SLO_TYP.first()
   || _ref:=SLO_TYP.ref();
      SLO_KOD.prefix(_ref);
      {? SLO_KOD.first()
      || {!
         |? {? _kat.TAB.find_key(SLO_KOD.KOD,)
::             Aktualizujemy nazwy pozycji, które nadal są elementami słownika.
            || {? SLO_KOD.NAZWA<>_kat.TAB.OPIS
               || SLO_KOD.NAZWA:=_kat.TAB.OPIS;
                  SLO_KOD.put()
               ?};
               SLO_KOD.next()
::             Usuwamy pozycje, których nie ma obecnie w definicji kategorii.
            || SLO_KOD.del()
            ?}
         !}
      ?}

::    Słownik nie istnieje - trzeba go założyć.
   || SLO_TYP.blank();
      SLO_TYP.SYMBOL:=_def.SYMBOL;
      SLO_TYP.OPIS:=_def.NAZWA;
      {? SLO_TYP.add()
      || _ref:=SLO_TYP.ref()
      ?}
   ?};

   {? _ref=null()
   || undo('Utworzenie słownika kategorii dla kartoteki dodatkowej %1 nie powiodło się.'@ [_def.SYMBOL])

::    Synchronizacja słownika - Etap II.
   || SLO_KOD.prefix(_ref);
      {? _kat.TAB.first()
      || {!
         |? {? ~SLO_KOD.find_key(_kat.TAB.SYMBOL,)
::             Dodajemy nowe pozycje.
            || SLO_KOD.blank(1);
               SLO_KOD.SLO_TYP:=_ref;
               SLO_KOD.KOD:=_kat.TAB.SYMBOL;
               SLO_KOD.NAZWA:=_kat.TAB.OPIS;
               SLO_KOD.SYSTEM:='N';
               SLO_KOD.add()
            ?};
            _kat.TAB.next()
         !}
      ?}
   ?};

   SLO_KOD.cntx_pop();
   SLO_TYP.cntx_pop()
?};

~~


\slo_typ_kod_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.42]
:: OPIS: Formuła usuwa wszystkie pozycje słownika SLO_KOD związane ze słownikiem SLO_TYP wskazanym przez symbol.
::       Jeżeli słownik nie jest już wykorzystywany w systemie (brak dowiązań), to również jest usuwany.
::   WE: _a [STRING] - Symbol słownika.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('')
|| _sym:=_a
|| return(0)
?};

SLO_TYP.cntx_psh();
SLO_TYP.index('SYMBOL');
SLO_TYP.prefix(_sym,);
{? SLO_TYP.first()
|| SLO_KOD.cntx_psh();
   SLO_KOD.index('KOD');
   SLO_KOD.prefix(SLO_TYP.ref());
   {? SLO_KOD.first()
   || {! |? SLO_KOD.del() !}
   ?};
   SLO_KOD.cntx_pop();
   {? SLO_TYP.count()=0
   || SLO_TYP.del()
   ?}
?};
SLO_TYP.cntx_pop();
1

:Sign Version 2.0 jowisz:1028 2019/06/07 15:56:05 a50a9b2191f0419d7125003d0eac2b122bdaab030fd6aebbc909f6dd3b1829ac66eab5cb44a378ba749fe2c25c7245636acf91f2d824841535603e8d421b733df31f3e17f3d52745244dac6702cbf51a5aaa7f1739a002f1ddb327050400989238cbb5cddab261dda70ba720264375b2b3e44a450c50b36aac26ba7d8195a59b
