:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_zes_zedo.fml
:: Utworzony: 06.10.2021
:: Autor: achol
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_ZES_ZEDO - Załączniki wniosków kadrowych.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Generowanie załączników na podstawie wniosków z Portal HR powiązanych z dokumentacją pracowniczą.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL

{? ~FUN.ask(
      'Uruchomienie tej funkcji spowoduje wygenerowanie\n'
      'załączników z wnioskami kadrowymi złożonymi na Portal HR,\n'
      'które rozpoczynają się w zadanym okresie.'@+'\n'+
      'Kontynuować?'@
   )
|| return()
?};

_PAR:=exec('settings','!pkd_zes_zedo');

{? ~exec('settings_set','!pkd_zes_zedo',_PAR)
|| return()
?};

_chooser:=exec('choose_etypy','!pkd_zes_zedo');
{? type_of(_chooser)=type_of(~~)
|| return()
|? ~exec('any_chosen','!pkd_zes_zedo',_chooser)
|| return()
|| exec('save_chosen','!pkd_zes_zedo',_chooser)
?};

_prac:=exec('wybierz_prac','!pkd_zes_zedo',_chooser);

{? var_pres('P',_prac)=118 & _prac.P.first()
|| exec('gen_zal','!pkd_zes_zedo',_chooser,_prac,_PAR)
?};
~~


\settings
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zwraca bufor ustawień dla mechanizmu generowania załączników z wniosków kadrowych.
::   WE:
::   WY: bufor dla ustawień
::----------------------------------------------------------------------------------------------------------------------
_PAR:=tab_tmp(1
   ,'OD','DATE','Data początku okresu'@
   ,'DO','DATE','Data końca okresu'@
   ,'TO','INTEGER','We wskazanym okresie'@
   ,'OVR','INTEGER','Sposób postępowania w przypadku, gdy załącznik już istnieje'@
);
_we:=_PAR.mk_edit('%1 - %2' ['Generowane załączników'@,'Wnioski kadrowe'@],,'#gen_edokum_par');
_PAR.win_esep(_we,'Parametry'@);
_PAR.win_efld(_we,,'OD',,,,,,,,'Data początku analizowanego okresu'@);
_PAR.win_efld(_we,,'DO',,,,,,,,'Data końca analizowanego okresu'@);
_PAR.win_efld(_we,,'TO',,,,,,,
   ,'W jaki sposób wybierane są wnioski'@,'radio-buttons','left_label=1'
   ,'wniosek został złożony'@,
      "params_get.options.date.byDateOfSubmission"
   ,'miała miejsce ostatnia modyfikacja wniosku'@,
      "params_get.options.date.byDateOfLastModification"
);
_PAR.win_efld(_we,,'OVR',,,,,,'Sposób postępowania, w przypadku gdy załącznik już istnieje:'@,
   ,'Jak postąpić w sytuacji gdy plik był już utworzony.'@,'radio-buttons','left_label=1'
   ,'Pozostaw wcześniej utworzoną wersję (nie twórz nowej)'@,"params_get.options.file.leavePrevious"
   ,'Zastąp nową wersją, jeżeli poprzednia nie została pobrana'@,"params_get.options.file.replaceIfNotDownloaded"
   ,'Zawsze zastępuj'@,"params_get.options.file.alwaysReplace"
   ,'Dołącz nową wersję'@,"params_get.options.file.addNewVersion"
);
exec('ok_esc','#window',_PAR,_we,,,,,,,'Generuj'@);
_PAR.win_edit(_we);
_PAR.efld_opt(_we,'mark=1',,'OD');
_PAR.efld_opt(_we,'mark=1',,'DO');
_PAR.blank();
_PAR.OD:=date(,,1);
_PAR.DO:=date(,,0);

_PAR


\settings_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła udostępnia bufor z ustawieniami do edycji.
::   WE:
::   WY: czy udało się zmienić ustawienia [1 - tak / 0 - nie]
::----------------------------------------------------------------------------------------------------------------------
_TAB:=_a;

params_set('options',exec('options','!pkd_zes_zedo'));

_TAB.edit($("
   _TAB:=cur_tab(1,1);
   {? (_chk:=__CHK.record(_TAB,,'OD','OD'))<>''
   || return(_chk)
   |? _TAB.DO<_TAB.OD
   || FUN.info('"+'"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(_TAB,'DO'),MS.name(_TAB,'OD')]+"');
      'DO'
   || ''
   ?}
"))


\choose_etypy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wybór typów wniosków, dla których będą generowane załączniki.
::   WE:
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_chooser:=exec('chooser','!pkd_zes_zedo');

exec('register_types','!pkd_zes_zedo',_chooser);

params_set('chooser',_chooser);
exec('chooser_wnd','!pkd_zes_zedo',_chooser);
_chooser.TAB.index(_chooser.NDX.VIEW);

_ok:=0;
{!
|? {? _chooser.TAB.select()
   || _ok:=1;
      0
   || ~FUN.ask('Czy na pewno rezygnujesz?'@)
   ?}
!};
{? _ok
|| _chooser
?}


\chooser
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Przygotowuje obiekt z konfiguracją do wyboru typów wniosków.
::   WE:
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_obj:=obj_new('TAB','NDX','register','cfg');

_obj.TAB:=tab_tmp(2
   ,'NAZWA','STRING[%1]'[$MS.fld_len('ETYPY','NAZWA')],'Nazwa'@
   ,'ID','STRING[%1]'[$MS.fld_len('ETYPY','ID_WP')],'Identyfikator'@
   ,'REF','STRING[16]','Złączenie do rekordu ETYPY'@
   ,'CH','STRING[1]','Wybrany'@
);
_obj.NDX:=obj_new('VIEW','CH','ID');
_obj.NDX.VIEW:=_obj.TAB.index('?');
_obj.NDX.CH:=_obj.TAB.ndx_tmp(,,'CH',,,'ID',,);
_obj.NDX.ID:=_obj.TAB.ndx_tmp(,,'ID',,);
_obj.register:=
   "_result:=0;
    _name:={? var_pres('_a')=type_of('') & _a<>'' || _a || return(_result) ?};
    _get:=\"'%1.%2.%3'[$ETYPY.ref,ETYPY.NAZWA,ETYPY.ID_WP]\";
    _etypy:=exec('FindInSet','#table','ETYPY','UNIK_WP',_name,.cfg.typObieg,_get,1,.cfg.w_portal,'');
    {? _etypy<>''
    || _content:=spli_str(_etypy,'.');
       {? obj_len(_content)<2 || return(_result) ?};
       .TAB.blank(1);
       .TAB.REF:=_content[1];
       .TAB.NAZWA:=_content[2];
       .TAB.ID:=_content[3];
       .TAB.CH:=exec('str_n_','#blank');
       _result:=.TAB.add(1)
    ?};
    _result
   ";
_obj.cfg:=obj_new('typObieg','w_portal');
_obj.cfg.typObieg:=exec('FindInSet','#table','TYPOBIEG','UNIK','Obieg wniosków',,,,,null);
_obj.cfg.w_portal:='T';

_obj


\register_types
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Rejestruje odpowiednie typy wniosków w obiekcie wspomagającym ich wybór.
::   WE: _a - obiekt z niezbędną konfiguracją dot. typów wniosków
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('register',_a)=type_of("") || _a || exec('chooser','!pkd_zes_zedo') ?};

:: 1. Zatrudnienie (część I.B)

:: Wniosek o udostępnienie kopii dokumentacji
_obj.register(exec('_edp','portal_walidacja').name);
:: Zmiana danych adresowych
_obj.register(exec('_wozda','portal_walidacja').name);
:: Zmiana numeru rachunku ROR
_obj.register(exec('_rachunek','portal_walidacja').name);
:: Wniosek o zaliczkę
_obj.register(exec('_zaliczka','portal_walidacja').name);
:: Premia
_obj.register(exec('_premia','portal_walidacja').name);
:: Zmiana zatrudnienia
_obj.register(exec('_wzz','portal_walidacja').name);

:: 2. Dokumenty związane z ewidencją czasu pracy

:: Wniosek o pracę w godzinach nadliczbowych
_obj.register(exec('_nadg_w','portal_walidacja').name);
:: Polecenie pracy w godzinach nadliczbowych
_obj.register(exec('_nadg_p','portal_walidacja').name);

exec('include_saved','!pkd_zes_zedo',_obj);

_obj


\chooser_wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Tworzy i ustawia okienko wertowania dla obiektu wyboru typów wniosków.
::   WE: _a - obiekt z niezbędną konfiguracją dot. typów wniosków
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('TAB',_a)=type_of(SYSLOG) || _a || exec('chooser','!pkd_zes_zedo') ?};

_tab:=_obj.TAB;

_width:=40;
_height:={? _tab.size()<9 || _tab.size()+1 || 30 ?};

_ws:=_tab.mk_sel('Typy wniosków'@,,0,'#sel_etypy_zal',,,_height,,'U','N');
_tab.win_fld(_ws,,'NAZWA',,,_width);
_tab.win_fld(_ws,,'ID',,,_width);
_tab.win_fld(_ws,,'CH',,,-8,,,'Wybrany'@,,'Wybrany [\'T\'/\'N\']'@,2,,"'T'","'N'");

_act:=obj_new('choose','change','next');
_act.choose:=obj_new('name','tag','form');
_act.change:=obj_new('name','tag','form','btn_cfg');
_act.next:=obj_new('name','tag','form','btn_cfg');

_act.choose.name:='Wybierz'@@;
_act.choose.tag:='W';
_act.choose.form:="
   _chooser:=params_get().chooser;
   _TAB:=_chooser.TAB;
   _NDX:=_chooser.NDX;
   _TAB.cntx_psh();
   _TAB.index(_NDX.CH);
   _TAB.prefix('T',);
   _selected:=_TAB.first();
   _TAB.cntx_pop();
   {? _selected
   || sel_exit()
   || FUN.info('Nie wybrano typów wniosków.'@)
   ?}";
_act.change.name:='Zmień'@@;
_act.change.tag:='Z';
_act.change.form:="_tab:=cur_tab(1,1); _tab.CH:={? _tab.CH='N' || 'T' || 'N' ?}; _tab.put()";
_act.change.btn_cfg:=',panel=right,align=begin';
_act.next.name:='Dalej'@@;
_act.next.tag:='D';
_act.next.form:="sel_exit()";
_act.next.btn_cfg:=',panel=bottom,align=end';

_tab.win_act(_ws,,'Formuła',_act.choose.name,,,_act.choose.form,,1,,,,_act.choose.tag);
_tab.win_act(_ws,,'Formuła',_act.change.name,,,_act.change.form,,,1,"sel_nchk()",,_act.change.tag);
_tab.win_act(_ws,,'Formuła',_act.next.name,,,_act.next.form,,,,,,_act.next.tag,,'target=window');

_tab.win_btn(_ws,'text=%1%2'[_act.change.name,_act.change.btn_cfg],'menu:%1' [_act.change.tag]);
_tab.win_btn(_ws,'text=%1%2'[_act.next.name,_act.next.btn_cfg],'menu:%1' [_act.next.tag]);

_tab.win_sel(_ws);

_obj


\include_saved
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła przestawia znaczniki wyboru typów wniosków wg stanu odpisanego w pliku ustawień profile.upf
::   WE: _a - obiekt z niezbędną konfiguracją dot. typów wniosków
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('TAB',_a)=type_of(SYSLOG) || _a || exec('chooser','!pkd_zes_zedo') ?};

_options:=exec('options_profile','!pkd_zes_zedo');

_cfg:=exec('get','#profile',,_options.sectionName,_options.paramName);
_previouslyChosen:=spli_str(_cfg,',');

_ETYPY:=_obj.TAB;
_ETYPY.index(_obj.NDX.ID);
_ETYPY.prefix();

{! _ii:=1..obj_len(_previouslyChosen)
|!
   {? _ETYPY.find_key(_previouslyChosen[_ii]) & _ETYPY.CH<>'T'
   || _ETYPY.CH:='T';
      _ETYPY.put(1)
   ?}
!};

_obj


\any_chosen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Sprawdza czy wybrano jakikolwiek typ wniosków z zarejestrowanych (możliwych do wyboru).
::   WE: _a - obiekt z konfiguracją oraz zawartością wyboru typów wniosków
::   WY: 0 (nie wybrano żadnego) / 1 (dokonano wyboru)
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('TAB',_a)=type_of(SYSLOG) || _a || exec('chooser','!pkd_zes_zedo') ?};

_ETYPY:=_obj.TAB;
_ETYPY.index(_obj.NDX.CH);
_ETYPY.prefix('T',);
_ETYPY.first()


\save_chosen
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Formuła zapisuje do pliku ustawień (profile.upf), które typy wniosków zostały wybrane przez użytkownika i mają
::       być uwzględniane przy każdym kolejnym generowaniu załączników (wczytywane).
::   WE:
::   WY: obiekt z niezbędną konfiguracją dot. typów wniosków
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('TAB',_a)=type_of(SYSLOG) || _a || exec('chooser','!pkd_zes_zedo') ?};

_profile:=exec('options_profile','!pkd_zes_zedo');

_value:=exec('prepare_profile_value','!pkd_zes_zedo',_obj);

exec('set','#profile',,_profile.sectionName,_profile.paramName,_value);

_obj


\prepare_profile_value
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Przygotowuje wartość dla zapisu, który będzie przechowywany w pliku ustawień (profile.upf).
::   WE: _a - obiekt z konfiguracją oraz zawartością wyboru typów wniosków
::   WY: Przygotowana wartość
::----------------------------------------------------------------------------------------------------------------------
_obj:={? var_pres('_a')>100 & var_pres('TAB',_a)=type_of(SYSLOG) || _a || exec('chooser','!pkd_zes_zedo') ?};

_ETYPY:=_obj.TAB;
_value:='';

_ETYPY.cntx_psh();
_ETYPY.index(_obj.NDX.CH);
_ETYPY.prefix('T',);
_size:=_ETYPY.size();
{? _loop:=_ETYPY.first()
|| _counter:=1;
   {!
   |? _loop
   |!
      _value:='%1%2'[_value,{? _counter<_size || '%1,'[_ETYPY.ID] || _ETYPY.ID ?}];
      _counter+=1;
      _loop:=_ETYPY.next()
   !}
?};
_ETYPY.cntx_pop();

_value


\wybierz_prac
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Wybór pracownika / pracowników z listy po nałożeniu odpowiednich filtrów.
::   WE: _a [ARRAY] - obiekt z niezbędną konfiguracją dot. typów wniosków
::   WY: Tabela wynikowa z wybranymi rekordami tabeli P (pracownikami)
::----------------------------------------------------------------------------------------------------------------------
_chooser:={? var_pres('_a')>100 & obj_ntab(_a) || _a || exec('chooser','!pkd_zes_zedo') ?};

_chooser.TAB.index(_chooser.NDX.CH);
_chooser.TAB.prefix('T',);

_ETYPY:=_chooser.TAB;

_args:=exec('wybierz_args','pracownik');

_args.DOMAIN:='POR';
_args.UD_SCH:=exec('domyslny','schemat','PODZORG');
_args.UD_SKL:=__PARSES.getVal('JednostkaOrganizacyjna').REF;
_args.F_ZATR:=__PARSES.getVal('F_ZATR').KOD;
_args.VIEW:=__PARSES.getVal('ZakresDanych');
_args.SQL_WHERE:='"P".PORTAL=\'T\'';
exec('wybierz','pracownik',_args)


\gen_zal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Uruchamia generowanie załączników dla wniosków kadrowych na podstawie przekazanych argumentów.
::   WE: _a [ARRAY] - obiekt z niezbędną konfiguracją dot. typów wniosków
::       _b [ARRAY] - obiekt z pracownikami wybranymi do przetworzenia
::       _c [TABLE] - ustawienia dla generowania załączników
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_chooser:={? var_pres('_a')>100 & obj_ntab(_a) || _a || exec('chooser','!pkd_zes_zedo') ?};
   _prac:={? var_pres('_b')>100 || _b || return() ?};
    _PAR:={? var_pres('_c')=type_of(SYSLOG) || _c || return() ?};

_chooser.TAB.index(_chooser.NDX.CH);
_chooser.TAB.prefix('T',);

_edokumMasks:=exec('edokum_masks_range','!pkd_zes_zedo',_PAR);
{? _edokumMasks.current=''
|| return()
?};

_options:=exec('options','!pkd_zes_zedo');
_condition:=
   {? _PAR.TO=_options.date.byDateOfSubmission
   || "_od:={? var_pres('_a')=type_of(date) || _a || return(0) ?};
       _do:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
       _od<=EDOKUM.DATAW & EDOKUM.DATAW<=_do
      "
   |? _PAR.TO=_options.date.byDateOfLastModification
   || "_od:={? var_pres('_a')=type_of(date) || _a || return(0) ?};
       _do:={? var_pres('_b')=type_of(date) || _b || return(0) ?};
       time_ident(_od)<=EDOKUM.IDPUT & EDOKUM.IDPUT<time_ident(_do+1)"
   || "0"
   ?};

_firma:=exec('ref_firma','ustawienia');
_obieg:='Obieg wniosków';
_typObieg:=exec('FindInSet','#table','TYPOBIEG','UNIK',_obieg,_obieg,,1,,null());

_file:=obj_new('user','extension','getNameFor');
_file.user:=username();
_file.extension:='.pdf';
_file.getNameFor:=
   "_BUF:={? var_pres('_a')=type_of(SYSLOG) & _a.name=P.name() || _a || '' ?};
    '%1%2%3'[.user,$_BUF.tm_stamp(),.extension]
   ";

_status:=obj_new('accepted','declined');
_status.accepted:='Y';
_status.declined:='O';

:: Czy pokazywać dialogi w raporcie?
params_set('show',0);

_args:=exec('add_args','zal');
_args.OWNER:='EDOKUM';
_args.OVR:=
   {? _PAR.OVR=_options.file.leavePrevious          || "0"
   |? _PAR.OVR=_options.file.replaceIfNotDownloaded || "~exec('isNotEmpty','zal_pobh',ZALACZ.ref())"
   |? _PAR.OVR=_options.file.alwaysReplace          || "1"
   |? _PAR.OVR=_options.file.addNewVersion          || "2"
   ?};

_RAPORT:=exec('raport','zal','Wnioski kadrowe'@);
progress(
   ,'%1 %2'['Generowanie załączników na podstawie wniosków kadrowych.'@,'Proszę czekać ...'@]
   ,'Przetwarzanie danych'@
);
OSOBA.cntx_psh();
OSOBA.prefix();
P.cntx_psh();
P.prefix();
EDOKUM.cntx_psh();
ETYPY.cntx_psh();
ETYPY.prefix();
EDOK_ATR.cntx_psh();
{!
|? EDOKUM.use(_edokumMasks.current);
   EDOKUM.index('W_PORTAL');
   EDOK_ATR.use('edokat'+(_edokumMasks.current+2));
   {! _lps:=1 .. obj_len(_status)
   |! EDOKUM.prefix(_firma,_typObieg,'T',_status[_lps],);
      {? EDOKUM.first()
      || {!
         |? EDOKUM.TYP();
            {? _condition(_PAR.OD,_PAR.DO) &
               _chooser.TAB.find_key(ETYPY.ID_WP,) &
               {? 3+ETYPY.ID_WP='MAN'
               || _prac.P.index(_prac.ndx.UID);
                  _prac.P.find_key(exec('atr_get','portal_walidacja','PracownikIdERP'),)
               || _prac.P.index(_prac.ndx.SQL);
                  _prac.P.find_key(EDOKUM.OSOBAWWW,)
               ?} &
               P.seek(_prac.P.UID)
            || _pdf:=_file.getNameFor(P);
               {? rep_exec('obe_dok',,0,_pdf,1)
               || _args.SLO_NAZ:=ETYPY.NAZWA;
                  _args.FILE_PATH:=_pdf;
                  _args.ZAL_NAME:='%1_%2.pdf' [ETYPY.ID_WP,EDOKUM.DATAW$2];
                  _args.ZAL_DESC:='%1 (%2)' [ETYPY.NAZWA,EDOKUM.DATAW$1];
                  _RAPORT.add(exec('add','zal',_args))
               ?}
            ?};
            EDOKUM.next()
         !}
      ?}
   !};
   EDOK_ATR.f_clear();
   _edokumMasks.getNext()
!};
EDOK_ATR.cntx_pop();
ETYPY.cntx_pop();
EDOKUM.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();
prgs_clr();
_RAPORT.show();

~~


\edokum_masks_range
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Zwraca obiekt zawierający informacje o zakresie masek tabeli EDOKUM, które powinny zostać sprawdzone na
::       podstawie wybranych dat.
::   WE: _a [SYSLOG] - ustawienia dla generowania załączników
::   WY: Obiekt zawierający informacje o zakresie masek tabeli EDOKUM
::----------------------------------------------------------------------------------------------------------------------
_PAR:={? var_pres('_a')=type_of(SYSLOG) || _a || return() ?};

_edokumMasks:=obj_new('NAMES','icurrent','istop','current','getNext');

_edokumMasks.NAMES:=EDOKUM.names();

_edokumMasks.icurrent:=(_PAR.OD~1)-1;
_edokumMasks.istop:=_PAR.DO~1;

_edokumMasks.getNext:="
   .current:='';
   {!
   |? .icurrent+=1;
      {? .icurrent<=.istop
      || _current:='skid_v%1'[($.icurrent)+2];
         {? .NAMES.find_key(_current,)
         || .NAMES.del();
            .current:=_current;
            0
         || 1
         ?}
      ?}
   !};
   .current<>''
";
:: Ustalmy startową wartość maski.
_edokumMasks.getNext();

_edokumMasks


\options
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [21.37]
:: OPIS: Definiuje tablicę elementów nazwanych z opcjami przetwarzania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_options:=obj_new('date','file');
_options.date:=exec('options_date','!pkd_zes_zedo');
_options.file:=exec('options_file','!pkd_zes_zedo');
_options


\options_date
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Definiuje obiekt informujący o możliwych sposobach wyboru zakresu dat.
::   WE:
::   WY: obiekt z możliwymi opcjami wyboru zakresu dat
::----------------------------------------------------------------------------------------------------------------------
_options:=obj_new(
:: Według daty złożenia wniosku
   'byDateOfSubmission',
:: Według daty ostatniej modyfikacji wniosku
   'byDateOfLastModification'
);

_options.byDateOfSubmission:=0;
_options.byDateOfLastModification:=1;

_options


\options_file
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Definiuje obiekt informujący o możliwych sposobach nadpisywania plików załączników.
::   WE:
::   WY: obiekt z możliwymi opcjami nadpisywania plików załączników
::----------------------------------------------------------------------------------------------------------------------
_options:=obj_new(
:: Pozostaw wcześniej utworzoną wersję (nie twórz nowej)
   'leavePrevious',
:: Zastąp nową wersją, jeżeli poprzednia nie została pobrana
   'replaceIfNotDownloaded',
:: Zawsze zastępuj
   'alwaysReplace',
:: Dołącz nową wersję
   'addNewVersion'
);

_options.leavePrevious:=0;
_options.replaceIfNotDownloaded:=1;
_options.alwaysReplace:=2;
_options.addNewVersion:=3;

_options


\options_profile
::----------------------------------------------------------------------------------------------------------------------
::  UTW: achol [21.37]
:: OPIS: Definiuje obiekt zwracający informacje o ustawieniach dla zapisu do pliku z ustawieniami (profile.upf)
::       dotyczących generowania załączników z wniosków kadrowych.
::   WE:
::   WY: obiekt z ustawieniami dla zapisu do pliku z ustawieniami (profile.upf)
::----------------------------------------------------------------------------------------------------------------------
_options:=obj_new(
:: Nazwa sekcji
   'sectionName',
:: Nazwa parametru
   'paramName'
);

_options.sectionName:='edokumzal';
_options.paramName:='Wnioski kadrowe, dla których generować załączniki';

_options

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:40 3016eb55d022c95869847c52432b2825aa328415d8e28bfb476f68310ce4236b98498d58e56330167ce3ecb5904d1fce51523d59ea8233bbb0a7adc0d5851d3d6d82a848cf89054e8d8631a9da9e5b28a898657e7665b3c85af5d677972058b6268388d487d89b9c10ed3bcf75584759e922f25ec55383e8eb22dcc60b18b7d3
