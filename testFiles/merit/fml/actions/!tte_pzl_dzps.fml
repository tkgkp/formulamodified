:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dzps.fml
:: Utworzony: 22.11.2022
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DZPS - Generowanie zlecenia na podstawie planu sprzedaży
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Formuła główna czynności generowania zleceń na podstawie pozycji planu sprzedaży (TTE_PZL_DZPS)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;
_uid:='TTE_PZL_DZPS';

:: WŁAŚCIWOŚCI CZYNNOŚCI
::# permissions=ODDZ
::# parses=exec('parses','!tte_pzl_dzps')
::# properties=LOOP,SERVICE

:: PARAMETRY WE:
::# kind=WE, symbol=ZTP, type=_ZTP, name=Typ zlecenia, required=N, fml_val="exec('ztp_select','zl_head','P')", fml_exp="exec('ztp_export','zl_head',_a)"
{? var_pres('ZTP',_in)<>type_of(~~) & var_pres('ZTP',_in)<>type_of(null()) || return() ?};
{? var_pres('ZTP',_in)=type_of(~~) || _in.ZTP:=null() ?};
::# kind=WE, symbol=PSP, type=_PSP, name=Pozycja planu sprzedaży, required=N, keyref=T
{? var_pres('PSP',_in)<>type_of(~~) & var_pres('PSP',_in)<>type_of(null()) || return() ?};
{? var_pres('PSP',_in)=type_of(~~) || _in.PSP:=null() ?};
::# kind=WE, symbol=ZL_NAD, type=_ZL, name=Zlecenie nadrzędne, required=N, keyref=N
{? var_pres('ZL_NAD',_in)<>type_of(~~) & var_pres('ZL_NAD',_in)<>type_of(null()) || return() ?};
{? var_pres('ZL_NAD',_in)=type_of(~~) || _in.ZL_NAD:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=ZL_MERGE, type=_ZL, name=Powiązane zlecenie, required=N
{? var_pres('ZL_MERGE',_out)<>type_of(~~) & var_pres('ZL_MERGE',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=KATEGORIA, type=STRING, name=Kategoria zlecenia, required=N
{? var_pres('KATEGORIA',_out)<>type_of(~~) & var_pres('KATEGORIA',_out)<>type_of('') || return() ?};

:: Ustawiam wartość domyślną argumentu LOOP żeby brama się nie zawiesiła
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

_key:=_out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);
_done:=0;

{? _mp.pathProc()
|| exec('zlisty','!tte_pzl_dzps')

||
   _can_continue:=1;
   {? _in.ZTP=null()
   || {? ZLEC.ZTP<>null()
      || _in.ZTP:=ZLEC.ZTP
      || {? _mp.isGroup()
         ||
::          ZLEC.CHK1 - czy wyświetlano już okno z wyborem typu zlecenia
            {? ZLEC.CHK1<>'T'
            || ZLEC.CHK1:='T';
               _in.ZTP:=exec('ztp_select','zl_head','P')
            ?};
            {? _in.ZTP=null()
            || _can_continue:=0;
               _mp.cancel()
            ?}
         ?}
      ?}
   ?};
   {? _can_continue>0
   ||
      {? _mp.loop()=0 & _in.PSP & PSP.use(ref_name(_in.PSP)) & PSP.seek(_in.PSP)
      ||
         {? _key<>''
         ||
::          z widoku pozycji planu sprzedaży - akcja: Generuj zlecenie
::          w kontekście rekordu PSP - akcja dla pojedynczego rekordu
            {? _mp.akcja()='GENERUJ'
            || _args_zl:=exec('psp2args','zl_gen');
               _args_zl.ZL_NAD:=_in.ZL_NAD;
               _args_zl.MERGE:=1;
               {? _in.ZL_NAD<>null()
               || _args_zl.ZTP:=exec('FindAndGet','#table',ZL,_in.ZL_NAD,,"ZL.TYP",null())
               |? _in.ZTP<>null()
               || _args_zl.ZTP:=_in.ZTP
               ?};
               params_exec('auto_psp','!tte_pzl_dzps',_args_zl);
               {? _args_zl.RESULT.tab.first()
               || {? _args_zl.ZL_MERGE<>null()
                  || _done:=1;
                     exec('psp_fill_zl','!tte_pzl_dzps',$_in.PSP)
                  || {!
                     |?
                        exec('psp_fill_zl','!tte_pzl_dzps',$_in.PSP);
                        _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"uidref()",''));
                        _args_zl.RESULT.tab.next()
                     !}
                  ?}
               ?}

::          z widoku pozycji planu skrzedaży - akcja: Generuj zlecenie
::          w kontekście rekordu PSP - akcja dla pojedynczego rekordu w akcji grupowej
            |? _mp.akcja()='GENERUJ_W_GRUPIE'
            || _args_zl:=exec('psp2args','zl_gen');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.ZL_NAD:=_context.ZL_NAD;
               _args_zl.COMPLEX:=_context.ZLOZONE;
               _args_zl.MERGE:=0;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
::               {? var_pres('DK_C',_context)>0 || _args_zl.DK_C:=_context.DK_C ?};
::               {? var_pres('KTM',_context)>0
::               || M.cntx_psh();
::                  M.prefix();
::                  {? M.seek(_context.KTM)
::                  || _args_zl.M:=$M.ref();
::                     _args_zl.KTM:=M.KTM;
::                     _args_zl.M_ATR:=M.M_ATR
::                  ?};
::                  M.cntx_pop()
::               ?};
               params_exec('auto_psp','!tte_pzl_dzps',_args_zl);
               _done:=1;
               _context.ZL:=null();
               {? _args_zl.RESULT.tab.first()
               || _context.ZL:=exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"ref()",null());
                  exec('psp_fill_zl','!tte_pzl_dzps',$_in.PSP);
                  _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"uidref()",''))
               ?}

::          z widoku pozycji planu sprzedaży - akcja: Generuj zlecenie
::          (przypadek, gdy kolejne pozycje planu dołączane są do wygenerowanego zlecenia)
            |? _mp.akcja()='POWIĄŻ_W_GRUPIE'
            || _args_zl:=exec('psp2args','zl_gen');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.MERGE:=1;
               _args_zl.ZL_MERGE:=_context.ZL;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
               params_exec('auto_psp','!tte_pzl_dzps',_args_zl);
               _done:=1;
               {? _args_zl.RESULT.tab.first()
               || exec('psp_fill_zl','!tte_pzl_dzps',$_in.PSP)
               ?}
            ?}
         ?}
      ?};
      {? _key<>''
      ||
::       Generacja - wypycham pierwsze zlecenie na wyjście
         _zl_uidref:=_mp.grpkeyGet();
         {? type_of(_zl_uidref)=type_of('')
         ||
            _done:=1;

            ZL.cntx_psh();
            ZL.prefix();
            {? ZL.seek(_zl_uidref)
            ||
               do();
               _can_continue:=ZL.put();
               _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
               _mp.save(exec('kind_out','#b_port'),'KATEGORIA',ZL.RODZAJ);
               _mp.save(exec('kind_out','#b_port'),'GRPKEY',_key);
               _mp.grpkeyDel();
               end();

::             Jeżeli są jeszcze jakieś zlecenia to kontynuuję pętlę
               _zl_uidref:=_mp.grpkeyGet();
               {? type_of(_zl_uidref)=type_of('')
               || _mp.loop_continue()
               ?}
            ?};
            ZL.cntx_pop()
         ||
::          Zakończenie (nie powstało żadne zlecenie) - wypycham nullowe zlecenie na wyjście
            _mp.save(exec('kind_out','#b_port'),'ZL',null());
            _done:=1
         ?}
      || _mp.error('Brak oczekiwanego parametru %1.'@@['GRPKEY'])
      ?};
      {? _done>0 || _mp.done() ?}
   ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Opis dla czynności generowania zleceń na podstawie pozycji planu sprzedaży (TTE_PZL_DZPS)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest rekord kluczowy to ustawiam odpowiedni PSP
{? var_pres('[1]',_keyRefs)
|| _what:=exec('record','#to_string',_keyRefs[1]);
   _desc:={? _what<>'' || 'Generuj zlecenia produkcyjne na podstawie planu: %1'@@[_what] || '' ?}

:: jest parametr wejściowy PSP to ustawiam odpowiednio
|? var_pres('PSP',_in)
|| _what:=exec('record','#to_string',_in.PSP);
   _desc:={? _what<>'' || 'Generuj zlecenia produkcyjne na podstawie planu: %1'@@[_what] || '' ?}

|| _desc:='Generuj nowe zlecenie produkcyjne'@@
?};
_desc


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_context:=params_get().context;

_result:=0;

_keyRefs:=_mp.getRefs();
{? obj_len(_keyRefs)>0
|| {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];
      {? type_of(_kref)>0
      || {? ref_name(_kref)=PSP.name()
         || _psp:=exec('FindAndGet','#table',PSP,_kref,,,null());
            {? _psp=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego z pozycją planu, więc robię error
               exec('deleted_in_proc','plsprz',_mp);
               return(_result)
            ?}
         ?}
      ?}
   !}
?};

{? var_pres('PSP',_in)=type_of(null()) & _in.PSP
||
   _oddz:=1+(ref_name(_in.PSP)+3);

   {? _oddz<>''
   || __PARSES.setVal('OddzialLogProd',_oddz)
   ?};
   {? _mp.isService()
   || _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=date()~1;
      _args.AM:=date()~2;
      __PARSES.setVal('OkresRok',_args)
   ?};
   _result:=1
?};

:: Jeżeli uruchomienie ze startu procesów albo todo, to będzie wybór pozycji planu, więc ok
{? _result=0 & _mp.isService()=0
|| _result:=1
|? _result=0
|| _msg:='Błędna konfiguracja procesu — brak parametru wejściowego %1 czynności %2.'@@['PSP','TTE_PZL_DZPS'];
   {? _mp.isService()=0 || FUN.info(_msg) ?};
   _mp.error(_msg)
?};
_result


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::   WE: _a - _mp - obiekt Menadżera procesów
::       _b - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::----------------------------------------------------------------------------------------------------------------------
_mp:=_a;
_in:=_b;

_can_continue:=1;
_obj:=obj_new('RESULT','PSP');
_obj.RESULT:=0;
_obj.PSP:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=PSP.name()
         || _obj.PSP:=exec('FindAndGet','#table',PSP,_kref,,,null());

            {? _obj.PSP=null()
            ||
::             Nie znaleziono rekordu kluczowego więc robię error
               _can_continue:=0;
               exec('deleted_in_proc','plsprz',_mp)
            ?}
         ?}
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy PSP
   {? _obj.PSP=null() & var_pres('PSP',_in)=type_of(null())
   || _obj.PSP:=_in.PSP
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};
_obj


\auto_psp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Funkcja generowania jednego lub wielu zleceń na podstawie pozycji planu sprzedaży
::   WE: _a - _args - argumenty dla funkcji generujacej, wynik dzialania exec('auto_args','zl_gen')
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('auto_args','zl_gen')
?};

_result:=0;
_can_continue:=1;

_mp:=params_get().mp;

PSP.cntx_psh();
PSP.clear();

{? PSP.use(ref_name(_args.SRC_REF)) & PSP.seek(_args.SRC_REF)
||
:: Blokuję pozycję w planie na czas generowania zlecenia
   _ses_id:=exec('blk_lock','#table','PSP',PSP.ref(),,2);
   {? _ses_id=PSP.ses_id()
   || _locked:=1
   || _locked:=0;
      FUN.info(
         'Pozycja planu sprzedaży jest redagowana przez użytkownika \'%1\' na terminalu \'%2\'.'@
         [PSP.ses_info(_ses_id,'log_name'),PSP.ses_info(_ses_id,'log_tty')]
      )
   ?};

   _locked:=exec('blk_lock','#table','PSP',PSP.ref(),,,,,0);
   {? _locked>0
   ||
::    Sprawdzenie produktu w zleceniach nadrzędnych
      {? _can_continue>0 & _args.ZL_NAD<>null()
      || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,"$KTM=_b.M",0,_args)
         || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
            {? _args.GRUPA>0
            || KOMM.add(_msg,4)
            |? _args.DIALOG>0
            || FUN.info(_msg)
            ?};
            _mp.error(_msg);
            _can_continue:=0
         || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,
                  "exec('chk_ktm','zl_head',TREE,exec('FindAndGet','#table',M,_b.M))>0",0,_args
               )
            || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
               {? _args.GRUPA>0
               || KOMM.add(_msg,4)
               |? _args.DIALOG>0
               || FUN.info(_msg)
               ?};
               _mp.error(_msg);
               _can_continue:=0
            ?}
         ?}
      ?};
::    Sprawdzenie terminu realizacji
      {? _can_continue>0
      ||
         {? _args.DIALOG>0
         || {? _args.PL_DATA<date()
            || {? ~FUN.ask('Generowanie zlecenia\n\n'
                     'Termin realizacji jest wcześniejszy, niż data powołania zlecenia.\n'
                     'Czy wygenerować zlecenie (konieczna będzie korekta daty na zleceniu)?'@,
                  )
               || _can_continue:=0
               ?}
            ?}
         || _msg:='Termin realizacji jest wcześniejszy, niż data powołania zlecenia.'@;
            _mp.error(_msg);
            {? _args.GRUPA>0
            || {? _args.PL_DATA<date()
               || KOMM.add(_msg,2);
                  _can_continue:=0
               ?}
            ?}
         ?}
      ?};

      {? _can_continue>0
      || PSP.clear();
         {? PSP.seek(_args.SRC_REF)
         || {? exec('sprdt','zl_head')
            || exec('auto_zl_core','zl_gen',_args)
            ?}
         ||
            {? _args.GRUPA>0
            || KOMM.add('Wskazana pozycja planu sprzedaży została już usunięta.'@,14)
            || FUN.emsg('Wskazana pozycja planu sprzedaży została już usunięta.\n'
                        'Proszę ponownie uruchomić funkcję.'@)
            ?}
         ?}
      ?};

::    Odblokowuje PSP
      exec('blk_unlock','#table','PSP',PSP.ref())
   ?}
?};

PSP.cntx_pop();
~~


\zlisty
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Akcja Powołaj na podstawie -> pozycji planu sprzedaży od strony zleceń produkcyjnych
::   WE: [_a] - tryb pracy: 1 - (domyślnie) lista zleceń, 2 - podzlecenie zlecenia złożonego
::       [_b] - ZL.ref() - zlecenie nadrzędne (wymagane dla trybu 2)
::  OLD: \zplsprz/plprod.fml
::----------------------------------------------------------------------------------------------------------------------
_tryb:=1;
{? var_pres('_a')=type_of(0)
|| _tryb:=_a
?};
_zl_nad:=null();
{? var_pres('_b')=type_of(ZL.ref())
|| _zl_nad:=_b
?};

{? _tryb=2
|| VAR.A_ZLNAD:=_zl_nad
|| VAR.A_ZLNAD:=null()
?};

{? ~exec('sprdt','zl_head') || return() ?};

exec('tktl_cntx_psh','tech_common');
:: Otwieram biezaca maske technologii
exec('tktl_use','tech_common');

PS_Z.F:='T';
BEER.MW:='';

ZL.cntx_psh();
PS.cntx_psh();
PSP.cntx_psh();
_wer:=PS.mk_sel('Wybór planu sprzedaży do generowania zleceń'@,,,'plsprzdozl',,,,,'U');
PS.win_fld(_wer,,'S',,,15);
PS.win_fld(_wer,,'OP',,,40);
PS.win_fld(_wer,,'R',,,5);
PS.win_fld(_wer,,'DT',,,10);
PS.win_fld(_wer,,'OK',,,4,,,'Akc.'@,,'Zatwierdzony'@,2,,"'T'","'N'");
PS.win_fld(_wer,,'A',,,4,,,'Akt.'@,,'Aktywny'@,2,,"'T'","'N'");
PS.win_act(_wer,,'Formuła','Poz&ycje'@@,,,"exec('psp_tree','plsprz',2,1)",,1,,,,'Y');
PS.win_act(_wer,0,'Formuła','Zakres'@@,,,"exec('ps_filtr','plsprz')",,,,,,'Z');
PS.win_act(_wer,1,'Formuła','Zakres'@@,,,"exec('ps_filtr','plsprz')",,1,,,,'Z');
PS.win_sel(_wer);
PS.index('A');
PS.prefix(PS_Z.F);
PS.hdr_sel(' — '+'aktywne'@);
PS.select();
PSP.cntx_pop();
PS.cntx_pop();
ZL.cntx_pop();
exec('tktl_cntx_pop','tech_common');
~~


\psp_fill_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Wypełnia pole dotyczące ilości zleconej dla pozycji planu sprzedaży
::   WE: _a - STRING - $ref pozycji planu sprzedaży (PSP)
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of('') || _a || '' ?};
PSP.cntx_psh();
PSP.prefix();
{? _ref<>'' & PSP.seek(_ref)
|| _ilzl:=0;
   ZLZAM.cntx_psh();
   ZLZAM.index('ZMZL');
   ZLZAM.prefix(_ref,);
   {? ZLZAM.first()
   || {!
      |? _ilzl+=ZLZAM.ILZL;
         ZLZAM.next()
      !}
   ?};
   ZLZAM.cntx_pop();
   {? PSP.ILZL<>_ilzl
   || PSP.ILZL:=_ilzl;
      PSP.put()
   ?}
?};
PSP.cntx_pop();
~~

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:37 aa420f9cfe6767ca9dd161924c72df3bf43e067b489510932efd00430433b790b19ff2ddd14fb9353f24f591e86ddbb86bc18fa876e17c907d46be0685a520b396bc5ce6dc470c0640b8b9a5aadddd93922eb2b99c9decb135475e9d8c0b83469a3aa145cd1bb3cdfa0378b2a0e78bc75909f22e48bca98303e5edb74f13ed86
