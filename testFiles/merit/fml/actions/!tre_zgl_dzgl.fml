:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tre_zgl_dzgl.fml
:: Utworzony: 20.02.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TRE_ZGL_DZGL - Rejestracja zgłoszeń remontowych
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła główna czynności TRE_ZGL_DZGL - Rejestracja zgłoszeń remontowych
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;

::# permissions=ODDZ
::# properties=SERVICE
::# parses=exec('parses','!tre_zgl_dzgl')

:: PARAMETRY WE:
::# kind=WE, symbol=REM_ZGL, type=_REM_ZGL, name=Zgłoszenie remontowe, required=N, keyref=T
{? var_pres('REM_ZGL',_in)<>type_of(~~) & var_pres('REM_ZGL',_in)<>type_of(null()) || return() ?};
::# kind=WE, symbol=EDOKUM, type=_EDOKUM, name=Dokument w obiegu, required=N, keyref=T
{? var_pres('EDOKUM',_in)<>type_of(~~) & var_pres('EDOKUM',_in)<>type_of(null()) || return() ?};
::# kind=WE, symbol=REK_N, type=_REK_N, name=Reklamacja, required=N, keyref=T
{? var_pres('REK_N',_in)<>type_of(~~) & var_pres('REK_N',_in)<>type_of(null()) || return() ?};
::# kind=WE, symbol=EK_PROB, type=_EK_PROB, name=Problem produkcyjny, required=N, keyref=T
{? var_pres('EK_PROB',_in)<>type_of(~~) & var_pres('EK_PROB',_in)<>type_of(null()) || return() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=REM_ZGL, type=_REM_ZGL, name=Zgłoszenie remontowe, required=N
{? var_pres('REM_ZGL',_out)<>type_of(~~) & var_pres('REM_ZGL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=KAT_ZAS, type=STRING, name=Kategoria zasobu, required=N
{? var_pres('KAT_ZAS',_out)<>type_of(~~) & var_pres('KAT_ZAS',_out)<>type_of('') || return() ?};
::# kind=WY, symbol=KAT_ZGL, type=STRING, name=Kategoria zgłoszenia, required=N
{? var_pres('KAT_ZGL',_out)<>type_of(~~) & var_pres('KAT_ZGL',_out)<>type_of('') || return() ?};
::# kind=WY, symbol=REM_ZAS, type=_REM_ZAS, name=Zasób remontowy, required=N
{? var_pres('REM_ZAS',_out)<>type_of(~~) & var_pres('REM_ZAS',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=RESULT, type=STRING, name=Rezultat działania, required=N

:: Wyzwalacz, który po dodaniu nagłówka zgłoszenia:
:: - add/put: dodaje/aktualizuje rekord kluczowy utworzonego zgłoszenia
::   del: usuwa rekord kluczowy utworzonego zgłoszenia
:: - add/put: zapisuje parametr wyjściowy REM_ZGL - wskazanie na utworzone zgłoszenie
::   del: zapisuje parametr wyjściowy REM_ZGL - null()
:: - aktualizuje opis na ToDo
_mp.trigRef('REM_ZGL',1,1,1,exec('kind_out','#b_port'),'REM_ZGL');

{? (_action='DOŁĄCZ' | _action='KOPIUJ' | _mp.pathProc()) & ~_mp.isService()
|| _can_continue:=1;
   _rem_zgl:=null();
   _edokum:=null();
   _rek_n:=null();
   _ek_prob:=null()
|| _clean_result:=params_exec('clean','!tre_zgl_dzgl');
   _can_continue:=_clean_result.RESULT;
   _rem_zgl:=_clean_result.REM_ZGL;
   _edokum:=_clean_result.EDOKUM;
   _rek_n:=_clean_result.REK_N;
   _ek_prob:=_clean_result.EK_PROB
?};

{? _can_continue>0 & _rem_zgl=null() & _mp.akcja()<>''
|| _rem_zgl:=_context.REM_ZGL
?};
{? _can_continue>0 & _rek_n=null() & _mp.akcja()<>'' & var_pres('REK_N',_context)=type_of(null())
|| _rek_n:=_context.REK_N
?};
{? _can_continue>0 & _ek_prob=null() & _mp.akcja()<>'' & var_pres('EK_PROB',_context)=type_of(null())
|| _ek_prob:=_context.EK_PROB
?};

{? _can_continue>0
|| REM_ZGL.cntx_psh();
   REM_ZGL.prefix();

:: Odtwarzamy kontekst rekordu REM_ZGL, jeżeli podany (rekord kluczowy albo kontekst)
   {? _rem_zgl<>null()
   || _find:=REM_ZGL.seek(_rem_zgl)
   || _find:=0
   ?};

:: Numeracja zgłoszeń
   POM.TAB:='REM_ZGL';
   POM.TYPDOK:='ZGL';

:: Środowisko rejestrowania
   _env:=exec('env_zasoby_remontowe','zasoby');
   _env.DONE:=0;
   _env.REM_ZAS_VIEW:=0;
:: Środowisko zgłoszeń
   _env_rem_zgl:=
      {? var_pres('_context')>100 & var_pres('ENV_REM_ZGL',_context)>100
      || _context.ENV_REM_ZGL
      || exec('env','remonty_zgloszenia',0)
      ?};
   params_set('env_zasoby',_env,'env_rem_zgl',_env_rem_zgl);

   _out.KAT_ZAS:='';
   _out.KAT_ZGL:='';
   _out.REM_ZAS:=null();

   exec('rem_zgl_set_fml','remonty_zgloszenia');

:: Utworzenie zgłoszenia powiązanego (po zamknięciu zgłoszenia mikroprocesem)
   {? (_action='POWIĄŻ')
   || {? _rem_zgl<>null()
      || _uid:=exec('FindAndGet','#table',REM_ZGL,_rem_zgl,,"uidref",'');
         {? _uid<>''
         || _mp.keyRef(_uid)
         ?}
      ?}
:: Akcje 'Dołącz' i 'Kopiuj' z obszaru roboczego
:: Dołączenie na podstawie wniosku administracyjnego
:: Dołączenie na podstawie reklamacji
:: Dołączenie na podstawie problemu produkcyjnego
:: Uruchomienie ze startu procesów
:: Uruchomienie z listy zadań (bez przekazanego parametru wejściowego)
   |? (_action='DOŁĄCZ' | _action='KOPIUJ' | _mp.pathProc() | _mp.pathTodo() & _rem_zgl=null())
      | _edokum<>null()
      | _rek_n<>null()
      | (_ek_prob<>null() & _action='DOŁĄCZ_Z_PROBLEMU')
   || {? _action='KOPIUJ'
      || _uidref:=REM_ZGL.uidref();
         {? REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia') & ~exec('rem_zgl_czy_pow','remonty_zgloszenia')
            & FUN.ask('Czy powiązać nowe zgłoszenie z biężącym?'@)
         || REM_ZGL.ZGL_NAD:=_uidref;
            {? REM_ZGL.ZGL_TOP='' || REM_ZGL.ZGL_TOP:=_uidref ?}
         || REM_ZGL.ZGL_NAD:='';
            REM_ZGL.ZGL_TOP:=''
         ?};
         REM_ZGL.AR:=exec('st_ar','parses');
         REM_ZGL.AM:=exec('st_am','parses');
         REM_ZGL.SYM_TOP:='';
         REM_ZGL.NR:=0;
         REM_ZGL.STAT_REJ:=exec('status_new','remonty_zgloszenia');
         REM_ZGL.USR_WPR:=OPERATOR.USER; REM_ZGL.DT_WPR:=date(); REM_ZGL.TM_WPR:=time();
         REM_ZGL.USR_ZAT:=null(); REM_ZGL.DT_ZAT:=date(0,0,0); REM_ZGL.TM_ZAT:=time(0,0,0);
         REM_ZGL.USR_REA:=null(); REM_ZGL.DT_REA:=date(0,0,0); REM_ZGL.TM_REA:=time(0,0,0);
         REM_ZGL.USR_ZAM:=null(); REM_ZGL.DT_ZAM:=date(0,0,0); REM_ZGL.TM_ZAM:=time(0,0,0);
         REM_ZGL.REM_CYKL:=null();
         REM_ZGL.PLAN_PL:='N';
         REM_ZGL.PLAN_PX:='N';
         _opis:='Zgłoszenie skopiowane z: %1.\nOpis oryginalny:\n'[REM_ZGL.SYM];
         _opis+=REM_ZGL.memo_txt(,,'OPIS');
         REM_ZGL.SYM:='';
         REM_ZGL.SOURCE:=exec('source_manual','remonty_zgloszenia');
         _from:=REM_ZGL.ref()
      |? _edokum<>null()
      || _buffer:=params_exec('EDOKUM2REM_ZGL','!tre_zgl_dzgl',_in.EDOKUM);
         REM_ZGL.blank();
         REM_ZGL.SOURCE:=exec('source_portal','remonty_zgloszenia');
         REM_ZGL.TYTUL:=_buffer.TYTUL;
         REM_ZGL.REM_KATG:=_buffer.REM_KATG;
         REM_ZGL.REM_ZAS:=_buffer.REM_ZAS;
         REM_ZGL.USR_WA:=_buffer.USR_WA;
         REM_ZGL.OS_WA:=_buffer.OS_WA;
         REM_ZGL.DT_WA:=_buffer.DT_WA;
         REM_ZGL.TM_WA:=_buffer.TM_WA;
         REM_ZGL.REDOKUM:=_buffer.REDOKUM;
         REM_ZGL.PRIORITY:=_buffer.PRIORITY;
         _opis:=_buffer.OPIS;
::       Jak wszystkie wymagane pole uzupełnione to automatycznie zatwierdzam zgłoszenie
::       (nie wchodzę w okno redagowania)
         {? exec('chk_rem_zgl_rej','remonty_zgloszenia',0)='' & ST.ODDZ<>''
         || _env.DONE:=1
         ?}
      |? _rek_n<>null()
      || REK_R.cntx_psh();
         REK_N.cntx_psh();
         REK_N.use(ref_name(_rek_n));
         REK_N.cntx_psh();
         REK_N.clear();
         {? REK_N.seek(_rek_n)
         ||
::          Sprawdzenie statusu reklamacji (tylko zaakceptowane)
            {? REK_N.STAT_REJ='T' & REK_N.RESULT='T'
            ||
::             Uzupełnienie danych zgłoszenia
               REM_ZGL.blank();
               REM_ZGL.SOURCE:=exec('source_rek','remonty_zgloszenia');
               REM_ZGL.AM:=ST.AM;
               REM_ZGL.AR:=ST.AR;
               REM_ZGL.DT_WA:=REK_N.DP;
               REM_ZGL.ODDZ:=REK_N.ODDZ;
               REM_ZGL.REM_KATG:=null();
               _opis:='';
               _opis+='Rodzaj reklamacji: %1\n'@[REK_N.REK_R().KOD+', '+REK_N.REK_R().OPIS];
::             Zasób
               _rem_zas:=null();
               M.cntx_psh();
               {? REK_N.M<>null() & REK_N.M().RODZ='T'
               ||
                  _czy_dk_c:=exec('get','#params',700601)='C';
                  _dk_c:=null();
                  {? _czy_dk_c
                  ||
::                   Sprawdzam czy reklamacja powiazana z pozycją dokumentu oraz czy ma ona przypisaną cechę dostawy
                     _dk_c:={? REK_N.FAK_POZ<>''
                            || exec('FindAndGet','#table',FAP,REK_N.FAK_POZ,,"FAP.DK_C",null())
                            |? REK_N.ZAM_POZ<>''
                            || exec('FindAndGet','#table',ref_tab(REK_N.ZAM_POZ),REK_N.ZAM_POZ,,"DK_C",null())
                            || null()
                            ?};
::                    Jeżeli reklamacja nie powiązana z dokumentem lub dokument nie posiada przypisanej cechy dostawy
::                    to szukam zasobów wg materiału
                     {? _dk_c=null() || _czy_dk_c:=0 ?}
                  ?};
                  REM_ZAS.cntx_psh();
                  {? _czy_dk_c
                  || REM_ZAS.index('DK_C');
                     REM_ZAS.prefix(_dk_c,'T')
                  || REM_ZAS.index('M');
                     REM_ZAS.prefix(REK_N.M,'T')
                  ?};
                  {? REM_ZAS.last()
                  ||
::                   więcej niż 1 zasób o danym materiale to nie podpowiadam
                     {? REM_ZAS.size()=1
                     || _rem_zas:=REM_ZAS.ref()
                     ?}
                  ||
::                   Nie ma zasobu, należy go utworzyć
                     REM_ZAS.blank();
                     REM_ZAS.AKT:='T';
                     REM_ZAS.ODDZ:=REM_ZGL.ODDZ;
                     REM_ZAS.SYMBOL:={? _czy_dk_c
                                     || M.KTM+'_'+exec('FindAndGet','#table',DK_C,_dk_c,,"DK_C.SYM",'')
                                     || M.KTM
                                     ?};
                     {? __CHK.index(REM_ZAS,0,1)<>''
                     ||
::                      Naruszona unikalność indeksu (istnieje już zasób o danym symbolu, należy go zmienić
                        _nr:=0;
                        {!
                        |?
                           _nr+=1;
                           _sym:={? _czy_dk_c
                                 || M.KTM+'_'+exec('FindAndGet','#table',DK_C,_dk_c,,"DK_C.SYM",'')+' ('+$_nr+')'
                                 || M.KTM+' ('+$_nr+')'
                                 ?};
                           REM_ZAS.SYMBOL:=_sym;
                           __CHK.index(REM_ZAS,0,1)<>''
                        !}
                     ?};
                     REM_ZAS.NAZWA:=M.N;
                     REM_ZAS.TYP:={? _czy_dk_c
                                  || exec('FindInSet','#table','REM_ZTP','TYP',exec('rem_zas_typ_val_dk_c','zasoby'),
                                          ,,1,,null())
                                  || exec('FindInSet','#table','REM_ZTP','TYP',exec('rem_zas_typ_val_m','zasoby'),
                                          ,,1,,null())
                                  ?};
                     REM_ZAS.M:=M.ref();
                     {? _czy_dk_c
                     || REM_ZAS.DK_C:=_dk_c
                     ?};
                     REM_ZAS.WLASNY:='N';
                     {? REM_ZAS.add()
                     || _rem_zas:=REM_ZAS.ref()
                     ?}
                  ?};
                  REM_ZAS.cntx_pop()
               |? REK_N.M<>null() & REK_N.M().RODZ='U'
               || _opis+='Usługa: %1\n'@[REK_N.M().KTM+' - '+REK_N.M().N]
               ?};
               M.cntx_pop();
               REM_ZGL.REM_ZAS:=_rem_zas;
               REM_ZGL.KH:=REK_N.KH;
               REM_ZGL.WEW:='N';
               REM_ZGL.PROJEKTY:=REK_N.PROJEKTY;
               REM_ZGL.OS_WA:=OPERATOR.USER().OSOBA;
               REM_ZGL.USR_WA:=OPERATOR.USER;
               REM_ZGL.USR_WPR:=OPERATOR.USER;
               REM_ZGL.DT_WPR:=date();
               REM_ZGL.TM_WPR:=time();
               REM_ZGL.TYTUL:='Zgłoszenie na podstawie reklamacji %1'@[REK_N.SYM];
               REM_ZGL.RREK:=$REK_N.ref();
               _str:=REK_N.OP+'\n'+REK_N.memo_txt(,,'OPIS');
               _opis+='Opis z reklamacji: %1\n'@[_str];
               _str:=REK_N.memo_txt(,,'RES_OPIS');
               {? +_str>0 || _opis+='Uzasadnienie: %1\n'@[_str] ?}
            || _can_continue:=0
            ?};
            ~~
         ?};
         REK_R.cntx_pop();
         REK_N.cntx_pop();
         REK_N.cntx_pop()
      |? _ek_prob<>null()
      || EK_PROB.cntx_psh();
         EK_PROB.clear();
         {? EK_PROB.seek(_ek_prob)
         ||
::          Sprawdzenie statusu problemu (tylko nierozwiązane)
            {? EK_PROB.PROBLEM='T'
            ||
::             Uzupełnienie danych zgłoszenia
               REM_ZGL.blank();
               REM_ZGL.SOURCE:=exec('source_problem','remonty_zgloszenia');
               REM_ZGL.AM:=ST.AM;
               REM_ZGL.AR:=ST.AR;
               REM_ZGL.DT_WA:=EK_PROB.ZGL_D;
::               REM_ZGL.ODDZ:=REK_N.ODDZ;
               REM_ZGL.REM_KATG:=null();
               _opis:='';
               _opis+=
                  'Problem: %1\nKategoria: %2\n\n%3'@
                  [EK_PROB.EK_SLOP().KOD+', '+EK_SLOP.NAZ,EK_SLOP.KLASA,EK_PROB.memo_txt(,1,'ZGL_DESC')];

::             Zasób
               _rem_zas:=null();
               {? EK_PROB.ZGP<>null()
               || ZGP.cntx_psh(); REM_ZAS.cntx_psh();
                  ZGP.prefix();
                  {? ZGP.seek(EK_PROB.ZGP)
                  || {? ZGP.PLACE<>null()
                     || REM_ZAS.index('TWRKPLC');
                        REM_ZAS.prefix(ZGP.PLACE);
                        {? REM_ZAS.first()
                        || _rem_zas:=REM_ZAS.ref()
                        ?}
                     |? ZGP.GRUPA<>null()
                     || REM_ZAS.index('TWRKZBR');
                        REM_ZAS.prefix(ZGP.GRUPA);
                        {? REM_ZAS.first()
                        || _rem_zas:=REM_ZAS.ref()
                        ?}
                     ?}
                  ?};
                  ZGP.cntx_pop(); REM_ZAS.cntx_pop()
               |? EK_PROB.GROP<>null()
               || GROP.cntx_psh(); GROPS.cntx_psh(); PL_RES.cntx_psh(); REM_ZAS.cntx_psh();
                  GROP.prefix();
                  {? GROP.seek(EK_PROB.GROP)
                  || GROPS.index('GROP');
                     GROPS.prefix(GROP.ref());
                     {? GROPS.size()=1
                     || {? GROPS.first()
                        || {? GROPS.PL_RES().FROM_STA<>null()
                           || REM_ZAS.index('TWRKPLC');
                              REM_ZAS.prefix(PL_RES.FROM_STA);
                              {? REM_ZAS.first()
                              || _rem_zas:=REM_ZAS.ref()
                              ?}
                           |? GROPS.PL_RES().FROM_GNI<>null()
                           || REM_ZAS.index('TWRKZBR');
                              REM_ZAS.prefix(PL_RES.FROM_GNI);
                              {? REM_ZAS.first()
                              || _rem_zas:=REM_ZAS.ref()
                              ?}
                           ?}
                        ?}
                     ?}
                  ?};
                  GROP.cntx_pop(); GROPS.cntx_pop(); PL_RES.cntx_pop(); REM_ZAS.cntx_pop()
               ?};
               REM_ZGL.REM_ZAS:=_rem_zas;

               REM_ZGL.KH:=null();
               REM_ZGL.WEW:='T';
               REM_ZGL.PROJEKTY:=null();
               REM_ZGL.OS_WA:=OPERATOR.USER().OSOBA;
               REM_ZGL.USR_WA:=OPERATOR.USER;
               REM_ZGL.USR_WPR:=OPERATOR.USER;
               REM_ZGL.DT_WPR:=date();
               REM_ZGL.TM_WPR:=time();
               REM_ZGL.TYTUL:='Zgłoszenie na podstawie problemu %1'@[EK_PROB.EK_SLOP().KOD];
               REM_ZGL.EK_PROB:=EK_PROB.ref()
            || _can_continue:=0
            ?};
            ~~
         ?};
         EK_PROB.cntx_pop()
      || REM_ZGL.blank();
         REM_ZGL.SOURCE:=exec('source_manual','remonty_zgloszenia');
         _opis:=''
      ?};
      {? _can_continue
      || {? REM_ZGL.add()
         || _ref:=#REM_ZGL.ref();
            {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.name(),_ref)
            || {? _action='KOPIUJ'
               || exec('copy_rem_zgla','!tre_zgl_dzgl',_from,REM_ZGL.ref())
               ?};
               REM_ZGL.memo_set(_opis,'OPIS');
               REM_ZGL.memo_set('','WOPIS');
               REM_ZGL.memo_set('','ROPIS');
::             Jak zgłoszenie z EDOKUMA to uzupełniam dodatkowe pola
               {? _edokum<>null()
               ||
                  EDOKUM.cntx_psh();
                  EDOKUM.use(ref_name(_edokum));
                  EDOKUM.clear();
                  {? EDOKUM.seek(_edokum)
                  ||
::                   Przypisuje numer zgłoszenia
                     REM_ZGL.NR:=exec('numer_new','numery','PACZKA');
                     exec('znak','numery','REM_ZGL',1);
::                   Przypisuje załączniki do zgłoszenia
                     EDOKUMZ.cntx_psh();
                     EDOKUMZ.use('skid_n'+(EDOKUM.name()+2));
                     EDOKUMZ.index('DISP');
                     EDOKUMZ.prefix(EDOKUM.ref());
                     {? EDOKUMZ.first()
                     || {!
                        |?
                           REM_ZGLA.blank();
                           REM_ZGLA.REM_ZGL:=REM_ZGL.ref();
                           REM_ZGLA.ATA:=EDOKUMZ.EDOKUM;
                           REM_ZGLA.add();
                           EDOKUMZ.next()
                        !}
                     ?};
                     EDOKUMZ.cntx_pop()
                  ?};
                  EDOKUM.cntx_pop()
::             Jak zgłoszenie z reklamacji (REK_N) lub problemu (EK_PROB) to uzupełniam dodatkowe pola
               |? _rek_n<>null() | _ek_prob<>null()
               ||
::                Przypisuje numer zgłoszenia
                  REM_ZGL.NR:=exec('numer_new','numery','PACZKA');
                  exec('znak','numery','REM_ZGL',1)
               ?};
               Plugin.run('REM_ZGL_EDIT_001','add','blank');
               {? _env.DONE>0 | (~_mp.isService() & (exec('rem_zgl_edit','!tre_zgl_dzgl','add')))
               || {? _env.DONE || REM_ZGL.STAT_REJ:=exec('status_ended','remonty_zgloszenia') ?};
                  {? REM_ZGL.put()
                  || {? REM_ZGL.memo_put(,'OPIS') & REM_ZGL.memo_put(,'WOPIS')
                     || {? _action<>'' || _context.REM_ZGL:=REM_ZGL.ref() ?};
                        _out.REM_ZGL:=REM_ZGL.ref();
                        _out.KAT_ZAS:=REM_ZGL.REM_ZAS().KAT().SYMBOL;
                        _out.KAT_ZGL:=REM_ZGL.REM_KATG().SYMBOL;
                        _out.REM_ZAS:=REM_ZGL.REM_ZAS;
                        _mp.save(,_out);
                        {? REM_ZGL.DT_PUA<>date(0,0,0)
                        || _mp.set_deadline(REM_ZGL.DT_PUA,REM_ZGL.TM_PUA)
                        || _mp.set_deadline(REM_ZGL.DT_PST,REM_ZGL.TM_PST)
                        ?};
                        {? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia') || _mp.done() ?}
                     ?}
                  ?}
               || {? exec('clean_rem_zgl','!tre_zgl_dzgl',REM_ZGL.ref())
                  || oldnumer:=1;
                     numer:=REM_ZGL.NR;
                     exec('nr_old','numery');
                     REM_ZGL.del();
                     {? _action='KOPIUJ' || _context.REM_ZGL:=null() ?}
                  ?};
                  {? _mp.isService()
                  || _out.RESULT:='BŁĄD';
                     _mp.save(,_out);
                     _mp.done()
                  || _mp.cancel()
                  ?}
               ?}
            ?};
            exec('blk_unlock','#table','REM_ZGL',REM_ZGL.name(),_ref)
         ?}
      ||
         {? _mp.isService()
         || _out.RESULT:='BŁĄD';
            _mp.save(,_out);
            _mp.done()
         || _mp.cancel('Nieprawidłowy status reklamacji.\n'
                       'Zgłoszenie można generować wyłącznie do zaakceptowanych (niezamkniętych) reklamacji.'@)
         ?}

      ?}

:: Akcja 'Popraw' z obszaru roboczego
:: Uruchomienie z listy zadań (z przekazanym parametrem wejściowym)
   |? (_action='POPRAW' | _mp.pathTodo())
   || {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
      || {? exec('rem_zgl_edit','!tre_zgl_dzgl','put')
         || {? _env.DONE || REM_ZGL.STAT_REJ:=exec('status_ended','remonty_zgloszenia') ?};
            {? REM_ZGL.put()
            || {? REM_ZGL.memo_put(,'OPIS') & REM_ZGL.memo_put(,'WOPIS')
               || exec('desc_update','#b__box',REM_ZGL.uidref());
                  _out.REM_ZGL:=REM_ZGL.ref();
                  _out.KAT_ZAS:=REM_ZGL.REM_ZAS().KAT().SYMBOL;
                  _out.KAT_ZGL:=REM_ZGL.REM_KATG().SYMBOL;
                  _out.REM_ZAS:=REM_ZGL.REM_ZAS;
                  _mp.save(,_out);
                  {? REM_ZGL.DT_PUA<>date(0,0,0)
                  || _mp.set_deadline(REM_ZGL.DT_PUA,REM_ZGL.TM_PUA)
                  || _mp.set_deadline(REM_ZGL.DT_PST,REM_ZGL.TM_PST)
                  ?};
                  {? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia') || _mp.done() ?}
               ?}
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

:: Akcja 'Usuń' z obszaru roboczego
   |? _action='USUŃ'
   || _ref:=REM_ZGL.ref();
      {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.name(),_ref,,'Zgłoszenie jest redagowane'@)
      || {? exec('can_delete_rem_zgl','!tre_zgl_dzgl',REM_ZGL.ref())=0
         || FUN.info('Nie można usunąć.'@+'\n'+'Zgłoszenie wykorzystane w systemie.'@)
         |? FUN.ask('Czy usunąć zgłoszenie?'@)
         ||
::          Dodatkowe zabezpieczenie, jaby podczas czekania na odpowiedź, ktoś usunął rekord
            {? REM_ZGL.seek(_context.REM_ZGL)
            || do();
               {? exec('clean_rem_zgl','!tre_zgl_dzgl',REM_ZGL.ref())
               || oldnumer:=1;
                  numer:=REM_ZGL.NR;
                  exec('nr_old','numery');
                  {? REM_ZGL.del(,1)>0
                  || _mp.cancel()
                  ?}
               ?};
               _context.REM_ZGL:=REM_ZGL.ref();
               end()
            || FUN.info('Zgłoszenie zostało już usunięte.'@);
               _mp.cancel()
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REM_ZGL',REM_ZGL.name(),_ref)

:: Akcja 'Zakończ' z obszaru roboczego
   |? _action='ZAKOŃCZ'
   || {? exec('blk_lock','#table','REM_ZGL',REM_ZGL.ref(),,,'Zgłoszenie jest redagowane'@)
      || {? exec('chk_rem_zgl_rej','remonty_zgloszenia',1)=''
         || {? FUN.ask('Czy zakończyć rejestrację zgłoszenia %1?'@[REM_ZGL.SYM])
            || REM_ZGL.STAT_REJ:=exec('status_ended','remonty_zgloszenia');
               {? REM_ZGL.put()
               || exec('desc_update','#b__box',REM_ZGL.uidref());
                  _out.REM_ZGL:=REM_ZGL.ref();
                  _out.KAT_ZAS:=REM_ZGL.REM_ZAS().KAT().SYMBOL;
                  _out.KAT_ZGL:=REM_ZGL.REM_KATG().SYMBOL;
                  _out.REM_ZAS:=REM_ZGL.REM_ZAS;
                  _mp.save(,_out);
                  _mp.done()
               ?}
            ?}
         ?}
      ?};
      exec('blk_unlock','#table','REM_ZGL',REM_ZGL.ref())

:: Tutaj nie powinno dojść, więc błąd
   || _msg:='Nieobsłużony kontekst wywołania czynności %1.'@@['TRE_ZGL_DZGL'];
      FUN.emsg(_msg);
      _mp.error(_msg)
   ?};

   REM_ZGL.cntx_pop()
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Opis dla czynności rejestrowania zgłoszenia remontowego (TRE_ZGL_DZGL)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';

:: jest rekord kluczowy to ustawiam odpowiedniego EDOKUM albo REM_ZGL
_keyRefs:=_mp.getRefs();
{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_tab(_kref)=EDOKUM
         || _tmp:=exec('FindAndGet','#table',EDOKUM,_kref,,"ID",'');
            _desc:={? _tmp<>'' || 'Zakończ rejestrację zgłoszenia remontowego do dokumentu: %1'@@[_tmp] || '' ?}
         |? ref_tab(_kref)=REM_ZGL
         || _tmp:=exec('FindAndGet','#table',REM_ZGL,_kref,,"SYM",'');
            _desc:={? _tmp<>'' || 'Zakończ rejestrację zgłoszenia remontowego: %1'@@[_tmp] || '' ?}
         ?}
      ?}
   !}
?};

{? _desc='' || _desc:='Zarejestruj nowe zgłoszenie remontowe'@@ ?};

_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_ZGL_DZGL';
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
   _args.CONTEXT.REM_ZGL:=null();
   _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('mp_run','#b__box',_args);

{? _args.CONTEXT.REM_ZGL<>null()
|| {? REM_ZGL.seek(_args.CONTEXT.REM_ZGL)
   || _filter:=params_get().env_rem_zgl.FILTER;
      {? REM_ZGL.f_active()>0
      || {? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') &
            (_filter='A' | _filter='M' | _filter='N')
         || REM_ZGL.f_add()
         |? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia') &
            (_filter='A' | _filter='M' | _filter='W')
         || REM_ZGL.f_add()
         || FUN.info(
               'Dołączone zgłoszenie %1 nie będzie wyświetlone ze względu na aktywny filtr.'@[REM_ZGL.SYM]
            )
         ?}
      ?}
   ?}
?};
~~


\action_copy
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Kopiuj' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_ZGL_DZGL';
_args.AKCJA:='KOPIUJ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
   _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
   _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

exec('mp_run','#b__box',_args);

{? _args.CONTEXT.REM_ZGL<>null()
|| {? REM_ZGL.seek(_args.CONTEXT.REM_ZGL)
   || _filter:=params_get().env_rem_zgl.FILTER;
      {? REM_ZGL.f_active()>0
      || {? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') &
            (_filter='A' | _filter='M' | _filter='N')
         || REM_ZGL.f_add()
         |? REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia') &
            (_filter='A' | _filter='M' | _filter='W')
         || REM_ZGL.f_add()
         || FUN.info(
               'Dołączone zgłoszenie %1 nie będzie wyświetlone ze względu na aktywny filtr.'@[REM_ZGL.SYM]
            )
         ?}
      ?}
   ?}
?};
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Usuń' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_ZGL_DZGL';
_args.UIDREF:=REM_ZGL.uidref();
_args.AKCJA:='USUŃ';
_args.PROC_START:='N';
_args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
   _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
   _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

exec('mp_run','#b__box',_args);

REM_ZGL.f_seek(_args.CONTEXT.REM_ZGL);
~~


\action_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Zakończ' zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TRE_ZGL_DZGL';
_args.UIDREF:=REM_ZGL.uidref();
_args.AKCJA:='ZAKOŃCZ';
_args.PROC_START:='N';
_args.CONTEXT:=obj_new('REM_ZGL','ENV_REM_ZGL');
   _args.CONTEXT.REM_ZGL:=REM_ZGL.ref();
   _args.CONTEXT.ENV_REM_ZGL:=params_get().env_rem_zgl;

_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'REM_ZGL',REM_ZGL.ref());

exec('mp_run','#b__box',_args);

{? params_get().env_rem_zgl.FILTER='N' & REM_ZGL.get() & REM_ZGL.STAT_REJ<>exec('status_new','remonty_zgloszenia')
|| REM_ZGL.f_del()
?};
~~


\rem_zgl_fld_blank
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła na wartość początkową pól w tabeli REM_ZGL
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='OS_WA'
|| OPERATOR.USER().OSOBA
|| ~~
?}


\rem_zgl_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła przed redakcją dla pól w tabeli REM_ZGL
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_result:=1;

_env_rem_zgl:=params_get().env_rem_zgl;

{? _afld='REM_ZAS'
|| REMONTY.REM_ZAS:=REM_ZGL.REM_ZAS;
   {? _env_rem_zgl.REM_ZAS=null() &
      (  REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') |
         REM_ZGL.STAT_REJ=exec('status_ended','remonty_zgloszenia')
      )
   || _sort:='SYMBOL';
      _from:='';
      _where:='REM_ZAS.ODDZ=\'%1\' and REM_ZAS.AKT=\'T\''[REM_ZGL.ODDZ];
      _header:=' — '+'oddział: %1'@[REM_ZGL.ODDZ];

::   {? REM_ZGL.WEW='T'
::   || _where+=' and REM_ZAS.WLASNY=\'T\'';
::      _header+=', '+'własne'@
::   || _where+=' and REM_ZAS.WLASNY=\'N\'';
::      _header+=', '+'obce'@
::   ?};
::   {? REM_ZGL.KH
::   || _where+=' and REM_ZAS.KH=\'%1\''[$REM_ZGL.KH];
::      _header+=', '+'kontrahent: %1'@[REM_ZGL.KH().KOD]
::   ?};
::   {? REM_ZGL.UD_SKL
::   || _where+=' and REM_ZAS.UD_SKL=\'%1\''[$REM_ZGL.UD_SKL];
::      _header+=', '+'jednostka organizacyjna: %1'@[REM_ZGL.UD_SKL().SYMBOL]
::   ?};
      REM_ZAS.f_set(_sort,_from,_where);
      exec('rem_zas_win_dict','zasoby');
      REM_ZAS.hdr_sel();
      REM_ZAS.hdr_sel(_header)
   || _result:=0
   ?}
|? _afld='OS_WA'
|| _result:=
      exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PPDO') | exec('chk_role','#b__box',OPERATOR.USER,'ZWS_DOS_PRDO')

?};
_result


\rem_zgl_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła po redakcji dla pól w tabeli REM_ZGL
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
{? _afld='REM_ZAS'
|| {? REM_ZGL.REM_ZAS<>null() & REM_ZGL.REM_ZAS<>REMONTY.REM_ZAS
   || {? REM_ZAS.WLASNY='T'
      || REM_ZGL.WEW:='T'
      || REM_ZGL.WEW:='N'
      ?};
      exec('plan_load','remonty_plan')
   ?};
   {? REM_ZGL.WEW='T'
   || {? REM_ZGL.UD_SKL=null()
      || REM_ZGL.UD_SKL:=REM_ZAS.UD_SKL;
         UD_POM.PBUD:=REM_ZGL.UD_SKL().SYMBOL
      ?}
   || {? REM_ZGL.KH=null()
      || REM_ZGL.KH:=REM_ZAS.KH
      ?}
   ?}
|? _afld='WEW'
|| {? REM_ZGL.WEW='T'
   || REM_ZGL.KH:=null()
   || REM_ZGL.UD_SKL:=null();
      UD_POM.PBUD:=''
   ?}
?};
exec('rem_zgl_efld_opt','remonty_zgloszenia',cur_win(1,1));
1


\action_find_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed akcją 'Szukaj' w oknie zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
REM_ZGL.win_edit('SZUK');
REM_ZGL.hdr_edit('Zgłoszenie remontowe — szukaj'@);
exec('rem_zas_win_dict','zasoby');
REM_ZAS.f_clear();
PROJEKTY.win_dict('WER');
PROJEKTY.f_clear();
~~


\action_find_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Po akcji 'Szukaj' w oknie zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
REM_ZAS.actions('WER_SLO','');
~~


\button_end
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przycisk 'Zakończ' w oknie redagowania zgłoszenia remontowego
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env_zasoby;
_env.DONE:=1;
'key:F2'


\action_attachments
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Załączniki' w oknie zgłoszeń remontowych
::----------------------------------------------------------------------------------------------------------------------
exec('attachments','remonty_zgloszenia',REM_ZGL.STAT_REJ=exec('status_closed','remonty_zgloszenia'));
~~


\button_attachments
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przycisk 'Załączniki' w oknie redagowania zgłoszenia remontowego
::----------------------------------------------------------------------------------------------------------------------
exec('attachments','remonty_zgloszenia');
''


\can_delete_rem_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Sprawdza, czy można usunąć zgłoszenie remontowe
::   WE: _a - REM_ZGL.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zgl:=_a;
_can_delete:=1;

{? _can_delete>0
|| REM_GRG.cntx_psh();
   REM_GRG.index('ZGL_OKR');
   REM_GRG.prefix(_rem_zgl);
   {? REM_GRG.size()>0 || _can_delete:=0 ?};
   REM_GRG.cntx_pop()
?};

{? _can_delete>0
|| REM_GRM.cntx_psh();
   REM_GRM.index('ZGL_MOKR');
   REM_GRM.prefix(_rem_zgl);
   {? REM_GRM.size()>0 || _can_delete:=0 ?};
   REM_GRM.cntx_pop()
?};

{? _can_delete>0
|| PROJ2FAP.cntx_psh();
   PROJ2FAP.index('REM_ZGL');
   PROJ2FAP.prefix('N',_rem_zgl);
   {? PROJ2FAP.size()>0 || _can_delete:=0 ?};
   PROJ2FAP.cntx_pop()
?};

{? _can_delete>0
|| PROJ2FAP.cntx_psh();
   PROJ2FAP.index('REM_ZGL');
   PROJ2FAP.prefix('T',_rem_zgl);
   {? PROJ2FAP.size()>0 || _can_delete:=0 ?};
   PROJ2FAP.cntx_pop()
?};

{? _can_delete>0
|| REM_ZASP.cntx_psh();
   REM_ZASP.index('ZGLTS');
   REM_ZASP.prefix(_rem_zgl);
   {? REM_ZASP.size()>0 || _can_delete:=0 ?};
   REM_ZASP.cntx_pop()
?};

{? _can_delete>0
|| _uidref:=exec('FindAndGet','#table',REM_ZGL,_rem_zgl,,"uidref()",'brak');
   REM_ZGL.cntx_psh();
   REM_ZGL.index('ZGL_NAD');
   REM_ZGL.prefix(_uidref);
   {? REM_ZGL.size()>0 || _can_delete:=0 ?};
   REM_ZGL.cntx_pop()
?};

_can_delete


\clean_rem_zgl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Czyści powiązania do zgłoszenia remontowego
::   WE: _a - REM_ZGL.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zgl:=_a;
_result:=0;
_can_continue:=1;
REM_ZGLA.cntx_psh();
REM_ZGLA.index('REM_ZGL');
REM_ZGLA.prefix(_rem_zgl);
{? REM_ZGLA.first()
|| {!
   |? _can_continue:=REM_ZGLA.del(,1);
      REM_ZGLA.first() & _can_continue>0
   !}
?};
REM_ZGLA.cntx_pop();

{? _can_continue>0
|| _can_continue:=exec('rem_clear','px_poz',_rem_zgl)
?};

{? _can_continue>0
|| _can_continue:=exec('rem_clear','po_plan',_rem_zgl)
?};

{? _can_continue>0
|| PX_OBJ.cntx_psh();
   PX_OBJ.index('REM_ZGL');
   PX_OBJ.prefix(_rem_zgl);
   {? PX_OBJ.first()
   || {!
      |? _can_continue:=exec('delete','px_obj',PX_OBJ.ref());
         PX_OBJ.first() & _can_continue>0
      !}
   ?};
   PX_OBJ.cntx_pop()
?};

{? _can_continue>0
|| REM_PLAN.cntx_psh();
   REM_PLAN.index('REM_ZGL');
   REM_PLAN.prefix(_rem_zgl);
   {? REM_PLAN.first()
   || {!
      |? _can_continue:=exec('rem_plan_delete','remonty_plan',REM_PLAN.ref());
         REM_PLAN.first()>0 & _can_continue>0
      !}
   ?};
   REM_PLAN.cntx_pop()
?};

{? _can_continue>0
|| _result:=1
?};
_result


\copy_rem_zgla
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Kopiuje załączniki z jednego zgłoszenia do drugiego
::   WE: _a - REM_ZGL.ref() źródłowy
::       _b - REM_ZGL.ref() docelowy
::----------------------------------------------------------------------------------------------------------------------
_source:=_a;
_destination:=_b;

REM_ZGLA.cntx_psh();
REM_ZGLA.index('REM_ZGL');
REM_ZGLA.prefix(_source);
{? REM_ZGLA.first()
|| {!
   |? REM_ZGLA.cntx_psh();
      REM_ZGLA.prefix();
      REM_ZGLA.REM_ZGL:=_destination;
      REM_ZGLA.add();
      REM_ZGLA.cntx_pop();
      REM_ZGLA.next()
   !}
?};
REM_ZGLA.cntx_pop();
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby w zależności od stanu rekordu zrobi done
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;

_can_continue:=1;
_obj:=obj_new('RESULT','REM_ZGL','EDOKUM','REK_N','EK_PROB');
_obj.RESULT:=0;
_obj.REM_ZGL:=null();
_obj.EDOKUM:=null();
_obj.REK_N:=null();
_obj.EK_PROB:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=REM_ZGL.name()
         || _obj.REM_ZGL:=exec('FindAndGet','#table',REM_ZGL,_kref,,,null());

            {? _obj.REM_ZGL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc robię error
               _can_continue:=0;
               exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp)
            ||
::             Sprawdzenie statusu rejestracji zgłoszenia, jeżeli różny od 'new', to popychanie
               _stat_new:=exec('status_new','remonty_zgloszenia');
               _stat_rej:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"STAT_REJ",_stat_new);
               {? _stat_rej<>_stat_new
               || _can_continue:=0;
                  FUN.info('Rejestracja zgłoszenia remontowego została już zakończona.'@);
                  _out.REM_ZGL:=_obj.REM_ZGL;
                  _out.KAT_ZAS:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"REM_ZAS().KAT().SYMBOL",'');
                  _out.KAT_ZGL:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"REM_KATG().SYMBOL",'');
                  _out.REM_ZAS:=exec('FindAndGet','#table',REM_ZGL,_obj.REM_ZGL,,"REM_ZAS",null());
                  _mp.save(,_out);
                  _mp.done()
               ?}
            ?}
         ?}
      ||
::       Nie znaleziono rekordu kluczowego powiązanego ze zgłoszeniem, więc nic nie robię
::         _can_continue:=0;
::         exec('rem_zgl_deleted_in_proc','remonty_zgloszenia',_mp);
         ~~
      ?}
   !}
?};

{? _can_continue>0
||
:: jest parametr wejściowy REM_ZGL
   {? _obj.REM_ZGL=null() & var_pres('REM_ZGL',_in)=type_of(null())
   || _obj.REM_ZGL:=_in.REM_ZGL
   ?};
:: jest parametr wejściowy EDOKUM
   {? _obj.EDOKUM=null() & var_pres('EDOKUM',_in)=type_of(null())
   || _obj.EDOKUM:=_in.EDOKUM
   ?};
:: jest parametr wejściowy REK_N
   {? _obj.REK_N=null() & var_pres('REK_N',_in)=type_of(null())
   || _obj.REK_N:=_in.REK_N
   ?};
:: jest parametr wejściowy EK_PROB
   {? _obj.EK_PROB=null() & var_pres('EK_PROB',_in)=type_of(null())
   || _obj.EK_PROB:=_in.EK_PROB
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj


\rem_zgl_trig_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Triger 'przed add' i 'przed put' dla tabeli REM_ZGL
::----------------------------------------------------------------------------------------------------------------------
:: Replikacja pól z zasobu na zgłoszenie
REM_ZGL.REM_ZAS();
REM_ZGL.M:=REM_ZAS.M;
REM_ZGL.DK_C:=REM_ZAS.DK_C;
REM_ZGL.POJAZDY:=REM_ZAS.POJAZDY;
REM_ZGL.TWRKPLC:=REM_ZAS.TWRKPLC;
REM_ZGL.TWRKZBR:=REM_ZAS.TWRKZBR;
REM_ZGL.SRSR:=REM_ZAS.SRSR;
:: Czyszczenie pól kontrahent/jednostka organizacyjna w zależności od: wewnętrzne/zewnętrzne
{? REM_ZGL.WEW='T'
|| REM_ZGL.KH:=null()
|| REM_ZGL.UD_SKL:=null()
?};
:: Czyszczenie pól z datami w zależności od tego, czy zgłoszenie jest odrzucone
{? REM_ZGL.WERYFIK='N'
|| REM_ZGL.DT_PST:=date(0,0,0); REM_ZGL.TM_PST:=time(0,0,0);
   REM_ZGL.DT_PUA:=date(0,0,0); REM_ZGL.TM_PUA:=time(0,0,0)
?};
REM_ZGL.TM_START:=exec('create','#tm_stamp',REM_ZGL.DT_PST,REM_ZGL.TM_PST);
REM_ZGL.TM_END:=exec('create','#tm_stamp',REM_ZGL.DT_PUA,REM_ZGL.TM_PUA);
:: Określenie symbolu zgłoszenia nadrzędnego na najwyższym poziomie
{? REM_ZGL.SYM_TOP=''
|| {? REM_ZGL.ZGL_TOP=''
   ||
::    Nnie ma nadrzędnego, przypisanie własnego symbolu jako nadrzędnego
      REM_ZGL.SYM_TOP:=REM_ZGL.SYM
   ||
::    Jak nadrzędne, znalezienie i przypisanie symbolu
      _sym_top:=REM_ZGL.SYM;
      REM_ZGL.cntx_psh();
      REM_ZGL.prefix();
      {? REM_ZGL.seek(REM_ZGL.ZGL_TOP)
      || _sym_top:=REM_ZGL.SYM
      ?};
      REM_ZGL.cntx_pop();
      REM_ZGL.SYM_TOP:=_sym_top
   ?}
?};
1


\rem_zgl_trig_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Triger 'po add', 'po put' oraz 'po del' dla tabeli REM_ZGL
::   WE: _a - typ triggera
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>0 & type_of(_a)=type_of('a')
|| _typ:=_a;
   {? _typ='put'
   || _ref1:=REM_ZGL.REM_ZAS;
      _ref2:=bfld('REM_ZAS');
      {? _ref1<>_ref2 & _ref2<>null
      || exec('rem_zas_status','zasoby',_ref2)
      ?};
      exec('rem_zas_status','zasoby',_ref1)
   |? _typ='add'
   || _ref1:=REM_ZGL.REM_ZAS;
      {? _ref1<>null
      || exec('rem_zas_status','zasoby',_ref1)
      ?}
   |? _typ='del'
   || _ref1:=bfld('REM_ZAS');
      {? _ref1<>null
      || exec('rem_zas_status','zasoby',_ref1)
      ?}
   ?}
?};
~~


\EDOKUM2REM_ZGL
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [20.42]
:: OPIS: Wyciągnięcie z EDOKUMa i tabel powiązanych danych do utworzenia zgłoszenia remontowego
::   WE: _a - EDOKUM.ref()
::----------------------------------------------------------------------------------------------------------------------
_edokum:=_a;

_buffer:=exec('obj_new','#buf','REM_ZGL');

EDOKUM.cntx_psh(); EDOK_ATR.cntx_psh();

EDOKUM.use(ref_name(_edokum));
EDOK_ATR.use('edokat'+(ref_name(_edokum)+2));
EDOKUM.prefix();
{? EDOKUM.seek(_edokum)
||
:: Zmieniam status EDOKUMA na wysłany - na portalu cofam akceptację
   EDOKOS.cntx_psh();
   EDOKOS.use('skid_y'+(EDOKUM.name()+2));

   _sym:='Weryfikowany'@;
::   exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),OPERATOR.USER,'S',,'P');
   exec('EDOKOS_add','portal_wnioski',EDOKUM.ref(),OPERATOR.USER,'Y',,'S',_sym,'N');
   EDOKOS.cntx_pop();
   EDOKUM.STATUS:='S';
   EDOKUM.put();

   _buffer.TYTUL:='Zgłoszenie z portalu: %1'[exec('FindAndGet','#table',EDOKUM,_edokum,,"ID",'')];
   _buffer.DT_WA:=exec('wn_date','form_ob',EDOKUM.uidref());
   _buffer.TM_WA:=exec('wn_time','form_ob',EDOKUM.uidref());
   _katg:=exec('atr_get','portal_walidacja','Podkategoria');
   _buffer.REM_KATG:=exec('FindInSet','#table','REM_KATG','SYMBOL',_katg,,"REM_KATG.ref()",1,,null());
   _opis:=exec('atr_get','portal_walidacja','Opis','WAR_W');
   _buffer.USR_WA:=exec('FindAndGet','#table',EDOKUM,_edokum,,"USERS",exec('operatorUser','#users'));
   _buffer.OS_WA:=exec('FindAndGet','#table',USERS,_buffer.USR_WA,,"USERS.OSOBA",OPERATOR.USER().OSOBA);
   _buffer.OPIS:=_opis;
   _rem_zas_sym:=exec('atr_get','portal_walidacja','Zasob');
   _buffer.REM_ZAS:=exec('FindInSet','#table','REM_ZAS','SYM',_rem_zas_sym,,"REM_ZAS.ref()",1,,null());
   _buffer.REDOKUM:=$EDOKUM.ref();
   _buffer.PRIORITY:=0;
   _prior:=exec('atr_get','portal_walidacja','Priorytet');
   {? _prior<>''
   || _buffer.PRIORITY:={? _prior='Niski'@ || 0
                        |? _prior='Średni'@ || 1
                        |? _prior='Wysoki'@ || 2
                        || 0
                        ?}
   ?};
   _buffer
?};

EDOKUM.cntx_pop(); EDOK_ATR.cntx_pop();

_buffer


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=1;

{? _mp.isService()
||
:: Sprawdzam czy zasób określony w parametrach EDOKUM-a
   _edokum:=null();
   _oddz:='';
   {? var_pres('EDOKUM',_in)=type_of(null())
   || _edokum:=_in.EDOKUM;
      EDOKUM.cntx_psh();
      EDOK_ATR.cntx_psh();
      EDOKUM.use(ref_name(_edokum));
      EDOK_ATR.use('edokat'+(ref_name(_edokum)+2));
      EDOKUM.prefix();
      {? EDOKUM.seek(_edokum)
      || _rem_zas_sym:=exec('atr_get','portal_walidacja','Zasob');
         _rem_zas:=exec('FindInSet','#table','REM_ZAS','SYM',_rem_zas_sym,,"REM_ZAS.ref()",1,,null());
         _oddz:=exec('FindAndGet','#table',REM_ZAS,_rem_zas,,"REM_ZAS.ODDZ",'')
      ?};
      EDOKUM.cntx_pop();
      EDOK_ATR.cntx_pop()
   ?};
:: Jak nie określono zasobu to pobieram domyślny oddział (parametr 700702)
   {? _oddz=''
   || _oddz:=exec('get','#params',700702)
   ?};
:: Sprawdzam czy jest zdefiniowano więcej niż 1 oddział
   {? _oddz=''
   || ODDZ.cntx_psh();
      ODDZ.clear();
      {? ODDZ.first() & ODDZ.size()=1
      || _oddz:=ODDZ.KOD
      ?};
      ODDZ.cntx_pop()
   ?};

   {? _oddz<>''
   || __PARSES.setVal('OddzialLogProd',_oddz);
      _args:=__PARSES.args('OkresRok');
      _args.OBSZAR:='LMG';
      _args.AR:=date()~1;
      _args.AM:=date()~2;
      __PARSES.setVal('OkresRok',_args)
   ?}
?};
_result


\rem_zgl_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [23.25]
:: OPIS: Redakcja zgłoszenia remontowego
::   WE: _a - tryb pracy: 'add', 'put'
::----------------------------------------------------------------------------------------------------------------------
_tryb:=_a;

params_set(params_get());

_result:=0;
{? VEK.TERM='T'
|| _result:=exec('rem_zgl_edit','ekioski',_tryb)
|| {? _tryb='put'
   ||
      exec('rem_zgl_efld_opt','remonty_zgloszenia');
      REM_ZGL.win_edit('REDR');
      REM_ZGL.hdr_edit('Zgłoszenie remontowe — rejestracja'@);
      REM_ZGL.btn_eopt('REDR','END','state=normal');
      Plugin.run('REM_ZGL_EDIT_001','put','edit');
      _result:=REM_ZGL.edit("params_exec('chk_rem_zgl_rej','remonty_zgloszenia',0)")
   ||
      exec('rem_zgl_efld_opt','remonty_zgloszenia');
      REM_ZGL.win_edit('REDR');
      REM_ZGL.hdr_edit('Zgłoszenie remontowe — rejestracja'@);
      REM_ZGL.btn_eopt('REDR','END',
         {? REM_ZGL.STAT_REJ=exec('status_new','remonty_zgloszenia') || 'state=normal' || 'state=grayed' ?}
      );
::      REM_ZGL.memo_get(,'OPIS',);
      REM_ZGL.memo_get(,'WOPIS',);
      REM_ZGL.memo_get(,'ROPIS',);
      Plugin.run('REM_ZGL_EDIT_001','add','edit');
      _result:=REM_ZGL.edit("params_exec('chk_rem_zgl_rej','remonty_zgloszenia',1)")
   ?}
?};
_result

:Sign Version 2.0 jowisz:1045 2023/09/06 12:34:10 2c3bc9febc2f1ef477093ec43e013561a2570bbae4bb7c5f3c3cdb0c7e51f53c1139b2ab495648f1b90c1c18143961703234f3a0810287ca2fe94ece77f613c9db688ee8f33513dcf970a0bb37fe77a8e4beb20d24b0a7011f6b2b4b4943df728a0c8f70b72d082a96320250fca73214436bd16db119de0815a8a82a0f501aa6
