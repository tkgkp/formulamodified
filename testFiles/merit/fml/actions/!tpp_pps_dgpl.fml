:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tpp_pps_dgpl.fml
:: Utworzony: 24.05.2016
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły czynności TPP_PPS_DGPL - Generowanie przepisu planistycznego
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Formuła główna czynności TPP_PPS_DGPL
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

::# permissions=ODDZ

::# properties=SERVICE

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=N, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['ZL','TPP_PPS_DGPL'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};
::# kind=WE, symbol=TKTL, type=_TKTL, name=Wskazanie na kartę technologiczną, required=N, keyref=T
{? var_pres('TKTL',_in)<>type_of(~~) & var_pres('TKTL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2.'@@['TKTL','TPP_PPS_DGPL'];
   FUN.error(_msg);
   _mp.error(_msg);
   return()
?};

:: PARAMETRY WY:
::# kind=WY, symbol=RESULT, type=STRING, name=Rezultat działania, required=N

ZL.cntx_psh();
ZL.clear();
exec('tktl_cntx_psh','tech_common');
TPKTL.cntx_psh();

_result:=0;

_zl:=null();
_tktl:=null();

_clean_result:=exec('clean','!tpp_pps_dgpl',_mp,_in);
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;
_tktl:=_clean_result.TKTL;

_what:='';
{? _can_continue>0 & _zl<>null()
|| _can_continue:=ZL.seek(_zl)
?};
{? _can_continue>0 & _tktl<>null()
|| exec('tktl_use','tech_common',ref_name(_tktl)+3);
   TKTL.clear();
   _can_continue:=TKTL.seek(_tktl)
?};

{? _can_continue>0
||
:: Sekcja sprawdzania

   {? _zl<>null()
   || _what:=exec('record','#to_string',ZL.ref());
::    Sprawdzam czy zlecenie nie jest zamknięte
      {? ZL.STAN='Z'
      || _msg:='Zlecenie: %1 zostało zamknięte, generowanie przepisu planistycznego niedostępne.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _mp.error(_msg)
      ?};
::    Czynności nie można uruchomić dla podzlecenia, które jest podzleceniem zlecenia złożonego rodzaju Z
      {? _can_continue>0
      || _top_level:=exec('top_level','zl_link',ZL.ref());
         _top_rodzaj:=exec('top_rodzaj','zl_link',ZL.ref());
         _top_rodz_tex:=exec('FindAndGet','#table',ZL,_top_level,,"RODZ_TEX",'');
         {? _top_level<>ZL.ref() & _top_rodzaj<>'P' & _top_rodz_tex='Z'
         || _msg:='Generowanie przepisu planistycznego dla zlecenia: %1 możliwe tylko od strony zlecenia nadrzędnego.'@@[_what];
            {? _mp.isService()=0
            || FUN.info(_msg)
            ?};
            _can_continue:=0;
            _out.RESULT:='BŁĄD';
            _mp.save(,_out);
            _mp.done()
         ?}
      ?}
   ?};

   {? _tktl<>null()
   || _what:=exec('record','#to_string',TKTL.ref());
::    Sprawdzam czy karta technologiczna nie jest w archiwum
      {? TKTL.ARCH='T'
      || _msg:='Karta technologiczna: %1 jest w archiwum, generowanie przepisu planistycznego niedostępne.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _mp.error(_msg)
      ?};
::    Sprawdzam czy karta technologiczna jest aktualna
      {? ~exec('tktl_act','tech_head',0)
      || _msg:='Karta technologiczna: %1 jest nieaktualna, generowanie przepisu planistycznego niedostępne.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _mp.error(_msg)
      ?};
::    Sprawdzam czy karta nie jest prototypowa
      {? _can_continue>0 & TKTL.KTM=null()
      || _msg:='Karta technologiczna: %1 jest prototypowa, generowanie przepisu planistycznego niedostępne.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _mp.error(_msg)
      ?};
::    Sprawdzam czy przypadkiem karta nie jest zleceniowa
      {? _can_continue>0 & TKTL.TORW='Z'
      || _msg:='Karta technologiczna: %1 to technologia zlecenia, generowanie przepisu planistycznego niedostępne.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _mp.error(_msg)
      ?};
::    Sprawdzam czy typ karty umożliwia tworzenie przepisów planistycznych
      {? _can_continue>0 & TKTL.TYP().CZAPLA<>'T'
      || _msg:='Typ karty technologicznej: %1 nie umożliwia tworzenia przepisów planistycznych.'@@[_what];
         {? _mp.isService()=0
         || FUN.info(_msg)
         ?};
         _can_continue:=0;
         _out.RESULT:='BŁĄD';
         _mp.save(,_out);
         _mp.done()
      ?}
   ?};

   {? _can_continue>0
   ||
      _generate:=1;

      _dialog:=1;

      _complex:=0;
      _par:=exec('get','#params',500367);
      {? _par='T'
      || _complex:=1;
         _dialog:=2
      ?};

      {? _mp.isAutoRun()
      || _dialog:=2
      |? _mp.isService()
      || _dialog:=2
      ?};

      {? _dialog=2
      || KOMM.init(250,,'Generowanie przepisu planistycznego')
      ?};

      {? _dialog>0
      ||
::       Wyświetlam pytanie
         {? _tktl<>null()
         || _generate:=FUN.ask('Generować przepis planistyczny dla karty: %1?'@[_what])
         ?}
      ?};

      {? _generate>0
      || {? _zl<>null()
         ||
::          ZLECENIA
            {? ZL.RODZAJ='Z'
            ||
::             ustalenie statusu ewentualnego poprzedniego przepisu
               _what_tex:=exec('stat_tex_pop','px_tex',ZL.ref());
               _jaki:=1+_what_tex;
               _czyrej:=_what_tex+1;
               {? _czyrej='N'
               ||
                  {? _jaki='Z'
                  ||
::                   generowanie przepisu zintegrowanego
                     _result:=exec('zl_tex_complex','px_tex',ZL.ref(),_dialog)
                  ||
::                   generowanie serii przepisow prostych
                     _result:=exec('zl_tex_simply','px_tex',ZL.ref(),_dialog)
                  ?}
               || _msg:='Do zlecenia: %1 zarejestrowano wykonania. Aktualizacja przepisu niemożliwa.'@[_what];
                  {? _mp.isService()=0
                  || FUN.info(_msg)
                  ?};
                  _mp.error(_msg)
               ?}
            ||
::             generacja tradycyjna - wiele pojedynczych przepisow
               _result:=exec('zl_tex_simply','px_tex',ZL.ref(),_dialog)
            ?};

::          Jeżeli się udało wygenerować i czynność wykonana akcją w oknie to pokazuję wygenerowany przepis
            {? _result>0 & _mp.akcja()='AKCJA'
            || exec('zl_tex_view','px_tex')
            ?}
         |? _tktl<>null()
         ||
::          TECHNOLOGIA
            _warn:=0;
            {? _mp.akcja()='AKCJA'
            || _warn:=1
            ?};
            _result:=exec('tktl_tex_update','px_tex',_tktl,_warn,_dialog,_complex,,1,1);

::          Jeżeli się udało wygenerować i czynność wykonana akcją w oknie to pokazuję wygenerowany przepis
            {? _result>0 & _mp.akcja()='AKCJA'
            || exec('Select_A_KTL','px_tex','VIEW!')
            ?}
         ?}
      ?};

      {? _result>0
      || _out.RESULT:='OK'
      || _out.RESULT:='BŁĄD'
      ?};
      {? _dialog=2
      || KOMM.select()
      ?};

::    Obsługa na done
      {? _mp.isService()
      || _mp.done()
      || {? _result>0
         || _mp.done()
         ?}
      ?}
   || _out.RESULT:='BŁĄD'
   ?};
   _mp.save(,_out);
   ~~
|| _msg:='Brak parametru wejściowego \'%1\' lub \'%2\' dla czynności %3.'@@['TKTL','ZL','TPP_PPS_DGPL'];
   _mp.error(_msg)
?};
TPKTL.cntx_pop();
ZL.cntx_pop();
exec('tktl_cntx_pop','tech_common');
_result


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Opis dla czynności generowania przepisu planistycznego TPP_PPS_DGPL
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));
_tktl:=null();
_zl:=null();
_sym_tklt:='';
_sym_zl:='';
_ile:=0;

:: jest rekord kluczowy TKTL, to ustawiam odpowiednie TKTL
{? var_pres('[1]',_keyRefs)>0 & 5+ref_name(_keyRefs[1])=5+TKTL.name()
|| _tktl:=exec('FindAndGet','#table',TKTL,_keyRefs[1],,,null())
:: jest parametr wejściowy TKTL
|? var_pres('TKTL',_in)>0
|| _tktl:=exec('FindAndGet','#table',TKTL,_in.TKTL,,,null())
?};
{? _tktl<>null()
|| _sym_tklt:=exec('record','#to_string',_tktl)
?};

:: jest rekord kluczowy ZL, to ustawiam odpowiednie ZL
{? var_pres('[1]',_keyRefs)>0 & ref_name(_keyRefs[1])=ZL.name()
|| _zl:=exec('FindAndGet','#table',ZL,_keyRefs[1],,,null())
:: jest parametr wejściowy ZL
|? var_pres('ZL',_in)>0
|| _zl:=exec('FindAndGet','#table',ZL,_in.ZL,,,null())
?};
{? _zl<>null()
|| _sym_zl:=exec('record','#to_string',_zl)
?};

{? _sym_tklt<>''
|| _desc:='Wygeneruj przepis planistyczny dla karty technologicznej: %1'@@[_sym_tklt]
|? _sym_zl<>''
|| _desc:='Wygeneruj przepis planistyczny dla zlecenia %1'@@[_sym_zl]
?};
_desc


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - obj_new() - tablica parametrów wejściowych
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};

_can_continue:=1;
_obj:=obj_new('RESULT','ZL','TKTL');
_obj.RESULT:=0;
_obj.ZL:=null();
_obj.TKTL:=null();

_keyRefs:=_mp.getRefs();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];

      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=ZL.name()
         || _obj.ZL:=exec('FindAndGet','#table',ZL,_kref,,,null());

            {? _obj.ZL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego ze zleceniem, więc robię error
               _can_continue:=0;
               exec('zl_deleted_in_proc','zl_common',_mp)
            |? ~_mp.isMicro() & exec('FindAndGet','#table',ZL,_obj.ZL,,"ZL.STAN",'')='Z'
            ||
::            Zlecenie zostało zamknięte, więc robie error
               _can_continue:=0;
               exec('zl_deleted_in_proc','zl_common',_mp,,0)
            ?}

         |? (5+ref_name(_kref))=(5+TKTL.name())
         || _obj.TKTL:=exec('FindAndGet','#table',TKTL,_kref,,,null());

            {? _obj.TKTL=null()
            ||
::             Nie znaleziono rekordu kluczowego powiązanego z technologią, więc robię error
               _can_continue:=0;
               exec('tech_deleted_in_proc','tech_common',_mp)
            |? ~_mp.isMicro() & exec('FindAndGet','#table',TKTL,_obj.TKTL,,"TKTL.ARCH",'')='T'
            ||
::             Karta w archiwum
               exec('tech_deleted_in_proc','tech_common',_mp,,2,_obj.TKTL)
            ?}
         ?}
      ?}
   !}
?};
{? _can_continue>0
||
:: jest parametr wejściowy ZL
   {? _obj.ZL=null() & var_pres('ZL',_in)=type_of(null())
   || _obj.ZL:=_in.ZL
   ?};
:: jest parametr wejściowy TKTL
   {? _obj.TKTL=null() & var_pres('TKTL',_in)=type_of(null())
   || _obj.TKTL:=_in.TKTL
   ?}
?};

{? _can_continue>0
|| _obj.RESULT:=1
?};

_obj

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 220312559cc5a4bd3d28744e330e0a497bc6ff4d26af80f60625064fd3a6f309810c0ad87da2f1dd884bed8be623681efd7eda52ee2adf0d6e573ece99d06ca70b4be7d3c87f04325d7ae67a6396d25b46bce3e853e1f2467c4fc3849f4cbe6143c6fecb2eafcff71e62265df5f35263d921342608e2984049bf988252c3fee3
