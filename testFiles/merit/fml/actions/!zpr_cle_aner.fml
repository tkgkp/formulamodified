:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zpr_cle_aner.fml
:: Utworzony: 09.03.2018
:: Autor: WH
::======================================================================================================================
:: Zawartość: Formuły czynności ZPR_CLE_ANER
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Czynność czyszczenia list TODO (ZPR_CLE_ANER) - formuła główna
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::----------------------------------------------------------------------------------------------------------------------
_out:=params_get().out;
_mp:=params_get().mp;

_b_worker:=_mp.b_worker;

:: WŁAŚCIWOŚCI CZYNNOŚCI
::# properties=SERVICE,GRP_FIRM

:: PARAMETRY WY:
::# kind=WY, symbol=IL_DEL, type=NUMBER, name=Ilość usuniętych zadań, required=N
::# kind=WY, symbol=IL_CHK, type=NUMBER, name=Ilość przetworzonych zadań, required=N

B_PROC.cntx_psh();
B_PREL.cntx_psh();
BI_PROC.cntx_psh();
BI_TODO.cntx_psh();
BI_PREL.cntx_psh();
BI_TODO.use('bi_t____');

BI_PROC.use('bi_p____');
BI_PREL.use('bi_e____');
BI_PREL.index('CLASS2');
B_ACTION.cntx_psh();
B_ACTION.index('B_ELE');

_il_del:=0;
_il_chk:=0;

_dialog:=1;
_komm:=2;
_progress:=1;
_can_continue:=1;

{? _mp.isService() | _mp.isAutoRun()
|| _dialog:=0;
   _komm:=0;
   _progress:=0
?};

{? _dialog>0
|| _can_continue:=FUN.ask('Czy uruchomić czyszczenie list zadań w firmie %1?'@[REF.FIRMA().OPIS])
?};

:: Komunikaty domyślnie do KOMMa

{? _can_continue>0
|| {? _mp.isService()=0
   || KOMM.init(250,,'Czyszczenie list zadań')
   ?}
?};

_prg_step:=exec('progress_step','#b__box');

BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.OCZEKUJACA);
_size_ocze:=BI_PREL.size();
BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.ANULOWANA);
_size_anul:=BI_PREL.size();
BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.ZAKONCZONA);
_size_zak:=BI_PREL.size();
BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.URUCHOMIONA);
_size_uru:=BI_PREL.size();
BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.BLAD);
_size_err:=BI_PREL.size();

BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.OCZEKUJACA);

{? _can_continue>0 & BI_PREL.first()
||
   {? _size_ocze>0
   ||
      {? _can_continue>0
      || {? _progress>0
         || FUN.prg_start(_size_ocze/_prg_step,'Czyszczenie list zadań z nieprawidłowych zadań o statusie: %1'@[exec('record','#to_string',__Status.OCZEKUJACA)],1,,1)
         ?}
      ?};

      {? var_pres('_res')>100
      || obj_del(_res)
      ?};

      _res:=exec('magic_happens','#b__box',_mp,_dialog,_progress,__Status.OCZEKUJACA,_b_worker);
      _il_chk+=_res.IL_CHK;
      _il_del+=_res.IL_DEL;

      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   ~~
?};

BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.URUCHOMIONA);

{? _can_continue>0 & BI_PREL.first()
||
   {? _size_uru>0
   ||
      {? _can_continue>0
      || {? _progress>0
         || FUN.prg_start(_size_uru/_prg_step,'Czyszczenie list zadań z nieprawidłowych zadań o statusie: %1'@[exec('record','#to_string',__Status.URUCHOMIONA)],1,,1)
         ?}
      ?};

      {? var_pres('_res')>100
      || obj_del(_res)
      ?};

      _res:=exec('magic_happens','#b__box',_mp,_dialog,_progress,__Status.URUCHOMIONA,_b_worker);
      _il_chk+=_res.IL_CHK;
      _il_del+=_res.IL_DEL;

      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   ~~
?};

{? _can_continue>0
||
   {? _size_anul>0
   ||
::    Sprzątanie błędnych zapisów
      BI_TODO.index('ELEMENT');
      BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.ANULOWANA);
      {? _progress>0
      || FUN.prg_start(_size_anul/_prg_step,'Czyszczenie list zadań z nieprawidłowych zadań o statusie: %1'@[exec('record','#to_string',__Status.ANULOWANA)],1,,1)
      ?};

::    Z czynności anulowanych tniemy wszystkie zadania jak leci
      _res_an:=exec('clean_incorrect','!zpr_cle_aner',,_progress);
      _il_chk+=_res_an.IL_CHK;
      _il_del+=_res_an.IL_DEL;

      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};

   {? _size_zak>0
   ||
      BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.ZAKONCZONA);

      {? _progress>0
      || FUN.prg_start(_size_zak/_prg_step,'Czyszczenie list zadań z wolnych zadań o statusie: %1'@[exec('record','#to_string',__Status.ZAKONCZONA)],1,,1)
      ?};

::    Z czynności zakończonych tniemy zadania wolne oraz moje
      _res_wo:=exec('clean_incorrect','!zpr_cle_aner',__Status.TODO_WOLNE,_progress);
      _il_chk+=_res_wo.IL_CHK;
      _il_del+=_res_wo.IL_DEL;

      {? _progress>0
      || FUN.prg_stop()
      ?};

      {? _progress>0
      || FUN.prg_start(_size_zak/_prg_step,'Czyszczenie list zadań z przydzielonych zadań o statusie: %1'@[exec('record','#to_string',__Status.ZAKONCZONA)],1,,1)
      ?};

      _res_mo:=exec('clean_incorrect','!zpr_cle_aner',__Status.TODO_MOJE,_progress);
      _il_chk+=_res_mo.IL_CHK;
      _il_del+=_res_mo.IL_DEL;

      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   {? _size_err>0
   || BI_PREL.prefix(REF.FIRMA,'B_ACTION',__Status.BLAD);
      {? _progress>0
      || FUN.prg_start(_size_err/_prg_step,'Czyszczenie list zadań z wolnych zadań o statusie: %1'@[exec('record','#to_string',__Status.BLAD)],1,,1)
      ?};

::    Z wolnych czynności ze zgloszonymi problemami zmieniamy status tym zadaniom na rowniez bledne
      {? BI_PREL.first()
      || _lp:=0;
         {!
         |?
            {? _progress>0
            || {? _lp%*_prg_step=0
               || FUN.prg_next()
               ?}
            ?};

            BI_TODO.cntx_psh();
            BI_TODO.index('ELEMENT');
            BI_TODO.prefix(BI_PREL.ref(),__Status.TODO_WOLNE);

            {? BI_TODO.first()
            || {!
               |? _next:=0;
                  _ref_nxt:=null();
                  BI_TODO.cntx_psh();
                  {? BI_TODO.next()
                  || _ref_nxt:=BI_TODO.ref()
                  ?};
                  BI_TODO.cntx_pop();

                  BI_TODO.cntx_psh();
                  BI_TODO.prefix();
                  BI_TODO.BI_STAT:=__Status.TODO_ERROR;
                  BI_TODO.TM_LANG:=0;
                  _can_continue:=BI_TODO.put();
                  BI_TODO.cntx_pop();

                  {? _ref_nxt<>null()
                  || _next:=BI_TODO.seek(_ref_nxt)
                  ?};
                  _next>0 & _can_continue>0
               !}
            ?};
            BI_TODO.cntx_pop();
            _lp+=1;
            BI_PREL.next() & _can_continue>0
         !}
      ?};
      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?};
   ~~
?};

{? _can_continue>0
||
:: Czyszczenie instancji mikroprocesów
   BI_PROC.index('PROBORN');
   BI_PREL.index('BISTATUS');
   B_PROC.index('SYM');
   B_PROC.prefix('T');
   {? B_PROC.first()
   || _lp:=0;
      {? _progress>0
      || FUN.prg_start(B_PROC.size()/_prg_step,'Czyszczenie list zadań z mikroprocesów...'@,1,,1)
      ?};
      {!
      |?
         {? _progress>0
         || {? _lp%*_prg_step=0
            || FUN.prg_next()
            ?}
         ?};
         BI_PROC.prefix(B_PROC.ref());
         {? BI_PROC.first()
         || {!
            |? _next:=0;
               _ref_nxt:=null();
               BI_PROC.cntx_psh();
               {? BI_PROC.next()
               || _ref_nxt:=BI_PROC.ref()
               ?};
               BI_PROC.cntx_pop();

               BI_PREL.prefix(BI_PROC.ref());
               {? BI_PREL.first()
               || {!
                  |?
                     _next2:=0;
                     _ref_nxt2:=null();
                     BI_PREL.cntx_psh();
                     {? BI_PREL.next()
                     || _ref_nxt2:=BI_PREL.ref()
                     ?};
                     BI_PREL.cntx_pop();

                     _ref:=BI_PREL.ref();
                     {? BI_PREL.FIRMA=REF.FIRMA | BI_PREL.FIRMA=null()
                     ||
                        {? exec('lock','#bi_prel',_ref,_komm)>0
                        || _il_chk+=1;
                           _can_continue:=exec('delete','#bi_proc',BI_PROC.ref());
                           {? _can_continue>0
                           || _il_del+=1
                           ?};
                           exec('unlock','#bi_prel',_ref)
                        ?}
                     ?};
                     {? _ref_nxt2<>null()
                     || _next2:=BI_PREL.seek(_ref_nxt2)
                     ?};
                     _next2>0 & _can_continue>0
                  !}
               ?};

               {? _ref_nxt<>null()
               || _next:=BI_PROC.seek(_ref_nxt)
               ?};
               _next>0 & _can_continue>0
            !}
         ?};
         _lp+=1;
         B_PROC.next() & _can_continue>0
      !};
      {? _progress>0
      || FUN.prg_stop()
      ?}
   ?}
?};

{? _can_continue>0 & _progress>0
|| FUN.prg_stop()
?};

{? _mp.isService()=0
|| KOMM.select()
?};

{? _can_continue>0 & _dialog>0
|| _msg:='Zakończono czyszczenie.\n\n'
         'Przetworzonych zadań: %1\n'
         'Usuniętych zadań: %2'@[$_il_chk,$_il_del];
   FUN.info(_msg)
?};

_out.IL_DEL:=_il_del;
_out.IL_CHK:=_il_chk;
_mp.save(,_out);
_mp.done();
BI_PROC.cntx_pop();
BI_TODO.cntx_pop();
BI_PREL.cntx_pop();
B_PREL.cntx_pop();
B_ACTION.cntx_pop();
B_PROC.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Formuła na opis TO-DO
::       UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
_result:='Wykonaj czyszczenie list zadań użytkowniów'@@;
_result


\clean_incorrect
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Czyści zadania których nie powinno być, a są z powodu jakiś błędów w Menadżerze
::       Kontekst pracy - zaprefiksowana dziedzina BI_PREL
::   WE: [_a] - BI_STAT.ref() - status na BI_TODO którym zaprefiksować BI_TODO
::       [_b] - INTEGER - 0/[1] - czy wyświetlać progressa
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_stat:=null();
{? var_pres('_a')=type_of(BI_STAT.ref())
|| _stat:=_a
?};
_progress:=1;
{? var_pres('_b')=type_of(0)
|| _progress:=_b
?};

_prg_step:=exec('progress_step','#b__box');

_result:=obj_new('IL_DEL'
                  ,'IL_CHK');
_result.IL_DEL:=0;
_result.IL_CHK:=0;
BI_TODO.index('ELEMENT');
_lp:=1;
{? BI_PREL.first()
|| {!
   |?
      {? _progress>0
      || {? _lp%*_prg_step=0
         || FUN.prg_next()
         ?}
      ?};

      {? _stat<>null()
      || BI_TODO.prefix(BI_PREL.ref(),_stat)
      || BI_TODO.prefix(BI_PREL.ref())
      ?};
      {? BI_TODO.first()
      || {!
         |? _result.IL_CHK+=1;
            _can_continue:=exec('delete','#bi_todo',BI_TODO.ref());
            {? _can_continue>0
            || _result.IL_DEL+=1
            ?};
            BI_TODO.first() & _can_continue>0
         !}
      ?};
      _lp+=1;
      BI_PREL.next()
   !}
?};
_result

:Sign Version 2.0 jowisz:1048 2021/04/09 15:19:42 0e4bf34e8ea686b180e89c8421ecdd04545064285794a0e51fac14f9ab766c4feec20524f10c5cf5fbf68e51163fb4353d00d4ebe8305ba4561c0435d0f6007008bf1eeffa62fab266f914dba1e557e29b0ff3226ed7efb52133f487d02d30e3028bde7e5d1e3e9601afe639c344a4fe68ee3ef4d736be8807c97aa4d1611378
