:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !hbn_wba_zawy.fml
:: Utworzony: 10.06.2015
:: Autor: PJ
::======================================================================================================================
:: Zawartość: Formuły czynności HBN_WBA_ZAWY - przeglądanie pozycji wyciągów
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Pozycje wyciągów - główna formuła czynności HBN_WBA_ZAWY
::----------------------------------------------------------------------------------------------------------------------
::# permissions=FJKS,HRB,HRP
exec('wyciagi','!hbn_wba_zawy')


\wyciagi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Wyświetla okienko zaimportowanych wyciagów
::  WE: _a: czy podgląd ze strony dokumentu: 1 - tak, 0 - nie
::  OLD: \m_impwb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
exec('czytaj','#stalesys',,XINFO);
exec('czytaj','#stalesys',,HINFO);
exec('czytaj','#stalesys',,FINFO);
g_impwb:=1;
RACHBANK.KB_2R_BD:='RACHBANK.KB_2R:=PW.RBL';
RACHBANK.KB_1R_BD:='RACHBANK.KB_1R:=RB.get_rbtx(2,PW.RBL)';
{? _
|| _mask:=(4+$DOK.DTW);
   PWN.use('pn'+_mask);
   PW.use('pw'+_mask);
   PW_OP.use('pwp'+_mask);
   PW_OP.index('PW');
   pb_sql:='STATUS=\''+$'T'+'\'';
   _rbl:=exec('rb_nosp','#string',DOK.DOK_REJ().JPK_RB);
   {? exec('setf','hbn_filtr',0,'W','D')
   || PWN.win_sel('WER_GRP');
      PWN.actions('WER','DROAZEIUJYCS:CI','P',1);
      PW.actions('WER','PTZRY',,1);
      PWN.hdr_sel();
      PWN.hdr_sel(', waluta: '@+SSTALE.WAL().KOD);
      {? PWN.f_first
      || {! |? _will_del:=1;
               PW.index('PWN');
               PW.prefix(PWN.ref());
               {? PW.first
               || {! |? {? _rbl<>PW.RBL
                        || _will_del:=0
                        || PW.next()
                        ?}
                  !}
               || _will_del:=0
               ?};
               {? ~ _will_del || PWN.f_del() || PWN.f_next ?}
         !}
      ?};
      _pw:=sql('select distinct PW.NRD, PW.DK, PWN.NRW, PWN.REFERENCE as REF from @PW '+
               'left join PWN using (PW.PWN,PWN.REFERENCE) '+
               'where PWN.RBL = :_a order by 2',_rbl);
      {? _pw.find_ge(DOK.DTW) || _ref:=BB.sqlint(_pw.REF+8);  PWN.f_seek(_ref,) ?};
      PWN.select(,1);
      PWN.f_clear()
   ?}
|| PWN.use('pnxxxx');
   PW.use('pwxxxx');
   PW_OP.use('pwpxxxx');
   PW_OP.index('PW');
   {? exec('setf','hbn_filtr',0,'W','D')
   || PWN.win_sel('WER_GRP');
      PWN.hdr_sel();
      PW.hdr_sel(', waluta: %1'@[SSTALE.WAL().KOD]);
      PW.index('PWN');
      {? PWN.f_first()
      || PW.prefix(PWN.ref());
         PW.first()
      || PW.prefix(null)
      ?};
      AreaTitle.setTabWin(PWN,~~);
      AreaTitle.setTitle();
      PWN.select(,,,'Z:Z');
      PWN.f_clear()
   ?}
?};
VAR_DEL.delete('TAB_SPEC','TT_JKS','ws_jk','g_impwb','STAB_SPE','STT_JKS');
1


\pw_grp_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po odwieżeniu okna wertowania w oknie grupowym WER_GRP tabeli PW
::----------------------------------------------------------------------------------------------------------------------
grp_edisp(PW,'WER_RED')


\bd_imprk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem rachunku bankowego kontrahenta na wyciagu (PW.RBK)
::  OLD: \bd_imprk/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
PW.RBK:=RB.get_rbtx(2,PW.RBK)


\bd_imprl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem rachunku bankowego licencjobiorcy na pozycji wyciagu (PW.RBL)
::  OLD: \bd_imprl/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
PW.RBL:=RB.get_rbtx(2,PW.RBL)


\bd_pwn_rbl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.70]
:: OPIS: Przed wyswietleniem rachunku bankowego licencjobiorcy na wyciagu (PWN.RBL)
::  OLD: \bd_imprl/skid_pel.fml
::----------------------------------------------------------------------------------------------------------------------
PWN.RBL:=RB.get_rbtx(2,PWN.RBL)


\fb_imp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Import wyciagow bankowych
::  OLD: \fb_imp/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
HBPKI.index('HBPKITP');
HBPKI.prefix(1,'I');
{? HBPKI.first()
|| exec('create_st','!hbn_wba_zawy');
   exec('hb_imp','hb',1);
   PWN.prefix();
   PWN.f_rfresh()
|| FUN.emsg('W systemie brak specyfikacji do importu wyciągów bankowych!'@)
?}


\st_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KS [22.26]
:: OPIS: Dodawanie reczne pliku wyciagu do listy importowanych wyciagow RR, wywołanie domyślne z funkcji \st_add_normal
::  OLD: \st_add/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? Plugin.runnable('HBN_PW_ADD')=1
|| Plugin.run('HBN_PW_ADD')
|| exec('st_add_normal','!hbn_wba_zawy')
?}


\st_add_normal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Dodawanie reczne pliku wyciagu do listy importowanych wyciagow
::  OLD: \st_add/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
_add:=~~;
_sep:=exec('sep','#file',2);
_Interm:=exec('interm','#system');
{? _Interm
|| __file_dir:=fmk_tmp_dir(0);
   _file:=__file_dir.get_path();
   _wyn:=dlg_upload(_file,0,'.sta');
   _file+=_sep+_wyn;
   _filepath:=_file
|| _filtr:='Wszystkie pliki'@+' (*.*)|*.*|'+'Wyciągi'@+' (*.sta)|*.sta|'+'Pliki'@+' (*.txt)|*.txt';
   exec('myDIALOG','object');
   _wyn:=_file:=myDIALOG.OpenFile(_filtr,'');
   _filepath:='@'+_file
?};
{? _wyn =''
|| _file:='';
   VAR_DEL.delete('__file_dir')
?};
{? form(_file)='' || return(0) ?};
_test:=fopen(_filepath,'r',0);
{? _Interm || FUN.info('Plik został załadowany'@) ?};
:: nie wiem czemu ale z jakiejś przyczyny FUN. jest konieczne
{? _test || fclose(_test) || FUN.emsg('Plik o podanej nazwie nie istnieje.'@) ?};
{? _file<>'' & _test
|| _filename:=exec('filename','#string',_file);
   VAR_DEL.delete('TMP_RACH');
   TMP_RACH:=tab_tmp(1,'RACH','STRING[50]','Rachunek');
:: jesli plik xml to formula do xml w przeciwnym przypadku przyjmujemy ze to plik w formacie MT940
:: jesli plik z BGK to import nie jak z XML
   _wiersz:='';
   {? _f1:=fopen(_filepath,'r',0)
   || {! |? (_wiersz:=fread(_f1))<>'\n' & 8+_wiersz<>'<WYCIAGI' |!
            1
      !};
      fclose(_f1);
      _refb:=RB.getrbank(3,26+((52+9)-_wiersz),XINFO.KRAJ);
      B.cntx_psh();
      B.clear;
      {? B.seek(_refb)
      || _bgk:=B.NB*'Bank Gospodarstwa Krajowego'
      || _bgk:=0
      ?};
      B.cntx_pop()
   ?};
   {? -(_filename+3)='xml' & ~_bgk
   || _rach:=exec('get_rach_xml','hbn',_filepath,0)
   || _rach:=exec('get_rach','hbn',_filepath,0)
   ?};
   {? TMP_RACH.first()
   || {! |?
         _ref:=RB.getrbank(3,TMP_RACH.RACH);
         {? ~_ref
         ||
::       jeżeli nie znaleziono, wyszukiwanie po fragmencie rachunku, by obsłużyć wyciągi z Deutsche Bank Polska
            {? +TMP_RACH.RACH=10
            || SKID_RBK.cntx_psh();
               SKID_RBK.index('BANKNR');
               SKID_RBK.prefix(REF.INFO);
               {? SKID_RBK.first()
               || {! |?
                     {? (SKID_RBK.BANK().BANORG().ID=191 | SKID_RBK.BANK().BANORG().NAZ='Deutsche Bank Polska SA')
                        & SKID_RBK.N+10=TMP_RACH.RACH
                     || _ref:=SKID_RBK.BANK
                     ?};
                     ~_ref & SKID_RBK.next()
                  !}
               ?};
               SKID_RBK.cntx_pop()
            ?}
         ?};
         PWB.blank();
         PWB.FILENAME:=_file;
         PWB.MULTI:='N';
:: domyślna jednostka księgowa
         _odd:=PAR_SKID.get(1);
:: jeżeli użytkownik ma uprawnienia do wszystkich ODD, nie jest ustawiona bieżąca ODD to brana jest j. księgowa domyslna
         {? _odd<>'' & OPERATOR.DEPT=null & Perm.hasFull('FJKS',OPERATOR.USER)
         || ODD.cntx_psh();
            ODD.index('ODDZIALY');
            ODD.prefix(REF.FIRMA,_odd,_odd);
            {? ODD.first() || PWB.ODD:=ODD.ref() ?};
            ODD.cntx_pop()
:: jeżeli jest bieżąca j. księgowa to ona jest przypisywana jeżeli bieżący użytkownik ma uprawnienia
         |? OPERATOR.DEPT<>null & exec('usr_fjks','b_perm',OPERATOR.DEPT,OPERATOR.USER)
         || PWB.ODD:=OPERATOR.DEPT
         || _w_odd:=exec('select_odd','!hbn_wba_zawy');
            {? _w_odd<>null || PWB.ODD:=_w_odd ?}
         ?};
         PWB.LOC:='T';
         {? _ref
         || B.prefix();
            {? B.seek(_ref) || _bank:=B.NUMER || _bank:='' ?}
         || _bank:=''
         ?};
         {? _bank<>''
         || HBPKI.cntx_psh();
            HBPKI.index('HBPKITP');
            HBPKI.prefix(1,'I',_bank);
            {? HBPKI.first()
            || PWB.KOD_BANK:=_bank;
               PWB.NAZ_BANK:=B.NB;
               PWB.Z:='N';
               {? Plugin.exists('SPEC_HBN_001') || _tmp_spec:=Plugin.run('SPEC_HBN_001') ?};
               {? var_press('_tmp_spec')>0 & +_tmp_spec
               || PWB.MULTI:='N';
                  PWB.SPEC:=_tmp_spec
               || {? HBPKI.size()=1
                  || PWB.MULTI:='N';
                     PWB.SPEC:=HBPKI.TPK
                  || PWB.MULTI:='T';
                     PWB.SPEC:=''
                  ?}
               ?}
            ?};
            HBPKI.cntx_pop()
         ?};
         _bank='' & TMP_RACH.next()
      !};
      {? PWB.KOD_BANK='' || PWB.Z:='B' ?};
      {? PWB.add()
      || PWB.f_add();
         _hfile:=fopen(_filepath,'br',0);
         {? _hfile
         || _add:=PWB.bl_put('PLIK',_hfile,,,_filename);
            fclose(_hfile)
         || _add:=0
         ?};
         {? _add || ferase(_filepath,0) ?}
      ?}
   ?};
   VAR_DEL.delete('TMP_RACH')
?};
{? _add=~~
|| FUN.emsg('Dodanie pliku zakończone niepowodzeniem.'@)
|? _add=0
|| FUN.emsg('Nie udało się zapisać zawartości pliku do bazy.'@)
?};
VAR_DEL.delete('__file_dir')


\select_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [ER/WRT/XP/18.02/1807/0013]
:: OPIS: wybór j. ksiegowej dla pliku wyciągu
::   WY: ODD.ref
::----------------------------------------------------------------------------------------------------------------------
ODD.index('ODDZIALY');
ODD.clear();
ODD.win_sel('WYB');
ODD.f_clear();
ODD.f_set('OD,N',
      'left join USERSDEP using(USERSDEP.DEPT,ODD.REFERENCE)',
      '(:_a=1 or USERSDEP.USERS=:_b) and ODD.FIRMA=:_c',Perm.hasFull('FJKS'),OPERATOR.USER,REF.FIRMA);
_odd:=null;
ODD.f_first();
{? ODD.select(,1,5) || _odd:=ODD.ref() ?};
ODD.f_clear();
_odd


\st_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula usuwa biezacy plik z wyciagiem z listy plikow do przetworzenia
::  OLD: \st_del/proc_01.fml
:: ~OST: INBLGET
::----------------------------------------------------------------------------------------------------------------------
{? PWB.sel_size()=0
|| {? PWB.Z='T'
   || FUN.emsg('Wskazany plik (%1) został już przetworzony,\n'
               'usuwać można jedynie nierozpoznane/nieprzetworzone pliki.'@[PWB.PLIK().NAME])
   |? PWB.Z<>'T' & PWB.count()>0
   || FUN.emsg('Wskazany plik z wyciągiem jest powiązany z zaimportowanymi\n'
               'pozycjami wyciągów. Aby usunąć plik z bazy należy najpierw\n'
               'usunąć wszystkie pochodzące z niego wyciągi.'@)
   |? FUN.ask('Usunąć wskazany plik: %1\nz bazy plików z wyciągami?'@[PWB.PLIK().NAME])
   || _choice:=FUN.choice('Zapisać plik z wyciągiem na dysku przed usunięciem z bazy?'@,1,'Tak'@,'Nie'@);
      {? _choice=1
      || _name:=PWB.bl_info('PLIK','NAME');
         _roz:=PWB.bl_info('PLIK','EXTENSION');
         _file:=fmk_tmp_dir(0).get_path()+'/'+_name;
         _filepath:=_file;

         {? form(_file)<>''
         || {? ~PWB.bl_get('PLIK',_filepath,0)
            || {? FUN.ask('Nie udało się zapisać pliku z wyciągiem na dysku.\n'
                          'Zrezygnować z usunięcia pliku z bazy?'@)
               || return(0)
               ?}
            ?}
         ?};
         dlg_save(_filepath)
      |? _choice=0
      || return(0)
      ?};
      PWB.del()
   ?}
|| {? var_press('__grup_marker')
   || {? __grup_marker=1
      || _name:=PWB.bl_info('PLIK','NAME');
         _roz:=PWB.bl_info('PLIK','EXTENSION');
         _file:=fmk_tmp_dir(0).get_path()+'/'+_name;
         _filepath:=_file;
         {? form(_file)<>''
         || {? ~PWB.bl_get('PLIK',_filepath,0)
            || {? FUN.ask('Nie udało się zapisać pliku z wyciągiem na dysku.\n'
                          'Zrezygnować z usunięcia pliku z bazy?'@)
               || return(0)
               ?}
            ?}
         ?};
         dlg_save(_filepath)
      ?}
   ?};
   {? kont_usu
   || {? PWB.Z<>'T' & PWB.count()=0
      || {? wyc_path<>''
         || _name:=PWB.bl_info('PLIK','NAME');
            {? ~PWB.bl_get('PLIK','@'+wyc_path+_name,0)
            || {? FUN.ask('Nie udało się zapisać pliku z wyciągiem na dysku.\n'
                          'Zrezygnować z usuwania grupy plików z bazy?'@)
               || kont_usu:=0
               ?}
            ?}
         ?};
         {? kont_usu || PWB.del() ?}
      || st_del_f+=1
      ?}
   ?}
?}


\be_st_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula przed grupowym usuwaniem plikow z bazy wyciagow
::  OLD: \be_st_del/proc_01.fml
:: ~OST: INFILECHOOSER
::----------------------------------------------------------------------------------------------------------------------
kont_usu:=1;
wyc_path:='';
__grup_marker:=0;
_wy:=FUN.ask('Usunąć zaznaczone pliki z bazy plików z wyciągami bankowymi?'@);
{? _wy
|| st_del_f:=0;
   st_sel_f:=PWB.sel_size();
   {? FUN.ask('Zapisać pliki z wyciągami na dysku przed usunięciem z bazy?'@)
   || _Interm:=exec('interm','#system');
      {? _Interm
      || __grup_marker:=1
      || wyc_path:=exec('filechooser','#file','Wskaż katalog do zapisu plików z wyciągami bankowymi'@,0,,,,'DIRECTORIES_ONLY',1);
         wyc_path:=form(wyc_path);
         {? wyc_path<>''
         || {? wyc_path+1<>'\\' || wyc_path+='\\' ?}; _wy:=1
         || {? FUN.ask('Nie wskazano katalogu do zapisu plików. Zrezygnować z usuwania plików z bazy?\n'
                       'W razie kontynuacji procedury usuwania bez podania katalogu do zapisu plików\n'
                       'pliki te zostaną bezpowrotnie usunięte.'@)
            || _wy:=0
            || _wy:=1
            ?}
         ?}
      ?}
   ?}
|| VAR_DEL.delete('kont_usu')
?};
_wy


\ae_st_del
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Po grupowym usuwaniu plikow z bazy wyciagow
::  OLD: \ae_st_del/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? st_del_f>0
|| FUN.info('Podczas usuwania pominięto: %1 plików\n (z zaznaczonych: '
            '%2), które zostały\n już rozpoznane i przetworzone.'@[$st_del_f,$st_sel_f])
|| FUN.info('Usunięto: %1 zaznaczonych pozycji z bazy plików z wyciągami bankowymi.'@[$st_sel_f])
?};
VAR_DEL.delete('st_del_f','st_sel_f','kont_usu','wyc_path','__grup_marker')


\test_maska
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: czy podana sciezka/nazwa pliku to maska?
::   WE: _a = sciezka/nazwa pliku
::   WY: 1 - tak, 0 - nie
::  OLD: \test_maska/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? _a*'*' | _a*'?' || _wy:=1 || _wy:=0 ?}


\pob_wg_spec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Pobiera pliki z wyciagami bankowymi wg sciezek ze specyfikacji do tabeli PWB
::  OLD: \pob_wg_spec/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? exec('interm','#system')
|| FUN.emsg(exec('interm_nacc_msg','#system'));
   return(0)
?};
{? ~FUN.ask('Wyszukać i pobrać do bazy pliki wyciągów\nwedług aktywnych specyfikacji importu?'@)
|| return(0)
?};
HBPKI.index('HBPKITP');
HBPKI.prefix(1,'I');
{? HBPKI.first()
|| {! |?
      VAR_DEL.delete('H_FILES');
      _czy_maska:=exec('test_maska','!hbn_wba_zawy',HBPKI.PD);
      {? _czy_maska
      || H_FILES:=files({? HBPKI.FILELOC='T' || '@'+HBPKI.PD || HBPKI.PD ?})
      || H_FILES:=tab_tmp(1,'FILENAME','STRING[64]','Plik');
         {? _test:=fopen({? HBPKI.FILELOC='T' || '@'+HBPKI.PD || HBPKI.PD ?},
                         'r',{? HBPKI.FILELOC='T' || 0 || 1 ?})
         || fclose(_test);
            H_FILES.FILENAME:=HBPKI.PD;
            H_FILES.add()
         ?}
      ?};
      {? H_FILES.first()
      || {! |?
            {? HBPKI.FILELOC='T'
            || _my_f:='@'+H_FILES.FILENAME; _my_p:=1
            || _my_f:=H_FILES.FILENAME; _my_p:=1
            ?};
            PWB.blank();
            _filename:=exec('filename','#string',H_FILES.FILENAME);
            PWB.FILENAME:=H_FILES.FILENAME;
            PWB.LOC:=HBPKI.FILELOC;
            _odd:=PAR_SKID.get(1);
            {? _odd<>''
            || USERSDEP.index('USERSDEP');
               USERSDEP.prefix(REF.FIRMA);
               exec('get_usersf','users');
               {? (USERSF.LOCK='N' | USERSDEP.find_key(USERS.ref(),_odd))
               || ODD.cntx_psh();
                  ODD.index('ODDZIALY');
                  ODD.prefix(REF.FIRMA,_odd,_odd);
                  {? ODD.first()
                  || PWB.ODD:=ODD.ref()
                  ?};
                  ODD.cntx_pop()
               ?}
            ?};
            PWB.Z:='N'; PWB.MULTI:='N';
            VAR_DEL.delete('TMP_RACH');
            TMP_RACH:=tab_tmp(1,'RACH','STRING[50]','Rachunek');
            {? -(_my_f+3)='xml'
            || _rach:=exec('get_rach_xml','hbn',_my_f,_my_p)
            || _rach:=exec('get_rach','hbn',_my_f,_my_p)
            ?};
            {? TMP_RACH.first()
            || {! |?
                  _ref:=RB.getrbank(3,TMP_RACH.RACH);
                  {? ~_ref
                  ||
::       jeżeli nie znaleziono, wyszukiwanie po fragmencie rachunku, by obsłużyć wyciągi z Deutsche Bank Polska
                     {? +TMP_RACH.RACH=10
                     || SKID_RBK.cntx_psh();
                        SKID_RBK.prefix(REF.INFO);
                        {? SKID_RBK.first()
                        || {! |?
                              {? (SKID_RBK.BANK().BANORG().ID=191 | SKID_RBK.BANK().BANORG().NAZ='Deutsche Bank Polska SA')
                                 & SKID_RBK.N+10=TMP_RACH.RACH
                              || _ref:=SKID_RBK.BANK
                              ?};
                              ~_ref & SKID_RBK.next()
                           !}
                        ?};
                        SKID_RBK.cntx_pop()
                     ?}
                  ?};
                  B.prefix();
                  {? _ref & _ref=HBPKI.KDB
                  || B.seek(_ref);
                     _bank:=B.NUMER; PWB.KOD_BANK:=_bank;
                     PWB.NAZ_BANK:=B.NB; PWB.SPEC:=HBPKI.TPK
                  || _bank:=''
                  ?};
                  _bank='' & TMP_RACH.next()
               !};

               HBPKI.cntx_psh();
               {? _bank<>'' & HBPKI.first()
               || HBPKI.index('HBPKITP');
                  HBPKI.prefix(1,'I',_bank);
                  {? Plugin.exists('SPEC_HBN_001') || _tmp_spec:=Plugin.run('SPEC_HBN_001') ?};
                  {? var_press('_tmp_spec')>0 & +_tmp_spec
                  || PWB.MULTI:='N';
                     PWB.SPEC:=_tmp_spec
                  || {? HBPKI.size()=1
                     || PWB.MULTI:='N'
                     || PWB.MULTI:='T';
                        PWB.SPEC:=''
                     ?}
                  ?}
               ?};
               HBPKI.cntx_pop();
               {? PWB.KOD_BANK<>''
               || {? PWB.add()
                  || PWB.f_add();
                     _hfile:=fopen(_my_f,'br',_my_p);
                     _add:=PWB.bl_put('PLIK',_hfile,0,,_filename);
                     fclose(_hfile);
                     {? _add || ferase(_my_f,_my_p) ?}
                  ?}
               ?}
            ?};
            VAR_DEL.delete('TMP_RACH');
            H_FILES.next()
         !}
      ?};
      VAR_DEL.delete('H_FILES');
      HBPKI.next()
   !}
|| FUN.emsg('Brak aktywnych specyfikacji importu wyciągów bankowych!'@)
?}


\st_dysk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Fomula kopiuje plik wyciagu z bazy plikow do pierwotnej lokalizacji
::  OLD: \st_dysk/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Pobrać plik z wyciągami z bazy plików i zapisać na dysku?'@)
|| _filtr:='Wyciągi'@+' (*.sta)|*.sta|'+'Pliki %1'@['(*.txt)']+'|*.txt|'+'Wszystkie'@+' (*.*)|*.*';
   _file:=fmk_tmp_dir(0).get_path()+'/'+PWB.bl_info('PLIK','NAME');
   _filepath:=_file;

   {? _file<>''
   || {? ~PWB.bl_get('PLIK', _filepath, 0)
      || FUN.emsg('Nie udało się zapisać pliku z wyciągami\n(%1)\nna dysku!'@[_file])
      ?};
      dlg_save(_filepath)

   ?}

?}


\st_zmia
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Zmiana specyfikacji importu dla pliku wyciągu (jesli jest >1)
::  OLD: \st_zmia/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? PWB.Z='B'
|| FUN.emsg('Dla wskazanego pliku wyciągu nie ma\nzdefiniowanych specyfikacji!'@)
|? PWB.Z='T'
|| FUN.emsg('Wskazany plik był już przetwarzany\ni nie można dla niego zmienić specyfikacji!'@)
|? PWB.Z='I'
|| FUN.emsg('Wskazany plik został rozpoznany jako wcześniej przetworzony i zaimportowany,\ndlatego nie można dla niego zmienić specyfikacji!'@)
|? PWB.MULTI='N'
|| FUN.emsg('Dla wskazanego pliku wyciągu nie ma\nmożliwości zmiany specyfikacji!'@)
|| HBPKI.cntx_psh();
   HBPKI.index('HBPKITP');
   HBPKI.prefix(1,'I',PWB.KOD_BANK);
   HBPKI.win_sel('HBPKIWYB');
   {? HBPKI.select()
   || PWB.SPEC:=HBPKI.TPK;
      PWB.put()
   ?};
   HBPKI.cntx_pop()
?}


\st_zmodd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Zmiana jednostki ksiegowej dla pliku wyciągu
::  OLD: \st_zmodd/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? (PWB.ODD<>null & ~exec('usr_fjks','b_perm',PWB.ODD)) | (PWB.ODD=null & ~exec('usr_fjks_any','b_perm'))
|| FUN.info('Brak uprawnień do zmiany jednostki księgowej.'@);
   return(0)
?};
{? PWB.Z='T'
|| FUN.emsg('Wskazany plik był już przetwarzany\ni nie można dla niego zmienić jednostki księgowej!'@)
|? PWB.Z='I'
|| FUN.emsg('Wskazany plik został rozpoznany jako wcześniej przetworzony i zaimportowany,'
            '\ndlatego nie można dla niego zmienić jednostki księgowej!'@)
|| _WT_JKS:=tab_tmp(1,'OD','STRING[8]','');
   ODD.index('ODDZIALY');
   ODD.prefix(REF.FIRMA);
   {? ODD.first()
   || {! |?
         {? exec('usr_fjks','b_perm',ODD.ref())
         || _WT_JKS.OD:=ODD.OD;
            _WT_JKS.add()
         ?};
         ODD.next()
      !}
   ?};
   _wyb_jks:=_WT_JKS.mk_sel('Jednostka księgowa'@,,0,'_wyb_jks',,,20,,'U');
   _WT_JKS.win_fld(_wyb_jks,,'OD',,,30);
   _WT_JKS.win_act(_wyb_jks,,'Formuła','Wybierz'@@,,'Wybierz jednostkę księgową'@,,"sel_exit()",1,,,,'W');
   _WT_JKS.win_sel(_wyb_jks);
   {? _WT_JKS.select()
   || ODD.cntx_psh();
      ODD.index('ODDZIALY');
      ODD.prefix(REF.FIRMA,_WT_JKS.OD,_WT_JKS.OD);
      {? ODD.first() || PWB.ODD:=ODD.ref(); PWB.put() ?};
      ODD.cntx_pop()
   ?}
?}


\st_plik
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula wyswietla plik z wyciagiem bankowym
::   WE: _a = 1 - funkcja wywolana z poziomu tabeli plikow z wyciagami (PWB)
::       _a = 2 - funkcja wywolana z poziomu tabeli pozycji wyciagow (PW)
::       _a = 3 - funkcja wywolana z poziomu tabeli wyciagow (PWN)
::  OLD: \st_plik/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
OPERATOR.USER();
exec('get_usersf','users');
{? _a=2 || PWB.prefix(); PWN.PLIK()
|? _a=3 || PWB.prefix(); PW.PLIK()
?};
{? USERSF.LOCK='T'
|| {? PWB.ODD=null | ~exec('test_odd','hbn',PWB.ODD().OD)
   || FUN.info('Nie określono jednostki księgowej wyciągu lub brak uprawnień do jednostki księgowej pliku wyciągu.'@);
      return(0)
   ?}
?};
_tmpdir:=fmk_tmp_dir(0);
{? type_of(_tmpdir) <> type_of(~~)
|| _fdir:=_tmpdir.get_path
?};
{? _a=1
|| {? ~exec('bl_view','#blob',PWB,'PLIK')
   || _path:=_fdir+'\\'+ PWB.bl_info('PLIK','NAME');
      {? PWB.bl_get('PLIK', _path, 0)
      || txt_view(_path, 0);
         ferase(_path, 0)
      ?}
   ?}
|? _a>=2
|| PWB.prefix();
   {? _a=2 || _ref:=PW.PWN().PLIK |? _a=3 || _ref:=PWN.PLIK ?};
   {? PWB.seek(_ref)
   || {? ~exec('bl_view','#blob',PWB,'PLIK')
      || _path:=_fdir+'\\'+ PWB.bl_info('PLIK','NAME');
         {? PWB.bl_get('PLIK', _path, 0)
         || txt_view(_path, 0);
            ferase(_path, 0)
         ?}
      ?}
   || FUN.emsg('Nie odnaleziono źródłowego pliku wyciągu w bazie!'@)
   ?}
?}


\st_archiw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula wstawia znacznik przetworzenia dla biezacej pozycji w bazie plikow
::  OLD: \st_archiw/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? PWB.Z='N'
|| {? FUN.ask('Ustawić znacznik pliku na <Przetworzony> (archiwalny)?'@)
   || PWB.cntx_psh();
      PWB.prefix();
      PWB.Z:='T';
      PWB.put();
      PWB.cntx_pop();
      PWB.f_rfresh()
   ?}
|| FUN.emsg('Bieżący plik ma już atrybut <Przetworzony> (archiwalny).'@)
?}


\st_anuluj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula wycofuje znacznik przetworzenia z pozycji w bazie plikow
::  OLD: \st_anuluj/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
{? PWB.Z='T' | PWB.Z='I'
|| {? FUN.ask('Ustawić znacznik pliku na <Nieprzetworzony>?'@)
   || PWB.cntx_psh();
      PWB.prefix();
      PWB.Z:='N';
      PWB.put();
      PWB.cntx_pop();
      PWB.f_rfresh()
   ?}
|| FUN.emsg('Bieżący plik nie jest przetworzony.'@)
?}


\ik_spec
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ  [2008]
:: OPIS: Formula ustawia wyswietlanie wlasciwej ikonki jesli dla danego pliku
::        i banku jest wiecej niz 1 specyfikacja importu
::  OLD: \ik_spec/tech_hb.fml
::----------------------------------------------------------------------------------------------------------------------
{? PWB.MULTI='T' || st_tak || st_nie ?}


\create_st
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2008]
:: OPIS: Formula tworzy obsluge tabeli PWB
::  OLD: \create_st/proc_01.fml
::----------------------------------------------------------------------------------------------------------------------
PWB.win_sel('WER');
PWB.win_edit('RED');
st_tak:='xwin16.png:73';
st_nie:='';
PWB.win_fml('WER',PWB,'SPEC',,'ICON_BEFORE',"exec('ik_spec','!hbn_wba_zawy')")


\fd_impwb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Formula Usun w okienku przegladania zaimportowanych wyciagow
::       (FK, HB)
::  OLD: \fd_impwb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
{? FUN.ask('Usunąć wyciąg %1?'@[PWN.NRW])
|| _ref_pwb:=PWN.PLIK;
   do();
   PW.index('PWN');
   PW.prefix(PWN.ref());
   {? PW.first()
   || {! |?
         PW_OP.index('PW');
         PW_OP.prefix(PW.ref());
         {? PW_OP.first()
         || {! |? PW_OP.del() !}
         ?};
         PW.del()
      !}
   ?};
   PWN.del();
   {? ~end()
   || FUN.info('Usuwanie wyciągu się nie powiodło.'@)
   || PWB.cntx_psh();
      PWB.prefix();
      {? PWB.seek(_ref_pwb)
      || {? PWB.count()=0
         || PWB.Z:='N';
            PWB.put()
         ?}
      ?};
      PWB.cntx_pop()
   ?}
?}


\bd_impwb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Przed wyswietl dla pozycji wyciagu bankowego (FK, HB)
::  OLD: \bd_impwb/skid_ror.fml
::----------------------------------------------------------------------------------------------------------------------
PW.win_edit('REDH');
RACHBANK.KB_1R:=PW.RBL;
KONTO.K1:=PW.AN;
PW_OP.index('PW');
PW_OP.prefix(PW.ref());
PAR_WYDR.ODD_R:={? PW_OP.first() & PW_OP.size()=1 & PW_OP.ODD<>null() || PW_OP.ODD || PW.ODD ?};
PW.display()


\wydr_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [2010]
:: OPIS: Wydruk pozycji wyciągów bankowych
::  OLD: \wydr_pw/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
exec('rep_exec','#b_report','HBN_WBA_ZAWY','hbn_imp',,,,,,,,'W')


\grp_pw_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Przed obsługą okna PW w oknie grupowym
::----------------------------------------------------------------------------------------------------------------------
1


\grp_pwn_af
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po odświeżeniu okna PWN w oknie grupowym
::----------------------------------------------------------------------------------------------------------------------
PW.index('PWN');
{? PWN.sel_size() | PWN.f_size() || PW.prefix(PWN.ref()) || PW.prefix(null) ?};
PW.first();
grp_disp(PW,'WER');
grp_edisp(PW,'WER_RED')


\grp_wer_red
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Po odświeżeniu okna wertowania PW w oknie grupowym
::----------------------------------------------------------------------------------------------------------------------
grp_edisp(PW,'WER_RED')


\chk_ankh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Po redakcji konta dla importowanych wyciagow. Sprawdza zgodnosc kontrahenta z kontem.
::   WE: _a: czy koncowy komunikat: 1 - tak, 0 - nie
::  OLD: \chk_ankh/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:=0;
PW.AN:=KONTO.K1;
KS.index('SYM');
KS.prefix(SSTALE.AR,SSTALE.AR().SYNT+KONTO.K1);
{? PW.KONTR<>'' & KS.first()
|| _v_dl:=+KS.SYM;
   {? SSTALE.AR().SEP<>',' || _v_dl+=1 ?};
   BUD.index('KS');
   BUD.prefix(KS.ref());
   {? BUD.first()
   || {! |?
         RS.blank(); RS.WZ:=BUD.SLU().SLU().WZ;
         {? RS.find_rec() & RS.TAB='KH'
         || KH.index('KOD'); KH.prefix(2,BUD.SLU().SLU().DL+(_v_dl-KONTO.K1));
            {? KH.first() & -KH.NAZ<>-(60+PW.KONTR) || _ret:=1 ?}
         ?};
         _v_dl+=BUD.SLU().SLU().DL; {? SSTALE.AR().SEP<>',' || _v_dl+=1 ?}; BUD.next()
      !}
   ?}
?};
{? _ret & ~g_c || g_c:=FUN.ask('Symbol konta analitycznego dotyczy innego kontrahenta!\nKontynuować?'@)
|| 1
?}


\pbimpwed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.10]
:: OPIS: Formula do poprawiania zaimportowanych wyciagow bankowych
::  OLD: \pbimpwed/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
RACHBANK.KB_1R:=PW.RBL;
KONTO.K1_RODZ:=KONTO.K1_SYNT:=1;
KONTO.K1_WYM:=0;
KONTO.K1:=PW.AN;
g_c:=0;
KONTO.K1_BE:='{? exec(\'is_pw_op\',\'hbn\') || 0 || 1 ?}';
KONTO.K1_AE:='exec(\'chk_ankh\',\'!hbn_wba_zawy\')';
PW.win_edit('RED');
PW_OP.prefix(PW.ref());
{? ~PW_OP.first() | PW_OP.size()=1
|| PAR_WYDR.ODD_R:={? PW_OP.first() & PW_OP.size()=1 & PW_OP.ODD<>null() || PW_OP.ODD || PW.ODD ?};
   _vrozp:=PW.WSK_R;
   {? PW.edit("_wy:='';
               {? var_pres('SP',PW)>0 & PW.SP='T' & (PW.SP_KHNIP='' | PW.SP_V=0 | PW.SP_NRFAK='')
               || FUN.emsg('Pole Split payment nie może być zaznaczone jeżeli pola dotyczące\n '
                          +'płatności podzielonej (NIP, VAT, nr faktury) nie są wypełnione.'@);
                  _wy:='SP'
               ?};
               {? _wy=''
               || {? PAR_WYDR.ODD_R=null()
                  || FUN.emsg('Wypełnij pole: Jednostka księgowa.'@); _wy:='ODD_R'
                  || _wy:=exec('chk_ankh','!hbn_wba_zawy')
                  ?}
               ?};
               _wy
              ")
   || PW.AN:=KONTO.K1;
      {? PAR_WYDR.ODD_R & PW_OP.first() || PW_OP.ODD:=PAR_WYDR.ODD_R; PW_OP.put() ?};
      {? PAR_WYDR.ODD_R<>PW.ODD
      || PW.ODD:=PAR_WYDR.ODD_R;
         PW.put()
      ?};
      {? PAR_WYDR.ODD_R
      || OP.index('KON_O');
         OP.prefix(FINFO.NAROD,PAR_WYDR.ODD_R,PW.AN,PW.SYM,PW.SYM)
      || OP.index('KON');
         OP.prefix(FINFO.NAROD,PW.AN,PW.SYM,PW.SYM)
      ?};
      {? PW.SYM<>'' & PW.AN<>'' & OP.first()
      || VAR_DEL.delete('rozr', 'roz_poz');
         roz_poz:=sql('select PW_OP.reference PW_OP, to_string(DP) DP, OD, SYM, AN, K, 0 Z, WAL, SP_V from PW_OP
                       left join ODD where PW_OP.PW=:_a order by Z', PW.ref);
         exec('podsuma','rozrach_przel');
         _an:=1;
         {? roz_poz.first()
         || {! |?
                 {? roz_poz.AN='' || _an:=0 ?};
                  _an & roz_poz.next()
             !}
         ?};
         {? __rozpis.K=0 & __rozpis.SP_V=0 & roz_poz.first() & _an
         || PW.WSK_R:='T'
         || {? PW.AN='' & PW.SYM=''
            || PW.WSK_R:='N'

            || {? PW.TYPTRAN<>''
               || TYPYTRAN.index('TYP');
                  TYPYTRAN.prefix('IMP_WYC_BAN',PW.BL,PW.TYPTRAN,PW.TYPTRAN);
                  {? TYPYTRAN.first() & TYPYTRAN.ROZR='T' || PW.WSK_R:='N' ?}
               ?}
            ?}
         ?}
      || PW.WSK_R:='N';PW.put()
      ?};
      PW.RBL:=RB.get_rbel(2,PW.RBL);
      PW.put()
   || {? PW.WSK_R<>_vrozp
      || PW_OP.index('PW');
         PW_OP.prefix(PW.ref());
         {? PW_OP.first() || {! |? PW_OP.del() !} ?}
      ?}
   ?}
|| FUN.emsg('Przelew zbiorczy nie może być poprawiany!'@)
?};

VAR_DEL.delete('g_impwbk','g_impwbr','rozr','roz_poz','__rozpis');
&g_c


\bd_oddr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Przed wyswietleniem jednostki ksiegowej rozrachunku
::  OLD: \bd_oddr/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
PW_OP.index('PW'); PW_OP.prefix(PW.ref);
{? PW_OP.first()
|| {? PW_OP.size()=1
   || PW_OP.ODD
   || {? PW_OP.first()
      || _vc:=0;
         _vodd:=PW_OP.ODD;
         {! |? {? PW_OP.ODD<>_vodd || _vc:=1 ?};
               ~_vc & PW_OP.next()
         !}
      ?};
      {? _vc || 0 || _vodd ?}
   ?}
|| PW.ODD
?}


\be_oddr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Przed redakcja jednostki ksiegowej rozrachunku
::  OLD: \be_oddr/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
PW_OP.index('PW');
PW_OP.prefix(PW.ref);
{? (~PW_OP.first() | (PW_OP.first() & PW_OP.size()=1))
|| ODD.prefix();
   ODD.f_clear();
   ODD.f_set('OD,N',
      'left join USERSDEP using(USERSDEP.DEPT,ODD.REFERENCE)',
      '(:_a=1 or USERSDEP.USERS=:_b) and ODD.FIRMA=:_c',Perm.hasFull('FJKS'),OPERATOR.USER,REF.FIRMA);
   1
|| 0
?}


\ae_pwkh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: [AMA] [8.60]
:: OPIS: Poprawianie zaimportowanych wyciagow bankowych; Po redakcji kontrahenta
::  OLD: \ae_pwkh/przelewy.fml
::----------------------------------------------------------------------------------------------------------------------
_vkontr:=1;
_cntkh:=_vrb:=0;
{? var_pres('g_impwb')>0 & g_impwb=1
|| _vtab:=PAR_WYDR.TABAKR;
   PAR_WYDR.TABAKR:='KH';
   {? var_pres('g_impwbk')<0
   || KH.index('NAZ');
      KH.prefix(2,PW.KONTR);
      {? KH.first()
      || {? KH.size()>1
         || {! |? {? KH.NAZ=PW.KONTR || _cntkh+=1 ?}; KH.next() !}
         || _cntkh:=0
         ?};
         {? _cntkh>1
         ||
            {? PW.KH
            || g_impwbk:=PW.KH
            || FUN.info('W kartotece kontrahentów istnieje więcej niż jeden kontrahent\no podanej nazwie!'
                        '\nNależy wybrać właściwego kontrahenta korzystając ze słownika (klawisz F3).'@);
               _vkontr:=0
            ?}
         || {? KH.size()>1 || g_impwbk:=0 || g_impwbk:=KH.ref() ?}
         ?}
      || g_impwbk:=0
      ?}
   ?};
   {? _vkontr & g_impwbk & PW.KONTR<>''
   || _vl:=1;
      {? KH.seek(g_impwbk)
      || {? ~RB.getrrban(PW.RBK,'KH',#KH.ref())
         || {? FUN.ask('~~Dla kontrahenta nie istnieje rachunek bankowy, podany na przelewie.\nCzy '
                       'dodać rachunek dla kontrahenta?'@)
            || SKID_RBK.cntx_psh();
               SKID_RBK.prefix();
               SKID_RBK.blank();
               SKID_RBK.TAB:='KH';
               SKID_RBK.REF:=#KH.ref();
               SKID_RBK.RD:='N';
               SKID_RBK.SLU:=SKID_RBK.SLO:=SKID_RBK.SKID_RBK:=0;
               SKID_RBK.KOD:='';
               SKID_RBK.N:=RB.get_rbel(2,PW.RBK);
               SKID_RBK.BANK:=RB.getrbank(4,SKID_RBK.N,SKID_RBK.KRAJ().KODISO);
               exec('berbwal','rachunki');
               RACHBANK.RB_KH_SR:='';
               SKID_RBK.win_edit('RED_RBO');
               {? SKID_RBK.edit("exec('ar_rbo','rachunki',0)") || SKID_RBK.add() ?};
               SKID_RBK.cntx_pop()
            ?}
         ?};
         {? PW.KH=null || PW.KH:=KH.ref() ?};
         _vl:=0
      ?};
      _vrb:=1
   |? _vkontr & ~g_impwbk
   || {? exec('findkhrb','hbn',1)
      || KH.prefix();
         {? KH.seek(SKID_RBK.REF,'kontr')
         || PW.KONTR:=KH.NAZ;
            g_impwbk:=KH.ref();
            _vrb:=1
         ?}
      ?}
   ?};
   {? _vrb & ~+PW.AN & ~+PW.SYM
   || exec('fbimpwbr','hbn',1,0);
      KONTO.K1:=PW.AN;
      PAR_WYDR.TABAKR:=_vtab
   ?}
?};
_vkontr


\pwn_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła dla akcji Popraw tabeli PWN (wyciagi bankowe)
::----------------------------------------------------------------------------------------------------------------------
{? -menu_pth='ndp' | -menu_pth='edp'
|| _r1:=PW.mk_edit();
   POMOC.DOK:=$DOK.NR+'/'+$(DOK.DTW~2);
   PW.win_efld(_r1,,'NRW',,,,,1);
   PW.win_efld(_r1,,'RBL',,,40,,1,'Rachunek licencjobiorcy'@);
   PW.win_efld(_r1,,'BL','NB',,40,,1,'Oddział banku'@);
   _r2:=PW.mk_edit('Wyciąg bankowy'@,,'');
   PW.win_efld(_r2,,'NRD',,,10,,1,'Obecne wskazanie na dokument'@);
   PW.win_efld(_r2,POMOC,'DOK',,,10,,1,'Poprawne wskazanie na dokument w rejestrze'@);
   _ok:=PW.win_ebtn(_r2,'text=Zat&wierdź wyciąg',"'key:F2'");
   PW.btn_eopt(_r2,_ok,'state='+{? PW.NRD=POMOC.DOK || 'grayed' || 'normal' ?}+',tooltip='
               +'Zatwierdź wyciąg ze zmianami'@);
   _es:=PW.win_ebtn(_r2,'text=Anuluj',"'key:Esc'");
   PW.btn_eopt(_r2,_es,'default=0,tooltip='+exec('help_red_esc','#window','A'));
   PW.win_ewin(_r2,,_r1);
   PW.win_edit(_r2);
   {? PW.first() & PW.edit()
   || {? PW.NRD<>POMOC.DOK
      || {! |? PW.NRD:=POMOC.DOK; PW.put(); PW.next !};
         POMOC.DOK:=''
      || ''
      ?}
   || {? PW.NRD<>POMOC.DOK || FUN.info('Zmiany nie zostały dokonane.'@) || '' ?}
   ?}
|| PWN.win_edit('RED');
   {? PWN.edit()
   || PWN.RBL:=exec('rb_nosp','#string',PWN.RBL);
      PWN.put()
   ?}
?}


\be_pwn_odd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła przed redakcją pola PWN.ODD
::----------------------------------------------------------------------------------------------------------------------
ODD.prefix();
ODD.f_clear();
ODD.f_set('OD,N',
      'left join USERSDEP using(USERSDEP.DEPT,ODD.REFERENCE)',
      '(:_a=1 or USERSDEP.USERS=:_b) and ODD.FIRMA=:_c',Perm.hasFull('FJKS'),OPERATOR.USER,REF.FIRMA);
1


\pw_szukaj_przed
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [17.00]
:: OPIS: Formuła przed szukaniem w PW
::----------------------------------------------------------------------------------------------------------------------
exec('be_pwn_odd','!hbn_wba_zawy');
1

:Sign Version 2.0 jowisz:1045 2024/01/31 11:52:50 02e2a07c141cac351c099d553d6b27855e7dd08ac5f76d452bc7defc1fa403a485ecb55427c01c7f0168613b7ca0250aa0f73f7f083874ddeda8fb5fe8e9d1a0a2e12bbdfe9fe0abce0be155f43e0c7b89abe8d1482ca7698f5856fbe6920b2823b80c5dce9dbdb2277464c8143521c02618b82701a3ed109f5b44342ffacc43
