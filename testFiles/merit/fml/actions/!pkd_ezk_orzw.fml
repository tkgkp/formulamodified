:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_ezk_orzw.fml
:: Utworzony: 17.03.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_EZK_ORZW - Zwolnienie pracownika.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Zwolnienie pracownika - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd')
::
::# kind=WE, symbol=P, type=_P, name=Wskazanie pracownika, required=T, keyref=T
::# kind=WE, symbol=EDOKUM, type=_EDOKUM, name=Wskazanie na dokument w obiegu, required=N, keyref=N
::
::# kind=WY, symbol=H_UM, type=_H_UM, name=Wskazanie umowy, required=N, keyref=N
::
_par:=params_get();
params_set(_par);

_in:=_par.in;
_out:=_par.out;
_mp:=_par.mp;

_id:=exec('ref2uid','#table',_in.P);
_result:='';

{? _id=''
|| _result:=exec('error','!pkd_ezk_orzw')

|| _ret:=exec('zwolnij','!pkd_ezk_orzw',_in.P,_mp.pathArea(),~_mp.isMicro());
   _result:=_ret.STATUS;
   {? _ret.H_UM<>null()
   || _out.H_UM:=_ret.H_UM;
      _mp.save(,_out);
      _mp.done()
   ?}
?};

{? _result<>''
:  obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};

~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR[17.00]
:: OPIS: Zwolnienie pracownika - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_tab:=exec('desc','pracownik',params_get().mp);
{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zwolnij pracownika: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP]
   |? +_tab.PESEL
   || 'Zwolnij pracownika: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP]
   || 'Zwolnij pracownika: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP]
   ?}
|| 'Zwolnij pracownika'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'Zwolnienie niemożliwe.\nNie znaleziono pracownika.'


\zwolnij
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Właściwa formuła obsługująca zwolnienie pracownika.
::   WE:  _a  [REFERENCE] - Wskazanie pracownika do zwolnienia.
::       [_b] [INTEGER]   - Czy w oknie redagowania umieszczać "wizytówkę" zwalnianego pracownika:
::             0 - Nie [domyślnie].
::             1 - Tak.
::       [_c] [INTEGER]   - Czy w okienku dostępny przycisk "Zakończ":
::             0 - Nie [domyślnie].
::             1 - Tak.
::   WY: Tablica z informacjami o zwolnieniu.
::----------------------------------------------------------------------------------------------------------------------
_ret:=obj_new('STATUS','H_UM','key');
_ret.STATUS:='';
_ret.H_UM:=null();
_ret.key:='';

_par:=params_get();
params_set(_par);
_in:=_par.in;


F_ZATR.cntx_psh();
P.cntx_psh();
P.clear();
{? type_of(_a)=type_of(null()) & _a<>null() & P.seek(_a)
|| {? P.F_ZATR().KOD='P'
   || _wizytowka:=var_pres('_b')=type_of(0) & _b;
      _done_enable:=var_pres('_c')=type_of(0) & _c;
      _P180:=-PAR_SKID.get(180)='t';

      VAR.STRING:=
         {? _P180
         || 'Wszystkie wprowadzone zmiany zostaną zapisane w wersji roboczej.'@
         || 'Wszystkie wprowadzone zmiany zostaną zapisane w wersji docelowej.'@
         ?};

      OSOBA.cntx_psh();
      OSOBA.prefix();
      P.OSOBA();
      H_UM.cntx_psh();
      exec('otworz_h_um','pracownik',{? _P180 || 'h_u_' || 'h_um' ?});
      H_UM.index('OD');
      H_UM.prefix(P.ref());
      H.cntx_psh();
      H.use(exec('h_name','pracownik'));
      H.index('_HISTKOD');
      H.prefix(P.ref(),'Z',);
      {? H.last() & H_UM.last()
      || {? 1+H_UM.IDMOD='D'
         || _ret.STATUS:='Nowa umowa oczekuje na akceptację. Zmiany niemożliwe.'
         |? 1+H.IDMOD='D'
         || _ret.STATUS:='Aneks do umowy (%1 - %2) oczekuje na akceptację. Zmiany niemożliwe.\n'@ [$H.OD,$H.DO]
         || S_ZUS.cntx_psh();
            S_ZUS.prefix();

            _fld:=obj_new('DO','USPKOD','USPPPRAK','USPPPRAT','USPSTR','LT','EKW','EKW_NSP','EKW_LICZ');
            _fld.DO:=H_UM.DO;
:: jeżeli mamy parametr wejściowy EDOKUM to na jego podstawie wstępnie wypełniamy pole H_UM.DO
:: wykorzystywane jest to w zwolnieniu pracownika po zaakceptowaniu wniosku w obiegu
            {? var_pres('EDOKUM',_in)>0 & type_of(_in.EDOKUM)=type_of(null())
            || _H_UM:=exec('obj_new','#buf','H_UM');
               exec('h_um_pruo','portal_walidacja',_in.EDOKUM,_H_UM);
               H_UM.DO:=_H_UM.DO
            ?};
            _fld.USPKOD:=H_UM.USPKOD;
            _fld.USPPPRAK:=H_UM.USPPPRAK;
            _fld.USPPPRAT:=H_UM.USPPPRAT;
            _fld.USPSTR:=H_UM.USPSTR;
            _fld.LT:=H_UM.LT;
            _fld.EKW:=H_UM.EKW;
            _fld.EKW_NSP:=H_UM.EKW_NSP;
            _fld.EKW_LICZ:=H_UM.EKW_LICZ;

            _cfg:=exec('cfg','!pkd_ezk_orzw',_wizytowka,_done_enable);

            params_set('P180',_P180,'fld',_fld,'cfg',_cfg);

            _buf:=exec('save_fml_all','#field',H_UM);

            _state1:="params_get().cfg.state=1";
            _efldopt:="params_set(params_get()); exec('h_um_efld_opt','!pkd_ezk_orzw')";

            exec('set_fml','#field',H_UM,'DO',,_state1,,_efldopt);
            exec('set_fml','#field',H_UM,'USPKOD',,_state1);
            exec('set_fml','#field',H_UM,'USPPPRAK',,_state1,,_efldopt);
            exec('set_fml','#field',H_UM,'USPSTR',,_state1);

            exec('set_fml','#field',H_UM,'LT',,"params_get().cfg.state=2 & exec('h_um_lt_be','pracownik')",,
               "  params_set(params_get());
                  _ae:=exec('x_lt_ae','lista_plac');
                  {? (type_of(_ae)=type_of('') & _ae='') | (type_of(_ae)=type_of(0) & _ae)
                  || exec('h_um_efld_opt','!pkd_ezk_orzw')
                  || _ae
                  ?}
               "
            );

            H_UM.win_edit(_cfg.we);

            {? H_UM.DO<>date(0,0,0) & H_UM.USPKOD<>null() & H_UM.USPPPRAK<>null() &
               (H_UM.USPPPRAK().KOD<>'550' | H_UM.USPPPRAT<>'')
:              Data i tryb uzupełnione. Sprawdźmy poprawność danych i to, czy możemy przejść do
:              redagowania drugiej zakładki. I co równie istotne - przygotujmy dane drugiej zakładki, w szczególnosci
:              liczbę godzin ekwiwalentu.
            || exec('valid','!pkd_ezk_orzw',1)
            ?};

            exec('__F_ZATR','object');
            __F_ZATR.push();
            __F_ZATR.mod('P');

            {? H_UM.edit("params_set(params_get()); exec('valid','!pkd_ezk_orzw',1)") & H_UM.DO<>date(0,0,0) &
               _cfg.key='DONE'
:              Uwaga: funkcja \valid dokonuje również zapisu danych na dysk.
            || _ret.H_UM:=H_UM.ref()
            ?};

            __F_ZATR.pop();

            exec('restore_fml_all','#field',H_UM,_buf);

            S_ZUS.cntx_pop()
         ?}
      || _ret.STATUS:='Dostęp do umów o pracę nie powiódł się.'
      ?};
      H.cntx_pop();
      H_UM.cntx_pop();
      exec('otworz_h_um','pracownik');

      OSOBA.cntx_pop()
   || _ret.STATUS:='Czynność dostępna jedynie dla pracowników (forma współpracy [P]).'
   ?}

||  _ret.STATUS:=exec('error','!pkd_ezk_orzw')
?};
P.cntx_pop();
F_ZATR.cntx_pop();

_ret


\h_um_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli H_UM.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE:  _a  [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(H_UM)
|| _TAB:=_b
|? _tryb='1'
|| _TAB:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

_cfg:=params_get().cfg;

{? _fld='' | _fld='DO'
|| _sval:=$(H_UM.DO<>date(0,0,0));
   P_INFO.cntx_psh();
   {? exec('zn_ttub','pracownik',P.OSOBA,{? H_UM.DO<>date(0,0,0) || H_UM.DO || date() ?})<>null()
   || _tyt_01xx:=2+P_INFO.TTUB().KOD='01'
   || _tyt_01xx:=0
   ?};
   P_INFO.cntx_pop();
   {? _tyt_01xx
   || _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'USPKOD');
      _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'USPPPRAK');
      _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'USPPPRAT');
      _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'USPSTR')
   || _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'USPKOD');
      _TAB.efld_opt(_we,'enable=%1,mark=%1' [$_tyt_01xx],H_UM,'USPPPRAK');
      _TAB.efld_opt(_we,'enable=%1,mark=%1' [$_tyt_01xx],H_UM,'USPPPRAT');
      _TAB.efld_opt(_we,'enable=%1,mark=%1' [$_tyt_01xx],H_UM,'USPSTR')
   ?}
?};

{? _fld='' | _fld='USPPPRAK'
|| S_ZUS.cntx_psh();
   _TAB.efld_opt(_we,'enable=%1,mark=%1' [$(H_UM.USPPPRAK().KOD='550')],H_UM,'USPPPRAT');
   S_ZUS.cntx_pop()
?};

{? _fld=''
|| _sval:=$(_cfg.state=2);
   _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'LT');
   _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'EKW');
   _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'EKW_NSP');
   _TAB.efld_opt(_we,'enable=%1' [_sval],H_UM,'EKW_LICZ')
?};

{? _fld='' | _fld='LT'
|| _sval:=$(_cfg.state=2 & H_UM.LT<>'');
   _TAB.efld_opt(_we,'mark=%1' [_sval],H_UM,'EKW');
   _TAB.efld_opt(_we,'mark=%1' [_sval],H_UM,'EKW_NSP');
   win_disp()
?};

{? H_UM.EKW_LICZ='T'
|| _TAB.efld_opt(_we,'enable=0',H_UM,'EKW');
   _TAB.efld_opt(_we,'enable=0',H_UM,'EKW_NSP')
?};

1


\btn_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Funkcja ustawia dostępność przycisków. Wymaga dostępu do odpowiednich argumentów.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(_par:=params_get());
_cfg:=_par.cfg;

{? _cfg.done_enable
|| H_UM.btn_eopt(_cfg.we,_cfg.bDone,'state=normal');
   H_UM.btn_opt(_cfg.bDone,'tooltip='+exec('help_red_zakoncz','#window','PKD_A'));
   H_UM.btn_opt(_cfg.bOk,'tooltip='+exec('help_red_ok','#window','Z'));
   H_UM.btn_opt(_cfg.bCancel,'tooltip='+exec('help_red_esc','#window','A'))
|| H_UM.btn_eopt(_cfg.we,_cfg.bDone,'state=grayed');
   H_UM.btn_opt(_cfg.bDone,'tooltip=');
   H_UM.btn_opt(_cfg.bOk,'tooltip='+exec('help_red_ok','#window','Z'));
   H_UM.btn_opt(_cfg.bCancel,'tooltip='+exec('help_red_esc','#window','A'))
?};

{? _cfg.state=1
|| exec('h_um_efld_opt','!pkd_ezk_orzw','*',H_UM,_cfg.we);
   H_UM.btn_eopt(_cfg.we,_cfg.bPrev,'state=grayed');
   {? H_UM.LT='' | ~exec('h_um_ewkiwalent_rozliczony','pracownik')
   || H_UM.btn_eopt(_cfg.we,_cfg.bNext,'state=normal')
   || H_UM.btn_eopt(_cfg.we,_cfg.bNext,'state=grayed')
   ?}

|? _cfg.state=2
|| exec('h_um_efld_opt','!pkd_ezk_orzw','*',H_UM,_cfg.we);
   H_UM.btn_eopt(_cfg.we,_cfg.bPrev,'state=normal');
   H_UM.btn_eopt(_cfg.we,_cfg.bNext,'state=grayed')
?};

H_UM.btn_eopt(_cfg.we,_cfg.bCancel,'state=normal');
~~


\valid
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sprawdzająca poprawność wypełnienia parametrów zwolnienia pracownika.
::   WE: [_a] [INTEGER] - Czy obsługa po F2? Parametr wpływa na format wyniku.
::          0 - Nie (obsługa w wyniku naciścięcia przycisku) [domyślnie].
::          1 - Tak.
::   WY:
::  OLD: \zwolnij/kali.fml - Zmiana obsługi.
::----------------------------------------------------------------------------------------------------------------------
_f2:=var_pres('_a')=type_of(0) & _a;

_fret:={? _f2 || "_a" || "{? _a='' || '' || 'edit:'+_a ?}" ?};

params_set(_par:=params_get());
_P180:=_par.P180;
_fld:=_par.fld;
_cfg:=_par.cfg;

_ret:='';

{? _cfg.state=1
:  Obsługa pierwszej zakładki.
|| P_INFO.cntx_psh();
   {? exec('zn_ttub','pracownik',P.OSOBA,{? H_UM.DO<>date(0,0,0) || H_UM.DO || date() ?})<>null()
   || _tyt_01xx:=2+P_INFO.TTUB().KOD='01'
   || _tyt_01xx:=0
   ?};
   P_INFO.cntx_pop();
   {? _tyt_01xx
   || _chk:=__CHK.record2(H_UM,
         'DO','Data'@,
         'USPKOD','Przyczyna'@,
         'USPPPRAK','Podstawa prawna (kod)'@,
         'USPSTR','Strona inicjująca'@
      )
   || _chk:=__CHK.record2(H_UM,
         'DO','Data'@,
         'USPKOD','Przyczyna'@
      )
   ?};
   {? _chk<>''
   || return(_fret(_chk))
   |? H_UM.DO<H.OD
   || __CHK.err_incorrect('Data'@,'Data nie może być wcześniejsza niż %1.'@ [H.OD$1] );
      return(_fret('DO'))
   |? S_ZUS.cntx_psh();
      _ppi:=H_UM.USPPPRAK().KOD='550';
      S_ZUS.cntx_pop();
      _ppi & (_chk:=__CHK.record2(H_UM,'USPPPRAT','Podstawa prawna (inna)'@))<>''
   || return(_fret('USPPPRAT'))
   |? exec('info_zw','personel','Z') & ~FUN.ask('Konflikty dla wybranej daty ustania.\nKontynuować?'@)
   || return(_fret('DO'))
   ?};

   {? _fld.DO<>H_UM.DO |
      _fld.USPKOD<>H_UM.USPKOD | _fld.USPPPRAK<>H_UM.USPPPRAK | _fld.USPPPRAT<>H_UM.USPPPRAT | _fld.USPSTR<>H_UM.USPSTR
   || do();
      H_UM.put();
      _fld.DO:=H_UM.DO;
      _fld.USPKOD:=H_UM.USPKOD;
      _fld.USPPPRAK:=H_UM.USPPPRAK;
      _fld.USPPPRAT:=H_UM.USPPPRAT;
      _fld.USPSTR:=H_UM.USPSTR;
      _fld.LT:=H_UM.LT;
      _fld.EKW:=H_UM.EKW;
      _fld.EKW_NSP:=H_UM.EKW_NSP;
      _fld.EKW_LICZ:=H_UM.EKW_LICZ;

      {? H.DO<>H_UM.DO
      || H.DO:=H_UM.DO;
         H.put()
      ?};
      end()
   ?};

   {? exec('h_um_lt_be','pracownik')
:     Jeżeli lista może być redagowana, to przejdźmy do pola LT, ustalając wcześniej wartość pola H_UM.EKW.
   || _rok:=H_UM.DO~1;
      _ekw:=_ekw_nsp:=0;
      {? _P180
:        Przy pracy z "brudnopisem" karta urlopowa nie jest automatycznie aktualizowana. Zasymulujmy zatem jej
:        aktualizację ...
      || do();
         exec('aktualizuj_rok','kart_url',_rok,1,1)
      ?};
      KART_URL.cntx_psh();
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(P.ref(),_rok);
      {? KART_URL.first()
      || _ekw:=KART_URL.URL_POZG;
         _ekw_nsp:=KART_URL.NSP_POZG
      ?};
      KART_URL.cntx_pop();
      {? _P180
:        ... i szybciutko się z niej wycofajmy.
      || undo();
         end()
      ?};

:     W KART_URL.URL_POZG uwzględniony jest już ekwiwalent z bieżącego rekordu H_UM ...
      H_UM.EKW:=_fld.EKW+_ekw;
      H_UM.EKW_NSP:=_fld.EKW_NSP+_ekw_nsp;
      {? H_UM.EKW<0
      || H_UM.EKW:=0
      ?};
      {? H_UM.EKW_NSP<0
      || H_UM.EKW_NSP:=0
      ?};
      _ret:='LT'

:     Ekwiwalent został już rozliczony. Redagowanie pól H_UM.LT i H_UM.EKW nie ma zatem sensu - możemy kończyć pracę z
:     oknem - "drugiej" zakładki nie będziemy obsługiwali.
   || return('')
   ?}

|? _cfg.state=2
:  Obsługa drugiej zakładki.
|| _wy_name:='Liczba godzin niewykorzystanego urlopu wypoczynkowego'@;
   _do_name:='Liczba godzin niewykorzystanego urlopu dodatkowego'@;
   {? H_UM.LT<>''
   || _rok:=H_UM.DO~1;
      _datansp:=date(0,0,0);
      O.cntx_psh();
      O.index('LISTYPZN');
      O.prefix(exec('ref_firma','ustawienia'),-H_UM.LT);
:     Poprawność znaku (istnienie) listy została zweryfikowana w formule "Po redagowaniu". Tutaj sprawdzamy poprawność
:     okresu listy. Warunek identyczny jak przy wyliczaniu liczby godzin ekwiwalentu na liście płac.
      _ok:=O.first() & (H_UM.DO~2<=O.M & H_UM.DO~1=O.R | H_UM.DO~1<O.R);
      O.cntx_pop();
      KART_URL.cntx_psh();
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(P.ref(),_rok);
      {? KART_URL.first()
      || _datansp:=KART_URL.DATA_NSP
      ?};
      KART_URL.cntx_pop();
      {? ~_ok
      || __CHK.err_incorrect(
            'Symbol listy płac do wypłaty ekwiwalentu za urlop'@,
            'Ekwiwalent może być rozliczony na liście za %1 r. lub późniejszej.'@
            [H_UM.DO$8]
         );
         return(_fret('LT'))
      ?};
      {? H_UM.EKW_LICZ<>'T'
      || {? (_chk:=__CHK.record2(H_UM,'EKW',_wy_name))<>'' |
            (_datansp<>date(0,0,0) & (_chk:=__CHK.record2(H_UM,'EKW_NSP',_do_name))<>'')
         || return(_fret(_chk))
         ?}
      ?}
   ?};

   _ekw_licz:=H_UM.EKW_LICZ;
   _lista:=H_UM.LT;
   _chk:=0;
   _id:=H_UM.IDADD;
   H_UM.cntx_psh();
   _loop:=H_UM.first();
   {!
   |? _loop & ~_chk
   |! {? (H_UM.EKW<>0 | H_UM.EKW_NSP<>0) & H_UM.LT=_lista & _lista<>'' & H_UM.IDADD<>_id
      || _chk:=1;
         _tekst:='Pracownik posiada inne umowy z naliczonym ekwiwalentem na tej liście płac.\nNie zostaną one'
                 ' uwzględnione przy ponownym naliczaniu listy.'
      |? (H_UM.EKW<>0 | H_UM.EKW_NSP<>0) & H_UM.LT='' & H_UM.IDADD<>_id
      || _chk:=1;
         _tekst:='Pracownik posiada inne umowy z naliczonym ekwiwalentem ale bez przypisanej listy płac.\nNie zostaną'
                 ' one uwzglęnione przy naliczaniu listy.'
      ?};
      _loop:=H_UM.next()
   !};
   H_UM.cntx_pop();
   {? _chk
   || {? ~FUN.ask('%1 Należy zweryfikować dane. Czy kontynuować?'[_tekst])
      || return(0)
      ?}
   ?};

   {? H_UM.EKW<0
   || __CHK.err_incorrect(_wy_name,'Wartość nie może być ujemna.'@);
      return(_fret('EKW'))
   ?};

   {? H_UM.EKW_NSP<0
   || __CHK.err_incorrect(_do_name,'Wartość nie może być ujemna.'@);
      return(_fret('EKW_NSP'))
   ?};

   {? H_UM.EKW_LICZ='T'
   || KART_URL.cntx_psh();
      KART_URL.index('PRAC_ROK');
      KART_URL.prefix(P.ref(),H_UM.DO~1);
      {? KART_URL.first()=0
      || KART_URL.cntx_pop();
         FUN.emsg('Przed zwolnieniem pracownika należy założyć kartę urlopową zgodną z rokiem daty zwolnienia'
                  ' pracownika.'@);
         return(_fret('EKW_LICZ'))
      ?};
      KART_URL.cntx_pop()
   ?};

   {? _fld.LT<>H_UM.LT | _fld.EKW<>H_UM.EKW | _fld.EKW_NSP<>H_UM.EKW_NSP | _fld.EKW_LICZ<>H_UM.EKW_LICZ
   || {? H_UM.EKW_LICZ='T'
      || H_UM.EKW:=0;
         H_UM.EKW_NSP:=0
      ?};
      _fld.LT:=H_UM.LT;
      _fld.EKW:=H_UM.EKW;
      _fld.EKW_NSP:=H_UM.EKW_NSP;
      H_UM.put()
   ?}
?};

_cfg.state+=1;
exec('btn_set','!pkd_ezk_orzw');
_fret(_ret)


\cfg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła budująca odpowiednie okno do wprowadzenia danych o zwolnieniu pracownika.
::   WE: [_a] [INTEGER] - Czy w oknie redagowania umieszczać "wizytówkę" zwalnianego pracownika:
::             0 - Nie [domyślnie].
::             1 - Tak.
::       [_b] [INTEGER] - Czy w okienku dostępny przycisk "Zakończ":
::             0 - Nie [domyślnie].
::             1 - Tak.
::   WY: Tablica z elementami nazwanymi opisującymi utworzone okno redagowania.
::----------------------------------------------------------------------------------------------------------------------
_wizytowka:=var_pres('_a')=type_of(0) & _a;
_done_enable:=var_pres('_b')=type_of(0) & _b;

_cfg:=obj_new('state','done_enable','key','we','bPrev','bNext','bDone','bOk','bCancel');
_cfg.state:=1;
_cfg.done_enable:=_done_enable;
_cfg.key:='';

_cfg.we:=H_UM.mk_edit('Zwolnienie pracownika'@,,'zwlp'+$_wizytowka,,,'html_maximized');
{? ~_wizytowka
|| H_UM.win_ewin(_cfg.we,P,'INFO_P')
?};
H_UM.win_ewin(_cfg.we,H_UM,'ZWLP','Ustanie stosunku pracy / stosunku służbowego'@);
_cfg.bPrev:=H_UM.win_ebtn(_cfg.we,'text='+'&Wstecz'@+',align=begin',
   "  params_set(_par:=params_get());
      _par.cfg.state:=1;
      _par.cfg.key:='Prev';
      exec('btn_set','!pkd_ezk_orzw');
      'edit:DO'
   "
);
_cfg.bNext:=H_UM.win_ebtn(_cfg.we,'text='+'&Dalej'@+',align=begin',
   "  params_set(_par:=params_get());
      _par.cfg.key:='Next';
      exec('valid','!pkd_ezk_orzw')
   "
);

_cfg.bDone:=H_UM.win_ebtn(_cfg.we,'text='+exec('text_red_zakoncz','#window','PKD_A'),"params_get().cfg.key:='DONE'; 'key:F2'");
_cfg.bOk:=H_UM.win_ebtn(_cfg.we,'text='+exec('text_red_ok','#window','Z'),"params_get().cfg.key:='OK'; 'key:F2'");
_cfg.bCancel:=H_UM.win_ebtn(_cfg.we,'text='+'&Anuluj'@,"params_get().cfg.key:='ESC'; 'key:Esc'");

params_set('cfg',_cfg);

exec('btn_set','!pkd_ezk_orzw');

_cfg


\h_um_ekw_licz_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: JAKOLTUN [21.14]
:: OPIS: Obsługa "Po redagowaniu" dla pola EKW_LICZ
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_we:=cur_win(1,1);

_val:=(H_UM.EKW_LICZ='N');
H_UM.efld_opt(_we,'enable=%1' [$_val],H_UM,'EKW');
H_UM.efld_opt(_we,'enable=%1' [$_val],H_UM,'EKW_NSP');

1

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:41 0838780f5fc251844a4e5fa4e138464aac1c2bd074e6a734499650a0fc682a295c6595644f48804df7699252ae914aea08409b4bb58bb7aa4c3d9d434493daff719c22eef84f64e1bdb65733467d307f2e030d921dec10834ba6fd7ca4cd2b0b053eef79fdb03ab31fed0c02a6bc34b920ad2cfdeb01b6367b72015b5f1bd05c
