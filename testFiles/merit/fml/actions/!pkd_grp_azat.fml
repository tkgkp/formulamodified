:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !pkd_grp_azat.fml
:: Utworzony: 02.10.2015
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PKD_GRP_AZAT - Gr. aktualizacja zatrudnienia.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Grupowa aktualizacja zatrudnienia - główna formuła czynności.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# permissions=F_ZATR,UD_SKL

exec('init','pkd');

{? ~__F_ZATR.upr('P')
|| FUN.info('Brak wymaganego dostępu do formy współpracy "%1".'@ ['P']);
   return()
?};

P_FILTER.UD_SCH:=exec('domyslny','schemat','PODZORG');

_JOS:=exec('jos_create','pkd_grp');

_cfg:=obj_new('nav','lastref');
_cfg.nav:=obj_new('main','side');
: main - okno ze współpracownikami
: side - okno ze strukturą hierarchiczną
_cfg.nav.side:=_JOS.WS;

_ud_skl:=__PARSES.getVal('JednostkaOrganizacyjna').SYMBOL;

params_set(
   'cfg',_cfg,
   'JOS',_JOS,
   'ud_skl',_ud_skl
);
P.cntx_psh();
P.win_edit();
GRAKTZAT.cntx_psh();
GRAKTZAT.win_sel('WYB');
GRAKTZAT.win_edit('RED');
GRAKTZAT.clear();
GRAKTZAT.f_set('NAZWA',,'"GRAKTZAT".FIRMA=:_a and ("GRAKTZAT".PUBLIC=\'T\' or "GRAKTZAT".USER=:_b)',
   exec('ref_firma','ustawienia'),exec('operatorUser','#users')
);
STN.cntx_psh();
STN.prefix();
UD_SCH.cntx_psh();
UD_SCH.prefix();
UD_DEF.cntx_psh();
UD_DEF.prefix();

_wnd:=exec('wnd','!pkd_grp_azat',_JOS,_cfg);

_JOS.TAB.dnd_sel(_cfg.nav.side,,'records.P',"params_set(params_get()); exec('jos_dnd','!pkd_grp_azat')");

_JOS.TAB.win_sel(_wnd);
_JOS.TAB.select();

UD_DEF.cntx_pop();
UD_SCH.cntx_pop();
STN.cntx_pop();
GRAKTZAT.f_clear();
GRAKTZAT.cntx_pop();
P.cntx_pop();
~~


\wnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Procedura odpowiedzialna za budowę okna grupowego.
::   WE: _a - Tablica nazwana JOS.
::       _b - Tablica nazwana cfg z dodatkowymi parametrami.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_JOS:=_a;
_cfg:=_b;

: Najpierw zwykłe okno do prezentacji współpracowników.
_acr:='GRAKTZAT';
: użyj istniejące okienko
{? (_ws:=__WND.SEL.get(P,_acr))=''
|| _ws:=P.mk_sel(,'P',,'#graktzatp',,,,,'U','T');
   P.win_fld(_ws,,'T',,,9,,,,,MS.comment(P,'T'));
   P.win_fld(_ws,,'IP',,,-5,,,,,MS.comment(P,'IP'));
   P.win_fld(_ws,,'OSOBA','NAZWISKO',,20,,,,,MS.comment(OSOBA,'NAZWISKO'));
   P.win_fld(_ws,,'OSOBA','PIERWSZE',,15,,,,,MS.comment(OSOBA,'PIERWSZE'));
   P.win_fld(_ws,,'OSOBA','PESEL',,11,,,,,MS.comment(OSOBA,'PESEL'));
   P.win_fld(_ws,,'F_ZATR','KOD',,-2,,,MS.name(P,'F_ZATR'),,MS.comment(F_ZATR,'KOD'));
   P.win_fld(_ws,,'WYDZIAL','SYMBOL',,-16,,,MS.name(P,'WYDZIAL'),,'Symbol jednostki organizacyjnej'@);
   P.win_fld(_ws,,'ST','ST',,18,,,MS.name(P,'ST'),,MS.comment(STN,'ST'));
   P.win_fld(_ws,,'ZA',,,-5,,,MS.name(P,'ZA'),,MS.comment(P,'ZA'),2,,"'T'","'N'");

   _fgraktzat:="params_set(params_get()); exec('aktualizujn','!pkd_grp_azat','akcja'); 0";
   P.win_act(_ws,,'Formuła','Aktualizuj'@@,,'Wybór definicji aktualizującej zatrudnienia'@,
      _fgraktzat,,1,1,_fgraktzat,,'A');
   P.win_act(_ws,,'Menu','Szukaj'@@,,,,,,,,,'S');
   P.win_act(_ws,,'Formuła','Szukaj dokładnie'@@,'#S','Szukanie zapisu zgodnego ze zredagowanym wzorcem'@,
      "exec('p_ustaw_ezk','szukaj')","exec('p_d','szukaj')",,,,,'S');
   P.win_act(_ws,,'Formuła','Szukaj &kontekstowo'@@,'#S','Szukanie zapisu zgodnego ze zredagowanym wzorcem'@,
      "exec('p_ustaw_ezk','szukaj')","exec('p_k','szukaj')",,,,,'K');
   P.win_act(_ws,,'#F3',,,,"exec('p_ustaw_ezk','szukaj')","exec('p_f3_wnd','szukaj')");
   P.win_act(_ws,,'Kolejność');

   P.win_btn(_ws,'text='+'Aktualizuj'@+',btn_label_align=center,panel=right,align=begin','menu:A');

   __WND.SEL.put(P,_acr,_ws)
?};

_cfg.nav.main:=_ws;

: Teraz okno grupowe.
_mode:='maximized';

_wnd:=_JOS.TAB.grp_make('Grupowa aktualizacja zatrudnienia',
:  Po wyświetleniu (załaduj kontrolkę, wyświetl drzewko).
   "  _par:=params_get();
      params_set(_par);
      _cfg:=_par.cfg;
      _ud_skl:=_par.ud_skl;
      _JOS:=_par.JOS;
      exec('jos_fill','pkd_grp',_JOS,P_FILTER.UD_SCH,_ud_skl);
      grp_disp(_JOS.TAB,_cfg.nav.side,1,1)
   ",'pkd_grp_azat'
);

: Struktura.
_JOS.TAB.grp_sel(_wnd,_JOS.TAB,_cfg.nav.side,,
:  Po odświeżeniu (wyświetl współpracowników).
   "  _par:=params_get();
      params_set(_par);
      _cfg:=_par.cfg;
      grp_disp(P,_cfg.nav.main,1,1)
   ",,,18,,,,,_mode,_cfg.nav.side
);

: Współpracownicy.
_JOS.TAB.grp_splt(_wnd,,'vertical','p',',25%');
_JOS.TAB.grp_sel(_wnd,P,_cfg.nav.main,,"",,,,
:  Przed obsługą (ustaw filtr na tabeli P).
: !!! Proteza. Zapamiętujemy numer rekordu tabeli _JOS.TAB, dla którego odświeżany był widok współpracowników.
   "  _par:=params_get();
      _JOS:=_par.JOS;
      _cfg:=_par.cfg;
      {? _cfg.lastref<>_JOS.TAB.ref() & UD_DEF.seek(_JOS.TAB.UD_DEF)
      || _cfg.lastref:=_JOS.TAB.ref();
         _where:={? _JOS.TAB.TYP='S' || '\"P\".ST=\\\''+_JOS.TAB.STN+'\\\'' || '' ?};
         exec('filtruj_p','schemat','PKD',UD_DEF.ref(),'P','','W',,_where)
      ?}
   ",,,,_mode,_cfg.nav.main
);

_wnd


\jos_dnd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji drag&drop (pracownik rzucony na drzewo - możliwość zmiany
::       jednostki organizacyjnej i/lub stanowiska).
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_src:=dnd_info('dropped_records');
{? type_of(_src)=type_of(~~)
|| return(0)
?};

_dest:=dnd_info('dest_record');
{? _dest=null()
|| return(0)
?};

_par:=params_get();
_JOS:=_par.JOS;

_JOS.TAB.cntx_psh();
{? _JOS.TAB.seek(_dest) & UD_DEF.seek(_JOS.TAB.UD_DEF) & (_JOS.TAB.TYP='J' | STN.seek(_JOS.TAB.STN))
||
:  Utwórzmy wirtualną konfigurację definicji zmiany, bez zapisywania jej na dysku.
:  To pozwoli nam na skorzystanie z istniejącego mechanizmu aktualizacji.
   _pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
   GRAKTZAT.cntx_psh();
   GRAKTZAT.blank();
   GRAKTZAT.NAZWA:='$dnd_'+_JOS.TAB.TYP+'$';
   GRAKTZAT.WYDZIALA:=_pw;
   GRAKTZAT.WYDZIALW:=UD_DEF.SYMBOL;
   {? _JOS.TAB.TYP='S'
   || GRAKTZAT.STA:=_pw;
      GRAKTZAT.STW:=STN.ref()
   ?};
:  Z samego drag&drop nie można odgadnąć wszystkich parametrów - tworzymy tymczasowe okno, w którym dopytamy się
:  o pozostałe parametry aktualizacji.
   _par313:=-PAR_SKID.get(313)='t';
   _acr:='RED_'+_JOS.TAB.TYP+$_par313;
   {? (_we:=__WND.EDIT.get(GRAKTZAT,_acr))=''
   || _we:=GRAKTZAT.mk_edit('Parametry aktualizacji'@,,'graktzat_dnd_'+(-_JOS.TAB.TYP));
      GRAKTZAT.win_esep(_we,'Jednostka organizacyjna'@);
      GRAKTZAT.win_efld(_we,,'WYDZIALW',,,37,,1,'Wartość'@,,'Symbol jednostki organizacyjnej'@,,'F3_button=1');
      {? _JOS.TAB.TYP='S'
      || GRAKTZAT.win_esep(_we,'Stanowisko'@);
         GRAKTZAT.win_efld(_we,,'STW','ST',,37,,1,'Wartość'@,,'Nazwa stanowiska'@)
      ?};
      {? _par313
      || GRAKTZAT.win_esep(_we,'Pozycja w organizacji'@);
         GRAKTZAT.win_efld(_we,,'POZWORGA',,,,,,'Sposób zmiany'@,,,'radio-buttons',,
            'Nie zmieniaj'@,"exec('graktzat_xa_val_nz','!pkd_grp_azat')",
            'Wyczyść'@,"exec('graktzat_xa_val_bl','!pkd_grp_azat')",
            'Przypisz pierwszą'@,"exec('graktzat_xa_val_fi','!pkd_grp_azat')",
            'Przypisz wolną'@,"exec('graktzat_xa_val_fr','!pkd_grp_azat')",
            'Przypisz wartość'@,"exec('graktzat_xa_val_pw','!pkd_grp_azat')"
         );
         GRAKTZAT.win_efld(_we,,'POZWORGW','KOD','KOD',37,,,'Wartość'@,,'Wartość pozycji w organizacji'@)
      ?};
      {? _JOS.TAB.TYP='S'
      || GRAKTZAT.win_esep(_we,'Szczególne warunki'@);
         GRAKTZAT.win_efld(_we,,'SPA',,,,,,'Sposób zmiany'@,,,'radio-buttons',,
            'Nie zmieniaj'@,"exec('graktzat_xa_val_nz','!pkd_grp_azat')",
            'Przypisz zgodnie ze stanowiskiem'@,"'S'",
            'Przypisz "Nie"'@,"'N'",
            'Przypisz "Tak"'@,"'T'"
         )
      ?};
      exec('ok_esc','#window',GRAKTZAT,_we);

      __WND.EDIT.put(GRAKTZAT,_acr,_we)
   ?};
   GRAKTZAT.win_edit(_we);
   exec('graktzat_efld_opt','!pkd_grp_azat','*',GRAKTZAT,_we);
   GRAKTZAT.efld_opt(_we,'mark=0');
   params_set('pole',obj_new('acr'));
   {? GRAKTZAT.edit("exec('graktzat_ae','!pkd_grp_azat')")
   || exec('aktualizujn','!pkd_grp_azat','dnd',_src)
   ?};
   GRAKTZAT.cntx_pop()
?};
_JOS.TAB.cntx_pop();

1


\dsk_callback_sch
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Reakcja na wybór schematu w selektorze.
::----------------------------------------------------------------------------------------------------------------------
UD_SCH.prefix();
{? UD_SCH.seek(exec('get_value','#desktop','','selektor','schCB@panel'))
|| P_FILTER.UD_SCH:=UD_SCH.ref();
   _par:=params_get();
   _ud_skl:=_par.ud_skl;
   _JOS:=_par.JOS;
   exec('jos_fill','pkd_grp',_JOS,P_FILTER.UD_SCH,_ud_skl)
?};
win_activate(params_get().cfg.nav.side)


\aktualizuj1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Główna formuła aktualizacji dla jednego współpracownika.
::   WE: _a - Tabela z parametrami zmian.
::       _b - Tabela statusów.
::       _c - Tabela zmian.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TPAR:=_a;
_LOG:=_b;
_ZMIANA:=_c;

_LOG.blank();

_status:='';
H.prefix(P.ref(),'Z');
_firma:=P.FIRMA;
{? H.find_le(_TPAR.OD) & (H.DO=date(0,0,0) | _TPAR.OD<=H.DO)
|| do();
   _LOG.H_UM:=$H.UMOWA;
   {? (1+H.UMOWA().IDMOD)='D'
:     Zmiana przebiegu dla dołączonej i niezaakceptowanej umowy nie jest możliwa.
   || undo();
      _status+='Nowa umowa oczekuje na akceptację. Zmiany niemożliwe.\n'@

   |? H.OD<_TPAR.OD & (1+H.IDMOD)<>'_'
:     Zmiana dat zmienionego (dołączonego lub poprawionego) aneksu nie jest możliwa.
   || undo();
      _status+='Aneks do umowy (%1 - %2) oczekuje na akceptację. Zmiany niemożliwe.\n'@ [$H.OD,$H.DO]

   |? H.OD=_TPAR.OD & (1+H.IDMOD)<>'_' & ~_TPAR.MODE
   || undo();
      _status+='Aneks do umowy oczekuje na akceptację. Zmiany niemożliwe.\n'@

   |? H.ODDEL='T'
   || undo();
      _status+='Zapisy związane z oddelegowaniami nie są obsługiwane.\n'@

   || {? _TPAR.P180
:        Jeżeli pracujemy w trybie z "brudnopisem" to zmieniamy maskę na czystopis.
:        Podczas wykonywania formuł, chcemy stać na właściwym, zmienianym rekordzie.
      || H.cntx_psh();
         H.use('_hist');
         H.index('_HISTKOD');
         H.prefix(P.ref(),'Z')
      ?};
      {? ~_TPAR.P180 | (H.find_le(_TPAR.OD) & (H.DO=date(0,0,0) | _TPAR.OD<=H.DO))
:        Jeżeli pracujemy w trybie bez "brudnopisu" to nic nie musimy robić.
:        Jeżeli pracujemy w trybie z "brudnopisem" to właśnie zmieniliśmy maskę i musimy ustawić się na odpowiednim
:        rekordzie. Jeżeli dane są w porządku, to druga część powyższego warunku powinna być spełniona - sprawdziliśmy
:        go w brudnopisie.
      || _Hnew:=exec('H','buffer');
         _Hnew.blank(~~);

:        Zmiana wartości -----------------------------------------------------------------------------------------------

:        Jednostka / stanowisko ----------------------------------------------------------------------------------------
         _name:='Jednostka organizacyjna';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'WYDZIALA','WYDZIALW','WYDZIALF');
         {? _val=~~
         || ~~
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>UD_SKL | ~UD_SKL.seek(_val)
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            |? _skl_firma:=exec('ud_skl_firma','schemat',UD_SKL.UD_TYP,_firma);
               _skl_firma<>null() & UD_SKL.SCIEZKA<>'' & UD_SKL.SCIEZKA*($_skl_firma+8)=0
            || undo();
               _status+='Element nie jest związany z firmą pracownika.'@
            || _Hnew.WYDZIAL:=_val
            ?}
         |? type_of(_val)=type_of('')
         || _ref:=exec('szukaj_ud_skl','schemat','PODZORG',_val);
::          Formuła powyżej zmienia bufory tabel UD_SKL i UD_TYP.
            {? _ref=null()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            |? _skl_firma:=exec('ud_skl_firma','schemat',UD_SKL.UD_TYP,_firma);
               _skl_firma<>null() & UD_SKL.SCIEZKA<>'' & UD_SKL.SCIEZKA*($_skl_firma+8)=0
            || undo();
               _status+='Element nie jest związany z firmą pracownika.'@
            || _Hnew.WYDZIAL:=_ref
            ?}
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

         _name:='Stanowisko';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'STA','STW','STF');
         {? _val=~~
         || ~~
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>STN
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || _Hnew.ST:=_val
            ?}
         |? type_of(_val)=type_of('')
         || STN.cntx_psh();
            STN.index('STANONAZ');
            STN.prefix(_val,);
            {? STN.first()
            || _Hnew.ST:=STN.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            STN.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

         _name:='Pozycja w organizacji';
         _first:=exec('graktzat_xa_val_fi','!pkd_grp_azat');
         _free:=exec('graktzat_xa_val_fr','!pkd_grp_azat');
         {? GRAKTZAT.POZWORGA=exec('graktzat_xa_val_bl','!pkd_grp_azat')
         || _Hnew.POZWORG:=null()
         |? GRAKTZAT.POZWORGA=_first | GRAKTZAT.POZWORGA=_free
         || STO.cntx_psh();
            STO.index('UNIQUE');
            STO.prefix({? _Hnew.WYDZIAL=~~ || H.WYDZIAL || _Hnew.WYDZIAL?},{? _Hnew.ST=~~ || H.ST || _Hnew.ST ?});
            _t1:='Pozycja w organizacji nie została zmieniona.\n'@;
            {? STO.first()
            || _t2:='Stanowisko: "%1", Jednostka organizacyjna: "%2".\n'@ [STO.STN().ST,STO.UD_SKL().SYMBOL];
               PSTO.cntx_psh();
               PSTO.index('POZKOD');
               PSTO.prefix(STO.ref());
               {? PSTO.first()
               || {? GRAKTZAT.POZWORGA=_first
                  || _Hnew.POZWORG:=PSTO.POZWORG
                  |? GRAKTZAT.POZWORGA=_free
                  || _ok:=0;
                     {!
                     |? _ret:=exec('check','overlap',H.ref(),H,'OD','DO',1,,,_TPAR.HNDX,PSTO.POZWORG);
                        {? (type_of(_ret)=type_of('') & _ret='') | (type_of(_ret)=type_of(0) & _ret)
                        || _Hnew.POZWORG:=PSTO.POZWORG;
                           _ok:=1;
                           0
                        || PSTO.next()
                        ?}
                     !};
                     {? ~_ok
                     || _status+=_t2+'Znalezienie wolnej pozycji w organizacji nie powiodło się.\n'@+_t1
                     ?}
                  ?}
               || _status+=_t2+'Ustalenie pozycji w organizacji nie powiodło się.\n'@+_t1
               ?};
               PSTO.cntx_pop()
            || _status+='Ustalenie pozycji w organizacji nie powiodło się.\n'@+_t1
            ?};
            STO.cntx_pop()
         |? GRAKTZAT.POZWORGA=exec('graktzat_xa_val_pw','!pkd_grp_azat')
         || _Hnew.POZWORG:=GRAKTZAT.POZWORGW
         |? GRAKTZAT.POZWORGA=exec('graktzat_xa_val_zf','!pkd_grp_azat')
         || _fml:=GRAKTZAT.memo_txt(0,1,'POZWORGF');
            _val:=($_fml)(_Hnew);
            {? type_of(_val)=type_of(null())
            || {? _val=null()
               || undo();
                  _status+='%1 - wartość pusta.\n'@ [_name]
               |? ref_tab(_val)<>POZWORG
               || undo();
                  _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
               || _Hnew.POZWORG:=_val
               ?}
            |? type_of(_val)=type_of('')
            || POZWORG.cntx_psh();
               POZWORG.index('KOD');
               POZWORG.prefix(_firma,_val,);
               {? POZWORG.first()
               || _Hnew.POZWORG:=POZWORG.ref()
               || undo();
                  _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
               ?};
               POZWORG.cntx_pop()
            || undo();
               _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
            ?}
         ?};

         _name:='Szczególne warunki';
         {? GRAKTZAT.SPA='S'
         || STN.cntx_psh();
            STN.prefix();
            {? _Hnew.ST=~~
            || _Hnew.SP:=H.ST().SP
            |? STN.seek(_Hnew.ST)
            || _Hnew.SP:=STN.SP
            ?};
            STN.cntx_pop()
         |? GRAKTZAT.SPA='T'
         || _Hnew.SP:='T'
         |?  GRAKTZAT.SPA='N'
         || _Hnew.SP:='N'
         |? GRAKTZAT.SPA=exec('graktzat_xa_val_zf','!pkd_grp_azat')
         || _fml:=GRAKTZAT.memo_txt(0,1,'SPF');
            _val:=($_fml)(_Hnew);
            {? type_of(_val)=type_of('')
            || {? _val='T' | _val='N'
               || _Hnew.SP:=_val
               || _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
               ?}
            || undo();
               _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
            ?}
         ?};

:        Charakter / miejsce pracy  ------------------------------------------------------------------------------------
         _name:='Charakter pracy';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'CPA','CPW','CPF');
         {? _val=~~
         || ~~
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>CP
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || _Hnew.CP:=_val
            ?}
         |? type_of(_val)=type_of('')
         || CP.cntx_psh();
            CP.index('CHARPRAW');
            CP.prefix(_val,);
            {? CP.first()
            || _Hnew.CP:=CP.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            CP.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

         _Hnew.MIEJSCE:=exec('val_w2','!pkd_grp_azat',_Hnew,'MIEJSCEA','MIEJSCEW','MIEJSCEF');

:        Przychód z praw autorskich  -----------------------------------------------------------------------------------
         _name:='Tryb ustalania przychodu z praw autorskich';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'PATA','PATW','PATF');
         {? _val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'NKPG'*_val
         || _Hnew.PAT:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _val:=exec('val_w7','!pkd_grp_azat',_Hnew,H.PAW,'PAWA','PAWW','PAWF','PAWZ','PAWP');
         {? type_of(_val)=type_of('')
         || undo();
            _status+='Wartość bazowa przychodu z praw autorskich - %1'@ [(-(1+_val))+(1-_val)]
         || _Hnew.PAW:=_val
         ?};

:        Płaca zasadnicza  ---------------------------------------------------------------------------------------------
         _val:=exec('val_w7','!pkd_grp_azat',_Hnew,H.S1,'S1A','S1W','S1F','S1Z','S1P');
         {? type_of(_val)=type_of('')
         || undo();
            _status+='Płaca zasadnicza - %1'@ [(-(1+_val))+(1-_val)]
         || _Hnew.S1:=_val
         ?};

         _name:='Waluta płacy zasadniczej';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'CZYWALA','CZYWALW','CZYWALF');
         {?_val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'TN'*_val
         || _Hnew.CZYWAL:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _Hnew.KA:=exec('val_w2','!pkd_grp_azat',_Hnew,'KAA','KAW','KAF');

:        Dodatek funkcyjny  --------------------------------------------------------------------------------------------
         _val:=exec('val_w7','!pkd_grp_azat',_Hnew,H.S2,'S2A','S2W','S2F','S2Z','S2P');
         {? type_of(_val)=type_of('')
         || undo();
            _status+='Dodatek funkcyjny - %1'@ [(-(1+_val))+(1-_val)]
         || _Hnew.S2:=_val
         ?};

         _name:='Waluta dodatku funkcyjnego';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'CZYWAL2A','CZYWAL2W','CZYWAL2F');
         {? _val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'TN'*_val
         || _Hnew.CZYWAL2:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _name:='Typ dodatku funkcyjnego';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'S2TA','S2TW','S2TF');
         {? _val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'PK'*_val
         || _Hnew.S2T:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _name:='Podstawa dodatku funkcyjnego';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'S2PA','S2PW','S2PF');
         {? _val=~~
         || ~~
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>FORMULA
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || FORMULA.cntx_psh();
               FORMULA.prefix();
               {? FORMULA.seek(_val) & FORMULA.RODZAJ='P'
               || _Hnew.S2P:=FORMULA.ref()
               || undo();
                  _status+='%1 - niepoprawny typ formuły [%2|%3].\n'@ [_name,$_val,FORMULA.RODZAJ]
               ?};
               FORMULA.cntx_pop()
            ?}
         |? type_of(_val)=type_of('')
         || FORMULA.cntx_psh();
            FORMULA.index('FORMULA3');
            FORMULA.prefix('P',_val,);
            {? FORMULA.first()
            || _Hnew.S2P:=FORMULA.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            FORMULA.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

         _Hnew.KADOD:=exec('val_w2','!pkd_grp_azat',_Hnew,'KADODA','KADODW','KADODF');

:        Dodatek  ------------------------------------------------------------------------------------------------------
         _val:=exec('val_w7','!pkd_grp_azat',_Hnew,H.S3,'S3A','S3W','S3F','S3Z','S3P');
         {? type_of(_val)=type_of('')
         || undo();
            _status+='Dodatek - %1'@ [(-(1+_val))+(1-_val)]
         || _Hnew.S3:=_val
         ?};

         _name:='Waluta dodatku';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'CZYWAL3A','CZYWAL3W','CZYWAL3F');
         {? _val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'TN'*_val
         || _Hnew.CZYWAL3:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _name:='Typ dodatku';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'S3TA','S3TW','S3TF');
         {? _val=~~
         || ~~
         |? type_of(_val)<>type_of('')
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         |? _val=''
         || undo();
            _status+='%1 - wartość pusta.\n'@ [_name]
         |? +_val=1 & 'PK'*_val
         || _Hnew.S3T:=_val
         || undo();
            _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
         ?};

         _name:='Podstawa dodatku';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'S3PA','S3PW','S3PF');
         {? _val=~~
         || ~~
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>FORMULA
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || FORMULA.cntx_psh();
               FORMULA.prefix();
               {? FORMULA.seek(_val) & FORMULA.RODZAJ='P'
               || _Hnew.S3P:=FORMULA.ref()
               || undo();
                  _status+='%1 - niepoprawny typ formuły [%2|%3].\n'@ [_name,$_val,FORMULA.RODZAJ]
               ?};
               FORMULA.cntx_pop()
            ?}
         |? type_of(_val)=type_of('')
         || FORMULA.cntx_psh();
            FORMULA.index('FORMULA3');
            FORMULA.prefix('P',_val,);
            {? FORMULA.first()
            || _Hnew.S3P:=FORMULA.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            FORMULA.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

:        Wynagrodzenie w walucie  --------------------------------------------------------------------------------------
         _name:='Tabela kursów';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'ZWALA','ZWALW','ZWALF');
         {? _val=~~
         || ~~
         |? XINFO.SLBANK=null()
         || undo();
            _status+='Nie ustalono słownika banków w parametrach pracy programu.\n'@
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>SLO
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || SLO.cntx_psh();
               SLO.prefix();
               {? SLO.seek(_val) & SLO.SLU=XINFO.SLBANK
               || _Hnew.ZWAL:=SLO.ref()
               || undo();
                  _status+='%1 - niepoprawny typ wartości [%2].\n'@ [_name,$_val]
               ?};
               SLO.cntx_pop()
            ?}
         |? type_of(_val)=type_of('')
         || SLO.cntx_psh();
            SLO.index('SL');
            SLO.prefix(XINFO.SLBANK,_val,);
            {? SLO.first()
            || _Hnew.ZWAL:=SLO.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            SLO.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

         _name:='Waluta';
         _val:=exec('val_w2','!pkd_grp_azat',_Hnew,'WALA','WALW','WALF');
         {? _val=~~
         || ~~
         |? XINFO.SLWAL=null()
         || undo();
            _status+='Nie ustalono słownika walut w parametrach pracy programu.\n'@
         |? type_of(_val)=type_of(null())
         || {? _val=null()
            || undo();
               _status+='%1 - wartość pusta.\n'@ [_name]
            |? ref_tab(_val)<>SLO
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,$_val]
            || SLO.cntx_psh();
               SLO.prefix();
               {? SLO.seek(_val) & SLO.SLU=XINFO.SLWAL
               || _Hnew.WAL:=SLO.ref()
               || undo();
                  _status+='%1 - niepoprawny typ wartości [%2].\n'@ [_name,$_val]
               ?};
               SLO.cntx_pop()
            ?}
         |? type_of(_val)=type_of('')
         || SLO.cntx_psh();
            SLO.index('SL');
            SLO.prefix(XINFO.SLWAL,_val,);
            {? SLO.first()
            || _Hnew.WAL:=SLO.ref()
            || undo();
               _status+='%1 - niepoprawna wartość [%2].\n'@ [_name,_val]
            ?};
            SLO.cntx_pop()
         || undo();
            _status+='%1 - niepoprawny typ wartości.\n'@ [_name]
         ?};

:        Koniec zmian wartości  ----------------------------------------------------------------------------------------

         ~~
      || undo();
         _status+='Odnalezienie wiersza źródłowego nie powiodło się.\n'@
      ?};
      {? _TPAR.P180
:        Dla pracy w trybie z "brudnopisem" powrót do maski brudnopisu i wcześniej sprawdzanych rekordów.
      || H.cntx_pop()
      ?};

      {? do_state()<2
:        Wciąż jesteśmy w transakcji ...
      || _LOG.HP:=$H.ref();
:        (zapamiętujemy ref rekordu poprawianego)
         {? H.OD<_TPAR.OD
:           i zmiana wewnątrz istniejącego okresu. Zamknij znaleziony ...
         || _do:=H.DO;
            H.memo_get(,'INNE');
            H.DO:=_TPAR.OD-1;
            {? H.put(1)
:              (po zmianie zapamiętujemy crc rekordu)
            || _LOG.HP_CRC:=H.crc()
            || undo();
               _status+='Zamknięcie okresu nie powiodło się.\n'@
            ?};
:           ... i utwórz nowy.
            H.OD:=_TPAR.OD;
            H.DO:=_do;
            {? ~_TPAR.P180
:              Jeżeli pracujemy bez brudnopisu - wyczyśćmy pole, którego wartość pochodzi z rekordu kopiowanego.
            || H.IDLNK:=''
            ?};
            {? H.add(1) & H.memo_put(,'INNE')
:              Zapamiętujemy ref rekordu dodawanego. CRC zapamiętamy później - po aktualizacji zmienianych pól.
            || _LOG.HA:=$H.ref()
            || undo();
               _status+='Utworzenie nowego zapisu nie powiodło się.\n'@
            ?}
         ?}
      ?};

:     Stoimy na właściwym rekordzie (albo dodanym albo modyfikowanym).

      _Hnew.PRZYG:=_TPAR.PRZYG;
      _Hnew.PODPIS:=_TPAR.PODPIS;
      {? ~_TPAR.PP
      || _Hnew.PRZEDST:=_TPAR.PRZEDST
      ?};

:     Budujemy tabelę zmian - informacje o zmienionych polach.
      _lz:=0;
      {! _lp:=1 .. H.fld_num()
      |! _acr:=H.fld_acr(_lp);
         _vala:=($('_a.'+_acr))(_Hnew);
         {? _vala<>~~
         || _valb:=($('H.'+_acr))();
            {? _valb<>_vala
            || _lz+=1;
               _vp:=var_pres(_acr,H);
               _ZMIANA.blank();
               _ZMIANA.H_UM:=_LOG.H_UM;
               _ZMIANA.LP:=_lp;
               _ZMIANA.AKRONIM:=_acr;
               _ZMIANA.NAZWA:=H.fld_name(_lp);
               {? _vp=27
:                 Napisy - bez konwersji.
               || _ZMIANA.WB:=_valb;
                  _ZMIANA.WA:=_vala
               |? _vp=26
:                 Pole zrelacjonowane.
               || _ZMIANA.WB:=exec('record','#to_string',_valb);
                  _ZMIANA.WA:=exec('record','#to_string',_vala)
:                 Reszta - standardowa konwersja na napis.
               || _ZMIANA.WB:=$_valb;
                  _ZMIANA.WA:=$_vala
               ?};
               _ZMIANA.add()
            ?}
         ?}
      !};
      {? _lz=0
      || undo();
         _status+='Nie zmieniono żadnej wartości.\n'@
      ?};

:     Zrzucamy zmienione wartości.
      {? do_state()<2
      || _Hnew.set();
         _ret:=exec('h_p_com_ae','pracownik',1,1,{? _TPAR.P180 || 'POZWORG' || '' ?});
         {? type_of(_ret)=type_of('') & _ret<>''
         || undo();
            _status+=_ret+'\n'
         |? type_of(_ret)=type_of(0) & ~_ret
         || undo();
            _status+='Nowe wartości nie odpowiadają nałożonym warunkom.\n'@
         |? H.put()
         || {? _LOG.HA<>''
:              Jeżeli został dodany rekord to w nim zapisane zostały nowe wartości pól - zapamiętujemy crc tego rekordu.
            || _LOG.HA_CRC:=H.crc()
:              Jeżeli tylko poprawiamy rekord to po zapisaniu w nim nowych wartości pól jego crc zmieniło się -
:              wymaga ponownego zapamiętania.
            || _LOG.HP_CRC:=H.crc()
            ?};
            {? do_state()<2 & _TPAR.AA
:              Dla trybu pracy bez "brudnopisu" pole _TPAR.AA nie jest redagowane - zawsze ma wartość 0.
            || {? _LOG.HA<>''
:                 Jeżeli dodano rekord przebiegu to wycofanie musi dotyczyć umowy.
               || exec('h_um_merge','pracownik',H.UMOWA)
               || exec('h_merge_one','pracownik',0)
               ?}
            ?}
         ?}
      ?}

   ?};

   _LOG.OK:={? end() || 'T' || 'N' ?}

|| _status+='Zmiana poza okresem zatrudnienia.\nPracownik zatrudniony od %1 do %2.\n'@ [$P.DZA,$P.DZ]
?};
H.prefix();

_LOG.memo_set(_status,'STATUS');
_LOG.add() & _LOG.memo_put(,'STATUS')


\aktualizujn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła sterująca aktualizacja grupową. Wykonywana w dwóch przypadkach:
::       - po wyborze definicji aktualizacji (dla bieżącego wiersza lub zaznaczonych);
::       - w wyniku akcji drag&drop.
::   WE: _a - Kontekst pracy: 'akcja' lub 'dnd'.
::       _b - Tabela tymczasowa z rekordami do przetworzenia (tylko dla _a='dnd').
::   WY: 0
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of('') & (_a='akcja' | _a='dnd')
|| _cntx:=_a
|| return(0)
?};

_sel:=0;
{? _cntx='akcja'
|| params_set('pole',obj_new('acr'));
   GRAKTZAT.f_rfresh();
   {? ~GRAKTZAT.select()
   || return(0)
   ?};
   {? P.sel_size()=0
:     Jeżeli akcja wywołana dla jednego (niezaznaczonego) rekordu (cóż za marnotrawstwo), to dla spójności obsługi
:     zaznaczmy go.
   || sel_add();
      _sel:=1
   ?};
   _tab:=P.sel_aget()
|? _cntx='dnd'
|| {? var_pres('_b')=type_of(P) & var_pres('REF',_b)=22 & var_pres('CRC',_b)=22
   || _tab:=_b
   || return(0)
   ?}
?};

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');

: Pobranie parametrów aktualizacji.  -----------------------------------------------------------------------------------
_d0:=date(0,0,0);
_TPAR:=tab_tmp(1,
:  Dane podstawowe
   'OD','DATE','Data aktualizacji'@,
   'PRZYG','DATE',MS.name(H,'PRZYG'),
   'PODPIS','DATE',MS.name(H,'PODPIS'),
:  Przedstawiciel
   'PP','INTEGER','Kopiować z ostaniego angażu'@,
   'PRZEDST','STRING[150]','Nazwisko, imiona'@,
:  Dane rozszerzone
   'MODE','INTEGER','Poprawiać niezaakceptowane'@,
   'AA','INTEGER','Akceptować'@,
:  Pola techniczne
   'HNDX','STRING[8]','Akronim indeksu',
   'P180','INTEGER','Brudnopis aktywny'
);
_TPAR.P180:=-PAR_SKID.get(180)='t';

_efld_opt:="
   _par:=params_get();
   _TPAR:=_par.TPAR;
   _we:=_par.we;
   _TPAR.efld_opt(_we,'enable=%1,mark=%1' [$(~_TPAR.PP)],,'PRZEDST'); 1
";
_TPAR.fld_fml('PP','AFTER_EDIT',_efld_opt);

_we:=_TPAR.mk_edit('Parametry zmian'@);
_TPAR.win_esep(_we,'Dane podstawowe'@);
_TPAR.win_efld(_we,,'OD',,,,,,,,'Data aktualizacji zatrudnienia - początku nowego aneksu / przeszeregowania'@);
_TPAR.win_efld(_we,,'PRZYG',,,,,,,,MS.comment(H,'PRZYG'));
_TPAR.win_efld(_we,,'PODPIS',,,,,,,,MS.comment(H,'PODPIS'));
_TPAR.win_esep(_we,'Przedstawiciel pracodawcy'@);
_TPAR.win_efld(_we,,'PP',,,40,,,,,'','check-box',,"1","0");
_TPAR.win_efld(_we,,'PRZEDST',,,30,,,,,'Przedstawiciela pracodawcy (stanowisko, nazwisko, imiona, ...)'@);
_TPAR.fld_ebtn(_we,'icon=xwin16.png:90',"exec('lista','ext_slo','PRZEDZAK')");
{? _TPAR.P180
|| _TPAR.win_esep(_we,'Dane rozszerzone'@);
   _TPAR.win_efld(_we,,'MODE',,,,,,,,'Czy poprawiać zapisy, które nie zostały zaakceptowane?'@,'check-box',,"1","0");
   _TPAR.win_efld(_we,,'AA',,,,,,,,'Czy automatycznie akceptować wprowadzone zmiany?'@,'check-box',,"1","0")
?};
exec('ok_esc','#window',_TPAR,_we);
_TPAR.win_edit(_we);
_TPAR.efld_opt(_we,'mark=1',,'OD');
_TPAR.efld_opt(_we,'mark=1',,'PRZYG');
_TPAR.efld_opt(_we,'mark=1',,'PODPIS');

params_set(
   'TPAR',_TPAR,
   'we',_we
);

_TPAR.OD:=date(,,0)+1;
_TPAR.PRZYG:=date();
_TPAR.PODPIS:=date();
_TPAR.PP:=1;

_efld_opt();
{? ~_TPAR.edit(
   "  _TPAR:=params_get().TPAR;
      {? (_chk:=exec('h_p_daty_ae','pracownik',1,,_TPAR))<>''
      || _chk
      |? ~_TPAR.PP & (_chk:=__CHK.record(cur_tab(),,'PRZEDST'))<>''
      || _chk
      || ''
      ?}
   ")
|| {? _sel
   || P.sel_del()
   ?};
   return(0)
?};

: Tabela ze statusami operacji.  ---------------------------------------------------------------------------------------
_LOG:=tab_tmp(3,
   'NAZWISKO','STRING['+$MS.fld_len(OSOBA,'NAZWISKO')+']',MS.name(OSOBA,'NAZWISKO'),
   'PIERWSZE','STRING['+$MS.fld_len(OSOBA,'PIERWSZE')+']',MS.name(OSOBA,'PIERWSZE'),
   'PESEL','STRING['+$MS.fld_len(OSOBA,'PESEL')+']',MS.name(OSOBA,'PESEL'),
   'T','STRING['+$MS.fld_len(P,'T')+']',MS.name(P,'T'),
   'IP','INTEGER',MS.name(P,'IP'),
   'OK','STRING[1]','Zmiana poprawna'@,
   'STATUS','SYS_MEMO','Status operacji'@,
:  Pola techniczne
   'H_UM','STRING[16]','Wskazanie modyfikowanej umowy',
   'HA','STRING[16]','Wskazanie dodanego przebiegu',
   'HA_CRC','INTEGER','Suma kontrolna dodanego przebiegu',
   'HP','STRING[16]','Wskazanie modyfikowanego przebiegu',
   'HP_CRC','INTEGER','Suma kontrolna modyfikowanego przebiegu'
);
_LOG.fld_attr(,2);

_LOG.fld_fml('NAZWISKO','BLANK',"P.OSOBA().NAZWISKO");
_LOG.fld_fml('PIERWSZE','BLANK',"P.OSOBA().PIERWSZE");
_LOG.fld_fml('PESEL','BLANK',"P.OSOBA().PESEL");
_LOG.fld_fml('T','BLANK',"P.T");
_LOG.fld_fml('T','DISPLAY_FORMAT',P.fld_fml('T','*DISPLAY_FORMAT'));
_LOG.fld_fml('IP','BLANK',"P.IP");
_LOG.fld_fml('OK','BLANK',"'N'");

_ws1:=_LOG.mk_sel('Pracownicy'@,,,,,,,,'U');
_LOG.win_fld(_ws1,,'T',,,9,,,,,MS.comment(P,'T'));
_LOG.win_fld(_ws1,,'IP',,,-5,,,,,MS.comment(P,'IP'));
_LOG.win_fld(_ws1,,'NAZWISKO',,,30,,,,,MS.comment(OSOBA,'NAZWISKO'));
_LOG.win_fld(_ws1,,'PIERWSZE',,,20,,,,,MS.comment(OSOBA,'PIERWSZE'));
_LOG.win_fld(_ws1,,'PESEL',,,11,,,,,MS.comment(OSOBA,'PESEL'));
_LOG.win_fld(_ws1,,'OK',,,-3,,,'Zmiana poprawna [T/N]'@,,'Zmiana została wprowadzona'@,2,,"'T'","'N'");
_LOG.win_fld(_ws1,,'STATUS',,,50,,,,,'Komunikaty z przetwarzania'@);
_LOG.win_act(_ws1,,'Menu','Druku&j'@@,,'Drukowanie dokumentów'@,,,,,,,'J',,'icon=print,target=window');
_LOG.win_act(_ws1,,'Formuła','Przeszeregowanie'@@,'#J','Drukowanie przeszeregowania'@,
   "_LOG:=params_get().LOG; exec('h_drukuj_prze','pracownik',{? _LOG.HA<>'' || _LOG.HA || _LOG.HP ?})",,,,,,'P');
_LOG.win_act(_ws1,,'Formuła','Aneks do umowy'@@,'#J','Drukowanie aneksu do umowy'@,
   "_LOG:=params_get().LOG; exec('h_drukuj_anum','pracownik',{? _LOG.HA<>'' || _LOG.HA || _LOG.HP ?})",,,,,,'A');
_id:=_LOG.win_btn(_ws1,'text='+'Druku&j'@+',icon=xwin16.png:190,btn_label_align=center,panel=right,align=begin','Menu');
_LOG.btn_menu(_ws1,_id,'menu:JP');
_LOG.btn_menu(_ws1,_id,'menu:JA');
{? ~_TPAR.AA
|| _LOG.win_act(_ws1,,'Formuła','Wycofaj'@@,,'Wycofanie wprowadzonych zmian'@,
      "  _par:=params_get();
         _LOG:=_par.LOG;
         _TPAR:=_par.TPAR;
         {? _LOG.OK='T' &
            (_LOG.sel_size() | FUN.ask('Czy na pewno chcesz wycofać wprowadzone zmiany przebiegu zatrudnienia?'@))
         || _ok:=0;
            do();
            _txt:='';
            {? _TPAR.P180
:              Jeżeli pracujemy z brudnopisem to wycofanie mamy oprogramowane.
            || {? _LOG.HA<>''
:                 Zmiana typu Popraw+Dołącz - wycofujemy zmiany umowy.
               || {? H_UM.seek(_LOG.H_UM)
                  || _ok:=exec('h_um_cancel','pracownik')
                  || _txt+='Odnalezienie zmienionej umowy nie powiodło się!'
                  ?}
:                 Zmiana typu (tylko) Popraw - wycofujemy zmiany przebiegu.
               || {? H.seek(_LOG.HP)
                  || _ok:=exec('h_cancel_one','pracownik')
                  || _txt+='Odnalezienie zmienionego przebiegu nie powiodło się!'
                  ?}
               ?};
               {? _txt<>''
               || undo()
               ?}

:              Praca bez brudnopisu - wycofanie do samodzielnego oprogramowania.
            || {? _LOG.HA<>''
               || {? ~H.seek(_LOG.HA)
                  || _txt+=
                        'Dostęp do dodanego przebiegu nie jest możliwy.\n'
                        'Wiersz jest zablokowany lub został usunięty.'@
                  |? H.crc()<> _LOG.HA_CRC
                  || _txt+='Dodany przebieg został już zmodyfikowany.'@
                  |? ~H.del(,1)
                  || _txt+='Usunięcie dodanego przebiegu nie powiodło się.'@
                  || _ok:=1
                  ?}
               ?};
               {? _txt<>''
               || undo()

:                 Póki co nie było błędu. Być może dlatego, że to była zmiana typu Popraw (a nie Popraw+Dołącz)
:                 i _LOG.HA, a więc powyższy kod nie był wykonywany. Zakładamy jednak, że jakiś rekord na pewno został
:                 poprawiony (nie będziemy tego sprawdzali).
               || {? ~H.seek(_LOG.HP)
                  || _txt+=
                        'Dostęp do poprawionego przebiegu nie jest możliwy.\n'
                        'Wiersz jest zablokowany lub został usunięty.'@
                  |? H.crc()<> _LOG.HP_CRC
                  || _txt+='Poprawiony przebieg został już zmodyfikowany.'@
                  |? _ok:=1;
                     _uidref:=H.IDLNK;
                     H.cntx_psh();
                     H.use(ref_name(_uidref));
                     H.prefix();
                     {? H.seek(_uidref)
                     || _tmp:=exec('H','buffer');
                        _tmp.get(1)
                     || _ok:=0
                     ?};
                     H.cntx_pop();
                     ~_ok
                  || _txt+='Dostęp do wartości przed zmianami nie powiódł się.'@
:                    W _tmp mamy kopię rekordu z brudnopisu. Nie możemy jednak zmienić wszystkich pól.
:                    Tym, które mają pozostać niezmienione nadajemy wartość pustą.
                  || _tmp.IDADD:=_tmp.IDMOD:=_tmp.IDLNK:=_tmp.UMOWA:=~~;
                     _tmp.set();
                     _ok:=H.put()
                  ?}
               ?}
            ?};
            {? _ok
            || _LOG.OK:='N';
               _LOG.memo_set('Zmiany wycofane przez operatora.\n'@,'STATUS');
               _LOG.put() & _LOG.memo_put(,'STATUS')
            ?};
            {? ~end() & _txt<>''
            || FUN.emsg(_txt+'\nWycofanie zmian niemożliwe.'@)
            ?}
         ?}
      ",,,1,
      "FUN.ask('Czy na pewno chcesz wycofać wprowadzone zmiany przebiegu zatrudnienia zaznaczonych pracowników?'@)"
      ,,'W');
   _LOG.win_btn(_ws1,'text='+'Wycofaj'@+',btn_label_align=center,panel=right,align=begin','menu:W')
?};
_LOG.win_act(_ws1,,'Formuła','Parametry zmian'@@,,
   'Przeglądanie parametrów zmian'@,"params_get().TPAR.display()",,,,,,'P');
_LOG.win_btn(_ws1,'text='+'Parametry zmian'@+',btn_label_align=center,panel=bottom,align=begin','menu:P');
_LOG.win_act(_ws1,,'Szukaj');
_LOG.win_act(_ws1,,'Kolejność');

_we1:=_LOG.mk_edit('Pracownik'@);
_LOG.win_esep(_we1,'Dane podstawowe'@);
_LOG.win_efld(_we1,,'T',,,30,,,,,MS.comment(P,'T'));
_LOG.win_efld(_we1,,'IP',,,30,,,,,MS.comment(P,'IP'));
_LOG.win_efld(_we1,,'NAZWISKO',,,30,,,,,MS.comment(OSOBA,'NAZWISKO'));
_LOG.win_efld(_we1,,'PIERWSZE',,,30,,,,,MS.comment(OSOBA,'PIERWSZE'));
_LOG.win_efld(_we1,,'PESEL',,,30,,,,,MS.comment(OSOBA,'PESEL'));
_LOG.win_efld(_we1,,'OK',,,,,,,,'Zmiana została wprowadzona'@,'check-box',,"'T'","'N'");
_LOG.win_ecol(_we1);
_LOG.win_esep(_we1,'Status operacji'@);
_LOG.win_efld(_we1,,'STATUS',,,80,-6,,,1,'Komunikaty z przetwarzania'@);
_LOG.win_edit(_we1);

: Tabela z informacjami o zmienionych polach.  -------------------------------------------------------------------------
_ZMIANA:=tab_tmp(2,
   'H_UM','STRING[16]','Wskazanie modyfikowanej umowy',
   'LP','INTEGER','Lp.',
   'AKRONIM','STRING[8]','Akronim pola'@,
   'NAZWA','STRING[60]','Nazwa pola'@,
   'WB','STRING[255]','Przed zmianą'@,
   'WA','STRING[255]','Po zmianie'@
);
_ws2:=_ZMIANA.mk_sel('Zmienione wartości'@,'P',,,,,,,'U');
_ZMIANA.win_fld(_ws2,,'NAZWA',,,30,,,,,'Nazwa zmienionego pola'@);
_ZMIANA.win_fld(_ws2,,'WB',,,50,,,,,'Wartość pola przed zmianą'@);
_ZMIANA.win_fld(_ws2,,'WA',,,50,,,,,'Wartość pola po zmianie'@);

_we2:=_ZMIANA.mk_edit('Zmieniona wartość'@);
_ZMIANA.win_esep(_we2,'Pole'@);
_ZMIANA.win_efld(_we2,,'AKRONIM',,,60,,,,,'Akronim zmienionego pola'@);
_ZMIANA.win_efld(_we2,,'NAZWA',,,60,,,,,'Nazwa zmienionego pola'@);
_ZMIANA.win_esep(_we2,'Wartość'@);
_ZMIANA.win_efld(_we2,,'WB',,,60,,,,,'Wartość pola przed zmianą'@);
_ZMIANA.win_efld(_we2,,'WA',,,60,,,,,'Wartość pola po zmianie'@);
_ZMIANA.win_edit(_we2);

: Okno grupowe raportu z przetwarzania.  -------------------------------------------------------------------------------
_mode:='maximized_with_title';

_grp:=_LOG.grp_make('Raport z grupowej aktualizacji zatrudnienia'@,,,,,
:  Przed zamknięciem
   "  FUN.ask(
         {? params_get().TPAR.AA=0
         || 'Zamknięcie okna raportu spowoduje utratę możliwości automatycznego wycofania wprowadzonych zmian.\n'
            'Czy na pewno chcesz kontynuować?'@
         || 'Na pewno chcesz zamknąć okno raportu?'@
         ?}
      )
   ",,'html_maximized');

: U góry pracownicy z ogólnym statusem...
_LOG.grp_sel(_grp,,_ws1,,
:  Po odświeżeniu
   "  _par:=params_get();
      params_set(_par);
      _LOG:=_par.LOG;
      _ag:={? _LOG.sel_size() | _LOG.OK='T' || '' || 'W' ?};
      {? _LOG.OK='T'
      || _pos:=exec('h_mod_pos','pracownik',{? _LOG.HA<>'' || _LOG.HA || _LOG.HP ?},_LOG.H_UM);
         {? _pos=0 | _pos=1
         || _ag+='J(A)'
         ?}
      || _ag+='J'
      ?};
      _LOG.actions_grayed(_par.ws1,_ag);
      grp_disp(_par.ZMIANA,_par.ws2,1,1)
   ",,,,,,,,_mode);

: ... na dole zmienione pola wraz z wartościami.
_LOG.grp_splt(_grp,,'horizontal','zmiany',20);
_LOG.grp_sel(_grp,_ZMIANA,_ws2,,"",,,10,
   "  _par:=params_get();
      _par.ZMIANA.prefix(_par.LOG.H_UM,);
      _par.ZMIANA.first()
   ",,,,_mode);

_LOG.win_sel(_grp);

: Przetwarzanie - operacje na brudnopisie.  ----------------------------------------------------------------------------
_TPAR.P180:=-PAR_SKID.get(180)='t';

UD_TYP.cntx_psh();
UD_TYP.prefix();
UD_SKL.cntx_psh();
UD_TYP.prefix();
H_UM.cntx_psh();
exec('otworz_h_um','pracownik',{? _TPAR.P180 || 'h_u_' || 'h_um' ?});
H_UM.prefix();
H.cntx_psh();
H.use({? _TPAR.P180 || '_his_' || '_hist' ?});
H.index('_HISTKOD');
H.prefix();

:: !!! Jak ~180 wpływa na pozycję w organizacji
{? (GRAKTZAT.WYDZIALA<>_nz | GRAKTZAT.STA<>_nz) & GRAKTZAT.POZWORGA=exec('graktzat_xa_val_fr','!pkd_grp_azat')
|| _TPAR.HNDX:=H.ndx_tmp(,,'POZWORG',,,'OD',,)
?};

_again:=_tab.first();
{!
|? _again
|! {? P.seek(_tab.REF,)
   || {? P.crc()<>_tab.CRC
      || _LOG.blank();
         _LOG.memo_set('Dane pracownika zostały zmienione od momentu zaznaczenia.'@,'STATUS');
         _LOG.add() & _LOG.memo_put(,'STATUS')

      |? ~(_TPAR.P180 | exec('h_um_pull','pracownik',P.ref()))
      || _LOG.blank();
         _LOG.memo_set('Odświeżenie kopii roboczej umów o pracę nie powiodło się.'@,'STATUS');
         _LOG.add() & _LOG.memo_put(,'STATUS')

      || exec('aktualizuj1','!pkd_grp_azat',_TPAR,_LOG,_ZMIANA)
      ?}
   ?};
   P.sel_del();
   _again:=_tab.next()
!};

: Prezentacja raportu.
params_set(
   'TPAR',_TPAR,
   'LOG',_LOG,
   'ws1',_ws1,
   'ZMIANA',_ZMIANA,
   'ws2',_ws2
);
_LOG.select();

{? _TPAR.HNDX<>''
|| H.ndx_drop(_TPAR.HNDX)
?};
H.cntx_pop();
H_UM.cntx_pop();
exec('otworz_h_um','pracownik');
UD_SKL.cntx_pop();
UD_TYP.cntx_pop();

0


\graktzat_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu. Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli
::       GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
: Porządki - zerowanie pól, które są "niedostępne".
_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');

{? GRAKTZAT.WYDZIALA=_nz
|| exec('blank','#field',GRAKTZAT,,'WYDZIALW','WYDZIALF')
|? GRAKTZAT.WYDZIALA=_zf
|| exec('blank','#field',GRAKTZAT,,'WYDZIALW')
|| exec('blank','#field',GRAKTZAT,,'WYDZIALF')

?};

{? GRAKTZAT.STA=_nz
|| exec('blank','#field',GRAKTZAT,,'STW','STF')
|?  GRAKTZAT.STA=_zf
|| exec('blank','#field',GRAKTZAT,,'STW')
|| exec('blank','#field',GRAKTZAT,,'STF')

?};

{? GRAKTZAT.WYDZIALA=_nz & GRAKTZAT.STA=_nz
|| exec('blank','#field',GRAKTZAT,,'POZWORGA')
?};

{? GRAKTZAT.POZWORGA=_nz
|| exec('blank','#field',GRAKTZAT,,'POZWORGW','POZWORGF')
|?  GRAKTZAT.POZWORGA=_zf
|| exec('blank','#field',GRAKTZAT,,'POZWORGW')
|| exec('blank','#field',GRAKTZAT,,'POZWORGF')
?};

{? GRAKTZAT.STA=_nz
|| exec('blank','#field',GRAKTZAT,,'SPA')
?};

{? GRAKTZAT.SPA=_nz
|| exec('blank','#field',GRAKTZAT,,'SPF')
?};

{? GRAKTZAT.CPA=_nz
|| exec('blank','#field',GRAKTZAT,,'CPW','CPF')
|? GRAKTZAT.CPA=_zf
|| exec('blank','#field',GRAKTZAT,,'CPW')
|| exec('blank','#field',GRAKTZAT,,'CPF')

?};

{? GRAKTZAT.MIEJSCEA=_nz
|| exec('blank','#field',GRAKTZAT,,'MIEJSCEW','MIEJSCEF')
|? GRAKTZAT.MIEJSCEA=_zf
|| exec('blank','#field',GRAKTZAT,,'MIEJSCEW')
|| exec('blank','#field',GRAKTZAT,,'MIEJSCEF')
?};

{? GRAKTZAT.PATA=_nz
|| exec('blank','#field',GRAKTZAT,,'PATW','PATF')
|?  GRAKTZAT.PATA=_zf
|| exec('blank','#field',GRAKTZAT,,'PATW')
|| exec('blank','#field',GRAKTZAT,,'PATF')
?};

{? GRAKTZAT.PAWA=_nz
|| exec('blank','#field',GRAKTZAT,,'PAWW','PAWF','PAWZ','PAWP')
|? GRAKTZAT.PAWA=_zf
|| exec('blank','#field',GRAKTZAT,,'PAWW')
|| exec('blank','#field',GRAKTZAT,,'PAWF')
?};

: SxA
{! _lp:=1 .. 3
|! _val:=($('GRAKTZAT.S'+$_lp+'A'))();
   {? _val=_nz
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'W','S'+$_lp+'F','S'+$_lp+'Z','S'+$_lp+'P')
   |? _val=_zf
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'W')
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'F')
   ?}
!};

{? GRAKTZAT.KAA=_nz
|| exec('blank','#field',GRAKTZAT,,'KAW','KAF')
|? GRAKTZAT.KAA=_zf
|| exec('blank','#field',GRAKTZAT,,'KAW')
|| exec('blank','#field',GRAKTZAT,,'KAF')
?};

{? GRAKTZAT.CZYWALA=_nz
|| exec('blank','#field',GRAKTZAT,,'CZYWALW','CZYWALF')
|? GRAKTZAT.CZYWALA=_zf
|| exec('blank','#field',GRAKTZAT,,'CZYWALF')
|| exec('blank','#field',GRAKTZAT,,'CZYWALF')
?};

{! _lp:=2 .. 3
|! _val:=($('GRAKTZAT.S'+$_lp+'TA'))();
   {? _val=_nz
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'TW','S'+$_lp+'TF')
   |? _val=_zf
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'TW')
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'TF')
   ?};

   _val:=($('GRAKTZAT.S'+$_lp+'PA'))();
   {? _val=_nz
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'PW','S'+$_lp+'PF')
   |? _val=_zf
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'PW')
   || exec('blank','#field',GRAKTZAT,,'S'+$_lp+'PF')
   ?};

   _val:=($('GRAKTZAT.CZYWAL'+$_lp+'A'))();
   {? _val=_nz
   || exec('blank','#field',GRAKTZAT,,'CZYWAL'+$_lp+'W','CZYWAL'+$_lp+'F')
   |? _val=_zf
   || exec('blank','#field',GRAKTZAT,,'CZYWAL'+$_lp+'W')
   || exec('blank','#field',GRAKTZAT,,'CZYWAL'+$_lp+'F')
   ?}
!};

{? GRAKTZAT.KADODA=_nz
|| exec('blank','#field',GRAKTZAT,,'KADODW','KADODF')
|? GRAKTZAT.KADODA=_zf
|| exec('blank','#field',GRAKTZAT,,'KADODW')
|| exec('blank','#field',GRAKTZAT,,'KADODF')
?};

{? GRAKTZAT.ZWALA=_nz
|| exec('blank','#field',GRAKTZAT,,'ZWALW','ZWALF')
|? GRAKTZAT.ZWALA=_zf
|| exec('blank','#field',GRAKTZAT,,'ZWALW')
|| exec('blank','#field',GRAKTZAT,,'ZWALF')
?};

{? GRAKTZAT.WALA=_nz
|| exec('blank','#field',GRAKTZAT,,'WALW','WALF')
|? GRAKTZAT.WALA=_zf
|| exec('blank','#field',GRAKTZAT,,'WALW')
|| exec('blank','#field',GRAKTZAT,,'WALF')
?};

1


\graktzat_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('graktzat_modb','!pkd_grp_azat')


\graktzat_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('graktzat_modb','!pkd_grp_azat')


\graktzat_efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Formuła odpowiedzialna za dynamiczne ustawianie właściwości pól tabeli GRAKTZAT.
::       Formuła wywoływana jest w dwóch kontekstach pracy:
::          - Po redagowaniu konkretnego pola, które determinuje właściwości wyświetlania innych pól.
::          - Przed wyświetleniem okna redagowania (przed właściwymi akcjami Dołącz, Popraw, Wyświetl), ustawia
::            właściwości wszystkich pól (wymagających tego).
::       Kontekst pracy jest określany na podstawie argumentu wywołania.
::   WE: [_a] [STRING] - Kontekst pracy:
::             '1' - Obsługa jednego pola [domyślnie].
::             '*' - Obsługa wszystkich pól.
::       [_b] [TABLE]  - Uchwyt tabeli, w oknie redagowania której znajdują sie pola. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęta bieżąca tabela.
::       [_c] [STRING] - Akronim okna, w którym mają być ustawione właściwości pól. Jeżeli _a='1', parametr jest
::             opcjonalny - zostanie przyjęte bieżące okno.
::       [_d] [STRING] - Akronim pola, którego wartość determinuje właściwości wyświetlania innych pól. Parametr ma
::             znaczenie wyłącznie dla _a='1'. [Domyślnie: bieżące pole].
::   WY: 0 - Błąd argumentów wywołania.
::       1 - Argumenty poprawne (właściwości ustawione).
::----------------------------------------------------------------------------------------------------------------------
_tryb:={? var_pres('_a')=type_of('') & (_a='1' | _a='*') || _a || '1' ?};
{? var_pres('_b')=type_of(SYSLOG)
|| _tab:=_b
|? _tryb='1'
|| _tab:=cur_tab(1,1)
|| return(0)
?};
{? var_pres('_c')=type_of('')
|| _we:=_c
|? _tryb='1'
|| _we:=cur_win(1,1)
|| return(0)
?};
{? var_pres('_d')=type_of('')
|| _fld:=_d
|? _tryb='1'
|| _fld:=cur_afld()
|| _fld:=''
?};

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');

{? _fld='' | _fld='WYDZIALA'
|| GAZ.WYDZIAL:=_tab.WYDZIALA<>_nz;
   _sval:=$(_tab.WYDZIALA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'WYDZIALW');
   _tab.efld_opt(_we,'mark='+_sval,,'WYDZIALW');
   _sval:=$(_tab.WYDZIALA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'WYDZIALF');
   _tab.efld_opt(_we,'mark='+_sval,,'WYDZIALF')
?};

{? _fld='' | _fld='STA'
|| GAZ.ST:=_tab.STA<>_nz;
   _sval:=$(_tab.STA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'STW');
   _tab.efld_opt(_we,'mark='+_sval,,'STW');
   _sval:=$(_tab.STA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'STF');
   _tab.efld_opt(_we,'mark='+_sval,,'STF');
   _sval:=$GAZ.ST;
   _tab.efld_opt(_we,'enable='+_sval,,'SPA');
   {? _fld<>''
   || exec('graktzat_efld_opt','!pkd_grp_azat','1',_tab,_we,'SPA')
   ?}
?};

{? _fld='' | _fld='WYDZIALA' | _fld='STA'
|| _sval:=$((_tab.WYDZIALA<>_nz | _tab.STA<>_nz) & -PAR_SKID.get(313)='t');
   _tab.efld_opt(_we,'enable='+_sval,,'POZWORGA');
   {? _fld<>''
   || exec('graktzat_efld_opt','!pkd_grp_azat','1',_tab,_we,'POZWORGA')
   ?}
?};

{? _fld='' | _fld='POZWORGA'
|| _war:=(_tab.WYDZIALA<>_nz | _tab.STA<>_nz) & -PAR_SKID.get(313)='t';
   GAZ.POZWORG:=_war & _tab.POZWORGA<>_nz;
   _sval:=$(_war & _tab.POZWORGA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'POZWORGW');
   _tab.efld_opt(_we,'mark='+_sval,,'POZWORGW');
   _sval:=$(_war & _tab.POZWORGA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'POZWORGF');
   _tab.efld_opt(_we,'mark='+_sval,,'POZWORGF')
?};

{? _fld='' | _fld='SPA'
|| _war:=_tab.STA<>_nz;
   GAZ.SP:=_war & _tab.SPA<>_nz;
   _sval:=$(_war & _tab.SPA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'SPF');
   _tab.efld_opt(_we,'mark='+_sval,,'SPF')
?};

{? _fld='' | _fld='CPA'
|| GAZ.CP:=_tab.CPA<>_nz;
   _sval:=$(_tab.CPA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'CPW');
   _tab.efld_opt(_we,'mark='+_sval,,'CPW','CP');
   _sval:=$(_tab.CPA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'CPF');
   _tab.efld_opt(_we,'mark='+_sval,,'CPF')
?};

{? _fld='' | _fld='MIEJSCEA'
|| GAZ.MIEJSCE:=_tab.MIEJSCEA<>_nz;
   _sval:=$(_tab.MIEJSCEA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'MIEJSCEW');
   _tab.efld_opt(_we,'mark='+_sval,,'MIEJSCEW');
   _sval:=$(_tab.MIEJSCEA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'MIEJSCEF');
   _tab.efld_opt(_we,'mark='+_sval,,'MIEJSCEF')
?};

{? _fld='' | _fld='PATA'
|| GAZ.PAT:=_tab.PATA<>_nz;
   _sval:=$(_tab.PATA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'PATW');
   _sval:=$(_tab.PATA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'PATF');
   _tab.efld_opt(_we,'mark='+_sval,,'PATF')
?};

{? _fld='' | _fld='PAWA'
|| GAZ.PAW:=_tab.PAWA<>_nz;
   _sval:=$(_tab.PAWA<>_nz & _tab.PAWA<>_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'PAWW');
   _tab.efld_opt(_we,'mark='+_sval,,'PAWW');
   _sval:=$(_tab.PAWA<>_nz);
   _tab.efld_opt(_we,'enable='+_sval,,'PAWZ');
   _tab.efld_opt(_we,'enable='+_sval,,'PAWP');
   _sval:=$(_tab.PAWA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'PAWF');
   _tab.efld_opt(_we,'mark='+_sval,,'PAWF')
?};

: SxA
{! _lp:=1 .. 3
|! {? _fld='' | _fld='S'+$_lp+'A'
   || _val:=($('_a.S'+$_lp+'A'))(_tab);
      ($('GAZ.S'+$_lp+':=_a'))(_val<>_nz);
      _sval:=$(_val<>_nz & _val<>_zf);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'W');
      _sval:=$((_lp=1 | _val<>_pw) & _val<>_nz & _val<>_zf);
      _tab.efld_opt(_we,'mark='+_sval,,'S'+$_lp+'W');
      _sval:=$(_val<>_nz);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'Z');
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'P');
      _sval:=$(_val=_zf);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'F');
      _tab.efld_opt(_we,'mark='+_sval,,'S'+$_lp+'F')
   ?}
!};

{? _fld='' | _fld='KAA'
|| GAZ.KA:=_tab.KAA<>_nz;
   _sval:=$(_tab.KAA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'KAW');
   _sval:=$(_tab.KAA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'KAF');
   _tab.efld_opt(_we,'mark='+_sval,,'KAF')
?};

{? _fld='' | _fld='CZYWALA'
|| GAZ.CZYWAL:=_tab.CZYWALA<>_nz;
   _sval:=$(_tab.CZYWALA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'CZYWALW');
   _sval:=$(_tab.CZYWALA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'CZYWALF');
   _tab.efld_opt(_we,'mark='+_sval,,'CZYWALF')
?};

{! _lp:=2 .. 3
:  SxTA
|! {? _fld='' | _fld='S'+$_lp+'TA'
   || _val:=($('_a.S'+$_lp+'TA'))(_tab);
      ($('GAZ.S'+$_lp+'T:=_a'))(_val<>_nz);
      _sval:=$(_val=_pw);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'TW');
      _sval:=$(_val=_zf);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'TF');
      _tab.efld_opt(_we,'mark='+_sval,,'S'+$_lp+'TF')
   ?};
:  SxPA
   {? _fld='' | _fld='S'+$_lp+'PA'
   || _val:=($('_a.S'+$_lp+'PA'))(_tab);
      ($('GAZ.S'+$_lp+'P:=_a'))(_val<>_nz);
      _sval:=$(_val=_pw);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'PW');
      _tab.efld_opt(_we,'mark='+_sval,,'S'+$_lp+'PW','NAZWA');
      _sval:=$(_val=_zf);
      _tab.efld_opt(_we,'enable='+_sval,,'S'+$_lp+'PF');
      _tab.efld_opt(_we,'mark='+_sval,,'S'+$_lp+'PF')
   ?};
:  CZYWALxA
   {? _fld='' | _fld='CZYWAL'+$_lp+'A'
   || _val:=($('_a.CZYWAL'+$_lp+'A'))(_tab);
      ($('GAZ.CZYWAL'+$_lp+':=_a'))(_val<>_nz);
      _sval:=$(_val=_pw);
      _tab.efld_opt(_we,'enable='+_sval,,'CZYWAL'+$_lp+'W');
      _sval:=$(_val=_zf);
      _tab.efld_opt(_we,'enable='+_sval,,'CZYWAL'+$_lp+'F');
      _tab.efld_opt(_we,'mark='+_sval,,'CZYWAL'+$_lp+'F')
   ?}
!};

{? _fld='' | _fld='KADODA'
|| GAZ.KADOD:=_tab.KADODA<>_nz;
   _sval:=$(_tab.KADODA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'KADODW');
   _sval:=$(_tab.KADODA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'KADODF');
   _tab.efld_opt(_we,'mark='+_sval,,'KADODF')
?};

{? _fld='' | _fld='ZWALA'
|| GAZ.ZWAL:=_tab.ZWALA<>_nz;
   _sval:=$(_tab.ZWALA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'ZWALW');
   _tab.efld_opt(_we,'mark='+_sval,,'ZWALW');
   _sval:=$(_tab.ZWALA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'ZWALF');
   _tab.efld_opt(_we,'mark='+_sval,,'ZWALF')
?};

{? _fld='' | _fld='WALA'
|| GAZ.WAL:=_tab.WALA<>_nz;
   _sval:=$(_tab.WALA=_pw);
   _tab.efld_opt(_we,'enable='+_sval,,'WALW');
   _tab.efld_opt(_we,'mark='+_sval,,'WALW');
   _sval:=$(_tab.WALA=_zf);
   _tab.efld_opt(_we,'enable='+_sval,,'WALF');
   _tab.efld_opt(_we,'mark='+_sval,,'WALF')
?};

1


\graktzat_xa_val_nz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "nie zmieniaj".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'**'


\graktzat_xa_val_pw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "przypisz (konkretną) wartość (kwotę)".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'=='


\graktzat_xa_val_dw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "dodaj wartość (kwotę)".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'+$'


\graktzat_xa_val_dp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "dodaj procent".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'+%'


\graktzat_xa_val_ow
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "odejmij wartość (kwotę)".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'-$'


\graktzat_xa_val_op
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "odejmij procent".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'-%'


\graktzat_xa_val_zf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "zmień wg formuły".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'$$'


\graktzat_xa_val_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "wyzeruj".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'BL'


\graktzat_xa_val_fi
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "pierwsza".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'FI'


\graktzat_xa_val_fr
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Jedna z możliwych wartości pól GRAKTZAT.xA (akcja), tutaj "(pierwsza) wolna".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
'FR'


\graktzat_x_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed redagowaniem pól tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_acr:=cur_afld();

_memo:=var_pres(_acr,GRAKTZAT)=36;
GRAKTZAT.btn_eopt('RED','POMOC','state='+{? _memo || 'normal' || 'grayed' ?});

params_get().pole.acr:=_acr;

{? _acr='S2PW' | _acr='S3PW'
|| exec('fl_rodz','formula','P')
|? _acr='STW'
|| exec('_stn_st_be','stanprac')
?};

1


\graktzat_xa_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pól GRAKTZAT.xA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('graktzat_efld_opt','!pkd_grp_azat')


\graktzat_wydzialw_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Po redagowaniu pola GRAKTZAT.WYDZIALW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=exec('ud_skl_symbol_ae','schemat','PODZORG','PKD');
_ref<>null() | GRAKTZAT.WYDZIALW=''


\graktzat_kaw_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa przycisku KAW_LISTA przy polu GRAKTZAT.KAW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('f3_select_distinct','#field',H,'KA')


\graktzat_kadodw_lista
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa przycisku KAWDODW_LISTA przy polu GRAKTZAT.KAW.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('f3_select_distinct','#field',H,'KADOD')


\graktzat_red_pomoc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa przycisku Wskazówki w oknie RED tabeli GRAKTZAT.
::   WE:
::   WY:
:: ~OST: INWEBBROWSER
::----------------------------------------------------------------------------------------------------------------------
_acr:=params_get().pole.acr;

_tr:=obj_new('patt','repl','run');
_tr.patt:=spli_str('\'| ','|');
_tr.repl:=spli_str('&apos;|&nbsp;','|');
_tr.run:="gsub(_a,.patt,.repl)+{? var_pres('_b')=type_of(0) & _b || '<br/>' || '' ?}";


_body:=
   {? _acr='WYDZIALF'
   || 'symbol jednostki organizacyjnej lub wskazanie na nią [%1].'['UD_SKL.ref()']
   |? _acr='STF'
   || 'nazwa stanowiska lub wskazanie na nie [%1].'@['STN.ref()']
   |? _acr='POZWORGF'
   || 'kod pozycji w organizacji lub wskazanie na niego [%1], '
      'właściwe dla jednostki organizacyjnej i stanowiska po zmianie.'@['POZWORG.ref()']
   |? _acr='SPF'
   || ':<dl>'
      '<dt>T</dt><dd>'+'jeżeli praca w szczególnych warunkach lub w szczególnym charakterze;'@+'</dd>'
      '<dt>N</dt><dd>'+'w przeciwnym wypadku.'@+'</dd>'
      '</dl>'
   |? _acr='CPF'
   || _tr.run('symbol charakteru pracy (np. \'UMY/UMY\') lub wskazanie na nie [%1].'@['CP.ref()'])
   |? _acr='MIEJSCEF'
   || 'nazwa miejsca wykonywania pracy.'@
   |? _acr='PATF'
   || 'kod trybu ustalania przychodu z praw autorskich:'@+
      '<dl>'
      '<dt>N</dt><dd>'+'Nie dotyczy;'@+'</dd>'
      '<dt>K</dt><dd>'+'Kwota;'@+'</dd>'
      '<dt>P</dt><dd>'+'Procent;'@+'</dd>'
      '<dt>G</dt><dd>'+'wg Godzin.'@+'</dd>'
      '</dl>'
   |? _acr='PAWF' | _acr='S1F' | _acr='S2F' | _acr='S3F'
   || 'wartość liczbowa.'@
   |? _acr='CZYWALF' | _acr='CZYWAL2F' | _acr='CZYWAL3F'
   || ':<dl>'
      '<dt>T</dt><dd>'+'jeżeli kwota ma być wyrażona w walucie obcej;'@+'</dd>'
      '<dt>N</dt><dd>'+'jeżeli kwota nie ma być wyrażona w walucie obcej.'@+'</dd>'
      '</dl>'
   |? _acr='KAF' | _acr='KADODF'
   || 'symbol kategorii (dowolny napis).'@
   |? _acr='S2TF' | _acr='S3TF'
   || ':<dl>'
      '<dt>P</dt><dd>'+'jeżeli wartość ma być wyrażony procentowo;'@+'</dd>'
      '<dt>K</dt><dd>'+'jeżeli wartość ma być wyrażona kwotowo.'@+'</dd>'
      '</dl>'
   |? _acr='S2PF' | _acr='S3PF'
   || _tr.run('nazwa formuły obliczeniowej rodzaju \'P\' lub wskazanie na nią [%1].'@['FORMULA.ref()'])
   |? _acr='ZWALF'
   || 'kod banku dla tabeli kursów (z systemowego słownika banków) lub wskazanie na niego [%1].'@['SLO.ref()']
   |? _acr='WALF'
   || 'kod waluty (z systemowego słownika walut) lub wskazanie na nią [%1].'@['SLO.ref()']
   || ''
   ?};
{? _body<>''
|| _body:=
      '<h2>'+'Oczekiwany wynik formuły'@+'</h2>'
      '<p>Wynikiem formuły musi być%1%2</p>'@ [{? 1+_body=':' || '' || ' ' ?},_body]
?};
_body:=
   '<h1>%1</h1>'[MS.name(GRAKTZAT,_acr)]+_body+
   '<h2>'+'Opis środowiska'@+'</h2>'+
   'Formuła będzie wykonywana:'@+
   '<ul>'
   '<li>'+'z poziomu obowiązującego na dzień zmiany wiersza przebiegu zatrudnienia;'@+'</li>'+
   '<li>'+'w transakcji - nie można zatem używać określonych funkcji, m.in. dialogowych.'@+'</li>'+
   '</ul>'
   '<p>'+
   'Do formuły jest przekazywany argument (_a) będący tablicą z elementami nazwanymi. '
   'Akronimy elementów są zgodne z akronimami pól tabeli H. '
   'Jeżeli dane pole nie zostało zmienione w ramach bieżącej definicji, '
   'to odpowiadający mu element tablicy będzie miał wartość typu pustego (~~).'@+
   '</p>'
   '<p>'+
   'Nowe wartości są nadawane polom w kolejności ich występowania w bieżącym '
   'oknie dialogowym. Ma to wpływ na dostępność wartości elementów zmiennej _a.'@+
   '</p>'
   '<p>'+
   'Zmiana kontekstu lub zawartości bufora dowolnej tabeli lub elementów tablicy '
   'przekazanej argumentem (_a) może doprowadzić do nieoczekiwanych wyników '
   'z błędnym działaniem włącznie.'@+
   '</p>'
   '<p>'+
   'Rezultat formuły nie jest weryfikowany po redagowaniu pola - zostanie sprawdzony '
   'dopiero w momencie zastosowania definicji (grupowej aktualizacji danych).'@+
   '</p>';

_html:=
   '<html>'
      '<head>'
         '<style>'
            'ol { counter-reset: item;}'
            'ol > li { counter-increment: item; }'
            'ol ol > li { display: block; }'
            'ol ol > li:before { content: counters(item, ".") ". "; margin-left: -20px; }'
         '</style>'
         '<meta charset="UTF-8">'
      '</head>'
      '<body>%1</body>'
   '</html>'[_body];

_interm:=exec('interm','#system');
_acr:='HELP%1'[$_interm];
{? (_wctr:=__WND.EDIT.get(GRAKTZAT,_acr))=''
|| _wctr:=GRAKTZAT.mk_ctr('Zestaw aktualizacji - wskazówki'@,'#graktzat_help',10,5,100,28);
   {? _interm
   || GRAKTZAT.win_cctr(_wctr,'ctr_help','@webframe')
   || GRAKTZAT.win_cctr(_wctr,'ctr_help','@webbrowser',1)
   ?};
   __WND.EDIT.put(GRAKTZAT,_acr,_wctr)
?};
GRAKTZAT.win_ctr(_wctr);
GRAKTZAT.control(,,$(
   {? ~_interm
   || "ctr_set(,'ctr_help','setButtonBarVisible','false');
      ctr_set(,'ctr_help','setLocationBarVisible','false');
      ctr_set(,'ctr_help','setStatusBarVisible','false');
      ctr_set(,'ctr_help','closeAfterEscape','true');"
   || ""
   ?}+
   "ctr_set(,'ctr_help','setHTMLContent','"+_html+"')"
));

'edit:'+_acr


\graktzat_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
GRAKTZAT.blank();
exec('graktzat_efld_opt','!pkd_grp_azat','*',GRAKTZAT,'RED')


\graktzat_da
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - po" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
GRAKTZAT.f_add();
0


\graktzat_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('graktzat_efld_opt','!pkd_grp_azat','*',GRAKTZAT,'RED')


\graktzat_pa
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Popraw - po" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
GRAKTZAT.f_rfresh()


\graktzat_ob
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Kopiuj - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('graktzat_efld_opt','!pkd_grp_azat','*',GRAKTZAT,'RED');
GRAKTZAT.USER:=OPERATOR.USER;
{? GRAKTZAT.edit("exec('graktzat_ae','!pkd_grp_azat')") & GRAKTZAT.add()
|| {! _lp:=1 .. GRAKTZAT.fld_num()
   |! _acr:=GRAKTZAT.fld_acr(_lp);
      {? var_pres(_acr,GRAKTZAT)=36
      || GRAKTZAT.memo_put(,_acr)
      ?}
   !};
   GRAKTZAT.f_add()
?}


\graktzat_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wyświetl - przed" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('graktzat_efld_opt','!pkd_grp_azat','*',GRAKTZAT,'RED');
GRAKTZAT.display()


\check_memo
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Weryfikacja formuły zapisanej w polu typu SYS_MEMO.
::   WE: _a - Akronim pola typu SYS_MEMO z formuła do weryfikacji.
::   WY: '' jeżeli walidacja pozytywna, akronim pola jeżeli walidacja negatywna.
::----------------------------------------------------------------------------------------------------------------------
_acr:=_a;

_name:=MS.name('GRAKTZAT',_acr);

{? GRAKTZAT.memo_txt(,0,_acr)=''
|| __CHK.err_empty(_name);
   return(_acr)
?};

: Zawartość notatki musi się dać zapisać do zmiennej - tekst nie może być za długi.
_fml:=GRAKTZAT.memo_txt(0,0,_acr);
{? +_fml<>+GRAKTZAT.memo_txt(1,0,_acr)+1
|| FUN.emsg('Przekroczono dopuszczalną liczbę znaków w polu "%1"'@ [_name]);
   return(_acr)
?};

: Weryfikacja poprawności składni.
_tab:=form_chk($_fml);
{? _tab.first()
|| FUN.emsg(
      'Formuła w polu "%1" ma nieprawidłową składnię.\n\n'
      'Linia: %2\nKolumna: %3\n%4\n\n'
      'Należy poprawić treść formuły.'@ [_name,$_tab.ERR_LINE,$_tab.ERR_COL,_tab.ERR_DESC]
   );
   return(_acr)
?};

: Wszystko OK.
''


\check_w2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Weryfikacja sekcji opartej na wartości i formule.
::   WE: _a - Akronim pola ze statusem.
::       _b - Akronim pola z wartością.
::       _c - Akronim pola z formułą.
::       _d - Czy pole z wartością musi być wypełnione:
::            0 - Nie;
::            1 - Tak.
::   WY: '' jeżeli walidacja pozytywna, akronim pola jeżeli walidacja negatywna.
::----------------------------------------------------------------------------------------------------------------------
_acra:=_a;
_acrw:=_b;
_acrf:=_c;
_checkw:=_d;

_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');

_vala:=($('GRAKTZAT.'+_acra))();
{? _checkw & _vala=_pw & (_chk:=__CHK.record(GRAKTZAT,,_acrw))<>''
|| return(_chk)
|? _vala=_zf & (_chk:=exec('check_memo','!pkd_grp_azat',_acrf,))<>''
|| return(_chk)
?};

''


\check_w7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Weryfikacja sekcji opartej na wartości liczbowej z możliwością wyboru sposobu zmiany.
::   WE: _a - Akronim pola ze statusem.
::       _b - Akronim pola z wartością liczbową.
::       _c - Akronim pola z formułą.
::       _d - Akronim pola z precyzją.
::       _e - Pole z wartością liczbową nie może być ujemne. A czy musi być wypełnione
::             (zawierać wartość większą od zera)?
::            0 - Nie musi być wypełnion (może być 0);
::            1 - Tak, nie może zawierać wartości 0;
::   WY: '' jeżeli walidacja pozytywna, akronim pola jeżeli walidacja negatywna.
::----------------------------------------------------------------------------------------------------------------------
_acra:=_a;
_acrw:=_b;
_acrf:=_c;
_acrp:=_d;
_checkw:=_e;

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');
_op:=exec('graktzat_xa_val_op','!pkd_grp_azat');

_vala:=($('GRAKTZAT.'+_acra))();
{? _vala<>_nz & _vala<>_zf
|| _valw:=($('GRAKTZAT.'+_acrw))();
   _namew:=MS.name('GRAKTZAT',_acrw);
   {? (_checkw | _vala<>_pw) & (_chk:=__CHK.record(GRAKTZAT,,_acrw))<>''
   || return(_chk)
   |? _valw<0
   || FUN.emsg('"%1" nie może przyjmować wartości ujemnych.'@ [_namew]);
      return(_acrw)
   |? _vala=_op & _checkw & _valw>=100
   || FUN.emsg('"%1" musi być mniejsze od 100.'@ [_namew]);
      return(_acrw)
   |? _vala=_op & ~_checkw & _valw>100
   || FUN.emsg('"%1" nie może być większe niż 100.'@ [_namew]);
      return(_acrw)
   ?};
   _valp:=($('GRAKTZAT.'+_acrp))();
   _namep:=MS.name('GRAKTZAT',_acrp);
   {? _valp<-5 | _valp>2
   || FUN.emsg('"%1" musi być większa od -6 i mniejsza od 3.'@ [_namep]);
      return(_acrp)
   ?}
|? _vala=_zf & (_chk:=exec('check_memo','!pkd_grp_azat',_acrf,0))<>''
|| return(_acrf)
?};

''


\check_wal
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Weryfikacja zmienianej walutowości (kompletności danych).
::   WE: _a - Akronim pola ze statusem.
::       _b - Akronim pola z wartością.
::       _c - Akronim pola z formułą.
::       _d - Nazwa składnika wynagrodzenia (w dopełniaczu).
::   WY: '' jeżeli walidacja pozytywna, akronim pola jeżeli walidacja negatywna.
::----------------------------------------------------------------------------------------------------------------------
_acra:=_a;
_acrw:=_b;
_acrf:=_c;
_name:=_d;

{? (_chk:=exec('check_w2','!pkd_grp_azat',_acra,_acrw,_acrf,0))<>''
|| return(_chk)
?};

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');

_vala:=($('GRAKTZAT.'+_acra))();
_valw:=($('GRAKTZAT.'+_acrw))();

{? ((_vala=_pw & _valw='T') | _vala=_zf) &
   (GRAKTZAT.ZWALA=_nz | (GRAKTZAT.ZWALA=_pw & GRAKTZAT.ZWALW=null()) |
    GRAKTZAT.WALA=_nz | (GRAKTZAT.WALA=_pw & GRAKTZAT.WALW=null()))
|| FUN.emsg(
      'Zaznaczono zmianę waluty %1 a nie określono tabeli kursów i/lub waluty.\n'@ [_name]+
      'Należy poprawić definicję.'@
   );
   return(_acra)
?};

''


\check_proc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Walidacja typu (procent/kwota) i wartości dla dodatków.
::   WE: _a - Akronim pola status typu.
::       _b - Akronim pola wartość typu
::       _c - Akronim pola status podstawy.
::       _d - Nazwa składnika (w dopełniaczu).
::   WY: '' jeżeli walidacja pozytywna, akronim pola jeżeli walidacja negatywna.
::----------------------------------------------------------------------------------------------------------------------
_acrta:=_a;
_acrtw:=_b;
_acrpa:=_c;
_name:=_d;

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');
_bl:=exec('graktzat_xa_val_bl','!pkd_grp_azat');

_valta:=($('GRAKTZAT.'+_acrta))();
_valtw:=($('GRAKTZAT.'+_acrtw))();
_valpa:=($('GRAKTZAT.'+_acrpa))();

{? ((_valta=_pw & _valtw='P') | _valta=_zf) & _valpa=_nz
|| FUN.emsg(
      'Zaznaczono zmianę typu %1 a nieokreślona została podstawa.\n'@ [_name]+
      'Należy poprawić definicję.'@
   );
   return(_acrpa)
?};

''


\graktzat_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Rekord - po" dla tabeli GRAKTZAT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_put:=(-menu_txt()='popraw');

_chk:=__CHK.table(GRAKTZAT,_put,,'NAZWA');
{? (type_of(_chk)=type_of('') & _chk<>'') |
   (type_of(_chk)=type_of(0) & ~_chk)
|| return(_chk)
?};

_nz:=exec('graktzat_xa_val_nz','!pkd_grp_azat');
_pw:=exec('graktzat_xa_val_pw','!pkd_grp_azat');
_zf:=exec('graktzat_xa_val_zf','!pkd_grp_azat');
_bl:=exec('graktzat_xa_val_bl','!pkd_grp_azat');

: Czy cokolwiek będzie zmieniane?
{? GRAKTZAT.WYDZIALA=_nz & GRAKTZAT.STA=_nz & GRAKTZAT.CPA=_nz & GRAKTZAT.MIEJSCEA=_nz &
   GRAKTZAT.ZWALA=_nz & GRAKTZAT.WALA=_nz &
   GRAKTZAT.S1A=_nz & GRAKTZAT.KAA=_nz & GRAKTZAT.CZYWALA=_nz &
   GRAKTZAT.S2A=_nz & GRAKTZAT.S2TA=_nz & GRAKTZAT.S2PA=_nz & GRAKTZAT.KADODA=_nz & GRAKTZAT.CZYWAL2A=_nz &
   GRAKTZAT.S3A=_nz & GRAKTZAT.S3TA=_nz & GRAKTZAT.S3PA=_nz & GRAKTZAT.CZYWAL3A=_nz &
   GRAKTZAT.PATA=_nz & GRAKTZAT.PAWA=_nz
|| FUN.emsg('Żaden z elementów przebiegu zatrudnienia nie został wybrany do zmiany.'@);
   return(0)
?};

: Weryfikacja wypełnienia pól  -----------------------------------------------------------------------------------------

: Jednostka / stanowisko
{? (_chk:=exec('check_w2','!pkd_grp_azat','WYDZIALA','WYDZIALW','WYDZIALF',1))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','STA','STW','STF',1))<>''
|| return(_chk)
|? (GRAKTZAT.WYDZIALA<>_nz | GRAKTZAT.STA<>_nz) &
   (_chk:=exec('check_w2','!pkd_grp_azat','POZWORGA','POZWORGW','POZWORGF',1))<>''
|| return(_chk)
|? (GRAKTZAT.WYDZIALA<>_nz | GRAKTZAT.STA<>_nz) &
   -PAR_SKID.get(180)='n' & -PAR_SKID.get(313)='t' &
   (GRAKTZAT.POZWORGA=_nz | GRAKTZAT.POZWORGA=_bl)
|| FUN.emsg(
      'Parametr 180 - "%1" jest wyłączony.\n'@ [PAR_SKID.opis(180)]+
      'Pozycja w organizacji musi zostać określona.\n'@+
      'Sposób zmiany nie może być ustawiony ani na "Nie zmieniaj" ani na "Wyczyść".'@
   );
   return('POZWORGA')
|? GRAKTZAT.STA<>_nz & GRAKTZAT.SPA=_zf & (_chk:=exec('check_memo','!pkd_grp_azat','SPF',))<>''
|| return(_chk)
?};

: Charakter / miejsce pracy
{? (_chk:=exec('check_w2','!pkd_grp_azat','CPA','CPW','CPF',1))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','MIEJSCEA','MIEJSCEW','MIEJSCEF',1))<>''
|| return(_chk)
?};

: Przychód z praw autorskich
{? (_chk:=exec('check_w2','!pkd_grp_azat','PATA','PATW','PATF',0))<>''
|| return(_chk)
|? ((GRAKTZAT.PATA=_pw & GRAKTZAT.PATW<>'N') | GRAKTZAT.PATA=_zf) & GRAKTZAT.PAWA=_nz
|| FUN.emsg(
      'Określony został tryb ustalania przychodu z praw autorskich, '
      'ale nie wskazano sposobu zmiany wartości bazowej.\n'@+
      'Należy poprawić definicję.'@
   );
   return('PAWA')
|? GRAKTZAT.PATA=_pw & GRAKTZAT.PATW='N' & GRAKTZAT.PAWA<>_nz
|| FUN.emsg(
      'Tryb ustalania przychodu z praw autorskich został ustawiony na "Nie dotyczy".\n'
      'Określanie wartości bazowej jest zbędne.'@
   );
   return('PAWA')
|? (_chk:=exec('check_w7','!pkd_grp_azat','PAWA','PAWW','PAWF','PAWP',1))<>''
|| return(_chk)
?};

: Płaca zasadnicza
{? (_chk:=exec('check_w7','!pkd_grp_azat','S1A','S1W','S1F','S1P',1))<>''
|| return(_chk)
|? (_chk:=exec('check_wal','!pkd_grp_azat','CZYWALA','CZYWALW','CZYWALF','płacy zasadniczej'))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','KAA','KAW','KAF',0))<>''
|| return(_chk)
?};

: Dodatek funkcyjny
{? (_chk:=exec('check_w7','!pkd_grp_azat','S2A','S2W','S2F','S2P',0))<>''
|| return(_chk)
|? (_chk:=exec('check_wal','!pkd_grp_azat','CZYWAL2A','CZYWAL2W','CZYWAL2F','dodatku funkcyjnego'))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','S2TA','S2TW','S2TF',0))<>''
|| return(_chk)
|? (_chk:=exec('check_proc','!pkd_grp_azat','S2TA','S2TW','S2PA','dodatku funkcyjnego'))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','S2PA','S2PW','S2PF',1))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','KADODA','KADODW','KADODF',0))<>''
|| return(_chk)
?};

: Dodatek
{? (_chk:=exec('check_w7','!pkd_grp_azat','S3A','S3W','S3F','S3P',0))<>''
|| return(_chk)
|? (_chk:=exec('check_wal','!pkd_grp_azat','CZYWAL3A','CZYWAL3W','CZYWAL3F','dodatku'))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','S3TA','S3TW','S3TF',0))<>''
|| return(_chk)
|? (_chk:=exec('check_proc','!pkd_grp_azat','S3TA','S3TW','S3PA','dodatku'))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','S3PA','S3PW','S3PF',1))<>''
|| return(_chk)
?};

: Wynagrodzenie w walucie
{? (_chk:=exec('check_w2','!pkd_grp_azat','ZWALA','ZWALW','ZWALF',1))<>''
|| return(_chk)
|? (_chk:=exec('check_w2','!pkd_grp_azat','WALA','WALW','WALF',1))<>''
|| return(_chk)
?};

: Ostrzeżenia związane z merytoryką  -----------------------------------------------------------------------------------

: Tablica ostrzeżeń
_TW:=tab_tmp(1,
   'LP','INTEGER','Lp.'@,
   'TXT','SYS_MEMO','Treść'@
);
_add:=
   "  _TW:=_a;
      _lp:=_TW.size()+1;
      _TW.blank();
      _TW.LP:=_lp;
      _TW.memo_set(_b,'TXT');
      _TW.add() & _TW.memo_put(,'TXT')
   ";

{? GRAKTZAT.CPA<>_nz & GRAKTZAT.S1A=_nz
|| _add(_TW,
      'Zaznaczono zmianę charakteru pracy a nie zmienia się płaca zasadnicza.\n'@+
      'Jeżeli zmiana nie dotyczy sposobu wynagradzania (stawka godzinowa / wynagrodzenie miesięczne), '
      'to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak zmiana charakteru pracy związana jest ze zmianą sposobu wynagradzania to '
      'pozostawienie dotychczasowej płacy zasadniczej może doprowadzić do nieplanowanej zmiany wynagrodzenia.'@
   )
?};

{? GRAKTZAT.PAWA<>_nz & GRAKTZAT.PATA=_nz
|| _add(_TW,
      'Zaznaczono zmianę wartości bazowej przychodu z praw autorskich a nie zmienia się jego tryb ustalania.\n'@+
      'Jeżeli definicja dotyczy zmiany już istniejących wartości, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma wprowadzić możliwość odliczania preferencyjnych kosztów od przychodów z '
      'tytułu praw autorskich, to należy określić jeszcze tryb ustalania tych przychodów.'@
   )
?};

{? GRAKTZAT.CZYWALA<>_nz & GRAKTZAT.S1A=_nz
|| _add(_TW,
      'Zaznaczono zmianę waluty płacy zasadniczej a nie zmienia się jej wartość.\n'@+
      'W zależności od róznicy kursu waluty przed i po zmianie oznacza to niejawną, realną '
      'zmianę tego elementu wynagrodzenia.'@
   )
?};

{? GRAKTZAT.KAA=_pw & GRAKTZAT.KAW=''
|| _add(_TW,
      'Zaznaczono zmianę kategorii płacy zasadniczej a nie podano jej wartości.\n'@+
      'Jeżeli definicja dotyczy usunięcia informacji o kategorii, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma zmienić lub wprowadzić informację o kategorii należy podać jej wartość.'@
   )
?};

{? GRAKTZAT.S2A=_pw & GRAKTZAT.S2W=0
|| _add(_TW,
      'Zaznaczono przypisanie dodatkowi funkcyjnemu wartości 0.\n'@+
      'Jeżeli definicja dotyczy rezygnacji z wypłacania dodatku funkcyjnego, to sytuacja może być prawidłowa.\n'@+
      'Możliwe jest jednak, że rezygnacja ta powinna się wiązać z podniesiem wynagrodzenia zasadniczego.'@
   )
?};

{? GRAKTZAT.CZYWAL2A<>_nz & GRAKTZAT.S2A=_nz
|| _add(_TW,
      'Zaznaczono zmianę waluty dodatku funkcyjnego a nie zmienia się jego wartość.\n'@+
      'W zależności od róznicy kursu waluty przedi po zmianie oznacza to niejawną, realną '
      'zmianę tego elementu wynagrodzenia.'@
   )
?};

{? GRAKTZAT.KADODA=_pw & GRAKTZAT.KADODW=''
|| _add(_TW,
      'Zaznaczono zmianę kategorii dodatku funkcyjnego a nie podano jej wartości.\n'@+
      'Jeżeli definicja dotyczy usunięcia informacji o kategorii, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma zmienić lub wprowadzić informację o kategorii należy podać jej wartość.'@
   )
?};

{? GRAKTZAT.S3A=_pw & GRAKTZAT.S3W=0
|| _add(_TW,
      'Zaznaczono przypisanie dodatkowi wartości 0.\n'@+
      'Jeżeli definicja dotyczy rezygnacji z wypłacania dodatku, to sytuacja może być prawidłowa.\n'@+
      'Możliwe jest jednak, że rezygnacja ta powinna się wiązać z podniesiem wynagrodzenia zasadniczego.'@
   )
?};

{? GRAKTZAT.CZYWAL3A<>_nz & GRAKTZAT.S3A=_nz
|| _add(_TW,
      'Zaznaczono zmianę waluty dodatku a nie zmienia się jego wartość.\n'@+
      'W zależności od róznicy kursu waluty przedi po zmianie oznacza to niejawną, realną '
      'zmianę tego elementu wynagrodzenia.'@
   )
?};

{? GRAKTZAT.ZWALA<>_nz & GRAKTZAT.WALA=_nz
|| _add(_TW,
      'Wskazywana jest nowa tabela kursów a nie zmienia się waluta.\n'@+
      'Jeżeli definicja dotyczy zmiany przypisanej tabeli kursów, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma wprowadzić wynagradzanie w walucie obcej, to należy określić jeszcze walutę.'@
   )
?};

{? GRAKTZAT.WALA<>_nz & GRAKTZAT.ZWALA=_nz
|| _add(_TW,
      'Wskazywana jest nowa waluta a nie zmienia się tabela kursów.\n'@+
      'Jeżeli definicja dotyczy zmiany przypisanej waluty, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma wprowadzić wynagradzanie w walucie obcej, to należy określić jeszcze tabelę kursów.'@
   )
?};

{? GRAKTZAT.ZWALA<>_nz & GRAKTZAT.WALA<>_nz &
   (GRAKTZAT.CZYWALA=_nz | (GRAKTZAT.CZYWALA=_pw & GRAKTZAT.CZYWALW='N')) &
   (GRAKTZAT.CZYWAL2A=_nz | (GRAKTZAT.CZYWAL2A=_pw & GRAKTZAT.CZYWAL2W='N')) &
   (GRAKTZAT.CZYWAL3A=_nz | (GRAKTZAT.CZYWAL3A=_pw & GRAKTZAT.CZYWAL3W='N'))
|| _add(_TW,
      'Wskazywana jest nowa tabela kursów i nowa waluta a nie zmienia się walutowość \n'
      'ani płacy zasadniczej ani dodatków.\n'@+
      'Jeżeli definicja dotyczy zmiany przypisanej tabeli kursów i waluty, to sytuacja może być prawidłowa.\n'@+
      'Jeżeli jednak definicja ma wprowadzić wynagradzanie w walucie obcej, to należy wskazać, których składników '
      'wynagrodzenia ma to dotyczyć.'@
   )
?};

: Prezentacja ostrzeżeń
{? _TW.first()
|| _we:=_TW.mk_edit('Ostrzeżenie'@);
   _TW.win_esep(_we,'Dane podstawowe'@);
   _TW.win_efld(_we,,'LP',,,,,,,,'Liczba porządkowa'@);
   _TW.win_efld(_we,,'TXT',,,75,-5,,,,'Treść ostrzeżenia'@);
   _TW.win_edit(_we);
   _lw:=_TW.size();
   {? _lw<5
   || _lw:=5
   |? _lw>30
   || _lw:=30
   ?};
   _ws:=_TW.mk_sel('Ostrzeżenia'@,'N',,,,,_lw,,'U');
   _TW.win_fld(_ws,,'LP',,,3,,,,,'Liczba porządkowa'@);
   _TW.win_fld(_ws,,'TXT',,,80,,,,,'Treść ostrzeżenia'@);
   _TW.win_act(_ws,,'Formuła','Akceptuj'@,,,"sel_exit()");
   _TW.win_act(_ws,,'Szukaj');
   _cfg:=',btn_label_align=center,panel=bottom,align=end';
   _TW.win_btn(_ws,'text='+'&Akceptuj'@+',icon=xwin16.png:13'+_cfg,'menu:A');
   _TW.win_btn(_ws,'text='+'&Popraw'@+',icon=xwin16.png:14'+_cfg,'key:Esc');
   _TW.win_sel(_ws);
   {? ~_TW.select()
   || return(0)
   ?}
?};

: Jeżeli zapisuję rekord (zmieniłem go), to staję się jego właścicielem.
GRAKTZAT.USER:=OPERATOR.USER;
1


\val_w2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyliczenie wartości pola na podstawie definicji typu wartość / formuła.
::   WE: _a - Tablica nazwana (bufor tabeli H), ze zmienianymi elementami.
::       _b - Akronim pola ze statusem.
::       _c - Akronim pola z wartością.
::       _d - Akronim pola z formułą.
::   WY: Wyliczona wartość lub ~~ jeżeli 'Nie zmieniaj'.
::----------------------------------------------------------------------------------------------------------------------
_Hnew:=_a;
_acra:=_b;
_acrw:=_c;
_acrf:=_d;

_vala:=($('GRAKTZAT.'+_acra))();

{? _vala=exec('graktzat_xa_val_nz','!pkd_grp_azat')
|| return(~~)
?};

{? _vala=exec('graktzat_xa_val_pw','!pkd_grp_azat')
|| ($('GRAKTZAT.'+_acrw))()
|? _vala=exec('graktzat_xa_val_zf','!pkd_grp_azat')
|| _fml:=GRAKTZAT.memo_txt(0,1,_acrf);
   ($_fml)(_Hnew)
?}


\val_w7
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyliczenie wartości liczbowej pola w sekcji z określeniem sposobu zmiany, zaokrąglenia i precyzji.
::   WE: _a - Tablica nazwana (bufor tabeli H), ze zmienianymi elementami.
::       _b - Wartość pierwotna, zwracana w przypadku braku zmiany.
::       _c - Akronim pola ze statusem.
::       _d - Akronim pola z wartością liczbową.
::       _e - Akronim pola z formułą.
::       _f - Akronim pola ze sposobem zaokrąglania.
::       _g - Akronim pola z precyzją.
::   WY: Wyliczona wartość liczbowa lub ~~ jeżeli 'Nie zmieniaj' lub treść komunikatu.
::----------------------------------------------------------------------------------------------------------------------
_Hnew:=_a;
_ret:=_b;
_acra:=_c;
_acrw:=_d;
_acrf:=_e;
_acrz:=_f;
_acrp:=_g;

_vala:=($('GRAKTZAT.'+_acra))();

{? _vala=exec('graktzat_xa_val_nz','!pkd_grp_azat')
|| return(~~)
?};

{? _vala=exec('graktzat_xa_val_zf','!pkd_grp_azat')
:  Zmień wg formuły
|| _fml:=GRAKTZAT.memo_txt(0,1,_acrf);
   _ret:=($_fml)(_Hnew);
   {? type_of(_ret)<>type_of(0)
   || return('Niepoprawny typ.'@)
   ?}

|| _valw:=($('GRAKTZAT.'+_acrw))();
   {? _vala=exec('graktzat_xa_val_pw','!pkd_grp_azat')
:     Przypisz wartość
   || _ret:=_valw

   |? _vala=exec('graktzat_xa_val_dw','!pkd_grp_azat')
:     Dodaj wartość
   || _ret+=_valw

   |? _vala=exec('graktzat_xa_val_dp','!pkd_grp_azat')
:     Dodaj procent
   || _ret+=_ret*_valw/100

   |? _vala=exec('graktzat_xa_val_ow','!pkd_grp_azat')
:     Odejmij wartość
   || _ret-=_valw

   |? _vala=exec('graktzat_xa_val_op','!pkd_grp_azat')
:     Odejmij procent
   || _ret-=_ret*_valw/100
   ?}
?};

_valz:=($('GRAKTZAT.'+_acrz))();
_valp:=($('GRAKTZAT.'+_acrp))();

{? _valz='U'
|| _ret$_valp
|| _ret:=pow(10,_valp)*_ret;
   {? _valz='D'
   || floor(_ret)
   || ceil(_ret)
   ?}*pow(10,-_valp)
?}

:Sign Version 2.0 jowisz:1045 2022/06/30 14:22:52 06cd031fa32c77caed9c064d0d296db2e1ce6f3be597cfff8bae6e4b6652df4e1f0c216b97137c6bc18c56231a9e34ceb4811e99c345e653bd073b6526ff15074cd8c522dcb20bf954553dd4c9a71ac7f48bfc9a1ce9ebf52b0c1c50dceedb5dfa50cc80c4d13c74a530e5fe2cc954b61bec508b0e3fa3608aaf2ac79430a818
