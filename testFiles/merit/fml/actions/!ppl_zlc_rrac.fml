:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_zlc_rrac.fml
:: Utworzony: 17.05.2016
:: Autor: RWR
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_ZLC_RRAC - Rejestracja rachunków.
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Rejestracja rachunków - główna formuła czynności.
::  OLD: \rachsel/zlec_rh.fml - Zmiana sposobu obsługi.
::----------------------------------------------------------------------------------------------------------------------
::# properties=LOOP
::# permissions=F_ZATR,UD_SKL
::# access=exec('run_cond_p','pkd','ZC','ZC.P().get()')
::
:: Parametr wejściowy ON_ESC określa sposób działania przy braku "wyboru" rachunku.
:: Parametr może przyjmować wartości:
::    DONE     - Czynność zostanie zakończona, a parametry wyjściowe przyjmą wartości puste.
::    KEEP     - Czynność zostanie odłożona na listę zadań aby użytkownik mógł do niej wrócić. Oznacza to, że czynności
::               nie da się zakończyć bez wyboru współpracownika  [DOMYŚLNIE].
::    CANCEL   - Jeśli czynność jest pierwszą w procesie to po zakończeniu formuły głównej instancja czynności zostanie
::               usunięta. Jeśli czynność jest kolejną w procesie to otrzyma status oczekująca i pozostanie na liście
::               zadań - czyli tak jak dla KEEP.
::    ERROR    - Czynność jest kończona a proces zatrzymywany z ustawioną flagą błędu.
::# kind=WE, symbol=ON_ESC, type=STRING, name=Sposób działania przy rezygnacji, required=T, ^
::#          fml_val="exec('on_esc','#bi_stat',{? _a=~~ || 'KEEP' || _a ?})"
::
::# kind=WE, symbol=ZC, type=_ZC, name=Wskazanie umowy cywilnoprawnej, required=T, keyref=T
::# kind=WE, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
::
::# kind=WEW, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N, keyref=N
::
::# kind=WY, symbol=RH, type=_RH, name=Wskazanie rachunku do umowy cywilnoprawnej, required=T
::# kind=WY, symbol=GRP_KEY, type=STRING, name=Klucz grupujący, required=N
::
_par:=params_get();
_mp:=_par.mp;
_in:=_par.in;
_out:=_par.out;
_akcja:=_mp.akcja();
_context:=_par.context;

_result:='';
_done:=0;
_uidref:=exec('ref2uid','#table',_in.ZC);

:: Ustawienie domyślnej wartości parametru LOOP (żeby brama się nie zawiesiła).
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

{? _uidref=''
|| _result:=exec('error','!ppl_zlc_rrac','ZC')

|? _mp.loop()
:: Kolejny obrót pętli - odzyskajmy klucz grupujący (z parametrów wejściowych).
:: Obsługa klucza wg. "starej" metody (GRP_KEY) i "nowej" (GRPKEY).
|| _out.GRP_KEY:=_out.GRPKEY:=_mp.grpkey(_in.GRP_KEY,_in.GRPKEY);
   _mp.save(,_out);
   _done:=1

|| {? ~_mp.isMicro()
::    Zabawa z obsługą pętli nie ma sensu dla mikroczynności.
::    Ustalenie lub odzyskanie klucza grupującego (z parametrów wyjściowych).
::    Obsługa klucza wg. "starej" metody (GRP_KEY) i "nowej" (GRPKEY).
   || _out.GRP_KEY:=_out.GRPKEY:=_mp.grpkey(_out.GRP_KEY,_out.GRPKEY);
      _mp.save(,_out)
   ?};

   {? _mp.pathTodo()
::    Czynność uruchomiona z listy zadań ("zerowe" uruchomienie pętli).
   || _ret:=params_exec('select','!ppl_zlc_rrac',_uidref);
      {? type_of(_ret)=type_of('')
      || _result:=_ret
      |? _ret
      || _done:=1
      || _mp.keep()
      ?}

::    Obsługa akcji - wywołania wyłącznie z obszaru roboczego.  --------------------------------------------------------

   |? _akcja='GRPKEY'
   || {? ~_mp.grpkeyFind(_context.RH)
      || _context.RH:=''
      ?}

   |? _akcja='WYBIERZ'
   || {? ~_mp.isMicro()
      || RH.cntx_psh();
         RH.prefix();
         {? RH.seek(_context.RH)
         || _mp.grpkeyAdd(RH.uidref())
         || exec('error','!ppl_zlc_rrac','RH')
         ?};
         RH.cntx_pop()
      ?}

   |? _akcja='POMIŃ'
   || {? ~_mp.isMicro()
      || RH.cntx_psh();
         RH.prefix();
         {? RH.seek(_context.RH)
         || _mp.grpkeyDel(RH.uidref())
         || exec('error','!ppl_zlc_rrac','RH')
         ?};
         RH.cntx_pop()
      ?}

   |? _akcja='DOŁĄCZ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('rh_dolacz','!ppl_zlc_rrac',_uidref);
      {? +_ret=48
      || _context.RH:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='POPRAW'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('rh_popraw','!ppl_zlc_rrac',_uidref,_context.RH);
      {? +_ret=48
      || _context.RH:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyAdd(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='USUŃ'
::    Wywołanie tylko z obszaru roboczego.
   || _ret:=exec('rh_usun','!ppl_zlc_rrac',_uidref,_context.RH);
      {? +_ret=48
      || _context.RH:=_ret;
         {? ~_mp.isMicro()
         || _mp.grpkeyDel(_ret)
         ?}
      |? _ret<>''
      || _result:=_ret
      ?}

   |? _akcja='ZAKOŃCZ'
   || _done:=1

   |? _akcja<>''
   || _result:='Czynność %1 nie obsługuje akcji %2.'@ [_mp.buf_act.UID,_akcja]

   ?}
?};

{? _done
|| RH.cntx_psh();
   RH.prefix();
   do();
   _grpkey:=_mp.grpkeyGet();
   {? _grpkey<>~~
   || {? RH.seek(_grpkey)
      || _out.RH:=RH.ref();
         _mp.save(,_out)
      ?};
      {? _mp.grpkeyDel()
      || {? _mp.grpkeyGet()<>~~
::          Jeżeli jest jeszcze choć jeden element do przetworzenia, to pętla powinna być kontynuowana.
         || _mp.loop_continue()
         ?}
      ?};
      _mp.done()
   ?};
   end();
   RH.cntx_pop();

   {? _grpkey=~~ & ~_mp.loop()
::    Nie ma rachunków do "wypchnięcia" i jesteśmy w obsłudze "Zakończ" w "pierwszym" obrocie pętli -
::    niech zadziała ON_ESC.
   || {? _in.ON_ESC='DONE'
      || _mp.done()

      |? _in.ON_ESC='KEEP'
      || FUN.info(
            'Żaden rachunek nie został wybrany lub dołączony.\n'
            'Czynność pozostanie na liście zadań do wykonania.'@
         );
         _mp.keep()

      |? _in.ON_ESC='CANCEL'
      || _mp.cancel()

      |? _in.ON_ESC='ERROR'
      || _mp.error('ON_ESC=ERROR')
      ?}

   ?}
?};

{? _result<>''
:  Obsługa błędów
|| _mp.error(_result);
   FUN.emsg(_result)
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR[17.00]
:: OPIS: Rejestracja rachunków - formuła opisu zadania.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_par:=params_get();
_mp:=_par.mp;
_in:=_mp.load(exec('kind_in','#b_port'));
_tab:=exec('init_desc_tab','pracownik');
_nu:='';
_du:='';

OSOBA.cntx_psh();
P.cntx_psh();
P.prefix();
UD_SKL.cntx_psh();
UD_SKL.prefix();
ZC.cntx_psh();
ZC.prefix();
{? type_of(_in.ZC)=type_of(null()) & _in.ZC<>null() & ZC.seek(_in.ZC)
|| ZC.P().OSOBA();
   _mp.keyRef(ZC.uidref(),0,0);
   _mp.keyRef(P.uidref(),0,0);
   _mp.keyRef(OSOBA.uidref(),0,0);
   _tab.ZAW_DANE:='T';
   _tab.NAZWISKO:=P.OSOBA().NAZWISKO;
   _tab.PIERWSZE:=OSOBA.PIERWSZE;
   _tab.OBCY:=OSOBA.OBCY;
   _tab.PASZPORT:=OSOBA.PASZPORT;
   _tab.PESEL:=OSOBA.PESEL;
   _tab.UR_DATA:=$OSOBA.UR_DATA;
   _tab.T:=P.T;
   _tab.IP:=$P.IP;
   _tab.UD_SKL:=ZC.WYDZIAL().SYMBOL;
   _nu:=ZC.NU;
   _du:=ZC.DU$4
?};
ZC.cntx_pop();
UD_SKL.cntx_pop();
P.cntx_pop();
OSOBA.cntx_pop();

{? _tab.ZAW_DANE='T'
|| {? _tab.OBCY='T'
   || 'Zarejestruj rachunki do umowy cywilnoprawnej: %1 %2: Paszport - %3, Numer teczki - %4, Identyfikator - %5 | %6 | Umowa nr %7 z dnia %8 r.'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PASZPORT,_tab.T,_tab.IP,_tab.UD_SKL,_nu,_du]
   |? +_tab.PESEL
   || 'Zarejestruj rachunki do umowy cywilnoprawnej: %1 %2: PESEL - %3, Numer teczki - %4, Identyfikator - %5 | %6 | Umowa nr %7 z dnia %8 r.'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.PESEL,_tab.T,_tab.IP,_tab.UD_SKL,_nu,_du]
   || 'Zarejestruj rachunki do umowy cywilnoprawnej: %1 %2: Data urodzenia - %3, Numer teczki - %4, Identyfikator - %5 | %6 | Umowa nr %7 z dnia %8 r.'@@
         [_tab.NAZWISKO,_tab.PIERWSZE,_tab.UR_DATA,_tab.T,_tab.IP,_tab.UD_SKL,_nu,_du]
   ?}
|| 'Zarejestruj rachunki do umowy cywilnoprawnej'@@
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Słownik komunikatów o błędach.
::   WE: [_a] [STRING] - Kod komunikatu.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_kod:={? var_pres('_a')=type_of('') || _a || '' ?};

'Rejestrowanie rachunku do umowy cywilnoprawnej niemożliwe.'@+'\n'+
{? _kod='ZC'
|| 'Nie znaleziono umowy.'@
|? _kod='RH_put'
|| 'Nie znaleziono rachunku do poprawienia.'@
|? _kod='RH_del'
|| 'Nie znaleziono rachunku do usunięcia.'@
|| 'Wystąpił nieprzewidziany błąd.'@
?}


\select
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa czynności wywołanej z listy zadań
::   WE: _a [STRING] - Wskazanie (uidref) umowy.
::   WY: Komunikat o błędzie lub informacja o wyjściu z okna poprzez wywołanie sel_exit() - czyli "Zakończ".
::----------------------------------------------------------------------------------------------------------------------
ZC.cntx_psh();
ZC.prefix();
{? type_of(_a)=type_of('') & +_a=48 & ZC.seek(_a)
|| __F_ZATR.push();
   __F_ZATR.mod('Z');
   OSOBA.cntx_psh();
   OSOBA.prefix();
   P.cntx_psh();
   P.prefix();
   ZC.P().OSOBA();
   RH.cntx_psh();
   RH.index('RACHUNKC');
   RH.prefix(ZC.ref());
   RH.index('RACHUNKI');
   RH.prefix(ZC.ref());
   RH.win_sel('WERI');
   params_set(params_get());
:: Okno readagowania zależy od tego, czy jest to zasiłek czy też nie, dlatego będzie ustawiane dynamicznie.
   RH.win_patt('WZO');
   exec('rh_icon','zlec_rh');
   exec('zc_efld_opt','zlec_rh','*',ZC,'INFO');
   _ret:=RH.select();
   RH.cntx_pop();
   P.cntx_pop();
   OSOBA.cntx_pop();
   __F_ZATR.pop()
|| _ret:=exec('error','!ppl_zlc_rrac')
?};
ZC.cntx_pop();
_ret


\rh_weri_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wypełnienie" okna grupowego WERI tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
grp_edisp(P,'INFO_Z');
grp_edisp(ZC,'INFO');
~~


\rh_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed modyfikacją rekordu.
::       Formuła wywoływana z wyzwalaczy "Dołącz - przed" i "Popraw - przed" dla tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
P.cntx_psh();
RH.FIRMA:=RH.ZLE().P().FIRMA;
RH.R:=RH.DWY~1;
RH.M:=RH.DWY~2;
P.cntx_pop();
1


\rh_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Dołącz - przed" dla tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rh_modb','!ppl_zlc_rrac')


\rh_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Popraw - przed" dla tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rh_modb','!ppl_zlc_rrac')


\rh_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
:: !!! Nie usuwane są powiązane rekordy z tabel:
::CON_KH, Pole: RH, Numer: 3
::CON_KK, Pole: RH, Numer: 3

{? RH.O<>null()
|| O.cntx_psh();
   LS.cntx_psh();
   LS.use(RH.O().LT);
   _ls:=exec('del_ndx','#table',LS,'ZLEC',RH.ref());
   LS.cntx_pop();
   O.cntx_pop()
|| _ls:=1
?};
{? ~_ls
|| return(0)
?};

exec('del_ndx','#table',KOM_SP,'KOM_RH',RH.ref()) &
exec('del_ndx','#table',RHP,'RHP',RH.ref()) &
exec('del_ndx','#table',ZALACZ,'NAG',RH.uidref())


\rh_wal_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.70]
:: OPIS: Wartość początkowa pola RH.WAL (kwota w walucie).
::  OLD: \zc_kw_wal/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.ZLE().CZYWAL='T'
|| {? ZC.TYP='G' | ZC.TYP='M' | ZC.TYP='D'
   || ZC.KU
   || exec('wal_real','zlec_rh');
      ZC.KU-UZZ.ZR
   ?}
|| 0
?}


\rh_wal_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola RH.WAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\rh_wal_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MAKO [2010]
:: OPIS: Przed redagowaniem pola RH.WAL
::  OLD: \zc_kwwal/kali.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.CZYWAL='T'


\rh_ppd_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2011]
:: OPIS: Wartość początkowa pola RH.PPD.
::   WY: ZC.PPD jesli RH.PPD=0
::  OLD: \blank_rh_ppd/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.PPD


\rh_fep_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2010B]
:: OPIS: Wartość początkowa pola RH.FEP
::  OLD: \blank_rh_fep/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC.FEP


\uz_lt_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Przed wyświetleniem pola UZ.LT - lista płac dużymi literami.
::   WE:
::   WY:
::  OLD: \uz_lt_bl/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_p258:=(PAR_SKID.get(258)='T');
:: Dla pustej daty sprawdzenie parametru czy podpowiadać listę z poprzedniego rachunku:
{? _p258 & RH.O=null() & PAR_SKID.get(278)='T'
|| O.cntx_psh();
   O.prefix();
   UZ.O();
   {? O.R=RH.DWY~1 & O.M=RH.DWY~2
   || RH.O:=O.ref()
   ?};
   O.cntx_pop()
?};

UZ.LT:=~RH.O().LT;
_p258


\uz_stawka_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola UZ.STAWKA.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP='G' | ZC.TYP='D'


\uz_stawka_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed redagowaniem pola UZ.STAWKA
::  OLD: \RH_STAW/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
(RH.ZLE().TYP='G' | ZC.TYP='D') & ZC.CZYWAL='N'


\uz_licz_rh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: GL [8.60]
:: OPIS: Po redagowaniu pól UZ.STAWKA, UZ.GODZ, UZ.DNI - wyliczenie kwoty rachunku z godzin/dni i stawki.
::  OLD: \licz_godz/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
fld(_fld:=fld()$2);
{? _fld<=0
|| FUN.emsg('Wartość pola musi być dodatnia.'@);
   0
|? ZC.TYP='D' | ZC.TYP='G'
|| UZ.RH:=(UZ.STAWKA*{? ZC.TYP='G' || UZ.GODZ || UZ.DNI ?})$2;
   1
|| 1
?}


\uz_godz_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Przed wyświetleniem pola UZ.GODZ.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP='G'


\uz_dni_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [18.22]
:: OPIS: Przed wyświetleniem pola UZ.DNI.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP='D'


\uz_godz_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed redagowaniem pola UZ.GODZ.
::  OLD: \RH_GODZ/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP='G'


\uz_dni_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MJ [18.22]
:: OPIS: Przed redagowaniem pola UZ.DNI.
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP='D'


\uz_rh_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2010]
:: OPIS: Przed redagowaniem pola UZ.RH.
::  OLD: \RHKWOTA/war_tech.fml
::----------------------------------------------------------------------------------------------------------------------
RH.ZLE().TYP<>'G' & ZC.TYP<>'D' & ZC.CZYWAL='N'


\rh_act_wybierz_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Wybierz - grupa przed" w oknach wertowania tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy na pewno chcesz wybrać zaznaczone wiersze?'@)


\rh_act_wybierz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Wybierz - przed" w oknach wertowania tabeli RH.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonymi oknami redagowania tabel P i ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _mp.grpkeyAdd(RH.uidref())

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='WYBIERZ';
   _args.CONTEXT.RH:=RH.uidref();
   _args.GRUPA:={? RH.sel_size() || 'T' || 'N' ?};
   exec('mp_run','#b__box',_args)
?};
~~


\rh_act_pomin_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Pomiń - grupa przed" w oknach wertowania tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Czy na pewno chcesz pominąć zaznaczone wiersze?'@)


\rh_act_pomin
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Pomiń - przed" w oknach wertowania tabeli RH.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonymi oknami redagowania tabel P i ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _mp.grpkeyDel(RH.uidref())

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='POMIŃ';
   _args.CONTEXT.RH:=RH.uidref();
   _args.GRUPA:={? RH.sel_size() || 'T' || 'N' ?};
   exec('mp_run','#b__box',_args)
?};
~~


\rh_act_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Dołącz - przed" w oknach wertowania tabeli RH.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonymi oknami redagowania tabel P i ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego).
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('rh_dolacz','!ppl_zlc_rrac',ZC.uidref());
   {? +_ret=48
   || _mp.grpkeyAdd(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='DOŁĄCZ';
   _args.CONTEXT.RH:='';
   exec('mp_run','#b__box',_args);
   {? type_of(_args.CONTEXT.RH)=type_of('') & +_args.CONTEXT.RH=48
   || RH.seek(_args.CONTEXT.RH)
   ?}

?};
~~


\rh_act_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Popraw - przed" w oknach wertowania tabeli RH.
::       Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonymi oknami redagowania tabel P i ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('rh_popraw','!ppl_zlc_rrac',ZC.uidref(),RH.uidref());
   {? +_ret=48
   || _mp.grpkeyAdd(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='POPRAW';
   _args.CONTEXT.RH:=RH.uidref();
   exec('mp_run','#b__box',_args)
?};
~~


\rh_act_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Usuń - przed" w oknach wertowania tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| _mp:=params_get().mp;
   _ret:=exec('rh_usun','!ppl_zlc_rrac',ZC.uidref(),RH.uidref());
   {? +_ret=48
   || _mp.grpkeyDel(_ret)
   |? _ret<>''
   || FUN.emsg(_ret)
   ?}

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='USUŃ';
   _args.CONTEXT.RH:=RH.uidref();
   exec('mp_run','#b__box',_args)
?};
~~


\rh_act_zakoncz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonymi oknami redagowania tabel P i ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
:: Wywołanie z listy zadań (czynność, w postaci okna wertowania, jest już uruchomiona).
|| sel_exit()

:: Jeżeli wywołanie z obszaru, to zawsze procesowo.
|| params_set(params_get());
   _args:=exec('ppl_zlc_rrac_args','zlec_rh');
   _args.AKCJA:='ZAKOŃCZ';
   exec('mp_run','#b__box',_args);
   win_activate('rh_wer')
?}


\rh_dolacz
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe dołączanie rekordu do tabeli RH.
::   WE: _a [STRING] - Wskazanie (uidref) umowy cywilnoprawnej.
::   WY: Komunikat o błędzie lub uidref dołączonego rekordu lub ''.
::  OLD: \rh_dod/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

ZC.cntx_psh();
ZC.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & ZC.seek(_a)
|| RH.cntx_psh();
   RH.prefix();
   {? ZC.CZYWAL='T'
   || exec('wal_real','zlec_rh')
   || exec('rh_sumuj','zlec_rh')
   ?};
   VAR.P:=0;
   _dalej:=2;
   {? ZC.TYP='N' & UZZ.ZR=ZC.KU
   || _dalej:=FUN.ask('Umowa została całkowicie zrealizowana.\nCzy wprowadzić korektę?'@)
   ?};
   {? _dalej
   || RH.blank();
      exec('uz_blank','zlec_rh');
      {? _dalej=1
      || RH.KOR:='T'
      ?};
      RH.win_edit(exec('rh_win_edit','zlec_rh'));
      exec('rh_efld_opt','zlec_rh');
      {? RH.edit("exec('rh_ae','!ppl_zlc_rrac')")
      || {? RH.GODZ<>'T' || RH.G_MC:=RH.G_ROK:=0 ?};
         {? RH.add()
         || {? RH.DWY>ZC.DZB
            || {? ~FUN.ask('Data wypłaty rachunku: %1 jest późniejsza od daty wygaśnięcia zobowiązania %2.'
                     '\nZmieniono datę wygaśnięcia zobowiązania na datę wypłaty rachunku.'
                     '\nCzy przywrócić datę wygaśnięcia zobowiązania na datę sprzed zmiany?'@[$RH.DWY,$ZC.DZB])
               || FUN.emsg('Data wygaśnięcia zobowiązania została zmieniona na: %1'@[$RH.DWY]);
                  ZC.DZB:=RH.DWY;
                  ZC.put()
               || FUN.emsg('Uwaga, data wygaśnięcia zobowiązania nie została zmieniona.'
                     '\n Data wypłaty wystawionego rachunku: %1,'
                     '\njest późniejsza od daty wygaśnięcia zobowiązania: %2.'@[$RH.DWY,$ZC.DZB])
               ?}
            ?};
            exec('wylicz_rhs','zlec_rh');
            {? RH.GODZ='T' || FUNKCJE.Z(54) ?};
::          Sprawdzam parametr czy podpowiadać listę z poprzednio wystawianego rachunku:
            {? PAR_SKID.get(278)='T' & PAR_SKID.get(258)='T'
            || UZ.O:=RH.O
            ?};
            _ret:=RH.uidref()
         || VAR.P:=1
         ?}
      || VAR.P:=1
      ?}
   ?};
   RH.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_rrac','ZC')
?};
ZC.cntx_pop();

_ret


\rh_popraw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe poprawianie rekordu tabeli RH.
::   WE: _a [STRING] - Wskazanie (uidref) umowy cywilnoprawnej.
::       _b [STRING] - Wskazanie (uidref) rachunku.
::   WY: Komunikat o błędzie lub uidref poprawionego rekordu lub ''.
::  OLD: \ruz/kali.fml
::  OLD: \rh/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_ret:='';

ZC.cntx_psh();
ZC.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & ZC.seek(_a)
|| RH.cntx_psh();
   RH.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & RH.seek(_b) & RH.ZLE=ZC.ref()
   || _mod:=exec('czy_mod','lista_plac',RH.ref(),,1);
      {? _mod.status<0 & _mod.status<>-6
      || FUN.emsg(exec('czy_mod_txt','lista_plac',_mod.status)+'\n'+'Poprawianie nie jest możliwe.'@)

      || RH.win_edit(exec('rh_win_edit','zlec_rh'));
         UZ.LS_BL:=exec('jest_bl','lista_plac',RH.ref());
         UZZ.R:=RH.DWY~1;
         UZZ.MIE:=RH.DWY~2;
         UZZ.LT:=~RH.O().LT;
         UZ.KK:=RH.KK;
         UZ.G_ROK:=RH.G_ROK;
         UZ.G_MC:=RH.G_MC;
         VAR.P:=1;
         {? UZ.LS_BL
         || FUN.info(
               'Znaleziono zablokowane kwoty w szczegółach rachunku.\n'
               'Niektóre dane rozliczenia rachunku nie mogą być edytowane.'@
            )
         ?};
         exec('rh_efld_opt','zlec_rh');
         {? RH.edit("exec('rh_ae','!ppl_zlc_rrac')")
         || {? RH.GODZ<>'T' || RH.G_MC:=RH.G_ROK:=0 ?};
            {? RH.put()
            || {? UZ.G_ROK<>RH.G_ROK | UZ.G_MC<>RH.G_MC | UZZ.LT<>~RH.O().LT
               || exec('rh_g_usun','!ppl_zlc_rrac',UZ.G_ROK,UZ.G_MC,RH.ref,'T')
               ?};
               exec('wylicz_rhs','zlec_rh');
               FUNKCJE.Z(54);
               _ret:=RH.uidref()
            ?}
         ?}
      ?}

   || _ret:=exec('error','!ppl_zlc_rrac','RH_put')
   ?};
   RH.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_rrac','ZC')
?};
ZC.cntx_pop();

_ret


\rh_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.14]
:: OPIS: Właściwe usunięcie rekordu z tabeli RH. Usuwa rachunek, dyspozycje przelewów wynagrodzenia oraz składniki.
::   WE:  _a  [STRING] - Wskazanie (uidref) umowy cywilnoprawnej.
::        _b  [STRING] - Wskazanie (uidref) usuwanego rachunku.
::       [_c] [NUMBER] - Obsługa trybu wsadowego (bez komunikatów) [domyślnie: 0].
::   WY: Komunikat o błędzie lub uidref usuniętego rekordu lub ''.
::  OLD: \del_rach/zlec_rh.fml
::  OLD: \spr_skl/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_batch:=var_pres('_c')=type_of(0) & _c;

_ret:='';

ZC.cntx_psh();
ZC.prefix();
{? var_pres('_a')=type_of('') & +_a=48 & ZC.seek(_a)
|| RH.cntx_psh();
   RH.prefix();
   {? var_pres('_b')=type_of('') & +_b=48 & RH.seek(_b) & RH.ZLE=ZC.ref()
   || _mod:=exec('czy_mod','lista_plac',RH.ref());
      {? PAR_SKID.get(258)='N' & _mod.status=-2
      || 'Rezygnacja'
      |? _mod.status<0 & _mod.status<>-6
      || FUN.emsg(exec('czy_mod_txt','lista_plac',_mod.status)+'\n'+'Usunięcie nie jest możliwe.'@)
      || {? _batch | exec('del_ask','#table')
         || exec('wybierz','lista_plac',RH.O);
            FUNKCJE.OTWOLTRH();
            {? ~_batch
            || ZC_INFO.cntx_psh();
               RH.ZC_INFO();
               {? ZC_INFO.ZUS='T' | ZC_INFO.FC='T' | ZC_INFO.FW='T'
               || progress(,'Trwa sprawdzenie zgodności składek ZUS.'@,'Proszę czekać...'@,1);
                  exec('podst_sk','zlec_rh');
                  _emerytalne:=
                     {? ZC_INFO.ZUS='T'
                     || (DoList.z[1]*KST.PRFE*0.005)$2<>DoList.z[4]
                     ?};
                  _rentowe:=
                     {? ZC_INFO.ZUS='T'
                     || (DoList.z[1]*KST.PRFRP*0.01)$2<>DoList.z[5] | (DoList.z[1]*KST.PRFRF*0.01)$2<>DoList.z[16]
                     ?};
                  _chorobowe:=
                     {? ZC_INFO.FC='T'
                     || (DoList.z[2]*KST.PRFC*0.01)$2<>DoList.z[6]
                     ?};
                  _wypadkowe:=
                     {? ZC_INFO.FW='T'
                     || (DoList.z[3]*KST.PRFW*0.01)$2<>DoList.z[7]
                     ?};

                  {? _emerytalne | _rentowe | _chorobowe | _wypadkowe
                  || FUN.info(
                        'Po usunięciu rachunku stwierdzono niezgodności w naliczonych składkach ZUS.'
                        'Kwoty przesyłane do programu Płatnika za okres %1 r. wymagają sprawdzenia.'@ [RH.DWY$8]
                     )
                  ?};
                  prgs_clr()
               ?};
               ZC_INFO.cntx_pop()
            ?};

            _ds:=do_state();
            {? _ds=0
            || do()
            ?};

            {? _ds<>2
            || RH.cntx_psh();
::             Sprawdzenie czy zostały wypłacone nieobecności
               {? RH.ZAS='T' & exec('zas_zc','os_nieob',1)
               || ZC_N.index('ZC_Z');
                  ZC_N.prefix(ZC.ref());
                  {? ZC_N.first()
                  || {!
                     |? {? ZC_N.RH=RH.ref()
                        || ZC_N.RH:=null();
                           ZC_N.put()
                        ?};
                        ZC_N.next()
                     !}
                  ?}
               ?};

               _korekta:=0;
               KORN_Z.index('ZLEC');
               KORN_Z.prefix(ZC.ref());
               {? KORN_Z.first()
               || {!
                  |? {? KORN_Z.RH=RH.ref()
                     || _korekta:=1;
                        KORN_Z.DW:=date(0,0,0);
                        KORN_Z.R:='N';
                        KORN_Z.RH:=null();
                        KORN_Z.put(1)
                      ?};
                      KORN_Z.next()
                  !}
               ?};
::             Usunięcie złączenia rachunku z korektami PPK
               exec('del_O_RH','ppk_kwn',RH.ZLE().P,RH.O,RH.ref);
::             Usunięcie zmodyfikowanych zapisów procentu wpłat jeżeli uczestnik złożył wniosek o obniżenie wpłaty
::             podstawowej a wysokość wpłaty została skorygowana do maksymalnej ze względu na osiągnięty dochód.
               exec('gdel_ls','ppk_pwp',P.OSOBA,RH.DWY,RH.ref(),null());
               exec('usunzlis','ppk_pod',P.ref(),RH.ref());
::             Usunięcie złączenia rachunku z tabelą G
               {? RH.GODZ='T' & RH.G_ROK<>0 & RH.G_MC<>0
               || exec('rh_g_usun','!ppl_zlc_rrac',RH.G_ROK,RH.G_MC,RH.ref)
               ?};
::             Usunięcie rozliczenia zwolnienia przychodu
               {? var_pres('__ZW_PRZ')>0
               || __ZW_PRZ.RH:=RH.ref;
                  __ZW_PRZ.LISTA:=null;
                  __ZW_PRZ.ROK:=RH.DWY~1;
                  __ZW_PRZ.MC:=RH.DWY~2;
                  __ZW_PRZ.del_pozycja()
               ?};
::             Usunięcie nadwyżki zaliczki na podatek
               {? var_pres('P_NPOD')=type_of(SYSLOG)
               || exec('p_npod_del','lista_licz','Z',P.ref,RH.O,RH.ref)
               ?};
               RH.del();

               {? {? _ds=0
                  || end()
                  || do_state()=1
                  ?}
               || _ret:=_b;
                  {? _korekta
                  || FUN.info(
                        'Procedura usunięcia rachunku spowodowała usunięcie przypisania do korekty ZUS.\n'
                        'Należy zweryfikować dane rozliczenia korekt ZUS.'@
                     )
                  ?}
               || FUN.emsg('Usunięcie zapisu nie powiodło się.'@)
               ?};
               RH.cntx_pop()
            ?}
         ?}
      ?}

   || _ret:=exec('error','!ppl_zlc_rrac','RH_del')
   ?};
   RH.cntx_pop()
|| _ret:=exec('error','!ppl_zlc_rrac','ZC')
?};
ZC.cntx_pop();

_ret


\rh_szczeg_fill
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Wypełnienie" okna SZCZEG tabeli RH - prezentacja LS i RHP.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
grp_disp(RHP,'WER')


\rh_szczeg_ls_rh_ar
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Po odświeżeniu" okna RH tabeli LSw ramach okna grupowego SZCZEG tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_aid:={? (~('T#B'*LS.RB().RK) | RH.KOR='T') || '' || 'p' ?};

{? exec('jest_bl','lista_plac',RH.ref())
|| _aid+='O'
|| _aid+='W'
?};

LS.actions_grayed('RH',_aid)


\rh_szczeg_rhp_wer_bs
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: "Przed obsługą" okna WER tabeli RHP w ramach okna grupowego SZCZEG tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.PR<>'T'
|| '#disable'
?}


\rh_szczegoly_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Szczegóły" w oknie WER tabeli RH.
::       Udostępnia dane o składnikach listy płac (LS) i przelewach (RHP.)
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_rwd:=R.win_dict('?');
R.win_dict('SLO_LS');

_rhws:=RH.win_sel('?');
RH.win_sel('SZCZEG');

_status:=exec('czy_mod','lista_plac',RH.ref(),,1).status;
{? _status<1
|| FUN.info(exec('czy_mod_txt','lista_plac',_status)+'\n'+
      'Dostęp do akcji modyfikujących szczegóły rozliczenia rachunku został wyłączony.'@
   )
?};

:: LS
exec('wybierz','lista_plac',RH.O);
FUNKCJE.OTWOLTRH();
LS.prefix(RH.ref());
{? _status=1
|| LS.actions('RH','')
|| LS.actions('RH','DPUBWOR:D')
?};
:: RHP
RHP.index('RHP');
RHP.prefix(RH.ref());
{? _status=1
|| RHP.actions('WER','')
|| RHP.actions('WER','DPU:D')
?};
::
RH.select();
RH.win_sel(_rhws);
{? R.f_active()
|| R.f_clear()
?};
R.win_dict(_rwd);
~~


\rh_drukuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Drukuj" w oknie WER tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('rh_drukuj','zlec_rh')


\rh_zablokuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zablokuj (rachunek)" w oknie WER tabeli RH.
::   WE:
::   WY:
::  OLD: \rh_aktyw/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.BL='N'
|| RH.BL:='T';
   RH.put()
?}


\rh_odblokuj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Odblokuj (rachunek)" w oknie WER tabeli RH.
::   WE:
::   WY:
::  OLD: \rh_aktyw/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.BL='T' & FUN.ask('Rachunek jest zablokowany.\nCzy na pewno zmienić status?'@)
|| RH.BL:='N';
   RH.put()
?}


\rh_ubezpieczenia_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Obsługa akcji "Ubezpieczenia" w oknie WER tabeli RH - udostepnia dane (okno redagowania) o parametrach
::       ubezpieczeń społecznych.
::   WE:
::   WY:
::  OLD: \zc_info_red/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
ZC_INFO.prefix();
RH.ZC_INFO();
ZC_INFO.win_edit('RED');
ZC_INFO.display();
~~


\rh_zalaczniki_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Załączniki przed".
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('show_zalacz','zalacz','P','RH',RH.BL='N' & exec('chk_role','#b__box',OPERATOR.USER,'PPL_ZLC_RRAC'))


\rh_zakoncz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zakończ". Formuła wykonywana w dwóch środowiskach:
::          - po wywołaniu z listy zadań (okno wertowania tabeli RH z doklejonym oknem redagowania tabeli P/ZC);
::          - w ramach obszaru roboczego (okno wertowania tabeli RH jako składowa okna grupowego tabeli P/ZC).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? cur_tab(0,0)=RH
|| sel_exit()

|| params_set(params_get());
:: Z uwagi na sposób prezentacji w obszarze roboczym (dwie czynnosci na jednej zakładce) obsługa akcji jest inna niż
:: w przypadku pozostałych czynności.
   exec('run_act','ppl',ZC,'PPL_ZLC_RRAC','ZAKOŃCZ','zc_wer')
?}


\rh_zadania_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zadania" w oknie WER tabeli RH.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',RH.uidref())


\rh_legenda_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "Legenda" w oknie WER tabeli RH.
::   WE:
::   WY:
::  OLD: \leg_rh/menu.fml
::----------------------------------------------------------------------------------------------------------------------
:: Obecnie akcja "Legenda" jest dostępna tylko podczas obsługi czynnosci w procesie.
:: exec('legenda','color','#RH#01')
exec('legenda','color','$$Rachunek uwzględniony w czynności')


\rh_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "Rekord - po". Weryfikuje poprawność wprowadzanych danych o rachunku.
::       UWAGA: Procedura korzysta z numerow rubryk!
::  OLD: \spr_rach/zlec_rh.fml
::  OLD: \chkdrach/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? (_chk:=__CHK.record(RH,,'DRA','DWY','N'))<>''
|| {? _chk='N' || RH.N:=exec('rh_bl_n','zlec_rh',{? -~menu_txt()='popraw' || RH.ref() || null() ?}) ?};
   return(_chk)
|? RH.DWY<ZC.DU
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2" (%3).'@ [MS.name(RH,'DWY'),MS.name(ZC,'DU'),$ZC.DU]);
   RH.DWY:=ZC.DU;
   return('DWY')
|? RH.DWY<RH.DRA
|| FUN.emsg('"%1" nie może być wcześniejsza niż "%2".'@ [MS.name(RH,'DWY'),MS.name(RH,'DRA')]);
   RH.DWY:=RH.DRA;
   return('DWY')
|? RH.ZAS='N' & RH.PPD<0
|| return(__CHK.err_fld(RH,'PPD',1,''))
|? (_chk:=__CHK.index(RH,'NUMER',-~menu_txt()='popraw'))<>''
|| RH.N:=exec('rh_bl_n','zlec_rh',{? -~menu_txt()='popraw' || RH.ref() || null() ?});
   return('N')
|? RU.cntx_psh();
   _ppd:=ZC.RU().PPD;
   RU.cntx_pop();
   _ppd<>RH.PPD &
   FUN.ask(
      'Procent podatku na rachunku (%1) różni się od procentu podatku związanego z rodzajem umowy (%2).\n'
      'Czy na pewno chcesz kontynuować?'@
      [form(RH.PPD,,2),form(_ppd,,2)]
   )=0
|| return('PPD')

|| RH.R:=RH.DWY~1;
   RH.M:=RH.DWY~2;

   {? -menu_txt()='popraw' & exec('jest','ppk')
   || PPK_POD.cntx_psh();
      PPK_POD.index('WYL_RH');
      PPK_POD.prefix(RH.ref(),P.ref());
::    Sprawdzenie w wypadku zmiany daty wypłaty czy przychód z PPK nie jest już rozliczony na innym rachunku:
      {? PPK_POD.first()
      || {!
         |? RH.cntx_psh();
            _dwyWyl:=PPK_POD.WYL_RH().DWY;
            RH.cntx_pop();
            {? RH.DWY<>_dwyWyl & PPK_POD.POD_RH<>null & PPK_POD.POD_RH<>RH.ref()
            || RH.cntx_psh();
               FUN.emsg('Przychód PPK już rozliczony na rachunku z datą wypłaty %1\nwystawionym do umowy nr: %2\n'
                        'Należy usunąć ww. rachunek, aby zmienić datę.'@
                        [PPK_POD.POD_RH().DWY$6,PPK_POD.POD_RH().ZLE().NU]
                       );
               RH.cntx_pop();
               RH.DWY:=_dwyWyl;
               PPK_POD.cntx_pop();
               return('DWY')
            ?};

            PPK_POD.next()
         !}
      ?};
      PPK_POD.cntx_pop()
   ?};

   {? PAR_SKID.get(258)='T'
::    Rachunki rozliczane na listach - sprawdzamy, czy uzytkownik uzupełnił pole LT.
   || {? ~exec('spr_uz_lt','zlec_rh')
      || return('LT')
      ?}

::    Listy "ukrywane" - szukamy listy, z którą związany będzie rachunek.
   || {? exec('ustal_lista_rh','zlec_rh')
::       Udało się znaleźć listę dla rachunku.
      || O.cntx_psh();
         _err:=RH.O().Z='T' & ~exec('rh_mod_258','zlec_rh');
         O.cntx_pop();
         {? _err
         || return(0)
         ?}
      || return(0)
      ?}
   ?}

?};

{? ~exec('rh_n_chk','zlec_rh') & ~FUN.ask('Wykryto niezgodność definicji numeracji z numerem rachunku.\nKontynuować?'@)
|| return('N')
?};

{? ~exec('rh_o_do_ae','!ppl_zlc_rrac') | ~exec('rh_o_od_ae','!ppl_zlc_rrac')
|| return('O_OD')
?};

:: W tym miejscu kończymy sprawdzanie poprawnosci danych dla zasiłków.
{? RH.ZAS='T'
|| return('')
?};

{? exec('get_ZC_INFO','zlec_rh',RH.DRA)
|| RH.ZC_INFO:=ZC_INFO.ref()
|| FUN.emsg('Zweryfikuj historię danych ubezpieczeniowych związanych z umową.'@);
   return(0)
?};

:: W tym miejscu kończymy sprawdzanie poprawnosci danych dla korekty.
{? RH.KOR='T'
|| return('')
?};

{? RH.ZLE().TYP='N'
:: Ustalona kwota
|| _ret:=
      {? ZC.CZYWAL='T'
      || exec('wal_real','zlec_rh',VAR.P);
         UZZ.ZR+=RH.WAL;
         'WAL'
      || exec('rh_sumuj','zlec_rh',UZ.RH);
         'RH'
      ?};
   {? ZC.KU<UZZ.ZR
   || FUN.emsg('Za duża kwota do realizacji.'@);
      return(_ret)
   ?}
?};

{? (ZC.TYP='N' | ZC.TYP='M') & UZ.RH<=0
:: Ustalona kwota lub Rozliczenie miesięczne.
|| {? ZC.CZYWAL='T'
   || {? RH.WAL
      || exec('rh_wal_ae','zlec_rh');
         {? UZ.RH
         || ''
         || 'WAL'
         ?}
      || FUN.emsg('Kwota/stawka w walucie musi być większa od zera.'@);
         'WAL'
      ?}
   || FUN.emsg('Za mała kwota do realizacji.'@);
      'RH'
   ?}

|? (ZC.TYP='G' | ZC.TYP='D') & {? ZC.CZYWAL='T' || RH.WAL<=0 || UZ.STAWKA<=0 ?}
|| {? ZC.CZYWAL='T'
   || FUN.emsg('Nie wprowadzona stawka w walucie za dni/godziny.'@);
      'WAL'
   || FUN.emsg('Nie wprowadzona stawka za dni/godziny.'@);
      'STAWKA'
   ?}

|? ZC.TYP='G' & RH.GODZ<>'T' & UZ.GODZ<=0
|| FUN.emsg('Nie wprowadzona liczba godzin.'@);
   'GODZ'

|? ZC.TYP='D' & UZ.DNI<=0
|| FUN.emsg('Nie wprowadzona liczba dni.'@);
   'DNI'

|? (ZC.TYP='G' & RH.GODZ='T') & (RH.G_ROK>date()~1 | RH.G_ROK<=1998)
|| FUN.emsg('Wartość pola \"Rok rozliczenia godzin\" powinna być większa od 1998 i mniejsza, '
            'bądź równa od roku bieżącego.'@);
   'G_ROK'

|? (ZC.TYP='G' & RH.GODZ='T') & (RH.G_MC<=0 | RH.G_MC>12)
|| FUN.emsg('Wartość pola \"Miesiąc rozliczenia godzin\" może przyjmować wartości od 1 do 12.'@);
   'G_MC'

|? ZC.TYP='G' & RH.GODZ='T' & exec('rh_czy_g','!ppl_zlc_rrac',RH.G_ROK,RH.G_MC)
|| FUN.emsg('Dla podanego miesiąca i roku nie znaleziono rozliczenia godzin.'@);
   'G_MC'

|? ZC.TYP='G' & RH.GODZ='T' &
   ((-menu_txt()='popraw' & (UZ.G_MC<>RH.G_MC | UZ.G_ROK<>RH.G_ROK)) | -menu_txt()='dołącz') &
   exec('rh_g_duplikat','!ppl_zlc_rrac',RH.G_ROK,RH.G_MC)
|| FUN.emsg('Dla podanego miesiąca i roku rozliczanie godzin jest już w całości przydzielone do innego rachunku.'@);
   'G_MC'

|? (ZC.TYP='G' | ZC.TYP='D') & UZ.RH<=0 & RH.GODZ<>'T'
|| exec('rh_wal_ae','zlec_rh');
   {? UZ.RH
   || ''
   || 'WAL'
   ?}

|? ZC.TYP='G' & RH.GODZ<>'T' & ZC.GODZ<>0 & (ZC.GODZ-exec('godzreal','zlec_rh',54)-UZ.GODZ)<0
|| {? FUN.ask('Liczba godzin wystawionych rachunków przekracza przewidywaną liczbę godzin umowy.\nKontynuować?'@)
   || ''
   || 'GODZ'
   ?}

|? ZC.TYP='D' & ZC.DNI<>0 & (ZC.DNI-exec('godzreal','zlec_rh',52)-UZ.DNI)<0
|| {? FUN.ask('Liczba dni na wystawionych rachunkach przekracza przewidywaną liczbę dni umowy.\nKontynuować?'@)
   || ''
   || 'DNI'
   ?}

|? UZ.RH & ZC.CZYWAL='T' & RH.WAL
|| exec('rh_wal_ae','zlec_rh');
   {? UZ.RH
   || ''
   || 'WAL'
   ?}

|| ''
?}


\rhp_rh_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Wartość początkowa pola RHP.RH.
::  OLD: \rh/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
RH.ref()


\rhp_dolacz_zdefiniowany_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "(Dołącz) Zdefiniowany rachunek bankowy" w oknie WER tabeli RHP.
::   WE:
::   WY:
::  OLD: \red_rhp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
PKO.cntx_psh();
PKO.win_sel('WYB');

RHP.blank();
{? exec('rh_pr_bl','zlec_rh')='T' & PKO.select()
|| RHP.B:=PKO.BA;
   RHP.N:=PKO.N;
   RHP.KW:=UZ.WG;
   {? RHP.edit("exec('rhp_ae','!ppl_zlc_rrac',0)")
   || RHP.add()
   || RHP.get()
   ?}
?};
PKO.cntx_pop();
~~


\rhp_dolacz_dowolny_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "(Dołącz) Dowolny rachunek bankowy" w oknie WER tabeli RHP.
::   WE:
::   WY:
::  OLD: \red_rhp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
RHP.blank();
RHP.KW:=UZ.WG;
{? RHP.edit("exec('rhp_ae','!ppl_zlc_rrac',0)")
|| RHP.add()
|| RHP.get()
?}


\rhp_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Obsługa akcji "(Dołącz) Dowolny rachunek bankowy" w oknie WER tabeli RHP.
::   WE:
::   WY:
::  OLD: \red_rhp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? RHP.edit("exec('rhp_ae','!ppl_zlc_rrac',1)")
|| RHP.put()
|| RHP.get()
?}


\rhp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DRO
:: OPIS: Wertfikuje poprawność dyspozycji przelewu dla rachunku. Wszystkie pola muszą być wypełnione, suma kwot
::       nie może przekraczać kwoty netto rachunku.
::   WE: _a [INTEGER] - Tryb modyfikacji zapisu:
::       1 - Popraw
::       0 - Dołącz
::   WY:
::  OLD: \spr_rhp/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_put:=_a;

{? (_chk:=__CHK.record(RHP,,'N','B','KW'))<>''
|| return(_chk)

|? +RHP.N & ~exec('iban_ok','#id',RHP.N)
|| return('N')

|? (_chp:=exec('sprawdz','rachunki',RHP,'B','N'))<>''
|| return(_chp)

?};

{? _put
|| RHP.cntx_psh();
   RHP.get();
   UZ.WG+=exec('przelkw','zlec_rh');
   RHP.cntx_pop()
?};
{? (UZ.WG-exec('przelkw','zlec_rh'))<0
|| FUN.emsg('Zbyt wysoka kwota dyspozycji.'@);
   return('KW')
?};
''


\ls_rh_mod1_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [2009]
:: OPIS: Obsługa akcji "Usuń - przed", "Oblicz - przed", "Przelicz - przed" dla okna RH tabeli LS.
::       Formuła wywoływana również dla "Dołącz - przed".
::   WE:
::   WY:
::  OLD: \ls_u_d_o/listplac.fml
::  OLD: \RHNIEAKT/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_status:=exec('czy_mod','lista_plac',RH.ref()).status;
{? _status<1 & ~(PAR_SKID.get(258)='N' & _status=-2)
|| FUN.info(exec('czy_mod_txt','lista_plac',_status))
?};
{? _status=1 & -menu_txt()='usuń'
|| LS.cntx_psh();
   LS.index('ZLEC');
   LS.prefix(RH.ref());
   _size:=LS.size();
   LS.cntx_pop();
   {? _size=1
   || {? ~FUN.ask(
            'Usunięcie ostatniego składnika rachunku spowoduje\n'
            'zamknięcie bieżącego okna i usunięcie rachunku.\n\n'
            'Czy na pewno usunąć ostatni składnik rachunku?'@
         )
      || _status:=0
      ?}
   ?}
?};
_status=1


\ls_rh_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Dołącz - przed" dla okna RH tabeli LS.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('ls_rh_mod1_b','!ppl_zlc_rrac')
|| R.f_set('RN',,'R.RK not in (\'*\')')
?}


\ls_rh_mod1_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Obsługa akcji "Dołącz - po" i "Popraw - po"  dla okna RH tabeli LS.
::   WE:
::   WY:
::  OLD: \RHSLICZ/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
{? __F_ZATR.P='Z'
|| exec('oblicz','zlec_rh',1);

   grp_disp(RHP,'WER')
?};
0


\ls_rh_popraw_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Obsługa akcji "Popraw - przed" dla okna RH tabeli LS.
::  OLD: \RHNIEAK/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_status:=exec('czy_mod','lista_plac',LS.ref()).status;
{? _status<1 & ~(PAR_SKID.get(258)='N' & _status=-2)
|| FUN.info(exec('czy_mod_txt','lista_plac',_status))
?};
{? _status=1 & (~('T#B'*LS.RB().RK) | RH.KOR='T')
|| R.f_set('RN',,'RK not in (\'T\',\'#\')');
   1
?}


\ls_rh_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [8.70]
:: OPIS: Obsługa akcji "Usuń - po" dla okna RH tabeli LS.
::  OLD: \po_usu_rhs/zlec_rh.fml
::----------------------------------------------------------------------------------------------------------------------
_prolog:="
   LS.cntx_psh();
   LS.index('ZLEC');
   LS.prefix(RH.ref());
   KORN_Z.cntx_psh();
   KORN_Z.index('ZLEC');
   KORN_Z.prefix(RH.ZLE)
";

_epilog:="
   KORN_Z.cntx_pop();
   LS.cntx_pop()
";

_run:=
   "  RHP.prefix(RH.ref());
      {? RHP.first()
      || {! |? RHP.del() !}
      ?};
      {? KORN_Z.first()
      || {!
         |? {? KORN_Z.RH=RH.ref()
            || KORN_Z.RH:=null();
               KORN_Z.DW:=date(0,0,0);
               KORN_Z.R:='N';
               KORN_Z.put()
            ?};
            KORN_Z.next()
         !}
      ?};
      RH.del()
   ";

_prolog();
{? ~LS.first()
|| _run()

|| exec('oblicz','zlec_rh',1);
   {? ~LS.first()
   || _run()
   ?}
?};
{? ~LS.size()
|| _epilog();
   sel_exit();
   return()
?};
_epilog();

grp_disp(RHP,'WER')


\ls_rh_oblicz_info
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyświetla komunikat o zablokowaniu/przywróceniu automatycznego obliczania składników.
::   WE: _a INTEGER - rodzaj komunikatu: 0/1 - zablokowanie/przywrócenie obliczania składników
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: mapa argumentów
_on:=_a;

FUN.info(
   {? _on<>0
   || 'Składniki rachunku będą obliczane automatycznie.'@
   || 'Składniki rachunku nie będą obliczane automatycznie.'@
   ?}
);
~~


\ls_rh_zablokuj_kwote_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed zmianą kwoty składnika rachunku.
::   WE:
::   WY: wynik testu dostępności akcji
::----------------------------------------------------------------------------------------------------------------------
exec('czy_mod','lista_plac',LS.ref()).zablokuj<>0


\ls_rh_zablokuj_kwote_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Zmiana kwoty składnika rachunku.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
LS.cntx_psh();
_wnd:='RED';
LS.win_edit(_wnd);
LS.efld_opt(_wnd,'editable=0',,'RB');
LS.efld_opt(_wnd,'editable=0',,'BL');

:: sprawdź, czy jest jakaś blokada obliczeń
_bl:=exec('jest_bl','lista_plac',RH.ref());

LS.BL:=1;
{? LS.edit() & LS.put() & _bl=0
:: poinformuj o zadblokowaniu obliczania
|| exec('ls_rh_oblicz_info','!ppl_zlc_rrac',0)
?};

LS.efld_opt(_wnd,'editable=1',,'RB');
LS.efld_opt(_wnd,'editable=1',,'BL');
LS.cntx_pop();
LS.get()


\ls_rh_wycofaj_blokade_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wycofaniem zmiany składnika listy płac.
::   WE:
::   WY: wynik testu dostępności akcji
::----------------------------------------------------------------------------------------------------------------------
exec('czy_mod','lista_plac',LS.ref()).wycofaj<>0


\ls_rh_wycofaj_blokade_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wycofanie zmiany składnika listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
LS.BL:=0;
{? LS.put() & LS.sel_size()=0
|| {? ~exec('jest_bl','lista_plac',RH.ref())
::    poinformuj o odblokowaniu obliczania
   || exec('ls_rh_oblicz_info','!ppl_zlc_rrac',1);

      FUNKCJE.OBLICZ(1);
      FUNKCJE.buff.show_log();

      grp_disp(RHP,'WER')
   ?}
?};
~~


\ls_rh_wycofaj_blokade_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wycofanie zmiany wybranych składników listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('ls_rh_oblicz_info','!ppl_zlc_rrac',1);

FUNKCJE.OBLICZ(1);
FUNKCJE.buff.show_log();

grp_disp(RHP,'WER')


\ls_rh_oblicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RA [2010]
:: OPIS: Obsługa akcji "Oblicz - po" dla okna RH tabeli LS.
::   WE:
::   WY:
::  OLD: \OBL_LS/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
{? VAR.JESTRH
|| FUNKCJE.OTWOLTRH();
   __FOLP.fill(O.F)
?};

FUNKCJE.OBLICZ();
FUNKCJE.buff.show_log();

grp_disp(RHP,'WER')


\ls_rh_przelicz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.41]
:: OPIS: Obsługa akcji "Przelicz - po" dla okna RH tabeli LS. Przelicza wybrane ("ważne") składniki płacowe.
::   WE:
::   WY:
::  OLD: \przelicz_rh_kor/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
{? RH.DWY<date(1999,1,1)
|| FUN.emsg('Data wypłaty rachunku wcześniejsza niż 1999/01/01.\nObliczenie automatyczne niemożliwe.'@)
|| FUNKCJE.OTWOLTRH();
   __FOLP.fill(O.F);

   {? exec('jest_bl','lista_plac',RH.ref())
   || FUNKCJE.OBLICZ(-1)
   || FUNKCJE.OBLICZ(1)
   ?};
   FUNKCJE.buff.show_log();

   grp_disp(RHP,'WER')
?};
~~


\ls_rh_szukaj_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Szukaj - przed" dla okna RH tabeli LS. Ustawia pusty filtr.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
R.f_set('RN')


\rh_kk_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: wartosc poczatkowa pola RH.KK
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_ref:=RH.ZLE().KK;
{? _ref<>null()
|| _ref
|| exec('kk_hist','pracownik',P.ref(),date)
?}


\rh_o_od_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: formula sprawdzająca wypełnienie pola RH.O_OD
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.O_OD=date(0,0,0) & RH.O_DO<>date(0,0,0)
|| FUN.emsg('W przypadku podania wartości pola "Do dnia",\n'
       'konieczne jest wypełnienie pola "Od dnia".\n'
       'Uzupełnij brakujące informacje.'@
   );
   0
|? RH.O_OD<>date(0,0,0) & (RH.O_OD<ZC.DU | RH.O_OD>ZC.DW)
|| FUN.emsg('Podany okres za jaki następuje wypłata rachunku musi mieścić się w okresie trwania umowy.'@);
   0
|? RH.O_OD<>date(0,0,0) & RH.O_DO<>date(0,0,0) & RH.O_OD>RH.O_DO
|| FUN.emsg('Wartość pola "Do dnia" nie może być późniejsza niż wartość pola "Od dnia".'@);
   0
|| 1
?}


\rh_o_do_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: formula sprawdzająca wypełnienie pola pola RH.O_DO
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? RH.O_DO=date(0,0,0) & RH.O_OD<>date(0,0,0)
|| FUN.emsg('W przypadku podania wartości w polu "Od dnia",\n'
       'konieczne jest wypełnienie pola "Do dnia".\n'
       'Uzupełnij brakujące informacje.'@);
   0
|? RH.O_DO<>date(0,0,0) & (RH.O_DO<ZC.DU | RH.O_DO>ZC.DW)
|| FUN.emsg('Podany okres za jaki następuje wypłata rachunku musi mieścić się w okresie trwania umowy.'@);
   0
|? RH.O_DO<>date(0,0,0) & RH.O_OD<>date(0,0,0) & RH.O_DO<RH.O_OD
|| FUN.emsg('Wartość pola "Od dnia" nie może być późniejsza niż wartość pola "Do dnia".'@);
   0
|| 1
?}


\uz_lt_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Obsługa akcji "Wybór F3" dla pola UZ.LT wymagający podania symbolu listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();
_ret:=exec('select','lista_plac','PPL',__F_ZATR.O,'N',fld,'R');
O.cntx_pop();

{? _ret.OK
|| fld(_ret.LT)
|| ~~
?}


\uz_lt_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: MK [17.42]
:: OPIS: Po redakcji pola UZ.LT (proteza dla RH.O).
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
RH.O:=null();
_fld:=~-fld();
{? _fld='' | _fld='L'
|| return(1)
?};

_ret:=1;
O.cntx_psh();
O.index('FFZLT');
O.prefix(exec('ref_firma','ustawienia'),__F_ZATR.O,);
{? O.find_key(-_fld)
|| RH.O:=O.ref();
   fld(~-O.LT);
   _ret:=exec('spr_uz_lt','zlec_rh')
|| FUN.emsg('Brak podanej listy płac.'@);
   _ret:=0
?};
O.cntx_pop();

_ret


\rh_g_usun
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Wyczyszczenie powiązanych z RH znaczników w G
::   WE: _a   - Rok
::       _b   - Miesiąc
::       _c   - RH
::       [_d] - wywołanie dla akcji popraw
::----------------------------------------------------------------------------------------------------------------------
_popraw:={? var_pres('_d')=type_of('') || _d || 'N' ?};
{? _a<>0 & _b<>0
|| G.cntx_psh();
   G.use('godz'+$_a);
   G.index('MSCRH');
   G.prefix(RH.ZLE().P,_b,'G',_c);

   R_GODZ.cntx_psh();
   R_GODZ.use('rzg_'+$_a);
   exec('usu_roz','roz_godz','T',_popraw);
   R_GODZ.cntx_pop();

   G.index('MSCDKW');
   G.prefix(RH.ZLE().P,_b,'G');

   {? G.first()
   || {!
      |? {? G.RH=_c
         || G.LT:='';
            G.RH:=null;
            G.put(1)
         ?};
         G.next()
      !}
   ?};
   G.cntx_pop()
?}


\rh_czy_g
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Sprawdzenie, czy mamy powiązane G z tabelą RH (rozpatrujemy tylko godziny z kodem 54)
::   WE: _a - Rok
::       _b - Miesiąc
::----------------------------------------------------------------------------------------------------------------------
G.cntx_psh();
G.use('godz'+$_a);
G.index('MSCKW_KD');
G.prefix(RH.ZLE().P,_b,'G',54);
_ret:=~G.first();
G.cntx_pop();
_ret


\rh_g_duplikat
::----------------------------------------------------------------------------------------------------------------------
::  UTW: DG [21.14]
:: OPIS: Sprawdzenie, czy mamy rekordy z G, które nie mają RH (rozpatrujemy tylko godziny z kodem 54)
::   WE: _a - Rok
::       _b - Miesiąc
::----------------------------------------------------------------------------------------------------------------------
G.cntx_psh();
G.use('godz'+$_a);
_ndx:=G.ndx_tmp(,1,'P',,,'M',,,'R',,,'RH',,,'K','RN',);
G.index(_ndx);
G.prefix(RH.ZLE().P,_b,'G',null,54);
_ret:=~G.first();
G.ndx_drop(_ndx);
G.cntx_pop();
_ret


\rh_dwy_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [21.14]
:: OPIS: Po redagowaniu pola RH.DWY
::   WE:
::   WY: 0/1 - weryfikacja poprawności wprowadzonych danych
::----------------------------------------------------------------------------------------------------------------------
{? RH.O=null() & PAR_SKID.get(278)='T' & PAR_SKID.get(258)='T'
|| O.cntx_psh();
   O.prefix();
   UZ.O();
   {? O.R=RH.DWY~1 & O.M=RH.DWY~2
   || RH.O:=O.ref();
      UZ.LT:=~O.LT
   ?};
   O.cntx_pop()
?};
1

:Sign Version 2.0 jowisz:1045 2023/12/05 14:41:26 1a34053a58a3b09eede8f3d92fc10a7578ebe56582179d58426514c8fe6c46da98d4fb57a381f39ceb12ed03349b3860c50333e4b37fe7a4f8460615e6c315b8ba7fcfbc44ed835663e4e6a22c97393665acb3e5fa7545a7dd3b84fe25793d7be7ca86eee9129d178b15164f3672190de3d29adc27a458b2621489e5e359e665
