:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !zws_tre_dzas.fml
:: Utworzony: 17.01.2019
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności ZWS_TRE_DZAS - Rejestracja zasobów remontowych
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła główna czynności ZWS_TRE_DZAS - Rejestracja zasobów remontowych
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_out:=params_get().out;
_mp:=params_get().mp;
_action:=_mp.akcja();
_context:=_mp.context;

::# permissions=ODDZ

::# kind=WY, symbol=REM_ZAS, type=_REM_ZAS, name=Zasób remontowy, required=N
::{? var_pres('REM_ZAS',_out)<>type_of(~~) & var_pres('REM_ZAS',_out)<>type_of('') || return() ?};

REM_ZAS.cntx_psh();
REM_ZAS.prefix();
:: Dla akcji w oknie odtwarzamy kontekst rekordu REM_ZAS
{? _action<>''
|| _find:=REM_ZAS.seek(_context.REM_ZAS)
|| _find:=0
?};

{? _mp.pathProc()
|| __PARSES.setEnv('TRE',0,1)
?};

exec('rem_zas_set_fml','zasoby');

SRSR.win_dict('SLO'); SRSR.actions('SLO','W');

_can_continue:=1;

{? _action='DOŁĄCZ' | _action='DOŁĄCZ_ZA' | _mp.path()='Proc'
|| {? exec('get','#params',700701)='T'
      & _find
      & FUN.ask('Czy dołączany zasób jest elementem składowym zasobu %1?'@[REM_ZAS.SYMBOL])
   ||
      {? REM_ZAS.AKT<>'T'
      || FUN.emsg('Nie można dołączać elementów składowych zasobom nieaktywnym.'@);
         _can_continue:=0
      ?};
      _ref:=REM_ZAS.ref();
      _symbol:=REM_ZAS.SYMBOL;
      _oddz:=REM_ZAS.ODDZ;
      _wlasny:=REM_ZAS.WLASNY;
      REM_ZAS.blank();
      VAR.STRING:=_symbol;
      REM_ZAS.TREE:=#_ref;
      REM_ZAS.ODDZ:=_oddz;
      REM_ZAS.WLASNY:=_wlasny
   || REM_ZAS.blank();
      VAR.STRING:='';
      _st_oddz:=ST.ODDZ;
      {? _st_oddz=''
      || USERS_UP.cntx_psh();
         USERS_UP.index('ODDZ');
         USERS_UP.prefix(OPERATOR.USER,'ODDZ',);
         {? USERS_UP.size()=1 & USERS_UP.first()
         || _st_oddz:=USERS_UP.ODDZ().KOD
         ?};
         USERS_UP.cntx_pop()
      ?};
      REM_ZAS.ODDZ:=_st_oddz;
      REM_ZAS.WLASNY:='T'
   ?};
   {? REM_ZAS.ODDZ=''
   || USERS_UP.cntx_psh();
      _wero:=USERS_UP.mk_sel('Wybór oddziału'@,,,'oddzslo',,,20);
      USERS_UP.win_fld(_wero,,'ODDZ','KOD');
      USERS_UP.win_fld(_wero,,'ODDZ','NAZ');
      USERS_UP.win_act(_wero,,'Formuła','Wybierz'@@,,,"sel_exit()",,1,,,,'W');
      USERS_UP.win_sel(_wero);
      USERS_UP.index('ODDZ');
      USERS_UP.prefix(OPERATOR.USER,'ODDZ',);
      {? USERS_UP.select()
      || REM_ZAS.ODDZ:=USERS_UP.ODDZ().KOD
      ?};
      USERS_UP.cntx_pop()
   ?};
   {? _can_continue>0 & REM_ZAS.ODDZ<>''
   || REM_ZAS.win_edit('RED');
      _buffer:=exec('REM_ZAS','buffer1'); _buffer.get();
      params_set('EDIT_PARENT',_action<>'DOŁĄCZ','buffer',_buffer);
      exec('efld_opt','!zws_tre_dzas',_action<>'DOŁĄCZ');
      _fml_f3:="
         _ref:=REM_ZAS.TREE;
         _res:=fld();
         REM_ZAS.cntx_psh();
         _wer:=REM_ZAS.mk_sel('Zasoby remontowe'@,'P',,'remzasslo');
         REM_ZAS.win_fld(_wer,,'SYMBOL',,,50);
         REM_ZAS.win_act(_wer,,'Formuła','Wybierz'@@,,,\"sel_exit()\",,1);
         REM_ZAS.win_sel(_wer);
         REM_ZAS.index('SYM');
         REM_ZAS.prefix();
         {? REM_ZAS.select()
         || _ref:=#REM_ZAS.ref();
            _res:=REM_ZAS.SYMBOL
         ?};
         REM_ZAS.cntx_pop();
         REM_ZAS.TREE:=_ref;
         fld(_res)
      ";
      _fml_ae:="
         _ref:=0;
         _res:=0;
         {? fld()=''
         || _res:=1;
            REM_ZAS.TREE:=0
         || REM_ZAS.cntx_psh();
            REM_ZAS.index('SYM');
            REM_ZAS.prefix(fld(),);
            {? REM_ZAS.first()
            || _res:=1;
               _ref:=#REM_ZAS.ref()
            || FUN.info('Brak pozycji w słowniku.'@)
            ?};
            REM_ZAS.cntx_pop()
         ?};
         {? _res || REM_ZAS.TREE:=_ref ?};
         _res
      ";
      exec('set_fml','#field',VAR,'STRING',"~~","1",_fml_f3,_fml_ae);
      ATR.M_ATR:=null();
      REM_ZAS.memo_set('','OPIS');
      {? REM_ZAS.edit("params_exec('chk_rem_zas','!zws_tre_dzas',0)")
      || {? REM_ZAS.add()
         || {? REM_ZAS.memo_put(,'OPIS')
            || {? _action<>'' || _context.REM_ZAS:=REM_ZAS.ref() ?};
               _out.REM_ZAS:=REM_ZAS.ref();
               _mp.save(,_out);
               _mp.done()
            ?}
         ?}
      ?};
      exec('set_fml','#field',VAR,'STRING',"*","*","*","*")
   ?}

|? _action='POPRAW' & _find
|| VAR.STRING:=exec('parent_symbol','!zws_tre_dzas',REM_ZAS.ref());
   REM_ZAS.win_edit('RED');

   _fml_f3:="
         _ref:=REM_ZAS.TREE;
         _res:=fld();
         REM_ZAS.cntx_psh();
         _wer:=REM_ZAS.mk_sel('Zasoby remontowe'@,'P',,'remzasslo');
         REM_ZAS.win_fld(_wer,,'SYMBOL',,,50);
         REM_ZAS.win_act(_wer,,'Formuła','Wybierz'@@,,,\"sel_exit()\",,1);
         REM_ZAS.win_sel(_wer);
         REM_ZAS.index('SYM');
         REM_ZAS.prefix();
         {? REM_ZAS.select()
         || _ref:=#REM_ZAS.ref();
            _res:=REM_ZAS.SYMBOL
         ?};
         REM_ZAS.cntx_pop();
         REM_ZAS.TREE:=_ref;
         fld(_res)
      ";
      _fml_ae:="
         _ref:=0;
         _res:=0;
         {? fld()=''
         || _res:=1;
            REM_ZAS.TREE:=0
         || REM_ZAS.cntx_psh();
            REM_ZAS.index('SYM');
            REM_ZAS.prefix(fld(),);
            {? REM_ZAS.first()
            || _res:=1;
               _ref:=#REM_ZAS.ref()
            || FUN.info('Brak pozycji w słowniku.'@)
            ?};
            REM_ZAS.cntx_pop()
         ?};
         {? _res || REM_ZAS.TREE:=_ref ?};
         _res
      ";
      exec('set_fml','#field',VAR,'STRING',"~~","1",_fml_f3,_fml_ae);


   {? REM_ZAS.M<>null()
   || ATR.M_ATR:=REM_ZAS.M().M_ATR
   ?};
   exec('efld_opt','!zws_tre_dzas',1);
   _buffer:=exec('REM_ZAS','buffer1'); _buffer.get();
   params_set('EDIT_PARENT',1,'buffer',_buffer);
   REM_ZAS.memo_get(,'OPIS',0);
   {? REM_ZAS.edit("params_exec('chk_rem_zas','!zws_tre_dzas',1)")
   || {? REM_ZAS.put()
      || {? REM_ZAS.memo_put(,'OPIS')
         || _out.REM_ZAS:=REM_ZAS.ref();
            _mp.save(,_out);
            _mp.done()
         ?}
      ?}
   ?}

|? _action='USUŃ' & _find
|| {? exec('can_delete_rem_zas','!zws_tre_dzas',REM_ZAS.ref())=0
   || FUN.info('Nie można usunąć.'@+'\n'+'Zasób wykorzystany w systemie.'@)
   || REM_ZAS.cntx_psh();
      REM_ZAS.index('TREE');
      REM_ZAS.prefix(#REM_ZAS.ref());
      _has_children:=(REM_ZAS.size()>0);
      REM_ZAS.cntx_pop();
      {? _has_children
      || FUN.info('Nie można usunąć.'@+'\n'+'Zasób ma elementy podrzędne.'@)
      |? FUN.ask('Czy usunąć zasób?'@)
      ||
::       Ustalenie rekordu wczytywanego do bufora po usunięciu (zależy od widoku)
         _new_ref:=null();
         REM_ZAS.cntx_psh();
         {? _context.REM_ZAS_VIEW
         || REM_ZAS.index('TREE');
            REM_ZAS.prefix(REM_ZAS.TREE);
            {? REM_ZAS.prev()
            || _new_ref:=REM_ZAS.ref()
            |? REM_ZAS.next()
            || _new_ref:=REM_ZAS.ref()
            || _new_ref:=exec('FindAndGet','#table',REM_ZAS,REM_ZAS.TREE,,"ref()",null())
            ?}
         || {? REM_ZAS.prev()
            || _new_ref:=REM_ZAS.ref()
            |? REM_ZAS.next()
            || _new_ref:=REM_ZAS.ref()
            ?}
         ?};
         REM_ZAS.cntx_pop();
::       Dodatkowe zabezpieczenie, jaby podczas czekania na odpowiedź, ktoś usunął rekord
         {? REM_ZAS.seek(_context.REM_ZAS)
         || do();
            {? exec('clean_rem_zas','!zws_tre_dzas',REM_ZAS.ref())
            || {? REM_ZAS.del(,1)>0
               || _mp.cancel()
               ?};
               _context.REM_ZAS:=_new_ref
            ?};
            end()
         || FUN.info('Zasób został już usunięty.'@);
            _mp.cancel()
         ?}
      ?}
   ?}

:: Tutaj nie powinno dojść, więc błąd
|| _msg:='Nieobsłużony kontekst wywołania czynności %1.'@@['ZWS_TRE_DZAS'];
   FUN.emsg(_msg);
   _mp.error(_msg)
?};

REM_ZAS.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Opis dla czynności rejestrowania zasobu remontowego (ZWS_TRE_DZAS)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();

:: jest rekord kluczowy to ustawiam odpowiedniego REM_ZAS
{? var_pres('[1]',_keyRefs)
|| _sym:=exec('FindAndGet','#table',REM_ZAS,_keyRefs[1],,
      "REM_ZAS.SYMBOL",'');
   {? _sym<>''
   || _desc:='Zredaguj zasób remontowy: %1'@@[_sym]
   ?}
|| _desc:='Zredaguj nowy zasób remontowy'@@
?};

_desc


\action_add
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZWS_TRE_DZAS';
_args.AKCJA:='DOŁĄCZ';
_args.PROC_START:='T';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
_args.CONTEXT:=obj_new('REM_ZAS','REM_ZAS_VIEW');
   _args.CONTEXT.REM_ZAS:={? REM_ZAS.f_active()>0 & REM_ZAS.f_size()=0 || null() || REM_ZAS.ref() ?};
   _args.CONTEXT.REM_ZAS_VIEW:=params_get().env_zasoby.REM_ZAS_VIEW;
exec('mp_run','#b__box',_args);

REM_ZAS.seek(_args.CONTEXT.REM_ZAS);
{? REM_ZAS.f_active()>0 || REM_ZAS.f_rfresh() ?};
~~


\action_add_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Dołącz za' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZWS_TRE_DZAS';
_args.AKCJA:='DOŁĄCZ_ZA';
_args.PROC_START:='T';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
_args.CONTEXT:=obj_new('REM_ZAS','REM_ZAS_VIEW');
   _args.CONTEXT.REM_ZAS:=null();
   _args.CONTEXT.REM_ZAS_VIEW:=params_get().env_zasoby.REM_ZAS_VIEW;
exec('mp_run','#b__box',_args);

REM_ZAS.seek(_args.CONTEXT.REM_ZAS);
{? REM_ZAS.f_active()>0 || REM_ZAS.f_rfresh() ?};
~~


\action_modify
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Popraw' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZWS_TRE_DZAS';
_args.AKCJA:='POPRAW';
_args.PROC_START:='N';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
_args.CONTEXT:=obj_new('REM_ZAS','REM_ZAS_VIEW');
   _args.CONTEXT.REM_ZAS:=REM_ZAS.ref();
   _args.CONTEXT.REM_ZAS_VIEW:=params_get().env_zasoby.REM_ZAS_VIEW;
exec('mp_run','#b__box',_args);
~~


\action_delete
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Usuń' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='ZWS_TRE_DZAS';
_args.AKCJA:='USUŃ';
_args.PROC_START:='N';
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
_args.CONTEXT:=obj_new('REM_ZAS','REM_ZAS_VIEW');
   _args.CONTEXT.REM_ZAS:=REM_ZAS.ref();
   _args.CONTEXT.REM_ZAS_VIEW:=params_get().env_zasoby.REM_ZAS_VIEW;
exec('mp_run','#b__box',_args);

REM_ZAS.seek(_args.CONTEXT.REM_ZAS);
~~


\action_display
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Wyświetl' w oknie zasobów remontowych (albo w innych miejscach z podaniem parametru)
::   WE: [_a] - REM_ZAS.ref()
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(null())
|| _rem_zas:=_a
|| _rem_zas:=REM_ZAS.ref()
?};
REM_ZAS.cntx_psh();
REM_ZAS.prefix();
{? REM_ZAS.seek(_rem_zas)
|| REM_ZAS.win_edit('RED');
   UD_POM.JORG:=REM_ZAS.UD_SKL().SYMBOL;
   exec('efld_opt','!zws_tre_dzas');
   REM_ZAS.memo_get(,'OPIS',0);
   REM_ZAS.display()
?};
REM_ZAS.cntx_pop();
~~


\action_attachments
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Załączniki' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
_edit:=exec('chk_role','#b__box',OPERATOR.USER,'ZWS_TRE_DZAS');
{? REM_ZAS.AKT='N'
|| _edit:=0
?};

{? REM_ZAS.r_lock(1,1,1)
|| REM_ZASA.index('REM_ZAS');
   REM_ZASA.prefix(REM_ZAS.ref());

   _tab_tmp:=tab_tmp(1
      ,'NAME','STRING[255]','Nazwa pliku'@
      ,'SIZE','REAL','Rozmiar'@
      ,'MOD_DATE','STRING[16]','Data modyfikacji'@
      ,'ADD_DATE','STRING[19]','Data dodania'@
      ,'INT_DATA','INTEGER','Identyfikator pliku'@
      ,'STR_DATA','STRING[48]','Identyfikator pliku'@
      ,'NAZWA','STRING[50]','Opis'@
   );
   _fml_load:="
      _tab_ctrl:=_a;
      _tab:=_b;
      _tab_ctrl.blank();
      _blob_ref:=($('_tab:=_a;_tab.'+.FIELD))(_tab);
      {? _blob_ref<>null()
      ||
         _tab_ctrl.NAME:=_tab.bl_info(.FIELD,'NAME');
         _tab_ctrl.SIZE:=_tab.bl_info(.FIELD,'SIZE');
         _tab_ctrl.MOD_DATE:=$_tab.bl_info(.FIELD,'MODIFY_DATE')+' '+$_tab.bl_info(.FIELD,'MODIFY_TIME')
      || _tab_ctrl.NAME:='brak pliku'
      ?};
      _tab_ctrl.ADD_DATE:=19+_tab.IDADD;
      _tab_ctrl.STR_DATA:=_tab.uidref();
      _tab_ctrl.NAZWA:=_tab.NAZWA;
      _tab_ctrl.add()
   ";
   _fml_edit:="params_exec('rem_zasa_edit','zasoby',_a,_b,_c,_d,_e)";
   _fml_file:="";
   _fml_valid:=exec('rem_zasa_valid','zasoby');
   _args:=obj_new('REM_ZAS'); _args.REM_ZAS:=REM_ZAS.ref();
   exec('edit_blob','#edit',REM_ZASA
      ,'ATA'
      ,exec('REM_ZASA','buffer1')
      ,_fml_edit
      ,_fml_file
      ,_args
      ,_edit
      ,'Załączniki'@+{? _edit || '' || ' — '+'PODGLĄD'@ ?}
      ,'icons'
      ,_tab_tmp
      ,_fml_load
      ,_fml_valid
   );
   REM_ZAS.r_unlock()
|| FUN.emsg('Redagowanie listy załączników nie jest możliwe.\nRekord jest redagowany lub przetwarzany.'@)
?};
~~


\action_legenda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Akcja 'Legenda' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
exec('legenda','color','REM_ZAS#01')


\action_find_before
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Przed akcją 'Szukaj' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
exec('domyslny','schemat','PODZORG');
REM_ZAS.win_patt('SZUK');
~~


\action_find_after
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Po akcji 'Szukaj' w oknie zasobów remontowych
::----------------------------------------------------------------------------------------------------------------------
~~


\rem_zas_fld_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła przed wyświetleniem pól tabeli REM_ZAS
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();

_result:=1;

::{? _afld='DK_C'
::|| _result:=exec('pw_dk_c','mat_atr')
::?};

_result


\rem_zas_fld_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła przez redakcją pól tabeli REM_ZAS
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();

_result:=1;

{? _afld='M'
|| POMOC.RODZ:='T';
   ZAKR.MATU:='T';
   POMOC.M:=REM_ZAS.M;
   exec('slo_m_ok','material','T',1,,'W');
   {? REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_dk_c','zasoby')
::      | REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_multi','zasoby') & REM_ZAS.DK_C<>null()
   || M.f_set('KTM',,'M.M_ATR is not null and M.A=\'T\' and M.RODZ=\'T\'')
   || M.f_set('KTM',,'M.A=\'T\' and M.RODZ=\'T\'')
   ?}

|? _afld='SYMBOL'
|| {? fld()=''
   || _fld:=Plugin.run('REM_ZAS_T_SYMBOL_001');
      fld():={? type_of(_fld)=type_of('') || _fld || '' ?};
      win_disp()
   ?}

|? _afld='NAZWA'
|| {? fld()=''
   || _fld:=Plugin.run('REM_ZAS_T_NAZWA_001');
      fld():={? type_of(_fld)=type_of('') || _fld || '' ?};
      win_disp()
   ?}

|? _afld='DK_C'
|| _result:=exec('be_dk_ce','mat_atr')
?};

_result


\rem_zas_fld_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Formuła po redakcji pól tabeli REM_ZAS
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();

_result:=1;

{? _afld='TYP'
|| _typ:=REM_ZAS.TYP().TYP;
   {? _typ=exec('rem_zas_typ_val_dk_c','zasoby')
   || REM_ZAS.POJAZDY:=null();
      REM_ZAS.SRSR:=null();
      REM_ZAS.TWRKPLC:=null();
      REM_ZAS.TWRKZBR:=null()
   |? _typ=exec('rem_zas_typ_val_m','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.POJAZDY:=null();
      {? ~(REM_ZAS.M<>null() & exec('atr_czy_srsr','mat_atr',REM_ZAS.M().M_ATR))
      || REM_ZAS.SRSR:=null()
      ?};
      {? REM_ZAS.SRSR=null() || REM_ZAS.NF:='' ?};
      REM_ZAS.TWRKPLC:=null();
      REM_ZAS.TWRKZBR:=null()
   |? _typ=exec('rem_zas_typ_val_null','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.M:=null();
      REM_ZAS.POJAZDY:=null();
      REM_ZAS.SRSR:=null();
      REM_ZAS.TWRKPLC:=null();
      REM_ZAS.TWRKZBR:=null()
   |? _typ=exec('rem_zas_typ_val_pojazdy','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.M:=null();
      REM_ZAS.TWRKPLC:=null();
      REM_ZAS.TWRKZBR:=null();
      {? REM_ZAS.SRSR=null() || REM_ZAS.NF:='' ?}
   |? _typ=exec('rem_zas_typ_val_srsr','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.M:=null();
      REM_ZAS.POJAZDY:=null();
      REM_ZAS.TWRKPLC:=null();
      REM_ZAS.TWRKZBR:=null();
      {? REM_ZAS.SRSR=null() || REM_ZAS.NF:='' ?}
   |? _typ=exec('rem_zas_typ_val_twrkplc','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.M:=null();
      REM_ZAS.POJAZDY:=null();
      {? REM_ZAS.SRSR=null() || REM_ZAS.NF:='' ?}
   |? _typ=exec('rem_zas_typ_val_twrkzbr','zasoby')
   || REM_ZAS.DK_C:=null();
      REM_ZAS.M:=null();
      REM_ZAS.POJAZDY:=null();
      REM_ZAS.TWRKPLC:=null();
      {? REM_ZAS.SRSR=null() || REM_ZAS.NF:='' ?}
   |? _typ=exec('rem_zas_typ_val_multi','zasoby')
   || ~~
   ?}

|? _afld='M'
|| {? REM_ZAS.M<>null()
   || ATR.M_ATR:=REM_ZAS.M().M_ATR;
      ATR.MJS:='REM_ZAS';
      _czy_srsr:=REM_ZAS.SRSR<>null();
      _czy_multi:=REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_multi','zasoby');
      {? ~_czy_multi | ~_czy_srsr
      || {? ~(exec('atr_czy_srsr','mat_atr',REM_ZAS.M().M_ATR))
         || REM_ZAS.SRSR:=null();
            {? _czy_srsr || REM_ZAS.NF:='' ?}
         || {? ~_czy_srsr || REM_ZAS.NF:='' ?}
         ?}
      ?}
   || ATR.M_ATR:=null();
      ATR.MJS:=''
   ?};
   {? POMOC.M<>REM_ZAS.M
   || REM_ZAS.DK_C:=null()
   ?}

|? _afld='DK_C' & REM_ZAS.M<>null()
|| {? REM_ZAS.SRSR=null()
   || {? exec('atr_czy_srsr','mat_atr',REM_ZAS.M().M_ATR)
      ||  REM_ZAS.SRSR:=exec('atr_get_srsr','mat_atr',REM_ZAS.M().M_ATR);
         {? REM_ZAS.SRSR<>null()
         || _czy_multi:=REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_multi','zasoby');
            {? ~_czy_multi | REM_ZAS.NF=''
            || REM_ZAS.NF:=REM_ZAS.SRSR().NF
            ?}
         ?}
      ?}
   ?}

|? _afld='POJAZDY'
|| {? REM_ZAS.SRSR=null()
   || REM_ZAS.SRSR:=REM_ZAS.POJAZDY().SRSR
   ?}

|? _afld='WLASNY'
|| {? REM_ZAS.WLASNY='T'
   || REM_ZAS.KH:=null()
   || REM_ZAS.UD_SKL:=null();
      UD_POM.JORG:=''
   ?}

|? _afld='PRZ_DOKL'
|| {? fld()<0
   || FUN.info('Podaj wartość większą lub równą zero.'@);
      _result:=0
   |? fld()>10
   || FUN.info('Podaj wartość mniejszą lub równą %1.'@['10']);
      _result:=0
   || win_disp()
   ?}

|? _afld='DK_C'
|| _result:=exec('ae_dk_ce','mat_atr')

|? _afld='SRSR'
|| _czy_multi:=REM_ZAS.TYP().TYP=exec('rem_zas_typ_val_multi','zasoby');
   {? ~_czy_multi | REM_ZAS.NF=''
   || REM_ZAS.NF:=REM_ZAS.SRSR().NF
   ?}

?};

exec('efld_opt','!zws_tre_dzas',params_get().EDIT_PARENT);

_result


\rem_zas_fld_fd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Format wyświetlania pól tabeli REM_ZAS
::----------------------------------------------------------------------------------------------------------------------
_afld:=cur_afld();
_format:='';
{? _afld='PRZ'
|| _format:='out_prec=%1,empty=%2'[$REM_ZAS.PRZ_DOKL,$(REM_ZAS.PRZ_MODE='N')]
?};
_format


\parent_symbol
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Zwraca symbol zasobu nadrzędnego do wskazanego (jak jest)
::   WE: REM_ZAS.ref()
::   WY: REM_ZAS.SYMBOL
::----------------------------------------------------------------------------------------------------------------------
_res:='';
REM_ZAS.cntx_psh();
REM_ZAS.prefix();
{? REM_ZAS.seek(_a)
|| {? REM_ZAS.seek(REM_ZAS.TREE,)
   || _res:=REM_ZAS.SYMBOL
   ?}
?};
REM_ZAS.cntx_pop();
_res


\efld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Ustawia opcje pól w oknie redakcyjnym zasobów remontowych
::   WE: [_a] - czy pole 'Zasób nadrzędny' jest redagowalne
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')=type_of(0)
|| _edit_parent:=_a
|| _edit_parent:=0
?};

:: redagowanie zasobu nadrzędnego
{? _edit_parent
|| REM_ZAS.efld_opt('RED','editable=1',VAR,'STRING')
|| REM_ZAS.efld_opt('RED','editable=grayed',VAR,'STRING')
?};

:: redagowanie jednostki organizacyjnej/kontrahenta
{? REM_ZAS.WLASNY='T'
|| REM_ZAS.efld_opt('RED','enable=1',UD_POM,'JORG');
   REM_ZAS.efld_opt('RED','enable=1',,'UD_SKL');
   REM_ZAS.efld_opt('RED','enable=0',,'KH')
|| REM_ZAS.efld_opt('RED','enable=0',UD_POM,'JORG');
   REM_ZAS.efld_opt('RED','enable=0',,'UD_SKL');
   REM_ZAS.efld_opt('RED','enable=1',,'KH')
?};

:: zawsze ustawione
REM_ZAS.efld_opt('RED','editable=grayed',,'ODDZ');
REM_ZAS.efld_opt('RED','mark=1',,'TYP');
REM_ZAS.efld_opt('RED','mark=1',,'SYMBOL');
REM_ZAS.efld_opt('RED','mark=1',,'NAZWA');

:: domyślnie wyłączone redagowanie powiązań z tabelami źródłowymi
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'M');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'DK_C');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'POJAZDY');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'SRSR');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'NF');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'TWRKPLC');
REM_ZAS.efld_opt('RED','mark=0,enable=0',,'TWRKZBR');

:: w zależności od typu zasobu, redagowalne odpowiednie powiązania z tabelami źródłowymi
_typ:=REM_ZAS.TYP().TYP;
{? _typ=exec('rem_zas_typ_val_m','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'M');
   REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=1',,'NF');
   {? REM_ZAS.M<>null() & exec('atr_czy_srsr','mat_atr',REM_ZAS.M().M_ATR)
   || REM_ZAS.efld_opt('RED','mark=0,enable=1',,'SRSR');
      REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')
   ?}

|? _typ=exec('rem_zas_typ_val_dk_c','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'M');
   REM_ZAS.efld_opt('RED','mark=1,enable=1',,'DK_C');
   {? REM_ZAS.M<>null() & exec('atr_czy_srsr','mat_atr',REM_ZAS.M().M_ATR)
   || REM_ZAS.efld_opt('RED','mark=0,enable=1',,'SRSR');
      REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')
   || REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=1',,'NF')
   ?}

|? _typ=exec('rem_zas_typ_val_pojazdy','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'POJAZDY');
   REM_ZAS.efld_opt('RED','mark=0,enable=1',,'SRSR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')

|? _typ=exec('rem_zas_typ_val_srsr','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'SRSR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')

|? _typ=exec('rem_zas_typ_val_twrkplc','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'TWRKPLC');
   REM_ZAS.efld_opt('RED','mark=0,enable=1',,'TWRKZBR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1',,'SRSR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')

|? _typ=exec('rem_zas_typ_val_twrkzbr','zasoby')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'TWRKZBR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1',,'SRSR');
   REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=0',,'NF')

|? _typ=exec('rem_zas_typ_val_null','zasoby')
|| REM_ZAS.efld_opt('RED','mark=0,enable=1,editable=1',,'NF')

|? _typ=exec('rem_zas_typ_val_multi','zasoby')
|| {? REM_ZAS.M=null() & REM_ZAS.DK_C=null() & REM_ZAS.POJAZDY=null() & REM_ZAS.SRSR=null() & REM_ZAS.NF='' &
      & REM_ZAS.TWRKPLC=null() & REM_ZAS.TWRKZBR=null()
   || _mark:=1
   || _mark:=0
   ?};
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.M<>null() | REM_ZAS.DK_C<>null())+',enable=1',,'M');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.DK_C<>null())+',enable=1',,'DK_C');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.POJAZDY<>null())+',enable=1',,'POJAZDY');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.SRSR<>null())+',enable=1',,'SRSR');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.NF<>'')+',enable=1,editable=1',,'NF');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.TWRKPLC<>null())+',enable=1',,'TWRKPLC');
   REM_ZAS.efld_opt('RED','mark='+$(_mark | REM_ZAS.TWRKZBR<>null())+',enable=1',,'TWRKZBR');
   ~~
?};

:: w zalezności od sposobu rejestracji przebiegów
_mode:=REM_ZAS.PRZ_MODE;
{? _mode='N'
|| REM_ZAS.efld_opt('RED','mark=0,enable=0',,'PRZ_JM');
   REM_ZAS.efld_opt('RED','enable=0',,'PRZ_DOKL');
   REM_ZAS.efld_opt('RED','enable=0',,'PRZ')
|| REM_ZAS.efld_opt('RED','mark=1,enable=1',,'PRZ_JM');
   REM_ZAS.efld_opt('RED','enable=1',,'PRZ_DOKL');
   REM_ZAS.efld_opt('RED','enable=1',,'PRZ')
?};
~~


\chk_rem_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Walidacja rekordu tabeli REM_ZAS (zasoby remontowe) - wołana z poziomu okna oraz funkcji importujących
::       (jeśli będzie eksport/import, to przenieść do LIB)
::   WE: _a - specyfikacja testu: 1-poprawianie, 0-dołączanie
::   WY: akronim pola / ''
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
:: Walidacje podstawowe
{? _chk=''
|| _typ:=REM_ZAS.TYP().TYP;
   {? _typ=exec('rem_zas_typ_val_m','zasoby')
   || _chk:=__CHK.record(REM_ZAS,,'M')

   |? _typ=exec('rem_zas_typ_val_dk_c','zasoby')
   || {? REM_ZAS.M().M_ATR=null()
      || FUN.emsg('Wybrany materiał musi posiadać wzorzec atrybutów cechy dostawy.'@);
         _chk:='M'
      || _chk:=__CHK.record(REM_ZAS,,'M','DK_C')
      ?}

   |? _typ=exec('rem_zas_typ_val_pojazdy','zasoby')
   || _chk:=__CHK.record(REM_ZAS,,'POJAZDY')

   |? _typ=exec('rem_zas_typ_val_srsr','zasoby')
   || _chk:=__CHK.record(REM_ZAS,,'SRSR')

   |? _typ=exec('rem_zas_typ_val_twrkplc','zasoby')
   || _chk:=__CHK.record(REM_ZAS,,'TWRKPLC');
      {? _chk=''
      || _chk:=exec('chk_twrkplc','!zws_tre_dzas')
      ?}

   |? _typ=exec('rem_zas_typ_val_twrkzbr','zasoby')
   || _chk:=__CHK.record(REM_ZAS,,'TWRKZBR')
   |? _typ=exec('rem_zas_typ_val_multi','zasoby')
   || {? REM_ZAS.M=null() & REM_ZAS.DK_C=null() & REM_ZAS.POJAZDY=null() & REM_ZAS.SRSR=null() & REM_ZAS.NF='' &
         & REM_ZAS.TWRKPLC=null() & REM_ZAS.TWRKZBR=null()
      || FUN.emsg('Należy określić przynajmniej jedno powiązanie.'@);
         _chk:='M'
      |? REM_ZAS.DK_C<>null() & REM_ZAS.M().M_ATR=null()
      || FUN.emsg('Wybrany materiał musi posiadać wzorzec atrybutów cechy dostawy.'@);
         _chk:='M'
      ?};
      {? _chk='' & REM_ZAS.TWRKPLC<>null()
      || _chk:=exec('chk_twrkplc','!zws_tre_dzas')
      ?}
   ?}
?};
{? _chk=''
|| _chk:=__CHK.record(REM_ZAS,,'TYP','SYMBOL','NAZWA')
?};
{? _chk=''
|| {? REM_ZAS.PRZ_MODE<>'N'
   || _chk:=__CHK.record(REM_ZAS,,'PRZ_JM')
   ?}
?};
:: Rekordy powtórzone w kluczu unikalnym
{? _chk=''
|| {? __CHK.index(REM_ZAS,_a)<>''
   || _chk:='SYMBOL'
   ?}
?};
:: Walidacja zasobu nadrzędnego - czy nie ma przypisanego samego siebie - tylko dla poprawiania
{? _a & _chk=''
|| {? REM_ZAS.TREE=#REM_ZAS.ref()
   || FUN.emsg('Nieprawidłowy zasób nadrzędny - dany zasób nie może być zasobem nadrzędnym samego siebie.'@);
      _chk:='STRING'
   ?}
?};
:: Walidacje zależne od zarejestrowanych przebiegów - tylko dla poprawiania
{? _a & _chk=''
|| REM_ZASP.cntx_psh();
   REM_ZASP.index('ZASDT');
   REM_ZASP.prefix(REM_ZAS.ref());
   {? REM_ZASP.size()>0
   || {? _chk='' & params_get().buffer.PRZ_MODE<>REM_ZAS.PRZ_MODE
      || {? FUN.ask('Są już zarejestrowane przebiegi, czy na pewno zmienić sposób rejestracji?'@)
         || {? REM_ZAS.PRZ_MODE='N' || REM_ZAS.PRZ_JM:=params_get().buffer.PRZ_JM ?}
         || _chk:='PRZ_MODE'
         ?}
      ?};
      {? _chk='' & params_get().buffer.PRZ_JM<>REM_ZAS.PRZ_JM
      || {? ~FUN.ask('Są już zarejestrowane przebiegi, czy na pewno zmienić jednostkę miary przebiegów?'@)
         || _chk:='PRZ_JM'
         ?}
      ?}
   ?};
   REM_ZASP.cntx_pop()
?};
:: Walidacja aktywności zasobów po zmianie elementu nadrzędnego - tylko dla poprawiania
{? _a & _chk='' & REM_ZAS.TREE<>0 & params_get().buffer.TREE<>REM_ZAS.TREE & REM_ZAS.AKT='T'
   & exec('FindAndGet','#table',REM_ZAS,REM_ZAS.TREE,,"REM_ZAS.AKT",'')<>'T'
|| FUN.emsg('Wskazany zasób nadrzędny jest nieaktywny. Nie można dołączać aktywnych elementów składowych zasobom nieaktywnym.'@);
   _chk:='STRING'
?};
:: Walidacja po zmianie elementu nadrzędnego - sprawdzenie czy element struktury jest zawarty w planie
{? _chk='' & params_get().buffer.TREE<>REM_ZAS.TREE
|| {? exec('rem_zas_chk_in_plan','zasoby',REM_ZAS.ref())
   || {? ~FUN.ask('Na modyfikowany zasób lub na jeden z jego elementów nadrzędnych zaplanowana jest awaria. Czy mimo to zmienić element nadrzędny zasobu?'@)
      || _chk:='STRING'
      ?}
   |? exec('rem_zas_chk_in_plan','zasoby',REM_ZAS.ref,REM_ZAS.TREE)
   || {? ~FUN.ask('Na wskazany zasób nadrzędny lub na jeden z jego elementów nadrzędnych zaplanowana jest awaria. Czy mimo to zmienić element nadrzędny zasobu?'@)
      || _chk:='STRING'
      ?}
   ?}
?};
_chk


\can_delete_rem_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Sprawdza, czy można usunąć zasób remontowy
::   WE: _a - REM_ZAS.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=_a;
_can_delete:=1;

:: Wykorzystanie przez zgłoszenia remontowe
{? _can_delete>0
|| REM_ZGL.cntx_psh();
   _names:=REM_ZGL.names();
   {? _names.first()
   || {!
      |? REM_ZGL.use(_names.NAME);
         REM_ZGL.index('REM_ZAS');
         REM_ZGL.prefix(_rem_zas);
         {? REM_ZGL.size()>0
         || _can_delete:=0
         ?};
         _can_delete>0 & _names.next()
      !}
   ?};
   REM_ZGL.cntx_pop()
?};

:: Wykorzystanie przez przebiegi
{? _can_delete>0
|| REM_ZASP.cntx_psh();
   REM_ZASP.index('ZASDT');
   REM_ZASP.prefix(_rem_zas);
   {? REM_ZASP.size()>0 || _can_delete:=0 ?};
   REM_ZASP.cntx_pop()
?};

:: Wykorzystanie przez plan zgłoszeń
{? _can_delete>0
|| REM_PLAN.cntx_psh();
   {? var_pres('_names')>100 || obj_del(_names) ?};
   _names:=REM_PLAN.names();
   {? _names.first()
   || {!
      |? REM_PLAN.use(_names.NAME);
         REM_PLAN.index('REM_ZAS');
         REM_PLAN.prefix(_rem_zas);
         {? REM_PLAN.size()>0
         || _can_delete:=0
         ?};
         _can_delete>0 & _names.next()
      !}
   ?};
   REM_PLAN.cntx_pop()
?};

_can_delete


\clean_rem_zas
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [19.22]
:: OPIS: Czyści powiązania do zasobu remontowego
::   WE: _a - REM_ZAS.ref()
::----------------------------------------------------------------------------------------------------------------------
_rem_zas:=_a;

_can_continue:=1;
_result:=0;

REM_ZASA.cntx_psh();
REM_ZASA.index('REM_ZAS');
REM_ZASA.prefix(_rem_zas);
{? REM_ZASA.first()
|| {!
   |? _can_continue:=REM_ZASA.del(,1);
      REM_ZASA.first() & _can_continue>0
   !}
?};
REM_ZASA.cntx_pop();

{? _can_continue>0
|| REM_ZASU.cntx_psh();
   REM_ZASU.index('REM_ZAS');
   REM_ZASU.prefix(_rem_zas);
   {? REM_ZASU.first()
   || {!
      |? _can_continue:=exec('rem_zasu_del_act','zasoby',0);
         REM_ZASU.first() & _can_continue>0
      !}
   ?};
   REM_ZASU.cntx_pop()
?};

{? _can_continue>0
|| REM_GWAR.cntx_psh();
   REM_GWAR.index('REM_ZAS');
   REM_GWAR.prefix(_rem_zas);
   {? REM_GWAR.first()
   || {!
      |? _can_continue:=exec('rem_gwar_del_act','zasoby',0);
         REM_GWAR.first() & _can_continue>0
      !}
   ?};
   REM_GWAR.cntx_pop()
?};
{? _can_continue>0
|| _result:=1
?};
_result


\rem_zas_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli REM_ZAS.
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1 | ~exec('lic','#b_domain','POR') || return() ?};
REM_KAT.cntx_psh();
{? REM_ZAS.KAT<>null() & REM_ZAS.KAT().TYP<>null()
|| ETYPY.cntx_psh();
   exec('porsloit_oper','portal_slowniki','add',REM_ZAS.SYMBOL,REM_ZAS.NAZWA,,,REM_ZAS.KAT().TYP().ID_WP);
   ETYPY.cntx_pop()
?};
REM_KAT.cntx_pop();
~~


\rem_zas_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wyzwalacz "Popraw - po" dla tabeli REM_ZAS.
::----------------------------------------------------------------------------------------------------------------------
{? ~_a | do_state()<>1 | ~exec('lic','#b_domain','POR') || return() ?};

_kat_old:=bfld('KAT');
_symbol_old:=bfld('SYMBOL');
_nazwa_old:=bfld('NAZWA');
REM_KAT.cntx_psh();
{? _kat_old<>REM_ZAS.KAT
||
   _typ_old:=exec('FindAndGet','#table',REM_KAT,_kat_old,,"REM_KAT.TYP",null());
:: Usuwam stary rekord ze słownika portalowego
   {? _kat_old<>null() & _typ_old<>null()
   || id_wp_old:=exec('FindAndGet','#table',ETYPY,_typ_old,,"ETYPY.ID_WP",'');
      exec('porsloit_oper','portal_slowniki','del',_symbol_old,_nazwa_old,,,id_wp_old)
   ?};
:: Dodaje nowy rekord do słownika portalowego
   ETYPY.cntx_psh();
   {? REM_ZAS.KAT<>null() & REM_ZAS.KAT().TYP<>null()
   || exec('porsloit_oper','portal_slowniki','add',REM_ZAS.SYMBOL,REM_ZAS.NAZWA,,,REM_ZAS.KAT().TYP().ID_WP)
   ?};
   ETYPY.cntx_pop()
|? (_symbol_old<>REM_ZAS.SYMBOL | _nazwa_old<>REM_ZAS.NAZWA) & REM_ZAS.KAT<>null()
||
:: Modyfikacja rekordu w słowniku po zmianie nazwy/symbolu zasobu
   _typ:=exec('FindAndGet','#table',REM_KAT,REM_ZAS.KAT,,"REM_KAT.TYP",null());
   {? _typ<>null()
   || ETYPY.cntx_psh();
      exec('porsloit_oper','portal_slowniki','put',_symbol_old,_nazwa_old,REM_ZAS.SYMBOL,REM_ZAS.NAZWA
           ,REM_ZAS.KAT().TYP().ID_WP);
      ETYPY.cntx_pop()
   ?}
?};
REM_KAT.cntx_pop();
~~


\rem_zas_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [20.42]
:: OPIS: Wyzwalacz "Usuń - przed" dla tabeli REM_ZAS.
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic','#b_domain','POR')
|| _res:=1;
   REM_KAT.cntx_psh();
   {? REM_ZAS.KAT<>null() & REM_ZAS.KAT().TYP<>null()
   || ETYPY.cntx_psh();
      _res:=exec('porsloit_oper','portal_slowniki','del',REM_ZAS.SYMBOL,REM_ZAS.NAZWA,,,REM_ZAS.KAT().TYP().ID_WP);
      ETYPY.cntx_pop()
   ?};
   REM_KAT.cntx_pop();
   _res
|| 1
?}


\chk_twrkplc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [22.26]
:: OPIS: Walidacja powiązań pomiędzy stanowiskiem a gniazdem
::   WY: '' lub symbol błędnie wypełnionego pola
::----------------------------------------------------------------------------------------------------------------------
_chk:='';
_msg:='';
:: Walidacja powiązań (stanowisko<->gniazdo) w bieżącym rekordzie
{? REM_ZAS.TWRKZBR<>null() & REM_ZAS.TWRKPLC<>null()
|| TWRKZPO.cntx_psh();
   TWRKZPO.index('GRUPA');
   TWRKZPO.prefix(REM_ZAS.TWRKZBR,REM_ZAS.TWRKPLC);
   {? ~TWRKZPO.first()
   || _msg+='\n'+'Stanowisko %1 nie należy do gniazda %2.'@
            [REM_ZAS.TWRKPLC().KOD,REM_ZAS.TWRKZBR().SYMBOL];
      _chk:='TWRKPLC'
   ?};
   TWRKZPO.cntx_pop()
?};
:: Walidacja powiązań (gniazdo<->gniazdo w strukturze zasobów)
_twrkzbr:=REM_ZAS.TWRKZBR;
_twrkzbr_symbol:=REM_ZAS.TWRKZBR().SYMBOL;
_tree:=REM_ZAS.TREE;
REM_ZAS.cntx_psh();
REM_ZAS.index('TREE');
REM_ZAS.prefix();
{? REM_ZAS.seek(_tree)
|| {? _twrkzbr<>null() & REM_ZAS.TWRKZBR<>null() & _twrkzbr<>REM_ZAS.TWRKZBR
   || _msg+='\n'+'Przypisane gniazdo (%1) jest inne niż gniazdo w zasobie nadrzędnym (%2).'@
            [_twrkzbr_symbol,REM_ZAS.TWRKZBR().SYMBOL];
      _chk:='TWRKZBR'
   ?}
?};
REM_ZAS.cntx_pop();
:: Walidacja powiązań (stanowisko<->gniazdo w zasobie nadrzędnym)
_twrkplc:=REM_ZAS.TWRKPLC;
_twrkplc_kod:=REM_ZAS.TWRKPLC().KOD;
_tree:=REM_ZAS.TREE;
REM_ZAS.cntx_psh();
REM_ZAS.index('TREE');
REM_ZAS.prefix();
{? REM_ZAS.seek(_tree)
|| TWRKZPO.cntx_psh();
   TWRKZPO.index('GRUPA');
   TWRKZPO.prefix(REM_ZAS.TWRKZBR,_twrkplc);
   {? ~TWRKZPO.first()
   || _msg+='\n'+'Stanowisko %1 nie należy do gniazda %2 w zasobie nadrzędnym.'@
            [_twrkplc_kod,REM_ZAS.TWRKZBR().SYMBOL];
      _chk:='TWRKPLC'
   ?};
   TWRKZPO.cntx_pop()
?};
REM_ZAS.cntx_pop();

{? _msg<>''
|| {? FUN.ask(_msg+'\n\n'+'Czy na pewno zatwierdzić zapis?'@)
   || _chk:=''
   ?}
?};
_chk

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:40 46fdd16da5f9bcfcac89825c5ddbc63a13075096131073ce97e5880c14ddd368d080f8cd5405bd9a04cf20cb2822f6cbc419b98fca66e4f10a7c001506e481c06e66164385c79c9d23c0eb587eb47e07c7cb9581bb9774d6820dc3e6f264e159011b74927891b200c5ee9c9b0b42eb597f42266342120e1dd81cfba0fc925506
