:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !ppl_pll_rnls.fml
:: Utworzony: 18.11.2015
:: Autor: jaws
::======================================================================================================================
:: Zawartość: Obsługa czynności PPL_PLL_RNLS - Rej. nagłówka listy płac
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja danych nagłówkowych listy płac - główna formuła czynności.
::   WE: ON_ESC [STRING] - Sposób działania przy braku wyboru (opcjonalny)
::          DONE - Czynność zostanie zakończona, a parametry wyjściowe przyjmą wartości puste.
::          KEEP - Czynność zostanie odłożona na listę zadań aby użytkownik mógł do niej wrócić. Oznacza to, że
::                 czynności nie da się zakończyć bez wyboru listy [DOMYŚLNIE].
::          CANCEL - Jeśli czynność jest pierwszą w procesie to po zakończeniu formuły głównej instancja czynności zos-
::                   tanie usunięta. Jeśli czynność jest kolejną w procesie to otrzyma status oczekująca i pozostanie na
::                   liście zadań - czyli tak jak dla KEEP.
::          ERROR - Czynność jest kończona a proces zatrzymywany z ustawioną flagą błędu.
::       DOMAIN [STRING] - Kod dziedziny produktowej (wymagany)
::       F_ZATR [STRING] - Kod formy współpracy (wymagany)
::       STATUS [STRING] - Status nagłówka (domyślnie '')
::          '' lub '*' - wszystkie
::          'T' - zamknięte
::          'N' - otwarte
::   WY:
::----------------------------------------------------------------------------------------------------------------------
::# kind=WE, symbol=ON_ESC, type=STRING, name=Sposób działania przy braku wyboru, required=N, fml_val="exec('on_esc','#bi_stat',{? _a=~~ || 'DONE' || _a ?})"
::# kind=WE, symbol=DOMAIN, type=STRING, name=Kod dziedziny produktowej, required=T, fml_val="exec('wybierz','#b_domain',_a).SYMBOL"
::# kind=WE, symbol=F_ZATR, type=STRING, name=Kod formy współpracy, required=T, fml_val="exec('wybierz','f_zatr',_a)"
::# kind=WE, symbol=STATUS, type=STRING, name=Status nagłówka, required=N, fml_val="exec('status','!ppl_pll_rnls',_a)"
::
::# kind=WY, symbol=O,      type=_O,     name=Wskazanie nagłówka listy płac, required=N
::# kind=WY, symbol=F_ZATR, type=STRING, name=Kod formy współpracy, required=N
::# kind=WY, symbol=R,      type=NUMBER, name=Rok kalendarzowy, required=N
::# kind=WY, symbol=M,      type=NUMBER, name=Miesiąca kalendarzowy, required=N
::# kind=WY, symbol=T,      type=STRING, name=Kod typu listy płac, required=N
::# kind=WY, symbol=LT,     type=STRING, name=Symbol listy płac, required=N
::# kind=WY, symbol=Z,      type=STRING, name=Status listy płac, required=N
::# kind=WY, symbol=RP,     type=NUMBER, name=Rok podatkowy, required=N
::# kind=WY, symbol=MP,     type=NUMBER, name=Miesiąca podatkowy, required=N
::# kind=WY, symbol=RU,     type=NUMBER, name=Rok ubezpieczeniowy, required=N
::# kind=WY, symbol=MU,     type=NUMBER, name=Miesiąca ubezpieczeniowy, required=N
::
::# permissions=F_ZATR,UD_SKL
::# properties=GRP_FIRM

_par:=params_get();
params_set(_par);
_mp:=_par.mp;

{? _mp.pathProc() | _mp.pathTodo()
|| _in:=_par.in;
   _out:=_par.out;

:  zweryfikuj argumenty wywołania
   {? (_err:=exec('args','!ppl_pll_rnls',_in))<>''
   || _mp.error(_err);
      FUN.emsg(_err);
      return()
   ?};

:  wybór nagłówka listy płac
   _ret:=exec('select','lista_plac',_in.DOMAIN,_in.F_ZATR,_in.STATUS);

   _out.O:=_ret.REF;
   {? _out.O<>null
   || SEEK.O:=_out.O;
      _out.F_ZATR:=SEEK.O().F_ZATR().KOD;
      _out.R:=O.R;
      _out.M:=O.M;
      _out.T:=O.T().T;
      _out.LT:=O.LT;
      _out.Z:=O.Z;
      _out.RP:=O.RP;
      _out.MP:=O.MP;
      _out.RU:=O.RU;
      _out.MU:=O.MU
   ?};

   {? _ret.OK
   || _mp.save(,_out);
      _mp.done()

   |? _in.ON_ESC='KEEP'
   || _mp.keep()

   |? _in.ON_ESC='CANCEL'
   || _mp.cancel()

   |? _in.ON_ESC='ERROR'
   || _mp.error('ON_ESC=ERROR')

   || _mp.save(,_out);
      _mp.done()
   ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Rejestracja danych nagłówkowych listy płac - formuła opisu zadania.
::   WE:
::   WY: opis czynności na liście zadań
::----------------------------------------------------------------------------------------------------------------------
'Zarejestruj dane nagłówkowe listy płac'@@


\args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza poprawność argumentów wywołania czynności.
::   WE: _a - wskazanie na tablicę zawierającą argumenty wywołania
::   WY: wskazanie na tablicę parametrów działania dla formuł
::----------------------------------------------------------------------------------------------------------------------
{? _a.ON_ESC=~~ | _a.ON_ESC=''
|| _a.ON_ESC:='KEEP'
?};

{? _a.STATUS=~~
|| _a.STATUS:=''
?};

{? (',DONE,KEEP,CANCEL,ERROR,'*(','+_a.ON_ESC+','))=0
|| 'Błędna wartość argumentu "ON_ESC": \''+_a.ON_ESC+'\'.'

|? _a.F_ZATR='' | __F_ZATR.find(_a.F_ZATR)=null
|| 'Błędna wartość argumentu "F_ZATR": \''+_a.F_ZATR+'\'.'

|? ('TN*'*_a.STATUS)=0
|| 'Błędna wartość argumentu "STATUS": '+_a.STATUS+'.'

|| ''
?}


\error
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zwraca treść komunikatu błędu
::   WE:
::   WY: treść komunikatu
::----------------------------------------------------------------------------------------------------------------------
'Zarejestrowanie danych nagłówkowych listy płac nie jest możliwe.'


\status
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa edycji parametru STATUS
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_TAB:=tab_tmp(,'STATUS','STRING[1]','Status nagłówka'@);

_wnd:=_TAB.mk_edit('Czynność %1'@['PPL_PLL_RNLS'],0,'#ppl_pll_rnls');
_TAB.win_esep(_wnd,'Parametr %1'@['STATUS']);
_TAB.win_efld(_wnd,,'STATUS',,,,,,,,,'radio-buttons',,
   'Zamknięte'@,"'T'",
   'Otwarte'@,"'N'",
   'Wszystkie'@, "'*'"
);
exec('ok_esc','#window',_TAB,_wnd);
_TAB.win_edit(_wnd);

_ini:='';
_TAB.STATUS:=
   {? var_pres('_a')=type_of('')
   || {? _a=''
      || _a:='*'
      ?};
      _ini:=_a;
      _a
   || '*'
   ?};

{? _TAB.edit()
|| _TAB.STATUS
|| _ini
?}


\kt_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyzwalacz "usuń przed" tabeli KT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('del_ndx','o_xpar',KT.idadd_value())


\o_modb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed modyfikacją rekordu tabeli O i po edycji niektórych pól. Normalizacja danych.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? O.F_ZATR().KOD='Z'
|| O.RP:=O.RU:=O.R;
   O.MP:=O.MU:=O.M
?};

_r:={? O.R>=1900 || $O.R+2 || '__' ?};
_m:={? O.M>=1 & O.M<=12 || ('0'+$O.M)+2 || '__' ?};
_t:={? O.T<>null || 3+(O.T().T+'___') || '___' ?};

O.LT:='L'+_r+_m+_t;
O.LT:=-O.LT;

1


\o_addb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "dołącz przed" tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_modb','!ppl_pll_rnls')


\o_adda
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Dołącz - po" dla tabeli O.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',O)
?};
~~


\o_putb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw przed" tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_modb','!ppl_pll_rnls')


\o_puta
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "popraw po" tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',O);
   {? exec('lic','#b_domain','POR') &
      ((O.Z<>bfld('Z') & O.PORTAL='T') | (O.Z='T' & O.PORTAL<>bfld('PORTAL')) |
       (O.Z='T' & O.PORTAL='T' & O.D<>bfld('D')))
::    Jeżeli zmienił się stan zamknięcia listy przeznaczonej do prezentacji na portalu lub
::    dla zamkniętej listy zmieniła się flaga prezentacji na portalu a klient posiada licencję na dziedzinę POR,
::    to aktualizujemy znaczniki modyfikacji na tabeli O_P.
   || O_P.cntx_psh();
      O_P.index('UNIQUE');
      O_P.prefix(O.ref());
      {? O_P.first()
      || O_P.trig_off('*','*');
         {!
         |? O_P.put(,1);
            O_P.next()
         !};
         O_P.trig_on('*','*')
      ?};
      O_P.cntx_pop()
   ?}
?};
~~


\o_delb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wyzwalacz "usuń przed" tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_dic:=exec('ref_storno','ext_slo');
exec('del_ndx','#table',O_STAT,'TECH',O.ref()) &
exec('del_ndx','#table',O_O,'NAD_LT',O.ref(),_dic) &
exec('del_ndx','#table',O_O,'POD_LT',O.ref(),_dic) &
exec('del_ndx','o_xpar',O.idadd_value())


\o_dela
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.28]
:: OPIS: Wyzwalacz "Usuń - po" dla tabeli O.
::   WE: _a [INTEGER] - Wynik właściwej operacji.
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? _a & do_state()=1
|| exec('last_mod_set','#table',O)
?};
~~


\o_wydzial_p
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Wzorzec dla pola WYDZIAL tabeli O
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('szukaj_ud_typ','schemat','PODZORG');
''


\o_wydzial_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PK [12.30]
:: OPIS: Wartość początkowa dla pola WYDZIAL w tabeli O
::   WE:
::   WY: wskazanie na rekord tabeli UD_SKL
::  OLD: \O_WYDZIAL/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
{? REF.FIRMA=REF.GRUPA
|| exec('ud_skl_firma','schemat','PODZORG')
|? __F_ZATR.O='Z'
|| exec('ud_skl_firma','schemat','PODZORG')
|| UD_SKL.ref()
?}


\o_wydzial_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed redakcją pola WYDZIAL w tabeli O
::   WE:
::   WY: 1 - pole dostępne do edycji
::       0 - pole zablokowane
::----------------------------------------------------------------------------------------------------------------------
{? exec('o_rmt_be','!ppl_pll_rnls')
|| REF.FIRMA<>REF.GRUPA
?}


\edit_var_o_wyd_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed wyświetleniem jednostki organizacyjnej nagłówka listy płac.
::  OLD: \wyd_bl/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
EDIT_VAR.O_WYD:=O.WYDZIAL().SYMBOL


\edit_var_o_wyd_f3
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Obsługa klawisza F3 dla wybory jednostki organizacyjnej nagłówka listy płac.
::  OLD: \wyd_bl/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
exec('ud_def_symbol_f3','schemat',,,'PPL',2)


\edit_var_o_wyd_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2006]
:: OPIS: Przed redakcją pola O_WYD zmiennej EDIT_VAR.
::----------------------------------------------------------------------------------------------------------------------
exec('o_wydzial_be','!ppl_pll_rnls')


\edit_var_o_wyd_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2006]
:: OPIS: Po redakcji pola O_WYD zmiennej EDIT_VAR.
::  OLD: \wyd_spr/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
O.WYDZIAL:=exec('ud_skl_symbol_ae','schemat','PODZORG','PPL',2);

_odd:=null;
SKIDXODD.cntx_psh();
SKIDXODD.index('UD_SKL');
SKIDXODD.prefix();
{? SKIDXODD.find_key(O.WYDZIAL)
|| _odd:=SKIDXODD.ODD
?};
SKIDXODD.cntx_pop();

{? _odd<>null
|| {? O.ODDZIAL=null | (O.ODDZIAL<>_odd & FUN.ask(
         'Jednostka księgowa jest niezgodna z jednostką właściwą dla wybranej jednostki organizacyjnej.\n\n'
         'Czy przypisać właściwą jednostkę księgową?'@
      ))
   || O.ODDZIAL:=_odd
   ?};
   {? O.ODDZIAL<>null() & O.ODDZIAL().FIRMA<>REF.FIRMA
   || FUN.emsg(
         'Jednostka księgowa jest przypisana do firmy "%1".\n'
         'Należy wskazać jednostkę z firmy "%2".'@
         [O.ODDZIAL().FIRMA().SYMBOL,REF.FIRMA().SYMBOL]
      );
      return(0)
   ?}
?};
1


\o_rmt_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed redakcją pól, których edycja powinna być zablokowana jeśli lista płac została zamknięta.
::   WE:
::   WY: wynik testu zamknięcia listy płac
::       1 - otwarta
::       0 - zamknięta
::----------------------------------------------------------------------------------------------------------------------
O.Z<>'T'


\o_rmt_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po redakcji pól tabeli O. Na podstawie kalendarza przypisanego do kryterium (jeśli zostało określone)
::       lub kalendarza 'standard' wylicza liczbę dni i godzin roboczych w miesiącu listy płac.
::  OLD: \dnilisty/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_fld:=cur_afld();
_val:=fld();
{? (_fld='R' | _fld='RP' | _fld='RU') & _val<>0
|| _max_rok:=exec('max_rok','#datetime');
   {? _val<0
   || fld(0);
      return(1)
   |? _val<1900
   || __CHK.err_fld(O,_fld,1,'Rok musi być późniejszy od 1900.'@);
      return(0)
   |? _val>_max_rok
   || __CHK.err_fld(O,_fld,1,'Rok nie może być późniejszy od %1.'@[$_max_rok]);
      return(0)
   ?}
|? (_fld='M' | _fld='MP' | _fld='MU') & _val<>0
|| {? fld()<0
   || fld(0);
      return(1)
   |? fld()<1 | fld()>12
   || __CHK.err_fld(O,_fld,1,'Miesiąc musi być wartością z przedziału od 1 do 12.'@);
      return(0)
   ?}
?};

{? O.T=null
|| exec('o_modb','!ppl_pll_rnls');
   O.DK:=O.DR:=O.GR:=0;
   return(1)
?};

{? O.F_ZATR().KOD='Z'
|| O.RP:=O.MP:=O.R;
   O.MP:=O.MP:=O.M
?};

exec('o_modb','!ppl_pll_rnls');

O.DK:=O.DR:=O.GR:=0;

exec('__KAL','object');
__KAL.set_cal(O.T().KA().NAZWA);

_od:=date(O.R,O.M,1);
_do:=date(O.R,O.M,0);

O.DK:=_do-_od+1;
O.DR:=__KAL.w_days(_od,_do);
O.GR:=__KAL.w_hours(_od,_do);

1


\o_t_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Po edycji pola T w wierszu tabeli O.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('o_rmt_ae','!ppl_pll_rnls');
exec('o_ustaw_par_btn','!ppl_pll_rnls');

{? O.T=null
:: brak typu
|| return(1)
?};

_par:=params_get();
{? type_of(_par)=type_of(~~) | var_pres('O_BUFFER',_par)<100
:: brak bufora pierwotnych wartości pól
|| return(1)
?};

_buf:=_par.O_BUFFER;
_rid:=_buf.IDREK;

{? _buf.T=null
:: aktualizuj bufor
|| _buf.T:=O.T;
   return(1)
?};

{? ~exec('jest','o_xpar',_rid) | _buf.T=O.T
:: brak parametrów lub zmiany kryterium
|| return(1)
?};

{? FUN.ask(
      'Zmieniono "Typ" nagłówka listy płac.\n'
      'Czy zaktualizować zestawy parametrów?'
   )
|| exec('del_ndx','o_xpar',_rid);
   exec('kopiuj','o_xpar',KT.idadd_value())
?};

_buf.T:=O.T;

1


\o_d_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [18.22]
:: OPIS: Po edycji pola D w wierszu tabeli O. Zależnie od podanej daty ustala wartości pól RP, MP, RU i MU.
::       Realizacja zlecenia 1525865519000000
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? O.D=date(0,0,0) | O.Z='T'
|| return(1)
?};

_rd:=O.D~1;
_md:=O.D~2;

O.RP:=_rd;
O.MP:=_md;

O.RU:=_rd;
O.MU:=_md;

1


\o_f_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [2010]
:: OPIS: Przed redagowaniem pola F tabeli O
::  OLD: \of/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? fld()=''
|| fld(KT.F)
?};
1


\o_dzus_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [8.60]
:: OPIS: Przed redakcją pola DZUS tabeli O. Ustala datę przekazania składek na ubezpieczenia społeczne na podstawie
::       istniejących list.
::  OLD: \datazus/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~O.RU | ~O.MU | O.DZUS<>date(0,0,0)
|| return()
?};

O.cntx_psh();
O.index('LISTYPLU');
O.prefix(exec('ref_firma','ustawienia'),O.F_ZATR().KOD,O.RU,O.MU);
_loop:=O.first();
{!
|? _loop
|! {? O.DZUS<>date(0,0,0)
   || _dzus:=O.DZUS;
      O.cntx_pop();
      O.DZUS:=_dzus;
      return()
   ?};
   _loop:=O.next()
!};
O.cntx_pop()


\o_dus_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: KGS [2011]
:: OPIS: Przed redakcją pola DUS tabeli O. Ustala datę przekazania zaliczki na podatek dochodowy na podstawie istnieją-
::       cych list.
::  OLD: \dataus/kali.fml
::----------------------------------------------------------------------------------------------------------------------
{? ~O.RP | ~O.MP | O.DUS<>date(0,0,0)
|| return()
?};

O.cntx_psh;
O.index('LISTYPLP');
O.prefix(exec('ref_firma','ustawienia'),O.F_ZATR().KOD,O.RP,O.MP);
_loop:=O.first();
{!
|? _loop
|! {? O.DUS<>date(0,0,0)
   || _dus:=O.DUS;
      O.cntx_pop();
      O.DUS:=_dus;
      return()
   ?};
   _loop:=O.next()
!};
O.cntx_pop()


\o_wb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem okienka tabeli O.
::   WE:
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
exec('kt_f_set','!ppl_pll_rnls');
1


\o_begin_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przygotowanie okna i tabeli do edycji.
::   WE: _a [STRING] - akronim okienka redagowania
::   WY: wskazanie na tablicę oryginalnych formuł przypisanych do pól
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('save_fml_all','#field',O);
_kod:=O.F_ZATR().KOD;

O.win_edit(_a);

_pt:='PATTERN';
O.fld_fml('F',_pt,"'U&'");
O.fld_fml('T',_pt,{? _kod='Z' || "'\Z\L'" || "'UUU&'" ?});

exec('o_fld_opt','!ppl_pll_rnls',_a,_kod);

_buf


\o_end_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywraca obsługę pól po edycji.
::   WE: _a [STRING] - akronim okienka wertowania
::       _b [OBJECT] - wskazanie na tablicę oryginalnych formuł przypisanych do pól
::----------------------------------------------------------------------------------------------------------------------
exec('o_fld_opt','!ppl_pll_rnls',_a,'');
exec('restore_fml_all','#field',O,_b)


\o_fld_opt
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Ustala dostępność pól RP, MP, RU, MU, DKURS, B_ODD i KRAJE tabeli O oraz pola EDIT_VAR.O_WYD
::       zależnie od formy współpracy.
::   WE: _a [STRING] - akronim okienka redakcji
::       _b [STRING] - kod formy współpracy
::  OLD: \O_zlec/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
_fZatr:=_b;
_nzc:=$(_fZatr<>'Z');
_otwarta:=(O.Z<>'T');

_be:='BEFORE_EDIT';
: zmiany w dostępności pól
{? _fZatr='Z'
|| EDIT_VAR.fld_fml('O_WYD',_be,$_nzc);
   O.fld_fml('RP',_be,$_nzc);
   O.fld_fml('MP',_be,$_nzc);
   O.fld_fml('RU',_be,$_nzc);
   O.fld_fml('MU',_be,$_nzc)
?};

O.efld_opt(_a,'mark='+_nzc,EDIT_VAR,'O_WYD');
O.efld_opt(_a,'editable=%1'[{? (#_nzc & _otwarta) || '1' || 'grayed' ?}],,'DKURS');
_parOddel:=(PAR_SKID.get(261)='T' & _otwarta);
_grayed:={? (#_nzc & _parOddel) || '1' || 'grayed' ?};
O.efld_opt(_a,'editable=%1'[_grayed],,'KRAJE');
O.efld_opt(_a,'enable=%1'[$(O.KRAJE=null())],,'B_ODD');
O.efld_opt(_a,'editable=%1'[_grayed],,'B_ODD');
~~


\o_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Weryfikuje poprawność danych nagłówka listy płac.
::   WE: _a [INTEGER] - tryb modyfikacji danych
::          0 - dołączanie
::          1 - poprawianie
::   WY: zgodna ze specyfikacją dla akcji "rekord po" tabel
::  OLD: \spr_list/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(O,_a,,'WYDZIAL','ODDZIAL','T','F','R','M','D','RP','MP','RU','MU','DZUS');

{? type_of(_chk)=type_of(0)
|| {? _chk=0 || return(0) ?}
|| return(
      {? _chk='WYDZIAL'
      || {? REF.FIRMA<>REF.GRUPA
         || 'O_WYD'
         ?}
      || _chk
      ?}
   )
?};

{? __F_ZATR.O='P'
|| _param:=exec('get_par','#parametr',266);
   {? type_of(_param)=type_of('')
   || {? +_param=10 & #(4+_param)>0 & #(2+(5-_param))>0
      || _param:=date(#(4+_param),#(2+(5-_param)),1)
      || _param:=date(0,0,0)
      ?}
   || _param:=date(0,0,0)
   ?}
|| _param:=date(0,0,0)
?};

{? __CHK.record(O,1,'DR','GR')<>''
|| FUN.emsg('Brak kalendarza %1 na rok %2.'@[O.T().KA().NAZWA,$O.R]);
   return(0)
?};

_validate:="
   {? ($('O.'+_a))()<1900
   || __CHK.err_fld(O,_a,1,'Rok musi być późniejszy od 1900.'@);
      _a
   |? ($('O.'+_b))()<1 | ($('O.'+_b))()>12
   || __CHK.err_fld(O,_b,1,'Miesiąc musi być wartością z przedziału od 1 do 12.'@);
      _b
   || ''
   ?}
";

{? (_chk:=_validate('R','M'))<>''   || return(_chk)
|? (_chk:=_validate('RP','MP'))<>'' || return(_chk)
|? (_chk:=_validate('RU','MU'))<>'' || return(_chk)
?};

{? O.D<>date(0,0,0) & O.D<date(O.R,O.M,1)
|| __CHK.err_fld(O,'D',1,'Data rozliczenia kosztowego musi być późniejsza od %1.'@[$date(O.R,O.M,1)]);
   O.D:=date(O.R,O.M,0);
   return('D')
?};

{? ((O.R*12+O.M)>(O.RP*12+O.MP) | (O.RP*12+O.MP)>(O.R*12+O.M+1)) &
   ~FUN.ask('Czy podatek za %1 rozliczyć w miesiącu %2?'@[date(O.R,O.M,0)$8,date(O.RP,O.MP,0)$8])
|| return('RP')
?};

{? ((O.R*12+O.M)>(O.RU*12+O.MU) | (O.RU*12+O.MU)>(O.R*12+O.M+1)) &
   ~FUN.ask('Czy ubezpieczenia za %1 rozliczyć w miesiącu %2?'@[date(O.R,O.M,0)$8,date(O.RU,O.MU,0)$8])
|| return('RU')
?};

{? (O.D<date(O.RP,O.MP,1) | O.D>date(O.RP,O.MP,0)) &
   FUN.ask('Data wypłaty powinna być zgodna z miesiącem i rokiem podatkowym listy,'
           '\nze względu na konieczność prawidłowego naliczenia przychodów od wpłat PPK.'
           '\nCzy powrócić do edycji?'@)
|| return('D')
?};

{? _param>date(0,0,0) & _param<=date(O.RP,O.MP,1) & O.F_ZATR().KOD='P'
|| {? type_of(_param:=exec('get_par','#parametr',267))=type_of('') & _param='T'
   || _znlisty:=~-exec('spr_num_listy','lista_plac',O.RP,O.MP,O.N,O.D,-menu_txt,O.T().T,O.F);
      {? _znlisty<>''
      || FUN.emsg('Znaleziono nagłówek listy płac: %1 z taką samą datą wypłaty i numerem listy.\n'@[_znlisty]+
            'Należy wprowadzić inny numer listy.'@);
         return('N')
      ?}
   ?}
?};

:: Sprawdzenie czy zmieniło się jedno z pól: data rozliczenia kosztowego, miesiąc podatkowy, rok podatkowy:
{? -menu_txt='popraw'
|| O.cntx_psh();
   O.seek(O.ref());
   _oldD:=O.D;
   _oldRP:=O.RP;
   _oldMP:=O.MP;
   O.cntx_pop();
   exec('czytaj','#stalesys',O.D,KST_PPK,'POD_WMW');
   {? _oldMP<>O.MP | _oldRP<>O.RP | (KST_PPK.POD_WMW='T' & _oldD<>O.D)
   || FUN.emsg('Zostały zmienione wartości mające wpływ na rozliczenie przychodów od PPK.\n'
               'Należy przeliczyć listę płac.'@)
   ?}
?};

{? exec('o_czyzamk_mies','lista_plac')
|| return(FUN.ask('Miesiąc %1 został zamknięty.\nKontynuować działanie?'@[(date(O.R,O.M,0)$8)]))
?};
1


\o_edit_buf
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Tworzy i wypełnia tablicę nazwaną na podstawie bufora tabeli O.
::   WE: _a _O - wskazanie wiersza tabeli O
::       _b STRING - identyfikator rekordu
::   WY: wskazanie tablicy
::----------------------------------------------------------------------------------------------------------------------
_fml:="obj_new('REF','IDREK'";
_len:=O.fld_num();
{! _ii:=1.._len
|! _fml+=',\'%1\''[O.fld_acr(_ii)]
!};
:: utwórz i wypełnij tablicę
_buf:=($(_fml+')'))();
_buf.REF:=_a;
_buf.IDREK:=_b;
{! _ii:=1.._len
|! _buf[_ii+2]:=O[_ii]
!};

_buf


\o_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Dołącz przed okienek wertowania tabeli O.
::  OLD: \o_upr_ba/listplac.fml
::  OLD: \o_upr_aa/listplac.fml
::  OLD: \opis_lis/kali.fml
::----------------------------------------------------------------------------------------------------------------------
O.blank();

:: obsługa parametrów listy
_rid:=exec('create_rid','o_xpar',O);
_exe:=exec('set_blank_rid','o_xpar',_rid);
params_set('O_BUFFER',exec('o_edit_buf','!ppl_pll_rnls',null,_rid));

: zachowaj aktualne formuły
_buf:=exec('save_fml_all','#field',O);

_wnd:='RED';
O.win_edit(_wnd);
: ustal dostępność pól i przycisków
exec('o_fld_opt','!ppl_pll_rnls',_wnd,O.F_ZATR().KOD);
exec('o_ustaw_par_btn','!ppl_pll_rnls');

: kryteria dostępne do wyboru (nie storno)
exec('kt_f_set','!ppl_pll_rnls','STORNO_N');

{? O.edit("exec('o_ae','!ppl_pll_rnls',0)") & O.add()
|| exec('put_stat','lista_plac',O.ref,'LSLP_AKT',1);
   exec('put_stat','lista_plac',O.ref,'ZBLP_AKT',1);
   exec('o_dpb','!ppl_pll_rnls');
:: obsługa parametrów listy płac
   {? ~exec('jest','o_xpar',_rid)
::    uzupełnij parametry z kryterium
   || exec('kopiuj','o_xpar',O.T().IDADD)
   ?};
:: powiąż parametry z utworzonym nagłówkiem
   exec('utrwal','o_xpar',_rid,O.idadd_value())
||
:: usuń zapisy tymczasowe
   exec('del_ndx','o_xpar',_rid)
?};

: przywróć poprzedni stan
exec('o_fld_opt','!ppl_pll_rnls',_wnd,'');
exec('restore_fml_all','#field',O,_buf);
exec('set_blank_fml','o_xpar',_exe);

exec('kt_f_set','!ppl_pll_rnls');
O.f_rfresh()


\o_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Popraw przed okienek wertowania tabeli O.
::  OLD: \o_upr_ba/listplac.fml
::  OLD: \o_upr_aa/listplac.fml
::  OLD: \O_WYD_BE/listplac.fml
::  OLD: \lsedit/kali.fml
::  OLD: \_lsedit/kali.fml
::  OLD: \opis_lis/kali.fml
::----------------------------------------------------------------------------------------------------------------------
O.get();

_mod:=~(exec('jest_ls','lista_plac',O.ref())
        | exec('jest_zb','lista_plac',O.ref())
        | (ZB_OPIS.index('LISTA');
          ZB_OPIS.prefix(O.ref());
          ZB_OPIS.first()
          )
       );

:: obsługa parametrów listy
_rid:=exec('create_rid','o_xpar',O);
_exe:=exec('set_blank_rid','o_xpar',_rid);
params_set('O_BUFFER',exec('o_edit_buf','!ppl_pll_rnls',O.ref(),_rid));

_wnd:='RED';
: ustal dostępność pól i przycisków
_buf:=exec('o_begin_edit','!ppl_pll_rnls',_wnd);
exec('o_ustaw_par_btn','!ppl_pll_rnls');

_be:='BEFORE_EDIT';
: zmiany w dostępności pól
EDIT_VAR.fld_fml('O_WYD',_be,$$_mod);
O.fld_fml('R',_be,$$_mod);
O.fld_fml('M',_be,$$_mod);
O.fld_fml('T',_be,$$_mod);

: zachowaj informacje o rozliczeniu
_O:=obj_new('RU','MU','RP','MP');
_O.RU:=O.RU;
_O.MU:=O.MU;
_O.RP:=O.RP;
_O.MP:=O.MP;

: kryteria dostępne do wyboru (nie storno)
exec('kt_f_set','!ppl_pll_rnls','STORNO_N');

{? O.edit("exec('o_ae','!ppl_pll_rnls',1)") & O.put()
|| {? _O.RU<>O.RU & _O.MU<>O.MU & _O.RP<>O.RP & _O.MP<>O.MP
   || FUN.emsg(
         'Ze względu na modyfikację danych należy wykonać zamknięcie miesiąca\n'
         'zarówno dla miesiąca sprzed zmiany jak i dla aktualnego miesiąca.'@
      )
   ?};
   exec('o_dpb','!ppl_pll_rnls')
?};

: przywróć poprzedni stan
EDIT_VAR.fld_fml('O_WYD',_be,"*");
exec('o_end_edit','!ppl_pll_rnls',_wnd,_buf);
exec('set_blank_fml','o_xpar',_exe);

exec('kt_f_set','!ppl_pll_rnls');
O.f_rfresh()


\o_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Usuń przed okienek wertowania tabeli O.
::  OLD: \o_upr_ba/listplac.fml
::  OLD: \o_upr_aa/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
_msg:='';
{? exec('jest_ls','lista_plac',O.ref())<>0
|| _msg:='Znaleziono składniki listy płac.'

|? exec('jest_zb','lista_plac',O.ref())<>0
|| _msg:='Znaleziono składniki zbiorówki(-ek) listy płac.'

|? exec('jest_rn','lista_plac',O.ref())<>0
|| _msg:='Lista rozlicza nieobecności.'

|? exec('jest_korn','lista_plac',O.LT)<>0
|| _msg:='Lista rozlicza korekty ZUS.'

|| ''
?};

{? _msg=''
|| {? exec('o_czyzamk_mies','lista_plac')
   || {? FUN.ask('Miesiąc %1 został zamknięty.\nKontynuować działanie?'@[(date(O.R,O.M,0)$8)])
      || exec('del_conf','#table',O) & O.del(,1)
      ?}
   || exec('del_conf','#table',O) & O.del(,1)
   ?}
|| FUN.info(_msg+'\nUsunięcie zapisu niemożliwe.')
?}


\o_zamknij_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed zamknięciem listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? O.sel_size()=0
|| {? O.Z='T'
   || FUN.info('Lista płac jest zamknięta.'@);
      0
   || _ok:=1;
      {? O.F_ZATR().KOD='P'
      || _param:=exec('get_par','#parametr',266);
         {? type_of(_param)=type_of('')
         || {? +_param=10 & #(4+_param)>0 & #(2+(5-_param))>0
            || _param:=date(#(4+_param),#(2+(5-_param)),1)
            || _param:=date(0,0,0)
            ?}
         || _param:=date(0,0,0)
         ?};
         _cq:='Czy kontynuować procedurę zamknięcia listy płac?'@;
         {? _param>date(0,0,0) & _param<=date(O.RP,O.MP,1)
         || {? type_of(_param:=exec('get_par','#parametr',267))=type_of('') & _param='T'
            || {? ~exec('weryfikuj_lp_O','lista_plac')
               || _ok:=FUN.ask('%1\n\n%2'[
                     'Znaleziono pracowników, dla których należy ponownie przeliczyć listy płac.'@,
                     _cq
                  ])
               ?}
            ?}
         ?};
         {? exec('czy_storno_o','lista_pow',O.ref())
         || _ok:=FUN.ask('%1\n%2\n\n%3'[
               'UWAGA!'@,
               'Zamknięcie listy płac, która jest stornem spowoduje nieodwracalne usunięcie informacji\n'
               'utworzonych podczas naliczania wynagrodzeń współpracowników na oryginalnej liście płac.',
               _cq
            ])
         ?}
      ?};
      _ok & FUN.ask('Lista płac zostanie zamknięta.\nKontynuować działanie?'@)
   ?}
|| 1
?}


\o_zamknij_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Zamyka listę płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? O.sel_size()=0
|| progress(,'Proszę czekać. Trwa zamykanie listy płac...'@,FUN.TYT,1)
?};

:: komunikaty
_done:="FUN.info('Lista płac została zamknięta.'@)";
_fail:="FUN.emsg('Zamknięcie listy płac nie powiodło się.'@)";

:: ustal argument wywołania wtyczki
_par:=params_get();
_arg:=
   {? type_of(_par)<100 | var_pres('cntx',_par)<100 | var_pres('zmmc',_par.cntx)<100
   || exec('ppl_pll_zmmc_001_arg','ppl')
   || _par.cntx.zmmc
   ?};
_arg.O:=O.ref();
:: sprawdź możliwości zamknięcia listy płac
{? Plugin.run('PPL_PLL_ZMMC_001',_arg)=0
|| {? O.sel_size()=0
   || prgs_clr();
      _fail();
      exec('ppl_pll_zmmc_001_rap','ppl',_arg,0)
   ?};
   return()
?};

_ok:=0;
O.Z:='T';
{? O.put()
|| {? exec('kzup_licz','lista_zamk',O.ref())
   || Plugin.run('PPL_PLL_ZMMC_002',O.ref());
      _ok:=1
   || O.Z:='N';
      O.put()
   ?}
?};

{? _ok<>0
:: zamykanie storna listy płac
|| exec('storno_zamknij','lista_pow',O.ref())
?};

{? O.sel_size()=0
|| prgs_clr();
   {? _ok=0
   || _fail()
   || _done()
   ?}
?}


\o_zamknij_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupowym zamknięciem list płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Listy płac zostaną zamknięte.\nKontynuować działanie?'@)


\o_zamknij_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po grupowym zamknięciem list płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
prgs_clr();

:: komunikaty
_done:="FUN.info('Zakończono zamykanie list płac.'@)";
_fail:="FUN.emsg('Zamknięcie list płac nie powiodło się.'@)";

:: raportuj
_par:=params_get();
{? type_of(_par)>100 & var_pres('cntx',_par)>100 & var_pres('zmmc',_par.cntx)>100
|| _arg:=params_get().cntx.zmmc;
   {? _arg.RAPORT.first()
   || _fail();
      exec('ppl_pll_zmmc_001_rap','ppl',_arg,1)
   || _done()
   ?}
|| _done()
?}


\o_otworz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed otwarciem listy płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? O.sel_size()=0
|| {? O.Z='N'
   || FUN.info('Lista płac jest otwarta.'@);
      0
   |? O.DOK<>''
   || FUN.info('Lista płac jest zadekretowana.'@);
      0
   |? exec('o_czyzamk_mies','lista_plac')
   || FUN.ask('Próba otwarcia listy płac z zamkniętego miesiąca (%1).\nKontynuować działanie?'@[(date(O.R,O.M,0)$8)])
   || FUN.ask('Lista płac zostanie otwarta.\nKontynuować działanie?'@)
   ?}
|| 1
?}


\o_otworz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Otwiera listę płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? O.sel_size()=0
|| progress(,'Proszę czekać. Trwa otwieranie listy płac...'@,FUN.TYT,1)
?};

_ok:=0;
O.Z:='N';
{? O.put()
|| {? ~exec('kzup_licz','lista_zamk',O.ref())
   || O.Z:='T';
      O.put()
   || _ok:=1
   ?}
?};

{? O.sel_size()=0
|| prgs_clr();
   {? _ok=0
   || FUN.emsg('Otwarcie listy płac nie powiodło się.'@)
   || FUN.info('Lista płac została otwarta.'@)
   ?}
?}


\o_otworz_gb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed grupowym otwarciem list płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
FUN.ask('Listy płac zostaną otwarte.\nKontynuować działanie?'@)


\o_otworz_ga
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Po grupowym otwarciem list płac.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
prgs_clr();
FUN.info('Zakończono otwieranie list płac.'@)


\o_zadania_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [17.00]
:: OPIS: Obsługa akcji "Zadania - przed" dla okna WER w tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('todo_select','#b__box',O.uidref())


\o_sb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Status przed okienek wertowania tabeli O.
::  OLD: \o_upr_ba/listplac.fml
::  OLD: \o_upr_aa/listplac.fml
::  OLD: \stat/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
USERS.cntx_psh();
O_STAT.cntx_psh();
O_STAT.index('KOD');
O_STAT.prefix(O.ref());
O_STAT.index('NAZWA');
O_STAT.prefix(O.ref());
O_STAT.win_sel('WER');
O_STAT.hdr_sel(' '+~-O.LT);
O_STAT.select();
O_STAT.cntx_pop();
USERS.cntx_pop()


\kt_f_set
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Ustawia filtr zawartości tabeli KT zgodny z ustawieniem indeksu F_ZATR i ograniczeniem dziedziny do bieżącej
::       firmy i właściwej formy współpracy z ewentualnym, dodatkowym ograniczeniem określonym parametrem.
::   WE: _a [STRING] - identyfikator dodatkowego ograniczenia
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_fid:={? var_pres('_a')=type_of('') & _a<>'' || _a || '' ?};

_col:='T';
_def:='KT.FIRMA=:_a and KT.F_ZATR=:_b';

KT.prefix();
{? _fid='STORNO_N'
|| _ext:='('
      'KT.IDADD not in ( '
      '  select O_ZPAR.IDREK '
      '  from O_ZPAR '
      '  where O_ZPAR.FIRMA=:_a and O_ZPAR.O_DPAR=:_c'
      ') or '
      'KT.IDADD in ( '
      '  select O_ZPAR.IDREK '
      '  from O_ZPAR '
      '  where O_ZPAR.FIRMA=:_a and O_ZPAR.O_DPAR=:_c and O_ZPAR.WARTOSC=\'N\''
      '))';
   KT.f_set(_col,,'%1 and %2'[_def,_ext],
      exec('ref_firma','ustawienia'),
      exec('f_zatr_o','personel'),
      exec('szukaj','o_dpar',exec('kod_storno','ext_slo'))
   )

|? _fid='STORNO_T'
|| _ext:=
      'KT.IDADD in ( '
      '  select O_ZPAR.IDREK '
      '  from O_ZPAR '
      '  where O_ZPAR.FIRMA=:_a and O_ZPAR.O_DPAR=:_c and O_ZPAR.WARTOSC=\'T\''
      ')';
   KT.f_set(_col,,'%1 and %2'[_def,_ext],
      exec('ref_firma','ustawienia'),
      exec('f_zatr_o','personel'),
      exec('szukaj','o_dpar',exec('kod_storno','ext_slo'))
   )

|| KT.f_set(_col,,_def,
      exec('ref_firma','ustawienia'),
      exec('f_zatr_o','personel')
   )
?};

~~


\kt_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Sprawdza poprawność definicji kryterium listy płac.
::   WE: _a [INTEGER] - tryb modyfikacji
::          0 - dołączanie
::          1 - poprawianie
::   WY: zgodne ze specyfikacją dla akcji "rekord po"
::  OLD: \spr_kt/kali.fml
::  OLD: \po_l/kali.fml
::----------------------------------------------------------------------------------------------------------------------
_chk:=__CHK.table(KT,_a,,'T','N','F','M','L','KA');
{? (type_of(_chk)=type_of('') & _chk<>'') | (type_of(_chk)=type_of(0) & _chk=0)
|| return(_chk)
?};

KT.T:=|(~-KT.T);
KT.L:=|(~-KT.L);

{? +KT.T<>3
|| FUN.emsg('Symbol typu musi składać się z dokładnie trzech znaków.'@);
   return('T')
?};

_ktt:=KT.T;
{! _nc:=1..+KT.T
|! _ascii:=%(_nc+KT.T+1);
   {? ~((_ascii>=48 & _ascii<=57) | (_ascii>=65 & _ascii<=90))
   || FUN.emsg('Symbol typu może zawierać wyłącznie cyfry arabskie i litery alfabetu łacińskiego.'@);
      return('T')
   ?}
!};

{? 2+KT.T='ZL' & KT.F_ZATR().KOD<>'Z'
|| FUN.emsg('Symbole typów rozpoczynające się od "ZL" są zarezerwowane dla formy współpracy "Z".'@);
   return('T')
?};

{? KT.L<>'' & KT.L<>'*'
|| STR.split(KT.L,',');
   KT.cntx_psh();
   KT.index('KRYTERIA');
   KT.prefix(exec('ref_firma','ustawienia'));
   {!
   |? STR.next()
   |! _ktt:=form(STR.get_word());
      {? ~KT.find_key(_ktt)
      || FUN.emsg('Typ o symbolu "%1" nie istnieje.'@[_ktt]);
         KT.cntx_pop();
         return('L')
      ?}
   !};
   KT.cntx_pop()
?};

1


\kt_begin_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przygotowanie okna i tabeli do edycji.
::   WE: _a [STRING] - akronim okienka wertowania
::   WY: wskazanie na tablicę oryginalnych formuł przypisanych do pól
::----------------------------------------------------------------------------------------------------------------------
_buf:=exec('save_fml_all','#field',KT);

_ae:='AFTER_EDIT';
_pt:='PATTERN';

_fml:="fld(~-|fld)";
KT.fld_fml('T',_ae,_fml);
KT.fld_fml('L',_ae,_fml);

KT.fld_fml('F',_pt,"'U&'");

KT.win_edit(_a);
{? KT.F_ZATR().KOD='Z'
|| KT.fld_fml('T',_pt,"'\\\\Z\\\\Lu&'");
   KT.efld_opt(_a,'enable=1',KT,'ZC')
|| KT.fld_fml('T',_pt,"'uuu&'");
   KT.efld_opt(_a,'enable=0',KT,'ZC')
?};

_buf


\kt_end_edit
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przywraca obsługę pól po edycji.
::   WE: _a [STRING] - akronim okienka redagowania
::       _b [OBJECT] - wskazanie na tablicę oryginalnych formuł przypisanych do pól
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('restore_fml_all','#field',KT,_b);
KT.efld_opt(_a,'enable=1',KT,'ZC')


\kt_db
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja dołącz okienek tabeli KT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
KT.blank();

:: obsługa parametrów kryterium
_rid:=exec('create_rid','o_xpar',KT);
_exe:=exec('set_blank_rid','o_xpar',_rid);

_wnd:='RED';
_buf:=exec('kt_begin_edit','!ppl_pll_rnls',_wnd);

: udostępnij do edycji i dołącz po zatwierdzeniu
{? KT.edit("exec('kt_ae','!ppl_pll_rnls',0)") & KT.add()
|| {? KT.f_active()
   || KT.f_add()
   ?};
:: powiąż parametry z utworzonym kryterium
   exec('utrwal','o_xpar',_rid,KT.idadd_value())
||
:: usuń zapisy tymczasowe
   exec('del_ndx','o_xpar',_rid)
?};

: przywróć poprzednią obsługę pól
exec('kt_end_edit','!ppl_pll_rnls',_wnd,_buf);
exec('set_blank_fml','o_xpar',_exe)


\kt_pb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja popraw okienek tabeli KT.
::   WE:
::   WY:
::  OLD: \kt_spr_typ/listplac.fml
::----------------------------------------------------------------------------------------------------------------------
KT.get();

:: obsługa parametrów kryterium
_rid:=exec('create_rid','o_xpar',KT);
_exe:=exec('set_blank_rid','o_xpar',_rid);

_wnd:='RED';
_buf:=exec('kt_begin_edit','!ppl_pll_rnls',_wnd);
: zablokuj symbol, jeśli typ wykorzystywany
_be:='BEFORE_EDIT';
{? KT.count()<>0
|| KT.fld_fml('T',_be,"0")
?};

: udostępnij do edycji i zapisz po zatwierdzeniu
KT.edit("exec('kt_ae','!ppl_pll_rnls',1)") & KT.put();

: przywróć poprzednią obsługę pól
exec('kt_end_edit','!ppl_pll_rnls',_wnd,_buf);
exec('set_blank_fml','o_xpar',_exe)


\kt_ub
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Akcja usuń okienek tabeli KT.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? KT.count()<>0
|| FUN.emsg('Wykorzystywany typ nie może być usunięty.'@)
|| exec('del_ask','#table',KT) & KT.del()
?}


\o_zamkmies_ba
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.00]
:: OPIS: Przed "Zamknij miesiąc"
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('o_czyzamk_mies','lista_plac')
|| {? ~FUN.ask('Próba ponownego zamknięcia miesiąca (%1).\nKontynuować działanie?'@[(date(O.R,O.M,0)$8)])
   || return(0)
   ?}
 ?};

_param:=exec('get_par','#parametr',266);
{? type_of(_param)=type_of('')
|| {? +_param=10 & #(4+_param)>0 & #(2+(5-_param))>0
   || _param:=date(#(4+_param),#(2+(5-_param)),1)
   || _param:=date(0,0,0)
   ?}
|| _param:=date(0,0,0)
?};
_ok:=1;
{? _param>date(0,0,0) & _param<=date(O.RP,O.MP,1)
|| {? type_of(_param:=exec('get_par','#parametr',267))=type_of('') & _param='T'
   || {? ~exec('weryfikuj_lp_O','lista_plac')
      || _ok:=FUN.ask('\n Znaleziono pracowników, dla których należy ponownie przeliczyć listy płac.'@+
           '\n Czy kontynuować procedurę zamknięcia miesiąca?'@)
      ?}
   ?}
?};
{? ~_ok || return(0) ?};

: przygotuj czynność do uruchomienia
_params:=exec('mp_run_a','#b__box');
_params.ACT_UID:='PPL_PLL_ZMMC';
_params.PROC_START:='N';
_params.GRUPA:='N';

: uruchom czynność
_params.PORTS_IN:=exec('portsIn','#b__box',_params.ACT_UID);
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'O',O.ref());
exec('portsInSet','#b__box',_params.PORTS_IN,_params.ACT_UID,'MIESIAC','T');
exec('mp_run','#b__box',_params);

~~


\o_dpb
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [17.14]
:: OPIS: Wywoływana po zakończeniu edycji nagłówka. Sprawdza, czy dla firmy określono jednostkę organizacyjną. Jeśli nie
::       określono jednostki, to wyświetlany jest komunikat, ponieważ taka sytuacja doprowadzi do problemów ze wskaza-
::       niem listy płac w oknach redakcji.
::   WE: _a [STRING/_UD_TYP] - wskazanie lub symbol typu elementu
::   WY:
::----------------------------------------------------------------------------------------------------------------------
_typ:=
   {? var_pres('_a')=type_of(null) & _a<>null & ref_tab(_a)=UD_TYP || _a
   |? var_pres('_a')=type_of('') & _a<>'' || _a
   || 'PODZORG'
   ?};
{? exec('ud_def_firma','schemat',_typ).REF<>null
|| return()
?};

FUN.emsg(
   'W ustawieniach programu nie określono jednostki organizacyjnej właściwej dla firmy.\n'
   'Wybór listy płac może nie być możliwy. Należy uzupełnić parametryzację programu.'@
)


\kt_parametry_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Obsługa akcji "Parametry" okienek wertowania tabeli KT.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: obsługa parametrów listy
_rid:=exec('create_rid','o_xpar',KT);
_exe:=exec('set_blank_rid','o_xpar',_rid);

:: wyświetl listy parametrów
exec('x_parametry','!ppl_pll_rnls',KT);

:: przywróć poprzedni stan
exec('set_blank_fml','o_xpar',_exe);
~~


\kt_parametry_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Obsługa przycisku "Parametry" okienek redakcji tabeli KT.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
{? KT.idadd_value()=''
|| {? ~exec('jest_x','o_xpar',O_RPAR)
   || exec('x_uzupelnij_a','o_xpar',O_RPAR,1)
   ?};
   {? ~exec('jest_x','o_xpar',O_ZPAR)
   || exec('x_uzupelnij_a','o_xpar',O_ZPAR,1)
   ?}
?};
exec('x_parametry','!ppl_pll_rnls',KT);
''


\o_ustaw_par_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Ustawia stan przycisku "Parametry" w okienku redakcji nagłówka listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
O.btn_eopt(O.win_edit('?'),'PARAMETRY','state=%1'[{? O.T=null || 'grayed' || 'normal' ?}]);
~~


\o_parametry_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Obsługa akcji "Parametry" okienek wertowania tabeli O.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: obsługa parametrów listy
_rid:=exec('create_rid','o_xpar',O);
_exe:=exec('set_blank_rid','o_xpar',_rid);

:: wyświetl listy parametrów
exec('x_parametry','!ppl_pll_rnls',O,O.Z='T');

:: przywróć poprzedni stan
exec('set_blank_fml','o_xpar',_exe);
~~


\o_parametry_btn
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Obsługa przycisku "Parametry" okienek redakcji tabeli O.
::   WE:
::   WY: ''
::----------------------------------------------------------------------------------------------------------------------
{? O.idadd_value()='' & O.T<>null
|| O.T();
   _src:=KT.idadd_value();
   exec('kopiuj','o_xpar',_src)
?};
exec('x_parametry','!ppl_pll_rnls',O,O.Z='T');
''


\x_parametry
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyświetla listę patametrów.
::   WE: _a _TABLE - alias tabeli
::       _b [INTEGER] - <>0 blokada akcji, wpp akcje dostępne
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
exec('select','o_xpar',_a,(var_pres('_b')=type_of(0) & _b<>0));
~~


\o_portal_bl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: RWR [20.42]
:: OPIS: Wartość początkowa pola O.PORTAL.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
{? exec('lic','#b_domain','POR') || 'T' || 'N' ?}


\o_storno_dolacz_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed dołączeniem storno listy płac.
::   WE: _a [INTEGER] - nie wyświetlaj komunikatu (<>0)
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
_msg:=(var_pres('_a')<>type_of(0) | _a=0);

_nfo:=
   {? _msg
   || "FUN.emsg('%1\n%2'['Utworzenie storno listy płac nie jest możliwe.'@,_a])"
   || ""
   ?};

{? O.Z<>'T'
|| _nfo('Lista płac %1 jest otwarta.'@[~-O.LT]);
   return(0)

|? exec('jest_storno_o','lista_pow',O.ref())
|| _nfo('Storno listy płac %1 już istnieje.'@[~-O.LT]);
   return(0)

|? exec('czy_storno_o','lista_pow',O.ref())
|| _nfo('Lista płac %1 jest stornem innej listy.'@[~-O.LT]);
   return(0)

|? ~exec('jest_ls','lista_plac',O.ref())
|| _nfo('Lista płac %1 nie zawiera składników.'@[~-O.LT]);
   return(0)
?};

1


\o_storno_dolacz_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Dołączenie storno listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
:: zachowaj wszystkie formuły dla pól
_svc:=exec('save_fml_all','#field',O);
:: zablokuj wszystkie pola do edycji
_wnd:='RED';
_num:=O.fld_num();
{! _ii:=1.._num
|! O.efld_opt(_wnd,'editable=0',,O.fld_acr(_ii))
!};
O.efld_opt(_wnd,'editable=0',EDIT_VAR,'O_WYD');
O.btn_eopt(_wnd,'PARAMETRY','state=grayed');
:: możliwość zmiany kryterium listy
O.efld_opt(_wnd,'editable=1',,'T');
O.efld_opt(_wnd,'editable=1',,'F');
O.efld_opt(_wnd,'editable=1',,'N');

:: obsługa parametrów listy
_rid:=exec('create_rid','o_xpar',O);
_exe:=exec('set_blank_rid','o_xpar',_rid);
params_set('O_BUFFER',exec('o_edit_buf','!ppl_pll_rnls',null,_rid));

O.get();
_src:=O.ref();
_slt:=~-O.LT;
:: spróbuj ustalić typ za pomocą wtyczki
O.T:=exec('ppl_t_storno_run','ppl',_src);
O.F:={? O.T<>null || O.T().F || 'S' ?};
O.Z:='N';
O.DOK:='';

:: kryteria dostępne do wyboru (tylko storno)
exec('kt_f_set','!ppl_pll_rnls','STORNO_T');
:: kontrola parametrów typu listy
O.fld_fml('T','AFTER_EDIT',$("
   {? O.T<>null
   || _dic:=exec('kod_storno','ext_slo');
      _val:=exec('wartosc','lista_par',_dic,O.T);
      {? type_of(_val)=type_of(~~) & exec('dodaj','lista_par',O.T,_dic,'T')
      || FUN.info('Dla typu \"%1\" dodano wymagany parametr \"%2\".'@[O.T().T,_dic])
      ?}
   ?};
   "+O.fld_fml('T','*AFTER_EDIT')
));

O.win_edit(_wnd);
{? O.edit("exec('o_ae','!ppl_pll_rnls',0)")
:: spróbuj utworzyć i powiązać storno
|| _cur:=O.ref();
   _ret:=~~;
   do();
   O.cntx_psh();
   O.clear();
   {? ~O.add()
::    porażka
   || undo()

   |? (_ret:=exec('storno_dodaj','lista_pow',_src,O.ref())).VALUE=null
::    nie udało się dodać powiązania listy ze stornem
   || undo()

   || _cur:=O.ref();
::    obsługa parametrów listy płac
      {? ~exec('jest','o_xpar',_rid)
::       uzupełnij parametry z kryterium
      || exec('kopiuj','o_xpar',O.T().IDADD)
      ?};
::    powiąż parametry z utworzonym nagłówkiem
      exec('utrwal','o_xpar',_rid,O.idadd_value());

::    dodaj statusy
      _dic:=exec('kod_storno','ext_slo');
      exec('put_stat','lista_plac',_src,_dic,1,'Utworzono listę storno %1.'[~-O.LT]);
      exec('put_stat','lista_plac',O.ref(),_dic,1,'Utworzono listę storno dla %1.'[_slt])
   ?};
   end();
   O.cntx_pop();
   O.seek(_cur);

   {? type_of(_ret)<>type_of(~~)
   || FUN.emsg(_ret.INFO)
   ?}
?};

:: przywróć stan pól
{! _ii:=1.._num
|! O.efld_opt(_wnd,'editable=1',,O.fld_acr(_ii))
!};
O.efld_opt(_wnd,'editable=1',EDIT_VAR,'O_WYD');
O.btn_eopt(_wnd,'PARAMETRY','state=normal');
exec('set_blank_fml','o_xpar',_exe);
:: przywróć oryginalne formuły dla pól
exec('restore_fml_all','#field',O,_svc);
~~


\o_storno_usun_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed usunięciem storno listy płac.
::   WE: _a [INTEGER] - nie wyświetlaj komunikatu (<>0)
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
_msg:=(var_pres('_a')<>type_of(0) | _a=0);

_nfo:="FUN.emsg('%1\n%2'['Usunięcie storno listy płac nie jest możliwe.'@,_a])";

_ret:=exec('storno_ustal_o','lista_pow',O.ref());
:: czy istnieje lista storno?
{? _ret.VALUE=null
|| {? _msg
   || _nfo(_ret.INFO)
   ?};
   return(0)
?};

:: czy storno listy jest zamknięte?
O.cntx_psh();
SEEK.O:=_ret.VALUE;
_lck:=(SEEK.O().Z='T');
_olt:=~-O.LT;
O.cntx_pop();
{? _lck
|| {? _msg
   || _nfo('Lista płac %1 jest zamknięta.'@[_olt])
   ?};
   return(0)
?};

1


\o_storno_usun_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Usunięcie storno listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
_olt:=~-O.LT;
{? exec('czy_storno_o','lista_pow',O.ref())
:: ustal listę źródłową
|| O.cntx_psh();
   O_O.cntx_psh();
   {? exec('storno_szukaj','lista_pow',O.ref(),'POD',1).VALUE<>null
   || _olt:=~-O_O.NAD().LT
   ?};
   O_O.cntx_pop();
   O.cntx_pop()
?};
{? ~FUN.ask(
      'Czy na pewno usunąć storno listy płac %1?\n\n'
      'Usunięte zostaną:\n'
      ' - składniki listy storno,\n'
      ' - powiązanie list płac (rodzaj "STORNO"),\n'
      ' - nagłówek listy płac będącej stornem.'@[_olt]
   )
|| return()
?};

{? (_ret:=exec('storno_usun_o','lista_pow',O.ref())).VALUE<>0
|| FUN.info(_ret.INFO)
|| FUN.emsg(_ret.INFO)
?};
~~


\o_storno_lista_b
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Przed wyświetleniem informacji o storno listy płac.
::   WE: _a [INTEGER] - nie wyświetlaj komunikatu (<>0)
::   WY: 0/1 - zasadnicza akcja zablokowana/dostępna
::----------------------------------------------------------------------------------------------------------------------
1


\o_storno_lista_a
::----------------------------------------------------------------------------------------------------------------------
::  UTW: jaws [21.14]
:: OPIS: Wyświetlenie informacji o storno listy płac.
::   WE:
::   WY: ~~
::----------------------------------------------------------------------------------------------------------------------
O.cntx_psh();
O_O.cntx_psh();

_ret:=exec('storno_ustal_o','lista_pow',O.ref(),1);
{? _ret.VALUE<>null
|| {? (O.ref()=O_O.POD & O.seek(O_O.NAD,,1)) |
      (O.ref()=O_O.NAD & O.seek(O_O.POD,,1))
   || O.display()
   ?}
|| FUN.emsg(_ret.INFO)
?};

O_O.cntx_pop();
O.cntx_pop();
~~


\o_b_odd_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Przed wyświetleniem pola B_ODD tabeli O
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
1


\o_kraje_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Po redagowaniu pola KRAJE tabeli O
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_krajowa:=(O.KRAJE=null());
O.efld_opt(cur_win(),'enable=%1'[$_krajowa],,'B_ODD');
{? _krajowa
|| O.B_ODD:='N'
?};
1


\o_bw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: IS [22.26]
:: OPIS: Wyświetl przed okienka wertowania RED tabeli O.
::   WE:
::   WY:
::----------------------------------------------------------------------------------------------------------------------
exec('o_fld_opt','!ppl_pll_rnls','RED',O.F_ZATR().KOD);
O.display()


:Sign Version 2.0 jowisz:1045 2024/02/07 10:14:59 d8952faa926c020ae5d33d34a2c57316cbd6bffd185a14d5cbea8c42af9858ecafbe5079e43fa270bb5635015c4fbb0ba5aecc0d5925fd52a2a8cc59d463c4cd3355f90e47d28801adac0bccb66559f332e60d8be99ca774644466ae6512a8ae134c7fda46671e65f321ac9db9ddfd9342a28e903ab55176f335e6c503a6721b
