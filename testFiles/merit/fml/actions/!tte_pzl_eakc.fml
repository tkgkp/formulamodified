:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_eakc.fml
:: Utworzony: 29.06.2015
:: Autor: TS
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_EAKC - Akceptacja zlecenia
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Formuła główna czynności akceptacji zlecenia (TTE_PZL_EAKC)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;

_uid:='TTE_PZL_EAKC';

::# permissions=ODDZ
::# properties=SERVICE
::# parses=exec('parses','!tte_pzl_eakc')

:: PARAMETRY WE:
::# kind=WE, symbol=ZL, type=_ZL, name=Wskazanie na zlecenie, required=T, keyref=T
{? var_pres('ZL',_in)<>type_of(~~) & var_pres('ZL',_in)<>type_of(null())
|| _msg:='Błędny parametr wejściowy \'%1\' dla czynności %2'@@['ZL',_uid];
   {? ~_mp.isService()
   || FUN.error(_msg)
   ?};
   _mp.error(_msg);
   return()
?};
{? var_pres('ZL',_in)=type_of(~~) || _in.ZL:=null() ?};

::# kind=WY, symbol=RESULT, type=STRING, name="Wynik działania (OK, BŁĄD)", required=N

_result:=~~;
_can_continue:=1;

ZL.cntx_psh(); ZL.clear();

_clean_result:=params_exec('clean','!tte_pzl_eakc',_mp,_in);
_can_continue:=_clean_result.RESULT;
_zl:=_clean_result.ZL;

:: WSTĘPNE WALIDACJE
{? _can_continue>0 & _mp.isService() & _zl=null()
|| _msg:='Błędna konfiguracja procesu — nie przekazano zlecenia.'@;
   _mp.error(_msg);
   _can_continue:=0
?};

{? _can_continue>0 & _zl<>null()
|| _can_continue:=ZL.seek(_zl)
?};

{? _can_continue>0
||
   _mp.keyRef(ZL.uidref());

   _ask:=1;
   _komm:=1;
   {? _mp.isAutoRun() | _mp.isService()
   || _ask:=0;
      _komm:=0
   ?};
   {? _mp.isGroup()
   || _ask:=0;
      _komm:=0
   ?};
   {? _mp.pathTodo() & _ask>0
   ||
::    Obsługa z TODO - wyświetlam okno umożliwiające podglądy różnych rzeczy ze zlecenia
::    Sprawdzam czy w ogóle jest sens akceptować
      _can_continue:=exec('zl_akceptuj','!tte_pzl_eakc',ZL.ref(),0,_komm,0);
      {? ZL.STAN='O'
      || _can_continue:=0;
         _result:=1
      |? ZL.STAN='Z'
      || _can_continue:=0;
         _result:=-1
      ?};
      {? _can_continue>0
      ||
         DK_C.cntx_psh();
         _btn2:=exec('obj_ntab_set','#array',,
            'txt','text=%1,align=end,display=1'['Akceptuj'@],
            'fml',"exec('action_accept','!tte_pzl_eakc')"
         );
         _red:=exec('zl_display_red_full','zl_head','Akceptacja zlecenia %1'@[ZL.SYM],,,_btn2,0,0,1);
         ZL.win_edit(_red);
         ZL.display();
         _mp.keep();
         {? ZL.STAN='O'
         ||
::            ZL.put();
::          Uruchomienie ponownie instancji tej samej czynności może zmienić status, więc przywracam
            _mp.keep()
         ?};
         DK_C.cntx_pop();
         ~~
      ?}
   || _result:=exec('zl_akceptuj','!tte_pzl_eakc',ZL.ref(),_ask,_komm)
   ?};

   {? _result>0 | _mp.isMicro()
   || _out.RESULT:='OK';
      _mp.save(,_out);
      _mp.done()
   |? _result=-1
   || _mp.error('Nie można zaakceptować zlecenia zamkniętego.'@)
   |? _mp.isService()
   || _out.RESULT:='BŁĄD';
      _mp.save(,_out);
      _mp.done()
   ?}
?};
ZL.cntx_pop();
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Opis dla czynności akceptacji zlecenia (TTE_PZL_EAKC)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

_zl:=null();

{? obj_len(_keyRefs)>0
||
   {! _it:=1..obj_len(_keyRefs)
   |! _kref:=_keyRefs[_it];
      {? type_of(_kref)>0
      ||
         {? ref_name(_kref)=ZL.name()
         || _zl:=exec('FindAndGet','#table',ZL,_kref,,,null())
         ?}
      ?}
   !}
?};

:: jest parametr wejściowy ZL
{? _zl=null() & var_pres('ZL',_in)=type_of(null())
|| _zl:=_in.ZL
?};

:: jest rekord kluczowy to ustawiam odpowiednie ZL
{? _zl<>null
|| _tmp:=exec('FindAndGet','#table',ZL,_zl,,"SYM",'');
   _desc:={? _tmp<>'' || 'Zaakceptuj zlecenie %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',ZL,_zl,,"'Zaakceptuj zlecenie %1'[SYM]",'')
|| _desc:='Zaakceptuj nowe zlecenie'@@
?};
_desc


\zl_akceptuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Akceptacja zlecenia
::   WE: [_a] - ZL.ref() - ref zlecenia lub bieżące zlecenie
::       [_b] - INTEGER - 0/[1] - czy wyświetlać pytania
::       [_c] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::       [_d] - INTEGER - 0/[1] - czy dokonywać faktycznej akceptacji, czy tylko posprawdzać warunki
::       [_e] - INTEGER - 0/[1] - czy akceptować podzlecenia dla zlecenia złożonego
::       [_f] - INTEGER - [0]/1 - czy uruchomienie rekurencyjne
::   WY: 1 - udało się zaakceptować zlecenie i wszystkie jego podzlecenia
::       0 - nie udało się zaakceptować nic, lub udało się zaakceptować tylko część
::----------------------------------------------------------------------------------------------------------------------
_ref:=null();
{? var_pres('_a')=type_of(ZL.ref())
|| _ref:=_a
?};

_ask:=1;
{? var_pres('_b')=type_of(0)
|| _ask:=_b
?};

_komm:=1;
{? var_pres('_c')=type_of(0)
|| _komm:=_c
?};

_accept:=1;
{? var_pres('_d')=type_of(0)
|| _accept:=_d
?};

_choice_complex:=1;
{? var_pres('_e')=type_of(0)
|| _choice_complex:=_e
?};

_rec:=0;
{? var_pres('_f')=type_of(0)
|| _rec:=_f
?};

_result:=0;
_can_continue:=1;

ZL.cntx_psh();
{? _ref<>null()
|| ZL.prefix();
   {? ZL.seek(_ref)
   || _can_continue:=1
   || _can_continue:=0
   ?}
?};

{? _can_continue>0
||
   {? _komm>0 | ~KOMM.is_inited()
   || KOMM.init(250,,'Akceptacja zlecenia'@)
   ?};
   _subzlec:=exec('subzlec_exist','zl_link',ZL.ref());
   {? _ask>0
   || _can_continue:=0;
      {? _subzlec>0
      || _msg:='Czy zaakceptować (uruchomić) zlecenie %1?'@[ZL.SYM];
         _choice_complex:=FUN.choice(_msg,,'Bieżące i jego podzlecenia'@,'Tylko bieżące'@);
         {? _choice_complex>0
         || _can_continue:=1
         ?}
      || _can_continue:=FUN.ask('Czy zaakceptować (uruchomić) zlecenie %1?'@[ZL.SYM])
      ?}
   ?};

   {? _can_continue>0
   ||
::    Sprawdzana możliwość zablokowania zlecenia w każdym zakresie
      {? exec('zl_lock','zl_common',,'N') &
         exec('zl_lock','zl_common',,'T') &
         exec('zl_lock','zl_common',,'P') &
         exec('zl_lock','zl_common',,'L') &
         exec('zl_lock','zl_common',,'I')
      ||
         _chk:=1;

::       Sprawdzane zakończenie rejestrowania nagłówka
         {? ZL.STAT_N='N'
         || _can_continue:=0;
            exec('komm_add','zl_common','Nie zakończono rejestracji nagłówka zlecenia.'@)
         ?};

::       Sprawdzenie czy zostało już zaakceptowane
         {? ZL.STAN='O'
         || _can_continue:=0;
            _result:=1;
            exec('komm_add','zl_common','Zlecenie jest już zaakceptowane.'@,1)
         |? ZL.STAN='Z'
         || _can_continue:=0;
            _result:=-1;
            exec('komm_add','zl_common','Zlecenie jest już zamknięte.'@,1)
         ?};

         {? _chk>0
         ||
::          Sprawdzane zakończenie rejestrowania technologii
            {? ZL.TYP().TECH='T' & ZL.STAT_T='N'
            || _can_continue:=0;
               exec('komm_add','zl_common','Nie zakończono rejestracji technologii zlecenia.'@)
            ?};

::          Dla zlecenia złożonego albo niezależnego sprawdzam czy istnieją jakiekolwiek podzlecenia
            {? ZL.RODZAJ='Z' | ZL.RODZAJ='N'
            || {? exec('subzlec_exist','zl_link',ZL.ref())=0
               || _can_continue:=0;
                  exec('komm_add','zl_common','Brak podzleceń, które można by zaakceptować.'@)
               ?}
            ?};

            _tktl:=ZL.TKTL;
            {? _tktl=null()
            || _tktl:=ZL.KTL
            ?};
            _oper:=exec('FindAndGet','#table',TKTL,_tktl,,"TYP().OPER");

::          Sprawdzane zakończenie rejestrowania wszystkich przewodników
            {? _oper='T' | ZL.TYP().WP='W'
            || ZGH.cntx_psh();
               ZGH.index('ZLNR');
               ZGH.prefix(ZL.ref());
               {? ZGH.first()
               || {!
                  |? {? ZGH.STAT_REJ='N'
                     || _can_continue:=0;
                        exec('komm_add','zl_common',
                           'Nie zakończono rejestracji przewodnika: %1'@
                           [exec('record','#to_string',ZGH.ref())]
                        )
                     ?};
                     ZGH.next()
                  !}
               ||
::                Nie ma żadnego przewodnika - blokuję uruchomienie ale tylko dla zleceń prostych i podrzędnych
                  {? ZL.RODZAJ='P'
                  || _can_continue:=0;
                     exec('komm_add','zl_common','Zlecenie nie posiada żadnego przewodnika.'@)
                  ?}
               ?};
               ZGH.cntx_pop()
            ?};

::          Sprawdzane zakończenie rejestrowania zapotrzebowań do wszystkich przewodników zlecenia
            ZGH.cntx_psh();
            ZGH.index('ZLNR');
            ZGH.prefix(ZL.ref());
            {? ZGH.first()
            || {!
               |? {? ZGH.STAT_L='N'
                  || _can_continue:=0;
                     exec('komm_add','zl_common',
                        {? _oper='T'
                        || 'Nie zakończono rejestracji zapotrzebowań do przewodnika: %1'@
                           [exec('record','#to_string',ZGH.ref())]
                        || 'Nie zakończono rejestracji zapotrzebowań do zlecenia: %1'@
                           [exec('record','#to_string',ZL.ref())]
                        ?}
                     )
                  ?};
                  ZGH.next()
               !}
            ?};
            ZGH.cntx_pop()
         ?};
::       Jeżeli wszystko dobrze, to dodatkowa walidacja za pomocą wtyczki
         {? _can_continue & (ZL.cntx_psh();(_result:=Plugin.run('ZL_AKC_VALID_001'));ZL.cntx_pop();_result=0)
         || _can_continue:=0
         ?};
         {? _can_continue>0 & _accept>0
         ||
::          Ustalenie stanu zlecenia
            ZL.get();
            ZL.STAN:='O';
            ZL.HIDDEN:='N';
            ZL.DZATW:=date();
            ZL.ZATW:=OPERATOR.USER;

            exec('ust_znac','zl_head');

            _result:=ZL.put();
            {? _result>0
            || {? _rec=0 || exec('obl_prod','magazyn_stan',ZL.KTM,ZL.MG,2) ?};
               exec('add_zwar_pos','zl_common','no',0,,ZL.ref());
::             Zatwierdzenie zamówień wewnętrznych
               exec('ZK_N_4_ZL_aKC','zamsiw_nag',ZL.ref(),'T');
::             Wtyczka - generowanie produktów zlecenia
               {? Plugin.runnable('ZL_WYR_GEN_001')
               || _json:=Plugin.run('ZL_WYR_GEN_001',3,ZL.ref());
                  {? type_of(_json)=type_of('') & _json<>''
                  || _tab_plugin:=json_parse(_json);
                     {? type_of(_tab_plugin)>100 & obj_len(_tab_plugin)>0
                     || exec('zl_wyr_from_tab','zl_wyr',_tab_plugin)
                     ?}
                  ?}
               ?};
::             Dla zleceń wygenerowanych na podstawie stanów magazynowych sprawdzenie,
::             czy pozostały niewykorzystane rezerwacje i ich ewentualne usunięcie
               {? exec('zl_from_sm','zl_head',ZL.ref())>0
               || exec('zl_delete_rez','zl_common',ZL.ref(),'T')
               ?}
            ?}
         |? _can_continue>0
         || _result:=1
         ?};

         exec('zl_unlock','zl_common',,'N');
         exec('zl_unlock','zl_common',,'T');
         exec('zl_unlock','zl_common',,'P');
         exec('zl_unlock','zl_common',,'L');
         exec('zl_unlock','zl_common',,'I')
      ||
::       Nie udało się zablokować zlecenia
         exec('komm_add','zl_common','Nie udało się zablokować zlecenia'@)
      ?};

      {? _subzlec>0 & _choice_complex=1
      ||
::       Akceptacja podzleceń
         ZL.cntx_psh();
         ZL.index('NRNZL');
         ZL.prefix(ZL.UNRZL);
         {? ZL.first()
         || {!
            |?
::             !!! REKURENCJA !!!
               {? exec('zl_akceptuj','!tte_pzl_eakc',ZL.ref(),0,0,_accept,,1)=0
               || _result:=0
               ?};
               ZL.next()
            !}
         ?};
         ZL.cntx_pop()
      ?};

      {? ZL.NRNZL<>0 & _rec=0
      ||
         _top_level:=exec('top_level','zl_link',ZL.ref());
         ZL.cntx_psh();
         ZL.clear();
         {? ZL.seek(_top_level)
         || {? ZL.STAN='N'
            ||
::             !!! REKURENCJA !!!
               {? exec('zl_akceptuj','!tte_pzl_eakc',_top_level,0,0,_accept,0,1)=0
               || _result:=0
               ?}
            ?}
         ?};
         ZL.cntx_pop()
      ?}
   || _result:=0
   ?};

   {? _komm>0
   || KOMM.select()
   ?}
?};
ZL.cntx_pop();
_result


\zl_wycofaj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: TS [17.00]
:: OPIS: Wycofanie akceptacji zlecenia
::   WE: [_a] - ZL.ref() / bieżące zlecenie
::       [_b] - INTEGER - 0/[1] - czy wyświetlać pytania
::       [_c] - INTEGER - 0/[1] - czy inicjować i wyświetlać KOMMa
::       [_d] - INTEGER - [0]/1 - czy zmieniać stan zlecenia na 'w przygotowaniu'
::       [_e] - INTEGER - [0]/1 - czy usuwać rezerwacje surowców do zlecenia (musi być _d=1)
::       [_f] - INTEGER - [0]/1 - czy usuwać zakończenie zapotrzebowań (musi być _e=1)
::       [_g] - INTEGER - [0]/1 - czy usuwać zapotrzebowania (musi być _f=1)
::       [_h] - INTEGER - [0]/1 - czy usuwać zakończenie przewodników (musi być _g=1)
::       [_i] - INTEGER - [0]/1 - czy usuwać przewodniki (musi być _h=1)
::       [_j] - INTEGER - [0]/1 - czy usuwać partie (musi być _i=1)
::       [_k] - INTEGER - [0]/1 - czy usuwać zakończenie technologii zlecenia (musi być _i=1 i _j=1)
::       [_l] - INTEGER - [0]/1 - czy usuwać technologię zlecenia (musi być _k=1)
::       [_m] - INTEGER - [0]/1 - czy usuwać zakończenie nagłówka zlecenia (musi być _l=1)
::   WY: 0/1
::  OLD: \przwprz/zlec4.fml
::----------------------------------------------------------------------------------------------------------------------
_env:=params_get().env;
params_set(params_get());

{? var_pres('_a')=type_of(null()) || _zl:=_a || _zl:=ZL.ref() ?};
{? var_pres('_b')=type_of(0) || _ask:=_b || _ask:=1 ?};
{? var_pres('_c')=type_of(0) || _komm:=_c || _komm:=1 ?};
{? var_pres('_d')=type_of(0) || _cofaj_stan:=_d || _cofaj_stan:=0 ?};
{? var_pres('_e')=type_of(0) & _cofaj_stan>0 || _usun_rez:=_e || _usun_rez:=0 ?};
{? var_pres('_f')=type_of(0) & _usun_rez>0 || _cofaj_lim:=_f || _cofaj_lim:=0 ?};
{? var_pres('_g')=type_of(0) & _cofaj_lim>0 || _usun_lim:=_g || _usun_lim:=0 ?};
{? var_pres('_h')=type_of(0) & _usun_lim>0 || _cofaj_przew:=_h || _cofaj_przew:=0 ?};
{? var_pres('_i')=type_of(0) & _cofaj_przew>0 || _usun_przew:=_i || _usun_przew:=0 ?};
{? var_pres('_j')=type_of(0) & _usun_przew>0 || _usun_part:=_j || _usun_part:=0 ?};
{? var_pres('_k')=type_of(0) & _usun_przew>0 & _usun_part>0 || _cofaj_tech:=_k || _cofaj_tech:=0 ?};
{? var_pres('_l')=type_of(0) & _cofaj_tech>0 || _usun_tech:=_l || _usun_tech:=0 ?};
{? var_pres('_m')=type_of(0) & _usun_tech>0 || _cofaj_nagl:=_m || _cofaj_nagl:=0 ?};

_result:=0;
_can_continue:=1;
_subzlec:=0;
_choice_complex:=0;

_can_usun_rez:=1;
_can_cofaj_lim:=1;
_can_usun_lim:=1;
_can_cofaj_przew:=1;
_can_usun_przew:=1;
_can_usun_part:=1;
_can_cofaj_tech:=1;
_can_usun_tech:=1;
_can_cofaj_nag:=1;

ZL.cntx_psh();
ZL.clear();
{? ZL.seek(_zl)
||
   _result:=1;

   {? _komm>0
   || KOMM.init(250,,'Wycofanie akceptacji zlecenia'@)
   ?};

   {? _can_continue>0
   ||
::    Sprawdzana możliwość zablokowania zlecenia w każdym zakresie
      {? exec('zl_lock','zl_common',,'N') &
         exec('zl_lock','zl_common',,'T') &
         exec('zl_lock','zl_common',,'P') &
         exec('zl_lock','zl_common',,'L') &
         exec('zl_lock','zl_common',,'I')
      ||
         _subzlec:=exec('subzlec_exist','zl_link',ZL.ref());

::       KONTROLE WSTĘPNE - wykonywane są zawsze wszystkie, żeby zgromadzić w KOMM pełną informację o niemożliwości
::                          wycofania zlecenia

::       Sprawdzenie czy zostało już wycofane (warunek wyłączony)
::         {? ZL.STAN='N'
::         || _can_continue:=0;
::            exec('komm_add','zl_common','Zlecenie nie jest zaakceptowane.'@,1)
::         ?}

::       Sprawdzenie, czy nie jest już zamknięte
         {? ZL.STAN='Z'
         || _can_continue:=0;
            exec('komm_add','zl_common','Zlecenie jest już zamknięte.'@,1)
         ?};

::       sprawdzamy, czy są zarejestrowane wykonania do przewodników zlecenia
         {? exec('has_zlgd','zl_common',ZL.ref())>0
         || exec('komm_add','zl_common',
               'Istnieją zarejestrowane wykonania do przewodników zlecenia, należy je najpierw usunąć.'@
            );
            _can_continue:=0
         ?};

::       sprawdzamy czy są wykonania do planu operacyjnego
         {? exec('has_wyk_zl','po_wyk',ZL.ref())>0
         || exec('komm_add','zl_common',
               'Istnieją zarejestrowane wykonania do planu operacyjnego, należy je najpierw usunąć.'@
            );
            _can_continue:=0
         ?};

::       sprawdzamy, czy są powiązania w planie operacyjnym - uniemożliwia wycofanie przewodników, partii, technologii..
         {? exec('zl_utilization','po_plan',1,ZL.ref())>0
         || _can_cofaj_przew:=0;
            _can_usun_przew:=0;
            _can_usun_part:=0;
            _can_cofaj_tech:=0;
            _can_usun_tech:=0;
            _can_cofaj_nag:=0
         ?};

::       sprawdzamy czy są oddane przewodniki
         {? exec('zgp_oddane','zl_wyk',ZL.ref())>0
         || exec('komm_add','zl_common',
               'Istnieją oddane przewodniki, należy zmienić ich stan i usunąć wykonania.'@
            );
            _can_continue:=0
         ?};

::       sprawdzamy, czy ktoś nie blokuje przewodników
         ZGH.cntx_psh();
         ZGH.index('ZLNR');
         ZGH.prefix(ZL.ref());
         {? ZGH.first()
         || {!
            |? {? exec('blk_lock','#table','ZGH',ZGH.ref(),,1,,,1)
               || exec('blk_unlock','#table','ZGH',ZGH.ref())
               || exec('komm_add','zl_common',
                     'Istnieją przewodniki redagowane przez innego operatora.'@
                  );
                  _can_continue:=0
               ?};
               _can_continue>0 & ZGH.next()
            !}
         ?};
         ZGH.cntx_pop();

::       sprawdzamy czy są dokumenty dokumenty magazynowe
         _args_dkil:=exec('ilosc_dk_a','zl_common');
         _args_hasdk:=exec('has_dok4mask_a','zl_common');
         _dk_podzlec:=0;
         {? _subzlec>0
         ||
::          Jeśli zlecenie ma zlecenia podrzędne to sprawdzam czy są dokumenty na podrzędnych
            ZL.cntx_psh();
            ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || {!
               |?
::                Najpierw sprawdzamy czy są nagłówki
                  _args_hasdk.ZL:=ZL.ref();
                  {? exec('has_dokumenty','zl_common',_args_hasdk)>0
                  || _can_continue:=0;
                     _dk_podzlec:=1;
                     _msg:='Do zlecenia: %1 istnieją dokumenty magazynowe'
                           ', należy je usunąć przed wycofaniem akceptacji zlecenia.'@[ZL.SYM];
                     exec('komm_add','zl_common',_msg,,1)
                  ?};

                  {? _can_continue>0
                  ||
::                   Jesli nie bylo nagłówkow to być może są tylko pozycje
                     _args_dkil.ZL:=ZL.ref();
                     {? exec('get_ilosc_dk','zl_common',_args_dkil)>0
                     || _can_continue:=0;
                        _dk_podzlec:=1;
                        _msg:='Do zlecenia: %1 istnieją dokumenty magazynowe'
                              ', należy je usunąć przed wycofaniem akceptacji zlecenia.'@[ZL.SYM];
                        exec('komm_add','zl_common',_msg,,1)
                     ?}
                  ?};
                  ZL.next()
               !}
            ?};
            ZL.cntx_pop()
         ?};
::       Jesli w podrzednych nie znaleziono dokumentow to szukam dla zlecenia na ktorym stoje
         {? _dk_podzlec=0
         ||
::          Najpierw sprawdzamy czy sa naglowki
            _args_hasdk.ZL:=ZL.ref();
            {? exec('has_dokumenty','zl_common',_args_hasdk)>0
            || _can_continue:=0;
               _msg:='Do zlecenia: %1 istnieją dokumenty magazynowe'
                     ', należy je usunąć przed wycofaniem akceptacji zlecenia.'@[ZL.SYM];
               exec('komm_add','zl_common',_msg,,1)
            ?};
            {? _can_continue>0
            ||
::             Jesli nie bylo naglowkow to byc moze sa tylko pozycje
               _args_dkil.ZL:=ZL.ref();
               {? exec('get_ilosc_dk','zl_common',_args_dkil)>0
               || _can_continue:=0;
                  _msg:='Do zlecenia: %1 istnieją dokumenty magazynowe'
                        ', należy je usunąć przed wycofaniem akceptacji zlecenia.'@[ZL.SYM];
                  exec('komm_add','zl_common',_msg,,1)
               ?}
            ?}
         ?};

::       procedura pokazująca listę nieaktywnych indeksów
         _surn:=exec('surnakt','tech_common',1,ZL.TKTL,'',0);
::       sprawdza czy są realizacje do zamowień
         _realz:=0;
         {? ZL.NRNZL=0
         || ZL.cntx_psh();
            ZL.clear();
            ZL.index('NRNZL');
            ZL.prefix(ZL.UNRZL);
            {? ZL.first()
            || {!
               |? _realz:=exec('realz','zl_common',ZL.ref());
                  {? _realz=0
                  || ZL.next()
                  || 0
                  ?}
               !}
            ?};
            ZL.cntx_pop()
         || _realz:=exec('realz','zl_common',ZL.ref())
         ?};
         {? _realz>0
         || exec('komm_add','zl_common',
               'Do zlecenia: %1 istnieją realizacje zamówień wewnętrznych, należy je usunąć.'@[ZL.SYM],,1
            );
            _can_continue:=0
         ?};

::       Nadzlecenie (złożone albo niezależne) - bez cofania nagłówka
         {? ZL.RODZAJ<>'P'
         || _can_cofaj_nag:=0
         ?};

::       Faktyczne wycofanie zlecenia
         {? _can_continue>0 & ZL.ILWYK<=0 & ZL.HWYK<=0 & _surn=1
         ||
            {? _ask>0
            ||
               _tab:=tab_tmp(,
                  'COMPLEX','INTEGER','Razem z podzleceniami'@,
                  'STAN','INTEGER','Wycofanie akceptacji'@,
                  'USU_REZ','INTEGER','Usunięcie rezerwacji'@,
                  'COF_LIM','INTEGER','Wycofanie zapotrzebowań'@,
                  'USU_LIM','INTEGER','Usunięcie zapotrzebowań'@,
                  'COF_PRZ','INTEGER','Wycofanie przewodników'@,
                  'USU_PRZ','INTEGER','Usunięcie przewodników'@,
                  'USU_PAR','INTEGER','Usunięcie partii'@,
                  'COF_TEC','INTEGER','Wycofanie technologii'@,
                  'USU_TEC','INTEGER','Usunięcie technologii'@,
                  'COF_NAG','INTEGER','Wycofanie nagłówka'@
               );
               _tab.STAN:=_cofaj_stan;
               _tab.USU_REZ:=_usun_rez;
               _tab.COF_LIM:=_cofaj_lim;
               _tab.USU_LIM:=_usun_lim;
               _tab.COF_PRZ:=_cofaj_przew;
               _tab.USU_PRZ:=_usun_przew;
               _tab.USU_PAR:=_usun_part;
               _tab.COF_TEC:=_cofaj_tech;
               _tab.USU_TEC:=_usun_tech;
               _tab.COF_NAG:=_cofaj_nagl;

::             Formuły dla pól
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.STAN=0
                  || _tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=_tab.COF_TEC:=
                     _tab.USU_TEC:=_tab.COF_NAG:=0
                  || ~~
                  ?};
                  ~~
               ";
               _tab.fld_fml('STAN','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.USU_REZ=0
                  || _tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=_tab.COF_TEC:=_tab.USU_TEC:=
                     _tab.COF_NAG:=0
                  || _tab.STAN:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('USU_REZ','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.COF_LIM=0
                  || _tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=_tab.COF_TEC:=_tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('COF_LIM','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.USU_LIM=0
                  || _tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=_tab.COF_TEC:=_tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('USU_LIM','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.COF_PRZ=0
                  || _tab.USU_PRZ:=_tab.USU_PAR:=_tab.COF_TEC:=_tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('COF_PRZ','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.USU_PRZ=0
                  || _tab.USU_PAR:=_tab.COF_TEC:=_tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('USU_PRZ','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.USU_PAR=0
                  || _tab.COF_TEC:=_tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('USU_PAR','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.COF_TEC=0
                  || _tab.USU_TEC:=_tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('COF_TEC','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.USU_TEC=0
                  || _tab.COF_NAG:=0
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=
                     _tab.COF_TEC:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('USU_TEC','AFTER_EDIT',_formula);
               _formula:="
                  _tab:=cur_tab(1,1); _red:=cur_win(1,1);
                  {? _tab.COF_NAG=0
                  || ~~
                  || _tab.STAN:=_tab.USU_REZ:=_tab.COF_LIM:=_tab.USU_LIM:=_tab.COF_PRZ:=_tab.USU_PRZ:=_tab.USU_PAR:=
                     _tab.COF_TEC:=_tab.USU_TEC:=1
                  ?};
                  ~~
               ";
               _tab.fld_fml('COF_NAG','AFTER_EDIT',_formula);

::             Okno redakcyjne
               _red:=_tab.mk_edit('Wycofanie zlecenia'@);
               {? _subzlec>0
               || _tab.win_esep(_red,'Zakres zleceń'@);
                  _tab.win_efld(_red,,'COMPLEX',,,,,,'Zlecenia'@,,,
                     'radio-buttons',,'Tylko bieżące'@,"0",'Bieżące i jego podzlecenia'@,"1"
                  )
               ?};
               _tab.win_esep(_red,'Zakres operacji'@);
               {? ZL.STAN='O'
               || _tab.win_efld(_red,,'STAN',,,,,,,,,'check-box',,"1","0")
               ?};
               _tab.win_efld(_red,,'USU_REZ',,,,,,,,,'check-box',,"1","0");
               _tab.win_efld(_red,,'COF_LIM',,,,,,,,,'check-box',,"1","0");
               _tab.win_efld(_red,,'USU_LIM',,,,,,,,,'check-box',,"1","0");
               _tab.win_efld(_red,,'COF_PRZ',,,,,,,,,'check-box',,"1","0");
               _tab.win_efld(_red,,'USU_PRZ',,,,,,,,,'check-box',,"1","0");
               {? ZL.KTM<>null() | ZL.RODZAJ<>'P'
               || _tab.win_efld(_red,,'USU_PAR',,,,,,,,,'check-box',,"1","0")
               ?};
               {? ZL.TYP().TECH='T'
               || _tab.win_efld(_red,,'COF_TEC',,,,,,,,,'check-box',,"1","0");
                  _tab.win_efld(_red,,'USU_TEC',,,,,,,,,'check-box',,"1","0")
               ?};
               _tab.win_efld(_red,,'COF_NAG',,,,,,,,,'check-box',,"1","0");
               _tab.win_ebtn(_red,'text=%1,align=end'['OK'@],"'key:F2'");
               _tab.win_ebtn(_red,'text=%1,align=end'['Anuluj'@],"'key:Esc'");

::             Opcje pól
               _tab.efld_opt(_red,{? _can_usun_rez || 'enable=1' || 'enable=0' ?},,'USU_REZ');
               _tab.efld_opt(_red,{? _can_cofaj_lim || 'enable=1' || 'enable=0' ?},,'COF_LIM');
               _tab.efld_opt(_red,{? _can_usun_lim || 'enable=1' || 'enable=0' ?},,'USU_LIM');
               _tab.efld_opt(_red,{? _can_cofaj_przew || 'enable=1' || 'enable=0' ?},,'COF_PRZ');
               _tab.efld_opt(_red,{? _can_usun_przew || 'enable=1' || 'enable=0' ?},,'USU_PRZ');
               _tab.efld_opt(_red,{? _can_usun_part || 'enable=1' || 'enable=0' ?},,'USU_PAR');
               _tab.efld_opt(_red,{? _can_cofaj_tech || 'enable=1' || 'enable=0' ?},,'COF_TEC');
               _tab.efld_opt(_red,{? _can_usun_tech || 'enable=1' || 'enable=0' ?},,'USU_TEC');
               _tab.efld_opt(_red,{? _can_cofaj_nag || 'enable=1' || 'enable=0' ?},,'COF_NAG');

               _tab.win_edit(_red);
               _valid:="
                  _tab:=cur_tab(1,1);
                  {? ZL.STAN='O'
                  || {? _tab.STAN=0
                     || FUN.info('Pole musi być zaznaczone.'@); 'STAN'
                     || 1
                     ?}
                  || {? _tab.USU_REZ=0
                     || FUN.info('Pole musi być zaznaczone.'@); 'USU_REZ'
                     || 1
                     ?}

                  ?}
               ";

               {? _tab.edit(_valid)
               || _choice_complex:=_tab.COMPLEX;
                  _cofaj_stan:=_tab.STAN;
                  _usun_rez:=_tab.USU_REZ;
                  _cofaj_lim:=_tab.COF_LIM;
                  _usun_lim:=_tab.USU_LIM;
                  _cofaj_przew:=_tab.COF_PRZ;
                  _usun_przew:=_tab.USU_PRZ;
                  _usun_part:=_tab.USU_PAR;
                  _cofaj_tech:=_tab.COF_TEC;
                  _usun_tech:=_tab.USU_TEC;
                  _cofaj_nagl:=_tab.COF_NAG
               || _can_continue:=0
               ?}

            ||
               _choice_complex:=1
            ?}
         ||
            _can_continue:=0
         ?};

         {? _can_continue>0
         ||
            _buffer:=exec('buffer','zl_head');
            _buffer.get();

::          POCZATEK TRANSAKCJI
            do();
            ZL.STAN:='N';
            ZL.HIDDEN:='T';
            exec('ust_znac','zl_head');
            _result:=ZL.put();

            {? _result>0 & _buffer.STAN='O'
            || exec('obl_prod','magazyn_stan',ZL.KTM,ZL.MG,2);
               exec('add_zwar_pos','zl_common','on',0,,ZL.ref());
::             Zmiana statusu zamówień wewnętrznych
               exec('ZK_N_4_ZL_aKC','zamsiw_nag',ZL.ref(),'N')
            ?};

::          Przywracanie technologii podzleceń z archiwum
            {? _result>0 & _buffer.STAN='Z' & ZL.RTKTL<>'' & ZL.TKTL=null()
            ||
               _tktl:=exec('FindAndGet','#table',TKTL,ZL.RTKTL,,,null());

               {? _tktl<>null()
               || {? var_pres('_args')>100
                  || obj_del(_args)
                  ?};
                  _args:=exec('args_copy','tech_arch');
                  _args.TKTL_SRC:=_tktl;
                  _args.DELETE:=1;
                  _args.TRANS:=1;
                  _args.DIR:='KARTOTEKA';
                  _args.COPY_ACT:=0;
                  _args.MASK_SRC:=ref_name(_tktl)+3;
                  {? exec('tktl_copy','tech_arch',_args)=0
                  || exec('komm_add','zl_common',
                        'Nie udało się przywrócić technologii zlecenia: %1 z archiwum.'@[ZL.SYM]
                     )
                  ?}
               ?}
            ?};

::          Usuwanie rezerwacji
            {? _result>0 & _usun_rez
            || exec('usurez','zamsiw_limit',ZL.ref())
            ?};

::          Wycofanie zapotrzebowań
            {? _result>0 & _cofaj_lim
            || exec('cofaj_limity','zl_limit',ZL.ref())
            ?};

::          Usunięcie zapotrzebowań
            {? _result>0 & _usun_lim
            || exec('usunlim','zl_limit',ZL.ref(),1);
               _env.ZLIM_reload:=1
            ?};

::          Wycofanie przewodników
            {? _result>0 & _cofaj_przew
            || exec('cofaj_przewodniki','zl_guide',ZL.ref())
            ?};

::          Usunięcie przewodników
            {? _result>0 & _usun_przew
            || exec('usuprze','zl_guide',ZL.ref())
            ?};

::          Usunięcie partii
            {? _result>0 & _usun_part
            || exec('zl_delete','zl_partie',ZL.ref())
            ?};

::          Wycofanie technologii
            {? _result>0 & _cofaj_tech
            || exec('cofaj_tech','zl_tech',ZL.ref())
            ?};

::          Usunięcie technologii
            {? _result>0 & _usun_tech
            || {? ZL.TKTL<>null()
               || {? exec('can_TMAT_kasuj','tech_mater',ZL.TKTL)>0
                  || {? exec('TKTL_kasuj','tech_head',ZL.TKTL)>0
                     || _env.TECH_reload:=1
                     ?}
                  || exec('komm_add','zl_common',
                        'Nie udało się usunąć technologii zlecenia — surowce są powiązane ze zleceniami podrzędnymi'@
                     );
                     _result:=0
                  ?}
               ?}
            ?};

::          Usunięcie zdefiniowanych produktów zlecenia (przed wycofaniem nagłówka)
            {? _result>0 & _cofaj_nagl & exec('zl_czy_wyr','zl_wyr',ZL.ref())
            || _result:=exec('del4ZL','zl_wyr',ZL.ref());
               {? _result=0
               || exec('komm_add','zl_common',
                       'Nie udało się usunąć produktów zlecenia — wycofanie nagłówka niemożliwe.'@)
               ?}
            ?};

::          Wycofanie nagłówka
            {? _result>0 & _cofaj_nagl
            || ZL.get();
               ZL.STAT_N:='N';
               exec('ust_znac','zl_head');
               _result:=ZL.put()
            ?};

::          KONIEC TRANSAKCJI
            end();
            ~~

         ?};
         ~~
      ||
::       Nie udało się zablokować zlecenia
::         exec('komm_add','zl_common','Nie udało się zablokować zlecenia'@);
         ~~
      ?};
      exec('zl_unlock','zl_common',,'N');
      exec('zl_unlock','zl_common',,'T');
      exec('zl_unlock','zl_common',,'P');
      exec('zl_unlock','zl_common',,'L');
      exec('zl_unlock','zl_common',,'I')
   ?};

   {? _can_continue>0 & _subzlec>0 & _choice_complex=1
   ||
::    Rekurencyjne wycofanie podzleceń
      _formula:=$('params_exec(\'zl_wycofaj\',\'!tte_pzl_eakc\',ZL.ref(),0,0,%1,%2,%3,%4,%5,%6,%7,%8,%9,%10)'
                [$_cofaj_stan,
                 $_usun_rez,
                 $_cofaj_lim,
                 $_usun_lim,
                 $_cofaj_przew,
                 $_usun_przew,
                 $_usun_part,
                 $_cofaj_tech,
                 $_usun_tech,
                 $_cofaj_nagl]);
      params_exec('zl_iterate','zl_common',_formula)
   ?}
?};

{? _komm>0
|| KOMM.select()
?};

ZL.cntx_pop();
_result


\action_accept
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja akceptacji zlecenia z przycisku, menu
::   WY: STRING
::  TAG: <PRYWATNA>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='TTE_PZL_EAKC';
_args.UIDREF:=ZL.uidref();
_args.AKCJA:='AKCEPTUJ';
{? ZL.sel_size()>0
|| _args.GRUPA:='T'
?};
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

exec('mp_run','#b__box',_args);
'key:Esc'


\action_accept_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja grupa przed 'Akceptuj' w oknach wertowania
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczono: %1 zleceń. Czy zaakceptować je wszystkie?'@[$ZL.sel_size()])
|| _result:=1;
   KOMM.init(200,,'Akceptacja zleceń'@,'')
?};
sel_nchk();
_result


\action_accept_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja grupa po 'Akceptuj' w oknach wertowania
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\action_revert
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja 'Wycofaj' akceptację zlecenia z przycisków, menu
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());

{? ZL.sel_size()>0
|| _ask:=0;
   _komm:=0;
:: pozostałe parametry przyjmują wartości domyślne - brak wycofywania/usuwania
   exec('zl_wycofaj','!tte_pzl_eakc',ZL.ref(),_ask,_komm)
|| _ask:=1;
   _komm:=1;
:: pozostałe parametry przyjmują wartości domyślne - brak wycofywania/usuwania
   exec('zl_wycofaj','!tte_pzl_eakc',ZL.ref(),_ask,_komm)
:: opcjonalnie - ustalenie domyślnych wartości pozostałych parametrów na podstawie aktualnego stanu zlecenia
::   {? ZL.STAT_N='N'
::   || _cofaj_nagl:=1
::   || _cofaj_nagl:=0
::   ?};
::   {? _cofaj_nagl>0 | ZL.STAT_N='N'
::   || _usun_tech:=1
::   || _usun_tech:=0
::   ?};
::   {? _usun_tech>0 | ZL.STAT_T='N'
::   || _cofaj_tech:=1
::   || _cofaj_tech:=0
::   ?};
::   {? _cofaj_tech>0
::   || _usun_part:=1
::   || _usun_part:=0
::   ?};
::   {? _usun_part>0
::   || _usun_przew:=1
::   || _usun_przew:=0
::   ?};
::   {? _usun_przew>0 | exec('stat_rej','zl_guide',ZL.ref())='N'
::   || _cofaj_przew:=1
::   || _cofaj_przew:=0
::   ?};
::   {? _cofaj_przew>0
::   || _usun_lim:=1
::   || _usun_lim:=0
::   ?};
::   {? _usun_lim>0 | exec('stat_l','zl_limit',ZL.ref())='N'
::   || _cofaj_lim:=1
::   || _cofaj_lim:=0
::   ?};
::   {? _cofaj_lim>0
::   || _usun_rez:=1
::   || _usun_rez:=0
::   ?};
::   exec('zl_wycofaj','!tte_pzl_eakc',ZL.ref(),_ask,_komm,
::      _usun_rez,
::      _cofaj_lim,
::      _usun_lim,
::      _cofaj_przew,
::      _usun_przew,
::      _usun_part,
::      _cofaj_tech,
::      _usun_tech,
::      _cofaj_nagl
::   )
?};
~~


\action_revert_gr1
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja grupa przed 'Wycofaj' akceptację zlecenia z przycisków, menu
::   WY: 0/1
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_result:=0;
{? FUN.ask('Zaznaczono: %1 zleceń. Czy wycofać je wszystkie?'@[$ZL.sel_size()])
|| _result:=1;
   KOMM.init(200,,'Wycofanie akceptacji zleceń'@,'')
?};
sel_nchk();
_result


\action_revert_gr2
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.00]
:: OPIS: Akcja grupa po 'Wycofaj' akceptację zlecenia z przycisków, menu
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
KOMM.select();
~~


\clean
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [18.22]
:: OPIS: Funkcja czyszcząca czynności - w razie potrzeby jak nie ma rekordu kluczowego zrobi done albo cancel
::       Dodatkowo może być wywoływana przez czynność czyszczącą zadania na TODO
::   WE: [_a] - _mp - obiekt Menadżera procesów
::       [_b] - tablica z parametrami wejściowymi
::   WY: obj_new() - obiekt wynikowy
::  TAG: <PUBLICZNA>
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _mp:=_a
|| _mp:=params_get().mp
?};
{? var_pres('_b')>100
|| _in:=_b
|| _in:=params_get().in
?};
params_exec('zl_clean','zl_common',_mp,_in,'ERROR')


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [23.25]
:: OPIS: Formuła ustalająca PARSES
::   WE:
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
params_exec('zl_parses','zl_common')

:Sign Version 2.0 jowisz:1048 2023/06/23 14:09:38 0cc8e99694aea788cbf3cf756b0e499953d3467b7bfa2f72b58206b5678596d1fa05ed0398a0da390483832e646c6dc4d65d798ae125e3ea5c6dd5a1127809430c55db7a161e749b28b8daa3de929f4a9bfed2e6b31cccf08daad90d51eaae1d1ce9363997606d48177550b2be3650ecd7f7a77be32cc3b5707b98b93cac5734
