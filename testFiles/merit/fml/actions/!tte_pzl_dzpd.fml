:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !tte_pzl_dzpd.fml
:: Utworzony: 12.09.2019
:: Autor: AKUL
::======================================================================================================================
:: Zawartość: Formuły czynności TTE_PZL_DZPD - Generowanie zlecenia na podstawie planu dostaw
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Formuła główna czynności generowania zleceń na podstawie planu dostaw (TTE_PZL_DZPD)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;
_context:=params_get().context;
_uid:='TTE_PZL_DZPD';

:: WŁAŚCIWOŚCI CZYNNOŚCI
::# permissions=ODDZ,LMG
::# properties=LOOP

:: PARAMETRY WE:
::# kind=WE, symbol=PD_K, type=_PD_K, name=Pozycja koszyka planu dostaw, required=N, keyref=T
{? var_pres('PD_K',_in)<>type_of(~~) & var_pres('PD_K',_in)<>type_of(null()) || return() ?};
{? var_pres('PD_K',_in)=type_of(~~) || _in.PD_K:=null() ?};
::# kind=WE, symbol=ZTP, type=_ZTP, name=Typ zlecenia, required=N, fml_val="exec('ztp_select','zl_head','P')", fml_exp="exec('ztp_export','zl_head',_a)"
{? var_pres('ZTP',_in)<>type_of(~~) & var_pres('ZTP',_in)<>type_of(null()) || return() ?};
{? var_pres('ZTP',_in)=type_of(~~) || _in.ZTP:=null() ?};

:: PARAMETRY WY:
::# kind=WY, symbol=ZL, type=_ZL, name=Zlecenie, required=N
{? var_pres('ZL',_out)<>type_of(~~) & var_pres('ZL',_out)<>type_of(null()) || return() ?};
::# kind=WY, symbol=KATEGORIA, type=STRING, name=Kategoria zlecenia, required=N
{? var_pres('KATEGORIA',_out)<>type_of(~~) & var_pres('KATEGORIA',_out)<>type_of('') || return() ?};

:: Ustawiam wartość domyślną argumentu LOOP żeby brama się nie zawiesiła
_mp.save(exec('kind_out','#b_port'),'LOOP','N');

_key:=_out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);
_done:=0;

{? _mp.pathProc()
|| _msg:='Niezgodność uruchomienia czynności %1.\nNie można uruchomić ze startu procesów.'@@[_uid];
   FUN.emsg(_msg);
   _mp.error(_msg)
||
   _can_continue:=1;
   {? _in.ZTP=null()
   || {? ZLEC.ZTP<>null()
      || _in.ZTP:=ZLEC.ZTP
      || {? _mp.isGroup()
         ||
::          ZLEC.CHK1 - czy wyświetlano już okno z wyborem typu zlecenia
            {? ZLEC.CHK1<>'T'
            || ZLEC.CHK1:='T';
               _in.ZTP:=exec('ztp_select','zl_head','P')
            ?};
            {? _in.ZTP=null()
            || _can_continue:=0;
               _mp.cancel()
            ?}
         ?}
      ?}
   ?};
   {? _can_continue>0
   ||
      {? _mp.loop()=0 & _in.PD_K & PD_K.seek(_in.PD_K)
      ||
         {? _key<>''
         ||
::          z widoku planu dostaw - akcja: Generuj zlecenie
::          w kontekście rekordu PD_K - akcja dla pojedynczego rekordu
            {? _mp.akcja()='GENERUJ'
            || _args_zl:=exec('pdk2args','!tte_pzl_dzpd');
               _args_zl.MERGE:=1;
               {? _in.ZTP<>null()
               || _args_zl.ZTP:=_in.ZTP
               ?};
               exec('auto_pdk','!tte_pzl_dzpd',_args_zl);
               {? _args_zl.RESULT.tab.first
               || {? _args_zl.ZL_MERGE<>null()
                  || _done:=1;
                     exec('pdk_fill_zl','!tte_pzl_dzpd',$_in.PD_K,_args_zl.RESULT.tab.SQL)
                  || {!
                     |?
                        exec('pdk_fill_zl','!tte_pzl_dzpd',$_in.PD_K,_args_zl.RESULT.tab.SQL);
                        _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"uidref()",''));
                        _args_zl.RESULT.tab.next()
                     !}
                 ?}
              ?}

::          z widoku planu dostaw - akcja: Generuj zlecenie
::          w kontekście rekordu PD_K - akcja dla pojedynczego rekordu w akcji grupowej
            |? _mp.akcja()='GENERUJ_W_GRUPIE'
            || _args_zl:=exec('pdk2args','!tte_pzl_dzpd');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.ZL_NAD:=_context.ZL_NAD;
               _args_zl.COMPLEX:=_context.ZLOZONE;
               _args_zl.MERGE:=0;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
               {? var_pres('DK_C',_context)>0 || _args_zl.DK_C:=_context.DK_C ?};
               {? var_pres('KTM',_context)>0
               || M.cntx_psh();
                  M.prefix();
                  {? M.seek(_context.KTM)
                  || _args_zl.M:=$M.ref();
                     _args_zl.KTM:=M.KTM;
                     _args_zl.M_ATR:=M.M_ATR
                  ?};
                  M.cntx_pop()
               ?};
               exec('auto_pdk','!tte_pzl_dzpd',_args_zl);
               _done:=1;
               _context.ZL:=null;
               {? _args_zl.RESULT.tab.first
               || _context.ZL:=exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"ref()",null());
                  exec('pdk_fill_zl','!tte_pzl_dzpd',$_in.PD_K,_args_zl.RESULT.tab.SQL);
                  _mp.grpkeyAdd(exec('FindAndGet','#table',ZL,_args_zl.RESULT.tab.SQL,,"uidref()",''))
               ?}

::          z widoku planu dostaw - akcja: Generuj zlecenie
::          (przypadek, gdy kolejne pozycje zamówień dołączane są do wygenerowanego zlecenia)
            |? _mp.akcja()='POWIĄŻ_W_GRUPIE'
            || _args_zl:=exec('pdk2args','!tte_pzl_dzpd');
               _args_zl.GRUPA:=1;
               _args_zl.DIALOG:=0;
               _args_zl.ZTP:={? _in.ZTP || _in.ZTP || _context.ZTP ?};
               _args_zl.MERGE:=1;
               _args_zl.ZL_MERGE:=_context.ZL;
               _args_zl.TKTL:=_context.TKTL;
               _args_zl.ILOSC:=_context.ILOSC;
               exec('auto_pdk','!tte_pzl_dzpd',_args_zl);
               _done:=1;
               {? _args_zl.RESULT.tab.first
               || exec('pdk_fill_zl','!tte_pzl_dzpd',$_in.PD_K,_args_zl.RESULT.tab.SQL)
               ?}
            ?}
         ?}
      ?};
      {? _key<>''
      ||
::       Generacja - wypycham pierwsze zlecenie na wyjście
         _zl_uidref:=_mp.grpkeyGet();
         {? type_of(_zl_uidref)=type_of('')
         ||
            _done:=1;

            ZL.cntx_psh();
            ZL.prefix();
            {? ZL.seek(_zl_uidref)
            ||
               do();
               _can_continue:=ZL.put();
               _mp.save(exec('kind_out','#b_port'),'ZL',ZL.ref());
               _mp.save(exec('kind_out','#b_port'),'KATEGORIA',ZL.RODZAJ);
               _mp.save(exec('kind_out','#b_port'),'GRPKEY',_key);
               _mp.grpkeyDel();
               end();

::             Jeżeli są jeszcze jakieś zlecenia to kontynuuję pętlę
               _zl_uidref:=_mp.grpkeyGet();
               {? type_of(_zl_uidref)=type_of('')
               || _mp.loop_continue()
               ?}
            ?};
            ZL.cntx_pop()
         ||
::          Zakończenie (nie powstało żadne zlecenie) - wypycham nullowe zlecenie na wyjście
            _mp.save(exec('kind_out','#b_port'),'ZL',null());
            _done:=1
         ?}
      || _mp.error('Brak oczekiwanego parametru %1.'@@['GRPKEY'])
      ?};
      {? _done>0 || _mp.done() ?}
   ?}
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Opis dla czynności generowania zleceń na podstawie planu dostaw (TTE_PZL_DZPD)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_mp:=params_get().mp;

_desc:='';
_keyRefs:=_mp.getRefs();
_in:=_mp.load(exec('kind_in','#b_port'));

:: jest rekord kluczowy to ustawiam odpowiednie PD_K
{? var_pres('[1]',_keyRefs)
|| _tmp:=exec('FindAndGet','#table',PD_K,_keyRefs[1],,"PD_K.PD_N().SYM",'');
   _desc:={? _tmp<>'' || 'Generuj zlecenia produkcyjne na podstawie planu dostaw %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',PD_K,_keyRefs[1],,"'Generuj zlecenia produkcyjne na podstawie planu dostaw %1'[PD_K.PD_N().SYM]",'')

:: jest parametr wejściowy PD_K to ustawiam odpowiednio
|? var_pres('PD_K',_in)
|| _tmp:=exec('FindAndGet','#table',PD_K,_in.PD_K,,"PD_K.PD_N().SYM",'');
   _desc:={? _tmp<>'' || 'Generuj zlecenia produkcyjne na podstawie planu dostaw  %1'@@[_tmp] || '' ?}
::|| _desc:=exec('FindAndGet','#table',PD_K,_in.PD_K,,"'Generuj zlecenia produkcyjne na podstawie planu dostaw  %1'[PD_K.PD_N().SYM]",'')

|| _desc:='Generuj nowe zlecenie produkcyjne'@@
?};
_desc


\auto_pdk
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Akcja generowania jednego lub wielu zleceń na podstawie pozycji koszyka planu dostaw
::   WE: _args - argumenty dla funkcji generujacej, wynik dzialania exec('auto_args','zl_gen')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('auto_args','zl_gen')
?};

_result:=0;
_can_continue:=1;

PD_K.cntx_psh();
PD_K.clear();

{? PD_K.seek(_args.SRC_REF)
||
   _what:=$PD_K.ID;
:: Blokuję pozycję koszyka dostaw na czas generowania zlecenia
   _ses_id:=exec('blk_lock','#table','PD_K',PD_K.ref(),,2);
   {? _ses_id=PD_K.ses_id()
   || _locked:=1
   || _locked:=0;
      FUN.info(
         'Pozycja koszyka dostaw o identyfikatorze: %1 jest redagowana przez użytkownika \'%2\' na terminalu \'%3\'.'@
         [_what,PD_K.ses_info(_ses_id,'log_name'),PD_K.ses_info(_ses_id,'log_tty')]
      )
   ?};

   {? _locked>0
   ||
::    Sprawdzenie produktu w zleceniach nadrzędnych
      {? _can_continue>0 & _args.ZL_NAD<>null()
      || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,"$KTM=_b.M",0,_args)
         || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
            {? _args.GRUPA>0
            || KOMM.add(_msg,4)
            || FUN.info(_msg)
            ?};

            _can_continue:=0
         || {? exec('FindAndGet','#table',ZL,_args.ZL_NAD,,
                  "exec('chk_ktm','zl_head',TREE,exec('FindAndGet','#table',M,_b.M))>0",0,_args
               )
            || _msg:='Indeks produktu jest wykorzystany w zleceniu wyższego poziomu.'@;
               {? _args.GRUPA>0
               || KOMM.add(_msg,4)
               || FUN.info(_msg)
               ?};

               _can_continue:=0
            ?}
         ?}
      ?};

::    Sprawdzenie terminu realizacji
      {? _can_continue>0
      || {? _args.GRUPA>0
         || {? _args.PL_DATA<date()
            || KOMM.add('Termin realizacji jest wcześniejszy, niż data powołania zlecenia.'@,4);
               _can_continue:=0
            ?}
         || {? _args.PL_DATA<date()
            || {? ~FUN.ask('Generowanie zlecenia\n\n'
                     'Termin realizacji jest wcześniejszy, niż data powołania zlecenia.\n'
                     'Czy wygenerować zlecenie (konieczna będzie korekta daty na zleceniu)?'@,
                  )
               || _can_continue:=0
               ?}
            ?}
         ?}
      ?};

::    Sprawdzam czy na koszyku była podana partia i jeśli tak to blokuję tworzenie zlecenia
      {? _can_continue>0 & _args.DK_C<>''
      || DK_C.cntx_psh();
         DK_C.use(form(8+_args.DK_C));
         DK_C.clear();
         {? DK_C.seek(_args.DK_C)
         || _buf_zam:=exec('buffer','mat_atr');
            _buf_zam.get_dkc();
            {? _buf_zam.has_part()>0
            || _can_continue:=0;
               _msg:='Pozycja koszyku planu dostaw o identyfikatorze: %1 posiada atrybut typu \'Partia\'. '
                     'Tworzenie zlecenia na jej podstawie niedozwolone.'@[_what];
               {? _args.GRUPA=0
               || FUN.emsg(_msg)
               || KOMM.add(_msg,2)
               ?}
            ?}
         ?};
         DK_C.cntx_pop()
      ?};

      {? _can_continue>0
      || PD_K.clear();
         {? PD_K.seek(_args.SRC_REF)
         || {? exec('sprdt','zl_head')
            || exec('auto_zl_core','zl_gen',_args)
            ?}
         ||
            {? _args.GRUPA>0
            || KOMM.add('Wskazana pozycja koszyka planu dostaw została już usunięta.'@,14)
            || FUN.emsg('Wskazana pozycja koszyka planu dostaw została już usunięta.\n'
                        'Proszę ponownie uruchomić funkcję.'@)
            ?}
         ?}
      ?};
::    Odblokowuje PD_K
      exec('blk_unlock','#table','PD_K',PD_K.ref())
   ?}
?};
PD_K.cntx_pop();
~~


\pdk2args
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Generuję/aktualizuję tablicę z argumentami dla funkcji generujących zlecenie na postawie
::       aktualnego rekordu pozycji koszyka planu dostaw PD_K
::   WE: [_a] - wynik działania exec('auto_args','zl_gen')
::   WY: _args - argumenty dla funkcji generującej, wynik działania exec('auto_args','zl_gen')
::----------------------------------------------------------------------------------------------------------------------
{? var_pres('_a')>100
|| _args:=_a
|| _args:=exec('auto_args','zl_gen')
?};

_args.GRUPA:=0;
_args.DIALOG:=1;
_args.SRC_REF:=$PD_K.ref();
_args.M:=$PD_K.M;
_args.KTM:=PD_K.M().KTM;
_args.M_ATR:=PD_K.M().M_ATR;
_args.ILOSC:=PD_K.ILP;
_args.IL_WYTW:=PD_K.ILP;
_args.DK_C:=$PD_K.DK_C;
_args.JM_SYM:=M.J().KOD;
_args.TKTL:=null();
{? ZLEC.GRP=4
|| _args.TKTL:=exec('wyb_ktl','zl_gen',0)
?};
_args.ZTP:=PD_K.ZTP;
_args.DTR:=PD_K.DD;
_args.PL_DATA:=PD_K.DD;
_args.MERGE:=1;
_args.COMPLEX:=PD_K.COMPLEX;
_args.GRP_KEY:='';
_args.OPIS:='Generowane z planu dostaw: '+PD_K.PD_N().SYM;
_args


\action_pdk_generuj
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Akcja 'Generuj zlecenie' z obszaru planu dostaw
::   WE: _a - INTEGER - #REF do rekordu tabeli PD_K (koszyk planu dostaw)
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of(0) || _a ||  -1 ?};
_zlnad:=VAR.A_ZLNAD;
ZLEC.ZTP:=null();

PD_K.cntx_psh();
PD_K.prefix();
{? _ref>0 & PD_K.seek(_ref)
||
   {? PD_K.r_lock(1,1,1)
   || _args:=exec('mp_run_a','#b__box');
      _args.ACT_UID:='TTE_PZL_DZPD';
      _args.UIDREF:=PD_K.uidref();
      _args.AKCJA:='GENERUJ';
      _args.PROC_START:='T';
      _args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);
      exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'PD_K',PD_K.ref());
      exec('mp_run','#b__box',_args)

   || FUN.info('Nie można generować zlecenia — pozycja koszyka planu dostaw redagowana przez innego użytkownika.'@)
   ?};
   PD_K.r_unlock()
?};
PD_K.cntx_pop();
VAR.A_ZLNAD:=_zlnad;
~~


\action_pdk_generuj_bg
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Przed grupowym generowaniem zleceń z planu dostaw
::   WY: 0 / 1
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
_result:=exec('zl_gen_bg','zl_gen',1);
_result


\action_pdk_generuj_ag
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Po grupowym generowaniu zleceń z planu dostaw
::----------------------------------------------------------------------------------------------------------------------
params_set(params_get());
exec('zl_gen_ag','zl_gen',1);
~~


\filtr_ztp
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Ustawienie filtru dla ZTP (Typ zlecenia)
::----------------------------------------------------------------------------------------------------------------------
ZTP.prefix();
ZTP.f_clear();
ZTP.f_set('TYP',,'WP=\'P\'');
1


\pdk_fill_zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Wypełnia pola dot. zlecenia dla pozycji koszyka planu dostaw
::   WE: _a - STRING - ref pozycji koszyka planu dostaw (PD_K)
::       _b - STRING - ref zlecenia
::----------------------------------------------------------------------------------------------------------------------
_ref:={? var_pres('_a')=type_of('') || _a || '' ?};
_zl:={? var_pres('_b')=type_of('') || _b || '' ?};
ZL.cntx_psh();
{? _zl<>'' & ZL.seek(_zl)
||
   PD_K.cntx_psh();
   PD_K.clear();
   {? _ref<>'' & PD_K.seek(_ref)
   ||
      PD_K.ZTP:=ZL.TYP;
      PD_K.COMPLEX:={? ZL.RODZAJ='Z' || 'T' || 'N' ?};
      PD_K.CZY_ZL:={? PD_K.ILP=0 || 'T'|| 'C' ?};
      {? PD_K.put()
      || PD_P.cntx_psh();
         PD_P.prefix();
         {? PD_P.seek(PD_K.PD_P)
         || PD_P.ILKOSZYK:=exec('ilwkoszyku','plan_dostaw',PD_K.PD_N,PD_K.PD_P);
            PD_P.put()
         ?};
         PD_P.cntx_pop()
      ?}
   ?};
   PD_K.cntx_pop()
?};
ZL.cntx_pop();
~~


\pd2zl
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AKUL [19.42]
:: OPIS: Utworzenie zleceń z planów dostaw
::   WE: _a - wolane z 'N'-naglowkow planow, 'P'-pozycji planu, 'K'-koszyka
::----------------------------------------------------------------------------------------------------------------------
_wolanez:=_a;

_Tab:={? _wolanez='N' || PD_N |? _wolanez='P' || PD_P |? _wolanez='K' || PD_K || return(0) ?};

_Sel:=_Tab.sel_aget();
{? ~_Sel.first() || _Sel.REF:=#_Tab.ref(); _Sel.CRC:=_Tab.crc(); _Sel.add() ?};

_env_zlisty:=exec('env_zlisty','zl_gen',1);
_tabref:=_env_zlisty.TABREF;
_tabsel:=_env_zlisty.TABSEL;
params_set('env_zlisty',_env_zlisty);

PD_N.cntx_psh(); PD_P.cntx_psh(); PD_K.cntx_psh();

exec('ini_kom','#message','Generuj zlecenia');

:: I - lock koszyka
_loop:=_Sel.first();
{!
|? _loop
|!
   _loop1:=
      {? _wolanez='N'
      || {? PD_N.seek(_Sel.REF,)
         || PD_K.prefix();
            PD_K.f_clear();
            PD_K.f_set(
               ,'join PD_N using("PD_K".PD_N,PD_N.REFERENCE) join PD_P using("PD_K".PD_P,PD_P.REFERENCE)'
               ,'PD_N.STATUS=\'N\' and PD_P.STAT<>\'Z\' and "PD_K".PD_N=:_a and "PD_K".ILP<>0'
               ,PD_N.ref());
            PD_K.f_first()
         ?}
      |? _wolanez='P'
      || {? PD_P.seek(_Sel.REF,)
         || PD_K.prefix();
            PD_K.f_clear();
            PD_K.f_set(
               ,'join PD_N using("PD_K".PD_N,PD_N.REFERENCE) join PD_P using("PD_K".PD_P,PD_P.REFERENCE)'
               ,'PD_N.STATUS=\'N\' and PD_P.STAT<>\'Z\' and "PD_K".PD_N=:_a and "PD_K".PD_P=:_b and "PD_K".ILP<>0'
               ,PD_N.ref(),PD_P.ref());
            PD_K.f_first()
         ?}
      |? _wolanez='K'
      || PD_K.seek(_Sel.REF,) & PD_K.ILP<>0
      ?};

   {!
   |? _loop1
   |!
      _err:={? ~exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DZPD') || 1
            |? PD_K.M().A='N' || 2
            |? ~exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DZLE') || 3
            |? ~exec('chk_role','#b__box',OPERATOR.USER,'TTE_PZL_DZLP') || 4
            |? ~(PD_K.M().R='W' | PD_K.M().R='P') || 5
            |? exec('pd_k_lock','plan_dostaw',0)=0 || 99
            || 0
            ?};
      {? _err
      || __kom_on:=1;
         _sym:=PD_K.PD_N().SYM;
         {? __kom.find_msg(_sym)
         || __kom.set_root(_sym)
         || __kom.sect_beg(_sym)
         ?};
         _ktm:=PD_K.M().KTM;
         {? __kom.find_msg(_ktm)
         || __kom.set_root(_ktm)
         || __kom.sect_beg(_ktm)
         ?};
         __kom.sect_beg($PD_K.ID);
         {? _err=1 || __kom.add('Brak uprawnień do czynności powoływania zlecenia na podstawie planu dostaw.'@,7)
         |? _err=2 || __kom.add('Pozycja koszyka dotyczy nieaktywnego indeksu. Została pominięta.'@,7)
         |? _err=3 || __kom.add('Brak uprawnień do czynności rejestracji zlecenia prostego.'@,7)
         |? _err=4 || __kom.add('Brak uprawnień do czynności rejestracji zlecenia z półfabrykatami.'@,7)
         |? _err=5 || __kom.add('Produkt: %1 nie jest wyrobem lub półproduktem. Pozycja koszyka pominięta.'@[PD_K.M().N])
         |? _err=99 || __kom.add('Pozycja koszyka zablokowana przez innego użytkownika. Została pominięta.'@,7)
         ?};
         __kom.sect_end()
      ||
::       brak błędu, dodaje rekord do tabeli
         _tabref.SRC_REF:=#PD_K.ref();
         _tabref.TOWAR:=PD_K.M().KTM;
         _tabref.M_N:=PD_K.M().N;
         _tabref.DATA:=PD_K.DD;
         _tabref.IL:=PD_K.ILP;
         _tabref.KH_N:=PD_K.KH().NAZ;
         _tabref.TKTL:=$(exec('wyb_ktl','zl_gen',0));
         _tabref.RODZAJ:=PD_K.COMPLEX;
         _tabref.DK_C:=$PD_K.DK_C;
         _tabref.M:=$PD_K.M;
         _tabref.ZTP:=PD_K.ZTP().TYP;
         _tabref.M_ATR:=$PD_K.M().M_ATR;
         _tabref.add()
      ?};
      _loop1:={? _wolanez='K' || 0 || PD_K.f_next() ?}
   !};
   _loop:=_Sel.next()
!};
{? _wolanez='N' | _wolanez='P' || PD_K.f_clear() ?};

:: II - zgrupowanie pozycji koszyka wg wyrozniajacych atrybotow
{? _tabref.first()
|| {? __kom_on
   || __kom.set_root('Podsumowanie');
      __kom.add('Zamknij okno aby kontynuować.'@,7)
   ?};
   exec('end_kom','#message');
   {? _tabref.size()=1
   || exec('action_pdk_generuj','!tte_pzl_dzpd',_tabref.SRC_REF)
   || _res:=exec('action_pdk_generuj_bg','!tte_pzl_dzpd',_tabref);
      {? _res
      || _res:=exec('action_pdk_generuj_ag','!tte_pzl_dzpd',_tabref,_tabsel)
      ?}
   ?}
|| __kom_on:=1;
   __kom.set_root('Podsumowanie');
   __kom.add('Z wybranych pozycji nie można wygenerować zlecenia.'@,7);
   exec('end_kom','#message')
?};

:: III - unlock koszyka
PD_K.index('SID');
PD_K.prefix(PD_K.ses_id());
{? PD_K.first()
|| {!
   |? PD_K.cntx_psh();
      exec('pd_k_unlock','plan_dostaw');
      PD_K.cntx_pop();
      PD_K.first()
   !}
?};

PD_N.cntx_pop(); PD_P.cntx_pop(); PD_K.cntx_pop();
0

:Sign Version 2.0 jowisz:1045 2023/10/25 11:20:40 0447fd22166e50a6f72706b1c1854fd6f1de1f1fe4c4b9102fcd80dd80b174afb762cf3b95cb314c6856edc6936eab05cbf7dff1e566369a0312382bb3079a30fae5ef08438972d3a41863f62ac6e3e1e61cd562a63061aef89df0ebf6ed7f7cfd6ead2ce18dd233391cf3bce51ff7562083159344e5bdb02aed2cdb9878a11b
