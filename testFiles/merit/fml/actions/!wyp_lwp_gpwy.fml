:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: !wyp_lwp_gpwy.fml
:: Utworzony: 04.09.2017
:: Autor: WH
::======================================================================================================================
:: Zawartość: Generowanie poleceń wydania
::======================================================================================================================


\main
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Formuła główna czynności generowania poleceń wydania (WYP_LWP_GPWY)
::       Polecenia generowane sa tylko dla O_VIEW, do ktorych user ma uprawnienia z uwzglednieniem ustawien obszaru
::       jesli ZPOLGEN.PGRUPY, to program bedzie generowal tylko dla pracownikow z tej grupy
::       jesli podano ZPOLGEN.PAKASORT, to tylko towary z tego asortymentu
::       kazde polecenie generowane jest w oddzielnej transakcji
::       polecenie pozostaje tylko wtedy, gdy jego dane sa formalnie poprawne
::       brani sa pod uwage tylko pracownicy, do ktorych user ma uprawnienia
::       pracownik musi miec w podanym dniu ZPOLGEN.DATAW zapotrzebowanie
::
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::       context - [obj_new] obiekt służący do przekazywania kontekstu wywołania czynności
::  OLD: \polwo_gener/nadzor.fml
::----------------------------------------------------------------------------------------------------------------------
::# permissions=ODDZ,F_ZATR,UD_SKL
::# properties=LOOP,SERVICE
::# parses=exec('parses','!wyp_lwp_gpwy')

::# condition=Rejestracja polecenia wydania, act_uid=WYP_LWP_DPWY,   auto=T,  formula=_a.POLWO<>~~ & _a.POLWO<>null()

::# kind=WE, symbol=MGRP,     type=_MGRP,    name=Podgrupa materiałowa,          required=N, fml_val="exec('mgrp_select','material')"
::# kind=WE, symbol=PGRUPY,   type=_PGRUPY,  name=Grupa pracowników,             required=N, fml_val="exec('pgrupy_select','normatyw')"
::# kind=WE, symbol=P,        type=_P,       name=Wskazanie pracownika,          required=N
::# kind=WE, symbol=MGR,      type=_MGR,     name=Grupa materiałowa lub usługowa,required=N, fml_val="exec('mgr_select','material')"
::# kind=WE, symbol=DATA,     type=DATE,     name=Data,                          required=N
::# kind=WY, symbol=POLWO,    type=_POLWO,   name=Polecenie wydania wyposażenia, required=N
::# kind=WY, symbol=RESULT,   type=STRING,   name=Wynik działania,               required=N

_in:=params_get().in;
_int:=params_get().int;
_out:=params_get().out;
_mp:=params_get().mp;

_out.GRPKEY:=_mp.grpkey(_out.GRPKEY,_in.GRPKEY);

_mp.trigRef('POLWO',,1,,exec('kind_out','#b_port'),'POLWO',,,1);

_dialog:=1;
_result:=1;
_can_continue:=1;

{? _mp.isAutoRun() | _mp.isService()
|| _dialog:=0
?};

:: Parametry
ZPOLGEN.blank();
_numeracja:=exec('get','#params',700502);

_mgr:=null();
{? type_of(_in.MGR)>0
|| _mgr:=exec('FindAndGet','#table',MGR,_in.MGR,,,null())
?};
{? _mgr<>null()
|| ZPOLGEN.MGR:=_mgr
?};
_mgrp:=null();
{? type_of(_in.MGRP)>0
|| _mgrp:=exec('FindAndGet','#table',MGRP,_in.MGRP,,,null())
?};
{? _mgrp<>null()
|| ZPOLGEN.MGRP:=_mgrp;
   ZPOLGEN.MGR:=exec('FindAndGet','#table',MGRP,_mgrp,,"MGR",null())
?};
_pgrupy:=null();
{? type_of(_in.PGRUPY)>0
|| _pgrupy:=exec('FindAndGet','#table',PGRUPY,_in.PGRUPY,,,null())
?};
{? _pgrupy<>null()
|| ZPOLGEN.PGRUPY:=_pgrupy
?};
_pracownik:=null();
{? type_of(_in.P)>0
|| _pracownik:=exec('FindAndGet','#table',P,_in.P,,,null());
   ZPOLGEN.PGRUPY:=exec('ref_gp','normatyw',_pracownik)
?};
_data:=date(0,0,0);
{? var_pres('DATA',_in)=type_of(date())
|| _data:=_in.DATA;
   ZPOLGEN.DATAW:=_data;
   {? _data<date()
   || _can_continue:=0;
      _msg:='Data wydania nie może byc wcześniejsza niż data bieżąca.'@;
      {? _mp.isGroup()
      || KOMM.add(_msg,2,,1)
      || FUN.emsg(_msg)
      ?};
      _mp.error(_msg)
   ?}
?};

_mp.save(exec('kind_out','#b_port'),'RESULT','BŁĄD');

{? _can_continue>0 & ~_mp.loop() & _out.POLWO=~~
||
:: Sekcja sprawdzania

:: generacja mozliwa pod warunkiem zdefiniowania w parametrach schematu numeracji
   {? _numeracja=''
   || _can_continue:=0;
      _msg:='Nie podano schematu automatycznej numeracji poleceń w parametrach.'@;
      {? _mp.isGroup()
      || KOMM.add(_msg,2,,1)
      || FUN.emsg(_msg)
      ?};
      _mp.error(_msg)
   ?};

::   {? _can_continue>0 & _dialog>0 & _mp.pathTodo()
::   || _can_continue:=
::   ?};
   {? _can_continue>0 & _dialog>0
   ||
::    Edycja parametrów
      MGRP.cntx_psh();
      OSOBA.cntx_psh();
      MGRP.clear();
      PGRUPY.cntx_psh();
      PGRUPY.win_sel('SEL');
      POM.TYPDOK:=INFO.POLWOSN;
      POM.TAB:='POLWO';
      ZPOLGEN.win_edit('RED');
      _zpolgen:=obj_new('BEFORE_MGR'
                        ,'EDIT_PGRUPY'
                        ,'EDIT_MGR'
                        ,'EDIT_MGRP'
                        ,'EDIT_DATAW'
      );
      _zpolgen.BEFORE_MGR:=null();
      _zpolgen.EDIT_PGRUPY:=1;
      _zpolgen.EDIT_MGR:=1;
      _zpolgen.EDIT_MGRP:=1;
      _zpolgen.EDIT_DATAW:=1;

      {? _pgrupy<>null()
      || _zpolgen.EDIT_PGRUPY:=0
      ?};
      {? _pracownik<>null()
      || _zpolgen.EDIT_PGRUPY:=0
      ?};
      {? _mgr<>null()
      || _zpolgen.EDIT_MGR:=0
      ?};
      {? _mgrp<>null()
      || _zpolgen.EDIT_MGR:=0;
         _zpolgen.EDIT_MGRP:=0
      ?};

      params_set('zpolgen',_zpolgen);
      {? _pracownik<>null()
      || exec('FindAndGet','#table',P,_pracownik,,"P.OSOBA()",null());
         ZPOLGEN.efld_opt('RED','enable=1',OSOBA,'NAZWISKO');
         ZPOLGEN.efld_opt('RED','enable=1',OSOBA,'PIERWSZE')
      || ZPOLGEN.efld_opt('RED','enable=0',OSOBA,'NAZWISKO');
         ZPOLGEN.efld_opt('RED','enable=0',OSOBA,'PIERWSZE')
      ?};
      {? ZPOLGEN.edit("_fld:=chk_rec('DATA','DATAW');
         {? _fld=''
         || {? ZPOLGEN.DATA<=ZPOLGEN.DATAW
            || {? date()<=ZPOLGEN.DATAW
               || ''
               || FUN.emsg('Data wydania nie może byc wcześniejsza niż data bieżąca.'@);
                  'DATAW'
               ?}
            || FUN.emsg('Data wydania nie może byc wcześniejsza od daty polecenia.'@);
               'DATAW'
            ?}
         || _fld
         ?}")
      || _can_continue:=1
      || _can_continue:=0;
         _mp.cancel()
      ?};
      PGRUPY.cntx_pop();
      MGRP.cntx_pop();
      OSOBA.cntx_pop()
   ?};
   {? _can_continue>0
   ||
::      PAKASOP.cntx_psh();
      POZPG.cntx_psh();
::    generacja polecen wg zadanych parametrow
      _can_continue:=1;
      {? ZPOLGEN.PGRUPY<>null()
      ||
::       sprawdzenie, czy grupa nie jest pusta
         POZPG.index('DANE');
         POZPG.prefix(ZPOLGEN.PGRUPY);
         _can_continue:=POZPG.first();
::       nie zdejmowac prefiksu
         {? _can_continue=0
         || _msg:='Wskazana grupa nie zawiera pracowników.'@;
            {? _mp.isGroup()
            || KOMM.add(_msg,2,,1)
            || FUN.emsg(_msg)
            ?};
            _mp.error(_msg)
         ?}
      ?};
::      {? ZPOLGEN.PAKASORT<>null()
::      ||
::::       sprawdzenie, czy asortyment nie jest pusty
::         PAKASOP.index('AT');
::         PAKASOP.prefix(ZPOLGEN.PAKASORT);
::         _can_continue:=PAKASOP.first();
::::          nie likwidowac prefixu
::         {? _can_continue=0
::         || _msg:='Wskazany asortyment jest pusty.'@;
::            {? _mp.isGroup()
::            || KOMM.add(_msg,2,,1)
::            || FUN.emsg(_msg)
::            ?};
::            _mp.error(_msg)
::         ?}
::      ?};
      {? _can_continue>0
      ||
         POM.TYPDOK:=_numeracja;
         POM.TAB:='POLWO';
::       Tworzenie poleceń
         {? _pracownik<>null()
         || P.f_set('T',,'"P"."REFERENCE"=:_a',_pracownik)
         |? _mp.isService()
         || P.f_set('T','join F_ZATR','"F_ZATR"."DOCELOWA"=\'T\'')
         || exec('filtruj_p','wyp')
         ?};
         POLWO.cntx_psh();
         POLWO.clear();
         PWOPOZ.cntx_psh();
         PWOPOZ.clear();
::       Sprawdza pracownikow wg filtra
         {? P.f_first()
         ||
            KOMM.init(250,,'Generacja poleceń wydania wyposażenia'@);
            {!
            |?
::             jezeli podano grupe, to czy pracownik do niej nalezy
               {? {? ZPOLGEN.PGRUPY || ZPOLGEN.PGRUPY=exec('ref_gp','normatyw',P.ref()) || 1 ?}
               ||
                  {? exec('test_zatr','phr_dane',ZPOLGEN.DATAW)>0
                  ||
::                   utworzenie naglowka
::                   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                     _ilrek:=0;
                     _ilgen:=0;
                     do();
                     POLWO.SYM:='~'+$POLWO.tm_stamp();
                     {? POLWO.add()
                     ||
                        POLWO.NR:=0;
                        POLWO.blank();
                        POLWO.P:=P.ref();
                        POLWO.DATA:=ZPOLGEN.DATA;
                        POLWO.DATA_W:=ZPOLGEN.DATAW;
                        POLWO.put();
                        POLWO.NR:=exec('numer_new','numery','PACZKA');
                        exec('znak','numery','POLWO');

                        {? POLWO.lock(1,1,1)
                        ||
::                         najpierw sprawdzenie zapotrzebowania w danym dniu
                           _ilrek:=exec('prep_ctril','wyp_polwo');
                           {? _ilrek>0
                           ||
                              {? var_pres('_pos_res')>100
                              || obj_del(_pos_res)
                              ?};
                              _pos_res:=exec('polp_fga','wyp_polwo',ZPOLGEN.MGRP,ZPOLGEN.MGR);
                              _ilgen:=_pos_res.ILEGEN;
                              {? _pos_res.RESULT<=0
                              || _result:=0
                              ?};
                              {? _pos_res.RESULT<=0 | _pos_res.ILEGEN<=0
                              || undo()
                              ?}
                           || undo()
                           ?};
                           exec('drop_ctril','wyp_polwo');
                           POLWO.unlock()
                        || undo()
                        ?}
                     || _result:=0
                     ?};
                     end();
                     {? _ilrek<=0
                     || _sect:='Pracownik: %1'@[exec('osoba_npd','wyp',P.OSOBA)];
                        {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                        _msg:='Normatyw pracownika pusty. Polecenie niewygenerowane.';
                        KOMM.add(_msg,2,,1);
                        KOMM.sect_end()
                     |? _ilgen<=0
                     || _sect:='Pracownik: %1'@[exec('osoba_npd','wyp',P.OSOBA)];
                        {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                        _msg:='Brak zapotrzebowania. Polecenie niewygenerowane';
                        KOMM.add(_msg,2,,1);
                        KOMM.sect_end()
                     ?}
::                   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                  ||
                     {? _pracownik<>null()
                     ||
::                      Tylko jeżeli pracownik był przekazany na wejściu jeżeli jest niezatrudniony
::                      zgłaszam błąd, w pozostałych przypadkach dla niezatrudnionych się nic nie wygeneruje, ale
::                      wygeneruje się dla zatrudnionych i czynność nie powinna zwrócić błędu w takim przypadku
                        _result:=0
                     ?};
                     _sect:='Pracownik: %1'@[exec('osoba_npd','wyp',P.OSOBA)];
                     {? KOMM.find_msg(_sect) || KOMM.set_root(_sect) || KOMM.sect_beg(_sect) ?};
                     _msg:='Data wydania nie może być późniejsza od dnia zakończenia pracy pracownika.';
                     KOMM.add(_msg,2,,1);
                     KOMM.sect_end()
                  ?}
               ?};
               P.f_next()
            !};
            {? _dialog>0
            || KOMM.select()
            ?}
         || FUN.emsg('Brak uprawnień do pracowników.'@)
         ?};
         P.f_clear();
         PWOPOZ.cntx_pop(); POLWO.cntx_pop()
      || FUN.info('Generacja nie została wykonana.'@)
      ?};
      POZPG.cntx_pop();
::      PAKASOP.cntx_pop()
      ~~
   ?}
?};
{? _can_continue>0
||
   _polwo:=_mp.grpkeyGet();
   {? _polwo=~~
   ||
::    nie ma poleceń wydań do wyemitowania
      _mp.done()
   ||
::    Zapisanie parametru wyjściowego POLWO, zakończenie czynności
      do();
::    grpkey - POLWO - del
      {? _mp.grpkeyDel()
      ||
         _polwo_ref:=exec('FindAndGet','#table',POLWO,_polwo,,,null());
::       save - out - POLWO
         _mp.save(exec('kind_out','#b_port'),'POLWO',_polwo_ref);
::       grpkey - POLWO - get
         {? _mp.grpkeyGet()<>~~
         ||
::          kontynuacja pętli
            _mp.loop_continue()
         ?}
      ?};
      _mp.done();
      end()
   ?}
?};
{? _result>0
|| _mp.save(exec('kind_out','#b_port'),'RESULT','OK')
?};
~~


\desc
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Opis dla czynności generowania poleceń wydania (WYP_LWP_GPWY)
::       UWAGA: do pobrania parametrów stosować params_get() = tablica nazwana:
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: zwraca opis Zadania
::----------------------------------------------------------------------------------------------------------------------
_desc:='Wygeneruj polecenia wydania'@@;
_desc


\generuj_action
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Akcja 'Generuj' w oknie wertowania poleceń, uruchamia czynność
::  TAG: <MBUILDER>
::----------------------------------------------------------------------------------------------------------------------
_args:=exec('mp_run_a','#b__box');
_args.ACT_UID:='WYP_LWP_GPWY';
_args.AKCJA:='GENERUJ';
_args.PROC_START:='T';
_args.CONTEXT:=obj_new('RESULT');
_args.CONTEXT.RESULT:=0;
_args.PORTS_IN:=exec('portsIn','#b__box',_args.ACT_UID);

::exec('portsInSet','#b__box',_args.PORTS_IN,_args.ACT_UID,'ZL',ZL.ref());

exec('mp_run','#b__box',_args)


\zpolgen_mgr_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed wyświetleniem grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
1


\zpolgen_mgr_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed redakcją grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_zpolgen:=params_get().zpolgen;
_zpolgen.BEFORE_MGR:=ZPOLGEN.MGR;
POMOC.RODZ:='T';
HELP.MGR:=ZPOLGEN.MGR;
MGRP.actions('WER','');
_zpolgen.EDIT_MGR


\zpolgen_mgr_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WE [17.42]
:: OPIS: Po redakcji grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
HELP.MGR:=ZPOLGEN.MGR;
_zpolgen:=params_get().zpolgen;

{? _zpolgen.BEFORE_MGR<>ZPOLGEN.MGR
|| ZPOLGEN.MGRP:=null()
?};
1


\zpolgen_mgrp_bd
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed wyświetleniem grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
1


\zpolgen_mgrp_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed redakcją grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_zpolgen:=params_get().zpolgen;
_result:=_zpolgen.EDIT_MGRP;
{? _result>0
|| MGRP.actions('WER','dpuDPU:dD')
?};
_result


\zpolgen_mgrp_ae
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WE [17.42]
:: OPIS: Po redakcji grupy materiałowej (ZPOLGEN.MGR) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
{? ZPOLGEN.MGRP<>null()
|| ZPOLGEN.MGR:=ZPOLGEN.MGRP().MGR;
   win_disp()
?};
MGRP.actions('WER');

1


\zpolgen_pgrupy_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed redakcją grupy pracowników (ZPOLGEN.PGRUPY) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_zpolgen:=params_get().zpolgen;
_zpolgen.EDIT_PGRUPY


\zpolgen_dataw_be
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Przed redakcją planowanej daty wydania (ZPOLGEN.DATAW) w oknie RED
::   WY: 1
::----------------------------------------------------------------------------------------------------------------------
_zpolgen:=params_get().zpolgen;
_zpolgen.EDIT_DATAW


\parses
::----------------------------------------------------------------------------------------------------------------------
::  UTW: WH [17.42]
:: OPIS: Formuła ustala PARSES
::   WE: UWAGA. Do pobrania parametrów stosować params_get() = tablica nazwana:
::       in  - [obj_new] - parametry wejściowe czynności
::       int - [obj_new] - parametry wewnętrzne czynności
::       out - [obj_new] - parametry wyjściowe czynności
::       mp  - obiekt odpowiedzialny za obsługę procesu
::   WY: 0/1
::----------------------------------------------------------------------------------------------------------------------
_in:=params_get().in;
_mp:=params_get().mp;
_result:=0;

{? _mp.isService()
|| _args:=__PARSES.args('OkresRok');
   _args.OBSZAR:='LMG';
   _args.AR:=date()~1;
   _args.AM:=date()~2;
   __PARSES.setVal('OkresRok',_args);
   _result:=1
|| _result:=1
?};
_result


:Sign Version 2.0 jowisz:1048 2020/10/16 15:19:22 1dd104bd9b4050e78d08d9af07209f9dc3d8cb91ef427ec63319e43752c4166e16455d5140e404fc9ca6056059dea95e1344c29bd571b72219be8c917bbb957982ed80685344c6fc74c594c5b180704496e9494720af288fb0c802bf0373858fef4ff04b8cca317c4f1d5f323eba4db2d6e4777f358d2cdaf6d0b7f7ecb47109
