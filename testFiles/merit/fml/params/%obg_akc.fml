:!UTF-8
:: (c) Macrologic S.A. Wszelkie prawa zastrzeżone
::======================================================================================================================
:: Nazwa pliku: %obg_akc.fml
:: Utworzony: 14.09.2015
:: Autor: AMK
::======================================================================================================================
:: Zawartość: Obsługa automatycznej dekretacji - definicje automatów rejestrujących
::======================================================================================================================


\usr_form
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Formuła na wybór użytkowników
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('TABWYBUS');
TABWYBUS:=tab_tmp(1,'REF_US','INTEGER','Ref użytkownika'@,
                    'KOD_US','STRING[10]','Kod użytkownika'@
                  );
TABWYBUS.KOD_US:='szef'; TABWYBUS.add();
TABWYBUS.KOD_US:='admin'; TABWYBUS.add();
TABWYBUS


\check_kw
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.10]
:: OPIS: Przykładowa formuła do wykorzystania na wdrożeniu - do formuły po redakcji innej danej typu liczbowego.
::       Pokazuje komunikat w przypadku, jeśli wartość innej danej jest większa od podanej.
::   WE: _a - wartość graniczna
::----------------------------------------------------------------------------------------------------------------------
{? _=1 & type_of(_a)=type_of(0) & #EDOK_ATR.WAR>_a
|| FUN.info('Wprowadzono wartość większą od %1.'@[_a])
?}


\sel_kh
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.10]
:: OPIS: Przykładowa formuła do wykorzystania na wdrożeniu - słownik z kontrahentami
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('WT_KH');
WT_KH:=tab_tmp(2,'KOD','STRING[8]','Kod',
                 'TR','STRING[80]','Treść',
                 'REF_SQL','STRING[16]','Ref SQL');
KH.cntx_psh(); KH.index('KOD'); KH.prefix(2);
{? KH.first()
|| {! |?
      WT_KH.KOD:=KH.KOD;
      WT_KH.TR:=KH.NAZ_P;
      WT_KH.REF_SQL:=$KH.ref();
      WT_KH.add();
      KH.next()
   !}
?};
KH.cntx_pop();
WT_KH


\akc_validate
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [12.10]
:: OPIS: Przykładowa formuła do wykorzystania na wdrożeniu - walidacja przy akceptacji.
::----------------------------------------------------------------------------------------------------------------------
VAR_DEL.delete('__VALID');
__VALID:=tab_tmp(2,'BLOKAKC','INTEGER','Blokada akceptacji',
                   'OPIS','STRING[255]','Opis');
: Tu należy wprowadzić ewentualny warunek i wprowadzanie komunikatów na wzór poniżej:
:__VALID.BLOKAKC:=1; __VALID.OPIS:='Komunikat blokujący'; __VALID.add();
__VALID.BLOKAKC:=3; __VALID.OPIS:='Komunikat nieblokujący'; __VALID.add();
__VALID


\brama_zlozona
::----------------------------------------------------------------------------------------------------------------------
::  UTW: AMK [17.00]
:: OPIS: Formuła zamykająca warunkowa dla bramy złozonej
::   WE: _a - nazwa poprzedniego elementu
::----------------------------------------------------------------------------------------------------------------------
_zwrot:=0; naz_el:=_a;
_mp:=params_get().mp;
_tab:=_mp.gate_state();
{? _tab.first()
|| {! |?
      _zwrot:=_tab.COUNT &
              exec('FindAndGet','#table',B_PREL,_tab.FROM,,"B_PREL.SYMBOL=naz_el");
      ~_zwrot & _tab.next()
   !}
?};
VAR_DEL.delete('naz_el');
_zwrot


\godz_del_diet
::----------------------------------------------------------------------------------------------------------------------
::  UTW: PJ [12.41]
:: OPIS: Przykladowa formula walidacyjna do wykonywania podczas akceptacji etapu:
::       test czy godziny delegacji zgadzaja sie z godzinami z diet
::  OLD: \godz_del_diet/delegdan.fml
::----------------------------------------------------------------------------------------------------------------------
_tab:=tab_tmp(1,'BLOKAKC','INTEGER','BLOKAKC',
                'OPIS','STRING[255]','OPIS');
{? EDOKUM.TYP().CZY_PLAN=1
   & EDOKUM.DATA_OD<>date(0,0,0) & EDOKUM.DATA_DO<>date(0,0,0)
   & (EDOKUM.TYP().CZY_GODZ=2 | EDOKUM.GODZ_DO<>time(0,0,0))
   & (EDOKUM.TYP().CZY_GODR=2 | EDOKUM.GODZ_OD<>time(0,0,0))
|| _sum_del:=0;
   _sum_diet:=0;

:: suma godzin z delegacji
   _tmp_dni:=EDOKUM.DATA_DO-EDOKUM.DATA_OD;
   _sum_del:=_tmp_dni*24+((EDOKUM.GODZ_DO~1)-(EDOKUM.GODZ_OD~1));
   _tmp_min:=((EDOKUM.GODZ_DO~2)-(EDOKUM.GODZ_OD~2));
   _sum_del+=(_tmp_min/60)$2;

:: suma godzin z diet
   EDOKUMD.cntx_psh();
   EDOKUMD.index('DELEG');
   EDOKUMD.prefix(EDOKUM.ref());
   {? EDOKUMD.first()
   || {! |?
         {? EDOKUMD.Z_CZY_G='Z'
         || _tmp_dni:=EDOKUMD.DATA_DO-EDOKUMD.DATA_OD;
            _godz:=_tmp_dni*24+((EDOKUMD.GODZ_DO~1)-(EDOKUMD.GODZ_OD~1));
            _tmp_min:=((EDOKUMD.GODZ_DO~2)-(EDOKUMD.GODZ_OD~2));
            _godz+=(_tmp_min/60)$2
         |? EDOKUMD.Z_CZY_G='G'
         || _godz:=EDOKUMD.CZAS_GDZ+(EDOKUMD.CZAS_MIN/60)$2
         ?};
         _sum_diet+=_godz;
         EDOKUMD.next()
      !}
   ?};
   EDOKUMD.cntx_pop();
:: porownanie
   {? _sum_del<>_sum_diet
   || _tab.BLOKAKC:=1;
      _tab.OPIS:='Uwaga: Liczba godzin z nagłówka delegacji ('+$_sum_del
                +') nie jest zgodna z sumą godzin z pozycji diet ('+$_sum_diet+').';
      _tab.add()
   ?}
?};
_tab

:Sign Version 2.0 jowisz:1028 2019/06/07 16:01:02 6cd9479361a66bbdb094559ab04476cf1fe502fbd0dc08349a252a7c07a299e8f1b90a66a446770fd58ef94bedc678f5d43cd0dc402a998be781a874a42e09cb38b1a9b73117c58f6030f641a940a71ae80bf9fbe27a4ed4fbabab27bee6684a39394a8c5440c2103d669c3cf8af89d81a91713b1d834010f163066a183d7d0a
